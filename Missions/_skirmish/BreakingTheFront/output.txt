// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitSettings ;
  11: CALL 51 0 0
// if debug then
  15: LD_EXP 1
  19: IFFALSE 38
// begin PlaceSeeing ( 1 , 1 , 1 , - 372963 ) ;
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 372963
  32: NEG
  33: PPUSH
  34: CALL_OW 330
// end ; SetTechnologies ;
  38: CALL 602 0 0
// SetDiplomacy ;
  42: CALL 814 0 0
// PrepareGame ;
  46: CALL 896 0 0
// end ;
  50: END
// export debug , GameType , game , disableGlobalTimer ; export mc_amer , mc_leg , mc_rus_1 , mc_rus_2 ; export playerCommander , playerForces , allyCommander , Powell , Farmer , ruOutpost , ruEscape , staticMines , baseCaptured , legDestCounter , cratesSpawns , legOfferAccepted , legChangeSide , allyDestCounter , sibBombAllowed , reinforceAllowed , commander , cratesSpawn , outpostEscape , dialogueMineDetected ; end_of_file export function InitSettings ; begin
  51: LD_INT 0
  53: PPUSH
// debug := 0 ;
  54: LD_ADDR_EXP 1
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// GameType := 1 ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 1
  69: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  70: LD_ADDR_OWVAR 67
  74: PUSH
  75: LD_INT 0
  77: PPUSH
  78: CALL_OW 426
  82: ST_TO_ADDR
// sibBombAllowed := GetMultiPlayerSetting ( 1 ) - 1 ;
  83: LD_ADDR_EXP 23
  87: PUSH
  88: LD_INT 1
  90: PPUSH
  91: CALL_OW 426
  95: PUSH
  96: LD_INT 1
  98: MINUS
  99: ST_TO_ADDR
// reinforceAllowed := GetMultiPlayerSetting ( 2 ) - 1 ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: LD_INT 2
 107: PPUSH
 108: CALL_OW 426
 112: PUSH
 113: LD_INT 1
 115: MINUS
 116: ST_TO_ADDR
// cratesSpawn := GetMultiPlayerSetting ( 3 ) ;
 117: LD_ADDR_EXP 26
 121: PUSH
 122: LD_INT 3
 124: PPUSH
 125: CALL_OW 426
 129: ST_TO_ADDR
// commander := GetMultiPlayerSetting ( 4 ) ;
 130: LD_ADDR_EXP 25
 134: PUSH
 135: LD_INT 4
 137: PPUSH
 138: CALL_OW 426
 142: ST_TO_ADDR
// if not commander then
 143: LD_EXP 25
 147: NOT
 148: IFFALSE 158
// commander := 3 ;
 150: LD_ADDR_EXP 25
 154: PUSH
 155: LD_INT 3
 157: ST_TO_ADDR
// if not debug then
 158: LD_EXP 1
 162: NOT
 163: IFFALSE 167
// exit ;
 165: GO 224
// display_strings := [ Difficulty:  & Difficulty , sibBomb:  & sibBombAllowed , reinforceAllowed:  & reinforceAllowed , cratesSpawn:  & cratesSpawn , commander:  & commander ] ;
 167: LD_ADDR_OWVAR 47
 171: PUSH
 172: LD_STRING Difficulty: 
 174: PUSH
 175: LD_OWVAR 67
 179: STR
 180: PUSH
 181: LD_STRING sibBomb: 
 183: PUSH
 184: LD_EXP 23
 188: STR
 189: PUSH
 190: LD_STRING reinforceAllowed: 
 192: PUSH
 193: LD_EXP 24
 197: STR
 198: PUSH
 199: LD_STRING cratesSpawn: 
 201: PUSH
 202: LD_EXP 26
 206: STR
 207: PUSH
 208: LD_STRING commander: 
 210: PUSH
 211: LD_EXP 25
 215: STR
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// every 0 0$1 trigger game and GameType = 1 and not disableGlobalTimer do
 229: LD_EXP 3
 233: PUSH
 234: LD_EXP 2
 238: PUSH
 239: LD_INT 1
 241: EQUAL
 242: AND
 243: PUSH
 244: LD_EXP 4
 248: NOT
 249: AND
 250: IFFALSE 273
 252: GO 254
 254: DISABLE
// begin enable ;
 255: ENABLE
// display_strings := [ #SkrTime , tick ] ;
 256: LD_ADDR_OWVAR 47
 260: PUSH
 261: LD_STRING #SkrTime
 263: PUSH
 264: LD_OWVAR 1
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// end ;
 273: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 274: LD_EXP 19
 278: PUSH
 279: LD_EXP 3
 283: AND
 284: PUSH
 285: LD_EXP 2
 289: PUSH
 290: LD_INT 1
 292: EQUAL
 293: AND
 294: IFFALSE 355
 296: GO 298
 298: DISABLE
// Crates ( cratesSpawns [ 1 ] [ 1 ] , cratesSpawns [ 1 ] [ 2 ] , cratesSpawns [ 1 ] [ 3 ] , cratesSpawns [ 1 ] [ 4 ] ) ;
 299: LD_EXP 19
 303: PUSH
 304: LD_INT 1
 306: ARRAY
 307: PUSH
 308: LD_INT 1
 310: ARRAY
 311: PPUSH
 312: LD_EXP 19
 316: PUSH
 317: LD_INT 1
 319: ARRAY
 320: PUSH
 321: LD_INT 2
 323: ARRAY
 324: PPUSH
 325: LD_EXP 19
 329: PUSH
 330: LD_INT 1
 332: ARRAY
 333: PUSH
 334: LD_INT 3
 336: ARRAY
 337: PPUSH
 338: LD_EXP 19
 342: PUSH
 343: LD_INT 1
 345: ARRAY
 346: PUSH
 347: LD_INT 4
 349: ARRAY
 350: PPUSH
 351: CALL 61553 0 4
 355: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 356: LD_EXP 19
 360: PUSH
 361: LD_EXP 3
 365: AND
 366: PUSH
 367: LD_EXP 2
 371: PUSH
 372: LD_INT 1
 374: EQUAL
 375: AND
 376: IFFALSE 437
 378: GO 380
 380: DISABLE
// Crates ( cratesSpawns [ 2 ] [ 1 ] , cratesSpawns [ 2 ] [ 2 ] , cratesSpawns [ 2 ] [ 3 ] , cratesSpawns [ 2 ] [ 4 ] ) ;
 381: LD_EXP 19
 385: PUSH
 386: LD_INT 2
 388: ARRAY
 389: PUSH
 390: LD_INT 1
 392: ARRAY
 393: PPUSH
 394: LD_EXP 19
 398: PUSH
 399: LD_INT 2
 401: ARRAY
 402: PUSH
 403: LD_INT 2
 405: ARRAY
 406: PPUSH
 407: LD_EXP 19
 411: PUSH
 412: LD_INT 2
 414: ARRAY
 415: PUSH
 416: LD_INT 3
 418: ARRAY
 419: PPUSH
 420: LD_EXP 19
 424: PUSH
 425: LD_INT 2
 427: ARRAY
 428: PUSH
 429: LD_INT 4
 431: ARRAY
 432: PPUSH
 433: CALL 61553 0 4
 437: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 438: LD_EXP 19
 442: PUSH
 443: LD_EXP 3
 447: AND
 448: PUSH
 449: LD_EXP 2
 453: PUSH
 454: LD_INT 1
 456: EQUAL
 457: AND
 458: IFFALSE 519
 460: GO 462
 462: DISABLE
// Crates ( cratesSpawns [ 3 ] [ 1 ] , cratesSpawns [ 3 ] [ 2 ] , cratesSpawns [ 3 ] [ 3 ] , cratesSpawns [ 3 ] [ 4 ] ) ;
 463: LD_EXP 19
 467: PUSH
 468: LD_INT 3
 470: ARRAY
 471: PUSH
 472: LD_INT 1
 474: ARRAY
 475: PPUSH
 476: LD_EXP 19
 480: PUSH
 481: LD_INT 3
 483: ARRAY
 484: PUSH
 485: LD_INT 2
 487: ARRAY
 488: PPUSH
 489: LD_EXP 19
 493: PUSH
 494: LD_INT 3
 496: ARRAY
 497: PUSH
 498: LD_INT 3
 500: ARRAY
 501: PPUSH
 502: LD_EXP 19
 506: PUSH
 507: LD_INT 3
 509: ARRAY
 510: PUSH
 511: LD_INT 4
 513: ARRAY
 514: PPUSH
 515: CALL 61553 0 4
 519: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 520: LD_EXP 19
 524: PUSH
 525: LD_EXP 3
 529: AND
 530: PUSH
 531: LD_EXP 2
 535: PUSH
 536: LD_INT 1
 538: EQUAL
 539: AND
 540: IFFALSE 601
 542: GO 544
 544: DISABLE
// Crates ( cratesSpawns [ 4 ] [ 1 ] , cratesSpawns [ 4 ] [ 2 ] , cratesSpawns [ 4 ] [ 3 ] , cratesSpawns [ 4 ] [ 4 ] ) ;
 545: LD_EXP 19
 549: PUSH
 550: LD_INT 4
 552: ARRAY
 553: PUSH
 554: LD_INT 1
 556: ARRAY
 557: PPUSH
 558: LD_EXP 19
 562: PUSH
 563: LD_INT 4
 565: ARRAY
 566: PUSH
 567: LD_INT 2
 569: ARRAY
 570: PPUSH
 571: LD_EXP 19
 575: PUSH
 576: LD_INT 4
 578: ARRAY
 579: PUSH
 580: LD_INT 3
 582: ARRAY
 583: PPUSH
 584: LD_EXP 19
 588: PUSH
 589: LD_INT 4
 591: ARRAY
 592: PUSH
 593: LD_INT 4
 595: ARRAY
 596: PPUSH
 597: CALL 61553 0 4
 601: END
// export function SetTechnologies ; var i , j , ban_techs , res_techs ; begin
 602: LD_INT 0
 604: PPUSH
 605: PPUSH
 606: PPUSH
 607: PPUSH
 608: PPUSH
// if GameType = 1 then
 609: LD_EXP 2
 613: PUSH
 614: LD_INT 1
 616: EQUAL
 617: IFFALSE 686
// begin ban_techs := [ ] ;
 619: LD_ADDR_VAR 0 4
 623: PUSH
 624: EMPTY
 625: ST_TO_ADDR
// if sibBombAllowed < 2 then
 626: LD_EXP 23
 630: PUSH
 631: LD_INT 2
 633: LESS
 634: IFFALSE 647
// ban_techs := [ tech_sibFiss ] ;
 636: LD_ADDR_VAR 0 4
 640: PUSH
 641: LD_INT 25
 643: PUSH
 644: EMPTY
 645: LIST
 646: ST_TO_ADDR
// res_techs := [ tech_oilPow , tech_oilEng , tech_tech1 , tech_tech2 , tech_tech3 , tech_gun , tech_gatling , tech_rocket ] ;
 647: LD_ADDR_VAR 0 5
 651: PUSH
 652: LD_INT 46
 654: PUSH
 655: LD_INT 47
 657: PUSH
 658: LD_INT 48
 660: PUSH
 661: LD_INT 49
 663: PUSH
 664: LD_INT 50
 666: PUSH
 667: LD_INT 39
 669: PUSH
 670: LD_INT 69
 672: PUSH
 673: LD_INT 40
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: ST_TO_ADDR
// end ; for i = 1 to 8 do
 686: LD_ADDR_VAR 0 2
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 8
 698: PUSH
 699: FOR_TO
 700: IFFALSE 784
// begin if res_techs then
 702: LD_VAR 0 5
 706: IFFALSE 742
// for j in res_techs do
 708: LD_ADDR_VAR 0 3
 712: PUSH
 713: LD_VAR 0 5
 717: PUSH
 718: FOR_IN
 719: IFFALSE 740
// SetTech ( j , i , state_researched ) ;
 721: LD_VAR 0 3
 725: PPUSH
 726: LD_VAR 0 2
 730: PPUSH
 731: LD_INT 2
 733: PPUSH
 734: CALL_OW 322
 738: GO 718
 740: POP
 741: POP
// if ban_techs then
 742: LD_VAR 0 4
 746: IFFALSE 782
// for j in ban_techs do
 748: LD_ADDR_VAR 0 3
 752: PUSH
 753: LD_VAR 0 4
 757: PUSH
 758: FOR_IN
 759: IFFALSE 780
// SetTech ( j , i , state_disabled ) ;
 761: LD_VAR 0 3
 765: PPUSH
 766: LD_VAR 0 2
 770: PPUSH
 771: LD_INT 0
 773: PPUSH
 774: CALL_OW 322
 778: GO 758
 780: POP
 781: POP
// end ;
 782: GO 699
 784: POP
 785: POP
// if sibBombAllowed = 1 then
 786: LD_EXP 23
 790: PUSH
 791: LD_INT 1
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_sibFiss , 3 , state_enabled ) ;
 796: LD_INT 25
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 1
 804: PPUSH
 805: CALL_OW 322
// end ;
 809: LD_VAR 0 1
 813: RET
// export function SetDiplomacy ; begin
 814: LD_INT 0
 816: PPUSH
// if GameType = 1 then
 817: LD_EXP 2
 821: PUSH
 822: LD_INT 1
 824: EQUAL
 825: IFFALSE 891
// begin SetAttitude ( 1 , 4 , att_friend , true ) ;
 827: LD_INT 1
 829: PPUSH
 830: LD_INT 4
 832: PPUSH
 833: LD_INT 1
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 843: LD_INT 3
 845: PPUSH
 846: LD_INT 6
 848: PPUSH
 849: LD_INT 1
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL_OW 80
// SetAttitude ( 3 , 8 , att_friend , true ) ;
 859: LD_INT 3
 861: PPUSH
 862: LD_INT 8
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: CALL_OW 80
// SetAttitude ( 6 , 8 , att_friend , true ) ;
 875: LD_INT 6
 877: PPUSH
 878: LD_INT 8
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 80
// end ; end ;
 891: LD_VAR 0 1
 895: RET
// export function PrepareGame ; var i , tmp , sources ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
// if GameType = 1 then
 902: LD_EXP 2
 906: PUSH
 907: LD_INT 1
 909: EQUAL
 910: IFFALSE 1402
// begin game := false ;
 912: LD_ADDR_EXP 3
 916: PUSH
 917: LD_INT 0
 919: ST_TO_ADDR
// your_side := 1 ;
 920: LD_ADDR_OWVAR 2
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// mc_amer := 1 ;
 928: LD_ADDR_EXP 5
 932: PUSH
 933: LD_INT 1
 935: ST_TO_ADDR
// mc_leg := 2 ;
 936: LD_ADDR_EXP 6
 940: PUSH
 941: LD_INT 2
 943: ST_TO_ADDR
// mc_rus_1 := 3 ;
 944: LD_ADDR_EXP 7
 948: PUSH
 949: LD_INT 3
 951: ST_TO_ADDR
// mc_rus_2 := 4 ;
 952: LD_ADDR_EXP 8
 956: PUSH
 957: LD_INT 4
 959: ST_TO_ADDR
// cratesSpawns := [ [ amerCrates , 1 , 0 , [ 200 , 250 , 300 ] [ cratesSpawn ] ] , [ rusCrates , 8 , 50 , 500 ] , [ legCrates , 5 , 50 , 300 ] , [ playerCrates , [ 4 , 5 , 6 ] [ cratesSpawn ] , 30 , [ 300 , 450 , 500 ] [ cratesSpawn ] ] ] ;
 960: LD_ADDR_EXP 19
 964: PUSH
 965: LD_INT 5
 967: PUSH
 968: LD_INT 1
 970: PUSH
 971: LD_INT 0
 973: PUSH
 974: LD_INT 200
 976: PUSH
 977: LD_INT 250
 979: PUSH
 980: LD_INT 300
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: LIST
 987: PUSH
 988: LD_EXP 26
 992: ARRAY
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 13
1002: PUSH
1003: LD_INT 8
1005: PUSH
1006: LD_INT 50
1008: PUSH
1009: LD_INT 500
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 17
1020: PUSH
1021: LD_INT 5
1023: PUSH
1024: LD_INT 50
1026: PUSH
1027: LD_INT 300
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: LD_INT 18
1038: PUSH
1039: LD_INT 4
1041: PUSH
1042: LD_INT 5
1044: PUSH
1045: LD_INT 6
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_EXP 26
1057: ARRAY
1058: PUSH
1059: LD_INT 30
1061: PUSH
1062: LD_INT 300
1064: PUSH
1065: LD_INT 450
1067: PUSH
1068: LD_INT 500
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_EXP 26
1080: ARRAY
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: ST_TO_ADDR
// sources := [ [ 190 , 193 , mat_siberit ] , [ 182 , 117 , mat_siberit ] , [ 43 , 2 , mat_siberit ] , [ 114 , 152 , mat_oil ] , [ 85 , 38 , mat_oil ] ] ;
1094: LD_ADDR_VAR 0 4
1098: PUSH
1099: LD_INT 190
1101: PUSH
1102: LD_INT 193
1104: PUSH
1105: LD_INT 3
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_INT 182
1115: PUSH
1116: LD_INT 117
1118: PUSH
1119: LD_INT 3
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_INT 43
1129: PUSH
1130: LD_INT 2
1132: PUSH
1133: LD_INT 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_INT 114
1143: PUSH
1144: LD_INT 152
1146: PUSH
1147: LD_INT 2
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: PUSH
1155: LD_INT 85
1157: PUSH
1158: LD_INT 38
1160: PUSH
1161: LD_INT 2
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: ST_TO_ADDR
// for i in sources do
1176: LD_ADDR_VAR 0 2
1180: PUSH
1181: LD_VAR 0 4
1185: PUSH
1186: FOR_IN
1187: IFFALSE 1222
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
1189: LD_VAR 0 2
1193: PUSH
1194: LD_INT 1
1196: ARRAY
1197: PPUSH
1198: LD_VAR 0 2
1202: PUSH
1203: LD_INT 2
1205: ARRAY
1206: PPUSH
1207: LD_VAR 0 2
1211: PUSH
1212: LD_INT 3
1214: ARRAY
1215: PPUSH
1216: CALL_OW 62
1220: GO 1186
1222: POP
1223: POP
// disableGlobalTimer := false ;
1224: LD_ADDR_EXP 4
1228: PUSH
1229: LD_INT 0
1231: ST_TO_ADDR
// ruEscape := [ 0 , [ 5 , 6 , 7 ] [ Difficulty ] ] ;
1232: LD_ADDR_EXP 15
1236: PUSH
1237: LD_INT 0
1239: PUSH
1240: LD_INT 5
1242: PUSH
1243: LD_INT 6
1245: PUSH
1246: LD_INT 7
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: PUSH
1254: LD_OWVAR 67
1258: ARRAY
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: ST_TO_ADDR
// ruOutpost := [ ] ;
1264: LD_ADDR_EXP 14
1268: PUSH
1269: EMPTY
1270: ST_TO_ADDR
// staticMines := [ ] ;
1271: LD_ADDR_EXP 16
1275: PUSH
1276: EMPTY
1277: ST_TO_ADDR
// baseCaptured := false ;
1278: LD_ADDR_EXP 17
1282: PUSH
1283: LD_INT 0
1285: ST_TO_ADDR
// legDestCounter := 0 ;
1286: LD_ADDR_EXP 18
1290: PUSH
1291: LD_INT 0
1293: ST_TO_ADDR
// legOfferAccepted := false ;
1294: LD_ADDR_EXP 20
1298: PUSH
1299: LD_INT 0
1301: ST_TO_ADDR
// legChangeSide := false ;
1302: LD_ADDR_EXP 21
1306: PUSH
1307: LD_INT 0
1309: ST_TO_ADDR
// allyDestCounter := 0 ;
1310: LD_ADDR_EXP 22
1314: PUSH
1315: LD_INT 0
1317: ST_TO_ADDR
// outpostEscape := false ;
1318: LD_ADDR_EXP 27
1322: PUSH
1323: LD_INT 0
1325: ST_TO_ADDR
// dialogueMineDetected := false ;
1326: LD_ADDR_EXP 28
1330: PUSH
1331: LD_INT 0
1333: ST_TO_ADDR
// PrepareAmericans ;
1334: CALL 7250 0 0
// PrepareLegion ;
1338: CALL 5515 0 0
// PrepareRussians ;
1342: CALL 2481 0 0
// playerForces := PreparePlayer ;
1346: LD_ADDR_EXP 10
1350: PUSH
1351: CALL 8493 0 0
1355: ST_TO_ADDR
// AnimateTrees ( true ) ;
1356: LD_INT 1
1358: PPUSH
1359: CALL_OW 573
// PrepareNature ( 4 , 3 , 8 , 5 , 3 , 1 , 8 , natureGroundArea , natureWaterArea ) ;
1363: LD_INT 4
1365: PPUSH
1366: LD_INT 3
1368: PPUSH
1369: LD_INT 8
1371: PPUSH
1372: LD_INT 5
1374: PPUSH
1375: LD_INT 3
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 8
1383: PPUSH
1384: LD_INT 2
1386: PPUSH
1387: LD_INT 1
1389: PPUSH
1390: CALL 54275 0 9
// MC_Start ;
1394: CALL 64690 0 0
// Action ;
1398: CALL 10689 0 0
// end ; end ;
1402: LD_VAR 0 1
1406: RET
// export function CustomInitMacro ; begin
1407: LD_INT 0
1409: PPUSH
// if GameType <> 1 then
1410: LD_EXP 2
1414: PUSH
1415: LD_INT 1
1417: NONEQUAL
1418: IFFALSE 1422
// exit ;
1420: GO 2476
// MC_SetScanArea ( mc_amer , amerBase ) ;
1422: LD_EXP 5
1426: PPUSH
1427: LD_INT 3
1429: PPUSH
1430: CALL 87546 0 2
// MC_SetParkingArea ( mc_amer , amerParking ) ;
1434: LD_EXP 5
1438: PPUSH
1439: LD_INT 4
1441: PPUSH
1442: CALL 87490 0 2
// MC_SetAllowedTurretWeapons ( mc_amer , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1446: LD_EXP 5
1450: PPUSH
1451: LD_INT 11
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 7
1459: PUSH
1460: LD_INT 9
1462: PUSH
1463: LD_INT 10
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PPUSH
1473: CALL 87378 0 2
// MC_SetCratesArea ( mc_amer , amerCrates ) ;
1477: LD_EXP 5
1481: PPUSH
1482: LD_INT 5
1484: PPUSH
1485: CALL 87060 0 2
// MC_SetTame ( mc_amer , amerBase ) ;
1489: LD_EXP 5
1493: PPUSH
1494: LD_INT 3
1496: PPUSH
1497: CALL 86791 0 2
// MC_SetDefenderLimit ( mc_amer , 4 ) ;
1501: LD_EXP 5
1505: PPUSH
1506: LD_INT 4
1508: PPUSH
1509: CALL 86410 0 2
// MC_SetProduceList ( mc_amer , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_solar , control_remote , us_laser ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , ] ) ;
1513: LD_EXP 5
1517: PPUSH
1518: LD_INT 3
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 2
1526: PUSH
1527: LD_INT 5
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: PUSH
1536: LD_INT 3
1538: PUSH
1539: LD_INT 2
1541: PUSH
1542: LD_INT 2
1544: PUSH
1545: LD_INT 9
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: PUSH
1554: LD_INT 4
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: LD_INT 2
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 4
1574: PUSH
1575: LD_INT 1
1577: PUSH
1578: LD_INT 2
1580: PUSH
1581: LD_INT 6
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: PPUSH
1596: CALL 86225 0 2
// MC_SetBuildingList ( mc_amer , [ [ b_turret , 114 , 16 , 0 ] , [ b_bunker , 110 , 12 , 0 ] ] ) ;
1600: LD_EXP 5
1604: PPUSH
1605: LD_INT 33
1607: PUSH
1608: LD_INT 114
1610: PUSH
1611: LD_INT 16
1613: PUSH
1614: LD_INT 0
1616: PUSH
1617: EMPTY
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: PUSH
1623: LD_INT 32
1625: PUSH
1626: LD_INT 110
1628: PUSH
1629: LD_INT 12
1631: PUSH
1632: LD_INT 0
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PPUSH
1645: CALL 86117 0 2
// MC_SetLabKind ( mc_amer , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1649: LD_EXP 5
1653: PPUSH
1654: LD_INT 10
1656: PUSH
1657: LD_INT 15
1659: PUSH
1660: LD_INT 12
1662: PUSH
1663: LD_INT 11
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: PPUSH
1672: CALL 86967 0 2
// MC_SetScanArea ( mc_leg , legBase ) ;
1676: LD_EXP 6
1680: PPUSH
1681: LD_INT 6
1683: PPUSH
1684: CALL 87546 0 2
// MC_SetParkingArea ( mc_leg , legParking ) ;
1688: LD_EXP 6
1692: PPUSH
1693: LD_INT 7
1695: PPUSH
1696: CALL 87490 0 2
// MC_SetAllowedTurretWeapons ( mc_leg , [ ar_radar , ar_gun , ar_rocket_launcher , ar_gatling_gun ] ) ;
1700: LD_EXP 6
1704: PPUSH
1705: LD_INT 30
1707: PUSH
1708: LD_INT 27
1710: PUSH
1711: LD_INT 28
1713: PUSH
1714: LD_INT 25
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: PPUSH
1723: CALL 87378 0 2
// MC_SetCratesArea ( mc_leg , legCrates ) ;
1727: LD_EXP 6
1731: PPUSH
1732: LD_INT 17
1734: PPUSH
1735: CALL 87060 0 2
// MC_SetTame ( mc_leg , legBase ) ;
1739: LD_EXP 6
1743: PPUSH
1744: LD_INT 6
1746: PPUSH
1747: CALL 86791 0 2
// MC_SetDefenderLimit ( mc_leg , 5 ) ;
1751: LD_EXP 6
1755: PPUSH
1756: LD_INT 5
1758: PPUSH
1759: CALL 86410 0 2
// MC_SetMinesField ( mc_leg , 10 , legMines ) ;
1763: LD_EXP 6
1767: PPUSH
1768: LD_INT 10
1770: PPUSH
1771: LD_INT 9
1773: PPUSH
1774: CALL 85907 0 3
// MC_SetBuildingList ( mc_leg , [ [ b_armoury , 157 , 144 , 0 ] , [ b_bunker , 151 , 142 , 0 ] , [ b_bunker , 161 , 144 , 0 ] , [ b_bunker , 140 , 133 , 0 ] ] ) ;
1778: LD_EXP 6
1782: PPUSH
1783: LD_INT 4
1785: PUSH
1786: LD_INT 157
1788: PUSH
1789: LD_INT 144
1791: PUSH
1792: LD_INT 0
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 32
1803: PUSH
1804: LD_INT 151
1806: PUSH
1807: LD_INT 142
1809: PUSH
1810: LD_INT 0
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_INT 32
1821: PUSH
1822: LD_INT 161
1824: PUSH
1825: LD_INT 144
1827: PUSH
1828: LD_INT 0
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 32
1839: PUSH
1840: LD_INT 140
1842: PUSH
1843: LD_INT 133
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: PPUSH
1861: CALL 86117 0 2
// MC_SetProduceList ( mc_leg , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ) ;
1865: LD_EXP 6
1869: PPUSH
1870: LD_INT 13
1872: PUSH
1873: LD_INT 2
1875: PUSH
1876: LD_INT 1
1878: PUSH
1879: LD_INT 31
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 13
1890: PUSH
1891: LD_INT 2
1893: PUSH
1894: LD_INT 1
1896: PUSH
1897: LD_INT 31
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 13
1908: PUSH
1909: LD_INT 1
1911: PUSH
1912: LD_INT 1
1914: PUSH
1915: LD_INT 27
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 13
1926: PUSH
1927: LD_INT 1
1929: PUSH
1930: LD_INT 2
1932: PUSH
1933: LD_INT 27
1935: PUSH
1936: EMPTY
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 13
1944: PUSH
1945: LD_INT 1
1947: PUSH
1948: LD_INT 2
1950: PUSH
1951: LD_INT 27
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: PUSH
1960: LD_INT 13
1962: PUSH
1963: LD_INT 1
1965: PUSH
1966: LD_INT 2
1968: PUSH
1969: LD_INT 28
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 13
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: LD_INT 2
1986: PUSH
1987: LD_INT 28
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: PUSH
1996: LD_INT 13
1998: PUSH
1999: LD_INT 1
2001: PUSH
2002: LD_INT 2
2004: PUSH
2005: LD_INT 32
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: PPUSH
2024: CALL 86225 0 2
// HiddenCamera ( 165 , 156 , 8 ) ;
2028: LD_INT 165
2030: PPUSH
2031: LD_INT 156
2033: PPUSH
2034: LD_INT 8
2036: PPUSH
2037: CALL_OW 244
// MC_SetScanArea ( mc_rus_1 , rus1Base ) ;
2041: LD_EXP 7
2045: PPUSH
2046: LD_INT 15
2048: PPUSH
2049: CALL 87546 0 2
// MC_SetParkingArea ( mc_rus_1 , rus1Parking ) ;
2053: LD_EXP 7
2057: PPUSH
2058: LD_INT 16
2060: PPUSH
2061: CALL 87490 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_1 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2065: LD_EXP 7
2069: PPUSH
2070: LD_INT 43
2072: PUSH
2073: LD_INT 47
2075: PUSH
2076: LD_INT 45
2078: PUSH
2079: LD_INT 49
2081: PUSH
2082: LD_INT 46
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: PPUSH
2092: CALL 87378 0 2
// MC_SetCratesArea ( mc_rus_1 , rusCrates ) ;
2096: LD_EXP 7
2100: PPUSH
2101: LD_INT 13
2103: PPUSH
2104: CALL 87060 0 2
// MC_SetTame ( mc_rus_1 , rus1Base ) ;
2108: LD_EXP 7
2112: PPUSH
2113: LD_INT 15
2115: PPUSH
2116: CALL 86791 0 2
// MC_SetDefenderLimit ( mc_rus_1 , 5 ) ;
2120: LD_EXP 7
2124: PPUSH
2125: LD_INT 5
2127: PPUSH
2128: CALL 86410 0 2
// MC_SetProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_rocket ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_crane ] , ] ) ;
2132: LD_EXP 7
2136: PPUSH
2137: LD_INT 23
2139: PUSH
2140: LD_INT 1
2142: PUSH
2143: LD_INT 3
2145: PUSH
2146: LD_INT 46
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: PUSH
2155: LD_INT 23
2157: PUSH
2158: LD_INT 1
2160: PUSH
2161: LD_INT 1
2163: PUSH
2164: LD_INT 46
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: PUSH
2173: LD_INT 23
2175: PUSH
2176: LD_INT 1
2178: PUSH
2179: LD_INT 3
2181: PUSH
2182: LD_INT 45
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: PUSH
2191: LD_INT 23
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: LD_INT 47
2202: PUSH
2203: EMPTY
2204: LIST
2205: LIST
2206: LIST
2207: LIST
2208: PUSH
2209: LD_INT 23
2211: PUSH
2212: LD_INT 1
2214: PUSH
2215: LD_INT 3
2217: PUSH
2218: LD_INT 46
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: LIST
2225: LIST
2226: PUSH
2227: LD_INT 21
2229: PUSH
2230: LD_INT 1
2232: PUSH
2233: LD_INT 3
2235: PUSH
2236: LD_INT 51
2238: PUSH
2239: EMPTY
2240: LIST
2241: LIST
2242: LIST
2243: LIST
2244: PUSH
2245: LD_INT 21
2247: PUSH
2248: LD_INT 1
2250: PUSH
2251: LD_INT 3
2253: PUSH
2254: LD_INT 52
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: PPUSH
2272: CALL 86225 0 2
// MC_SetScanArea ( mc_rus_2 , rus2Base ) ;
2276: LD_EXP 8
2280: PPUSH
2281: LD_INT 11
2283: PPUSH
2284: CALL 87546 0 2
// MC_SetParkingArea ( mc_rus_2 , rus2Parking ) ;
2288: LD_EXP 8
2292: PPUSH
2293: LD_INT 12
2295: PPUSH
2296: CALL 87490 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_2 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2300: LD_EXP 8
2304: PPUSH
2305: LD_INT 43
2307: PUSH
2308: LD_INT 47
2310: PUSH
2311: LD_INT 45
2313: PUSH
2314: LD_INT 49
2316: PUSH
2317: LD_INT 46
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL 87378 0 2
// MC_SetCratesArea ( mc_rus_2 , rusCrates ) ;
2331: LD_EXP 8
2335: PPUSH
2336: LD_INT 13
2338: PPUSH
2339: CALL 87060 0 2
// MC_SetTame ( mc_rus_2 , rus2Base ) ;
2343: LD_EXP 8
2347: PPUSH
2348: LD_INT 11
2350: PPUSH
2351: CALL 86791 0 2
// MC_SetDefenderLimit ( mc_rus_2 , 4 ) ;
2355: LD_EXP 8
2359: PPUSH
2360: LD_INT 4
2362: PPUSH
2363: CALL 86410 0 2
// MC_SetTeleportExit ( mc_rus_2 , [ [ 115 , 201 ] ] ) ;
2367: LD_EXP 8
2371: PPUSH
2372: LD_INT 115
2374: PUSH
2375: LD_INT 201
2377: PUSH
2378: EMPTY
2379: LIST
2380: LIST
2381: PUSH
2382: EMPTY
2383: LIST
2384: PPUSH
2385: CALL 87116 0 2
// MC_SetProduceList ( mc_rus_2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
2389: LD_EXP 8
2393: PPUSH
2394: LD_INT 24
2396: PUSH
2397: LD_INT 3
2399: PUSH
2400: LD_INT 3
2402: PUSH
2403: LD_INT 46
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: PUSH
2412: LD_INT 24
2414: PUSH
2415: LD_INT 3
2417: PUSH
2418: LD_INT 3
2420: PUSH
2421: LD_INT 46
2423: PUSH
2424: EMPTY
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: PUSH
2430: LD_INT 24
2432: PUSH
2433: LD_INT 3
2435: PUSH
2436: LD_INT 3
2438: PUSH
2439: LD_INT 46
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: LIST
2446: LIST
2447: PUSH
2448: LD_INT 24
2450: PUSH
2451: LD_INT 3
2453: PUSH
2454: LD_INT 3
2456: PUSH
2457: LD_INT 46
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: LIST
2464: LIST
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL 86225 0 2
// end ;
2476: LD_VAR 0 1
2480: RET
// export function PrepareRussians ; var i , b , tmp , side , sr , depot , base ; begin
2481: LD_INT 0
2483: PPUSH
2484: PPUSH
2485: PPUSH
2486: PPUSH
2487: PPUSH
2488: PPUSH
2489: PPUSH
2490: PPUSH
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , rusApe , 0 ) ;
2491: LD_INT 0
2493: PPUSH
2494: LD_INT 0
2496: PPUSH
2497: LD_INT 3
2499: PPUSH
2500: LD_INT 0
2502: PPUSH
2503: LD_INT 0
2505: PPUSH
2506: LD_INT 0
2508: PPUSH
2509: LD_INT 0
2511: PPUSH
2512: LD_INT 14
2514: PPUSH
2515: LD_INT 0
2517: PPUSH
2518: CALL 54275 0 9
// side := 3 ;
2522: LD_ADDR_VAR 0 5
2526: PUSH
2527: LD_INT 3
2529: ST_TO_ADDR
// SetTech ( tech_targTeleport , side , state_researched ) ;
2530: LD_INT 38
2532: PPUSH
2533: LD_VAR 0 5
2537: PPUSH
2538: LD_INT 2
2540: PPUSH
2541: CALL_OW 322
// SetTech ( tech_gun , side , state_researched ) ;
2545: LD_INT 39
2547: PPUSH
2548: LD_VAR 0 5
2552: PPUSH
2553: LD_INT 2
2555: PPUSH
2556: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
2560: LD_INT 34
2562: PPUSH
2563: LD_VAR 0 5
2567: PPUSH
2568: LD_INT 2
2570: PPUSH
2571: CALL_OW 322
// tmp := [ [ 0 , 208 , 163 , 4 , 0 , 0 ] , [ 3 , 194 , 161 , 1 , 0 , 0 ] , [ 17 , 190 , 161 , 1 , 0 , 0 ] , [ 5 , 200 , 145 , 3 , 0 , 0 ] , [ 32 , 192 , 144 , 3 , 0 , 0 ] , [ 26 , 216 , 172 , 3 , 0 , 0 ] , [ 26 , 218 , 176 , 3 , 0 , 0 ] , [ 29 , 182 , 149 , 3 , 0 , 0 ] , [ 8 , 201 , 171 , 0 , 10 , 11 ] , [ 32 , 188 , 167 , 0 , 0 , 0 ] , [ 32 , 202 , 179 , 0 , 0 , 0 ] , [ 32 , 209 , 182 , 0 , 0 , 0 ] , [ 32 , 220 , 183 , 5 , 0 , 0 ] , [ 32 , 225 , 181 , 5 , 0 , 0 ] , [ 26 , 220 , 174 , 5 , 0 , 0 ] , [ 1 , 84 , 128 , 4 , 0 , 0 ] , [ 3 , 68 , 121 , 1 , 0 , 0 ] , [ 19 , 72 , 125 , 5 , 0 , 0 ] , [ 18 , 68 , 124 , 0 , 0 , 0 ] , [ 24 , 64 , 121 , 1 , 0 , 0 ] , [ 17 , 65 , 118 , 2 , 0 , 0 ] , [ 21 , 68 , 117 , 3 , 0 , 0 ] , [ 8 , 68 , 130 , 1 , 14 , 10 ] , [ 8 , 67 , 110 , 2 , 11 , 12 ] , [ 28 , 85 , 108 , 2 , 0 , 0 ] , [ 28 , 85 , 124 , 2 , 0 , 0 ] , [ 30 , 97 , 119 , 2 , 0 , 0 ] , [ 5 , 111 , 138 , 4 , 0 , 0 ] , [ 33 , 104 , 130 , 3 , 0 , 0 ] , [ 33 , 110 , 142 , 5 , 0 , 0 ] , [ 33 , 91 , 131 , 5 , 0 , 0 ] , [ 33 , 107 , 157 , 5 , 0 , 0 ] , [ 33 , 104 , 160 , 5 , 0 , 0 ] , [ 33 , 101 , 162 , 5 , 0 , 0 ] , [ 32 , 87 , 157 , 5 , 0 , 0 ] , [ 32 , 105 , 158 , 5 , 0 , 0 ] , [ 33 , 91 , 118 , 4 , 0 , 0 ] , [ 33 , 89 , 107 , 4 , 0 , 0 ] , [ 5 , 86 , 96 , 3 , 0 , 0 ] , [ 33 , 91 , 102 , 4 , 0 , 0 ] , [ 32 , 80 , 95 , 3 , 0 , 0 ] , [ 28 , 77 , 105 , 3 , 0 , 0 ] , [ 28 , 85 , 113 , 3 , 0 , 0 ] , [ 28 , 55 , 97 , 3 , 0 , 0 ] , [ 28 , 88 , 128 , 3 , 0 , 0 ] , [ 32 , 69 , 101 , 2 , 0 , 0 ] , [ 1 , 34 , 23 , 4 , 0 , 0 ] , [ 8 , 25 , 4 , 3 , 11 , 10 ] , [ 8 , 15 , 4 , 2 , 14 , 12 ] , [ 29 , 55 , 35 , 2 , 0 , 0 ] , [ 29 , 24 , 44 , 2 , 0 , 0 ] , [ 34 , 34 , 32 , 4 , 0 , 0 ] , [ 3 , 14 , 16 , 1 , 0 , 0 ] , [ 24 , 10 , 16 , 1 , 0 , 0 ] , [ 21 , 11 , 13 , 2 , 0 , 0 ] , [ 18 , 14 , 12 , 3 , 0 , 0 ] , [ 16 , 14 , 19 , 0 , 0 , 0 ] , [ 17 , 18 , 20 , 5 , 0 , 0 ] , [ 28 , 10 , 5 , 1 , 0 , 0 ] , [ 28 , 8 , 8 , 1 , 0 , 0 ] , [ 26 , 19 , 2 , 1 , 0 , 0 ] , [ 26 , 30 , 2 , 1 , 0 , 0 ] , [ 5 , 59 , 20 , 4 , 0 , 0 ] , [ 32 , 60 , 24 , 4 , 0 , 0 ] , [ 32 , 61 , 45 , 5 , 0 , 0 ] , [ 32 , 52 , 51 , 5 , 0 , 0 ] , [ 33 , 56 , 51 , 5 , 0 , 0 ] , [ 33 , 62 , 49 , 5 , 0 , 0 ] , [ 33 , 41 , 47 , 5 , 0 , 0 ] , [ 33 , 33 , 52 , 5 , 0 , 0 ] , [ 5 , 31 , 40 , 0 , 0 , 0 ] , [ 33 , 65 , 37 , 5 , 0 , 0 ] , [ 33 , 63 , 29 , 4 , 0 , 0 ] , [ 33 , 54 , 11 , 4 , 0 , 0 ] , [ 33 , 56 , 15 , 4 , 0 , 0 ] , [ 33 , 51 , 6 , 4 , 0 , 0 ] , [ 26 , 39 , 25 , 0 , 0 , 0 ] , [ 26 , 37 , 21 , 0 , 0 , 0 ] , [ 32 , 35 , 17 , 4 , 0 , 0 ] , [ 33 , 35 , 28 , 4 , 0 , 0 ] , [ 33 , 28 , 46 , 5 , 0 , 0 ] , [ 33 , 31 , 6 , 4 , 0 , 0 ] , [ 26 , 54 , 38 , 4 , 0 , 0 ] , [ 33 , 207 , 167 , 3 , 0 , 0 ] , [ 30 , 43 , 2 , 4 , 0 , 0 ] ] ;
2575: LD_ADDR_VAR 0 4
2579: PUSH
2580: LD_INT 0
2582: PUSH
2583: LD_INT 208
2585: PUSH
2586: LD_INT 163
2588: PUSH
2589: LD_INT 4
2591: PUSH
2592: LD_INT 0
2594: PUSH
2595: LD_INT 0
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: PUSH
2606: LD_INT 3
2608: PUSH
2609: LD_INT 194
2611: PUSH
2612: LD_INT 161
2614: PUSH
2615: LD_INT 1
2617: PUSH
2618: LD_INT 0
2620: PUSH
2621: LD_INT 0
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: PUSH
2632: LD_INT 17
2634: PUSH
2635: LD_INT 190
2637: PUSH
2638: LD_INT 161
2640: PUSH
2641: LD_INT 1
2643: PUSH
2644: LD_INT 0
2646: PUSH
2647: LD_INT 0
2649: PUSH
2650: EMPTY
2651: LIST
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: LIST
2657: PUSH
2658: LD_INT 5
2660: PUSH
2661: LD_INT 200
2663: PUSH
2664: LD_INT 145
2666: PUSH
2667: LD_INT 3
2669: PUSH
2670: LD_INT 0
2672: PUSH
2673: LD_INT 0
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: LIST
2680: LIST
2681: LIST
2682: LIST
2683: PUSH
2684: LD_INT 32
2686: PUSH
2687: LD_INT 192
2689: PUSH
2690: LD_INT 144
2692: PUSH
2693: LD_INT 3
2695: PUSH
2696: LD_INT 0
2698: PUSH
2699: LD_INT 0
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: LIST
2709: PUSH
2710: LD_INT 26
2712: PUSH
2713: LD_INT 216
2715: PUSH
2716: LD_INT 172
2718: PUSH
2719: LD_INT 3
2721: PUSH
2722: LD_INT 0
2724: PUSH
2725: LD_INT 0
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: LIST
2732: LIST
2733: LIST
2734: LIST
2735: PUSH
2736: LD_INT 26
2738: PUSH
2739: LD_INT 218
2741: PUSH
2742: LD_INT 176
2744: PUSH
2745: LD_INT 3
2747: PUSH
2748: LD_INT 0
2750: PUSH
2751: LD_INT 0
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: LIST
2758: LIST
2759: LIST
2760: LIST
2761: PUSH
2762: LD_INT 29
2764: PUSH
2765: LD_INT 182
2767: PUSH
2768: LD_INT 149
2770: PUSH
2771: LD_INT 3
2773: PUSH
2774: LD_INT 0
2776: PUSH
2777: LD_INT 0
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: LIST
2784: LIST
2785: LIST
2786: LIST
2787: PUSH
2788: LD_INT 8
2790: PUSH
2791: LD_INT 201
2793: PUSH
2794: LD_INT 171
2796: PUSH
2797: LD_INT 0
2799: PUSH
2800: LD_INT 10
2802: PUSH
2803: LD_INT 11
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: LIST
2810: LIST
2811: LIST
2812: LIST
2813: PUSH
2814: LD_INT 32
2816: PUSH
2817: LD_INT 188
2819: PUSH
2820: LD_INT 167
2822: PUSH
2823: LD_INT 0
2825: PUSH
2826: LD_INT 0
2828: PUSH
2829: LD_INT 0
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_INT 32
2842: PUSH
2843: LD_INT 202
2845: PUSH
2846: LD_INT 179
2848: PUSH
2849: LD_INT 0
2851: PUSH
2852: LD_INT 0
2854: PUSH
2855: LD_INT 0
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: PUSH
2866: LD_INT 32
2868: PUSH
2869: LD_INT 209
2871: PUSH
2872: LD_INT 182
2874: PUSH
2875: LD_INT 0
2877: PUSH
2878: LD_INT 0
2880: PUSH
2881: LD_INT 0
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: LIST
2888: LIST
2889: LIST
2890: LIST
2891: PUSH
2892: LD_INT 32
2894: PUSH
2895: LD_INT 220
2897: PUSH
2898: LD_INT 183
2900: PUSH
2901: LD_INT 5
2903: PUSH
2904: LD_INT 0
2906: PUSH
2907: LD_INT 0
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: LIST
2914: LIST
2915: LIST
2916: LIST
2917: PUSH
2918: LD_INT 32
2920: PUSH
2921: LD_INT 225
2923: PUSH
2924: LD_INT 181
2926: PUSH
2927: LD_INT 5
2929: PUSH
2930: LD_INT 0
2932: PUSH
2933: LD_INT 0
2935: PUSH
2936: EMPTY
2937: LIST
2938: LIST
2939: LIST
2940: LIST
2941: LIST
2942: LIST
2943: PUSH
2944: LD_INT 26
2946: PUSH
2947: LD_INT 220
2949: PUSH
2950: LD_INT 174
2952: PUSH
2953: LD_INT 5
2955: PUSH
2956: LD_INT 0
2958: PUSH
2959: LD_INT 0
2961: PUSH
2962: EMPTY
2963: LIST
2964: LIST
2965: LIST
2966: LIST
2967: LIST
2968: LIST
2969: PUSH
2970: LD_INT 1
2972: PUSH
2973: LD_INT 84
2975: PUSH
2976: LD_INT 128
2978: PUSH
2979: LD_INT 4
2981: PUSH
2982: LD_INT 0
2984: PUSH
2985: LD_INT 0
2987: PUSH
2988: EMPTY
2989: LIST
2990: LIST
2991: LIST
2992: LIST
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 3
2998: PUSH
2999: LD_INT 68
3001: PUSH
3002: LD_INT 121
3004: PUSH
3005: LD_INT 1
3007: PUSH
3008: LD_INT 0
3010: PUSH
3011: LD_INT 0
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: LIST
3018: LIST
3019: LIST
3020: LIST
3021: PUSH
3022: LD_INT 19
3024: PUSH
3025: LD_INT 72
3027: PUSH
3028: LD_INT 125
3030: PUSH
3031: LD_INT 5
3033: PUSH
3034: LD_INT 0
3036: PUSH
3037: LD_INT 0
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: LIST
3044: LIST
3045: LIST
3046: LIST
3047: PUSH
3048: LD_INT 18
3050: PUSH
3051: LD_INT 68
3053: PUSH
3054: LD_INT 124
3056: PUSH
3057: LD_INT 0
3059: PUSH
3060: LD_INT 0
3062: PUSH
3063: LD_INT 0
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: PUSH
3074: LD_INT 24
3076: PUSH
3077: LD_INT 64
3079: PUSH
3080: LD_INT 121
3082: PUSH
3083: LD_INT 1
3085: PUSH
3086: LD_INT 0
3088: PUSH
3089: LD_INT 0
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: LIST
3099: PUSH
3100: LD_INT 17
3102: PUSH
3103: LD_INT 65
3105: PUSH
3106: LD_INT 118
3108: PUSH
3109: LD_INT 2
3111: PUSH
3112: LD_INT 0
3114: PUSH
3115: LD_INT 0
3117: PUSH
3118: EMPTY
3119: LIST
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 21
3128: PUSH
3129: LD_INT 68
3131: PUSH
3132: LD_INT 117
3134: PUSH
3135: LD_INT 3
3137: PUSH
3138: LD_INT 0
3140: PUSH
3141: LD_INT 0
3143: PUSH
3144: EMPTY
3145: LIST
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: LIST
3151: PUSH
3152: LD_INT 8
3154: PUSH
3155: LD_INT 68
3157: PUSH
3158: LD_INT 130
3160: PUSH
3161: LD_INT 1
3163: PUSH
3164: LD_INT 14
3166: PUSH
3167: LD_INT 10
3169: PUSH
3170: EMPTY
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: PUSH
3178: LD_INT 8
3180: PUSH
3181: LD_INT 67
3183: PUSH
3184: LD_INT 110
3186: PUSH
3187: LD_INT 2
3189: PUSH
3190: LD_INT 11
3192: PUSH
3193: LD_INT 12
3195: PUSH
3196: EMPTY
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: PUSH
3204: LD_INT 28
3206: PUSH
3207: LD_INT 85
3209: PUSH
3210: LD_INT 108
3212: PUSH
3213: LD_INT 2
3215: PUSH
3216: LD_INT 0
3218: PUSH
3219: LD_INT 0
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: LIST
3229: PUSH
3230: LD_INT 28
3232: PUSH
3233: LD_INT 85
3235: PUSH
3236: LD_INT 124
3238: PUSH
3239: LD_INT 2
3241: PUSH
3242: LD_INT 0
3244: PUSH
3245: LD_INT 0
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: PUSH
3256: LD_INT 30
3258: PUSH
3259: LD_INT 97
3261: PUSH
3262: LD_INT 119
3264: PUSH
3265: LD_INT 2
3267: PUSH
3268: LD_INT 0
3270: PUSH
3271: LD_INT 0
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: PUSH
3282: LD_INT 5
3284: PUSH
3285: LD_INT 111
3287: PUSH
3288: LD_INT 138
3290: PUSH
3291: LD_INT 4
3293: PUSH
3294: LD_INT 0
3296: PUSH
3297: LD_INT 0
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: PUSH
3308: LD_INT 33
3310: PUSH
3311: LD_INT 104
3313: PUSH
3314: LD_INT 130
3316: PUSH
3317: LD_INT 3
3319: PUSH
3320: LD_INT 0
3322: PUSH
3323: LD_INT 0
3325: PUSH
3326: EMPTY
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: PUSH
3334: LD_INT 33
3336: PUSH
3337: LD_INT 110
3339: PUSH
3340: LD_INT 142
3342: PUSH
3343: LD_INT 5
3345: PUSH
3346: LD_INT 0
3348: PUSH
3349: LD_INT 0
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: PUSH
3360: LD_INT 33
3362: PUSH
3363: LD_INT 91
3365: PUSH
3366: LD_INT 131
3368: PUSH
3369: LD_INT 5
3371: PUSH
3372: LD_INT 0
3374: PUSH
3375: LD_INT 0
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: PUSH
3386: LD_INT 33
3388: PUSH
3389: LD_INT 107
3391: PUSH
3392: LD_INT 157
3394: PUSH
3395: LD_INT 5
3397: PUSH
3398: LD_INT 0
3400: PUSH
3401: LD_INT 0
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: PUSH
3412: LD_INT 33
3414: PUSH
3415: LD_INT 104
3417: PUSH
3418: LD_INT 160
3420: PUSH
3421: LD_INT 5
3423: PUSH
3424: LD_INT 0
3426: PUSH
3427: LD_INT 0
3429: PUSH
3430: EMPTY
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: PUSH
3438: LD_INT 33
3440: PUSH
3441: LD_INT 101
3443: PUSH
3444: LD_INT 162
3446: PUSH
3447: LD_INT 5
3449: PUSH
3450: LD_INT 0
3452: PUSH
3453: LD_INT 0
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: PUSH
3464: LD_INT 32
3466: PUSH
3467: LD_INT 87
3469: PUSH
3470: LD_INT 157
3472: PUSH
3473: LD_INT 5
3475: PUSH
3476: LD_INT 0
3478: PUSH
3479: LD_INT 0
3481: PUSH
3482: EMPTY
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: PUSH
3490: LD_INT 32
3492: PUSH
3493: LD_INT 105
3495: PUSH
3496: LD_INT 158
3498: PUSH
3499: LD_INT 5
3501: PUSH
3502: LD_INT 0
3504: PUSH
3505: LD_INT 0
3507: PUSH
3508: EMPTY
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: PUSH
3516: LD_INT 33
3518: PUSH
3519: LD_INT 91
3521: PUSH
3522: LD_INT 118
3524: PUSH
3525: LD_INT 4
3527: PUSH
3528: LD_INT 0
3530: PUSH
3531: LD_INT 0
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: PUSH
3542: LD_INT 33
3544: PUSH
3545: LD_INT 89
3547: PUSH
3548: LD_INT 107
3550: PUSH
3551: LD_INT 4
3553: PUSH
3554: LD_INT 0
3556: PUSH
3557: LD_INT 0
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: PUSH
3568: LD_INT 5
3570: PUSH
3571: LD_INT 86
3573: PUSH
3574: LD_INT 96
3576: PUSH
3577: LD_INT 3
3579: PUSH
3580: LD_INT 0
3582: PUSH
3583: LD_INT 0
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: PUSH
3594: LD_INT 33
3596: PUSH
3597: LD_INT 91
3599: PUSH
3600: LD_INT 102
3602: PUSH
3603: LD_INT 4
3605: PUSH
3606: LD_INT 0
3608: PUSH
3609: LD_INT 0
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: PUSH
3620: LD_INT 32
3622: PUSH
3623: LD_INT 80
3625: PUSH
3626: LD_INT 95
3628: PUSH
3629: LD_INT 3
3631: PUSH
3632: LD_INT 0
3634: PUSH
3635: LD_INT 0
3637: PUSH
3638: EMPTY
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: PUSH
3646: LD_INT 28
3648: PUSH
3649: LD_INT 77
3651: PUSH
3652: LD_INT 105
3654: PUSH
3655: LD_INT 3
3657: PUSH
3658: LD_INT 0
3660: PUSH
3661: LD_INT 0
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: PUSH
3672: LD_INT 28
3674: PUSH
3675: LD_INT 85
3677: PUSH
3678: LD_INT 113
3680: PUSH
3681: LD_INT 3
3683: PUSH
3684: LD_INT 0
3686: PUSH
3687: LD_INT 0
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: PUSH
3698: LD_INT 28
3700: PUSH
3701: LD_INT 55
3703: PUSH
3704: LD_INT 97
3706: PUSH
3707: LD_INT 3
3709: PUSH
3710: LD_INT 0
3712: PUSH
3713: LD_INT 0
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: PUSH
3724: LD_INT 28
3726: PUSH
3727: LD_INT 88
3729: PUSH
3730: LD_INT 128
3732: PUSH
3733: LD_INT 3
3735: PUSH
3736: LD_INT 0
3738: PUSH
3739: LD_INT 0
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: LIST
3748: LIST
3749: PUSH
3750: LD_INT 32
3752: PUSH
3753: LD_INT 69
3755: PUSH
3756: LD_INT 101
3758: PUSH
3759: LD_INT 2
3761: PUSH
3762: LD_INT 0
3764: PUSH
3765: LD_INT 0
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: PUSH
3776: LD_INT 1
3778: PUSH
3779: LD_INT 34
3781: PUSH
3782: LD_INT 23
3784: PUSH
3785: LD_INT 4
3787: PUSH
3788: LD_INT 0
3790: PUSH
3791: LD_INT 0
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: PUSH
3802: LD_INT 8
3804: PUSH
3805: LD_INT 25
3807: PUSH
3808: LD_INT 4
3810: PUSH
3811: LD_INT 3
3813: PUSH
3814: LD_INT 11
3816: PUSH
3817: LD_INT 10
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: PUSH
3828: LD_INT 8
3830: PUSH
3831: LD_INT 15
3833: PUSH
3834: LD_INT 4
3836: PUSH
3837: LD_INT 2
3839: PUSH
3840: LD_INT 14
3842: PUSH
3843: LD_INT 12
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: PUSH
3854: LD_INT 29
3856: PUSH
3857: LD_INT 55
3859: PUSH
3860: LD_INT 35
3862: PUSH
3863: LD_INT 2
3865: PUSH
3866: LD_INT 0
3868: PUSH
3869: LD_INT 0
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: PUSH
3880: LD_INT 29
3882: PUSH
3883: LD_INT 24
3885: PUSH
3886: LD_INT 44
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 0
3894: PUSH
3895: LD_INT 0
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: PUSH
3906: LD_INT 34
3908: PUSH
3909: LD_INT 34
3911: PUSH
3912: LD_INT 32
3914: PUSH
3915: LD_INT 4
3917: PUSH
3918: LD_INT 0
3920: PUSH
3921: LD_INT 0
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: PUSH
3932: LD_INT 3
3934: PUSH
3935: LD_INT 14
3937: PUSH
3938: LD_INT 16
3940: PUSH
3941: LD_INT 1
3943: PUSH
3944: LD_INT 0
3946: PUSH
3947: LD_INT 0
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: PUSH
3958: LD_INT 24
3960: PUSH
3961: LD_INT 10
3963: PUSH
3964: LD_INT 16
3966: PUSH
3967: LD_INT 1
3969: PUSH
3970: LD_INT 0
3972: PUSH
3973: LD_INT 0
3975: PUSH
3976: EMPTY
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: PUSH
3984: LD_INT 21
3986: PUSH
3987: LD_INT 11
3989: PUSH
3990: LD_INT 13
3992: PUSH
3993: LD_INT 2
3995: PUSH
3996: LD_INT 0
3998: PUSH
3999: LD_INT 0
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: PUSH
4010: LD_INT 18
4012: PUSH
4013: LD_INT 14
4015: PUSH
4016: LD_INT 12
4018: PUSH
4019: LD_INT 3
4021: PUSH
4022: LD_INT 0
4024: PUSH
4025: LD_INT 0
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: PUSH
4036: LD_INT 16
4038: PUSH
4039: LD_INT 14
4041: PUSH
4042: LD_INT 19
4044: PUSH
4045: LD_INT 0
4047: PUSH
4048: LD_INT 0
4050: PUSH
4051: LD_INT 0
4053: PUSH
4054: EMPTY
4055: LIST
4056: LIST
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: PUSH
4062: LD_INT 17
4064: PUSH
4065: LD_INT 18
4067: PUSH
4068: LD_INT 20
4070: PUSH
4071: LD_INT 5
4073: PUSH
4074: LD_INT 0
4076: PUSH
4077: LD_INT 0
4079: PUSH
4080: EMPTY
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 28
4090: PUSH
4091: LD_INT 10
4093: PUSH
4094: LD_INT 5
4096: PUSH
4097: LD_INT 1
4099: PUSH
4100: LD_INT 0
4102: PUSH
4103: LD_INT 0
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 28
4116: PUSH
4117: LD_INT 8
4119: PUSH
4120: LD_INT 8
4122: PUSH
4123: LD_INT 1
4125: PUSH
4126: LD_INT 0
4128: PUSH
4129: LD_INT 0
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: PUSH
4140: LD_INT 26
4142: PUSH
4143: LD_INT 19
4145: PUSH
4146: LD_INT 2
4148: PUSH
4149: LD_INT 1
4151: PUSH
4152: LD_INT 0
4154: PUSH
4155: LD_INT 0
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: PUSH
4166: LD_INT 26
4168: PUSH
4169: LD_INT 30
4171: PUSH
4172: LD_INT 2
4174: PUSH
4175: LD_INT 1
4177: PUSH
4178: LD_INT 0
4180: PUSH
4181: LD_INT 0
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: PUSH
4192: LD_INT 5
4194: PUSH
4195: LD_INT 59
4197: PUSH
4198: LD_INT 20
4200: PUSH
4201: LD_INT 4
4203: PUSH
4204: LD_INT 0
4206: PUSH
4207: LD_INT 0
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: PUSH
4218: LD_INT 32
4220: PUSH
4221: LD_INT 60
4223: PUSH
4224: LD_INT 24
4226: PUSH
4227: LD_INT 4
4229: PUSH
4230: LD_INT 0
4232: PUSH
4233: LD_INT 0
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: PUSH
4244: LD_INT 32
4246: PUSH
4247: LD_INT 61
4249: PUSH
4250: LD_INT 45
4252: PUSH
4253: LD_INT 5
4255: PUSH
4256: LD_INT 0
4258: PUSH
4259: LD_INT 0
4261: PUSH
4262: EMPTY
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: PUSH
4270: LD_INT 32
4272: PUSH
4273: LD_INT 52
4275: PUSH
4276: LD_INT 51
4278: PUSH
4279: LD_INT 5
4281: PUSH
4282: LD_INT 0
4284: PUSH
4285: LD_INT 0
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: PUSH
4296: LD_INT 33
4298: PUSH
4299: LD_INT 56
4301: PUSH
4302: LD_INT 51
4304: PUSH
4305: LD_INT 5
4307: PUSH
4308: LD_INT 0
4310: PUSH
4311: LD_INT 0
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: PUSH
4322: LD_INT 33
4324: PUSH
4325: LD_INT 62
4327: PUSH
4328: LD_INT 49
4330: PUSH
4331: LD_INT 5
4333: PUSH
4334: LD_INT 0
4336: PUSH
4337: LD_INT 0
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: PUSH
4348: LD_INT 33
4350: PUSH
4351: LD_INT 41
4353: PUSH
4354: LD_INT 47
4356: PUSH
4357: LD_INT 5
4359: PUSH
4360: LD_INT 0
4362: PUSH
4363: LD_INT 0
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: PUSH
4374: LD_INT 33
4376: PUSH
4377: LD_INT 33
4379: PUSH
4380: LD_INT 52
4382: PUSH
4383: LD_INT 5
4385: PUSH
4386: LD_INT 0
4388: PUSH
4389: LD_INT 0
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: PUSH
4400: LD_INT 5
4402: PUSH
4403: LD_INT 31
4405: PUSH
4406: LD_INT 40
4408: PUSH
4409: LD_INT 0
4411: PUSH
4412: LD_INT 0
4414: PUSH
4415: LD_INT 0
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: PUSH
4426: LD_INT 33
4428: PUSH
4429: LD_INT 65
4431: PUSH
4432: LD_INT 37
4434: PUSH
4435: LD_INT 5
4437: PUSH
4438: LD_INT 0
4440: PUSH
4441: LD_INT 0
4443: PUSH
4444: EMPTY
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: PUSH
4452: LD_INT 33
4454: PUSH
4455: LD_INT 63
4457: PUSH
4458: LD_INT 29
4460: PUSH
4461: LD_INT 4
4463: PUSH
4464: LD_INT 0
4466: PUSH
4467: LD_INT 0
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: PUSH
4478: LD_INT 33
4480: PUSH
4481: LD_INT 54
4483: PUSH
4484: LD_INT 11
4486: PUSH
4487: LD_INT 4
4489: PUSH
4490: LD_INT 0
4492: PUSH
4493: LD_INT 0
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: PUSH
4504: LD_INT 33
4506: PUSH
4507: LD_INT 56
4509: PUSH
4510: LD_INT 15
4512: PUSH
4513: LD_INT 4
4515: PUSH
4516: LD_INT 0
4518: PUSH
4519: LD_INT 0
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: PUSH
4530: LD_INT 33
4532: PUSH
4533: LD_INT 51
4535: PUSH
4536: LD_INT 6
4538: PUSH
4539: LD_INT 4
4541: PUSH
4542: LD_INT 0
4544: PUSH
4545: LD_INT 0
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: LIST
4555: PUSH
4556: LD_INT 26
4558: PUSH
4559: LD_INT 39
4561: PUSH
4562: LD_INT 25
4564: PUSH
4565: LD_INT 0
4567: PUSH
4568: LD_INT 0
4570: PUSH
4571: LD_INT 0
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: PUSH
4582: LD_INT 26
4584: PUSH
4585: LD_INT 37
4587: PUSH
4588: LD_INT 21
4590: PUSH
4591: LD_INT 0
4593: PUSH
4594: LD_INT 0
4596: PUSH
4597: LD_INT 0
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: PUSH
4608: LD_INT 32
4610: PUSH
4611: LD_INT 35
4613: PUSH
4614: LD_INT 17
4616: PUSH
4617: LD_INT 4
4619: PUSH
4620: LD_INT 0
4622: PUSH
4623: LD_INT 0
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: PUSH
4634: LD_INT 33
4636: PUSH
4637: LD_INT 35
4639: PUSH
4640: LD_INT 28
4642: PUSH
4643: LD_INT 4
4645: PUSH
4646: LD_INT 0
4648: PUSH
4649: LD_INT 0
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: LIST
4658: LIST
4659: PUSH
4660: LD_INT 33
4662: PUSH
4663: LD_INT 28
4665: PUSH
4666: LD_INT 46
4668: PUSH
4669: LD_INT 5
4671: PUSH
4672: LD_INT 0
4674: PUSH
4675: LD_INT 0
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: PUSH
4686: LD_INT 33
4688: PUSH
4689: LD_INT 31
4691: PUSH
4692: LD_INT 6
4694: PUSH
4695: LD_INT 4
4697: PUSH
4698: LD_INT 0
4700: PUSH
4701: LD_INT 0
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: PUSH
4712: LD_INT 26
4714: PUSH
4715: LD_INT 54
4717: PUSH
4718: LD_INT 38
4720: PUSH
4721: LD_INT 4
4723: PUSH
4724: LD_INT 0
4726: PUSH
4727: LD_INT 0
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: PUSH
4738: LD_INT 33
4740: PUSH
4741: LD_INT 207
4743: PUSH
4744: LD_INT 167
4746: PUSH
4747: LD_INT 3
4749: PUSH
4750: LD_INT 0
4752: PUSH
4753: LD_INT 0
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: PUSH
4764: LD_INT 30
4766: PUSH
4767: LD_INT 43
4769: PUSH
4770: LD_INT 2
4772: PUSH
4773: LD_INT 4
4775: PUSH
4776: LD_INT 0
4778: PUSH
4779: LD_INT 0
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: ST_TO_ADDR
// for i in tmp do
4877: LD_ADDR_VAR 0 2
4881: PUSH
4882: LD_VAR 0 4
4886: PUSH
4887: FOR_IN
4888: IFFALSE 5119
// begin uc_side := side ;
4890: LD_ADDR_OWVAR 20
4894: PUSH
4895: LD_VAR 0 5
4899: ST_TO_ADDR
// uc_nation := nation_russian ;
4900: LD_ADDR_OWVAR 21
4904: PUSH
4905: LD_INT 3
4907: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4908: LD_ADDR_OWVAR 42
4912: PUSH
4913: LD_VAR 0 2
4917: PUSH
4918: LD_INT 1
4920: ARRAY
4921: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
4922: LD_ADDR_OWVAR 43
4926: PUSH
4927: LD_INT 5
4929: PPUSH
4930: LD_INT 6
4932: PPUSH
4933: CALL_OW 12
4937: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
4938: LD_ADDR_OWVAR 44
4942: PUSH
4943: LD_VAR 0 2
4947: PUSH
4948: LD_INT 5
4950: ARRAY
4951: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
4952: LD_ADDR_OWVAR 45
4956: PUSH
4957: LD_VAR 0 2
4961: PUSH
4962: LD_INT 6
4964: ARRAY
4965: ST_TO_ADDR
// sr := 0 ;
4966: LD_ADDR_VAR 0 6
4970: PUSH
4971: LD_INT 0
4973: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
4974: LD_VAR 0 2
4978: PUSH
4979: LD_INT 1
4981: ARRAY
4982: PUSH
4983: LD_INT 29
4985: EQUAL
4986: IFFALSE 4998
// sr := mat_oil else
4988: LD_ADDR_VAR 0 6
4992: PUSH
4993: LD_INT 2
4995: ST_TO_ADDR
4996: GO 5020
// if i [ 1 ] = b_siberite_mine then
4998: LD_VAR 0 2
5002: PUSH
5003: LD_INT 1
5005: ARRAY
5006: PUSH
5007: LD_INT 30
5009: EQUAL
5010: IFFALSE 5020
// sr := mat_siberit ;
5012: LD_ADDR_VAR 0 6
5016: PUSH
5017: LD_INT 3
5019: ST_TO_ADDR
// if sr then
5020: LD_VAR 0 6
5024: IFFALSE 5080
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
5026: LD_VAR 0 2
5030: PUSH
5031: LD_INT 2
5033: ARRAY
5034: PPUSH
5035: LD_VAR 0 2
5039: PUSH
5040: LD_INT 3
5042: ARRAY
5043: PPUSH
5044: LD_VAR 0 6
5048: PPUSH
5049: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
5053: LD_VAR 0 2
5057: PUSH
5058: LD_INT 2
5060: ARRAY
5061: PPUSH
5062: LD_VAR 0 2
5066: PUSH
5067: LD_INT 3
5069: ARRAY
5070: PPUSH
5071: LD_VAR 0 5
5075: PPUSH
5076: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
5080: LD_ADDR_VAR 0 3
5084: PUSH
5085: LD_VAR 0 2
5089: PUSH
5090: LD_INT 2
5092: ARRAY
5093: PPUSH
5094: LD_VAR 0 2
5098: PUSH
5099: LD_INT 3
5101: ARRAY
5102: PPUSH
5103: LD_VAR 0 2
5107: PUSH
5108: LD_INT 4
5110: ARRAY
5111: PPUSH
5112: CALL_OW 47
5116: ST_TO_ADDR
// end ;
5117: GO 4887
5119: POP
5120: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
5121: LD_ADDR_VAR 0 7
5125: PUSH
5126: LD_INT 22
5128: PUSH
5129: LD_VAR 0 5
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: PUSH
5138: LD_INT 30
5140: PUSH
5141: LD_INT 1
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: PPUSH
5152: CALL_OW 69
5156: ST_TO_ADDR
// if not depot then
5157: LD_VAR 0 7
5161: NOT
5162: IFFALSE 5166
// exit ;
5164: GO 5510
// base := PrepareBase ( HexInfo ( 84 , 128 ) , rus1Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5166: LD_ADDR_VAR 0 8
5170: PUSH
5171: LD_INT 84
5173: PPUSH
5174: LD_INT 128
5176: PPUSH
5177: CALL_OW 428
5181: PPUSH
5182: LD_INT 15
5184: PPUSH
5185: LD_INT 0
5187: PPUSH
5188: LD_INT 6
5190: PUSH
5191: LD_INT 7
5193: PUSH
5194: LD_INT 8
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: LIST
5201: PUSH
5202: LD_OWVAR 67
5206: ARRAY
5207: PPUSH
5208: LD_INT 3000
5210: PUSH
5211: LD_INT 300
5213: PUSH
5214: LD_INT 100
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: LIST
5221: PPUSH
5222: LD_INT 12
5224: PUSH
5225: LD_INT 6
5227: PUSH
5228: LD_INT 6
5230: PUSH
5231: LD_INT 4
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: PPUSH
5240: CALL 29870 0 6
5244: ST_TO_ADDR
// if not base then
5245: LD_VAR 0 8
5249: NOT
5250: IFFALSE 5254
// exit ;
5252: GO 5510
// mc_bases := Replace ( mc_bases , mc_rus_1 , base ) ;
5254: LD_ADDR_EXP 36
5258: PUSH
5259: LD_EXP 36
5263: PPUSH
5264: LD_EXP 7
5268: PPUSH
5269: LD_VAR 0 8
5273: PPUSH
5274: CALL_OW 1
5278: ST_TO_ADDR
// base := PrepareBase ( HexInfo ( 34 , 23 ) , rus2Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 20000 , 3000 , 1000 ] , [ 12 , 6 , 6 , 4 ] ) ;
5279: LD_ADDR_VAR 0 8
5283: PUSH
5284: LD_INT 34
5286: PPUSH
5287: LD_INT 23
5289: PPUSH
5290: CALL_OW 428
5294: PPUSH
5295: LD_INT 11
5297: PPUSH
5298: LD_INT 0
5300: PPUSH
5301: LD_INT 6
5303: PUSH
5304: LD_INT 7
5306: PUSH
5307: LD_INT 8
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: PUSH
5315: LD_OWVAR 67
5319: ARRAY
5320: PPUSH
5321: LD_INT 20000
5323: PUSH
5324: LD_INT 3000
5326: PUSH
5327: LD_INT 1000
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: LIST
5334: PPUSH
5335: LD_INT 12
5337: PUSH
5338: LD_INT 6
5340: PUSH
5341: LD_INT 6
5343: PUSH
5344: LD_INT 4
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: LIST
5351: LIST
5352: PPUSH
5353: CALL 29870 0 6
5357: ST_TO_ADDR
// if not base then
5358: LD_VAR 0 8
5362: NOT
5363: IFFALSE 5367
// exit ;
5365: GO 5510
// mc_bases := Replace ( mc_bases , mc_rus_2 , base ) ;
5367: LD_ADDR_EXP 36
5371: PUSH
5372: LD_EXP 36
5376: PPUSH
5377: LD_EXP 8
5381: PPUSH
5382: LD_VAR 0 8
5386: PPUSH
5387: CALL_OW 1
5391: ST_TO_ADDR
// ruOutpost := PrepareBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] , ruOutpostArea , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 500 , 100 , 10 ] , [ [ 6 , 7 , 8 ] [ Difficulty ] , 2 , 0 , 1 ] ) ;
5392: LD_ADDR_EXP 14
5396: PUSH
5397: LD_INT 22
5399: PUSH
5400: LD_INT 3
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: PUSH
5407: LD_INT 30
5409: PUSH
5410: LD_INT 0
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: PPUSH
5421: CALL_OW 69
5425: PUSH
5426: LD_INT 1
5428: ARRAY
5429: PPUSH
5430: LD_INT 25
5432: PPUSH
5433: LD_INT 0
5435: PPUSH
5436: LD_INT 6
5438: PUSH
5439: LD_INT 7
5441: PUSH
5442: LD_INT 8
5444: PUSH
5445: EMPTY
5446: LIST
5447: LIST
5448: LIST
5449: PUSH
5450: LD_OWVAR 67
5454: ARRAY
5455: PPUSH
5456: LD_INT 500
5458: PUSH
5459: LD_INT 100
5461: PUSH
5462: LD_INT 10
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: LIST
5469: PPUSH
5470: LD_INT 6
5472: PUSH
5473: LD_INT 7
5475: PUSH
5476: LD_INT 8
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: LIST
5483: PUSH
5484: LD_OWVAR 67
5488: ARRAY
5489: PUSH
5490: LD_INT 2
5492: PUSH
5493: LD_INT 0
5495: PUSH
5496: LD_INT 1
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: LIST
5503: LIST
5504: PPUSH
5505: CALL 29870 0 6
5509: ST_TO_ADDR
// end ;
5510: LD_VAR 0 1
5514: RET
// export function PrepareLegion ; var i , b , veh , tmp , tmp2 , cameras , side , sr , depot , base ; begin
5515: LD_INT 0
5517: PPUSH
5518: PPUSH
5519: PPUSH
5520: PPUSH
5521: PPUSH
5522: PPUSH
5523: PPUSH
5524: PPUSH
5525: PPUSH
5526: PPUSH
5527: PPUSH
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 0 , 0 , legApe , 0 ) ;
5528: LD_INT 0
5530: PPUSH
5531: LD_INT 0
5533: PPUSH
5534: LD_INT 6
5536: PPUSH
5537: LD_INT 0
5539: PPUSH
5540: LD_INT 0
5542: PPUSH
5543: LD_INT 0
5545: PPUSH
5546: LD_INT 0
5548: PPUSH
5549: LD_INT 8
5551: PPUSH
5552: LD_INT 0
5554: PPUSH
5555: CALL 54275 0 9
// side := 8 ;
5559: LD_ADDR_VAR 0 8
5563: PUSH
5564: LD_INT 8
5566: ST_TO_ADDR
// tmp := AreaToList ( minesArea , 0 ) ;
5567: LD_ADDR_VAR 0 5
5571: PUSH
5572: LD_INT 20
5574: PPUSH
5575: LD_INT 0
5577: PPUSH
5578: CALL_OW 517
5582: ST_TO_ADDR
// if Difficulty > 2 then
5583: LD_OWVAR 67
5587: PUSH
5588: LD_INT 2
5590: GREATER
5591: IFFALSE 5735
// begin tmp2 := AreaToList ( minesArea2 , 0 ) ;
5593: LD_ADDR_VAR 0 6
5597: PUSH
5598: LD_INT 27
5600: PPUSH
5601: LD_INT 0
5603: PPUSH
5604: CALL_OW 517
5608: ST_TO_ADDR
// for i = 1 to tmp2 [ 1 ] do
5609: LD_ADDR_VAR 0 2
5613: PUSH
5614: DOUBLE
5615: LD_INT 1
5617: DEC
5618: ST_TO_ADDR
5619: LD_VAR 0 6
5623: PUSH
5624: LD_INT 1
5626: ARRAY
5627: PUSH
5628: FOR_TO
5629: IFFALSE 5733
// begin tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , tmp2 [ 1 ] [ i ] ) ;
5631: LD_ADDR_VAR 0 5
5635: PUSH
5636: LD_VAR 0 5
5640: PPUSH
5641: LD_INT 1
5643: PUSH
5644: LD_VAR 0 5
5648: PUSH
5649: LD_INT 1
5651: ARRAY
5652: PUSH
5653: LD_INT 1
5655: PLUS
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PPUSH
5661: LD_VAR 0 6
5665: PUSH
5666: LD_INT 1
5668: ARRAY
5669: PUSH
5670: LD_VAR 0 2
5674: ARRAY
5675: PPUSH
5676: CALL 26583 0 3
5680: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , tmp2 [ 2 ] [ i ] ) ;
5681: LD_ADDR_VAR 0 5
5685: PUSH
5686: LD_VAR 0 5
5690: PPUSH
5691: LD_INT 2
5693: PUSH
5694: LD_VAR 0 5
5698: PUSH
5699: LD_INT 2
5701: ARRAY
5702: PUSH
5703: LD_INT 1
5705: PLUS
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: PPUSH
5711: LD_VAR 0 6
5715: PUSH
5716: LD_INT 2
5718: ARRAY
5719: PUSH
5720: LD_VAR 0 2
5724: ARRAY
5725: PPUSH
5726: CALL 26583 0 3
5730: ST_TO_ADDR
// end ;
5731: GO 5628
5733: POP
5734: POP
// end ; if tmp then
5735: LD_VAR 0 5
5739: IFFALSE 5867
// begin for i = 1 to tmp [ 1 ] do
5741: LD_ADDR_VAR 0 2
5745: PUSH
5746: DOUBLE
5747: LD_INT 1
5749: DEC
5750: ST_TO_ADDR
5751: LD_VAR 0 5
5755: PUSH
5756: LD_INT 1
5758: ARRAY
5759: PUSH
5760: FOR_TO
5761: IFFALSE 5865
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side , 0 ) ;
5763: LD_VAR 0 5
5767: PUSH
5768: LD_INT 1
5770: ARRAY
5771: PUSH
5772: LD_VAR 0 2
5776: ARRAY
5777: PPUSH
5778: LD_VAR 0 5
5782: PUSH
5783: LD_INT 2
5785: ARRAY
5786: PUSH
5787: LD_VAR 0 2
5791: ARRAY
5792: PPUSH
5793: LD_VAR 0 8
5797: PPUSH
5798: LD_INT 0
5800: PPUSH
5801: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
5805: LD_ADDR_EXP 16
5809: PUSH
5810: LD_EXP 16
5814: PPUSH
5815: LD_EXP 16
5819: PUSH
5820: LD_INT 1
5822: PLUS
5823: PPUSH
5824: LD_VAR 0 5
5828: PUSH
5829: LD_INT 1
5831: ARRAY
5832: PUSH
5833: LD_VAR 0 2
5837: ARRAY
5838: PUSH
5839: LD_VAR 0 5
5843: PUSH
5844: LD_INT 2
5846: ARRAY
5847: PUSH
5848: LD_VAR 0 2
5852: ARRAY
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: PPUSH
5858: CALL_OW 2
5862: ST_TO_ADDR
// end ;
5863: GO 5760
5865: POP
5866: POP
// end ; cameras := [ [ 165 , 156 ] , [ 143 , 145 ] , [ 152 , 165 ] , [ 123 , 153 ] , [ 161 , 215 ] , [ 172 , 100 ] , [ 148 , 83 ] , [ 122 , 68 ] , [ 105 , 74 ] , [ 113 , 97 ] ] ;
5867: LD_ADDR_VAR 0 7
5871: PUSH
5872: LD_INT 165
5874: PUSH
5875: LD_INT 156
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: PUSH
5882: LD_INT 143
5884: PUSH
5885: LD_INT 145
5887: PUSH
5888: EMPTY
5889: LIST
5890: LIST
5891: PUSH
5892: LD_INT 152
5894: PUSH
5895: LD_INT 165
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: PUSH
5902: LD_INT 123
5904: PUSH
5905: LD_INT 153
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: LD_INT 161
5914: PUSH
5915: LD_INT 215
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: PUSH
5922: LD_INT 172
5924: PUSH
5925: LD_INT 100
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: PUSH
5932: LD_INT 148
5934: PUSH
5935: LD_INT 83
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: PUSH
5942: LD_INT 122
5944: PUSH
5945: LD_INT 68
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: PUSH
5952: LD_INT 105
5954: PUSH
5955: LD_INT 74
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: PUSH
5962: LD_INT 113
5964: PUSH
5965: LD_INT 97
5967: PUSH
5968: EMPTY
5969: LIST
5970: LIST
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: ST_TO_ADDR
// for i in cameras do
5984: LD_ADDR_VAR 0 2
5988: PUSH
5989: LD_VAR 0 7
5993: PUSH
5994: FOR_IN
5995: IFFALSE 6026
// HiddenCamera ( i [ 1 ] , i [ 2 ] , side ) ;
5997: LD_VAR 0 2
6001: PUSH
6002: LD_INT 1
6004: ARRAY
6005: PPUSH
6006: LD_VAR 0 2
6010: PUSH
6011: LD_INT 2
6013: ARRAY
6014: PPUSH
6015: LD_VAR 0 8
6019: PPUSH
6020: CALL_OW 244
6024: GO 5994
6026: POP
6027: POP
// tmp := [ [ 1 , 144 , 110 , 1 , 0 , 0 ] , [ 3 , 151 , 118 , 0 , 0 , 0 ] , [ 8 , 158 , 110 , 4 , 10 , 15 ] , [ 23 , 154 , 121 , 5 , 0 , 0 ] , [ 22 , 155 , 118 , 4 , 0 , 0 ] , [ 21 , 151 , 122 , 0 , 0 , 0 ] , [ 18 , 148 , 118 , 1 , 0 , 0 ] , [ 17 , 147 , 114 , 2 , 0 , 0 ] , [ 29 , 163 , 120 , 5 , 0 , 0 ] , [ 27 , 137 , 116 , 3 , 0 , 0 ] , [ 27 , 133 , 111 , 1 , 0 , 0 ] , [ 27 , 132 , 106 , 4 , 0 , 0 ] , [ 26 , 137 , 111 , 0 , 0 , 0 ] , [ 8 , 141 , 117 , 1 , 13 , 11 ] , [ 30 , 140 , 128 , 1 , 0 , 0 ] , [ 5 , 146 , 96 , 3 , 0 , 0 ] , [ 32 , 150 , 98 , 3 , 0 , 0 ] , [ 32 , 142 , 95 , 3 , 0 , 0 ] , [ 32 , 159 , 104 , 3 , 0 , 0 ] , [ 32 , 133 , 95 , 3 , 0 , 0 ] , [ 32 , 131 , 102 , 2 , 0 , 0 ] , [ 32 , 164 , 144 , 0 , 0 , 0 ] , [ 32 , 146 , 139 , 0 , 0 , 0 ] , [ 26 , 143 , 122 , 4 , 0 , 0 ] , [ 26 , 164 , 116 , 2 , 0 , 0 ] , ] ;
6028: LD_ADDR_VAR 0 5
6032: PUSH
6033: LD_INT 1
6035: PUSH
6036: LD_INT 144
6038: PUSH
6039: LD_INT 110
6041: PUSH
6042: LD_INT 1
6044: PUSH
6045: LD_INT 0
6047: PUSH
6048: LD_INT 0
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: PUSH
6059: LD_INT 3
6061: PUSH
6062: LD_INT 151
6064: PUSH
6065: LD_INT 118
6067: PUSH
6068: LD_INT 0
6070: PUSH
6071: LD_INT 0
6073: PUSH
6074: LD_INT 0
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: PUSH
6085: LD_INT 8
6087: PUSH
6088: LD_INT 158
6090: PUSH
6091: LD_INT 110
6093: PUSH
6094: LD_INT 4
6096: PUSH
6097: LD_INT 10
6099: PUSH
6100: LD_INT 15
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: PUSH
6111: LD_INT 23
6113: PUSH
6114: LD_INT 154
6116: PUSH
6117: LD_INT 121
6119: PUSH
6120: LD_INT 5
6122: PUSH
6123: LD_INT 0
6125: PUSH
6126: LD_INT 0
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: PUSH
6137: LD_INT 22
6139: PUSH
6140: LD_INT 155
6142: PUSH
6143: LD_INT 118
6145: PUSH
6146: LD_INT 4
6148: PUSH
6149: LD_INT 0
6151: PUSH
6152: LD_INT 0
6154: PUSH
6155: EMPTY
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 21
6165: PUSH
6166: LD_INT 151
6168: PUSH
6169: LD_INT 122
6171: PUSH
6172: LD_INT 0
6174: PUSH
6175: LD_INT 0
6177: PUSH
6178: LD_INT 0
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: PUSH
6189: LD_INT 18
6191: PUSH
6192: LD_INT 148
6194: PUSH
6195: LD_INT 118
6197: PUSH
6198: LD_INT 1
6200: PUSH
6201: LD_INT 0
6203: PUSH
6204: LD_INT 0
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: PUSH
6215: LD_INT 17
6217: PUSH
6218: LD_INT 147
6220: PUSH
6221: LD_INT 114
6223: PUSH
6224: LD_INT 2
6226: PUSH
6227: LD_INT 0
6229: PUSH
6230: LD_INT 0
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: PUSH
6241: LD_INT 29
6243: PUSH
6244: LD_INT 163
6246: PUSH
6247: LD_INT 120
6249: PUSH
6250: LD_INT 5
6252: PUSH
6253: LD_INT 0
6255: PUSH
6256: LD_INT 0
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 27
6269: PUSH
6270: LD_INT 137
6272: PUSH
6273: LD_INT 116
6275: PUSH
6276: LD_INT 3
6278: PUSH
6279: LD_INT 0
6281: PUSH
6282: LD_INT 0
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: PUSH
6293: LD_INT 27
6295: PUSH
6296: LD_INT 133
6298: PUSH
6299: LD_INT 111
6301: PUSH
6302: LD_INT 1
6304: PUSH
6305: LD_INT 0
6307: PUSH
6308: LD_INT 0
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_INT 27
6321: PUSH
6322: LD_INT 132
6324: PUSH
6325: LD_INT 106
6327: PUSH
6328: LD_INT 4
6330: PUSH
6331: LD_INT 0
6333: PUSH
6334: LD_INT 0
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: PUSH
6345: LD_INT 26
6347: PUSH
6348: LD_INT 137
6350: PUSH
6351: LD_INT 111
6353: PUSH
6354: LD_INT 0
6356: PUSH
6357: LD_INT 0
6359: PUSH
6360: LD_INT 0
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: PUSH
6371: LD_INT 8
6373: PUSH
6374: LD_INT 141
6376: PUSH
6377: LD_INT 117
6379: PUSH
6380: LD_INT 1
6382: PUSH
6383: LD_INT 13
6385: PUSH
6386: LD_INT 11
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: PUSH
6397: LD_INT 30
6399: PUSH
6400: LD_INT 140
6402: PUSH
6403: LD_INT 128
6405: PUSH
6406: LD_INT 1
6408: PUSH
6409: LD_INT 0
6411: PUSH
6412: LD_INT 0
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 5
6425: PUSH
6426: LD_INT 146
6428: PUSH
6429: LD_INT 96
6431: PUSH
6432: LD_INT 3
6434: PUSH
6435: LD_INT 0
6437: PUSH
6438: LD_INT 0
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: PUSH
6449: LD_INT 32
6451: PUSH
6452: LD_INT 150
6454: PUSH
6455: LD_INT 98
6457: PUSH
6458: LD_INT 3
6460: PUSH
6461: LD_INT 0
6463: PUSH
6464: LD_INT 0
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: PUSH
6475: LD_INT 32
6477: PUSH
6478: LD_INT 142
6480: PUSH
6481: LD_INT 95
6483: PUSH
6484: LD_INT 3
6486: PUSH
6487: LD_INT 0
6489: PUSH
6490: LD_INT 0
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: PUSH
6501: LD_INT 32
6503: PUSH
6504: LD_INT 159
6506: PUSH
6507: LD_INT 104
6509: PUSH
6510: LD_INT 3
6512: PUSH
6513: LD_INT 0
6515: PUSH
6516: LD_INT 0
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: PUSH
6527: LD_INT 32
6529: PUSH
6530: LD_INT 133
6532: PUSH
6533: LD_INT 95
6535: PUSH
6536: LD_INT 3
6538: PUSH
6539: LD_INT 0
6541: PUSH
6542: LD_INT 0
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: PUSH
6553: LD_INT 32
6555: PUSH
6556: LD_INT 131
6558: PUSH
6559: LD_INT 102
6561: PUSH
6562: LD_INT 2
6564: PUSH
6565: LD_INT 0
6567: PUSH
6568: LD_INT 0
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: PUSH
6579: LD_INT 32
6581: PUSH
6582: LD_INT 164
6584: PUSH
6585: LD_INT 144
6587: PUSH
6588: LD_INT 0
6590: PUSH
6591: LD_INT 0
6593: PUSH
6594: LD_INT 0
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: PUSH
6605: LD_INT 32
6607: PUSH
6608: LD_INT 146
6610: PUSH
6611: LD_INT 139
6613: PUSH
6614: LD_INT 0
6616: PUSH
6617: LD_INT 0
6619: PUSH
6620: LD_INT 0
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: PUSH
6631: LD_INT 26
6633: PUSH
6634: LD_INT 143
6636: PUSH
6637: LD_INT 122
6639: PUSH
6640: LD_INT 4
6642: PUSH
6643: LD_INT 0
6645: PUSH
6646: LD_INT 0
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: PUSH
6657: LD_INT 26
6659: PUSH
6660: LD_INT 164
6662: PUSH
6663: LD_INT 116
6665: PUSH
6666: LD_INT 2
6668: PUSH
6669: LD_INT 0
6671: PUSH
6672: LD_INT 0
6674: PUSH
6675: EMPTY
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: ST_TO_ADDR
// for i in tmp do
6710: LD_ADDR_VAR 0 2
6714: PUSH
6715: LD_VAR 0 5
6719: PUSH
6720: FOR_IN
6721: IFFALSE 6952
// begin uc_side := side ;
6723: LD_ADDR_OWVAR 20
6727: PUSH
6728: LD_VAR 0 8
6732: ST_TO_ADDR
// uc_nation := nation_arabian ;
6733: LD_ADDR_OWVAR 21
6737: PUSH
6738: LD_INT 2
6740: ST_TO_ADDR
// bc_type := i [ 1 ] ;
6741: LD_ADDR_OWVAR 42
6745: PUSH
6746: LD_VAR 0 2
6750: PUSH
6751: LD_INT 1
6753: ARRAY
6754: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
6755: LD_ADDR_OWVAR 43
6759: PUSH
6760: LD_INT 5
6762: PPUSH
6763: LD_INT 6
6765: PPUSH
6766: CALL_OW 12
6770: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
6771: LD_ADDR_OWVAR 44
6775: PUSH
6776: LD_VAR 0 2
6780: PUSH
6781: LD_INT 5
6783: ARRAY
6784: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
6785: LD_ADDR_OWVAR 45
6789: PUSH
6790: LD_VAR 0 2
6794: PUSH
6795: LD_INT 6
6797: ARRAY
6798: ST_TO_ADDR
// sr := 0 ;
6799: LD_ADDR_VAR 0 9
6803: PUSH
6804: LD_INT 0
6806: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
6807: LD_VAR 0 2
6811: PUSH
6812: LD_INT 1
6814: ARRAY
6815: PUSH
6816: LD_INT 29
6818: EQUAL
6819: IFFALSE 6831
// sr := mat_oil else
6821: LD_ADDR_VAR 0 9
6825: PUSH
6826: LD_INT 2
6828: ST_TO_ADDR
6829: GO 6853
// if i [ 1 ] = b_siberite_mine then
6831: LD_VAR 0 2
6835: PUSH
6836: LD_INT 1
6838: ARRAY
6839: PUSH
6840: LD_INT 30
6842: EQUAL
6843: IFFALSE 6853
// sr := mat_siberit ;
6845: LD_ADDR_VAR 0 9
6849: PUSH
6850: LD_INT 3
6852: ST_TO_ADDR
// if sr then
6853: LD_VAR 0 9
6857: IFFALSE 6913
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
6859: LD_VAR 0 2
6863: PUSH
6864: LD_INT 2
6866: ARRAY
6867: PPUSH
6868: LD_VAR 0 2
6872: PUSH
6873: LD_INT 3
6875: ARRAY
6876: PPUSH
6877: LD_VAR 0 9
6881: PPUSH
6882: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
6886: LD_VAR 0 2
6890: PUSH
6891: LD_INT 2
6893: ARRAY
6894: PPUSH
6895: LD_VAR 0 2
6899: PUSH
6900: LD_INT 3
6902: ARRAY
6903: PPUSH
6904: LD_VAR 0 8
6908: PPUSH
6909: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
6913: LD_ADDR_VAR 0 3
6917: PUSH
6918: LD_VAR 0 2
6922: PUSH
6923: LD_INT 2
6925: ARRAY
6926: PPUSH
6927: LD_VAR 0 2
6931: PUSH
6932: LD_INT 3
6934: ARRAY
6935: PPUSH
6936: LD_VAR 0 2
6940: PUSH
6941: LD_INT 4
6943: ARRAY
6944: PPUSH
6945: CALL_OW 47
6949: ST_TO_ADDR
// end ;
6950: GO 6720
6952: POP
6953: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6954: LD_ADDR_VAR 0 10
6958: PUSH
6959: LD_INT 22
6961: PUSH
6962: LD_VAR 0 8
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: PUSH
6971: LD_INT 30
6973: PUSH
6974: LD_INT 1
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: PPUSH
6985: CALL_OW 69
6989: ST_TO_ADDR
// if not depot then
6990: LD_VAR 0 10
6994: NOT
6995: IFFALSE 6999
// exit ;
6997: GO 7245
// base := PrepareBase ( depot [ 1 ] , legBase , 0 , [ 7 , 8 , 10 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 14 , 6 , 6 , 5 ] ) ;
6999: LD_ADDR_VAR 0 11
7003: PUSH
7004: LD_VAR 0 10
7008: PUSH
7009: LD_INT 1
7011: ARRAY
7012: PPUSH
7013: LD_INT 6
7015: PPUSH
7016: LD_INT 0
7018: PPUSH
7019: LD_INT 7
7021: PUSH
7022: LD_INT 8
7024: PUSH
7025: LD_INT 10
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: LIST
7032: PUSH
7033: LD_OWVAR 67
7037: ARRAY
7038: PPUSH
7039: LD_INT 3000
7041: PUSH
7042: LD_INT 300
7044: PUSH
7045: LD_INT 100
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: LIST
7052: PPUSH
7053: LD_INT 14
7055: PUSH
7056: LD_INT 6
7058: PUSH
7059: LD_INT 6
7061: PUSH
7062: LD_INT 5
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: PPUSH
7071: CALL 29870 0 6
7075: ST_TO_ADDR
// if not base then
7076: LD_VAR 0 11
7080: NOT
7081: IFFALSE 7085
// exit ;
7083: GO 7245
// if Difficulty > 1 then
7085: LD_OWVAR 67
7089: PUSH
7090: LD_INT 1
7092: GREATER
7093: IFFALSE 7166
// begin InitHc ;
7095: CALL_OW 19
// PrepareHuman ( sex_male , class_sniper , [ 5 , 8 ] [ Difficulty - 1 ] ) ;
7099: LD_INT 1
7101: PPUSH
7102: LD_INT 5
7104: PPUSH
7105: LD_INT 5
7107: PUSH
7108: LD_INT 8
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: LD_OWVAR 67
7119: PUSH
7120: LD_INT 1
7122: MINUS
7123: ARRAY
7124: PPUSH
7125: CALL_OW 380
// for i = 1 to Difficulty do
7129: LD_ADDR_VAR 0 2
7133: PUSH
7134: DOUBLE
7135: LD_INT 1
7137: DEC
7138: ST_TO_ADDR
7139: LD_OWVAR 67
7143: PUSH
7144: FOR_TO
7145: IFFALSE 7164
// PlaceUnitArea ( CreateHuman , sniperGuardArea , false ) ;
7147: CALL_OW 44
7151: PPUSH
7152: LD_INT 24
7154: PPUSH
7155: LD_INT 0
7157: PPUSH
7158: CALL_OW 49
7162: GO 7144
7164: POP
7165: POP
// end ; mc_bases := Replace ( mc_bases , mc_leg , base ) ;
7166: LD_ADDR_EXP 36
7170: PUSH
7171: LD_EXP 36
7175: PPUSH
7176: LD_EXP 6
7180: PPUSH
7181: LD_VAR 0 11
7185: PPUSH
7186: CALL_OW 1
7190: ST_TO_ADDR
// hc_gallery := ru ;
7191: LD_ADDR_OWVAR 33
7195: PUSH
7196: LD_STRING ru
7198: ST_TO_ADDR
// hc_face_number := 44 ;
7199: LD_ADDR_OWVAR 34
7203: PUSH
7204: LD_INT 44
7206: ST_TO_ADDR
// hc_name := Robert Farmer ;
7207: LD_ADDR_OWVAR 26
7211: PUSH
7212: LD_STRING Robert Farmer
7214: ST_TO_ADDR
// hc_sex := sex_male ;
7215: LD_ADDR_OWVAR 27
7219: PUSH
7220: LD_INT 1
7222: ST_TO_ADDR
// hc_class := 1 ;
7223: LD_ADDR_OWVAR 28
7227: PUSH
7228: LD_INT 1
7230: ST_TO_ADDR
// Farmer := CreateHuman ;
7231: LD_ADDR_EXP 13
7235: PUSH
7236: CALL_OW 44
7240: ST_TO_ADDR
// InitHc ;
7241: CALL_OW 19
// end ;
7245: LD_VAR 0 1
7249: RET
// export function PrepareAmericans ; var i , b , tmp , side , sr , base , depot ; begin
7250: LD_INT 0
7252: PPUSH
7253: PPUSH
7254: PPUSH
7255: PPUSH
7256: PPUSH
7257: PPUSH
7258: PPUSH
7259: PPUSH
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , amerApe , 0 ) ;
7260: LD_INT 0
7262: PPUSH
7263: LD_INT 0
7265: PPUSH
7266: LD_INT 4
7268: PPUSH
7269: LD_INT 0
7271: PPUSH
7272: LD_INT 0
7274: PPUSH
7275: LD_INT 0
7277: PPUSH
7278: LD_INT 0
7280: PPUSH
7281: LD_INT 10
7283: PPUSH
7284: LD_INT 0
7286: PPUSH
7287: CALL 54275 0 9
// side := 4 ;
7291: LD_ADDR_VAR 0 5
7295: PUSH
7296: LD_INT 4
7298: ST_TO_ADDR
// tmp := [ [ 1 , 144 , 18 , 4 , 0 , 0 ] , [ 3 , 137 , 8 , 4 , 0 , 0 ] , [ 22 , 141 , 8 , 4 , 0 , 0 ] , [ 25 , 137 , 5 , 3 , 0 , 0 ] , [ 18 , 137 , 12 , 0 , 0 , 0 ] , [ 17 , 133 , 4 , 2 , 0 , 0 ] , [ 16 , 140 , 11 , 5 , 0 , 0 ] , [ 8 , 149 , 26 , 4 , 10 , 15 ] , [ 8 , 142 , 26 , 1 , 11 , 12 ] , [ 27 , 153 , 32 , 5 , 0 , 0 ] , [ 27 , 145 , 32 , 3 , 0 , 0 ] , [ 27 , 138 , 2 , 4 , 0 , 0 ] , [ 27 , 144 , 13 , 0 , 0 , 0 ] , [ 26 , 124 , 2 , 4 , 0 , 0 ] , [ 26 , 121 , 2 , 2 , 0 , 0 ] , [ 26 , 118 , 2 , 1 , 0 , 0 ] , [ 29 , 159 , 47 , 2 , 0 , 0 ] , [ 32 , 146 , 41 , 0 , 0 , 0 ] , [ 33 , 136 , 37 , 0 , 0 , 0 ] , [ 33 , 132 , 34 , 0 , 0 , 0 ] , [ 36 , 124 , 7 , 1 , 0 , 0 ] , [ 5 , 124 , 19 , 0 , 0 , 0 ] , [ 32 , 127 , 23 , 0 , 0 , 0 ] ] ;
7299: LD_ADDR_VAR 0 4
7303: PUSH
7304: LD_INT 1
7306: PUSH
7307: LD_INT 144
7309: PUSH
7310: LD_INT 18
7312: PUSH
7313: LD_INT 4
7315: PUSH
7316: LD_INT 0
7318: PUSH
7319: LD_INT 0
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: PUSH
7330: LD_INT 3
7332: PUSH
7333: LD_INT 137
7335: PUSH
7336: LD_INT 8
7338: PUSH
7339: LD_INT 4
7341: PUSH
7342: LD_INT 0
7344: PUSH
7345: LD_INT 0
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: PUSH
7356: LD_INT 22
7358: PUSH
7359: LD_INT 141
7361: PUSH
7362: LD_INT 8
7364: PUSH
7365: LD_INT 4
7367: PUSH
7368: LD_INT 0
7370: PUSH
7371: LD_INT 0
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: PUSH
7382: LD_INT 25
7384: PUSH
7385: LD_INT 137
7387: PUSH
7388: LD_INT 5
7390: PUSH
7391: LD_INT 3
7393: PUSH
7394: LD_INT 0
7396: PUSH
7397: LD_INT 0
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: PUSH
7408: LD_INT 18
7410: PUSH
7411: LD_INT 137
7413: PUSH
7414: LD_INT 12
7416: PUSH
7417: LD_INT 0
7419: PUSH
7420: LD_INT 0
7422: PUSH
7423: LD_INT 0
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: PUSH
7434: LD_INT 17
7436: PUSH
7437: LD_INT 133
7439: PUSH
7440: LD_INT 4
7442: PUSH
7443: LD_INT 2
7445: PUSH
7446: LD_INT 0
7448: PUSH
7449: LD_INT 0
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: PUSH
7460: LD_INT 16
7462: PUSH
7463: LD_INT 140
7465: PUSH
7466: LD_INT 11
7468: PUSH
7469: LD_INT 5
7471: PUSH
7472: LD_INT 0
7474: PUSH
7475: LD_INT 0
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: PUSH
7486: LD_INT 8
7488: PUSH
7489: LD_INT 149
7491: PUSH
7492: LD_INT 26
7494: PUSH
7495: LD_INT 4
7497: PUSH
7498: LD_INT 10
7500: PUSH
7501: LD_INT 15
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: PUSH
7512: LD_INT 8
7514: PUSH
7515: LD_INT 142
7517: PUSH
7518: LD_INT 26
7520: PUSH
7521: LD_INT 1
7523: PUSH
7524: LD_INT 11
7526: PUSH
7527: LD_INT 12
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: PUSH
7538: LD_INT 27
7540: PUSH
7541: LD_INT 153
7543: PUSH
7544: LD_INT 32
7546: PUSH
7547: LD_INT 5
7549: PUSH
7550: LD_INT 0
7552: PUSH
7553: LD_INT 0
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 27
7566: PUSH
7567: LD_INT 145
7569: PUSH
7570: LD_INT 32
7572: PUSH
7573: LD_INT 3
7575: PUSH
7576: LD_INT 0
7578: PUSH
7579: LD_INT 0
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 27
7592: PUSH
7593: LD_INT 138
7595: PUSH
7596: LD_INT 2
7598: PUSH
7599: LD_INT 4
7601: PUSH
7602: LD_INT 0
7604: PUSH
7605: LD_INT 0
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: PUSH
7616: LD_INT 27
7618: PUSH
7619: LD_INT 144
7621: PUSH
7622: LD_INT 13
7624: PUSH
7625: LD_INT 0
7627: PUSH
7628: LD_INT 0
7630: PUSH
7631: LD_INT 0
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: PUSH
7642: LD_INT 26
7644: PUSH
7645: LD_INT 124
7647: PUSH
7648: LD_INT 2
7650: PUSH
7651: LD_INT 4
7653: PUSH
7654: LD_INT 0
7656: PUSH
7657: LD_INT 0
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: PUSH
7668: LD_INT 26
7670: PUSH
7671: LD_INT 121
7673: PUSH
7674: LD_INT 2
7676: PUSH
7677: LD_INT 2
7679: PUSH
7680: LD_INT 0
7682: PUSH
7683: LD_INT 0
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: PUSH
7694: LD_INT 26
7696: PUSH
7697: LD_INT 118
7699: PUSH
7700: LD_INT 2
7702: PUSH
7703: LD_INT 1
7705: PUSH
7706: LD_INT 0
7708: PUSH
7709: LD_INT 0
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: PUSH
7720: LD_INT 29
7722: PUSH
7723: LD_INT 159
7725: PUSH
7726: LD_INT 47
7728: PUSH
7729: LD_INT 2
7731: PUSH
7732: LD_INT 0
7734: PUSH
7735: LD_INT 0
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: PUSH
7746: LD_INT 32
7748: PUSH
7749: LD_INT 146
7751: PUSH
7752: LD_INT 41
7754: PUSH
7755: LD_INT 0
7757: PUSH
7758: LD_INT 0
7760: PUSH
7761: LD_INT 0
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: PUSH
7772: LD_INT 33
7774: PUSH
7775: LD_INT 136
7777: PUSH
7778: LD_INT 37
7780: PUSH
7781: LD_INT 0
7783: PUSH
7784: LD_INT 0
7786: PUSH
7787: LD_INT 0
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: PUSH
7798: LD_INT 33
7800: PUSH
7801: LD_INT 132
7803: PUSH
7804: LD_INT 34
7806: PUSH
7807: LD_INT 0
7809: PUSH
7810: LD_INT 0
7812: PUSH
7813: LD_INT 0
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: PUSH
7824: LD_INT 36
7826: PUSH
7827: LD_INT 124
7829: PUSH
7830: LD_INT 7
7832: PUSH
7833: LD_INT 1
7835: PUSH
7836: LD_INT 0
7838: PUSH
7839: LD_INT 0
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: PUSH
7850: LD_INT 5
7852: PUSH
7853: LD_INT 124
7855: PUSH
7856: LD_INT 19
7858: PUSH
7859: LD_INT 0
7861: PUSH
7862: LD_INT 0
7864: PUSH
7865: LD_INT 0
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: PUSH
7876: LD_INT 32
7878: PUSH
7879: LD_INT 127
7881: PUSH
7882: LD_INT 23
7884: PUSH
7885: LD_INT 0
7887: PUSH
7888: LD_INT 0
7890: PUSH
7891: LD_INT 0
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: ST_TO_ADDR
// for i in tmp do
7927: LD_ADDR_VAR 0 2
7931: PUSH
7932: LD_VAR 0 4
7936: PUSH
7937: FOR_IN
7938: IFFALSE 8169
// begin uc_side := side ;
7940: LD_ADDR_OWVAR 20
7944: PUSH
7945: LD_VAR 0 5
7949: ST_TO_ADDR
// uc_nation := nation_american ;
7950: LD_ADDR_OWVAR 21
7954: PUSH
7955: LD_INT 1
7957: ST_TO_ADDR
// bc_type := i [ 1 ] ;
7958: LD_ADDR_OWVAR 42
7962: PUSH
7963: LD_VAR 0 2
7967: PUSH
7968: LD_INT 1
7970: ARRAY
7971: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
7972: LD_ADDR_OWVAR 43
7976: PUSH
7977: LD_INT 5
7979: PPUSH
7980: LD_INT 6
7982: PPUSH
7983: CALL_OW 12
7987: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
7988: LD_ADDR_OWVAR 44
7992: PUSH
7993: LD_VAR 0 2
7997: PUSH
7998: LD_INT 5
8000: ARRAY
8001: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
8002: LD_ADDR_OWVAR 45
8006: PUSH
8007: LD_VAR 0 2
8011: PUSH
8012: LD_INT 6
8014: ARRAY
8015: ST_TO_ADDR
// sr := 0 ;
8016: LD_ADDR_VAR 0 6
8020: PUSH
8021: LD_INT 0
8023: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
8024: LD_VAR 0 2
8028: PUSH
8029: LD_INT 1
8031: ARRAY
8032: PUSH
8033: LD_INT 29
8035: EQUAL
8036: IFFALSE 8048
// sr := mat_oil else
8038: LD_ADDR_VAR 0 6
8042: PUSH
8043: LD_INT 2
8045: ST_TO_ADDR
8046: GO 8070
// if i [ 1 ] = b_siberite_mine then
8048: LD_VAR 0 2
8052: PUSH
8053: LD_INT 1
8055: ARRAY
8056: PUSH
8057: LD_INT 30
8059: EQUAL
8060: IFFALSE 8070
// sr := mat_siberit ;
8062: LD_ADDR_VAR 0 6
8066: PUSH
8067: LD_INT 3
8069: ST_TO_ADDR
// if sr then
8070: LD_VAR 0 6
8074: IFFALSE 8130
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
8076: LD_VAR 0 2
8080: PUSH
8081: LD_INT 2
8083: ARRAY
8084: PPUSH
8085: LD_VAR 0 2
8089: PUSH
8090: LD_INT 3
8092: ARRAY
8093: PPUSH
8094: LD_VAR 0 6
8098: PPUSH
8099: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
8103: LD_VAR 0 2
8107: PUSH
8108: LD_INT 2
8110: ARRAY
8111: PPUSH
8112: LD_VAR 0 2
8116: PUSH
8117: LD_INT 3
8119: ARRAY
8120: PPUSH
8121: LD_VAR 0 5
8125: PPUSH
8126: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
8130: LD_ADDR_VAR 0 3
8134: PUSH
8135: LD_VAR 0 2
8139: PUSH
8140: LD_INT 2
8142: ARRAY
8143: PPUSH
8144: LD_VAR 0 2
8148: PUSH
8149: LD_INT 3
8151: ARRAY
8152: PPUSH
8153: LD_VAR 0 2
8157: PUSH
8158: LD_INT 4
8160: ARRAY
8161: PPUSH
8162: CALL_OW 47
8166: ST_TO_ADDR
// end ;
8167: GO 7937
8169: POP
8170: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
8171: LD_ADDR_VAR 0 8
8175: PUSH
8176: LD_INT 22
8178: PUSH
8179: LD_VAR 0 5
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: PUSH
8188: LD_INT 30
8190: PUSH
8191: LD_INT 1
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: PPUSH
8202: CALL_OW 69
8206: ST_TO_ADDR
// if not depot then
8207: LD_VAR 0 8
8211: NOT
8212: IFFALSE 8216
// exit ;
8214: GO 8488
// base := PrepareBase ( depot [ 1 ] , amerBase , theta3 , [ 8 , 7 , 6 ] [ Difficulty ] , [ [ 2500 , 2000 , 1750 ] [ Difficulty ] , [ 300 , 250 , 200 ] [ Difficulty ] , [ 80 , 60 , 50 ] [ Difficulty ] ] , [ 7 , 6 , 5 , 5 ] ) ;
8216: LD_ADDR_VAR 0 7
8220: PUSH
8221: LD_VAR 0 8
8225: PUSH
8226: LD_INT 1
8228: ARRAY
8229: PPUSH
8230: LD_INT 3
8232: PPUSH
8233: LD_STRING theta3
8235: PPUSH
8236: LD_INT 8
8238: PUSH
8239: LD_INT 7
8241: PUSH
8242: LD_INT 6
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: LIST
8249: PUSH
8250: LD_OWVAR 67
8254: ARRAY
8255: PPUSH
8256: LD_INT 2500
8258: PUSH
8259: LD_INT 2000
8261: PUSH
8262: LD_INT 1750
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: LIST
8269: PUSH
8270: LD_OWVAR 67
8274: ARRAY
8275: PUSH
8276: LD_INT 300
8278: PUSH
8279: LD_INT 250
8281: PUSH
8282: LD_INT 200
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: LIST
8289: PUSH
8290: LD_OWVAR 67
8294: ARRAY
8295: PUSH
8296: LD_INT 80
8298: PUSH
8299: LD_INT 60
8301: PUSH
8302: LD_INT 50
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: LIST
8309: PUSH
8310: LD_OWVAR 67
8314: ARRAY
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: PPUSH
8321: LD_INT 7
8323: PUSH
8324: LD_INT 6
8326: PUSH
8327: LD_INT 5
8329: PUSH
8330: LD_INT 5
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL 29870 0 6
8343: ST_TO_ADDR
// if not base then
8344: LD_VAR 0 7
8348: NOT
8349: IFFALSE 8353
// exit ;
8351: GO 8488
// mc_bases := Replace ( mc_bases , mc_amer , base ) ;
8353: LD_ADDR_EXP 36
8357: PUSH
8358: LD_EXP 36
8362: PPUSH
8363: LD_EXP 5
8367: PPUSH
8368: LD_VAR 0 7
8372: PPUSH
8373: CALL_OW 1
8377: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
8378: LD_INT 1
8380: PPUSH
8381: LD_INT 1
8383: PPUSH
8384: LD_INT 7
8386: PPUSH
8387: CALL_OW 380
// allyCommander := CreateHuman ;
8391: LD_ADDR_EXP 11
8395: PUSH
8396: CALL_OW 44
8400: ST_TO_ADDR
// PlaceUnitXY ( allyCommander , 139 , 15 , false ) ;
8401: LD_EXP 11
8405: PPUSH
8406: LD_INT 139
8408: PPUSH
8409: LD_INT 15
8411: PPUSH
8412: LD_INT 0
8414: PPUSH
8415: CALL_OW 48
// ComTurnXY ( allyCommander , 137 , 15 ) ;
8419: LD_EXP 11
8423: PPUSH
8424: LD_INT 137
8426: PPUSH
8427: LD_INT 15
8429: PPUSH
8430: CALL_OW 118
// hc_gallery := us ;
8434: LD_ADDR_OWVAR 33
8438: PUSH
8439: LD_STRING us
8441: ST_TO_ADDR
// hc_face_number := 7 ;
8442: LD_ADDR_OWVAR 34
8446: PUSH
8447: LD_INT 7
8449: ST_TO_ADDR
// hc_name := Arthur Powell ;
8450: LD_ADDR_OWVAR 26
8454: PUSH
8455: LD_STRING Arthur Powell
8457: ST_TO_ADDR
// hc_sex := sex_male ;
8458: LD_ADDR_OWVAR 27
8462: PUSH
8463: LD_INT 1
8465: ST_TO_ADDR
// hc_class := 1 ;
8466: LD_ADDR_OWVAR 28
8470: PUSH
8471: LD_INT 1
8473: ST_TO_ADDR
// Powell := CreateHuman ;
8474: LD_ADDR_EXP 12
8478: PUSH
8479: CALL_OW 44
8483: ST_TO_ADDR
// InitHc ;
8484: CALL_OW 19
// end ;
8488: LD_VAR 0 1
8492: RET
// export function PreparePlayer ; var i , side , techs , tanks , cl , chassis , engines , weapons ; begin
8493: LD_INT 0
8495: PPUSH
8496: PPUSH
8497: PPUSH
8498: PPUSH
8499: PPUSH
8500: PPUSH
8501: PPUSH
8502: PPUSH
8503: PPUSH
// side := 1 ;
8504: LD_ADDR_VAR 0 3
8508: PUSH
8509: LD_INT 1
8511: ST_TO_ADDR
// result := [ [ ] , [ ] ] ;
8512: LD_ADDR_VAR 0 1
8516: PUSH
8517: EMPTY
8518: PUSH
8519: EMPTY
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: ST_TO_ADDR
// uc_side := side ;
8525: LD_ADDR_OWVAR 20
8529: PUSH
8530: LD_VAR 0 3
8534: ST_TO_ADDR
// uc_nation := nation_american ;
8535: LD_ADDR_OWVAR 21
8539: PUSH
8540: LD_INT 1
8542: ST_TO_ADDR
// InitHc ;
8543: CALL_OW 19
// InitVc ;
8547: CALL_OW 20
// hc_importance := 0 ;
8551: LD_ADDR_OWVAR 32
8555: PUSH
8556: LD_INT 0
8558: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked ] ;
8559: LD_ADDR_VAR 0 7
8563: PUSH
8564: LD_INT 2
8566: PUSH
8567: LD_INT 3
8569: PUSH
8570: LD_INT 3
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: LIST
8577: ST_TO_ADDR
// if commander = 2 then
8578: LD_EXP 25
8582: PUSH
8583: LD_INT 2
8585: EQUAL
8586: IFFALSE 8607
// chassis := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] ;
8588: LD_ADDR_VAR 0 7
8592: PUSH
8593: LD_INT 3
8595: PUSH
8596: LD_INT 4
8598: PUSH
8599: LD_INT 4
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: LIST
8606: ST_TO_ADDR
// if commander = 3 then
8607: LD_EXP 25
8611: PUSH
8612: LD_INT 3
8614: EQUAL
8615: IFFALSE 8636
// chassis := [ us_medium_wheeled , us_morphling , us_morphling ] ;
8617: LD_ADDR_VAR 0 7
8621: PUSH
8622: LD_INT 2
8624: PUSH
8625: LD_INT 5
8627: PUSH
8628: LD_INT 5
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: LIST
8635: ST_TO_ADDR
// engines := [ engine_solar , engine_solar , engine_combustion ] ;
8636: LD_ADDR_VAR 0 8
8640: PUSH
8641: LD_INT 2
8643: PUSH
8644: LD_INT 2
8646: PUSH
8647: LD_INT 1
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: LIST
8654: ST_TO_ADDR
// if commander = 2 then
8655: LD_EXP 25
8659: PUSH
8660: LD_INT 2
8662: EQUAL
8663: IFFALSE 8684
// engines := [ engine_combustion , engine_combustion , engine_siberite ] ;
8665: LD_ADDR_VAR 0 8
8669: PUSH
8670: LD_INT 1
8672: PUSH
8673: LD_INT 1
8675: PUSH
8676: LD_INT 3
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: LIST
8683: ST_TO_ADDR
// if commander = 3 then
8684: LD_EXP 25
8688: PUSH
8689: LD_INT 3
8691: EQUAL
8692: IFFALSE 8713
// engines := [ engine_siberite , engine_siberite , engine_combustion ] ;
8694: LD_ADDR_VAR 0 8
8698: PUSH
8699: LD_INT 3
8701: PUSH
8702: LD_INT 3
8704: PUSH
8705: LD_INT 1
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: LIST
8712: ST_TO_ADDR
// weapons := [ us_double_gun , us_light_gun , us_gatling_gun ] ;
8713: LD_ADDR_VAR 0 9
8717: PUSH
8718: LD_INT 5
8720: PUSH
8721: LD_INT 3
8723: PUSH
8724: LD_INT 4
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: LIST
8731: ST_TO_ADDR
// if commander = 2 then
8732: LD_EXP 25
8736: PUSH
8737: LD_INT 2
8739: EQUAL
8740: IFFALSE 8761
// weapons := [ us_rocket_launcher , us_double_gun , us_heavy_gun ] ;
8742: LD_ADDR_VAR 0 9
8746: PUSH
8747: LD_INT 7
8749: PUSH
8750: LD_INT 5
8752: PUSH
8753: LD_INT 6
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: LIST
8760: ST_TO_ADDR
// if commander = 3 then
8761: LD_EXP 25
8765: PUSH
8766: LD_INT 3
8768: EQUAL
8769: IFFALSE 8790
// weapons := [ us_laser , us_double_laser , us_rocket_launcher ] ;
8771: LD_ADDR_VAR 0 9
8775: PUSH
8776: LD_INT 9
8778: PUSH
8779: LD_INT 10
8781: PUSH
8782: LD_INT 7
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: LIST
8789: ST_TO_ADDR
// tanks := [ 5 , 5 , 4 ] [ Difficulty ] ;
8790: LD_ADDR_VAR 0 5
8794: PUSH
8795: LD_INT 5
8797: PUSH
8798: LD_INT 5
8800: PUSH
8801: LD_INT 4
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: LIST
8808: PUSH
8809: LD_OWVAR 67
8813: ARRAY
8814: ST_TO_ADDR
// if commander = 2 then
8815: LD_EXP 25
8819: PUSH
8820: LD_INT 2
8822: EQUAL
8823: IFFALSE 8839
// tanks := tanks + 3 ;
8825: LD_ADDR_VAR 0 5
8829: PUSH
8830: LD_VAR 0 5
8834: PUSH
8835: LD_INT 3
8837: PLUS
8838: ST_TO_ADDR
// for i = 1 to tanks do
8839: LD_ADDR_VAR 0 2
8843: PUSH
8844: DOUBLE
8845: LD_INT 1
8847: DEC
8848: ST_TO_ADDR
8849: LD_VAR 0 5
8853: PUSH
8854: FOR_TO
8855: IFFALSE 8965
// begin PrepareVehicle ( chassis [ i mod 3 + 1 ] , engines [ rand ( 1 , 3 ) ] , control_manual , weapons [ i mod 3 + 1 ] , rand ( 60 , 70 ) ) ;
8857: LD_VAR 0 7
8861: PUSH
8862: LD_VAR 0 2
8866: PUSH
8867: LD_INT 3
8869: MOD
8870: PUSH
8871: LD_INT 1
8873: PLUS
8874: ARRAY
8875: PPUSH
8876: LD_VAR 0 8
8880: PUSH
8881: LD_INT 1
8883: PPUSH
8884: LD_INT 3
8886: PPUSH
8887: CALL_OW 12
8891: ARRAY
8892: PPUSH
8893: LD_INT 1
8895: PPUSH
8896: LD_VAR 0 9
8900: PUSH
8901: LD_VAR 0 2
8905: PUSH
8906: LD_INT 3
8908: MOD
8909: PUSH
8910: LD_INT 1
8912: PLUS
8913: ARRAY
8914: PPUSH
8915: LD_INT 60
8917: PPUSH
8918: LD_INT 70
8920: PPUSH
8921: CALL_OW 12
8925: PPUSH
8926: CALL 26461 0 5
// result := Replace ( result , 1 , result [ 1 ] ^ CreateVehicle ) ;
8930: LD_ADDR_VAR 0 1
8934: PUSH
8935: LD_VAR 0 1
8939: PPUSH
8940: LD_INT 1
8942: PPUSH
8943: LD_VAR 0 1
8947: PUSH
8948: LD_INT 1
8950: ARRAY
8951: PUSH
8952: CALL_OW 45
8956: ADD
8957: PPUSH
8958: CALL_OW 1
8962: ST_TO_ADDR
// end ;
8963: GO 8854
8965: POP
8966: POP
// cl := 1 ;
8967: LD_ADDR_VAR 0 6
8971: PUSH
8972: LD_INT 1
8974: ST_TO_ADDR
// for i = 1 to 10 do
8975: LD_ADDR_VAR 0 2
8979: PUSH
8980: DOUBLE
8981: LD_INT 1
8983: DEC
8984: ST_TO_ADDR
8985: LD_INT 10
8987: PUSH
8988: FOR_TO
8989: IFFALSE 9104
// begin if i mod 4 = 0 then
8991: LD_VAR 0 2
8995: PUSH
8996: LD_INT 4
8998: MOD
8999: PUSH
9000: LD_INT 0
9002: EQUAL
9003: IFFALSE 9019
// cl := cl + 1 ;
9005: LD_ADDR_VAR 0 6
9009: PUSH
9010: LD_VAR 0 6
9014: PUSH
9015: LD_INT 1
9017: PLUS
9018: ST_TO_ADDR
// if cl = 2 then
9019: LD_VAR 0 6
9023: PUSH
9024: LD_INT 2
9026: EQUAL
9027: IFFALSE 9037
// cl := 3 ;
9029: LD_ADDR_VAR 0 6
9033: PUSH
9034: LD_INT 3
9036: ST_TO_ADDR
// PrepareHuman ( false , cl , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
9037: LD_INT 0
9039: PPUSH
9040: LD_VAR 0 6
9044: PPUSH
9045: LD_INT 6
9047: PUSH
9048: LD_INT 6
9050: PUSH
9051: LD_INT 5
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: LIST
9058: PUSH
9059: LD_OWVAR 67
9063: ARRAY
9064: PPUSH
9065: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9069: LD_ADDR_VAR 0 1
9073: PUSH
9074: LD_VAR 0 1
9078: PPUSH
9079: LD_INT 2
9081: PPUSH
9082: LD_VAR 0 1
9086: PUSH
9087: LD_INT 2
9089: ARRAY
9090: PUSH
9091: CALL_OW 44
9095: ADD
9096: PPUSH
9097: CALL_OW 1
9101: ST_TO_ADDR
// end ;
9102: GO 8988
9104: POP
9105: POP
// if commander = 1 then
9106: LD_EXP 25
9110: PUSH
9111: LD_INT 1
9113: EQUAL
9114: IFFALSE 9182
// for i = 1 to 4 do
9116: LD_ADDR_VAR 0 2
9120: PUSH
9121: DOUBLE
9122: LD_INT 1
9124: DEC
9125: ST_TO_ADDR
9126: LD_INT 4
9128: PUSH
9129: FOR_TO
9130: IFFALSE 9180
// begin PrepareHuman ( false , class_soldier , 8 ) ;
9132: LD_INT 0
9134: PPUSH
9135: LD_INT 1
9137: PPUSH
9138: LD_INT 8
9140: PPUSH
9141: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9145: LD_ADDR_VAR 0 1
9149: PUSH
9150: LD_VAR 0 1
9154: PPUSH
9155: LD_INT 2
9157: PPUSH
9158: LD_VAR 0 1
9162: PUSH
9163: LD_INT 2
9165: ARRAY
9166: PUSH
9167: CALL_OW 44
9171: ADD
9172: PPUSH
9173: CALL_OW 1
9177: ST_TO_ADDR
// end ;
9178: GO 9129
9180: POP
9181: POP
// techs := [ ] ;
9182: LD_ADDR_VAR 0 4
9186: PUSH
9187: EMPTY
9188: ST_TO_ADDR
// if commander = 1 then
9189: LD_EXP 25
9193: PUSH
9194: LD_INT 1
9196: EQUAL
9197: IFFALSE 9222
// techs := [ tech_weap1 , tech_weap2 , tech_weap3 , tech_lasSight ] ;
9199: LD_ADDR_VAR 0 4
9203: PUSH
9204: LD_INT 51
9206: PUSH
9207: LD_INT 52
9209: PUSH
9210: LD_INT 53
9212: PUSH
9213: LD_INT 12
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: ST_TO_ADDR
// if commander = 2 then
9222: LD_EXP 25
9226: PUSH
9227: LD_INT 2
9229: EQUAL
9230: IFFALSE 9267
// techs := [ tech_tech1 , tech_oilEng , tech_oilPow , tech_solEng , tech_solPow , tech_opto1 , tech_radar ] ;
9232: LD_ADDR_VAR 0 4
9236: PUSH
9237: LD_INT 48
9239: PUSH
9240: LD_INT 47
9242: PUSH
9243: LD_INT 46
9245: PUSH
9246: LD_INT 45
9248: PUSH
9249: LD_INT 35
9251: PUSH
9252: LD_INT 60
9254: PUSH
9255: LD_INT 6
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: ST_TO_ADDR
// if commander = 3 then
9267: LD_EXP 25
9271: PUSH
9272: LD_INT 3
9274: EQUAL
9275: IFFALSE 9324
// techs := [ tech_advAI , tech_advchassis , tech_ai , tech_comp1 , tech_comp2 , tech_oilEng , tech_oilPow , tech_weap1 , tech_gatling , tech_gun ] ;
9277: LD_ADDR_VAR 0 4
9281: PUSH
9282: LD_INT 27
9284: PUSH
9285: LD_INT 36
9287: PUSH
9288: LD_INT 32
9290: PUSH
9291: LD_INT 57
9293: PUSH
9294: LD_INT 58
9296: PUSH
9297: LD_INT 47
9299: PUSH
9300: LD_INT 46
9302: PUSH
9303: LD_INT 51
9305: PUSH
9306: LD_INT 69
9308: PUSH
9309: LD_INT 39
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: ST_TO_ADDR
// if techs then
9324: LD_VAR 0 4
9328: IFFALSE 9362
// for i in techs do
9330: LD_ADDR_VAR 0 2
9334: PUSH
9335: LD_VAR 0 4
9339: PUSH
9340: FOR_IN
9341: IFFALSE 9360
// SetTech ( i , 1 , state_researched ) ;
9343: LD_VAR 0 2
9347: PPUSH
9348: LD_INT 1
9350: PPUSH
9351: LD_INT 2
9353: PPUSH
9354: CALL_OW 322
9358: GO 9340
9360: POP
9361: POP
// hc_gallery := skirmish ;
9362: LD_ADDR_OWVAR 33
9366: PUSH
9367: LD_STRING skirmish
9369: ST_TO_ADDR
// hc_face_number := commander ;
9370: LD_ADDR_OWVAR 34
9374: PUSH
9375: LD_EXP 25
9379: ST_TO_ADDR
// hc_importance := 100 ;
9380: LD_ADDR_OWVAR 32
9384: PUSH
9385: LD_INT 100
9387: ST_TO_ADDR
// case commander of 1 :
9388: LD_EXP 25
9392: PUSH
9393: LD_INT 1
9395: DOUBLE
9396: EQUAL
9397: IFTRUE 9401
9399: GO 9425
9401: POP
// begin hc_name := Jeff Ironside ;
9402: LD_ADDR_OWVAR 26
9406: PUSH
9407: LD_STRING Jeff Ironside
9409: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
9410: LD_INT 1
9412: PPUSH
9413: LD_INT 1
9415: PPUSH
9416: LD_INT 7
9418: PPUSH
9419: CALL_OW 380
// end ; 2 :
9423: GO 9490
9425: LD_INT 2
9427: DOUBLE
9428: EQUAL
9429: IFTRUE 9433
9431: GO 9457
9433: POP
// begin hc_name := Paul Johnson ;
9434: LD_ADDR_OWVAR 26
9438: PUSH
9439: LD_STRING Paul Johnson
9441: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 7 ) ;
9442: LD_INT 1
9444: PPUSH
9445: LD_INT 3
9447: PPUSH
9448: LD_INT 7
9450: PPUSH
9451: CALL_OW 380
// end ; 3 :
9455: GO 9490
9457: LD_INT 3
9459: DOUBLE
9460: EQUAL
9461: IFTRUE 9465
9463: GO 9489
9465: POP
// begin hc_name := Lisa Stuart ;
9466: LD_ADDR_OWVAR 26
9470: PUSH
9471: LD_STRING Lisa Stuart
9473: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 7 ) ;
9474: LD_INT 2
9476: PPUSH
9477: LD_INT 4
9479: PPUSH
9480: LD_INT 7
9482: PPUSH
9483: CALL_OW 380
// end ; end ;
9487: GO 9490
9489: POP
// playerCommander := CreateHuman ;
9490: LD_ADDR_EXP 9
9494: PUSH
9495: CALL_OW 44
9499: ST_TO_ADDR
// hc_importance := 0 ;
9500: LD_ADDR_OWVAR 32
9504: PUSH
9505: LD_INT 0
9507: ST_TO_ADDR
// hc_gallery :=  ;
9508: LD_ADDR_OWVAR 33
9512: PUSH
9513: LD_STRING 
9515: ST_TO_ADDR
// result := Replace ( result , 2 , result [ 2 ] ^ playerCommander ) ;
9516: LD_ADDR_VAR 0 1
9520: PUSH
9521: LD_VAR 0 1
9525: PPUSH
9526: LD_INT 2
9528: PPUSH
9529: LD_VAR 0 1
9533: PUSH
9534: LD_INT 2
9536: ARRAY
9537: PUSH
9538: LD_EXP 9
9542: ADD
9543: PPUSH
9544: CALL_OW 1
9548: ST_TO_ADDR
// end ;
9549: LD_VAR 0 1
9553: RET
// export function PrepareReinforcements ; var i , peopleAmount , tmp , un , veh ; begin
9554: LD_INT 0
9556: PPUSH
9557: PPUSH
9558: PPUSH
9559: PPUSH
9560: PPUSH
9561: PPUSH
// uc_side := 1 ;
9562: LD_ADDR_OWVAR 20
9566: PUSH
9567: LD_INT 1
9569: ST_TO_ADDR
// uc_nation := 1 ;
9570: LD_ADDR_OWVAR 21
9574: PUSH
9575: LD_INT 1
9577: ST_TO_ADDR
// InitHc ;
9578: CALL_OW 19
// peopleAmount := [ 3 , 3 , 2 ] [ Difficulty ] ;
9582: LD_ADDR_VAR 0 3
9586: PUSH
9587: LD_INT 3
9589: PUSH
9590: LD_INT 3
9592: PUSH
9593: LD_INT 2
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: LIST
9600: PUSH
9601: LD_OWVAR 67
9605: ARRAY
9606: ST_TO_ADDR
// for i = 1 to peopleAmount do
9607: LD_ADDR_VAR 0 2
9611: PUSH
9612: DOUBLE
9613: LD_INT 1
9615: DEC
9616: ST_TO_ADDR
9617: LD_VAR 0 3
9621: PUSH
9622: FOR_TO
9623: IFFALSE 9672
// begin PrepareHuman ( false , 2 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9625: LD_INT 0
9627: PPUSH
9628: LD_INT 2
9630: PPUSH
9631: LD_INT 7
9633: PUSH
9634: LD_INT 6
9636: PUSH
9637: LD_INT 5
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: LIST
9644: PUSH
9645: LD_OWVAR 67
9649: ARRAY
9650: PPUSH
9651: CALL_OW 380
// PlaceUnitInArea ( CreateHuman , startArea , false ) ;
9655: CALL_OW 44
9659: PPUSH
9660: LD_INT 19
9662: PPUSH
9663: LD_INT 0
9665: PPUSH
9666: CALL 61146 0 3
// end ;
9670: GO 9622
9672: POP
9673: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_crane , 58 ) ;
9674: LD_INT 2
9676: PPUSH
9677: LD_INT 1
9679: PPUSH
9680: LD_INT 3
9682: PPUSH
9683: LD_INT 13
9685: PPUSH
9686: LD_INT 58
9688: PPUSH
9689: CALL 26461 0 5
// PlaceUnitInArea ( CreateVehicle , startArea , false ) ;
9693: CALL_OW 45
9697: PPUSH
9698: LD_INT 19
9700: PPUSH
9701: LD_INT 0
9703: PPUSH
9704: CALL 61146 0 3
// if commander = 1 then
9708: LD_EXP 25
9712: PUSH
9713: LD_INT 1
9715: EQUAL
9716: IFFALSE 9727
// wait ( 6 6$00 ) else
9718: LD_INT 12600
9720: PPUSH
9721: CALL_OW 67
9725: GO 9734
// wait ( 8 8$00 ) ;
9727: LD_INT 16800
9729: PPUSH
9730: CALL_OW 67
// uc_side := 1 ;
9734: LD_ADDR_OWVAR 20
9738: PUSH
9739: LD_INT 1
9741: ST_TO_ADDR
// uc_nation := 1 ;
9742: LD_ADDR_OWVAR 21
9746: PUSH
9747: LD_INT 1
9749: ST_TO_ADDR
// InitVc ;
9750: CALL_OW 20
// InitHc ;
9754: CALL_OW 19
// for i = 1 to 5 do
9758: LD_ADDR_VAR 0 2
9762: PUSH
9763: DOUBLE
9764: LD_INT 1
9766: DEC
9767: ST_TO_ADDR
9768: LD_INT 5
9770: PUSH
9771: FOR_TO
9772: IFFALSE 10016
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_light_wheeled ] [ i mod 3 + 1 ] , engine_combustion , [ control_manual , control_computer , control_computer ] [ i mod 3 + 1 ] , [ us_heavy_gun , us_cargo_bay , us_radar ] [ i mod 3 + 1 ] , rand ( 40 , 55 ) ) ;
9774: LD_INT 4
9776: PUSH
9777: LD_INT 3
9779: PUSH
9780: LD_INT 1
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: LIST
9787: PUSH
9788: LD_VAR 0 2
9792: PUSH
9793: LD_INT 3
9795: MOD
9796: PUSH
9797: LD_INT 1
9799: PLUS
9800: ARRAY
9801: PPUSH
9802: LD_INT 1
9804: PPUSH
9805: LD_INT 1
9807: PUSH
9808: LD_INT 3
9810: PUSH
9811: LD_INT 3
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: LIST
9818: PUSH
9819: LD_VAR 0 2
9823: PUSH
9824: LD_INT 3
9826: MOD
9827: PUSH
9828: LD_INT 1
9830: PLUS
9831: ARRAY
9832: PPUSH
9833: LD_INT 6
9835: PUSH
9836: LD_INT 12
9838: PUSH
9839: LD_INT 11
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: LIST
9846: PUSH
9847: LD_VAR 0 2
9851: PUSH
9852: LD_INT 3
9854: MOD
9855: PUSH
9856: LD_INT 1
9858: PLUS
9859: ARRAY
9860: PPUSH
9861: LD_INT 40
9863: PPUSH
9864: LD_INT 55
9866: PPUSH
9867: CALL_OW 12
9871: PPUSH
9872: CALL 26461 0 5
// veh := CreateVehicle ;
9876: LD_ADDR_VAR 0 6
9880: PUSH
9881: CALL_OW 45
9885: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
9886: LD_VAR 0 6
9890: PPUSH
9891: LD_INT 19
9893: PPUSH
9894: LD_INT 0
9896: PPUSH
9897: CALL 61146 0 3
// if GetWeapon ( veh ) = us_cargo_bay then
9901: LD_VAR 0 6
9905: PPUSH
9906: CALL_OW 264
9910: PUSH
9911: LD_INT 12
9913: EQUAL
9914: IFFALSE 9946
// begin AddCargo ( veh , mat_cans , 70 ) ;
9916: LD_VAR 0 6
9920: PPUSH
9921: LD_INT 1
9923: PPUSH
9924: LD_INT 70
9926: PPUSH
9927: CALL_OW 291
// AddCargo ( veh , mat_siberit , 30 ) ;
9931: LD_VAR 0 6
9935: PPUSH
9936: LD_INT 3
9938: PPUSH
9939: LD_INT 30
9941: PPUSH
9942: CALL_OW 291
// end ; if GetControl ( veh ) = control_manual then
9946: LD_VAR 0 6
9950: PPUSH
9951: CALL_OW 263
9955: PUSH
9956: LD_INT 1
9958: EQUAL
9959: IFFALSE 10014
// begin PrepareHuman ( sex_male , 3 , 6 ) ;
9961: LD_INT 1
9963: PPUSH
9964: LD_INT 3
9966: PPUSH
9967: LD_INT 6
9969: PPUSH
9970: CALL_OW 380
// un := CreateHuman ;
9974: LD_ADDR_VAR 0 5
9978: PUSH
9979: CALL_OW 44
9983: ST_TO_ADDR
// tmp := tmp ^ un ;
9984: LD_ADDR_VAR 0 4
9988: PUSH
9989: LD_VAR 0 4
9993: PUSH
9994: LD_VAR 0 5
9998: ADD
9999: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10000: LD_VAR 0 5
10004: PPUSH
10005: LD_VAR 0 6
10009: PPUSH
10010: CALL_OW 52
// end ; end ;
10014: GO 9771
10016: POP
10017: POP
// if tmp then
10018: LD_VAR 0 4
10022: IFFALSE 10086
// begin CenterNowOnUnits ( tmp ) ;
10024: LD_VAR 0 4
10028: PPUSH
10029: CALL_OW 87
// Say ( tmp [ 1 ] , DAR-1 ) ;
10033: LD_VAR 0 4
10037: PUSH
10038: LD_INT 1
10040: ARRAY
10041: PPUSH
10042: LD_STRING DAR-1
10044: PPUSH
10045: CALL_OW 88
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-DAR ) ;
10049: LD_EXP 9
10053: PPUSH
10054: LD_STRING D
10056: PUSH
10057: LD_STRING I
10059: PUSH
10060: LD_STRING J
10062: PUSH
10063: LD_STRING S
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: LIST
10070: PUSH
10071: LD_EXP 25
10075: ARRAY
10076: STR
10077: PUSH
10078: LD_STRING -1-DAR
10080: STR
10081: PPUSH
10082: CALL_OW 88
// end ; if not reinforceAllowed then
10086: LD_EXP 24
10090: NOT
10091: IFFALSE 10095
// exit ;
10093: GO 10249
// wait ( 25 25$00 ) ;
10095: LD_INT 52500
10097: PPUSH
10098: CALL_OW 67
// uc_side := 1 ;
10102: LD_ADDR_OWVAR 20
10106: PUSH
10107: LD_INT 1
10109: ST_TO_ADDR
// uc_nation := 1 ;
10110: LD_ADDR_OWVAR 21
10114: PUSH
10115: LD_INT 1
10117: ST_TO_ADDR
// InitVc ;
10118: CALL_OW 20
// InitHc ;
10122: CALL_OW 19
// for i = 1 to 4 do
10126: LD_ADDR_VAR 0 2
10130: PUSH
10131: DOUBLE
10132: LD_INT 1
10134: DEC
10135: ST_TO_ADDR
10136: LD_INT 4
10138: PUSH
10139: FOR_TO
10140: IFFALSE 10247
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 1 ) ;
10142: LD_INT 5
10144: PPUSH
10145: LD_INT 3
10147: PPUSH
10148: LD_INT 1
10150: PPUSH
10151: LD_INT 6
10153: PPUSH
10154: LD_INT 1
10156: PPUSH
10157: CALL 26461 0 5
// veh := CreateVehicle ;
10161: LD_ADDR_VAR 0 6
10165: PUSH
10166: CALL_OW 45
10170: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
10171: LD_VAR 0 6
10175: PPUSH
10176: LD_INT 19
10178: PPUSH
10179: LD_INT 0
10181: PPUSH
10182: CALL 61146 0 3
// if GetControl ( veh ) = control_manual then
10186: LD_VAR 0 6
10190: PPUSH
10191: CALL_OW 263
10195: PUSH
10196: LD_INT 1
10198: EQUAL
10199: IFFALSE 10245
// begin PrepareHuman ( false , 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
10201: LD_INT 0
10203: PPUSH
10204: LD_INT 3
10206: PPUSH
10207: LD_INT 7
10209: PUSH
10210: LD_INT 6
10212: PUSH
10213: LD_INT 5
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: LIST
10220: PUSH
10221: LD_OWVAR 67
10225: ARRAY
10226: PPUSH
10227: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10231: CALL_OW 44
10235: PPUSH
10236: LD_VAR 0 6
10240: PPUSH
10241: CALL_OW 52
// end ; end ;
10245: GO 10139
10247: POP
10248: POP
// end ;
10249: LD_VAR 0 1
10253: RET
// export function PrepareLegionReinforcements ; var i , un , j , tmp ; begin
10254: LD_INT 0
10256: PPUSH
10257: PPUSH
10258: PPUSH
10259: PPUSH
10260: PPUSH
// uc_side := 8 ;
10261: LD_ADDR_OWVAR 20
10265: PUSH
10266: LD_INT 8
10268: ST_TO_ADDR
// uc_nation := nation_arabian ;
10269: LD_ADDR_OWVAR 21
10273: PUSH
10274: LD_INT 2
10276: ST_TO_ADDR
// for i = 1 to 2 do
10277: LD_ADDR_VAR 0 2
10281: PUSH
10282: DOUBLE
10283: LD_INT 1
10285: DEC
10286: ST_TO_ADDR
10287: LD_INT 2
10289: PUSH
10290: FOR_TO
10291: IFFALSE 10371
// for j = 1 to 4 do
10293: LD_ADDR_VAR 0 4
10297: PUSH
10298: DOUBLE
10299: LD_INT 1
10301: DEC
10302: ST_TO_ADDR
10303: LD_INT 4
10305: PUSH
10306: FOR_TO
10307: IFFALSE 10367
// begin PrepareHuman ( false , j , 8 ) ;
10309: LD_INT 0
10311: PPUSH
10312: LD_VAR 0 4
10316: PPUSH
10317: LD_INT 8
10319: PPUSH
10320: CALL_OW 380
// un := CreateHuman ;
10324: LD_ADDR_VAR 0 3
10328: PUSH
10329: CALL_OW 44
10333: ST_TO_ADDR
// PlaceUnitArea ( un , legionSpawn , false ) ;
10334: LD_VAR 0 3
10338: PPUSH
10339: LD_INT 23
10341: PPUSH
10342: LD_INT 0
10344: PPUSH
10345: CALL_OW 49
// tmp := tmp union un ;
10349: LD_ADDR_VAR 0 5
10353: PUSH
10354: LD_VAR 0 5
10358: PUSH
10359: LD_VAR 0 3
10363: UNION
10364: ST_TO_ADDR
// end ;
10365: GO 10306
10367: POP
10368: POP
10369: GO 10290
10371: POP
10372: POP
// for i in tmp do
10373: LD_ADDR_VAR 0 2
10377: PUSH
10378: LD_VAR 0 5
10382: PUSH
10383: FOR_IN
10384: IFFALSE 10403
// ComMoveXY ( i , 150 , 136 ) ;
10386: LD_VAR 0 2
10390: PPUSH
10391: LD_INT 150
10393: PPUSH
10394: LD_INT 136
10396: PPUSH
10397: CALL_OW 111
10401: GO 10383
10403: POP
10404: POP
// mc_bases := Replace ( mc_bases , mc_leg , mc_bases [ mc_leg ] union tmp ) ;
10405: LD_ADDR_EXP 36
10409: PUSH
10410: LD_EXP 36
10414: PPUSH
10415: LD_EXP 6
10419: PPUSH
10420: LD_EXP 36
10424: PUSH
10425: LD_EXP 6
10429: ARRAY
10430: PUSH
10431: LD_VAR 0 5
10435: UNION
10436: PPUSH
10437: CALL_OW 1
10441: ST_TO_ADDR
// end ;
10442: LD_VAR 0 1
10446: RET
// every 0 0$10 trigger Difficulty > 1 and GetTech ( tech_lapser , 3 ) = state_researched do
10447: LD_OWVAR 67
10451: PUSH
10452: LD_INT 1
10454: GREATER
10455: PUSH
10456: LD_INT 31
10458: PPUSH
10459: LD_INT 3
10461: PPUSH
10462: CALL_OW 321
10466: PUSH
10467: LD_INT 2
10469: EQUAL
10470: AND
10471: IFFALSE 10688
10473: GO 10475
10475: DISABLE
// begin MC_InsertBuildingList ( mc_rus_1 , [ [ b_turret , 101 , 159 , 5 ] , [ b_turret , 105 , 158 , 5 ] , [ b_turret , 96 , 136 , 5 ] , [ b_turret , 94 , 133 , 4 ] , [ b_turret , 84 , 102 , 4 ] ] ) ;
10476: LD_EXP 7
10480: PPUSH
10481: LD_INT 33
10483: PUSH
10484: LD_INT 101
10486: PUSH
10487: LD_INT 159
10489: PUSH
10490: LD_INT 5
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: PUSH
10499: LD_INT 33
10501: PUSH
10502: LD_INT 105
10504: PUSH
10505: LD_INT 158
10507: PUSH
10508: LD_INT 5
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: PUSH
10517: LD_INT 33
10519: PUSH
10520: LD_INT 96
10522: PUSH
10523: LD_INT 136
10525: PUSH
10526: LD_INT 5
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: PUSH
10535: LD_INT 33
10537: PUSH
10538: LD_INT 94
10540: PUSH
10541: LD_INT 133
10543: PUSH
10544: LD_INT 4
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 33
10555: PUSH
10556: LD_INT 84
10558: PUSH
10559: LD_INT 102
10561: PUSH
10562: LD_INT 4
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: PPUSH
10578: CALL 86165 0 2
// MC_InsertBuildingList ( mc_rus_2 , [ [ b_turret , 50 , 17 , 4 ] , [ b_turret , 52 , 20 , 4 ] , [ b_turret , 53 , 23 , 4 ] , [ b_turret , 45 , 32 , 4 ] , [ b_turret , 45 , 39 , 4 ] ] ) ;
10582: LD_EXP 8
10586: PPUSH
10587: LD_INT 33
10589: PUSH
10590: LD_INT 50
10592: PUSH
10593: LD_INT 17
10595: PUSH
10596: LD_INT 4
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: PUSH
10605: LD_INT 33
10607: PUSH
10608: LD_INT 52
10610: PUSH
10611: LD_INT 20
10613: PUSH
10614: LD_INT 4
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: PUSH
10623: LD_INT 33
10625: PUSH
10626: LD_INT 53
10628: PUSH
10629: LD_INT 23
10631: PUSH
10632: LD_INT 4
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: PUSH
10641: LD_INT 33
10643: PUSH
10644: LD_INT 45
10646: PUSH
10647: LD_INT 32
10649: PUSH
10650: LD_INT 4
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: PUSH
10659: LD_INT 33
10661: PUSH
10662: LD_INT 45
10664: PUSH
10665: LD_INT 39
10667: PUSH
10668: LD_INT 4
10670: PUSH
10671: EMPTY
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: PPUSH
10684: CALL 86165 0 2
// end ; end_of_file
10688: END
// export function Action ; var i , tmp ; begin
10689: LD_INT 0
10691: PPUSH
10692: PPUSH
10693: PPUSH
// InGameOn ;
10694: CALL_OW 8
// CenterNowOnXY ( 225 , 217 ) ;
10698: LD_INT 225
10700: PPUSH
10701: LD_INT 217
10703: PPUSH
10704: CALL_OW 86
// for i in playerForces [ 2 ] do
10708: LD_ADDR_VAR 0 2
10712: PUSH
10713: LD_EXP 10
10717: PUSH
10718: LD_INT 2
10720: ARRAY
10721: PUSH
10722: FOR_IN
10723: IFFALSE 10856
// begin if playerForces [ 1 ] and GetClass ( i ) in [ 3 , 4 ] then
10725: LD_EXP 10
10729: PUSH
10730: LD_INT 1
10732: ARRAY
10733: PUSH
10734: LD_VAR 0 2
10738: PPUSH
10739: CALL_OW 257
10743: PUSH
10744: LD_INT 3
10746: PUSH
10747: LD_INT 4
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: IN
10754: AND
10755: IFFALSE 10839
// begin PlaceUnitInArea ( playerForces [ 1 ] [ 1 ] , startArea , false ) ;
10757: LD_EXP 10
10761: PUSH
10762: LD_INT 1
10764: ARRAY
10765: PUSH
10766: LD_INT 1
10768: ARRAY
10769: PPUSH
10770: LD_INT 19
10772: PPUSH
10773: LD_INT 0
10775: PPUSH
10776: CALL 61146 0 3
// PlaceHumanInUnit ( i , playerForces [ 1 ] [ 1 ] ) ;
10780: LD_VAR 0 2
10784: PPUSH
10785: LD_EXP 10
10789: PUSH
10790: LD_INT 1
10792: ARRAY
10793: PUSH
10794: LD_INT 1
10796: ARRAY
10797: PPUSH
10798: CALL_OW 52
// playerForces := Replace ( playerForces , 1 , Delete ( playerForces [ 1 ] , 1 ) ) ;
10802: LD_ADDR_EXP 10
10806: PUSH
10807: LD_EXP 10
10811: PPUSH
10812: LD_INT 1
10814: PPUSH
10815: LD_EXP 10
10819: PUSH
10820: LD_INT 1
10822: ARRAY
10823: PPUSH
10824: LD_INT 1
10826: PPUSH
10827: CALL_OW 3
10831: PPUSH
10832: CALL_OW 1
10836: ST_TO_ADDR
// end else
10837: GO 10854
// PlaceUnitInArea ( i , startArea , false ) ;
10839: LD_VAR 0 2
10843: PPUSH
10844: LD_INT 19
10846: PPUSH
10847: LD_INT 0
10849: PPUSH
10850: CALL 61146 0 3
// end ;
10854: GO 10722
10856: POP
10857: POP
// wait ( 0 0$2 ) ;
10858: LD_INT 70
10860: PPUSH
10861: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1 ) ;
10865: LD_EXP 9
10869: PPUSH
10870: LD_STRING D
10872: PUSH
10873: LD_STRING I
10875: PUSH
10876: LD_STRING J
10878: PUSH
10879: LD_STRING S
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: LIST
10886: PUSH
10887: LD_EXP 25
10891: ARRAY
10892: STR
10893: PUSH
10894: LD_STRING -1
10896: STR
10897: PPUSH
10898: CALL_OW 88
// SayRadio ( Powell , DP-1 ) ;
10902: LD_EXP 12
10906: PPUSH
10907: LD_STRING DP-1
10909: PPUSH
10910: CALL_OW 94
// SayRadio ( Powell , DP-2 ) ;
10914: LD_EXP 12
10918: PPUSH
10919: LD_STRING DP-2
10921: PPUSH
10922: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2 ) ;
10926: LD_EXP 9
10930: PPUSH
10931: LD_STRING D
10933: PUSH
10934: LD_STRING I
10936: PUSH
10937: LD_STRING J
10939: PUSH
10940: LD_STRING S
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: LIST
10947: PUSH
10948: LD_EXP 25
10952: ARRAY
10953: STR
10954: PUSH
10955: LD_STRING -2
10957: STR
10958: PPUSH
10959: CALL_OW 88
// InGameOff ;
10963: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
10967: LD_STRING O1
10969: PPUSH
10970: CALL_OW 337
// game := true ;
10974: LD_ADDR_EXP 3
10978: PUSH
10979: LD_INT 1
10981: ST_TO_ADDR
// SaveForQuickRestart ;
10982: CALL_OW 22
// wait ( 0 0$5 ) ;
10986: LD_INT 175
10988: PPUSH
10989: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3 ) ;
10993: LD_EXP 9
10997: PPUSH
10998: LD_STRING D
11000: PUSH
11001: LD_STRING I
11003: PUSH
11004: LD_STRING J
11006: PUSH
11007: LD_STRING S
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: LIST
11014: PUSH
11015: LD_EXP 25
11019: ARRAY
11020: STR
11021: PUSH
11022: LD_STRING -3
11024: STR
11025: PPUSH
11026: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11030: LD_INT 35
11032: PPUSH
11033: CALL_OW 67
// until ruEscape [ 1 ] >= ruEscape [ 2 ] ;
11037: LD_EXP 15
11041: PUSH
11042: LD_INT 1
11044: ARRAY
11045: PUSH
11046: LD_EXP 15
11050: PUSH
11051: LD_INT 2
11053: ARRAY
11054: GREATEREQUAL
11055: IFFALSE 11030
// outpostEscape := true ;
11057: LD_ADDR_EXP 27
11061: PUSH
11062: LD_INT 1
11064: ST_TO_ADDR
// tmp := UnitFilter ( ruOutpost , [ f_sex , sex_male ] ) ;
11065: LD_ADDR_VAR 0 3
11069: PUSH
11070: LD_EXP 14
11074: PPUSH
11075: LD_INT 26
11077: PUSH
11078: LD_INT 1
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: PPUSH
11085: CALL_OW 72
11089: ST_TO_ADDR
// if tmp then
11090: LD_VAR 0 3
11094: IFFALSE 11112
// Say ( tmp [ 1 ] , DR-1-Escape ) ;
11096: LD_VAR 0 3
11100: PUSH
11101: LD_INT 1
11103: ARRAY
11104: PPUSH
11105: LD_STRING DR-1-Escape
11107: PPUSH
11108: CALL_OW 88
// wait ( 0 0$1 ) ;
11112: LD_INT 35
11114: PPUSH
11115: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Escape ) ;
11119: LD_EXP 9
11123: PPUSH
11124: LD_STRING D
11126: PUSH
11127: LD_STRING I
11129: PUSH
11130: LD_STRING J
11132: PUSH
11133: LD_STRING S
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: LIST
11140: PUSH
11141: LD_EXP 25
11145: ARRAY
11146: STR
11147: PUSH
11148: LD_STRING -1-Escape
11150: STR
11151: PPUSH
11152: CALL_OW 88
// for i in ruOutpost do
11156: LD_ADDR_VAR 0 2
11160: PUSH
11161: LD_EXP 14
11165: PUSH
11166: FOR_IN
11167: IFFALSE 11221
// begin if IsInUnit ( i ) then
11169: LD_VAR 0 2
11173: PPUSH
11174: CALL_OW 310
11178: IFFALSE 11189
// ComExitBuilding ( i ) ;
11180: LD_VAR 0 2
11184: PPUSH
11185: CALL_OW 122
// AddComMoveXY ( i , 179 , 102 ) ;
11189: LD_VAR 0 2
11193: PPUSH
11194: LD_INT 179
11196: PPUSH
11197: LD_INT 102
11199: PPUSH
11200: CALL_OW 171
// AddComMoveXY ( i , 28 , 20 ) ;
11204: LD_VAR 0 2
11208: PPUSH
11209: LD_INT 28
11211: PPUSH
11212: LD_INT 20
11214: PPUSH
11215: CALL_OW 171
// end ;
11219: GO 11166
11221: POP
11222: POP
// tmp := [ ] ;
11223: LD_ADDR_VAR 0 3
11227: PUSH
11228: EMPTY
11229: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11230: LD_INT 35
11232: PPUSH
11233: CALL_OW 67
// tmp := UnitFilter ( ruOutpost , [ f_inarea , rus2Base ] ) ;
11237: LD_ADDR_VAR 0 3
11241: PUSH
11242: LD_EXP 14
11246: PPUSH
11247: LD_INT 95
11249: PUSH
11250: LD_INT 11
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PPUSH
11257: CALL_OW 72
11261: ST_TO_ADDR
// if tmp then
11262: LD_VAR 0 3
11266: IFFALSE 11345
// for i in tmp do
11268: LD_ADDR_VAR 0 2
11272: PUSH
11273: LD_VAR 0 3
11277: PUSH
11278: FOR_IN
11279: IFFALSE 11343
// begin ruOutpost := ruOutpost diff i ;
11281: LD_ADDR_EXP 14
11285: PUSH
11286: LD_EXP 14
11290: PUSH
11291: LD_VAR 0 2
11295: DIFF
11296: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ mc_rus_2 , mc_bases [ mc_rus_2 ] + 1 ] , i ) ;
11297: LD_ADDR_EXP 36
11301: PUSH
11302: LD_EXP 36
11306: PPUSH
11307: LD_EXP 8
11311: PUSH
11312: LD_EXP 36
11316: PUSH
11317: LD_EXP 8
11321: ARRAY
11322: PUSH
11323: LD_INT 1
11325: PLUS
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: PPUSH
11331: LD_VAR 0 2
11335: PPUSH
11336: CALL 26583 0 3
11340: ST_TO_ADDR
// end ;
11341: GO 11278
11343: POP
11344: POP
// until not UnitFilter ( ruOutpost , [ f_type , unit_human ] ) ;
11345: LD_EXP 14
11349: PPUSH
11350: LD_INT 21
11352: PUSH
11353: LD_INT 1
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PPUSH
11360: CALL_OW 72
11364: NOT
11365: IFFALSE 11230
// ruOutpost := [ ] ;
11367: LD_ADDR_EXP 14
11371: PUSH
11372: EMPTY
11373: ST_TO_ADDR
// end ;
11374: LD_VAR 0 1
11378: RET
// every 0 0$1 trigger outpostEscape do var i , tmp ;
11379: LD_EXP 27
11383: IFFALSE 11572
11385: GO 11387
11387: DISABLE
11388: LD_INT 0
11390: PPUSH
11391: PPUSH
// begin wait ( rand ( 0 0$25 , 0 0$35 ) ) ;
11392: LD_INT 875
11394: PPUSH
11395: LD_INT 1225
11397: PPUSH
11398: CALL_OW 12
11402: PPUSH
11403: CALL_OW 67
// tmp := [ [ 208 , 166 ] , [ 218 , 174 ] , [ 201 , 173 ] , [ 189 , 167 ] , [ 191 , 160 ] , [ 209 , 181 ] , [ 192 , 162 ] , [ 197 , 166 ] ] ;
11407: LD_ADDR_VAR 0 2
11411: PUSH
11412: LD_INT 208
11414: PUSH
11415: LD_INT 166
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: PUSH
11422: LD_INT 218
11424: PUSH
11425: LD_INT 174
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: PUSH
11432: LD_INT 201
11434: PUSH
11435: LD_INT 173
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: PUSH
11442: LD_INT 189
11444: PUSH
11445: LD_INT 167
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: PUSH
11452: LD_INT 191
11454: PUSH
11455: LD_INT 160
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: PUSH
11462: LD_INT 209
11464: PUSH
11465: LD_INT 181
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PUSH
11472: LD_INT 192
11474: PUSH
11475: LD_INT 162
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: LD_INT 197
11484: PUSH
11485: LD_INT 166
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: ST_TO_ADDR
// for i = 1 to 5 + Difficulty do
11502: LD_ADDR_VAR 0 1
11506: PUSH
11507: DOUBLE
11508: LD_INT 1
11510: DEC
11511: ST_TO_ADDR
11512: LD_INT 5
11514: PUSH
11515: LD_OWVAR 67
11519: PLUS
11520: PUSH
11521: FOR_TO
11522: IFFALSE 11570
// begin MineExplosion ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 1 ) ;
11524: LD_VAR 0 2
11528: PUSH
11529: LD_VAR 0 1
11533: ARRAY
11534: PUSH
11535: LD_INT 1
11537: ARRAY
11538: PPUSH
11539: LD_VAR 0 2
11543: PUSH
11544: LD_VAR 0 1
11548: ARRAY
11549: PUSH
11550: LD_INT 2
11552: ARRAY
11553: PPUSH
11554: LD_INT 1
11556: PPUSH
11557: CALL_OW 453
// wait ( 0 0$0.8 ) ;
11561: LD_INT 28
11563: PPUSH
11564: CALL_OW 67
// end ;
11568: GO 11521
11570: POP
11571: POP
// end ;
11572: PPOPN 2
11574: END
// every 0 0$3 trigger not outpostEscape do var tmp , engs , buildings , empty , i , j , k ;
11575: LD_EXP 27
11579: NOT
11580: IFFALSE 12234
11582: GO 11584
11584: DISABLE
11585: LD_INT 0
11587: PPUSH
11588: PPUSH
11589: PPUSH
11590: PPUSH
11591: PPUSH
11592: PPUSH
11593: PPUSH
// begin enable ;
11594: ENABLE
// tmp := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
11595: LD_ADDR_VAR 0 1
11599: PUSH
11600: LD_EXP 14
11604: PPUSH
11605: LD_INT 22
11607: PUSH
11608: LD_INT 3
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 25
11617: PUSH
11618: LD_INT 1
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PPUSH
11629: CALL_OW 72
11633: ST_TO_ADDR
// engs := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11634: LD_ADDR_VAR 0 2
11638: PUSH
11639: LD_EXP 14
11643: PPUSH
11644: LD_INT 22
11646: PUSH
11647: LD_INT 3
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: LD_INT 25
11656: PUSH
11657: LD_INT 2
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PPUSH
11668: CALL_OW 72
11672: ST_TO_ADDR
// buildings := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11673: LD_ADDR_VAR 0 3
11677: PUSH
11678: LD_EXP 14
11682: PPUSH
11683: LD_INT 22
11685: PUSH
11686: LD_INT 3
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: PUSH
11693: LD_INT 21
11695: PUSH
11696: LD_INT 3
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: LD_INT 3
11705: PUSH
11706: LD_INT 24
11708: PUSH
11709: LD_INT 1000
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: LIST
11724: PPUSH
11725: CALL_OW 72
11729: ST_TO_ADDR
// if engs and buildings then
11730: LD_VAR 0 2
11734: PUSH
11735: LD_VAR 0 3
11739: AND
11740: IFFALSE 11813
// begin for i in engs do
11742: LD_ADDR_VAR 0 5
11746: PUSH
11747: LD_VAR 0 2
11751: PUSH
11752: FOR_IN
11753: IFFALSE 11809
// if IsInUnit ( i ) then
11755: LD_VAR 0 5
11759: PPUSH
11760: CALL_OW 310
11764: IFFALSE 11777
// ComExitBuilding ( i ) else
11766: LD_VAR 0 5
11770: PPUSH
11771: CALL_OW 122
11775: GO 11807
// if not HasTask ( i ) then
11777: LD_VAR 0 5
11781: PPUSH
11782: CALL_OW 314
11786: NOT
11787: IFFALSE 11807
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
11789: LD_VAR 0 5
11793: PPUSH
11794: LD_VAR 0 3
11798: PUSH
11799: LD_INT 1
11801: ARRAY
11802: PPUSH
11803: CALL_OW 130
11807: GO 11752
11809: POP
11810: POP
// end else
11811: GO 11916
// if not buildings and UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) and UnitFilter ( engs , [ f_not , [ f_inside ] ] ) then
11813: LD_VAR 0 3
11817: NOT
11818: PUSH
11819: LD_EXP 14
11823: PPUSH
11824: LD_INT 30
11826: PUSH
11827: LD_INT 0
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PPUSH
11834: CALL_OW 72
11838: AND
11839: PUSH
11840: LD_VAR 0 2
11844: PPUSH
11845: LD_INT 3
11847: PUSH
11848: LD_INT 54
11850: PUSH
11851: EMPTY
11852: LIST
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PPUSH
11858: CALL_OW 72
11862: AND
11863: IFFALSE 11916
// ComEnterUnit ( UnitFilter ( engs , [ f_not , [ f_inside ] ] ) , UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) [ 1 ] ) ;
11865: LD_VAR 0 2
11869: PPUSH
11870: LD_INT 3
11872: PUSH
11873: LD_INT 54
11875: PUSH
11876: EMPTY
11877: LIST
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PPUSH
11883: CALL_OW 72
11887: PPUSH
11888: LD_EXP 14
11892: PPUSH
11893: LD_INT 30
11895: PUSH
11896: LD_INT 0
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PPUSH
11903: CALL_OW 72
11907: PUSH
11908: LD_INT 1
11910: ARRAY
11911: PPUSH
11912: CALL_OW 120
// if not tmp then
11916: LD_VAR 0 1
11920: NOT
11921: IFFALSE 11925
// exit ;
11923: GO 12234
// if FilterUnitsInArea ( ruOutpostCenterArea , [ f_enemy , 3 ] ) > 1 then
11925: LD_INT 26
11927: PPUSH
11928: LD_INT 81
11930: PUSH
11931: LD_INT 3
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PPUSH
11938: CALL_OW 70
11942: PUSH
11943: LD_INT 1
11945: GREATER
11946: IFFALSE 12002
// begin for i in tmp do
11948: LD_ADDR_VAR 0 5
11952: PUSH
11953: LD_VAR 0 1
11957: PUSH
11958: FOR_IN
11959: IFFALSE 11998
// begin if IsInUnit ( i ) then
11961: LD_VAR 0 5
11965: PPUSH
11966: CALL_OW 310
11970: IFFALSE 11981
// ComExitBuilding ( i ) ;
11972: LD_VAR 0 5
11976: PPUSH
11977: CALL_OW 122
// AddComAgressiveMove ( i , 204 , 164 ) ;
11981: LD_VAR 0 5
11985: PPUSH
11986: LD_INT 204
11988: PPUSH
11989: LD_INT 164
11991: PPUSH
11992: CALL_OW 174
// end ;
11996: GO 11958
11998: POP
11999: POP
// end else
12000: GO 12234
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
12002: LD_VAR 0 1
12006: PPUSH
12007: LD_INT 3
12009: PUSH
12010: LD_INT 54
12012: PUSH
12013: EMPTY
12014: LIST
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PPUSH
12020: CALL_OW 72
12024: IFFALSE 12234
// begin empty := UnitFilter ( ruOutpost , [ [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
12026: LD_ADDR_VAR 0 4
12030: PUSH
12031: LD_EXP 14
12035: PPUSH
12036: LD_INT 30
12038: PUSH
12039: LD_INT 32
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PUSH
12046: LD_INT 58
12048: PUSH
12049: EMPTY
12050: LIST
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: PPUSH
12056: CALL_OW 72
12060: ST_TO_ADDR
// if not empty and UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) then
12061: LD_VAR 0 4
12065: NOT
12066: PUSH
12067: LD_EXP 14
12071: PPUSH
12072: LD_INT 30
12074: PUSH
12075: LD_INT 5
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PPUSH
12082: CALL_OW 72
12086: AND
12087: IFFALSE 12124
// begin ComEnterUnit ( tmp , UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) [ 1 ] ) ;
12089: LD_VAR 0 1
12093: PPUSH
12094: LD_EXP 14
12098: PPUSH
12099: LD_INT 30
12101: PUSH
12102: LD_INT 5
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PPUSH
12109: CALL_OW 72
12113: PUSH
12114: LD_INT 1
12116: ARRAY
12117: PPUSH
12118: CALL_OW 120
// exit ;
12122: GO 12234
// end ; j := UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) ;
12124: LD_ADDR_VAR 0 6
12128: PUSH
12129: LD_VAR 0 1
12133: PPUSH
12134: LD_INT 3
12136: PUSH
12137: LD_INT 54
12139: PUSH
12140: EMPTY
12141: LIST
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: PPUSH
12147: CALL_OW 72
12151: ST_TO_ADDR
// if j < empty then
12152: LD_VAR 0 6
12156: PUSH
12157: LD_VAR 0 4
12161: LESS
12162: IFFALSE 12176
// k := j else
12164: LD_ADDR_VAR 0 7
12168: PUSH
12169: LD_VAR 0 6
12173: ST_TO_ADDR
12174: GO 12186
// k := empty ;
12176: LD_ADDR_VAR 0 7
12180: PUSH
12181: LD_VAR 0 4
12185: ST_TO_ADDR
// for i = 1 to k do
12186: LD_ADDR_VAR 0 5
12190: PUSH
12191: DOUBLE
12192: LD_INT 1
12194: DEC
12195: ST_TO_ADDR
12196: LD_VAR 0 7
12200: PUSH
12201: FOR_TO
12202: IFFALSE 12232
// ComEnterUnit ( j [ i ] , empty [ i ] ) ;
12204: LD_VAR 0 6
12208: PUSH
12209: LD_VAR 0 5
12213: ARRAY
12214: PPUSH
12215: LD_VAR 0 4
12219: PUSH
12220: LD_VAR 0 5
12224: ARRAY
12225: PPUSH
12226: CALL_OW 120
12230: GO 12201
12232: POP
12233: POP
// end ; end ;
12234: PPOPN 7
12236: END
// every 0 0$2 trigger GameType = 1 and outpostEscape and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , 208 , 163 , 8 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 208 , 163 , 14 ] ] ) do var i ;
12237: LD_EXP 2
12241: PUSH
12242: LD_INT 1
12244: EQUAL
12245: PUSH
12246: LD_EXP 27
12250: AND
12251: PUSH
12252: LD_INT 22
12254: PUSH
12255: LD_INT 1
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PUSH
12262: LD_INT 92
12264: PUSH
12265: LD_INT 208
12267: PUSH
12268: LD_INT 163
12270: PUSH
12271: LD_INT 8
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: PPUSH
12284: CALL_OW 69
12288: AND
12289: PUSH
12290: LD_INT 22
12292: PUSH
12293: LD_INT 3
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 21
12302: PUSH
12303: LD_INT 1
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PUSH
12310: LD_INT 92
12312: PUSH
12313: LD_INT 208
12315: PUSH
12316: LD_INT 163
12318: PUSH
12319: LD_INT 14
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: LIST
12332: PPUSH
12333: CALL_OW 69
12337: NOT
12338: AND
12339: IFFALSE 12644
12341: GO 12343
12343: DISABLE
12344: LD_INT 0
12346: PPUSH
// begin InGameOn ;
12347: CALL_OW 8
// CenterNowOnUnits ( playerCommander ) ;
12351: LD_EXP 9
12355: PPUSH
12356: CALL_OW 87
// wait ( 0 0$1 ) ;
12360: LD_INT 35
12362: PPUSH
12363: CALL_OW 67
// DialogueOn ;
12367: CALL_OW 6
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-BaseCaptured ) ;
12371: LD_EXP 9
12375: PPUSH
12376: LD_STRING D
12378: PUSH
12379: LD_STRING I
12381: PUSH
12382: LD_STRING J
12384: PUSH
12385: LD_STRING S
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: LIST
12392: PUSH
12393: LD_EXP 25
12397: ARRAY
12398: STR
12399: PUSH
12400: LD_STRING -1-BaseCaptured
12402: STR
12403: PPUSH
12404: CALL_OW 88
// SayRadio ( Powell , DP-1-BaseCaptured ) ;
12408: LD_EXP 12
12412: PPUSH
12413: LD_STRING DP-1-BaseCaptured
12415: PPUSH
12416: CALL_OW 94
// if sibBombAllowed then
12420: LD_EXP 23
12424: IFFALSE 12566
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-BaseCaptured ) ;
12426: LD_EXP 9
12430: PPUSH
12431: LD_STRING D
12433: PUSH
12434: LD_STRING I
12436: PUSH
12437: LD_STRING J
12439: PUSH
12440: LD_STRING S
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: LIST
12447: PUSH
12448: LD_EXP 25
12452: ARRAY
12453: STR
12454: PUSH
12455: LD_STRING -2-BaseCaptured
12457: STR
12458: PPUSH
12459: CALL_OW 88
// if commander = 1 then
12463: LD_EXP 25
12467: PUSH
12468: LD_INT 1
12470: EQUAL
12471: IFFALSE 12485
// SayRadio ( Powell , DP-2b-BaseCaptured ) ;
12473: LD_EXP 12
12477: PPUSH
12478: LD_STRING DP-2b-BaseCaptured
12480: PPUSH
12481: CALL_OW 94
// if commander = 2 then
12485: LD_EXP 25
12489: PUSH
12490: LD_INT 2
12492: EQUAL
12493: IFFALSE 12507
// SayRadio ( Powell , DP-2-BaseCaptured ) ;
12495: LD_EXP 12
12499: PPUSH
12500: LD_STRING DP-2-BaseCaptured
12502: PPUSH
12503: CALL_OW 94
// if commander = 3 then
12507: LD_EXP 25
12511: PUSH
12512: LD_INT 3
12514: EQUAL
12515: IFFALSE 12529
// SayRadio ( Powell , DP-2a-BaseCaptured ) ;
12517: LD_EXP 12
12521: PPUSH
12522: LD_STRING DP-2a-BaseCaptured
12524: PPUSH
12525: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3-BaseCaptured ) ;
12529: LD_EXP 9
12533: PPUSH
12534: LD_STRING D
12536: PUSH
12537: LD_STRING I
12539: PUSH
12540: LD_STRING J
12542: PUSH
12543: LD_STRING S
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: PUSH
12551: LD_EXP 25
12555: ARRAY
12556: STR
12557: PUSH
12558: LD_STRING -3-BaseCaptured
12560: STR
12561: PPUSH
12562: CALL_OW 88
// end ; DialogueOff ;
12566: CALL_OW 7
// InGameOff ;
12570: CALL_OW 9
// ChangeMissionObjectives ( O2 ) ;
12574: LD_STRING O2
12576: PPUSH
12577: CALL_OW 337
// for i in UnitFilter ( ruOutpost , [ f_type , unit_building ] ) do
12581: LD_ADDR_VAR 0 1
12585: PUSH
12586: LD_EXP 14
12590: PPUSH
12591: LD_INT 21
12593: PUSH
12594: LD_INT 3
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: PPUSH
12601: CALL_OW 72
12605: PUSH
12606: FOR_IN
12607: IFFALSE 12623
// SetSide ( i , 1 ) ;
12609: LD_VAR 0 1
12613: PPUSH
12614: LD_INT 1
12616: PPUSH
12617: CALL_OW 235
12621: GO 12606
12623: POP
12624: POP
// baseCaptured := true ;
12625: LD_ADDR_EXP 17
12629: PUSH
12630: LD_INT 1
12632: ST_TO_ADDR
// wait ( 0 0$35 ) ;
12633: LD_INT 1225
12635: PPUSH
12636: CALL_OW 67
// PrepareReinforcements ;
12640: CALL 9554 0 0
// end ;
12644: PPOPN 1
12646: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 167 , 197 , 20 ] ] ) > 3 do
12647: LD_INT 22
12649: PUSH
12650: LD_INT 3
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: LD_INT 92
12659: PUSH
12660: LD_INT 167
12662: PUSH
12663: LD_INT 197
12665: PUSH
12666: LD_INT 20
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PPUSH
12679: CALL_OW 69
12683: PUSH
12684: LD_INT 3
12686: GREATER
12687: IFFALSE 12704
12689: GO 12691
12691: DISABLE
// SayRadio ( Powell , DP-RuAttack ) ;
12692: LD_EXP 12
12696: PPUSH
12697: LD_STRING DP-RuAttack
12699: PPUSH
12700: CALL_OW 94
12704: END
// every 0 0$2 trigger not debug and SeeXY ( 1 , 168 , 74 ) and GetEnvironmentType ( 168 , 72 ) do
12705: LD_EXP 1
12709: NOT
12710: PUSH
12711: LD_INT 1
12713: PPUSH
12714: LD_INT 168
12716: PPUSH
12717: LD_INT 74
12719: PPUSH
12720: CALL_OW 293
12724: AND
12725: PUSH
12726: LD_INT 168
12728: PPUSH
12729: LD_INT 72
12731: PPUSH
12732: CALL_OW 553
12736: AND
12737: IFFALSE 12789
12739: GO 12741
12741: DISABLE
// begin CenterOnXY ( 168 , 72 ) ;
12742: LD_INT 168
12744: PPUSH
12745: LD_INT 72
12747: PPUSH
12748: CALL_OW 84
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Blockade ) ;
12752: LD_EXP 9
12756: PPUSH
12757: LD_STRING D
12759: PUSH
12760: LD_STRING I
12762: PUSH
12763: LD_STRING J
12765: PUSH
12766: LD_STRING S
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: LIST
12773: PUSH
12774: LD_EXP 25
12778: ARRAY
12779: STR
12780: PUSH
12781: LD_STRING -1-Blockade
12783: STR
12784: PPUSH
12785: CALL_OW 88
// end ;
12789: END
// every 0 0$2 trigger GameType = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 4 ] ] ) do
12790: LD_EXP 2
12794: PUSH
12795: LD_INT 1
12797: EQUAL
12798: PUSH
12799: LD_INT 22
12801: PUSH
12802: LD_INT 1
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: PUSH
12809: LD_INT 101
12811: PUSH
12812: LD_INT 4
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: PPUSH
12823: CALL_OW 69
12827: AND
12828: IFFALSE 13360
12830: GO 12832
12832: DISABLE
// begin ChangeSideFog ( 4 , 1 ) ;
12833: LD_INT 4
12835: PPUSH
12836: LD_INT 1
12838: PPUSH
12839: CALL_OW 343
// DialogueOn ;
12843: CALL_OW 6
// CenterNowOnUnits ( allyCommander ) ;
12847: LD_EXP 11
12851: PPUSH
12852: CALL_OW 87
// SayRadio ( allyCommander , DM-1-Contact ) ;
12856: LD_EXP 11
12860: PPUSH
12861: LD_STRING DM-1-Contact
12863: PPUSH
12864: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Contact ) ;
12868: LD_EXP 9
12872: PPUSH
12873: LD_STRING D
12875: PUSH
12876: LD_STRING I
12878: PUSH
12879: LD_STRING J
12881: PUSH
12882: LD_STRING S
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: LIST
12889: PUSH
12890: LD_EXP 25
12894: ARRAY
12895: STR
12896: PUSH
12897: LD_STRING -1-Contact
12899: STR
12900: PPUSH
12901: CALL_OW 88
// if commander = 1 then
12905: LD_EXP 25
12909: PUSH
12910: LD_INT 1
12912: EQUAL
12913: IFFALSE 13045
// begin SayRadio ( allyCommander , DM-2-Contact ) ;
12915: LD_EXP 11
12919: PPUSH
12920: LD_STRING DM-2-Contact
12922: PPUSH
12923: CALL_OW 94
// Say ( playerCommander , DI-2-Contact ) ;
12927: LD_EXP 9
12931: PPUSH
12932: LD_STRING DI-2-Contact
12934: PPUSH
12935: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
12939: LD_INT 22
12941: PUSH
12942: LD_INT 8
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PUSH
12949: LD_INT 21
12951: PUSH
12952: LD_INT 1
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PPUSH
12963: CALL_OW 69
12967: PUSH
12968: LD_INT 8
12970: PPUSH
12971: LD_INT 1
12973: PPUSH
12974: CALL_OW 81
12978: PUSH
12979: LD_INT 2
12981: EQUAL
12982: AND
12983: IFFALSE 13009
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
12985: LD_EXP 11
12989: PPUSH
12990: LD_STRING DM-3-Contact
12992: PPUSH
12993: CALL_OW 94
// Say ( playerCommander , DI-3-Contact ) ;
12997: LD_EXP 9
13001: PPUSH
13002: LD_STRING DI-3-Contact
13004: PPUSH
13005: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13009: LD_EXP 11
13013: PPUSH
13014: LD_STRING DM-4-Contact
13016: PPUSH
13017: CALL_OW 94
// Say ( playerCommander , DI-4-Contact ) ;
13021: LD_EXP 9
13025: PPUSH
13026: LD_STRING DI-4-Contact
13028: PPUSH
13029: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13033: LD_EXP 11
13037: PPUSH
13038: LD_STRING DM-5-Contact
13040: PPUSH
13041: CALL_OW 94
// end ; if commander = 2 then
13045: LD_EXP 25
13049: PUSH
13050: LD_INT 2
13052: EQUAL
13053: IFFALSE 13185
// begin SayRadio ( allyCommander , DM-2c-Contact ) ;
13055: LD_EXP 11
13059: PPUSH
13060: LD_STRING DM-2c-Contact
13062: PPUSH
13063: CALL_OW 94
// Say ( playerCommander , DJ-2-Contact ) ;
13067: LD_EXP 9
13071: PPUSH
13072: LD_STRING DJ-2-Contact
13074: PPUSH
13075: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13079: LD_INT 22
13081: PUSH
13082: LD_INT 8
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PUSH
13089: LD_INT 21
13091: PUSH
13092: LD_INT 1
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: PPUSH
13103: CALL_OW 69
13107: PUSH
13108: LD_INT 8
13110: PPUSH
13111: LD_INT 1
13113: PPUSH
13114: CALL_OW 81
13118: PUSH
13119: LD_INT 2
13121: EQUAL
13122: AND
13123: IFFALSE 13149
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13125: LD_EXP 11
13129: PPUSH
13130: LD_STRING DM-3-Contact
13132: PPUSH
13133: CALL_OW 94
// Say ( playerCommander , DJ-3-Contact ) ;
13137: LD_EXP 9
13141: PPUSH
13142: LD_STRING DJ-3-Contact
13144: PPUSH
13145: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13149: LD_EXP 11
13153: PPUSH
13154: LD_STRING DM-4-Contact
13156: PPUSH
13157: CALL_OW 94
// Say ( playerCommander , DJ-4-Contact ) ;
13161: LD_EXP 9
13165: PPUSH
13166: LD_STRING DJ-4-Contact
13168: PPUSH
13169: CALL_OW 88
// SayRadio ( allyCommander , DM-5a-Contact ) ;
13173: LD_EXP 11
13177: PPUSH
13178: LD_STRING DM-5a-Contact
13180: PPUSH
13181: CALL_OW 94
// end ; if commander = 3 then
13185: LD_EXP 25
13189: PUSH
13190: LD_INT 3
13192: EQUAL
13193: IFFALSE 13349
// begin SayRadio ( allyCommander , DM-2a-Contact ) ;
13195: LD_EXP 11
13199: PPUSH
13200: LD_STRING DM-2a-Contact
13202: PPUSH
13203: CALL_OW 94
// Say ( playerCommander , DS-2a-Contact ) ;
13207: LD_EXP 9
13211: PPUSH
13212: LD_STRING DS-2a-Contact
13214: PPUSH
13215: CALL_OW 88
// SayRadio ( allyCommander , DM-2b-Contact ) ;
13219: LD_EXP 11
13223: PPUSH
13224: LD_STRING DM-2b-Contact
13226: PPUSH
13227: CALL_OW 94
// Say ( playerCommander , DS-2b-Contact ) ;
13231: LD_EXP 9
13235: PPUSH
13236: LD_STRING DS-2b-Contact
13238: PPUSH
13239: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13243: LD_INT 22
13245: PUSH
13246: LD_INT 8
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: PUSH
13253: LD_INT 21
13255: PUSH
13256: LD_INT 1
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PPUSH
13267: CALL_OW 69
13271: PUSH
13272: LD_INT 8
13274: PPUSH
13275: LD_INT 1
13277: PPUSH
13278: CALL_OW 81
13282: PUSH
13283: LD_INT 2
13285: EQUAL
13286: AND
13287: IFFALSE 13313
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13289: LD_EXP 11
13293: PPUSH
13294: LD_STRING DM-3-Contact
13296: PPUSH
13297: CALL_OW 94
// Say ( playerCommander , DS-3-Contact ) ;
13301: LD_EXP 9
13305: PPUSH
13306: LD_STRING DS-3-Contact
13308: PPUSH
13309: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13313: LD_EXP 11
13317: PPUSH
13318: LD_STRING DM-4-Contact
13320: PPUSH
13321: CALL_OW 94
// Say ( playerCommander , DS-4-Contact ) ;
13325: LD_EXP 9
13329: PPUSH
13330: LD_STRING DS-4-Contact
13332: PPUSH
13333: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13337: LD_EXP 11
13341: PPUSH
13342: LD_STRING DM-5-Contact
13344: PPUSH
13345: CALL_OW 94
// end ; DialogueOff ;
13349: CALL_OW 7
// ChangeMissionObjectives ( O3 ) ;
13353: LD_STRING O3
13355: PPUSH
13356: CALL_OW 337
// end ;
13360: END
// every 0 0$10 trigger GameType = 1 and legDestCounter >= [ 15 , 20 , 25 ] [ Difficulty ] and FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) >= 5 do var time , sib , sources , i ;
13361: LD_EXP 2
13365: PUSH
13366: LD_INT 1
13368: EQUAL
13369: PUSH
13370: LD_EXP 18
13374: PUSH
13375: LD_INT 15
13377: PUSH
13378: LD_INT 20
13380: PUSH
13381: LD_INT 25
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: LIST
13388: PUSH
13389: LD_OWVAR 67
13393: ARRAY
13394: GREATEREQUAL
13395: AND
13396: PUSH
13397: LD_INT 22
13399: PUSH
13400: LD_INT 8
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: PUSH
13407: LD_INT 30
13409: PUSH
13410: LD_INT 1
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: PPUSH
13421: CALL_OW 69
13425: AND
13426: PUSH
13427: LD_INT 22
13429: PUSH
13430: LD_INT 8
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PUSH
13437: LD_INT 21
13439: PUSH
13440: LD_INT 3
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PPUSH
13451: CALL_OW 69
13455: PUSH
13456: LD_INT 5
13458: GREATEREQUAL
13459: AND
13460: IFFALSE 13983
13462: GO 13464
13464: DISABLE
13465: LD_INT 0
13467: PPUSH
13468: PPUSH
13469: PPUSH
13470: PPUSH
// begin DialogueOn ;
13471: CALL_OW 6
// SayRadio ( Farmer , DF-1-Leg ) ;
13475: LD_EXP 13
13479: PPUSH
13480: LD_STRING DF-1-Leg
13482: PPUSH
13483: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Leg ) ;
13487: LD_EXP 9
13491: PPUSH
13492: LD_STRING D
13494: PUSH
13495: LD_STRING I
13497: PUSH
13498: LD_STRING J
13500: PUSH
13501: LD_STRING S
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: LIST
13508: PUSH
13509: LD_EXP 25
13513: ARRAY
13514: STR
13515: PUSH
13516: LD_STRING -1-Leg
13518: STR
13519: PPUSH
13520: CALL_OW 88
// SayRadio ( Farmer , DF-2-Leg ) ;
13524: LD_EXP 13
13528: PPUSH
13529: LD_STRING DF-2-Leg
13531: PPUSH
13532: CALL_OW 94
// DialogueOff ;
13536: CALL_OW 7
// case Query ( QLegionOffer ) of 1 :
13540: LD_STRING QLegionOffer
13542: PPUSH
13543: CALL_OW 97
13547: PUSH
13548: LD_INT 1
13550: DOUBLE
13551: EQUAL
13552: IFTRUE 13556
13554: GO 13559
13556: POP
// ; 2 :
13557: GO 13573
13559: LD_INT 2
13561: DOUBLE
13562: EQUAL
13563: IFTRUE 13567
13565: GO 13572
13567: POP
// exit ; end ;
13568: GO 13983
13570: GO 13573
13572: POP
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-Leg ) ;
13573: LD_EXP 9
13577: PPUSH
13578: LD_STRING D
13580: PUSH
13581: LD_STRING I
13583: PUSH
13584: LD_STRING J
13586: PUSH
13587: LD_STRING S
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: LIST
13594: PUSH
13595: LD_EXP 25
13599: ARRAY
13600: STR
13601: PUSH
13602: LD_STRING -2-Leg
13604: STR
13605: PPUSH
13606: CALL_OW 88
// legOfferAccepted := true ;
13610: LD_ADDR_EXP 20
13614: PUSH
13615: LD_INT 1
13617: ST_TO_ADDR
// SetAreaMapShow ( legOfferArea , 1 ) ;
13618: LD_INT 21
13620: PPUSH
13621: LD_INT 1
13623: PPUSH
13624: CALL_OW 424
// CenterOnXY ( 190 , 227 ) ;
13628: LD_INT 190
13630: PPUSH
13631: LD_INT 227
13633: PPUSH
13634: CALL_OW 84
// time := [ 8 8$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
13638: LD_ADDR_VAR 0 1
13642: PUSH
13643: LD_INT 16800
13645: PUSH
13646: LD_INT 14700
13648: PUSH
13649: LD_INT 12600
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: LIST
13656: PUSH
13657: LD_OWVAR 67
13661: ARRAY
13662: ST_TO_ADDR
// sib := 100 ;
13663: LD_ADDR_VAR 0 2
13667: PUSH
13668: LD_INT 100
13670: ST_TO_ADDR
// disableGlobalTimer := true ;
13671: LD_ADDR_EXP 4
13675: PUSH
13676: LD_INT 1
13678: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13679: LD_INT 35
13681: PPUSH
13682: CALL_OW 67
// time := time - 0 0$1 ;
13686: LD_ADDR_VAR 0 1
13690: PUSH
13691: LD_VAR 0 1
13695: PUSH
13696: LD_INT 35
13698: MINUS
13699: ST_TO_ADDR
// sources := GetResourceArea ( legOfferArea , mat_siberit ) ;
13700: LD_ADDR_VAR 0 3
13704: PUSH
13705: LD_INT 21
13707: PPUSH
13708: LD_INT 3
13710: PPUSH
13711: CALL_OW 287
13715: ST_TO_ADDR
// display_strings := [ #SkrTime , tick , #Skr-LegOffer , sib , time ] ;
13716: LD_ADDR_OWVAR 47
13720: PUSH
13721: LD_STRING #SkrTime
13723: PUSH
13724: LD_OWVAR 1
13728: PUSH
13729: LD_STRING #Skr-LegOffer
13731: PUSH
13732: LD_VAR 0 2
13736: PUSH
13737: LD_VAR 0 1
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: ST_TO_ADDR
// if sources then
13749: LD_VAR 0 3
13753: IFFALSE 13785
// begin sib := sib - sources * 10 ;
13755: LD_ADDR_VAR 0 2
13759: PUSH
13760: LD_VAR 0 2
13764: PUSH
13765: LD_VAR 0 3
13769: PUSH
13770: LD_INT 10
13772: MUL
13773: MINUS
13774: ST_TO_ADDR
// EraseResourceArea ( legOfferArea , mat_siberit ) ;
13775: LD_INT 21
13777: PPUSH
13778: LD_INT 3
13780: PPUSH
13781: CALL_OW 286
// end ; until time = 0 0$00 or sib <= 0 or not FilterAllUnits ( [ f_side , 8 ] ) ;
13785: LD_VAR 0 1
13789: PUSH
13790: LD_INT 0
13792: EQUAL
13793: PUSH
13794: LD_VAR 0 2
13798: PUSH
13799: LD_INT 0
13801: LESSEQUAL
13802: OR
13803: PUSH
13804: LD_INT 22
13806: PUSH
13807: LD_INT 8
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: PPUSH
13814: CALL_OW 69
13818: NOT
13819: OR
13820: IFFALSE 13679
// SetAreaMapShow ( legOfferArea , 0 ) ;
13822: LD_INT 21
13824: PPUSH
13825: LD_INT 0
13827: PPUSH
13828: CALL_OW 424
// disableGlobalTimer := false ;
13832: LD_ADDR_EXP 4
13836: PUSH
13837: LD_INT 0
13839: ST_TO_ADDR
// if sib <= 0 then
13840: LD_VAR 0 2
13844: PUSH
13845: LD_INT 0
13847: LESSEQUAL
13848: IFFALSE 13964
// begin legChangeSide := true ;
13850: LD_ADDR_EXP 21
13854: PUSH
13855: LD_INT 1
13857: ST_TO_ADDR
// SayRadio ( Farmer , DF-4y-Leg ) ;
13858: LD_EXP 13
13862: PPUSH
13863: LD_STRING DF-4y-Leg
13865: PPUSH
13866: CALL_OW 94
// ChangeMissionObjectives ( O3a ) ;
13870: LD_STRING O3a
13872: PPUSH
13873: CALL_OW 337
// ChangeSideFog ( 8 , 1 ) ;
13877: LD_INT 8
13879: PPUSH
13880: LD_INT 1
13882: PPUSH
13883: CALL_OW 343
// SetAttitude ( 8 , 1 , att_friend , true ) ;
13887: LD_INT 8
13889: PPUSH
13890: LD_INT 1
13892: PPUSH
13893: LD_INT 1
13895: PPUSH
13896: LD_INT 1
13898: PPUSH
13899: CALL_OW 80
// SetAttitude ( 8 , 4 , att_friend , true ) ;
13903: LD_INT 8
13905: PPUSH
13906: LD_INT 4
13908: PPUSH
13909: LD_INT 1
13911: PPUSH
13912: LD_INT 1
13914: PPUSH
13915: CALL_OW 80
// SetAttitude ( 8 , 6 , att_enemy , true ) ;
13919: LD_INT 8
13921: PPUSH
13922: LD_INT 6
13924: PPUSH
13925: LD_INT 2
13927: PPUSH
13928: LD_INT 1
13930: PPUSH
13931: CALL_OW 80
// SetAttitude ( 8 , 3 , att_enemy , true ) ;
13935: LD_INT 8
13937: PPUSH
13938: LD_INT 3
13940: PPUSH
13941: LD_INT 2
13943: PPUSH
13944: LD_INT 1
13946: PPUSH
13947: CALL_OW 80
// wait ( 0 0$30 ) ;
13951: LD_INT 1050
13953: PPUSH
13954: CALL_OW 67
// PrepareLegionReinforcements ;
13958: CALL 10254 0 0
// end else
13962: GO 13983
// begin ChangeMissionObjectives ( O3a ) ;
13964: LD_STRING O3a
13966: PPUSH
13967: CALL_OW 337
// SayRadio ( Farmer , DF-4n-Leg ) ;
13971: LD_EXP 13
13975: PPUSH
13976: LD_STRING DF-4n-Leg
13978: PPUSH
13979: CALL_OW 94
// end ; end ;
13983: PPOPN 4
13985: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 and GetAttitude ( 8 , 1 ) = att_enemy do
13986: LD_INT 22
13988: PUSH
13989: LD_INT 8
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PUSH
13996: LD_INT 21
13998: PUSH
13999: LD_INT 1
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PPUSH
14010: CALL_OW 69
14014: PUSH
14015: LD_INT 0
14017: EQUAL
14018: PUSH
14019: LD_INT 8
14021: PPUSH
14022: LD_INT 1
14024: PPUSH
14025: CALL_OW 81
14029: PUSH
14030: LD_INT 2
14032: EQUAL
14033: AND
14034: IFFALSE 14046
14036: GO 14038
14038: DISABLE
// ChangeMissionObjectives ( O3a ) ;
14039: LD_STRING O3a
14041: PPUSH
14042: CALL_OW 337
14046: END
// every 0 0$1 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) = 0 do
14047: LD_EXP 2
14051: PUSH
14052: LD_INT 1
14054: EQUAL
14055: PUSH
14056: LD_EXP 3
14060: AND
14061: PUSH
14062: LD_INT 22
14064: PUSH
14065: LD_INT 3
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PUSH
14072: LD_INT 21
14074: PUSH
14075: LD_INT 1
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: PPUSH
14086: CALL_OW 69
14090: PUSH
14091: LD_INT 0
14093: EQUAL
14094: AND
14095: PUSH
14096: LD_INT 22
14098: PUSH
14099: LD_INT 3
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: LD_INT 30
14108: PUSH
14109: LD_INT 1
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PPUSH
14120: CALL_OW 69
14124: PUSH
14125: LD_INT 0
14127: EQUAL
14128: AND
14129: IFFALSE 14367
14131: GO 14133
14133: DISABLE
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Win ) ;
14134: LD_EXP 9
14138: PPUSH
14139: LD_STRING D
14141: PUSH
14142: LD_STRING I
14144: PUSH
14145: LD_STRING J
14147: PUSH
14148: LD_STRING S
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: LIST
14155: PUSH
14156: LD_EXP 25
14160: ARRAY
14161: STR
14162: PUSH
14163: LD_STRING -1-Win
14165: STR
14166: PPUSH
14167: CALL_OW 88
// if tick >= [ 150 150$0 , 130 130$0 , 110 110$0 ] [ Difficulty ] then
14171: LD_OWVAR 1
14175: PUSH
14176: LD_INT 315000
14178: PUSH
14179: LD_INT 273000
14181: PUSH
14182: LD_INT 231000
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: LIST
14189: PUSH
14190: LD_OWVAR 67
14194: ARRAY
14195: GREATEREQUAL
14196: IFFALSE 14211
// AddMedal ( med1 , - 1 ) else
14198: LD_STRING med1
14200: PPUSH
14201: LD_INT 1
14203: NEG
14204: PPUSH
14205: CALL_OW 101
14209: GO 14221
// AddMedal ( med1 , 1 ) ;
14211: LD_STRING med1
14213: PPUSH
14214: LD_INT 1
14216: PPUSH
14217: CALL_OW 101
// if allyDestCounter >= [ 20 , 15 , 10 ] [ Difficulty ] then
14221: LD_EXP 22
14225: PUSH
14226: LD_INT 20
14228: PUSH
14229: LD_INT 15
14231: PUSH
14232: LD_INT 10
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: LIST
14239: PUSH
14240: LD_OWVAR 67
14244: ARRAY
14245: GREATEREQUAL
14246: IFFALSE 14261
// AddMedal ( med2 , - 1 ) else
14248: LD_STRING med2
14250: PPUSH
14251: LD_INT 1
14253: NEG
14254: PPUSH
14255: CALL_OW 101
14259: GO 14271
// AddMedal ( med2 , 1 ) ;
14261: LD_STRING med2
14263: PPUSH
14264: LD_INT 1
14266: PPUSH
14267: CALL_OW 101
// if GetAttitude ( 8 , 1 ) = att_friend then
14271: LD_INT 8
14273: PPUSH
14274: LD_INT 1
14276: PPUSH
14277: CALL_OW 81
14281: PUSH
14282: LD_INT 1
14284: EQUAL
14285: IFFALSE 14299
// AddMedal ( med3 , 1 ) else
14287: LD_STRING med3
14289: PPUSH
14290: LD_INT 1
14292: PPUSH
14293: CALL_OW 101
14297: GO 14356
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 then
14299: LD_INT 22
14301: PUSH
14302: LD_INT 8
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: LD_INT 21
14311: PUSH
14312: LD_INT 1
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: PPUSH
14323: CALL_OW 69
14327: PUSH
14328: LD_INT 0
14330: EQUAL
14331: IFFALSE 14345
// AddMedal ( med3 , 2 ) else
14333: LD_STRING med3
14335: PPUSH
14336: LD_INT 2
14338: PPUSH
14339: CALL_OW 101
14343: GO 14356
// AddMedal ( med3 , - 1 ) ;
14345: LD_STRING med3
14347: PPUSH
14348: LD_INT 1
14350: NEG
14351: PPUSH
14352: CALL_OW 101
// GiveMedals ( MAIN ) ;
14356: LD_STRING MAIN
14358: PPUSH
14359: CALL_OW 102
// YouWin ;
14363: CALL_OW 103
// end ;
14367: END
// every 10 trigger GameType = 1 and staticMines and FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) do var i , j , tmp , x , y ;
14368: LD_EXP 2
14372: PUSH
14373: LD_INT 1
14375: EQUAL
14376: PUSH
14377: LD_EXP 16
14381: AND
14382: PUSH
14383: LD_INT 20
14385: PPUSH
14386: LD_INT 81
14388: PUSH
14389: LD_INT 8
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: PPUSH
14396: CALL_OW 70
14400: AND
14401: IFFALSE 14680
14403: GO 14405
14405: DISABLE
14406: LD_INT 0
14408: PPUSH
14409: PPUSH
14410: PPUSH
14411: PPUSH
14412: PPUSH
// begin enable ;
14413: ENABLE
// tmp := FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) ;
14414: LD_ADDR_VAR 0 3
14418: PUSH
14419: LD_INT 20
14421: PPUSH
14422: LD_INT 81
14424: PUSH
14425: LD_INT 8
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PPUSH
14432: CALL_OW 70
14436: ST_TO_ADDR
// if not tmp then
14437: LD_VAR 0 3
14441: NOT
14442: IFFALSE 14446
// exit ;
14444: GO 14680
// for i in tmp do
14446: LD_ADDR_VAR 0 1
14450: PUSH
14451: LD_VAR 0 3
14455: PUSH
14456: FOR_IN
14457: IFFALSE 14678
// begin x := GetX ( i ) ;
14459: LD_ADDR_VAR 0 4
14463: PUSH
14464: LD_VAR 0 1
14468: PPUSH
14469: CALL_OW 250
14473: ST_TO_ADDR
// y := GetY ( i ) ;
14474: LD_ADDR_VAR 0 5
14478: PUSH
14479: LD_VAR 0 1
14483: PPUSH
14484: CALL_OW 251
14488: ST_TO_ADDR
// if MineAtPos ( x , y ) then
14489: LD_VAR 0 4
14493: PPUSH
14494: LD_VAR 0 5
14498: PPUSH
14499: CALL_OW 458
14503: IFFALSE 14676
// begin LaunchMineAtPos ( x , y , 8 ) ;
14505: LD_VAR 0 4
14509: PPUSH
14510: LD_VAR 0 5
14514: PPUSH
14515: LD_INT 8
14517: PPUSH
14518: CALL_OW 456
// if not dialogueMineDetected then
14522: LD_EXP 28
14526: NOT
14527: IFFALSE 14588
// begin CenterNowOnXY ( x , y ) ;
14529: LD_VAR 0 4
14533: PPUSH
14534: LD_VAR 0 5
14538: PPUSH
14539: CALL_OW 86
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Mine ) ;
14543: LD_EXP 9
14547: PPUSH
14548: LD_STRING D
14550: PUSH
14551: LD_STRING I
14553: PUSH
14554: LD_STRING J
14556: PUSH
14557: LD_STRING S
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: LIST
14564: PUSH
14565: LD_EXP 25
14569: ARRAY
14570: STR
14571: PUSH
14572: LD_STRING -1-Mine
14574: STR
14575: PPUSH
14576: CALL_OW 88
// dialogueMineDetected := true ;
14580: LD_ADDR_EXP 28
14584: PUSH
14585: LD_INT 1
14587: ST_TO_ADDR
// end ; for j = 1 to staticMines do
14588: LD_ADDR_VAR 0 2
14592: PUSH
14593: DOUBLE
14594: LD_INT 1
14596: DEC
14597: ST_TO_ADDR
14598: LD_EXP 16
14602: PUSH
14603: FOR_TO
14604: IFFALSE 14674
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
14606: LD_EXP 16
14610: PUSH
14611: LD_VAR 0 2
14615: ARRAY
14616: PUSH
14617: LD_INT 1
14619: ARRAY
14620: PUSH
14621: LD_VAR 0 4
14625: EQUAL
14626: PUSH
14627: LD_EXP 16
14631: PUSH
14632: LD_VAR 0 2
14636: ARRAY
14637: PUSH
14638: LD_INT 2
14640: ARRAY
14641: PUSH
14642: LD_VAR 0 5
14646: EQUAL
14647: AND
14648: IFFALSE 14672
// begin staticMines := Delete ( staticMines , j ) ;
14650: LD_ADDR_EXP 16
14654: PUSH
14655: LD_EXP 16
14659: PPUSH
14660: LD_VAR 0 2
14664: PPUSH
14665: CALL_OW 3
14669: ST_TO_ADDR
// break ;
14670: GO 14674
// end ;
14672: GO 14603
14674: POP
14675: POP
// end ; end ;
14676: GO 14456
14678: POP
14679: POP
// end ;
14680: PPOPN 5
14682: END
// every 30 30$00 + 50 50$00 trigger GameType = 1 and game and sibBombAllowed and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_btype , b_factory ] ) do var bomb , e ;
14683: LD_EXP 2
14687: PUSH
14688: LD_INT 1
14690: EQUAL
14691: PUSH
14692: LD_EXP 3
14696: AND
14697: PUSH
14698: LD_EXP 23
14702: AND
14703: PUSH
14704: LD_EXP 36
14708: PUSH
14709: LD_EXP 7
14713: ARRAY
14714: PPUSH
14715: LD_INT 30
14717: PUSH
14718: LD_INT 3
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PPUSH
14725: CALL_OW 72
14729: AND
14730: IFFALSE 14934
14732: GO 14734
14734: DISABLE
14735: LD_INT 0
14737: PPUSH
14738: PPUSH
// begin enable ;
14739: ENABLE
// MC_InsertProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
14740: LD_EXP 7
14744: PPUSH
14745: LD_INT 23
14747: PUSH
14748: LD_INT 3
14750: PUSH
14751: LD_INT 3
14753: PUSH
14754: LD_INT 48
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: PUSH
14763: EMPTY
14764: LIST
14765: PPUSH
14766: CALL 86273 0 2
// repeat wait ( 0 0$1 ) ;
14770: LD_INT 35
14772: PPUSH
14773: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14777: LD_INT 22
14779: PUSH
14780: LD_INT 3
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PUSH
14787: LD_INT 34
14789: PUSH
14790: LD_INT 48
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PPUSH
14801: CALL_OW 69
14805: IFFALSE 14770
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14807: LD_ADDR_VAR 0 1
14811: PUSH
14812: LD_INT 22
14814: PUSH
14815: LD_INT 3
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: LD_INT 34
14824: PUSH
14825: LD_INT 48
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PPUSH
14836: CALL_OW 69
14840: ST_TO_ADDR
// e := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) ;
14841: LD_ADDR_VAR 0 2
14845: PUSH
14846: LD_INT 81
14848: PUSH
14849: LD_INT 3
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: LD_INT 21
14858: PUSH
14859: LD_INT 3
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PPUSH
14870: CALL_OW 69
14874: ST_TO_ADDR
// if e then
14875: LD_VAR 0 2
14879: IFFALSE 14905
// e := NearestUnitToUnit ( e , bomb [ 1 ] ) ;
14881: LD_ADDR_VAR 0 2
14885: PUSH
14886: LD_VAR 0 2
14890: PPUSH
14891: LD_VAR 0 1
14895: PUSH
14896: LD_INT 1
14898: ARRAY
14899: PPUSH
14900: CALL_OW 74
14904: ST_TO_ADDR
// ComAttackPlace ( bomb , GetX ( e ) , GetY ( e ) ) ;
14905: LD_VAR 0 1
14909: PPUSH
14910: LD_VAR 0 2
14914: PPUSH
14915: CALL_OW 250
14919: PPUSH
14920: LD_VAR 0 2
14924: PPUSH
14925: CALL_OW 251
14929: PPUSH
14930: CALL_OW 116
// end ;
14934: PPOPN 2
14936: END
// every 0 0$2 trigger Difficulty > 1 and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) and GameType = 1 and game and GetTech ( tech_Behemoth , 3 ) = state_researched do var tmp , i ;
14937: LD_OWVAR 67
14941: PUSH
14942: LD_INT 1
14944: GREATER
14945: PUSH
14946: LD_EXP 36
14950: PUSH
14951: LD_EXP 7
14955: ARRAY
14956: PPUSH
14957: LD_INT 25
14959: PUSH
14960: LD_INT 3
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PPUSH
14967: CALL_OW 72
14971: AND
14972: PUSH
14973: LD_EXP 2
14977: PUSH
14978: LD_INT 1
14980: EQUAL
14981: AND
14982: PUSH
14983: LD_EXP 3
14987: AND
14988: PUSH
14989: LD_INT 23
14991: PPUSH
14992: LD_INT 3
14994: PPUSH
14995: CALL_OW 321
14999: PUSH
15000: LD_INT 2
15002: EQUAL
15003: AND
15004: IFFALSE 15131
15006: GO 15008
15008: DISABLE
15009: LD_INT 0
15011: PPUSH
15012: PPUSH
// begin tmp := UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) ;
15013: LD_ADDR_VAR 0 1
15017: PUSH
15018: LD_EXP 36
15022: PUSH
15023: LD_EXP 7
15027: ARRAY
15028: PPUSH
15029: LD_INT 25
15031: PUSH
15032: LD_INT 3
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: PPUSH
15039: CALL_OW 72
15043: ST_TO_ADDR
// if not tmp then
15044: LD_VAR 0 1
15048: NOT
15049: IFFALSE 15053
// exit ;
15051: GO 15131
// for i in tmp do
15053: LD_ADDR_VAR 0 2
15057: PUSH
15058: LD_VAR 0 1
15062: PUSH
15063: FOR_IN
15064: IFFALSE 15110
// begin SetTag ( i , 29 ) ;
15066: LD_VAR 0 2
15070: PPUSH
15071: LD_INT 29
15073: PPUSH
15074: CALL_OW 109
// ComExitBuilding ( i ) ;
15078: LD_VAR 0 2
15082: PPUSH
15083: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , 97 , 133 , 0 ) ;
15087: LD_VAR 0 2
15091: PPUSH
15092: LD_INT 37
15094: PPUSH
15095: LD_INT 97
15097: PPUSH
15098: LD_INT 133
15100: PPUSH
15101: LD_INT 0
15103: PPUSH
15104: CALL_OW 230
// end ;
15108: GO 15063
15110: POP
15111: POP
// wait ( 1 1$00 ) ;
15112: LD_INT 2100
15114: PPUSH
15115: CALL_OW 67
// MC_Reset ( mc_rus_1 , 29 ) ;
15119: LD_EXP 7
15123: PPUSH
15124: LD_INT 29
15126: PPUSH
15127: CALL 66656 0 2
// end ;
15131: PPOPN 2
15133: END
// every 7 7$00 trigger GameType = 1 and GetBType ( HexInfo ( 84 , 128 ) ) = b_warehouse and GetSide ( HexInfo ( 84 , 128 ) ) = 3 do var veh , depot ;
15134: LD_EXP 2
15138: PUSH
15139: LD_INT 1
15141: EQUAL
15142: PUSH
15143: LD_INT 84
15145: PPUSH
15146: LD_INT 128
15148: PPUSH
15149: CALL_OW 428
15153: PPUSH
15154: CALL_OW 266
15158: PUSH
15159: LD_INT 1
15161: EQUAL
15162: AND
15163: PUSH
15164: LD_INT 84
15166: PPUSH
15167: LD_INT 128
15169: PPUSH
15170: CALL_OW 428
15174: PPUSH
15175: CALL_OW 255
15179: PUSH
15180: LD_INT 3
15182: EQUAL
15183: AND
15184: IFFALSE 15357
15186: GO 15188
15188: DISABLE
15189: LD_INT 0
15191: PPUSH
15192: PPUSH
// begin enable ;
15193: ENABLE
// depot := HexInfo ( 84 , 128 ) ;
15194: LD_ADDR_VAR 0 2
15198: PUSH
15199: LD_INT 84
15201: PPUSH
15202: LD_INT 128
15204: PPUSH
15205: CALL_OW 428
15209: ST_TO_ADDR
// uc_side := 3 ;
15210: LD_ADDR_OWVAR 20
15214: PUSH
15215: LD_INT 3
15217: ST_TO_ADDR
// uc_nation := 3 ;
15218: LD_ADDR_OWVAR 21
15222: PUSH
15223: LD_INT 3
15225: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay , 0 ) ;
15226: LD_INT 21
15228: PPUSH
15229: LD_INT 3
15231: PPUSH
15232: LD_INT 3
15234: PPUSH
15235: LD_INT 51
15237: PPUSH
15238: LD_INT 0
15240: PPUSH
15241: CALL 26461 0 5
// veh := CreateVehicle ;
15245: LD_ADDR_VAR 0 1
15249: PUSH
15250: CALL_OW 45
15254: ST_TO_ADDR
// PlaceUnitXY ( veh , 126 , 227 , false ) ;
15255: LD_VAR 0 1
15259: PPUSH
15260: LD_INT 126
15262: PPUSH
15263: LD_INT 227
15265: PPUSH
15266: LD_INT 0
15268: PPUSH
15269: CALL_OW 48
// SetCargo ( veh , mat_oil , 100 ) ;
15273: LD_VAR 0 1
15277: PPUSH
15278: LD_INT 2
15280: PPUSH
15281: LD_INT 100
15283: PPUSH
15284: CALL_OW 290
// ComGive ( veh , depot ) ;
15288: LD_VAR 0 1
15292: PPUSH
15293: LD_VAR 0 2
15297: PPUSH
15298: CALL_OW 161
// AddComMoveXY ( veh , 126 , 227 ) ;
15302: LD_VAR 0 1
15306: PPUSH
15307: LD_INT 126
15309: PPUSH
15310: LD_INT 227
15312: PPUSH
15313: CALL_OW 171
// wait ( 0 0$10 ) ;
15317: LD_INT 350
15319: PPUSH
15320: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15324: LD_INT 35
15326: PPUSH
15327: CALL_OW 67
// until IsAt ( veh , 126 , 227 ) ;
15331: LD_VAR 0 1
15335: PPUSH
15336: LD_INT 126
15338: PPUSH
15339: LD_INT 227
15341: PPUSH
15342: CALL_OW 307
15346: IFFALSE 15324
// RemoveUnit ( veh ) ;
15348: LD_VAR 0 1
15352: PPUSH
15353: CALL_OW 64
// end ;
15357: PPOPN 2
15359: END
// every 9 9$00 trigger GameType = 1 and outpostEscape and commander = 2 do var veh , depot ;
15360: LD_EXP 2
15364: PUSH
15365: LD_INT 1
15367: EQUAL
15368: PUSH
15369: LD_EXP 27
15373: AND
15374: PUSH
15375: LD_EXP 25
15379: PUSH
15380: LD_INT 2
15382: EQUAL
15383: AND
15384: IFFALSE 15576
15386: GO 15388
15388: DISABLE
15389: LD_INT 0
15391: PPUSH
15392: PPUSH
// begin enable ;
15393: ENABLE
// if tick >= [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] then
15394: LD_OWVAR 1
15398: PUSH
15399: LD_INT 105000
15401: PUSH
15402: LD_INT 84000
15404: PUSH
15405: LD_INT 63000
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: LIST
15412: PUSH
15413: LD_OWVAR 67
15417: ARRAY
15418: GREATEREQUAL
15419: IFFALSE 15422
// disable ;
15421: DISABLE
// uc_side := 4 ;
15422: LD_ADDR_OWVAR 20
15426: PUSH
15427: LD_INT 4
15429: ST_TO_ADDR
// uc_nation := 1 ;
15430: LD_ADDR_OWVAR 21
15434: PUSH
15435: LD_INT 1
15437: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 0 ) ;
15438: LD_INT 2
15440: PPUSH
15441: LD_INT 3
15443: PPUSH
15444: LD_INT 3
15446: PPUSH
15447: LD_INT 12
15449: PPUSH
15450: LD_INT 0
15452: PPUSH
15453: CALL 26461 0 5
// veh := CreateVehicle ;
15457: LD_ADDR_VAR 0 1
15461: PUSH
15462: CALL_OW 45
15466: ST_TO_ADDR
// PlaceUnitXY ( veh , 229 , 226 , false ) ;
15467: LD_VAR 0 1
15471: PPUSH
15472: LD_INT 229
15474: PPUSH
15475: LD_INT 226
15477: PPUSH
15478: LD_INT 0
15480: PPUSH
15481: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
15485: LD_VAR 0 1
15489: PPUSH
15490: LD_INT 1
15492: PPUSH
15493: LD_INT 100
15495: PPUSH
15496: CALL_OW 290
// AddComMoveToArea ( veh , ruOutpostArea ) ;
15500: LD_VAR 0 1
15504: PPUSH
15505: LD_INT 25
15507: PPUSH
15508: CALL_OW 173
// AddComUnload ( veh ) ;
15512: LD_VAR 0 1
15516: PPUSH
15517: CALL_OW 219
// AddComMoveXY ( veh , 229 , 226 ) ;
15521: LD_VAR 0 1
15525: PPUSH
15526: LD_INT 229
15528: PPUSH
15529: LD_INT 226
15531: PPUSH
15532: CALL_OW 171
// wait ( 0 0$10 ) ;
15536: LD_INT 350
15538: PPUSH
15539: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15543: LD_INT 35
15545: PPUSH
15546: CALL_OW 67
// until IsAt ( veh , 229 , 226 ) ;
15550: LD_VAR 0 1
15554: PPUSH
15555: LD_INT 229
15557: PPUSH
15558: LD_INT 226
15560: PPUSH
15561: CALL_OW 307
15565: IFFALSE 15543
// RemoveUnit ( veh ) ;
15567: LD_VAR 0 1
15571: PPUSH
15572: CALL_OW 64
// end ;
15576: PPOPN 2
15578: END
// every 15 15$00 trigger GameType = 1 and game and reinforceAllowed do var i , j , veh , tmp , amount ;
15579: LD_EXP 2
15583: PUSH
15584: LD_INT 1
15586: EQUAL
15587: PUSH
15588: LD_EXP 3
15592: AND
15593: PUSH
15594: LD_EXP 24
15598: AND
15599: IFFALSE 15932
15601: GO 15603
15603: DISABLE
15604: LD_INT 0
15606: PPUSH
15607: PPUSH
15608: PPUSH
15609: PPUSH
15610: PPUSH
// begin enable ;
15611: ENABLE
// tmp := [ ] ;
15612: LD_ADDR_VAR 0 4
15616: PUSH
15617: EMPTY
15618: ST_TO_ADDR
// if commander = 1 then
15619: LD_EXP 25
15623: PUSH
15624: LD_INT 1
15626: EQUAL
15627: IFFALSE 15639
// amount := 3 else
15629: LD_ADDR_VAR 0 5
15633: PUSH
15634: LD_INT 3
15636: ST_TO_ADDR
15637: GO 15647
// amount := 2 ;
15639: LD_ADDR_VAR 0 5
15643: PUSH
15644: LD_INT 2
15646: ST_TO_ADDR
// for i = 1 to amount do
15647: LD_ADDR_VAR 0 1
15651: PUSH
15652: DOUBLE
15653: LD_INT 1
15655: DEC
15656: ST_TO_ADDR
15657: LD_VAR 0 5
15661: PUSH
15662: FOR_TO
15663: IFFALSE 15827
// begin wait ( 0 0$5 ) ;
15665: LD_INT 175
15667: PPUSH
15668: CALL_OW 67
// for j = 1 to 3 do
15672: LD_ADDR_VAR 0 2
15676: PUSH
15677: DOUBLE
15678: LD_INT 1
15680: DEC
15681: ST_TO_ADDR
15682: LD_INT 3
15684: PUSH
15685: FOR_TO
15686: IFFALSE 15823
// begin uc_side := 4 ;
15688: LD_ADDR_OWVAR 20
15692: PUSH
15693: LD_INT 4
15695: ST_TO_ADDR
// uc_nation := 1 ;
15696: LD_ADDR_OWVAR 21
15700: PUSH
15701: LD_INT 1
15703: ST_TO_ADDR
// PrepareVehicle ( [ us_medium_tracked , us_morphling ] [ rand ( 1 , 2 ) ] , engine_siberite , control_computer , [ us_laser , us_double_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
15704: LD_INT 3
15706: PUSH
15707: LD_INT 5
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: LD_INT 1
15716: PPUSH
15717: LD_INT 2
15719: PPUSH
15720: CALL_OW 12
15724: ARRAY
15725: PPUSH
15726: LD_INT 3
15728: PPUSH
15729: LD_INT 3
15731: PPUSH
15732: LD_INT 9
15734: PUSH
15735: LD_INT 5
15737: PUSH
15738: LD_INT 7
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: LIST
15745: PUSH
15746: LD_INT 1
15748: PPUSH
15749: LD_INT 3
15751: PPUSH
15752: CALL_OW 12
15756: ARRAY
15757: PPUSH
15758: LD_INT 100
15760: PPUSH
15761: CALL 26461 0 5
// veh := CreateVehicle ;
15765: LD_ADDR_VAR 0 3
15769: PUSH
15770: CALL_OW 45
15774: ST_TO_ADDR
// tmp := tmp ^ veh ;
15775: LD_ADDR_VAR 0 4
15779: PUSH
15780: LD_VAR 0 4
15784: PUSH
15785: LD_VAR 0 3
15789: ADD
15790: ST_TO_ADDR
// PlaceUnitArea ( veh , westSpawn , false ) ;
15791: LD_VAR 0 3
15795: PPUSH
15796: LD_INT 22
15798: PPUSH
15799: LD_INT 0
15801: PPUSH
15802: CALL_OW 49
// ComMoveXY ( veh , 119 , 215 ) ;
15806: LD_VAR 0 3
15810: PPUSH
15811: LD_INT 119
15813: PPUSH
15814: LD_INT 215
15816: PPUSH
15817: CALL_OW 111
// end ;
15821: GO 15685
15823: POP
15824: POP
// end ;
15825: GO 15662
15827: POP
15828: POP
// wait ( 0 0$3 ) ;
15829: LD_INT 105
15831: PPUSH
15832: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15836: LD_INT 35
15838: PPUSH
15839: CALL_OW 67
// for i in tmp do
15843: LD_ADDR_VAR 0 1
15847: PUSH
15848: LD_VAR 0 4
15852: PUSH
15853: FOR_IN
15854: IFFALSE 15921
// if IsDead ( i ) then
15856: LD_VAR 0 1
15860: PPUSH
15861: CALL_OW 301
15865: IFFALSE 15885
// tmp := tmp diff i else
15867: LD_ADDR_VAR 0 4
15871: PUSH
15872: LD_VAR 0 4
15876: PUSH
15877: LD_VAR 0 1
15881: DIFF
15882: ST_TO_ADDR
15883: GO 15919
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) ;
15885: LD_VAR 0 1
15889: PPUSH
15890: LD_INT 81
15892: PUSH
15893: LD_INT 4
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: PPUSH
15900: CALL_OW 69
15904: PPUSH
15905: LD_VAR 0 1
15909: PPUSH
15910: CALL_OW 74
15914: PPUSH
15915: CALL_OW 115
15919: GO 15853
15921: POP
15922: POP
// until tmp = [ ] ;
15923: LD_VAR 0 4
15927: PUSH
15928: EMPTY
15929: EQUAL
15930: IFFALSE 15836
// end ;
15932: PPOPN 5
15934: END
// every 0 0$1 trigger GameType = 1 and game do var i , tmp ;
15935: LD_EXP 2
15939: PUSH
15940: LD_INT 1
15942: EQUAL
15943: PUSH
15944: LD_EXP 3
15948: AND
15949: IFFALSE 16050
15951: GO 15953
15953: DISABLE
15954: LD_INT 0
15956: PPUSH
15957: PPUSH
// begin enable ;
15958: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
15959: LD_ADDR_VAR 0 2
15963: PUSH
15964: LD_INT 3
15966: PUSH
15967: LD_INT 22
15969: PUSH
15970: LD_INT 1
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PUSH
15981: LD_INT 32
15983: PUSH
15984: LD_INT 1
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PPUSH
15995: CALL_OW 69
15999: ST_TO_ADDR
// if tmp then
16000: LD_VAR 0 2
16004: IFFALSE 16050
// for i in tmp do
16006: LD_ADDR_VAR 0 1
16010: PUSH
16011: LD_VAR 0 2
16015: PUSH
16016: FOR_IN
16017: IFFALSE 16048
// if GetFuel ( i ) < 3 then
16019: LD_VAR 0 1
16023: PPUSH
16024: CALL_OW 261
16028: PUSH
16029: LD_INT 3
16031: LESS
16032: IFFALSE 16046
// SetFuel ( i , 3 ) ;
16034: LD_VAR 0 1
16038: PPUSH
16039: LD_INT 3
16041: PPUSH
16042: CALL_OW 240
16046: GO 16016
16048: POP
16049: POP
// end ;
16050: PPOPN 2
16052: END
// every 15 15$00 trigger game and GetAttitude ( 8 , 4 ) = att_enemy do var i , un , tmp ;
16053: LD_EXP 3
16057: PUSH
16058: LD_INT 8
16060: PPUSH
16061: LD_INT 4
16063: PPUSH
16064: CALL_OW 81
16068: PUSH
16069: LD_INT 2
16071: EQUAL
16072: AND
16073: IFFALSE 16283
16075: GO 16077
16077: DISABLE
16078: LD_INT 0
16080: PPUSH
16081: PPUSH
16082: PPUSH
// begin enable ;
16083: ENABLE
// tmp := [ ] ;
16084: LD_ADDR_VAR 0 3
16088: PUSH
16089: EMPTY
16090: ST_TO_ADDR
// for i = 1 to 4 do
16091: LD_ADDR_VAR 0 1
16095: PUSH
16096: DOUBLE
16097: LD_INT 1
16099: DEC
16100: ST_TO_ADDR
16101: LD_INT 4
16103: PUSH
16104: FOR_TO
16105: IFFALSE 16249
// begin uc_side := 8 ;
16107: LD_ADDR_OWVAR 20
16111: PUSH
16112: LD_INT 8
16114: ST_TO_ADDR
// uc_nation := nation_arabian ;
16115: LD_ADDR_OWVAR 21
16119: PUSH
16120: LD_INT 2
16122: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] , rand ( 60 , 80 ) ) ;
16123: LD_INT 11
16125: PPUSH
16126: LD_INT 1
16128: PPUSH
16129: LD_INT 5
16131: PPUSH
16132: LD_INT 24
16134: PUSH
16135: LD_INT 23
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: PUSH
16142: LD_INT 1
16144: PPUSH
16145: LD_INT 2
16147: PPUSH
16148: CALL_OW 12
16152: ARRAY
16153: PPUSH
16154: LD_INT 60
16156: PPUSH
16157: LD_INT 80
16159: PPUSH
16160: CALL_OW 12
16164: PPUSH
16165: CALL 26461 0 5
// un := CreateVehicle ;
16169: LD_ADDR_VAR 0 2
16173: PUSH
16174: CALL_OW 45
16178: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16179: LD_VAR 0 2
16183: PPUSH
16184: LD_INT 2
16186: PPUSH
16187: CALL_OW 233
// tmp := tmp ^ un ;
16191: LD_ADDR_VAR 0 3
16195: PUSH
16196: LD_VAR 0 3
16200: PUSH
16201: LD_VAR 0 2
16205: ADD
16206: ST_TO_ADDR
// PlaceUnitXY ( un , 88 , 2 , false ) ;
16207: LD_VAR 0 2
16211: PPUSH
16212: LD_INT 88
16214: PPUSH
16215: LD_INT 2
16217: PPUSH
16218: LD_INT 0
16220: PPUSH
16221: CALL_OW 48
// ComMoveXY ( un , 93 , 13 ) ;
16225: LD_VAR 0 2
16229: PPUSH
16230: LD_INT 93
16232: PPUSH
16233: LD_INT 13
16235: PPUSH
16236: CALL_OW 111
// wait ( 0 0$2 ) ;
16240: LD_INT 70
16242: PPUSH
16243: CALL_OW 67
// end ;
16247: GO 16104
16249: POP
16250: POP
// for i in tmp do
16251: LD_ADDR_VAR 0 1
16255: PUSH
16256: LD_VAR 0 3
16260: PUSH
16261: FOR_IN
16262: IFFALSE 16281
// AddComMoveXY ( i , 136 , 19 ) ;
16264: LD_VAR 0 1
16268: PPUSH
16269: LD_INT 136
16271: PPUSH
16272: LD_INT 19
16274: PPUSH
16275: CALL_OW 171
16279: GO 16261
16281: POP
16282: POP
// end ;
16283: PPOPN 3
16285: END
// every 7 7$30 + 7 7$30 trigger game do var i , base , tmp , target ;
16286: LD_EXP 3
16290: IFFALSE 17209
16292: GO 16294
16294: DISABLE
16295: LD_INT 0
16297: PPUSH
16298: PPUSH
16299: PPUSH
16300: PPUSH
// begin enable ;
16301: ENABLE
// base := mc_leg ;
16302: LD_ADDR_VAR 0 2
16306: PUSH
16307: LD_EXP 6
16311: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
16312: LD_INT 22
16314: PUSH
16315: LD_INT 8
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: PUSH
16322: LD_INT 23
16324: PUSH
16325: LD_INT 2
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: PUSH
16332: LD_INT 30
16334: PUSH
16335: LD_INT 3
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: LIST
16346: PPUSH
16347: CALL_OW 69
16351: NOT
16352: IFFALSE 16356
// exit ;
16354: GO 17209
// if Prob ( 40 ) then
16356: LD_INT 40
16358: PPUSH
16359: CALL_OW 13
16363: IFFALSE 16492
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16365: LD_VAR 0 2
16369: PPUSH
16370: LD_INT 13
16372: PUSH
16373: LD_INT 1
16375: PUSH
16376: LD_INT 2
16378: PUSH
16379: LD_INT 28
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: PUSH
16388: LD_INT 13
16390: PUSH
16391: LD_INT 1
16393: PUSH
16394: LD_INT 2
16396: PUSH
16397: LD_INT 28
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: PUSH
16406: LD_INT 13
16408: PUSH
16409: LD_INT 1
16411: PUSH
16412: LD_INT 2
16414: PUSH
16415: LD_INT 28
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: PUSH
16424: LD_INT 13
16426: PUSH
16427: LD_INT 1
16429: PUSH
16430: LD_INT 2
16432: PUSH
16433: LD_INT 28
16435: PUSH
16436: EMPTY
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 13
16444: PUSH
16445: LD_INT 1
16447: PUSH
16448: LD_INT 2
16450: PUSH
16451: LD_INT 28
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: PUSH
16460: LD_INT 13
16462: PUSH
16463: LD_INT 1
16465: PUSH
16466: LD_INT 2
16468: PUSH
16469: LD_INT 26
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: PPUSH
16486: CALL 86273 0 2
// end else
16490: GO 16709
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16492: LD_VAR 0 2
16496: PPUSH
16497: LD_INT 13
16499: PUSH
16500: LD_INT 1
16502: PUSH
16503: LD_INT 2
16505: PUSH
16506: LD_INT 27
16508: PUSH
16509: LD_INT 26
16511: PUSH
16512: LD_INT 26
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: LIST
16519: PUSH
16520: LD_INT 1
16522: PPUSH
16523: LD_INT 3
16525: PPUSH
16526: CALL_OW 12
16530: ARRAY
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: PUSH
16538: LD_INT 13
16540: PUSH
16541: LD_INT 1
16543: PUSH
16544: LD_INT 2
16546: PUSH
16547: LD_INT 27
16549: PUSH
16550: LD_INT 26
16552: PUSH
16553: LD_INT 26
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: LIST
16560: PUSH
16561: LD_INT 1
16563: PPUSH
16564: LD_INT 3
16566: PPUSH
16567: CALL_OW 12
16571: ARRAY
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: PUSH
16579: LD_INT 13
16581: PUSH
16582: LD_INT 1
16584: PUSH
16585: LD_INT 2
16587: PUSH
16588: LD_INT 26
16590: PUSH
16591: LD_INT 26
16593: PUSH
16594: LD_INT 29
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: LIST
16601: PUSH
16602: LD_INT 1
16604: PPUSH
16605: LD_INT 3
16607: PPUSH
16608: CALL_OW 12
16612: ARRAY
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 13
16622: PUSH
16623: LD_INT 1
16625: PUSH
16626: LD_INT 2
16628: PUSH
16629: LD_INT 26
16631: PUSH
16632: LD_INT 29
16634: PUSH
16635: LD_INT 29
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: LIST
16642: PUSH
16643: LD_INT 1
16645: PPUSH
16646: LD_INT 3
16648: PPUSH
16649: CALL_OW 12
16653: ARRAY
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: PUSH
16661: LD_INT 13
16663: PUSH
16664: LD_INT 1
16666: PUSH
16667: LD_INT 2
16669: PUSH
16670: LD_INT 29
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: PUSH
16679: LD_INT 13
16681: PUSH
16682: LD_INT 1
16684: PUSH
16685: LD_INT 2
16687: PUSH
16688: LD_INT 26
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: PPUSH
16705: CALL 86273 0 2
// end ; repeat wait ( 0 0$1 ) ;
16709: LD_INT 35
16711: PPUSH
16712: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 6 or tick mod 10 10$00 = 0 ;
16716: LD_VAR 0 2
16720: PPUSH
16721: LD_INT 1
16723: PPUSH
16724: CALL 87691 0 2
16728: PUSH
16729: LD_INT 6
16731: GREATEREQUAL
16732: PUSH
16733: LD_OWVAR 1
16737: PUSH
16738: LD_INT 21000
16740: MOD
16741: PUSH
16742: LD_INT 0
16744: EQUAL
16745: OR
16746: IFFALSE 16709
// wait ( 0 0$30 ) ;
16748: LD_INT 1050
16750: PPUSH
16751: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
16755: LD_ADDR_VAR 0 3
16759: PUSH
16760: LD_VAR 0 2
16764: PPUSH
16765: LD_INT 1
16767: PPUSH
16768: CALL 87691 0 2
16772: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
16773: LD_ADDR_EXP 55
16777: PUSH
16778: LD_EXP 55
16782: PPUSH
16783: LD_VAR 0 2
16787: PPUSH
16788: LD_EXP 55
16792: PUSH
16793: LD_VAR 0 2
16797: ARRAY
16798: PUSH
16799: LD_VAR 0 3
16803: DIFF
16804: PPUSH
16805: CALL_OW 1
16809: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
16810: LD_ADDR_VAR 0 4
16814: PUSH
16815: LD_INT 0
16817: PPUSH
16818: LD_INT 2
16820: PPUSH
16821: CALL_OW 12
16825: ST_TO_ADDR
// if legChangeSide then
16826: LD_EXP 21
16830: IFFALSE 16840
// target := 2 ;
16832: LD_ADDR_VAR 0 4
16836: PUSH
16837: LD_INT 2
16839: ST_TO_ADDR
// if target = 2 then
16840: LD_VAR 0 4
16844: PUSH
16845: LD_INT 2
16847: EQUAL
16848: IFFALSE 16976
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16850: LD_ADDR_VAR 0 3
16854: PUSH
16855: LD_VAR 0 3
16859: PPUSH
16860: LD_INT 24
16862: PUSH
16863: LD_INT 250
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: PPUSH
16870: CALL_OW 72
16874: ST_TO_ADDR
// for i in tmp do
16875: LD_ADDR_VAR 0 1
16879: PUSH
16880: LD_VAR 0 3
16884: PUSH
16885: FOR_IN
16886: IFFALSE 16926
// if GetDistUnitXY ( i , 112 , 64 ) > 9 then
16888: LD_VAR 0 1
16892: PPUSH
16893: LD_INT 112
16895: PPUSH
16896: LD_INT 64
16898: PPUSH
16899: CALL_OW 297
16903: PUSH
16904: LD_INT 9
16906: GREATER
16907: IFFALSE 16924
// ComMoveXY ( i , 112 , 64 ) ;
16909: LD_VAR 0 1
16913: PPUSH
16914: LD_INT 112
16916: PPUSH
16917: LD_INT 64
16919: PPUSH
16920: CALL_OW 111
16924: GO 16885
16926: POP
16927: POP
// wait ( 0 0$1 ) ;
16928: LD_INT 35
16930: PPUSH
16931: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 112 , 64 , 9 ] ) >= ( tmp - 1 ) ;
16935: LD_VAR 0 3
16939: PPUSH
16940: LD_INT 92
16942: PUSH
16943: LD_INT 112
16945: PUSH
16946: LD_INT 64
16948: PUSH
16949: LD_INT 9
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: PPUSH
16958: CALL_OW 72
16962: PUSH
16963: LD_VAR 0 3
16967: PUSH
16968: LD_INT 1
16970: MINUS
16971: GREATEREQUAL
16972: IFFALSE 16850
// end else
16974: GO 17100
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16976: LD_ADDR_VAR 0 3
16980: PUSH
16981: LD_VAR 0 3
16985: PPUSH
16986: LD_INT 24
16988: PUSH
16989: LD_INT 250
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PPUSH
16996: CALL_OW 72
17000: ST_TO_ADDR
// for i in tmp do
17001: LD_ADDR_VAR 0 1
17005: PUSH
17006: LD_VAR 0 3
17010: PUSH
17011: FOR_IN
17012: IFFALSE 17052
// if GetDistUnitXY ( i , 174 , 94 ) > 9 then
17014: LD_VAR 0 1
17018: PPUSH
17019: LD_INT 174
17021: PPUSH
17022: LD_INT 94
17024: PPUSH
17025: CALL_OW 297
17029: PUSH
17030: LD_INT 9
17032: GREATER
17033: IFFALSE 17050
// ComMoveXY ( i , 174 , 94 ) ;
17035: LD_VAR 0 1
17039: PPUSH
17040: LD_INT 174
17042: PPUSH
17043: LD_INT 94
17045: PPUSH
17046: CALL_OW 111
17050: GO 17011
17052: POP
17053: POP
// wait ( 0 0$1 ) ;
17054: LD_INT 35
17056: PPUSH
17057: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 174 , 94 , 9 ] ) >= ( tmp - 1 ) ;
17061: LD_VAR 0 3
17065: PPUSH
17066: LD_INT 92
17068: PUSH
17069: LD_INT 174
17071: PUSH
17072: LD_INT 94
17074: PUSH
17075: LD_INT 9
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: PPUSH
17084: CALL_OW 72
17088: PUSH
17089: LD_VAR 0 3
17093: PUSH
17094: LD_INT 1
17096: MINUS
17097: GREATEREQUAL
17098: IFFALSE 16976
// end ; repeat wait ( 0 0$1 ) ;
17100: LD_INT 35
17102: PPUSH
17103: CALL_OW 67
// for i in tmp do
17107: LD_ADDR_VAR 0 1
17111: PUSH
17112: LD_VAR 0 3
17116: PUSH
17117: FOR_IN
17118: IFFALSE 17200
// begin if GetLives ( i ) > 251 then
17120: LD_VAR 0 1
17124: PPUSH
17125: CALL_OW 256
17129: PUSH
17130: LD_INT 251
17132: GREATER
17133: IFFALSE 17171
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
17135: LD_VAR 0 1
17139: PPUSH
17140: LD_INT 81
17142: PUSH
17143: LD_INT 8
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PPUSH
17150: CALL_OW 69
17154: PPUSH
17155: LD_VAR 0 1
17159: PPUSH
17160: CALL_OW 74
17164: PPUSH
17165: CALL_OW 115
17169: GO 17198
// if IsDead ( i ) then
17171: LD_VAR 0 1
17175: PPUSH
17176: CALL_OW 301
17180: IFFALSE 17198
// tmp := tmp diff i ;
17182: LD_ADDR_VAR 0 3
17186: PUSH
17187: LD_VAR 0 3
17191: PUSH
17192: LD_VAR 0 1
17196: DIFF
17197: ST_TO_ADDR
// end ;
17198: GO 17117
17200: POP
17201: POP
// until not tmp ;
17202: LD_VAR 0 3
17206: NOT
17207: IFFALSE 17100
// end ;
17209: PPOPN 4
17211: END
// every 7 7$30 trigger game do var i , base , tmp , target , teleport ;
17212: LD_EXP 3
17216: IFFALSE 18204
17218: GO 17220
17220: DISABLE
17221: LD_INT 0
17223: PPUSH
17224: PPUSH
17225: PPUSH
17226: PPUSH
17227: PPUSH
// begin enable ;
17228: ENABLE
// if not UnitFilter ( mc_bases [ mc_rus_2 ] , [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
17229: LD_EXP 36
17233: PUSH
17234: LD_EXP 8
17238: ARRAY
17239: PPUSH
17240: LD_INT 22
17242: PUSH
17243: LD_INT 3
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PUSH
17250: LD_INT 30
17252: PUSH
17253: LD_INT 3
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PPUSH
17264: CALL_OW 72
17268: NOT
17269: IFFALSE 17273
// exit ;
17271: GO 18204
// base := mc_rus_2 ;
17273: LD_ADDR_VAR 0 2
17277: PUSH
17278: LD_EXP 8
17282: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
17283: LD_ADDR_VAR 0 5
17287: PUSH
17288: LD_INT 22
17290: PUSH
17291: LD_INT 3
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 30
17300: PUSH
17301: LD_INT 34
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PPUSH
17312: CALL_OW 69
17316: ST_TO_ADDR
// if Prob ( 40 ) then
17317: LD_INT 40
17319: PPUSH
17320: CALL_OW 13
17324: IFFALSE 17453
// begin MC_InsertProduceList ( base , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17326: LD_VAR 0 2
17330: PPUSH
17331: LD_INT 22
17333: PUSH
17334: LD_INT 3
17336: PUSH
17337: LD_INT 3
17339: PUSH
17340: LD_INT 49
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: PUSH
17349: LD_INT 22
17351: PUSH
17352: LD_INT 3
17354: PUSH
17355: LD_INT 3
17357: PUSH
17358: LD_INT 49
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 22
17369: PUSH
17370: LD_INT 3
17372: PUSH
17373: LD_INT 3
17375: PUSH
17376: LD_INT 49
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 24
17387: PUSH
17388: LD_INT 3
17390: PUSH
17391: LD_INT 3
17393: PUSH
17394: LD_INT 46
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: PUSH
17403: LD_INT 24
17405: PUSH
17406: LD_INT 3
17408: PUSH
17409: LD_INT 3
17411: PUSH
17412: LD_INT 46
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 24
17423: PUSH
17424: LD_INT 3
17426: PUSH
17427: LD_INT 3
17429: PUSH
17430: LD_INT 46
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: PPUSH
17447: CALL 86273 0 2
// end else
17451: GO 17578
// begin MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17453: LD_VAR 0 2
17457: PPUSH
17458: LD_INT 24
17460: PUSH
17461: LD_INT 3
17463: PUSH
17464: LD_INT 3
17466: PUSH
17467: LD_INT 47
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 24
17478: PUSH
17479: LD_INT 3
17481: PUSH
17482: LD_INT 3
17484: PUSH
17485: LD_INT 47
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: PUSH
17494: LD_INT 24
17496: PUSH
17497: LD_INT 3
17499: PUSH
17500: LD_INT 3
17502: PUSH
17503: LD_INT 47
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 24
17514: PUSH
17515: LD_INT 3
17517: PUSH
17518: LD_INT 3
17520: PUSH
17521: LD_INT 46
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: PUSH
17530: LD_INT 24
17532: PUSH
17533: LD_INT 3
17535: PUSH
17536: LD_INT 3
17538: PUSH
17539: LD_INT 46
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 24
17550: PUSH
17551: LD_INT 3
17553: PUSH
17554: LD_INT 3
17556: PUSH
17557: LD_INT 46
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: PPUSH
17574: CALL 86273 0 2
// end ; if Difficulty > 1 then
17578: LD_OWVAR 67
17582: PUSH
17583: LD_INT 1
17585: GREATER
17586: IFFALSE 17618
// MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
17588: LD_VAR 0 2
17592: PPUSH
17593: LD_INT 24
17595: PUSH
17596: LD_INT 3
17598: PUSH
17599: LD_INT 3
17601: PUSH
17602: LD_INT 47
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: PUSH
17611: EMPTY
17612: LIST
17613: PPUSH
17614: CALL 86273 0 2
// repeat wait ( 0 0$1 ) ;
17618: LD_INT 35
17620: PPUSH
17621: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] or tick mod 10 10$00 = 0 ;
17625: LD_VAR 0 2
17629: PPUSH
17630: LD_INT 1
17632: PPUSH
17633: CALL 87691 0 2
17637: PUSH
17638: LD_INT 6
17640: PUSH
17641: LD_INT 7
17643: PUSH
17644: LD_INT 7
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: LIST
17651: PUSH
17652: LD_OWVAR 67
17656: ARRAY
17657: GREATEREQUAL
17658: PUSH
17659: LD_OWVAR 1
17663: PUSH
17664: LD_INT 21000
17666: MOD
17667: PUSH
17668: LD_INT 0
17670: EQUAL
17671: OR
17672: IFFALSE 17618
// wait ( 0 0$45 ) ;
17674: LD_INT 1575
17676: PPUSH
17677: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
17681: LD_ADDR_VAR 0 3
17685: PUSH
17686: LD_VAR 0 2
17690: PPUSH
17691: LD_INT 1
17693: PPUSH
17694: CALL 87691 0 2
17698: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
17699: LD_ADDR_EXP 55
17703: PUSH
17704: LD_EXP 55
17708: PPUSH
17709: LD_VAR 0 2
17713: PPUSH
17714: LD_EXP 55
17718: PUSH
17719: LD_VAR 0 2
17723: ARRAY
17724: PUSH
17725: LD_VAR 0 3
17729: DIFF
17730: PPUSH
17731: CALL_OW 1
17735: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
17736: LD_ADDR_VAR 0 4
17740: PUSH
17741: LD_INT 0
17743: PPUSH
17744: LD_INT 1
17746: PPUSH
17747: CALL_OW 12
17751: ST_TO_ADDR
// if target then
17752: LD_VAR 0 4
17756: IFFALSE 17884
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17758: LD_ADDR_VAR 0 3
17762: PUSH
17763: LD_VAR 0 3
17767: PPUSH
17768: LD_INT 24
17770: PUSH
17771: LD_INT 250
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PPUSH
17778: CALL_OW 72
17782: ST_TO_ADDR
// for i in tmp do
17783: LD_ADDR_VAR 0 1
17787: PUSH
17788: LD_VAR 0 3
17792: PUSH
17793: FOR_IN
17794: IFFALSE 17834
// if GetDistUnitXY ( i , 84 , 32 ) > 9 then
17796: LD_VAR 0 1
17800: PPUSH
17801: LD_INT 84
17803: PPUSH
17804: LD_INT 32
17806: PPUSH
17807: CALL_OW 297
17811: PUSH
17812: LD_INT 9
17814: GREATER
17815: IFFALSE 17832
// ComMoveXY ( i , 84 , 32 ) ;
17817: LD_VAR 0 1
17821: PPUSH
17822: LD_INT 84
17824: PPUSH
17825: LD_INT 32
17827: PPUSH
17828: CALL_OW 111
17832: GO 17793
17834: POP
17835: POP
// wait ( 0 0$1 ) ;
17836: LD_INT 35
17838: PPUSH
17839: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 84 , 32 , 9 ] ) >= ( tmp - 1 ) ;
17843: LD_VAR 0 3
17847: PPUSH
17848: LD_INT 92
17850: PUSH
17851: LD_INT 84
17853: PUSH
17854: LD_INT 32
17856: PUSH
17857: LD_INT 9
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: PPUSH
17866: CALL_OW 72
17870: PUSH
17871: LD_VAR 0 3
17875: PUSH
17876: LD_INT 1
17878: MINUS
17879: GREATEREQUAL
17880: IFFALSE 17758
// end else
17882: GO 18044
// begin if teleport then
17884: LD_VAR 0 5
17888: IFFALSE 17908
// ComEnterUnit ( tmp , teleport [ 1 ] ) ;
17890: LD_VAR 0 3
17894: PPUSH
17895: LD_VAR 0 5
17899: PUSH
17900: LD_INT 1
17902: ARRAY
17903: PPUSH
17904: CALL_OW 120
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17908: LD_ADDR_VAR 0 3
17912: PUSH
17913: LD_VAR 0 3
17917: PPUSH
17918: LD_INT 24
17920: PUSH
17921: LD_INT 250
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PPUSH
17928: CALL_OW 72
17932: ST_TO_ADDR
// for i in tmp do
17933: LD_ADDR_VAR 0 1
17937: PUSH
17938: LD_VAR 0 3
17942: PUSH
17943: FOR_IN
17944: IFFALSE 17996
// if GetDistUnitXY ( i , 140 , 219 ) > 9 and not HasTask ( i ) then
17946: LD_VAR 0 1
17950: PPUSH
17951: LD_INT 140
17953: PPUSH
17954: LD_INT 219
17956: PPUSH
17957: CALL_OW 297
17961: PUSH
17962: LD_INT 9
17964: GREATER
17965: PUSH
17966: LD_VAR 0 1
17970: PPUSH
17971: CALL_OW 314
17975: NOT
17976: AND
17977: IFFALSE 17994
// AddComMoveXY ( i , 140 , 219 ) ;
17979: LD_VAR 0 1
17983: PPUSH
17984: LD_INT 140
17986: PPUSH
17987: LD_INT 219
17989: PPUSH
17990: CALL_OW 171
17994: GO 17943
17996: POP
17997: POP
// wait ( 0 0$1 ) ;
17998: LD_INT 35
18000: PPUSH
18001: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 140 , 219 , 9 ] ) >= ( tmp - 1 ) ;
18005: LD_VAR 0 3
18009: PPUSH
18010: LD_INT 92
18012: PUSH
18013: LD_INT 140
18015: PUSH
18016: LD_INT 219
18018: PUSH
18019: LD_INT 9
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: PPUSH
18028: CALL_OW 72
18032: PUSH
18033: LD_VAR 0 3
18037: PUSH
18038: LD_INT 1
18040: MINUS
18041: GREATEREQUAL
18042: IFFALSE 17908
// end ; repeat wait ( 0 0$1 ) ;
18044: LD_INT 35
18046: PPUSH
18047: CALL_OW 67
// for i in tmp do
18051: LD_ADDR_VAR 0 1
18055: PUSH
18056: LD_VAR 0 3
18060: PUSH
18061: FOR_IN
18062: IFFALSE 18195
// begin if GetLives ( i ) > 251 then
18064: LD_VAR 0 1
18068: PPUSH
18069: CALL_OW 256
18073: PUSH
18074: LD_INT 251
18076: GREATER
18077: IFFALSE 18166
// begin if GetWeapon ( i ) = ru_time_lapser then
18079: LD_VAR 0 1
18083: PPUSH
18084: CALL_OW 264
18088: PUSH
18089: LD_INT 49
18091: EQUAL
18092: IFFALSE 18130
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) else
18094: LD_VAR 0 1
18098: PPUSH
18099: LD_INT 81
18101: PUSH
18102: LD_INT 3
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PPUSH
18109: CALL_OW 69
18113: PPUSH
18114: LD_VAR 0 1
18118: PPUSH
18119: CALL_OW 74
18123: PPUSH
18124: CALL_OW 112
18128: GO 18164
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18130: LD_VAR 0 1
18134: PPUSH
18135: LD_INT 81
18137: PUSH
18138: LD_INT 3
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PPUSH
18145: CALL_OW 69
18149: PPUSH
18150: LD_VAR 0 1
18154: PPUSH
18155: CALL_OW 74
18159: PPUSH
18160: CALL_OW 115
// end else
18164: GO 18193
// if IsDead ( i ) then
18166: LD_VAR 0 1
18170: PPUSH
18171: CALL_OW 301
18175: IFFALSE 18193
// tmp := tmp diff i ;
18177: LD_ADDR_VAR 0 3
18181: PUSH
18182: LD_VAR 0 3
18186: PUSH
18187: LD_VAR 0 1
18191: DIFF
18192: ST_TO_ADDR
// end ;
18193: GO 18061
18195: POP
18196: POP
// until not tmp ;
18197: LD_VAR 0 3
18201: NOT
18202: IFFALSE 18044
// end ;
18204: PPOPN 5
18206: END
// every 12 12$30 + 11 11$30 trigger game do var i , base , tmp , target ;
18207: LD_EXP 3
18211: IFFALSE 18593
18213: GO 18215
18215: DISABLE
18216: LD_INT 0
18218: PPUSH
18219: PPUSH
18220: PPUSH
18221: PPUSH
// begin enable ;
18222: ENABLE
// base := mc_amer ;
18223: LD_ADDR_VAR 0 2
18227: PUSH
18228: LD_EXP 5
18232: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_btype , b_factory ] ] ) then
18233: LD_INT 22
18235: PUSH
18236: LD_INT 4
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 23
18245: PUSH
18246: LD_INT 1
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 30
18255: PUSH
18256: LD_INT 3
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: LIST
18267: PPUSH
18268: CALL_OW 69
18272: NOT
18273: IFFALSE 18277
// exit ;
18275: GO 18593
// MC_InsertProduceList ( base , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_laser ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] ] ) ;
18277: LD_VAR 0 2
18281: PPUSH
18282: LD_INT 3
18284: PUSH
18285: LD_INT 1
18287: PUSH
18288: LD_INT 2
18290: PUSH
18291: LD_INT 5
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 3
18302: PUSH
18303: LD_INT 1
18305: PUSH
18306: LD_INT 2
18308: PUSH
18309: LD_INT 9
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 3
18320: PUSH
18321: LD_INT 1
18323: PUSH
18324: LD_INT 2
18326: PUSH
18327: LD_INT 7
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: PUSH
18336: LD_INT 3
18338: PUSH
18339: LD_INT 1
18341: PUSH
18342: LD_INT 2
18344: PUSH
18345: LD_INT 7
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 3
18356: PUSH
18357: LD_INT 1
18359: PUSH
18360: LD_INT 2
18362: PUSH
18363: LD_INT 7
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: PPUSH
18379: CALL 86273 0 2
// repeat wait ( 0 0$1 ) ;
18383: LD_INT 35
18385: PPUSH
18386: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 5 or tick mod 10 10$00 = 0 ;
18390: LD_VAR 0 2
18394: PPUSH
18395: LD_INT 1
18397: PPUSH
18398: CALL 87691 0 2
18402: PUSH
18403: LD_INT 5
18405: GREATEREQUAL
18406: PUSH
18407: LD_OWVAR 1
18411: PUSH
18412: LD_INT 21000
18414: MOD
18415: PUSH
18416: LD_INT 0
18418: EQUAL
18419: OR
18420: IFFALSE 18383
// wait ( 0 0$30 ) ;
18422: LD_INT 1050
18424: PPUSH
18425: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
18429: LD_ADDR_VAR 0 3
18433: PUSH
18434: LD_VAR 0 2
18438: PPUSH
18439: LD_INT 1
18441: PPUSH
18442: CALL 87691 0 2
18446: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
18447: LD_ADDR_EXP 55
18451: PUSH
18452: LD_EXP 55
18456: PPUSH
18457: LD_VAR 0 2
18461: PPUSH
18462: LD_EXP 55
18466: PUSH
18467: LD_VAR 0 2
18471: ARRAY
18472: PUSH
18473: LD_VAR 0 3
18477: DIFF
18478: PPUSH
18479: CALL_OW 1
18483: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18484: LD_INT 35
18486: PPUSH
18487: CALL_OW 67
// for i in tmp do
18491: LD_ADDR_VAR 0 1
18495: PUSH
18496: LD_VAR 0 3
18500: PUSH
18501: FOR_IN
18502: IFFALSE 18584
// begin if GetLives ( i ) > 251 then
18504: LD_VAR 0 1
18508: PPUSH
18509: CALL_OW 256
18513: PUSH
18514: LD_INT 251
18516: GREATER
18517: IFFALSE 18555
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) else
18519: LD_VAR 0 1
18523: PPUSH
18524: LD_INT 81
18526: PUSH
18527: LD_INT 4
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PPUSH
18534: CALL_OW 69
18538: PPUSH
18539: LD_VAR 0 1
18543: PPUSH
18544: CALL_OW 74
18548: PPUSH
18549: CALL_OW 115
18553: GO 18582
// if IsDead ( i ) then
18555: LD_VAR 0 1
18559: PPUSH
18560: CALL_OW 301
18564: IFFALSE 18582
// tmp := tmp diff i ;
18566: LD_ADDR_VAR 0 3
18570: PUSH
18571: LD_VAR 0 3
18575: PUSH
18576: LD_VAR 0 1
18580: DIFF
18581: ST_TO_ADDR
// end ;
18582: GO 18501
18584: POP
18585: POP
// until not tmp ;
18586: LD_VAR 0 3
18590: NOT
18591: IFFALSE 18484
// end ; end_of_file
18593: PPOPN 4
18595: END
// export function CustomEvent ( event ) ; begin
18596: LD_INT 0
18598: PPUSH
// end ;
18599: LD_VAR 0 2
18603: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 then
18604: LD_VAR 0 1
18608: PUSH
18609: LD_INT 1
18611: EQUAL
18612: PUSH
18613: LD_VAR 0 2
18617: PUSH
18618: LD_INT 4
18620: EQUAL
18621: AND
18622: IFFALSE 18650
// begin SayRadio ( Powell , DP-Lost ) ;
18624: LD_EXP 12
18628: PPUSH
18629: LD_STRING DP-Lost
18631: PPUSH
18632: CALL_OW 94
// wait ( 0 0$2 ) ;
18636: LD_INT 70
18638: PPUSH
18639: CALL_OW 67
// YouLost ( FriendlyFire ) ;
18643: LD_STRING FriendlyFire
18645: PPUSH
18646: CALL_OW 104
// end ; end ;
18650: PPOPN 2
18652: END
// on UnitDestroyed ( un ) do begin if GameType = 1 then
18653: LD_EXP 2
18657: PUSH
18658: LD_INT 1
18660: EQUAL
18661: IFFALSE 18896
// begin if un = playerCommander then
18663: LD_VAR 0 1
18667: PUSH
18668: LD_EXP 9
18672: EQUAL
18673: IFFALSE 18682
// YouLost ( commanderDied ) ;
18675: LD_STRING commanderDied
18677: PPUSH
18678: CALL_OW 104
// if un = allyCommander then
18682: LD_VAR 0 1
18686: PUSH
18687: LD_EXP 11
18691: EQUAL
18692: IFFALSE 18701
// YouLost ( Theta ) ;
18694: LD_STRING Theta
18696: PPUSH
18697: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18701: LD_VAR 0 1
18705: PUSH
18706: LD_INT 22
18708: PUSH
18709: LD_INT 8
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 2
18718: PUSH
18719: LD_INT 21
18721: PUSH
18722: LD_INT 1
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 21
18731: PUSH
18732: LD_INT 3
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: LIST
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PPUSH
18748: CALL_OW 69
18752: IN
18753: IFFALSE 18769
// legDestCounter := legDestCounter + 1 ;
18755: LD_ADDR_EXP 18
18759: PUSH
18760: LD_EXP 18
18764: PUSH
18765: LD_INT 1
18767: PLUS
18768: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18769: LD_VAR 0 1
18773: PUSH
18774: LD_INT 22
18776: PUSH
18777: LD_INT 4
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 2
18786: PUSH
18787: LD_INT 21
18789: PUSH
18790: LD_INT 1
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: LD_INT 21
18799: PUSH
18800: LD_INT 3
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: LIST
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PPUSH
18816: CALL_OW 69
18820: IN
18821: IFFALSE 18837
// allyDestCounter := allyDestCounter + 1 ;
18823: LD_ADDR_EXP 22
18827: PUSH
18828: LD_EXP 22
18832: PUSH
18833: LD_INT 1
18835: PLUS
18836: ST_TO_ADDR
// if un in ruOutpost then
18837: LD_VAR 0 1
18841: PUSH
18842: LD_EXP 14
18846: IN
18847: IFFALSE 18896
// begin ruOutpost := ruOutpost diff un ;
18849: LD_ADDR_EXP 14
18853: PUSH
18854: LD_EXP 14
18858: PUSH
18859: LD_VAR 0 1
18863: DIFF
18864: ST_TO_ADDR
// ruEscape := Replace ( ruEscape , 1 , ruEscape [ 1 ] + 1 ) ;
18865: LD_ADDR_EXP 15
18869: PUSH
18870: LD_EXP 15
18874: PPUSH
18875: LD_INT 1
18877: PPUSH
18878: LD_EXP 15
18882: PUSH
18883: LD_INT 1
18885: ARRAY
18886: PUSH
18887: LD_INT 1
18889: PLUS
18890: PPUSH
18891: CALL_OW 1
18895: ST_TO_ADDR
// end ; end ; MCE_UnitDestroyed ( un ) ;
18896: LD_VAR 0 1
18900: PPUSH
18901: CALL 89665 0 1
// end ;
18905: PPOPN 1
18907: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
18908: LD_VAR 0 1
18912: PPUSH
18913: LD_VAR 0 2
18917: PPUSH
18918: CALL 91999 0 2
// end ;
18922: PPOPN 2
18924: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
18925: LD_VAR 0 1
18929: PPUSH
18930: CALL 91067 0 1
// end ;
18934: PPOPN 1
18936: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
18937: LD_VAR 0 1
18941: PPUSH
18942: CALL 91308 0 1
// end ;
18946: PPOPN 1
18948: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_LasDouble and GetSide ( lab ) = 1 then
18949: LD_VAR 0 1
18953: PUSH
18954: LD_INT 14
18956: EQUAL
18957: PUSH
18958: LD_VAR 0 2
18962: PPUSH
18963: CALL_OW 255
18967: PUSH
18968: LD_INT 1
18970: EQUAL
18971: AND
18972: IFFALSE 19013
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Laser ) ;
18974: LD_EXP 9
18978: PPUSH
18979: LD_STRING D
18981: PUSH
18982: LD_STRING I
18984: PUSH
18985: LD_STRING J
18987: PUSH
18988: LD_STRING S
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: LIST
18995: PUSH
18996: LD_EXP 25
19000: ARRAY
19001: STR
19002: PUSH
19003: LD_STRING -1-Laser
19005: STR
19006: PPUSH
19007: CALL_OW 88
// exit ;
19011: GO 19155
// end ; if tech = tech_MatDet and GetSide ( lab ) = 1 then
19013: LD_VAR 0 1
19017: PUSH
19018: LD_INT 7
19020: EQUAL
19021: PUSH
19022: LD_VAR 0 2
19026: PPUSH
19027: CALL_OW 255
19031: PUSH
19032: LD_INT 1
19034: EQUAL
19035: AND
19036: IFFALSE 19077
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Materialization ) ;
19038: LD_EXP 9
19042: PPUSH
19043: LD_STRING D
19045: PUSH
19046: LD_STRING I
19048: PUSH
19049: LD_STRING J
19051: PUSH
19052: LD_STRING S
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: LIST
19059: PUSH
19060: LD_EXP 25
19064: ARRAY
19065: STR
19066: PUSH
19067: LD_STRING -1-Materialization
19069: STR
19070: PPUSH
19071: CALL_OW 88
// exit ;
19075: GO 19155
// end ; if tech = tech_SibFiss and GetSide ( lab ) = 1 then
19077: LD_VAR 0 1
19081: PUSH
19082: LD_INT 25
19084: EQUAL
19085: PUSH
19086: LD_VAR 0 2
19090: PPUSH
19091: CALL_OW 255
19095: PUSH
19096: LD_INT 1
19098: EQUAL
19099: AND
19100: IFFALSE 19141
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Rocket ) ;
19102: LD_EXP 9
19106: PPUSH
19107: LD_STRING D
19109: PUSH
19110: LD_STRING I
19112: PUSH
19113: LD_STRING J
19115: PUSH
19116: LD_STRING S
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: LIST
19123: PUSH
19124: LD_EXP 25
19128: ARRAY
19129: STR
19130: PUSH
19131: LD_STRING -1-Rocket
19133: STR
19134: PPUSH
19135: CALL_OW 88
// exit ;
19139: GO 19155
// end ; MCE_ResearchComplete ( tech , lab ) ;
19141: LD_VAR 0 1
19145: PPUSH
19146: LD_VAR 0 2
19150: PPUSH
19151: CALL 89361 0 2
// end ;
19155: PPOPN 2
19157: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
19158: LD_VAR 0 1
19162: PPUSH
19163: LD_VAR 0 2
19167: PPUSH
19168: LD_VAR 0 3
19172: PPUSH
19173: LD_VAR 0 4
19177: PPUSH
19178: LD_VAR 0 5
19182: PPUSH
19183: CALL 88981 0 5
// end ;
19187: PPOPN 5
19189: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
19190: LD_VAR 0 1
19194: PPUSH
19195: LD_VAR 0 2
19199: PPUSH
19200: CALL 88577 0 2
// end ;
19204: PPOPN 2
19206: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
19207: LD_VAR 0 1
19211: PPUSH
19212: LD_VAR 0 2
19216: PPUSH
19217: LD_VAR 0 3
19221: PPUSH
19222: LD_VAR 0 4
19226: PPUSH
19227: CALL 88415 0 4
// end ;
19231: PPOPN 4
19233: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
19234: LD_VAR 0 1
19238: PPUSH
19239: LD_VAR 0 2
19243: PPUSH
19244: LD_VAR 0 3
19248: PPUSH
19249: CALL 88190 0 3
// end ;
19253: PPOPN 3
19255: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
19256: LD_VAR 0 1
19260: PPUSH
19261: LD_VAR 0 2
19265: PPUSH
19266: CALL 88075 0 2
// end ;
19270: PPOPN 2
19272: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
19273: LD_VAR 0 1
19277: PPUSH
19278: LD_VAR 0 2
19282: PPUSH
19283: CALL 92260 0 2
// end ;
19287: PPOPN 2
19289: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
19290: LD_VAR 0 1
19294: PPUSH
19295: LD_VAR 0 2
19299: PPUSH
19300: LD_VAR 0 3
19304: PPUSH
19305: LD_VAR 0 4
19309: PPUSH
19310: CALL 92476 0 4
// end ;
19314: PPOPN 4
19316: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
19317: LD_VAR 0 1
19321: PPUSH
19322: LD_VAR 0 2
19326: PPUSH
19327: CALL 87884 0 2
// end ;
19331: PPOPN 2
19333: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
19334: LD_VAR 0 1
19338: PPUSH
19339: CALL 92715 0 1
// end ; end_of_file
19343: PPOPN 1
19345: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19346: LD_INT 0
19348: PPUSH
19349: PPUSH
// if exist_mode then
19350: LD_VAR 0 2
19354: IFFALSE 19379
// unit := CreateCharacter ( prefix & ident ) else
19356: LD_ADDR_VAR 0 5
19360: PUSH
19361: LD_VAR 0 3
19365: PUSH
19366: LD_VAR 0 1
19370: STR
19371: PPUSH
19372: CALL_OW 34
19376: ST_TO_ADDR
19377: GO 19394
// unit := NewCharacter ( ident ) ;
19379: LD_ADDR_VAR 0 5
19383: PUSH
19384: LD_VAR 0 1
19388: PPUSH
19389: CALL_OW 25
19393: ST_TO_ADDR
// result := unit ;
19394: LD_ADDR_VAR 0 4
19398: PUSH
19399: LD_VAR 0 5
19403: ST_TO_ADDR
// end ;
19404: LD_VAR 0 4
19408: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19409: LD_INT 0
19411: PPUSH
19412: PPUSH
// if not side or not nation then
19413: LD_VAR 0 1
19417: NOT
19418: PUSH
19419: LD_VAR 0 2
19423: NOT
19424: OR
19425: IFFALSE 19429
// exit ;
19427: GO 20073
// case nation of nation_american :
19429: LD_VAR 0 2
19433: PUSH
19434: LD_INT 1
19436: DOUBLE
19437: EQUAL
19438: IFTRUE 19442
19440: GO 19616
19442: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
19443: LD_ADDR_VAR 0 4
19447: PUSH
19448: LD_INT 35
19450: PUSH
19451: LD_INT 45
19453: PUSH
19454: LD_INT 46
19456: PUSH
19457: LD_INT 47
19459: PUSH
19460: LD_INT 1
19462: PUSH
19463: LD_INT 2
19465: PUSH
19466: LD_INT 6
19468: PUSH
19469: LD_INT 15
19471: PUSH
19472: LD_INT 16
19474: PUSH
19475: LD_INT 7
19477: PUSH
19478: LD_INT 12
19480: PUSH
19481: LD_INT 13
19483: PUSH
19484: LD_INT 10
19486: PUSH
19487: LD_INT 14
19489: PUSH
19490: LD_INT 20
19492: PUSH
19493: LD_INT 21
19495: PUSH
19496: LD_INT 22
19498: PUSH
19499: LD_INT 25
19501: PUSH
19502: LD_INT 32
19504: PUSH
19505: LD_INT 27
19507: PUSH
19508: LD_INT 36
19510: PUSH
19511: LD_INT 69
19513: PUSH
19514: LD_INT 39
19516: PUSH
19517: LD_INT 34
19519: PUSH
19520: LD_INT 40
19522: PUSH
19523: LD_INT 48
19525: PUSH
19526: LD_INT 49
19528: PUSH
19529: LD_INT 50
19531: PUSH
19532: LD_INT 51
19534: PUSH
19535: LD_INT 52
19537: PUSH
19538: LD_INT 53
19540: PUSH
19541: LD_INT 54
19543: PUSH
19544: LD_INT 55
19546: PUSH
19547: LD_INT 56
19549: PUSH
19550: LD_INT 57
19552: PUSH
19553: LD_INT 58
19555: PUSH
19556: LD_INT 59
19558: PUSH
19559: LD_INT 60
19561: PUSH
19562: LD_INT 61
19564: PUSH
19565: LD_INT 62
19567: PUSH
19568: LD_INT 80
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: ST_TO_ADDR
19614: GO 19997
19616: LD_INT 2
19618: DOUBLE
19619: EQUAL
19620: IFTRUE 19624
19622: GO 19806
19624: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 ] ; nation_russian :
19625: LD_ADDR_VAR 0 4
19629: PUSH
19630: LD_INT 35
19632: PUSH
19633: LD_INT 45
19635: PUSH
19636: LD_INT 46
19638: PUSH
19639: LD_INT 47
19641: PUSH
19642: LD_INT 70
19644: PUSH
19645: LD_INT 1
19647: PUSH
19648: LD_INT 11
19650: PUSH
19651: LD_INT 3
19653: PUSH
19654: LD_INT 4
19656: PUSH
19657: LD_INT 5
19659: PUSH
19660: LD_INT 6
19662: PUSH
19663: LD_INT 15
19665: PUSH
19666: LD_INT 18
19668: PUSH
19669: LD_INT 7
19671: PUSH
19672: LD_INT 17
19674: PUSH
19675: LD_INT 8
19677: PUSH
19678: LD_INT 20
19680: PUSH
19681: LD_INT 21
19683: PUSH
19684: LD_INT 22
19686: PUSH
19687: LD_INT 72
19689: PUSH
19690: LD_INT 26
19692: PUSH
19693: LD_INT 69
19695: PUSH
19696: LD_INT 39
19698: PUSH
19699: LD_INT 40
19701: PUSH
19702: LD_INT 41
19704: PUSH
19705: LD_INT 42
19707: PUSH
19708: LD_INT 43
19710: PUSH
19711: LD_INT 48
19713: PUSH
19714: LD_INT 49
19716: PUSH
19717: LD_INT 50
19719: PUSH
19720: LD_INT 51
19722: PUSH
19723: LD_INT 52
19725: PUSH
19726: LD_INT 53
19728: PUSH
19729: LD_INT 54
19731: PUSH
19732: LD_INT 55
19734: PUSH
19735: LD_INT 56
19737: PUSH
19738: LD_INT 60
19740: PUSH
19741: LD_INT 61
19743: PUSH
19744: LD_INT 62
19746: PUSH
19747: LD_INT 66
19749: PUSH
19750: LD_INT 67
19752: PUSH
19753: LD_INT 68
19755: PUSH
19756: LD_INT 81
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: ST_TO_ADDR
19804: GO 19997
19806: LD_INT 3
19808: DOUBLE
19809: EQUAL
19810: IFTRUE 19814
19812: GO 19996
19814: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
19815: LD_ADDR_VAR 0 4
19819: PUSH
19820: LD_INT 46
19822: PUSH
19823: LD_INT 47
19825: PUSH
19826: LD_INT 1
19828: PUSH
19829: LD_INT 2
19831: PUSH
19832: LD_INT 11
19834: PUSH
19835: LD_INT 9
19837: PUSH
19838: LD_INT 20
19840: PUSH
19841: LD_INT 19
19843: PUSH
19844: LD_INT 21
19846: PUSH
19847: LD_INT 24
19849: PUSH
19850: LD_INT 22
19852: PUSH
19853: LD_INT 25
19855: PUSH
19856: LD_INT 28
19858: PUSH
19859: LD_INT 29
19861: PUSH
19862: LD_INT 30
19864: PUSH
19865: LD_INT 31
19867: PUSH
19868: LD_INT 37
19870: PUSH
19871: LD_INT 38
19873: PUSH
19874: LD_INT 32
19876: PUSH
19877: LD_INT 27
19879: PUSH
19880: LD_INT 33
19882: PUSH
19883: LD_INT 69
19885: PUSH
19886: LD_INT 39
19888: PUSH
19889: LD_INT 34
19891: PUSH
19892: LD_INT 40
19894: PUSH
19895: LD_INT 71
19897: PUSH
19898: LD_INT 23
19900: PUSH
19901: LD_INT 44
19903: PUSH
19904: LD_INT 48
19906: PUSH
19907: LD_INT 49
19909: PUSH
19910: LD_INT 50
19912: PUSH
19913: LD_INT 51
19915: PUSH
19916: LD_INT 52
19918: PUSH
19919: LD_INT 53
19921: PUSH
19922: LD_INT 54
19924: PUSH
19925: LD_INT 55
19927: PUSH
19928: LD_INT 56
19930: PUSH
19931: LD_INT 57
19933: PUSH
19934: LD_INT 58
19936: PUSH
19937: LD_INT 59
19939: PUSH
19940: LD_INT 63
19942: PUSH
19943: LD_INT 64
19945: PUSH
19946: LD_INT 65
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: ST_TO_ADDR
19994: GO 19997
19996: POP
// if state > - 1 and state < 3 then
19997: LD_VAR 0 3
20001: PUSH
20002: LD_INT 1
20004: NEG
20005: GREATER
20006: PUSH
20007: LD_VAR 0 3
20011: PUSH
20012: LD_INT 3
20014: LESS
20015: AND
20016: IFFALSE 20073
// for i in result do
20018: LD_ADDR_VAR 0 5
20022: PUSH
20023: LD_VAR 0 4
20027: PUSH
20028: FOR_IN
20029: IFFALSE 20071
// if GetTech ( i , side ) <> state then
20031: LD_VAR 0 5
20035: PPUSH
20036: LD_VAR 0 1
20040: PPUSH
20041: CALL_OW 321
20045: PUSH
20046: LD_VAR 0 3
20050: NONEQUAL
20051: IFFALSE 20069
// result := result diff i ;
20053: LD_ADDR_VAR 0 4
20057: PUSH
20058: LD_VAR 0 4
20062: PUSH
20063: LD_VAR 0 5
20067: DIFF
20068: ST_TO_ADDR
20069: GO 20028
20071: POP
20072: POP
// end ;
20073: LD_VAR 0 4
20077: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20078: LD_INT 0
20080: PPUSH
20081: PPUSH
20082: PPUSH
// result := true ;
20083: LD_ADDR_VAR 0 3
20087: PUSH
20088: LD_INT 1
20090: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20091: LD_ADDR_VAR 0 5
20095: PUSH
20096: LD_VAR 0 2
20100: PPUSH
20101: CALL_OW 480
20105: ST_TO_ADDR
// if not tmp then
20106: LD_VAR 0 5
20110: NOT
20111: IFFALSE 20115
// exit ;
20113: GO 20164
// for i in tmp do
20115: LD_ADDR_VAR 0 4
20119: PUSH
20120: LD_VAR 0 5
20124: PUSH
20125: FOR_IN
20126: IFFALSE 20162
// if GetTech ( i , side ) <> state_researched then
20128: LD_VAR 0 4
20132: PPUSH
20133: LD_VAR 0 1
20137: PPUSH
20138: CALL_OW 321
20142: PUSH
20143: LD_INT 2
20145: NONEQUAL
20146: IFFALSE 20160
// begin result := false ;
20148: LD_ADDR_VAR 0 3
20152: PUSH
20153: LD_INT 0
20155: ST_TO_ADDR
// exit ;
20156: POP
20157: POP
20158: GO 20164
// end ;
20160: GO 20125
20162: POP
20163: POP
// end ;
20164: LD_VAR 0 3
20168: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20169: LD_INT 0
20171: PPUSH
20172: PPUSH
20173: PPUSH
20174: PPUSH
20175: PPUSH
20176: PPUSH
20177: PPUSH
20178: PPUSH
20179: PPUSH
20180: PPUSH
20181: PPUSH
20182: PPUSH
20183: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20184: LD_VAR 0 1
20188: NOT
20189: PUSH
20190: LD_VAR 0 1
20194: PPUSH
20195: CALL_OW 257
20199: PUSH
20200: LD_INT 9
20202: NONEQUAL
20203: OR
20204: IFFALSE 20208
// exit ;
20206: GO 20781
// side := GetSide ( unit ) ;
20208: LD_ADDR_VAR 0 9
20212: PUSH
20213: LD_VAR 0 1
20217: PPUSH
20218: CALL_OW 255
20222: ST_TO_ADDR
// tech_space := tech_spacanom ;
20223: LD_ADDR_VAR 0 12
20227: PUSH
20228: LD_INT 29
20230: ST_TO_ADDR
// tech_time := tech_taurad ;
20231: LD_ADDR_VAR 0 13
20235: PUSH
20236: LD_INT 28
20238: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20239: LD_ADDR_VAR 0 11
20243: PUSH
20244: LD_VAR 0 1
20248: PPUSH
20249: CALL_OW 310
20253: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20254: LD_VAR 0 11
20258: PPUSH
20259: CALL_OW 247
20263: PUSH
20264: LD_INT 2
20266: EQUAL
20267: IFFALSE 20271
// exit ;
20269: GO 20781
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20271: LD_ADDR_VAR 0 8
20275: PUSH
20276: LD_INT 81
20278: PUSH
20279: LD_VAR 0 9
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: LD_INT 3
20290: PUSH
20291: LD_INT 21
20293: PUSH
20294: LD_INT 3
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PPUSH
20309: CALL_OW 69
20313: ST_TO_ADDR
// if not tmp then
20314: LD_VAR 0 8
20318: NOT
20319: IFFALSE 20323
// exit ;
20321: GO 20781
// if in_unit then
20323: LD_VAR 0 11
20327: IFFALSE 20351
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20329: LD_ADDR_VAR 0 10
20333: PUSH
20334: LD_VAR 0 8
20338: PPUSH
20339: LD_VAR 0 11
20343: PPUSH
20344: CALL_OW 74
20348: ST_TO_ADDR
20349: GO 20371
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20351: LD_ADDR_VAR 0 10
20355: PUSH
20356: LD_VAR 0 8
20360: PPUSH
20361: LD_VAR 0 1
20365: PPUSH
20366: CALL_OW 74
20370: ST_TO_ADDR
// if not enemy then
20371: LD_VAR 0 10
20375: NOT
20376: IFFALSE 20380
// exit ;
20378: GO 20781
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20380: LD_VAR 0 11
20384: PUSH
20385: LD_VAR 0 11
20389: PPUSH
20390: LD_VAR 0 10
20394: PPUSH
20395: CALL_OW 296
20399: PUSH
20400: LD_INT 13
20402: GREATER
20403: AND
20404: PUSH
20405: LD_VAR 0 1
20409: PPUSH
20410: LD_VAR 0 10
20414: PPUSH
20415: CALL_OW 296
20419: PUSH
20420: LD_INT 12
20422: GREATER
20423: OR
20424: IFFALSE 20428
// exit ;
20426: GO 20781
// missile := [ 1 ] ;
20428: LD_ADDR_VAR 0 14
20432: PUSH
20433: LD_INT 1
20435: PUSH
20436: EMPTY
20437: LIST
20438: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20439: LD_VAR 0 9
20443: PPUSH
20444: LD_VAR 0 12
20448: PPUSH
20449: CALL_OW 325
20453: IFFALSE 20482
// missile := Insert ( missile , missile + 1 , 2 ) ;
20455: LD_ADDR_VAR 0 14
20459: PUSH
20460: LD_VAR 0 14
20464: PPUSH
20465: LD_VAR 0 14
20469: PUSH
20470: LD_INT 1
20472: PLUS
20473: PPUSH
20474: LD_INT 2
20476: PPUSH
20477: CALL_OW 2
20481: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20482: LD_VAR 0 9
20486: PPUSH
20487: LD_VAR 0 13
20491: PPUSH
20492: CALL_OW 325
20496: PUSH
20497: LD_VAR 0 10
20501: PPUSH
20502: CALL_OW 255
20506: PPUSH
20507: LD_VAR 0 13
20511: PPUSH
20512: CALL_OW 325
20516: NOT
20517: AND
20518: IFFALSE 20547
// missile := Insert ( missile , missile + 1 , 3 ) ;
20520: LD_ADDR_VAR 0 14
20524: PUSH
20525: LD_VAR 0 14
20529: PPUSH
20530: LD_VAR 0 14
20534: PUSH
20535: LD_INT 1
20537: PLUS
20538: PPUSH
20539: LD_INT 3
20541: PPUSH
20542: CALL_OW 2
20546: ST_TO_ADDR
// if missile < 2 then
20547: LD_VAR 0 14
20551: PUSH
20552: LD_INT 2
20554: LESS
20555: IFFALSE 20559
// exit ;
20557: GO 20781
// x := GetX ( enemy ) ;
20559: LD_ADDR_VAR 0 4
20563: PUSH
20564: LD_VAR 0 10
20568: PPUSH
20569: CALL_OW 250
20573: ST_TO_ADDR
// y := GetY ( enemy ) ;
20574: LD_ADDR_VAR 0 5
20578: PUSH
20579: LD_VAR 0 10
20583: PPUSH
20584: CALL_OW 251
20588: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20589: LD_ADDR_VAR 0 6
20593: PUSH
20594: LD_VAR 0 4
20598: PUSH
20599: LD_INT 1
20601: NEG
20602: PPUSH
20603: LD_INT 1
20605: PPUSH
20606: CALL_OW 12
20610: PLUS
20611: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20612: LD_ADDR_VAR 0 7
20616: PUSH
20617: LD_VAR 0 5
20621: PUSH
20622: LD_INT 1
20624: NEG
20625: PPUSH
20626: LD_INT 1
20628: PPUSH
20629: CALL_OW 12
20633: PLUS
20634: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20635: LD_VAR 0 6
20639: PPUSH
20640: LD_VAR 0 7
20644: PPUSH
20645: CALL_OW 488
20649: NOT
20650: IFFALSE 20672
// begin _x := x ;
20652: LD_ADDR_VAR 0 6
20656: PUSH
20657: LD_VAR 0 4
20661: ST_TO_ADDR
// _y := y ;
20662: LD_ADDR_VAR 0 7
20666: PUSH
20667: LD_VAR 0 5
20671: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20672: LD_ADDR_VAR 0 3
20676: PUSH
20677: LD_INT 1
20679: PPUSH
20680: LD_VAR 0 14
20684: PPUSH
20685: CALL_OW 12
20689: ST_TO_ADDR
// case i of 1 :
20690: LD_VAR 0 3
20694: PUSH
20695: LD_INT 1
20697: DOUBLE
20698: EQUAL
20699: IFTRUE 20703
20701: GO 20720
20703: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20704: LD_VAR 0 1
20708: PPUSH
20709: LD_VAR 0 10
20713: PPUSH
20714: CALL_OW 115
20718: GO 20781
20720: LD_INT 2
20722: DOUBLE
20723: EQUAL
20724: IFTRUE 20728
20726: GO 20750
20728: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20729: LD_VAR 0 1
20733: PPUSH
20734: LD_VAR 0 6
20738: PPUSH
20739: LD_VAR 0 7
20743: PPUSH
20744: CALL_OW 153
20748: GO 20781
20750: LD_INT 3
20752: DOUBLE
20753: EQUAL
20754: IFTRUE 20758
20756: GO 20780
20758: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20759: LD_VAR 0 1
20763: PPUSH
20764: LD_VAR 0 6
20768: PPUSH
20769: LD_VAR 0 7
20773: PPUSH
20774: CALL_OW 154
20778: GO 20781
20780: POP
// end ;
20781: LD_VAR 0 2
20785: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20786: LD_INT 0
20788: PPUSH
20789: PPUSH
20790: PPUSH
20791: PPUSH
20792: PPUSH
20793: PPUSH
// if not unit or not building then
20794: LD_VAR 0 1
20798: NOT
20799: PUSH
20800: LD_VAR 0 2
20804: NOT
20805: OR
20806: IFFALSE 20810
// exit ;
20808: GO 20968
// x := GetX ( building ) ;
20810: LD_ADDR_VAR 0 5
20814: PUSH
20815: LD_VAR 0 2
20819: PPUSH
20820: CALL_OW 250
20824: ST_TO_ADDR
// y := GetY ( building ) ;
20825: LD_ADDR_VAR 0 6
20829: PUSH
20830: LD_VAR 0 2
20834: PPUSH
20835: CALL_OW 251
20839: ST_TO_ADDR
// for i = 0 to 5 do
20840: LD_ADDR_VAR 0 4
20844: PUSH
20845: DOUBLE
20846: LD_INT 0
20848: DEC
20849: ST_TO_ADDR
20850: LD_INT 5
20852: PUSH
20853: FOR_TO
20854: IFFALSE 20966
// begin _x := ShiftX ( x , i , 3 ) ;
20856: LD_ADDR_VAR 0 7
20860: PUSH
20861: LD_VAR 0 5
20865: PPUSH
20866: LD_VAR 0 4
20870: PPUSH
20871: LD_INT 3
20873: PPUSH
20874: CALL_OW 272
20878: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
20879: LD_ADDR_VAR 0 8
20883: PUSH
20884: LD_VAR 0 6
20888: PPUSH
20889: LD_VAR 0 4
20893: PPUSH
20894: LD_INT 3
20896: PPUSH
20897: CALL_OW 273
20901: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20902: LD_VAR 0 7
20906: PPUSH
20907: LD_VAR 0 8
20911: PPUSH
20912: CALL_OW 488
20916: NOT
20917: IFFALSE 20921
// continue ;
20919: GO 20853
// if HexInfo ( _x , _y ) = 0 then
20921: LD_VAR 0 7
20925: PPUSH
20926: LD_VAR 0 8
20930: PPUSH
20931: CALL_OW 428
20935: PUSH
20936: LD_INT 0
20938: EQUAL
20939: IFFALSE 20964
// begin ComMoveXY ( unit , _x , _y ) ;
20941: LD_VAR 0 1
20945: PPUSH
20946: LD_VAR 0 7
20950: PPUSH
20951: LD_VAR 0 8
20955: PPUSH
20956: CALL_OW 111
// exit ;
20960: POP
20961: POP
20962: GO 20968
// end ; end ;
20964: GO 20853
20966: POP
20967: POP
// end ;
20968: LD_VAR 0 3
20972: RET
// export function ScanBase ( side , base_area ) ; begin
20973: LD_INT 0
20975: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
20976: LD_ADDR_VAR 0 3
20980: PUSH
20981: LD_VAR 0 2
20985: PPUSH
20986: LD_INT 81
20988: PUSH
20989: LD_VAR 0 1
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: PPUSH
20998: CALL_OW 70
21002: ST_TO_ADDR
// end ;
21003: LD_VAR 0 3
21007: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
21008: LD_INT 0
21010: PPUSH
21011: PPUSH
21012: PPUSH
21013: PPUSH
21014: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
21015: LD_VAR 0 1
21019: NOT
21020: PUSH
21021: LD_EXP 36
21025: PUSH
21026: LD_VAR 0 1
21030: ARRAY
21031: NOT
21032: OR
21033: PUSH
21034: LD_VAR 0 2
21038: NOT
21039: OR
21040: PUSH
21041: LD_VAR 0 3
21045: NOT
21046: OR
21047: IFFALSE 21051
// exit ;
21049: GO 21564
// side := mc_sides [ base ] ;
21051: LD_ADDR_VAR 0 6
21055: PUSH
21056: LD_EXP 62
21060: PUSH
21061: LD_VAR 0 1
21065: ARRAY
21066: ST_TO_ADDR
// if not side then
21067: LD_VAR 0 6
21071: NOT
21072: IFFALSE 21076
// exit ;
21074: GO 21564
// for i in solds do
21076: LD_ADDR_VAR 0 7
21080: PUSH
21081: LD_VAR 0 2
21085: PUSH
21086: FOR_IN
21087: IFFALSE 21148
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
21089: LD_VAR 0 7
21093: PPUSH
21094: CALL_OW 310
21098: PPUSH
21099: CALL_OW 266
21103: PUSH
21104: LD_INT 32
21106: PUSH
21107: LD_INT 31
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: IN
21114: IFFALSE 21134
// solds := solds diff i else
21116: LD_ADDR_VAR 0 2
21120: PUSH
21121: LD_VAR 0 2
21125: PUSH
21126: LD_VAR 0 7
21130: DIFF
21131: ST_TO_ADDR
21132: GO 21146
// SetTag ( i , 18 ) ;
21134: LD_VAR 0 7
21138: PPUSH
21139: LD_INT 18
21141: PPUSH
21142: CALL_OW 109
21146: GO 21086
21148: POP
21149: POP
// if not solds then
21150: LD_VAR 0 2
21154: NOT
21155: IFFALSE 21159
// exit ;
21157: GO 21564
// repeat wait ( 0 0$1 ) ;
21159: LD_INT 35
21161: PPUSH
21162: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
21166: LD_ADDR_VAR 0 5
21170: PUSH
21171: LD_VAR 0 6
21175: PPUSH
21176: LD_VAR 0 3
21180: PPUSH
21181: CALL 20973 0 2
21185: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
21186: LD_EXP 36
21190: PUSH
21191: LD_VAR 0 1
21195: ARRAY
21196: NOT
21197: PUSH
21198: LD_EXP 36
21202: PUSH
21203: LD_VAR 0 1
21207: ARRAY
21208: PUSH
21209: EMPTY
21210: EQUAL
21211: OR
21212: IFFALSE 21249
// begin for i in solds do
21214: LD_ADDR_VAR 0 7
21218: PUSH
21219: LD_VAR 0 2
21223: PUSH
21224: FOR_IN
21225: IFFALSE 21238
// ComStop ( i ) ;
21227: LD_VAR 0 7
21231: PPUSH
21232: CALL_OW 141
21236: GO 21224
21238: POP
21239: POP
// solds := [ ] ;
21240: LD_ADDR_VAR 0 2
21244: PUSH
21245: EMPTY
21246: ST_TO_ADDR
// exit ;
21247: GO 21564
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
21249: LD_VAR 0 5
21253: NOT
21254: PUSH
21255: LD_VAR 0 5
21259: PUSH
21260: LD_INT 3
21262: GREATER
21263: OR
21264: PUSH
21265: LD_EXP 58
21269: PUSH
21270: LD_VAR 0 1
21274: ARRAY
21275: OR
21276: IFFALSE 21317
// begin for i in solds do
21278: LD_ADDR_VAR 0 7
21282: PUSH
21283: LD_VAR 0 2
21287: PUSH
21288: FOR_IN
21289: IFFALSE 21313
// if HasTask ( i ) then
21291: LD_VAR 0 7
21295: PPUSH
21296: CALL_OW 314
21300: IFFALSE 21311
// ComStop ( i ) ;
21302: LD_VAR 0 7
21306: PPUSH
21307: CALL_OW 141
21311: GO 21288
21313: POP
21314: POP
// break ;
21315: GO 21552
// end ; for i in solds do
21317: LD_ADDR_VAR 0 7
21321: PUSH
21322: LD_VAR 0 2
21326: PUSH
21327: FOR_IN
21328: IFFALSE 21544
// begin if IsInUnit ( i ) then
21330: LD_VAR 0 7
21334: PPUSH
21335: CALL_OW 310
21339: IFFALSE 21350
// ComExitBuilding ( i ) ;
21341: LD_VAR 0 7
21345: PPUSH
21346: CALL_OW 122
// if GetLives ( i ) > 333 then
21350: LD_VAR 0 7
21354: PPUSH
21355: CALL_OW 256
21359: PUSH
21360: LD_INT 333
21362: GREATER
21363: IFFALSE 21391
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
21365: LD_VAR 0 7
21369: PPUSH
21370: LD_VAR 0 5
21374: PPUSH
21375: LD_VAR 0 7
21379: PPUSH
21380: CALL_OW 74
21384: PPUSH
21385: CALL_OW 115
21389: GO 21542
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
21391: LD_ADDR_VAR 0 8
21395: PUSH
21396: LD_EXP 36
21400: PUSH
21401: LD_VAR 0 1
21405: ARRAY
21406: PPUSH
21407: LD_INT 2
21409: PUSH
21410: LD_INT 30
21412: PUSH
21413: LD_INT 0
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: PUSH
21420: LD_INT 30
21422: PUSH
21423: LD_INT 1
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: PUSH
21430: LD_INT 30
21432: PUSH
21433: LD_INT 6
21435: PUSH
21436: EMPTY
21437: LIST
21438: LIST
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: PPUSH
21446: CALL_OW 72
21450: PPUSH
21451: LD_VAR 0 7
21455: PPUSH
21456: CALL_OW 74
21460: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
21461: LD_VAR 0 7
21465: PPUSH
21466: LD_VAR 0 8
21470: PPUSH
21471: CALL_OW 250
21475: PPUSH
21476: LD_INT 3
21478: PPUSH
21479: LD_INT 5
21481: PPUSH
21482: CALL_OW 272
21486: PPUSH
21487: LD_VAR 0 8
21491: PPUSH
21492: CALL_OW 251
21496: PPUSH
21497: LD_INT 3
21499: PPUSH
21500: LD_INT 5
21502: PPUSH
21503: CALL_OW 273
21507: PPUSH
21508: CALL_OW 111
// SetTag ( i , 0 ) ;
21512: LD_VAR 0 7
21516: PPUSH
21517: LD_INT 0
21519: PPUSH
21520: CALL_OW 109
// solds := solds diff i ;
21524: LD_ADDR_VAR 0 2
21528: PUSH
21529: LD_VAR 0 2
21533: PUSH
21534: LD_VAR 0 7
21538: DIFF
21539: ST_TO_ADDR
// continue ;
21540: GO 21327
// end ; end ;
21542: GO 21327
21544: POP
21545: POP
// until solds ;
21546: LD_VAR 0 2
21550: IFFALSE 21159
// MC_Reset ( base , 18 ) ;
21552: LD_VAR 0 1
21556: PPUSH
21557: LD_INT 18
21559: PPUSH
21560: CALL 66656 0 2
// end ;
21564: LD_VAR 0 4
21568: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
21569: LD_INT 0
21571: PPUSH
21572: PPUSH
21573: PPUSH
21574: PPUSH
21575: PPUSH
21576: PPUSH
21577: PPUSH
21578: PPUSH
21579: PPUSH
21580: PPUSH
21581: PPUSH
21582: PPUSH
21583: PPUSH
21584: PPUSH
21585: PPUSH
21586: PPUSH
21587: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
21588: LD_ADDR_VAR 0 13
21592: PUSH
21593: LD_EXP 36
21597: PUSH
21598: LD_VAR 0 1
21602: ARRAY
21603: PPUSH
21604: LD_INT 25
21606: PUSH
21607: LD_INT 3
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PPUSH
21614: CALL_OW 72
21618: ST_TO_ADDR
// if mc_remote_driver [ base ] then
21619: LD_EXP 76
21623: PUSH
21624: LD_VAR 0 1
21628: ARRAY
21629: IFFALSE 21653
// mechs := mechs diff mc_remote_driver [ base ] ;
21631: LD_ADDR_VAR 0 13
21635: PUSH
21636: LD_VAR 0 13
21640: PUSH
21641: LD_EXP 76
21645: PUSH
21646: LD_VAR 0 1
21650: ARRAY
21651: DIFF
21652: ST_TO_ADDR
// for i in mechs do
21653: LD_ADDR_VAR 0 5
21657: PUSH
21658: LD_VAR 0 13
21662: PUSH
21663: FOR_IN
21664: IFFALSE 21699
// if GetTag ( i ) > 0 then
21666: LD_VAR 0 5
21670: PPUSH
21671: CALL_OW 110
21675: PUSH
21676: LD_INT 0
21678: GREATER
21679: IFFALSE 21697
// mechs := mechs diff i ;
21681: LD_ADDR_VAR 0 13
21685: PUSH
21686: LD_VAR 0 13
21690: PUSH
21691: LD_VAR 0 5
21695: DIFF
21696: ST_TO_ADDR
21697: GO 21663
21699: POP
21700: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
21701: LD_ADDR_VAR 0 9
21705: PUSH
21706: LD_EXP 36
21710: PUSH
21711: LD_VAR 0 1
21715: ARRAY
21716: PPUSH
21717: LD_INT 2
21719: PUSH
21720: LD_INT 25
21722: PUSH
21723: LD_INT 1
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PUSH
21730: LD_INT 25
21732: PUSH
21733: LD_INT 5
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 25
21742: PUSH
21743: LD_INT 8
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 25
21752: PUSH
21753: LD_INT 9
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: PPUSH
21767: CALL_OW 72
21771: ST_TO_ADDR
// if not defenders and not solds then
21772: LD_VAR 0 2
21776: NOT
21777: PUSH
21778: LD_VAR 0 9
21782: NOT
21783: AND
21784: IFFALSE 21788
// exit ;
21786: GO 23414
// depot_under_attack := false ;
21788: LD_ADDR_VAR 0 17
21792: PUSH
21793: LD_INT 0
21795: ST_TO_ADDR
// sold_defenders := [ ] ;
21796: LD_ADDR_VAR 0 18
21800: PUSH
21801: EMPTY
21802: ST_TO_ADDR
// if mechs then
21803: LD_VAR 0 13
21807: IFFALSE 21936
// for i in defenders do
21809: LD_ADDR_VAR 0 5
21813: PUSH
21814: LD_VAR 0 2
21818: PUSH
21819: FOR_IN
21820: IFFALSE 21934
// begin SetTag ( i , 20 ) ;
21822: LD_VAR 0 5
21826: PPUSH
21827: LD_INT 20
21829: PPUSH
21830: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
21834: LD_VAR 0 5
21838: PPUSH
21839: CALL_OW 263
21843: PUSH
21844: LD_INT 1
21846: EQUAL
21847: PUSH
21848: LD_VAR 0 5
21852: PPUSH
21853: CALL_OW 311
21857: NOT
21858: AND
21859: PUSH
21860: LD_VAR 0 13
21864: AND
21865: IFFALSE 21932
// begin un := mechs [ 1 ] ;
21867: LD_ADDR_VAR 0 11
21871: PUSH
21872: LD_VAR 0 13
21876: PUSH
21877: LD_INT 1
21879: ARRAY
21880: ST_TO_ADDR
// ComExitBuilding ( un ) ;
21881: LD_VAR 0 11
21885: PPUSH
21886: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
21890: LD_VAR 0 11
21894: PPUSH
21895: LD_VAR 0 5
21899: PPUSH
21900: CALL_OW 180
// SetTag ( un , 19 ) ;
21904: LD_VAR 0 11
21908: PPUSH
21909: LD_INT 19
21911: PPUSH
21912: CALL_OW 109
// mechs := mechs diff un ;
21916: LD_ADDR_VAR 0 13
21920: PUSH
21921: LD_VAR 0 13
21925: PUSH
21926: LD_VAR 0 11
21930: DIFF
21931: ST_TO_ADDR
// end ; end ;
21932: GO 21819
21934: POP
21935: POP
// if solds then
21936: LD_VAR 0 9
21940: IFFALSE 21999
// for i in solds do
21942: LD_ADDR_VAR 0 5
21946: PUSH
21947: LD_VAR 0 9
21951: PUSH
21952: FOR_IN
21953: IFFALSE 21997
// if not GetTag ( i ) then
21955: LD_VAR 0 5
21959: PPUSH
21960: CALL_OW 110
21964: NOT
21965: IFFALSE 21995
// begin defenders := defenders union i ;
21967: LD_ADDR_VAR 0 2
21971: PUSH
21972: LD_VAR 0 2
21976: PUSH
21977: LD_VAR 0 5
21981: UNION
21982: ST_TO_ADDR
// SetTag ( i , 18 ) ;
21983: LD_VAR 0 5
21987: PPUSH
21988: LD_INT 18
21990: PPUSH
21991: CALL_OW 109
// end ;
21995: GO 21952
21997: POP
21998: POP
// repeat wait ( 0 0$1 ) ;
21999: LD_INT 35
22001: PPUSH
22002: CALL_OW 67
// enemy := mc_scan [ base ] ;
22006: LD_ADDR_VAR 0 3
22010: PUSH
22011: LD_EXP 59
22015: PUSH
22016: LD_VAR 0 1
22020: ARRAY
22021: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
22022: LD_EXP 36
22026: PUSH
22027: LD_VAR 0 1
22031: ARRAY
22032: NOT
22033: PUSH
22034: LD_EXP 36
22038: PUSH
22039: LD_VAR 0 1
22043: ARRAY
22044: PUSH
22045: EMPTY
22046: EQUAL
22047: OR
22048: IFFALSE 22085
// begin for i in defenders do
22050: LD_ADDR_VAR 0 5
22054: PUSH
22055: LD_VAR 0 2
22059: PUSH
22060: FOR_IN
22061: IFFALSE 22074
// ComStop ( i ) ;
22063: LD_VAR 0 5
22067: PPUSH
22068: CALL_OW 141
22072: GO 22060
22074: POP
22075: POP
// defenders := [ ] ;
22076: LD_ADDR_VAR 0 2
22080: PUSH
22081: EMPTY
22082: ST_TO_ADDR
// exit ;
22083: GO 23414
// end ; for i in defenders do
22085: LD_ADDR_VAR 0 5
22089: PUSH
22090: LD_VAR 0 2
22094: PUSH
22095: FOR_IN
22096: IFFALSE 22914
// begin e := NearestUnitToUnit ( enemy , i ) ;
22098: LD_ADDR_VAR 0 14
22102: PUSH
22103: LD_VAR 0 3
22107: PPUSH
22108: LD_VAR 0 5
22112: PPUSH
22113: CALL_OW 74
22117: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
22118: LD_ADDR_VAR 0 8
22122: PUSH
22123: LD_EXP 36
22127: PUSH
22128: LD_VAR 0 1
22132: ARRAY
22133: PPUSH
22134: LD_INT 2
22136: PUSH
22137: LD_INT 30
22139: PUSH
22140: LD_INT 0
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: LD_INT 30
22149: PUSH
22150: LD_INT 1
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: LIST
22161: PPUSH
22162: CALL_OW 72
22166: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
22167: LD_ADDR_VAR 0 17
22171: PUSH
22172: LD_VAR 0 8
22176: NOT
22177: PUSH
22178: LD_VAR 0 8
22182: PPUSH
22183: LD_INT 3
22185: PUSH
22186: LD_INT 24
22188: PUSH
22189: LD_INT 600
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: PPUSH
22200: CALL_OW 72
22204: OR
22205: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
22206: LD_VAR 0 5
22210: PPUSH
22211: CALL_OW 247
22215: PUSH
22216: LD_INT 2
22218: DOUBLE
22219: EQUAL
22220: IFTRUE 22224
22222: GO 22620
22224: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
22225: LD_VAR 0 5
22229: PPUSH
22230: CALL_OW 256
22234: PUSH
22235: LD_INT 650
22237: GREATER
22238: PUSH
22239: LD_VAR 0 5
22243: PPUSH
22244: LD_VAR 0 14
22248: PPUSH
22249: CALL_OW 296
22253: PUSH
22254: LD_INT 40
22256: LESS
22257: PUSH
22258: LD_VAR 0 14
22262: PPUSH
22263: LD_EXP 61
22267: PUSH
22268: LD_VAR 0 1
22272: ARRAY
22273: PPUSH
22274: CALL_OW 308
22278: OR
22279: AND
22280: IFFALSE 22402
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
22282: LD_VAR 0 5
22286: PPUSH
22287: CALL_OW 262
22291: PUSH
22292: LD_INT 1
22294: EQUAL
22295: PUSH
22296: LD_VAR 0 5
22300: PPUSH
22301: CALL_OW 261
22305: PUSH
22306: LD_INT 30
22308: LESS
22309: AND
22310: PUSH
22311: LD_VAR 0 8
22315: AND
22316: IFFALSE 22386
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
22318: LD_VAR 0 5
22322: PPUSH
22323: LD_VAR 0 8
22327: PPUSH
22328: LD_VAR 0 5
22332: PPUSH
22333: CALL_OW 74
22337: PPUSH
22338: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
22342: LD_VAR 0 5
22346: PPUSH
22347: LD_VAR 0 8
22351: PPUSH
22352: LD_VAR 0 5
22356: PPUSH
22357: CALL_OW 74
22361: PPUSH
22362: CALL_OW 296
22366: PUSH
22367: LD_INT 6
22369: LESS
22370: IFFALSE 22384
// SetFuel ( i , 100 ) ;
22372: LD_VAR 0 5
22376: PPUSH
22377: LD_INT 100
22379: PPUSH
22380: CALL_OW 240
// end else
22384: GO 22400
// ComAttackUnit ( i , e ) ;
22386: LD_VAR 0 5
22390: PPUSH
22391: LD_VAR 0 14
22395: PPUSH
22396: CALL_OW 115
// end else
22400: GO 22503
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
22402: LD_VAR 0 14
22406: PPUSH
22407: LD_EXP 61
22411: PUSH
22412: LD_VAR 0 1
22416: ARRAY
22417: PPUSH
22418: CALL_OW 308
22422: NOT
22423: PUSH
22424: LD_VAR 0 5
22428: PPUSH
22429: LD_VAR 0 14
22433: PPUSH
22434: CALL_OW 296
22438: PUSH
22439: LD_INT 40
22441: GREATEREQUAL
22442: AND
22443: PUSH
22444: LD_VAR 0 5
22448: PPUSH
22449: CALL_OW 256
22453: PUSH
22454: LD_INT 650
22456: LESSEQUAL
22457: OR
22458: PUSH
22459: LD_VAR 0 5
22463: PPUSH
22464: LD_EXP 60
22468: PUSH
22469: LD_VAR 0 1
22473: ARRAY
22474: PPUSH
22475: CALL_OW 308
22479: NOT
22480: AND
22481: IFFALSE 22503
// ComMoveToArea ( i , mc_parking [ base ] ) ;
22483: LD_VAR 0 5
22487: PPUSH
22488: LD_EXP 60
22492: PUSH
22493: LD_VAR 0 1
22497: ARRAY
22498: PPUSH
22499: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
22503: LD_VAR 0 5
22507: PPUSH
22508: CALL_OW 256
22512: PUSH
22513: LD_INT 998
22515: LESS
22516: PUSH
22517: LD_VAR 0 5
22521: PPUSH
22522: CALL_OW 263
22526: PUSH
22527: LD_INT 1
22529: EQUAL
22530: AND
22531: PUSH
22532: LD_VAR 0 5
22536: PPUSH
22537: CALL_OW 311
22541: AND
22542: PUSH
22543: LD_VAR 0 5
22547: PPUSH
22548: LD_EXP 60
22552: PUSH
22553: LD_VAR 0 1
22557: ARRAY
22558: PPUSH
22559: CALL_OW 308
22563: AND
22564: IFFALSE 22618
// begin mech := IsDrivenBy ( i ) ;
22566: LD_ADDR_VAR 0 10
22570: PUSH
22571: LD_VAR 0 5
22575: PPUSH
22576: CALL_OW 311
22580: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
22581: LD_VAR 0 10
22585: PPUSH
22586: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
22590: LD_VAR 0 10
22594: PPUSH
22595: LD_VAR 0 5
22599: PPUSH
22600: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
22604: LD_VAR 0 10
22608: PPUSH
22609: LD_VAR 0 5
22613: PPUSH
22614: CALL_OW 180
// end ; end ; unit_human :
22618: GO 22885
22620: LD_INT 1
22622: DOUBLE
22623: EQUAL
22624: IFTRUE 22628
22626: GO 22884
22628: POP
// begin b := IsInUnit ( i ) ;
22629: LD_ADDR_VAR 0 19
22633: PUSH
22634: LD_VAR 0 5
22638: PPUSH
22639: CALL_OW 310
22643: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
22644: LD_ADDR_VAR 0 20
22648: PUSH
22649: LD_VAR 0 19
22653: NOT
22654: PUSH
22655: LD_VAR 0 19
22659: PPUSH
22660: CALL_OW 266
22664: PUSH
22665: LD_INT 32
22667: PUSH
22668: LD_INT 31
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: IN
22675: OR
22676: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
22677: LD_VAR 0 17
22681: PUSH
22682: LD_VAR 0 2
22686: PPUSH
22687: LD_INT 21
22689: PUSH
22690: LD_INT 2
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PPUSH
22697: CALL_OW 72
22701: PUSH
22702: LD_INT 1
22704: LESSEQUAL
22705: OR
22706: PUSH
22707: LD_VAR 0 20
22711: AND
22712: PUSH
22713: LD_VAR 0 5
22717: PUSH
22718: LD_VAR 0 18
22722: IN
22723: NOT
22724: AND
22725: IFFALSE 22818
// begin if b then
22727: LD_VAR 0 19
22731: IFFALSE 22780
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
22733: LD_VAR 0 19
22737: PPUSH
22738: LD_VAR 0 3
22742: PPUSH
22743: LD_VAR 0 19
22747: PPUSH
22748: CALL_OW 74
22752: PPUSH
22753: CALL_OW 296
22757: PUSH
22758: LD_INT 10
22760: LESS
22761: PUSH
22762: LD_VAR 0 19
22766: PPUSH
22767: CALL_OW 461
22771: PUSH
22772: LD_INT 7
22774: NONEQUAL
22775: AND
22776: IFFALSE 22780
// continue ;
22778: GO 22095
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
22780: LD_ADDR_VAR 0 18
22784: PUSH
22785: LD_VAR 0 18
22789: PPUSH
22790: LD_VAR 0 18
22794: PUSH
22795: LD_INT 1
22797: PLUS
22798: PPUSH
22799: LD_VAR 0 5
22803: PPUSH
22804: CALL_OW 1
22808: ST_TO_ADDR
// ComExitBuilding ( i ) ;
22809: LD_VAR 0 5
22813: PPUSH
22814: CALL_OW 122
// end ; if sold_defenders then
22818: LD_VAR 0 18
22822: IFFALSE 22882
// if i in sold_defenders then
22824: LD_VAR 0 5
22828: PUSH
22829: LD_VAR 0 18
22833: IN
22834: IFFALSE 22882
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
22836: LD_VAR 0 5
22840: PPUSH
22841: CALL_OW 314
22845: NOT
22846: PUSH
22847: LD_VAR 0 5
22851: PPUSH
22852: LD_VAR 0 14
22856: PPUSH
22857: CALL_OW 296
22861: PUSH
22862: LD_INT 30
22864: LESS
22865: AND
22866: IFFALSE 22882
// ComAttackUnit ( i , e ) ;
22868: LD_VAR 0 5
22872: PPUSH
22873: LD_VAR 0 14
22877: PPUSH
22878: CALL_OW 115
// end ; end ; end ;
22882: GO 22885
22884: POP
// if IsDead ( i ) then
22885: LD_VAR 0 5
22889: PPUSH
22890: CALL_OW 301
22894: IFFALSE 22912
// defenders := defenders diff i ;
22896: LD_ADDR_VAR 0 2
22900: PUSH
22901: LD_VAR 0 2
22905: PUSH
22906: LD_VAR 0 5
22910: DIFF
22911: ST_TO_ADDR
// end ;
22912: GO 22095
22914: POP
22915: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
22916: LD_VAR 0 3
22920: NOT
22921: PUSH
22922: LD_VAR 0 2
22926: NOT
22927: OR
22928: PUSH
22929: LD_EXP 36
22933: PUSH
22934: LD_VAR 0 1
22938: ARRAY
22939: NOT
22940: OR
22941: IFFALSE 21999
// MC_Reset ( base , 18 ) ;
22943: LD_VAR 0 1
22947: PPUSH
22948: LD_INT 18
22950: PPUSH
22951: CALL 66656 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
22955: LD_ADDR_VAR 0 2
22959: PUSH
22960: LD_VAR 0 2
22964: PUSH
22965: LD_VAR 0 2
22969: PPUSH
22970: LD_INT 2
22972: PUSH
22973: LD_INT 25
22975: PUSH
22976: LD_INT 1
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: PUSH
22983: LD_INT 25
22985: PUSH
22986: LD_INT 5
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 25
22995: PUSH
22996: LD_INT 8
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: PUSH
23003: LD_INT 25
23005: PUSH
23006: LD_INT 9
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: PPUSH
23020: CALL_OW 72
23024: DIFF
23025: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
23026: LD_VAR 0 3
23030: NOT
23031: PUSH
23032: LD_VAR 0 2
23036: PPUSH
23037: LD_INT 21
23039: PUSH
23040: LD_INT 2
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PPUSH
23047: CALL_OW 72
23051: AND
23052: IFFALSE 23390
// begin tmp := FilterByTag ( defenders , 19 ) ;
23054: LD_ADDR_VAR 0 12
23058: PUSH
23059: LD_VAR 0 2
23063: PPUSH
23064: LD_INT 19
23066: PPUSH
23067: CALL 59869 0 2
23071: ST_TO_ADDR
// if tmp then
23072: LD_VAR 0 12
23076: IFFALSE 23146
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
23078: LD_ADDR_VAR 0 12
23082: PUSH
23083: LD_VAR 0 12
23087: PPUSH
23088: LD_INT 25
23090: PUSH
23091: LD_INT 3
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PPUSH
23098: CALL_OW 72
23102: ST_TO_ADDR
// if tmp then
23103: LD_VAR 0 12
23107: IFFALSE 23146
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
23109: LD_ADDR_EXP 48
23113: PUSH
23114: LD_EXP 48
23118: PPUSH
23119: LD_VAR 0 1
23123: PPUSH
23124: LD_EXP 48
23128: PUSH
23129: LD_VAR 0 1
23133: ARRAY
23134: PUSH
23135: LD_VAR 0 12
23139: UNION
23140: PPUSH
23141: CALL_OW 1
23145: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
23146: LD_VAR 0 1
23150: PPUSH
23151: LD_INT 19
23153: PPUSH
23154: CALL 66656 0 2
// repeat wait ( 0 0$1 ) ;
23158: LD_INT 35
23160: PPUSH
23161: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
23165: LD_EXP 36
23169: PUSH
23170: LD_VAR 0 1
23174: ARRAY
23175: NOT
23176: PUSH
23177: LD_EXP 36
23181: PUSH
23182: LD_VAR 0 1
23186: ARRAY
23187: PUSH
23188: EMPTY
23189: EQUAL
23190: OR
23191: IFFALSE 23228
// begin for i in defenders do
23193: LD_ADDR_VAR 0 5
23197: PUSH
23198: LD_VAR 0 2
23202: PUSH
23203: FOR_IN
23204: IFFALSE 23217
// ComStop ( i ) ;
23206: LD_VAR 0 5
23210: PPUSH
23211: CALL_OW 141
23215: GO 23203
23217: POP
23218: POP
// defenders := [ ] ;
23219: LD_ADDR_VAR 0 2
23223: PUSH
23224: EMPTY
23225: ST_TO_ADDR
// exit ;
23226: GO 23414
// end ; for i in defenders do
23228: LD_ADDR_VAR 0 5
23232: PUSH
23233: LD_VAR 0 2
23237: PUSH
23238: FOR_IN
23239: IFFALSE 23328
// begin if not IsInArea ( i , mc_parking [ base ] ) then
23241: LD_VAR 0 5
23245: PPUSH
23246: LD_EXP 60
23250: PUSH
23251: LD_VAR 0 1
23255: ARRAY
23256: PPUSH
23257: CALL_OW 308
23261: NOT
23262: IFFALSE 23286
// ComMoveToArea ( i , mc_parking [ base ] ) else
23264: LD_VAR 0 5
23268: PPUSH
23269: LD_EXP 60
23273: PUSH
23274: LD_VAR 0 1
23278: ARRAY
23279: PPUSH
23280: CALL_OW 113
23284: GO 23326
// if GetControl ( i ) = control_manual then
23286: LD_VAR 0 5
23290: PPUSH
23291: CALL_OW 263
23295: PUSH
23296: LD_INT 1
23298: EQUAL
23299: IFFALSE 23326
// if IsDrivenBy ( i ) then
23301: LD_VAR 0 5
23305: PPUSH
23306: CALL_OW 311
23310: IFFALSE 23326
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
23312: LD_VAR 0 5
23316: PPUSH
23317: CALL_OW 311
23321: PPUSH
23322: CALL_OW 121
// end ;
23326: GO 23238
23328: POP
23329: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
23330: LD_VAR 0 2
23334: PPUSH
23335: LD_INT 95
23337: PUSH
23338: LD_EXP 60
23342: PUSH
23343: LD_VAR 0 1
23347: ARRAY
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PPUSH
23353: CALL_OW 72
23357: PUSH
23358: LD_VAR 0 2
23362: EQUAL
23363: PUSH
23364: LD_EXP 59
23368: PUSH
23369: LD_VAR 0 1
23373: ARRAY
23374: OR
23375: PUSH
23376: LD_EXP 36
23380: PUSH
23381: LD_VAR 0 1
23385: ARRAY
23386: NOT
23387: OR
23388: IFFALSE 23158
// end ; MC_Reset ( base , 19 ) ;
23390: LD_VAR 0 1
23394: PPUSH
23395: LD_INT 19
23397: PPUSH
23398: CALL 66656 0 2
// MC_Reset ( base , 20 ) ;
23402: LD_VAR 0 1
23406: PPUSH
23407: LD_INT 20
23409: PPUSH
23410: CALL 66656 0 2
// end ;
23414: LD_VAR 0 4
23418: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23419: LD_INT 0
23421: PPUSH
23422: PPUSH
23423: PPUSH
23424: PPUSH
// result := false ;
23425: LD_ADDR_VAR 0 2
23429: PUSH
23430: LD_INT 0
23432: ST_TO_ADDR
// side := GetSide ( unit ) ;
23433: LD_ADDR_VAR 0 3
23437: PUSH
23438: LD_VAR 0 1
23442: PPUSH
23443: CALL_OW 255
23447: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23448: LD_ADDR_VAR 0 4
23452: PUSH
23453: LD_VAR 0 1
23457: PPUSH
23458: CALL_OW 248
23462: ST_TO_ADDR
// case nat of 1 :
23463: LD_VAR 0 4
23467: PUSH
23468: LD_INT 1
23470: DOUBLE
23471: EQUAL
23472: IFTRUE 23476
23474: GO 23487
23476: POP
// tech := tech_lassight ; 2 :
23477: LD_ADDR_VAR 0 5
23481: PUSH
23482: LD_INT 12
23484: ST_TO_ADDR
23485: GO 23526
23487: LD_INT 2
23489: DOUBLE
23490: EQUAL
23491: IFTRUE 23495
23493: GO 23506
23495: POP
// tech := tech_mortar ; 3 :
23496: LD_ADDR_VAR 0 5
23500: PUSH
23501: LD_INT 41
23503: ST_TO_ADDR
23504: GO 23526
23506: LD_INT 3
23508: DOUBLE
23509: EQUAL
23510: IFTRUE 23514
23512: GO 23525
23514: POP
// tech := tech_bazooka ; end ;
23515: LD_ADDR_VAR 0 5
23519: PUSH
23520: LD_INT 44
23522: ST_TO_ADDR
23523: GO 23526
23525: POP
// if Researched ( side , tech ) then
23526: LD_VAR 0 3
23530: PPUSH
23531: LD_VAR 0 5
23535: PPUSH
23536: CALL_OW 325
23540: IFFALSE 23567
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23542: LD_ADDR_VAR 0 2
23546: PUSH
23547: LD_INT 5
23549: PUSH
23550: LD_INT 8
23552: PUSH
23553: LD_INT 9
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: LIST
23560: PUSH
23561: LD_VAR 0 4
23565: ARRAY
23566: ST_TO_ADDR
// end ;
23567: LD_VAR 0 2
23571: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23572: LD_INT 0
23574: PPUSH
23575: PPUSH
23576: PPUSH
// if not mines then
23577: LD_VAR 0 2
23581: NOT
23582: IFFALSE 23586
// exit ;
23584: GO 23730
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23586: LD_ADDR_VAR 0 5
23590: PUSH
23591: LD_INT 81
23593: PUSH
23594: LD_VAR 0 1
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: LD_INT 3
23605: PUSH
23606: LD_INT 21
23608: PUSH
23609: LD_INT 3
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PPUSH
23624: CALL_OW 69
23628: ST_TO_ADDR
// for i in mines do
23629: LD_ADDR_VAR 0 4
23633: PUSH
23634: LD_VAR 0 2
23638: PUSH
23639: FOR_IN
23640: IFFALSE 23728
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23642: LD_VAR 0 4
23646: PUSH
23647: LD_INT 1
23649: ARRAY
23650: PPUSH
23651: LD_VAR 0 4
23655: PUSH
23656: LD_INT 2
23658: ARRAY
23659: PPUSH
23660: CALL_OW 458
23664: NOT
23665: IFFALSE 23669
// continue ;
23667: GO 23639
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23669: LD_VAR 0 4
23673: PUSH
23674: LD_INT 1
23676: ARRAY
23677: PPUSH
23678: LD_VAR 0 4
23682: PUSH
23683: LD_INT 2
23685: ARRAY
23686: PPUSH
23687: CALL_OW 428
23691: PUSH
23692: LD_VAR 0 5
23696: IN
23697: IFFALSE 23726
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23699: LD_VAR 0 4
23703: PUSH
23704: LD_INT 1
23706: ARRAY
23707: PPUSH
23708: LD_VAR 0 4
23712: PUSH
23713: LD_INT 2
23715: ARRAY
23716: PPUSH
23717: LD_VAR 0 1
23721: PPUSH
23722: CALL_OW 456
// end ;
23726: GO 23639
23728: POP
23729: POP
// end ;
23730: LD_VAR 0 3
23734: RET
// export function Count ( array ) ; var i ; begin
23735: LD_INT 0
23737: PPUSH
23738: PPUSH
// result := 0 ;
23739: LD_ADDR_VAR 0 2
23743: PUSH
23744: LD_INT 0
23746: ST_TO_ADDR
// for i in array do
23747: LD_ADDR_VAR 0 3
23751: PUSH
23752: LD_VAR 0 1
23756: PUSH
23757: FOR_IN
23758: IFFALSE 23782
// if i then
23760: LD_VAR 0 3
23764: IFFALSE 23780
// result := result + 1 ;
23766: LD_ADDR_VAR 0 2
23770: PUSH
23771: LD_VAR 0 2
23775: PUSH
23776: LD_INT 1
23778: PLUS
23779: ST_TO_ADDR
23780: GO 23757
23782: POP
23783: POP
// end ;
23784: LD_VAR 0 2
23788: RET
// export function IsEmpty ( building ) ; begin
23789: LD_INT 0
23791: PPUSH
// if not building then
23792: LD_VAR 0 1
23796: NOT
23797: IFFALSE 23801
// exit ;
23799: GO 23844
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23801: LD_ADDR_VAR 0 2
23805: PUSH
23806: LD_VAR 0 1
23810: PUSH
23811: LD_INT 22
23813: PUSH
23814: LD_VAR 0 1
23818: PPUSH
23819: CALL_OW 255
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 58
23830: PUSH
23831: EMPTY
23832: LIST
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: PPUSH
23838: CALL_OW 69
23842: IN
23843: ST_TO_ADDR
// end ;
23844: LD_VAR 0 2
23848: RET
// export function IsNotFull ( building ) ; begin
23849: LD_INT 0
23851: PPUSH
// if not building then
23852: LD_VAR 0 1
23856: NOT
23857: IFFALSE 23861
// exit ;
23859: GO 23880
// result := UnitsInside ( building ) < 6 ;
23861: LD_ADDR_VAR 0 2
23865: PUSH
23866: LD_VAR 0 1
23870: PPUSH
23871: CALL_OW 313
23875: PUSH
23876: LD_INT 6
23878: LESS
23879: ST_TO_ADDR
// end ;
23880: LD_VAR 0 2
23884: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23885: LD_INT 0
23887: PPUSH
23888: PPUSH
23889: PPUSH
23890: PPUSH
// tmp := [ ] ;
23891: LD_ADDR_VAR 0 3
23895: PUSH
23896: EMPTY
23897: ST_TO_ADDR
// list := [ ] ;
23898: LD_ADDR_VAR 0 5
23902: PUSH
23903: EMPTY
23904: ST_TO_ADDR
// for i = 16 to 25 do
23905: LD_ADDR_VAR 0 4
23909: PUSH
23910: DOUBLE
23911: LD_INT 16
23913: DEC
23914: ST_TO_ADDR
23915: LD_INT 25
23917: PUSH
23918: FOR_TO
23919: IFFALSE 23992
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23921: LD_ADDR_VAR 0 3
23925: PUSH
23926: LD_VAR 0 3
23930: PUSH
23931: LD_INT 22
23933: PUSH
23934: LD_VAR 0 1
23938: PPUSH
23939: CALL_OW 255
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 91
23950: PUSH
23951: LD_VAR 0 1
23955: PUSH
23956: LD_INT 6
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 30
23966: PUSH
23967: LD_VAR 0 4
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: LIST
23980: PUSH
23981: EMPTY
23982: LIST
23983: PPUSH
23984: CALL_OW 69
23988: ADD
23989: ST_TO_ADDR
23990: GO 23918
23992: POP
23993: POP
// for i = 1 to tmp do
23994: LD_ADDR_VAR 0 4
23998: PUSH
23999: DOUBLE
24000: LD_INT 1
24002: DEC
24003: ST_TO_ADDR
24004: LD_VAR 0 3
24008: PUSH
24009: FOR_TO
24010: IFFALSE 24098
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24012: LD_ADDR_VAR 0 5
24016: PUSH
24017: LD_VAR 0 5
24021: PUSH
24022: LD_VAR 0 3
24026: PUSH
24027: LD_VAR 0 4
24031: ARRAY
24032: PPUSH
24033: CALL_OW 266
24037: PUSH
24038: LD_VAR 0 3
24042: PUSH
24043: LD_VAR 0 4
24047: ARRAY
24048: PPUSH
24049: CALL_OW 250
24053: PUSH
24054: LD_VAR 0 3
24058: PUSH
24059: LD_VAR 0 4
24063: ARRAY
24064: PPUSH
24065: CALL_OW 251
24069: PUSH
24070: LD_VAR 0 3
24074: PUSH
24075: LD_VAR 0 4
24079: ARRAY
24080: PPUSH
24081: CALL_OW 254
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: PUSH
24092: EMPTY
24093: LIST
24094: ADD
24095: ST_TO_ADDR
24096: GO 24009
24098: POP
24099: POP
// result := list ;
24100: LD_ADDR_VAR 0 2
24104: PUSH
24105: LD_VAR 0 5
24109: ST_TO_ADDR
// end ;
24110: LD_VAR 0 2
24114: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24115: LD_INT 0
24117: PPUSH
24118: PPUSH
24119: PPUSH
24120: PPUSH
24121: PPUSH
24122: PPUSH
24123: PPUSH
// if not factory then
24124: LD_VAR 0 1
24128: NOT
24129: IFFALSE 24133
// exit ;
24131: GO 24726
// if control = control_apeman then
24133: LD_VAR 0 4
24137: PUSH
24138: LD_INT 5
24140: EQUAL
24141: IFFALSE 24250
// begin tmp := UnitsInside ( factory ) ;
24143: LD_ADDR_VAR 0 8
24147: PUSH
24148: LD_VAR 0 1
24152: PPUSH
24153: CALL_OW 313
24157: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24158: LD_VAR 0 8
24162: PPUSH
24163: LD_INT 25
24165: PUSH
24166: LD_INT 12
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: PPUSH
24173: CALL_OW 72
24177: NOT
24178: IFFALSE 24188
// control := control_manual ;
24180: LD_ADDR_VAR 0 4
24184: PUSH
24185: LD_INT 1
24187: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24188: LD_ADDR_VAR 0 8
24192: PUSH
24193: LD_VAR 0 1
24197: PPUSH
24198: CALL 23885 0 1
24202: ST_TO_ADDR
// if tmp then
24203: LD_VAR 0 8
24207: IFFALSE 24250
// begin for i in tmp do
24209: LD_ADDR_VAR 0 7
24213: PUSH
24214: LD_VAR 0 8
24218: PUSH
24219: FOR_IN
24220: IFFALSE 24248
// if i [ 1 ] = b_ext_radio then
24222: LD_VAR 0 7
24226: PUSH
24227: LD_INT 1
24229: ARRAY
24230: PUSH
24231: LD_INT 22
24233: EQUAL
24234: IFFALSE 24246
// begin control := control_remote ;
24236: LD_ADDR_VAR 0 4
24240: PUSH
24241: LD_INT 2
24243: ST_TO_ADDR
// break ;
24244: GO 24248
// end ;
24246: GO 24219
24248: POP
24249: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24250: LD_VAR 0 1
24254: PPUSH
24255: LD_VAR 0 2
24259: PPUSH
24260: LD_VAR 0 3
24264: PPUSH
24265: LD_VAR 0 4
24269: PPUSH
24270: LD_VAR 0 5
24274: PPUSH
24275: CALL_OW 448
24279: IFFALSE 24314
// begin result := [ chassis , engine , control , weapon ] ;
24281: LD_ADDR_VAR 0 6
24285: PUSH
24286: LD_VAR 0 2
24290: PUSH
24291: LD_VAR 0 3
24295: PUSH
24296: LD_VAR 0 4
24300: PUSH
24301: LD_VAR 0 5
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: ST_TO_ADDR
// exit ;
24312: GO 24726
// end ; _chassis := AvailableChassisList ( factory ) ;
24314: LD_ADDR_VAR 0 9
24318: PUSH
24319: LD_VAR 0 1
24323: PPUSH
24324: CALL_OW 475
24328: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24329: LD_ADDR_VAR 0 11
24333: PUSH
24334: LD_VAR 0 1
24338: PPUSH
24339: CALL_OW 476
24343: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24344: LD_ADDR_VAR 0 12
24348: PUSH
24349: LD_VAR 0 1
24353: PPUSH
24354: CALL_OW 477
24358: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24359: LD_ADDR_VAR 0 10
24363: PUSH
24364: LD_VAR 0 1
24368: PPUSH
24369: CALL_OW 478
24373: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24374: LD_VAR 0 9
24378: NOT
24379: PUSH
24380: LD_VAR 0 11
24384: NOT
24385: OR
24386: PUSH
24387: LD_VAR 0 12
24391: NOT
24392: OR
24393: PUSH
24394: LD_VAR 0 10
24398: NOT
24399: OR
24400: IFFALSE 24435
// begin result := [ chassis , engine , control , weapon ] ;
24402: LD_ADDR_VAR 0 6
24406: PUSH
24407: LD_VAR 0 2
24411: PUSH
24412: LD_VAR 0 3
24416: PUSH
24417: LD_VAR 0 4
24421: PUSH
24422: LD_VAR 0 5
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: ST_TO_ADDR
// exit ;
24433: GO 24726
// end ; if not chassis in _chassis then
24435: LD_VAR 0 2
24439: PUSH
24440: LD_VAR 0 9
24444: IN
24445: NOT
24446: IFFALSE 24472
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24448: LD_ADDR_VAR 0 2
24452: PUSH
24453: LD_VAR 0 9
24457: PUSH
24458: LD_INT 1
24460: PPUSH
24461: LD_VAR 0 9
24465: PPUSH
24466: CALL_OW 12
24470: ARRAY
24471: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24472: LD_VAR 0 2
24476: PPUSH
24477: LD_VAR 0 3
24481: PPUSH
24482: CALL 24731 0 2
24486: NOT
24487: IFFALSE 24546
// repeat engine := _engine [ 1 ] ;
24489: LD_ADDR_VAR 0 3
24493: PUSH
24494: LD_VAR 0 11
24498: PUSH
24499: LD_INT 1
24501: ARRAY
24502: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24503: LD_ADDR_VAR 0 11
24507: PUSH
24508: LD_VAR 0 11
24512: PPUSH
24513: LD_INT 1
24515: PPUSH
24516: CALL_OW 3
24520: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24521: LD_VAR 0 2
24525: PPUSH
24526: LD_VAR 0 3
24530: PPUSH
24531: CALL 24731 0 2
24535: PUSH
24536: LD_VAR 0 11
24540: PUSH
24541: EMPTY
24542: EQUAL
24543: OR
24544: IFFALSE 24489
// if not control in _control then
24546: LD_VAR 0 4
24550: PUSH
24551: LD_VAR 0 12
24555: IN
24556: NOT
24557: IFFALSE 24583
// control := _control [ rand ( 1 , _control ) ] ;
24559: LD_ADDR_VAR 0 4
24563: PUSH
24564: LD_VAR 0 12
24568: PUSH
24569: LD_INT 1
24571: PPUSH
24572: LD_VAR 0 12
24576: PPUSH
24577: CALL_OW 12
24581: ARRAY
24582: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24583: LD_VAR 0 2
24587: PPUSH
24588: LD_VAR 0 5
24592: PPUSH
24593: CALL 24951 0 2
24597: NOT
24598: IFFALSE 24657
// repeat weapon := _weapon [ 1 ] ;
24600: LD_ADDR_VAR 0 5
24604: PUSH
24605: LD_VAR 0 10
24609: PUSH
24610: LD_INT 1
24612: ARRAY
24613: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24614: LD_ADDR_VAR 0 10
24618: PUSH
24619: LD_VAR 0 10
24623: PPUSH
24624: LD_INT 1
24626: PPUSH
24627: CALL_OW 3
24631: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24632: LD_VAR 0 2
24636: PPUSH
24637: LD_VAR 0 5
24641: PPUSH
24642: CALL 24951 0 2
24646: PUSH
24647: LD_VAR 0 10
24651: PUSH
24652: EMPTY
24653: EQUAL
24654: OR
24655: IFFALSE 24600
// result := [ ] ;
24657: LD_ADDR_VAR 0 6
24661: PUSH
24662: EMPTY
24663: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24664: LD_VAR 0 1
24668: PPUSH
24669: LD_VAR 0 2
24673: PPUSH
24674: LD_VAR 0 3
24678: PPUSH
24679: LD_VAR 0 4
24683: PPUSH
24684: LD_VAR 0 5
24688: PPUSH
24689: CALL_OW 448
24693: IFFALSE 24726
// result := [ chassis , engine , control , weapon ] ;
24695: LD_ADDR_VAR 0 6
24699: PUSH
24700: LD_VAR 0 2
24704: PUSH
24705: LD_VAR 0 3
24709: PUSH
24710: LD_VAR 0 4
24714: PUSH
24715: LD_VAR 0 5
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: ST_TO_ADDR
// end ;
24726: LD_VAR 0 6
24730: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24731: LD_INT 0
24733: PPUSH
// if not chassis or not engine then
24734: LD_VAR 0 1
24738: NOT
24739: PUSH
24740: LD_VAR 0 2
24744: NOT
24745: OR
24746: IFFALSE 24750
// exit ;
24748: GO 24946
// case engine of engine_solar :
24750: LD_VAR 0 2
24754: PUSH
24755: LD_INT 2
24757: DOUBLE
24758: EQUAL
24759: IFTRUE 24763
24761: GO 24801
24763: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24764: LD_ADDR_VAR 0 3
24768: PUSH
24769: LD_INT 11
24771: PUSH
24772: LD_INT 12
24774: PUSH
24775: LD_INT 13
24777: PUSH
24778: LD_INT 14
24780: PUSH
24781: LD_INT 1
24783: PUSH
24784: LD_INT 2
24786: PUSH
24787: LD_INT 3
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: ST_TO_ADDR
24799: GO 24930
24801: LD_INT 1
24803: DOUBLE
24804: EQUAL
24805: IFTRUE 24809
24807: GO 24871
24809: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24810: LD_ADDR_VAR 0 3
24814: PUSH
24815: LD_INT 11
24817: PUSH
24818: LD_INT 12
24820: PUSH
24821: LD_INT 13
24823: PUSH
24824: LD_INT 14
24826: PUSH
24827: LD_INT 1
24829: PUSH
24830: LD_INT 2
24832: PUSH
24833: LD_INT 3
24835: PUSH
24836: LD_INT 4
24838: PUSH
24839: LD_INT 5
24841: PUSH
24842: LD_INT 21
24844: PUSH
24845: LD_INT 23
24847: PUSH
24848: LD_INT 22
24850: PUSH
24851: LD_INT 24
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: ST_TO_ADDR
24869: GO 24930
24871: LD_INT 3
24873: DOUBLE
24874: EQUAL
24875: IFTRUE 24879
24877: GO 24929
24879: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24880: LD_ADDR_VAR 0 3
24884: PUSH
24885: LD_INT 13
24887: PUSH
24888: LD_INT 14
24890: PUSH
24891: LD_INT 2
24893: PUSH
24894: LD_INT 3
24896: PUSH
24897: LD_INT 4
24899: PUSH
24900: LD_INT 5
24902: PUSH
24903: LD_INT 21
24905: PUSH
24906: LD_INT 22
24908: PUSH
24909: LD_INT 23
24911: PUSH
24912: LD_INT 24
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: ST_TO_ADDR
24927: GO 24930
24929: POP
// result := ( chassis in result ) ;
24930: LD_ADDR_VAR 0 3
24934: PUSH
24935: LD_VAR 0 1
24939: PUSH
24940: LD_VAR 0 3
24944: IN
24945: ST_TO_ADDR
// end ;
24946: LD_VAR 0 3
24950: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24951: LD_INT 0
24953: PPUSH
// if not chassis or not weapon then
24954: LD_VAR 0 1
24958: NOT
24959: PUSH
24960: LD_VAR 0 2
24964: NOT
24965: OR
24966: IFFALSE 24970
// exit ;
24968: GO 25996
// case weapon of us_machine_gun :
24970: LD_VAR 0 2
24974: PUSH
24975: LD_INT 2
24977: DOUBLE
24978: EQUAL
24979: IFTRUE 24983
24981: GO 25013
24983: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24984: LD_ADDR_VAR 0 3
24988: PUSH
24989: LD_INT 1
24991: PUSH
24992: LD_INT 2
24994: PUSH
24995: LD_INT 3
24997: PUSH
24998: LD_INT 4
25000: PUSH
25001: LD_INT 5
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: ST_TO_ADDR
25011: GO 25980
25013: LD_INT 3
25015: DOUBLE
25016: EQUAL
25017: IFTRUE 25021
25019: GO 25051
25021: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25022: LD_ADDR_VAR 0 3
25026: PUSH
25027: LD_INT 1
25029: PUSH
25030: LD_INT 2
25032: PUSH
25033: LD_INT 3
25035: PUSH
25036: LD_INT 4
25038: PUSH
25039: LD_INT 5
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: ST_TO_ADDR
25049: GO 25980
25051: LD_INT 11
25053: DOUBLE
25054: EQUAL
25055: IFTRUE 25059
25057: GO 25089
25059: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25060: LD_ADDR_VAR 0 3
25064: PUSH
25065: LD_INT 1
25067: PUSH
25068: LD_INT 2
25070: PUSH
25071: LD_INT 3
25073: PUSH
25074: LD_INT 4
25076: PUSH
25077: LD_INT 5
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: ST_TO_ADDR
25087: GO 25980
25089: LD_INT 4
25091: DOUBLE
25092: EQUAL
25093: IFTRUE 25097
25095: GO 25123
25097: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25098: LD_ADDR_VAR 0 3
25102: PUSH
25103: LD_INT 2
25105: PUSH
25106: LD_INT 3
25108: PUSH
25109: LD_INT 4
25111: PUSH
25112: LD_INT 5
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: ST_TO_ADDR
25121: GO 25980
25123: LD_INT 5
25125: DOUBLE
25126: EQUAL
25127: IFTRUE 25131
25129: GO 25157
25131: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25132: LD_ADDR_VAR 0 3
25136: PUSH
25137: LD_INT 2
25139: PUSH
25140: LD_INT 3
25142: PUSH
25143: LD_INT 4
25145: PUSH
25146: LD_INT 5
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: ST_TO_ADDR
25155: GO 25980
25157: LD_INT 9
25159: DOUBLE
25160: EQUAL
25161: IFTRUE 25165
25163: GO 25191
25165: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25166: LD_ADDR_VAR 0 3
25170: PUSH
25171: LD_INT 2
25173: PUSH
25174: LD_INT 3
25176: PUSH
25177: LD_INT 4
25179: PUSH
25180: LD_INT 5
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: ST_TO_ADDR
25189: GO 25980
25191: LD_INT 7
25193: DOUBLE
25194: EQUAL
25195: IFTRUE 25199
25197: GO 25225
25199: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25200: LD_ADDR_VAR 0 3
25204: PUSH
25205: LD_INT 2
25207: PUSH
25208: LD_INT 3
25210: PUSH
25211: LD_INT 4
25213: PUSH
25214: LD_INT 5
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: ST_TO_ADDR
25223: GO 25980
25225: LD_INT 12
25227: DOUBLE
25228: EQUAL
25229: IFTRUE 25233
25231: GO 25259
25233: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25234: LD_ADDR_VAR 0 3
25238: PUSH
25239: LD_INT 2
25241: PUSH
25242: LD_INT 3
25244: PUSH
25245: LD_INT 4
25247: PUSH
25248: LD_INT 5
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: ST_TO_ADDR
25257: GO 25980
25259: LD_INT 13
25261: DOUBLE
25262: EQUAL
25263: IFTRUE 25267
25265: GO 25293
25267: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25268: LD_ADDR_VAR 0 3
25272: PUSH
25273: LD_INT 2
25275: PUSH
25276: LD_INT 3
25278: PUSH
25279: LD_INT 4
25281: PUSH
25282: LD_INT 5
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: ST_TO_ADDR
25291: GO 25980
25293: LD_INT 14
25295: DOUBLE
25296: EQUAL
25297: IFTRUE 25301
25299: GO 25319
25301: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25302: LD_ADDR_VAR 0 3
25306: PUSH
25307: LD_INT 4
25309: PUSH
25310: LD_INT 5
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: ST_TO_ADDR
25317: GO 25980
25319: LD_INT 6
25321: DOUBLE
25322: EQUAL
25323: IFTRUE 25327
25325: GO 25345
25327: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25328: LD_ADDR_VAR 0 3
25332: PUSH
25333: LD_INT 4
25335: PUSH
25336: LD_INT 5
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: ST_TO_ADDR
25343: GO 25980
25345: LD_INT 10
25347: DOUBLE
25348: EQUAL
25349: IFTRUE 25353
25351: GO 25371
25353: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25354: LD_ADDR_VAR 0 3
25358: PUSH
25359: LD_INT 4
25361: PUSH
25362: LD_INT 5
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: ST_TO_ADDR
25369: GO 25980
25371: LD_INT 22
25373: DOUBLE
25374: EQUAL
25375: IFTRUE 25379
25377: GO 25405
25379: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25380: LD_ADDR_VAR 0 3
25384: PUSH
25385: LD_INT 11
25387: PUSH
25388: LD_INT 12
25390: PUSH
25391: LD_INT 13
25393: PUSH
25394: LD_INT 14
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: ST_TO_ADDR
25403: GO 25980
25405: LD_INT 23
25407: DOUBLE
25408: EQUAL
25409: IFTRUE 25413
25411: GO 25439
25413: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25414: LD_ADDR_VAR 0 3
25418: PUSH
25419: LD_INT 11
25421: PUSH
25422: LD_INT 12
25424: PUSH
25425: LD_INT 13
25427: PUSH
25428: LD_INT 14
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: ST_TO_ADDR
25437: GO 25980
25439: LD_INT 24
25441: DOUBLE
25442: EQUAL
25443: IFTRUE 25447
25445: GO 25473
25447: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25448: LD_ADDR_VAR 0 3
25452: PUSH
25453: LD_INT 11
25455: PUSH
25456: LD_INT 12
25458: PUSH
25459: LD_INT 13
25461: PUSH
25462: LD_INT 14
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: ST_TO_ADDR
25471: GO 25980
25473: LD_INT 30
25475: DOUBLE
25476: EQUAL
25477: IFTRUE 25481
25479: GO 25507
25481: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25482: LD_ADDR_VAR 0 3
25486: PUSH
25487: LD_INT 11
25489: PUSH
25490: LD_INT 12
25492: PUSH
25493: LD_INT 13
25495: PUSH
25496: LD_INT 14
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: ST_TO_ADDR
25505: GO 25980
25507: LD_INT 25
25509: DOUBLE
25510: EQUAL
25511: IFTRUE 25515
25513: GO 25533
25515: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25516: LD_ADDR_VAR 0 3
25520: PUSH
25521: LD_INT 13
25523: PUSH
25524: LD_INT 14
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: ST_TO_ADDR
25531: GO 25980
25533: LD_INT 27
25535: DOUBLE
25536: EQUAL
25537: IFTRUE 25541
25539: GO 25559
25541: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25542: LD_ADDR_VAR 0 3
25546: PUSH
25547: LD_INT 13
25549: PUSH
25550: LD_INT 14
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: ST_TO_ADDR
25557: GO 25980
25559: LD_INT 28
25561: DOUBLE
25562: EQUAL
25563: IFTRUE 25567
25565: GO 25585
25567: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25568: LD_ADDR_VAR 0 3
25572: PUSH
25573: LD_INT 13
25575: PUSH
25576: LD_INT 14
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: ST_TO_ADDR
25583: GO 25980
25585: LD_INT 29
25587: DOUBLE
25588: EQUAL
25589: IFTRUE 25593
25591: GO 25611
25593: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25594: LD_ADDR_VAR 0 3
25598: PUSH
25599: LD_INT 13
25601: PUSH
25602: LD_INT 14
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: ST_TO_ADDR
25609: GO 25980
25611: LD_INT 31
25613: DOUBLE
25614: EQUAL
25615: IFTRUE 25619
25617: GO 25637
25619: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25620: LD_ADDR_VAR 0 3
25624: PUSH
25625: LD_INT 13
25627: PUSH
25628: LD_INT 14
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: ST_TO_ADDR
25635: GO 25980
25637: LD_INT 26
25639: DOUBLE
25640: EQUAL
25641: IFTRUE 25645
25643: GO 25663
25645: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25646: LD_ADDR_VAR 0 3
25650: PUSH
25651: LD_INT 13
25653: PUSH
25654: LD_INT 14
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: ST_TO_ADDR
25661: GO 25980
25663: LD_INT 42
25665: DOUBLE
25666: EQUAL
25667: IFTRUE 25671
25669: GO 25697
25671: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25672: LD_ADDR_VAR 0 3
25676: PUSH
25677: LD_INT 21
25679: PUSH
25680: LD_INT 22
25682: PUSH
25683: LD_INT 23
25685: PUSH
25686: LD_INT 24
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: ST_TO_ADDR
25695: GO 25980
25697: LD_INT 43
25699: DOUBLE
25700: EQUAL
25701: IFTRUE 25705
25703: GO 25731
25705: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25706: LD_ADDR_VAR 0 3
25710: PUSH
25711: LD_INT 21
25713: PUSH
25714: LD_INT 22
25716: PUSH
25717: LD_INT 23
25719: PUSH
25720: LD_INT 24
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: ST_TO_ADDR
25729: GO 25980
25731: LD_INT 44
25733: DOUBLE
25734: EQUAL
25735: IFTRUE 25739
25737: GO 25765
25739: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25740: LD_ADDR_VAR 0 3
25744: PUSH
25745: LD_INT 21
25747: PUSH
25748: LD_INT 22
25750: PUSH
25751: LD_INT 23
25753: PUSH
25754: LD_INT 24
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: ST_TO_ADDR
25763: GO 25980
25765: LD_INT 45
25767: DOUBLE
25768: EQUAL
25769: IFTRUE 25773
25771: GO 25799
25773: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25774: LD_ADDR_VAR 0 3
25778: PUSH
25779: LD_INT 21
25781: PUSH
25782: LD_INT 22
25784: PUSH
25785: LD_INT 23
25787: PUSH
25788: LD_INT 24
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: ST_TO_ADDR
25797: GO 25980
25799: LD_INT 49
25801: DOUBLE
25802: EQUAL
25803: IFTRUE 25807
25805: GO 25833
25807: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25808: LD_ADDR_VAR 0 3
25812: PUSH
25813: LD_INT 21
25815: PUSH
25816: LD_INT 22
25818: PUSH
25819: LD_INT 23
25821: PUSH
25822: LD_INT 24
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: ST_TO_ADDR
25831: GO 25980
25833: LD_INT 51
25835: DOUBLE
25836: EQUAL
25837: IFTRUE 25841
25839: GO 25867
25841: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25842: LD_ADDR_VAR 0 3
25846: PUSH
25847: LD_INT 21
25849: PUSH
25850: LD_INT 22
25852: PUSH
25853: LD_INT 23
25855: PUSH
25856: LD_INT 24
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: ST_TO_ADDR
25865: GO 25980
25867: LD_INT 52
25869: DOUBLE
25870: EQUAL
25871: IFTRUE 25875
25873: GO 25901
25875: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25876: LD_ADDR_VAR 0 3
25880: PUSH
25881: LD_INT 21
25883: PUSH
25884: LD_INT 22
25886: PUSH
25887: LD_INT 23
25889: PUSH
25890: LD_INT 24
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: ST_TO_ADDR
25899: GO 25980
25901: LD_INT 53
25903: DOUBLE
25904: EQUAL
25905: IFTRUE 25909
25907: GO 25927
25909: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25910: LD_ADDR_VAR 0 3
25914: PUSH
25915: LD_INT 23
25917: PUSH
25918: LD_INT 24
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: ST_TO_ADDR
25925: GO 25980
25927: LD_INT 46
25929: DOUBLE
25930: EQUAL
25931: IFTRUE 25935
25933: GO 25953
25935: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25936: LD_ADDR_VAR 0 3
25940: PUSH
25941: LD_INT 23
25943: PUSH
25944: LD_INT 24
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: ST_TO_ADDR
25951: GO 25980
25953: LD_INT 47
25955: DOUBLE
25956: EQUAL
25957: IFTRUE 25961
25959: GO 25979
25961: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25962: LD_ADDR_VAR 0 3
25966: PUSH
25967: LD_INT 23
25969: PUSH
25970: LD_INT 24
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: ST_TO_ADDR
25977: GO 25980
25979: POP
// result := ( chassis in result ) ;
25980: LD_ADDR_VAR 0 3
25984: PUSH
25985: LD_VAR 0 1
25989: PUSH
25990: LD_VAR 0 3
25994: IN
25995: ST_TO_ADDR
// end ;
25996: LD_VAR 0 3
26000: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26001: LD_INT 0
26003: PPUSH
26004: PPUSH
26005: PPUSH
26006: PPUSH
26007: PPUSH
26008: PPUSH
26009: PPUSH
// result := array ;
26010: LD_ADDR_VAR 0 5
26014: PUSH
26015: LD_VAR 0 1
26019: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26020: LD_VAR 0 1
26024: NOT
26025: PUSH
26026: LD_VAR 0 2
26030: NOT
26031: OR
26032: PUSH
26033: LD_VAR 0 3
26037: NOT
26038: OR
26039: PUSH
26040: LD_VAR 0 2
26044: PUSH
26045: LD_VAR 0 1
26049: GREATER
26050: OR
26051: PUSH
26052: LD_VAR 0 3
26056: PUSH
26057: LD_VAR 0 1
26061: GREATER
26062: OR
26063: IFFALSE 26067
// exit ;
26065: GO 26363
// if direction then
26067: LD_VAR 0 4
26071: IFFALSE 26135
// begin d := 1 ;
26073: LD_ADDR_VAR 0 9
26077: PUSH
26078: LD_INT 1
26080: ST_TO_ADDR
// if i_from > i_to then
26081: LD_VAR 0 2
26085: PUSH
26086: LD_VAR 0 3
26090: GREATER
26091: IFFALSE 26117
// length := ( array - i_from ) + i_to else
26093: LD_ADDR_VAR 0 11
26097: PUSH
26098: LD_VAR 0 1
26102: PUSH
26103: LD_VAR 0 2
26107: MINUS
26108: PUSH
26109: LD_VAR 0 3
26113: PLUS
26114: ST_TO_ADDR
26115: GO 26133
// length := i_to - i_from ;
26117: LD_ADDR_VAR 0 11
26121: PUSH
26122: LD_VAR 0 3
26126: PUSH
26127: LD_VAR 0 2
26131: MINUS
26132: ST_TO_ADDR
// end else
26133: GO 26196
// begin d := - 1 ;
26135: LD_ADDR_VAR 0 9
26139: PUSH
26140: LD_INT 1
26142: NEG
26143: ST_TO_ADDR
// if i_from > i_to then
26144: LD_VAR 0 2
26148: PUSH
26149: LD_VAR 0 3
26153: GREATER
26154: IFFALSE 26174
// length := i_from - i_to else
26156: LD_ADDR_VAR 0 11
26160: PUSH
26161: LD_VAR 0 2
26165: PUSH
26166: LD_VAR 0 3
26170: MINUS
26171: ST_TO_ADDR
26172: GO 26196
// length := ( array - i_to ) + i_from ;
26174: LD_ADDR_VAR 0 11
26178: PUSH
26179: LD_VAR 0 1
26183: PUSH
26184: LD_VAR 0 3
26188: MINUS
26189: PUSH
26190: LD_VAR 0 2
26194: PLUS
26195: ST_TO_ADDR
// end ; if not length then
26196: LD_VAR 0 11
26200: NOT
26201: IFFALSE 26205
// exit ;
26203: GO 26363
// tmp := array ;
26205: LD_ADDR_VAR 0 10
26209: PUSH
26210: LD_VAR 0 1
26214: ST_TO_ADDR
// for i = 1 to length do
26215: LD_ADDR_VAR 0 6
26219: PUSH
26220: DOUBLE
26221: LD_INT 1
26223: DEC
26224: ST_TO_ADDR
26225: LD_VAR 0 11
26229: PUSH
26230: FOR_TO
26231: IFFALSE 26351
// begin for j = 1 to array do
26233: LD_ADDR_VAR 0 7
26237: PUSH
26238: DOUBLE
26239: LD_INT 1
26241: DEC
26242: ST_TO_ADDR
26243: LD_VAR 0 1
26247: PUSH
26248: FOR_TO
26249: IFFALSE 26337
// begin k := j + d ;
26251: LD_ADDR_VAR 0 8
26255: PUSH
26256: LD_VAR 0 7
26260: PUSH
26261: LD_VAR 0 9
26265: PLUS
26266: ST_TO_ADDR
// if k > array then
26267: LD_VAR 0 8
26271: PUSH
26272: LD_VAR 0 1
26276: GREATER
26277: IFFALSE 26287
// k := 1 ;
26279: LD_ADDR_VAR 0 8
26283: PUSH
26284: LD_INT 1
26286: ST_TO_ADDR
// if not k then
26287: LD_VAR 0 8
26291: NOT
26292: IFFALSE 26304
// k := array ;
26294: LD_ADDR_VAR 0 8
26298: PUSH
26299: LD_VAR 0 1
26303: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26304: LD_ADDR_VAR 0 10
26308: PUSH
26309: LD_VAR 0 10
26313: PPUSH
26314: LD_VAR 0 8
26318: PPUSH
26319: LD_VAR 0 1
26323: PUSH
26324: LD_VAR 0 7
26328: ARRAY
26329: PPUSH
26330: CALL_OW 1
26334: ST_TO_ADDR
// end ;
26335: GO 26248
26337: POP
26338: POP
// array := tmp ;
26339: LD_ADDR_VAR 0 1
26343: PUSH
26344: LD_VAR 0 10
26348: ST_TO_ADDR
// end ;
26349: GO 26230
26351: POP
26352: POP
// result := array ;
26353: LD_ADDR_VAR 0 5
26357: PUSH
26358: LD_VAR 0 1
26362: ST_TO_ADDR
// end ;
26363: LD_VAR 0 5
26367: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26368: LD_INT 0
26370: PPUSH
26371: PPUSH
// result := 0 ;
26372: LD_ADDR_VAR 0 3
26376: PUSH
26377: LD_INT 0
26379: ST_TO_ADDR
// if not array or not value in array then
26380: LD_VAR 0 1
26384: NOT
26385: PUSH
26386: LD_VAR 0 2
26390: PUSH
26391: LD_VAR 0 1
26395: IN
26396: NOT
26397: OR
26398: IFFALSE 26402
// exit ;
26400: GO 26456
// for i = 1 to array do
26402: LD_ADDR_VAR 0 4
26406: PUSH
26407: DOUBLE
26408: LD_INT 1
26410: DEC
26411: ST_TO_ADDR
26412: LD_VAR 0 1
26416: PUSH
26417: FOR_TO
26418: IFFALSE 26454
// if value = array [ i ] then
26420: LD_VAR 0 2
26424: PUSH
26425: LD_VAR 0 1
26429: PUSH
26430: LD_VAR 0 4
26434: ARRAY
26435: EQUAL
26436: IFFALSE 26452
// begin result := i ;
26438: LD_ADDR_VAR 0 3
26442: PUSH
26443: LD_VAR 0 4
26447: ST_TO_ADDR
// exit ;
26448: POP
26449: POP
26450: GO 26456
// end ;
26452: GO 26417
26454: POP
26455: POP
// end ;
26456: LD_VAR 0 3
26460: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26461: LD_INT 0
26463: PPUSH
// vc_chassis := chassis ;
26464: LD_ADDR_OWVAR 37
26468: PUSH
26469: LD_VAR 0 1
26473: ST_TO_ADDR
// vc_engine := engine ;
26474: LD_ADDR_OWVAR 39
26478: PUSH
26479: LD_VAR 0 2
26483: ST_TO_ADDR
// vc_control := control ;
26484: LD_ADDR_OWVAR 38
26488: PUSH
26489: LD_VAR 0 3
26493: ST_TO_ADDR
// vc_weapon := weapon ;
26494: LD_ADDR_OWVAR 40
26498: PUSH
26499: LD_VAR 0 4
26503: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26504: LD_ADDR_OWVAR 41
26508: PUSH
26509: LD_VAR 0 5
26513: ST_TO_ADDR
// end ;
26514: LD_VAR 0 6
26518: RET
// export function WantPlant ( unit ) ; var task ; begin
26519: LD_INT 0
26521: PPUSH
26522: PPUSH
// result := false ;
26523: LD_ADDR_VAR 0 2
26527: PUSH
26528: LD_INT 0
26530: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26531: LD_ADDR_VAR 0 3
26535: PUSH
26536: LD_VAR 0 1
26540: PPUSH
26541: CALL_OW 437
26545: ST_TO_ADDR
// if task then
26546: LD_VAR 0 3
26550: IFFALSE 26578
// if task [ 1 ] [ 1 ] = p then
26552: LD_VAR 0 3
26556: PUSH
26557: LD_INT 1
26559: ARRAY
26560: PUSH
26561: LD_INT 1
26563: ARRAY
26564: PUSH
26565: LD_STRING p
26567: EQUAL
26568: IFFALSE 26578
// result := true ;
26570: LD_ADDR_VAR 0 2
26574: PUSH
26575: LD_INT 1
26577: ST_TO_ADDR
// end ;
26578: LD_VAR 0 2
26582: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26583: LD_INT 0
26585: PPUSH
26586: PPUSH
26587: PPUSH
26588: PPUSH
// if pos < 1 then
26589: LD_VAR 0 2
26593: PUSH
26594: LD_INT 1
26596: LESS
26597: IFFALSE 26601
// exit ;
26599: GO 26904
// if pos = 1 then
26601: LD_VAR 0 2
26605: PUSH
26606: LD_INT 1
26608: EQUAL
26609: IFFALSE 26642
// result := Replace ( arr , pos [ 1 ] , value ) else
26611: LD_ADDR_VAR 0 4
26615: PUSH
26616: LD_VAR 0 1
26620: PPUSH
26621: LD_VAR 0 2
26625: PUSH
26626: LD_INT 1
26628: ARRAY
26629: PPUSH
26630: LD_VAR 0 3
26634: PPUSH
26635: CALL_OW 1
26639: ST_TO_ADDR
26640: GO 26904
// begin tmp := arr ;
26642: LD_ADDR_VAR 0 6
26646: PUSH
26647: LD_VAR 0 1
26651: ST_TO_ADDR
// s_arr := [ tmp ] ;
26652: LD_ADDR_VAR 0 7
26656: PUSH
26657: LD_VAR 0 6
26661: PUSH
26662: EMPTY
26663: LIST
26664: ST_TO_ADDR
// for i = 1 to pos - 1 do
26665: LD_ADDR_VAR 0 5
26669: PUSH
26670: DOUBLE
26671: LD_INT 1
26673: DEC
26674: ST_TO_ADDR
26675: LD_VAR 0 2
26679: PUSH
26680: LD_INT 1
26682: MINUS
26683: PUSH
26684: FOR_TO
26685: IFFALSE 26730
// begin tmp := tmp [ pos [ i ] ] ;
26687: LD_ADDR_VAR 0 6
26691: PUSH
26692: LD_VAR 0 6
26696: PUSH
26697: LD_VAR 0 2
26701: PUSH
26702: LD_VAR 0 5
26706: ARRAY
26707: ARRAY
26708: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26709: LD_ADDR_VAR 0 7
26713: PUSH
26714: LD_VAR 0 7
26718: PUSH
26719: LD_VAR 0 6
26723: PUSH
26724: EMPTY
26725: LIST
26726: ADD
26727: ST_TO_ADDR
// end ;
26728: GO 26684
26730: POP
26731: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26732: LD_ADDR_VAR 0 6
26736: PUSH
26737: LD_VAR 0 6
26741: PPUSH
26742: LD_VAR 0 2
26746: PUSH
26747: LD_VAR 0 2
26751: ARRAY
26752: PPUSH
26753: LD_VAR 0 3
26757: PPUSH
26758: CALL_OW 1
26762: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26763: LD_ADDR_VAR 0 7
26767: PUSH
26768: LD_VAR 0 7
26772: PPUSH
26773: LD_VAR 0 7
26777: PPUSH
26778: LD_VAR 0 6
26782: PPUSH
26783: CALL_OW 1
26787: ST_TO_ADDR
// for i = s_arr downto 2 do
26788: LD_ADDR_VAR 0 5
26792: PUSH
26793: DOUBLE
26794: LD_VAR 0 7
26798: INC
26799: ST_TO_ADDR
26800: LD_INT 2
26802: PUSH
26803: FOR_DOWNTO
26804: IFFALSE 26888
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26806: LD_ADDR_VAR 0 6
26810: PUSH
26811: LD_VAR 0 7
26815: PUSH
26816: LD_VAR 0 5
26820: PUSH
26821: LD_INT 1
26823: MINUS
26824: ARRAY
26825: PPUSH
26826: LD_VAR 0 2
26830: PUSH
26831: LD_VAR 0 5
26835: PUSH
26836: LD_INT 1
26838: MINUS
26839: ARRAY
26840: PPUSH
26841: LD_VAR 0 7
26845: PUSH
26846: LD_VAR 0 5
26850: ARRAY
26851: PPUSH
26852: CALL_OW 1
26856: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26857: LD_ADDR_VAR 0 7
26861: PUSH
26862: LD_VAR 0 7
26866: PPUSH
26867: LD_VAR 0 5
26871: PUSH
26872: LD_INT 1
26874: MINUS
26875: PPUSH
26876: LD_VAR 0 6
26880: PPUSH
26881: CALL_OW 1
26885: ST_TO_ADDR
// end ;
26886: GO 26803
26888: POP
26889: POP
// result := s_arr [ 1 ] ;
26890: LD_ADDR_VAR 0 4
26894: PUSH
26895: LD_VAR 0 7
26899: PUSH
26900: LD_INT 1
26902: ARRAY
26903: ST_TO_ADDR
// end ; end ;
26904: LD_VAR 0 4
26908: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26909: LD_INT 0
26911: PPUSH
26912: PPUSH
// if not list then
26913: LD_VAR 0 1
26917: NOT
26918: IFFALSE 26922
// exit ;
26920: GO 27013
// i := list [ pos1 ] ;
26922: LD_ADDR_VAR 0 5
26926: PUSH
26927: LD_VAR 0 1
26931: PUSH
26932: LD_VAR 0 2
26936: ARRAY
26937: ST_TO_ADDR
// if not i then
26938: LD_VAR 0 5
26942: NOT
26943: IFFALSE 26947
// exit ;
26945: GO 27013
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26947: LD_ADDR_VAR 0 1
26951: PUSH
26952: LD_VAR 0 1
26956: PPUSH
26957: LD_VAR 0 2
26961: PPUSH
26962: LD_VAR 0 1
26966: PUSH
26967: LD_VAR 0 3
26971: ARRAY
26972: PPUSH
26973: CALL_OW 1
26977: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26978: LD_ADDR_VAR 0 1
26982: PUSH
26983: LD_VAR 0 1
26987: PPUSH
26988: LD_VAR 0 3
26992: PPUSH
26993: LD_VAR 0 5
26997: PPUSH
26998: CALL_OW 1
27002: ST_TO_ADDR
// result := list ;
27003: LD_ADDR_VAR 0 4
27007: PUSH
27008: LD_VAR 0 1
27012: ST_TO_ADDR
// end ;
27013: LD_VAR 0 4
27017: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27018: LD_INT 0
27020: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27021: LD_ADDR_VAR 0 5
27025: PUSH
27026: LD_VAR 0 1
27030: PPUSH
27031: CALL_OW 250
27035: PPUSH
27036: LD_VAR 0 1
27040: PPUSH
27041: CALL_OW 251
27045: PPUSH
27046: LD_VAR 0 2
27050: PPUSH
27051: LD_VAR 0 3
27055: PPUSH
27056: LD_VAR 0 4
27060: PPUSH
27061: CALL 27071 0 5
27065: ST_TO_ADDR
// end ;
27066: LD_VAR 0 5
27070: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27071: LD_INT 0
27073: PPUSH
27074: PPUSH
27075: PPUSH
27076: PPUSH
// if not list then
27077: LD_VAR 0 3
27081: NOT
27082: IFFALSE 27086
// exit ;
27084: GO 27474
// result := [ ] ;
27086: LD_ADDR_VAR 0 6
27090: PUSH
27091: EMPTY
27092: ST_TO_ADDR
// for i in list do
27093: LD_ADDR_VAR 0 7
27097: PUSH
27098: LD_VAR 0 3
27102: PUSH
27103: FOR_IN
27104: IFFALSE 27306
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27106: LD_ADDR_VAR 0 9
27110: PUSH
27111: LD_VAR 0 7
27115: PPUSH
27116: LD_VAR 0 1
27120: PPUSH
27121: LD_VAR 0 2
27125: PPUSH
27126: CALL_OW 297
27130: ST_TO_ADDR
// if not result then
27131: LD_VAR 0 6
27135: NOT
27136: IFFALSE 27162
// result := [ [ i , tmp ] ] else
27138: LD_ADDR_VAR 0 6
27142: PUSH
27143: LD_VAR 0 7
27147: PUSH
27148: LD_VAR 0 9
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: EMPTY
27158: LIST
27159: ST_TO_ADDR
27160: GO 27304
// begin if result [ result ] [ 2 ] < tmp then
27162: LD_VAR 0 6
27166: PUSH
27167: LD_VAR 0 6
27171: ARRAY
27172: PUSH
27173: LD_INT 2
27175: ARRAY
27176: PUSH
27177: LD_VAR 0 9
27181: LESS
27182: IFFALSE 27224
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27184: LD_ADDR_VAR 0 6
27188: PUSH
27189: LD_VAR 0 6
27193: PPUSH
27194: LD_VAR 0 6
27198: PUSH
27199: LD_INT 1
27201: PLUS
27202: PPUSH
27203: LD_VAR 0 7
27207: PUSH
27208: LD_VAR 0 9
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PPUSH
27217: CALL_OW 2
27221: ST_TO_ADDR
27222: GO 27304
// for j = 1 to result do
27224: LD_ADDR_VAR 0 8
27228: PUSH
27229: DOUBLE
27230: LD_INT 1
27232: DEC
27233: ST_TO_ADDR
27234: LD_VAR 0 6
27238: PUSH
27239: FOR_TO
27240: IFFALSE 27302
// begin if tmp < result [ j ] [ 2 ] then
27242: LD_VAR 0 9
27246: PUSH
27247: LD_VAR 0 6
27251: PUSH
27252: LD_VAR 0 8
27256: ARRAY
27257: PUSH
27258: LD_INT 2
27260: ARRAY
27261: LESS
27262: IFFALSE 27300
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27264: LD_ADDR_VAR 0 6
27268: PUSH
27269: LD_VAR 0 6
27273: PPUSH
27274: LD_VAR 0 8
27278: PPUSH
27279: LD_VAR 0 7
27283: PUSH
27284: LD_VAR 0 9
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PPUSH
27293: CALL_OW 2
27297: ST_TO_ADDR
// break ;
27298: GO 27302
// end ; end ;
27300: GO 27239
27302: POP
27303: POP
// end ; end ;
27304: GO 27103
27306: POP
27307: POP
// if result and not asc then
27308: LD_VAR 0 6
27312: PUSH
27313: LD_VAR 0 4
27317: NOT
27318: AND
27319: IFFALSE 27394
// begin tmp := result ;
27321: LD_ADDR_VAR 0 9
27325: PUSH
27326: LD_VAR 0 6
27330: ST_TO_ADDR
// for i = tmp downto 1 do
27331: LD_ADDR_VAR 0 7
27335: PUSH
27336: DOUBLE
27337: LD_VAR 0 9
27341: INC
27342: ST_TO_ADDR
27343: LD_INT 1
27345: PUSH
27346: FOR_DOWNTO
27347: IFFALSE 27392
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27349: LD_ADDR_VAR 0 6
27353: PUSH
27354: LD_VAR 0 6
27358: PPUSH
27359: LD_VAR 0 9
27363: PUSH
27364: LD_VAR 0 7
27368: MINUS
27369: PUSH
27370: LD_INT 1
27372: PLUS
27373: PPUSH
27374: LD_VAR 0 9
27378: PUSH
27379: LD_VAR 0 7
27383: ARRAY
27384: PPUSH
27385: CALL_OW 1
27389: ST_TO_ADDR
27390: GO 27346
27392: POP
27393: POP
// end ; tmp := [ ] ;
27394: LD_ADDR_VAR 0 9
27398: PUSH
27399: EMPTY
27400: ST_TO_ADDR
// if mode then
27401: LD_VAR 0 5
27405: IFFALSE 27474
// begin for i = 1 to result do
27407: LD_ADDR_VAR 0 7
27411: PUSH
27412: DOUBLE
27413: LD_INT 1
27415: DEC
27416: ST_TO_ADDR
27417: LD_VAR 0 6
27421: PUSH
27422: FOR_TO
27423: IFFALSE 27462
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27425: LD_ADDR_VAR 0 9
27429: PUSH
27430: LD_VAR 0 9
27434: PPUSH
27435: LD_VAR 0 7
27439: PPUSH
27440: LD_VAR 0 6
27444: PUSH
27445: LD_VAR 0 7
27449: ARRAY
27450: PUSH
27451: LD_INT 1
27453: ARRAY
27454: PPUSH
27455: CALL_OW 1
27459: ST_TO_ADDR
27460: GO 27422
27462: POP
27463: POP
// result := tmp ;
27464: LD_ADDR_VAR 0 6
27468: PUSH
27469: LD_VAR 0 9
27473: ST_TO_ADDR
// end ; end ;
27474: LD_VAR 0 6
27478: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27479: LD_INT 0
27481: PPUSH
27482: PPUSH
27483: PPUSH
27484: PPUSH
27485: PPUSH
27486: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27487: LD_ADDR_VAR 0 5
27491: PUSH
27492: LD_INT 0
27494: PUSH
27495: LD_INT 0
27497: PUSH
27498: LD_INT 0
27500: PUSH
27501: EMPTY
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: ST_TO_ADDR
// if not x or not y then
27509: LD_VAR 0 2
27513: NOT
27514: PUSH
27515: LD_VAR 0 3
27519: NOT
27520: OR
27521: IFFALSE 27525
// exit ;
27523: GO 29171
// if not range then
27525: LD_VAR 0 4
27529: NOT
27530: IFFALSE 27540
// range := 10 ;
27532: LD_ADDR_VAR 0 4
27536: PUSH
27537: LD_INT 10
27539: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27540: LD_ADDR_VAR 0 8
27544: PUSH
27545: LD_INT 81
27547: PUSH
27548: LD_VAR 0 1
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 92
27559: PUSH
27560: LD_VAR 0 2
27564: PUSH
27565: LD_VAR 0 3
27569: PUSH
27570: LD_VAR 0 4
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 3
27583: PUSH
27584: LD_INT 21
27586: PUSH
27587: LD_INT 3
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: LIST
27602: PPUSH
27603: CALL_OW 69
27607: ST_TO_ADDR
// if not tmp then
27608: LD_VAR 0 8
27612: NOT
27613: IFFALSE 27617
// exit ;
27615: GO 29171
// for i in tmp do
27617: LD_ADDR_VAR 0 6
27621: PUSH
27622: LD_VAR 0 8
27626: PUSH
27627: FOR_IN
27628: IFFALSE 29146
// begin points := [ 0 , 0 , 0 ] ;
27630: LD_ADDR_VAR 0 9
27634: PUSH
27635: LD_INT 0
27637: PUSH
27638: LD_INT 0
27640: PUSH
27641: LD_INT 0
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: LIST
27648: ST_TO_ADDR
// bpoints := 1 ;
27649: LD_ADDR_VAR 0 10
27653: PUSH
27654: LD_INT 1
27656: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27657: LD_VAR 0 6
27661: PPUSH
27662: CALL_OW 247
27666: PUSH
27667: LD_INT 1
27669: DOUBLE
27670: EQUAL
27671: IFTRUE 27675
27673: GO 28253
27675: POP
// begin if GetClass ( i ) = 1 then
27676: LD_VAR 0 6
27680: PPUSH
27681: CALL_OW 257
27685: PUSH
27686: LD_INT 1
27688: EQUAL
27689: IFFALSE 27710
// points := [ 10 , 5 , 3 ] ;
27691: LD_ADDR_VAR 0 9
27695: PUSH
27696: LD_INT 10
27698: PUSH
27699: LD_INT 5
27701: PUSH
27702: LD_INT 3
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: LIST
27709: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27710: LD_VAR 0 6
27714: PPUSH
27715: CALL_OW 257
27719: PUSH
27720: LD_INT 2
27722: PUSH
27723: LD_INT 3
27725: PUSH
27726: LD_INT 4
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: LIST
27733: IN
27734: IFFALSE 27755
// points := [ 3 , 2 , 1 ] ;
27736: LD_ADDR_VAR 0 9
27740: PUSH
27741: LD_INT 3
27743: PUSH
27744: LD_INT 2
27746: PUSH
27747: LD_INT 1
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: LIST
27754: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27755: LD_VAR 0 6
27759: PPUSH
27760: CALL_OW 257
27764: PUSH
27765: LD_INT 5
27767: EQUAL
27768: IFFALSE 27789
// points := [ 130 , 5 , 2 ] ;
27770: LD_ADDR_VAR 0 9
27774: PUSH
27775: LD_INT 130
27777: PUSH
27778: LD_INT 5
27780: PUSH
27781: LD_INT 2
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: LIST
27788: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27789: LD_VAR 0 6
27793: PPUSH
27794: CALL_OW 257
27798: PUSH
27799: LD_INT 8
27801: EQUAL
27802: IFFALSE 27823
// points := [ 35 , 35 , 30 ] ;
27804: LD_ADDR_VAR 0 9
27808: PUSH
27809: LD_INT 35
27811: PUSH
27812: LD_INT 35
27814: PUSH
27815: LD_INT 30
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: LIST
27822: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27823: LD_VAR 0 6
27827: PPUSH
27828: CALL_OW 257
27832: PUSH
27833: LD_INT 9
27835: EQUAL
27836: IFFALSE 27857
// points := [ 20 , 55 , 40 ] ;
27838: LD_ADDR_VAR 0 9
27842: PUSH
27843: LD_INT 20
27845: PUSH
27846: LD_INT 55
27848: PUSH
27849: LD_INT 40
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: LIST
27856: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27857: LD_VAR 0 6
27861: PPUSH
27862: CALL_OW 257
27866: PUSH
27867: LD_INT 12
27869: PUSH
27870: LD_INT 16
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: IN
27877: IFFALSE 27898
// points := [ 5 , 3 , 2 ] ;
27879: LD_ADDR_VAR 0 9
27883: PUSH
27884: LD_INT 5
27886: PUSH
27887: LD_INT 3
27889: PUSH
27890: LD_INT 2
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: LIST
27897: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27898: LD_VAR 0 6
27902: PPUSH
27903: CALL_OW 257
27907: PUSH
27908: LD_INT 17
27910: EQUAL
27911: IFFALSE 27932
// points := [ 100 , 50 , 75 ] ;
27913: LD_ADDR_VAR 0 9
27917: PUSH
27918: LD_INT 100
27920: PUSH
27921: LD_INT 50
27923: PUSH
27924: LD_INT 75
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: LIST
27931: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27932: LD_VAR 0 6
27936: PPUSH
27937: CALL_OW 257
27941: PUSH
27942: LD_INT 15
27944: EQUAL
27945: IFFALSE 27966
// points := [ 10 , 5 , 3 ] ;
27947: LD_ADDR_VAR 0 9
27951: PUSH
27952: LD_INT 10
27954: PUSH
27955: LD_INT 5
27957: PUSH
27958: LD_INT 3
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: LIST
27965: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27966: LD_VAR 0 6
27970: PPUSH
27971: CALL_OW 257
27975: PUSH
27976: LD_INT 14
27978: EQUAL
27979: IFFALSE 28000
// points := [ 10 , 0 , 0 ] ;
27981: LD_ADDR_VAR 0 9
27985: PUSH
27986: LD_INT 10
27988: PUSH
27989: LD_INT 0
27991: PUSH
27992: LD_INT 0
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: LIST
27999: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28000: LD_VAR 0 6
28004: PPUSH
28005: CALL_OW 257
28009: PUSH
28010: LD_INT 11
28012: EQUAL
28013: IFFALSE 28034
// points := [ 30 , 10 , 5 ] ;
28015: LD_ADDR_VAR 0 9
28019: PUSH
28020: LD_INT 30
28022: PUSH
28023: LD_INT 10
28025: PUSH
28026: LD_INT 5
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: LIST
28033: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28034: LD_VAR 0 1
28038: PPUSH
28039: LD_INT 5
28041: PPUSH
28042: CALL_OW 321
28046: PUSH
28047: LD_INT 2
28049: EQUAL
28050: IFFALSE 28067
// bpoints := bpoints * 1.8 ;
28052: LD_ADDR_VAR 0 10
28056: PUSH
28057: LD_VAR 0 10
28061: PUSH
28062: LD_REAL  1.80000000000000E+0000
28065: MUL
28066: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28067: LD_VAR 0 6
28071: PPUSH
28072: CALL_OW 257
28076: PUSH
28077: LD_INT 1
28079: PUSH
28080: LD_INT 2
28082: PUSH
28083: LD_INT 3
28085: PUSH
28086: LD_INT 4
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: IN
28095: PUSH
28096: LD_VAR 0 1
28100: PPUSH
28101: LD_INT 51
28103: PPUSH
28104: CALL_OW 321
28108: PUSH
28109: LD_INT 2
28111: EQUAL
28112: AND
28113: IFFALSE 28130
// bpoints := bpoints * 1.2 ;
28115: LD_ADDR_VAR 0 10
28119: PUSH
28120: LD_VAR 0 10
28124: PUSH
28125: LD_REAL  1.20000000000000E+0000
28128: MUL
28129: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28130: LD_VAR 0 6
28134: PPUSH
28135: CALL_OW 257
28139: PUSH
28140: LD_INT 5
28142: PUSH
28143: LD_INT 7
28145: PUSH
28146: LD_INT 9
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: LIST
28153: IN
28154: PUSH
28155: LD_VAR 0 1
28159: PPUSH
28160: LD_INT 52
28162: PPUSH
28163: CALL_OW 321
28167: PUSH
28168: LD_INT 2
28170: EQUAL
28171: AND
28172: IFFALSE 28189
// bpoints := bpoints * 1.5 ;
28174: LD_ADDR_VAR 0 10
28178: PUSH
28179: LD_VAR 0 10
28183: PUSH
28184: LD_REAL  1.50000000000000E+0000
28187: MUL
28188: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28189: LD_VAR 0 1
28193: PPUSH
28194: LD_INT 66
28196: PPUSH
28197: CALL_OW 321
28201: PUSH
28202: LD_INT 2
28204: EQUAL
28205: IFFALSE 28222
// bpoints := bpoints * 1.1 ;
28207: LD_ADDR_VAR 0 10
28211: PUSH
28212: LD_VAR 0 10
28216: PUSH
28217: LD_REAL  1.10000000000000E+0000
28220: MUL
28221: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28222: LD_ADDR_VAR 0 10
28226: PUSH
28227: LD_VAR 0 10
28231: PUSH
28232: LD_VAR 0 6
28236: PPUSH
28237: LD_INT 1
28239: PPUSH
28240: CALL_OW 259
28244: PUSH
28245: LD_REAL  1.15000000000000E+0000
28248: MUL
28249: MUL
28250: ST_TO_ADDR
// end ; unit_vehicle :
28251: GO 29075
28253: LD_INT 2
28255: DOUBLE
28256: EQUAL
28257: IFTRUE 28261
28259: GO 29063
28261: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28262: LD_VAR 0 6
28266: PPUSH
28267: CALL_OW 264
28271: PUSH
28272: LD_INT 2
28274: PUSH
28275: LD_INT 42
28277: PUSH
28278: LD_INT 24
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: LIST
28285: IN
28286: IFFALSE 28307
// points := [ 25 , 5 , 3 ] ;
28288: LD_ADDR_VAR 0 9
28292: PUSH
28293: LD_INT 25
28295: PUSH
28296: LD_INT 5
28298: PUSH
28299: LD_INT 3
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: LIST
28306: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28307: LD_VAR 0 6
28311: PPUSH
28312: CALL_OW 264
28316: PUSH
28317: LD_INT 4
28319: PUSH
28320: LD_INT 43
28322: PUSH
28323: LD_INT 25
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: LIST
28330: IN
28331: IFFALSE 28352
// points := [ 40 , 15 , 5 ] ;
28333: LD_ADDR_VAR 0 9
28337: PUSH
28338: LD_INT 40
28340: PUSH
28341: LD_INT 15
28343: PUSH
28344: LD_INT 5
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: LIST
28351: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28352: LD_VAR 0 6
28356: PPUSH
28357: CALL_OW 264
28361: PUSH
28362: LD_INT 3
28364: PUSH
28365: LD_INT 23
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: IN
28372: IFFALSE 28393
// points := [ 7 , 25 , 8 ] ;
28374: LD_ADDR_VAR 0 9
28378: PUSH
28379: LD_INT 7
28381: PUSH
28382: LD_INT 25
28384: PUSH
28385: LD_INT 8
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: LIST
28392: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28393: LD_VAR 0 6
28397: PPUSH
28398: CALL_OW 264
28402: PUSH
28403: LD_INT 5
28405: PUSH
28406: LD_INT 27
28408: PUSH
28409: LD_INT 44
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: LIST
28416: IN
28417: IFFALSE 28438
// points := [ 14 , 50 , 16 ] ;
28419: LD_ADDR_VAR 0 9
28423: PUSH
28424: LD_INT 14
28426: PUSH
28427: LD_INT 50
28429: PUSH
28430: LD_INT 16
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: LIST
28437: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28438: LD_VAR 0 6
28442: PPUSH
28443: CALL_OW 264
28447: PUSH
28448: LD_INT 6
28450: PUSH
28451: LD_INT 46
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: IN
28458: IFFALSE 28479
// points := [ 32 , 120 , 70 ] ;
28460: LD_ADDR_VAR 0 9
28464: PUSH
28465: LD_INT 32
28467: PUSH
28468: LD_INT 120
28470: PUSH
28471: LD_INT 70
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: LIST
28478: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
28479: LD_VAR 0 6
28483: PPUSH
28484: CALL_OW 264
28488: PUSH
28489: LD_INT 7
28491: PUSH
28492: LD_INT 28
28494: PUSH
28495: LD_INT 45
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: LIST
28502: IN
28503: IFFALSE 28524
// points := [ 35 , 20 , 45 ] ;
28505: LD_ADDR_VAR 0 9
28509: PUSH
28510: LD_INT 35
28512: PUSH
28513: LD_INT 20
28515: PUSH
28516: LD_INT 45
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: LIST
28523: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28524: LD_VAR 0 6
28528: PPUSH
28529: CALL_OW 264
28533: PUSH
28534: LD_INT 47
28536: PUSH
28537: EMPTY
28538: LIST
28539: IN
28540: IFFALSE 28561
// points := [ 67 , 45 , 75 ] ;
28542: LD_ADDR_VAR 0 9
28546: PUSH
28547: LD_INT 67
28549: PUSH
28550: LD_INT 45
28552: PUSH
28553: LD_INT 75
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: LIST
28560: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28561: LD_VAR 0 6
28565: PPUSH
28566: CALL_OW 264
28570: PUSH
28571: LD_INT 26
28573: PUSH
28574: EMPTY
28575: LIST
28576: IN
28577: IFFALSE 28598
// points := [ 120 , 30 , 80 ] ;
28579: LD_ADDR_VAR 0 9
28583: PUSH
28584: LD_INT 120
28586: PUSH
28587: LD_INT 30
28589: PUSH
28590: LD_INT 80
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: LIST
28597: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28598: LD_VAR 0 6
28602: PPUSH
28603: CALL_OW 264
28607: PUSH
28608: LD_INT 22
28610: PUSH
28611: EMPTY
28612: LIST
28613: IN
28614: IFFALSE 28635
// points := [ 40 , 1 , 1 ] ;
28616: LD_ADDR_VAR 0 9
28620: PUSH
28621: LD_INT 40
28623: PUSH
28624: LD_INT 1
28626: PUSH
28627: LD_INT 1
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: LIST
28634: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28635: LD_VAR 0 6
28639: PPUSH
28640: CALL_OW 264
28644: PUSH
28645: LD_INT 29
28647: PUSH
28648: EMPTY
28649: LIST
28650: IN
28651: IFFALSE 28672
// points := [ 70 , 200 , 400 ] ;
28653: LD_ADDR_VAR 0 9
28657: PUSH
28658: LD_INT 70
28660: PUSH
28661: LD_INT 200
28663: PUSH
28664: LD_INT 400
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: LIST
28671: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28672: LD_VAR 0 6
28676: PPUSH
28677: CALL_OW 264
28681: PUSH
28682: LD_INT 14
28684: PUSH
28685: LD_INT 53
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: IN
28692: IFFALSE 28713
// points := [ 40 , 10 , 20 ] ;
28694: LD_ADDR_VAR 0 9
28698: PUSH
28699: LD_INT 40
28701: PUSH
28702: LD_INT 10
28704: PUSH
28705: LD_INT 20
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: LIST
28712: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28713: LD_VAR 0 6
28717: PPUSH
28718: CALL_OW 264
28722: PUSH
28723: LD_INT 9
28725: PUSH
28726: EMPTY
28727: LIST
28728: IN
28729: IFFALSE 28750
// points := [ 5 , 70 , 20 ] ;
28731: LD_ADDR_VAR 0 9
28735: PUSH
28736: LD_INT 5
28738: PUSH
28739: LD_INT 70
28741: PUSH
28742: LD_INT 20
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: LIST
28749: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28750: LD_VAR 0 6
28754: PPUSH
28755: CALL_OW 264
28759: PUSH
28760: LD_INT 10
28762: PUSH
28763: EMPTY
28764: LIST
28765: IN
28766: IFFALSE 28787
// points := [ 35 , 110 , 70 ] ;
28768: LD_ADDR_VAR 0 9
28772: PUSH
28773: LD_INT 35
28775: PUSH
28776: LD_INT 110
28778: PUSH
28779: LD_INT 70
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: LIST
28786: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28787: LD_VAR 0 6
28791: PPUSH
28792: CALL_OW 265
28796: PUSH
28797: LD_INT 25
28799: EQUAL
28800: IFFALSE 28821
// points := [ 80 , 65 , 100 ] ;
28802: LD_ADDR_VAR 0 9
28806: PUSH
28807: LD_INT 80
28809: PUSH
28810: LD_INT 65
28812: PUSH
28813: LD_INT 100
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: LIST
28820: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28821: LD_VAR 0 6
28825: PPUSH
28826: CALL_OW 263
28830: PUSH
28831: LD_INT 1
28833: EQUAL
28834: IFFALSE 28869
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28836: LD_ADDR_VAR 0 10
28840: PUSH
28841: LD_VAR 0 10
28845: PUSH
28846: LD_VAR 0 6
28850: PPUSH
28851: CALL_OW 311
28855: PPUSH
28856: LD_INT 3
28858: PPUSH
28859: CALL_OW 259
28863: PUSH
28864: LD_INT 4
28866: MUL
28867: MUL
28868: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28869: LD_VAR 0 6
28873: PPUSH
28874: CALL_OW 263
28878: PUSH
28879: LD_INT 2
28881: EQUAL
28882: IFFALSE 28933
// begin j := IsControledBy ( i ) ;
28884: LD_ADDR_VAR 0 7
28888: PUSH
28889: LD_VAR 0 6
28893: PPUSH
28894: CALL_OW 312
28898: ST_TO_ADDR
// if j then
28899: LD_VAR 0 7
28903: IFFALSE 28933
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28905: LD_ADDR_VAR 0 10
28909: PUSH
28910: LD_VAR 0 10
28914: PUSH
28915: LD_VAR 0 7
28919: PPUSH
28920: LD_INT 3
28922: PPUSH
28923: CALL_OW 259
28927: PUSH
28928: LD_INT 3
28930: MUL
28931: MUL
28932: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28933: LD_VAR 0 6
28937: PPUSH
28938: CALL_OW 264
28942: PUSH
28943: LD_INT 5
28945: PUSH
28946: LD_INT 6
28948: PUSH
28949: LD_INT 46
28951: PUSH
28952: LD_INT 44
28954: PUSH
28955: LD_INT 47
28957: PUSH
28958: LD_INT 45
28960: PUSH
28961: LD_INT 28
28963: PUSH
28964: LD_INT 7
28966: PUSH
28967: LD_INT 27
28969: PUSH
28970: LD_INT 29
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: IN
28985: PUSH
28986: LD_VAR 0 1
28990: PPUSH
28991: LD_INT 52
28993: PPUSH
28994: CALL_OW 321
28998: PUSH
28999: LD_INT 2
29001: EQUAL
29002: AND
29003: IFFALSE 29020
// bpoints := bpoints * 1.2 ;
29005: LD_ADDR_VAR 0 10
29009: PUSH
29010: LD_VAR 0 10
29014: PUSH
29015: LD_REAL  1.20000000000000E+0000
29018: MUL
29019: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29020: LD_VAR 0 6
29024: PPUSH
29025: CALL_OW 264
29029: PUSH
29030: LD_INT 6
29032: PUSH
29033: LD_INT 46
29035: PUSH
29036: LD_INT 47
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: LIST
29043: IN
29044: IFFALSE 29061
// bpoints := bpoints * 1.2 ;
29046: LD_ADDR_VAR 0 10
29050: PUSH
29051: LD_VAR 0 10
29055: PUSH
29056: LD_REAL  1.20000000000000E+0000
29059: MUL
29060: ST_TO_ADDR
// end ; unit_building :
29061: GO 29075
29063: LD_INT 3
29065: DOUBLE
29066: EQUAL
29067: IFTRUE 29071
29069: GO 29074
29071: POP
// ; end ;
29072: GO 29075
29074: POP
// for j = 1 to 3 do
29075: LD_ADDR_VAR 0 7
29079: PUSH
29080: DOUBLE
29081: LD_INT 1
29083: DEC
29084: ST_TO_ADDR
29085: LD_INT 3
29087: PUSH
29088: FOR_TO
29089: IFFALSE 29142
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29091: LD_ADDR_VAR 0 5
29095: PUSH
29096: LD_VAR 0 5
29100: PPUSH
29101: LD_VAR 0 7
29105: PPUSH
29106: LD_VAR 0 5
29110: PUSH
29111: LD_VAR 0 7
29115: ARRAY
29116: PUSH
29117: LD_VAR 0 9
29121: PUSH
29122: LD_VAR 0 7
29126: ARRAY
29127: PUSH
29128: LD_VAR 0 10
29132: MUL
29133: PLUS
29134: PPUSH
29135: CALL_OW 1
29139: ST_TO_ADDR
29140: GO 29088
29142: POP
29143: POP
// end ;
29144: GO 27627
29146: POP
29147: POP
// result := Replace ( result , 4 , tmp ) ;
29148: LD_ADDR_VAR 0 5
29152: PUSH
29153: LD_VAR 0 5
29157: PPUSH
29158: LD_INT 4
29160: PPUSH
29161: LD_VAR 0 8
29165: PPUSH
29166: CALL_OW 1
29170: ST_TO_ADDR
// end ;
29171: LD_VAR 0 5
29175: RET
// export function DangerAtRange ( unit , range ) ; begin
29176: LD_INT 0
29178: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29179: LD_ADDR_VAR 0 3
29183: PUSH
29184: LD_VAR 0 1
29188: PPUSH
29189: CALL_OW 255
29193: PPUSH
29194: LD_VAR 0 1
29198: PPUSH
29199: CALL_OW 250
29203: PPUSH
29204: LD_VAR 0 1
29208: PPUSH
29209: CALL_OW 251
29213: PPUSH
29214: LD_VAR 0 2
29218: PPUSH
29219: CALL 27479 0 4
29223: ST_TO_ADDR
// end ;
29224: LD_VAR 0 3
29228: RET
// export function DangerInArea ( side , area ) ; begin
29229: LD_INT 0
29231: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29232: LD_ADDR_VAR 0 3
29236: PUSH
29237: LD_VAR 0 2
29241: PPUSH
29242: LD_INT 81
29244: PUSH
29245: LD_VAR 0 1
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PPUSH
29254: CALL_OW 70
29258: ST_TO_ADDR
// end ;
29259: LD_VAR 0 3
29263: RET
// export function IsExtension ( b ) ; begin
29264: LD_INT 0
29266: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29267: LD_ADDR_VAR 0 2
29271: PUSH
29272: LD_VAR 0 1
29276: PUSH
29277: LD_INT 23
29279: PUSH
29280: LD_INT 20
29282: PUSH
29283: LD_INT 22
29285: PUSH
29286: LD_INT 17
29288: PUSH
29289: LD_INT 24
29291: PUSH
29292: LD_INT 21
29294: PUSH
29295: LD_INT 19
29297: PUSH
29298: LD_INT 16
29300: PUSH
29301: LD_INT 25
29303: PUSH
29304: LD_INT 18
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: IN
29319: ST_TO_ADDR
// end ;
29320: LD_VAR 0 2
29324: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
29325: LD_INT 0
29327: PPUSH
29328: PPUSH
29329: PPUSH
// result := [ ] ;
29330: LD_ADDR_VAR 0 3
29334: PUSH
29335: EMPTY
29336: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29337: LD_ADDR_VAR 0 4
29341: PUSH
29342: LD_VAR 0 2
29346: PPUSH
29347: LD_INT 21
29349: PUSH
29350: LD_INT 3
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PPUSH
29357: CALL_OW 70
29361: ST_TO_ADDR
// if not tmp then
29362: LD_VAR 0 4
29366: NOT
29367: IFFALSE 29371
// exit ;
29369: GO 29429
// for i in tmp do
29371: LD_ADDR_VAR 0 5
29375: PUSH
29376: LD_VAR 0 4
29380: PUSH
29381: FOR_IN
29382: IFFALSE 29417
// if GetBase ( i ) <> base then
29384: LD_VAR 0 5
29388: PPUSH
29389: CALL_OW 274
29393: PUSH
29394: LD_VAR 0 1
29398: NONEQUAL
29399: IFFALSE 29415
// ComLinkToBase ( base , i ) ;
29401: LD_VAR 0 1
29405: PPUSH
29406: LD_VAR 0 5
29410: PPUSH
29411: CALL_OW 169
29415: GO 29381
29417: POP
29418: POP
// result := tmp ;
29419: LD_ADDR_VAR 0 3
29423: PUSH
29424: LD_VAR 0 4
29428: ST_TO_ADDR
// end ;
29429: LD_VAR 0 3
29433: RET
// export function ComComplete ( unit , b ) ; var i ; begin
29434: LD_INT 0
29436: PPUSH
29437: PPUSH
// if BuildingStatus ( b ) = bs_build then
29438: LD_VAR 0 2
29442: PPUSH
29443: CALL_OW 461
29447: PUSH
29448: LD_INT 1
29450: EQUAL
29451: IFFALSE 29511
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29453: LD_VAR 0 1
29457: PPUSH
29458: LD_STRING h
29460: PUSH
29461: LD_VAR 0 2
29465: PPUSH
29466: CALL_OW 250
29470: PUSH
29471: LD_VAR 0 2
29475: PPUSH
29476: CALL_OW 251
29480: PUSH
29481: LD_VAR 0 2
29485: PUSH
29486: LD_INT 0
29488: PUSH
29489: LD_INT 0
29491: PUSH
29492: LD_INT 0
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: PUSH
29504: EMPTY
29505: LIST
29506: PPUSH
29507: CALL_OW 446
// end ;
29511: LD_VAR 0 3
29515: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29516: LD_INT 0
29518: PPUSH
29519: PPUSH
29520: PPUSH
29521: PPUSH
29522: PPUSH
29523: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
29524: LD_VAR 0 1
29528: NOT
29529: PUSH
29530: LD_VAR 0 1
29534: PPUSH
29535: CALL_OW 263
29539: PUSH
29540: LD_INT 2
29542: EQUAL
29543: NOT
29544: OR
29545: IFFALSE 29549
// exit ;
29547: GO 29865
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29549: LD_ADDR_VAR 0 6
29553: PUSH
29554: LD_INT 22
29556: PUSH
29557: LD_VAR 0 1
29561: PPUSH
29562: CALL_OW 255
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 2
29573: PUSH
29574: LD_INT 30
29576: PUSH
29577: LD_INT 36
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: LD_INT 34
29586: PUSH
29587: LD_INT 31
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: LIST
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PPUSH
29603: CALL_OW 69
29607: ST_TO_ADDR
// if not tmp then
29608: LD_VAR 0 6
29612: NOT
29613: IFFALSE 29617
// exit ;
29615: GO 29865
// result := [ ] ;
29617: LD_ADDR_VAR 0 2
29621: PUSH
29622: EMPTY
29623: ST_TO_ADDR
// for i in tmp do
29624: LD_ADDR_VAR 0 3
29628: PUSH
29629: LD_VAR 0 6
29633: PUSH
29634: FOR_IN
29635: IFFALSE 29706
// begin t := UnitsInside ( i ) ;
29637: LD_ADDR_VAR 0 4
29641: PUSH
29642: LD_VAR 0 3
29646: PPUSH
29647: CALL_OW 313
29651: ST_TO_ADDR
// if t then
29652: LD_VAR 0 4
29656: IFFALSE 29704
// for j in t do
29658: LD_ADDR_VAR 0 7
29662: PUSH
29663: LD_VAR 0 4
29667: PUSH
29668: FOR_IN
29669: IFFALSE 29702
// result := Insert ( result , result + 1 , j ) ;
29671: LD_ADDR_VAR 0 2
29675: PUSH
29676: LD_VAR 0 2
29680: PPUSH
29681: LD_VAR 0 2
29685: PUSH
29686: LD_INT 1
29688: PLUS
29689: PPUSH
29690: LD_VAR 0 7
29694: PPUSH
29695: CALL_OW 2
29699: ST_TO_ADDR
29700: GO 29668
29702: POP
29703: POP
// end ;
29704: GO 29634
29706: POP
29707: POP
// if not result then
29708: LD_VAR 0 2
29712: NOT
29713: IFFALSE 29717
// exit ;
29715: GO 29865
// mech := result [ 1 ] ;
29717: LD_ADDR_VAR 0 5
29721: PUSH
29722: LD_VAR 0 2
29726: PUSH
29727: LD_INT 1
29729: ARRAY
29730: ST_TO_ADDR
// if result > 1 then
29731: LD_VAR 0 2
29735: PUSH
29736: LD_INT 1
29738: GREATER
29739: IFFALSE 29851
// for i = 2 to result do
29741: LD_ADDR_VAR 0 3
29745: PUSH
29746: DOUBLE
29747: LD_INT 2
29749: DEC
29750: ST_TO_ADDR
29751: LD_VAR 0 2
29755: PUSH
29756: FOR_TO
29757: IFFALSE 29849
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29759: LD_ADDR_VAR 0 4
29763: PUSH
29764: LD_VAR 0 2
29768: PUSH
29769: LD_VAR 0 3
29773: ARRAY
29774: PPUSH
29775: LD_INT 3
29777: PPUSH
29778: CALL_OW 259
29782: PUSH
29783: LD_VAR 0 2
29787: PUSH
29788: LD_VAR 0 3
29792: ARRAY
29793: PPUSH
29794: CALL_OW 432
29798: MINUS
29799: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29800: LD_VAR 0 4
29804: PUSH
29805: LD_VAR 0 5
29809: PPUSH
29810: LD_INT 3
29812: PPUSH
29813: CALL_OW 259
29817: PUSH
29818: LD_VAR 0 5
29822: PPUSH
29823: CALL_OW 432
29827: MINUS
29828: GREATEREQUAL
29829: IFFALSE 29847
// mech := result [ i ] ;
29831: LD_ADDR_VAR 0 5
29835: PUSH
29836: LD_VAR 0 2
29840: PUSH
29841: LD_VAR 0 3
29845: ARRAY
29846: ST_TO_ADDR
// end ;
29847: GO 29756
29849: POP
29850: POP
// ComLinkTo ( vehicle , mech ) ;
29851: LD_VAR 0 1
29855: PPUSH
29856: LD_VAR 0 5
29860: PPUSH
29861: CALL_OW 135
// end ;
29865: LD_VAR 0 2
29869: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29870: LD_INT 0
29872: PPUSH
29873: PPUSH
29874: PPUSH
29875: PPUSH
29876: PPUSH
29877: PPUSH
29878: PPUSH
29879: PPUSH
29880: PPUSH
29881: PPUSH
29882: PPUSH
29883: PPUSH
29884: PPUSH
// result := [ ] ;
29885: LD_ADDR_VAR 0 7
29889: PUSH
29890: EMPTY
29891: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29892: LD_VAR 0 1
29896: PPUSH
29897: CALL_OW 266
29901: PUSH
29902: LD_INT 0
29904: PUSH
29905: LD_INT 1
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: IN
29912: NOT
29913: IFFALSE 29917
// exit ;
29915: GO 31548
// if name then
29917: LD_VAR 0 3
29921: IFFALSE 29937
// SetBName ( base_dep , name ) ;
29923: LD_VAR 0 1
29927: PPUSH
29928: LD_VAR 0 3
29932: PPUSH
29933: CALL_OW 500
// base := GetBase ( base_dep ) ;
29937: LD_ADDR_VAR 0 15
29941: PUSH
29942: LD_VAR 0 1
29946: PPUSH
29947: CALL_OW 274
29951: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29952: LD_ADDR_VAR 0 16
29956: PUSH
29957: LD_VAR 0 1
29961: PPUSH
29962: CALL_OW 255
29966: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29967: LD_ADDR_VAR 0 17
29971: PUSH
29972: LD_VAR 0 1
29976: PPUSH
29977: CALL_OW 248
29981: ST_TO_ADDR
// if sources then
29982: LD_VAR 0 5
29986: IFFALSE 30033
// for i = 1 to 3 do
29988: LD_ADDR_VAR 0 8
29992: PUSH
29993: DOUBLE
29994: LD_INT 1
29996: DEC
29997: ST_TO_ADDR
29998: LD_INT 3
30000: PUSH
30001: FOR_TO
30002: IFFALSE 30031
// AddResourceType ( base , i , sources [ i ] ) ;
30004: LD_VAR 0 15
30008: PPUSH
30009: LD_VAR 0 8
30013: PPUSH
30014: LD_VAR 0 5
30018: PUSH
30019: LD_VAR 0 8
30023: ARRAY
30024: PPUSH
30025: CALL_OW 276
30029: GO 30001
30031: POP
30032: POP
// buildings := GetBaseBuildings ( base , area ) ;
30033: LD_ADDR_VAR 0 18
30037: PUSH
30038: LD_VAR 0 15
30042: PPUSH
30043: LD_VAR 0 2
30047: PPUSH
30048: CALL 29325 0 2
30052: ST_TO_ADDR
// InitHc ;
30053: CALL_OW 19
// InitUc ;
30057: CALL_OW 18
// uc_side := side ;
30061: LD_ADDR_OWVAR 20
30065: PUSH
30066: LD_VAR 0 16
30070: ST_TO_ADDR
// uc_nation := nation ;
30071: LD_ADDR_OWVAR 21
30075: PUSH
30076: LD_VAR 0 17
30080: ST_TO_ADDR
// if buildings then
30081: LD_VAR 0 18
30085: IFFALSE 31407
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30087: LD_ADDR_VAR 0 19
30091: PUSH
30092: LD_VAR 0 18
30096: PPUSH
30097: LD_INT 2
30099: PUSH
30100: LD_INT 30
30102: PUSH
30103: LD_INT 29
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 30
30112: PUSH
30113: LD_INT 30
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: LIST
30124: PPUSH
30125: CALL_OW 72
30129: ST_TO_ADDR
// if tmp then
30130: LD_VAR 0 19
30134: IFFALSE 30182
// for i in tmp do
30136: LD_ADDR_VAR 0 8
30140: PUSH
30141: LD_VAR 0 19
30145: PUSH
30146: FOR_IN
30147: IFFALSE 30180
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30149: LD_VAR 0 8
30153: PPUSH
30154: CALL_OW 250
30158: PPUSH
30159: LD_VAR 0 8
30163: PPUSH
30164: CALL_OW 251
30168: PPUSH
30169: LD_VAR 0 16
30173: PPUSH
30174: CALL_OW 441
30178: GO 30146
30180: POP
30181: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30182: LD_VAR 0 18
30186: PPUSH
30187: LD_INT 2
30189: PUSH
30190: LD_INT 30
30192: PUSH
30193: LD_INT 32
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 30
30202: PUSH
30203: LD_INT 33
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: LIST
30214: PPUSH
30215: CALL_OW 72
30219: IFFALSE 30307
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30221: LD_ADDR_VAR 0 8
30225: PUSH
30226: LD_VAR 0 18
30230: PPUSH
30231: LD_INT 2
30233: PUSH
30234: LD_INT 30
30236: PUSH
30237: LD_INT 32
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 30
30246: PUSH
30247: LD_INT 33
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: LIST
30258: PPUSH
30259: CALL_OW 72
30263: PUSH
30264: FOR_IN
30265: IFFALSE 30305
// begin if not GetBWeapon ( i ) then
30267: LD_VAR 0 8
30271: PPUSH
30272: CALL_OW 269
30276: NOT
30277: IFFALSE 30303
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30279: LD_VAR 0 8
30283: PPUSH
30284: LD_VAR 0 8
30288: PPUSH
30289: LD_VAR 0 2
30293: PPUSH
30294: CALL 31553 0 2
30298: PPUSH
30299: CALL_OW 431
// end ;
30303: GO 30264
30305: POP
30306: POP
// end ; for i = 1 to personel do
30307: LD_ADDR_VAR 0 8
30311: PUSH
30312: DOUBLE
30313: LD_INT 1
30315: DEC
30316: ST_TO_ADDR
30317: LD_VAR 0 6
30321: PUSH
30322: FOR_TO
30323: IFFALSE 31387
// begin if i > 4 then
30325: LD_VAR 0 8
30329: PUSH
30330: LD_INT 4
30332: GREATER
30333: IFFALSE 30337
// break ;
30335: GO 31387
// case i of 1 :
30337: LD_VAR 0 8
30341: PUSH
30342: LD_INT 1
30344: DOUBLE
30345: EQUAL
30346: IFTRUE 30350
30348: GO 30430
30350: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30351: LD_ADDR_VAR 0 12
30355: PUSH
30356: LD_VAR 0 18
30360: PPUSH
30361: LD_INT 22
30363: PUSH
30364: LD_VAR 0 16
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 58
30375: PUSH
30376: EMPTY
30377: LIST
30378: PUSH
30379: LD_INT 2
30381: PUSH
30382: LD_INT 30
30384: PUSH
30385: LD_INT 32
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 30
30394: PUSH
30395: LD_INT 4
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 30
30404: PUSH
30405: LD_INT 5
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: LIST
30422: PPUSH
30423: CALL_OW 72
30427: ST_TO_ADDR
30428: GO 30652
30430: LD_INT 2
30432: DOUBLE
30433: EQUAL
30434: IFTRUE 30438
30436: GO 30500
30438: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30439: LD_ADDR_VAR 0 12
30443: PUSH
30444: LD_VAR 0 18
30448: PPUSH
30449: LD_INT 22
30451: PUSH
30452: LD_VAR 0 16
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 2
30463: PUSH
30464: LD_INT 30
30466: PUSH
30467: LD_INT 0
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 30
30476: PUSH
30477: LD_INT 1
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: LIST
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PPUSH
30493: CALL_OW 72
30497: ST_TO_ADDR
30498: GO 30652
30500: LD_INT 3
30502: DOUBLE
30503: EQUAL
30504: IFTRUE 30508
30506: GO 30570
30508: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30509: LD_ADDR_VAR 0 12
30513: PUSH
30514: LD_VAR 0 18
30518: PPUSH
30519: LD_INT 22
30521: PUSH
30522: LD_VAR 0 16
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 2
30533: PUSH
30534: LD_INT 30
30536: PUSH
30537: LD_INT 2
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 30
30546: PUSH
30547: LD_INT 3
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: LIST
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PPUSH
30563: CALL_OW 72
30567: ST_TO_ADDR
30568: GO 30652
30570: LD_INT 4
30572: DOUBLE
30573: EQUAL
30574: IFTRUE 30578
30576: GO 30651
30578: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30579: LD_ADDR_VAR 0 12
30583: PUSH
30584: LD_VAR 0 18
30588: PPUSH
30589: LD_INT 22
30591: PUSH
30592: LD_VAR 0 16
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 2
30603: PUSH
30604: LD_INT 30
30606: PUSH
30607: LD_INT 6
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 30
30616: PUSH
30617: LD_INT 7
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 30
30626: PUSH
30627: LD_INT 8
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PPUSH
30644: CALL_OW 72
30648: ST_TO_ADDR
30649: GO 30652
30651: POP
// if i = 1 then
30652: LD_VAR 0 8
30656: PUSH
30657: LD_INT 1
30659: EQUAL
30660: IFFALSE 30771
// begin tmp := [ ] ;
30662: LD_ADDR_VAR 0 19
30666: PUSH
30667: EMPTY
30668: ST_TO_ADDR
// for j in f do
30669: LD_ADDR_VAR 0 9
30673: PUSH
30674: LD_VAR 0 12
30678: PUSH
30679: FOR_IN
30680: IFFALSE 30753
// if GetBType ( j ) = b_bunker then
30682: LD_VAR 0 9
30686: PPUSH
30687: CALL_OW 266
30691: PUSH
30692: LD_INT 32
30694: EQUAL
30695: IFFALSE 30722
// tmp := Insert ( tmp , 1 , j ) else
30697: LD_ADDR_VAR 0 19
30701: PUSH
30702: LD_VAR 0 19
30706: PPUSH
30707: LD_INT 1
30709: PPUSH
30710: LD_VAR 0 9
30714: PPUSH
30715: CALL_OW 2
30719: ST_TO_ADDR
30720: GO 30751
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30722: LD_ADDR_VAR 0 19
30726: PUSH
30727: LD_VAR 0 19
30731: PPUSH
30732: LD_VAR 0 19
30736: PUSH
30737: LD_INT 1
30739: PLUS
30740: PPUSH
30741: LD_VAR 0 9
30745: PPUSH
30746: CALL_OW 2
30750: ST_TO_ADDR
30751: GO 30679
30753: POP
30754: POP
// if tmp then
30755: LD_VAR 0 19
30759: IFFALSE 30771
// f := tmp ;
30761: LD_ADDR_VAR 0 12
30765: PUSH
30766: LD_VAR 0 19
30770: ST_TO_ADDR
// end ; x := personel [ i ] ;
30771: LD_ADDR_VAR 0 13
30775: PUSH
30776: LD_VAR 0 6
30780: PUSH
30781: LD_VAR 0 8
30785: ARRAY
30786: ST_TO_ADDR
// if x = - 1 then
30787: LD_VAR 0 13
30791: PUSH
30792: LD_INT 1
30794: NEG
30795: EQUAL
30796: IFFALSE 31005
// begin for j in f do
30798: LD_ADDR_VAR 0 9
30802: PUSH
30803: LD_VAR 0 12
30807: PUSH
30808: FOR_IN
30809: IFFALSE 31001
// repeat InitHc ;
30811: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30815: LD_VAR 0 9
30819: PPUSH
30820: CALL_OW 266
30824: PUSH
30825: LD_INT 5
30827: EQUAL
30828: IFFALSE 30898
// begin if UnitsInside ( j ) < 3 then
30830: LD_VAR 0 9
30834: PPUSH
30835: CALL_OW 313
30839: PUSH
30840: LD_INT 3
30842: LESS
30843: IFFALSE 30879
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30845: LD_INT 0
30847: PPUSH
30848: LD_INT 5
30850: PUSH
30851: LD_INT 8
30853: PUSH
30854: LD_INT 9
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: LIST
30861: PUSH
30862: LD_VAR 0 17
30866: ARRAY
30867: PPUSH
30868: LD_VAR 0 4
30872: PPUSH
30873: CALL_OW 380
30877: GO 30896
// PrepareHuman ( false , i , skill ) ;
30879: LD_INT 0
30881: PPUSH
30882: LD_VAR 0 8
30886: PPUSH
30887: LD_VAR 0 4
30891: PPUSH
30892: CALL_OW 380
// end else
30896: GO 30915
// PrepareHuman ( false , i , skill ) ;
30898: LD_INT 0
30900: PPUSH
30901: LD_VAR 0 8
30905: PPUSH
30906: LD_VAR 0 4
30910: PPUSH
30911: CALL_OW 380
// un := CreateHuman ;
30915: LD_ADDR_VAR 0 14
30919: PUSH
30920: CALL_OW 44
30924: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30925: LD_ADDR_VAR 0 7
30929: PUSH
30930: LD_VAR 0 7
30934: PPUSH
30935: LD_INT 1
30937: PPUSH
30938: LD_VAR 0 14
30942: PPUSH
30943: CALL_OW 2
30947: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30948: LD_VAR 0 14
30952: PPUSH
30953: LD_VAR 0 9
30957: PPUSH
30958: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30962: LD_VAR 0 9
30966: PPUSH
30967: CALL_OW 313
30971: PUSH
30972: LD_INT 6
30974: EQUAL
30975: PUSH
30976: LD_VAR 0 9
30980: PPUSH
30981: CALL_OW 266
30985: PUSH
30986: LD_INT 32
30988: PUSH
30989: LD_INT 31
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: IN
30996: OR
30997: IFFALSE 30811
30999: GO 30808
31001: POP
31002: POP
// end else
31003: GO 31385
// for j = 1 to x do
31005: LD_ADDR_VAR 0 9
31009: PUSH
31010: DOUBLE
31011: LD_INT 1
31013: DEC
31014: ST_TO_ADDR
31015: LD_VAR 0 13
31019: PUSH
31020: FOR_TO
31021: IFFALSE 31383
// begin InitHc ;
31023: CALL_OW 19
// if not f then
31027: LD_VAR 0 12
31031: NOT
31032: IFFALSE 31121
// begin PrepareHuman ( false , i , skill ) ;
31034: LD_INT 0
31036: PPUSH
31037: LD_VAR 0 8
31041: PPUSH
31042: LD_VAR 0 4
31046: PPUSH
31047: CALL_OW 380
// un := CreateHuman ;
31051: LD_ADDR_VAR 0 14
31055: PUSH
31056: CALL_OW 44
31060: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31061: LD_ADDR_VAR 0 7
31065: PUSH
31066: LD_VAR 0 7
31070: PPUSH
31071: LD_INT 1
31073: PPUSH
31074: LD_VAR 0 14
31078: PPUSH
31079: CALL_OW 2
31083: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31084: LD_VAR 0 14
31088: PPUSH
31089: LD_VAR 0 1
31093: PPUSH
31094: CALL_OW 250
31098: PPUSH
31099: LD_VAR 0 1
31103: PPUSH
31104: CALL_OW 251
31108: PPUSH
31109: LD_INT 10
31111: PPUSH
31112: LD_INT 0
31114: PPUSH
31115: CALL_OW 50
// continue ;
31119: GO 31020
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31121: LD_VAR 0 12
31125: PUSH
31126: LD_INT 1
31128: ARRAY
31129: PPUSH
31130: CALL_OW 313
31134: PUSH
31135: LD_VAR 0 12
31139: PUSH
31140: LD_INT 1
31142: ARRAY
31143: PPUSH
31144: CALL_OW 266
31148: PUSH
31149: LD_INT 32
31151: PUSH
31152: LD_INT 31
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: IN
31159: AND
31160: PUSH
31161: LD_VAR 0 12
31165: PUSH
31166: LD_INT 1
31168: ARRAY
31169: PPUSH
31170: CALL_OW 313
31174: PUSH
31175: LD_INT 6
31177: EQUAL
31178: OR
31179: IFFALSE 31199
// f := Delete ( f , 1 ) ;
31181: LD_ADDR_VAR 0 12
31185: PUSH
31186: LD_VAR 0 12
31190: PPUSH
31191: LD_INT 1
31193: PPUSH
31194: CALL_OW 3
31198: ST_TO_ADDR
// if not f then
31199: LD_VAR 0 12
31203: NOT
31204: IFFALSE 31222
// begin x := x + 2 ;
31206: LD_ADDR_VAR 0 13
31210: PUSH
31211: LD_VAR 0 13
31215: PUSH
31216: LD_INT 2
31218: PLUS
31219: ST_TO_ADDR
// continue ;
31220: GO 31020
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31222: LD_VAR 0 12
31226: PUSH
31227: LD_INT 1
31229: ARRAY
31230: PPUSH
31231: CALL_OW 266
31235: PUSH
31236: LD_INT 5
31238: EQUAL
31239: IFFALSE 31313
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31241: LD_VAR 0 12
31245: PUSH
31246: LD_INT 1
31248: ARRAY
31249: PPUSH
31250: CALL_OW 313
31254: PUSH
31255: LD_INT 3
31257: LESS
31258: IFFALSE 31294
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31260: LD_INT 0
31262: PPUSH
31263: LD_INT 5
31265: PUSH
31266: LD_INT 8
31268: PUSH
31269: LD_INT 9
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: LIST
31276: PUSH
31277: LD_VAR 0 17
31281: ARRAY
31282: PPUSH
31283: LD_VAR 0 4
31287: PPUSH
31288: CALL_OW 380
31292: GO 31311
// PrepareHuman ( false , i , skill ) ;
31294: LD_INT 0
31296: PPUSH
31297: LD_VAR 0 8
31301: PPUSH
31302: LD_VAR 0 4
31306: PPUSH
31307: CALL_OW 380
// end else
31311: GO 31330
// PrepareHuman ( false , i , skill ) ;
31313: LD_INT 0
31315: PPUSH
31316: LD_VAR 0 8
31320: PPUSH
31321: LD_VAR 0 4
31325: PPUSH
31326: CALL_OW 380
// un := CreateHuman ;
31330: LD_ADDR_VAR 0 14
31334: PUSH
31335: CALL_OW 44
31339: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31340: LD_ADDR_VAR 0 7
31344: PUSH
31345: LD_VAR 0 7
31349: PPUSH
31350: LD_INT 1
31352: PPUSH
31353: LD_VAR 0 14
31357: PPUSH
31358: CALL_OW 2
31362: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31363: LD_VAR 0 14
31367: PPUSH
31368: LD_VAR 0 12
31372: PUSH
31373: LD_INT 1
31375: ARRAY
31376: PPUSH
31377: CALL_OW 52
// end ;
31381: GO 31020
31383: POP
31384: POP
// end ;
31385: GO 30322
31387: POP
31388: POP
// result := result ^ buildings ;
31389: LD_ADDR_VAR 0 7
31393: PUSH
31394: LD_VAR 0 7
31398: PUSH
31399: LD_VAR 0 18
31403: ADD
31404: ST_TO_ADDR
// end else
31405: GO 31548
// begin for i = 1 to personel do
31407: LD_ADDR_VAR 0 8
31411: PUSH
31412: DOUBLE
31413: LD_INT 1
31415: DEC
31416: ST_TO_ADDR
31417: LD_VAR 0 6
31421: PUSH
31422: FOR_TO
31423: IFFALSE 31546
// begin if i > 4 then
31425: LD_VAR 0 8
31429: PUSH
31430: LD_INT 4
31432: GREATER
31433: IFFALSE 31437
// break ;
31435: GO 31546
// x := personel [ i ] ;
31437: LD_ADDR_VAR 0 13
31441: PUSH
31442: LD_VAR 0 6
31446: PUSH
31447: LD_VAR 0 8
31451: ARRAY
31452: ST_TO_ADDR
// if x = - 1 then
31453: LD_VAR 0 13
31457: PUSH
31458: LD_INT 1
31460: NEG
31461: EQUAL
31462: IFFALSE 31466
// continue ;
31464: GO 31422
// PrepareHuman ( false , i , skill ) ;
31466: LD_INT 0
31468: PPUSH
31469: LD_VAR 0 8
31473: PPUSH
31474: LD_VAR 0 4
31478: PPUSH
31479: CALL_OW 380
// un := CreateHuman ;
31483: LD_ADDR_VAR 0 14
31487: PUSH
31488: CALL_OW 44
31492: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31493: LD_VAR 0 14
31497: PPUSH
31498: LD_VAR 0 1
31502: PPUSH
31503: CALL_OW 250
31507: PPUSH
31508: LD_VAR 0 1
31512: PPUSH
31513: CALL_OW 251
31517: PPUSH
31518: LD_INT 10
31520: PPUSH
31521: LD_INT 0
31523: PPUSH
31524: CALL_OW 50
// result := result ^ un ;
31528: LD_ADDR_VAR 0 7
31532: PUSH
31533: LD_VAR 0 7
31537: PUSH
31538: LD_VAR 0 14
31542: ADD
31543: ST_TO_ADDR
// end ;
31544: GO 31422
31546: POP
31547: POP
// end ; end ;
31548: LD_VAR 0 7
31552: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31553: LD_INT 0
31555: PPUSH
31556: PPUSH
31557: PPUSH
31558: PPUSH
31559: PPUSH
31560: PPUSH
31561: PPUSH
31562: PPUSH
31563: PPUSH
31564: PPUSH
31565: PPUSH
31566: PPUSH
31567: PPUSH
31568: PPUSH
31569: PPUSH
31570: PPUSH
// result := false ;
31571: LD_ADDR_VAR 0 3
31575: PUSH
31576: LD_INT 0
31578: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31579: LD_VAR 0 1
31583: NOT
31584: PUSH
31585: LD_VAR 0 1
31589: PPUSH
31590: CALL_OW 266
31594: PUSH
31595: LD_INT 32
31597: PUSH
31598: LD_INT 33
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: IN
31605: NOT
31606: OR
31607: IFFALSE 31611
// exit ;
31609: GO 32747
// nat := GetNation ( tower ) ;
31611: LD_ADDR_VAR 0 12
31615: PUSH
31616: LD_VAR 0 1
31620: PPUSH
31621: CALL_OW 248
31625: ST_TO_ADDR
// side := GetSide ( tower ) ;
31626: LD_ADDR_VAR 0 16
31630: PUSH
31631: LD_VAR 0 1
31635: PPUSH
31636: CALL_OW 255
31640: ST_TO_ADDR
// x := GetX ( tower ) ;
31641: LD_ADDR_VAR 0 10
31645: PUSH
31646: LD_VAR 0 1
31650: PPUSH
31651: CALL_OW 250
31655: ST_TO_ADDR
// y := GetY ( tower ) ;
31656: LD_ADDR_VAR 0 11
31660: PUSH
31661: LD_VAR 0 1
31665: PPUSH
31666: CALL_OW 251
31670: ST_TO_ADDR
// if not x or not y then
31671: LD_VAR 0 10
31675: NOT
31676: PUSH
31677: LD_VAR 0 11
31681: NOT
31682: OR
31683: IFFALSE 31687
// exit ;
31685: GO 32747
// weapon := 0 ;
31687: LD_ADDR_VAR 0 18
31691: PUSH
31692: LD_INT 0
31694: ST_TO_ADDR
// fac_list := [ ] ;
31695: LD_ADDR_VAR 0 17
31699: PUSH
31700: EMPTY
31701: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
31702: LD_ADDR_VAR 0 6
31706: PUSH
31707: LD_VAR 0 1
31711: PPUSH
31712: CALL_OW 274
31716: PPUSH
31717: LD_VAR 0 2
31721: PPUSH
31722: CALL 29325 0 2
31726: PPUSH
31727: LD_INT 30
31729: PUSH
31730: LD_INT 3
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PPUSH
31737: CALL_OW 72
31741: ST_TO_ADDR
// if not factories then
31742: LD_VAR 0 6
31746: NOT
31747: IFFALSE 31751
// exit ;
31749: GO 32747
// for i in factories do
31751: LD_ADDR_VAR 0 8
31755: PUSH
31756: LD_VAR 0 6
31760: PUSH
31761: FOR_IN
31762: IFFALSE 31787
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31764: LD_ADDR_VAR 0 17
31768: PUSH
31769: LD_VAR 0 17
31773: PUSH
31774: LD_VAR 0 8
31778: PPUSH
31779: CALL_OW 478
31783: UNION
31784: ST_TO_ADDR
31785: GO 31761
31787: POP
31788: POP
// if not fac_list then
31789: LD_VAR 0 17
31793: NOT
31794: IFFALSE 31798
// exit ;
31796: GO 32747
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31798: LD_ADDR_VAR 0 5
31802: PUSH
31803: LD_INT 4
31805: PUSH
31806: LD_INT 5
31808: PUSH
31809: LD_INT 9
31811: PUSH
31812: LD_INT 10
31814: PUSH
31815: LD_INT 6
31817: PUSH
31818: LD_INT 7
31820: PUSH
31821: LD_INT 11
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 27
31835: PUSH
31836: LD_INT 28
31838: PUSH
31839: LD_INT 26
31841: PUSH
31842: LD_INT 30
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 43
31853: PUSH
31854: LD_INT 44
31856: PUSH
31857: LD_INT 46
31859: PUSH
31860: LD_INT 45
31862: PUSH
31863: LD_INT 47
31865: PUSH
31866: LD_INT 49
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: LIST
31881: PUSH
31882: LD_VAR 0 12
31886: ARRAY
31887: ST_TO_ADDR
// for i in list do
31888: LD_ADDR_VAR 0 8
31892: PUSH
31893: LD_VAR 0 5
31897: PUSH
31898: FOR_IN
31899: IFFALSE 31932
// if not i in fac_list then
31901: LD_VAR 0 8
31905: PUSH
31906: LD_VAR 0 17
31910: IN
31911: NOT
31912: IFFALSE 31930
// list := list diff i ;
31914: LD_ADDR_VAR 0 5
31918: PUSH
31919: LD_VAR 0 5
31923: PUSH
31924: LD_VAR 0 8
31928: DIFF
31929: ST_TO_ADDR
31930: GO 31898
31932: POP
31933: POP
// if not list then
31934: LD_VAR 0 5
31938: NOT
31939: IFFALSE 31943
// exit ;
31941: GO 32747
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31943: LD_VAR 0 12
31947: PUSH
31948: LD_INT 3
31950: EQUAL
31951: PUSH
31952: LD_INT 49
31954: PUSH
31955: LD_VAR 0 5
31959: IN
31960: AND
31961: PUSH
31962: LD_INT 31
31964: PPUSH
31965: LD_VAR 0 16
31969: PPUSH
31970: CALL_OW 321
31974: PUSH
31975: LD_INT 2
31977: EQUAL
31978: AND
31979: IFFALSE 32039
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31981: LD_INT 22
31983: PUSH
31984: LD_VAR 0 16
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 35
31995: PUSH
31996: LD_INT 49
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 91
32005: PUSH
32006: LD_VAR 0 1
32010: PUSH
32011: LD_INT 10
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: LIST
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: LIST
32023: PPUSH
32024: CALL_OW 69
32028: NOT
32029: IFFALSE 32039
// weapon := ru_time_lapser ;
32031: LD_ADDR_VAR 0 18
32035: PUSH
32036: LD_INT 49
32038: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32039: LD_VAR 0 12
32043: PUSH
32044: LD_INT 1
32046: PUSH
32047: LD_INT 2
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: IN
32054: PUSH
32055: LD_INT 11
32057: PUSH
32058: LD_VAR 0 5
32062: IN
32063: PUSH
32064: LD_INT 30
32066: PUSH
32067: LD_VAR 0 5
32071: IN
32072: OR
32073: AND
32074: PUSH
32075: LD_INT 6
32077: PPUSH
32078: LD_VAR 0 16
32082: PPUSH
32083: CALL_OW 321
32087: PUSH
32088: LD_INT 2
32090: EQUAL
32091: AND
32092: IFFALSE 32257
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32094: LD_INT 22
32096: PUSH
32097: LD_VAR 0 16
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 2
32108: PUSH
32109: LD_INT 35
32111: PUSH
32112: LD_INT 11
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 35
32121: PUSH
32122: LD_INT 30
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 91
32136: PUSH
32137: LD_VAR 0 1
32141: PUSH
32142: LD_INT 18
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: LIST
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: LIST
32154: PPUSH
32155: CALL_OW 69
32159: NOT
32160: PUSH
32161: LD_INT 22
32163: PUSH
32164: LD_VAR 0 16
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 2
32175: PUSH
32176: LD_INT 30
32178: PUSH
32179: LD_INT 32
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 30
32188: PUSH
32189: LD_INT 33
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 91
32203: PUSH
32204: LD_VAR 0 1
32208: PUSH
32209: LD_INT 12
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: LIST
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: LIST
32221: PUSH
32222: EMPTY
32223: LIST
32224: PPUSH
32225: CALL_OW 69
32229: PUSH
32230: LD_INT 2
32232: GREATER
32233: AND
32234: IFFALSE 32257
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32236: LD_ADDR_VAR 0 18
32240: PUSH
32241: LD_INT 11
32243: PUSH
32244: LD_INT 30
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_VAR 0 12
32255: ARRAY
32256: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32257: LD_VAR 0 18
32261: NOT
32262: PUSH
32263: LD_INT 40
32265: PPUSH
32266: LD_VAR 0 16
32270: PPUSH
32271: CALL_OW 321
32275: PUSH
32276: LD_INT 2
32278: EQUAL
32279: AND
32280: PUSH
32281: LD_INT 7
32283: PUSH
32284: LD_VAR 0 5
32288: IN
32289: PUSH
32290: LD_INT 28
32292: PUSH
32293: LD_VAR 0 5
32297: IN
32298: OR
32299: PUSH
32300: LD_INT 45
32302: PUSH
32303: LD_VAR 0 5
32307: IN
32308: OR
32309: AND
32310: IFFALSE 32564
// begin hex := GetHexInfo ( x , y ) ;
32312: LD_ADDR_VAR 0 4
32316: PUSH
32317: LD_VAR 0 10
32321: PPUSH
32322: LD_VAR 0 11
32326: PPUSH
32327: CALL_OW 546
32331: ST_TO_ADDR
// if hex [ 1 ] then
32332: LD_VAR 0 4
32336: PUSH
32337: LD_INT 1
32339: ARRAY
32340: IFFALSE 32344
// exit ;
32342: GO 32747
// height := hex [ 2 ] ;
32344: LD_ADDR_VAR 0 15
32348: PUSH
32349: LD_VAR 0 4
32353: PUSH
32354: LD_INT 2
32356: ARRAY
32357: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32358: LD_ADDR_VAR 0 14
32362: PUSH
32363: LD_INT 0
32365: PUSH
32366: LD_INT 2
32368: PUSH
32369: LD_INT 3
32371: PUSH
32372: LD_INT 5
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: ST_TO_ADDR
// for i in tmp do
32381: LD_ADDR_VAR 0 8
32385: PUSH
32386: LD_VAR 0 14
32390: PUSH
32391: FOR_IN
32392: IFFALSE 32562
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32394: LD_ADDR_VAR 0 9
32398: PUSH
32399: LD_VAR 0 10
32403: PPUSH
32404: LD_VAR 0 8
32408: PPUSH
32409: LD_INT 5
32411: PPUSH
32412: CALL_OW 272
32416: PUSH
32417: LD_VAR 0 11
32421: PPUSH
32422: LD_VAR 0 8
32426: PPUSH
32427: LD_INT 5
32429: PPUSH
32430: CALL_OW 273
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32439: LD_VAR 0 9
32443: PUSH
32444: LD_INT 1
32446: ARRAY
32447: PPUSH
32448: LD_VAR 0 9
32452: PUSH
32453: LD_INT 2
32455: ARRAY
32456: PPUSH
32457: CALL_OW 488
32461: IFFALSE 32560
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32463: LD_ADDR_VAR 0 4
32467: PUSH
32468: LD_VAR 0 9
32472: PUSH
32473: LD_INT 1
32475: ARRAY
32476: PPUSH
32477: LD_VAR 0 9
32481: PUSH
32482: LD_INT 2
32484: ARRAY
32485: PPUSH
32486: CALL_OW 546
32490: ST_TO_ADDR
// if hex [ 1 ] then
32491: LD_VAR 0 4
32495: PUSH
32496: LD_INT 1
32498: ARRAY
32499: IFFALSE 32503
// continue ;
32501: GO 32391
// h := hex [ 2 ] ;
32503: LD_ADDR_VAR 0 13
32507: PUSH
32508: LD_VAR 0 4
32512: PUSH
32513: LD_INT 2
32515: ARRAY
32516: ST_TO_ADDR
// if h + 7 < height then
32517: LD_VAR 0 13
32521: PUSH
32522: LD_INT 7
32524: PLUS
32525: PUSH
32526: LD_VAR 0 15
32530: LESS
32531: IFFALSE 32560
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32533: LD_ADDR_VAR 0 18
32537: PUSH
32538: LD_INT 7
32540: PUSH
32541: LD_INT 28
32543: PUSH
32544: LD_INT 45
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: LIST
32551: PUSH
32552: LD_VAR 0 12
32556: ARRAY
32557: ST_TO_ADDR
// break ;
32558: GO 32562
// end ; end ; end ;
32560: GO 32391
32562: POP
32563: POP
// end ; if not weapon then
32564: LD_VAR 0 18
32568: NOT
32569: IFFALSE 32629
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32571: LD_ADDR_VAR 0 5
32575: PUSH
32576: LD_VAR 0 5
32580: PUSH
32581: LD_INT 11
32583: PUSH
32584: LD_INT 30
32586: PUSH
32587: LD_INT 49
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: LIST
32594: DIFF
32595: ST_TO_ADDR
// if not list then
32596: LD_VAR 0 5
32600: NOT
32601: IFFALSE 32605
// exit ;
32603: GO 32747
// weapon := list [ rand ( 1 , list ) ] ;
32605: LD_ADDR_VAR 0 18
32609: PUSH
32610: LD_VAR 0 5
32614: PUSH
32615: LD_INT 1
32617: PPUSH
32618: LD_VAR 0 5
32622: PPUSH
32623: CALL_OW 12
32627: ARRAY
32628: ST_TO_ADDR
// end ; if weapon then
32629: LD_VAR 0 18
32633: IFFALSE 32747
// begin tmp := CostOfWeapon ( weapon ) ;
32635: LD_ADDR_VAR 0 14
32639: PUSH
32640: LD_VAR 0 18
32644: PPUSH
32645: CALL_OW 451
32649: ST_TO_ADDR
// j := GetBase ( tower ) ;
32650: LD_ADDR_VAR 0 9
32654: PUSH
32655: LD_VAR 0 1
32659: PPUSH
32660: CALL_OW 274
32664: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32665: LD_VAR 0 9
32669: PPUSH
32670: LD_INT 1
32672: PPUSH
32673: CALL_OW 275
32677: PUSH
32678: LD_VAR 0 14
32682: PUSH
32683: LD_INT 1
32685: ARRAY
32686: GREATEREQUAL
32687: PUSH
32688: LD_VAR 0 9
32692: PPUSH
32693: LD_INT 2
32695: PPUSH
32696: CALL_OW 275
32700: PUSH
32701: LD_VAR 0 14
32705: PUSH
32706: LD_INT 2
32708: ARRAY
32709: GREATEREQUAL
32710: AND
32711: PUSH
32712: LD_VAR 0 9
32716: PPUSH
32717: LD_INT 3
32719: PPUSH
32720: CALL_OW 275
32724: PUSH
32725: LD_VAR 0 14
32729: PUSH
32730: LD_INT 3
32732: ARRAY
32733: GREATEREQUAL
32734: AND
32735: IFFALSE 32747
// result := weapon ;
32737: LD_ADDR_VAR 0 3
32741: PUSH
32742: LD_VAR 0 18
32746: ST_TO_ADDR
// end ; end ;
32747: LD_VAR 0 3
32751: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32752: LD_INT 0
32754: PPUSH
32755: PPUSH
// result := true ;
32756: LD_ADDR_VAR 0 3
32760: PUSH
32761: LD_INT 1
32763: ST_TO_ADDR
// if array1 = array2 then
32764: LD_VAR 0 1
32768: PUSH
32769: LD_VAR 0 2
32773: EQUAL
32774: IFFALSE 32834
// begin for i = 1 to array1 do
32776: LD_ADDR_VAR 0 4
32780: PUSH
32781: DOUBLE
32782: LD_INT 1
32784: DEC
32785: ST_TO_ADDR
32786: LD_VAR 0 1
32790: PUSH
32791: FOR_TO
32792: IFFALSE 32830
// if array1 [ i ] <> array2 [ i ] then
32794: LD_VAR 0 1
32798: PUSH
32799: LD_VAR 0 4
32803: ARRAY
32804: PUSH
32805: LD_VAR 0 2
32809: PUSH
32810: LD_VAR 0 4
32814: ARRAY
32815: NONEQUAL
32816: IFFALSE 32828
// begin result := false ;
32818: LD_ADDR_VAR 0 3
32822: PUSH
32823: LD_INT 0
32825: ST_TO_ADDR
// break ;
32826: GO 32830
// end ;
32828: GO 32791
32830: POP
32831: POP
// end else
32832: GO 32842
// result := false ;
32834: LD_ADDR_VAR 0 3
32838: PUSH
32839: LD_INT 0
32841: ST_TO_ADDR
// end ;
32842: LD_VAR 0 3
32846: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32847: LD_INT 0
32849: PPUSH
32850: PPUSH
32851: PPUSH
// pom := GetBase ( fac ) ;
32852: LD_ADDR_VAR 0 5
32856: PUSH
32857: LD_VAR 0 1
32861: PPUSH
32862: CALL_OW 274
32866: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32867: LD_ADDR_VAR 0 4
32871: PUSH
32872: LD_VAR 0 2
32876: PUSH
32877: LD_INT 1
32879: ARRAY
32880: PPUSH
32881: LD_VAR 0 2
32885: PUSH
32886: LD_INT 2
32888: ARRAY
32889: PPUSH
32890: LD_VAR 0 2
32894: PUSH
32895: LD_INT 3
32897: ARRAY
32898: PPUSH
32899: LD_VAR 0 2
32903: PUSH
32904: LD_INT 4
32906: ARRAY
32907: PPUSH
32908: CALL_OW 449
32912: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32913: LD_ADDR_VAR 0 3
32917: PUSH
32918: LD_VAR 0 5
32922: PPUSH
32923: LD_INT 1
32925: PPUSH
32926: CALL_OW 275
32930: PUSH
32931: LD_VAR 0 4
32935: PUSH
32936: LD_INT 1
32938: ARRAY
32939: GREATEREQUAL
32940: PUSH
32941: LD_VAR 0 5
32945: PPUSH
32946: LD_INT 2
32948: PPUSH
32949: CALL_OW 275
32953: PUSH
32954: LD_VAR 0 4
32958: PUSH
32959: LD_INT 2
32961: ARRAY
32962: GREATEREQUAL
32963: AND
32964: PUSH
32965: LD_VAR 0 5
32969: PPUSH
32970: LD_INT 3
32972: PPUSH
32973: CALL_OW 275
32977: PUSH
32978: LD_VAR 0 4
32982: PUSH
32983: LD_INT 3
32985: ARRAY
32986: GREATEREQUAL
32987: AND
32988: ST_TO_ADDR
// end ;
32989: LD_VAR 0 3
32993: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32994: LD_INT 0
32996: PPUSH
32997: PPUSH
32998: PPUSH
32999: PPUSH
// pom := GetBase ( building ) ;
33000: LD_ADDR_VAR 0 3
33004: PUSH
33005: LD_VAR 0 1
33009: PPUSH
33010: CALL_OW 274
33014: ST_TO_ADDR
// if not pom then
33015: LD_VAR 0 3
33019: NOT
33020: IFFALSE 33024
// exit ;
33022: GO 33194
// btype := GetBType ( building ) ;
33024: LD_ADDR_VAR 0 5
33028: PUSH
33029: LD_VAR 0 1
33033: PPUSH
33034: CALL_OW 266
33038: ST_TO_ADDR
// if btype = b_armoury then
33039: LD_VAR 0 5
33043: PUSH
33044: LD_INT 4
33046: EQUAL
33047: IFFALSE 33057
// btype := b_barracks ;
33049: LD_ADDR_VAR 0 5
33053: PUSH
33054: LD_INT 5
33056: ST_TO_ADDR
// if btype = b_depot then
33057: LD_VAR 0 5
33061: PUSH
33062: LD_INT 0
33064: EQUAL
33065: IFFALSE 33075
// btype := b_warehouse ;
33067: LD_ADDR_VAR 0 5
33071: PUSH
33072: LD_INT 1
33074: ST_TO_ADDR
// if btype = b_workshop then
33075: LD_VAR 0 5
33079: PUSH
33080: LD_INT 2
33082: EQUAL
33083: IFFALSE 33093
// btype := b_factory ;
33085: LD_ADDR_VAR 0 5
33089: PUSH
33090: LD_INT 3
33092: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33093: LD_ADDR_VAR 0 4
33097: PUSH
33098: LD_VAR 0 5
33102: PPUSH
33103: LD_VAR 0 1
33107: PPUSH
33108: CALL_OW 248
33112: PPUSH
33113: CALL_OW 450
33117: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33118: LD_ADDR_VAR 0 2
33122: PUSH
33123: LD_VAR 0 3
33127: PPUSH
33128: LD_INT 1
33130: PPUSH
33131: CALL_OW 275
33135: PUSH
33136: LD_VAR 0 4
33140: PUSH
33141: LD_INT 1
33143: ARRAY
33144: GREATEREQUAL
33145: PUSH
33146: LD_VAR 0 3
33150: PPUSH
33151: LD_INT 2
33153: PPUSH
33154: CALL_OW 275
33158: PUSH
33159: LD_VAR 0 4
33163: PUSH
33164: LD_INT 2
33166: ARRAY
33167: GREATEREQUAL
33168: AND
33169: PUSH
33170: LD_VAR 0 3
33174: PPUSH
33175: LD_INT 3
33177: PPUSH
33178: CALL_OW 275
33182: PUSH
33183: LD_VAR 0 4
33187: PUSH
33188: LD_INT 3
33190: ARRAY
33191: GREATEREQUAL
33192: AND
33193: ST_TO_ADDR
// end ;
33194: LD_VAR 0 2
33198: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33199: LD_INT 0
33201: PPUSH
33202: PPUSH
33203: PPUSH
// pom := GetBase ( building ) ;
33204: LD_ADDR_VAR 0 4
33208: PUSH
33209: LD_VAR 0 1
33213: PPUSH
33214: CALL_OW 274
33218: ST_TO_ADDR
// if not pom then
33219: LD_VAR 0 4
33223: NOT
33224: IFFALSE 33228
// exit ;
33226: GO 33329
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33228: LD_ADDR_VAR 0 5
33232: PUSH
33233: LD_VAR 0 2
33237: PPUSH
33238: LD_VAR 0 1
33242: PPUSH
33243: CALL_OW 248
33247: PPUSH
33248: CALL_OW 450
33252: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33253: LD_ADDR_VAR 0 3
33257: PUSH
33258: LD_VAR 0 4
33262: PPUSH
33263: LD_INT 1
33265: PPUSH
33266: CALL_OW 275
33270: PUSH
33271: LD_VAR 0 5
33275: PUSH
33276: LD_INT 1
33278: ARRAY
33279: GREATEREQUAL
33280: PUSH
33281: LD_VAR 0 4
33285: PPUSH
33286: LD_INT 2
33288: PPUSH
33289: CALL_OW 275
33293: PUSH
33294: LD_VAR 0 5
33298: PUSH
33299: LD_INT 2
33301: ARRAY
33302: GREATEREQUAL
33303: AND
33304: PUSH
33305: LD_VAR 0 4
33309: PPUSH
33310: LD_INT 3
33312: PPUSH
33313: CALL_OW 275
33317: PUSH
33318: LD_VAR 0 5
33322: PUSH
33323: LD_INT 3
33325: ARRAY
33326: GREATEREQUAL
33327: AND
33328: ST_TO_ADDR
// end ;
33329: LD_VAR 0 3
33333: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
33334: LD_INT 0
33336: PPUSH
33337: PPUSH
33338: PPUSH
33339: PPUSH
33340: PPUSH
33341: PPUSH
33342: PPUSH
33343: PPUSH
33344: PPUSH
33345: PPUSH
// result := false ;
33346: LD_ADDR_VAR 0 6
33350: PUSH
33351: LD_INT 0
33353: ST_TO_ADDR
// if not base or not btype or not x or not y then
33354: LD_VAR 0 1
33358: NOT
33359: PUSH
33360: LD_VAR 0 2
33364: NOT
33365: OR
33366: PUSH
33367: LD_VAR 0 3
33371: NOT
33372: OR
33373: PUSH
33374: LD_VAR 0 4
33378: NOT
33379: OR
33380: IFFALSE 33384
// exit ;
33382: GO 33993
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
33384: LD_ADDR_VAR 0 12
33388: PUSH
33389: LD_VAR 0 2
33393: PPUSH
33394: LD_VAR 0 3
33398: PPUSH
33399: LD_VAR 0 4
33403: PPUSH
33404: LD_VAR 0 5
33408: PPUSH
33409: LD_VAR 0 1
33413: PUSH
33414: LD_INT 1
33416: ARRAY
33417: PPUSH
33418: CALL_OW 248
33422: PPUSH
33423: LD_INT 0
33425: PPUSH
33426: CALL 34830 0 6
33430: ST_TO_ADDR
// if not hexes then
33431: LD_VAR 0 12
33435: NOT
33436: IFFALSE 33440
// exit ;
33438: GO 33993
// for i = 1 to hexes do
33440: LD_ADDR_VAR 0 7
33444: PUSH
33445: DOUBLE
33446: LD_INT 1
33448: DEC
33449: ST_TO_ADDR
33450: LD_VAR 0 12
33454: PUSH
33455: FOR_TO
33456: IFFALSE 33991
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33458: LD_ADDR_VAR 0 11
33462: PUSH
33463: LD_VAR 0 12
33467: PUSH
33468: LD_VAR 0 7
33472: ARRAY
33473: PUSH
33474: LD_INT 1
33476: ARRAY
33477: PPUSH
33478: LD_VAR 0 12
33482: PUSH
33483: LD_VAR 0 7
33487: ARRAY
33488: PUSH
33489: LD_INT 2
33491: ARRAY
33492: PPUSH
33493: CALL_OW 428
33497: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33498: LD_VAR 0 12
33502: PUSH
33503: LD_VAR 0 7
33507: ARRAY
33508: PUSH
33509: LD_INT 1
33511: ARRAY
33512: PPUSH
33513: LD_VAR 0 12
33517: PUSH
33518: LD_VAR 0 7
33522: ARRAY
33523: PUSH
33524: LD_INT 2
33526: ARRAY
33527: PPUSH
33528: CALL_OW 351
33532: PUSH
33533: LD_VAR 0 12
33537: PUSH
33538: LD_VAR 0 7
33542: ARRAY
33543: PUSH
33544: LD_INT 1
33546: ARRAY
33547: PPUSH
33548: LD_VAR 0 12
33552: PUSH
33553: LD_VAR 0 7
33557: ARRAY
33558: PUSH
33559: LD_INT 2
33561: ARRAY
33562: PPUSH
33563: CALL_OW 488
33567: NOT
33568: OR
33569: PUSH
33570: LD_VAR 0 11
33574: PPUSH
33575: CALL_OW 247
33579: PUSH
33580: LD_INT 3
33582: EQUAL
33583: OR
33584: IFFALSE 33590
// exit ;
33586: POP
33587: POP
33588: GO 33993
// if not tmp or not tmp in base then
33590: LD_VAR 0 11
33594: NOT
33595: PUSH
33596: LD_VAR 0 11
33600: PUSH
33601: LD_VAR 0 1
33605: IN
33606: NOT
33607: OR
33608: IFFALSE 33612
// continue ;
33610: GO 33455
// result := true ;
33612: LD_ADDR_VAR 0 6
33616: PUSH
33617: LD_INT 1
33619: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33620: LD_ADDR_VAR 0 15
33624: PUSH
33625: LD_VAR 0 1
33629: PPUSH
33630: LD_INT 22
33632: PUSH
33633: LD_VAR 0 11
33637: PPUSH
33638: CALL_OW 255
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 2
33649: PUSH
33650: LD_INT 30
33652: PUSH
33653: LD_INT 0
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 30
33662: PUSH
33663: LD_INT 1
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: LIST
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PPUSH
33679: CALL_OW 72
33683: ST_TO_ADDR
// if dep then
33684: LD_VAR 0 15
33688: IFFALSE 33824
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33690: LD_ADDR_VAR 0 14
33694: PUSH
33695: LD_VAR 0 15
33699: PUSH
33700: LD_INT 1
33702: ARRAY
33703: PPUSH
33704: CALL_OW 250
33708: PPUSH
33709: LD_VAR 0 15
33713: PUSH
33714: LD_INT 1
33716: ARRAY
33717: PPUSH
33718: CALL_OW 254
33722: PPUSH
33723: LD_INT 5
33725: PPUSH
33726: CALL_OW 272
33730: PUSH
33731: LD_VAR 0 15
33735: PUSH
33736: LD_INT 1
33738: ARRAY
33739: PPUSH
33740: CALL_OW 251
33744: PPUSH
33745: LD_VAR 0 15
33749: PUSH
33750: LD_INT 1
33752: ARRAY
33753: PPUSH
33754: CALL_OW 254
33758: PPUSH
33759: LD_INT 5
33761: PPUSH
33762: CALL_OW 273
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33771: LD_VAR 0 14
33775: PUSH
33776: LD_INT 1
33778: ARRAY
33779: PPUSH
33780: LD_VAR 0 14
33784: PUSH
33785: LD_INT 2
33787: ARRAY
33788: PPUSH
33789: CALL_OW 488
33793: IFFALSE 33824
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33795: LD_VAR 0 11
33799: PPUSH
33800: LD_VAR 0 14
33804: PUSH
33805: LD_INT 1
33807: ARRAY
33808: PPUSH
33809: LD_VAR 0 14
33813: PUSH
33814: LD_INT 2
33816: ARRAY
33817: PPUSH
33818: CALL_OW 111
// continue ;
33822: GO 33455
// end ; end ; r := GetDir ( tmp ) ;
33824: LD_ADDR_VAR 0 13
33828: PUSH
33829: LD_VAR 0 11
33833: PPUSH
33834: CALL_OW 254
33838: ST_TO_ADDR
// if r = 5 then
33839: LD_VAR 0 13
33843: PUSH
33844: LD_INT 5
33846: EQUAL
33847: IFFALSE 33857
// r := 0 ;
33849: LD_ADDR_VAR 0 13
33853: PUSH
33854: LD_INT 0
33856: ST_TO_ADDR
// for j = r to 5 do
33857: LD_ADDR_VAR 0 8
33861: PUSH
33862: DOUBLE
33863: LD_VAR 0 13
33867: DEC
33868: ST_TO_ADDR
33869: LD_INT 5
33871: PUSH
33872: FOR_TO
33873: IFFALSE 33987
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33875: LD_ADDR_VAR 0 9
33879: PUSH
33880: LD_VAR 0 11
33884: PPUSH
33885: CALL_OW 250
33889: PPUSH
33890: LD_VAR 0 8
33894: PPUSH
33895: LD_INT 2
33897: PPUSH
33898: CALL_OW 272
33902: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33903: LD_ADDR_VAR 0 10
33907: PUSH
33908: LD_VAR 0 11
33912: PPUSH
33913: CALL_OW 251
33917: PPUSH
33918: LD_VAR 0 8
33922: PPUSH
33923: LD_INT 2
33925: PPUSH
33926: CALL_OW 273
33930: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33931: LD_VAR 0 9
33935: PPUSH
33936: LD_VAR 0 10
33940: PPUSH
33941: CALL_OW 488
33945: PUSH
33946: LD_VAR 0 9
33950: PPUSH
33951: LD_VAR 0 10
33955: PPUSH
33956: CALL_OW 428
33960: NOT
33961: AND
33962: IFFALSE 33985
// begin ComMoveXY ( tmp , _x , _y ) ;
33964: LD_VAR 0 11
33968: PPUSH
33969: LD_VAR 0 9
33973: PPUSH
33974: LD_VAR 0 10
33978: PPUSH
33979: CALL_OW 111
// break ;
33983: GO 33987
// end ; end ;
33985: GO 33872
33987: POP
33988: POP
// end ;
33989: GO 33455
33991: POP
33992: POP
// end ;
33993: LD_VAR 0 6
33997: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
33998: LD_INT 0
34000: PPUSH
34001: PPUSH
34002: PPUSH
34003: PPUSH
34004: PPUSH
34005: PPUSH
34006: PPUSH
34007: PPUSH
34008: PPUSH
34009: PPUSH
// result := false ;
34010: LD_ADDR_VAR 0 6
34014: PUSH
34015: LD_INT 0
34017: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34018: LD_VAR 0 1
34022: NOT
34023: PUSH
34024: LD_VAR 0 1
34028: PPUSH
34029: CALL_OW 266
34033: PUSH
34034: LD_INT 0
34036: PUSH
34037: LD_INT 1
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: IN
34044: NOT
34045: OR
34046: PUSH
34047: LD_VAR 0 2
34051: NOT
34052: OR
34053: PUSH
34054: LD_VAR 0 5
34058: PUSH
34059: LD_INT 0
34061: PUSH
34062: LD_INT 1
34064: PUSH
34065: LD_INT 2
34067: PUSH
34068: LD_INT 3
34070: PUSH
34071: LD_INT 4
34073: PUSH
34074: LD_INT 5
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: IN
34085: NOT
34086: OR
34087: PUSH
34088: LD_VAR 0 3
34092: PPUSH
34093: LD_VAR 0 4
34097: PPUSH
34098: CALL_OW 488
34102: NOT
34103: OR
34104: IFFALSE 34108
// exit ;
34106: GO 34825
// pom := GetBase ( depot ) ;
34108: LD_ADDR_VAR 0 10
34112: PUSH
34113: LD_VAR 0 1
34117: PPUSH
34118: CALL_OW 274
34122: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34123: LD_ADDR_VAR 0 11
34127: PUSH
34128: LD_VAR 0 2
34132: PPUSH
34133: LD_VAR 0 1
34137: PPUSH
34138: CALL_OW 248
34142: PPUSH
34143: CALL_OW 450
34147: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34148: LD_VAR 0 10
34152: PPUSH
34153: LD_INT 1
34155: PPUSH
34156: CALL_OW 275
34160: PUSH
34161: LD_VAR 0 11
34165: PUSH
34166: LD_INT 1
34168: ARRAY
34169: GREATEREQUAL
34170: PUSH
34171: LD_VAR 0 10
34175: PPUSH
34176: LD_INT 2
34178: PPUSH
34179: CALL_OW 275
34183: PUSH
34184: LD_VAR 0 11
34188: PUSH
34189: LD_INT 2
34191: ARRAY
34192: GREATEREQUAL
34193: AND
34194: PUSH
34195: LD_VAR 0 10
34199: PPUSH
34200: LD_INT 3
34202: PPUSH
34203: CALL_OW 275
34207: PUSH
34208: LD_VAR 0 11
34212: PUSH
34213: LD_INT 3
34215: ARRAY
34216: GREATEREQUAL
34217: AND
34218: NOT
34219: IFFALSE 34223
// exit ;
34221: GO 34825
// if GetBType ( depot ) = b_depot then
34223: LD_VAR 0 1
34227: PPUSH
34228: CALL_OW 266
34232: PUSH
34233: LD_INT 0
34235: EQUAL
34236: IFFALSE 34248
// dist := 28 else
34238: LD_ADDR_VAR 0 14
34242: PUSH
34243: LD_INT 28
34245: ST_TO_ADDR
34246: GO 34256
// dist := 36 ;
34248: LD_ADDR_VAR 0 14
34252: PUSH
34253: LD_INT 36
34255: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34256: LD_VAR 0 1
34260: PPUSH
34261: LD_VAR 0 3
34265: PPUSH
34266: LD_VAR 0 4
34270: PPUSH
34271: CALL_OW 297
34275: PUSH
34276: LD_VAR 0 14
34280: GREATER
34281: IFFALSE 34285
// exit ;
34283: GO 34825
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34285: LD_ADDR_VAR 0 12
34289: PUSH
34290: LD_VAR 0 2
34294: PPUSH
34295: LD_VAR 0 3
34299: PPUSH
34300: LD_VAR 0 4
34304: PPUSH
34305: LD_VAR 0 5
34309: PPUSH
34310: LD_VAR 0 1
34314: PPUSH
34315: CALL_OW 248
34319: PPUSH
34320: LD_INT 0
34322: PPUSH
34323: CALL 34830 0 6
34327: ST_TO_ADDR
// if not hexes then
34328: LD_VAR 0 12
34332: NOT
34333: IFFALSE 34337
// exit ;
34335: GO 34825
// hex := GetHexInfo ( x , y ) ;
34337: LD_ADDR_VAR 0 15
34341: PUSH
34342: LD_VAR 0 3
34346: PPUSH
34347: LD_VAR 0 4
34351: PPUSH
34352: CALL_OW 546
34356: ST_TO_ADDR
// if hex [ 1 ] then
34357: LD_VAR 0 15
34361: PUSH
34362: LD_INT 1
34364: ARRAY
34365: IFFALSE 34369
// exit ;
34367: GO 34825
// height := hex [ 2 ] ;
34369: LD_ADDR_VAR 0 13
34373: PUSH
34374: LD_VAR 0 15
34378: PUSH
34379: LD_INT 2
34381: ARRAY
34382: ST_TO_ADDR
// for i = 1 to hexes do
34383: LD_ADDR_VAR 0 7
34387: PUSH
34388: DOUBLE
34389: LD_INT 1
34391: DEC
34392: ST_TO_ADDR
34393: LD_VAR 0 12
34397: PUSH
34398: FOR_TO
34399: IFFALSE 34729
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34401: LD_VAR 0 12
34405: PUSH
34406: LD_VAR 0 7
34410: ARRAY
34411: PUSH
34412: LD_INT 1
34414: ARRAY
34415: PPUSH
34416: LD_VAR 0 12
34420: PUSH
34421: LD_VAR 0 7
34425: ARRAY
34426: PUSH
34427: LD_INT 2
34429: ARRAY
34430: PPUSH
34431: CALL_OW 488
34435: NOT
34436: PUSH
34437: LD_VAR 0 12
34441: PUSH
34442: LD_VAR 0 7
34446: ARRAY
34447: PUSH
34448: LD_INT 1
34450: ARRAY
34451: PPUSH
34452: LD_VAR 0 12
34456: PUSH
34457: LD_VAR 0 7
34461: ARRAY
34462: PUSH
34463: LD_INT 2
34465: ARRAY
34466: PPUSH
34467: CALL_OW 428
34471: PUSH
34472: LD_INT 0
34474: GREATER
34475: OR
34476: PUSH
34477: LD_VAR 0 12
34481: PUSH
34482: LD_VAR 0 7
34486: ARRAY
34487: PUSH
34488: LD_INT 1
34490: ARRAY
34491: PPUSH
34492: LD_VAR 0 12
34496: PUSH
34497: LD_VAR 0 7
34501: ARRAY
34502: PUSH
34503: LD_INT 2
34505: ARRAY
34506: PPUSH
34507: CALL_OW 351
34511: OR
34512: IFFALSE 34518
// exit ;
34514: POP
34515: POP
34516: GO 34825
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34518: LD_ADDR_VAR 0 8
34522: PUSH
34523: LD_VAR 0 12
34527: PUSH
34528: LD_VAR 0 7
34532: ARRAY
34533: PUSH
34534: LD_INT 1
34536: ARRAY
34537: PPUSH
34538: LD_VAR 0 12
34542: PUSH
34543: LD_VAR 0 7
34547: ARRAY
34548: PUSH
34549: LD_INT 2
34551: ARRAY
34552: PPUSH
34553: CALL_OW 546
34557: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34558: LD_VAR 0 8
34562: PUSH
34563: LD_INT 1
34565: ARRAY
34566: PUSH
34567: LD_VAR 0 8
34571: PUSH
34572: LD_INT 2
34574: ARRAY
34575: PUSH
34576: LD_VAR 0 13
34580: PUSH
34581: LD_INT 2
34583: PLUS
34584: GREATER
34585: OR
34586: PUSH
34587: LD_VAR 0 8
34591: PUSH
34592: LD_INT 2
34594: ARRAY
34595: PUSH
34596: LD_VAR 0 13
34600: PUSH
34601: LD_INT 2
34603: MINUS
34604: LESS
34605: OR
34606: PUSH
34607: LD_VAR 0 8
34611: PUSH
34612: LD_INT 3
34614: ARRAY
34615: PUSH
34616: LD_INT 0
34618: PUSH
34619: LD_INT 8
34621: PUSH
34622: LD_INT 9
34624: PUSH
34625: LD_INT 10
34627: PUSH
34628: LD_INT 11
34630: PUSH
34631: LD_INT 12
34633: PUSH
34634: LD_INT 13
34636: PUSH
34637: LD_INT 16
34639: PUSH
34640: LD_INT 17
34642: PUSH
34643: LD_INT 18
34645: PUSH
34646: LD_INT 19
34648: PUSH
34649: LD_INT 20
34651: PUSH
34652: LD_INT 21
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: IN
34670: NOT
34671: OR
34672: PUSH
34673: LD_VAR 0 8
34677: PUSH
34678: LD_INT 5
34680: ARRAY
34681: NOT
34682: OR
34683: PUSH
34684: LD_VAR 0 8
34688: PUSH
34689: LD_INT 6
34691: ARRAY
34692: PUSH
34693: LD_INT 1
34695: PUSH
34696: LD_INT 2
34698: PUSH
34699: LD_INT 7
34701: PUSH
34702: LD_INT 9
34704: PUSH
34705: LD_INT 10
34707: PUSH
34708: LD_INT 11
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: IN
34719: NOT
34720: OR
34721: IFFALSE 34727
// exit ;
34723: POP
34724: POP
34725: GO 34825
// end ;
34727: GO 34398
34729: POP
34730: POP
// side := GetSide ( depot ) ;
34731: LD_ADDR_VAR 0 9
34735: PUSH
34736: LD_VAR 0 1
34740: PPUSH
34741: CALL_OW 255
34745: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34746: LD_VAR 0 9
34750: PPUSH
34751: LD_VAR 0 3
34755: PPUSH
34756: LD_VAR 0 4
34760: PPUSH
34761: LD_INT 20
34763: PPUSH
34764: CALL 27479 0 4
34768: PUSH
34769: LD_INT 4
34771: ARRAY
34772: IFFALSE 34776
// exit ;
34774: GO 34825
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34776: LD_VAR 0 2
34780: PUSH
34781: LD_INT 29
34783: PUSH
34784: LD_INT 30
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: IN
34791: PUSH
34792: LD_VAR 0 3
34796: PPUSH
34797: LD_VAR 0 4
34801: PPUSH
34802: LD_VAR 0 9
34806: PPUSH
34807: CALL_OW 440
34811: NOT
34812: AND
34813: IFFALSE 34817
// exit ;
34815: GO 34825
// result := true ;
34817: LD_ADDR_VAR 0 6
34821: PUSH
34822: LD_INT 1
34824: ST_TO_ADDR
// end ;
34825: LD_VAR 0 6
34829: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
34830: LD_INT 0
34832: PPUSH
34833: PPUSH
34834: PPUSH
34835: PPUSH
34836: PPUSH
34837: PPUSH
34838: PPUSH
34839: PPUSH
34840: PPUSH
34841: PPUSH
34842: PPUSH
34843: PPUSH
34844: PPUSH
34845: PPUSH
34846: PPUSH
34847: PPUSH
34848: PPUSH
34849: PPUSH
34850: PPUSH
34851: PPUSH
34852: PPUSH
34853: PPUSH
34854: PPUSH
34855: PPUSH
34856: PPUSH
34857: PPUSH
34858: PPUSH
34859: PPUSH
34860: PPUSH
34861: PPUSH
34862: PPUSH
34863: PPUSH
34864: PPUSH
34865: PPUSH
34866: PPUSH
34867: PPUSH
34868: PPUSH
34869: PPUSH
34870: PPUSH
34871: PPUSH
34872: PPUSH
34873: PPUSH
34874: PPUSH
34875: PPUSH
34876: PPUSH
34877: PPUSH
34878: PPUSH
34879: PPUSH
34880: PPUSH
34881: PPUSH
34882: PPUSH
34883: PPUSH
34884: PPUSH
34885: PPUSH
34886: PPUSH
34887: PPUSH
34888: PPUSH
34889: PPUSH
// result = [ ] ;
34890: LD_ADDR_VAR 0 7
34894: PUSH
34895: EMPTY
34896: ST_TO_ADDR
// temp_list = [ ] ;
34897: LD_ADDR_VAR 0 9
34901: PUSH
34902: EMPTY
34903: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34904: LD_VAR 0 4
34908: PUSH
34909: LD_INT 0
34911: PUSH
34912: LD_INT 1
34914: PUSH
34915: LD_INT 2
34917: PUSH
34918: LD_INT 3
34920: PUSH
34921: LD_INT 4
34923: PUSH
34924: LD_INT 5
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: IN
34935: NOT
34936: PUSH
34937: LD_VAR 0 1
34941: PUSH
34942: LD_INT 0
34944: PUSH
34945: LD_INT 1
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: IN
34952: PUSH
34953: LD_VAR 0 5
34957: PUSH
34958: LD_INT 1
34960: PUSH
34961: LD_INT 2
34963: PUSH
34964: LD_INT 3
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: LIST
34971: IN
34972: NOT
34973: AND
34974: OR
34975: IFFALSE 34979
// exit ;
34977: GO 53370
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34979: LD_VAR 0 1
34983: PUSH
34984: LD_INT 6
34986: PUSH
34987: LD_INT 7
34989: PUSH
34990: LD_INT 8
34992: PUSH
34993: LD_INT 13
34995: PUSH
34996: LD_INT 12
34998: PUSH
34999: LD_INT 15
35001: PUSH
35002: LD_INT 11
35004: PUSH
35005: LD_INT 14
35007: PUSH
35008: LD_INT 10
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: IN
35022: IFFALSE 35032
// btype = b_lab ;
35024: LD_ADDR_VAR 0 1
35028: PUSH
35029: LD_INT 6
35031: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35032: LD_VAR 0 6
35036: PUSH
35037: LD_INT 0
35039: PUSH
35040: LD_INT 1
35042: PUSH
35043: LD_INT 2
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: LIST
35050: IN
35051: NOT
35052: PUSH
35053: LD_VAR 0 1
35057: PUSH
35058: LD_INT 0
35060: PUSH
35061: LD_INT 1
35063: PUSH
35064: LD_INT 2
35066: PUSH
35067: LD_INT 3
35069: PUSH
35070: LD_INT 6
35072: PUSH
35073: LD_INT 36
35075: PUSH
35076: LD_INT 4
35078: PUSH
35079: LD_INT 5
35081: PUSH
35082: LD_INT 31
35084: PUSH
35085: LD_INT 32
35087: PUSH
35088: LD_INT 33
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: IN
35104: NOT
35105: PUSH
35106: LD_VAR 0 6
35110: PUSH
35111: LD_INT 1
35113: EQUAL
35114: AND
35115: OR
35116: PUSH
35117: LD_VAR 0 1
35121: PUSH
35122: LD_INT 2
35124: PUSH
35125: LD_INT 3
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: IN
35132: NOT
35133: PUSH
35134: LD_VAR 0 6
35138: PUSH
35139: LD_INT 2
35141: EQUAL
35142: AND
35143: OR
35144: IFFALSE 35154
// mode = 0 ;
35146: LD_ADDR_VAR 0 6
35150: PUSH
35151: LD_INT 0
35153: ST_TO_ADDR
// case mode of 0 :
35154: LD_VAR 0 6
35158: PUSH
35159: LD_INT 0
35161: DOUBLE
35162: EQUAL
35163: IFTRUE 35167
35165: GO 46620
35167: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35168: LD_ADDR_VAR 0 11
35172: PUSH
35173: LD_INT 0
35175: PUSH
35176: LD_INT 0
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 0
35185: PUSH
35186: LD_INT 1
35188: NEG
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 1
35196: PUSH
35197: LD_INT 0
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 1
35206: PUSH
35207: LD_INT 1
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 0
35216: PUSH
35217: LD_INT 1
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 1
35226: NEG
35227: PUSH
35228: LD_INT 0
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 1
35237: NEG
35238: PUSH
35239: LD_INT 1
35241: NEG
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 1
35249: NEG
35250: PUSH
35251: LD_INT 2
35253: NEG
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 0
35261: PUSH
35262: LD_INT 2
35264: NEG
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 1
35272: PUSH
35273: LD_INT 1
35275: NEG
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 1
35283: PUSH
35284: LD_INT 2
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 0
35293: PUSH
35294: LD_INT 2
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 1
35303: NEG
35304: PUSH
35305: LD_INT 1
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 1
35314: PUSH
35315: LD_INT 3
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 0
35324: PUSH
35325: LD_INT 3
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 1
35334: NEG
35335: PUSH
35336: LD_INT 2
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35361: LD_ADDR_VAR 0 12
35365: PUSH
35366: LD_INT 0
35368: PUSH
35369: LD_INT 0
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: PUSH
35376: LD_INT 0
35378: PUSH
35379: LD_INT 1
35381: NEG
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 1
35389: PUSH
35390: LD_INT 0
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 1
35399: PUSH
35400: LD_INT 1
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PUSH
35407: LD_INT 0
35409: PUSH
35410: LD_INT 1
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: LD_INT 1
35419: NEG
35420: PUSH
35421: LD_INT 0
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 1
35430: NEG
35431: PUSH
35432: LD_INT 1
35434: NEG
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 1
35442: PUSH
35443: LD_INT 1
35445: NEG
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 2
35453: PUSH
35454: LD_INT 0
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 2
35463: PUSH
35464: LD_INT 1
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 1
35473: NEG
35474: PUSH
35475: LD_INT 1
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 2
35484: NEG
35485: PUSH
35486: LD_INT 0
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 2
35495: NEG
35496: PUSH
35497: LD_INT 1
35499: NEG
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 2
35507: NEG
35508: PUSH
35509: LD_INT 1
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 3
35518: NEG
35519: PUSH
35520: LD_INT 0
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 3
35529: NEG
35530: PUSH
35531: LD_INT 1
35533: NEG
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35557: LD_ADDR_VAR 0 13
35561: PUSH
35562: LD_INT 0
35564: PUSH
35565: LD_INT 0
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 0
35574: PUSH
35575: LD_INT 1
35577: NEG
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 1
35585: PUSH
35586: LD_INT 0
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 1
35595: PUSH
35596: LD_INT 1
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 0
35605: PUSH
35606: LD_INT 1
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 1
35615: NEG
35616: PUSH
35617: LD_INT 0
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 1
35626: NEG
35627: PUSH
35628: LD_INT 1
35630: NEG
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 1
35638: NEG
35639: PUSH
35640: LD_INT 2
35642: NEG
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 2
35650: PUSH
35651: LD_INT 1
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 2
35660: PUSH
35661: LD_INT 2
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 1
35670: PUSH
35671: LD_INT 2
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 2
35680: NEG
35681: PUSH
35682: LD_INT 1
35684: NEG
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 2
35692: NEG
35693: PUSH
35694: LD_INT 2
35696: NEG
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 2
35704: NEG
35705: PUSH
35706: LD_INT 3
35708: NEG
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 3
35716: NEG
35717: PUSH
35718: LD_INT 2
35720: NEG
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 3
35728: NEG
35729: PUSH
35730: LD_INT 3
35732: NEG
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: LIST
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: LIST
35755: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35756: LD_ADDR_VAR 0 14
35760: PUSH
35761: LD_INT 0
35763: PUSH
35764: LD_INT 0
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 0
35773: PUSH
35774: LD_INT 1
35776: NEG
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 1
35784: PUSH
35785: LD_INT 0
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 1
35794: PUSH
35795: LD_INT 1
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 0
35804: PUSH
35805: LD_INT 1
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 1
35814: NEG
35815: PUSH
35816: LD_INT 0
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 1
35825: NEG
35826: PUSH
35827: LD_INT 1
35829: NEG
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 1
35837: NEG
35838: PUSH
35839: LD_INT 2
35841: NEG
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 0
35849: PUSH
35850: LD_INT 2
35852: NEG
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: LD_INT 1
35860: PUSH
35861: LD_INT 1
35863: NEG
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 1
35871: PUSH
35872: LD_INT 2
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 0
35881: PUSH
35882: LD_INT 2
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: LD_INT 1
35891: NEG
35892: PUSH
35893: LD_INT 1
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 1
35902: NEG
35903: PUSH
35904: LD_INT 3
35906: NEG
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: LD_INT 0
35914: PUSH
35915: LD_INT 3
35917: NEG
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 1
35925: PUSH
35926: LD_INT 2
35928: NEG
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35952: LD_ADDR_VAR 0 15
35956: PUSH
35957: LD_INT 0
35959: PUSH
35960: LD_INT 0
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: LD_INT 0
35969: PUSH
35970: LD_INT 1
35972: NEG
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 1
35980: PUSH
35981: LD_INT 0
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 1
35990: PUSH
35991: LD_INT 1
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 0
36000: PUSH
36001: LD_INT 1
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 1
36010: NEG
36011: PUSH
36012: LD_INT 0
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 1
36021: NEG
36022: PUSH
36023: LD_INT 1
36025: NEG
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 1
36033: PUSH
36034: LD_INT 1
36036: NEG
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 2
36044: PUSH
36045: LD_INT 0
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 2
36054: PUSH
36055: LD_INT 1
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 1
36064: NEG
36065: PUSH
36066: LD_INT 1
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 2
36075: NEG
36076: PUSH
36077: LD_INT 0
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 2
36086: NEG
36087: PUSH
36088: LD_INT 1
36090: NEG
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 2
36098: PUSH
36099: LD_INT 1
36101: NEG
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 3
36109: PUSH
36110: LD_INT 0
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 3
36119: PUSH
36120: LD_INT 1
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36145: LD_ADDR_VAR 0 16
36149: PUSH
36150: LD_INT 0
36152: PUSH
36153: LD_INT 0
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 0
36162: PUSH
36163: LD_INT 1
36165: NEG
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 1
36173: PUSH
36174: LD_INT 0
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: LD_INT 1
36183: PUSH
36184: LD_INT 1
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 0
36193: PUSH
36194: LD_INT 1
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 1
36203: NEG
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 1
36214: NEG
36215: PUSH
36216: LD_INT 1
36218: NEG
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 1
36226: NEG
36227: PUSH
36228: LD_INT 2
36230: NEG
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 2
36238: PUSH
36239: LD_INT 1
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 2
36248: PUSH
36249: LD_INT 2
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 1
36258: PUSH
36259: LD_INT 2
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 2
36268: NEG
36269: PUSH
36270: LD_INT 1
36272: NEG
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 2
36280: NEG
36281: PUSH
36282: LD_INT 2
36284: NEG
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 3
36292: PUSH
36293: LD_INT 2
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 3
36302: PUSH
36303: LD_INT 3
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 2
36312: PUSH
36313: LD_INT 3
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36338: LD_ADDR_VAR 0 17
36342: PUSH
36343: LD_INT 0
36345: PUSH
36346: LD_INT 0
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 0
36355: PUSH
36356: LD_INT 1
36358: NEG
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 1
36366: PUSH
36367: LD_INT 0
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 1
36376: PUSH
36377: LD_INT 1
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 0
36386: PUSH
36387: LD_INT 1
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 1
36396: NEG
36397: PUSH
36398: LD_INT 0
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: LD_INT 1
36407: NEG
36408: PUSH
36409: LD_INT 1
36411: NEG
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 1
36419: NEG
36420: PUSH
36421: LD_INT 2
36423: NEG
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 0
36431: PUSH
36432: LD_INT 2
36434: NEG
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 1
36442: PUSH
36443: LD_INT 1
36445: NEG
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 2
36453: PUSH
36454: LD_INT 0
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 2
36463: PUSH
36464: LD_INT 1
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 2
36473: PUSH
36474: LD_INT 2
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 1
36483: PUSH
36484: LD_INT 2
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 0
36493: PUSH
36494: LD_INT 2
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 1
36503: NEG
36504: PUSH
36505: LD_INT 1
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_INT 2
36514: NEG
36515: PUSH
36516: LD_INT 0
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 2
36525: NEG
36526: PUSH
36527: LD_INT 1
36529: NEG
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 2
36537: NEG
36538: PUSH
36539: LD_INT 2
36541: NEG
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36568: LD_ADDR_VAR 0 18
36572: PUSH
36573: LD_INT 0
36575: PUSH
36576: LD_INT 0
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 0
36585: PUSH
36586: LD_INT 1
36588: NEG
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 1
36596: PUSH
36597: LD_INT 0
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 1
36606: PUSH
36607: LD_INT 1
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 0
36616: PUSH
36617: LD_INT 1
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 1
36626: NEG
36627: PUSH
36628: LD_INT 0
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 1
36637: NEG
36638: PUSH
36639: LD_INT 1
36641: NEG
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 1
36649: NEG
36650: PUSH
36651: LD_INT 2
36653: NEG
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 0
36661: PUSH
36662: LD_INT 2
36664: NEG
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 1
36672: PUSH
36673: LD_INT 1
36675: NEG
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 2
36683: PUSH
36684: LD_INT 0
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: LD_INT 2
36693: PUSH
36694: LD_INT 1
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 2
36703: PUSH
36704: LD_INT 2
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: LD_INT 1
36713: PUSH
36714: LD_INT 2
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 0
36723: PUSH
36724: LD_INT 2
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 1
36733: NEG
36734: PUSH
36735: LD_INT 1
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 2
36744: NEG
36745: PUSH
36746: LD_INT 0
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 2
36755: NEG
36756: PUSH
36757: LD_INT 1
36759: NEG
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 2
36767: NEG
36768: PUSH
36769: LD_INT 2
36771: NEG
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36798: LD_ADDR_VAR 0 19
36802: PUSH
36803: LD_INT 0
36805: PUSH
36806: LD_INT 0
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 0
36815: PUSH
36816: LD_INT 1
36818: NEG
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 1
36826: PUSH
36827: LD_INT 0
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 1
36836: PUSH
36837: LD_INT 1
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 0
36846: PUSH
36847: LD_INT 1
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 1
36856: NEG
36857: PUSH
36858: LD_INT 0
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: LD_INT 1
36867: NEG
36868: PUSH
36869: LD_INT 1
36871: NEG
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: LD_INT 1
36879: NEG
36880: PUSH
36881: LD_INT 2
36883: NEG
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 0
36891: PUSH
36892: LD_INT 2
36894: NEG
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 1
36902: PUSH
36903: LD_INT 1
36905: NEG
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 2
36913: PUSH
36914: LD_INT 0
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PUSH
36921: LD_INT 2
36923: PUSH
36924: LD_INT 1
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 2
36933: PUSH
36934: LD_INT 2
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 1
36943: PUSH
36944: LD_INT 2
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 0
36953: PUSH
36954: LD_INT 2
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 1
36963: NEG
36964: PUSH
36965: LD_INT 1
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 2
36974: NEG
36975: PUSH
36976: LD_INT 0
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 2
36985: NEG
36986: PUSH
36987: LD_INT 1
36989: NEG
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 2
36997: NEG
36998: PUSH
36999: LD_INT 2
37001: NEG
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37028: LD_ADDR_VAR 0 20
37032: PUSH
37033: LD_INT 0
37035: PUSH
37036: LD_INT 0
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: LD_INT 1
37048: NEG
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 1
37056: PUSH
37057: LD_INT 0
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 1
37066: PUSH
37067: LD_INT 1
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 0
37076: PUSH
37077: LD_INT 1
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 1
37086: NEG
37087: PUSH
37088: LD_INT 0
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 1
37097: NEG
37098: PUSH
37099: LD_INT 1
37101: NEG
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 1
37109: NEG
37110: PUSH
37111: LD_INT 2
37113: NEG
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 0
37121: PUSH
37122: LD_INT 2
37124: NEG
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 1
37132: PUSH
37133: LD_INT 1
37135: NEG
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 2
37143: PUSH
37144: LD_INT 0
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 2
37153: PUSH
37154: LD_INT 1
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 2
37163: PUSH
37164: LD_INT 2
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 1
37173: PUSH
37174: LD_INT 2
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 0
37183: PUSH
37184: LD_INT 2
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 1
37193: NEG
37194: PUSH
37195: LD_INT 1
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 2
37204: NEG
37205: PUSH
37206: LD_INT 0
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 2
37215: NEG
37216: PUSH
37217: LD_INT 1
37219: NEG
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 2
37227: NEG
37228: PUSH
37229: LD_INT 2
37231: NEG
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37258: LD_ADDR_VAR 0 21
37262: PUSH
37263: LD_INT 0
37265: PUSH
37266: LD_INT 0
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: LD_INT 0
37275: PUSH
37276: LD_INT 1
37278: NEG
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 1
37286: PUSH
37287: LD_INT 0
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 1
37296: PUSH
37297: LD_INT 1
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 0
37306: PUSH
37307: LD_INT 1
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 1
37316: NEG
37317: PUSH
37318: LD_INT 0
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 1
37327: NEG
37328: PUSH
37329: LD_INT 1
37331: NEG
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 1
37339: NEG
37340: PUSH
37341: LD_INT 2
37343: NEG
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 0
37351: PUSH
37352: LD_INT 2
37354: NEG
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 1
37362: PUSH
37363: LD_INT 1
37365: NEG
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: LD_INT 2
37373: PUSH
37374: LD_INT 0
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 2
37383: PUSH
37384: LD_INT 1
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 2
37393: PUSH
37394: LD_INT 2
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 1
37403: PUSH
37404: LD_INT 2
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 0
37413: PUSH
37414: LD_INT 2
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 1
37423: NEG
37424: PUSH
37425: LD_INT 1
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 2
37434: NEG
37435: PUSH
37436: LD_INT 0
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 2
37445: NEG
37446: PUSH
37447: LD_INT 1
37449: NEG
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 2
37457: NEG
37458: PUSH
37459: LD_INT 2
37461: NEG
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37488: LD_ADDR_VAR 0 22
37492: PUSH
37493: LD_INT 0
37495: PUSH
37496: LD_INT 0
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: LD_INT 1
37508: NEG
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 1
37516: PUSH
37517: LD_INT 0
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 1
37526: PUSH
37527: LD_INT 1
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 0
37536: PUSH
37537: LD_INT 1
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 1
37546: NEG
37547: PUSH
37548: LD_INT 0
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 1
37557: NEG
37558: PUSH
37559: LD_INT 1
37561: NEG
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 1
37569: NEG
37570: PUSH
37571: LD_INT 2
37573: NEG
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 0
37581: PUSH
37582: LD_INT 2
37584: NEG
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 1
37592: PUSH
37593: LD_INT 1
37595: NEG
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 2
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 2
37613: PUSH
37614: LD_INT 1
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 2
37623: PUSH
37624: LD_INT 2
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 1
37633: PUSH
37634: LD_INT 2
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 0
37643: PUSH
37644: LD_INT 2
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 1
37653: NEG
37654: PUSH
37655: LD_INT 1
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 2
37664: NEG
37665: PUSH
37666: LD_INT 0
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 2
37675: NEG
37676: PUSH
37677: LD_INT 1
37679: NEG
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 2
37687: NEG
37688: PUSH
37689: LD_INT 2
37691: NEG
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37718: LD_ADDR_VAR 0 23
37722: PUSH
37723: LD_INT 0
37725: PUSH
37726: LD_INT 0
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 0
37735: PUSH
37736: LD_INT 1
37738: NEG
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 1
37746: PUSH
37747: LD_INT 0
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 1
37756: PUSH
37757: LD_INT 1
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 0
37766: PUSH
37767: LD_INT 1
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 1
37776: NEG
37777: PUSH
37778: LD_INT 0
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 1
37787: NEG
37788: PUSH
37789: LD_INT 1
37791: NEG
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 1
37799: NEG
37800: PUSH
37801: LD_INT 2
37803: NEG
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 0
37811: PUSH
37812: LD_INT 2
37814: NEG
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 1
37822: PUSH
37823: LD_INT 1
37825: NEG
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 2
37833: PUSH
37834: LD_INT 0
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 2
37843: PUSH
37844: LD_INT 1
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 2
37853: PUSH
37854: LD_INT 2
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 1
37863: PUSH
37864: LD_INT 2
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 0
37873: PUSH
37874: LD_INT 2
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 1
37883: NEG
37884: PUSH
37885: LD_INT 1
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 2
37894: NEG
37895: PUSH
37896: LD_INT 0
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 2
37905: NEG
37906: PUSH
37907: LD_INT 1
37909: NEG
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 2
37917: NEG
37918: PUSH
37919: LD_INT 2
37921: NEG
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 2
37929: NEG
37930: PUSH
37931: LD_INT 3
37933: NEG
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 1
37941: NEG
37942: PUSH
37943: LD_INT 3
37945: NEG
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 1
37953: PUSH
37954: LD_INT 2
37956: NEG
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 2
37964: PUSH
37965: LD_INT 1
37967: NEG
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37998: LD_ADDR_VAR 0 24
38002: PUSH
38003: LD_INT 0
38005: PUSH
38006: LD_INT 0
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 0
38015: PUSH
38016: LD_INT 1
38018: NEG
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PUSH
38024: LD_INT 1
38026: PUSH
38027: LD_INT 0
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PUSH
38034: LD_INT 1
38036: PUSH
38037: LD_INT 1
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 0
38046: PUSH
38047: LD_INT 1
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 1
38056: NEG
38057: PUSH
38058: LD_INT 0
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 1
38067: NEG
38068: PUSH
38069: LD_INT 1
38071: NEG
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 1
38079: NEG
38080: PUSH
38081: LD_INT 2
38083: NEG
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 0
38091: PUSH
38092: LD_INT 2
38094: NEG
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 1
38102: PUSH
38103: LD_INT 1
38105: NEG
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 2
38113: PUSH
38114: LD_INT 0
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 2
38123: PUSH
38124: LD_INT 1
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 2
38133: PUSH
38134: LD_INT 2
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 1
38143: PUSH
38144: LD_INT 2
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 0
38153: PUSH
38154: LD_INT 2
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 1
38163: NEG
38164: PUSH
38165: LD_INT 1
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 2
38174: NEG
38175: PUSH
38176: LD_INT 0
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 2
38185: NEG
38186: PUSH
38187: LD_INT 1
38189: NEG
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 2
38197: NEG
38198: PUSH
38199: LD_INT 2
38201: NEG
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 1
38209: PUSH
38210: LD_INT 2
38212: NEG
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 2
38220: PUSH
38221: LD_INT 1
38223: NEG
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 3
38231: PUSH
38232: LD_INT 1
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 3
38241: PUSH
38242: LD_INT 2
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38274: LD_ADDR_VAR 0 25
38278: PUSH
38279: LD_INT 0
38281: PUSH
38282: LD_INT 0
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 0
38291: PUSH
38292: LD_INT 1
38294: NEG
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 1
38302: PUSH
38303: LD_INT 0
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 1
38312: PUSH
38313: LD_INT 1
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 0
38322: PUSH
38323: LD_INT 1
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 1
38332: NEG
38333: PUSH
38334: LD_INT 0
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 1
38343: NEG
38344: PUSH
38345: LD_INT 1
38347: NEG
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 1
38355: NEG
38356: PUSH
38357: LD_INT 2
38359: NEG
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 0
38367: PUSH
38368: LD_INT 2
38370: NEG
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 1
38378: PUSH
38379: LD_INT 1
38381: NEG
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 2
38389: PUSH
38390: LD_INT 0
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PUSH
38397: LD_INT 2
38399: PUSH
38400: LD_INT 1
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 2
38409: PUSH
38410: LD_INT 2
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 1
38419: PUSH
38420: LD_INT 2
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 0
38429: PUSH
38430: LD_INT 2
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 1
38439: NEG
38440: PUSH
38441: LD_INT 1
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 2
38450: NEG
38451: PUSH
38452: LD_INT 0
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 2
38461: NEG
38462: PUSH
38463: LD_INT 1
38465: NEG
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 2
38473: NEG
38474: PUSH
38475: LD_INT 2
38477: NEG
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 3
38485: PUSH
38486: LD_INT 1
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 3
38495: PUSH
38496: LD_INT 2
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 2
38505: PUSH
38506: LD_INT 3
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 1
38515: PUSH
38516: LD_INT 3
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38548: LD_ADDR_VAR 0 26
38552: PUSH
38553: LD_INT 0
38555: PUSH
38556: LD_INT 0
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 0
38565: PUSH
38566: LD_INT 1
38568: NEG
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 1
38576: PUSH
38577: LD_INT 0
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 1
38586: PUSH
38587: LD_INT 1
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 0
38596: PUSH
38597: LD_INT 1
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 1
38606: NEG
38607: PUSH
38608: LD_INT 0
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 1
38617: NEG
38618: PUSH
38619: LD_INT 1
38621: NEG
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 1
38629: NEG
38630: PUSH
38631: LD_INT 2
38633: NEG
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 0
38641: PUSH
38642: LD_INT 2
38644: NEG
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 1
38652: PUSH
38653: LD_INT 1
38655: NEG
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 2
38663: PUSH
38664: LD_INT 0
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 2
38673: PUSH
38674: LD_INT 1
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 2
38683: PUSH
38684: LD_INT 2
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 1
38693: PUSH
38694: LD_INT 2
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 0
38703: PUSH
38704: LD_INT 2
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 1
38713: NEG
38714: PUSH
38715: LD_INT 1
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 2
38724: NEG
38725: PUSH
38726: LD_INT 0
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 2
38735: NEG
38736: PUSH
38737: LD_INT 1
38739: NEG
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 2
38747: NEG
38748: PUSH
38749: LD_INT 2
38751: NEG
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 2
38759: PUSH
38760: LD_INT 3
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 1
38769: PUSH
38770: LD_INT 3
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 1
38779: NEG
38780: PUSH
38781: LD_INT 2
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 2
38790: NEG
38791: PUSH
38792: LD_INT 1
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38824: LD_ADDR_VAR 0 27
38828: PUSH
38829: LD_INT 0
38831: PUSH
38832: LD_INT 0
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 0
38841: PUSH
38842: LD_INT 1
38844: NEG
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 1
38852: PUSH
38853: LD_INT 0
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 1
38862: PUSH
38863: LD_INT 1
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 0
38872: PUSH
38873: LD_INT 1
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 1
38882: NEG
38883: PUSH
38884: LD_INT 0
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 1
38893: NEG
38894: PUSH
38895: LD_INT 1
38897: NEG
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 1
38905: NEG
38906: PUSH
38907: LD_INT 2
38909: NEG
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: LD_INT 2
38920: NEG
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 1
38928: PUSH
38929: LD_INT 1
38931: NEG
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 2
38939: PUSH
38940: LD_INT 0
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 2
38949: PUSH
38950: LD_INT 1
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 2
38959: PUSH
38960: LD_INT 2
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 1
38969: PUSH
38970: LD_INT 2
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 0
38979: PUSH
38980: LD_INT 2
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 1
38989: NEG
38990: PUSH
38991: LD_INT 1
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 2
39000: NEG
39001: PUSH
39002: LD_INT 0
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 2
39011: NEG
39012: PUSH
39013: LD_INT 1
39015: NEG
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 2
39023: NEG
39024: PUSH
39025: LD_INT 2
39027: NEG
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 1
39035: NEG
39036: PUSH
39037: LD_INT 2
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 2
39046: NEG
39047: PUSH
39048: LD_INT 1
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 3
39057: NEG
39058: PUSH
39059: LD_INT 1
39061: NEG
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 3
39069: NEG
39070: PUSH
39071: LD_INT 2
39073: NEG
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39104: LD_ADDR_VAR 0 28
39108: PUSH
39109: LD_INT 0
39111: PUSH
39112: LD_INT 0
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 0
39121: PUSH
39122: LD_INT 1
39124: NEG
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 1
39132: PUSH
39133: LD_INT 0
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 1
39142: PUSH
39143: LD_INT 1
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 0
39152: PUSH
39153: LD_INT 1
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 1
39162: NEG
39163: PUSH
39164: LD_INT 0
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 1
39173: NEG
39174: PUSH
39175: LD_INT 1
39177: NEG
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 1
39185: NEG
39186: PUSH
39187: LD_INT 2
39189: NEG
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 0
39197: PUSH
39198: LD_INT 2
39200: NEG
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 1
39208: PUSH
39209: LD_INT 1
39211: NEG
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 2
39219: PUSH
39220: LD_INT 0
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 2
39229: PUSH
39230: LD_INT 1
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 2
39239: PUSH
39240: LD_INT 2
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 1
39249: PUSH
39250: LD_INT 2
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 0
39259: PUSH
39260: LD_INT 2
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 1
39269: NEG
39270: PUSH
39271: LD_INT 1
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 2
39280: NEG
39281: PUSH
39282: LD_INT 0
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 2
39291: NEG
39292: PUSH
39293: LD_INT 1
39295: NEG
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 2
39303: NEG
39304: PUSH
39305: LD_INT 2
39307: NEG
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 2
39315: NEG
39316: PUSH
39317: LD_INT 3
39319: NEG
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 1
39327: NEG
39328: PUSH
39329: LD_INT 3
39331: NEG
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 3
39339: NEG
39340: PUSH
39341: LD_INT 1
39343: NEG
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 3
39351: NEG
39352: PUSH
39353: LD_INT 2
39355: NEG
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39386: LD_ADDR_VAR 0 29
39390: PUSH
39391: LD_INT 0
39393: PUSH
39394: LD_INT 0
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 0
39403: PUSH
39404: LD_INT 1
39406: NEG
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 1
39414: PUSH
39415: LD_INT 0
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 1
39424: PUSH
39425: LD_INT 1
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 0
39434: PUSH
39435: LD_INT 1
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 1
39444: NEG
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 1
39455: NEG
39456: PUSH
39457: LD_INT 1
39459: NEG
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 1
39467: NEG
39468: PUSH
39469: LD_INT 2
39471: NEG
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 0
39479: PUSH
39480: LD_INT 2
39482: NEG
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 1
39490: PUSH
39491: LD_INT 1
39493: NEG
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 2
39501: PUSH
39502: LD_INT 0
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 2
39511: PUSH
39512: LD_INT 1
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 1
39521: PUSH
39522: LD_INT 2
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 0
39531: PUSH
39532: LD_INT 2
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 1
39541: NEG
39542: PUSH
39543: LD_INT 1
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 2
39552: NEG
39553: PUSH
39554: LD_INT 1
39556: NEG
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 2
39564: NEG
39565: PUSH
39566: LD_INT 2
39568: NEG
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 2
39576: NEG
39577: PUSH
39578: LD_INT 3
39580: NEG
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 2
39588: PUSH
39589: LD_INT 1
39591: NEG
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 3
39599: PUSH
39600: LD_INT 1
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 1
39609: PUSH
39610: LD_INT 3
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 1
39619: NEG
39620: PUSH
39621: LD_INT 2
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 3
39630: NEG
39631: PUSH
39632: LD_INT 2
39634: NEG
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39665: LD_ADDR_VAR 0 30
39669: PUSH
39670: LD_INT 0
39672: PUSH
39673: LD_INT 0
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 0
39682: PUSH
39683: LD_INT 1
39685: NEG
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 1
39693: PUSH
39694: LD_INT 0
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 1
39703: PUSH
39704: LD_INT 1
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 0
39713: PUSH
39714: LD_INT 1
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 1
39723: NEG
39724: PUSH
39725: LD_INT 0
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 1
39734: NEG
39735: PUSH
39736: LD_INT 1
39738: NEG
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 1
39746: NEG
39747: PUSH
39748: LD_INT 2
39750: NEG
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 0
39758: PUSH
39759: LD_INT 2
39761: NEG
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 1
39769: PUSH
39770: LD_INT 1
39772: NEG
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 2
39780: PUSH
39781: LD_INT 0
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 2
39790: PUSH
39791: LD_INT 1
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 2
39800: PUSH
39801: LD_INT 2
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 1
39810: PUSH
39811: LD_INT 2
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 1
39820: NEG
39821: PUSH
39822: LD_INT 1
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 2
39831: NEG
39832: PUSH
39833: LD_INT 0
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 2
39842: NEG
39843: PUSH
39844: LD_INT 1
39846: NEG
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 1
39854: NEG
39855: PUSH
39856: LD_INT 3
39858: NEG
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 1
39866: PUSH
39867: LD_INT 2
39869: NEG
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 3
39877: PUSH
39878: LD_INT 2
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 2
39887: PUSH
39888: LD_INT 3
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 2
39897: NEG
39898: PUSH
39899: LD_INT 1
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 3
39908: NEG
39909: PUSH
39910: LD_INT 1
39912: NEG
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: LIST
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39943: LD_ADDR_VAR 0 31
39947: PUSH
39948: LD_INT 0
39950: PUSH
39951: LD_INT 0
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 0
39960: PUSH
39961: LD_INT 1
39963: NEG
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 1
39971: PUSH
39972: LD_INT 0
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 1
39981: PUSH
39982: LD_INT 1
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 0
39991: PUSH
39992: LD_INT 1
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 1
40001: NEG
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 1
40012: NEG
40013: PUSH
40014: LD_INT 1
40016: NEG
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 1
40024: NEG
40025: PUSH
40026: LD_INT 2
40028: NEG
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 1
40036: PUSH
40037: LD_INT 1
40039: NEG
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 2
40047: PUSH
40048: LD_INT 0
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 2
40057: PUSH
40058: LD_INT 1
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 2
40067: PUSH
40068: LD_INT 2
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 1
40077: PUSH
40078: LD_INT 2
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 0
40087: PUSH
40088: LD_INT 2
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 1
40097: NEG
40098: PUSH
40099: LD_INT 1
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 2
40108: NEG
40109: PUSH
40110: LD_INT 1
40112: NEG
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 2
40120: NEG
40121: PUSH
40122: LD_INT 2
40124: NEG
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 2
40132: NEG
40133: PUSH
40134: LD_INT 3
40136: NEG
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 2
40144: PUSH
40145: LD_INT 1
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 3
40155: PUSH
40156: LD_INT 1
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 1
40165: PUSH
40166: LD_INT 3
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 1
40175: NEG
40176: PUSH
40177: LD_INT 2
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 3
40186: NEG
40187: PUSH
40188: LD_INT 2
40190: NEG
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40221: LD_ADDR_VAR 0 32
40225: PUSH
40226: LD_INT 0
40228: PUSH
40229: LD_INT 0
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 0
40238: PUSH
40239: LD_INT 1
40241: NEG
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 1
40249: PUSH
40250: LD_INT 0
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 1
40259: PUSH
40260: LD_INT 1
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 0
40269: PUSH
40270: LD_INT 1
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 1
40279: NEG
40280: PUSH
40281: LD_INT 0
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 1
40290: NEG
40291: PUSH
40292: LD_INT 1
40294: NEG
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 1
40302: NEG
40303: PUSH
40304: LD_INT 2
40306: NEG
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 0
40314: PUSH
40315: LD_INT 2
40317: NEG
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 1
40325: PUSH
40326: LD_INT 1
40328: NEG
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 2
40336: PUSH
40337: LD_INT 1
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 2
40346: PUSH
40347: LD_INT 2
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 1
40356: PUSH
40357: LD_INT 2
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 0
40366: PUSH
40367: LD_INT 2
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 1
40376: NEG
40377: PUSH
40378: LD_INT 1
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 2
40387: NEG
40388: PUSH
40389: LD_INT 0
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 2
40398: NEG
40399: PUSH
40400: LD_INT 1
40402: NEG
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: LD_INT 1
40410: NEG
40411: PUSH
40412: LD_INT 3
40414: NEG
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 1
40422: PUSH
40423: LD_INT 2
40425: NEG
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 3
40433: PUSH
40434: LD_INT 2
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 2
40443: PUSH
40444: LD_INT 3
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 2
40453: NEG
40454: PUSH
40455: LD_INT 1
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 3
40464: NEG
40465: PUSH
40466: LD_INT 1
40468: NEG
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40499: LD_ADDR_VAR 0 33
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: LD_INT 0
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 0
40516: PUSH
40517: LD_INT 1
40519: NEG
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 1
40527: PUSH
40528: LD_INT 0
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 1
40537: PUSH
40538: LD_INT 1
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 0
40547: PUSH
40548: LD_INT 1
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 1
40557: NEG
40558: PUSH
40559: LD_INT 0
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 1
40568: NEG
40569: PUSH
40570: LD_INT 1
40572: NEG
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 1
40580: NEG
40581: PUSH
40582: LD_INT 2
40584: NEG
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 1
40592: PUSH
40593: LD_INT 1
40595: NEG
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 2
40603: PUSH
40604: LD_INT 0
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 2
40613: PUSH
40614: LD_INT 1
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 1
40623: PUSH
40624: LD_INT 2
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 0
40633: PUSH
40634: LD_INT 2
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 1
40643: NEG
40644: PUSH
40645: LD_INT 1
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 2
40654: NEG
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 2
40665: NEG
40666: PUSH
40667: LD_INT 1
40669: NEG
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 2
40677: NEG
40678: PUSH
40679: LD_INT 2
40681: NEG
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 2
40689: NEG
40690: PUSH
40691: LD_INT 3
40693: NEG
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 2
40701: PUSH
40702: LD_INT 1
40704: NEG
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 3
40712: PUSH
40713: LD_INT 1
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 1
40722: PUSH
40723: LD_INT 3
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 1
40732: NEG
40733: PUSH
40734: LD_INT 2
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 3
40743: NEG
40744: PUSH
40745: LD_INT 2
40747: NEG
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40778: LD_ADDR_VAR 0 34
40782: PUSH
40783: LD_INT 0
40785: PUSH
40786: LD_INT 0
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 0
40795: PUSH
40796: LD_INT 1
40798: NEG
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 1
40806: PUSH
40807: LD_INT 0
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 1
40816: PUSH
40817: LD_INT 1
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 0
40826: PUSH
40827: LD_INT 1
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 1
40836: NEG
40837: PUSH
40838: LD_INT 0
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 1
40847: NEG
40848: PUSH
40849: LD_INT 1
40851: NEG
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 1
40859: NEG
40860: PUSH
40861: LD_INT 2
40863: NEG
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 0
40871: PUSH
40872: LD_INT 2
40874: NEG
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 1
40882: PUSH
40883: LD_INT 1
40885: NEG
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 2
40893: PUSH
40894: LD_INT 1
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 2
40903: PUSH
40904: LD_INT 2
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 1
40913: PUSH
40914: LD_INT 2
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: LD_INT 1
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 2
40934: NEG
40935: PUSH
40936: LD_INT 0
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 2
40945: NEG
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 2
40957: NEG
40958: PUSH
40959: LD_INT 2
40961: NEG
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 1
40969: NEG
40970: PUSH
40971: LD_INT 3
40973: NEG
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: LD_INT 2
40984: NEG
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 3
40992: PUSH
40993: LD_INT 2
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 2
41002: PUSH
41003: LD_INT 3
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 2
41012: NEG
41013: PUSH
41014: LD_INT 1
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 3
41023: NEG
41024: PUSH
41025: LD_INT 1
41027: NEG
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41058: LD_ADDR_VAR 0 35
41062: PUSH
41063: LD_INT 0
41065: PUSH
41066: LD_INT 0
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 0
41075: PUSH
41076: LD_INT 1
41078: NEG
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 1
41086: PUSH
41087: LD_INT 0
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 1
41096: PUSH
41097: LD_INT 1
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 0
41106: PUSH
41107: LD_INT 1
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 1
41116: NEG
41117: PUSH
41118: LD_INT 0
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 1
41127: NEG
41128: PUSH
41129: LD_INT 1
41131: NEG
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 2
41139: PUSH
41140: LD_INT 1
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 2
41149: NEG
41150: PUSH
41151: LD_INT 1
41153: NEG
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41170: LD_ADDR_VAR 0 36
41174: PUSH
41175: LD_INT 0
41177: PUSH
41178: LD_INT 0
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 0
41187: PUSH
41188: LD_INT 1
41190: NEG
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 1
41198: PUSH
41199: LD_INT 0
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 1
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: LD_INT 1
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: LD_INT 0
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 1
41239: NEG
41240: PUSH
41241: LD_INT 1
41243: NEG
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 1
41251: NEG
41252: PUSH
41253: LD_INT 2
41255: NEG
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 1
41263: PUSH
41264: LD_INT 2
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41282: LD_ADDR_VAR 0 37
41286: PUSH
41287: LD_INT 0
41289: PUSH
41290: LD_INT 0
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 0
41299: PUSH
41300: LD_INT 1
41302: NEG
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 1
41310: PUSH
41311: LD_INT 0
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 1
41320: PUSH
41321: LD_INT 1
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 0
41330: PUSH
41331: LD_INT 1
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 1
41340: NEG
41341: PUSH
41342: LD_INT 0
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 1
41351: NEG
41352: PUSH
41353: LD_INT 1
41355: NEG
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: PUSH
41364: LD_INT 1
41366: NEG
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 1
41374: NEG
41375: PUSH
41376: LD_INT 1
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41394: LD_ADDR_VAR 0 38
41398: PUSH
41399: LD_INT 0
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 0
41411: PUSH
41412: LD_INT 1
41414: NEG
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 1
41422: PUSH
41423: LD_INT 0
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 1
41432: PUSH
41433: LD_INT 1
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 0
41442: PUSH
41443: LD_INT 1
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 1
41452: NEG
41453: PUSH
41454: LD_INT 0
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 1
41463: NEG
41464: PUSH
41465: LD_INT 1
41467: NEG
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 2
41475: PUSH
41476: LD_INT 1
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 2
41485: NEG
41486: PUSH
41487: LD_INT 1
41489: NEG
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41506: LD_ADDR_VAR 0 39
41510: PUSH
41511: LD_INT 0
41513: PUSH
41514: LD_INT 0
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: LD_INT 1
41526: NEG
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 1
41534: PUSH
41535: LD_INT 0
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: LD_INT 1
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: LD_INT 1
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 1
41564: NEG
41565: PUSH
41566: LD_INT 0
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 1
41575: NEG
41576: PUSH
41577: LD_INT 1
41579: NEG
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 1
41587: NEG
41588: PUSH
41589: LD_INT 2
41591: NEG
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 1
41599: PUSH
41600: LD_INT 2
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41618: LD_ADDR_VAR 0 40
41622: PUSH
41623: LD_INT 0
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 0
41635: PUSH
41636: LD_INT 1
41638: NEG
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: LD_INT 0
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 1
41656: PUSH
41657: LD_INT 1
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 0
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 1
41676: NEG
41677: PUSH
41678: LD_INT 0
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 1
41687: NEG
41688: PUSH
41689: LD_INT 1
41691: NEG
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 1
41699: PUSH
41700: LD_INT 1
41702: NEG
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 1
41710: NEG
41711: PUSH
41712: LD_INT 1
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41730: LD_ADDR_VAR 0 41
41734: PUSH
41735: LD_INT 0
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 0
41747: PUSH
41748: LD_INT 1
41750: NEG
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 1
41758: PUSH
41759: LD_INT 0
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 1
41768: PUSH
41769: LD_INT 1
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 0
41778: PUSH
41779: LD_INT 1
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 1
41788: NEG
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 1
41799: NEG
41800: PUSH
41801: LD_INT 1
41803: NEG
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 1
41811: NEG
41812: PUSH
41813: LD_INT 2
41815: NEG
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 1
41823: PUSH
41824: LD_INT 1
41826: NEG
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 2
41834: PUSH
41835: LD_INT 0
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 2
41844: PUSH
41845: LD_INT 1
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 2
41854: PUSH
41855: LD_INT 2
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 1
41864: PUSH
41865: LD_INT 2
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 1
41874: NEG
41875: PUSH
41876: LD_INT 1
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 2
41885: NEG
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 2
41896: NEG
41897: PUSH
41898: LD_INT 1
41900: NEG
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 2
41908: NEG
41909: PUSH
41910: LD_INT 2
41912: NEG
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 2
41920: NEG
41921: PUSH
41922: LD_INT 3
41924: NEG
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 2
41932: PUSH
41933: LD_INT 1
41935: NEG
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 3
41943: PUSH
41944: LD_INT 0
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 3
41953: PUSH
41954: LD_INT 1
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 3
41963: PUSH
41964: LD_INT 2
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 3
41973: PUSH
41974: LD_INT 3
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 2
41983: PUSH
41984: LD_INT 3
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 2
41993: NEG
41994: PUSH
41995: LD_INT 1
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 3
42004: NEG
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 3
42015: NEG
42016: PUSH
42017: LD_INT 1
42019: NEG
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 3
42027: NEG
42028: PUSH
42029: LD_INT 2
42031: NEG
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 3
42039: NEG
42040: PUSH
42041: LD_INT 3
42043: NEG
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42080: LD_ADDR_VAR 0 42
42084: PUSH
42085: LD_INT 0
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: LD_INT 1
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 1
42108: PUSH
42109: LD_INT 0
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 1
42118: PUSH
42119: LD_INT 1
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 0
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 1
42138: NEG
42139: PUSH
42140: LD_INT 0
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: NEG
42150: PUSH
42151: LD_INT 1
42153: NEG
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 1
42161: NEG
42162: PUSH
42163: LD_INT 2
42165: NEG
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 0
42173: PUSH
42174: LD_INT 2
42176: NEG
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 1
42184: PUSH
42185: LD_INT 1
42187: NEG
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 2
42195: PUSH
42196: LD_INT 1
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 2
42205: PUSH
42206: LD_INT 2
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 1
42215: PUSH
42216: LD_INT 2
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 0
42225: PUSH
42226: LD_INT 2
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 1
42235: NEG
42236: PUSH
42237: LD_INT 1
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 2
42246: NEG
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 2
42258: NEG
42259: PUSH
42260: LD_INT 2
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 2
42270: NEG
42271: PUSH
42272: LD_INT 3
42274: NEG
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 1
42282: NEG
42283: PUSH
42284: LD_INT 3
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: LD_INT 3
42297: NEG
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 1
42305: PUSH
42306: LD_INT 2
42308: NEG
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 3
42316: PUSH
42317: LD_INT 2
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 3
42326: PUSH
42327: LD_INT 3
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 2
42336: PUSH
42337: LD_INT 3
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 1
42346: PUSH
42347: LD_INT 3
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 0
42356: PUSH
42357: LD_INT 3
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 1
42366: NEG
42367: PUSH
42368: LD_INT 2
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 3
42377: NEG
42378: PUSH
42379: LD_INT 2
42381: NEG
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 3
42389: NEG
42390: PUSH
42391: LD_INT 3
42393: NEG
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42430: LD_ADDR_VAR 0 43
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: LD_INT 0
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 0
42447: PUSH
42448: LD_INT 1
42450: NEG
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 1
42458: PUSH
42459: LD_INT 0
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 1
42468: PUSH
42469: LD_INT 1
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 0
42478: PUSH
42479: LD_INT 1
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 1
42488: NEG
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 1
42499: NEG
42500: PUSH
42501: LD_INT 1
42503: NEG
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 1
42511: NEG
42512: PUSH
42513: LD_INT 2
42515: NEG
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: LD_INT 2
42526: NEG
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 1
42534: PUSH
42535: LD_INT 1
42537: NEG
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 2
42545: PUSH
42546: LD_INT 0
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 2
42555: PUSH
42556: LD_INT 1
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: LD_INT 2
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: LD_INT 2
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 1
42585: NEG
42586: PUSH
42587: LD_INT 1
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 2
42596: NEG
42597: PUSH
42598: LD_INT 0
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 2
42607: NEG
42608: PUSH
42609: LD_INT 1
42611: NEG
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 1
42619: NEG
42620: PUSH
42621: LD_INT 3
42623: NEG
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 0
42631: PUSH
42632: LD_INT 3
42634: NEG
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 1
42642: PUSH
42643: LD_INT 2
42645: NEG
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 2
42653: PUSH
42654: LD_INT 1
42656: NEG
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 3
42664: PUSH
42665: LD_INT 0
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 3
42674: PUSH
42675: LD_INT 1
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 1
42684: PUSH
42685: LD_INT 3
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 0
42694: PUSH
42695: LD_INT 3
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 1
42704: NEG
42705: PUSH
42706: LD_INT 2
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 2
42715: NEG
42716: PUSH
42717: LD_INT 1
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 3
42726: NEG
42727: PUSH
42728: LD_INT 0
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 3
42737: NEG
42738: PUSH
42739: LD_INT 1
42741: NEG
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42778: LD_ADDR_VAR 0 44
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: LD_INT 0
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: LD_INT 1
42798: NEG
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 1
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 1
42816: PUSH
42817: LD_INT 1
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 0
42826: PUSH
42827: LD_INT 1
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 1
42836: NEG
42837: PUSH
42838: LD_INT 0
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 1
42847: NEG
42848: PUSH
42849: LD_INT 1
42851: NEG
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 1
42859: NEG
42860: PUSH
42861: LD_INT 2
42863: NEG
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 1
42871: PUSH
42872: LD_INT 1
42874: NEG
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 2
42882: PUSH
42883: LD_INT 0
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 2
42892: PUSH
42893: LD_INT 1
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 2
42902: PUSH
42903: LD_INT 2
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 1
42912: PUSH
42913: LD_INT 2
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 1
42922: NEG
42923: PUSH
42924: LD_INT 1
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 2
42933: NEG
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 2
42944: NEG
42945: PUSH
42946: LD_INT 1
42948: NEG
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 2
42956: NEG
42957: PUSH
42958: LD_INT 2
42960: NEG
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 2
42968: NEG
42969: PUSH
42970: LD_INT 3
42972: NEG
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 2
42980: PUSH
42981: LD_INT 1
42983: NEG
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 3
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 3
43001: PUSH
43002: LD_INT 1
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 3
43011: PUSH
43012: LD_INT 2
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 3
43021: PUSH
43022: LD_INT 3
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 2
43031: PUSH
43032: LD_INT 3
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 2
43041: NEG
43042: PUSH
43043: LD_INT 1
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 3
43052: NEG
43053: PUSH
43054: LD_INT 0
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 3
43063: NEG
43064: PUSH
43065: LD_INT 1
43067: NEG
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 3
43075: NEG
43076: PUSH
43077: LD_INT 2
43079: NEG
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 3
43087: NEG
43088: PUSH
43089: LD_INT 3
43091: NEG
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43128: LD_ADDR_VAR 0 45
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: LD_INT 1
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 1
43166: PUSH
43167: LD_INT 1
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 0
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 1
43186: NEG
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 1
43197: NEG
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 1
43209: NEG
43210: PUSH
43211: LD_INT 2
43213: NEG
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 0
43221: PUSH
43222: LD_INT 2
43224: NEG
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 1
43232: PUSH
43233: LD_INT 1
43235: NEG
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 2
43243: PUSH
43244: LD_INT 1
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 2
43253: PUSH
43254: LD_INT 2
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: LD_INT 2
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 0
43273: PUSH
43274: LD_INT 2
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: LD_INT 1
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 2
43294: NEG
43295: PUSH
43296: LD_INT 1
43298: NEG
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 2
43306: NEG
43307: PUSH
43308: LD_INT 2
43310: NEG
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 2
43318: NEG
43319: PUSH
43320: LD_INT 3
43322: NEG
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 1
43330: NEG
43331: PUSH
43332: LD_INT 3
43334: NEG
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: LD_INT 3
43345: NEG
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 1
43353: PUSH
43354: LD_INT 2
43356: NEG
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 3
43364: PUSH
43365: LD_INT 2
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 3
43374: PUSH
43375: LD_INT 3
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 2
43384: PUSH
43385: LD_INT 3
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 1
43394: PUSH
43395: LD_INT 3
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 0
43404: PUSH
43405: LD_INT 3
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 1
43414: NEG
43415: PUSH
43416: LD_INT 2
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 3
43425: NEG
43426: PUSH
43427: LD_INT 2
43429: NEG
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 3
43437: NEG
43438: PUSH
43439: LD_INT 3
43441: NEG
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43478: LD_ADDR_VAR 0 46
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: LD_INT 0
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 0
43495: PUSH
43496: LD_INT 1
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: LD_INT 0
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 1
43516: PUSH
43517: LD_INT 1
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 0
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 1
43536: NEG
43537: PUSH
43538: LD_INT 0
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 1
43547: NEG
43548: PUSH
43549: LD_INT 1
43551: NEG
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 1
43559: NEG
43560: PUSH
43561: LD_INT 2
43563: NEG
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 0
43571: PUSH
43572: LD_INT 2
43574: NEG
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: LD_INT 1
43585: NEG
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 2
43593: PUSH
43594: LD_INT 0
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 2
43603: PUSH
43604: LD_INT 1
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 1
43613: PUSH
43614: LD_INT 2
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 0
43623: PUSH
43624: LD_INT 2
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 1
43633: NEG
43634: PUSH
43635: LD_INT 1
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 2
43644: NEG
43645: PUSH
43646: LD_INT 0
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 2
43655: NEG
43656: PUSH
43657: LD_INT 1
43659: NEG
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 1
43667: NEG
43668: PUSH
43669: LD_INT 3
43671: NEG
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 0
43679: PUSH
43680: LD_INT 3
43682: NEG
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 1
43690: PUSH
43691: LD_INT 2
43693: NEG
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 2
43701: PUSH
43702: LD_INT 1
43704: NEG
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 3
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 3
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: PUSH
43733: LD_INT 3
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 0
43742: PUSH
43743: LD_INT 3
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 1
43752: NEG
43753: PUSH
43754: LD_INT 2
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 2
43763: NEG
43764: PUSH
43765: LD_INT 1
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 3
43774: NEG
43775: PUSH
43776: LD_INT 0
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 3
43785: NEG
43786: PUSH
43787: LD_INT 1
43789: NEG
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43826: LD_ADDR_VAR 0 47
43830: PUSH
43831: LD_INT 0
43833: PUSH
43834: LD_INT 0
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 0
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 1
43854: PUSH
43855: LD_INT 0
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 1
43864: PUSH
43865: LD_INT 1
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 0
43874: PUSH
43875: LD_INT 1
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 1
43884: NEG
43885: PUSH
43886: LD_INT 0
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 1
43895: NEG
43896: PUSH
43897: LD_INT 1
43899: NEG
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 1
43907: NEG
43908: PUSH
43909: LD_INT 2
43911: NEG
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 0
43919: PUSH
43920: LD_INT 2
43922: NEG
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 1
43930: PUSH
43931: LD_INT 1
43933: NEG
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 2
43941: NEG
43942: PUSH
43943: LD_INT 1
43945: NEG
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 2
43953: NEG
43954: PUSH
43955: LD_INT 2
43957: NEG
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43977: LD_ADDR_VAR 0 48
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: LD_INT 0
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 0
43994: PUSH
43995: LD_INT 1
43997: NEG
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: LD_INT 0
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 0
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 1
44046: NEG
44047: PUSH
44048: LD_INT 1
44050: NEG
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: LD_INT 2
44062: NEG
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 0
44070: PUSH
44071: LD_INT 2
44073: NEG
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 1
44081: PUSH
44082: LD_INT 1
44084: NEG
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 2
44092: PUSH
44093: LD_INT 0
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 2
44102: PUSH
44103: LD_INT 1
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44124: LD_ADDR_VAR 0 49
44128: PUSH
44129: LD_INT 0
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: LD_INT 1
44144: NEG
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 1
44152: PUSH
44153: LD_INT 0
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: LD_INT 1
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: LD_INT 1
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 1
44182: NEG
44183: PUSH
44184: LD_INT 0
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: NEG
44194: PUSH
44195: LD_INT 1
44197: NEG
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: LD_INT 1
44208: NEG
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 2
44216: PUSH
44217: LD_INT 0
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 2
44226: PUSH
44227: LD_INT 1
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 2
44236: PUSH
44237: LD_INT 2
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 1
44246: PUSH
44247: LD_INT 2
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44268: LD_ADDR_VAR 0 50
44272: PUSH
44273: LD_INT 0
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 0
44285: PUSH
44286: LD_INT 1
44288: NEG
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 1
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 1
44306: PUSH
44307: LD_INT 1
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 0
44316: PUSH
44317: LD_INT 1
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: LD_INT 0
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 1
44337: NEG
44338: PUSH
44339: LD_INT 1
44341: NEG
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 2
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 2
44359: PUSH
44360: LD_INT 2
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 1
44369: PUSH
44370: LD_INT 2
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 0
44379: PUSH
44380: LD_INT 2
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 1
44389: NEG
44390: PUSH
44391: LD_INT 1
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44412: LD_ADDR_VAR 0 51
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: LD_INT 0
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: LD_INT 1
44432: NEG
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 1
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 1
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 0
44460: PUSH
44461: LD_INT 1
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 1
44481: NEG
44482: PUSH
44483: LD_INT 1
44485: NEG
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 1
44493: PUSH
44494: LD_INT 2
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 0
44503: PUSH
44504: LD_INT 2
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 1
44513: NEG
44514: PUSH
44515: LD_INT 1
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 2
44524: NEG
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 2
44535: NEG
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44559: LD_ADDR_VAR 0 52
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: LD_INT 0
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: LD_INT 1
44579: NEG
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 1
44587: PUSH
44588: LD_INT 0
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 1
44597: PUSH
44598: LD_INT 1
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: LD_INT 1
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: LD_INT 0
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 1
44628: NEG
44629: PUSH
44630: LD_INT 1
44632: NEG
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 1
44640: NEG
44641: PUSH
44642: LD_INT 2
44644: NEG
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 1
44652: NEG
44653: PUSH
44654: LD_INT 1
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 2
44663: NEG
44664: PUSH
44665: LD_INT 0
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 2
44674: NEG
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 2
44686: NEG
44687: PUSH
44688: LD_INT 2
44690: NEG
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44710: LD_ADDR_VAR 0 53
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: LD_INT 0
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: LD_INT 1
44730: NEG
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: LD_INT 0
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 1
44748: PUSH
44749: LD_INT 1
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 0
44758: PUSH
44759: LD_INT 1
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 1
44768: NEG
44769: PUSH
44770: LD_INT 0
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 1
44779: NEG
44780: PUSH
44781: LD_INT 1
44783: NEG
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 1
44791: NEG
44792: PUSH
44793: LD_INT 2
44795: NEG
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: LD_INT 2
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: LD_INT 1
44817: NEG
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 2
44825: PUSH
44826: LD_INT 0
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 2
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 2
44845: PUSH
44846: LD_INT 2
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 1
44855: PUSH
44856: LD_INT 2
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: LD_INT 2
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 2
44886: NEG
44887: PUSH
44888: LD_INT 0
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 2
44897: NEG
44898: PUSH
44899: LD_INT 1
44901: NEG
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 2
44909: NEG
44910: PUSH
44911: LD_INT 2
44913: NEG
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44940: LD_ADDR_VAR 0 54
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: LD_INT 1
44960: NEG
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: LD_INT 0
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 1
44978: PUSH
44979: LD_INT 1
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 0
44988: PUSH
44989: LD_INT 1
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 1
44998: NEG
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 1
45009: NEG
45010: PUSH
45011: LD_INT 1
45013: NEG
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: LD_INT 2
45025: NEG
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 0
45033: PUSH
45034: LD_INT 2
45036: NEG
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 2
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 2
45065: PUSH
45066: LD_INT 1
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 2
45075: PUSH
45076: LD_INT 2
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 1
45085: PUSH
45086: LD_INT 2
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: LD_INT 2
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: NEG
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 2
45116: NEG
45117: PUSH
45118: LD_INT 0
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 2
45127: NEG
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 2
45139: NEG
45140: PUSH
45141: LD_INT 2
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45170: LD_ADDR_VAR 0 55
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: LD_INT 0
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 0
45187: PUSH
45188: LD_INT 1
45190: NEG
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: PUSH
45199: LD_INT 0
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: LD_INT 1
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 0
45218: PUSH
45219: LD_INT 1
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 1
45228: NEG
45229: PUSH
45230: LD_INT 0
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 1
45239: NEG
45240: PUSH
45241: LD_INT 1
45243: NEG
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 1
45251: NEG
45252: PUSH
45253: LD_INT 2
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: LD_INT 2
45266: NEG
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: LD_INT 1
45277: NEG
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 2
45285: PUSH
45286: LD_INT 0
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 2
45295: PUSH
45296: LD_INT 1
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 2
45305: PUSH
45306: LD_INT 2
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: LD_INT 2
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: LD_INT 2
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: LD_INT 1
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 2
45346: NEG
45347: PUSH
45348: LD_INT 0
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 2
45357: NEG
45358: PUSH
45359: LD_INT 1
45361: NEG
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 2
45369: NEG
45370: PUSH
45371: LD_INT 2
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45400: LD_ADDR_VAR 0 56
45404: PUSH
45405: LD_INT 0
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 0
45417: PUSH
45418: LD_INT 1
45420: NEG
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 1
45428: PUSH
45429: LD_INT 0
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 1
45438: PUSH
45439: LD_INT 1
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 0
45448: PUSH
45449: LD_INT 1
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 1
45458: NEG
45459: PUSH
45460: LD_INT 0
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 1
45469: NEG
45470: PUSH
45471: LD_INT 1
45473: NEG
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 1
45481: NEG
45482: PUSH
45483: LD_INT 2
45485: NEG
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 0
45493: PUSH
45494: LD_INT 2
45496: NEG
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: LD_INT 1
45507: NEG
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 2
45515: PUSH
45516: LD_INT 0
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 2
45525: PUSH
45526: LD_INT 1
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 2
45535: PUSH
45536: LD_INT 2
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: LD_INT 2
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: LD_INT 2
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: NEG
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 2
45576: NEG
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 2
45587: NEG
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 2
45599: NEG
45600: PUSH
45601: LD_INT 2
45603: NEG
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45630: LD_ADDR_VAR 0 57
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 0
45647: PUSH
45648: LD_INT 1
45650: NEG
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: LD_INT 0
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 0
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 1
45699: NEG
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: LD_INT 2
45715: NEG
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: LD_INT 2
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 2
45745: PUSH
45746: LD_INT 0
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 2
45755: PUSH
45756: LD_INT 1
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 2
45765: PUSH
45766: LD_INT 2
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: LD_INT 2
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: LD_INT 2
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: LD_INT 1
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 2
45806: NEG
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 2
45817: NEG
45818: PUSH
45819: LD_INT 1
45821: NEG
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 2
45829: NEG
45830: PUSH
45831: LD_INT 2
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45860: LD_ADDR_VAR 0 58
45864: PUSH
45865: LD_INT 0
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: LD_INT 1
45880: NEG
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 1
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: LD_INT 1
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: LD_INT 1
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 1
45918: NEG
45919: PUSH
45920: LD_INT 0
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: PUSH
45931: LD_INT 1
45933: NEG
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: LD_INT 2
45945: NEG
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: LD_INT 2
45956: NEG
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 1
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 2
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 2
45985: PUSH
45986: LD_INT 1
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 2
45995: PUSH
45996: LD_INT 2
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: LD_INT 2
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: LD_INT 2
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: NEG
46026: PUSH
46027: LD_INT 1
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 2
46036: NEG
46037: PUSH
46038: LD_INT 0
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 2
46047: NEG
46048: PUSH
46049: LD_INT 1
46051: NEG
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 2
46059: NEG
46060: PUSH
46061: LD_INT 2
46063: NEG
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46090: LD_ADDR_VAR 0 59
46094: PUSH
46095: LD_INT 0
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: LD_INT 1
46110: NEG
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 1
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 1
46128: PUSH
46129: LD_INT 1
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 0
46138: PUSH
46139: LD_INT 1
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 1
46148: NEG
46149: PUSH
46150: LD_INT 0
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 1
46159: NEG
46160: PUSH
46161: LD_INT 1
46163: NEG
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46178: LD_ADDR_VAR 0 60
46182: PUSH
46183: LD_INT 0
46185: PUSH
46186: LD_INT 0
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 1
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 1
46216: PUSH
46217: LD_INT 1
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: LD_INT 1
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 1
46236: NEG
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: NEG
46248: PUSH
46249: LD_INT 1
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46266: LD_ADDR_VAR 0 61
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 1
46294: PUSH
46295: LD_INT 0
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: LD_INT 1
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: LD_INT 1
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: LD_INT 0
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: LD_INT 1
46339: NEG
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46354: LD_ADDR_VAR 0 62
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: LD_INT 1
46374: NEG
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 1
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: PUSH
46393: LD_INT 1
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 1
46412: NEG
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: NEG
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46442: LD_ADDR_VAR 0 63
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: LD_INT 0
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: LD_INT 1
46462: NEG
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 1
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: LD_INT 1
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 1
46500: NEG
46501: PUSH
46502: LD_INT 0
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: LD_INT 1
46515: NEG
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46530: LD_ADDR_VAR 0 64
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: LD_INT 0
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: LD_INT 1
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: LD_INT 0
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 1
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 0
46578: PUSH
46579: LD_INT 1
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: NEG
46589: PUSH
46590: LD_INT 0
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: NEG
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: ST_TO_ADDR
// end ; 1 :
46618: GO 52515
46620: LD_INT 1
46622: DOUBLE
46623: EQUAL
46624: IFTRUE 46628
46626: GO 49251
46628: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46629: LD_ADDR_VAR 0 11
46633: PUSH
46634: LD_INT 1
46636: NEG
46637: PUSH
46638: LD_INT 3
46640: NEG
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 0
46648: PUSH
46649: LD_INT 3
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: LD_INT 2
46662: NEG
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: LIST
46672: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46673: LD_ADDR_VAR 0 12
46677: PUSH
46678: LD_INT 2
46680: PUSH
46681: LD_INT 1
46683: NEG
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 3
46691: PUSH
46692: LD_INT 0
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 3
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: LIST
46713: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46714: LD_ADDR_VAR 0 13
46718: PUSH
46719: LD_INT 3
46721: PUSH
46722: LD_INT 2
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 3
46731: PUSH
46732: LD_INT 3
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 2
46741: PUSH
46742: LD_INT 3
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: LIST
46753: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46754: LD_ADDR_VAR 0 14
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: LD_INT 3
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 0
46771: PUSH
46772: LD_INT 3
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 1
46781: NEG
46782: PUSH
46783: LD_INT 2
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: LIST
46794: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46795: LD_ADDR_VAR 0 15
46799: PUSH
46800: LD_INT 2
46802: NEG
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 3
46813: NEG
46814: PUSH
46815: LD_INT 0
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 3
46824: NEG
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: LIST
46838: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46839: LD_ADDR_VAR 0 16
46843: PUSH
46844: LD_INT 2
46846: NEG
46847: PUSH
46848: LD_INT 3
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 3
46858: NEG
46859: PUSH
46860: LD_INT 2
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 3
46870: NEG
46871: PUSH
46872: LD_INT 3
46874: NEG
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: LIST
46884: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46885: LD_ADDR_VAR 0 17
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: LD_INT 3
46896: NEG
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: LD_INT 3
46907: NEG
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: LD_INT 2
46918: NEG
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: LIST
46928: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46929: LD_ADDR_VAR 0 18
46933: PUSH
46934: LD_INT 2
46936: PUSH
46937: LD_INT 1
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 3
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 3
46957: PUSH
46958: LD_INT 1
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: LIST
46969: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46970: LD_ADDR_VAR 0 19
46974: PUSH
46975: LD_INT 3
46977: PUSH
46978: LD_INT 2
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 3
46987: PUSH
46988: LD_INT 3
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 2
46997: PUSH
46998: LD_INT 3
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: LIST
47009: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47010: LD_ADDR_VAR 0 20
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: LD_INT 3
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 0
47027: PUSH
47028: LD_INT 3
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: LD_INT 2
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: LIST
47050: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47051: LD_ADDR_VAR 0 21
47055: PUSH
47056: LD_INT 2
47058: NEG
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 3
47069: NEG
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 3
47080: NEG
47081: PUSH
47082: LD_INT 1
47084: NEG
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: LIST
47094: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47095: LD_ADDR_VAR 0 22
47099: PUSH
47100: LD_INT 2
47102: NEG
47103: PUSH
47104: LD_INT 3
47106: NEG
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 3
47114: NEG
47115: PUSH
47116: LD_INT 2
47118: NEG
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 3
47126: NEG
47127: PUSH
47128: LD_INT 3
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: LIST
47140: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47141: LD_ADDR_VAR 0 23
47145: PUSH
47146: LD_INT 0
47148: PUSH
47149: LD_INT 3
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 1
47159: NEG
47160: PUSH
47161: LD_INT 4
47163: NEG
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 1
47171: PUSH
47172: LD_INT 3
47174: NEG
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: LIST
47184: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47185: LD_ADDR_VAR 0 24
47189: PUSH
47190: LD_INT 3
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 3
47202: PUSH
47203: LD_INT 1
47205: NEG
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 4
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: LIST
47225: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47226: LD_ADDR_VAR 0 25
47230: PUSH
47231: LD_INT 3
47233: PUSH
47234: LD_INT 3
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 4
47243: PUSH
47244: LD_INT 3
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 3
47253: PUSH
47254: LD_INT 4
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: LIST
47265: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47266: LD_ADDR_VAR 0 26
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: LD_INT 3
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 1
47283: PUSH
47284: LD_INT 4
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 1
47293: NEG
47294: PUSH
47295: LD_INT 3
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: LIST
47306: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47307: LD_ADDR_VAR 0 27
47311: PUSH
47312: LD_INT 3
47314: NEG
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 3
47325: NEG
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 4
47336: NEG
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: LIST
47350: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47351: LD_ADDR_VAR 0 28
47355: PUSH
47356: LD_INT 3
47358: NEG
47359: PUSH
47360: LD_INT 3
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 3
47370: NEG
47371: PUSH
47372: LD_INT 4
47374: NEG
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 4
47382: NEG
47383: PUSH
47384: LD_INT 3
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: LIST
47396: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47397: LD_ADDR_VAR 0 29
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: LD_INT 3
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 0
47416: PUSH
47417: LD_INT 3
47419: NEG
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 1
47427: PUSH
47428: LD_INT 2
47430: NEG
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: LD_INT 4
47442: NEG
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: LD_INT 4
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 1
47461: PUSH
47462: LD_INT 3
47464: NEG
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: PUSH
47474: LD_INT 5
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 0
47484: PUSH
47485: LD_INT 5
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: PUSH
47496: LD_INT 4
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 1
47506: NEG
47507: PUSH
47508: LD_INT 6
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: LD_INT 6
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: LD_INT 5
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47552: LD_ADDR_VAR 0 30
47556: PUSH
47557: LD_INT 2
47559: PUSH
47560: LD_INT 1
47562: NEG
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 3
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 3
47580: PUSH
47581: LD_INT 1
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 3
47590: PUSH
47591: LD_INT 1
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 4
47601: PUSH
47602: LD_INT 0
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 4
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 4
47621: PUSH
47622: LD_INT 1
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 5
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 5
47642: PUSH
47643: LD_INT 1
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 5
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 6
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 6
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47695: LD_ADDR_VAR 0 31
47699: PUSH
47700: LD_INT 3
47702: PUSH
47703: LD_INT 2
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 3
47712: PUSH
47713: LD_INT 3
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 2
47722: PUSH
47723: LD_INT 3
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 4
47732: PUSH
47733: LD_INT 3
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 4
47742: PUSH
47743: LD_INT 4
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 3
47752: PUSH
47753: LD_INT 4
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 5
47762: PUSH
47763: LD_INT 4
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 5
47772: PUSH
47773: LD_INT 5
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 4
47782: PUSH
47783: LD_INT 5
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 6
47792: PUSH
47793: LD_INT 5
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 6
47802: PUSH
47803: LD_INT 6
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 5
47812: PUSH
47813: LD_INT 6
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47834: LD_ADDR_VAR 0 32
47838: PUSH
47839: LD_INT 1
47841: PUSH
47842: LD_INT 3
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 0
47851: PUSH
47852: LD_INT 3
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: LD_INT 2
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 1
47872: PUSH
47873: LD_INT 4
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 0
47882: PUSH
47883: LD_INT 4
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 1
47892: NEG
47893: PUSH
47894: LD_INT 3
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 1
47903: PUSH
47904: LD_INT 5
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 0
47913: PUSH
47914: LD_INT 5
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: LD_INT 4
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: LD_INT 6
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: LD_INT 6
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: LD_INT 5
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47977: LD_ADDR_VAR 0 33
47981: PUSH
47982: LD_INT 2
47984: NEG
47985: PUSH
47986: LD_INT 1
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 3
47995: NEG
47996: PUSH
47997: LD_INT 0
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 3
48006: NEG
48007: PUSH
48008: LD_INT 1
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 3
48018: NEG
48019: PUSH
48020: LD_INT 1
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 4
48029: NEG
48030: PUSH
48031: LD_INT 0
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 4
48040: NEG
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 4
48052: NEG
48053: PUSH
48054: LD_INT 1
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 5
48063: NEG
48064: PUSH
48065: LD_INT 0
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 5
48074: NEG
48075: PUSH
48076: LD_INT 1
48078: NEG
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 5
48086: NEG
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 6
48097: NEG
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 6
48108: NEG
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48132: LD_ADDR_VAR 0 34
48136: PUSH
48137: LD_INT 2
48139: NEG
48140: PUSH
48141: LD_INT 3
48143: NEG
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 3
48151: NEG
48152: PUSH
48153: LD_INT 2
48155: NEG
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 3
48163: NEG
48164: PUSH
48165: LD_INT 3
48167: NEG
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 3
48175: NEG
48176: PUSH
48177: LD_INT 4
48179: NEG
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 4
48187: NEG
48188: PUSH
48189: LD_INT 3
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 4
48199: NEG
48200: PUSH
48201: LD_INT 4
48203: NEG
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 4
48211: NEG
48212: PUSH
48213: LD_INT 5
48215: NEG
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 5
48223: NEG
48224: PUSH
48225: LD_INT 4
48227: NEG
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 5
48235: NEG
48236: PUSH
48237: LD_INT 5
48239: NEG
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 5
48247: NEG
48248: PUSH
48249: LD_INT 6
48251: NEG
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 6
48259: NEG
48260: PUSH
48261: LD_INT 5
48263: NEG
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 6
48271: NEG
48272: PUSH
48273: LD_INT 6
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48295: LD_ADDR_VAR 0 41
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: LD_INT 2
48305: NEG
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: NEG
48314: PUSH
48315: LD_INT 3
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: LD_INT 2
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: LIST
48338: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48339: LD_ADDR_VAR 0 42
48343: PUSH
48344: LD_INT 2
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 2
48356: PUSH
48357: LD_INT 1
48359: NEG
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 3
48367: PUSH
48368: LD_INT 1
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: LIST
48379: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48380: LD_ADDR_VAR 0 43
48384: PUSH
48385: LD_INT 2
48387: PUSH
48388: LD_INT 2
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 3
48397: PUSH
48398: LD_INT 2
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 2
48407: PUSH
48408: LD_INT 3
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: LIST
48419: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48420: LD_ADDR_VAR 0 44
48424: PUSH
48425: LD_INT 0
48427: PUSH
48428: LD_INT 2
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: LD_INT 3
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 1
48447: NEG
48448: PUSH
48449: LD_INT 2
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: LIST
48460: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48461: LD_ADDR_VAR 0 45
48465: PUSH
48466: LD_INT 2
48468: NEG
48469: PUSH
48470: LD_INT 0
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 2
48479: NEG
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 3
48490: NEG
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: LIST
48504: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48505: LD_ADDR_VAR 0 46
48509: PUSH
48510: LD_INT 2
48512: NEG
48513: PUSH
48514: LD_INT 2
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 2
48524: NEG
48525: PUSH
48526: LD_INT 3
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 3
48536: NEG
48537: PUSH
48538: LD_INT 2
48540: NEG
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: LIST
48550: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48551: LD_ADDR_VAR 0 47
48555: PUSH
48556: LD_INT 2
48558: NEG
48559: PUSH
48560: LD_INT 3
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 1
48570: NEG
48571: PUSH
48572: LD_INT 3
48574: NEG
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48584: LD_ADDR_VAR 0 48
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: LD_INT 2
48594: NEG
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 2
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48615: LD_ADDR_VAR 0 49
48619: PUSH
48620: LD_INT 3
48622: PUSH
48623: LD_INT 1
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 3
48632: PUSH
48633: LD_INT 2
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48644: LD_ADDR_VAR 0 50
48648: PUSH
48649: LD_INT 2
48651: PUSH
48652: LD_INT 3
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 1
48661: PUSH
48662: LD_INT 3
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48673: LD_ADDR_VAR 0 51
48677: PUSH
48678: LD_INT 1
48680: NEG
48681: PUSH
48682: LD_INT 2
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 2
48691: NEG
48692: PUSH
48693: LD_INT 1
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48704: LD_ADDR_VAR 0 52
48708: PUSH
48709: LD_INT 3
48711: NEG
48712: PUSH
48713: LD_INT 1
48715: NEG
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 3
48723: NEG
48724: PUSH
48725: LD_INT 2
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48737: LD_ADDR_VAR 0 53
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: PUSH
48746: LD_INT 3
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 0
48756: PUSH
48757: LD_INT 3
48759: NEG
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 1
48767: PUSH
48768: LD_INT 2
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: LIST
48780: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48781: LD_ADDR_VAR 0 54
48785: PUSH
48786: LD_INT 2
48788: PUSH
48789: LD_INT 1
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 3
48799: PUSH
48800: LD_INT 0
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 3
48809: PUSH
48810: LD_INT 1
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: LIST
48821: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48822: LD_ADDR_VAR 0 55
48826: PUSH
48827: LD_INT 3
48829: PUSH
48830: LD_INT 2
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 3
48839: PUSH
48840: LD_INT 3
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 2
48849: PUSH
48850: LD_INT 3
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: LIST
48861: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48862: LD_ADDR_VAR 0 56
48866: PUSH
48867: LD_INT 1
48869: PUSH
48870: LD_INT 3
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: LD_INT 3
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: LD_INT 2
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: LIST
48902: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48903: LD_ADDR_VAR 0 57
48907: PUSH
48908: LD_INT 2
48910: NEG
48911: PUSH
48912: LD_INT 1
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 3
48921: NEG
48922: PUSH
48923: LD_INT 0
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 3
48932: NEG
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: LIST
48946: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48947: LD_ADDR_VAR 0 58
48951: PUSH
48952: LD_INT 2
48954: NEG
48955: PUSH
48956: LD_INT 3
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 3
48966: NEG
48967: PUSH
48968: LD_INT 2
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 3
48978: NEG
48979: PUSH
48980: LD_INT 3
48982: NEG
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: LIST
48992: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48993: LD_ADDR_VAR 0 59
48997: PUSH
48998: LD_INT 1
49000: NEG
49001: PUSH
49002: LD_INT 2
49004: NEG
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: LD_INT 2
49015: NEG
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 1
49023: PUSH
49024: LD_INT 1
49026: NEG
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: LIST
49036: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49037: LD_ADDR_VAR 0 60
49041: PUSH
49042: LD_INT 1
49044: PUSH
49045: LD_INT 1
49047: NEG
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 2
49055: PUSH
49056: LD_INT 0
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 2
49065: PUSH
49066: LD_INT 1
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: LIST
49077: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49078: LD_ADDR_VAR 0 61
49082: PUSH
49083: LD_INT 2
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 2
49095: PUSH
49096: LD_INT 2
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 1
49105: PUSH
49106: LD_INT 2
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: LIST
49117: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49118: LD_ADDR_VAR 0 62
49122: PUSH
49123: LD_INT 1
49125: PUSH
49126: LD_INT 2
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 0
49135: PUSH
49136: LD_INT 2
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: LD_INT 1
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: LIST
49158: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49159: LD_ADDR_VAR 0 63
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 2
49177: NEG
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 2
49188: NEG
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: LIST
49202: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49203: LD_ADDR_VAR 0 64
49207: PUSH
49208: LD_INT 1
49210: NEG
49211: PUSH
49212: LD_INT 2
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 2
49222: NEG
49223: PUSH
49224: LD_INT 1
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 2
49234: NEG
49235: PUSH
49236: LD_INT 2
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: LIST
49248: ST_TO_ADDR
// end ; 2 :
49249: GO 52515
49251: LD_INT 2
49253: DOUBLE
49254: EQUAL
49255: IFTRUE 49259
49257: GO 52514
49259: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49260: LD_ADDR_VAR 0 29
49264: PUSH
49265: LD_INT 4
49267: PUSH
49268: LD_INT 0
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 4
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 5
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 5
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 4
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 3
49318: PUSH
49319: LD_INT 0
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 3
49328: PUSH
49329: LD_INT 1
49331: NEG
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 3
49339: PUSH
49340: LD_INT 2
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 5
49350: PUSH
49351: LD_INT 2
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 3
49360: PUSH
49361: LD_INT 3
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 3
49370: PUSH
49371: LD_INT 2
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 4
49380: PUSH
49381: LD_INT 3
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 4
49390: PUSH
49391: LD_INT 4
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 3
49400: PUSH
49401: LD_INT 4
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 2
49410: PUSH
49411: LD_INT 3
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 2
49420: PUSH
49421: LD_INT 2
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 4
49430: PUSH
49431: LD_INT 2
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 2
49440: PUSH
49441: LD_INT 4
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: LD_INT 4
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 0
49460: PUSH
49461: LD_INT 3
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: PUSH
49471: LD_INT 4
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: LD_INT 5
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: LD_INT 5
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 1
49500: NEG
49501: PUSH
49502: LD_INT 4
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 1
49511: NEG
49512: PUSH
49513: LD_INT 3
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 2
49522: PUSH
49523: LD_INT 5
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 2
49532: NEG
49533: PUSH
49534: LD_INT 3
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 3
49543: NEG
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 3
49554: NEG
49555: PUSH
49556: LD_INT 1
49558: NEG
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 2
49566: NEG
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 2
49577: NEG
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 3
49588: NEG
49589: PUSH
49590: LD_INT 1
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 4
49599: NEG
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 4
49610: NEG
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 4
49622: NEG
49623: PUSH
49624: LD_INT 2
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 2
49634: NEG
49635: PUSH
49636: LD_INT 2
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 4
49645: NEG
49646: PUSH
49647: LD_INT 4
49649: NEG
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 4
49657: NEG
49658: PUSH
49659: LD_INT 5
49661: NEG
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 3
49669: NEG
49670: PUSH
49671: LD_INT 4
49673: NEG
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 3
49681: NEG
49682: PUSH
49683: LD_INT 3
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 4
49693: NEG
49694: PUSH
49695: LD_INT 3
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 5
49705: NEG
49706: PUSH
49707: LD_INT 4
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 5
49717: NEG
49718: PUSH
49719: LD_INT 5
49721: NEG
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 3
49729: NEG
49730: PUSH
49731: LD_INT 5
49733: NEG
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 5
49741: NEG
49742: PUSH
49743: LD_INT 3
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49798: LD_ADDR_VAR 0 30
49802: PUSH
49803: LD_INT 4
49805: PUSH
49806: LD_INT 4
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 4
49815: PUSH
49816: LD_INT 3
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 5
49825: PUSH
49826: LD_INT 4
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 5
49835: PUSH
49836: LD_INT 5
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 4
49845: PUSH
49846: LD_INT 5
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 3
49855: PUSH
49856: LD_INT 4
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 3
49865: PUSH
49866: LD_INT 3
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 5
49875: PUSH
49876: LD_INT 3
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 3
49885: PUSH
49886: LD_INT 5
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 0
49895: PUSH
49896: LD_INT 3
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: LD_INT 2
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 1
49915: PUSH
49916: LD_INT 3
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 1
49925: PUSH
49926: LD_INT 4
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 0
49935: PUSH
49936: LD_INT 4
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 1
49945: NEG
49946: PUSH
49947: LD_INT 3
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 1
49956: NEG
49957: PUSH
49958: LD_INT 2
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 2
49967: PUSH
49968: LD_INT 4
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 2
49977: NEG
49978: PUSH
49979: LD_INT 2
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 4
49988: NEG
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 4
49999: NEG
50000: PUSH
50001: LD_INT 1
50003: NEG
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 3
50011: NEG
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 3
50022: NEG
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 4
50033: NEG
50034: PUSH
50035: LD_INT 1
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 5
50044: NEG
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 5
50055: NEG
50056: PUSH
50057: LD_INT 1
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 5
50067: NEG
50068: PUSH
50069: LD_INT 2
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 3
50079: NEG
50080: PUSH
50081: LD_INT 2
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 3
50090: NEG
50091: PUSH
50092: LD_INT 3
50094: NEG
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 3
50102: NEG
50103: PUSH
50104: LD_INT 4
50106: NEG
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 2
50114: NEG
50115: PUSH
50116: LD_INT 3
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 2
50126: NEG
50127: PUSH
50128: LD_INT 2
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 3
50138: NEG
50139: PUSH
50140: LD_INT 2
50142: NEG
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 4
50150: NEG
50151: PUSH
50152: LD_INT 3
50154: NEG
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 4
50162: NEG
50163: PUSH
50164: LD_INT 4
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 2
50174: NEG
50175: PUSH
50176: LD_INT 4
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 4
50186: NEG
50187: PUSH
50188: LD_INT 2
50190: NEG
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: LD_INT 4
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 0
50209: PUSH
50210: LD_INT 5
50212: NEG
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 1
50220: PUSH
50221: LD_INT 4
50223: NEG
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 1
50231: PUSH
50232: LD_INT 3
50234: NEG
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 0
50242: PUSH
50243: LD_INT 3
50245: NEG
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 1
50253: NEG
50254: PUSH
50255: LD_INT 4
50257: NEG
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: LD_INT 5
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 2
50277: PUSH
50278: LD_INT 3
50280: NEG
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 2
50288: NEG
50289: PUSH
50290: LD_INT 5
50292: NEG
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50345: LD_ADDR_VAR 0 31
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: LD_INT 4
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 0
50362: PUSH
50363: LD_INT 3
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 1
50372: PUSH
50373: LD_INT 4
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: LD_INT 5
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: LD_INT 5
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: NEG
50403: PUSH
50404: LD_INT 4
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: LD_INT 3
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 2
50424: PUSH
50425: LD_INT 5
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 2
50434: NEG
50435: PUSH
50436: LD_INT 3
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 3
50445: NEG
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 3
50456: NEG
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 2
50468: NEG
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 2
50479: NEG
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 3
50490: NEG
50491: PUSH
50492: LD_INT 1
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 4
50501: NEG
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 4
50512: NEG
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 4
50524: NEG
50525: PUSH
50526: LD_INT 2
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 2
50536: NEG
50537: PUSH
50538: LD_INT 2
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 4
50547: NEG
50548: PUSH
50549: LD_INT 4
50551: NEG
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 4
50559: NEG
50560: PUSH
50561: LD_INT 5
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 3
50571: NEG
50572: PUSH
50573: LD_INT 4
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 3
50583: NEG
50584: PUSH
50585: LD_INT 3
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 4
50595: NEG
50596: PUSH
50597: LD_INT 3
50599: NEG
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 5
50607: NEG
50608: PUSH
50609: LD_INT 4
50611: NEG
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 5
50619: NEG
50620: PUSH
50621: LD_INT 5
50623: NEG
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 3
50631: NEG
50632: PUSH
50633: LD_INT 5
50635: NEG
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 5
50643: NEG
50644: PUSH
50645: LD_INT 3
50647: NEG
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: LD_INT 3
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 0
50666: PUSH
50667: LD_INT 4
50669: NEG
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 1
50677: PUSH
50678: LD_INT 3
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 1
50688: PUSH
50689: LD_INT 2
50691: NEG
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 0
50699: PUSH
50700: LD_INT 2
50702: NEG
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 1
50710: NEG
50711: PUSH
50712: LD_INT 3
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 1
50722: NEG
50723: PUSH
50724: LD_INT 4
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 2
50734: PUSH
50735: LD_INT 2
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 2
50745: NEG
50746: PUSH
50747: LD_INT 4
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 4
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 4
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 5
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 5
50788: PUSH
50789: LD_INT 1
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 4
50798: PUSH
50799: LD_INT 1
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 3
50808: PUSH
50809: LD_INT 0
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 3
50818: PUSH
50819: LD_INT 1
50821: NEG
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 3
50829: PUSH
50830: LD_INT 2
50832: NEG
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 5
50840: PUSH
50841: LD_INT 2
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50895: LD_ADDR_VAR 0 32
50899: PUSH
50900: LD_INT 4
50902: NEG
50903: PUSH
50904: LD_INT 0
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 4
50913: NEG
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 3
50925: NEG
50926: PUSH
50927: LD_INT 0
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 3
50936: NEG
50937: PUSH
50938: LD_INT 1
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 4
50947: NEG
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 5
50958: NEG
50959: PUSH
50960: LD_INT 0
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 5
50969: NEG
50970: PUSH
50971: LD_INT 1
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 5
50981: NEG
50982: PUSH
50983: LD_INT 2
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 3
50993: NEG
50994: PUSH
50995: LD_INT 2
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 3
51004: NEG
51005: PUSH
51006: LD_INT 3
51008: NEG
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 3
51016: NEG
51017: PUSH
51018: LD_INT 4
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 2
51028: NEG
51029: PUSH
51030: LD_INT 3
51032: NEG
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 2
51040: NEG
51041: PUSH
51042: LD_INT 2
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 3
51052: NEG
51053: PUSH
51054: LD_INT 2
51056: NEG
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 4
51064: NEG
51065: PUSH
51066: LD_INT 3
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 4
51076: NEG
51077: PUSH
51078: LD_INT 4
51080: NEG
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 2
51088: NEG
51089: PUSH
51090: LD_INT 4
51092: NEG
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 4
51100: NEG
51101: PUSH
51102: LD_INT 2
51104: NEG
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: LD_INT 4
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 0
51123: PUSH
51124: LD_INT 5
51126: NEG
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: LD_INT 4
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: LD_INT 3
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: LD_INT 3
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 1
51167: NEG
51168: PUSH
51169: LD_INT 4
51171: NEG
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 1
51179: NEG
51180: PUSH
51181: LD_INT 5
51183: NEG
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 2
51191: PUSH
51192: LD_INT 3
51194: NEG
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 2
51202: NEG
51203: PUSH
51204: LD_INT 5
51206: NEG
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 3
51214: PUSH
51215: LD_INT 0
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 3
51224: PUSH
51225: LD_INT 1
51227: NEG
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 4
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 4
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 3
51255: PUSH
51256: LD_INT 1
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 2
51265: PUSH
51266: LD_INT 0
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 2
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 2
51286: PUSH
51287: LD_INT 2
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 4
51297: PUSH
51298: LD_INT 2
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 4
51307: PUSH
51308: LD_INT 4
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 4
51317: PUSH
51318: LD_INT 3
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 5
51327: PUSH
51328: LD_INT 4
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 5
51337: PUSH
51338: LD_INT 5
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 4
51347: PUSH
51348: LD_INT 5
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 3
51357: PUSH
51358: LD_INT 4
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 3
51367: PUSH
51368: LD_INT 3
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 5
51377: PUSH
51378: LD_INT 3
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 3
51387: PUSH
51388: LD_INT 5
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51442: LD_ADDR_VAR 0 33
51446: PUSH
51447: LD_INT 4
51449: NEG
51450: PUSH
51451: LD_INT 4
51453: NEG
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 4
51461: NEG
51462: PUSH
51463: LD_INT 5
51465: NEG
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 3
51473: NEG
51474: PUSH
51475: LD_INT 4
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 3
51485: NEG
51486: PUSH
51487: LD_INT 3
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 4
51497: NEG
51498: PUSH
51499: LD_INT 3
51501: NEG
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 5
51509: NEG
51510: PUSH
51511: LD_INT 4
51513: NEG
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 5
51521: NEG
51522: PUSH
51523: LD_INT 5
51525: NEG
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 3
51533: NEG
51534: PUSH
51535: LD_INT 5
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 5
51545: NEG
51546: PUSH
51547: LD_INT 3
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: LD_INT 3
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 0
51568: PUSH
51569: LD_INT 4
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 1
51579: PUSH
51580: LD_INT 3
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: LD_INT 2
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: LD_INT 2
51604: NEG
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 1
51612: NEG
51613: PUSH
51614: LD_INT 3
51616: NEG
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: NEG
51625: PUSH
51626: LD_INT 4
51628: NEG
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 2
51636: PUSH
51637: LD_INT 2
51639: NEG
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 2
51647: NEG
51648: PUSH
51649: LD_INT 4
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 4
51659: PUSH
51660: LD_INT 0
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 4
51669: PUSH
51670: LD_INT 1
51672: NEG
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 5
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 5
51690: PUSH
51691: LD_INT 1
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 4
51700: PUSH
51701: LD_INT 1
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 3
51710: PUSH
51711: LD_INT 0
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 3
51720: PUSH
51721: LD_INT 1
51723: NEG
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 3
51731: PUSH
51732: LD_INT 2
51734: NEG
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 5
51742: PUSH
51743: LD_INT 2
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 3
51752: PUSH
51753: LD_INT 3
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 3
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 4
51772: PUSH
51773: LD_INT 3
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 4
51782: PUSH
51783: LD_INT 4
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 3
51792: PUSH
51793: LD_INT 4
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 2
51802: PUSH
51803: LD_INT 3
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 2
51812: PUSH
51813: LD_INT 2
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 4
51822: PUSH
51823: LD_INT 2
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 2
51832: PUSH
51833: LD_INT 4
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: LD_INT 4
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 0
51852: PUSH
51853: LD_INT 3
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: PUSH
51863: LD_INT 4
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: LD_INT 5
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: LD_INT 5
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: LD_INT 4
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: NEG
51904: PUSH
51905: LD_INT 3
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 2
51914: PUSH
51915: LD_INT 5
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 2
51924: NEG
51925: PUSH
51926: LD_INT 3
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51980: LD_ADDR_VAR 0 34
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: LD_INT 4
51990: NEG
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 0
51998: PUSH
51999: LD_INT 5
52001: NEG
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: LD_INT 4
52012: NEG
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 1
52020: PUSH
52021: LD_INT 3
52023: NEG
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 0
52031: PUSH
52032: LD_INT 3
52034: NEG
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 1
52042: NEG
52043: PUSH
52044: LD_INT 4
52046: NEG
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: LD_INT 5
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 2
52066: PUSH
52067: LD_INT 3
52069: NEG
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 2
52077: NEG
52078: PUSH
52079: LD_INT 5
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 3
52089: PUSH
52090: LD_INT 0
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 3
52099: PUSH
52100: LD_INT 1
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 4
52110: PUSH
52111: LD_INT 0
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 4
52120: PUSH
52121: LD_INT 1
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 3
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 2
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 2
52150: PUSH
52151: LD_INT 1
52153: NEG
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 2
52161: PUSH
52162: LD_INT 2
52164: NEG
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 4
52172: PUSH
52173: LD_INT 2
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 4
52182: PUSH
52183: LD_INT 4
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 4
52192: PUSH
52193: LD_INT 3
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 5
52202: PUSH
52203: LD_INT 4
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 5
52212: PUSH
52213: LD_INT 5
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 4
52222: PUSH
52223: LD_INT 5
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 3
52232: PUSH
52233: LD_INT 4
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 3
52242: PUSH
52243: LD_INT 3
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 5
52252: PUSH
52253: LD_INT 3
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 3
52262: PUSH
52263: LD_INT 5
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: LD_INT 3
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 0
52282: PUSH
52283: LD_INT 2
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: LD_INT 3
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: PUSH
52303: LD_INT 4
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: LD_INT 4
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 1
52322: NEG
52323: PUSH
52324: LD_INT 3
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: LD_INT 2
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 2
52344: PUSH
52345: LD_INT 4
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 2
52354: NEG
52355: PUSH
52356: LD_INT 2
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 4
52365: NEG
52366: PUSH
52367: LD_INT 0
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 4
52376: NEG
52377: PUSH
52378: LD_INT 1
52380: NEG
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 3
52388: NEG
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 3
52399: NEG
52400: PUSH
52401: LD_INT 1
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 4
52410: NEG
52411: PUSH
52412: LD_INT 1
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 5
52421: NEG
52422: PUSH
52423: LD_INT 0
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 5
52432: NEG
52433: PUSH
52434: LD_INT 1
52436: NEG
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 5
52444: NEG
52445: PUSH
52446: LD_INT 2
52448: NEG
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 3
52456: NEG
52457: PUSH
52458: LD_INT 2
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: ST_TO_ADDR
// end ; end ;
52512: GO 52515
52514: POP
// case btype of b_depot , b_warehouse :
52515: LD_VAR 0 1
52519: PUSH
52520: LD_INT 0
52522: DOUBLE
52523: EQUAL
52524: IFTRUE 52534
52526: LD_INT 1
52528: DOUBLE
52529: EQUAL
52530: IFTRUE 52534
52532: GO 52735
52534: POP
// case nation of nation_american :
52535: LD_VAR 0 5
52539: PUSH
52540: LD_INT 1
52542: DOUBLE
52543: EQUAL
52544: IFTRUE 52548
52546: GO 52604
52548: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
52549: LD_ADDR_VAR 0 9
52553: PUSH
52554: LD_VAR 0 11
52558: PUSH
52559: LD_VAR 0 12
52563: PUSH
52564: LD_VAR 0 13
52568: PUSH
52569: LD_VAR 0 14
52573: PUSH
52574: LD_VAR 0 15
52578: PUSH
52579: LD_VAR 0 16
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: PUSH
52592: LD_VAR 0 4
52596: PUSH
52597: LD_INT 1
52599: PLUS
52600: ARRAY
52601: ST_TO_ADDR
52602: GO 52733
52604: LD_INT 2
52606: DOUBLE
52607: EQUAL
52608: IFTRUE 52612
52610: GO 52668
52612: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
52613: LD_ADDR_VAR 0 9
52617: PUSH
52618: LD_VAR 0 17
52622: PUSH
52623: LD_VAR 0 18
52627: PUSH
52628: LD_VAR 0 19
52632: PUSH
52633: LD_VAR 0 20
52637: PUSH
52638: LD_VAR 0 21
52642: PUSH
52643: LD_VAR 0 22
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: PUSH
52656: LD_VAR 0 4
52660: PUSH
52661: LD_INT 1
52663: PLUS
52664: ARRAY
52665: ST_TO_ADDR
52666: GO 52733
52668: LD_INT 3
52670: DOUBLE
52671: EQUAL
52672: IFTRUE 52676
52674: GO 52732
52676: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52677: LD_ADDR_VAR 0 9
52681: PUSH
52682: LD_VAR 0 23
52686: PUSH
52687: LD_VAR 0 24
52691: PUSH
52692: LD_VAR 0 25
52696: PUSH
52697: LD_VAR 0 26
52701: PUSH
52702: LD_VAR 0 27
52706: PUSH
52707: LD_VAR 0 28
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: PUSH
52720: LD_VAR 0 4
52724: PUSH
52725: LD_INT 1
52727: PLUS
52728: ARRAY
52729: ST_TO_ADDR
52730: GO 52733
52732: POP
52733: GO 53288
52735: LD_INT 2
52737: DOUBLE
52738: EQUAL
52739: IFTRUE 52749
52741: LD_INT 3
52743: DOUBLE
52744: EQUAL
52745: IFTRUE 52749
52747: GO 52805
52749: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52750: LD_ADDR_VAR 0 9
52754: PUSH
52755: LD_VAR 0 29
52759: PUSH
52760: LD_VAR 0 30
52764: PUSH
52765: LD_VAR 0 31
52769: PUSH
52770: LD_VAR 0 32
52774: PUSH
52775: LD_VAR 0 33
52779: PUSH
52780: LD_VAR 0 34
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: PUSH
52793: LD_VAR 0 4
52797: PUSH
52798: LD_INT 1
52800: PLUS
52801: ARRAY
52802: ST_TO_ADDR
52803: GO 53288
52805: LD_INT 16
52807: DOUBLE
52808: EQUAL
52809: IFTRUE 52867
52811: LD_INT 17
52813: DOUBLE
52814: EQUAL
52815: IFTRUE 52867
52817: LD_INT 18
52819: DOUBLE
52820: EQUAL
52821: IFTRUE 52867
52823: LD_INT 19
52825: DOUBLE
52826: EQUAL
52827: IFTRUE 52867
52829: LD_INT 22
52831: DOUBLE
52832: EQUAL
52833: IFTRUE 52867
52835: LD_INT 20
52837: DOUBLE
52838: EQUAL
52839: IFTRUE 52867
52841: LD_INT 21
52843: DOUBLE
52844: EQUAL
52845: IFTRUE 52867
52847: LD_INT 23
52849: DOUBLE
52850: EQUAL
52851: IFTRUE 52867
52853: LD_INT 24
52855: DOUBLE
52856: EQUAL
52857: IFTRUE 52867
52859: LD_INT 25
52861: DOUBLE
52862: EQUAL
52863: IFTRUE 52867
52865: GO 52923
52867: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52868: LD_ADDR_VAR 0 9
52872: PUSH
52873: LD_VAR 0 35
52877: PUSH
52878: LD_VAR 0 36
52882: PUSH
52883: LD_VAR 0 37
52887: PUSH
52888: LD_VAR 0 38
52892: PUSH
52893: LD_VAR 0 39
52897: PUSH
52898: LD_VAR 0 40
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: PUSH
52911: LD_VAR 0 4
52915: PUSH
52916: LD_INT 1
52918: PLUS
52919: ARRAY
52920: ST_TO_ADDR
52921: GO 53288
52923: LD_INT 6
52925: DOUBLE
52926: EQUAL
52927: IFTRUE 52979
52929: LD_INT 7
52931: DOUBLE
52932: EQUAL
52933: IFTRUE 52979
52935: LD_INT 8
52937: DOUBLE
52938: EQUAL
52939: IFTRUE 52979
52941: LD_INT 13
52943: DOUBLE
52944: EQUAL
52945: IFTRUE 52979
52947: LD_INT 12
52949: DOUBLE
52950: EQUAL
52951: IFTRUE 52979
52953: LD_INT 15
52955: DOUBLE
52956: EQUAL
52957: IFTRUE 52979
52959: LD_INT 11
52961: DOUBLE
52962: EQUAL
52963: IFTRUE 52979
52965: LD_INT 14
52967: DOUBLE
52968: EQUAL
52969: IFTRUE 52979
52971: LD_INT 10
52973: DOUBLE
52974: EQUAL
52975: IFTRUE 52979
52977: GO 53035
52979: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
52980: LD_ADDR_VAR 0 9
52984: PUSH
52985: LD_VAR 0 41
52989: PUSH
52990: LD_VAR 0 42
52994: PUSH
52995: LD_VAR 0 43
52999: PUSH
53000: LD_VAR 0 44
53004: PUSH
53005: LD_VAR 0 45
53009: PUSH
53010: LD_VAR 0 46
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: PUSH
53023: LD_VAR 0 4
53027: PUSH
53028: LD_INT 1
53030: PLUS
53031: ARRAY
53032: ST_TO_ADDR
53033: GO 53288
53035: LD_INT 36
53037: DOUBLE
53038: EQUAL
53039: IFTRUE 53043
53041: GO 53099
53043: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53044: LD_ADDR_VAR 0 9
53048: PUSH
53049: LD_VAR 0 47
53053: PUSH
53054: LD_VAR 0 48
53058: PUSH
53059: LD_VAR 0 49
53063: PUSH
53064: LD_VAR 0 50
53068: PUSH
53069: LD_VAR 0 51
53073: PUSH
53074: LD_VAR 0 52
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: PUSH
53087: LD_VAR 0 4
53091: PUSH
53092: LD_INT 1
53094: PLUS
53095: ARRAY
53096: ST_TO_ADDR
53097: GO 53288
53099: LD_INT 4
53101: DOUBLE
53102: EQUAL
53103: IFTRUE 53125
53105: LD_INT 5
53107: DOUBLE
53108: EQUAL
53109: IFTRUE 53125
53111: LD_INT 34
53113: DOUBLE
53114: EQUAL
53115: IFTRUE 53125
53117: LD_INT 37
53119: DOUBLE
53120: EQUAL
53121: IFTRUE 53125
53123: GO 53181
53125: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53126: LD_ADDR_VAR 0 9
53130: PUSH
53131: LD_VAR 0 53
53135: PUSH
53136: LD_VAR 0 54
53140: PUSH
53141: LD_VAR 0 55
53145: PUSH
53146: LD_VAR 0 56
53150: PUSH
53151: LD_VAR 0 57
53155: PUSH
53156: LD_VAR 0 58
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: PUSH
53169: LD_VAR 0 4
53173: PUSH
53174: LD_INT 1
53176: PLUS
53177: ARRAY
53178: ST_TO_ADDR
53179: GO 53288
53181: LD_INT 31
53183: DOUBLE
53184: EQUAL
53185: IFTRUE 53231
53187: LD_INT 32
53189: DOUBLE
53190: EQUAL
53191: IFTRUE 53231
53193: LD_INT 33
53195: DOUBLE
53196: EQUAL
53197: IFTRUE 53231
53199: LD_INT 27
53201: DOUBLE
53202: EQUAL
53203: IFTRUE 53231
53205: LD_INT 26
53207: DOUBLE
53208: EQUAL
53209: IFTRUE 53231
53211: LD_INT 28
53213: DOUBLE
53214: EQUAL
53215: IFTRUE 53231
53217: LD_INT 29
53219: DOUBLE
53220: EQUAL
53221: IFTRUE 53231
53223: LD_INT 30
53225: DOUBLE
53226: EQUAL
53227: IFTRUE 53231
53229: GO 53287
53231: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
53232: LD_ADDR_VAR 0 9
53236: PUSH
53237: LD_VAR 0 59
53241: PUSH
53242: LD_VAR 0 60
53246: PUSH
53247: LD_VAR 0 61
53251: PUSH
53252: LD_VAR 0 62
53256: PUSH
53257: LD_VAR 0 63
53261: PUSH
53262: LD_VAR 0 64
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: PUSH
53275: LD_VAR 0 4
53279: PUSH
53280: LD_INT 1
53282: PLUS
53283: ARRAY
53284: ST_TO_ADDR
53285: GO 53288
53287: POP
// temp_list2 = [ ] ;
53288: LD_ADDR_VAR 0 10
53292: PUSH
53293: EMPTY
53294: ST_TO_ADDR
// for i in temp_list do
53295: LD_ADDR_VAR 0 8
53299: PUSH
53300: LD_VAR 0 9
53304: PUSH
53305: FOR_IN
53306: IFFALSE 53358
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53308: LD_ADDR_VAR 0 10
53312: PUSH
53313: LD_VAR 0 10
53317: PUSH
53318: LD_VAR 0 8
53322: PUSH
53323: LD_INT 1
53325: ARRAY
53326: PUSH
53327: LD_VAR 0 2
53331: PLUS
53332: PUSH
53333: LD_VAR 0 8
53337: PUSH
53338: LD_INT 2
53340: ARRAY
53341: PUSH
53342: LD_VAR 0 3
53346: PLUS
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: EMPTY
53353: LIST
53354: ADD
53355: ST_TO_ADDR
53356: GO 53305
53358: POP
53359: POP
// result = temp_list2 ;
53360: LD_ADDR_VAR 0 7
53364: PUSH
53365: LD_VAR 0 10
53369: ST_TO_ADDR
// end ;
53370: LD_VAR 0 7
53374: RET
// export function EnemyInRange ( unit , dist ) ; begin
53375: LD_INT 0
53377: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53378: LD_ADDR_VAR 0 3
53382: PUSH
53383: LD_VAR 0 1
53387: PPUSH
53388: CALL_OW 255
53392: PPUSH
53393: LD_VAR 0 1
53397: PPUSH
53398: CALL_OW 250
53402: PPUSH
53403: LD_VAR 0 1
53407: PPUSH
53408: CALL_OW 251
53412: PPUSH
53413: LD_VAR 0 2
53417: PPUSH
53418: CALL 27479 0 4
53422: PUSH
53423: LD_INT 4
53425: ARRAY
53426: ST_TO_ADDR
// end ;
53427: LD_VAR 0 3
53431: RET
// export function PlayerSeeMe ( unit ) ; begin
53432: LD_INT 0
53434: PPUSH
// result := See ( your_side , unit ) ;
53435: LD_ADDR_VAR 0 2
53439: PUSH
53440: LD_OWVAR 2
53444: PPUSH
53445: LD_VAR 0 1
53449: PPUSH
53450: CALL_OW 292
53454: ST_TO_ADDR
// end ;
53455: LD_VAR 0 2
53459: RET
// export function ReverseDir ( unit ) ; begin
53460: LD_INT 0
53462: PPUSH
// if not unit then
53463: LD_VAR 0 1
53467: NOT
53468: IFFALSE 53472
// exit ;
53470: GO 53518
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
53472: LD_ADDR_VAR 0 2
53476: PUSH
53477: LD_INT 3
53479: PUSH
53480: LD_INT 4
53482: PUSH
53483: LD_INT 5
53485: PUSH
53486: LD_INT 0
53488: PUSH
53489: LD_INT 1
53491: PUSH
53492: LD_INT 2
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: PUSH
53503: LD_VAR 0 1
53507: PPUSH
53508: CALL_OW 254
53512: PUSH
53513: LD_INT 1
53515: PLUS
53516: ARRAY
53517: ST_TO_ADDR
// end ;
53518: LD_VAR 0 2
53522: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53523: LD_INT 0
53525: PPUSH
53526: PPUSH
53527: PPUSH
53528: PPUSH
53529: PPUSH
// if not hexes then
53530: LD_VAR 0 2
53534: NOT
53535: IFFALSE 53539
// exit ;
53537: GO 53687
// dist := 9999 ;
53539: LD_ADDR_VAR 0 5
53543: PUSH
53544: LD_INT 9999
53546: ST_TO_ADDR
// for i = 1 to hexes do
53547: LD_ADDR_VAR 0 4
53551: PUSH
53552: DOUBLE
53553: LD_INT 1
53555: DEC
53556: ST_TO_ADDR
53557: LD_VAR 0 2
53561: PUSH
53562: FOR_TO
53563: IFFALSE 53675
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53565: LD_VAR 0 1
53569: PPUSH
53570: LD_VAR 0 2
53574: PUSH
53575: LD_VAR 0 4
53579: ARRAY
53580: PUSH
53581: LD_INT 1
53583: ARRAY
53584: PPUSH
53585: LD_VAR 0 2
53589: PUSH
53590: LD_VAR 0 4
53594: ARRAY
53595: PUSH
53596: LD_INT 2
53598: ARRAY
53599: PPUSH
53600: CALL_OW 297
53604: PUSH
53605: LD_VAR 0 5
53609: LESS
53610: IFFALSE 53673
// begin hex := hexes [ i ] ;
53612: LD_ADDR_VAR 0 7
53616: PUSH
53617: LD_VAR 0 2
53621: PUSH
53622: LD_VAR 0 4
53626: ARRAY
53627: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53628: LD_ADDR_VAR 0 5
53632: PUSH
53633: LD_VAR 0 1
53637: PPUSH
53638: LD_VAR 0 2
53642: PUSH
53643: LD_VAR 0 4
53647: ARRAY
53648: PUSH
53649: LD_INT 1
53651: ARRAY
53652: PPUSH
53653: LD_VAR 0 2
53657: PUSH
53658: LD_VAR 0 4
53662: ARRAY
53663: PUSH
53664: LD_INT 2
53666: ARRAY
53667: PPUSH
53668: CALL_OW 297
53672: ST_TO_ADDR
// end ; end ;
53673: GO 53562
53675: POP
53676: POP
// result := hex ;
53677: LD_ADDR_VAR 0 3
53681: PUSH
53682: LD_VAR 0 7
53686: ST_TO_ADDR
// end ;
53687: LD_VAR 0 3
53691: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53692: LD_INT 0
53694: PPUSH
53695: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53696: LD_VAR 0 1
53700: NOT
53701: PUSH
53702: LD_VAR 0 1
53706: PUSH
53707: LD_INT 21
53709: PUSH
53710: LD_INT 2
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 23
53719: PUSH
53720: LD_INT 2
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PPUSH
53731: CALL_OW 69
53735: IN
53736: NOT
53737: OR
53738: IFFALSE 53742
// exit ;
53740: GO 53789
// for i = 1 to 3 do
53742: LD_ADDR_VAR 0 3
53746: PUSH
53747: DOUBLE
53748: LD_INT 1
53750: DEC
53751: ST_TO_ADDR
53752: LD_INT 3
53754: PUSH
53755: FOR_TO
53756: IFFALSE 53787
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53758: LD_VAR 0 1
53762: PPUSH
53763: CALL_OW 250
53767: PPUSH
53768: LD_VAR 0 1
53772: PPUSH
53773: CALL_OW 251
53777: PPUSH
53778: LD_INT 1
53780: PPUSH
53781: CALL_OW 453
53785: GO 53755
53787: POP
53788: POP
// end ;
53789: LD_VAR 0 2
53793: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53794: LD_INT 0
53796: PPUSH
53797: PPUSH
53798: PPUSH
53799: PPUSH
53800: PPUSH
53801: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53802: LD_VAR 0 1
53806: NOT
53807: PUSH
53808: LD_VAR 0 2
53812: NOT
53813: OR
53814: PUSH
53815: LD_VAR 0 1
53819: PPUSH
53820: CALL_OW 314
53824: OR
53825: IFFALSE 53829
// exit ;
53827: GO 54270
// x := GetX ( enemy_unit ) ;
53829: LD_ADDR_VAR 0 7
53833: PUSH
53834: LD_VAR 0 2
53838: PPUSH
53839: CALL_OW 250
53843: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53844: LD_ADDR_VAR 0 8
53848: PUSH
53849: LD_VAR 0 2
53853: PPUSH
53854: CALL_OW 251
53858: ST_TO_ADDR
// if not x or not y then
53859: LD_VAR 0 7
53863: NOT
53864: PUSH
53865: LD_VAR 0 8
53869: NOT
53870: OR
53871: IFFALSE 53875
// exit ;
53873: GO 54270
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53875: LD_ADDR_VAR 0 6
53879: PUSH
53880: LD_VAR 0 7
53884: PPUSH
53885: LD_INT 0
53887: PPUSH
53888: LD_INT 4
53890: PPUSH
53891: CALL_OW 272
53895: PUSH
53896: LD_VAR 0 8
53900: PPUSH
53901: LD_INT 0
53903: PPUSH
53904: LD_INT 4
53906: PPUSH
53907: CALL_OW 273
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_VAR 0 7
53920: PPUSH
53921: LD_INT 1
53923: PPUSH
53924: LD_INT 4
53926: PPUSH
53927: CALL_OW 272
53931: PUSH
53932: LD_VAR 0 8
53936: PPUSH
53937: LD_INT 1
53939: PPUSH
53940: LD_INT 4
53942: PPUSH
53943: CALL_OW 273
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_VAR 0 7
53956: PPUSH
53957: LD_INT 2
53959: PPUSH
53960: LD_INT 4
53962: PPUSH
53963: CALL_OW 272
53967: PUSH
53968: LD_VAR 0 8
53972: PPUSH
53973: LD_INT 2
53975: PPUSH
53976: LD_INT 4
53978: PPUSH
53979: CALL_OW 273
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_VAR 0 7
53992: PPUSH
53993: LD_INT 3
53995: PPUSH
53996: LD_INT 4
53998: PPUSH
53999: CALL_OW 272
54003: PUSH
54004: LD_VAR 0 8
54008: PPUSH
54009: LD_INT 3
54011: PPUSH
54012: LD_INT 4
54014: PPUSH
54015: CALL_OW 273
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_VAR 0 7
54028: PPUSH
54029: LD_INT 4
54031: PPUSH
54032: LD_INT 4
54034: PPUSH
54035: CALL_OW 272
54039: PUSH
54040: LD_VAR 0 8
54044: PPUSH
54045: LD_INT 4
54047: PPUSH
54048: LD_INT 4
54050: PPUSH
54051: CALL_OW 273
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_VAR 0 7
54064: PPUSH
54065: LD_INT 5
54067: PPUSH
54068: LD_INT 4
54070: PPUSH
54071: CALL_OW 272
54075: PUSH
54076: LD_VAR 0 8
54080: PPUSH
54081: LD_INT 5
54083: PPUSH
54084: LD_INT 4
54086: PPUSH
54087: CALL_OW 273
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: ST_TO_ADDR
// for i = tmp downto 1 do
54104: LD_ADDR_VAR 0 4
54108: PUSH
54109: DOUBLE
54110: LD_VAR 0 6
54114: INC
54115: ST_TO_ADDR
54116: LD_INT 1
54118: PUSH
54119: FOR_DOWNTO
54120: IFFALSE 54221
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54122: LD_VAR 0 6
54126: PUSH
54127: LD_VAR 0 4
54131: ARRAY
54132: PUSH
54133: LD_INT 1
54135: ARRAY
54136: PPUSH
54137: LD_VAR 0 6
54141: PUSH
54142: LD_VAR 0 4
54146: ARRAY
54147: PUSH
54148: LD_INT 2
54150: ARRAY
54151: PPUSH
54152: CALL_OW 488
54156: NOT
54157: PUSH
54158: LD_VAR 0 6
54162: PUSH
54163: LD_VAR 0 4
54167: ARRAY
54168: PUSH
54169: LD_INT 1
54171: ARRAY
54172: PPUSH
54173: LD_VAR 0 6
54177: PUSH
54178: LD_VAR 0 4
54182: ARRAY
54183: PUSH
54184: LD_INT 2
54186: ARRAY
54187: PPUSH
54188: CALL_OW 428
54192: PUSH
54193: LD_INT 0
54195: NONEQUAL
54196: OR
54197: IFFALSE 54219
// tmp := Delete ( tmp , i ) ;
54199: LD_ADDR_VAR 0 6
54203: PUSH
54204: LD_VAR 0 6
54208: PPUSH
54209: LD_VAR 0 4
54213: PPUSH
54214: CALL_OW 3
54218: ST_TO_ADDR
54219: GO 54119
54221: POP
54222: POP
// j := GetClosestHex ( unit , tmp ) ;
54223: LD_ADDR_VAR 0 5
54227: PUSH
54228: LD_VAR 0 1
54232: PPUSH
54233: LD_VAR 0 6
54237: PPUSH
54238: CALL 53523 0 2
54242: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54243: LD_VAR 0 1
54247: PPUSH
54248: LD_VAR 0 5
54252: PUSH
54253: LD_INT 1
54255: ARRAY
54256: PPUSH
54257: LD_VAR 0 5
54261: PUSH
54262: LD_INT 2
54264: ARRAY
54265: PPUSH
54266: CALL_OW 111
// end ;
54270: LD_VAR 0 3
54274: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54275: LD_INT 0
54277: PPUSH
54278: PPUSH
54279: PPUSH
// uc_side = 0 ;
54280: LD_ADDR_OWVAR 20
54284: PUSH
54285: LD_INT 0
54287: ST_TO_ADDR
// uc_nation = 0 ;
54288: LD_ADDR_OWVAR 21
54292: PUSH
54293: LD_INT 0
54295: ST_TO_ADDR
// InitHc ;
54296: CALL_OW 19
// InitVc ;
54300: CALL_OW 20
// if mastodonts then
54304: LD_VAR 0 6
54308: IFFALSE 54375
// for i = 1 to mastodonts do
54310: LD_ADDR_VAR 0 11
54314: PUSH
54315: DOUBLE
54316: LD_INT 1
54318: DEC
54319: ST_TO_ADDR
54320: LD_VAR 0 6
54324: PUSH
54325: FOR_TO
54326: IFFALSE 54373
// begin vc_chassis := 31 ;
54328: LD_ADDR_OWVAR 37
54332: PUSH
54333: LD_INT 31
54335: ST_TO_ADDR
// vc_control := control_rider ;
54336: LD_ADDR_OWVAR 38
54340: PUSH
54341: LD_INT 4
54343: ST_TO_ADDR
// animal := CreateVehicle ;
54344: LD_ADDR_VAR 0 12
54348: PUSH
54349: CALL_OW 45
54353: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54354: LD_VAR 0 12
54358: PPUSH
54359: LD_VAR 0 8
54363: PPUSH
54364: LD_INT 0
54366: PPUSH
54367: CALL 61146 0 3
// end ;
54371: GO 54325
54373: POP
54374: POP
// if horses then
54375: LD_VAR 0 5
54379: IFFALSE 54446
// for i = 1 to horses do
54381: LD_ADDR_VAR 0 11
54385: PUSH
54386: DOUBLE
54387: LD_INT 1
54389: DEC
54390: ST_TO_ADDR
54391: LD_VAR 0 5
54395: PUSH
54396: FOR_TO
54397: IFFALSE 54444
// begin hc_class := 21 ;
54399: LD_ADDR_OWVAR 28
54403: PUSH
54404: LD_INT 21
54406: ST_TO_ADDR
// hc_gallery :=  ;
54407: LD_ADDR_OWVAR 33
54411: PUSH
54412: LD_STRING 
54414: ST_TO_ADDR
// animal := CreateHuman ;
54415: LD_ADDR_VAR 0 12
54419: PUSH
54420: CALL_OW 44
54424: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54425: LD_VAR 0 12
54429: PPUSH
54430: LD_VAR 0 8
54434: PPUSH
54435: LD_INT 0
54437: PPUSH
54438: CALL 61146 0 3
// end ;
54442: GO 54396
54444: POP
54445: POP
// if birds then
54446: LD_VAR 0 1
54450: IFFALSE 54517
// for i = 1 to birds do
54452: LD_ADDR_VAR 0 11
54456: PUSH
54457: DOUBLE
54458: LD_INT 1
54460: DEC
54461: ST_TO_ADDR
54462: LD_VAR 0 1
54466: PUSH
54467: FOR_TO
54468: IFFALSE 54515
// begin hc_class = 18 ;
54470: LD_ADDR_OWVAR 28
54474: PUSH
54475: LD_INT 18
54477: ST_TO_ADDR
// hc_gallery =  ;
54478: LD_ADDR_OWVAR 33
54482: PUSH
54483: LD_STRING 
54485: ST_TO_ADDR
// animal := CreateHuman ;
54486: LD_ADDR_VAR 0 12
54490: PUSH
54491: CALL_OW 44
54495: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54496: LD_VAR 0 12
54500: PPUSH
54501: LD_VAR 0 8
54505: PPUSH
54506: LD_INT 0
54508: PPUSH
54509: CALL 61146 0 3
// end ;
54513: GO 54467
54515: POP
54516: POP
// if tigers then
54517: LD_VAR 0 2
54521: IFFALSE 54605
// for i = 1 to tigers do
54523: LD_ADDR_VAR 0 11
54527: PUSH
54528: DOUBLE
54529: LD_INT 1
54531: DEC
54532: ST_TO_ADDR
54533: LD_VAR 0 2
54537: PUSH
54538: FOR_TO
54539: IFFALSE 54603
// begin hc_class = class_tiger ;
54541: LD_ADDR_OWVAR 28
54545: PUSH
54546: LD_INT 14
54548: ST_TO_ADDR
// hc_gallery =  ;
54549: LD_ADDR_OWVAR 33
54553: PUSH
54554: LD_STRING 
54556: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54557: LD_ADDR_OWVAR 35
54561: PUSH
54562: LD_INT 7
54564: NEG
54565: PPUSH
54566: LD_INT 7
54568: PPUSH
54569: CALL_OW 12
54573: ST_TO_ADDR
// animal := CreateHuman ;
54574: LD_ADDR_VAR 0 12
54578: PUSH
54579: CALL_OW 44
54583: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54584: LD_VAR 0 12
54588: PPUSH
54589: LD_VAR 0 8
54593: PPUSH
54594: LD_INT 0
54596: PPUSH
54597: CALL 61146 0 3
// end ;
54601: GO 54538
54603: POP
54604: POP
// if apemans then
54605: LD_VAR 0 3
54609: IFFALSE 54732
// for i = 1 to apemans do
54611: LD_ADDR_VAR 0 11
54615: PUSH
54616: DOUBLE
54617: LD_INT 1
54619: DEC
54620: ST_TO_ADDR
54621: LD_VAR 0 3
54625: PUSH
54626: FOR_TO
54627: IFFALSE 54730
// begin hc_class = class_apeman ;
54629: LD_ADDR_OWVAR 28
54633: PUSH
54634: LD_INT 12
54636: ST_TO_ADDR
// hc_gallery =  ;
54637: LD_ADDR_OWVAR 33
54641: PUSH
54642: LD_STRING 
54644: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54645: LD_ADDR_OWVAR 35
54649: PUSH
54650: LD_INT 5
54652: NEG
54653: PPUSH
54654: LD_INT 5
54656: PPUSH
54657: CALL_OW 12
54661: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54662: LD_ADDR_OWVAR 31
54666: PUSH
54667: LD_INT 1
54669: PPUSH
54670: LD_INT 3
54672: PPUSH
54673: CALL_OW 12
54677: PUSH
54678: LD_INT 1
54680: PPUSH
54681: LD_INT 3
54683: PPUSH
54684: CALL_OW 12
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: ST_TO_ADDR
// animal := CreateHuman ;
54701: LD_ADDR_VAR 0 12
54705: PUSH
54706: CALL_OW 44
54710: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54711: LD_VAR 0 12
54715: PPUSH
54716: LD_VAR 0 8
54720: PPUSH
54721: LD_INT 0
54723: PPUSH
54724: CALL 61146 0 3
// end ;
54728: GO 54626
54730: POP
54731: POP
// if enchidnas then
54732: LD_VAR 0 4
54736: IFFALSE 54803
// for i = 1 to enchidnas do
54738: LD_ADDR_VAR 0 11
54742: PUSH
54743: DOUBLE
54744: LD_INT 1
54746: DEC
54747: ST_TO_ADDR
54748: LD_VAR 0 4
54752: PUSH
54753: FOR_TO
54754: IFFALSE 54801
// begin hc_class = 13 ;
54756: LD_ADDR_OWVAR 28
54760: PUSH
54761: LD_INT 13
54763: ST_TO_ADDR
// hc_gallery =  ;
54764: LD_ADDR_OWVAR 33
54768: PUSH
54769: LD_STRING 
54771: ST_TO_ADDR
// animal := CreateHuman ;
54772: LD_ADDR_VAR 0 12
54776: PUSH
54777: CALL_OW 44
54781: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54782: LD_VAR 0 12
54786: PPUSH
54787: LD_VAR 0 8
54791: PPUSH
54792: LD_INT 0
54794: PPUSH
54795: CALL 61146 0 3
// end ;
54799: GO 54753
54801: POP
54802: POP
// if fishes then
54803: LD_VAR 0 7
54807: IFFALSE 54874
// for i = 1 to fishes do
54809: LD_ADDR_VAR 0 11
54813: PUSH
54814: DOUBLE
54815: LD_INT 1
54817: DEC
54818: ST_TO_ADDR
54819: LD_VAR 0 7
54823: PUSH
54824: FOR_TO
54825: IFFALSE 54872
// begin hc_class = 20 ;
54827: LD_ADDR_OWVAR 28
54831: PUSH
54832: LD_INT 20
54834: ST_TO_ADDR
// hc_gallery =  ;
54835: LD_ADDR_OWVAR 33
54839: PUSH
54840: LD_STRING 
54842: ST_TO_ADDR
// animal := CreateHuman ;
54843: LD_ADDR_VAR 0 12
54847: PUSH
54848: CALL_OW 44
54852: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54853: LD_VAR 0 12
54857: PPUSH
54858: LD_VAR 0 9
54862: PPUSH
54863: LD_INT 0
54865: PPUSH
54866: CALL 61146 0 3
// end ;
54870: GO 54824
54872: POP
54873: POP
// end ;
54874: LD_VAR 0 10
54878: RET
// export function WantHeal ( sci , unit ) ; begin
54879: LD_INT 0
54881: PPUSH
// if GetTaskList ( sci ) > 0 then
54882: LD_VAR 0 1
54886: PPUSH
54887: CALL_OW 437
54891: PUSH
54892: LD_INT 0
54894: GREATER
54895: IFFALSE 54965
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54897: LD_VAR 0 1
54901: PPUSH
54902: CALL_OW 437
54906: PUSH
54907: LD_INT 1
54909: ARRAY
54910: PUSH
54911: LD_INT 1
54913: ARRAY
54914: PUSH
54915: LD_STRING l
54917: EQUAL
54918: PUSH
54919: LD_VAR 0 1
54923: PPUSH
54924: CALL_OW 437
54928: PUSH
54929: LD_INT 1
54931: ARRAY
54932: PUSH
54933: LD_INT 4
54935: ARRAY
54936: PUSH
54937: LD_VAR 0 2
54941: EQUAL
54942: AND
54943: IFFALSE 54955
// result := true else
54945: LD_ADDR_VAR 0 3
54949: PUSH
54950: LD_INT 1
54952: ST_TO_ADDR
54953: GO 54963
// result := false ;
54955: LD_ADDR_VAR 0 3
54959: PUSH
54960: LD_INT 0
54962: ST_TO_ADDR
// end else
54963: GO 54973
// result := false ;
54965: LD_ADDR_VAR 0 3
54969: PUSH
54970: LD_INT 0
54972: ST_TO_ADDR
// end ;
54973: LD_VAR 0 3
54977: RET
// export function HealTarget ( sci ) ; begin
54978: LD_INT 0
54980: PPUSH
// if not sci then
54981: LD_VAR 0 1
54985: NOT
54986: IFFALSE 54990
// exit ;
54988: GO 55055
// result := 0 ;
54990: LD_ADDR_VAR 0 2
54994: PUSH
54995: LD_INT 0
54997: ST_TO_ADDR
// if GetTaskList ( sci ) then
54998: LD_VAR 0 1
55002: PPUSH
55003: CALL_OW 437
55007: IFFALSE 55055
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55009: LD_VAR 0 1
55013: PPUSH
55014: CALL_OW 437
55018: PUSH
55019: LD_INT 1
55021: ARRAY
55022: PUSH
55023: LD_INT 1
55025: ARRAY
55026: PUSH
55027: LD_STRING l
55029: EQUAL
55030: IFFALSE 55055
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55032: LD_ADDR_VAR 0 2
55036: PUSH
55037: LD_VAR 0 1
55041: PPUSH
55042: CALL_OW 437
55046: PUSH
55047: LD_INT 1
55049: ARRAY
55050: PUSH
55051: LD_INT 4
55053: ARRAY
55054: ST_TO_ADDR
// end ;
55055: LD_VAR 0 2
55059: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
55060: LD_INT 0
55062: PPUSH
55063: PPUSH
55064: PPUSH
55065: PPUSH
55066: PPUSH
55067: PPUSH
55068: PPUSH
55069: PPUSH
55070: PPUSH
55071: PPUSH
55072: PPUSH
55073: PPUSH
55074: PPUSH
55075: PPUSH
55076: PPUSH
55077: PPUSH
55078: PPUSH
55079: PPUSH
55080: PPUSH
55081: PPUSH
55082: PPUSH
55083: PPUSH
55084: PPUSH
55085: PPUSH
55086: PPUSH
55087: PPUSH
55088: PPUSH
55089: PPUSH
55090: PPUSH
55091: PPUSH
55092: PPUSH
55093: PPUSH
55094: PPUSH
55095: PPUSH
// if not list then
55096: LD_VAR 0 1
55100: NOT
55101: IFFALSE 55105
// exit ;
55103: GO 59757
// base := list [ 1 ] ;
55105: LD_ADDR_VAR 0 3
55109: PUSH
55110: LD_VAR 0 1
55114: PUSH
55115: LD_INT 1
55117: ARRAY
55118: ST_TO_ADDR
// group := list [ 2 ] ;
55119: LD_ADDR_VAR 0 4
55123: PUSH
55124: LD_VAR 0 1
55128: PUSH
55129: LD_INT 2
55131: ARRAY
55132: ST_TO_ADDR
// path := list [ 3 ] ;
55133: LD_ADDR_VAR 0 5
55137: PUSH
55138: LD_VAR 0 1
55142: PUSH
55143: LD_INT 3
55145: ARRAY
55146: ST_TO_ADDR
// flags := list [ 4 ] ;
55147: LD_ADDR_VAR 0 6
55151: PUSH
55152: LD_VAR 0 1
55156: PUSH
55157: LD_INT 4
55159: ARRAY
55160: ST_TO_ADDR
// mined := [ ] ;
55161: LD_ADDR_VAR 0 27
55165: PUSH
55166: EMPTY
55167: ST_TO_ADDR
// bombed := [ ] ;
55168: LD_ADDR_VAR 0 28
55172: PUSH
55173: EMPTY
55174: ST_TO_ADDR
// healers := [ ] ;
55175: LD_ADDR_VAR 0 31
55179: PUSH
55180: EMPTY
55181: ST_TO_ADDR
// to_heal := [ ] ;
55182: LD_ADDR_VAR 0 30
55186: PUSH
55187: EMPTY
55188: ST_TO_ADDR
// repairs := [ ] ;
55189: LD_ADDR_VAR 0 33
55193: PUSH
55194: EMPTY
55195: ST_TO_ADDR
// to_repair := [ ] ;
55196: LD_ADDR_VAR 0 32
55200: PUSH
55201: EMPTY
55202: ST_TO_ADDR
// if not group or not path then
55203: LD_VAR 0 4
55207: NOT
55208: PUSH
55209: LD_VAR 0 5
55213: NOT
55214: OR
55215: IFFALSE 55219
// exit ;
55217: GO 59757
// side := GetSide ( group [ 1 ] ) ;
55219: LD_ADDR_VAR 0 35
55223: PUSH
55224: LD_VAR 0 4
55228: PUSH
55229: LD_INT 1
55231: ARRAY
55232: PPUSH
55233: CALL_OW 255
55237: ST_TO_ADDR
// if flags then
55238: LD_VAR 0 6
55242: IFFALSE 55386
// begin f_ignore_area := flags [ 1 ] ;
55244: LD_ADDR_VAR 0 17
55248: PUSH
55249: LD_VAR 0 6
55253: PUSH
55254: LD_INT 1
55256: ARRAY
55257: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
55258: LD_ADDR_VAR 0 18
55262: PUSH
55263: LD_VAR 0 6
55267: PUSH
55268: LD_INT 2
55270: ARRAY
55271: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
55272: LD_ADDR_VAR 0 19
55276: PUSH
55277: LD_VAR 0 6
55281: PUSH
55282: LD_INT 3
55284: ARRAY
55285: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
55286: LD_ADDR_VAR 0 20
55290: PUSH
55291: LD_VAR 0 6
55295: PUSH
55296: LD_INT 4
55298: ARRAY
55299: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
55300: LD_ADDR_VAR 0 21
55304: PUSH
55305: LD_VAR 0 6
55309: PUSH
55310: LD_INT 5
55312: ARRAY
55313: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
55314: LD_ADDR_VAR 0 22
55318: PUSH
55319: LD_VAR 0 6
55323: PUSH
55324: LD_INT 6
55326: ARRAY
55327: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
55328: LD_ADDR_VAR 0 23
55332: PUSH
55333: LD_VAR 0 6
55337: PUSH
55338: LD_INT 7
55340: ARRAY
55341: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
55342: LD_ADDR_VAR 0 24
55346: PUSH
55347: LD_VAR 0 6
55351: PUSH
55352: LD_INT 8
55354: ARRAY
55355: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
55356: LD_ADDR_VAR 0 25
55360: PUSH
55361: LD_VAR 0 6
55365: PUSH
55366: LD_INT 9
55368: ARRAY
55369: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
55370: LD_ADDR_VAR 0 26
55374: PUSH
55375: LD_VAR 0 6
55379: PUSH
55380: LD_INT 10
55382: ARRAY
55383: ST_TO_ADDR
// end else
55384: GO 55466
// begin f_ignore_area := false ;
55386: LD_ADDR_VAR 0 17
55390: PUSH
55391: LD_INT 0
55393: ST_TO_ADDR
// f_capture := false ;
55394: LD_ADDR_VAR 0 18
55398: PUSH
55399: LD_INT 0
55401: ST_TO_ADDR
// f_ignore_civ := false ;
55402: LD_ADDR_VAR 0 19
55406: PUSH
55407: LD_INT 0
55409: ST_TO_ADDR
// f_murder := false ;
55410: LD_ADDR_VAR 0 20
55414: PUSH
55415: LD_INT 0
55417: ST_TO_ADDR
// f_mines := false ;
55418: LD_ADDR_VAR 0 21
55422: PUSH
55423: LD_INT 0
55425: ST_TO_ADDR
// f_repair := false ;
55426: LD_ADDR_VAR 0 22
55430: PUSH
55431: LD_INT 0
55433: ST_TO_ADDR
// f_heal := false ;
55434: LD_ADDR_VAR 0 23
55438: PUSH
55439: LD_INT 0
55441: ST_TO_ADDR
// f_spacetime := false ;
55442: LD_ADDR_VAR 0 24
55446: PUSH
55447: LD_INT 0
55449: ST_TO_ADDR
// f_attack_depot := false ;
55450: LD_ADDR_VAR 0 25
55454: PUSH
55455: LD_INT 0
55457: ST_TO_ADDR
// f_crawl := false ;
55458: LD_ADDR_VAR 0 26
55462: PUSH
55463: LD_INT 0
55465: ST_TO_ADDR
// end ; if f_heal then
55466: LD_VAR 0 23
55470: IFFALSE 55497
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
55472: LD_ADDR_VAR 0 31
55476: PUSH
55477: LD_VAR 0 4
55481: PPUSH
55482: LD_INT 25
55484: PUSH
55485: LD_INT 4
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PPUSH
55492: CALL_OW 72
55496: ST_TO_ADDR
// if f_repair then
55497: LD_VAR 0 22
55501: IFFALSE 55528
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
55503: LD_ADDR_VAR 0 33
55507: PUSH
55508: LD_VAR 0 4
55512: PPUSH
55513: LD_INT 25
55515: PUSH
55516: LD_INT 3
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PPUSH
55523: CALL_OW 72
55527: ST_TO_ADDR
// units_path := [ ] ;
55528: LD_ADDR_VAR 0 16
55532: PUSH
55533: EMPTY
55534: ST_TO_ADDR
// for i = 1 to group do
55535: LD_ADDR_VAR 0 7
55539: PUSH
55540: DOUBLE
55541: LD_INT 1
55543: DEC
55544: ST_TO_ADDR
55545: LD_VAR 0 4
55549: PUSH
55550: FOR_TO
55551: IFFALSE 55580
// units_path := Replace ( units_path , i , path ) ;
55553: LD_ADDR_VAR 0 16
55557: PUSH
55558: LD_VAR 0 16
55562: PPUSH
55563: LD_VAR 0 7
55567: PPUSH
55568: LD_VAR 0 5
55572: PPUSH
55573: CALL_OW 1
55577: ST_TO_ADDR
55578: GO 55550
55580: POP
55581: POP
// repeat for i = group downto 1 do
55582: LD_ADDR_VAR 0 7
55586: PUSH
55587: DOUBLE
55588: LD_VAR 0 4
55592: INC
55593: ST_TO_ADDR
55594: LD_INT 1
55596: PUSH
55597: FOR_DOWNTO
55598: IFFALSE 59720
// begin wait ( 5 ) ;
55600: LD_INT 5
55602: PPUSH
55603: CALL_OW 67
// tmp := [ ] ;
55607: LD_ADDR_VAR 0 14
55611: PUSH
55612: EMPTY
55613: ST_TO_ADDR
// attacking := false ;
55614: LD_ADDR_VAR 0 29
55618: PUSH
55619: LD_INT 0
55621: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
55622: LD_VAR 0 4
55626: PUSH
55627: LD_VAR 0 7
55631: ARRAY
55632: PPUSH
55633: CALL_OW 301
55637: PUSH
55638: LD_VAR 0 4
55642: PUSH
55643: LD_VAR 0 7
55647: ARRAY
55648: NOT
55649: OR
55650: IFFALSE 55759
// begin if GetType ( group [ i ] ) = unit_human then
55652: LD_VAR 0 4
55656: PUSH
55657: LD_VAR 0 7
55661: ARRAY
55662: PPUSH
55663: CALL_OW 247
55667: PUSH
55668: LD_INT 1
55670: EQUAL
55671: IFFALSE 55717
// begin to_heal := to_heal diff group [ i ] ;
55673: LD_ADDR_VAR 0 30
55677: PUSH
55678: LD_VAR 0 30
55682: PUSH
55683: LD_VAR 0 4
55687: PUSH
55688: LD_VAR 0 7
55692: ARRAY
55693: DIFF
55694: ST_TO_ADDR
// healers := healers diff group [ i ] ;
55695: LD_ADDR_VAR 0 31
55699: PUSH
55700: LD_VAR 0 31
55704: PUSH
55705: LD_VAR 0 4
55709: PUSH
55710: LD_VAR 0 7
55714: ARRAY
55715: DIFF
55716: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
55717: LD_ADDR_VAR 0 4
55721: PUSH
55722: LD_VAR 0 4
55726: PPUSH
55727: LD_VAR 0 7
55731: PPUSH
55732: CALL_OW 3
55736: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
55737: LD_ADDR_VAR 0 16
55741: PUSH
55742: LD_VAR 0 16
55746: PPUSH
55747: LD_VAR 0 7
55751: PPUSH
55752: CALL_OW 3
55756: ST_TO_ADDR
// continue ;
55757: GO 55597
// end ; if f_repair then
55759: LD_VAR 0 22
55763: IFFALSE 56252
// begin if GetType ( group [ i ] ) = unit_vehicle then
55765: LD_VAR 0 4
55769: PUSH
55770: LD_VAR 0 7
55774: ARRAY
55775: PPUSH
55776: CALL_OW 247
55780: PUSH
55781: LD_INT 2
55783: EQUAL
55784: IFFALSE 55974
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
55786: LD_VAR 0 4
55790: PUSH
55791: LD_VAR 0 7
55795: ARRAY
55796: PPUSH
55797: CALL_OW 256
55801: PUSH
55802: LD_INT 700
55804: LESS
55805: PUSH
55806: LD_VAR 0 4
55810: PUSH
55811: LD_VAR 0 7
55815: ARRAY
55816: PUSH
55817: LD_VAR 0 32
55821: IN
55822: NOT
55823: AND
55824: IFFALSE 55848
// to_repair := to_repair union group [ i ] ;
55826: LD_ADDR_VAR 0 32
55830: PUSH
55831: LD_VAR 0 32
55835: PUSH
55836: LD_VAR 0 4
55840: PUSH
55841: LD_VAR 0 7
55845: ARRAY
55846: UNION
55847: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
55848: LD_VAR 0 4
55852: PUSH
55853: LD_VAR 0 7
55857: ARRAY
55858: PPUSH
55859: CALL_OW 256
55863: PUSH
55864: LD_INT 1000
55866: EQUAL
55867: PUSH
55868: LD_VAR 0 4
55872: PUSH
55873: LD_VAR 0 7
55877: ARRAY
55878: PUSH
55879: LD_VAR 0 32
55883: IN
55884: AND
55885: IFFALSE 55909
// to_repair := to_repair diff group [ i ] ;
55887: LD_ADDR_VAR 0 32
55891: PUSH
55892: LD_VAR 0 32
55896: PUSH
55897: LD_VAR 0 4
55901: PUSH
55902: LD_VAR 0 7
55906: ARRAY
55907: DIFF
55908: ST_TO_ADDR
// if group [ i ] in to_repair then
55909: LD_VAR 0 4
55913: PUSH
55914: LD_VAR 0 7
55918: ARRAY
55919: PUSH
55920: LD_VAR 0 32
55924: IN
55925: IFFALSE 55972
// begin if not IsInArea ( group [ i ] , f_repair ) then
55927: LD_VAR 0 4
55931: PUSH
55932: LD_VAR 0 7
55936: ARRAY
55937: PPUSH
55938: LD_VAR 0 22
55942: PPUSH
55943: CALL_OW 308
55947: NOT
55948: IFFALSE 55970
// ComMoveToArea ( group [ i ] , f_repair ) ;
55950: LD_VAR 0 4
55954: PUSH
55955: LD_VAR 0 7
55959: ARRAY
55960: PPUSH
55961: LD_VAR 0 22
55965: PPUSH
55966: CALL_OW 113
// continue ;
55970: GO 55597
// end ; end else
55972: GO 56252
// if group [ i ] in repairs then
55974: LD_VAR 0 4
55978: PUSH
55979: LD_VAR 0 7
55983: ARRAY
55984: PUSH
55985: LD_VAR 0 33
55989: IN
55990: IFFALSE 56252
// begin if IsInUnit ( group [ i ] ) then
55992: LD_VAR 0 4
55996: PUSH
55997: LD_VAR 0 7
56001: ARRAY
56002: PPUSH
56003: CALL_OW 310
56007: IFFALSE 56075
// begin z := IsInUnit ( group [ i ] ) ;
56009: LD_ADDR_VAR 0 13
56013: PUSH
56014: LD_VAR 0 4
56018: PUSH
56019: LD_VAR 0 7
56023: ARRAY
56024: PPUSH
56025: CALL_OW 310
56029: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
56030: LD_VAR 0 13
56034: PUSH
56035: LD_VAR 0 32
56039: IN
56040: PUSH
56041: LD_VAR 0 13
56045: PPUSH
56046: LD_VAR 0 22
56050: PPUSH
56051: CALL_OW 308
56055: AND
56056: IFFALSE 56073
// ComExitVehicle ( group [ i ] ) ;
56058: LD_VAR 0 4
56062: PUSH
56063: LD_VAR 0 7
56067: ARRAY
56068: PPUSH
56069: CALL_OW 121
// end else
56073: GO 56252
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
56075: LD_ADDR_VAR 0 13
56079: PUSH
56080: LD_VAR 0 4
56084: PPUSH
56085: LD_INT 95
56087: PUSH
56088: LD_VAR 0 22
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 58
56099: PUSH
56100: EMPTY
56101: LIST
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PPUSH
56107: CALL_OW 72
56111: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
56112: LD_VAR 0 4
56116: PUSH
56117: LD_VAR 0 7
56121: ARRAY
56122: PPUSH
56123: CALL_OW 314
56127: NOT
56128: IFFALSE 56250
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
56130: LD_ADDR_VAR 0 10
56134: PUSH
56135: LD_VAR 0 13
56139: PPUSH
56140: LD_VAR 0 4
56144: PUSH
56145: LD_VAR 0 7
56149: ARRAY
56150: PPUSH
56151: CALL_OW 74
56155: ST_TO_ADDR
// if not x then
56156: LD_VAR 0 10
56160: NOT
56161: IFFALSE 56165
// continue ;
56163: GO 55597
// if GetLives ( x ) < 1000 then
56165: LD_VAR 0 10
56169: PPUSH
56170: CALL_OW 256
56174: PUSH
56175: LD_INT 1000
56177: LESS
56178: IFFALSE 56202
// ComRepairVehicle ( group [ i ] , x ) else
56180: LD_VAR 0 4
56184: PUSH
56185: LD_VAR 0 7
56189: ARRAY
56190: PPUSH
56191: LD_VAR 0 10
56195: PPUSH
56196: CALL_OW 129
56200: GO 56250
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
56202: LD_VAR 0 23
56206: PUSH
56207: LD_VAR 0 4
56211: PUSH
56212: LD_VAR 0 7
56216: ARRAY
56217: PPUSH
56218: CALL_OW 256
56222: PUSH
56223: LD_INT 1000
56225: LESS
56226: AND
56227: NOT
56228: IFFALSE 56250
// ComEnterUnit ( group [ i ] , x ) ;
56230: LD_VAR 0 4
56234: PUSH
56235: LD_VAR 0 7
56239: ARRAY
56240: PPUSH
56241: LD_VAR 0 10
56245: PPUSH
56246: CALL_OW 120
// end ; continue ;
56250: GO 55597
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
56252: LD_VAR 0 23
56256: PUSH
56257: LD_VAR 0 4
56261: PUSH
56262: LD_VAR 0 7
56266: ARRAY
56267: PPUSH
56268: CALL_OW 247
56272: PUSH
56273: LD_INT 1
56275: EQUAL
56276: AND
56277: IFFALSE 56755
// begin if group [ i ] in healers then
56279: LD_VAR 0 4
56283: PUSH
56284: LD_VAR 0 7
56288: ARRAY
56289: PUSH
56290: LD_VAR 0 31
56294: IN
56295: IFFALSE 56568
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
56297: LD_VAR 0 4
56301: PUSH
56302: LD_VAR 0 7
56306: ARRAY
56307: PPUSH
56308: LD_VAR 0 23
56312: PPUSH
56313: CALL_OW 308
56317: NOT
56318: PUSH
56319: LD_VAR 0 4
56323: PUSH
56324: LD_VAR 0 7
56328: ARRAY
56329: PPUSH
56330: CALL_OW 314
56334: NOT
56335: AND
56336: IFFALSE 56360
// ComMoveToArea ( group [ i ] , f_heal ) else
56338: LD_VAR 0 4
56342: PUSH
56343: LD_VAR 0 7
56347: ARRAY
56348: PPUSH
56349: LD_VAR 0 23
56353: PPUSH
56354: CALL_OW 113
56358: GO 56566
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
56360: LD_VAR 0 4
56364: PUSH
56365: LD_VAR 0 7
56369: ARRAY
56370: PPUSH
56371: CALL 54978 0 1
56375: PPUSH
56376: CALL_OW 256
56380: PUSH
56381: LD_INT 1000
56383: EQUAL
56384: IFFALSE 56403
// ComStop ( group [ i ] ) else
56386: LD_VAR 0 4
56390: PUSH
56391: LD_VAR 0 7
56395: ARRAY
56396: PPUSH
56397: CALL_OW 141
56401: GO 56566
// if not HasTask ( group [ i ] ) and to_heal then
56403: LD_VAR 0 4
56407: PUSH
56408: LD_VAR 0 7
56412: ARRAY
56413: PPUSH
56414: CALL_OW 314
56418: NOT
56419: PUSH
56420: LD_VAR 0 30
56424: AND
56425: IFFALSE 56566
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
56427: LD_ADDR_VAR 0 13
56431: PUSH
56432: LD_VAR 0 30
56436: PPUSH
56437: LD_INT 3
56439: PUSH
56440: LD_INT 54
56442: PUSH
56443: EMPTY
56444: LIST
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PPUSH
56450: CALL_OW 72
56454: PPUSH
56455: LD_VAR 0 4
56459: PUSH
56460: LD_VAR 0 7
56464: ARRAY
56465: PPUSH
56466: CALL_OW 74
56470: ST_TO_ADDR
// if z then
56471: LD_VAR 0 13
56475: IFFALSE 56566
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
56477: LD_INT 91
56479: PUSH
56480: LD_VAR 0 13
56484: PUSH
56485: LD_INT 10
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 81
56495: PUSH
56496: LD_VAR 0 13
56500: PPUSH
56501: CALL_OW 255
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PPUSH
56514: CALL_OW 69
56518: PUSH
56519: LD_INT 0
56521: EQUAL
56522: IFFALSE 56546
// ComHeal ( group [ i ] , z ) else
56524: LD_VAR 0 4
56528: PUSH
56529: LD_VAR 0 7
56533: ARRAY
56534: PPUSH
56535: LD_VAR 0 13
56539: PPUSH
56540: CALL_OW 128
56544: GO 56566
// ComMoveToArea ( group [ i ] , f_heal ) ;
56546: LD_VAR 0 4
56550: PUSH
56551: LD_VAR 0 7
56555: ARRAY
56556: PPUSH
56557: LD_VAR 0 23
56561: PPUSH
56562: CALL_OW 113
// end ; continue ;
56566: GO 55597
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
56568: LD_VAR 0 4
56572: PUSH
56573: LD_VAR 0 7
56577: ARRAY
56578: PPUSH
56579: CALL_OW 256
56583: PUSH
56584: LD_INT 700
56586: LESS
56587: PUSH
56588: LD_VAR 0 4
56592: PUSH
56593: LD_VAR 0 7
56597: ARRAY
56598: PUSH
56599: LD_VAR 0 30
56603: IN
56604: NOT
56605: AND
56606: IFFALSE 56630
// to_heal := to_heal union group [ i ] ;
56608: LD_ADDR_VAR 0 30
56612: PUSH
56613: LD_VAR 0 30
56617: PUSH
56618: LD_VAR 0 4
56622: PUSH
56623: LD_VAR 0 7
56627: ARRAY
56628: UNION
56629: ST_TO_ADDR
// if group [ i ] in to_heal then
56630: LD_VAR 0 4
56634: PUSH
56635: LD_VAR 0 7
56639: ARRAY
56640: PUSH
56641: LD_VAR 0 30
56645: IN
56646: IFFALSE 56755
// begin if GetLives ( group [ i ] ) = 1000 then
56648: LD_VAR 0 4
56652: PUSH
56653: LD_VAR 0 7
56657: ARRAY
56658: PPUSH
56659: CALL_OW 256
56663: PUSH
56664: LD_INT 1000
56666: EQUAL
56667: IFFALSE 56693
// to_heal := to_heal diff group [ i ] else
56669: LD_ADDR_VAR 0 30
56673: PUSH
56674: LD_VAR 0 30
56678: PUSH
56679: LD_VAR 0 4
56683: PUSH
56684: LD_VAR 0 7
56688: ARRAY
56689: DIFF
56690: ST_TO_ADDR
56691: GO 56755
// begin if not IsInArea ( group [ i ] , to_heal ) then
56693: LD_VAR 0 4
56697: PUSH
56698: LD_VAR 0 7
56702: ARRAY
56703: PPUSH
56704: LD_VAR 0 30
56708: PPUSH
56709: CALL_OW 308
56713: NOT
56714: IFFALSE 56738
// ComMoveToArea ( group [ i ] , f_heal ) else
56716: LD_VAR 0 4
56720: PUSH
56721: LD_VAR 0 7
56725: ARRAY
56726: PPUSH
56727: LD_VAR 0 23
56731: PPUSH
56732: CALL_OW 113
56736: GO 56753
// ComHold ( group [ i ] ) ;
56738: LD_VAR 0 4
56742: PUSH
56743: LD_VAR 0 7
56747: ARRAY
56748: PPUSH
56749: CALL_OW 140
// continue ;
56753: GO 55597
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
56755: LD_VAR 0 4
56759: PUSH
56760: LD_VAR 0 7
56764: ARRAY
56765: PPUSH
56766: LD_INT 10
56768: PPUSH
56769: CALL 53375 0 2
56773: NOT
56774: PUSH
56775: LD_VAR 0 16
56779: PUSH
56780: LD_VAR 0 7
56784: ARRAY
56785: PUSH
56786: EMPTY
56787: EQUAL
56788: NOT
56789: AND
56790: IFFALSE 57056
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
56792: LD_VAR 0 4
56796: PUSH
56797: LD_VAR 0 7
56801: ARRAY
56802: PPUSH
56803: CALL_OW 262
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: LD_INT 2
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: IN
56818: IFFALSE 56859
// if GetFuel ( group [ i ] ) < 10 then
56820: LD_VAR 0 4
56824: PUSH
56825: LD_VAR 0 7
56829: ARRAY
56830: PPUSH
56831: CALL_OW 261
56835: PUSH
56836: LD_INT 10
56838: LESS
56839: IFFALSE 56859
// SetFuel ( group [ i ] , 12 ) ;
56841: LD_VAR 0 4
56845: PUSH
56846: LD_VAR 0 7
56850: ARRAY
56851: PPUSH
56852: LD_INT 12
56854: PPUSH
56855: CALL_OW 240
// if units_path [ i ] then
56859: LD_VAR 0 16
56863: PUSH
56864: LD_VAR 0 7
56868: ARRAY
56869: IFFALSE 57054
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
56871: LD_VAR 0 4
56875: PUSH
56876: LD_VAR 0 7
56880: ARRAY
56881: PPUSH
56882: LD_VAR 0 16
56886: PUSH
56887: LD_VAR 0 7
56891: ARRAY
56892: PUSH
56893: LD_INT 1
56895: ARRAY
56896: PUSH
56897: LD_INT 1
56899: ARRAY
56900: PPUSH
56901: LD_VAR 0 16
56905: PUSH
56906: LD_VAR 0 7
56910: ARRAY
56911: PUSH
56912: LD_INT 1
56914: ARRAY
56915: PUSH
56916: LD_INT 2
56918: ARRAY
56919: PPUSH
56920: CALL_OW 297
56924: PUSH
56925: LD_INT 6
56927: GREATER
56928: IFFALSE 57003
// begin if not HasTask ( group [ i ] ) then
56930: LD_VAR 0 4
56934: PUSH
56935: LD_VAR 0 7
56939: ARRAY
56940: PPUSH
56941: CALL_OW 314
56945: NOT
56946: IFFALSE 57001
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
56948: LD_VAR 0 4
56952: PUSH
56953: LD_VAR 0 7
56957: ARRAY
56958: PPUSH
56959: LD_VAR 0 16
56963: PUSH
56964: LD_VAR 0 7
56968: ARRAY
56969: PUSH
56970: LD_INT 1
56972: ARRAY
56973: PUSH
56974: LD_INT 1
56976: ARRAY
56977: PPUSH
56978: LD_VAR 0 16
56982: PUSH
56983: LD_VAR 0 7
56987: ARRAY
56988: PUSH
56989: LD_INT 1
56991: ARRAY
56992: PUSH
56993: LD_INT 2
56995: ARRAY
56996: PPUSH
56997: CALL_OW 114
// end else
57001: GO 57054
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
57003: LD_ADDR_VAR 0 15
57007: PUSH
57008: LD_VAR 0 16
57012: PUSH
57013: LD_VAR 0 7
57017: ARRAY
57018: PPUSH
57019: LD_INT 1
57021: PPUSH
57022: CALL_OW 3
57026: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
57027: LD_ADDR_VAR 0 16
57031: PUSH
57032: LD_VAR 0 16
57036: PPUSH
57037: LD_VAR 0 7
57041: PPUSH
57042: LD_VAR 0 15
57046: PPUSH
57047: CALL_OW 1
57051: ST_TO_ADDR
// continue ;
57052: GO 55597
// end ; end ; end else
57054: GO 59718
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
57056: LD_ADDR_VAR 0 14
57060: PUSH
57061: LD_INT 81
57063: PUSH
57064: LD_VAR 0 4
57068: PUSH
57069: LD_VAR 0 7
57073: ARRAY
57074: PPUSH
57075: CALL_OW 255
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PPUSH
57084: CALL_OW 69
57088: ST_TO_ADDR
// if not tmp then
57089: LD_VAR 0 14
57093: NOT
57094: IFFALSE 57098
// continue ;
57096: GO 55597
// if f_ignore_area then
57098: LD_VAR 0 17
57102: IFFALSE 57190
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
57104: LD_ADDR_VAR 0 15
57108: PUSH
57109: LD_VAR 0 14
57113: PPUSH
57114: LD_INT 3
57116: PUSH
57117: LD_INT 92
57119: PUSH
57120: LD_VAR 0 17
57124: PUSH
57125: LD_INT 1
57127: ARRAY
57128: PUSH
57129: LD_VAR 0 17
57133: PUSH
57134: LD_INT 2
57136: ARRAY
57137: PUSH
57138: LD_VAR 0 17
57142: PUSH
57143: LD_INT 3
57145: ARRAY
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PPUSH
57157: CALL_OW 72
57161: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
57162: LD_VAR 0 14
57166: PUSH
57167: LD_VAR 0 15
57171: DIFF
57172: IFFALSE 57190
// tmp := tmp diff tmp2 ;
57174: LD_ADDR_VAR 0 14
57178: PUSH
57179: LD_VAR 0 14
57183: PUSH
57184: LD_VAR 0 15
57188: DIFF
57189: ST_TO_ADDR
// end ; if not f_murder then
57190: LD_VAR 0 20
57194: NOT
57195: IFFALSE 57253
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
57197: LD_ADDR_VAR 0 15
57201: PUSH
57202: LD_VAR 0 14
57206: PPUSH
57207: LD_INT 3
57209: PUSH
57210: LD_INT 50
57212: PUSH
57213: EMPTY
57214: LIST
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PPUSH
57220: CALL_OW 72
57224: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
57225: LD_VAR 0 14
57229: PUSH
57230: LD_VAR 0 15
57234: DIFF
57235: IFFALSE 57253
// tmp := tmp diff tmp2 ;
57237: LD_ADDR_VAR 0 14
57241: PUSH
57242: LD_VAR 0 14
57246: PUSH
57247: LD_VAR 0 15
57251: DIFF
57252: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
57253: LD_ADDR_VAR 0 14
57257: PUSH
57258: LD_VAR 0 4
57262: PUSH
57263: LD_VAR 0 7
57267: ARRAY
57268: PPUSH
57269: LD_VAR 0 14
57273: PPUSH
57274: LD_INT 1
57276: PPUSH
57277: LD_INT 1
57279: PPUSH
57280: CALL 27018 0 4
57284: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
57285: LD_VAR 0 4
57289: PUSH
57290: LD_VAR 0 7
57294: ARRAY
57295: PPUSH
57296: CALL_OW 257
57300: PUSH
57301: LD_INT 1
57303: EQUAL
57304: IFFALSE 57752
// begin if WantPlant ( group [ i ] ) then
57306: LD_VAR 0 4
57310: PUSH
57311: LD_VAR 0 7
57315: ARRAY
57316: PPUSH
57317: CALL 26519 0 1
57321: IFFALSE 57325
// continue ;
57323: GO 55597
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
57325: LD_VAR 0 18
57329: PUSH
57330: LD_VAR 0 4
57334: PUSH
57335: LD_VAR 0 7
57339: ARRAY
57340: PPUSH
57341: CALL_OW 310
57345: NOT
57346: AND
57347: PUSH
57348: LD_VAR 0 14
57352: PUSH
57353: LD_INT 1
57355: ARRAY
57356: PUSH
57357: LD_VAR 0 14
57361: PPUSH
57362: LD_INT 21
57364: PUSH
57365: LD_INT 2
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 58
57374: PUSH
57375: EMPTY
57376: LIST
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PPUSH
57382: CALL_OW 72
57386: IN
57387: AND
57388: IFFALSE 57424
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
57390: LD_VAR 0 4
57394: PUSH
57395: LD_VAR 0 7
57399: ARRAY
57400: PPUSH
57401: LD_VAR 0 14
57405: PUSH
57406: LD_INT 1
57408: ARRAY
57409: PPUSH
57410: CALL_OW 120
// attacking := true ;
57414: LD_ADDR_VAR 0 29
57418: PUSH
57419: LD_INT 1
57421: ST_TO_ADDR
// continue ;
57422: GO 55597
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
57424: LD_VAR 0 26
57428: PUSH
57429: LD_VAR 0 4
57433: PUSH
57434: LD_VAR 0 7
57438: ARRAY
57439: PPUSH
57440: CALL_OW 257
57444: PUSH
57445: LD_INT 1
57447: EQUAL
57448: AND
57449: PUSH
57450: LD_VAR 0 4
57454: PUSH
57455: LD_VAR 0 7
57459: ARRAY
57460: PPUSH
57461: CALL_OW 256
57465: PUSH
57466: LD_INT 800
57468: LESS
57469: AND
57470: PUSH
57471: LD_VAR 0 4
57475: PUSH
57476: LD_VAR 0 7
57480: ARRAY
57481: PPUSH
57482: CALL_OW 318
57486: NOT
57487: AND
57488: IFFALSE 57505
// ComCrawl ( group [ i ] ) ;
57490: LD_VAR 0 4
57494: PUSH
57495: LD_VAR 0 7
57499: ARRAY
57500: PPUSH
57501: CALL_OW 137
// if f_mines then
57505: LD_VAR 0 21
57509: IFFALSE 57752
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
57511: LD_VAR 0 14
57515: PUSH
57516: LD_INT 1
57518: ARRAY
57519: PPUSH
57520: CALL_OW 247
57524: PUSH
57525: LD_INT 3
57527: EQUAL
57528: PUSH
57529: LD_VAR 0 14
57533: PUSH
57534: LD_INT 1
57536: ARRAY
57537: PUSH
57538: LD_VAR 0 27
57542: IN
57543: NOT
57544: AND
57545: IFFALSE 57752
// begin x := GetX ( tmp [ 1 ] ) ;
57547: LD_ADDR_VAR 0 10
57551: PUSH
57552: LD_VAR 0 14
57556: PUSH
57557: LD_INT 1
57559: ARRAY
57560: PPUSH
57561: CALL_OW 250
57565: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
57566: LD_ADDR_VAR 0 11
57570: PUSH
57571: LD_VAR 0 14
57575: PUSH
57576: LD_INT 1
57578: ARRAY
57579: PPUSH
57580: CALL_OW 251
57584: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
57585: LD_ADDR_VAR 0 12
57589: PUSH
57590: LD_VAR 0 4
57594: PUSH
57595: LD_VAR 0 7
57599: ARRAY
57600: PPUSH
57601: CALL 53460 0 1
57605: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
57606: LD_VAR 0 4
57610: PUSH
57611: LD_VAR 0 7
57615: ARRAY
57616: PPUSH
57617: LD_VAR 0 10
57621: PPUSH
57622: LD_VAR 0 11
57626: PPUSH
57627: LD_VAR 0 14
57631: PUSH
57632: LD_INT 1
57634: ARRAY
57635: PPUSH
57636: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
57640: LD_VAR 0 4
57644: PUSH
57645: LD_VAR 0 7
57649: ARRAY
57650: PPUSH
57651: LD_VAR 0 10
57655: PPUSH
57656: LD_VAR 0 12
57660: PPUSH
57661: LD_INT 7
57663: PPUSH
57664: CALL_OW 272
57668: PPUSH
57669: LD_VAR 0 11
57673: PPUSH
57674: LD_VAR 0 12
57678: PPUSH
57679: LD_INT 7
57681: PPUSH
57682: CALL_OW 273
57686: PPUSH
57687: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
57691: LD_VAR 0 4
57695: PUSH
57696: LD_VAR 0 7
57700: ARRAY
57701: PPUSH
57702: LD_INT 71
57704: PPUSH
57705: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
57709: LD_ADDR_VAR 0 27
57713: PUSH
57714: LD_VAR 0 27
57718: PPUSH
57719: LD_VAR 0 27
57723: PUSH
57724: LD_INT 1
57726: PLUS
57727: PPUSH
57728: LD_VAR 0 14
57732: PUSH
57733: LD_INT 1
57735: ARRAY
57736: PPUSH
57737: CALL_OW 1
57741: ST_TO_ADDR
// attacking := true ;
57742: LD_ADDR_VAR 0 29
57746: PUSH
57747: LD_INT 1
57749: ST_TO_ADDR
// continue ;
57750: GO 55597
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
57752: LD_VAR 0 4
57756: PUSH
57757: LD_VAR 0 7
57761: ARRAY
57762: PPUSH
57763: CALL_OW 257
57767: PUSH
57768: LD_INT 17
57770: EQUAL
57771: PUSH
57772: LD_VAR 0 4
57776: PUSH
57777: LD_VAR 0 7
57781: ARRAY
57782: PPUSH
57783: CALL_OW 110
57787: PUSH
57788: LD_INT 71
57790: EQUAL
57791: NOT
57792: AND
57793: IFFALSE 57939
// begin attacking := false ;
57795: LD_ADDR_VAR 0 29
57799: PUSH
57800: LD_INT 0
57802: ST_TO_ADDR
// k := 5 ;
57803: LD_ADDR_VAR 0 9
57807: PUSH
57808: LD_INT 5
57810: ST_TO_ADDR
// if tmp < k then
57811: LD_VAR 0 14
57815: PUSH
57816: LD_VAR 0 9
57820: LESS
57821: IFFALSE 57833
// k := tmp ;
57823: LD_ADDR_VAR 0 9
57827: PUSH
57828: LD_VAR 0 14
57832: ST_TO_ADDR
// for j = 1 to k do
57833: LD_ADDR_VAR 0 8
57837: PUSH
57838: DOUBLE
57839: LD_INT 1
57841: DEC
57842: ST_TO_ADDR
57843: LD_VAR 0 9
57847: PUSH
57848: FOR_TO
57849: IFFALSE 57937
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
57851: LD_VAR 0 14
57855: PUSH
57856: LD_VAR 0 8
57860: ARRAY
57861: PUSH
57862: LD_VAR 0 14
57866: PPUSH
57867: LD_INT 58
57869: PUSH
57870: EMPTY
57871: LIST
57872: PPUSH
57873: CALL_OW 72
57877: IN
57878: NOT
57879: IFFALSE 57935
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
57881: LD_VAR 0 4
57885: PUSH
57886: LD_VAR 0 7
57890: ARRAY
57891: PPUSH
57892: LD_VAR 0 14
57896: PUSH
57897: LD_VAR 0 8
57901: ARRAY
57902: PPUSH
57903: CALL_OW 115
// attacking := true ;
57907: LD_ADDR_VAR 0 29
57911: PUSH
57912: LD_INT 1
57914: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
57915: LD_VAR 0 4
57919: PUSH
57920: LD_VAR 0 7
57924: ARRAY
57925: PPUSH
57926: LD_INT 71
57928: PPUSH
57929: CALL_OW 109
// continue ;
57933: GO 57848
// end ; end ;
57935: GO 57848
57937: POP
57938: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
57939: LD_VAR 0 4
57943: PUSH
57944: LD_VAR 0 7
57948: ARRAY
57949: PPUSH
57950: CALL_OW 257
57954: PUSH
57955: LD_INT 8
57957: EQUAL
57958: PUSH
57959: LD_VAR 0 4
57963: PUSH
57964: LD_VAR 0 7
57968: ARRAY
57969: PPUSH
57970: CALL_OW 264
57974: PUSH
57975: LD_INT 28
57977: PUSH
57978: LD_INT 45
57980: PUSH
57981: LD_INT 7
57983: PUSH
57984: LD_INT 47
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: IN
57993: OR
57994: IFFALSE 58250
// begin attacking := false ;
57996: LD_ADDR_VAR 0 29
58000: PUSH
58001: LD_INT 0
58003: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
58004: LD_VAR 0 14
58008: PUSH
58009: LD_INT 1
58011: ARRAY
58012: PPUSH
58013: CALL_OW 266
58017: PUSH
58018: LD_INT 32
58020: PUSH
58021: LD_INT 31
58023: PUSH
58024: LD_INT 33
58026: PUSH
58027: LD_INT 4
58029: PUSH
58030: LD_INT 5
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: IN
58040: IFFALSE 58226
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
58042: LD_ADDR_VAR 0 9
58046: PUSH
58047: LD_VAR 0 14
58051: PUSH
58052: LD_INT 1
58054: ARRAY
58055: PPUSH
58056: CALL_OW 266
58060: PPUSH
58061: LD_VAR 0 14
58065: PUSH
58066: LD_INT 1
58068: ARRAY
58069: PPUSH
58070: CALL_OW 250
58074: PPUSH
58075: LD_VAR 0 14
58079: PUSH
58080: LD_INT 1
58082: ARRAY
58083: PPUSH
58084: CALL_OW 251
58088: PPUSH
58089: LD_VAR 0 14
58093: PUSH
58094: LD_INT 1
58096: ARRAY
58097: PPUSH
58098: CALL_OW 254
58102: PPUSH
58103: LD_VAR 0 14
58107: PUSH
58108: LD_INT 1
58110: ARRAY
58111: PPUSH
58112: CALL_OW 248
58116: PPUSH
58117: LD_INT 0
58119: PPUSH
58120: CALL 34830 0 6
58124: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
58125: LD_ADDR_VAR 0 8
58129: PUSH
58130: LD_VAR 0 4
58134: PUSH
58135: LD_VAR 0 7
58139: ARRAY
58140: PPUSH
58141: LD_VAR 0 9
58145: PPUSH
58146: CALL 53523 0 2
58150: ST_TO_ADDR
// if j then
58151: LD_VAR 0 8
58155: IFFALSE 58224
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
58157: LD_VAR 0 8
58161: PUSH
58162: LD_INT 1
58164: ARRAY
58165: PPUSH
58166: LD_VAR 0 8
58170: PUSH
58171: LD_INT 2
58173: ARRAY
58174: PPUSH
58175: CALL_OW 488
58179: IFFALSE 58224
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
58181: LD_VAR 0 4
58185: PUSH
58186: LD_VAR 0 7
58190: ARRAY
58191: PPUSH
58192: LD_VAR 0 8
58196: PUSH
58197: LD_INT 1
58199: ARRAY
58200: PPUSH
58201: LD_VAR 0 8
58205: PUSH
58206: LD_INT 2
58208: ARRAY
58209: PPUSH
58210: CALL_OW 116
// attacking := true ;
58214: LD_ADDR_VAR 0 29
58218: PUSH
58219: LD_INT 1
58221: ST_TO_ADDR
// continue ;
58222: GO 55597
// end ; end else
58224: GO 58250
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58226: LD_VAR 0 4
58230: PUSH
58231: LD_VAR 0 7
58235: ARRAY
58236: PPUSH
58237: LD_VAR 0 14
58241: PUSH
58242: LD_INT 1
58244: ARRAY
58245: PPUSH
58246: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
58250: LD_VAR 0 4
58254: PUSH
58255: LD_VAR 0 7
58259: ARRAY
58260: PPUSH
58261: CALL_OW 265
58265: PUSH
58266: LD_INT 11
58268: EQUAL
58269: IFFALSE 58547
// begin k := 10 ;
58271: LD_ADDR_VAR 0 9
58275: PUSH
58276: LD_INT 10
58278: ST_TO_ADDR
// x := 0 ;
58279: LD_ADDR_VAR 0 10
58283: PUSH
58284: LD_INT 0
58286: ST_TO_ADDR
// if tmp < k then
58287: LD_VAR 0 14
58291: PUSH
58292: LD_VAR 0 9
58296: LESS
58297: IFFALSE 58309
// k := tmp ;
58299: LD_ADDR_VAR 0 9
58303: PUSH
58304: LD_VAR 0 14
58308: ST_TO_ADDR
// for j = k downto 1 do
58309: LD_ADDR_VAR 0 8
58313: PUSH
58314: DOUBLE
58315: LD_VAR 0 9
58319: INC
58320: ST_TO_ADDR
58321: LD_INT 1
58323: PUSH
58324: FOR_DOWNTO
58325: IFFALSE 58400
// begin if GetType ( tmp [ j ] ) = unit_human then
58327: LD_VAR 0 14
58331: PUSH
58332: LD_VAR 0 8
58336: ARRAY
58337: PPUSH
58338: CALL_OW 247
58342: PUSH
58343: LD_INT 1
58345: EQUAL
58346: IFFALSE 58398
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
58348: LD_VAR 0 4
58352: PUSH
58353: LD_VAR 0 7
58357: ARRAY
58358: PPUSH
58359: LD_VAR 0 14
58363: PUSH
58364: LD_VAR 0 8
58368: ARRAY
58369: PPUSH
58370: CALL 53794 0 2
// x := tmp [ j ] ;
58374: LD_ADDR_VAR 0 10
58378: PUSH
58379: LD_VAR 0 14
58383: PUSH
58384: LD_VAR 0 8
58388: ARRAY
58389: ST_TO_ADDR
// attacking := true ;
58390: LD_ADDR_VAR 0 29
58394: PUSH
58395: LD_INT 1
58397: ST_TO_ADDR
// end ; end ;
58398: GO 58324
58400: POP
58401: POP
// if not x then
58402: LD_VAR 0 10
58406: NOT
58407: IFFALSE 58547
// begin attacking := true ;
58409: LD_ADDR_VAR 0 29
58413: PUSH
58414: LD_INT 1
58416: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
58417: LD_VAR 0 4
58421: PUSH
58422: LD_VAR 0 7
58426: ARRAY
58427: PPUSH
58428: CALL_OW 250
58432: PPUSH
58433: LD_VAR 0 4
58437: PUSH
58438: LD_VAR 0 7
58442: ARRAY
58443: PPUSH
58444: CALL_OW 251
58448: PPUSH
58449: CALL_OW 546
58453: PUSH
58454: LD_INT 2
58456: ARRAY
58457: PUSH
58458: LD_VAR 0 14
58462: PUSH
58463: LD_INT 1
58465: ARRAY
58466: PPUSH
58467: CALL_OW 250
58471: PPUSH
58472: LD_VAR 0 14
58476: PUSH
58477: LD_INT 1
58479: ARRAY
58480: PPUSH
58481: CALL_OW 251
58485: PPUSH
58486: CALL_OW 546
58490: PUSH
58491: LD_INT 2
58493: ARRAY
58494: EQUAL
58495: IFFALSE 58523
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
58497: LD_VAR 0 4
58501: PUSH
58502: LD_VAR 0 7
58506: ARRAY
58507: PPUSH
58508: LD_VAR 0 14
58512: PUSH
58513: LD_INT 1
58515: ARRAY
58516: PPUSH
58517: CALL 53794 0 2
58521: GO 58547
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58523: LD_VAR 0 4
58527: PUSH
58528: LD_VAR 0 7
58532: ARRAY
58533: PPUSH
58534: LD_VAR 0 14
58538: PUSH
58539: LD_INT 1
58541: ARRAY
58542: PPUSH
58543: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
58547: LD_VAR 0 4
58551: PUSH
58552: LD_VAR 0 7
58556: ARRAY
58557: PPUSH
58558: CALL_OW 264
58562: PUSH
58563: LD_INT 29
58565: EQUAL
58566: IFFALSE 58932
// begin if WantsToAttack ( group [ i ] ) in bombed then
58568: LD_VAR 0 4
58572: PUSH
58573: LD_VAR 0 7
58577: ARRAY
58578: PPUSH
58579: CALL_OW 319
58583: PUSH
58584: LD_VAR 0 28
58588: IN
58589: IFFALSE 58593
// continue ;
58591: GO 55597
// k := 8 ;
58593: LD_ADDR_VAR 0 9
58597: PUSH
58598: LD_INT 8
58600: ST_TO_ADDR
// x := 0 ;
58601: LD_ADDR_VAR 0 10
58605: PUSH
58606: LD_INT 0
58608: ST_TO_ADDR
// if tmp < k then
58609: LD_VAR 0 14
58613: PUSH
58614: LD_VAR 0 9
58618: LESS
58619: IFFALSE 58631
// k := tmp ;
58621: LD_ADDR_VAR 0 9
58625: PUSH
58626: LD_VAR 0 14
58630: ST_TO_ADDR
// for j = 1 to k do
58631: LD_ADDR_VAR 0 8
58635: PUSH
58636: DOUBLE
58637: LD_INT 1
58639: DEC
58640: ST_TO_ADDR
58641: LD_VAR 0 9
58645: PUSH
58646: FOR_TO
58647: IFFALSE 58779
// begin if GetType ( tmp [ j ] ) = unit_building then
58649: LD_VAR 0 14
58653: PUSH
58654: LD_VAR 0 8
58658: ARRAY
58659: PPUSH
58660: CALL_OW 247
58664: PUSH
58665: LD_INT 3
58667: EQUAL
58668: IFFALSE 58777
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
58670: LD_VAR 0 14
58674: PUSH
58675: LD_VAR 0 8
58679: ARRAY
58680: PUSH
58681: LD_VAR 0 28
58685: IN
58686: NOT
58687: PUSH
58688: LD_VAR 0 14
58692: PUSH
58693: LD_VAR 0 8
58697: ARRAY
58698: PPUSH
58699: CALL_OW 313
58703: AND
58704: IFFALSE 58777
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
58706: LD_VAR 0 4
58710: PUSH
58711: LD_VAR 0 7
58715: ARRAY
58716: PPUSH
58717: LD_VAR 0 14
58721: PUSH
58722: LD_VAR 0 8
58726: ARRAY
58727: PPUSH
58728: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
58732: LD_ADDR_VAR 0 28
58736: PUSH
58737: LD_VAR 0 28
58741: PPUSH
58742: LD_VAR 0 28
58746: PUSH
58747: LD_INT 1
58749: PLUS
58750: PPUSH
58751: LD_VAR 0 14
58755: PUSH
58756: LD_VAR 0 8
58760: ARRAY
58761: PPUSH
58762: CALL_OW 1
58766: ST_TO_ADDR
// attacking := true ;
58767: LD_ADDR_VAR 0 29
58771: PUSH
58772: LD_INT 1
58774: ST_TO_ADDR
// break ;
58775: GO 58779
// end ; end ;
58777: GO 58646
58779: POP
58780: POP
// if not attacking and f_attack_depot then
58781: LD_VAR 0 29
58785: NOT
58786: PUSH
58787: LD_VAR 0 25
58791: AND
58792: IFFALSE 58887
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58794: LD_ADDR_VAR 0 13
58798: PUSH
58799: LD_VAR 0 14
58803: PPUSH
58804: LD_INT 2
58806: PUSH
58807: LD_INT 30
58809: PUSH
58810: LD_INT 0
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 30
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: LIST
58831: PPUSH
58832: CALL_OW 72
58836: ST_TO_ADDR
// if z then
58837: LD_VAR 0 13
58841: IFFALSE 58887
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
58843: LD_VAR 0 4
58847: PUSH
58848: LD_VAR 0 7
58852: ARRAY
58853: PPUSH
58854: LD_VAR 0 13
58858: PPUSH
58859: LD_VAR 0 4
58863: PUSH
58864: LD_VAR 0 7
58868: ARRAY
58869: PPUSH
58870: CALL_OW 74
58874: PPUSH
58875: CALL_OW 115
// attacking := true ;
58879: LD_ADDR_VAR 0 29
58883: PUSH
58884: LD_INT 1
58886: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
58887: LD_VAR 0 4
58891: PUSH
58892: LD_VAR 0 7
58896: ARRAY
58897: PPUSH
58898: CALL_OW 256
58902: PUSH
58903: LD_INT 500
58905: LESS
58906: IFFALSE 58932
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58908: LD_VAR 0 4
58912: PUSH
58913: LD_VAR 0 7
58917: ARRAY
58918: PPUSH
58919: LD_VAR 0 14
58923: PUSH
58924: LD_INT 1
58926: ARRAY
58927: PPUSH
58928: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
58932: LD_VAR 0 4
58936: PUSH
58937: LD_VAR 0 7
58941: ARRAY
58942: PPUSH
58943: CALL_OW 264
58947: PUSH
58948: LD_INT 49
58950: EQUAL
58951: IFFALSE 59072
// begin if not HasTask ( group [ i ] ) then
58953: LD_VAR 0 4
58957: PUSH
58958: LD_VAR 0 7
58962: ARRAY
58963: PPUSH
58964: CALL_OW 314
58968: NOT
58969: IFFALSE 59072
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
58971: LD_ADDR_VAR 0 9
58975: PUSH
58976: LD_INT 81
58978: PUSH
58979: LD_VAR 0 4
58983: PUSH
58984: LD_VAR 0 7
58988: ARRAY
58989: PPUSH
58990: CALL_OW 255
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PPUSH
58999: CALL_OW 69
59003: PPUSH
59004: LD_VAR 0 4
59008: PUSH
59009: LD_VAR 0 7
59013: ARRAY
59014: PPUSH
59015: CALL_OW 74
59019: ST_TO_ADDR
// if k then
59020: LD_VAR 0 9
59024: IFFALSE 59072
// if GetDistUnits ( group [ i ] , k ) > 10 then
59026: LD_VAR 0 4
59030: PUSH
59031: LD_VAR 0 7
59035: ARRAY
59036: PPUSH
59037: LD_VAR 0 9
59041: PPUSH
59042: CALL_OW 296
59046: PUSH
59047: LD_INT 10
59049: GREATER
59050: IFFALSE 59072
// ComMoveUnit ( group [ i ] , k ) ;
59052: LD_VAR 0 4
59056: PUSH
59057: LD_VAR 0 7
59061: ARRAY
59062: PPUSH
59063: LD_VAR 0 9
59067: PPUSH
59068: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59072: LD_VAR 0 4
59076: PUSH
59077: LD_VAR 0 7
59081: ARRAY
59082: PPUSH
59083: CALL_OW 256
59087: PUSH
59088: LD_INT 250
59090: LESS
59091: PUSH
59092: LD_VAR 0 4
59096: PUSH
59097: LD_VAR 0 7
59101: ARRAY
59102: PUSH
59103: LD_INT 21
59105: PUSH
59106: LD_INT 2
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 23
59115: PUSH
59116: LD_INT 2
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PPUSH
59127: CALL_OW 69
59131: IN
59132: AND
59133: IFFALSE 59258
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
59135: LD_ADDR_VAR 0 9
59139: PUSH
59140: LD_OWVAR 3
59144: PUSH
59145: LD_VAR 0 4
59149: PUSH
59150: LD_VAR 0 7
59154: ARRAY
59155: DIFF
59156: PPUSH
59157: LD_VAR 0 4
59161: PUSH
59162: LD_VAR 0 7
59166: ARRAY
59167: PPUSH
59168: CALL_OW 74
59172: ST_TO_ADDR
// if not k then
59173: LD_VAR 0 9
59177: NOT
59178: IFFALSE 59182
// continue ;
59180: GO 55597
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
59182: LD_VAR 0 9
59186: PUSH
59187: LD_INT 81
59189: PUSH
59190: LD_VAR 0 4
59194: PUSH
59195: LD_VAR 0 7
59199: ARRAY
59200: PPUSH
59201: CALL_OW 255
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PPUSH
59210: CALL_OW 69
59214: IN
59215: PUSH
59216: LD_VAR 0 9
59220: PPUSH
59221: LD_VAR 0 4
59225: PUSH
59226: LD_VAR 0 7
59230: ARRAY
59231: PPUSH
59232: CALL_OW 296
59236: PUSH
59237: LD_INT 5
59239: LESS
59240: AND
59241: IFFALSE 59258
// ComAutodestruct ( group [ i ] ) ;
59243: LD_VAR 0 4
59247: PUSH
59248: LD_VAR 0 7
59252: ARRAY
59253: PPUSH
59254: CALL 53692 0 1
// end ; if f_attack_depot then
59258: LD_VAR 0 25
59262: IFFALSE 59374
// begin k := 6 ;
59264: LD_ADDR_VAR 0 9
59268: PUSH
59269: LD_INT 6
59271: ST_TO_ADDR
// if tmp < k then
59272: LD_VAR 0 14
59276: PUSH
59277: LD_VAR 0 9
59281: LESS
59282: IFFALSE 59294
// k := tmp ;
59284: LD_ADDR_VAR 0 9
59288: PUSH
59289: LD_VAR 0 14
59293: ST_TO_ADDR
// for j = 1 to k do
59294: LD_ADDR_VAR 0 8
59298: PUSH
59299: DOUBLE
59300: LD_INT 1
59302: DEC
59303: ST_TO_ADDR
59304: LD_VAR 0 9
59308: PUSH
59309: FOR_TO
59310: IFFALSE 59372
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
59312: LD_VAR 0 8
59316: PPUSH
59317: CALL_OW 266
59321: PUSH
59322: LD_INT 0
59324: PUSH
59325: LD_INT 1
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: IN
59332: IFFALSE 59370
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
59334: LD_VAR 0 4
59338: PUSH
59339: LD_VAR 0 7
59343: ARRAY
59344: PPUSH
59345: LD_VAR 0 14
59349: PUSH
59350: LD_VAR 0 8
59354: ARRAY
59355: PPUSH
59356: CALL_OW 115
// attacking := true ;
59360: LD_ADDR_VAR 0 29
59364: PUSH
59365: LD_INT 1
59367: ST_TO_ADDR
// break ;
59368: GO 59372
// end ;
59370: GO 59309
59372: POP
59373: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
59374: LD_VAR 0 4
59378: PUSH
59379: LD_VAR 0 7
59383: ARRAY
59384: PPUSH
59385: CALL_OW 302
59389: PUSH
59390: LD_VAR 0 29
59394: NOT
59395: AND
59396: IFFALSE 59718
// begin if GetTag ( group [ i ] ) = 71 then
59398: LD_VAR 0 4
59402: PUSH
59403: LD_VAR 0 7
59407: ARRAY
59408: PPUSH
59409: CALL_OW 110
59413: PUSH
59414: LD_INT 71
59416: EQUAL
59417: IFFALSE 59458
// begin if HasTask ( group [ i ] ) then
59419: LD_VAR 0 4
59423: PUSH
59424: LD_VAR 0 7
59428: ARRAY
59429: PPUSH
59430: CALL_OW 314
59434: IFFALSE 59440
// continue else
59436: GO 55597
59438: GO 59458
// SetTag ( group [ i ] , 0 ) ;
59440: LD_VAR 0 4
59444: PUSH
59445: LD_VAR 0 7
59449: ARRAY
59450: PPUSH
59451: LD_INT 0
59453: PPUSH
59454: CALL_OW 109
// end ; k := 8 ;
59458: LD_ADDR_VAR 0 9
59462: PUSH
59463: LD_INT 8
59465: ST_TO_ADDR
// x := 0 ;
59466: LD_ADDR_VAR 0 10
59470: PUSH
59471: LD_INT 0
59473: ST_TO_ADDR
// if tmp < k then
59474: LD_VAR 0 14
59478: PUSH
59479: LD_VAR 0 9
59483: LESS
59484: IFFALSE 59496
// k := tmp ;
59486: LD_ADDR_VAR 0 9
59490: PUSH
59491: LD_VAR 0 14
59495: ST_TO_ADDR
// for j = 1 to k do
59496: LD_ADDR_VAR 0 8
59500: PUSH
59501: DOUBLE
59502: LD_INT 1
59504: DEC
59505: ST_TO_ADDR
59506: LD_VAR 0 9
59510: PUSH
59511: FOR_TO
59512: IFFALSE 59610
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
59514: LD_VAR 0 14
59518: PUSH
59519: LD_VAR 0 8
59523: ARRAY
59524: PPUSH
59525: CALL_OW 247
59529: PUSH
59530: LD_INT 1
59532: EQUAL
59533: PUSH
59534: LD_VAR 0 14
59538: PUSH
59539: LD_VAR 0 8
59543: ARRAY
59544: PPUSH
59545: CALL_OW 256
59549: PUSH
59550: LD_INT 250
59552: LESS
59553: PUSH
59554: LD_VAR 0 20
59558: AND
59559: PUSH
59560: LD_VAR 0 20
59564: NOT
59565: PUSH
59566: LD_VAR 0 14
59570: PUSH
59571: LD_VAR 0 8
59575: ARRAY
59576: PPUSH
59577: CALL_OW 256
59581: PUSH
59582: LD_INT 250
59584: GREATEREQUAL
59585: AND
59586: OR
59587: AND
59588: IFFALSE 59608
// begin x := tmp [ j ] ;
59590: LD_ADDR_VAR 0 10
59594: PUSH
59595: LD_VAR 0 14
59599: PUSH
59600: LD_VAR 0 8
59604: ARRAY
59605: ST_TO_ADDR
// break ;
59606: GO 59610
// end ;
59608: GO 59511
59610: POP
59611: POP
// if x then
59612: LD_VAR 0 10
59616: IFFALSE 59640
// ComAttackUnit ( group [ i ] , x ) else
59618: LD_VAR 0 4
59622: PUSH
59623: LD_VAR 0 7
59627: ARRAY
59628: PPUSH
59629: LD_VAR 0 10
59633: PPUSH
59634: CALL_OW 115
59638: GO 59664
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
59640: LD_VAR 0 4
59644: PUSH
59645: LD_VAR 0 7
59649: ARRAY
59650: PPUSH
59651: LD_VAR 0 14
59655: PUSH
59656: LD_INT 1
59658: ARRAY
59659: PPUSH
59660: CALL_OW 115
// if not HasTask ( group [ i ] ) then
59664: LD_VAR 0 4
59668: PUSH
59669: LD_VAR 0 7
59673: ARRAY
59674: PPUSH
59675: CALL_OW 314
59679: NOT
59680: IFFALSE 59718
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
59682: LD_VAR 0 4
59686: PUSH
59687: LD_VAR 0 7
59691: ARRAY
59692: PPUSH
59693: LD_VAR 0 14
59697: PPUSH
59698: LD_VAR 0 4
59702: PUSH
59703: LD_VAR 0 7
59707: ARRAY
59708: PPUSH
59709: CALL_OW 74
59713: PPUSH
59714: CALL_OW 115
// end ; end ; end ;
59718: GO 55597
59720: POP
59721: POP
// wait ( 0 0$1 ) ;
59722: LD_INT 35
59724: PPUSH
59725: CALL_OW 67
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
59729: LD_VAR 0 4
59733: PUSH
59734: EMPTY
59735: EQUAL
59736: PUSH
59737: LD_INT 81
59739: PUSH
59740: LD_VAR 0 35
59744: PUSH
59745: EMPTY
59746: LIST
59747: LIST
59748: PPUSH
59749: CALL_OW 69
59753: NOT
59754: OR
59755: IFFALSE 55582
// end ;
59757: LD_VAR 0 2
59761: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59762: LD_INT 0
59764: PPUSH
59765: PPUSH
59766: PPUSH
59767: PPUSH
// if not base_units then
59768: LD_VAR 0 1
59772: NOT
59773: IFFALSE 59777
// exit ;
59775: GO 59864
// result := false ;
59777: LD_ADDR_VAR 0 2
59781: PUSH
59782: LD_INT 0
59784: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59785: LD_ADDR_VAR 0 5
59789: PUSH
59790: LD_VAR 0 1
59794: PPUSH
59795: LD_INT 21
59797: PUSH
59798: LD_INT 3
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PPUSH
59805: CALL_OW 72
59809: ST_TO_ADDR
// if not tmp then
59810: LD_VAR 0 5
59814: NOT
59815: IFFALSE 59819
// exit ;
59817: GO 59864
// for i in tmp do
59819: LD_ADDR_VAR 0 3
59823: PUSH
59824: LD_VAR 0 5
59828: PUSH
59829: FOR_IN
59830: IFFALSE 59862
// begin result := EnemyInRange ( i , 22 ) ;
59832: LD_ADDR_VAR 0 2
59836: PUSH
59837: LD_VAR 0 3
59841: PPUSH
59842: LD_INT 22
59844: PPUSH
59845: CALL 53375 0 2
59849: ST_TO_ADDR
// if result then
59850: LD_VAR 0 2
59854: IFFALSE 59860
// exit ;
59856: POP
59857: POP
59858: GO 59864
// end ;
59860: GO 59829
59862: POP
59863: POP
// end ;
59864: LD_VAR 0 2
59868: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59869: LD_INT 0
59871: PPUSH
59872: PPUSH
// if not units then
59873: LD_VAR 0 1
59877: NOT
59878: IFFALSE 59882
// exit ;
59880: GO 59952
// result := [ ] ;
59882: LD_ADDR_VAR 0 3
59886: PUSH
59887: EMPTY
59888: ST_TO_ADDR
// for i in units do
59889: LD_ADDR_VAR 0 4
59893: PUSH
59894: LD_VAR 0 1
59898: PUSH
59899: FOR_IN
59900: IFFALSE 59950
// if GetTag ( i ) = tag then
59902: LD_VAR 0 4
59906: PPUSH
59907: CALL_OW 110
59911: PUSH
59912: LD_VAR 0 2
59916: EQUAL
59917: IFFALSE 59948
// result := Insert ( result , result + 1 , i ) ;
59919: LD_ADDR_VAR 0 3
59923: PUSH
59924: LD_VAR 0 3
59928: PPUSH
59929: LD_VAR 0 3
59933: PUSH
59934: LD_INT 1
59936: PLUS
59937: PPUSH
59938: LD_VAR 0 4
59942: PPUSH
59943: CALL_OW 2
59947: ST_TO_ADDR
59948: GO 59899
59950: POP
59951: POP
// end ;
59952: LD_VAR 0 3
59956: RET
// export function IsDriver ( un ) ; begin
59957: LD_INT 0
59959: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59960: LD_ADDR_VAR 0 2
59964: PUSH
59965: LD_VAR 0 1
59969: PUSH
59970: LD_INT 55
59972: PUSH
59973: EMPTY
59974: LIST
59975: PPUSH
59976: CALL_OW 69
59980: IN
59981: ST_TO_ADDR
// end ;
59982: LD_VAR 0 2
59986: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59987: LD_INT 0
59989: PPUSH
59990: PPUSH
// list := [ ] ;
59991: LD_ADDR_VAR 0 5
59995: PUSH
59996: EMPTY
59997: ST_TO_ADDR
// case d of 0 :
59998: LD_VAR 0 3
60002: PUSH
60003: LD_INT 0
60005: DOUBLE
60006: EQUAL
60007: IFTRUE 60011
60009: GO 60144
60011: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60012: LD_ADDR_VAR 0 5
60016: PUSH
60017: LD_VAR 0 1
60021: PUSH
60022: LD_INT 4
60024: MINUS
60025: PUSH
60026: LD_VAR 0 2
60030: PUSH
60031: LD_INT 4
60033: MINUS
60034: PUSH
60035: LD_INT 2
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: LIST
60042: PUSH
60043: LD_VAR 0 1
60047: PUSH
60048: LD_INT 3
60050: MINUS
60051: PUSH
60052: LD_VAR 0 2
60056: PUSH
60057: LD_INT 1
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: LIST
60064: PUSH
60065: LD_VAR 0 1
60069: PUSH
60070: LD_INT 4
60072: PLUS
60073: PUSH
60074: LD_VAR 0 2
60078: PUSH
60079: LD_INT 4
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: LIST
60086: PUSH
60087: LD_VAR 0 1
60091: PUSH
60092: LD_INT 3
60094: PLUS
60095: PUSH
60096: LD_VAR 0 2
60100: PUSH
60101: LD_INT 3
60103: PLUS
60104: PUSH
60105: LD_INT 5
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: LIST
60112: PUSH
60113: LD_VAR 0 1
60117: PUSH
60118: LD_VAR 0 2
60122: PUSH
60123: LD_INT 4
60125: PLUS
60126: PUSH
60127: LD_INT 0
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: LIST
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: ST_TO_ADDR
// end ; 1 :
60142: GO 60842
60144: LD_INT 1
60146: DOUBLE
60147: EQUAL
60148: IFTRUE 60152
60150: GO 60285
60152: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60153: LD_ADDR_VAR 0 5
60157: PUSH
60158: LD_VAR 0 1
60162: PUSH
60163: LD_VAR 0 2
60167: PUSH
60168: LD_INT 4
60170: MINUS
60171: PUSH
60172: LD_INT 3
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: LIST
60179: PUSH
60180: LD_VAR 0 1
60184: PUSH
60185: LD_INT 3
60187: MINUS
60188: PUSH
60189: LD_VAR 0 2
60193: PUSH
60194: LD_INT 3
60196: MINUS
60197: PUSH
60198: LD_INT 2
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: LIST
60205: PUSH
60206: LD_VAR 0 1
60210: PUSH
60211: LD_INT 4
60213: MINUS
60214: PUSH
60215: LD_VAR 0 2
60219: PUSH
60220: LD_INT 1
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: LIST
60227: PUSH
60228: LD_VAR 0 1
60232: PUSH
60233: LD_VAR 0 2
60237: PUSH
60238: LD_INT 3
60240: PLUS
60241: PUSH
60242: LD_INT 0
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: LIST
60249: PUSH
60250: LD_VAR 0 1
60254: PUSH
60255: LD_INT 4
60257: PLUS
60258: PUSH
60259: LD_VAR 0 2
60263: PUSH
60264: LD_INT 4
60266: PLUS
60267: PUSH
60268: LD_INT 5
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: LIST
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: ST_TO_ADDR
// end ; 2 :
60283: GO 60842
60285: LD_INT 2
60287: DOUBLE
60288: EQUAL
60289: IFTRUE 60293
60291: GO 60422
60293: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60294: LD_ADDR_VAR 0 5
60298: PUSH
60299: LD_VAR 0 1
60303: PUSH
60304: LD_VAR 0 2
60308: PUSH
60309: LD_INT 3
60311: MINUS
60312: PUSH
60313: LD_INT 3
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: LIST
60320: PUSH
60321: LD_VAR 0 1
60325: PUSH
60326: LD_INT 4
60328: PLUS
60329: PUSH
60330: LD_VAR 0 2
60334: PUSH
60335: LD_INT 4
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: LIST
60342: PUSH
60343: LD_VAR 0 1
60347: PUSH
60348: LD_VAR 0 2
60352: PUSH
60353: LD_INT 4
60355: PLUS
60356: PUSH
60357: LD_INT 0
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: LIST
60364: PUSH
60365: LD_VAR 0 1
60369: PUSH
60370: LD_INT 3
60372: MINUS
60373: PUSH
60374: LD_VAR 0 2
60378: PUSH
60379: LD_INT 1
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: LIST
60386: PUSH
60387: LD_VAR 0 1
60391: PUSH
60392: LD_INT 4
60394: MINUS
60395: PUSH
60396: LD_VAR 0 2
60400: PUSH
60401: LD_INT 4
60403: MINUS
60404: PUSH
60405: LD_INT 2
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: LIST
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: ST_TO_ADDR
// end ; 3 :
60420: GO 60842
60422: LD_INT 3
60424: DOUBLE
60425: EQUAL
60426: IFTRUE 60430
60428: GO 60563
60430: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60431: LD_ADDR_VAR 0 5
60435: PUSH
60436: LD_VAR 0 1
60440: PUSH
60441: LD_INT 3
60443: PLUS
60444: PUSH
60445: LD_VAR 0 2
60449: PUSH
60450: LD_INT 4
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: LIST
60457: PUSH
60458: LD_VAR 0 1
60462: PUSH
60463: LD_INT 4
60465: PLUS
60466: PUSH
60467: LD_VAR 0 2
60471: PUSH
60472: LD_INT 4
60474: PLUS
60475: PUSH
60476: LD_INT 5
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: LIST
60483: PUSH
60484: LD_VAR 0 1
60488: PUSH
60489: LD_INT 4
60491: MINUS
60492: PUSH
60493: LD_VAR 0 2
60497: PUSH
60498: LD_INT 1
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: LIST
60505: PUSH
60506: LD_VAR 0 1
60510: PUSH
60511: LD_VAR 0 2
60515: PUSH
60516: LD_INT 4
60518: MINUS
60519: PUSH
60520: LD_INT 3
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: LIST
60527: PUSH
60528: LD_VAR 0 1
60532: PUSH
60533: LD_INT 3
60535: MINUS
60536: PUSH
60537: LD_VAR 0 2
60541: PUSH
60542: LD_INT 3
60544: MINUS
60545: PUSH
60546: LD_INT 2
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: LIST
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: ST_TO_ADDR
// end ; 4 :
60561: GO 60842
60563: LD_INT 4
60565: DOUBLE
60566: EQUAL
60567: IFTRUE 60571
60569: GO 60704
60571: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60572: LD_ADDR_VAR 0 5
60576: PUSH
60577: LD_VAR 0 1
60581: PUSH
60582: LD_VAR 0 2
60586: PUSH
60587: LD_INT 4
60589: PLUS
60590: PUSH
60591: LD_INT 0
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: LIST
60598: PUSH
60599: LD_VAR 0 1
60603: PUSH
60604: LD_INT 3
60606: PLUS
60607: PUSH
60608: LD_VAR 0 2
60612: PUSH
60613: LD_INT 3
60615: PLUS
60616: PUSH
60617: LD_INT 5
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: LIST
60624: PUSH
60625: LD_VAR 0 1
60629: PUSH
60630: LD_INT 4
60632: PLUS
60633: PUSH
60634: LD_VAR 0 2
60638: PUSH
60639: LD_INT 4
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: LIST
60646: PUSH
60647: LD_VAR 0 1
60651: PUSH
60652: LD_VAR 0 2
60656: PUSH
60657: LD_INT 3
60659: MINUS
60660: PUSH
60661: LD_INT 3
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: LIST
60668: PUSH
60669: LD_VAR 0 1
60673: PUSH
60674: LD_INT 4
60676: MINUS
60677: PUSH
60678: LD_VAR 0 2
60682: PUSH
60683: LD_INT 4
60685: MINUS
60686: PUSH
60687: LD_INT 2
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: LIST
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: ST_TO_ADDR
// end ; 5 :
60702: GO 60842
60704: LD_INT 5
60706: DOUBLE
60707: EQUAL
60708: IFTRUE 60712
60710: GO 60841
60712: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60713: LD_ADDR_VAR 0 5
60717: PUSH
60718: LD_VAR 0 1
60722: PUSH
60723: LD_INT 4
60725: MINUS
60726: PUSH
60727: LD_VAR 0 2
60731: PUSH
60732: LD_INT 1
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: LIST
60739: PUSH
60740: LD_VAR 0 1
60744: PUSH
60745: LD_VAR 0 2
60749: PUSH
60750: LD_INT 4
60752: MINUS
60753: PUSH
60754: LD_INT 3
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: LIST
60761: PUSH
60762: LD_VAR 0 1
60766: PUSH
60767: LD_INT 4
60769: PLUS
60770: PUSH
60771: LD_VAR 0 2
60775: PUSH
60776: LD_INT 4
60778: PLUS
60779: PUSH
60780: LD_INT 5
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: LIST
60787: PUSH
60788: LD_VAR 0 1
60792: PUSH
60793: LD_INT 3
60795: PLUS
60796: PUSH
60797: LD_VAR 0 2
60801: PUSH
60802: LD_INT 4
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: LIST
60809: PUSH
60810: LD_VAR 0 1
60814: PUSH
60815: LD_VAR 0 2
60819: PUSH
60820: LD_INT 3
60822: PLUS
60823: PUSH
60824: LD_INT 0
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: LIST
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: ST_TO_ADDR
// end ; end ;
60839: GO 60842
60841: POP
// result := list ;
60842: LD_ADDR_VAR 0 4
60846: PUSH
60847: LD_VAR 0 5
60851: ST_TO_ADDR
// end ;
60852: LD_VAR 0 4
60856: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60857: LD_INT 0
60859: PPUSH
60860: PPUSH
60861: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60862: LD_VAR 0 1
60866: NOT
60867: PUSH
60868: LD_VAR 0 2
60872: PUSH
60873: LD_INT 1
60875: PUSH
60876: LD_INT 2
60878: PUSH
60879: LD_INT 3
60881: PUSH
60882: LD_INT 4
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: IN
60891: NOT
60892: OR
60893: IFFALSE 60897
// exit ;
60895: GO 60989
// tmp := [ ] ;
60897: LD_ADDR_VAR 0 5
60901: PUSH
60902: EMPTY
60903: ST_TO_ADDR
// for i in units do
60904: LD_ADDR_VAR 0 4
60908: PUSH
60909: LD_VAR 0 1
60913: PUSH
60914: FOR_IN
60915: IFFALSE 60958
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60917: LD_ADDR_VAR 0 5
60921: PUSH
60922: LD_VAR 0 5
60926: PPUSH
60927: LD_VAR 0 5
60931: PUSH
60932: LD_INT 1
60934: PLUS
60935: PPUSH
60936: LD_VAR 0 4
60940: PPUSH
60941: LD_VAR 0 2
60945: PPUSH
60946: CALL_OW 259
60950: PPUSH
60951: CALL_OW 2
60955: ST_TO_ADDR
60956: GO 60914
60958: POP
60959: POP
// if not tmp then
60960: LD_VAR 0 5
60964: NOT
60965: IFFALSE 60969
// exit ;
60967: GO 60989
// result := SortListByListDesc ( units , tmp ) ;
60969: LD_ADDR_VAR 0 3
60973: PUSH
60974: LD_VAR 0 1
60978: PPUSH
60979: LD_VAR 0 5
60983: PPUSH
60984: CALL_OW 77
60988: ST_TO_ADDR
// end ;
60989: LD_VAR 0 3
60993: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60994: LD_INT 0
60996: PPUSH
60997: PPUSH
60998: PPUSH
// x := GetX ( building ) ;
60999: LD_ADDR_VAR 0 4
61003: PUSH
61004: LD_VAR 0 2
61008: PPUSH
61009: CALL_OW 250
61013: ST_TO_ADDR
// y := GetY ( building ) ;
61014: LD_ADDR_VAR 0 5
61018: PUSH
61019: LD_VAR 0 2
61023: PPUSH
61024: CALL_OW 251
61028: ST_TO_ADDR
// if GetTaskList ( unit ) then
61029: LD_VAR 0 1
61033: PPUSH
61034: CALL_OW 437
61038: IFFALSE 61133
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61040: LD_STRING e
61042: PUSH
61043: LD_VAR 0 1
61047: PPUSH
61048: CALL_OW 437
61052: PUSH
61053: LD_INT 1
61055: ARRAY
61056: PUSH
61057: LD_INT 1
61059: ARRAY
61060: EQUAL
61061: PUSH
61062: LD_VAR 0 4
61066: PUSH
61067: LD_VAR 0 1
61071: PPUSH
61072: CALL_OW 437
61076: PUSH
61077: LD_INT 1
61079: ARRAY
61080: PUSH
61081: LD_INT 2
61083: ARRAY
61084: EQUAL
61085: AND
61086: PUSH
61087: LD_VAR 0 5
61091: PUSH
61092: LD_VAR 0 1
61096: PPUSH
61097: CALL_OW 437
61101: PUSH
61102: LD_INT 1
61104: ARRAY
61105: PUSH
61106: LD_INT 3
61108: ARRAY
61109: EQUAL
61110: AND
61111: IFFALSE 61123
// result := true else
61113: LD_ADDR_VAR 0 3
61117: PUSH
61118: LD_INT 1
61120: ST_TO_ADDR
61121: GO 61131
// result := false ;
61123: LD_ADDR_VAR 0 3
61127: PUSH
61128: LD_INT 0
61130: ST_TO_ADDR
// end else
61131: GO 61141
// result := false ;
61133: LD_ADDR_VAR 0 3
61137: PUSH
61138: LD_INT 0
61140: ST_TO_ADDR
// end ;
61141: LD_VAR 0 3
61145: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61146: LD_INT 0
61148: PPUSH
61149: PPUSH
61150: PPUSH
61151: PPUSH
// if not unit or not area then
61152: LD_VAR 0 1
61156: NOT
61157: PUSH
61158: LD_VAR 0 2
61162: NOT
61163: OR
61164: IFFALSE 61168
// exit ;
61166: GO 61332
// tmp := AreaToList ( area , i ) ;
61168: LD_ADDR_VAR 0 6
61172: PUSH
61173: LD_VAR 0 2
61177: PPUSH
61178: LD_VAR 0 5
61182: PPUSH
61183: CALL_OW 517
61187: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61188: LD_ADDR_VAR 0 5
61192: PUSH
61193: DOUBLE
61194: LD_INT 1
61196: DEC
61197: ST_TO_ADDR
61198: LD_VAR 0 6
61202: PUSH
61203: LD_INT 1
61205: ARRAY
61206: PUSH
61207: FOR_TO
61208: IFFALSE 61330
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61210: LD_ADDR_VAR 0 7
61214: PUSH
61215: LD_VAR 0 6
61219: PUSH
61220: LD_INT 1
61222: ARRAY
61223: PUSH
61224: LD_VAR 0 5
61228: ARRAY
61229: PUSH
61230: LD_VAR 0 6
61234: PUSH
61235: LD_INT 2
61237: ARRAY
61238: PUSH
61239: LD_VAR 0 5
61243: ARRAY
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61249: LD_VAR 0 7
61253: PUSH
61254: LD_INT 1
61256: ARRAY
61257: PPUSH
61258: LD_VAR 0 7
61262: PUSH
61263: LD_INT 2
61265: ARRAY
61266: PPUSH
61267: CALL_OW 428
61271: PUSH
61272: LD_INT 0
61274: EQUAL
61275: IFFALSE 61328
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61277: LD_VAR 0 1
61281: PPUSH
61282: LD_VAR 0 7
61286: PUSH
61287: LD_INT 1
61289: ARRAY
61290: PPUSH
61291: LD_VAR 0 7
61295: PUSH
61296: LD_INT 2
61298: ARRAY
61299: PPUSH
61300: LD_VAR 0 3
61304: PPUSH
61305: CALL_OW 48
// result := IsPlaced ( unit ) ;
61309: LD_ADDR_VAR 0 4
61313: PUSH
61314: LD_VAR 0 1
61318: PPUSH
61319: CALL_OW 305
61323: ST_TO_ADDR
// exit ;
61324: POP
61325: POP
61326: GO 61332
// end ; end ;
61328: GO 61207
61330: POP
61331: POP
// end ;
61332: LD_VAR 0 4
61336: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61337: LD_INT 0
61339: PPUSH
61340: PPUSH
61341: PPUSH
// if not side or side > 8 then
61342: LD_VAR 0 1
61346: NOT
61347: PUSH
61348: LD_VAR 0 1
61352: PUSH
61353: LD_INT 8
61355: GREATER
61356: OR
61357: IFFALSE 61361
// exit ;
61359: GO 61548
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61361: LD_ADDR_VAR 0 4
61365: PUSH
61366: LD_INT 22
61368: PUSH
61369: LD_VAR 0 1
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 21
61380: PUSH
61381: LD_INT 3
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PPUSH
61392: CALL_OW 69
61396: ST_TO_ADDR
// if not tmp then
61397: LD_VAR 0 4
61401: NOT
61402: IFFALSE 61406
// exit ;
61404: GO 61548
// enable_addtolog := true ;
61406: LD_ADDR_OWVAR 81
61410: PUSH
61411: LD_INT 1
61413: ST_TO_ADDR
// AddToLog ( [ ) ;
61414: LD_STRING [
61416: PPUSH
61417: CALL_OW 561
// for i in tmp do
61421: LD_ADDR_VAR 0 3
61425: PUSH
61426: LD_VAR 0 4
61430: PUSH
61431: FOR_IN
61432: IFFALSE 61539
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61434: LD_STRING [
61436: PUSH
61437: LD_VAR 0 3
61441: PPUSH
61442: CALL_OW 266
61446: STR
61447: PUSH
61448: LD_STRING , 
61450: STR
61451: PUSH
61452: LD_VAR 0 3
61456: PPUSH
61457: CALL_OW 250
61461: STR
61462: PUSH
61463: LD_STRING , 
61465: STR
61466: PUSH
61467: LD_VAR 0 3
61471: PPUSH
61472: CALL_OW 251
61476: STR
61477: PUSH
61478: LD_STRING , 
61480: STR
61481: PUSH
61482: LD_VAR 0 3
61486: PPUSH
61487: CALL_OW 254
61491: STR
61492: PUSH
61493: LD_STRING , 
61495: STR
61496: PUSH
61497: LD_VAR 0 3
61501: PPUSH
61502: LD_INT 1
61504: PPUSH
61505: CALL_OW 268
61509: STR
61510: PUSH
61511: LD_STRING , 
61513: STR
61514: PUSH
61515: LD_VAR 0 3
61519: PPUSH
61520: LD_INT 2
61522: PPUSH
61523: CALL_OW 268
61527: STR
61528: PUSH
61529: LD_STRING ],
61531: STR
61532: PPUSH
61533: CALL_OW 561
// end ;
61537: GO 61431
61539: POP
61540: POP
// AddToLog ( ]; ) ;
61541: LD_STRING ];
61543: PPUSH
61544: CALL_OW 561
// end ;
61548: LD_VAR 0 2
61552: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61553: LD_INT 0
61555: PPUSH
61556: PPUSH
61557: PPUSH
61558: PPUSH
61559: PPUSH
// if not area or not rate or not max then
61560: LD_VAR 0 1
61564: NOT
61565: PUSH
61566: LD_VAR 0 2
61570: NOT
61571: OR
61572: PUSH
61573: LD_VAR 0 4
61577: NOT
61578: OR
61579: IFFALSE 61583
// exit ;
61581: GO 61775
// while 1 do
61583: LD_INT 1
61585: IFFALSE 61775
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61587: LD_ADDR_VAR 0 9
61591: PUSH
61592: LD_VAR 0 1
61596: PPUSH
61597: LD_INT 1
61599: PPUSH
61600: CALL_OW 287
61604: PUSH
61605: LD_INT 10
61607: MUL
61608: ST_TO_ADDR
// r := rate / 10 ;
61609: LD_ADDR_VAR 0 7
61613: PUSH
61614: LD_VAR 0 2
61618: PUSH
61619: LD_INT 10
61621: DIVREAL
61622: ST_TO_ADDR
// time := 1 1$00 ;
61623: LD_ADDR_VAR 0 8
61627: PUSH
61628: LD_INT 2100
61630: ST_TO_ADDR
// if amount < min then
61631: LD_VAR 0 9
61635: PUSH
61636: LD_VAR 0 3
61640: LESS
61641: IFFALSE 61659
// r := r * 2 else
61643: LD_ADDR_VAR 0 7
61647: PUSH
61648: LD_VAR 0 7
61652: PUSH
61653: LD_INT 2
61655: MUL
61656: ST_TO_ADDR
61657: GO 61685
// if amount > max then
61659: LD_VAR 0 9
61663: PUSH
61664: LD_VAR 0 4
61668: GREATER
61669: IFFALSE 61685
// r := r / 2 ;
61671: LD_ADDR_VAR 0 7
61675: PUSH
61676: LD_VAR 0 7
61680: PUSH
61681: LD_INT 2
61683: DIVREAL
61684: ST_TO_ADDR
// time := time / r ;
61685: LD_ADDR_VAR 0 8
61689: PUSH
61690: LD_VAR 0 8
61694: PUSH
61695: LD_VAR 0 7
61699: DIVREAL
61700: ST_TO_ADDR
// if time < 0 then
61701: LD_VAR 0 8
61705: PUSH
61706: LD_INT 0
61708: LESS
61709: IFFALSE 61726
// time := time * - 1 ;
61711: LD_ADDR_VAR 0 8
61715: PUSH
61716: LD_VAR 0 8
61720: PUSH
61721: LD_INT 1
61723: NEG
61724: MUL
61725: ST_TO_ADDR
// wait ( time ) ;
61726: LD_VAR 0 8
61730: PPUSH
61731: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61735: LD_INT 35
61737: PPUSH
61738: LD_INT 875
61740: PPUSH
61741: CALL_OW 12
61745: PPUSH
61746: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61750: LD_INT 1
61752: PPUSH
61753: LD_INT 5
61755: PPUSH
61756: CALL_OW 12
61760: PPUSH
61761: LD_VAR 0 1
61765: PPUSH
61766: LD_INT 1
61768: PPUSH
61769: CALL_OW 55
// end ;
61773: GO 61583
// end ;
61775: LD_VAR 0 5
61779: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61780: LD_INT 0
61782: PPUSH
61783: PPUSH
61784: PPUSH
61785: PPUSH
61786: PPUSH
61787: PPUSH
61788: PPUSH
61789: PPUSH
// if not turrets or not factories then
61790: LD_VAR 0 1
61794: NOT
61795: PUSH
61796: LD_VAR 0 2
61800: NOT
61801: OR
61802: IFFALSE 61806
// exit ;
61804: GO 62113
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61806: LD_ADDR_VAR 0 10
61810: PUSH
61811: LD_INT 5
61813: PUSH
61814: LD_INT 6
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 2
61823: PUSH
61824: LD_INT 4
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 3
61833: PUSH
61834: LD_INT 5
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 24
61848: PUSH
61849: LD_INT 25
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 23
61858: PUSH
61859: LD_INT 27
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 42
61872: PUSH
61873: LD_INT 43
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 44
61882: PUSH
61883: LD_INT 46
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 45
61892: PUSH
61893: LD_INT 47
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: LIST
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: LIST
61909: ST_TO_ADDR
// result := [ ] ;
61910: LD_ADDR_VAR 0 3
61914: PUSH
61915: EMPTY
61916: ST_TO_ADDR
// for i in turrets do
61917: LD_ADDR_VAR 0 4
61921: PUSH
61922: LD_VAR 0 1
61926: PUSH
61927: FOR_IN
61928: IFFALSE 62111
// begin nat := GetNation ( i ) ;
61930: LD_ADDR_VAR 0 7
61934: PUSH
61935: LD_VAR 0 4
61939: PPUSH
61940: CALL_OW 248
61944: ST_TO_ADDR
// weapon := 0 ;
61945: LD_ADDR_VAR 0 8
61949: PUSH
61950: LD_INT 0
61952: ST_TO_ADDR
// if not nat then
61953: LD_VAR 0 7
61957: NOT
61958: IFFALSE 61962
// continue ;
61960: GO 61927
// for j in list [ nat ] do
61962: LD_ADDR_VAR 0 5
61966: PUSH
61967: LD_VAR 0 10
61971: PUSH
61972: LD_VAR 0 7
61976: ARRAY
61977: PUSH
61978: FOR_IN
61979: IFFALSE 62020
// if GetBWeapon ( i ) = j [ 1 ] then
61981: LD_VAR 0 4
61985: PPUSH
61986: CALL_OW 269
61990: PUSH
61991: LD_VAR 0 5
61995: PUSH
61996: LD_INT 1
61998: ARRAY
61999: EQUAL
62000: IFFALSE 62018
// begin weapon := j [ 2 ] ;
62002: LD_ADDR_VAR 0 8
62006: PUSH
62007: LD_VAR 0 5
62011: PUSH
62012: LD_INT 2
62014: ARRAY
62015: ST_TO_ADDR
// break ;
62016: GO 62020
// end ;
62018: GO 61978
62020: POP
62021: POP
// if not weapon then
62022: LD_VAR 0 8
62026: NOT
62027: IFFALSE 62031
// continue ;
62029: GO 61927
// for k in factories do
62031: LD_ADDR_VAR 0 6
62035: PUSH
62036: LD_VAR 0 2
62040: PUSH
62041: FOR_IN
62042: IFFALSE 62107
// begin weapons := AvailableWeaponList ( k ) ;
62044: LD_ADDR_VAR 0 9
62048: PUSH
62049: LD_VAR 0 6
62053: PPUSH
62054: CALL_OW 478
62058: ST_TO_ADDR
// if not weapons then
62059: LD_VAR 0 9
62063: NOT
62064: IFFALSE 62068
// continue ;
62066: GO 62041
// if weapon in weapons then
62068: LD_VAR 0 8
62072: PUSH
62073: LD_VAR 0 9
62077: IN
62078: IFFALSE 62105
// begin result := [ i , weapon ] ;
62080: LD_ADDR_VAR 0 3
62084: PUSH
62085: LD_VAR 0 4
62089: PUSH
62090: LD_VAR 0 8
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: ST_TO_ADDR
// exit ;
62099: POP
62100: POP
62101: POP
62102: POP
62103: GO 62113
// end ; end ;
62105: GO 62041
62107: POP
62108: POP
// end ;
62109: GO 61927
62111: POP
62112: POP
// end ;
62113: LD_VAR 0 3
62117: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62118: LD_INT 0
62120: PPUSH
// if not side or side > 8 then
62121: LD_VAR 0 3
62125: NOT
62126: PUSH
62127: LD_VAR 0 3
62131: PUSH
62132: LD_INT 8
62134: GREATER
62135: OR
62136: IFFALSE 62140
// exit ;
62138: GO 62199
// if not range then
62140: LD_VAR 0 4
62144: NOT
62145: IFFALSE 62156
// range := - 12 ;
62147: LD_ADDR_VAR 0 4
62151: PUSH
62152: LD_INT 12
62154: NEG
62155: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62156: LD_VAR 0 1
62160: PPUSH
62161: LD_VAR 0 2
62165: PPUSH
62166: LD_VAR 0 3
62170: PPUSH
62171: LD_VAR 0 4
62175: PPUSH
62176: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62180: LD_VAR 0 1
62184: PPUSH
62185: LD_VAR 0 2
62189: PPUSH
62190: LD_VAR 0 3
62194: PPUSH
62195: CALL_OW 331
// end ;
62199: LD_VAR 0 5
62203: RET
// export function Video ( mode ) ; begin
62204: LD_INT 0
62206: PPUSH
// ingame_video = mode ;
62207: LD_ADDR_OWVAR 52
62211: PUSH
62212: LD_VAR 0 1
62216: ST_TO_ADDR
// interface_hidden = mode ;
62217: LD_ADDR_OWVAR 54
62221: PUSH
62222: LD_VAR 0 1
62226: ST_TO_ADDR
// end ;
62227: LD_VAR 0 2
62231: RET
// export function Join ( array , element ) ; begin
62232: LD_INT 0
62234: PPUSH
// result := array ^ element ;
62235: LD_ADDR_VAR 0 3
62239: PUSH
62240: LD_VAR 0 1
62244: PUSH
62245: LD_VAR 0 2
62249: ADD
62250: ST_TO_ADDR
// end ;
62251: LD_VAR 0 3
62255: RET
// export function JoinUnion ( array , element ) ; begin
62256: LD_INT 0
62258: PPUSH
// result := array union element ;
62259: LD_ADDR_VAR 0 3
62263: PUSH
62264: LD_VAR 0 1
62268: PUSH
62269: LD_VAR 0 2
62273: UNION
62274: ST_TO_ADDR
// end ;
62275: LD_VAR 0 3
62279: RET
// export function GetBehemoths ( side ) ; begin
62280: LD_INT 0
62282: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62283: LD_ADDR_VAR 0 2
62287: PUSH
62288: LD_INT 22
62290: PUSH
62291: LD_VAR 0 1
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 31
62302: PUSH
62303: LD_INT 25
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PPUSH
62314: CALL_OW 69
62318: ST_TO_ADDR
// end ;
62319: LD_VAR 0 2
62323: RET
// export function Shuffle ( array ) ; var i , index ; begin
62324: LD_INT 0
62326: PPUSH
62327: PPUSH
62328: PPUSH
// result := [ ] ;
62329: LD_ADDR_VAR 0 2
62333: PUSH
62334: EMPTY
62335: ST_TO_ADDR
// if not array then
62336: LD_VAR 0 1
62340: NOT
62341: IFFALSE 62345
// exit ;
62343: GO 62444
// Randomize ;
62345: CALL_OW 10
// for i = array downto 1 do
62349: LD_ADDR_VAR 0 3
62353: PUSH
62354: DOUBLE
62355: LD_VAR 0 1
62359: INC
62360: ST_TO_ADDR
62361: LD_INT 1
62363: PUSH
62364: FOR_DOWNTO
62365: IFFALSE 62442
// begin index := rand ( 1 , array ) ;
62367: LD_ADDR_VAR 0 4
62371: PUSH
62372: LD_INT 1
62374: PPUSH
62375: LD_VAR 0 1
62379: PPUSH
62380: CALL_OW 12
62384: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62385: LD_ADDR_VAR 0 2
62389: PUSH
62390: LD_VAR 0 2
62394: PPUSH
62395: LD_VAR 0 2
62399: PUSH
62400: LD_INT 1
62402: PLUS
62403: PPUSH
62404: LD_VAR 0 1
62408: PUSH
62409: LD_VAR 0 4
62413: ARRAY
62414: PPUSH
62415: CALL_OW 2
62419: ST_TO_ADDR
// array := Delete ( array , index ) ;
62420: LD_ADDR_VAR 0 1
62424: PUSH
62425: LD_VAR 0 1
62429: PPUSH
62430: LD_VAR 0 4
62434: PPUSH
62435: CALL_OW 3
62439: ST_TO_ADDR
// end ;
62440: GO 62364
62442: POP
62443: POP
// end ;
62444: LD_VAR 0 2
62448: RET
// export function GetBaseMaterials ( base ) ; begin
62449: LD_INT 0
62451: PPUSH
// result := [ 0 , 0 , 0 ] ;
62452: LD_ADDR_VAR 0 2
62456: PUSH
62457: LD_INT 0
62459: PUSH
62460: LD_INT 0
62462: PUSH
62463: LD_INT 0
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: LIST
62470: ST_TO_ADDR
// if not base then
62471: LD_VAR 0 1
62475: NOT
62476: IFFALSE 62480
// exit ;
62478: GO 62529
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62480: LD_ADDR_VAR 0 2
62484: PUSH
62485: LD_VAR 0 1
62489: PPUSH
62490: LD_INT 1
62492: PPUSH
62493: CALL_OW 275
62497: PUSH
62498: LD_VAR 0 1
62502: PPUSH
62503: LD_INT 2
62505: PPUSH
62506: CALL_OW 275
62510: PUSH
62511: LD_VAR 0 1
62515: PPUSH
62516: LD_INT 3
62518: PPUSH
62519: CALL_OW 275
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: LIST
62528: ST_TO_ADDR
// end ; end_of_file
62529: LD_VAR 0 2
62533: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
62534: GO 62536
62536: DISABLE
// begin ru_radar := 98 ;
62537: LD_ADDR_EXP 29
62541: PUSH
62542: LD_INT 98
62544: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
62545: LD_ADDR_EXP 30
62549: PUSH
62550: LD_INT 89
62552: ST_TO_ADDR
// us_hack := 99 ;
62553: LD_ADDR_EXP 31
62557: PUSH
62558: LD_INT 99
62560: ST_TO_ADDR
// us_artillery := 97 ;
62561: LD_ADDR_EXP 32
62565: PUSH
62566: LD_INT 97
62568: ST_TO_ADDR
// ar_bio_bomb := 91 ;
62569: LD_ADDR_EXP 33
62573: PUSH
62574: LD_INT 91
62576: ST_TO_ADDR
// end ; end_of_file
62577: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
62578: LD_INT 0
62580: PPUSH
62581: PPUSH
// skirmish := false ;
62582: LD_ADDR_EXP 34
62586: PUSH
62587: LD_INT 0
62589: ST_TO_ADDR
// debug_mc := false ;
62590: LD_ADDR_EXP 35
62594: PUSH
62595: LD_INT 0
62597: ST_TO_ADDR
// mc_bases := [ ] ;
62598: LD_ADDR_EXP 36
62602: PUSH
62603: EMPTY
62604: ST_TO_ADDR
// mc_sides := [ ] ;
62605: LD_ADDR_EXP 62
62609: PUSH
62610: EMPTY
62611: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
62612: LD_ADDR_EXP 37
62616: PUSH
62617: EMPTY
62618: ST_TO_ADDR
// mc_building_repairs := [ ] ;
62619: LD_ADDR_EXP 38
62623: PUSH
62624: EMPTY
62625: ST_TO_ADDR
// mc_need_heal := [ ] ;
62626: LD_ADDR_EXP 39
62630: PUSH
62631: EMPTY
62632: ST_TO_ADDR
// mc_healers := [ ] ;
62633: LD_ADDR_EXP 40
62637: PUSH
62638: EMPTY
62639: ST_TO_ADDR
// mc_build_list := [ ] ;
62640: LD_ADDR_EXP 41
62644: PUSH
62645: EMPTY
62646: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
62647: LD_ADDR_EXP 68
62651: PUSH
62652: EMPTY
62653: ST_TO_ADDR
// mc_builders := [ ] ;
62654: LD_ADDR_EXP 42
62658: PUSH
62659: EMPTY
62660: ST_TO_ADDR
// mc_construct_list := [ ] ;
62661: LD_ADDR_EXP 43
62665: PUSH
62666: EMPTY
62667: ST_TO_ADDR
// mc_turret_list := [ ] ;
62668: LD_ADDR_EXP 44
62672: PUSH
62673: EMPTY
62674: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
62675: LD_ADDR_EXP 45
62679: PUSH
62680: EMPTY
62681: ST_TO_ADDR
// mc_miners := [ ] ;
62682: LD_ADDR_EXP 50
62686: PUSH
62687: EMPTY
62688: ST_TO_ADDR
// mc_mines := [ ] ;
62689: LD_ADDR_EXP 49
62693: PUSH
62694: EMPTY
62695: ST_TO_ADDR
// mc_minefields := [ ] ;
62696: LD_ADDR_EXP 51
62700: PUSH
62701: EMPTY
62702: ST_TO_ADDR
// mc_crates := [ ] ;
62703: LD_ADDR_EXP 52
62707: PUSH
62708: EMPTY
62709: ST_TO_ADDR
// mc_crates_collector := [ ] ;
62710: LD_ADDR_EXP 53
62714: PUSH
62715: EMPTY
62716: ST_TO_ADDR
// mc_crates_area := [ ] ;
62717: LD_ADDR_EXP 54
62721: PUSH
62722: EMPTY
62723: ST_TO_ADDR
// mc_vehicles := [ ] ;
62724: LD_ADDR_EXP 55
62728: PUSH
62729: EMPTY
62730: ST_TO_ADDR
// mc_attack := [ ] ;
62731: LD_ADDR_EXP 56
62735: PUSH
62736: EMPTY
62737: ST_TO_ADDR
// mc_produce := [ ] ;
62738: LD_ADDR_EXP 57
62742: PUSH
62743: EMPTY
62744: ST_TO_ADDR
// mc_defender := [ ] ;
62745: LD_ADDR_EXP 58
62749: PUSH
62750: EMPTY
62751: ST_TO_ADDR
// mc_parking := [ ] ;
62752: LD_ADDR_EXP 60
62756: PUSH
62757: EMPTY
62758: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
62759: LD_ADDR_EXP 46
62763: PUSH
62764: EMPTY
62765: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
62766: LD_ADDR_EXP 48
62770: PUSH
62771: EMPTY
62772: ST_TO_ADDR
// mc_scan := [ ] ;
62773: LD_ADDR_EXP 59
62777: PUSH
62778: EMPTY
62779: ST_TO_ADDR
// mc_scan_area := [ ] ;
62780: LD_ADDR_EXP 61
62784: PUSH
62785: EMPTY
62786: ST_TO_ADDR
// mc_tech := [ ] ;
62787: LD_ADDR_EXP 63
62791: PUSH
62792: EMPTY
62793: ST_TO_ADDR
// mc_class := [ ] ;
62794: LD_ADDR_EXP 77
62798: PUSH
62799: EMPTY
62800: ST_TO_ADDR
// mc_class_case_use := [ ] ;
62801: LD_ADDR_EXP 78
62805: PUSH
62806: EMPTY
62807: ST_TO_ADDR
// end ;
62808: LD_VAR 0 1
62812: RET
// export function MC_Kill ( base ) ; begin
62813: LD_INT 0
62815: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
62816: LD_ADDR_EXP 36
62820: PUSH
62821: LD_EXP 36
62825: PPUSH
62826: LD_VAR 0 1
62830: PPUSH
62831: EMPTY
62832: PPUSH
62833: CALL_OW 1
62837: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
62838: LD_ADDR_EXP 37
62842: PUSH
62843: LD_EXP 37
62847: PPUSH
62848: LD_VAR 0 1
62852: PPUSH
62853: EMPTY
62854: PPUSH
62855: CALL_OW 1
62859: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
62860: LD_ADDR_EXP 38
62864: PUSH
62865: LD_EXP 38
62869: PPUSH
62870: LD_VAR 0 1
62874: PPUSH
62875: EMPTY
62876: PPUSH
62877: CALL_OW 1
62881: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
62882: LD_ADDR_EXP 39
62886: PUSH
62887: LD_EXP 39
62891: PPUSH
62892: LD_VAR 0 1
62896: PPUSH
62897: EMPTY
62898: PPUSH
62899: CALL_OW 1
62903: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
62904: LD_ADDR_EXP 40
62908: PUSH
62909: LD_EXP 40
62913: PPUSH
62914: LD_VAR 0 1
62918: PPUSH
62919: EMPTY
62920: PPUSH
62921: CALL_OW 1
62925: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
62926: LD_ADDR_EXP 41
62930: PUSH
62931: LD_EXP 41
62935: PPUSH
62936: LD_VAR 0 1
62940: PPUSH
62941: EMPTY
62942: PPUSH
62943: CALL_OW 1
62947: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
62948: LD_ADDR_EXP 42
62952: PUSH
62953: LD_EXP 42
62957: PPUSH
62958: LD_VAR 0 1
62962: PPUSH
62963: EMPTY
62964: PPUSH
62965: CALL_OW 1
62969: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
62970: LD_ADDR_EXP 43
62974: PUSH
62975: LD_EXP 43
62979: PPUSH
62980: LD_VAR 0 1
62984: PPUSH
62985: EMPTY
62986: PPUSH
62987: CALL_OW 1
62991: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
62992: LD_ADDR_EXP 44
62996: PUSH
62997: LD_EXP 44
63001: PPUSH
63002: LD_VAR 0 1
63006: PPUSH
63007: EMPTY
63008: PPUSH
63009: CALL_OW 1
63013: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
63014: LD_ADDR_EXP 45
63018: PUSH
63019: LD_EXP 45
63023: PPUSH
63024: LD_VAR 0 1
63028: PPUSH
63029: EMPTY
63030: PPUSH
63031: CALL_OW 1
63035: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
63036: LD_ADDR_EXP 46
63040: PUSH
63041: LD_EXP 46
63045: PPUSH
63046: LD_VAR 0 1
63050: PPUSH
63051: EMPTY
63052: PPUSH
63053: CALL_OW 1
63057: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
63058: LD_ADDR_EXP 47
63062: PUSH
63063: LD_EXP 47
63067: PPUSH
63068: LD_VAR 0 1
63072: PPUSH
63073: LD_INT 0
63075: PPUSH
63076: CALL_OW 1
63080: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
63081: LD_ADDR_EXP 48
63085: PUSH
63086: LD_EXP 48
63090: PPUSH
63091: LD_VAR 0 1
63095: PPUSH
63096: EMPTY
63097: PPUSH
63098: CALL_OW 1
63102: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
63103: LD_ADDR_EXP 49
63107: PUSH
63108: LD_EXP 49
63112: PPUSH
63113: LD_VAR 0 1
63117: PPUSH
63118: EMPTY
63119: PPUSH
63120: CALL_OW 1
63124: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
63125: LD_ADDR_EXP 50
63129: PUSH
63130: LD_EXP 50
63134: PPUSH
63135: LD_VAR 0 1
63139: PPUSH
63140: EMPTY
63141: PPUSH
63142: CALL_OW 1
63146: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
63147: LD_ADDR_EXP 51
63151: PUSH
63152: LD_EXP 51
63156: PPUSH
63157: LD_VAR 0 1
63161: PPUSH
63162: EMPTY
63163: PPUSH
63164: CALL_OW 1
63168: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
63169: LD_ADDR_EXP 52
63173: PUSH
63174: LD_EXP 52
63178: PPUSH
63179: LD_VAR 0 1
63183: PPUSH
63184: EMPTY
63185: PPUSH
63186: CALL_OW 1
63190: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
63191: LD_ADDR_EXP 53
63195: PUSH
63196: LD_EXP 53
63200: PPUSH
63201: LD_VAR 0 1
63205: PPUSH
63206: EMPTY
63207: PPUSH
63208: CALL_OW 1
63212: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
63213: LD_ADDR_EXP 54
63217: PUSH
63218: LD_EXP 54
63222: PPUSH
63223: LD_VAR 0 1
63227: PPUSH
63228: EMPTY
63229: PPUSH
63230: CALL_OW 1
63234: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
63235: LD_ADDR_EXP 55
63239: PUSH
63240: LD_EXP 55
63244: PPUSH
63245: LD_VAR 0 1
63249: PPUSH
63250: EMPTY
63251: PPUSH
63252: CALL_OW 1
63256: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
63257: LD_ADDR_EXP 56
63261: PUSH
63262: LD_EXP 56
63266: PPUSH
63267: LD_VAR 0 1
63271: PPUSH
63272: EMPTY
63273: PPUSH
63274: CALL_OW 1
63278: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
63279: LD_ADDR_EXP 57
63283: PUSH
63284: LD_EXP 57
63288: PPUSH
63289: LD_VAR 0 1
63293: PPUSH
63294: EMPTY
63295: PPUSH
63296: CALL_OW 1
63300: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
63301: LD_ADDR_EXP 58
63305: PUSH
63306: LD_EXP 58
63310: PPUSH
63311: LD_VAR 0 1
63315: PPUSH
63316: EMPTY
63317: PPUSH
63318: CALL_OW 1
63322: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
63323: LD_ADDR_EXP 59
63327: PUSH
63328: LD_EXP 59
63332: PPUSH
63333: LD_VAR 0 1
63337: PPUSH
63338: EMPTY
63339: PPUSH
63340: CALL_OW 1
63344: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
63345: LD_ADDR_EXP 60
63349: PUSH
63350: LD_EXP 60
63354: PPUSH
63355: LD_VAR 0 1
63359: PPUSH
63360: EMPTY
63361: PPUSH
63362: CALL_OW 1
63366: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
63367: LD_ADDR_EXP 61
63371: PUSH
63372: LD_EXP 61
63376: PPUSH
63377: LD_VAR 0 1
63381: PPUSH
63382: EMPTY
63383: PPUSH
63384: CALL_OW 1
63388: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
63389: LD_ADDR_EXP 63
63393: PUSH
63394: LD_EXP 63
63398: PPUSH
63399: LD_VAR 0 1
63403: PPUSH
63404: EMPTY
63405: PPUSH
63406: CALL_OW 1
63410: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
63411: LD_ADDR_EXP 65
63415: PUSH
63416: LD_EXP 65
63420: PPUSH
63421: LD_VAR 0 1
63425: PPUSH
63426: EMPTY
63427: PPUSH
63428: CALL_OW 1
63432: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
63433: LD_ADDR_EXP 66
63437: PUSH
63438: LD_EXP 66
63442: PPUSH
63443: LD_VAR 0 1
63447: PPUSH
63448: EMPTY
63449: PPUSH
63450: CALL_OW 1
63454: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
63455: LD_ADDR_EXP 67
63459: PUSH
63460: LD_EXP 67
63464: PPUSH
63465: LD_VAR 0 1
63469: PPUSH
63470: EMPTY
63471: PPUSH
63472: CALL_OW 1
63476: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
63477: LD_ADDR_EXP 68
63481: PUSH
63482: LD_EXP 68
63486: PPUSH
63487: LD_VAR 0 1
63491: PPUSH
63492: EMPTY
63493: PPUSH
63494: CALL_OW 1
63498: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
63499: LD_ADDR_EXP 69
63503: PUSH
63504: LD_EXP 69
63508: PPUSH
63509: LD_VAR 0 1
63513: PPUSH
63514: EMPTY
63515: PPUSH
63516: CALL_OW 1
63520: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
63521: LD_ADDR_EXP 70
63525: PUSH
63526: LD_EXP 70
63530: PPUSH
63531: LD_VAR 0 1
63535: PPUSH
63536: EMPTY
63537: PPUSH
63538: CALL_OW 1
63542: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
63543: LD_ADDR_EXP 71
63547: PUSH
63548: LD_EXP 71
63552: PPUSH
63553: LD_VAR 0 1
63557: PPUSH
63558: EMPTY
63559: PPUSH
63560: CALL_OW 1
63564: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
63565: LD_ADDR_EXP 72
63569: PUSH
63570: LD_EXP 72
63574: PPUSH
63575: LD_VAR 0 1
63579: PPUSH
63580: EMPTY
63581: PPUSH
63582: CALL_OW 1
63586: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
63587: LD_ADDR_EXP 73
63591: PUSH
63592: LD_EXP 73
63596: PPUSH
63597: LD_VAR 0 1
63601: PPUSH
63602: EMPTY
63603: PPUSH
63604: CALL_OW 1
63608: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
63609: LD_ADDR_EXP 74
63613: PUSH
63614: LD_EXP 74
63618: PPUSH
63619: LD_VAR 0 1
63623: PPUSH
63624: EMPTY
63625: PPUSH
63626: CALL_OW 1
63630: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
63631: LD_ADDR_EXP 75
63635: PUSH
63636: LD_EXP 75
63640: PPUSH
63641: LD_VAR 0 1
63645: PPUSH
63646: EMPTY
63647: PPUSH
63648: CALL_OW 1
63652: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
63653: LD_ADDR_EXP 76
63657: PUSH
63658: LD_EXP 76
63662: PPUSH
63663: LD_VAR 0 1
63667: PPUSH
63668: EMPTY
63669: PPUSH
63670: CALL_OW 1
63674: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
63675: LD_ADDR_EXP 77
63679: PUSH
63680: LD_EXP 77
63684: PPUSH
63685: LD_VAR 0 1
63689: PPUSH
63690: EMPTY
63691: PPUSH
63692: CALL_OW 1
63696: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
63697: LD_ADDR_EXP 78
63701: PUSH
63702: LD_EXP 78
63706: PPUSH
63707: LD_VAR 0 1
63711: PPUSH
63712: LD_INT 0
63714: PPUSH
63715: CALL_OW 1
63719: ST_TO_ADDR
// end ;
63720: LD_VAR 0 2
63724: RET
// export function MC_Add ( side , units ) ; var base ; begin
63725: LD_INT 0
63727: PPUSH
63728: PPUSH
// base := mc_bases + 1 ;
63729: LD_ADDR_VAR 0 4
63733: PUSH
63734: LD_EXP 36
63738: PUSH
63739: LD_INT 1
63741: PLUS
63742: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
63743: LD_ADDR_EXP 62
63747: PUSH
63748: LD_EXP 62
63752: PPUSH
63753: LD_VAR 0 4
63757: PPUSH
63758: LD_VAR 0 1
63762: PPUSH
63763: CALL_OW 1
63767: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
63768: LD_ADDR_EXP 36
63772: PUSH
63773: LD_EXP 36
63777: PPUSH
63778: LD_VAR 0 4
63782: PPUSH
63783: LD_VAR 0 2
63787: PPUSH
63788: CALL_OW 1
63792: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
63793: LD_ADDR_EXP 37
63797: PUSH
63798: LD_EXP 37
63802: PPUSH
63803: LD_VAR 0 4
63807: PPUSH
63808: EMPTY
63809: PPUSH
63810: CALL_OW 1
63814: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
63815: LD_ADDR_EXP 38
63819: PUSH
63820: LD_EXP 38
63824: PPUSH
63825: LD_VAR 0 4
63829: PPUSH
63830: EMPTY
63831: PPUSH
63832: CALL_OW 1
63836: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
63837: LD_ADDR_EXP 39
63841: PUSH
63842: LD_EXP 39
63846: PPUSH
63847: LD_VAR 0 4
63851: PPUSH
63852: EMPTY
63853: PPUSH
63854: CALL_OW 1
63858: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
63859: LD_ADDR_EXP 40
63863: PUSH
63864: LD_EXP 40
63868: PPUSH
63869: LD_VAR 0 4
63873: PPUSH
63874: EMPTY
63875: PPUSH
63876: CALL_OW 1
63880: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
63881: LD_ADDR_EXP 41
63885: PUSH
63886: LD_EXP 41
63890: PPUSH
63891: LD_VAR 0 4
63895: PPUSH
63896: EMPTY
63897: PPUSH
63898: CALL_OW 1
63902: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
63903: LD_ADDR_EXP 42
63907: PUSH
63908: LD_EXP 42
63912: PPUSH
63913: LD_VAR 0 4
63917: PPUSH
63918: EMPTY
63919: PPUSH
63920: CALL_OW 1
63924: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
63925: LD_ADDR_EXP 43
63929: PUSH
63930: LD_EXP 43
63934: PPUSH
63935: LD_VAR 0 4
63939: PPUSH
63940: EMPTY
63941: PPUSH
63942: CALL_OW 1
63946: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
63947: LD_ADDR_EXP 44
63951: PUSH
63952: LD_EXP 44
63956: PPUSH
63957: LD_VAR 0 4
63961: PPUSH
63962: EMPTY
63963: PPUSH
63964: CALL_OW 1
63968: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
63969: LD_ADDR_EXP 45
63973: PUSH
63974: LD_EXP 45
63978: PPUSH
63979: LD_VAR 0 4
63983: PPUSH
63984: EMPTY
63985: PPUSH
63986: CALL_OW 1
63990: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
63991: LD_ADDR_EXP 46
63995: PUSH
63996: LD_EXP 46
64000: PPUSH
64001: LD_VAR 0 4
64005: PPUSH
64006: EMPTY
64007: PPUSH
64008: CALL_OW 1
64012: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
64013: LD_ADDR_EXP 47
64017: PUSH
64018: LD_EXP 47
64022: PPUSH
64023: LD_VAR 0 4
64027: PPUSH
64028: LD_INT 0
64030: PPUSH
64031: CALL_OW 1
64035: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
64036: LD_ADDR_EXP 48
64040: PUSH
64041: LD_EXP 48
64045: PPUSH
64046: LD_VAR 0 4
64050: PPUSH
64051: EMPTY
64052: PPUSH
64053: CALL_OW 1
64057: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
64058: LD_ADDR_EXP 49
64062: PUSH
64063: LD_EXP 49
64067: PPUSH
64068: LD_VAR 0 4
64072: PPUSH
64073: EMPTY
64074: PPUSH
64075: CALL_OW 1
64079: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
64080: LD_ADDR_EXP 50
64084: PUSH
64085: LD_EXP 50
64089: PPUSH
64090: LD_VAR 0 4
64094: PPUSH
64095: EMPTY
64096: PPUSH
64097: CALL_OW 1
64101: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
64102: LD_ADDR_EXP 51
64106: PUSH
64107: LD_EXP 51
64111: PPUSH
64112: LD_VAR 0 4
64116: PPUSH
64117: EMPTY
64118: PPUSH
64119: CALL_OW 1
64123: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
64124: LD_ADDR_EXP 52
64128: PUSH
64129: LD_EXP 52
64133: PPUSH
64134: LD_VAR 0 4
64138: PPUSH
64139: EMPTY
64140: PPUSH
64141: CALL_OW 1
64145: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
64146: LD_ADDR_EXP 53
64150: PUSH
64151: LD_EXP 53
64155: PPUSH
64156: LD_VAR 0 4
64160: PPUSH
64161: EMPTY
64162: PPUSH
64163: CALL_OW 1
64167: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
64168: LD_ADDR_EXP 54
64172: PUSH
64173: LD_EXP 54
64177: PPUSH
64178: LD_VAR 0 4
64182: PPUSH
64183: EMPTY
64184: PPUSH
64185: CALL_OW 1
64189: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
64190: LD_ADDR_EXP 55
64194: PUSH
64195: LD_EXP 55
64199: PPUSH
64200: LD_VAR 0 4
64204: PPUSH
64205: EMPTY
64206: PPUSH
64207: CALL_OW 1
64211: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
64212: LD_ADDR_EXP 56
64216: PUSH
64217: LD_EXP 56
64221: PPUSH
64222: LD_VAR 0 4
64226: PPUSH
64227: EMPTY
64228: PPUSH
64229: CALL_OW 1
64233: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
64234: LD_ADDR_EXP 57
64238: PUSH
64239: LD_EXP 57
64243: PPUSH
64244: LD_VAR 0 4
64248: PPUSH
64249: EMPTY
64250: PPUSH
64251: CALL_OW 1
64255: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
64256: LD_ADDR_EXP 58
64260: PUSH
64261: LD_EXP 58
64265: PPUSH
64266: LD_VAR 0 4
64270: PPUSH
64271: EMPTY
64272: PPUSH
64273: CALL_OW 1
64277: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
64278: LD_ADDR_EXP 59
64282: PUSH
64283: LD_EXP 59
64287: PPUSH
64288: LD_VAR 0 4
64292: PPUSH
64293: EMPTY
64294: PPUSH
64295: CALL_OW 1
64299: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
64300: LD_ADDR_EXP 60
64304: PUSH
64305: LD_EXP 60
64309: PPUSH
64310: LD_VAR 0 4
64314: PPUSH
64315: EMPTY
64316: PPUSH
64317: CALL_OW 1
64321: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
64322: LD_ADDR_EXP 61
64326: PUSH
64327: LD_EXP 61
64331: PPUSH
64332: LD_VAR 0 4
64336: PPUSH
64337: EMPTY
64338: PPUSH
64339: CALL_OW 1
64343: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
64344: LD_ADDR_EXP 63
64348: PUSH
64349: LD_EXP 63
64353: PPUSH
64354: LD_VAR 0 4
64358: PPUSH
64359: EMPTY
64360: PPUSH
64361: CALL_OW 1
64365: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
64366: LD_ADDR_EXP 65
64370: PUSH
64371: LD_EXP 65
64375: PPUSH
64376: LD_VAR 0 4
64380: PPUSH
64381: EMPTY
64382: PPUSH
64383: CALL_OW 1
64387: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
64388: LD_ADDR_EXP 66
64392: PUSH
64393: LD_EXP 66
64397: PPUSH
64398: LD_VAR 0 4
64402: PPUSH
64403: EMPTY
64404: PPUSH
64405: CALL_OW 1
64409: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
64410: LD_ADDR_EXP 67
64414: PUSH
64415: LD_EXP 67
64419: PPUSH
64420: LD_VAR 0 4
64424: PPUSH
64425: EMPTY
64426: PPUSH
64427: CALL_OW 1
64431: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
64432: LD_ADDR_EXP 68
64436: PUSH
64437: LD_EXP 68
64441: PPUSH
64442: LD_VAR 0 4
64446: PPUSH
64447: EMPTY
64448: PPUSH
64449: CALL_OW 1
64453: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
64454: LD_ADDR_EXP 69
64458: PUSH
64459: LD_EXP 69
64463: PPUSH
64464: LD_VAR 0 4
64468: PPUSH
64469: EMPTY
64470: PPUSH
64471: CALL_OW 1
64475: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
64476: LD_ADDR_EXP 70
64480: PUSH
64481: LD_EXP 70
64485: PPUSH
64486: LD_VAR 0 4
64490: PPUSH
64491: EMPTY
64492: PPUSH
64493: CALL_OW 1
64497: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
64498: LD_ADDR_EXP 71
64502: PUSH
64503: LD_EXP 71
64507: PPUSH
64508: LD_VAR 0 4
64512: PPUSH
64513: EMPTY
64514: PPUSH
64515: CALL_OW 1
64519: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
64520: LD_ADDR_EXP 72
64524: PUSH
64525: LD_EXP 72
64529: PPUSH
64530: LD_VAR 0 4
64534: PPUSH
64535: EMPTY
64536: PPUSH
64537: CALL_OW 1
64541: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
64542: LD_ADDR_EXP 73
64546: PUSH
64547: LD_EXP 73
64551: PPUSH
64552: LD_VAR 0 4
64556: PPUSH
64557: EMPTY
64558: PPUSH
64559: CALL_OW 1
64563: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
64564: LD_ADDR_EXP 74
64568: PUSH
64569: LD_EXP 74
64573: PPUSH
64574: LD_VAR 0 4
64578: PPUSH
64579: EMPTY
64580: PPUSH
64581: CALL_OW 1
64585: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
64586: LD_ADDR_EXP 75
64590: PUSH
64591: LD_EXP 75
64595: PPUSH
64596: LD_VAR 0 4
64600: PPUSH
64601: EMPTY
64602: PPUSH
64603: CALL_OW 1
64607: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
64608: LD_ADDR_EXP 76
64612: PUSH
64613: LD_EXP 76
64617: PPUSH
64618: LD_VAR 0 4
64622: PPUSH
64623: EMPTY
64624: PPUSH
64625: CALL_OW 1
64629: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
64630: LD_ADDR_EXP 77
64634: PUSH
64635: LD_EXP 77
64639: PPUSH
64640: LD_VAR 0 4
64644: PPUSH
64645: EMPTY
64646: PPUSH
64647: CALL_OW 1
64651: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
64652: LD_ADDR_EXP 78
64656: PUSH
64657: LD_EXP 78
64661: PPUSH
64662: LD_VAR 0 4
64666: PPUSH
64667: LD_INT 0
64669: PPUSH
64670: CALL_OW 1
64674: ST_TO_ADDR
// result := base ;
64675: LD_ADDR_VAR 0 3
64679: PUSH
64680: LD_VAR 0 4
64684: ST_TO_ADDR
// end ;
64685: LD_VAR 0 3
64689: RET
// export function MC_Start ( ) ; var i ; begin
64690: LD_INT 0
64692: PPUSH
64693: PPUSH
// for i = 1 to mc_bases do
64694: LD_ADDR_VAR 0 2
64698: PUSH
64699: DOUBLE
64700: LD_INT 1
64702: DEC
64703: ST_TO_ADDR
64704: LD_EXP 36
64708: PUSH
64709: FOR_TO
64710: IFFALSE 65787
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
64712: LD_ADDR_EXP 36
64716: PUSH
64717: LD_EXP 36
64721: PPUSH
64722: LD_VAR 0 2
64726: PPUSH
64727: LD_EXP 36
64731: PUSH
64732: LD_VAR 0 2
64736: ARRAY
64737: PUSH
64738: LD_INT 0
64740: DIFF
64741: PPUSH
64742: CALL_OW 1
64746: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
64747: LD_ADDR_EXP 37
64751: PUSH
64752: LD_EXP 37
64756: PPUSH
64757: LD_VAR 0 2
64761: PPUSH
64762: EMPTY
64763: PPUSH
64764: CALL_OW 1
64768: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
64769: LD_ADDR_EXP 38
64773: PUSH
64774: LD_EXP 38
64778: PPUSH
64779: LD_VAR 0 2
64783: PPUSH
64784: EMPTY
64785: PPUSH
64786: CALL_OW 1
64790: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
64791: LD_ADDR_EXP 39
64795: PUSH
64796: LD_EXP 39
64800: PPUSH
64801: LD_VAR 0 2
64805: PPUSH
64806: EMPTY
64807: PPUSH
64808: CALL_OW 1
64812: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
64813: LD_ADDR_EXP 40
64817: PUSH
64818: LD_EXP 40
64822: PPUSH
64823: LD_VAR 0 2
64827: PPUSH
64828: EMPTY
64829: PUSH
64830: EMPTY
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PPUSH
64836: CALL_OW 1
64840: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
64841: LD_ADDR_EXP 41
64845: PUSH
64846: LD_EXP 41
64850: PPUSH
64851: LD_VAR 0 2
64855: PPUSH
64856: EMPTY
64857: PPUSH
64858: CALL_OW 1
64862: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
64863: LD_ADDR_EXP 68
64867: PUSH
64868: LD_EXP 68
64872: PPUSH
64873: LD_VAR 0 2
64877: PPUSH
64878: EMPTY
64879: PPUSH
64880: CALL_OW 1
64884: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
64885: LD_ADDR_EXP 42
64889: PUSH
64890: LD_EXP 42
64894: PPUSH
64895: LD_VAR 0 2
64899: PPUSH
64900: EMPTY
64901: PPUSH
64902: CALL_OW 1
64906: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
64907: LD_ADDR_EXP 43
64911: PUSH
64912: LD_EXP 43
64916: PPUSH
64917: LD_VAR 0 2
64921: PPUSH
64922: EMPTY
64923: PPUSH
64924: CALL_OW 1
64928: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
64929: LD_ADDR_EXP 44
64933: PUSH
64934: LD_EXP 44
64938: PPUSH
64939: LD_VAR 0 2
64943: PPUSH
64944: LD_EXP 36
64948: PUSH
64949: LD_VAR 0 2
64953: ARRAY
64954: PPUSH
64955: LD_INT 2
64957: PUSH
64958: LD_INT 30
64960: PUSH
64961: LD_INT 32
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: LD_INT 30
64970: PUSH
64971: LD_INT 33
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: LIST
64982: PPUSH
64983: CALL_OW 72
64987: PPUSH
64988: CALL_OW 1
64992: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
64993: LD_ADDR_EXP 45
64997: PUSH
64998: LD_EXP 45
65002: PPUSH
65003: LD_VAR 0 2
65007: PPUSH
65008: LD_EXP 36
65012: PUSH
65013: LD_VAR 0 2
65017: ARRAY
65018: PPUSH
65019: LD_INT 2
65021: PUSH
65022: LD_INT 30
65024: PUSH
65025: LD_INT 32
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: LD_INT 30
65034: PUSH
65035: LD_INT 31
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 58
65049: PUSH
65050: EMPTY
65051: LIST
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PPUSH
65057: CALL_OW 72
65061: PPUSH
65062: CALL_OW 1
65066: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
65067: LD_ADDR_EXP 46
65071: PUSH
65072: LD_EXP 46
65076: PPUSH
65077: LD_VAR 0 2
65081: PPUSH
65082: EMPTY
65083: PPUSH
65084: CALL_OW 1
65088: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
65089: LD_ADDR_EXP 50
65093: PUSH
65094: LD_EXP 50
65098: PPUSH
65099: LD_VAR 0 2
65103: PPUSH
65104: EMPTY
65105: PPUSH
65106: CALL_OW 1
65110: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
65111: LD_ADDR_EXP 49
65115: PUSH
65116: LD_EXP 49
65120: PPUSH
65121: LD_VAR 0 2
65125: PPUSH
65126: EMPTY
65127: PPUSH
65128: CALL_OW 1
65132: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
65133: LD_ADDR_EXP 51
65137: PUSH
65138: LD_EXP 51
65142: PPUSH
65143: LD_VAR 0 2
65147: PPUSH
65148: EMPTY
65149: PPUSH
65150: CALL_OW 1
65154: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
65155: LD_ADDR_EXP 52
65159: PUSH
65160: LD_EXP 52
65164: PPUSH
65165: LD_VAR 0 2
65169: PPUSH
65170: EMPTY
65171: PPUSH
65172: CALL_OW 1
65176: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
65177: LD_ADDR_EXP 53
65181: PUSH
65182: LD_EXP 53
65186: PPUSH
65187: LD_VAR 0 2
65191: PPUSH
65192: EMPTY
65193: PPUSH
65194: CALL_OW 1
65198: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
65199: LD_ADDR_EXP 54
65203: PUSH
65204: LD_EXP 54
65208: PPUSH
65209: LD_VAR 0 2
65213: PPUSH
65214: EMPTY
65215: PPUSH
65216: CALL_OW 1
65220: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
65221: LD_ADDR_EXP 55
65225: PUSH
65226: LD_EXP 55
65230: PPUSH
65231: LD_VAR 0 2
65235: PPUSH
65236: EMPTY
65237: PPUSH
65238: CALL_OW 1
65242: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
65243: LD_ADDR_EXP 56
65247: PUSH
65248: LD_EXP 56
65252: PPUSH
65253: LD_VAR 0 2
65257: PPUSH
65258: EMPTY
65259: PPUSH
65260: CALL_OW 1
65264: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
65265: LD_ADDR_EXP 57
65269: PUSH
65270: LD_EXP 57
65274: PPUSH
65275: LD_VAR 0 2
65279: PPUSH
65280: EMPTY
65281: PPUSH
65282: CALL_OW 1
65286: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
65287: LD_ADDR_EXP 58
65291: PUSH
65292: LD_EXP 58
65296: PPUSH
65297: LD_VAR 0 2
65301: PPUSH
65302: EMPTY
65303: PPUSH
65304: CALL_OW 1
65308: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
65309: LD_ADDR_EXP 47
65313: PUSH
65314: LD_EXP 47
65318: PPUSH
65319: LD_VAR 0 2
65323: PPUSH
65324: LD_INT 0
65326: PPUSH
65327: CALL_OW 1
65331: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
65332: LD_ADDR_EXP 60
65336: PUSH
65337: LD_EXP 60
65341: PPUSH
65342: LD_VAR 0 2
65346: PPUSH
65347: LD_INT 0
65349: PPUSH
65350: CALL_OW 1
65354: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
65355: LD_ADDR_EXP 48
65359: PUSH
65360: LD_EXP 48
65364: PPUSH
65365: LD_VAR 0 2
65369: PPUSH
65370: EMPTY
65371: PPUSH
65372: CALL_OW 1
65376: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
65377: LD_ADDR_EXP 59
65381: PUSH
65382: LD_EXP 59
65386: PPUSH
65387: LD_VAR 0 2
65391: PPUSH
65392: LD_INT 0
65394: PPUSH
65395: CALL_OW 1
65399: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
65400: LD_ADDR_EXP 61
65404: PUSH
65405: LD_EXP 61
65409: PPUSH
65410: LD_VAR 0 2
65414: PPUSH
65415: EMPTY
65416: PPUSH
65417: CALL_OW 1
65421: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
65422: LD_ADDR_EXP 64
65426: PUSH
65427: LD_EXP 64
65431: PPUSH
65432: LD_VAR 0 2
65436: PPUSH
65437: LD_INT 0
65439: PPUSH
65440: CALL_OW 1
65444: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
65445: LD_ADDR_EXP 65
65449: PUSH
65450: LD_EXP 65
65454: PPUSH
65455: LD_VAR 0 2
65459: PPUSH
65460: EMPTY
65461: PPUSH
65462: CALL_OW 1
65466: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
65467: LD_ADDR_EXP 66
65471: PUSH
65472: LD_EXP 66
65476: PPUSH
65477: LD_VAR 0 2
65481: PPUSH
65482: EMPTY
65483: PPUSH
65484: CALL_OW 1
65488: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
65489: LD_ADDR_EXP 67
65493: PUSH
65494: LD_EXP 67
65498: PPUSH
65499: LD_VAR 0 2
65503: PPUSH
65504: EMPTY
65505: PPUSH
65506: CALL_OW 1
65510: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
65511: LD_ADDR_EXP 69
65515: PUSH
65516: LD_EXP 69
65520: PPUSH
65521: LD_VAR 0 2
65525: PPUSH
65526: LD_EXP 36
65530: PUSH
65531: LD_VAR 0 2
65535: ARRAY
65536: PPUSH
65537: LD_INT 2
65539: PUSH
65540: LD_INT 30
65542: PUSH
65543: LD_INT 6
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 30
65552: PUSH
65553: LD_INT 7
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 30
65562: PUSH
65563: LD_INT 8
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: PPUSH
65576: CALL_OW 72
65580: PPUSH
65581: CALL_OW 1
65585: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
65586: LD_ADDR_EXP 70
65590: PUSH
65591: LD_EXP 70
65595: PPUSH
65596: LD_VAR 0 2
65600: PPUSH
65601: EMPTY
65602: PPUSH
65603: CALL_OW 1
65607: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
65608: LD_ADDR_EXP 71
65612: PUSH
65613: LD_EXP 71
65617: PPUSH
65618: LD_VAR 0 2
65622: PPUSH
65623: EMPTY
65624: PPUSH
65625: CALL_OW 1
65629: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
65630: LD_ADDR_EXP 72
65634: PUSH
65635: LD_EXP 72
65639: PPUSH
65640: LD_VAR 0 2
65644: PPUSH
65645: EMPTY
65646: PPUSH
65647: CALL_OW 1
65651: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
65652: LD_ADDR_EXP 73
65656: PUSH
65657: LD_EXP 73
65661: PPUSH
65662: LD_VAR 0 2
65666: PPUSH
65667: EMPTY
65668: PPUSH
65669: CALL_OW 1
65673: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
65674: LD_ADDR_EXP 74
65678: PUSH
65679: LD_EXP 74
65683: PPUSH
65684: LD_VAR 0 2
65688: PPUSH
65689: EMPTY
65690: PPUSH
65691: CALL_OW 1
65695: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
65696: LD_ADDR_EXP 75
65700: PUSH
65701: LD_EXP 75
65705: PPUSH
65706: LD_VAR 0 2
65710: PPUSH
65711: EMPTY
65712: PPUSH
65713: CALL_OW 1
65717: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
65718: LD_ADDR_EXP 76
65722: PUSH
65723: LD_EXP 76
65727: PPUSH
65728: LD_VAR 0 2
65732: PPUSH
65733: EMPTY
65734: PPUSH
65735: CALL_OW 1
65739: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
65740: LD_ADDR_EXP 77
65744: PUSH
65745: LD_EXP 77
65749: PPUSH
65750: LD_VAR 0 2
65754: PPUSH
65755: EMPTY
65756: PPUSH
65757: CALL_OW 1
65761: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
65762: LD_ADDR_EXP 78
65766: PUSH
65767: LD_EXP 78
65771: PPUSH
65772: LD_VAR 0 2
65776: PPUSH
65777: LD_INT 0
65779: PPUSH
65780: CALL_OW 1
65784: ST_TO_ADDR
// end ;
65785: GO 64709
65787: POP
65788: POP
// MC_InitSides ( ) ;
65789: CALL 66075 0 0
// MC_InitResearch ( ) ;
65793: CALL 65814 0 0
// CustomInitMacro ( ) ;
65797: CALL 1407 0 0
// skirmish := true ;
65801: LD_ADDR_EXP 34
65805: PUSH
65806: LD_INT 1
65808: ST_TO_ADDR
// end ;
65809: LD_VAR 0 1
65813: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
65814: LD_INT 0
65816: PPUSH
65817: PPUSH
65818: PPUSH
65819: PPUSH
65820: PPUSH
65821: PPUSH
// if not mc_bases then
65822: LD_EXP 36
65826: NOT
65827: IFFALSE 65831
// exit ;
65829: GO 66070
// for i = 1 to 8 do
65831: LD_ADDR_VAR 0 2
65835: PUSH
65836: DOUBLE
65837: LD_INT 1
65839: DEC
65840: ST_TO_ADDR
65841: LD_INT 8
65843: PUSH
65844: FOR_TO
65845: IFFALSE 65871
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
65847: LD_ADDR_EXP 63
65851: PUSH
65852: LD_EXP 63
65856: PPUSH
65857: LD_VAR 0 2
65861: PPUSH
65862: EMPTY
65863: PPUSH
65864: CALL_OW 1
65868: ST_TO_ADDR
65869: GO 65844
65871: POP
65872: POP
// tmp := [ ] ;
65873: LD_ADDR_VAR 0 5
65877: PUSH
65878: EMPTY
65879: ST_TO_ADDR
// for i = 1 to mc_sides do
65880: LD_ADDR_VAR 0 2
65884: PUSH
65885: DOUBLE
65886: LD_INT 1
65888: DEC
65889: ST_TO_ADDR
65890: LD_EXP 62
65894: PUSH
65895: FOR_TO
65896: IFFALSE 65954
// if not mc_sides [ i ] in tmp then
65898: LD_EXP 62
65902: PUSH
65903: LD_VAR 0 2
65907: ARRAY
65908: PUSH
65909: LD_VAR 0 5
65913: IN
65914: NOT
65915: IFFALSE 65952
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
65917: LD_ADDR_VAR 0 5
65921: PUSH
65922: LD_VAR 0 5
65926: PPUSH
65927: LD_VAR 0 5
65931: PUSH
65932: LD_INT 1
65934: PLUS
65935: PPUSH
65936: LD_EXP 62
65940: PUSH
65941: LD_VAR 0 2
65945: ARRAY
65946: PPUSH
65947: CALL_OW 2
65951: ST_TO_ADDR
65952: GO 65895
65954: POP
65955: POP
// if not tmp then
65956: LD_VAR 0 5
65960: NOT
65961: IFFALSE 65965
// exit ;
65963: GO 66070
// for j in tmp do
65965: LD_ADDR_VAR 0 3
65969: PUSH
65970: LD_VAR 0 5
65974: PUSH
65975: FOR_IN
65976: IFFALSE 66068
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
65978: LD_ADDR_VAR 0 6
65982: PUSH
65983: LD_INT 22
65985: PUSH
65986: LD_VAR 0 3
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PPUSH
65995: CALL_OW 69
65999: ST_TO_ADDR
// if not un then
66000: LD_VAR 0 6
66004: NOT
66005: IFFALSE 66009
// continue ;
66007: GO 65975
// nation := GetNation ( un [ 1 ] ) ;
66009: LD_ADDR_VAR 0 4
66013: PUSH
66014: LD_VAR 0 6
66018: PUSH
66019: LD_INT 1
66021: ARRAY
66022: PPUSH
66023: CALL_OW 248
66027: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
66028: LD_ADDR_EXP 63
66032: PUSH
66033: LD_EXP 63
66037: PPUSH
66038: LD_VAR 0 3
66042: PPUSH
66043: LD_VAR 0 3
66047: PPUSH
66048: LD_VAR 0 4
66052: PPUSH
66053: LD_INT 1
66055: PPUSH
66056: CALL 19409 0 3
66060: PPUSH
66061: CALL_OW 1
66065: ST_TO_ADDR
// end ;
66066: GO 65975
66068: POP
66069: POP
// end ;
66070: LD_VAR 0 1
66074: RET
// export function MC_InitSides ( ) ; var i ; begin
66075: LD_INT 0
66077: PPUSH
66078: PPUSH
// if not mc_bases then
66079: LD_EXP 36
66083: NOT
66084: IFFALSE 66088
// exit ;
66086: GO 66162
// for i = 1 to mc_bases do
66088: LD_ADDR_VAR 0 2
66092: PUSH
66093: DOUBLE
66094: LD_INT 1
66096: DEC
66097: ST_TO_ADDR
66098: LD_EXP 36
66102: PUSH
66103: FOR_TO
66104: IFFALSE 66160
// if mc_bases [ i ] then
66106: LD_EXP 36
66110: PUSH
66111: LD_VAR 0 2
66115: ARRAY
66116: IFFALSE 66158
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
66118: LD_ADDR_EXP 62
66122: PUSH
66123: LD_EXP 62
66127: PPUSH
66128: LD_VAR 0 2
66132: PPUSH
66133: LD_EXP 36
66137: PUSH
66138: LD_VAR 0 2
66142: ARRAY
66143: PUSH
66144: LD_INT 1
66146: ARRAY
66147: PPUSH
66148: CALL_OW 255
66152: PPUSH
66153: CALL_OW 1
66157: ST_TO_ADDR
66158: GO 66103
66160: POP
66161: POP
// end ;
66162: LD_VAR 0 1
66166: RET
// every 0 0$01 trigger skirmish do
66167: LD_EXP 34
66171: IFFALSE 66325
66173: GO 66175
66175: DISABLE
// begin enable ;
66176: ENABLE
// MC_CheckBuildings ( ) ;
66177: CALL 70823 0 0
// MC_CheckPeopleLife ( ) ;
66181: CALL 70948 0 0
// RaiseSailEvent ( 100 ) ;
66185: LD_INT 100
66187: PPUSH
66188: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
66192: LD_INT 103
66194: PPUSH
66195: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
66199: LD_INT 104
66201: PPUSH
66202: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
66206: LD_INT 105
66208: PPUSH
66209: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
66213: LD_INT 106
66215: PPUSH
66216: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
66220: LD_INT 107
66222: PPUSH
66223: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
66227: LD_INT 108
66229: PPUSH
66230: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
66234: LD_INT 109
66236: PPUSH
66237: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
66241: LD_INT 110
66243: PPUSH
66244: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
66248: LD_INT 111
66250: PPUSH
66251: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
66255: LD_INT 112
66257: PPUSH
66258: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
66262: LD_INT 113
66264: PPUSH
66265: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
66269: LD_INT 120
66271: PPUSH
66272: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
66276: LD_INT 121
66278: PPUSH
66279: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
66283: LD_INT 122
66285: PPUSH
66286: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
66290: LD_INT 123
66292: PPUSH
66293: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
66297: LD_INT 124
66299: PPUSH
66300: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
66304: LD_INT 125
66306: PPUSH
66307: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
66311: LD_INT 126
66313: PPUSH
66314: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
66318: LD_INT 200
66320: PPUSH
66321: CALL_OW 427
// end ;
66325: END
// on SailEvent ( event ) do begin if event < 100 then
66326: LD_VAR 0 1
66330: PUSH
66331: LD_INT 100
66333: LESS
66334: IFFALSE 66345
// CustomEvent ( event ) ;
66336: LD_VAR 0 1
66340: PPUSH
66341: CALL 18596 0 1
// if event = 100 then
66345: LD_VAR 0 1
66349: PUSH
66350: LD_INT 100
66352: EQUAL
66353: IFFALSE 66359
// MC_ClassManager ( ) ;
66355: CALL 66751 0 0
// if event = 101 then
66359: LD_VAR 0 1
66363: PUSH
66364: LD_INT 101
66366: EQUAL
66367: IFFALSE 66373
// MC_RepairBuildings ( ) ;
66369: CALL 71544 0 0
// if event = 102 then
66373: LD_VAR 0 1
66377: PUSH
66378: LD_INT 102
66380: EQUAL
66381: IFFALSE 66387
// MC_Heal ( ) ;
66383: CALL 72408 0 0
// if event = 103 then
66387: LD_VAR 0 1
66391: PUSH
66392: LD_INT 103
66394: EQUAL
66395: IFFALSE 66401
// MC_Build ( ) ;
66397: CALL 72830 0 0
// if event = 104 then
66401: LD_VAR 0 1
66405: PUSH
66406: LD_INT 104
66408: EQUAL
66409: IFFALSE 66415
// MC_TurretWeapon ( ) ;
66411: CALL 74443 0 0
// if event = 105 then
66415: LD_VAR 0 1
66419: PUSH
66420: LD_INT 105
66422: EQUAL
66423: IFFALSE 66429
// MC_BuildUpgrade ( ) ;
66425: CALL 73994 0 0
// if event = 106 then
66429: LD_VAR 0 1
66433: PUSH
66434: LD_INT 106
66436: EQUAL
66437: IFFALSE 66443
// MC_PlantMines ( ) ;
66439: CALL 74873 0 0
// if event = 107 then
66443: LD_VAR 0 1
66447: PUSH
66448: LD_INT 107
66450: EQUAL
66451: IFFALSE 66457
// MC_CollectCrates ( ) ;
66453: CALL 75671 0 0
// if event = 108 then
66457: LD_VAR 0 1
66461: PUSH
66462: LD_INT 108
66464: EQUAL
66465: IFFALSE 66471
// MC_LinkRemoteControl ( ) ;
66467: CALL 77447 0 0
// if event = 109 then
66471: LD_VAR 0 1
66475: PUSH
66476: LD_INT 109
66478: EQUAL
66479: IFFALSE 66485
// MC_ProduceVehicle ( ) ;
66481: CALL 77628 0 0
// if event = 110 then
66485: LD_VAR 0 1
66489: PUSH
66490: LD_INT 110
66492: EQUAL
66493: IFFALSE 66499
// MC_SendAttack ( ) ;
66495: CALL 78094 0 0
// if event = 111 then
66499: LD_VAR 0 1
66503: PUSH
66504: LD_INT 111
66506: EQUAL
66507: IFFALSE 66513
// MC_Defend ( ) ;
66509: CALL 78202 0 0
// if event = 112 then
66513: LD_VAR 0 1
66517: PUSH
66518: LD_INT 112
66520: EQUAL
66521: IFFALSE 66527
// MC_Research ( ) ;
66523: CALL 78807 0 0
// if event = 113 then
66527: LD_VAR 0 1
66531: PUSH
66532: LD_INT 113
66534: EQUAL
66535: IFFALSE 66541
// MC_MinesTrigger ( ) ;
66537: CALL 79921 0 0
// if event = 120 then
66541: LD_VAR 0 1
66545: PUSH
66546: LD_INT 120
66548: EQUAL
66549: IFFALSE 66555
// MC_RepairVehicle ( ) ;
66551: CALL 80020 0 0
// if event = 121 then
66555: LD_VAR 0 1
66559: PUSH
66560: LD_INT 121
66562: EQUAL
66563: IFFALSE 66569
// MC_TameApe ( ) ;
66565: CALL 80750 0 0
// if event = 122 then
66569: LD_VAR 0 1
66573: PUSH
66574: LD_INT 122
66576: EQUAL
66577: IFFALSE 66583
// MC_ChangeApeClass ( ) ;
66579: CALL 81579 0 0
// if event = 123 then
66583: LD_VAR 0 1
66587: PUSH
66588: LD_INT 123
66590: EQUAL
66591: IFFALSE 66597
// MC_Bazooka ( ) ;
66593: CALL 82229 0 0
// if event = 124 then
66597: LD_VAR 0 1
66601: PUSH
66602: LD_INT 124
66604: EQUAL
66605: IFFALSE 66611
// MC_TeleportExit ( ) ;
66607: CALL 82427 0 0
// if event = 125 then
66611: LD_VAR 0 1
66615: PUSH
66616: LD_INT 125
66618: EQUAL
66619: IFFALSE 66625
// MC_Deposits ( ) ;
66621: CALL 83074 0 0
// if event = 126 then
66625: LD_VAR 0 1
66629: PUSH
66630: LD_INT 126
66632: EQUAL
66633: IFFALSE 66639
// MC_RemoteDriver ( ) ;
66635: CALL 83699 0 0
// if event = 200 then
66639: LD_VAR 0 1
66643: PUSH
66644: LD_INT 200
66646: EQUAL
66647: IFFALSE 66653
// MC_Idle ( ) ;
66649: CALL 85648 0 0
// end ;
66653: PPOPN 1
66655: END
// export function MC_Reset ( base , tag ) ; var i ; begin
66656: LD_INT 0
66658: PPUSH
66659: PPUSH
// if not mc_bases [ base ] or not tag then
66660: LD_EXP 36
66664: PUSH
66665: LD_VAR 0 1
66669: ARRAY
66670: NOT
66671: PUSH
66672: LD_VAR 0 2
66676: NOT
66677: OR
66678: IFFALSE 66682
// exit ;
66680: GO 66746
// for i in mc_bases [ base ] union mc_ape [ base ] do
66682: LD_ADDR_VAR 0 4
66686: PUSH
66687: LD_EXP 36
66691: PUSH
66692: LD_VAR 0 1
66696: ARRAY
66697: PUSH
66698: LD_EXP 65
66702: PUSH
66703: LD_VAR 0 1
66707: ARRAY
66708: UNION
66709: PUSH
66710: FOR_IN
66711: IFFALSE 66744
// if GetTag ( i ) = tag then
66713: LD_VAR 0 4
66717: PPUSH
66718: CALL_OW 110
66722: PUSH
66723: LD_VAR 0 2
66727: EQUAL
66728: IFFALSE 66742
// SetTag ( i , 0 ) ;
66730: LD_VAR 0 4
66734: PPUSH
66735: LD_INT 0
66737: PPUSH
66738: CALL_OW 109
66742: GO 66710
66744: POP
66745: POP
// end ;
66746: LD_VAR 0 3
66750: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
66751: LD_INT 0
66753: PPUSH
66754: PPUSH
66755: PPUSH
66756: PPUSH
66757: PPUSH
66758: PPUSH
66759: PPUSH
66760: PPUSH
// if not mc_bases then
66761: LD_EXP 36
66765: NOT
66766: IFFALSE 66770
// exit ;
66768: GO 67228
// for i = 1 to mc_bases do
66770: LD_ADDR_VAR 0 2
66774: PUSH
66775: DOUBLE
66776: LD_INT 1
66778: DEC
66779: ST_TO_ADDR
66780: LD_EXP 36
66784: PUSH
66785: FOR_TO
66786: IFFALSE 67226
// begin tmp := MC_ClassCheckReq ( i ) ;
66788: LD_ADDR_VAR 0 4
66792: PUSH
66793: LD_VAR 0 2
66797: PPUSH
66798: CALL 67233 0 1
66802: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
66803: LD_ADDR_EXP 77
66807: PUSH
66808: LD_EXP 77
66812: PPUSH
66813: LD_VAR 0 2
66817: PPUSH
66818: LD_VAR 0 4
66822: PPUSH
66823: CALL_OW 1
66827: ST_TO_ADDR
// if not tmp then
66828: LD_VAR 0 4
66832: NOT
66833: IFFALSE 66837
// continue ;
66835: GO 66785
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
66837: LD_ADDR_VAR 0 6
66841: PUSH
66842: LD_EXP 36
66846: PUSH
66847: LD_VAR 0 2
66851: ARRAY
66852: PPUSH
66853: LD_INT 2
66855: PUSH
66856: LD_INT 30
66858: PUSH
66859: LD_INT 4
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 30
66868: PUSH
66869: LD_INT 5
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: LIST
66880: PPUSH
66881: CALL_OW 72
66885: PUSH
66886: LD_EXP 36
66890: PUSH
66891: LD_VAR 0 2
66895: ARRAY
66896: PPUSH
66897: LD_INT 2
66899: PUSH
66900: LD_INT 30
66902: PUSH
66903: LD_INT 0
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 30
66912: PUSH
66913: LD_INT 1
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: LIST
66924: PPUSH
66925: CALL_OW 72
66929: PUSH
66930: LD_EXP 36
66934: PUSH
66935: LD_VAR 0 2
66939: ARRAY
66940: PPUSH
66941: LD_INT 30
66943: PUSH
66944: LD_INT 3
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: PPUSH
66951: CALL_OW 72
66955: PUSH
66956: LD_EXP 36
66960: PUSH
66961: LD_VAR 0 2
66965: ARRAY
66966: PPUSH
66967: LD_INT 2
66969: PUSH
66970: LD_INT 30
66972: PUSH
66973: LD_INT 6
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: LD_INT 30
66982: PUSH
66983: LD_INT 7
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: LD_INT 30
66992: PUSH
66993: LD_INT 8
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: LIST
67004: LIST
67005: PPUSH
67006: CALL_OW 72
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: LIST
67015: LIST
67016: ST_TO_ADDR
// for j = 1 to 4 do
67017: LD_ADDR_VAR 0 3
67021: PUSH
67022: DOUBLE
67023: LD_INT 1
67025: DEC
67026: ST_TO_ADDR
67027: LD_INT 4
67029: PUSH
67030: FOR_TO
67031: IFFALSE 67222
// begin if not tmp [ j ] then
67033: LD_VAR 0 4
67037: PUSH
67038: LD_VAR 0 3
67042: ARRAY
67043: NOT
67044: IFFALSE 67048
// continue ;
67046: GO 67030
// for p in tmp [ j ] do
67048: LD_ADDR_VAR 0 5
67052: PUSH
67053: LD_VAR 0 4
67057: PUSH
67058: LD_VAR 0 3
67062: ARRAY
67063: PUSH
67064: FOR_IN
67065: IFFALSE 67218
// begin if not b [ j ] then
67067: LD_VAR 0 6
67071: PUSH
67072: LD_VAR 0 3
67076: ARRAY
67077: NOT
67078: IFFALSE 67082
// break ;
67080: GO 67218
// e := 0 ;
67082: LD_ADDR_VAR 0 7
67086: PUSH
67087: LD_INT 0
67089: ST_TO_ADDR
// for k in b [ j ] do
67090: LD_ADDR_VAR 0 8
67094: PUSH
67095: LD_VAR 0 6
67099: PUSH
67100: LD_VAR 0 3
67104: ARRAY
67105: PUSH
67106: FOR_IN
67107: IFFALSE 67134
// if IsNotFull ( k ) then
67109: LD_VAR 0 8
67113: PPUSH
67114: CALL 23849 0 1
67118: IFFALSE 67132
// begin e := k ;
67120: LD_ADDR_VAR 0 7
67124: PUSH
67125: LD_VAR 0 8
67129: ST_TO_ADDR
// break ;
67130: GO 67134
// end ;
67132: GO 67106
67134: POP
67135: POP
// if e and not UnitGoingToBuilding ( p , e ) then
67136: LD_VAR 0 7
67140: PUSH
67141: LD_VAR 0 5
67145: PPUSH
67146: LD_VAR 0 7
67150: PPUSH
67151: CALL 60994 0 2
67155: NOT
67156: AND
67157: IFFALSE 67216
// begin if IsInUnit ( p ) then
67159: LD_VAR 0 5
67163: PPUSH
67164: CALL_OW 310
67168: IFFALSE 67179
// ComExitBuilding ( p ) ;
67170: LD_VAR 0 5
67174: PPUSH
67175: CALL_OW 122
// ComEnterUnit ( p , e ) ;
67179: LD_VAR 0 5
67183: PPUSH
67184: LD_VAR 0 7
67188: PPUSH
67189: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
67193: LD_VAR 0 5
67197: PPUSH
67198: LD_VAR 0 3
67202: PPUSH
67203: CALL_OW 183
// AddComExitBuilding ( p ) ;
67207: LD_VAR 0 5
67211: PPUSH
67212: CALL_OW 182
// end ; end ;
67216: GO 67064
67218: POP
67219: POP
// end ;
67220: GO 67030
67222: POP
67223: POP
// end ;
67224: GO 66785
67226: POP
67227: POP
// end ;
67228: LD_VAR 0 1
67232: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
67233: LD_INT 0
67235: PPUSH
67236: PPUSH
67237: PPUSH
67238: PPUSH
67239: PPUSH
67240: PPUSH
67241: PPUSH
67242: PPUSH
67243: PPUSH
67244: PPUSH
67245: PPUSH
67246: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
67247: LD_VAR 0 1
67251: NOT
67252: PUSH
67253: LD_EXP 36
67257: PUSH
67258: LD_VAR 0 1
67262: ARRAY
67263: NOT
67264: OR
67265: PUSH
67266: LD_EXP 36
67270: PUSH
67271: LD_VAR 0 1
67275: ARRAY
67276: PPUSH
67277: LD_INT 2
67279: PUSH
67280: LD_INT 30
67282: PUSH
67283: LD_INT 0
67285: PUSH
67286: EMPTY
67287: LIST
67288: LIST
67289: PUSH
67290: LD_INT 30
67292: PUSH
67293: LD_INT 1
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: LIST
67304: PPUSH
67305: CALL_OW 72
67309: NOT
67310: OR
67311: IFFALSE 67315
// exit ;
67313: GO 70818
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
67315: LD_ADDR_VAR 0 4
67319: PUSH
67320: LD_EXP 36
67324: PUSH
67325: LD_VAR 0 1
67329: ARRAY
67330: PPUSH
67331: LD_INT 2
67333: PUSH
67334: LD_INT 25
67336: PUSH
67337: LD_INT 1
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 25
67346: PUSH
67347: LD_INT 2
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: LD_INT 25
67356: PUSH
67357: LD_INT 3
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 25
67366: PUSH
67367: LD_INT 4
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: LD_INT 25
67376: PUSH
67377: LD_INT 5
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PUSH
67384: LD_INT 25
67386: PUSH
67387: LD_INT 8
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: PUSH
67394: LD_INT 25
67396: PUSH
67397: LD_INT 9
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: LIST
67408: LIST
67409: LIST
67410: LIST
67411: LIST
67412: LIST
67413: PPUSH
67414: CALL_OW 72
67418: ST_TO_ADDR
// if not tmp then
67419: LD_VAR 0 4
67423: NOT
67424: IFFALSE 67428
// exit ;
67426: GO 70818
// for i in tmp do
67428: LD_ADDR_VAR 0 3
67432: PUSH
67433: LD_VAR 0 4
67437: PUSH
67438: FOR_IN
67439: IFFALSE 67470
// if GetTag ( i ) then
67441: LD_VAR 0 3
67445: PPUSH
67446: CALL_OW 110
67450: IFFALSE 67468
// tmp := tmp diff i ;
67452: LD_ADDR_VAR 0 4
67456: PUSH
67457: LD_VAR 0 4
67461: PUSH
67462: LD_VAR 0 3
67466: DIFF
67467: ST_TO_ADDR
67468: GO 67438
67470: POP
67471: POP
// if not tmp then
67472: LD_VAR 0 4
67476: NOT
67477: IFFALSE 67481
// exit ;
67479: GO 70818
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
67481: LD_ADDR_VAR 0 5
67485: PUSH
67486: LD_EXP 36
67490: PUSH
67491: LD_VAR 0 1
67495: ARRAY
67496: PPUSH
67497: LD_INT 2
67499: PUSH
67500: LD_INT 25
67502: PUSH
67503: LD_INT 1
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: LD_INT 25
67512: PUSH
67513: LD_INT 5
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 25
67522: PUSH
67523: LD_INT 8
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 25
67532: PUSH
67533: LD_INT 9
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: EMPTY
67541: LIST
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: PPUSH
67547: CALL_OW 72
67551: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
67552: LD_ADDR_VAR 0 6
67556: PUSH
67557: LD_EXP 36
67561: PUSH
67562: LD_VAR 0 1
67566: ARRAY
67567: PPUSH
67568: LD_INT 25
67570: PUSH
67571: LD_INT 2
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: PPUSH
67578: CALL_OW 72
67582: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
67583: LD_ADDR_VAR 0 7
67587: PUSH
67588: LD_EXP 36
67592: PUSH
67593: LD_VAR 0 1
67597: ARRAY
67598: PPUSH
67599: LD_INT 25
67601: PUSH
67602: LD_INT 3
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PPUSH
67609: CALL_OW 72
67613: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
67614: LD_ADDR_VAR 0 8
67618: PUSH
67619: LD_EXP 36
67623: PUSH
67624: LD_VAR 0 1
67628: ARRAY
67629: PPUSH
67630: LD_INT 25
67632: PUSH
67633: LD_INT 4
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: LD_INT 24
67642: PUSH
67643: LD_INT 251
67645: PUSH
67646: EMPTY
67647: LIST
67648: LIST
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PPUSH
67654: CALL_OW 72
67658: ST_TO_ADDR
// if mc_scan [ base ] then
67659: LD_EXP 59
67663: PUSH
67664: LD_VAR 0 1
67668: ARRAY
67669: IFFALSE 68130
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
67671: LD_ADDR_EXP 78
67675: PUSH
67676: LD_EXP 78
67680: PPUSH
67681: LD_VAR 0 1
67685: PPUSH
67686: LD_INT 4
67688: PPUSH
67689: CALL_OW 1
67693: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
67694: LD_ADDR_VAR 0 12
67698: PUSH
67699: LD_EXP 36
67703: PUSH
67704: LD_VAR 0 1
67708: ARRAY
67709: PPUSH
67710: LD_INT 2
67712: PUSH
67713: LD_INT 30
67715: PUSH
67716: LD_INT 4
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: PUSH
67723: LD_INT 30
67725: PUSH
67726: LD_INT 5
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: LIST
67737: PPUSH
67738: CALL_OW 72
67742: ST_TO_ADDR
// if not b then
67743: LD_VAR 0 12
67747: NOT
67748: IFFALSE 67752
// exit ;
67750: GO 70818
// p := [ ] ;
67752: LD_ADDR_VAR 0 11
67756: PUSH
67757: EMPTY
67758: ST_TO_ADDR
// if sci >= 2 then
67759: LD_VAR 0 8
67763: PUSH
67764: LD_INT 2
67766: GREATEREQUAL
67767: IFFALSE 67798
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
67769: LD_ADDR_VAR 0 8
67773: PUSH
67774: LD_VAR 0 8
67778: PUSH
67779: LD_INT 1
67781: ARRAY
67782: PUSH
67783: LD_VAR 0 8
67787: PUSH
67788: LD_INT 2
67790: ARRAY
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: ST_TO_ADDR
67796: GO 67859
// if sci = 1 then
67798: LD_VAR 0 8
67802: PUSH
67803: LD_INT 1
67805: EQUAL
67806: IFFALSE 67827
// sci := [ sci [ 1 ] ] else
67808: LD_ADDR_VAR 0 8
67812: PUSH
67813: LD_VAR 0 8
67817: PUSH
67818: LD_INT 1
67820: ARRAY
67821: PUSH
67822: EMPTY
67823: LIST
67824: ST_TO_ADDR
67825: GO 67859
// if sci = 0 then
67827: LD_VAR 0 8
67831: PUSH
67832: LD_INT 0
67834: EQUAL
67835: IFFALSE 67859
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
67837: LD_ADDR_VAR 0 11
67841: PUSH
67842: LD_VAR 0 4
67846: PPUSH
67847: LD_INT 4
67849: PPUSH
67850: CALL 60857 0 2
67854: PUSH
67855: LD_INT 1
67857: ARRAY
67858: ST_TO_ADDR
// if eng > 4 then
67859: LD_VAR 0 6
67863: PUSH
67864: LD_INT 4
67866: GREATER
67867: IFFALSE 67913
// for i = eng downto 4 do
67869: LD_ADDR_VAR 0 3
67873: PUSH
67874: DOUBLE
67875: LD_VAR 0 6
67879: INC
67880: ST_TO_ADDR
67881: LD_INT 4
67883: PUSH
67884: FOR_DOWNTO
67885: IFFALSE 67911
// eng := eng diff eng [ i ] ;
67887: LD_ADDR_VAR 0 6
67891: PUSH
67892: LD_VAR 0 6
67896: PUSH
67897: LD_VAR 0 6
67901: PUSH
67902: LD_VAR 0 3
67906: ARRAY
67907: DIFF
67908: ST_TO_ADDR
67909: GO 67884
67911: POP
67912: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
67913: LD_ADDR_VAR 0 4
67917: PUSH
67918: LD_VAR 0 4
67922: PUSH
67923: LD_VAR 0 5
67927: PUSH
67928: LD_VAR 0 6
67932: UNION
67933: PUSH
67934: LD_VAR 0 7
67938: UNION
67939: PUSH
67940: LD_VAR 0 8
67944: UNION
67945: DIFF
67946: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
67947: LD_ADDR_VAR 0 13
67951: PUSH
67952: LD_EXP 36
67956: PUSH
67957: LD_VAR 0 1
67961: ARRAY
67962: PPUSH
67963: LD_INT 2
67965: PUSH
67966: LD_INT 30
67968: PUSH
67969: LD_INT 32
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 30
67978: PUSH
67979: LD_INT 31
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: LIST
67990: PPUSH
67991: CALL_OW 72
67995: PUSH
67996: LD_EXP 36
68000: PUSH
68001: LD_VAR 0 1
68005: ARRAY
68006: PPUSH
68007: LD_INT 2
68009: PUSH
68010: LD_INT 30
68012: PUSH
68013: LD_INT 4
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: PUSH
68020: LD_INT 30
68022: PUSH
68023: LD_INT 5
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: LIST
68034: PPUSH
68035: CALL_OW 72
68039: PUSH
68040: LD_INT 6
68042: MUL
68043: PLUS
68044: ST_TO_ADDR
// if bcount < tmp then
68045: LD_VAR 0 13
68049: PUSH
68050: LD_VAR 0 4
68054: LESS
68055: IFFALSE 68101
// for i = tmp downto bcount do
68057: LD_ADDR_VAR 0 3
68061: PUSH
68062: DOUBLE
68063: LD_VAR 0 4
68067: INC
68068: ST_TO_ADDR
68069: LD_VAR 0 13
68073: PUSH
68074: FOR_DOWNTO
68075: IFFALSE 68099
// tmp := Delete ( tmp , tmp ) ;
68077: LD_ADDR_VAR 0 4
68081: PUSH
68082: LD_VAR 0 4
68086: PPUSH
68087: LD_VAR 0 4
68091: PPUSH
68092: CALL_OW 3
68096: ST_TO_ADDR
68097: GO 68074
68099: POP
68100: POP
// result := [ tmp , 0 , 0 , p ] ;
68101: LD_ADDR_VAR 0 2
68105: PUSH
68106: LD_VAR 0 4
68110: PUSH
68111: LD_INT 0
68113: PUSH
68114: LD_INT 0
68116: PUSH
68117: LD_VAR 0 11
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: ST_TO_ADDR
// exit ;
68128: GO 70818
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
68130: LD_EXP 36
68134: PUSH
68135: LD_VAR 0 1
68139: ARRAY
68140: PPUSH
68141: LD_INT 2
68143: PUSH
68144: LD_INT 30
68146: PUSH
68147: LD_INT 6
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PUSH
68154: LD_INT 30
68156: PUSH
68157: LD_INT 7
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 30
68166: PUSH
68167: LD_INT 8
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: LIST
68178: LIST
68179: PPUSH
68180: CALL_OW 72
68184: NOT
68185: PUSH
68186: LD_EXP 36
68190: PUSH
68191: LD_VAR 0 1
68195: ARRAY
68196: PPUSH
68197: LD_INT 30
68199: PUSH
68200: LD_INT 3
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PPUSH
68207: CALL_OW 72
68211: NOT
68212: AND
68213: IFFALSE 68285
// begin if eng = tmp then
68215: LD_VAR 0 6
68219: PUSH
68220: LD_VAR 0 4
68224: EQUAL
68225: IFFALSE 68229
// exit ;
68227: GO 70818
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
68229: LD_ADDR_EXP 78
68233: PUSH
68234: LD_EXP 78
68238: PPUSH
68239: LD_VAR 0 1
68243: PPUSH
68244: LD_INT 1
68246: PPUSH
68247: CALL_OW 1
68251: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
68252: LD_ADDR_VAR 0 2
68256: PUSH
68257: LD_INT 0
68259: PUSH
68260: LD_VAR 0 4
68264: PUSH
68265: LD_VAR 0 6
68269: DIFF
68270: PUSH
68271: LD_INT 0
68273: PUSH
68274: LD_INT 0
68276: PUSH
68277: EMPTY
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: ST_TO_ADDR
// exit ;
68283: GO 70818
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
68285: LD_EXP 63
68289: PUSH
68290: LD_EXP 62
68294: PUSH
68295: LD_VAR 0 1
68299: ARRAY
68300: ARRAY
68301: PUSH
68302: LD_EXP 36
68306: PUSH
68307: LD_VAR 0 1
68311: ARRAY
68312: PPUSH
68313: LD_INT 2
68315: PUSH
68316: LD_INT 30
68318: PUSH
68319: LD_INT 6
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 30
68328: PUSH
68329: LD_INT 7
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PUSH
68336: LD_INT 30
68338: PUSH
68339: LD_INT 8
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: LIST
68350: LIST
68351: PPUSH
68352: CALL_OW 72
68356: AND
68357: PUSH
68358: LD_EXP 36
68362: PUSH
68363: LD_VAR 0 1
68367: ARRAY
68368: PPUSH
68369: LD_INT 30
68371: PUSH
68372: LD_INT 3
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: PPUSH
68379: CALL_OW 72
68383: NOT
68384: AND
68385: IFFALSE 68599
// begin if sci >= 6 then
68387: LD_VAR 0 8
68391: PUSH
68392: LD_INT 6
68394: GREATEREQUAL
68395: IFFALSE 68399
// exit ;
68397: GO 70818
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
68399: LD_ADDR_EXP 78
68403: PUSH
68404: LD_EXP 78
68408: PPUSH
68409: LD_VAR 0 1
68413: PPUSH
68414: LD_INT 2
68416: PPUSH
68417: CALL_OW 1
68421: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
68422: LD_ADDR_VAR 0 9
68426: PUSH
68427: LD_VAR 0 4
68431: PUSH
68432: LD_VAR 0 8
68436: DIFF
68437: PPUSH
68438: LD_INT 4
68440: PPUSH
68441: CALL 60857 0 2
68445: ST_TO_ADDR
// p := [ ] ;
68446: LD_ADDR_VAR 0 11
68450: PUSH
68451: EMPTY
68452: ST_TO_ADDR
// if sci < 6 and sort > 6 then
68453: LD_VAR 0 8
68457: PUSH
68458: LD_INT 6
68460: LESS
68461: PUSH
68462: LD_VAR 0 9
68466: PUSH
68467: LD_INT 6
68469: GREATER
68470: AND
68471: IFFALSE 68552
// begin for i = 1 to 6 - sci do
68473: LD_ADDR_VAR 0 3
68477: PUSH
68478: DOUBLE
68479: LD_INT 1
68481: DEC
68482: ST_TO_ADDR
68483: LD_INT 6
68485: PUSH
68486: LD_VAR 0 8
68490: MINUS
68491: PUSH
68492: FOR_TO
68493: IFFALSE 68548
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
68495: LD_ADDR_VAR 0 11
68499: PUSH
68500: LD_VAR 0 11
68504: PPUSH
68505: LD_VAR 0 11
68509: PUSH
68510: LD_INT 1
68512: PLUS
68513: PPUSH
68514: LD_VAR 0 9
68518: PUSH
68519: LD_INT 1
68521: ARRAY
68522: PPUSH
68523: CALL_OW 2
68527: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
68528: LD_ADDR_VAR 0 9
68532: PUSH
68533: LD_VAR 0 9
68537: PPUSH
68538: LD_INT 1
68540: PPUSH
68541: CALL_OW 3
68545: ST_TO_ADDR
// end ;
68546: GO 68492
68548: POP
68549: POP
// end else
68550: GO 68572
// if sort then
68552: LD_VAR 0 9
68556: IFFALSE 68572
// p := sort [ 1 ] ;
68558: LD_ADDR_VAR 0 11
68562: PUSH
68563: LD_VAR 0 9
68567: PUSH
68568: LD_INT 1
68570: ARRAY
68571: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
68572: LD_ADDR_VAR 0 2
68576: PUSH
68577: LD_INT 0
68579: PUSH
68580: LD_INT 0
68582: PUSH
68583: LD_INT 0
68585: PUSH
68586: LD_VAR 0 11
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: LIST
68595: LIST
68596: ST_TO_ADDR
// exit ;
68597: GO 70818
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
68599: LD_EXP 63
68603: PUSH
68604: LD_EXP 62
68608: PUSH
68609: LD_VAR 0 1
68613: ARRAY
68614: ARRAY
68615: PUSH
68616: LD_EXP 36
68620: PUSH
68621: LD_VAR 0 1
68625: ARRAY
68626: PPUSH
68627: LD_INT 2
68629: PUSH
68630: LD_INT 30
68632: PUSH
68633: LD_INT 6
68635: PUSH
68636: EMPTY
68637: LIST
68638: LIST
68639: PUSH
68640: LD_INT 30
68642: PUSH
68643: LD_INT 7
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: LD_INT 30
68652: PUSH
68653: LD_INT 8
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: LIST
68664: LIST
68665: PPUSH
68666: CALL_OW 72
68670: AND
68671: PUSH
68672: LD_EXP 36
68676: PUSH
68677: LD_VAR 0 1
68681: ARRAY
68682: PPUSH
68683: LD_INT 30
68685: PUSH
68686: LD_INT 3
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: PPUSH
68693: CALL_OW 72
68697: AND
68698: IFFALSE 69432
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
68700: LD_ADDR_EXP 78
68704: PUSH
68705: LD_EXP 78
68709: PPUSH
68710: LD_VAR 0 1
68714: PPUSH
68715: LD_INT 3
68717: PPUSH
68718: CALL_OW 1
68722: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
68723: LD_ADDR_VAR 0 2
68727: PUSH
68728: LD_INT 0
68730: PUSH
68731: LD_INT 0
68733: PUSH
68734: LD_INT 0
68736: PUSH
68737: LD_INT 0
68739: PUSH
68740: EMPTY
68741: LIST
68742: LIST
68743: LIST
68744: LIST
68745: ST_TO_ADDR
// if not eng then
68746: LD_VAR 0 6
68750: NOT
68751: IFFALSE 68814
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
68753: LD_ADDR_VAR 0 11
68757: PUSH
68758: LD_VAR 0 4
68762: PPUSH
68763: LD_INT 2
68765: PPUSH
68766: CALL 60857 0 2
68770: PUSH
68771: LD_INT 1
68773: ARRAY
68774: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
68775: LD_ADDR_VAR 0 2
68779: PUSH
68780: LD_VAR 0 2
68784: PPUSH
68785: LD_INT 2
68787: PPUSH
68788: LD_VAR 0 11
68792: PPUSH
68793: CALL_OW 1
68797: ST_TO_ADDR
// tmp := tmp diff p ;
68798: LD_ADDR_VAR 0 4
68802: PUSH
68803: LD_VAR 0 4
68807: PUSH
68808: LD_VAR 0 11
68812: DIFF
68813: ST_TO_ADDR
// end ; if tmp and sci < 6 then
68814: LD_VAR 0 4
68818: PUSH
68819: LD_VAR 0 8
68823: PUSH
68824: LD_INT 6
68826: LESS
68827: AND
68828: IFFALSE 69016
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
68830: LD_ADDR_VAR 0 9
68834: PUSH
68835: LD_VAR 0 4
68839: PUSH
68840: LD_VAR 0 8
68844: PUSH
68845: LD_VAR 0 7
68849: UNION
68850: DIFF
68851: PPUSH
68852: LD_INT 4
68854: PPUSH
68855: CALL 60857 0 2
68859: ST_TO_ADDR
// p := [ ] ;
68860: LD_ADDR_VAR 0 11
68864: PUSH
68865: EMPTY
68866: ST_TO_ADDR
// if sort then
68867: LD_VAR 0 9
68871: IFFALSE 68987
// for i = 1 to 6 - sci do
68873: LD_ADDR_VAR 0 3
68877: PUSH
68878: DOUBLE
68879: LD_INT 1
68881: DEC
68882: ST_TO_ADDR
68883: LD_INT 6
68885: PUSH
68886: LD_VAR 0 8
68890: MINUS
68891: PUSH
68892: FOR_TO
68893: IFFALSE 68985
// begin if i = sort then
68895: LD_VAR 0 3
68899: PUSH
68900: LD_VAR 0 9
68904: EQUAL
68905: IFFALSE 68909
// break ;
68907: GO 68985
// if GetClass ( i ) = 4 then
68909: LD_VAR 0 3
68913: PPUSH
68914: CALL_OW 257
68918: PUSH
68919: LD_INT 4
68921: EQUAL
68922: IFFALSE 68926
// continue ;
68924: GO 68892
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68926: LD_ADDR_VAR 0 11
68930: PUSH
68931: LD_VAR 0 11
68935: PPUSH
68936: LD_VAR 0 11
68940: PUSH
68941: LD_INT 1
68943: PLUS
68944: PPUSH
68945: LD_VAR 0 9
68949: PUSH
68950: LD_VAR 0 3
68954: ARRAY
68955: PPUSH
68956: CALL_OW 2
68960: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68961: LD_ADDR_VAR 0 4
68965: PUSH
68966: LD_VAR 0 4
68970: PUSH
68971: LD_VAR 0 9
68975: PUSH
68976: LD_VAR 0 3
68980: ARRAY
68981: DIFF
68982: ST_TO_ADDR
// end ;
68983: GO 68892
68985: POP
68986: POP
// if p then
68987: LD_VAR 0 11
68991: IFFALSE 69016
// result := Replace ( result , 4 , p ) ;
68993: LD_ADDR_VAR 0 2
68997: PUSH
68998: LD_VAR 0 2
69002: PPUSH
69003: LD_INT 4
69005: PPUSH
69006: LD_VAR 0 11
69010: PPUSH
69011: CALL_OW 1
69015: ST_TO_ADDR
// end ; if tmp and mech < 6 then
69016: LD_VAR 0 4
69020: PUSH
69021: LD_VAR 0 7
69025: PUSH
69026: LD_INT 6
69028: LESS
69029: AND
69030: IFFALSE 69218
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
69032: LD_ADDR_VAR 0 9
69036: PUSH
69037: LD_VAR 0 4
69041: PUSH
69042: LD_VAR 0 8
69046: PUSH
69047: LD_VAR 0 7
69051: UNION
69052: DIFF
69053: PPUSH
69054: LD_INT 3
69056: PPUSH
69057: CALL 60857 0 2
69061: ST_TO_ADDR
// p := [ ] ;
69062: LD_ADDR_VAR 0 11
69066: PUSH
69067: EMPTY
69068: ST_TO_ADDR
// if sort then
69069: LD_VAR 0 9
69073: IFFALSE 69189
// for i = 1 to 6 - mech do
69075: LD_ADDR_VAR 0 3
69079: PUSH
69080: DOUBLE
69081: LD_INT 1
69083: DEC
69084: ST_TO_ADDR
69085: LD_INT 6
69087: PUSH
69088: LD_VAR 0 7
69092: MINUS
69093: PUSH
69094: FOR_TO
69095: IFFALSE 69187
// begin if i = sort then
69097: LD_VAR 0 3
69101: PUSH
69102: LD_VAR 0 9
69106: EQUAL
69107: IFFALSE 69111
// break ;
69109: GO 69187
// if GetClass ( i ) = 3 then
69111: LD_VAR 0 3
69115: PPUSH
69116: CALL_OW 257
69120: PUSH
69121: LD_INT 3
69123: EQUAL
69124: IFFALSE 69128
// continue ;
69126: GO 69094
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69128: LD_ADDR_VAR 0 11
69132: PUSH
69133: LD_VAR 0 11
69137: PPUSH
69138: LD_VAR 0 11
69142: PUSH
69143: LD_INT 1
69145: PLUS
69146: PPUSH
69147: LD_VAR 0 9
69151: PUSH
69152: LD_VAR 0 3
69156: ARRAY
69157: PPUSH
69158: CALL_OW 2
69162: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69163: LD_ADDR_VAR 0 4
69167: PUSH
69168: LD_VAR 0 4
69172: PUSH
69173: LD_VAR 0 9
69177: PUSH
69178: LD_VAR 0 3
69182: ARRAY
69183: DIFF
69184: ST_TO_ADDR
// end ;
69185: GO 69094
69187: POP
69188: POP
// if p then
69189: LD_VAR 0 11
69193: IFFALSE 69218
// result := Replace ( result , 3 , p ) ;
69195: LD_ADDR_VAR 0 2
69199: PUSH
69200: LD_VAR 0 2
69204: PPUSH
69205: LD_INT 3
69207: PPUSH
69208: LD_VAR 0 11
69212: PPUSH
69213: CALL_OW 1
69217: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
69218: LD_VAR 0 4
69222: PUSH
69223: LD_INT 6
69225: GREATER
69226: PUSH
69227: LD_VAR 0 6
69231: PUSH
69232: LD_INT 6
69234: LESS
69235: AND
69236: IFFALSE 69430
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
69238: LD_ADDR_VAR 0 9
69242: PUSH
69243: LD_VAR 0 4
69247: PUSH
69248: LD_VAR 0 8
69252: PUSH
69253: LD_VAR 0 7
69257: UNION
69258: PUSH
69259: LD_VAR 0 6
69263: UNION
69264: DIFF
69265: PPUSH
69266: LD_INT 2
69268: PPUSH
69269: CALL 60857 0 2
69273: ST_TO_ADDR
// p := [ ] ;
69274: LD_ADDR_VAR 0 11
69278: PUSH
69279: EMPTY
69280: ST_TO_ADDR
// if sort then
69281: LD_VAR 0 9
69285: IFFALSE 69401
// for i = 1 to 6 - eng do
69287: LD_ADDR_VAR 0 3
69291: PUSH
69292: DOUBLE
69293: LD_INT 1
69295: DEC
69296: ST_TO_ADDR
69297: LD_INT 6
69299: PUSH
69300: LD_VAR 0 6
69304: MINUS
69305: PUSH
69306: FOR_TO
69307: IFFALSE 69399
// begin if i = sort then
69309: LD_VAR 0 3
69313: PUSH
69314: LD_VAR 0 9
69318: EQUAL
69319: IFFALSE 69323
// break ;
69321: GO 69399
// if GetClass ( i ) = 2 then
69323: LD_VAR 0 3
69327: PPUSH
69328: CALL_OW 257
69332: PUSH
69333: LD_INT 2
69335: EQUAL
69336: IFFALSE 69340
// continue ;
69338: GO 69306
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69340: LD_ADDR_VAR 0 11
69344: PUSH
69345: LD_VAR 0 11
69349: PPUSH
69350: LD_VAR 0 11
69354: PUSH
69355: LD_INT 1
69357: PLUS
69358: PPUSH
69359: LD_VAR 0 9
69363: PUSH
69364: LD_VAR 0 3
69368: ARRAY
69369: PPUSH
69370: CALL_OW 2
69374: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69375: LD_ADDR_VAR 0 4
69379: PUSH
69380: LD_VAR 0 4
69384: PUSH
69385: LD_VAR 0 9
69389: PUSH
69390: LD_VAR 0 3
69394: ARRAY
69395: DIFF
69396: ST_TO_ADDR
// end ;
69397: GO 69306
69399: POP
69400: POP
// if p then
69401: LD_VAR 0 11
69405: IFFALSE 69430
// result := Replace ( result , 2 , p ) ;
69407: LD_ADDR_VAR 0 2
69411: PUSH
69412: LD_VAR 0 2
69416: PPUSH
69417: LD_INT 2
69419: PPUSH
69420: LD_VAR 0 11
69424: PPUSH
69425: CALL_OW 1
69429: ST_TO_ADDR
// end ; exit ;
69430: GO 70818
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
69432: LD_EXP 63
69436: PUSH
69437: LD_EXP 62
69441: PUSH
69442: LD_VAR 0 1
69446: ARRAY
69447: ARRAY
69448: NOT
69449: PUSH
69450: LD_EXP 36
69454: PUSH
69455: LD_VAR 0 1
69459: ARRAY
69460: PPUSH
69461: LD_INT 30
69463: PUSH
69464: LD_INT 3
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: PPUSH
69471: CALL_OW 72
69475: AND
69476: PUSH
69477: LD_EXP 41
69481: PUSH
69482: LD_VAR 0 1
69486: ARRAY
69487: AND
69488: IFFALSE 70096
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
69490: LD_ADDR_EXP 78
69494: PUSH
69495: LD_EXP 78
69499: PPUSH
69500: LD_VAR 0 1
69504: PPUSH
69505: LD_INT 5
69507: PPUSH
69508: CALL_OW 1
69512: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
69513: LD_ADDR_VAR 0 2
69517: PUSH
69518: LD_INT 0
69520: PUSH
69521: LD_INT 0
69523: PUSH
69524: LD_INT 0
69526: PUSH
69527: LD_INT 0
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: ST_TO_ADDR
// if sci > 1 then
69536: LD_VAR 0 8
69540: PUSH
69541: LD_INT 1
69543: GREATER
69544: IFFALSE 69572
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
69546: LD_ADDR_VAR 0 4
69550: PUSH
69551: LD_VAR 0 4
69555: PUSH
69556: LD_VAR 0 8
69560: PUSH
69561: LD_VAR 0 8
69565: PUSH
69566: LD_INT 1
69568: ARRAY
69569: DIFF
69570: DIFF
69571: ST_TO_ADDR
// if tmp and not sci then
69572: LD_VAR 0 4
69576: PUSH
69577: LD_VAR 0 8
69581: NOT
69582: AND
69583: IFFALSE 69652
// begin sort := SortBySkill ( tmp , 4 ) ;
69585: LD_ADDR_VAR 0 9
69589: PUSH
69590: LD_VAR 0 4
69594: PPUSH
69595: LD_INT 4
69597: PPUSH
69598: CALL 60857 0 2
69602: ST_TO_ADDR
// if sort then
69603: LD_VAR 0 9
69607: IFFALSE 69623
// p := sort [ 1 ] ;
69609: LD_ADDR_VAR 0 11
69613: PUSH
69614: LD_VAR 0 9
69618: PUSH
69619: LD_INT 1
69621: ARRAY
69622: ST_TO_ADDR
// if p then
69623: LD_VAR 0 11
69627: IFFALSE 69652
// result := Replace ( result , 4 , p ) ;
69629: LD_ADDR_VAR 0 2
69633: PUSH
69634: LD_VAR 0 2
69638: PPUSH
69639: LD_INT 4
69641: PPUSH
69642: LD_VAR 0 11
69646: PPUSH
69647: CALL_OW 1
69651: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
69652: LD_ADDR_VAR 0 4
69656: PUSH
69657: LD_VAR 0 4
69661: PUSH
69662: LD_VAR 0 7
69666: DIFF
69667: ST_TO_ADDR
// if tmp and mech < 6 then
69668: LD_VAR 0 4
69672: PUSH
69673: LD_VAR 0 7
69677: PUSH
69678: LD_INT 6
69680: LESS
69681: AND
69682: IFFALSE 69870
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
69684: LD_ADDR_VAR 0 9
69688: PUSH
69689: LD_VAR 0 4
69693: PUSH
69694: LD_VAR 0 8
69698: PUSH
69699: LD_VAR 0 7
69703: UNION
69704: DIFF
69705: PPUSH
69706: LD_INT 3
69708: PPUSH
69709: CALL 60857 0 2
69713: ST_TO_ADDR
// p := [ ] ;
69714: LD_ADDR_VAR 0 11
69718: PUSH
69719: EMPTY
69720: ST_TO_ADDR
// if sort then
69721: LD_VAR 0 9
69725: IFFALSE 69841
// for i = 1 to 6 - mech do
69727: LD_ADDR_VAR 0 3
69731: PUSH
69732: DOUBLE
69733: LD_INT 1
69735: DEC
69736: ST_TO_ADDR
69737: LD_INT 6
69739: PUSH
69740: LD_VAR 0 7
69744: MINUS
69745: PUSH
69746: FOR_TO
69747: IFFALSE 69839
// begin if i = sort then
69749: LD_VAR 0 3
69753: PUSH
69754: LD_VAR 0 9
69758: EQUAL
69759: IFFALSE 69763
// break ;
69761: GO 69839
// if GetClass ( i ) = 3 then
69763: LD_VAR 0 3
69767: PPUSH
69768: CALL_OW 257
69772: PUSH
69773: LD_INT 3
69775: EQUAL
69776: IFFALSE 69780
// continue ;
69778: GO 69746
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69780: LD_ADDR_VAR 0 11
69784: PUSH
69785: LD_VAR 0 11
69789: PPUSH
69790: LD_VAR 0 11
69794: PUSH
69795: LD_INT 1
69797: PLUS
69798: PPUSH
69799: LD_VAR 0 9
69803: PUSH
69804: LD_VAR 0 3
69808: ARRAY
69809: PPUSH
69810: CALL_OW 2
69814: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69815: LD_ADDR_VAR 0 4
69819: PUSH
69820: LD_VAR 0 4
69824: PUSH
69825: LD_VAR 0 9
69829: PUSH
69830: LD_VAR 0 3
69834: ARRAY
69835: DIFF
69836: ST_TO_ADDR
// end ;
69837: GO 69746
69839: POP
69840: POP
// if p then
69841: LD_VAR 0 11
69845: IFFALSE 69870
// result := Replace ( result , 3 , p ) ;
69847: LD_ADDR_VAR 0 2
69851: PUSH
69852: LD_VAR 0 2
69856: PPUSH
69857: LD_INT 3
69859: PPUSH
69860: LD_VAR 0 11
69864: PPUSH
69865: CALL_OW 1
69869: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
69870: LD_ADDR_VAR 0 4
69874: PUSH
69875: LD_VAR 0 4
69879: PUSH
69880: LD_VAR 0 6
69884: DIFF
69885: ST_TO_ADDR
// if tmp and eng < 6 then
69886: LD_VAR 0 4
69890: PUSH
69891: LD_VAR 0 6
69895: PUSH
69896: LD_INT 6
69898: LESS
69899: AND
69900: IFFALSE 70094
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
69902: LD_ADDR_VAR 0 9
69906: PUSH
69907: LD_VAR 0 4
69911: PUSH
69912: LD_VAR 0 8
69916: PUSH
69917: LD_VAR 0 7
69921: UNION
69922: PUSH
69923: LD_VAR 0 6
69927: UNION
69928: DIFF
69929: PPUSH
69930: LD_INT 2
69932: PPUSH
69933: CALL 60857 0 2
69937: ST_TO_ADDR
// p := [ ] ;
69938: LD_ADDR_VAR 0 11
69942: PUSH
69943: EMPTY
69944: ST_TO_ADDR
// if sort then
69945: LD_VAR 0 9
69949: IFFALSE 70065
// for i = 1 to 6 - eng do
69951: LD_ADDR_VAR 0 3
69955: PUSH
69956: DOUBLE
69957: LD_INT 1
69959: DEC
69960: ST_TO_ADDR
69961: LD_INT 6
69963: PUSH
69964: LD_VAR 0 6
69968: MINUS
69969: PUSH
69970: FOR_TO
69971: IFFALSE 70063
// begin if i = sort then
69973: LD_VAR 0 3
69977: PUSH
69978: LD_VAR 0 9
69982: EQUAL
69983: IFFALSE 69987
// break ;
69985: GO 70063
// if GetClass ( i ) = 2 then
69987: LD_VAR 0 3
69991: PPUSH
69992: CALL_OW 257
69996: PUSH
69997: LD_INT 2
69999: EQUAL
70000: IFFALSE 70004
// continue ;
70002: GO 69970
// p := Insert ( p , p + 1 , sort [ i ] ) ;
70004: LD_ADDR_VAR 0 11
70008: PUSH
70009: LD_VAR 0 11
70013: PPUSH
70014: LD_VAR 0 11
70018: PUSH
70019: LD_INT 1
70021: PLUS
70022: PPUSH
70023: LD_VAR 0 9
70027: PUSH
70028: LD_VAR 0 3
70032: ARRAY
70033: PPUSH
70034: CALL_OW 2
70038: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
70039: LD_ADDR_VAR 0 4
70043: PUSH
70044: LD_VAR 0 4
70048: PUSH
70049: LD_VAR 0 9
70053: PUSH
70054: LD_VAR 0 3
70058: ARRAY
70059: DIFF
70060: ST_TO_ADDR
// end ;
70061: GO 69970
70063: POP
70064: POP
// if p then
70065: LD_VAR 0 11
70069: IFFALSE 70094
// result := Replace ( result , 2 , p ) ;
70071: LD_ADDR_VAR 0 2
70075: PUSH
70076: LD_VAR 0 2
70080: PPUSH
70081: LD_INT 2
70083: PPUSH
70084: LD_VAR 0 11
70088: PPUSH
70089: CALL_OW 1
70093: ST_TO_ADDR
// end ; exit ;
70094: GO 70818
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
70096: LD_EXP 63
70100: PUSH
70101: LD_EXP 62
70105: PUSH
70106: LD_VAR 0 1
70110: ARRAY
70111: ARRAY
70112: NOT
70113: PUSH
70114: LD_EXP 36
70118: PUSH
70119: LD_VAR 0 1
70123: ARRAY
70124: PPUSH
70125: LD_INT 30
70127: PUSH
70128: LD_INT 3
70130: PUSH
70131: EMPTY
70132: LIST
70133: LIST
70134: PPUSH
70135: CALL_OW 72
70139: AND
70140: PUSH
70141: LD_EXP 41
70145: PUSH
70146: LD_VAR 0 1
70150: ARRAY
70151: NOT
70152: AND
70153: IFFALSE 70818
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
70155: LD_ADDR_EXP 78
70159: PUSH
70160: LD_EXP 78
70164: PPUSH
70165: LD_VAR 0 1
70169: PPUSH
70170: LD_INT 6
70172: PPUSH
70173: CALL_OW 1
70177: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
70178: LD_ADDR_VAR 0 2
70182: PUSH
70183: LD_INT 0
70185: PUSH
70186: LD_INT 0
70188: PUSH
70189: LD_INT 0
70191: PUSH
70192: LD_INT 0
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: LIST
70199: LIST
70200: ST_TO_ADDR
// if sci >= 1 then
70201: LD_VAR 0 8
70205: PUSH
70206: LD_INT 1
70208: GREATEREQUAL
70209: IFFALSE 70231
// tmp := tmp diff sci [ 1 ] ;
70211: LD_ADDR_VAR 0 4
70215: PUSH
70216: LD_VAR 0 4
70220: PUSH
70221: LD_VAR 0 8
70225: PUSH
70226: LD_INT 1
70228: ARRAY
70229: DIFF
70230: ST_TO_ADDR
// if tmp and not sci then
70231: LD_VAR 0 4
70235: PUSH
70236: LD_VAR 0 8
70240: NOT
70241: AND
70242: IFFALSE 70311
// begin sort := SortBySkill ( tmp , 4 ) ;
70244: LD_ADDR_VAR 0 9
70248: PUSH
70249: LD_VAR 0 4
70253: PPUSH
70254: LD_INT 4
70256: PPUSH
70257: CALL 60857 0 2
70261: ST_TO_ADDR
// if sort then
70262: LD_VAR 0 9
70266: IFFALSE 70282
// p := sort [ 1 ] ;
70268: LD_ADDR_VAR 0 11
70272: PUSH
70273: LD_VAR 0 9
70277: PUSH
70278: LD_INT 1
70280: ARRAY
70281: ST_TO_ADDR
// if p then
70282: LD_VAR 0 11
70286: IFFALSE 70311
// result := Replace ( result , 4 , p ) ;
70288: LD_ADDR_VAR 0 2
70292: PUSH
70293: LD_VAR 0 2
70297: PPUSH
70298: LD_INT 4
70300: PPUSH
70301: LD_VAR 0 11
70305: PPUSH
70306: CALL_OW 1
70310: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
70311: LD_ADDR_VAR 0 4
70315: PUSH
70316: LD_VAR 0 4
70320: PUSH
70321: LD_VAR 0 7
70325: DIFF
70326: ST_TO_ADDR
// if tmp and mech < 6 then
70327: LD_VAR 0 4
70331: PUSH
70332: LD_VAR 0 7
70336: PUSH
70337: LD_INT 6
70339: LESS
70340: AND
70341: IFFALSE 70523
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
70343: LD_ADDR_VAR 0 9
70347: PUSH
70348: LD_VAR 0 4
70352: PUSH
70353: LD_VAR 0 7
70357: DIFF
70358: PPUSH
70359: LD_INT 3
70361: PPUSH
70362: CALL 60857 0 2
70366: ST_TO_ADDR
// p := [ ] ;
70367: LD_ADDR_VAR 0 11
70371: PUSH
70372: EMPTY
70373: ST_TO_ADDR
// if sort then
70374: LD_VAR 0 9
70378: IFFALSE 70494
// for i = 1 to 6 - mech do
70380: LD_ADDR_VAR 0 3
70384: PUSH
70385: DOUBLE
70386: LD_INT 1
70388: DEC
70389: ST_TO_ADDR
70390: LD_INT 6
70392: PUSH
70393: LD_VAR 0 7
70397: MINUS
70398: PUSH
70399: FOR_TO
70400: IFFALSE 70492
// begin if i = sort then
70402: LD_VAR 0 3
70406: PUSH
70407: LD_VAR 0 9
70411: EQUAL
70412: IFFALSE 70416
// break ;
70414: GO 70492
// if GetClass ( i ) = 3 then
70416: LD_VAR 0 3
70420: PPUSH
70421: CALL_OW 257
70425: PUSH
70426: LD_INT 3
70428: EQUAL
70429: IFFALSE 70433
// continue ;
70431: GO 70399
// p := Insert ( p , p + 1 , sort [ i ] ) ;
70433: LD_ADDR_VAR 0 11
70437: PUSH
70438: LD_VAR 0 11
70442: PPUSH
70443: LD_VAR 0 11
70447: PUSH
70448: LD_INT 1
70450: PLUS
70451: PPUSH
70452: LD_VAR 0 9
70456: PUSH
70457: LD_VAR 0 3
70461: ARRAY
70462: PPUSH
70463: CALL_OW 2
70467: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
70468: LD_ADDR_VAR 0 4
70472: PUSH
70473: LD_VAR 0 4
70477: PUSH
70478: LD_VAR 0 9
70482: PUSH
70483: LD_VAR 0 3
70487: ARRAY
70488: DIFF
70489: ST_TO_ADDR
// end ;
70490: GO 70399
70492: POP
70493: POP
// if p then
70494: LD_VAR 0 11
70498: IFFALSE 70523
// result := Replace ( result , 3 , p ) ;
70500: LD_ADDR_VAR 0 2
70504: PUSH
70505: LD_VAR 0 2
70509: PPUSH
70510: LD_INT 3
70512: PPUSH
70513: LD_VAR 0 11
70517: PPUSH
70518: CALL_OW 1
70522: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
70523: LD_ADDR_VAR 0 4
70527: PUSH
70528: LD_VAR 0 4
70532: PUSH
70533: LD_VAR 0 6
70537: DIFF
70538: ST_TO_ADDR
// if tmp and eng < 4 then
70539: LD_VAR 0 4
70543: PUSH
70544: LD_VAR 0 6
70548: PUSH
70549: LD_INT 4
70551: LESS
70552: AND
70553: IFFALSE 70743
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
70555: LD_ADDR_VAR 0 9
70559: PUSH
70560: LD_VAR 0 4
70564: PUSH
70565: LD_VAR 0 7
70569: PUSH
70570: LD_VAR 0 6
70574: UNION
70575: DIFF
70576: PPUSH
70577: LD_INT 2
70579: PPUSH
70580: CALL 60857 0 2
70584: ST_TO_ADDR
// p := [ ] ;
70585: LD_ADDR_VAR 0 11
70589: PUSH
70590: EMPTY
70591: ST_TO_ADDR
// if sort then
70592: LD_VAR 0 9
70596: IFFALSE 70712
// for i = 1 to 4 - eng do
70598: LD_ADDR_VAR 0 3
70602: PUSH
70603: DOUBLE
70604: LD_INT 1
70606: DEC
70607: ST_TO_ADDR
70608: LD_INT 4
70610: PUSH
70611: LD_VAR 0 6
70615: MINUS
70616: PUSH
70617: FOR_TO
70618: IFFALSE 70710
// begin if i = sort then
70620: LD_VAR 0 3
70624: PUSH
70625: LD_VAR 0 9
70629: EQUAL
70630: IFFALSE 70634
// break ;
70632: GO 70710
// if GetClass ( i ) = 2 then
70634: LD_VAR 0 3
70638: PPUSH
70639: CALL_OW 257
70643: PUSH
70644: LD_INT 2
70646: EQUAL
70647: IFFALSE 70651
// continue ;
70649: GO 70617
// p := Insert ( p , p + 1 , sort [ i ] ) ;
70651: LD_ADDR_VAR 0 11
70655: PUSH
70656: LD_VAR 0 11
70660: PPUSH
70661: LD_VAR 0 11
70665: PUSH
70666: LD_INT 1
70668: PLUS
70669: PPUSH
70670: LD_VAR 0 9
70674: PUSH
70675: LD_VAR 0 3
70679: ARRAY
70680: PPUSH
70681: CALL_OW 2
70685: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
70686: LD_ADDR_VAR 0 4
70690: PUSH
70691: LD_VAR 0 4
70695: PUSH
70696: LD_VAR 0 9
70700: PUSH
70701: LD_VAR 0 3
70705: ARRAY
70706: DIFF
70707: ST_TO_ADDR
// end ;
70708: GO 70617
70710: POP
70711: POP
// if p then
70712: LD_VAR 0 11
70716: IFFALSE 70741
// result := Replace ( result , 2 , p ) ;
70718: LD_ADDR_VAR 0 2
70722: PUSH
70723: LD_VAR 0 2
70727: PPUSH
70728: LD_INT 2
70730: PPUSH
70731: LD_VAR 0 11
70735: PPUSH
70736: CALL_OW 1
70740: ST_TO_ADDR
// end else
70741: GO 70787
// for i = eng downto 5 do
70743: LD_ADDR_VAR 0 3
70747: PUSH
70748: DOUBLE
70749: LD_VAR 0 6
70753: INC
70754: ST_TO_ADDR
70755: LD_INT 5
70757: PUSH
70758: FOR_DOWNTO
70759: IFFALSE 70785
// tmp := tmp union eng [ i ] ;
70761: LD_ADDR_VAR 0 4
70765: PUSH
70766: LD_VAR 0 4
70770: PUSH
70771: LD_VAR 0 6
70775: PUSH
70776: LD_VAR 0 3
70780: ARRAY
70781: UNION
70782: ST_TO_ADDR
70783: GO 70758
70785: POP
70786: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
70787: LD_ADDR_VAR 0 2
70791: PUSH
70792: LD_VAR 0 2
70796: PPUSH
70797: LD_INT 1
70799: PPUSH
70800: LD_VAR 0 4
70804: PUSH
70805: LD_VAR 0 5
70809: DIFF
70810: PPUSH
70811: CALL_OW 1
70815: ST_TO_ADDR
// exit ;
70816: GO 70818
// end ; end ;
70818: LD_VAR 0 2
70822: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
70823: LD_INT 0
70825: PPUSH
70826: PPUSH
70827: PPUSH
// if not mc_bases then
70828: LD_EXP 36
70832: NOT
70833: IFFALSE 70837
// exit ;
70835: GO 70943
// for i = 1 to mc_bases do
70837: LD_ADDR_VAR 0 2
70841: PUSH
70842: DOUBLE
70843: LD_INT 1
70845: DEC
70846: ST_TO_ADDR
70847: LD_EXP 36
70851: PUSH
70852: FOR_TO
70853: IFFALSE 70934
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
70855: LD_ADDR_VAR 0 3
70859: PUSH
70860: LD_EXP 36
70864: PUSH
70865: LD_VAR 0 2
70869: ARRAY
70870: PPUSH
70871: LD_INT 21
70873: PUSH
70874: LD_INT 3
70876: PUSH
70877: EMPTY
70878: LIST
70879: LIST
70880: PUSH
70881: LD_INT 3
70883: PUSH
70884: LD_INT 24
70886: PUSH
70887: LD_INT 1000
70889: PUSH
70890: EMPTY
70891: LIST
70892: LIST
70893: PUSH
70894: EMPTY
70895: LIST
70896: LIST
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: PPUSH
70902: CALL_OW 72
70906: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
70907: LD_ADDR_EXP 37
70911: PUSH
70912: LD_EXP 37
70916: PPUSH
70917: LD_VAR 0 2
70921: PPUSH
70922: LD_VAR 0 3
70926: PPUSH
70927: CALL_OW 1
70931: ST_TO_ADDR
// end ;
70932: GO 70852
70934: POP
70935: POP
// RaiseSailEvent ( 101 ) ;
70936: LD_INT 101
70938: PPUSH
70939: CALL_OW 427
// end ;
70943: LD_VAR 0 1
70947: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
70948: LD_INT 0
70950: PPUSH
70951: PPUSH
70952: PPUSH
70953: PPUSH
70954: PPUSH
70955: PPUSH
70956: PPUSH
// if not mc_bases then
70957: LD_EXP 36
70961: NOT
70962: IFFALSE 70966
// exit ;
70964: GO 71539
// for i = 1 to mc_bases do
70966: LD_ADDR_VAR 0 2
70970: PUSH
70971: DOUBLE
70972: LD_INT 1
70974: DEC
70975: ST_TO_ADDR
70976: LD_EXP 36
70980: PUSH
70981: FOR_TO
70982: IFFALSE 71530
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
70984: LD_ADDR_VAR 0 5
70988: PUSH
70989: LD_EXP 36
70993: PUSH
70994: LD_VAR 0 2
70998: ARRAY
70999: PUSH
71000: LD_EXP 65
71004: PUSH
71005: LD_VAR 0 2
71009: ARRAY
71010: UNION
71011: PPUSH
71012: LD_INT 21
71014: PUSH
71015: LD_INT 1
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PUSH
71022: LD_INT 1
71024: PUSH
71025: LD_INT 3
71027: PUSH
71028: LD_INT 54
71030: PUSH
71031: EMPTY
71032: LIST
71033: PUSH
71034: EMPTY
71035: LIST
71036: LIST
71037: PUSH
71038: LD_INT 3
71040: PUSH
71041: LD_INT 24
71043: PUSH
71044: LD_INT 800
71046: PUSH
71047: EMPTY
71048: LIST
71049: LIST
71050: PUSH
71051: EMPTY
71052: LIST
71053: LIST
71054: PUSH
71055: EMPTY
71056: LIST
71057: LIST
71058: LIST
71059: PUSH
71060: EMPTY
71061: LIST
71062: LIST
71063: PPUSH
71064: CALL_OW 72
71068: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
71069: LD_ADDR_VAR 0 6
71073: PUSH
71074: LD_EXP 36
71078: PUSH
71079: LD_VAR 0 2
71083: ARRAY
71084: PPUSH
71085: LD_INT 21
71087: PUSH
71088: LD_INT 1
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: PUSH
71095: LD_INT 1
71097: PUSH
71098: LD_INT 3
71100: PUSH
71101: LD_INT 54
71103: PUSH
71104: EMPTY
71105: LIST
71106: PUSH
71107: EMPTY
71108: LIST
71109: LIST
71110: PUSH
71111: LD_INT 3
71113: PUSH
71114: LD_INT 24
71116: PUSH
71117: LD_INT 250
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: PUSH
71124: EMPTY
71125: LIST
71126: LIST
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: LIST
71132: PUSH
71133: EMPTY
71134: LIST
71135: LIST
71136: PPUSH
71137: CALL_OW 72
71141: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
71142: LD_ADDR_VAR 0 7
71146: PUSH
71147: LD_VAR 0 5
71151: PUSH
71152: LD_VAR 0 6
71156: DIFF
71157: ST_TO_ADDR
// if not need_heal_1 then
71158: LD_VAR 0 6
71162: NOT
71163: IFFALSE 71196
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
71165: LD_ADDR_EXP 39
71169: PUSH
71170: LD_EXP 39
71174: PPUSH
71175: LD_VAR 0 2
71179: PUSH
71180: LD_INT 1
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: PPUSH
71187: EMPTY
71188: PPUSH
71189: CALL 26583 0 3
71193: ST_TO_ADDR
71194: GO 71266
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
71196: LD_ADDR_EXP 39
71200: PUSH
71201: LD_EXP 39
71205: PPUSH
71206: LD_VAR 0 2
71210: PUSH
71211: LD_INT 1
71213: PUSH
71214: EMPTY
71215: LIST
71216: LIST
71217: PPUSH
71218: LD_EXP 39
71222: PUSH
71223: LD_VAR 0 2
71227: ARRAY
71228: PUSH
71229: LD_INT 1
71231: ARRAY
71232: PPUSH
71233: LD_INT 3
71235: PUSH
71236: LD_INT 24
71238: PUSH
71239: LD_INT 1000
71241: PUSH
71242: EMPTY
71243: LIST
71244: LIST
71245: PUSH
71246: EMPTY
71247: LIST
71248: LIST
71249: PPUSH
71250: CALL_OW 72
71254: PUSH
71255: LD_VAR 0 6
71259: UNION
71260: PPUSH
71261: CALL 26583 0 3
71265: ST_TO_ADDR
// if not need_heal_2 then
71266: LD_VAR 0 7
71270: NOT
71271: IFFALSE 71304
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
71273: LD_ADDR_EXP 39
71277: PUSH
71278: LD_EXP 39
71282: PPUSH
71283: LD_VAR 0 2
71287: PUSH
71288: LD_INT 2
71290: PUSH
71291: EMPTY
71292: LIST
71293: LIST
71294: PPUSH
71295: EMPTY
71296: PPUSH
71297: CALL 26583 0 3
71301: ST_TO_ADDR
71302: GO 71336
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
71304: LD_ADDR_EXP 39
71308: PUSH
71309: LD_EXP 39
71313: PPUSH
71314: LD_VAR 0 2
71318: PUSH
71319: LD_INT 2
71321: PUSH
71322: EMPTY
71323: LIST
71324: LIST
71325: PPUSH
71326: LD_VAR 0 7
71330: PPUSH
71331: CALL 26583 0 3
71335: ST_TO_ADDR
// if need_heal_2 then
71336: LD_VAR 0 7
71340: IFFALSE 71512
// for j in need_heal_2 do
71342: LD_ADDR_VAR 0 3
71346: PUSH
71347: LD_VAR 0 7
71351: PUSH
71352: FOR_IN
71353: IFFALSE 71510
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
71355: LD_ADDR_VAR 0 5
71359: PUSH
71360: LD_EXP 36
71364: PUSH
71365: LD_VAR 0 2
71369: ARRAY
71370: PPUSH
71371: LD_INT 2
71373: PUSH
71374: LD_INT 30
71376: PUSH
71377: LD_INT 6
71379: PUSH
71380: EMPTY
71381: LIST
71382: LIST
71383: PUSH
71384: LD_INT 30
71386: PUSH
71387: LD_INT 7
71389: PUSH
71390: EMPTY
71391: LIST
71392: LIST
71393: PUSH
71394: LD_INT 30
71396: PUSH
71397: LD_INT 8
71399: PUSH
71400: EMPTY
71401: LIST
71402: LIST
71403: PUSH
71404: LD_INT 30
71406: PUSH
71407: LD_INT 0
71409: PUSH
71410: EMPTY
71411: LIST
71412: LIST
71413: PUSH
71414: LD_INT 30
71416: PUSH
71417: LD_INT 1
71419: PUSH
71420: EMPTY
71421: LIST
71422: LIST
71423: PUSH
71424: LD_INT 25
71426: PUSH
71427: LD_INT 4
71429: PUSH
71430: EMPTY
71431: LIST
71432: LIST
71433: PUSH
71434: EMPTY
71435: LIST
71436: LIST
71437: LIST
71438: LIST
71439: LIST
71440: LIST
71441: LIST
71442: PPUSH
71443: CALL_OW 72
71447: ST_TO_ADDR
// if tmp then
71448: LD_VAR 0 5
71452: IFFALSE 71508
// begin k := NearestUnitToUnit ( tmp , j ) ;
71454: LD_ADDR_VAR 0 4
71458: PUSH
71459: LD_VAR 0 5
71463: PPUSH
71464: LD_VAR 0 3
71468: PPUSH
71469: CALL_OW 74
71473: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
71474: LD_VAR 0 3
71478: PPUSH
71479: LD_VAR 0 4
71483: PPUSH
71484: CALL_OW 296
71488: PUSH
71489: LD_INT 7
71491: GREATER
71492: IFFALSE 71508
// ComMoveUnit ( j , k ) ;
71494: LD_VAR 0 3
71498: PPUSH
71499: LD_VAR 0 4
71503: PPUSH
71504: CALL_OW 112
// end ; end ;
71508: GO 71352
71510: POP
71511: POP
// if not need_heal_1 and not need_heal_2 then
71512: LD_VAR 0 6
71516: NOT
71517: PUSH
71518: LD_VAR 0 7
71522: NOT
71523: AND
71524: IFFALSE 71528
// continue ;
71526: GO 70981
// end ;
71528: GO 70981
71530: POP
71531: POP
// RaiseSailEvent ( 102 ) ;
71532: LD_INT 102
71534: PPUSH
71535: CALL_OW 427
// end ;
71539: LD_VAR 0 1
71543: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
71544: LD_INT 0
71546: PPUSH
71547: PPUSH
71548: PPUSH
71549: PPUSH
71550: PPUSH
71551: PPUSH
71552: PPUSH
71553: PPUSH
// if not mc_bases then
71554: LD_EXP 36
71558: NOT
71559: IFFALSE 71563
// exit ;
71561: GO 72403
// for i = 1 to mc_bases do
71563: LD_ADDR_VAR 0 2
71567: PUSH
71568: DOUBLE
71569: LD_INT 1
71571: DEC
71572: ST_TO_ADDR
71573: LD_EXP 36
71577: PUSH
71578: FOR_TO
71579: IFFALSE 72401
// begin if not mc_building_need_repair [ i ] then
71581: LD_EXP 37
71585: PUSH
71586: LD_VAR 0 2
71590: ARRAY
71591: NOT
71592: IFFALSE 71766
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
71594: LD_ADDR_VAR 0 6
71598: PUSH
71599: LD_EXP 55
71603: PUSH
71604: LD_VAR 0 2
71608: ARRAY
71609: PPUSH
71610: LD_INT 3
71612: PUSH
71613: LD_INT 24
71615: PUSH
71616: LD_INT 1000
71618: PUSH
71619: EMPTY
71620: LIST
71621: LIST
71622: PUSH
71623: EMPTY
71624: LIST
71625: LIST
71626: PUSH
71627: LD_INT 2
71629: PUSH
71630: LD_INT 34
71632: PUSH
71633: LD_INT 13
71635: PUSH
71636: EMPTY
71637: LIST
71638: LIST
71639: PUSH
71640: LD_INT 34
71642: PUSH
71643: LD_INT 52
71645: PUSH
71646: EMPTY
71647: LIST
71648: LIST
71649: PUSH
71650: EMPTY
71651: LIST
71652: LIST
71653: LIST
71654: PUSH
71655: EMPTY
71656: LIST
71657: LIST
71658: PPUSH
71659: CALL_OW 72
71663: ST_TO_ADDR
// if cranes then
71664: LD_VAR 0 6
71668: IFFALSE 71730
// for j in cranes do
71670: LD_ADDR_VAR 0 3
71674: PUSH
71675: LD_VAR 0 6
71679: PUSH
71680: FOR_IN
71681: IFFALSE 71728
// if not IsInArea ( j , mc_parking [ i ] ) then
71683: LD_VAR 0 3
71687: PPUSH
71688: LD_EXP 60
71692: PUSH
71693: LD_VAR 0 2
71697: ARRAY
71698: PPUSH
71699: CALL_OW 308
71703: NOT
71704: IFFALSE 71726
// ComMoveToArea ( j , mc_parking [ i ] ) ;
71706: LD_VAR 0 3
71710: PPUSH
71711: LD_EXP 60
71715: PUSH
71716: LD_VAR 0 2
71720: ARRAY
71721: PPUSH
71722: CALL_OW 113
71726: GO 71680
71728: POP
71729: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
71730: LD_ADDR_EXP 38
71734: PUSH
71735: LD_EXP 38
71739: PPUSH
71740: LD_VAR 0 2
71744: PPUSH
71745: EMPTY
71746: PPUSH
71747: CALL_OW 1
71751: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
71752: LD_VAR 0 2
71756: PPUSH
71757: LD_INT 101
71759: PPUSH
71760: CALL 66656 0 2
// continue ;
71764: GO 71578
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
71766: LD_ADDR_EXP 42
71770: PUSH
71771: LD_EXP 42
71775: PPUSH
71776: LD_VAR 0 2
71780: PPUSH
71781: EMPTY
71782: PPUSH
71783: CALL_OW 1
71787: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
71788: LD_VAR 0 2
71792: PPUSH
71793: LD_INT 103
71795: PPUSH
71796: CALL 66656 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
71800: LD_ADDR_VAR 0 5
71804: PUSH
71805: LD_EXP 36
71809: PUSH
71810: LD_VAR 0 2
71814: ARRAY
71815: PUSH
71816: LD_EXP 65
71820: PUSH
71821: LD_VAR 0 2
71825: ARRAY
71826: UNION
71827: PPUSH
71828: LD_INT 2
71830: PUSH
71831: LD_INT 25
71833: PUSH
71834: LD_INT 2
71836: PUSH
71837: EMPTY
71838: LIST
71839: LIST
71840: PUSH
71841: LD_INT 25
71843: PUSH
71844: LD_INT 16
71846: PUSH
71847: EMPTY
71848: LIST
71849: LIST
71850: PUSH
71851: EMPTY
71852: LIST
71853: LIST
71854: LIST
71855: PUSH
71856: EMPTY
71857: LIST
71858: PPUSH
71859: CALL_OW 72
71863: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
71864: LD_ADDR_VAR 0 6
71868: PUSH
71869: LD_EXP 55
71873: PUSH
71874: LD_VAR 0 2
71878: ARRAY
71879: PPUSH
71880: LD_INT 2
71882: PUSH
71883: LD_INT 34
71885: PUSH
71886: LD_INT 13
71888: PUSH
71889: EMPTY
71890: LIST
71891: LIST
71892: PUSH
71893: LD_INT 34
71895: PUSH
71896: LD_INT 52
71898: PUSH
71899: EMPTY
71900: LIST
71901: LIST
71902: PUSH
71903: EMPTY
71904: LIST
71905: LIST
71906: LIST
71907: PPUSH
71908: CALL_OW 72
71912: ST_TO_ADDR
// if cranes then
71913: LD_VAR 0 6
71917: IFFALSE 72053
// begin for j in cranes do
71919: LD_ADDR_VAR 0 3
71923: PUSH
71924: LD_VAR 0 6
71928: PUSH
71929: FOR_IN
71930: IFFALSE 72051
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
71932: LD_VAR 0 3
71936: PPUSH
71937: CALL_OW 256
71941: PUSH
71942: LD_INT 500
71944: GREATEREQUAL
71945: PUSH
71946: LD_VAR 0 3
71950: PPUSH
71951: CALL_OW 314
71955: NOT
71956: AND
71957: IFFALSE 71991
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
71959: LD_VAR 0 3
71963: PPUSH
71964: LD_EXP 37
71968: PUSH
71969: LD_VAR 0 2
71973: ARRAY
71974: PPUSH
71975: LD_VAR 0 3
71979: PPUSH
71980: CALL_OW 74
71984: PPUSH
71985: CALL_OW 130
71989: GO 72049
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
71991: LD_VAR 0 3
71995: PPUSH
71996: CALL_OW 256
72000: PUSH
72001: LD_INT 500
72003: LESS
72004: PUSH
72005: LD_VAR 0 3
72009: PPUSH
72010: LD_EXP 60
72014: PUSH
72015: LD_VAR 0 2
72019: ARRAY
72020: PPUSH
72021: CALL_OW 308
72025: NOT
72026: AND
72027: IFFALSE 72049
// ComMoveToArea ( j , mc_parking [ i ] ) ;
72029: LD_VAR 0 3
72033: PPUSH
72034: LD_EXP 60
72038: PUSH
72039: LD_VAR 0 2
72043: ARRAY
72044: PPUSH
72045: CALL_OW 113
72049: GO 71929
72051: POP
72052: POP
// end ; if not tmp then
72053: LD_VAR 0 5
72057: NOT
72058: IFFALSE 72062
// continue ;
72060: GO 71578
// for j in tmp do
72062: LD_ADDR_VAR 0 3
72066: PUSH
72067: LD_VAR 0 5
72071: PUSH
72072: FOR_IN
72073: IFFALSE 72397
// begin if mc_need_heal [ i ] then
72075: LD_EXP 39
72079: PUSH
72080: LD_VAR 0 2
72084: ARRAY
72085: IFFALSE 72133
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
72087: LD_VAR 0 3
72091: PUSH
72092: LD_EXP 39
72096: PUSH
72097: LD_VAR 0 2
72101: ARRAY
72102: PUSH
72103: LD_INT 1
72105: ARRAY
72106: IN
72107: PUSH
72108: LD_VAR 0 3
72112: PUSH
72113: LD_EXP 39
72117: PUSH
72118: LD_VAR 0 2
72122: ARRAY
72123: PUSH
72124: LD_INT 2
72126: ARRAY
72127: IN
72128: OR
72129: IFFALSE 72133
// continue ;
72131: GO 72072
// if IsInUnit ( j ) then
72133: LD_VAR 0 3
72137: PPUSH
72138: CALL_OW 310
72142: IFFALSE 72153
// ComExitBuilding ( j ) ;
72144: LD_VAR 0 3
72148: PPUSH
72149: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
72153: LD_VAR 0 3
72157: PUSH
72158: LD_EXP 38
72162: PUSH
72163: LD_VAR 0 2
72167: ARRAY
72168: IN
72169: NOT
72170: IFFALSE 72228
// begin SetTag ( j , 101 ) ;
72172: LD_VAR 0 3
72176: PPUSH
72177: LD_INT 101
72179: PPUSH
72180: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
72184: LD_ADDR_EXP 38
72188: PUSH
72189: LD_EXP 38
72193: PPUSH
72194: LD_VAR 0 2
72198: PUSH
72199: LD_EXP 38
72203: PUSH
72204: LD_VAR 0 2
72208: ARRAY
72209: PUSH
72210: LD_INT 1
72212: PLUS
72213: PUSH
72214: EMPTY
72215: LIST
72216: LIST
72217: PPUSH
72218: LD_VAR 0 3
72222: PPUSH
72223: CALL 26583 0 3
72227: ST_TO_ADDR
// end ; wait ( 1 ) ;
72228: LD_INT 1
72230: PPUSH
72231: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
72235: LD_ADDR_VAR 0 7
72239: PUSH
72240: LD_EXP 37
72244: PUSH
72245: LD_VAR 0 2
72249: ARRAY
72250: ST_TO_ADDR
// if mc_scan [ i ] then
72251: LD_EXP 59
72255: PUSH
72256: LD_VAR 0 2
72260: ARRAY
72261: IFFALSE 72330
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ] ) ;
72263: LD_ADDR_VAR 0 7
72267: PUSH
72268: LD_EXP 37
72272: PUSH
72273: LD_VAR 0 2
72277: ARRAY
72278: PPUSH
72279: LD_INT 3
72281: PUSH
72282: LD_INT 2
72284: PUSH
72285: LD_INT 30
72287: PUSH
72288: LD_INT 32
72290: PUSH
72291: EMPTY
72292: LIST
72293: LIST
72294: PUSH
72295: LD_INT 30
72297: PUSH
72298: LD_INT 33
72300: PUSH
72301: EMPTY
72302: LIST
72303: LIST
72304: PUSH
72305: LD_INT 30
72307: PUSH
72308: LD_INT 31
72310: PUSH
72311: EMPTY
72312: LIST
72313: LIST
72314: PUSH
72315: EMPTY
72316: LIST
72317: LIST
72318: LIST
72319: LIST
72320: PUSH
72321: EMPTY
72322: LIST
72323: LIST
72324: PPUSH
72325: CALL_OW 72
72329: ST_TO_ADDR
// if not to_repair_tmp then
72330: LD_VAR 0 7
72334: NOT
72335: IFFALSE 72339
// continue ;
72337: GO 72072
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
72339: LD_ADDR_VAR 0 8
72343: PUSH
72344: LD_VAR 0 7
72348: PPUSH
72349: LD_VAR 0 3
72353: PPUSH
72354: CALL_OW 74
72358: ST_TO_ADDR
// if DangerAtRange ( to_repair , 14 ) [ 4 ] < 5 then
72359: LD_VAR 0 8
72363: PPUSH
72364: LD_INT 14
72366: PPUSH
72367: CALL 29176 0 2
72371: PUSH
72372: LD_INT 4
72374: ARRAY
72375: PUSH
72376: LD_INT 5
72378: LESS
72379: IFFALSE 72395
// ComRepairBuilding ( j , to_repair ) ;
72381: LD_VAR 0 3
72385: PPUSH
72386: LD_VAR 0 8
72390: PPUSH
72391: CALL_OW 130
// end ;
72395: GO 72072
72397: POP
72398: POP
// end ;
72399: GO 71578
72401: POP
72402: POP
// end ;
72403: LD_VAR 0 1
72407: RET
// export function MC_Heal ; var i , j , tmp ; begin
72408: LD_INT 0
72410: PPUSH
72411: PPUSH
72412: PPUSH
72413: PPUSH
// if not mc_bases then
72414: LD_EXP 36
72418: NOT
72419: IFFALSE 72423
// exit ;
72421: GO 72825
// for i = 1 to mc_bases do
72423: LD_ADDR_VAR 0 2
72427: PUSH
72428: DOUBLE
72429: LD_INT 1
72431: DEC
72432: ST_TO_ADDR
72433: LD_EXP 36
72437: PUSH
72438: FOR_TO
72439: IFFALSE 72823
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
72441: LD_EXP 39
72445: PUSH
72446: LD_VAR 0 2
72450: ARRAY
72451: PUSH
72452: LD_INT 1
72454: ARRAY
72455: NOT
72456: PUSH
72457: LD_EXP 39
72461: PUSH
72462: LD_VAR 0 2
72466: ARRAY
72467: PUSH
72468: LD_INT 2
72470: ARRAY
72471: NOT
72472: AND
72473: IFFALSE 72511
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
72475: LD_ADDR_EXP 40
72479: PUSH
72480: LD_EXP 40
72484: PPUSH
72485: LD_VAR 0 2
72489: PPUSH
72490: EMPTY
72491: PPUSH
72492: CALL_OW 1
72496: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
72497: LD_VAR 0 2
72501: PPUSH
72502: LD_INT 102
72504: PPUSH
72505: CALL 66656 0 2
// continue ;
72509: GO 72438
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
72511: LD_ADDR_VAR 0 4
72515: PUSH
72516: LD_EXP 36
72520: PUSH
72521: LD_VAR 0 2
72525: ARRAY
72526: PPUSH
72527: LD_INT 25
72529: PUSH
72530: LD_INT 4
72532: PUSH
72533: EMPTY
72534: LIST
72535: LIST
72536: PPUSH
72537: CALL_OW 72
72541: ST_TO_ADDR
// if not tmp then
72542: LD_VAR 0 4
72546: NOT
72547: IFFALSE 72551
// continue ;
72549: GO 72438
// if mc_taming [ i ] then
72551: LD_EXP 67
72555: PUSH
72556: LD_VAR 0 2
72560: ARRAY
72561: IFFALSE 72585
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
72563: LD_ADDR_EXP 67
72567: PUSH
72568: LD_EXP 67
72572: PPUSH
72573: LD_VAR 0 2
72577: PPUSH
72578: EMPTY
72579: PPUSH
72580: CALL_OW 1
72584: ST_TO_ADDR
// for j in tmp do
72585: LD_ADDR_VAR 0 3
72589: PUSH
72590: LD_VAR 0 4
72594: PUSH
72595: FOR_IN
72596: IFFALSE 72819
// begin if IsInUnit ( j ) then
72598: LD_VAR 0 3
72602: PPUSH
72603: CALL_OW 310
72607: IFFALSE 72618
// ComExitBuilding ( j ) ;
72609: LD_VAR 0 3
72613: PPUSH
72614: CALL_OW 122
// if not j in mc_healers [ i ] then
72618: LD_VAR 0 3
72622: PUSH
72623: LD_EXP 40
72627: PUSH
72628: LD_VAR 0 2
72632: ARRAY
72633: IN
72634: NOT
72635: IFFALSE 72681
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
72637: LD_ADDR_EXP 40
72641: PUSH
72642: LD_EXP 40
72646: PPUSH
72647: LD_VAR 0 2
72651: PUSH
72652: LD_EXP 40
72656: PUSH
72657: LD_VAR 0 2
72661: ARRAY
72662: PUSH
72663: LD_INT 1
72665: PLUS
72666: PUSH
72667: EMPTY
72668: LIST
72669: LIST
72670: PPUSH
72671: LD_VAR 0 3
72675: PPUSH
72676: CALL 26583 0 3
72680: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
72681: LD_VAR 0 3
72685: PPUSH
72686: CALL_OW 110
72690: PUSH
72691: LD_INT 102
72693: NONEQUAL
72694: IFFALSE 72708
// SetTag ( j , 102 ) ;
72696: LD_VAR 0 3
72700: PPUSH
72701: LD_INT 102
72703: PPUSH
72704: CALL_OW 109
// Wait ( 3 ) ;
72708: LD_INT 3
72710: PPUSH
72711: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
72715: LD_EXP 39
72719: PUSH
72720: LD_VAR 0 2
72724: ARRAY
72725: PUSH
72726: LD_INT 1
72728: ARRAY
72729: IFFALSE 72761
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
72731: LD_VAR 0 3
72735: PPUSH
72736: LD_EXP 39
72740: PUSH
72741: LD_VAR 0 2
72745: ARRAY
72746: PUSH
72747: LD_INT 1
72749: ARRAY
72750: PUSH
72751: LD_INT 1
72753: ARRAY
72754: PPUSH
72755: CALL_OW 128
72759: GO 72817
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
72761: LD_VAR 0 3
72765: PPUSH
72766: CALL_OW 314
72770: NOT
72771: PUSH
72772: LD_EXP 39
72776: PUSH
72777: LD_VAR 0 2
72781: ARRAY
72782: PUSH
72783: LD_INT 2
72785: ARRAY
72786: AND
72787: IFFALSE 72817
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
72789: LD_VAR 0 3
72793: PPUSH
72794: LD_EXP 39
72798: PUSH
72799: LD_VAR 0 2
72803: ARRAY
72804: PUSH
72805: LD_INT 2
72807: ARRAY
72808: PUSH
72809: LD_INT 1
72811: ARRAY
72812: PPUSH
72813: CALL_OW 128
// end ;
72817: GO 72595
72819: POP
72820: POP
// end ;
72821: GO 72438
72823: POP
72824: POP
// end ;
72825: LD_VAR 0 1
72829: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
72830: LD_INT 0
72832: PPUSH
72833: PPUSH
72834: PPUSH
72835: PPUSH
72836: PPUSH
// if not mc_bases then
72837: LD_EXP 36
72841: NOT
72842: IFFALSE 72846
// exit ;
72844: GO 73989
// for i = 1 to mc_bases do
72846: LD_ADDR_VAR 0 2
72850: PUSH
72851: DOUBLE
72852: LD_INT 1
72854: DEC
72855: ST_TO_ADDR
72856: LD_EXP 36
72860: PUSH
72861: FOR_TO
72862: IFFALSE 73987
// begin if mc_scan [ i ] then
72864: LD_EXP 59
72868: PUSH
72869: LD_VAR 0 2
72873: ARRAY
72874: IFFALSE 72878
// continue ;
72876: GO 72861
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
72878: LD_EXP 41
72882: PUSH
72883: LD_VAR 0 2
72887: ARRAY
72888: NOT
72889: PUSH
72890: LD_EXP 43
72894: PUSH
72895: LD_VAR 0 2
72899: ARRAY
72900: NOT
72901: AND
72902: PUSH
72903: LD_EXP 42
72907: PUSH
72908: LD_VAR 0 2
72912: ARRAY
72913: AND
72914: IFFALSE 72952
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
72916: LD_ADDR_EXP 42
72920: PUSH
72921: LD_EXP 42
72925: PPUSH
72926: LD_VAR 0 2
72930: PPUSH
72931: EMPTY
72932: PPUSH
72933: CALL_OW 1
72937: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
72938: LD_VAR 0 2
72942: PPUSH
72943: LD_INT 103
72945: PPUSH
72946: CALL 66656 0 2
// continue ;
72950: GO 72861
// end ; if mc_construct_list [ i ] then
72952: LD_EXP 43
72956: PUSH
72957: LD_VAR 0 2
72961: ARRAY
72962: IFFALSE 73182
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
72964: LD_ADDR_VAR 0 4
72968: PUSH
72969: LD_EXP 36
72973: PUSH
72974: LD_VAR 0 2
72978: ARRAY
72979: PPUSH
72980: LD_INT 25
72982: PUSH
72983: LD_INT 2
72985: PUSH
72986: EMPTY
72987: LIST
72988: LIST
72989: PPUSH
72990: CALL_OW 72
72994: PUSH
72995: LD_EXP 38
72999: PUSH
73000: LD_VAR 0 2
73004: ARRAY
73005: DIFF
73006: ST_TO_ADDR
// if not tmp then
73007: LD_VAR 0 4
73011: NOT
73012: IFFALSE 73016
// continue ;
73014: GO 72861
// for j in tmp do
73016: LD_ADDR_VAR 0 3
73020: PUSH
73021: LD_VAR 0 4
73025: PUSH
73026: FOR_IN
73027: IFFALSE 73178
// begin if not mc_builders [ i ] then
73029: LD_EXP 42
73033: PUSH
73034: LD_VAR 0 2
73038: ARRAY
73039: NOT
73040: IFFALSE 73098
// begin SetTag ( j , 103 ) ;
73042: LD_VAR 0 3
73046: PPUSH
73047: LD_INT 103
73049: PPUSH
73050: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
73054: LD_ADDR_EXP 42
73058: PUSH
73059: LD_EXP 42
73063: PPUSH
73064: LD_VAR 0 2
73068: PUSH
73069: LD_EXP 42
73073: PUSH
73074: LD_VAR 0 2
73078: ARRAY
73079: PUSH
73080: LD_INT 1
73082: PLUS
73083: PUSH
73084: EMPTY
73085: LIST
73086: LIST
73087: PPUSH
73088: LD_VAR 0 3
73092: PPUSH
73093: CALL 26583 0 3
73097: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
73098: LD_VAR 0 3
73102: PPUSH
73103: CALL_OW 310
73107: IFFALSE 73118
// ComExitBuilding ( j ) ;
73109: LD_VAR 0 3
73113: PPUSH
73114: CALL_OW 122
// wait ( 3 ) ;
73118: LD_INT 3
73120: PPUSH
73121: CALL_OW 67
// if not mc_construct_list [ i ] then
73125: LD_EXP 43
73129: PUSH
73130: LD_VAR 0 2
73134: ARRAY
73135: NOT
73136: IFFALSE 73140
// break ;
73138: GO 73178
// if not HasTask ( j ) then
73140: LD_VAR 0 3
73144: PPUSH
73145: CALL_OW 314
73149: NOT
73150: IFFALSE 73176
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
73152: LD_VAR 0 3
73156: PPUSH
73157: LD_EXP 43
73161: PUSH
73162: LD_VAR 0 2
73166: ARRAY
73167: PUSH
73168: LD_INT 1
73170: ARRAY
73171: PPUSH
73172: CALL 29434 0 2
// end ;
73176: GO 73026
73178: POP
73179: POP
// end else
73180: GO 73985
// if mc_build_list [ i ] then
73182: LD_EXP 41
73186: PUSH
73187: LD_VAR 0 2
73191: ARRAY
73192: IFFALSE 73985
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
73194: LD_ADDR_VAR 0 5
73198: PUSH
73199: LD_EXP 36
73203: PUSH
73204: LD_VAR 0 2
73208: ARRAY
73209: PPUSH
73210: LD_INT 2
73212: PUSH
73213: LD_INT 30
73215: PUSH
73216: LD_INT 0
73218: PUSH
73219: EMPTY
73220: LIST
73221: LIST
73222: PUSH
73223: LD_INT 30
73225: PUSH
73226: LD_INT 1
73228: PUSH
73229: EMPTY
73230: LIST
73231: LIST
73232: PUSH
73233: EMPTY
73234: LIST
73235: LIST
73236: LIST
73237: PPUSH
73238: CALL_OW 72
73242: ST_TO_ADDR
// if depot then
73243: LD_VAR 0 5
73247: IFFALSE 73265
// depot := depot [ 1 ] else
73249: LD_ADDR_VAR 0 5
73253: PUSH
73254: LD_VAR 0 5
73258: PUSH
73259: LD_INT 1
73261: ARRAY
73262: ST_TO_ADDR
73263: GO 73273
// depot := 0 ;
73265: LD_ADDR_VAR 0 5
73269: PUSH
73270: LD_INT 0
73272: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
73273: LD_EXP 41
73277: PUSH
73278: LD_VAR 0 2
73282: ARRAY
73283: PUSH
73284: LD_INT 1
73286: ARRAY
73287: PUSH
73288: LD_INT 1
73290: ARRAY
73291: PPUSH
73292: CALL 29264 0 1
73296: PUSH
73297: LD_EXP 36
73301: PUSH
73302: LD_VAR 0 2
73306: ARRAY
73307: PPUSH
73308: LD_INT 2
73310: PUSH
73311: LD_INT 30
73313: PUSH
73314: LD_INT 2
73316: PUSH
73317: EMPTY
73318: LIST
73319: LIST
73320: PUSH
73321: LD_INT 30
73323: PUSH
73324: LD_INT 3
73326: PUSH
73327: EMPTY
73328: LIST
73329: LIST
73330: PUSH
73331: EMPTY
73332: LIST
73333: LIST
73334: LIST
73335: PPUSH
73336: CALL_OW 72
73340: NOT
73341: AND
73342: IFFALSE 73447
// begin for j = 1 to mc_build_list [ i ] do
73344: LD_ADDR_VAR 0 3
73348: PUSH
73349: DOUBLE
73350: LD_INT 1
73352: DEC
73353: ST_TO_ADDR
73354: LD_EXP 41
73358: PUSH
73359: LD_VAR 0 2
73363: ARRAY
73364: PUSH
73365: FOR_TO
73366: IFFALSE 73445
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
73368: LD_EXP 41
73372: PUSH
73373: LD_VAR 0 2
73377: ARRAY
73378: PUSH
73379: LD_VAR 0 3
73383: ARRAY
73384: PUSH
73385: LD_INT 1
73387: ARRAY
73388: PUSH
73389: LD_INT 2
73391: EQUAL
73392: IFFALSE 73443
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
73394: LD_ADDR_EXP 41
73398: PUSH
73399: LD_EXP 41
73403: PPUSH
73404: LD_VAR 0 2
73408: PPUSH
73409: LD_EXP 41
73413: PUSH
73414: LD_VAR 0 2
73418: ARRAY
73419: PPUSH
73420: LD_VAR 0 3
73424: PPUSH
73425: LD_INT 1
73427: PPUSH
73428: LD_INT 0
73430: PPUSH
73431: CALL 26001 0 4
73435: PPUSH
73436: CALL_OW 1
73440: ST_TO_ADDR
// break ;
73441: GO 73445
// end ;
73443: GO 73365
73445: POP
73446: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
73447: LD_EXP 41
73451: PUSH
73452: LD_VAR 0 2
73456: ARRAY
73457: PUSH
73458: LD_INT 1
73460: ARRAY
73461: PUSH
73462: LD_INT 1
73464: ARRAY
73465: PUSH
73466: LD_INT 0
73468: EQUAL
73469: PUSH
73470: LD_VAR 0 5
73474: PUSH
73475: LD_VAR 0 5
73479: PPUSH
73480: LD_EXP 41
73484: PUSH
73485: LD_VAR 0 2
73489: ARRAY
73490: PUSH
73491: LD_INT 1
73493: ARRAY
73494: PUSH
73495: LD_INT 1
73497: ARRAY
73498: PPUSH
73499: LD_EXP 41
73503: PUSH
73504: LD_VAR 0 2
73508: ARRAY
73509: PUSH
73510: LD_INT 1
73512: ARRAY
73513: PUSH
73514: LD_INT 2
73516: ARRAY
73517: PPUSH
73518: LD_EXP 41
73522: PUSH
73523: LD_VAR 0 2
73527: ARRAY
73528: PUSH
73529: LD_INT 1
73531: ARRAY
73532: PUSH
73533: LD_INT 3
73535: ARRAY
73536: PPUSH
73537: LD_EXP 41
73541: PUSH
73542: LD_VAR 0 2
73546: ARRAY
73547: PUSH
73548: LD_INT 1
73550: ARRAY
73551: PUSH
73552: LD_INT 4
73554: ARRAY
73555: PPUSH
73556: CALL 33998 0 5
73560: AND
73561: OR
73562: IFFALSE 73843
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
73564: LD_ADDR_VAR 0 4
73568: PUSH
73569: LD_EXP 36
73573: PUSH
73574: LD_VAR 0 2
73578: ARRAY
73579: PPUSH
73580: LD_INT 25
73582: PUSH
73583: LD_INT 2
73585: PUSH
73586: EMPTY
73587: LIST
73588: LIST
73589: PPUSH
73590: CALL_OW 72
73594: PUSH
73595: LD_EXP 38
73599: PUSH
73600: LD_VAR 0 2
73604: ARRAY
73605: DIFF
73606: ST_TO_ADDR
// if not tmp then
73607: LD_VAR 0 4
73611: NOT
73612: IFFALSE 73616
// continue ;
73614: GO 72861
// for j in tmp do
73616: LD_ADDR_VAR 0 3
73620: PUSH
73621: LD_VAR 0 4
73625: PUSH
73626: FOR_IN
73627: IFFALSE 73839
// begin if not mc_builders [ i ] then
73629: LD_EXP 42
73633: PUSH
73634: LD_VAR 0 2
73638: ARRAY
73639: NOT
73640: IFFALSE 73698
// begin SetTag ( j , 103 ) ;
73642: LD_VAR 0 3
73646: PPUSH
73647: LD_INT 103
73649: PPUSH
73650: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
73654: LD_ADDR_EXP 42
73658: PUSH
73659: LD_EXP 42
73663: PPUSH
73664: LD_VAR 0 2
73668: PUSH
73669: LD_EXP 42
73673: PUSH
73674: LD_VAR 0 2
73678: ARRAY
73679: PUSH
73680: LD_INT 1
73682: PLUS
73683: PUSH
73684: EMPTY
73685: LIST
73686: LIST
73687: PPUSH
73688: LD_VAR 0 3
73692: PPUSH
73693: CALL 26583 0 3
73697: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
73698: LD_VAR 0 3
73702: PPUSH
73703: CALL_OW 310
73707: IFFALSE 73718
// ComExitBuilding ( j ) ;
73709: LD_VAR 0 3
73713: PPUSH
73714: CALL_OW 122
// wait ( 3 ) ;
73718: LD_INT 3
73720: PPUSH
73721: CALL_OW 67
// if not mc_build_list [ i ] then
73725: LD_EXP 41
73729: PUSH
73730: LD_VAR 0 2
73734: ARRAY
73735: NOT
73736: IFFALSE 73740
// break ;
73738: GO 73839
// if not HasTask ( j ) then
73740: LD_VAR 0 3
73744: PPUSH
73745: CALL_OW 314
73749: NOT
73750: IFFALSE 73837
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
73752: LD_VAR 0 3
73756: PPUSH
73757: LD_EXP 41
73761: PUSH
73762: LD_VAR 0 2
73766: ARRAY
73767: PUSH
73768: LD_INT 1
73770: ARRAY
73771: PUSH
73772: LD_INT 1
73774: ARRAY
73775: PPUSH
73776: LD_EXP 41
73780: PUSH
73781: LD_VAR 0 2
73785: ARRAY
73786: PUSH
73787: LD_INT 1
73789: ARRAY
73790: PUSH
73791: LD_INT 2
73793: ARRAY
73794: PPUSH
73795: LD_EXP 41
73799: PUSH
73800: LD_VAR 0 2
73804: ARRAY
73805: PUSH
73806: LD_INT 1
73808: ARRAY
73809: PUSH
73810: LD_INT 3
73812: ARRAY
73813: PPUSH
73814: LD_EXP 41
73818: PUSH
73819: LD_VAR 0 2
73823: ARRAY
73824: PUSH
73825: LD_INT 1
73827: ARRAY
73828: PUSH
73829: LD_INT 4
73831: ARRAY
73832: PPUSH
73833: CALL_OW 145
// end ;
73837: GO 73626
73839: POP
73840: POP
// end else
73841: GO 73985
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
73843: LD_EXP 36
73847: PUSH
73848: LD_VAR 0 2
73852: ARRAY
73853: PPUSH
73854: LD_EXP 41
73858: PUSH
73859: LD_VAR 0 2
73863: ARRAY
73864: PUSH
73865: LD_INT 1
73867: ARRAY
73868: PUSH
73869: LD_INT 1
73871: ARRAY
73872: PPUSH
73873: LD_EXP 41
73877: PUSH
73878: LD_VAR 0 2
73882: ARRAY
73883: PUSH
73884: LD_INT 1
73886: ARRAY
73887: PUSH
73888: LD_INT 2
73890: ARRAY
73891: PPUSH
73892: LD_EXP 41
73896: PUSH
73897: LD_VAR 0 2
73901: ARRAY
73902: PUSH
73903: LD_INT 1
73905: ARRAY
73906: PUSH
73907: LD_INT 3
73909: ARRAY
73910: PPUSH
73911: LD_EXP 41
73915: PUSH
73916: LD_VAR 0 2
73920: ARRAY
73921: PUSH
73922: LD_INT 1
73924: ARRAY
73925: PUSH
73926: LD_INT 4
73928: ARRAY
73929: PPUSH
73930: CALL 33334 0 5
73934: NOT
73935: IFFALSE 73985
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
73937: LD_ADDR_EXP 41
73941: PUSH
73942: LD_EXP 41
73946: PPUSH
73947: LD_VAR 0 2
73951: PPUSH
73952: LD_EXP 41
73956: PUSH
73957: LD_VAR 0 2
73961: ARRAY
73962: PPUSH
73963: LD_INT 1
73965: PPUSH
73966: LD_INT 1
73968: NEG
73969: PPUSH
73970: LD_INT 0
73972: PPUSH
73973: CALL 26001 0 4
73977: PPUSH
73978: CALL_OW 1
73982: ST_TO_ADDR
// continue ;
73983: GO 72861
// end ; end ; end ;
73985: GO 72861
73987: POP
73988: POP
// end ;
73989: LD_VAR 0 1
73993: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
73994: LD_INT 0
73996: PPUSH
73997: PPUSH
73998: PPUSH
73999: PPUSH
74000: PPUSH
74001: PPUSH
// if not mc_bases then
74002: LD_EXP 36
74006: NOT
74007: IFFALSE 74011
// exit ;
74009: GO 74438
// for i = 1 to mc_bases do
74011: LD_ADDR_VAR 0 2
74015: PUSH
74016: DOUBLE
74017: LD_INT 1
74019: DEC
74020: ST_TO_ADDR
74021: LD_EXP 36
74025: PUSH
74026: FOR_TO
74027: IFFALSE 74436
// begin tmp := mc_build_upgrade [ i ] ;
74029: LD_ADDR_VAR 0 4
74033: PUSH
74034: LD_EXP 68
74038: PUSH
74039: LD_VAR 0 2
74043: ARRAY
74044: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
74045: LD_ADDR_VAR 0 6
74049: PUSH
74050: LD_EXP 69
74054: PUSH
74055: LD_VAR 0 2
74059: ARRAY
74060: PPUSH
74061: LD_INT 2
74063: PUSH
74064: LD_INT 30
74066: PUSH
74067: LD_INT 6
74069: PUSH
74070: EMPTY
74071: LIST
74072: LIST
74073: PUSH
74074: LD_INT 30
74076: PUSH
74077: LD_INT 7
74079: PUSH
74080: EMPTY
74081: LIST
74082: LIST
74083: PUSH
74084: EMPTY
74085: LIST
74086: LIST
74087: LIST
74088: PPUSH
74089: CALL_OW 72
74093: ST_TO_ADDR
// if not tmp and not lab then
74094: LD_VAR 0 4
74098: NOT
74099: PUSH
74100: LD_VAR 0 6
74104: NOT
74105: AND
74106: IFFALSE 74110
// continue ;
74108: GO 74026
// if tmp then
74110: LD_VAR 0 4
74114: IFFALSE 74234
// for j in tmp do
74116: LD_ADDR_VAR 0 3
74120: PUSH
74121: LD_VAR 0 4
74125: PUSH
74126: FOR_IN
74127: IFFALSE 74232
// begin if UpgradeCost ( j ) then
74129: LD_VAR 0 3
74133: PPUSH
74134: CALL 32994 0 1
74138: IFFALSE 74230
// begin ComUpgrade ( j ) ;
74140: LD_VAR 0 3
74144: PPUSH
74145: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
74149: LD_ADDR_EXP 68
74153: PUSH
74154: LD_EXP 68
74158: PPUSH
74159: LD_VAR 0 2
74163: PPUSH
74164: LD_EXP 68
74168: PUSH
74169: LD_VAR 0 2
74173: ARRAY
74174: PUSH
74175: LD_VAR 0 3
74179: DIFF
74180: PPUSH
74181: CALL_OW 1
74185: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
74186: LD_ADDR_EXP 43
74190: PUSH
74191: LD_EXP 43
74195: PPUSH
74196: LD_VAR 0 2
74200: PUSH
74201: LD_EXP 43
74205: PUSH
74206: LD_VAR 0 2
74210: ARRAY
74211: PUSH
74212: LD_INT 1
74214: PLUS
74215: PUSH
74216: EMPTY
74217: LIST
74218: LIST
74219: PPUSH
74220: LD_VAR 0 3
74224: PPUSH
74225: CALL 26583 0 3
74229: ST_TO_ADDR
// end ; end ;
74230: GO 74126
74232: POP
74233: POP
// if not lab or not mc_lab_upgrade [ i ] then
74234: LD_VAR 0 6
74238: NOT
74239: PUSH
74240: LD_EXP 70
74244: PUSH
74245: LD_VAR 0 2
74249: ARRAY
74250: NOT
74251: OR
74252: IFFALSE 74256
// continue ;
74254: GO 74026
// for j in lab do
74256: LD_ADDR_VAR 0 3
74260: PUSH
74261: LD_VAR 0 6
74265: PUSH
74266: FOR_IN
74267: IFFALSE 74432
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
74269: LD_VAR 0 3
74273: PPUSH
74274: CALL_OW 266
74278: PUSH
74279: LD_INT 6
74281: PUSH
74282: LD_INT 7
74284: PUSH
74285: EMPTY
74286: LIST
74287: LIST
74288: IN
74289: PUSH
74290: LD_VAR 0 3
74294: PPUSH
74295: CALL_OW 461
74299: PUSH
74300: LD_INT 1
74302: NONEQUAL
74303: AND
74304: IFFALSE 74430
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
74306: LD_VAR 0 3
74310: PPUSH
74311: LD_EXP 70
74315: PUSH
74316: LD_VAR 0 2
74320: ARRAY
74321: PUSH
74322: LD_INT 1
74324: ARRAY
74325: PPUSH
74326: CALL 33199 0 2
74330: IFFALSE 74430
// begin ComCancel ( j ) ;
74332: LD_VAR 0 3
74336: PPUSH
74337: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
74341: LD_VAR 0 3
74345: PPUSH
74346: LD_EXP 70
74350: PUSH
74351: LD_VAR 0 2
74355: ARRAY
74356: PUSH
74357: LD_INT 1
74359: ARRAY
74360: PPUSH
74361: CALL_OW 207
// if not j in mc_construct_list [ i ] then
74365: LD_VAR 0 3
74369: PUSH
74370: LD_EXP 43
74374: PUSH
74375: LD_VAR 0 2
74379: ARRAY
74380: IN
74381: NOT
74382: IFFALSE 74428
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
74384: LD_ADDR_EXP 43
74388: PUSH
74389: LD_EXP 43
74393: PPUSH
74394: LD_VAR 0 2
74398: PUSH
74399: LD_EXP 43
74403: PUSH
74404: LD_VAR 0 2
74408: ARRAY
74409: PUSH
74410: LD_INT 1
74412: PLUS
74413: PUSH
74414: EMPTY
74415: LIST
74416: LIST
74417: PPUSH
74418: LD_VAR 0 3
74422: PPUSH
74423: CALL 26583 0 3
74427: ST_TO_ADDR
// break ;
74428: GO 74432
// end ; end ; end ;
74430: GO 74266
74432: POP
74433: POP
// end ;
74434: GO 74026
74436: POP
74437: POP
// end ;
74438: LD_VAR 0 1
74442: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
74443: LD_INT 0
74445: PPUSH
74446: PPUSH
74447: PPUSH
74448: PPUSH
74449: PPUSH
74450: PPUSH
74451: PPUSH
74452: PPUSH
74453: PPUSH
// if not mc_bases then
74454: LD_EXP 36
74458: NOT
74459: IFFALSE 74463
// exit ;
74461: GO 74868
// for i = 1 to mc_bases do
74463: LD_ADDR_VAR 0 2
74467: PUSH
74468: DOUBLE
74469: LD_INT 1
74471: DEC
74472: ST_TO_ADDR
74473: LD_EXP 36
74477: PUSH
74478: FOR_TO
74479: IFFALSE 74866
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
74481: LD_EXP 44
74485: PUSH
74486: LD_VAR 0 2
74490: ARRAY
74491: NOT
74492: PUSH
74493: LD_EXP 36
74497: PUSH
74498: LD_VAR 0 2
74502: ARRAY
74503: PPUSH
74504: LD_INT 30
74506: PUSH
74507: LD_INT 3
74509: PUSH
74510: EMPTY
74511: LIST
74512: LIST
74513: PPUSH
74514: CALL_OW 72
74518: NOT
74519: OR
74520: IFFALSE 74524
// continue ;
74522: GO 74478
// busy := false ;
74524: LD_ADDR_VAR 0 8
74528: PUSH
74529: LD_INT 0
74531: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
74532: LD_ADDR_VAR 0 4
74536: PUSH
74537: LD_EXP 36
74541: PUSH
74542: LD_VAR 0 2
74546: ARRAY
74547: PPUSH
74548: LD_INT 30
74550: PUSH
74551: LD_INT 3
74553: PUSH
74554: EMPTY
74555: LIST
74556: LIST
74557: PPUSH
74558: CALL_OW 72
74562: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
74563: LD_ADDR_VAR 0 6
74567: PUSH
74568: LD_EXP 44
74572: PUSH
74573: LD_VAR 0 2
74577: ARRAY
74578: PPUSH
74579: LD_INT 2
74581: PUSH
74582: LD_INT 30
74584: PUSH
74585: LD_INT 32
74587: PUSH
74588: EMPTY
74589: LIST
74590: LIST
74591: PUSH
74592: LD_INT 30
74594: PUSH
74595: LD_INT 33
74597: PUSH
74598: EMPTY
74599: LIST
74600: LIST
74601: PUSH
74602: EMPTY
74603: LIST
74604: LIST
74605: LIST
74606: PPUSH
74607: CALL_OW 72
74611: ST_TO_ADDR
// if not t then
74612: LD_VAR 0 6
74616: NOT
74617: IFFALSE 74621
// continue ;
74619: GO 74478
// for j in tmp do
74621: LD_ADDR_VAR 0 3
74625: PUSH
74626: LD_VAR 0 4
74630: PUSH
74631: FOR_IN
74632: IFFALSE 74662
// if not BuildingStatus ( j ) = bs_idle then
74634: LD_VAR 0 3
74638: PPUSH
74639: CALL_OW 461
74643: PUSH
74644: LD_INT 2
74646: EQUAL
74647: NOT
74648: IFFALSE 74660
// begin busy := true ;
74650: LD_ADDR_VAR 0 8
74654: PUSH
74655: LD_INT 1
74657: ST_TO_ADDR
// break ;
74658: GO 74662
// end ;
74660: GO 74631
74662: POP
74663: POP
// if busy then
74664: LD_VAR 0 8
74668: IFFALSE 74672
// continue ;
74670: GO 74478
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
74672: LD_ADDR_VAR 0 7
74676: PUSH
74677: LD_VAR 0 6
74681: PPUSH
74682: LD_INT 35
74684: PUSH
74685: LD_INT 0
74687: PUSH
74688: EMPTY
74689: LIST
74690: LIST
74691: PPUSH
74692: CALL_OW 72
74696: ST_TO_ADDR
// if tw then
74697: LD_VAR 0 7
74701: IFFALSE 74778
// begin tw := tw [ 1 ] ;
74703: LD_ADDR_VAR 0 7
74707: PUSH
74708: LD_VAR 0 7
74712: PUSH
74713: LD_INT 1
74715: ARRAY
74716: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
74717: LD_ADDR_VAR 0 9
74721: PUSH
74722: LD_VAR 0 7
74726: PPUSH
74727: LD_EXP 61
74731: PUSH
74732: LD_VAR 0 2
74736: ARRAY
74737: PPUSH
74738: CALL 31553 0 2
74742: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
74743: LD_EXP 75
74747: PUSH
74748: LD_VAR 0 2
74752: ARRAY
74753: IFFALSE 74776
// if not weapon in mc_allowed_tower_weapons [ i ] then
74755: LD_VAR 0 9
74759: PUSH
74760: LD_EXP 75
74764: PUSH
74765: LD_VAR 0 2
74769: ARRAY
74770: IN
74771: NOT
74772: IFFALSE 74776
// continue ;
74774: GO 74478
// end else
74776: GO 74841
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
74778: LD_ADDR_VAR 0 5
74782: PUSH
74783: LD_EXP 44
74787: PUSH
74788: LD_VAR 0 2
74792: ARRAY
74793: PPUSH
74794: LD_VAR 0 4
74798: PPUSH
74799: CALL 61780 0 2
74803: ST_TO_ADDR
// if not tmp2 then
74804: LD_VAR 0 5
74808: NOT
74809: IFFALSE 74813
// continue ;
74811: GO 74478
// tw := tmp2 [ 1 ] ;
74813: LD_ADDR_VAR 0 7
74817: PUSH
74818: LD_VAR 0 5
74822: PUSH
74823: LD_INT 1
74825: ARRAY
74826: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
74827: LD_ADDR_VAR 0 9
74831: PUSH
74832: LD_VAR 0 5
74836: PUSH
74837: LD_INT 2
74839: ARRAY
74840: ST_TO_ADDR
// end ; if not weapon then
74841: LD_VAR 0 9
74845: NOT
74846: IFFALSE 74850
// continue ;
74848: GO 74478
// ComPlaceWeapon ( tw , weapon ) ;
74850: LD_VAR 0 7
74854: PPUSH
74855: LD_VAR 0 9
74859: PPUSH
74860: CALL_OW 148
// end ;
74864: GO 74478
74866: POP
74867: POP
// end ;
74868: LD_VAR 0 1
74872: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
74873: LD_INT 0
74875: PPUSH
74876: PPUSH
74877: PPUSH
74878: PPUSH
74879: PPUSH
74880: PPUSH
// if not mc_bases then
74881: LD_EXP 36
74885: NOT
74886: IFFALSE 74890
// exit ;
74888: GO 75666
// for i = 1 to mc_bases do
74890: LD_ADDR_VAR 0 2
74894: PUSH
74895: DOUBLE
74896: LD_INT 1
74898: DEC
74899: ST_TO_ADDR
74900: LD_EXP 36
74904: PUSH
74905: FOR_TO
74906: IFFALSE 75664
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
74908: LD_EXP 49
74912: PUSH
74913: LD_VAR 0 2
74917: ARRAY
74918: NOT
74919: PUSH
74920: LD_EXP 49
74924: PUSH
74925: LD_VAR 0 2
74929: ARRAY
74930: PUSH
74931: LD_EXP 50
74935: PUSH
74936: LD_VAR 0 2
74940: ARRAY
74941: EQUAL
74942: OR
74943: PUSH
74944: LD_EXP 59
74948: PUSH
74949: LD_VAR 0 2
74953: ARRAY
74954: OR
74955: IFFALSE 74959
// continue ;
74957: GO 74905
// if mc_miners [ i ] then
74959: LD_EXP 50
74963: PUSH
74964: LD_VAR 0 2
74968: ARRAY
74969: IFFALSE 75351
// begin for j = mc_miners [ i ] downto 1 do
74971: LD_ADDR_VAR 0 3
74975: PUSH
74976: DOUBLE
74977: LD_EXP 50
74981: PUSH
74982: LD_VAR 0 2
74986: ARRAY
74987: INC
74988: ST_TO_ADDR
74989: LD_INT 1
74991: PUSH
74992: FOR_DOWNTO
74993: IFFALSE 75349
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
74995: LD_EXP 50
74999: PUSH
75000: LD_VAR 0 2
75004: ARRAY
75005: PUSH
75006: LD_VAR 0 3
75010: ARRAY
75011: PPUSH
75012: CALL_OW 301
75016: PUSH
75017: LD_EXP 50
75021: PUSH
75022: LD_VAR 0 2
75026: ARRAY
75027: PUSH
75028: LD_VAR 0 3
75032: ARRAY
75033: PPUSH
75034: CALL_OW 257
75038: PUSH
75039: LD_INT 1
75041: NONEQUAL
75042: OR
75043: IFFALSE 75106
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
75045: LD_ADDR_VAR 0 5
75049: PUSH
75050: LD_EXP 50
75054: PUSH
75055: LD_VAR 0 2
75059: ARRAY
75060: PUSH
75061: LD_EXP 50
75065: PUSH
75066: LD_VAR 0 2
75070: ARRAY
75071: PUSH
75072: LD_VAR 0 3
75076: ARRAY
75077: DIFF
75078: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
75079: LD_ADDR_EXP 50
75083: PUSH
75084: LD_EXP 50
75088: PPUSH
75089: LD_VAR 0 2
75093: PPUSH
75094: LD_VAR 0 5
75098: PPUSH
75099: CALL_OW 1
75103: ST_TO_ADDR
// continue ;
75104: GO 74992
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
75106: LD_EXP 50
75110: PUSH
75111: LD_VAR 0 2
75115: ARRAY
75116: PUSH
75117: LD_VAR 0 3
75121: ARRAY
75122: PPUSH
75123: CALL_OW 257
75127: PUSH
75128: LD_INT 1
75130: EQUAL
75131: PUSH
75132: LD_EXP 50
75136: PUSH
75137: LD_VAR 0 2
75141: ARRAY
75142: PUSH
75143: LD_VAR 0 3
75147: ARRAY
75148: PPUSH
75149: CALL_OW 459
75153: NOT
75154: AND
75155: PUSH
75156: LD_EXP 50
75160: PUSH
75161: LD_VAR 0 2
75165: ARRAY
75166: PUSH
75167: LD_VAR 0 3
75171: ARRAY
75172: PPUSH
75173: CALL_OW 314
75177: NOT
75178: AND
75179: IFFALSE 75347
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
75181: LD_EXP 50
75185: PUSH
75186: LD_VAR 0 2
75190: ARRAY
75191: PUSH
75192: LD_VAR 0 3
75196: ARRAY
75197: PPUSH
75198: CALL_OW 310
75202: IFFALSE 75225
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
75204: LD_EXP 50
75208: PUSH
75209: LD_VAR 0 2
75213: ARRAY
75214: PUSH
75215: LD_VAR 0 3
75219: ARRAY
75220: PPUSH
75221: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
75225: LD_EXP 50
75229: PUSH
75230: LD_VAR 0 2
75234: ARRAY
75235: PUSH
75236: LD_VAR 0 3
75240: ARRAY
75241: PPUSH
75242: CALL_OW 314
75246: NOT
75247: IFFALSE 75347
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
75249: LD_EXP 50
75253: PUSH
75254: LD_VAR 0 2
75258: ARRAY
75259: PUSH
75260: LD_VAR 0 3
75264: ARRAY
75265: PPUSH
75266: LD_EXP 49
75270: PUSH
75271: LD_VAR 0 2
75275: ARRAY
75276: PUSH
75277: LD_VAR 0 3
75281: PUSH
75282: LD_EXP 49
75286: PUSH
75287: LD_VAR 0 2
75291: ARRAY
75292: MOD
75293: PUSH
75294: LD_INT 1
75296: PLUS
75297: ARRAY
75298: PUSH
75299: LD_INT 1
75301: ARRAY
75302: PPUSH
75303: LD_EXP 49
75307: PUSH
75308: LD_VAR 0 2
75312: ARRAY
75313: PUSH
75314: LD_VAR 0 3
75318: PUSH
75319: LD_EXP 49
75323: PUSH
75324: LD_VAR 0 2
75328: ARRAY
75329: MOD
75330: PUSH
75331: LD_INT 1
75333: PLUS
75334: ARRAY
75335: PUSH
75336: LD_INT 2
75338: ARRAY
75339: PPUSH
75340: LD_INT 0
75342: PPUSH
75343: CALL_OW 193
// end ; end ;
75347: GO 74992
75349: POP
75350: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
75351: LD_ADDR_VAR 0 5
75355: PUSH
75356: LD_EXP 36
75360: PUSH
75361: LD_VAR 0 2
75365: ARRAY
75366: PPUSH
75367: LD_INT 2
75369: PUSH
75370: LD_INT 30
75372: PUSH
75373: LD_INT 4
75375: PUSH
75376: EMPTY
75377: LIST
75378: LIST
75379: PUSH
75380: LD_INT 30
75382: PUSH
75383: LD_INT 5
75385: PUSH
75386: EMPTY
75387: LIST
75388: LIST
75389: PUSH
75390: LD_INT 30
75392: PUSH
75393: LD_INT 32
75395: PUSH
75396: EMPTY
75397: LIST
75398: LIST
75399: PUSH
75400: EMPTY
75401: LIST
75402: LIST
75403: LIST
75404: LIST
75405: PPUSH
75406: CALL_OW 72
75410: ST_TO_ADDR
// if not tmp then
75411: LD_VAR 0 5
75415: NOT
75416: IFFALSE 75420
// continue ;
75418: GO 74905
// list := [ ] ;
75420: LD_ADDR_VAR 0 6
75424: PUSH
75425: EMPTY
75426: ST_TO_ADDR
// for j in tmp do
75427: LD_ADDR_VAR 0 3
75431: PUSH
75432: LD_VAR 0 5
75436: PUSH
75437: FOR_IN
75438: IFFALSE 75507
// begin for k in UnitsInside ( j ) do
75440: LD_ADDR_VAR 0 4
75444: PUSH
75445: LD_VAR 0 3
75449: PPUSH
75450: CALL_OW 313
75454: PUSH
75455: FOR_IN
75456: IFFALSE 75503
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
75458: LD_VAR 0 4
75462: PPUSH
75463: CALL_OW 257
75467: PUSH
75468: LD_INT 1
75470: EQUAL
75471: PUSH
75472: LD_VAR 0 4
75476: PPUSH
75477: CALL_OW 459
75481: NOT
75482: AND
75483: IFFALSE 75501
// list := list ^ k ;
75485: LD_ADDR_VAR 0 6
75489: PUSH
75490: LD_VAR 0 6
75494: PUSH
75495: LD_VAR 0 4
75499: ADD
75500: ST_TO_ADDR
75501: GO 75455
75503: POP
75504: POP
// end ;
75505: GO 75437
75507: POP
75508: POP
// list := list diff mc_miners [ i ] ;
75509: LD_ADDR_VAR 0 6
75513: PUSH
75514: LD_VAR 0 6
75518: PUSH
75519: LD_EXP 50
75523: PUSH
75524: LD_VAR 0 2
75528: ARRAY
75529: DIFF
75530: ST_TO_ADDR
// if not list then
75531: LD_VAR 0 6
75535: NOT
75536: IFFALSE 75540
// continue ;
75538: GO 74905
// k := mc_mines [ i ] - mc_miners [ i ] ;
75540: LD_ADDR_VAR 0 4
75544: PUSH
75545: LD_EXP 49
75549: PUSH
75550: LD_VAR 0 2
75554: ARRAY
75555: PUSH
75556: LD_EXP 50
75560: PUSH
75561: LD_VAR 0 2
75565: ARRAY
75566: MINUS
75567: ST_TO_ADDR
// if k > list then
75568: LD_VAR 0 4
75572: PUSH
75573: LD_VAR 0 6
75577: GREATER
75578: IFFALSE 75590
// k := list ;
75580: LD_ADDR_VAR 0 4
75584: PUSH
75585: LD_VAR 0 6
75589: ST_TO_ADDR
// for j = 1 to k do
75590: LD_ADDR_VAR 0 3
75594: PUSH
75595: DOUBLE
75596: LD_INT 1
75598: DEC
75599: ST_TO_ADDR
75600: LD_VAR 0 4
75604: PUSH
75605: FOR_TO
75606: IFFALSE 75660
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
75608: LD_ADDR_EXP 50
75612: PUSH
75613: LD_EXP 50
75617: PPUSH
75618: LD_VAR 0 2
75622: PUSH
75623: LD_EXP 50
75627: PUSH
75628: LD_VAR 0 2
75632: ARRAY
75633: PUSH
75634: LD_INT 1
75636: PLUS
75637: PUSH
75638: EMPTY
75639: LIST
75640: LIST
75641: PPUSH
75642: LD_VAR 0 6
75646: PUSH
75647: LD_VAR 0 3
75651: ARRAY
75652: PPUSH
75653: CALL 26583 0 3
75657: ST_TO_ADDR
75658: GO 75605
75660: POP
75661: POP
// end ;
75662: GO 74905
75664: POP
75665: POP
// end ;
75666: LD_VAR 0 1
75670: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
75671: LD_INT 0
75673: PPUSH
75674: PPUSH
75675: PPUSH
75676: PPUSH
75677: PPUSH
75678: PPUSH
75679: PPUSH
75680: PPUSH
75681: PPUSH
75682: PPUSH
// if not mc_bases then
75683: LD_EXP 36
75687: NOT
75688: IFFALSE 75692
// exit ;
75690: GO 77442
// for i = 1 to mc_bases do
75692: LD_ADDR_VAR 0 2
75696: PUSH
75697: DOUBLE
75698: LD_INT 1
75700: DEC
75701: ST_TO_ADDR
75702: LD_EXP 36
75706: PUSH
75707: FOR_TO
75708: IFFALSE 77440
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
75710: LD_EXP 36
75714: PUSH
75715: LD_VAR 0 2
75719: ARRAY
75720: NOT
75721: PUSH
75722: LD_EXP 43
75726: PUSH
75727: LD_VAR 0 2
75731: ARRAY
75732: OR
75733: IFFALSE 75737
// continue ;
75735: GO 75707
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
75737: LD_EXP 52
75741: PUSH
75742: LD_VAR 0 2
75746: ARRAY
75747: NOT
75748: PUSH
75749: LD_EXP 53
75753: PUSH
75754: LD_VAR 0 2
75758: ARRAY
75759: AND
75760: IFFALSE 75798
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
75762: LD_ADDR_EXP 53
75766: PUSH
75767: LD_EXP 53
75771: PPUSH
75772: LD_VAR 0 2
75776: PPUSH
75777: EMPTY
75778: PPUSH
75779: CALL_OW 1
75783: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
75784: LD_VAR 0 2
75788: PPUSH
75789: LD_INT 107
75791: PPUSH
75792: CALL 66656 0 2
// continue ;
75796: GO 75707
// end ; target := [ ] ;
75798: LD_ADDR_VAR 0 6
75802: PUSH
75803: EMPTY
75804: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
75805: LD_ADDR_VAR 0 3
75809: PUSH
75810: DOUBLE
75811: LD_EXP 52
75815: PUSH
75816: LD_VAR 0 2
75820: ARRAY
75821: INC
75822: ST_TO_ADDR
75823: LD_INT 1
75825: PUSH
75826: FOR_DOWNTO
75827: IFFALSE 76087
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
75829: LD_EXP 52
75833: PUSH
75834: LD_VAR 0 2
75838: ARRAY
75839: PUSH
75840: LD_VAR 0 3
75844: ARRAY
75845: PUSH
75846: LD_INT 2
75848: ARRAY
75849: PPUSH
75850: LD_EXP 52
75854: PUSH
75855: LD_VAR 0 2
75859: ARRAY
75860: PUSH
75861: LD_VAR 0 3
75865: ARRAY
75866: PUSH
75867: LD_INT 3
75869: ARRAY
75870: PPUSH
75871: CALL_OW 488
75875: PUSH
75876: LD_EXP 52
75880: PUSH
75881: LD_VAR 0 2
75885: ARRAY
75886: PUSH
75887: LD_VAR 0 3
75891: ARRAY
75892: PUSH
75893: LD_INT 2
75895: ARRAY
75896: PPUSH
75897: LD_EXP 52
75901: PUSH
75902: LD_VAR 0 2
75906: ARRAY
75907: PUSH
75908: LD_VAR 0 3
75912: ARRAY
75913: PUSH
75914: LD_INT 3
75916: ARRAY
75917: PPUSH
75918: CALL_OW 284
75922: PUSH
75923: LD_INT 0
75925: EQUAL
75926: AND
75927: IFFALSE 75982
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
75929: LD_ADDR_VAR 0 5
75933: PUSH
75934: LD_EXP 52
75938: PUSH
75939: LD_VAR 0 2
75943: ARRAY
75944: PPUSH
75945: LD_VAR 0 3
75949: PPUSH
75950: CALL_OW 3
75954: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
75955: LD_ADDR_EXP 52
75959: PUSH
75960: LD_EXP 52
75964: PPUSH
75965: LD_VAR 0 2
75969: PPUSH
75970: LD_VAR 0 5
75974: PPUSH
75975: CALL_OW 1
75979: ST_TO_ADDR
// continue ;
75980: GO 75826
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
75982: LD_EXP 36
75986: PUSH
75987: LD_VAR 0 2
75991: ARRAY
75992: PUSH
75993: LD_INT 1
75995: ARRAY
75996: PPUSH
75997: CALL_OW 255
76001: PPUSH
76002: LD_EXP 52
76006: PUSH
76007: LD_VAR 0 2
76011: ARRAY
76012: PUSH
76013: LD_VAR 0 3
76017: ARRAY
76018: PUSH
76019: LD_INT 2
76021: ARRAY
76022: PPUSH
76023: LD_EXP 52
76027: PUSH
76028: LD_VAR 0 2
76032: ARRAY
76033: PUSH
76034: LD_VAR 0 3
76038: ARRAY
76039: PUSH
76040: LD_INT 3
76042: ARRAY
76043: PPUSH
76044: LD_INT 30
76046: PPUSH
76047: CALL 27479 0 4
76051: PUSH
76052: LD_INT 4
76054: ARRAY
76055: PUSH
76056: LD_INT 0
76058: EQUAL
76059: IFFALSE 76085
// begin target := mc_crates [ i ] [ j ] ;
76061: LD_ADDR_VAR 0 6
76065: PUSH
76066: LD_EXP 52
76070: PUSH
76071: LD_VAR 0 2
76075: ARRAY
76076: PUSH
76077: LD_VAR 0 3
76081: ARRAY
76082: ST_TO_ADDR
// break ;
76083: GO 76087
// end ; end ;
76085: GO 75826
76087: POP
76088: POP
// if not target then
76089: LD_VAR 0 6
76093: NOT
76094: IFFALSE 76098
// continue ;
76096: GO 75707
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
76098: LD_ADDR_VAR 0 7
76102: PUSH
76103: LD_EXP 55
76107: PUSH
76108: LD_VAR 0 2
76112: ARRAY
76113: PPUSH
76114: LD_INT 2
76116: PUSH
76117: LD_INT 3
76119: PUSH
76120: LD_INT 58
76122: PUSH
76123: EMPTY
76124: LIST
76125: PUSH
76126: EMPTY
76127: LIST
76128: LIST
76129: PUSH
76130: LD_INT 61
76132: PUSH
76133: EMPTY
76134: LIST
76135: PUSH
76136: LD_INT 33
76138: PUSH
76139: LD_INT 5
76141: PUSH
76142: EMPTY
76143: LIST
76144: LIST
76145: PUSH
76146: LD_INT 33
76148: PUSH
76149: LD_INT 3
76151: PUSH
76152: EMPTY
76153: LIST
76154: LIST
76155: PUSH
76156: EMPTY
76157: LIST
76158: LIST
76159: LIST
76160: LIST
76161: LIST
76162: PUSH
76163: LD_INT 2
76165: PUSH
76166: LD_INT 34
76168: PUSH
76169: LD_INT 32
76171: PUSH
76172: EMPTY
76173: LIST
76174: LIST
76175: PUSH
76176: LD_INT 34
76178: PUSH
76179: LD_INT 51
76181: PUSH
76182: EMPTY
76183: LIST
76184: LIST
76185: PUSH
76186: LD_INT 34
76188: PUSH
76189: LD_INT 12
76191: PUSH
76192: EMPTY
76193: LIST
76194: LIST
76195: PUSH
76196: EMPTY
76197: LIST
76198: LIST
76199: LIST
76200: LIST
76201: PUSH
76202: EMPTY
76203: LIST
76204: LIST
76205: PPUSH
76206: CALL_OW 72
76210: ST_TO_ADDR
// if not cargo then
76211: LD_VAR 0 7
76215: NOT
76216: IFFALSE 76859
// begin if mc_crates_collector [ i ] < 5 then
76218: LD_EXP 53
76222: PUSH
76223: LD_VAR 0 2
76227: ARRAY
76228: PUSH
76229: LD_INT 5
76231: LESS
76232: IFFALSE 76598
// begin if mc_ape [ i ] then
76234: LD_EXP 65
76238: PUSH
76239: LD_VAR 0 2
76243: ARRAY
76244: IFFALSE 76291
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
76246: LD_ADDR_VAR 0 5
76250: PUSH
76251: LD_EXP 65
76255: PUSH
76256: LD_VAR 0 2
76260: ARRAY
76261: PPUSH
76262: LD_INT 25
76264: PUSH
76265: LD_INT 16
76267: PUSH
76268: EMPTY
76269: LIST
76270: LIST
76271: PUSH
76272: LD_INT 24
76274: PUSH
76275: LD_INT 750
76277: PUSH
76278: EMPTY
76279: LIST
76280: LIST
76281: PUSH
76282: EMPTY
76283: LIST
76284: LIST
76285: PPUSH
76286: CALL_OW 72
76290: ST_TO_ADDR
// if not tmp then
76291: LD_VAR 0 5
76295: NOT
76296: IFFALSE 76343
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
76298: LD_ADDR_VAR 0 5
76302: PUSH
76303: LD_EXP 36
76307: PUSH
76308: LD_VAR 0 2
76312: ARRAY
76313: PPUSH
76314: LD_INT 25
76316: PUSH
76317: LD_INT 2
76319: PUSH
76320: EMPTY
76321: LIST
76322: LIST
76323: PUSH
76324: LD_INT 24
76326: PUSH
76327: LD_INT 750
76329: PUSH
76330: EMPTY
76331: LIST
76332: LIST
76333: PUSH
76334: EMPTY
76335: LIST
76336: LIST
76337: PPUSH
76338: CALL_OW 72
76342: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
76343: LD_EXP 65
76347: PUSH
76348: LD_VAR 0 2
76352: ARRAY
76353: PUSH
76354: LD_EXP 36
76358: PUSH
76359: LD_VAR 0 2
76363: ARRAY
76364: PPUSH
76365: LD_INT 25
76367: PUSH
76368: LD_INT 2
76370: PUSH
76371: EMPTY
76372: LIST
76373: LIST
76374: PUSH
76375: LD_INT 24
76377: PUSH
76378: LD_INT 750
76380: PUSH
76381: EMPTY
76382: LIST
76383: LIST
76384: PUSH
76385: EMPTY
76386: LIST
76387: LIST
76388: PPUSH
76389: CALL_OW 72
76393: AND
76394: PUSH
76395: LD_VAR 0 5
76399: PUSH
76400: LD_INT 5
76402: LESS
76403: AND
76404: IFFALSE 76486
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
76406: LD_ADDR_VAR 0 3
76410: PUSH
76411: LD_EXP 36
76415: PUSH
76416: LD_VAR 0 2
76420: ARRAY
76421: PPUSH
76422: LD_INT 25
76424: PUSH
76425: LD_INT 2
76427: PUSH
76428: EMPTY
76429: LIST
76430: LIST
76431: PUSH
76432: LD_INT 24
76434: PUSH
76435: LD_INT 750
76437: PUSH
76438: EMPTY
76439: LIST
76440: LIST
76441: PUSH
76442: EMPTY
76443: LIST
76444: LIST
76445: PPUSH
76446: CALL_OW 72
76450: PUSH
76451: FOR_IN
76452: IFFALSE 76484
// begin tmp := tmp union j ;
76454: LD_ADDR_VAR 0 5
76458: PUSH
76459: LD_VAR 0 5
76463: PUSH
76464: LD_VAR 0 3
76468: UNION
76469: ST_TO_ADDR
// if tmp >= 5 then
76470: LD_VAR 0 5
76474: PUSH
76475: LD_INT 5
76477: GREATEREQUAL
76478: IFFALSE 76482
// break ;
76480: GO 76484
// end ;
76482: GO 76451
76484: POP
76485: POP
// end ; if not tmp then
76486: LD_VAR 0 5
76490: NOT
76491: IFFALSE 76495
// continue ;
76493: GO 75707
// for j in tmp do
76495: LD_ADDR_VAR 0 3
76499: PUSH
76500: LD_VAR 0 5
76504: PUSH
76505: FOR_IN
76506: IFFALSE 76596
// if not GetTag ( j ) then
76508: LD_VAR 0 3
76512: PPUSH
76513: CALL_OW 110
76517: NOT
76518: IFFALSE 76594
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
76520: LD_ADDR_EXP 53
76524: PUSH
76525: LD_EXP 53
76529: PPUSH
76530: LD_VAR 0 2
76534: PUSH
76535: LD_EXP 53
76539: PUSH
76540: LD_VAR 0 2
76544: ARRAY
76545: PUSH
76546: LD_INT 1
76548: PLUS
76549: PUSH
76550: EMPTY
76551: LIST
76552: LIST
76553: PPUSH
76554: LD_VAR 0 3
76558: PPUSH
76559: CALL 26583 0 3
76563: ST_TO_ADDR
// SetTag ( j , 107 ) ;
76564: LD_VAR 0 3
76568: PPUSH
76569: LD_INT 107
76571: PPUSH
76572: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
76576: LD_EXP 53
76580: PUSH
76581: LD_VAR 0 2
76585: ARRAY
76586: PUSH
76587: LD_INT 5
76589: GREATEREQUAL
76590: IFFALSE 76594
// break ;
76592: GO 76596
// end ;
76594: GO 76505
76596: POP
76597: POP
// end ; if mc_crates_collector [ i ] and target then
76598: LD_EXP 53
76602: PUSH
76603: LD_VAR 0 2
76607: ARRAY
76608: PUSH
76609: LD_VAR 0 6
76613: AND
76614: IFFALSE 76857
// begin if mc_crates_collector [ i ] < target [ 1 ] then
76616: LD_EXP 53
76620: PUSH
76621: LD_VAR 0 2
76625: ARRAY
76626: PUSH
76627: LD_VAR 0 6
76631: PUSH
76632: LD_INT 1
76634: ARRAY
76635: LESS
76636: IFFALSE 76656
// tmp := mc_crates_collector [ i ] else
76638: LD_ADDR_VAR 0 5
76642: PUSH
76643: LD_EXP 53
76647: PUSH
76648: LD_VAR 0 2
76652: ARRAY
76653: ST_TO_ADDR
76654: GO 76670
// tmp := target [ 1 ] ;
76656: LD_ADDR_VAR 0 5
76660: PUSH
76661: LD_VAR 0 6
76665: PUSH
76666: LD_INT 1
76668: ARRAY
76669: ST_TO_ADDR
// k := 0 ;
76670: LD_ADDR_VAR 0 4
76674: PUSH
76675: LD_INT 0
76677: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
76678: LD_ADDR_VAR 0 3
76682: PUSH
76683: LD_EXP 53
76687: PUSH
76688: LD_VAR 0 2
76692: ARRAY
76693: PUSH
76694: FOR_IN
76695: IFFALSE 76855
// begin k := k + 1 ;
76697: LD_ADDR_VAR 0 4
76701: PUSH
76702: LD_VAR 0 4
76706: PUSH
76707: LD_INT 1
76709: PLUS
76710: ST_TO_ADDR
// if k > tmp then
76711: LD_VAR 0 4
76715: PUSH
76716: LD_VAR 0 5
76720: GREATER
76721: IFFALSE 76725
// break ;
76723: GO 76855
// if not GetClass ( j ) in [ 2 , 16 ] then
76725: LD_VAR 0 3
76729: PPUSH
76730: CALL_OW 257
76734: PUSH
76735: LD_INT 2
76737: PUSH
76738: LD_INT 16
76740: PUSH
76741: EMPTY
76742: LIST
76743: LIST
76744: IN
76745: NOT
76746: IFFALSE 76799
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
76748: LD_ADDR_EXP 53
76752: PUSH
76753: LD_EXP 53
76757: PPUSH
76758: LD_VAR 0 2
76762: PPUSH
76763: LD_EXP 53
76767: PUSH
76768: LD_VAR 0 2
76772: ARRAY
76773: PUSH
76774: LD_VAR 0 3
76778: DIFF
76779: PPUSH
76780: CALL_OW 1
76784: ST_TO_ADDR
// SetTag ( j , 0 ) ;
76785: LD_VAR 0 3
76789: PPUSH
76790: LD_INT 0
76792: PPUSH
76793: CALL_OW 109
// continue ;
76797: GO 76694
// end ; if IsInUnit ( j ) then
76799: LD_VAR 0 3
76803: PPUSH
76804: CALL_OW 310
76808: IFFALSE 76819
// ComExitBuilding ( j ) ;
76810: LD_VAR 0 3
76814: PPUSH
76815: CALL_OW 122
// wait ( 3 ) ;
76819: LD_INT 3
76821: PPUSH
76822: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
76826: LD_VAR 0 3
76830: PPUSH
76831: LD_VAR 0 6
76835: PUSH
76836: LD_INT 2
76838: ARRAY
76839: PPUSH
76840: LD_VAR 0 6
76844: PUSH
76845: LD_INT 3
76847: ARRAY
76848: PPUSH
76849: CALL_OW 117
// end ;
76853: GO 76694
76855: POP
76856: POP
// end ; end else
76857: GO 77438
// begin for j in cargo do
76859: LD_ADDR_VAR 0 3
76863: PUSH
76864: LD_VAR 0 7
76868: PUSH
76869: FOR_IN
76870: IFFALSE 77436
// begin if GetTag ( j ) <> 0 then
76872: LD_VAR 0 3
76876: PPUSH
76877: CALL_OW 110
76881: PUSH
76882: LD_INT 0
76884: NONEQUAL
76885: IFFALSE 76889
// continue ;
76887: GO 76869
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
76889: LD_VAR 0 3
76893: PPUSH
76894: CALL_OW 256
76898: PUSH
76899: LD_INT 1000
76901: LESS
76902: PUSH
76903: LD_VAR 0 3
76907: PPUSH
76908: LD_EXP 60
76912: PUSH
76913: LD_VAR 0 2
76917: ARRAY
76918: PPUSH
76919: CALL_OW 308
76923: NOT
76924: AND
76925: IFFALSE 76947
// ComMoveToArea ( j , mc_parking [ i ] ) ;
76927: LD_VAR 0 3
76931: PPUSH
76932: LD_EXP 60
76936: PUSH
76937: LD_VAR 0 2
76941: ARRAY
76942: PPUSH
76943: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
76947: LD_VAR 0 3
76951: PPUSH
76952: CALL_OW 256
76956: PUSH
76957: LD_INT 1000
76959: LESS
76960: PUSH
76961: LD_VAR 0 3
76965: PPUSH
76966: LD_EXP 60
76970: PUSH
76971: LD_VAR 0 2
76975: ARRAY
76976: PPUSH
76977: CALL_OW 308
76981: AND
76982: IFFALSE 76986
// continue ;
76984: GO 76869
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
76986: LD_VAR 0 3
76990: PPUSH
76991: CALL_OW 262
76995: PUSH
76996: LD_INT 2
76998: EQUAL
76999: PUSH
77000: LD_VAR 0 3
77004: PPUSH
77005: CALL_OW 261
77009: PUSH
77010: LD_INT 15
77012: LESS
77013: AND
77014: IFFALSE 77018
// continue ;
77016: GO 76869
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
77018: LD_VAR 0 3
77022: PPUSH
77023: CALL_OW 262
77027: PUSH
77028: LD_INT 1
77030: EQUAL
77031: PUSH
77032: LD_VAR 0 3
77036: PPUSH
77037: CALL_OW 261
77041: PUSH
77042: LD_INT 10
77044: LESS
77045: AND
77046: IFFALSE 77375
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
77048: LD_ADDR_VAR 0 8
77052: PUSH
77053: LD_EXP 36
77057: PUSH
77058: LD_VAR 0 2
77062: ARRAY
77063: PPUSH
77064: LD_INT 2
77066: PUSH
77067: LD_INT 30
77069: PUSH
77070: LD_INT 0
77072: PUSH
77073: EMPTY
77074: LIST
77075: LIST
77076: PUSH
77077: LD_INT 30
77079: PUSH
77080: LD_INT 1
77082: PUSH
77083: EMPTY
77084: LIST
77085: LIST
77086: PUSH
77087: EMPTY
77088: LIST
77089: LIST
77090: LIST
77091: PPUSH
77092: CALL_OW 72
77096: ST_TO_ADDR
// if not depot then
77097: LD_VAR 0 8
77101: NOT
77102: IFFALSE 77106
// continue ;
77104: GO 76869
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
77106: LD_VAR 0 3
77110: PPUSH
77111: LD_VAR 0 8
77115: PPUSH
77116: LD_VAR 0 3
77120: PPUSH
77121: CALL_OW 74
77125: PPUSH
77126: CALL_OW 296
77130: PUSH
77131: LD_INT 6
77133: LESS
77134: IFFALSE 77150
// SetFuel ( j , 100 ) else
77136: LD_VAR 0 3
77140: PPUSH
77141: LD_INT 100
77143: PPUSH
77144: CALL_OW 240
77148: GO 77375
// if GetFuel ( j ) = 0 then
77150: LD_VAR 0 3
77154: PPUSH
77155: CALL_OW 261
77159: PUSH
77160: LD_INT 0
77162: EQUAL
77163: IFFALSE 77375
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
77165: LD_ADDR_EXP 55
77169: PUSH
77170: LD_EXP 55
77174: PPUSH
77175: LD_VAR 0 2
77179: PPUSH
77180: LD_EXP 55
77184: PUSH
77185: LD_VAR 0 2
77189: ARRAY
77190: PUSH
77191: LD_VAR 0 3
77195: DIFF
77196: PPUSH
77197: CALL_OW 1
77201: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
77202: LD_VAR 0 3
77206: PPUSH
77207: CALL_OW 263
77211: PUSH
77212: LD_INT 1
77214: EQUAL
77215: IFFALSE 77231
// ComExitVehicle ( IsInUnit ( j ) ) ;
77217: LD_VAR 0 3
77221: PPUSH
77222: CALL_OW 310
77226: PPUSH
77227: CALL_OW 121
// if GetControl ( j ) = control_remote then
77231: LD_VAR 0 3
77235: PPUSH
77236: CALL_OW 263
77240: PUSH
77241: LD_INT 2
77243: EQUAL
77244: IFFALSE 77255
// ComUnlink ( j ) ;
77246: LD_VAR 0 3
77250: PPUSH
77251: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
77255: LD_ADDR_VAR 0 9
77259: PUSH
77260: LD_VAR 0 2
77264: PPUSH
77265: LD_INT 3
77267: PPUSH
77268: CALL 86728 0 2
77272: ST_TO_ADDR
// if fac then
77273: LD_VAR 0 9
77277: IFFALSE 77373
// begin for k in fac do
77279: LD_ADDR_VAR 0 4
77283: PUSH
77284: LD_VAR 0 9
77288: PUSH
77289: FOR_IN
77290: IFFALSE 77371
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
77292: LD_ADDR_VAR 0 10
77296: PUSH
77297: LD_VAR 0 9
77301: PPUSH
77302: LD_VAR 0 3
77306: PPUSH
77307: CALL_OW 265
77311: PPUSH
77312: LD_VAR 0 3
77316: PPUSH
77317: CALL_OW 262
77321: PPUSH
77322: LD_VAR 0 3
77326: PPUSH
77327: CALL_OW 263
77331: PPUSH
77332: LD_VAR 0 3
77336: PPUSH
77337: CALL_OW 264
77341: PPUSH
77342: CALL 24115 0 5
77346: ST_TO_ADDR
// if components then
77347: LD_VAR 0 10
77351: IFFALSE 77369
// begin MC_InsertProduceList ( i , components ) ;
77353: LD_VAR 0 2
77357: PPUSH
77358: LD_VAR 0 10
77362: PPUSH
77363: CALL 86273 0 2
// break ;
77367: GO 77371
// end ; end ;
77369: GO 77289
77371: POP
77372: POP
// end ; continue ;
77373: GO 76869
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
77375: LD_VAR 0 3
77379: PPUSH
77380: LD_INT 1
77382: PPUSH
77383: CALL_OW 289
77387: PUSH
77388: LD_INT 100
77390: LESS
77391: PUSH
77392: LD_VAR 0 3
77396: PPUSH
77397: CALL_OW 314
77401: NOT
77402: AND
77403: IFFALSE 77432
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
77405: LD_VAR 0 3
77409: PPUSH
77410: LD_VAR 0 6
77414: PUSH
77415: LD_INT 2
77417: ARRAY
77418: PPUSH
77419: LD_VAR 0 6
77423: PUSH
77424: LD_INT 3
77426: ARRAY
77427: PPUSH
77428: CALL_OW 117
// break ;
77432: GO 77436
// end ;
77434: GO 76869
77436: POP
77437: POP
// end ; end ;
77438: GO 75707
77440: POP
77441: POP
// end ;
77442: LD_VAR 0 1
77446: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
77447: LD_INT 0
77449: PPUSH
77450: PPUSH
77451: PPUSH
77452: PPUSH
// if not mc_bases then
77453: LD_EXP 36
77457: NOT
77458: IFFALSE 77462
// exit ;
77460: GO 77623
// for i = 1 to mc_bases do
77462: LD_ADDR_VAR 0 2
77466: PUSH
77467: DOUBLE
77468: LD_INT 1
77470: DEC
77471: ST_TO_ADDR
77472: LD_EXP 36
77476: PUSH
77477: FOR_TO
77478: IFFALSE 77621
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
77480: LD_ADDR_VAR 0 4
77484: PUSH
77485: LD_EXP 55
77489: PUSH
77490: LD_VAR 0 2
77494: ARRAY
77495: PUSH
77496: LD_EXP 58
77500: PUSH
77501: LD_VAR 0 2
77505: ARRAY
77506: UNION
77507: PPUSH
77508: LD_INT 33
77510: PUSH
77511: LD_INT 2
77513: PUSH
77514: EMPTY
77515: LIST
77516: LIST
77517: PPUSH
77518: CALL_OW 72
77522: ST_TO_ADDR
// if tmp then
77523: LD_VAR 0 4
77527: IFFALSE 77619
// for j in tmp do
77529: LD_ADDR_VAR 0 3
77533: PUSH
77534: LD_VAR 0 4
77538: PUSH
77539: FOR_IN
77540: IFFALSE 77617
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
77542: LD_VAR 0 3
77546: PPUSH
77547: CALL_OW 312
77551: NOT
77552: PUSH
77553: LD_VAR 0 3
77557: PPUSH
77558: CALL_OW 256
77562: PUSH
77563: LD_INT 250
77565: GREATEREQUAL
77566: AND
77567: IFFALSE 77580
// Connect ( j ) else
77569: LD_VAR 0 3
77573: PPUSH
77574: CALL 29516 0 1
77578: GO 77615
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
77580: LD_VAR 0 3
77584: PPUSH
77585: CALL_OW 256
77589: PUSH
77590: LD_INT 250
77592: LESS
77593: PUSH
77594: LD_VAR 0 3
77598: PPUSH
77599: CALL_OW 312
77603: AND
77604: IFFALSE 77615
// ComUnlink ( j ) ;
77606: LD_VAR 0 3
77610: PPUSH
77611: CALL_OW 136
77615: GO 77539
77617: POP
77618: POP
// end ;
77619: GO 77477
77621: POP
77622: POP
// end ;
77623: LD_VAR 0 1
77627: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
77628: LD_INT 0
77630: PPUSH
77631: PPUSH
77632: PPUSH
77633: PPUSH
77634: PPUSH
// if not mc_bases then
77635: LD_EXP 36
77639: NOT
77640: IFFALSE 77644
// exit ;
77642: GO 78089
// for i = 1 to mc_bases do
77644: LD_ADDR_VAR 0 2
77648: PUSH
77649: DOUBLE
77650: LD_INT 1
77652: DEC
77653: ST_TO_ADDR
77654: LD_EXP 36
77658: PUSH
77659: FOR_TO
77660: IFFALSE 78087
// begin if not mc_produce [ i ] then
77662: LD_EXP 57
77666: PUSH
77667: LD_VAR 0 2
77671: ARRAY
77672: NOT
77673: IFFALSE 77677
// continue ;
77675: GO 77659
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
77677: LD_ADDR_VAR 0 5
77681: PUSH
77682: LD_EXP 36
77686: PUSH
77687: LD_VAR 0 2
77691: ARRAY
77692: PPUSH
77693: LD_INT 30
77695: PUSH
77696: LD_INT 3
77698: PUSH
77699: EMPTY
77700: LIST
77701: LIST
77702: PPUSH
77703: CALL_OW 72
77707: ST_TO_ADDR
// if not fac then
77708: LD_VAR 0 5
77712: NOT
77713: IFFALSE 77717
// continue ;
77715: GO 77659
// for j in fac do
77717: LD_ADDR_VAR 0 3
77721: PUSH
77722: LD_VAR 0 5
77726: PUSH
77727: FOR_IN
77728: IFFALSE 78083
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
77730: LD_VAR 0 3
77734: PPUSH
77735: CALL_OW 461
77739: PUSH
77740: LD_INT 2
77742: NONEQUAL
77743: PUSH
77744: LD_VAR 0 3
77748: PPUSH
77749: LD_INT 15
77751: PPUSH
77752: CALL 29176 0 2
77756: PUSH
77757: LD_INT 4
77759: ARRAY
77760: OR
77761: IFFALSE 77765
// continue ;
77763: GO 77727
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
77765: LD_VAR 0 3
77769: PPUSH
77770: LD_EXP 57
77774: PUSH
77775: LD_VAR 0 2
77779: ARRAY
77780: PUSH
77781: LD_INT 1
77783: ARRAY
77784: PUSH
77785: LD_INT 1
77787: ARRAY
77788: PPUSH
77789: LD_EXP 57
77793: PUSH
77794: LD_VAR 0 2
77798: ARRAY
77799: PUSH
77800: LD_INT 1
77802: ARRAY
77803: PUSH
77804: LD_INT 2
77806: ARRAY
77807: PPUSH
77808: LD_EXP 57
77812: PUSH
77813: LD_VAR 0 2
77817: ARRAY
77818: PUSH
77819: LD_INT 1
77821: ARRAY
77822: PUSH
77823: LD_INT 3
77825: ARRAY
77826: PPUSH
77827: LD_EXP 57
77831: PUSH
77832: LD_VAR 0 2
77836: ARRAY
77837: PUSH
77838: LD_INT 1
77840: ARRAY
77841: PUSH
77842: LD_INT 4
77844: ARRAY
77845: PPUSH
77846: CALL_OW 448
77850: PUSH
77851: LD_VAR 0 3
77855: PPUSH
77856: LD_EXP 57
77860: PUSH
77861: LD_VAR 0 2
77865: ARRAY
77866: PUSH
77867: LD_INT 1
77869: ARRAY
77870: PUSH
77871: LD_INT 1
77873: ARRAY
77874: PUSH
77875: LD_EXP 57
77879: PUSH
77880: LD_VAR 0 2
77884: ARRAY
77885: PUSH
77886: LD_INT 1
77888: ARRAY
77889: PUSH
77890: LD_INT 2
77892: ARRAY
77893: PUSH
77894: LD_EXP 57
77898: PUSH
77899: LD_VAR 0 2
77903: ARRAY
77904: PUSH
77905: LD_INT 1
77907: ARRAY
77908: PUSH
77909: LD_INT 3
77911: ARRAY
77912: PUSH
77913: LD_EXP 57
77917: PUSH
77918: LD_VAR 0 2
77922: ARRAY
77923: PUSH
77924: LD_INT 1
77926: ARRAY
77927: PUSH
77928: LD_INT 4
77930: ARRAY
77931: PUSH
77932: EMPTY
77933: LIST
77934: LIST
77935: LIST
77936: LIST
77937: PPUSH
77938: CALL 32847 0 2
77942: AND
77943: IFFALSE 78081
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
77945: LD_VAR 0 3
77949: PPUSH
77950: LD_EXP 57
77954: PUSH
77955: LD_VAR 0 2
77959: ARRAY
77960: PUSH
77961: LD_INT 1
77963: ARRAY
77964: PUSH
77965: LD_INT 1
77967: ARRAY
77968: PPUSH
77969: LD_EXP 57
77973: PUSH
77974: LD_VAR 0 2
77978: ARRAY
77979: PUSH
77980: LD_INT 1
77982: ARRAY
77983: PUSH
77984: LD_INT 2
77986: ARRAY
77987: PPUSH
77988: LD_EXP 57
77992: PUSH
77993: LD_VAR 0 2
77997: ARRAY
77998: PUSH
77999: LD_INT 1
78001: ARRAY
78002: PUSH
78003: LD_INT 3
78005: ARRAY
78006: PPUSH
78007: LD_EXP 57
78011: PUSH
78012: LD_VAR 0 2
78016: ARRAY
78017: PUSH
78018: LD_INT 1
78020: ARRAY
78021: PUSH
78022: LD_INT 4
78024: ARRAY
78025: PPUSH
78026: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
78030: LD_ADDR_VAR 0 4
78034: PUSH
78035: LD_EXP 57
78039: PUSH
78040: LD_VAR 0 2
78044: ARRAY
78045: PPUSH
78046: LD_INT 1
78048: PPUSH
78049: CALL_OW 3
78053: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
78054: LD_ADDR_EXP 57
78058: PUSH
78059: LD_EXP 57
78063: PPUSH
78064: LD_VAR 0 2
78068: PPUSH
78069: LD_VAR 0 4
78073: PPUSH
78074: CALL_OW 1
78078: ST_TO_ADDR
// break ;
78079: GO 78083
// end ; end ;
78081: GO 77727
78083: POP
78084: POP
// end ;
78085: GO 77659
78087: POP
78088: POP
// end ;
78089: LD_VAR 0 1
78093: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
78094: LD_INT 0
78096: PPUSH
78097: PPUSH
78098: PPUSH
// if not mc_bases then
78099: LD_EXP 36
78103: NOT
78104: IFFALSE 78108
// exit ;
78106: GO 78197
// for i = 1 to mc_bases do
78108: LD_ADDR_VAR 0 2
78112: PUSH
78113: DOUBLE
78114: LD_INT 1
78116: DEC
78117: ST_TO_ADDR
78118: LD_EXP 36
78122: PUSH
78123: FOR_TO
78124: IFFALSE 78195
// begin if mc_attack [ i ] then
78126: LD_EXP 56
78130: PUSH
78131: LD_VAR 0 2
78135: ARRAY
78136: IFFALSE 78193
// begin tmp := mc_attack [ i ] [ 1 ] ;
78138: LD_ADDR_VAR 0 3
78142: PUSH
78143: LD_EXP 56
78147: PUSH
78148: LD_VAR 0 2
78152: ARRAY
78153: PUSH
78154: LD_INT 1
78156: ARRAY
78157: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
78158: LD_ADDR_EXP 56
78162: PUSH
78163: LD_EXP 56
78167: PPUSH
78168: LD_VAR 0 2
78172: PPUSH
78173: EMPTY
78174: PPUSH
78175: CALL_OW 1
78179: ST_TO_ADDR
// Attack ( tmp ) ;
78180: LD_VAR 0 3
78184: PPUSH
78185: CALL 55060 0 1
// exit ;
78189: POP
78190: POP
78191: GO 78197
// end ; end ;
78193: GO 78123
78195: POP
78196: POP
// end ;
78197: LD_VAR 0 1
78201: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
78202: LD_INT 0
78204: PPUSH
78205: PPUSH
78206: PPUSH
78207: PPUSH
78208: PPUSH
78209: PPUSH
78210: PPUSH
// if not mc_bases then
78211: LD_EXP 36
78215: NOT
78216: IFFALSE 78220
// exit ;
78218: GO 78802
// for i = 1 to mc_bases do
78220: LD_ADDR_VAR 0 2
78224: PUSH
78225: DOUBLE
78226: LD_INT 1
78228: DEC
78229: ST_TO_ADDR
78230: LD_EXP 36
78234: PUSH
78235: FOR_TO
78236: IFFALSE 78800
// begin if not mc_bases [ i ] then
78238: LD_EXP 36
78242: PUSH
78243: LD_VAR 0 2
78247: ARRAY
78248: NOT
78249: IFFALSE 78253
// continue ;
78251: GO 78235
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
78253: LD_ADDR_VAR 0 7
78257: PUSH
78258: LD_EXP 36
78262: PUSH
78263: LD_VAR 0 2
78267: ARRAY
78268: PUSH
78269: LD_INT 1
78271: ARRAY
78272: PPUSH
78273: CALL 23419 0 1
78277: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
78278: LD_ADDR_EXP 59
78282: PUSH
78283: LD_EXP 59
78287: PPUSH
78288: LD_VAR 0 2
78292: PPUSH
78293: LD_EXP 36
78297: PUSH
78298: LD_VAR 0 2
78302: ARRAY
78303: PUSH
78304: LD_INT 1
78306: ARRAY
78307: PPUSH
78308: CALL_OW 255
78312: PPUSH
78313: LD_EXP 61
78317: PUSH
78318: LD_VAR 0 2
78322: ARRAY
78323: PPUSH
78324: CALL 20973 0 2
78328: PPUSH
78329: CALL_OW 1
78333: ST_TO_ADDR
// if not mc_scan [ i ] then
78334: LD_EXP 59
78338: PUSH
78339: LD_VAR 0 2
78343: ARRAY
78344: NOT
78345: IFFALSE 78500
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
78347: LD_ADDR_VAR 0 4
78351: PUSH
78352: LD_EXP 36
78356: PUSH
78357: LD_VAR 0 2
78361: ARRAY
78362: PPUSH
78363: LD_INT 2
78365: PUSH
78366: LD_INT 25
78368: PUSH
78369: LD_INT 5
78371: PUSH
78372: EMPTY
78373: LIST
78374: LIST
78375: PUSH
78376: LD_INT 25
78378: PUSH
78379: LD_INT 8
78381: PUSH
78382: EMPTY
78383: LIST
78384: LIST
78385: PUSH
78386: LD_INT 25
78388: PUSH
78389: LD_INT 9
78391: PUSH
78392: EMPTY
78393: LIST
78394: LIST
78395: PUSH
78396: EMPTY
78397: LIST
78398: LIST
78399: LIST
78400: LIST
78401: PPUSH
78402: CALL_OW 72
78406: ST_TO_ADDR
// if not tmp then
78407: LD_VAR 0 4
78411: NOT
78412: IFFALSE 78416
// continue ;
78414: GO 78235
// for j in tmp do
78416: LD_ADDR_VAR 0 3
78420: PUSH
78421: LD_VAR 0 4
78425: PUSH
78426: FOR_IN
78427: IFFALSE 78498
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
78429: LD_VAR 0 3
78433: PPUSH
78434: CALL_OW 310
78438: PPUSH
78439: CALL_OW 266
78443: PUSH
78444: LD_INT 5
78446: EQUAL
78447: PUSH
78448: LD_VAR 0 3
78452: PPUSH
78453: CALL_OW 257
78457: PUSH
78458: LD_INT 1
78460: EQUAL
78461: AND
78462: PUSH
78463: LD_VAR 0 3
78467: PPUSH
78468: CALL_OW 459
78472: NOT
78473: AND
78474: PUSH
78475: LD_VAR 0 7
78479: AND
78480: IFFALSE 78496
// ComChangeProfession ( j , class ) ;
78482: LD_VAR 0 3
78486: PPUSH
78487: LD_VAR 0 7
78491: PPUSH
78492: CALL_OW 123
78496: GO 78426
78498: POP
78499: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
78500: LD_EXP 59
78504: PUSH
78505: LD_VAR 0 2
78509: ARRAY
78510: PUSH
78511: LD_EXP 58
78515: PUSH
78516: LD_VAR 0 2
78520: ARRAY
78521: NOT
78522: AND
78523: PUSH
78524: LD_EXP 36
78528: PUSH
78529: LD_VAR 0 2
78533: ARRAY
78534: PPUSH
78535: LD_INT 30
78537: PUSH
78538: LD_INT 32
78540: PUSH
78541: EMPTY
78542: LIST
78543: LIST
78544: PPUSH
78545: CALL_OW 72
78549: NOT
78550: AND
78551: PUSH
78552: LD_EXP 36
78556: PUSH
78557: LD_VAR 0 2
78561: ARRAY
78562: PPUSH
78563: LD_INT 2
78565: PUSH
78566: LD_INT 30
78568: PUSH
78569: LD_INT 4
78571: PUSH
78572: EMPTY
78573: LIST
78574: LIST
78575: PUSH
78576: LD_INT 30
78578: PUSH
78579: LD_INT 5
78581: PUSH
78582: EMPTY
78583: LIST
78584: LIST
78585: PUSH
78586: EMPTY
78587: LIST
78588: LIST
78589: LIST
78590: PPUSH
78591: CALL_OW 72
78595: NOT
78596: AND
78597: IFFALSE 78729
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
78599: LD_ADDR_VAR 0 4
78603: PUSH
78604: LD_EXP 36
78608: PUSH
78609: LD_VAR 0 2
78613: ARRAY
78614: PPUSH
78615: LD_INT 2
78617: PUSH
78618: LD_INT 25
78620: PUSH
78621: LD_INT 1
78623: PUSH
78624: EMPTY
78625: LIST
78626: LIST
78627: PUSH
78628: LD_INT 25
78630: PUSH
78631: LD_INT 5
78633: PUSH
78634: EMPTY
78635: LIST
78636: LIST
78637: PUSH
78638: LD_INT 25
78640: PUSH
78641: LD_INT 8
78643: PUSH
78644: EMPTY
78645: LIST
78646: LIST
78647: PUSH
78648: LD_INT 25
78650: PUSH
78651: LD_INT 9
78653: PUSH
78654: EMPTY
78655: LIST
78656: LIST
78657: PUSH
78658: EMPTY
78659: LIST
78660: LIST
78661: LIST
78662: LIST
78663: LIST
78664: PPUSH
78665: CALL_OW 72
78669: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
78670: LD_ADDR_VAR 0 4
78674: PUSH
78675: LD_VAR 0 4
78679: PUSH
78680: LD_VAR 0 4
78684: PPUSH
78685: LD_INT 18
78687: PPUSH
78688: CALL 59869 0 2
78692: DIFF
78693: ST_TO_ADDR
// if tmp then
78694: LD_VAR 0 4
78698: IFFALSE 78729
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
78700: LD_VAR 0 2
78704: PPUSH
78705: LD_VAR 0 4
78709: PPUSH
78710: LD_EXP 61
78714: PUSH
78715: LD_VAR 0 2
78719: ARRAY
78720: PPUSH
78721: CALL 21008 0 3
// exit ;
78725: POP
78726: POP
78727: GO 78802
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
78729: LD_EXP 59
78733: PUSH
78734: LD_VAR 0 2
78738: ARRAY
78739: PUSH
78740: LD_EXP 58
78744: PUSH
78745: LD_VAR 0 2
78749: ARRAY
78750: AND
78751: IFFALSE 78798
// begin tmp := mc_defender [ i ] ;
78753: LD_ADDR_VAR 0 4
78757: PUSH
78758: LD_EXP 58
78762: PUSH
78763: LD_VAR 0 2
78767: ARRAY
78768: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
78769: LD_VAR 0 2
78773: PPUSH
78774: LD_VAR 0 4
78778: PPUSH
78779: LD_EXP 59
78783: PUSH
78784: LD_VAR 0 2
78788: ARRAY
78789: PPUSH
78790: CALL 21569 0 3
// exit ;
78794: POP
78795: POP
78796: GO 78802
// end ; end ;
78798: GO 78235
78800: POP
78801: POP
// end ;
78802: LD_VAR 0 1
78806: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
78807: LD_INT 0
78809: PPUSH
78810: PPUSH
78811: PPUSH
78812: PPUSH
78813: PPUSH
78814: PPUSH
78815: PPUSH
78816: PPUSH
78817: PPUSH
78818: PPUSH
78819: PPUSH
// if not mc_bases then
78820: LD_EXP 36
78824: NOT
78825: IFFALSE 78829
// exit ;
78827: GO 79916
// for i = 1 to mc_bases do
78829: LD_ADDR_VAR 0 2
78833: PUSH
78834: DOUBLE
78835: LD_INT 1
78837: DEC
78838: ST_TO_ADDR
78839: LD_EXP 36
78843: PUSH
78844: FOR_TO
78845: IFFALSE 79914
// begin tmp := mc_lab [ i ] ;
78847: LD_ADDR_VAR 0 6
78851: PUSH
78852: LD_EXP 69
78856: PUSH
78857: LD_VAR 0 2
78861: ARRAY
78862: ST_TO_ADDR
// if not tmp then
78863: LD_VAR 0 6
78867: NOT
78868: IFFALSE 78872
// continue ;
78870: GO 78844
// idle_lab := 0 ;
78872: LD_ADDR_VAR 0 11
78876: PUSH
78877: LD_INT 0
78879: ST_TO_ADDR
// for j in tmp do
78880: LD_ADDR_VAR 0 3
78884: PUSH
78885: LD_VAR 0 6
78889: PUSH
78890: FOR_IN
78891: IFFALSE 79910
// begin researching := false ;
78893: LD_ADDR_VAR 0 10
78897: PUSH
78898: LD_INT 0
78900: ST_TO_ADDR
// side := GetSide ( j ) ;
78901: LD_ADDR_VAR 0 4
78905: PUSH
78906: LD_VAR 0 3
78910: PPUSH
78911: CALL_OW 255
78915: ST_TO_ADDR
// if not mc_tech [ side ] then
78916: LD_EXP 63
78920: PUSH
78921: LD_VAR 0 4
78925: ARRAY
78926: NOT
78927: IFFALSE 78931
// continue ;
78929: GO 78890
// if BuildingStatus ( j ) = bs_idle then
78931: LD_VAR 0 3
78935: PPUSH
78936: CALL_OW 461
78940: PUSH
78941: LD_INT 2
78943: EQUAL
78944: IFFALSE 79132
// begin if idle_lab and UnitsInside ( j ) < 6 then
78946: LD_VAR 0 11
78950: PUSH
78951: LD_VAR 0 3
78955: PPUSH
78956: CALL_OW 313
78960: PUSH
78961: LD_INT 6
78963: LESS
78964: AND
78965: IFFALSE 79036
// begin tmp2 := UnitsInside ( idle_lab ) ;
78967: LD_ADDR_VAR 0 9
78971: PUSH
78972: LD_VAR 0 11
78976: PPUSH
78977: CALL_OW 313
78981: ST_TO_ADDR
// if tmp2 then
78982: LD_VAR 0 9
78986: IFFALSE 79028
// for x in tmp2 do
78988: LD_ADDR_VAR 0 7
78992: PUSH
78993: LD_VAR 0 9
78997: PUSH
78998: FOR_IN
78999: IFFALSE 79026
// begin ComExitBuilding ( x ) ;
79001: LD_VAR 0 7
79005: PPUSH
79006: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
79010: LD_VAR 0 7
79014: PPUSH
79015: LD_VAR 0 3
79019: PPUSH
79020: CALL_OW 180
// end ;
79024: GO 78998
79026: POP
79027: POP
// idle_lab := 0 ;
79028: LD_ADDR_VAR 0 11
79032: PUSH
79033: LD_INT 0
79035: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
79036: LD_ADDR_VAR 0 5
79040: PUSH
79041: LD_EXP 63
79045: PUSH
79046: LD_VAR 0 4
79050: ARRAY
79051: PUSH
79052: FOR_IN
79053: IFFALSE 79113
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
79055: LD_VAR 0 3
79059: PPUSH
79060: LD_VAR 0 5
79064: PPUSH
79065: CALL_OW 430
79069: PUSH
79070: LD_VAR 0 4
79074: PPUSH
79075: LD_VAR 0 5
79079: PPUSH
79080: CALL 20078 0 2
79084: AND
79085: IFFALSE 79111
// begin researching := true ;
79087: LD_ADDR_VAR 0 10
79091: PUSH
79092: LD_INT 1
79094: ST_TO_ADDR
// ComResearch ( j , t ) ;
79095: LD_VAR 0 3
79099: PPUSH
79100: LD_VAR 0 5
79104: PPUSH
79105: CALL_OW 124
// break ;
79109: GO 79113
// end ;
79111: GO 79052
79113: POP
79114: POP
// if not researching then
79115: LD_VAR 0 10
79119: NOT
79120: IFFALSE 79132
// idle_lab := j ;
79122: LD_ADDR_VAR 0 11
79126: PUSH
79127: LD_VAR 0 3
79131: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
79132: LD_VAR 0 3
79136: PPUSH
79137: CALL_OW 461
79141: PUSH
79142: LD_INT 10
79144: EQUAL
79145: IFFALSE 79733
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
79147: LD_EXP 65
79151: PUSH
79152: LD_VAR 0 2
79156: ARRAY
79157: NOT
79158: PUSH
79159: LD_EXP 66
79163: PUSH
79164: LD_VAR 0 2
79168: ARRAY
79169: NOT
79170: AND
79171: PUSH
79172: LD_EXP 63
79176: PUSH
79177: LD_VAR 0 4
79181: ARRAY
79182: PUSH
79183: LD_INT 1
79185: GREATER
79186: AND
79187: IFFALSE 79318
// begin ComCancel ( j ) ;
79189: LD_VAR 0 3
79193: PPUSH
79194: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
79198: LD_ADDR_EXP 63
79202: PUSH
79203: LD_EXP 63
79207: PPUSH
79208: LD_VAR 0 4
79212: PPUSH
79213: LD_EXP 63
79217: PUSH
79218: LD_VAR 0 4
79222: ARRAY
79223: PPUSH
79224: LD_EXP 63
79228: PUSH
79229: LD_VAR 0 4
79233: ARRAY
79234: PUSH
79235: LD_INT 1
79237: MINUS
79238: PPUSH
79239: LD_EXP 63
79243: PUSH
79244: LD_VAR 0 4
79248: ARRAY
79249: PPUSH
79250: LD_INT 0
79252: PPUSH
79253: CALL 26001 0 4
79257: PPUSH
79258: CALL_OW 1
79262: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
79263: LD_ADDR_EXP 63
79267: PUSH
79268: LD_EXP 63
79272: PPUSH
79273: LD_VAR 0 4
79277: PPUSH
79278: LD_EXP 63
79282: PUSH
79283: LD_VAR 0 4
79287: ARRAY
79288: PPUSH
79289: LD_EXP 63
79293: PUSH
79294: LD_VAR 0 4
79298: ARRAY
79299: PPUSH
79300: LD_INT 1
79302: PPUSH
79303: LD_INT 0
79305: PPUSH
79306: CALL 26001 0 4
79310: PPUSH
79311: CALL_OW 1
79315: ST_TO_ADDR
// continue ;
79316: GO 78890
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
79318: LD_EXP 65
79322: PUSH
79323: LD_VAR 0 2
79327: ARRAY
79328: PUSH
79329: LD_EXP 66
79333: PUSH
79334: LD_VAR 0 2
79338: ARRAY
79339: NOT
79340: AND
79341: IFFALSE 79468
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
79343: LD_ADDR_EXP 66
79347: PUSH
79348: LD_EXP 66
79352: PPUSH
79353: LD_VAR 0 2
79357: PUSH
79358: LD_EXP 66
79362: PUSH
79363: LD_VAR 0 2
79367: ARRAY
79368: PUSH
79369: LD_INT 1
79371: PLUS
79372: PUSH
79373: EMPTY
79374: LIST
79375: LIST
79376: PPUSH
79377: LD_EXP 65
79381: PUSH
79382: LD_VAR 0 2
79386: ARRAY
79387: PUSH
79388: LD_INT 1
79390: ARRAY
79391: PPUSH
79392: CALL 26583 0 3
79396: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
79397: LD_EXP 65
79401: PUSH
79402: LD_VAR 0 2
79406: ARRAY
79407: PUSH
79408: LD_INT 1
79410: ARRAY
79411: PPUSH
79412: LD_INT 112
79414: PPUSH
79415: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
79419: LD_ADDR_VAR 0 9
79423: PUSH
79424: LD_EXP 65
79428: PUSH
79429: LD_VAR 0 2
79433: ARRAY
79434: PPUSH
79435: LD_INT 1
79437: PPUSH
79438: CALL_OW 3
79442: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
79443: LD_ADDR_EXP 65
79447: PUSH
79448: LD_EXP 65
79452: PPUSH
79453: LD_VAR 0 2
79457: PPUSH
79458: LD_VAR 0 9
79462: PPUSH
79463: CALL_OW 1
79467: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
79468: LD_EXP 65
79472: PUSH
79473: LD_VAR 0 2
79477: ARRAY
79478: PUSH
79479: LD_EXP 66
79483: PUSH
79484: LD_VAR 0 2
79488: ARRAY
79489: AND
79490: PUSH
79491: LD_EXP 66
79495: PUSH
79496: LD_VAR 0 2
79500: ARRAY
79501: PUSH
79502: LD_INT 1
79504: ARRAY
79505: PPUSH
79506: CALL_OW 310
79510: NOT
79511: AND
79512: PUSH
79513: LD_VAR 0 3
79517: PPUSH
79518: CALL_OW 313
79522: PUSH
79523: LD_INT 6
79525: EQUAL
79526: AND
79527: IFFALSE 79583
// begin tmp2 := UnitsInside ( j ) ;
79529: LD_ADDR_VAR 0 9
79533: PUSH
79534: LD_VAR 0 3
79538: PPUSH
79539: CALL_OW 313
79543: ST_TO_ADDR
// if tmp2 = 6 then
79544: LD_VAR 0 9
79548: PUSH
79549: LD_INT 6
79551: EQUAL
79552: IFFALSE 79583
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
79554: LD_VAR 0 9
79558: PUSH
79559: LD_INT 1
79561: ARRAY
79562: PPUSH
79563: LD_INT 112
79565: PPUSH
79566: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
79570: LD_VAR 0 9
79574: PUSH
79575: LD_INT 1
79577: ARRAY
79578: PPUSH
79579: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
79583: LD_EXP 66
79587: PUSH
79588: LD_VAR 0 2
79592: ARRAY
79593: PUSH
79594: LD_EXP 66
79598: PUSH
79599: LD_VAR 0 2
79603: ARRAY
79604: PUSH
79605: LD_INT 1
79607: ARRAY
79608: PPUSH
79609: CALL_OW 314
79613: NOT
79614: AND
79615: PUSH
79616: LD_EXP 66
79620: PUSH
79621: LD_VAR 0 2
79625: ARRAY
79626: PUSH
79627: LD_INT 1
79629: ARRAY
79630: PPUSH
79631: CALL_OW 310
79635: NOT
79636: AND
79637: IFFALSE 79663
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
79639: LD_EXP 66
79643: PUSH
79644: LD_VAR 0 2
79648: ARRAY
79649: PUSH
79650: LD_INT 1
79652: ARRAY
79653: PPUSH
79654: LD_VAR 0 3
79658: PPUSH
79659: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
79663: LD_EXP 66
79667: PUSH
79668: LD_VAR 0 2
79672: ARRAY
79673: PUSH
79674: LD_INT 1
79676: ARRAY
79677: PPUSH
79678: CALL_OW 310
79682: PUSH
79683: LD_EXP 66
79687: PUSH
79688: LD_VAR 0 2
79692: ARRAY
79693: PUSH
79694: LD_INT 1
79696: ARRAY
79697: PPUSH
79698: CALL_OW 310
79702: PPUSH
79703: CALL_OW 461
79707: PUSH
79708: LD_INT 3
79710: NONEQUAL
79711: AND
79712: IFFALSE 79733
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
79714: LD_EXP 66
79718: PUSH
79719: LD_VAR 0 2
79723: ARRAY
79724: PUSH
79725: LD_INT 1
79727: ARRAY
79728: PPUSH
79729: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
79733: LD_VAR 0 3
79737: PPUSH
79738: CALL_OW 461
79742: PUSH
79743: LD_INT 6
79745: EQUAL
79746: PUSH
79747: LD_VAR 0 6
79751: PUSH
79752: LD_INT 1
79754: GREATER
79755: AND
79756: IFFALSE 79908
// begin sci := [ ] ;
79758: LD_ADDR_VAR 0 8
79762: PUSH
79763: EMPTY
79764: ST_TO_ADDR
// for x in ( tmp diff j ) do
79765: LD_ADDR_VAR 0 7
79769: PUSH
79770: LD_VAR 0 6
79774: PUSH
79775: LD_VAR 0 3
79779: DIFF
79780: PUSH
79781: FOR_IN
79782: IFFALSE 79834
// begin if sci = 6 then
79784: LD_VAR 0 8
79788: PUSH
79789: LD_INT 6
79791: EQUAL
79792: IFFALSE 79796
// break ;
79794: GO 79834
// if BuildingStatus ( x ) = bs_idle then
79796: LD_VAR 0 7
79800: PPUSH
79801: CALL_OW 461
79805: PUSH
79806: LD_INT 2
79808: EQUAL
79809: IFFALSE 79832
// sci := sci ^ UnitsInside ( x ) ;
79811: LD_ADDR_VAR 0 8
79815: PUSH
79816: LD_VAR 0 8
79820: PUSH
79821: LD_VAR 0 7
79825: PPUSH
79826: CALL_OW 313
79830: ADD
79831: ST_TO_ADDR
// end ;
79832: GO 79781
79834: POP
79835: POP
// if not sci then
79836: LD_VAR 0 8
79840: NOT
79841: IFFALSE 79845
// continue ;
79843: GO 78890
// for x in sci do
79845: LD_ADDR_VAR 0 7
79849: PUSH
79850: LD_VAR 0 8
79854: PUSH
79855: FOR_IN
79856: IFFALSE 79906
// if IsInUnit ( x ) and not HasTask ( x ) then
79858: LD_VAR 0 7
79862: PPUSH
79863: CALL_OW 310
79867: PUSH
79868: LD_VAR 0 7
79872: PPUSH
79873: CALL_OW 314
79877: NOT
79878: AND
79879: IFFALSE 79904
// begin ComExitBuilding ( x ) ;
79881: LD_VAR 0 7
79885: PPUSH
79886: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
79890: LD_VAR 0 7
79894: PPUSH
79895: LD_VAR 0 3
79899: PPUSH
79900: CALL_OW 180
// end ;
79904: GO 79855
79906: POP
79907: POP
// end ; end ;
79908: GO 78890
79910: POP
79911: POP
// end ;
79912: GO 78844
79914: POP
79915: POP
// end ;
79916: LD_VAR 0 1
79920: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
79921: LD_INT 0
79923: PPUSH
79924: PPUSH
// if not mc_bases then
79925: LD_EXP 36
79929: NOT
79930: IFFALSE 79934
// exit ;
79932: GO 80015
// for i = 1 to mc_bases do
79934: LD_ADDR_VAR 0 2
79938: PUSH
79939: DOUBLE
79940: LD_INT 1
79942: DEC
79943: ST_TO_ADDR
79944: LD_EXP 36
79948: PUSH
79949: FOR_TO
79950: IFFALSE 80013
// if mc_mines [ i ] and mc_miners [ i ] then
79952: LD_EXP 49
79956: PUSH
79957: LD_VAR 0 2
79961: ARRAY
79962: PUSH
79963: LD_EXP 50
79967: PUSH
79968: LD_VAR 0 2
79972: ARRAY
79973: AND
79974: IFFALSE 80011
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
79976: LD_EXP 50
79980: PUSH
79981: LD_VAR 0 2
79985: ARRAY
79986: PUSH
79987: LD_INT 1
79989: ARRAY
79990: PPUSH
79991: CALL_OW 255
79995: PPUSH
79996: LD_EXP 49
80000: PUSH
80001: LD_VAR 0 2
80005: ARRAY
80006: PPUSH
80007: CALL 23572 0 2
80011: GO 79949
80013: POP
80014: POP
// end ;
80015: LD_VAR 0 1
80019: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
80020: LD_INT 0
80022: PPUSH
80023: PPUSH
80024: PPUSH
80025: PPUSH
80026: PPUSH
80027: PPUSH
80028: PPUSH
80029: PPUSH
// if not mc_bases or not mc_parking then
80030: LD_EXP 36
80034: NOT
80035: PUSH
80036: LD_EXP 60
80040: NOT
80041: OR
80042: IFFALSE 80046
// exit ;
80044: GO 80745
// for i = 1 to mc_bases do
80046: LD_ADDR_VAR 0 2
80050: PUSH
80051: DOUBLE
80052: LD_INT 1
80054: DEC
80055: ST_TO_ADDR
80056: LD_EXP 36
80060: PUSH
80061: FOR_TO
80062: IFFALSE 80743
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
80064: LD_EXP 36
80068: PUSH
80069: LD_VAR 0 2
80073: ARRAY
80074: NOT
80075: PUSH
80076: LD_EXP 60
80080: PUSH
80081: LD_VAR 0 2
80085: ARRAY
80086: NOT
80087: OR
80088: IFFALSE 80092
// continue ;
80090: GO 80061
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
80092: LD_ADDR_VAR 0 5
80096: PUSH
80097: LD_EXP 36
80101: PUSH
80102: LD_VAR 0 2
80106: ARRAY
80107: PUSH
80108: LD_INT 1
80110: ARRAY
80111: PPUSH
80112: CALL_OW 255
80116: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
80117: LD_ADDR_VAR 0 6
80121: PUSH
80122: LD_EXP 36
80126: PUSH
80127: LD_VAR 0 2
80131: ARRAY
80132: PPUSH
80133: LD_INT 30
80135: PUSH
80136: LD_INT 3
80138: PUSH
80139: EMPTY
80140: LIST
80141: LIST
80142: PPUSH
80143: CALL_OW 72
80147: ST_TO_ADDR
// if not fac then
80148: LD_VAR 0 6
80152: NOT
80153: IFFALSE 80204
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
80155: LD_ADDR_VAR 0 6
80159: PUSH
80160: LD_EXP 36
80164: PUSH
80165: LD_VAR 0 2
80169: ARRAY
80170: PPUSH
80171: LD_INT 2
80173: PUSH
80174: LD_INT 30
80176: PUSH
80177: LD_INT 0
80179: PUSH
80180: EMPTY
80181: LIST
80182: LIST
80183: PUSH
80184: LD_INT 30
80186: PUSH
80187: LD_INT 1
80189: PUSH
80190: EMPTY
80191: LIST
80192: LIST
80193: PUSH
80194: EMPTY
80195: LIST
80196: LIST
80197: LIST
80198: PPUSH
80199: CALL_OW 72
80203: ST_TO_ADDR
// if not fac then
80204: LD_VAR 0 6
80208: NOT
80209: IFFALSE 80213
// continue ;
80211: GO 80061
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
80213: LD_ADDR_VAR 0 7
80217: PUSH
80218: LD_EXP 60
80222: PUSH
80223: LD_VAR 0 2
80227: ARRAY
80228: PPUSH
80229: LD_INT 22
80231: PUSH
80232: LD_VAR 0 5
80236: PUSH
80237: EMPTY
80238: LIST
80239: LIST
80240: PUSH
80241: LD_INT 21
80243: PUSH
80244: LD_INT 2
80246: PUSH
80247: EMPTY
80248: LIST
80249: LIST
80250: PUSH
80251: LD_INT 3
80253: PUSH
80254: LD_INT 24
80256: PUSH
80257: LD_INT 1000
80259: PUSH
80260: EMPTY
80261: LIST
80262: LIST
80263: PUSH
80264: EMPTY
80265: LIST
80266: LIST
80267: PUSH
80268: EMPTY
80269: LIST
80270: LIST
80271: LIST
80272: PPUSH
80273: CALL_OW 70
80277: ST_TO_ADDR
// for j in fac do
80278: LD_ADDR_VAR 0 3
80282: PUSH
80283: LD_VAR 0 6
80287: PUSH
80288: FOR_IN
80289: IFFALSE 80370
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
80291: LD_ADDR_VAR 0 7
80295: PUSH
80296: LD_VAR 0 7
80300: PUSH
80301: LD_INT 22
80303: PUSH
80304: LD_VAR 0 5
80308: PUSH
80309: EMPTY
80310: LIST
80311: LIST
80312: PUSH
80313: LD_INT 91
80315: PUSH
80316: LD_VAR 0 3
80320: PUSH
80321: LD_INT 15
80323: PUSH
80324: EMPTY
80325: LIST
80326: LIST
80327: LIST
80328: PUSH
80329: LD_INT 21
80331: PUSH
80332: LD_INT 2
80334: PUSH
80335: EMPTY
80336: LIST
80337: LIST
80338: PUSH
80339: LD_INT 3
80341: PUSH
80342: LD_INT 24
80344: PUSH
80345: LD_INT 1000
80347: PUSH
80348: EMPTY
80349: LIST
80350: LIST
80351: PUSH
80352: EMPTY
80353: LIST
80354: LIST
80355: PUSH
80356: EMPTY
80357: LIST
80358: LIST
80359: LIST
80360: LIST
80361: PPUSH
80362: CALL_OW 69
80366: UNION
80367: ST_TO_ADDR
80368: GO 80288
80370: POP
80371: POP
// if not vehs then
80372: LD_VAR 0 7
80376: NOT
80377: IFFALSE 80403
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
80379: LD_ADDR_EXP 48
80383: PUSH
80384: LD_EXP 48
80388: PPUSH
80389: LD_VAR 0 2
80393: PPUSH
80394: EMPTY
80395: PPUSH
80396: CALL_OW 1
80400: ST_TO_ADDR
// continue ;
80401: GO 80061
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
80403: LD_ADDR_VAR 0 8
80407: PUSH
80408: LD_EXP 36
80412: PUSH
80413: LD_VAR 0 2
80417: ARRAY
80418: PPUSH
80419: LD_INT 30
80421: PUSH
80422: LD_INT 3
80424: PUSH
80425: EMPTY
80426: LIST
80427: LIST
80428: PPUSH
80429: CALL_OW 72
80433: ST_TO_ADDR
// if tmp then
80434: LD_VAR 0 8
80438: IFFALSE 80541
// begin for j in tmp do
80440: LD_ADDR_VAR 0 3
80444: PUSH
80445: LD_VAR 0 8
80449: PUSH
80450: FOR_IN
80451: IFFALSE 80539
// for k in UnitsInside ( j ) do
80453: LD_ADDR_VAR 0 4
80457: PUSH
80458: LD_VAR 0 3
80462: PPUSH
80463: CALL_OW 313
80467: PUSH
80468: FOR_IN
80469: IFFALSE 80535
// if k then
80471: LD_VAR 0 4
80475: IFFALSE 80533
// if not k in mc_repair_vehicle [ i ] then
80477: LD_VAR 0 4
80481: PUSH
80482: LD_EXP 48
80486: PUSH
80487: LD_VAR 0 2
80491: ARRAY
80492: IN
80493: NOT
80494: IFFALSE 80533
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
80496: LD_ADDR_EXP 48
80500: PUSH
80501: LD_EXP 48
80505: PPUSH
80506: LD_VAR 0 2
80510: PPUSH
80511: LD_EXP 48
80515: PUSH
80516: LD_VAR 0 2
80520: ARRAY
80521: PUSH
80522: LD_VAR 0 4
80526: UNION
80527: PPUSH
80528: CALL_OW 1
80532: ST_TO_ADDR
80533: GO 80468
80535: POP
80536: POP
80537: GO 80450
80539: POP
80540: POP
// end ; if not mc_repair_vehicle [ i ] then
80541: LD_EXP 48
80545: PUSH
80546: LD_VAR 0 2
80550: ARRAY
80551: NOT
80552: IFFALSE 80556
// continue ;
80554: GO 80061
// for j in mc_repair_vehicle [ i ] do
80556: LD_ADDR_VAR 0 3
80560: PUSH
80561: LD_EXP 48
80565: PUSH
80566: LD_VAR 0 2
80570: ARRAY
80571: PUSH
80572: FOR_IN
80573: IFFALSE 80739
// begin if GetClass ( j ) <> 3 then
80575: LD_VAR 0 3
80579: PPUSH
80580: CALL_OW 257
80584: PUSH
80585: LD_INT 3
80587: NONEQUAL
80588: IFFALSE 80629
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
80590: LD_ADDR_EXP 48
80594: PUSH
80595: LD_EXP 48
80599: PPUSH
80600: LD_VAR 0 2
80604: PPUSH
80605: LD_EXP 48
80609: PUSH
80610: LD_VAR 0 2
80614: ARRAY
80615: PUSH
80616: LD_VAR 0 3
80620: DIFF
80621: PPUSH
80622: CALL_OW 1
80626: ST_TO_ADDR
// continue ;
80627: GO 80572
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
80629: LD_VAR 0 3
80633: PPUSH
80634: CALL_OW 311
80638: NOT
80639: PUSH
80640: LD_VAR 0 3
80644: PUSH
80645: LD_EXP 39
80649: PUSH
80650: LD_VAR 0 2
80654: ARRAY
80655: PUSH
80656: LD_INT 1
80658: ARRAY
80659: IN
80660: NOT
80661: AND
80662: PUSH
80663: LD_VAR 0 3
80667: PUSH
80668: LD_EXP 39
80672: PUSH
80673: LD_VAR 0 2
80677: ARRAY
80678: PUSH
80679: LD_INT 2
80681: ARRAY
80682: IN
80683: NOT
80684: AND
80685: IFFALSE 80737
// begin if IsInUnit ( j ) then
80687: LD_VAR 0 3
80691: PPUSH
80692: CALL_OW 310
80696: IFFALSE 80707
// ComExitBuilding ( j ) ;
80698: LD_VAR 0 3
80702: PPUSH
80703: CALL_OW 122
// if not HasTask ( j ) then
80707: LD_VAR 0 3
80711: PPUSH
80712: CALL_OW 314
80716: NOT
80717: IFFALSE 80737
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
80719: LD_VAR 0 3
80723: PPUSH
80724: LD_VAR 0 7
80728: PUSH
80729: LD_INT 1
80731: ARRAY
80732: PPUSH
80733: CALL_OW 189
// end ; end ;
80737: GO 80572
80739: POP
80740: POP
// end ;
80741: GO 80061
80743: POP
80744: POP
// end ;
80745: LD_VAR 0 1
80749: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
80750: LD_INT 0
80752: PPUSH
80753: PPUSH
80754: PPUSH
80755: PPUSH
80756: PPUSH
80757: PPUSH
80758: PPUSH
80759: PPUSH
80760: PPUSH
80761: PPUSH
80762: PPUSH
// if not mc_bases then
80763: LD_EXP 36
80767: NOT
80768: IFFALSE 80772
// exit ;
80770: GO 81574
// for i = 1 to mc_bases do
80772: LD_ADDR_VAR 0 2
80776: PUSH
80777: DOUBLE
80778: LD_INT 1
80780: DEC
80781: ST_TO_ADDR
80782: LD_EXP 36
80786: PUSH
80787: FOR_TO
80788: IFFALSE 81572
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
80790: LD_EXP 64
80794: PUSH
80795: LD_VAR 0 2
80799: ARRAY
80800: NOT
80801: PUSH
80802: LD_EXP 39
80806: PUSH
80807: LD_VAR 0 2
80811: ARRAY
80812: PUSH
80813: LD_INT 1
80815: ARRAY
80816: OR
80817: PUSH
80818: LD_EXP 39
80822: PUSH
80823: LD_VAR 0 2
80827: ARRAY
80828: PUSH
80829: LD_INT 2
80831: ARRAY
80832: OR
80833: PUSH
80834: LD_EXP 62
80838: PUSH
80839: LD_VAR 0 2
80843: ARRAY
80844: PPUSH
80845: LD_INT 1
80847: PPUSH
80848: CALL_OW 325
80852: NOT
80853: OR
80854: PUSH
80855: LD_EXP 59
80859: PUSH
80860: LD_VAR 0 2
80864: ARRAY
80865: OR
80866: IFFALSE 80870
// continue ;
80868: GO 80787
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
80870: LD_ADDR_VAR 0 8
80874: PUSH
80875: LD_EXP 36
80879: PUSH
80880: LD_VAR 0 2
80884: ARRAY
80885: PPUSH
80886: LD_INT 25
80888: PUSH
80889: LD_INT 4
80891: PUSH
80892: EMPTY
80893: LIST
80894: LIST
80895: PUSH
80896: LD_INT 50
80898: PUSH
80899: EMPTY
80900: LIST
80901: PUSH
80902: LD_INT 3
80904: PUSH
80905: LD_INT 60
80907: PUSH
80908: EMPTY
80909: LIST
80910: PUSH
80911: EMPTY
80912: LIST
80913: LIST
80914: PUSH
80915: EMPTY
80916: LIST
80917: LIST
80918: LIST
80919: PPUSH
80920: CALL_OW 72
80924: PUSH
80925: LD_EXP 40
80929: PUSH
80930: LD_VAR 0 2
80934: ARRAY
80935: DIFF
80936: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
80937: LD_ADDR_VAR 0 9
80941: PUSH
80942: LD_EXP 36
80946: PUSH
80947: LD_VAR 0 2
80951: ARRAY
80952: PPUSH
80953: LD_INT 2
80955: PUSH
80956: LD_INT 30
80958: PUSH
80959: LD_INT 0
80961: PUSH
80962: EMPTY
80963: LIST
80964: LIST
80965: PUSH
80966: LD_INT 30
80968: PUSH
80969: LD_INT 1
80971: PUSH
80972: EMPTY
80973: LIST
80974: LIST
80975: PUSH
80976: EMPTY
80977: LIST
80978: LIST
80979: LIST
80980: PPUSH
80981: CALL_OW 72
80985: ST_TO_ADDR
// if not tmp or not dep then
80986: LD_VAR 0 8
80990: NOT
80991: PUSH
80992: LD_VAR 0 9
80996: NOT
80997: OR
80998: IFFALSE 81002
// continue ;
81000: GO 80787
// side := GetSide ( tmp [ 1 ] ) ;
81002: LD_ADDR_VAR 0 11
81006: PUSH
81007: LD_VAR 0 8
81011: PUSH
81012: LD_INT 1
81014: ARRAY
81015: PPUSH
81016: CALL_OW 255
81020: ST_TO_ADDR
// dep := dep [ 1 ] ;
81021: LD_ADDR_VAR 0 9
81025: PUSH
81026: LD_VAR 0 9
81030: PUSH
81031: LD_INT 1
81033: ARRAY
81034: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
81035: LD_ADDR_VAR 0 7
81039: PUSH
81040: LD_EXP 64
81044: PUSH
81045: LD_VAR 0 2
81049: ARRAY
81050: PPUSH
81051: LD_INT 22
81053: PUSH
81054: LD_INT 0
81056: PUSH
81057: EMPTY
81058: LIST
81059: LIST
81060: PUSH
81061: LD_INT 25
81063: PUSH
81064: LD_INT 12
81066: PUSH
81067: EMPTY
81068: LIST
81069: LIST
81070: PUSH
81071: EMPTY
81072: LIST
81073: LIST
81074: PPUSH
81075: CALL_OW 70
81079: PUSH
81080: LD_INT 22
81082: PUSH
81083: LD_INT 0
81085: PUSH
81086: EMPTY
81087: LIST
81088: LIST
81089: PUSH
81090: LD_INT 25
81092: PUSH
81093: LD_INT 12
81095: PUSH
81096: EMPTY
81097: LIST
81098: LIST
81099: PUSH
81100: LD_INT 91
81102: PUSH
81103: LD_VAR 0 9
81107: PUSH
81108: LD_INT 20
81110: PUSH
81111: EMPTY
81112: LIST
81113: LIST
81114: LIST
81115: PUSH
81116: EMPTY
81117: LIST
81118: LIST
81119: LIST
81120: PPUSH
81121: CALL_OW 69
81125: UNION
81126: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
81127: LD_ADDR_VAR 0 10
81131: PUSH
81132: LD_EXP 64
81136: PUSH
81137: LD_VAR 0 2
81141: ARRAY
81142: PPUSH
81143: LD_INT 81
81145: PUSH
81146: LD_VAR 0 11
81150: PUSH
81151: EMPTY
81152: LIST
81153: LIST
81154: PPUSH
81155: CALL_OW 70
81159: ST_TO_ADDR
// if not apes or danger_at_area then
81160: LD_VAR 0 7
81164: NOT
81165: PUSH
81166: LD_VAR 0 10
81170: OR
81171: IFFALSE 81221
// begin if mc_taming [ i ] then
81173: LD_EXP 67
81177: PUSH
81178: LD_VAR 0 2
81182: ARRAY
81183: IFFALSE 81219
// begin MC_Reset ( i , 121 ) ;
81185: LD_VAR 0 2
81189: PPUSH
81190: LD_INT 121
81192: PPUSH
81193: CALL 66656 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
81197: LD_ADDR_EXP 67
81201: PUSH
81202: LD_EXP 67
81206: PPUSH
81207: LD_VAR 0 2
81211: PPUSH
81212: EMPTY
81213: PPUSH
81214: CALL_OW 1
81218: ST_TO_ADDR
// end ; continue ;
81219: GO 80787
// end ; for j in tmp do
81221: LD_ADDR_VAR 0 3
81225: PUSH
81226: LD_VAR 0 8
81230: PUSH
81231: FOR_IN
81232: IFFALSE 81568
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
81234: LD_VAR 0 3
81238: PUSH
81239: LD_EXP 67
81243: PUSH
81244: LD_VAR 0 2
81248: ARRAY
81249: IN
81250: NOT
81251: PUSH
81252: LD_EXP 67
81256: PUSH
81257: LD_VAR 0 2
81261: ARRAY
81262: PUSH
81263: LD_INT 3
81265: LESS
81266: AND
81267: IFFALSE 81325
// begin SetTag ( j , 121 ) ;
81269: LD_VAR 0 3
81273: PPUSH
81274: LD_INT 121
81276: PPUSH
81277: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
81281: LD_ADDR_EXP 67
81285: PUSH
81286: LD_EXP 67
81290: PPUSH
81291: LD_VAR 0 2
81295: PUSH
81296: LD_EXP 67
81300: PUSH
81301: LD_VAR 0 2
81305: ARRAY
81306: PUSH
81307: LD_INT 1
81309: PLUS
81310: PUSH
81311: EMPTY
81312: LIST
81313: LIST
81314: PPUSH
81315: LD_VAR 0 3
81319: PPUSH
81320: CALL 26583 0 3
81324: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
81325: LD_VAR 0 3
81329: PUSH
81330: LD_EXP 67
81334: PUSH
81335: LD_VAR 0 2
81339: ARRAY
81340: IN
81341: IFFALSE 81566
// begin if GetClass ( j ) <> 4 then
81343: LD_VAR 0 3
81347: PPUSH
81348: CALL_OW 257
81352: PUSH
81353: LD_INT 4
81355: NONEQUAL
81356: IFFALSE 81409
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
81358: LD_ADDR_EXP 67
81362: PUSH
81363: LD_EXP 67
81367: PPUSH
81368: LD_VAR 0 2
81372: PPUSH
81373: LD_EXP 67
81377: PUSH
81378: LD_VAR 0 2
81382: ARRAY
81383: PUSH
81384: LD_VAR 0 3
81388: DIFF
81389: PPUSH
81390: CALL_OW 1
81394: ST_TO_ADDR
// SetTag ( j , 0 ) ;
81395: LD_VAR 0 3
81399: PPUSH
81400: LD_INT 0
81402: PPUSH
81403: CALL_OW 109
// continue ;
81407: GO 81231
// end ; if IsInUnit ( j ) then
81409: LD_VAR 0 3
81413: PPUSH
81414: CALL_OW 310
81418: IFFALSE 81429
// ComExitBuilding ( j ) ;
81420: LD_VAR 0 3
81424: PPUSH
81425: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
81429: LD_ADDR_VAR 0 6
81433: PUSH
81434: LD_VAR 0 7
81438: PPUSH
81439: LD_VAR 0 3
81443: PPUSH
81444: CALL_OW 74
81448: ST_TO_ADDR
// if not ape then
81449: LD_VAR 0 6
81453: NOT
81454: IFFALSE 81458
// break ;
81456: GO 81568
// x := GetX ( ape ) ;
81458: LD_ADDR_VAR 0 4
81462: PUSH
81463: LD_VAR 0 6
81467: PPUSH
81468: CALL_OW 250
81472: ST_TO_ADDR
// y := GetY ( ape ) ;
81473: LD_ADDR_VAR 0 5
81477: PUSH
81478: LD_VAR 0 6
81482: PPUSH
81483: CALL_OW 251
81487: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
81488: LD_VAR 0 4
81492: PPUSH
81493: LD_VAR 0 5
81497: PPUSH
81498: CALL_OW 488
81502: NOT
81503: PUSH
81504: LD_VAR 0 11
81508: PPUSH
81509: LD_VAR 0 4
81513: PPUSH
81514: LD_VAR 0 5
81518: PPUSH
81519: LD_INT 20
81521: PPUSH
81522: CALL 27479 0 4
81526: PUSH
81527: LD_INT 4
81529: ARRAY
81530: OR
81531: IFFALSE 81535
// break ;
81533: GO 81568
// if not HasTask ( j ) then
81535: LD_VAR 0 3
81539: PPUSH
81540: CALL_OW 314
81544: NOT
81545: IFFALSE 81566
// ComTameXY ( j , x , y ) ;
81547: LD_VAR 0 3
81551: PPUSH
81552: LD_VAR 0 4
81556: PPUSH
81557: LD_VAR 0 5
81561: PPUSH
81562: CALL_OW 131
// end ; end ;
81566: GO 81231
81568: POP
81569: POP
// end ;
81570: GO 80787
81572: POP
81573: POP
// end ;
81574: LD_VAR 0 1
81578: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
81579: LD_INT 0
81581: PPUSH
81582: PPUSH
81583: PPUSH
81584: PPUSH
81585: PPUSH
81586: PPUSH
81587: PPUSH
81588: PPUSH
// if not mc_bases then
81589: LD_EXP 36
81593: NOT
81594: IFFALSE 81598
// exit ;
81596: GO 82224
// for i = 1 to mc_bases do
81598: LD_ADDR_VAR 0 2
81602: PUSH
81603: DOUBLE
81604: LD_INT 1
81606: DEC
81607: ST_TO_ADDR
81608: LD_EXP 36
81612: PUSH
81613: FOR_TO
81614: IFFALSE 82222
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
81616: LD_EXP 65
81620: PUSH
81621: LD_VAR 0 2
81625: ARRAY
81626: NOT
81627: PUSH
81628: LD_EXP 65
81632: PUSH
81633: LD_VAR 0 2
81637: ARRAY
81638: PPUSH
81639: LD_INT 25
81641: PUSH
81642: LD_INT 12
81644: PUSH
81645: EMPTY
81646: LIST
81647: LIST
81648: PPUSH
81649: CALL_OW 72
81653: NOT
81654: OR
81655: IFFALSE 81659
// continue ;
81657: GO 81613
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
81659: LD_ADDR_VAR 0 5
81663: PUSH
81664: LD_EXP 65
81668: PUSH
81669: LD_VAR 0 2
81673: ARRAY
81674: PUSH
81675: LD_INT 1
81677: ARRAY
81678: PPUSH
81679: CALL_OW 255
81683: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
81684: LD_VAR 0 5
81688: PPUSH
81689: LD_INT 2
81691: PPUSH
81692: CALL_OW 325
81696: IFFALSE 81949
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
81698: LD_ADDR_VAR 0 4
81702: PUSH
81703: LD_EXP 65
81707: PUSH
81708: LD_VAR 0 2
81712: ARRAY
81713: PPUSH
81714: LD_INT 25
81716: PUSH
81717: LD_INT 16
81719: PUSH
81720: EMPTY
81721: LIST
81722: LIST
81723: PPUSH
81724: CALL_OW 72
81728: ST_TO_ADDR
// if tmp < 6 then
81729: LD_VAR 0 4
81733: PUSH
81734: LD_INT 6
81736: LESS
81737: IFFALSE 81949
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
81739: LD_ADDR_VAR 0 6
81743: PUSH
81744: LD_EXP 36
81748: PUSH
81749: LD_VAR 0 2
81753: ARRAY
81754: PPUSH
81755: LD_INT 2
81757: PUSH
81758: LD_INT 30
81760: PUSH
81761: LD_INT 0
81763: PUSH
81764: EMPTY
81765: LIST
81766: LIST
81767: PUSH
81768: LD_INT 30
81770: PUSH
81771: LD_INT 1
81773: PUSH
81774: EMPTY
81775: LIST
81776: LIST
81777: PUSH
81778: EMPTY
81779: LIST
81780: LIST
81781: LIST
81782: PPUSH
81783: CALL_OW 72
81787: ST_TO_ADDR
// if depot then
81788: LD_VAR 0 6
81792: IFFALSE 81949
// begin selected := 0 ;
81794: LD_ADDR_VAR 0 7
81798: PUSH
81799: LD_INT 0
81801: ST_TO_ADDR
// for j in depot do
81802: LD_ADDR_VAR 0 3
81806: PUSH
81807: LD_VAR 0 6
81811: PUSH
81812: FOR_IN
81813: IFFALSE 81844
// begin if UnitsInside ( j ) < 6 then
81815: LD_VAR 0 3
81819: PPUSH
81820: CALL_OW 313
81824: PUSH
81825: LD_INT 6
81827: LESS
81828: IFFALSE 81842
// begin selected := j ;
81830: LD_ADDR_VAR 0 7
81834: PUSH
81835: LD_VAR 0 3
81839: ST_TO_ADDR
// break ;
81840: GO 81844
// end ; end ;
81842: GO 81812
81844: POP
81845: POP
// if selected then
81846: LD_VAR 0 7
81850: IFFALSE 81949
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
81852: LD_ADDR_VAR 0 3
81856: PUSH
81857: LD_EXP 65
81861: PUSH
81862: LD_VAR 0 2
81866: ARRAY
81867: PPUSH
81868: LD_INT 25
81870: PUSH
81871: LD_INT 12
81873: PUSH
81874: EMPTY
81875: LIST
81876: LIST
81877: PPUSH
81878: CALL_OW 72
81882: PUSH
81883: FOR_IN
81884: IFFALSE 81947
// if not HasTask ( j ) then
81886: LD_VAR 0 3
81890: PPUSH
81891: CALL_OW 314
81895: NOT
81896: IFFALSE 81945
// begin if not IsInUnit ( j ) then
81898: LD_VAR 0 3
81902: PPUSH
81903: CALL_OW 310
81907: NOT
81908: IFFALSE 81924
// ComEnterUnit ( j , selected ) ;
81910: LD_VAR 0 3
81914: PPUSH
81915: LD_VAR 0 7
81919: PPUSH
81920: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
81924: LD_VAR 0 3
81928: PPUSH
81929: LD_INT 16
81931: PPUSH
81932: CALL_OW 183
// AddComExitBuilding ( j ) ;
81936: LD_VAR 0 3
81940: PPUSH
81941: CALL_OW 182
// end ;
81945: GO 81883
81947: POP
81948: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
81949: LD_VAR 0 5
81953: PPUSH
81954: LD_INT 11
81956: PPUSH
81957: CALL_OW 325
81961: IFFALSE 82220
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
81963: LD_ADDR_VAR 0 4
81967: PUSH
81968: LD_EXP 65
81972: PUSH
81973: LD_VAR 0 2
81977: ARRAY
81978: PPUSH
81979: LD_INT 25
81981: PUSH
81982: LD_INT 16
81984: PUSH
81985: EMPTY
81986: LIST
81987: LIST
81988: PPUSH
81989: CALL_OW 72
81993: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
81994: LD_VAR 0 4
81998: PUSH
81999: LD_INT 6
82001: GREATEREQUAL
82002: PUSH
82003: LD_VAR 0 5
82007: PPUSH
82008: LD_INT 2
82010: PPUSH
82011: CALL_OW 325
82015: NOT
82016: OR
82017: IFFALSE 82220
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
82019: LD_ADDR_VAR 0 8
82023: PUSH
82024: LD_EXP 36
82028: PUSH
82029: LD_VAR 0 2
82033: ARRAY
82034: PPUSH
82035: LD_INT 2
82037: PUSH
82038: LD_INT 30
82040: PUSH
82041: LD_INT 4
82043: PUSH
82044: EMPTY
82045: LIST
82046: LIST
82047: PUSH
82048: LD_INT 30
82050: PUSH
82051: LD_INT 5
82053: PUSH
82054: EMPTY
82055: LIST
82056: LIST
82057: PUSH
82058: EMPTY
82059: LIST
82060: LIST
82061: LIST
82062: PPUSH
82063: CALL_OW 72
82067: ST_TO_ADDR
// if barracks then
82068: LD_VAR 0 8
82072: IFFALSE 82220
// begin selected := 0 ;
82074: LD_ADDR_VAR 0 7
82078: PUSH
82079: LD_INT 0
82081: ST_TO_ADDR
// for j in barracks do
82082: LD_ADDR_VAR 0 3
82086: PUSH
82087: LD_VAR 0 8
82091: PUSH
82092: FOR_IN
82093: IFFALSE 82124
// begin if UnitsInside ( j ) < 6 then
82095: LD_VAR 0 3
82099: PPUSH
82100: CALL_OW 313
82104: PUSH
82105: LD_INT 6
82107: LESS
82108: IFFALSE 82122
// begin selected := j ;
82110: LD_ADDR_VAR 0 7
82114: PUSH
82115: LD_VAR 0 3
82119: ST_TO_ADDR
// break ;
82120: GO 82124
// end ; end ;
82122: GO 82092
82124: POP
82125: POP
// if selected then
82126: LD_VAR 0 7
82130: IFFALSE 82220
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
82132: LD_ADDR_VAR 0 3
82136: PUSH
82137: LD_EXP 65
82141: PUSH
82142: LD_VAR 0 2
82146: ARRAY
82147: PPUSH
82148: LD_INT 25
82150: PUSH
82151: LD_INT 12
82153: PUSH
82154: EMPTY
82155: LIST
82156: LIST
82157: PPUSH
82158: CALL_OW 72
82162: PUSH
82163: FOR_IN
82164: IFFALSE 82218
// if not IsInUnit ( j ) and not HasTask ( j ) then
82166: LD_VAR 0 3
82170: PPUSH
82171: CALL_OW 310
82175: NOT
82176: PUSH
82177: LD_VAR 0 3
82181: PPUSH
82182: CALL_OW 314
82186: NOT
82187: AND
82188: IFFALSE 82216
// begin ComEnterUnit ( j , selected ) ;
82190: LD_VAR 0 3
82194: PPUSH
82195: LD_VAR 0 7
82199: PPUSH
82200: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
82204: LD_VAR 0 3
82208: PPUSH
82209: LD_INT 15
82211: PPUSH
82212: CALL_OW 183
// end ;
82216: GO 82163
82218: POP
82219: POP
// end ; end ; end ; end ; end ;
82220: GO 81613
82222: POP
82223: POP
// end ;
82224: LD_VAR 0 1
82228: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
82229: LD_INT 0
82231: PPUSH
82232: PPUSH
82233: PPUSH
82234: PPUSH
// if not mc_bases then
82235: LD_EXP 36
82239: NOT
82240: IFFALSE 82244
// exit ;
82242: GO 82422
// for i = 1 to mc_bases do
82244: LD_ADDR_VAR 0 2
82248: PUSH
82249: DOUBLE
82250: LD_INT 1
82252: DEC
82253: ST_TO_ADDR
82254: LD_EXP 36
82258: PUSH
82259: FOR_TO
82260: IFFALSE 82420
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
82262: LD_ADDR_VAR 0 4
82266: PUSH
82267: LD_EXP 36
82271: PUSH
82272: LD_VAR 0 2
82276: ARRAY
82277: PPUSH
82278: LD_INT 25
82280: PUSH
82281: LD_INT 9
82283: PUSH
82284: EMPTY
82285: LIST
82286: LIST
82287: PPUSH
82288: CALL_OW 72
82292: ST_TO_ADDR
// if not tmp then
82293: LD_VAR 0 4
82297: NOT
82298: IFFALSE 82302
// continue ;
82300: GO 82259
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
82302: LD_EXP 62
82306: PUSH
82307: LD_VAR 0 2
82311: ARRAY
82312: PPUSH
82313: LD_INT 29
82315: PPUSH
82316: CALL_OW 325
82320: NOT
82321: PUSH
82322: LD_EXP 62
82326: PUSH
82327: LD_VAR 0 2
82331: ARRAY
82332: PPUSH
82333: LD_INT 28
82335: PPUSH
82336: CALL_OW 325
82340: NOT
82341: AND
82342: IFFALSE 82346
// continue ;
82344: GO 82259
// for j in tmp do
82346: LD_ADDR_VAR 0 3
82350: PUSH
82351: LD_VAR 0 4
82355: PUSH
82356: FOR_IN
82357: IFFALSE 82416
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
82359: LD_VAR 0 3
82363: PUSH
82364: LD_EXP 39
82368: PUSH
82369: LD_VAR 0 2
82373: ARRAY
82374: PUSH
82375: LD_INT 1
82377: ARRAY
82378: IN
82379: NOT
82380: PUSH
82381: LD_VAR 0 3
82385: PUSH
82386: LD_EXP 39
82390: PUSH
82391: LD_VAR 0 2
82395: ARRAY
82396: PUSH
82397: LD_INT 2
82399: ARRAY
82400: IN
82401: NOT
82402: AND
82403: IFFALSE 82414
// ComSpaceTimeShoot ( j ) ;
82405: LD_VAR 0 3
82409: PPUSH
82410: CALL 20169 0 1
82414: GO 82356
82416: POP
82417: POP
// end ;
82418: GO 82259
82420: POP
82421: POP
// end ;
82422: LD_VAR 0 1
82426: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
82427: LD_INT 0
82429: PPUSH
82430: PPUSH
82431: PPUSH
82432: PPUSH
82433: PPUSH
82434: PPUSH
82435: PPUSH
82436: PPUSH
82437: PPUSH
// if not mc_bases then
82438: LD_EXP 36
82442: NOT
82443: IFFALSE 82447
// exit ;
82445: GO 83069
// for i = 1 to mc_bases do
82447: LD_ADDR_VAR 0 2
82451: PUSH
82452: DOUBLE
82453: LD_INT 1
82455: DEC
82456: ST_TO_ADDR
82457: LD_EXP 36
82461: PUSH
82462: FOR_TO
82463: IFFALSE 83067
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
82465: LD_EXP 71
82469: PUSH
82470: LD_VAR 0 2
82474: ARRAY
82475: NOT
82476: PUSH
82477: LD_INT 38
82479: PPUSH
82480: LD_EXP 62
82484: PUSH
82485: LD_VAR 0 2
82489: ARRAY
82490: PPUSH
82491: CALL_OW 321
82495: PUSH
82496: LD_INT 2
82498: NONEQUAL
82499: OR
82500: IFFALSE 82504
// continue ;
82502: GO 82462
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
82504: LD_ADDR_VAR 0 8
82508: PUSH
82509: LD_EXP 36
82513: PUSH
82514: LD_VAR 0 2
82518: ARRAY
82519: PPUSH
82520: LD_INT 30
82522: PUSH
82523: LD_INT 34
82525: PUSH
82526: EMPTY
82527: LIST
82528: LIST
82529: PPUSH
82530: CALL_OW 72
82534: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
82535: LD_ADDR_VAR 0 9
82539: PUSH
82540: LD_EXP 36
82544: PUSH
82545: LD_VAR 0 2
82549: ARRAY
82550: PPUSH
82551: LD_INT 25
82553: PUSH
82554: LD_INT 4
82556: PUSH
82557: EMPTY
82558: LIST
82559: LIST
82560: PPUSH
82561: CALL_OW 72
82565: PPUSH
82566: LD_INT 0
82568: PPUSH
82569: CALL 59869 0 2
82573: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
82574: LD_VAR 0 9
82578: NOT
82579: PUSH
82580: LD_VAR 0 8
82584: NOT
82585: OR
82586: PUSH
82587: LD_EXP 36
82591: PUSH
82592: LD_VAR 0 2
82596: ARRAY
82597: PPUSH
82598: LD_INT 124
82600: PPUSH
82601: CALL 59869 0 2
82605: OR
82606: IFFALSE 82610
// continue ;
82608: GO 82462
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
82610: LD_EXP 72
82614: PUSH
82615: LD_VAR 0 2
82619: ARRAY
82620: PUSH
82621: LD_EXP 71
82625: PUSH
82626: LD_VAR 0 2
82630: ARRAY
82631: LESS
82632: PUSH
82633: LD_EXP 72
82637: PUSH
82638: LD_VAR 0 2
82642: ARRAY
82643: PUSH
82644: LD_VAR 0 8
82648: LESS
82649: AND
82650: IFFALSE 83065
// begin tmp := sci [ 1 ] ;
82652: LD_ADDR_VAR 0 7
82656: PUSH
82657: LD_VAR 0 9
82661: PUSH
82662: LD_INT 1
82664: ARRAY
82665: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
82666: LD_VAR 0 7
82670: PPUSH
82671: LD_INT 124
82673: PPUSH
82674: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
82678: LD_ADDR_VAR 0 3
82682: PUSH
82683: DOUBLE
82684: LD_EXP 71
82688: PUSH
82689: LD_VAR 0 2
82693: ARRAY
82694: INC
82695: ST_TO_ADDR
82696: LD_EXP 71
82700: PUSH
82701: LD_VAR 0 2
82705: ARRAY
82706: PUSH
82707: FOR_DOWNTO
82708: IFFALSE 83051
// begin if IsInUnit ( tmp ) then
82710: LD_VAR 0 7
82714: PPUSH
82715: CALL_OW 310
82719: IFFALSE 82730
// ComExitBuilding ( tmp ) ;
82721: LD_VAR 0 7
82725: PPUSH
82726: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
82730: LD_INT 35
82732: PPUSH
82733: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
82737: LD_VAR 0 7
82741: PPUSH
82742: CALL_OW 310
82746: NOT
82747: PUSH
82748: LD_VAR 0 7
82752: PPUSH
82753: CALL_OW 314
82757: NOT
82758: AND
82759: IFFALSE 82730
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
82761: LD_ADDR_VAR 0 6
82765: PUSH
82766: LD_VAR 0 7
82770: PPUSH
82771: CALL_OW 250
82775: PUSH
82776: LD_VAR 0 7
82780: PPUSH
82781: CALL_OW 251
82785: PUSH
82786: EMPTY
82787: LIST
82788: LIST
82789: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
82790: LD_INT 35
82792: PPUSH
82793: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
82797: LD_ADDR_VAR 0 4
82801: PUSH
82802: LD_EXP 71
82806: PUSH
82807: LD_VAR 0 2
82811: ARRAY
82812: PUSH
82813: LD_VAR 0 3
82817: ARRAY
82818: PUSH
82819: LD_INT 1
82821: ARRAY
82822: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
82823: LD_ADDR_VAR 0 5
82827: PUSH
82828: LD_EXP 71
82832: PUSH
82833: LD_VAR 0 2
82837: ARRAY
82838: PUSH
82839: LD_VAR 0 3
82843: ARRAY
82844: PUSH
82845: LD_INT 2
82847: ARRAY
82848: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
82849: LD_VAR 0 7
82853: PPUSH
82854: LD_INT 10
82856: PPUSH
82857: CALL 29176 0 2
82861: PUSH
82862: LD_INT 4
82864: ARRAY
82865: IFFALSE 82903
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
82867: LD_VAR 0 7
82871: PPUSH
82872: LD_VAR 0 6
82876: PUSH
82877: LD_INT 1
82879: ARRAY
82880: PPUSH
82881: LD_VAR 0 6
82885: PUSH
82886: LD_INT 2
82888: ARRAY
82889: PPUSH
82890: CALL_OW 111
// wait ( 0 0$10 ) ;
82894: LD_INT 350
82896: PPUSH
82897: CALL_OW 67
// end else
82901: GO 82929
// begin ComMoveXY ( tmp , x , y ) ;
82903: LD_VAR 0 7
82907: PPUSH
82908: LD_VAR 0 4
82912: PPUSH
82913: LD_VAR 0 5
82917: PPUSH
82918: CALL_OW 111
// wait ( 0 0$3 ) ;
82922: LD_INT 105
82924: PPUSH
82925: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
82929: LD_VAR 0 7
82933: PPUSH
82934: LD_VAR 0 4
82938: PPUSH
82939: LD_VAR 0 5
82943: PPUSH
82944: CALL_OW 307
82948: IFFALSE 82790
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
82950: LD_VAR 0 7
82954: PPUSH
82955: LD_VAR 0 4
82959: PPUSH
82960: LD_VAR 0 5
82964: PPUSH
82965: LD_VAR 0 8
82969: PUSH
82970: LD_VAR 0 3
82974: ARRAY
82975: PPUSH
82976: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
82980: LD_INT 35
82982: PPUSH
82983: CALL_OW 67
// until not HasTask ( tmp ) ;
82987: LD_VAR 0 7
82991: PPUSH
82992: CALL_OW 314
82996: NOT
82997: IFFALSE 82980
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
82999: LD_ADDR_EXP 72
83003: PUSH
83004: LD_EXP 72
83008: PPUSH
83009: LD_VAR 0 2
83013: PUSH
83014: LD_EXP 72
83018: PUSH
83019: LD_VAR 0 2
83023: ARRAY
83024: PUSH
83025: LD_INT 1
83027: PLUS
83028: PUSH
83029: EMPTY
83030: LIST
83031: LIST
83032: PPUSH
83033: LD_VAR 0 8
83037: PUSH
83038: LD_VAR 0 3
83042: ARRAY
83043: PPUSH
83044: CALL 26583 0 3
83048: ST_TO_ADDR
// end ;
83049: GO 82707
83051: POP
83052: POP
// MC_Reset ( i , 124 ) ;
83053: LD_VAR 0 2
83057: PPUSH
83058: LD_INT 124
83060: PPUSH
83061: CALL 66656 0 2
// end ; end ;
83065: GO 82462
83067: POP
83068: POP
// end ;
83069: LD_VAR 0 1
83073: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
83074: LD_INT 0
83076: PPUSH
83077: PPUSH
83078: PPUSH
// if not mc_bases then
83079: LD_EXP 36
83083: NOT
83084: IFFALSE 83088
// exit ;
83086: GO 83694
// for i = 1 to mc_bases do
83088: LD_ADDR_VAR 0 2
83092: PUSH
83093: DOUBLE
83094: LD_INT 1
83096: DEC
83097: ST_TO_ADDR
83098: LD_EXP 36
83102: PUSH
83103: FOR_TO
83104: IFFALSE 83692
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
83106: LD_ADDR_VAR 0 3
83110: PUSH
83111: LD_EXP 36
83115: PUSH
83116: LD_VAR 0 2
83120: ARRAY
83121: PPUSH
83122: LD_INT 25
83124: PUSH
83125: LD_INT 4
83127: PUSH
83128: EMPTY
83129: LIST
83130: LIST
83131: PPUSH
83132: CALL_OW 72
83136: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
83137: LD_VAR 0 3
83141: NOT
83142: PUSH
83143: LD_EXP 73
83147: PUSH
83148: LD_VAR 0 2
83152: ARRAY
83153: NOT
83154: OR
83155: PUSH
83156: LD_EXP 36
83160: PUSH
83161: LD_VAR 0 2
83165: ARRAY
83166: PPUSH
83167: LD_INT 2
83169: PUSH
83170: LD_INT 30
83172: PUSH
83173: LD_INT 0
83175: PUSH
83176: EMPTY
83177: LIST
83178: LIST
83179: PUSH
83180: LD_INT 30
83182: PUSH
83183: LD_INT 1
83185: PUSH
83186: EMPTY
83187: LIST
83188: LIST
83189: PUSH
83190: EMPTY
83191: LIST
83192: LIST
83193: LIST
83194: PPUSH
83195: CALL_OW 72
83199: NOT
83200: OR
83201: IFFALSE 83251
// begin if mc_deposits_finder [ i ] then
83203: LD_EXP 74
83207: PUSH
83208: LD_VAR 0 2
83212: ARRAY
83213: IFFALSE 83249
// begin MC_Reset ( i , 125 ) ;
83215: LD_VAR 0 2
83219: PPUSH
83220: LD_INT 125
83222: PPUSH
83223: CALL 66656 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
83227: LD_ADDR_EXP 74
83231: PUSH
83232: LD_EXP 74
83236: PPUSH
83237: LD_VAR 0 2
83241: PPUSH
83242: EMPTY
83243: PPUSH
83244: CALL_OW 1
83248: ST_TO_ADDR
// end ; continue ;
83249: GO 83103
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
83251: LD_EXP 73
83255: PUSH
83256: LD_VAR 0 2
83260: ARRAY
83261: PUSH
83262: LD_INT 1
83264: ARRAY
83265: PUSH
83266: LD_INT 3
83268: ARRAY
83269: PUSH
83270: LD_INT 1
83272: EQUAL
83273: PUSH
83274: LD_INT 20
83276: PPUSH
83277: LD_EXP 62
83281: PUSH
83282: LD_VAR 0 2
83286: ARRAY
83287: PPUSH
83288: CALL_OW 321
83292: PUSH
83293: LD_INT 2
83295: NONEQUAL
83296: AND
83297: IFFALSE 83347
// begin if mc_deposits_finder [ i ] then
83299: LD_EXP 74
83303: PUSH
83304: LD_VAR 0 2
83308: ARRAY
83309: IFFALSE 83345
// begin MC_Reset ( i , 125 ) ;
83311: LD_VAR 0 2
83315: PPUSH
83316: LD_INT 125
83318: PPUSH
83319: CALL 66656 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
83323: LD_ADDR_EXP 74
83327: PUSH
83328: LD_EXP 74
83332: PPUSH
83333: LD_VAR 0 2
83337: PPUSH
83338: EMPTY
83339: PPUSH
83340: CALL_OW 1
83344: ST_TO_ADDR
// end ; continue ;
83345: GO 83103
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
83347: LD_EXP 73
83351: PUSH
83352: LD_VAR 0 2
83356: ARRAY
83357: PUSH
83358: LD_INT 1
83360: ARRAY
83361: PUSH
83362: LD_INT 1
83364: ARRAY
83365: PPUSH
83366: LD_EXP 73
83370: PUSH
83371: LD_VAR 0 2
83375: ARRAY
83376: PUSH
83377: LD_INT 1
83379: ARRAY
83380: PUSH
83381: LD_INT 2
83383: ARRAY
83384: PPUSH
83385: LD_EXP 62
83389: PUSH
83390: LD_VAR 0 2
83394: ARRAY
83395: PPUSH
83396: CALL_OW 440
83400: IFFALSE 83443
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
83402: LD_ADDR_EXP 73
83406: PUSH
83407: LD_EXP 73
83411: PPUSH
83412: LD_VAR 0 2
83416: PPUSH
83417: LD_EXP 73
83421: PUSH
83422: LD_VAR 0 2
83426: ARRAY
83427: PPUSH
83428: LD_INT 1
83430: PPUSH
83431: CALL_OW 3
83435: PPUSH
83436: CALL_OW 1
83440: ST_TO_ADDR
83441: GO 83690
// begin if not mc_deposits_finder [ i ] then
83443: LD_EXP 74
83447: PUSH
83448: LD_VAR 0 2
83452: ARRAY
83453: NOT
83454: IFFALSE 83506
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
83456: LD_ADDR_EXP 74
83460: PUSH
83461: LD_EXP 74
83465: PPUSH
83466: LD_VAR 0 2
83470: PPUSH
83471: LD_VAR 0 3
83475: PUSH
83476: LD_INT 1
83478: ARRAY
83479: PUSH
83480: EMPTY
83481: LIST
83482: PPUSH
83483: CALL_OW 1
83487: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
83488: LD_VAR 0 3
83492: PUSH
83493: LD_INT 1
83495: ARRAY
83496: PPUSH
83497: LD_INT 125
83499: PPUSH
83500: CALL_OW 109
// end else
83504: GO 83690
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
83506: LD_EXP 74
83510: PUSH
83511: LD_VAR 0 2
83515: ARRAY
83516: PUSH
83517: LD_INT 1
83519: ARRAY
83520: PPUSH
83521: CALL_OW 310
83525: IFFALSE 83548
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
83527: LD_EXP 74
83531: PUSH
83532: LD_VAR 0 2
83536: ARRAY
83537: PUSH
83538: LD_INT 1
83540: ARRAY
83541: PPUSH
83542: CALL_OW 122
83546: GO 83690
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
83548: LD_EXP 74
83552: PUSH
83553: LD_VAR 0 2
83557: ARRAY
83558: PUSH
83559: LD_INT 1
83561: ARRAY
83562: PPUSH
83563: CALL_OW 314
83567: NOT
83568: PUSH
83569: LD_EXP 74
83573: PUSH
83574: LD_VAR 0 2
83578: ARRAY
83579: PUSH
83580: LD_INT 1
83582: ARRAY
83583: PPUSH
83584: LD_EXP 73
83588: PUSH
83589: LD_VAR 0 2
83593: ARRAY
83594: PUSH
83595: LD_INT 1
83597: ARRAY
83598: PUSH
83599: LD_INT 1
83601: ARRAY
83602: PPUSH
83603: LD_EXP 73
83607: PUSH
83608: LD_VAR 0 2
83612: ARRAY
83613: PUSH
83614: LD_INT 1
83616: ARRAY
83617: PUSH
83618: LD_INT 2
83620: ARRAY
83621: PPUSH
83622: CALL_OW 297
83626: PUSH
83627: LD_INT 6
83629: GREATER
83630: AND
83631: IFFALSE 83690
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
83633: LD_EXP 74
83637: PUSH
83638: LD_VAR 0 2
83642: ARRAY
83643: PUSH
83644: LD_INT 1
83646: ARRAY
83647: PPUSH
83648: LD_EXP 73
83652: PUSH
83653: LD_VAR 0 2
83657: ARRAY
83658: PUSH
83659: LD_INT 1
83661: ARRAY
83662: PUSH
83663: LD_INT 1
83665: ARRAY
83666: PPUSH
83667: LD_EXP 73
83671: PUSH
83672: LD_VAR 0 2
83676: ARRAY
83677: PUSH
83678: LD_INT 1
83680: ARRAY
83681: PUSH
83682: LD_INT 2
83684: ARRAY
83685: PPUSH
83686: CALL_OW 111
// end ; end ; end ;
83690: GO 83103
83692: POP
83693: POP
// end ;
83694: LD_VAR 0 1
83698: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
83699: LD_INT 0
83701: PPUSH
83702: PPUSH
83703: PPUSH
83704: PPUSH
83705: PPUSH
83706: PPUSH
83707: PPUSH
83708: PPUSH
83709: PPUSH
83710: PPUSH
83711: PPUSH
// if not mc_bases then
83712: LD_EXP 36
83716: NOT
83717: IFFALSE 83721
// exit ;
83719: GO 84661
// for i = 1 to mc_bases do
83721: LD_ADDR_VAR 0 2
83725: PUSH
83726: DOUBLE
83727: LD_INT 1
83729: DEC
83730: ST_TO_ADDR
83731: LD_EXP 36
83735: PUSH
83736: FOR_TO
83737: IFFALSE 84659
// begin if not mc_bases [ i ] or mc_scan [ i ] then
83739: LD_EXP 36
83743: PUSH
83744: LD_VAR 0 2
83748: ARRAY
83749: NOT
83750: PUSH
83751: LD_EXP 59
83755: PUSH
83756: LD_VAR 0 2
83760: ARRAY
83761: OR
83762: IFFALSE 83766
// continue ;
83764: GO 83736
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
83766: LD_ADDR_VAR 0 7
83770: PUSH
83771: LD_EXP 36
83775: PUSH
83776: LD_VAR 0 2
83780: ARRAY
83781: PUSH
83782: LD_INT 1
83784: ARRAY
83785: PPUSH
83786: CALL_OW 248
83790: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
83791: LD_VAR 0 7
83795: PUSH
83796: LD_INT 3
83798: EQUAL
83799: PUSH
83800: LD_EXP 55
83804: PUSH
83805: LD_VAR 0 2
83809: ARRAY
83810: PUSH
83811: LD_EXP 58
83815: PUSH
83816: LD_VAR 0 2
83820: ARRAY
83821: UNION
83822: PPUSH
83823: LD_INT 33
83825: PUSH
83826: LD_INT 2
83828: PUSH
83829: EMPTY
83830: LIST
83831: LIST
83832: PPUSH
83833: CALL_OW 72
83837: NOT
83838: OR
83839: IFFALSE 83843
// continue ;
83841: GO 83736
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
83843: LD_ADDR_VAR 0 9
83847: PUSH
83848: LD_EXP 36
83852: PUSH
83853: LD_VAR 0 2
83857: ARRAY
83858: PPUSH
83859: LD_INT 30
83861: PUSH
83862: LD_INT 36
83864: PUSH
83865: EMPTY
83866: LIST
83867: LIST
83868: PPUSH
83869: CALL_OW 72
83873: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
83874: LD_ADDR_VAR 0 10
83878: PUSH
83879: LD_EXP 55
83883: PUSH
83884: LD_VAR 0 2
83888: ARRAY
83889: PPUSH
83890: LD_INT 34
83892: PUSH
83893: LD_INT 31
83895: PUSH
83896: EMPTY
83897: LIST
83898: LIST
83899: PPUSH
83900: CALL_OW 72
83904: ST_TO_ADDR
// if not cts and not mcts then
83905: LD_VAR 0 9
83909: NOT
83910: PUSH
83911: LD_VAR 0 10
83915: NOT
83916: AND
83917: IFFALSE 83921
// continue ;
83919: GO 83736
// x := cts ;
83921: LD_ADDR_VAR 0 11
83925: PUSH
83926: LD_VAR 0 9
83930: ST_TO_ADDR
// if not x then
83931: LD_VAR 0 11
83935: NOT
83936: IFFALSE 83948
// x := mcts ;
83938: LD_ADDR_VAR 0 11
83942: PUSH
83943: LD_VAR 0 10
83947: ST_TO_ADDR
// if not x then
83948: LD_VAR 0 11
83952: NOT
83953: IFFALSE 83957
// continue ;
83955: GO 83736
// if mc_remote_driver [ i ] then
83957: LD_EXP 76
83961: PUSH
83962: LD_VAR 0 2
83966: ARRAY
83967: IFFALSE 84354
// for j in mc_remote_driver [ i ] do
83969: LD_ADDR_VAR 0 3
83973: PUSH
83974: LD_EXP 76
83978: PUSH
83979: LD_VAR 0 2
83983: ARRAY
83984: PUSH
83985: FOR_IN
83986: IFFALSE 84352
// begin if GetClass ( j ) <> 3 then
83988: LD_VAR 0 3
83992: PPUSH
83993: CALL_OW 257
83997: PUSH
83998: LD_INT 3
84000: NONEQUAL
84001: IFFALSE 84054
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
84003: LD_ADDR_EXP 76
84007: PUSH
84008: LD_EXP 76
84012: PPUSH
84013: LD_VAR 0 2
84017: PPUSH
84018: LD_EXP 76
84022: PUSH
84023: LD_VAR 0 2
84027: ARRAY
84028: PUSH
84029: LD_VAR 0 3
84033: DIFF
84034: PPUSH
84035: CALL_OW 1
84039: ST_TO_ADDR
// SetTag ( j , 0 ) ;
84040: LD_VAR 0 3
84044: PPUSH
84045: LD_INT 0
84047: PPUSH
84048: CALL_OW 109
// continue ;
84052: GO 83985
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
84054: LD_EXP 55
84058: PUSH
84059: LD_VAR 0 2
84063: ARRAY
84064: PPUSH
84065: LD_INT 34
84067: PUSH
84068: LD_INT 31
84070: PUSH
84071: EMPTY
84072: LIST
84073: LIST
84074: PUSH
84075: LD_INT 58
84077: PUSH
84078: EMPTY
84079: LIST
84080: PUSH
84081: EMPTY
84082: LIST
84083: LIST
84084: PPUSH
84085: CALL_OW 72
84089: PUSH
84090: LD_VAR 0 3
84094: PPUSH
84095: CALL 59957 0 1
84099: NOT
84100: AND
84101: IFFALSE 84172
// begin if IsInUnit ( j ) then
84103: LD_VAR 0 3
84107: PPUSH
84108: CALL_OW 310
84112: IFFALSE 84123
// ComExitBuilding ( j ) ;
84114: LD_VAR 0 3
84118: PPUSH
84119: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
84123: LD_VAR 0 3
84127: PPUSH
84128: LD_EXP 55
84132: PUSH
84133: LD_VAR 0 2
84137: ARRAY
84138: PPUSH
84139: LD_INT 34
84141: PUSH
84142: LD_INT 31
84144: PUSH
84145: EMPTY
84146: LIST
84147: LIST
84148: PUSH
84149: LD_INT 58
84151: PUSH
84152: EMPTY
84153: LIST
84154: PUSH
84155: EMPTY
84156: LIST
84157: LIST
84158: PPUSH
84159: CALL_OW 72
84163: PUSH
84164: LD_INT 1
84166: ARRAY
84167: PPUSH
84168: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
84172: LD_VAR 0 3
84176: PPUSH
84177: CALL_OW 310
84181: NOT
84182: PUSH
84183: LD_VAR 0 3
84187: PPUSH
84188: CALL_OW 310
84192: PPUSH
84193: CALL_OW 266
84197: PUSH
84198: LD_INT 36
84200: NONEQUAL
84201: PUSH
84202: LD_VAR 0 3
84206: PPUSH
84207: CALL 59957 0 1
84211: NOT
84212: AND
84213: OR
84214: IFFALSE 84350
// begin if IsInUnit ( j ) then
84216: LD_VAR 0 3
84220: PPUSH
84221: CALL_OW 310
84225: IFFALSE 84236
// ComExitBuilding ( j ) ;
84227: LD_VAR 0 3
84231: PPUSH
84232: CALL_OW 122
// ct := 0 ;
84236: LD_ADDR_VAR 0 8
84240: PUSH
84241: LD_INT 0
84243: ST_TO_ADDR
// for k in x do
84244: LD_ADDR_VAR 0 4
84248: PUSH
84249: LD_VAR 0 11
84253: PUSH
84254: FOR_IN
84255: IFFALSE 84328
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
84257: LD_VAR 0 4
84261: PPUSH
84262: CALL_OW 264
84266: PUSH
84267: LD_INT 31
84269: EQUAL
84270: PUSH
84271: LD_VAR 0 4
84275: PPUSH
84276: CALL_OW 311
84280: NOT
84281: AND
84282: PUSH
84283: LD_VAR 0 4
84287: PPUSH
84288: CALL_OW 266
84292: PUSH
84293: LD_INT 36
84295: EQUAL
84296: PUSH
84297: LD_VAR 0 4
84301: PPUSH
84302: CALL_OW 313
84306: PUSH
84307: LD_INT 3
84309: LESS
84310: AND
84311: OR
84312: IFFALSE 84326
// begin ct := k ;
84314: LD_ADDR_VAR 0 8
84318: PUSH
84319: LD_VAR 0 4
84323: ST_TO_ADDR
// break ;
84324: GO 84328
// end ;
84326: GO 84254
84328: POP
84329: POP
// if ct then
84330: LD_VAR 0 8
84334: IFFALSE 84350
// ComEnterUnit ( j , ct ) ;
84336: LD_VAR 0 3
84340: PPUSH
84341: LD_VAR 0 8
84345: PPUSH
84346: CALL_OW 120
// end ; end ;
84350: GO 83985
84352: POP
84353: POP
// places := 0 ;
84354: LD_ADDR_VAR 0 5
84358: PUSH
84359: LD_INT 0
84361: ST_TO_ADDR
// for j = 1 to x do
84362: LD_ADDR_VAR 0 3
84366: PUSH
84367: DOUBLE
84368: LD_INT 1
84370: DEC
84371: ST_TO_ADDR
84372: LD_VAR 0 11
84376: PUSH
84377: FOR_TO
84378: IFFALSE 84454
// if GetWeapon ( x [ j ] ) = ar_control_tower then
84380: LD_VAR 0 11
84384: PUSH
84385: LD_VAR 0 3
84389: ARRAY
84390: PPUSH
84391: CALL_OW 264
84395: PUSH
84396: LD_INT 31
84398: EQUAL
84399: IFFALSE 84417
// places := places + 1 else
84401: LD_ADDR_VAR 0 5
84405: PUSH
84406: LD_VAR 0 5
84410: PUSH
84411: LD_INT 1
84413: PLUS
84414: ST_TO_ADDR
84415: GO 84452
// if GetBType ( x [ j ] ) = b_control_tower then
84417: LD_VAR 0 11
84421: PUSH
84422: LD_VAR 0 3
84426: ARRAY
84427: PPUSH
84428: CALL_OW 266
84432: PUSH
84433: LD_INT 36
84435: EQUAL
84436: IFFALSE 84452
// places := places + 3 ;
84438: LD_ADDR_VAR 0 5
84442: PUSH
84443: LD_VAR 0 5
84447: PUSH
84448: LD_INT 3
84450: PLUS
84451: ST_TO_ADDR
84452: GO 84377
84454: POP
84455: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
84456: LD_VAR 0 5
84460: PUSH
84461: LD_INT 0
84463: EQUAL
84464: PUSH
84465: LD_VAR 0 5
84469: PUSH
84470: LD_EXP 76
84474: PUSH
84475: LD_VAR 0 2
84479: ARRAY
84480: LESSEQUAL
84481: OR
84482: IFFALSE 84486
// continue ;
84484: GO 83736
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
84486: LD_ADDR_VAR 0 6
84490: PUSH
84491: LD_EXP 36
84495: PUSH
84496: LD_VAR 0 2
84500: ARRAY
84501: PPUSH
84502: LD_INT 25
84504: PUSH
84505: LD_INT 3
84507: PUSH
84508: EMPTY
84509: LIST
84510: LIST
84511: PPUSH
84512: CALL_OW 72
84516: PUSH
84517: LD_EXP 76
84521: PUSH
84522: LD_VAR 0 2
84526: ARRAY
84527: DIFF
84528: PPUSH
84529: LD_INT 3
84531: PPUSH
84532: CALL 60857 0 2
84536: ST_TO_ADDR
// for j in tmp do
84537: LD_ADDR_VAR 0 3
84541: PUSH
84542: LD_VAR 0 6
84546: PUSH
84547: FOR_IN
84548: IFFALSE 84583
// if GetTag ( j ) > 0 then
84550: LD_VAR 0 3
84554: PPUSH
84555: CALL_OW 110
84559: PUSH
84560: LD_INT 0
84562: GREATER
84563: IFFALSE 84581
// tmp := tmp diff j ;
84565: LD_ADDR_VAR 0 6
84569: PUSH
84570: LD_VAR 0 6
84574: PUSH
84575: LD_VAR 0 3
84579: DIFF
84580: ST_TO_ADDR
84581: GO 84547
84583: POP
84584: POP
// if not tmp then
84585: LD_VAR 0 6
84589: NOT
84590: IFFALSE 84594
// continue ;
84592: GO 83736
// if places then
84594: LD_VAR 0 5
84598: IFFALSE 84657
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
84600: LD_ADDR_EXP 76
84604: PUSH
84605: LD_EXP 76
84609: PPUSH
84610: LD_VAR 0 2
84614: PPUSH
84615: LD_EXP 76
84619: PUSH
84620: LD_VAR 0 2
84624: ARRAY
84625: PUSH
84626: LD_VAR 0 6
84630: PUSH
84631: LD_INT 1
84633: ARRAY
84634: UNION
84635: PPUSH
84636: CALL_OW 1
84640: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
84641: LD_VAR 0 6
84645: PUSH
84646: LD_INT 1
84648: ARRAY
84649: PPUSH
84650: LD_INT 126
84652: PPUSH
84653: CALL_OW 109
// end ; end ;
84657: GO 83736
84659: POP
84660: POP
// end ;
84661: LD_VAR 0 1
84665: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
84666: LD_INT 0
84668: PPUSH
84669: PPUSH
84670: PPUSH
84671: PPUSH
84672: PPUSH
84673: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
84674: LD_VAR 0 1
84678: NOT
84679: PUSH
84680: LD_VAR 0 2
84684: NOT
84685: OR
84686: PUSH
84687: LD_VAR 0 3
84691: NOT
84692: OR
84693: PUSH
84694: LD_VAR 0 4
84698: PUSH
84699: LD_INT 1
84701: PUSH
84702: LD_INT 2
84704: PUSH
84705: LD_INT 3
84707: PUSH
84708: LD_INT 4
84710: PUSH
84711: LD_INT 5
84713: PUSH
84714: LD_INT 8
84716: PUSH
84717: LD_INT 9
84719: PUSH
84720: LD_INT 15
84722: PUSH
84723: LD_INT 16
84725: PUSH
84726: EMPTY
84727: LIST
84728: LIST
84729: LIST
84730: LIST
84731: LIST
84732: LIST
84733: LIST
84734: LIST
84735: LIST
84736: IN
84737: NOT
84738: OR
84739: IFFALSE 84743
// exit ;
84741: GO 85643
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
84743: LD_ADDR_VAR 0 2
84747: PUSH
84748: LD_VAR 0 2
84752: PPUSH
84753: LD_INT 21
84755: PUSH
84756: LD_INT 3
84758: PUSH
84759: EMPTY
84760: LIST
84761: LIST
84762: PUSH
84763: LD_INT 24
84765: PUSH
84766: LD_INT 250
84768: PUSH
84769: EMPTY
84770: LIST
84771: LIST
84772: PUSH
84773: EMPTY
84774: LIST
84775: LIST
84776: PPUSH
84777: CALL_OW 72
84781: ST_TO_ADDR
// case class of 1 , 15 :
84782: LD_VAR 0 4
84786: PUSH
84787: LD_INT 1
84789: DOUBLE
84790: EQUAL
84791: IFTRUE 84801
84793: LD_INT 15
84795: DOUBLE
84796: EQUAL
84797: IFTRUE 84801
84799: GO 84886
84801: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
84802: LD_ADDR_VAR 0 8
84806: PUSH
84807: LD_VAR 0 2
84811: PPUSH
84812: LD_INT 2
84814: PUSH
84815: LD_INT 30
84817: PUSH
84818: LD_INT 32
84820: PUSH
84821: EMPTY
84822: LIST
84823: LIST
84824: PUSH
84825: LD_INT 30
84827: PUSH
84828: LD_INT 31
84830: PUSH
84831: EMPTY
84832: LIST
84833: LIST
84834: PUSH
84835: EMPTY
84836: LIST
84837: LIST
84838: LIST
84839: PPUSH
84840: CALL_OW 72
84844: PUSH
84845: LD_VAR 0 2
84849: PPUSH
84850: LD_INT 2
84852: PUSH
84853: LD_INT 30
84855: PUSH
84856: LD_INT 4
84858: PUSH
84859: EMPTY
84860: LIST
84861: LIST
84862: PUSH
84863: LD_INT 30
84865: PUSH
84866: LD_INT 5
84868: PUSH
84869: EMPTY
84870: LIST
84871: LIST
84872: PUSH
84873: EMPTY
84874: LIST
84875: LIST
84876: LIST
84877: PPUSH
84878: CALL_OW 72
84882: ADD
84883: ST_TO_ADDR
84884: GO 85132
84886: LD_INT 2
84888: DOUBLE
84889: EQUAL
84890: IFTRUE 84900
84892: LD_INT 16
84894: DOUBLE
84895: EQUAL
84896: IFTRUE 84900
84898: GO 84946
84900: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
84901: LD_ADDR_VAR 0 8
84905: PUSH
84906: LD_VAR 0 2
84910: PPUSH
84911: LD_INT 2
84913: PUSH
84914: LD_INT 30
84916: PUSH
84917: LD_INT 0
84919: PUSH
84920: EMPTY
84921: LIST
84922: LIST
84923: PUSH
84924: LD_INT 30
84926: PUSH
84927: LD_INT 1
84929: PUSH
84930: EMPTY
84931: LIST
84932: LIST
84933: PUSH
84934: EMPTY
84935: LIST
84936: LIST
84937: LIST
84938: PPUSH
84939: CALL_OW 72
84943: ST_TO_ADDR
84944: GO 85132
84946: LD_INT 3
84948: DOUBLE
84949: EQUAL
84950: IFTRUE 84954
84952: GO 85000
84954: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
84955: LD_ADDR_VAR 0 8
84959: PUSH
84960: LD_VAR 0 2
84964: PPUSH
84965: LD_INT 2
84967: PUSH
84968: LD_INT 30
84970: PUSH
84971: LD_INT 2
84973: PUSH
84974: EMPTY
84975: LIST
84976: LIST
84977: PUSH
84978: LD_INT 30
84980: PUSH
84981: LD_INT 3
84983: PUSH
84984: EMPTY
84985: LIST
84986: LIST
84987: PUSH
84988: EMPTY
84989: LIST
84990: LIST
84991: LIST
84992: PPUSH
84993: CALL_OW 72
84997: ST_TO_ADDR
84998: GO 85132
85000: LD_INT 4
85002: DOUBLE
85003: EQUAL
85004: IFTRUE 85008
85006: GO 85065
85008: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
85009: LD_ADDR_VAR 0 8
85013: PUSH
85014: LD_VAR 0 2
85018: PPUSH
85019: LD_INT 2
85021: PUSH
85022: LD_INT 30
85024: PUSH
85025: LD_INT 6
85027: PUSH
85028: EMPTY
85029: LIST
85030: LIST
85031: PUSH
85032: LD_INT 30
85034: PUSH
85035: LD_INT 7
85037: PUSH
85038: EMPTY
85039: LIST
85040: LIST
85041: PUSH
85042: LD_INT 30
85044: PUSH
85045: LD_INT 8
85047: PUSH
85048: EMPTY
85049: LIST
85050: LIST
85051: PUSH
85052: EMPTY
85053: LIST
85054: LIST
85055: LIST
85056: LIST
85057: PPUSH
85058: CALL_OW 72
85062: ST_TO_ADDR
85063: GO 85132
85065: LD_INT 5
85067: DOUBLE
85068: EQUAL
85069: IFTRUE 85085
85071: LD_INT 8
85073: DOUBLE
85074: EQUAL
85075: IFTRUE 85085
85077: LD_INT 9
85079: DOUBLE
85080: EQUAL
85081: IFTRUE 85085
85083: GO 85131
85085: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
85086: LD_ADDR_VAR 0 8
85090: PUSH
85091: LD_VAR 0 2
85095: PPUSH
85096: LD_INT 2
85098: PUSH
85099: LD_INT 30
85101: PUSH
85102: LD_INT 4
85104: PUSH
85105: EMPTY
85106: LIST
85107: LIST
85108: PUSH
85109: LD_INT 30
85111: PUSH
85112: LD_INT 5
85114: PUSH
85115: EMPTY
85116: LIST
85117: LIST
85118: PUSH
85119: EMPTY
85120: LIST
85121: LIST
85122: LIST
85123: PPUSH
85124: CALL_OW 72
85128: ST_TO_ADDR
85129: GO 85132
85131: POP
// if not tmp then
85132: LD_VAR 0 8
85136: NOT
85137: IFFALSE 85141
// exit ;
85139: GO 85643
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
85141: LD_VAR 0 4
85145: PUSH
85146: LD_INT 1
85148: PUSH
85149: LD_INT 15
85151: PUSH
85152: EMPTY
85153: LIST
85154: LIST
85155: IN
85156: PUSH
85157: LD_EXP 45
85161: PUSH
85162: LD_VAR 0 1
85166: ARRAY
85167: AND
85168: IFFALSE 85324
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
85170: LD_ADDR_VAR 0 9
85174: PUSH
85175: LD_EXP 45
85179: PUSH
85180: LD_VAR 0 1
85184: ARRAY
85185: PUSH
85186: LD_INT 1
85188: ARRAY
85189: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
85190: LD_VAR 0 9
85194: PUSH
85195: LD_EXP 46
85199: PUSH
85200: LD_VAR 0 1
85204: ARRAY
85205: IN
85206: NOT
85207: IFFALSE 85322
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
85209: LD_ADDR_EXP 46
85213: PUSH
85214: LD_EXP 46
85218: PPUSH
85219: LD_VAR 0 1
85223: PUSH
85224: LD_EXP 46
85228: PUSH
85229: LD_VAR 0 1
85233: ARRAY
85234: PUSH
85235: LD_INT 1
85237: PLUS
85238: PUSH
85239: EMPTY
85240: LIST
85241: LIST
85242: PPUSH
85243: LD_VAR 0 9
85247: PPUSH
85248: CALL 26583 0 3
85252: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
85253: LD_ADDR_EXP 45
85257: PUSH
85258: LD_EXP 45
85262: PPUSH
85263: LD_VAR 0 1
85267: PPUSH
85268: LD_EXP 45
85272: PUSH
85273: LD_VAR 0 1
85277: ARRAY
85278: PUSH
85279: LD_VAR 0 9
85283: DIFF
85284: PPUSH
85285: CALL_OW 1
85289: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
85290: LD_VAR 0 3
85294: PPUSH
85295: LD_EXP 46
85299: PUSH
85300: LD_VAR 0 1
85304: ARRAY
85305: PUSH
85306: LD_EXP 46
85310: PUSH
85311: LD_VAR 0 1
85315: ARRAY
85316: ARRAY
85317: PPUSH
85318: CALL_OW 120
// end ; exit ;
85322: GO 85643
// end ; if tmp > 1 then
85324: LD_VAR 0 8
85328: PUSH
85329: LD_INT 1
85331: GREATER
85332: IFFALSE 85436
// for i = 2 to tmp do
85334: LD_ADDR_VAR 0 6
85338: PUSH
85339: DOUBLE
85340: LD_INT 2
85342: DEC
85343: ST_TO_ADDR
85344: LD_VAR 0 8
85348: PUSH
85349: FOR_TO
85350: IFFALSE 85434
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
85352: LD_VAR 0 8
85356: PUSH
85357: LD_VAR 0 6
85361: ARRAY
85362: PPUSH
85363: CALL_OW 461
85367: PUSH
85368: LD_INT 6
85370: EQUAL
85371: IFFALSE 85432
// begin x := tmp [ i ] ;
85373: LD_ADDR_VAR 0 9
85377: PUSH
85378: LD_VAR 0 8
85382: PUSH
85383: LD_VAR 0 6
85387: ARRAY
85388: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
85389: LD_ADDR_VAR 0 8
85393: PUSH
85394: LD_VAR 0 8
85398: PPUSH
85399: LD_VAR 0 6
85403: PPUSH
85404: CALL_OW 3
85408: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
85409: LD_ADDR_VAR 0 8
85413: PUSH
85414: LD_VAR 0 8
85418: PPUSH
85419: LD_INT 1
85421: PPUSH
85422: LD_VAR 0 9
85426: PPUSH
85427: CALL_OW 2
85431: ST_TO_ADDR
// end ;
85432: GO 85349
85434: POP
85435: POP
// for i in tmp do
85436: LD_ADDR_VAR 0 6
85440: PUSH
85441: LD_VAR 0 8
85445: PUSH
85446: FOR_IN
85447: IFFALSE 85516
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
85449: LD_VAR 0 6
85453: PPUSH
85454: CALL_OW 313
85458: PUSH
85459: LD_INT 6
85461: LESS
85462: PUSH
85463: LD_VAR 0 6
85467: PPUSH
85468: CALL_OW 266
85472: PUSH
85473: LD_INT 31
85475: PUSH
85476: LD_INT 32
85478: PUSH
85479: EMPTY
85480: LIST
85481: LIST
85482: IN
85483: NOT
85484: AND
85485: PUSH
85486: LD_VAR 0 6
85490: PPUSH
85491: CALL_OW 313
85495: PUSH
85496: LD_INT 0
85498: EQUAL
85499: OR
85500: IFFALSE 85514
// begin j := i ;
85502: LD_ADDR_VAR 0 7
85506: PUSH
85507: LD_VAR 0 6
85511: ST_TO_ADDR
// break ;
85512: GO 85516
// end ; end ;
85514: GO 85446
85516: POP
85517: POP
// if j then
85518: LD_VAR 0 7
85522: IFFALSE 85540
// ComEnterUnit ( unit , j ) else
85524: LD_VAR 0 3
85528: PPUSH
85529: LD_VAR 0 7
85533: PPUSH
85534: CALL_OW 120
85538: GO 85643
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
85540: LD_ADDR_VAR 0 10
85544: PUSH
85545: LD_VAR 0 2
85549: PPUSH
85550: LD_INT 2
85552: PUSH
85553: LD_INT 30
85555: PUSH
85556: LD_INT 0
85558: PUSH
85559: EMPTY
85560: LIST
85561: LIST
85562: PUSH
85563: LD_INT 30
85565: PUSH
85566: LD_INT 1
85568: PUSH
85569: EMPTY
85570: LIST
85571: LIST
85572: PUSH
85573: EMPTY
85574: LIST
85575: LIST
85576: LIST
85577: PPUSH
85578: CALL_OW 72
85582: ST_TO_ADDR
// if depot then
85583: LD_VAR 0 10
85587: IFFALSE 85643
// begin depot := NearestUnitToUnit ( depot , unit ) ;
85589: LD_ADDR_VAR 0 10
85593: PUSH
85594: LD_VAR 0 10
85598: PPUSH
85599: LD_VAR 0 3
85603: PPUSH
85604: CALL_OW 74
85608: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
85609: LD_VAR 0 3
85613: PPUSH
85614: LD_VAR 0 10
85618: PPUSH
85619: CALL_OW 296
85623: PUSH
85624: LD_INT 10
85626: GREATER
85627: IFFALSE 85643
// ComStandNearbyBuilding ( unit , depot ) ;
85629: LD_VAR 0 3
85633: PPUSH
85634: LD_VAR 0 10
85638: PPUSH
85639: CALL 20786 0 2
// end ; end ; end ;
85643: LD_VAR 0 5
85647: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
85648: LD_INT 0
85650: PPUSH
85651: PPUSH
85652: PPUSH
85653: PPUSH
// if not mc_bases then
85654: LD_EXP 36
85658: NOT
85659: IFFALSE 85663
// exit ;
85661: GO 85902
// for i = 1 to mc_bases do
85663: LD_ADDR_VAR 0 2
85667: PUSH
85668: DOUBLE
85669: LD_INT 1
85671: DEC
85672: ST_TO_ADDR
85673: LD_EXP 36
85677: PUSH
85678: FOR_TO
85679: IFFALSE 85900
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
85681: LD_ADDR_VAR 0 4
85685: PUSH
85686: LD_EXP 36
85690: PUSH
85691: LD_VAR 0 2
85695: ARRAY
85696: PPUSH
85697: LD_INT 21
85699: PUSH
85700: LD_INT 1
85702: PUSH
85703: EMPTY
85704: LIST
85705: LIST
85706: PPUSH
85707: CALL_OW 72
85711: PUSH
85712: LD_EXP 65
85716: PUSH
85717: LD_VAR 0 2
85721: ARRAY
85722: UNION
85723: ST_TO_ADDR
// if not tmp then
85724: LD_VAR 0 4
85728: NOT
85729: IFFALSE 85733
// continue ;
85731: GO 85678
// for j in tmp do
85733: LD_ADDR_VAR 0 3
85737: PUSH
85738: LD_VAR 0 4
85742: PUSH
85743: FOR_IN
85744: IFFALSE 85896
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
85746: LD_VAR 0 3
85750: PPUSH
85751: CALL_OW 110
85755: NOT
85756: PUSH
85757: LD_VAR 0 3
85761: PPUSH
85762: CALL_OW 314
85766: NOT
85767: AND
85768: PUSH
85769: LD_VAR 0 3
85773: PPUSH
85774: CALL_OW 311
85778: NOT
85779: AND
85780: PUSH
85781: LD_VAR 0 3
85785: PPUSH
85786: CALL_OW 310
85790: NOT
85791: AND
85792: PUSH
85793: LD_VAR 0 3
85797: PUSH
85798: LD_EXP 39
85802: PUSH
85803: LD_VAR 0 2
85807: ARRAY
85808: PUSH
85809: LD_INT 1
85811: ARRAY
85812: IN
85813: NOT
85814: AND
85815: PUSH
85816: LD_VAR 0 3
85820: PUSH
85821: LD_EXP 39
85825: PUSH
85826: LD_VAR 0 2
85830: ARRAY
85831: PUSH
85832: LD_INT 2
85834: ARRAY
85835: IN
85836: NOT
85837: AND
85838: PUSH
85839: LD_VAR 0 3
85843: PUSH
85844: LD_EXP 48
85848: PUSH
85849: LD_VAR 0 2
85853: ARRAY
85854: IN
85855: NOT
85856: AND
85857: IFFALSE 85894
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
85859: LD_VAR 0 2
85863: PPUSH
85864: LD_EXP 36
85868: PUSH
85869: LD_VAR 0 2
85873: ARRAY
85874: PPUSH
85875: LD_VAR 0 3
85879: PPUSH
85880: LD_VAR 0 3
85884: PPUSH
85885: CALL_OW 257
85889: PPUSH
85890: CALL 84666 0 4
// end ;
85894: GO 85743
85896: POP
85897: POP
// end ;
85898: GO 85678
85900: POP
85901: POP
// end ;
85902: LD_VAR 0 1
85906: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
85907: LD_INT 0
85909: PPUSH
85910: PPUSH
85911: PPUSH
85912: PPUSH
85913: PPUSH
85914: PPUSH
// if not mc_bases [ base ] then
85915: LD_EXP 36
85919: PUSH
85920: LD_VAR 0 1
85924: ARRAY
85925: NOT
85926: IFFALSE 85930
// exit ;
85928: GO 86112
// tmp := [ ] ;
85930: LD_ADDR_VAR 0 6
85934: PUSH
85935: EMPTY
85936: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
85937: LD_ADDR_VAR 0 7
85941: PUSH
85942: LD_VAR 0 3
85946: PPUSH
85947: LD_INT 0
85949: PPUSH
85950: CALL_OW 517
85954: ST_TO_ADDR
// if not list then
85955: LD_VAR 0 7
85959: NOT
85960: IFFALSE 85964
// exit ;
85962: GO 86112
// for i = 1 to amount do
85964: LD_ADDR_VAR 0 5
85968: PUSH
85969: DOUBLE
85970: LD_INT 1
85972: DEC
85973: ST_TO_ADDR
85974: LD_VAR 0 2
85978: PUSH
85979: FOR_TO
85980: IFFALSE 86060
// begin x := rand ( 1 , list [ 1 ] ) ;
85982: LD_ADDR_VAR 0 8
85986: PUSH
85987: LD_INT 1
85989: PPUSH
85990: LD_VAR 0 7
85994: PUSH
85995: LD_INT 1
85997: ARRAY
85998: PPUSH
85999: CALL_OW 12
86003: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
86004: LD_ADDR_VAR 0 6
86008: PUSH
86009: LD_VAR 0 6
86013: PPUSH
86014: LD_VAR 0 5
86018: PPUSH
86019: LD_VAR 0 7
86023: PUSH
86024: LD_INT 1
86026: ARRAY
86027: PUSH
86028: LD_VAR 0 8
86032: ARRAY
86033: PUSH
86034: LD_VAR 0 7
86038: PUSH
86039: LD_INT 2
86041: ARRAY
86042: PUSH
86043: LD_VAR 0 8
86047: ARRAY
86048: PUSH
86049: EMPTY
86050: LIST
86051: LIST
86052: PPUSH
86053: CALL_OW 1
86057: ST_TO_ADDR
// end ;
86058: GO 85979
86060: POP
86061: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
86062: LD_ADDR_EXP 49
86066: PUSH
86067: LD_EXP 49
86071: PPUSH
86072: LD_VAR 0 1
86076: PPUSH
86077: LD_VAR 0 6
86081: PPUSH
86082: CALL_OW 1
86086: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
86087: LD_ADDR_EXP 51
86091: PUSH
86092: LD_EXP 51
86096: PPUSH
86097: LD_VAR 0 1
86101: PPUSH
86102: LD_VAR 0 3
86106: PPUSH
86107: CALL_OW 1
86111: ST_TO_ADDR
// end ;
86112: LD_VAR 0 4
86116: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
86117: LD_INT 0
86119: PPUSH
// if not mc_bases [ base ] then
86120: LD_EXP 36
86124: PUSH
86125: LD_VAR 0 1
86129: ARRAY
86130: NOT
86131: IFFALSE 86135
// exit ;
86133: GO 86160
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
86135: LD_ADDR_EXP 41
86139: PUSH
86140: LD_EXP 41
86144: PPUSH
86145: LD_VAR 0 1
86149: PPUSH
86150: LD_VAR 0 2
86154: PPUSH
86155: CALL_OW 1
86159: ST_TO_ADDR
// end ;
86160: LD_VAR 0 3
86164: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
86165: LD_INT 0
86167: PPUSH
// if not mc_bases [ base ] then
86168: LD_EXP 36
86172: PUSH
86173: LD_VAR 0 1
86177: ARRAY
86178: NOT
86179: IFFALSE 86183
// exit ;
86181: GO 86220
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
86183: LD_ADDR_EXP 41
86187: PUSH
86188: LD_EXP 41
86192: PPUSH
86193: LD_VAR 0 1
86197: PPUSH
86198: LD_EXP 41
86202: PUSH
86203: LD_VAR 0 1
86207: ARRAY
86208: PUSH
86209: LD_VAR 0 2
86213: UNION
86214: PPUSH
86215: CALL_OW 1
86219: ST_TO_ADDR
// end ;
86220: LD_VAR 0 3
86224: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
86225: LD_INT 0
86227: PPUSH
// if not mc_bases [ base ] then
86228: LD_EXP 36
86232: PUSH
86233: LD_VAR 0 1
86237: ARRAY
86238: NOT
86239: IFFALSE 86243
// exit ;
86241: GO 86268
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
86243: LD_ADDR_EXP 57
86247: PUSH
86248: LD_EXP 57
86252: PPUSH
86253: LD_VAR 0 1
86257: PPUSH
86258: LD_VAR 0 2
86262: PPUSH
86263: CALL_OW 1
86267: ST_TO_ADDR
// end ;
86268: LD_VAR 0 3
86272: RET
// export function MC_InsertProduceList ( base , components ) ; begin
86273: LD_INT 0
86275: PPUSH
// if not mc_bases [ base ] then
86276: LD_EXP 36
86280: PUSH
86281: LD_VAR 0 1
86285: ARRAY
86286: NOT
86287: IFFALSE 86291
// exit ;
86289: GO 86328
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
86291: LD_ADDR_EXP 57
86295: PUSH
86296: LD_EXP 57
86300: PPUSH
86301: LD_VAR 0 1
86305: PPUSH
86306: LD_EXP 57
86310: PUSH
86311: LD_VAR 0 1
86315: ARRAY
86316: PUSH
86317: LD_VAR 0 2
86321: ADD
86322: PPUSH
86323: CALL_OW 1
86327: ST_TO_ADDR
// end ;
86328: LD_VAR 0 3
86332: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
86333: LD_INT 0
86335: PPUSH
// if not mc_bases [ base ] then
86336: LD_EXP 36
86340: PUSH
86341: LD_VAR 0 1
86345: ARRAY
86346: NOT
86347: IFFALSE 86351
// exit ;
86349: GO 86405
// mc_defender := Replace ( mc_defender , base , deflist ) ;
86351: LD_ADDR_EXP 58
86355: PUSH
86356: LD_EXP 58
86360: PPUSH
86361: LD_VAR 0 1
86365: PPUSH
86366: LD_VAR 0 2
86370: PPUSH
86371: CALL_OW 1
86375: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
86376: LD_ADDR_EXP 47
86380: PUSH
86381: LD_EXP 47
86385: PPUSH
86386: LD_VAR 0 1
86390: PPUSH
86391: LD_VAR 0 2
86395: PUSH
86396: LD_INT 0
86398: PLUS
86399: PPUSH
86400: CALL_OW 1
86404: ST_TO_ADDR
// end ;
86405: LD_VAR 0 3
86409: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
86410: LD_INT 0
86412: PPUSH
// if not mc_bases [ base ] then
86413: LD_EXP 36
86417: PUSH
86418: LD_VAR 0 1
86422: ARRAY
86423: NOT
86424: IFFALSE 86428
// exit ;
86426: GO 86453
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
86428: LD_ADDR_EXP 47
86432: PUSH
86433: LD_EXP 47
86437: PPUSH
86438: LD_VAR 0 1
86442: PPUSH
86443: LD_VAR 0 2
86447: PPUSH
86448: CALL_OW 1
86452: ST_TO_ADDR
// end ;
86453: LD_VAR 0 3
86457: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
86458: LD_INT 0
86460: PPUSH
86461: PPUSH
86462: PPUSH
86463: PPUSH
// if not mc_bases [ base ] then
86464: LD_EXP 36
86468: PUSH
86469: LD_VAR 0 1
86473: ARRAY
86474: NOT
86475: IFFALSE 86479
// exit ;
86477: GO 86544
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
86479: LD_ADDR_EXP 56
86483: PUSH
86484: LD_EXP 56
86488: PPUSH
86489: LD_VAR 0 1
86493: PUSH
86494: LD_EXP 56
86498: PUSH
86499: LD_VAR 0 1
86503: ARRAY
86504: PUSH
86505: LD_INT 1
86507: PLUS
86508: PUSH
86509: EMPTY
86510: LIST
86511: LIST
86512: PPUSH
86513: LD_VAR 0 1
86517: PUSH
86518: LD_VAR 0 2
86522: PUSH
86523: LD_VAR 0 3
86527: PUSH
86528: LD_VAR 0 4
86532: PUSH
86533: EMPTY
86534: LIST
86535: LIST
86536: LIST
86537: LIST
86538: PPUSH
86539: CALL 26583 0 3
86543: ST_TO_ADDR
// end ;
86544: LD_VAR 0 5
86548: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
86549: LD_INT 0
86551: PPUSH
// if not mc_bases [ base ] then
86552: LD_EXP 36
86556: PUSH
86557: LD_VAR 0 1
86561: ARRAY
86562: NOT
86563: IFFALSE 86567
// exit ;
86565: GO 86592
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
86567: LD_ADDR_EXP 73
86571: PUSH
86572: LD_EXP 73
86576: PPUSH
86577: LD_VAR 0 1
86581: PPUSH
86582: LD_VAR 0 2
86586: PPUSH
86587: CALL_OW 1
86591: ST_TO_ADDR
// end ;
86592: LD_VAR 0 3
86596: RET
// export function MC_GetMinesField ( base ) ; begin
86597: LD_INT 0
86599: PPUSH
// result := mc_mines [ base ] ;
86600: LD_ADDR_VAR 0 2
86604: PUSH
86605: LD_EXP 49
86609: PUSH
86610: LD_VAR 0 1
86614: ARRAY
86615: ST_TO_ADDR
// end ;
86616: LD_VAR 0 2
86620: RET
// export function MC_GetProduceList ( base ) ; begin
86621: LD_INT 0
86623: PPUSH
// result := mc_produce [ base ] ;
86624: LD_ADDR_VAR 0 2
86628: PUSH
86629: LD_EXP 57
86633: PUSH
86634: LD_VAR 0 1
86638: ARRAY
86639: ST_TO_ADDR
// end ;
86640: LD_VAR 0 2
86644: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
86645: LD_INT 0
86647: PPUSH
86648: PPUSH
// if not mc_bases then
86649: LD_EXP 36
86653: NOT
86654: IFFALSE 86658
// exit ;
86656: GO 86723
// if mc_bases [ base ] then
86658: LD_EXP 36
86662: PUSH
86663: LD_VAR 0 1
86667: ARRAY
86668: IFFALSE 86723
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
86670: LD_ADDR_VAR 0 3
86674: PUSH
86675: LD_EXP 36
86679: PUSH
86680: LD_VAR 0 1
86684: ARRAY
86685: PPUSH
86686: LD_INT 30
86688: PUSH
86689: LD_VAR 0 2
86693: PUSH
86694: EMPTY
86695: LIST
86696: LIST
86697: PPUSH
86698: CALL_OW 72
86702: ST_TO_ADDR
// if result then
86703: LD_VAR 0 3
86707: IFFALSE 86723
// result := result [ 1 ] ;
86709: LD_ADDR_VAR 0 3
86713: PUSH
86714: LD_VAR 0 3
86718: PUSH
86719: LD_INT 1
86721: ARRAY
86722: ST_TO_ADDR
// end ; end ;
86723: LD_VAR 0 3
86727: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
86728: LD_INT 0
86730: PPUSH
86731: PPUSH
// if not mc_bases then
86732: LD_EXP 36
86736: NOT
86737: IFFALSE 86741
// exit ;
86739: GO 86786
// if mc_bases [ base ] then
86741: LD_EXP 36
86745: PUSH
86746: LD_VAR 0 1
86750: ARRAY
86751: IFFALSE 86786
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
86753: LD_ADDR_VAR 0 3
86757: PUSH
86758: LD_EXP 36
86762: PUSH
86763: LD_VAR 0 1
86767: ARRAY
86768: PPUSH
86769: LD_INT 30
86771: PUSH
86772: LD_VAR 0 2
86776: PUSH
86777: EMPTY
86778: LIST
86779: LIST
86780: PPUSH
86781: CALL_OW 72
86785: ST_TO_ADDR
// end ;
86786: LD_VAR 0 3
86790: RET
// export function MC_SetTame ( base , area ) ; begin
86791: LD_INT 0
86793: PPUSH
// if not mc_bases or not base then
86794: LD_EXP 36
86798: NOT
86799: PUSH
86800: LD_VAR 0 1
86804: NOT
86805: OR
86806: IFFALSE 86810
// exit ;
86808: GO 86835
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
86810: LD_ADDR_EXP 64
86814: PUSH
86815: LD_EXP 64
86819: PPUSH
86820: LD_VAR 0 1
86824: PPUSH
86825: LD_VAR 0 2
86829: PPUSH
86830: CALL_OW 1
86834: ST_TO_ADDR
// end ;
86835: LD_VAR 0 3
86839: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
86840: LD_INT 0
86842: PPUSH
86843: PPUSH
// if not mc_bases or not base then
86844: LD_EXP 36
86848: NOT
86849: PUSH
86850: LD_VAR 0 1
86854: NOT
86855: OR
86856: IFFALSE 86860
// exit ;
86858: GO 86962
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
86860: LD_ADDR_VAR 0 4
86864: PUSH
86865: LD_EXP 36
86869: PUSH
86870: LD_VAR 0 1
86874: ARRAY
86875: PPUSH
86876: LD_INT 30
86878: PUSH
86879: LD_VAR 0 2
86883: PUSH
86884: EMPTY
86885: LIST
86886: LIST
86887: PPUSH
86888: CALL_OW 72
86892: ST_TO_ADDR
// if not tmp then
86893: LD_VAR 0 4
86897: NOT
86898: IFFALSE 86902
// exit ;
86900: GO 86962
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
86902: LD_ADDR_EXP 68
86906: PUSH
86907: LD_EXP 68
86911: PPUSH
86912: LD_VAR 0 1
86916: PPUSH
86917: LD_EXP 68
86921: PUSH
86922: LD_VAR 0 1
86926: ARRAY
86927: PPUSH
86928: LD_EXP 68
86932: PUSH
86933: LD_VAR 0 1
86937: ARRAY
86938: PUSH
86939: LD_INT 1
86941: PLUS
86942: PPUSH
86943: LD_VAR 0 4
86947: PUSH
86948: LD_INT 1
86950: ARRAY
86951: PPUSH
86952: CALL_OW 2
86956: PPUSH
86957: CALL_OW 1
86961: ST_TO_ADDR
// end ;
86962: LD_VAR 0 3
86966: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
86967: LD_INT 0
86969: PPUSH
86970: PPUSH
// if not mc_bases or not base or not kinds then
86971: LD_EXP 36
86975: NOT
86976: PUSH
86977: LD_VAR 0 1
86981: NOT
86982: OR
86983: PUSH
86984: LD_VAR 0 2
86988: NOT
86989: OR
86990: IFFALSE 86994
// exit ;
86992: GO 87055
// for i in kinds do
86994: LD_ADDR_VAR 0 4
86998: PUSH
86999: LD_VAR 0 2
87003: PUSH
87004: FOR_IN
87005: IFFALSE 87053
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
87007: LD_ADDR_EXP 70
87011: PUSH
87012: LD_EXP 70
87016: PPUSH
87017: LD_VAR 0 1
87021: PUSH
87022: LD_EXP 70
87026: PUSH
87027: LD_VAR 0 1
87031: ARRAY
87032: PUSH
87033: LD_INT 1
87035: PLUS
87036: PUSH
87037: EMPTY
87038: LIST
87039: LIST
87040: PPUSH
87041: LD_VAR 0 4
87045: PPUSH
87046: CALL 26583 0 3
87050: ST_TO_ADDR
87051: GO 87004
87053: POP
87054: POP
// end ;
87055: LD_VAR 0 3
87059: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
87060: LD_INT 0
87062: PPUSH
// if not mc_bases or not base or not areas then
87063: LD_EXP 36
87067: NOT
87068: PUSH
87069: LD_VAR 0 1
87073: NOT
87074: OR
87075: PUSH
87076: LD_VAR 0 2
87080: NOT
87081: OR
87082: IFFALSE 87086
// exit ;
87084: GO 87111
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
87086: LD_ADDR_EXP 54
87090: PUSH
87091: LD_EXP 54
87095: PPUSH
87096: LD_VAR 0 1
87100: PPUSH
87101: LD_VAR 0 2
87105: PPUSH
87106: CALL_OW 1
87110: ST_TO_ADDR
// end ;
87111: LD_VAR 0 3
87115: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
87116: LD_INT 0
87118: PPUSH
// if not mc_bases or not base or not teleports_exit then
87119: LD_EXP 36
87123: NOT
87124: PUSH
87125: LD_VAR 0 1
87129: NOT
87130: OR
87131: PUSH
87132: LD_VAR 0 2
87136: NOT
87137: OR
87138: IFFALSE 87142
// exit ;
87140: GO 87167
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
87142: LD_ADDR_EXP 71
87146: PUSH
87147: LD_EXP 71
87151: PPUSH
87152: LD_VAR 0 1
87156: PPUSH
87157: LD_VAR 0 2
87161: PPUSH
87162: CALL_OW 1
87166: ST_TO_ADDR
// end ;
87167: LD_VAR 0 3
87171: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
87172: LD_INT 0
87174: PPUSH
87175: PPUSH
87176: PPUSH
// if not mc_bases or not base or not ext_list then
87177: LD_EXP 36
87181: NOT
87182: PUSH
87183: LD_VAR 0 1
87187: NOT
87188: OR
87189: PUSH
87190: LD_VAR 0 5
87194: NOT
87195: OR
87196: IFFALSE 87200
// exit ;
87198: GO 87373
// tmp := GetFacExtXYD ( x , y , d ) ;
87200: LD_ADDR_VAR 0 8
87204: PUSH
87205: LD_VAR 0 2
87209: PPUSH
87210: LD_VAR 0 3
87214: PPUSH
87215: LD_VAR 0 4
87219: PPUSH
87220: CALL 59987 0 3
87224: ST_TO_ADDR
// if not tmp then
87225: LD_VAR 0 8
87229: NOT
87230: IFFALSE 87234
// exit ;
87232: GO 87373
// for i in tmp do
87234: LD_ADDR_VAR 0 7
87238: PUSH
87239: LD_VAR 0 8
87243: PUSH
87244: FOR_IN
87245: IFFALSE 87371
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
87247: LD_ADDR_EXP 41
87251: PUSH
87252: LD_EXP 41
87256: PPUSH
87257: LD_VAR 0 1
87261: PPUSH
87262: LD_EXP 41
87266: PUSH
87267: LD_VAR 0 1
87271: ARRAY
87272: PPUSH
87273: LD_EXP 41
87277: PUSH
87278: LD_VAR 0 1
87282: ARRAY
87283: PUSH
87284: LD_INT 1
87286: PLUS
87287: PPUSH
87288: LD_VAR 0 5
87292: PUSH
87293: LD_INT 1
87295: ARRAY
87296: PUSH
87297: LD_VAR 0 7
87301: PUSH
87302: LD_INT 1
87304: ARRAY
87305: PUSH
87306: LD_VAR 0 7
87310: PUSH
87311: LD_INT 2
87313: ARRAY
87314: PUSH
87315: LD_VAR 0 7
87319: PUSH
87320: LD_INT 3
87322: ARRAY
87323: PUSH
87324: EMPTY
87325: LIST
87326: LIST
87327: LIST
87328: LIST
87329: PPUSH
87330: CALL_OW 2
87334: PPUSH
87335: CALL_OW 1
87339: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
87340: LD_ADDR_VAR 0 5
87344: PUSH
87345: LD_VAR 0 5
87349: PPUSH
87350: LD_INT 1
87352: PPUSH
87353: CALL_OW 3
87357: ST_TO_ADDR
// if not ext_list then
87358: LD_VAR 0 5
87362: NOT
87363: IFFALSE 87369
// exit ;
87365: POP
87366: POP
87367: GO 87373
// end ;
87369: GO 87244
87371: POP
87372: POP
// end ;
87373: LD_VAR 0 6
87377: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
87378: LD_INT 0
87380: PPUSH
// if not mc_bases or not base or not weapon_list then
87381: LD_EXP 36
87385: NOT
87386: PUSH
87387: LD_VAR 0 1
87391: NOT
87392: OR
87393: PUSH
87394: LD_VAR 0 2
87398: NOT
87399: OR
87400: IFFALSE 87404
// exit ;
87402: GO 87429
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
87404: LD_ADDR_EXP 75
87408: PUSH
87409: LD_EXP 75
87413: PPUSH
87414: LD_VAR 0 1
87418: PPUSH
87419: LD_VAR 0 2
87423: PPUSH
87424: CALL_OW 1
87428: ST_TO_ADDR
// end ;
87429: LD_VAR 0 3
87433: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
87434: LD_INT 0
87436: PPUSH
// if not mc_bases or not base or not tech_list then
87437: LD_EXP 36
87441: NOT
87442: PUSH
87443: LD_VAR 0 1
87447: NOT
87448: OR
87449: PUSH
87450: LD_VAR 0 2
87454: NOT
87455: OR
87456: IFFALSE 87460
// exit ;
87458: GO 87485
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
87460: LD_ADDR_EXP 63
87464: PUSH
87465: LD_EXP 63
87469: PPUSH
87470: LD_VAR 0 1
87474: PPUSH
87475: LD_VAR 0 2
87479: PPUSH
87480: CALL_OW 1
87484: ST_TO_ADDR
// end ;
87485: LD_VAR 0 3
87489: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
87490: LD_INT 0
87492: PPUSH
// if not mc_bases or not parking_area or not base then
87493: LD_EXP 36
87497: NOT
87498: PUSH
87499: LD_VAR 0 2
87503: NOT
87504: OR
87505: PUSH
87506: LD_VAR 0 1
87510: NOT
87511: OR
87512: IFFALSE 87516
// exit ;
87514: GO 87541
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
87516: LD_ADDR_EXP 60
87520: PUSH
87521: LD_EXP 60
87525: PPUSH
87526: LD_VAR 0 1
87530: PPUSH
87531: LD_VAR 0 2
87535: PPUSH
87536: CALL_OW 1
87540: ST_TO_ADDR
// end ;
87541: LD_VAR 0 3
87545: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
87546: LD_INT 0
87548: PPUSH
// if not mc_bases or not base or not scan_area then
87549: LD_EXP 36
87553: NOT
87554: PUSH
87555: LD_VAR 0 1
87559: NOT
87560: OR
87561: PUSH
87562: LD_VAR 0 2
87566: NOT
87567: OR
87568: IFFALSE 87572
// exit ;
87570: GO 87597
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
87572: LD_ADDR_EXP 61
87576: PUSH
87577: LD_EXP 61
87581: PPUSH
87582: LD_VAR 0 1
87586: PPUSH
87587: LD_VAR 0 2
87591: PPUSH
87592: CALL_OW 1
87596: ST_TO_ADDR
// end ;
87597: LD_VAR 0 3
87601: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
87602: LD_INT 0
87604: PPUSH
87605: PPUSH
// if not mc_bases or not base then
87606: LD_EXP 36
87610: NOT
87611: PUSH
87612: LD_VAR 0 1
87616: NOT
87617: OR
87618: IFFALSE 87622
// exit ;
87620: GO 87686
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
87622: LD_ADDR_VAR 0 3
87626: PUSH
87627: LD_INT 1
87629: PUSH
87630: LD_INT 2
87632: PUSH
87633: LD_INT 3
87635: PUSH
87636: LD_INT 4
87638: PUSH
87639: LD_INT 11
87641: PUSH
87642: EMPTY
87643: LIST
87644: LIST
87645: LIST
87646: LIST
87647: LIST
87648: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
87649: LD_ADDR_EXP 63
87653: PUSH
87654: LD_EXP 63
87658: PPUSH
87659: LD_VAR 0 1
87663: PPUSH
87664: LD_EXP 63
87668: PUSH
87669: LD_VAR 0 1
87673: ARRAY
87674: PUSH
87675: LD_VAR 0 3
87679: DIFF
87680: PPUSH
87681: CALL_OW 1
87685: ST_TO_ADDR
// end ;
87686: LD_VAR 0 2
87690: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
87691: LD_INT 0
87693: PPUSH
// result := mc_vehicles [ base ] ;
87694: LD_ADDR_VAR 0 3
87698: PUSH
87699: LD_EXP 55
87703: PUSH
87704: LD_VAR 0 1
87708: ARRAY
87709: ST_TO_ADDR
// if onlyCombat then
87710: LD_VAR 0 2
87714: IFFALSE 87879
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
87716: LD_ADDR_VAR 0 3
87720: PUSH
87721: LD_VAR 0 3
87725: PUSH
87726: LD_VAR 0 3
87730: PPUSH
87731: LD_INT 2
87733: PUSH
87734: LD_INT 34
87736: PUSH
87737: LD_INT 12
87739: PUSH
87740: EMPTY
87741: LIST
87742: LIST
87743: PUSH
87744: LD_INT 34
87746: PUSH
87747: LD_INT 51
87749: PUSH
87750: EMPTY
87751: LIST
87752: LIST
87753: PUSH
87754: LD_INT 34
87756: PUSH
87757: LD_EXP 30
87761: PUSH
87762: EMPTY
87763: LIST
87764: LIST
87765: PUSH
87766: LD_INT 34
87768: PUSH
87769: LD_INT 32
87771: PUSH
87772: EMPTY
87773: LIST
87774: LIST
87775: PUSH
87776: LD_INT 34
87778: PUSH
87779: LD_INT 13
87781: PUSH
87782: EMPTY
87783: LIST
87784: LIST
87785: PUSH
87786: LD_INT 34
87788: PUSH
87789: LD_INT 52
87791: PUSH
87792: EMPTY
87793: LIST
87794: LIST
87795: PUSH
87796: LD_INT 34
87798: PUSH
87799: LD_INT 14
87801: PUSH
87802: EMPTY
87803: LIST
87804: LIST
87805: PUSH
87806: LD_INT 34
87808: PUSH
87809: LD_INT 53
87811: PUSH
87812: EMPTY
87813: LIST
87814: LIST
87815: PUSH
87816: LD_INT 34
87818: PUSH
87819: LD_EXP 29
87823: PUSH
87824: EMPTY
87825: LIST
87826: LIST
87827: PUSH
87828: LD_INT 34
87830: PUSH
87831: LD_INT 31
87833: PUSH
87834: EMPTY
87835: LIST
87836: LIST
87837: PUSH
87838: LD_INT 34
87840: PUSH
87841: LD_INT 48
87843: PUSH
87844: EMPTY
87845: LIST
87846: LIST
87847: PUSH
87848: LD_INT 34
87850: PUSH
87851: LD_INT 8
87853: PUSH
87854: EMPTY
87855: LIST
87856: LIST
87857: PUSH
87858: EMPTY
87859: LIST
87860: LIST
87861: LIST
87862: LIST
87863: LIST
87864: LIST
87865: LIST
87866: LIST
87867: LIST
87868: LIST
87869: LIST
87870: LIST
87871: LIST
87872: PPUSH
87873: CALL_OW 72
87877: DIFF
87878: ST_TO_ADDR
// end ; end_of_file
87879: LD_VAR 0 3
87883: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
87884: LD_INT 0
87886: PPUSH
87887: PPUSH
87888: PPUSH
// if not mc_bases or not skirmish then
87889: LD_EXP 36
87893: NOT
87894: PUSH
87895: LD_EXP 34
87899: NOT
87900: OR
87901: IFFALSE 87905
// exit ;
87903: GO 88070
// for i = 1 to mc_bases do
87905: LD_ADDR_VAR 0 4
87909: PUSH
87910: DOUBLE
87911: LD_INT 1
87913: DEC
87914: ST_TO_ADDR
87915: LD_EXP 36
87919: PUSH
87920: FOR_TO
87921: IFFALSE 88068
// begin if sci in mc_bases [ i ] then
87923: LD_VAR 0 2
87927: PUSH
87928: LD_EXP 36
87932: PUSH
87933: LD_VAR 0 4
87937: ARRAY
87938: IN
87939: IFFALSE 88066
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
87941: LD_ADDR_EXP 65
87945: PUSH
87946: LD_EXP 65
87950: PPUSH
87951: LD_VAR 0 4
87955: PUSH
87956: LD_EXP 65
87960: PUSH
87961: LD_VAR 0 4
87965: ARRAY
87966: PUSH
87967: LD_INT 1
87969: PLUS
87970: PUSH
87971: EMPTY
87972: LIST
87973: LIST
87974: PPUSH
87975: LD_VAR 0 1
87979: PPUSH
87980: CALL 26583 0 3
87984: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
87985: LD_ADDR_VAR 0 5
87989: PUSH
87990: LD_EXP 36
87994: PUSH
87995: LD_VAR 0 4
87999: ARRAY
88000: PPUSH
88001: LD_INT 2
88003: PUSH
88004: LD_INT 30
88006: PUSH
88007: LD_INT 0
88009: PUSH
88010: EMPTY
88011: LIST
88012: LIST
88013: PUSH
88014: LD_INT 30
88016: PUSH
88017: LD_INT 1
88019: PUSH
88020: EMPTY
88021: LIST
88022: LIST
88023: PUSH
88024: EMPTY
88025: LIST
88026: LIST
88027: LIST
88028: PPUSH
88029: CALL_OW 72
88033: PPUSH
88034: LD_VAR 0 1
88038: PPUSH
88039: CALL_OW 74
88043: ST_TO_ADDR
// if tmp then
88044: LD_VAR 0 5
88048: IFFALSE 88064
// ComStandNearbyBuilding ( ape , tmp ) ;
88050: LD_VAR 0 1
88054: PPUSH
88055: LD_VAR 0 5
88059: PPUSH
88060: CALL 20786 0 2
// break ;
88064: GO 88068
// end ; end ;
88066: GO 87920
88068: POP
88069: POP
// end ;
88070: LD_VAR 0 3
88074: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
88075: LD_INT 0
88077: PPUSH
88078: PPUSH
88079: PPUSH
// if not mc_bases or not skirmish then
88080: LD_EXP 36
88084: NOT
88085: PUSH
88086: LD_EXP 34
88090: NOT
88091: OR
88092: IFFALSE 88096
// exit ;
88094: GO 88185
// for i = 1 to mc_bases do
88096: LD_ADDR_VAR 0 4
88100: PUSH
88101: DOUBLE
88102: LD_INT 1
88104: DEC
88105: ST_TO_ADDR
88106: LD_EXP 36
88110: PUSH
88111: FOR_TO
88112: IFFALSE 88183
// begin if building in mc_busy_turret_list [ i ] then
88114: LD_VAR 0 1
88118: PUSH
88119: LD_EXP 46
88123: PUSH
88124: LD_VAR 0 4
88128: ARRAY
88129: IN
88130: IFFALSE 88181
// begin tmp := mc_busy_turret_list [ i ] diff building ;
88132: LD_ADDR_VAR 0 5
88136: PUSH
88137: LD_EXP 46
88141: PUSH
88142: LD_VAR 0 4
88146: ARRAY
88147: PUSH
88148: LD_VAR 0 1
88152: DIFF
88153: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
88154: LD_ADDR_EXP 46
88158: PUSH
88159: LD_EXP 46
88163: PPUSH
88164: LD_VAR 0 4
88168: PPUSH
88169: LD_VAR 0 5
88173: PPUSH
88174: CALL_OW 1
88178: ST_TO_ADDR
// break ;
88179: GO 88183
// end ; end ;
88181: GO 88111
88183: POP
88184: POP
// end ;
88185: LD_VAR 0 3
88189: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
88190: LD_INT 0
88192: PPUSH
88193: PPUSH
88194: PPUSH
// if not mc_bases or not skirmish then
88195: LD_EXP 36
88199: NOT
88200: PUSH
88201: LD_EXP 34
88205: NOT
88206: OR
88207: IFFALSE 88211
// exit ;
88209: GO 88410
// for i = 1 to mc_bases do
88211: LD_ADDR_VAR 0 5
88215: PUSH
88216: DOUBLE
88217: LD_INT 1
88219: DEC
88220: ST_TO_ADDR
88221: LD_EXP 36
88225: PUSH
88226: FOR_TO
88227: IFFALSE 88408
// if building in mc_bases [ i ] then
88229: LD_VAR 0 1
88233: PUSH
88234: LD_EXP 36
88238: PUSH
88239: LD_VAR 0 5
88243: ARRAY
88244: IN
88245: IFFALSE 88406
// begin tmp := mc_bases [ i ] diff building ;
88247: LD_ADDR_VAR 0 6
88251: PUSH
88252: LD_EXP 36
88256: PUSH
88257: LD_VAR 0 5
88261: ARRAY
88262: PUSH
88263: LD_VAR 0 1
88267: DIFF
88268: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
88269: LD_ADDR_EXP 36
88273: PUSH
88274: LD_EXP 36
88278: PPUSH
88279: LD_VAR 0 5
88283: PPUSH
88284: LD_VAR 0 6
88288: PPUSH
88289: CALL_OW 1
88293: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
88294: LD_VAR 0 1
88298: PUSH
88299: LD_EXP 44
88303: PUSH
88304: LD_VAR 0 5
88308: ARRAY
88309: IN
88310: IFFALSE 88349
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
88312: LD_ADDR_EXP 44
88316: PUSH
88317: LD_EXP 44
88321: PPUSH
88322: LD_VAR 0 5
88326: PPUSH
88327: LD_EXP 44
88331: PUSH
88332: LD_VAR 0 5
88336: ARRAY
88337: PUSH
88338: LD_VAR 0 1
88342: DIFF
88343: PPUSH
88344: CALL_OW 1
88348: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
88349: LD_VAR 0 1
88353: PUSH
88354: LD_EXP 45
88358: PUSH
88359: LD_VAR 0 5
88363: ARRAY
88364: IN
88365: IFFALSE 88404
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
88367: LD_ADDR_EXP 45
88371: PUSH
88372: LD_EXP 45
88376: PPUSH
88377: LD_VAR 0 5
88381: PPUSH
88382: LD_EXP 45
88386: PUSH
88387: LD_VAR 0 5
88391: ARRAY
88392: PUSH
88393: LD_VAR 0 1
88397: DIFF
88398: PPUSH
88399: CALL_OW 1
88403: ST_TO_ADDR
// break ;
88404: GO 88408
// end ;
88406: GO 88226
88408: POP
88409: POP
// end ;
88410: LD_VAR 0 4
88414: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
88415: LD_INT 0
88417: PPUSH
88418: PPUSH
88419: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
88420: LD_EXP 36
88424: NOT
88425: PUSH
88426: LD_EXP 34
88430: NOT
88431: OR
88432: PUSH
88433: LD_VAR 0 3
88437: PUSH
88438: LD_EXP 62
88442: IN
88443: NOT
88444: OR
88445: IFFALSE 88449
// exit ;
88447: GO 88572
// for i = 1 to mc_vehicles do
88449: LD_ADDR_VAR 0 6
88453: PUSH
88454: DOUBLE
88455: LD_INT 1
88457: DEC
88458: ST_TO_ADDR
88459: LD_EXP 55
88463: PUSH
88464: FOR_TO
88465: IFFALSE 88570
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
88467: LD_VAR 0 2
88471: PUSH
88472: LD_EXP 55
88476: PUSH
88477: LD_VAR 0 6
88481: ARRAY
88482: IN
88483: PUSH
88484: LD_VAR 0 1
88488: PUSH
88489: LD_EXP 55
88493: PUSH
88494: LD_VAR 0 6
88498: ARRAY
88499: IN
88500: OR
88501: IFFALSE 88568
// begin tmp := mc_vehicles [ i ] diff old ;
88503: LD_ADDR_VAR 0 7
88507: PUSH
88508: LD_EXP 55
88512: PUSH
88513: LD_VAR 0 6
88517: ARRAY
88518: PUSH
88519: LD_VAR 0 2
88523: DIFF
88524: ST_TO_ADDR
// tmp := tmp diff new ;
88525: LD_ADDR_VAR 0 7
88529: PUSH
88530: LD_VAR 0 7
88534: PUSH
88535: LD_VAR 0 1
88539: DIFF
88540: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
88541: LD_ADDR_EXP 55
88545: PUSH
88546: LD_EXP 55
88550: PPUSH
88551: LD_VAR 0 6
88555: PPUSH
88556: LD_VAR 0 7
88560: PPUSH
88561: CALL_OW 1
88565: ST_TO_ADDR
// break ;
88566: GO 88570
// end ;
88568: GO 88464
88570: POP
88571: POP
// end ;
88572: LD_VAR 0 5
88576: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
88577: LD_INT 0
88579: PPUSH
88580: PPUSH
88581: PPUSH
88582: PPUSH
// if not mc_bases or not skirmish then
88583: LD_EXP 36
88587: NOT
88588: PUSH
88589: LD_EXP 34
88593: NOT
88594: OR
88595: IFFALSE 88599
// exit ;
88597: GO 88976
// side := GetSide ( vehicle ) ;
88599: LD_ADDR_VAR 0 5
88603: PUSH
88604: LD_VAR 0 1
88608: PPUSH
88609: CALL_OW 255
88613: ST_TO_ADDR
// for i = 1 to mc_bases do
88614: LD_ADDR_VAR 0 4
88618: PUSH
88619: DOUBLE
88620: LD_INT 1
88622: DEC
88623: ST_TO_ADDR
88624: LD_EXP 36
88628: PUSH
88629: FOR_TO
88630: IFFALSE 88974
// begin if factory in mc_bases [ i ] then
88632: LD_VAR 0 2
88636: PUSH
88637: LD_EXP 36
88641: PUSH
88642: LD_VAR 0 4
88646: ARRAY
88647: IN
88648: IFFALSE 88972
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
88650: LD_EXP 58
88654: PUSH
88655: LD_VAR 0 4
88659: ARRAY
88660: PUSH
88661: LD_EXP 47
88665: PUSH
88666: LD_VAR 0 4
88670: ARRAY
88671: LESS
88672: PUSH
88673: LD_VAR 0 1
88677: PPUSH
88678: CALL_OW 264
88682: PUSH
88683: LD_INT 31
88685: PUSH
88686: LD_INT 32
88688: PUSH
88689: LD_INT 51
88691: PUSH
88692: LD_EXP 30
88696: PUSH
88697: LD_INT 12
88699: PUSH
88700: LD_INT 30
88702: PUSH
88703: LD_EXP 29
88707: PUSH
88708: LD_INT 11
88710: PUSH
88711: LD_INT 53
88713: PUSH
88714: LD_INT 14
88716: PUSH
88717: LD_EXP 33
88721: PUSH
88722: LD_INT 29
88724: PUSH
88725: LD_EXP 31
88729: PUSH
88730: LD_INT 13
88732: PUSH
88733: LD_INT 52
88735: PUSH
88736: LD_INT 48
88738: PUSH
88739: LD_INT 8
88741: PUSH
88742: EMPTY
88743: LIST
88744: LIST
88745: LIST
88746: LIST
88747: LIST
88748: LIST
88749: LIST
88750: LIST
88751: LIST
88752: LIST
88753: LIST
88754: LIST
88755: LIST
88756: LIST
88757: LIST
88758: LIST
88759: LIST
88760: IN
88761: NOT
88762: AND
88763: IFFALSE 88811
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
88765: LD_ADDR_EXP 58
88769: PUSH
88770: LD_EXP 58
88774: PPUSH
88775: LD_VAR 0 4
88779: PUSH
88780: LD_EXP 58
88784: PUSH
88785: LD_VAR 0 4
88789: ARRAY
88790: PUSH
88791: LD_INT 1
88793: PLUS
88794: PUSH
88795: EMPTY
88796: LIST
88797: LIST
88798: PPUSH
88799: LD_VAR 0 1
88803: PPUSH
88804: CALL 26583 0 3
88808: ST_TO_ADDR
88809: GO 88855
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
88811: LD_ADDR_EXP 55
88815: PUSH
88816: LD_EXP 55
88820: PPUSH
88821: LD_VAR 0 4
88825: PUSH
88826: LD_EXP 55
88830: PUSH
88831: LD_VAR 0 4
88835: ARRAY
88836: PUSH
88837: LD_INT 1
88839: PLUS
88840: PUSH
88841: EMPTY
88842: LIST
88843: LIST
88844: PPUSH
88845: LD_VAR 0 1
88849: PPUSH
88850: CALL 26583 0 3
88854: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
88855: LD_VAR 0 1
88859: PPUSH
88860: CALL_OW 263
88864: PUSH
88865: LD_INT 2
88867: EQUAL
88868: IFFALSE 88888
// begin repeat wait ( 0 0$1 ) ;
88870: LD_INT 35
88872: PPUSH
88873: CALL_OW 67
// until IsControledBy ( vehicle ) ;
88877: LD_VAR 0 1
88881: PPUSH
88882: CALL_OW 312
88886: IFFALSE 88870
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
88888: LD_VAR 0 1
88892: PPUSH
88893: LD_EXP 60
88897: PUSH
88898: LD_VAR 0 4
88902: ARRAY
88903: PPUSH
88904: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
88908: LD_VAR 0 1
88912: PPUSH
88913: CALL_OW 263
88917: PUSH
88918: LD_INT 1
88920: NONEQUAL
88921: IFFALSE 88925
// break ;
88923: GO 88974
// repeat wait ( 0 0$1 ) ;
88925: LD_INT 35
88927: PPUSH
88928: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
88932: LD_VAR 0 1
88936: PPUSH
88937: LD_EXP 60
88941: PUSH
88942: LD_VAR 0 4
88946: ARRAY
88947: PPUSH
88948: CALL_OW 308
88952: IFFALSE 88925
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
88954: LD_VAR 0 1
88958: PPUSH
88959: CALL_OW 311
88963: PPUSH
88964: CALL_OW 121
// exit ;
88968: POP
88969: POP
88970: GO 88976
// end ; end ;
88972: GO 88629
88974: POP
88975: POP
// end ;
88976: LD_VAR 0 3
88980: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
88981: LD_INT 0
88983: PPUSH
88984: PPUSH
88985: PPUSH
88986: PPUSH
// if not mc_bases or not skirmish then
88987: LD_EXP 36
88991: NOT
88992: PUSH
88993: LD_EXP 34
88997: NOT
88998: OR
88999: IFFALSE 89003
// exit ;
89001: GO 89356
// repeat wait ( 0 0$1 ) ;
89003: LD_INT 35
89005: PPUSH
89006: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
89010: LD_VAR 0 2
89014: PPUSH
89015: LD_VAR 0 3
89019: PPUSH
89020: CALL_OW 284
89024: IFFALSE 89003
// if GetResourceTypeXY ( x , y ) = mat_artefact then
89026: LD_VAR 0 2
89030: PPUSH
89031: LD_VAR 0 3
89035: PPUSH
89036: CALL_OW 283
89040: PUSH
89041: LD_INT 4
89043: EQUAL
89044: IFFALSE 89048
// exit ;
89046: GO 89356
// for i = 1 to mc_bases do
89048: LD_ADDR_VAR 0 7
89052: PUSH
89053: DOUBLE
89054: LD_INT 1
89056: DEC
89057: ST_TO_ADDR
89058: LD_EXP 36
89062: PUSH
89063: FOR_TO
89064: IFFALSE 89354
// begin if mc_crates_area [ i ] then
89066: LD_EXP 54
89070: PUSH
89071: LD_VAR 0 7
89075: ARRAY
89076: IFFALSE 89187
// for j in mc_crates_area [ i ] do
89078: LD_ADDR_VAR 0 8
89082: PUSH
89083: LD_EXP 54
89087: PUSH
89088: LD_VAR 0 7
89092: ARRAY
89093: PUSH
89094: FOR_IN
89095: IFFALSE 89185
// if InArea ( x , y , j ) then
89097: LD_VAR 0 2
89101: PPUSH
89102: LD_VAR 0 3
89106: PPUSH
89107: LD_VAR 0 8
89111: PPUSH
89112: CALL_OW 309
89116: IFFALSE 89183
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
89118: LD_ADDR_EXP 52
89122: PUSH
89123: LD_EXP 52
89127: PPUSH
89128: LD_VAR 0 7
89132: PUSH
89133: LD_EXP 52
89137: PUSH
89138: LD_VAR 0 7
89142: ARRAY
89143: PUSH
89144: LD_INT 1
89146: PLUS
89147: PUSH
89148: EMPTY
89149: LIST
89150: LIST
89151: PPUSH
89152: LD_VAR 0 4
89156: PUSH
89157: LD_VAR 0 2
89161: PUSH
89162: LD_VAR 0 3
89166: PUSH
89167: EMPTY
89168: LIST
89169: LIST
89170: LIST
89171: PPUSH
89172: CALL 26583 0 3
89176: ST_TO_ADDR
// exit ;
89177: POP
89178: POP
89179: POP
89180: POP
89181: GO 89356
// end ;
89183: GO 89094
89185: POP
89186: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
89187: LD_ADDR_VAR 0 9
89191: PUSH
89192: LD_EXP 36
89196: PUSH
89197: LD_VAR 0 7
89201: ARRAY
89202: PPUSH
89203: LD_INT 2
89205: PUSH
89206: LD_INT 30
89208: PUSH
89209: LD_INT 0
89211: PUSH
89212: EMPTY
89213: LIST
89214: LIST
89215: PUSH
89216: LD_INT 30
89218: PUSH
89219: LD_INT 1
89221: PUSH
89222: EMPTY
89223: LIST
89224: LIST
89225: PUSH
89226: EMPTY
89227: LIST
89228: LIST
89229: LIST
89230: PPUSH
89231: CALL_OW 72
89235: ST_TO_ADDR
// if not depot then
89236: LD_VAR 0 9
89240: NOT
89241: IFFALSE 89245
// continue ;
89243: GO 89063
// for j in depot do
89245: LD_ADDR_VAR 0 8
89249: PUSH
89250: LD_VAR 0 9
89254: PUSH
89255: FOR_IN
89256: IFFALSE 89350
// if GetDistUnitXY ( j , x , y ) < 30 then
89258: LD_VAR 0 8
89262: PPUSH
89263: LD_VAR 0 2
89267: PPUSH
89268: LD_VAR 0 3
89272: PPUSH
89273: CALL_OW 297
89277: PUSH
89278: LD_INT 30
89280: LESS
89281: IFFALSE 89348
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
89283: LD_ADDR_EXP 52
89287: PUSH
89288: LD_EXP 52
89292: PPUSH
89293: LD_VAR 0 7
89297: PUSH
89298: LD_EXP 52
89302: PUSH
89303: LD_VAR 0 7
89307: ARRAY
89308: PUSH
89309: LD_INT 1
89311: PLUS
89312: PUSH
89313: EMPTY
89314: LIST
89315: LIST
89316: PPUSH
89317: LD_VAR 0 4
89321: PUSH
89322: LD_VAR 0 2
89326: PUSH
89327: LD_VAR 0 3
89331: PUSH
89332: EMPTY
89333: LIST
89334: LIST
89335: LIST
89336: PPUSH
89337: CALL 26583 0 3
89341: ST_TO_ADDR
// exit ;
89342: POP
89343: POP
89344: POP
89345: POP
89346: GO 89356
// end ;
89348: GO 89255
89350: POP
89351: POP
// end ;
89352: GO 89063
89354: POP
89355: POP
// end ;
89356: LD_VAR 0 6
89360: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
89361: LD_INT 0
89363: PPUSH
89364: PPUSH
89365: PPUSH
89366: PPUSH
// if not mc_bases or not skirmish then
89367: LD_EXP 36
89371: NOT
89372: PUSH
89373: LD_EXP 34
89377: NOT
89378: OR
89379: IFFALSE 89383
// exit ;
89381: GO 89660
// side := GetSide ( lab ) ;
89383: LD_ADDR_VAR 0 4
89387: PUSH
89388: LD_VAR 0 2
89392: PPUSH
89393: CALL_OW 255
89397: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
89398: LD_VAR 0 4
89402: PUSH
89403: LD_EXP 62
89407: IN
89408: NOT
89409: PUSH
89410: LD_EXP 63
89414: NOT
89415: OR
89416: PUSH
89417: LD_EXP 36
89421: NOT
89422: OR
89423: IFFALSE 89427
// exit ;
89425: GO 89660
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
89427: LD_ADDR_EXP 63
89431: PUSH
89432: LD_EXP 63
89436: PPUSH
89437: LD_VAR 0 4
89441: PPUSH
89442: LD_EXP 63
89446: PUSH
89447: LD_VAR 0 4
89451: ARRAY
89452: PUSH
89453: LD_VAR 0 1
89457: DIFF
89458: PPUSH
89459: CALL_OW 1
89463: ST_TO_ADDR
// for i = 1 to mc_bases do
89464: LD_ADDR_VAR 0 5
89468: PUSH
89469: DOUBLE
89470: LD_INT 1
89472: DEC
89473: ST_TO_ADDR
89474: LD_EXP 36
89478: PUSH
89479: FOR_TO
89480: IFFALSE 89658
// begin if lab in mc_bases [ i ] then
89482: LD_VAR 0 2
89486: PUSH
89487: LD_EXP 36
89491: PUSH
89492: LD_VAR 0 5
89496: ARRAY
89497: IN
89498: IFFALSE 89656
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
89500: LD_VAR 0 1
89504: PUSH
89505: LD_INT 11
89507: PUSH
89508: LD_INT 4
89510: PUSH
89511: LD_INT 3
89513: PUSH
89514: LD_INT 2
89516: PUSH
89517: EMPTY
89518: LIST
89519: LIST
89520: LIST
89521: LIST
89522: IN
89523: PUSH
89524: LD_EXP 66
89528: PUSH
89529: LD_VAR 0 5
89533: ARRAY
89534: AND
89535: IFFALSE 89656
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
89537: LD_ADDR_VAR 0 6
89541: PUSH
89542: LD_EXP 66
89546: PUSH
89547: LD_VAR 0 5
89551: ARRAY
89552: PUSH
89553: LD_INT 1
89555: ARRAY
89556: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
89557: LD_ADDR_EXP 66
89561: PUSH
89562: LD_EXP 66
89566: PPUSH
89567: LD_VAR 0 5
89571: PPUSH
89572: EMPTY
89573: PPUSH
89574: CALL_OW 1
89578: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
89579: LD_VAR 0 6
89583: PPUSH
89584: LD_INT 0
89586: PPUSH
89587: CALL_OW 109
// ComExitBuilding ( tmp ) ;
89591: LD_VAR 0 6
89595: PPUSH
89596: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
89600: LD_ADDR_EXP 65
89604: PUSH
89605: LD_EXP 65
89609: PPUSH
89610: LD_VAR 0 5
89614: PPUSH
89615: LD_EXP 65
89619: PUSH
89620: LD_VAR 0 5
89624: ARRAY
89625: PPUSH
89626: LD_INT 1
89628: PPUSH
89629: LD_VAR 0 6
89633: PPUSH
89634: CALL_OW 2
89638: PPUSH
89639: CALL_OW 1
89643: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
89644: LD_VAR 0 5
89648: PPUSH
89649: LD_INT 112
89651: PPUSH
89652: CALL 66656 0 2
// end ; end ; end ;
89656: GO 89479
89658: POP
89659: POP
// end ;
89660: LD_VAR 0 3
89664: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
89665: LD_INT 0
89667: PPUSH
89668: PPUSH
89669: PPUSH
89670: PPUSH
89671: PPUSH
89672: PPUSH
89673: PPUSH
89674: PPUSH
// if not mc_bases or not skirmish then
89675: LD_EXP 36
89679: NOT
89680: PUSH
89681: LD_EXP 34
89685: NOT
89686: OR
89687: IFFALSE 89691
// exit ;
89689: GO 91062
// for i = 1 to mc_bases do
89691: LD_ADDR_VAR 0 3
89695: PUSH
89696: DOUBLE
89697: LD_INT 1
89699: DEC
89700: ST_TO_ADDR
89701: LD_EXP 36
89705: PUSH
89706: FOR_TO
89707: IFFALSE 91060
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
89709: LD_VAR 0 1
89713: PUSH
89714: LD_EXP 36
89718: PUSH
89719: LD_VAR 0 3
89723: ARRAY
89724: IN
89725: PUSH
89726: LD_VAR 0 1
89730: PUSH
89731: LD_EXP 43
89735: PUSH
89736: LD_VAR 0 3
89740: ARRAY
89741: IN
89742: OR
89743: PUSH
89744: LD_VAR 0 1
89748: PUSH
89749: LD_EXP 58
89753: PUSH
89754: LD_VAR 0 3
89758: ARRAY
89759: IN
89760: OR
89761: PUSH
89762: LD_VAR 0 1
89766: PUSH
89767: LD_EXP 55
89771: PUSH
89772: LD_VAR 0 3
89776: ARRAY
89777: IN
89778: OR
89779: PUSH
89780: LD_VAR 0 1
89784: PUSH
89785: LD_EXP 65
89789: PUSH
89790: LD_VAR 0 3
89794: ARRAY
89795: IN
89796: OR
89797: PUSH
89798: LD_VAR 0 1
89802: PUSH
89803: LD_EXP 66
89807: PUSH
89808: LD_VAR 0 3
89812: ARRAY
89813: IN
89814: OR
89815: IFFALSE 91058
// begin if un in mc_ape [ i ] then
89817: LD_VAR 0 1
89821: PUSH
89822: LD_EXP 65
89826: PUSH
89827: LD_VAR 0 3
89831: ARRAY
89832: IN
89833: IFFALSE 89872
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
89835: LD_ADDR_EXP 65
89839: PUSH
89840: LD_EXP 65
89844: PPUSH
89845: LD_VAR 0 3
89849: PPUSH
89850: LD_EXP 65
89854: PUSH
89855: LD_VAR 0 3
89859: ARRAY
89860: PUSH
89861: LD_VAR 0 1
89865: DIFF
89866: PPUSH
89867: CALL_OW 1
89871: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
89872: LD_VAR 0 1
89876: PUSH
89877: LD_EXP 66
89881: PUSH
89882: LD_VAR 0 3
89886: ARRAY
89887: IN
89888: IFFALSE 89912
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
89890: LD_ADDR_EXP 66
89894: PUSH
89895: LD_EXP 66
89899: PPUSH
89900: LD_VAR 0 3
89904: PPUSH
89905: EMPTY
89906: PPUSH
89907: CALL_OW 1
89911: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
89912: LD_VAR 0 1
89916: PPUSH
89917: CALL_OW 247
89921: PUSH
89922: LD_INT 2
89924: EQUAL
89925: PUSH
89926: LD_VAR 0 1
89930: PPUSH
89931: CALL_OW 110
89935: PUSH
89936: LD_INT 20
89938: EQUAL
89939: PUSH
89940: LD_VAR 0 1
89944: PUSH
89945: LD_EXP 58
89949: PUSH
89950: LD_VAR 0 3
89954: ARRAY
89955: IN
89956: OR
89957: PUSH
89958: LD_VAR 0 1
89962: PPUSH
89963: CALL_OW 264
89967: PUSH
89968: LD_INT 12
89970: PUSH
89971: LD_INT 51
89973: PUSH
89974: LD_EXP 30
89978: PUSH
89979: LD_INT 32
89981: PUSH
89982: LD_INT 13
89984: PUSH
89985: LD_INT 52
89987: PUSH
89988: LD_INT 31
89990: PUSH
89991: EMPTY
89992: LIST
89993: LIST
89994: LIST
89995: LIST
89996: LIST
89997: LIST
89998: LIST
89999: IN
90000: OR
90001: AND
90002: IFFALSE 90310
// begin if un in mc_defender [ i ] then
90004: LD_VAR 0 1
90008: PUSH
90009: LD_EXP 58
90013: PUSH
90014: LD_VAR 0 3
90018: ARRAY
90019: IN
90020: IFFALSE 90059
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
90022: LD_ADDR_EXP 58
90026: PUSH
90027: LD_EXP 58
90031: PPUSH
90032: LD_VAR 0 3
90036: PPUSH
90037: LD_EXP 58
90041: PUSH
90042: LD_VAR 0 3
90046: ARRAY
90047: PUSH
90048: LD_VAR 0 1
90052: DIFF
90053: PPUSH
90054: CALL_OW 1
90058: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
90059: LD_ADDR_VAR 0 8
90063: PUSH
90064: LD_VAR 0 3
90068: PPUSH
90069: LD_INT 3
90071: PPUSH
90072: CALL 86728 0 2
90076: ST_TO_ADDR
// if fac then
90077: LD_VAR 0 8
90081: IFFALSE 90310
// begin for j in fac do
90083: LD_ADDR_VAR 0 4
90087: PUSH
90088: LD_VAR 0 8
90092: PUSH
90093: FOR_IN
90094: IFFALSE 90308
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
90096: LD_ADDR_VAR 0 9
90100: PUSH
90101: LD_VAR 0 8
90105: PPUSH
90106: LD_VAR 0 1
90110: PPUSH
90111: CALL_OW 265
90115: PPUSH
90116: LD_VAR 0 1
90120: PPUSH
90121: CALL_OW 262
90125: PPUSH
90126: LD_VAR 0 1
90130: PPUSH
90131: CALL_OW 263
90135: PPUSH
90136: LD_VAR 0 1
90140: PPUSH
90141: CALL_OW 264
90145: PPUSH
90146: CALL 24115 0 5
90150: ST_TO_ADDR
// if components then
90151: LD_VAR 0 9
90155: IFFALSE 90306
// begin if GetWeapon ( un ) = ar_control_tower then
90157: LD_VAR 0 1
90161: PPUSH
90162: CALL_OW 264
90166: PUSH
90167: LD_INT 31
90169: EQUAL
90170: IFFALSE 90287
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
90172: LD_VAR 0 1
90176: PPUSH
90177: CALL_OW 311
90181: PPUSH
90182: LD_INT 0
90184: PPUSH
90185: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
90189: LD_ADDR_EXP 76
90193: PUSH
90194: LD_EXP 76
90198: PPUSH
90199: LD_VAR 0 3
90203: PPUSH
90204: LD_EXP 76
90208: PUSH
90209: LD_VAR 0 3
90213: ARRAY
90214: PUSH
90215: LD_VAR 0 1
90219: PPUSH
90220: CALL_OW 311
90224: DIFF
90225: PPUSH
90226: CALL_OW 1
90230: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
90231: LD_ADDR_VAR 0 7
90235: PUSH
90236: LD_EXP 57
90240: PUSH
90241: LD_VAR 0 3
90245: ARRAY
90246: PPUSH
90247: LD_INT 1
90249: PPUSH
90250: LD_VAR 0 9
90254: PPUSH
90255: CALL_OW 2
90259: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
90260: LD_ADDR_EXP 57
90264: PUSH
90265: LD_EXP 57
90269: PPUSH
90270: LD_VAR 0 3
90274: PPUSH
90275: LD_VAR 0 7
90279: PPUSH
90280: CALL_OW 1
90284: ST_TO_ADDR
// end else
90285: GO 90304
// MC_InsertProduceList ( i , [ components ] ) ;
90287: LD_VAR 0 3
90291: PPUSH
90292: LD_VAR 0 9
90296: PUSH
90297: EMPTY
90298: LIST
90299: PPUSH
90300: CALL 86273 0 2
// break ;
90304: GO 90308
// end ; end ;
90306: GO 90093
90308: POP
90309: POP
// end ; end ; if GetType ( un ) = unit_building then
90310: LD_VAR 0 1
90314: PPUSH
90315: CALL_OW 247
90319: PUSH
90320: LD_INT 3
90322: EQUAL
90323: IFFALSE 90726
// begin btype := GetBType ( un ) ;
90325: LD_ADDR_VAR 0 5
90329: PUSH
90330: LD_VAR 0 1
90334: PPUSH
90335: CALL_OW 266
90339: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
90340: LD_VAR 0 5
90344: PUSH
90345: LD_INT 29
90347: PUSH
90348: LD_INT 30
90350: PUSH
90351: EMPTY
90352: LIST
90353: LIST
90354: IN
90355: IFFALSE 90428
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
90357: LD_VAR 0 1
90361: PPUSH
90362: CALL_OW 250
90366: PPUSH
90367: LD_VAR 0 1
90371: PPUSH
90372: CALL_OW 251
90376: PPUSH
90377: LD_VAR 0 1
90381: PPUSH
90382: CALL_OW 255
90386: PPUSH
90387: CALL_OW 440
90391: NOT
90392: IFFALSE 90428
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
90394: LD_VAR 0 1
90398: PPUSH
90399: CALL_OW 250
90403: PPUSH
90404: LD_VAR 0 1
90408: PPUSH
90409: CALL_OW 251
90413: PPUSH
90414: LD_VAR 0 1
90418: PPUSH
90419: CALL_OW 255
90423: PPUSH
90424: CALL_OW 441
// end ; if btype = b_warehouse then
90428: LD_VAR 0 5
90432: PUSH
90433: LD_INT 1
90435: EQUAL
90436: IFFALSE 90454
// begin btype := b_depot ;
90438: LD_ADDR_VAR 0 5
90442: PUSH
90443: LD_INT 0
90445: ST_TO_ADDR
// pos := 1 ;
90446: LD_ADDR_VAR 0 6
90450: PUSH
90451: LD_INT 1
90453: ST_TO_ADDR
// end ; if btype = b_factory then
90454: LD_VAR 0 5
90458: PUSH
90459: LD_INT 3
90461: EQUAL
90462: IFFALSE 90480
// begin btype := b_workshop ;
90464: LD_ADDR_VAR 0 5
90468: PUSH
90469: LD_INT 2
90471: ST_TO_ADDR
// pos := 1 ;
90472: LD_ADDR_VAR 0 6
90476: PUSH
90477: LD_INT 1
90479: ST_TO_ADDR
// end ; if btype = b_barracks then
90480: LD_VAR 0 5
90484: PUSH
90485: LD_INT 5
90487: EQUAL
90488: IFFALSE 90498
// btype := b_armoury ;
90490: LD_ADDR_VAR 0 5
90494: PUSH
90495: LD_INT 4
90497: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
90498: LD_VAR 0 5
90502: PUSH
90503: LD_INT 7
90505: PUSH
90506: LD_INT 8
90508: PUSH
90509: EMPTY
90510: LIST
90511: LIST
90512: IN
90513: IFFALSE 90523
// btype := b_lab ;
90515: LD_ADDR_VAR 0 5
90519: PUSH
90520: LD_INT 6
90522: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
90523: LD_ADDR_EXP 41
90527: PUSH
90528: LD_EXP 41
90532: PPUSH
90533: LD_VAR 0 3
90537: PUSH
90538: LD_EXP 41
90542: PUSH
90543: LD_VAR 0 3
90547: ARRAY
90548: PUSH
90549: LD_INT 1
90551: PLUS
90552: PUSH
90553: EMPTY
90554: LIST
90555: LIST
90556: PPUSH
90557: LD_VAR 0 5
90561: PUSH
90562: LD_VAR 0 1
90566: PPUSH
90567: CALL_OW 250
90571: PUSH
90572: LD_VAR 0 1
90576: PPUSH
90577: CALL_OW 251
90581: PUSH
90582: LD_VAR 0 1
90586: PPUSH
90587: CALL_OW 254
90591: PUSH
90592: EMPTY
90593: LIST
90594: LIST
90595: LIST
90596: LIST
90597: PPUSH
90598: CALL 26583 0 3
90602: ST_TO_ADDR
// if pos = 1 then
90603: LD_VAR 0 6
90607: PUSH
90608: LD_INT 1
90610: EQUAL
90611: IFFALSE 90726
// begin tmp := mc_build_list [ i ] ;
90613: LD_ADDR_VAR 0 7
90617: PUSH
90618: LD_EXP 41
90622: PUSH
90623: LD_VAR 0 3
90627: ARRAY
90628: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
90629: LD_VAR 0 7
90633: PPUSH
90634: LD_INT 2
90636: PUSH
90637: LD_INT 30
90639: PUSH
90640: LD_INT 0
90642: PUSH
90643: EMPTY
90644: LIST
90645: LIST
90646: PUSH
90647: LD_INT 30
90649: PUSH
90650: LD_INT 1
90652: PUSH
90653: EMPTY
90654: LIST
90655: LIST
90656: PUSH
90657: EMPTY
90658: LIST
90659: LIST
90660: LIST
90661: PPUSH
90662: CALL_OW 72
90666: IFFALSE 90676
// pos := 2 ;
90668: LD_ADDR_VAR 0 6
90672: PUSH
90673: LD_INT 2
90675: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
90676: LD_ADDR_VAR 0 7
90680: PUSH
90681: LD_VAR 0 7
90685: PPUSH
90686: LD_VAR 0 6
90690: PPUSH
90691: LD_VAR 0 7
90695: PPUSH
90696: CALL 26909 0 3
90700: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
90701: LD_ADDR_EXP 41
90705: PUSH
90706: LD_EXP 41
90710: PPUSH
90711: LD_VAR 0 3
90715: PPUSH
90716: LD_VAR 0 7
90720: PPUSH
90721: CALL_OW 1
90725: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
90726: LD_VAR 0 1
90730: PUSH
90731: LD_EXP 36
90735: PUSH
90736: LD_VAR 0 3
90740: ARRAY
90741: IN
90742: IFFALSE 90781
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
90744: LD_ADDR_EXP 36
90748: PUSH
90749: LD_EXP 36
90753: PPUSH
90754: LD_VAR 0 3
90758: PPUSH
90759: LD_EXP 36
90763: PUSH
90764: LD_VAR 0 3
90768: ARRAY
90769: PUSH
90770: LD_VAR 0 1
90774: DIFF
90775: PPUSH
90776: CALL_OW 1
90780: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
90781: LD_VAR 0 1
90785: PUSH
90786: LD_EXP 43
90790: PUSH
90791: LD_VAR 0 3
90795: ARRAY
90796: IN
90797: IFFALSE 90836
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
90799: LD_ADDR_EXP 43
90803: PUSH
90804: LD_EXP 43
90808: PPUSH
90809: LD_VAR 0 3
90813: PPUSH
90814: LD_EXP 43
90818: PUSH
90819: LD_VAR 0 3
90823: ARRAY
90824: PUSH
90825: LD_VAR 0 1
90829: DIFF
90830: PPUSH
90831: CALL_OW 1
90835: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
90836: LD_VAR 0 1
90840: PUSH
90841: LD_EXP 55
90845: PUSH
90846: LD_VAR 0 3
90850: ARRAY
90851: IN
90852: IFFALSE 90891
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
90854: LD_ADDR_EXP 55
90858: PUSH
90859: LD_EXP 55
90863: PPUSH
90864: LD_VAR 0 3
90868: PPUSH
90869: LD_EXP 55
90873: PUSH
90874: LD_VAR 0 3
90878: ARRAY
90879: PUSH
90880: LD_VAR 0 1
90884: DIFF
90885: PPUSH
90886: CALL_OW 1
90890: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
90891: LD_VAR 0 1
90895: PUSH
90896: LD_EXP 58
90900: PUSH
90901: LD_VAR 0 3
90905: ARRAY
90906: IN
90907: IFFALSE 90946
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
90909: LD_ADDR_EXP 58
90913: PUSH
90914: LD_EXP 58
90918: PPUSH
90919: LD_VAR 0 3
90923: PPUSH
90924: LD_EXP 58
90928: PUSH
90929: LD_VAR 0 3
90933: ARRAY
90934: PUSH
90935: LD_VAR 0 1
90939: DIFF
90940: PPUSH
90941: CALL_OW 1
90945: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
90946: LD_VAR 0 1
90950: PUSH
90951: LD_EXP 45
90955: PUSH
90956: LD_VAR 0 3
90960: ARRAY
90961: IN
90962: IFFALSE 91001
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
90964: LD_ADDR_EXP 45
90968: PUSH
90969: LD_EXP 45
90973: PPUSH
90974: LD_VAR 0 3
90978: PPUSH
90979: LD_EXP 45
90983: PUSH
90984: LD_VAR 0 3
90988: ARRAY
90989: PUSH
90990: LD_VAR 0 1
90994: DIFF
90995: PPUSH
90996: CALL_OW 1
91000: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
91001: LD_VAR 0 1
91005: PUSH
91006: LD_EXP 44
91010: PUSH
91011: LD_VAR 0 3
91015: ARRAY
91016: IN
91017: IFFALSE 91056
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
91019: LD_ADDR_EXP 44
91023: PUSH
91024: LD_EXP 44
91028: PPUSH
91029: LD_VAR 0 3
91033: PPUSH
91034: LD_EXP 44
91038: PUSH
91039: LD_VAR 0 3
91043: ARRAY
91044: PUSH
91045: LD_VAR 0 1
91049: DIFF
91050: PPUSH
91051: CALL_OW 1
91055: ST_TO_ADDR
// end ; break ;
91056: GO 91060
// end ;
91058: GO 89706
91060: POP
91061: POP
// end ;
91062: LD_VAR 0 2
91066: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
91067: LD_INT 0
91069: PPUSH
91070: PPUSH
91071: PPUSH
// if not mc_bases or not skirmish then
91072: LD_EXP 36
91076: NOT
91077: PUSH
91078: LD_EXP 34
91082: NOT
91083: OR
91084: IFFALSE 91088
// exit ;
91086: GO 91303
// for i = 1 to mc_bases do
91088: LD_ADDR_VAR 0 3
91092: PUSH
91093: DOUBLE
91094: LD_INT 1
91096: DEC
91097: ST_TO_ADDR
91098: LD_EXP 36
91102: PUSH
91103: FOR_TO
91104: IFFALSE 91301
// begin if building in mc_construct_list [ i ] then
91106: LD_VAR 0 1
91110: PUSH
91111: LD_EXP 43
91115: PUSH
91116: LD_VAR 0 3
91120: ARRAY
91121: IN
91122: IFFALSE 91299
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
91124: LD_ADDR_EXP 43
91128: PUSH
91129: LD_EXP 43
91133: PPUSH
91134: LD_VAR 0 3
91138: PPUSH
91139: LD_EXP 43
91143: PUSH
91144: LD_VAR 0 3
91148: ARRAY
91149: PUSH
91150: LD_VAR 0 1
91154: DIFF
91155: PPUSH
91156: CALL_OW 1
91160: ST_TO_ADDR
// if building in mc_lab [ i ] then
91161: LD_VAR 0 1
91165: PUSH
91166: LD_EXP 69
91170: PUSH
91171: LD_VAR 0 3
91175: ARRAY
91176: IN
91177: IFFALSE 91232
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
91179: LD_ADDR_EXP 70
91183: PUSH
91184: LD_EXP 70
91188: PPUSH
91189: LD_VAR 0 3
91193: PPUSH
91194: LD_EXP 70
91198: PUSH
91199: LD_VAR 0 3
91203: ARRAY
91204: PPUSH
91205: LD_INT 1
91207: PPUSH
91208: LD_EXP 70
91212: PUSH
91213: LD_VAR 0 3
91217: ARRAY
91218: PPUSH
91219: LD_INT 0
91221: PPUSH
91222: CALL 26001 0 4
91226: PPUSH
91227: CALL_OW 1
91231: ST_TO_ADDR
// if not building in mc_bases [ i ] then
91232: LD_VAR 0 1
91236: PUSH
91237: LD_EXP 36
91241: PUSH
91242: LD_VAR 0 3
91246: ARRAY
91247: IN
91248: NOT
91249: IFFALSE 91295
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
91251: LD_ADDR_EXP 36
91255: PUSH
91256: LD_EXP 36
91260: PPUSH
91261: LD_VAR 0 3
91265: PUSH
91266: LD_EXP 36
91270: PUSH
91271: LD_VAR 0 3
91275: ARRAY
91276: PUSH
91277: LD_INT 1
91279: PLUS
91280: PUSH
91281: EMPTY
91282: LIST
91283: LIST
91284: PPUSH
91285: LD_VAR 0 1
91289: PPUSH
91290: CALL 26583 0 3
91294: ST_TO_ADDR
// exit ;
91295: POP
91296: POP
91297: GO 91303
// end ; end ;
91299: GO 91103
91301: POP
91302: POP
// end ;
91303: LD_VAR 0 2
91307: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
91308: LD_INT 0
91310: PPUSH
91311: PPUSH
91312: PPUSH
91313: PPUSH
91314: PPUSH
91315: PPUSH
91316: PPUSH
// if not mc_bases or not skirmish then
91317: LD_EXP 36
91321: NOT
91322: PUSH
91323: LD_EXP 34
91327: NOT
91328: OR
91329: IFFALSE 91333
// exit ;
91331: GO 91994
// for i = 1 to mc_bases do
91333: LD_ADDR_VAR 0 3
91337: PUSH
91338: DOUBLE
91339: LD_INT 1
91341: DEC
91342: ST_TO_ADDR
91343: LD_EXP 36
91347: PUSH
91348: FOR_TO
91349: IFFALSE 91992
// begin if building in mc_construct_list [ i ] then
91351: LD_VAR 0 1
91355: PUSH
91356: LD_EXP 43
91360: PUSH
91361: LD_VAR 0 3
91365: ARRAY
91366: IN
91367: IFFALSE 91990
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
91369: LD_ADDR_EXP 43
91373: PUSH
91374: LD_EXP 43
91378: PPUSH
91379: LD_VAR 0 3
91383: PPUSH
91384: LD_EXP 43
91388: PUSH
91389: LD_VAR 0 3
91393: ARRAY
91394: PUSH
91395: LD_VAR 0 1
91399: DIFF
91400: PPUSH
91401: CALL_OW 1
91405: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
91406: LD_ADDR_EXP 36
91410: PUSH
91411: LD_EXP 36
91415: PPUSH
91416: LD_VAR 0 3
91420: PUSH
91421: LD_EXP 36
91425: PUSH
91426: LD_VAR 0 3
91430: ARRAY
91431: PUSH
91432: LD_INT 1
91434: PLUS
91435: PUSH
91436: EMPTY
91437: LIST
91438: LIST
91439: PPUSH
91440: LD_VAR 0 1
91444: PPUSH
91445: CALL 26583 0 3
91449: ST_TO_ADDR
// btype := GetBType ( building ) ;
91450: LD_ADDR_VAR 0 5
91454: PUSH
91455: LD_VAR 0 1
91459: PPUSH
91460: CALL_OW 266
91464: ST_TO_ADDR
// side := GetSide ( building ) ;
91465: LD_ADDR_VAR 0 8
91469: PUSH
91470: LD_VAR 0 1
91474: PPUSH
91475: CALL_OW 255
91479: ST_TO_ADDR
// if btype = b_lab then
91480: LD_VAR 0 5
91484: PUSH
91485: LD_INT 6
91487: EQUAL
91488: IFFALSE 91538
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
91490: LD_ADDR_EXP 69
91494: PUSH
91495: LD_EXP 69
91499: PPUSH
91500: LD_VAR 0 3
91504: PUSH
91505: LD_EXP 69
91509: PUSH
91510: LD_VAR 0 3
91514: ARRAY
91515: PUSH
91516: LD_INT 1
91518: PLUS
91519: PUSH
91520: EMPTY
91521: LIST
91522: LIST
91523: PPUSH
91524: LD_VAR 0 1
91528: PPUSH
91529: CALL 26583 0 3
91533: ST_TO_ADDR
// exit ;
91534: POP
91535: POP
91536: GO 91994
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
91538: LD_VAR 0 5
91542: PUSH
91543: LD_INT 0
91545: PUSH
91546: LD_INT 2
91548: PUSH
91549: LD_INT 4
91551: PUSH
91552: EMPTY
91553: LIST
91554: LIST
91555: LIST
91556: IN
91557: IFFALSE 91681
// begin if btype = b_armoury then
91559: LD_VAR 0 5
91563: PUSH
91564: LD_INT 4
91566: EQUAL
91567: IFFALSE 91577
// btype := b_barracks ;
91569: LD_ADDR_VAR 0 5
91573: PUSH
91574: LD_INT 5
91576: ST_TO_ADDR
// if btype = b_depot then
91577: LD_VAR 0 5
91581: PUSH
91582: LD_INT 0
91584: EQUAL
91585: IFFALSE 91595
// btype := b_warehouse ;
91587: LD_ADDR_VAR 0 5
91591: PUSH
91592: LD_INT 1
91594: ST_TO_ADDR
// if btype = b_workshop then
91595: LD_VAR 0 5
91599: PUSH
91600: LD_INT 2
91602: EQUAL
91603: IFFALSE 91613
// btype := b_factory ;
91605: LD_ADDR_VAR 0 5
91609: PUSH
91610: LD_INT 3
91612: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
91613: LD_VAR 0 5
91617: PPUSH
91618: LD_VAR 0 8
91622: PPUSH
91623: CALL_OW 323
91627: PUSH
91628: LD_INT 1
91630: EQUAL
91631: IFFALSE 91677
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
91633: LD_ADDR_EXP 68
91637: PUSH
91638: LD_EXP 68
91642: PPUSH
91643: LD_VAR 0 3
91647: PUSH
91648: LD_EXP 68
91652: PUSH
91653: LD_VAR 0 3
91657: ARRAY
91658: PUSH
91659: LD_INT 1
91661: PLUS
91662: PUSH
91663: EMPTY
91664: LIST
91665: LIST
91666: PPUSH
91667: LD_VAR 0 1
91671: PPUSH
91672: CALL 26583 0 3
91676: ST_TO_ADDR
// exit ;
91677: POP
91678: POP
91679: GO 91994
// end ; if btype in [ b_bunker , b_turret ] then
91681: LD_VAR 0 5
91685: PUSH
91686: LD_INT 32
91688: PUSH
91689: LD_INT 33
91691: PUSH
91692: EMPTY
91693: LIST
91694: LIST
91695: IN
91696: IFFALSE 91986
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
91698: LD_ADDR_EXP 44
91702: PUSH
91703: LD_EXP 44
91707: PPUSH
91708: LD_VAR 0 3
91712: PUSH
91713: LD_EXP 44
91717: PUSH
91718: LD_VAR 0 3
91722: ARRAY
91723: PUSH
91724: LD_INT 1
91726: PLUS
91727: PUSH
91728: EMPTY
91729: LIST
91730: LIST
91731: PPUSH
91732: LD_VAR 0 1
91736: PPUSH
91737: CALL 26583 0 3
91741: ST_TO_ADDR
// if btype = b_bunker then
91742: LD_VAR 0 5
91746: PUSH
91747: LD_INT 32
91749: EQUAL
91750: IFFALSE 91986
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
91752: LD_ADDR_EXP 45
91756: PUSH
91757: LD_EXP 45
91761: PPUSH
91762: LD_VAR 0 3
91766: PUSH
91767: LD_EXP 45
91771: PUSH
91772: LD_VAR 0 3
91776: ARRAY
91777: PUSH
91778: LD_INT 1
91780: PLUS
91781: PUSH
91782: EMPTY
91783: LIST
91784: LIST
91785: PPUSH
91786: LD_VAR 0 1
91790: PPUSH
91791: CALL 26583 0 3
91795: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
91796: LD_ADDR_VAR 0 6
91800: PUSH
91801: LD_EXP 36
91805: PUSH
91806: LD_VAR 0 3
91810: ARRAY
91811: PPUSH
91812: LD_INT 25
91814: PUSH
91815: LD_INT 1
91817: PUSH
91818: EMPTY
91819: LIST
91820: LIST
91821: PUSH
91822: LD_INT 3
91824: PUSH
91825: LD_INT 54
91827: PUSH
91828: EMPTY
91829: LIST
91830: PUSH
91831: EMPTY
91832: LIST
91833: LIST
91834: PUSH
91835: EMPTY
91836: LIST
91837: LIST
91838: PPUSH
91839: CALL_OW 72
91843: ST_TO_ADDR
// if tmp then
91844: LD_VAR 0 6
91848: IFFALSE 91854
// exit ;
91850: POP
91851: POP
91852: GO 91994
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
91854: LD_ADDR_VAR 0 6
91858: PUSH
91859: LD_EXP 36
91863: PUSH
91864: LD_VAR 0 3
91868: ARRAY
91869: PPUSH
91870: LD_INT 2
91872: PUSH
91873: LD_INT 30
91875: PUSH
91876: LD_INT 4
91878: PUSH
91879: EMPTY
91880: LIST
91881: LIST
91882: PUSH
91883: LD_INT 30
91885: PUSH
91886: LD_INT 5
91888: PUSH
91889: EMPTY
91890: LIST
91891: LIST
91892: PUSH
91893: EMPTY
91894: LIST
91895: LIST
91896: LIST
91897: PPUSH
91898: CALL_OW 72
91902: ST_TO_ADDR
// if not tmp then
91903: LD_VAR 0 6
91907: NOT
91908: IFFALSE 91914
// exit ;
91910: POP
91911: POP
91912: GO 91994
// for j in tmp do
91914: LD_ADDR_VAR 0 4
91918: PUSH
91919: LD_VAR 0 6
91923: PUSH
91924: FOR_IN
91925: IFFALSE 91984
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
91927: LD_ADDR_VAR 0 7
91931: PUSH
91932: LD_VAR 0 4
91936: PPUSH
91937: CALL_OW 313
91941: PPUSH
91942: LD_INT 25
91944: PUSH
91945: LD_INT 1
91947: PUSH
91948: EMPTY
91949: LIST
91950: LIST
91951: PPUSH
91952: CALL_OW 72
91956: ST_TO_ADDR
// if units then
91957: LD_VAR 0 7
91961: IFFALSE 91982
// begin ComExitBuilding ( units [ 1 ] ) ;
91963: LD_VAR 0 7
91967: PUSH
91968: LD_INT 1
91970: ARRAY
91971: PPUSH
91972: CALL_OW 122
// exit ;
91976: POP
91977: POP
91978: POP
91979: POP
91980: GO 91994
// end ; end ;
91982: GO 91924
91984: POP
91985: POP
// end ; end ; exit ;
91986: POP
91987: POP
91988: GO 91994
// end ; end ;
91990: GO 91348
91992: POP
91993: POP
// end ;
91994: LD_VAR 0 2
91998: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
91999: LD_INT 0
92001: PPUSH
92002: PPUSH
92003: PPUSH
92004: PPUSH
92005: PPUSH
92006: PPUSH
92007: PPUSH
// if not mc_bases or not skirmish then
92008: LD_EXP 36
92012: NOT
92013: PUSH
92014: LD_EXP 34
92018: NOT
92019: OR
92020: IFFALSE 92024
// exit ;
92022: GO 92255
// btype := GetBType ( building ) ;
92024: LD_ADDR_VAR 0 6
92028: PUSH
92029: LD_VAR 0 1
92033: PPUSH
92034: CALL_OW 266
92038: ST_TO_ADDR
// x := GetX ( building ) ;
92039: LD_ADDR_VAR 0 7
92043: PUSH
92044: LD_VAR 0 1
92048: PPUSH
92049: CALL_OW 250
92053: ST_TO_ADDR
// y := GetY ( building ) ;
92054: LD_ADDR_VAR 0 8
92058: PUSH
92059: LD_VAR 0 1
92063: PPUSH
92064: CALL_OW 251
92068: ST_TO_ADDR
// d := GetDir ( building ) ;
92069: LD_ADDR_VAR 0 9
92073: PUSH
92074: LD_VAR 0 1
92078: PPUSH
92079: CALL_OW 254
92083: ST_TO_ADDR
// for i = 1 to mc_bases do
92084: LD_ADDR_VAR 0 4
92088: PUSH
92089: DOUBLE
92090: LD_INT 1
92092: DEC
92093: ST_TO_ADDR
92094: LD_EXP 36
92098: PUSH
92099: FOR_TO
92100: IFFALSE 92253
// begin if not mc_build_list [ i ] then
92102: LD_EXP 41
92106: PUSH
92107: LD_VAR 0 4
92111: ARRAY
92112: NOT
92113: IFFALSE 92117
// continue ;
92115: GO 92099
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
92117: LD_VAR 0 6
92121: PUSH
92122: LD_VAR 0 7
92126: PUSH
92127: LD_VAR 0 8
92131: PUSH
92132: LD_VAR 0 9
92136: PUSH
92137: EMPTY
92138: LIST
92139: LIST
92140: LIST
92141: LIST
92142: PPUSH
92143: LD_EXP 41
92147: PUSH
92148: LD_VAR 0 4
92152: ARRAY
92153: PUSH
92154: LD_INT 1
92156: ARRAY
92157: PPUSH
92158: CALL 32752 0 2
92162: IFFALSE 92251
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
92164: LD_ADDR_EXP 41
92168: PUSH
92169: LD_EXP 41
92173: PPUSH
92174: LD_VAR 0 4
92178: PPUSH
92179: LD_EXP 41
92183: PUSH
92184: LD_VAR 0 4
92188: ARRAY
92189: PPUSH
92190: LD_INT 1
92192: PPUSH
92193: CALL_OW 3
92197: PPUSH
92198: CALL_OW 1
92202: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
92203: LD_ADDR_EXP 43
92207: PUSH
92208: LD_EXP 43
92212: PPUSH
92213: LD_VAR 0 4
92217: PUSH
92218: LD_EXP 43
92222: PUSH
92223: LD_VAR 0 4
92227: ARRAY
92228: PUSH
92229: LD_INT 1
92231: PLUS
92232: PUSH
92233: EMPTY
92234: LIST
92235: LIST
92236: PPUSH
92237: LD_VAR 0 1
92241: PPUSH
92242: CALL 26583 0 3
92246: ST_TO_ADDR
// exit ;
92247: POP
92248: POP
92249: GO 92255
// end ; end ;
92251: GO 92099
92253: POP
92254: POP
// end ;
92255: LD_VAR 0 3
92259: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
92260: LD_INT 0
92262: PPUSH
92263: PPUSH
92264: PPUSH
// if not mc_bases or not skirmish then
92265: LD_EXP 36
92269: NOT
92270: PUSH
92271: LD_EXP 34
92275: NOT
92276: OR
92277: IFFALSE 92281
// exit ;
92279: GO 92471
// for i = 1 to mc_bases do
92281: LD_ADDR_VAR 0 4
92285: PUSH
92286: DOUBLE
92287: LD_INT 1
92289: DEC
92290: ST_TO_ADDR
92291: LD_EXP 36
92295: PUSH
92296: FOR_TO
92297: IFFALSE 92384
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
92299: LD_VAR 0 1
92303: PUSH
92304: LD_EXP 44
92308: PUSH
92309: LD_VAR 0 4
92313: ARRAY
92314: IN
92315: PUSH
92316: LD_VAR 0 1
92320: PUSH
92321: LD_EXP 45
92325: PUSH
92326: LD_VAR 0 4
92330: ARRAY
92331: IN
92332: NOT
92333: AND
92334: IFFALSE 92382
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
92336: LD_ADDR_EXP 45
92340: PUSH
92341: LD_EXP 45
92345: PPUSH
92346: LD_VAR 0 4
92350: PUSH
92351: LD_EXP 45
92355: PUSH
92356: LD_VAR 0 4
92360: ARRAY
92361: PUSH
92362: LD_INT 1
92364: PLUS
92365: PUSH
92366: EMPTY
92367: LIST
92368: LIST
92369: PPUSH
92370: LD_VAR 0 1
92374: PPUSH
92375: CALL 26583 0 3
92379: ST_TO_ADDR
// break ;
92380: GO 92384
// end ; end ;
92382: GO 92296
92384: POP
92385: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
92386: LD_VAR 0 1
92390: PPUSH
92391: CALL_OW 257
92395: PUSH
92396: LD_EXP 62
92400: IN
92401: PUSH
92402: LD_VAR 0 1
92406: PPUSH
92407: CALL_OW 266
92411: PUSH
92412: LD_INT 5
92414: EQUAL
92415: AND
92416: PUSH
92417: LD_VAR 0 2
92421: PPUSH
92422: CALL_OW 110
92426: PUSH
92427: LD_INT 18
92429: NONEQUAL
92430: AND
92431: IFFALSE 92471
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
92433: LD_VAR 0 2
92437: PPUSH
92438: CALL_OW 257
92442: PUSH
92443: LD_INT 5
92445: PUSH
92446: LD_INT 8
92448: PUSH
92449: LD_INT 9
92451: PUSH
92452: EMPTY
92453: LIST
92454: LIST
92455: LIST
92456: IN
92457: IFFALSE 92471
// SetClass ( unit , 1 ) ;
92459: LD_VAR 0 2
92463: PPUSH
92464: LD_INT 1
92466: PPUSH
92467: CALL_OW 336
// end ;
92471: LD_VAR 0 3
92475: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
92476: LD_INT 0
92478: PPUSH
92479: PPUSH
// if not mc_bases or not skirmish then
92480: LD_EXP 36
92484: NOT
92485: PUSH
92486: LD_EXP 34
92490: NOT
92491: OR
92492: IFFALSE 92496
// exit ;
92494: GO 92612
// if GetLives ( abandoned_vehicle ) > 250 then
92496: LD_VAR 0 2
92500: PPUSH
92501: CALL_OW 256
92505: PUSH
92506: LD_INT 250
92508: GREATER
92509: IFFALSE 92513
// exit ;
92511: GO 92612
// for i = 1 to mc_bases do
92513: LD_ADDR_VAR 0 6
92517: PUSH
92518: DOUBLE
92519: LD_INT 1
92521: DEC
92522: ST_TO_ADDR
92523: LD_EXP 36
92527: PUSH
92528: FOR_TO
92529: IFFALSE 92610
// begin if driver in mc_bases [ i ] then
92531: LD_VAR 0 1
92535: PUSH
92536: LD_EXP 36
92540: PUSH
92541: LD_VAR 0 6
92545: ARRAY
92546: IN
92547: IFFALSE 92608
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
92549: LD_VAR 0 1
92553: PPUSH
92554: LD_EXP 36
92558: PUSH
92559: LD_VAR 0 6
92563: ARRAY
92564: PPUSH
92565: LD_INT 2
92567: PUSH
92568: LD_INT 30
92570: PUSH
92571: LD_INT 0
92573: PUSH
92574: EMPTY
92575: LIST
92576: LIST
92577: PUSH
92578: LD_INT 30
92580: PUSH
92581: LD_INT 1
92583: PUSH
92584: EMPTY
92585: LIST
92586: LIST
92587: PUSH
92588: EMPTY
92589: LIST
92590: LIST
92591: LIST
92592: PPUSH
92593: CALL_OW 72
92597: PUSH
92598: LD_INT 1
92600: ARRAY
92601: PPUSH
92602: CALL_OW 112
// break ;
92606: GO 92610
// end ; end ;
92608: GO 92528
92610: POP
92611: POP
// end ; end_of_file end_of_file end_of_file
92612: LD_VAR 0 5
92616: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
92617: LD_INT 0
92619: PPUSH
92620: PPUSH
92621: PPUSH
92622: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
92623: LD_VAR 0 1
92627: PPUSH
92628: CALL_OW 264
92632: PUSH
92633: LD_EXP 33
92637: EQUAL
92638: IFFALSE 92710
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
92640: LD_INT 68
92642: PPUSH
92643: LD_VAR 0 1
92647: PPUSH
92648: CALL_OW 255
92652: PPUSH
92653: CALL_OW 321
92657: PUSH
92658: LD_INT 2
92660: EQUAL
92661: IFFALSE 92673
// eff := 70 else
92663: LD_ADDR_VAR 0 6
92667: PUSH
92668: LD_INT 70
92670: ST_TO_ADDR
92671: GO 92681
// eff := 30 ;
92673: LD_ADDR_VAR 0 6
92677: PUSH
92678: LD_INT 30
92680: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
92681: LD_VAR 0 1
92685: PPUSH
92686: CALL_OW 250
92690: PPUSH
92691: LD_VAR 0 1
92695: PPUSH
92696: CALL_OW 251
92700: PPUSH
92701: LD_VAR 0 6
92705: PPUSH
92706: CALL_OW 495
// end ; end ;
92710: LD_VAR 0 4
92714: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
92715: LD_INT 0
92717: PPUSH
92718: PPUSH
92719: PPUSH
92720: PPUSH
92721: PPUSH
92722: PPUSH
// if cmd = 124 then
92723: LD_VAR 0 1
92727: PUSH
92728: LD_INT 124
92730: EQUAL
92731: IFFALSE 92937
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
92733: LD_ADDR_VAR 0 5
92737: PUSH
92738: LD_INT 2
92740: PUSH
92741: LD_INT 34
92743: PUSH
92744: LD_INT 53
92746: PUSH
92747: EMPTY
92748: LIST
92749: LIST
92750: PUSH
92751: LD_INT 34
92753: PUSH
92754: LD_INT 14
92756: PUSH
92757: EMPTY
92758: LIST
92759: LIST
92760: PUSH
92761: EMPTY
92762: LIST
92763: LIST
92764: LIST
92765: PPUSH
92766: CALL_OW 69
92770: ST_TO_ADDR
// if not tmp then
92771: LD_VAR 0 5
92775: NOT
92776: IFFALSE 92780
// exit ;
92778: GO 92937
// for i in tmp do
92780: LD_ADDR_VAR 0 3
92784: PUSH
92785: LD_VAR 0 5
92789: PUSH
92790: FOR_IN
92791: IFFALSE 92935
// begin taskList := GetTaskList ( i ) ;
92793: LD_ADDR_VAR 0 6
92797: PUSH
92798: LD_VAR 0 3
92802: PPUSH
92803: CALL_OW 437
92807: ST_TO_ADDR
// if not taskList then
92808: LD_VAR 0 6
92812: NOT
92813: IFFALSE 92817
// continue ;
92815: GO 92790
// for j = 1 to taskList do
92817: LD_ADDR_VAR 0 4
92821: PUSH
92822: DOUBLE
92823: LD_INT 1
92825: DEC
92826: ST_TO_ADDR
92827: LD_VAR 0 6
92831: PUSH
92832: FOR_TO
92833: IFFALSE 92931
// if taskList [ j ] [ 1 ] = | then
92835: LD_VAR 0 6
92839: PUSH
92840: LD_VAR 0 4
92844: ARRAY
92845: PUSH
92846: LD_INT 1
92848: ARRAY
92849: PUSH
92850: LD_STRING |
92852: EQUAL
92853: IFFALSE 92929
// begin _taskList := Delete ( taskList , 1 ) ;
92855: LD_ADDR_VAR 0 7
92859: PUSH
92860: LD_VAR 0 6
92864: PPUSH
92865: LD_INT 1
92867: PPUSH
92868: CALL_OW 3
92872: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
92873: LD_VAR 0 3
92877: PPUSH
92878: LD_VAR 0 7
92882: PPUSH
92883: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
92887: LD_VAR 0 3
92891: PPUSH
92892: LD_VAR 0 6
92896: PUSH
92897: LD_VAR 0 4
92901: ARRAY
92902: PUSH
92903: LD_INT 2
92905: ARRAY
92906: PPUSH
92907: LD_VAR 0 6
92911: PUSH
92912: LD_VAR 0 4
92916: ARRAY
92917: PUSH
92918: LD_INT 3
92920: ARRAY
92921: PPUSH
92922: LD_INT 8
92924: PPUSH
92925: CALL 92942 0 4
// end ;
92929: GO 92832
92931: POP
92932: POP
// end ;
92933: GO 92790
92935: POP
92936: POP
// end ; end ;
92937: LD_VAR 0 2
92941: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
92942: LD_INT 0
92944: PPUSH
92945: PPUSH
92946: PPUSH
92947: PPUSH
92948: PPUSH
92949: PPUSH
92950: PPUSH
92951: PPUSH
92952: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
92953: LD_VAR 0 1
92957: NOT
92958: PUSH
92959: LD_VAR 0 2
92963: PPUSH
92964: LD_VAR 0 3
92968: PPUSH
92969: CALL_OW 488
92973: NOT
92974: OR
92975: PUSH
92976: LD_VAR 0 4
92980: NOT
92981: OR
92982: IFFALSE 92986
// exit ;
92984: GO 93326
// list := [ ] ;
92986: LD_ADDR_VAR 0 13
92990: PUSH
92991: EMPTY
92992: ST_TO_ADDR
// if x - r < 0 then
92993: LD_VAR 0 2
92997: PUSH
92998: LD_VAR 0 4
93002: MINUS
93003: PUSH
93004: LD_INT 0
93006: LESS
93007: IFFALSE 93019
// min_x := 0 else
93009: LD_ADDR_VAR 0 7
93013: PUSH
93014: LD_INT 0
93016: ST_TO_ADDR
93017: GO 93035
// min_x := x - r ;
93019: LD_ADDR_VAR 0 7
93023: PUSH
93024: LD_VAR 0 2
93028: PUSH
93029: LD_VAR 0 4
93033: MINUS
93034: ST_TO_ADDR
// if y - r < 0 then
93035: LD_VAR 0 3
93039: PUSH
93040: LD_VAR 0 4
93044: MINUS
93045: PUSH
93046: LD_INT 0
93048: LESS
93049: IFFALSE 93061
// min_y := 0 else
93051: LD_ADDR_VAR 0 8
93055: PUSH
93056: LD_INT 0
93058: ST_TO_ADDR
93059: GO 93077
// min_y := y - r ;
93061: LD_ADDR_VAR 0 8
93065: PUSH
93066: LD_VAR 0 3
93070: PUSH
93071: LD_VAR 0 4
93075: MINUS
93076: ST_TO_ADDR
// max_x := x + r ;
93077: LD_ADDR_VAR 0 9
93081: PUSH
93082: LD_VAR 0 2
93086: PUSH
93087: LD_VAR 0 4
93091: PLUS
93092: ST_TO_ADDR
// max_y := y + r ;
93093: LD_ADDR_VAR 0 10
93097: PUSH
93098: LD_VAR 0 3
93102: PUSH
93103: LD_VAR 0 4
93107: PLUS
93108: ST_TO_ADDR
// for _x = min_x to max_x do
93109: LD_ADDR_VAR 0 11
93113: PUSH
93114: DOUBLE
93115: LD_VAR 0 7
93119: DEC
93120: ST_TO_ADDR
93121: LD_VAR 0 9
93125: PUSH
93126: FOR_TO
93127: IFFALSE 93244
// for _y = min_y to max_y do
93129: LD_ADDR_VAR 0 12
93133: PUSH
93134: DOUBLE
93135: LD_VAR 0 8
93139: DEC
93140: ST_TO_ADDR
93141: LD_VAR 0 10
93145: PUSH
93146: FOR_TO
93147: IFFALSE 93240
// begin if not ValidHex ( _x , _y ) then
93149: LD_VAR 0 11
93153: PPUSH
93154: LD_VAR 0 12
93158: PPUSH
93159: CALL_OW 488
93163: NOT
93164: IFFALSE 93168
// continue ;
93166: GO 93146
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
93168: LD_VAR 0 11
93172: PPUSH
93173: LD_VAR 0 12
93177: PPUSH
93178: CALL_OW 351
93182: PUSH
93183: LD_VAR 0 11
93187: PPUSH
93188: LD_VAR 0 12
93192: PPUSH
93193: CALL_OW 554
93197: AND
93198: IFFALSE 93238
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
93200: LD_ADDR_VAR 0 13
93204: PUSH
93205: LD_VAR 0 13
93209: PPUSH
93210: LD_VAR 0 13
93214: PUSH
93215: LD_INT 1
93217: PLUS
93218: PPUSH
93219: LD_VAR 0 11
93223: PUSH
93224: LD_VAR 0 12
93228: PUSH
93229: EMPTY
93230: LIST
93231: LIST
93232: PPUSH
93233: CALL_OW 2
93237: ST_TO_ADDR
// end ;
93238: GO 93146
93240: POP
93241: POP
93242: GO 93126
93244: POP
93245: POP
// if not list then
93246: LD_VAR 0 13
93250: NOT
93251: IFFALSE 93255
// exit ;
93253: GO 93326
// for i in list do
93255: LD_ADDR_VAR 0 6
93259: PUSH
93260: LD_VAR 0 13
93264: PUSH
93265: FOR_IN
93266: IFFALSE 93324
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
93268: LD_VAR 0 1
93272: PPUSH
93273: LD_STRING M
93275: PUSH
93276: LD_VAR 0 6
93280: PUSH
93281: LD_INT 1
93283: ARRAY
93284: PUSH
93285: LD_VAR 0 6
93289: PUSH
93290: LD_INT 2
93292: ARRAY
93293: PUSH
93294: LD_INT 0
93296: PUSH
93297: LD_INT 0
93299: PUSH
93300: LD_INT 0
93302: PUSH
93303: LD_INT 0
93305: PUSH
93306: EMPTY
93307: LIST
93308: LIST
93309: LIST
93310: LIST
93311: LIST
93312: LIST
93313: LIST
93314: PUSH
93315: EMPTY
93316: LIST
93317: PPUSH
93318: CALL_OW 447
93322: GO 93265
93324: POP
93325: POP
// end ;
93326: LD_VAR 0 5
93330: RET
