// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitSettings ;
  11: CALL 51 0 0
// if debug then
  15: LD_EXP 1
  19: IFFALSE 38
// begin PlaceSeeing ( 1 , 1 , 1 , - 372963 ) ;
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 372963
  32: NEG
  33: PPUSH
  34: CALL_OW 330
// end ; SetTechnologies ;
  38: CALL 602 0 0
// SetDiplomacy ;
  42: CALL 814 0 0
// PrepareGame ;
  46: CALL 896 0 0
// end ;
  50: END
// export debug , GameType , game , disableGlobalTimer ; export mc_amer , mc_leg , mc_rus_1 , mc_rus_2 ; export playerCommander , playerForces , allyCommander , Powell , Farmer , ruOutpost , ruEscape , staticMines , baseCaptured , legDestCounter , cratesSpawns , legOfferAccepted , legChangeSide , allyDestCounter , sibBombAllowed , reinforceAllowed , commander , cratesSpawn , outpostEscape , dialogueMineDetected ; end_of_file export function InitSettings ; begin
  51: LD_INT 0
  53: PPUSH
// debug := 0 ;
  54: LD_ADDR_EXP 1
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// GameType := 1 ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 1
  69: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  70: LD_ADDR_OWVAR 67
  74: PUSH
  75: LD_INT 0
  77: PPUSH
  78: CALL_OW 426
  82: ST_TO_ADDR
// sibBombAllowed := GetMultiPlayerSetting ( 1 ) - 1 ;
  83: LD_ADDR_EXP 23
  87: PUSH
  88: LD_INT 1
  90: PPUSH
  91: CALL_OW 426
  95: PUSH
  96: LD_INT 1
  98: MINUS
  99: ST_TO_ADDR
// reinforceAllowed := GetMultiPlayerSetting ( 2 ) - 1 ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: LD_INT 2
 107: PPUSH
 108: CALL_OW 426
 112: PUSH
 113: LD_INT 1
 115: MINUS
 116: ST_TO_ADDR
// cratesSpawn := GetMultiPlayerSetting ( 3 ) ;
 117: LD_ADDR_EXP 26
 121: PUSH
 122: LD_INT 3
 124: PPUSH
 125: CALL_OW 426
 129: ST_TO_ADDR
// commander := GetMultiPlayerSetting ( 4 ) ;
 130: LD_ADDR_EXP 25
 134: PUSH
 135: LD_INT 4
 137: PPUSH
 138: CALL_OW 426
 142: ST_TO_ADDR
// if not commander then
 143: LD_EXP 25
 147: NOT
 148: IFFALSE 158
// commander := 3 ;
 150: LD_ADDR_EXP 25
 154: PUSH
 155: LD_INT 3
 157: ST_TO_ADDR
// if not debug then
 158: LD_EXP 1
 162: NOT
 163: IFFALSE 167
// exit ;
 165: GO 224
// display_strings := [ Difficulty:  & Difficulty , sibBomb:  & sibBombAllowed , reinforceAllowed:  & reinforceAllowed , cratesSpawn:  & cratesSpawn , commander:  & commander ] ;
 167: LD_ADDR_OWVAR 47
 171: PUSH
 172: LD_STRING Difficulty: 
 174: PUSH
 175: LD_OWVAR 67
 179: STR
 180: PUSH
 181: LD_STRING sibBomb: 
 183: PUSH
 184: LD_EXP 23
 188: STR
 189: PUSH
 190: LD_STRING reinforceAllowed: 
 192: PUSH
 193: LD_EXP 24
 197: STR
 198: PUSH
 199: LD_STRING cratesSpawn: 
 201: PUSH
 202: LD_EXP 26
 206: STR
 207: PUSH
 208: LD_STRING commander: 
 210: PUSH
 211: LD_EXP 25
 215: STR
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// every 0 0$1 trigger game and GameType = 1 and not disableGlobalTimer do
 229: LD_EXP 3
 233: PUSH
 234: LD_EXP 2
 238: PUSH
 239: LD_INT 1
 241: EQUAL
 242: AND
 243: PUSH
 244: LD_EXP 4
 248: NOT
 249: AND
 250: IFFALSE 273
 252: GO 254
 254: DISABLE
// begin enable ;
 255: ENABLE
// display_strings := [ #SkrTime , tick ] ;
 256: LD_ADDR_OWVAR 47
 260: PUSH
 261: LD_STRING #SkrTime
 263: PUSH
 264: LD_OWVAR 1
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// end ;
 273: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 274: LD_EXP 19
 278: PUSH
 279: LD_EXP 3
 283: AND
 284: PUSH
 285: LD_EXP 2
 289: PUSH
 290: LD_INT 1
 292: EQUAL
 293: AND
 294: IFFALSE 355
 296: GO 298
 298: DISABLE
// Crates ( cratesSpawns [ 1 ] [ 1 ] , cratesSpawns [ 1 ] [ 2 ] , cratesSpawns [ 1 ] [ 3 ] , cratesSpawns [ 1 ] [ 4 ] ) ;
 299: LD_EXP 19
 303: PUSH
 304: LD_INT 1
 306: ARRAY
 307: PUSH
 308: LD_INT 1
 310: ARRAY
 311: PPUSH
 312: LD_EXP 19
 316: PUSH
 317: LD_INT 1
 319: ARRAY
 320: PUSH
 321: LD_INT 2
 323: ARRAY
 324: PPUSH
 325: LD_EXP 19
 329: PUSH
 330: LD_INT 1
 332: ARRAY
 333: PUSH
 334: LD_INT 3
 336: ARRAY
 337: PPUSH
 338: LD_EXP 19
 342: PUSH
 343: LD_INT 1
 345: ARRAY
 346: PUSH
 347: LD_INT 4
 349: ARRAY
 350: PPUSH
 351: CALL 55435 0 4
 355: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 356: LD_EXP 19
 360: PUSH
 361: LD_EXP 3
 365: AND
 366: PUSH
 367: LD_EXP 2
 371: PUSH
 372: LD_INT 1
 374: EQUAL
 375: AND
 376: IFFALSE 437
 378: GO 380
 380: DISABLE
// Crates ( cratesSpawns [ 2 ] [ 1 ] , cratesSpawns [ 2 ] [ 2 ] , cratesSpawns [ 2 ] [ 3 ] , cratesSpawns [ 2 ] [ 4 ] ) ;
 381: LD_EXP 19
 385: PUSH
 386: LD_INT 2
 388: ARRAY
 389: PUSH
 390: LD_INT 1
 392: ARRAY
 393: PPUSH
 394: LD_EXP 19
 398: PUSH
 399: LD_INT 2
 401: ARRAY
 402: PUSH
 403: LD_INT 2
 405: ARRAY
 406: PPUSH
 407: LD_EXP 19
 411: PUSH
 412: LD_INT 2
 414: ARRAY
 415: PUSH
 416: LD_INT 3
 418: ARRAY
 419: PPUSH
 420: LD_EXP 19
 424: PUSH
 425: LD_INT 2
 427: ARRAY
 428: PUSH
 429: LD_INT 4
 431: ARRAY
 432: PPUSH
 433: CALL 55435 0 4
 437: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 438: LD_EXP 19
 442: PUSH
 443: LD_EXP 3
 447: AND
 448: PUSH
 449: LD_EXP 2
 453: PUSH
 454: LD_INT 1
 456: EQUAL
 457: AND
 458: IFFALSE 519
 460: GO 462
 462: DISABLE
// Crates ( cratesSpawns [ 3 ] [ 1 ] , cratesSpawns [ 3 ] [ 2 ] , cratesSpawns [ 3 ] [ 3 ] , cratesSpawns [ 3 ] [ 4 ] ) ;
 463: LD_EXP 19
 467: PUSH
 468: LD_INT 3
 470: ARRAY
 471: PUSH
 472: LD_INT 1
 474: ARRAY
 475: PPUSH
 476: LD_EXP 19
 480: PUSH
 481: LD_INT 3
 483: ARRAY
 484: PUSH
 485: LD_INT 2
 487: ARRAY
 488: PPUSH
 489: LD_EXP 19
 493: PUSH
 494: LD_INT 3
 496: ARRAY
 497: PUSH
 498: LD_INT 3
 500: ARRAY
 501: PPUSH
 502: LD_EXP 19
 506: PUSH
 507: LD_INT 3
 509: ARRAY
 510: PUSH
 511: LD_INT 4
 513: ARRAY
 514: PPUSH
 515: CALL 55435 0 4
 519: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 520: LD_EXP 19
 524: PUSH
 525: LD_EXP 3
 529: AND
 530: PUSH
 531: LD_EXP 2
 535: PUSH
 536: LD_INT 1
 538: EQUAL
 539: AND
 540: IFFALSE 601
 542: GO 544
 544: DISABLE
// Crates ( cratesSpawns [ 4 ] [ 1 ] , cratesSpawns [ 4 ] [ 2 ] , cratesSpawns [ 4 ] [ 3 ] , cratesSpawns [ 4 ] [ 4 ] ) ;
 545: LD_EXP 19
 549: PUSH
 550: LD_INT 4
 552: ARRAY
 553: PUSH
 554: LD_INT 1
 556: ARRAY
 557: PPUSH
 558: LD_EXP 19
 562: PUSH
 563: LD_INT 4
 565: ARRAY
 566: PUSH
 567: LD_INT 2
 569: ARRAY
 570: PPUSH
 571: LD_EXP 19
 575: PUSH
 576: LD_INT 4
 578: ARRAY
 579: PUSH
 580: LD_INT 3
 582: ARRAY
 583: PPUSH
 584: LD_EXP 19
 588: PUSH
 589: LD_INT 4
 591: ARRAY
 592: PUSH
 593: LD_INT 4
 595: ARRAY
 596: PPUSH
 597: CALL 55435 0 4
 601: END
// export function SetTechnologies ; var i , j , ban_techs , res_techs ; begin
 602: LD_INT 0
 604: PPUSH
 605: PPUSH
 606: PPUSH
 607: PPUSH
 608: PPUSH
// if GameType = 1 then
 609: LD_EXP 2
 613: PUSH
 614: LD_INT 1
 616: EQUAL
 617: IFFALSE 686
// begin ban_techs := [ ] ;
 619: LD_ADDR_VAR 0 4
 623: PUSH
 624: EMPTY
 625: ST_TO_ADDR
// if sibBombAllowed < 2 then
 626: LD_EXP 23
 630: PUSH
 631: LD_INT 2
 633: LESS
 634: IFFALSE 647
// ban_techs := [ tech_sibFiss ] ;
 636: LD_ADDR_VAR 0 4
 640: PUSH
 641: LD_INT 25
 643: PUSH
 644: EMPTY
 645: LIST
 646: ST_TO_ADDR
// res_techs := [ tech_oilPow , tech_oilEng , tech_tech1 , tech_tech2 , tech_tech3 , tech_gun , tech_gatling , tech_rocket ] ;
 647: LD_ADDR_VAR 0 5
 651: PUSH
 652: LD_INT 46
 654: PUSH
 655: LD_INT 47
 657: PUSH
 658: LD_INT 48
 660: PUSH
 661: LD_INT 49
 663: PUSH
 664: LD_INT 50
 666: PUSH
 667: LD_INT 39
 669: PUSH
 670: LD_INT 69
 672: PUSH
 673: LD_INT 40
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: ST_TO_ADDR
// end ; for i = 1 to 8 do
 686: LD_ADDR_VAR 0 2
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 8
 698: PUSH
 699: FOR_TO
 700: IFFALSE 784
// begin if res_techs then
 702: LD_VAR 0 5
 706: IFFALSE 742
// for j in res_techs do
 708: LD_ADDR_VAR 0 3
 712: PUSH
 713: LD_VAR 0 5
 717: PUSH
 718: FOR_IN
 719: IFFALSE 740
// SetTech ( j , i , state_researched ) ;
 721: LD_VAR 0 3
 725: PPUSH
 726: LD_VAR 0 2
 730: PPUSH
 731: LD_INT 2
 733: PPUSH
 734: CALL_OW 322
 738: GO 718
 740: POP
 741: POP
// if ban_techs then
 742: LD_VAR 0 4
 746: IFFALSE 782
// for j in ban_techs do
 748: LD_ADDR_VAR 0 3
 752: PUSH
 753: LD_VAR 0 4
 757: PUSH
 758: FOR_IN
 759: IFFALSE 780
// SetTech ( j , i , state_disabled ) ;
 761: LD_VAR 0 3
 765: PPUSH
 766: LD_VAR 0 2
 770: PPUSH
 771: LD_INT 0
 773: PPUSH
 774: CALL_OW 322
 778: GO 758
 780: POP
 781: POP
// end ;
 782: GO 699
 784: POP
 785: POP
// if sibBombAllowed = 1 then
 786: LD_EXP 23
 790: PUSH
 791: LD_INT 1
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_sibFiss , 3 , state_enabled ) ;
 796: LD_INT 25
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 1
 804: PPUSH
 805: CALL_OW 322
// end ;
 809: LD_VAR 0 1
 813: RET
// export function SetDiplomacy ; begin
 814: LD_INT 0
 816: PPUSH
// if GameType = 1 then
 817: LD_EXP 2
 821: PUSH
 822: LD_INT 1
 824: EQUAL
 825: IFFALSE 891
// begin SetAttitude ( 1 , 4 , att_friend , true ) ;
 827: LD_INT 1
 829: PPUSH
 830: LD_INT 4
 832: PPUSH
 833: LD_INT 1
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 843: LD_INT 3
 845: PPUSH
 846: LD_INT 6
 848: PPUSH
 849: LD_INT 1
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL_OW 80
// SetAttitude ( 3 , 8 , att_friend , true ) ;
 859: LD_INT 3
 861: PPUSH
 862: LD_INT 8
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: CALL_OW 80
// SetAttitude ( 6 , 8 , att_friend , true ) ;
 875: LD_INT 6
 877: PPUSH
 878: LD_INT 8
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 80
// end ; end ;
 891: LD_VAR 0 1
 895: RET
// export function PrepareGame ; var i , tmp , sources ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
// if GameType = 1 then
 902: LD_EXP 2
 906: PUSH
 907: LD_INT 1
 909: EQUAL
 910: IFFALSE 1402
// begin game := false ;
 912: LD_ADDR_EXP 3
 916: PUSH
 917: LD_INT 0
 919: ST_TO_ADDR
// your_side := 1 ;
 920: LD_ADDR_OWVAR 2
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// mc_amer := 1 ;
 928: LD_ADDR_EXP 5
 932: PUSH
 933: LD_INT 1
 935: ST_TO_ADDR
// mc_leg := 2 ;
 936: LD_ADDR_EXP 6
 940: PUSH
 941: LD_INT 2
 943: ST_TO_ADDR
// mc_rus_1 := 3 ;
 944: LD_ADDR_EXP 7
 948: PUSH
 949: LD_INT 3
 951: ST_TO_ADDR
// mc_rus_2 := 4 ;
 952: LD_ADDR_EXP 8
 956: PUSH
 957: LD_INT 4
 959: ST_TO_ADDR
// cratesSpawns := [ [ amerCrates , 1 , 0 , [ 200 , 250 , 300 ] [ cratesSpawn ] ] , [ rusCrates , 8 , 50 , 500 ] , [ legCrates , 5 , 50 , 300 ] , [ playerCrates , [ 4 , 5 , 6 ] [ cratesSpawn ] , 30 , [ 300 , 450 , 500 ] [ cratesSpawn ] ] ] ;
 960: LD_ADDR_EXP 19
 964: PUSH
 965: LD_INT 5
 967: PUSH
 968: LD_INT 1
 970: PUSH
 971: LD_INT 0
 973: PUSH
 974: LD_INT 200
 976: PUSH
 977: LD_INT 250
 979: PUSH
 980: LD_INT 300
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: LIST
 987: PUSH
 988: LD_EXP 26
 992: ARRAY
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 13
1002: PUSH
1003: LD_INT 8
1005: PUSH
1006: LD_INT 50
1008: PUSH
1009: LD_INT 500
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 17
1020: PUSH
1021: LD_INT 5
1023: PUSH
1024: LD_INT 50
1026: PUSH
1027: LD_INT 300
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: LD_INT 18
1038: PUSH
1039: LD_INT 4
1041: PUSH
1042: LD_INT 5
1044: PUSH
1045: LD_INT 6
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_EXP 26
1057: ARRAY
1058: PUSH
1059: LD_INT 30
1061: PUSH
1062: LD_INT 300
1064: PUSH
1065: LD_INT 450
1067: PUSH
1068: LD_INT 500
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_EXP 26
1080: ARRAY
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: ST_TO_ADDR
// sources := [ [ 190 , 193 , mat_siberit ] , [ 182 , 117 , mat_siberit ] , [ 43 , 2 , mat_siberit ] , [ 114 , 152 , mat_oil ] , [ 85 , 38 , mat_oil ] ] ;
1094: LD_ADDR_VAR 0 4
1098: PUSH
1099: LD_INT 190
1101: PUSH
1102: LD_INT 193
1104: PUSH
1105: LD_INT 3
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_INT 182
1115: PUSH
1116: LD_INT 117
1118: PUSH
1119: LD_INT 3
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_INT 43
1129: PUSH
1130: LD_INT 2
1132: PUSH
1133: LD_INT 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_INT 114
1143: PUSH
1144: LD_INT 152
1146: PUSH
1147: LD_INT 2
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: PUSH
1155: LD_INT 85
1157: PUSH
1158: LD_INT 38
1160: PUSH
1161: LD_INT 2
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: ST_TO_ADDR
// for i in sources do
1176: LD_ADDR_VAR 0 2
1180: PUSH
1181: LD_VAR 0 4
1185: PUSH
1186: FOR_IN
1187: IFFALSE 1222
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
1189: LD_VAR 0 2
1193: PUSH
1194: LD_INT 1
1196: ARRAY
1197: PPUSH
1198: LD_VAR 0 2
1202: PUSH
1203: LD_INT 2
1205: ARRAY
1206: PPUSH
1207: LD_VAR 0 2
1211: PUSH
1212: LD_INT 3
1214: ARRAY
1215: PPUSH
1216: CALL_OW 62
1220: GO 1186
1222: POP
1223: POP
// disableGlobalTimer := false ;
1224: LD_ADDR_EXP 4
1228: PUSH
1229: LD_INT 0
1231: ST_TO_ADDR
// ruEscape := [ 0 , [ 5 , 6 , 7 ] [ Difficulty ] ] ;
1232: LD_ADDR_EXP 15
1236: PUSH
1237: LD_INT 0
1239: PUSH
1240: LD_INT 5
1242: PUSH
1243: LD_INT 6
1245: PUSH
1246: LD_INT 7
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: PUSH
1254: LD_OWVAR 67
1258: ARRAY
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: ST_TO_ADDR
// ruOutpost := [ ] ;
1264: LD_ADDR_EXP 14
1268: PUSH
1269: EMPTY
1270: ST_TO_ADDR
// staticMines := [ ] ;
1271: LD_ADDR_EXP 16
1275: PUSH
1276: EMPTY
1277: ST_TO_ADDR
// baseCaptured := false ;
1278: LD_ADDR_EXP 17
1282: PUSH
1283: LD_INT 0
1285: ST_TO_ADDR
// legDestCounter := 0 ;
1286: LD_ADDR_EXP 18
1290: PUSH
1291: LD_INT 0
1293: ST_TO_ADDR
// legOfferAccepted := false ;
1294: LD_ADDR_EXP 20
1298: PUSH
1299: LD_INT 0
1301: ST_TO_ADDR
// legChangeSide := false ;
1302: LD_ADDR_EXP 21
1306: PUSH
1307: LD_INT 0
1309: ST_TO_ADDR
// allyDestCounter := 0 ;
1310: LD_ADDR_EXP 22
1314: PUSH
1315: LD_INT 0
1317: ST_TO_ADDR
// outpostEscape := false ;
1318: LD_ADDR_EXP 27
1322: PUSH
1323: LD_INT 0
1325: ST_TO_ADDR
// dialogueMineDetected := false ;
1326: LD_ADDR_EXP 28
1330: PUSH
1331: LD_INT 0
1333: ST_TO_ADDR
// PrepareAmericans ;
1334: CALL 7271 0 0
// PrepareLegion ;
1338: CALL 5536 0 0
// PrepareRussians ;
1342: CALL 2502 0 0
// playerForces := PreparePlayer ;
1346: LD_ADDR_EXP 10
1350: PUSH
1351: CALL 8514 0 0
1355: ST_TO_ADDR
// AnimateTrees ( true ) ;
1356: LD_INT 1
1358: PPUSH
1359: CALL_OW 573
// PrepareNature ( 4 , 3 , 8 , 5 , 3 , 1 , 8 , natureGroundArea , natureWaterArea ) ;
1363: LD_INT 4
1365: PPUSH
1366: LD_INT 3
1368: PPUSH
1369: LD_INT 8
1371: PPUSH
1372: LD_INT 5
1374: PPUSH
1375: LD_INT 3
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 8
1383: PPUSH
1384: LD_INT 2
1386: PPUSH
1387: LD_INT 1
1389: PPUSH
1390: CALL 52740 0 9
// MC_Start ;
1394: CALL 60183 0 0
// Action ;
1398: CALL 10710 0 0
// end ; end ;
1402: LD_VAR 0 1
1406: RET
// export function CustomInitMacro ; begin
1407: LD_INT 0
1409: PPUSH
// if GameType <> 1 then
1410: LD_EXP 2
1414: PUSH
1415: LD_INT 1
1417: NONEQUAL
1418: IFFALSE 1422
// exit ;
1420: GO 2497
// MC_SetScanArea ( mc_amer , amerBase ) ;
1422: LD_EXP 5
1426: PPUSH
1427: LD_INT 3
1429: PPUSH
1430: CALL 83210 0 2
// MC_SetParkingArea ( mc_amer , amerParking ) ;
1434: LD_EXP 5
1438: PPUSH
1439: LD_INT 4
1441: PPUSH
1442: CALL 83154 0 2
// MC_SetAllowedTurretWeapons ( mc_amer , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1446: LD_EXP 5
1450: PPUSH
1451: LD_INT 11
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 7
1459: PUSH
1460: LD_INT 9
1462: PUSH
1463: LD_INT 10
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PPUSH
1473: CALL 83042 0 2
// MC_SetCratesArea ( mc_amer , amerCrates ) ;
1477: LD_EXP 5
1481: PPUSH
1482: LD_INT 5
1484: PPUSH
1485: CALL 82724 0 2
// MC_SetTame ( mc_amer , amerBase ) ;
1489: LD_EXP 5
1493: PPUSH
1494: LD_INT 3
1496: PPUSH
1497: CALL 82455 0 2
// MC_SetDefenderLimit ( mc_amer , 4 ) ;
1501: LD_EXP 5
1505: PPUSH
1506: LD_INT 4
1508: PPUSH
1509: CALL 82074 0 2
// MC_SetProduceList ( mc_amer , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_solar , control_remote , us_laser ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , ] ) ;
1513: LD_EXP 5
1517: PPUSH
1518: LD_INT 3
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 2
1526: PUSH
1527: LD_INT 5
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: PUSH
1536: LD_INT 3
1538: PUSH
1539: LD_INT 2
1541: PUSH
1542: LD_INT 2
1544: PUSH
1545: LD_INT 9
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: PUSH
1554: LD_INT 4
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: LD_INT 2
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 4
1574: PUSH
1575: LD_INT 1
1577: PUSH
1578: LD_INT 2
1580: PUSH
1581: LD_INT 6
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: PPUSH
1596: CALL 81889 0 2
// MC_SetBuildingList ( mc_amer , [ [ b_turret , 114 , 16 , 0 ] , [ b_bunker , 110 , 12 , 0 ] ] ) ;
1600: LD_EXP 5
1604: PPUSH
1605: LD_INT 33
1607: PUSH
1608: LD_INT 114
1610: PUSH
1611: LD_INT 16
1613: PUSH
1614: LD_INT 0
1616: PUSH
1617: EMPTY
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: PUSH
1623: LD_INT 32
1625: PUSH
1626: LD_INT 110
1628: PUSH
1629: LD_INT 12
1631: PUSH
1632: LD_INT 0
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PPUSH
1645: CALL 81781 0 2
// MC_SetLabKind ( mc_amer , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1649: LD_EXP 5
1653: PPUSH
1654: LD_INT 10
1656: PUSH
1657: LD_INT 15
1659: PUSH
1660: LD_INT 12
1662: PUSH
1663: LD_INT 11
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: PPUSH
1672: CALL 82631 0 2
// MC_SetScanArea ( mc_leg , legBase ) ;
1676: LD_EXP 6
1680: PPUSH
1681: LD_INT 6
1683: PPUSH
1684: CALL 83210 0 2
// MC_SetParkingArea ( mc_leg , legParking ) ;
1688: LD_EXP 6
1692: PPUSH
1693: LD_INT 7
1695: PPUSH
1696: CALL 83154 0 2
// MC_SetAllowedTurretWeapons ( mc_leg , [ ar_radar , ar_gun , ar_rocket_launcher , ar_gatling_gun ] ) ;
1700: LD_EXP 6
1704: PPUSH
1705: LD_INT 30
1707: PUSH
1708: LD_INT 27
1710: PUSH
1711: LD_INT 28
1713: PUSH
1714: LD_INT 25
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: PPUSH
1723: CALL 83042 0 2
// MC_SetCratesArea ( mc_leg , legCrates ) ;
1727: LD_EXP 6
1731: PPUSH
1732: LD_INT 17
1734: PPUSH
1735: CALL 82724 0 2
// MC_SetTame ( mc_leg , legBase ) ;
1739: LD_EXP 6
1743: PPUSH
1744: LD_INT 6
1746: PPUSH
1747: CALL 82455 0 2
// MC_SetDefenderLimit ( mc_leg , 5 ) ;
1751: LD_EXP 6
1755: PPUSH
1756: LD_INT 5
1758: PPUSH
1759: CALL 82074 0 2
// MC_SetMinesField ( mc_leg , 10 , legMines ) ;
1763: LD_EXP 6
1767: PPUSH
1768: LD_INT 10
1770: PPUSH
1771: LD_INT 9
1773: PPUSH
1774: CALL 81571 0 3
// MC_SetBuildingList ( mc_leg , [ [ b_armoury , 157 , 144 , 0 ] , [ b_bunker , 151 , 142 , 0 ] , [ b_bunker , 161 , 144 , 0 ] , [ b_bunker , 140 , 133 , 0 ] ] ) ;
1778: LD_EXP 6
1782: PPUSH
1783: LD_INT 4
1785: PUSH
1786: LD_INT 157
1788: PUSH
1789: LD_INT 144
1791: PUSH
1792: LD_INT 0
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 32
1803: PUSH
1804: LD_INT 151
1806: PUSH
1807: LD_INT 142
1809: PUSH
1810: LD_INT 0
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_INT 32
1821: PUSH
1822: LD_INT 161
1824: PUSH
1825: LD_INT 144
1827: PUSH
1828: LD_INT 0
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 32
1839: PUSH
1840: LD_INT 140
1842: PUSH
1843: LD_INT 133
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: PPUSH
1861: CALL 81781 0 2
// MC_SetProduceList ( mc_leg , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] , [ ar_medium_trike , engine_combustion , control_remote , ar_crane ] ] ) ;
1865: LD_EXP 6
1869: PPUSH
1870: LD_INT 13
1872: PUSH
1873: LD_INT 2
1875: PUSH
1876: LD_INT 1
1878: PUSH
1879: LD_INT 31
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 13
1890: PUSH
1891: LD_INT 2
1893: PUSH
1894: LD_INT 1
1896: PUSH
1897: LD_INT 31
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 13
1908: PUSH
1909: LD_INT 1
1911: PUSH
1912: LD_INT 1
1914: PUSH
1915: LD_INT 27
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 13
1926: PUSH
1927: LD_INT 1
1929: PUSH
1930: LD_INT 2
1932: PUSH
1933: LD_INT 27
1935: PUSH
1936: EMPTY
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 13
1944: PUSH
1945: LD_INT 1
1947: PUSH
1948: LD_INT 2
1950: PUSH
1951: LD_INT 27
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: PUSH
1960: LD_INT 13
1962: PUSH
1963: LD_INT 1
1965: PUSH
1966: LD_INT 2
1968: PUSH
1969: LD_INT 28
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 13
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: LD_INT 2
1986: PUSH
1987: LD_INT 28
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: PUSH
1996: LD_INT 13
1998: PUSH
1999: LD_INT 1
2001: PUSH
2002: LD_INT 2
2004: PUSH
2005: LD_INT 32
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: PUSH
2014: LD_INT 13
2016: PUSH
2017: LD_INT 1
2019: PUSH
2020: LD_INT 2
2022: PUSH
2023: LD_EXP 35
2027: PUSH
2028: EMPTY
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: PPUSH
2045: CALL 81889 0 2
// HiddenCamera ( 165 , 156 , 8 ) ;
2049: LD_INT 165
2051: PPUSH
2052: LD_INT 156
2054: PPUSH
2055: LD_INT 8
2057: PPUSH
2058: CALL_OW 244
// MC_SetScanArea ( mc_rus_1 , rus1Base ) ;
2062: LD_EXP 7
2066: PPUSH
2067: LD_INT 15
2069: PPUSH
2070: CALL 83210 0 2
// MC_SetParkingArea ( mc_rus_1 , rus1Parking ) ;
2074: LD_EXP 7
2078: PPUSH
2079: LD_INT 16
2081: PPUSH
2082: CALL 83154 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_1 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2086: LD_EXP 7
2090: PPUSH
2091: LD_INT 43
2093: PUSH
2094: LD_INT 47
2096: PUSH
2097: LD_INT 45
2099: PUSH
2100: LD_INT 49
2102: PUSH
2103: LD_INT 46
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: PPUSH
2113: CALL 83042 0 2
// MC_SetCratesArea ( mc_rus_1 , rusCrates ) ;
2117: LD_EXP 7
2121: PPUSH
2122: LD_INT 13
2124: PPUSH
2125: CALL 82724 0 2
// MC_SetTame ( mc_rus_1 , rus1Base ) ;
2129: LD_EXP 7
2133: PPUSH
2134: LD_INT 15
2136: PPUSH
2137: CALL 82455 0 2
// MC_SetDefenderLimit ( mc_rus_1 , 5 ) ;
2141: LD_EXP 7
2145: PPUSH
2146: LD_INT 5
2148: PPUSH
2149: CALL 82074 0 2
// MC_SetProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_rocket ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_crane ] , ] ) ;
2153: LD_EXP 7
2157: PPUSH
2158: LD_INT 23
2160: PUSH
2161: LD_INT 1
2163: PUSH
2164: LD_INT 3
2166: PUSH
2167: LD_INT 46
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: PUSH
2176: LD_INT 23
2178: PUSH
2179: LD_INT 1
2181: PUSH
2182: LD_INT 1
2184: PUSH
2185: LD_INT 46
2187: PUSH
2188: EMPTY
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: PUSH
2194: LD_INT 23
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: LD_INT 3
2202: PUSH
2203: LD_INT 45
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: LIST
2210: LIST
2211: PUSH
2212: LD_INT 23
2214: PUSH
2215: LD_INT 1
2217: PUSH
2218: LD_INT 1
2220: PUSH
2221: LD_INT 47
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: LIST
2228: LIST
2229: PUSH
2230: LD_INT 23
2232: PUSH
2233: LD_INT 1
2235: PUSH
2236: LD_INT 3
2238: PUSH
2239: LD_INT 46
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: LIST
2246: LIST
2247: PUSH
2248: LD_INT 21
2250: PUSH
2251: LD_INT 1
2253: PUSH
2254: LD_INT 3
2256: PUSH
2257: LD_INT 51
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: PUSH
2266: LD_INT 21
2268: PUSH
2269: LD_INT 1
2271: PUSH
2272: LD_INT 3
2274: PUSH
2275: LD_INT 52
2277: PUSH
2278: EMPTY
2279: LIST
2280: LIST
2281: LIST
2282: LIST
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: LIST
2291: LIST
2292: PPUSH
2293: CALL 81889 0 2
// MC_SetScanArea ( mc_rus_2 , rus2Base ) ;
2297: LD_EXP 8
2301: PPUSH
2302: LD_INT 11
2304: PPUSH
2305: CALL 83210 0 2
// MC_SetParkingArea ( mc_rus_2 , rus2Parking ) ;
2309: LD_EXP 8
2313: PPUSH
2314: LD_INT 12
2316: PPUSH
2317: CALL 83154 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_2 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2321: LD_EXP 8
2325: PPUSH
2326: LD_INT 43
2328: PUSH
2329: LD_INT 47
2331: PUSH
2332: LD_INT 45
2334: PUSH
2335: LD_INT 49
2337: PUSH
2338: LD_INT 46
2340: PUSH
2341: EMPTY
2342: LIST
2343: LIST
2344: LIST
2345: LIST
2346: LIST
2347: PPUSH
2348: CALL 83042 0 2
// MC_SetCratesArea ( mc_rus_2 , rusCrates ) ;
2352: LD_EXP 8
2356: PPUSH
2357: LD_INT 13
2359: PPUSH
2360: CALL 82724 0 2
// MC_SetTame ( mc_rus_2 , rus2Base ) ;
2364: LD_EXP 8
2368: PPUSH
2369: LD_INT 11
2371: PPUSH
2372: CALL 82455 0 2
// MC_SetDefenderLimit ( mc_rus_2 , 4 ) ;
2376: LD_EXP 8
2380: PPUSH
2381: LD_INT 4
2383: PPUSH
2384: CALL 82074 0 2
// MC_SetTeleportExit ( mc_rus_2 , [ [ 115 , 201 ] ] ) ;
2388: LD_EXP 8
2392: PPUSH
2393: LD_INT 115
2395: PUSH
2396: LD_INT 201
2398: PUSH
2399: EMPTY
2400: LIST
2401: LIST
2402: PUSH
2403: EMPTY
2404: LIST
2405: PPUSH
2406: CALL 82780 0 2
// MC_SetProduceList ( mc_rus_2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
2410: LD_EXP 8
2414: PPUSH
2415: LD_INT 24
2417: PUSH
2418: LD_INT 3
2420: PUSH
2421: LD_INT 3
2423: PUSH
2424: LD_INT 46
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: PUSH
2433: LD_INT 24
2435: PUSH
2436: LD_INT 3
2438: PUSH
2439: LD_INT 3
2441: PUSH
2442: LD_INT 46
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: PUSH
2451: LD_INT 24
2453: PUSH
2454: LD_INT 3
2456: PUSH
2457: LD_INT 3
2459: PUSH
2460: LD_INT 46
2462: PUSH
2463: EMPTY
2464: LIST
2465: LIST
2466: LIST
2467: LIST
2468: PUSH
2469: LD_INT 24
2471: PUSH
2472: LD_INT 3
2474: PUSH
2475: LD_INT 3
2477: PUSH
2478: LD_INT 46
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: LIST
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: LIST
2491: LIST
2492: PPUSH
2493: CALL 81889 0 2
// end ;
2497: LD_VAR 0 1
2501: RET
// export function PrepareRussians ; var i , b , tmp , side , sr , depot , base ; begin
2502: LD_INT 0
2504: PPUSH
2505: PPUSH
2506: PPUSH
2507: PPUSH
2508: PPUSH
2509: PPUSH
2510: PPUSH
2511: PPUSH
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , rusApe , 0 ) ;
2512: LD_INT 0
2514: PPUSH
2515: LD_INT 0
2517: PPUSH
2518: LD_INT 3
2520: PPUSH
2521: LD_INT 0
2523: PPUSH
2524: LD_INT 0
2526: PPUSH
2527: LD_INT 0
2529: PPUSH
2530: LD_INT 0
2532: PPUSH
2533: LD_INT 14
2535: PPUSH
2536: LD_INT 0
2538: PPUSH
2539: CALL 52740 0 9
// side := 3 ;
2543: LD_ADDR_VAR 0 5
2547: PUSH
2548: LD_INT 3
2550: ST_TO_ADDR
// SetTech ( tech_targTeleport , side , state_researched ) ;
2551: LD_INT 38
2553: PPUSH
2554: LD_VAR 0 5
2558: PPUSH
2559: LD_INT 2
2561: PPUSH
2562: CALL_OW 322
// SetTech ( tech_gun , side , state_researched ) ;
2566: LD_INT 39
2568: PPUSH
2569: LD_VAR 0 5
2573: PPUSH
2574: LD_INT 2
2576: PPUSH
2577: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
2581: LD_INT 34
2583: PPUSH
2584: LD_VAR 0 5
2588: PPUSH
2589: LD_INT 2
2591: PPUSH
2592: CALL_OW 322
// tmp := [ [ 0 , 208 , 163 , 4 , 0 , 0 ] , [ 3 , 194 , 161 , 1 , 0 , 0 ] , [ 17 , 190 , 161 , 1 , 0 , 0 ] , [ 5 , 200 , 145 , 3 , 0 , 0 ] , [ 32 , 192 , 144 , 3 , 0 , 0 ] , [ 26 , 216 , 172 , 3 , 0 , 0 ] , [ 26 , 218 , 176 , 3 , 0 , 0 ] , [ 29 , 182 , 149 , 3 , 0 , 0 ] , [ 8 , 201 , 171 , 0 , 10 , 11 ] , [ 32 , 188 , 167 , 0 , 0 , 0 ] , [ 32 , 202 , 179 , 0 , 0 , 0 ] , [ 32 , 209 , 182 , 0 , 0 , 0 ] , [ 32 , 220 , 183 , 5 , 0 , 0 ] , [ 32 , 225 , 181 , 5 , 0 , 0 ] , [ 26 , 220 , 174 , 5 , 0 , 0 ] , [ 1 , 84 , 128 , 4 , 0 , 0 ] , [ 3 , 68 , 121 , 1 , 0 , 0 ] , [ 19 , 72 , 125 , 5 , 0 , 0 ] , [ 18 , 68 , 124 , 0 , 0 , 0 ] , [ 24 , 64 , 121 , 1 , 0 , 0 ] , [ 17 , 65 , 118 , 2 , 0 , 0 ] , [ 21 , 68 , 117 , 3 , 0 , 0 ] , [ 8 , 68 , 130 , 1 , 14 , 10 ] , [ 8 , 67 , 110 , 2 , 11 , 12 ] , [ 28 , 85 , 108 , 2 , 0 , 0 ] , [ 28 , 85 , 124 , 2 , 0 , 0 ] , [ 30 , 97 , 119 , 2 , 0 , 0 ] , [ 5 , 111 , 138 , 4 , 0 , 0 ] , [ 33 , 104 , 130 , 3 , 0 , 0 ] , [ 33 , 110 , 142 , 5 , 0 , 0 ] , [ 33 , 91 , 131 , 5 , 0 , 0 ] , [ 33 , 107 , 157 , 5 , 0 , 0 ] , [ 33 , 104 , 160 , 5 , 0 , 0 ] , [ 33 , 101 , 162 , 5 , 0 , 0 ] , [ 32 , 87 , 157 , 5 , 0 , 0 ] , [ 32 , 105 , 158 , 5 , 0 , 0 ] , [ 33 , 91 , 118 , 4 , 0 , 0 ] , [ 33 , 89 , 107 , 4 , 0 , 0 ] , [ 5 , 86 , 96 , 3 , 0 , 0 ] , [ 33 , 91 , 102 , 4 , 0 , 0 ] , [ 32 , 80 , 95 , 3 , 0 , 0 ] , [ 28 , 77 , 105 , 3 , 0 , 0 ] , [ 28 , 85 , 113 , 3 , 0 , 0 ] , [ 28 , 55 , 97 , 3 , 0 , 0 ] , [ 28 , 88 , 128 , 3 , 0 , 0 ] , [ 32 , 69 , 101 , 2 , 0 , 0 ] , [ 1 , 34 , 23 , 4 , 0 , 0 ] , [ 8 , 25 , 4 , 3 , 11 , 10 ] , [ 8 , 15 , 4 , 2 , 14 , 12 ] , [ 29 , 55 , 35 , 2 , 0 , 0 ] , [ 29 , 24 , 44 , 2 , 0 , 0 ] , [ 34 , 34 , 32 , 4 , 0 , 0 ] , [ 3 , 14 , 16 , 1 , 0 , 0 ] , [ 24 , 10 , 16 , 1 , 0 , 0 ] , [ 21 , 11 , 13 , 2 , 0 , 0 ] , [ 18 , 14 , 12 , 3 , 0 , 0 ] , [ 16 , 14 , 19 , 0 , 0 , 0 ] , [ 17 , 18 , 20 , 5 , 0 , 0 ] , [ 28 , 10 , 5 , 1 , 0 , 0 ] , [ 28 , 8 , 8 , 1 , 0 , 0 ] , [ 26 , 19 , 2 , 1 , 0 , 0 ] , [ 26 , 30 , 2 , 1 , 0 , 0 ] , [ 5 , 59 , 20 , 4 , 0 , 0 ] , [ 32 , 60 , 24 , 4 , 0 , 0 ] , [ 32 , 61 , 45 , 5 , 0 , 0 ] , [ 32 , 52 , 51 , 5 , 0 , 0 ] , [ 33 , 56 , 51 , 5 , 0 , 0 ] , [ 33 , 62 , 49 , 5 , 0 , 0 ] , [ 33 , 41 , 47 , 5 , 0 , 0 ] , [ 33 , 33 , 52 , 5 , 0 , 0 ] , [ 5 , 31 , 40 , 0 , 0 , 0 ] , [ 33 , 65 , 37 , 5 , 0 , 0 ] , [ 33 , 63 , 29 , 4 , 0 , 0 ] , [ 33 , 54 , 11 , 4 , 0 , 0 ] , [ 33 , 56 , 15 , 4 , 0 , 0 ] , [ 33 , 51 , 6 , 4 , 0 , 0 ] , [ 26 , 39 , 25 , 0 , 0 , 0 ] , [ 26 , 37 , 21 , 0 , 0 , 0 ] , [ 32 , 35 , 17 , 4 , 0 , 0 ] , [ 33 , 35 , 28 , 4 , 0 , 0 ] , [ 33 , 28 , 46 , 5 , 0 , 0 ] , [ 33 , 31 , 6 , 4 , 0 , 0 ] , [ 26 , 54 , 38 , 4 , 0 , 0 ] , [ 33 , 207 , 167 , 3 , 0 , 0 ] , [ 30 , 43 , 2 , 4 , 0 , 0 ] ] ;
2596: LD_ADDR_VAR 0 4
2600: PUSH
2601: LD_INT 0
2603: PUSH
2604: LD_INT 208
2606: PUSH
2607: LD_INT 163
2609: PUSH
2610: LD_INT 4
2612: PUSH
2613: LD_INT 0
2615: PUSH
2616: LD_INT 0
2618: PUSH
2619: EMPTY
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: PUSH
2627: LD_INT 3
2629: PUSH
2630: LD_INT 194
2632: PUSH
2633: LD_INT 161
2635: PUSH
2636: LD_INT 1
2638: PUSH
2639: LD_INT 0
2641: PUSH
2642: LD_INT 0
2644: PUSH
2645: EMPTY
2646: LIST
2647: LIST
2648: LIST
2649: LIST
2650: LIST
2651: LIST
2652: PUSH
2653: LD_INT 17
2655: PUSH
2656: LD_INT 190
2658: PUSH
2659: LD_INT 161
2661: PUSH
2662: LD_INT 1
2664: PUSH
2665: LD_INT 0
2667: PUSH
2668: LD_INT 0
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: LIST
2675: LIST
2676: LIST
2677: LIST
2678: PUSH
2679: LD_INT 5
2681: PUSH
2682: LD_INT 200
2684: PUSH
2685: LD_INT 145
2687: PUSH
2688: LD_INT 3
2690: PUSH
2691: LD_INT 0
2693: PUSH
2694: LD_INT 0
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: LIST
2701: LIST
2702: LIST
2703: LIST
2704: PUSH
2705: LD_INT 32
2707: PUSH
2708: LD_INT 192
2710: PUSH
2711: LD_INT 144
2713: PUSH
2714: LD_INT 3
2716: PUSH
2717: LD_INT 0
2719: PUSH
2720: LD_INT 0
2722: PUSH
2723: EMPTY
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: LIST
2729: LIST
2730: PUSH
2731: LD_INT 26
2733: PUSH
2734: LD_INT 216
2736: PUSH
2737: LD_INT 172
2739: PUSH
2740: LD_INT 3
2742: PUSH
2743: LD_INT 0
2745: PUSH
2746: LD_INT 0
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: LIST
2753: LIST
2754: LIST
2755: LIST
2756: PUSH
2757: LD_INT 26
2759: PUSH
2760: LD_INT 218
2762: PUSH
2763: LD_INT 176
2765: PUSH
2766: LD_INT 3
2768: PUSH
2769: LD_INT 0
2771: PUSH
2772: LD_INT 0
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: LIST
2779: LIST
2780: LIST
2781: LIST
2782: PUSH
2783: LD_INT 29
2785: PUSH
2786: LD_INT 182
2788: PUSH
2789: LD_INT 149
2791: PUSH
2792: LD_INT 3
2794: PUSH
2795: LD_INT 0
2797: PUSH
2798: LD_INT 0
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: LIST
2807: LIST
2808: PUSH
2809: LD_INT 8
2811: PUSH
2812: LD_INT 201
2814: PUSH
2815: LD_INT 171
2817: PUSH
2818: LD_INT 0
2820: PUSH
2821: LD_INT 10
2823: PUSH
2824: LD_INT 11
2826: PUSH
2827: EMPTY
2828: LIST
2829: LIST
2830: LIST
2831: LIST
2832: LIST
2833: LIST
2834: PUSH
2835: LD_INT 32
2837: PUSH
2838: LD_INT 188
2840: PUSH
2841: LD_INT 167
2843: PUSH
2844: LD_INT 0
2846: PUSH
2847: LD_INT 0
2849: PUSH
2850: LD_INT 0
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: LIST
2857: LIST
2858: LIST
2859: LIST
2860: PUSH
2861: LD_INT 32
2863: PUSH
2864: LD_INT 202
2866: PUSH
2867: LD_INT 179
2869: PUSH
2870: LD_INT 0
2872: PUSH
2873: LD_INT 0
2875: PUSH
2876: LD_INT 0
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: LIST
2883: LIST
2884: LIST
2885: LIST
2886: PUSH
2887: LD_INT 32
2889: PUSH
2890: LD_INT 209
2892: PUSH
2893: LD_INT 182
2895: PUSH
2896: LD_INT 0
2898: PUSH
2899: LD_INT 0
2901: PUSH
2902: LD_INT 0
2904: PUSH
2905: EMPTY
2906: LIST
2907: LIST
2908: LIST
2909: LIST
2910: LIST
2911: LIST
2912: PUSH
2913: LD_INT 32
2915: PUSH
2916: LD_INT 220
2918: PUSH
2919: LD_INT 183
2921: PUSH
2922: LD_INT 5
2924: PUSH
2925: LD_INT 0
2927: PUSH
2928: LD_INT 0
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: LIST
2935: LIST
2936: LIST
2937: LIST
2938: PUSH
2939: LD_INT 32
2941: PUSH
2942: LD_INT 225
2944: PUSH
2945: LD_INT 181
2947: PUSH
2948: LD_INT 5
2950: PUSH
2951: LD_INT 0
2953: PUSH
2954: LD_INT 0
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: LIST
2961: LIST
2962: LIST
2963: LIST
2964: PUSH
2965: LD_INT 26
2967: PUSH
2968: LD_INT 220
2970: PUSH
2971: LD_INT 174
2973: PUSH
2974: LD_INT 5
2976: PUSH
2977: LD_INT 0
2979: PUSH
2980: LD_INT 0
2982: PUSH
2983: EMPTY
2984: LIST
2985: LIST
2986: LIST
2987: LIST
2988: LIST
2989: LIST
2990: PUSH
2991: LD_INT 1
2993: PUSH
2994: LD_INT 84
2996: PUSH
2997: LD_INT 128
2999: PUSH
3000: LD_INT 4
3002: PUSH
3003: LD_INT 0
3005: PUSH
3006: LD_INT 0
3008: PUSH
3009: EMPTY
3010: LIST
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: LIST
3016: PUSH
3017: LD_INT 3
3019: PUSH
3020: LD_INT 68
3022: PUSH
3023: LD_INT 121
3025: PUSH
3026: LD_INT 1
3028: PUSH
3029: LD_INT 0
3031: PUSH
3032: LD_INT 0
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: LIST
3039: LIST
3040: LIST
3041: LIST
3042: PUSH
3043: LD_INT 19
3045: PUSH
3046: LD_INT 72
3048: PUSH
3049: LD_INT 125
3051: PUSH
3052: LD_INT 5
3054: PUSH
3055: LD_INT 0
3057: PUSH
3058: LD_INT 0
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: LIST
3068: PUSH
3069: LD_INT 18
3071: PUSH
3072: LD_INT 68
3074: PUSH
3075: LD_INT 124
3077: PUSH
3078: LD_INT 0
3080: PUSH
3081: LD_INT 0
3083: PUSH
3084: LD_INT 0
3086: PUSH
3087: EMPTY
3088: LIST
3089: LIST
3090: LIST
3091: LIST
3092: LIST
3093: LIST
3094: PUSH
3095: LD_INT 24
3097: PUSH
3098: LD_INT 64
3100: PUSH
3101: LD_INT 121
3103: PUSH
3104: LD_INT 1
3106: PUSH
3107: LD_INT 0
3109: PUSH
3110: LD_INT 0
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: LIST
3117: LIST
3118: LIST
3119: LIST
3120: PUSH
3121: LD_INT 17
3123: PUSH
3124: LD_INT 65
3126: PUSH
3127: LD_INT 118
3129: PUSH
3130: LD_INT 2
3132: PUSH
3133: LD_INT 0
3135: PUSH
3136: LD_INT 0
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 21
3149: PUSH
3150: LD_INT 68
3152: PUSH
3153: LD_INT 117
3155: PUSH
3156: LD_INT 3
3158: PUSH
3159: LD_INT 0
3161: PUSH
3162: LD_INT 0
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: LIST
3172: PUSH
3173: LD_INT 8
3175: PUSH
3176: LD_INT 68
3178: PUSH
3179: LD_INT 130
3181: PUSH
3182: LD_INT 1
3184: PUSH
3185: LD_INT 14
3187: PUSH
3188: LD_INT 10
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: PUSH
3199: LD_INT 8
3201: PUSH
3202: LD_INT 67
3204: PUSH
3205: LD_INT 110
3207: PUSH
3208: LD_INT 2
3210: PUSH
3211: LD_INT 11
3213: PUSH
3214: LD_INT 12
3216: PUSH
3217: EMPTY
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: LIST
3223: LIST
3224: PUSH
3225: LD_INT 28
3227: PUSH
3228: LD_INT 85
3230: PUSH
3231: LD_INT 108
3233: PUSH
3234: LD_INT 2
3236: PUSH
3237: LD_INT 0
3239: PUSH
3240: LD_INT 0
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: PUSH
3251: LD_INT 28
3253: PUSH
3254: LD_INT 85
3256: PUSH
3257: LD_INT 124
3259: PUSH
3260: LD_INT 2
3262: PUSH
3263: LD_INT 0
3265: PUSH
3266: LD_INT 0
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: PUSH
3277: LD_INT 30
3279: PUSH
3280: LD_INT 97
3282: PUSH
3283: LD_INT 119
3285: PUSH
3286: LD_INT 2
3288: PUSH
3289: LD_INT 0
3291: PUSH
3292: LD_INT 0
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: PUSH
3303: LD_INT 5
3305: PUSH
3306: LD_INT 111
3308: PUSH
3309: LD_INT 138
3311: PUSH
3312: LD_INT 4
3314: PUSH
3315: LD_INT 0
3317: PUSH
3318: LD_INT 0
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: LIST
3328: PUSH
3329: LD_INT 33
3331: PUSH
3332: LD_INT 104
3334: PUSH
3335: LD_INT 130
3337: PUSH
3338: LD_INT 3
3340: PUSH
3341: LD_INT 0
3343: PUSH
3344: LD_INT 0
3346: PUSH
3347: EMPTY
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: PUSH
3355: LD_INT 33
3357: PUSH
3358: LD_INT 110
3360: PUSH
3361: LD_INT 142
3363: PUSH
3364: LD_INT 5
3366: PUSH
3367: LD_INT 0
3369: PUSH
3370: LD_INT 0
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: LIST
3379: LIST
3380: PUSH
3381: LD_INT 33
3383: PUSH
3384: LD_INT 91
3386: PUSH
3387: LD_INT 131
3389: PUSH
3390: LD_INT 5
3392: PUSH
3393: LD_INT 0
3395: PUSH
3396: LD_INT 0
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: PUSH
3407: LD_INT 33
3409: PUSH
3410: LD_INT 107
3412: PUSH
3413: LD_INT 157
3415: PUSH
3416: LD_INT 5
3418: PUSH
3419: LD_INT 0
3421: PUSH
3422: LD_INT 0
3424: PUSH
3425: EMPTY
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: PUSH
3433: LD_INT 33
3435: PUSH
3436: LD_INT 104
3438: PUSH
3439: LD_INT 160
3441: PUSH
3442: LD_INT 5
3444: PUSH
3445: LD_INT 0
3447: PUSH
3448: LD_INT 0
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: LIST
3458: PUSH
3459: LD_INT 33
3461: PUSH
3462: LD_INT 101
3464: PUSH
3465: LD_INT 162
3467: PUSH
3468: LD_INT 5
3470: PUSH
3471: LD_INT 0
3473: PUSH
3474: LD_INT 0
3476: PUSH
3477: EMPTY
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: LIST
3483: LIST
3484: PUSH
3485: LD_INT 32
3487: PUSH
3488: LD_INT 87
3490: PUSH
3491: LD_INT 157
3493: PUSH
3494: LD_INT 5
3496: PUSH
3497: LD_INT 0
3499: PUSH
3500: LD_INT 0
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: PUSH
3511: LD_INT 32
3513: PUSH
3514: LD_INT 105
3516: PUSH
3517: LD_INT 158
3519: PUSH
3520: LD_INT 5
3522: PUSH
3523: LD_INT 0
3525: PUSH
3526: LD_INT 0
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: PUSH
3537: LD_INT 33
3539: PUSH
3540: LD_INT 91
3542: PUSH
3543: LD_INT 118
3545: PUSH
3546: LD_INT 4
3548: PUSH
3549: LD_INT 0
3551: PUSH
3552: LD_INT 0
3554: PUSH
3555: EMPTY
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: LIST
3561: LIST
3562: PUSH
3563: LD_INT 33
3565: PUSH
3566: LD_INT 89
3568: PUSH
3569: LD_INT 107
3571: PUSH
3572: LD_INT 4
3574: PUSH
3575: LD_INT 0
3577: PUSH
3578: LD_INT 0
3580: PUSH
3581: EMPTY
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: LIST
3588: PUSH
3589: LD_INT 5
3591: PUSH
3592: LD_INT 86
3594: PUSH
3595: LD_INT 96
3597: PUSH
3598: LD_INT 3
3600: PUSH
3601: LD_INT 0
3603: PUSH
3604: LD_INT 0
3606: PUSH
3607: EMPTY
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: PUSH
3615: LD_INT 33
3617: PUSH
3618: LD_INT 91
3620: PUSH
3621: LD_INT 102
3623: PUSH
3624: LD_INT 4
3626: PUSH
3627: LD_INT 0
3629: PUSH
3630: LD_INT 0
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: PUSH
3641: LD_INT 32
3643: PUSH
3644: LD_INT 80
3646: PUSH
3647: LD_INT 95
3649: PUSH
3650: LD_INT 3
3652: PUSH
3653: LD_INT 0
3655: PUSH
3656: LD_INT 0
3658: PUSH
3659: EMPTY
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: LIST
3666: PUSH
3667: LD_INT 28
3669: PUSH
3670: LD_INT 77
3672: PUSH
3673: LD_INT 105
3675: PUSH
3676: LD_INT 3
3678: PUSH
3679: LD_INT 0
3681: PUSH
3682: LD_INT 0
3684: PUSH
3685: EMPTY
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: PUSH
3693: LD_INT 28
3695: PUSH
3696: LD_INT 85
3698: PUSH
3699: LD_INT 113
3701: PUSH
3702: LD_INT 3
3704: PUSH
3705: LD_INT 0
3707: PUSH
3708: LD_INT 0
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: LIST
3718: PUSH
3719: LD_INT 28
3721: PUSH
3722: LD_INT 55
3724: PUSH
3725: LD_INT 97
3727: PUSH
3728: LD_INT 3
3730: PUSH
3731: LD_INT 0
3733: PUSH
3734: LD_INT 0
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: LIST
3744: PUSH
3745: LD_INT 28
3747: PUSH
3748: LD_INT 88
3750: PUSH
3751: LD_INT 128
3753: PUSH
3754: LD_INT 3
3756: PUSH
3757: LD_INT 0
3759: PUSH
3760: LD_INT 0
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: PUSH
3771: LD_INT 32
3773: PUSH
3774: LD_INT 69
3776: PUSH
3777: LD_INT 101
3779: PUSH
3780: LD_INT 2
3782: PUSH
3783: LD_INT 0
3785: PUSH
3786: LD_INT 0
3788: PUSH
3789: EMPTY
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: PUSH
3797: LD_INT 1
3799: PUSH
3800: LD_INT 34
3802: PUSH
3803: LD_INT 23
3805: PUSH
3806: LD_INT 4
3808: PUSH
3809: LD_INT 0
3811: PUSH
3812: LD_INT 0
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 8
3825: PUSH
3826: LD_INT 25
3828: PUSH
3829: LD_INT 4
3831: PUSH
3832: LD_INT 3
3834: PUSH
3835: LD_INT 11
3837: PUSH
3838: LD_INT 10
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: PUSH
3849: LD_INT 8
3851: PUSH
3852: LD_INT 15
3854: PUSH
3855: LD_INT 4
3857: PUSH
3858: LD_INT 2
3860: PUSH
3861: LD_INT 14
3863: PUSH
3864: LD_INT 12
3866: PUSH
3867: EMPTY
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: PUSH
3875: LD_INT 29
3877: PUSH
3878: LD_INT 55
3880: PUSH
3881: LD_INT 35
3883: PUSH
3884: LD_INT 2
3886: PUSH
3887: LD_INT 0
3889: PUSH
3890: LD_INT 0
3892: PUSH
3893: EMPTY
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: PUSH
3901: LD_INT 29
3903: PUSH
3904: LD_INT 24
3906: PUSH
3907: LD_INT 44
3909: PUSH
3910: LD_INT 2
3912: PUSH
3913: LD_INT 0
3915: PUSH
3916: LD_INT 0
3918: PUSH
3919: EMPTY
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: LIST
3926: PUSH
3927: LD_INT 34
3929: PUSH
3930: LD_INT 34
3932: PUSH
3933: LD_INT 32
3935: PUSH
3936: LD_INT 4
3938: PUSH
3939: LD_INT 0
3941: PUSH
3942: LD_INT 0
3944: PUSH
3945: EMPTY
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: PUSH
3953: LD_INT 3
3955: PUSH
3956: LD_INT 14
3958: PUSH
3959: LD_INT 16
3961: PUSH
3962: LD_INT 1
3964: PUSH
3965: LD_INT 0
3967: PUSH
3968: LD_INT 0
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: LIST
3975: LIST
3976: LIST
3977: LIST
3978: PUSH
3979: LD_INT 24
3981: PUSH
3982: LD_INT 10
3984: PUSH
3985: LD_INT 16
3987: PUSH
3988: LD_INT 1
3990: PUSH
3991: LD_INT 0
3993: PUSH
3994: LD_INT 0
3996: PUSH
3997: EMPTY
3998: LIST
3999: LIST
4000: LIST
4001: LIST
4002: LIST
4003: LIST
4004: PUSH
4005: LD_INT 21
4007: PUSH
4008: LD_INT 11
4010: PUSH
4011: LD_INT 13
4013: PUSH
4014: LD_INT 2
4016: PUSH
4017: LD_INT 0
4019: PUSH
4020: LD_INT 0
4022: PUSH
4023: EMPTY
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: LIST
4029: LIST
4030: PUSH
4031: LD_INT 18
4033: PUSH
4034: LD_INT 14
4036: PUSH
4037: LD_INT 12
4039: PUSH
4040: LD_INT 3
4042: PUSH
4043: LD_INT 0
4045: PUSH
4046: LD_INT 0
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: PUSH
4057: LD_INT 16
4059: PUSH
4060: LD_INT 14
4062: PUSH
4063: LD_INT 19
4065: PUSH
4066: LD_INT 0
4068: PUSH
4069: LD_INT 0
4071: PUSH
4072: LD_INT 0
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: PUSH
4083: LD_INT 17
4085: PUSH
4086: LD_INT 18
4088: PUSH
4089: LD_INT 20
4091: PUSH
4092: LD_INT 5
4094: PUSH
4095: LD_INT 0
4097: PUSH
4098: LD_INT 0
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: LIST
4108: PUSH
4109: LD_INT 28
4111: PUSH
4112: LD_INT 10
4114: PUSH
4115: LD_INT 5
4117: PUSH
4118: LD_INT 1
4120: PUSH
4121: LD_INT 0
4123: PUSH
4124: LD_INT 0
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: LIST
4134: PUSH
4135: LD_INT 28
4137: PUSH
4138: LD_INT 8
4140: PUSH
4141: LD_INT 8
4143: PUSH
4144: LD_INT 1
4146: PUSH
4147: LD_INT 0
4149: PUSH
4150: LD_INT 0
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: PUSH
4161: LD_INT 26
4163: PUSH
4164: LD_INT 19
4166: PUSH
4167: LD_INT 2
4169: PUSH
4170: LD_INT 1
4172: PUSH
4173: LD_INT 0
4175: PUSH
4176: LD_INT 0
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: LIST
4186: PUSH
4187: LD_INT 26
4189: PUSH
4190: LD_INT 30
4192: PUSH
4193: LD_INT 2
4195: PUSH
4196: LD_INT 1
4198: PUSH
4199: LD_INT 0
4201: PUSH
4202: LD_INT 0
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: LIST
4212: PUSH
4213: LD_INT 5
4215: PUSH
4216: LD_INT 59
4218: PUSH
4219: LD_INT 20
4221: PUSH
4222: LD_INT 4
4224: PUSH
4225: LD_INT 0
4227: PUSH
4228: LD_INT 0
4230: PUSH
4231: EMPTY
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: LIST
4238: PUSH
4239: LD_INT 32
4241: PUSH
4242: LD_INT 60
4244: PUSH
4245: LD_INT 24
4247: PUSH
4248: LD_INT 4
4250: PUSH
4251: LD_INT 0
4253: PUSH
4254: LD_INT 0
4256: PUSH
4257: EMPTY
4258: LIST
4259: LIST
4260: LIST
4261: LIST
4262: LIST
4263: LIST
4264: PUSH
4265: LD_INT 32
4267: PUSH
4268: LD_INT 61
4270: PUSH
4271: LD_INT 45
4273: PUSH
4274: LD_INT 5
4276: PUSH
4277: LD_INT 0
4279: PUSH
4280: LD_INT 0
4282: PUSH
4283: EMPTY
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: LIST
4289: LIST
4290: PUSH
4291: LD_INT 32
4293: PUSH
4294: LD_INT 52
4296: PUSH
4297: LD_INT 51
4299: PUSH
4300: LD_INT 5
4302: PUSH
4303: LD_INT 0
4305: PUSH
4306: LD_INT 0
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: PUSH
4317: LD_INT 33
4319: PUSH
4320: LD_INT 56
4322: PUSH
4323: LD_INT 51
4325: PUSH
4326: LD_INT 5
4328: PUSH
4329: LD_INT 0
4331: PUSH
4332: LD_INT 0
4334: PUSH
4335: EMPTY
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: PUSH
4343: LD_INT 33
4345: PUSH
4346: LD_INT 62
4348: PUSH
4349: LD_INT 49
4351: PUSH
4352: LD_INT 5
4354: PUSH
4355: LD_INT 0
4357: PUSH
4358: LD_INT 0
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: PUSH
4369: LD_INT 33
4371: PUSH
4372: LD_INT 41
4374: PUSH
4375: LD_INT 47
4377: PUSH
4378: LD_INT 5
4380: PUSH
4381: LD_INT 0
4383: PUSH
4384: LD_INT 0
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: PUSH
4395: LD_INT 33
4397: PUSH
4398: LD_INT 33
4400: PUSH
4401: LD_INT 52
4403: PUSH
4404: LD_INT 5
4406: PUSH
4407: LD_INT 0
4409: PUSH
4410: LD_INT 0
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: PUSH
4421: LD_INT 5
4423: PUSH
4424: LD_INT 31
4426: PUSH
4427: LD_INT 40
4429: PUSH
4430: LD_INT 0
4432: PUSH
4433: LD_INT 0
4435: PUSH
4436: LD_INT 0
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: PUSH
4447: LD_INT 33
4449: PUSH
4450: LD_INT 65
4452: PUSH
4453: LD_INT 37
4455: PUSH
4456: LD_INT 5
4458: PUSH
4459: LD_INT 0
4461: PUSH
4462: LD_INT 0
4464: PUSH
4465: EMPTY
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 33
4475: PUSH
4476: LD_INT 63
4478: PUSH
4479: LD_INT 29
4481: PUSH
4482: LD_INT 4
4484: PUSH
4485: LD_INT 0
4487: PUSH
4488: LD_INT 0
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: PUSH
4499: LD_INT 33
4501: PUSH
4502: LD_INT 54
4504: PUSH
4505: LD_INT 11
4507: PUSH
4508: LD_INT 4
4510: PUSH
4511: LD_INT 0
4513: PUSH
4514: LD_INT 0
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: PUSH
4525: LD_INT 33
4527: PUSH
4528: LD_INT 56
4530: PUSH
4531: LD_INT 15
4533: PUSH
4534: LD_INT 4
4536: PUSH
4537: LD_INT 0
4539: PUSH
4540: LD_INT 0
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: LIST
4550: PUSH
4551: LD_INT 33
4553: PUSH
4554: LD_INT 51
4556: PUSH
4557: LD_INT 6
4559: PUSH
4560: LD_INT 4
4562: PUSH
4563: LD_INT 0
4565: PUSH
4566: LD_INT 0
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: PUSH
4577: LD_INT 26
4579: PUSH
4580: LD_INT 39
4582: PUSH
4583: LD_INT 25
4585: PUSH
4586: LD_INT 0
4588: PUSH
4589: LD_INT 0
4591: PUSH
4592: LD_INT 0
4594: PUSH
4595: EMPTY
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: PUSH
4603: LD_INT 26
4605: PUSH
4606: LD_INT 37
4608: PUSH
4609: LD_INT 21
4611: PUSH
4612: LD_INT 0
4614: PUSH
4615: LD_INT 0
4617: PUSH
4618: LD_INT 0
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: PUSH
4629: LD_INT 32
4631: PUSH
4632: LD_INT 35
4634: PUSH
4635: LD_INT 17
4637: PUSH
4638: LD_INT 4
4640: PUSH
4641: LD_INT 0
4643: PUSH
4644: LD_INT 0
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: LIST
4651: LIST
4652: LIST
4653: LIST
4654: PUSH
4655: LD_INT 33
4657: PUSH
4658: LD_INT 35
4660: PUSH
4661: LD_INT 28
4663: PUSH
4664: LD_INT 4
4666: PUSH
4667: LD_INT 0
4669: PUSH
4670: LD_INT 0
4672: PUSH
4673: EMPTY
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: PUSH
4681: LD_INT 33
4683: PUSH
4684: LD_INT 28
4686: PUSH
4687: LD_INT 46
4689: PUSH
4690: LD_INT 5
4692: PUSH
4693: LD_INT 0
4695: PUSH
4696: LD_INT 0
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: PUSH
4707: LD_INT 33
4709: PUSH
4710: LD_INT 31
4712: PUSH
4713: LD_INT 6
4715: PUSH
4716: LD_INT 4
4718: PUSH
4719: LD_INT 0
4721: PUSH
4722: LD_INT 0
4724: PUSH
4725: EMPTY
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: PUSH
4733: LD_INT 26
4735: PUSH
4736: LD_INT 54
4738: PUSH
4739: LD_INT 38
4741: PUSH
4742: LD_INT 4
4744: PUSH
4745: LD_INT 0
4747: PUSH
4748: LD_INT 0
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: PUSH
4759: LD_INT 33
4761: PUSH
4762: LD_INT 207
4764: PUSH
4765: LD_INT 167
4767: PUSH
4768: LD_INT 3
4770: PUSH
4771: LD_INT 0
4773: PUSH
4774: LD_INT 0
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: PUSH
4785: LD_INT 30
4787: PUSH
4788: LD_INT 43
4790: PUSH
4791: LD_INT 2
4793: PUSH
4794: LD_INT 4
4796: PUSH
4797: LD_INT 0
4799: PUSH
4800: LD_INT 0
4802: PUSH
4803: EMPTY
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: LIST
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: ST_TO_ADDR
// for i in tmp do
4898: LD_ADDR_VAR 0 2
4902: PUSH
4903: LD_VAR 0 4
4907: PUSH
4908: FOR_IN
4909: IFFALSE 5140
// begin uc_side := side ;
4911: LD_ADDR_OWVAR 20
4915: PUSH
4916: LD_VAR 0 5
4920: ST_TO_ADDR
// uc_nation := nation_russian ;
4921: LD_ADDR_OWVAR 21
4925: PUSH
4926: LD_INT 3
4928: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4929: LD_ADDR_OWVAR 42
4933: PUSH
4934: LD_VAR 0 2
4938: PUSH
4939: LD_INT 1
4941: ARRAY
4942: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
4943: LD_ADDR_OWVAR 43
4947: PUSH
4948: LD_INT 5
4950: PPUSH
4951: LD_INT 6
4953: PPUSH
4954: CALL_OW 12
4958: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
4959: LD_ADDR_OWVAR 44
4963: PUSH
4964: LD_VAR 0 2
4968: PUSH
4969: LD_INT 5
4971: ARRAY
4972: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
4973: LD_ADDR_OWVAR 45
4977: PUSH
4978: LD_VAR 0 2
4982: PUSH
4983: LD_INT 6
4985: ARRAY
4986: ST_TO_ADDR
// sr := 0 ;
4987: LD_ADDR_VAR 0 6
4991: PUSH
4992: LD_INT 0
4994: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
4995: LD_VAR 0 2
4999: PUSH
5000: LD_INT 1
5002: ARRAY
5003: PUSH
5004: LD_INT 29
5006: EQUAL
5007: IFFALSE 5019
// sr := mat_oil else
5009: LD_ADDR_VAR 0 6
5013: PUSH
5014: LD_INT 2
5016: ST_TO_ADDR
5017: GO 5041
// if i [ 1 ] = b_siberite_mine then
5019: LD_VAR 0 2
5023: PUSH
5024: LD_INT 1
5026: ARRAY
5027: PUSH
5028: LD_INT 30
5030: EQUAL
5031: IFFALSE 5041
// sr := mat_siberit ;
5033: LD_ADDR_VAR 0 6
5037: PUSH
5038: LD_INT 3
5040: ST_TO_ADDR
// if sr then
5041: LD_VAR 0 6
5045: IFFALSE 5101
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
5047: LD_VAR 0 2
5051: PUSH
5052: LD_INT 2
5054: ARRAY
5055: PPUSH
5056: LD_VAR 0 2
5060: PUSH
5061: LD_INT 3
5063: ARRAY
5064: PPUSH
5065: LD_VAR 0 6
5069: PPUSH
5070: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
5074: LD_VAR 0 2
5078: PUSH
5079: LD_INT 2
5081: ARRAY
5082: PPUSH
5083: LD_VAR 0 2
5087: PUSH
5088: LD_INT 3
5090: ARRAY
5091: PPUSH
5092: LD_VAR 0 5
5096: PPUSH
5097: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
5101: LD_ADDR_VAR 0 3
5105: PUSH
5106: LD_VAR 0 2
5110: PUSH
5111: LD_INT 2
5113: ARRAY
5114: PPUSH
5115: LD_VAR 0 2
5119: PUSH
5120: LD_INT 3
5122: ARRAY
5123: PPUSH
5124: LD_VAR 0 2
5128: PUSH
5129: LD_INT 4
5131: ARRAY
5132: PPUSH
5133: CALL_OW 47
5137: ST_TO_ADDR
// end ;
5138: GO 4908
5140: POP
5141: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
5142: LD_ADDR_VAR 0 7
5146: PUSH
5147: LD_INT 22
5149: PUSH
5150: LD_VAR 0 5
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: PUSH
5159: LD_INT 30
5161: PUSH
5162: LD_INT 1
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: PUSH
5169: EMPTY
5170: LIST
5171: LIST
5172: PPUSH
5173: CALL_OW 69
5177: ST_TO_ADDR
// if not depot then
5178: LD_VAR 0 7
5182: NOT
5183: IFFALSE 5187
// exit ;
5185: GO 5531
// base := PrepareBase ( HexInfo ( 84 , 128 ) , rus1Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5187: LD_ADDR_VAR 0 8
5191: PUSH
5192: LD_INT 84
5194: PPUSH
5195: LD_INT 128
5197: PPUSH
5198: CALL_OW 428
5202: PPUSH
5203: LD_INT 15
5205: PPUSH
5206: LD_INT 0
5208: PPUSH
5209: LD_INT 6
5211: PUSH
5212: LD_INT 7
5214: PUSH
5215: LD_INT 8
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: LIST
5222: PUSH
5223: LD_OWVAR 67
5227: ARRAY
5228: PPUSH
5229: LD_INT 3000
5231: PUSH
5232: LD_INT 300
5234: PUSH
5235: LD_INT 100
5237: PUSH
5238: EMPTY
5239: LIST
5240: LIST
5241: LIST
5242: PPUSH
5243: LD_INT 12
5245: PUSH
5246: LD_INT 6
5248: PUSH
5249: LD_INT 6
5251: PUSH
5252: LD_INT 4
5254: PUSH
5255: EMPTY
5256: LIST
5257: LIST
5258: LIST
5259: LIST
5260: PPUSH
5261: CALL 27687 0 6
5265: ST_TO_ADDR
// if not base then
5266: LD_VAR 0 8
5270: NOT
5271: IFFALSE 5275
// exit ;
5273: GO 5531
// mc_bases := Replace ( mc_bases , mc_rus_1 , base ) ;
5275: LD_ADDR_EXP 50
5279: PUSH
5280: LD_EXP 50
5284: PPUSH
5285: LD_EXP 7
5289: PPUSH
5290: LD_VAR 0 8
5294: PPUSH
5295: CALL_OW 1
5299: ST_TO_ADDR
// base := PrepareBase ( HexInfo ( 34 , 23 ) , rus2Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 20000 , 3000 , 1000 ] , [ 12 , 6 , 6 , 4 ] ) ;
5300: LD_ADDR_VAR 0 8
5304: PUSH
5305: LD_INT 34
5307: PPUSH
5308: LD_INT 23
5310: PPUSH
5311: CALL_OW 428
5315: PPUSH
5316: LD_INT 11
5318: PPUSH
5319: LD_INT 0
5321: PPUSH
5322: LD_INT 6
5324: PUSH
5325: LD_INT 7
5327: PUSH
5328: LD_INT 8
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: LIST
5335: PUSH
5336: LD_OWVAR 67
5340: ARRAY
5341: PPUSH
5342: LD_INT 20000
5344: PUSH
5345: LD_INT 3000
5347: PUSH
5348: LD_INT 1000
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: LIST
5355: PPUSH
5356: LD_INT 12
5358: PUSH
5359: LD_INT 6
5361: PUSH
5362: LD_INT 6
5364: PUSH
5365: LD_INT 4
5367: PUSH
5368: EMPTY
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: PPUSH
5374: CALL 27687 0 6
5378: ST_TO_ADDR
// if not base then
5379: LD_VAR 0 8
5383: NOT
5384: IFFALSE 5388
// exit ;
5386: GO 5531
// mc_bases := Replace ( mc_bases , mc_rus_2 , base ) ;
5388: LD_ADDR_EXP 50
5392: PUSH
5393: LD_EXP 50
5397: PPUSH
5398: LD_EXP 8
5402: PPUSH
5403: LD_VAR 0 8
5407: PPUSH
5408: CALL_OW 1
5412: ST_TO_ADDR
// ruOutpost := PrepareBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] , ruOutpostArea , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 500 , 100 , 10 ] , [ [ 6 , 7 , 8 ] [ Difficulty ] , 2 , 0 , 1 ] ) ;
5413: LD_ADDR_EXP 14
5417: PUSH
5418: LD_INT 22
5420: PUSH
5421: LD_INT 3
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: PUSH
5428: LD_INT 30
5430: PUSH
5431: LD_INT 0
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: PPUSH
5442: CALL_OW 69
5446: PUSH
5447: LD_INT 1
5449: ARRAY
5450: PPUSH
5451: LD_INT 25
5453: PPUSH
5454: LD_INT 0
5456: PPUSH
5457: LD_INT 6
5459: PUSH
5460: LD_INT 7
5462: PUSH
5463: LD_INT 8
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: LIST
5470: PUSH
5471: LD_OWVAR 67
5475: ARRAY
5476: PPUSH
5477: LD_INT 500
5479: PUSH
5480: LD_INT 100
5482: PUSH
5483: LD_INT 10
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: LIST
5490: PPUSH
5491: LD_INT 6
5493: PUSH
5494: LD_INT 7
5496: PUSH
5497: LD_INT 8
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: LIST
5504: PUSH
5505: LD_OWVAR 67
5509: ARRAY
5510: PUSH
5511: LD_INT 2
5513: PUSH
5514: LD_INT 0
5516: PUSH
5517: LD_INT 1
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: LIST
5524: LIST
5525: PPUSH
5526: CALL 27687 0 6
5530: ST_TO_ADDR
// end ;
5531: LD_VAR 0 1
5535: RET
// export function PrepareLegion ; var i , b , veh , tmp , tmp2 , cameras , side , sr , depot , base ; begin
5536: LD_INT 0
5538: PPUSH
5539: PPUSH
5540: PPUSH
5541: PPUSH
5542: PPUSH
5543: PPUSH
5544: PPUSH
5545: PPUSH
5546: PPUSH
5547: PPUSH
5548: PPUSH
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 0 , 0 , legApe , 0 ) ;
5549: LD_INT 0
5551: PPUSH
5552: LD_INT 0
5554: PPUSH
5555: LD_INT 6
5557: PPUSH
5558: LD_INT 0
5560: PPUSH
5561: LD_INT 0
5563: PPUSH
5564: LD_INT 0
5566: PPUSH
5567: LD_INT 0
5569: PPUSH
5570: LD_INT 8
5572: PPUSH
5573: LD_INT 0
5575: PPUSH
5576: CALL 52740 0 9
// side := 8 ;
5580: LD_ADDR_VAR 0 8
5584: PUSH
5585: LD_INT 8
5587: ST_TO_ADDR
// tmp := AreaToList ( minesArea , 0 ) ;
5588: LD_ADDR_VAR 0 5
5592: PUSH
5593: LD_INT 20
5595: PPUSH
5596: LD_INT 0
5598: PPUSH
5599: CALL_OW 517
5603: ST_TO_ADDR
// if Difficulty > 2 then
5604: LD_OWVAR 67
5608: PUSH
5609: LD_INT 2
5611: GREATER
5612: IFFALSE 5756
// begin tmp2 := AreaToList ( minesArea2 , 0 ) ;
5614: LD_ADDR_VAR 0 6
5618: PUSH
5619: LD_INT 27
5621: PPUSH
5622: LD_INT 0
5624: PPUSH
5625: CALL_OW 517
5629: ST_TO_ADDR
// for i = 1 to tmp2 [ 1 ] do
5630: LD_ADDR_VAR 0 2
5634: PUSH
5635: DOUBLE
5636: LD_INT 1
5638: DEC
5639: ST_TO_ADDR
5640: LD_VAR 0 6
5644: PUSH
5645: LD_INT 1
5647: ARRAY
5648: PUSH
5649: FOR_TO
5650: IFFALSE 5754
// begin tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , tmp2 [ 1 ] [ i ] ) ;
5652: LD_ADDR_VAR 0 5
5656: PUSH
5657: LD_VAR 0 5
5661: PPUSH
5662: LD_INT 1
5664: PUSH
5665: LD_VAR 0 5
5669: PUSH
5670: LD_INT 1
5672: ARRAY
5673: PUSH
5674: LD_INT 1
5676: PLUS
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: PPUSH
5682: LD_VAR 0 6
5686: PUSH
5687: LD_INT 1
5689: ARRAY
5690: PUSH
5691: LD_VAR 0 2
5695: ARRAY
5696: PPUSH
5697: CALL 24362 0 3
5701: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , tmp2 [ 2 ] [ i ] ) ;
5702: LD_ADDR_VAR 0 5
5706: PUSH
5707: LD_VAR 0 5
5711: PPUSH
5712: LD_INT 2
5714: PUSH
5715: LD_VAR 0 5
5719: PUSH
5720: LD_INT 2
5722: ARRAY
5723: PUSH
5724: LD_INT 1
5726: PLUS
5727: PUSH
5728: EMPTY
5729: LIST
5730: LIST
5731: PPUSH
5732: LD_VAR 0 6
5736: PUSH
5737: LD_INT 2
5739: ARRAY
5740: PUSH
5741: LD_VAR 0 2
5745: ARRAY
5746: PPUSH
5747: CALL 24362 0 3
5751: ST_TO_ADDR
// end ;
5752: GO 5649
5754: POP
5755: POP
// end ; if tmp then
5756: LD_VAR 0 5
5760: IFFALSE 5888
// begin for i = 1 to tmp [ 1 ] do
5762: LD_ADDR_VAR 0 2
5766: PUSH
5767: DOUBLE
5768: LD_INT 1
5770: DEC
5771: ST_TO_ADDR
5772: LD_VAR 0 5
5776: PUSH
5777: LD_INT 1
5779: ARRAY
5780: PUSH
5781: FOR_TO
5782: IFFALSE 5886
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side , 0 ) ;
5784: LD_VAR 0 5
5788: PUSH
5789: LD_INT 1
5791: ARRAY
5792: PUSH
5793: LD_VAR 0 2
5797: ARRAY
5798: PPUSH
5799: LD_VAR 0 5
5803: PUSH
5804: LD_INT 2
5806: ARRAY
5807: PUSH
5808: LD_VAR 0 2
5812: ARRAY
5813: PPUSH
5814: LD_VAR 0 8
5818: PPUSH
5819: LD_INT 0
5821: PPUSH
5822: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
5826: LD_ADDR_EXP 16
5830: PUSH
5831: LD_EXP 16
5835: PPUSH
5836: LD_EXP 16
5840: PUSH
5841: LD_INT 1
5843: PLUS
5844: PPUSH
5845: LD_VAR 0 5
5849: PUSH
5850: LD_INT 1
5852: ARRAY
5853: PUSH
5854: LD_VAR 0 2
5858: ARRAY
5859: PUSH
5860: LD_VAR 0 5
5864: PUSH
5865: LD_INT 2
5867: ARRAY
5868: PUSH
5869: LD_VAR 0 2
5873: ARRAY
5874: PUSH
5875: EMPTY
5876: LIST
5877: LIST
5878: PPUSH
5879: CALL_OW 2
5883: ST_TO_ADDR
// end ;
5884: GO 5781
5886: POP
5887: POP
// end ; cameras := [ [ 165 , 156 ] , [ 143 , 145 ] , [ 152 , 165 ] , [ 123 , 153 ] , [ 161 , 215 ] , [ 172 , 100 ] , [ 148 , 83 ] , [ 122 , 68 ] , [ 105 , 74 ] , [ 113 , 97 ] ] ;
5888: LD_ADDR_VAR 0 7
5892: PUSH
5893: LD_INT 165
5895: PUSH
5896: LD_INT 156
5898: PUSH
5899: EMPTY
5900: LIST
5901: LIST
5902: PUSH
5903: LD_INT 143
5905: PUSH
5906: LD_INT 145
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: PUSH
5913: LD_INT 152
5915: PUSH
5916: LD_INT 165
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: PUSH
5923: LD_INT 123
5925: PUSH
5926: LD_INT 153
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: PUSH
5933: LD_INT 161
5935: PUSH
5936: LD_INT 215
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: PUSH
5943: LD_INT 172
5945: PUSH
5946: LD_INT 100
5948: PUSH
5949: EMPTY
5950: LIST
5951: LIST
5952: PUSH
5953: LD_INT 148
5955: PUSH
5956: LD_INT 83
5958: PUSH
5959: EMPTY
5960: LIST
5961: LIST
5962: PUSH
5963: LD_INT 122
5965: PUSH
5966: LD_INT 68
5968: PUSH
5969: EMPTY
5970: LIST
5971: LIST
5972: PUSH
5973: LD_INT 105
5975: PUSH
5976: LD_INT 74
5978: PUSH
5979: EMPTY
5980: LIST
5981: LIST
5982: PUSH
5983: LD_INT 113
5985: PUSH
5986: LD_INT 97
5988: PUSH
5989: EMPTY
5990: LIST
5991: LIST
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: ST_TO_ADDR
// for i in cameras do
6005: LD_ADDR_VAR 0 2
6009: PUSH
6010: LD_VAR 0 7
6014: PUSH
6015: FOR_IN
6016: IFFALSE 6047
// HiddenCamera ( i [ 1 ] , i [ 2 ] , side ) ;
6018: LD_VAR 0 2
6022: PUSH
6023: LD_INT 1
6025: ARRAY
6026: PPUSH
6027: LD_VAR 0 2
6031: PUSH
6032: LD_INT 2
6034: ARRAY
6035: PPUSH
6036: LD_VAR 0 8
6040: PPUSH
6041: CALL_OW 244
6045: GO 6015
6047: POP
6048: POP
// tmp := [ [ 1 , 144 , 110 , 1 , 0 , 0 ] , [ 3 , 151 , 118 , 0 , 0 , 0 ] , [ 8 , 158 , 110 , 4 , 10 , 15 ] , [ 23 , 154 , 121 , 5 , 0 , 0 ] , [ 22 , 155 , 118 , 4 , 0 , 0 ] , [ 21 , 151 , 122 , 0 , 0 , 0 ] , [ 18 , 148 , 118 , 1 , 0 , 0 ] , [ 17 , 147 , 114 , 2 , 0 , 0 ] , [ 29 , 163 , 120 , 5 , 0 , 0 ] , [ 27 , 137 , 116 , 3 , 0 , 0 ] , [ 27 , 133 , 111 , 1 , 0 , 0 ] , [ 27 , 132 , 106 , 4 , 0 , 0 ] , [ 26 , 137 , 111 , 0 , 0 , 0 ] , [ 8 , 141 , 117 , 1 , 13 , 11 ] , [ 30 , 140 , 128 , 1 , 0 , 0 ] , [ 5 , 146 , 96 , 3 , 0 , 0 ] , [ 32 , 150 , 98 , 3 , 0 , 0 ] , [ 32 , 142 , 95 , 3 , 0 , 0 ] , [ 32 , 159 , 104 , 3 , 0 , 0 ] , [ 32 , 133 , 95 , 3 , 0 , 0 ] , [ 32 , 131 , 102 , 2 , 0 , 0 ] , [ 32 , 164 , 144 , 0 , 0 , 0 ] , [ 32 , 146 , 139 , 0 , 0 , 0 ] , [ 26 , 143 , 122 , 4 , 0 , 0 ] , [ 26 , 164 , 116 , 2 , 0 , 0 ] , ] ;
6049: LD_ADDR_VAR 0 5
6053: PUSH
6054: LD_INT 1
6056: PUSH
6057: LD_INT 144
6059: PUSH
6060: LD_INT 110
6062: PUSH
6063: LD_INT 1
6065: PUSH
6066: LD_INT 0
6068: PUSH
6069: LD_INT 0
6071: PUSH
6072: EMPTY
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: PUSH
6080: LD_INT 3
6082: PUSH
6083: LD_INT 151
6085: PUSH
6086: LD_INT 118
6088: PUSH
6089: LD_INT 0
6091: PUSH
6092: LD_INT 0
6094: PUSH
6095: LD_INT 0
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: PUSH
6106: LD_INT 8
6108: PUSH
6109: LD_INT 158
6111: PUSH
6112: LD_INT 110
6114: PUSH
6115: LD_INT 4
6117: PUSH
6118: LD_INT 10
6120: PUSH
6121: LD_INT 15
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: PUSH
6132: LD_INT 23
6134: PUSH
6135: LD_INT 154
6137: PUSH
6138: LD_INT 121
6140: PUSH
6141: LD_INT 5
6143: PUSH
6144: LD_INT 0
6146: PUSH
6147: LD_INT 0
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: PUSH
6158: LD_INT 22
6160: PUSH
6161: LD_INT 155
6163: PUSH
6164: LD_INT 118
6166: PUSH
6167: LD_INT 4
6169: PUSH
6170: LD_INT 0
6172: PUSH
6173: LD_INT 0
6175: PUSH
6176: EMPTY
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: PUSH
6184: LD_INT 21
6186: PUSH
6187: LD_INT 151
6189: PUSH
6190: LD_INT 122
6192: PUSH
6193: LD_INT 0
6195: PUSH
6196: LD_INT 0
6198: PUSH
6199: LD_INT 0
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: PUSH
6210: LD_INT 18
6212: PUSH
6213: LD_INT 148
6215: PUSH
6216: LD_INT 118
6218: PUSH
6219: LD_INT 1
6221: PUSH
6222: LD_INT 0
6224: PUSH
6225: LD_INT 0
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: PUSH
6236: LD_INT 17
6238: PUSH
6239: LD_INT 147
6241: PUSH
6242: LD_INT 114
6244: PUSH
6245: LD_INT 2
6247: PUSH
6248: LD_INT 0
6250: PUSH
6251: LD_INT 0
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: LIST
6261: PUSH
6262: LD_INT 29
6264: PUSH
6265: LD_INT 163
6267: PUSH
6268: LD_INT 120
6270: PUSH
6271: LD_INT 5
6273: PUSH
6274: LD_INT 0
6276: PUSH
6277: LD_INT 0
6279: PUSH
6280: EMPTY
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: PUSH
6288: LD_INT 27
6290: PUSH
6291: LD_INT 137
6293: PUSH
6294: LD_INT 116
6296: PUSH
6297: LD_INT 3
6299: PUSH
6300: LD_INT 0
6302: PUSH
6303: LD_INT 0
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: PUSH
6314: LD_INT 27
6316: PUSH
6317: LD_INT 133
6319: PUSH
6320: LD_INT 111
6322: PUSH
6323: LD_INT 1
6325: PUSH
6326: LD_INT 0
6328: PUSH
6329: LD_INT 0
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: PUSH
6340: LD_INT 27
6342: PUSH
6343: LD_INT 132
6345: PUSH
6346: LD_INT 106
6348: PUSH
6349: LD_INT 4
6351: PUSH
6352: LD_INT 0
6354: PUSH
6355: LD_INT 0
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: LIST
6365: PUSH
6366: LD_INT 26
6368: PUSH
6369: LD_INT 137
6371: PUSH
6372: LD_INT 111
6374: PUSH
6375: LD_INT 0
6377: PUSH
6378: LD_INT 0
6380: PUSH
6381: LD_INT 0
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: PUSH
6392: LD_INT 8
6394: PUSH
6395: LD_INT 141
6397: PUSH
6398: LD_INT 117
6400: PUSH
6401: LD_INT 1
6403: PUSH
6404: LD_INT 13
6406: PUSH
6407: LD_INT 11
6409: PUSH
6410: EMPTY
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: PUSH
6418: LD_INT 30
6420: PUSH
6421: LD_INT 140
6423: PUSH
6424: LD_INT 128
6426: PUSH
6427: LD_INT 1
6429: PUSH
6430: LD_INT 0
6432: PUSH
6433: LD_INT 0
6435: PUSH
6436: EMPTY
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: LIST
6443: PUSH
6444: LD_INT 5
6446: PUSH
6447: LD_INT 146
6449: PUSH
6450: LD_INT 96
6452: PUSH
6453: LD_INT 3
6455: PUSH
6456: LD_INT 0
6458: PUSH
6459: LD_INT 0
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: PUSH
6470: LD_INT 32
6472: PUSH
6473: LD_INT 150
6475: PUSH
6476: LD_INT 98
6478: PUSH
6479: LD_INT 3
6481: PUSH
6482: LD_INT 0
6484: PUSH
6485: LD_INT 0
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: PUSH
6496: LD_INT 32
6498: PUSH
6499: LD_INT 142
6501: PUSH
6502: LD_INT 95
6504: PUSH
6505: LD_INT 3
6507: PUSH
6508: LD_INT 0
6510: PUSH
6511: LD_INT 0
6513: PUSH
6514: EMPTY
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: PUSH
6522: LD_INT 32
6524: PUSH
6525: LD_INT 159
6527: PUSH
6528: LD_INT 104
6530: PUSH
6531: LD_INT 3
6533: PUSH
6534: LD_INT 0
6536: PUSH
6537: LD_INT 0
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: LIST
6547: PUSH
6548: LD_INT 32
6550: PUSH
6551: LD_INT 133
6553: PUSH
6554: LD_INT 95
6556: PUSH
6557: LD_INT 3
6559: PUSH
6560: LD_INT 0
6562: PUSH
6563: LD_INT 0
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: PUSH
6574: LD_INT 32
6576: PUSH
6577: LD_INT 131
6579: PUSH
6580: LD_INT 102
6582: PUSH
6583: LD_INT 2
6585: PUSH
6586: LD_INT 0
6588: PUSH
6589: LD_INT 0
6591: PUSH
6592: EMPTY
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: PUSH
6600: LD_INT 32
6602: PUSH
6603: LD_INT 164
6605: PUSH
6606: LD_INT 144
6608: PUSH
6609: LD_INT 0
6611: PUSH
6612: LD_INT 0
6614: PUSH
6615: LD_INT 0
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: PUSH
6626: LD_INT 32
6628: PUSH
6629: LD_INT 146
6631: PUSH
6632: LD_INT 139
6634: PUSH
6635: LD_INT 0
6637: PUSH
6638: LD_INT 0
6640: PUSH
6641: LD_INT 0
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: PUSH
6652: LD_INT 26
6654: PUSH
6655: LD_INT 143
6657: PUSH
6658: LD_INT 122
6660: PUSH
6661: LD_INT 4
6663: PUSH
6664: LD_INT 0
6666: PUSH
6667: LD_INT 0
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: PUSH
6678: LD_INT 26
6680: PUSH
6681: LD_INT 164
6683: PUSH
6684: LD_INT 116
6686: PUSH
6687: LD_INT 2
6689: PUSH
6690: LD_INT 0
6692: PUSH
6693: LD_INT 0
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: ST_TO_ADDR
// for i in tmp do
6731: LD_ADDR_VAR 0 2
6735: PUSH
6736: LD_VAR 0 5
6740: PUSH
6741: FOR_IN
6742: IFFALSE 6973
// begin uc_side := side ;
6744: LD_ADDR_OWVAR 20
6748: PUSH
6749: LD_VAR 0 8
6753: ST_TO_ADDR
// uc_nation := nation_arabian ;
6754: LD_ADDR_OWVAR 21
6758: PUSH
6759: LD_INT 2
6761: ST_TO_ADDR
// bc_type := i [ 1 ] ;
6762: LD_ADDR_OWVAR 42
6766: PUSH
6767: LD_VAR 0 2
6771: PUSH
6772: LD_INT 1
6774: ARRAY
6775: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
6776: LD_ADDR_OWVAR 43
6780: PUSH
6781: LD_INT 5
6783: PPUSH
6784: LD_INT 6
6786: PPUSH
6787: CALL_OW 12
6791: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
6792: LD_ADDR_OWVAR 44
6796: PUSH
6797: LD_VAR 0 2
6801: PUSH
6802: LD_INT 5
6804: ARRAY
6805: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
6806: LD_ADDR_OWVAR 45
6810: PUSH
6811: LD_VAR 0 2
6815: PUSH
6816: LD_INT 6
6818: ARRAY
6819: ST_TO_ADDR
// sr := 0 ;
6820: LD_ADDR_VAR 0 9
6824: PUSH
6825: LD_INT 0
6827: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
6828: LD_VAR 0 2
6832: PUSH
6833: LD_INT 1
6835: ARRAY
6836: PUSH
6837: LD_INT 29
6839: EQUAL
6840: IFFALSE 6852
// sr := mat_oil else
6842: LD_ADDR_VAR 0 9
6846: PUSH
6847: LD_INT 2
6849: ST_TO_ADDR
6850: GO 6874
// if i [ 1 ] = b_siberite_mine then
6852: LD_VAR 0 2
6856: PUSH
6857: LD_INT 1
6859: ARRAY
6860: PUSH
6861: LD_INT 30
6863: EQUAL
6864: IFFALSE 6874
// sr := mat_siberit ;
6866: LD_ADDR_VAR 0 9
6870: PUSH
6871: LD_INT 3
6873: ST_TO_ADDR
// if sr then
6874: LD_VAR 0 9
6878: IFFALSE 6934
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
6880: LD_VAR 0 2
6884: PUSH
6885: LD_INT 2
6887: ARRAY
6888: PPUSH
6889: LD_VAR 0 2
6893: PUSH
6894: LD_INT 3
6896: ARRAY
6897: PPUSH
6898: LD_VAR 0 9
6902: PPUSH
6903: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
6907: LD_VAR 0 2
6911: PUSH
6912: LD_INT 2
6914: ARRAY
6915: PPUSH
6916: LD_VAR 0 2
6920: PUSH
6921: LD_INT 3
6923: ARRAY
6924: PPUSH
6925: LD_VAR 0 8
6929: PPUSH
6930: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
6934: LD_ADDR_VAR 0 3
6938: PUSH
6939: LD_VAR 0 2
6943: PUSH
6944: LD_INT 2
6946: ARRAY
6947: PPUSH
6948: LD_VAR 0 2
6952: PUSH
6953: LD_INT 3
6955: ARRAY
6956: PPUSH
6957: LD_VAR 0 2
6961: PUSH
6962: LD_INT 4
6964: ARRAY
6965: PPUSH
6966: CALL_OW 47
6970: ST_TO_ADDR
// end ;
6971: GO 6741
6973: POP
6974: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6975: LD_ADDR_VAR 0 10
6979: PUSH
6980: LD_INT 22
6982: PUSH
6983: LD_VAR 0 8
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: PUSH
6992: LD_INT 30
6994: PUSH
6995: LD_INT 1
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PPUSH
7006: CALL_OW 69
7010: ST_TO_ADDR
// if not depot then
7011: LD_VAR 0 10
7015: NOT
7016: IFFALSE 7020
// exit ;
7018: GO 7266
// base := PrepareBase ( depot [ 1 ] , legBase , 0 , [ 7 , 8 , 10 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 14 , 6 , 6 , 5 ] ) ;
7020: LD_ADDR_VAR 0 11
7024: PUSH
7025: LD_VAR 0 10
7029: PUSH
7030: LD_INT 1
7032: ARRAY
7033: PPUSH
7034: LD_INT 6
7036: PPUSH
7037: LD_INT 0
7039: PPUSH
7040: LD_INT 7
7042: PUSH
7043: LD_INT 8
7045: PUSH
7046: LD_INT 10
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: LIST
7053: PUSH
7054: LD_OWVAR 67
7058: ARRAY
7059: PPUSH
7060: LD_INT 3000
7062: PUSH
7063: LD_INT 300
7065: PUSH
7066: LD_INT 100
7068: PUSH
7069: EMPTY
7070: LIST
7071: LIST
7072: LIST
7073: PPUSH
7074: LD_INT 14
7076: PUSH
7077: LD_INT 6
7079: PUSH
7080: LD_INT 6
7082: PUSH
7083: LD_INT 5
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: PPUSH
7092: CALL 27687 0 6
7096: ST_TO_ADDR
// if not base then
7097: LD_VAR 0 11
7101: NOT
7102: IFFALSE 7106
// exit ;
7104: GO 7266
// if Difficulty > 1 then
7106: LD_OWVAR 67
7110: PUSH
7111: LD_INT 1
7113: GREATER
7114: IFFALSE 7187
// begin InitHc ;
7116: CALL_OW 19
// PrepareHuman ( sex_male , class_sniper , [ 5 , 8 ] [ Difficulty - 1 ] ) ;
7120: LD_INT 1
7122: PPUSH
7123: LD_INT 5
7125: PPUSH
7126: LD_INT 5
7128: PUSH
7129: LD_INT 8
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: PUSH
7136: LD_OWVAR 67
7140: PUSH
7141: LD_INT 1
7143: MINUS
7144: ARRAY
7145: PPUSH
7146: CALL_OW 380
// for i = 1 to Difficulty do
7150: LD_ADDR_VAR 0 2
7154: PUSH
7155: DOUBLE
7156: LD_INT 1
7158: DEC
7159: ST_TO_ADDR
7160: LD_OWVAR 67
7164: PUSH
7165: FOR_TO
7166: IFFALSE 7185
// PlaceUnitArea ( CreateHuman , sniperGuardArea , false ) ;
7168: CALL_OW 44
7172: PPUSH
7173: LD_INT 24
7175: PPUSH
7176: LD_INT 0
7178: PPUSH
7179: CALL_OW 49
7183: GO 7165
7185: POP
7186: POP
// end ; mc_bases := Replace ( mc_bases , mc_leg , base ) ;
7187: LD_ADDR_EXP 50
7191: PUSH
7192: LD_EXP 50
7196: PPUSH
7197: LD_EXP 6
7201: PPUSH
7202: LD_VAR 0 11
7206: PPUSH
7207: CALL_OW 1
7211: ST_TO_ADDR
// hc_gallery := ru ;
7212: LD_ADDR_OWVAR 33
7216: PUSH
7217: LD_STRING ru
7219: ST_TO_ADDR
// hc_face_number := 44 ;
7220: LD_ADDR_OWVAR 34
7224: PUSH
7225: LD_INT 44
7227: ST_TO_ADDR
// hc_name := Robert Farmer ;
7228: LD_ADDR_OWVAR 26
7232: PUSH
7233: LD_STRING Robert Farmer
7235: ST_TO_ADDR
// hc_sex := sex_male ;
7236: LD_ADDR_OWVAR 27
7240: PUSH
7241: LD_INT 1
7243: ST_TO_ADDR
// hc_class := 1 ;
7244: LD_ADDR_OWVAR 28
7248: PUSH
7249: LD_INT 1
7251: ST_TO_ADDR
// Farmer := CreateHuman ;
7252: LD_ADDR_EXP 13
7256: PUSH
7257: CALL_OW 44
7261: ST_TO_ADDR
// InitHc ;
7262: CALL_OW 19
// end ;
7266: LD_VAR 0 1
7270: RET
// export function PrepareAmericans ; var i , b , tmp , side , sr , base , depot ; begin
7271: LD_INT 0
7273: PPUSH
7274: PPUSH
7275: PPUSH
7276: PPUSH
7277: PPUSH
7278: PPUSH
7279: PPUSH
7280: PPUSH
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , amerApe , 0 ) ;
7281: LD_INT 0
7283: PPUSH
7284: LD_INT 0
7286: PPUSH
7287: LD_INT 4
7289: PPUSH
7290: LD_INT 0
7292: PPUSH
7293: LD_INT 0
7295: PPUSH
7296: LD_INT 0
7298: PPUSH
7299: LD_INT 0
7301: PPUSH
7302: LD_INT 10
7304: PPUSH
7305: LD_INT 0
7307: PPUSH
7308: CALL 52740 0 9
// side := 4 ;
7312: LD_ADDR_VAR 0 5
7316: PUSH
7317: LD_INT 4
7319: ST_TO_ADDR
// tmp := [ [ 1 , 144 , 18 , 4 , 0 , 0 ] , [ 3 , 137 , 8 , 4 , 0 , 0 ] , [ 22 , 141 , 8 , 4 , 0 , 0 ] , [ 25 , 137 , 5 , 3 , 0 , 0 ] , [ 18 , 137 , 12 , 0 , 0 , 0 ] , [ 17 , 133 , 4 , 2 , 0 , 0 ] , [ 16 , 140 , 11 , 5 , 0 , 0 ] , [ 8 , 149 , 26 , 4 , 10 , 15 ] , [ 8 , 142 , 26 , 1 , 11 , 12 ] , [ 27 , 153 , 32 , 5 , 0 , 0 ] , [ 27 , 145 , 32 , 3 , 0 , 0 ] , [ 27 , 138 , 2 , 4 , 0 , 0 ] , [ 27 , 144 , 13 , 0 , 0 , 0 ] , [ 26 , 124 , 2 , 4 , 0 , 0 ] , [ 26 , 121 , 2 , 2 , 0 , 0 ] , [ 26 , 118 , 2 , 1 , 0 , 0 ] , [ 29 , 159 , 47 , 2 , 0 , 0 ] , [ 32 , 146 , 41 , 0 , 0 , 0 ] , [ 33 , 136 , 37 , 0 , 0 , 0 ] , [ 33 , 132 , 34 , 0 , 0 , 0 ] , [ 36 , 124 , 7 , 1 , 0 , 0 ] , [ 5 , 124 , 19 , 0 , 0 , 0 ] , [ 32 , 127 , 23 , 0 , 0 , 0 ] ] ;
7320: LD_ADDR_VAR 0 4
7324: PUSH
7325: LD_INT 1
7327: PUSH
7328: LD_INT 144
7330: PUSH
7331: LD_INT 18
7333: PUSH
7334: LD_INT 4
7336: PUSH
7337: LD_INT 0
7339: PUSH
7340: LD_INT 0
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: LIST
7350: PUSH
7351: LD_INT 3
7353: PUSH
7354: LD_INT 137
7356: PUSH
7357: LD_INT 8
7359: PUSH
7360: LD_INT 4
7362: PUSH
7363: LD_INT 0
7365: PUSH
7366: LD_INT 0
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: PUSH
7377: LD_INT 22
7379: PUSH
7380: LD_INT 141
7382: PUSH
7383: LD_INT 8
7385: PUSH
7386: LD_INT 4
7388: PUSH
7389: LD_INT 0
7391: PUSH
7392: LD_INT 0
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: LIST
7401: LIST
7402: PUSH
7403: LD_INT 25
7405: PUSH
7406: LD_INT 137
7408: PUSH
7409: LD_INT 5
7411: PUSH
7412: LD_INT 3
7414: PUSH
7415: LD_INT 0
7417: PUSH
7418: LD_INT 0
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: PUSH
7429: LD_INT 18
7431: PUSH
7432: LD_INT 137
7434: PUSH
7435: LD_INT 12
7437: PUSH
7438: LD_INT 0
7440: PUSH
7441: LD_INT 0
7443: PUSH
7444: LD_INT 0
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: PUSH
7455: LD_INT 17
7457: PUSH
7458: LD_INT 133
7460: PUSH
7461: LD_INT 4
7463: PUSH
7464: LD_INT 2
7466: PUSH
7467: LD_INT 0
7469: PUSH
7470: LD_INT 0
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 16
7483: PUSH
7484: LD_INT 140
7486: PUSH
7487: LD_INT 11
7489: PUSH
7490: LD_INT 5
7492: PUSH
7493: LD_INT 0
7495: PUSH
7496: LD_INT 0
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: PUSH
7507: LD_INT 8
7509: PUSH
7510: LD_INT 149
7512: PUSH
7513: LD_INT 26
7515: PUSH
7516: LD_INT 4
7518: PUSH
7519: LD_INT 10
7521: PUSH
7522: LD_INT 15
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: PUSH
7533: LD_INT 8
7535: PUSH
7536: LD_INT 142
7538: PUSH
7539: LD_INT 26
7541: PUSH
7542: LD_INT 1
7544: PUSH
7545: LD_INT 11
7547: PUSH
7548: LD_INT 12
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: PUSH
7559: LD_INT 27
7561: PUSH
7562: LD_INT 153
7564: PUSH
7565: LD_INT 32
7567: PUSH
7568: LD_INT 5
7570: PUSH
7571: LD_INT 0
7573: PUSH
7574: LD_INT 0
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: PUSH
7585: LD_INT 27
7587: PUSH
7588: LD_INT 145
7590: PUSH
7591: LD_INT 32
7593: PUSH
7594: LD_INT 3
7596: PUSH
7597: LD_INT 0
7599: PUSH
7600: LD_INT 0
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: PUSH
7611: LD_INT 27
7613: PUSH
7614: LD_INT 138
7616: PUSH
7617: LD_INT 2
7619: PUSH
7620: LD_INT 4
7622: PUSH
7623: LD_INT 0
7625: PUSH
7626: LD_INT 0
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: PUSH
7637: LD_INT 27
7639: PUSH
7640: LD_INT 144
7642: PUSH
7643: LD_INT 13
7645: PUSH
7646: LD_INT 0
7648: PUSH
7649: LD_INT 0
7651: PUSH
7652: LD_INT 0
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: PUSH
7663: LD_INT 26
7665: PUSH
7666: LD_INT 124
7668: PUSH
7669: LD_INT 2
7671: PUSH
7672: LD_INT 4
7674: PUSH
7675: LD_INT 0
7677: PUSH
7678: LD_INT 0
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: PUSH
7689: LD_INT 26
7691: PUSH
7692: LD_INT 121
7694: PUSH
7695: LD_INT 2
7697: PUSH
7698: LD_INT 2
7700: PUSH
7701: LD_INT 0
7703: PUSH
7704: LD_INT 0
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: PUSH
7715: LD_INT 26
7717: PUSH
7718: LD_INT 118
7720: PUSH
7721: LD_INT 2
7723: PUSH
7724: LD_INT 1
7726: PUSH
7727: LD_INT 0
7729: PUSH
7730: LD_INT 0
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: PUSH
7741: LD_INT 29
7743: PUSH
7744: LD_INT 159
7746: PUSH
7747: LD_INT 47
7749: PUSH
7750: LD_INT 2
7752: PUSH
7753: LD_INT 0
7755: PUSH
7756: LD_INT 0
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: PUSH
7767: LD_INT 32
7769: PUSH
7770: LD_INT 146
7772: PUSH
7773: LD_INT 41
7775: PUSH
7776: LD_INT 0
7778: PUSH
7779: LD_INT 0
7781: PUSH
7782: LD_INT 0
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: PUSH
7793: LD_INT 33
7795: PUSH
7796: LD_INT 136
7798: PUSH
7799: LD_INT 37
7801: PUSH
7802: LD_INT 0
7804: PUSH
7805: LD_INT 0
7807: PUSH
7808: LD_INT 0
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 33
7821: PUSH
7822: LD_INT 132
7824: PUSH
7825: LD_INT 34
7827: PUSH
7828: LD_INT 0
7830: PUSH
7831: LD_INT 0
7833: PUSH
7834: LD_INT 0
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 36
7847: PUSH
7848: LD_INT 124
7850: PUSH
7851: LD_INT 7
7853: PUSH
7854: LD_INT 1
7856: PUSH
7857: LD_INT 0
7859: PUSH
7860: LD_INT 0
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: PUSH
7871: LD_INT 5
7873: PUSH
7874: LD_INT 124
7876: PUSH
7877: LD_INT 19
7879: PUSH
7880: LD_INT 0
7882: PUSH
7883: LD_INT 0
7885: PUSH
7886: LD_INT 0
7888: PUSH
7889: EMPTY
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: PUSH
7897: LD_INT 32
7899: PUSH
7900: LD_INT 127
7902: PUSH
7903: LD_INT 23
7905: PUSH
7906: LD_INT 0
7908: PUSH
7909: LD_INT 0
7911: PUSH
7912: LD_INT 0
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: ST_TO_ADDR
// for i in tmp do
7948: LD_ADDR_VAR 0 2
7952: PUSH
7953: LD_VAR 0 4
7957: PUSH
7958: FOR_IN
7959: IFFALSE 8190
// begin uc_side := side ;
7961: LD_ADDR_OWVAR 20
7965: PUSH
7966: LD_VAR 0 5
7970: ST_TO_ADDR
// uc_nation := nation_american ;
7971: LD_ADDR_OWVAR 21
7975: PUSH
7976: LD_INT 1
7978: ST_TO_ADDR
// bc_type := i [ 1 ] ;
7979: LD_ADDR_OWVAR 42
7983: PUSH
7984: LD_VAR 0 2
7988: PUSH
7989: LD_INT 1
7991: ARRAY
7992: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
7993: LD_ADDR_OWVAR 43
7997: PUSH
7998: LD_INT 5
8000: PPUSH
8001: LD_INT 6
8003: PPUSH
8004: CALL_OW 12
8008: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
8009: LD_ADDR_OWVAR 44
8013: PUSH
8014: LD_VAR 0 2
8018: PUSH
8019: LD_INT 5
8021: ARRAY
8022: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
8023: LD_ADDR_OWVAR 45
8027: PUSH
8028: LD_VAR 0 2
8032: PUSH
8033: LD_INT 6
8035: ARRAY
8036: ST_TO_ADDR
// sr := 0 ;
8037: LD_ADDR_VAR 0 6
8041: PUSH
8042: LD_INT 0
8044: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
8045: LD_VAR 0 2
8049: PUSH
8050: LD_INT 1
8052: ARRAY
8053: PUSH
8054: LD_INT 29
8056: EQUAL
8057: IFFALSE 8069
// sr := mat_oil else
8059: LD_ADDR_VAR 0 6
8063: PUSH
8064: LD_INT 2
8066: ST_TO_ADDR
8067: GO 8091
// if i [ 1 ] = b_siberite_mine then
8069: LD_VAR 0 2
8073: PUSH
8074: LD_INT 1
8076: ARRAY
8077: PUSH
8078: LD_INT 30
8080: EQUAL
8081: IFFALSE 8091
// sr := mat_siberit ;
8083: LD_ADDR_VAR 0 6
8087: PUSH
8088: LD_INT 3
8090: ST_TO_ADDR
// if sr then
8091: LD_VAR 0 6
8095: IFFALSE 8151
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
8097: LD_VAR 0 2
8101: PUSH
8102: LD_INT 2
8104: ARRAY
8105: PPUSH
8106: LD_VAR 0 2
8110: PUSH
8111: LD_INT 3
8113: ARRAY
8114: PPUSH
8115: LD_VAR 0 6
8119: PPUSH
8120: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
8124: LD_VAR 0 2
8128: PUSH
8129: LD_INT 2
8131: ARRAY
8132: PPUSH
8133: LD_VAR 0 2
8137: PUSH
8138: LD_INT 3
8140: ARRAY
8141: PPUSH
8142: LD_VAR 0 5
8146: PPUSH
8147: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
8151: LD_ADDR_VAR 0 3
8155: PUSH
8156: LD_VAR 0 2
8160: PUSH
8161: LD_INT 2
8163: ARRAY
8164: PPUSH
8165: LD_VAR 0 2
8169: PUSH
8170: LD_INT 3
8172: ARRAY
8173: PPUSH
8174: LD_VAR 0 2
8178: PUSH
8179: LD_INT 4
8181: ARRAY
8182: PPUSH
8183: CALL_OW 47
8187: ST_TO_ADDR
// end ;
8188: GO 7958
8190: POP
8191: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
8192: LD_ADDR_VAR 0 8
8196: PUSH
8197: LD_INT 22
8199: PUSH
8200: LD_VAR 0 5
8204: PUSH
8205: EMPTY
8206: LIST
8207: LIST
8208: PUSH
8209: LD_INT 30
8211: PUSH
8212: LD_INT 1
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: PPUSH
8223: CALL_OW 69
8227: ST_TO_ADDR
// if not depot then
8228: LD_VAR 0 8
8232: NOT
8233: IFFALSE 8237
// exit ;
8235: GO 8509
// base := PrepareBase ( depot [ 1 ] , amerBase , theta3 , [ 8 , 7 , 6 ] [ Difficulty ] , [ [ 2500 , 2000 , 1750 ] [ Difficulty ] , [ 300 , 250 , 200 ] [ Difficulty ] , [ 80 , 60 , 50 ] [ Difficulty ] ] , [ 7 , 6 , 5 , 5 ] ) ;
8237: LD_ADDR_VAR 0 7
8241: PUSH
8242: LD_VAR 0 8
8246: PUSH
8247: LD_INT 1
8249: ARRAY
8250: PPUSH
8251: LD_INT 3
8253: PPUSH
8254: LD_STRING theta3
8256: PPUSH
8257: LD_INT 8
8259: PUSH
8260: LD_INT 7
8262: PUSH
8263: LD_INT 6
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: LIST
8270: PUSH
8271: LD_OWVAR 67
8275: ARRAY
8276: PPUSH
8277: LD_INT 2500
8279: PUSH
8280: LD_INT 2000
8282: PUSH
8283: LD_INT 1750
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: LIST
8290: PUSH
8291: LD_OWVAR 67
8295: ARRAY
8296: PUSH
8297: LD_INT 300
8299: PUSH
8300: LD_INT 250
8302: PUSH
8303: LD_INT 200
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: LIST
8310: PUSH
8311: LD_OWVAR 67
8315: ARRAY
8316: PUSH
8317: LD_INT 80
8319: PUSH
8320: LD_INT 60
8322: PUSH
8323: LD_INT 50
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: LIST
8330: PUSH
8331: LD_OWVAR 67
8335: ARRAY
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: LIST
8341: PPUSH
8342: LD_INT 7
8344: PUSH
8345: LD_INT 6
8347: PUSH
8348: LD_INT 5
8350: PUSH
8351: LD_INT 5
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: PPUSH
8360: CALL 27687 0 6
8364: ST_TO_ADDR
// if not base then
8365: LD_VAR 0 7
8369: NOT
8370: IFFALSE 8374
// exit ;
8372: GO 8509
// mc_bases := Replace ( mc_bases , mc_amer , base ) ;
8374: LD_ADDR_EXP 50
8378: PUSH
8379: LD_EXP 50
8383: PPUSH
8384: LD_EXP 5
8388: PPUSH
8389: LD_VAR 0 7
8393: PPUSH
8394: CALL_OW 1
8398: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
8399: LD_INT 1
8401: PPUSH
8402: LD_INT 1
8404: PPUSH
8405: LD_INT 7
8407: PPUSH
8408: CALL_OW 380
// allyCommander := CreateHuman ;
8412: LD_ADDR_EXP 11
8416: PUSH
8417: CALL_OW 44
8421: ST_TO_ADDR
// PlaceUnitXY ( allyCommander , 139 , 15 , false ) ;
8422: LD_EXP 11
8426: PPUSH
8427: LD_INT 139
8429: PPUSH
8430: LD_INT 15
8432: PPUSH
8433: LD_INT 0
8435: PPUSH
8436: CALL_OW 48
// ComTurnXY ( allyCommander , 137 , 15 ) ;
8440: LD_EXP 11
8444: PPUSH
8445: LD_INT 137
8447: PPUSH
8448: LD_INT 15
8450: PPUSH
8451: CALL_OW 118
// hc_gallery := us ;
8455: LD_ADDR_OWVAR 33
8459: PUSH
8460: LD_STRING us
8462: ST_TO_ADDR
// hc_face_number := 7 ;
8463: LD_ADDR_OWVAR 34
8467: PUSH
8468: LD_INT 7
8470: ST_TO_ADDR
// hc_name := Arthur Powell ;
8471: LD_ADDR_OWVAR 26
8475: PUSH
8476: LD_STRING Arthur Powell
8478: ST_TO_ADDR
// hc_sex := sex_male ;
8479: LD_ADDR_OWVAR 27
8483: PUSH
8484: LD_INT 1
8486: ST_TO_ADDR
// hc_class := 1 ;
8487: LD_ADDR_OWVAR 28
8491: PUSH
8492: LD_INT 1
8494: ST_TO_ADDR
// Powell := CreateHuman ;
8495: LD_ADDR_EXP 12
8499: PUSH
8500: CALL_OW 44
8504: ST_TO_ADDR
// InitHc ;
8505: CALL_OW 19
// end ;
8509: LD_VAR 0 1
8513: RET
// export function PreparePlayer ; var i , side , techs , tanks , cl , chassis , engines , weapons ; begin
8514: LD_INT 0
8516: PPUSH
8517: PPUSH
8518: PPUSH
8519: PPUSH
8520: PPUSH
8521: PPUSH
8522: PPUSH
8523: PPUSH
8524: PPUSH
// side := 1 ;
8525: LD_ADDR_VAR 0 3
8529: PUSH
8530: LD_INT 1
8532: ST_TO_ADDR
// result := [ [ ] , [ ] ] ;
8533: LD_ADDR_VAR 0 1
8537: PUSH
8538: EMPTY
8539: PUSH
8540: EMPTY
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: ST_TO_ADDR
// uc_side := side ;
8546: LD_ADDR_OWVAR 20
8550: PUSH
8551: LD_VAR 0 3
8555: ST_TO_ADDR
// uc_nation := nation_american ;
8556: LD_ADDR_OWVAR 21
8560: PUSH
8561: LD_INT 1
8563: ST_TO_ADDR
// InitHc ;
8564: CALL_OW 19
// InitVc ;
8568: CALL_OW 20
// hc_importance := 0 ;
8572: LD_ADDR_OWVAR 32
8576: PUSH
8577: LD_INT 0
8579: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked ] ;
8580: LD_ADDR_VAR 0 7
8584: PUSH
8585: LD_INT 2
8587: PUSH
8588: LD_INT 3
8590: PUSH
8591: LD_INT 3
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: LIST
8598: ST_TO_ADDR
// if commander = 2 then
8599: LD_EXP 25
8603: PUSH
8604: LD_INT 2
8606: EQUAL
8607: IFFALSE 8628
// chassis := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] ;
8609: LD_ADDR_VAR 0 7
8613: PUSH
8614: LD_INT 3
8616: PUSH
8617: LD_INT 4
8619: PUSH
8620: LD_INT 4
8622: PUSH
8623: EMPTY
8624: LIST
8625: LIST
8626: LIST
8627: ST_TO_ADDR
// if commander = 3 then
8628: LD_EXP 25
8632: PUSH
8633: LD_INT 3
8635: EQUAL
8636: IFFALSE 8657
// chassis := [ us_medium_wheeled , us_morphling , us_morphling ] ;
8638: LD_ADDR_VAR 0 7
8642: PUSH
8643: LD_INT 2
8645: PUSH
8646: LD_INT 5
8648: PUSH
8649: LD_INT 5
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: LIST
8656: ST_TO_ADDR
// engines := [ engine_solar , engine_solar , engine_combustion ] ;
8657: LD_ADDR_VAR 0 8
8661: PUSH
8662: LD_INT 2
8664: PUSH
8665: LD_INT 2
8667: PUSH
8668: LD_INT 1
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: LIST
8675: ST_TO_ADDR
// if commander = 2 then
8676: LD_EXP 25
8680: PUSH
8681: LD_INT 2
8683: EQUAL
8684: IFFALSE 8705
// engines := [ engine_combustion , engine_combustion , engine_siberite ] ;
8686: LD_ADDR_VAR 0 8
8690: PUSH
8691: LD_INT 1
8693: PUSH
8694: LD_INT 1
8696: PUSH
8697: LD_INT 3
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: LIST
8704: ST_TO_ADDR
// if commander = 3 then
8705: LD_EXP 25
8709: PUSH
8710: LD_INT 3
8712: EQUAL
8713: IFFALSE 8734
// engines := [ engine_siberite , engine_siberite , engine_combustion ] ;
8715: LD_ADDR_VAR 0 8
8719: PUSH
8720: LD_INT 3
8722: PUSH
8723: LD_INT 3
8725: PUSH
8726: LD_INT 1
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: LIST
8733: ST_TO_ADDR
// weapons := [ us_double_gun , us_light_gun , us_gatling_gun ] ;
8734: LD_ADDR_VAR 0 9
8738: PUSH
8739: LD_INT 5
8741: PUSH
8742: LD_INT 3
8744: PUSH
8745: LD_INT 4
8747: PUSH
8748: EMPTY
8749: LIST
8750: LIST
8751: LIST
8752: ST_TO_ADDR
// if commander = 2 then
8753: LD_EXP 25
8757: PUSH
8758: LD_INT 2
8760: EQUAL
8761: IFFALSE 8782
// weapons := [ us_rocket_launcher , us_double_gun , us_heavy_gun ] ;
8763: LD_ADDR_VAR 0 9
8767: PUSH
8768: LD_INT 7
8770: PUSH
8771: LD_INT 5
8773: PUSH
8774: LD_INT 6
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: LIST
8781: ST_TO_ADDR
// if commander = 3 then
8782: LD_EXP 25
8786: PUSH
8787: LD_INT 3
8789: EQUAL
8790: IFFALSE 8811
// weapons := [ us_laser , us_double_laser , us_rocket_launcher ] ;
8792: LD_ADDR_VAR 0 9
8796: PUSH
8797: LD_INT 9
8799: PUSH
8800: LD_INT 10
8802: PUSH
8803: LD_INT 7
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: LIST
8810: ST_TO_ADDR
// tanks := [ 5 , 5 , 4 ] [ Difficulty ] ;
8811: LD_ADDR_VAR 0 5
8815: PUSH
8816: LD_INT 5
8818: PUSH
8819: LD_INT 5
8821: PUSH
8822: LD_INT 4
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: LIST
8829: PUSH
8830: LD_OWVAR 67
8834: ARRAY
8835: ST_TO_ADDR
// if commander = 2 then
8836: LD_EXP 25
8840: PUSH
8841: LD_INT 2
8843: EQUAL
8844: IFFALSE 8860
// tanks := tanks + 3 ;
8846: LD_ADDR_VAR 0 5
8850: PUSH
8851: LD_VAR 0 5
8855: PUSH
8856: LD_INT 3
8858: PLUS
8859: ST_TO_ADDR
// for i = 1 to tanks do
8860: LD_ADDR_VAR 0 2
8864: PUSH
8865: DOUBLE
8866: LD_INT 1
8868: DEC
8869: ST_TO_ADDR
8870: LD_VAR 0 5
8874: PUSH
8875: FOR_TO
8876: IFFALSE 8986
// begin PrepareVehicle ( chassis [ i mod 3 + 1 ] , engines [ rand ( 1 , 3 ) ] , control_manual , weapons [ i mod 3 + 1 ] , rand ( 60 , 70 ) ) ;
8878: LD_VAR 0 7
8882: PUSH
8883: LD_VAR 0 2
8887: PUSH
8888: LD_INT 3
8890: MOD
8891: PUSH
8892: LD_INT 1
8894: PLUS
8895: ARRAY
8896: PPUSH
8897: LD_VAR 0 8
8901: PUSH
8902: LD_INT 1
8904: PPUSH
8905: LD_INT 3
8907: PPUSH
8908: CALL_OW 12
8912: ARRAY
8913: PPUSH
8914: LD_INT 1
8916: PPUSH
8917: LD_VAR 0 9
8921: PUSH
8922: LD_VAR 0 2
8926: PUSH
8927: LD_INT 3
8929: MOD
8930: PUSH
8931: LD_INT 1
8933: PLUS
8934: ARRAY
8935: PPUSH
8936: LD_INT 60
8938: PPUSH
8939: LD_INT 70
8941: PPUSH
8942: CALL_OW 12
8946: PPUSH
8947: CALL 24240 0 5
// result := Replace ( result , 1 , result [ 1 ] ^ CreateVehicle ) ;
8951: LD_ADDR_VAR 0 1
8955: PUSH
8956: LD_VAR 0 1
8960: PPUSH
8961: LD_INT 1
8963: PPUSH
8964: LD_VAR 0 1
8968: PUSH
8969: LD_INT 1
8971: ARRAY
8972: PUSH
8973: CALL_OW 45
8977: ADD
8978: PPUSH
8979: CALL_OW 1
8983: ST_TO_ADDR
// end ;
8984: GO 8875
8986: POP
8987: POP
// cl := 1 ;
8988: LD_ADDR_VAR 0 6
8992: PUSH
8993: LD_INT 1
8995: ST_TO_ADDR
// for i = 1 to 10 do
8996: LD_ADDR_VAR 0 2
9000: PUSH
9001: DOUBLE
9002: LD_INT 1
9004: DEC
9005: ST_TO_ADDR
9006: LD_INT 10
9008: PUSH
9009: FOR_TO
9010: IFFALSE 9125
// begin if i mod 4 = 0 then
9012: LD_VAR 0 2
9016: PUSH
9017: LD_INT 4
9019: MOD
9020: PUSH
9021: LD_INT 0
9023: EQUAL
9024: IFFALSE 9040
// cl := cl + 1 ;
9026: LD_ADDR_VAR 0 6
9030: PUSH
9031: LD_VAR 0 6
9035: PUSH
9036: LD_INT 1
9038: PLUS
9039: ST_TO_ADDR
// if cl = 2 then
9040: LD_VAR 0 6
9044: PUSH
9045: LD_INT 2
9047: EQUAL
9048: IFFALSE 9058
// cl := 3 ;
9050: LD_ADDR_VAR 0 6
9054: PUSH
9055: LD_INT 3
9057: ST_TO_ADDR
// PrepareHuman ( false , cl , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
9058: LD_INT 0
9060: PPUSH
9061: LD_VAR 0 6
9065: PPUSH
9066: LD_INT 6
9068: PUSH
9069: LD_INT 6
9071: PUSH
9072: LD_INT 5
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: LIST
9079: PUSH
9080: LD_OWVAR 67
9084: ARRAY
9085: PPUSH
9086: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9090: LD_ADDR_VAR 0 1
9094: PUSH
9095: LD_VAR 0 1
9099: PPUSH
9100: LD_INT 2
9102: PPUSH
9103: LD_VAR 0 1
9107: PUSH
9108: LD_INT 2
9110: ARRAY
9111: PUSH
9112: CALL_OW 44
9116: ADD
9117: PPUSH
9118: CALL_OW 1
9122: ST_TO_ADDR
// end ;
9123: GO 9009
9125: POP
9126: POP
// if commander = 1 then
9127: LD_EXP 25
9131: PUSH
9132: LD_INT 1
9134: EQUAL
9135: IFFALSE 9203
// for i = 1 to 4 do
9137: LD_ADDR_VAR 0 2
9141: PUSH
9142: DOUBLE
9143: LD_INT 1
9145: DEC
9146: ST_TO_ADDR
9147: LD_INT 4
9149: PUSH
9150: FOR_TO
9151: IFFALSE 9201
// begin PrepareHuman ( false , class_soldier , 8 ) ;
9153: LD_INT 0
9155: PPUSH
9156: LD_INT 1
9158: PPUSH
9159: LD_INT 8
9161: PPUSH
9162: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9166: LD_ADDR_VAR 0 1
9170: PUSH
9171: LD_VAR 0 1
9175: PPUSH
9176: LD_INT 2
9178: PPUSH
9179: LD_VAR 0 1
9183: PUSH
9184: LD_INT 2
9186: ARRAY
9187: PUSH
9188: CALL_OW 44
9192: ADD
9193: PPUSH
9194: CALL_OW 1
9198: ST_TO_ADDR
// end ;
9199: GO 9150
9201: POP
9202: POP
// techs := [ ] ;
9203: LD_ADDR_VAR 0 4
9207: PUSH
9208: EMPTY
9209: ST_TO_ADDR
// if commander = 1 then
9210: LD_EXP 25
9214: PUSH
9215: LD_INT 1
9217: EQUAL
9218: IFFALSE 9243
// techs := [ tech_weap1 , tech_weap2 , tech_weap3 , tech_lasSight ] ;
9220: LD_ADDR_VAR 0 4
9224: PUSH
9225: LD_INT 51
9227: PUSH
9228: LD_INT 52
9230: PUSH
9231: LD_INT 53
9233: PUSH
9234: LD_INT 12
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: ST_TO_ADDR
// if commander = 2 then
9243: LD_EXP 25
9247: PUSH
9248: LD_INT 2
9250: EQUAL
9251: IFFALSE 9288
// techs := [ tech_tech1 , tech_oilEng , tech_oilPow , tech_solEng , tech_solPow , tech_opto1 , tech_radar ] ;
9253: LD_ADDR_VAR 0 4
9257: PUSH
9258: LD_INT 48
9260: PUSH
9261: LD_INT 47
9263: PUSH
9264: LD_INT 46
9266: PUSH
9267: LD_INT 45
9269: PUSH
9270: LD_INT 35
9272: PUSH
9273: LD_INT 60
9275: PUSH
9276: LD_INT 6
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: ST_TO_ADDR
// if commander = 3 then
9288: LD_EXP 25
9292: PUSH
9293: LD_INT 3
9295: EQUAL
9296: IFFALSE 9345
// techs := [ tech_advAI , tech_advchassis , tech_ai , tech_comp1 , tech_comp2 , tech_oilEng , tech_oilPow , tech_weap1 , tech_gatling , tech_gun ] ;
9298: LD_ADDR_VAR 0 4
9302: PUSH
9303: LD_INT 27
9305: PUSH
9306: LD_INT 36
9308: PUSH
9309: LD_INT 32
9311: PUSH
9312: LD_INT 57
9314: PUSH
9315: LD_INT 58
9317: PUSH
9318: LD_INT 47
9320: PUSH
9321: LD_INT 46
9323: PUSH
9324: LD_INT 51
9326: PUSH
9327: LD_INT 69
9329: PUSH
9330: LD_INT 39
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: ST_TO_ADDR
// if techs then
9345: LD_VAR 0 4
9349: IFFALSE 9383
// for i in techs do
9351: LD_ADDR_VAR 0 2
9355: PUSH
9356: LD_VAR 0 4
9360: PUSH
9361: FOR_IN
9362: IFFALSE 9381
// SetTech ( i , 1 , state_researched ) ;
9364: LD_VAR 0 2
9368: PPUSH
9369: LD_INT 1
9371: PPUSH
9372: LD_INT 2
9374: PPUSH
9375: CALL_OW 322
9379: GO 9361
9381: POP
9382: POP
// hc_gallery := skirmish ;
9383: LD_ADDR_OWVAR 33
9387: PUSH
9388: LD_STRING skirmish
9390: ST_TO_ADDR
// hc_face_number := commander ;
9391: LD_ADDR_OWVAR 34
9395: PUSH
9396: LD_EXP 25
9400: ST_TO_ADDR
// hc_importance := 100 ;
9401: LD_ADDR_OWVAR 32
9405: PUSH
9406: LD_INT 100
9408: ST_TO_ADDR
// case commander of 1 :
9409: LD_EXP 25
9413: PUSH
9414: LD_INT 1
9416: DOUBLE
9417: EQUAL
9418: IFTRUE 9422
9420: GO 9446
9422: POP
// begin hc_name := Jeff Ironside ;
9423: LD_ADDR_OWVAR 26
9427: PUSH
9428: LD_STRING Jeff Ironside
9430: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
9431: LD_INT 1
9433: PPUSH
9434: LD_INT 1
9436: PPUSH
9437: LD_INT 7
9439: PPUSH
9440: CALL_OW 380
// end ; 2 :
9444: GO 9511
9446: LD_INT 2
9448: DOUBLE
9449: EQUAL
9450: IFTRUE 9454
9452: GO 9478
9454: POP
// begin hc_name := Paul Johnson ;
9455: LD_ADDR_OWVAR 26
9459: PUSH
9460: LD_STRING Paul Johnson
9462: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 7 ) ;
9463: LD_INT 1
9465: PPUSH
9466: LD_INT 3
9468: PPUSH
9469: LD_INT 7
9471: PPUSH
9472: CALL_OW 380
// end ; 3 :
9476: GO 9511
9478: LD_INT 3
9480: DOUBLE
9481: EQUAL
9482: IFTRUE 9486
9484: GO 9510
9486: POP
// begin hc_name := Lisa Stuart ;
9487: LD_ADDR_OWVAR 26
9491: PUSH
9492: LD_STRING Lisa Stuart
9494: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 7 ) ;
9495: LD_INT 2
9497: PPUSH
9498: LD_INT 4
9500: PPUSH
9501: LD_INT 7
9503: PPUSH
9504: CALL_OW 380
// end ; end ;
9508: GO 9511
9510: POP
// playerCommander := CreateHuman ;
9511: LD_ADDR_EXP 9
9515: PUSH
9516: CALL_OW 44
9520: ST_TO_ADDR
// hc_importance := 0 ;
9521: LD_ADDR_OWVAR 32
9525: PUSH
9526: LD_INT 0
9528: ST_TO_ADDR
// hc_gallery :=  ;
9529: LD_ADDR_OWVAR 33
9533: PUSH
9534: LD_STRING 
9536: ST_TO_ADDR
// result := Replace ( result , 2 , result [ 2 ] ^ playerCommander ) ;
9537: LD_ADDR_VAR 0 1
9541: PUSH
9542: LD_VAR 0 1
9546: PPUSH
9547: LD_INT 2
9549: PPUSH
9550: LD_VAR 0 1
9554: PUSH
9555: LD_INT 2
9557: ARRAY
9558: PUSH
9559: LD_EXP 9
9563: ADD
9564: PPUSH
9565: CALL_OW 1
9569: ST_TO_ADDR
// end ;
9570: LD_VAR 0 1
9574: RET
// export function PrepareReinforcements ; var i , peopleAmount , tmp , un , veh ; begin
9575: LD_INT 0
9577: PPUSH
9578: PPUSH
9579: PPUSH
9580: PPUSH
9581: PPUSH
9582: PPUSH
// uc_side := 1 ;
9583: LD_ADDR_OWVAR 20
9587: PUSH
9588: LD_INT 1
9590: ST_TO_ADDR
// uc_nation := 1 ;
9591: LD_ADDR_OWVAR 21
9595: PUSH
9596: LD_INT 1
9598: ST_TO_ADDR
// InitHc ;
9599: CALL_OW 19
// peopleAmount := [ 3 , 3 , 2 ] [ Difficulty ] ;
9603: LD_ADDR_VAR 0 3
9607: PUSH
9608: LD_INT 3
9610: PUSH
9611: LD_INT 3
9613: PUSH
9614: LD_INT 2
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: LIST
9621: PUSH
9622: LD_OWVAR 67
9626: ARRAY
9627: ST_TO_ADDR
// for i = 1 to peopleAmount do
9628: LD_ADDR_VAR 0 2
9632: PUSH
9633: DOUBLE
9634: LD_INT 1
9636: DEC
9637: ST_TO_ADDR
9638: LD_VAR 0 3
9642: PUSH
9643: FOR_TO
9644: IFFALSE 9693
// begin PrepareHuman ( false , 2 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9646: LD_INT 0
9648: PPUSH
9649: LD_INT 2
9651: PPUSH
9652: LD_INT 7
9654: PUSH
9655: LD_INT 6
9657: PUSH
9658: LD_INT 5
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: LIST
9665: PUSH
9666: LD_OWVAR 67
9670: ARRAY
9671: PPUSH
9672: CALL_OW 380
// PlaceUnitInArea ( CreateHuman , startArea , false ) ;
9676: CALL_OW 44
9680: PPUSH
9681: LD_INT 19
9683: PPUSH
9684: LD_INT 0
9686: PPUSH
9687: CALL 55028 0 3
// end ;
9691: GO 9643
9693: POP
9694: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_crane , 58 ) ;
9695: LD_INT 2
9697: PPUSH
9698: LD_INT 1
9700: PPUSH
9701: LD_INT 3
9703: PPUSH
9704: LD_INT 13
9706: PPUSH
9707: LD_INT 58
9709: PPUSH
9710: CALL 24240 0 5
// PlaceUnitInArea ( CreateVehicle , startArea , false ) ;
9714: CALL_OW 45
9718: PPUSH
9719: LD_INT 19
9721: PPUSH
9722: LD_INT 0
9724: PPUSH
9725: CALL 55028 0 3
// if commander = 1 then
9729: LD_EXP 25
9733: PUSH
9734: LD_INT 1
9736: EQUAL
9737: IFFALSE 9748
// wait ( 6 6$00 ) else
9739: LD_INT 12600
9741: PPUSH
9742: CALL_OW 67
9746: GO 9755
// wait ( 8 8$00 ) ;
9748: LD_INT 16800
9750: PPUSH
9751: CALL_OW 67
// uc_side := 1 ;
9755: LD_ADDR_OWVAR 20
9759: PUSH
9760: LD_INT 1
9762: ST_TO_ADDR
// uc_nation := 1 ;
9763: LD_ADDR_OWVAR 21
9767: PUSH
9768: LD_INT 1
9770: ST_TO_ADDR
// InitVc ;
9771: CALL_OW 20
// InitHc ;
9775: CALL_OW 19
// for i = 1 to 5 do
9779: LD_ADDR_VAR 0 2
9783: PUSH
9784: DOUBLE
9785: LD_INT 1
9787: DEC
9788: ST_TO_ADDR
9789: LD_INT 5
9791: PUSH
9792: FOR_TO
9793: IFFALSE 10037
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_light_wheeled ] [ i mod 3 + 1 ] , engine_combustion , [ control_manual , control_computer , control_computer ] [ i mod 3 + 1 ] , [ us_heavy_gun , us_cargo_bay , us_radar ] [ i mod 3 + 1 ] , rand ( 40 , 55 ) ) ;
9795: LD_INT 4
9797: PUSH
9798: LD_INT 3
9800: PUSH
9801: LD_INT 1
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: LIST
9808: PUSH
9809: LD_VAR 0 2
9813: PUSH
9814: LD_INT 3
9816: MOD
9817: PUSH
9818: LD_INT 1
9820: PLUS
9821: ARRAY
9822: PPUSH
9823: LD_INT 1
9825: PPUSH
9826: LD_INT 1
9828: PUSH
9829: LD_INT 3
9831: PUSH
9832: LD_INT 3
9834: PUSH
9835: EMPTY
9836: LIST
9837: LIST
9838: LIST
9839: PUSH
9840: LD_VAR 0 2
9844: PUSH
9845: LD_INT 3
9847: MOD
9848: PUSH
9849: LD_INT 1
9851: PLUS
9852: ARRAY
9853: PPUSH
9854: LD_INT 6
9856: PUSH
9857: LD_INT 12
9859: PUSH
9860: LD_INT 11
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: LIST
9867: PUSH
9868: LD_VAR 0 2
9872: PUSH
9873: LD_INT 3
9875: MOD
9876: PUSH
9877: LD_INT 1
9879: PLUS
9880: ARRAY
9881: PPUSH
9882: LD_INT 40
9884: PPUSH
9885: LD_INT 55
9887: PPUSH
9888: CALL_OW 12
9892: PPUSH
9893: CALL 24240 0 5
// veh := CreateVehicle ;
9897: LD_ADDR_VAR 0 6
9901: PUSH
9902: CALL_OW 45
9906: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
9907: LD_VAR 0 6
9911: PPUSH
9912: LD_INT 19
9914: PPUSH
9915: LD_INT 0
9917: PPUSH
9918: CALL 55028 0 3
// if GetWeapon ( veh ) = us_cargo_bay then
9922: LD_VAR 0 6
9926: PPUSH
9927: CALL_OW 264
9931: PUSH
9932: LD_INT 12
9934: EQUAL
9935: IFFALSE 9967
// begin AddCargo ( veh , mat_cans , 70 ) ;
9937: LD_VAR 0 6
9941: PPUSH
9942: LD_INT 1
9944: PPUSH
9945: LD_INT 70
9947: PPUSH
9948: CALL_OW 291
// AddCargo ( veh , mat_siberit , 30 ) ;
9952: LD_VAR 0 6
9956: PPUSH
9957: LD_INT 3
9959: PPUSH
9960: LD_INT 30
9962: PPUSH
9963: CALL_OW 291
// end ; if GetControl ( veh ) = control_manual then
9967: LD_VAR 0 6
9971: PPUSH
9972: CALL_OW 263
9976: PUSH
9977: LD_INT 1
9979: EQUAL
9980: IFFALSE 10035
// begin PrepareHuman ( sex_male , 3 , 6 ) ;
9982: LD_INT 1
9984: PPUSH
9985: LD_INT 3
9987: PPUSH
9988: LD_INT 6
9990: PPUSH
9991: CALL_OW 380
// un := CreateHuman ;
9995: LD_ADDR_VAR 0 5
9999: PUSH
10000: CALL_OW 44
10004: ST_TO_ADDR
// tmp := tmp ^ un ;
10005: LD_ADDR_VAR 0 4
10009: PUSH
10010: LD_VAR 0 4
10014: PUSH
10015: LD_VAR 0 5
10019: ADD
10020: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10021: LD_VAR 0 5
10025: PPUSH
10026: LD_VAR 0 6
10030: PPUSH
10031: CALL_OW 52
// end ; end ;
10035: GO 9792
10037: POP
10038: POP
// if tmp then
10039: LD_VAR 0 4
10043: IFFALSE 10107
// begin CenterNowOnUnits ( tmp ) ;
10045: LD_VAR 0 4
10049: PPUSH
10050: CALL_OW 87
// Say ( tmp [ 1 ] , DAR-1 ) ;
10054: LD_VAR 0 4
10058: PUSH
10059: LD_INT 1
10061: ARRAY
10062: PPUSH
10063: LD_STRING DAR-1
10065: PPUSH
10066: CALL_OW 88
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-DAR ) ;
10070: LD_EXP 9
10074: PPUSH
10075: LD_STRING D
10077: PUSH
10078: LD_STRING I
10080: PUSH
10081: LD_STRING J
10083: PUSH
10084: LD_STRING S
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: LIST
10091: PUSH
10092: LD_EXP 25
10096: ARRAY
10097: STR
10098: PUSH
10099: LD_STRING -1-DAR
10101: STR
10102: PPUSH
10103: CALL_OW 88
// end ; if not reinforceAllowed then
10107: LD_EXP 24
10111: NOT
10112: IFFALSE 10116
// exit ;
10114: GO 10270
// wait ( 25 25$00 ) ;
10116: LD_INT 52500
10118: PPUSH
10119: CALL_OW 67
// uc_side := 1 ;
10123: LD_ADDR_OWVAR 20
10127: PUSH
10128: LD_INT 1
10130: ST_TO_ADDR
// uc_nation := 1 ;
10131: LD_ADDR_OWVAR 21
10135: PUSH
10136: LD_INT 1
10138: ST_TO_ADDR
// InitVc ;
10139: CALL_OW 20
// InitHc ;
10143: CALL_OW 19
// for i = 1 to 4 do
10147: LD_ADDR_VAR 0 2
10151: PUSH
10152: DOUBLE
10153: LD_INT 1
10155: DEC
10156: ST_TO_ADDR
10157: LD_INT 4
10159: PUSH
10160: FOR_TO
10161: IFFALSE 10268
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 1 ) ;
10163: LD_INT 5
10165: PPUSH
10166: LD_INT 3
10168: PPUSH
10169: LD_INT 1
10171: PPUSH
10172: LD_INT 6
10174: PPUSH
10175: LD_INT 1
10177: PPUSH
10178: CALL 24240 0 5
// veh := CreateVehicle ;
10182: LD_ADDR_VAR 0 6
10186: PUSH
10187: CALL_OW 45
10191: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
10192: LD_VAR 0 6
10196: PPUSH
10197: LD_INT 19
10199: PPUSH
10200: LD_INT 0
10202: PPUSH
10203: CALL 55028 0 3
// if GetControl ( veh ) = control_manual then
10207: LD_VAR 0 6
10211: PPUSH
10212: CALL_OW 263
10216: PUSH
10217: LD_INT 1
10219: EQUAL
10220: IFFALSE 10266
// begin PrepareHuman ( false , 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
10222: LD_INT 0
10224: PPUSH
10225: LD_INT 3
10227: PPUSH
10228: LD_INT 7
10230: PUSH
10231: LD_INT 6
10233: PUSH
10234: LD_INT 5
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: LIST
10241: PUSH
10242: LD_OWVAR 67
10246: ARRAY
10247: PPUSH
10248: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10252: CALL_OW 44
10256: PPUSH
10257: LD_VAR 0 6
10261: PPUSH
10262: CALL_OW 52
// end ; end ;
10266: GO 10160
10268: POP
10269: POP
// end ;
10270: LD_VAR 0 1
10274: RET
// export function PrepareLegionReinforcements ; var i , un , j , tmp ; begin
10275: LD_INT 0
10277: PPUSH
10278: PPUSH
10279: PPUSH
10280: PPUSH
10281: PPUSH
// uc_side := 8 ;
10282: LD_ADDR_OWVAR 20
10286: PUSH
10287: LD_INT 8
10289: ST_TO_ADDR
// uc_nation := nation_arabian ;
10290: LD_ADDR_OWVAR 21
10294: PUSH
10295: LD_INT 2
10297: ST_TO_ADDR
// for i = 1 to 2 do
10298: LD_ADDR_VAR 0 2
10302: PUSH
10303: DOUBLE
10304: LD_INT 1
10306: DEC
10307: ST_TO_ADDR
10308: LD_INT 2
10310: PUSH
10311: FOR_TO
10312: IFFALSE 10392
// for j = 1 to 4 do
10314: LD_ADDR_VAR 0 4
10318: PUSH
10319: DOUBLE
10320: LD_INT 1
10322: DEC
10323: ST_TO_ADDR
10324: LD_INT 4
10326: PUSH
10327: FOR_TO
10328: IFFALSE 10388
// begin PrepareHuman ( false , j , 8 ) ;
10330: LD_INT 0
10332: PPUSH
10333: LD_VAR 0 4
10337: PPUSH
10338: LD_INT 8
10340: PPUSH
10341: CALL_OW 380
// un := CreateHuman ;
10345: LD_ADDR_VAR 0 3
10349: PUSH
10350: CALL_OW 44
10354: ST_TO_ADDR
// PlaceUnitArea ( un , legionSpawn , false ) ;
10355: LD_VAR 0 3
10359: PPUSH
10360: LD_INT 23
10362: PPUSH
10363: LD_INT 0
10365: PPUSH
10366: CALL_OW 49
// tmp := tmp union un ;
10370: LD_ADDR_VAR 0 5
10374: PUSH
10375: LD_VAR 0 5
10379: PUSH
10380: LD_VAR 0 3
10384: UNION
10385: ST_TO_ADDR
// end ;
10386: GO 10327
10388: POP
10389: POP
10390: GO 10311
10392: POP
10393: POP
// for i in tmp do
10394: LD_ADDR_VAR 0 2
10398: PUSH
10399: LD_VAR 0 5
10403: PUSH
10404: FOR_IN
10405: IFFALSE 10424
// ComMoveXY ( i , 150 , 136 ) ;
10407: LD_VAR 0 2
10411: PPUSH
10412: LD_INT 150
10414: PPUSH
10415: LD_INT 136
10417: PPUSH
10418: CALL_OW 111
10422: GO 10404
10424: POP
10425: POP
// mc_bases := Replace ( mc_bases , mc_leg , mc_bases [ mc_leg ] union tmp ) ;
10426: LD_ADDR_EXP 50
10430: PUSH
10431: LD_EXP 50
10435: PPUSH
10436: LD_EXP 6
10440: PPUSH
10441: LD_EXP 50
10445: PUSH
10446: LD_EXP 6
10450: ARRAY
10451: PUSH
10452: LD_VAR 0 5
10456: UNION
10457: PPUSH
10458: CALL_OW 1
10462: ST_TO_ADDR
// end ;
10463: LD_VAR 0 1
10467: RET
// every 0 0$10 trigger Difficulty > 1 and GetTech ( tech_lapser , 3 ) = state_researched do
10468: LD_OWVAR 67
10472: PUSH
10473: LD_INT 1
10475: GREATER
10476: PUSH
10477: LD_INT 31
10479: PPUSH
10480: LD_INT 3
10482: PPUSH
10483: CALL_OW 321
10487: PUSH
10488: LD_INT 2
10490: EQUAL
10491: AND
10492: IFFALSE 10709
10494: GO 10496
10496: DISABLE
// begin MC_InsertBuildingList ( mc_rus_1 , [ [ b_turret , 101 , 159 , 5 ] , [ b_turret , 105 , 158 , 5 ] , [ b_turret , 96 , 136 , 5 ] , [ b_turret , 94 , 133 , 4 ] , [ b_turret , 84 , 102 , 4 ] ] ) ;
10497: LD_EXP 7
10501: PPUSH
10502: LD_INT 33
10504: PUSH
10505: LD_INT 101
10507: PUSH
10508: LD_INT 159
10510: PUSH
10511: LD_INT 5
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: PUSH
10520: LD_INT 33
10522: PUSH
10523: LD_INT 105
10525: PUSH
10526: LD_INT 158
10528: PUSH
10529: LD_INT 5
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: PUSH
10538: LD_INT 33
10540: PUSH
10541: LD_INT 96
10543: PUSH
10544: LD_INT 136
10546: PUSH
10547: LD_INT 5
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: PUSH
10556: LD_INT 33
10558: PUSH
10559: LD_INT 94
10561: PUSH
10562: LD_INT 133
10564: PUSH
10565: LD_INT 4
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: PUSH
10574: LD_INT 33
10576: PUSH
10577: LD_INT 84
10579: PUSH
10580: LD_INT 102
10582: PUSH
10583: LD_INT 4
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: PPUSH
10599: CALL 81829 0 2
// MC_InsertBuildingList ( mc_rus_2 , [ [ b_turret , 50 , 17 , 4 ] , [ b_turret , 52 , 20 , 4 ] , [ b_turret , 53 , 23 , 4 ] , [ b_turret , 45 , 32 , 4 ] , [ b_turret , 45 , 39 , 4 ] ] ) ;
10603: LD_EXP 8
10607: PPUSH
10608: LD_INT 33
10610: PUSH
10611: LD_INT 50
10613: PUSH
10614: LD_INT 17
10616: PUSH
10617: LD_INT 4
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: PUSH
10626: LD_INT 33
10628: PUSH
10629: LD_INT 52
10631: PUSH
10632: LD_INT 20
10634: PUSH
10635: LD_INT 4
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: PUSH
10644: LD_INT 33
10646: PUSH
10647: LD_INT 53
10649: PUSH
10650: LD_INT 23
10652: PUSH
10653: LD_INT 4
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: PUSH
10662: LD_INT 33
10664: PUSH
10665: LD_INT 45
10667: PUSH
10668: LD_INT 32
10670: PUSH
10671: LD_INT 4
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: PUSH
10680: LD_INT 33
10682: PUSH
10683: LD_INT 45
10685: PUSH
10686: LD_INT 39
10688: PUSH
10689: LD_INT 4
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: PPUSH
10705: CALL 81829 0 2
// end ; end_of_file
10709: END
// export function Action ; var i , tmp ; begin
10710: LD_INT 0
10712: PPUSH
10713: PPUSH
10714: PPUSH
// InGameOn ;
10715: CALL_OW 8
// CenterNowOnXY ( 225 , 217 ) ;
10719: LD_INT 225
10721: PPUSH
10722: LD_INT 217
10724: PPUSH
10725: CALL_OW 86
// for i in playerForces [ 2 ] do
10729: LD_ADDR_VAR 0 2
10733: PUSH
10734: LD_EXP 10
10738: PUSH
10739: LD_INT 2
10741: ARRAY
10742: PUSH
10743: FOR_IN
10744: IFFALSE 10877
// begin if playerForces [ 1 ] and GetClass ( i ) in [ 3 , 4 ] then
10746: LD_EXP 10
10750: PUSH
10751: LD_INT 1
10753: ARRAY
10754: PUSH
10755: LD_VAR 0 2
10759: PPUSH
10760: CALL_OW 257
10764: PUSH
10765: LD_INT 3
10767: PUSH
10768: LD_INT 4
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: IN
10775: AND
10776: IFFALSE 10860
// begin PlaceUnitInArea ( playerForces [ 1 ] [ 1 ] , startArea , false ) ;
10778: LD_EXP 10
10782: PUSH
10783: LD_INT 1
10785: ARRAY
10786: PUSH
10787: LD_INT 1
10789: ARRAY
10790: PPUSH
10791: LD_INT 19
10793: PPUSH
10794: LD_INT 0
10796: PPUSH
10797: CALL 55028 0 3
// PlaceHumanInUnit ( i , playerForces [ 1 ] [ 1 ] ) ;
10801: LD_VAR 0 2
10805: PPUSH
10806: LD_EXP 10
10810: PUSH
10811: LD_INT 1
10813: ARRAY
10814: PUSH
10815: LD_INT 1
10817: ARRAY
10818: PPUSH
10819: CALL_OW 52
// playerForces := Replace ( playerForces , 1 , Delete ( playerForces [ 1 ] , 1 ) ) ;
10823: LD_ADDR_EXP 10
10827: PUSH
10828: LD_EXP 10
10832: PPUSH
10833: LD_INT 1
10835: PPUSH
10836: LD_EXP 10
10840: PUSH
10841: LD_INT 1
10843: ARRAY
10844: PPUSH
10845: LD_INT 1
10847: PPUSH
10848: CALL_OW 3
10852: PPUSH
10853: CALL_OW 1
10857: ST_TO_ADDR
// end else
10858: GO 10875
// PlaceUnitInArea ( i , startArea , false ) ;
10860: LD_VAR 0 2
10864: PPUSH
10865: LD_INT 19
10867: PPUSH
10868: LD_INT 0
10870: PPUSH
10871: CALL 55028 0 3
// end ;
10875: GO 10743
10877: POP
10878: POP
// wait ( 0 0$2 ) ;
10879: LD_INT 70
10881: PPUSH
10882: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1 ) ;
10886: LD_EXP 9
10890: PPUSH
10891: LD_STRING D
10893: PUSH
10894: LD_STRING I
10896: PUSH
10897: LD_STRING J
10899: PUSH
10900: LD_STRING S
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: LIST
10907: PUSH
10908: LD_EXP 25
10912: ARRAY
10913: STR
10914: PUSH
10915: LD_STRING -1
10917: STR
10918: PPUSH
10919: CALL_OW 88
// SayRadio ( Powell , DP-1 ) ;
10923: LD_EXP 12
10927: PPUSH
10928: LD_STRING DP-1
10930: PPUSH
10931: CALL_OW 94
// SayRadio ( Powell , DP-2 ) ;
10935: LD_EXP 12
10939: PPUSH
10940: LD_STRING DP-2
10942: PPUSH
10943: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2 ) ;
10947: LD_EXP 9
10951: PPUSH
10952: LD_STRING D
10954: PUSH
10955: LD_STRING I
10957: PUSH
10958: LD_STRING J
10960: PUSH
10961: LD_STRING S
10963: PUSH
10964: EMPTY
10965: LIST
10966: LIST
10967: LIST
10968: PUSH
10969: LD_EXP 25
10973: ARRAY
10974: STR
10975: PUSH
10976: LD_STRING -2
10978: STR
10979: PPUSH
10980: CALL_OW 88
// InGameOff ;
10984: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
10988: LD_STRING O1
10990: PPUSH
10991: CALL_OW 337
// game := true ;
10995: LD_ADDR_EXP 3
10999: PUSH
11000: LD_INT 1
11002: ST_TO_ADDR
// SaveForQuickRestart ;
11003: CALL_OW 22
// wait ( 0 0$5 ) ;
11007: LD_INT 175
11009: PPUSH
11010: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3 ) ;
11014: LD_EXP 9
11018: PPUSH
11019: LD_STRING D
11021: PUSH
11022: LD_STRING I
11024: PUSH
11025: LD_STRING J
11027: PUSH
11028: LD_STRING S
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: LIST
11035: PUSH
11036: LD_EXP 25
11040: ARRAY
11041: STR
11042: PUSH
11043: LD_STRING -3
11045: STR
11046: PPUSH
11047: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11051: LD_INT 35
11053: PPUSH
11054: CALL_OW 67
// until ruEscape [ 1 ] >= ruEscape [ 2 ] ;
11058: LD_EXP 15
11062: PUSH
11063: LD_INT 1
11065: ARRAY
11066: PUSH
11067: LD_EXP 15
11071: PUSH
11072: LD_INT 2
11074: ARRAY
11075: GREATEREQUAL
11076: IFFALSE 11051
// outpostEscape := true ;
11078: LD_ADDR_EXP 27
11082: PUSH
11083: LD_INT 1
11085: ST_TO_ADDR
// tmp := UnitFilter ( ruOutpost , [ f_sex , sex_male ] ) ;
11086: LD_ADDR_VAR 0 3
11090: PUSH
11091: LD_EXP 14
11095: PPUSH
11096: LD_INT 26
11098: PUSH
11099: LD_INT 1
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PPUSH
11106: CALL_OW 72
11110: ST_TO_ADDR
// if tmp then
11111: LD_VAR 0 3
11115: IFFALSE 11133
// Say ( tmp [ 1 ] , DR-1-Escape ) ;
11117: LD_VAR 0 3
11121: PUSH
11122: LD_INT 1
11124: ARRAY
11125: PPUSH
11126: LD_STRING DR-1-Escape
11128: PPUSH
11129: CALL_OW 88
// wait ( 0 0$1 ) ;
11133: LD_INT 35
11135: PPUSH
11136: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Escape ) ;
11140: LD_EXP 9
11144: PPUSH
11145: LD_STRING D
11147: PUSH
11148: LD_STRING I
11150: PUSH
11151: LD_STRING J
11153: PUSH
11154: LD_STRING S
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: LIST
11161: PUSH
11162: LD_EXP 25
11166: ARRAY
11167: STR
11168: PUSH
11169: LD_STRING -1-Escape
11171: STR
11172: PPUSH
11173: CALL_OW 88
// for i in ruOutpost do
11177: LD_ADDR_VAR 0 2
11181: PUSH
11182: LD_EXP 14
11186: PUSH
11187: FOR_IN
11188: IFFALSE 11242
// begin if IsInUnit ( i ) then
11190: LD_VAR 0 2
11194: PPUSH
11195: CALL_OW 310
11199: IFFALSE 11210
// ComExitBuilding ( i ) ;
11201: LD_VAR 0 2
11205: PPUSH
11206: CALL_OW 122
// AddComMoveXY ( i , 179 , 102 ) ;
11210: LD_VAR 0 2
11214: PPUSH
11215: LD_INT 179
11217: PPUSH
11218: LD_INT 102
11220: PPUSH
11221: CALL_OW 171
// AddComMoveXY ( i , 28 , 20 ) ;
11225: LD_VAR 0 2
11229: PPUSH
11230: LD_INT 28
11232: PPUSH
11233: LD_INT 20
11235: PPUSH
11236: CALL_OW 171
// end ;
11240: GO 11187
11242: POP
11243: POP
// tmp := [ ] ;
11244: LD_ADDR_VAR 0 3
11248: PUSH
11249: EMPTY
11250: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11251: LD_INT 35
11253: PPUSH
11254: CALL_OW 67
// tmp := UnitFilter ( ruOutpost , [ f_inarea , rus2Base ] ) ;
11258: LD_ADDR_VAR 0 3
11262: PUSH
11263: LD_EXP 14
11267: PPUSH
11268: LD_INT 95
11270: PUSH
11271: LD_INT 11
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PPUSH
11278: CALL_OW 72
11282: ST_TO_ADDR
// if tmp then
11283: LD_VAR 0 3
11287: IFFALSE 11366
// for i in tmp do
11289: LD_ADDR_VAR 0 2
11293: PUSH
11294: LD_VAR 0 3
11298: PUSH
11299: FOR_IN
11300: IFFALSE 11364
// begin ruOutpost := ruOutpost diff i ;
11302: LD_ADDR_EXP 14
11306: PUSH
11307: LD_EXP 14
11311: PUSH
11312: LD_VAR 0 2
11316: DIFF
11317: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ mc_rus_2 , mc_bases [ mc_rus_2 ] + 1 ] , i ) ;
11318: LD_ADDR_EXP 50
11322: PUSH
11323: LD_EXP 50
11327: PPUSH
11328: LD_EXP 8
11332: PUSH
11333: LD_EXP 50
11337: PUSH
11338: LD_EXP 8
11342: ARRAY
11343: PUSH
11344: LD_INT 1
11346: PLUS
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PPUSH
11352: LD_VAR 0 2
11356: PPUSH
11357: CALL 24362 0 3
11361: ST_TO_ADDR
// end ;
11362: GO 11299
11364: POP
11365: POP
// until not UnitFilter ( ruOutpost , [ f_type , unit_human ] ) ;
11366: LD_EXP 14
11370: PPUSH
11371: LD_INT 21
11373: PUSH
11374: LD_INT 1
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: PPUSH
11381: CALL_OW 72
11385: NOT
11386: IFFALSE 11251
// ruOutpost := [ ] ;
11388: LD_ADDR_EXP 14
11392: PUSH
11393: EMPTY
11394: ST_TO_ADDR
// end ;
11395: LD_VAR 0 1
11399: RET
// every 0 0$1 trigger outpostEscape do var i , tmp ;
11400: LD_EXP 27
11404: IFFALSE 11593
11406: GO 11408
11408: DISABLE
11409: LD_INT 0
11411: PPUSH
11412: PPUSH
// begin wait ( rand ( 0 0$25 , 0 0$35 ) ) ;
11413: LD_INT 875
11415: PPUSH
11416: LD_INT 1225
11418: PPUSH
11419: CALL_OW 12
11423: PPUSH
11424: CALL_OW 67
// tmp := [ [ 208 , 166 ] , [ 218 , 174 ] , [ 201 , 173 ] , [ 189 , 167 ] , [ 191 , 160 ] , [ 209 , 181 ] , [ 192 , 162 ] , [ 197 , 166 ] ] ;
11428: LD_ADDR_VAR 0 2
11432: PUSH
11433: LD_INT 208
11435: PUSH
11436: LD_INT 166
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: PUSH
11443: LD_INT 218
11445: PUSH
11446: LD_INT 174
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: PUSH
11453: LD_INT 201
11455: PUSH
11456: LD_INT 173
11458: PUSH
11459: EMPTY
11460: LIST
11461: LIST
11462: PUSH
11463: LD_INT 189
11465: PUSH
11466: LD_INT 167
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: PUSH
11473: LD_INT 191
11475: PUSH
11476: LD_INT 160
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: PUSH
11483: LD_INT 209
11485: PUSH
11486: LD_INT 181
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: PUSH
11493: LD_INT 192
11495: PUSH
11496: LD_INT 162
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: PUSH
11503: LD_INT 197
11505: PUSH
11506: LD_INT 166
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: ST_TO_ADDR
// for i = 1 to 5 + Difficulty do
11523: LD_ADDR_VAR 0 1
11527: PUSH
11528: DOUBLE
11529: LD_INT 1
11531: DEC
11532: ST_TO_ADDR
11533: LD_INT 5
11535: PUSH
11536: LD_OWVAR 67
11540: PLUS
11541: PUSH
11542: FOR_TO
11543: IFFALSE 11591
// begin MineExplosion ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 1 ) ;
11545: LD_VAR 0 2
11549: PUSH
11550: LD_VAR 0 1
11554: ARRAY
11555: PUSH
11556: LD_INT 1
11558: ARRAY
11559: PPUSH
11560: LD_VAR 0 2
11564: PUSH
11565: LD_VAR 0 1
11569: ARRAY
11570: PUSH
11571: LD_INT 2
11573: ARRAY
11574: PPUSH
11575: LD_INT 1
11577: PPUSH
11578: CALL_OW 453
// wait ( 0 0$0.8 ) ;
11582: LD_INT 28
11584: PPUSH
11585: CALL_OW 67
// end ;
11589: GO 11542
11591: POP
11592: POP
// end ;
11593: PPOPN 2
11595: END
// every 0 0$3 trigger not outpostEscape do var tmp , engs , buildings , empty , i , j , k ;
11596: LD_EXP 27
11600: NOT
11601: IFFALSE 12255
11603: GO 11605
11605: DISABLE
11606: LD_INT 0
11608: PPUSH
11609: PPUSH
11610: PPUSH
11611: PPUSH
11612: PPUSH
11613: PPUSH
11614: PPUSH
// begin enable ;
11615: ENABLE
// tmp := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
11616: LD_ADDR_VAR 0 1
11620: PUSH
11621: LD_EXP 14
11625: PPUSH
11626: LD_INT 22
11628: PUSH
11629: LD_INT 3
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PUSH
11636: LD_INT 25
11638: PUSH
11639: LD_INT 1
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PPUSH
11650: CALL_OW 72
11654: ST_TO_ADDR
// engs := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11655: LD_ADDR_VAR 0 2
11659: PUSH
11660: LD_EXP 14
11664: PPUSH
11665: LD_INT 22
11667: PUSH
11668: LD_INT 3
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: PUSH
11675: LD_INT 25
11677: PUSH
11678: LD_INT 2
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: PUSH
11685: EMPTY
11686: LIST
11687: LIST
11688: PPUSH
11689: CALL_OW 72
11693: ST_TO_ADDR
// buildings := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11694: LD_ADDR_VAR 0 3
11698: PUSH
11699: LD_EXP 14
11703: PPUSH
11704: LD_INT 22
11706: PUSH
11707: LD_INT 3
11709: PUSH
11710: EMPTY
11711: LIST
11712: LIST
11713: PUSH
11714: LD_INT 21
11716: PUSH
11717: LD_INT 3
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: PUSH
11724: LD_INT 3
11726: PUSH
11727: LD_INT 24
11729: PUSH
11730: LD_INT 1000
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: PUSH
11741: EMPTY
11742: LIST
11743: LIST
11744: LIST
11745: PPUSH
11746: CALL_OW 72
11750: ST_TO_ADDR
// if engs and buildings then
11751: LD_VAR 0 2
11755: PUSH
11756: LD_VAR 0 3
11760: AND
11761: IFFALSE 11834
// begin for i in engs do
11763: LD_ADDR_VAR 0 5
11767: PUSH
11768: LD_VAR 0 2
11772: PUSH
11773: FOR_IN
11774: IFFALSE 11830
// if IsInUnit ( i ) then
11776: LD_VAR 0 5
11780: PPUSH
11781: CALL_OW 310
11785: IFFALSE 11798
// ComExitBuilding ( i ) else
11787: LD_VAR 0 5
11791: PPUSH
11792: CALL_OW 122
11796: GO 11828
// if not HasTask ( i ) then
11798: LD_VAR 0 5
11802: PPUSH
11803: CALL_OW 314
11807: NOT
11808: IFFALSE 11828
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
11810: LD_VAR 0 5
11814: PPUSH
11815: LD_VAR 0 3
11819: PUSH
11820: LD_INT 1
11822: ARRAY
11823: PPUSH
11824: CALL_OW 130
11828: GO 11773
11830: POP
11831: POP
// end else
11832: GO 11937
// if not buildings and UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) and UnitFilter ( engs , [ f_not , [ f_inside ] ] ) then
11834: LD_VAR 0 3
11838: NOT
11839: PUSH
11840: LD_EXP 14
11844: PPUSH
11845: LD_INT 30
11847: PUSH
11848: LD_INT 0
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: PPUSH
11855: CALL_OW 72
11859: AND
11860: PUSH
11861: LD_VAR 0 2
11865: PPUSH
11866: LD_INT 3
11868: PUSH
11869: LD_INT 54
11871: PUSH
11872: EMPTY
11873: LIST
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: PPUSH
11879: CALL_OW 72
11883: AND
11884: IFFALSE 11937
// ComEnterUnit ( UnitFilter ( engs , [ f_not , [ f_inside ] ] ) , UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) [ 1 ] ) ;
11886: LD_VAR 0 2
11890: PPUSH
11891: LD_INT 3
11893: PUSH
11894: LD_INT 54
11896: PUSH
11897: EMPTY
11898: LIST
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: PPUSH
11904: CALL_OW 72
11908: PPUSH
11909: LD_EXP 14
11913: PPUSH
11914: LD_INT 30
11916: PUSH
11917: LD_INT 0
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: PPUSH
11924: CALL_OW 72
11928: PUSH
11929: LD_INT 1
11931: ARRAY
11932: PPUSH
11933: CALL_OW 120
// if not tmp then
11937: LD_VAR 0 1
11941: NOT
11942: IFFALSE 11946
// exit ;
11944: GO 12255
// if FilterUnitsInArea ( ruOutpostCenterArea , [ f_enemy , 3 ] ) > 1 then
11946: LD_INT 26
11948: PPUSH
11949: LD_INT 81
11951: PUSH
11952: LD_INT 3
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: PPUSH
11959: CALL_OW 70
11963: PUSH
11964: LD_INT 1
11966: GREATER
11967: IFFALSE 12023
// begin for i in tmp do
11969: LD_ADDR_VAR 0 5
11973: PUSH
11974: LD_VAR 0 1
11978: PUSH
11979: FOR_IN
11980: IFFALSE 12019
// begin if IsInUnit ( i ) then
11982: LD_VAR 0 5
11986: PPUSH
11987: CALL_OW 310
11991: IFFALSE 12002
// ComExitBuilding ( i ) ;
11993: LD_VAR 0 5
11997: PPUSH
11998: CALL_OW 122
// AddComAgressiveMove ( i , 204 , 164 ) ;
12002: LD_VAR 0 5
12006: PPUSH
12007: LD_INT 204
12009: PPUSH
12010: LD_INT 164
12012: PPUSH
12013: CALL_OW 174
// end ;
12017: GO 11979
12019: POP
12020: POP
// end else
12021: GO 12255
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
12023: LD_VAR 0 1
12027: PPUSH
12028: LD_INT 3
12030: PUSH
12031: LD_INT 54
12033: PUSH
12034: EMPTY
12035: LIST
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PPUSH
12041: CALL_OW 72
12045: IFFALSE 12255
// begin empty := UnitFilter ( ruOutpost , [ [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
12047: LD_ADDR_VAR 0 4
12051: PUSH
12052: LD_EXP 14
12056: PPUSH
12057: LD_INT 30
12059: PUSH
12060: LD_INT 32
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: PUSH
12067: LD_INT 58
12069: PUSH
12070: EMPTY
12071: LIST
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: PPUSH
12077: CALL_OW 72
12081: ST_TO_ADDR
// if not empty and UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) then
12082: LD_VAR 0 4
12086: NOT
12087: PUSH
12088: LD_EXP 14
12092: PPUSH
12093: LD_INT 30
12095: PUSH
12096: LD_INT 5
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: PPUSH
12103: CALL_OW 72
12107: AND
12108: IFFALSE 12145
// begin ComEnterUnit ( tmp , UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) [ 1 ] ) ;
12110: LD_VAR 0 1
12114: PPUSH
12115: LD_EXP 14
12119: PPUSH
12120: LD_INT 30
12122: PUSH
12123: LD_INT 5
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: PPUSH
12130: CALL_OW 72
12134: PUSH
12135: LD_INT 1
12137: ARRAY
12138: PPUSH
12139: CALL_OW 120
// exit ;
12143: GO 12255
// end ; j := UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) ;
12145: LD_ADDR_VAR 0 6
12149: PUSH
12150: LD_VAR 0 1
12154: PPUSH
12155: LD_INT 3
12157: PUSH
12158: LD_INT 54
12160: PUSH
12161: EMPTY
12162: LIST
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PPUSH
12168: CALL_OW 72
12172: ST_TO_ADDR
// if j < empty then
12173: LD_VAR 0 6
12177: PUSH
12178: LD_VAR 0 4
12182: LESS
12183: IFFALSE 12197
// k := j else
12185: LD_ADDR_VAR 0 7
12189: PUSH
12190: LD_VAR 0 6
12194: ST_TO_ADDR
12195: GO 12207
// k := empty ;
12197: LD_ADDR_VAR 0 7
12201: PUSH
12202: LD_VAR 0 4
12206: ST_TO_ADDR
// for i = 1 to k do
12207: LD_ADDR_VAR 0 5
12211: PUSH
12212: DOUBLE
12213: LD_INT 1
12215: DEC
12216: ST_TO_ADDR
12217: LD_VAR 0 7
12221: PUSH
12222: FOR_TO
12223: IFFALSE 12253
// ComEnterUnit ( j [ i ] , empty [ i ] ) ;
12225: LD_VAR 0 6
12229: PUSH
12230: LD_VAR 0 5
12234: ARRAY
12235: PPUSH
12236: LD_VAR 0 4
12240: PUSH
12241: LD_VAR 0 5
12245: ARRAY
12246: PPUSH
12247: CALL_OW 120
12251: GO 12222
12253: POP
12254: POP
// end ; end ;
12255: PPOPN 7
12257: END
// every 0 0$2 trigger GameType = 1 and outpostEscape and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , 208 , 163 , 8 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 208 , 163 , 14 ] ] ) do var i ;
12258: LD_EXP 2
12262: PUSH
12263: LD_INT 1
12265: EQUAL
12266: PUSH
12267: LD_EXP 27
12271: AND
12272: PUSH
12273: LD_INT 22
12275: PUSH
12276: LD_INT 1
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: PUSH
12283: LD_INT 92
12285: PUSH
12286: LD_INT 208
12288: PUSH
12289: LD_INT 163
12291: PUSH
12292: LD_INT 8
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: PPUSH
12305: CALL_OW 69
12309: AND
12310: PUSH
12311: LD_INT 22
12313: PUSH
12314: LD_INT 3
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: PUSH
12321: LD_INT 21
12323: PUSH
12324: LD_INT 1
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: PUSH
12331: LD_INT 92
12333: PUSH
12334: LD_INT 208
12336: PUSH
12337: LD_INT 163
12339: PUSH
12340: LD_INT 14
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: LIST
12353: PPUSH
12354: CALL_OW 69
12358: NOT
12359: AND
12360: IFFALSE 12665
12362: GO 12364
12364: DISABLE
12365: LD_INT 0
12367: PPUSH
// begin InGameOn ;
12368: CALL_OW 8
// CenterNowOnUnits ( playerCommander ) ;
12372: LD_EXP 9
12376: PPUSH
12377: CALL_OW 87
// wait ( 0 0$1 ) ;
12381: LD_INT 35
12383: PPUSH
12384: CALL_OW 67
// DialogueOn ;
12388: CALL_OW 6
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-BaseCaptured ) ;
12392: LD_EXP 9
12396: PPUSH
12397: LD_STRING D
12399: PUSH
12400: LD_STRING I
12402: PUSH
12403: LD_STRING J
12405: PUSH
12406: LD_STRING S
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: LIST
12413: PUSH
12414: LD_EXP 25
12418: ARRAY
12419: STR
12420: PUSH
12421: LD_STRING -1-BaseCaptured
12423: STR
12424: PPUSH
12425: CALL_OW 88
// SayRadio ( Powell , DP-1-BaseCaptured ) ;
12429: LD_EXP 12
12433: PPUSH
12434: LD_STRING DP-1-BaseCaptured
12436: PPUSH
12437: CALL_OW 94
// if sibBombAllowed then
12441: LD_EXP 23
12445: IFFALSE 12587
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-BaseCaptured ) ;
12447: LD_EXP 9
12451: PPUSH
12452: LD_STRING D
12454: PUSH
12455: LD_STRING I
12457: PUSH
12458: LD_STRING J
12460: PUSH
12461: LD_STRING S
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: LIST
12468: PUSH
12469: LD_EXP 25
12473: ARRAY
12474: STR
12475: PUSH
12476: LD_STRING -2-BaseCaptured
12478: STR
12479: PPUSH
12480: CALL_OW 88
// if commander = 1 then
12484: LD_EXP 25
12488: PUSH
12489: LD_INT 1
12491: EQUAL
12492: IFFALSE 12506
// SayRadio ( Powell , DP-2b-BaseCaptured ) ;
12494: LD_EXP 12
12498: PPUSH
12499: LD_STRING DP-2b-BaseCaptured
12501: PPUSH
12502: CALL_OW 94
// if commander = 2 then
12506: LD_EXP 25
12510: PUSH
12511: LD_INT 2
12513: EQUAL
12514: IFFALSE 12528
// SayRadio ( Powell , DP-2-BaseCaptured ) ;
12516: LD_EXP 12
12520: PPUSH
12521: LD_STRING DP-2-BaseCaptured
12523: PPUSH
12524: CALL_OW 94
// if commander = 3 then
12528: LD_EXP 25
12532: PUSH
12533: LD_INT 3
12535: EQUAL
12536: IFFALSE 12550
// SayRadio ( Powell , DP-2a-BaseCaptured ) ;
12538: LD_EXP 12
12542: PPUSH
12543: LD_STRING DP-2a-BaseCaptured
12545: PPUSH
12546: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3-BaseCaptured ) ;
12550: LD_EXP 9
12554: PPUSH
12555: LD_STRING D
12557: PUSH
12558: LD_STRING I
12560: PUSH
12561: LD_STRING J
12563: PUSH
12564: LD_STRING S
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: LIST
12571: PUSH
12572: LD_EXP 25
12576: ARRAY
12577: STR
12578: PUSH
12579: LD_STRING -3-BaseCaptured
12581: STR
12582: PPUSH
12583: CALL_OW 88
// end ; DialogueOff ;
12587: CALL_OW 7
// InGameOff ;
12591: CALL_OW 9
// ChangeMissionObjectives ( O2 ) ;
12595: LD_STRING O2
12597: PPUSH
12598: CALL_OW 337
// for i in UnitFilter ( ruOutpost , [ f_type , unit_building ] ) do
12602: LD_ADDR_VAR 0 1
12606: PUSH
12607: LD_EXP 14
12611: PPUSH
12612: LD_INT 21
12614: PUSH
12615: LD_INT 3
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: PPUSH
12622: CALL_OW 72
12626: PUSH
12627: FOR_IN
12628: IFFALSE 12644
// SetSide ( i , 1 ) ;
12630: LD_VAR 0 1
12634: PPUSH
12635: LD_INT 1
12637: PPUSH
12638: CALL_OW 235
12642: GO 12627
12644: POP
12645: POP
// baseCaptured := true ;
12646: LD_ADDR_EXP 17
12650: PUSH
12651: LD_INT 1
12653: ST_TO_ADDR
// wait ( 0 0$35 ) ;
12654: LD_INT 1225
12656: PPUSH
12657: CALL_OW 67
// PrepareReinforcements ;
12661: CALL 9575 0 0
// end ;
12665: PPOPN 1
12667: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 167 , 197 , 20 ] ] ) > 3 do
12668: LD_INT 22
12670: PUSH
12671: LD_INT 3
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: PUSH
12678: LD_INT 92
12680: PUSH
12681: LD_INT 167
12683: PUSH
12684: LD_INT 197
12686: PUSH
12687: LD_INT 20
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PPUSH
12700: CALL_OW 69
12704: PUSH
12705: LD_INT 3
12707: GREATER
12708: IFFALSE 12725
12710: GO 12712
12712: DISABLE
// SayRadio ( Powell , DP-RuAttack ) ;
12713: LD_EXP 12
12717: PPUSH
12718: LD_STRING DP-RuAttack
12720: PPUSH
12721: CALL_OW 94
12725: END
// every 0 0$2 trigger not debug and SeeXY ( 1 , 168 , 74 ) and GetEnvironmentType ( 168 , 72 ) do
12726: LD_EXP 1
12730: NOT
12731: PUSH
12732: LD_INT 1
12734: PPUSH
12735: LD_INT 168
12737: PPUSH
12738: LD_INT 74
12740: PPUSH
12741: CALL_OW 293
12745: AND
12746: PUSH
12747: LD_INT 168
12749: PPUSH
12750: LD_INT 72
12752: PPUSH
12753: CALL_OW 553
12757: AND
12758: IFFALSE 12810
12760: GO 12762
12762: DISABLE
// begin CenterOnXY ( 168 , 72 ) ;
12763: LD_INT 168
12765: PPUSH
12766: LD_INT 72
12768: PPUSH
12769: CALL_OW 84
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Blockade ) ;
12773: LD_EXP 9
12777: PPUSH
12778: LD_STRING D
12780: PUSH
12781: LD_STRING I
12783: PUSH
12784: LD_STRING J
12786: PUSH
12787: LD_STRING S
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: LIST
12794: PUSH
12795: LD_EXP 25
12799: ARRAY
12800: STR
12801: PUSH
12802: LD_STRING -1-Blockade
12804: STR
12805: PPUSH
12806: CALL_OW 88
// end ;
12810: END
// every 0 0$2 trigger GameType = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 4 ] ] ) do
12811: LD_EXP 2
12815: PUSH
12816: LD_INT 1
12818: EQUAL
12819: PUSH
12820: LD_INT 22
12822: PUSH
12823: LD_INT 1
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: PUSH
12830: LD_INT 101
12832: PUSH
12833: LD_INT 4
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PPUSH
12844: CALL_OW 69
12848: AND
12849: IFFALSE 13381
12851: GO 12853
12853: DISABLE
// begin ChangeSideFog ( 4 , 1 ) ;
12854: LD_INT 4
12856: PPUSH
12857: LD_INT 1
12859: PPUSH
12860: CALL_OW 343
// DialogueOn ;
12864: CALL_OW 6
// CenterNowOnUnits ( allyCommander ) ;
12868: LD_EXP 11
12872: PPUSH
12873: CALL_OW 87
// SayRadio ( allyCommander , DM-1-Contact ) ;
12877: LD_EXP 11
12881: PPUSH
12882: LD_STRING DM-1-Contact
12884: PPUSH
12885: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Contact ) ;
12889: LD_EXP 9
12893: PPUSH
12894: LD_STRING D
12896: PUSH
12897: LD_STRING I
12899: PUSH
12900: LD_STRING J
12902: PUSH
12903: LD_STRING S
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: LIST
12910: PUSH
12911: LD_EXP 25
12915: ARRAY
12916: STR
12917: PUSH
12918: LD_STRING -1-Contact
12920: STR
12921: PPUSH
12922: CALL_OW 88
// if commander = 1 then
12926: LD_EXP 25
12930: PUSH
12931: LD_INT 1
12933: EQUAL
12934: IFFALSE 13066
// begin SayRadio ( allyCommander , DM-2-Contact ) ;
12936: LD_EXP 11
12940: PPUSH
12941: LD_STRING DM-2-Contact
12943: PPUSH
12944: CALL_OW 94
// Say ( playerCommander , DI-2-Contact ) ;
12948: LD_EXP 9
12952: PPUSH
12953: LD_STRING DI-2-Contact
12955: PPUSH
12956: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
12960: LD_INT 22
12962: PUSH
12963: LD_INT 8
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: PUSH
12970: LD_INT 21
12972: PUSH
12973: LD_INT 1
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: PPUSH
12984: CALL_OW 69
12988: PUSH
12989: LD_INT 8
12991: PPUSH
12992: LD_INT 1
12994: PPUSH
12995: CALL_OW 81
12999: PUSH
13000: LD_INT 2
13002: EQUAL
13003: AND
13004: IFFALSE 13030
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13006: LD_EXP 11
13010: PPUSH
13011: LD_STRING DM-3-Contact
13013: PPUSH
13014: CALL_OW 94
// Say ( playerCommander , DI-3-Contact ) ;
13018: LD_EXP 9
13022: PPUSH
13023: LD_STRING DI-3-Contact
13025: PPUSH
13026: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13030: LD_EXP 11
13034: PPUSH
13035: LD_STRING DM-4-Contact
13037: PPUSH
13038: CALL_OW 94
// Say ( playerCommander , DI-4-Contact ) ;
13042: LD_EXP 9
13046: PPUSH
13047: LD_STRING DI-4-Contact
13049: PPUSH
13050: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13054: LD_EXP 11
13058: PPUSH
13059: LD_STRING DM-5-Contact
13061: PPUSH
13062: CALL_OW 94
// end ; if commander = 2 then
13066: LD_EXP 25
13070: PUSH
13071: LD_INT 2
13073: EQUAL
13074: IFFALSE 13206
// begin SayRadio ( allyCommander , DM-2c-Contact ) ;
13076: LD_EXP 11
13080: PPUSH
13081: LD_STRING DM-2c-Contact
13083: PPUSH
13084: CALL_OW 94
// Say ( playerCommander , DJ-2-Contact ) ;
13088: LD_EXP 9
13092: PPUSH
13093: LD_STRING DJ-2-Contact
13095: PPUSH
13096: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13100: LD_INT 22
13102: PUSH
13103: LD_INT 8
13105: PUSH
13106: EMPTY
13107: LIST
13108: LIST
13109: PUSH
13110: LD_INT 21
13112: PUSH
13113: LD_INT 1
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: PPUSH
13124: CALL_OW 69
13128: PUSH
13129: LD_INT 8
13131: PPUSH
13132: LD_INT 1
13134: PPUSH
13135: CALL_OW 81
13139: PUSH
13140: LD_INT 2
13142: EQUAL
13143: AND
13144: IFFALSE 13170
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13146: LD_EXP 11
13150: PPUSH
13151: LD_STRING DM-3-Contact
13153: PPUSH
13154: CALL_OW 94
// Say ( playerCommander , DJ-3-Contact ) ;
13158: LD_EXP 9
13162: PPUSH
13163: LD_STRING DJ-3-Contact
13165: PPUSH
13166: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13170: LD_EXP 11
13174: PPUSH
13175: LD_STRING DM-4-Contact
13177: PPUSH
13178: CALL_OW 94
// Say ( playerCommander , DJ-4-Contact ) ;
13182: LD_EXP 9
13186: PPUSH
13187: LD_STRING DJ-4-Contact
13189: PPUSH
13190: CALL_OW 88
// SayRadio ( allyCommander , DM-5a-Contact ) ;
13194: LD_EXP 11
13198: PPUSH
13199: LD_STRING DM-5a-Contact
13201: PPUSH
13202: CALL_OW 94
// end ; if commander = 3 then
13206: LD_EXP 25
13210: PUSH
13211: LD_INT 3
13213: EQUAL
13214: IFFALSE 13370
// begin SayRadio ( allyCommander , DM-2a-Contact ) ;
13216: LD_EXP 11
13220: PPUSH
13221: LD_STRING DM-2a-Contact
13223: PPUSH
13224: CALL_OW 94
// Say ( playerCommander , DS-2a-Contact ) ;
13228: LD_EXP 9
13232: PPUSH
13233: LD_STRING DS-2a-Contact
13235: PPUSH
13236: CALL_OW 88
// SayRadio ( allyCommander , DM-2b-Contact ) ;
13240: LD_EXP 11
13244: PPUSH
13245: LD_STRING DM-2b-Contact
13247: PPUSH
13248: CALL_OW 94
// Say ( playerCommander , DS-2b-Contact ) ;
13252: LD_EXP 9
13256: PPUSH
13257: LD_STRING DS-2b-Contact
13259: PPUSH
13260: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13264: LD_INT 22
13266: PUSH
13267: LD_INT 8
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PUSH
13274: LD_INT 21
13276: PUSH
13277: LD_INT 1
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PPUSH
13288: CALL_OW 69
13292: PUSH
13293: LD_INT 8
13295: PPUSH
13296: LD_INT 1
13298: PPUSH
13299: CALL_OW 81
13303: PUSH
13304: LD_INT 2
13306: EQUAL
13307: AND
13308: IFFALSE 13334
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13310: LD_EXP 11
13314: PPUSH
13315: LD_STRING DM-3-Contact
13317: PPUSH
13318: CALL_OW 94
// Say ( playerCommander , DS-3-Contact ) ;
13322: LD_EXP 9
13326: PPUSH
13327: LD_STRING DS-3-Contact
13329: PPUSH
13330: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13334: LD_EXP 11
13338: PPUSH
13339: LD_STRING DM-4-Contact
13341: PPUSH
13342: CALL_OW 94
// Say ( playerCommander , DS-4-Contact ) ;
13346: LD_EXP 9
13350: PPUSH
13351: LD_STRING DS-4-Contact
13353: PPUSH
13354: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13358: LD_EXP 11
13362: PPUSH
13363: LD_STRING DM-5-Contact
13365: PPUSH
13366: CALL_OW 94
// end ; DialogueOff ;
13370: CALL_OW 7
// ChangeMissionObjectives ( O3 ) ;
13374: LD_STRING O3
13376: PPUSH
13377: CALL_OW 337
// end ;
13381: END
// every 0 0$10 trigger GameType = 1 and legDestCounter >= [ 15 , 20 , 25 ] [ Difficulty ] and FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) >= 5 do var time , sib , sources , i ;
13382: LD_EXP 2
13386: PUSH
13387: LD_INT 1
13389: EQUAL
13390: PUSH
13391: LD_EXP 18
13395: PUSH
13396: LD_INT 15
13398: PUSH
13399: LD_INT 20
13401: PUSH
13402: LD_INT 25
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: LIST
13409: PUSH
13410: LD_OWVAR 67
13414: ARRAY
13415: GREATEREQUAL
13416: AND
13417: PUSH
13418: LD_INT 22
13420: PUSH
13421: LD_INT 8
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: PUSH
13428: LD_INT 30
13430: PUSH
13431: LD_INT 1
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: PPUSH
13442: CALL_OW 69
13446: AND
13447: PUSH
13448: LD_INT 22
13450: PUSH
13451: LD_INT 8
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PUSH
13458: LD_INT 21
13460: PUSH
13461: LD_INT 3
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: PPUSH
13472: CALL_OW 69
13476: PUSH
13477: LD_INT 5
13479: GREATEREQUAL
13480: AND
13481: IFFALSE 14004
13483: GO 13485
13485: DISABLE
13486: LD_INT 0
13488: PPUSH
13489: PPUSH
13490: PPUSH
13491: PPUSH
// begin DialogueOn ;
13492: CALL_OW 6
// SayRadio ( Farmer , DF-1-Leg ) ;
13496: LD_EXP 13
13500: PPUSH
13501: LD_STRING DF-1-Leg
13503: PPUSH
13504: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Leg ) ;
13508: LD_EXP 9
13512: PPUSH
13513: LD_STRING D
13515: PUSH
13516: LD_STRING I
13518: PUSH
13519: LD_STRING J
13521: PUSH
13522: LD_STRING S
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: LIST
13529: PUSH
13530: LD_EXP 25
13534: ARRAY
13535: STR
13536: PUSH
13537: LD_STRING -1-Leg
13539: STR
13540: PPUSH
13541: CALL_OW 88
// SayRadio ( Farmer , DF-2-Leg ) ;
13545: LD_EXP 13
13549: PPUSH
13550: LD_STRING DF-2-Leg
13552: PPUSH
13553: CALL_OW 94
// DialogueOff ;
13557: CALL_OW 7
// case Query ( QLegionOffer ) of 1 :
13561: LD_STRING QLegionOffer
13563: PPUSH
13564: CALL_OW 97
13568: PUSH
13569: LD_INT 1
13571: DOUBLE
13572: EQUAL
13573: IFTRUE 13577
13575: GO 13580
13577: POP
// ; 2 :
13578: GO 13594
13580: LD_INT 2
13582: DOUBLE
13583: EQUAL
13584: IFTRUE 13588
13586: GO 13593
13588: POP
// exit ; end ;
13589: GO 14004
13591: GO 13594
13593: POP
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-Leg ) ;
13594: LD_EXP 9
13598: PPUSH
13599: LD_STRING D
13601: PUSH
13602: LD_STRING I
13604: PUSH
13605: LD_STRING J
13607: PUSH
13608: LD_STRING S
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: LIST
13615: PUSH
13616: LD_EXP 25
13620: ARRAY
13621: STR
13622: PUSH
13623: LD_STRING -2-Leg
13625: STR
13626: PPUSH
13627: CALL_OW 88
// legOfferAccepted := true ;
13631: LD_ADDR_EXP 20
13635: PUSH
13636: LD_INT 1
13638: ST_TO_ADDR
// SetAreaMapShow ( legOfferArea , 1 ) ;
13639: LD_INT 21
13641: PPUSH
13642: LD_INT 1
13644: PPUSH
13645: CALL_OW 424
// CenterOnXY ( 190 , 227 ) ;
13649: LD_INT 190
13651: PPUSH
13652: LD_INT 227
13654: PPUSH
13655: CALL_OW 84
// time := [ 8 8$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
13659: LD_ADDR_VAR 0 1
13663: PUSH
13664: LD_INT 16800
13666: PUSH
13667: LD_INT 14700
13669: PUSH
13670: LD_INT 12600
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: LIST
13677: PUSH
13678: LD_OWVAR 67
13682: ARRAY
13683: ST_TO_ADDR
// sib := 100 ;
13684: LD_ADDR_VAR 0 2
13688: PUSH
13689: LD_INT 100
13691: ST_TO_ADDR
// disableGlobalTimer := true ;
13692: LD_ADDR_EXP 4
13696: PUSH
13697: LD_INT 1
13699: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13700: LD_INT 35
13702: PPUSH
13703: CALL_OW 67
// time := time - 0 0$1 ;
13707: LD_ADDR_VAR 0 1
13711: PUSH
13712: LD_VAR 0 1
13716: PUSH
13717: LD_INT 35
13719: MINUS
13720: ST_TO_ADDR
// sources := GetResourceArea ( legOfferArea , mat_siberit ) ;
13721: LD_ADDR_VAR 0 3
13725: PUSH
13726: LD_INT 21
13728: PPUSH
13729: LD_INT 3
13731: PPUSH
13732: CALL_OW 287
13736: ST_TO_ADDR
// display_strings := [ #SkrTime , tick , #Skr-LegOffer , sib , time ] ;
13737: LD_ADDR_OWVAR 47
13741: PUSH
13742: LD_STRING #SkrTime
13744: PUSH
13745: LD_OWVAR 1
13749: PUSH
13750: LD_STRING #Skr-LegOffer
13752: PUSH
13753: LD_VAR 0 2
13757: PUSH
13758: LD_VAR 0 1
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: ST_TO_ADDR
// if sources then
13770: LD_VAR 0 3
13774: IFFALSE 13806
// begin sib := sib - sources * 10 ;
13776: LD_ADDR_VAR 0 2
13780: PUSH
13781: LD_VAR 0 2
13785: PUSH
13786: LD_VAR 0 3
13790: PUSH
13791: LD_INT 10
13793: MUL
13794: MINUS
13795: ST_TO_ADDR
// EraseResourceArea ( legOfferArea , mat_siberit ) ;
13796: LD_INT 21
13798: PPUSH
13799: LD_INT 3
13801: PPUSH
13802: CALL_OW 286
// end ; until time = 0 0$00 or sib <= 0 or not FilterAllUnits ( [ f_side , 8 ] ) ;
13806: LD_VAR 0 1
13810: PUSH
13811: LD_INT 0
13813: EQUAL
13814: PUSH
13815: LD_VAR 0 2
13819: PUSH
13820: LD_INT 0
13822: LESSEQUAL
13823: OR
13824: PUSH
13825: LD_INT 22
13827: PUSH
13828: LD_INT 8
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: PPUSH
13835: CALL_OW 69
13839: NOT
13840: OR
13841: IFFALSE 13700
// SetAreaMapShow ( legOfferArea , 0 ) ;
13843: LD_INT 21
13845: PPUSH
13846: LD_INT 0
13848: PPUSH
13849: CALL_OW 424
// disableGlobalTimer := false ;
13853: LD_ADDR_EXP 4
13857: PUSH
13858: LD_INT 0
13860: ST_TO_ADDR
// if sib <= 0 then
13861: LD_VAR 0 2
13865: PUSH
13866: LD_INT 0
13868: LESSEQUAL
13869: IFFALSE 13985
// begin legChangeSide := true ;
13871: LD_ADDR_EXP 21
13875: PUSH
13876: LD_INT 1
13878: ST_TO_ADDR
// SayRadio ( Farmer , DF-4y-Leg ) ;
13879: LD_EXP 13
13883: PPUSH
13884: LD_STRING DF-4y-Leg
13886: PPUSH
13887: CALL_OW 94
// ChangeMissionObjectives ( O3a ) ;
13891: LD_STRING O3a
13893: PPUSH
13894: CALL_OW 337
// ChangeSideFog ( 8 , 1 ) ;
13898: LD_INT 8
13900: PPUSH
13901: LD_INT 1
13903: PPUSH
13904: CALL_OW 343
// SetAttitude ( 8 , 1 , att_friend , true ) ;
13908: LD_INT 8
13910: PPUSH
13911: LD_INT 1
13913: PPUSH
13914: LD_INT 1
13916: PPUSH
13917: LD_INT 1
13919: PPUSH
13920: CALL_OW 80
// SetAttitude ( 8 , 4 , att_friend , true ) ;
13924: LD_INT 8
13926: PPUSH
13927: LD_INT 4
13929: PPUSH
13930: LD_INT 1
13932: PPUSH
13933: LD_INT 1
13935: PPUSH
13936: CALL_OW 80
// SetAttitude ( 8 , 6 , att_enemy , true ) ;
13940: LD_INT 8
13942: PPUSH
13943: LD_INT 6
13945: PPUSH
13946: LD_INT 2
13948: PPUSH
13949: LD_INT 1
13951: PPUSH
13952: CALL_OW 80
// SetAttitude ( 8 , 3 , att_enemy , true ) ;
13956: LD_INT 8
13958: PPUSH
13959: LD_INT 3
13961: PPUSH
13962: LD_INT 2
13964: PPUSH
13965: LD_INT 1
13967: PPUSH
13968: CALL_OW 80
// wait ( 0 0$30 ) ;
13972: LD_INT 1050
13974: PPUSH
13975: CALL_OW 67
// PrepareLegionReinforcements ;
13979: CALL 10275 0 0
// end else
13983: GO 14004
// begin ChangeMissionObjectives ( O3a ) ;
13985: LD_STRING O3a
13987: PPUSH
13988: CALL_OW 337
// SayRadio ( Farmer , DF-4n-Leg ) ;
13992: LD_EXP 13
13996: PPUSH
13997: LD_STRING DF-4n-Leg
13999: PPUSH
14000: CALL_OW 94
// end ; end ;
14004: PPOPN 4
14006: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 and GetAttitude ( 8 , 1 ) = att_enemy do
14007: LD_INT 22
14009: PUSH
14010: LD_INT 8
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: PUSH
14017: LD_INT 21
14019: PUSH
14020: LD_INT 1
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: PPUSH
14031: CALL_OW 69
14035: PUSH
14036: LD_INT 0
14038: EQUAL
14039: PUSH
14040: LD_INT 8
14042: PPUSH
14043: LD_INT 1
14045: PPUSH
14046: CALL_OW 81
14050: PUSH
14051: LD_INT 2
14053: EQUAL
14054: AND
14055: IFFALSE 14067
14057: GO 14059
14059: DISABLE
// ChangeMissionObjectives ( O3a ) ;
14060: LD_STRING O3a
14062: PPUSH
14063: CALL_OW 337
14067: END
// every 0 0$1 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) = 0 do
14068: LD_EXP 2
14072: PUSH
14073: LD_INT 1
14075: EQUAL
14076: PUSH
14077: LD_EXP 3
14081: AND
14082: PUSH
14083: LD_INT 22
14085: PUSH
14086: LD_INT 3
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: PUSH
14093: LD_INT 21
14095: PUSH
14096: LD_INT 1
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: PPUSH
14107: CALL_OW 69
14111: PUSH
14112: LD_INT 0
14114: EQUAL
14115: AND
14116: PUSH
14117: LD_INT 22
14119: PUSH
14120: LD_INT 3
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: PUSH
14127: LD_INT 30
14129: PUSH
14130: LD_INT 1
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: PPUSH
14141: CALL_OW 69
14145: PUSH
14146: LD_INT 0
14148: EQUAL
14149: AND
14150: IFFALSE 14388
14152: GO 14154
14154: DISABLE
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Win ) ;
14155: LD_EXP 9
14159: PPUSH
14160: LD_STRING D
14162: PUSH
14163: LD_STRING I
14165: PUSH
14166: LD_STRING J
14168: PUSH
14169: LD_STRING S
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: LIST
14176: PUSH
14177: LD_EXP 25
14181: ARRAY
14182: STR
14183: PUSH
14184: LD_STRING -1-Win
14186: STR
14187: PPUSH
14188: CALL_OW 88
// if tick >= [ 150 150$0 , 130 130$0 , 110 110$0 ] [ Difficulty ] then
14192: LD_OWVAR 1
14196: PUSH
14197: LD_INT 315000
14199: PUSH
14200: LD_INT 273000
14202: PUSH
14203: LD_INT 231000
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: LIST
14210: PUSH
14211: LD_OWVAR 67
14215: ARRAY
14216: GREATEREQUAL
14217: IFFALSE 14232
// AddMedal ( med1 , - 1 ) else
14219: LD_STRING med1
14221: PPUSH
14222: LD_INT 1
14224: NEG
14225: PPUSH
14226: CALL_OW 101
14230: GO 14242
// AddMedal ( med1 , 1 ) ;
14232: LD_STRING med1
14234: PPUSH
14235: LD_INT 1
14237: PPUSH
14238: CALL_OW 101
// if allyDestCounter >= [ 20 , 15 , 10 ] [ Difficulty ] then
14242: LD_EXP 22
14246: PUSH
14247: LD_INT 20
14249: PUSH
14250: LD_INT 15
14252: PUSH
14253: LD_INT 10
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: LIST
14260: PUSH
14261: LD_OWVAR 67
14265: ARRAY
14266: GREATEREQUAL
14267: IFFALSE 14282
// AddMedal ( med2 , - 1 ) else
14269: LD_STRING med2
14271: PPUSH
14272: LD_INT 1
14274: NEG
14275: PPUSH
14276: CALL_OW 101
14280: GO 14292
// AddMedal ( med2 , 1 ) ;
14282: LD_STRING med2
14284: PPUSH
14285: LD_INT 1
14287: PPUSH
14288: CALL_OW 101
// if GetAttitude ( 8 , 1 ) = att_friend then
14292: LD_INT 8
14294: PPUSH
14295: LD_INT 1
14297: PPUSH
14298: CALL_OW 81
14302: PUSH
14303: LD_INT 1
14305: EQUAL
14306: IFFALSE 14320
// AddMedal ( med3 , 1 ) else
14308: LD_STRING med3
14310: PPUSH
14311: LD_INT 1
14313: PPUSH
14314: CALL_OW 101
14318: GO 14377
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 then
14320: LD_INT 22
14322: PUSH
14323: LD_INT 8
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: PUSH
14330: LD_INT 21
14332: PUSH
14333: LD_INT 1
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PPUSH
14344: CALL_OW 69
14348: PUSH
14349: LD_INT 0
14351: EQUAL
14352: IFFALSE 14366
// AddMedal ( med3 , 2 ) else
14354: LD_STRING med3
14356: PPUSH
14357: LD_INT 2
14359: PPUSH
14360: CALL_OW 101
14364: GO 14377
// AddMedal ( med3 , - 1 ) ;
14366: LD_STRING med3
14368: PPUSH
14369: LD_INT 1
14371: NEG
14372: PPUSH
14373: CALL_OW 101
// GiveMedals ( MAIN ) ;
14377: LD_STRING MAIN
14379: PPUSH
14380: CALL_OW 102
// YouWin ;
14384: CALL_OW 103
// end ;
14388: END
// every 10 trigger GameType = 1 and staticMines and FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) do var i , j , tmp , x , y ;
14389: LD_EXP 2
14393: PUSH
14394: LD_INT 1
14396: EQUAL
14397: PUSH
14398: LD_EXP 16
14402: AND
14403: PUSH
14404: LD_INT 20
14406: PPUSH
14407: LD_INT 81
14409: PUSH
14410: LD_INT 8
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PPUSH
14417: CALL_OW 70
14421: AND
14422: IFFALSE 14701
14424: GO 14426
14426: DISABLE
14427: LD_INT 0
14429: PPUSH
14430: PPUSH
14431: PPUSH
14432: PPUSH
14433: PPUSH
// begin enable ;
14434: ENABLE
// tmp := FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) ;
14435: LD_ADDR_VAR 0 3
14439: PUSH
14440: LD_INT 20
14442: PPUSH
14443: LD_INT 81
14445: PUSH
14446: LD_INT 8
14448: PUSH
14449: EMPTY
14450: LIST
14451: LIST
14452: PPUSH
14453: CALL_OW 70
14457: ST_TO_ADDR
// if not tmp then
14458: LD_VAR 0 3
14462: NOT
14463: IFFALSE 14467
// exit ;
14465: GO 14701
// for i in tmp do
14467: LD_ADDR_VAR 0 1
14471: PUSH
14472: LD_VAR 0 3
14476: PUSH
14477: FOR_IN
14478: IFFALSE 14699
// begin x := GetX ( i ) ;
14480: LD_ADDR_VAR 0 4
14484: PUSH
14485: LD_VAR 0 1
14489: PPUSH
14490: CALL_OW 250
14494: ST_TO_ADDR
// y := GetY ( i ) ;
14495: LD_ADDR_VAR 0 5
14499: PUSH
14500: LD_VAR 0 1
14504: PPUSH
14505: CALL_OW 251
14509: ST_TO_ADDR
// if MineAtPos ( x , y ) then
14510: LD_VAR 0 4
14514: PPUSH
14515: LD_VAR 0 5
14519: PPUSH
14520: CALL_OW 458
14524: IFFALSE 14697
// begin LaunchMineAtPos ( x , y , 8 ) ;
14526: LD_VAR 0 4
14530: PPUSH
14531: LD_VAR 0 5
14535: PPUSH
14536: LD_INT 8
14538: PPUSH
14539: CALL_OW 456
// if not dialogueMineDetected then
14543: LD_EXP 28
14547: NOT
14548: IFFALSE 14609
// begin CenterNowOnXY ( x , y ) ;
14550: LD_VAR 0 4
14554: PPUSH
14555: LD_VAR 0 5
14559: PPUSH
14560: CALL_OW 86
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Mine ) ;
14564: LD_EXP 9
14568: PPUSH
14569: LD_STRING D
14571: PUSH
14572: LD_STRING I
14574: PUSH
14575: LD_STRING J
14577: PUSH
14578: LD_STRING S
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: LIST
14585: PUSH
14586: LD_EXP 25
14590: ARRAY
14591: STR
14592: PUSH
14593: LD_STRING -1-Mine
14595: STR
14596: PPUSH
14597: CALL_OW 88
// dialogueMineDetected := true ;
14601: LD_ADDR_EXP 28
14605: PUSH
14606: LD_INT 1
14608: ST_TO_ADDR
// end ; for j = 1 to staticMines do
14609: LD_ADDR_VAR 0 2
14613: PUSH
14614: DOUBLE
14615: LD_INT 1
14617: DEC
14618: ST_TO_ADDR
14619: LD_EXP 16
14623: PUSH
14624: FOR_TO
14625: IFFALSE 14695
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
14627: LD_EXP 16
14631: PUSH
14632: LD_VAR 0 2
14636: ARRAY
14637: PUSH
14638: LD_INT 1
14640: ARRAY
14641: PUSH
14642: LD_VAR 0 4
14646: EQUAL
14647: PUSH
14648: LD_EXP 16
14652: PUSH
14653: LD_VAR 0 2
14657: ARRAY
14658: PUSH
14659: LD_INT 2
14661: ARRAY
14662: PUSH
14663: LD_VAR 0 5
14667: EQUAL
14668: AND
14669: IFFALSE 14693
// begin staticMines := Delete ( staticMines , j ) ;
14671: LD_ADDR_EXP 16
14675: PUSH
14676: LD_EXP 16
14680: PPUSH
14681: LD_VAR 0 2
14685: PPUSH
14686: CALL_OW 3
14690: ST_TO_ADDR
// break ;
14691: GO 14695
// end ;
14693: GO 14624
14695: POP
14696: POP
// end ; end ;
14697: GO 14477
14699: POP
14700: POP
// end ;
14701: PPOPN 5
14703: END
// every 30 30$00 + 50 50$00 trigger GameType = 1 and game and sibBombAllowed and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_btype , b_factory ] ) do var bomb , e ;
14704: LD_EXP 2
14708: PUSH
14709: LD_INT 1
14711: EQUAL
14712: PUSH
14713: LD_EXP 3
14717: AND
14718: PUSH
14719: LD_EXP 23
14723: AND
14724: PUSH
14725: LD_EXP 50
14729: PUSH
14730: LD_EXP 7
14734: ARRAY
14735: PPUSH
14736: LD_INT 30
14738: PUSH
14739: LD_INT 3
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: PPUSH
14746: CALL_OW 72
14750: AND
14751: IFFALSE 14955
14753: GO 14755
14755: DISABLE
14756: LD_INT 0
14758: PPUSH
14759: PPUSH
// begin enable ;
14760: ENABLE
// MC_InsertProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
14761: LD_EXP 7
14765: PPUSH
14766: LD_INT 23
14768: PUSH
14769: LD_INT 3
14771: PUSH
14772: LD_INT 3
14774: PUSH
14775: LD_INT 48
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: PUSH
14784: EMPTY
14785: LIST
14786: PPUSH
14787: CALL 81937 0 2
// repeat wait ( 0 0$1 ) ;
14791: LD_INT 35
14793: PPUSH
14794: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14798: LD_INT 22
14800: PUSH
14801: LD_INT 3
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PUSH
14808: LD_INT 34
14810: PUSH
14811: LD_INT 48
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PPUSH
14822: CALL_OW 69
14826: IFFALSE 14791
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14828: LD_ADDR_VAR 0 1
14832: PUSH
14833: LD_INT 22
14835: PUSH
14836: LD_INT 3
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: PUSH
14843: LD_INT 34
14845: PUSH
14846: LD_INT 48
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PPUSH
14857: CALL_OW 69
14861: ST_TO_ADDR
// e := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) ;
14862: LD_ADDR_VAR 0 2
14866: PUSH
14867: LD_INT 81
14869: PUSH
14870: LD_INT 3
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: PUSH
14877: LD_INT 21
14879: PUSH
14880: LD_INT 3
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: PPUSH
14891: CALL_OW 69
14895: ST_TO_ADDR
// if e then
14896: LD_VAR 0 2
14900: IFFALSE 14926
// e := NearestUnitToUnit ( e , bomb [ 1 ] ) ;
14902: LD_ADDR_VAR 0 2
14906: PUSH
14907: LD_VAR 0 2
14911: PPUSH
14912: LD_VAR 0 1
14916: PUSH
14917: LD_INT 1
14919: ARRAY
14920: PPUSH
14921: CALL_OW 74
14925: ST_TO_ADDR
// ComAttackPlace ( bomb , GetX ( e ) , GetY ( e ) ) ;
14926: LD_VAR 0 1
14930: PPUSH
14931: LD_VAR 0 2
14935: PPUSH
14936: CALL_OW 250
14940: PPUSH
14941: LD_VAR 0 2
14945: PPUSH
14946: CALL_OW 251
14950: PPUSH
14951: CALL_OW 116
// end ;
14955: PPOPN 2
14957: END
// every 0 0$2 trigger Difficulty > 1 and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) and GameType = 1 and game and GetTech ( tech_Behemoth , 3 ) = state_researched do var tmp , i ;
14958: LD_OWVAR 67
14962: PUSH
14963: LD_INT 1
14965: GREATER
14966: PUSH
14967: LD_EXP 50
14971: PUSH
14972: LD_EXP 7
14976: ARRAY
14977: PPUSH
14978: LD_INT 25
14980: PUSH
14981: LD_INT 3
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PPUSH
14988: CALL_OW 72
14992: AND
14993: PUSH
14994: LD_EXP 2
14998: PUSH
14999: LD_INT 1
15001: EQUAL
15002: AND
15003: PUSH
15004: LD_EXP 3
15008: AND
15009: PUSH
15010: LD_INT 23
15012: PPUSH
15013: LD_INT 3
15015: PPUSH
15016: CALL_OW 321
15020: PUSH
15021: LD_INT 2
15023: EQUAL
15024: AND
15025: IFFALSE 15152
15027: GO 15029
15029: DISABLE
15030: LD_INT 0
15032: PPUSH
15033: PPUSH
// begin tmp := UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) ;
15034: LD_ADDR_VAR 0 1
15038: PUSH
15039: LD_EXP 50
15043: PUSH
15044: LD_EXP 7
15048: ARRAY
15049: PPUSH
15050: LD_INT 25
15052: PUSH
15053: LD_INT 3
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: PPUSH
15060: CALL_OW 72
15064: ST_TO_ADDR
// if not tmp then
15065: LD_VAR 0 1
15069: NOT
15070: IFFALSE 15074
// exit ;
15072: GO 15152
// for i in tmp do
15074: LD_ADDR_VAR 0 2
15078: PUSH
15079: LD_VAR 0 1
15083: PUSH
15084: FOR_IN
15085: IFFALSE 15131
// begin SetTag ( i , 29 ) ;
15087: LD_VAR 0 2
15091: PPUSH
15092: LD_INT 29
15094: PPUSH
15095: CALL_OW 109
// ComExitBuilding ( i ) ;
15099: LD_VAR 0 2
15103: PPUSH
15104: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , 97 , 133 , 0 ) ;
15108: LD_VAR 0 2
15112: PPUSH
15113: LD_INT 37
15115: PPUSH
15116: LD_INT 97
15118: PPUSH
15119: LD_INT 133
15121: PPUSH
15122: LD_INT 0
15124: PPUSH
15125: CALL_OW 230
// end ;
15129: GO 15084
15131: POP
15132: POP
// wait ( 1 1$00 ) ;
15133: LD_INT 2100
15135: PPUSH
15136: CALL_OW 67
// MC_Reset ( mc_rus_1 , 29 ) ;
15140: LD_EXP 7
15144: PPUSH
15145: LD_INT 29
15147: PPUSH
15148: CALL 62172 0 2
// end ;
15152: PPOPN 2
15154: END
// every 7 7$00 trigger GameType = 1 and GetBType ( HexInfo ( 84 , 128 ) ) = b_warehouse and GetSide ( HexInfo ( 84 , 128 ) ) = 3 do var veh , depot ;
15155: LD_EXP 2
15159: PUSH
15160: LD_INT 1
15162: EQUAL
15163: PUSH
15164: LD_INT 84
15166: PPUSH
15167: LD_INT 128
15169: PPUSH
15170: CALL_OW 428
15174: PPUSH
15175: CALL_OW 266
15179: PUSH
15180: LD_INT 1
15182: EQUAL
15183: AND
15184: PUSH
15185: LD_INT 84
15187: PPUSH
15188: LD_INT 128
15190: PPUSH
15191: CALL_OW 428
15195: PPUSH
15196: CALL_OW 255
15200: PUSH
15201: LD_INT 3
15203: EQUAL
15204: AND
15205: IFFALSE 15378
15207: GO 15209
15209: DISABLE
15210: LD_INT 0
15212: PPUSH
15213: PPUSH
// begin enable ;
15214: ENABLE
// depot := HexInfo ( 84 , 128 ) ;
15215: LD_ADDR_VAR 0 2
15219: PUSH
15220: LD_INT 84
15222: PPUSH
15223: LD_INT 128
15225: PPUSH
15226: CALL_OW 428
15230: ST_TO_ADDR
// uc_side := 3 ;
15231: LD_ADDR_OWVAR 20
15235: PUSH
15236: LD_INT 3
15238: ST_TO_ADDR
// uc_nation := 3 ;
15239: LD_ADDR_OWVAR 21
15243: PUSH
15244: LD_INT 3
15246: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay , 0 ) ;
15247: LD_INT 21
15249: PPUSH
15250: LD_INT 3
15252: PPUSH
15253: LD_INT 3
15255: PPUSH
15256: LD_INT 51
15258: PPUSH
15259: LD_INT 0
15261: PPUSH
15262: CALL 24240 0 5
// veh := CreateVehicle ;
15266: LD_ADDR_VAR 0 1
15270: PUSH
15271: CALL_OW 45
15275: ST_TO_ADDR
// PlaceUnitXY ( veh , 126 , 227 , false ) ;
15276: LD_VAR 0 1
15280: PPUSH
15281: LD_INT 126
15283: PPUSH
15284: LD_INT 227
15286: PPUSH
15287: LD_INT 0
15289: PPUSH
15290: CALL_OW 48
// SetCargo ( veh , mat_oil , 100 ) ;
15294: LD_VAR 0 1
15298: PPUSH
15299: LD_INT 2
15301: PPUSH
15302: LD_INT 100
15304: PPUSH
15305: CALL_OW 290
// ComGive ( veh , depot ) ;
15309: LD_VAR 0 1
15313: PPUSH
15314: LD_VAR 0 2
15318: PPUSH
15319: CALL_OW 161
// AddComMoveXY ( veh , 126 , 227 ) ;
15323: LD_VAR 0 1
15327: PPUSH
15328: LD_INT 126
15330: PPUSH
15331: LD_INT 227
15333: PPUSH
15334: CALL_OW 171
// wait ( 0 0$10 ) ;
15338: LD_INT 350
15340: PPUSH
15341: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15345: LD_INT 35
15347: PPUSH
15348: CALL_OW 67
// until IsAt ( veh , 126 , 227 ) ;
15352: LD_VAR 0 1
15356: PPUSH
15357: LD_INT 126
15359: PPUSH
15360: LD_INT 227
15362: PPUSH
15363: CALL_OW 307
15367: IFFALSE 15345
// RemoveUnit ( veh ) ;
15369: LD_VAR 0 1
15373: PPUSH
15374: CALL_OW 64
// end ;
15378: PPOPN 2
15380: END
// every 9 9$00 trigger GameType = 1 and outpostEscape and commander = 2 do var veh , depot ;
15381: LD_EXP 2
15385: PUSH
15386: LD_INT 1
15388: EQUAL
15389: PUSH
15390: LD_EXP 27
15394: AND
15395: PUSH
15396: LD_EXP 25
15400: PUSH
15401: LD_INT 2
15403: EQUAL
15404: AND
15405: IFFALSE 15597
15407: GO 15409
15409: DISABLE
15410: LD_INT 0
15412: PPUSH
15413: PPUSH
// begin enable ;
15414: ENABLE
// if tick >= [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] then
15415: LD_OWVAR 1
15419: PUSH
15420: LD_INT 105000
15422: PUSH
15423: LD_INT 84000
15425: PUSH
15426: LD_INT 63000
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: LIST
15433: PUSH
15434: LD_OWVAR 67
15438: ARRAY
15439: GREATEREQUAL
15440: IFFALSE 15443
// disable ;
15442: DISABLE
// uc_side := 4 ;
15443: LD_ADDR_OWVAR 20
15447: PUSH
15448: LD_INT 4
15450: ST_TO_ADDR
// uc_nation := 1 ;
15451: LD_ADDR_OWVAR 21
15455: PUSH
15456: LD_INT 1
15458: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 0 ) ;
15459: LD_INT 2
15461: PPUSH
15462: LD_INT 3
15464: PPUSH
15465: LD_INT 3
15467: PPUSH
15468: LD_INT 12
15470: PPUSH
15471: LD_INT 0
15473: PPUSH
15474: CALL 24240 0 5
// veh := CreateVehicle ;
15478: LD_ADDR_VAR 0 1
15482: PUSH
15483: CALL_OW 45
15487: ST_TO_ADDR
// PlaceUnitXY ( veh , 229 , 226 , false ) ;
15488: LD_VAR 0 1
15492: PPUSH
15493: LD_INT 229
15495: PPUSH
15496: LD_INT 226
15498: PPUSH
15499: LD_INT 0
15501: PPUSH
15502: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
15506: LD_VAR 0 1
15510: PPUSH
15511: LD_INT 1
15513: PPUSH
15514: LD_INT 100
15516: PPUSH
15517: CALL_OW 290
// AddComMoveToArea ( veh , ruOutpostArea ) ;
15521: LD_VAR 0 1
15525: PPUSH
15526: LD_INT 25
15528: PPUSH
15529: CALL_OW 173
// AddComUnload ( veh ) ;
15533: LD_VAR 0 1
15537: PPUSH
15538: CALL_OW 219
// AddComMoveXY ( veh , 229 , 226 ) ;
15542: LD_VAR 0 1
15546: PPUSH
15547: LD_INT 229
15549: PPUSH
15550: LD_INT 226
15552: PPUSH
15553: CALL_OW 171
// wait ( 0 0$10 ) ;
15557: LD_INT 350
15559: PPUSH
15560: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15564: LD_INT 35
15566: PPUSH
15567: CALL_OW 67
// until IsAt ( veh , 229 , 226 ) ;
15571: LD_VAR 0 1
15575: PPUSH
15576: LD_INT 229
15578: PPUSH
15579: LD_INT 226
15581: PPUSH
15582: CALL_OW 307
15586: IFFALSE 15564
// RemoveUnit ( veh ) ;
15588: LD_VAR 0 1
15592: PPUSH
15593: CALL_OW 64
// end ;
15597: PPOPN 2
15599: END
// every 15 15$00 trigger GameType = 1 and game and reinforceAllowed do var i , j , veh , tmp , amount ;
15600: LD_EXP 2
15604: PUSH
15605: LD_INT 1
15607: EQUAL
15608: PUSH
15609: LD_EXP 3
15613: AND
15614: PUSH
15615: LD_EXP 24
15619: AND
15620: IFFALSE 15953
15622: GO 15624
15624: DISABLE
15625: LD_INT 0
15627: PPUSH
15628: PPUSH
15629: PPUSH
15630: PPUSH
15631: PPUSH
// begin enable ;
15632: ENABLE
// tmp := [ ] ;
15633: LD_ADDR_VAR 0 4
15637: PUSH
15638: EMPTY
15639: ST_TO_ADDR
// if commander = 1 then
15640: LD_EXP 25
15644: PUSH
15645: LD_INT 1
15647: EQUAL
15648: IFFALSE 15660
// amount := 3 else
15650: LD_ADDR_VAR 0 5
15654: PUSH
15655: LD_INT 3
15657: ST_TO_ADDR
15658: GO 15668
// amount := 2 ;
15660: LD_ADDR_VAR 0 5
15664: PUSH
15665: LD_INT 2
15667: ST_TO_ADDR
// for i = 1 to amount do
15668: LD_ADDR_VAR 0 1
15672: PUSH
15673: DOUBLE
15674: LD_INT 1
15676: DEC
15677: ST_TO_ADDR
15678: LD_VAR 0 5
15682: PUSH
15683: FOR_TO
15684: IFFALSE 15848
// begin wait ( 0 0$5 ) ;
15686: LD_INT 175
15688: PPUSH
15689: CALL_OW 67
// for j = 1 to 3 do
15693: LD_ADDR_VAR 0 2
15697: PUSH
15698: DOUBLE
15699: LD_INT 1
15701: DEC
15702: ST_TO_ADDR
15703: LD_INT 3
15705: PUSH
15706: FOR_TO
15707: IFFALSE 15844
// begin uc_side := 4 ;
15709: LD_ADDR_OWVAR 20
15713: PUSH
15714: LD_INT 4
15716: ST_TO_ADDR
// uc_nation := 1 ;
15717: LD_ADDR_OWVAR 21
15721: PUSH
15722: LD_INT 1
15724: ST_TO_ADDR
// PrepareVehicle ( [ us_medium_tracked , us_morphling ] [ rand ( 1 , 2 ) ] , engine_siberite , control_computer , [ us_laser , us_double_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
15725: LD_INT 3
15727: PUSH
15728: LD_INT 5
15730: PUSH
15731: EMPTY
15732: LIST
15733: LIST
15734: PUSH
15735: LD_INT 1
15737: PPUSH
15738: LD_INT 2
15740: PPUSH
15741: CALL_OW 12
15745: ARRAY
15746: PPUSH
15747: LD_INT 3
15749: PPUSH
15750: LD_INT 3
15752: PPUSH
15753: LD_INT 9
15755: PUSH
15756: LD_INT 5
15758: PUSH
15759: LD_INT 7
15761: PUSH
15762: EMPTY
15763: LIST
15764: LIST
15765: LIST
15766: PUSH
15767: LD_INT 1
15769: PPUSH
15770: LD_INT 3
15772: PPUSH
15773: CALL_OW 12
15777: ARRAY
15778: PPUSH
15779: LD_INT 100
15781: PPUSH
15782: CALL 24240 0 5
// veh := CreateVehicle ;
15786: LD_ADDR_VAR 0 3
15790: PUSH
15791: CALL_OW 45
15795: ST_TO_ADDR
// tmp := tmp ^ veh ;
15796: LD_ADDR_VAR 0 4
15800: PUSH
15801: LD_VAR 0 4
15805: PUSH
15806: LD_VAR 0 3
15810: ADD
15811: ST_TO_ADDR
// PlaceUnitArea ( veh , westSpawn , false ) ;
15812: LD_VAR 0 3
15816: PPUSH
15817: LD_INT 22
15819: PPUSH
15820: LD_INT 0
15822: PPUSH
15823: CALL_OW 49
// ComMoveXY ( veh , 119 , 215 ) ;
15827: LD_VAR 0 3
15831: PPUSH
15832: LD_INT 119
15834: PPUSH
15835: LD_INT 215
15837: PPUSH
15838: CALL_OW 111
// end ;
15842: GO 15706
15844: POP
15845: POP
// end ;
15846: GO 15683
15848: POP
15849: POP
// wait ( 0 0$3 ) ;
15850: LD_INT 105
15852: PPUSH
15853: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15857: LD_INT 35
15859: PPUSH
15860: CALL_OW 67
// for i in tmp do
15864: LD_ADDR_VAR 0 1
15868: PUSH
15869: LD_VAR 0 4
15873: PUSH
15874: FOR_IN
15875: IFFALSE 15942
// if IsDead ( i ) then
15877: LD_VAR 0 1
15881: PPUSH
15882: CALL_OW 301
15886: IFFALSE 15906
// tmp := tmp diff i else
15888: LD_ADDR_VAR 0 4
15892: PUSH
15893: LD_VAR 0 4
15897: PUSH
15898: LD_VAR 0 1
15902: DIFF
15903: ST_TO_ADDR
15904: GO 15940
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) ;
15906: LD_VAR 0 1
15910: PPUSH
15911: LD_INT 81
15913: PUSH
15914: LD_INT 4
15916: PUSH
15917: EMPTY
15918: LIST
15919: LIST
15920: PPUSH
15921: CALL_OW 69
15925: PPUSH
15926: LD_VAR 0 1
15930: PPUSH
15931: CALL_OW 74
15935: PPUSH
15936: CALL_OW 115
15940: GO 15874
15942: POP
15943: POP
// until tmp = [ ] ;
15944: LD_VAR 0 4
15948: PUSH
15949: EMPTY
15950: EQUAL
15951: IFFALSE 15857
// end ;
15953: PPOPN 5
15955: END
// every 0 0$1 trigger GameType = 1 and game do var i , tmp ;
15956: LD_EXP 2
15960: PUSH
15961: LD_INT 1
15963: EQUAL
15964: PUSH
15965: LD_EXP 3
15969: AND
15970: IFFALSE 16071
15972: GO 15974
15974: DISABLE
15975: LD_INT 0
15977: PPUSH
15978: PPUSH
// begin enable ;
15979: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
15980: LD_ADDR_VAR 0 2
15984: PUSH
15985: LD_INT 3
15987: PUSH
15988: LD_INT 22
15990: PUSH
15991: LD_INT 1
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: PUSH
16002: LD_INT 32
16004: PUSH
16005: LD_INT 1
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: PPUSH
16016: CALL_OW 69
16020: ST_TO_ADDR
// if tmp then
16021: LD_VAR 0 2
16025: IFFALSE 16071
// for i in tmp do
16027: LD_ADDR_VAR 0 1
16031: PUSH
16032: LD_VAR 0 2
16036: PUSH
16037: FOR_IN
16038: IFFALSE 16069
// if GetFuel ( i ) < 3 then
16040: LD_VAR 0 1
16044: PPUSH
16045: CALL_OW 261
16049: PUSH
16050: LD_INT 3
16052: LESS
16053: IFFALSE 16067
// SetFuel ( i , 3 ) ;
16055: LD_VAR 0 1
16059: PPUSH
16060: LD_INT 3
16062: PPUSH
16063: CALL_OW 240
16067: GO 16037
16069: POP
16070: POP
// end ;
16071: PPOPN 2
16073: END
// every 15 15$00 trigger game and GetAttitude ( 8 , 4 ) = att_enemy do var i , un , tmp ;
16074: LD_EXP 3
16078: PUSH
16079: LD_INT 8
16081: PPUSH
16082: LD_INT 4
16084: PPUSH
16085: CALL_OW 81
16089: PUSH
16090: LD_INT 2
16092: EQUAL
16093: AND
16094: IFFALSE 16304
16096: GO 16098
16098: DISABLE
16099: LD_INT 0
16101: PPUSH
16102: PPUSH
16103: PPUSH
// begin enable ;
16104: ENABLE
// tmp := [ ] ;
16105: LD_ADDR_VAR 0 3
16109: PUSH
16110: EMPTY
16111: ST_TO_ADDR
// for i = 1 to 4 do
16112: LD_ADDR_VAR 0 1
16116: PUSH
16117: DOUBLE
16118: LD_INT 1
16120: DEC
16121: ST_TO_ADDR
16122: LD_INT 4
16124: PUSH
16125: FOR_TO
16126: IFFALSE 16270
// begin uc_side := 8 ;
16128: LD_ADDR_OWVAR 20
16132: PUSH
16133: LD_INT 8
16135: ST_TO_ADDR
// uc_nation := nation_arabian ;
16136: LD_ADDR_OWVAR 21
16140: PUSH
16141: LD_INT 2
16143: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] , rand ( 60 , 80 ) ) ;
16144: LD_INT 11
16146: PPUSH
16147: LD_INT 1
16149: PPUSH
16150: LD_INT 5
16152: PPUSH
16153: LD_INT 24
16155: PUSH
16156: LD_INT 23
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: PUSH
16163: LD_INT 1
16165: PPUSH
16166: LD_INT 2
16168: PPUSH
16169: CALL_OW 12
16173: ARRAY
16174: PPUSH
16175: LD_INT 60
16177: PPUSH
16178: LD_INT 80
16180: PPUSH
16181: CALL_OW 12
16185: PPUSH
16186: CALL 24240 0 5
// un := CreateVehicle ;
16190: LD_ADDR_VAR 0 2
16194: PUSH
16195: CALL_OW 45
16199: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16200: LD_VAR 0 2
16204: PPUSH
16205: LD_INT 2
16207: PPUSH
16208: CALL_OW 233
// tmp := tmp ^ un ;
16212: LD_ADDR_VAR 0 3
16216: PUSH
16217: LD_VAR 0 3
16221: PUSH
16222: LD_VAR 0 2
16226: ADD
16227: ST_TO_ADDR
// PlaceUnitXY ( un , 88 , 2 , false ) ;
16228: LD_VAR 0 2
16232: PPUSH
16233: LD_INT 88
16235: PPUSH
16236: LD_INT 2
16238: PPUSH
16239: LD_INT 0
16241: PPUSH
16242: CALL_OW 48
// ComMoveXY ( un , 93 , 13 ) ;
16246: LD_VAR 0 2
16250: PPUSH
16251: LD_INT 93
16253: PPUSH
16254: LD_INT 13
16256: PPUSH
16257: CALL_OW 111
// wait ( 0 0$2 ) ;
16261: LD_INT 70
16263: PPUSH
16264: CALL_OW 67
// end ;
16268: GO 16125
16270: POP
16271: POP
// for i in tmp do
16272: LD_ADDR_VAR 0 1
16276: PUSH
16277: LD_VAR 0 3
16281: PUSH
16282: FOR_IN
16283: IFFALSE 16302
// AddComMoveXY ( i , 136 , 19 ) ;
16285: LD_VAR 0 1
16289: PPUSH
16290: LD_INT 136
16292: PPUSH
16293: LD_INT 19
16295: PPUSH
16296: CALL_OW 171
16300: GO 16282
16302: POP
16303: POP
// end ;
16304: PPOPN 3
16306: END
// every 7 7$30 + 7 7$30 trigger game do var i , base , tmp , target ;
16307: LD_EXP 3
16311: IFFALSE 17230
16313: GO 16315
16315: DISABLE
16316: LD_INT 0
16318: PPUSH
16319: PPUSH
16320: PPUSH
16321: PPUSH
// begin enable ;
16322: ENABLE
// base := mc_leg ;
16323: LD_ADDR_VAR 0 2
16327: PUSH
16328: LD_EXP 6
16332: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
16333: LD_INT 22
16335: PUSH
16336: LD_INT 8
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: PUSH
16343: LD_INT 23
16345: PUSH
16346: LD_INT 2
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PUSH
16353: LD_INT 30
16355: PUSH
16356: LD_INT 3
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: LIST
16367: PPUSH
16368: CALL_OW 69
16372: NOT
16373: IFFALSE 16377
// exit ;
16375: GO 17230
// if Prob ( 40 ) then
16377: LD_INT 40
16379: PPUSH
16380: CALL_OW 13
16384: IFFALSE 16513
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16386: LD_VAR 0 2
16390: PPUSH
16391: LD_INT 13
16393: PUSH
16394: LD_INT 1
16396: PUSH
16397: LD_INT 2
16399: PUSH
16400: LD_INT 28
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: PUSH
16409: LD_INT 13
16411: PUSH
16412: LD_INT 1
16414: PUSH
16415: LD_INT 2
16417: PUSH
16418: LD_INT 28
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: PUSH
16427: LD_INT 13
16429: PUSH
16430: LD_INT 1
16432: PUSH
16433: LD_INT 2
16435: PUSH
16436: LD_INT 28
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 13
16447: PUSH
16448: LD_INT 1
16450: PUSH
16451: LD_INT 2
16453: PUSH
16454: LD_INT 28
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: PUSH
16463: LD_INT 13
16465: PUSH
16466: LD_INT 1
16468: PUSH
16469: LD_INT 2
16471: PUSH
16472: LD_INT 28
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: PUSH
16481: LD_INT 13
16483: PUSH
16484: LD_INT 1
16486: PUSH
16487: LD_INT 2
16489: PUSH
16490: LD_INT 26
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: PPUSH
16507: CALL 81937 0 2
// end else
16511: GO 16730
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16513: LD_VAR 0 2
16517: PPUSH
16518: LD_INT 13
16520: PUSH
16521: LD_INT 1
16523: PUSH
16524: LD_INT 2
16526: PUSH
16527: LD_INT 27
16529: PUSH
16530: LD_INT 26
16532: PUSH
16533: LD_INT 26
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: LIST
16540: PUSH
16541: LD_INT 1
16543: PPUSH
16544: LD_INT 3
16546: PPUSH
16547: CALL_OW 12
16551: ARRAY
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: PUSH
16559: LD_INT 13
16561: PUSH
16562: LD_INT 1
16564: PUSH
16565: LD_INT 2
16567: PUSH
16568: LD_INT 27
16570: PUSH
16571: LD_INT 26
16573: PUSH
16574: LD_INT 26
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: LIST
16581: PUSH
16582: LD_INT 1
16584: PPUSH
16585: LD_INT 3
16587: PPUSH
16588: CALL_OW 12
16592: ARRAY
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: PUSH
16600: LD_INT 13
16602: PUSH
16603: LD_INT 1
16605: PUSH
16606: LD_INT 2
16608: PUSH
16609: LD_INT 26
16611: PUSH
16612: LD_INT 26
16614: PUSH
16615: LD_INT 29
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: LIST
16622: PUSH
16623: LD_INT 1
16625: PPUSH
16626: LD_INT 3
16628: PPUSH
16629: CALL_OW 12
16633: ARRAY
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 13
16643: PUSH
16644: LD_INT 1
16646: PUSH
16647: LD_INT 2
16649: PUSH
16650: LD_INT 26
16652: PUSH
16653: LD_INT 29
16655: PUSH
16656: LD_INT 29
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: LIST
16663: PUSH
16664: LD_INT 1
16666: PPUSH
16667: LD_INT 3
16669: PPUSH
16670: CALL_OW 12
16674: ARRAY
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: PUSH
16682: LD_INT 13
16684: PUSH
16685: LD_INT 1
16687: PUSH
16688: LD_INT 2
16690: PUSH
16691: LD_INT 29
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: PUSH
16700: LD_INT 13
16702: PUSH
16703: LD_INT 1
16705: PUSH
16706: LD_INT 2
16708: PUSH
16709: LD_INT 26
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: PPUSH
16726: CALL 81937 0 2
// end ; repeat wait ( 0 0$1 ) ;
16730: LD_INT 35
16732: PPUSH
16733: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 6 or tick mod 10 10$00 = 0 ;
16737: LD_VAR 0 2
16741: PPUSH
16742: LD_INT 1
16744: PPUSH
16745: CALL 83355 0 2
16749: PUSH
16750: LD_INT 6
16752: GREATEREQUAL
16753: PUSH
16754: LD_OWVAR 1
16758: PUSH
16759: LD_INT 21000
16761: MOD
16762: PUSH
16763: LD_INT 0
16765: EQUAL
16766: OR
16767: IFFALSE 16730
// wait ( 0 0$30 ) ;
16769: LD_INT 1050
16771: PPUSH
16772: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
16776: LD_ADDR_VAR 0 3
16780: PUSH
16781: LD_VAR 0 2
16785: PPUSH
16786: LD_INT 1
16788: PPUSH
16789: CALL 83355 0 2
16793: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
16794: LD_ADDR_EXP 69
16798: PUSH
16799: LD_EXP 69
16803: PPUSH
16804: LD_VAR 0 2
16808: PPUSH
16809: LD_EXP 69
16813: PUSH
16814: LD_VAR 0 2
16818: ARRAY
16819: PUSH
16820: LD_VAR 0 3
16824: DIFF
16825: PPUSH
16826: CALL_OW 1
16830: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
16831: LD_ADDR_VAR 0 4
16835: PUSH
16836: LD_INT 0
16838: PPUSH
16839: LD_INT 2
16841: PPUSH
16842: CALL_OW 12
16846: ST_TO_ADDR
// if legChangeSide then
16847: LD_EXP 21
16851: IFFALSE 16861
// target := 2 ;
16853: LD_ADDR_VAR 0 4
16857: PUSH
16858: LD_INT 2
16860: ST_TO_ADDR
// if target = 2 then
16861: LD_VAR 0 4
16865: PUSH
16866: LD_INT 2
16868: EQUAL
16869: IFFALSE 16997
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16871: LD_ADDR_VAR 0 3
16875: PUSH
16876: LD_VAR 0 3
16880: PPUSH
16881: LD_INT 24
16883: PUSH
16884: LD_INT 250
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PPUSH
16891: CALL_OW 72
16895: ST_TO_ADDR
// for i in tmp do
16896: LD_ADDR_VAR 0 1
16900: PUSH
16901: LD_VAR 0 3
16905: PUSH
16906: FOR_IN
16907: IFFALSE 16947
// if GetDistUnitXY ( i , 112 , 64 ) > 9 then
16909: LD_VAR 0 1
16913: PPUSH
16914: LD_INT 112
16916: PPUSH
16917: LD_INT 64
16919: PPUSH
16920: CALL_OW 297
16924: PUSH
16925: LD_INT 9
16927: GREATER
16928: IFFALSE 16945
// ComMoveXY ( i , 112 , 64 ) ;
16930: LD_VAR 0 1
16934: PPUSH
16935: LD_INT 112
16937: PPUSH
16938: LD_INT 64
16940: PPUSH
16941: CALL_OW 111
16945: GO 16906
16947: POP
16948: POP
// wait ( 0 0$1 ) ;
16949: LD_INT 35
16951: PPUSH
16952: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 112 , 64 , 9 ] ) >= ( tmp - 1 ) ;
16956: LD_VAR 0 3
16960: PPUSH
16961: LD_INT 92
16963: PUSH
16964: LD_INT 112
16966: PUSH
16967: LD_INT 64
16969: PUSH
16970: LD_INT 9
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: PPUSH
16979: CALL_OW 72
16983: PUSH
16984: LD_VAR 0 3
16988: PUSH
16989: LD_INT 1
16991: MINUS
16992: GREATEREQUAL
16993: IFFALSE 16871
// end else
16995: GO 17121
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16997: LD_ADDR_VAR 0 3
17001: PUSH
17002: LD_VAR 0 3
17006: PPUSH
17007: LD_INT 24
17009: PUSH
17010: LD_INT 250
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PPUSH
17017: CALL_OW 72
17021: ST_TO_ADDR
// for i in tmp do
17022: LD_ADDR_VAR 0 1
17026: PUSH
17027: LD_VAR 0 3
17031: PUSH
17032: FOR_IN
17033: IFFALSE 17073
// if GetDistUnitXY ( i , 174 , 94 ) > 9 then
17035: LD_VAR 0 1
17039: PPUSH
17040: LD_INT 174
17042: PPUSH
17043: LD_INT 94
17045: PPUSH
17046: CALL_OW 297
17050: PUSH
17051: LD_INT 9
17053: GREATER
17054: IFFALSE 17071
// ComMoveXY ( i , 174 , 94 ) ;
17056: LD_VAR 0 1
17060: PPUSH
17061: LD_INT 174
17063: PPUSH
17064: LD_INT 94
17066: PPUSH
17067: CALL_OW 111
17071: GO 17032
17073: POP
17074: POP
// wait ( 0 0$1 ) ;
17075: LD_INT 35
17077: PPUSH
17078: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 174 , 94 , 9 ] ) >= ( tmp - 1 ) ;
17082: LD_VAR 0 3
17086: PPUSH
17087: LD_INT 92
17089: PUSH
17090: LD_INT 174
17092: PUSH
17093: LD_INT 94
17095: PUSH
17096: LD_INT 9
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: PPUSH
17105: CALL_OW 72
17109: PUSH
17110: LD_VAR 0 3
17114: PUSH
17115: LD_INT 1
17117: MINUS
17118: GREATEREQUAL
17119: IFFALSE 16997
// end ; repeat wait ( 0 0$1 ) ;
17121: LD_INT 35
17123: PPUSH
17124: CALL_OW 67
// for i in tmp do
17128: LD_ADDR_VAR 0 1
17132: PUSH
17133: LD_VAR 0 3
17137: PUSH
17138: FOR_IN
17139: IFFALSE 17221
// begin if GetLives ( i ) > 251 then
17141: LD_VAR 0 1
17145: PPUSH
17146: CALL_OW 256
17150: PUSH
17151: LD_INT 251
17153: GREATER
17154: IFFALSE 17192
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
17156: LD_VAR 0 1
17160: PPUSH
17161: LD_INT 81
17163: PUSH
17164: LD_INT 8
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PPUSH
17171: CALL_OW 69
17175: PPUSH
17176: LD_VAR 0 1
17180: PPUSH
17181: CALL_OW 74
17185: PPUSH
17186: CALL_OW 115
17190: GO 17219
// if IsDead ( i ) then
17192: LD_VAR 0 1
17196: PPUSH
17197: CALL_OW 301
17201: IFFALSE 17219
// tmp := tmp diff i ;
17203: LD_ADDR_VAR 0 3
17207: PUSH
17208: LD_VAR 0 3
17212: PUSH
17213: LD_VAR 0 1
17217: DIFF
17218: ST_TO_ADDR
// end ;
17219: GO 17138
17221: POP
17222: POP
// until not tmp ;
17223: LD_VAR 0 3
17227: NOT
17228: IFFALSE 17121
// end ;
17230: PPOPN 4
17232: END
// every 7 7$30 trigger game do var i , base , tmp , target , teleport ;
17233: LD_EXP 3
17237: IFFALSE 18225
17239: GO 17241
17241: DISABLE
17242: LD_INT 0
17244: PPUSH
17245: PPUSH
17246: PPUSH
17247: PPUSH
17248: PPUSH
// begin enable ;
17249: ENABLE
// if not UnitFilter ( mc_bases [ mc_rus_2 ] , [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
17250: LD_EXP 50
17254: PUSH
17255: LD_EXP 8
17259: ARRAY
17260: PPUSH
17261: LD_INT 22
17263: PUSH
17264: LD_INT 3
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PUSH
17271: LD_INT 30
17273: PUSH
17274: LD_INT 3
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PPUSH
17285: CALL_OW 72
17289: NOT
17290: IFFALSE 17294
// exit ;
17292: GO 18225
// base := mc_rus_2 ;
17294: LD_ADDR_VAR 0 2
17298: PUSH
17299: LD_EXP 8
17303: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
17304: LD_ADDR_VAR 0 5
17308: PUSH
17309: LD_INT 22
17311: PUSH
17312: LD_INT 3
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: LD_INT 30
17321: PUSH
17322: LD_INT 34
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: PPUSH
17333: CALL_OW 69
17337: ST_TO_ADDR
// if Prob ( 40 ) then
17338: LD_INT 40
17340: PPUSH
17341: CALL_OW 13
17345: IFFALSE 17474
// begin MC_InsertProduceList ( base , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17347: LD_VAR 0 2
17351: PPUSH
17352: LD_INT 22
17354: PUSH
17355: LD_INT 3
17357: PUSH
17358: LD_INT 3
17360: PUSH
17361: LD_INT 49
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: PUSH
17370: LD_INT 22
17372: PUSH
17373: LD_INT 3
17375: PUSH
17376: LD_INT 3
17378: PUSH
17379: LD_INT 49
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: PUSH
17388: LD_INT 22
17390: PUSH
17391: LD_INT 3
17393: PUSH
17394: LD_INT 3
17396: PUSH
17397: LD_INT 49
17399: PUSH
17400: EMPTY
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: PUSH
17406: LD_INT 24
17408: PUSH
17409: LD_INT 3
17411: PUSH
17412: LD_INT 3
17414: PUSH
17415: LD_INT 46
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: PUSH
17424: LD_INT 24
17426: PUSH
17427: LD_INT 3
17429: PUSH
17430: LD_INT 3
17432: PUSH
17433: LD_INT 46
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: PUSH
17442: LD_INT 24
17444: PUSH
17445: LD_INT 3
17447: PUSH
17448: LD_INT 3
17450: PUSH
17451: LD_INT 46
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: PPUSH
17468: CALL 81937 0 2
// end else
17472: GO 17599
// begin MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17474: LD_VAR 0 2
17478: PPUSH
17479: LD_INT 24
17481: PUSH
17482: LD_INT 3
17484: PUSH
17485: LD_INT 3
17487: PUSH
17488: LD_INT 47
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 24
17499: PUSH
17500: LD_INT 3
17502: PUSH
17503: LD_INT 3
17505: PUSH
17506: LD_INT 47
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: PUSH
17515: LD_INT 24
17517: PUSH
17518: LD_INT 3
17520: PUSH
17521: LD_INT 3
17523: PUSH
17524: LD_INT 47
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: PUSH
17533: LD_INT 24
17535: PUSH
17536: LD_INT 3
17538: PUSH
17539: LD_INT 3
17541: PUSH
17542: LD_INT 46
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: PUSH
17551: LD_INT 24
17553: PUSH
17554: LD_INT 3
17556: PUSH
17557: LD_INT 3
17559: PUSH
17560: LD_INT 46
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: PUSH
17569: LD_INT 24
17571: PUSH
17572: LD_INT 3
17574: PUSH
17575: LD_INT 3
17577: PUSH
17578: LD_INT 46
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: PPUSH
17595: CALL 81937 0 2
// end ; if Difficulty > 1 then
17599: LD_OWVAR 67
17603: PUSH
17604: LD_INT 1
17606: GREATER
17607: IFFALSE 17639
// MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
17609: LD_VAR 0 2
17613: PPUSH
17614: LD_INT 24
17616: PUSH
17617: LD_INT 3
17619: PUSH
17620: LD_INT 3
17622: PUSH
17623: LD_INT 47
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: PUSH
17632: EMPTY
17633: LIST
17634: PPUSH
17635: CALL 81937 0 2
// repeat wait ( 0 0$1 ) ;
17639: LD_INT 35
17641: PPUSH
17642: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] or tick mod 10 10$00 = 0 ;
17646: LD_VAR 0 2
17650: PPUSH
17651: LD_INT 1
17653: PPUSH
17654: CALL 83355 0 2
17658: PUSH
17659: LD_INT 6
17661: PUSH
17662: LD_INT 7
17664: PUSH
17665: LD_INT 7
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: LIST
17672: PUSH
17673: LD_OWVAR 67
17677: ARRAY
17678: GREATEREQUAL
17679: PUSH
17680: LD_OWVAR 1
17684: PUSH
17685: LD_INT 21000
17687: MOD
17688: PUSH
17689: LD_INT 0
17691: EQUAL
17692: OR
17693: IFFALSE 17639
// wait ( 0 0$45 ) ;
17695: LD_INT 1575
17697: PPUSH
17698: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
17702: LD_ADDR_VAR 0 3
17706: PUSH
17707: LD_VAR 0 2
17711: PPUSH
17712: LD_INT 1
17714: PPUSH
17715: CALL 83355 0 2
17719: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
17720: LD_ADDR_EXP 69
17724: PUSH
17725: LD_EXP 69
17729: PPUSH
17730: LD_VAR 0 2
17734: PPUSH
17735: LD_EXP 69
17739: PUSH
17740: LD_VAR 0 2
17744: ARRAY
17745: PUSH
17746: LD_VAR 0 3
17750: DIFF
17751: PPUSH
17752: CALL_OW 1
17756: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
17757: LD_ADDR_VAR 0 4
17761: PUSH
17762: LD_INT 0
17764: PPUSH
17765: LD_INT 1
17767: PPUSH
17768: CALL_OW 12
17772: ST_TO_ADDR
// if target then
17773: LD_VAR 0 4
17777: IFFALSE 17905
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17779: LD_ADDR_VAR 0 3
17783: PUSH
17784: LD_VAR 0 3
17788: PPUSH
17789: LD_INT 24
17791: PUSH
17792: LD_INT 250
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PPUSH
17799: CALL_OW 72
17803: ST_TO_ADDR
// for i in tmp do
17804: LD_ADDR_VAR 0 1
17808: PUSH
17809: LD_VAR 0 3
17813: PUSH
17814: FOR_IN
17815: IFFALSE 17855
// if GetDistUnitXY ( i , 84 , 32 ) > 9 then
17817: LD_VAR 0 1
17821: PPUSH
17822: LD_INT 84
17824: PPUSH
17825: LD_INT 32
17827: PPUSH
17828: CALL_OW 297
17832: PUSH
17833: LD_INT 9
17835: GREATER
17836: IFFALSE 17853
// ComMoveXY ( i , 84 , 32 ) ;
17838: LD_VAR 0 1
17842: PPUSH
17843: LD_INT 84
17845: PPUSH
17846: LD_INT 32
17848: PPUSH
17849: CALL_OW 111
17853: GO 17814
17855: POP
17856: POP
// wait ( 0 0$1 ) ;
17857: LD_INT 35
17859: PPUSH
17860: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 84 , 32 , 9 ] ) >= ( tmp - 1 ) ;
17864: LD_VAR 0 3
17868: PPUSH
17869: LD_INT 92
17871: PUSH
17872: LD_INT 84
17874: PUSH
17875: LD_INT 32
17877: PUSH
17878: LD_INT 9
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: PPUSH
17887: CALL_OW 72
17891: PUSH
17892: LD_VAR 0 3
17896: PUSH
17897: LD_INT 1
17899: MINUS
17900: GREATEREQUAL
17901: IFFALSE 17779
// end else
17903: GO 18065
// begin if teleport then
17905: LD_VAR 0 5
17909: IFFALSE 17929
// ComEnterUnit ( tmp , teleport [ 1 ] ) ;
17911: LD_VAR 0 3
17915: PPUSH
17916: LD_VAR 0 5
17920: PUSH
17921: LD_INT 1
17923: ARRAY
17924: PPUSH
17925: CALL_OW 120
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17929: LD_ADDR_VAR 0 3
17933: PUSH
17934: LD_VAR 0 3
17938: PPUSH
17939: LD_INT 24
17941: PUSH
17942: LD_INT 250
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PPUSH
17949: CALL_OW 72
17953: ST_TO_ADDR
// for i in tmp do
17954: LD_ADDR_VAR 0 1
17958: PUSH
17959: LD_VAR 0 3
17963: PUSH
17964: FOR_IN
17965: IFFALSE 18017
// if GetDistUnitXY ( i , 140 , 219 ) > 9 and not HasTask ( i ) then
17967: LD_VAR 0 1
17971: PPUSH
17972: LD_INT 140
17974: PPUSH
17975: LD_INT 219
17977: PPUSH
17978: CALL_OW 297
17982: PUSH
17983: LD_INT 9
17985: GREATER
17986: PUSH
17987: LD_VAR 0 1
17991: PPUSH
17992: CALL_OW 314
17996: NOT
17997: AND
17998: IFFALSE 18015
// AddComMoveXY ( i , 140 , 219 ) ;
18000: LD_VAR 0 1
18004: PPUSH
18005: LD_INT 140
18007: PPUSH
18008: LD_INT 219
18010: PPUSH
18011: CALL_OW 171
18015: GO 17964
18017: POP
18018: POP
// wait ( 0 0$1 ) ;
18019: LD_INT 35
18021: PPUSH
18022: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 140 , 219 , 9 ] ) >= ( tmp - 1 ) ;
18026: LD_VAR 0 3
18030: PPUSH
18031: LD_INT 92
18033: PUSH
18034: LD_INT 140
18036: PUSH
18037: LD_INT 219
18039: PUSH
18040: LD_INT 9
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: PPUSH
18049: CALL_OW 72
18053: PUSH
18054: LD_VAR 0 3
18058: PUSH
18059: LD_INT 1
18061: MINUS
18062: GREATEREQUAL
18063: IFFALSE 17929
// end ; repeat wait ( 0 0$1 ) ;
18065: LD_INT 35
18067: PPUSH
18068: CALL_OW 67
// for i in tmp do
18072: LD_ADDR_VAR 0 1
18076: PUSH
18077: LD_VAR 0 3
18081: PUSH
18082: FOR_IN
18083: IFFALSE 18216
// begin if GetLives ( i ) > 251 then
18085: LD_VAR 0 1
18089: PPUSH
18090: CALL_OW 256
18094: PUSH
18095: LD_INT 251
18097: GREATER
18098: IFFALSE 18187
// begin if GetWeapon ( i ) = ru_time_lapser then
18100: LD_VAR 0 1
18104: PPUSH
18105: CALL_OW 264
18109: PUSH
18110: LD_INT 49
18112: EQUAL
18113: IFFALSE 18151
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) else
18115: LD_VAR 0 1
18119: PPUSH
18120: LD_INT 81
18122: PUSH
18123: LD_INT 3
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PPUSH
18130: CALL_OW 69
18134: PPUSH
18135: LD_VAR 0 1
18139: PPUSH
18140: CALL_OW 74
18144: PPUSH
18145: CALL_OW 112
18149: GO 18185
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18151: LD_VAR 0 1
18155: PPUSH
18156: LD_INT 81
18158: PUSH
18159: LD_INT 3
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PPUSH
18166: CALL_OW 69
18170: PPUSH
18171: LD_VAR 0 1
18175: PPUSH
18176: CALL_OW 74
18180: PPUSH
18181: CALL_OW 115
// end else
18185: GO 18214
// if IsDead ( i ) then
18187: LD_VAR 0 1
18191: PPUSH
18192: CALL_OW 301
18196: IFFALSE 18214
// tmp := tmp diff i ;
18198: LD_ADDR_VAR 0 3
18202: PUSH
18203: LD_VAR 0 3
18207: PUSH
18208: LD_VAR 0 1
18212: DIFF
18213: ST_TO_ADDR
// end ;
18214: GO 18082
18216: POP
18217: POP
// until not tmp ;
18218: LD_VAR 0 3
18222: NOT
18223: IFFALSE 18065
// end ;
18225: PPOPN 5
18227: END
// every 12 12$30 + 11 11$30 trigger game do var i , base , tmp , target ;
18228: LD_EXP 3
18232: IFFALSE 18614
18234: GO 18236
18236: DISABLE
18237: LD_INT 0
18239: PPUSH
18240: PPUSH
18241: PPUSH
18242: PPUSH
// begin enable ;
18243: ENABLE
// base := mc_amer ;
18244: LD_ADDR_VAR 0 2
18248: PUSH
18249: LD_EXP 5
18253: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_btype , b_factory ] ] ) then
18254: LD_INT 22
18256: PUSH
18257: LD_INT 4
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: LD_INT 23
18266: PUSH
18267: LD_INT 1
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 30
18276: PUSH
18277: LD_INT 3
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: LIST
18288: PPUSH
18289: CALL_OW 69
18293: NOT
18294: IFFALSE 18298
// exit ;
18296: GO 18614
// MC_InsertProduceList ( base , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_laser ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] ] ) ;
18298: LD_VAR 0 2
18302: PPUSH
18303: LD_INT 3
18305: PUSH
18306: LD_INT 1
18308: PUSH
18309: LD_INT 2
18311: PUSH
18312: LD_INT 5
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: PUSH
18321: LD_INT 3
18323: PUSH
18324: LD_INT 1
18326: PUSH
18327: LD_INT 2
18329: PUSH
18330: LD_INT 9
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: PUSH
18339: LD_INT 3
18341: PUSH
18342: LD_INT 1
18344: PUSH
18345: LD_INT 2
18347: PUSH
18348: LD_INT 7
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 3
18359: PUSH
18360: LD_INT 1
18362: PUSH
18363: LD_INT 2
18365: PUSH
18366: LD_INT 7
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: PUSH
18375: LD_INT 3
18377: PUSH
18378: LD_INT 1
18380: PUSH
18381: LD_INT 2
18383: PUSH
18384: LD_INT 7
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: PPUSH
18400: CALL 81937 0 2
// repeat wait ( 0 0$1 ) ;
18404: LD_INT 35
18406: PPUSH
18407: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 5 or tick mod 10 10$00 = 0 ;
18411: LD_VAR 0 2
18415: PPUSH
18416: LD_INT 1
18418: PPUSH
18419: CALL 83355 0 2
18423: PUSH
18424: LD_INT 5
18426: GREATEREQUAL
18427: PUSH
18428: LD_OWVAR 1
18432: PUSH
18433: LD_INT 21000
18435: MOD
18436: PUSH
18437: LD_INT 0
18439: EQUAL
18440: OR
18441: IFFALSE 18404
// wait ( 0 0$30 ) ;
18443: LD_INT 1050
18445: PPUSH
18446: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
18450: LD_ADDR_VAR 0 3
18454: PUSH
18455: LD_VAR 0 2
18459: PPUSH
18460: LD_INT 1
18462: PPUSH
18463: CALL 83355 0 2
18467: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
18468: LD_ADDR_EXP 69
18472: PUSH
18473: LD_EXP 69
18477: PPUSH
18478: LD_VAR 0 2
18482: PPUSH
18483: LD_EXP 69
18487: PUSH
18488: LD_VAR 0 2
18492: ARRAY
18493: PUSH
18494: LD_VAR 0 3
18498: DIFF
18499: PPUSH
18500: CALL_OW 1
18504: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18505: LD_INT 35
18507: PPUSH
18508: CALL_OW 67
// for i in tmp do
18512: LD_ADDR_VAR 0 1
18516: PUSH
18517: LD_VAR 0 3
18521: PUSH
18522: FOR_IN
18523: IFFALSE 18605
// begin if GetLives ( i ) > 251 then
18525: LD_VAR 0 1
18529: PPUSH
18530: CALL_OW 256
18534: PUSH
18535: LD_INT 251
18537: GREATER
18538: IFFALSE 18576
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) else
18540: LD_VAR 0 1
18544: PPUSH
18545: LD_INT 81
18547: PUSH
18548: LD_INT 4
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PPUSH
18555: CALL_OW 69
18559: PPUSH
18560: LD_VAR 0 1
18564: PPUSH
18565: CALL_OW 74
18569: PPUSH
18570: CALL_OW 115
18574: GO 18603
// if IsDead ( i ) then
18576: LD_VAR 0 1
18580: PPUSH
18581: CALL_OW 301
18585: IFFALSE 18603
// tmp := tmp diff i ;
18587: LD_ADDR_VAR 0 3
18591: PUSH
18592: LD_VAR 0 3
18596: PUSH
18597: LD_VAR 0 1
18601: DIFF
18602: ST_TO_ADDR
// end ;
18603: GO 18522
18605: POP
18606: POP
// until not tmp ;
18607: LD_VAR 0 3
18611: NOT
18612: IFFALSE 18505
// end ; end_of_file
18614: PPOPN 4
18616: END
// export function CustomEvent ( event ) ; begin
18617: LD_INT 0
18619: PPUSH
// end ;
18620: LD_VAR 0 2
18624: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 then
18625: LD_VAR 0 1
18629: PUSH
18630: LD_INT 1
18632: EQUAL
18633: PUSH
18634: LD_VAR 0 2
18638: PUSH
18639: LD_INT 4
18641: EQUAL
18642: AND
18643: IFFALSE 18671
// begin SayRadio ( Powell , DP-Lost ) ;
18645: LD_EXP 12
18649: PPUSH
18650: LD_STRING DP-Lost
18652: PPUSH
18653: CALL_OW 94
// wait ( 0 0$2 ) ;
18657: LD_INT 70
18659: PPUSH
18660: CALL_OW 67
// YouLost ( FriendlyFire ) ;
18664: LD_STRING FriendlyFire
18666: PPUSH
18667: CALL_OW 104
// end ; end ;
18671: PPOPN 2
18673: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18674: LD_VAR 0 1
18678: PPUSH
18679: CALL 101506 0 1
// if GameType = 1 then
18683: LD_EXP 2
18687: PUSH
18688: LD_INT 1
18690: EQUAL
18691: IFFALSE 18926
// begin if un = playerCommander then
18693: LD_VAR 0 1
18697: PUSH
18698: LD_EXP 9
18702: EQUAL
18703: IFFALSE 18712
// YouLost ( commanderDied ) ;
18705: LD_STRING commanderDied
18707: PPUSH
18708: CALL_OW 104
// if un = allyCommander then
18712: LD_VAR 0 1
18716: PUSH
18717: LD_EXP 11
18721: EQUAL
18722: IFFALSE 18731
// YouLost ( Theta ) ;
18724: LD_STRING Theta
18726: PPUSH
18727: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18731: LD_VAR 0 1
18735: PUSH
18736: LD_INT 22
18738: PUSH
18739: LD_INT 8
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PUSH
18746: LD_INT 2
18748: PUSH
18749: LD_INT 21
18751: PUSH
18752: LD_INT 1
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: LD_INT 21
18761: PUSH
18762: LD_INT 3
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: LIST
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PPUSH
18778: CALL_OW 69
18782: IN
18783: IFFALSE 18799
// legDestCounter := legDestCounter + 1 ;
18785: LD_ADDR_EXP 18
18789: PUSH
18790: LD_EXP 18
18794: PUSH
18795: LD_INT 1
18797: PLUS
18798: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18799: LD_VAR 0 1
18803: PUSH
18804: LD_INT 22
18806: PUSH
18807: LD_INT 4
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: PUSH
18814: LD_INT 2
18816: PUSH
18817: LD_INT 21
18819: PUSH
18820: LD_INT 1
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 21
18829: PUSH
18830: LD_INT 3
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: LIST
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PPUSH
18846: CALL_OW 69
18850: IN
18851: IFFALSE 18867
// allyDestCounter := allyDestCounter + 1 ;
18853: LD_ADDR_EXP 22
18857: PUSH
18858: LD_EXP 22
18862: PUSH
18863: LD_INT 1
18865: PLUS
18866: ST_TO_ADDR
// if un in ruOutpost then
18867: LD_VAR 0 1
18871: PUSH
18872: LD_EXP 14
18876: IN
18877: IFFALSE 18926
// begin ruOutpost := ruOutpost diff un ;
18879: LD_ADDR_EXP 14
18883: PUSH
18884: LD_EXP 14
18888: PUSH
18889: LD_VAR 0 1
18893: DIFF
18894: ST_TO_ADDR
// ruEscape := Replace ( ruEscape , 1 , ruEscape [ 1 ] + 1 ) ;
18895: LD_ADDR_EXP 15
18899: PUSH
18900: LD_EXP 15
18904: PPUSH
18905: LD_INT 1
18907: PPUSH
18908: LD_EXP 15
18912: PUSH
18913: LD_INT 1
18915: ARRAY
18916: PUSH
18917: LD_INT 1
18919: PLUS
18920: PPUSH
18921: CALL_OW 1
18925: ST_TO_ADDR
// end ; end ; MCE_UnitDestroyed ( un ) ;
18926: LD_VAR 0 1
18930: PPUSH
18931: CALL 85348 0 1
// end ;
18935: PPOPN 1
18937: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
18938: LD_VAR 0 1
18942: PPUSH
18943: LD_VAR 0 2
18947: PPUSH
18948: CALL 87682 0 2
// end ;
18952: PPOPN 2
18954: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
18955: LD_VAR 0 1
18959: PPUSH
18960: CALL 86750 0 1
// end ;
18964: PPOPN 1
18966: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
18967: LD_VAR 0 1
18971: PPUSH
18972: CALL 86991 0 1
// end ;
18976: PPOPN 1
18978: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_LasDouble and GetSide ( lab ) = 1 then
18979: LD_VAR 0 1
18983: PUSH
18984: LD_INT 14
18986: EQUAL
18987: PUSH
18988: LD_VAR 0 2
18992: PPUSH
18993: CALL_OW 255
18997: PUSH
18998: LD_INT 1
19000: EQUAL
19001: AND
19002: IFFALSE 19043
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Laser ) ;
19004: LD_EXP 9
19008: PPUSH
19009: LD_STRING D
19011: PUSH
19012: LD_STRING I
19014: PUSH
19015: LD_STRING J
19017: PUSH
19018: LD_STRING S
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: LIST
19025: PUSH
19026: LD_EXP 25
19030: ARRAY
19031: STR
19032: PUSH
19033: LD_STRING -1-Laser
19035: STR
19036: PPUSH
19037: CALL_OW 88
// exit ;
19041: GO 19185
// end ; if tech = tech_MatDet and GetSide ( lab ) = 1 then
19043: LD_VAR 0 1
19047: PUSH
19048: LD_INT 7
19050: EQUAL
19051: PUSH
19052: LD_VAR 0 2
19056: PPUSH
19057: CALL_OW 255
19061: PUSH
19062: LD_INT 1
19064: EQUAL
19065: AND
19066: IFFALSE 19107
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Materialization ) ;
19068: LD_EXP 9
19072: PPUSH
19073: LD_STRING D
19075: PUSH
19076: LD_STRING I
19078: PUSH
19079: LD_STRING J
19081: PUSH
19082: LD_STRING S
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: LIST
19089: PUSH
19090: LD_EXP 25
19094: ARRAY
19095: STR
19096: PUSH
19097: LD_STRING -1-Materialization
19099: STR
19100: PPUSH
19101: CALL_OW 88
// exit ;
19105: GO 19185
// end ; if tech = tech_SibFiss and GetSide ( lab ) = 1 then
19107: LD_VAR 0 1
19111: PUSH
19112: LD_INT 25
19114: EQUAL
19115: PUSH
19116: LD_VAR 0 2
19120: PPUSH
19121: CALL_OW 255
19125: PUSH
19126: LD_INT 1
19128: EQUAL
19129: AND
19130: IFFALSE 19171
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Rocket ) ;
19132: LD_EXP 9
19136: PPUSH
19137: LD_STRING D
19139: PUSH
19140: LD_STRING I
19142: PUSH
19143: LD_STRING J
19145: PUSH
19146: LD_STRING S
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: LIST
19153: PUSH
19154: LD_EXP 25
19158: ARRAY
19159: STR
19160: PUSH
19161: LD_STRING -1-Rocket
19163: STR
19164: PPUSH
19165: CALL_OW 88
// exit ;
19169: GO 19185
// end ; MCE_ResearchComplete ( tech , lab ) ;
19171: LD_VAR 0 1
19175: PPUSH
19176: LD_VAR 0 2
19180: PPUSH
19181: CALL 85044 0 2
// end ;
19185: PPOPN 2
19187: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
19188: LD_VAR 0 1
19192: PPUSH
19193: LD_VAR 0 2
19197: PPUSH
19198: LD_VAR 0 3
19202: PPUSH
19203: LD_VAR 0 4
19207: PPUSH
19208: LD_VAR 0 5
19212: PPUSH
19213: CALL 84664 0 5
// end ;
19217: PPOPN 5
19219: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
19220: LD_VAR 0 1
19224: PPUSH
19225: LD_VAR 0 2
19229: PPUSH
19230: CALL 84254 0 2
// end ;
19234: PPOPN 2
19236: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
19237: LD_VAR 0 1
19241: PPUSH
19242: LD_VAR 0 2
19246: PPUSH
19247: LD_VAR 0 3
19251: PPUSH
19252: LD_VAR 0 4
19256: PPUSH
19257: CALL 84092 0 4
// end ;
19261: PPOPN 4
19263: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
19264: LD_VAR 0 1
19268: PPUSH
19269: LD_VAR 0 2
19273: PPUSH
19274: LD_VAR 0 3
19278: PPUSH
19279: CALL 83867 0 3
// end ;
19283: PPOPN 3
19285: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
19286: LD_VAR 0 1
19290: PPUSH
19291: LD_VAR 0 2
19295: PPUSH
19296: CALL 83752 0 2
// end ;
19300: PPOPN 2
19302: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
19303: LD_VAR 0 1
19307: PPUSH
19308: LD_VAR 0 2
19312: PPUSH
19313: CALL 87977 0 2
// end ;
19317: PPOPN 2
19319: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
19320: LD_VAR 0 1
19324: PPUSH
19325: LD_VAR 0 2
19329: PPUSH
19330: LD_VAR 0 3
19334: PPUSH
19335: LD_VAR 0 4
19339: PPUSH
19340: CALL 88193 0 4
// end ;
19344: PPOPN 4
19346: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
19347: LD_VAR 0 1
19351: PPUSH
19352: LD_VAR 0 2
19356: PPUSH
19357: CALL 83561 0 2
// end ;
19361: PPOPN 2
19363: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
19364: LD_VAR 0 1
19368: PPUSH
19369: CALL 101612 0 1
// end ; end_of_file
19373: PPOPN 1
19375: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19376: LD_INT 0
19378: PPUSH
19379: PPUSH
// if exist_mode then
19380: LD_VAR 0 2
19384: IFFALSE 19409
// unit := CreateCharacter ( prefix & ident ) else
19386: LD_ADDR_VAR 0 5
19390: PUSH
19391: LD_VAR 0 3
19395: PUSH
19396: LD_VAR 0 1
19400: STR
19401: PPUSH
19402: CALL_OW 34
19406: ST_TO_ADDR
19407: GO 19424
// unit := NewCharacter ( ident ) ;
19409: LD_ADDR_VAR 0 5
19413: PUSH
19414: LD_VAR 0 1
19418: PPUSH
19419: CALL_OW 25
19423: ST_TO_ADDR
// result := unit ;
19424: LD_ADDR_VAR 0 4
19428: PUSH
19429: LD_VAR 0 5
19433: ST_TO_ADDR
// end ;
19434: LD_VAR 0 4
19438: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19439: LD_INT 0
19441: PPUSH
19442: PPUSH
// if not side or not nation then
19443: LD_VAR 0 1
19447: NOT
19448: PUSH
19449: LD_VAR 0 2
19453: NOT
19454: OR
19455: IFFALSE 19459
// exit ;
19457: GO 20227
// case nation of nation_american :
19459: LD_VAR 0 2
19463: PUSH
19464: LD_INT 1
19466: DOUBLE
19467: EQUAL
19468: IFTRUE 19472
19470: GO 19686
19472: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19473: LD_ADDR_VAR 0 4
19477: PUSH
19478: LD_INT 35
19480: PUSH
19481: LD_INT 45
19483: PUSH
19484: LD_INT 46
19486: PUSH
19487: LD_INT 47
19489: PUSH
19490: LD_INT 82
19492: PUSH
19493: LD_INT 83
19495: PUSH
19496: LD_INT 84
19498: PUSH
19499: LD_INT 85
19501: PUSH
19502: LD_INT 86
19504: PUSH
19505: LD_INT 1
19507: PUSH
19508: LD_INT 2
19510: PUSH
19511: LD_INT 6
19513: PUSH
19514: LD_INT 15
19516: PUSH
19517: LD_INT 16
19519: PUSH
19520: LD_INT 7
19522: PUSH
19523: LD_INT 12
19525: PUSH
19526: LD_INT 13
19528: PUSH
19529: LD_INT 10
19531: PUSH
19532: LD_INT 14
19534: PUSH
19535: LD_INT 20
19537: PUSH
19538: LD_INT 21
19540: PUSH
19541: LD_INT 22
19543: PUSH
19544: LD_INT 25
19546: PUSH
19547: LD_INT 32
19549: PUSH
19550: LD_INT 27
19552: PUSH
19553: LD_INT 36
19555: PUSH
19556: LD_INT 69
19558: PUSH
19559: LD_INT 39
19561: PUSH
19562: LD_INT 34
19564: PUSH
19565: LD_INT 40
19567: PUSH
19568: LD_INT 48
19570: PUSH
19571: LD_INT 49
19573: PUSH
19574: LD_INT 50
19576: PUSH
19577: LD_INT 51
19579: PUSH
19580: LD_INT 52
19582: PUSH
19583: LD_INT 53
19585: PUSH
19586: LD_INT 54
19588: PUSH
19589: LD_INT 55
19591: PUSH
19592: LD_INT 56
19594: PUSH
19595: LD_INT 57
19597: PUSH
19598: LD_INT 58
19600: PUSH
19601: LD_INT 59
19603: PUSH
19604: LD_INT 60
19606: PUSH
19607: LD_INT 61
19609: PUSH
19610: LD_INT 62
19612: PUSH
19613: LD_INT 80
19615: PUSH
19616: LD_INT 82
19618: PUSH
19619: LD_INT 83
19621: PUSH
19622: LD_INT 84
19624: PUSH
19625: LD_INT 85
19627: PUSH
19628: LD_INT 86
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: ST_TO_ADDR
19684: GO 20151
19686: LD_INT 2
19688: DOUBLE
19689: EQUAL
19690: IFTRUE 19694
19692: GO 19920
19694: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
19695: LD_ADDR_VAR 0 4
19699: PUSH
19700: LD_INT 35
19702: PUSH
19703: LD_INT 45
19705: PUSH
19706: LD_INT 46
19708: PUSH
19709: LD_INT 47
19711: PUSH
19712: LD_INT 82
19714: PUSH
19715: LD_INT 83
19717: PUSH
19718: LD_INT 84
19720: PUSH
19721: LD_INT 85
19723: PUSH
19724: LD_INT 87
19726: PUSH
19727: LD_INT 70
19729: PUSH
19730: LD_INT 1
19732: PUSH
19733: LD_INT 11
19735: PUSH
19736: LD_INT 3
19738: PUSH
19739: LD_INT 4
19741: PUSH
19742: LD_INT 5
19744: PUSH
19745: LD_INT 6
19747: PUSH
19748: LD_INT 15
19750: PUSH
19751: LD_INT 18
19753: PUSH
19754: LD_INT 7
19756: PUSH
19757: LD_INT 17
19759: PUSH
19760: LD_INT 8
19762: PUSH
19763: LD_INT 20
19765: PUSH
19766: LD_INT 21
19768: PUSH
19769: LD_INT 22
19771: PUSH
19772: LD_INT 72
19774: PUSH
19775: LD_INT 26
19777: PUSH
19778: LD_INT 69
19780: PUSH
19781: LD_INT 39
19783: PUSH
19784: LD_INT 40
19786: PUSH
19787: LD_INT 41
19789: PUSH
19790: LD_INT 42
19792: PUSH
19793: LD_INT 43
19795: PUSH
19796: LD_INT 48
19798: PUSH
19799: LD_INT 49
19801: PUSH
19802: LD_INT 50
19804: PUSH
19805: LD_INT 51
19807: PUSH
19808: LD_INT 52
19810: PUSH
19811: LD_INT 53
19813: PUSH
19814: LD_INT 54
19816: PUSH
19817: LD_INT 55
19819: PUSH
19820: LD_INT 56
19822: PUSH
19823: LD_INT 60
19825: PUSH
19826: LD_INT 61
19828: PUSH
19829: LD_INT 62
19831: PUSH
19832: LD_INT 66
19834: PUSH
19835: LD_INT 67
19837: PUSH
19838: LD_INT 68
19840: PUSH
19841: LD_INT 81
19843: PUSH
19844: LD_INT 82
19846: PUSH
19847: LD_INT 83
19849: PUSH
19850: LD_INT 84
19852: PUSH
19853: LD_INT 85
19855: PUSH
19856: LD_INT 87
19858: PUSH
19859: LD_INT 88
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: ST_TO_ADDR
19918: GO 20151
19920: LD_INT 3
19922: DOUBLE
19923: EQUAL
19924: IFTRUE 19928
19926: GO 20150
19928: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
19929: LD_ADDR_VAR 0 4
19933: PUSH
19934: LD_INT 46
19936: PUSH
19937: LD_INT 47
19939: PUSH
19940: LD_INT 1
19942: PUSH
19943: LD_INT 2
19945: PUSH
19946: LD_INT 82
19948: PUSH
19949: LD_INT 83
19951: PUSH
19952: LD_INT 84
19954: PUSH
19955: LD_INT 85
19957: PUSH
19958: LD_INT 86
19960: PUSH
19961: LD_INT 11
19963: PUSH
19964: LD_INT 9
19966: PUSH
19967: LD_INT 20
19969: PUSH
19970: LD_INT 19
19972: PUSH
19973: LD_INT 21
19975: PUSH
19976: LD_INT 24
19978: PUSH
19979: LD_INT 22
19981: PUSH
19982: LD_INT 25
19984: PUSH
19985: LD_INT 28
19987: PUSH
19988: LD_INT 29
19990: PUSH
19991: LD_INT 30
19993: PUSH
19994: LD_INT 31
19996: PUSH
19997: LD_INT 37
19999: PUSH
20000: LD_INT 38
20002: PUSH
20003: LD_INT 32
20005: PUSH
20006: LD_INT 27
20008: PUSH
20009: LD_INT 33
20011: PUSH
20012: LD_INT 69
20014: PUSH
20015: LD_INT 39
20017: PUSH
20018: LD_INT 34
20020: PUSH
20021: LD_INT 40
20023: PUSH
20024: LD_INT 71
20026: PUSH
20027: LD_INT 23
20029: PUSH
20030: LD_INT 44
20032: PUSH
20033: LD_INT 48
20035: PUSH
20036: LD_INT 49
20038: PUSH
20039: LD_INT 50
20041: PUSH
20042: LD_INT 51
20044: PUSH
20045: LD_INT 52
20047: PUSH
20048: LD_INT 53
20050: PUSH
20051: LD_INT 54
20053: PUSH
20054: LD_INT 55
20056: PUSH
20057: LD_INT 56
20059: PUSH
20060: LD_INT 57
20062: PUSH
20063: LD_INT 58
20065: PUSH
20066: LD_INT 59
20068: PUSH
20069: LD_INT 63
20071: PUSH
20072: LD_INT 64
20074: PUSH
20075: LD_INT 65
20077: PUSH
20078: LD_INT 82
20080: PUSH
20081: LD_INT 83
20083: PUSH
20084: LD_INT 84
20086: PUSH
20087: LD_INT 85
20089: PUSH
20090: LD_INT 86
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: ST_TO_ADDR
20148: GO 20151
20150: POP
// if state > - 1 and state < 3 then
20151: LD_VAR 0 3
20155: PUSH
20156: LD_INT 1
20158: NEG
20159: GREATER
20160: PUSH
20161: LD_VAR 0 3
20165: PUSH
20166: LD_INT 3
20168: LESS
20169: AND
20170: IFFALSE 20227
// for i in result do
20172: LD_ADDR_VAR 0 5
20176: PUSH
20177: LD_VAR 0 4
20181: PUSH
20182: FOR_IN
20183: IFFALSE 20225
// if GetTech ( i , side ) <> state then
20185: LD_VAR 0 5
20189: PPUSH
20190: LD_VAR 0 1
20194: PPUSH
20195: CALL_OW 321
20199: PUSH
20200: LD_VAR 0 3
20204: NONEQUAL
20205: IFFALSE 20223
// result := result diff i ;
20207: LD_ADDR_VAR 0 4
20211: PUSH
20212: LD_VAR 0 4
20216: PUSH
20217: LD_VAR 0 5
20221: DIFF
20222: ST_TO_ADDR
20223: GO 20182
20225: POP
20226: POP
// end ;
20227: LD_VAR 0 4
20231: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20232: LD_INT 0
20234: PPUSH
20235: PPUSH
20236: PPUSH
// result := true ;
20237: LD_ADDR_VAR 0 3
20241: PUSH
20242: LD_INT 1
20244: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20245: LD_ADDR_VAR 0 5
20249: PUSH
20250: LD_VAR 0 2
20254: PPUSH
20255: CALL_OW 480
20259: ST_TO_ADDR
// if not tmp then
20260: LD_VAR 0 5
20264: NOT
20265: IFFALSE 20269
// exit ;
20267: GO 20318
// for i in tmp do
20269: LD_ADDR_VAR 0 4
20273: PUSH
20274: LD_VAR 0 5
20278: PUSH
20279: FOR_IN
20280: IFFALSE 20316
// if GetTech ( i , side ) <> state_researched then
20282: LD_VAR 0 4
20286: PPUSH
20287: LD_VAR 0 1
20291: PPUSH
20292: CALL_OW 321
20296: PUSH
20297: LD_INT 2
20299: NONEQUAL
20300: IFFALSE 20314
// begin result := false ;
20302: LD_ADDR_VAR 0 3
20306: PUSH
20307: LD_INT 0
20309: ST_TO_ADDR
// exit ;
20310: POP
20311: POP
20312: GO 20318
// end ;
20314: GO 20279
20316: POP
20317: POP
// end ;
20318: LD_VAR 0 3
20322: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20323: LD_INT 0
20325: PPUSH
20326: PPUSH
20327: PPUSH
20328: PPUSH
20329: PPUSH
20330: PPUSH
20331: PPUSH
20332: PPUSH
20333: PPUSH
20334: PPUSH
20335: PPUSH
20336: PPUSH
20337: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20338: LD_VAR 0 1
20342: NOT
20343: PUSH
20344: LD_VAR 0 1
20348: PPUSH
20349: CALL_OW 257
20353: PUSH
20354: LD_INT 9
20356: NONEQUAL
20357: OR
20358: IFFALSE 20362
// exit ;
20360: GO 20935
// side := GetSide ( unit ) ;
20362: LD_ADDR_VAR 0 9
20366: PUSH
20367: LD_VAR 0 1
20371: PPUSH
20372: CALL_OW 255
20376: ST_TO_ADDR
// tech_space := tech_spacanom ;
20377: LD_ADDR_VAR 0 12
20381: PUSH
20382: LD_INT 29
20384: ST_TO_ADDR
// tech_time := tech_taurad ;
20385: LD_ADDR_VAR 0 13
20389: PUSH
20390: LD_INT 28
20392: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20393: LD_ADDR_VAR 0 11
20397: PUSH
20398: LD_VAR 0 1
20402: PPUSH
20403: CALL_OW 310
20407: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20408: LD_VAR 0 11
20412: PPUSH
20413: CALL_OW 247
20417: PUSH
20418: LD_INT 2
20420: EQUAL
20421: IFFALSE 20425
// exit ;
20423: GO 20935
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20425: LD_ADDR_VAR 0 8
20429: PUSH
20430: LD_INT 81
20432: PUSH
20433: LD_VAR 0 9
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 3
20444: PUSH
20445: LD_INT 21
20447: PUSH
20448: LD_INT 3
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PPUSH
20463: CALL_OW 69
20467: ST_TO_ADDR
// if not tmp then
20468: LD_VAR 0 8
20472: NOT
20473: IFFALSE 20477
// exit ;
20475: GO 20935
// if in_unit then
20477: LD_VAR 0 11
20481: IFFALSE 20505
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20483: LD_ADDR_VAR 0 10
20487: PUSH
20488: LD_VAR 0 8
20492: PPUSH
20493: LD_VAR 0 11
20497: PPUSH
20498: CALL_OW 74
20502: ST_TO_ADDR
20503: GO 20525
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20505: LD_ADDR_VAR 0 10
20509: PUSH
20510: LD_VAR 0 8
20514: PPUSH
20515: LD_VAR 0 1
20519: PPUSH
20520: CALL_OW 74
20524: ST_TO_ADDR
// if not enemy then
20525: LD_VAR 0 10
20529: NOT
20530: IFFALSE 20534
// exit ;
20532: GO 20935
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20534: LD_VAR 0 11
20538: PUSH
20539: LD_VAR 0 11
20543: PPUSH
20544: LD_VAR 0 10
20548: PPUSH
20549: CALL_OW 296
20553: PUSH
20554: LD_INT 13
20556: GREATER
20557: AND
20558: PUSH
20559: LD_VAR 0 1
20563: PPUSH
20564: LD_VAR 0 10
20568: PPUSH
20569: CALL_OW 296
20573: PUSH
20574: LD_INT 12
20576: GREATER
20577: OR
20578: IFFALSE 20582
// exit ;
20580: GO 20935
// missile := [ 1 ] ;
20582: LD_ADDR_VAR 0 14
20586: PUSH
20587: LD_INT 1
20589: PUSH
20590: EMPTY
20591: LIST
20592: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20593: LD_VAR 0 9
20597: PPUSH
20598: LD_VAR 0 12
20602: PPUSH
20603: CALL_OW 325
20607: IFFALSE 20636
// missile := Insert ( missile , missile + 1 , 2 ) ;
20609: LD_ADDR_VAR 0 14
20613: PUSH
20614: LD_VAR 0 14
20618: PPUSH
20619: LD_VAR 0 14
20623: PUSH
20624: LD_INT 1
20626: PLUS
20627: PPUSH
20628: LD_INT 2
20630: PPUSH
20631: CALL_OW 2
20635: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20636: LD_VAR 0 9
20640: PPUSH
20641: LD_VAR 0 13
20645: PPUSH
20646: CALL_OW 325
20650: PUSH
20651: LD_VAR 0 10
20655: PPUSH
20656: CALL_OW 255
20660: PPUSH
20661: LD_VAR 0 13
20665: PPUSH
20666: CALL_OW 325
20670: NOT
20671: AND
20672: IFFALSE 20701
// missile := Insert ( missile , missile + 1 , 3 ) ;
20674: LD_ADDR_VAR 0 14
20678: PUSH
20679: LD_VAR 0 14
20683: PPUSH
20684: LD_VAR 0 14
20688: PUSH
20689: LD_INT 1
20691: PLUS
20692: PPUSH
20693: LD_INT 3
20695: PPUSH
20696: CALL_OW 2
20700: ST_TO_ADDR
// if missile < 2 then
20701: LD_VAR 0 14
20705: PUSH
20706: LD_INT 2
20708: LESS
20709: IFFALSE 20713
// exit ;
20711: GO 20935
// x := GetX ( enemy ) ;
20713: LD_ADDR_VAR 0 4
20717: PUSH
20718: LD_VAR 0 10
20722: PPUSH
20723: CALL_OW 250
20727: ST_TO_ADDR
// y := GetY ( enemy ) ;
20728: LD_ADDR_VAR 0 5
20732: PUSH
20733: LD_VAR 0 10
20737: PPUSH
20738: CALL_OW 251
20742: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20743: LD_ADDR_VAR 0 6
20747: PUSH
20748: LD_VAR 0 4
20752: PUSH
20753: LD_INT 1
20755: NEG
20756: PPUSH
20757: LD_INT 1
20759: PPUSH
20760: CALL_OW 12
20764: PLUS
20765: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20766: LD_ADDR_VAR 0 7
20770: PUSH
20771: LD_VAR 0 5
20775: PUSH
20776: LD_INT 1
20778: NEG
20779: PPUSH
20780: LD_INT 1
20782: PPUSH
20783: CALL_OW 12
20787: PLUS
20788: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20789: LD_VAR 0 6
20793: PPUSH
20794: LD_VAR 0 7
20798: PPUSH
20799: CALL_OW 488
20803: NOT
20804: IFFALSE 20826
// begin _x := x ;
20806: LD_ADDR_VAR 0 6
20810: PUSH
20811: LD_VAR 0 4
20815: ST_TO_ADDR
// _y := y ;
20816: LD_ADDR_VAR 0 7
20820: PUSH
20821: LD_VAR 0 5
20825: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20826: LD_ADDR_VAR 0 3
20830: PUSH
20831: LD_INT 1
20833: PPUSH
20834: LD_VAR 0 14
20838: PPUSH
20839: CALL_OW 12
20843: ST_TO_ADDR
// case i of 1 :
20844: LD_VAR 0 3
20848: PUSH
20849: LD_INT 1
20851: DOUBLE
20852: EQUAL
20853: IFTRUE 20857
20855: GO 20874
20857: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20858: LD_VAR 0 1
20862: PPUSH
20863: LD_VAR 0 10
20867: PPUSH
20868: CALL_OW 115
20872: GO 20935
20874: LD_INT 2
20876: DOUBLE
20877: EQUAL
20878: IFTRUE 20882
20880: GO 20904
20882: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20883: LD_VAR 0 1
20887: PPUSH
20888: LD_VAR 0 6
20892: PPUSH
20893: LD_VAR 0 7
20897: PPUSH
20898: CALL_OW 153
20902: GO 20935
20904: LD_INT 3
20906: DOUBLE
20907: EQUAL
20908: IFTRUE 20912
20910: GO 20934
20912: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20913: LD_VAR 0 1
20917: PPUSH
20918: LD_VAR 0 6
20922: PPUSH
20923: LD_VAR 0 7
20927: PPUSH
20928: CALL_OW 154
20932: GO 20935
20934: POP
// end ;
20935: LD_VAR 0 2
20939: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20940: LD_INT 0
20942: PPUSH
20943: PPUSH
20944: PPUSH
20945: PPUSH
20946: PPUSH
20947: PPUSH
// if not unit or not building then
20948: LD_VAR 0 1
20952: NOT
20953: PUSH
20954: LD_VAR 0 2
20958: NOT
20959: OR
20960: IFFALSE 20964
// exit ;
20962: GO 21122
// x := GetX ( building ) ;
20964: LD_ADDR_VAR 0 5
20968: PUSH
20969: LD_VAR 0 2
20973: PPUSH
20974: CALL_OW 250
20978: ST_TO_ADDR
// y := GetY ( building ) ;
20979: LD_ADDR_VAR 0 6
20983: PUSH
20984: LD_VAR 0 2
20988: PPUSH
20989: CALL_OW 251
20993: ST_TO_ADDR
// for i = 0 to 5 do
20994: LD_ADDR_VAR 0 4
20998: PUSH
20999: DOUBLE
21000: LD_INT 0
21002: DEC
21003: ST_TO_ADDR
21004: LD_INT 5
21006: PUSH
21007: FOR_TO
21008: IFFALSE 21120
// begin _x := ShiftX ( x , i , 3 ) ;
21010: LD_ADDR_VAR 0 7
21014: PUSH
21015: LD_VAR 0 5
21019: PPUSH
21020: LD_VAR 0 4
21024: PPUSH
21025: LD_INT 3
21027: PPUSH
21028: CALL_OW 272
21032: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21033: LD_ADDR_VAR 0 8
21037: PUSH
21038: LD_VAR 0 6
21042: PPUSH
21043: LD_VAR 0 4
21047: PPUSH
21048: LD_INT 3
21050: PPUSH
21051: CALL_OW 273
21055: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21056: LD_VAR 0 7
21060: PPUSH
21061: LD_VAR 0 8
21065: PPUSH
21066: CALL_OW 488
21070: NOT
21071: IFFALSE 21075
// continue ;
21073: GO 21007
// if HexInfo ( _x , _y ) = 0 then
21075: LD_VAR 0 7
21079: PPUSH
21080: LD_VAR 0 8
21084: PPUSH
21085: CALL_OW 428
21089: PUSH
21090: LD_INT 0
21092: EQUAL
21093: IFFALSE 21118
// begin ComMoveXY ( unit , _x , _y ) ;
21095: LD_VAR 0 1
21099: PPUSH
21100: LD_VAR 0 7
21104: PPUSH
21105: LD_VAR 0 8
21109: PPUSH
21110: CALL_OW 111
// exit ;
21114: POP
21115: POP
21116: GO 21122
// end ; end ;
21118: GO 21007
21120: POP
21121: POP
// end ;
21122: LD_VAR 0 3
21126: RET
// export function ScanBase ( side , base_area ) ; begin
21127: LD_INT 0
21129: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21130: LD_ADDR_VAR 0 3
21134: PUSH
21135: LD_VAR 0 2
21139: PPUSH
21140: LD_INT 81
21142: PUSH
21143: LD_VAR 0 1
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: PPUSH
21152: CALL_OW 70
21156: ST_TO_ADDR
// end ;
21157: LD_VAR 0 3
21161: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21162: LD_INT 0
21164: PPUSH
21165: PPUSH
21166: PPUSH
21167: PPUSH
// result := false ;
21168: LD_ADDR_VAR 0 2
21172: PUSH
21173: LD_INT 0
21175: ST_TO_ADDR
// side := GetSide ( unit ) ;
21176: LD_ADDR_VAR 0 3
21180: PUSH
21181: LD_VAR 0 1
21185: PPUSH
21186: CALL_OW 255
21190: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21191: LD_ADDR_VAR 0 4
21195: PUSH
21196: LD_VAR 0 1
21200: PPUSH
21201: CALL_OW 248
21205: ST_TO_ADDR
// case nat of 1 :
21206: LD_VAR 0 4
21210: PUSH
21211: LD_INT 1
21213: DOUBLE
21214: EQUAL
21215: IFTRUE 21219
21217: GO 21230
21219: POP
// tech := tech_lassight ; 2 :
21220: LD_ADDR_VAR 0 5
21224: PUSH
21225: LD_INT 12
21227: ST_TO_ADDR
21228: GO 21269
21230: LD_INT 2
21232: DOUBLE
21233: EQUAL
21234: IFTRUE 21238
21236: GO 21249
21238: POP
// tech := tech_mortar ; 3 :
21239: LD_ADDR_VAR 0 5
21243: PUSH
21244: LD_INT 41
21246: ST_TO_ADDR
21247: GO 21269
21249: LD_INT 3
21251: DOUBLE
21252: EQUAL
21253: IFTRUE 21257
21255: GO 21268
21257: POP
// tech := tech_bazooka ; end ;
21258: LD_ADDR_VAR 0 5
21262: PUSH
21263: LD_INT 44
21265: ST_TO_ADDR
21266: GO 21269
21268: POP
// if Researched ( side , tech ) then
21269: LD_VAR 0 3
21273: PPUSH
21274: LD_VAR 0 5
21278: PPUSH
21279: CALL_OW 325
21283: IFFALSE 21310
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21285: LD_ADDR_VAR 0 2
21289: PUSH
21290: LD_INT 5
21292: PUSH
21293: LD_INT 8
21295: PUSH
21296: LD_INT 9
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: LIST
21303: PUSH
21304: LD_VAR 0 4
21308: ARRAY
21309: ST_TO_ADDR
// end ;
21310: LD_VAR 0 2
21314: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21315: LD_INT 0
21317: PPUSH
21318: PPUSH
21319: PPUSH
// if not mines then
21320: LD_VAR 0 2
21324: NOT
21325: IFFALSE 21329
// exit ;
21327: GO 21473
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21329: LD_ADDR_VAR 0 5
21333: PUSH
21334: LD_INT 81
21336: PUSH
21337: LD_VAR 0 1
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: LD_INT 3
21348: PUSH
21349: LD_INT 21
21351: PUSH
21352: LD_INT 3
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PPUSH
21367: CALL_OW 69
21371: ST_TO_ADDR
// for i in mines do
21372: LD_ADDR_VAR 0 4
21376: PUSH
21377: LD_VAR 0 2
21381: PUSH
21382: FOR_IN
21383: IFFALSE 21471
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21385: LD_VAR 0 4
21389: PUSH
21390: LD_INT 1
21392: ARRAY
21393: PPUSH
21394: LD_VAR 0 4
21398: PUSH
21399: LD_INT 2
21401: ARRAY
21402: PPUSH
21403: CALL_OW 458
21407: NOT
21408: IFFALSE 21412
// continue ;
21410: GO 21382
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21412: LD_VAR 0 4
21416: PUSH
21417: LD_INT 1
21419: ARRAY
21420: PPUSH
21421: LD_VAR 0 4
21425: PUSH
21426: LD_INT 2
21428: ARRAY
21429: PPUSH
21430: CALL_OW 428
21434: PUSH
21435: LD_VAR 0 5
21439: IN
21440: IFFALSE 21469
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21442: LD_VAR 0 4
21446: PUSH
21447: LD_INT 1
21449: ARRAY
21450: PPUSH
21451: LD_VAR 0 4
21455: PUSH
21456: LD_INT 2
21458: ARRAY
21459: PPUSH
21460: LD_VAR 0 1
21464: PPUSH
21465: CALL_OW 456
// end ;
21469: GO 21382
21471: POP
21472: POP
// end ;
21473: LD_VAR 0 3
21477: RET
// export function Count ( array ) ; var i ; begin
21478: LD_INT 0
21480: PPUSH
21481: PPUSH
// result := 0 ;
21482: LD_ADDR_VAR 0 2
21486: PUSH
21487: LD_INT 0
21489: ST_TO_ADDR
// for i in array do
21490: LD_ADDR_VAR 0 3
21494: PUSH
21495: LD_VAR 0 1
21499: PUSH
21500: FOR_IN
21501: IFFALSE 21525
// if i then
21503: LD_VAR 0 3
21507: IFFALSE 21523
// result := result + 1 ;
21509: LD_ADDR_VAR 0 2
21513: PUSH
21514: LD_VAR 0 2
21518: PUSH
21519: LD_INT 1
21521: PLUS
21522: ST_TO_ADDR
21523: GO 21500
21525: POP
21526: POP
// end ;
21527: LD_VAR 0 2
21531: RET
// export function IsEmpty ( building ) ; begin
21532: LD_INT 0
21534: PPUSH
// if not building then
21535: LD_VAR 0 1
21539: NOT
21540: IFFALSE 21544
// exit ;
21542: GO 21587
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
21544: LD_ADDR_VAR 0 2
21548: PUSH
21549: LD_VAR 0 1
21553: PUSH
21554: LD_INT 22
21556: PUSH
21557: LD_VAR 0 1
21561: PPUSH
21562: CALL_OW 255
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: LD_INT 58
21573: PUSH
21574: EMPTY
21575: LIST
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PPUSH
21581: CALL_OW 69
21585: IN
21586: ST_TO_ADDR
// end ;
21587: LD_VAR 0 2
21591: RET
// export function IsNotFull ( building ) ; begin
21592: LD_INT 0
21594: PPUSH
// if not building then
21595: LD_VAR 0 1
21599: NOT
21600: IFFALSE 21604
// exit ;
21602: GO 21623
// result := UnitsInside ( building ) < 6 ;
21604: LD_ADDR_VAR 0 2
21608: PUSH
21609: LD_VAR 0 1
21613: PPUSH
21614: CALL_OW 313
21618: PUSH
21619: LD_INT 6
21621: LESS
21622: ST_TO_ADDR
// end ;
21623: LD_VAR 0 2
21627: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
21628: LD_INT 0
21630: PPUSH
21631: PPUSH
21632: PPUSH
21633: PPUSH
// tmp := [ ] ;
21634: LD_ADDR_VAR 0 3
21638: PUSH
21639: EMPTY
21640: ST_TO_ADDR
// list := [ ] ;
21641: LD_ADDR_VAR 0 5
21645: PUSH
21646: EMPTY
21647: ST_TO_ADDR
// for i = 16 to 25 do
21648: LD_ADDR_VAR 0 4
21652: PUSH
21653: DOUBLE
21654: LD_INT 16
21656: DEC
21657: ST_TO_ADDR
21658: LD_INT 25
21660: PUSH
21661: FOR_TO
21662: IFFALSE 21735
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
21664: LD_ADDR_VAR 0 3
21668: PUSH
21669: LD_VAR 0 3
21673: PUSH
21674: LD_INT 22
21676: PUSH
21677: LD_VAR 0 1
21681: PPUSH
21682: CALL_OW 255
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 91
21693: PUSH
21694: LD_VAR 0 1
21698: PUSH
21699: LD_INT 6
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: LIST
21706: PUSH
21707: LD_INT 30
21709: PUSH
21710: LD_VAR 0 4
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: LIST
21723: PUSH
21724: EMPTY
21725: LIST
21726: PPUSH
21727: CALL_OW 69
21731: ADD
21732: ST_TO_ADDR
21733: GO 21661
21735: POP
21736: POP
// for i = 1 to tmp do
21737: LD_ADDR_VAR 0 4
21741: PUSH
21742: DOUBLE
21743: LD_INT 1
21745: DEC
21746: ST_TO_ADDR
21747: LD_VAR 0 3
21751: PUSH
21752: FOR_TO
21753: IFFALSE 21841
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
21755: LD_ADDR_VAR 0 5
21759: PUSH
21760: LD_VAR 0 5
21764: PUSH
21765: LD_VAR 0 3
21769: PUSH
21770: LD_VAR 0 4
21774: ARRAY
21775: PPUSH
21776: CALL_OW 266
21780: PUSH
21781: LD_VAR 0 3
21785: PUSH
21786: LD_VAR 0 4
21790: ARRAY
21791: PPUSH
21792: CALL_OW 250
21796: PUSH
21797: LD_VAR 0 3
21801: PUSH
21802: LD_VAR 0 4
21806: ARRAY
21807: PPUSH
21808: CALL_OW 251
21812: PUSH
21813: LD_VAR 0 3
21817: PUSH
21818: LD_VAR 0 4
21822: ARRAY
21823: PPUSH
21824: CALL_OW 254
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: PUSH
21835: EMPTY
21836: LIST
21837: ADD
21838: ST_TO_ADDR
21839: GO 21752
21841: POP
21842: POP
// result := list ;
21843: LD_ADDR_VAR 0 2
21847: PUSH
21848: LD_VAR 0 5
21852: ST_TO_ADDR
// end ;
21853: LD_VAR 0 2
21857: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
21858: LD_INT 0
21860: PPUSH
21861: PPUSH
21862: PPUSH
21863: PPUSH
21864: PPUSH
21865: PPUSH
21866: PPUSH
// if not factory then
21867: LD_VAR 0 1
21871: NOT
21872: IFFALSE 21876
// exit ;
21874: GO 22469
// if control = control_apeman then
21876: LD_VAR 0 4
21880: PUSH
21881: LD_INT 5
21883: EQUAL
21884: IFFALSE 21993
// begin tmp := UnitsInside ( factory ) ;
21886: LD_ADDR_VAR 0 8
21890: PUSH
21891: LD_VAR 0 1
21895: PPUSH
21896: CALL_OW 313
21900: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
21901: LD_VAR 0 8
21905: PPUSH
21906: LD_INT 25
21908: PUSH
21909: LD_INT 12
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: PPUSH
21916: CALL_OW 72
21920: NOT
21921: IFFALSE 21931
// control := control_manual ;
21923: LD_ADDR_VAR 0 4
21927: PUSH
21928: LD_INT 1
21930: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
21931: LD_ADDR_VAR 0 8
21935: PUSH
21936: LD_VAR 0 1
21940: PPUSH
21941: CALL 21628 0 1
21945: ST_TO_ADDR
// if tmp then
21946: LD_VAR 0 8
21950: IFFALSE 21993
// begin for i in tmp do
21952: LD_ADDR_VAR 0 7
21956: PUSH
21957: LD_VAR 0 8
21961: PUSH
21962: FOR_IN
21963: IFFALSE 21991
// if i [ 1 ] = b_ext_radio then
21965: LD_VAR 0 7
21969: PUSH
21970: LD_INT 1
21972: ARRAY
21973: PUSH
21974: LD_INT 22
21976: EQUAL
21977: IFFALSE 21989
// begin control := control_remote ;
21979: LD_ADDR_VAR 0 4
21983: PUSH
21984: LD_INT 2
21986: ST_TO_ADDR
// break ;
21987: GO 21991
// end ;
21989: GO 21962
21991: POP
21992: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
21993: LD_VAR 0 1
21997: PPUSH
21998: LD_VAR 0 2
22002: PPUSH
22003: LD_VAR 0 3
22007: PPUSH
22008: LD_VAR 0 4
22012: PPUSH
22013: LD_VAR 0 5
22017: PPUSH
22018: CALL_OW 448
22022: IFFALSE 22057
// begin result := [ chassis , engine , control , weapon ] ;
22024: LD_ADDR_VAR 0 6
22028: PUSH
22029: LD_VAR 0 2
22033: PUSH
22034: LD_VAR 0 3
22038: PUSH
22039: LD_VAR 0 4
22043: PUSH
22044: LD_VAR 0 5
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: ST_TO_ADDR
// exit ;
22055: GO 22469
// end ; _chassis := AvailableChassisList ( factory ) ;
22057: LD_ADDR_VAR 0 9
22061: PUSH
22062: LD_VAR 0 1
22066: PPUSH
22067: CALL_OW 475
22071: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22072: LD_ADDR_VAR 0 11
22076: PUSH
22077: LD_VAR 0 1
22081: PPUSH
22082: CALL_OW 476
22086: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22087: LD_ADDR_VAR 0 12
22091: PUSH
22092: LD_VAR 0 1
22096: PPUSH
22097: CALL_OW 477
22101: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22102: LD_ADDR_VAR 0 10
22106: PUSH
22107: LD_VAR 0 1
22111: PPUSH
22112: CALL_OW 478
22116: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22117: LD_VAR 0 9
22121: NOT
22122: PUSH
22123: LD_VAR 0 11
22127: NOT
22128: OR
22129: PUSH
22130: LD_VAR 0 12
22134: NOT
22135: OR
22136: PUSH
22137: LD_VAR 0 10
22141: NOT
22142: OR
22143: IFFALSE 22178
// begin result := [ chassis , engine , control , weapon ] ;
22145: LD_ADDR_VAR 0 6
22149: PUSH
22150: LD_VAR 0 2
22154: PUSH
22155: LD_VAR 0 3
22159: PUSH
22160: LD_VAR 0 4
22164: PUSH
22165: LD_VAR 0 5
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: ST_TO_ADDR
// exit ;
22176: GO 22469
// end ; if not chassis in _chassis then
22178: LD_VAR 0 2
22182: PUSH
22183: LD_VAR 0 9
22187: IN
22188: NOT
22189: IFFALSE 22215
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22191: LD_ADDR_VAR 0 2
22195: PUSH
22196: LD_VAR 0 9
22200: PUSH
22201: LD_INT 1
22203: PPUSH
22204: LD_VAR 0 9
22208: PPUSH
22209: CALL_OW 12
22213: ARRAY
22214: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22215: LD_VAR 0 2
22219: PPUSH
22220: LD_VAR 0 3
22224: PPUSH
22225: CALL 22474 0 2
22229: NOT
22230: IFFALSE 22289
// repeat engine := _engine [ 1 ] ;
22232: LD_ADDR_VAR 0 3
22236: PUSH
22237: LD_VAR 0 11
22241: PUSH
22242: LD_INT 1
22244: ARRAY
22245: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22246: LD_ADDR_VAR 0 11
22250: PUSH
22251: LD_VAR 0 11
22255: PPUSH
22256: LD_INT 1
22258: PPUSH
22259: CALL_OW 3
22263: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22264: LD_VAR 0 2
22268: PPUSH
22269: LD_VAR 0 3
22273: PPUSH
22274: CALL 22474 0 2
22278: PUSH
22279: LD_VAR 0 11
22283: PUSH
22284: EMPTY
22285: EQUAL
22286: OR
22287: IFFALSE 22232
// if not control in _control then
22289: LD_VAR 0 4
22293: PUSH
22294: LD_VAR 0 12
22298: IN
22299: NOT
22300: IFFALSE 22326
// control := _control [ rand ( 1 , _control ) ] ;
22302: LD_ADDR_VAR 0 4
22306: PUSH
22307: LD_VAR 0 12
22311: PUSH
22312: LD_INT 1
22314: PPUSH
22315: LD_VAR 0 12
22319: PPUSH
22320: CALL_OW 12
22324: ARRAY
22325: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22326: LD_VAR 0 2
22330: PPUSH
22331: LD_VAR 0 5
22335: PPUSH
22336: CALL 22694 0 2
22340: NOT
22341: IFFALSE 22400
// repeat weapon := _weapon [ 1 ] ;
22343: LD_ADDR_VAR 0 5
22347: PUSH
22348: LD_VAR 0 10
22352: PUSH
22353: LD_INT 1
22355: ARRAY
22356: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22357: LD_ADDR_VAR 0 10
22361: PUSH
22362: LD_VAR 0 10
22366: PPUSH
22367: LD_INT 1
22369: PPUSH
22370: CALL_OW 3
22374: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22375: LD_VAR 0 2
22379: PPUSH
22380: LD_VAR 0 5
22384: PPUSH
22385: CALL 22694 0 2
22389: PUSH
22390: LD_VAR 0 10
22394: PUSH
22395: EMPTY
22396: EQUAL
22397: OR
22398: IFFALSE 22343
// result := [ ] ;
22400: LD_ADDR_VAR 0 6
22404: PUSH
22405: EMPTY
22406: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22407: LD_VAR 0 1
22411: PPUSH
22412: LD_VAR 0 2
22416: PPUSH
22417: LD_VAR 0 3
22421: PPUSH
22422: LD_VAR 0 4
22426: PPUSH
22427: LD_VAR 0 5
22431: PPUSH
22432: CALL_OW 448
22436: IFFALSE 22469
// result := [ chassis , engine , control , weapon ] ;
22438: LD_ADDR_VAR 0 6
22442: PUSH
22443: LD_VAR 0 2
22447: PUSH
22448: LD_VAR 0 3
22452: PUSH
22453: LD_VAR 0 4
22457: PUSH
22458: LD_VAR 0 5
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: ST_TO_ADDR
// end ;
22469: LD_VAR 0 6
22473: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22474: LD_INT 0
22476: PPUSH
// if not chassis or not engine then
22477: LD_VAR 0 1
22481: NOT
22482: PUSH
22483: LD_VAR 0 2
22487: NOT
22488: OR
22489: IFFALSE 22493
// exit ;
22491: GO 22689
// case engine of engine_solar :
22493: LD_VAR 0 2
22497: PUSH
22498: LD_INT 2
22500: DOUBLE
22501: EQUAL
22502: IFTRUE 22506
22504: GO 22544
22506: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
22507: LD_ADDR_VAR 0 3
22511: PUSH
22512: LD_INT 11
22514: PUSH
22515: LD_INT 12
22517: PUSH
22518: LD_INT 13
22520: PUSH
22521: LD_INT 14
22523: PUSH
22524: LD_INT 1
22526: PUSH
22527: LD_INT 2
22529: PUSH
22530: LD_INT 3
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: ST_TO_ADDR
22542: GO 22673
22544: LD_INT 1
22546: DOUBLE
22547: EQUAL
22548: IFTRUE 22552
22550: GO 22614
22552: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
22553: LD_ADDR_VAR 0 3
22557: PUSH
22558: LD_INT 11
22560: PUSH
22561: LD_INT 12
22563: PUSH
22564: LD_INT 13
22566: PUSH
22567: LD_INT 14
22569: PUSH
22570: LD_INT 1
22572: PUSH
22573: LD_INT 2
22575: PUSH
22576: LD_INT 3
22578: PUSH
22579: LD_INT 4
22581: PUSH
22582: LD_INT 5
22584: PUSH
22585: LD_INT 21
22587: PUSH
22588: LD_INT 23
22590: PUSH
22591: LD_INT 22
22593: PUSH
22594: LD_INT 24
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: ST_TO_ADDR
22612: GO 22673
22614: LD_INT 3
22616: DOUBLE
22617: EQUAL
22618: IFTRUE 22622
22620: GO 22672
22622: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22623: LD_ADDR_VAR 0 3
22627: PUSH
22628: LD_INT 13
22630: PUSH
22631: LD_INT 14
22633: PUSH
22634: LD_INT 2
22636: PUSH
22637: LD_INT 3
22639: PUSH
22640: LD_INT 4
22642: PUSH
22643: LD_INT 5
22645: PUSH
22646: LD_INT 21
22648: PUSH
22649: LD_INT 22
22651: PUSH
22652: LD_INT 23
22654: PUSH
22655: LD_INT 24
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: ST_TO_ADDR
22670: GO 22673
22672: POP
// result := ( chassis in result ) ;
22673: LD_ADDR_VAR 0 3
22677: PUSH
22678: LD_VAR 0 1
22682: PUSH
22683: LD_VAR 0 3
22687: IN
22688: ST_TO_ADDR
// end ;
22689: LD_VAR 0 3
22693: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
22694: LD_INT 0
22696: PPUSH
// if not chassis or not weapon then
22697: LD_VAR 0 1
22701: NOT
22702: PUSH
22703: LD_VAR 0 2
22707: NOT
22708: OR
22709: IFFALSE 22713
// exit ;
22711: GO 23775
// case weapon of us_machine_gun :
22713: LD_VAR 0 2
22717: PUSH
22718: LD_INT 2
22720: DOUBLE
22721: EQUAL
22722: IFTRUE 22726
22724: GO 22756
22726: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
22727: LD_ADDR_VAR 0 3
22731: PUSH
22732: LD_INT 1
22734: PUSH
22735: LD_INT 2
22737: PUSH
22738: LD_INT 3
22740: PUSH
22741: LD_INT 4
22743: PUSH
22744: LD_INT 5
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: ST_TO_ADDR
22754: GO 23759
22756: LD_INT 3
22758: DOUBLE
22759: EQUAL
22760: IFTRUE 22764
22762: GO 22794
22764: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
22765: LD_ADDR_VAR 0 3
22769: PUSH
22770: LD_INT 1
22772: PUSH
22773: LD_INT 2
22775: PUSH
22776: LD_INT 3
22778: PUSH
22779: LD_INT 4
22781: PUSH
22782: LD_INT 5
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: ST_TO_ADDR
22792: GO 23759
22794: LD_INT 11
22796: DOUBLE
22797: EQUAL
22798: IFTRUE 22802
22800: GO 22832
22802: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
22803: LD_ADDR_VAR 0 3
22807: PUSH
22808: LD_INT 1
22810: PUSH
22811: LD_INT 2
22813: PUSH
22814: LD_INT 3
22816: PUSH
22817: LD_INT 4
22819: PUSH
22820: LD_INT 5
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: ST_TO_ADDR
22830: GO 23759
22832: LD_INT 4
22834: DOUBLE
22835: EQUAL
22836: IFTRUE 22840
22838: GO 22866
22840: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
22841: LD_ADDR_VAR 0 3
22845: PUSH
22846: LD_INT 2
22848: PUSH
22849: LD_INT 3
22851: PUSH
22852: LD_INT 4
22854: PUSH
22855: LD_INT 5
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: ST_TO_ADDR
22864: GO 23759
22866: LD_INT 5
22868: DOUBLE
22869: EQUAL
22870: IFTRUE 22874
22872: GO 22900
22874: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
22875: LD_ADDR_VAR 0 3
22879: PUSH
22880: LD_INT 2
22882: PUSH
22883: LD_INT 3
22885: PUSH
22886: LD_INT 4
22888: PUSH
22889: LD_INT 5
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: ST_TO_ADDR
22898: GO 23759
22900: LD_INT 9
22902: DOUBLE
22903: EQUAL
22904: IFTRUE 22908
22906: GO 22934
22908: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
22909: LD_ADDR_VAR 0 3
22913: PUSH
22914: LD_INT 2
22916: PUSH
22917: LD_INT 3
22919: PUSH
22920: LD_INT 4
22922: PUSH
22923: LD_INT 5
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: ST_TO_ADDR
22932: GO 23759
22934: LD_INT 7
22936: DOUBLE
22937: EQUAL
22938: IFTRUE 22942
22940: GO 22968
22942: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
22943: LD_ADDR_VAR 0 3
22947: PUSH
22948: LD_INT 2
22950: PUSH
22951: LD_INT 3
22953: PUSH
22954: LD_INT 4
22956: PUSH
22957: LD_INT 5
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: ST_TO_ADDR
22966: GO 23759
22968: LD_INT 12
22970: DOUBLE
22971: EQUAL
22972: IFTRUE 22976
22974: GO 23002
22976: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
22977: LD_ADDR_VAR 0 3
22981: PUSH
22982: LD_INT 2
22984: PUSH
22985: LD_INT 3
22987: PUSH
22988: LD_INT 4
22990: PUSH
22991: LD_INT 5
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: ST_TO_ADDR
23000: GO 23759
23002: LD_INT 13
23004: DOUBLE
23005: EQUAL
23006: IFTRUE 23010
23008: GO 23036
23010: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23011: LD_ADDR_VAR 0 3
23015: PUSH
23016: LD_INT 2
23018: PUSH
23019: LD_INT 3
23021: PUSH
23022: LD_INT 4
23024: PUSH
23025: LD_INT 5
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: ST_TO_ADDR
23034: GO 23759
23036: LD_INT 14
23038: DOUBLE
23039: EQUAL
23040: IFTRUE 23044
23042: GO 23062
23044: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23045: LD_ADDR_VAR 0 3
23049: PUSH
23050: LD_INT 4
23052: PUSH
23053: LD_INT 5
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: ST_TO_ADDR
23060: GO 23759
23062: LD_INT 6
23064: DOUBLE
23065: EQUAL
23066: IFTRUE 23070
23068: GO 23088
23070: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23071: LD_ADDR_VAR 0 3
23075: PUSH
23076: LD_INT 4
23078: PUSH
23079: LD_INT 5
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: ST_TO_ADDR
23086: GO 23759
23088: LD_INT 10
23090: DOUBLE
23091: EQUAL
23092: IFTRUE 23096
23094: GO 23114
23096: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23097: LD_ADDR_VAR 0 3
23101: PUSH
23102: LD_INT 4
23104: PUSH
23105: LD_INT 5
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: ST_TO_ADDR
23112: GO 23759
23114: LD_INT 22
23116: DOUBLE
23117: EQUAL
23118: IFTRUE 23122
23120: GO 23148
23122: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23123: LD_ADDR_VAR 0 3
23127: PUSH
23128: LD_INT 11
23130: PUSH
23131: LD_INT 12
23133: PUSH
23134: LD_INT 13
23136: PUSH
23137: LD_INT 14
23139: PUSH
23140: EMPTY
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: ST_TO_ADDR
23146: GO 23759
23148: LD_INT 23
23150: DOUBLE
23151: EQUAL
23152: IFTRUE 23156
23154: GO 23182
23156: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23157: LD_ADDR_VAR 0 3
23161: PUSH
23162: LD_INT 11
23164: PUSH
23165: LD_INT 12
23167: PUSH
23168: LD_INT 13
23170: PUSH
23171: LD_INT 14
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: ST_TO_ADDR
23180: GO 23759
23182: LD_INT 24
23184: DOUBLE
23185: EQUAL
23186: IFTRUE 23190
23188: GO 23216
23190: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23191: LD_ADDR_VAR 0 3
23195: PUSH
23196: LD_INT 11
23198: PUSH
23199: LD_INT 12
23201: PUSH
23202: LD_INT 13
23204: PUSH
23205: LD_INT 14
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: ST_TO_ADDR
23214: GO 23759
23216: LD_INT 30
23218: DOUBLE
23219: EQUAL
23220: IFTRUE 23224
23222: GO 23250
23224: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23225: LD_ADDR_VAR 0 3
23229: PUSH
23230: LD_INT 11
23232: PUSH
23233: LD_INT 12
23235: PUSH
23236: LD_INT 13
23238: PUSH
23239: LD_INT 14
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: ST_TO_ADDR
23248: GO 23759
23250: LD_INT 25
23252: DOUBLE
23253: EQUAL
23254: IFTRUE 23258
23256: GO 23276
23258: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23259: LD_ADDR_VAR 0 3
23263: PUSH
23264: LD_INT 13
23266: PUSH
23267: LD_INT 14
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: ST_TO_ADDR
23274: GO 23759
23276: LD_INT 27
23278: DOUBLE
23279: EQUAL
23280: IFTRUE 23284
23282: GO 23302
23284: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
23285: LD_ADDR_VAR 0 3
23289: PUSH
23290: LD_INT 13
23292: PUSH
23293: LD_INT 14
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: ST_TO_ADDR
23300: GO 23759
23302: LD_EXP 34
23306: DOUBLE
23307: EQUAL
23308: IFTRUE 23312
23310: GO 23338
23312: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23313: LD_ADDR_VAR 0 3
23317: PUSH
23318: LD_INT 11
23320: PUSH
23321: LD_INT 12
23323: PUSH
23324: LD_INT 13
23326: PUSH
23327: LD_INT 14
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: ST_TO_ADDR
23336: GO 23759
23338: LD_INT 28
23340: DOUBLE
23341: EQUAL
23342: IFTRUE 23346
23344: GO 23364
23346: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23347: LD_ADDR_VAR 0 3
23351: PUSH
23352: LD_INT 13
23354: PUSH
23355: LD_INT 14
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: ST_TO_ADDR
23362: GO 23759
23364: LD_INT 29
23366: DOUBLE
23367: EQUAL
23368: IFTRUE 23372
23370: GO 23390
23372: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23373: LD_ADDR_VAR 0 3
23377: PUSH
23378: LD_INT 13
23380: PUSH
23381: LD_INT 14
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: ST_TO_ADDR
23388: GO 23759
23390: LD_INT 31
23392: DOUBLE
23393: EQUAL
23394: IFTRUE 23398
23396: GO 23416
23398: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23399: LD_ADDR_VAR 0 3
23403: PUSH
23404: LD_INT 13
23406: PUSH
23407: LD_INT 14
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: ST_TO_ADDR
23414: GO 23759
23416: LD_INT 26
23418: DOUBLE
23419: EQUAL
23420: IFTRUE 23424
23422: GO 23442
23424: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23425: LD_ADDR_VAR 0 3
23429: PUSH
23430: LD_INT 13
23432: PUSH
23433: LD_INT 14
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: ST_TO_ADDR
23440: GO 23759
23442: LD_INT 42
23444: DOUBLE
23445: EQUAL
23446: IFTRUE 23450
23448: GO 23476
23450: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23451: LD_ADDR_VAR 0 3
23455: PUSH
23456: LD_INT 21
23458: PUSH
23459: LD_INT 22
23461: PUSH
23462: LD_INT 23
23464: PUSH
23465: LD_INT 24
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: ST_TO_ADDR
23474: GO 23759
23476: LD_INT 43
23478: DOUBLE
23479: EQUAL
23480: IFTRUE 23484
23482: GO 23510
23484: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23485: LD_ADDR_VAR 0 3
23489: PUSH
23490: LD_INT 21
23492: PUSH
23493: LD_INT 22
23495: PUSH
23496: LD_INT 23
23498: PUSH
23499: LD_INT 24
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: ST_TO_ADDR
23508: GO 23759
23510: LD_INT 44
23512: DOUBLE
23513: EQUAL
23514: IFTRUE 23518
23516: GO 23544
23518: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
23519: LD_ADDR_VAR 0 3
23523: PUSH
23524: LD_INT 21
23526: PUSH
23527: LD_INT 22
23529: PUSH
23530: LD_INT 23
23532: PUSH
23533: LD_INT 24
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: ST_TO_ADDR
23542: GO 23759
23544: LD_INT 45
23546: DOUBLE
23547: EQUAL
23548: IFTRUE 23552
23550: GO 23578
23552: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
23553: LD_ADDR_VAR 0 3
23557: PUSH
23558: LD_INT 21
23560: PUSH
23561: LD_INT 22
23563: PUSH
23564: LD_INT 23
23566: PUSH
23567: LD_INT 24
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: ST_TO_ADDR
23576: GO 23759
23578: LD_INT 49
23580: DOUBLE
23581: EQUAL
23582: IFTRUE 23586
23584: GO 23612
23586: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
23587: LD_ADDR_VAR 0 3
23591: PUSH
23592: LD_INT 21
23594: PUSH
23595: LD_INT 22
23597: PUSH
23598: LD_INT 23
23600: PUSH
23601: LD_INT 24
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: ST_TO_ADDR
23610: GO 23759
23612: LD_INT 51
23614: DOUBLE
23615: EQUAL
23616: IFTRUE 23620
23618: GO 23646
23620: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
23621: LD_ADDR_VAR 0 3
23625: PUSH
23626: LD_INT 21
23628: PUSH
23629: LD_INT 22
23631: PUSH
23632: LD_INT 23
23634: PUSH
23635: LD_INT 24
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: ST_TO_ADDR
23644: GO 23759
23646: LD_INT 52
23648: DOUBLE
23649: EQUAL
23650: IFTRUE 23654
23652: GO 23680
23654: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
23655: LD_ADDR_VAR 0 3
23659: PUSH
23660: LD_INT 21
23662: PUSH
23663: LD_INT 22
23665: PUSH
23666: LD_INT 23
23668: PUSH
23669: LD_INT 24
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: ST_TO_ADDR
23678: GO 23759
23680: LD_INT 53
23682: DOUBLE
23683: EQUAL
23684: IFTRUE 23688
23686: GO 23706
23688: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
23689: LD_ADDR_VAR 0 3
23693: PUSH
23694: LD_INT 23
23696: PUSH
23697: LD_INT 24
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: ST_TO_ADDR
23704: GO 23759
23706: LD_INT 46
23708: DOUBLE
23709: EQUAL
23710: IFTRUE 23714
23712: GO 23732
23714: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
23715: LD_ADDR_VAR 0 3
23719: PUSH
23720: LD_INT 23
23722: PUSH
23723: LD_INT 24
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: ST_TO_ADDR
23730: GO 23759
23732: LD_INT 47
23734: DOUBLE
23735: EQUAL
23736: IFTRUE 23740
23738: GO 23758
23740: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23741: LD_ADDR_VAR 0 3
23745: PUSH
23746: LD_INT 23
23748: PUSH
23749: LD_INT 24
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: ST_TO_ADDR
23756: GO 23759
23758: POP
// result := ( chassis in result ) ;
23759: LD_ADDR_VAR 0 3
23763: PUSH
23764: LD_VAR 0 1
23768: PUSH
23769: LD_VAR 0 3
23773: IN
23774: ST_TO_ADDR
// end ;
23775: LD_VAR 0 3
23779: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
23780: LD_INT 0
23782: PPUSH
23783: PPUSH
23784: PPUSH
23785: PPUSH
23786: PPUSH
23787: PPUSH
23788: PPUSH
// result := array ;
23789: LD_ADDR_VAR 0 5
23793: PUSH
23794: LD_VAR 0 1
23798: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
23799: LD_VAR 0 1
23803: NOT
23804: PUSH
23805: LD_VAR 0 2
23809: NOT
23810: OR
23811: PUSH
23812: LD_VAR 0 3
23816: NOT
23817: OR
23818: PUSH
23819: LD_VAR 0 2
23823: PUSH
23824: LD_VAR 0 1
23828: GREATER
23829: OR
23830: PUSH
23831: LD_VAR 0 3
23835: PUSH
23836: LD_VAR 0 1
23840: GREATER
23841: OR
23842: IFFALSE 23846
// exit ;
23844: GO 24142
// if direction then
23846: LD_VAR 0 4
23850: IFFALSE 23914
// begin d := 1 ;
23852: LD_ADDR_VAR 0 9
23856: PUSH
23857: LD_INT 1
23859: ST_TO_ADDR
// if i_from > i_to then
23860: LD_VAR 0 2
23864: PUSH
23865: LD_VAR 0 3
23869: GREATER
23870: IFFALSE 23896
// length := ( array - i_from ) + i_to else
23872: LD_ADDR_VAR 0 11
23876: PUSH
23877: LD_VAR 0 1
23881: PUSH
23882: LD_VAR 0 2
23886: MINUS
23887: PUSH
23888: LD_VAR 0 3
23892: PLUS
23893: ST_TO_ADDR
23894: GO 23912
// length := i_to - i_from ;
23896: LD_ADDR_VAR 0 11
23900: PUSH
23901: LD_VAR 0 3
23905: PUSH
23906: LD_VAR 0 2
23910: MINUS
23911: ST_TO_ADDR
// end else
23912: GO 23975
// begin d := - 1 ;
23914: LD_ADDR_VAR 0 9
23918: PUSH
23919: LD_INT 1
23921: NEG
23922: ST_TO_ADDR
// if i_from > i_to then
23923: LD_VAR 0 2
23927: PUSH
23928: LD_VAR 0 3
23932: GREATER
23933: IFFALSE 23953
// length := i_from - i_to else
23935: LD_ADDR_VAR 0 11
23939: PUSH
23940: LD_VAR 0 2
23944: PUSH
23945: LD_VAR 0 3
23949: MINUS
23950: ST_TO_ADDR
23951: GO 23975
// length := ( array - i_to ) + i_from ;
23953: LD_ADDR_VAR 0 11
23957: PUSH
23958: LD_VAR 0 1
23962: PUSH
23963: LD_VAR 0 3
23967: MINUS
23968: PUSH
23969: LD_VAR 0 2
23973: PLUS
23974: ST_TO_ADDR
// end ; if not length then
23975: LD_VAR 0 11
23979: NOT
23980: IFFALSE 23984
// exit ;
23982: GO 24142
// tmp := array ;
23984: LD_ADDR_VAR 0 10
23988: PUSH
23989: LD_VAR 0 1
23993: ST_TO_ADDR
// for i = 1 to length do
23994: LD_ADDR_VAR 0 6
23998: PUSH
23999: DOUBLE
24000: LD_INT 1
24002: DEC
24003: ST_TO_ADDR
24004: LD_VAR 0 11
24008: PUSH
24009: FOR_TO
24010: IFFALSE 24130
// begin for j = 1 to array do
24012: LD_ADDR_VAR 0 7
24016: PUSH
24017: DOUBLE
24018: LD_INT 1
24020: DEC
24021: ST_TO_ADDR
24022: LD_VAR 0 1
24026: PUSH
24027: FOR_TO
24028: IFFALSE 24116
// begin k := j + d ;
24030: LD_ADDR_VAR 0 8
24034: PUSH
24035: LD_VAR 0 7
24039: PUSH
24040: LD_VAR 0 9
24044: PLUS
24045: ST_TO_ADDR
// if k > array then
24046: LD_VAR 0 8
24050: PUSH
24051: LD_VAR 0 1
24055: GREATER
24056: IFFALSE 24066
// k := 1 ;
24058: LD_ADDR_VAR 0 8
24062: PUSH
24063: LD_INT 1
24065: ST_TO_ADDR
// if not k then
24066: LD_VAR 0 8
24070: NOT
24071: IFFALSE 24083
// k := array ;
24073: LD_ADDR_VAR 0 8
24077: PUSH
24078: LD_VAR 0 1
24082: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24083: LD_ADDR_VAR 0 10
24087: PUSH
24088: LD_VAR 0 10
24092: PPUSH
24093: LD_VAR 0 8
24097: PPUSH
24098: LD_VAR 0 1
24102: PUSH
24103: LD_VAR 0 7
24107: ARRAY
24108: PPUSH
24109: CALL_OW 1
24113: ST_TO_ADDR
// end ;
24114: GO 24027
24116: POP
24117: POP
// array := tmp ;
24118: LD_ADDR_VAR 0 1
24122: PUSH
24123: LD_VAR 0 10
24127: ST_TO_ADDR
// end ;
24128: GO 24009
24130: POP
24131: POP
// result := array ;
24132: LD_ADDR_VAR 0 5
24136: PUSH
24137: LD_VAR 0 1
24141: ST_TO_ADDR
// end ;
24142: LD_VAR 0 5
24146: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24147: LD_INT 0
24149: PPUSH
24150: PPUSH
// result := 0 ;
24151: LD_ADDR_VAR 0 3
24155: PUSH
24156: LD_INT 0
24158: ST_TO_ADDR
// if not array or not value in array then
24159: LD_VAR 0 1
24163: NOT
24164: PUSH
24165: LD_VAR 0 2
24169: PUSH
24170: LD_VAR 0 1
24174: IN
24175: NOT
24176: OR
24177: IFFALSE 24181
// exit ;
24179: GO 24235
// for i = 1 to array do
24181: LD_ADDR_VAR 0 4
24185: PUSH
24186: DOUBLE
24187: LD_INT 1
24189: DEC
24190: ST_TO_ADDR
24191: LD_VAR 0 1
24195: PUSH
24196: FOR_TO
24197: IFFALSE 24233
// if value = array [ i ] then
24199: LD_VAR 0 2
24203: PUSH
24204: LD_VAR 0 1
24208: PUSH
24209: LD_VAR 0 4
24213: ARRAY
24214: EQUAL
24215: IFFALSE 24231
// begin result := i ;
24217: LD_ADDR_VAR 0 3
24221: PUSH
24222: LD_VAR 0 4
24226: ST_TO_ADDR
// exit ;
24227: POP
24228: POP
24229: GO 24235
// end ;
24231: GO 24196
24233: POP
24234: POP
// end ;
24235: LD_VAR 0 3
24239: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24240: LD_INT 0
24242: PPUSH
// vc_chassis := chassis ;
24243: LD_ADDR_OWVAR 37
24247: PUSH
24248: LD_VAR 0 1
24252: ST_TO_ADDR
// vc_engine := engine ;
24253: LD_ADDR_OWVAR 39
24257: PUSH
24258: LD_VAR 0 2
24262: ST_TO_ADDR
// vc_control := control ;
24263: LD_ADDR_OWVAR 38
24267: PUSH
24268: LD_VAR 0 3
24272: ST_TO_ADDR
// vc_weapon := weapon ;
24273: LD_ADDR_OWVAR 40
24277: PUSH
24278: LD_VAR 0 4
24282: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24283: LD_ADDR_OWVAR 41
24287: PUSH
24288: LD_VAR 0 5
24292: ST_TO_ADDR
// end ;
24293: LD_VAR 0 6
24297: RET
// export function WantPlant ( unit ) ; var task ; begin
24298: LD_INT 0
24300: PPUSH
24301: PPUSH
// result := false ;
24302: LD_ADDR_VAR 0 2
24306: PUSH
24307: LD_INT 0
24309: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24310: LD_ADDR_VAR 0 3
24314: PUSH
24315: LD_VAR 0 1
24319: PPUSH
24320: CALL_OW 437
24324: ST_TO_ADDR
// if task then
24325: LD_VAR 0 3
24329: IFFALSE 24357
// if task [ 1 ] [ 1 ] = p then
24331: LD_VAR 0 3
24335: PUSH
24336: LD_INT 1
24338: ARRAY
24339: PUSH
24340: LD_INT 1
24342: ARRAY
24343: PUSH
24344: LD_STRING p
24346: EQUAL
24347: IFFALSE 24357
// result := true ;
24349: LD_ADDR_VAR 0 2
24353: PUSH
24354: LD_INT 1
24356: ST_TO_ADDR
// end ;
24357: LD_VAR 0 2
24361: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24362: LD_INT 0
24364: PPUSH
24365: PPUSH
24366: PPUSH
24367: PPUSH
// if pos < 1 then
24368: LD_VAR 0 2
24372: PUSH
24373: LD_INT 1
24375: LESS
24376: IFFALSE 24380
// exit ;
24378: GO 24683
// if pos = 1 then
24380: LD_VAR 0 2
24384: PUSH
24385: LD_INT 1
24387: EQUAL
24388: IFFALSE 24421
// result := Replace ( arr , pos [ 1 ] , value ) else
24390: LD_ADDR_VAR 0 4
24394: PUSH
24395: LD_VAR 0 1
24399: PPUSH
24400: LD_VAR 0 2
24404: PUSH
24405: LD_INT 1
24407: ARRAY
24408: PPUSH
24409: LD_VAR 0 3
24413: PPUSH
24414: CALL_OW 1
24418: ST_TO_ADDR
24419: GO 24683
// begin tmp := arr ;
24421: LD_ADDR_VAR 0 6
24425: PUSH
24426: LD_VAR 0 1
24430: ST_TO_ADDR
// s_arr := [ tmp ] ;
24431: LD_ADDR_VAR 0 7
24435: PUSH
24436: LD_VAR 0 6
24440: PUSH
24441: EMPTY
24442: LIST
24443: ST_TO_ADDR
// for i = 1 to pos - 1 do
24444: LD_ADDR_VAR 0 5
24448: PUSH
24449: DOUBLE
24450: LD_INT 1
24452: DEC
24453: ST_TO_ADDR
24454: LD_VAR 0 2
24458: PUSH
24459: LD_INT 1
24461: MINUS
24462: PUSH
24463: FOR_TO
24464: IFFALSE 24509
// begin tmp := tmp [ pos [ i ] ] ;
24466: LD_ADDR_VAR 0 6
24470: PUSH
24471: LD_VAR 0 6
24475: PUSH
24476: LD_VAR 0 2
24480: PUSH
24481: LD_VAR 0 5
24485: ARRAY
24486: ARRAY
24487: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24488: LD_ADDR_VAR 0 7
24492: PUSH
24493: LD_VAR 0 7
24497: PUSH
24498: LD_VAR 0 6
24502: PUSH
24503: EMPTY
24504: LIST
24505: ADD
24506: ST_TO_ADDR
// end ;
24507: GO 24463
24509: POP
24510: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
24511: LD_ADDR_VAR 0 6
24515: PUSH
24516: LD_VAR 0 6
24520: PPUSH
24521: LD_VAR 0 2
24525: PUSH
24526: LD_VAR 0 2
24530: ARRAY
24531: PPUSH
24532: LD_VAR 0 3
24536: PPUSH
24537: CALL_OW 1
24541: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
24542: LD_ADDR_VAR 0 7
24546: PUSH
24547: LD_VAR 0 7
24551: PPUSH
24552: LD_VAR 0 7
24556: PPUSH
24557: LD_VAR 0 6
24561: PPUSH
24562: CALL_OW 1
24566: ST_TO_ADDR
// for i = s_arr downto 2 do
24567: LD_ADDR_VAR 0 5
24571: PUSH
24572: DOUBLE
24573: LD_VAR 0 7
24577: INC
24578: ST_TO_ADDR
24579: LD_INT 2
24581: PUSH
24582: FOR_DOWNTO
24583: IFFALSE 24667
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
24585: LD_ADDR_VAR 0 6
24589: PUSH
24590: LD_VAR 0 7
24594: PUSH
24595: LD_VAR 0 5
24599: PUSH
24600: LD_INT 1
24602: MINUS
24603: ARRAY
24604: PPUSH
24605: LD_VAR 0 2
24609: PUSH
24610: LD_VAR 0 5
24614: PUSH
24615: LD_INT 1
24617: MINUS
24618: ARRAY
24619: PPUSH
24620: LD_VAR 0 7
24624: PUSH
24625: LD_VAR 0 5
24629: ARRAY
24630: PPUSH
24631: CALL_OW 1
24635: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
24636: LD_ADDR_VAR 0 7
24640: PUSH
24641: LD_VAR 0 7
24645: PPUSH
24646: LD_VAR 0 5
24650: PUSH
24651: LD_INT 1
24653: MINUS
24654: PPUSH
24655: LD_VAR 0 6
24659: PPUSH
24660: CALL_OW 1
24664: ST_TO_ADDR
// end ;
24665: GO 24582
24667: POP
24668: POP
// result := s_arr [ 1 ] ;
24669: LD_ADDR_VAR 0 4
24673: PUSH
24674: LD_VAR 0 7
24678: PUSH
24679: LD_INT 1
24681: ARRAY
24682: ST_TO_ADDR
// end ; end ;
24683: LD_VAR 0 4
24687: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
24688: LD_INT 0
24690: PPUSH
24691: PPUSH
// if not list then
24692: LD_VAR 0 1
24696: NOT
24697: IFFALSE 24701
// exit ;
24699: GO 24792
// i := list [ pos1 ] ;
24701: LD_ADDR_VAR 0 5
24705: PUSH
24706: LD_VAR 0 1
24710: PUSH
24711: LD_VAR 0 2
24715: ARRAY
24716: ST_TO_ADDR
// if not i then
24717: LD_VAR 0 5
24721: NOT
24722: IFFALSE 24726
// exit ;
24724: GO 24792
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
24726: LD_ADDR_VAR 0 1
24730: PUSH
24731: LD_VAR 0 1
24735: PPUSH
24736: LD_VAR 0 2
24740: PPUSH
24741: LD_VAR 0 1
24745: PUSH
24746: LD_VAR 0 3
24750: ARRAY
24751: PPUSH
24752: CALL_OW 1
24756: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
24757: LD_ADDR_VAR 0 1
24761: PUSH
24762: LD_VAR 0 1
24766: PPUSH
24767: LD_VAR 0 3
24771: PPUSH
24772: LD_VAR 0 5
24776: PPUSH
24777: CALL_OW 1
24781: ST_TO_ADDR
// result := list ;
24782: LD_ADDR_VAR 0 4
24786: PUSH
24787: LD_VAR 0 1
24791: ST_TO_ADDR
// end ;
24792: LD_VAR 0 4
24796: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
24797: LD_INT 0
24799: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
24800: LD_ADDR_VAR 0 5
24804: PUSH
24805: LD_VAR 0 1
24809: PPUSH
24810: CALL_OW 250
24814: PPUSH
24815: LD_VAR 0 1
24819: PPUSH
24820: CALL_OW 251
24824: PPUSH
24825: LD_VAR 0 2
24829: PPUSH
24830: LD_VAR 0 3
24834: PPUSH
24835: LD_VAR 0 4
24839: PPUSH
24840: CALL 24850 0 5
24844: ST_TO_ADDR
// end ;
24845: LD_VAR 0 5
24849: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
24850: LD_INT 0
24852: PPUSH
24853: PPUSH
24854: PPUSH
24855: PPUSH
// if not list then
24856: LD_VAR 0 3
24860: NOT
24861: IFFALSE 24865
// exit ;
24863: GO 25253
// result := [ ] ;
24865: LD_ADDR_VAR 0 6
24869: PUSH
24870: EMPTY
24871: ST_TO_ADDR
// for i in list do
24872: LD_ADDR_VAR 0 7
24876: PUSH
24877: LD_VAR 0 3
24881: PUSH
24882: FOR_IN
24883: IFFALSE 25085
// begin tmp := GetDistUnitXY ( i , x , y ) ;
24885: LD_ADDR_VAR 0 9
24889: PUSH
24890: LD_VAR 0 7
24894: PPUSH
24895: LD_VAR 0 1
24899: PPUSH
24900: LD_VAR 0 2
24904: PPUSH
24905: CALL_OW 297
24909: ST_TO_ADDR
// if not result then
24910: LD_VAR 0 6
24914: NOT
24915: IFFALSE 24941
// result := [ [ i , tmp ] ] else
24917: LD_ADDR_VAR 0 6
24921: PUSH
24922: LD_VAR 0 7
24926: PUSH
24927: LD_VAR 0 9
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: EMPTY
24937: LIST
24938: ST_TO_ADDR
24939: GO 25083
// begin if result [ result ] [ 2 ] < tmp then
24941: LD_VAR 0 6
24945: PUSH
24946: LD_VAR 0 6
24950: ARRAY
24951: PUSH
24952: LD_INT 2
24954: ARRAY
24955: PUSH
24956: LD_VAR 0 9
24960: LESS
24961: IFFALSE 25003
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
24963: LD_ADDR_VAR 0 6
24967: PUSH
24968: LD_VAR 0 6
24972: PPUSH
24973: LD_VAR 0 6
24977: PUSH
24978: LD_INT 1
24980: PLUS
24981: PPUSH
24982: LD_VAR 0 7
24986: PUSH
24987: LD_VAR 0 9
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PPUSH
24996: CALL_OW 2
25000: ST_TO_ADDR
25001: GO 25083
// for j = 1 to result do
25003: LD_ADDR_VAR 0 8
25007: PUSH
25008: DOUBLE
25009: LD_INT 1
25011: DEC
25012: ST_TO_ADDR
25013: LD_VAR 0 6
25017: PUSH
25018: FOR_TO
25019: IFFALSE 25081
// begin if tmp < result [ j ] [ 2 ] then
25021: LD_VAR 0 9
25025: PUSH
25026: LD_VAR 0 6
25030: PUSH
25031: LD_VAR 0 8
25035: ARRAY
25036: PUSH
25037: LD_INT 2
25039: ARRAY
25040: LESS
25041: IFFALSE 25079
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25043: LD_ADDR_VAR 0 6
25047: PUSH
25048: LD_VAR 0 6
25052: PPUSH
25053: LD_VAR 0 8
25057: PPUSH
25058: LD_VAR 0 7
25062: PUSH
25063: LD_VAR 0 9
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PPUSH
25072: CALL_OW 2
25076: ST_TO_ADDR
// break ;
25077: GO 25081
// end ; end ;
25079: GO 25018
25081: POP
25082: POP
// end ; end ;
25083: GO 24882
25085: POP
25086: POP
// if result and not asc then
25087: LD_VAR 0 6
25091: PUSH
25092: LD_VAR 0 4
25096: NOT
25097: AND
25098: IFFALSE 25173
// begin tmp := result ;
25100: LD_ADDR_VAR 0 9
25104: PUSH
25105: LD_VAR 0 6
25109: ST_TO_ADDR
// for i = tmp downto 1 do
25110: LD_ADDR_VAR 0 7
25114: PUSH
25115: DOUBLE
25116: LD_VAR 0 9
25120: INC
25121: ST_TO_ADDR
25122: LD_INT 1
25124: PUSH
25125: FOR_DOWNTO
25126: IFFALSE 25171
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25128: LD_ADDR_VAR 0 6
25132: PUSH
25133: LD_VAR 0 6
25137: PPUSH
25138: LD_VAR 0 9
25142: PUSH
25143: LD_VAR 0 7
25147: MINUS
25148: PUSH
25149: LD_INT 1
25151: PLUS
25152: PPUSH
25153: LD_VAR 0 9
25157: PUSH
25158: LD_VAR 0 7
25162: ARRAY
25163: PPUSH
25164: CALL_OW 1
25168: ST_TO_ADDR
25169: GO 25125
25171: POP
25172: POP
// end ; tmp := [ ] ;
25173: LD_ADDR_VAR 0 9
25177: PUSH
25178: EMPTY
25179: ST_TO_ADDR
// if mode then
25180: LD_VAR 0 5
25184: IFFALSE 25253
// begin for i = 1 to result do
25186: LD_ADDR_VAR 0 7
25190: PUSH
25191: DOUBLE
25192: LD_INT 1
25194: DEC
25195: ST_TO_ADDR
25196: LD_VAR 0 6
25200: PUSH
25201: FOR_TO
25202: IFFALSE 25241
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25204: LD_ADDR_VAR 0 9
25208: PUSH
25209: LD_VAR 0 9
25213: PPUSH
25214: LD_VAR 0 7
25218: PPUSH
25219: LD_VAR 0 6
25223: PUSH
25224: LD_VAR 0 7
25228: ARRAY
25229: PUSH
25230: LD_INT 1
25232: ARRAY
25233: PPUSH
25234: CALL_OW 1
25238: ST_TO_ADDR
25239: GO 25201
25241: POP
25242: POP
// result := tmp ;
25243: LD_ADDR_VAR 0 6
25247: PUSH
25248: LD_VAR 0 9
25252: ST_TO_ADDR
// end ; end ;
25253: LD_VAR 0 6
25257: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25258: LD_INT 0
25260: PPUSH
25261: PPUSH
25262: PPUSH
25263: PPUSH
25264: PPUSH
25265: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25266: LD_ADDR_VAR 0 5
25270: PUSH
25271: LD_INT 0
25273: PUSH
25274: LD_INT 0
25276: PUSH
25277: LD_INT 0
25279: PUSH
25280: EMPTY
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: ST_TO_ADDR
// if not x or not y then
25288: LD_VAR 0 2
25292: NOT
25293: PUSH
25294: LD_VAR 0 3
25298: NOT
25299: OR
25300: IFFALSE 25304
// exit ;
25302: GO 26956
// if not range then
25304: LD_VAR 0 4
25308: NOT
25309: IFFALSE 25319
// range := 10 ;
25311: LD_ADDR_VAR 0 4
25315: PUSH
25316: LD_INT 10
25318: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25319: LD_ADDR_VAR 0 8
25323: PUSH
25324: LD_INT 81
25326: PUSH
25327: LD_VAR 0 1
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 92
25338: PUSH
25339: LD_VAR 0 2
25343: PUSH
25344: LD_VAR 0 3
25348: PUSH
25349: LD_VAR 0 4
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 3
25362: PUSH
25363: LD_INT 21
25365: PUSH
25366: LD_INT 3
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: LIST
25381: PPUSH
25382: CALL_OW 69
25386: ST_TO_ADDR
// if not tmp then
25387: LD_VAR 0 8
25391: NOT
25392: IFFALSE 25396
// exit ;
25394: GO 26956
// for i in tmp do
25396: LD_ADDR_VAR 0 6
25400: PUSH
25401: LD_VAR 0 8
25405: PUSH
25406: FOR_IN
25407: IFFALSE 26931
// begin points := [ 0 , 0 , 0 ] ;
25409: LD_ADDR_VAR 0 9
25413: PUSH
25414: LD_INT 0
25416: PUSH
25417: LD_INT 0
25419: PUSH
25420: LD_INT 0
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: LIST
25427: ST_TO_ADDR
// bpoints := 1 ;
25428: LD_ADDR_VAR 0 10
25432: PUSH
25433: LD_INT 1
25435: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25436: LD_VAR 0 6
25440: PPUSH
25441: CALL_OW 247
25445: PUSH
25446: LD_INT 1
25448: DOUBLE
25449: EQUAL
25450: IFTRUE 25454
25452: GO 26032
25454: POP
// begin if GetClass ( i ) = 1 then
25455: LD_VAR 0 6
25459: PPUSH
25460: CALL_OW 257
25464: PUSH
25465: LD_INT 1
25467: EQUAL
25468: IFFALSE 25489
// points := [ 10 , 5 , 3 ] ;
25470: LD_ADDR_VAR 0 9
25474: PUSH
25475: LD_INT 10
25477: PUSH
25478: LD_INT 5
25480: PUSH
25481: LD_INT 3
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: LIST
25488: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25489: LD_VAR 0 6
25493: PPUSH
25494: CALL_OW 257
25498: PUSH
25499: LD_INT 2
25501: PUSH
25502: LD_INT 3
25504: PUSH
25505: LD_INT 4
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: LIST
25512: IN
25513: IFFALSE 25534
// points := [ 3 , 2 , 1 ] ;
25515: LD_ADDR_VAR 0 9
25519: PUSH
25520: LD_INT 3
25522: PUSH
25523: LD_INT 2
25525: PUSH
25526: LD_INT 1
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: LIST
25533: ST_TO_ADDR
// if GetClass ( i ) = 5 then
25534: LD_VAR 0 6
25538: PPUSH
25539: CALL_OW 257
25543: PUSH
25544: LD_INT 5
25546: EQUAL
25547: IFFALSE 25568
// points := [ 130 , 5 , 2 ] ;
25549: LD_ADDR_VAR 0 9
25553: PUSH
25554: LD_INT 130
25556: PUSH
25557: LD_INT 5
25559: PUSH
25560: LD_INT 2
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: LIST
25567: ST_TO_ADDR
// if GetClass ( i ) = 8 then
25568: LD_VAR 0 6
25572: PPUSH
25573: CALL_OW 257
25577: PUSH
25578: LD_INT 8
25580: EQUAL
25581: IFFALSE 25602
// points := [ 35 , 35 , 30 ] ;
25583: LD_ADDR_VAR 0 9
25587: PUSH
25588: LD_INT 35
25590: PUSH
25591: LD_INT 35
25593: PUSH
25594: LD_INT 30
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: LIST
25601: ST_TO_ADDR
// if GetClass ( i ) = 9 then
25602: LD_VAR 0 6
25606: PPUSH
25607: CALL_OW 257
25611: PUSH
25612: LD_INT 9
25614: EQUAL
25615: IFFALSE 25636
// points := [ 20 , 55 , 40 ] ;
25617: LD_ADDR_VAR 0 9
25621: PUSH
25622: LD_INT 20
25624: PUSH
25625: LD_INT 55
25627: PUSH
25628: LD_INT 40
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: LIST
25635: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
25636: LD_VAR 0 6
25640: PPUSH
25641: CALL_OW 257
25645: PUSH
25646: LD_INT 12
25648: PUSH
25649: LD_INT 16
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: IN
25656: IFFALSE 25677
// points := [ 5 , 3 , 2 ] ;
25658: LD_ADDR_VAR 0 9
25662: PUSH
25663: LD_INT 5
25665: PUSH
25666: LD_INT 3
25668: PUSH
25669: LD_INT 2
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: LIST
25676: ST_TO_ADDR
// if GetClass ( i ) = 17 then
25677: LD_VAR 0 6
25681: PPUSH
25682: CALL_OW 257
25686: PUSH
25687: LD_INT 17
25689: EQUAL
25690: IFFALSE 25711
// points := [ 100 , 50 , 75 ] ;
25692: LD_ADDR_VAR 0 9
25696: PUSH
25697: LD_INT 100
25699: PUSH
25700: LD_INT 50
25702: PUSH
25703: LD_INT 75
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: LIST
25710: ST_TO_ADDR
// if GetClass ( i ) = 15 then
25711: LD_VAR 0 6
25715: PPUSH
25716: CALL_OW 257
25720: PUSH
25721: LD_INT 15
25723: EQUAL
25724: IFFALSE 25745
// points := [ 10 , 5 , 3 ] ;
25726: LD_ADDR_VAR 0 9
25730: PUSH
25731: LD_INT 10
25733: PUSH
25734: LD_INT 5
25736: PUSH
25737: LD_INT 3
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: LIST
25744: ST_TO_ADDR
// if GetClass ( i ) = 14 then
25745: LD_VAR 0 6
25749: PPUSH
25750: CALL_OW 257
25754: PUSH
25755: LD_INT 14
25757: EQUAL
25758: IFFALSE 25779
// points := [ 10 , 0 , 0 ] ;
25760: LD_ADDR_VAR 0 9
25764: PUSH
25765: LD_INT 10
25767: PUSH
25768: LD_INT 0
25770: PUSH
25771: LD_INT 0
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: LIST
25778: ST_TO_ADDR
// if GetClass ( i ) = 11 then
25779: LD_VAR 0 6
25783: PPUSH
25784: CALL_OW 257
25788: PUSH
25789: LD_INT 11
25791: EQUAL
25792: IFFALSE 25813
// points := [ 30 , 10 , 5 ] ;
25794: LD_ADDR_VAR 0 9
25798: PUSH
25799: LD_INT 30
25801: PUSH
25802: LD_INT 10
25804: PUSH
25805: LD_INT 5
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: LIST
25812: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
25813: LD_VAR 0 1
25817: PPUSH
25818: LD_INT 5
25820: PPUSH
25821: CALL_OW 321
25825: PUSH
25826: LD_INT 2
25828: EQUAL
25829: IFFALSE 25846
// bpoints := bpoints * 1.8 ;
25831: LD_ADDR_VAR 0 10
25835: PUSH
25836: LD_VAR 0 10
25840: PUSH
25841: LD_REAL  1.80000000000000E+0000
25844: MUL
25845: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
25846: LD_VAR 0 6
25850: PPUSH
25851: CALL_OW 257
25855: PUSH
25856: LD_INT 1
25858: PUSH
25859: LD_INT 2
25861: PUSH
25862: LD_INT 3
25864: PUSH
25865: LD_INT 4
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: IN
25874: PUSH
25875: LD_VAR 0 1
25879: PPUSH
25880: LD_INT 51
25882: PPUSH
25883: CALL_OW 321
25887: PUSH
25888: LD_INT 2
25890: EQUAL
25891: AND
25892: IFFALSE 25909
// bpoints := bpoints * 1.2 ;
25894: LD_ADDR_VAR 0 10
25898: PUSH
25899: LD_VAR 0 10
25903: PUSH
25904: LD_REAL  1.20000000000000E+0000
25907: MUL
25908: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
25909: LD_VAR 0 6
25913: PPUSH
25914: CALL_OW 257
25918: PUSH
25919: LD_INT 5
25921: PUSH
25922: LD_INT 7
25924: PUSH
25925: LD_INT 9
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: LIST
25932: IN
25933: PUSH
25934: LD_VAR 0 1
25938: PPUSH
25939: LD_INT 52
25941: PPUSH
25942: CALL_OW 321
25946: PUSH
25947: LD_INT 2
25949: EQUAL
25950: AND
25951: IFFALSE 25968
// bpoints := bpoints * 1.5 ;
25953: LD_ADDR_VAR 0 10
25957: PUSH
25958: LD_VAR 0 10
25962: PUSH
25963: LD_REAL  1.50000000000000E+0000
25966: MUL
25967: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
25968: LD_VAR 0 1
25972: PPUSH
25973: LD_INT 66
25975: PPUSH
25976: CALL_OW 321
25980: PUSH
25981: LD_INT 2
25983: EQUAL
25984: IFFALSE 26001
// bpoints := bpoints * 1.1 ;
25986: LD_ADDR_VAR 0 10
25990: PUSH
25991: LD_VAR 0 10
25995: PUSH
25996: LD_REAL  1.10000000000000E+0000
25999: MUL
26000: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
26001: LD_ADDR_VAR 0 10
26005: PUSH
26006: LD_VAR 0 10
26010: PUSH
26011: LD_VAR 0 6
26015: PPUSH
26016: LD_INT 1
26018: PPUSH
26019: CALL_OW 259
26023: PUSH
26024: LD_REAL  1.15000000000000E+0000
26027: MUL
26028: MUL
26029: ST_TO_ADDR
// end ; unit_vehicle :
26030: GO 26860
26032: LD_INT 2
26034: DOUBLE
26035: EQUAL
26036: IFTRUE 26040
26038: GO 26848
26040: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
26041: LD_VAR 0 6
26045: PPUSH
26046: CALL_OW 264
26050: PUSH
26051: LD_INT 2
26053: PUSH
26054: LD_INT 42
26056: PUSH
26057: LD_INT 24
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: LIST
26064: IN
26065: IFFALSE 26086
// points := [ 25 , 5 , 3 ] ;
26067: LD_ADDR_VAR 0 9
26071: PUSH
26072: LD_INT 25
26074: PUSH
26075: LD_INT 5
26077: PUSH
26078: LD_INT 3
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: LIST
26085: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26086: LD_VAR 0 6
26090: PPUSH
26091: CALL_OW 264
26095: PUSH
26096: LD_INT 4
26098: PUSH
26099: LD_INT 43
26101: PUSH
26102: LD_INT 25
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: LIST
26109: IN
26110: IFFALSE 26131
// points := [ 40 , 15 , 5 ] ;
26112: LD_ADDR_VAR 0 9
26116: PUSH
26117: LD_INT 40
26119: PUSH
26120: LD_INT 15
26122: PUSH
26123: LD_INT 5
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: LIST
26130: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26131: LD_VAR 0 6
26135: PPUSH
26136: CALL_OW 264
26140: PUSH
26141: LD_INT 3
26143: PUSH
26144: LD_INT 23
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: IN
26151: IFFALSE 26172
// points := [ 7 , 25 , 8 ] ;
26153: LD_ADDR_VAR 0 9
26157: PUSH
26158: LD_INT 7
26160: PUSH
26161: LD_INT 25
26163: PUSH
26164: LD_INT 8
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: LIST
26171: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26172: LD_VAR 0 6
26176: PPUSH
26177: CALL_OW 264
26181: PUSH
26182: LD_INT 5
26184: PUSH
26185: LD_INT 27
26187: PUSH
26188: LD_INT 44
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: LIST
26195: IN
26196: IFFALSE 26217
// points := [ 14 , 50 , 16 ] ;
26198: LD_ADDR_VAR 0 9
26202: PUSH
26203: LD_INT 14
26205: PUSH
26206: LD_INT 50
26208: PUSH
26209: LD_INT 16
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: LIST
26216: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26217: LD_VAR 0 6
26221: PPUSH
26222: CALL_OW 264
26226: PUSH
26227: LD_INT 6
26229: PUSH
26230: LD_INT 46
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: IN
26237: IFFALSE 26258
// points := [ 32 , 120 , 70 ] ;
26239: LD_ADDR_VAR 0 9
26243: PUSH
26244: LD_INT 32
26246: PUSH
26247: LD_INT 120
26249: PUSH
26250: LD_INT 70
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: LIST
26257: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
26258: LD_VAR 0 6
26262: PPUSH
26263: CALL_OW 264
26267: PUSH
26268: LD_INT 7
26270: PUSH
26271: LD_INT 28
26273: PUSH
26274: LD_INT 45
26276: PUSH
26277: LD_EXP 34
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: IN
26288: IFFALSE 26309
// points := [ 35 , 20 , 45 ] ;
26290: LD_ADDR_VAR 0 9
26294: PUSH
26295: LD_INT 35
26297: PUSH
26298: LD_INT 20
26300: PUSH
26301: LD_INT 45
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: LIST
26308: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26309: LD_VAR 0 6
26313: PPUSH
26314: CALL_OW 264
26318: PUSH
26319: LD_INT 47
26321: PUSH
26322: EMPTY
26323: LIST
26324: IN
26325: IFFALSE 26346
// points := [ 67 , 45 , 75 ] ;
26327: LD_ADDR_VAR 0 9
26331: PUSH
26332: LD_INT 67
26334: PUSH
26335: LD_INT 45
26337: PUSH
26338: LD_INT 75
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: LIST
26345: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26346: LD_VAR 0 6
26350: PPUSH
26351: CALL_OW 264
26355: PUSH
26356: LD_INT 26
26358: PUSH
26359: EMPTY
26360: LIST
26361: IN
26362: IFFALSE 26383
// points := [ 120 , 30 , 80 ] ;
26364: LD_ADDR_VAR 0 9
26368: PUSH
26369: LD_INT 120
26371: PUSH
26372: LD_INT 30
26374: PUSH
26375: LD_INT 80
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: LIST
26382: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26383: LD_VAR 0 6
26387: PPUSH
26388: CALL_OW 264
26392: PUSH
26393: LD_INT 22
26395: PUSH
26396: EMPTY
26397: LIST
26398: IN
26399: IFFALSE 26420
// points := [ 40 , 1 , 1 ] ;
26401: LD_ADDR_VAR 0 9
26405: PUSH
26406: LD_INT 40
26408: PUSH
26409: LD_INT 1
26411: PUSH
26412: LD_INT 1
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: LIST
26419: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26420: LD_VAR 0 6
26424: PPUSH
26425: CALL_OW 264
26429: PUSH
26430: LD_INT 29
26432: PUSH
26433: EMPTY
26434: LIST
26435: IN
26436: IFFALSE 26457
// points := [ 70 , 200 , 400 ] ;
26438: LD_ADDR_VAR 0 9
26442: PUSH
26443: LD_INT 70
26445: PUSH
26446: LD_INT 200
26448: PUSH
26449: LD_INT 400
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: LIST
26456: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26457: LD_VAR 0 6
26461: PPUSH
26462: CALL_OW 264
26466: PUSH
26467: LD_INT 14
26469: PUSH
26470: LD_INT 53
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: IN
26477: IFFALSE 26498
// points := [ 40 , 10 , 20 ] ;
26479: LD_ADDR_VAR 0 9
26483: PUSH
26484: LD_INT 40
26486: PUSH
26487: LD_INT 10
26489: PUSH
26490: LD_INT 20
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: LIST
26497: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26498: LD_VAR 0 6
26502: PPUSH
26503: CALL_OW 264
26507: PUSH
26508: LD_INT 9
26510: PUSH
26511: EMPTY
26512: LIST
26513: IN
26514: IFFALSE 26535
// points := [ 5 , 70 , 20 ] ;
26516: LD_ADDR_VAR 0 9
26520: PUSH
26521: LD_INT 5
26523: PUSH
26524: LD_INT 70
26526: PUSH
26527: LD_INT 20
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: LIST
26534: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
26535: LD_VAR 0 6
26539: PPUSH
26540: CALL_OW 264
26544: PUSH
26545: LD_INT 10
26547: PUSH
26548: EMPTY
26549: LIST
26550: IN
26551: IFFALSE 26572
// points := [ 35 , 110 , 70 ] ;
26553: LD_ADDR_VAR 0 9
26557: PUSH
26558: LD_INT 35
26560: PUSH
26561: LD_INT 110
26563: PUSH
26564: LD_INT 70
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: LIST
26571: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
26572: LD_VAR 0 6
26576: PPUSH
26577: CALL_OW 265
26581: PUSH
26582: LD_INT 25
26584: EQUAL
26585: IFFALSE 26606
// points := [ 80 , 65 , 100 ] ;
26587: LD_ADDR_VAR 0 9
26591: PUSH
26592: LD_INT 80
26594: PUSH
26595: LD_INT 65
26597: PUSH
26598: LD_INT 100
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: LIST
26605: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
26606: LD_VAR 0 6
26610: PPUSH
26611: CALL_OW 263
26615: PUSH
26616: LD_INT 1
26618: EQUAL
26619: IFFALSE 26654
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
26621: LD_ADDR_VAR 0 10
26625: PUSH
26626: LD_VAR 0 10
26630: PUSH
26631: LD_VAR 0 6
26635: PPUSH
26636: CALL_OW 311
26640: PPUSH
26641: LD_INT 3
26643: PPUSH
26644: CALL_OW 259
26648: PUSH
26649: LD_INT 4
26651: MUL
26652: MUL
26653: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
26654: LD_VAR 0 6
26658: PPUSH
26659: CALL_OW 263
26663: PUSH
26664: LD_INT 2
26666: EQUAL
26667: IFFALSE 26718
// begin j := IsControledBy ( i ) ;
26669: LD_ADDR_VAR 0 7
26673: PUSH
26674: LD_VAR 0 6
26678: PPUSH
26679: CALL_OW 312
26683: ST_TO_ADDR
// if j then
26684: LD_VAR 0 7
26688: IFFALSE 26718
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
26690: LD_ADDR_VAR 0 10
26694: PUSH
26695: LD_VAR 0 10
26699: PUSH
26700: LD_VAR 0 7
26704: PPUSH
26705: LD_INT 3
26707: PPUSH
26708: CALL_OW 259
26712: PUSH
26713: LD_INT 3
26715: MUL
26716: MUL
26717: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
26718: LD_VAR 0 6
26722: PPUSH
26723: CALL_OW 264
26727: PUSH
26728: LD_INT 5
26730: PUSH
26731: LD_INT 6
26733: PUSH
26734: LD_INT 46
26736: PUSH
26737: LD_INT 44
26739: PUSH
26740: LD_INT 47
26742: PUSH
26743: LD_INT 45
26745: PUSH
26746: LD_INT 28
26748: PUSH
26749: LD_INT 7
26751: PUSH
26752: LD_INT 27
26754: PUSH
26755: LD_INT 29
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: IN
26770: PUSH
26771: LD_VAR 0 1
26775: PPUSH
26776: LD_INT 52
26778: PPUSH
26779: CALL_OW 321
26783: PUSH
26784: LD_INT 2
26786: EQUAL
26787: AND
26788: IFFALSE 26805
// bpoints := bpoints * 1.2 ;
26790: LD_ADDR_VAR 0 10
26794: PUSH
26795: LD_VAR 0 10
26799: PUSH
26800: LD_REAL  1.20000000000000E+0000
26803: MUL
26804: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
26805: LD_VAR 0 6
26809: PPUSH
26810: CALL_OW 264
26814: PUSH
26815: LD_INT 6
26817: PUSH
26818: LD_INT 46
26820: PUSH
26821: LD_INT 47
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: LIST
26828: IN
26829: IFFALSE 26846
// bpoints := bpoints * 1.2 ;
26831: LD_ADDR_VAR 0 10
26835: PUSH
26836: LD_VAR 0 10
26840: PUSH
26841: LD_REAL  1.20000000000000E+0000
26844: MUL
26845: ST_TO_ADDR
// end ; unit_building :
26846: GO 26860
26848: LD_INT 3
26850: DOUBLE
26851: EQUAL
26852: IFTRUE 26856
26854: GO 26859
26856: POP
// ; end ;
26857: GO 26860
26859: POP
// for j = 1 to 3 do
26860: LD_ADDR_VAR 0 7
26864: PUSH
26865: DOUBLE
26866: LD_INT 1
26868: DEC
26869: ST_TO_ADDR
26870: LD_INT 3
26872: PUSH
26873: FOR_TO
26874: IFFALSE 26927
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
26876: LD_ADDR_VAR 0 5
26880: PUSH
26881: LD_VAR 0 5
26885: PPUSH
26886: LD_VAR 0 7
26890: PPUSH
26891: LD_VAR 0 5
26895: PUSH
26896: LD_VAR 0 7
26900: ARRAY
26901: PUSH
26902: LD_VAR 0 9
26906: PUSH
26907: LD_VAR 0 7
26911: ARRAY
26912: PUSH
26913: LD_VAR 0 10
26917: MUL
26918: PLUS
26919: PPUSH
26920: CALL_OW 1
26924: ST_TO_ADDR
26925: GO 26873
26927: POP
26928: POP
// end ;
26929: GO 25406
26931: POP
26932: POP
// result := Replace ( result , 4 , tmp ) ;
26933: LD_ADDR_VAR 0 5
26937: PUSH
26938: LD_VAR 0 5
26942: PPUSH
26943: LD_INT 4
26945: PPUSH
26946: LD_VAR 0 8
26950: PPUSH
26951: CALL_OW 1
26955: ST_TO_ADDR
// end ;
26956: LD_VAR 0 5
26960: RET
// export function DangerAtRange ( unit , range ) ; begin
26961: LD_INT 0
26963: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
26964: LD_ADDR_VAR 0 3
26968: PUSH
26969: LD_VAR 0 1
26973: PPUSH
26974: CALL_OW 255
26978: PPUSH
26979: LD_VAR 0 1
26983: PPUSH
26984: CALL_OW 250
26988: PPUSH
26989: LD_VAR 0 1
26993: PPUSH
26994: CALL_OW 251
26998: PPUSH
26999: LD_VAR 0 2
27003: PPUSH
27004: CALL 25258 0 4
27008: ST_TO_ADDR
// end ;
27009: LD_VAR 0 3
27013: RET
// export function DangerInArea ( side , area ) ; begin
27014: LD_INT 0
27016: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
27017: LD_ADDR_VAR 0 3
27021: PUSH
27022: LD_VAR 0 2
27026: PPUSH
27027: LD_INT 81
27029: PUSH
27030: LD_VAR 0 1
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PPUSH
27039: CALL_OW 70
27043: ST_TO_ADDR
// end ;
27044: LD_VAR 0 3
27048: RET
// export function IsExtension ( b ) ; begin
27049: LD_INT 0
27051: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
27052: LD_ADDR_VAR 0 2
27056: PUSH
27057: LD_VAR 0 1
27061: PUSH
27062: LD_INT 23
27064: PUSH
27065: LD_INT 20
27067: PUSH
27068: LD_INT 22
27070: PUSH
27071: LD_INT 17
27073: PUSH
27074: LD_INT 24
27076: PUSH
27077: LD_INT 21
27079: PUSH
27080: LD_INT 19
27082: PUSH
27083: LD_INT 16
27085: PUSH
27086: LD_INT 25
27088: PUSH
27089: LD_INT 18
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: IN
27104: ST_TO_ADDR
// end ;
27105: LD_VAR 0 2
27109: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
27110: LD_INT 0
27112: PPUSH
27113: PPUSH
27114: PPUSH
// result := [ ] ;
27115: LD_ADDR_VAR 0 4
27119: PUSH
27120: EMPTY
27121: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27122: LD_ADDR_VAR 0 5
27126: PUSH
27127: LD_VAR 0 2
27131: PPUSH
27132: LD_INT 21
27134: PUSH
27135: LD_INT 3
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PPUSH
27142: CALL_OW 70
27146: ST_TO_ADDR
// if not tmp then
27147: LD_VAR 0 5
27151: NOT
27152: IFFALSE 27156
// exit ;
27154: GO 27220
// if checkLink then
27156: LD_VAR 0 3
27160: IFFALSE 27210
// begin for i in tmp do
27162: LD_ADDR_VAR 0 6
27166: PUSH
27167: LD_VAR 0 5
27171: PUSH
27172: FOR_IN
27173: IFFALSE 27208
// if GetBase ( i ) <> base then
27175: LD_VAR 0 6
27179: PPUSH
27180: CALL_OW 274
27184: PUSH
27185: LD_VAR 0 1
27189: NONEQUAL
27190: IFFALSE 27206
// ComLinkToBase ( base , i ) ;
27192: LD_VAR 0 1
27196: PPUSH
27197: LD_VAR 0 6
27201: PPUSH
27202: CALL_OW 169
27206: GO 27172
27208: POP
27209: POP
// end ; result := tmp ;
27210: LD_ADDR_VAR 0 4
27214: PUSH
27215: LD_VAR 0 5
27219: ST_TO_ADDR
// end ;
27220: LD_VAR 0 4
27224: RET
// export function ComComplete ( units , b ) ; var i ; begin
27225: LD_INT 0
27227: PPUSH
27228: PPUSH
// if not units then
27229: LD_VAR 0 1
27233: NOT
27234: IFFALSE 27238
// exit ;
27236: GO 27328
// for i in units do
27238: LD_ADDR_VAR 0 4
27242: PUSH
27243: LD_VAR 0 1
27247: PUSH
27248: FOR_IN
27249: IFFALSE 27326
// if BuildingStatus ( b ) = bs_build then
27251: LD_VAR 0 2
27255: PPUSH
27256: CALL_OW 461
27260: PUSH
27261: LD_INT 1
27263: EQUAL
27264: IFFALSE 27324
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27266: LD_VAR 0 4
27270: PPUSH
27271: LD_STRING h
27273: PUSH
27274: LD_VAR 0 2
27278: PPUSH
27279: CALL_OW 250
27283: PUSH
27284: LD_VAR 0 2
27288: PPUSH
27289: CALL_OW 251
27293: PUSH
27294: LD_VAR 0 2
27298: PUSH
27299: LD_INT 0
27301: PUSH
27302: LD_INT 0
27304: PUSH
27305: LD_INT 0
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: PUSH
27317: EMPTY
27318: LIST
27319: PPUSH
27320: CALL_OW 446
27324: GO 27248
27326: POP
27327: POP
// end ;
27328: LD_VAR 0 3
27332: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27333: LD_INT 0
27335: PPUSH
27336: PPUSH
27337: PPUSH
27338: PPUSH
27339: PPUSH
27340: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
27341: LD_VAR 0 1
27345: NOT
27346: PUSH
27347: LD_VAR 0 1
27351: PPUSH
27352: CALL_OW 263
27356: PUSH
27357: LD_INT 2
27359: EQUAL
27360: NOT
27361: OR
27362: IFFALSE 27366
// exit ;
27364: GO 27682
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27366: LD_ADDR_VAR 0 6
27370: PUSH
27371: LD_INT 22
27373: PUSH
27374: LD_VAR 0 1
27378: PPUSH
27379: CALL_OW 255
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 2
27390: PUSH
27391: LD_INT 30
27393: PUSH
27394: LD_INT 36
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 34
27403: PUSH
27404: LD_INT 31
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: LIST
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PPUSH
27420: CALL_OW 69
27424: ST_TO_ADDR
// if not tmp then
27425: LD_VAR 0 6
27429: NOT
27430: IFFALSE 27434
// exit ;
27432: GO 27682
// result := [ ] ;
27434: LD_ADDR_VAR 0 2
27438: PUSH
27439: EMPTY
27440: ST_TO_ADDR
// for i in tmp do
27441: LD_ADDR_VAR 0 3
27445: PUSH
27446: LD_VAR 0 6
27450: PUSH
27451: FOR_IN
27452: IFFALSE 27523
// begin t := UnitsInside ( i ) ;
27454: LD_ADDR_VAR 0 4
27458: PUSH
27459: LD_VAR 0 3
27463: PPUSH
27464: CALL_OW 313
27468: ST_TO_ADDR
// if t then
27469: LD_VAR 0 4
27473: IFFALSE 27521
// for j in t do
27475: LD_ADDR_VAR 0 7
27479: PUSH
27480: LD_VAR 0 4
27484: PUSH
27485: FOR_IN
27486: IFFALSE 27519
// result := Insert ( result , result + 1 , j ) ;
27488: LD_ADDR_VAR 0 2
27492: PUSH
27493: LD_VAR 0 2
27497: PPUSH
27498: LD_VAR 0 2
27502: PUSH
27503: LD_INT 1
27505: PLUS
27506: PPUSH
27507: LD_VAR 0 7
27511: PPUSH
27512: CALL_OW 2
27516: ST_TO_ADDR
27517: GO 27485
27519: POP
27520: POP
// end ;
27521: GO 27451
27523: POP
27524: POP
// if not result then
27525: LD_VAR 0 2
27529: NOT
27530: IFFALSE 27534
// exit ;
27532: GO 27682
// mech := result [ 1 ] ;
27534: LD_ADDR_VAR 0 5
27538: PUSH
27539: LD_VAR 0 2
27543: PUSH
27544: LD_INT 1
27546: ARRAY
27547: ST_TO_ADDR
// if result > 1 then
27548: LD_VAR 0 2
27552: PUSH
27553: LD_INT 1
27555: GREATER
27556: IFFALSE 27668
// for i = 2 to result do
27558: LD_ADDR_VAR 0 3
27562: PUSH
27563: DOUBLE
27564: LD_INT 2
27566: DEC
27567: ST_TO_ADDR
27568: LD_VAR 0 2
27572: PUSH
27573: FOR_TO
27574: IFFALSE 27666
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
27576: LD_ADDR_VAR 0 4
27580: PUSH
27581: LD_VAR 0 2
27585: PUSH
27586: LD_VAR 0 3
27590: ARRAY
27591: PPUSH
27592: LD_INT 3
27594: PPUSH
27595: CALL_OW 259
27599: PUSH
27600: LD_VAR 0 2
27604: PUSH
27605: LD_VAR 0 3
27609: ARRAY
27610: PPUSH
27611: CALL_OW 432
27615: MINUS
27616: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
27617: LD_VAR 0 4
27621: PUSH
27622: LD_VAR 0 5
27626: PPUSH
27627: LD_INT 3
27629: PPUSH
27630: CALL_OW 259
27634: PUSH
27635: LD_VAR 0 5
27639: PPUSH
27640: CALL_OW 432
27644: MINUS
27645: GREATEREQUAL
27646: IFFALSE 27664
// mech := result [ i ] ;
27648: LD_ADDR_VAR 0 5
27652: PUSH
27653: LD_VAR 0 2
27657: PUSH
27658: LD_VAR 0 3
27662: ARRAY
27663: ST_TO_ADDR
// end ;
27664: GO 27573
27666: POP
27667: POP
// ComLinkTo ( vehicle , mech ) ;
27668: LD_VAR 0 1
27672: PPUSH
27673: LD_VAR 0 5
27677: PPUSH
27678: CALL_OW 135
// end ;
27682: LD_VAR 0 2
27686: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
27687: LD_INT 0
27689: PPUSH
27690: PPUSH
27691: PPUSH
27692: PPUSH
27693: PPUSH
27694: PPUSH
27695: PPUSH
27696: PPUSH
27697: PPUSH
27698: PPUSH
27699: PPUSH
27700: PPUSH
27701: PPUSH
// result := [ ] ;
27702: LD_ADDR_VAR 0 7
27706: PUSH
27707: EMPTY
27708: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
27709: LD_VAR 0 1
27713: PPUSH
27714: CALL_OW 266
27718: PUSH
27719: LD_INT 0
27721: PUSH
27722: LD_INT 1
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: IN
27729: NOT
27730: IFFALSE 27734
// exit ;
27732: GO 29368
// if name then
27734: LD_VAR 0 3
27738: IFFALSE 27754
// SetBName ( base_dep , name ) ;
27740: LD_VAR 0 1
27744: PPUSH
27745: LD_VAR 0 3
27749: PPUSH
27750: CALL_OW 500
// base := GetBase ( base_dep ) ;
27754: LD_ADDR_VAR 0 15
27758: PUSH
27759: LD_VAR 0 1
27763: PPUSH
27764: CALL_OW 274
27768: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
27769: LD_ADDR_VAR 0 16
27773: PUSH
27774: LD_VAR 0 1
27778: PPUSH
27779: CALL_OW 255
27783: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
27784: LD_ADDR_VAR 0 17
27788: PUSH
27789: LD_VAR 0 1
27793: PPUSH
27794: CALL_OW 248
27798: ST_TO_ADDR
// if sources then
27799: LD_VAR 0 5
27803: IFFALSE 27850
// for i = 1 to 3 do
27805: LD_ADDR_VAR 0 8
27809: PUSH
27810: DOUBLE
27811: LD_INT 1
27813: DEC
27814: ST_TO_ADDR
27815: LD_INT 3
27817: PUSH
27818: FOR_TO
27819: IFFALSE 27848
// AddResourceType ( base , i , sources [ i ] ) ;
27821: LD_VAR 0 15
27825: PPUSH
27826: LD_VAR 0 8
27830: PPUSH
27831: LD_VAR 0 5
27835: PUSH
27836: LD_VAR 0 8
27840: ARRAY
27841: PPUSH
27842: CALL_OW 276
27846: GO 27818
27848: POP
27849: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
27850: LD_ADDR_VAR 0 18
27854: PUSH
27855: LD_VAR 0 15
27859: PPUSH
27860: LD_VAR 0 2
27864: PPUSH
27865: LD_INT 1
27867: PPUSH
27868: CALL 27110 0 3
27872: ST_TO_ADDR
// InitHc ;
27873: CALL_OW 19
// InitUc ;
27877: CALL_OW 18
// uc_side := side ;
27881: LD_ADDR_OWVAR 20
27885: PUSH
27886: LD_VAR 0 16
27890: ST_TO_ADDR
// uc_nation := nation ;
27891: LD_ADDR_OWVAR 21
27895: PUSH
27896: LD_VAR 0 17
27900: ST_TO_ADDR
// if buildings then
27901: LD_VAR 0 18
27905: IFFALSE 29227
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
27907: LD_ADDR_VAR 0 19
27911: PUSH
27912: LD_VAR 0 18
27916: PPUSH
27917: LD_INT 2
27919: PUSH
27920: LD_INT 30
27922: PUSH
27923: LD_INT 29
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PUSH
27930: LD_INT 30
27932: PUSH
27933: LD_INT 30
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: LIST
27944: PPUSH
27945: CALL_OW 72
27949: ST_TO_ADDR
// if tmp then
27950: LD_VAR 0 19
27954: IFFALSE 28002
// for i in tmp do
27956: LD_ADDR_VAR 0 8
27960: PUSH
27961: LD_VAR 0 19
27965: PUSH
27966: FOR_IN
27967: IFFALSE 28000
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
27969: LD_VAR 0 8
27973: PPUSH
27974: CALL_OW 250
27978: PPUSH
27979: LD_VAR 0 8
27983: PPUSH
27984: CALL_OW 251
27988: PPUSH
27989: LD_VAR 0 16
27993: PPUSH
27994: CALL_OW 441
27998: GO 27966
28000: POP
28001: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28002: LD_VAR 0 18
28006: PPUSH
28007: LD_INT 2
28009: PUSH
28010: LD_INT 30
28012: PUSH
28013: LD_INT 32
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 30
28022: PUSH
28023: LD_INT 33
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: LIST
28034: PPUSH
28035: CALL_OW 72
28039: IFFALSE 28127
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28041: LD_ADDR_VAR 0 8
28045: PUSH
28046: LD_VAR 0 18
28050: PPUSH
28051: LD_INT 2
28053: PUSH
28054: LD_INT 30
28056: PUSH
28057: LD_INT 32
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: LD_INT 30
28066: PUSH
28067: LD_INT 33
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: LIST
28078: PPUSH
28079: CALL_OW 72
28083: PUSH
28084: FOR_IN
28085: IFFALSE 28125
// begin if not GetBWeapon ( i ) then
28087: LD_VAR 0 8
28091: PPUSH
28092: CALL_OW 269
28096: NOT
28097: IFFALSE 28123
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
28099: LD_VAR 0 8
28103: PPUSH
28104: LD_VAR 0 8
28108: PPUSH
28109: LD_VAR 0 2
28113: PPUSH
28114: CALL 29373 0 2
28118: PPUSH
28119: CALL_OW 431
// end ;
28123: GO 28084
28125: POP
28126: POP
// end ; for i = 1 to personel do
28127: LD_ADDR_VAR 0 8
28131: PUSH
28132: DOUBLE
28133: LD_INT 1
28135: DEC
28136: ST_TO_ADDR
28137: LD_VAR 0 6
28141: PUSH
28142: FOR_TO
28143: IFFALSE 29207
// begin if i > 4 then
28145: LD_VAR 0 8
28149: PUSH
28150: LD_INT 4
28152: GREATER
28153: IFFALSE 28157
// break ;
28155: GO 29207
// case i of 1 :
28157: LD_VAR 0 8
28161: PUSH
28162: LD_INT 1
28164: DOUBLE
28165: EQUAL
28166: IFTRUE 28170
28168: GO 28250
28170: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28171: LD_ADDR_VAR 0 12
28175: PUSH
28176: LD_VAR 0 18
28180: PPUSH
28181: LD_INT 22
28183: PUSH
28184: LD_VAR 0 16
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 58
28195: PUSH
28196: EMPTY
28197: LIST
28198: PUSH
28199: LD_INT 2
28201: PUSH
28202: LD_INT 30
28204: PUSH
28205: LD_INT 32
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: LD_INT 30
28214: PUSH
28215: LD_INT 4
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 30
28224: PUSH
28225: LD_INT 5
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: LIST
28242: PPUSH
28243: CALL_OW 72
28247: ST_TO_ADDR
28248: GO 28472
28250: LD_INT 2
28252: DOUBLE
28253: EQUAL
28254: IFTRUE 28258
28256: GO 28320
28258: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28259: LD_ADDR_VAR 0 12
28263: PUSH
28264: LD_VAR 0 18
28268: PPUSH
28269: LD_INT 22
28271: PUSH
28272: LD_VAR 0 16
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: LD_INT 2
28283: PUSH
28284: LD_INT 30
28286: PUSH
28287: LD_INT 0
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: LD_INT 30
28296: PUSH
28297: LD_INT 1
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: LIST
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PPUSH
28313: CALL_OW 72
28317: ST_TO_ADDR
28318: GO 28472
28320: LD_INT 3
28322: DOUBLE
28323: EQUAL
28324: IFTRUE 28328
28326: GO 28390
28328: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28329: LD_ADDR_VAR 0 12
28333: PUSH
28334: LD_VAR 0 18
28338: PPUSH
28339: LD_INT 22
28341: PUSH
28342: LD_VAR 0 16
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 2
28353: PUSH
28354: LD_INT 30
28356: PUSH
28357: LD_INT 2
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 30
28366: PUSH
28367: LD_INT 3
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: LIST
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PPUSH
28383: CALL_OW 72
28387: ST_TO_ADDR
28388: GO 28472
28390: LD_INT 4
28392: DOUBLE
28393: EQUAL
28394: IFTRUE 28398
28396: GO 28471
28398: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28399: LD_ADDR_VAR 0 12
28403: PUSH
28404: LD_VAR 0 18
28408: PPUSH
28409: LD_INT 22
28411: PUSH
28412: LD_VAR 0 16
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 2
28423: PUSH
28424: LD_INT 30
28426: PUSH
28427: LD_INT 6
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 30
28436: PUSH
28437: LD_INT 7
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PUSH
28444: LD_INT 30
28446: PUSH
28447: LD_INT 8
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PPUSH
28464: CALL_OW 72
28468: ST_TO_ADDR
28469: GO 28472
28471: POP
// if i = 1 then
28472: LD_VAR 0 8
28476: PUSH
28477: LD_INT 1
28479: EQUAL
28480: IFFALSE 28591
// begin tmp := [ ] ;
28482: LD_ADDR_VAR 0 19
28486: PUSH
28487: EMPTY
28488: ST_TO_ADDR
// for j in f do
28489: LD_ADDR_VAR 0 9
28493: PUSH
28494: LD_VAR 0 12
28498: PUSH
28499: FOR_IN
28500: IFFALSE 28573
// if GetBType ( j ) = b_bunker then
28502: LD_VAR 0 9
28506: PPUSH
28507: CALL_OW 266
28511: PUSH
28512: LD_INT 32
28514: EQUAL
28515: IFFALSE 28542
// tmp := Insert ( tmp , 1 , j ) else
28517: LD_ADDR_VAR 0 19
28521: PUSH
28522: LD_VAR 0 19
28526: PPUSH
28527: LD_INT 1
28529: PPUSH
28530: LD_VAR 0 9
28534: PPUSH
28535: CALL_OW 2
28539: ST_TO_ADDR
28540: GO 28571
// tmp := Insert ( tmp , tmp + 1 , j ) ;
28542: LD_ADDR_VAR 0 19
28546: PUSH
28547: LD_VAR 0 19
28551: PPUSH
28552: LD_VAR 0 19
28556: PUSH
28557: LD_INT 1
28559: PLUS
28560: PPUSH
28561: LD_VAR 0 9
28565: PPUSH
28566: CALL_OW 2
28570: ST_TO_ADDR
28571: GO 28499
28573: POP
28574: POP
// if tmp then
28575: LD_VAR 0 19
28579: IFFALSE 28591
// f := tmp ;
28581: LD_ADDR_VAR 0 12
28585: PUSH
28586: LD_VAR 0 19
28590: ST_TO_ADDR
// end ; x := personel [ i ] ;
28591: LD_ADDR_VAR 0 13
28595: PUSH
28596: LD_VAR 0 6
28600: PUSH
28601: LD_VAR 0 8
28605: ARRAY
28606: ST_TO_ADDR
// if x = - 1 then
28607: LD_VAR 0 13
28611: PUSH
28612: LD_INT 1
28614: NEG
28615: EQUAL
28616: IFFALSE 28825
// begin for j in f do
28618: LD_ADDR_VAR 0 9
28622: PUSH
28623: LD_VAR 0 12
28627: PUSH
28628: FOR_IN
28629: IFFALSE 28821
// repeat InitHc ;
28631: CALL_OW 19
// if GetBType ( j ) = b_barracks then
28635: LD_VAR 0 9
28639: PPUSH
28640: CALL_OW 266
28644: PUSH
28645: LD_INT 5
28647: EQUAL
28648: IFFALSE 28718
// begin if UnitsInside ( j ) < 3 then
28650: LD_VAR 0 9
28654: PPUSH
28655: CALL_OW 313
28659: PUSH
28660: LD_INT 3
28662: LESS
28663: IFFALSE 28699
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28665: LD_INT 0
28667: PPUSH
28668: LD_INT 5
28670: PUSH
28671: LD_INT 8
28673: PUSH
28674: LD_INT 9
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: LIST
28681: PUSH
28682: LD_VAR 0 17
28686: ARRAY
28687: PPUSH
28688: LD_VAR 0 4
28692: PPUSH
28693: CALL_OW 380
28697: GO 28716
// PrepareHuman ( false , i , skill ) ;
28699: LD_INT 0
28701: PPUSH
28702: LD_VAR 0 8
28706: PPUSH
28707: LD_VAR 0 4
28711: PPUSH
28712: CALL_OW 380
// end else
28716: GO 28735
// PrepareHuman ( false , i , skill ) ;
28718: LD_INT 0
28720: PPUSH
28721: LD_VAR 0 8
28725: PPUSH
28726: LD_VAR 0 4
28730: PPUSH
28731: CALL_OW 380
// un := CreateHuman ;
28735: LD_ADDR_VAR 0 14
28739: PUSH
28740: CALL_OW 44
28744: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28745: LD_ADDR_VAR 0 7
28749: PUSH
28750: LD_VAR 0 7
28754: PPUSH
28755: LD_INT 1
28757: PPUSH
28758: LD_VAR 0 14
28762: PPUSH
28763: CALL_OW 2
28767: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
28768: LD_VAR 0 14
28772: PPUSH
28773: LD_VAR 0 9
28777: PPUSH
28778: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
28782: LD_VAR 0 9
28786: PPUSH
28787: CALL_OW 313
28791: PUSH
28792: LD_INT 6
28794: EQUAL
28795: PUSH
28796: LD_VAR 0 9
28800: PPUSH
28801: CALL_OW 266
28805: PUSH
28806: LD_INT 32
28808: PUSH
28809: LD_INT 31
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: IN
28816: OR
28817: IFFALSE 28631
28819: GO 28628
28821: POP
28822: POP
// end else
28823: GO 29205
// for j = 1 to x do
28825: LD_ADDR_VAR 0 9
28829: PUSH
28830: DOUBLE
28831: LD_INT 1
28833: DEC
28834: ST_TO_ADDR
28835: LD_VAR 0 13
28839: PUSH
28840: FOR_TO
28841: IFFALSE 29203
// begin InitHc ;
28843: CALL_OW 19
// if not f then
28847: LD_VAR 0 12
28851: NOT
28852: IFFALSE 28941
// begin PrepareHuman ( false , i , skill ) ;
28854: LD_INT 0
28856: PPUSH
28857: LD_VAR 0 8
28861: PPUSH
28862: LD_VAR 0 4
28866: PPUSH
28867: CALL_OW 380
// un := CreateHuman ;
28871: LD_ADDR_VAR 0 14
28875: PUSH
28876: CALL_OW 44
28880: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28881: LD_ADDR_VAR 0 7
28885: PUSH
28886: LD_VAR 0 7
28890: PPUSH
28891: LD_INT 1
28893: PPUSH
28894: LD_VAR 0 14
28898: PPUSH
28899: CALL_OW 2
28903: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
28904: LD_VAR 0 14
28908: PPUSH
28909: LD_VAR 0 1
28913: PPUSH
28914: CALL_OW 250
28918: PPUSH
28919: LD_VAR 0 1
28923: PPUSH
28924: CALL_OW 251
28928: PPUSH
28929: LD_INT 10
28931: PPUSH
28932: LD_INT 0
28934: PPUSH
28935: CALL_OW 50
// continue ;
28939: GO 28840
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
28941: LD_VAR 0 12
28945: PUSH
28946: LD_INT 1
28948: ARRAY
28949: PPUSH
28950: CALL_OW 313
28954: PUSH
28955: LD_VAR 0 12
28959: PUSH
28960: LD_INT 1
28962: ARRAY
28963: PPUSH
28964: CALL_OW 266
28968: PUSH
28969: LD_INT 32
28971: PUSH
28972: LD_INT 31
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: IN
28979: AND
28980: PUSH
28981: LD_VAR 0 12
28985: PUSH
28986: LD_INT 1
28988: ARRAY
28989: PPUSH
28990: CALL_OW 313
28994: PUSH
28995: LD_INT 6
28997: EQUAL
28998: OR
28999: IFFALSE 29019
// f := Delete ( f , 1 ) ;
29001: LD_ADDR_VAR 0 12
29005: PUSH
29006: LD_VAR 0 12
29010: PPUSH
29011: LD_INT 1
29013: PPUSH
29014: CALL_OW 3
29018: ST_TO_ADDR
// if not f then
29019: LD_VAR 0 12
29023: NOT
29024: IFFALSE 29042
// begin x := x + 2 ;
29026: LD_ADDR_VAR 0 13
29030: PUSH
29031: LD_VAR 0 13
29035: PUSH
29036: LD_INT 2
29038: PLUS
29039: ST_TO_ADDR
// continue ;
29040: GO 28840
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29042: LD_VAR 0 12
29046: PUSH
29047: LD_INT 1
29049: ARRAY
29050: PPUSH
29051: CALL_OW 266
29055: PUSH
29056: LD_INT 5
29058: EQUAL
29059: IFFALSE 29133
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29061: LD_VAR 0 12
29065: PUSH
29066: LD_INT 1
29068: ARRAY
29069: PPUSH
29070: CALL_OW 313
29074: PUSH
29075: LD_INT 3
29077: LESS
29078: IFFALSE 29114
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29080: LD_INT 0
29082: PPUSH
29083: LD_INT 5
29085: PUSH
29086: LD_INT 8
29088: PUSH
29089: LD_INT 9
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: LIST
29096: PUSH
29097: LD_VAR 0 17
29101: ARRAY
29102: PPUSH
29103: LD_VAR 0 4
29107: PPUSH
29108: CALL_OW 380
29112: GO 29131
// PrepareHuman ( false , i , skill ) ;
29114: LD_INT 0
29116: PPUSH
29117: LD_VAR 0 8
29121: PPUSH
29122: LD_VAR 0 4
29126: PPUSH
29127: CALL_OW 380
// end else
29131: GO 29150
// PrepareHuman ( false , i , skill ) ;
29133: LD_INT 0
29135: PPUSH
29136: LD_VAR 0 8
29140: PPUSH
29141: LD_VAR 0 4
29145: PPUSH
29146: CALL_OW 380
// un := CreateHuman ;
29150: LD_ADDR_VAR 0 14
29154: PUSH
29155: CALL_OW 44
29159: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29160: LD_ADDR_VAR 0 7
29164: PUSH
29165: LD_VAR 0 7
29169: PPUSH
29170: LD_INT 1
29172: PPUSH
29173: LD_VAR 0 14
29177: PPUSH
29178: CALL_OW 2
29182: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29183: LD_VAR 0 14
29187: PPUSH
29188: LD_VAR 0 12
29192: PUSH
29193: LD_INT 1
29195: ARRAY
29196: PPUSH
29197: CALL_OW 52
// end ;
29201: GO 28840
29203: POP
29204: POP
// end ;
29205: GO 28142
29207: POP
29208: POP
// result := result ^ buildings ;
29209: LD_ADDR_VAR 0 7
29213: PUSH
29214: LD_VAR 0 7
29218: PUSH
29219: LD_VAR 0 18
29223: ADD
29224: ST_TO_ADDR
// end else
29225: GO 29368
// begin for i = 1 to personel do
29227: LD_ADDR_VAR 0 8
29231: PUSH
29232: DOUBLE
29233: LD_INT 1
29235: DEC
29236: ST_TO_ADDR
29237: LD_VAR 0 6
29241: PUSH
29242: FOR_TO
29243: IFFALSE 29366
// begin if i > 4 then
29245: LD_VAR 0 8
29249: PUSH
29250: LD_INT 4
29252: GREATER
29253: IFFALSE 29257
// break ;
29255: GO 29366
// x := personel [ i ] ;
29257: LD_ADDR_VAR 0 13
29261: PUSH
29262: LD_VAR 0 6
29266: PUSH
29267: LD_VAR 0 8
29271: ARRAY
29272: ST_TO_ADDR
// if x = - 1 then
29273: LD_VAR 0 13
29277: PUSH
29278: LD_INT 1
29280: NEG
29281: EQUAL
29282: IFFALSE 29286
// continue ;
29284: GO 29242
// PrepareHuman ( false , i , skill ) ;
29286: LD_INT 0
29288: PPUSH
29289: LD_VAR 0 8
29293: PPUSH
29294: LD_VAR 0 4
29298: PPUSH
29299: CALL_OW 380
// un := CreateHuman ;
29303: LD_ADDR_VAR 0 14
29307: PUSH
29308: CALL_OW 44
29312: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29313: LD_VAR 0 14
29317: PPUSH
29318: LD_VAR 0 1
29322: PPUSH
29323: CALL_OW 250
29327: PPUSH
29328: LD_VAR 0 1
29332: PPUSH
29333: CALL_OW 251
29337: PPUSH
29338: LD_INT 10
29340: PPUSH
29341: LD_INT 0
29343: PPUSH
29344: CALL_OW 50
// result := result ^ un ;
29348: LD_ADDR_VAR 0 7
29352: PUSH
29353: LD_VAR 0 7
29357: PUSH
29358: LD_VAR 0 14
29362: ADD
29363: ST_TO_ADDR
// end ;
29364: GO 29242
29366: POP
29367: POP
// end ; end ;
29368: LD_VAR 0 7
29372: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29373: LD_INT 0
29375: PPUSH
29376: PPUSH
29377: PPUSH
29378: PPUSH
29379: PPUSH
29380: PPUSH
29381: PPUSH
29382: PPUSH
29383: PPUSH
29384: PPUSH
29385: PPUSH
29386: PPUSH
29387: PPUSH
29388: PPUSH
29389: PPUSH
29390: PPUSH
// result := false ;
29391: LD_ADDR_VAR 0 3
29395: PUSH
29396: LD_INT 0
29398: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29399: LD_VAR 0 1
29403: NOT
29404: PUSH
29405: LD_VAR 0 1
29409: PPUSH
29410: CALL_OW 266
29414: PUSH
29415: LD_INT 32
29417: PUSH
29418: LD_INT 33
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: IN
29425: NOT
29426: OR
29427: IFFALSE 29431
// exit ;
29429: GO 30540
// nat := GetNation ( tower ) ;
29431: LD_ADDR_VAR 0 12
29435: PUSH
29436: LD_VAR 0 1
29440: PPUSH
29441: CALL_OW 248
29445: ST_TO_ADDR
// side := GetSide ( tower ) ;
29446: LD_ADDR_VAR 0 16
29450: PUSH
29451: LD_VAR 0 1
29455: PPUSH
29456: CALL_OW 255
29460: ST_TO_ADDR
// x := GetX ( tower ) ;
29461: LD_ADDR_VAR 0 10
29465: PUSH
29466: LD_VAR 0 1
29470: PPUSH
29471: CALL_OW 250
29475: ST_TO_ADDR
// y := GetY ( tower ) ;
29476: LD_ADDR_VAR 0 11
29480: PUSH
29481: LD_VAR 0 1
29485: PPUSH
29486: CALL_OW 251
29490: ST_TO_ADDR
// if not x or not y then
29491: LD_VAR 0 10
29495: NOT
29496: PUSH
29497: LD_VAR 0 11
29501: NOT
29502: OR
29503: IFFALSE 29507
// exit ;
29505: GO 30540
// weapon := 0 ;
29507: LD_ADDR_VAR 0 18
29511: PUSH
29512: LD_INT 0
29514: ST_TO_ADDR
// fac_list := [ ] ;
29515: LD_ADDR_VAR 0 17
29519: PUSH
29520: EMPTY
29521: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
29522: LD_ADDR_VAR 0 6
29526: PUSH
29527: LD_VAR 0 1
29531: PPUSH
29532: CALL_OW 274
29536: PPUSH
29537: LD_VAR 0 2
29541: PPUSH
29542: LD_INT 0
29544: PPUSH
29545: CALL 27110 0 3
29549: PPUSH
29550: LD_INT 30
29552: PUSH
29553: LD_INT 3
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PPUSH
29560: CALL_OW 72
29564: ST_TO_ADDR
// if not factories then
29565: LD_VAR 0 6
29569: NOT
29570: IFFALSE 29574
// exit ;
29572: GO 30540
// for i in factories do
29574: LD_ADDR_VAR 0 8
29578: PUSH
29579: LD_VAR 0 6
29583: PUSH
29584: FOR_IN
29585: IFFALSE 29610
// fac_list := fac_list union AvailableWeaponList ( i ) ;
29587: LD_ADDR_VAR 0 17
29591: PUSH
29592: LD_VAR 0 17
29596: PUSH
29597: LD_VAR 0 8
29601: PPUSH
29602: CALL_OW 478
29606: UNION
29607: ST_TO_ADDR
29608: GO 29584
29610: POP
29611: POP
// if not fac_list then
29612: LD_VAR 0 17
29616: NOT
29617: IFFALSE 29621
// exit ;
29619: GO 30540
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
29621: LD_ADDR_VAR 0 5
29625: PUSH
29626: LD_INT 4
29628: PUSH
29629: LD_INT 5
29631: PUSH
29632: LD_INT 9
29634: PUSH
29635: LD_INT 10
29637: PUSH
29638: LD_INT 6
29640: PUSH
29641: LD_INT 7
29643: PUSH
29644: LD_INT 11
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: PUSH
29656: LD_INT 27
29658: PUSH
29659: LD_INT 28
29661: PUSH
29662: LD_INT 26
29664: PUSH
29665: LD_INT 30
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 43
29676: PUSH
29677: LD_INT 44
29679: PUSH
29680: LD_INT 46
29682: PUSH
29683: LD_INT 45
29685: PUSH
29686: LD_INT 47
29688: PUSH
29689: LD_INT 49
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: LIST
29704: PUSH
29705: LD_VAR 0 12
29709: ARRAY
29710: ST_TO_ADDR
// list := list isect fac_list ;
29711: LD_ADDR_VAR 0 5
29715: PUSH
29716: LD_VAR 0 5
29720: PUSH
29721: LD_VAR 0 17
29725: ISECT
29726: ST_TO_ADDR
// if not list then
29727: LD_VAR 0 5
29731: NOT
29732: IFFALSE 29736
// exit ;
29734: GO 30540
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
29736: LD_VAR 0 12
29740: PUSH
29741: LD_INT 3
29743: EQUAL
29744: PUSH
29745: LD_INT 49
29747: PUSH
29748: LD_VAR 0 5
29752: IN
29753: AND
29754: PUSH
29755: LD_INT 31
29757: PPUSH
29758: LD_VAR 0 16
29762: PPUSH
29763: CALL_OW 321
29767: PUSH
29768: LD_INT 2
29770: EQUAL
29771: AND
29772: IFFALSE 29832
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
29774: LD_INT 22
29776: PUSH
29777: LD_VAR 0 16
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 35
29788: PUSH
29789: LD_INT 49
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 91
29798: PUSH
29799: LD_VAR 0 1
29803: PUSH
29804: LD_INT 10
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: LIST
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: LIST
29816: PPUSH
29817: CALL_OW 69
29821: NOT
29822: IFFALSE 29832
// weapon := ru_time_lapser ;
29824: LD_ADDR_VAR 0 18
29828: PUSH
29829: LD_INT 49
29831: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
29832: LD_VAR 0 12
29836: PUSH
29837: LD_INT 1
29839: PUSH
29840: LD_INT 2
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: IN
29847: PUSH
29848: LD_INT 11
29850: PUSH
29851: LD_VAR 0 5
29855: IN
29856: PUSH
29857: LD_INT 30
29859: PUSH
29860: LD_VAR 0 5
29864: IN
29865: OR
29866: AND
29867: PUSH
29868: LD_INT 6
29870: PPUSH
29871: LD_VAR 0 16
29875: PPUSH
29876: CALL_OW 321
29880: PUSH
29881: LD_INT 2
29883: EQUAL
29884: AND
29885: IFFALSE 30050
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
29887: LD_INT 22
29889: PUSH
29890: LD_VAR 0 16
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 2
29901: PUSH
29902: LD_INT 35
29904: PUSH
29905: LD_INT 11
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 35
29914: PUSH
29915: LD_INT 30
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 91
29929: PUSH
29930: LD_VAR 0 1
29934: PUSH
29935: LD_INT 18
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: LIST
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: LIST
29947: PPUSH
29948: CALL_OW 69
29952: NOT
29953: PUSH
29954: LD_INT 22
29956: PUSH
29957: LD_VAR 0 16
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 2
29968: PUSH
29969: LD_INT 30
29971: PUSH
29972: LD_INT 32
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 30
29981: PUSH
29982: LD_INT 33
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: LIST
29993: PUSH
29994: LD_INT 91
29996: PUSH
29997: LD_VAR 0 1
30001: PUSH
30002: LD_INT 12
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: LIST
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: LIST
30014: PUSH
30015: EMPTY
30016: LIST
30017: PPUSH
30018: CALL_OW 69
30022: PUSH
30023: LD_INT 2
30025: GREATER
30026: AND
30027: IFFALSE 30050
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30029: LD_ADDR_VAR 0 18
30033: PUSH
30034: LD_INT 11
30036: PUSH
30037: LD_INT 30
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_VAR 0 12
30048: ARRAY
30049: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30050: LD_VAR 0 18
30054: NOT
30055: PUSH
30056: LD_INT 40
30058: PPUSH
30059: LD_VAR 0 16
30063: PPUSH
30064: CALL_OW 321
30068: PUSH
30069: LD_INT 2
30071: EQUAL
30072: AND
30073: PUSH
30074: LD_INT 7
30076: PUSH
30077: LD_VAR 0 5
30081: IN
30082: PUSH
30083: LD_INT 28
30085: PUSH
30086: LD_VAR 0 5
30090: IN
30091: OR
30092: PUSH
30093: LD_INT 45
30095: PUSH
30096: LD_VAR 0 5
30100: IN
30101: OR
30102: AND
30103: IFFALSE 30357
// begin hex := GetHexInfo ( x , y ) ;
30105: LD_ADDR_VAR 0 4
30109: PUSH
30110: LD_VAR 0 10
30114: PPUSH
30115: LD_VAR 0 11
30119: PPUSH
30120: CALL_OW 546
30124: ST_TO_ADDR
// if hex [ 1 ] then
30125: LD_VAR 0 4
30129: PUSH
30130: LD_INT 1
30132: ARRAY
30133: IFFALSE 30137
// exit ;
30135: GO 30540
// height := hex [ 2 ] ;
30137: LD_ADDR_VAR 0 15
30141: PUSH
30142: LD_VAR 0 4
30146: PUSH
30147: LD_INT 2
30149: ARRAY
30150: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30151: LD_ADDR_VAR 0 14
30155: PUSH
30156: LD_INT 0
30158: PUSH
30159: LD_INT 2
30161: PUSH
30162: LD_INT 3
30164: PUSH
30165: LD_INT 5
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: ST_TO_ADDR
// for i in tmp do
30174: LD_ADDR_VAR 0 8
30178: PUSH
30179: LD_VAR 0 14
30183: PUSH
30184: FOR_IN
30185: IFFALSE 30355
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30187: LD_ADDR_VAR 0 9
30191: PUSH
30192: LD_VAR 0 10
30196: PPUSH
30197: LD_VAR 0 8
30201: PPUSH
30202: LD_INT 5
30204: PPUSH
30205: CALL_OW 272
30209: PUSH
30210: LD_VAR 0 11
30214: PPUSH
30215: LD_VAR 0 8
30219: PPUSH
30220: LD_INT 5
30222: PPUSH
30223: CALL_OW 273
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30232: LD_VAR 0 9
30236: PUSH
30237: LD_INT 1
30239: ARRAY
30240: PPUSH
30241: LD_VAR 0 9
30245: PUSH
30246: LD_INT 2
30248: ARRAY
30249: PPUSH
30250: CALL_OW 488
30254: IFFALSE 30353
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30256: LD_ADDR_VAR 0 4
30260: PUSH
30261: LD_VAR 0 9
30265: PUSH
30266: LD_INT 1
30268: ARRAY
30269: PPUSH
30270: LD_VAR 0 9
30274: PUSH
30275: LD_INT 2
30277: ARRAY
30278: PPUSH
30279: CALL_OW 546
30283: ST_TO_ADDR
// if hex [ 1 ] then
30284: LD_VAR 0 4
30288: PUSH
30289: LD_INT 1
30291: ARRAY
30292: IFFALSE 30296
// continue ;
30294: GO 30184
// h := hex [ 2 ] ;
30296: LD_ADDR_VAR 0 13
30300: PUSH
30301: LD_VAR 0 4
30305: PUSH
30306: LD_INT 2
30308: ARRAY
30309: ST_TO_ADDR
// if h + 7 < height then
30310: LD_VAR 0 13
30314: PUSH
30315: LD_INT 7
30317: PLUS
30318: PUSH
30319: LD_VAR 0 15
30323: LESS
30324: IFFALSE 30353
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30326: LD_ADDR_VAR 0 18
30330: PUSH
30331: LD_INT 7
30333: PUSH
30334: LD_INT 28
30336: PUSH
30337: LD_INT 45
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: LIST
30344: PUSH
30345: LD_VAR 0 12
30349: ARRAY
30350: ST_TO_ADDR
// break ;
30351: GO 30355
// end ; end ; end ;
30353: GO 30184
30355: POP
30356: POP
// end ; if not weapon then
30357: LD_VAR 0 18
30361: NOT
30362: IFFALSE 30422
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30364: LD_ADDR_VAR 0 5
30368: PUSH
30369: LD_VAR 0 5
30373: PUSH
30374: LD_INT 11
30376: PUSH
30377: LD_INT 30
30379: PUSH
30380: LD_INT 49
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: LIST
30387: DIFF
30388: ST_TO_ADDR
// if not list then
30389: LD_VAR 0 5
30393: NOT
30394: IFFALSE 30398
// exit ;
30396: GO 30540
// weapon := list [ rand ( 1 , list ) ] ;
30398: LD_ADDR_VAR 0 18
30402: PUSH
30403: LD_VAR 0 5
30407: PUSH
30408: LD_INT 1
30410: PPUSH
30411: LD_VAR 0 5
30415: PPUSH
30416: CALL_OW 12
30420: ARRAY
30421: ST_TO_ADDR
// end ; if weapon then
30422: LD_VAR 0 18
30426: IFFALSE 30540
// begin tmp := CostOfWeapon ( weapon ) ;
30428: LD_ADDR_VAR 0 14
30432: PUSH
30433: LD_VAR 0 18
30437: PPUSH
30438: CALL_OW 451
30442: ST_TO_ADDR
// j := GetBase ( tower ) ;
30443: LD_ADDR_VAR 0 9
30447: PUSH
30448: LD_VAR 0 1
30452: PPUSH
30453: CALL_OW 274
30457: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30458: LD_VAR 0 9
30462: PPUSH
30463: LD_INT 1
30465: PPUSH
30466: CALL_OW 275
30470: PUSH
30471: LD_VAR 0 14
30475: PUSH
30476: LD_INT 1
30478: ARRAY
30479: GREATEREQUAL
30480: PUSH
30481: LD_VAR 0 9
30485: PPUSH
30486: LD_INT 2
30488: PPUSH
30489: CALL_OW 275
30493: PUSH
30494: LD_VAR 0 14
30498: PUSH
30499: LD_INT 2
30501: ARRAY
30502: GREATEREQUAL
30503: AND
30504: PUSH
30505: LD_VAR 0 9
30509: PPUSH
30510: LD_INT 3
30512: PPUSH
30513: CALL_OW 275
30517: PUSH
30518: LD_VAR 0 14
30522: PUSH
30523: LD_INT 3
30525: ARRAY
30526: GREATEREQUAL
30527: AND
30528: IFFALSE 30540
// result := weapon ;
30530: LD_ADDR_VAR 0 3
30534: PUSH
30535: LD_VAR 0 18
30539: ST_TO_ADDR
// end ; end ;
30540: LD_VAR 0 3
30544: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
30545: LD_INT 0
30547: PPUSH
30548: PPUSH
// result := true ;
30549: LD_ADDR_VAR 0 3
30553: PUSH
30554: LD_INT 1
30556: ST_TO_ADDR
// if array1 = array2 then
30557: LD_VAR 0 1
30561: PUSH
30562: LD_VAR 0 2
30566: EQUAL
30567: IFFALSE 30627
// begin for i = 1 to array1 do
30569: LD_ADDR_VAR 0 4
30573: PUSH
30574: DOUBLE
30575: LD_INT 1
30577: DEC
30578: ST_TO_ADDR
30579: LD_VAR 0 1
30583: PUSH
30584: FOR_TO
30585: IFFALSE 30623
// if array1 [ i ] <> array2 [ i ] then
30587: LD_VAR 0 1
30591: PUSH
30592: LD_VAR 0 4
30596: ARRAY
30597: PUSH
30598: LD_VAR 0 2
30602: PUSH
30603: LD_VAR 0 4
30607: ARRAY
30608: NONEQUAL
30609: IFFALSE 30621
// begin result := false ;
30611: LD_ADDR_VAR 0 3
30615: PUSH
30616: LD_INT 0
30618: ST_TO_ADDR
// break ;
30619: GO 30623
// end ;
30621: GO 30584
30623: POP
30624: POP
// end else
30625: GO 30635
// result := false ;
30627: LD_ADDR_VAR 0 3
30631: PUSH
30632: LD_INT 0
30634: ST_TO_ADDR
// end ;
30635: LD_VAR 0 3
30639: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
30640: LD_INT 0
30642: PPUSH
30643: PPUSH
// if not array1 or not array2 then
30644: LD_VAR 0 1
30648: NOT
30649: PUSH
30650: LD_VAR 0 2
30654: NOT
30655: OR
30656: IFFALSE 30660
// exit ;
30658: GO 30724
// result := true ;
30660: LD_ADDR_VAR 0 3
30664: PUSH
30665: LD_INT 1
30667: ST_TO_ADDR
// for i = 1 to array1 do
30668: LD_ADDR_VAR 0 4
30672: PUSH
30673: DOUBLE
30674: LD_INT 1
30676: DEC
30677: ST_TO_ADDR
30678: LD_VAR 0 1
30682: PUSH
30683: FOR_TO
30684: IFFALSE 30722
// if array1 [ i ] <> array2 [ i ] then
30686: LD_VAR 0 1
30690: PUSH
30691: LD_VAR 0 4
30695: ARRAY
30696: PUSH
30697: LD_VAR 0 2
30701: PUSH
30702: LD_VAR 0 4
30706: ARRAY
30707: NONEQUAL
30708: IFFALSE 30720
// begin result := false ;
30710: LD_ADDR_VAR 0 3
30714: PUSH
30715: LD_INT 0
30717: ST_TO_ADDR
// break ;
30718: GO 30722
// end ;
30720: GO 30683
30722: POP
30723: POP
// end ;
30724: LD_VAR 0 3
30728: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
30729: LD_INT 0
30731: PPUSH
30732: PPUSH
30733: PPUSH
// pom := GetBase ( fac ) ;
30734: LD_ADDR_VAR 0 5
30738: PUSH
30739: LD_VAR 0 1
30743: PPUSH
30744: CALL_OW 274
30748: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
30749: LD_ADDR_VAR 0 4
30753: PUSH
30754: LD_VAR 0 2
30758: PUSH
30759: LD_INT 1
30761: ARRAY
30762: PPUSH
30763: LD_VAR 0 2
30767: PUSH
30768: LD_INT 2
30770: ARRAY
30771: PPUSH
30772: LD_VAR 0 2
30776: PUSH
30777: LD_INT 3
30779: ARRAY
30780: PPUSH
30781: LD_VAR 0 2
30785: PUSH
30786: LD_INT 4
30788: ARRAY
30789: PPUSH
30790: CALL_OW 449
30794: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30795: LD_ADDR_VAR 0 3
30799: PUSH
30800: LD_VAR 0 5
30804: PPUSH
30805: LD_INT 1
30807: PPUSH
30808: CALL_OW 275
30812: PUSH
30813: LD_VAR 0 4
30817: PUSH
30818: LD_INT 1
30820: ARRAY
30821: GREATEREQUAL
30822: PUSH
30823: LD_VAR 0 5
30827: PPUSH
30828: LD_INT 2
30830: PPUSH
30831: CALL_OW 275
30835: PUSH
30836: LD_VAR 0 4
30840: PUSH
30841: LD_INT 2
30843: ARRAY
30844: GREATEREQUAL
30845: AND
30846: PUSH
30847: LD_VAR 0 5
30851: PPUSH
30852: LD_INT 3
30854: PPUSH
30855: CALL_OW 275
30859: PUSH
30860: LD_VAR 0 4
30864: PUSH
30865: LD_INT 3
30867: ARRAY
30868: GREATEREQUAL
30869: AND
30870: ST_TO_ADDR
// end ;
30871: LD_VAR 0 3
30875: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
30876: LD_INT 0
30878: PPUSH
30879: PPUSH
30880: PPUSH
30881: PPUSH
// pom := GetBase ( building ) ;
30882: LD_ADDR_VAR 0 3
30886: PUSH
30887: LD_VAR 0 1
30891: PPUSH
30892: CALL_OW 274
30896: ST_TO_ADDR
// if not pom then
30897: LD_VAR 0 3
30901: NOT
30902: IFFALSE 30906
// exit ;
30904: GO 31076
// btype := GetBType ( building ) ;
30906: LD_ADDR_VAR 0 5
30910: PUSH
30911: LD_VAR 0 1
30915: PPUSH
30916: CALL_OW 266
30920: ST_TO_ADDR
// if btype = b_armoury then
30921: LD_VAR 0 5
30925: PUSH
30926: LD_INT 4
30928: EQUAL
30929: IFFALSE 30939
// btype := b_barracks ;
30931: LD_ADDR_VAR 0 5
30935: PUSH
30936: LD_INT 5
30938: ST_TO_ADDR
// if btype = b_depot then
30939: LD_VAR 0 5
30943: PUSH
30944: LD_INT 0
30946: EQUAL
30947: IFFALSE 30957
// btype := b_warehouse ;
30949: LD_ADDR_VAR 0 5
30953: PUSH
30954: LD_INT 1
30956: ST_TO_ADDR
// if btype = b_workshop then
30957: LD_VAR 0 5
30961: PUSH
30962: LD_INT 2
30964: EQUAL
30965: IFFALSE 30975
// btype := b_factory ;
30967: LD_ADDR_VAR 0 5
30971: PUSH
30972: LD_INT 3
30974: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30975: LD_ADDR_VAR 0 4
30979: PUSH
30980: LD_VAR 0 5
30984: PPUSH
30985: LD_VAR 0 1
30989: PPUSH
30990: CALL_OW 248
30994: PPUSH
30995: CALL_OW 450
30999: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31000: LD_ADDR_VAR 0 2
31004: PUSH
31005: LD_VAR 0 3
31009: PPUSH
31010: LD_INT 1
31012: PPUSH
31013: CALL_OW 275
31017: PUSH
31018: LD_VAR 0 4
31022: PUSH
31023: LD_INT 1
31025: ARRAY
31026: GREATEREQUAL
31027: PUSH
31028: LD_VAR 0 3
31032: PPUSH
31033: LD_INT 2
31035: PPUSH
31036: CALL_OW 275
31040: PUSH
31041: LD_VAR 0 4
31045: PUSH
31046: LD_INT 2
31048: ARRAY
31049: GREATEREQUAL
31050: AND
31051: PUSH
31052: LD_VAR 0 3
31056: PPUSH
31057: LD_INT 3
31059: PPUSH
31060: CALL_OW 275
31064: PUSH
31065: LD_VAR 0 4
31069: PUSH
31070: LD_INT 3
31072: ARRAY
31073: GREATEREQUAL
31074: AND
31075: ST_TO_ADDR
// end ;
31076: LD_VAR 0 2
31080: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31081: LD_INT 0
31083: PPUSH
31084: PPUSH
31085: PPUSH
// pom := GetBase ( building ) ;
31086: LD_ADDR_VAR 0 4
31090: PUSH
31091: LD_VAR 0 1
31095: PPUSH
31096: CALL_OW 274
31100: ST_TO_ADDR
// if not pom then
31101: LD_VAR 0 4
31105: NOT
31106: IFFALSE 31110
// exit ;
31108: GO 31211
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31110: LD_ADDR_VAR 0 5
31114: PUSH
31115: LD_VAR 0 2
31119: PPUSH
31120: LD_VAR 0 1
31124: PPUSH
31125: CALL_OW 248
31129: PPUSH
31130: CALL_OW 450
31134: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31135: LD_ADDR_VAR 0 3
31139: PUSH
31140: LD_VAR 0 4
31144: PPUSH
31145: LD_INT 1
31147: PPUSH
31148: CALL_OW 275
31152: PUSH
31153: LD_VAR 0 5
31157: PUSH
31158: LD_INT 1
31160: ARRAY
31161: GREATEREQUAL
31162: PUSH
31163: LD_VAR 0 4
31167: PPUSH
31168: LD_INT 2
31170: PPUSH
31171: CALL_OW 275
31175: PUSH
31176: LD_VAR 0 5
31180: PUSH
31181: LD_INT 2
31183: ARRAY
31184: GREATEREQUAL
31185: AND
31186: PUSH
31187: LD_VAR 0 4
31191: PPUSH
31192: LD_INT 3
31194: PPUSH
31195: CALL_OW 275
31199: PUSH
31200: LD_VAR 0 5
31204: PUSH
31205: LD_INT 3
31207: ARRAY
31208: GREATEREQUAL
31209: AND
31210: ST_TO_ADDR
// end ;
31211: LD_VAR 0 3
31215: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
31216: LD_INT 0
31218: PPUSH
31219: PPUSH
31220: PPUSH
31221: PPUSH
31222: PPUSH
31223: PPUSH
31224: PPUSH
31225: PPUSH
31226: PPUSH
31227: PPUSH
31228: PPUSH
// result := false ;
31229: LD_ADDR_VAR 0 8
31233: PUSH
31234: LD_INT 0
31236: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
31237: LD_VAR 0 5
31241: NOT
31242: PUSH
31243: LD_VAR 0 1
31247: NOT
31248: OR
31249: PUSH
31250: LD_VAR 0 2
31254: NOT
31255: OR
31256: PUSH
31257: LD_VAR 0 3
31261: NOT
31262: OR
31263: IFFALSE 31267
// exit ;
31265: GO 32081
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
31267: LD_ADDR_VAR 0 14
31271: PUSH
31272: LD_VAR 0 1
31276: PPUSH
31277: LD_VAR 0 2
31281: PPUSH
31282: LD_VAR 0 3
31286: PPUSH
31287: LD_VAR 0 4
31291: PPUSH
31292: LD_VAR 0 5
31296: PUSH
31297: LD_INT 1
31299: ARRAY
31300: PPUSH
31301: CALL_OW 248
31305: PPUSH
31306: LD_INT 0
31308: PPUSH
31309: CALL 33318 0 6
31313: ST_TO_ADDR
// if not hexes then
31314: LD_VAR 0 14
31318: NOT
31319: IFFALSE 31323
// exit ;
31321: GO 32081
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31323: LD_ADDR_VAR 0 17
31327: PUSH
31328: LD_VAR 0 5
31332: PPUSH
31333: LD_INT 22
31335: PUSH
31336: LD_VAR 0 13
31340: PPUSH
31341: CALL_OW 255
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 2
31352: PUSH
31353: LD_INT 30
31355: PUSH
31356: LD_INT 0
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 30
31365: PUSH
31366: LD_INT 1
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: LIST
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PPUSH
31382: CALL_OW 72
31386: ST_TO_ADDR
// for i = 1 to hexes do
31387: LD_ADDR_VAR 0 9
31391: PUSH
31392: DOUBLE
31393: LD_INT 1
31395: DEC
31396: ST_TO_ADDR
31397: LD_VAR 0 14
31401: PUSH
31402: FOR_TO
31403: IFFALSE 32079
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31405: LD_ADDR_VAR 0 13
31409: PUSH
31410: LD_VAR 0 14
31414: PUSH
31415: LD_VAR 0 9
31419: ARRAY
31420: PUSH
31421: LD_INT 1
31423: ARRAY
31424: PPUSH
31425: LD_VAR 0 14
31429: PUSH
31430: LD_VAR 0 9
31434: ARRAY
31435: PUSH
31436: LD_INT 2
31438: ARRAY
31439: PPUSH
31440: CALL_OW 428
31444: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31445: LD_VAR 0 14
31449: PUSH
31450: LD_VAR 0 9
31454: ARRAY
31455: PUSH
31456: LD_INT 1
31458: ARRAY
31459: PPUSH
31460: LD_VAR 0 14
31464: PUSH
31465: LD_VAR 0 9
31469: ARRAY
31470: PUSH
31471: LD_INT 2
31473: ARRAY
31474: PPUSH
31475: CALL_OW 351
31479: PUSH
31480: LD_VAR 0 14
31484: PUSH
31485: LD_VAR 0 9
31489: ARRAY
31490: PUSH
31491: LD_INT 1
31493: ARRAY
31494: PPUSH
31495: LD_VAR 0 14
31499: PUSH
31500: LD_VAR 0 9
31504: ARRAY
31505: PUSH
31506: LD_INT 2
31508: ARRAY
31509: PPUSH
31510: CALL_OW 488
31514: NOT
31515: OR
31516: PUSH
31517: LD_VAR 0 13
31521: PPUSH
31522: CALL_OW 247
31526: PUSH
31527: LD_INT 3
31529: EQUAL
31530: OR
31531: IFFALSE 31537
// exit ;
31533: POP
31534: POP
31535: GO 32081
// if not tmp then
31537: LD_VAR 0 13
31541: NOT
31542: IFFALSE 31546
// continue ;
31544: GO 31402
// result := true ;
31546: LD_ADDR_VAR 0 8
31550: PUSH
31551: LD_INT 1
31553: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
31554: LD_VAR 0 6
31558: PUSH
31559: LD_VAR 0 13
31563: PPUSH
31564: CALL_OW 247
31568: PUSH
31569: LD_INT 2
31571: EQUAL
31572: AND
31573: PUSH
31574: LD_VAR 0 13
31578: PPUSH
31579: CALL_OW 263
31583: PUSH
31584: LD_INT 1
31586: EQUAL
31587: AND
31588: IFFALSE 31752
// begin if IsDrivenBy ( tmp ) then
31590: LD_VAR 0 13
31594: PPUSH
31595: CALL_OW 311
31599: IFFALSE 31603
// continue ;
31601: GO 31402
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
31603: LD_VAR 0 6
31607: PPUSH
31608: LD_INT 3
31610: PUSH
31611: LD_INT 60
31613: PUSH
31614: EMPTY
31615: LIST
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 3
31623: PUSH
31624: LD_INT 55
31626: PUSH
31627: EMPTY
31628: LIST
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PPUSH
31638: CALL_OW 72
31642: IFFALSE 31750
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
31644: LD_ADDR_VAR 0 18
31648: PUSH
31649: LD_VAR 0 6
31653: PPUSH
31654: LD_INT 3
31656: PUSH
31657: LD_INT 60
31659: PUSH
31660: EMPTY
31661: LIST
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 3
31669: PUSH
31670: LD_INT 55
31672: PUSH
31673: EMPTY
31674: LIST
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PPUSH
31684: CALL_OW 72
31688: PUSH
31689: LD_INT 1
31691: ARRAY
31692: ST_TO_ADDR
// if IsInUnit ( driver ) then
31693: LD_VAR 0 18
31697: PPUSH
31698: CALL_OW 310
31702: IFFALSE 31713
// ComExit ( driver ) ;
31704: LD_VAR 0 18
31708: PPUSH
31709: CALL 56502 0 1
// AddComEnterUnit ( driver , tmp ) ;
31713: LD_VAR 0 18
31717: PPUSH
31718: LD_VAR 0 13
31722: PPUSH
31723: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
31727: LD_VAR 0 18
31731: PPUSH
31732: LD_VAR 0 7
31736: PPUSH
31737: CALL_OW 173
// AddComExitVehicle ( driver ) ;
31741: LD_VAR 0 18
31745: PPUSH
31746: CALL_OW 181
// end ; continue ;
31750: GO 31402
// end ; if not cleaners or not tmp in cleaners then
31752: LD_VAR 0 6
31756: NOT
31757: PUSH
31758: LD_VAR 0 13
31762: PUSH
31763: LD_VAR 0 6
31767: IN
31768: NOT
31769: OR
31770: IFFALSE 32077
// begin if dep then
31772: LD_VAR 0 17
31776: IFFALSE 31912
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
31778: LD_ADDR_VAR 0 16
31782: PUSH
31783: LD_VAR 0 17
31787: PUSH
31788: LD_INT 1
31790: ARRAY
31791: PPUSH
31792: CALL_OW 250
31796: PPUSH
31797: LD_VAR 0 17
31801: PUSH
31802: LD_INT 1
31804: ARRAY
31805: PPUSH
31806: CALL_OW 254
31810: PPUSH
31811: LD_INT 5
31813: PPUSH
31814: CALL_OW 272
31818: PUSH
31819: LD_VAR 0 17
31823: PUSH
31824: LD_INT 1
31826: ARRAY
31827: PPUSH
31828: CALL_OW 251
31832: PPUSH
31833: LD_VAR 0 17
31837: PUSH
31838: LD_INT 1
31840: ARRAY
31841: PPUSH
31842: CALL_OW 254
31846: PPUSH
31847: LD_INT 5
31849: PPUSH
31850: CALL_OW 273
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
31859: LD_VAR 0 16
31863: PUSH
31864: LD_INT 1
31866: ARRAY
31867: PPUSH
31868: LD_VAR 0 16
31872: PUSH
31873: LD_INT 2
31875: ARRAY
31876: PPUSH
31877: CALL_OW 488
31881: IFFALSE 31912
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
31883: LD_VAR 0 13
31887: PPUSH
31888: LD_VAR 0 16
31892: PUSH
31893: LD_INT 1
31895: ARRAY
31896: PPUSH
31897: LD_VAR 0 16
31901: PUSH
31902: LD_INT 2
31904: ARRAY
31905: PPUSH
31906: CALL_OW 111
// continue ;
31910: GO 31402
// end ; end ; r := GetDir ( tmp ) ;
31912: LD_ADDR_VAR 0 15
31916: PUSH
31917: LD_VAR 0 13
31921: PPUSH
31922: CALL_OW 254
31926: ST_TO_ADDR
// if r = 5 then
31927: LD_VAR 0 15
31931: PUSH
31932: LD_INT 5
31934: EQUAL
31935: IFFALSE 31945
// r := 0 ;
31937: LD_ADDR_VAR 0 15
31941: PUSH
31942: LD_INT 0
31944: ST_TO_ADDR
// for j = r to 5 do
31945: LD_ADDR_VAR 0 10
31949: PUSH
31950: DOUBLE
31951: LD_VAR 0 15
31955: DEC
31956: ST_TO_ADDR
31957: LD_INT 5
31959: PUSH
31960: FOR_TO
31961: IFFALSE 32075
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
31963: LD_ADDR_VAR 0 11
31967: PUSH
31968: LD_VAR 0 13
31972: PPUSH
31973: CALL_OW 250
31977: PPUSH
31978: LD_VAR 0 10
31982: PPUSH
31983: LD_INT 2
31985: PPUSH
31986: CALL_OW 272
31990: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
31991: LD_ADDR_VAR 0 12
31995: PUSH
31996: LD_VAR 0 13
32000: PPUSH
32001: CALL_OW 251
32005: PPUSH
32006: LD_VAR 0 10
32010: PPUSH
32011: LD_INT 2
32013: PPUSH
32014: CALL_OW 273
32018: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32019: LD_VAR 0 11
32023: PPUSH
32024: LD_VAR 0 12
32028: PPUSH
32029: CALL_OW 488
32033: PUSH
32034: LD_VAR 0 11
32038: PPUSH
32039: LD_VAR 0 12
32043: PPUSH
32044: CALL_OW 428
32048: NOT
32049: AND
32050: IFFALSE 32073
// begin ComMoveXY ( tmp , _x , _y ) ;
32052: LD_VAR 0 13
32056: PPUSH
32057: LD_VAR 0 11
32061: PPUSH
32062: LD_VAR 0 12
32066: PPUSH
32067: CALL_OW 111
// break ;
32071: GO 32075
// end ; end ;
32073: GO 31960
32075: POP
32076: POP
// end ; end ;
32077: GO 31402
32079: POP
32080: POP
// end ;
32081: LD_VAR 0 8
32085: RET
// export function BuildingTechInvented ( side , btype ) ; begin
32086: LD_INT 0
32088: PPUSH
// result := true ;
32089: LD_ADDR_VAR 0 3
32093: PUSH
32094: LD_INT 1
32096: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
32097: LD_VAR 0 2
32101: PUSH
32102: LD_INT 24
32104: DOUBLE
32105: EQUAL
32106: IFTRUE 32116
32108: LD_INT 33
32110: DOUBLE
32111: EQUAL
32112: IFTRUE 32116
32114: GO 32141
32116: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
32117: LD_ADDR_VAR 0 3
32121: PUSH
32122: LD_INT 32
32124: PPUSH
32125: LD_VAR 0 1
32129: PPUSH
32130: CALL_OW 321
32134: PUSH
32135: LD_INT 2
32137: EQUAL
32138: ST_TO_ADDR
32139: GO 32461
32141: LD_INT 20
32143: DOUBLE
32144: EQUAL
32145: IFTRUE 32149
32147: GO 32174
32149: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
32150: LD_ADDR_VAR 0 3
32154: PUSH
32155: LD_INT 6
32157: PPUSH
32158: LD_VAR 0 1
32162: PPUSH
32163: CALL_OW 321
32167: PUSH
32168: LD_INT 2
32170: EQUAL
32171: ST_TO_ADDR
32172: GO 32461
32174: LD_INT 22
32176: DOUBLE
32177: EQUAL
32178: IFTRUE 32188
32180: LD_INT 36
32182: DOUBLE
32183: EQUAL
32184: IFTRUE 32188
32186: GO 32213
32188: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
32189: LD_ADDR_VAR 0 3
32193: PUSH
32194: LD_INT 15
32196: PPUSH
32197: LD_VAR 0 1
32201: PPUSH
32202: CALL_OW 321
32206: PUSH
32207: LD_INT 2
32209: EQUAL
32210: ST_TO_ADDR
32211: GO 32461
32213: LD_INT 30
32215: DOUBLE
32216: EQUAL
32217: IFTRUE 32221
32219: GO 32246
32221: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
32222: LD_ADDR_VAR 0 3
32226: PUSH
32227: LD_INT 20
32229: PPUSH
32230: LD_VAR 0 1
32234: PPUSH
32235: CALL_OW 321
32239: PUSH
32240: LD_INT 2
32242: EQUAL
32243: ST_TO_ADDR
32244: GO 32461
32246: LD_INT 28
32248: DOUBLE
32249: EQUAL
32250: IFTRUE 32260
32252: LD_INT 21
32254: DOUBLE
32255: EQUAL
32256: IFTRUE 32260
32258: GO 32285
32260: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
32261: LD_ADDR_VAR 0 3
32265: PUSH
32266: LD_INT 21
32268: PPUSH
32269: LD_VAR 0 1
32273: PPUSH
32274: CALL_OW 321
32278: PUSH
32279: LD_INT 2
32281: EQUAL
32282: ST_TO_ADDR
32283: GO 32461
32285: LD_INT 16
32287: DOUBLE
32288: EQUAL
32289: IFTRUE 32293
32291: GO 32320
32293: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
32294: LD_ADDR_VAR 0 3
32298: PUSH
32299: LD_EXP 41
32303: PPUSH
32304: LD_VAR 0 1
32308: PPUSH
32309: CALL_OW 321
32313: PUSH
32314: LD_INT 2
32316: EQUAL
32317: ST_TO_ADDR
32318: GO 32461
32320: LD_INT 19
32322: DOUBLE
32323: EQUAL
32324: IFTRUE 32334
32326: LD_INT 23
32328: DOUBLE
32329: EQUAL
32330: IFTRUE 32334
32332: GO 32361
32334: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
32335: LD_ADDR_VAR 0 3
32339: PUSH
32340: LD_EXP 40
32344: PPUSH
32345: LD_VAR 0 1
32349: PPUSH
32350: CALL_OW 321
32354: PUSH
32355: LD_INT 2
32357: EQUAL
32358: ST_TO_ADDR
32359: GO 32461
32361: LD_INT 17
32363: DOUBLE
32364: EQUAL
32365: IFTRUE 32369
32367: GO 32394
32369: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
32370: LD_ADDR_VAR 0 3
32374: PUSH
32375: LD_INT 39
32377: PPUSH
32378: LD_VAR 0 1
32382: PPUSH
32383: CALL_OW 321
32387: PUSH
32388: LD_INT 2
32390: EQUAL
32391: ST_TO_ADDR
32392: GO 32461
32394: LD_INT 18
32396: DOUBLE
32397: EQUAL
32398: IFTRUE 32402
32400: GO 32427
32402: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
32403: LD_ADDR_VAR 0 3
32407: PUSH
32408: LD_INT 40
32410: PPUSH
32411: LD_VAR 0 1
32415: PPUSH
32416: CALL_OW 321
32420: PUSH
32421: LD_INT 2
32423: EQUAL
32424: ST_TO_ADDR
32425: GO 32461
32427: LD_INT 27
32429: DOUBLE
32430: EQUAL
32431: IFTRUE 32435
32433: GO 32460
32435: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
32436: LD_ADDR_VAR 0 3
32440: PUSH
32441: LD_INT 35
32443: PPUSH
32444: LD_VAR 0 1
32448: PPUSH
32449: CALL_OW 321
32453: PUSH
32454: LD_INT 2
32456: EQUAL
32457: ST_TO_ADDR
32458: GO 32461
32460: POP
// end ;
32461: LD_VAR 0 3
32465: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
32466: LD_INT 0
32468: PPUSH
32469: PPUSH
32470: PPUSH
32471: PPUSH
32472: PPUSH
32473: PPUSH
32474: PPUSH
32475: PPUSH
32476: PPUSH
32477: PPUSH
32478: PPUSH
// result := false ;
32479: LD_ADDR_VAR 0 6
32483: PUSH
32484: LD_INT 0
32486: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
32487: LD_VAR 0 1
32491: NOT
32492: PUSH
32493: LD_VAR 0 1
32497: PPUSH
32498: CALL_OW 266
32502: PUSH
32503: LD_INT 0
32505: PUSH
32506: LD_INT 1
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: IN
32513: NOT
32514: OR
32515: PUSH
32516: LD_VAR 0 2
32520: NOT
32521: OR
32522: PUSH
32523: LD_VAR 0 5
32527: PUSH
32528: LD_INT 0
32530: PUSH
32531: LD_INT 1
32533: PUSH
32534: LD_INT 2
32536: PUSH
32537: LD_INT 3
32539: PUSH
32540: LD_INT 4
32542: PUSH
32543: LD_INT 5
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: IN
32554: NOT
32555: OR
32556: PUSH
32557: LD_VAR 0 3
32561: PPUSH
32562: LD_VAR 0 4
32566: PPUSH
32567: CALL_OW 488
32571: NOT
32572: OR
32573: IFFALSE 32577
// exit ;
32575: GO 33313
// side := GetSide ( depot ) ;
32577: LD_ADDR_VAR 0 9
32581: PUSH
32582: LD_VAR 0 1
32586: PPUSH
32587: CALL_OW 255
32591: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
32592: LD_VAR 0 9
32596: PPUSH
32597: LD_VAR 0 2
32601: PPUSH
32602: CALL 32086 0 2
32606: NOT
32607: IFFALSE 32611
// exit ;
32609: GO 33313
// pom := GetBase ( depot ) ;
32611: LD_ADDR_VAR 0 10
32615: PUSH
32616: LD_VAR 0 1
32620: PPUSH
32621: CALL_OW 274
32625: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
32626: LD_ADDR_VAR 0 11
32630: PUSH
32631: LD_VAR 0 2
32635: PPUSH
32636: LD_VAR 0 1
32640: PPUSH
32641: CALL_OW 248
32645: PPUSH
32646: CALL_OW 450
32650: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
32651: LD_VAR 0 10
32655: PPUSH
32656: LD_INT 1
32658: PPUSH
32659: CALL_OW 275
32663: PUSH
32664: LD_VAR 0 11
32668: PUSH
32669: LD_INT 1
32671: ARRAY
32672: GREATEREQUAL
32673: PUSH
32674: LD_VAR 0 10
32678: PPUSH
32679: LD_INT 2
32681: PPUSH
32682: CALL_OW 275
32686: PUSH
32687: LD_VAR 0 11
32691: PUSH
32692: LD_INT 2
32694: ARRAY
32695: GREATEREQUAL
32696: AND
32697: PUSH
32698: LD_VAR 0 10
32702: PPUSH
32703: LD_INT 3
32705: PPUSH
32706: CALL_OW 275
32710: PUSH
32711: LD_VAR 0 11
32715: PUSH
32716: LD_INT 3
32718: ARRAY
32719: GREATEREQUAL
32720: AND
32721: NOT
32722: IFFALSE 32726
// exit ;
32724: GO 33313
// if GetBType ( depot ) = b_depot then
32726: LD_VAR 0 1
32730: PPUSH
32731: CALL_OW 266
32735: PUSH
32736: LD_INT 0
32738: EQUAL
32739: IFFALSE 32751
// dist := 28 else
32741: LD_ADDR_VAR 0 14
32745: PUSH
32746: LD_INT 28
32748: ST_TO_ADDR
32749: GO 32759
// dist := 36 ;
32751: LD_ADDR_VAR 0 14
32755: PUSH
32756: LD_INT 36
32758: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
32759: LD_VAR 0 1
32763: PPUSH
32764: LD_VAR 0 3
32768: PPUSH
32769: LD_VAR 0 4
32773: PPUSH
32774: CALL_OW 297
32778: PUSH
32779: LD_VAR 0 14
32783: GREATER
32784: IFFALSE 32788
// exit ;
32786: GO 33313
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
32788: LD_ADDR_VAR 0 12
32792: PUSH
32793: LD_VAR 0 2
32797: PPUSH
32798: LD_VAR 0 3
32802: PPUSH
32803: LD_VAR 0 4
32807: PPUSH
32808: LD_VAR 0 5
32812: PPUSH
32813: LD_VAR 0 1
32817: PPUSH
32818: CALL_OW 248
32822: PPUSH
32823: LD_INT 0
32825: PPUSH
32826: CALL 33318 0 6
32830: ST_TO_ADDR
// if not hexes then
32831: LD_VAR 0 12
32835: NOT
32836: IFFALSE 32840
// exit ;
32838: GO 33313
// hex := GetHexInfo ( x , y ) ;
32840: LD_ADDR_VAR 0 15
32844: PUSH
32845: LD_VAR 0 3
32849: PPUSH
32850: LD_VAR 0 4
32854: PPUSH
32855: CALL_OW 546
32859: ST_TO_ADDR
// if hex [ 1 ] then
32860: LD_VAR 0 15
32864: PUSH
32865: LD_INT 1
32867: ARRAY
32868: IFFALSE 32872
// exit ;
32870: GO 33313
// height := hex [ 2 ] ;
32872: LD_ADDR_VAR 0 13
32876: PUSH
32877: LD_VAR 0 15
32881: PUSH
32882: LD_INT 2
32884: ARRAY
32885: ST_TO_ADDR
// for i = 1 to hexes do
32886: LD_ADDR_VAR 0 7
32890: PUSH
32891: DOUBLE
32892: LD_INT 1
32894: DEC
32895: ST_TO_ADDR
32896: LD_VAR 0 12
32900: PUSH
32901: FOR_TO
32902: IFFALSE 33232
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
32904: LD_VAR 0 12
32908: PUSH
32909: LD_VAR 0 7
32913: ARRAY
32914: PUSH
32915: LD_INT 1
32917: ARRAY
32918: PPUSH
32919: LD_VAR 0 12
32923: PUSH
32924: LD_VAR 0 7
32928: ARRAY
32929: PUSH
32930: LD_INT 2
32932: ARRAY
32933: PPUSH
32934: CALL_OW 488
32938: NOT
32939: PUSH
32940: LD_VAR 0 12
32944: PUSH
32945: LD_VAR 0 7
32949: ARRAY
32950: PUSH
32951: LD_INT 1
32953: ARRAY
32954: PPUSH
32955: LD_VAR 0 12
32959: PUSH
32960: LD_VAR 0 7
32964: ARRAY
32965: PUSH
32966: LD_INT 2
32968: ARRAY
32969: PPUSH
32970: CALL_OW 428
32974: PUSH
32975: LD_INT 0
32977: GREATER
32978: OR
32979: PUSH
32980: LD_VAR 0 12
32984: PUSH
32985: LD_VAR 0 7
32989: ARRAY
32990: PUSH
32991: LD_INT 1
32993: ARRAY
32994: PPUSH
32995: LD_VAR 0 12
32999: PUSH
33000: LD_VAR 0 7
33004: ARRAY
33005: PUSH
33006: LD_INT 2
33008: ARRAY
33009: PPUSH
33010: CALL_OW 351
33014: OR
33015: IFFALSE 33021
// exit ;
33017: POP
33018: POP
33019: GO 33313
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33021: LD_ADDR_VAR 0 8
33025: PUSH
33026: LD_VAR 0 12
33030: PUSH
33031: LD_VAR 0 7
33035: ARRAY
33036: PUSH
33037: LD_INT 1
33039: ARRAY
33040: PPUSH
33041: LD_VAR 0 12
33045: PUSH
33046: LD_VAR 0 7
33050: ARRAY
33051: PUSH
33052: LD_INT 2
33054: ARRAY
33055: PPUSH
33056: CALL_OW 546
33060: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33061: LD_VAR 0 8
33065: PUSH
33066: LD_INT 1
33068: ARRAY
33069: PUSH
33070: LD_VAR 0 8
33074: PUSH
33075: LD_INT 2
33077: ARRAY
33078: PUSH
33079: LD_VAR 0 13
33083: PUSH
33084: LD_INT 2
33086: PLUS
33087: GREATER
33088: OR
33089: PUSH
33090: LD_VAR 0 8
33094: PUSH
33095: LD_INT 2
33097: ARRAY
33098: PUSH
33099: LD_VAR 0 13
33103: PUSH
33104: LD_INT 2
33106: MINUS
33107: LESS
33108: OR
33109: PUSH
33110: LD_VAR 0 8
33114: PUSH
33115: LD_INT 3
33117: ARRAY
33118: PUSH
33119: LD_INT 0
33121: PUSH
33122: LD_INT 8
33124: PUSH
33125: LD_INT 9
33127: PUSH
33128: LD_INT 10
33130: PUSH
33131: LD_INT 11
33133: PUSH
33134: LD_INT 12
33136: PUSH
33137: LD_INT 13
33139: PUSH
33140: LD_INT 16
33142: PUSH
33143: LD_INT 17
33145: PUSH
33146: LD_INT 18
33148: PUSH
33149: LD_INT 19
33151: PUSH
33152: LD_INT 20
33154: PUSH
33155: LD_INT 21
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: IN
33173: NOT
33174: OR
33175: PUSH
33176: LD_VAR 0 8
33180: PUSH
33181: LD_INT 5
33183: ARRAY
33184: NOT
33185: OR
33186: PUSH
33187: LD_VAR 0 8
33191: PUSH
33192: LD_INT 6
33194: ARRAY
33195: PUSH
33196: LD_INT 1
33198: PUSH
33199: LD_INT 2
33201: PUSH
33202: LD_INT 7
33204: PUSH
33205: LD_INT 9
33207: PUSH
33208: LD_INT 10
33210: PUSH
33211: LD_INT 11
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: IN
33222: NOT
33223: OR
33224: IFFALSE 33230
// exit ;
33226: POP
33227: POP
33228: GO 33313
// end ;
33230: GO 32901
33232: POP
33233: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33234: LD_VAR 0 9
33238: PPUSH
33239: LD_VAR 0 3
33243: PPUSH
33244: LD_VAR 0 4
33248: PPUSH
33249: LD_INT 20
33251: PPUSH
33252: CALL 25258 0 4
33256: PUSH
33257: LD_INT 4
33259: ARRAY
33260: IFFALSE 33264
// exit ;
33262: GO 33313
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
33264: LD_VAR 0 2
33268: PUSH
33269: LD_INT 29
33271: PUSH
33272: LD_INT 30
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: IN
33279: PUSH
33280: LD_VAR 0 3
33284: PPUSH
33285: LD_VAR 0 4
33289: PPUSH
33290: LD_VAR 0 9
33294: PPUSH
33295: CALL_OW 440
33299: NOT
33300: AND
33301: IFFALSE 33305
// exit ;
33303: GO 33313
// result := true ;
33305: LD_ADDR_VAR 0 6
33309: PUSH
33310: LD_INT 1
33312: ST_TO_ADDR
// end ;
33313: LD_VAR 0 6
33317: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
33318: LD_INT 0
33320: PPUSH
33321: PPUSH
33322: PPUSH
33323: PPUSH
33324: PPUSH
33325: PPUSH
33326: PPUSH
33327: PPUSH
33328: PPUSH
33329: PPUSH
33330: PPUSH
33331: PPUSH
33332: PPUSH
33333: PPUSH
33334: PPUSH
33335: PPUSH
33336: PPUSH
33337: PPUSH
33338: PPUSH
33339: PPUSH
33340: PPUSH
33341: PPUSH
33342: PPUSH
33343: PPUSH
33344: PPUSH
33345: PPUSH
33346: PPUSH
33347: PPUSH
33348: PPUSH
33349: PPUSH
33350: PPUSH
33351: PPUSH
33352: PPUSH
33353: PPUSH
33354: PPUSH
33355: PPUSH
33356: PPUSH
33357: PPUSH
33358: PPUSH
33359: PPUSH
33360: PPUSH
33361: PPUSH
33362: PPUSH
33363: PPUSH
33364: PPUSH
33365: PPUSH
33366: PPUSH
33367: PPUSH
33368: PPUSH
33369: PPUSH
33370: PPUSH
33371: PPUSH
33372: PPUSH
33373: PPUSH
33374: PPUSH
33375: PPUSH
33376: PPUSH
33377: PPUSH
// result = [ ] ;
33378: LD_ADDR_VAR 0 7
33382: PUSH
33383: EMPTY
33384: ST_TO_ADDR
// temp_list = [ ] ;
33385: LD_ADDR_VAR 0 9
33389: PUSH
33390: EMPTY
33391: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
33392: LD_VAR 0 4
33396: PUSH
33397: LD_INT 0
33399: PUSH
33400: LD_INT 1
33402: PUSH
33403: LD_INT 2
33405: PUSH
33406: LD_INT 3
33408: PUSH
33409: LD_INT 4
33411: PUSH
33412: LD_INT 5
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: IN
33423: NOT
33424: PUSH
33425: LD_VAR 0 1
33429: PUSH
33430: LD_INT 0
33432: PUSH
33433: LD_INT 1
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: IN
33440: PUSH
33441: LD_VAR 0 5
33445: PUSH
33446: LD_INT 1
33448: PUSH
33449: LD_INT 2
33451: PUSH
33452: LD_INT 3
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: LIST
33459: IN
33460: NOT
33461: AND
33462: OR
33463: IFFALSE 33467
// exit ;
33465: GO 51858
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
33467: LD_VAR 0 1
33471: PUSH
33472: LD_INT 6
33474: PUSH
33475: LD_INT 7
33477: PUSH
33478: LD_INT 8
33480: PUSH
33481: LD_INT 13
33483: PUSH
33484: LD_INT 12
33486: PUSH
33487: LD_INT 15
33489: PUSH
33490: LD_INT 11
33492: PUSH
33493: LD_INT 14
33495: PUSH
33496: LD_INT 10
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: IN
33510: IFFALSE 33520
// btype = b_lab ;
33512: LD_ADDR_VAR 0 1
33516: PUSH
33517: LD_INT 6
33519: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
33520: LD_VAR 0 6
33524: PUSH
33525: LD_INT 0
33527: PUSH
33528: LD_INT 1
33530: PUSH
33531: LD_INT 2
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: LIST
33538: IN
33539: NOT
33540: PUSH
33541: LD_VAR 0 1
33545: PUSH
33546: LD_INT 0
33548: PUSH
33549: LD_INT 1
33551: PUSH
33552: LD_INT 2
33554: PUSH
33555: LD_INT 3
33557: PUSH
33558: LD_INT 6
33560: PUSH
33561: LD_INT 36
33563: PUSH
33564: LD_INT 4
33566: PUSH
33567: LD_INT 5
33569: PUSH
33570: LD_INT 31
33572: PUSH
33573: LD_INT 32
33575: PUSH
33576: LD_INT 33
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: IN
33592: NOT
33593: PUSH
33594: LD_VAR 0 6
33598: PUSH
33599: LD_INT 1
33601: EQUAL
33602: AND
33603: OR
33604: PUSH
33605: LD_VAR 0 1
33609: PUSH
33610: LD_INT 2
33612: PUSH
33613: LD_INT 3
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: IN
33620: NOT
33621: PUSH
33622: LD_VAR 0 6
33626: PUSH
33627: LD_INT 2
33629: EQUAL
33630: AND
33631: OR
33632: IFFALSE 33642
// mode = 0 ;
33634: LD_ADDR_VAR 0 6
33638: PUSH
33639: LD_INT 0
33641: ST_TO_ADDR
// case mode of 0 :
33642: LD_VAR 0 6
33646: PUSH
33647: LD_INT 0
33649: DOUBLE
33650: EQUAL
33651: IFTRUE 33655
33653: GO 45108
33655: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33656: LD_ADDR_VAR 0 11
33660: PUSH
33661: LD_INT 0
33663: PUSH
33664: LD_INT 0
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 0
33673: PUSH
33674: LD_INT 1
33676: NEG
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 1
33684: PUSH
33685: LD_INT 0
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 1
33694: PUSH
33695: LD_INT 1
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: LD_INT 0
33704: PUSH
33705: LD_INT 1
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 1
33714: NEG
33715: PUSH
33716: LD_INT 0
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 1
33725: NEG
33726: PUSH
33727: LD_INT 1
33729: NEG
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 1
33737: NEG
33738: PUSH
33739: LD_INT 2
33741: NEG
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 0
33749: PUSH
33750: LD_INT 2
33752: NEG
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 1
33760: PUSH
33761: LD_INT 1
33763: NEG
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 1
33771: PUSH
33772: LD_INT 2
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 0
33781: PUSH
33782: LD_INT 2
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 1
33791: NEG
33792: PUSH
33793: LD_INT 1
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 1
33802: PUSH
33803: LD_INT 3
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 0
33812: PUSH
33813: LD_INT 3
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 1
33822: NEG
33823: PUSH
33824: LD_INT 2
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33849: LD_ADDR_VAR 0 12
33853: PUSH
33854: LD_INT 0
33856: PUSH
33857: LD_INT 0
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 0
33866: PUSH
33867: LD_INT 1
33869: NEG
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 1
33877: PUSH
33878: LD_INT 0
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 1
33887: PUSH
33888: LD_INT 1
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: LD_INT 0
33897: PUSH
33898: LD_INT 1
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: LD_INT 1
33907: NEG
33908: PUSH
33909: LD_INT 0
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 1
33918: NEG
33919: PUSH
33920: LD_INT 1
33922: NEG
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 1
33930: PUSH
33931: LD_INT 1
33933: NEG
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 2
33941: PUSH
33942: LD_INT 0
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 2
33951: PUSH
33952: LD_INT 1
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 1
33961: NEG
33962: PUSH
33963: LD_INT 1
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 2
33972: NEG
33973: PUSH
33974: LD_INT 0
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 2
33983: NEG
33984: PUSH
33985: LD_INT 1
33987: NEG
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 2
33995: NEG
33996: PUSH
33997: LD_INT 1
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 3
34006: NEG
34007: PUSH
34008: LD_INT 0
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 3
34017: NEG
34018: PUSH
34019: LD_INT 1
34021: NEG
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34045: LD_ADDR_VAR 0 13
34049: PUSH
34050: LD_INT 0
34052: PUSH
34053: LD_INT 0
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 0
34062: PUSH
34063: LD_INT 1
34065: NEG
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 1
34073: PUSH
34074: LD_INT 0
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 1
34083: PUSH
34084: LD_INT 1
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: LD_INT 0
34093: PUSH
34094: LD_INT 1
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 1
34103: NEG
34104: PUSH
34105: LD_INT 0
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 1
34114: NEG
34115: PUSH
34116: LD_INT 1
34118: NEG
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 1
34126: NEG
34127: PUSH
34128: LD_INT 2
34130: NEG
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: PUSH
34136: LD_INT 2
34138: PUSH
34139: LD_INT 1
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 2
34148: PUSH
34149: LD_INT 2
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: LD_INT 1
34158: PUSH
34159: LD_INT 2
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 2
34168: NEG
34169: PUSH
34170: LD_INT 1
34172: NEG
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 2
34180: NEG
34181: PUSH
34182: LD_INT 2
34184: NEG
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 2
34192: NEG
34193: PUSH
34194: LD_INT 3
34196: NEG
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 3
34204: NEG
34205: PUSH
34206: LD_INT 2
34208: NEG
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 3
34216: NEG
34217: PUSH
34218: LD_INT 3
34220: NEG
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34244: LD_ADDR_VAR 0 14
34248: PUSH
34249: LD_INT 0
34251: PUSH
34252: LD_INT 0
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 0
34261: PUSH
34262: LD_INT 1
34264: NEG
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 1
34272: PUSH
34273: LD_INT 0
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 1
34282: PUSH
34283: LD_INT 1
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: LD_INT 0
34292: PUSH
34293: LD_INT 1
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 1
34302: NEG
34303: PUSH
34304: LD_INT 0
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 1
34313: NEG
34314: PUSH
34315: LD_INT 1
34317: NEG
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 1
34325: NEG
34326: PUSH
34327: LD_INT 2
34329: NEG
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 0
34337: PUSH
34338: LD_INT 2
34340: NEG
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 1
34348: PUSH
34349: LD_INT 1
34351: NEG
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 1
34359: PUSH
34360: LD_INT 2
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 0
34369: PUSH
34370: LD_INT 2
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 1
34379: NEG
34380: PUSH
34381: LD_INT 1
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 1
34390: NEG
34391: PUSH
34392: LD_INT 3
34394: NEG
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 0
34402: PUSH
34403: LD_INT 3
34405: NEG
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 1
34413: PUSH
34414: LD_INT 2
34416: NEG
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34440: LD_ADDR_VAR 0 15
34444: PUSH
34445: LD_INT 0
34447: PUSH
34448: LD_INT 0
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 0
34457: PUSH
34458: LD_INT 1
34460: NEG
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 1
34468: PUSH
34469: LD_INT 0
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 1
34478: PUSH
34479: LD_INT 1
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 0
34488: PUSH
34489: LD_INT 1
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 1
34498: NEG
34499: PUSH
34500: LD_INT 0
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 1
34509: NEG
34510: PUSH
34511: LD_INT 1
34513: NEG
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 1
34521: PUSH
34522: LD_INT 1
34524: NEG
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 2
34532: PUSH
34533: LD_INT 0
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 2
34542: PUSH
34543: LD_INT 1
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 1
34552: NEG
34553: PUSH
34554: LD_INT 1
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 2
34563: NEG
34564: PUSH
34565: LD_INT 0
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 2
34574: NEG
34575: PUSH
34576: LD_INT 1
34578: NEG
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 2
34586: PUSH
34587: LD_INT 1
34589: NEG
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 3
34597: PUSH
34598: LD_INT 0
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 3
34607: PUSH
34608: LD_INT 1
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34633: LD_ADDR_VAR 0 16
34637: PUSH
34638: LD_INT 0
34640: PUSH
34641: LD_INT 0
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 0
34650: PUSH
34651: LD_INT 1
34653: NEG
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 1
34661: PUSH
34662: LD_INT 0
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 1
34671: PUSH
34672: LD_INT 1
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 0
34681: PUSH
34682: LD_INT 1
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 1
34691: NEG
34692: PUSH
34693: LD_INT 0
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 1
34702: NEG
34703: PUSH
34704: LD_INT 1
34706: NEG
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 1
34714: NEG
34715: PUSH
34716: LD_INT 2
34718: NEG
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 2
34726: PUSH
34727: LD_INT 1
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 2
34736: PUSH
34737: LD_INT 2
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 1
34746: PUSH
34747: LD_INT 2
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 2
34756: NEG
34757: PUSH
34758: LD_INT 1
34760: NEG
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 2
34768: NEG
34769: PUSH
34770: LD_INT 2
34772: NEG
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 3
34780: PUSH
34781: LD_INT 2
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: LD_INT 3
34790: PUSH
34791: LD_INT 3
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 2
34800: PUSH
34801: LD_INT 3
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34826: LD_ADDR_VAR 0 17
34830: PUSH
34831: LD_INT 0
34833: PUSH
34834: LD_INT 0
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 0
34843: PUSH
34844: LD_INT 1
34846: NEG
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 1
34854: PUSH
34855: LD_INT 0
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 1
34864: PUSH
34865: LD_INT 1
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 0
34874: PUSH
34875: LD_INT 1
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 1
34884: NEG
34885: PUSH
34886: LD_INT 0
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 1
34895: NEG
34896: PUSH
34897: LD_INT 1
34899: NEG
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 1
34907: NEG
34908: PUSH
34909: LD_INT 2
34911: NEG
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: LD_INT 2
34922: NEG
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 1
34930: PUSH
34931: LD_INT 1
34933: NEG
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 2
34941: PUSH
34942: LD_INT 0
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 2
34951: PUSH
34952: LD_INT 1
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 2
34961: PUSH
34962: LD_INT 2
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 1
34971: PUSH
34972: LD_INT 2
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 0
34981: PUSH
34982: LD_INT 2
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 1
34991: NEG
34992: PUSH
34993: LD_INT 1
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 2
35002: NEG
35003: PUSH
35004: LD_INT 0
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 2
35013: NEG
35014: PUSH
35015: LD_INT 1
35017: NEG
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 2
35025: NEG
35026: PUSH
35027: LD_INT 2
35029: NEG
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35056: LD_ADDR_VAR 0 18
35060: PUSH
35061: LD_INT 0
35063: PUSH
35064: LD_INT 0
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 0
35073: PUSH
35074: LD_INT 1
35076: NEG
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 1
35084: PUSH
35085: LD_INT 0
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 1
35094: PUSH
35095: LD_INT 1
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 0
35104: PUSH
35105: LD_INT 1
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 1
35114: NEG
35115: PUSH
35116: LD_INT 0
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 1
35125: NEG
35126: PUSH
35127: LD_INT 1
35129: NEG
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 1
35137: NEG
35138: PUSH
35139: LD_INT 2
35141: NEG
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 0
35149: PUSH
35150: LD_INT 2
35152: NEG
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 1
35160: PUSH
35161: LD_INT 1
35163: NEG
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 2
35171: PUSH
35172: LD_INT 0
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 2
35181: PUSH
35182: LD_INT 1
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 2
35191: PUSH
35192: LD_INT 2
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 1
35201: PUSH
35202: LD_INT 2
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 0
35211: PUSH
35212: LD_INT 2
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 1
35221: NEG
35222: PUSH
35223: LD_INT 1
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 2
35232: NEG
35233: PUSH
35234: LD_INT 0
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 2
35243: NEG
35244: PUSH
35245: LD_INT 1
35247: NEG
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: LD_INT 2
35255: NEG
35256: PUSH
35257: LD_INT 2
35259: NEG
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35286: LD_ADDR_VAR 0 19
35290: PUSH
35291: LD_INT 0
35293: PUSH
35294: LD_INT 0
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 0
35303: PUSH
35304: LD_INT 1
35306: NEG
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 1
35314: PUSH
35315: LD_INT 0
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 1
35324: PUSH
35325: LD_INT 1
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 0
35334: PUSH
35335: LD_INT 1
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 1
35344: NEG
35345: PUSH
35346: LD_INT 0
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 1
35355: NEG
35356: PUSH
35357: LD_INT 1
35359: NEG
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: LD_INT 1
35367: NEG
35368: PUSH
35369: LD_INT 2
35371: NEG
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 0
35379: PUSH
35380: LD_INT 2
35382: NEG
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PUSH
35388: LD_INT 1
35390: PUSH
35391: LD_INT 1
35393: NEG
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: LD_INT 2
35401: PUSH
35402: LD_INT 0
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: LD_INT 2
35411: PUSH
35412: LD_INT 1
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 2
35421: PUSH
35422: LD_INT 2
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: LD_INT 1
35431: PUSH
35432: LD_INT 2
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 0
35441: PUSH
35442: LD_INT 2
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 1
35451: NEG
35452: PUSH
35453: LD_INT 1
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 2
35462: NEG
35463: PUSH
35464: LD_INT 0
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 2
35473: NEG
35474: PUSH
35475: LD_INT 1
35477: NEG
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 2
35485: NEG
35486: PUSH
35487: LD_INT 2
35489: NEG
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35516: LD_ADDR_VAR 0 20
35520: PUSH
35521: LD_INT 0
35523: PUSH
35524: LD_INT 0
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 0
35533: PUSH
35534: LD_INT 1
35536: NEG
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 1
35544: PUSH
35545: LD_INT 0
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 1
35554: PUSH
35555: LD_INT 1
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 0
35564: PUSH
35565: LD_INT 1
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 1
35574: NEG
35575: PUSH
35576: LD_INT 0
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 1
35585: NEG
35586: PUSH
35587: LD_INT 1
35589: NEG
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 1
35597: NEG
35598: PUSH
35599: LD_INT 2
35601: NEG
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 0
35609: PUSH
35610: LD_INT 2
35612: NEG
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 1
35620: PUSH
35621: LD_INT 1
35623: NEG
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 2
35631: PUSH
35632: LD_INT 0
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 2
35641: PUSH
35642: LD_INT 1
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 2
35651: PUSH
35652: LD_INT 2
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 1
35661: PUSH
35662: LD_INT 2
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 0
35671: PUSH
35672: LD_INT 2
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: LD_INT 1
35681: NEG
35682: PUSH
35683: LD_INT 1
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 2
35692: NEG
35693: PUSH
35694: LD_INT 0
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 2
35703: NEG
35704: PUSH
35705: LD_INT 1
35707: NEG
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 2
35715: NEG
35716: PUSH
35717: LD_INT 2
35719: NEG
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: LIST
35734: LIST
35735: LIST
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: LIST
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35746: LD_ADDR_VAR 0 21
35750: PUSH
35751: LD_INT 0
35753: PUSH
35754: LD_INT 0
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: LD_INT 0
35763: PUSH
35764: LD_INT 1
35766: NEG
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 1
35774: PUSH
35775: LD_INT 0
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 1
35784: PUSH
35785: LD_INT 1
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 0
35794: PUSH
35795: LD_INT 1
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 1
35804: NEG
35805: PUSH
35806: LD_INT 0
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 1
35815: NEG
35816: PUSH
35817: LD_INT 1
35819: NEG
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 1
35827: NEG
35828: PUSH
35829: LD_INT 2
35831: NEG
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 0
35839: PUSH
35840: LD_INT 2
35842: NEG
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 1
35850: PUSH
35851: LD_INT 1
35853: NEG
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 2
35861: PUSH
35862: LD_INT 0
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 2
35871: PUSH
35872: LD_INT 1
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 2
35881: PUSH
35882: LD_INT 2
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: LD_INT 1
35891: PUSH
35892: LD_INT 2
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 0
35901: PUSH
35902: LD_INT 2
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 1
35911: NEG
35912: PUSH
35913: LD_INT 1
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 2
35922: NEG
35923: PUSH
35924: LD_INT 0
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: LD_INT 2
35933: NEG
35934: PUSH
35935: LD_INT 1
35937: NEG
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 2
35945: NEG
35946: PUSH
35947: LD_INT 2
35949: NEG
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35976: LD_ADDR_VAR 0 22
35980: PUSH
35981: LD_INT 0
35983: PUSH
35984: LD_INT 0
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 0
35993: PUSH
35994: LD_INT 1
35996: NEG
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 1
36004: PUSH
36005: LD_INT 0
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 1
36014: PUSH
36015: LD_INT 1
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 0
36024: PUSH
36025: LD_INT 1
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 1
36034: NEG
36035: PUSH
36036: LD_INT 0
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 1
36045: NEG
36046: PUSH
36047: LD_INT 1
36049: NEG
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 1
36057: NEG
36058: PUSH
36059: LD_INT 2
36061: NEG
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 0
36069: PUSH
36070: LD_INT 2
36072: NEG
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 1
36080: PUSH
36081: LD_INT 1
36083: NEG
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 2
36091: PUSH
36092: LD_INT 0
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 2
36101: PUSH
36102: LD_INT 1
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 2
36111: PUSH
36112: LD_INT 2
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 1
36121: PUSH
36122: LD_INT 2
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 0
36131: PUSH
36132: LD_INT 2
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 1
36141: NEG
36142: PUSH
36143: LD_INT 1
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: LD_INT 2
36152: NEG
36153: PUSH
36154: LD_INT 0
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: LD_INT 2
36163: NEG
36164: PUSH
36165: LD_INT 1
36167: NEG
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 2
36175: NEG
36176: PUSH
36177: LD_INT 2
36179: NEG
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36206: LD_ADDR_VAR 0 23
36210: PUSH
36211: LD_INT 0
36213: PUSH
36214: LD_INT 0
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 0
36223: PUSH
36224: LD_INT 1
36226: NEG
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 1
36234: PUSH
36235: LD_INT 0
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 1
36244: PUSH
36245: LD_INT 1
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 0
36254: PUSH
36255: LD_INT 1
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 1
36264: NEG
36265: PUSH
36266: LD_INT 0
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 1
36275: NEG
36276: PUSH
36277: LD_INT 1
36279: NEG
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 1
36287: NEG
36288: PUSH
36289: LD_INT 2
36291: NEG
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 0
36299: PUSH
36300: LD_INT 2
36302: NEG
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 1
36310: PUSH
36311: LD_INT 1
36313: NEG
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: LD_INT 2
36321: PUSH
36322: LD_INT 0
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 2
36331: PUSH
36332: LD_INT 1
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 2
36341: PUSH
36342: LD_INT 2
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 1
36351: PUSH
36352: LD_INT 2
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 0
36361: PUSH
36362: LD_INT 2
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 1
36371: NEG
36372: PUSH
36373: LD_INT 1
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 2
36382: NEG
36383: PUSH
36384: LD_INT 0
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 2
36393: NEG
36394: PUSH
36395: LD_INT 1
36397: NEG
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 2
36405: NEG
36406: PUSH
36407: LD_INT 2
36409: NEG
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: PUSH
36415: LD_INT 2
36417: NEG
36418: PUSH
36419: LD_INT 3
36421: NEG
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 1
36429: NEG
36430: PUSH
36431: LD_INT 3
36433: NEG
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 1
36441: PUSH
36442: LD_INT 2
36444: NEG
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 2
36452: PUSH
36453: LD_INT 1
36455: NEG
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
36486: LD_ADDR_VAR 0 24
36490: PUSH
36491: LD_INT 0
36493: PUSH
36494: LD_INT 0
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 0
36503: PUSH
36504: LD_INT 1
36506: NEG
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_INT 1
36514: PUSH
36515: LD_INT 0
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: PUSH
36522: LD_INT 1
36524: PUSH
36525: LD_INT 1
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 0
36534: PUSH
36535: LD_INT 1
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 1
36544: NEG
36545: PUSH
36546: LD_INT 0
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 1
36555: NEG
36556: PUSH
36557: LD_INT 1
36559: NEG
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 1
36567: NEG
36568: PUSH
36569: LD_INT 2
36571: NEG
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 0
36579: PUSH
36580: LD_INT 2
36582: NEG
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 1
36590: PUSH
36591: LD_INT 1
36593: NEG
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 2
36601: PUSH
36602: LD_INT 0
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 2
36611: PUSH
36612: LD_INT 1
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 2
36621: PUSH
36622: LD_INT 2
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 1
36631: PUSH
36632: LD_INT 2
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 0
36641: PUSH
36642: LD_INT 2
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 1
36651: NEG
36652: PUSH
36653: LD_INT 1
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: LD_INT 2
36662: NEG
36663: PUSH
36664: LD_INT 0
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: LD_INT 2
36673: NEG
36674: PUSH
36675: LD_INT 1
36677: NEG
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 2
36685: NEG
36686: PUSH
36687: LD_INT 2
36689: NEG
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 1
36697: PUSH
36698: LD_INT 2
36700: NEG
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 2
36708: PUSH
36709: LD_INT 1
36711: NEG
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 3
36719: PUSH
36720: LD_INT 1
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 3
36729: PUSH
36730: LD_INT 2
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
36762: LD_ADDR_VAR 0 25
36766: PUSH
36767: LD_INT 0
36769: PUSH
36770: LD_INT 0
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 0
36779: PUSH
36780: LD_INT 1
36782: NEG
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 1
36790: PUSH
36791: LD_INT 0
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 1
36800: PUSH
36801: LD_INT 1
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 0
36810: PUSH
36811: LD_INT 1
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 1
36820: NEG
36821: PUSH
36822: LD_INT 0
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PUSH
36829: LD_INT 1
36831: NEG
36832: PUSH
36833: LD_INT 1
36835: NEG
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 1
36843: NEG
36844: PUSH
36845: LD_INT 2
36847: NEG
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 0
36855: PUSH
36856: LD_INT 2
36858: NEG
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 1
36866: PUSH
36867: LD_INT 1
36869: NEG
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 2
36877: PUSH
36878: LD_INT 0
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_INT 2
36887: PUSH
36888: LD_INT 1
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 2
36897: PUSH
36898: LD_INT 2
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 1
36907: PUSH
36908: LD_INT 2
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 0
36917: PUSH
36918: LD_INT 2
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 1
36927: NEG
36928: PUSH
36929: LD_INT 1
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 2
36938: NEG
36939: PUSH
36940: LD_INT 0
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 2
36949: NEG
36950: PUSH
36951: LD_INT 1
36953: NEG
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 2
36961: NEG
36962: PUSH
36963: LD_INT 2
36965: NEG
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 3
36973: PUSH
36974: LD_INT 1
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 3
36983: PUSH
36984: LD_INT 2
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 2
36993: PUSH
36994: LD_INT 3
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 1
37003: PUSH
37004: LD_INT 3
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37036: LD_ADDR_VAR 0 26
37040: PUSH
37041: LD_INT 0
37043: PUSH
37044: LD_INT 0
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 0
37053: PUSH
37054: LD_INT 1
37056: NEG
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 1
37064: PUSH
37065: LD_INT 0
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: LD_INT 1
37074: PUSH
37075: LD_INT 1
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 0
37084: PUSH
37085: LD_INT 1
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 1
37094: NEG
37095: PUSH
37096: LD_INT 0
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 1
37105: NEG
37106: PUSH
37107: LD_INT 1
37109: NEG
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: LD_INT 1
37117: NEG
37118: PUSH
37119: LD_INT 2
37121: NEG
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 0
37129: PUSH
37130: LD_INT 2
37132: NEG
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 1
37140: PUSH
37141: LD_INT 1
37143: NEG
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 2
37151: PUSH
37152: LD_INT 0
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 2
37161: PUSH
37162: LD_INT 1
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 2
37171: PUSH
37172: LD_INT 2
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 1
37181: PUSH
37182: LD_INT 2
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 0
37191: PUSH
37192: LD_INT 2
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 1
37201: NEG
37202: PUSH
37203: LD_INT 1
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 2
37212: NEG
37213: PUSH
37214: LD_INT 0
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 2
37223: NEG
37224: PUSH
37225: LD_INT 1
37227: NEG
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 2
37235: NEG
37236: PUSH
37237: LD_INT 2
37239: NEG
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 2
37247: PUSH
37248: LD_INT 3
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 1
37257: PUSH
37258: LD_INT 3
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 1
37267: NEG
37268: PUSH
37269: LD_INT 2
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 2
37278: NEG
37279: PUSH
37280: LD_INT 1
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37312: LD_ADDR_VAR 0 27
37316: PUSH
37317: LD_INT 0
37319: PUSH
37320: LD_INT 0
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 0
37329: PUSH
37330: LD_INT 1
37332: NEG
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 1
37340: PUSH
37341: LD_INT 0
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: PUSH
37348: LD_INT 1
37350: PUSH
37351: LD_INT 1
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 0
37360: PUSH
37361: LD_INT 1
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 1
37370: NEG
37371: PUSH
37372: LD_INT 0
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PUSH
37379: LD_INT 1
37381: NEG
37382: PUSH
37383: LD_INT 1
37385: NEG
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 1
37393: NEG
37394: PUSH
37395: LD_INT 2
37397: NEG
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 0
37405: PUSH
37406: LD_INT 2
37408: NEG
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 1
37416: PUSH
37417: LD_INT 1
37419: NEG
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 2
37427: PUSH
37428: LD_INT 0
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 2
37437: PUSH
37438: LD_INT 1
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 2
37447: PUSH
37448: LD_INT 2
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 1
37457: PUSH
37458: LD_INT 2
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 0
37467: PUSH
37468: LD_INT 2
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: LD_INT 1
37477: NEG
37478: PUSH
37479: LD_INT 1
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 2
37488: NEG
37489: PUSH
37490: LD_INT 0
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 2
37499: NEG
37500: PUSH
37501: LD_INT 1
37503: NEG
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 2
37511: NEG
37512: PUSH
37513: LD_INT 2
37515: NEG
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 1
37523: NEG
37524: PUSH
37525: LD_INT 2
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 2
37534: NEG
37535: PUSH
37536: LD_INT 1
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 3
37545: NEG
37546: PUSH
37547: LD_INT 1
37549: NEG
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 3
37557: NEG
37558: PUSH
37559: LD_INT 2
37561: NEG
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37592: LD_ADDR_VAR 0 28
37596: PUSH
37597: LD_INT 0
37599: PUSH
37600: LD_INT 0
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 0
37609: PUSH
37610: LD_INT 1
37612: NEG
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 1
37620: PUSH
37621: LD_INT 0
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 1
37630: PUSH
37631: LD_INT 1
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 0
37640: PUSH
37641: LD_INT 1
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 1
37650: NEG
37651: PUSH
37652: LD_INT 0
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 1
37661: NEG
37662: PUSH
37663: LD_INT 1
37665: NEG
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 1
37673: NEG
37674: PUSH
37675: LD_INT 2
37677: NEG
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 0
37685: PUSH
37686: LD_INT 2
37688: NEG
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 1
37696: PUSH
37697: LD_INT 1
37699: NEG
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 2
37707: PUSH
37708: LD_INT 0
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 2
37717: PUSH
37718: LD_INT 1
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 2
37727: PUSH
37728: LD_INT 2
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 1
37737: PUSH
37738: LD_INT 2
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 0
37747: PUSH
37748: LD_INT 2
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 1
37757: NEG
37758: PUSH
37759: LD_INT 1
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 2
37768: NEG
37769: PUSH
37770: LD_INT 0
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 2
37779: NEG
37780: PUSH
37781: LD_INT 1
37783: NEG
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 2
37791: NEG
37792: PUSH
37793: LD_INT 2
37795: NEG
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: LD_INT 2
37803: NEG
37804: PUSH
37805: LD_INT 3
37807: NEG
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 1
37815: NEG
37816: PUSH
37817: LD_INT 3
37819: NEG
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 3
37827: NEG
37828: PUSH
37829: LD_INT 1
37831: NEG
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 3
37839: NEG
37840: PUSH
37841: LD_INT 2
37843: NEG
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37874: LD_ADDR_VAR 0 29
37878: PUSH
37879: LD_INT 0
37881: PUSH
37882: LD_INT 0
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 0
37891: PUSH
37892: LD_INT 1
37894: NEG
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 1
37902: PUSH
37903: LD_INT 0
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 1
37912: PUSH
37913: LD_INT 1
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 0
37922: PUSH
37923: LD_INT 1
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 1
37932: NEG
37933: PUSH
37934: LD_INT 0
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 1
37943: NEG
37944: PUSH
37945: LD_INT 1
37947: NEG
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 1
37955: NEG
37956: PUSH
37957: LD_INT 2
37959: NEG
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 0
37967: PUSH
37968: LD_INT 2
37970: NEG
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 1
37978: PUSH
37979: LD_INT 1
37981: NEG
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 2
37989: PUSH
37990: LD_INT 0
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 2
37999: PUSH
38000: LD_INT 1
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 1
38009: PUSH
38010: LD_INT 2
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 0
38019: PUSH
38020: LD_INT 2
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 1
38029: NEG
38030: PUSH
38031: LD_INT 1
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 2
38040: NEG
38041: PUSH
38042: LD_INT 1
38044: NEG
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 2
38052: NEG
38053: PUSH
38054: LD_INT 2
38056: NEG
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 2
38064: NEG
38065: PUSH
38066: LD_INT 3
38068: NEG
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 2
38076: PUSH
38077: LD_INT 1
38079: NEG
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 3
38087: PUSH
38088: LD_INT 1
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 1
38097: PUSH
38098: LD_INT 3
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 1
38107: NEG
38108: PUSH
38109: LD_INT 2
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 3
38118: NEG
38119: PUSH
38120: LD_INT 2
38122: NEG
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38153: LD_ADDR_VAR 0 30
38157: PUSH
38158: LD_INT 0
38160: PUSH
38161: LD_INT 0
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 0
38170: PUSH
38171: LD_INT 1
38173: NEG
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 1
38181: PUSH
38182: LD_INT 0
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 1
38191: PUSH
38192: LD_INT 1
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 0
38201: PUSH
38202: LD_INT 1
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 1
38211: NEG
38212: PUSH
38213: LD_INT 0
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 1
38222: NEG
38223: PUSH
38224: LD_INT 1
38226: NEG
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 1
38234: NEG
38235: PUSH
38236: LD_INT 2
38238: NEG
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 0
38246: PUSH
38247: LD_INT 2
38249: NEG
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 1
38257: PUSH
38258: LD_INT 1
38260: NEG
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 2
38268: PUSH
38269: LD_INT 0
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 2
38278: PUSH
38279: LD_INT 1
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 2
38288: PUSH
38289: LD_INT 2
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 1
38298: PUSH
38299: LD_INT 2
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 1
38308: NEG
38309: PUSH
38310: LD_INT 1
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 2
38319: NEG
38320: PUSH
38321: LD_INT 0
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 2
38330: NEG
38331: PUSH
38332: LD_INT 1
38334: NEG
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 1
38342: NEG
38343: PUSH
38344: LD_INT 3
38346: NEG
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 1
38354: PUSH
38355: LD_INT 2
38357: NEG
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 3
38365: PUSH
38366: LD_INT 2
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 2
38375: PUSH
38376: LD_INT 3
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 2
38385: NEG
38386: PUSH
38387: LD_INT 1
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 3
38396: NEG
38397: PUSH
38398: LD_INT 1
38400: NEG
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38431: LD_ADDR_VAR 0 31
38435: PUSH
38436: LD_INT 0
38438: PUSH
38439: LD_INT 0
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: LD_INT 0
38448: PUSH
38449: LD_INT 1
38451: NEG
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 1
38459: PUSH
38460: LD_INT 0
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 1
38469: PUSH
38470: LD_INT 1
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 0
38479: PUSH
38480: LD_INT 1
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 1
38489: NEG
38490: PUSH
38491: LD_INT 0
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 1
38500: NEG
38501: PUSH
38502: LD_INT 1
38504: NEG
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 1
38512: NEG
38513: PUSH
38514: LD_INT 2
38516: NEG
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 1
38524: PUSH
38525: LD_INT 1
38527: NEG
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 2
38535: PUSH
38536: LD_INT 0
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 2
38545: PUSH
38546: LD_INT 1
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 2
38555: PUSH
38556: LD_INT 2
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 1
38565: PUSH
38566: LD_INT 2
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 0
38575: PUSH
38576: LD_INT 2
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 1
38585: NEG
38586: PUSH
38587: LD_INT 1
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 2
38596: NEG
38597: PUSH
38598: LD_INT 1
38600: NEG
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 2
38608: NEG
38609: PUSH
38610: LD_INT 2
38612: NEG
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 2
38620: NEG
38621: PUSH
38622: LD_INT 3
38624: NEG
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 2
38632: PUSH
38633: LD_INT 1
38635: NEG
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: LD_INT 3
38643: PUSH
38644: LD_INT 1
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: PUSH
38651: LD_INT 1
38653: PUSH
38654: LD_INT 3
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 1
38663: NEG
38664: PUSH
38665: LD_INT 2
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 3
38674: NEG
38675: PUSH
38676: LD_INT 2
38678: NEG
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38709: LD_ADDR_VAR 0 32
38713: PUSH
38714: LD_INT 0
38716: PUSH
38717: LD_INT 0
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 0
38726: PUSH
38727: LD_INT 1
38729: NEG
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 1
38737: PUSH
38738: LD_INT 0
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 1
38747: PUSH
38748: LD_INT 1
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 0
38757: PUSH
38758: LD_INT 1
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 1
38767: NEG
38768: PUSH
38769: LD_INT 0
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 1
38778: NEG
38779: PUSH
38780: LD_INT 1
38782: NEG
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 1
38790: NEG
38791: PUSH
38792: LD_INT 2
38794: NEG
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 0
38802: PUSH
38803: LD_INT 2
38805: NEG
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 1
38813: PUSH
38814: LD_INT 1
38816: NEG
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 2
38824: PUSH
38825: LD_INT 1
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 2
38834: PUSH
38835: LD_INT 2
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 1
38844: PUSH
38845: LD_INT 2
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 0
38854: PUSH
38855: LD_INT 2
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 1
38864: NEG
38865: PUSH
38866: LD_INT 1
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 2
38875: NEG
38876: PUSH
38877: LD_INT 0
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 2
38886: NEG
38887: PUSH
38888: LD_INT 1
38890: NEG
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 1
38898: NEG
38899: PUSH
38900: LD_INT 3
38902: NEG
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 1
38910: PUSH
38911: LD_INT 2
38913: NEG
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 3
38921: PUSH
38922: LD_INT 2
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 2
38931: PUSH
38932: LD_INT 3
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 2
38941: NEG
38942: PUSH
38943: LD_INT 1
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 3
38952: NEG
38953: PUSH
38954: LD_INT 1
38956: NEG
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38987: LD_ADDR_VAR 0 33
38991: PUSH
38992: LD_INT 0
38994: PUSH
38995: LD_INT 0
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 0
39004: PUSH
39005: LD_INT 1
39007: NEG
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 1
39015: PUSH
39016: LD_INT 0
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 1
39025: PUSH
39026: LD_INT 1
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 0
39035: PUSH
39036: LD_INT 1
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 1
39045: NEG
39046: PUSH
39047: LD_INT 0
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 1
39056: NEG
39057: PUSH
39058: LD_INT 1
39060: NEG
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 1
39068: NEG
39069: PUSH
39070: LD_INT 2
39072: NEG
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 1
39080: PUSH
39081: LD_INT 1
39083: NEG
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 2
39091: PUSH
39092: LD_INT 0
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 2
39101: PUSH
39102: LD_INT 1
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 1
39111: PUSH
39112: LD_INT 2
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 0
39121: PUSH
39122: LD_INT 2
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 1
39131: NEG
39132: PUSH
39133: LD_INT 1
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 2
39142: NEG
39143: PUSH
39144: LD_INT 0
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 2
39153: NEG
39154: PUSH
39155: LD_INT 1
39157: NEG
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 2
39165: NEG
39166: PUSH
39167: LD_INT 2
39169: NEG
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 2
39177: NEG
39178: PUSH
39179: LD_INT 3
39181: NEG
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 2
39189: PUSH
39190: LD_INT 1
39192: NEG
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 3
39200: PUSH
39201: LD_INT 1
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 1
39210: PUSH
39211: LD_INT 3
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 1
39220: NEG
39221: PUSH
39222: LD_INT 2
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 3
39231: NEG
39232: PUSH
39233: LD_INT 2
39235: NEG
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39266: LD_ADDR_VAR 0 34
39270: PUSH
39271: LD_INT 0
39273: PUSH
39274: LD_INT 0
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 0
39283: PUSH
39284: LD_INT 1
39286: NEG
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 1
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 1
39304: PUSH
39305: LD_INT 1
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 0
39314: PUSH
39315: LD_INT 1
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 1
39324: NEG
39325: PUSH
39326: LD_INT 0
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 1
39335: NEG
39336: PUSH
39337: LD_INT 1
39339: NEG
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 1
39347: NEG
39348: PUSH
39349: LD_INT 2
39351: NEG
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 0
39359: PUSH
39360: LD_INT 2
39362: NEG
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 1
39370: PUSH
39371: LD_INT 1
39373: NEG
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 2
39381: PUSH
39382: LD_INT 1
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 2
39391: PUSH
39392: LD_INT 2
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 1
39401: PUSH
39402: LD_INT 2
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 1
39411: NEG
39412: PUSH
39413: LD_INT 1
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 2
39422: NEG
39423: PUSH
39424: LD_INT 0
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 2
39433: NEG
39434: PUSH
39435: LD_INT 1
39437: NEG
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 2
39445: NEG
39446: PUSH
39447: LD_INT 2
39449: NEG
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 1
39457: NEG
39458: PUSH
39459: LD_INT 3
39461: NEG
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 1
39469: PUSH
39470: LD_INT 2
39472: NEG
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 3
39480: PUSH
39481: LD_INT 2
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 2
39490: PUSH
39491: LD_INT 3
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 2
39500: NEG
39501: PUSH
39502: LD_INT 1
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 3
39511: NEG
39512: PUSH
39513: LD_INT 1
39515: NEG
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39546: LD_ADDR_VAR 0 35
39550: PUSH
39551: LD_INT 0
39553: PUSH
39554: LD_INT 0
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 0
39563: PUSH
39564: LD_INT 1
39566: NEG
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 1
39574: PUSH
39575: LD_INT 0
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 1
39584: PUSH
39585: LD_INT 1
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 0
39594: PUSH
39595: LD_INT 1
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 1
39604: NEG
39605: PUSH
39606: LD_INT 0
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 1
39615: NEG
39616: PUSH
39617: LD_INT 1
39619: NEG
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 2
39627: PUSH
39628: LD_INT 1
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 2
39637: NEG
39638: PUSH
39639: LD_INT 1
39641: NEG
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39658: LD_ADDR_VAR 0 36
39662: PUSH
39663: LD_INT 0
39665: PUSH
39666: LD_INT 0
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 0
39675: PUSH
39676: LD_INT 1
39678: NEG
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 1
39686: PUSH
39687: LD_INT 0
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 1
39696: PUSH
39697: LD_INT 1
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 0
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 1
39716: NEG
39717: PUSH
39718: LD_INT 0
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 1
39727: NEG
39728: PUSH
39729: LD_INT 1
39731: NEG
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 1
39739: NEG
39740: PUSH
39741: LD_INT 2
39743: NEG
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 1
39751: PUSH
39752: LD_INT 2
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39770: LD_ADDR_VAR 0 37
39774: PUSH
39775: LD_INT 0
39777: PUSH
39778: LD_INT 0
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 0
39787: PUSH
39788: LD_INT 1
39790: NEG
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 1
39798: PUSH
39799: LD_INT 0
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 1
39808: PUSH
39809: LD_INT 1
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 0
39818: PUSH
39819: LD_INT 1
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 1
39828: NEG
39829: PUSH
39830: LD_INT 0
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 1
39839: NEG
39840: PUSH
39841: LD_INT 1
39843: NEG
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 1
39851: PUSH
39852: LD_INT 1
39854: NEG
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 1
39862: NEG
39863: PUSH
39864: LD_INT 1
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39882: LD_ADDR_VAR 0 38
39886: PUSH
39887: LD_INT 0
39889: PUSH
39890: LD_INT 0
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 0
39899: PUSH
39900: LD_INT 1
39902: NEG
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 1
39910: PUSH
39911: LD_INT 0
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 1
39920: PUSH
39921: LD_INT 1
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 0
39930: PUSH
39931: LD_INT 1
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 1
39940: NEG
39941: PUSH
39942: LD_INT 0
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 1
39951: NEG
39952: PUSH
39953: LD_INT 1
39955: NEG
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 2
39963: PUSH
39964: LD_INT 1
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 2
39973: NEG
39974: PUSH
39975: LD_INT 1
39977: NEG
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39994: LD_ADDR_VAR 0 39
39998: PUSH
39999: LD_INT 0
40001: PUSH
40002: LD_INT 0
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 0
40011: PUSH
40012: LD_INT 1
40014: NEG
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 1
40022: PUSH
40023: LD_INT 0
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 1
40032: PUSH
40033: LD_INT 1
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 0
40042: PUSH
40043: LD_INT 1
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 1
40052: NEG
40053: PUSH
40054: LD_INT 0
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: LD_INT 1
40063: NEG
40064: PUSH
40065: LD_INT 1
40067: NEG
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 1
40075: NEG
40076: PUSH
40077: LD_INT 2
40079: NEG
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 1
40087: PUSH
40088: LD_INT 2
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40106: LD_ADDR_VAR 0 40
40110: PUSH
40111: LD_INT 0
40113: PUSH
40114: LD_INT 0
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 0
40123: PUSH
40124: LD_INT 1
40126: NEG
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 1
40134: PUSH
40135: LD_INT 0
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 1
40144: PUSH
40145: LD_INT 1
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 0
40154: PUSH
40155: LD_INT 1
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 1
40164: NEG
40165: PUSH
40166: LD_INT 0
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 1
40175: NEG
40176: PUSH
40177: LD_INT 1
40179: NEG
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 1
40187: PUSH
40188: LD_INT 1
40190: NEG
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 1
40198: NEG
40199: PUSH
40200: LD_INT 1
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40218: LD_ADDR_VAR 0 41
40222: PUSH
40223: LD_INT 0
40225: PUSH
40226: LD_INT 0
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 0
40235: PUSH
40236: LD_INT 1
40238: NEG
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 1
40246: PUSH
40247: LD_INT 0
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 1
40256: PUSH
40257: LD_INT 1
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 0
40266: PUSH
40267: LD_INT 1
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: LD_INT 0
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 1
40287: NEG
40288: PUSH
40289: LD_INT 1
40291: NEG
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 1
40299: NEG
40300: PUSH
40301: LD_INT 2
40303: NEG
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 1
40311: PUSH
40312: LD_INT 1
40314: NEG
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 2
40322: PUSH
40323: LD_INT 0
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 2
40332: PUSH
40333: LD_INT 1
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 2
40342: PUSH
40343: LD_INT 2
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 1
40352: PUSH
40353: LD_INT 2
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 1
40362: NEG
40363: PUSH
40364: LD_INT 1
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 2
40373: NEG
40374: PUSH
40375: LD_INT 0
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 2
40384: NEG
40385: PUSH
40386: LD_INT 1
40388: NEG
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 2
40396: NEG
40397: PUSH
40398: LD_INT 2
40400: NEG
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 2
40408: NEG
40409: PUSH
40410: LD_INT 3
40412: NEG
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 2
40420: PUSH
40421: LD_INT 1
40423: NEG
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 3
40431: PUSH
40432: LD_INT 0
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 3
40441: PUSH
40442: LD_INT 1
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 3
40451: PUSH
40452: LD_INT 2
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 3
40461: PUSH
40462: LD_INT 3
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 2
40471: PUSH
40472: LD_INT 3
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 2
40481: NEG
40482: PUSH
40483: LD_INT 1
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 3
40492: NEG
40493: PUSH
40494: LD_INT 0
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 3
40503: NEG
40504: PUSH
40505: LD_INT 1
40507: NEG
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 3
40515: NEG
40516: PUSH
40517: LD_INT 2
40519: NEG
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 3
40527: NEG
40528: PUSH
40529: LD_INT 3
40531: NEG
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40568: LD_ADDR_VAR 0 42
40572: PUSH
40573: LD_INT 0
40575: PUSH
40576: LD_INT 0
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: LD_INT 1
40588: NEG
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 1
40596: PUSH
40597: LD_INT 0
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: LD_INT 1
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 0
40616: PUSH
40617: LD_INT 1
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 1
40626: NEG
40627: PUSH
40628: LD_INT 0
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 1
40637: NEG
40638: PUSH
40639: LD_INT 1
40641: NEG
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 1
40649: NEG
40650: PUSH
40651: LD_INT 2
40653: NEG
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 0
40661: PUSH
40662: LD_INT 2
40664: NEG
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 1
40672: PUSH
40673: LD_INT 1
40675: NEG
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 2
40683: PUSH
40684: LD_INT 1
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 2
40693: PUSH
40694: LD_INT 2
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 1
40703: PUSH
40704: LD_INT 2
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 0
40713: PUSH
40714: LD_INT 2
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 1
40723: NEG
40724: PUSH
40725: LD_INT 1
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 2
40734: NEG
40735: PUSH
40736: LD_INT 1
40738: NEG
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 2
40746: NEG
40747: PUSH
40748: LD_INT 2
40750: NEG
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 2
40758: NEG
40759: PUSH
40760: LD_INT 3
40762: NEG
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 1
40770: NEG
40771: PUSH
40772: LD_INT 3
40774: NEG
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 0
40782: PUSH
40783: LD_INT 3
40785: NEG
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 1
40793: PUSH
40794: LD_INT 2
40796: NEG
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 3
40804: PUSH
40805: LD_INT 2
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 3
40814: PUSH
40815: LD_INT 3
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 2
40824: PUSH
40825: LD_INT 3
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 1
40834: PUSH
40835: LD_INT 3
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 0
40844: PUSH
40845: LD_INT 3
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 1
40854: NEG
40855: PUSH
40856: LD_INT 2
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 3
40865: NEG
40866: PUSH
40867: LD_INT 2
40869: NEG
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 3
40877: NEG
40878: PUSH
40879: LD_INT 3
40881: NEG
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40918: LD_ADDR_VAR 0 43
40922: PUSH
40923: LD_INT 0
40925: PUSH
40926: LD_INT 0
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 0
40935: PUSH
40936: LD_INT 1
40938: NEG
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 1
40946: PUSH
40947: LD_INT 0
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 1
40956: PUSH
40957: LD_INT 1
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: LD_INT 0
40966: PUSH
40967: LD_INT 1
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 1
40976: NEG
40977: PUSH
40978: LD_INT 0
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 1
40987: NEG
40988: PUSH
40989: LD_INT 1
40991: NEG
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 1
40999: NEG
41000: PUSH
41001: LD_INT 2
41003: NEG
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 0
41011: PUSH
41012: LD_INT 2
41014: NEG
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 1
41022: PUSH
41023: LD_INT 1
41025: NEG
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 2
41033: PUSH
41034: LD_INT 0
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 2
41043: PUSH
41044: LD_INT 1
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 1
41053: PUSH
41054: LD_INT 2
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 0
41063: PUSH
41064: LD_INT 2
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 1
41073: NEG
41074: PUSH
41075: LD_INT 1
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 2
41084: NEG
41085: PUSH
41086: LD_INT 0
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 2
41095: NEG
41096: PUSH
41097: LD_INT 1
41099: NEG
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 1
41107: NEG
41108: PUSH
41109: LD_INT 3
41111: NEG
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 0
41119: PUSH
41120: LD_INT 3
41122: NEG
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 1
41130: PUSH
41131: LD_INT 2
41133: NEG
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 2
41141: PUSH
41142: LD_INT 1
41144: NEG
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 3
41152: PUSH
41153: LD_INT 0
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 3
41162: PUSH
41163: LD_INT 1
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 1
41172: PUSH
41173: LD_INT 3
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 0
41182: PUSH
41183: LD_INT 3
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 1
41192: NEG
41193: PUSH
41194: LD_INT 2
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 2
41203: NEG
41204: PUSH
41205: LD_INT 1
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 3
41214: NEG
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 3
41225: NEG
41226: PUSH
41227: LD_INT 1
41229: NEG
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41266: LD_ADDR_VAR 0 44
41270: PUSH
41271: LD_INT 0
41273: PUSH
41274: LD_INT 0
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 0
41283: PUSH
41284: LD_INT 1
41286: NEG
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 1
41294: PUSH
41295: LD_INT 0
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 1
41304: PUSH
41305: LD_INT 1
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: LD_INT 1
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 1
41324: NEG
41325: PUSH
41326: LD_INT 0
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 1
41335: NEG
41336: PUSH
41337: LD_INT 1
41339: NEG
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 1
41347: NEG
41348: PUSH
41349: LD_INT 2
41351: NEG
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: LD_INT 1
41362: NEG
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 2
41370: PUSH
41371: LD_INT 0
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 2
41380: PUSH
41381: LD_INT 1
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 2
41390: PUSH
41391: LD_INT 2
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: LD_INT 2
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 1
41410: NEG
41411: PUSH
41412: LD_INT 1
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 2
41421: NEG
41422: PUSH
41423: LD_INT 0
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 2
41432: NEG
41433: PUSH
41434: LD_INT 1
41436: NEG
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 2
41444: NEG
41445: PUSH
41446: LD_INT 2
41448: NEG
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 2
41456: NEG
41457: PUSH
41458: LD_INT 3
41460: NEG
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 2
41468: PUSH
41469: LD_INT 1
41471: NEG
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 3
41479: PUSH
41480: LD_INT 0
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 3
41489: PUSH
41490: LD_INT 1
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 3
41499: PUSH
41500: LD_INT 2
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 3
41509: PUSH
41510: LD_INT 3
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 2
41519: PUSH
41520: LD_INT 3
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 2
41529: NEG
41530: PUSH
41531: LD_INT 1
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 3
41540: NEG
41541: PUSH
41542: LD_INT 0
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 3
41551: NEG
41552: PUSH
41553: LD_INT 1
41555: NEG
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 3
41563: NEG
41564: PUSH
41565: LD_INT 2
41567: NEG
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 3
41575: NEG
41576: PUSH
41577: LD_INT 3
41579: NEG
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41616: LD_ADDR_VAR 0 45
41620: PUSH
41621: LD_INT 0
41623: PUSH
41624: LD_INT 0
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 0
41633: PUSH
41634: LD_INT 1
41636: NEG
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 1
41644: PUSH
41645: LD_INT 0
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 1
41654: PUSH
41655: LD_INT 1
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: LD_INT 1
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 1
41674: NEG
41675: PUSH
41676: LD_INT 0
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 1
41685: NEG
41686: PUSH
41687: LD_INT 1
41689: NEG
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 1
41697: NEG
41698: PUSH
41699: LD_INT 2
41701: NEG
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: LD_INT 2
41712: NEG
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 1
41720: PUSH
41721: LD_INT 1
41723: NEG
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 2
41731: PUSH
41732: LD_INT 1
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 2
41741: PUSH
41742: LD_INT 2
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 1
41751: PUSH
41752: LD_INT 2
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 0
41761: PUSH
41762: LD_INT 2
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 1
41771: NEG
41772: PUSH
41773: LD_INT 1
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 2
41782: NEG
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 2
41794: NEG
41795: PUSH
41796: LD_INT 2
41798: NEG
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 2
41806: NEG
41807: PUSH
41808: LD_INT 3
41810: NEG
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 1
41818: NEG
41819: PUSH
41820: LD_INT 3
41822: NEG
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 0
41830: PUSH
41831: LD_INT 3
41833: NEG
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 1
41841: PUSH
41842: LD_INT 2
41844: NEG
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 3
41852: PUSH
41853: LD_INT 2
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 3
41862: PUSH
41863: LD_INT 3
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 2
41872: PUSH
41873: LD_INT 3
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 1
41882: PUSH
41883: LD_INT 3
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: LD_INT 3
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 1
41902: NEG
41903: PUSH
41904: LD_INT 2
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 3
41913: NEG
41914: PUSH
41915: LD_INT 2
41917: NEG
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 3
41925: NEG
41926: PUSH
41927: LD_INT 3
41929: NEG
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41966: LD_ADDR_VAR 0 46
41970: PUSH
41971: LD_INT 0
41973: PUSH
41974: LD_INT 0
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 0
41983: PUSH
41984: LD_INT 1
41986: NEG
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 1
41994: PUSH
41995: LD_INT 0
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 1
42004: PUSH
42005: LD_INT 1
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 0
42014: PUSH
42015: LD_INT 1
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: LD_INT 0
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 1
42035: NEG
42036: PUSH
42037: LD_INT 1
42039: NEG
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 1
42047: NEG
42048: PUSH
42049: LD_INT 2
42051: NEG
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 0
42059: PUSH
42060: LD_INT 2
42062: NEG
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 1
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 2
42081: PUSH
42082: LD_INT 0
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 2
42091: PUSH
42092: LD_INT 1
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 1
42101: PUSH
42102: LD_INT 2
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 0
42111: PUSH
42112: LD_INT 2
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 1
42121: NEG
42122: PUSH
42123: LD_INT 1
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 2
42132: NEG
42133: PUSH
42134: LD_INT 0
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 2
42143: NEG
42144: PUSH
42145: LD_INT 1
42147: NEG
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 1
42155: NEG
42156: PUSH
42157: LD_INT 3
42159: NEG
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 0
42167: PUSH
42168: LD_INT 3
42170: NEG
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 1
42178: PUSH
42179: LD_INT 2
42181: NEG
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 2
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 3
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 3
42210: PUSH
42211: LD_INT 1
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 1
42220: PUSH
42221: LD_INT 3
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 0
42230: PUSH
42231: LD_INT 3
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 1
42240: NEG
42241: PUSH
42242: LD_INT 2
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 2
42251: NEG
42252: PUSH
42253: LD_INT 1
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 3
42262: NEG
42263: PUSH
42264: LD_INT 0
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 3
42273: NEG
42274: PUSH
42275: LD_INT 1
42277: NEG
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42314: LD_ADDR_VAR 0 47
42318: PUSH
42319: LD_INT 0
42321: PUSH
42322: LD_INT 0
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 0
42331: PUSH
42332: LD_INT 1
42334: NEG
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 1
42342: PUSH
42343: LD_INT 0
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 1
42352: PUSH
42353: LD_INT 1
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 1
42372: NEG
42373: PUSH
42374: LD_INT 0
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 1
42383: NEG
42384: PUSH
42385: LD_INT 1
42387: NEG
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 1
42395: NEG
42396: PUSH
42397: LD_INT 2
42399: NEG
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 0
42407: PUSH
42408: LD_INT 2
42410: NEG
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 1
42418: PUSH
42419: LD_INT 1
42421: NEG
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 2
42429: NEG
42430: PUSH
42431: LD_INT 1
42433: NEG
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 2
42441: NEG
42442: PUSH
42443: LD_INT 2
42445: NEG
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42465: LD_ADDR_VAR 0 48
42469: PUSH
42470: LD_INT 0
42472: PUSH
42473: LD_INT 0
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 0
42482: PUSH
42483: LD_INT 1
42485: NEG
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 1
42493: PUSH
42494: LD_INT 0
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 1
42503: PUSH
42504: LD_INT 1
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 0
42513: PUSH
42514: LD_INT 1
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: NEG
42524: PUSH
42525: LD_INT 0
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 1
42534: NEG
42535: PUSH
42536: LD_INT 1
42538: NEG
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 1
42546: NEG
42547: PUSH
42548: LD_INT 2
42550: NEG
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 0
42558: PUSH
42559: LD_INT 2
42561: NEG
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 1
42569: PUSH
42570: LD_INT 1
42572: NEG
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 2
42580: PUSH
42581: LD_INT 0
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 2
42590: PUSH
42591: LD_INT 1
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42612: LD_ADDR_VAR 0 49
42616: PUSH
42617: LD_INT 0
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 0
42629: PUSH
42630: LD_INT 1
42632: NEG
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 1
42640: PUSH
42641: LD_INT 0
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 1
42650: PUSH
42651: LD_INT 1
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 0
42660: PUSH
42661: LD_INT 1
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 1
42670: NEG
42671: PUSH
42672: LD_INT 0
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 1
42681: NEG
42682: PUSH
42683: LD_INT 1
42685: NEG
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 1
42693: PUSH
42694: LD_INT 1
42696: NEG
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 2
42704: PUSH
42705: LD_INT 0
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 2
42714: PUSH
42715: LD_INT 1
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 2
42724: PUSH
42725: LD_INT 2
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 1
42734: PUSH
42735: LD_INT 2
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42756: LD_ADDR_VAR 0 50
42760: PUSH
42761: LD_INT 0
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 0
42773: PUSH
42774: LD_INT 1
42776: NEG
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 1
42784: PUSH
42785: LD_INT 0
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: LD_INT 1
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 0
42804: PUSH
42805: LD_INT 1
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 1
42814: NEG
42815: PUSH
42816: LD_INT 0
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 1
42825: NEG
42826: PUSH
42827: LD_INT 1
42829: NEG
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 2
42837: PUSH
42838: LD_INT 1
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 2
42847: PUSH
42848: LD_INT 2
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 1
42857: PUSH
42858: LD_INT 2
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 0
42867: PUSH
42868: LD_INT 2
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 1
42877: NEG
42878: PUSH
42879: LD_INT 1
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42900: LD_ADDR_VAR 0 51
42904: PUSH
42905: LD_INT 0
42907: PUSH
42908: LD_INT 0
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 0
42917: PUSH
42918: LD_INT 1
42920: NEG
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 1
42928: PUSH
42929: LD_INT 0
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 1
42938: PUSH
42939: LD_INT 1
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 0
42948: PUSH
42949: LD_INT 1
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 1
42958: NEG
42959: PUSH
42960: LD_INT 0
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 1
42969: NEG
42970: PUSH
42971: LD_INT 1
42973: NEG
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: LD_INT 2
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 0
42991: PUSH
42992: LD_INT 2
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 1
43001: NEG
43002: PUSH
43003: LD_INT 1
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 2
43012: NEG
43013: PUSH
43014: LD_INT 0
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 2
43023: NEG
43024: PUSH
43025: LD_INT 1
43027: NEG
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43047: LD_ADDR_VAR 0 52
43051: PUSH
43052: LD_INT 0
43054: PUSH
43055: LD_INT 0
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: LD_INT 1
43067: NEG
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 1
43075: PUSH
43076: LD_INT 0
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 1
43085: PUSH
43086: LD_INT 1
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 0
43095: PUSH
43096: LD_INT 1
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 1
43105: NEG
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 1
43116: NEG
43117: PUSH
43118: LD_INT 1
43120: NEG
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 1
43128: NEG
43129: PUSH
43130: LD_INT 2
43132: NEG
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 1
43140: NEG
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 2
43151: NEG
43152: PUSH
43153: LD_INT 0
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 2
43162: NEG
43163: PUSH
43164: LD_INT 1
43166: NEG
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 2
43174: NEG
43175: PUSH
43176: LD_INT 2
43178: NEG
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43198: LD_ADDR_VAR 0 53
43202: PUSH
43203: LD_INT 0
43205: PUSH
43206: LD_INT 0
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 0
43215: PUSH
43216: LD_INT 1
43218: NEG
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 1
43226: PUSH
43227: LD_INT 0
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 1
43236: PUSH
43237: LD_INT 1
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 0
43246: PUSH
43247: LD_INT 1
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: NEG
43257: PUSH
43258: LD_INT 0
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 1
43267: NEG
43268: PUSH
43269: LD_INT 1
43271: NEG
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: NEG
43280: PUSH
43281: LD_INT 2
43283: NEG
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: LD_INT 2
43294: NEG
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 1
43302: PUSH
43303: LD_INT 1
43305: NEG
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 2
43313: PUSH
43314: LD_INT 0
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 2
43323: PUSH
43324: LD_INT 1
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 2
43333: PUSH
43334: LD_INT 2
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 1
43343: PUSH
43344: LD_INT 2
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: LD_INT 2
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 1
43363: NEG
43364: PUSH
43365: LD_INT 1
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 2
43374: NEG
43375: PUSH
43376: LD_INT 0
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 2
43385: NEG
43386: PUSH
43387: LD_INT 1
43389: NEG
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 2
43397: NEG
43398: PUSH
43399: LD_INT 2
43401: NEG
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43428: LD_ADDR_VAR 0 54
43432: PUSH
43433: LD_INT 0
43435: PUSH
43436: LD_INT 0
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 0
43445: PUSH
43446: LD_INT 1
43448: NEG
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 1
43456: PUSH
43457: LD_INT 0
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 1
43466: PUSH
43467: LD_INT 1
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 0
43476: PUSH
43477: LD_INT 1
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 1
43486: NEG
43487: PUSH
43488: LD_INT 0
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 1
43497: NEG
43498: PUSH
43499: LD_INT 1
43501: NEG
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 1
43509: NEG
43510: PUSH
43511: LD_INT 2
43513: NEG
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 0
43521: PUSH
43522: LD_INT 2
43524: NEG
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: LD_INT 1
43535: NEG
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 2
43543: PUSH
43544: LD_INT 0
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 2
43553: PUSH
43554: LD_INT 1
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 2
43563: PUSH
43564: LD_INT 2
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 1
43573: PUSH
43574: LD_INT 2
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 0
43583: PUSH
43584: LD_INT 2
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 1
43593: NEG
43594: PUSH
43595: LD_INT 1
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 2
43604: NEG
43605: PUSH
43606: LD_INT 0
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 2
43615: NEG
43616: PUSH
43617: LD_INT 1
43619: NEG
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 2
43627: NEG
43628: PUSH
43629: LD_INT 2
43631: NEG
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43658: LD_ADDR_VAR 0 55
43662: PUSH
43663: LD_INT 0
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 0
43675: PUSH
43676: LD_INT 1
43678: NEG
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 1
43686: PUSH
43687: LD_INT 0
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 1
43696: PUSH
43697: LD_INT 1
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 0
43706: PUSH
43707: LD_INT 1
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 1
43716: NEG
43717: PUSH
43718: LD_INT 0
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 1
43727: NEG
43728: PUSH
43729: LD_INT 1
43731: NEG
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 1
43739: NEG
43740: PUSH
43741: LD_INT 2
43743: NEG
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: LD_INT 2
43754: NEG
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 1
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 2
43773: PUSH
43774: LD_INT 0
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 2
43783: PUSH
43784: LD_INT 1
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 2
43793: PUSH
43794: LD_INT 2
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: LD_INT 2
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: LD_INT 2
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 1
43823: NEG
43824: PUSH
43825: LD_INT 1
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 2
43834: NEG
43835: PUSH
43836: LD_INT 0
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 2
43845: NEG
43846: PUSH
43847: LD_INT 1
43849: NEG
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 2
43857: NEG
43858: PUSH
43859: LD_INT 2
43861: NEG
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43888: LD_ADDR_VAR 0 56
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: LD_INT 0
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: LD_INT 1
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: LD_INT 0
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 1
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 0
43936: PUSH
43937: LD_INT 1
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: NEG
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 1
43957: NEG
43958: PUSH
43959: LD_INT 1
43961: NEG
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: LD_INT 2
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: LD_INT 2
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: LD_INT 1
43995: NEG
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 2
44003: PUSH
44004: LD_INT 0
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 2
44013: PUSH
44014: LD_INT 1
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 2
44023: PUSH
44024: LD_INT 2
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: PUSH
44034: LD_INT 2
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 0
44043: PUSH
44044: LD_INT 2
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 1
44053: NEG
44054: PUSH
44055: LD_INT 1
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 2
44064: NEG
44065: PUSH
44066: LD_INT 0
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 2
44075: NEG
44076: PUSH
44077: LD_INT 1
44079: NEG
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 2
44087: NEG
44088: PUSH
44089: LD_INT 2
44091: NEG
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44118: LD_ADDR_VAR 0 57
44122: PUSH
44123: LD_INT 0
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: LD_INT 1
44138: NEG
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 1
44146: PUSH
44147: LD_INT 0
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 1
44156: PUSH
44157: LD_INT 1
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 1
44176: NEG
44177: PUSH
44178: LD_INT 0
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 1
44187: NEG
44188: PUSH
44189: LD_INT 1
44191: NEG
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 1
44199: NEG
44200: PUSH
44201: LD_INT 2
44203: NEG
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 0
44211: PUSH
44212: LD_INT 2
44214: NEG
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: PUSH
44223: LD_INT 1
44225: NEG
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 2
44233: PUSH
44234: LD_INT 0
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 2
44243: PUSH
44244: LD_INT 1
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 2
44253: PUSH
44254: LD_INT 2
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: LD_INT 2
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 0
44273: PUSH
44274: LD_INT 2
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 1
44283: NEG
44284: PUSH
44285: LD_INT 1
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 2
44294: NEG
44295: PUSH
44296: LD_INT 0
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 2
44305: NEG
44306: PUSH
44307: LD_INT 1
44309: NEG
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 2
44317: NEG
44318: PUSH
44319: LD_INT 2
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44348: LD_ADDR_VAR 0 58
44352: PUSH
44353: LD_INT 0
44355: PUSH
44356: LD_INT 0
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: LD_INT 1
44368: NEG
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 1
44376: PUSH
44377: LD_INT 0
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 1
44386: PUSH
44387: LD_INT 1
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: LD_INT 1
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 1
44406: NEG
44407: PUSH
44408: LD_INT 0
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 1
44417: NEG
44418: PUSH
44419: LD_INT 1
44421: NEG
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 1
44429: NEG
44430: PUSH
44431: LD_INT 2
44433: NEG
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 0
44441: PUSH
44442: LD_INT 2
44444: NEG
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: LD_INT 1
44455: NEG
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 2
44463: PUSH
44464: LD_INT 0
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 2
44473: PUSH
44474: LD_INT 1
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 2
44483: PUSH
44484: LD_INT 2
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 1
44493: PUSH
44494: LD_INT 2
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 0
44503: PUSH
44504: LD_INT 2
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 1
44513: NEG
44514: PUSH
44515: LD_INT 1
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 2
44524: NEG
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 2
44535: NEG
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 2
44547: NEG
44548: PUSH
44549: LD_INT 2
44551: NEG
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44578: LD_ADDR_VAR 0 59
44582: PUSH
44583: LD_INT 0
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 0
44595: PUSH
44596: LD_INT 1
44598: NEG
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 1
44606: PUSH
44607: LD_INT 0
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 1
44616: PUSH
44617: LD_INT 1
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: LD_INT 1
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: LD_INT 0
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: LD_INT 1
44651: NEG
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44666: LD_ADDR_VAR 0 60
44670: PUSH
44671: LD_INT 0
44673: PUSH
44674: LD_INT 0
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 0
44683: PUSH
44684: LD_INT 1
44686: NEG
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 1
44694: PUSH
44695: LD_INT 0
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 1
44704: PUSH
44705: LD_INT 1
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 0
44714: PUSH
44715: LD_INT 1
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 1
44724: NEG
44725: PUSH
44726: LD_INT 0
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 1
44735: NEG
44736: PUSH
44737: LD_INT 1
44739: NEG
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44754: LD_ADDR_VAR 0 61
44758: PUSH
44759: LD_INT 0
44761: PUSH
44762: LD_INT 0
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 0
44771: PUSH
44772: LD_INT 1
44774: NEG
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: LD_INT 0
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 1
44792: PUSH
44793: LD_INT 1
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 0
44802: PUSH
44803: LD_INT 1
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 1
44812: NEG
44813: PUSH
44814: LD_INT 0
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 1
44823: NEG
44824: PUSH
44825: LD_INT 1
44827: NEG
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44842: LD_ADDR_VAR 0 62
44846: PUSH
44847: LD_INT 0
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: LD_INT 0
44859: PUSH
44860: LD_INT 1
44862: NEG
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 1
44870: PUSH
44871: LD_INT 0
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 1
44880: PUSH
44881: LD_INT 1
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 0
44890: PUSH
44891: LD_INT 1
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 1
44900: NEG
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: LD_INT 1
44915: NEG
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44930: LD_ADDR_VAR 0 63
44934: PUSH
44935: LD_INT 0
44937: PUSH
44938: LD_INT 0
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: LD_INT 1
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: LD_INT 1
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: LD_INT 1
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: NEG
44989: PUSH
44990: LD_INT 0
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 1
44999: NEG
45000: PUSH
45001: LD_INT 1
45003: NEG
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45018: LD_ADDR_VAR 0 64
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 1
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 1
45056: PUSH
45057: LD_INT 1
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 0
45066: PUSH
45067: LD_INT 1
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 1
45076: NEG
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 1
45087: NEG
45088: PUSH
45089: LD_INT 1
45091: NEG
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: ST_TO_ADDR
// end ; 1 :
45106: GO 51003
45108: LD_INT 1
45110: DOUBLE
45111: EQUAL
45112: IFTRUE 45116
45114: GO 47739
45116: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45117: LD_ADDR_VAR 0 11
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: LD_INT 3
45128: NEG
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: LD_INT 3
45139: NEG
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 1
45147: PUSH
45148: LD_INT 2
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: LIST
45160: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45161: LD_ADDR_VAR 0 12
45165: PUSH
45166: LD_INT 2
45168: PUSH
45169: LD_INT 1
45171: NEG
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 3
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 3
45189: PUSH
45190: LD_INT 1
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: LIST
45201: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45202: LD_ADDR_VAR 0 13
45206: PUSH
45207: LD_INT 3
45209: PUSH
45210: LD_INT 2
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 3
45219: PUSH
45220: LD_INT 3
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 2
45229: PUSH
45230: LD_INT 3
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: LIST
45241: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45242: LD_ADDR_VAR 0 14
45246: PUSH
45247: LD_INT 1
45249: PUSH
45250: LD_INT 3
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 0
45259: PUSH
45260: LD_INT 3
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: LD_INT 2
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: LIST
45282: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45283: LD_ADDR_VAR 0 15
45287: PUSH
45288: LD_INT 2
45290: NEG
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 3
45301: NEG
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 3
45312: NEG
45313: PUSH
45314: LD_INT 1
45316: NEG
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: LIST
45326: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45327: LD_ADDR_VAR 0 16
45331: PUSH
45332: LD_INT 2
45334: NEG
45335: PUSH
45336: LD_INT 3
45338: NEG
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 3
45346: NEG
45347: PUSH
45348: LD_INT 2
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 3
45358: NEG
45359: PUSH
45360: LD_INT 3
45362: NEG
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: LIST
45372: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45373: LD_ADDR_VAR 0 17
45377: PUSH
45378: LD_INT 1
45380: NEG
45381: PUSH
45382: LD_INT 3
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: LD_INT 3
45395: NEG
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 1
45403: PUSH
45404: LD_INT 2
45406: NEG
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: LIST
45416: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45417: LD_ADDR_VAR 0 18
45421: PUSH
45422: LD_INT 2
45424: PUSH
45425: LD_INT 1
45427: NEG
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 3
45435: PUSH
45436: LD_INT 0
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 3
45445: PUSH
45446: LD_INT 1
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: LIST
45457: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45458: LD_ADDR_VAR 0 19
45462: PUSH
45463: LD_INT 3
45465: PUSH
45466: LD_INT 2
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 3
45475: PUSH
45476: LD_INT 3
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 2
45485: PUSH
45486: LD_INT 3
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: LIST
45497: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45498: LD_ADDR_VAR 0 20
45502: PUSH
45503: LD_INT 1
45505: PUSH
45506: LD_INT 3
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: LD_INT 3
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 1
45525: NEG
45526: PUSH
45527: LD_INT 2
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: LIST
45538: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45539: LD_ADDR_VAR 0 21
45543: PUSH
45544: LD_INT 2
45546: NEG
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 3
45557: NEG
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 3
45568: NEG
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: LIST
45582: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45583: LD_ADDR_VAR 0 22
45587: PUSH
45588: LD_INT 2
45590: NEG
45591: PUSH
45592: LD_INT 3
45594: NEG
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 3
45602: NEG
45603: PUSH
45604: LD_INT 2
45606: NEG
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 3
45614: NEG
45615: PUSH
45616: LD_INT 3
45618: NEG
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: LIST
45628: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
45629: LD_ADDR_VAR 0 23
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: LD_INT 3
45639: NEG
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 1
45647: NEG
45648: PUSH
45649: LD_INT 4
45651: NEG
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 1
45659: PUSH
45660: LD_INT 3
45662: NEG
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: LIST
45672: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
45673: LD_ADDR_VAR 0 24
45677: PUSH
45678: LD_INT 3
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 3
45690: PUSH
45691: LD_INT 1
45693: NEG
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 4
45701: PUSH
45702: LD_INT 1
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: LIST
45713: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
45714: LD_ADDR_VAR 0 25
45718: PUSH
45719: LD_INT 3
45721: PUSH
45722: LD_INT 3
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 4
45731: PUSH
45732: LD_INT 3
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 3
45741: PUSH
45742: LD_INT 4
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: LIST
45753: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
45754: LD_ADDR_VAR 0 26
45758: PUSH
45759: LD_INT 0
45761: PUSH
45762: LD_INT 3
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: LD_INT 4
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 1
45781: NEG
45782: PUSH
45783: LD_INT 3
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: LIST
45794: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
45795: LD_ADDR_VAR 0 27
45799: PUSH
45800: LD_INT 3
45802: NEG
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 3
45813: NEG
45814: PUSH
45815: LD_INT 1
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 4
45824: NEG
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: LIST
45838: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
45839: LD_ADDR_VAR 0 28
45843: PUSH
45844: LD_INT 3
45846: NEG
45847: PUSH
45848: LD_INT 3
45850: NEG
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 3
45858: NEG
45859: PUSH
45860: LD_INT 4
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 4
45870: NEG
45871: PUSH
45872: LD_INT 3
45874: NEG
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: LIST
45884: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
45885: LD_ADDR_VAR 0 29
45889: PUSH
45890: LD_INT 1
45892: NEG
45893: PUSH
45894: LD_INT 3
45896: NEG
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: LD_INT 3
45907: NEG
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 1
45915: PUSH
45916: LD_INT 2
45918: NEG
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 1
45926: NEG
45927: PUSH
45928: LD_INT 4
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: LD_INT 4
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: LD_INT 3
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: LD_INT 5
45964: NEG
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 0
45972: PUSH
45973: LD_INT 5
45975: NEG
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 1
45983: PUSH
45984: LD_INT 4
45986: NEG
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 1
45994: NEG
45995: PUSH
45996: LD_INT 6
45998: NEG
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: LD_INT 6
46009: NEG
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 1
46017: PUSH
46018: LD_INT 5
46020: NEG
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46040: LD_ADDR_VAR 0 30
46044: PUSH
46045: LD_INT 2
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 3
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 3
46068: PUSH
46069: LD_INT 1
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 3
46078: PUSH
46079: LD_INT 1
46081: NEG
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 4
46089: PUSH
46090: LD_INT 0
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 4
46099: PUSH
46100: LD_INT 1
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 4
46109: PUSH
46110: LD_INT 1
46112: NEG
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 5
46120: PUSH
46121: LD_INT 0
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 5
46130: PUSH
46131: LD_INT 1
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 5
46140: PUSH
46141: LD_INT 1
46143: NEG
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 6
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 6
46161: PUSH
46162: LD_INT 1
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46183: LD_ADDR_VAR 0 31
46187: PUSH
46188: LD_INT 3
46190: PUSH
46191: LD_INT 2
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 3
46200: PUSH
46201: LD_INT 3
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 2
46210: PUSH
46211: LD_INT 3
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 4
46220: PUSH
46221: LD_INT 3
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 4
46230: PUSH
46231: LD_INT 4
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 3
46240: PUSH
46241: LD_INT 4
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 5
46250: PUSH
46251: LD_INT 4
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 5
46260: PUSH
46261: LD_INT 5
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 4
46270: PUSH
46271: LD_INT 5
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 6
46280: PUSH
46281: LD_INT 5
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 6
46290: PUSH
46291: LD_INT 6
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 5
46300: PUSH
46301: LD_INT 6
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46322: LD_ADDR_VAR 0 32
46326: PUSH
46327: LD_INT 1
46329: PUSH
46330: LD_INT 3
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: LD_INT 3
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: LD_INT 2
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 1
46360: PUSH
46361: LD_INT 4
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: LD_INT 4
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 1
46380: NEG
46381: PUSH
46382: LD_INT 3
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 1
46391: PUSH
46392: LD_INT 5
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: LD_INT 5
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: LD_INT 4
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: LD_INT 6
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: LD_INT 6
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 1
46442: NEG
46443: PUSH
46444: LD_INT 5
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
46465: LD_ADDR_VAR 0 33
46469: PUSH
46470: LD_INT 2
46472: NEG
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 3
46483: NEG
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 3
46494: NEG
46495: PUSH
46496: LD_INT 1
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 3
46506: NEG
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 4
46517: NEG
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 4
46528: NEG
46529: PUSH
46530: LD_INT 1
46532: NEG
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 4
46540: NEG
46541: PUSH
46542: LD_INT 1
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 5
46551: NEG
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 5
46562: NEG
46563: PUSH
46564: LD_INT 1
46566: NEG
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 5
46574: NEG
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 6
46585: NEG
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 6
46596: NEG
46597: PUSH
46598: LD_INT 1
46600: NEG
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
46620: LD_ADDR_VAR 0 34
46624: PUSH
46625: LD_INT 2
46627: NEG
46628: PUSH
46629: LD_INT 3
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 3
46639: NEG
46640: PUSH
46641: LD_INT 2
46643: NEG
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 3
46651: NEG
46652: PUSH
46653: LD_INT 3
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 3
46663: NEG
46664: PUSH
46665: LD_INT 4
46667: NEG
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 4
46675: NEG
46676: PUSH
46677: LD_INT 3
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 4
46687: NEG
46688: PUSH
46689: LD_INT 4
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 4
46699: NEG
46700: PUSH
46701: LD_INT 5
46703: NEG
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 5
46711: NEG
46712: PUSH
46713: LD_INT 4
46715: NEG
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 5
46723: NEG
46724: PUSH
46725: LD_INT 5
46727: NEG
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 5
46735: NEG
46736: PUSH
46737: LD_INT 6
46739: NEG
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 6
46747: NEG
46748: PUSH
46749: LD_INT 5
46751: NEG
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 6
46759: NEG
46760: PUSH
46761: LD_INT 6
46763: NEG
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
46783: LD_ADDR_VAR 0 41
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: LD_INT 2
46793: NEG
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: LD_INT 3
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: PUSH
46814: LD_INT 2
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: LIST
46826: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
46827: LD_ADDR_VAR 0 42
46831: PUSH
46832: LD_INT 2
46834: PUSH
46835: LD_INT 0
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 2
46844: PUSH
46845: LD_INT 1
46847: NEG
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 3
46855: PUSH
46856: LD_INT 1
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: LIST
46867: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
46868: LD_ADDR_VAR 0 43
46872: PUSH
46873: LD_INT 2
46875: PUSH
46876: LD_INT 2
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 3
46885: PUSH
46886: LD_INT 2
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 2
46895: PUSH
46896: LD_INT 3
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: LIST
46907: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
46908: LD_ADDR_VAR 0 44
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: LD_INT 2
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 1
46925: PUSH
46926: LD_INT 3
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 1
46935: NEG
46936: PUSH
46937: LD_INT 2
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: LIST
46948: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46949: LD_ADDR_VAR 0 45
46953: PUSH
46954: LD_INT 2
46956: NEG
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 2
46967: NEG
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 3
46978: NEG
46979: PUSH
46980: LD_INT 1
46982: NEG
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: LIST
46992: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
46993: LD_ADDR_VAR 0 46
46997: PUSH
46998: LD_INT 2
47000: NEG
47001: PUSH
47002: LD_INT 2
47004: NEG
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 2
47012: NEG
47013: PUSH
47014: LD_INT 3
47016: NEG
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 3
47024: NEG
47025: PUSH
47026: LD_INT 2
47028: NEG
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: LIST
47038: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47039: LD_ADDR_VAR 0 47
47043: PUSH
47044: LD_INT 2
47046: NEG
47047: PUSH
47048: LD_INT 3
47050: NEG
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: LD_INT 3
47062: NEG
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47072: LD_ADDR_VAR 0 48
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: LD_INT 2
47082: NEG
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 2
47090: PUSH
47091: LD_INT 1
47093: NEG
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47103: LD_ADDR_VAR 0 49
47107: PUSH
47108: LD_INT 3
47110: PUSH
47111: LD_INT 1
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 3
47120: PUSH
47121: LD_INT 2
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47132: LD_ADDR_VAR 0 50
47136: PUSH
47137: LD_INT 2
47139: PUSH
47140: LD_INT 3
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 1
47149: PUSH
47150: LD_INT 3
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47161: LD_ADDR_VAR 0 51
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: LD_INT 2
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 2
47179: NEG
47180: PUSH
47181: LD_INT 1
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47192: LD_ADDR_VAR 0 52
47196: PUSH
47197: LD_INT 3
47199: NEG
47200: PUSH
47201: LD_INT 1
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 3
47211: NEG
47212: PUSH
47213: LD_INT 2
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47225: LD_ADDR_VAR 0 53
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: LD_INT 3
47236: NEG
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: LD_INT 3
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 1
47255: PUSH
47256: LD_INT 2
47258: NEG
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: LIST
47268: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47269: LD_ADDR_VAR 0 54
47273: PUSH
47274: LD_INT 2
47276: PUSH
47277: LD_INT 1
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 3
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 3
47297: PUSH
47298: LD_INT 1
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: LIST
47309: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47310: LD_ADDR_VAR 0 55
47314: PUSH
47315: LD_INT 3
47317: PUSH
47318: LD_INT 2
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 3
47327: PUSH
47328: LD_INT 3
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 2
47337: PUSH
47338: LD_INT 3
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: LIST
47349: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47350: LD_ADDR_VAR 0 56
47354: PUSH
47355: LD_INT 1
47357: PUSH
47358: LD_INT 3
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 0
47367: PUSH
47368: LD_INT 3
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 1
47377: NEG
47378: PUSH
47379: LD_INT 2
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: LIST
47390: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47391: LD_ADDR_VAR 0 57
47395: PUSH
47396: LD_INT 2
47398: NEG
47399: PUSH
47400: LD_INT 1
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 3
47409: NEG
47410: PUSH
47411: LD_INT 0
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 3
47420: NEG
47421: PUSH
47422: LD_INT 1
47424: NEG
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: LIST
47434: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47435: LD_ADDR_VAR 0 58
47439: PUSH
47440: LD_INT 2
47442: NEG
47443: PUSH
47444: LD_INT 3
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 3
47454: NEG
47455: PUSH
47456: LD_INT 2
47458: NEG
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 3
47466: NEG
47467: PUSH
47468: LD_INT 3
47470: NEG
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: LIST
47480: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
47481: LD_ADDR_VAR 0 59
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: LD_INT 2
47492: NEG
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: LD_INT 2
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: LD_INT 1
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: LIST
47524: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47525: LD_ADDR_VAR 0 60
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: LD_INT 1
47535: NEG
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 2
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 2
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: LIST
47565: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47566: LD_ADDR_VAR 0 61
47570: PUSH
47571: LD_INT 2
47573: PUSH
47574: LD_INT 1
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 2
47583: PUSH
47584: LD_INT 2
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 1
47593: PUSH
47594: LD_INT 2
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: LIST
47605: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47606: LD_ADDR_VAR 0 62
47610: PUSH
47611: LD_INT 1
47613: PUSH
47614: LD_INT 2
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: LD_INT 2
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 1
47633: NEG
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: LIST
47646: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47647: LD_ADDR_VAR 0 63
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 2
47665: NEG
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 2
47676: NEG
47677: PUSH
47678: LD_INT 1
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: LIST
47690: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47691: LD_ADDR_VAR 0 64
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: LD_INT 2
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 2
47710: NEG
47711: PUSH
47712: LD_INT 1
47714: NEG
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 2
47722: NEG
47723: PUSH
47724: LD_INT 2
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: LIST
47736: ST_TO_ADDR
// end ; 2 :
47737: GO 51003
47739: LD_INT 2
47741: DOUBLE
47742: EQUAL
47743: IFTRUE 47747
47745: GO 51002
47747: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
47748: LD_ADDR_VAR 0 29
47752: PUSH
47753: LD_INT 4
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 4
47765: PUSH
47766: LD_INT 1
47768: NEG
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 5
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 5
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 4
47796: PUSH
47797: LD_INT 1
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 3
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 3
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 3
47827: PUSH
47828: LD_INT 2
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 5
47838: PUSH
47839: LD_INT 2
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 3
47848: PUSH
47849: LD_INT 3
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 3
47858: PUSH
47859: LD_INT 2
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 4
47868: PUSH
47869: LD_INT 3
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 4
47878: PUSH
47879: LD_INT 4
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 3
47888: PUSH
47889: LD_INT 4
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 2
47898: PUSH
47899: LD_INT 3
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 2
47908: PUSH
47909: LD_INT 2
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 4
47918: PUSH
47919: LD_INT 2
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 2
47928: PUSH
47929: LD_INT 4
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 0
47938: PUSH
47939: LD_INT 4
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: LD_INT 3
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: LD_INT 4
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: LD_INT 5
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: LD_INT 5
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: LD_INT 4
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 1
47999: NEG
48000: PUSH
48001: LD_INT 3
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 2
48010: PUSH
48011: LD_INT 5
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 2
48020: NEG
48021: PUSH
48022: LD_INT 3
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 3
48031: NEG
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 3
48042: NEG
48043: PUSH
48044: LD_INT 1
48046: NEG
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 2
48054: NEG
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 2
48065: NEG
48066: PUSH
48067: LD_INT 1
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 3
48076: NEG
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 4
48087: NEG
48088: PUSH
48089: LD_INT 0
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 4
48098: NEG
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 4
48110: NEG
48111: PUSH
48112: LD_INT 2
48114: NEG
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 2
48122: NEG
48123: PUSH
48124: LD_INT 2
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 4
48133: NEG
48134: PUSH
48135: LD_INT 4
48137: NEG
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 4
48145: NEG
48146: PUSH
48147: LD_INT 5
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 3
48157: NEG
48158: PUSH
48159: LD_INT 4
48161: NEG
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 3
48169: NEG
48170: PUSH
48171: LD_INT 3
48173: NEG
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 4
48181: NEG
48182: PUSH
48183: LD_INT 3
48185: NEG
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 5
48193: NEG
48194: PUSH
48195: LD_INT 4
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 5
48205: NEG
48206: PUSH
48207: LD_INT 5
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 3
48217: NEG
48218: PUSH
48219: LD_INT 5
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 5
48229: NEG
48230: PUSH
48231: LD_INT 3
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48286: LD_ADDR_VAR 0 30
48290: PUSH
48291: LD_INT 4
48293: PUSH
48294: LD_INT 4
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 4
48303: PUSH
48304: LD_INT 3
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 5
48313: PUSH
48314: LD_INT 4
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 5
48323: PUSH
48324: LD_INT 5
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 4
48333: PUSH
48334: LD_INT 5
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 3
48343: PUSH
48344: LD_INT 4
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 3
48353: PUSH
48354: LD_INT 3
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 5
48363: PUSH
48364: LD_INT 3
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 3
48373: PUSH
48374: LD_INT 5
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 0
48383: PUSH
48384: LD_INT 3
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: LD_INT 2
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: LD_INT 3
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 1
48413: PUSH
48414: LD_INT 4
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 0
48423: PUSH
48424: LD_INT 4
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: NEG
48434: PUSH
48435: LD_INT 3
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 1
48444: NEG
48445: PUSH
48446: LD_INT 2
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 2
48455: PUSH
48456: LD_INT 4
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 2
48465: NEG
48466: PUSH
48467: LD_INT 2
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 4
48476: NEG
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 4
48487: NEG
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 3
48499: NEG
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 3
48510: NEG
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 4
48521: NEG
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 5
48532: NEG
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 5
48543: NEG
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 5
48555: NEG
48556: PUSH
48557: LD_INT 2
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 3
48567: NEG
48568: PUSH
48569: LD_INT 2
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 3
48578: NEG
48579: PUSH
48580: LD_INT 3
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 3
48590: NEG
48591: PUSH
48592: LD_INT 4
48594: NEG
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 2
48602: NEG
48603: PUSH
48604: LD_INT 3
48606: NEG
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 2
48614: NEG
48615: PUSH
48616: LD_INT 2
48618: NEG
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 3
48626: NEG
48627: PUSH
48628: LD_INT 2
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 4
48638: NEG
48639: PUSH
48640: LD_INT 3
48642: NEG
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 4
48650: NEG
48651: PUSH
48652: LD_INT 4
48654: NEG
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 2
48662: NEG
48663: PUSH
48664: LD_INT 4
48666: NEG
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 4
48674: NEG
48675: PUSH
48676: LD_INT 2
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: LD_INT 4
48689: NEG
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: LD_INT 5
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 1
48708: PUSH
48709: LD_INT 4
48711: NEG
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: PUSH
48720: LD_INT 3
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: LD_INT 3
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 1
48741: NEG
48742: PUSH
48743: LD_INT 4
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: LD_INT 5
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 2
48765: PUSH
48766: LD_INT 3
48768: NEG
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 2
48776: NEG
48777: PUSH
48778: LD_INT 5
48780: NEG
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
48833: LD_ADDR_VAR 0 31
48837: PUSH
48838: LD_INT 0
48840: PUSH
48841: LD_INT 4
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: LD_INT 3
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 1
48860: PUSH
48861: LD_INT 4
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 1
48870: PUSH
48871: LD_INT 5
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 0
48880: PUSH
48881: LD_INT 5
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: NEG
48891: PUSH
48892: LD_INT 4
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 1
48901: NEG
48902: PUSH
48903: LD_INT 3
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 2
48912: PUSH
48913: LD_INT 5
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 2
48922: NEG
48923: PUSH
48924: LD_INT 3
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 3
48933: NEG
48934: PUSH
48935: LD_INT 0
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 3
48944: NEG
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 2
48956: NEG
48957: PUSH
48958: LD_INT 0
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 2
48967: NEG
48968: PUSH
48969: LD_INT 1
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 3
48978: NEG
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 4
48989: NEG
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 4
49000: NEG
49001: PUSH
49002: LD_INT 1
49004: NEG
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 4
49012: NEG
49013: PUSH
49014: LD_INT 2
49016: NEG
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 2
49024: NEG
49025: PUSH
49026: LD_INT 2
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 4
49035: NEG
49036: PUSH
49037: LD_INT 4
49039: NEG
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 4
49047: NEG
49048: PUSH
49049: LD_INT 5
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 3
49059: NEG
49060: PUSH
49061: LD_INT 4
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 3
49071: NEG
49072: PUSH
49073: LD_INT 3
49075: NEG
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 4
49083: NEG
49084: PUSH
49085: LD_INT 3
49087: NEG
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 5
49095: NEG
49096: PUSH
49097: LD_INT 4
49099: NEG
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 5
49107: NEG
49108: PUSH
49109: LD_INT 5
49111: NEG
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 3
49119: NEG
49120: PUSH
49121: LD_INT 5
49123: NEG
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 5
49131: NEG
49132: PUSH
49133: LD_INT 3
49135: NEG
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: LD_INT 3
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: LD_INT 4
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 1
49165: PUSH
49166: LD_INT 3
49168: NEG
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 1
49176: PUSH
49177: LD_INT 2
49179: NEG
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: LD_INT 2
49190: NEG
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 1
49198: NEG
49199: PUSH
49200: LD_INT 3
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: NEG
49211: PUSH
49212: LD_INT 4
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 2
49222: PUSH
49223: LD_INT 2
49225: NEG
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 2
49233: NEG
49234: PUSH
49235: LD_INT 4
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 4
49245: PUSH
49246: LD_INT 0
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 4
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 5
49266: PUSH
49267: LD_INT 0
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 5
49276: PUSH
49277: LD_INT 1
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 4
49286: PUSH
49287: LD_INT 1
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 3
49296: PUSH
49297: LD_INT 0
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 3
49306: PUSH
49307: LD_INT 1
49309: NEG
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 3
49317: PUSH
49318: LD_INT 2
49320: NEG
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 5
49328: PUSH
49329: LD_INT 2
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
49383: LD_ADDR_VAR 0 32
49387: PUSH
49388: LD_INT 4
49390: NEG
49391: PUSH
49392: LD_INT 0
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 4
49401: NEG
49402: PUSH
49403: LD_INT 1
49405: NEG
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 3
49413: NEG
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 3
49424: NEG
49425: PUSH
49426: LD_INT 1
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 4
49435: NEG
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 5
49446: NEG
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 5
49457: NEG
49458: PUSH
49459: LD_INT 1
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 5
49469: NEG
49470: PUSH
49471: LD_INT 2
49473: NEG
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 3
49481: NEG
49482: PUSH
49483: LD_INT 2
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 3
49492: NEG
49493: PUSH
49494: LD_INT 3
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 3
49504: NEG
49505: PUSH
49506: LD_INT 4
49508: NEG
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 2
49516: NEG
49517: PUSH
49518: LD_INT 3
49520: NEG
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 2
49528: NEG
49529: PUSH
49530: LD_INT 2
49532: NEG
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 3
49540: NEG
49541: PUSH
49542: LD_INT 2
49544: NEG
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 4
49552: NEG
49553: PUSH
49554: LD_INT 3
49556: NEG
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 4
49564: NEG
49565: PUSH
49566: LD_INT 4
49568: NEG
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 2
49576: NEG
49577: PUSH
49578: LD_INT 4
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 4
49588: NEG
49589: PUSH
49590: LD_INT 2
49592: NEG
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: LD_INT 4
49603: NEG
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: LD_INT 5
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 1
49622: PUSH
49623: LD_INT 4
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 1
49633: PUSH
49634: LD_INT 3
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: LD_INT 3
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: NEG
49656: PUSH
49657: LD_INT 4
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 1
49667: NEG
49668: PUSH
49669: LD_INT 5
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 2
49679: PUSH
49680: LD_INT 3
49682: NEG
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 2
49690: NEG
49691: PUSH
49692: LD_INT 5
49694: NEG
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 3
49702: PUSH
49703: LD_INT 0
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 3
49712: PUSH
49713: LD_INT 1
49715: NEG
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 4
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 4
49733: PUSH
49734: LD_INT 1
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 3
49743: PUSH
49744: LD_INT 1
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 2
49753: PUSH
49754: LD_INT 0
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 2
49763: PUSH
49764: LD_INT 1
49766: NEG
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 2
49774: PUSH
49775: LD_INT 2
49777: NEG
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 4
49785: PUSH
49786: LD_INT 2
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 4
49795: PUSH
49796: LD_INT 4
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 4
49805: PUSH
49806: LD_INT 3
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 5
49815: PUSH
49816: LD_INT 4
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 5
49825: PUSH
49826: LD_INT 5
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 4
49835: PUSH
49836: LD_INT 5
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 3
49845: PUSH
49846: LD_INT 4
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 3
49855: PUSH
49856: LD_INT 3
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 5
49865: PUSH
49866: LD_INT 3
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 3
49875: PUSH
49876: LD_INT 5
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
49930: LD_ADDR_VAR 0 33
49934: PUSH
49935: LD_INT 4
49937: NEG
49938: PUSH
49939: LD_INT 4
49941: NEG
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 4
49949: NEG
49950: PUSH
49951: LD_INT 5
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 3
49961: NEG
49962: PUSH
49963: LD_INT 4
49965: NEG
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 3
49973: NEG
49974: PUSH
49975: LD_INT 3
49977: NEG
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 4
49985: NEG
49986: PUSH
49987: LD_INT 3
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 5
49997: NEG
49998: PUSH
49999: LD_INT 4
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 5
50009: NEG
50010: PUSH
50011: LD_INT 5
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 3
50021: NEG
50022: PUSH
50023: LD_INT 5
50025: NEG
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 5
50033: NEG
50034: PUSH
50035: LD_INT 3
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: LD_INT 3
50048: NEG
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 0
50056: PUSH
50057: LD_INT 4
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: LD_INT 3
50070: NEG
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 1
50078: PUSH
50079: LD_INT 2
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 0
50089: PUSH
50090: LD_INT 2
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 1
50100: NEG
50101: PUSH
50102: LD_INT 3
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 1
50112: NEG
50113: PUSH
50114: LD_INT 4
50116: NEG
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 2
50124: PUSH
50125: LD_INT 2
50127: NEG
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 2
50135: NEG
50136: PUSH
50137: LD_INT 4
50139: NEG
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 4
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 4
50157: PUSH
50158: LD_INT 1
50160: NEG
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 5
50168: PUSH
50169: LD_INT 0
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 5
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 4
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 3
50198: PUSH
50199: LD_INT 0
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 3
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 3
50219: PUSH
50220: LD_INT 2
50222: NEG
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 5
50230: PUSH
50231: LD_INT 2
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 3
50240: PUSH
50241: LD_INT 3
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 3
50250: PUSH
50251: LD_INT 2
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 4
50260: PUSH
50261: LD_INT 3
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 4
50270: PUSH
50271: LD_INT 4
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 3
50280: PUSH
50281: LD_INT 4
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 2
50290: PUSH
50291: LD_INT 3
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 2
50300: PUSH
50301: LD_INT 2
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 4
50310: PUSH
50311: LD_INT 2
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 2
50320: PUSH
50321: LD_INT 4
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 0
50330: PUSH
50331: LD_INT 4
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: LD_INT 3
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: LD_INT 4
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: PUSH
50361: LD_INT 5
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 0
50370: PUSH
50371: LD_INT 5
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 1
50380: NEG
50381: PUSH
50382: LD_INT 4
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: LD_INT 3
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 2
50402: PUSH
50403: LD_INT 5
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 2
50412: NEG
50413: PUSH
50414: LD_INT 3
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
50468: LD_ADDR_VAR 0 34
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: LD_INT 4
50478: NEG
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: LD_INT 5
50489: NEG
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 1
50497: PUSH
50498: LD_INT 4
50500: NEG
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 1
50508: PUSH
50509: LD_INT 3
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 0
50519: PUSH
50520: LD_INT 3
50522: NEG
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 1
50530: NEG
50531: PUSH
50532: LD_INT 4
50534: NEG
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 1
50542: NEG
50543: PUSH
50544: LD_INT 5
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 2
50554: PUSH
50555: LD_INT 3
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 2
50565: NEG
50566: PUSH
50567: LD_INT 5
50569: NEG
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 3
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 3
50587: PUSH
50588: LD_INT 1
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 4
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 4
50608: PUSH
50609: LD_INT 1
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 3
50618: PUSH
50619: LD_INT 1
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 2
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 2
50638: PUSH
50639: LD_INT 1
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 2
50649: PUSH
50650: LD_INT 2
50652: NEG
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 4
50660: PUSH
50661: LD_INT 2
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 4
50670: PUSH
50671: LD_INT 4
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 4
50680: PUSH
50681: LD_INT 3
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 5
50690: PUSH
50691: LD_INT 4
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 5
50700: PUSH
50701: LD_INT 5
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 4
50710: PUSH
50711: LD_INT 5
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 3
50720: PUSH
50721: LD_INT 4
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 3
50730: PUSH
50731: LD_INT 3
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 5
50740: PUSH
50741: LD_INT 3
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 3
50750: PUSH
50751: LD_INT 5
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: LD_INT 3
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: LD_INT 2
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: LD_INT 3
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 1
50790: PUSH
50791: LD_INT 4
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: LD_INT 4
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 1
50810: NEG
50811: PUSH
50812: LD_INT 3
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 1
50821: NEG
50822: PUSH
50823: LD_INT 2
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 2
50832: PUSH
50833: LD_INT 4
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 2
50842: NEG
50843: PUSH
50844: LD_INT 2
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 4
50853: NEG
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 4
50864: NEG
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 3
50876: NEG
50877: PUSH
50878: LD_INT 0
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 3
50887: NEG
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 4
50898: NEG
50899: PUSH
50900: LD_INT 1
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 5
50909: NEG
50910: PUSH
50911: LD_INT 0
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 5
50920: NEG
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 5
50932: NEG
50933: PUSH
50934: LD_INT 2
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 3
50944: NEG
50945: PUSH
50946: LD_INT 2
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: ST_TO_ADDR
// end ; end ;
51000: GO 51003
51002: POP
// case btype of b_depot , b_warehouse :
51003: LD_VAR 0 1
51007: PUSH
51008: LD_INT 0
51010: DOUBLE
51011: EQUAL
51012: IFTRUE 51022
51014: LD_INT 1
51016: DOUBLE
51017: EQUAL
51018: IFTRUE 51022
51020: GO 51223
51022: POP
// case nation of nation_american :
51023: LD_VAR 0 5
51027: PUSH
51028: LD_INT 1
51030: DOUBLE
51031: EQUAL
51032: IFTRUE 51036
51034: GO 51092
51036: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
51037: LD_ADDR_VAR 0 9
51041: PUSH
51042: LD_VAR 0 11
51046: PUSH
51047: LD_VAR 0 12
51051: PUSH
51052: LD_VAR 0 13
51056: PUSH
51057: LD_VAR 0 14
51061: PUSH
51062: LD_VAR 0 15
51066: PUSH
51067: LD_VAR 0 16
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: PUSH
51080: LD_VAR 0 4
51084: PUSH
51085: LD_INT 1
51087: PLUS
51088: ARRAY
51089: ST_TO_ADDR
51090: GO 51221
51092: LD_INT 2
51094: DOUBLE
51095: EQUAL
51096: IFTRUE 51100
51098: GO 51156
51100: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
51101: LD_ADDR_VAR 0 9
51105: PUSH
51106: LD_VAR 0 17
51110: PUSH
51111: LD_VAR 0 18
51115: PUSH
51116: LD_VAR 0 19
51120: PUSH
51121: LD_VAR 0 20
51125: PUSH
51126: LD_VAR 0 21
51130: PUSH
51131: LD_VAR 0 22
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: PUSH
51144: LD_VAR 0 4
51148: PUSH
51149: LD_INT 1
51151: PLUS
51152: ARRAY
51153: ST_TO_ADDR
51154: GO 51221
51156: LD_INT 3
51158: DOUBLE
51159: EQUAL
51160: IFTRUE 51164
51162: GO 51220
51164: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51165: LD_ADDR_VAR 0 9
51169: PUSH
51170: LD_VAR 0 23
51174: PUSH
51175: LD_VAR 0 24
51179: PUSH
51180: LD_VAR 0 25
51184: PUSH
51185: LD_VAR 0 26
51189: PUSH
51190: LD_VAR 0 27
51194: PUSH
51195: LD_VAR 0 28
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: PUSH
51208: LD_VAR 0 4
51212: PUSH
51213: LD_INT 1
51215: PLUS
51216: ARRAY
51217: ST_TO_ADDR
51218: GO 51221
51220: POP
51221: GO 51776
51223: LD_INT 2
51225: DOUBLE
51226: EQUAL
51227: IFTRUE 51237
51229: LD_INT 3
51231: DOUBLE
51232: EQUAL
51233: IFTRUE 51237
51235: GO 51293
51237: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51238: LD_ADDR_VAR 0 9
51242: PUSH
51243: LD_VAR 0 29
51247: PUSH
51248: LD_VAR 0 30
51252: PUSH
51253: LD_VAR 0 31
51257: PUSH
51258: LD_VAR 0 32
51262: PUSH
51263: LD_VAR 0 33
51267: PUSH
51268: LD_VAR 0 34
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: PUSH
51281: LD_VAR 0 4
51285: PUSH
51286: LD_INT 1
51288: PLUS
51289: ARRAY
51290: ST_TO_ADDR
51291: GO 51776
51293: LD_INT 16
51295: DOUBLE
51296: EQUAL
51297: IFTRUE 51355
51299: LD_INT 17
51301: DOUBLE
51302: EQUAL
51303: IFTRUE 51355
51305: LD_INT 18
51307: DOUBLE
51308: EQUAL
51309: IFTRUE 51355
51311: LD_INT 19
51313: DOUBLE
51314: EQUAL
51315: IFTRUE 51355
51317: LD_INT 22
51319: DOUBLE
51320: EQUAL
51321: IFTRUE 51355
51323: LD_INT 20
51325: DOUBLE
51326: EQUAL
51327: IFTRUE 51355
51329: LD_INT 21
51331: DOUBLE
51332: EQUAL
51333: IFTRUE 51355
51335: LD_INT 23
51337: DOUBLE
51338: EQUAL
51339: IFTRUE 51355
51341: LD_INT 24
51343: DOUBLE
51344: EQUAL
51345: IFTRUE 51355
51347: LD_INT 25
51349: DOUBLE
51350: EQUAL
51351: IFTRUE 51355
51353: GO 51411
51355: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51356: LD_ADDR_VAR 0 9
51360: PUSH
51361: LD_VAR 0 35
51365: PUSH
51366: LD_VAR 0 36
51370: PUSH
51371: LD_VAR 0 37
51375: PUSH
51376: LD_VAR 0 38
51380: PUSH
51381: LD_VAR 0 39
51385: PUSH
51386: LD_VAR 0 40
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: PUSH
51399: LD_VAR 0 4
51403: PUSH
51404: LD_INT 1
51406: PLUS
51407: ARRAY
51408: ST_TO_ADDR
51409: GO 51776
51411: LD_INT 6
51413: DOUBLE
51414: EQUAL
51415: IFTRUE 51467
51417: LD_INT 7
51419: DOUBLE
51420: EQUAL
51421: IFTRUE 51467
51423: LD_INT 8
51425: DOUBLE
51426: EQUAL
51427: IFTRUE 51467
51429: LD_INT 13
51431: DOUBLE
51432: EQUAL
51433: IFTRUE 51467
51435: LD_INT 12
51437: DOUBLE
51438: EQUAL
51439: IFTRUE 51467
51441: LD_INT 15
51443: DOUBLE
51444: EQUAL
51445: IFTRUE 51467
51447: LD_INT 11
51449: DOUBLE
51450: EQUAL
51451: IFTRUE 51467
51453: LD_INT 14
51455: DOUBLE
51456: EQUAL
51457: IFTRUE 51467
51459: LD_INT 10
51461: DOUBLE
51462: EQUAL
51463: IFTRUE 51467
51465: GO 51523
51467: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
51468: LD_ADDR_VAR 0 9
51472: PUSH
51473: LD_VAR 0 41
51477: PUSH
51478: LD_VAR 0 42
51482: PUSH
51483: LD_VAR 0 43
51487: PUSH
51488: LD_VAR 0 44
51492: PUSH
51493: LD_VAR 0 45
51497: PUSH
51498: LD_VAR 0 46
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: PUSH
51511: LD_VAR 0 4
51515: PUSH
51516: LD_INT 1
51518: PLUS
51519: ARRAY
51520: ST_TO_ADDR
51521: GO 51776
51523: LD_INT 36
51525: DOUBLE
51526: EQUAL
51527: IFTRUE 51531
51529: GO 51587
51531: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
51532: LD_ADDR_VAR 0 9
51536: PUSH
51537: LD_VAR 0 47
51541: PUSH
51542: LD_VAR 0 48
51546: PUSH
51547: LD_VAR 0 49
51551: PUSH
51552: LD_VAR 0 50
51556: PUSH
51557: LD_VAR 0 51
51561: PUSH
51562: LD_VAR 0 52
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: PUSH
51575: LD_VAR 0 4
51579: PUSH
51580: LD_INT 1
51582: PLUS
51583: ARRAY
51584: ST_TO_ADDR
51585: GO 51776
51587: LD_INT 4
51589: DOUBLE
51590: EQUAL
51591: IFTRUE 51613
51593: LD_INT 5
51595: DOUBLE
51596: EQUAL
51597: IFTRUE 51613
51599: LD_INT 34
51601: DOUBLE
51602: EQUAL
51603: IFTRUE 51613
51605: LD_INT 37
51607: DOUBLE
51608: EQUAL
51609: IFTRUE 51613
51611: GO 51669
51613: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
51614: LD_ADDR_VAR 0 9
51618: PUSH
51619: LD_VAR 0 53
51623: PUSH
51624: LD_VAR 0 54
51628: PUSH
51629: LD_VAR 0 55
51633: PUSH
51634: LD_VAR 0 56
51638: PUSH
51639: LD_VAR 0 57
51643: PUSH
51644: LD_VAR 0 58
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: PUSH
51657: LD_VAR 0 4
51661: PUSH
51662: LD_INT 1
51664: PLUS
51665: ARRAY
51666: ST_TO_ADDR
51667: GO 51776
51669: LD_INT 31
51671: DOUBLE
51672: EQUAL
51673: IFTRUE 51719
51675: LD_INT 32
51677: DOUBLE
51678: EQUAL
51679: IFTRUE 51719
51681: LD_INT 33
51683: DOUBLE
51684: EQUAL
51685: IFTRUE 51719
51687: LD_INT 27
51689: DOUBLE
51690: EQUAL
51691: IFTRUE 51719
51693: LD_INT 26
51695: DOUBLE
51696: EQUAL
51697: IFTRUE 51719
51699: LD_INT 28
51701: DOUBLE
51702: EQUAL
51703: IFTRUE 51719
51705: LD_INT 29
51707: DOUBLE
51708: EQUAL
51709: IFTRUE 51719
51711: LD_INT 30
51713: DOUBLE
51714: EQUAL
51715: IFTRUE 51719
51717: GO 51775
51719: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
51720: LD_ADDR_VAR 0 9
51724: PUSH
51725: LD_VAR 0 59
51729: PUSH
51730: LD_VAR 0 60
51734: PUSH
51735: LD_VAR 0 61
51739: PUSH
51740: LD_VAR 0 62
51744: PUSH
51745: LD_VAR 0 63
51749: PUSH
51750: LD_VAR 0 64
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: PUSH
51763: LD_VAR 0 4
51767: PUSH
51768: LD_INT 1
51770: PLUS
51771: ARRAY
51772: ST_TO_ADDR
51773: GO 51776
51775: POP
// temp_list2 = [ ] ;
51776: LD_ADDR_VAR 0 10
51780: PUSH
51781: EMPTY
51782: ST_TO_ADDR
// for i in temp_list do
51783: LD_ADDR_VAR 0 8
51787: PUSH
51788: LD_VAR 0 9
51792: PUSH
51793: FOR_IN
51794: IFFALSE 51846
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
51796: LD_ADDR_VAR 0 10
51800: PUSH
51801: LD_VAR 0 10
51805: PUSH
51806: LD_VAR 0 8
51810: PUSH
51811: LD_INT 1
51813: ARRAY
51814: PUSH
51815: LD_VAR 0 2
51819: PLUS
51820: PUSH
51821: LD_VAR 0 8
51825: PUSH
51826: LD_INT 2
51828: ARRAY
51829: PUSH
51830: LD_VAR 0 3
51834: PLUS
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: EMPTY
51841: LIST
51842: ADD
51843: ST_TO_ADDR
51844: GO 51793
51846: POP
51847: POP
// result = temp_list2 ;
51848: LD_ADDR_VAR 0 7
51852: PUSH
51853: LD_VAR 0 10
51857: ST_TO_ADDR
// end ;
51858: LD_VAR 0 7
51862: RET
// export function EnemyInRange ( unit , dist ) ; begin
51863: LD_INT 0
51865: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
51866: LD_ADDR_VAR 0 3
51870: PUSH
51871: LD_VAR 0 1
51875: PPUSH
51876: CALL_OW 255
51880: PPUSH
51881: LD_VAR 0 1
51885: PPUSH
51886: CALL_OW 250
51890: PPUSH
51891: LD_VAR 0 1
51895: PPUSH
51896: CALL_OW 251
51900: PPUSH
51901: LD_VAR 0 2
51905: PPUSH
51906: CALL 25258 0 4
51910: PUSH
51911: LD_INT 4
51913: ARRAY
51914: ST_TO_ADDR
// end ;
51915: LD_VAR 0 3
51919: RET
// export function PlayerSeeMe ( unit ) ; begin
51920: LD_INT 0
51922: PPUSH
// result := See ( your_side , unit ) ;
51923: LD_ADDR_VAR 0 2
51927: PUSH
51928: LD_OWVAR 2
51932: PPUSH
51933: LD_VAR 0 1
51937: PPUSH
51938: CALL_OW 292
51942: ST_TO_ADDR
// end ;
51943: LD_VAR 0 2
51947: RET
// export function ReverseDir ( unit ) ; begin
51948: LD_INT 0
51950: PPUSH
// if not unit then
51951: LD_VAR 0 1
51955: NOT
51956: IFFALSE 51960
// exit ;
51958: GO 51983
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
51960: LD_ADDR_VAR 0 2
51964: PUSH
51965: LD_VAR 0 1
51969: PPUSH
51970: CALL_OW 254
51974: PUSH
51975: LD_INT 3
51977: PLUS
51978: PUSH
51979: LD_INT 6
51981: MOD
51982: ST_TO_ADDR
// end ;
51983: LD_VAR 0 2
51987: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
51988: LD_INT 0
51990: PPUSH
51991: PPUSH
51992: PPUSH
51993: PPUSH
51994: PPUSH
// if not hexes then
51995: LD_VAR 0 2
51999: NOT
52000: IFFALSE 52004
// exit ;
52002: GO 52152
// dist := 9999 ;
52004: LD_ADDR_VAR 0 5
52008: PUSH
52009: LD_INT 9999
52011: ST_TO_ADDR
// for i = 1 to hexes do
52012: LD_ADDR_VAR 0 4
52016: PUSH
52017: DOUBLE
52018: LD_INT 1
52020: DEC
52021: ST_TO_ADDR
52022: LD_VAR 0 2
52026: PUSH
52027: FOR_TO
52028: IFFALSE 52140
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52030: LD_VAR 0 1
52034: PPUSH
52035: LD_VAR 0 2
52039: PUSH
52040: LD_VAR 0 4
52044: ARRAY
52045: PUSH
52046: LD_INT 1
52048: ARRAY
52049: PPUSH
52050: LD_VAR 0 2
52054: PUSH
52055: LD_VAR 0 4
52059: ARRAY
52060: PUSH
52061: LD_INT 2
52063: ARRAY
52064: PPUSH
52065: CALL_OW 297
52069: PUSH
52070: LD_VAR 0 5
52074: LESS
52075: IFFALSE 52138
// begin hex := hexes [ i ] ;
52077: LD_ADDR_VAR 0 7
52081: PUSH
52082: LD_VAR 0 2
52086: PUSH
52087: LD_VAR 0 4
52091: ARRAY
52092: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52093: LD_ADDR_VAR 0 5
52097: PUSH
52098: LD_VAR 0 1
52102: PPUSH
52103: LD_VAR 0 2
52107: PUSH
52108: LD_VAR 0 4
52112: ARRAY
52113: PUSH
52114: LD_INT 1
52116: ARRAY
52117: PPUSH
52118: LD_VAR 0 2
52122: PUSH
52123: LD_VAR 0 4
52127: ARRAY
52128: PUSH
52129: LD_INT 2
52131: ARRAY
52132: PPUSH
52133: CALL_OW 297
52137: ST_TO_ADDR
// end ; end ;
52138: GO 52027
52140: POP
52141: POP
// result := hex ;
52142: LD_ADDR_VAR 0 3
52146: PUSH
52147: LD_VAR 0 7
52151: ST_TO_ADDR
// end ;
52152: LD_VAR 0 3
52156: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52157: LD_INT 0
52159: PPUSH
52160: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52161: LD_VAR 0 1
52165: NOT
52166: PUSH
52167: LD_VAR 0 1
52171: PUSH
52172: LD_INT 21
52174: PUSH
52175: LD_INT 2
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 23
52184: PUSH
52185: LD_INT 2
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PPUSH
52196: CALL_OW 69
52200: IN
52201: NOT
52202: OR
52203: IFFALSE 52207
// exit ;
52205: GO 52254
// for i = 1 to 3 do
52207: LD_ADDR_VAR 0 3
52211: PUSH
52212: DOUBLE
52213: LD_INT 1
52215: DEC
52216: ST_TO_ADDR
52217: LD_INT 3
52219: PUSH
52220: FOR_TO
52221: IFFALSE 52252
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52223: LD_VAR 0 1
52227: PPUSH
52228: CALL_OW 250
52232: PPUSH
52233: LD_VAR 0 1
52237: PPUSH
52238: CALL_OW 251
52242: PPUSH
52243: LD_INT 1
52245: PPUSH
52246: CALL_OW 453
52250: GO 52220
52252: POP
52253: POP
// end ;
52254: LD_VAR 0 2
52258: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52259: LD_INT 0
52261: PPUSH
52262: PPUSH
52263: PPUSH
52264: PPUSH
52265: PPUSH
52266: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
52267: LD_VAR 0 1
52271: NOT
52272: PUSH
52273: LD_VAR 0 2
52277: NOT
52278: OR
52279: PUSH
52280: LD_VAR 0 1
52284: PPUSH
52285: CALL_OW 314
52289: OR
52290: IFFALSE 52294
// exit ;
52292: GO 52735
// x := GetX ( enemy_unit ) ;
52294: LD_ADDR_VAR 0 7
52298: PUSH
52299: LD_VAR 0 2
52303: PPUSH
52304: CALL_OW 250
52308: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52309: LD_ADDR_VAR 0 8
52313: PUSH
52314: LD_VAR 0 2
52318: PPUSH
52319: CALL_OW 251
52323: ST_TO_ADDR
// if not x or not y then
52324: LD_VAR 0 7
52328: NOT
52329: PUSH
52330: LD_VAR 0 8
52334: NOT
52335: OR
52336: IFFALSE 52340
// exit ;
52338: GO 52735
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52340: LD_ADDR_VAR 0 6
52344: PUSH
52345: LD_VAR 0 7
52349: PPUSH
52350: LD_INT 0
52352: PPUSH
52353: LD_INT 4
52355: PPUSH
52356: CALL_OW 272
52360: PUSH
52361: LD_VAR 0 8
52365: PPUSH
52366: LD_INT 0
52368: PPUSH
52369: LD_INT 4
52371: PPUSH
52372: CALL_OW 273
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_VAR 0 7
52385: PPUSH
52386: LD_INT 1
52388: PPUSH
52389: LD_INT 4
52391: PPUSH
52392: CALL_OW 272
52396: PUSH
52397: LD_VAR 0 8
52401: PPUSH
52402: LD_INT 1
52404: PPUSH
52405: LD_INT 4
52407: PPUSH
52408: CALL_OW 273
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_VAR 0 7
52421: PPUSH
52422: LD_INT 2
52424: PPUSH
52425: LD_INT 4
52427: PPUSH
52428: CALL_OW 272
52432: PUSH
52433: LD_VAR 0 8
52437: PPUSH
52438: LD_INT 2
52440: PPUSH
52441: LD_INT 4
52443: PPUSH
52444: CALL_OW 273
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_VAR 0 7
52457: PPUSH
52458: LD_INT 3
52460: PPUSH
52461: LD_INT 4
52463: PPUSH
52464: CALL_OW 272
52468: PUSH
52469: LD_VAR 0 8
52473: PPUSH
52474: LD_INT 3
52476: PPUSH
52477: LD_INT 4
52479: PPUSH
52480: CALL_OW 273
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_VAR 0 7
52493: PPUSH
52494: LD_INT 4
52496: PPUSH
52497: LD_INT 4
52499: PPUSH
52500: CALL_OW 272
52504: PUSH
52505: LD_VAR 0 8
52509: PPUSH
52510: LD_INT 4
52512: PPUSH
52513: LD_INT 4
52515: PPUSH
52516: CALL_OW 273
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_VAR 0 7
52529: PPUSH
52530: LD_INT 5
52532: PPUSH
52533: LD_INT 4
52535: PPUSH
52536: CALL_OW 272
52540: PUSH
52541: LD_VAR 0 8
52545: PPUSH
52546: LD_INT 5
52548: PPUSH
52549: LD_INT 4
52551: PPUSH
52552: CALL_OW 273
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: ST_TO_ADDR
// for i = tmp downto 1 do
52569: LD_ADDR_VAR 0 4
52573: PUSH
52574: DOUBLE
52575: LD_VAR 0 6
52579: INC
52580: ST_TO_ADDR
52581: LD_INT 1
52583: PUSH
52584: FOR_DOWNTO
52585: IFFALSE 52686
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
52587: LD_VAR 0 6
52591: PUSH
52592: LD_VAR 0 4
52596: ARRAY
52597: PUSH
52598: LD_INT 1
52600: ARRAY
52601: PPUSH
52602: LD_VAR 0 6
52606: PUSH
52607: LD_VAR 0 4
52611: ARRAY
52612: PUSH
52613: LD_INT 2
52615: ARRAY
52616: PPUSH
52617: CALL_OW 488
52621: NOT
52622: PUSH
52623: LD_VAR 0 6
52627: PUSH
52628: LD_VAR 0 4
52632: ARRAY
52633: PUSH
52634: LD_INT 1
52636: ARRAY
52637: PPUSH
52638: LD_VAR 0 6
52642: PUSH
52643: LD_VAR 0 4
52647: ARRAY
52648: PUSH
52649: LD_INT 2
52651: ARRAY
52652: PPUSH
52653: CALL_OW 428
52657: PUSH
52658: LD_INT 0
52660: NONEQUAL
52661: OR
52662: IFFALSE 52684
// tmp := Delete ( tmp , i ) ;
52664: LD_ADDR_VAR 0 6
52668: PUSH
52669: LD_VAR 0 6
52673: PPUSH
52674: LD_VAR 0 4
52678: PPUSH
52679: CALL_OW 3
52683: ST_TO_ADDR
52684: GO 52584
52686: POP
52687: POP
// j := GetClosestHex ( unit , tmp ) ;
52688: LD_ADDR_VAR 0 5
52692: PUSH
52693: LD_VAR 0 1
52697: PPUSH
52698: LD_VAR 0 6
52702: PPUSH
52703: CALL 51988 0 2
52707: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
52708: LD_VAR 0 1
52712: PPUSH
52713: LD_VAR 0 5
52717: PUSH
52718: LD_INT 1
52720: ARRAY
52721: PPUSH
52722: LD_VAR 0 5
52726: PUSH
52727: LD_INT 2
52729: ARRAY
52730: PPUSH
52731: CALL_OW 111
// end ;
52735: LD_VAR 0 3
52739: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
52740: LD_INT 0
52742: PPUSH
52743: PPUSH
52744: PPUSH
// uc_side = 0 ;
52745: LD_ADDR_OWVAR 20
52749: PUSH
52750: LD_INT 0
52752: ST_TO_ADDR
// uc_nation = 0 ;
52753: LD_ADDR_OWVAR 21
52757: PUSH
52758: LD_INT 0
52760: ST_TO_ADDR
// InitHc_All ( ) ;
52761: CALL_OW 584
// InitVc ;
52765: CALL_OW 20
// if mastodonts then
52769: LD_VAR 0 6
52773: IFFALSE 52840
// for i = 1 to mastodonts do
52775: LD_ADDR_VAR 0 11
52779: PUSH
52780: DOUBLE
52781: LD_INT 1
52783: DEC
52784: ST_TO_ADDR
52785: LD_VAR 0 6
52789: PUSH
52790: FOR_TO
52791: IFFALSE 52838
// begin vc_chassis := 31 ;
52793: LD_ADDR_OWVAR 37
52797: PUSH
52798: LD_INT 31
52800: ST_TO_ADDR
// vc_control := control_rider ;
52801: LD_ADDR_OWVAR 38
52805: PUSH
52806: LD_INT 4
52808: ST_TO_ADDR
// animal := CreateVehicle ;
52809: LD_ADDR_VAR 0 12
52813: PUSH
52814: CALL_OW 45
52818: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52819: LD_VAR 0 12
52823: PPUSH
52824: LD_VAR 0 8
52828: PPUSH
52829: LD_INT 0
52831: PPUSH
52832: CALL 55028 0 3
// end ;
52836: GO 52790
52838: POP
52839: POP
// if horses then
52840: LD_VAR 0 5
52844: IFFALSE 52911
// for i = 1 to horses do
52846: LD_ADDR_VAR 0 11
52850: PUSH
52851: DOUBLE
52852: LD_INT 1
52854: DEC
52855: ST_TO_ADDR
52856: LD_VAR 0 5
52860: PUSH
52861: FOR_TO
52862: IFFALSE 52909
// begin hc_class := 21 ;
52864: LD_ADDR_OWVAR 28
52868: PUSH
52869: LD_INT 21
52871: ST_TO_ADDR
// hc_gallery :=  ;
52872: LD_ADDR_OWVAR 33
52876: PUSH
52877: LD_STRING 
52879: ST_TO_ADDR
// animal := CreateHuman ;
52880: LD_ADDR_VAR 0 12
52884: PUSH
52885: CALL_OW 44
52889: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52890: LD_VAR 0 12
52894: PPUSH
52895: LD_VAR 0 8
52899: PPUSH
52900: LD_INT 0
52902: PPUSH
52903: CALL 55028 0 3
// end ;
52907: GO 52861
52909: POP
52910: POP
// if birds then
52911: LD_VAR 0 1
52915: IFFALSE 52982
// for i = 1 to birds do
52917: LD_ADDR_VAR 0 11
52921: PUSH
52922: DOUBLE
52923: LD_INT 1
52925: DEC
52926: ST_TO_ADDR
52927: LD_VAR 0 1
52931: PUSH
52932: FOR_TO
52933: IFFALSE 52980
// begin hc_class = 18 ;
52935: LD_ADDR_OWVAR 28
52939: PUSH
52940: LD_INT 18
52942: ST_TO_ADDR
// hc_gallery =  ;
52943: LD_ADDR_OWVAR 33
52947: PUSH
52948: LD_STRING 
52950: ST_TO_ADDR
// animal := CreateHuman ;
52951: LD_ADDR_VAR 0 12
52955: PUSH
52956: CALL_OW 44
52960: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52961: LD_VAR 0 12
52965: PPUSH
52966: LD_VAR 0 8
52970: PPUSH
52971: LD_INT 0
52973: PPUSH
52974: CALL 55028 0 3
// end ;
52978: GO 52932
52980: POP
52981: POP
// if tigers then
52982: LD_VAR 0 2
52986: IFFALSE 53070
// for i = 1 to tigers do
52988: LD_ADDR_VAR 0 11
52992: PUSH
52993: DOUBLE
52994: LD_INT 1
52996: DEC
52997: ST_TO_ADDR
52998: LD_VAR 0 2
53002: PUSH
53003: FOR_TO
53004: IFFALSE 53068
// begin hc_class = class_tiger ;
53006: LD_ADDR_OWVAR 28
53010: PUSH
53011: LD_INT 14
53013: ST_TO_ADDR
// hc_gallery =  ;
53014: LD_ADDR_OWVAR 33
53018: PUSH
53019: LD_STRING 
53021: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53022: LD_ADDR_OWVAR 35
53026: PUSH
53027: LD_INT 7
53029: NEG
53030: PPUSH
53031: LD_INT 7
53033: PPUSH
53034: CALL_OW 12
53038: ST_TO_ADDR
// animal := CreateHuman ;
53039: LD_ADDR_VAR 0 12
53043: PUSH
53044: CALL_OW 44
53048: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53049: LD_VAR 0 12
53053: PPUSH
53054: LD_VAR 0 8
53058: PPUSH
53059: LD_INT 0
53061: PPUSH
53062: CALL 55028 0 3
// end ;
53066: GO 53003
53068: POP
53069: POP
// if apemans then
53070: LD_VAR 0 3
53074: IFFALSE 53197
// for i = 1 to apemans do
53076: LD_ADDR_VAR 0 11
53080: PUSH
53081: DOUBLE
53082: LD_INT 1
53084: DEC
53085: ST_TO_ADDR
53086: LD_VAR 0 3
53090: PUSH
53091: FOR_TO
53092: IFFALSE 53195
// begin hc_class = class_apeman ;
53094: LD_ADDR_OWVAR 28
53098: PUSH
53099: LD_INT 12
53101: ST_TO_ADDR
// hc_gallery =  ;
53102: LD_ADDR_OWVAR 33
53106: PUSH
53107: LD_STRING 
53109: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
53110: LD_ADDR_OWVAR 35
53114: PUSH
53115: LD_INT 5
53117: NEG
53118: PPUSH
53119: LD_INT 5
53121: PPUSH
53122: CALL_OW 12
53126: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53127: LD_ADDR_OWVAR 31
53131: PUSH
53132: LD_INT 1
53134: PPUSH
53135: LD_INT 3
53137: PPUSH
53138: CALL_OW 12
53142: PUSH
53143: LD_INT 1
53145: PPUSH
53146: LD_INT 3
53148: PPUSH
53149: CALL_OW 12
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: ST_TO_ADDR
// animal := CreateHuman ;
53166: LD_ADDR_VAR 0 12
53170: PUSH
53171: CALL_OW 44
53175: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53176: LD_VAR 0 12
53180: PPUSH
53181: LD_VAR 0 8
53185: PPUSH
53186: LD_INT 0
53188: PPUSH
53189: CALL 55028 0 3
// end ;
53193: GO 53091
53195: POP
53196: POP
// if enchidnas then
53197: LD_VAR 0 4
53201: IFFALSE 53268
// for i = 1 to enchidnas do
53203: LD_ADDR_VAR 0 11
53207: PUSH
53208: DOUBLE
53209: LD_INT 1
53211: DEC
53212: ST_TO_ADDR
53213: LD_VAR 0 4
53217: PUSH
53218: FOR_TO
53219: IFFALSE 53266
// begin hc_class = 13 ;
53221: LD_ADDR_OWVAR 28
53225: PUSH
53226: LD_INT 13
53228: ST_TO_ADDR
// hc_gallery =  ;
53229: LD_ADDR_OWVAR 33
53233: PUSH
53234: LD_STRING 
53236: ST_TO_ADDR
// animal := CreateHuman ;
53237: LD_ADDR_VAR 0 12
53241: PUSH
53242: CALL_OW 44
53246: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53247: LD_VAR 0 12
53251: PPUSH
53252: LD_VAR 0 8
53256: PPUSH
53257: LD_INT 0
53259: PPUSH
53260: CALL 55028 0 3
// end ;
53264: GO 53218
53266: POP
53267: POP
// if fishes then
53268: LD_VAR 0 7
53272: IFFALSE 53339
// for i = 1 to fishes do
53274: LD_ADDR_VAR 0 11
53278: PUSH
53279: DOUBLE
53280: LD_INT 1
53282: DEC
53283: ST_TO_ADDR
53284: LD_VAR 0 7
53288: PUSH
53289: FOR_TO
53290: IFFALSE 53337
// begin hc_class = 20 ;
53292: LD_ADDR_OWVAR 28
53296: PUSH
53297: LD_INT 20
53299: ST_TO_ADDR
// hc_gallery =  ;
53300: LD_ADDR_OWVAR 33
53304: PUSH
53305: LD_STRING 
53307: ST_TO_ADDR
// animal := CreateHuman ;
53308: LD_ADDR_VAR 0 12
53312: PUSH
53313: CALL_OW 44
53317: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53318: LD_VAR 0 12
53322: PPUSH
53323: LD_VAR 0 9
53327: PPUSH
53328: LD_INT 0
53330: PPUSH
53331: CALL 55028 0 3
// end ;
53335: GO 53289
53337: POP
53338: POP
// end ;
53339: LD_VAR 0 10
53343: RET
// export function WantHeal ( sci , unit ) ; begin
53344: LD_INT 0
53346: PPUSH
// if GetTaskList ( sci ) > 0 then
53347: LD_VAR 0 1
53351: PPUSH
53352: CALL_OW 437
53356: PUSH
53357: LD_INT 0
53359: GREATER
53360: IFFALSE 53430
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53362: LD_VAR 0 1
53366: PPUSH
53367: CALL_OW 437
53371: PUSH
53372: LD_INT 1
53374: ARRAY
53375: PUSH
53376: LD_INT 1
53378: ARRAY
53379: PUSH
53380: LD_STRING l
53382: EQUAL
53383: PUSH
53384: LD_VAR 0 1
53388: PPUSH
53389: CALL_OW 437
53393: PUSH
53394: LD_INT 1
53396: ARRAY
53397: PUSH
53398: LD_INT 4
53400: ARRAY
53401: PUSH
53402: LD_VAR 0 2
53406: EQUAL
53407: AND
53408: IFFALSE 53420
// result := true else
53410: LD_ADDR_VAR 0 3
53414: PUSH
53415: LD_INT 1
53417: ST_TO_ADDR
53418: GO 53428
// result := false ;
53420: LD_ADDR_VAR 0 3
53424: PUSH
53425: LD_INT 0
53427: ST_TO_ADDR
// end else
53428: GO 53438
// result := false ;
53430: LD_ADDR_VAR 0 3
53434: PUSH
53435: LD_INT 0
53437: ST_TO_ADDR
// end ;
53438: LD_VAR 0 3
53442: RET
// export function HealTarget ( sci ) ; begin
53443: LD_INT 0
53445: PPUSH
// if not sci then
53446: LD_VAR 0 1
53450: NOT
53451: IFFALSE 53455
// exit ;
53453: GO 53520
// result := 0 ;
53455: LD_ADDR_VAR 0 2
53459: PUSH
53460: LD_INT 0
53462: ST_TO_ADDR
// if GetTaskList ( sci ) then
53463: LD_VAR 0 1
53467: PPUSH
53468: CALL_OW 437
53472: IFFALSE 53520
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
53474: LD_VAR 0 1
53478: PPUSH
53479: CALL_OW 437
53483: PUSH
53484: LD_INT 1
53486: ARRAY
53487: PUSH
53488: LD_INT 1
53490: ARRAY
53491: PUSH
53492: LD_STRING l
53494: EQUAL
53495: IFFALSE 53520
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
53497: LD_ADDR_VAR 0 2
53501: PUSH
53502: LD_VAR 0 1
53506: PPUSH
53507: CALL_OW 437
53511: PUSH
53512: LD_INT 1
53514: ARRAY
53515: PUSH
53516: LD_INT 4
53518: ARRAY
53519: ST_TO_ADDR
// end ;
53520: LD_VAR 0 2
53524: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
53525: LD_INT 0
53527: PPUSH
53528: PPUSH
53529: PPUSH
53530: PPUSH
// if not base_units then
53531: LD_VAR 0 1
53535: NOT
53536: IFFALSE 53540
// exit ;
53538: GO 53627
// result := false ;
53540: LD_ADDR_VAR 0 2
53544: PUSH
53545: LD_INT 0
53547: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
53548: LD_ADDR_VAR 0 5
53552: PUSH
53553: LD_VAR 0 1
53557: PPUSH
53558: LD_INT 21
53560: PUSH
53561: LD_INT 3
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PPUSH
53568: CALL_OW 72
53572: ST_TO_ADDR
// if not tmp then
53573: LD_VAR 0 5
53577: NOT
53578: IFFALSE 53582
// exit ;
53580: GO 53627
// for i in tmp do
53582: LD_ADDR_VAR 0 3
53586: PUSH
53587: LD_VAR 0 5
53591: PUSH
53592: FOR_IN
53593: IFFALSE 53625
// begin result := EnemyInRange ( i , 22 ) ;
53595: LD_ADDR_VAR 0 2
53599: PUSH
53600: LD_VAR 0 3
53604: PPUSH
53605: LD_INT 22
53607: PPUSH
53608: CALL 51863 0 2
53612: ST_TO_ADDR
// if result then
53613: LD_VAR 0 2
53617: IFFALSE 53623
// exit ;
53619: POP
53620: POP
53621: GO 53627
// end ;
53623: GO 53592
53625: POP
53626: POP
// end ;
53627: LD_VAR 0 2
53631: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
53632: LD_INT 0
53634: PPUSH
53635: PPUSH
// if not units then
53636: LD_VAR 0 1
53640: NOT
53641: IFFALSE 53645
// exit ;
53643: GO 53715
// result := [ ] ;
53645: LD_ADDR_VAR 0 3
53649: PUSH
53650: EMPTY
53651: ST_TO_ADDR
// for i in units do
53652: LD_ADDR_VAR 0 4
53656: PUSH
53657: LD_VAR 0 1
53661: PUSH
53662: FOR_IN
53663: IFFALSE 53713
// if GetTag ( i ) = tag then
53665: LD_VAR 0 4
53669: PPUSH
53670: CALL_OW 110
53674: PUSH
53675: LD_VAR 0 2
53679: EQUAL
53680: IFFALSE 53711
// result := Insert ( result , result + 1 , i ) ;
53682: LD_ADDR_VAR 0 3
53686: PUSH
53687: LD_VAR 0 3
53691: PPUSH
53692: LD_VAR 0 3
53696: PUSH
53697: LD_INT 1
53699: PLUS
53700: PPUSH
53701: LD_VAR 0 4
53705: PPUSH
53706: CALL_OW 2
53710: ST_TO_ADDR
53711: GO 53662
53713: POP
53714: POP
// end ;
53715: LD_VAR 0 3
53719: RET
// export function IsDriver ( un ) ; begin
53720: LD_INT 0
53722: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
53723: LD_ADDR_VAR 0 2
53727: PUSH
53728: LD_VAR 0 1
53732: PUSH
53733: LD_INT 55
53735: PUSH
53736: EMPTY
53737: LIST
53738: PPUSH
53739: CALL_OW 69
53743: IN
53744: ST_TO_ADDR
// end ;
53745: LD_VAR 0 2
53749: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
53750: LD_INT 0
53752: PPUSH
53753: PPUSH
// list := [ ] ;
53754: LD_ADDR_VAR 0 5
53758: PUSH
53759: EMPTY
53760: ST_TO_ADDR
// case d of 0 :
53761: LD_VAR 0 3
53765: PUSH
53766: LD_INT 0
53768: DOUBLE
53769: EQUAL
53770: IFTRUE 53774
53772: GO 53907
53774: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
53775: LD_ADDR_VAR 0 5
53779: PUSH
53780: LD_VAR 0 1
53784: PUSH
53785: LD_INT 4
53787: MINUS
53788: PUSH
53789: LD_VAR 0 2
53793: PUSH
53794: LD_INT 4
53796: MINUS
53797: PUSH
53798: LD_INT 2
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: LIST
53805: PUSH
53806: LD_VAR 0 1
53810: PUSH
53811: LD_INT 3
53813: MINUS
53814: PUSH
53815: LD_VAR 0 2
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: LIST
53827: PUSH
53828: LD_VAR 0 1
53832: PUSH
53833: LD_INT 4
53835: PLUS
53836: PUSH
53837: LD_VAR 0 2
53841: PUSH
53842: LD_INT 4
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: LIST
53849: PUSH
53850: LD_VAR 0 1
53854: PUSH
53855: LD_INT 3
53857: PLUS
53858: PUSH
53859: LD_VAR 0 2
53863: PUSH
53864: LD_INT 3
53866: PLUS
53867: PUSH
53868: LD_INT 5
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: LIST
53875: PUSH
53876: LD_VAR 0 1
53880: PUSH
53881: LD_VAR 0 2
53885: PUSH
53886: LD_INT 4
53888: PLUS
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: LIST
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: ST_TO_ADDR
// end ; 1 :
53905: GO 54605
53907: LD_INT 1
53909: DOUBLE
53910: EQUAL
53911: IFTRUE 53915
53913: GO 54048
53915: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53916: LD_ADDR_VAR 0 5
53920: PUSH
53921: LD_VAR 0 1
53925: PUSH
53926: LD_VAR 0 2
53930: PUSH
53931: LD_INT 4
53933: MINUS
53934: PUSH
53935: LD_INT 3
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: LIST
53942: PUSH
53943: LD_VAR 0 1
53947: PUSH
53948: LD_INT 3
53950: MINUS
53951: PUSH
53952: LD_VAR 0 2
53956: PUSH
53957: LD_INT 3
53959: MINUS
53960: PUSH
53961: LD_INT 2
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: LIST
53968: PUSH
53969: LD_VAR 0 1
53973: PUSH
53974: LD_INT 4
53976: MINUS
53977: PUSH
53978: LD_VAR 0 2
53982: PUSH
53983: LD_INT 1
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: LIST
53990: PUSH
53991: LD_VAR 0 1
53995: PUSH
53996: LD_VAR 0 2
54000: PUSH
54001: LD_INT 3
54003: PLUS
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: LIST
54012: PUSH
54013: LD_VAR 0 1
54017: PUSH
54018: LD_INT 4
54020: PLUS
54021: PUSH
54022: LD_VAR 0 2
54026: PUSH
54027: LD_INT 4
54029: PLUS
54030: PUSH
54031: LD_INT 5
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: LIST
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: ST_TO_ADDR
// end ; 2 :
54046: GO 54605
54048: LD_INT 2
54050: DOUBLE
54051: EQUAL
54052: IFTRUE 54056
54054: GO 54185
54056: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54057: LD_ADDR_VAR 0 5
54061: PUSH
54062: LD_VAR 0 1
54066: PUSH
54067: LD_VAR 0 2
54071: PUSH
54072: LD_INT 3
54074: MINUS
54075: PUSH
54076: LD_INT 3
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: LIST
54083: PUSH
54084: LD_VAR 0 1
54088: PUSH
54089: LD_INT 4
54091: PLUS
54092: PUSH
54093: LD_VAR 0 2
54097: PUSH
54098: LD_INT 4
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: LIST
54105: PUSH
54106: LD_VAR 0 1
54110: PUSH
54111: LD_VAR 0 2
54115: PUSH
54116: LD_INT 4
54118: PLUS
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: LIST
54127: PUSH
54128: LD_VAR 0 1
54132: PUSH
54133: LD_INT 3
54135: MINUS
54136: PUSH
54137: LD_VAR 0 2
54141: PUSH
54142: LD_INT 1
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: LIST
54149: PUSH
54150: LD_VAR 0 1
54154: PUSH
54155: LD_INT 4
54157: MINUS
54158: PUSH
54159: LD_VAR 0 2
54163: PUSH
54164: LD_INT 4
54166: MINUS
54167: PUSH
54168: LD_INT 2
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: LIST
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: ST_TO_ADDR
// end ; 3 :
54183: GO 54605
54185: LD_INT 3
54187: DOUBLE
54188: EQUAL
54189: IFTRUE 54193
54191: GO 54326
54193: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
54194: LD_ADDR_VAR 0 5
54198: PUSH
54199: LD_VAR 0 1
54203: PUSH
54204: LD_INT 3
54206: PLUS
54207: PUSH
54208: LD_VAR 0 2
54212: PUSH
54213: LD_INT 4
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: LIST
54220: PUSH
54221: LD_VAR 0 1
54225: PUSH
54226: LD_INT 4
54228: PLUS
54229: PUSH
54230: LD_VAR 0 2
54234: PUSH
54235: LD_INT 4
54237: PLUS
54238: PUSH
54239: LD_INT 5
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: LIST
54246: PUSH
54247: LD_VAR 0 1
54251: PUSH
54252: LD_INT 4
54254: MINUS
54255: PUSH
54256: LD_VAR 0 2
54260: PUSH
54261: LD_INT 1
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: LIST
54268: PUSH
54269: LD_VAR 0 1
54273: PUSH
54274: LD_VAR 0 2
54278: PUSH
54279: LD_INT 4
54281: MINUS
54282: PUSH
54283: LD_INT 3
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: LIST
54290: PUSH
54291: LD_VAR 0 1
54295: PUSH
54296: LD_INT 3
54298: MINUS
54299: PUSH
54300: LD_VAR 0 2
54304: PUSH
54305: LD_INT 3
54307: MINUS
54308: PUSH
54309: LD_INT 2
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: LIST
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: ST_TO_ADDR
// end ; 4 :
54324: GO 54605
54326: LD_INT 4
54328: DOUBLE
54329: EQUAL
54330: IFTRUE 54334
54332: GO 54467
54334: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
54335: LD_ADDR_VAR 0 5
54339: PUSH
54340: LD_VAR 0 1
54344: PUSH
54345: LD_VAR 0 2
54349: PUSH
54350: LD_INT 4
54352: PLUS
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: LIST
54361: PUSH
54362: LD_VAR 0 1
54366: PUSH
54367: LD_INT 3
54369: PLUS
54370: PUSH
54371: LD_VAR 0 2
54375: PUSH
54376: LD_INT 3
54378: PLUS
54379: PUSH
54380: LD_INT 5
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: LIST
54387: PUSH
54388: LD_VAR 0 1
54392: PUSH
54393: LD_INT 4
54395: PLUS
54396: PUSH
54397: LD_VAR 0 2
54401: PUSH
54402: LD_INT 4
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: LIST
54409: PUSH
54410: LD_VAR 0 1
54414: PUSH
54415: LD_VAR 0 2
54419: PUSH
54420: LD_INT 3
54422: MINUS
54423: PUSH
54424: LD_INT 3
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: LIST
54431: PUSH
54432: LD_VAR 0 1
54436: PUSH
54437: LD_INT 4
54439: MINUS
54440: PUSH
54441: LD_VAR 0 2
54445: PUSH
54446: LD_INT 4
54448: MINUS
54449: PUSH
54450: LD_INT 2
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: LIST
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: ST_TO_ADDR
// end ; 5 :
54465: GO 54605
54467: LD_INT 5
54469: DOUBLE
54470: EQUAL
54471: IFTRUE 54475
54473: GO 54604
54475: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
54476: LD_ADDR_VAR 0 5
54480: PUSH
54481: LD_VAR 0 1
54485: PUSH
54486: LD_INT 4
54488: MINUS
54489: PUSH
54490: LD_VAR 0 2
54494: PUSH
54495: LD_INT 1
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: LIST
54502: PUSH
54503: LD_VAR 0 1
54507: PUSH
54508: LD_VAR 0 2
54512: PUSH
54513: LD_INT 4
54515: MINUS
54516: PUSH
54517: LD_INT 3
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: LIST
54524: PUSH
54525: LD_VAR 0 1
54529: PUSH
54530: LD_INT 4
54532: PLUS
54533: PUSH
54534: LD_VAR 0 2
54538: PUSH
54539: LD_INT 4
54541: PLUS
54542: PUSH
54543: LD_INT 5
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: LIST
54550: PUSH
54551: LD_VAR 0 1
54555: PUSH
54556: LD_INT 3
54558: PLUS
54559: PUSH
54560: LD_VAR 0 2
54564: PUSH
54565: LD_INT 4
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: LIST
54572: PUSH
54573: LD_VAR 0 1
54577: PUSH
54578: LD_VAR 0 2
54582: PUSH
54583: LD_INT 3
54585: PLUS
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: LIST
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: ST_TO_ADDR
// end ; end ;
54602: GO 54605
54604: POP
// result := list ;
54605: LD_ADDR_VAR 0 4
54609: PUSH
54610: LD_VAR 0 5
54614: ST_TO_ADDR
// end ;
54615: LD_VAR 0 4
54619: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
54620: LD_INT 0
54622: PPUSH
54623: PPUSH
54624: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
54625: LD_VAR 0 1
54629: NOT
54630: PUSH
54631: LD_VAR 0 2
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: LD_INT 2
54641: PUSH
54642: LD_INT 3
54644: PUSH
54645: LD_INT 4
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: IN
54654: NOT
54655: OR
54656: IFFALSE 54660
// exit ;
54658: GO 54752
// tmp := [ ] ;
54660: LD_ADDR_VAR 0 5
54664: PUSH
54665: EMPTY
54666: ST_TO_ADDR
// for i in units do
54667: LD_ADDR_VAR 0 4
54671: PUSH
54672: LD_VAR 0 1
54676: PUSH
54677: FOR_IN
54678: IFFALSE 54721
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
54680: LD_ADDR_VAR 0 5
54684: PUSH
54685: LD_VAR 0 5
54689: PPUSH
54690: LD_VAR 0 5
54694: PUSH
54695: LD_INT 1
54697: PLUS
54698: PPUSH
54699: LD_VAR 0 4
54703: PPUSH
54704: LD_VAR 0 2
54708: PPUSH
54709: CALL_OW 259
54713: PPUSH
54714: CALL_OW 2
54718: ST_TO_ADDR
54719: GO 54677
54721: POP
54722: POP
// if not tmp then
54723: LD_VAR 0 5
54727: NOT
54728: IFFALSE 54732
// exit ;
54730: GO 54752
// result := SortListByListDesc ( units , tmp ) ;
54732: LD_ADDR_VAR 0 3
54736: PUSH
54737: LD_VAR 0 1
54741: PPUSH
54742: LD_VAR 0 5
54746: PPUSH
54747: CALL_OW 77
54751: ST_TO_ADDR
// end ;
54752: LD_VAR 0 3
54756: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
54757: LD_INT 0
54759: PPUSH
54760: PPUSH
54761: PPUSH
// result := false ;
54762: LD_ADDR_VAR 0 3
54766: PUSH
54767: LD_INT 0
54769: ST_TO_ADDR
// x := GetX ( building ) ;
54770: LD_ADDR_VAR 0 4
54774: PUSH
54775: LD_VAR 0 2
54779: PPUSH
54780: CALL_OW 250
54784: ST_TO_ADDR
// y := GetY ( building ) ;
54785: LD_ADDR_VAR 0 5
54789: PUSH
54790: LD_VAR 0 2
54794: PPUSH
54795: CALL_OW 251
54799: ST_TO_ADDR
// if not building or not x or not y then
54800: LD_VAR 0 2
54804: NOT
54805: PUSH
54806: LD_VAR 0 4
54810: NOT
54811: OR
54812: PUSH
54813: LD_VAR 0 5
54817: NOT
54818: OR
54819: IFFALSE 54823
// exit ;
54821: GO 54915
// if GetTaskList ( unit ) then
54823: LD_VAR 0 1
54827: PPUSH
54828: CALL_OW 437
54832: IFFALSE 54915
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54834: LD_STRING e
54836: PUSH
54837: LD_VAR 0 1
54841: PPUSH
54842: CALL_OW 437
54846: PUSH
54847: LD_INT 1
54849: ARRAY
54850: PUSH
54851: LD_INT 1
54853: ARRAY
54854: EQUAL
54855: PUSH
54856: LD_VAR 0 4
54860: PUSH
54861: LD_VAR 0 1
54865: PPUSH
54866: CALL_OW 437
54870: PUSH
54871: LD_INT 1
54873: ARRAY
54874: PUSH
54875: LD_INT 2
54877: ARRAY
54878: EQUAL
54879: AND
54880: PUSH
54881: LD_VAR 0 5
54885: PUSH
54886: LD_VAR 0 1
54890: PPUSH
54891: CALL_OW 437
54895: PUSH
54896: LD_INT 1
54898: ARRAY
54899: PUSH
54900: LD_INT 3
54902: ARRAY
54903: EQUAL
54904: AND
54905: IFFALSE 54915
// result := true end ;
54907: LD_ADDR_VAR 0 3
54911: PUSH
54912: LD_INT 1
54914: ST_TO_ADDR
// end ;
54915: LD_VAR 0 3
54919: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
54920: LD_INT 0
54922: PPUSH
// result := false ;
54923: LD_ADDR_VAR 0 4
54927: PUSH
54928: LD_INT 0
54930: ST_TO_ADDR
// if GetTaskList ( unit ) then
54931: LD_VAR 0 1
54935: PPUSH
54936: CALL_OW 437
54940: IFFALSE 55023
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54942: LD_STRING M
54944: PUSH
54945: LD_VAR 0 1
54949: PPUSH
54950: CALL_OW 437
54954: PUSH
54955: LD_INT 1
54957: ARRAY
54958: PUSH
54959: LD_INT 1
54961: ARRAY
54962: EQUAL
54963: PUSH
54964: LD_VAR 0 2
54968: PUSH
54969: LD_VAR 0 1
54973: PPUSH
54974: CALL_OW 437
54978: PUSH
54979: LD_INT 1
54981: ARRAY
54982: PUSH
54983: LD_INT 2
54985: ARRAY
54986: EQUAL
54987: AND
54988: PUSH
54989: LD_VAR 0 3
54993: PUSH
54994: LD_VAR 0 1
54998: PPUSH
54999: CALL_OW 437
55003: PUSH
55004: LD_INT 1
55006: ARRAY
55007: PUSH
55008: LD_INT 3
55010: ARRAY
55011: EQUAL
55012: AND
55013: IFFALSE 55023
// result := true ;
55015: LD_ADDR_VAR 0 4
55019: PUSH
55020: LD_INT 1
55022: ST_TO_ADDR
// end ; end ;
55023: LD_VAR 0 4
55027: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
55028: LD_INT 0
55030: PPUSH
55031: PPUSH
55032: PPUSH
55033: PPUSH
// if not unit or not area then
55034: LD_VAR 0 1
55038: NOT
55039: PUSH
55040: LD_VAR 0 2
55044: NOT
55045: OR
55046: IFFALSE 55050
// exit ;
55048: GO 55214
// tmp := AreaToList ( area , i ) ;
55050: LD_ADDR_VAR 0 6
55054: PUSH
55055: LD_VAR 0 2
55059: PPUSH
55060: LD_VAR 0 5
55064: PPUSH
55065: CALL_OW 517
55069: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55070: LD_ADDR_VAR 0 5
55074: PUSH
55075: DOUBLE
55076: LD_INT 1
55078: DEC
55079: ST_TO_ADDR
55080: LD_VAR 0 6
55084: PUSH
55085: LD_INT 1
55087: ARRAY
55088: PUSH
55089: FOR_TO
55090: IFFALSE 55212
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
55092: LD_ADDR_VAR 0 7
55096: PUSH
55097: LD_VAR 0 6
55101: PUSH
55102: LD_INT 1
55104: ARRAY
55105: PUSH
55106: LD_VAR 0 5
55110: ARRAY
55111: PUSH
55112: LD_VAR 0 6
55116: PUSH
55117: LD_INT 2
55119: ARRAY
55120: PUSH
55121: LD_VAR 0 5
55125: ARRAY
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
55131: LD_VAR 0 7
55135: PUSH
55136: LD_INT 1
55138: ARRAY
55139: PPUSH
55140: LD_VAR 0 7
55144: PUSH
55145: LD_INT 2
55147: ARRAY
55148: PPUSH
55149: CALL_OW 428
55153: PUSH
55154: LD_INT 0
55156: EQUAL
55157: IFFALSE 55210
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
55159: LD_VAR 0 1
55163: PPUSH
55164: LD_VAR 0 7
55168: PUSH
55169: LD_INT 1
55171: ARRAY
55172: PPUSH
55173: LD_VAR 0 7
55177: PUSH
55178: LD_INT 2
55180: ARRAY
55181: PPUSH
55182: LD_VAR 0 3
55186: PPUSH
55187: CALL_OW 48
// result := IsPlaced ( unit ) ;
55191: LD_ADDR_VAR 0 4
55195: PUSH
55196: LD_VAR 0 1
55200: PPUSH
55201: CALL_OW 305
55205: ST_TO_ADDR
// exit ;
55206: POP
55207: POP
55208: GO 55214
// end ; end ;
55210: GO 55089
55212: POP
55213: POP
// end ;
55214: LD_VAR 0 4
55218: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
55219: LD_INT 0
55221: PPUSH
55222: PPUSH
55223: PPUSH
// if not side or side > 8 then
55224: LD_VAR 0 1
55228: NOT
55229: PUSH
55230: LD_VAR 0 1
55234: PUSH
55235: LD_INT 8
55237: GREATER
55238: OR
55239: IFFALSE 55243
// exit ;
55241: GO 55430
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
55243: LD_ADDR_VAR 0 4
55247: PUSH
55248: LD_INT 22
55250: PUSH
55251: LD_VAR 0 1
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 21
55262: PUSH
55263: LD_INT 3
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PPUSH
55274: CALL_OW 69
55278: ST_TO_ADDR
// if not tmp then
55279: LD_VAR 0 4
55283: NOT
55284: IFFALSE 55288
// exit ;
55286: GO 55430
// enable_addtolog := true ;
55288: LD_ADDR_OWVAR 81
55292: PUSH
55293: LD_INT 1
55295: ST_TO_ADDR
// AddToLog ( [ ) ;
55296: LD_STRING [
55298: PPUSH
55299: CALL_OW 561
// for i in tmp do
55303: LD_ADDR_VAR 0 3
55307: PUSH
55308: LD_VAR 0 4
55312: PUSH
55313: FOR_IN
55314: IFFALSE 55421
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
55316: LD_STRING [
55318: PUSH
55319: LD_VAR 0 3
55323: PPUSH
55324: CALL_OW 266
55328: STR
55329: PUSH
55330: LD_STRING , 
55332: STR
55333: PUSH
55334: LD_VAR 0 3
55338: PPUSH
55339: CALL_OW 250
55343: STR
55344: PUSH
55345: LD_STRING , 
55347: STR
55348: PUSH
55349: LD_VAR 0 3
55353: PPUSH
55354: CALL_OW 251
55358: STR
55359: PUSH
55360: LD_STRING , 
55362: STR
55363: PUSH
55364: LD_VAR 0 3
55368: PPUSH
55369: CALL_OW 254
55373: STR
55374: PUSH
55375: LD_STRING , 
55377: STR
55378: PUSH
55379: LD_VAR 0 3
55383: PPUSH
55384: LD_INT 1
55386: PPUSH
55387: CALL_OW 268
55391: STR
55392: PUSH
55393: LD_STRING , 
55395: STR
55396: PUSH
55397: LD_VAR 0 3
55401: PPUSH
55402: LD_INT 2
55404: PPUSH
55405: CALL_OW 268
55409: STR
55410: PUSH
55411: LD_STRING ],
55413: STR
55414: PPUSH
55415: CALL_OW 561
// end ;
55419: GO 55313
55421: POP
55422: POP
// AddToLog ( ]; ) ;
55423: LD_STRING ];
55425: PPUSH
55426: CALL_OW 561
// end ;
55430: LD_VAR 0 2
55434: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
55435: LD_INT 0
55437: PPUSH
55438: PPUSH
55439: PPUSH
55440: PPUSH
55441: PPUSH
// if not area or not rate or not max then
55442: LD_VAR 0 1
55446: NOT
55447: PUSH
55448: LD_VAR 0 2
55452: NOT
55453: OR
55454: PUSH
55455: LD_VAR 0 4
55459: NOT
55460: OR
55461: IFFALSE 55465
// exit ;
55463: GO 55657
// while 1 do
55465: LD_INT 1
55467: IFFALSE 55657
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
55469: LD_ADDR_VAR 0 9
55473: PUSH
55474: LD_VAR 0 1
55478: PPUSH
55479: LD_INT 1
55481: PPUSH
55482: CALL_OW 287
55486: PUSH
55487: LD_INT 10
55489: MUL
55490: ST_TO_ADDR
// r := rate / 10 ;
55491: LD_ADDR_VAR 0 7
55495: PUSH
55496: LD_VAR 0 2
55500: PUSH
55501: LD_INT 10
55503: DIVREAL
55504: ST_TO_ADDR
// time := 1 1$00 ;
55505: LD_ADDR_VAR 0 8
55509: PUSH
55510: LD_INT 2100
55512: ST_TO_ADDR
// if amount < min then
55513: LD_VAR 0 9
55517: PUSH
55518: LD_VAR 0 3
55522: LESS
55523: IFFALSE 55541
// r := r * 2 else
55525: LD_ADDR_VAR 0 7
55529: PUSH
55530: LD_VAR 0 7
55534: PUSH
55535: LD_INT 2
55537: MUL
55538: ST_TO_ADDR
55539: GO 55567
// if amount > max then
55541: LD_VAR 0 9
55545: PUSH
55546: LD_VAR 0 4
55550: GREATER
55551: IFFALSE 55567
// r := r / 2 ;
55553: LD_ADDR_VAR 0 7
55557: PUSH
55558: LD_VAR 0 7
55562: PUSH
55563: LD_INT 2
55565: DIVREAL
55566: ST_TO_ADDR
// time := time / r ;
55567: LD_ADDR_VAR 0 8
55571: PUSH
55572: LD_VAR 0 8
55576: PUSH
55577: LD_VAR 0 7
55581: DIVREAL
55582: ST_TO_ADDR
// if time < 0 then
55583: LD_VAR 0 8
55587: PUSH
55588: LD_INT 0
55590: LESS
55591: IFFALSE 55608
// time := time * - 1 ;
55593: LD_ADDR_VAR 0 8
55597: PUSH
55598: LD_VAR 0 8
55602: PUSH
55603: LD_INT 1
55605: NEG
55606: MUL
55607: ST_TO_ADDR
// wait ( time ) ;
55608: LD_VAR 0 8
55612: PPUSH
55613: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
55617: LD_INT 35
55619: PPUSH
55620: LD_INT 875
55622: PPUSH
55623: CALL_OW 12
55627: PPUSH
55628: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
55632: LD_INT 1
55634: PPUSH
55635: LD_INT 5
55637: PPUSH
55638: CALL_OW 12
55642: PPUSH
55643: LD_VAR 0 1
55647: PPUSH
55648: LD_INT 1
55650: PPUSH
55651: CALL_OW 55
// end ;
55655: GO 55465
// end ;
55657: LD_VAR 0 5
55661: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
55662: LD_INT 0
55664: PPUSH
55665: PPUSH
55666: PPUSH
55667: PPUSH
55668: PPUSH
55669: PPUSH
55670: PPUSH
55671: PPUSH
// if not turrets or not factories then
55672: LD_VAR 0 1
55676: NOT
55677: PUSH
55678: LD_VAR 0 2
55682: NOT
55683: OR
55684: IFFALSE 55688
// exit ;
55686: GO 55995
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
55688: LD_ADDR_VAR 0 10
55692: PUSH
55693: LD_INT 5
55695: PUSH
55696: LD_INT 6
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 2
55705: PUSH
55706: LD_INT 4
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 3
55715: PUSH
55716: LD_INT 5
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 24
55730: PUSH
55731: LD_INT 25
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 23
55740: PUSH
55741: LD_INT 27
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 42
55754: PUSH
55755: LD_INT 43
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 44
55764: PUSH
55765: LD_INT 46
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 45
55774: PUSH
55775: LD_INT 47
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: LIST
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: LIST
55791: ST_TO_ADDR
// result := [ ] ;
55792: LD_ADDR_VAR 0 3
55796: PUSH
55797: EMPTY
55798: ST_TO_ADDR
// for i in turrets do
55799: LD_ADDR_VAR 0 4
55803: PUSH
55804: LD_VAR 0 1
55808: PUSH
55809: FOR_IN
55810: IFFALSE 55993
// begin nat := GetNation ( i ) ;
55812: LD_ADDR_VAR 0 7
55816: PUSH
55817: LD_VAR 0 4
55821: PPUSH
55822: CALL_OW 248
55826: ST_TO_ADDR
// weapon := 0 ;
55827: LD_ADDR_VAR 0 8
55831: PUSH
55832: LD_INT 0
55834: ST_TO_ADDR
// if not nat then
55835: LD_VAR 0 7
55839: NOT
55840: IFFALSE 55844
// continue ;
55842: GO 55809
// for j in list [ nat ] do
55844: LD_ADDR_VAR 0 5
55848: PUSH
55849: LD_VAR 0 10
55853: PUSH
55854: LD_VAR 0 7
55858: ARRAY
55859: PUSH
55860: FOR_IN
55861: IFFALSE 55902
// if GetBWeapon ( i ) = j [ 1 ] then
55863: LD_VAR 0 4
55867: PPUSH
55868: CALL_OW 269
55872: PUSH
55873: LD_VAR 0 5
55877: PUSH
55878: LD_INT 1
55880: ARRAY
55881: EQUAL
55882: IFFALSE 55900
// begin weapon := j [ 2 ] ;
55884: LD_ADDR_VAR 0 8
55888: PUSH
55889: LD_VAR 0 5
55893: PUSH
55894: LD_INT 2
55896: ARRAY
55897: ST_TO_ADDR
// break ;
55898: GO 55902
// end ;
55900: GO 55860
55902: POP
55903: POP
// if not weapon then
55904: LD_VAR 0 8
55908: NOT
55909: IFFALSE 55913
// continue ;
55911: GO 55809
// for k in factories do
55913: LD_ADDR_VAR 0 6
55917: PUSH
55918: LD_VAR 0 2
55922: PUSH
55923: FOR_IN
55924: IFFALSE 55989
// begin weapons := AvailableWeaponList ( k ) ;
55926: LD_ADDR_VAR 0 9
55930: PUSH
55931: LD_VAR 0 6
55935: PPUSH
55936: CALL_OW 478
55940: ST_TO_ADDR
// if not weapons then
55941: LD_VAR 0 9
55945: NOT
55946: IFFALSE 55950
// continue ;
55948: GO 55923
// if weapon in weapons then
55950: LD_VAR 0 8
55954: PUSH
55955: LD_VAR 0 9
55959: IN
55960: IFFALSE 55987
// begin result := [ i , weapon ] ;
55962: LD_ADDR_VAR 0 3
55966: PUSH
55967: LD_VAR 0 4
55971: PUSH
55972: LD_VAR 0 8
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: ST_TO_ADDR
// exit ;
55981: POP
55982: POP
55983: POP
55984: POP
55985: GO 55995
// end ; end ;
55987: GO 55923
55989: POP
55990: POP
// end ;
55991: GO 55809
55993: POP
55994: POP
// end ;
55995: LD_VAR 0 3
55999: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
56000: LD_INT 0
56002: PPUSH
// if not side or side > 8 then
56003: LD_VAR 0 3
56007: NOT
56008: PUSH
56009: LD_VAR 0 3
56013: PUSH
56014: LD_INT 8
56016: GREATER
56017: OR
56018: IFFALSE 56022
// exit ;
56020: GO 56081
// if not range then
56022: LD_VAR 0 4
56026: NOT
56027: IFFALSE 56038
// range := - 12 ;
56029: LD_ADDR_VAR 0 4
56033: PUSH
56034: LD_INT 12
56036: NEG
56037: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
56038: LD_VAR 0 1
56042: PPUSH
56043: LD_VAR 0 2
56047: PPUSH
56048: LD_VAR 0 3
56052: PPUSH
56053: LD_VAR 0 4
56057: PPUSH
56058: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56062: LD_VAR 0 1
56066: PPUSH
56067: LD_VAR 0 2
56071: PPUSH
56072: LD_VAR 0 3
56076: PPUSH
56077: CALL_OW 331
// end ;
56081: LD_VAR 0 5
56085: RET
// export function Video ( mode ) ; begin
56086: LD_INT 0
56088: PPUSH
// ingame_video = mode ;
56089: LD_ADDR_OWVAR 52
56093: PUSH
56094: LD_VAR 0 1
56098: ST_TO_ADDR
// interface_hidden = mode ;
56099: LD_ADDR_OWVAR 54
56103: PUSH
56104: LD_VAR 0 1
56108: ST_TO_ADDR
// end ;
56109: LD_VAR 0 2
56113: RET
// export function Join ( array , element ) ; begin
56114: LD_INT 0
56116: PPUSH
// result := Replace ( array , array + 1 , element ) ;
56117: LD_ADDR_VAR 0 3
56121: PUSH
56122: LD_VAR 0 1
56126: PPUSH
56127: LD_VAR 0 1
56131: PUSH
56132: LD_INT 1
56134: PLUS
56135: PPUSH
56136: LD_VAR 0 2
56140: PPUSH
56141: CALL_OW 1
56145: ST_TO_ADDR
// end ;
56146: LD_VAR 0 3
56150: RET
// export function JoinUnion ( array , element ) ; begin
56151: LD_INT 0
56153: PPUSH
// result := array union element ;
56154: LD_ADDR_VAR 0 3
56158: PUSH
56159: LD_VAR 0 1
56163: PUSH
56164: LD_VAR 0 2
56168: UNION
56169: ST_TO_ADDR
// end ;
56170: LD_VAR 0 3
56174: RET
// export function GetBehemoths ( side ) ; begin
56175: LD_INT 0
56177: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
56178: LD_ADDR_VAR 0 2
56182: PUSH
56183: LD_INT 22
56185: PUSH
56186: LD_VAR 0 1
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 31
56197: PUSH
56198: LD_INT 25
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PPUSH
56209: CALL_OW 69
56213: ST_TO_ADDR
// end ;
56214: LD_VAR 0 2
56218: RET
// export function Shuffle ( array ) ; var i , index ; begin
56219: LD_INT 0
56221: PPUSH
56222: PPUSH
56223: PPUSH
// result := [ ] ;
56224: LD_ADDR_VAR 0 2
56228: PUSH
56229: EMPTY
56230: ST_TO_ADDR
// if not array then
56231: LD_VAR 0 1
56235: NOT
56236: IFFALSE 56240
// exit ;
56238: GO 56339
// Randomize ;
56240: CALL_OW 10
// for i = array downto 1 do
56244: LD_ADDR_VAR 0 3
56248: PUSH
56249: DOUBLE
56250: LD_VAR 0 1
56254: INC
56255: ST_TO_ADDR
56256: LD_INT 1
56258: PUSH
56259: FOR_DOWNTO
56260: IFFALSE 56337
// begin index := rand ( 1 , array ) ;
56262: LD_ADDR_VAR 0 4
56266: PUSH
56267: LD_INT 1
56269: PPUSH
56270: LD_VAR 0 1
56274: PPUSH
56275: CALL_OW 12
56279: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
56280: LD_ADDR_VAR 0 2
56284: PUSH
56285: LD_VAR 0 2
56289: PPUSH
56290: LD_VAR 0 2
56294: PUSH
56295: LD_INT 1
56297: PLUS
56298: PPUSH
56299: LD_VAR 0 1
56303: PUSH
56304: LD_VAR 0 4
56308: ARRAY
56309: PPUSH
56310: CALL_OW 2
56314: ST_TO_ADDR
// array := Delete ( array , index ) ;
56315: LD_ADDR_VAR 0 1
56319: PUSH
56320: LD_VAR 0 1
56324: PPUSH
56325: LD_VAR 0 4
56329: PPUSH
56330: CALL_OW 3
56334: ST_TO_ADDR
// end ;
56335: GO 56259
56337: POP
56338: POP
// end ;
56339: LD_VAR 0 2
56343: RET
// export function GetBaseMaterials ( base ) ; begin
56344: LD_INT 0
56346: PPUSH
// result := [ 0 , 0 , 0 ] ;
56347: LD_ADDR_VAR 0 2
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: LD_INT 0
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: LIST
56365: ST_TO_ADDR
// if not base then
56366: LD_VAR 0 1
56370: NOT
56371: IFFALSE 56375
// exit ;
56373: GO 56424
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
56375: LD_ADDR_VAR 0 2
56379: PUSH
56380: LD_VAR 0 1
56384: PPUSH
56385: LD_INT 1
56387: PPUSH
56388: CALL_OW 275
56392: PUSH
56393: LD_VAR 0 1
56397: PPUSH
56398: LD_INT 2
56400: PPUSH
56401: CALL_OW 275
56405: PUSH
56406: LD_VAR 0 1
56410: PPUSH
56411: LD_INT 3
56413: PPUSH
56414: CALL_OW 275
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: LIST
56423: ST_TO_ADDR
// end ;
56424: LD_VAR 0 2
56428: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
56429: LD_INT 0
56431: PPUSH
56432: PPUSH
// result := array ;
56433: LD_ADDR_VAR 0 3
56437: PUSH
56438: LD_VAR 0 1
56442: ST_TO_ADDR
// if size > 0 then
56443: LD_VAR 0 2
56447: PUSH
56448: LD_INT 0
56450: GREATER
56451: IFFALSE 56497
// for i := array downto size do
56453: LD_ADDR_VAR 0 4
56457: PUSH
56458: DOUBLE
56459: LD_VAR 0 1
56463: INC
56464: ST_TO_ADDR
56465: LD_VAR 0 2
56469: PUSH
56470: FOR_DOWNTO
56471: IFFALSE 56495
// result := Delete ( result , result ) ;
56473: LD_ADDR_VAR 0 3
56477: PUSH
56478: LD_VAR 0 3
56482: PPUSH
56483: LD_VAR 0 3
56487: PPUSH
56488: CALL_OW 3
56492: ST_TO_ADDR
56493: GO 56470
56495: POP
56496: POP
// end ;
56497: LD_VAR 0 3
56501: RET
// export function ComExit ( unit ) ; var tmp ; begin
56502: LD_INT 0
56504: PPUSH
56505: PPUSH
// if not IsInUnit ( unit ) then
56506: LD_VAR 0 1
56510: PPUSH
56511: CALL_OW 310
56515: NOT
56516: IFFALSE 56520
// exit ;
56518: GO 56580
// tmp := IsInUnit ( unit ) ;
56520: LD_ADDR_VAR 0 3
56524: PUSH
56525: LD_VAR 0 1
56529: PPUSH
56530: CALL_OW 310
56534: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
56535: LD_VAR 0 3
56539: PPUSH
56540: CALL_OW 247
56544: PUSH
56545: LD_INT 2
56547: EQUAL
56548: IFFALSE 56561
// ComExitVehicle ( unit ) else
56550: LD_VAR 0 1
56554: PPUSH
56555: CALL_OW 121
56559: GO 56570
// ComExitBuilding ( unit ) ;
56561: LD_VAR 0 1
56565: PPUSH
56566: CALL_OW 122
// result := tmp ;
56570: LD_ADDR_VAR 0 2
56574: PUSH
56575: LD_VAR 0 3
56579: ST_TO_ADDR
// end ;
56580: LD_VAR 0 2
56584: RET
// export function ComExitAll ( units ) ; var i ; begin
56585: LD_INT 0
56587: PPUSH
56588: PPUSH
// if not units then
56589: LD_VAR 0 1
56593: NOT
56594: IFFALSE 56598
// exit ;
56596: GO 56624
// for i in units do
56598: LD_ADDR_VAR 0 3
56602: PUSH
56603: LD_VAR 0 1
56607: PUSH
56608: FOR_IN
56609: IFFALSE 56622
// ComExit ( i ) ;
56611: LD_VAR 0 3
56615: PPUSH
56616: CALL 56502 0 1
56620: GO 56608
56622: POP
56623: POP
// end ;
56624: LD_VAR 0 2
56628: RET
// export function ResetHc ; begin
56629: LD_INT 0
56631: PPUSH
// InitHc ;
56632: CALL_OW 19
// hc_importance := 0 ;
56636: LD_ADDR_OWVAR 32
56640: PUSH
56641: LD_INT 0
56643: ST_TO_ADDR
// end ;
56644: LD_VAR 0 1
56648: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
56649: LD_INT 0
56651: PPUSH
56652: PPUSH
56653: PPUSH
// _x := ( x1 + x2 ) div 2 ;
56654: LD_ADDR_VAR 0 6
56658: PUSH
56659: LD_VAR 0 1
56663: PUSH
56664: LD_VAR 0 3
56668: PLUS
56669: PUSH
56670: LD_INT 2
56672: DIV
56673: ST_TO_ADDR
// if _x < 0 then
56674: LD_VAR 0 6
56678: PUSH
56679: LD_INT 0
56681: LESS
56682: IFFALSE 56699
// _x := _x * - 1 ;
56684: LD_ADDR_VAR 0 6
56688: PUSH
56689: LD_VAR 0 6
56693: PUSH
56694: LD_INT 1
56696: NEG
56697: MUL
56698: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
56699: LD_ADDR_VAR 0 7
56703: PUSH
56704: LD_VAR 0 2
56708: PUSH
56709: LD_VAR 0 4
56713: PLUS
56714: PUSH
56715: LD_INT 2
56717: DIV
56718: ST_TO_ADDR
// if _y < 0 then
56719: LD_VAR 0 7
56723: PUSH
56724: LD_INT 0
56726: LESS
56727: IFFALSE 56744
// _y := _y * - 1 ;
56729: LD_ADDR_VAR 0 7
56733: PUSH
56734: LD_VAR 0 7
56738: PUSH
56739: LD_INT 1
56741: NEG
56742: MUL
56743: ST_TO_ADDR
// result := [ _x , _y ] ;
56744: LD_ADDR_VAR 0 5
56748: PUSH
56749: LD_VAR 0 6
56753: PUSH
56754: LD_VAR 0 7
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: ST_TO_ADDR
// end ;
56763: LD_VAR 0 5
56767: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
56768: LD_INT 0
56770: PPUSH
56771: PPUSH
56772: PPUSH
56773: PPUSH
// task := GetTaskList ( unit ) ;
56774: LD_ADDR_VAR 0 7
56778: PUSH
56779: LD_VAR 0 1
56783: PPUSH
56784: CALL_OW 437
56788: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
56789: LD_VAR 0 7
56793: NOT
56794: PUSH
56795: LD_VAR 0 1
56799: PPUSH
56800: LD_VAR 0 2
56804: PPUSH
56805: CALL_OW 308
56809: NOT
56810: AND
56811: IFFALSE 56815
// exit ;
56813: GO 56933
// if IsInArea ( unit , area ) then
56815: LD_VAR 0 1
56819: PPUSH
56820: LD_VAR 0 2
56824: PPUSH
56825: CALL_OW 308
56829: IFFALSE 56847
// begin ComMoveToArea ( unit , goAway ) ;
56831: LD_VAR 0 1
56835: PPUSH
56836: LD_VAR 0 3
56840: PPUSH
56841: CALL_OW 113
// exit ;
56845: GO 56933
// end ; if task [ 1 ] [ 1 ] <> M then
56847: LD_VAR 0 7
56851: PUSH
56852: LD_INT 1
56854: ARRAY
56855: PUSH
56856: LD_INT 1
56858: ARRAY
56859: PUSH
56860: LD_STRING M
56862: NONEQUAL
56863: IFFALSE 56867
// exit ;
56865: GO 56933
// x := task [ 1 ] [ 2 ] ;
56867: LD_ADDR_VAR 0 5
56871: PUSH
56872: LD_VAR 0 7
56876: PUSH
56877: LD_INT 1
56879: ARRAY
56880: PUSH
56881: LD_INT 2
56883: ARRAY
56884: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
56885: LD_ADDR_VAR 0 6
56889: PUSH
56890: LD_VAR 0 7
56894: PUSH
56895: LD_INT 1
56897: ARRAY
56898: PUSH
56899: LD_INT 3
56901: ARRAY
56902: ST_TO_ADDR
// if InArea ( x , y , area ) then
56903: LD_VAR 0 5
56907: PPUSH
56908: LD_VAR 0 6
56912: PPUSH
56913: LD_VAR 0 2
56917: PPUSH
56918: CALL_OW 309
56922: IFFALSE 56933
// ComStop ( unit ) ;
56924: LD_VAR 0 1
56928: PPUSH
56929: CALL_OW 141
// end ;
56933: LD_VAR 0 4
56937: RET
// export function Abs ( value ) ; begin
56938: LD_INT 0
56940: PPUSH
// result := value ;
56941: LD_ADDR_VAR 0 2
56945: PUSH
56946: LD_VAR 0 1
56950: ST_TO_ADDR
// if value < 0 then
56951: LD_VAR 0 1
56955: PUSH
56956: LD_INT 0
56958: LESS
56959: IFFALSE 56976
// result := value * - 1 ;
56961: LD_ADDR_VAR 0 2
56965: PUSH
56966: LD_VAR 0 1
56970: PUSH
56971: LD_INT 1
56973: NEG
56974: MUL
56975: ST_TO_ADDR
// end ;
56976: LD_VAR 0 2
56980: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
56981: LD_INT 0
56983: PPUSH
56984: PPUSH
56985: PPUSH
56986: PPUSH
56987: PPUSH
56988: PPUSH
56989: PPUSH
56990: PPUSH
// if not unit or not building then
56991: LD_VAR 0 1
56995: NOT
56996: PUSH
56997: LD_VAR 0 2
57001: NOT
57002: OR
57003: IFFALSE 57007
// exit ;
57005: GO 57233
// x := GetX ( building ) ;
57007: LD_ADDR_VAR 0 4
57011: PUSH
57012: LD_VAR 0 2
57016: PPUSH
57017: CALL_OW 250
57021: ST_TO_ADDR
// y := GetY ( building ) ;
57022: LD_ADDR_VAR 0 6
57026: PUSH
57027: LD_VAR 0 2
57031: PPUSH
57032: CALL_OW 251
57036: ST_TO_ADDR
// d := GetDir ( building ) ;
57037: LD_ADDR_VAR 0 8
57041: PUSH
57042: LD_VAR 0 2
57046: PPUSH
57047: CALL_OW 254
57051: ST_TO_ADDR
// r := 4 ;
57052: LD_ADDR_VAR 0 9
57056: PUSH
57057: LD_INT 4
57059: ST_TO_ADDR
// for i := 1 to 5 do
57060: LD_ADDR_VAR 0 10
57064: PUSH
57065: DOUBLE
57066: LD_INT 1
57068: DEC
57069: ST_TO_ADDR
57070: LD_INT 5
57072: PUSH
57073: FOR_TO
57074: IFFALSE 57231
// begin _x := ShiftX ( x , d , r + i ) ;
57076: LD_ADDR_VAR 0 5
57080: PUSH
57081: LD_VAR 0 4
57085: PPUSH
57086: LD_VAR 0 8
57090: PPUSH
57091: LD_VAR 0 9
57095: PUSH
57096: LD_VAR 0 10
57100: PLUS
57101: PPUSH
57102: CALL_OW 272
57106: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
57107: LD_ADDR_VAR 0 7
57111: PUSH
57112: LD_VAR 0 6
57116: PPUSH
57117: LD_VAR 0 8
57121: PPUSH
57122: LD_VAR 0 9
57126: PUSH
57127: LD_VAR 0 10
57131: PLUS
57132: PPUSH
57133: CALL_OW 273
57137: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
57138: LD_VAR 0 5
57142: PPUSH
57143: LD_VAR 0 7
57147: PPUSH
57148: CALL_OW 488
57152: PUSH
57153: LD_VAR 0 5
57157: PPUSH
57158: LD_VAR 0 7
57162: PPUSH
57163: CALL_OW 428
57167: PPUSH
57168: CALL_OW 247
57172: PUSH
57173: LD_INT 3
57175: PUSH
57176: LD_INT 2
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: IN
57183: NOT
57184: AND
57185: IFFALSE 57229
// begin ComMoveXY ( unit , _x , _y ) ;
57187: LD_VAR 0 1
57191: PPUSH
57192: LD_VAR 0 5
57196: PPUSH
57197: LD_VAR 0 7
57201: PPUSH
57202: CALL_OW 111
// result := [ _x , _y ] ;
57206: LD_ADDR_VAR 0 3
57210: PUSH
57211: LD_VAR 0 5
57215: PUSH
57216: LD_VAR 0 7
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: ST_TO_ADDR
// exit ;
57225: POP
57226: POP
57227: GO 57233
// end ; end ;
57229: GO 57073
57231: POP
57232: POP
// end ;
57233: LD_VAR 0 3
57237: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
57238: LD_INT 0
57240: PPUSH
57241: PPUSH
57242: PPUSH
// result := 0 ;
57243: LD_ADDR_VAR 0 3
57247: PUSH
57248: LD_INT 0
57250: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
57251: LD_VAR 0 1
57255: PUSH
57256: LD_INT 0
57258: LESS
57259: PUSH
57260: LD_VAR 0 1
57264: PUSH
57265: LD_INT 8
57267: GREATER
57268: OR
57269: PUSH
57270: LD_VAR 0 2
57274: PUSH
57275: LD_INT 0
57277: LESS
57278: OR
57279: PUSH
57280: LD_VAR 0 2
57284: PUSH
57285: LD_INT 8
57287: GREATER
57288: OR
57289: IFFALSE 57293
// exit ;
57291: GO 57368
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
57293: LD_ADDR_VAR 0 4
57297: PUSH
57298: LD_INT 22
57300: PUSH
57301: LD_VAR 0 2
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PPUSH
57310: CALL_OW 69
57314: PUSH
57315: FOR_IN
57316: IFFALSE 57366
// begin un := UnitShoot ( i ) ;
57318: LD_ADDR_VAR 0 5
57322: PUSH
57323: LD_VAR 0 4
57327: PPUSH
57328: CALL_OW 504
57332: ST_TO_ADDR
// if GetSide ( un ) = side1 then
57333: LD_VAR 0 5
57337: PPUSH
57338: CALL_OW 255
57342: PUSH
57343: LD_VAR 0 1
57347: EQUAL
57348: IFFALSE 57364
// begin result := un ;
57350: LD_ADDR_VAR 0 3
57354: PUSH
57355: LD_VAR 0 5
57359: ST_TO_ADDR
// exit ;
57360: POP
57361: POP
57362: GO 57368
// end ; end ;
57364: GO 57315
57366: POP
57367: POP
// end ;
57368: LD_VAR 0 3
57372: RET
// export function GetCargoBay ( units ) ; begin
57373: LD_INT 0
57375: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
57376: LD_ADDR_VAR 0 2
57380: PUSH
57381: LD_VAR 0 1
57385: PPUSH
57386: LD_INT 2
57388: PUSH
57389: LD_INT 34
57391: PUSH
57392: LD_INT 12
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 34
57401: PUSH
57402: LD_INT 51
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 34
57411: PUSH
57412: LD_INT 32
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 34
57421: PUSH
57422: LD_EXP 30
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: PPUSH
57438: CALL_OW 72
57442: ST_TO_ADDR
// end ;
57443: LD_VAR 0 2
57447: RET
// export function Negate ( value ) ; begin
57448: LD_INT 0
57450: PPUSH
// result := not value ;
57451: LD_ADDR_VAR 0 2
57455: PUSH
57456: LD_VAR 0 1
57460: NOT
57461: ST_TO_ADDR
// end ;
57462: LD_VAR 0 2
57466: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
57467: LD_INT 0
57469: PPUSH
// if x1 = x2 then
57470: LD_VAR 0 1
57474: PUSH
57475: LD_VAR 0 3
57479: EQUAL
57480: IFFALSE 57514
// begin if y1 > y2 then
57482: LD_VAR 0 2
57486: PUSH
57487: LD_VAR 0 4
57491: GREATER
57492: IFFALSE 57504
// result := 0 else
57494: LD_ADDR_VAR 0 5
57498: PUSH
57499: LD_INT 0
57501: ST_TO_ADDR
57502: GO 57512
// result := 3 ;
57504: LD_ADDR_VAR 0 5
57508: PUSH
57509: LD_INT 3
57511: ST_TO_ADDR
// exit ;
57512: GO 57600
// end ; if y1 = y2 then
57514: LD_VAR 0 2
57518: PUSH
57519: LD_VAR 0 4
57523: EQUAL
57524: IFFALSE 57558
// begin if x1 > x2 then
57526: LD_VAR 0 1
57530: PUSH
57531: LD_VAR 0 3
57535: GREATER
57536: IFFALSE 57548
// result := 1 else
57538: LD_ADDR_VAR 0 5
57542: PUSH
57543: LD_INT 1
57545: ST_TO_ADDR
57546: GO 57556
// result := 4 ;
57548: LD_ADDR_VAR 0 5
57552: PUSH
57553: LD_INT 4
57555: ST_TO_ADDR
// exit ;
57556: GO 57600
// end ; if x1 > x2 and y1 > y2 then
57558: LD_VAR 0 1
57562: PUSH
57563: LD_VAR 0 3
57567: GREATER
57568: PUSH
57569: LD_VAR 0 2
57573: PUSH
57574: LD_VAR 0 4
57578: GREATER
57579: AND
57580: IFFALSE 57592
// result := 2 else
57582: LD_ADDR_VAR 0 5
57586: PUSH
57587: LD_INT 2
57589: ST_TO_ADDR
57590: GO 57600
// result := 5 ;
57592: LD_ADDR_VAR 0 5
57596: PUSH
57597: LD_INT 5
57599: ST_TO_ADDR
// end ;
57600: LD_VAR 0 5
57604: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57605: LD_INT 0
57607: PPUSH
57608: PPUSH
// if not driver or not IsInUnit ( driver ) then
57609: LD_VAR 0 1
57613: NOT
57614: PUSH
57615: LD_VAR 0 1
57619: PPUSH
57620: CALL_OW 310
57624: NOT
57625: OR
57626: IFFALSE 57630
// exit ;
57628: GO 57720
// vehicle := IsInUnit ( driver ) ;
57630: LD_ADDR_VAR 0 3
57634: PUSH
57635: LD_VAR 0 1
57639: PPUSH
57640: CALL_OW 310
57644: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57645: LD_VAR 0 1
57649: PPUSH
57650: LD_STRING \
57652: PUSH
57653: LD_INT 0
57655: PUSH
57656: LD_INT 0
57658: PUSH
57659: LD_INT 0
57661: PUSH
57662: LD_INT 0
57664: PUSH
57665: LD_INT 0
57667: PUSH
57668: LD_INT 0
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: PUSH
57680: LD_STRING E
57682: PUSH
57683: LD_INT 0
57685: PUSH
57686: LD_INT 0
57688: PUSH
57689: LD_VAR 0 3
57693: PUSH
57694: LD_INT 0
57696: PUSH
57697: LD_INT 0
57699: PUSH
57700: LD_INT 0
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PPUSH
57716: CALL_OW 446
// end ;
57720: LD_VAR 0 2
57724: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
57725: LD_INT 0
57727: PPUSH
57728: PPUSH
57729: PPUSH
// tmp := [ ] ;
57730: LD_ADDR_VAR 0 5
57734: PUSH
57735: EMPTY
57736: ST_TO_ADDR
// for i in units do
57737: LD_ADDR_VAR 0 4
57741: PUSH
57742: LD_VAR 0 1
57746: PUSH
57747: FOR_IN
57748: IFFALSE 57786
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
57750: LD_ADDR_VAR 0 5
57754: PUSH
57755: LD_VAR 0 5
57759: PPUSH
57760: LD_VAR 0 5
57764: PUSH
57765: LD_INT 1
57767: PLUS
57768: PPUSH
57769: LD_VAR 0 4
57773: PPUSH
57774: CALL_OW 256
57778: PPUSH
57779: CALL_OW 2
57783: ST_TO_ADDR
57784: GO 57747
57786: POP
57787: POP
// if not tmp then
57788: LD_VAR 0 5
57792: NOT
57793: IFFALSE 57797
// exit ;
57795: GO 57845
// if asc then
57797: LD_VAR 0 2
57801: IFFALSE 57825
// result := SortListByListAsc ( units , tmp ) else
57803: LD_ADDR_VAR 0 3
57807: PUSH
57808: LD_VAR 0 1
57812: PPUSH
57813: LD_VAR 0 5
57817: PPUSH
57818: CALL_OW 76
57822: ST_TO_ADDR
57823: GO 57845
// result := SortListByListDesc ( units , tmp ) ;
57825: LD_ADDR_VAR 0 3
57829: PUSH
57830: LD_VAR 0 1
57834: PPUSH
57835: LD_VAR 0 5
57839: PPUSH
57840: CALL_OW 77
57844: ST_TO_ADDR
// end ; end_of_file
57845: LD_VAR 0 3
57849: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
57850: LD_INT 0
57852: PPUSH
// ar_miner := 81 ;
57853: LD_ADDR_EXP 36
57857: PUSH
57858: LD_INT 81
57860: ST_TO_ADDR
// ar_crane := 88 ;
57861: LD_ADDR_EXP 35
57865: PUSH
57866: LD_INT 88
57868: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
57869: LD_ADDR_EXP 30
57873: PUSH
57874: LD_INT 89
57876: ST_TO_ADDR
// us_hack := 99 ;
57877: LD_ADDR_EXP 31
57881: PUSH
57882: LD_INT 99
57884: ST_TO_ADDR
// us_artillery := 97 ;
57885: LD_ADDR_EXP 32
57889: PUSH
57890: LD_INT 97
57892: ST_TO_ADDR
// ar_bio_bomb := 91 ;
57893: LD_ADDR_EXP 33
57897: PUSH
57898: LD_INT 91
57900: ST_TO_ADDR
// ar_mortar := 92 ;
57901: LD_ADDR_EXP 34
57905: PUSH
57906: LD_INT 92
57908: ST_TO_ADDR
// ru_radar := 98 ;
57909: LD_ADDR_EXP 29
57913: PUSH
57914: LD_INT 98
57916: ST_TO_ADDR
// tech_Artillery := 80 ;
57917: LD_ADDR_EXP 37
57921: PUSH
57922: LD_INT 80
57924: ST_TO_ADDR
// tech_RadMat := 81 ;
57925: LD_ADDR_EXP 38
57929: PUSH
57930: LD_INT 81
57932: ST_TO_ADDR
// tech_BasicTools := 82 ;
57933: LD_ADDR_EXP 39
57937: PUSH
57938: LD_INT 82
57940: ST_TO_ADDR
// tech_Cargo := 83 ;
57941: LD_ADDR_EXP 40
57945: PUSH
57946: LD_INT 83
57948: ST_TO_ADDR
// tech_Track := 84 ;
57949: LD_ADDR_EXP 41
57953: PUSH
57954: LD_INT 84
57956: ST_TO_ADDR
// tech_Crane := 85 ;
57957: LD_ADDR_EXP 42
57961: PUSH
57962: LD_INT 85
57964: ST_TO_ADDR
// tech_Bulldozer := 86 ;
57965: LD_ADDR_EXP 43
57969: PUSH
57970: LD_INT 86
57972: ST_TO_ADDR
// tech_Hovercraft := 87 ;
57973: LD_ADDR_EXP 44
57977: PUSH
57978: LD_INT 87
57980: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
57981: LD_ADDR_EXP 45
57985: PUSH
57986: LD_INT 88
57988: ST_TO_ADDR
// class_mastodont := 31 ;
57989: LD_ADDR_EXP 46
57993: PUSH
57994: LD_INT 31
57996: ST_TO_ADDR
// class_horse := 21 ;
57997: LD_ADDR_EXP 47
58001: PUSH
58002: LD_INT 21
58004: ST_TO_ADDR
// end ;
58005: LD_VAR 0 1
58009: RET
// every 1 do
58010: GO 58012
58012: DISABLE
// InitGlobalVariables ; end_of_file
58013: CALL 57850 0 0
58017: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use , mc_is_defending ; export function InitMacro ; var i ; begin
58018: LD_INT 0
58020: PPUSH
58021: PPUSH
// skirmish := false ;
58022: LD_ADDR_EXP 48
58026: PUSH
58027: LD_INT 0
58029: ST_TO_ADDR
// debug_mc := false ;
58030: LD_ADDR_EXP 49
58034: PUSH
58035: LD_INT 0
58037: ST_TO_ADDR
// mc_bases := [ ] ;
58038: LD_ADDR_EXP 50
58042: PUSH
58043: EMPTY
58044: ST_TO_ADDR
// mc_sides := [ ] ;
58045: LD_ADDR_EXP 76
58049: PUSH
58050: EMPTY
58051: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
58052: LD_ADDR_EXP 51
58056: PUSH
58057: EMPTY
58058: ST_TO_ADDR
// mc_building_repairs := [ ] ;
58059: LD_ADDR_EXP 52
58063: PUSH
58064: EMPTY
58065: ST_TO_ADDR
// mc_need_heal := [ ] ;
58066: LD_ADDR_EXP 53
58070: PUSH
58071: EMPTY
58072: ST_TO_ADDR
// mc_healers := [ ] ;
58073: LD_ADDR_EXP 54
58077: PUSH
58078: EMPTY
58079: ST_TO_ADDR
// mc_build_list := [ ] ;
58080: LD_ADDR_EXP 55
58084: PUSH
58085: EMPTY
58086: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
58087: LD_ADDR_EXP 82
58091: PUSH
58092: EMPTY
58093: ST_TO_ADDR
// mc_builders := [ ] ;
58094: LD_ADDR_EXP 56
58098: PUSH
58099: EMPTY
58100: ST_TO_ADDR
// mc_construct_list := [ ] ;
58101: LD_ADDR_EXP 57
58105: PUSH
58106: EMPTY
58107: ST_TO_ADDR
// mc_turret_list := [ ] ;
58108: LD_ADDR_EXP 58
58112: PUSH
58113: EMPTY
58114: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
58115: LD_ADDR_EXP 59
58119: PUSH
58120: EMPTY
58121: ST_TO_ADDR
// mc_miners := [ ] ;
58122: LD_ADDR_EXP 64
58126: PUSH
58127: EMPTY
58128: ST_TO_ADDR
// mc_mines := [ ] ;
58129: LD_ADDR_EXP 63
58133: PUSH
58134: EMPTY
58135: ST_TO_ADDR
// mc_minefields := [ ] ;
58136: LD_ADDR_EXP 65
58140: PUSH
58141: EMPTY
58142: ST_TO_ADDR
// mc_crates := [ ] ;
58143: LD_ADDR_EXP 66
58147: PUSH
58148: EMPTY
58149: ST_TO_ADDR
// mc_crates_collector := [ ] ;
58150: LD_ADDR_EXP 67
58154: PUSH
58155: EMPTY
58156: ST_TO_ADDR
// mc_crates_area := [ ] ;
58157: LD_ADDR_EXP 68
58161: PUSH
58162: EMPTY
58163: ST_TO_ADDR
// mc_vehicles := [ ] ;
58164: LD_ADDR_EXP 69
58168: PUSH
58169: EMPTY
58170: ST_TO_ADDR
// mc_attack := [ ] ;
58171: LD_ADDR_EXP 70
58175: PUSH
58176: EMPTY
58177: ST_TO_ADDR
// mc_produce := [ ] ;
58178: LD_ADDR_EXP 71
58182: PUSH
58183: EMPTY
58184: ST_TO_ADDR
// mc_defender := [ ] ;
58185: LD_ADDR_EXP 72
58189: PUSH
58190: EMPTY
58191: ST_TO_ADDR
// mc_parking := [ ] ;
58192: LD_ADDR_EXP 74
58196: PUSH
58197: EMPTY
58198: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
58199: LD_ADDR_EXP 60
58203: PUSH
58204: EMPTY
58205: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
58206: LD_ADDR_EXP 62
58210: PUSH
58211: EMPTY
58212: ST_TO_ADDR
// mc_scan := [ ] ;
58213: LD_ADDR_EXP 73
58217: PUSH
58218: EMPTY
58219: ST_TO_ADDR
// mc_scan_area := [ ] ;
58220: LD_ADDR_EXP 75
58224: PUSH
58225: EMPTY
58226: ST_TO_ADDR
// mc_tech := [ ] ;
58227: LD_ADDR_EXP 77
58231: PUSH
58232: EMPTY
58233: ST_TO_ADDR
// mc_class := [ ] ;
58234: LD_ADDR_EXP 91
58238: PUSH
58239: EMPTY
58240: ST_TO_ADDR
// mc_class_case_use := [ ] ;
58241: LD_ADDR_EXP 92
58245: PUSH
58246: EMPTY
58247: ST_TO_ADDR
// mc_is_defending := [ ] ;
58248: LD_ADDR_EXP 93
58252: PUSH
58253: EMPTY
58254: ST_TO_ADDR
// end ;
58255: LD_VAR 0 1
58259: RET
// export function MC_Kill ( base ) ; begin
58260: LD_INT 0
58262: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
58263: LD_ADDR_EXP 50
58267: PUSH
58268: LD_EXP 50
58272: PPUSH
58273: LD_VAR 0 1
58277: PPUSH
58278: EMPTY
58279: PPUSH
58280: CALL_OW 1
58284: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
58285: LD_ADDR_EXP 51
58289: PUSH
58290: LD_EXP 51
58294: PPUSH
58295: LD_VAR 0 1
58299: PPUSH
58300: EMPTY
58301: PPUSH
58302: CALL_OW 1
58306: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
58307: LD_ADDR_EXP 52
58311: PUSH
58312: LD_EXP 52
58316: PPUSH
58317: LD_VAR 0 1
58321: PPUSH
58322: EMPTY
58323: PPUSH
58324: CALL_OW 1
58328: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
58329: LD_ADDR_EXP 53
58333: PUSH
58334: LD_EXP 53
58338: PPUSH
58339: LD_VAR 0 1
58343: PPUSH
58344: EMPTY
58345: PPUSH
58346: CALL_OW 1
58350: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
58351: LD_ADDR_EXP 54
58355: PUSH
58356: LD_EXP 54
58360: PPUSH
58361: LD_VAR 0 1
58365: PPUSH
58366: EMPTY
58367: PPUSH
58368: CALL_OW 1
58372: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
58373: LD_ADDR_EXP 55
58377: PUSH
58378: LD_EXP 55
58382: PPUSH
58383: LD_VAR 0 1
58387: PPUSH
58388: EMPTY
58389: PPUSH
58390: CALL_OW 1
58394: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
58395: LD_ADDR_EXP 56
58399: PUSH
58400: LD_EXP 56
58404: PPUSH
58405: LD_VAR 0 1
58409: PPUSH
58410: EMPTY
58411: PPUSH
58412: CALL_OW 1
58416: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
58417: LD_ADDR_EXP 57
58421: PUSH
58422: LD_EXP 57
58426: PPUSH
58427: LD_VAR 0 1
58431: PPUSH
58432: EMPTY
58433: PPUSH
58434: CALL_OW 1
58438: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
58439: LD_ADDR_EXP 58
58443: PUSH
58444: LD_EXP 58
58448: PPUSH
58449: LD_VAR 0 1
58453: PPUSH
58454: EMPTY
58455: PPUSH
58456: CALL_OW 1
58460: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
58461: LD_ADDR_EXP 59
58465: PUSH
58466: LD_EXP 59
58470: PPUSH
58471: LD_VAR 0 1
58475: PPUSH
58476: EMPTY
58477: PPUSH
58478: CALL_OW 1
58482: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
58483: LD_ADDR_EXP 60
58487: PUSH
58488: LD_EXP 60
58492: PPUSH
58493: LD_VAR 0 1
58497: PPUSH
58498: EMPTY
58499: PPUSH
58500: CALL_OW 1
58504: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
58505: LD_ADDR_EXP 61
58509: PUSH
58510: LD_EXP 61
58514: PPUSH
58515: LD_VAR 0 1
58519: PPUSH
58520: LD_INT 0
58522: PPUSH
58523: CALL_OW 1
58527: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
58528: LD_ADDR_EXP 62
58532: PUSH
58533: LD_EXP 62
58537: PPUSH
58538: LD_VAR 0 1
58542: PPUSH
58543: EMPTY
58544: PPUSH
58545: CALL_OW 1
58549: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
58550: LD_ADDR_EXP 63
58554: PUSH
58555: LD_EXP 63
58559: PPUSH
58560: LD_VAR 0 1
58564: PPUSH
58565: EMPTY
58566: PPUSH
58567: CALL_OW 1
58571: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
58572: LD_ADDR_EXP 64
58576: PUSH
58577: LD_EXP 64
58581: PPUSH
58582: LD_VAR 0 1
58586: PPUSH
58587: EMPTY
58588: PPUSH
58589: CALL_OW 1
58593: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
58594: LD_ADDR_EXP 65
58598: PUSH
58599: LD_EXP 65
58603: PPUSH
58604: LD_VAR 0 1
58608: PPUSH
58609: EMPTY
58610: PPUSH
58611: CALL_OW 1
58615: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
58616: LD_ADDR_EXP 66
58620: PUSH
58621: LD_EXP 66
58625: PPUSH
58626: LD_VAR 0 1
58630: PPUSH
58631: EMPTY
58632: PPUSH
58633: CALL_OW 1
58637: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
58638: LD_ADDR_EXP 67
58642: PUSH
58643: LD_EXP 67
58647: PPUSH
58648: LD_VAR 0 1
58652: PPUSH
58653: EMPTY
58654: PPUSH
58655: CALL_OW 1
58659: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
58660: LD_ADDR_EXP 68
58664: PUSH
58665: LD_EXP 68
58669: PPUSH
58670: LD_VAR 0 1
58674: PPUSH
58675: EMPTY
58676: PPUSH
58677: CALL_OW 1
58681: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
58682: LD_ADDR_EXP 69
58686: PUSH
58687: LD_EXP 69
58691: PPUSH
58692: LD_VAR 0 1
58696: PPUSH
58697: EMPTY
58698: PPUSH
58699: CALL_OW 1
58703: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
58704: LD_ADDR_EXP 70
58708: PUSH
58709: LD_EXP 70
58713: PPUSH
58714: LD_VAR 0 1
58718: PPUSH
58719: EMPTY
58720: PPUSH
58721: CALL_OW 1
58725: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
58726: LD_ADDR_EXP 71
58730: PUSH
58731: LD_EXP 71
58735: PPUSH
58736: LD_VAR 0 1
58740: PPUSH
58741: EMPTY
58742: PPUSH
58743: CALL_OW 1
58747: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
58748: LD_ADDR_EXP 72
58752: PUSH
58753: LD_EXP 72
58757: PPUSH
58758: LD_VAR 0 1
58762: PPUSH
58763: EMPTY
58764: PPUSH
58765: CALL_OW 1
58769: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
58770: LD_ADDR_EXP 73
58774: PUSH
58775: LD_EXP 73
58779: PPUSH
58780: LD_VAR 0 1
58784: PPUSH
58785: EMPTY
58786: PPUSH
58787: CALL_OW 1
58791: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
58792: LD_ADDR_EXP 74
58796: PUSH
58797: LD_EXP 74
58801: PPUSH
58802: LD_VAR 0 1
58806: PPUSH
58807: EMPTY
58808: PPUSH
58809: CALL_OW 1
58813: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
58814: LD_ADDR_EXP 75
58818: PUSH
58819: LD_EXP 75
58823: PPUSH
58824: LD_VAR 0 1
58828: PPUSH
58829: EMPTY
58830: PPUSH
58831: CALL_OW 1
58835: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
58836: LD_ADDR_EXP 77
58840: PUSH
58841: LD_EXP 77
58845: PPUSH
58846: LD_VAR 0 1
58850: PPUSH
58851: EMPTY
58852: PPUSH
58853: CALL_OW 1
58857: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
58858: LD_ADDR_EXP 79
58862: PUSH
58863: LD_EXP 79
58867: PPUSH
58868: LD_VAR 0 1
58872: PPUSH
58873: EMPTY
58874: PPUSH
58875: CALL_OW 1
58879: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
58880: LD_ADDR_EXP 80
58884: PUSH
58885: LD_EXP 80
58889: PPUSH
58890: LD_VAR 0 1
58894: PPUSH
58895: EMPTY
58896: PPUSH
58897: CALL_OW 1
58901: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
58902: LD_ADDR_EXP 81
58906: PUSH
58907: LD_EXP 81
58911: PPUSH
58912: LD_VAR 0 1
58916: PPUSH
58917: EMPTY
58918: PPUSH
58919: CALL_OW 1
58923: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
58924: LD_ADDR_EXP 82
58928: PUSH
58929: LD_EXP 82
58933: PPUSH
58934: LD_VAR 0 1
58938: PPUSH
58939: EMPTY
58940: PPUSH
58941: CALL_OW 1
58945: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
58946: LD_ADDR_EXP 83
58950: PUSH
58951: LD_EXP 83
58955: PPUSH
58956: LD_VAR 0 1
58960: PPUSH
58961: EMPTY
58962: PPUSH
58963: CALL_OW 1
58967: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
58968: LD_ADDR_EXP 84
58972: PUSH
58973: LD_EXP 84
58977: PPUSH
58978: LD_VAR 0 1
58982: PPUSH
58983: EMPTY
58984: PPUSH
58985: CALL_OW 1
58989: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
58990: LD_ADDR_EXP 85
58994: PUSH
58995: LD_EXP 85
58999: PPUSH
59000: LD_VAR 0 1
59004: PPUSH
59005: EMPTY
59006: PPUSH
59007: CALL_OW 1
59011: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
59012: LD_ADDR_EXP 86
59016: PUSH
59017: LD_EXP 86
59021: PPUSH
59022: LD_VAR 0 1
59026: PPUSH
59027: EMPTY
59028: PPUSH
59029: CALL_OW 1
59033: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
59034: LD_ADDR_EXP 87
59038: PUSH
59039: LD_EXP 87
59043: PPUSH
59044: LD_VAR 0 1
59048: PPUSH
59049: EMPTY
59050: PPUSH
59051: CALL_OW 1
59055: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
59056: LD_ADDR_EXP 88
59060: PUSH
59061: LD_EXP 88
59065: PPUSH
59066: LD_VAR 0 1
59070: PPUSH
59071: EMPTY
59072: PPUSH
59073: CALL_OW 1
59077: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
59078: LD_ADDR_EXP 89
59082: PUSH
59083: LD_EXP 89
59087: PPUSH
59088: LD_VAR 0 1
59092: PPUSH
59093: EMPTY
59094: PPUSH
59095: CALL_OW 1
59099: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
59100: LD_ADDR_EXP 90
59104: PUSH
59105: LD_EXP 90
59109: PPUSH
59110: LD_VAR 0 1
59114: PPUSH
59115: EMPTY
59116: PPUSH
59117: CALL_OW 1
59121: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
59122: LD_ADDR_EXP 91
59126: PUSH
59127: LD_EXP 91
59131: PPUSH
59132: LD_VAR 0 1
59136: PPUSH
59137: EMPTY
59138: PPUSH
59139: CALL_OW 1
59143: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
59144: LD_ADDR_EXP 92
59148: PUSH
59149: LD_EXP 92
59153: PPUSH
59154: LD_VAR 0 1
59158: PPUSH
59159: LD_INT 0
59161: PPUSH
59162: CALL_OW 1
59166: ST_TO_ADDR
// mc_is_defending := Replace ( mc_is_defending , base , false ) ;
59167: LD_ADDR_EXP 93
59171: PUSH
59172: LD_EXP 93
59176: PPUSH
59177: LD_VAR 0 1
59181: PPUSH
59182: LD_INT 0
59184: PPUSH
59185: CALL_OW 1
59189: ST_TO_ADDR
// end ;
59190: LD_VAR 0 2
59194: RET
// export function MC_Add ( side , units ) ; var base ; begin
59195: LD_INT 0
59197: PPUSH
59198: PPUSH
// base := mc_bases + 1 ;
59199: LD_ADDR_VAR 0 4
59203: PUSH
59204: LD_EXP 50
59208: PUSH
59209: LD_INT 1
59211: PLUS
59212: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
59213: LD_ADDR_EXP 76
59217: PUSH
59218: LD_EXP 76
59222: PPUSH
59223: LD_VAR 0 4
59227: PPUSH
59228: LD_VAR 0 1
59232: PPUSH
59233: CALL_OW 1
59237: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
59238: LD_ADDR_EXP 50
59242: PUSH
59243: LD_EXP 50
59247: PPUSH
59248: LD_VAR 0 4
59252: PPUSH
59253: LD_VAR 0 2
59257: PPUSH
59258: CALL_OW 1
59262: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
59263: LD_ADDR_EXP 51
59267: PUSH
59268: LD_EXP 51
59272: PPUSH
59273: LD_VAR 0 4
59277: PPUSH
59278: EMPTY
59279: PPUSH
59280: CALL_OW 1
59284: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
59285: LD_ADDR_EXP 52
59289: PUSH
59290: LD_EXP 52
59294: PPUSH
59295: LD_VAR 0 4
59299: PPUSH
59300: EMPTY
59301: PPUSH
59302: CALL_OW 1
59306: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
59307: LD_ADDR_EXP 53
59311: PUSH
59312: LD_EXP 53
59316: PPUSH
59317: LD_VAR 0 4
59321: PPUSH
59322: EMPTY
59323: PPUSH
59324: CALL_OW 1
59328: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
59329: LD_ADDR_EXP 54
59333: PUSH
59334: LD_EXP 54
59338: PPUSH
59339: LD_VAR 0 4
59343: PPUSH
59344: EMPTY
59345: PPUSH
59346: CALL_OW 1
59350: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
59351: LD_ADDR_EXP 55
59355: PUSH
59356: LD_EXP 55
59360: PPUSH
59361: LD_VAR 0 4
59365: PPUSH
59366: EMPTY
59367: PPUSH
59368: CALL_OW 1
59372: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
59373: LD_ADDR_EXP 56
59377: PUSH
59378: LD_EXP 56
59382: PPUSH
59383: LD_VAR 0 4
59387: PPUSH
59388: EMPTY
59389: PPUSH
59390: CALL_OW 1
59394: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
59395: LD_ADDR_EXP 57
59399: PUSH
59400: LD_EXP 57
59404: PPUSH
59405: LD_VAR 0 4
59409: PPUSH
59410: EMPTY
59411: PPUSH
59412: CALL_OW 1
59416: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
59417: LD_ADDR_EXP 58
59421: PUSH
59422: LD_EXP 58
59426: PPUSH
59427: LD_VAR 0 4
59431: PPUSH
59432: EMPTY
59433: PPUSH
59434: CALL_OW 1
59438: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
59439: LD_ADDR_EXP 59
59443: PUSH
59444: LD_EXP 59
59448: PPUSH
59449: LD_VAR 0 4
59453: PPUSH
59454: EMPTY
59455: PPUSH
59456: CALL_OW 1
59460: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
59461: LD_ADDR_EXP 60
59465: PUSH
59466: LD_EXP 60
59470: PPUSH
59471: LD_VAR 0 4
59475: PPUSH
59476: EMPTY
59477: PPUSH
59478: CALL_OW 1
59482: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
59483: LD_ADDR_EXP 61
59487: PUSH
59488: LD_EXP 61
59492: PPUSH
59493: LD_VAR 0 4
59497: PPUSH
59498: LD_INT 0
59500: PPUSH
59501: CALL_OW 1
59505: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
59506: LD_ADDR_EXP 62
59510: PUSH
59511: LD_EXP 62
59515: PPUSH
59516: LD_VAR 0 4
59520: PPUSH
59521: EMPTY
59522: PPUSH
59523: CALL_OW 1
59527: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
59528: LD_ADDR_EXP 63
59532: PUSH
59533: LD_EXP 63
59537: PPUSH
59538: LD_VAR 0 4
59542: PPUSH
59543: EMPTY
59544: PPUSH
59545: CALL_OW 1
59549: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
59550: LD_ADDR_EXP 64
59554: PUSH
59555: LD_EXP 64
59559: PPUSH
59560: LD_VAR 0 4
59564: PPUSH
59565: EMPTY
59566: PPUSH
59567: CALL_OW 1
59571: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
59572: LD_ADDR_EXP 65
59576: PUSH
59577: LD_EXP 65
59581: PPUSH
59582: LD_VAR 0 4
59586: PPUSH
59587: EMPTY
59588: PPUSH
59589: CALL_OW 1
59593: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
59594: LD_ADDR_EXP 66
59598: PUSH
59599: LD_EXP 66
59603: PPUSH
59604: LD_VAR 0 4
59608: PPUSH
59609: EMPTY
59610: PPUSH
59611: CALL_OW 1
59615: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
59616: LD_ADDR_EXP 67
59620: PUSH
59621: LD_EXP 67
59625: PPUSH
59626: LD_VAR 0 4
59630: PPUSH
59631: EMPTY
59632: PPUSH
59633: CALL_OW 1
59637: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
59638: LD_ADDR_EXP 68
59642: PUSH
59643: LD_EXP 68
59647: PPUSH
59648: LD_VAR 0 4
59652: PPUSH
59653: EMPTY
59654: PPUSH
59655: CALL_OW 1
59659: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
59660: LD_ADDR_EXP 69
59664: PUSH
59665: LD_EXP 69
59669: PPUSH
59670: LD_VAR 0 4
59674: PPUSH
59675: EMPTY
59676: PPUSH
59677: CALL_OW 1
59681: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
59682: LD_ADDR_EXP 70
59686: PUSH
59687: LD_EXP 70
59691: PPUSH
59692: LD_VAR 0 4
59696: PPUSH
59697: EMPTY
59698: PPUSH
59699: CALL_OW 1
59703: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
59704: LD_ADDR_EXP 71
59708: PUSH
59709: LD_EXP 71
59713: PPUSH
59714: LD_VAR 0 4
59718: PPUSH
59719: EMPTY
59720: PPUSH
59721: CALL_OW 1
59725: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
59726: LD_ADDR_EXP 72
59730: PUSH
59731: LD_EXP 72
59735: PPUSH
59736: LD_VAR 0 4
59740: PPUSH
59741: EMPTY
59742: PPUSH
59743: CALL_OW 1
59747: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
59748: LD_ADDR_EXP 73
59752: PUSH
59753: LD_EXP 73
59757: PPUSH
59758: LD_VAR 0 4
59762: PPUSH
59763: EMPTY
59764: PPUSH
59765: CALL_OW 1
59769: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
59770: LD_ADDR_EXP 74
59774: PUSH
59775: LD_EXP 74
59779: PPUSH
59780: LD_VAR 0 4
59784: PPUSH
59785: EMPTY
59786: PPUSH
59787: CALL_OW 1
59791: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
59792: LD_ADDR_EXP 75
59796: PUSH
59797: LD_EXP 75
59801: PPUSH
59802: LD_VAR 0 4
59806: PPUSH
59807: EMPTY
59808: PPUSH
59809: CALL_OW 1
59813: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
59814: LD_ADDR_EXP 77
59818: PUSH
59819: LD_EXP 77
59823: PPUSH
59824: LD_VAR 0 4
59828: PPUSH
59829: EMPTY
59830: PPUSH
59831: CALL_OW 1
59835: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
59836: LD_ADDR_EXP 79
59840: PUSH
59841: LD_EXP 79
59845: PPUSH
59846: LD_VAR 0 4
59850: PPUSH
59851: EMPTY
59852: PPUSH
59853: CALL_OW 1
59857: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
59858: LD_ADDR_EXP 80
59862: PUSH
59863: LD_EXP 80
59867: PPUSH
59868: LD_VAR 0 4
59872: PPUSH
59873: EMPTY
59874: PPUSH
59875: CALL_OW 1
59879: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
59880: LD_ADDR_EXP 81
59884: PUSH
59885: LD_EXP 81
59889: PPUSH
59890: LD_VAR 0 4
59894: PPUSH
59895: EMPTY
59896: PPUSH
59897: CALL_OW 1
59901: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
59902: LD_ADDR_EXP 82
59906: PUSH
59907: LD_EXP 82
59911: PPUSH
59912: LD_VAR 0 4
59916: PPUSH
59917: EMPTY
59918: PPUSH
59919: CALL_OW 1
59923: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
59924: LD_ADDR_EXP 83
59928: PUSH
59929: LD_EXP 83
59933: PPUSH
59934: LD_VAR 0 4
59938: PPUSH
59939: EMPTY
59940: PPUSH
59941: CALL_OW 1
59945: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
59946: LD_ADDR_EXP 84
59950: PUSH
59951: LD_EXP 84
59955: PPUSH
59956: LD_VAR 0 4
59960: PPUSH
59961: EMPTY
59962: PPUSH
59963: CALL_OW 1
59967: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
59968: LD_ADDR_EXP 85
59972: PUSH
59973: LD_EXP 85
59977: PPUSH
59978: LD_VAR 0 4
59982: PPUSH
59983: EMPTY
59984: PPUSH
59985: CALL_OW 1
59989: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
59990: LD_ADDR_EXP 86
59994: PUSH
59995: LD_EXP 86
59999: PPUSH
60000: LD_VAR 0 4
60004: PPUSH
60005: EMPTY
60006: PPUSH
60007: CALL_OW 1
60011: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
60012: LD_ADDR_EXP 87
60016: PUSH
60017: LD_EXP 87
60021: PPUSH
60022: LD_VAR 0 4
60026: PPUSH
60027: EMPTY
60028: PPUSH
60029: CALL_OW 1
60033: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
60034: LD_ADDR_EXP 88
60038: PUSH
60039: LD_EXP 88
60043: PPUSH
60044: LD_VAR 0 4
60048: PPUSH
60049: EMPTY
60050: PPUSH
60051: CALL_OW 1
60055: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
60056: LD_ADDR_EXP 89
60060: PUSH
60061: LD_EXP 89
60065: PPUSH
60066: LD_VAR 0 4
60070: PPUSH
60071: EMPTY
60072: PPUSH
60073: CALL_OW 1
60077: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
60078: LD_ADDR_EXP 90
60082: PUSH
60083: LD_EXP 90
60087: PPUSH
60088: LD_VAR 0 4
60092: PPUSH
60093: EMPTY
60094: PPUSH
60095: CALL_OW 1
60099: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
60100: LD_ADDR_EXP 91
60104: PUSH
60105: LD_EXP 91
60109: PPUSH
60110: LD_VAR 0 4
60114: PPUSH
60115: EMPTY
60116: PPUSH
60117: CALL_OW 1
60121: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
60122: LD_ADDR_EXP 92
60126: PUSH
60127: LD_EXP 92
60131: PPUSH
60132: LD_VAR 0 4
60136: PPUSH
60137: LD_INT 0
60139: PPUSH
60140: CALL_OW 1
60144: ST_TO_ADDR
// mc_is_defending := Replace ( mc_is_defending , base , false ) ;
60145: LD_ADDR_EXP 93
60149: PUSH
60150: LD_EXP 93
60154: PPUSH
60155: LD_VAR 0 4
60159: PPUSH
60160: LD_INT 0
60162: PPUSH
60163: CALL_OW 1
60167: ST_TO_ADDR
// result := base ;
60168: LD_ADDR_VAR 0 3
60172: PUSH
60173: LD_VAR 0 4
60177: ST_TO_ADDR
// end ;
60178: LD_VAR 0 3
60182: RET
// export function MC_Start ( ) ; var i ; begin
60183: LD_INT 0
60185: PPUSH
60186: PPUSH
// for i = 1 to mc_bases do
60187: LD_ADDR_VAR 0 2
60191: PUSH
60192: DOUBLE
60193: LD_INT 1
60195: DEC
60196: ST_TO_ADDR
60197: LD_EXP 50
60201: PUSH
60202: FOR_TO
60203: IFFALSE 61303
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
60205: LD_ADDR_EXP 50
60209: PUSH
60210: LD_EXP 50
60214: PPUSH
60215: LD_VAR 0 2
60219: PPUSH
60220: LD_EXP 50
60224: PUSH
60225: LD_VAR 0 2
60229: ARRAY
60230: PUSH
60231: LD_INT 0
60233: DIFF
60234: PPUSH
60235: CALL_OW 1
60239: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
60240: LD_ADDR_EXP 51
60244: PUSH
60245: LD_EXP 51
60249: PPUSH
60250: LD_VAR 0 2
60254: PPUSH
60255: EMPTY
60256: PPUSH
60257: CALL_OW 1
60261: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
60262: LD_ADDR_EXP 52
60266: PUSH
60267: LD_EXP 52
60271: PPUSH
60272: LD_VAR 0 2
60276: PPUSH
60277: EMPTY
60278: PPUSH
60279: CALL_OW 1
60283: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
60284: LD_ADDR_EXP 53
60288: PUSH
60289: LD_EXP 53
60293: PPUSH
60294: LD_VAR 0 2
60298: PPUSH
60299: EMPTY
60300: PPUSH
60301: CALL_OW 1
60305: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
60306: LD_ADDR_EXP 54
60310: PUSH
60311: LD_EXP 54
60315: PPUSH
60316: LD_VAR 0 2
60320: PPUSH
60321: EMPTY
60322: PUSH
60323: EMPTY
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PPUSH
60329: CALL_OW 1
60333: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
60334: LD_ADDR_EXP 55
60338: PUSH
60339: LD_EXP 55
60343: PPUSH
60344: LD_VAR 0 2
60348: PPUSH
60349: EMPTY
60350: PPUSH
60351: CALL_OW 1
60355: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
60356: LD_ADDR_EXP 82
60360: PUSH
60361: LD_EXP 82
60365: PPUSH
60366: LD_VAR 0 2
60370: PPUSH
60371: EMPTY
60372: PPUSH
60373: CALL_OW 1
60377: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
60378: LD_ADDR_EXP 56
60382: PUSH
60383: LD_EXP 56
60387: PPUSH
60388: LD_VAR 0 2
60392: PPUSH
60393: EMPTY
60394: PPUSH
60395: CALL_OW 1
60399: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
60400: LD_ADDR_EXP 57
60404: PUSH
60405: LD_EXP 57
60409: PPUSH
60410: LD_VAR 0 2
60414: PPUSH
60415: EMPTY
60416: PPUSH
60417: CALL_OW 1
60421: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
60422: LD_ADDR_EXP 58
60426: PUSH
60427: LD_EXP 58
60431: PPUSH
60432: LD_VAR 0 2
60436: PPUSH
60437: LD_EXP 50
60441: PUSH
60442: LD_VAR 0 2
60446: ARRAY
60447: PPUSH
60448: LD_INT 2
60450: PUSH
60451: LD_INT 30
60453: PUSH
60454: LD_INT 32
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 30
60463: PUSH
60464: LD_INT 33
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: LIST
60475: PPUSH
60476: CALL_OW 72
60480: PPUSH
60481: CALL_OW 1
60485: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
60486: LD_ADDR_EXP 59
60490: PUSH
60491: LD_EXP 59
60495: PPUSH
60496: LD_VAR 0 2
60500: PPUSH
60501: LD_EXP 50
60505: PUSH
60506: LD_VAR 0 2
60510: ARRAY
60511: PPUSH
60512: LD_INT 2
60514: PUSH
60515: LD_INT 30
60517: PUSH
60518: LD_INT 32
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 30
60527: PUSH
60528: LD_INT 31
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 58
60542: PUSH
60543: EMPTY
60544: LIST
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PPUSH
60550: CALL_OW 72
60554: PPUSH
60555: CALL_OW 1
60559: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
60560: LD_ADDR_EXP 60
60564: PUSH
60565: LD_EXP 60
60569: PPUSH
60570: LD_VAR 0 2
60574: PPUSH
60575: EMPTY
60576: PPUSH
60577: CALL_OW 1
60581: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
60582: LD_ADDR_EXP 64
60586: PUSH
60587: LD_EXP 64
60591: PPUSH
60592: LD_VAR 0 2
60596: PPUSH
60597: EMPTY
60598: PPUSH
60599: CALL_OW 1
60603: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
60604: LD_ADDR_EXP 63
60608: PUSH
60609: LD_EXP 63
60613: PPUSH
60614: LD_VAR 0 2
60618: PPUSH
60619: EMPTY
60620: PPUSH
60621: CALL_OW 1
60625: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
60626: LD_ADDR_EXP 65
60630: PUSH
60631: LD_EXP 65
60635: PPUSH
60636: LD_VAR 0 2
60640: PPUSH
60641: EMPTY
60642: PPUSH
60643: CALL_OW 1
60647: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
60648: LD_ADDR_EXP 66
60652: PUSH
60653: LD_EXP 66
60657: PPUSH
60658: LD_VAR 0 2
60662: PPUSH
60663: EMPTY
60664: PPUSH
60665: CALL_OW 1
60669: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
60670: LD_ADDR_EXP 67
60674: PUSH
60675: LD_EXP 67
60679: PPUSH
60680: LD_VAR 0 2
60684: PPUSH
60685: EMPTY
60686: PPUSH
60687: CALL_OW 1
60691: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
60692: LD_ADDR_EXP 68
60696: PUSH
60697: LD_EXP 68
60701: PPUSH
60702: LD_VAR 0 2
60706: PPUSH
60707: EMPTY
60708: PPUSH
60709: CALL_OW 1
60713: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
60714: LD_ADDR_EXP 69
60718: PUSH
60719: LD_EXP 69
60723: PPUSH
60724: LD_VAR 0 2
60728: PPUSH
60729: EMPTY
60730: PPUSH
60731: CALL_OW 1
60735: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
60736: LD_ADDR_EXP 70
60740: PUSH
60741: LD_EXP 70
60745: PPUSH
60746: LD_VAR 0 2
60750: PPUSH
60751: EMPTY
60752: PPUSH
60753: CALL_OW 1
60757: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
60758: LD_ADDR_EXP 71
60762: PUSH
60763: LD_EXP 71
60767: PPUSH
60768: LD_VAR 0 2
60772: PPUSH
60773: EMPTY
60774: PPUSH
60775: CALL_OW 1
60779: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
60780: LD_ADDR_EXP 72
60784: PUSH
60785: LD_EXP 72
60789: PPUSH
60790: LD_VAR 0 2
60794: PPUSH
60795: EMPTY
60796: PPUSH
60797: CALL_OW 1
60801: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
60802: LD_ADDR_EXP 61
60806: PUSH
60807: LD_EXP 61
60811: PPUSH
60812: LD_VAR 0 2
60816: PPUSH
60817: LD_INT 0
60819: PPUSH
60820: CALL_OW 1
60824: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
60825: LD_ADDR_EXP 74
60829: PUSH
60830: LD_EXP 74
60834: PPUSH
60835: LD_VAR 0 2
60839: PPUSH
60840: LD_INT 0
60842: PPUSH
60843: CALL_OW 1
60847: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
60848: LD_ADDR_EXP 62
60852: PUSH
60853: LD_EXP 62
60857: PPUSH
60858: LD_VAR 0 2
60862: PPUSH
60863: EMPTY
60864: PPUSH
60865: CALL_OW 1
60869: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
60870: LD_ADDR_EXP 73
60874: PUSH
60875: LD_EXP 73
60879: PPUSH
60880: LD_VAR 0 2
60884: PPUSH
60885: LD_INT 0
60887: PPUSH
60888: CALL_OW 1
60892: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
60893: LD_ADDR_EXP 75
60897: PUSH
60898: LD_EXP 75
60902: PPUSH
60903: LD_VAR 0 2
60907: PPUSH
60908: EMPTY
60909: PPUSH
60910: CALL_OW 1
60914: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
60915: LD_ADDR_EXP 78
60919: PUSH
60920: LD_EXP 78
60924: PPUSH
60925: LD_VAR 0 2
60929: PPUSH
60930: LD_INT 0
60932: PPUSH
60933: CALL_OW 1
60937: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
60938: LD_ADDR_EXP 79
60942: PUSH
60943: LD_EXP 79
60947: PPUSH
60948: LD_VAR 0 2
60952: PPUSH
60953: EMPTY
60954: PPUSH
60955: CALL_OW 1
60959: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
60960: LD_ADDR_EXP 80
60964: PUSH
60965: LD_EXP 80
60969: PPUSH
60970: LD_VAR 0 2
60974: PPUSH
60975: EMPTY
60976: PPUSH
60977: CALL_OW 1
60981: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
60982: LD_ADDR_EXP 81
60986: PUSH
60987: LD_EXP 81
60991: PPUSH
60992: LD_VAR 0 2
60996: PPUSH
60997: EMPTY
60998: PPUSH
60999: CALL_OW 1
61003: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
61004: LD_ADDR_EXP 83
61008: PUSH
61009: LD_EXP 83
61013: PPUSH
61014: LD_VAR 0 2
61018: PPUSH
61019: LD_EXP 50
61023: PUSH
61024: LD_VAR 0 2
61028: ARRAY
61029: PPUSH
61030: LD_INT 2
61032: PUSH
61033: LD_INT 30
61035: PUSH
61036: LD_INT 6
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 30
61045: PUSH
61046: LD_INT 7
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 30
61055: PUSH
61056: LD_INT 8
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: PPUSH
61069: CALL_OW 72
61073: PPUSH
61074: CALL_OW 1
61078: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
61079: LD_ADDR_EXP 84
61083: PUSH
61084: LD_EXP 84
61088: PPUSH
61089: LD_VAR 0 2
61093: PPUSH
61094: EMPTY
61095: PPUSH
61096: CALL_OW 1
61100: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
61101: LD_ADDR_EXP 85
61105: PUSH
61106: LD_EXP 85
61110: PPUSH
61111: LD_VAR 0 2
61115: PPUSH
61116: EMPTY
61117: PPUSH
61118: CALL_OW 1
61122: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
61123: LD_ADDR_EXP 86
61127: PUSH
61128: LD_EXP 86
61132: PPUSH
61133: LD_VAR 0 2
61137: PPUSH
61138: EMPTY
61139: PPUSH
61140: CALL_OW 1
61144: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
61145: LD_ADDR_EXP 87
61149: PUSH
61150: LD_EXP 87
61154: PPUSH
61155: LD_VAR 0 2
61159: PPUSH
61160: EMPTY
61161: PPUSH
61162: CALL_OW 1
61166: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
61167: LD_ADDR_EXP 88
61171: PUSH
61172: LD_EXP 88
61176: PPUSH
61177: LD_VAR 0 2
61181: PPUSH
61182: EMPTY
61183: PPUSH
61184: CALL_OW 1
61188: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
61189: LD_ADDR_EXP 89
61193: PUSH
61194: LD_EXP 89
61198: PPUSH
61199: LD_VAR 0 2
61203: PPUSH
61204: EMPTY
61205: PPUSH
61206: CALL_OW 1
61210: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
61211: LD_ADDR_EXP 90
61215: PUSH
61216: LD_EXP 90
61220: PPUSH
61221: LD_VAR 0 2
61225: PPUSH
61226: EMPTY
61227: PPUSH
61228: CALL_OW 1
61232: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
61233: LD_ADDR_EXP 91
61237: PUSH
61238: LD_EXP 91
61242: PPUSH
61243: LD_VAR 0 2
61247: PPUSH
61248: EMPTY
61249: PPUSH
61250: CALL_OW 1
61254: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
61255: LD_ADDR_EXP 92
61259: PUSH
61260: LD_EXP 92
61264: PPUSH
61265: LD_VAR 0 2
61269: PPUSH
61270: LD_INT 0
61272: PPUSH
61273: CALL_OW 1
61277: ST_TO_ADDR
// mc_is_defending := Replace ( mc_is_defending , i , false ) ;
61278: LD_ADDR_EXP 93
61282: PUSH
61283: LD_EXP 93
61287: PPUSH
61288: LD_VAR 0 2
61292: PPUSH
61293: LD_INT 0
61295: PPUSH
61296: CALL_OW 1
61300: ST_TO_ADDR
// end ;
61301: GO 60202
61303: POP
61304: POP
// MC_InitSides ( ) ;
61305: CALL 61591 0 0
// MC_InitResearch ( ) ;
61309: CALL 61330 0 0
// CustomInitMacro ( ) ;
61313: CALL 1407 0 0
// skirmish := true ;
61317: LD_ADDR_EXP 48
61321: PUSH
61322: LD_INT 1
61324: ST_TO_ADDR
// end ;
61325: LD_VAR 0 1
61329: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
61330: LD_INT 0
61332: PPUSH
61333: PPUSH
61334: PPUSH
61335: PPUSH
61336: PPUSH
61337: PPUSH
// if not mc_bases then
61338: LD_EXP 50
61342: NOT
61343: IFFALSE 61347
// exit ;
61345: GO 61586
// for i = 1 to 8 do
61347: LD_ADDR_VAR 0 2
61351: PUSH
61352: DOUBLE
61353: LD_INT 1
61355: DEC
61356: ST_TO_ADDR
61357: LD_INT 8
61359: PUSH
61360: FOR_TO
61361: IFFALSE 61387
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
61363: LD_ADDR_EXP 77
61367: PUSH
61368: LD_EXP 77
61372: PPUSH
61373: LD_VAR 0 2
61377: PPUSH
61378: EMPTY
61379: PPUSH
61380: CALL_OW 1
61384: ST_TO_ADDR
61385: GO 61360
61387: POP
61388: POP
// tmp := [ ] ;
61389: LD_ADDR_VAR 0 5
61393: PUSH
61394: EMPTY
61395: ST_TO_ADDR
// for i = 1 to mc_sides do
61396: LD_ADDR_VAR 0 2
61400: PUSH
61401: DOUBLE
61402: LD_INT 1
61404: DEC
61405: ST_TO_ADDR
61406: LD_EXP 76
61410: PUSH
61411: FOR_TO
61412: IFFALSE 61470
// if not mc_sides [ i ] in tmp then
61414: LD_EXP 76
61418: PUSH
61419: LD_VAR 0 2
61423: ARRAY
61424: PUSH
61425: LD_VAR 0 5
61429: IN
61430: NOT
61431: IFFALSE 61468
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
61433: LD_ADDR_VAR 0 5
61437: PUSH
61438: LD_VAR 0 5
61442: PPUSH
61443: LD_VAR 0 5
61447: PUSH
61448: LD_INT 1
61450: PLUS
61451: PPUSH
61452: LD_EXP 76
61456: PUSH
61457: LD_VAR 0 2
61461: ARRAY
61462: PPUSH
61463: CALL_OW 2
61467: ST_TO_ADDR
61468: GO 61411
61470: POP
61471: POP
// if not tmp then
61472: LD_VAR 0 5
61476: NOT
61477: IFFALSE 61481
// exit ;
61479: GO 61586
// for j in tmp do
61481: LD_ADDR_VAR 0 3
61485: PUSH
61486: LD_VAR 0 5
61490: PUSH
61491: FOR_IN
61492: IFFALSE 61584
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
61494: LD_ADDR_VAR 0 6
61498: PUSH
61499: LD_INT 22
61501: PUSH
61502: LD_VAR 0 3
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PPUSH
61511: CALL_OW 69
61515: ST_TO_ADDR
// if not un then
61516: LD_VAR 0 6
61520: NOT
61521: IFFALSE 61525
// continue ;
61523: GO 61491
// nation := GetNation ( un [ 1 ] ) ;
61525: LD_ADDR_VAR 0 4
61529: PUSH
61530: LD_VAR 0 6
61534: PUSH
61535: LD_INT 1
61537: ARRAY
61538: PPUSH
61539: CALL_OW 248
61543: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
61544: LD_ADDR_EXP 77
61548: PUSH
61549: LD_EXP 77
61553: PPUSH
61554: LD_VAR 0 3
61558: PPUSH
61559: LD_VAR 0 3
61563: PPUSH
61564: LD_VAR 0 4
61568: PPUSH
61569: LD_INT 1
61571: PPUSH
61572: CALL 19439 0 3
61576: PPUSH
61577: CALL_OW 1
61581: ST_TO_ADDR
// end ;
61582: GO 61491
61584: POP
61585: POP
// end ;
61586: LD_VAR 0 1
61590: RET
// export function MC_InitSides ( ) ; var i ; begin
61591: LD_INT 0
61593: PPUSH
61594: PPUSH
// if not mc_bases then
61595: LD_EXP 50
61599: NOT
61600: IFFALSE 61604
// exit ;
61602: GO 61678
// for i = 1 to mc_bases do
61604: LD_ADDR_VAR 0 2
61608: PUSH
61609: DOUBLE
61610: LD_INT 1
61612: DEC
61613: ST_TO_ADDR
61614: LD_EXP 50
61618: PUSH
61619: FOR_TO
61620: IFFALSE 61676
// if mc_bases [ i ] then
61622: LD_EXP 50
61626: PUSH
61627: LD_VAR 0 2
61631: ARRAY
61632: IFFALSE 61674
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
61634: LD_ADDR_EXP 76
61638: PUSH
61639: LD_EXP 76
61643: PPUSH
61644: LD_VAR 0 2
61648: PPUSH
61649: LD_EXP 50
61653: PUSH
61654: LD_VAR 0 2
61658: ARRAY
61659: PUSH
61660: LD_INT 1
61662: ARRAY
61663: PPUSH
61664: CALL_OW 255
61668: PPUSH
61669: CALL_OW 1
61673: ST_TO_ADDR
61674: GO 61619
61676: POP
61677: POP
// end ;
61678: LD_VAR 0 1
61682: RET
// every 0 0$03 trigger skirmish do
61683: LD_EXP 48
61687: IFFALSE 61841
61689: GO 61691
61691: DISABLE
// begin enable ;
61692: ENABLE
// MC_CheckBuildings ( ) ;
61693: CALL 66339 0 0
// MC_CheckPeopleLife ( ) ;
61697: CALL 66464 0 0
// RaiseSailEvent ( 100 ) ;
61701: LD_INT 100
61703: PPUSH
61704: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
61708: LD_INT 103
61710: PPUSH
61711: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
61715: LD_INT 104
61717: PPUSH
61718: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
61722: LD_INT 105
61724: PPUSH
61725: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
61729: LD_INT 106
61731: PPUSH
61732: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
61736: LD_INT 107
61738: PPUSH
61739: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
61743: LD_INT 108
61745: PPUSH
61746: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
61750: LD_INT 109
61752: PPUSH
61753: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
61757: LD_INT 110
61759: PPUSH
61760: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
61764: LD_INT 111
61766: PPUSH
61767: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
61771: LD_INT 112
61773: PPUSH
61774: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
61778: LD_INT 113
61780: PPUSH
61781: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
61785: LD_INT 120
61787: PPUSH
61788: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
61792: LD_INT 121
61794: PPUSH
61795: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
61799: LD_INT 122
61801: PPUSH
61802: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
61806: LD_INT 123
61808: PPUSH
61809: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
61813: LD_INT 124
61815: PPUSH
61816: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
61820: LD_INT 125
61822: PPUSH
61823: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
61827: LD_INT 126
61829: PPUSH
61830: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
61834: LD_INT 200
61836: PPUSH
61837: CALL_OW 427
// end ;
61841: END
// on SailEvent ( event ) do begin if event < 100 then
61842: LD_VAR 0 1
61846: PUSH
61847: LD_INT 100
61849: LESS
61850: IFFALSE 61861
// CustomEvent ( event ) ;
61852: LD_VAR 0 1
61856: PPUSH
61857: CALL 18617 0 1
// if event = 100 then
61861: LD_VAR 0 1
61865: PUSH
61866: LD_INT 100
61868: EQUAL
61869: IFFALSE 61875
// MC_ClassManager ( ) ;
61871: CALL 62267 0 0
// if event = 101 then
61875: LD_VAR 0 1
61879: PUSH
61880: LD_INT 101
61882: EQUAL
61883: IFFALSE 61889
// MC_RepairBuildings ( ) ;
61885: CALL 67049 0 0
// if event = 102 then
61889: LD_VAR 0 1
61893: PUSH
61894: LD_INT 102
61896: EQUAL
61897: IFFALSE 61903
// MC_Heal ( ) ;
61899: CALL 67934 0 0
// if event = 103 then
61903: LD_VAR 0 1
61907: PUSH
61908: LD_INT 103
61910: EQUAL
61911: IFFALSE 61917
// MC_Build ( ) ;
61913: CALL 68356 0 0
// if event = 104 then
61917: LD_VAR 0 1
61921: PUSH
61922: LD_INT 104
61924: EQUAL
61925: IFFALSE 61931
// MC_TurretWeapon ( ) ;
61927: CALL 69997 0 0
// if event = 105 then
61931: LD_VAR 0 1
61935: PUSH
61936: LD_INT 105
61938: EQUAL
61939: IFFALSE 61945
// MC_BuildUpgrade ( ) ;
61941: CALL 69548 0 0
// if event = 106 then
61945: LD_VAR 0 1
61949: PUSH
61950: LD_INT 106
61952: EQUAL
61953: IFFALSE 61959
// MC_PlantMines ( ) ;
61955: CALL 70427 0 0
// if event = 107 then
61959: LD_VAR 0 1
61963: PUSH
61964: LD_INT 107
61966: EQUAL
61967: IFFALSE 61973
// MC_CollectCrates ( ) ;
61969: CALL 71218 0 0
// if event = 108 then
61973: LD_VAR 0 1
61977: PUSH
61978: LD_INT 108
61980: EQUAL
61981: IFFALSE 61987
// MC_LinkRemoteControl ( ) ;
61983: CALL 72994 0 0
// if event = 109 then
61987: LD_VAR 0 1
61991: PUSH
61992: LD_INT 109
61994: EQUAL
61995: IFFALSE 62001
// MC_ProduceVehicle ( ) ;
61997: CALL 73175 0 0
// if event = 110 then
62001: LD_VAR 0 1
62005: PUSH
62006: LD_INT 110
62008: EQUAL
62009: IFFALSE 62015
// MC_SendAttack ( ) ;
62011: CALL 73641 0 0
// if event = 111 then
62015: LD_VAR 0 1
62019: PUSH
62020: LD_INT 111
62022: EQUAL
62023: IFFALSE 62029
// MC_Defend ( ) ;
62025: CALL 73749 0 0
// if event = 112 then
62029: LD_VAR 0 1
62033: PUSH
62034: LD_INT 112
62036: EQUAL
62037: IFFALSE 62043
// MC_Research ( ) ;
62039: CALL 74471 0 0
// if event = 113 then
62043: LD_VAR 0 1
62047: PUSH
62048: LD_INT 113
62050: EQUAL
62051: IFFALSE 62057
// MC_MinesTrigger ( ) ;
62053: CALL 75585 0 0
// if event = 120 then
62057: LD_VAR 0 1
62061: PUSH
62062: LD_INT 120
62064: EQUAL
62065: IFFALSE 62071
// MC_RepairVehicle ( ) ;
62067: CALL 75684 0 0
// if event = 121 then
62071: LD_VAR 0 1
62075: PUSH
62076: LD_INT 121
62078: EQUAL
62079: IFFALSE 62085
// MC_TameApe ( ) ;
62081: CALL 76414 0 0
// if event = 122 then
62085: LD_VAR 0 1
62089: PUSH
62090: LD_INT 122
62092: EQUAL
62093: IFFALSE 62099
// MC_ChangeApeClass ( ) ;
62095: CALL 77243 0 0
// if event = 123 then
62099: LD_VAR 0 1
62103: PUSH
62104: LD_INT 123
62106: EQUAL
62107: IFFALSE 62113
// MC_Bazooka ( ) ;
62109: CALL 77893 0 0
// if event = 124 then
62113: LD_VAR 0 1
62117: PUSH
62118: LD_INT 124
62120: EQUAL
62121: IFFALSE 62127
// MC_TeleportExit ( ) ;
62123: CALL 78091 0 0
// if event = 125 then
62127: LD_VAR 0 1
62131: PUSH
62132: LD_INT 125
62134: EQUAL
62135: IFFALSE 62141
// MC_Deposits ( ) ;
62137: CALL 78738 0 0
// if event = 126 then
62141: LD_VAR 0 1
62145: PUSH
62146: LD_INT 126
62148: EQUAL
62149: IFFALSE 62155
// MC_RemoteDriver ( ) ;
62151: CALL 79363 0 0
// if event = 200 then
62155: LD_VAR 0 1
62159: PUSH
62160: LD_INT 200
62162: EQUAL
62163: IFFALSE 62169
// MC_Idle ( ) ;
62165: CALL 81312 0 0
// end ;
62169: PPOPN 1
62171: END
// export function MC_Reset ( base , tag ) ; var i ; begin
62172: LD_INT 0
62174: PPUSH
62175: PPUSH
// if not mc_bases [ base ] or not tag then
62176: LD_EXP 50
62180: PUSH
62181: LD_VAR 0 1
62185: ARRAY
62186: NOT
62187: PUSH
62188: LD_VAR 0 2
62192: NOT
62193: OR
62194: IFFALSE 62198
// exit ;
62196: GO 62262
// for i in mc_bases [ base ] union mc_ape [ base ] do
62198: LD_ADDR_VAR 0 4
62202: PUSH
62203: LD_EXP 50
62207: PUSH
62208: LD_VAR 0 1
62212: ARRAY
62213: PUSH
62214: LD_EXP 79
62218: PUSH
62219: LD_VAR 0 1
62223: ARRAY
62224: UNION
62225: PUSH
62226: FOR_IN
62227: IFFALSE 62260
// if GetTag ( i ) = tag then
62229: LD_VAR 0 4
62233: PPUSH
62234: CALL_OW 110
62238: PUSH
62239: LD_VAR 0 2
62243: EQUAL
62244: IFFALSE 62258
// SetTag ( i , 0 ) ;
62246: LD_VAR 0 4
62250: PPUSH
62251: LD_INT 0
62253: PPUSH
62254: CALL_OW 109
62258: GO 62226
62260: POP
62261: POP
// end ;
62262: LD_VAR 0 3
62266: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
62267: LD_INT 0
62269: PPUSH
62270: PPUSH
62271: PPUSH
62272: PPUSH
62273: PPUSH
62274: PPUSH
62275: PPUSH
62276: PPUSH
// if not mc_bases then
62277: LD_EXP 50
62281: NOT
62282: IFFALSE 62286
// exit ;
62284: GO 62744
// for i = 1 to mc_bases do
62286: LD_ADDR_VAR 0 2
62290: PUSH
62291: DOUBLE
62292: LD_INT 1
62294: DEC
62295: ST_TO_ADDR
62296: LD_EXP 50
62300: PUSH
62301: FOR_TO
62302: IFFALSE 62742
// begin tmp := MC_ClassCheckReq ( i ) ;
62304: LD_ADDR_VAR 0 4
62308: PUSH
62309: LD_VAR 0 2
62313: PPUSH
62314: CALL 62749 0 1
62318: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
62319: LD_ADDR_EXP 91
62323: PUSH
62324: LD_EXP 91
62328: PPUSH
62329: LD_VAR 0 2
62333: PPUSH
62334: LD_VAR 0 4
62338: PPUSH
62339: CALL_OW 1
62343: ST_TO_ADDR
// if not tmp then
62344: LD_VAR 0 4
62348: NOT
62349: IFFALSE 62353
// continue ;
62351: GO 62301
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
62353: LD_ADDR_VAR 0 6
62357: PUSH
62358: LD_EXP 50
62362: PUSH
62363: LD_VAR 0 2
62367: ARRAY
62368: PPUSH
62369: LD_INT 2
62371: PUSH
62372: LD_INT 30
62374: PUSH
62375: LD_INT 4
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 30
62384: PUSH
62385: LD_INT 5
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: LIST
62396: PPUSH
62397: CALL_OW 72
62401: PUSH
62402: LD_EXP 50
62406: PUSH
62407: LD_VAR 0 2
62411: ARRAY
62412: PPUSH
62413: LD_INT 2
62415: PUSH
62416: LD_INT 30
62418: PUSH
62419: LD_INT 0
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 30
62428: PUSH
62429: LD_INT 1
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: LIST
62440: PPUSH
62441: CALL_OW 72
62445: PUSH
62446: LD_EXP 50
62450: PUSH
62451: LD_VAR 0 2
62455: ARRAY
62456: PPUSH
62457: LD_INT 30
62459: PUSH
62460: LD_INT 3
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PPUSH
62467: CALL_OW 72
62471: PUSH
62472: LD_EXP 50
62476: PUSH
62477: LD_VAR 0 2
62481: ARRAY
62482: PPUSH
62483: LD_INT 2
62485: PUSH
62486: LD_INT 30
62488: PUSH
62489: LD_INT 6
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 30
62498: PUSH
62499: LD_INT 7
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 30
62508: PUSH
62509: LD_INT 8
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: PPUSH
62522: CALL_OW 72
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: ST_TO_ADDR
// for j = 1 to 4 do
62533: LD_ADDR_VAR 0 3
62537: PUSH
62538: DOUBLE
62539: LD_INT 1
62541: DEC
62542: ST_TO_ADDR
62543: LD_INT 4
62545: PUSH
62546: FOR_TO
62547: IFFALSE 62738
// begin if not tmp [ j ] then
62549: LD_VAR 0 4
62553: PUSH
62554: LD_VAR 0 3
62558: ARRAY
62559: NOT
62560: IFFALSE 62564
// continue ;
62562: GO 62546
// for p in tmp [ j ] do
62564: LD_ADDR_VAR 0 5
62568: PUSH
62569: LD_VAR 0 4
62573: PUSH
62574: LD_VAR 0 3
62578: ARRAY
62579: PUSH
62580: FOR_IN
62581: IFFALSE 62734
// begin if not b [ j ] then
62583: LD_VAR 0 6
62587: PUSH
62588: LD_VAR 0 3
62592: ARRAY
62593: NOT
62594: IFFALSE 62598
// break ;
62596: GO 62734
// e := 0 ;
62598: LD_ADDR_VAR 0 7
62602: PUSH
62603: LD_INT 0
62605: ST_TO_ADDR
// for k in b [ j ] do
62606: LD_ADDR_VAR 0 8
62610: PUSH
62611: LD_VAR 0 6
62615: PUSH
62616: LD_VAR 0 3
62620: ARRAY
62621: PUSH
62622: FOR_IN
62623: IFFALSE 62650
// if IsNotFull ( k ) then
62625: LD_VAR 0 8
62629: PPUSH
62630: CALL 21592 0 1
62634: IFFALSE 62648
// begin e := k ;
62636: LD_ADDR_VAR 0 7
62640: PUSH
62641: LD_VAR 0 8
62645: ST_TO_ADDR
// break ;
62646: GO 62650
// end ;
62648: GO 62622
62650: POP
62651: POP
// if e and not UnitGoingToBuilding ( p , e ) then
62652: LD_VAR 0 7
62656: PUSH
62657: LD_VAR 0 5
62661: PPUSH
62662: LD_VAR 0 7
62666: PPUSH
62667: CALL 54757 0 2
62671: NOT
62672: AND
62673: IFFALSE 62732
// begin if IsInUnit ( p ) then
62675: LD_VAR 0 5
62679: PPUSH
62680: CALL_OW 310
62684: IFFALSE 62695
// ComExitBuilding ( p ) ;
62686: LD_VAR 0 5
62690: PPUSH
62691: CALL_OW 122
// ComEnterUnit ( p , e ) ;
62695: LD_VAR 0 5
62699: PPUSH
62700: LD_VAR 0 7
62704: PPUSH
62705: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
62709: LD_VAR 0 5
62713: PPUSH
62714: LD_VAR 0 3
62718: PPUSH
62719: CALL_OW 183
// AddComExitBuilding ( p ) ;
62723: LD_VAR 0 5
62727: PPUSH
62728: CALL_OW 182
// end ; end ;
62732: GO 62580
62734: POP
62735: POP
// end ;
62736: GO 62546
62738: POP
62739: POP
// end ;
62740: GO 62301
62742: POP
62743: POP
// end ;
62744: LD_VAR 0 1
62748: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
62749: LD_INT 0
62751: PPUSH
62752: PPUSH
62753: PPUSH
62754: PPUSH
62755: PPUSH
62756: PPUSH
62757: PPUSH
62758: PPUSH
62759: PPUSH
62760: PPUSH
62761: PPUSH
62762: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
62763: LD_VAR 0 1
62767: NOT
62768: PUSH
62769: LD_EXP 50
62773: PUSH
62774: LD_VAR 0 1
62778: ARRAY
62779: NOT
62780: OR
62781: PUSH
62782: LD_EXP 50
62786: PUSH
62787: LD_VAR 0 1
62791: ARRAY
62792: PPUSH
62793: LD_INT 2
62795: PUSH
62796: LD_INT 30
62798: PUSH
62799: LD_INT 0
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 30
62808: PUSH
62809: LD_INT 1
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: LIST
62820: PPUSH
62821: CALL_OW 72
62825: NOT
62826: OR
62827: IFFALSE 62831
// exit ;
62829: GO 66334
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
62831: LD_ADDR_VAR 0 4
62835: PUSH
62836: LD_EXP 50
62840: PUSH
62841: LD_VAR 0 1
62845: ARRAY
62846: PPUSH
62847: LD_INT 2
62849: PUSH
62850: LD_INT 25
62852: PUSH
62853: LD_INT 1
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 25
62862: PUSH
62863: LD_INT 2
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 25
62872: PUSH
62873: LD_INT 3
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 25
62882: PUSH
62883: LD_INT 4
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 25
62892: PUSH
62893: LD_INT 5
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: PUSH
62900: LD_INT 25
62902: PUSH
62903: LD_INT 8
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 25
62912: PUSH
62913: LD_INT 9
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: PPUSH
62930: CALL_OW 72
62934: ST_TO_ADDR
// if not tmp then
62935: LD_VAR 0 4
62939: NOT
62940: IFFALSE 62944
// exit ;
62942: GO 66334
// for i in tmp do
62944: LD_ADDR_VAR 0 3
62948: PUSH
62949: LD_VAR 0 4
62953: PUSH
62954: FOR_IN
62955: IFFALSE 62986
// if GetTag ( i ) then
62957: LD_VAR 0 3
62961: PPUSH
62962: CALL_OW 110
62966: IFFALSE 62984
// tmp := tmp diff i ;
62968: LD_ADDR_VAR 0 4
62972: PUSH
62973: LD_VAR 0 4
62977: PUSH
62978: LD_VAR 0 3
62982: DIFF
62983: ST_TO_ADDR
62984: GO 62954
62986: POP
62987: POP
// if not tmp then
62988: LD_VAR 0 4
62992: NOT
62993: IFFALSE 62997
// exit ;
62995: GO 66334
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
62997: LD_ADDR_VAR 0 5
63001: PUSH
63002: LD_EXP 50
63006: PUSH
63007: LD_VAR 0 1
63011: ARRAY
63012: PPUSH
63013: LD_INT 2
63015: PUSH
63016: LD_INT 25
63018: PUSH
63019: LD_INT 1
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 25
63028: PUSH
63029: LD_INT 5
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 25
63038: PUSH
63039: LD_INT 8
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 25
63048: PUSH
63049: LD_INT 9
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: PPUSH
63063: CALL_OW 72
63067: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
63068: LD_ADDR_VAR 0 6
63072: PUSH
63073: LD_EXP 50
63077: PUSH
63078: LD_VAR 0 1
63082: ARRAY
63083: PPUSH
63084: LD_INT 25
63086: PUSH
63087: LD_INT 2
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PPUSH
63094: CALL_OW 72
63098: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
63099: LD_ADDR_VAR 0 7
63103: PUSH
63104: LD_EXP 50
63108: PUSH
63109: LD_VAR 0 1
63113: ARRAY
63114: PPUSH
63115: LD_INT 25
63117: PUSH
63118: LD_INT 3
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PPUSH
63125: CALL_OW 72
63129: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
63130: LD_ADDR_VAR 0 8
63134: PUSH
63135: LD_EXP 50
63139: PUSH
63140: LD_VAR 0 1
63144: ARRAY
63145: PPUSH
63146: LD_INT 25
63148: PUSH
63149: LD_INT 4
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 24
63158: PUSH
63159: LD_INT 251
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PPUSH
63170: CALL_OW 72
63174: ST_TO_ADDR
// if mc_scan [ base ] then
63175: LD_EXP 73
63179: PUSH
63180: LD_VAR 0 1
63184: ARRAY
63185: IFFALSE 63646
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
63187: LD_ADDR_EXP 92
63191: PUSH
63192: LD_EXP 92
63196: PPUSH
63197: LD_VAR 0 1
63201: PPUSH
63202: LD_INT 4
63204: PPUSH
63205: CALL_OW 1
63209: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
63210: LD_ADDR_VAR 0 12
63214: PUSH
63215: LD_EXP 50
63219: PUSH
63220: LD_VAR 0 1
63224: ARRAY
63225: PPUSH
63226: LD_INT 2
63228: PUSH
63229: LD_INT 30
63231: PUSH
63232: LD_INT 4
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 30
63241: PUSH
63242: LD_INT 5
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: LIST
63253: PPUSH
63254: CALL_OW 72
63258: ST_TO_ADDR
// if not b then
63259: LD_VAR 0 12
63263: NOT
63264: IFFALSE 63268
// exit ;
63266: GO 66334
// p := [ ] ;
63268: LD_ADDR_VAR 0 11
63272: PUSH
63273: EMPTY
63274: ST_TO_ADDR
// if sci >= 2 then
63275: LD_VAR 0 8
63279: PUSH
63280: LD_INT 2
63282: GREATEREQUAL
63283: IFFALSE 63314
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
63285: LD_ADDR_VAR 0 8
63289: PUSH
63290: LD_VAR 0 8
63294: PUSH
63295: LD_INT 1
63297: ARRAY
63298: PUSH
63299: LD_VAR 0 8
63303: PUSH
63304: LD_INT 2
63306: ARRAY
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: ST_TO_ADDR
63312: GO 63375
// if sci = 1 then
63314: LD_VAR 0 8
63318: PUSH
63319: LD_INT 1
63321: EQUAL
63322: IFFALSE 63343
// sci := [ sci [ 1 ] ] else
63324: LD_ADDR_VAR 0 8
63328: PUSH
63329: LD_VAR 0 8
63333: PUSH
63334: LD_INT 1
63336: ARRAY
63337: PUSH
63338: EMPTY
63339: LIST
63340: ST_TO_ADDR
63341: GO 63375
// if sci = 0 then
63343: LD_VAR 0 8
63347: PUSH
63348: LD_INT 0
63350: EQUAL
63351: IFFALSE 63375
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
63353: LD_ADDR_VAR 0 11
63357: PUSH
63358: LD_VAR 0 4
63362: PPUSH
63363: LD_INT 4
63365: PPUSH
63366: CALL 54620 0 2
63370: PUSH
63371: LD_INT 1
63373: ARRAY
63374: ST_TO_ADDR
// if eng > 4 then
63375: LD_VAR 0 6
63379: PUSH
63380: LD_INT 4
63382: GREATER
63383: IFFALSE 63429
// for i = eng downto 4 do
63385: LD_ADDR_VAR 0 3
63389: PUSH
63390: DOUBLE
63391: LD_VAR 0 6
63395: INC
63396: ST_TO_ADDR
63397: LD_INT 4
63399: PUSH
63400: FOR_DOWNTO
63401: IFFALSE 63427
// eng := eng diff eng [ i ] ;
63403: LD_ADDR_VAR 0 6
63407: PUSH
63408: LD_VAR 0 6
63412: PUSH
63413: LD_VAR 0 6
63417: PUSH
63418: LD_VAR 0 3
63422: ARRAY
63423: DIFF
63424: ST_TO_ADDR
63425: GO 63400
63427: POP
63428: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
63429: LD_ADDR_VAR 0 4
63433: PUSH
63434: LD_VAR 0 4
63438: PUSH
63439: LD_VAR 0 5
63443: PUSH
63444: LD_VAR 0 6
63448: UNION
63449: PUSH
63450: LD_VAR 0 7
63454: UNION
63455: PUSH
63456: LD_VAR 0 8
63460: UNION
63461: DIFF
63462: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
63463: LD_ADDR_VAR 0 13
63467: PUSH
63468: LD_EXP 50
63472: PUSH
63473: LD_VAR 0 1
63477: ARRAY
63478: PPUSH
63479: LD_INT 2
63481: PUSH
63482: LD_INT 30
63484: PUSH
63485: LD_INT 32
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 30
63494: PUSH
63495: LD_INT 31
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: LIST
63506: PPUSH
63507: CALL_OW 72
63511: PUSH
63512: LD_EXP 50
63516: PUSH
63517: LD_VAR 0 1
63521: ARRAY
63522: PPUSH
63523: LD_INT 2
63525: PUSH
63526: LD_INT 30
63528: PUSH
63529: LD_INT 4
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 30
63538: PUSH
63539: LD_INT 5
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: LIST
63550: PPUSH
63551: CALL_OW 72
63555: PUSH
63556: LD_INT 6
63558: MUL
63559: PLUS
63560: ST_TO_ADDR
// if bcount < tmp then
63561: LD_VAR 0 13
63565: PUSH
63566: LD_VAR 0 4
63570: LESS
63571: IFFALSE 63617
// for i = tmp downto bcount do
63573: LD_ADDR_VAR 0 3
63577: PUSH
63578: DOUBLE
63579: LD_VAR 0 4
63583: INC
63584: ST_TO_ADDR
63585: LD_VAR 0 13
63589: PUSH
63590: FOR_DOWNTO
63591: IFFALSE 63615
// tmp := Delete ( tmp , tmp ) ;
63593: LD_ADDR_VAR 0 4
63597: PUSH
63598: LD_VAR 0 4
63602: PPUSH
63603: LD_VAR 0 4
63607: PPUSH
63608: CALL_OW 3
63612: ST_TO_ADDR
63613: GO 63590
63615: POP
63616: POP
// result := [ tmp , 0 , 0 , p ] ;
63617: LD_ADDR_VAR 0 2
63621: PUSH
63622: LD_VAR 0 4
63626: PUSH
63627: LD_INT 0
63629: PUSH
63630: LD_INT 0
63632: PUSH
63633: LD_VAR 0 11
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: ST_TO_ADDR
// exit ;
63644: GO 66334
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
63646: LD_EXP 50
63650: PUSH
63651: LD_VAR 0 1
63655: ARRAY
63656: PPUSH
63657: LD_INT 2
63659: PUSH
63660: LD_INT 30
63662: PUSH
63663: LD_INT 6
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 30
63672: PUSH
63673: LD_INT 7
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 30
63682: PUSH
63683: LD_INT 8
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: PPUSH
63696: CALL_OW 72
63700: NOT
63701: PUSH
63702: LD_EXP 50
63706: PUSH
63707: LD_VAR 0 1
63711: ARRAY
63712: PPUSH
63713: LD_INT 30
63715: PUSH
63716: LD_INT 3
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PPUSH
63723: CALL_OW 72
63727: NOT
63728: AND
63729: IFFALSE 63801
// begin if eng = tmp then
63731: LD_VAR 0 6
63735: PUSH
63736: LD_VAR 0 4
63740: EQUAL
63741: IFFALSE 63745
// exit ;
63743: GO 66334
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
63745: LD_ADDR_EXP 92
63749: PUSH
63750: LD_EXP 92
63754: PPUSH
63755: LD_VAR 0 1
63759: PPUSH
63760: LD_INT 1
63762: PPUSH
63763: CALL_OW 1
63767: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
63768: LD_ADDR_VAR 0 2
63772: PUSH
63773: LD_INT 0
63775: PUSH
63776: LD_VAR 0 4
63780: PUSH
63781: LD_VAR 0 6
63785: DIFF
63786: PUSH
63787: LD_INT 0
63789: PUSH
63790: LD_INT 0
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: ST_TO_ADDR
// exit ;
63799: GO 66334
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
63801: LD_EXP 77
63805: PUSH
63806: LD_EXP 76
63810: PUSH
63811: LD_VAR 0 1
63815: ARRAY
63816: ARRAY
63817: PUSH
63818: LD_EXP 50
63822: PUSH
63823: LD_VAR 0 1
63827: ARRAY
63828: PPUSH
63829: LD_INT 2
63831: PUSH
63832: LD_INT 30
63834: PUSH
63835: LD_INT 6
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 30
63844: PUSH
63845: LD_INT 7
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 30
63854: PUSH
63855: LD_INT 8
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: PPUSH
63868: CALL_OW 72
63872: AND
63873: PUSH
63874: LD_EXP 50
63878: PUSH
63879: LD_VAR 0 1
63883: ARRAY
63884: PPUSH
63885: LD_INT 30
63887: PUSH
63888: LD_INT 3
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PPUSH
63895: CALL_OW 72
63899: NOT
63900: AND
63901: IFFALSE 64115
// begin if sci >= 6 then
63903: LD_VAR 0 8
63907: PUSH
63908: LD_INT 6
63910: GREATEREQUAL
63911: IFFALSE 63915
// exit ;
63913: GO 66334
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
63915: LD_ADDR_EXP 92
63919: PUSH
63920: LD_EXP 92
63924: PPUSH
63925: LD_VAR 0 1
63929: PPUSH
63930: LD_INT 2
63932: PPUSH
63933: CALL_OW 1
63937: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
63938: LD_ADDR_VAR 0 9
63942: PUSH
63943: LD_VAR 0 4
63947: PUSH
63948: LD_VAR 0 8
63952: DIFF
63953: PPUSH
63954: LD_INT 4
63956: PPUSH
63957: CALL 54620 0 2
63961: ST_TO_ADDR
// p := [ ] ;
63962: LD_ADDR_VAR 0 11
63966: PUSH
63967: EMPTY
63968: ST_TO_ADDR
// if sci < 6 and sort > 6 then
63969: LD_VAR 0 8
63973: PUSH
63974: LD_INT 6
63976: LESS
63977: PUSH
63978: LD_VAR 0 9
63982: PUSH
63983: LD_INT 6
63985: GREATER
63986: AND
63987: IFFALSE 64068
// begin for i = 1 to 6 - sci do
63989: LD_ADDR_VAR 0 3
63993: PUSH
63994: DOUBLE
63995: LD_INT 1
63997: DEC
63998: ST_TO_ADDR
63999: LD_INT 6
64001: PUSH
64002: LD_VAR 0 8
64006: MINUS
64007: PUSH
64008: FOR_TO
64009: IFFALSE 64064
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
64011: LD_ADDR_VAR 0 11
64015: PUSH
64016: LD_VAR 0 11
64020: PPUSH
64021: LD_VAR 0 11
64025: PUSH
64026: LD_INT 1
64028: PLUS
64029: PPUSH
64030: LD_VAR 0 9
64034: PUSH
64035: LD_INT 1
64037: ARRAY
64038: PPUSH
64039: CALL_OW 2
64043: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
64044: LD_ADDR_VAR 0 9
64048: PUSH
64049: LD_VAR 0 9
64053: PPUSH
64054: LD_INT 1
64056: PPUSH
64057: CALL_OW 3
64061: ST_TO_ADDR
// end ;
64062: GO 64008
64064: POP
64065: POP
// end else
64066: GO 64088
// if sort then
64068: LD_VAR 0 9
64072: IFFALSE 64088
// p := sort [ 1 ] ;
64074: LD_ADDR_VAR 0 11
64078: PUSH
64079: LD_VAR 0 9
64083: PUSH
64084: LD_INT 1
64086: ARRAY
64087: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
64088: LD_ADDR_VAR 0 2
64092: PUSH
64093: LD_INT 0
64095: PUSH
64096: LD_INT 0
64098: PUSH
64099: LD_INT 0
64101: PUSH
64102: LD_VAR 0 11
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: ST_TO_ADDR
// exit ;
64113: GO 66334
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
64115: LD_EXP 77
64119: PUSH
64120: LD_EXP 76
64124: PUSH
64125: LD_VAR 0 1
64129: ARRAY
64130: ARRAY
64131: PUSH
64132: LD_EXP 50
64136: PUSH
64137: LD_VAR 0 1
64141: ARRAY
64142: PPUSH
64143: LD_INT 2
64145: PUSH
64146: LD_INT 30
64148: PUSH
64149: LD_INT 6
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: LD_INT 30
64158: PUSH
64159: LD_INT 7
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 30
64168: PUSH
64169: LD_INT 8
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: PPUSH
64182: CALL_OW 72
64186: AND
64187: PUSH
64188: LD_EXP 50
64192: PUSH
64193: LD_VAR 0 1
64197: ARRAY
64198: PPUSH
64199: LD_INT 30
64201: PUSH
64202: LD_INT 3
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PPUSH
64209: CALL_OW 72
64213: AND
64214: IFFALSE 64948
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
64216: LD_ADDR_EXP 92
64220: PUSH
64221: LD_EXP 92
64225: PPUSH
64226: LD_VAR 0 1
64230: PPUSH
64231: LD_INT 3
64233: PPUSH
64234: CALL_OW 1
64238: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
64239: LD_ADDR_VAR 0 2
64243: PUSH
64244: LD_INT 0
64246: PUSH
64247: LD_INT 0
64249: PUSH
64250: LD_INT 0
64252: PUSH
64253: LD_INT 0
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: LIST
64260: LIST
64261: ST_TO_ADDR
// if not eng then
64262: LD_VAR 0 6
64266: NOT
64267: IFFALSE 64330
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
64269: LD_ADDR_VAR 0 11
64273: PUSH
64274: LD_VAR 0 4
64278: PPUSH
64279: LD_INT 2
64281: PPUSH
64282: CALL 54620 0 2
64286: PUSH
64287: LD_INT 1
64289: ARRAY
64290: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
64291: LD_ADDR_VAR 0 2
64295: PUSH
64296: LD_VAR 0 2
64300: PPUSH
64301: LD_INT 2
64303: PPUSH
64304: LD_VAR 0 11
64308: PPUSH
64309: CALL_OW 1
64313: ST_TO_ADDR
// tmp := tmp diff p ;
64314: LD_ADDR_VAR 0 4
64318: PUSH
64319: LD_VAR 0 4
64323: PUSH
64324: LD_VAR 0 11
64328: DIFF
64329: ST_TO_ADDR
// end ; if tmp and sci < 6 then
64330: LD_VAR 0 4
64334: PUSH
64335: LD_VAR 0 8
64339: PUSH
64340: LD_INT 6
64342: LESS
64343: AND
64344: IFFALSE 64532
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
64346: LD_ADDR_VAR 0 9
64350: PUSH
64351: LD_VAR 0 4
64355: PUSH
64356: LD_VAR 0 8
64360: PUSH
64361: LD_VAR 0 7
64365: UNION
64366: DIFF
64367: PPUSH
64368: LD_INT 4
64370: PPUSH
64371: CALL 54620 0 2
64375: ST_TO_ADDR
// p := [ ] ;
64376: LD_ADDR_VAR 0 11
64380: PUSH
64381: EMPTY
64382: ST_TO_ADDR
// if sort then
64383: LD_VAR 0 9
64387: IFFALSE 64503
// for i = 1 to 6 - sci do
64389: LD_ADDR_VAR 0 3
64393: PUSH
64394: DOUBLE
64395: LD_INT 1
64397: DEC
64398: ST_TO_ADDR
64399: LD_INT 6
64401: PUSH
64402: LD_VAR 0 8
64406: MINUS
64407: PUSH
64408: FOR_TO
64409: IFFALSE 64501
// begin if i = sort then
64411: LD_VAR 0 3
64415: PUSH
64416: LD_VAR 0 9
64420: EQUAL
64421: IFFALSE 64425
// break ;
64423: GO 64501
// if GetClass ( i ) = 4 then
64425: LD_VAR 0 3
64429: PPUSH
64430: CALL_OW 257
64434: PUSH
64435: LD_INT 4
64437: EQUAL
64438: IFFALSE 64442
// continue ;
64440: GO 64408
// p := Insert ( p , p + 1 , sort [ i ] ) ;
64442: LD_ADDR_VAR 0 11
64446: PUSH
64447: LD_VAR 0 11
64451: PPUSH
64452: LD_VAR 0 11
64456: PUSH
64457: LD_INT 1
64459: PLUS
64460: PPUSH
64461: LD_VAR 0 9
64465: PUSH
64466: LD_VAR 0 3
64470: ARRAY
64471: PPUSH
64472: CALL_OW 2
64476: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
64477: LD_ADDR_VAR 0 4
64481: PUSH
64482: LD_VAR 0 4
64486: PUSH
64487: LD_VAR 0 9
64491: PUSH
64492: LD_VAR 0 3
64496: ARRAY
64497: DIFF
64498: ST_TO_ADDR
// end ;
64499: GO 64408
64501: POP
64502: POP
// if p then
64503: LD_VAR 0 11
64507: IFFALSE 64532
// result := Replace ( result , 4 , p ) ;
64509: LD_ADDR_VAR 0 2
64513: PUSH
64514: LD_VAR 0 2
64518: PPUSH
64519: LD_INT 4
64521: PPUSH
64522: LD_VAR 0 11
64526: PPUSH
64527: CALL_OW 1
64531: ST_TO_ADDR
// end ; if tmp and mech < 6 then
64532: LD_VAR 0 4
64536: PUSH
64537: LD_VAR 0 7
64541: PUSH
64542: LD_INT 6
64544: LESS
64545: AND
64546: IFFALSE 64734
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
64548: LD_ADDR_VAR 0 9
64552: PUSH
64553: LD_VAR 0 4
64557: PUSH
64558: LD_VAR 0 8
64562: PUSH
64563: LD_VAR 0 7
64567: UNION
64568: DIFF
64569: PPUSH
64570: LD_INT 3
64572: PPUSH
64573: CALL 54620 0 2
64577: ST_TO_ADDR
// p := [ ] ;
64578: LD_ADDR_VAR 0 11
64582: PUSH
64583: EMPTY
64584: ST_TO_ADDR
// if sort then
64585: LD_VAR 0 9
64589: IFFALSE 64705
// for i = 1 to 6 - mech do
64591: LD_ADDR_VAR 0 3
64595: PUSH
64596: DOUBLE
64597: LD_INT 1
64599: DEC
64600: ST_TO_ADDR
64601: LD_INT 6
64603: PUSH
64604: LD_VAR 0 7
64608: MINUS
64609: PUSH
64610: FOR_TO
64611: IFFALSE 64703
// begin if i = sort then
64613: LD_VAR 0 3
64617: PUSH
64618: LD_VAR 0 9
64622: EQUAL
64623: IFFALSE 64627
// break ;
64625: GO 64703
// if GetClass ( i ) = 3 then
64627: LD_VAR 0 3
64631: PPUSH
64632: CALL_OW 257
64636: PUSH
64637: LD_INT 3
64639: EQUAL
64640: IFFALSE 64644
// continue ;
64642: GO 64610
// p := Insert ( p , p + 1 , sort [ i ] ) ;
64644: LD_ADDR_VAR 0 11
64648: PUSH
64649: LD_VAR 0 11
64653: PPUSH
64654: LD_VAR 0 11
64658: PUSH
64659: LD_INT 1
64661: PLUS
64662: PPUSH
64663: LD_VAR 0 9
64667: PUSH
64668: LD_VAR 0 3
64672: ARRAY
64673: PPUSH
64674: CALL_OW 2
64678: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
64679: LD_ADDR_VAR 0 4
64683: PUSH
64684: LD_VAR 0 4
64688: PUSH
64689: LD_VAR 0 9
64693: PUSH
64694: LD_VAR 0 3
64698: ARRAY
64699: DIFF
64700: ST_TO_ADDR
// end ;
64701: GO 64610
64703: POP
64704: POP
// if p then
64705: LD_VAR 0 11
64709: IFFALSE 64734
// result := Replace ( result , 3 , p ) ;
64711: LD_ADDR_VAR 0 2
64715: PUSH
64716: LD_VAR 0 2
64720: PPUSH
64721: LD_INT 3
64723: PPUSH
64724: LD_VAR 0 11
64728: PPUSH
64729: CALL_OW 1
64733: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
64734: LD_VAR 0 4
64738: PUSH
64739: LD_INT 6
64741: GREATER
64742: PUSH
64743: LD_VAR 0 6
64747: PUSH
64748: LD_INT 6
64750: LESS
64751: AND
64752: IFFALSE 64946
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
64754: LD_ADDR_VAR 0 9
64758: PUSH
64759: LD_VAR 0 4
64763: PUSH
64764: LD_VAR 0 8
64768: PUSH
64769: LD_VAR 0 7
64773: UNION
64774: PUSH
64775: LD_VAR 0 6
64779: UNION
64780: DIFF
64781: PPUSH
64782: LD_INT 2
64784: PPUSH
64785: CALL 54620 0 2
64789: ST_TO_ADDR
// p := [ ] ;
64790: LD_ADDR_VAR 0 11
64794: PUSH
64795: EMPTY
64796: ST_TO_ADDR
// if sort then
64797: LD_VAR 0 9
64801: IFFALSE 64917
// for i = 1 to 6 - eng do
64803: LD_ADDR_VAR 0 3
64807: PUSH
64808: DOUBLE
64809: LD_INT 1
64811: DEC
64812: ST_TO_ADDR
64813: LD_INT 6
64815: PUSH
64816: LD_VAR 0 6
64820: MINUS
64821: PUSH
64822: FOR_TO
64823: IFFALSE 64915
// begin if i = sort then
64825: LD_VAR 0 3
64829: PUSH
64830: LD_VAR 0 9
64834: EQUAL
64835: IFFALSE 64839
// break ;
64837: GO 64915
// if GetClass ( i ) = 2 then
64839: LD_VAR 0 3
64843: PPUSH
64844: CALL_OW 257
64848: PUSH
64849: LD_INT 2
64851: EQUAL
64852: IFFALSE 64856
// continue ;
64854: GO 64822
// p := Insert ( p , p + 1 , sort [ i ] ) ;
64856: LD_ADDR_VAR 0 11
64860: PUSH
64861: LD_VAR 0 11
64865: PPUSH
64866: LD_VAR 0 11
64870: PUSH
64871: LD_INT 1
64873: PLUS
64874: PPUSH
64875: LD_VAR 0 9
64879: PUSH
64880: LD_VAR 0 3
64884: ARRAY
64885: PPUSH
64886: CALL_OW 2
64890: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
64891: LD_ADDR_VAR 0 4
64895: PUSH
64896: LD_VAR 0 4
64900: PUSH
64901: LD_VAR 0 9
64905: PUSH
64906: LD_VAR 0 3
64910: ARRAY
64911: DIFF
64912: ST_TO_ADDR
// end ;
64913: GO 64822
64915: POP
64916: POP
// if p then
64917: LD_VAR 0 11
64921: IFFALSE 64946
// result := Replace ( result , 2 , p ) ;
64923: LD_ADDR_VAR 0 2
64927: PUSH
64928: LD_VAR 0 2
64932: PPUSH
64933: LD_INT 2
64935: PPUSH
64936: LD_VAR 0 11
64940: PPUSH
64941: CALL_OW 1
64945: ST_TO_ADDR
// end ; exit ;
64946: GO 66334
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
64948: LD_EXP 77
64952: PUSH
64953: LD_EXP 76
64957: PUSH
64958: LD_VAR 0 1
64962: ARRAY
64963: ARRAY
64964: NOT
64965: PUSH
64966: LD_EXP 50
64970: PUSH
64971: LD_VAR 0 1
64975: ARRAY
64976: PPUSH
64977: LD_INT 30
64979: PUSH
64980: LD_INT 3
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PPUSH
64987: CALL_OW 72
64991: AND
64992: PUSH
64993: LD_EXP 55
64997: PUSH
64998: LD_VAR 0 1
65002: ARRAY
65003: AND
65004: IFFALSE 65612
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
65006: LD_ADDR_EXP 92
65010: PUSH
65011: LD_EXP 92
65015: PPUSH
65016: LD_VAR 0 1
65020: PPUSH
65021: LD_INT 5
65023: PPUSH
65024: CALL_OW 1
65028: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
65029: LD_ADDR_VAR 0 2
65033: PUSH
65034: LD_INT 0
65036: PUSH
65037: LD_INT 0
65039: PUSH
65040: LD_INT 0
65042: PUSH
65043: LD_INT 0
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: ST_TO_ADDR
// if sci > 1 then
65052: LD_VAR 0 8
65056: PUSH
65057: LD_INT 1
65059: GREATER
65060: IFFALSE 65088
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
65062: LD_ADDR_VAR 0 4
65066: PUSH
65067: LD_VAR 0 4
65071: PUSH
65072: LD_VAR 0 8
65076: PUSH
65077: LD_VAR 0 8
65081: PUSH
65082: LD_INT 1
65084: ARRAY
65085: DIFF
65086: DIFF
65087: ST_TO_ADDR
// if tmp and not sci then
65088: LD_VAR 0 4
65092: PUSH
65093: LD_VAR 0 8
65097: NOT
65098: AND
65099: IFFALSE 65168
// begin sort := SortBySkill ( tmp , 4 ) ;
65101: LD_ADDR_VAR 0 9
65105: PUSH
65106: LD_VAR 0 4
65110: PPUSH
65111: LD_INT 4
65113: PPUSH
65114: CALL 54620 0 2
65118: ST_TO_ADDR
// if sort then
65119: LD_VAR 0 9
65123: IFFALSE 65139
// p := sort [ 1 ] ;
65125: LD_ADDR_VAR 0 11
65129: PUSH
65130: LD_VAR 0 9
65134: PUSH
65135: LD_INT 1
65137: ARRAY
65138: ST_TO_ADDR
// if p then
65139: LD_VAR 0 11
65143: IFFALSE 65168
// result := Replace ( result , 4 , p ) ;
65145: LD_ADDR_VAR 0 2
65149: PUSH
65150: LD_VAR 0 2
65154: PPUSH
65155: LD_INT 4
65157: PPUSH
65158: LD_VAR 0 11
65162: PPUSH
65163: CALL_OW 1
65167: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
65168: LD_ADDR_VAR 0 4
65172: PUSH
65173: LD_VAR 0 4
65177: PUSH
65178: LD_VAR 0 7
65182: DIFF
65183: ST_TO_ADDR
// if tmp and mech < 6 then
65184: LD_VAR 0 4
65188: PUSH
65189: LD_VAR 0 7
65193: PUSH
65194: LD_INT 6
65196: LESS
65197: AND
65198: IFFALSE 65386
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
65200: LD_ADDR_VAR 0 9
65204: PUSH
65205: LD_VAR 0 4
65209: PUSH
65210: LD_VAR 0 8
65214: PUSH
65215: LD_VAR 0 7
65219: UNION
65220: DIFF
65221: PPUSH
65222: LD_INT 3
65224: PPUSH
65225: CALL 54620 0 2
65229: ST_TO_ADDR
// p := [ ] ;
65230: LD_ADDR_VAR 0 11
65234: PUSH
65235: EMPTY
65236: ST_TO_ADDR
// if sort then
65237: LD_VAR 0 9
65241: IFFALSE 65357
// for i = 1 to 6 - mech do
65243: LD_ADDR_VAR 0 3
65247: PUSH
65248: DOUBLE
65249: LD_INT 1
65251: DEC
65252: ST_TO_ADDR
65253: LD_INT 6
65255: PUSH
65256: LD_VAR 0 7
65260: MINUS
65261: PUSH
65262: FOR_TO
65263: IFFALSE 65355
// begin if i = sort then
65265: LD_VAR 0 3
65269: PUSH
65270: LD_VAR 0 9
65274: EQUAL
65275: IFFALSE 65279
// break ;
65277: GO 65355
// if GetClass ( i ) = 3 then
65279: LD_VAR 0 3
65283: PPUSH
65284: CALL_OW 257
65288: PUSH
65289: LD_INT 3
65291: EQUAL
65292: IFFALSE 65296
// continue ;
65294: GO 65262
// p := Insert ( p , p + 1 , sort [ i ] ) ;
65296: LD_ADDR_VAR 0 11
65300: PUSH
65301: LD_VAR 0 11
65305: PPUSH
65306: LD_VAR 0 11
65310: PUSH
65311: LD_INT 1
65313: PLUS
65314: PPUSH
65315: LD_VAR 0 9
65319: PUSH
65320: LD_VAR 0 3
65324: ARRAY
65325: PPUSH
65326: CALL_OW 2
65330: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
65331: LD_ADDR_VAR 0 4
65335: PUSH
65336: LD_VAR 0 4
65340: PUSH
65341: LD_VAR 0 9
65345: PUSH
65346: LD_VAR 0 3
65350: ARRAY
65351: DIFF
65352: ST_TO_ADDR
// end ;
65353: GO 65262
65355: POP
65356: POP
// if p then
65357: LD_VAR 0 11
65361: IFFALSE 65386
// result := Replace ( result , 3 , p ) ;
65363: LD_ADDR_VAR 0 2
65367: PUSH
65368: LD_VAR 0 2
65372: PPUSH
65373: LD_INT 3
65375: PPUSH
65376: LD_VAR 0 11
65380: PPUSH
65381: CALL_OW 1
65385: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
65386: LD_ADDR_VAR 0 4
65390: PUSH
65391: LD_VAR 0 4
65395: PUSH
65396: LD_VAR 0 6
65400: DIFF
65401: ST_TO_ADDR
// if tmp and eng < 6 then
65402: LD_VAR 0 4
65406: PUSH
65407: LD_VAR 0 6
65411: PUSH
65412: LD_INT 6
65414: LESS
65415: AND
65416: IFFALSE 65610
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
65418: LD_ADDR_VAR 0 9
65422: PUSH
65423: LD_VAR 0 4
65427: PUSH
65428: LD_VAR 0 8
65432: PUSH
65433: LD_VAR 0 7
65437: UNION
65438: PUSH
65439: LD_VAR 0 6
65443: UNION
65444: DIFF
65445: PPUSH
65446: LD_INT 2
65448: PPUSH
65449: CALL 54620 0 2
65453: ST_TO_ADDR
// p := [ ] ;
65454: LD_ADDR_VAR 0 11
65458: PUSH
65459: EMPTY
65460: ST_TO_ADDR
// if sort then
65461: LD_VAR 0 9
65465: IFFALSE 65581
// for i = 1 to 6 - eng do
65467: LD_ADDR_VAR 0 3
65471: PUSH
65472: DOUBLE
65473: LD_INT 1
65475: DEC
65476: ST_TO_ADDR
65477: LD_INT 6
65479: PUSH
65480: LD_VAR 0 6
65484: MINUS
65485: PUSH
65486: FOR_TO
65487: IFFALSE 65579
// begin if i = sort then
65489: LD_VAR 0 3
65493: PUSH
65494: LD_VAR 0 9
65498: EQUAL
65499: IFFALSE 65503
// break ;
65501: GO 65579
// if GetClass ( i ) = 2 then
65503: LD_VAR 0 3
65507: PPUSH
65508: CALL_OW 257
65512: PUSH
65513: LD_INT 2
65515: EQUAL
65516: IFFALSE 65520
// continue ;
65518: GO 65486
// p := Insert ( p , p + 1 , sort [ i ] ) ;
65520: LD_ADDR_VAR 0 11
65524: PUSH
65525: LD_VAR 0 11
65529: PPUSH
65530: LD_VAR 0 11
65534: PUSH
65535: LD_INT 1
65537: PLUS
65538: PPUSH
65539: LD_VAR 0 9
65543: PUSH
65544: LD_VAR 0 3
65548: ARRAY
65549: PPUSH
65550: CALL_OW 2
65554: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
65555: LD_ADDR_VAR 0 4
65559: PUSH
65560: LD_VAR 0 4
65564: PUSH
65565: LD_VAR 0 9
65569: PUSH
65570: LD_VAR 0 3
65574: ARRAY
65575: DIFF
65576: ST_TO_ADDR
// end ;
65577: GO 65486
65579: POP
65580: POP
// if p then
65581: LD_VAR 0 11
65585: IFFALSE 65610
// result := Replace ( result , 2 , p ) ;
65587: LD_ADDR_VAR 0 2
65591: PUSH
65592: LD_VAR 0 2
65596: PPUSH
65597: LD_INT 2
65599: PPUSH
65600: LD_VAR 0 11
65604: PPUSH
65605: CALL_OW 1
65609: ST_TO_ADDR
// end ; exit ;
65610: GO 66334
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
65612: LD_EXP 77
65616: PUSH
65617: LD_EXP 76
65621: PUSH
65622: LD_VAR 0 1
65626: ARRAY
65627: ARRAY
65628: NOT
65629: PUSH
65630: LD_EXP 50
65634: PUSH
65635: LD_VAR 0 1
65639: ARRAY
65640: PPUSH
65641: LD_INT 30
65643: PUSH
65644: LD_INT 3
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PPUSH
65651: CALL_OW 72
65655: AND
65656: PUSH
65657: LD_EXP 55
65661: PUSH
65662: LD_VAR 0 1
65666: ARRAY
65667: NOT
65668: AND
65669: IFFALSE 66334
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
65671: LD_ADDR_EXP 92
65675: PUSH
65676: LD_EXP 92
65680: PPUSH
65681: LD_VAR 0 1
65685: PPUSH
65686: LD_INT 6
65688: PPUSH
65689: CALL_OW 1
65693: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
65694: LD_ADDR_VAR 0 2
65698: PUSH
65699: LD_INT 0
65701: PUSH
65702: LD_INT 0
65704: PUSH
65705: LD_INT 0
65707: PUSH
65708: LD_INT 0
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: ST_TO_ADDR
// if sci >= 1 then
65717: LD_VAR 0 8
65721: PUSH
65722: LD_INT 1
65724: GREATEREQUAL
65725: IFFALSE 65747
// tmp := tmp diff sci [ 1 ] ;
65727: LD_ADDR_VAR 0 4
65731: PUSH
65732: LD_VAR 0 4
65736: PUSH
65737: LD_VAR 0 8
65741: PUSH
65742: LD_INT 1
65744: ARRAY
65745: DIFF
65746: ST_TO_ADDR
// if tmp and not sci then
65747: LD_VAR 0 4
65751: PUSH
65752: LD_VAR 0 8
65756: NOT
65757: AND
65758: IFFALSE 65827
// begin sort := SortBySkill ( tmp , 4 ) ;
65760: LD_ADDR_VAR 0 9
65764: PUSH
65765: LD_VAR 0 4
65769: PPUSH
65770: LD_INT 4
65772: PPUSH
65773: CALL 54620 0 2
65777: ST_TO_ADDR
// if sort then
65778: LD_VAR 0 9
65782: IFFALSE 65798
// p := sort [ 1 ] ;
65784: LD_ADDR_VAR 0 11
65788: PUSH
65789: LD_VAR 0 9
65793: PUSH
65794: LD_INT 1
65796: ARRAY
65797: ST_TO_ADDR
// if p then
65798: LD_VAR 0 11
65802: IFFALSE 65827
// result := Replace ( result , 4 , p ) ;
65804: LD_ADDR_VAR 0 2
65808: PUSH
65809: LD_VAR 0 2
65813: PPUSH
65814: LD_INT 4
65816: PPUSH
65817: LD_VAR 0 11
65821: PPUSH
65822: CALL_OW 1
65826: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
65827: LD_ADDR_VAR 0 4
65831: PUSH
65832: LD_VAR 0 4
65836: PUSH
65837: LD_VAR 0 7
65841: DIFF
65842: ST_TO_ADDR
// if tmp and mech < 6 then
65843: LD_VAR 0 4
65847: PUSH
65848: LD_VAR 0 7
65852: PUSH
65853: LD_INT 6
65855: LESS
65856: AND
65857: IFFALSE 66039
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
65859: LD_ADDR_VAR 0 9
65863: PUSH
65864: LD_VAR 0 4
65868: PUSH
65869: LD_VAR 0 7
65873: DIFF
65874: PPUSH
65875: LD_INT 3
65877: PPUSH
65878: CALL 54620 0 2
65882: ST_TO_ADDR
// p := [ ] ;
65883: LD_ADDR_VAR 0 11
65887: PUSH
65888: EMPTY
65889: ST_TO_ADDR
// if sort then
65890: LD_VAR 0 9
65894: IFFALSE 66010
// for i = 1 to 6 - mech do
65896: LD_ADDR_VAR 0 3
65900: PUSH
65901: DOUBLE
65902: LD_INT 1
65904: DEC
65905: ST_TO_ADDR
65906: LD_INT 6
65908: PUSH
65909: LD_VAR 0 7
65913: MINUS
65914: PUSH
65915: FOR_TO
65916: IFFALSE 66008
// begin if i = sort then
65918: LD_VAR 0 3
65922: PUSH
65923: LD_VAR 0 9
65927: EQUAL
65928: IFFALSE 65932
// break ;
65930: GO 66008
// if GetClass ( i ) = 3 then
65932: LD_VAR 0 3
65936: PPUSH
65937: CALL_OW 257
65941: PUSH
65942: LD_INT 3
65944: EQUAL
65945: IFFALSE 65949
// continue ;
65947: GO 65915
// p := Insert ( p , p + 1 , sort [ i ] ) ;
65949: LD_ADDR_VAR 0 11
65953: PUSH
65954: LD_VAR 0 11
65958: PPUSH
65959: LD_VAR 0 11
65963: PUSH
65964: LD_INT 1
65966: PLUS
65967: PPUSH
65968: LD_VAR 0 9
65972: PUSH
65973: LD_VAR 0 3
65977: ARRAY
65978: PPUSH
65979: CALL_OW 2
65983: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
65984: LD_ADDR_VAR 0 4
65988: PUSH
65989: LD_VAR 0 4
65993: PUSH
65994: LD_VAR 0 9
65998: PUSH
65999: LD_VAR 0 3
66003: ARRAY
66004: DIFF
66005: ST_TO_ADDR
// end ;
66006: GO 65915
66008: POP
66009: POP
// if p then
66010: LD_VAR 0 11
66014: IFFALSE 66039
// result := Replace ( result , 3 , p ) ;
66016: LD_ADDR_VAR 0 2
66020: PUSH
66021: LD_VAR 0 2
66025: PPUSH
66026: LD_INT 3
66028: PPUSH
66029: LD_VAR 0 11
66033: PPUSH
66034: CALL_OW 1
66038: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
66039: LD_ADDR_VAR 0 4
66043: PUSH
66044: LD_VAR 0 4
66048: PUSH
66049: LD_VAR 0 6
66053: DIFF
66054: ST_TO_ADDR
// if tmp and eng < 4 then
66055: LD_VAR 0 4
66059: PUSH
66060: LD_VAR 0 6
66064: PUSH
66065: LD_INT 4
66067: LESS
66068: AND
66069: IFFALSE 66259
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
66071: LD_ADDR_VAR 0 9
66075: PUSH
66076: LD_VAR 0 4
66080: PUSH
66081: LD_VAR 0 7
66085: PUSH
66086: LD_VAR 0 6
66090: UNION
66091: DIFF
66092: PPUSH
66093: LD_INT 2
66095: PPUSH
66096: CALL 54620 0 2
66100: ST_TO_ADDR
// p := [ ] ;
66101: LD_ADDR_VAR 0 11
66105: PUSH
66106: EMPTY
66107: ST_TO_ADDR
// if sort then
66108: LD_VAR 0 9
66112: IFFALSE 66228
// for i = 1 to 4 - eng do
66114: LD_ADDR_VAR 0 3
66118: PUSH
66119: DOUBLE
66120: LD_INT 1
66122: DEC
66123: ST_TO_ADDR
66124: LD_INT 4
66126: PUSH
66127: LD_VAR 0 6
66131: MINUS
66132: PUSH
66133: FOR_TO
66134: IFFALSE 66226
// begin if i = sort then
66136: LD_VAR 0 3
66140: PUSH
66141: LD_VAR 0 9
66145: EQUAL
66146: IFFALSE 66150
// break ;
66148: GO 66226
// if GetClass ( i ) = 2 then
66150: LD_VAR 0 3
66154: PPUSH
66155: CALL_OW 257
66159: PUSH
66160: LD_INT 2
66162: EQUAL
66163: IFFALSE 66167
// continue ;
66165: GO 66133
// p := Insert ( p , p + 1 , sort [ i ] ) ;
66167: LD_ADDR_VAR 0 11
66171: PUSH
66172: LD_VAR 0 11
66176: PPUSH
66177: LD_VAR 0 11
66181: PUSH
66182: LD_INT 1
66184: PLUS
66185: PPUSH
66186: LD_VAR 0 9
66190: PUSH
66191: LD_VAR 0 3
66195: ARRAY
66196: PPUSH
66197: CALL_OW 2
66201: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
66202: LD_ADDR_VAR 0 4
66206: PUSH
66207: LD_VAR 0 4
66211: PUSH
66212: LD_VAR 0 9
66216: PUSH
66217: LD_VAR 0 3
66221: ARRAY
66222: DIFF
66223: ST_TO_ADDR
// end ;
66224: GO 66133
66226: POP
66227: POP
// if p then
66228: LD_VAR 0 11
66232: IFFALSE 66257
// result := Replace ( result , 2 , p ) ;
66234: LD_ADDR_VAR 0 2
66238: PUSH
66239: LD_VAR 0 2
66243: PPUSH
66244: LD_INT 2
66246: PPUSH
66247: LD_VAR 0 11
66251: PPUSH
66252: CALL_OW 1
66256: ST_TO_ADDR
// end else
66257: GO 66303
// for i = eng downto 5 do
66259: LD_ADDR_VAR 0 3
66263: PUSH
66264: DOUBLE
66265: LD_VAR 0 6
66269: INC
66270: ST_TO_ADDR
66271: LD_INT 5
66273: PUSH
66274: FOR_DOWNTO
66275: IFFALSE 66301
// tmp := tmp union eng [ i ] ;
66277: LD_ADDR_VAR 0 4
66281: PUSH
66282: LD_VAR 0 4
66286: PUSH
66287: LD_VAR 0 6
66291: PUSH
66292: LD_VAR 0 3
66296: ARRAY
66297: UNION
66298: ST_TO_ADDR
66299: GO 66274
66301: POP
66302: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
66303: LD_ADDR_VAR 0 2
66307: PUSH
66308: LD_VAR 0 2
66312: PPUSH
66313: LD_INT 1
66315: PPUSH
66316: LD_VAR 0 4
66320: PUSH
66321: LD_VAR 0 5
66325: DIFF
66326: PPUSH
66327: CALL_OW 1
66331: ST_TO_ADDR
// exit ;
66332: GO 66334
// end ; end ;
66334: LD_VAR 0 2
66338: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
66339: LD_INT 0
66341: PPUSH
66342: PPUSH
66343: PPUSH
// if not mc_bases then
66344: LD_EXP 50
66348: NOT
66349: IFFALSE 66353
// exit ;
66351: GO 66459
// for i = 1 to mc_bases do
66353: LD_ADDR_VAR 0 2
66357: PUSH
66358: DOUBLE
66359: LD_INT 1
66361: DEC
66362: ST_TO_ADDR
66363: LD_EXP 50
66367: PUSH
66368: FOR_TO
66369: IFFALSE 66450
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
66371: LD_ADDR_VAR 0 3
66375: PUSH
66376: LD_EXP 50
66380: PUSH
66381: LD_VAR 0 2
66385: ARRAY
66386: PPUSH
66387: LD_INT 21
66389: PUSH
66390: LD_INT 3
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 3
66399: PUSH
66400: LD_INT 24
66402: PUSH
66403: LD_INT 1000
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PPUSH
66418: CALL_OW 72
66422: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
66423: LD_ADDR_EXP 51
66427: PUSH
66428: LD_EXP 51
66432: PPUSH
66433: LD_VAR 0 2
66437: PPUSH
66438: LD_VAR 0 3
66442: PPUSH
66443: CALL_OW 1
66447: ST_TO_ADDR
// end ;
66448: GO 66368
66450: POP
66451: POP
// RaiseSailEvent ( 101 ) ;
66452: LD_INT 101
66454: PPUSH
66455: CALL_OW 427
// end ;
66459: LD_VAR 0 1
66463: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
66464: LD_INT 0
66466: PPUSH
66467: PPUSH
66468: PPUSH
66469: PPUSH
66470: PPUSH
66471: PPUSH
66472: PPUSH
// if not mc_bases then
66473: LD_EXP 50
66477: NOT
66478: IFFALSE 66482
// exit ;
66480: GO 67044
// for i = 1 to mc_bases do
66482: LD_ADDR_VAR 0 2
66486: PUSH
66487: DOUBLE
66488: LD_INT 1
66490: DEC
66491: ST_TO_ADDR
66492: LD_EXP 50
66496: PUSH
66497: FOR_TO
66498: IFFALSE 67035
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
66500: LD_ADDR_VAR 0 5
66504: PUSH
66505: LD_EXP 50
66509: PUSH
66510: LD_VAR 0 2
66514: ARRAY
66515: PUSH
66516: LD_EXP 79
66520: PUSH
66521: LD_VAR 0 2
66525: ARRAY
66526: UNION
66527: PPUSH
66528: LD_INT 21
66530: PUSH
66531: LD_INT 1
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 1
66540: PUSH
66541: LD_INT 3
66543: PUSH
66544: LD_INT 54
66546: PUSH
66547: EMPTY
66548: LIST
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 3
66556: PUSH
66557: LD_INT 24
66559: PUSH
66560: LD_INT 1000
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: LIST
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PPUSH
66580: CALL_OW 72
66584: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
66585: LD_ADDR_VAR 0 6
66589: PUSH
66590: LD_EXP 50
66594: PUSH
66595: LD_VAR 0 2
66599: ARRAY
66600: PPUSH
66601: LD_INT 21
66603: PUSH
66604: LD_INT 1
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 1
66613: PUSH
66614: LD_INT 3
66616: PUSH
66617: LD_INT 54
66619: PUSH
66620: EMPTY
66621: LIST
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 3
66629: PUSH
66630: LD_INT 24
66632: PUSH
66633: LD_INT 250
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: LIST
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PPUSH
66653: CALL_OW 72
66657: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
66658: LD_ADDR_VAR 0 7
66662: PUSH
66663: LD_VAR 0 5
66667: PUSH
66668: LD_VAR 0 6
66672: DIFF
66673: ST_TO_ADDR
// if not need_heal_1 then
66674: LD_VAR 0 6
66678: NOT
66679: IFFALSE 66712
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
66681: LD_ADDR_EXP 53
66685: PUSH
66686: LD_EXP 53
66690: PPUSH
66691: LD_VAR 0 2
66695: PUSH
66696: LD_INT 1
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PPUSH
66703: EMPTY
66704: PPUSH
66705: CALL 24362 0 3
66709: ST_TO_ADDR
66710: GO 66782
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
66712: LD_ADDR_EXP 53
66716: PUSH
66717: LD_EXP 53
66721: PPUSH
66722: LD_VAR 0 2
66726: PUSH
66727: LD_INT 1
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PPUSH
66734: LD_EXP 53
66738: PUSH
66739: LD_VAR 0 2
66743: ARRAY
66744: PUSH
66745: LD_INT 1
66747: ARRAY
66748: PPUSH
66749: LD_INT 3
66751: PUSH
66752: LD_INT 24
66754: PUSH
66755: LD_INT 1000
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PPUSH
66766: CALL_OW 72
66770: PUSH
66771: LD_VAR 0 6
66775: UNION
66776: PPUSH
66777: CALL 24362 0 3
66781: ST_TO_ADDR
// if not need_heal_2 then
66782: LD_VAR 0 7
66786: NOT
66787: IFFALSE 66820
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
66789: LD_ADDR_EXP 53
66793: PUSH
66794: LD_EXP 53
66798: PPUSH
66799: LD_VAR 0 2
66803: PUSH
66804: LD_INT 2
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: PPUSH
66811: EMPTY
66812: PPUSH
66813: CALL 24362 0 3
66817: ST_TO_ADDR
66818: GO 66852
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
66820: LD_ADDR_EXP 53
66824: PUSH
66825: LD_EXP 53
66829: PPUSH
66830: LD_VAR 0 2
66834: PUSH
66835: LD_INT 2
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: PPUSH
66842: LD_VAR 0 7
66846: PPUSH
66847: CALL 24362 0 3
66851: ST_TO_ADDR
// if need_heal_2 then
66852: LD_VAR 0 7
66856: IFFALSE 67017
// for j in need_heal_2 do
66858: LD_ADDR_VAR 0 3
66862: PUSH
66863: LD_VAR 0 7
66867: PUSH
66868: FOR_IN
66869: IFFALSE 67015
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
66871: LD_ADDR_VAR 0 5
66875: PUSH
66876: LD_EXP 50
66880: PUSH
66881: LD_VAR 0 2
66885: ARRAY
66886: PPUSH
66887: LD_INT 2
66889: PUSH
66890: LD_INT 30
66892: PUSH
66893: LD_INT 6
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 30
66902: PUSH
66903: LD_INT 7
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 30
66912: PUSH
66913: LD_INT 8
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 30
66922: PUSH
66923: LD_INT 0
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 30
66932: PUSH
66933: LD_INT 1
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: PPUSH
66948: CALL_OW 72
66952: ST_TO_ADDR
// if tmp then
66953: LD_VAR 0 5
66957: IFFALSE 67013
// begin k := NearestUnitToUnit ( tmp , j ) ;
66959: LD_ADDR_VAR 0 4
66963: PUSH
66964: LD_VAR 0 5
66968: PPUSH
66969: LD_VAR 0 3
66973: PPUSH
66974: CALL_OW 74
66978: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
66979: LD_VAR 0 3
66983: PPUSH
66984: LD_VAR 0 4
66988: PPUSH
66989: CALL_OW 296
66993: PUSH
66994: LD_INT 5
66996: GREATER
66997: IFFALSE 67013
// ComMoveToNearbyEntrance ( j , k ) ;
66999: LD_VAR 0 3
67003: PPUSH
67004: LD_VAR 0 4
67008: PPUSH
67009: CALL 56981 0 2
// end ; end ;
67013: GO 66868
67015: POP
67016: POP
// if not need_heal_1 and not need_heal_2 then
67017: LD_VAR 0 6
67021: NOT
67022: PUSH
67023: LD_VAR 0 7
67027: NOT
67028: AND
67029: IFFALSE 67033
// continue ;
67031: GO 66497
// end ;
67033: GO 66497
67035: POP
67036: POP
// RaiseSailEvent ( 102 ) ;
67037: LD_INT 102
67039: PPUSH
67040: CALL_OW 427
// end ;
67044: LD_VAR 0 1
67048: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
67049: LD_INT 0
67051: PPUSH
67052: PPUSH
67053: PPUSH
67054: PPUSH
67055: PPUSH
67056: PPUSH
67057: PPUSH
67058: PPUSH
// if not mc_bases then
67059: LD_EXP 50
67063: NOT
67064: IFFALSE 67068
// exit ;
67066: GO 67929
// for i = 1 to mc_bases do
67068: LD_ADDR_VAR 0 2
67072: PUSH
67073: DOUBLE
67074: LD_INT 1
67076: DEC
67077: ST_TO_ADDR
67078: LD_EXP 50
67082: PUSH
67083: FOR_TO
67084: IFFALSE 67927
// begin if not mc_building_need_repair [ i ] then
67086: LD_EXP 51
67090: PUSH
67091: LD_VAR 0 2
67095: ARRAY
67096: NOT
67097: IFFALSE 67284
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] ] ] ) ;
67099: LD_ADDR_VAR 0 6
67103: PUSH
67104: LD_EXP 69
67108: PUSH
67109: LD_VAR 0 2
67113: ARRAY
67114: PPUSH
67115: LD_INT 3
67117: PUSH
67118: LD_INT 24
67120: PUSH
67121: LD_INT 1000
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 2
67134: PUSH
67135: LD_INT 34
67137: PUSH
67138: LD_INT 13
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 34
67147: PUSH
67148: LD_INT 52
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: LD_INT 34
67157: PUSH
67158: LD_EXP 35
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PPUSH
67177: CALL_OW 72
67181: ST_TO_ADDR
// if cranes then
67182: LD_VAR 0 6
67186: IFFALSE 67248
// for j in cranes do
67188: LD_ADDR_VAR 0 3
67192: PUSH
67193: LD_VAR 0 6
67197: PUSH
67198: FOR_IN
67199: IFFALSE 67246
// if not IsInArea ( j , mc_parking [ i ] ) then
67201: LD_VAR 0 3
67205: PPUSH
67206: LD_EXP 74
67210: PUSH
67211: LD_VAR 0 2
67215: ARRAY
67216: PPUSH
67217: CALL_OW 308
67221: NOT
67222: IFFALSE 67244
// ComMoveToArea ( j , mc_parking [ i ] ) ;
67224: LD_VAR 0 3
67228: PPUSH
67229: LD_EXP 74
67233: PUSH
67234: LD_VAR 0 2
67238: ARRAY
67239: PPUSH
67240: CALL_OW 113
67244: GO 67198
67246: POP
67247: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
67248: LD_ADDR_EXP 52
67252: PUSH
67253: LD_EXP 52
67257: PPUSH
67258: LD_VAR 0 2
67262: PPUSH
67263: EMPTY
67264: PPUSH
67265: CALL_OW 1
67269: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
67270: LD_VAR 0 2
67274: PPUSH
67275: LD_INT 101
67277: PPUSH
67278: CALL 62172 0 2
// continue ;
67282: GO 67083
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
67284: LD_ADDR_EXP 56
67288: PUSH
67289: LD_EXP 56
67293: PPUSH
67294: LD_VAR 0 2
67298: PPUSH
67299: EMPTY
67300: PPUSH
67301: CALL_OW 1
67305: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
67306: LD_VAR 0 2
67310: PPUSH
67311: LD_INT 103
67313: PPUSH
67314: CALL 62172 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
67318: LD_ADDR_VAR 0 5
67322: PUSH
67323: LD_EXP 50
67327: PUSH
67328: LD_VAR 0 2
67332: ARRAY
67333: PUSH
67334: LD_EXP 79
67338: PUSH
67339: LD_VAR 0 2
67343: ARRAY
67344: UNION
67345: PPUSH
67346: LD_INT 2
67348: PUSH
67349: LD_INT 25
67351: PUSH
67352: LD_INT 2
67354: PUSH
67355: EMPTY
67356: LIST
67357: LIST
67358: PUSH
67359: LD_INT 25
67361: PUSH
67362: LD_INT 16
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: LIST
67373: PUSH
67374: EMPTY
67375: LIST
67376: PPUSH
67377: CALL_OW 72
67381: PUSH
67382: LD_EXP 53
67386: PUSH
67387: LD_VAR 0 2
67391: ARRAY
67392: PUSH
67393: LD_INT 1
67395: ARRAY
67396: PUSH
67397: LD_EXP 53
67401: PUSH
67402: LD_VAR 0 2
67406: ARRAY
67407: PUSH
67408: LD_INT 2
67410: ARRAY
67411: UNION
67412: DIFF
67413: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] ] ) ;
67414: LD_ADDR_VAR 0 6
67418: PUSH
67419: LD_EXP 69
67423: PUSH
67424: LD_VAR 0 2
67428: ARRAY
67429: PPUSH
67430: LD_INT 2
67432: PUSH
67433: LD_INT 34
67435: PUSH
67436: LD_INT 13
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: PUSH
67443: LD_INT 34
67445: PUSH
67446: LD_INT 52
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: PUSH
67453: LD_INT 34
67455: PUSH
67456: LD_EXP 35
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: PPUSH
67471: CALL_OW 72
67475: ST_TO_ADDR
// if cranes then
67476: LD_VAR 0 6
67480: IFFALSE 67616
// begin for j in cranes do
67482: LD_ADDR_VAR 0 3
67486: PUSH
67487: LD_VAR 0 6
67491: PUSH
67492: FOR_IN
67493: IFFALSE 67614
// begin if GetLives ( j ) = 1000 and not HasTask ( j ) then
67495: LD_VAR 0 3
67499: PPUSH
67500: CALL_OW 256
67504: PUSH
67505: LD_INT 1000
67507: EQUAL
67508: PUSH
67509: LD_VAR 0 3
67513: PPUSH
67514: CALL_OW 314
67518: NOT
67519: AND
67520: IFFALSE 67554
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
67522: LD_VAR 0 3
67526: PPUSH
67527: LD_EXP 51
67531: PUSH
67532: LD_VAR 0 2
67536: ARRAY
67537: PPUSH
67538: LD_VAR 0 3
67542: PPUSH
67543: CALL_OW 74
67547: PPUSH
67548: CALL_OW 130
67552: GO 67612
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
67554: LD_VAR 0 3
67558: PPUSH
67559: CALL_OW 256
67563: PUSH
67564: LD_INT 500
67566: LESS
67567: PUSH
67568: LD_VAR 0 3
67572: PPUSH
67573: LD_EXP 74
67577: PUSH
67578: LD_VAR 0 2
67582: ARRAY
67583: PPUSH
67584: CALL_OW 308
67588: NOT
67589: AND
67590: IFFALSE 67612
// ComMoveToArea ( j , mc_parking [ i ] ) ;
67592: LD_VAR 0 3
67596: PPUSH
67597: LD_EXP 74
67601: PUSH
67602: LD_VAR 0 2
67606: ARRAY
67607: PPUSH
67608: CALL_OW 113
// end ;
67612: GO 67492
67614: POP
67615: POP
// end ; if tmp > 3 then
67616: LD_VAR 0 5
67620: PUSH
67621: LD_INT 3
67623: GREATER
67624: IFFALSE 67644
// tmp := ShrinkArray ( tmp , 4 ) ;
67626: LD_ADDR_VAR 0 5
67630: PUSH
67631: LD_VAR 0 5
67635: PPUSH
67636: LD_INT 4
67638: PPUSH
67639: CALL 56429 0 2
67643: ST_TO_ADDR
// if not tmp then
67644: LD_VAR 0 5
67648: NOT
67649: IFFALSE 67653
// continue ;
67651: GO 67083
// for j in tmp do
67653: LD_ADDR_VAR 0 3
67657: PUSH
67658: LD_VAR 0 5
67662: PUSH
67663: FOR_IN
67664: IFFALSE 67923
// begin if IsInUnit ( j ) then
67666: LD_VAR 0 3
67670: PPUSH
67671: CALL_OW 310
67675: IFFALSE 67686
// ComExitBuilding ( j ) ;
67677: LD_VAR 0 3
67681: PPUSH
67682: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
67686: LD_VAR 0 3
67690: PUSH
67691: LD_EXP 52
67695: PUSH
67696: LD_VAR 0 2
67700: ARRAY
67701: IN
67702: NOT
67703: IFFALSE 67761
// begin SetTag ( j , 101 ) ;
67705: LD_VAR 0 3
67709: PPUSH
67710: LD_INT 101
67712: PPUSH
67713: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
67717: LD_ADDR_EXP 52
67721: PUSH
67722: LD_EXP 52
67726: PPUSH
67727: LD_VAR 0 2
67731: PUSH
67732: LD_EXP 52
67736: PUSH
67737: LD_VAR 0 2
67741: ARRAY
67742: PUSH
67743: LD_INT 1
67745: PLUS
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PPUSH
67751: LD_VAR 0 3
67755: PPUSH
67756: CALL 24362 0 3
67760: ST_TO_ADDR
// end ; wait ( 1 ) ;
67761: LD_INT 1
67763: PPUSH
67764: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
67768: LD_ADDR_VAR 0 7
67772: PUSH
67773: LD_EXP 51
67777: PUSH
67778: LD_VAR 0 2
67782: ARRAY
67783: ST_TO_ADDR
// if mc_scan [ i ] then
67784: LD_EXP 73
67788: PUSH
67789: LD_VAR 0 2
67793: ARRAY
67794: IFFALSE 67856
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
67796: LD_ADDR_VAR 0 7
67800: PUSH
67801: LD_EXP 51
67805: PUSH
67806: LD_VAR 0 2
67810: ARRAY
67811: PPUSH
67812: LD_INT 3
67814: PUSH
67815: LD_INT 30
67817: PUSH
67818: LD_INT 32
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 30
67827: PUSH
67828: LD_INT 33
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 30
67837: PUSH
67838: LD_INT 31
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: PPUSH
67851: CALL_OW 72
67855: ST_TO_ADDR
// if not to_repair_tmp then
67856: LD_VAR 0 7
67860: NOT
67861: IFFALSE 67865
// continue ;
67863: GO 67663
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
67865: LD_ADDR_VAR 0 8
67869: PUSH
67870: LD_VAR 0 7
67874: PPUSH
67875: LD_VAR 0 3
67879: PPUSH
67880: CALL_OW 74
67884: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 10 then
67885: LD_VAR 0 8
67889: PPUSH
67890: LD_INT 16
67892: PPUSH
67893: CALL 26961 0 2
67897: PUSH
67898: LD_INT 4
67900: ARRAY
67901: PUSH
67902: LD_INT 10
67904: LESS
67905: IFFALSE 67921
// ComRepairBuilding ( j , to_repair ) ;
67907: LD_VAR 0 3
67911: PPUSH
67912: LD_VAR 0 8
67916: PPUSH
67917: CALL_OW 130
// end ;
67921: GO 67663
67923: POP
67924: POP
// end ;
67925: GO 67083
67927: POP
67928: POP
// end ;
67929: LD_VAR 0 1
67933: RET
// export function MC_Heal ; var i , j , tmp ; begin
67934: LD_INT 0
67936: PPUSH
67937: PPUSH
67938: PPUSH
67939: PPUSH
// if not mc_bases then
67940: LD_EXP 50
67944: NOT
67945: IFFALSE 67949
// exit ;
67947: GO 68351
// for i = 1 to mc_bases do
67949: LD_ADDR_VAR 0 2
67953: PUSH
67954: DOUBLE
67955: LD_INT 1
67957: DEC
67958: ST_TO_ADDR
67959: LD_EXP 50
67963: PUSH
67964: FOR_TO
67965: IFFALSE 68349
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
67967: LD_EXP 53
67971: PUSH
67972: LD_VAR 0 2
67976: ARRAY
67977: PUSH
67978: LD_INT 1
67980: ARRAY
67981: NOT
67982: PUSH
67983: LD_EXP 53
67987: PUSH
67988: LD_VAR 0 2
67992: ARRAY
67993: PUSH
67994: LD_INT 2
67996: ARRAY
67997: NOT
67998: AND
67999: IFFALSE 68037
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
68001: LD_ADDR_EXP 54
68005: PUSH
68006: LD_EXP 54
68010: PPUSH
68011: LD_VAR 0 2
68015: PPUSH
68016: EMPTY
68017: PPUSH
68018: CALL_OW 1
68022: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
68023: LD_VAR 0 2
68027: PPUSH
68028: LD_INT 102
68030: PPUSH
68031: CALL 62172 0 2
// continue ;
68035: GO 67964
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
68037: LD_ADDR_VAR 0 4
68041: PUSH
68042: LD_EXP 50
68046: PUSH
68047: LD_VAR 0 2
68051: ARRAY
68052: PPUSH
68053: LD_INT 25
68055: PUSH
68056: LD_INT 4
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: PPUSH
68063: CALL_OW 72
68067: ST_TO_ADDR
// if not tmp then
68068: LD_VAR 0 4
68072: NOT
68073: IFFALSE 68077
// continue ;
68075: GO 67964
// if mc_taming [ i ] then
68077: LD_EXP 81
68081: PUSH
68082: LD_VAR 0 2
68086: ARRAY
68087: IFFALSE 68111
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
68089: LD_ADDR_EXP 81
68093: PUSH
68094: LD_EXP 81
68098: PPUSH
68099: LD_VAR 0 2
68103: PPUSH
68104: EMPTY
68105: PPUSH
68106: CALL_OW 1
68110: ST_TO_ADDR
// for j in tmp do
68111: LD_ADDR_VAR 0 3
68115: PUSH
68116: LD_VAR 0 4
68120: PUSH
68121: FOR_IN
68122: IFFALSE 68345
// begin if IsInUnit ( j ) then
68124: LD_VAR 0 3
68128: PPUSH
68129: CALL_OW 310
68133: IFFALSE 68144
// ComExitBuilding ( j ) ;
68135: LD_VAR 0 3
68139: PPUSH
68140: CALL_OW 122
// if not j in mc_healers [ i ] then
68144: LD_VAR 0 3
68148: PUSH
68149: LD_EXP 54
68153: PUSH
68154: LD_VAR 0 2
68158: ARRAY
68159: IN
68160: NOT
68161: IFFALSE 68207
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
68163: LD_ADDR_EXP 54
68167: PUSH
68168: LD_EXP 54
68172: PPUSH
68173: LD_VAR 0 2
68177: PUSH
68178: LD_EXP 54
68182: PUSH
68183: LD_VAR 0 2
68187: ARRAY
68188: PUSH
68189: LD_INT 1
68191: PLUS
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PPUSH
68197: LD_VAR 0 3
68201: PPUSH
68202: CALL 24362 0 3
68206: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
68207: LD_VAR 0 3
68211: PPUSH
68212: CALL_OW 110
68216: PUSH
68217: LD_INT 102
68219: NONEQUAL
68220: IFFALSE 68234
// SetTag ( j , 102 ) ;
68222: LD_VAR 0 3
68226: PPUSH
68227: LD_INT 102
68229: PPUSH
68230: CALL_OW 109
// Wait ( 3 ) ;
68234: LD_INT 3
68236: PPUSH
68237: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
68241: LD_EXP 53
68245: PUSH
68246: LD_VAR 0 2
68250: ARRAY
68251: PUSH
68252: LD_INT 1
68254: ARRAY
68255: IFFALSE 68287
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
68257: LD_VAR 0 3
68261: PPUSH
68262: LD_EXP 53
68266: PUSH
68267: LD_VAR 0 2
68271: ARRAY
68272: PUSH
68273: LD_INT 1
68275: ARRAY
68276: PUSH
68277: LD_INT 1
68279: ARRAY
68280: PPUSH
68281: CALL_OW 128
68285: GO 68343
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
68287: LD_VAR 0 3
68291: PPUSH
68292: CALL_OW 314
68296: NOT
68297: PUSH
68298: LD_EXP 53
68302: PUSH
68303: LD_VAR 0 2
68307: ARRAY
68308: PUSH
68309: LD_INT 2
68311: ARRAY
68312: AND
68313: IFFALSE 68343
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
68315: LD_VAR 0 3
68319: PPUSH
68320: LD_EXP 53
68324: PUSH
68325: LD_VAR 0 2
68329: ARRAY
68330: PUSH
68331: LD_INT 2
68333: ARRAY
68334: PUSH
68335: LD_INT 1
68337: ARRAY
68338: PPUSH
68339: CALL_OW 128
// end ;
68343: GO 68121
68345: POP
68346: POP
// end ;
68347: GO 67964
68349: POP
68350: POP
// end ;
68351: LD_VAR 0 1
68355: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
68356: LD_INT 0
68358: PPUSH
68359: PPUSH
68360: PPUSH
68361: PPUSH
68362: PPUSH
// if not mc_bases then
68363: LD_EXP 50
68367: NOT
68368: IFFALSE 68372
// exit ;
68370: GO 69543
// for i = 1 to mc_bases do
68372: LD_ADDR_VAR 0 2
68376: PUSH
68377: DOUBLE
68378: LD_INT 1
68380: DEC
68381: ST_TO_ADDR
68382: LD_EXP 50
68386: PUSH
68387: FOR_TO
68388: IFFALSE 69541
// begin if mc_scan [ i ] then
68390: LD_EXP 73
68394: PUSH
68395: LD_VAR 0 2
68399: ARRAY
68400: IFFALSE 68404
// continue ;
68402: GO 68387
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
68404: LD_EXP 55
68408: PUSH
68409: LD_VAR 0 2
68413: ARRAY
68414: NOT
68415: PUSH
68416: LD_EXP 57
68420: PUSH
68421: LD_VAR 0 2
68425: ARRAY
68426: NOT
68427: AND
68428: PUSH
68429: LD_EXP 56
68433: PUSH
68434: LD_VAR 0 2
68438: ARRAY
68439: AND
68440: IFFALSE 68478
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
68442: LD_ADDR_EXP 56
68446: PUSH
68447: LD_EXP 56
68451: PPUSH
68452: LD_VAR 0 2
68456: PPUSH
68457: EMPTY
68458: PPUSH
68459: CALL_OW 1
68463: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
68464: LD_VAR 0 2
68468: PPUSH
68469: LD_INT 103
68471: PPUSH
68472: CALL 62172 0 2
// continue ;
68476: GO 68387
// end ; if mc_construct_list [ i ] then
68478: LD_EXP 57
68482: PUSH
68483: LD_VAR 0 2
68487: ARRAY
68488: IFFALSE 68708
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
68490: LD_ADDR_VAR 0 4
68494: PUSH
68495: LD_EXP 50
68499: PUSH
68500: LD_VAR 0 2
68504: ARRAY
68505: PPUSH
68506: LD_INT 25
68508: PUSH
68509: LD_INT 2
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: PPUSH
68516: CALL_OW 72
68520: PUSH
68521: LD_EXP 52
68525: PUSH
68526: LD_VAR 0 2
68530: ARRAY
68531: DIFF
68532: ST_TO_ADDR
// if not tmp then
68533: LD_VAR 0 4
68537: NOT
68538: IFFALSE 68542
// continue ;
68540: GO 68387
// for j in tmp do
68542: LD_ADDR_VAR 0 3
68546: PUSH
68547: LD_VAR 0 4
68551: PUSH
68552: FOR_IN
68553: IFFALSE 68704
// begin if not mc_builders [ i ] then
68555: LD_EXP 56
68559: PUSH
68560: LD_VAR 0 2
68564: ARRAY
68565: NOT
68566: IFFALSE 68624
// begin SetTag ( j , 103 ) ;
68568: LD_VAR 0 3
68572: PPUSH
68573: LD_INT 103
68575: PPUSH
68576: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
68580: LD_ADDR_EXP 56
68584: PUSH
68585: LD_EXP 56
68589: PPUSH
68590: LD_VAR 0 2
68594: PUSH
68595: LD_EXP 56
68599: PUSH
68600: LD_VAR 0 2
68604: ARRAY
68605: PUSH
68606: LD_INT 1
68608: PLUS
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PPUSH
68614: LD_VAR 0 3
68618: PPUSH
68619: CALL 24362 0 3
68623: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
68624: LD_VAR 0 3
68628: PPUSH
68629: CALL_OW 310
68633: IFFALSE 68644
// ComExitBuilding ( j ) ;
68635: LD_VAR 0 3
68639: PPUSH
68640: CALL_OW 122
// wait ( 3 ) ;
68644: LD_INT 3
68646: PPUSH
68647: CALL_OW 67
// if not mc_construct_list [ i ] then
68651: LD_EXP 57
68655: PUSH
68656: LD_VAR 0 2
68660: ARRAY
68661: NOT
68662: IFFALSE 68666
// break ;
68664: GO 68704
// if not HasTask ( j ) then
68666: LD_VAR 0 3
68670: PPUSH
68671: CALL_OW 314
68675: NOT
68676: IFFALSE 68702
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
68678: LD_VAR 0 3
68682: PPUSH
68683: LD_EXP 57
68687: PUSH
68688: LD_VAR 0 2
68692: ARRAY
68693: PUSH
68694: LD_INT 1
68696: ARRAY
68697: PPUSH
68698: CALL 27225 0 2
// end ;
68702: GO 68552
68704: POP
68705: POP
// end else
68706: GO 69539
// if mc_build_list [ i ] then
68708: LD_EXP 55
68712: PUSH
68713: LD_VAR 0 2
68717: ARRAY
68718: IFFALSE 69539
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
68720: LD_ADDR_VAR 0 5
68724: PUSH
68725: LD_EXP 50
68729: PUSH
68730: LD_VAR 0 2
68734: ARRAY
68735: PPUSH
68736: LD_INT 2
68738: PUSH
68739: LD_INT 30
68741: PUSH
68742: LD_INT 0
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: PUSH
68749: LD_INT 30
68751: PUSH
68752: LD_INT 1
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: LIST
68763: PPUSH
68764: CALL_OW 72
68768: ST_TO_ADDR
// if depot then
68769: LD_VAR 0 5
68773: IFFALSE 68791
// depot := depot [ 1 ] else
68775: LD_ADDR_VAR 0 5
68779: PUSH
68780: LD_VAR 0 5
68784: PUSH
68785: LD_INT 1
68787: ARRAY
68788: ST_TO_ADDR
68789: GO 68799
// depot := 0 ;
68791: LD_ADDR_VAR 0 5
68795: PUSH
68796: LD_INT 0
68798: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
68799: LD_EXP 55
68803: PUSH
68804: LD_VAR 0 2
68808: ARRAY
68809: PUSH
68810: LD_INT 1
68812: ARRAY
68813: PUSH
68814: LD_INT 1
68816: ARRAY
68817: PPUSH
68818: CALL 27049 0 1
68822: PUSH
68823: LD_EXP 50
68827: PUSH
68828: LD_VAR 0 2
68832: ARRAY
68833: PPUSH
68834: LD_INT 2
68836: PUSH
68837: LD_INT 30
68839: PUSH
68840: LD_INT 2
68842: PUSH
68843: EMPTY
68844: LIST
68845: LIST
68846: PUSH
68847: LD_INT 30
68849: PUSH
68850: LD_INT 3
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: LIST
68861: PPUSH
68862: CALL_OW 72
68866: NOT
68867: AND
68868: IFFALSE 68973
// begin for j = 1 to mc_build_list [ i ] do
68870: LD_ADDR_VAR 0 3
68874: PUSH
68875: DOUBLE
68876: LD_INT 1
68878: DEC
68879: ST_TO_ADDR
68880: LD_EXP 55
68884: PUSH
68885: LD_VAR 0 2
68889: ARRAY
68890: PUSH
68891: FOR_TO
68892: IFFALSE 68971
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
68894: LD_EXP 55
68898: PUSH
68899: LD_VAR 0 2
68903: ARRAY
68904: PUSH
68905: LD_VAR 0 3
68909: ARRAY
68910: PUSH
68911: LD_INT 1
68913: ARRAY
68914: PUSH
68915: LD_INT 2
68917: EQUAL
68918: IFFALSE 68969
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
68920: LD_ADDR_EXP 55
68924: PUSH
68925: LD_EXP 55
68929: PPUSH
68930: LD_VAR 0 2
68934: PPUSH
68935: LD_EXP 55
68939: PUSH
68940: LD_VAR 0 2
68944: ARRAY
68945: PPUSH
68946: LD_VAR 0 3
68950: PPUSH
68951: LD_INT 1
68953: PPUSH
68954: LD_INT 0
68956: PPUSH
68957: CALL 23780 0 4
68961: PPUSH
68962: CALL_OW 1
68966: ST_TO_ADDR
// break ;
68967: GO 68971
// end ;
68969: GO 68891
68971: POP
68972: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
68973: LD_EXP 55
68977: PUSH
68978: LD_VAR 0 2
68982: ARRAY
68983: PUSH
68984: LD_INT 1
68986: ARRAY
68987: PUSH
68988: LD_INT 1
68990: ARRAY
68991: PUSH
68992: LD_INT 0
68994: EQUAL
68995: PUSH
68996: LD_VAR 0 5
69000: PUSH
69001: LD_VAR 0 5
69005: PPUSH
69006: LD_EXP 55
69010: PUSH
69011: LD_VAR 0 2
69015: ARRAY
69016: PUSH
69017: LD_INT 1
69019: ARRAY
69020: PUSH
69021: LD_INT 1
69023: ARRAY
69024: PPUSH
69025: LD_EXP 55
69029: PUSH
69030: LD_VAR 0 2
69034: ARRAY
69035: PUSH
69036: LD_INT 1
69038: ARRAY
69039: PUSH
69040: LD_INT 2
69042: ARRAY
69043: PPUSH
69044: LD_EXP 55
69048: PUSH
69049: LD_VAR 0 2
69053: ARRAY
69054: PUSH
69055: LD_INT 1
69057: ARRAY
69058: PUSH
69059: LD_INT 3
69061: ARRAY
69062: PPUSH
69063: LD_EXP 55
69067: PUSH
69068: LD_VAR 0 2
69072: ARRAY
69073: PUSH
69074: LD_INT 1
69076: ARRAY
69077: PUSH
69078: LD_INT 4
69080: ARRAY
69081: PPUSH
69082: CALL 32466 0 5
69086: AND
69087: OR
69088: IFFALSE 69369
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
69090: LD_ADDR_VAR 0 4
69094: PUSH
69095: LD_EXP 50
69099: PUSH
69100: LD_VAR 0 2
69104: ARRAY
69105: PPUSH
69106: LD_INT 25
69108: PUSH
69109: LD_INT 2
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PPUSH
69116: CALL_OW 72
69120: PUSH
69121: LD_EXP 52
69125: PUSH
69126: LD_VAR 0 2
69130: ARRAY
69131: DIFF
69132: ST_TO_ADDR
// if not tmp then
69133: LD_VAR 0 4
69137: NOT
69138: IFFALSE 69142
// continue ;
69140: GO 68387
// for j in tmp do
69142: LD_ADDR_VAR 0 3
69146: PUSH
69147: LD_VAR 0 4
69151: PUSH
69152: FOR_IN
69153: IFFALSE 69365
// begin if not mc_builders [ i ] then
69155: LD_EXP 56
69159: PUSH
69160: LD_VAR 0 2
69164: ARRAY
69165: NOT
69166: IFFALSE 69224
// begin SetTag ( j , 103 ) ;
69168: LD_VAR 0 3
69172: PPUSH
69173: LD_INT 103
69175: PPUSH
69176: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
69180: LD_ADDR_EXP 56
69184: PUSH
69185: LD_EXP 56
69189: PPUSH
69190: LD_VAR 0 2
69194: PUSH
69195: LD_EXP 56
69199: PUSH
69200: LD_VAR 0 2
69204: ARRAY
69205: PUSH
69206: LD_INT 1
69208: PLUS
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PPUSH
69214: LD_VAR 0 3
69218: PPUSH
69219: CALL 24362 0 3
69223: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
69224: LD_VAR 0 3
69228: PPUSH
69229: CALL_OW 310
69233: IFFALSE 69244
// ComExitBuilding ( j ) ;
69235: LD_VAR 0 3
69239: PPUSH
69240: CALL_OW 122
// wait ( 3 ) ;
69244: LD_INT 3
69246: PPUSH
69247: CALL_OW 67
// if not mc_build_list [ i ] then
69251: LD_EXP 55
69255: PUSH
69256: LD_VAR 0 2
69260: ARRAY
69261: NOT
69262: IFFALSE 69266
// break ;
69264: GO 69365
// if not HasTask ( j ) then
69266: LD_VAR 0 3
69270: PPUSH
69271: CALL_OW 314
69275: NOT
69276: IFFALSE 69363
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
69278: LD_VAR 0 3
69282: PPUSH
69283: LD_EXP 55
69287: PUSH
69288: LD_VAR 0 2
69292: ARRAY
69293: PUSH
69294: LD_INT 1
69296: ARRAY
69297: PUSH
69298: LD_INT 1
69300: ARRAY
69301: PPUSH
69302: LD_EXP 55
69306: PUSH
69307: LD_VAR 0 2
69311: ARRAY
69312: PUSH
69313: LD_INT 1
69315: ARRAY
69316: PUSH
69317: LD_INT 2
69319: ARRAY
69320: PPUSH
69321: LD_EXP 55
69325: PUSH
69326: LD_VAR 0 2
69330: ARRAY
69331: PUSH
69332: LD_INT 1
69334: ARRAY
69335: PUSH
69336: LD_INT 3
69338: ARRAY
69339: PPUSH
69340: LD_EXP 55
69344: PUSH
69345: LD_VAR 0 2
69349: ARRAY
69350: PUSH
69351: LD_INT 1
69353: ARRAY
69354: PUSH
69355: LD_INT 4
69357: ARRAY
69358: PPUSH
69359: CALL_OW 145
// end ;
69363: GO 69152
69365: POP
69366: POP
// end else
69367: GO 69539
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] , UnitFilter ( mc_bases [ i ] , [ f_type , unit_building ] ) , [ ] ) then
69369: LD_EXP 50
69373: PUSH
69374: LD_VAR 0 2
69378: ARRAY
69379: PPUSH
69380: LD_EXP 55
69384: PUSH
69385: LD_VAR 0 2
69389: ARRAY
69390: PUSH
69391: LD_INT 1
69393: ARRAY
69394: PUSH
69395: LD_INT 1
69397: ARRAY
69398: PPUSH
69399: LD_EXP 55
69403: PUSH
69404: LD_VAR 0 2
69408: ARRAY
69409: PUSH
69410: LD_INT 1
69412: ARRAY
69413: PUSH
69414: LD_INT 2
69416: ARRAY
69417: PPUSH
69418: LD_EXP 55
69422: PUSH
69423: LD_VAR 0 2
69427: ARRAY
69428: PUSH
69429: LD_INT 1
69431: ARRAY
69432: PUSH
69433: LD_INT 3
69435: ARRAY
69436: PPUSH
69437: LD_EXP 55
69441: PUSH
69442: LD_VAR 0 2
69446: ARRAY
69447: PUSH
69448: LD_INT 1
69450: ARRAY
69451: PUSH
69452: LD_INT 4
69454: ARRAY
69455: PPUSH
69456: LD_EXP 50
69460: PUSH
69461: LD_VAR 0 2
69465: ARRAY
69466: PPUSH
69467: LD_INT 21
69469: PUSH
69470: LD_INT 3
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: PPUSH
69477: CALL_OW 72
69481: PPUSH
69482: EMPTY
69483: PPUSH
69484: CALL 31216 0 7
69488: NOT
69489: IFFALSE 69539
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
69491: LD_ADDR_EXP 55
69495: PUSH
69496: LD_EXP 55
69500: PPUSH
69501: LD_VAR 0 2
69505: PPUSH
69506: LD_EXP 55
69510: PUSH
69511: LD_VAR 0 2
69515: ARRAY
69516: PPUSH
69517: LD_INT 1
69519: PPUSH
69520: LD_INT 1
69522: NEG
69523: PPUSH
69524: LD_INT 0
69526: PPUSH
69527: CALL 23780 0 4
69531: PPUSH
69532: CALL_OW 1
69536: ST_TO_ADDR
// continue ;
69537: GO 68387
// end ; end ; end ;
69539: GO 68387
69541: POP
69542: POP
// end ;
69543: LD_VAR 0 1
69547: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
69548: LD_INT 0
69550: PPUSH
69551: PPUSH
69552: PPUSH
69553: PPUSH
69554: PPUSH
69555: PPUSH
// if not mc_bases then
69556: LD_EXP 50
69560: NOT
69561: IFFALSE 69565
// exit ;
69563: GO 69992
// for i = 1 to mc_bases do
69565: LD_ADDR_VAR 0 2
69569: PUSH
69570: DOUBLE
69571: LD_INT 1
69573: DEC
69574: ST_TO_ADDR
69575: LD_EXP 50
69579: PUSH
69580: FOR_TO
69581: IFFALSE 69990
// begin tmp := mc_build_upgrade [ i ] ;
69583: LD_ADDR_VAR 0 4
69587: PUSH
69588: LD_EXP 82
69592: PUSH
69593: LD_VAR 0 2
69597: ARRAY
69598: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
69599: LD_ADDR_VAR 0 6
69603: PUSH
69604: LD_EXP 83
69608: PUSH
69609: LD_VAR 0 2
69613: ARRAY
69614: PPUSH
69615: LD_INT 2
69617: PUSH
69618: LD_INT 30
69620: PUSH
69621: LD_INT 6
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 30
69630: PUSH
69631: LD_INT 7
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: LIST
69642: PPUSH
69643: CALL_OW 72
69647: ST_TO_ADDR
// if not tmp and not lab then
69648: LD_VAR 0 4
69652: NOT
69653: PUSH
69654: LD_VAR 0 6
69658: NOT
69659: AND
69660: IFFALSE 69664
// continue ;
69662: GO 69580
// if tmp then
69664: LD_VAR 0 4
69668: IFFALSE 69788
// for j in tmp do
69670: LD_ADDR_VAR 0 3
69674: PUSH
69675: LD_VAR 0 4
69679: PUSH
69680: FOR_IN
69681: IFFALSE 69786
// begin if UpgradeCost ( j ) then
69683: LD_VAR 0 3
69687: PPUSH
69688: CALL 30876 0 1
69692: IFFALSE 69784
// begin ComUpgrade ( j ) ;
69694: LD_VAR 0 3
69698: PPUSH
69699: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
69703: LD_ADDR_EXP 82
69707: PUSH
69708: LD_EXP 82
69712: PPUSH
69713: LD_VAR 0 2
69717: PPUSH
69718: LD_EXP 82
69722: PUSH
69723: LD_VAR 0 2
69727: ARRAY
69728: PUSH
69729: LD_VAR 0 3
69733: DIFF
69734: PPUSH
69735: CALL_OW 1
69739: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
69740: LD_ADDR_EXP 57
69744: PUSH
69745: LD_EXP 57
69749: PPUSH
69750: LD_VAR 0 2
69754: PUSH
69755: LD_EXP 57
69759: PUSH
69760: LD_VAR 0 2
69764: ARRAY
69765: PUSH
69766: LD_INT 1
69768: PLUS
69769: PUSH
69770: EMPTY
69771: LIST
69772: LIST
69773: PPUSH
69774: LD_VAR 0 3
69778: PPUSH
69779: CALL 24362 0 3
69783: ST_TO_ADDR
// end ; end ;
69784: GO 69680
69786: POP
69787: POP
// if not lab or not mc_lab_upgrade [ i ] then
69788: LD_VAR 0 6
69792: NOT
69793: PUSH
69794: LD_EXP 84
69798: PUSH
69799: LD_VAR 0 2
69803: ARRAY
69804: NOT
69805: OR
69806: IFFALSE 69810
// continue ;
69808: GO 69580
// for j in lab do
69810: LD_ADDR_VAR 0 3
69814: PUSH
69815: LD_VAR 0 6
69819: PUSH
69820: FOR_IN
69821: IFFALSE 69986
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
69823: LD_VAR 0 3
69827: PPUSH
69828: CALL_OW 266
69832: PUSH
69833: LD_INT 6
69835: PUSH
69836: LD_INT 7
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: IN
69843: PUSH
69844: LD_VAR 0 3
69848: PPUSH
69849: CALL_OW 461
69853: PUSH
69854: LD_INT 1
69856: NONEQUAL
69857: AND
69858: IFFALSE 69984
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
69860: LD_VAR 0 3
69864: PPUSH
69865: LD_EXP 84
69869: PUSH
69870: LD_VAR 0 2
69874: ARRAY
69875: PUSH
69876: LD_INT 1
69878: ARRAY
69879: PPUSH
69880: CALL 31081 0 2
69884: IFFALSE 69984
// begin ComCancel ( j ) ;
69886: LD_VAR 0 3
69890: PPUSH
69891: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
69895: LD_VAR 0 3
69899: PPUSH
69900: LD_EXP 84
69904: PUSH
69905: LD_VAR 0 2
69909: ARRAY
69910: PUSH
69911: LD_INT 1
69913: ARRAY
69914: PPUSH
69915: CALL_OW 207
// if not j in mc_construct_list [ i ] then
69919: LD_VAR 0 3
69923: PUSH
69924: LD_EXP 57
69928: PUSH
69929: LD_VAR 0 2
69933: ARRAY
69934: IN
69935: NOT
69936: IFFALSE 69982
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
69938: LD_ADDR_EXP 57
69942: PUSH
69943: LD_EXP 57
69947: PPUSH
69948: LD_VAR 0 2
69952: PUSH
69953: LD_EXP 57
69957: PUSH
69958: LD_VAR 0 2
69962: ARRAY
69963: PUSH
69964: LD_INT 1
69966: PLUS
69967: PUSH
69968: EMPTY
69969: LIST
69970: LIST
69971: PPUSH
69972: LD_VAR 0 3
69976: PPUSH
69977: CALL 24362 0 3
69981: ST_TO_ADDR
// break ;
69982: GO 69986
// end ; end ; end ;
69984: GO 69820
69986: POP
69987: POP
// end ;
69988: GO 69580
69990: POP
69991: POP
// end ;
69992: LD_VAR 0 1
69996: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
69997: LD_INT 0
69999: PPUSH
70000: PPUSH
70001: PPUSH
70002: PPUSH
70003: PPUSH
70004: PPUSH
70005: PPUSH
70006: PPUSH
70007: PPUSH
// if not mc_bases then
70008: LD_EXP 50
70012: NOT
70013: IFFALSE 70017
// exit ;
70015: GO 70422
// for i = 1 to mc_bases do
70017: LD_ADDR_VAR 0 2
70021: PUSH
70022: DOUBLE
70023: LD_INT 1
70025: DEC
70026: ST_TO_ADDR
70027: LD_EXP 50
70031: PUSH
70032: FOR_TO
70033: IFFALSE 70420
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
70035: LD_EXP 58
70039: PUSH
70040: LD_VAR 0 2
70044: ARRAY
70045: NOT
70046: PUSH
70047: LD_EXP 50
70051: PUSH
70052: LD_VAR 0 2
70056: ARRAY
70057: PPUSH
70058: LD_INT 30
70060: PUSH
70061: LD_INT 3
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PPUSH
70068: CALL_OW 72
70072: NOT
70073: OR
70074: IFFALSE 70078
// continue ;
70076: GO 70032
// busy := false ;
70078: LD_ADDR_VAR 0 8
70082: PUSH
70083: LD_INT 0
70085: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
70086: LD_ADDR_VAR 0 4
70090: PUSH
70091: LD_EXP 50
70095: PUSH
70096: LD_VAR 0 2
70100: ARRAY
70101: PPUSH
70102: LD_INT 30
70104: PUSH
70105: LD_INT 3
70107: PUSH
70108: EMPTY
70109: LIST
70110: LIST
70111: PPUSH
70112: CALL_OW 72
70116: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
70117: LD_ADDR_VAR 0 6
70121: PUSH
70122: LD_EXP 58
70126: PUSH
70127: LD_VAR 0 2
70131: ARRAY
70132: PPUSH
70133: LD_INT 2
70135: PUSH
70136: LD_INT 30
70138: PUSH
70139: LD_INT 32
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: PUSH
70146: LD_INT 30
70148: PUSH
70149: LD_INT 33
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: LIST
70160: PPUSH
70161: CALL_OW 72
70165: ST_TO_ADDR
// if not t then
70166: LD_VAR 0 6
70170: NOT
70171: IFFALSE 70175
// continue ;
70173: GO 70032
// for j in tmp do
70175: LD_ADDR_VAR 0 3
70179: PUSH
70180: LD_VAR 0 4
70184: PUSH
70185: FOR_IN
70186: IFFALSE 70216
// if not BuildingStatus ( j ) = bs_idle then
70188: LD_VAR 0 3
70192: PPUSH
70193: CALL_OW 461
70197: PUSH
70198: LD_INT 2
70200: EQUAL
70201: NOT
70202: IFFALSE 70214
// begin busy := true ;
70204: LD_ADDR_VAR 0 8
70208: PUSH
70209: LD_INT 1
70211: ST_TO_ADDR
// break ;
70212: GO 70216
// end ;
70214: GO 70185
70216: POP
70217: POP
// if busy then
70218: LD_VAR 0 8
70222: IFFALSE 70226
// continue ;
70224: GO 70032
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
70226: LD_ADDR_VAR 0 7
70230: PUSH
70231: LD_VAR 0 6
70235: PPUSH
70236: LD_INT 35
70238: PUSH
70239: LD_INT 0
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PPUSH
70246: CALL_OW 72
70250: ST_TO_ADDR
// if tw then
70251: LD_VAR 0 7
70255: IFFALSE 70332
// begin tw := tw [ 1 ] ;
70257: LD_ADDR_VAR 0 7
70261: PUSH
70262: LD_VAR 0 7
70266: PUSH
70267: LD_INT 1
70269: ARRAY
70270: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
70271: LD_ADDR_VAR 0 9
70275: PUSH
70276: LD_VAR 0 7
70280: PPUSH
70281: LD_EXP 75
70285: PUSH
70286: LD_VAR 0 2
70290: ARRAY
70291: PPUSH
70292: CALL 29373 0 2
70296: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
70297: LD_EXP 89
70301: PUSH
70302: LD_VAR 0 2
70306: ARRAY
70307: IFFALSE 70330
// if not weapon in mc_allowed_tower_weapons [ i ] then
70309: LD_VAR 0 9
70313: PUSH
70314: LD_EXP 89
70318: PUSH
70319: LD_VAR 0 2
70323: ARRAY
70324: IN
70325: NOT
70326: IFFALSE 70330
// continue ;
70328: GO 70032
// end else
70330: GO 70395
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
70332: LD_ADDR_VAR 0 5
70336: PUSH
70337: LD_EXP 58
70341: PUSH
70342: LD_VAR 0 2
70346: ARRAY
70347: PPUSH
70348: LD_VAR 0 4
70352: PPUSH
70353: CALL 55662 0 2
70357: ST_TO_ADDR
// if not tmp2 then
70358: LD_VAR 0 5
70362: NOT
70363: IFFALSE 70367
// continue ;
70365: GO 70032
// tw := tmp2 [ 1 ] ;
70367: LD_ADDR_VAR 0 7
70371: PUSH
70372: LD_VAR 0 5
70376: PUSH
70377: LD_INT 1
70379: ARRAY
70380: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
70381: LD_ADDR_VAR 0 9
70385: PUSH
70386: LD_VAR 0 5
70390: PUSH
70391: LD_INT 2
70393: ARRAY
70394: ST_TO_ADDR
// end ; if not weapon then
70395: LD_VAR 0 9
70399: NOT
70400: IFFALSE 70404
// continue ;
70402: GO 70032
// ComPlaceWeapon ( tw , weapon ) ;
70404: LD_VAR 0 7
70408: PPUSH
70409: LD_VAR 0 9
70413: PPUSH
70414: CALL_OW 148
// end ;
70418: GO 70032
70420: POP
70421: POP
// end ;
70422: LD_VAR 0 1
70426: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list , r ; begin
70427: LD_INT 0
70429: PPUSH
70430: PPUSH
70431: PPUSH
70432: PPUSH
70433: PPUSH
70434: PPUSH
70435: PPUSH
// if not mc_bases then
70436: LD_EXP 50
70440: NOT
70441: IFFALSE 70445
// exit ;
70443: GO 71213
// for i = 1 to mc_bases do
70445: LD_ADDR_VAR 0 2
70449: PUSH
70450: DOUBLE
70451: LD_INT 1
70453: DEC
70454: ST_TO_ADDR
70455: LD_EXP 50
70459: PUSH
70460: FOR_TO
70461: IFFALSE 71211
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
70463: LD_EXP 63
70467: PUSH
70468: LD_VAR 0 2
70472: ARRAY
70473: NOT
70474: PUSH
70475: LD_EXP 63
70479: PUSH
70480: LD_VAR 0 2
70484: ARRAY
70485: PUSH
70486: LD_EXP 64
70490: PUSH
70491: LD_VAR 0 2
70495: ARRAY
70496: EQUAL
70497: OR
70498: PUSH
70499: LD_EXP 73
70503: PUSH
70504: LD_VAR 0 2
70508: ARRAY
70509: OR
70510: IFFALSE 70514
// continue ;
70512: GO 70460
// if mc_miners [ i ] then
70514: LD_EXP 64
70518: PUSH
70519: LD_VAR 0 2
70523: ARRAY
70524: IFFALSE 70898
// begin for j = mc_miners [ i ] downto 1 do
70526: LD_ADDR_VAR 0 3
70530: PUSH
70531: DOUBLE
70532: LD_EXP 64
70536: PUSH
70537: LD_VAR 0 2
70541: ARRAY
70542: INC
70543: ST_TO_ADDR
70544: LD_INT 1
70546: PUSH
70547: FOR_DOWNTO
70548: IFFALSE 70896
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
70550: LD_EXP 64
70554: PUSH
70555: LD_VAR 0 2
70559: ARRAY
70560: PUSH
70561: LD_VAR 0 3
70565: ARRAY
70566: PPUSH
70567: CALL_OW 301
70571: PUSH
70572: LD_EXP 64
70576: PUSH
70577: LD_VAR 0 2
70581: ARRAY
70582: PUSH
70583: LD_VAR 0 3
70587: ARRAY
70588: PPUSH
70589: CALL_OW 257
70593: PUSH
70594: LD_INT 1
70596: NONEQUAL
70597: OR
70598: IFFALSE 70661
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
70600: LD_ADDR_VAR 0 5
70604: PUSH
70605: LD_EXP 64
70609: PUSH
70610: LD_VAR 0 2
70614: ARRAY
70615: PUSH
70616: LD_EXP 64
70620: PUSH
70621: LD_VAR 0 2
70625: ARRAY
70626: PUSH
70627: LD_VAR 0 3
70631: ARRAY
70632: DIFF
70633: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
70634: LD_ADDR_EXP 64
70638: PUSH
70639: LD_EXP 64
70643: PPUSH
70644: LD_VAR 0 2
70648: PPUSH
70649: LD_VAR 0 5
70653: PPUSH
70654: CALL_OW 1
70658: ST_TO_ADDR
// continue ;
70659: GO 70547
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
70661: LD_EXP 64
70665: PUSH
70666: LD_VAR 0 2
70670: ARRAY
70671: PUSH
70672: LD_VAR 0 3
70676: ARRAY
70677: PPUSH
70678: CALL_OW 257
70682: PUSH
70683: LD_INT 1
70685: EQUAL
70686: PUSH
70687: LD_EXP 64
70691: PUSH
70692: LD_VAR 0 2
70696: ARRAY
70697: PUSH
70698: LD_VAR 0 3
70702: ARRAY
70703: PPUSH
70704: CALL_OW 459
70708: NOT
70709: AND
70710: PUSH
70711: LD_EXP 64
70715: PUSH
70716: LD_VAR 0 2
70720: ARRAY
70721: PUSH
70722: LD_VAR 0 3
70726: ARRAY
70727: PPUSH
70728: CALL_OW 314
70732: NOT
70733: AND
70734: IFFALSE 70894
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
70736: LD_EXP 64
70740: PUSH
70741: LD_VAR 0 2
70745: ARRAY
70746: PUSH
70747: LD_VAR 0 3
70751: ARRAY
70752: PPUSH
70753: CALL_OW 310
70757: IFFALSE 70780
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
70759: LD_EXP 64
70763: PUSH
70764: LD_VAR 0 2
70768: ARRAY
70769: PUSH
70770: LD_VAR 0 3
70774: ARRAY
70775: PPUSH
70776: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
70780: LD_EXP 64
70784: PUSH
70785: LD_VAR 0 2
70789: ARRAY
70790: PUSH
70791: LD_VAR 0 3
70795: ARRAY
70796: PPUSH
70797: CALL_OW 314
70801: NOT
70802: IFFALSE 70894
// begin r := rand ( 1 , mc_mines [ i ] ) ;
70804: LD_ADDR_VAR 0 7
70808: PUSH
70809: LD_INT 1
70811: PPUSH
70812: LD_EXP 63
70816: PUSH
70817: LD_VAR 0 2
70821: ARRAY
70822: PPUSH
70823: CALL_OW 12
70827: ST_TO_ADDR
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ r ] [ 1 ] , mc_mines [ i ] [ r ] [ 2 ] , 0 ) ;
70828: LD_EXP 64
70832: PUSH
70833: LD_VAR 0 2
70837: ARRAY
70838: PUSH
70839: LD_VAR 0 3
70843: ARRAY
70844: PPUSH
70845: LD_EXP 63
70849: PUSH
70850: LD_VAR 0 2
70854: ARRAY
70855: PUSH
70856: LD_VAR 0 7
70860: ARRAY
70861: PUSH
70862: LD_INT 1
70864: ARRAY
70865: PPUSH
70866: LD_EXP 63
70870: PUSH
70871: LD_VAR 0 2
70875: ARRAY
70876: PUSH
70877: LD_VAR 0 7
70881: ARRAY
70882: PUSH
70883: LD_INT 2
70885: ARRAY
70886: PPUSH
70887: LD_INT 0
70889: PPUSH
70890: CALL_OW 193
// end ; end ; end ;
70894: GO 70547
70896: POP
70897: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
70898: LD_ADDR_VAR 0 5
70902: PUSH
70903: LD_EXP 50
70907: PUSH
70908: LD_VAR 0 2
70912: ARRAY
70913: PPUSH
70914: LD_INT 2
70916: PUSH
70917: LD_INT 30
70919: PUSH
70920: LD_INT 4
70922: PUSH
70923: EMPTY
70924: LIST
70925: LIST
70926: PUSH
70927: LD_INT 30
70929: PUSH
70930: LD_INT 5
70932: PUSH
70933: EMPTY
70934: LIST
70935: LIST
70936: PUSH
70937: LD_INT 30
70939: PUSH
70940: LD_INT 32
70942: PUSH
70943: EMPTY
70944: LIST
70945: LIST
70946: PUSH
70947: EMPTY
70948: LIST
70949: LIST
70950: LIST
70951: LIST
70952: PPUSH
70953: CALL_OW 72
70957: ST_TO_ADDR
// if not tmp then
70958: LD_VAR 0 5
70962: NOT
70963: IFFALSE 70967
// continue ;
70965: GO 70460
// list := [ ] ;
70967: LD_ADDR_VAR 0 6
70971: PUSH
70972: EMPTY
70973: ST_TO_ADDR
// for j in tmp do
70974: LD_ADDR_VAR 0 3
70978: PUSH
70979: LD_VAR 0 5
70983: PUSH
70984: FOR_IN
70985: IFFALSE 71054
// begin for k in UnitsInside ( j ) do
70987: LD_ADDR_VAR 0 4
70991: PUSH
70992: LD_VAR 0 3
70996: PPUSH
70997: CALL_OW 313
71001: PUSH
71002: FOR_IN
71003: IFFALSE 71050
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
71005: LD_VAR 0 4
71009: PPUSH
71010: CALL_OW 257
71014: PUSH
71015: LD_INT 1
71017: EQUAL
71018: PUSH
71019: LD_VAR 0 4
71023: PPUSH
71024: CALL_OW 459
71028: NOT
71029: AND
71030: IFFALSE 71048
// list := list ^ k ;
71032: LD_ADDR_VAR 0 6
71036: PUSH
71037: LD_VAR 0 6
71041: PUSH
71042: LD_VAR 0 4
71046: ADD
71047: ST_TO_ADDR
71048: GO 71002
71050: POP
71051: POP
// end ;
71052: GO 70984
71054: POP
71055: POP
// list := list diff mc_miners [ i ] ;
71056: LD_ADDR_VAR 0 6
71060: PUSH
71061: LD_VAR 0 6
71065: PUSH
71066: LD_EXP 64
71070: PUSH
71071: LD_VAR 0 2
71075: ARRAY
71076: DIFF
71077: ST_TO_ADDR
// if not list then
71078: LD_VAR 0 6
71082: NOT
71083: IFFALSE 71087
// continue ;
71085: GO 70460
// k := mc_mines [ i ] - mc_miners [ i ] ;
71087: LD_ADDR_VAR 0 4
71091: PUSH
71092: LD_EXP 63
71096: PUSH
71097: LD_VAR 0 2
71101: ARRAY
71102: PUSH
71103: LD_EXP 64
71107: PUSH
71108: LD_VAR 0 2
71112: ARRAY
71113: MINUS
71114: ST_TO_ADDR
// if k > list then
71115: LD_VAR 0 4
71119: PUSH
71120: LD_VAR 0 6
71124: GREATER
71125: IFFALSE 71137
// k := list ;
71127: LD_ADDR_VAR 0 4
71131: PUSH
71132: LD_VAR 0 6
71136: ST_TO_ADDR
// for j = 1 to k do
71137: LD_ADDR_VAR 0 3
71141: PUSH
71142: DOUBLE
71143: LD_INT 1
71145: DEC
71146: ST_TO_ADDR
71147: LD_VAR 0 4
71151: PUSH
71152: FOR_TO
71153: IFFALSE 71207
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
71155: LD_ADDR_EXP 64
71159: PUSH
71160: LD_EXP 64
71164: PPUSH
71165: LD_VAR 0 2
71169: PUSH
71170: LD_EXP 64
71174: PUSH
71175: LD_VAR 0 2
71179: ARRAY
71180: PUSH
71181: LD_INT 1
71183: PLUS
71184: PUSH
71185: EMPTY
71186: LIST
71187: LIST
71188: PPUSH
71189: LD_VAR 0 6
71193: PUSH
71194: LD_VAR 0 3
71198: ARRAY
71199: PPUSH
71200: CALL 24362 0 3
71204: ST_TO_ADDR
71205: GO 71152
71207: POP
71208: POP
// end ;
71209: GO 70460
71211: POP
71212: POP
// end ;
71213: LD_VAR 0 1
71217: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
71218: LD_INT 0
71220: PPUSH
71221: PPUSH
71222: PPUSH
71223: PPUSH
71224: PPUSH
71225: PPUSH
71226: PPUSH
71227: PPUSH
71228: PPUSH
71229: PPUSH
// if not mc_bases then
71230: LD_EXP 50
71234: NOT
71235: IFFALSE 71239
// exit ;
71237: GO 72989
// for i = 1 to mc_bases do
71239: LD_ADDR_VAR 0 2
71243: PUSH
71244: DOUBLE
71245: LD_INT 1
71247: DEC
71248: ST_TO_ADDR
71249: LD_EXP 50
71253: PUSH
71254: FOR_TO
71255: IFFALSE 72987
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
71257: LD_EXP 50
71261: PUSH
71262: LD_VAR 0 2
71266: ARRAY
71267: NOT
71268: PUSH
71269: LD_EXP 57
71273: PUSH
71274: LD_VAR 0 2
71278: ARRAY
71279: OR
71280: IFFALSE 71284
// continue ;
71282: GO 71254
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
71284: LD_EXP 66
71288: PUSH
71289: LD_VAR 0 2
71293: ARRAY
71294: NOT
71295: PUSH
71296: LD_EXP 67
71300: PUSH
71301: LD_VAR 0 2
71305: ARRAY
71306: AND
71307: IFFALSE 71345
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
71309: LD_ADDR_EXP 67
71313: PUSH
71314: LD_EXP 67
71318: PPUSH
71319: LD_VAR 0 2
71323: PPUSH
71324: EMPTY
71325: PPUSH
71326: CALL_OW 1
71330: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
71331: LD_VAR 0 2
71335: PPUSH
71336: LD_INT 107
71338: PPUSH
71339: CALL 62172 0 2
// continue ;
71343: GO 71254
// end ; target := [ ] ;
71345: LD_ADDR_VAR 0 6
71349: PUSH
71350: EMPTY
71351: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
71352: LD_ADDR_VAR 0 3
71356: PUSH
71357: DOUBLE
71358: LD_EXP 66
71362: PUSH
71363: LD_VAR 0 2
71367: ARRAY
71368: INC
71369: ST_TO_ADDR
71370: LD_INT 1
71372: PUSH
71373: FOR_DOWNTO
71374: IFFALSE 71634
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
71376: LD_EXP 66
71380: PUSH
71381: LD_VAR 0 2
71385: ARRAY
71386: PUSH
71387: LD_VAR 0 3
71391: ARRAY
71392: PUSH
71393: LD_INT 2
71395: ARRAY
71396: PPUSH
71397: LD_EXP 66
71401: PUSH
71402: LD_VAR 0 2
71406: ARRAY
71407: PUSH
71408: LD_VAR 0 3
71412: ARRAY
71413: PUSH
71414: LD_INT 3
71416: ARRAY
71417: PPUSH
71418: CALL_OW 488
71422: PUSH
71423: LD_EXP 66
71427: PUSH
71428: LD_VAR 0 2
71432: ARRAY
71433: PUSH
71434: LD_VAR 0 3
71438: ARRAY
71439: PUSH
71440: LD_INT 2
71442: ARRAY
71443: PPUSH
71444: LD_EXP 66
71448: PUSH
71449: LD_VAR 0 2
71453: ARRAY
71454: PUSH
71455: LD_VAR 0 3
71459: ARRAY
71460: PUSH
71461: LD_INT 3
71463: ARRAY
71464: PPUSH
71465: CALL_OW 284
71469: PUSH
71470: LD_INT 0
71472: EQUAL
71473: AND
71474: IFFALSE 71529
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
71476: LD_ADDR_VAR 0 5
71480: PUSH
71481: LD_EXP 66
71485: PUSH
71486: LD_VAR 0 2
71490: ARRAY
71491: PPUSH
71492: LD_VAR 0 3
71496: PPUSH
71497: CALL_OW 3
71501: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
71502: LD_ADDR_EXP 66
71506: PUSH
71507: LD_EXP 66
71511: PPUSH
71512: LD_VAR 0 2
71516: PPUSH
71517: LD_VAR 0 5
71521: PPUSH
71522: CALL_OW 1
71526: ST_TO_ADDR
// continue ;
71527: GO 71373
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
71529: LD_EXP 50
71533: PUSH
71534: LD_VAR 0 2
71538: ARRAY
71539: PUSH
71540: LD_INT 1
71542: ARRAY
71543: PPUSH
71544: CALL_OW 255
71548: PPUSH
71549: LD_EXP 66
71553: PUSH
71554: LD_VAR 0 2
71558: ARRAY
71559: PUSH
71560: LD_VAR 0 3
71564: ARRAY
71565: PUSH
71566: LD_INT 2
71568: ARRAY
71569: PPUSH
71570: LD_EXP 66
71574: PUSH
71575: LD_VAR 0 2
71579: ARRAY
71580: PUSH
71581: LD_VAR 0 3
71585: ARRAY
71586: PUSH
71587: LD_INT 3
71589: ARRAY
71590: PPUSH
71591: LD_INT 30
71593: PPUSH
71594: CALL 25258 0 4
71598: PUSH
71599: LD_INT 4
71601: ARRAY
71602: PUSH
71603: LD_INT 0
71605: EQUAL
71606: IFFALSE 71632
// begin target := mc_crates [ i ] [ j ] ;
71608: LD_ADDR_VAR 0 6
71612: PUSH
71613: LD_EXP 66
71617: PUSH
71618: LD_VAR 0 2
71622: ARRAY
71623: PUSH
71624: LD_VAR 0 3
71628: ARRAY
71629: ST_TO_ADDR
// break ;
71630: GO 71634
// end ; end ;
71632: GO 71373
71634: POP
71635: POP
// if not target then
71636: LD_VAR 0 6
71640: NOT
71641: IFFALSE 71645
// continue ;
71643: GO 71254
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
71645: LD_ADDR_VAR 0 7
71649: PUSH
71650: LD_EXP 69
71654: PUSH
71655: LD_VAR 0 2
71659: ARRAY
71660: PPUSH
71661: LD_INT 2
71663: PUSH
71664: LD_INT 3
71666: PUSH
71667: LD_INT 58
71669: PUSH
71670: EMPTY
71671: LIST
71672: PUSH
71673: EMPTY
71674: LIST
71675: LIST
71676: PUSH
71677: LD_INT 61
71679: PUSH
71680: EMPTY
71681: LIST
71682: PUSH
71683: LD_INT 33
71685: PUSH
71686: LD_INT 5
71688: PUSH
71689: EMPTY
71690: LIST
71691: LIST
71692: PUSH
71693: LD_INT 33
71695: PUSH
71696: LD_INT 3
71698: PUSH
71699: EMPTY
71700: LIST
71701: LIST
71702: PUSH
71703: EMPTY
71704: LIST
71705: LIST
71706: LIST
71707: LIST
71708: LIST
71709: PUSH
71710: LD_INT 2
71712: PUSH
71713: LD_INT 34
71715: PUSH
71716: LD_INT 32
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: PUSH
71723: LD_INT 34
71725: PUSH
71726: LD_INT 51
71728: PUSH
71729: EMPTY
71730: LIST
71731: LIST
71732: PUSH
71733: LD_INT 34
71735: PUSH
71736: LD_INT 12
71738: PUSH
71739: EMPTY
71740: LIST
71741: LIST
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: LIST
71747: LIST
71748: PUSH
71749: EMPTY
71750: LIST
71751: LIST
71752: PPUSH
71753: CALL_OW 72
71757: ST_TO_ADDR
// if not cargo then
71758: LD_VAR 0 7
71762: NOT
71763: IFFALSE 72406
// begin if mc_crates_collector [ i ] < 5 then
71765: LD_EXP 67
71769: PUSH
71770: LD_VAR 0 2
71774: ARRAY
71775: PUSH
71776: LD_INT 5
71778: LESS
71779: IFFALSE 72145
// begin if mc_ape [ i ] then
71781: LD_EXP 79
71785: PUSH
71786: LD_VAR 0 2
71790: ARRAY
71791: IFFALSE 71838
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
71793: LD_ADDR_VAR 0 5
71797: PUSH
71798: LD_EXP 79
71802: PUSH
71803: LD_VAR 0 2
71807: ARRAY
71808: PPUSH
71809: LD_INT 25
71811: PUSH
71812: LD_INT 16
71814: PUSH
71815: EMPTY
71816: LIST
71817: LIST
71818: PUSH
71819: LD_INT 24
71821: PUSH
71822: LD_INT 750
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: PUSH
71829: EMPTY
71830: LIST
71831: LIST
71832: PPUSH
71833: CALL_OW 72
71837: ST_TO_ADDR
// if not tmp then
71838: LD_VAR 0 5
71842: NOT
71843: IFFALSE 71890
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
71845: LD_ADDR_VAR 0 5
71849: PUSH
71850: LD_EXP 50
71854: PUSH
71855: LD_VAR 0 2
71859: ARRAY
71860: PPUSH
71861: LD_INT 25
71863: PUSH
71864: LD_INT 2
71866: PUSH
71867: EMPTY
71868: LIST
71869: LIST
71870: PUSH
71871: LD_INT 24
71873: PUSH
71874: LD_INT 750
71876: PUSH
71877: EMPTY
71878: LIST
71879: LIST
71880: PUSH
71881: EMPTY
71882: LIST
71883: LIST
71884: PPUSH
71885: CALL_OW 72
71889: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
71890: LD_EXP 79
71894: PUSH
71895: LD_VAR 0 2
71899: ARRAY
71900: PUSH
71901: LD_EXP 50
71905: PUSH
71906: LD_VAR 0 2
71910: ARRAY
71911: PPUSH
71912: LD_INT 25
71914: PUSH
71915: LD_INT 2
71917: PUSH
71918: EMPTY
71919: LIST
71920: LIST
71921: PUSH
71922: LD_INT 24
71924: PUSH
71925: LD_INT 750
71927: PUSH
71928: EMPTY
71929: LIST
71930: LIST
71931: PUSH
71932: EMPTY
71933: LIST
71934: LIST
71935: PPUSH
71936: CALL_OW 72
71940: AND
71941: PUSH
71942: LD_VAR 0 5
71946: PUSH
71947: LD_INT 5
71949: LESS
71950: AND
71951: IFFALSE 72033
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
71953: LD_ADDR_VAR 0 3
71957: PUSH
71958: LD_EXP 50
71962: PUSH
71963: LD_VAR 0 2
71967: ARRAY
71968: PPUSH
71969: LD_INT 25
71971: PUSH
71972: LD_INT 2
71974: PUSH
71975: EMPTY
71976: LIST
71977: LIST
71978: PUSH
71979: LD_INT 24
71981: PUSH
71982: LD_INT 750
71984: PUSH
71985: EMPTY
71986: LIST
71987: LIST
71988: PUSH
71989: EMPTY
71990: LIST
71991: LIST
71992: PPUSH
71993: CALL_OW 72
71997: PUSH
71998: FOR_IN
71999: IFFALSE 72031
// begin tmp := tmp union j ;
72001: LD_ADDR_VAR 0 5
72005: PUSH
72006: LD_VAR 0 5
72010: PUSH
72011: LD_VAR 0 3
72015: UNION
72016: ST_TO_ADDR
// if tmp >= 5 then
72017: LD_VAR 0 5
72021: PUSH
72022: LD_INT 5
72024: GREATEREQUAL
72025: IFFALSE 72029
// break ;
72027: GO 72031
// end ;
72029: GO 71998
72031: POP
72032: POP
// end ; if not tmp then
72033: LD_VAR 0 5
72037: NOT
72038: IFFALSE 72042
// continue ;
72040: GO 71254
// for j in tmp do
72042: LD_ADDR_VAR 0 3
72046: PUSH
72047: LD_VAR 0 5
72051: PUSH
72052: FOR_IN
72053: IFFALSE 72143
// if not GetTag ( j ) then
72055: LD_VAR 0 3
72059: PPUSH
72060: CALL_OW 110
72064: NOT
72065: IFFALSE 72141
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
72067: LD_ADDR_EXP 67
72071: PUSH
72072: LD_EXP 67
72076: PPUSH
72077: LD_VAR 0 2
72081: PUSH
72082: LD_EXP 67
72086: PUSH
72087: LD_VAR 0 2
72091: ARRAY
72092: PUSH
72093: LD_INT 1
72095: PLUS
72096: PUSH
72097: EMPTY
72098: LIST
72099: LIST
72100: PPUSH
72101: LD_VAR 0 3
72105: PPUSH
72106: CALL 24362 0 3
72110: ST_TO_ADDR
// SetTag ( j , 107 ) ;
72111: LD_VAR 0 3
72115: PPUSH
72116: LD_INT 107
72118: PPUSH
72119: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
72123: LD_EXP 67
72127: PUSH
72128: LD_VAR 0 2
72132: ARRAY
72133: PUSH
72134: LD_INT 5
72136: GREATEREQUAL
72137: IFFALSE 72141
// break ;
72139: GO 72143
// end ;
72141: GO 72052
72143: POP
72144: POP
// end ; if mc_crates_collector [ i ] and target then
72145: LD_EXP 67
72149: PUSH
72150: LD_VAR 0 2
72154: ARRAY
72155: PUSH
72156: LD_VAR 0 6
72160: AND
72161: IFFALSE 72404
// begin if mc_crates_collector [ i ] < target [ 1 ] then
72163: LD_EXP 67
72167: PUSH
72168: LD_VAR 0 2
72172: ARRAY
72173: PUSH
72174: LD_VAR 0 6
72178: PUSH
72179: LD_INT 1
72181: ARRAY
72182: LESS
72183: IFFALSE 72203
// tmp := mc_crates_collector [ i ] else
72185: LD_ADDR_VAR 0 5
72189: PUSH
72190: LD_EXP 67
72194: PUSH
72195: LD_VAR 0 2
72199: ARRAY
72200: ST_TO_ADDR
72201: GO 72217
// tmp := target [ 1 ] ;
72203: LD_ADDR_VAR 0 5
72207: PUSH
72208: LD_VAR 0 6
72212: PUSH
72213: LD_INT 1
72215: ARRAY
72216: ST_TO_ADDR
// k := 0 ;
72217: LD_ADDR_VAR 0 4
72221: PUSH
72222: LD_INT 0
72224: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
72225: LD_ADDR_VAR 0 3
72229: PUSH
72230: LD_EXP 67
72234: PUSH
72235: LD_VAR 0 2
72239: ARRAY
72240: PUSH
72241: FOR_IN
72242: IFFALSE 72402
// begin k := k + 1 ;
72244: LD_ADDR_VAR 0 4
72248: PUSH
72249: LD_VAR 0 4
72253: PUSH
72254: LD_INT 1
72256: PLUS
72257: ST_TO_ADDR
// if k > tmp then
72258: LD_VAR 0 4
72262: PUSH
72263: LD_VAR 0 5
72267: GREATER
72268: IFFALSE 72272
// break ;
72270: GO 72402
// if not GetClass ( j ) in [ 2 , 16 ] then
72272: LD_VAR 0 3
72276: PPUSH
72277: CALL_OW 257
72281: PUSH
72282: LD_INT 2
72284: PUSH
72285: LD_INT 16
72287: PUSH
72288: EMPTY
72289: LIST
72290: LIST
72291: IN
72292: NOT
72293: IFFALSE 72346
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
72295: LD_ADDR_EXP 67
72299: PUSH
72300: LD_EXP 67
72304: PPUSH
72305: LD_VAR 0 2
72309: PPUSH
72310: LD_EXP 67
72314: PUSH
72315: LD_VAR 0 2
72319: ARRAY
72320: PUSH
72321: LD_VAR 0 3
72325: DIFF
72326: PPUSH
72327: CALL_OW 1
72331: ST_TO_ADDR
// SetTag ( j , 0 ) ;
72332: LD_VAR 0 3
72336: PPUSH
72337: LD_INT 0
72339: PPUSH
72340: CALL_OW 109
// continue ;
72344: GO 72241
// end ; if IsInUnit ( j ) then
72346: LD_VAR 0 3
72350: PPUSH
72351: CALL_OW 310
72355: IFFALSE 72366
// ComExitBuilding ( j ) ;
72357: LD_VAR 0 3
72361: PPUSH
72362: CALL_OW 122
// wait ( 3 ) ;
72366: LD_INT 3
72368: PPUSH
72369: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
72373: LD_VAR 0 3
72377: PPUSH
72378: LD_VAR 0 6
72382: PUSH
72383: LD_INT 2
72385: ARRAY
72386: PPUSH
72387: LD_VAR 0 6
72391: PUSH
72392: LD_INT 3
72394: ARRAY
72395: PPUSH
72396: CALL_OW 117
// end ;
72400: GO 72241
72402: POP
72403: POP
// end ; end else
72404: GO 72985
// begin for j in cargo do
72406: LD_ADDR_VAR 0 3
72410: PUSH
72411: LD_VAR 0 7
72415: PUSH
72416: FOR_IN
72417: IFFALSE 72983
// begin if GetTag ( j ) <> 0 then
72419: LD_VAR 0 3
72423: PPUSH
72424: CALL_OW 110
72428: PUSH
72429: LD_INT 0
72431: NONEQUAL
72432: IFFALSE 72436
// continue ;
72434: GO 72416
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
72436: LD_VAR 0 3
72440: PPUSH
72441: CALL_OW 256
72445: PUSH
72446: LD_INT 1000
72448: LESS
72449: PUSH
72450: LD_VAR 0 3
72454: PPUSH
72455: LD_EXP 74
72459: PUSH
72460: LD_VAR 0 2
72464: ARRAY
72465: PPUSH
72466: CALL_OW 308
72470: NOT
72471: AND
72472: IFFALSE 72494
// ComMoveToArea ( j , mc_parking [ i ] ) ;
72474: LD_VAR 0 3
72478: PPUSH
72479: LD_EXP 74
72483: PUSH
72484: LD_VAR 0 2
72488: ARRAY
72489: PPUSH
72490: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
72494: LD_VAR 0 3
72498: PPUSH
72499: CALL_OW 256
72503: PUSH
72504: LD_INT 1000
72506: LESS
72507: PUSH
72508: LD_VAR 0 3
72512: PPUSH
72513: LD_EXP 74
72517: PUSH
72518: LD_VAR 0 2
72522: ARRAY
72523: PPUSH
72524: CALL_OW 308
72528: AND
72529: IFFALSE 72533
// continue ;
72531: GO 72416
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
72533: LD_VAR 0 3
72537: PPUSH
72538: CALL_OW 262
72542: PUSH
72543: LD_INT 2
72545: EQUAL
72546: PUSH
72547: LD_VAR 0 3
72551: PPUSH
72552: CALL_OW 261
72556: PUSH
72557: LD_INT 15
72559: LESS
72560: AND
72561: IFFALSE 72565
// continue ;
72563: GO 72416
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
72565: LD_VAR 0 3
72569: PPUSH
72570: CALL_OW 262
72574: PUSH
72575: LD_INT 1
72577: EQUAL
72578: PUSH
72579: LD_VAR 0 3
72583: PPUSH
72584: CALL_OW 261
72588: PUSH
72589: LD_INT 10
72591: LESS
72592: AND
72593: IFFALSE 72922
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72595: LD_ADDR_VAR 0 8
72599: PUSH
72600: LD_EXP 50
72604: PUSH
72605: LD_VAR 0 2
72609: ARRAY
72610: PPUSH
72611: LD_INT 2
72613: PUSH
72614: LD_INT 30
72616: PUSH
72617: LD_INT 0
72619: PUSH
72620: EMPTY
72621: LIST
72622: LIST
72623: PUSH
72624: LD_INT 30
72626: PUSH
72627: LD_INT 1
72629: PUSH
72630: EMPTY
72631: LIST
72632: LIST
72633: PUSH
72634: EMPTY
72635: LIST
72636: LIST
72637: LIST
72638: PPUSH
72639: CALL_OW 72
72643: ST_TO_ADDR
// if not depot then
72644: LD_VAR 0 8
72648: NOT
72649: IFFALSE 72653
// continue ;
72651: GO 72416
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
72653: LD_VAR 0 3
72657: PPUSH
72658: LD_VAR 0 8
72662: PPUSH
72663: LD_VAR 0 3
72667: PPUSH
72668: CALL_OW 74
72672: PPUSH
72673: CALL_OW 296
72677: PUSH
72678: LD_INT 6
72680: LESS
72681: IFFALSE 72697
// SetFuel ( j , 100 ) else
72683: LD_VAR 0 3
72687: PPUSH
72688: LD_INT 100
72690: PPUSH
72691: CALL_OW 240
72695: GO 72922
// if GetFuel ( j ) = 0 then
72697: LD_VAR 0 3
72701: PPUSH
72702: CALL_OW 261
72706: PUSH
72707: LD_INT 0
72709: EQUAL
72710: IFFALSE 72922
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
72712: LD_ADDR_EXP 69
72716: PUSH
72717: LD_EXP 69
72721: PPUSH
72722: LD_VAR 0 2
72726: PPUSH
72727: LD_EXP 69
72731: PUSH
72732: LD_VAR 0 2
72736: ARRAY
72737: PUSH
72738: LD_VAR 0 3
72742: DIFF
72743: PPUSH
72744: CALL_OW 1
72748: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
72749: LD_VAR 0 3
72753: PPUSH
72754: CALL_OW 263
72758: PUSH
72759: LD_INT 1
72761: EQUAL
72762: IFFALSE 72778
// ComExitVehicle ( IsInUnit ( j ) ) ;
72764: LD_VAR 0 3
72768: PPUSH
72769: CALL_OW 310
72773: PPUSH
72774: CALL_OW 121
// if GetControl ( j ) = control_remote then
72778: LD_VAR 0 3
72782: PPUSH
72783: CALL_OW 263
72787: PUSH
72788: LD_INT 2
72790: EQUAL
72791: IFFALSE 72802
// ComUnlink ( j ) ;
72793: LD_VAR 0 3
72797: PPUSH
72798: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
72802: LD_ADDR_VAR 0 9
72806: PUSH
72807: LD_VAR 0 2
72811: PPUSH
72812: LD_INT 3
72814: PPUSH
72815: CALL 82392 0 2
72819: ST_TO_ADDR
// if fac then
72820: LD_VAR 0 9
72824: IFFALSE 72920
// begin for k in fac do
72826: LD_ADDR_VAR 0 4
72830: PUSH
72831: LD_VAR 0 9
72835: PUSH
72836: FOR_IN
72837: IFFALSE 72918
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
72839: LD_ADDR_VAR 0 10
72843: PUSH
72844: LD_VAR 0 9
72848: PPUSH
72849: LD_VAR 0 3
72853: PPUSH
72854: CALL_OW 265
72858: PPUSH
72859: LD_VAR 0 3
72863: PPUSH
72864: CALL_OW 262
72868: PPUSH
72869: LD_VAR 0 3
72873: PPUSH
72874: CALL_OW 263
72878: PPUSH
72879: LD_VAR 0 3
72883: PPUSH
72884: CALL_OW 264
72888: PPUSH
72889: CALL 21858 0 5
72893: ST_TO_ADDR
// if components then
72894: LD_VAR 0 10
72898: IFFALSE 72916
// begin MC_InsertProduceList ( i , components ) ;
72900: LD_VAR 0 2
72904: PPUSH
72905: LD_VAR 0 10
72909: PPUSH
72910: CALL 81937 0 2
// break ;
72914: GO 72918
// end ; end ;
72916: GO 72836
72918: POP
72919: POP
// end ; continue ;
72920: GO 72416
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
72922: LD_VAR 0 3
72926: PPUSH
72927: LD_INT 1
72929: PPUSH
72930: CALL_OW 289
72934: PUSH
72935: LD_INT 100
72937: LESS
72938: PUSH
72939: LD_VAR 0 3
72943: PPUSH
72944: CALL_OW 314
72948: NOT
72949: AND
72950: IFFALSE 72979
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
72952: LD_VAR 0 3
72956: PPUSH
72957: LD_VAR 0 6
72961: PUSH
72962: LD_INT 2
72964: ARRAY
72965: PPUSH
72966: LD_VAR 0 6
72970: PUSH
72971: LD_INT 3
72973: ARRAY
72974: PPUSH
72975: CALL_OW 117
// break ;
72979: GO 72983
// end ;
72981: GO 72416
72983: POP
72984: POP
// end ; end ;
72985: GO 71254
72987: POP
72988: POP
// end ;
72989: LD_VAR 0 1
72993: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
72994: LD_INT 0
72996: PPUSH
72997: PPUSH
72998: PPUSH
72999: PPUSH
// if not mc_bases then
73000: LD_EXP 50
73004: NOT
73005: IFFALSE 73009
// exit ;
73007: GO 73170
// for i = 1 to mc_bases do
73009: LD_ADDR_VAR 0 2
73013: PUSH
73014: DOUBLE
73015: LD_INT 1
73017: DEC
73018: ST_TO_ADDR
73019: LD_EXP 50
73023: PUSH
73024: FOR_TO
73025: IFFALSE 73168
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
73027: LD_ADDR_VAR 0 4
73031: PUSH
73032: LD_EXP 69
73036: PUSH
73037: LD_VAR 0 2
73041: ARRAY
73042: PUSH
73043: LD_EXP 72
73047: PUSH
73048: LD_VAR 0 2
73052: ARRAY
73053: UNION
73054: PPUSH
73055: LD_INT 33
73057: PUSH
73058: LD_INT 2
73060: PUSH
73061: EMPTY
73062: LIST
73063: LIST
73064: PPUSH
73065: CALL_OW 72
73069: ST_TO_ADDR
// if tmp then
73070: LD_VAR 0 4
73074: IFFALSE 73166
// for j in tmp do
73076: LD_ADDR_VAR 0 3
73080: PUSH
73081: LD_VAR 0 4
73085: PUSH
73086: FOR_IN
73087: IFFALSE 73164
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
73089: LD_VAR 0 3
73093: PPUSH
73094: CALL_OW 312
73098: NOT
73099: PUSH
73100: LD_VAR 0 3
73104: PPUSH
73105: CALL_OW 256
73109: PUSH
73110: LD_INT 250
73112: GREATEREQUAL
73113: AND
73114: IFFALSE 73127
// Connect ( j ) else
73116: LD_VAR 0 3
73120: PPUSH
73121: CALL 27333 0 1
73125: GO 73162
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
73127: LD_VAR 0 3
73131: PPUSH
73132: CALL_OW 256
73136: PUSH
73137: LD_INT 250
73139: LESS
73140: PUSH
73141: LD_VAR 0 3
73145: PPUSH
73146: CALL_OW 312
73150: AND
73151: IFFALSE 73162
// ComUnlink ( j ) ;
73153: LD_VAR 0 3
73157: PPUSH
73158: CALL_OW 136
73162: GO 73086
73164: POP
73165: POP
// end ;
73166: GO 73024
73168: POP
73169: POP
// end ;
73170: LD_VAR 0 1
73174: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
73175: LD_INT 0
73177: PPUSH
73178: PPUSH
73179: PPUSH
73180: PPUSH
73181: PPUSH
// if not mc_bases then
73182: LD_EXP 50
73186: NOT
73187: IFFALSE 73191
// exit ;
73189: GO 73636
// for i = 1 to mc_bases do
73191: LD_ADDR_VAR 0 2
73195: PUSH
73196: DOUBLE
73197: LD_INT 1
73199: DEC
73200: ST_TO_ADDR
73201: LD_EXP 50
73205: PUSH
73206: FOR_TO
73207: IFFALSE 73634
// begin if not mc_produce [ i ] then
73209: LD_EXP 71
73213: PUSH
73214: LD_VAR 0 2
73218: ARRAY
73219: NOT
73220: IFFALSE 73224
// continue ;
73222: GO 73206
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
73224: LD_ADDR_VAR 0 5
73228: PUSH
73229: LD_EXP 50
73233: PUSH
73234: LD_VAR 0 2
73238: ARRAY
73239: PPUSH
73240: LD_INT 30
73242: PUSH
73243: LD_INT 3
73245: PUSH
73246: EMPTY
73247: LIST
73248: LIST
73249: PPUSH
73250: CALL_OW 72
73254: ST_TO_ADDR
// if not fac then
73255: LD_VAR 0 5
73259: NOT
73260: IFFALSE 73264
// continue ;
73262: GO 73206
// for j in fac do
73264: LD_ADDR_VAR 0 3
73268: PUSH
73269: LD_VAR 0 5
73273: PUSH
73274: FOR_IN
73275: IFFALSE 73630
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
73277: LD_VAR 0 3
73281: PPUSH
73282: CALL_OW 461
73286: PUSH
73287: LD_INT 2
73289: NONEQUAL
73290: PUSH
73291: LD_VAR 0 3
73295: PPUSH
73296: LD_INT 15
73298: PPUSH
73299: CALL 26961 0 2
73303: PUSH
73304: LD_INT 4
73306: ARRAY
73307: OR
73308: IFFALSE 73312
// continue ;
73310: GO 73274
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
73312: LD_VAR 0 3
73316: PPUSH
73317: LD_EXP 71
73321: PUSH
73322: LD_VAR 0 2
73326: ARRAY
73327: PUSH
73328: LD_INT 1
73330: ARRAY
73331: PUSH
73332: LD_INT 1
73334: ARRAY
73335: PPUSH
73336: LD_EXP 71
73340: PUSH
73341: LD_VAR 0 2
73345: ARRAY
73346: PUSH
73347: LD_INT 1
73349: ARRAY
73350: PUSH
73351: LD_INT 2
73353: ARRAY
73354: PPUSH
73355: LD_EXP 71
73359: PUSH
73360: LD_VAR 0 2
73364: ARRAY
73365: PUSH
73366: LD_INT 1
73368: ARRAY
73369: PUSH
73370: LD_INT 3
73372: ARRAY
73373: PPUSH
73374: LD_EXP 71
73378: PUSH
73379: LD_VAR 0 2
73383: ARRAY
73384: PUSH
73385: LD_INT 1
73387: ARRAY
73388: PUSH
73389: LD_INT 4
73391: ARRAY
73392: PPUSH
73393: CALL_OW 448
73397: PUSH
73398: LD_VAR 0 3
73402: PPUSH
73403: LD_EXP 71
73407: PUSH
73408: LD_VAR 0 2
73412: ARRAY
73413: PUSH
73414: LD_INT 1
73416: ARRAY
73417: PUSH
73418: LD_INT 1
73420: ARRAY
73421: PUSH
73422: LD_EXP 71
73426: PUSH
73427: LD_VAR 0 2
73431: ARRAY
73432: PUSH
73433: LD_INT 1
73435: ARRAY
73436: PUSH
73437: LD_INT 2
73439: ARRAY
73440: PUSH
73441: LD_EXP 71
73445: PUSH
73446: LD_VAR 0 2
73450: ARRAY
73451: PUSH
73452: LD_INT 1
73454: ARRAY
73455: PUSH
73456: LD_INT 3
73458: ARRAY
73459: PUSH
73460: LD_EXP 71
73464: PUSH
73465: LD_VAR 0 2
73469: ARRAY
73470: PUSH
73471: LD_INT 1
73473: ARRAY
73474: PUSH
73475: LD_INT 4
73477: ARRAY
73478: PUSH
73479: EMPTY
73480: LIST
73481: LIST
73482: LIST
73483: LIST
73484: PPUSH
73485: CALL 30729 0 2
73489: AND
73490: IFFALSE 73628
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
73492: LD_VAR 0 3
73496: PPUSH
73497: LD_EXP 71
73501: PUSH
73502: LD_VAR 0 2
73506: ARRAY
73507: PUSH
73508: LD_INT 1
73510: ARRAY
73511: PUSH
73512: LD_INT 1
73514: ARRAY
73515: PPUSH
73516: LD_EXP 71
73520: PUSH
73521: LD_VAR 0 2
73525: ARRAY
73526: PUSH
73527: LD_INT 1
73529: ARRAY
73530: PUSH
73531: LD_INT 2
73533: ARRAY
73534: PPUSH
73535: LD_EXP 71
73539: PUSH
73540: LD_VAR 0 2
73544: ARRAY
73545: PUSH
73546: LD_INT 1
73548: ARRAY
73549: PUSH
73550: LD_INT 3
73552: ARRAY
73553: PPUSH
73554: LD_EXP 71
73558: PUSH
73559: LD_VAR 0 2
73563: ARRAY
73564: PUSH
73565: LD_INT 1
73567: ARRAY
73568: PUSH
73569: LD_INT 4
73571: ARRAY
73572: PPUSH
73573: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
73577: LD_ADDR_VAR 0 4
73581: PUSH
73582: LD_EXP 71
73586: PUSH
73587: LD_VAR 0 2
73591: ARRAY
73592: PPUSH
73593: LD_INT 1
73595: PPUSH
73596: CALL_OW 3
73600: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
73601: LD_ADDR_EXP 71
73605: PUSH
73606: LD_EXP 71
73610: PPUSH
73611: LD_VAR 0 2
73615: PPUSH
73616: LD_VAR 0 4
73620: PPUSH
73621: CALL_OW 1
73625: ST_TO_ADDR
// break ;
73626: GO 73630
// end ; end ;
73628: GO 73274
73630: POP
73631: POP
// end ;
73632: GO 73206
73634: POP
73635: POP
// end ;
73636: LD_VAR 0 1
73640: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
73641: LD_INT 0
73643: PPUSH
73644: PPUSH
73645: PPUSH
// if not mc_bases then
73646: LD_EXP 50
73650: NOT
73651: IFFALSE 73655
// exit ;
73653: GO 73744
// for i = 1 to mc_bases do
73655: LD_ADDR_VAR 0 2
73659: PUSH
73660: DOUBLE
73661: LD_INT 1
73663: DEC
73664: ST_TO_ADDR
73665: LD_EXP 50
73669: PUSH
73670: FOR_TO
73671: IFFALSE 73742
// begin if mc_attack [ i ] then
73673: LD_EXP 70
73677: PUSH
73678: LD_VAR 0 2
73682: ARRAY
73683: IFFALSE 73740
// begin tmp := mc_attack [ i ] [ 1 ] ;
73685: LD_ADDR_VAR 0 3
73689: PUSH
73690: LD_EXP 70
73694: PUSH
73695: LD_VAR 0 2
73699: ARRAY
73700: PUSH
73701: LD_INT 1
73703: ARRAY
73704: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
73705: LD_ADDR_EXP 70
73709: PUSH
73710: LD_EXP 70
73714: PPUSH
73715: LD_VAR 0 2
73719: PPUSH
73720: EMPTY
73721: PPUSH
73722: CALL_OW 1
73726: ST_TO_ADDR
// Attack ( tmp ) ;
73727: LD_VAR 0 3
73731: PPUSH
73732: CALL 105521 0 1
// exit ;
73736: POP
73737: POP
73738: GO 73744
// end ; end ;
73740: GO 73670
73742: POP
73743: POP
// end ;
73744: LD_VAR 0 1
73748: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
73749: LD_INT 0
73751: PPUSH
73752: PPUSH
73753: PPUSH
73754: PPUSH
73755: PPUSH
73756: PPUSH
73757: PPUSH
// if not mc_bases then
73758: LD_EXP 50
73762: NOT
73763: IFFALSE 73767
// exit ;
73765: GO 74466
// for i = 1 to mc_bases do
73767: LD_ADDR_VAR 0 2
73771: PUSH
73772: DOUBLE
73773: LD_INT 1
73775: DEC
73776: ST_TO_ADDR
73777: LD_EXP 50
73781: PUSH
73782: FOR_TO
73783: IFFALSE 74464
// begin if not mc_bases [ i ] then
73785: LD_EXP 50
73789: PUSH
73790: LD_VAR 0 2
73794: ARRAY
73795: NOT
73796: IFFALSE 73800
// continue ;
73798: GO 73782
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
73800: LD_ADDR_VAR 0 7
73804: PUSH
73805: LD_EXP 50
73809: PUSH
73810: LD_VAR 0 2
73814: ARRAY
73815: PUSH
73816: LD_INT 1
73818: ARRAY
73819: PPUSH
73820: CALL 21162 0 1
73824: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
73825: LD_ADDR_EXP 73
73829: PUSH
73830: LD_EXP 73
73834: PPUSH
73835: LD_VAR 0 2
73839: PPUSH
73840: LD_EXP 50
73844: PUSH
73845: LD_VAR 0 2
73849: ARRAY
73850: PUSH
73851: LD_INT 1
73853: ARRAY
73854: PPUSH
73855: CALL_OW 255
73859: PPUSH
73860: LD_EXP 75
73864: PUSH
73865: LD_VAR 0 2
73869: ARRAY
73870: PPUSH
73871: CALL 21127 0 2
73875: PPUSH
73876: CALL_OW 1
73880: ST_TO_ADDR
// if not mc_scan [ i ] then
73881: LD_EXP 73
73885: PUSH
73886: LD_VAR 0 2
73890: ARRAY
73891: NOT
73892: IFFALSE 74070
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
73894: LD_ADDR_VAR 0 4
73898: PUSH
73899: LD_EXP 50
73903: PUSH
73904: LD_VAR 0 2
73908: ARRAY
73909: PPUSH
73910: LD_INT 2
73912: PUSH
73913: LD_INT 25
73915: PUSH
73916: LD_INT 5
73918: PUSH
73919: EMPTY
73920: LIST
73921: LIST
73922: PUSH
73923: LD_INT 25
73925: PUSH
73926: LD_INT 8
73928: PUSH
73929: EMPTY
73930: LIST
73931: LIST
73932: PUSH
73933: LD_INT 25
73935: PUSH
73936: LD_INT 9
73938: PUSH
73939: EMPTY
73940: LIST
73941: LIST
73942: PUSH
73943: EMPTY
73944: LIST
73945: LIST
73946: LIST
73947: LIST
73948: PPUSH
73949: CALL_OW 72
73953: ST_TO_ADDR
// if not tmp then
73954: LD_VAR 0 4
73958: NOT
73959: IFFALSE 73963
// continue ;
73961: GO 73782
// for j in tmp do
73963: LD_ADDR_VAR 0 3
73967: PUSH
73968: LD_VAR 0 4
73972: PUSH
73973: FOR_IN
73974: IFFALSE 74045
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
73976: LD_VAR 0 3
73980: PPUSH
73981: CALL_OW 310
73985: PPUSH
73986: CALL_OW 266
73990: PUSH
73991: LD_INT 5
73993: EQUAL
73994: PUSH
73995: LD_VAR 0 3
73999: PPUSH
74000: CALL_OW 257
74004: PUSH
74005: LD_INT 1
74007: EQUAL
74008: AND
74009: PUSH
74010: LD_VAR 0 3
74014: PPUSH
74015: CALL_OW 459
74019: NOT
74020: AND
74021: PUSH
74022: LD_VAR 0 7
74026: AND
74027: IFFALSE 74043
// ComChangeProfession ( j , class ) ;
74029: LD_VAR 0 3
74033: PPUSH
74034: LD_VAR 0 7
74038: PPUSH
74039: CALL_OW 123
74043: GO 73973
74045: POP
74046: POP
// mc_is_defending := Replace ( mc_is_defending , i , false ) ;
74047: LD_ADDR_EXP 93
74051: PUSH
74052: LD_EXP 93
74056: PPUSH
74057: LD_VAR 0 2
74061: PPUSH
74062: LD_INT 0
74064: PPUSH
74065: CALL_OW 1
74069: ST_TO_ADDR
// end ; if mc_scan [ i ] and not mc_is_defending [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
74070: LD_EXP 73
74074: PUSH
74075: LD_VAR 0 2
74079: ARRAY
74080: PUSH
74081: LD_EXP 93
74085: PUSH
74086: LD_VAR 0 2
74090: ARRAY
74091: NOT
74092: AND
74093: PUSH
74094: LD_EXP 72
74098: PUSH
74099: LD_VAR 0 2
74103: ARRAY
74104: NOT
74105: AND
74106: PUSH
74107: LD_EXP 50
74111: PUSH
74112: LD_VAR 0 2
74116: ARRAY
74117: PPUSH
74118: LD_INT 30
74120: PUSH
74121: LD_INT 32
74123: PUSH
74124: EMPTY
74125: LIST
74126: LIST
74127: PPUSH
74128: CALL_OW 72
74132: NOT
74133: AND
74134: PUSH
74135: LD_EXP 50
74139: PUSH
74140: LD_VAR 0 2
74144: ARRAY
74145: PPUSH
74146: LD_INT 2
74148: PUSH
74149: LD_INT 30
74151: PUSH
74152: LD_INT 4
74154: PUSH
74155: EMPTY
74156: LIST
74157: LIST
74158: PUSH
74159: LD_INT 30
74161: PUSH
74162: LD_INT 5
74164: PUSH
74165: EMPTY
74166: LIST
74167: LIST
74168: PUSH
74169: EMPTY
74170: LIST
74171: LIST
74172: LIST
74173: PPUSH
74174: CALL_OW 72
74178: NOT
74179: AND
74180: IFFALSE 74335
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
74182: LD_ADDR_VAR 0 4
74186: PUSH
74187: LD_EXP 50
74191: PUSH
74192: LD_VAR 0 2
74196: ARRAY
74197: PPUSH
74198: LD_INT 2
74200: PUSH
74201: LD_INT 25
74203: PUSH
74204: LD_INT 1
74206: PUSH
74207: EMPTY
74208: LIST
74209: LIST
74210: PUSH
74211: LD_INT 25
74213: PUSH
74214: LD_INT 5
74216: PUSH
74217: EMPTY
74218: LIST
74219: LIST
74220: PUSH
74221: LD_INT 25
74223: PUSH
74224: LD_INT 8
74226: PUSH
74227: EMPTY
74228: LIST
74229: LIST
74230: PUSH
74231: LD_INT 25
74233: PUSH
74234: LD_INT 9
74236: PUSH
74237: EMPTY
74238: LIST
74239: LIST
74240: PUSH
74241: EMPTY
74242: LIST
74243: LIST
74244: LIST
74245: LIST
74246: LIST
74247: PPUSH
74248: CALL_OW 72
74252: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
74253: LD_ADDR_VAR 0 4
74257: PUSH
74258: LD_VAR 0 4
74262: PUSH
74263: LD_VAR 0 4
74267: PPUSH
74268: LD_INT 18
74270: PPUSH
74271: CALL 53632 0 2
74275: DIFF
74276: ST_TO_ADDR
// if tmp then
74277: LD_VAR 0 4
74281: IFFALSE 74335
// begin mc_is_defending := Replace ( mc_is_defending , i , true ) ;
74283: LD_ADDR_EXP 93
74287: PUSH
74288: LD_EXP 93
74292: PPUSH
74293: LD_VAR 0 2
74297: PPUSH
74298: LD_INT 1
74300: PPUSH
74301: CALL_OW 1
74305: ST_TO_ADDR
// BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
74306: LD_VAR 0 2
74310: PPUSH
74311: LD_VAR 0 4
74315: PPUSH
74316: LD_EXP 75
74320: PUSH
74321: LD_VAR 0 2
74325: ARRAY
74326: PPUSH
74327: CALL 110230 0 3
// exit ;
74331: POP
74332: POP
74333: GO 74466
// end ; end ; if mc_scan [ i ] and not mc_is_defending [ i ] and mc_defender [ i ] then
74335: LD_EXP 73
74339: PUSH
74340: LD_VAR 0 2
74344: ARRAY
74345: PUSH
74346: LD_EXP 93
74350: PUSH
74351: LD_VAR 0 2
74355: ARRAY
74356: NOT
74357: AND
74358: PUSH
74359: LD_EXP 72
74363: PUSH
74364: LD_VAR 0 2
74368: ARRAY
74369: AND
74370: IFFALSE 74462
// begin tmp := mc_defender [ i ] ;
74372: LD_ADDR_VAR 0 4
74376: PUSH
74377: LD_EXP 72
74381: PUSH
74382: LD_VAR 0 2
74386: ARRAY
74387: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
74388: LD_ADDR_EXP 72
74392: PUSH
74393: LD_EXP 72
74397: PPUSH
74398: LD_VAR 0 2
74402: PPUSH
74403: EMPTY
74404: PPUSH
74405: CALL_OW 1
74409: ST_TO_ADDR
// mc_is_defending := Replace ( mc_is_defending , i , true ) ;
74410: LD_ADDR_EXP 93
74414: PUSH
74415: LD_EXP 93
74419: PPUSH
74420: LD_VAR 0 2
74424: PPUSH
74425: LD_INT 1
74427: PPUSH
74428: CALL_OW 1
74432: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
74433: LD_VAR 0 2
74437: PPUSH
74438: LD_VAR 0 4
74442: PPUSH
74443: LD_EXP 73
74447: PUSH
74448: LD_VAR 0 2
74452: ARRAY
74453: PPUSH
74454: CALL 110791 0 3
// exit ;
74458: POP
74459: POP
74460: GO 74466
// end ; end ;
74462: GO 73782
74464: POP
74465: POP
// end ;
74466: LD_VAR 0 1
74470: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
74471: LD_INT 0
74473: PPUSH
74474: PPUSH
74475: PPUSH
74476: PPUSH
74477: PPUSH
74478: PPUSH
74479: PPUSH
74480: PPUSH
74481: PPUSH
74482: PPUSH
74483: PPUSH
// if not mc_bases then
74484: LD_EXP 50
74488: NOT
74489: IFFALSE 74493
// exit ;
74491: GO 75580
// for i = 1 to mc_bases do
74493: LD_ADDR_VAR 0 2
74497: PUSH
74498: DOUBLE
74499: LD_INT 1
74501: DEC
74502: ST_TO_ADDR
74503: LD_EXP 50
74507: PUSH
74508: FOR_TO
74509: IFFALSE 75578
// begin tmp := mc_lab [ i ] ;
74511: LD_ADDR_VAR 0 6
74515: PUSH
74516: LD_EXP 83
74520: PUSH
74521: LD_VAR 0 2
74525: ARRAY
74526: ST_TO_ADDR
// if not tmp then
74527: LD_VAR 0 6
74531: NOT
74532: IFFALSE 74536
// continue ;
74534: GO 74508
// idle_lab := 0 ;
74536: LD_ADDR_VAR 0 11
74540: PUSH
74541: LD_INT 0
74543: ST_TO_ADDR
// for j in tmp do
74544: LD_ADDR_VAR 0 3
74548: PUSH
74549: LD_VAR 0 6
74553: PUSH
74554: FOR_IN
74555: IFFALSE 75574
// begin researching := false ;
74557: LD_ADDR_VAR 0 10
74561: PUSH
74562: LD_INT 0
74564: ST_TO_ADDR
// side := GetSide ( j ) ;
74565: LD_ADDR_VAR 0 4
74569: PUSH
74570: LD_VAR 0 3
74574: PPUSH
74575: CALL_OW 255
74579: ST_TO_ADDR
// if not mc_tech [ side ] then
74580: LD_EXP 77
74584: PUSH
74585: LD_VAR 0 4
74589: ARRAY
74590: NOT
74591: IFFALSE 74595
// continue ;
74593: GO 74554
// if BuildingStatus ( j ) = bs_idle then
74595: LD_VAR 0 3
74599: PPUSH
74600: CALL_OW 461
74604: PUSH
74605: LD_INT 2
74607: EQUAL
74608: IFFALSE 74796
// begin if idle_lab and UnitsInside ( j ) < 6 then
74610: LD_VAR 0 11
74614: PUSH
74615: LD_VAR 0 3
74619: PPUSH
74620: CALL_OW 313
74624: PUSH
74625: LD_INT 6
74627: LESS
74628: AND
74629: IFFALSE 74700
// begin tmp2 := UnitsInside ( idle_lab ) ;
74631: LD_ADDR_VAR 0 9
74635: PUSH
74636: LD_VAR 0 11
74640: PPUSH
74641: CALL_OW 313
74645: ST_TO_ADDR
// if tmp2 then
74646: LD_VAR 0 9
74650: IFFALSE 74692
// for x in tmp2 do
74652: LD_ADDR_VAR 0 7
74656: PUSH
74657: LD_VAR 0 9
74661: PUSH
74662: FOR_IN
74663: IFFALSE 74690
// begin ComExitBuilding ( x ) ;
74665: LD_VAR 0 7
74669: PPUSH
74670: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
74674: LD_VAR 0 7
74678: PPUSH
74679: LD_VAR 0 3
74683: PPUSH
74684: CALL_OW 180
// end ;
74688: GO 74662
74690: POP
74691: POP
// idle_lab := 0 ;
74692: LD_ADDR_VAR 0 11
74696: PUSH
74697: LD_INT 0
74699: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
74700: LD_ADDR_VAR 0 5
74704: PUSH
74705: LD_EXP 77
74709: PUSH
74710: LD_VAR 0 4
74714: ARRAY
74715: PUSH
74716: FOR_IN
74717: IFFALSE 74777
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
74719: LD_VAR 0 3
74723: PPUSH
74724: LD_VAR 0 5
74728: PPUSH
74729: CALL_OW 430
74733: PUSH
74734: LD_VAR 0 4
74738: PPUSH
74739: LD_VAR 0 5
74743: PPUSH
74744: CALL 20232 0 2
74748: AND
74749: IFFALSE 74775
// begin researching := true ;
74751: LD_ADDR_VAR 0 10
74755: PUSH
74756: LD_INT 1
74758: ST_TO_ADDR
// ComResearch ( j , t ) ;
74759: LD_VAR 0 3
74763: PPUSH
74764: LD_VAR 0 5
74768: PPUSH
74769: CALL_OW 124
// break ;
74773: GO 74777
// end ;
74775: GO 74716
74777: POP
74778: POP
// if not researching then
74779: LD_VAR 0 10
74783: NOT
74784: IFFALSE 74796
// idle_lab := j ;
74786: LD_ADDR_VAR 0 11
74790: PUSH
74791: LD_VAR 0 3
74795: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
74796: LD_VAR 0 3
74800: PPUSH
74801: CALL_OW 461
74805: PUSH
74806: LD_INT 10
74808: EQUAL
74809: IFFALSE 75397
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
74811: LD_EXP 79
74815: PUSH
74816: LD_VAR 0 2
74820: ARRAY
74821: NOT
74822: PUSH
74823: LD_EXP 80
74827: PUSH
74828: LD_VAR 0 2
74832: ARRAY
74833: NOT
74834: AND
74835: PUSH
74836: LD_EXP 77
74840: PUSH
74841: LD_VAR 0 4
74845: ARRAY
74846: PUSH
74847: LD_INT 1
74849: GREATER
74850: AND
74851: IFFALSE 74982
// begin ComCancel ( j ) ;
74853: LD_VAR 0 3
74857: PPUSH
74858: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
74862: LD_ADDR_EXP 77
74866: PUSH
74867: LD_EXP 77
74871: PPUSH
74872: LD_VAR 0 4
74876: PPUSH
74877: LD_EXP 77
74881: PUSH
74882: LD_VAR 0 4
74886: ARRAY
74887: PPUSH
74888: LD_EXP 77
74892: PUSH
74893: LD_VAR 0 4
74897: ARRAY
74898: PUSH
74899: LD_INT 1
74901: MINUS
74902: PPUSH
74903: LD_EXP 77
74907: PUSH
74908: LD_VAR 0 4
74912: ARRAY
74913: PPUSH
74914: LD_INT 0
74916: PPUSH
74917: CALL 23780 0 4
74921: PPUSH
74922: CALL_OW 1
74926: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
74927: LD_ADDR_EXP 77
74931: PUSH
74932: LD_EXP 77
74936: PPUSH
74937: LD_VAR 0 4
74941: PPUSH
74942: LD_EXP 77
74946: PUSH
74947: LD_VAR 0 4
74951: ARRAY
74952: PPUSH
74953: LD_EXP 77
74957: PUSH
74958: LD_VAR 0 4
74962: ARRAY
74963: PPUSH
74964: LD_INT 1
74966: PPUSH
74967: LD_INT 0
74969: PPUSH
74970: CALL 23780 0 4
74974: PPUSH
74975: CALL_OW 1
74979: ST_TO_ADDR
// continue ;
74980: GO 74554
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
74982: LD_EXP 79
74986: PUSH
74987: LD_VAR 0 2
74991: ARRAY
74992: PUSH
74993: LD_EXP 80
74997: PUSH
74998: LD_VAR 0 2
75002: ARRAY
75003: NOT
75004: AND
75005: IFFALSE 75132
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
75007: LD_ADDR_EXP 80
75011: PUSH
75012: LD_EXP 80
75016: PPUSH
75017: LD_VAR 0 2
75021: PUSH
75022: LD_EXP 80
75026: PUSH
75027: LD_VAR 0 2
75031: ARRAY
75032: PUSH
75033: LD_INT 1
75035: PLUS
75036: PUSH
75037: EMPTY
75038: LIST
75039: LIST
75040: PPUSH
75041: LD_EXP 79
75045: PUSH
75046: LD_VAR 0 2
75050: ARRAY
75051: PUSH
75052: LD_INT 1
75054: ARRAY
75055: PPUSH
75056: CALL 24362 0 3
75060: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
75061: LD_EXP 79
75065: PUSH
75066: LD_VAR 0 2
75070: ARRAY
75071: PUSH
75072: LD_INT 1
75074: ARRAY
75075: PPUSH
75076: LD_INT 112
75078: PPUSH
75079: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
75083: LD_ADDR_VAR 0 9
75087: PUSH
75088: LD_EXP 79
75092: PUSH
75093: LD_VAR 0 2
75097: ARRAY
75098: PPUSH
75099: LD_INT 1
75101: PPUSH
75102: CALL_OW 3
75106: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
75107: LD_ADDR_EXP 79
75111: PUSH
75112: LD_EXP 79
75116: PPUSH
75117: LD_VAR 0 2
75121: PPUSH
75122: LD_VAR 0 9
75126: PPUSH
75127: CALL_OW 1
75131: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
75132: LD_EXP 79
75136: PUSH
75137: LD_VAR 0 2
75141: ARRAY
75142: PUSH
75143: LD_EXP 80
75147: PUSH
75148: LD_VAR 0 2
75152: ARRAY
75153: AND
75154: PUSH
75155: LD_EXP 80
75159: PUSH
75160: LD_VAR 0 2
75164: ARRAY
75165: PUSH
75166: LD_INT 1
75168: ARRAY
75169: PPUSH
75170: CALL_OW 310
75174: NOT
75175: AND
75176: PUSH
75177: LD_VAR 0 3
75181: PPUSH
75182: CALL_OW 313
75186: PUSH
75187: LD_INT 6
75189: EQUAL
75190: AND
75191: IFFALSE 75247
// begin tmp2 := UnitsInside ( j ) ;
75193: LD_ADDR_VAR 0 9
75197: PUSH
75198: LD_VAR 0 3
75202: PPUSH
75203: CALL_OW 313
75207: ST_TO_ADDR
// if tmp2 = 6 then
75208: LD_VAR 0 9
75212: PUSH
75213: LD_INT 6
75215: EQUAL
75216: IFFALSE 75247
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
75218: LD_VAR 0 9
75222: PUSH
75223: LD_INT 1
75225: ARRAY
75226: PPUSH
75227: LD_INT 112
75229: PPUSH
75230: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
75234: LD_VAR 0 9
75238: PUSH
75239: LD_INT 1
75241: ARRAY
75242: PPUSH
75243: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
75247: LD_EXP 80
75251: PUSH
75252: LD_VAR 0 2
75256: ARRAY
75257: PUSH
75258: LD_EXP 80
75262: PUSH
75263: LD_VAR 0 2
75267: ARRAY
75268: PUSH
75269: LD_INT 1
75271: ARRAY
75272: PPUSH
75273: CALL_OW 314
75277: NOT
75278: AND
75279: PUSH
75280: LD_EXP 80
75284: PUSH
75285: LD_VAR 0 2
75289: ARRAY
75290: PUSH
75291: LD_INT 1
75293: ARRAY
75294: PPUSH
75295: CALL_OW 310
75299: NOT
75300: AND
75301: IFFALSE 75327
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
75303: LD_EXP 80
75307: PUSH
75308: LD_VAR 0 2
75312: ARRAY
75313: PUSH
75314: LD_INT 1
75316: ARRAY
75317: PPUSH
75318: LD_VAR 0 3
75322: PPUSH
75323: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
75327: LD_EXP 80
75331: PUSH
75332: LD_VAR 0 2
75336: ARRAY
75337: PUSH
75338: LD_INT 1
75340: ARRAY
75341: PPUSH
75342: CALL_OW 310
75346: PUSH
75347: LD_EXP 80
75351: PUSH
75352: LD_VAR 0 2
75356: ARRAY
75357: PUSH
75358: LD_INT 1
75360: ARRAY
75361: PPUSH
75362: CALL_OW 310
75366: PPUSH
75367: CALL_OW 461
75371: PUSH
75372: LD_INT 3
75374: NONEQUAL
75375: AND
75376: IFFALSE 75397
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
75378: LD_EXP 80
75382: PUSH
75383: LD_VAR 0 2
75387: ARRAY
75388: PUSH
75389: LD_INT 1
75391: ARRAY
75392: PPUSH
75393: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
75397: LD_VAR 0 3
75401: PPUSH
75402: CALL_OW 461
75406: PUSH
75407: LD_INT 6
75409: EQUAL
75410: PUSH
75411: LD_VAR 0 6
75415: PUSH
75416: LD_INT 1
75418: GREATER
75419: AND
75420: IFFALSE 75572
// begin sci := [ ] ;
75422: LD_ADDR_VAR 0 8
75426: PUSH
75427: EMPTY
75428: ST_TO_ADDR
// for x in ( tmp diff j ) do
75429: LD_ADDR_VAR 0 7
75433: PUSH
75434: LD_VAR 0 6
75438: PUSH
75439: LD_VAR 0 3
75443: DIFF
75444: PUSH
75445: FOR_IN
75446: IFFALSE 75498
// begin if sci = 6 then
75448: LD_VAR 0 8
75452: PUSH
75453: LD_INT 6
75455: EQUAL
75456: IFFALSE 75460
// break ;
75458: GO 75498
// if BuildingStatus ( x ) = bs_idle then
75460: LD_VAR 0 7
75464: PPUSH
75465: CALL_OW 461
75469: PUSH
75470: LD_INT 2
75472: EQUAL
75473: IFFALSE 75496
// sci := sci ^ UnitsInside ( x ) ;
75475: LD_ADDR_VAR 0 8
75479: PUSH
75480: LD_VAR 0 8
75484: PUSH
75485: LD_VAR 0 7
75489: PPUSH
75490: CALL_OW 313
75494: ADD
75495: ST_TO_ADDR
// end ;
75496: GO 75445
75498: POP
75499: POP
// if not sci then
75500: LD_VAR 0 8
75504: NOT
75505: IFFALSE 75509
// continue ;
75507: GO 74554
// for x in sci do
75509: LD_ADDR_VAR 0 7
75513: PUSH
75514: LD_VAR 0 8
75518: PUSH
75519: FOR_IN
75520: IFFALSE 75570
// if IsInUnit ( x ) and not HasTask ( x ) then
75522: LD_VAR 0 7
75526: PPUSH
75527: CALL_OW 310
75531: PUSH
75532: LD_VAR 0 7
75536: PPUSH
75537: CALL_OW 314
75541: NOT
75542: AND
75543: IFFALSE 75568
// begin ComExitBuilding ( x ) ;
75545: LD_VAR 0 7
75549: PPUSH
75550: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
75554: LD_VAR 0 7
75558: PPUSH
75559: LD_VAR 0 3
75563: PPUSH
75564: CALL_OW 180
// end ;
75568: GO 75519
75570: POP
75571: POP
// end ; end ;
75572: GO 74554
75574: POP
75575: POP
// end ;
75576: GO 74508
75578: POP
75579: POP
// end ;
75580: LD_VAR 0 1
75584: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
75585: LD_INT 0
75587: PPUSH
75588: PPUSH
// if not mc_bases then
75589: LD_EXP 50
75593: NOT
75594: IFFALSE 75598
// exit ;
75596: GO 75679
// for i = 1 to mc_bases do
75598: LD_ADDR_VAR 0 2
75602: PUSH
75603: DOUBLE
75604: LD_INT 1
75606: DEC
75607: ST_TO_ADDR
75608: LD_EXP 50
75612: PUSH
75613: FOR_TO
75614: IFFALSE 75677
// if mc_mines [ i ] and mc_miners [ i ] then
75616: LD_EXP 63
75620: PUSH
75621: LD_VAR 0 2
75625: ARRAY
75626: PUSH
75627: LD_EXP 64
75631: PUSH
75632: LD_VAR 0 2
75636: ARRAY
75637: AND
75638: IFFALSE 75675
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
75640: LD_EXP 64
75644: PUSH
75645: LD_VAR 0 2
75649: ARRAY
75650: PUSH
75651: LD_INT 1
75653: ARRAY
75654: PPUSH
75655: CALL_OW 255
75659: PPUSH
75660: LD_EXP 63
75664: PUSH
75665: LD_VAR 0 2
75669: ARRAY
75670: PPUSH
75671: CALL 21315 0 2
75675: GO 75613
75677: POP
75678: POP
// end ;
75679: LD_VAR 0 1
75683: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
75684: LD_INT 0
75686: PPUSH
75687: PPUSH
75688: PPUSH
75689: PPUSH
75690: PPUSH
75691: PPUSH
75692: PPUSH
75693: PPUSH
// if not mc_bases or not mc_parking then
75694: LD_EXP 50
75698: NOT
75699: PUSH
75700: LD_EXP 74
75704: NOT
75705: OR
75706: IFFALSE 75710
// exit ;
75708: GO 76409
// for i = 1 to mc_bases do
75710: LD_ADDR_VAR 0 2
75714: PUSH
75715: DOUBLE
75716: LD_INT 1
75718: DEC
75719: ST_TO_ADDR
75720: LD_EXP 50
75724: PUSH
75725: FOR_TO
75726: IFFALSE 76407
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
75728: LD_EXP 50
75732: PUSH
75733: LD_VAR 0 2
75737: ARRAY
75738: NOT
75739: PUSH
75740: LD_EXP 74
75744: PUSH
75745: LD_VAR 0 2
75749: ARRAY
75750: NOT
75751: OR
75752: IFFALSE 75756
// continue ;
75754: GO 75725
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
75756: LD_ADDR_VAR 0 5
75760: PUSH
75761: LD_EXP 50
75765: PUSH
75766: LD_VAR 0 2
75770: ARRAY
75771: PUSH
75772: LD_INT 1
75774: ARRAY
75775: PPUSH
75776: CALL_OW 255
75780: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
75781: LD_ADDR_VAR 0 6
75785: PUSH
75786: LD_EXP 50
75790: PUSH
75791: LD_VAR 0 2
75795: ARRAY
75796: PPUSH
75797: LD_INT 30
75799: PUSH
75800: LD_INT 3
75802: PUSH
75803: EMPTY
75804: LIST
75805: LIST
75806: PPUSH
75807: CALL_OW 72
75811: ST_TO_ADDR
// if not fac then
75812: LD_VAR 0 6
75816: NOT
75817: IFFALSE 75868
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
75819: LD_ADDR_VAR 0 6
75823: PUSH
75824: LD_EXP 50
75828: PUSH
75829: LD_VAR 0 2
75833: ARRAY
75834: PPUSH
75835: LD_INT 2
75837: PUSH
75838: LD_INT 30
75840: PUSH
75841: LD_INT 0
75843: PUSH
75844: EMPTY
75845: LIST
75846: LIST
75847: PUSH
75848: LD_INT 30
75850: PUSH
75851: LD_INT 1
75853: PUSH
75854: EMPTY
75855: LIST
75856: LIST
75857: PUSH
75858: EMPTY
75859: LIST
75860: LIST
75861: LIST
75862: PPUSH
75863: CALL_OW 72
75867: ST_TO_ADDR
// if not fac then
75868: LD_VAR 0 6
75872: NOT
75873: IFFALSE 75877
// continue ;
75875: GO 75725
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
75877: LD_ADDR_VAR 0 7
75881: PUSH
75882: LD_EXP 74
75886: PUSH
75887: LD_VAR 0 2
75891: ARRAY
75892: PPUSH
75893: LD_INT 22
75895: PUSH
75896: LD_VAR 0 5
75900: PUSH
75901: EMPTY
75902: LIST
75903: LIST
75904: PUSH
75905: LD_INT 21
75907: PUSH
75908: LD_INT 2
75910: PUSH
75911: EMPTY
75912: LIST
75913: LIST
75914: PUSH
75915: LD_INT 3
75917: PUSH
75918: LD_INT 24
75920: PUSH
75921: LD_INT 1000
75923: PUSH
75924: EMPTY
75925: LIST
75926: LIST
75927: PUSH
75928: EMPTY
75929: LIST
75930: LIST
75931: PUSH
75932: EMPTY
75933: LIST
75934: LIST
75935: LIST
75936: PPUSH
75937: CALL_OW 70
75941: ST_TO_ADDR
// for j in fac do
75942: LD_ADDR_VAR 0 3
75946: PUSH
75947: LD_VAR 0 6
75951: PUSH
75952: FOR_IN
75953: IFFALSE 76034
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
75955: LD_ADDR_VAR 0 7
75959: PUSH
75960: LD_VAR 0 7
75964: PUSH
75965: LD_INT 22
75967: PUSH
75968: LD_VAR 0 5
75972: PUSH
75973: EMPTY
75974: LIST
75975: LIST
75976: PUSH
75977: LD_INT 91
75979: PUSH
75980: LD_VAR 0 3
75984: PUSH
75985: LD_INT 15
75987: PUSH
75988: EMPTY
75989: LIST
75990: LIST
75991: LIST
75992: PUSH
75993: LD_INT 21
75995: PUSH
75996: LD_INT 2
75998: PUSH
75999: EMPTY
76000: LIST
76001: LIST
76002: PUSH
76003: LD_INT 3
76005: PUSH
76006: LD_INT 24
76008: PUSH
76009: LD_INT 1000
76011: PUSH
76012: EMPTY
76013: LIST
76014: LIST
76015: PUSH
76016: EMPTY
76017: LIST
76018: LIST
76019: PUSH
76020: EMPTY
76021: LIST
76022: LIST
76023: LIST
76024: LIST
76025: PPUSH
76026: CALL_OW 69
76030: UNION
76031: ST_TO_ADDR
76032: GO 75952
76034: POP
76035: POP
// if not vehs then
76036: LD_VAR 0 7
76040: NOT
76041: IFFALSE 76067
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
76043: LD_ADDR_EXP 62
76047: PUSH
76048: LD_EXP 62
76052: PPUSH
76053: LD_VAR 0 2
76057: PPUSH
76058: EMPTY
76059: PPUSH
76060: CALL_OW 1
76064: ST_TO_ADDR
// continue ;
76065: GO 75725
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
76067: LD_ADDR_VAR 0 8
76071: PUSH
76072: LD_EXP 50
76076: PUSH
76077: LD_VAR 0 2
76081: ARRAY
76082: PPUSH
76083: LD_INT 30
76085: PUSH
76086: LD_INT 3
76088: PUSH
76089: EMPTY
76090: LIST
76091: LIST
76092: PPUSH
76093: CALL_OW 72
76097: ST_TO_ADDR
// if tmp then
76098: LD_VAR 0 8
76102: IFFALSE 76205
// begin for j in tmp do
76104: LD_ADDR_VAR 0 3
76108: PUSH
76109: LD_VAR 0 8
76113: PUSH
76114: FOR_IN
76115: IFFALSE 76203
// for k in UnitsInside ( j ) do
76117: LD_ADDR_VAR 0 4
76121: PUSH
76122: LD_VAR 0 3
76126: PPUSH
76127: CALL_OW 313
76131: PUSH
76132: FOR_IN
76133: IFFALSE 76199
// if k then
76135: LD_VAR 0 4
76139: IFFALSE 76197
// if not k in mc_repair_vehicle [ i ] then
76141: LD_VAR 0 4
76145: PUSH
76146: LD_EXP 62
76150: PUSH
76151: LD_VAR 0 2
76155: ARRAY
76156: IN
76157: NOT
76158: IFFALSE 76197
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
76160: LD_ADDR_EXP 62
76164: PUSH
76165: LD_EXP 62
76169: PPUSH
76170: LD_VAR 0 2
76174: PPUSH
76175: LD_EXP 62
76179: PUSH
76180: LD_VAR 0 2
76184: ARRAY
76185: PUSH
76186: LD_VAR 0 4
76190: UNION
76191: PPUSH
76192: CALL_OW 1
76196: ST_TO_ADDR
76197: GO 76132
76199: POP
76200: POP
76201: GO 76114
76203: POP
76204: POP
// end ; if not mc_repair_vehicle [ i ] then
76205: LD_EXP 62
76209: PUSH
76210: LD_VAR 0 2
76214: ARRAY
76215: NOT
76216: IFFALSE 76220
// continue ;
76218: GO 75725
// for j in mc_repair_vehicle [ i ] do
76220: LD_ADDR_VAR 0 3
76224: PUSH
76225: LD_EXP 62
76229: PUSH
76230: LD_VAR 0 2
76234: ARRAY
76235: PUSH
76236: FOR_IN
76237: IFFALSE 76403
// begin if GetClass ( j ) <> 3 then
76239: LD_VAR 0 3
76243: PPUSH
76244: CALL_OW 257
76248: PUSH
76249: LD_INT 3
76251: NONEQUAL
76252: IFFALSE 76293
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
76254: LD_ADDR_EXP 62
76258: PUSH
76259: LD_EXP 62
76263: PPUSH
76264: LD_VAR 0 2
76268: PPUSH
76269: LD_EXP 62
76273: PUSH
76274: LD_VAR 0 2
76278: ARRAY
76279: PUSH
76280: LD_VAR 0 3
76284: DIFF
76285: PPUSH
76286: CALL_OW 1
76290: ST_TO_ADDR
// continue ;
76291: GO 76236
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
76293: LD_VAR 0 3
76297: PPUSH
76298: CALL_OW 311
76302: NOT
76303: PUSH
76304: LD_VAR 0 3
76308: PUSH
76309: LD_EXP 53
76313: PUSH
76314: LD_VAR 0 2
76318: ARRAY
76319: PUSH
76320: LD_INT 1
76322: ARRAY
76323: IN
76324: NOT
76325: AND
76326: PUSH
76327: LD_VAR 0 3
76331: PUSH
76332: LD_EXP 53
76336: PUSH
76337: LD_VAR 0 2
76341: ARRAY
76342: PUSH
76343: LD_INT 2
76345: ARRAY
76346: IN
76347: NOT
76348: AND
76349: IFFALSE 76401
// begin if IsInUnit ( j ) then
76351: LD_VAR 0 3
76355: PPUSH
76356: CALL_OW 310
76360: IFFALSE 76371
// ComExitBuilding ( j ) ;
76362: LD_VAR 0 3
76366: PPUSH
76367: CALL_OW 122
// if not HasTask ( j ) then
76371: LD_VAR 0 3
76375: PPUSH
76376: CALL_OW 314
76380: NOT
76381: IFFALSE 76401
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
76383: LD_VAR 0 3
76387: PPUSH
76388: LD_VAR 0 7
76392: PUSH
76393: LD_INT 1
76395: ARRAY
76396: PPUSH
76397: CALL_OW 189
// end ; end ;
76401: GO 76236
76403: POP
76404: POP
// end ;
76405: GO 75725
76407: POP
76408: POP
// end ;
76409: LD_VAR 0 1
76413: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
76414: LD_INT 0
76416: PPUSH
76417: PPUSH
76418: PPUSH
76419: PPUSH
76420: PPUSH
76421: PPUSH
76422: PPUSH
76423: PPUSH
76424: PPUSH
76425: PPUSH
76426: PPUSH
// if not mc_bases then
76427: LD_EXP 50
76431: NOT
76432: IFFALSE 76436
// exit ;
76434: GO 77238
// for i = 1 to mc_bases do
76436: LD_ADDR_VAR 0 2
76440: PUSH
76441: DOUBLE
76442: LD_INT 1
76444: DEC
76445: ST_TO_ADDR
76446: LD_EXP 50
76450: PUSH
76451: FOR_TO
76452: IFFALSE 77236
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
76454: LD_EXP 78
76458: PUSH
76459: LD_VAR 0 2
76463: ARRAY
76464: NOT
76465: PUSH
76466: LD_EXP 53
76470: PUSH
76471: LD_VAR 0 2
76475: ARRAY
76476: PUSH
76477: LD_INT 1
76479: ARRAY
76480: OR
76481: PUSH
76482: LD_EXP 53
76486: PUSH
76487: LD_VAR 0 2
76491: ARRAY
76492: PUSH
76493: LD_INT 2
76495: ARRAY
76496: OR
76497: PUSH
76498: LD_EXP 76
76502: PUSH
76503: LD_VAR 0 2
76507: ARRAY
76508: PPUSH
76509: LD_INT 1
76511: PPUSH
76512: CALL_OW 325
76516: NOT
76517: OR
76518: PUSH
76519: LD_EXP 73
76523: PUSH
76524: LD_VAR 0 2
76528: ARRAY
76529: OR
76530: IFFALSE 76534
// continue ;
76532: GO 76451
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
76534: LD_ADDR_VAR 0 8
76538: PUSH
76539: LD_EXP 50
76543: PUSH
76544: LD_VAR 0 2
76548: ARRAY
76549: PPUSH
76550: LD_INT 25
76552: PUSH
76553: LD_INT 4
76555: PUSH
76556: EMPTY
76557: LIST
76558: LIST
76559: PUSH
76560: LD_INT 50
76562: PUSH
76563: EMPTY
76564: LIST
76565: PUSH
76566: LD_INT 3
76568: PUSH
76569: LD_INT 60
76571: PUSH
76572: EMPTY
76573: LIST
76574: PUSH
76575: EMPTY
76576: LIST
76577: LIST
76578: PUSH
76579: EMPTY
76580: LIST
76581: LIST
76582: LIST
76583: PPUSH
76584: CALL_OW 72
76588: PUSH
76589: LD_EXP 54
76593: PUSH
76594: LD_VAR 0 2
76598: ARRAY
76599: DIFF
76600: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
76601: LD_ADDR_VAR 0 9
76605: PUSH
76606: LD_EXP 50
76610: PUSH
76611: LD_VAR 0 2
76615: ARRAY
76616: PPUSH
76617: LD_INT 2
76619: PUSH
76620: LD_INT 30
76622: PUSH
76623: LD_INT 0
76625: PUSH
76626: EMPTY
76627: LIST
76628: LIST
76629: PUSH
76630: LD_INT 30
76632: PUSH
76633: LD_INT 1
76635: PUSH
76636: EMPTY
76637: LIST
76638: LIST
76639: PUSH
76640: EMPTY
76641: LIST
76642: LIST
76643: LIST
76644: PPUSH
76645: CALL_OW 72
76649: ST_TO_ADDR
// if not tmp or not dep then
76650: LD_VAR 0 8
76654: NOT
76655: PUSH
76656: LD_VAR 0 9
76660: NOT
76661: OR
76662: IFFALSE 76666
// continue ;
76664: GO 76451
// side := GetSide ( tmp [ 1 ] ) ;
76666: LD_ADDR_VAR 0 11
76670: PUSH
76671: LD_VAR 0 8
76675: PUSH
76676: LD_INT 1
76678: ARRAY
76679: PPUSH
76680: CALL_OW 255
76684: ST_TO_ADDR
// dep := dep [ 1 ] ;
76685: LD_ADDR_VAR 0 9
76689: PUSH
76690: LD_VAR 0 9
76694: PUSH
76695: LD_INT 1
76697: ARRAY
76698: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
76699: LD_ADDR_VAR 0 7
76703: PUSH
76704: LD_EXP 78
76708: PUSH
76709: LD_VAR 0 2
76713: ARRAY
76714: PPUSH
76715: LD_INT 22
76717: PUSH
76718: LD_INT 0
76720: PUSH
76721: EMPTY
76722: LIST
76723: LIST
76724: PUSH
76725: LD_INT 25
76727: PUSH
76728: LD_INT 12
76730: PUSH
76731: EMPTY
76732: LIST
76733: LIST
76734: PUSH
76735: EMPTY
76736: LIST
76737: LIST
76738: PPUSH
76739: CALL_OW 70
76743: PUSH
76744: LD_INT 22
76746: PUSH
76747: LD_INT 0
76749: PUSH
76750: EMPTY
76751: LIST
76752: LIST
76753: PUSH
76754: LD_INT 25
76756: PUSH
76757: LD_INT 12
76759: PUSH
76760: EMPTY
76761: LIST
76762: LIST
76763: PUSH
76764: LD_INT 91
76766: PUSH
76767: LD_VAR 0 9
76771: PUSH
76772: LD_INT 20
76774: PUSH
76775: EMPTY
76776: LIST
76777: LIST
76778: LIST
76779: PUSH
76780: EMPTY
76781: LIST
76782: LIST
76783: LIST
76784: PPUSH
76785: CALL_OW 69
76789: UNION
76790: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
76791: LD_ADDR_VAR 0 10
76795: PUSH
76796: LD_EXP 78
76800: PUSH
76801: LD_VAR 0 2
76805: ARRAY
76806: PPUSH
76807: LD_INT 81
76809: PUSH
76810: LD_VAR 0 11
76814: PUSH
76815: EMPTY
76816: LIST
76817: LIST
76818: PPUSH
76819: CALL_OW 70
76823: ST_TO_ADDR
// if not apes or danger_at_area then
76824: LD_VAR 0 7
76828: NOT
76829: PUSH
76830: LD_VAR 0 10
76834: OR
76835: IFFALSE 76885
// begin if mc_taming [ i ] then
76837: LD_EXP 81
76841: PUSH
76842: LD_VAR 0 2
76846: ARRAY
76847: IFFALSE 76883
// begin MC_Reset ( i , 121 ) ;
76849: LD_VAR 0 2
76853: PPUSH
76854: LD_INT 121
76856: PPUSH
76857: CALL 62172 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
76861: LD_ADDR_EXP 81
76865: PUSH
76866: LD_EXP 81
76870: PPUSH
76871: LD_VAR 0 2
76875: PPUSH
76876: EMPTY
76877: PPUSH
76878: CALL_OW 1
76882: ST_TO_ADDR
// end ; continue ;
76883: GO 76451
// end ; for j in tmp do
76885: LD_ADDR_VAR 0 3
76889: PUSH
76890: LD_VAR 0 8
76894: PUSH
76895: FOR_IN
76896: IFFALSE 77232
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
76898: LD_VAR 0 3
76902: PUSH
76903: LD_EXP 81
76907: PUSH
76908: LD_VAR 0 2
76912: ARRAY
76913: IN
76914: NOT
76915: PUSH
76916: LD_EXP 81
76920: PUSH
76921: LD_VAR 0 2
76925: ARRAY
76926: PUSH
76927: LD_INT 3
76929: LESS
76930: AND
76931: IFFALSE 76989
// begin SetTag ( j , 121 ) ;
76933: LD_VAR 0 3
76937: PPUSH
76938: LD_INT 121
76940: PPUSH
76941: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
76945: LD_ADDR_EXP 81
76949: PUSH
76950: LD_EXP 81
76954: PPUSH
76955: LD_VAR 0 2
76959: PUSH
76960: LD_EXP 81
76964: PUSH
76965: LD_VAR 0 2
76969: ARRAY
76970: PUSH
76971: LD_INT 1
76973: PLUS
76974: PUSH
76975: EMPTY
76976: LIST
76977: LIST
76978: PPUSH
76979: LD_VAR 0 3
76983: PPUSH
76984: CALL 24362 0 3
76988: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
76989: LD_VAR 0 3
76993: PUSH
76994: LD_EXP 81
76998: PUSH
76999: LD_VAR 0 2
77003: ARRAY
77004: IN
77005: IFFALSE 77230
// begin if GetClass ( j ) <> 4 then
77007: LD_VAR 0 3
77011: PPUSH
77012: CALL_OW 257
77016: PUSH
77017: LD_INT 4
77019: NONEQUAL
77020: IFFALSE 77073
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
77022: LD_ADDR_EXP 81
77026: PUSH
77027: LD_EXP 81
77031: PPUSH
77032: LD_VAR 0 2
77036: PPUSH
77037: LD_EXP 81
77041: PUSH
77042: LD_VAR 0 2
77046: ARRAY
77047: PUSH
77048: LD_VAR 0 3
77052: DIFF
77053: PPUSH
77054: CALL_OW 1
77058: ST_TO_ADDR
// SetTag ( j , 0 ) ;
77059: LD_VAR 0 3
77063: PPUSH
77064: LD_INT 0
77066: PPUSH
77067: CALL_OW 109
// continue ;
77071: GO 76895
// end ; if IsInUnit ( j ) then
77073: LD_VAR 0 3
77077: PPUSH
77078: CALL_OW 310
77082: IFFALSE 77093
// ComExitBuilding ( j ) ;
77084: LD_VAR 0 3
77088: PPUSH
77089: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
77093: LD_ADDR_VAR 0 6
77097: PUSH
77098: LD_VAR 0 7
77102: PPUSH
77103: LD_VAR 0 3
77107: PPUSH
77108: CALL_OW 74
77112: ST_TO_ADDR
// if not ape then
77113: LD_VAR 0 6
77117: NOT
77118: IFFALSE 77122
// break ;
77120: GO 77232
// x := GetX ( ape ) ;
77122: LD_ADDR_VAR 0 4
77126: PUSH
77127: LD_VAR 0 6
77131: PPUSH
77132: CALL_OW 250
77136: ST_TO_ADDR
// y := GetY ( ape ) ;
77137: LD_ADDR_VAR 0 5
77141: PUSH
77142: LD_VAR 0 6
77146: PPUSH
77147: CALL_OW 251
77151: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
77152: LD_VAR 0 4
77156: PPUSH
77157: LD_VAR 0 5
77161: PPUSH
77162: CALL_OW 488
77166: NOT
77167: PUSH
77168: LD_VAR 0 11
77172: PPUSH
77173: LD_VAR 0 4
77177: PPUSH
77178: LD_VAR 0 5
77182: PPUSH
77183: LD_INT 20
77185: PPUSH
77186: CALL 25258 0 4
77190: PUSH
77191: LD_INT 4
77193: ARRAY
77194: OR
77195: IFFALSE 77199
// break ;
77197: GO 77232
// if not HasTask ( j ) then
77199: LD_VAR 0 3
77203: PPUSH
77204: CALL_OW 314
77208: NOT
77209: IFFALSE 77230
// ComTameXY ( j , x , y ) ;
77211: LD_VAR 0 3
77215: PPUSH
77216: LD_VAR 0 4
77220: PPUSH
77221: LD_VAR 0 5
77225: PPUSH
77226: CALL_OW 131
// end ; end ;
77230: GO 76895
77232: POP
77233: POP
// end ;
77234: GO 76451
77236: POP
77237: POP
// end ;
77238: LD_VAR 0 1
77242: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
77243: LD_INT 0
77245: PPUSH
77246: PPUSH
77247: PPUSH
77248: PPUSH
77249: PPUSH
77250: PPUSH
77251: PPUSH
77252: PPUSH
// if not mc_bases then
77253: LD_EXP 50
77257: NOT
77258: IFFALSE 77262
// exit ;
77260: GO 77888
// for i = 1 to mc_bases do
77262: LD_ADDR_VAR 0 2
77266: PUSH
77267: DOUBLE
77268: LD_INT 1
77270: DEC
77271: ST_TO_ADDR
77272: LD_EXP 50
77276: PUSH
77277: FOR_TO
77278: IFFALSE 77886
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
77280: LD_EXP 79
77284: PUSH
77285: LD_VAR 0 2
77289: ARRAY
77290: NOT
77291: PUSH
77292: LD_EXP 79
77296: PUSH
77297: LD_VAR 0 2
77301: ARRAY
77302: PPUSH
77303: LD_INT 25
77305: PUSH
77306: LD_INT 12
77308: PUSH
77309: EMPTY
77310: LIST
77311: LIST
77312: PPUSH
77313: CALL_OW 72
77317: NOT
77318: OR
77319: IFFALSE 77323
// continue ;
77321: GO 77277
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
77323: LD_ADDR_VAR 0 5
77327: PUSH
77328: LD_EXP 79
77332: PUSH
77333: LD_VAR 0 2
77337: ARRAY
77338: PUSH
77339: LD_INT 1
77341: ARRAY
77342: PPUSH
77343: CALL_OW 255
77347: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
77348: LD_VAR 0 5
77352: PPUSH
77353: LD_INT 2
77355: PPUSH
77356: CALL_OW 325
77360: IFFALSE 77613
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
77362: LD_ADDR_VAR 0 4
77366: PUSH
77367: LD_EXP 79
77371: PUSH
77372: LD_VAR 0 2
77376: ARRAY
77377: PPUSH
77378: LD_INT 25
77380: PUSH
77381: LD_INT 16
77383: PUSH
77384: EMPTY
77385: LIST
77386: LIST
77387: PPUSH
77388: CALL_OW 72
77392: ST_TO_ADDR
// if tmp < 6 then
77393: LD_VAR 0 4
77397: PUSH
77398: LD_INT 6
77400: LESS
77401: IFFALSE 77613
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
77403: LD_ADDR_VAR 0 6
77407: PUSH
77408: LD_EXP 50
77412: PUSH
77413: LD_VAR 0 2
77417: ARRAY
77418: PPUSH
77419: LD_INT 2
77421: PUSH
77422: LD_INT 30
77424: PUSH
77425: LD_INT 0
77427: PUSH
77428: EMPTY
77429: LIST
77430: LIST
77431: PUSH
77432: LD_INT 30
77434: PUSH
77435: LD_INT 1
77437: PUSH
77438: EMPTY
77439: LIST
77440: LIST
77441: PUSH
77442: EMPTY
77443: LIST
77444: LIST
77445: LIST
77446: PPUSH
77447: CALL_OW 72
77451: ST_TO_ADDR
// if depot then
77452: LD_VAR 0 6
77456: IFFALSE 77613
// begin selected := 0 ;
77458: LD_ADDR_VAR 0 7
77462: PUSH
77463: LD_INT 0
77465: ST_TO_ADDR
// for j in depot do
77466: LD_ADDR_VAR 0 3
77470: PUSH
77471: LD_VAR 0 6
77475: PUSH
77476: FOR_IN
77477: IFFALSE 77508
// begin if UnitsInside ( j ) < 6 then
77479: LD_VAR 0 3
77483: PPUSH
77484: CALL_OW 313
77488: PUSH
77489: LD_INT 6
77491: LESS
77492: IFFALSE 77506
// begin selected := j ;
77494: LD_ADDR_VAR 0 7
77498: PUSH
77499: LD_VAR 0 3
77503: ST_TO_ADDR
// break ;
77504: GO 77508
// end ; end ;
77506: GO 77476
77508: POP
77509: POP
// if selected then
77510: LD_VAR 0 7
77514: IFFALSE 77613
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
77516: LD_ADDR_VAR 0 3
77520: PUSH
77521: LD_EXP 79
77525: PUSH
77526: LD_VAR 0 2
77530: ARRAY
77531: PPUSH
77532: LD_INT 25
77534: PUSH
77535: LD_INT 12
77537: PUSH
77538: EMPTY
77539: LIST
77540: LIST
77541: PPUSH
77542: CALL_OW 72
77546: PUSH
77547: FOR_IN
77548: IFFALSE 77611
// if not HasTask ( j ) then
77550: LD_VAR 0 3
77554: PPUSH
77555: CALL_OW 314
77559: NOT
77560: IFFALSE 77609
// begin if not IsInUnit ( j ) then
77562: LD_VAR 0 3
77566: PPUSH
77567: CALL_OW 310
77571: NOT
77572: IFFALSE 77588
// ComEnterUnit ( j , selected ) ;
77574: LD_VAR 0 3
77578: PPUSH
77579: LD_VAR 0 7
77583: PPUSH
77584: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
77588: LD_VAR 0 3
77592: PPUSH
77593: LD_INT 16
77595: PPUSH
77596: CALL_OW 183
// AddComExitBuilding ( j ) ;
77600: LD_VAR 0 3
77604: PPUSH
77605: CALL_OW 182
// end ;
77609: GO 77547
77611: POP
77612: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
77613: LD_VAR 0 5
77617: PPUSH
77618: LD_INT 11
77620: PPUSH
77621: CALL_OW 325
77625: IFFALSE 77884
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
77627: LD_ADDR_VAR 0 4
77631: PUSH
77632: LD_EXP 79
77636: PUSH
77637: LD_VAR 0 2
77641: ARRAY
77642: PPUSH
77643: LD_INT 25
77645: PUSH
77646: LD_INT 16
77648: PUSH
77649: EMPTY
77650: LIST
77651: LIST
77652: PPUSH
77653: CALL_OW 72
77657: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
77658: LD_VAR 0 4
77662: PUSH
77663: LD_INT 6
77665: GREATEREQUAL
77666: PUSH
77667: LD_VAR 0 5
77671: PPUSH
77672: LD_INT 2
77674: PPUSH
77675: CALL_OW 325
77679: NOT
77680: OR
77681: IFFALSE 77884
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
77683: LD_ADDR_VAR 0 8
77687: PUSH
77688: LD_EXP 50
77692: PUSH
77693: LD_VAR 0 2
77697: ARRAY
77698: PPUSH
77699: LD_INT 2
77701: PUSH
77702: LD_INT 30
77704: PUSH
77705: LD_INT 4
77707: PUSH
77708: EMPTY
77709: LIST
77710: LIST
77711: PUSH
77712: LD_INT 30
77714: PUSH
77715: LD_INT 5
77717: PUSH
77718: EMPTY
77719: LIST
77720: LIST
77721: PUSH
77722: EMPTY
77723: LIST
77724: LIST
77725: LIST
77726: PPUSH
77727: CALL_OW 72
77731: ST_TO_ADDR
// if barracks then
77732: LD_VAR 0 8
77736: IFFALSE 77884
// begin selected := 0 ;
77738: LD_ADDR_VAR 0 7
77742: PUSH
77743: LD_INT 0
77745: ST_TO_ADDR
// for j in barracks do
77746: LD_ADDR_VAR 0 3
77750: PUSH
77751: LD_VAR 0 8
77755: PUSH
77756: FOR_IN
77757: IFFALSE 77788
// begin if UnitsInside ( j ) < 6 then
77759: LD_VAR 0 3
77763: PPUSH
77764: CALL_OW 313
77768: PUSH
77769: LD_INT 6
77771: LESS
77772: IFFALSE 77786
// begin selected := j ;
77774: LD_ADDR_VAR 0 7
77778: PUSH
77779: LD_VAR 0 3
77783: ST_TO_ADDR
// break ;
77784: GO 77788
// end ; end ;
77786: GO 77756
77788: POP
77789: POP
// if selected then
77790: LD_VAR 0 7
77794: IFFALSE 77884
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
77796: LD_ADDR_VAR 0 3
77800: PUSH
77801: LD_EXP 79
77805: PUSH
77806: LD_VAR 0 2
77810: ARRAY
77811: PPUSH
77812: LD_INT 25
77814: PUSH
77815: LD_INT 12
77817: PUSH
77818: EMPTY
77819: LIST
77820: LIST
77821: PPUSH
77822: CALL_OW 72
77826: PUSH
77827: FOR_IN
77828: IFFALSE 77882
// if not IsInUnit ( j ) and not HasTask ( j ) then
77830: LD_VAR 0 3
77834: PPUSH
77835: CALL_OW 310
77839: NOT
77840: PUSH
77841: LD_VAR 0 3
77845: PPUSH
77846: CALL_OW 314
77850: NOT
77851: AND
77852: IFFALSE 77880
// begin ComEnterUnit ( j , selected ) ;
77854: LD_VAR 0 3
77858: PPUSH
77859: LD_VAR 0 7
77863: PPUSH
77864: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
77868: LD_VAR 0 3
77872: PPUSH
77873: LD_INT 15
77875: PPUSH
77876: CALL_OW 183
// end ;
77880: GO 77827
77882: POP
77883: POP
// end ; end ; end ; end ; end ;
77884: GO 77277
77886: POP
77887: POP
// end ;
77888: LD_VAR 0 1
77892: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
77893: LD_INT 0
77895: PPUSH
77896: PPUSH
77897: PPUSH
77898: PPUSH
// if not mc_bases then
77899: LD_EXP 50
77903: NOT
77904: IFFALSE 77908
// exit ;
77906: GO 78086
// for i = 1 to mc_bases do
77908: LD_ADDR_VAR 0 2
77912: PUSH
77913: DOUBLE
77914: LD_INT 1
77916: DEC
77917: ST_TO_ADDR
77918: LD_EXP 50
77922: PUSH
77923: FOR_TO
77924: IFFALSE 78084
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
77926: LD_ADDR_VAR 0 4
77930: PUSH
77931: LD_EXP 50
77935: PUSH
77936: LD_VAR 0 2
77940: ARRAY
77941: PPUSH
77942: LD_INT 25
77944: PUSH
77945: LD_INT 9
77947: PUSH
77948: EMPTY
77949: LIST
77950: LIST
77951: PPUSH
77952: CALL_OW 72
77956: ST_TO_ADDR
// if not tmp then
77957: LD_VAR 0 4
77961: NOT
77962: IFFALSE 77966
// continue ;
77964: GO 77923
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
77966: LD_EXP 76
77970: PUSH
77971: LD_VAR 0 2
77975: ARRAY
77976: PPUSH
77977: LD_INT 29
77979: PPUSH
77980: CALL_OW 325
77984: NOT
77985: PUSH
77986: LD_EXP 76
77990: PUSH
77991: LD_VAR 0 2
77995: ARRAY
77996: PPUSH
77997: LD_INT 28
77999: PPUSH
78000: CALL_OW 325
78004: NOT
78005: AND
78006: IFFALSE 78010
// continue ;
78008: GO 77923
// for j in tmp do
78010: LD_ADDR_VAR 0 3
78014: PUSH
78015: LD_VAR 0 4
78019: PUSH
78020: FOR_IN
78021: IFFALSE 78080
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
78023: LD_VAR 0 3
78027: PUSH
78028: LD_EXP 53
78032: PUSH
78033: LD_VAR 0 2
78037: ARRAY
78038: PUSH
78039: LD_INT 1
78041: ARRAY
78042: IN
78043: NOT
78044: PUSH
78045: LD_VAR 0 3
78049: PUSH
78050: LD_EXP 53
78054: PUSH
78055: LD_VAR 0 2
78059: ARRAY
78060: PUSH
78061: LD_INT 2
78063: ARRAY
78064: IN
78065: NOT
78066: AND
78067: IFFALSE 78078
// ComSpaceTimeShoot ( j ) ;
78069: LD_VAR 0 3
78073: PPUSH
78074: CALL 20323 0 1
78078: GO 78020
78080: POP
78081: POP
// end ;
78082: GO 77923
78084: POP
78085: POP
// end ;
78086: LD_VAR 0 1
78090: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
78091: LD_INT 0
78093: PPUSH
78094: PPUSH
78095: PPUSH
78096: PPUSH
78097: PPUSH
78098: PPUSH
78099: PPUSH
78100: PPUSH
78101: PPUSH
// if not mc_bases then
78102: LD_EXP 50
78106: NOT
78107: IFFALSE 78111
// exit ;
78109: GO 78733
// for i = 1 to mc_bases do
78111: LD_ADDR_VAR 0 2
78115: PUSH
78116: DOUBLE
78117: LD_INT 1
78119: DEC
78120: ST_TO_ADDR
78121: LD_EXP 50
78125: PUSH
78126: FOR_TO
78127: IFFALSE 78731
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
78129: LD_EXP 85
78133: PUSH
78134: LD_VAR 0 2
78138: ARRAY
78139: NOT
78140: PUSH
78141: LD_INT 38
78143: PPUSH
78144: LD_EXP 76
78148: PUSH
78149: LD_VAR 0 2
78153: ARRAY
78154: PPUSH
78155: CALL_OW 321
78159: PUSH
78160: LD_INT 2
78162: NONEQUAL
78163: OR
78164: IFFALSE 78168
// continue ;
78166: GO 78126
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
78168: LD_ADDR_VAR 0 8
78172: PUSH
78173: LD_EXP 50
78177: PUSH
78178: LD_VAR 0 2
78182: ARRAY
78183: PPUSH
78184: LD_INT 30
78186: PUSH
78187: LD_INT 34
78189: PUSH
78190: EMPTY
78191: LIST
78192: LIST
78193: PPUSH
78194: CALL_OW 72
78198: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
78199: LD_ADDR_VAR 0 9
78203: PUSH
78204: LD_EXP 50
78208: PUSH
78209: LD_VAR 0 2
78213: ARRAY
78214: PPUSH
78215: LD_INT 25
78217: PUSH
78218: LD_INT 4
78220: PUSH
78221: EMPTY
78222: LIST
78223: LIST
78224: PPUSH
78225: CALL_OW 72
78229: PPUSH
78230: LD_INT 0
78232: PPUSH
78233: CALL 53632 0 2
78237: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
78238: LD_VAR 0 9
78242: NOT
78243: PUSH
78244: LD_VAR 0 8
78248: NOT
78249: OR
78250: PUSH
78251: LD_EXP 50
78255: PUSH
78256: LD_VAR 0 2
78260: ARRAY
78261: PPUSH
78262: LD_INT 124
78264: PPUSH
78265: CALL 53632 0 2
78269: OR
78270: IFFALSE 78274
// continue ;
78272: GO 78126
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
78274: LD_EXP 86
78278: PUSH
78279: LD_VAR 0 2
78283: ARRAY
78284: PUSH
78285: LD_EXP 85
78289: PUSH
78290: LD_VAR 0 2
78294: ARRAY
78295: LESS
78296: PUSH
78297: LD_EXP 86
78301: PUSH
78302: LD_VAR 0 2
78306: ARRAY
78307: PUSH
78308: LD_VAR 0 8
78312: LESS
78313: AND
78314: IFFALSE 78729
// begin tmp := sci [ 1 ] ;
78316: LD_ADDR_VAR 0 7
78320: PUSH
78321: LD_VAR 0 9
78325: PUSH
78326: LD_INT 1
78328: ARRAY
78329: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
78330: LD_VAR 0 7
78334: PPUSH
78335: LD_INT 124
78337: PPUSH
78338: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
78342: LD_ADDR_VAR 0 3
78346: PUSH
78347: DOUBLE
78348: LD_EXP 85
78352: PUSH
78353: LD_VAR 0 2
78357: ARRAY
78358: INC
78359: ST_TO_ADDR
78360: LD_EXP 85
78364: PUSH
78365: LD_VAR 0 2
78369: ARRAY
78370: PUSH
78371: FOR_DOWNTO
78372: IFFALSE 78715
// begin if IsInUnit ( tmp ) then
78374: LD_VAR 0 7
78378: PPUSH
78379: CALL_OW 310
78383: IFFALSE 78394
// ComExitBuilding ( tmp ) ;
78385: LD_VAR 0 7
78389: PPUSH
78390: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
78394: LD_INT 35
78396: PPUSH
78397: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
78401: LD_VAR 0 7
78405: PPUSH
78406: CALL_OW 310
78410: NOT
78411: PUSH
78412: LD_VAR 0 7
78416: PPUSH
78417: CALL_OW 314
78421: NOT
78422: AND
78423: IFFALSE 78394
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
78425: LD_ADDR_VAR 0 6
78429: PUSH
78430: LD_VAR 0 7
78434: PPUSH
78435: CALL_OW 250
78439: PUSH
78440: LD_VAR 0 7
78444: PPUSH
78445: CALL_OW 251
78449: PUSH
78450: EMPTY
78451: LIST
78452: LIST
78453: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
78454: LD_INT 35
78456: PPUSH
78457: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
78461: LD_ADDR_VAR 0 4
78465: PUSH
78466: LD_EXP 85
78470: PUSH
78471: LD_VAR 0 2
78475: ARRAY
78476: PUSH
78477: LD_VAR 0 3
78481: ARRAY
78482: PUSH
78483: LD_INT 1
78485: ARRAY
78486: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
78487: LD_ADDR_VAR 0 5
78491: PUSH
78492: LD_EXP 85
78496: PUSH
78497: LD_VAR 0 2
78501: ARRAY
78502: PUSH
78503: LD_VAR 0 3
78507: ARRAY
78508: PUSH
78509: LD_INT 2
78511: ARRAY
78512: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
78513: LD_VAR 0 7
78517: PPUSH
78518: LD_INT 10
78520: PPUSH
78521: CALL 26961 0 2
78525: PUSH
78526: LD_INT 4
78528: ARRAY
78529: IFFALSE 78567
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
78531: LD_VAR 0 7
78535: PPUSH
78536: LD_VAR 0 6
78540: PUSH
78541: LD_INT 1
78543: ARRAY
78544: PPUSH
78545: LD_VAR 0 6
78549: PUSH
78550: LD_INT 2
78552: ARRAY
78553: PPUSH
78554: CALL_OW 111
// wait ( 0 0$10 ) ;
78558: LD_INT 350
78560: PPUSH
78561: CALL_OW 67
// end else
78565: GO 78593
// begin ComMoveXY ( tmp , x , y ) ;
78567: LD_VAR 0 7
78571: PPUSH
78572: LD_VAR 0 4
78576: PPUSH
78577: LD_VAR 0 5
78581: PPUSH
78582: CALL_OW 111
// wait ( 0 0$3 ) ;
78586: LD_INT 105
78588: PPUSH
78589: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
78593: LD_VAR 0 7
78597: PPUSH
78598: LD_VAR 0 4
78602: PPUSH
78603: LD_VAR 0 5
78607: PPUSH
78608: CALL_OW 307
78612: IFFALSE 78454
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
78614: LD_VAR 0 7
78618: PPUSH
78619: LD_VAR 0 4
78623: PPUSH
78624: LD_VAR 0 5
78628: PPUSH
78629: LD_VAR 0 8
78633: PUSH
78634: LD_VAR 0 3
78638: ARRAY
78639: PPUSH
78640: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
78644: LD_INT 35
78646: PPUSH
78647: CALL_OW 67
// until not HasTask ( tmp ) ;
78651: LD_VAR 0 7
78655: PPUSH
78656: CALL_OW 314
78660: NOT
78661: IFFALSE 78644
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
78663: LD_ADDR_EXP 86
78667: PUSH
78668: LD_EXP 86
78672: PPUSH
78673: LD_VAR 0 2
78677: PUSH
78678: LD_EXP 86
78682: PUSH
78683: LD_VAR 0 2
78687: ARRAY
78688: PUSH
78689: LD_INT 1
78691: PLUS
78692: PUSH
78693: EMPTY
78694: LIST
78695: LIST
78696: PPUSH
78697: LD_VAR 0 8
78701: PUSH
78702: LD_VAR 0 3
78706: ARRAY
78707: PPUSH
78708: CALL 24362 0 3
78712: ST_TO_ADDR
// end ;
78713: GO 78371
78715: POP
78716: POP
// MC_Reset ( i , 124 ) ;
78717: LD_VAR 0 2
78721: PPUSH
78722: LD_INT 124
78724: PPUSH
78725: CALL 62172 0 2
// end ; end ;
78729: GO 78126
78731: POP
78732: POP
// end ;
78733: LD_VAR 0 1
78737: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
78738: LD_INT 0
78740: PPUSH
78741: PPUSH
78742: PPUSH
// if not mc_bases then
78743: LD_EXP 50
78747: NOT
78748: IFFALSE 78752
// exit ;
78750: GO 79358
// for i = 1 to mc_bases do
78752: LD_ADDR_VAR 0 2
78756: PUSH
78757: DOUBLE
78758: LD_INT 1
78760: DEC
78761: ST_TO_ADDR
78762: LD_EXP 50
78766: PUSH
78767: FOR_TO
78768: IFFALSE 79356
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
78770: LD_ADDR_VAR 0 3
78774: PUSH
78775: LD_EXP 50
78779: PUSH
78780: LD_VAR 0 2
78784: ARRAY
78785: PPUSH
78786: LD_INT 25
78788: PUSH
78789: LD_INT 4
78791: PUSH
78792: EMPTY
78793: LIST
78794: LIST
78795: PPUSH
78796: CALL_OW 72
78800: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
78801: LD_VAR 0 3
78805: NOT
78806: PUSH
78807: LD_EXP 87
78811: PUSH
78812: LD_VAR 0 2
78816: ARRAY
78817: NOT
78818: OR
78819: PUSH
78820: LD_EXP 50
78824: PUSH
78825: LD_VAR 0 2
78829: ARRAY
78830: PPUSH
78831: LD_INT 2
78833: PUSH
78834: LD_INT 30
78836: PUSH
78837: LD_INT 0
78839: PUSH
78840: EMPTY
78841: LIST
78842: LIST
78843: PUSH
78844: LD_INT 30
78846: PUSH
78847: LD_INT 1
78849: PUSH
78850: EMPTY
78851: LIST
78852: LIST
78853: PUSH
78854: EMPTY
78855: LIST
78856: LIST
78857: LIST
78858: PPUSH
78859: CALL_OW 72
78863: NOT
78864: OR
78865: IFFALSE 78915
// begin if mc_deposits_finder [ i ] then
78867: LD_EXP 88
78871: PUSH
78872: LD_VAR 0 2
78876: ARRAY
78877: IFFALSE 78913
// begin MC_Reset ( i , 125 ) ;
78879: LD_VAR 0 2
78883: PPUSH
78884: LD_INT 125
78886: PPUSH
78887: CALL 62172 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
78891: LD_ADDR_EXP 88
78895: PUSH
78896: LD_EXP 88
78900: PPUSH
78901: LD_VAR 0 2
78905: PPUSH
78906: EMPTY
78907: PPUSH
78908: CALL_OW 1
78912: ST_TO_ADDR
// end ; continue ;
78913: GO 78767
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
78915: LD_EXP 87
78919: PUSH
78920: LD_VAR 0 2
78924: ARRAY
78925: PUSH
78926: LD_INT 1
78928: ARRAY
78929: PUSH
78930: LD_INT 3
78932: ARRAY
78933: PUSH
78934: LD_INT 1
78936: EQUAL
78937: PUSH
78938: LD_INT 20
78940: PPUSH
78941: LD_EXP 76
78945: PUSH
78946: LD_VAR 0 2
78950: ARRAY
78951: PPUSH
78952: CALL_OW 321
78956: PUSH
78957: LD_INT 2
78959: NONEQUAL
78960: AND
78961: IFFALSE 79011
// begin if mc_deposits_finder [ i ] then
78963: LD_EXP 88
78967: PUSH
78968: LD_VAR 0 2
78972: ARRAY
78973: IFFALSE 79009
// begin MC_Reset ( i , 125 ) ;
78975: LD_VAR 0 2
78979: PPUSH
78980: LD_INT 125
78982: PPUSH
78983: CALL 62172 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
78987: LD_ADDR_EXP 88
78991: PUSH
78992: LD_EXP 88
78996: PPUSH
78997: LD_VAR 0 2
79001: PPUSH
79002: EMPTY
79003: PPUSH
79004: CALL_OW 1
79008: ST_TO_ADDR
// end ; continue ;
79009: GO 78767
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
79011: LD_EXP 87
79015: PUSH
79016: LD_VAR 0 2
79020: ARRAY
79021: PUSH
79022: LD_INT 1
79024: ARRAY
79025: PUSH
79026: LD_INT 1
79028: ARRAY
79029: PPUSH
79030: LD_EXP 87
79034: PUSH
79035: LD_VAR 0 2
79039: ARRAY
79040: PUSH
79041: LD_INT 1
79043: ARRAY
79044: PUSH
79045: LD_INT 2
79047: ARRAY
79048: PPUSH
79049: LD_EXP 76
79053: PUSH
79054: LD_VAR 0 2
79058: ARRAY
79059: PPUSH
79060: CALL_OW 440
79064: IFFALSE 79107
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
79066: LD_ADDR_EXP 87
79070: PUSH
79071: LD_EXP 87
79075: PPUSH
79076: LD_VAR 0 2
79080: PPUSH
79081: LD_EXP 87
79085: PUSH
79086: LD_VAR 0 2
79090: ARRAY
79091: PPUSH
79092: LD_INT 1
79094: PPUSH
79095: CALL_OW 3
79099: PPUSH
79100: CALL_OW 1
79104: ST_TO_ADDR
79105: GO 79354
// begin if not mc_deposits_finder [ i ] then
79107: LD_EXP 88
79111: PUSH
79112: LD_VAR 0 2
79116: ARRAY
79117: NOT
79118: IFFALSE 79170
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
79120: LD_ADDR_EXP 88
79124: PUSH
79125: LD_EXP 88
79129: PPUSH
79130: LD_VAR 0 2
79134: PPUSH
79135: LD_VAR 0 3
79139: PUSH
79140: LD_INT 1
79142: ARRAY
79143: PUSH
79144: EMPTY
79145: LIST
79146: PPUSH
79147: CALL_OW 1
79151: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
79152: LD_VAR 0 3
79156: PUSH
79157: LD_INT 1
79159: ARRAY
79160: PPUSH
79161: LD_INT 125
79163: PPUSH
79164: CALL_OW 109
// end else
79168: GO 79354
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
79170: LD_EXP 88
79174: PUSH
79175: LD_VAR 0 2
79179: ARRAY
79180: PUSH
79181: LD_INT 1
79183: ARRAY
79184: PPUSH
79185: CALL_OW 310
79189: IFFALSE 79212
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
79191: LD_EXP 88
79195: PUSH
79196: LD_VAR 0 2
79200: ARRAY
79201: PUSH
79202: LD_INT 1
79204: ARRAY
79205: PPUSH
79206: CALL_OW 122
79210: GO 79354
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
79212: LD_EXP 88
79216: PUSH
79217: LD_VAR 0 2
79221: ARRAY
79222: PUSH
79223: LD_INT 1
79225: ARRAY
79226: PPUSH
79227: CALL_OW 314
79231: NOT
79232: PUSH
79233: LD_EXP 88
79237: PUSH
79238: LD_VAR 0 2
79242: ARRAY
79243: PUSH
79244: LD_INT 1
79246: ARRAY
79247: PPUSH
79248: LD_EXP 87
79252: PUSH
79253: LD_VAR 0 2
79257: ARRAY
79258: PUSH
79259: LD_INT 1
79261: ARRAY
79262: PUSH
79263: LD_INT 1
79265: ARRAY
79266: PPUSH
79267: LD_EXP 87
79271: PUSH
79272: LD_VAR 0 2
79276: ARRAY
79277: PUSH
79278: LD_INT 1
79280: ARRAY
79281: PUSH
79282: LD_INT 2
79284: ARRAY
79285: PPUSH
79286: CALL_OW 297
79290: PUSH
79291: LD_INT 6
79293: GREATER
79294: AND
79295: IFFALSE 79354
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
79297: LD_EXP 88
79301: PUSH
79302: LD_VAR 0 2
79306: ARRAY
79307: PUSH
79308: LD_INT 1
79310: ARRAY
79311: PPUSH
79312: LD_EXP 87
79316: PUSH
79317: LD_VAR 0 2
79321: ARRAY
79322: PUSH
79323: LD_INT 1
79325: ARRAY
79326: PUSH
79327: LD_INT 1
79329: ARRAY
79330: PPUSH
79331: LD_EXP 87
79335: PUSH
79336: LD_VAR 0 2
79340: ARRAY
79341: PUSH
79342: LD_INT 1
79344: ARRAY
79345: PUSH
79346: LD_INT 2
79348: ARRAY
79349: PPUSH
79350: CALL_OW 111
// end ; end ; end ;
79354: GO 78767
79356: POP
79357: POP
// end ;
79358: LD_VAR 0 1
79362: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
79363: LD_INT 0
79365: PPUSH
79366: PPUSH
79367: PPUSH
79368: PPUSH
79369: PPUSH
79370: PPUSH
79371: PPUSH
79372: PPUSH
79373: PPUSH
79374: PPUSH
79375: PPUSH
// if not mc_bases then
79376: LD_EXP 50
79380: NOT
79381: IFFALSE 79385
// exit ;
79383: GO 80325
// for i = 1 to mc_bases do
79385: LD_ADDR_VAR 0 2
79389: PUSH
79390: DOUBLE
79391: LD_INT 1
79393: DEC
79394: ST_TO_ADDR
79395: LD_EXP 50
79399: PUSH
79400: FOR_TO
79401: IFFALSE 80323
// begin if not mc_bases [ i ] or mc_scan [ i ] then
79403: LD_EXP 50
79407: PUSH
79408: LD_VAR 0 2
79412: ARRAY
79413: NOT
79414: PUSH
79415: LD_EXP 73
79419: PUSH
79420: LD_VAR 0 2
79424: ARRAY
79425: OR
79426: IFFALSE 79430
// continue ;
79428: GO 79400
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
79430: LD_ADDR_VAR 0 7
79434: PUSH
79435: LD_EXP 50
79439: PUSH
79440: LD_VAR 0 2
79444: ARRAY
79445: PUSH
79446: LD_INT 1
79448: ARRAY
79449: PPUSH
79450: CALL_OW 248
79454: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
79455: LD_VAR 0 7
79459: PUSH
79460: LD_INT 3
79462: EQUAL
79463: PUSH
79464: LD_EXP 69
79468: PUSH
79469: LD_VAR 0 2
79473: ARRAY
79474: PUSH
79475: LD_EXP 72
79479: PUSH
79480: LD_VAR 0 2
79484: ARRAY
79485: UNION
79486: PPUSH
79487: LD_INT 33
79489: PUSH
79490: LD_INT 2
79492: PUSH
79493: EMPTY
79494: LIST
79495: LIST
79496: PPUSH
79497: CALL_OW 72
79501: NOT
79502: OR
79503: IFFALSE 79507
// continue ;
79505: GO 79400
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
79507: LD_ADDR_VAR 0 9
79511: PUSH
79512: LD_EXP 50
79516: PUSH
79517: LD_VAR 0 2
79521: ARRAY
79522: PPUSH
79523: LD_INT 30
79525: PUSH
79526: LD_INT 36
79528: PUSH
79529: EMPTY
79530: LIST
79531: LIST
79532: PPUSH
79533: CALL_OW 72
79537: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
79538: LD_ADDR_VAR 0 10
79542: PUSH
79543: LD_EXP 69
79547: PUSH
79548: LD_VAR 0 2
79552: ARRAY
79553: PPUSH
79554: LD_INT 34
79556: PUSH
79557: LD_INT 31
79559: PUSH
79560: EMPTY
79561: LIST
79562: LIST
79563: PPUSH
79564: CALL_OW 72
79568: ST_TO_ADDR
// if not cts and not mcts then
79569: LD_VAR 0 9
79573: NOT
79574: PUSH
79575: LD_VAR 0 10
79579: NOT
79580: AND
79581: IFFALSE 79585
// continue ;
79583: GO 79400
// x := cts ;
79585: LD_ADDR_VAR 0 11
79589: PUSH
79590: LD_VAR 0 9
79594: ST_TO_ADDR
// if not x then
79595: LD_VAR 0 11
79599: NOT
79600: IFFALSE 79612
// x := mcts ;
79602: LD_ADDR_VAR 0 11
79606: PUSH
79607: LD_VAR 0 10
79611: ST_TO_ADDR
// if not x then
79612: LD_VAR 0 11
79616: NOT
79617: IFFALSE 79621
// continue ;
79619: GO 79400
// if mc_remote_driver [ i ] then
79621: LD_EXP 90
79625: PUSH
79626: LD_VAR 0 2
79630: ARRAY
79631: IFFALSE 80018
// for j in mc_remote_driver [ i ] do
79633: LD_ADDR_VAR 0 3
79637: PUSH
79638: LD_EXP 90
79642: PUSH
79643: LD_VAR 0 2
79647: ARRAY
79648: PUSH
79649: FOR_IN
79650: IFFALSE 80016
// begin if GetClass ( j ) <> 3 then
79652: LD_VAR 0 3
79656: PPUSH
79657: CALL_OW 257
79661: PUSH
79662: LD_INT 3
79664: NONEQUAL
79665: IFFALSE 79718
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
79667: LD_ADDR_EXP 90
79671: PUSH
79672: LD_EXP 90
79676: PPUSH
79677: LD_VAR 0 2
79681: PPUSH
79682: LD_EXP 90
79686: PUSH
79687: LD_VAR 0 2
79691: ARRAY
79692: PUSH
79693: LD_VAR 0 3
79697: DIFF
79698: PPUSH
79699: CALL_OW 1
79703: ST_TO_ADDR
// SetTag ( j , 0 ) ;
79704: LD_VAR 0 3
79708: PPUSH
79709: LD_INT 0
79711: PPUSH
79712: CALL_OW 109
// continue ;
79716: GO 79649
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
79718: LD_EXP 69
79722: PUSH
79723: LD_VAR 0 2
79727: ARRAY
79728: PPUSH
79729: LD_INT 34
79731: PUSH
79732: LD_INT 31
79734: PUSH
79735: EMPTY
79736: LIST
79737: LIST
79738: PUSH
79739: LD_INT 58
79741: PUSH
79742: EMPTY
79743: LIST
79744: PUSH
79745: EMPTY
79746: LIST
79747: LIST
79748: PPUSH
79749: CALL_OW 72
79753: PUSH
79754: LD_VAR 0 3
79758: PPUSH
79759: CALL 53720 0 1
79763: NOT
79764: AND
79765: IFFALSE 79836
// begin if IsInUnit ( j ) then
79767: LD_VAR 0 3
79771: PPUSH
79772: CALL_OW 310
79776: IFFALSE 79787
// ComExitBuilding ( j ) ;
79778: LD_VAR 0 3
79782: PPUSH
79783: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
79787: LD_VAR 0 3
79791: PPUSH
79792: LD_EXP 69
79796: PUSH
79797: LD_VAR 0 2
79801: ARRAY
79802: PPUSH
79803: LD_INT 34
79805: PUSH
79806: LD_INT 31
79808: PUSH
79809: EMPTY
79810: LIST
79811: LIST
79812: PUSH
79813: LD_INT 58
79815: PUSH
79816: EMPTY
79817: LIST
79818: PUSH
79819: EMPTY
79820: LIST
79821: LIST
79822: PPUSH
79823: CALL_OW 72
79827: PUSH
79828: LD_INT 1
79830: ARRAY
79831: PPUSH
79832: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
79836: LD_VAR 0 3
79840: PPUSH
79841: CALL_OW 310
79845: NOT
79846: PUSH
79847: LD_VAR 0 3
79851: PPUSH
79852: CALL_OW 310
79856: PPUSH
79857: CALL_OW 266
79861: PUSH
79862: LD_INT 36
79864: NONEQUAL
79865: PUSH
79866: LD_VAR 0 3
79870: PPUSH
79871: CALL 53720 0 1
79875: NOT
79876: AND
79877: OR
79878: IFFALSE 80014
// begin if IsInUnit ( j ) then
79880: LD_VAR 0 3
79884: PPUSH
79885: CALL_OW 310
79889: IFFALSE 79900
// ComExitBuilding ( j ) ;
79891: LD_VAR 0 3
79895: PPUSH
79896: CALL_OW 122
// ct := 0 ;
79900: LD_ADDR_VAR 0 8
79904: PUSH
79905: LD_INT 0
79907: ST_TO_ADDR
// for k in x do
79908: LD_ADDR_VAR 0 4
79912: PUSH
79913: LD_VAR 0 11
79917: PUSH
79918: FOR_IN
79919: IFFALSE 79992
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
79921: LD_VAR 0 4
79925: PPUSH
79926: CALL_OW 264
79930: PUSH
79931: LD_INT 31
79933: EQUAL
79934: PUSH
79935: LD_VAR 0 4
79939: PPUSH
79940: CALL_OW 311
79944: NOT
79945: AND
79946: PUSH
79947: LD_VAR 0 4
79951: PPUSH
79952: CALL_OW 266
79956: PUSH
79957: LD_INT 36
79959: EQUAL
79960: PUSH
79961: LD_VAR 0 4
79965: PPUSH
79966: CALL_OW 313
79970: PUSH
79971: LD_INT 3
79973: LESS
79974: AND
79975: OR
79976: IFFALSE 79990
// begin ct := k ;
79978: LD_ADDR_VAR 0 8
79982: PUSH
79983: LD_VAR 0 4
79987: ST_TO_ADDR
// break ;
79988: GO 79992
// end ;
79990: GO 79918
79992: POP
79993: POP
// if ct then
79994: LD_VAR 0 8
79998: IFFALSE 80014
// ComEnterUnit ( j , ct ) ;
80000: LD_VAR 0 3
80004: PPUSH
80005: LD_VAR 0 8
80009: PPUSH
80010: CALL_OW 120
// end ; end ;
80014: GO 79649
80016: POP
80017: POP
// places := 0 ;
80018: LD_ADDR_VAR 0 5
80022: PUSH
80023: LD_INT 0
80025: ST_TO_ADDR
// for j = 1 to x do
80026: LD_ADDR_VAR 0 3
80030: PUSH
80031: DOUBLE
80032: LD_INT 1
80034: DEC
80035: ST_TO_ADDR
80036: LD_VAR 0 11
80040: PUSH
80041: FOR_TO
80042: IFFALSE 80118
// if GetWeapon ( x [ j ] ) = ar_control_tower then
80044: LD_VAR 0 11
80048: PUSH
80049: LD_VAR 0 3
80053: ARRAY
80054: PPUSH
80055: CALL_OW 264
80059: PUSH
80060: LD_INT 31
80062: EQUAL
80063: IFFALSE 80081
// places := places + 1 else
80065: LD_ADDR_VAR 0 5
80069: PUSH
80070: LD_VAR 0 5
80074: PUSH
80075: LD_INT 1
80077: PLUS
80078: ST_TO_ADDR
80079: GO 80116
// if GetBType ( x [ j ] ) = b_control_tower then
80081: LD_VAR 0 11
80085: PUSH
80086: LD_VAR 0 3
80090: ARRAY
80091: PPUSH
80092: CALL_OW 266
80096: PUSH
80097: LD_INT 36
80099: EQUAL
80100: IFFALSE 80116
// places := places + 3 ;
80102: LD_ADDR_VAR 0 5
80106: PUSH
80107: LD_VAR 0 5
80111: PUSH
80112: LD_INT 3
80114: PLUS
80115: ST_TO_ADDR
80116: GO 80041
80118: POP
80119: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
80120: LD_VAR 0 5
80124: PUSH
80125: LD_INT 0
80127: EQUAL
80128: PUSH
80129: LD_VAR 0 5
80133: PUSH
80134: LD_EXP 90
80138: PUSH
80139: LD_VAR 0 2
80143: ARRAY
80144: LESSEQUAL
80145: OR
80146: IFFALSE 80150
// continue ;
80148: GO 79400
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
80150: LD_ADDR_VAR 0 6
80154: PUSH
80155: LD_EXP 50
80159: PUSH
80160: LD_VAR 0 2
80164: ARRAY
80165: PPUSH
80166: LD_INT 25
80168: PUSH
80169: LD_INT 3
80171: PUSH
80172: EMPTY
80173: LIST
80174: LIST
80175: PPUSH
80176: CALL_OW 72
80180: PUSH
80181: LD_EXP 90
80185: PUSH
80186: LD_VAR 0 2
80190: ARRAY
80191: DIFF
80192: PPUSH
80193: LD_INT 3
80195: PPUSH
80196: CALL 54620 0 2
80200: ST_TO_ADDR
// for j in tmp do
80201: LD_ADDR_VAR 0 3
80205: PUSH
80206: LD_VAR 0 6
80210: PUSH
80211: FOR_IN
80212: IFFALSE 80247
// if GetTag ( j ) > 0 then
80214: LD_VAR 0 3
80218: PPUSH
80219: CALL_OW 110
80223: PUSH
80224: LD_INT 0
80226: GREATER
80227: IFFALSE 80245
// tmp := tmp diff j ;
80229: LD_ADDR_VAR 0 6
80233: PUSH
80234: LD_VAR 0 6
80238: PUSH
80239: LD_VAR 0 3
80243: DIFF
80244: ST_TO_ADDR
80245: GO 80211
80247: POP
80248: POP
// if not tmp then
80249: LD_VAR 0 6
80253: NOT
80254: IFFALSE 80258
// continue ;
80256: GO 79400
// if places then
80258: LD_VAR 0 5
80262: IFFALSE 80321
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
80264: LD_ADDR_EXP 90
80268: PUSH
80269: LD_EXP 90
80273: PPUSH
80274: LD_VAR 0 2
80278: PPUSH
80279: LD_EXP 90
80283: PUSH
80284: LD_VAR 0 2
80288: ARRAY
80289: PUSH
80290: LD_VAR 0 6
80294: PUSH
80295: LD_INT 1
80297: ARRAY
80298: UNION
80299: PPUSH
80300: CALL_OW 1
80304: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
80305: LD_VAR 0 6
80309: PUSH
80310: LD_INT 1
80312: ARRAY
80313: PPUSH
80314: LD_INT 126
80316: PPUSH
80317: CALL_OW 109
// end ; end ;
80321: GO 79400
80323: POP
80324: POP
// end ;
80325: LD_VAR 0 1
80329: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
80330: LD_INT 0
80332: PPUSH
80333: PPUSH
80334: PPUSH
80335: PPUSH
80336: PPUSH
80337: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
80338: LD_VAR 0 1
80342: NOT
80343: PUSH
80344: LD_VAR 0 2
80348: NOT
80349: OR
80350: PUSH
80351: LD_VAR 0 3
80355: NOT
80356: OR
80357: PUSH
80358: LD_VAR 0 4
80362: PUSH
80363: LD_INT 1
80365: PUSH
80366: LD_INT 2
80368: PUSH
80369: LD_INT 3
80371: PUSH
80372: LD_INT 4
80374: PUSH
80375: LD_INT 5
80377: PUSH
80378: LD_INT 8
80380: PUSH
80381: LD_INT 9
80383: PUSH
80384: LD_INT 15
80386: PUSH
80387: LD_INT 16
80389: PUSH
80390: EMPTY
80391: LIST
80392: LIST
80393: LIST
80394: LIST
80395: LIST
80396: LIST
80397: LIST
80398: LIST
80399: LIST
80400: IN
80401: NOT
80402: OR
80403: IFFALSE 80407
// exit ;
80405: GO 81307
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
80407: LD_ADDR_VAR 0 2
80411: PUSH
80412: LD_VAR 0 2
80416: PPUSH
80417: LD_INT 21
80419: PUSH
80420: LD_INT 3
80422: PUSH
80423: EMPTY
80424: LIST
80425: LIST
80426: PUSH
80427: LD_INT 24
80429: PUSH
80430: LD_INT 250
80432: PUSH
80433: EMPTY
80434: LIST
80435: LIST
80436: PUSH
80437: EMPTY
80438: LIST
80439: LIST
80440: PPUSH
80441: CALL_OW 72
80445: ST_TO_ADDR
// case class of 1 , 15 :
80446: LD_VAR 0 4
80450: PUSH
80451: LD_INT 1
80453: DOUBLE
80454: EQUAL
80455: IFTRUE 80465
80457: LD_INT 15
80459: DOUBLE
80460: EQUAL
80461: IFTRUE 80465
80463: GO 80550
80465: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
80466: LD_ADDR_VAR 0 8
80470: PUSH
80471: LD_VAR 0 2
80475: PPUSH
80476: LD_INT 2
80478: PUSH
80479: LD_INT 30
80481: PUSH
80482: LD_INT 32
80484: PUSH
80485: EMPTY
80486: LIST
80487: LIST
80488: PUSH
80489: LD_INT 30
80491: PUSH
80492: LD_INT 31
80494: PUSH
80495: EMPTY
80496: LIST
80497: LIST
80498: PUSH
80499: EMPTY
80500: LIST
80501: LIST
80502: LIST
80503: PPUSH
80504: CALL_OW 72
80508: PUSH
80509: LD_VAR 0 2
80513: PPUSH
80514: LD_INT 2
80516: PUSH
80517: LD_INT 30
80519: PUSH
80520: LD_INT 4
80522: PUSH
80523: EMPTY
80524: LIST
80525: LIST
80526: PUSH
80527: LD_INT 30
80529: PUSH
80530: LD_INT 5
80532: PUSH
80533: EMPTY
80534: LIST
80535: LIST
80536: PUSH
80537: EMPTY
80538: LIST
80539: LIST
80540: LIST
80541: PPUSH
80542: CALL_OW 72
80546: ADD
80547: ST_TO_ADDR
80548: GO 80796
80550: LD_INT 2
80552: DOUBLE
80553: EQUAL
80554: IFTRUE 80564
80556: LD_INT 16
80558: DOUBLE
80559: EQUAL
80560: IFTRUE 80564
80562: GO 80610
80564: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
80565: LD_ADDR_VAR 0 8
80569: PUSH
80570: LD_VAR 0 2
80574: PPUSH
80575: LD_INT 2
80577: PUSH
80578: LD_INT 30
80580: PUSH
80581: LD_INT 0
80583: PUSH
80584: EMPTY
80585: LIST
80586: LIST
80587: PUSH
80588: LD_INT 30
80590: PUSH
80591: LD_INT 1
80593: PUSH
80594: EMPTY
80595: LIST
80596: LIST
80597: PUSH
80598: EMPTY
80599: LIST
80600: LIST
80601: LIST
80602: PPUSH
80603: CALL_OW 72
80607: ST_TO_ADDR
80608: GO 80796
80610: LD_INT 3
80612: DOUBLE
80613: EQUAL
80614: IFTRUE 80618
80616: GO 80664
80618: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
80619: LD_ADDR_VAR 0 8
80623: PUSH
80624: LD_VAR 0 2
80628: PPUSH
80629: LD_INT 2
80631: PUSH
80632: LD_INT 30
80634: PUSH
80635: LD_INT 2
80637: PUSH
80638: EMPTY
80639: LIST
80640: LIST
80641: PUSH
80642: LD_INT 30
80644: PUSH
80645: LD_INT 3
80647: PUSH
80648: EMPTY
80649: LIST
80650: LIST
80651: PUSH
80652: EMPTY
80653: LIST
80654: LIST
80655: LIST
80656: PPUSH
80657: CALL_OW 72
80661: ST_TO_ADDR
80662: GO 80796
80664: LD_INT 4
80666: DOUBLE
80667: EQUAL
80668: IFTRUE 80672
80670: GO 80729
80672: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
80673: LD_ADDR_VAR 0 8
80677: PUSH
80678: LD_VAR 0 2
80682: PPUSH
80683: LD_INT 2
80685: PUSH
80686: LD_INT 30
80688: PUSH
80689: LD_INT 6
80691: PUSH
80692: EMPTY
80693: LIST
80694: LIST
80695: PUSH
80696: LD_INT 30
80698: PUSH
80699: LD_INT 7
80701: PUSH
80702: EMPTY
80703: LIST
80704: LIST
80705: PUSH
80706: LD_INT 30
80708: PUSH
80709: LD_INT 8
80711: PUSH
80712: EMPTY
80713: LIST
80714: LIST
80715: PUSH
80716: EMPTY
80717: LIST
80718: LIST
80719: LIST
80720: LIST
80721: PPUSH
80722: CALL_OW 72
80726: ST_TO_ADDR
80727: GO 80796
80729: LD_INT 5
80731: DOUBLE
80732: EQUAL
80733: IFTRUE 80749
80735: LD_INT 8
80737: DOUBLE
80738: EQUAL
80739: IFTRUE 80749
80741: LD_INT 9
80743: DOUBLE
80744: EQUAL
80745: IFTRUE 80749
80747: GO 80795
80749: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
80750: LD_ADDR_VAR 0 8
80754: PUSH
80755: LD_VAR 0 2
80759: PPUSH
80760: LD_INT 2
80762: PUSH
80763: LD_INT 30
80765: PUSH
80766: LD_INT 4
80768: PUSH
80769: EMPTY
80770: LIST
80771: LIST
80772: PUSH
80773: LD_INT 30
80775: PUSH
80776: LD_INT 5
80778: PUSH
80779: EMPTY
80780: LIST
80781: LIST
80782: PUSH
80783: EMPTY
80784: LIST
80785: LIST
80786: LIST
80787: PPUSH
80788: CALL_OW 72
80792: ST_TO_ADDR
80793: GO 80796
80795: POP
// if not tmp then
80796: LD_VAR 0 8
80800: NOT
80801: IFFALSE 80805
// exit ;
80803: GO 81307
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
80805: LD_VAR 0 4
80809: PUSH
80810: LD_INT 1
80812: PUSH
80813: LD_INT 15
80815: PUSH
80816: EMPTY
80817: LIST
80818: LIST
80819: IN
80820: PUSH
80821: LD_EXP 59
80825: PUSH
80826: LD_VAR 0 1
80830: ARRAY
80831: AND
80832: IFFALSE 80988
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
80834: LD_ADDR_VAR 0 9
80838: PUSH
80839: LD_EXP 59
80843: PUSH
80844: LD_VAR 0 1
80848: ARRAY
80849: PUSH
80850: LD_INT 1
80852: ARRAY
80853: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
80854: LD_VAR 0 9
80858: PUSH
80859: LD_EXP 60
80863: PUSH
80864: LD_VAR 0 1
80868: ARRAY
80869: IN
80870: NOT
80871: IFFALSE 80986
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
80873: LD_ADDR_EXP 60
80877: PUSH
80878: LD_EXP 60
80882: PPUSH
80883: LD_VAR 0 1
80887: PUSH
80888: LD_EXP 60
80892: PUSH
80893: LD_VAR 0 1
80897: ARRAY
80898: PUSH
80899: LD_INT 1
80901: PLUS
80902: PUSH
80903: EMPTY
80904: LIST
80905: LIST
80906: PPUSH
80907: LD_VAR 0 9
80911: PPUSH
80912: CALL 24362 0 3
80916: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
80917: LD_ADDR_EXP 59
80921: PUSH
80922: LD_EXP 59
80926: PPUSH
80927: LD_VAR 0 1
80931: PPUSH
80932: LD_EXP 59
80936: PUSH
80937: LD_VAR 0 1
80941: ARRAY
80942: PUSH
80943: LD_VAR 0 9
80947: DIFF
80948: PPUSH
80949: CALL_OW 1
80953: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
80954: LD_VAR 0 3
80958: PPUSH
80959: LD_EXP 60
80963: PUSH
80964: LD_VAR 0 1
80968: ARRAY
80969: PUSH
80970: LD_EXP 60
80974: PUSH
80975: LD_VAR 0 1
80979: ARRAY
80980: ARRAY
80981: PPUSH
80982: CALL_OW 120
// end ; exit ;
80986: GO 81307
// end ; if tmp > 1 then
80988: LD_VAR 0 8
80992: PUSH
80993: LD_INT 1
80995: GREATER
80996: IFFALSE 81100
// for i = 2 to tmp do
80998: LD_ADDR_VAR 0 6
81002: PUSH
81003: DOUBLE
81004: LD_INT 2
81006: DEC
81007: ST_TO_ADDR
81008: LD_VAR 0 8
81012: PUSH
81013: FOR_TO
81014: IFFALSE 81098
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
81016: LD_VAR 0 8
81020: PUSH
81021: LD_VAR 0 6
81025: ARRAY
81026: PPUSH
81027: CALL_OW 461
81031: PUSH
81032: LD_INT 6
81034: EQUAL
81035: IFFALSE 81096
// begin x := tmp [ i ] ;
81037: LD_ADDR_VAR 0 9
81041: PUSH
81042: LD_VAR 0 8
81046: PUSH
81047: LD_VAR 0 6
81051: ARRAY
81052: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
81053: LD_ADDR_VAR 0 8
81057: PUSH
81058: LD_VAR 0 8
81062: PPUSH
81063: LD_VAR 0 6
81067: PPUSH
81068: CALL_OW 3
81072: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
81073: LD_ADDR_VAR 0 8
81077: PUSH
81078: LD_VAR 0 8
81082: PPUSH
81083: LD_INT 1
81085: PPUSH
81086: LD_VAR 0 9
81090: PPUSH
81091: CALL_OW 2
81095: ST_TO_ADDR
// end ;
81096: GO 81013
81098: POP
81099: POP
// for i in tmp do
81100: LD_ADDR_VAR 0 6
81104: PUSH
81105: LD_VAR 0 8
81109: PUSH
81110: FOR_IN
81111: IFFALSE 81180
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
81113: LD_VAR 0 6
81117: PPUSH
81118: CALL_OW 313
81122: PUSH
81123: LD_INT 6
81125: LESS
81126: PUSH
81127: LD_VAR 0 6
81131: PPUSH
81132: CALL_OW 266
81136: PUSH
81137: LD_INT 31
81139: PUSH
81140: LD_INT 32
81142: PUSH
81143: EMPTY
81144: LIST
81145: LIST
81146: IN
81147: NOT
81148: AND
81149: PUSH
81150: LD_VAR 0 6
81154: PPUSH
81155: CALL_OW 313
81159: PUSH
81160: LD_INT 0
81162: EQUAL
81163: OR
81164: IFFALSE 81178
// begin j := i ;
81166: LD_ADDR_VAR 0 7
81170: PUSH
81171: LD_VAR 0 6
81175: ST_TO_ADDR
// break ;
81176: GO 81180
// end ; end ;
81178: GO 81110
81180: POP
81181: POP
// if j then
81182: LD_VAR 0 7
81186: IFFALSE 81204
// ComEnterUnit ( unit , j ) else
81188: LD_VAR 0 3
81192: PPUSH
81193: LD_VAR 0 7
81197: PPUSH
81198: CALL_OW 120
81202: GO 81307
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
81204: LD_ADDR_VAR 0 10
81208: PUSH
81209: LD_VAR 0 2
81213: PPUSH
81214: LD_INT 2
81216: PUSH
81217: LD_INT 30
81219: PUSH
81220: LD_INT 0
81222: PUSH
81223: EMPTY
81224: LIST
81225: LIST
81226: PUSH
81227: LD_INT 30
81229: PUSH
81230: LD_INT 1
81232: PUSH
81233: EMPTY
81234: LIST
81235: LIST
81236: PUSH
81237: EMPTY
81238: LIST
81239: LIST
81240: LIST
81241: PPUSH
81242: CALL_OW 72
81246: ST_TO_ADDR
// if depot then
81247: LD_VAR 0 10
81251: IFFALSE 81307
// begin depot := NearestUnitToUnit ( depot , unit ) ;
81253: LD_ADDR_VAR 0 10
81257: PUSH
81258: LD_VAR 0 10
81262: PPUSH
81263: LD_VAR 0 3
81267: PPUSH
81268: CALL_OW 74
81272: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
81273: LD_VAR 0 3
81277: PPUSH
81278: LD_VAR 0 10
81282: PPUSH
81283: CALL_OW 296
81287: PUSH
81288: LD_INT 10
81290: GREATER
81291: IFFALSE 81307
// ComStandNearbyBuilding ( unit , depot ) ;
81293: LD_VAR 0 3
81297: PPUSH
81298: LD_VAR 0 10
81302: PPUSH
81303: CALL 20940 0 2
// end ; end ; end ;
81307: LD_VAR 0 5
81311: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
81312: LD_INT 0
81314: PPUSH
81315: PPUSH
81316: PPUSH
81317: PPUSH
// if not mc_bases then
81318: LD_EXP 50
81322: NOT
81323: IFFALSE 81327
// exit ;
81325: GO 81566
// for i = 1 to mc_bases do
81327: LD_ADDR_VAR 0 2
81331: PUSH
81332: DOUBLE
81333: LD_INT 1
81335: DEC
81336: ST_TO_ADDR
81337: LD_EXP 50
81341: PUSH
81342: FOR_TO
81343: IFFALSE 81564
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
81345: LD_ADDR_VAR 0 4
81349: PUSH
81350: LD_EXP 50
81354: PUSH
81355: LD_VAR 0 2
81359: ARRAY
81360: PPUSH
81361: LD_INT 21
81363: PUSH
81364: LD_INT 1
81366: PUSH
81367: EMPTY
81368: LIST
81369: LIST
81370: PPUSH
81371: CALL_OW 72
81375: PUSH
81376: LD_EXP 79
81380: PUSH
81381: LD_VAR 0 2
81385: ARRAY
81386: UNION
81387: ST_TO_ADDR
// if not tmp then
81388: LD_VAR 0 4
81392: NOT
81393: IFFALSE 81397
// continue ;
81395: GO 81342
// for j in tmp do
81397: LD_ADDR_VAR 0 3
81401: PUSH
81402: LD_VAR 0 4
81406: PUSH
81407: FOR_IN
81408: IFFALSE 81560
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
81410: LD_VAR 0 3
81414: PPUSH
81415: CALL_OW 110
81419: NOT
81420: PUSH
81421: LD_VAR 0 3
81425: PPUSH
81426: CALL_OW 314
81430: NOT
81431: AND
81432: PUSH
81433: LD_VAR 0 3
81437: PPUSH
81438: CALL_OW 311
81442: NOT
81443: AND
81444: PUSH
81445: LD_VAR 0 3
81449: PPUSH
81450: CALL_OW 310
81454: NOT
81455: AND
81456: PUSH
81457: LD_VAR 0 3
81461: PUSH
81462: LD_EXP 53
81466: PUSH
81467: LD_VAR 0 2
81471: ARRAY
81472: PUSH
81473: LD_INT 1
81475: ARRAY
81476: IN
81477: NOT
81478: AND
81479: PUSH
81480: LD_VAR 0 3
81484: PUSH
81485: LD_EXP 53
81489: PUSH
81490: LD_VAR 0 2
81494: ARRAY
81495: PUSH
81496: LD_INT 2
81498: ARRAY
81499: IN
81500: NOT
81501: AND
81502: PUSH
81503: LD_VAR 0 3
81507: PUSH
81508: LD_EXP 62
81512: PUSH
81513: LD_VAR 0 2
81517: ARRAY
81518: IN
81519: NOT
81520: AND
81521: IFFALSE 81558
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
81523: LD_VAR 0 2
81527: PPUSH
81528: LD_EXP 50
81532: PUSH
81533: LD_VAR 0 2
81537: ARRAY
81538: PPUSH
81539: LD_VAR 0 3
81543: PPUSH
81544: LD_VAR 0 3
81548: PPUSH
81549: CALL_OW 257
81553: PPUSH
81554: CALL 80330 0 4
// end ;
81558: GO 81407
81560: POP
81561: POP
// end ;
81562: GO 81342
81564: POP
81565: POP
// end ;
81566: LD_VAR 0 1
81570: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
81571: LD_INT 0
81573: PPUSH
81574: PPUSH
81575: PPUSH
81576: PPUSH
81577: PPUSH
81578: PPUSH
// if not mc_bases [ base ] then
81579: LD_EXP 50
81583: PUSH
81584: LD_VAR 0 1
81588: ARRAY
81589: NOT
81590: IFFALSE 81594
// exit ;
81592: GO 81776
// tmp := [ ] ;
81594: LD_ADDR_VAR 0 6
81598: PUSH
81599: EMPTY
81600: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
81601: LD_ADDR_VAR 0 7
81605: PUSH
81606: LD_VAR 0 3
81610: PPUSH
81611: LD_INT 0
81613: PPUSH
81614: CALL_OW 517
81618: ST_TO_ADDR
// if not list then
81619: LD_VAR 0 7
81623: NOT
81624: IFFALSE 81628
// exit ;
81626: GO 81776
// for i = 1 to amount do
81628: LD_ADDR_VAR 0 5
81632: PUSH
81633: DOUBLE
81634: LD_INT 1
81636: DEC
81637: ST_TO_ADDR
81638: LD_VAR 0 2
81642: PUSH
81643: FOR_TO
81644: IFFALSE 81724
// begin x := rand ( 1 , list [ 1 ] ) ;
81646: LD_ADDR_VAR 0 8
81650: PUSH
81651: LD_INT 1
81653: PPUSH
81654: LD_VAR 0 7
81658: PUSH
81659: LD_INT 1
81661: ARRAY
81662: PPUSH
81663: CALL_OW 12
81667: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
81668: LD_ADDR_VAR 0 6
81672: PUSH
81673: LD_VAR 0 6
81677: PPUSH
81678: LD_VAR 0 5
81682: PPUSH
81683: LD_VAR 0 7
81687: PUSH
81688: LD_INT 1
81690: ARRAY
81691: PUSH
81692: LD_VAR 0 8
81696: ARRAY
81697: PUSH
81698: LD_VAR 0 7
81702: PUSH
81703: LD_INT 2
81705: ARRAY
81706: PUSH
81707: LD_VAR 0 8
81711: ARRAY
81712: PUSH
81713: EMPTY
81714: LIST
81715: LIST
81716: PPUSH
81717: CALL_OW 1
81721: ST_TO_ADDR
// end ;
81722: GO 81643
81724: POP
81725: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
81726: LD_ADDR_EXP 63
81730: PUSH
81731: LD_EXP 63
81735: PPUSH
81736: LD_VAR 0 1
81740: PPUSH
81741: LD_VAR 0 6
81745: PPUSH
81746: CALL_OW 1
81750: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
81751: LD_ADDR_EXP 65
81755: PUSH
81756: LD_EXP 65
81760: PPUSH
81761: LD_VAR 0 1
81765: PPUSH
81766: LD_VAR 0 3
81770: PPUSH
81771: CALL_OW 1
81775: ST_TO_ADDR
// end ;
81776: LD_VAR 0 4
81780: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
81781: LD_INT 0
81783: PPUSH
// if not mc_bases [ base ] then
81784: LD_EXP 50
81788: PUSH
81789: LD_VAR 0 1
81793: ARRAY
81794: NOT
81795: IFFALSE 81799
// exit ;
81797: GO 81824
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
81799: LD_ADDR_EXP 55
81803: PUSH
81804: LD_EXP 55
81808: PPUSH
81809: LD_VAR 0 1
81813: PPUSH
81814: LD_VAR 0 2
81818: PPUSH
81819: CALL_OW 1
81823: ST_TO_ADDR
// end ;
81824: LD_VAR 0 3
81828: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
81829: LD_INT 0
81831: PPUSH
// if not mc_bases [ base ] then
81832: LD_EXP 50
81836: PUSH
81837: LD_VAR 0 1
81841: ARRAY
81842: NOT
81843: IFFALSE 81847
// exit ;
81845: GO 81884
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
81847: LD_ADDR_EXP 55
81851: PUSH
81852: LD_EXP 55
81856: PPUSH
81857: LD_VAR 0 1
81861: PPUSH
81862: LD_EXP 55
81866: PUSH
81867: LD_VAR 0 1
81871: ARRAY
81872: PUSH
81873: LD_VAR 0 2
81877: UNION
81878: PPUSH
81879: CALL_OW 1
81883: ST_TO_ADDR
// end ;
81884: LD_VAR 0 3
81888: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
81889: LD_INT 0
81891: PPUSH
// if not mc_bases [ base ] then
81892: LD_EXP 50
81896: PUSH
81897: LD_VAR 0 1
81901: ARRAY
81902: NOT
81903: IFFALSE 81907
// exit ;
81905: GO 81932
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
81907: LD_ADDR_EXP 71
81911: PUSH
81912: LD_EXP 71
81916: PPUSH
81917: LD_VAR 0 1
81921: PPUSH
81922: LD_VAR 0 2
81926: PPUSH
81927: CALL_OW 1
81931: ST_TO_ADDR
// end ;
81932: LD_VAR 0 3
81936: RET
// export function MC_InsertProduceList ( base , components ) ; begin
81937: LD_INT 0
81939: PPUSH
// if not mc_bases [ base ] then
81940: LD_EXP 50
81944: PUSH
81945: LD_VAR 0 1
81949: ARRAY
81950: NOT
81951: IFFALSE 81955
// exit ;
81953: GO 81992
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
81955: LD_ADDR_EXP 71
81959: PUSH
81960: LD_EXP 71
81964: PPUSH
81965: LD_VAR 0 1
81969: PPUSH
81970: LD_EXP 71
81974: PUSH
81975: LD_VAR 0 1
81979: ARRAY
81980: PUSH
81981: LD_VAR 0 2
81985: ADD
81986: PPUSH
81987: CALL_OW 1
81991: ST_TO_ADDR
// end ;
81992: LD_VAR 0 3
81996: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
81997: LD_INT 0
81999: PPUSH
// if not mc_bases [ base ] then
82000: LD_EXP 50
82004: PUSH
82005: LD_VAR 0 1
82009: ARRAY
82010: NOT
82011: IFFALSE 82015
// exit ;
82013: GO 82069
// mc_defender := Replace ( mc_defender , base , deflist ) ;
82015: LD_ADDR_EXP 72
82019: PUSH
82020: LD_EXP 72
82024: PPUSH
82025: LD_VAR 0 1
82029: PPUSH
82030: LD_VAR 0 2
82034: PPUSH
82035: CALL_OW 1
82039: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
82040: LD_ADDR_EXP 61
82044: PUSH
82045: LD_EXP 61
82049: PPUSH
82050: LD_VAR 0 1
82054: PPUSH
82055: LD_VAR 0 2
82059: PUSH
82060: LD_INT 0
82062: PLUS
82063: PPUSH
82064: CALL_OW 1
82068: ST_TO_ADDR
// end ;
82069: LD_VAR 0 3
82073: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
82074: LD_INT 0
82076: PPUSH
// if not mc_bases [ base ] then
82077: LD_EXP 50
82081: PUSH
82082: LD_VAR 0 1
82086: ARRAY
82087: NOT
82088: IFFALSE 82092
// exit ;
82090: GO 82117
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
82092: LD_ADDR_EXP 61
82096: PUSH
82097: LD_EXP 61
82101: PPUSH
82102: LD_VAR 0 1
82106: PPUSH
82107: LD_VAR 0 2
82111: PPUSH
82112: CALL_OW 1
82116: ST_TO_ADDR
// end ;
82117: LD_VAR 0 3
82121: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
82122: LD_INT 0
82124: PPUSH
82125: PPUSH
82126: PPUSH
82127: PPUSH
// if not mc_bases [ base ] then
82128: LD_EXP 50
82132: PUSH
82133: LD_VAR 0 1
82137: ARRAY
82138: NOT
82139: IFFALSE 82143
// exit ;
82141: GO 82208
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
82143: LD_ADDR_EXP 70
82147: PUSH
82148: LD_EXP 70
82152: PPUSH
82153: LD_VAR 0 1
82157: PUSH
82158: LD_EXP 70
82162: PUSH
82163: LD_VAR 0 1
82167: ARRAY
82168: PUSH
82169: LD_INT 1
82171: PLUS
82172: PUSH
82173: EMPTY
82174: LIST
82175: LIST
82176: PPUSH
82177: LD_VAR 0 1
82181: PUSH
82182: LD_VAR 0 2
82186: PUSH
82187: LD_VAR 0 3
82191: PUSH
82192: LD_VAR 0 4
82196: PUSH
82197: EMPTY
82198: LIST
82199: LIST
82200: LIST
82201: LIST
82202: PPUSH
82203: CALL 24362 0 3
82207: ST_TO_ADDR
// end ;
82208: LD_VAR 0 5
82212: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
82213: LD_INT 0
82215: PPUSH
// if not mc_bases [ base ] then
82216: LD_EXP 50
82220: PUSH
82221: LD_VAR 0 1
82225: ARRAY
82226: NOT
82227: IFFALSE 82231
// exit ;
82229: GO 82256
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
82231: LD_ADDR_EXP 87
82235: PUSH
82236: LD_EXP 87
82240: PPUSH
82241: LD_VAR 0 1
82245: PPUSH
82246: LD_VAR 0 2
82250: PPUSH
82251: CALL_OW 1
82255: ST_TO_ADDR
// end ;
82256: LD_VAR 0 3
82260: RET
// export function MC_GetMinesField ( base ) ; begin
82261: LD_INT 0
82263: PPUSH
// result := mc_mines [ base ] ;
82264: LD_ADDR_VAR 0 2
82268: PUSH
82269: LD_EXP 63
82273: PUSH
82274: LD_VAR 0 1
82278: ARRAY
82279: ST_TO_ADDR
// end ;
82280: LD_VAR 0 2
82284: RET
// export function MC_GetProduceList ( base ) ; begin
82285: LD_INT 0
82287: PPUSH
// result := mc_produce [ base ] ;
82288: LD_ADDR_VAR 0 2
82292: PUSH
82293: LD_EXP 71
82297: PUSH
82298: LD_VAR 0 1
82302: ARRAY
82303: ST_TO_ADDR
// end ;
82304: LD_VAR 0 2
82308: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
82309: LD_INT 0
82311: PPUSH
82312: PPUSH
// if not mc_bases then
82313: LD_EXP 50
82317: NOT
82318: IFFALSE 82322
// exit ;
82320: GO 82387
// if mc_bases [ base ] then
82322: LD_EXP 50
82326: PUSH
82327: LD_VAR 0 1
82331: ARRAY
82332: IFFALSE 82387
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
82334: LD_ADDR_VAR 0 3
82338: PUSH
82339: LD_EXP 50
82343: PUSH
82344: LD_VAR 0 1
82348: ARRAY
82349: PPUSH
82350: LD_INT 30
82352: PUSH
82353: LD_VAR 0 2
82357: PUSH
82358: EMPTY
82359: LIST
82360: LIST
82361: PPUSH
82362: CALL_OW 72
82366: ST_TO_ADDR
// if result then
82367: LD_VAR 0 3
82371: IFFALSE 82387
// result := result [ 1 ] ;
82373: LD_ADDR_VAR 0 3
82377: PUSH
82378: LD_VAR 0 3
82382: PUSH
82383: LD_INT 1
82385: ARRAY
82386: ST_TO_ADDR
// end ; end ;
82387: LD_VAR 0 3
82391: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
82392: LD_INT 0
82394: PPUSH
82395: PPUSH
// if not mc_bases then
82396: LD_EXP 50
82400: NOT
82401: IFFALSE 82405
// exit ;
82403: GO 82450
// if mc_bases [ base ] then
82405: LD_EXP 50
82409: PUSH
82410: LD_VAR 0 1
82414: ARRAY
82415: IFFALSE 82450
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
82417: LD_ADDR_VAR 0 3
82421: PUSH
82422: LD_EXP 50
82426: PUSH
82427: LD_VAR 0 1
82431: ARRAY
82432: PPUSH
82433: LD_INT 30
82435: PUSH
82436: LD_VAR 0 2
82440: PUSH
82441: EMPTY
82442: LIST
82443: LIST
82444: PPUSH
82445: CALL_OW 72
82449: ST_TO_ADDR
// end ;
82450: LD_VAR 0 3
82454: RET
// export function MC_SetTame ( base , area ) ; begin
82455: LD_INT 0
82457: PPUSH
// if not mc_bases or not base then
82458: LD_EXP 50
82462: NOT
82463: PUSH
82464: LD_VAR 0 1
82468: NOT
82469: OR
82470: IFFALSE 82474
// exit ;
82472: GO 82499
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
82474: LD_ADDR_EXP 78
82478: PUSH
82479: LD_EXP 78
82483: PPUSH
82484: LD_VAR 0 1
82488: PPUSH
82489: LD_VAR 0 2
82493: PPUSH
82494: CALL_OW 1
82498: ST_TO_ADDR
// end ;
82499: LD_VAR 0 3
82503: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
82504: LD_INT 0
82506: PPUSH
82507: PPUSH
// if not mc_bases or not base then
82508: LD_EXP 50
82512: NOT
82513: PUSH
82514: LD_VAR 0 1
82518: NOT
82519: OR
82520: IFFALSE 82524
// exit ;
82522: GO 82626
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
82524: LD_ADDR_VAR 0 4
82528: PUSH
82529: LD_EXP 50
82533: PUSH
82534: LD_VAR 0 1
82538: ARRAY
82539: PPUSH
82540: LD_INT 30
82542: PUSH
82543: LD_VAR 0 2
82547: PUSH
82548: EMPTY
82549: LIST
82550: LIST
82551: PPUSH
82552: CALL_OW 72
82556: ST_TO_ADDR
// if not tmp then
82557: LD_VAR 0 4
82561: NOT
82562: IFFALSE 82566
// exit ;
82564: GO 82626
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
82566: LD_ADDR_EXP 82
82570: PUSH
82571: LD_EXP 82
82575: PPUSH
82576: LD_VAR 0 1
82580: PPUSH
82581: LD_EXP 82
82585: PUSH
82586: LD_VAR 0 1
82590: ARRAY
82591: PPUSH
82592: LD_EXP 82
82596: PUSH
82597: LD_VAR 0 1
82601: ARRAY
82602: PUSH
82603: LD_INT 1
82605: PLUS
82606: PPUSH
82607: LD_VAR 0 4
82611: PUSH
82612: LD_INT 1
82614: ARRAY
82615: PPUSH
82616: CALL_OW 2
82620: PPUSH
82621: CALL_OW 1
82625: ST_TO_ADDR
// end ;
82626: LD_VAR 0 3
82630: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
82631: LD_INT 0
82633: PPUSH
82634: PPUSH
// if not mc_bases or not base or not kinds then
82635: LD_EXP 50
82639: NOT
82640: PUSH
82641: LD_VAR 0 1
82645: NOT
82646: OR
82647: PUSH
82648: LD_VAR 0 2
82652: NOT
82653: OR
82654: IFFALSE 82658
// exit ;
82656: GO 82719
// for i in kinds do
82658: LD_ADDR_VAR 0 4
82662: PUSH
82663: LD_VAR 0 2
82667: PUSH
82668: FOR_IN
82669: IFFALSE 82717
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
82671: LD_ADDR_EXP 84
82675: PUSH
82676: LD_EXP 84
82680: PPUSH
82681: LD_VAR 0 1
82685: PUSH
82686: LD_EXP 84
82690: PUSH
82691: LD_VAR 0 1
82695: ARRAY
82696: PUSH
82697: LD_INT 1
82699: PLUS
82700: PUSH
82701: EMPTY
82702: LIST
82703: LIST
82704: PPUSH
82705: LD_VAR 0 4
82709: PPUSH
82710: CALL 24362 0 3
82714: ST_TO_ADDR
82715: GO 82668
82717: POP
82718: POP
// end ;
82719: LD_VAR 0 3
82723: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
82724: LD_INT 0
82726: PPUSH
// if not mc_bases or not base or not areas then
82727: LD_EXP 50
82731: NOT
82732: PUSH
82733: LD_VAR 0 1
82737: NOT
82738: OR
82739: PUSH
82740: LD_VAR 0 2
82744: NOT
82745: OR
82746: IFFALSE 82750
// exit ;
82748: GO 82775
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
82750: LD_ADDR_EXP 68
82754: PUSH
82755: LD_EXP 68
82759: PPUSH
82760: LD_VAR 0 1
82764: PPUSH
82765: LD_VAR 0 2
82769: PPUSH
82770: CALL_OW 1
82774: ST_TO_ADDR
// end ;
82775: LD_VAR 0 3
82779: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
82780: LD_INT 0
82782: PPUSH
// if not mc_bases or not base or not teleports_exit then
82783: LD_EXP 50
82787: NOT
82788: PUSH
82789: LD_VAR 0 1
82793: NOT
82794: OR
82795: PUSH
82796: LD_VAR 0 2
82800: NOT
82801: OR
82802: IFFALSE 82806
// exit ;
82804: GO 82831
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
82806: LD_ADDR_EXP 85
82810: PUSH
82811: LD_EXP 85
82815: PPUSH
82816: LD_VAR 0 1
82820: PPUSH
82821: LD_VAR 0 2
82825: PPUSH
82826: CALL_OW 1
82830: ST_TO_ADDR
// end ;
82831: LD_VAR 0 3
82835: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
82836: LD_INT 0
82838: PPUSH
82839: PPUSH
82840: PPUSH
// if not mc_bases or not base or not ext_list then
82841: LD_EXP 50
82845: NOT
82846: PUSH
82847: LD_VAR 0 1
82851: NOT
82852: OR
82853: PUSH
82854: LD_VAR 0 5
82858: NOT
82859: OR
82860: IFFALSE 82864
// exit ;
82862: GO 83037
// tmp := GetFacExtXYD ( x , y , d ) ;
82864: LD_ADDR_VAR 0 8
82868: PUSH
82869: LD_VAR 0 2
82873: PPUSH
82874: LD_VAR 0 3
82878: PPUSH
82879: LD_VAR 0 4
82883: PPUSH
82884: CALL 53750 0 3
82888: ST_TO_ADDR
// if not tmp then
82889: LD_VAR 0 8
82893: NOT
82894: IFFALSE 82898
// exit ;
82896: GO 83037
// for i in tmp do
82898: LD_ADDR_VAR 0 7
82902: PUSH
82903: LD_VAR 0 8
82907: PUSH
82908: FOR_IN
82909: IFFALSE 83035
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
82911: LD_ADDR_EXP 55
82915: PUSH
82916: LD_EXP 55
82920: PPUSH
82921: LD_VAR 0 1
82925: PPUSH
82926: LD_EXP 55
82930: PUSH
82931: LD_VAR 0 1
82935: ARRAY
82936: PPUSH
82937: LD_EXP 55
82941: PUSH
82942: LD_VAR 0 1
82946: ARRAY
82947: PUSH
82948: LD_INT 1
82950: PLUS
82951: PPUSH
82952: LD_VAR 0 5
82956: PUSH
82957: LD_INT 1
82959: ARRAY
82960: PUSH
82961: LD_VAR 0 7
82965: PUSH
82966: LD_INT 1
82968: ARRAY
82969: PUSH
82970: LD_VAR 0 7
82974: PUSH
82975: LD_INT 2
82977: ARRAY
82978: PUSH
82979: LD_VAR 0 7
82983: PUSH
82984: LD_INT 3
82986: ARRAY
82987: PUSH
82988: EMPTY
82989: LIST
82990: LIST
82991: LIST
82992: LIST
82993: PPUSH
82994: CALL_OW 2
82998: PPUSH
82999: CALL_OW 1
83003: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
83004: LD_ADDR_VAR 0 5
83008: PUSH
83009: LD_VAR 0 5
83013: PPUSH
83014: LD_INT 1
83016: PPUSH
83017: CALL_OW 3
83021: ST_TO_ADDR
// if not ext_list then
83022: LD_VAR 0 5
83026: NOT
83027: IFFALSE 83033
// exit ;
83029: POP
83030: POP
83031: GO 83037
// end ;
83033: GO 82908
83035: POP
83036: POP
// end ;
83037: LD_VAR 0 6
83041: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
83042: LD_INT 0
83044: PPUSH
// if not mc_bases or not base or not weapon_list then
83045: LD_EXP 50
83049: NOT
83050: PUSH
83051: LD_VAR 0 1
83055: NOT
83056: OR
83057: PUSH
83058: LD_VAR 0 2
83062: NOT
83063: OR
83064: IFFALSE 83068
// exit ;
83066: GO 83093
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
83068: LD_ADDR_EXP 89
83072: PUSH
83073: LD_EXP 89
83077: PPUSH
83078: LD_VAR 0 1
83082: PPUSH
83083: LD_VAR 0 2
83087: PPUSH
83088: CALL_OW 1
83092: ST_TO_ADDR
// end ;
83093: LD_VAR 0 3
83097: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
83098: LD_INT 0
83100: PPUSH
// if not mc_bases or not base or not tech_list then
83101: LD_EXP 50
83105: NOT
83106: PUSH
83107: LD_VAR 0 1
83111: NOT
83112: OR
83113: PUSH
83114: LD_VAR 0 2
83118: NOT
83119: OR
83120: IFFALSE 83124
// exit ;
83122: GO 83149
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
83124: LD_ADDR_EXP 77
83128: PUSH
83129: LD_EXP 77
83133: PPUSH
83134: LD_VAR 0 1
83138: PPUSH
83139: LD_VAR 0 2
83143: PPUSH
83144: CALL_OW 1
83148: ST_TO_ADDR
// end ;
83149: LD_VAR 0 3
83153: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
83154: LD_INT 0
83156: PPUSH
// if not mc_bases or not parking_area or not base then
83157: LD_EXP 50
83161: NOT
83162: PUSH
83163: LD_VAR 0 2
83167: NOT
83168: OR
83169: PUSH
83170: LD_VAR 0 1
83174: NOT
83175: OR
83176: IFFALSE 83180
// exit ;
83178: GO 83205
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
83180: LD_ADDR_EXP 74
83184: PUSH
83185: LD_EXP 74
83189: PPUSH
83190: LD_VAR 0 1
83194: PPUSH
83195: LD_VAR 0 2
83199: PPUSH
83200: CALL_OW 1
83204: ST_TO_ADDR
// end ;
83205: LD_VAR 0 3
83209: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
83210: LD_INT 0
83212: PPUSH
// if not mc_bases or not base or not scan_area then
83213: LD_EXP 50
83217: NOT
83218: PUSH
83219: LD_VAR 0 1
83223: NOT
83224: OR
83225: PUSH
83226: LD_VAR 0 2
83230: NOT
83231: OR
83232: IFFALSE 83236
// exit ;
83234: GO 83261
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
83236: LD_ADDR_EXP 75
83240: PUSH
83241: LD_EXP 75
83245: PPUSH
83246: LD_VAR 0 1
83250: PPUSH
83251: LD_VAR 0 2
83255: PPUSH
83256: CALL_OW 1
83260: ST_TO_ADDR
// end ;
83261: LD_VAR 0 3
83265: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
83266: LD_INT 0
83268: PPUSH
83269: PPUSH
// if not mc_bases or not base then
83270: LD_EXP 50
83274: NOT
83275: PUSH
83276: LD_VAR 0 1
83280: NOT
83281: OR
83282: IFFALSE 83286
// exit ;
83284: GO 83350
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
83286: LD_ADDR_VAR 0 3
83290: PUSH
83291: LD_INT 1
83293: PUSH
83294: LD_INT 2
83296: PUSH
83297: LD_INT 3
83299: PUSH
83300: LD_INT 4
83302: PUSH
83303: LD_INT 11
83305: PUSH
83306: EMPTY
83307: LIST
83308: LIST
83309: LIST
83310: LIST
83311: LIST
83312: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
83313: LD_ADDR_EXP 77
83317: PUSH
83318: LD_EXP 77
83322: PPUSH
83323: LD_VAR 0 1
83327: PPUSH
83328: LD_EXP 77
83332: PUSH
83333: LD_VAR 0 1
83337: ARRAY
83338: PUSH
83339: LD_VAR 0 3
83343: DIFF
83344: PPUSH
83345: CALL_OW 1
83349: ST_TO_ADDR
// end ;
83350: LD_VAR 0 2
83354: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
83355: LD_INT 0
83357: PPUSH
// result := mc_vehicles [ base ] ;
83358: LD_ADDR_VAR 0 3
83362: PUSH
83363: LD_EXP 69
83367: PUSH
83368: LD_VAR 0 1
83372: ARRAY
83373: ST_TO_ADDR
// if onlyCombat then
83374: LD_VAR 0 2
83378: IFFALSE 83556
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
83380: LD_ADDR_VAR 0 3
83384: PUSH
83385: LD_VAR 0 3
83389: PUSH
83390: LD_VAR 0 3
83394: PPUSH
83395: LD_INT 2
83397: PUSH
83398: LD_INT 34
83400: PUSH
83401: LD_INT 12
83403: PUSH
83404: EMPTY
83405: LIST
83406: LIST
83407: PUSH
83408: LD_INT 34
83410: PUSH
83411: LD_INT 51
83413: PUSH
83414: EMPTY
83415: LIST
83416: LIST
83417: PUSH
83418: LD_INT 34
83420: PUSH
83421: LD_EXP 30
83425: PUSH
83426: EMPTY
83427: LIST
83428: LIST
83429: PUSH
83430: LD_INT 34
83432: PUSH
83433: LD_INT 32
83435: PUSH
83436: EMPTY
83437: LIST
83438: LIST
83439: PUSH
83440: LD_INT 34
83442: PUSH
83443: LD_INT 13
83445: PUSH
83446: EMPTY
83447: LIST
83448: LIST
83449: PUSH
83450: LD_INT 34
83452: PUSH
83453: LD_INT 52
83455: PUSH
83456: EMPTY
83457: LIST
83458: LIST
83459: PUSH
83460: LD_INT 34
83462: PUSH
83463: LD_EXP 35
83467: PUSH
83468: EMPTY
83469: LIST
83470: LIST
83471: PUSH
83472: LD_INT 34
83474: PUSH
83475: LD_INT 14
83477: PUSH
83478: EMPTY
83479: LIST
83480: LIST
83481: PUSH
83482: LD_INT 34
83484: PUSH
83485: LD_INT 53
83487: PUSH
83488: EMPTY
83489: LIST
83490: LIST
83491: PUSH
83492: LD_INT 34
83494: PUSH
83495: LD_EXP 29
83499: PUSH
83500: EMPTY
83501: LIST
83502: LIST
83503: PUSH
83504: LD_INT 34
83506: PUSH
83507: LD_INT 31
83509: PUSH
83510: EMPTY
83511: LIST
83512: LIST
83513: PUSH
83514: LD_INT 34
83516: PUSH
83517: LD_INT 48
83519: PUSH
83520: EMPTY
83521: LIST
83522: LIST
83523: PUSH
83524: LD_INT 34
83526: PUSH
83527: LD_INT 8
83529: PUSH
83530: EMPTY
83531: LIST
83532: LIST
83533: PUSH
83534: EMPTY
83535: LIST
83536: LIST
83537: LIST
83538: LIST
83539: LIST
83540: LIST
83541: LIST
83542: LIST
83543: LIST
83544: LIST
83545: LIST
83546: LIST
83547: LIST
83548: LIST
83549: PPUSH
83550: CALL_OW 72
83554: DIFF
83555: ST_TO_ADDR
// end ; end_of_file
83556: LD_VAR 0 3
83560: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
83561: LD_INT 0
83563: PPUSH
83564: PPUSH
83565: PPUSH
// if not mc_bases or not skirmish then
83566: LD_EXP 50
83570: NOT
83571: PUSH
83572: LD_EXP 48
83576: NOT
83577: OR
83578: IFFALSE 83582
// exit ;
83580: GO 83747
// for i = 1 to mc_bases do
83582: LD_ADDR_VAR 0 4
83586: PUSH
83587: DOUBLE
83588: LD_INT 1
83590: DEC
83591: ST_TO_ADDR
83592: LD_EXP 50
83596: PUSH
83597: FOR_TO
83598: IFFALSE 83745
// begin if sci in mc_bases [ i ] then
83600: LD_VAR 0 2
83604: PUSH
83605: LD_EXP 50
83609: PUSH
83610: LD_VAR 0 4
83614: ARRAY
83615: IN
83616: IFFALSE 83743
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
83618: LD_ADDR_EXP 79
83622: PUSH
83623: LD_EXP 79
83627: PPUSH
83628: LD_VAR 0 4
83632: PUSH
83633: LD_EXP 79
83637: PUSH
83638: LD_VAR 0 4
83642: ARRAY
83643: PUSH
83644: LD_INT 1
83646: PLUS
83647: PUSH
83648: EMPTY
83649: LIST
83650: LIST
83651: PPUSH
83652: LD_VAR 0 1
83656: PPUSH
83657: CALL 24362 0 3
83661: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
83662: LD_ADDR_VAR 0 5
83666: PUSH
83667: LD_EXP 50
83671: PUSH
83672: LD_VAR 0 4
83676: ARRAY
83677: PPUSH
83678: LD_INT 2
83680: PUSH
83681: LD_INT 30
83683: PUSH
83684: LD_INT 0
83686: PUSH
83687: EMPTY
83688: LIST
83689: LIST
83690: PUSH
83691: LD_INT 30
83693: PUSH
83694: LD_INT 1
83696: PUSH
83697: EMPTY
83698: LIST
83699: LIST
83700: PUSH
83701: EMPTY
83702: LIST
83703: LIST
83704: LIST
83705: PPUSH
83706: CALL_OW 72
83710: PPUSH
83711: LD_VAR 0 1
83715: PPUSH
83716: CALL_OW 74
83720: ST_TO_ADDR
// if tmp then
83721: LD_VAR 0 5
83725: IFFALSE 83741
// ComStandNearbyBuilding ( ape , tmp ) ;
83727: LD_VAR 0 1
83731: PPUSH
83732: LD_VAR 0 5
83736: PPUSH
83737: CALL 20940 0 2
// break ;
83741: GO 83745
// end ; end ;
83743: GO 83597
83745: POP
83746: POP
// end ;
83747: LD_VAR 0 3
83751: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
83752: LD_INT 0
83754: PPUSH
83755: PPUSH
83756: PPUSH
// if not mc_bases or not skirmish then
83757: LD_EXP 50
83761: NOT
83762: PUSH
83763: LD_EXP 48
83767: NOT
83768: OR
83769: IFFALSE 83773
// exit ;
83771: GO 83862
// for i = 1 to mc_bases do
83773: LD_ADDR_VAR 0 4
83777: PUSH
83778: DOUBLE
83779: LD_INT 1
83781: DEC
83782: ST_TO_ADDR
83783: LD_EXP 50
83787: PUSH
83788: FOR_TO
83789: IFFALSE 83860
// begin if building in mc_busy_turret_list [ i ] then
83791: LD_VAR 0 1
83795: PUSH
83796: LD_EXP 60
83800: PUSH
83801: LD_VAR 0 4
83805: ARRAY
83806: IN
83807: IFFALSE 83858
// begin tmp := mc_busy_turret_list [ i ] diff building ;
83809: LD_ADDR_VAR 0 5
83813: PUSH
83814: LD_EXP 60
83818: PUSH
83819: LD_VAR 0 4
83823: ARRAY
83824: PUSH
83825: LD_VAR 0 1
83829: DIFF
83830: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
83831: LD_ADDR_EXP 60
83835: PUSH
83836: LD_EXP 60
83840: PPUSH
83841: LD_VAR 0 4
83845: PPUSH
83846: LD_VAR 0 5
83850: PPUSH
83851: CALL_OW 1
83855: ST_TO_ADDR
// break ;
83856: GO 83860
// end ; end ;
83858: GO 83788
83860: POP
83861: POP
// end ;
83862: LD_VAR 0 3
83866: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
83867: LD_INT 0
83869: PPUSH
83870: PPUSH
83871: PPUSH
// if not mc_bases or not skirmish then
83872: LD_EXP 50
83876: NOT
83877: PUSH
83878: LD_EXP 48
83882: NOT
83883: OR
83884: IFFALSE 83888
// exit ;
83886: GO 84087
// for i = 1 to mc_bases do
83888: LD_ADDR_VAR 0 5
83892: PUSH
83893: DOUBLE
83894: LD_INT 1
83896: DEC
83897: ST_TO_ADDR
83898: LD_EXP 50
83902: PUSH
83903: FOR_TO
83904: IFFALSE 84085
// if building in mc_bases [ i ] then
83906: LD_VAR 0 1
83910: PUSH
83911: LD_EXP 50
83915: PUSH
83916: LD_VAR 0 5
83920: ARRAY
83921: IN
83922: IFFALSE 84083
// begin tmp := mc_bases [ i ] diff building ;
83924: LD_ADDR_VAR 0 6
83928: PUSH
83929: LD_EXP 50
83933: PUSH
83934: LD_VAR 0 5
83938: ARRAY
83939: PUSH
83940: LD_VAR 0 1
83944: DIFF
83945: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
83946: LD_ADDR_EXP 50
83950: PUSH
83951: LD_EXP 50
83955: PPUSH
83956: LD_VAR 0 5
83960: PPUSH
83961: LD_VAR 0 6
83965: PPUSH
83966: CALL_OW 1
83970: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
83971: LD_VAR 0 1
83975: PUSH
83976: LD_EXP 58
83980: PUSH
83981: LD_VAR 0 5
83985: ARRAY
83986: IN
83987: IFFALSE 84026
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
83989: LD_ADDR_EXP 58
83993: PUSH
83994: LD_EXP 58
83998: PPUSH
83999: LD_VAR 0 5
84003: PPUSH
84004: LD_EXP 58
84008: PUSH
84009: LD_VAR 0 5
84013: ARRAY
84014: PUSH
84015: LD_VAR 0 1
84019: DIFF
84020: PPUSH
84021: CALL_OW 1
84025: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
84026: LD_VAR 0 1
84030: PUSH
84031: LD_EXP 59
84035: PUSH
84036: LD_VAR 0 5
84040: ARRAY
84041: IN
84042: IFFALSE 84081
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
84044: LD_ADDR_EXP 59
84048: PUSH
84049: LD_EXP 59
84053: PPUSH
84054: LD_VAR 0 5
84058: PPUSH
84059: LD_EXP 59
84063: PUSH
84064: LD_VAR 0 5
84068: ARRAY
84069: PUSH
84070: LD_VAR 0 1
84074: DIFF
84075: PPUSH
84076: CALL_OW 1
84080: ST_TO_ADDR
// break ;
84081: GO 84085
// end ;
84083: GO 83903
84085: POP
84086: POP
// end ;
84087: LD_VAR 0 4
84091: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
84092: LD_INT 0
84094: PPUSH
84095: PPUSH
84096: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
84097: LD_EXP 50
84101: NOT
84102: PUSH
84103: LD_EXP 48
84107: NOT
84108: OR
84109: PUSH
84110: LD_VAR 0 3
84114: PUSH
84115: LD_EXP 76
84119: IN
84120: NOT
84121: OR
84122: IFFALSE 84126
// exit ;
84124: GO 84249
// for i = 1 to mc_vehicles do
84126: LD_ADDR_VAR 0 6
84130: PUSH
84131: DOUBLE
84132: LD_INT 1
84134: DEC
84135: ST_TO_ADDR
84136: LD_EXP 69
84140: PUSH
84141: FOR_TO
84142: IFFALSE 84247
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
84144: LD_VAR 0 2
84148: PUSH
84149: LD_EXP 69
84153: PUSH
84154: LD_VAR 0 6
84158: ARRAY
84159: IN
84160: PUSH
84161: LD_VAR 0 1
84165: PUSH
84166: LD_EXP 69
84170: PUSH
84171: LD_VAR 0 6
84175: ARRAY
84176: IN
84177: OR
84178: IFFALSE 84245
// begin tmp := mc_vehicles [ i ] diff old ;
84180: LD_ADDR_VAR 0 7
84184: PUSH
84185: LD_EXP 69
84189: PUSH
84190: LD_VAR 0 6
84194: ARRAY
84195: PUSH
84196: LD_VAR 0 2
84200: DIFF
84201: ST_TO_ADDR
// tmp := tmp diff new ;
84202: LD_ADDR_VAR 0 7
84206: PUSH
84207: LD_VAR 0 7
84211: PUSH
84212: LD_VAR 0 1
84216: DIFF
84217: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
84218: LD_ADDR_EXP 69
84222: PUSH
84223: LD_EXP 69
84227: PPUSH
84228: LD_VAR 0 6
84232: PPUSH
84233: LD_VAR 0 7
84237: PPUSH
84238: CALL_OW 1
84242: ST_TO_ADDR
// break ;
84243: GO 84247
// end ;
84245: GO 84141
84247: POP
84248: POP
// end ;
84249: LD_VAR 0 5
84253: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
84254: LD_INT 0
84256: PPUSH
84257: PPUSH
84258: PPUSH
84259: PPUSH
// if not mc_bases or not skirmish then
84260: LD_EXP 50
84264: NOT
84265: PUSH
84266: LD_EXP 48
84270: NOT
84271: OR
84272: IFFALSE 84276
// exit ;
84274: GO 84659
// side := GetSide ( vehicle ) ;
84276: LD_ADDR_VAR 0 5
84280: PUSH
84281: LD_VAR 0 1
84285: PPUSH
84286: CALL_OW 255
84290: ST_TO_ADDR
// for i = 1 to mc_bases do
84291: LD_ADDR_VAR 0 4
84295: PUSH
84296: DOUBLE
84297: LD_INT 1
84299: DEC
84300: ST_TO_ADDR
84301: LD_EXP 50
84305: PUSH
84306: FOR_TO
84307: IFFALSE 84657
// begin if factory in mc_bases [ i ] then
84309: LD_VAR 0 2
84313: PUSH
84314: LD_EXP 50
84318: PUSH
84319: LD_VAR 0 4
84323: ARRAY
84324: IN
84325: IFFALSE 84655
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ar_crane , ru_siberium_rocket , us_siberium_rocket ] then
84327: LD_EXP 72
84331: PUSH
84332: LD_VAR 0 4
84336: ARRAY
84337: PUSH
84338: LD_EXP 61
84342: PUSH
84343: LD_VAR 0 4
84347: ARRAY
84348: LESS
84349: PUSH
84350: LD_VAR 0 1
84354: PPUSH
84355: CALL_OW 264
84359: PUSH
84360: LD_INT 31
84362: PUSH
84363: LD_INT 32
84365: PUSH
84366: LD_INT 51
84368: PUSH
84369: LD_EXP 30
84373: PUSH
84374: LD_INT 12
84376: PUSH
84377: LD_INT 30
84379: PUSH
84380: LD_EXP 29
84384: PUSH
84385: LD_INT 11
84387: PUSH
84388: LD_INT 53
84390: PUSH
84391: LD_INT 14
84393: PUSH
84394: LD_EXP 33
84398: PUSH
84399: LD_INT 29
84401: PUSH
84402: LD_EXP 31
84406: PUSH
84407: LD_INT 13
84409: PUSH
84410: LD_INT 52
84412: PUSH
84413: LD_EXP 35
84417: PUSH
84418: LD_INT 48
84420: PUSH
84421: LD_INT 8
84423: PUSH
84424: EMPTY
84425: LIST
84426: LIST
84427: LIST
84428: LIST
84429: LIST
84430: LIST
84431: LIST
84432: LIST
84433: LIST
84434: LIST
84435: LIST
84436: LIST
84437: LIST
84438: LIST
84439: LIST
84440: LIST
84441: LIST
84442: LIST
84443: IN
84444: NOT
84445: AND
84446: IFFALSE 84494
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
84448: LD_ADDR_EXP 72
84452: PUSH
84453: LD_EXP 72
84457: PPUSH
84458: LD_VAR 0 4
84462: PUSH
84463: LD_EXP 72
84467: PUSH
84468: LD_VAR 0 4
84472: ARRAY
84473: PUSH
84474: LD_INT 1
84476: PLUS
84477: PUSH
84478: EMPTY
84479: LIST
84480: LIST
84481: PPUSH
84482: LD_VAR 0 1
84486: PPUSH
84487: CALL 24362 0 3
84491: ST_TO_ADDR
84492: GO 84538
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
84494: LD_ADDR_EXP 69
84498: PUSH
84499: LD_EXP 69
84503: PPUSH
84504: LD_VAR 0 4
84508: PUSH
84509: LD_EXP 69
84513: PUSH
84514: LD_VAR 0 4
84518: ARRAY
84519: PUSH
84520: LD_INT 1
84522: PLUS
84523: PUSH
84524: EMPTY
84525: LIST
84526: LIST
84527: PPUSH
84528: LD_VAR 0 1
84532: PPUSH
84533: CALL 24362 0 3
84537: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
84538: LD_VAR 0 1
84542: PPUSH
84543: CALL_OW 263
84547: PUSH
84548: LD_INT 2
84550: EQUAL
84551: IFFALSE 84571
// begin repeat wait ( 0 0$1 ) ;
84553: LD_INT 35
84555: PPUSH
84556: CALL_OW 67
// until IsControledBy ( vehicle ) ;
84560: LD_VAR 0 1
84564: PPUSH
84565: CALL_OW 312
84569: IFFALSE 84553
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
84571: LD_VAR 0 1
84575: PPUSH
84576: LD_EXP 74
84580: PUSH
84581: LD_VAR 0 4
84585: ARRAY
84586: PPUSH
84587: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
84591: LD_VAR 0 1
84595: PPUSH
84596: CALL_OW 263
84600: PUSH
84601: LD_INT 1
84603: NONEQUAL
84604: IFFALSE 84608
// break ;
84606: GO 84657
// repeat wait ( 0 0$1 ) ;
84608: LD_INT 35
84610: PPUSH
84611: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
84615: LD_VAR 0 1
84619: PPUSH
84620: LD_EXP 74
84624: PUSH
84625: LD_VAR 0 4
84629: ARRAY
84630: PPUSH
84631: CALL_OW 308
84635: IFFALSE 84608
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
84637: LD_VAR 0 1
84641: PPUSH
84642: CALL_OW 311
84646: PPUSH
84647: CALL_OW 121
// exit ;
84651: POP
84652: POP
84653: GO 84659
// end ; end ;
84655: GO 84306
84657: POP
84658: POP
// end ;
84659: LD_VAR 0 3
84663: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
84664: LD_INT 0
84666: PPUSH
84667: PPUSH
84668: PPUSH
84669: PPUSH
// if not mc_bases or not skirmish then
84670: LD_EXP 50
84674: NOT
84675: PUSH
84676: LD_EXP 48
84680: NOT
84681: OR
84682: IFFALSE 84686
// exit ;
84684: GO 85039
// repeat wait ( 0 0$1 ) ;
84686: LD_INT 35
84688: PPUSH
84689: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
84693: LD_VAR 0 2
84697: PPUSH
84698: LD_VAR 0 3
84702: PPUSH
84703: CALL_OW 284
84707: IFFALSE 84686
// if GetResourceTypeXY ( x , y ) = mat_artefact then
84709: LD_VAR 0 2
84713: PPUSH
84714: LD_VAR 0 3
84718: PPUSH
84719: CALL_OW 283
84723: PUSH
84724: LD_INT 4
84726: EQUAL
84727: IFFALSE 84731
// exit ;
84729: GO 85039
// for i = 1 to mc_bases do
84731: LD_ADDR_VAR 0 7
84735: PUSH
84736: DOUBLE
84737: LD_INT 1
84739: DEC
84740: ST_TO_ADDR
84741: LD_EXP 50
84745: PUSH
84746: FOR_TO
84747: IFFALSE 85037
// begin if mc_crates_area [ i ] then
84749: LD_EXP 68
84753: PUSH
84754: LD_VAR 0 7
84758: ARRAY
84759: IFFALSE 84870
// for j in mc_crates_area [ i ] do
84761: LD_ADDR_VAR 0 8
84765: PUSH
84766: LD_EXP 68
84770: PUSH
84771: LD_VAR 0 7
84775: ARRAY
84776: PUSH
84777: FOR_IN
84778: IFFALSE 84868
// if InArea ( x , y , j ) then
84780: LD_VAR 0 2
84784: PPUSH
84785: LD_VAR 0 3
84789: PPUSH
84790: LD_VAR 0 8
84794: PPUSH
84795: CALL_OW 309
84799: IFFALSE 84866
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
84801: LD_ADDR_EXP 66
84805: PUSH
84806: LD_EXP 66
84810: PPUSH
84811: LD_VAR 0 7
84815: PUSH
84816: LD_EXP 66
84820: PUSH
84821: LD_VAR 0 7
84825: ARRAY
84826: PUSH
84827: LD_INT 1
84829: PLUS
84830: PUSH
84831: EMPTY
84832: LIST
84833: LIST
84834: PPUSH
84835: LD_VAR 0 4
84839: PUSH
84840: LD_VAR 0 2
84844: PUSH
84845: LD_VAR 0 3
84849: PUSH
84850: EMPTY
84851: LIST
84852: LIST
84853: LIST
84854: PPUSH
84855: CALL 24362 0 3
84859: ST_TO_ADDR
// exit ;
84860: POP
84861: POP
84862: POP
84863: POP
84864: GO 85039
// end ;
84866: GO 84777
84868: POP
84869: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
84870: LD_ADDR_VAR 0 9
84874: PUSH
84875: LD_EXP 50
84879: PUSH
84880: LD_VAR 0 7
84884: ARRAY
84885: PPUSH
84886: LD_INT 2
84888: PUSH
84889: LD_INT 30
84891: PUSH
84892: LD_INT 0
84894: PUSH
84895: EMPTY
84896: LIST
84897: LIST
84898: PUSH
84899: LD_INT 30
84901: PUSH
84902: LD_INT 1
84904: PUSH
84905: EMPTY
84906: LIST
84907: LIST
84908: PUSH
84909: EMPTY
84910: LIST
84911: LIST
84912: LIST
84913: PPUSH
84914: CALL_OW 72
84918: ST_TO_ADDR
// if not depot then
84919: LD_VAR 0 9
84923: NOT
84924: IFFALSE 84928
// continue ;
84926: GO 84746
// for j in depot do
84928: LD_ADDR_VAR 0 8
84932: PUSH
84933: LD_VAR 0 9
84937: PUSH
84938: FOR_IN
84939: IFFALSE 85033
// if GetDistUnitXY ( j , x , y ) < 30 then
84941: LD_VAR 0 8
84945: PPUSH
84946: LD_VAR 0 2
84950: PPUSH
84951: LD_VAR 0 3
84955: PPUSH
84956: CALL_OW 297
84960: PUSH
84961: LD_INT 30
84963: LESS
84964: IFFALSE 85031
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
84966: LD_ADDR_EXP 66
84970: PUSH
84971: LD_EXP 66
84975: PPUSH
84976: LD_VAR 0 7
84980: PUSH
84981: LD_EXP 66
84985: PUSH
84986: LD_VAR 0 7
84990: ARRAY
84991: PUSH
84992: LD_INT 1
84994: PLUS
84995: PUSH
84996: EMPTY
84997: LIST
84998: LIST
84999: PPUSH
85000: LD_VAR 0 4
85004: PUSH
85005: LD_VAR 0 2
85009: PUSH
85010: LD_VAR 0 3
85014: PUSH
85015: EMPTY
85016: LIST
85017: LIST
85018: LIST
85019: PPUSH
85020: CALL 24362 0 3
85024: ST_TO_ADDR
// exit ;
85025: POP
85026: POP
85027: POP
85028: POP
85029: GO 85039
// end ;
85031: GO 84938
85033: POP
85034: POP
// end ;
85035: GO 84746
85037: POP
85038: POP
// end ;
85039: LD_VAR 0 6
85043: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
85044: LD_INT 0
85046: PPUSH
85047: PPUSH
85048: PPUSH
85049: PPUSH
// if not mc_bases or not skirmish then
85050: LD_EXP 50
85054: NOT
85055: PUSH
85056: LD_EXP 48
85060: NOT
85061: OR
85062: IFFALSE 85066
// exit ;
85064: GO 85343
// side := GetSide ( lab ) ;
85066: LD_ADDR_VAR 0 4
85070: PUSH
85071: LD_VAR 0 2
85075: PPUSH
85076: CALL_OW 255
85080: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
85081: LD_VAR 0 4
85085: PUSH
85086: LD_EXP 76
85090: IN
85091: NOT
85092: PUSH
85093: LD_EXP 77
85097: NOT
85098: OR
85099: PUSH
85100: LD_EXP 50
85104: NOT
85105: OR
85106: IFFALSE 85110
// exit ;
85108: GO 85343
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
85110: LD_ADDR_EXP 77
85114: PUSH
85115: LD_EXP 77
85119: PPUSH
85120: LD_VAR 0 4
85124: PPUSH
85125: LD_EXP 77
85129: PUSH
85130: LD_VAR 0 4
85134: ARRAY
85135: PUSH
85136: LD_VAR 0 1
85140: DIFF
85141: PPUSH
85142: CALL_OW 1
85146: ST_TO_ADDR
// for i = 1 to mc_bases do
85147: LD_ADDR_VAR 0 5
85151: PUSH
85152: DOUBLE
85153: LD_INT 1
85155: DEC
85156: ST_TO_ADDR
85157: LD_EXP 50
85161: PUSH
85162: FOR_TO
85163: IFFALSE 85341
// begin if lab in mc_bases [ i ] then
85165: LD_VAR 0 2
85169: PUSH
85170: LD_EXP 50
85174: PUSH
85175: LD_VAR 0 5
85179: ARRAY
85180: IN
85181: IFFALSE 85339
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
85183: LD_VAR 0 1
85187: PUSH
85188: LD_INT 11
85190: PUSH
85191: LD_INT 4
85193: PUSH
85194: LD_INT 3
85196: PUSH
85197: LD_INT 2
85199: PUSH
85200: EMPTY
85201: LIST
85202: LIST
85203: LIST
85204: LIST
85205: IN
85206: PUSH
85207: LD_EXP 80
85211: PUSH
85212: LD_VAR 0 5
85216: ARRAY
85217: AND
85218: IFFALSE 85339
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
85220: LD_ADDR_VAR 0 6
85224: PUSH
85225: LD_EXP 80
85229: PUSH
85230: LD_VAR 0 5
85234: ARRAY
85235: PUSH
85236: LD_INT 1
85238: ARRAY
85239: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
85240: LD_ADDR_EXP 80
85244: PUSH
85245: LD_EXP 80
85249: PPUSH
85250: LD_VAR 0 5
85254: PPUSH
85255: EMPTY
85256: PPUSH
85257: CALL_OW 1
85261: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
85262: LD_VAR 0 6
85266: PPUSH
85267: LD_INT 0
85269: PPUSH
85270: CALL_OW 109
// ComExitBuilding ( tmp ) ;
85274: LD_VAR 0 6
85278: PPUSH
85279: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
85283: LD_ADDR_EXP 79
85287: PUSH
85288: LD_EXP 79
85292: PPUSH
85293: LD_VAR 0 5
85297: PPUSH
85298: LD_EXP 79
85302: PUSH
85303: LD_VAR 0 5
85307: ARRAY
85308: PPUSH
85309: LD_INT 1
85311: PPUSH
85312: LD_VAR 0 6
85316: PPUSH
85317: CALL_OW 2
85321: PPUSH
85322: CALL_OW 1
85326: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
85327: LD_VAR 0 5
85331: PPUSH
85332: LD_INT 112
85334: PPUSH
85335: CALL 62172 0 2
// end ; end ; end ;
85339: GO 85162
85341: POP
85342: POP
// end ;
85343: LD_VAR 0 3
85347: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
85348: LD_INT 0
85350: PPUSH
85351: PPUSH
85352: PPUSH
85353: PPUSH
85354: PPUSH
85355: PPUSH
85356: PPUSH
85357: PPUSH
// if not mc_bases or not skirmish then
85358: LD_EXP 50
85362: NOT
85363: PUSH
85364: LD_EXP 48
85368: NOT
85369: OR
85370: IFFALSE 85374
// exit ;
85372: GO 86745
// for i = 1 to mc_bases do
85374: LD_ADDR_VAR 0 3
85378: PUSH
85379: DOUBLE
85380: LD_INT 1
85382: DEC
85383: ST_TO_ADDR
85384: LD_EXP 50
85388: PUSH
85389: FOR_TO
85390: IFFALSE 86743
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
85392: LD_VAR 0 1
85396: PUSH
85397: LD_EXP 50
85401: PUSH
85402: LD_VAR 0 3
85406: ARRAY
85407: IN
85408: PUSH
85409: LD_VAR 0 1
85413: PUSH
85414: LD_EXP 57
85418: PUSH
85419: LD_VAR 0 3
85423: ARRAY
85424: IN
85425: OR
85426: PUSH
85427: LD_VAR 0 1
85431: PUSH
85432: LD_EXP 72
85436: PUSH
85437: LD_VAR 0 3
85441: ARRAY
85442: IN
85443: OR
85444: PUSH
85445: LD_VAR 0 1
85449: PUSH
85450: LD_EXP 69
85454: PUSH
85455: LD_VAR 0 3
85459: ARRAY
85460: IN
85461: OR
85462: PUSH
85463: LD_VAR 0 1
85467: PUSH
85468: LD_EXP 79
85472: PUSH
85473: LD_VAR 0 3
85477: ARRAY
85478: IN
85479: OR
85480: PUSH
85481: LD_VAR 0 1
85485: PUSH
85486: LD_EXP 80
85490: PUSH
85491: LD_VAR 0 3
85495: ARRAY
85496: IN
85497: OR
85498: IFFALSE 86741
// begin if un in mc_ape [ i ] then
85500: LD_VAR 0 1
85504: PUSH
85505: LD_EXP 79
85509: PUSH
85510: LD_VAR 0 3
85514: ARRAY
85515: IN
85516: IFFALSE 85555
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
85518: LD_ADDR_EXP 79
85522: PUSH
85523: LD_EXP 79
85527: PPUSH
85528: LD_VAR 0 3
85532: PPUSH
85533: LD_EXP 79
85537: PUSH
85538: LD_VAR 0 3
85542: ARRAY
85543: PUSH
85544: LD_VAR 0 1
85548: DIFF
85549: PPUSH
85550: CALL_OW 1
85554: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
85555: LD_VAR 0 1
85559: PUSH
85560: LD_EXP 80
85564: PUSH
85565: LD_VAR 0 3
85569: ARRAY
85570: IN
85571: IFFALSE 85595
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
85573: LD_ADDR_EXP 80
85577: PUSH
85578: LD_EXP 80
85582: PPUSH
85583: LD_VAR 0 3
85587: PPUSH
85588: EMPTY
85589: PPUSH
85590: CALL_OW 1
85594: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
85595: LD_VAR 0 1
85599: PPUSH
85600: CALL_OW 247
85604: PUSH
85605: LD_INT 2
85607: EQUAL
85608: PUSH
85609: LD_VAR 0 1
85613: PPUSH
85614: CALL_OW 110
85618: PUSH
85619: LD_INT 20
85621: EQUAL
85622: PUSH
85623: LD_VAR 0 1
85627: PUSH
85628: LD_EXP 72
85632: PUSH
85633: LD_VAR 0 3
85637: ARRAY
85638: IN
85639: OR
85640: PUSH
85641: LD_VAR 0 1
85645: PPUSH
85646: CALL_OW 264
85650: PUSH
85651: LD_INT 12
85653: PUSH
85654: LD_INT 51
85656: PUSH
85657: LD_EXP 30
85661: PUSH
85662: LD_INT 32
85664: PUSH
85665: LD_INT 13
85667: PUSH
85668: LD_INT 52
85670: PUSH
85671: LD_INT 31
85673: PUSH
85674: EMPTY
85675: LIST
85676: LIST
85677: LIST
85678: LIST
85679: LIST
85680: LIST
85681: LIST
85682: IN
85683: OR
85684: AND
85685: IFFALSE 85993
// begin if un in mc_defender [ i ] then
85687: LD_VAR 0 1
85691: PUSH
85692: LD_EXP 72
85696: PUSH
85697: LD_VAR 0 3
85701: ARRAY
85702: IN
85703: IFFALSE 85742
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
85705: LD_ADDR_EXP 72
85709: PUSH
85710: LD_EXP 72
85714: PPUSH
85715: LD_VAR 0 3
85719: PPUSH
85720: LD_EXP 72
85724: PUSH
85725: LD_VAR 0 3
85729: ARRAY
85730: PUSH
85731: LD_VAR 0 1
85735: DIFF
85736: PPUSH
85737: CALL_OW 1
85741: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
85742: LD_ADDR_VAR 0 8
85746: PUSH
85747: LD_VAR 0 3
85751: PPUSH
85752: LD_INT 3
85754: PPUSH
85755: CALL 82392 0 2
85759: ST_TO_ADDR
// if fac then
85760: LD_VAR 0 8
85764: IFFALSE 85993
// begin for j in fac do
85766: LD_ADDR_VAR 0 4
85770: PUSH
85771: LD_VAR 0 8
85775: PUSH
85776: FOR_IN
85777: IFFALSE 85991
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
85779: LD_ADDR_VAR 0 9
85783: PUSH
85784: LD_VAR 0 8
85788: PPUSH
85789: LD_VAR 0 1
85793: PPUSH
85794: CALL_OW 265
85798: PPUSH
85799: LD_VAR 0 1
85803: PPUSH
85804: CALL_OW 262
85808: PPUSH
85809: LD_VAR 0 1
85813: PPUSH
85814: CALL_OW 263
85818: PPUSH
85819: LD_VAR 0 1
85823: PPUSH
85824: CALL_OW 264
85828: PPUSH
85829: CALL 21858 0 5
85833: ST_TO_ADDR
// if components then
85834: LD_VAR 0 9
85838: IFFALSE 85989
// begin if GetWeapon ( un ) = ar_control_tower then
85840: LD_VAR 0 1
85844: PPUSH
85845: CALL_OW 264
85849: PUSH
85850: LD_INT 31
85852: EQUAL
85853: IFFALSE 85970
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
85855: LD_VAR 0 1
85859: PPUSH
85860: CALL_OW 311
85864: PPUSH
85865: LD_INT 0
85867: PPUSH
85868: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
85872: LD_ADDR_EXP 90
85876: PUSH
85877: LD_EXP 90
85881: PPUSH
85882: LD_VAR 0 3
85886: PPUSH
85887: LD_EXP 90
85891: PUSH
85892: LD_VAR 0 3
85896: ARRAY
85897: PUSH
85898: LD_VAR 0 1
85902: PPUSH
85903: CALL_OW 311
85907: DIFF
85908: PPUSH
85909: CALL_OW 1
85913: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
85914: LD_ADDR_VAR 0 7
85918: PUSH
85919: LD_EXP 71
85923: PUSH
85924: LD_VAR 0 3
85928: ARRAY
85929: PPUSH
85930: LD_INT 1
85932: PPUSH
85933: LD_VAR 0 9
85937: PPUSH
85938: CALL_OW 2
85942: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
85943: LD_ADDR_EXP 71
85947: PUSH
85948: LD_EXP 71
85952: PPUSH
85953: LD_VAR 0 3
85957: PPUSH
85958: LD_VAR 0 7
85962: PPUSH
85963: CALL_OW 1
85967: ST_TO_ADDR
// end else
85968: GO 85987
// MC_InsertProduceList ( i , [ components ] ) ;
85970: LD_VAR 0 3
85974: PPUSH
85975: LD_VAR 0 9
85979: PUSH
85980: EMPTY
85981: LIST
85982: PPUSH
85983: CALL 81937 0 2
// break ;
85987: GO 85991
// end ; end ;
85989: GO 85776
85991: POP
85992: POP
// end ; end ; if GetType ( un ) = unit_building then
85993: LD_VAR 0 1
85997: PPUSH
85998: CALL_OW 247
86002: PUSH
86003: LD_INT 3
86005: EQUAL
86006: IFFALSE 86409
// begin btype := GetBType ( un ) ;
86008: LD_ADDR_VAR 0 5
86012: PUSH
86013: LD_VAR 0 1
86017: PPUSH
86018: CALL_OW 266
86022: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
86023: LD_VAR 0 5
86027: PUSH
86028: LD_INT 29
86030: PUSH
86031: LD_INT 30
86033: PUSH
86034: EMPTY
86035: LIST
86036: LIST
86037: IN
86038: IFFALSE 86111
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
86040: LD_VAR 0 1
86044: PPUSH
86045: CALL_OW 250
86049: PPUSH
86050: LD_VAR 0 1
86054: PPUSH
86055: CALL_OW 251
86059: PPUSH
86060: LD_VAR 0 1
86064: PPUSH
86065: CALL_OW 255
86069: PPUSH
86070: CALL_OW 440
86074: NOT
86075: IFFALSE 86111
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
86077: LD_VAR 0 1
86081: PPUSH
86082: CALL_OW 250
86086: PPUSH
86087: LD_VAR 0 1
86091: PPUSH
86092: CALL_OW 251
86096: PPUSH
86097: LD_VAR 0 1
86101: PPUSH
86102: CALL_OW 255
86106: PPUSH
86107: CALL_OW 441
// end ; if btype = b_warehouse then
86111: LD_VAR 0 5
86115: PUSH
86116: LD_INT 1
86118: EQUAL
86119: IFFALSE 86137
// begin btype := b_depot ;
86121: LD_ADDR_VAR 0 5
86125: PUSH
86126: LD_INT 0
86128: ST_TO_ADDR
// pos := 1 ;
86129: LD_ADDR_VAR 0 6
86133: PUSH
86134: LD_INT 1
86136: ST_TO_ADDR
// end ; if btype = b_factory then
86137: LD_VAR 0 5
86141: PUSH
86142: LD_INT 3
86144: EQUAL
86145: IFFALSE 86163
// begin btype := b_workshop ;
86147: LD_ADDR_VAR 0 5
86151: PUSH
86152: LD_INT 2
86154: ST_TO_ADDR
// pos := 1 ;
86155: LD_ADDR_VAR 0 6
86159: PUSH
86160: LD_INT 1
86162: ST_TO_ADDR
// end ; if btype = b_barracks then
86163: LD_VAR 0 5
86167: PUSH
86168: LD_INT 5
86170: EQUAL
86171: IFFALSE 86181
// btype := b_armoury ;
86173: LD_ADDR_VAR 0 5
86177: PUSH
86178: LD_INT 4
86180: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
86181: LD_VAR 0 5
86185: PUSH
86186: LD_INT 7
86188: PUSH
86189: LD_INT 8
86191: PUSH
86192: EMPTY
86193: LIST
86194: LIST
86195: IN
86196: IFFALSE 86206
// btype := b_lab ;
86198: LD_ADDR_VAR 0 5
86202: PUSH
86203: LD_INT 6
86205: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
86206: LD_ADDR_EXP 55
86210: PUSH
86211: LD_EXP 55
86215: PPUSH
86216: LD_VAR 0 3
86220: PUSH
86221: LD_EXP 55
86225: PUSH
86226: LD_VAR 0 3
86230: ARRAY
86231: PUSH
86232: LD_INT 1
86234: PLUS
86235: PUSH
86236: EMPTY
86237: LIST
86238: LIST
86239: PPUSH
86240: LD_VAR 0 5
86244: PUSH
86245: LD_VAR 0 1
86249: PPUSH
86250: CALL_OW 250
86254: PUSH
86255: LD_VAR 0 1
86259: PPUSH
86260: CALL_OW 251
86264: PUSH
86265: LD_VAR 0 1
86269: PPUSH
86270: CALL_OW 254
86274: PUSH
86275: EMPTY
86276: LIST
86277: LIST
86278: LIST
86279: LIST
86280: PPUSH
86281: CALL 24362 0 3
86285: ST_TO_ADDR
// if pos = 1 then
86286: LD_VAR 0 6
86290: PUSH
86291: LD_INT 1
86293: EQUAL
86294: IFFALSE 86409
// begin tmp := mc_build_list [ i ] ;
86296: LD_ADDR_VAR 0 7
86300: PUSH
86301: LD_EXP 55
86305: PUSH
86306: LD_VAR 0 3
86310: ARRAY
86311: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
86312: LD_VAR 0 7
86316: PPUSH
86317: LD_INT 2
86319: PUSH
86320: LD_INT 30
86322: PUSH
86323: LD_INT 0
86325: PUSH
86326: EMPTY
86327: LIST
86328: LIST
86329: PUSH
86330: LD_INT 30
86332: PUSH
86333: LD_INT 1
86335: PUSH
86336: EMPTY
86337: LIST
86338: LIST
86339: PUSH
86340: EMPTY
86341: LIST
86342: LIST
86343: LIST
86344: PPUSH
86345: CALL_OW 72
86349: IFFALSE 86359
// pos := 2 ;
86351: LD_ADDR_VAR 0 6
86355: PUSH
86356: LD_INT 2
86358: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
86359: LD_ADDR_VAR 0 7
86363: PUSH
86364: LD_VAR 0 7
86368: PPUSH
86369: LD_VAR 0 6
86373: PPUSH
86374: LD_VAR 0 7
86378: PPUSH
86379: CALL 24688 0 3
86383: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
86384: LD_ADDR_EXP 55
86388: PUSH
86389: LD_EXP 55
86393: PPUSH
86394: LD_VAR 0 3
86398: PPUSH
86399: LD_VAR 0 7
86403: PPUSH
86404: CALL_OW 1
86408: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
86409: LD_VAR 0 1
86413: PUSH
86414: LD_EXP 50
86418: PUSH
86419: LD_VAR 0 3
86423: ARRAY
86424: IN
86425: IFFALSE 86464
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
86427: LD_ADDR_EXP 50
86431: PUSH
86432: LD_EXP 50
86436: PPUSH
86437: LD_VAR 0 3
86441: PPUSH
86442: LD_EXP 50
86446: PUSH
86447: LD_VAR 0 3
86451: ARRAY
86452: PUSH
86453: LD_VAR 0 1
86457: DIFF
86458: PPUSH
86459: CALL_OW 1
86463: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
86464: LD_VAR 0 1
86468: PUSH
86469: LD_EXP 57
86473: PUSH
86474: LD_VAR 0 3
86478: ARRAY
86479: IN
86480: IFFALSE 86519
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
86482: LD_ADDR_EXP 57
86486: PUSH
86487: LD_EXP 57
86491: PPUSH
86492: LD_VAR 0 3
86496: PPUSH
86497: LD_EXP 57
86501: PUSH
86502: LD_VAR 0 3
86506: ARRAY
86507: PUSH
86508: LD_VAR 0 1
86512: DIFF
86513: PPUSH
86514: CALL_OW 1
86518: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
86519: LD_VAR 0 1
86523: PUSH
86524: LD_EXP 69
86528: PUSH
86529: LD_VAR 0 3
86533: ARRAY
86534: IN
86535: IFFALSE 86574
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
86537: LD_ADDR_EXP 69
86541: PUSH
86542: LD_EXP 69
86546: PPUSH
86547: LD_VAR 0 3
86551: PPUSH
86552: LD_EXP 69
86556: PUSH
86557: LD_VAR 0 3
86561: ARRAY
86562: PUSH
86563: LD_VAR 0 1
86567: DIFF
86568: PPUSH
86569: CALL_OW 1
86573: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
86574: LD_VAR 0 1
86578: PUSH
86579: LD_EXP 72
86583: PUSH
86584: LD_VAR 0 3
86588: ARRAY
86589: IN
86590: IFFALSE 86629
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
86592: LD_ADDR_EXP 72
86596: PUSH
86597: LD_EXP 72
86601: PPUSH
86602: LD_VAR 0 3
86606: PPUSH
86607: LD_EXP 72
86611: PUSH
86612: LD_VAR 0 3
86616: ARRAY
86617: PUSH
86618: LD_VAR 0 1
86622: DIFF
86623: PPUSH
86624: CALL_OW 1
86628: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
86629: LD_VAR 0 1
86633: PUSH
86634: LD_EXP 59
86638: PUSH
86639: LD_VAR 0 3
86643: ARRAY
86644: IN
86645: IFFALSE 86684
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
86647: LD_ADDR_EXP 59
86651: PUSH
86652: LD_EXP 59
86656: PPUSH
86657: LD_VAR 0 3
86661: PPUSH
86662: LD_EXP 59
86666: PUSH
86667: LD_VAR 0 3
86671: ARRAY
86672: PUSH
86673: LD_VAR 0 1
86677: DIFF
86678: PPUSH
86679: CALL_OW 1
86683: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
86684: LD_VAR 0 1
86688: PUSH
86689: LD_EXP 58
86693: PUSH
86694: LD_VAR 0 3
86698: ARRAY
86699: IN
86700: IFFALSE 86739
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
86702: LD_ADDR_EXP 58
86706: PUSH
86707: LD_EXP 58
86711: PPUSH
86712: LD_VAR 0 3
86716: PPUSH
86717: LD_EXP 58
86721: PUSH
86722: LD_VAR 0 3
86726: ARRAY
86727: PUSH
86728: LD_VAR 0 1
86732: DIFF
86733: PPUSH
86734: CALL_OW 1
86738: ST_TO_ADDR
// end ; break ;
86739: GO 86743
// end ;
86741: GO 85389
86743: POP
86744: POP
// end ;
86745: LD_VAR 0 2
86749: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
86750: LD_INT 0
86752: PPUSH
86753: PPUSH
86754: PPUSH
// if not mc_bases or not skirmish then
86755: LD_EXP 50
86759: NOT
86760: PUSH
86761: LD_EXP 48
86765: NOT
86766: OR
86767: IFFALSE 86771
// exit ;
86769: GO 86986
// for i = 1 to mc_bases do
86771: LD_ADDR_VAR 0 3
86775: PUSH
86776: DOUBLE
86777: LD_INT 1
86779: DEC
86780: ST_TO_ADDR
86781: LD_EXP 50
86785: PUSH
86786: FOR_TO
86787: IFFALSE 86984
// begin if building in mc_construct_list [ i ] then
86789: LD_VAR 0 1
86793: PUSH
86794: LD_EXP 57
86798: PUSH
86799: LD_VAR 0 3
86803: ARRAY
86804: IN
86805: IFFALSE 86982
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
86807: LD_ADDR_EXP 57
86811: PUSH
86812: LD_EXP 57
86816: PPUSH
86817: LD_VAR 0 3
86821: PPUSH
86822: LD_EXP 57
86826: PUSH
86827: LD_VAR 0 3
86831: ARRAY
86832: PUSH
86833: LD_VAR 0 1
86837: DIFF
86838: PPUSH
86839: CALL_OW 1
86843: ST_TO_ADDR
// if building in mc_lab [ i ] then
86844: LD_VAR 0 1
86848: PUSH
86849: LD_EXP 83
86853: PUSH
86854: LD_VAR 0 3
86858: ARRAY
86859: IN
86860: IFFALSE 86915
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
86862: LD_ADDR_EXP 84
86866: PUSH
86867: LD_EXP 84
86871: PPUSH
86872: LD_VAR 0 3
86876: PPUSH
86877: LD_EXP 84
86881: PUSH
86882: LD_VAR 0 3
86886: ARRAY
86887: PPUSH
86888: LD_INT 1
86890: PPUSH
86891: LD_EXP 84
86895: PUSH
86896: LD_VAR 0 3
86900: ARRAY
86901: PPUSH
86902: LD_INT 0
86904: PPUSH
86905: CALL 23780 0 4
86909: PPUSH
86910: CALL_OW 1
86914: ST_TO_ADDR
// if not building in mc_bases [ i ] then
86915: LD_VAR 0 1
86919: PUSH
86920: LD_EXP 50
86924: PUSH
86925: LD_VAR 0 3
86929: ARRAY
86930: IN
86931: NOT
86932: IFFALSE 86978
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
86934: LD_ADDR_EXP 50
86938: PUSH
86939: LD_EXP 50
86943: PPUSH
86944: LD_VAR 0 3
86948: PUSH
86949: LD_EXP 50
86953: PUSH
86954: LD_VAR 0 3
86958: ARRAY
86959: PUSH
86960: LD_INT 1
86962: PLUS
86963: PUSH
86964: EMPTY
86965: LIST
86966: LIST
86967: PPUSH
86968: LD_VAR 0 1
86972: PPUSH
86973: CALL 24362 0 3
86977: ST_TO_ADDR
// exit ;
86978: POP
86979: POP
86980: GO 86986
// end ; end ;
86982: GO 86786
86984: POP
86985: POP
// end ;
86986: LD_VAR 0 2
86990: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
86991: LD_INT 0
86993: PPUSH
86994: PPUSH
86995: PPUSH
86996: PPUSH
86997: PPUSH
86998: PPUSH
86999: PPUSH
// if not mc_bases or not skirmish then
87000: LD_EXP 50
87004: NOT
87005: PUSH
87006: LD_EXP 48
87010: NOT
87011: OR
87012: IFFALSE 87016
// exit ;
87014: GO 87677
// for i = 1 to mc_bases do
87016: LD_ADDR_VAR 0 3
87020: PUSH
87021: DOUBLE
87022: LD_INT 1
87024: DEC
87025: ST_TO_ADDR
87026: LD_EXP 50
87030: PUSH
87031: FOR_TO
87032: IFFALSE 87675
// begin if building in mc_construct_list [ i ] then
87034: LD_VAR 0 1
87038: PUSH
87039: LD_EXP 57
87043: PUSH
87044: LD_VAR 0 3
87048: ARRAY
87049: IN
87050: IFFALSE 87673
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
87052: LD_ADDR_EXP 57
87056: PUSH
87057: LD_EXP 57
87061: PPUSH
87062: LD_VAR 0 3
87066: PPUSH
87067: LD_EXP 57
87071: PUSH
87072: LD_VAR 0 3
87076: ARRAY
87077: PUSH
87078: LD_VAR 0 1
87082: DIFF
87083: PPUSH
87084: CALL_OW 1
87088: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
87089: LD_ADDR_EXP 50
87093: PUSH
87094: LD_EXP 50
87098: PPUSH
87099: LD_VAR 0 3
87103: PUSH
87104: LD_EXP 50
87108: PUSH
87109: LD_VAR 0 3
87113: ARRAY
87114: PUSH
87115: LD_INT 1
87117: PLUS
87118: PUSH
87119: EMPTY
87120: LIST
87121: LIST
87122: PPUSH
87123: LD_VAR 0 1
87127: PPUSH
87128: CALL 24362 0 3
87132: ST_TO_ADDR
// btype := GetBType ( building ) ;
87133: LD_ADDR_VAR 0 5
87137: PUSH
87138: LD_VAR 0 1
87142: PPUSH
87143: CALL_OW 266
87147: ST_TO_ADDR
// side := GetSide ( building ) ;
87148: LD_ADDR_VAR 0 8
87152: PUSH
87153: LD_VAR 0 1
87157: PPUSH
87158: CALL_OW 255
87162: ST_TO_ADDR
// if btype = b_lab then
87163: LD_VAR 0 5
87167: PUSH
87168: LD_INT 6
87170: EQUAL
87171: IFFALSE 87221
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
87173: LD_ADDR_EXP 83
87177: PUSH
87178: LD_EXP 83
87182: PPUSH
87183: LD_VAR 0 3
87187: PUSH
87188: LD_EXP 83
87192: PUSH
87193: LD_VAR 0 3
87197: ARRAY
87198: PUSH
87199: LD_INT 1
87201: PLUS
87202: PUSH
87203: EMPTY
87204: LIST
87205: LIST
87206: PPUSH
87207: LD_VAR 0 1
87211: PPUSH
87212: CALL 24362 0 3
87216: ST_TO_ADDR
// exit ;
87217: POP
87218: POP
87219: GO 87677
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
87221: LD_VAR 0 5
87225: PUSH
87226: LD_INT 0
87228: PUSH
87229: LD_INT 2
87231: PUSH
87232: LD_INT 4
87234: PUSH
87235: EMPTY
87236: LIST
87237: LIST
87238: LIST
87239: IN
87240: IFFALSE 87364
// begin if btype = b_armoury then
87242: LD_VAR 0 5
87246: PUSH
87247: LD_INT 4
87249: EQUAL
87250: IFFALSE 87260
// btype := b_barracks ;
87252: LD_ADDR_VAR 0 5
87256: PUSH
87257: LD_INT 5
87259: ST_TO_ADDR
// if btype = b_depot then
87260: LD_VAR 0 5
87264: PUSH
87265: LD_INT 0
87267: EQUAL
87268: IFFALSE 87278
// btype := b_warehouse ;
87270: LD_ADDR_VAR 0 5
87274: PUSH
87275: LD_INT 1
87277: ST_TO_ADDR
// if btype = b_workshop then
87278: LD_VAR 0 5
87282: PUSH
87283: LD_INT 2
87285: EQUAL
87286: IFFALSE 87296
// btype := b_factory ;
87288: LD_ADDR_VAR 0 5
87292: PUSH
87293: LD_INT 3
87295: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
87296: LD_VAR 0 5
87300: PPUSH
87301: LD_VAR 0 8
87305: PPUSH
87306: CALL_OW 323
87310: PUSH
87311: LD_INT 1
87313: EQUAL
87314: IFFALSE 87360
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
87316: LD_ADDR_EXP 82
87320: PUSH
87321: LD_EXP 82
87325: PPUSH
87326: LD_VAR 0 3
87330: PUSH
87331: LD_EXP 82
87335: PUSH
87336: LD_VAR 0 3
87340: ARRAY
87341: PUSH
87342: LD_INT 1
87344: PLUS
87345: PUSH
87346: EMPTY
87347: LIST
87348: LIST
87349: PPUSH
87350: LD_VAR 0 1
87354: PPUSH
87355: CALL 24362 0 3
87359: ST_TO_ADDR
// exit ;
87360: POP
87361: POP
87362: GO 87677
// end ; if btype in [ b_bunker , b_turret ] then
87364: LD_VAR 0 5
87368: PUSH
87369: LD_INT 32
87371: PUSH
87372: LD_INT 33
87374: PUSH
87375: EMPTY
87376: LIST
87377: LIST
87378: IN
87379: IFFALSE 87669
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
87381: LD_ADDR_EXP 58
87385: PUSH
87386: LD_EXP 58
87390: PPUSH
87391: LD_VAR 0 3
87395: PUSH
87396: LD_EXP 58
87400: PUSH
87401: LD_VAR 0 3
87405: ARRAY
87406: PUSH
87407: LD_INT 1
87409: PLUS
87410: PUSH
87411: EMPTY
87412: LIST
87413: LIST
87414: PPUSH
87415: LD_VAR 0 1
87419: PPUSH
87420: CALL 24362 0 3
87424: ST_TO_ADDR
// if btype = b_bunker then
87425: LD_VAR 0 5
87429: PUSH
87430: LD_INT 32
87432: EQUAL
87433: IFFALSE 87669
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
87435: LD_ADDR_EXP 59
87439: PUSH
87440: LD_EXP 59
87444: PPUSH
87445: LD_VAR 0 3
87449: PUSH
87450: LD_EXP 59
87454: PUSH
87455: LD_VAR 0 3
87459: ARRAY
87460: PUSH
87461: LD_INT 1
87463: PLUS
87464: PUSH
87465: EMPTY
87466: LIST
87467: LIST
87468: PPUSH
87469: LD_VAR 0 1
87473: PPUSH
87474: CALL 24362 0 3
87478: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
87479: LD_ADDR_VAR 0 6
87483: PUSH
87484: LD_EXP 50
87488: PUSH
87489: LD_VAR 0 3
87493: ARRAY
87494: PPUSH
87495: LD_INT 25
87497: PUSH
87498: LD_INT 1
87500: PUSH
87501: EMPTY
87502: LIST
87503: LIST
87504: PUSH
87505: LD_INT 3
87507: PUSH
87508: LD_INT 54
87510: PUSH
87511: EMPTY
87512: LIST
87513: PUSH
87514: EMPTY
87515: LIST
87516: LIST
87517: PUSH
87518: EMPTY
87519: LIST
87520: LIST
87521: PPUSH
87522: CALL_OW 72
87526: ST_TO_ADDR
// if tmp then
87527: LD_VAR 0 6
87531: IFFALSE 87537
// exit ;
87533: POP
87534: POP
87535: GO 87677
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
87537: LD_ADDR_VAR 0 6
87541: PUSH
87542: LD_EXP 50
87546: PUSH
87547: LD_VAR 0 3
87551: ARRAY
87552: PPUSH
87553: LD_INT 2
87555: PUSH
87556: LD_INT 30
87558: PUSH
87559: LD_INT 4
87561: PUSH
87562: EMPTY
87563: LIST
87564: LIST
87565: PUSH
87566: LD_INT 30
87568: PUSH
87569: LD_INT 5
87571: PUSH
87572: EMPTY
87573: LIST
87574: LIST
87575: PUSH
87576: EMPTY
87577: LIST
87578: LIST
87579: LIST
87580: PPUSH
87581: CALL_OW 72
87585: ST_TO_ADDR
// if not tmp then
87586: LD_VAR 0 6
87590: NOT
87591: IFFALSE 87597
// exit ;
87593: POP
87594: POP
87595: GO 87677
// for j in tmp do
87597: LD_ADDR_VAR 0 4
87601: PUSH
87602: LD_VAR 0 6
87606: PUSH
87607: FOR_IN
87608: IFFALSE 87667
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
87610: LD_ADDR_VAR 0 7
87614: PUSH
87615: LD_VAR 0 4
87619: PPUSH
87620: CALL_OW 313
87624: PPUSH
87625: LD_INT 25
87627: PUSH
87628: LD_INT 1
87630: PUSH
87631: EMPTY
87632: LIST
87633: LIST
87634: PPUSH
87635: CALL_OW 72
87639: ST_TO_ADDR
// if units then
87640: LD_VAR 0 7
87644: IFFALSE 87665
// begin ComExitBuilding ( units [ 1 ] ) ;
87646: LD_VAR 0 7
87650: PUSH
87651: LD_INT 1
87653: ARRAY
87654: PPUSH
87655: CALL_OW 122
// exit ;
87659: POP
87660: POP
87661: POP
87662: POP
87663: GO 87677
// end ; end ;
87665: GO 87607
87667: POP
87668: POP
// end ; end ; exit ;
87669: POP
87670: POP
87671: GO 87677
// end ; end ;
87673: GO 87031
87675: POP
87676: POP
// end ;
87677: LD_VAR 0 2
87681: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
87682: LD_INT 0
87684: PPUSH
87685: PPUSH
87686: PPUSH
87687: PPUSH
87688: PPUSH
87689: PPUSH
87690: PPUSH
// if not mc_bases or not skirmish then
87691: LD_EXP 50
87695: NOT
87696: PUSH
87697: LD_EXP 48
87701: NOT
87702: OR
87703: IFFALSE 87707
// exit ;
87705: GO 87972
// btype := GetBType ( building ) ;
87707: LD_ADDR_VAR 0 6
87711: PUSH
87712: LD_VAR 0 1
87716: PPUSH
87717: CALL_OW 266
87721: ST_TO_ADDR
// x := GetX ( building ) ;
87722: LD_ADDR_VAR 0 7
87726: PUSH
87727: LD_VAR 0 1
87731: PPUSH
87732: CALL_OW 250
87736: ST_TO_ADDR
// y := GetY ( building ) ;
87737: LD_ADDR_VAR 0 8
87741: PUSH
87742: LD_VAR 0 1
87746: PPUSH
87747: CALL_OW 251
87751: ST_TO_ADDR
// d := GetDir ( building ) ;
87752: LD_ADDR_VAR 0 9
87756: PUSH
87757: LD_VAR 0 1
87761: PPUSH
87762: CALL_OW 254
87766: ST_TO_ADDR
// for i = 1 to mc_bases do
87767: LD_ADDR_VAR 0 4
87771: PUSH
87772: DOUBLE
87773: LD_INT 1
87775: DEC
87776: ST_TO_ADDR
87777: LD_EXP 50
87781: PUSH
87782: FOR_TO
87783: IFFALSE 87970
// begin if not mc_build_list [ i ] then
87785: LD_EXP 55
87789: PUSH
87790: LD_VAR 0 4
87794: ARRAY
87795: NOT
87796: IFFALSE 87800
// continue ;
87798: GO 87782
// for j := 1 to mc_build_list [ i ] do
87800: LD_ADDR_VAR 0 5
87804: PUSH
87805: DOUBLE
87806: LD_INT 1
87808: DEC
87809: ST_TO_ADDR
87810: LD_EXP 55
87814: PUSH
87815: LD_VAR 0 4
87819: ARRAY
87820: PUSH
87821: FOR_TO
87822: IFFALSE 87966
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ j ] ) then
87824: LD_VAR 0 6
87828: PUSH
87829: LD_VAR 0 7
87833: PUSH
87834: LD_VAR 0 8
87838: PUSH
87839: LD_VAR 0 9
87843: PUSH
87844: EMPTY
87845: LIST
87846: LIST
87847: LIST
87848: LIST
87849: PPUSH
87850: LD_EXP 55
87854: PUSH
87855: LD_VAR 0 4
87859: ARRAY
87860: PUSH
87861: LD_VAR 0 5
87865: ARRAY
87866: PPUSH
87867: CALL 30545 0 2
87871: IFFALSE 87964
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , j ) ) ;
87873: LD_ADDR_EXP 55
87877: PUSH
87878: LD_EXP 55
87882: PPUSH
87883: LD_VAR 0 4
87887: PPUSH
87888: LD_EXP 55
87892: PUSH
87893: LD_VAR 0 4
87897: ARRAY
87898: PPUSH
87899: LD_VAR 0 5
87903: PPUSH
87904: CALL_OW 3
87908: PPUSH
87909: CALL_OW 1
87913: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
87914: LD_ADDR_EXP 57
87918: PUSH
87919: LD_EXP 57
87923: PPUSH
87924: LD_VAR 0 4
87928: PUSH
87929: LD_EXP 57
87933: PUSH
87934: LD_VAR 0 4
87938: ARRAY
87939: PUSH
87940: LD_INT 1
87942: PLUS
87943: PUSH
87944: EMPTY
87945: LIST
87946: LIST
87947: PPUSH
87948: LD_VAR 0 1
87952: PPUSH
87953: CALL 24362 0 3
87957: ST_TO_ADDR
// exit ;
87958: POP
87959: POP
87960: POP
87961: POP
87962: GO 87972
// end ;
87964: GO 87821
87966: POP
87967: POP
// end ;
87968: GO 87782
87970: POP
87971: POP
// end ;
87972: LD_VAR 0 3
87976: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
87977: LD_INT 0
87979: PPUSH
87980: PPUSH
87981: PPUSH
// if not mc_bases or not skirmish then
87982: LD_EXP 50
87986: NOT
87987: PUSH
87988: LD_EXP 48
87992: NOT
87993: OR
87994: IFFALSE 87998
// exit ;
87996: GO 88188
// for i = 1 to mc_bases do
87998: LD_ADDR_VAR 0 4
88002: PUSH
88003: DOUBLE
88004: LD_INT 1
88006: DEC
88007: ST_TO_ADDR
88008: LD_EXP 50
88012: PUSH
88013: FOR_TO
88014: IFFALSE 88101
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
88016: LD_VAR 0 1
88020: PUSH
88021: LD_EXP 58
88025: PUSH
88026: LD_VAR 0 4
88030: ARRAY
88031: IN
88032: PUSH
88033: LD_VAR 0 1
88037: PUSH
88038: LD_EXP 59
88042: PUSH
88043: LD_VAR 0 4
88047: ARRAY
88048: IN
88049: NOT
88050: AND
88051: IFFALSE 88099
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
88053: LD_ADDR_EXP 59
88057: PUSH
88058: LD_EXP 59
88062: PPUSH
88063: LD_VAR 0 4
88067: PUSH
88068: LD_EXP 59
88072: PUSH
88073: LD_VAR 0 4
88077: ARRAY
88078: PUSH
88079: LD_INT 1
88081: PLUS
88082: PUSH
88083: EMPTY
88084: LIST
88085: LIST
88086: PPUSH
88087: LD_VAR 0 1
88091: PPUSH
88092: CALL 24362 0 3
88096: ST_TO_ADDR
// break ;
88097: GO 88101
// end ; end ;
88099: GO 88013
88101: POP
88102: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
88103: LD_VAR 0 1
88107: PPUSH
88108: CALL_OW 257
88112: PUSH
88113: LD_EXP 76
88117: IN
88118: PUSH
88119: LD_VAR 0 1
88123: PPUSH
88124: CALL_OW 266
88128: PUSH
88129: LD_INT 5
88131: EQUAL
88132: AND
88133: PUSH
88134: LD_VAR 0 2
88138: PPUSH
88139: CALL_OW 110
88143: PUSH
88144: LD_INT 18
88146: NONEQUAL
88147: AND
88148: IFFALSE 88188
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
88150: LD_VAR 0 2
88154: PPUSH
88155: CALL_OW 257
88159: PUSH
88160: LD_INT 5
88162: PUSH
88163: LD_INT 8
88165: PUSH
88166: LD_INT 9
88168: PUSH
88169: EMPTY
88170: LIST
88171: LIST
88172: LIST
88173: IN
88174: IFFALSE 88188
// SetClass ( unit , 1 ) ;
88176: LD_VAR 0 2
88180: PPUSH
88181: LD_INT 1
88183: PPUSH
88184: CALL_OW 336
// end ;
88188: LD_VAR 0 3
88192: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
88193: LD_INT 0
88195: PPUSH
88196: PPUSH
// if not mc_bases or not skirmish then
88197: LD_EXP 50
88201: NOT
88202: PUSH
88203: LD_EXP 48
88207: NOT
88208: OR
88209: IFFALSE 88213
// exit ;
88211: GO 88329
// if GetLives ( abandoned_vehicle ) > 250 then
88213: LD_VAR 0 2
88217: PPUSH
88218: CALL_OW 256
88222: PUSH
88223: LD_INT 250
88225: GREATER
88226: IFFALSE 88230
// exit ;
88228: GO 88329
// for i = 1 to mc_bases do
88230: LD_ADDR_VAR 0 6
88234: PUSH
88235: DOUBLE
88236: LD_INT 1
88238: DEC
88239: ST_TO_ADDR
88240: LD_EXP 50
88244: PUSH
88245: FOR_TO
88246: IFFALSE 88327
// begin if driver in mc_bases [ i ] then
88248: LD_VAR 0 1
88252: PUSH
88253: LD_EXP 50
88257: PUSH
88258: LD_VAR 0 6
88262: ARRAY
88263: IN
88264: IFFALSE 88325
// begin ComMoveToNearbyEntrance ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
88266: LD_VAR 0 1
88270: PPUSH
88271: LD_EXP 50
88275: PUSH
88276: LD_VAR 0 6
88280: ARRAY
88281: PPUSH
88282: LD_INT 2
88284: PUSH
88285: LD_INT 30
88287: PUSH
88288: LD_INT 0
88290: PUSH
88291: EMPTY
88292: LIST
88293: LIST
88294: PUSH
88295: LD_INT 30
88297: PUSH
88298: LD_INT 1
88300: PUSH
88301: EMPTY
88302: LIST
88303: LIST
88304: PUSH
88305: EMPTY
88306: LIST
88307: LIST
88308: LIST
88309: PPUSH
88310: CALL_OW 72
88314: PUSH
88315: LD_INT 1
88317: ARRAY
88318: PPUSH
88319: CALL 56981 0 2
// break ;
88323: GO 88327
// end ; end ;
88325: GO 88245
88327: POP
88328: POP
// end ; end_of_file end_of_file
88329: LD_VAR 0 5
88333: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
88334: LD_INT 0
88336: PPUSH
// if p2 = 100 then
88337: LD_VAR 0 2
88341: PUSH
88342: LD_INT 100
88344: EQUAL
88345: IFFALSE 89294
// begin if not StreamModeActive then
88347: LD_EXP 94
88351: NOT
88352: IFFALSE 88362
// StreamModeActive := true ;
88354: LD_ADDR_EXP 94
88358: PUSH
88359: LD_INT 1
88361: ST_TO_ADDR
// if p3 = 0 then
88362: LD_VAR 0 3
88366: PUSH
88367: LD_INT 0
88369: EQUAL
88370: IFFALSE 88376
// InitStreamMode ;
88372: CALL 89454 0 0
// if p3 = 1 then
88376: LD_VAR 0 3
88380: PUSH
88381: LD_INT 1
88383: EQUAL
88384: IFFALSE 88394
// sRocket := true ;
88386: LD_ADDR_EXP 99
88390: PUSH
88391: LD_INT 1
88393: ST_TO_ADDR
// if p3 = 2 then
88394: LD_VAR 0 3
88398: PUSH
88399: LD_INT 2
88401: EQUAL
88402: IFFALSE 88412
// sSpeed := true ;
88404: LD_ADDR_EXP 98
88408: PUSH
88409: LD_INT 1
88411: ST_TO_ADDR
// if p3 = 3 then
88412: LD_VAR 0 3
88416: PUSH
88417: LD_INT 3
88419: EQUAL
88420: IFFALSE 88430
// sEngine := true ;
88422: LD_ADDR_EXP 100
88426: PUSH
88427: LD_INT 1
88429: ST_TO_ADDR
// if p3 = 4 then
88430: LD_VAR 0 3
88434: PUSH
88435: LD_INT 4
88437: EQUAL
88438: IFFALSE 88448
// sSpec := true ;
88440: LD_ADDR_EXP 97
88444: PUSH
88445: LD_INT 1
88447: ST_TO_ADDR
// if p3 = 5 then
88448: LD_VAR 0 3
88452: PUSH
88453: LD_INT 5
88455: EQUAL
88456: IFFALSE 88466
// sLevel := true ;
88458: LD_ADDR_EXP 101
88462: PUSH
88463: LD_INT 1
88465: ST_TO_ADDR
// if p3 = 6 then
88466: LD_VAR 0 3
88470: PUSH
88471: LD_INT 6
88473: EQUAL
88474: IFFALSE 88484
// sArmoury := true ;
88476: LD_ADDR_EXP 102
88480: PUSH
88481: LD_INT 1
88483: ST_TO_ADDR
// if p3 = 7 then
88484: LD_VAR 0 3
88488: PUSH
88489: LD_INT 7
88491: EQUAL
88492: IFFALSE 88502
// sRadar := true ;
88494: LD_ADDR_EXP 103
88498: PUSH
88499: LD_INT 1
88501: ST_TO_ADDR
// if p3 = 8 then
88502: LD_VAR 0 3
88506: PUSH
88507: LD_INT 8
88509: EQUAL
88510: IFFALSE 88520
// sBunker := true ;
88512: LD_ADDR_EXP 104
88516: PUSH
88517: LD_INT 1
88519: ST_TO_ADDR
// if p3 = 9 then
88520: LD_VAR 0 3
88524: PUSH
88525: LD_INT 9
88527: EQUAL
88528: IFFALSE 88538
// sHack := true ;
88530: LD_ADDR_EXP 105
88534: PUSH
88535: LD_INT 1
88537: ST_TO_ADDR
// if p3 = 10 then
88538: LD_VAR 0 3
88542: PUSH
88543: LD_INT 10
88545: EQUAL
88546: IFFALSE 88556
// sFire := true ;
88548: LD_ADDR_EXP 106
88552: PUSH
88553: LD_INT 1
88555: ST_TO_ADDR
// if p3 = 11 then
88556: LD_VAR 0 3
88560: PUSH
88561: LD_INT 11
88563: EQUAL
88564: IFFALSE 88574
// sRefresh := true ;
88566: LD_ADDR_EXP 107
88570: PUSH
88571: LD_INT 1
88573: ST_TO_ADDR
// if p3 = 12 then
88574: LD_VAR 0 3
88578: PUSH
88579: LD_INT 12
88581: EQUAL
88582: IFFALSE 88592
// sExp := true ;
88584: LD_ADDR_EXP 108
88588: PUSH
88589: LD_INT 1
88591: ST_TO_ADDR
// if p3 = 13 then
88592: LD_VAR 0 3
88596: PUSH
88597: LD_INT 13
88599: EQUAL
88600: IFFALSE 88610
// sDepot := true ;
88602: LD_ADDR_EXP 109
88606: PUSH
88607: LD_INT 1
88609: ST_TO_ADDR
// if p3 = 14 then
88610: LD_VAR 0 3
88614: PUSH
88615: LD_INT 14
88617: EQUAL
88618: IFFALSE 88628
// sFlag := true ;
88620: LD_ADDR_EXP 110
88624: PUSH
88625: LD_INT 1
88627: ST_TO_ADDR
// if p3 = 15 then
88628: LD_VAR 0 3
88632: PUSH
88633: LD_INT 15
88635: EQUAL
88636: IFFALSE 88646
// sKamikadze := true ;
88638: LD_ADDR_EXP 118
88642: PUSH
88643: LD_INT 1
88645: ST_TO_ADDR
// if p3 = 16 then
88646: LD_VAR 0 3
88650: PUSH
88651: LD_INT 16
88653: EQUAL
88654: IFFALSE 88664
// sTroll := true ;
88656: LD_ADDR_EXP 119
88660: PUSH
88661: LD_INT 1
88663: ST_TO_ADDR
// if p3 = 17 then
88664: LD_VAR 0 3
88668: PUSH
88669: LD_INT 17
88671: EQUAL
88672: IFFALSE 88682
// sSlow := true ;
88674: LD_ADDR_EXP 120
88678: PUSH
88679: LD_INT 1
88681: ST_TO_ADDR
// if p3 = 18 then
88682: LD_VAR 0 3
88686: PUSH
88687: LD_INT 18
88689: EQUAL
88690: IFFALSE 88700
// sLack := true ;
88692: LD_ADDR_EXP 121
88696: PUSH
88697: LD_INT 1
88699: ST_TO_ADDR
// if p3 = 19 then
88700: LD_VAR 0 3
88704: PUSH
88705: LD_INT 19
88707: EQUAL
88708: IFFALSE 88718
// sTank := true ;
88710: LD_ADDR_EXP 123
88714: PUSH
88715: LD_INT 1
88717: ST_TO_ADDR
// if p3 = 20 then
88718: LD_VAR 0 3
88722: PUSH
88723: LD_INT 20
88725: EQUAL
88726: IFFALSE 88736
// sRemote := true ;
88728: LD_ADDR_EXP 124
88732: PUSH
88733: LD_INT 1
88735: ST_TO_ADDR
// if p3 = 21 then
88736: LD_VAR 0 3
88740: PUSH
88741: LD_INT 21
88743: EQUAL
88744: IFFALSE 88754
// sPowell := true ;
88746: LD_ADDR_EXP 125
88750: PUSH
88751: LD_INT 1
88753: ST_TO_ADDR
// if p3 = 22 then
88754: LD_VAR 0 3
88758: PUSH
88759: LD_INT 22
88761: EQUAL
88762: IFFALSE 88772
// sTeleport := true ;
88764: LD_ADDR_EXP 128
88768: PUSH
88769: LD_INT 1
88771: ST_TO_ADDR
// if p3 = 23 then
88772: LD_VAR 0 3
88776: PUSH
88777: LD_INT 23
88779: EQUAL
88780: IFFALSE 88790
// sOilTower := true ;
88782: LD_ADDR_EXP 130
88786: PUSH
88787: LD_INT 1
88789: ST_TO_ADDR
// if p3 = 24 then
88790: LD_VAR 0 3
88794: PUSH
88795: LD_INT 24
88797: EQUAL
88798: IFFALSE 88808
// sShovel := true ;
88800: LD_ADDR_EXP 131
88804: PUSH
88805: LD_INT 1
88807: ST_TO_ADDR
// if p3 = 25 then
88808: LD_VAR 0 3
88812: PUSH
88813: LD_INT 25
88815: EQUAL
88816: IFFALSE 88826
// sSheik := true ;
88818: LD_ADDR_EXP 132
88822: PUSH
88823: LD_INT 1
88825: ST_TO_ADDR
// if p3 = 26 then
88826: LD_VAR 0 3
88830: PUSH
88831: LD_INT 26
88833: EQUAL
88834: IFFALSE 88844
// sEarthquake := true ;
88836: LD_ADDR_EXP 134
88840: PUSH
88841: LD_INT 1
88843: ST_TO_ADDR
// if p3 = 27 then
88844: LD_VAR 0 3
88848: PUSH
88849: LD_INT 27
88851: EQUAL
88852: IFFALSE 88862
// sAI := true ;
88854: LD_ADDR_EXP 135
88858: PUSH
88859: LD_INT 1
88861: ST_TO_ADDR
// if p3 = 28 then
88862: LD_VAR 0 3
88866: PUSH
88867: LD_INT 28
88869: EQUAL
88870: IFFALSE 88880
// sCargo := true ;
88872: LD_ADDR_EXP 138
88876: PUSH
88877: LD_INT 1
88879: ST_TO_ADDR
// if p3 = 29 then
88880: LD_VAR 0 3
88884: PUSH
88885: LD_INT 29
88887: EQUAL
88888: IFFALSE 88898
// sDLaser := true ;
88890: LD_ADDR_EXP 139
88894: PUSH
88895: LD_INT 1
88897: ST_TO_ADDR
// if p3 = 30 then
88898: LD_VAR 0 3
88902: PUSH
88903: LD_INT 30
88905: EQUAL
88906: IFFALSE 88916
// sExchange := true ;
88908: LD_ADDR_EXP 140
88912: PUSH
88913: LD_INT 1
88915: ST_TO_ADDR
// if p3 = 31 then
88916: LD_VAR 0 3
88920: PUSH
88921: LD_INT 31
88923: EQUAL
88924: IFFALSE 88934
// sFac := true ;
88926: LD_ADDR_EXP 141
88930: PUSH
88931: LD_INT 1
88933: ST_TO_ADDR
// if p3 = 32 then
88934: LD_VAR 0 3
88938: PUSH
88939: LD_INT 32
88941: EQUAL
88942: IFFALSE 88952
// sPower := true ;
88944: LD_ADDR_EXP 142
88948: PUSH
88949: LD_INT 1
88951: ST_TO_ADDR
// if p3 = 33 then
88952: LD_VAR 0 3
88956: PUSH
88957: LD_INT 33
88959: EQUAL
88960: IFFALSE 88970
// sRandom := true ;
88962: LD_ADDR_EXP 143
88966: PUSH
88967: LD_INT 1
88969: ST_TO_ADDR
// if p3 = 34 then
88970: LD_VAR 0 3
88974: PUSH
88975: LD_INT 34
88977: EQUAL
88978: IFFALSE 88988
// sShield := true ;
88980: LD_ADDR_EXP 144
88984: PUSH
88985: LD_INT 1
88987: ST_TO_ADDR
// if p3 = 35 then
88988: LD_VAR 0 3
88992: PUSH
88993: LD_INT 35
88995: EQUAL
88996: IFFALSE 89006
// sTime := true ;
88998: LD_ADDR_EXP 145
89002: PUSH
89003: LD_INT 1
89005: ST_TO_ADDR
// if p3 = 36 then
89006: LD_VAR 0 3
89010: PUSH
89011: LD_INT 36
89013: EQUAL
89014: IFFALSE 89024
// sTools := true ;
89016: LD_ADDR_EXP 146
89020: PUSH
89021: LD_INT 1
89023: ST_TO_ADDR
// if p3 = 101 then
89024: LD_VAR 0 3
89028: PUSH
89029: LD_INT 101
89031: EQUAL
89032: IFFALSE 89042
// sSold := true ;
89034: LD_ADDR_EXP 111
89038: PUSH
89039: LD_INT 1
89041: ST_TO_ADDR
// if p3 = 102 then
89042: LD_VAR 0 3
89046: PUSH
89047: LD_INT 102
89049: EQUAL
89050: IFFALSE 89060
// sDiff := true ;
89052: LD_ADDR_EXP 112
89056: PUSH
89057: LD_INT 1
89059: ST_TO_ADDR
// if p3 = 103 then
89060: LD_VAR 0 3
89064: PUSH
89065: LD_INT 103
89067: EQUAL
89068: IFFALSE 89078
// sFog := true ;
89070: LD_ADDR_EXP 115
89074: PUSH
89075: LD_INT 1
89077: ST_TO_ADDR
// if p3 = 104 then
89078: LD_VAR 0 3
89082: PUSH
89083: LD_INT 104
89085: EQUAL
89086: IFFALSE 89096
// sReset := true ;
89088: LD_ADDR_EXP 116
89092: PUSH
89093: LD_INT 1
89095: ST_TO_ADDR
// if p3 = 105 then
89096: LD_VAR 0 3
89100: PUSH
89101: LD_INT 105
89103: EQUAL
89104: IFFALSE 89114
// sSun := true ;
89106: LD_ADDR_EXP 117
89110: PUSH
89111: LD_INT 1
89113: ST_TO_ADDR
// if p3 = 106 then
89114: LD_VAR 0 3
89118: PUSH
89119: LD_INT 106
89121: EQUAL
89122: IFFALSE 89132
// sTiger := true ;
89124: LD_ADDR_EXP 113
89128: PUSH
89129: LD_INT 1
89131: ST_TO_ADDR
// if p3 = 107 then
89132: LD_VAR 0 3
89136: PUSH
89137: LD_INT 107
89139: EQUAL
89140: IFFALSE 89150
// sBomb := true ;
89142: LD_ADDR_EXP 114
89146: PUSH
89147: LD_INT 1
89149: ST_TO_ADDR
// if p3 = 108 then
89150: LD_VAR 0 3
89154: PUSH
89155: LD_INT 108
89157: EQUAL
89158: IFFALSE 89168
// sWound := true ;
89160: LD_ADDR_EXP 122
89164: PUSH
89165: LD_INT 1
89167: ST_TO_ADDR
// if p3 = 109 then
89168: LD_VAR 0 3
89172: PUSH
89173: LD_INT 109
89175: EQUAL
89176: IFFALSE 89186
// sBetray := true ;
89178: LD_ADDR_EXP 126
89182: PUSH
89183: LD_INT 1
89185: ST_TO_ADDR
// if p3 = 110 then
89186: LD_VAR 0 3
89190: PUSH
89191: LD_INT 110
89193: EQUAL
89194: IFFALSE 89204
// sContamin := true ;
89196: LD_ADDR_EXP 127
89200: PUSH
89201: LD_INT 1
89203: ST_TO_ADDR
// if p3 = 111 then
89204: LD_VAR 0 3
89208: PUSH
89209: LD_INT 111
89211: EQUAL
89212: IFFALSE 89222
// sOil := true ;
89214: LD_ADDR_EXP 129
89218: PUSH
89219: LD_INT 1
89221: ST_TO_ADDR
// if p3 = 112 then
89222: LD_VAR 0 3
89226: PUSH
89227: LD_INT 112
89229: EQUAL
89230: IFFALSE 89240
// sStu := true ;
89232: LD_ADDR_EXP 133
89236: PUSH
89237: LD_INT 1
89239: ST_TO_ADDR
// if p3 = 113 then
89240: LD_VAR 0 3
89244: PUSH
89245: LD_INT 113
89247: EQUAL
89248: IFFALSE 89258
// sBazooka := true ;
89250: LD_ADDR_EXP 136
89254: PUSH
89255: LD_INT 1
89257: ST_TO_ADDR
// if p3 = 114 then
89258: LD_VAR 0 3
89262: PUSH
89263: LD_INT 114
89265: EQUAL
89266: IFFALSE 89276
// sMortar := true ;
89268: LD_ADDR_EXP 137
89272: PUSH
89273: LD_INT 1
89275: ST_TO_ADDR
// if p3 = 115 then
89276: LD_VAR 0 3
89280: PUSH
89281: LD_INT 115
89283: EQUAL
89284: IFFALSE 89294
// sRanger := true ;
89286: LD_ADDR_EXP 147
89290: PUSH
89291: LD_INT 1
89293: ST_TO_ADDR
// end ; if p2 = 101 then
89294: LD_VAR 0 2
89298: PUSH
89299: LD_INT 101
89301: EQUAL
89302: IFFALSE 89430
// begin case p3 of 1 :
89304: LD_VAR 0 3
89308: PUSH
89309: LD_INT 1
89311: DOUBLE
89312: EQUAL
89313: IFTRUE 89317
89315: GO 89324
89317: POP
// hHackUnlimitedResources ; 2 :
89318: CALL 100467 0 0
89322: GO 89430
89324: LD_INT 2
89326: DOUBLE
89327: EQUAL
89328: IFTRUE 89332
89330: GO 89339
89332: POP
// hHackSetLevel10 ; 3 :
89333: CALL 100600 0 0
89337: GO 89430
89339: LD_INT 3
89341: DOUBLE
89342: EQUAL
89343: IFTRUE 89347
89345: GO 89354
89347: POP
// hHackSetLevel10YourUnits ; 4 :
89348: CALL 100685 0 0
89352: GO 89430
89354: LD_INT 4
89356: DOUBLE
89357: EQUAL
89358: IFTRUE 89362
89360: GO 89369
89362: POP
// hHackInvincible ; 5 :
89363: CALL 101133 0 0
89367: GO 89430
89369: LD_INT 5
89371: DOUBLE
89372: EQUAL
89373: IFTRUE 89377
89375: GO 89384
89377: POP
// hHackInvisible ; 6 :
89378: CALL 101244 0 0
89382: GO 89430
89384: LD_INT 6
89386: DOUBLE
89387: EQUAL
89388: IFTRUE 89392
89390: GO 89399
89392: POP
// hHackChangeYourSide ; 7 :
89393: CALL 101301 0 0
89397: GO 89430
89399: LD_INT 7
89401: DOUBLE
89402: EQUAL
89403: IFTRUE 89407
89405: GO 89414
89407: POP
// hHackChangeUnitSide ; 8 :
89408: CALL 101343 0 0
89412: GO 89430
89414: LD_INT 8
89416: DOUBLE
89417: EQUAL
89418: IFTRUE 89422
89420: GO 89429
89422: POP
// hHackFog ; end ;
89423: CALL 101444 0 0
89427: GO 89430
89429: POP
// end ; end ;
89430: LD_VAR 0 7
89434: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
89435: GO 89437
89437: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
89438: LD_STRING initStreamRollete();
89440: PPUSH
89441: CALL_OW 559
// InitStreamMode ;
89445: CALL 89454 0 0
// DefineStreamItems ( ) ;
89449: CALL 89894 0 0
// end ;
89453: END
// function InitStreamMode ; begin
89454: LD_INT 0
89456: PPUSH
// streamModeActive := false ;
89457: LD_ADDR_EXP 94
89461: PUSH
89462: LD_INT 0
89464: ST_TO_ADDR
// normalCounter := 36 ;
89465: LD_ADDR_EXP 95
89469: PUSH
89470: LD_INT 36
89472: ST_TO_ADDR
// hardcoreCounter := 16 ;
89473: LD_ADDR_EXP 96
89477: PUSH
89478: LD_INT 16
89480: ST_TO_ADDR
// sRocket := false ;
89481: LD_ADDR_EXP 99
89485: PUSH
89486: LD_INT 0
89488: ST_TO_ADDR
// sSpeed := false ;
89489: LD_ADDR_EXP 98
89493: PUSH
89494: LD_INT 0
89496: ST_TO_ADDR
// sEngine := false ;
89497: LD_ADDR_EXP 100
89501: PUSH
89502: LD_INT 0
89504: ST_TO_ADDR
// sSpec := false ;
89505: LD_ADDR_EXP 97
89509: PUSH
89510: LD_INT 0
89512: ST_TO_ADDR
// sLevel := false ;
89513: LD_ADDR_EXP 101
89517: PUSH
89518: LD_INT 0
89520: ST_TO_ADDR
// sArmoury := false ;
89521: LD_ADDR_EXP 102
89525: PUSH
89526: LD_INT 0
89528: ST_TO_ADDR
// sRadar := false ;
89529: LD_ADDR_EXP 103
89533: PUSH
89534: LD_INT 0
89536: ST_TO_ADDR
// sBunker := false ;
89537: LD_ADDR_EXP 104
89541: PUSH
89542: LD_INT 0
89544: ST_TO_ADDR
// sHack := false ;
89545: LD_ADDR_EXP 105
89549: PUSH
89550: LD_INT 0
89552: ST_TO_ADDR
// sFire := false ;
89553: LD_ADDR_EXP 106
89557: PUSH
89558: LD_INT 0
89560: ST_TO_ADDR
// sRefresh := false ;
89561: LD_ADDR_EXP 107
89565: PUSH
89566: LD_INT 0
89568: ST_TO_ADDR
// sExp := false ;
89569: LD_ADDR_EXP 108
89573: PUSH
89574: LD_INT 0
89576: ST_TO_ADDR
// sDepot := false ;
89577: LD_ADDR_EXP 109
89581: PUSH
89582: LD_INT 0
89584: ST_TO_ADDR
// sFlag := false ;
89585: LD_ADDR_EXP 110
89589: PUSH
89590: LD_INT 0
89592: ST_TO_ADDR
// sKamikadze := false ;
89593: LD_ADDR_EXP 118
89597: PUSH
89598: LD_INT 0
89600: ST_TO_ADDR
// sTroll := false ;
89601: LD_ADDR_EXP 119
89605: PUSH
89606: LD_INT 0
89608: ST_TO_ADDR
// sSlow := false ;
89609: LD_ADDR_EXP 120
89613: PUSH
89614: LD_INT 0
89616: ST_TO_ADDR
// sLack := false ;
89617: LD_ADDR_EXP 121
89621: PUSH
89622: LD_INT 0
89624: ST_TO_ADDR
// sTank := false ;
89625: LD_ADDR_EXP 123
89629: PUSH
89630: LD_INT 0
89632: ST_TO_ADDR
// sRemote := false ;
89633: LD_ADDR_EXP 124
89637: PUSH
89638: LD_INT 0
89640: ST_TO_ADDR
// sPowell := false ;
89641: LD_ADDR_EXP 125
89645: PUSH
89646: LD_INT 0
89648: ST_TO_ADDR
// sTeleport := false ;
89649: LD_ADDR_EXP 128
89653: PUSH
89654: LD_INT 0
89656: ST_TO_ADDR
// sOilTower := false ;
89657: LD_ADDR_EXP 130
89661: PUSH
89662: LD_INT 0
89664: ST_TO_ADDR
// sShovel := false ;
89665: LD_ADDR_EXP 131
89669: PUSH
89670: LD_INT 0
89672: ST_TO_ADDR
// sSheik := false ;
89673: LD_ADDR_EXP 132
89677: PUSH
89678: LD_INT 0
89680: ST_TO_ADDR
// sEarthquake := false ;
89681: LD_ADDR_EXP 134
89685: PUSH
89686: LD_INT 0
89688: ST_TO_ADDR
// sAI := false ;
89689: LD_ADDR_EXP 135
89693: PUSH
89694: LD_INT 0
89696: ST_TO_ADDR
// sCargo := false ;
89697: LD_ADDR_EXP 138
89701: PUSH
89702: LD_INT 0
89704: ST_TO_ADDR
// sDLaser := false ;
89705: LD_ADDR_EXP 139
89709: PUSH
89710: LD_INT 0
89712: ST_TO_ADDR
// sExchange := false ;
89713: LD_ADDR_EXP 140
89717: PUSH
89718: LD_INT 0
89720: ST_TO_ADDR
// sFac := false ;
89721: LD_ADDR_EXP 141
89725: PUSH
89726: LD_INT 0
89728: ST_TO_ADDR
// sPower := false ;
89729: LD_ADDR_EXP 142
89733: PUSH
89734: LD_INT 0
89736: ST_TO_ADDR
// sRandom := false ;
89737: LD_ADDR_EXP 143
89741: PUSH
89742: LD_INT 0
89744: ST_TO_ADDR
// sShield := false ;
89745: LD_ADDR_EXP 144
89749: PUSH
89750: LD_INT 0
89752: ST_TO_ADDR
// sTime := false ;
89753: LD_ADDR_EXP 145
89757: PUSH
89758: LD_INT 0
89760: ST_TO_ADDR
// sTools := false ;
89761: LD_ADDR_EXP 146
89765: PUSH
89766: LD_INT 0
89768: ST_TO_ADDR
// sSold := false ;
89769: LD_ADDR_EXP 111
89773: PUSH
89774: LD_INT 0
89776: ST_TO_ADDR
// sDiff := false ;
89777: LD_ADDR_EXP 112
89781: PUSH
89782: LD_INT 0
89784: ST_TO_ADDR
// sFog := false ;
89785: LD_ADDR_EXP 115
89789: PUSH
89790: LD_INT 0
89792: ST_TO_ADDR
// sReset := false ;
89793: LD_ADDR_EXP 116
89797: PUSH
89798: LD_INT 0
89800: ST_TO_ADDR
// sSun := false ;
89801: LD_ADDR_EXP 117
89805: PUSH
89806: LD_INT 0
89808: ST_TO_ADDR
// sTiger := false ;
89809: LD_ADDR_EXP 113
89813: PUSH
89814: LD_INT 0
89816: ST_TO_ADDR
// sBomb := false ;
89817: LD_ADDR_EXP 114
89821: PUSH
89822: LD_INT 0
89824: ST_TO_ADDR
// sWound := false ;
89825: LD_ADDR_EXP 122
89829: PUSH
89830: LD_INT 0
89832: ST_TO_ADDR
// sBetray := false ;
89833: LD_ADDR_EXP 126
89837: PUSH
89838: LD_INT 0
89840: ST_TO_ADDR
// sContamin := false ;
89841: LD_ADDR_EXP 127
89845: PUSH
89846: LD_INT 0
89848: ST_TO_ADDR
// sOil := false ;
89849: LD_ADDR_EXP 129
89853: PUSH
89854: LD_INT 0
89856: ST_TO_ADDR
// sStu := false ;
89857: LD_ADDR_EXP 133
89861: PUSH
89862: LD_INT 0
89864: ST_TO_ADDR
// sBazooka := false ;
89865: LD_ADDR_EXP 136
89869: PUSH
89870: LD_INT 0
89872: ST_TO_ADDR
// sMortar := false ;
89873: LD_ADDR_EXP 137
89877: PUSH
89878: LD_INT 0
89880: ST_TO_ADDR
// sRanger := false ;
89881: LD_ADDR_EXP 147
89885: PUSH
89886: LD_INT 0
89888: ST_TO_ADDR
// end ;
89889: LD_VAR 0 1
89893: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
89894: LD_INT 0
89896: PPUSH
89897: PPUSH
89898: PPUSH
89899: PPUSH
89900: PPUSH
// result := [ ] ;
89901: LD_ADDR_VAR 0 1
89905: PUSH
89906: EMPTY
89907: ST_TO_ADDR
// if campaign_id = 1 then
89908: LD_OWVAR 69
89912: PUSH
89913: LD_INT 1
89915: EQUAL
89916: IFFALSE 92854
// begin case mission_number of 1 :
89918: LD_OWVAR 70
89922: PUSH
89923: LD_INT 1
89925: DOUBLE
89926: EQUAL
89927: IFTRUE 89931
89929: GO 89995
89931: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
89932: LD_ADDR_VAR 0 1
89936: PUSH
89937: LD_INT 2
89939: PUSH
89940: LD_INT 4
89942: PUSH
89943: LD_INT 11
89945: PUSH
89946: LD_INT 12
89948: PUSH
89949: LD_INT 15
89951: PUSH
89952: LD_INT 16
89954: PUSH
89955: LD_INT 22
89957: PUSH
89958: LD_INT 23
89960: PUSH
89961: LD_INT 26
89963: PUSH
89964: EMPTY
89965: LIST
89966: LIST
89967: LIST
89968: LIST
89969: LIST
89970: LIST
89971: LIST
89972: LIST
89973: LIST
89974: PUSH
89975: LD_INT 101
89977: PUSH
89978: LD_INT 102
89980: PUSH
89981: LD_INT 106
89983: PUSH
89984: EMPTY
89985: LIST
89986: LIST
89987: LIST
89988: PUSH
89989: EMPTY
89990: LIST
89991: LIST
89992: ST_TO_ADDR
89993: GO 92852
89995: LD_INT 2
89997: DOUBLE
89998: EQUAL
89999: IFTRUE 90003
90001: GO 90075
90003: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
90004: LD_ADDR_VAR 0 1
90008: PUSH
90009: LD_INT 2
90011: PUSH
90012: LD_INT 4
90014: PUSH
90015: LD_INT 11
90017: PUSH
90018: LD_INT 12
90020: PUSH
90021: LD_INT 15
90023: PUSH
90024: LD_INT 16
90026: PUSH
90027: LD_INT 22
90029: PUSH
90030: LD_INT 23
90032: PUSH
90033: LD_INT 26
90035: PUSH
90036: EMPTY
90037: LIST
90038: LIST
90039: LIST
90040: LIST
90041: LIST
90042: LIST
90043: LIST
90044: LIST
90045: LIST
90046: PUSH
90047: LD_INT 101
90049: PUSH
90050: LD_INT 102
90052: PUSH
90053: LD_INT 105
90055: PUSH
90056: LD_INT 106
90058: PUSH
90059: LD_INT 108
90061: PUSH
90062: EMPTY
90063: LIST
90064: LIST
90065: LIST
90066: LIST
90067: LIST
90068: PUSH
90069: EMPTY
90070: LIST
90071: LIST
90072: ST_TO_ADDR
90073: GO 92852
90075: LD_INT 3
90077: DOUBLE
90078: EQUAL
90079: IFTRUE 90083
90081: GO 90159
90083: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
90084: LD_ADDR_VAR 0 1
90088: PUSH
90089: LD_INT 2
90091: PUSH
90092: LD_INT 4
90094: PUSH
90095: LD_INT 5
90097: PUSH
90098: LD_INT 11
90100: PUSH
90101: LD_INT 12
90103: PUSH
90104: LD_INT 15
90106: PUSH
90107: LD_INT 16
90109: PUSH
90110: LD_INT 22
90112: PUSH
90113: LD_INT 26
90115: PUSH
90116: LD_INT 36
90118: PUSH
90119: EMPTY
90120: LIST
90121: LIST
90122: LIST
90123: LIST
90124: LIST
90125: LIST
90126: LIST
90127: LIST
90128: LIST
90129: LIST
90130: PUSH
90131: LD_INT 101
90133: PUSH
90134: LD_INT 102
90136: PUSH
90137: LD_INT 105
90139: PUSH
90140: LD_INT 106
90142: PUSH
90143: LD_INT 108
90145: PUSH
90146: EMPTY
90147: LIST
90148: LIST
90149: LIST
90150: LIST
90151: LIST
90152: PUSH
90153: EMPTY
90154: LIST
90155: LIST
90156: ST_TO_ADDR
90157: GO 92852
90159: LD_INT 4
90161: DOUBLE
90162: EQUAL
90163: IFTRUE 90167
90165: GO 90251
90167: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
90168: LD_ADDR_VAR 0 1
90172: PUSH
90173: LD_INT 2
90175: PUSH
90176: LD_INT 4
90178: PUSH
90179: LD_INT 5
90181: PUSH
90182: LD_INT 8
90184: PUSH
90185: LD_INT 11
90187: PUSH
90188: LD_INT 12
90190: PUSH
90191: LD_INT 15
90193: PUSH
90194: LD_INT 16
90196: PUSH
90197: LD_INT 22
90199: PUSH
90200: LD_INT 23
90202: PUSH
90203: LD_INT 26
90205: PUSH
90206: LD_INT 36
90208: PUSH
90209: EMPTY
90210: LIST
90211: LIST
90212: LIST
90213: LIST
90214: LIST
90215: LIST
90216: LIST
90217: LIST
90218: LIST
90219: LIST
90220: LIST
90221: LIST
90222: PUSH
90223: LD_INT 101
90225: PUSH
90226: LD_INT 102
90228: PUSH
90229: LD_INT 105
90231: PUSH
90232: LD_INT 106
90234: PUSH
90235: LD_INT 108
90237: PUSH
90238: EMPTY
90239: LIST
90240: LIST
90241: LIST
90242: LIST
90243: LIST
90244: PUSH
90245: EMPTY
90246: LIST
90247: LIST
90248: ST_TO_ADDR
90249: GO 92852
90251: LD_INT 5
90253: DOUBLE
90254: EQUAL
90255: IFTRUE 90259
90257: GO 90359
90259: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
90260: LD_ADDR_VAR 0 1
90264: PUSH
90265: LD_INT 2
90267: PUSH
90268: LD_INT 4
90270: PUSH
90271: LD_INT 5
90273: PUSH
90274: LD_INT 6
90276: PUSH
90277: LD_INT 8
90279: PUSH
90280: LD_INT 11
90282: PUSH
90283: LD_INT 12
90285: PUSH
90286: LD_INT 15
90288: PUSH
90289: LD_INT 16
90291: PUSH
90292: LD_INT 22
90294: PUSH
90295: LD_INT 23
90297: PUSH
90298: LD_INT 25
90300: PUSH
90301: LD_INT 26
90303: PUSH
90304: LD_INT 36
90306: PUSH
90307: EMPTY
90308: LIST
90309: LIST
90310: LIST
90311: LIST
90312: LIST
90313: LIST
90314: LIST
90315: LIST
90316: LIST
90317: LIST
90318: LIST
90319: LIST
90320: LIST
90321: LIST
90322: PUSH
90323: LD_INT 101
90325: PUSH
90326: LD_INT 102
90328: PUSH
90329: LD_INT 105
90331: PUSH
90332: LD_INT 106
90334: PUSH
90335: LD_INT 108
90337: PUSH
90338: LD_INT 109
90340: PUSH
90341: LD_INT 112
90343: PUSH
90344: EMPTY
90345: LIST
90346: LIST
90347: LIST
90348: LIST
90349: LIST
90350: LIST
90351: LIST
90352: PUSH
90353: EMPTY
90354: LIST
90355: LIST
90356: ST_TO_ADDR
90357: GO 92852
90359: LD_INT 6
90361: DOUBLE
90362: EQUAL
90363: IFTRUE 90367
90365: GO 90487
90367: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
90368: LD_ADDR_VAR 0 1
90372: PUSH
90373: LD_INT 2
90375: PUSH
90376: LD_INT 4
90378: PUSH
90379: LD_INT 5
90381: PUSH
90382: LD_INT 6
90384: PUSH
90385: LD_INT 8
90387: PUSH
90388: LD_INT 11
90390: PUSH
90391: LD_INT 12
90393: PUSH
90394: LD_INT 15
90396: PUSH
90397: LD_INT 16
90399: PUSH
90400: LD_INT 20
90402: PUSH
90403: LD_INT 21
90405: PUSH
90406: LD_INT 22
90408: PUSH
90409: LD_INT 23
90411: PUSH
90412: LD_INT 25
90414: PUSH
90415: LD_INT 26
90417: PUSH
90418: LD_INT 30
90420: PUSH
90421: LD_INT 31
90423: PUSH
90424: LD_INT 32
90426: PUSH
90427: LD_INT 36
90429: PUSH
90430: EMPTY
90431: LIST
90432: LIST
90433: LIST
90434: LIST
90435: LIST
90436: LIST
90437: LIST
90438: LIST
90439: LIST
90440: LIST
90441: LIST
90442: LIST
90443: LIST
90444: LIST
90445: LIST
90446: LIST
90447: LIST
90448: LIST
90449: LIST
90450: PUSH
90451: LD_INT 101
90453: PUSH
90454: LD_INT 102
90456: PUSH
90457: LD_INT 105
90459: PUSH
90460: LD_INT 106
90462: PUSH
90463: LD_INT 108
90465: PUSH
90466: LD_INT 109
90468: PUSH
90469: LD_INT 112
90471: PUSH
90472: EMPTY
90473: LIST
90474: LIST
90475: LIST
90476: LIST
90477: LIST
90478: LIST
90479: LIST
90480: PUSH
90481: EMPTY
90482: LIST
90483: LIST
90484: ST_TO_ADDR
90485: GO 92852
90487: LD_INT 7
90489: DOUBLE
90490: EQUAL
90491: IFTRUE 90495
90493: GO 90595
90495: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
90496: LD_ADDR_VAR 0 1
90500: PUSH
90501: LD_INT 2
90503: PUSH
90504: LD_INT 4
90506: PUSH
90507: LD_INT 5
90509: PUSH
90510: LD_INT 7
90512: PUSH
90513: LD_INT 11
90515: PUSH
90516: LD_INT 12
90518: PUSH
90519: LD_INT 15
90521: PUSH
90522: LD_INT 16
90524: PUSH
90525: LD_INT 20
90527: PUSH
90528: LD_INT 21
90530: PUSH
90531: LD_INT 22
90533: PUSH
90534: LD_INT 23
90536: PUSH
90537: LD_INT 25
90539: PUSH
90540: LD_INT 26
90542: PUSH
90543: EMPTY
90544: LIST
90545: LIST
90546: LIST
90547: LIST
90548: LIST
90549: LIST
90550: LIST
90551: LIST
90552: LIST
90553: LIST
90554: LIST
90555: LIST
90556: LIST
90557: LIST
90558: PUSH
90559: LD_INT 101
90561: PUSH
90562: LD_INT 102
90564: PUSH
90565: LD_INT 103
90567: PUSH
90568: LD_INT 105
90570: PUSH
90571: LD_INT 106
90573: PUSH
90574: LD_INT 108
90576: PUSH
90577: LD_INT 112
90579: PUSH
90580: EMPTY
90581: LIST
90582: LIST
90583: LIST
90584: LIST
90585: LIST
90586: LIST
90587: LIST
90588: PUSH
90589: EMPTY
90590: LIST
90591: LIST
90592: ST_TO_ADDR
90593: GO 92852
90595: LD_INT 8
90597: DOUBLE
90598: EQUAL
90599: IFTRUE 90603
90601: GO 90731
90603: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
90604: LD_ADDR_VAR 0 1
90608: PUSH
90609: LD_INT 2
90611: PUSH
90612: LD_INT 4
90614: PUSH
90615: LD_INT 5
90617: PUSH
90618: LD_INT 6
90620: PUSH
90621: LD_INT 7
90623: PUSH
90624: LD_INT 8
90626: PUSH
90627: LD_INT 11
90629: PUSH
90630: LD_INT 12
90632: PUSH
90633: LD_INT 15
90635: PUSH
90636: LD_INT 16
90638: PUSH
90639: LD_INT 20
90641: PUSH
90642: LD_INT 21
90644: PUSH
90645: LD_INT 22
90647: PUSH
90648: LD_INT 23
90650: PUSH
90651: LD_INT 25
90653: PUSH
90654: LD_INT 26
90656: PUSH
90657: LD_INT 30
90659: PUSH
90660: LD_INT 31
90662: PUSH
90663: LD_INT 32
90665: PUSH
90666: LD_INT 36
90668: PUSH
90669: EMPTY
90670: LIST
90671: LIST
90672: LIST
90673: LIST
90674: LIST
90675: LIST
90676: LIST
90677: LIST
90678: LIST
90679: LIST
90680: LIST
90681: LIST
90682: LIST
90683: LIST
90684: LIST
90685: LIST
90686: LIST
90687: LIST
90688: LIST
90689: LIST
90690: PUSH
90691: LD_INT 101
90693: PUSH
90694: LD_INT 102
90696: PUSH
90697: LD_INT 103
90699: PUSH
90700: LD_INT 105
90702: PUSH
90703: LD_INT 106
90705: PUSH
90706: LD_INT 108
90708: PUSH
90709: LD_INT 109
90711: PUSH
90712: LD_INT 112
90714: PUSH
90715: EMPTY
90716: LIST
90717: LIST
90718: LIST
90719: LIST
90720: LIST
90721: LIST
90722: LIST
90723: LIST
90724: PUSH
90725: EMPTY
90726: LIST
90727: LIST
90728: ST_TO_ADDR
90729: GO 92852
90731: LD_INT 9
90733: DOUBLE
90734: EQUAL
90735: IFTRUE 90739
90737: GO 90875
90739: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
90740: LD_ADDR_VAR 0 1
90744: PUSH
90745: LD_INT 2
90747: PUSH
90748: LD_INT 4
90750: PUSH
90751: LD_INT 5
90753: PUSH
90754: LD_INT 6
90756: PUSH
90757: LD_INT 7
90759: PUSH
90760: LD_INT 8
90762: PUSH
90763: LD_INT 11
90765: PUSH
90766: LD_INT 12
90768: PUSH
90769: LD_INT 15
90771: PUSH
90772: LD_INT 16
90774: PUSH
90775: LD_INT 20
90777: PUSH
90778: LD_INT 21
90780: PUSH
90781: LD_INT 22
90783: PUSH
90784: LD_INT 23
90786: PUSH
90787: LD_INT 25
90789: PUSH
90790: LD_INT 26
90792: PUSH
90793: LD_INT 28
90795: PUSH
90796: LD_INT 30
90798: PUSH
90799: LD_INT 31
90801: PUSH
90802: LD_INT 32
90804: PUSH
90805: LD_INT 36
90807: PUSH
90808: EMPTY
90809: LIST
90810: LIST
90811: LIST
90812: LIST
90813: LIST
90814: LIST
90815: LIST
90816: LIST
90817: LIST
90818: LIST
90819: LIST
90820: LIST
90821: LIST
90822: LIST
90823: LIST
90824: LIST
90825: LIST
90826: LIST
90827: LIST
90828: LIST
90829: LIST
90830: PUSH
90831: LD_INT 101
90833: PUSH
90834: LD_INT 102
90836: PUSH
90837: LD_INT 103
90839: PUSH
90840: LD_INT 105
90842: PUSH
90843: LD_INT 106
90845: PUSH
90846: LD_INT 108
90848: PUSH
90849: LD_INT 109
90851: PUSH
90852: LD_INT 112
90854: PUSH
90855: LD_INT 114
90857: PUSH
90858: EMPTY
90859: LIST
90860: LIST
90861: LIST
90862: LIST
90863: LIST
90864: LIST
90865: LIST
90866: LIST
90867: LIST
90868: PUSH
90869: EMPTY
90870: LIST
90871: LIST
90872: ST_TO_ADDR
90873: GO 92852
90875: LD_INT 10
90877: DOUBLE
90878: EQUAL
90879: IFTRUE 90883
90881: GO 91067
90883: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
90884: LD_ADDR_VAR 0 1
90888: PUSH
90889: LD_INT 2
90891: PUSH
90892: LD_INT 4
90894: PUSH
90895: LD_INT 5
90897: PUSH
90898: LD_INT 6
90900: PUSH
90901: LD_INT 7
90903: PUSH
90904: LD_INT 8
90906: PUSH
90907: LD_INT 9
90909: PUSH
90910: LD_INT 10
90912: PUSH
90913: LD_INT 11
90915: PUSH
90916: LD_INT 12
90918: PUSH
90919: LD_INT 13
90921: PUSH
90922: LD_INT 14
90924: PUSH
90925: LD_INT 15
90927: PUSH
90928: LD_INT 16
90930: PUSH
90931: LD_INT 17
90933: PUSH
90934: LD_INT 18
90936: PUSH
90937: LD_INT 19
90939: PUSH
90940: LD_INT 20
90942: PUSH
90943: LD_INT 21
90945: PUSH
90946: LD_INT 22
90948: PUSH
90949: LD_INT 23
90951: PUSH
90952: LD_INT 24
90954: PUSH
90955: LD_INT 25
90957: PUSH
90958: LD_INT 26
90960: PUSH
90961: LD_INT 28
90963: PUSH
90964: LD_INT 30
90966: PUSH
90967: LD_INT 31
90969: PUSH
90970: LD_INT 32
90972: PUSH
90973: LD_INT 36
90975: PUSH
90976: EMPTY
90977: LIST
90978: LIST
90979: LIST
90980: LIST
90981: LIST
90982: LIST
90983: LIST
90984: LIST
90985: LIST
90986: LIST
90987: LIST
90988: LIST
90989: LIST
90990: LIST
90991: LIST
90992: LIST
90993: LIST
90994: LIST
90995: LIST
90996: LIST
90997: LIST
90998: LIST
90999: LIST
91000: LIST
91001: LIST
91002: LIST
91003: LIST
91004: LIST
91005: LIST
91006: PUSH
91007: LD_INT 101
91009: PUSH
91010: LD_INT 102
91012: PUSH
91013: LD_INT 103
91015: PUSH
91016: LD_INT 104
91018: PUSH
91019: LD_INT 105
91021: PUSH
91022: LD_INT 106
91024: PUSH
91025: LD_INT 107
91027: PUSH
91028: LD_INT 108
91030: PUSH
91031: LD_INT 109
91033: PUSH
91034: LD_INT 110
91036: PUSH
91037: LD_INT 111
91039: PUSH
91040: LD_INT 112
91042: PUSH
91043: LD_INT 114
91045: PUSH
91046: EMPTY
91047: LIST
91048: LIST
91049: LIST
91050: LIST
91051: LIST
91052: LIST
91053: LIST
91054: LIST
91055: LIST
91056: LIST
91057: LIST
91058: LIST
91059: LIST
91060: PUSH
91061: EMPTY
91062: LIST
91063: LIST
91064: ST_TO_ADDR
91065: GO 92852
91067: LD_INT 11
91069: DOUBLE
91070: EQUAL
91071: IFTRUE 91075
91073: GO 91267
91075: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
91076: LD_ADDR_VAR 0 1
91080: PUSH
91081: LD_INT 2
91083: PUSH
91084: LD_INT 3
91086: PUSH
91087: LD_INT 4
91089: PUSH
91090: LD_INT 5
91092: PUSH
91093: LD_INT 6
91095: PUSH
91096: LD_INT 7
91098: PUSH
91099: LD_INT 8
91101: PUSH
91102: LD_INT 9
91104: PUSH
91105: LD_INT 10
91107: PUSH
91108: LD_INT 11
91110: PUSH
91111: LD_INT 12
91113: PUSH
91114: LD_INT 13
91116: PUSH
91117: LD_INT 14
91119: PUSH
91120: LD_INT 15
91122: PUSH
91123: LD_INT 16
91125: PUSH
91126: LD_INT 17
91128: PUSH
91129: LD_INT 18
91131: PUSH
91132: LD_INT 19
91134: PUSH
91135: LD_INT 20
91137: PUSH
91138: LD_INT 21
91140: PUSH
91141: LD_INT 22
91143: PUSH
91144: LD_INT 23
91146: PUSH
91147: LD_INT 24
91149: PUSH
91150: LD_INT 25
91152: PUSH
91153: LD_INT 26
91155: PUSH
91156: LD_INT 28
91158: PUSH
91159: LD_INT 30
91161: PUSH
91162: LD_INT 31
91164: PUSH
91165: LD_INT 32
91167: PUSH
91168: LD_INT 34
91170: PUSH
91171: LD_INT 36
91173: PUSH
91174: EMPTY
91175: LIST
91176: LIST
91177: LIST
91178: LIST
91179: LIST
91180: LIST
91181: LIST
91182: LIST
91183: LIST
91184: LIST
91185: LIST
91186: LIST
91187: LIST
91188: LIST
91189: LIST
91190: LIST
91191: LIST
91192: LIST
91193: LIST
91194: LIST
91195: LIST
91196: LIST
91197: LIST
91198: LIST
91199: LIST
91200: LIST
91201: LIST
91202: LIST
91203: LIST
91204: LIST
91205: LIST
91206: PUSH
91207: LD_INT 101
91209: PUSH
91210: LD_INT 102
91212: PUSH
91213: LD_INT 103
91215: PUSH
91216: LD_INT 104
91218: PUSH
91219: LD_INT 105
91221: PUSH
91222: LD_INT 106
91224: PUSH
91225: LD_INT 107
91227: PUSH
91228: LD_INT 108
91230: PUSH
91231: LD_INT 109
91233: PUSH
91234: LD_INT 110
91236: PUSH
91237: LD_INT 111
91239: PUSH
91240: LD_INT 112
91242: PUSH
91243: LD_INT 114
91245: PUSH
91246: EMPTY
91247: LIST
91248: LIST
91249: LIST
91250: LIST
91251: LIST
91252: LIST
91253: LIST
91254: LIST
91255: LIST
91256: LIST
91257: LIST
91258: LIST
91259: LIST
91260: PUSH
91261: EMPTY
91262: LIST
91263: LIST
91264: ST_TO_ADDR
91265: GO 92852
91267: LD_INT 12
91269: DOUBLE
91270: EQUAL
91271: IFTRUE 91275
91273: GO 91483
91275: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
91276: LD_ADDR_VAR 0 1
91280: PUSH
91281: LD_INT 1
91283: PUSH
91284: LD_INT 2
91286: PUSH
91287: LD_INT 3
91289: PUSH
91290: LD_INT 4
91292: PUSH
91293: LD_INT 5
91295: PUSH
91296: LD_INT 6
91298: PUSH
91299: LD_INT 7
91301: PUSH
91302: LD_INT 8
91304: PUSH
91305: LD_INT 9
91307: PUSH
91308: LD_INT 10
91310: PUSH
91311: LD_INT 11
91313: PUSH
91314: LD_INT 12
91316: PUSH
91317: LD_INT 13
91319: PUSH
91320: LD_INT 14
91322: PUSH
91323: LD_INT 15
91325: PUSH
91326: LD_INT 16
91328: PUSH
91329: LD_INT 17
91331: PUSH
91332: LD_INT 18
91334: PUSH
91335: LD_INT 19
91337: PUSH
91338: LD_INT 20
91340: PUSH
91341: LD_INT 21
91343: PUSH
91344: LD_INT 22
91346: PUSH
91347: LD_INT 23
91349: PUSH
91350: LD_INT 24
91352: PUSH
91353: LD_INT 25
91355: PUSH
91356: LD_INT 26
91358: PUSH
91359: LD_INT 27
91361: PUSH
91362: LD_INT 28
91364: PUSH
91365: LD_INT 30
91367: PUSH
91368: LD_INT 31
91370: PUSH
91371: LD_INT 32
91373: PUSH
91374: LD_INT 33
91376: PUSH
91377: LD_INT 34
91379: PUSH
91380: LD_INT 36
91382: PUSH
91383: EMPTY
91384: LIST
91385: LIST
91386: LIST
91387: LIST
91388: LIST
91389: LIST
91390: LIST
91391: LIST
91392: LIST
91393: LIST
91394: LIST
91395: LIST
91396: LIST
91397: LIST
91398: LIST
91399: LIST
91400: LIST
91401: LIST
91402: LIST
91403: LIST
91404: LIST
91405: LIST
91406: LIST
91407: LIST
91408: LIST
91409: LIST
91410: LIST
91411: LIST
91412: LIST
91413: LIST
91414: LIST
91415: LIST
91416: LIST
91417: LIST
91418: PUSH
91419: LD_INT 101
91421: PUSH
91422: LD_INT 102
91424: PUSH
91425: LD_INT 103
91427: PUSH
91428: LD_INT 104
91430: PUSH
91431: LD_INT 105
91433: PUSH
91434: LD_INT 106
91436: PUSH
91437: LD_INT 107
91439: PUSH
91440: LD_INT 108
91442: PUSH
91443: LD_INT 109
91445: PUSH
91446: LD_INT 110
91448: PUSH
91449: LD_INT 111
91451: PUSH
91452: LD_INT 112
91454: PUSH
91455: LD_INT 113
91457: PUSH
91458: LD_INT 114
91460: PUSH
91461: EMPTY
91462: LIST
91463: LIST
91464: LIST
91465: LIST
91466: LIST
91467: LIST
91468: LIST
91469: LIST
91470: LIST
91471: LIST
91472: LIST
91473: LIST
91474: LIST
91475: LIST
91476: PUSH
91477: EMPTY
91478: LIST
91479: LIST
91480: ST_TO_ADDR
91481: GO 92852
91483: LD_INT 13
91485: DOUBLE
91486: EQUAL
91487: IFTRUE 91491
91489: GO 91687
91491: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
91492: LD_ADDR_VAR 0 1
91496: PUSH
91497: LD_INT 1
91499: PUSH
91500: LD_INT 2
91502: PUSH
91503: LD_INT 3
91505: PUSH
91506: LD_INT 4
91508: PUSH
91509: LD_INT 5
91511: PUSH
91512: LD_INT 8
91514: PUSH
91515: LD_INT 9
91517: PUSH
91518: LD_INT 10
91520: PUSH
91521: LD_INT 11
91523: PUSH
91524: LD_INT 12
91526: PUSH
91527: LD_INT 14
91529: PUSH
91530: LD_INT 15
91532: PUSH
91533: LD_INT 16
91535: PUSH
91536: LD_INT 17
91538: PUSH
91539: LD_INT 18
91541: PUSH
91542: LD_INT 19
91544: PUSH
91545: LD_INT 20
91547: PUSH
91548: LD_INT 21
91550: PUSH
91551: LD_INT 22
91553: PUSH
91554: LD_INT 23
91556: PUSH
91557: LD_INT 24
91559: PUSH
91560: LD_INT 25
91562: PUSH
91563: LD_INT 26
91565: PUSH
91566: LD_INT 27
91568: PUSH
91569: LD_INT 28
91571: PUSH
91572: LD_INT 30
91574: PUSH
91575: LD_INT 31
91577: PUSH
91578: LD_INT 32
91580: PUSH
91581: LD_INT 33
91583: PUSH
91584: LD_INT 34
91586: PUSH
91587: LD_INT 36
91589: PUSH
91590: EMPTY
91591: LIST
91592: LIST
91593: LIST
91594: LIST
91595: LIST
91596: LIST
91597: LIST
91598: LIST
91599: LIST
91600: LIST
91601: LIST
91602: LIST
91603: LIST
91604: LIST
91605: LIST
91606: LIST
91607: LIST
91608: LIST
91609: LIST
91610: LIST
91611: LIST
91612: LIST
91613: LIST
91614: LIST
91615: LIST
91616: LIST
91617: LIST
91618: LIST
91619: LIST
91620: LIST
91621: LIST
91622: PUSH
91623: LD_INT 101
91625: PUSH
91626: LD_INT 102
91628: PUSH
91629: LD_INT 103
91631: PUSH
91632: LD_INT 104
91634: PUSH
91635: LD_INT 105
91637: PUSH
91638: LD_INT 106
91640: PUSH
91641: LD_INT 107
91643: PUSH
91644: LD_INT 108
91646: PUSH
91647: LD_INT 109
91649: PUSH
91650: LD_INT 110
91652: PUSH
91653: LD_INT 111
91655: PUSH
91656: LD_INT 112
91658: PUSH
91659: LD_INT 113
91661: PUSH
91662: LD_INT 114
91664: PUSH
91665: EMPTY
91666: LIST
91667: LIST
91668: LIST
91669: LIST
91670: LIST
91671: LIST
91672: LIST
91673: LIST
91674: LIST
91675: LIST
91676: LIST
91677: LIST
91678: LIST
91679: LIST
91680: PUSH
91681: EMPTY
91682: LIST
91683: LIST
91684: ST_TO_ADDR
91685: GO 92852
91687: LD_INT 14
91689: DOUBLE
91690: EQUAL
91691: IFTRUE 91695
91693: GO 91907
91695: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
91696: LD_ADDR_VAR 0 1
91700: PUSH
91701: LD_INT 1
91703: PUSH
91704: LD_INT 2
91706: PUSH
91707: LD_INT 3
91709: PUSH
91710: LD_INT 4
91712: PUSH
91713: LD_INT 5
91715: PUSH
91716: LD_INT 6
91718: PUSH
91719: LD_INT 7
91721: PUSH
91722: LD_INT 8
91724: PUSH
91725: LD_INT 9
91727: PUSH
91728: LD_INT 10
91730: PUSH
91731: LD_INT 11
91733: PUSH
91734: LD_INT 12
91736: PUSH
91737: LD_INT 13
91739: PUSH
91740: LD_INT 14
91742: PUSH
91743: LD_INT 15
91745: PUSH
91746: LD_INT 16
91748: PUSH
91749: LD_INT 17
91751: PUSH
91752: LD_INT 18
91754: PUSH
91755: LD_INT 19
91757: PUSH
91758: LD_INT 20
91760: PUSH
91761: LD_INT 21
91763: PUSH
91764: LD_INT 22
91766: PUSH
91767: LD_INT 23
91769: PUSH
91770: LD_INT 24
91772: PUSH
91773: LD_INT 25
91775: PUSH
91776: LD_INT 26
91778: PUSH
91779: LD_INT 27
91781: PUSH
91782: LD_INT 28
91784: PUSH
91785: LD_INT 29
91787: PUSH
91788: LD_INT 30
91790: PUSH
91791: LD_INT 31
91793: PUSH
91794: LD_INT 32
91796: PUSH
91797: LD_INT 33
91799: PUSH
91800: LD_INT 34
91802: PUSH
91803: LD_INT 36
91805: PUSH
91806: EMPTY
91807: LIST
91808: LIST
91809: LIST
91810: LIST
91811: LIST
91812: LIST
91813: LIST
91814: LIST
91815: LIST
91816: LIST
91817: LIST
91818: LIST
91819: LIST
91820: LIST
91821: LIST
91822: LIST
91823: LIST
91824: LIST
91825: LIST
91826: LIST
91827: LIST
91828: LIST
91829: LIST
91830: LIST
91831: LIST
91832: LIST
91833: LIST
91834: LIST
91835: LIST
91836: LIST
91837: LIST
91838: LIST
91839: LIST
91840: LIST
91841: LIST
91842: PUSH
91843: LD_INT 101
91845: PUSH
91846: LD_INT 102
91848: PUSH
91849: LD_INT 103
91851: PUSH
91852: LD_INT 104
91854: PUSH
91855: LD_INT 105
91857: PUSH
91858: LD_INT 106
91860: PUSH
91861: LD_INT 107
91863: PUSH
91864: LD_INT 108
91866: PUSH
91867: LD_INT 109
91869: PUSH
91870: LD_INT 110
91872: PUSH
91873: LD_INT 111
91875: PUSH
91876: LD_INT 112
91878: PUSH
91879: LD_INT 113
91881: PUSH
91882: LD_INT 114
91884: PUSH
91885: EMPTY
91886: LIST
91887: LIST
91888: LIST
91889: LIST
91890: LIST
91891: LIST
91892: LIST
91893: LIST
91894: LIST
91895: LIST
91896: LIST
91897: LIST
91898: LIST
91899: LIST
91900: PUSH
91901: EMPTY
91902: LIST
91903: LIST
91904: ST_TO_ADDR
91905: GO 92852
91907: LD_INT 15
91909: DOUBLE
91910: EQUAL
91911: IFTRUE 91915
91913: GO 92127
91915: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
91916: LD_ADDR_VAR 0 1
91920: PUSH
91921: LD_INT 1
91923: PUSH
91924: LD_INT 2
91926: PUSH
91927: LD_INT 3
91929: PUSH
91930: LD_INT 4
91932: PUSH
91933: LD_INT 5
91935: PUSH
91936: LD_INT 6
91938: PUSH
91939: LD_INT 7
91941: PUSH
91942: LD_INT 8
91944: PUSH
91945: LD_INT 9
91947: PUSH
91948: LD_INT 10
91950: PUSH
91951: LD_INT 11
91953: PUSH
91954: LD_INT 12
91956: PUSH
91957: LD_INT 13
91959: PUSH
91960: LD_INT 14
91962: PUSH
91963: LD_INT 15
91965: PUSH
91966: LD_INT 16
91968: PUSH
91969: LD_INT 17
91971: PUSH
91972: LD_INT 18
91974: PUSH
91975: LD_INT 19
91977: PUSH
91978: LD_INT 20
91980: PUSH
91981: LD_INT 21
91983: PUSH
91984: LD_INT 22
91986: PUSH
91987: LD_INT 23
91989: PUSH
91990: LD_INT 24
91992: PUSH
91993: LD_INT 25
91995: PUSH
91996: LD_INT 26
91998: PUSH
91999: LD_INT 27
92001: PUSH
92002: LD_INT 28
92004: PUSH
92005: LD_INT 29
92007: PUSH
92008: LD_INT 30
92010: PUSH
92011: LD_INT 31
92013: PUSH
92014: LD_INT 32
92016: PUSH
92017: LD_INT 33
92019: PUSH
92020: LD_INT 34
92022: PUSH
92023: LD_INT 36
92025: PUSH
92026: EMPTY
92027: LIST
92028: LIST
92029: LIST
92030: LIST
92031: LIST
92032: LIST
92033: LIST
92034: LIST
92035: LIST
92036: LIST
92037: LIST
92038: LIST
92039: LIST
92040: LIST
92041: LIST
92042: LIST
92043: LIST
92044: LIST
92045: LIST
92046: LIST
92047: LIST
92048: LIST
92049: LIST
92050: LIST
92051: LIST
92052: LIST
92053: LIST
92054: LIST
92055: LIST
92056: LIST
92057: LIST
92058: LIST
92059: LIST
92060: LIST
92061: LIST
92062: PUSH
92063: LD_INT 101
92065: PUSH
92066: LD_INT 102
92068: PUSH
92069: LD_INT 103
92071: PUSH
92072: LD_INT 104
92074: PUSH
92075: LD_INT 105
92077: PUSH
92078: LD_INT 106
92080: PUSH
92081: LD_INT 107
92083: PUSH
92084: LD_INT 108
92086: PUSH
92087: LD_INT 109
92089: PUSH
92090: LD_INT 110
92092: PUSH
92093: LD_INT 111
92095: PUSH
92096: LD_INT 112
92098: PUSH
92099: LD_INT 113
92101: PUSH
92102: LD_INT 114
92104: PUSH
92105: EMPTY
92106: LIST
92107: LIST
92108: LIST
92109: LIST
92110: LIST
92111: LIST
92112: LIST
92113: LIST
92114: LIST
92115: LIST
92116: LIST
92117: LIST
92118: LIST
92119: LIST
92120: PUSH
92121: EMPTY
92122: LIST
92123: LIST
92124: ST_TO_ADDR
92125: GO 92852
92127: LD_INT 16
92129: DOUBLE
92130: EQUAL
92131: IFTRUE 92135
92133: GO 92259
92135: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
92136: LD_ADDR_VAR 0 1
92140: PUSH
92141: LD_INT 2
92143: PUSH
92144: LD_INT 4
92146: PUSH
92147: LD_INT 5
92149: PUSH
92150: LD_INT 7
92152: PUSH
92153: LD_INT 11
92155: PUSH
92156: LD_INT 12
92158: PUSH
92159: LD_INT 15
92161: PUSH
92162: LD_INT 16
92164: PUSH
92165: LD_INT 20
92167: PUSH
92168: LD_INT 21
92170: PUSH
92171: LD_INT 22
92173: PUSH
92174: LD_INT 23
92176: PUSH
92177: LD_INT 25
92179: PUSH
92180: LD_INT 26
92182: PUSH
92183: LD_INT 30
92185: PUSH
92186: LD_INT 31
92188: PUSH
92189: LD_INT 32
92191: PUSH
92192: LD_INT 33
92194: PUSH
92195: LD_INT 34
92197: PUSH
92198: EMPTY
92199: LIST
92200: LIST
92201: LIST
92202: LIST
92203: LIST
92204: LIST
92205: LIST
92206: LIST
92207: LIST
92208: LIST
92209: LIST
92210: LIST
92211: LIST
92212: LIST
92213: LIST
92214: LIST
92215: LIST
92216: LIST
92217: LIST
92218: PUSH
92219: LD_INT 101
92221: PUSH
92222: LD_INT 102
92224: PUSH
92225: LD_INT 103
92227: PUSH
92228: LD_INT 106
92230: PUSH
92231: LD_INT 108
92233: PUSH
92234: LD_INT 112
92236: PUSH
92237: LD_INT 113
92239: PUSH
92240: LD_INT 114
92242: PUSH
92243: EMPTY
92244: LIST
92245: LIST
92246: LIST
92247: LIST
92248: LIST
92249: LIST
92250: LIST
92251: LIST
92252: PUSH
92253: EMPTY
92254: LIST
92255: LIST
92256: ST_TO_ADDR
92257: GO 92852
92259: LD_INT 17
92261: DOUBLE
92262: EQUAL
92263: IFTRUE 92267
92265: GO 92479
92267: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
92268: LD_ADDR_VAR 0 1
92272: PUSH
92273: LD_INT 1
92275: PUSH
92276: LD_INT 2
92278: PUSH
92279: LD_INT 3
92281: PUSH
92282: LD_INT 4
92284: PUSH
92285: LD_INT 5
92287: PUSH
92288: LD_INT 6
92290: PUSH
92291: LD_INT 7
92293: PUSH
92294: LD_INT 8
92296: PUSH
92297: LD_INT 9
92299: PUSH
92300: LD_INT 10
92302: PUSH
92303: LD_INT 11
92305: PUSH
92306: LD_INT 12
92308: PUSH
92309: LD_INT 13
92311: PUSH
92312: LD_INT 14
92314: PUSH
92315: LD_INT 15
92317: PUSH
92318: LD_INT 16
92320: PUSH
92321: LD_INT 17
92323: PUSH
92324: LD_INT 18
92326: PUSH
92327: LD_INT 19
92329: PUSH
92330: LD_INT 20
92332: PUSH
92333: LD_INT 21
92335: PUSH
92336: LD_INT 22
92338: PUSH
92339: LD_INT 23
92341: PUSH
92342: LD_INT 24
92344: PUSH
92345: LD_INT 25
92347: PUSH
92348: LD_INT 26
92350: PUSH
92351: LD_INT 27
92353: PUSH
92354: LD_INT 28
92356: PUSH
92357: LD_INT 29
92359: PUSH
92360: LD_INT 30
92362: PUSH
92363: LD_INT 31
92365: PUSH
92366: LD_INT 32
92368: PUSH
92369: LD_INT 33
92371: PUSH
92372: LD_INT 34
92374: PUSH
92375: LD_INT 36
92377: PUSH
92378: EMPTY
92379: LIST
92380: LIST
92381: LIST
92382: LIST
92383: LIST
92384: LIST
92385: LIST
92386: LIST
92387: LIST
92388: LIST
92389: LIST
92390: LIST
92391: LIST
92392: LIST
92393: LIST
92394: LIST
92395: LIST
92396: LIST
92397: LIST
92398: LIST
92399: LIST
92400: LIST
92401: LIST
92402: LIST
92403: LIST
92404: LIST
92405: LIST
92406: LIST
92407: LIST
92408: LIST
92409: LIST
92410: LIST
92411: LIST
92412: LIST
92413: LIST
92414: PUSH
92415: LD_INT 101
92417: PUSH
92418: LD_INT 102
92420: PUSH
92421: LD_INT 103
92423: PUSH
92424: LD_INT 104
92426: PUSH
92427: LD_INT 105
92429: PUSH
92430: LD_INT 106
92432: PUSH
92433: LD_INT 107
92435: PUSH
92436: LD_INT 108
92438: PUSH
92439: LD_INT 109
92441: PUSH
92442: LD_INT 110
92444: PUSH
92445: LD_INT 111
92447: PUSH
92448: LD_INT 112
92450: PUSH
92451: LD_INT 113
92453: PUSH
92454: LD_INT 114
92456: PUSH
92457: EMPTY
92458: LIST
92459: LIST
92460: LIST
92461: LIST
92462: LIST
92463: LIST
92464: LIST
92465: LIST
92466: LIST
92467: LIST
92468: LIST
92469: LIST
92470: LIST
92471: LIST
92472: PUSH
92473: EMPTY
92474: LIST
92475: LIST
92476: ST_TO_ADDR
92477: GO 92852
92479: LD_INT 18
92481: DOUBLE
92482: EQUAL
92483: IFTRUE 92487
92485: GO 92623
92487: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
92488: LD_ADDR_VAR 0 1
92492: PUSH
92493: LD_INT 2
92495: PUSH
92496: LD_INT 4
92498: PUSH
92499: LD_INT 5
92501: PUSH
92502: LD_INT 7
92504: PUSH
92505: LD_INT 11
92507: PUSH
92508: LD_INT 12
92510: PUSH
92511: LD_INT 15
92513: PUSH
92514: LD_INT 16
92516: PUSH
92517: LD_INT 20
92519: PUSH
92520: LD_INT 21
92522: PUSH
92523: LD_INT 22
92525: PUSH
92526: LD_INT 23
92528: PUSH
92529: LD_INT 25
92531: PUSH
92532: LD_INT 26
92534: PUSH
92535: LD_INT 30
92537: PUSH
92538: LD_INT 31
92540: PUSH
92541: LD_INT 32
92543: PUSH
92544: LD_INT 33
92546: PUSH
92547: LD_INT 34
92549: PUSH
92550: LD_INT 35
92552: PUSH
92553: LD_INT 36
92555: PUSH
92556: EMPTY
92557: LIST
92558: LIST
92559: LIST
92560: LIST
92561: LIST
92562: LIST
92563: LIST
92564: LIST
92565: LIST
92566: LIST
92567: LIST
92568: LIST
92569: LIST
92570: LIST
92571: LIST
92572: LIST
92573: LIST
92574: LIST
92575: LIST
92576: LIST
92577: LIST
92578: PUSH
92579: LD_INT 101
92581: PUSH
92582: LD_INT 102
92584: PUSH
92585: LD_INT 103
92587: PUSH
92588: LD_INT 106
92590: PUSH
92591: LD_INT 108
92593: PUSH
92594: LD_INT 112
92596: PUSH
92597: LD_INT 113
92599: PUSH
92600: LD_INT 114
92602: PUSH
92603: LD_INT 115
92605: PUSH
92606: EMPTY
92607: LIST
92608: LIST
92609: LIST
92610: LIST
92611: LIST
92612: LIST
92613: LIST
92614: LIST
92615: LIST
92616: PUSH
92617: EMPTY
92618: LIST
92619: LIST
92620: ST_TO_ADDR
92621: GO 92852
92623: LD_INT 19
92625: DOUBLE
92626: EQUAL
92627: IFTRUE 92631
92629: GO 92851
92631: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
92632: LD_ADDR_VAR 0 1
92636: PUSH
92637: LD_INT 1
92639: PUSH
92640: LD_INT 2
92642: PUSH
92643: LD_INT 3
92645: PUSH
92646: LD_INT 4
92648: PUSH
92649: LD_INT 5
92651: PUSH
92652: LD_INT 6
92654: PUSH
92655: LD_INT 7
92657: PUSH
92658: LD_INT 8
92660: PUSH
92661: LD_INT 9
92663: PUSH
92664: LD_INT 10
92666: PUSH
92667: LD_INT 11
92669: PUSH
92670: LD_INT 12
92672: PUSH
92673: LD_INT 13
92675: PUSH
92676: LD_INT 14
92678: PUSH
92679: LD_INT 15
92681: PUSH
92682: LD_INT 16
92684: PUSH
92685: LD_INT 17
92687: PUSH
92688: LD_INT 18
92690: PUSH
92691: LD_INT 19
92693: PUSH
92694: LD_INT 20
92696: PUSH
92697: LD_INT 21
92699: PUSH
92700: LD_INT 22
92702: PUSH
92703: LD_INT 23
92705: PUSH
92706: LD_INT 24
92708: PUSH
92709: LD_INT 25
92711: PUSH
92712: LD_INT 26
92714: PUSH
92715: LD_INT 27
92717: PUSH
92718: LD_INT 28
92720: PUSH
92721: LD_INT 29
92723: PUSH
92724: LD_INT 30
92726: PUSH
92727: LD_INT 31
92729: PUSH
92730: LD_INT 32
92732: PUSH
92733: LD_INT 33
92735: PUSH
92736: LD_INT 34
92738: PUSH
92739: LD_INT 35
92741: PUSH
92742: LD_INT 36
92744: PUSH
92745: EMPTY
92746: LIST
92747: LIST
92748: LIST
92749: LIST
92750: LIST
92751: LIST
92752: LIST
92753: LIST
92754: LIST
92755: LIST
92756: LIST
92757: LIST
92758: LIST
92759: LIST
92760: LIST
92761: LIST
92762: LIST
92763: LIST
92764: LIST
92765: LIST
92766: LIST
92767: LIST
92768: LIST
92769: LIST
92770: LIST
92771: LIST
92772: LIST
92773: LIST
92774: LIST
92775: LIST
92776: LIST
92777: LIST
92778: LIST
92779: LIST
92780: LIST
92781: LIST
92782: PUSH
92783: LD_INT 101
92785: PUSH
92786: LD_INT 102
92788: PUSH
92789: LD_INT 103
92791: PUSH
92792: LD_INT 104
92794: PUSH
92795: LD_INT 105
92797: PUSH
92798: LD_INT 106
92800: PUSH
92801: LD_INT 107
92803: PUSH
92804: LD_INT 108
92806: PUSH
92807: LD_INT 109
92809: PUSH
92810: LD_INT 110
92812: PUSH
92813: LD_INT 111
92815: PUSH
92816: LD_INT 112
92818: PUSH
92819: LD_INT 113
92821: PUSH
92822: LD_INT 114
92824: PUSH
92825: LD_INT 115
92827: PUSH
92828: EMPTY
92829: LIST
92830: LIST
92831: LIST
92832: LIST
92833: LIST
92834: LIST
92835: LIST
92836: LIST
92837: LIST
92838: LIST
92839: LIST
92840: LIST
92841: LIST
92842: LIST
92843: LIST
92844: PUSH
92845: EMPTY
92846: LIST
92847: LIST
92848: ST_TO_ADDR
92849: GO 92852
92851: POP
// end else
92852: GO 93071
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
92854: LD_ADDR_VAR 0 1
92858: PUSH
92859: LD_INT 1
92861: PUSH
92862: LD_INT 2
92864: PUSH
92865: LD_INT 3
92867: PUSH
92868: LD_INT 4
92870: PUSH
92871: LD_INT 5
92873: PUSH
92874: LD_INT 6
92876: PUSH
92877: LD_INT 7
92879: PUSH
92880: LD_INT 8
92882: PUSH
92883: LD_INT 9
92885: PUSH
92886: LD_INT 10
92888: PUSH
92889: LD_INT 11
92891: PUSH
92892: LD_INT 12
92894: PUSH
92895: LD_INT 13
92897: PUSH
92898: LD_INT 14
92900: PUSH
92901: LD_INT 15
92903: PUSH
92904: LD_INT 16
92906: PUSH
92907: LD_INT 17
92909: PUSH
92910: LD_INT 18
92912: PUSH
92913: LD_INT 19
92915: PUSH
92916: LD_INT 20
92918: PUSH
92919: LD_INT 21
92921: PUSH
92922: LD_INT 22
92924: PUSH
92925: LD_INT 23
92927: PUSH
92928: LD_INT 24
92930: PUSH
92931: LD_INT 25
92933: PUSH
92934: LD_INT 26
92936: PUSH
92937: LD_INT 27
92939: PUSH
92940: LD_INT 28
92942: PUSH
92943: LD_INT 29
92945: PUSH
92946: LD_INT 30
92948: PUSH
92949: LD_INT 31
92951: PUSH
92952: LD_INT 32
92954: PUSH
92955: LD_INT 33
92957: PUSH
92958: LD_INT 34
92960: PUSH
92961: LD_INT 35
92963: PUSH
92964: LD_INT 36
92966: PUSH
92967: EMPTY
92968: LIST
92969: LIST
92970: LIST
92971: LIST
92972: LIST
92973: LIST
92974: LIST
92975: LIST
92976: LIST
92977: LIST
92978: LIST
92979: LIST
92980: LIST
92981: LIST
92982: LIST
92983: LIST
92984: LIST
92985: LIST
92986: LIST
92987: LIST
92988: LIST
92989: LIST
92990: LIST
92991: LIST
92992: LIST
92993: LIST
92994: LIST
92995: LIST
92996: LIST
92997: LIST
92998: LIST
92999: LIST
93000: LIST
93001: LIST
93002: LIST
93003: LIST
93004: PUSH
93005: LD_INT 101
93007: PUSH
93008: LD_INT 102
93010: PUSH
93011: LD_INT 103
93013: PUSH
93014: LD_INT 104
93016: PUSH
93017: LD_INT 105
93019: PUSH
93020: LD_INT 106
93022: PUSH
93023: LD_INT 107
93025: PUSH
93026: LD_INT 108
93028: PUSH
93029: LD_INT 109
93031: PUSH
93032: LD_INT 110
93034: PUSH
93035: LD_INT 111
93037: PUSH
93038: LD_INT 112
93040: PUSH
93041: LD_INT 113
93043: PUSH
93044: LD_INT 114
93046: PUSH
93047: LD_INT 115
93049: PUSH
93050: EMPTY
93051: LIST
93052: LIST
93053: LIST
93054: LIST
93055: LIST
93056: LIST
93057: LIST
93058: LIST
93059: LIST
93060: LIST
93061: LIST
93062: LIST
93063: LIST
93064: LIST
93065: LIST
93066: PUSH
93067: EMPTY
93068: LIST
93069: LIST
93070: ST_TO_ADDR
// if result then
93071: LD_VAR 0 1
93075: IFFALSE 93364
// begin normal :=  ;
93077: LD_ADDR_VAR 0 3
93081: PUSH
93082: LD_STRING 
93084: ST_TO_ADDR
// hardcore :=  ;
93085: LD_ADDR_VAR 0 4
93089: PUSH
93090: LD_STRING 
93092: ST_TO_ADDR
// for i = 1 to normalCounter do
93093: LD_ADDR_VAR 0 5
93097: PUSH
93098: DOUBLE
93099: LD_INT 1
93101: DEC
93102: ST_TO_ADDR
93103: LD_EXP 95
93107: PUSH
93108: FOR_TO
93109: IFFALSE 93210
// begin tmp := 0 ;
93111: LD_ADDR_VAR 0 2
93115: PUSH
93116: LD_STRING 0
93118: ST_TO_ADDR
// if result [ 1 ] then
93119: LD_VAR 0 1
93123: PUSH
93124: LD_INT 1
93126: ARRAY
93127: IFFALSE 93192
// if result [ 1 ] [ 1 ] = i then
93129: LD_VAR 0 1
93133: PUSH
93134: LD_INT 1
93136: ARRAY
93137: PUSH
93138: LD_INT 1
93140: ARRAY
93141: PUSH
93142: LD_VAR 0 5
93146: EQUAL
93147: IFFALSE 93192
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
93149: LD_ADDR_VAR 0 1
93153: PUSH
93154: LD_VAR 0 1
93158: PPUSH
93159: LD_INT 1
93161: PPUSH
93162: LD_VAR 0 1
93166: PUSH
93167: LD_INT 1
93169: ARRAY
93170: PPUSH
93171: LD_INT 1
93173: PPUSH
93174: CALL_OW 3
93178: PPUSH
93179: CALL_OW 1
93183: ST_TO_ADDR
// tmp := 1 ;
93184: LD_ADDR_VAR 0 2
93188: PUSH
93189: LD_STRING 1
93191: ST_TO_ADDR
// end ; normal := normal & tmp ;
93192: LD_ADDR_VAR 0 3
93196: PUSH
93197: LD_VAR 0 3
93201: PUSH
93202: LD_VAR 0 2
93206: STR
93207: ST_TO_ADDR
// end ;
93208: GO 93108
93210: POP
93211: POP
// for i = 1 to hardcoreCounter do
93212: LD_ADDR_VAR 0 5
93216: PUSH
93217: DOUBLE
93218: LD_INT 1
93220: DEC
93221: ST_TO_ADDR
93222: LD_EXP 96
93226: PUSH
93227: FOR_TO
93228: IFFALSE 93333
// begin tmp := 0 ;
93230: LD_ADDR_VAR 0 2
93234: PUSH
93235: LD_STRING 0
93237: ST_TO_ADDR
// if result [ 2 ] then
93238: LD_VAR 0 1
93242: PUSH
93243: LD_INT 2
93245: ARRAY
93246: IFFALSE 93315
// if result [ 2 ] [ 1 ] = 100 + i then
93248: LD_VAR 0 1
93252: PUSH
93253: LD_INT 2
93255: ARRAY
93256: PUSH
93257: LD_INT 1
93259: ARRAY
93260: PUSH
93261: LD_INT 100
93263: PUSH
93264: LD_VAR 0 5
93268: PLUS
93269: EQUAL
93270: IFFALSE 93315
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
93272: LD_ADDR_VAR 0 1
93276: PUSH
93277: LD_VAR 0 1
93281: PPUSH
93282: LD_INT 2
93284: PPUSH
93285: LD_VAR 0 1
93289: PUSH
93290: LD_INT 2
93292: ARRAY
93293: PPUSH
93294: LD_INT 1
93296: PPUSH
93297: CALL_OW 3
93301: PPUSH
93302: CALL_OW 1
93306: ST_TO_ADDR
// tmp := 1 ;
93307: LD_ADDR_VAR 0 2
93311: PUSH
93312: LD_STRING 1
93314: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
93315: LD_ADDR_VAR 0 4
93319: PUSH
93320: LD_VAR 0 4
93324: PUSH
93325: LD_VAR 0 2
93329: STR
93330: ST_TO_ADDR
// end ;
93331: GO 93227
93333: POP
93334: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
93335: LD_STRING getStreamItemsFromMission("
93337: PUSH
93338: LD_VAR 0 3
93342: STR
93343: PUSH
93344: LD_STRING ","
93346: STR
93347: PUSH
93348: LD_VAR 0 4
93352: STR
93353: PUSH
93354: LD_STRING ")
93356: STR
93357: PPUSH
93358: CALL_OW 559
// end else
93362: GO 93371
// ToLua ( getStreamItemsFromMission("","") ) ;
93364: LD_STRING getStreamItemsFromMission("","")
93366: PPUSH
93367: CALL_OW 559
// end ;
93371: LD_VAR 0 1
93375: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
93376: LD_EXP 94
93380: PUSH
93381: LD_EXP 99
93385: AND
93386: IFFALSE 93510
93388: GO 93390
93390: DISABLE
93391: LD_INT 0
93393: PPUSH
93394: PPUSH
// begin enable ;
93395: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
93396: LD_ADDR_VAR 0 2
93400: PUSH
93401: LD_INT 22
93403: PUSH
93404: LD_OWVAR 2
93408: PUSH
93409: EMPTY
93410: LIST
93411: LIST
93412: PUSH
93413: LD_INT 2
93415: PUSH
93416: LD_INT 34
93418: PUSH
93419: LD_INT 7
93421: PUSH
93422: EMPTY
93423: LIST
93424: LIST
93425: PUSH
93426: LD_INT 34
93428: PUSH
93429: LD_INT 45
93431: PUSH
93432: EMPTY
93433: LIST
93434: LIST
93435: PUSH
93436: LD_INT 34
93438: PUSH
93439: LD_INT 28
93441: PUSH
93442: EMPTY
93443: LIST
93444: LIST
93445: PUSH
93446: LD_INT 34
93448: PUSH
93449: LD_INT 47
93451: PUSH
93452: EMPTY
93453: LIST
93454: LIST
93455: PUSH
93456: EMPTY
93457: LIST
93458: LIST
93459: LIST
93460: LIST
93461: LIST
93462: PUSH
93463: EMPTY
93464: LIST
93465: LIST
93466: PPUSH
93467: CALL_OW 69
93471: ST_TO_ADDR
// if not tmp then
93472: LD_VAR 0 2
93476: NOT
93477: IFFALSE 93481
// exit ;
93479: GO 93510
// for i in tmp do
93481: LD_ADDR_VAR 0 1
93485: PUSH
93486: LD_VAR 0 2
93490: PUSH
93491: FOR_IN
93492: IFFALSE 93508
// begin SetLives ( i , 0 ) ;
93494: LD_VAR 0 1
93498: PPUSH
93499: LD_INT 0
93501: PPUSH
93502: CALL_OW 234
// end ;
93506: GO 93491
93508: POP
93509: POP
// end ;
93510: PPOPN 2
93512: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
93513: LD_EXP 94
93517: PUSH
93518: LD_EXP 100
93522: AND
93523: IFFALSE 93607
93525: GO 93527
93527: DISABLE
93528: LD_INT 0
93530: PPUSH
93531: PPUSH
// begin enable ;
93532: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
93533: LD_ADDR_VAR 0 2
93537: PUSH
93538: LD_INT 22
93540: PUSH
93541: LD_OWVAR 2
93545: PUSH
93546: EMPTY
93547: LIST
93548: LIST
93549: PUSH
93550: LD_INT 32
93552: PUSH
93553: LD_INT 3
93555: PUSH
93556: EMPTY
93557: LIST
93558: LIST
93559: PUSH
93560: EMPTY
93561: LIST
93562: LIST
93563: PPUSH
93564: CALL_OW 69
93568: ST_TO_ADDR
// if not tmp then
93569: LD_VAR 0 2
93573: NOT
93574: IFFALSE 93578
// exit ;
93576: GO 93607
// for i in tmp do
93578: LD_ADDR_VAR 0 1
93582: PUSH
93583: LD_VAR 0 2
93587: PUSH
93588: FOR_IN
93589: IFFALSE 93605
// begin SetLives ( i , 0 ) ;
93591: LD_VAR 0 1
93595: PPUSH
93596: LD_INT 0
93598: PPUSH
93599: CALL_OW 234
// end ;
93603: GO 93588
93605: POP
93606: POP
// end ;
93607: PPOPN 2
93609: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
93610: LD_EXP 94
93614: PUSH
93615: LD_EXP 97
93619: AND
93620: IFFALSE 93713
93622: GO 93624
93624: DISABLE
93625: LD_INT 0
93627: PPUSH
// begin enable ;
93628: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
93629: LD_ADDR_VAR 0 1
93633: PUSH
93634: LD_INT 22
93636: PUSH
93637: LD_OWVAR 2
93641: PUSH
93642: EMPTY
93643: LIST
93644: LIST
93645: PUSH
93646: LD_INT 2
93648: PUSH
93649: LD_INT 25
93651: PUSH
93652: LD_INT 5
93654: PUSH
93655: EMPTY
93656: LIST
93657: LIST
93658: PUSH
93659: LD_INT 25
93661: PUSH
93662: LD_INT 9
93664: PUSH
93665: EMPTY
93666: LIST
93667: LIST
93668: PUSH
93669: LD_INT 25
93671: PUSH
93672: LD_INT 8
93674: PUSH
93675: EMPTY
93676: LIST
93677: LIST
93678: PUSH
93679: EMPTY
93680: LIST
93681: LIST
93682: LIST
93683: LIST
93684: PUSH
93685: EMPTY
93686: LIST
93687: LIST
93688: PPUSH
93689: CALL_OW 69
93693: PUSH
93694: FOR_IN
93695: IFFALSE 93711
// begin SetClass ( i , 1 ) ;
93697: LD_VAR 0 1
93701: PPUSH
93702: LD_INT 1
93704: PPUSH
93705: CALL_OW 336
// end ;
93709: GO 93694
93711: POP
93712: POP
// end ;
93713: PPOPN 1
93715: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
93716: LD_EXP 94
93720: PUSH
93721: LD_EXP 98
93725: AND
93726: PUSH
93727: LD_OWVAR 65
93731: PUSH
93732: LD_INT 7
93734: LESS
93735: AND
93736: IFFALSE 93750
93738: GO 93740
93740: DISABLE
// begin enable ;
93741: ENABLE
// game_speed := 7 ;
93742: LD_ADDR_OWVAR 65
93746: PUSH
93747: LD_INT 7
93749: ST_TO_ADDR
// end ;
93750: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
93751: LD_EXP 94
93755: PUSH
93756: LD_EXP 101
93760: AND
93761: IFFALSE 93963
93763: GO 93765
93765: DISABLE
93766: LD_INT 0
93768: PPUSH
93769: PPUSH
93770: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
93771: LD_ADDR_VAR 0 3
93775: PUSH
93776: LD_INT 81
93778: PUSH
93779: LD_OWVAR 2
93783: PUSH
93784: EMPTY
93785: LIST
93786: LIST
93787: PUSH
93788: LD_INT 21
93790: PUSH
93791: LD_INT 1
93793: PUSH
93794: EMPTY
93795: LIST
93796: LIST
93797: PUSH
93798: EMPTY
93799: LIST
93800: LIST
93801: PPUSH
93802: CALL_OW 69
93806: ST_TO_ADDR
// if not tmp then
93807: LD_VAR 0 3
93811: NOT
93812: IFFALSE 93816
// exit ;
93814: GO 93963
// if tmp > 5 then
93816: LD_VAR 0 3
93820: PUSH
93821: LD_INT 5
93823: GREATER
93824: IFFALSE 93836
// k := 5 else
93826: LD_ADDR_VAR 0 2
93830: PUSH
93831: LD_INT 5
93833: ST_TO_ADDR
93834: GO 93846
// k := tmp ;
93836: LD_ADDR_VAR 0 2
93840: PUSH
93841: LD_VAR 0 3
93845: ST_TO_ADDR
// for i := 1 to k do
93846: LD_ADDR_VAR 0 1
93850: PUSH
93851: DOUBLE
93852: LD_INT 1
93854: DEC
93855: ST_TO_ADDR
93856: LD_VAR 0 2
93860: PUSH
93861: FOR_TO
93862: IFFALSE 93961
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
93864: LD_VAR 0 3
93868: PUSH
93869: LD_VAR 0 1
93873: ARRAY
93874: PPUSH
93875: LD_VAR 0 1
93879: PUSH
93880: LD_INT 4
93882: MOD
93883: PUSH
93884: LD_INT 1
93886: PLUS
93887: PPUSH
93888: CALL_OW 259
93892: PUSH
93893: LD_INT 10
93895: LESS
93896: IFFALSE 93959
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
93898: LD_VAR 0 3
93902: PUSH
93903: LD_VAR 0 1
93907: ARRAY
93908: PPUSH
93909: LD_VAR 0 1
93913: PUSH
93914: LD_INT 4
93916: MOD
93917: PUSH
93918: LD_INT 1
93920: PLUS
93921: PPUSH
93922: LD_VAR 0 3
93926: PUSH
93927: LD_VAR 0 1
93931: ARRAY
93932: PPUSH
93933: LD_VAR 0 1
93937: PUSH
93938: LD_INT 4
93940: MOD
93941: PUSH
93942: LD_INT 1
93944: PLUS
93945: PPUSH
93946: CALL_OW 259
93950: PUSH
93951: LD_INT 1
93953: PLUS
93954: PPUSH
93955: CALL_OW 237
93959: GO 93861
93961: POP
93962: POP
// end ;
93963: PPOPN 3
93965: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
93966: LD_EXP 94
93970: PUSH
93971: LD_EXP 102
93975: AND
93976: IFFALSE 93996
93978: GO 93980
93980: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
93981: LD_INT 4
93983: PPUSH
93984: LD_OWVAR 2
93988: PPUSH
93989: LD_INT 0
93991: PPUSH
93992: CALL_OW 324
93996: END
// every 0 0$1 trigger StreamModeActive and sShovel do
93997: LD_EXP 94
94001: PUSH
94002: LD_EXP 131
94006: AND
94007: IFFALSE 94027
94009: GO 94011
94011: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
94012: LD_INT 19
94014: PPUSH
94015: LD_OWVAR 2
94019: PPUSH
94020: LD_INT 0
94022: PPUSH
94023: CALL_OW 324
94027: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
94028: LD_EXP 94
94032: PUSH
94033: LD_EXP 103
94037: AND
94038: IFFALSE 94140
94040: GO 94042
94042: DISABLE
94043: LD_INT 0
94045: PPUSH
94046: PPUSH
// begin enable ;
94047: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
94048: LD_ADDR_VAR 0 2
94052: PUSH
94053: LD_INT 22
94055: PUSH
94056: LD_OWVAR 2
94060: PUSH
94061: EMPTY
94062: LIST
94063: LIST
94064: PUSH
94065: LD_INT 2
94067: PUSH
94068: LD_INT 34
94070: PUSH
94071: LD_INT 11
94073: PUSH
94074: EMPTY
94075: LIST
94076: LIST
94077: PUSH
94078: LD_INT 34
94080: PUSH
94081: LD_INT 30
94083: PUSH
94084: EMPTY
94085: LIST
94086: LIST
94087: PUSH
94088: EMPTY
94089: LIST
94090: LIST
94091: LIST
94092: PUSH
94093: EMPTY
94094: LIST
94095: LIST
94096: PPUSH
94097: CALL_OW 69
94101: ST_TO_ADDR
// if not tmp then
94102: LD_VAR 0 2
94106: NOT
94107: IFFALSE 94111
// exit ;
94109: GO 94140
// for i in tmp do
94111: LD_ADDR_VAR 0 1
94115: PUSH
94116: LD_VAR 0 2
94120: PUSH
94121: FOR_IN
94122: IFFALSE 94138
// begin SetLives ( i , 0 ) ;
94124: LD_VAR 0 1
94128: PPUSH
94129: LD_INT 0
94131: PPUSH
94132: CALL_OW 234
// end ;
94136: GO 94121
94138: POP
94139: POP
// end ;
94140: PPOPN 2
94142: END
// every 0 0$1 trigger StreamModeActive and sBunker do
94143: LD_EXP 94
94147: PUSH
94148: LD_EXP 104
94152: AND
94153: IFFALSE 94173
94155: GO 94157
94157: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
94158: LD_INT 32
94160: PPUSH
94161: LD_OWVAR 2
94165: PPUSH
94166: LD_INT 0
94168: PPUSH
94169: CALL_OW 324
94173: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
94174: LD_EXP 94
94178: PUSH
94179: LD_EXP 105
94183: AND
94184: IFFALSE 94365
94186: GO 94188
94188: DISABLE
94189: LD_INT 0
94191: PPUSH
94192: PPUSH
94193: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
94194: LD_ADDR_VAR 0 2
94198: PUSH
94199: LD_INT 22
94201: PUSH
94202: LD_OWVAR 2
94206: PUSH
94207: EMPTY
94208: LIST
94209: LIST
94210: PUSH
94211: LD_INT 33
94213: PUSH
94214: LD_INT 3
94216: PUSH
94217: EMPTY
94218: LIST
94219: LIST
94220: PUSH
94221: EMPTY
94222: LIST
94223: LIST
94224: PPUSH
94225: CALL_OW 69
94229: ST_TO_ADDR
// if not tmp then
94230: LD_VAR 0 2
94234: NOT
94235: IFFALSE 94239
// exit ;
94237: GO 94365
// side := 0 ;
94239: LD_ADDR_VAR 0 3
94243: PUSH
94244: LD_INT 0
94246: ST_TO_ADDR
// for i := 1 to 8 do
94247: LD_ADDR_VAR 0 1
94251: PUSH
94252: DOUBLE
94253: LD_INT 1
94255: DEC
94256: ST_TO_ADDR
94257: LD_INT 8
94259: PUSH
94260: FOR_TO
94261: IFFALSE 94309
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
94263: LD_OWVAR 2
94267: PUSH
94268: LD_VAR 0 1
94272: NONEQUAL
94273: PUSH
94274: LD_OWVAR 2
94278: PPUSH
94279: LD_VAR 0 1
94283: PPUSH
94284: CALL_OW 81
94288: PUSH
94289: LD_INT 2
94291: EQUAL
94292: AND
94293: IFFALSE 94307
// begin side := i ;
94295: LD_ADDR_VAR 0 3
94299: PUSH
94300: LD_VAR 0 1
94304: ST_TO_ADDR
// break ;
94305: GO 94309
// end ;
94307: GO 94260
94309: POP
94310: POP
// if not side then
94311: LD_VAR 0 3
94315: NOT
94316: IFFALSE 94320
// exit ;
94318: GO 94365
// for i := 1 to tmp do
94320: LD_ADDR_VAR 0 1
94324: PUSH
94325: DOUBLE
94326: LD_INT 1
94328: DEC
94329: ST_TO_ADDR
94330: LD_VAR 0 2
94334: PUSH
94335: FOR_TO
94336: IFFALSE 94363
// if Prob ( 60 ) then
94338: LD_INT 60
94340: PPUSH
94341: CALL_OW 13
94345: IFFALSE 94361
// SetSide ( i , side ) ;
94347: LD_VAR 0 1
94351: PPUSH
94352: LD_VAR 0 3
94356: PPUSH
94357: CALL_OW 235
94361: GO 94335
94363: POP
94364: POP
// end ;
94365: PPOPN 3
94367: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
94368: LD_EXP 94
94372: PUSH
94373: LD_EXP 107
94377: AND
94378: IFFALSE 94497
94380: GO 94382
94382: DISABLE
94383: LD_INT 0
94385: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
94386: LD_ADDR_VAR 0 1
94390: PUSH
94391: LD_INT 22
94393: PUSH
94394: LD_OWVAR 2
94398: PUSH
94399: EMPTY
94400: LIST
94401: LIST
94402: PUSH
94403: LD_INT 21
94405: PUSH
94406: LD_INT 1
94408: PUSH
94409: EMPTY
94410: LIST
94411: LIST
94412: PUSH
94413: LD_INT 3
94415: PUSH
94416: LD_INT 23
94418: PUSH
94419: LD_INT 0
94421: PUSH
94422: EMPTY
94423: LIST
94424: LIST
94425: PUSH
94426: EMPTY
94427: LIST
94428: LIST
94429: PUSH
94430: EMPTY
94431: LIST
94432: LIST
94433: LIST
94434: PPUSH
94435: CALL_OW 69
94439: PUSH
94440: FOR_IN
94441: IFFALSE 94495
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
94443: LD_VAR 0 1
94447: PPUSH
94448: CALL_OW 257
94452: PUSH
94453: LD_INT 1
94455: PUSH
94456: LD_INT 2
94458: PUSH
94459: LD_INT 3
94461: PUSH
94462: LD_INT 4
94464: PUSH
94465: EMPTY
94466: LIST
94467: LIST
94468: LIST
94469: LIST
94470: IN
94471: IFFALSE 94493
// SetClass ( un , rand ( 1 , 4 ) ) ;
94473: LD_VAR 0 1
94477: PPUSH
94478: LD_INT 1
94480: PPUSH
94481: LD_INT 4
94483: PPUSH
94484: CALL_OW 12
94488: PPUSH
94489: CALL_OW 336
94493: GO 94440
94495: POP
94496: POP
// end ;
94497: PPOPN 1
94499: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
94500: LD_EXP 94
94504: PUSH
94505: LD_EXP 106
94509: AND
94510: IFFALSE 94589
94512: GO 94514
94514: DISABLE
94515: LD_INT 0
94517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
94518: LD_ADDR_VAR 0 1
94522: PUSH
94523: LD_INT 22
94525: PUSH
94526: LD_OWVAR 2
94530: PUSH
94531: EMPTY
94532: LIST
94533: LIST
94534: PUSH
94535: LD_INT 21
94537: PUSH
94538: LD_INT 3
94540: PUSH
94541: EMPTY
94542: LIST
94543: LIST
94544: PUSH
94545: EMPTY
94546: LIST
94547: LIST
94548: PPUSH
94549: CALL_OW 69
94553: ST_TO_ADDR
// if not tmp then
94554: LD_VAR 0 1
94558: NOT
94559: IFFALSE 94563
// exit ;
94561: GO 94589
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
94563: LD_VAR 0 1
94567: PUSH
94568: LD_INT 1
94570: PPUSH
94571: LD_VAR 0 1
94575: PPUSH
94576: CALL_OW 12
94580: ARRAY
94581: PPUSH
94582: LD_INT 100
94584: PPUSH
94585: CALL_OW 234
// end ;
94589: PPOPN 1
94591: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
94592: LD_EXP 94
94596: PUSH
94597: LD_EXP 108
94601: AND
94602: IFFALSE 94700
94604: GO 94606
94606: DISABLE
94607: LD_INT 0
94609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
94610: LD_ADDR_VAR 0 1
94614: PUSH
94615: LD_INT 22
94617: PUSH
94618: LD_OWVAR 2
94622: PUSH
94623: EMPTY
94624: LIST
94625: LIST
94626: PUSH
94627: LD_INT 21
94629: PUSH
94630: LD_INT 1
94632: PUSH
94633: EMPTY
94634: LIST
94635: LIST
94636: PUSH
94637: EMPTY
94638: LIST
94639: LIST
94640: PPUSH
94641: CALL_OW 69
94645: ST_TO_ADDR
// if not tmp then
94646: LD_VAR 0 1
94650: NOT
94651: IFFALSE 94655
// exit ;
94653: GO 94700
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
94655: LD_VAR 0 1
94659: PUSH
94660: LD_INT 1
94662: PPUSH
94663: LD_VAR 0 1
94667: PPUSH
94668: CALL_OW 12
94672: ARRAY
94673: PPUSH
94674: LD_INT 1
94676: PPUSH
94677: LD_INT 4
94679: PPUSH
94680: CALL_OW 12
94684: PPUSH
94685: LD_INT 3000
94687: PPUSH
94688: LD_INT 9000
94690: PPUSH
94691: CALL_OW 12
94695: PPUSH
94696: CALL_OW 492
// end ;
94700: PPOPN 1
94702: END
// every 0 0$1 trigger StreamModeActive and sDepot do
94703: LD_EXP 94
94707: PUSH
94708: LD_EXP 109
94712: AND
94713: IFFALSE 94733
94715: GO 94717
94717: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
94718: LD_INT 1
94720: PPUSH
94721: LD_OWVAR 2
94725: PPUSH
94726: LD_INT 0
94728: PPUSH
94729: CALL_OW 324
94733: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
94734: LD_EXP 94
94738: PUSH
94739: LD_EXP 110
94743: AND
94744: IFFALSE 94827
94746: GO 94748
94748: DISABLE
94749: LD_INT 0
94751: PPUSH
94752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
94753: LD_ADDR_VAR 0 2
94757: PUSH
94758: LD_INT 22
94760: PUSH
94761: LD_OWVAR 2
94765: PUSH
94766: EMPTY
94767: LIST
94768: LIST
94769: PUSH
94770: LD_INT 21
94772: PUSH
94773: LD_INT 3
94775: PUSH
94776: EMPTY
94777: LIST
94778: LIST
94779: PUSH
94780: EMPTY
94781: LIST
94782: LIST
94783: PPUSH
94784: CALL_OW 69
94788: ST_TO_ADDR
// if not tmp then
94789: LD_VAR 0 2
94793: NOT
94794: IFFALSE 94798
// exit ;
94796: GO 94827
// for i in tmp do
94798: LD_ADDR_VAR 0 1
94802: PUSH
94803: LD_VAR 0 2
94807: PUSH
94808: FOR_IN
94809: IFFALSE 94825
// SetBLevel ( i , 10 ) ;
94811: LD_VAR 0 1
94815: PPUSH
94816: LD_INT 10
94818: PPUSH
94819: CALL_OW 241
94823: GO 94808
94825: POP
94826: POP
// end ;
94827: PPOPN 2
94829: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
94830: LD_EXP 94
94834: PUSH
94835: LD_EXP 111
94839: AND
94840: IFFALSE 94951
94842: GO 94844
94844: DISABLE
94845: LD_INT 0
94847: PPUSH
94848: PPUSH
94849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
94850: LD_ADDR_VAR 0 3
94854: PUSH
94855: LD_INT 22
94857: PUSH
94858: LD_OWVAR 2
94862: PUSH
94863: EMPTY
94864: LIST
94865: LIST
94866: PUSH
94867: LD_INT 25
94869: PUSH
94870: LD_INT 1
94872: PUSH
94873: EMPTY
94874: LIST
94875: LIST
94876: PUSH
94877: EMPTY
94878: LIST
94879: LIST
94880: PPUSH
94881: CALL_OW 69
94885: ST_TO_ADDR
// if not tmp then
94886: LD_VAR 0 3
94890: NOT
94891: IFFALSE 94895
// exit ;
94893: GO 94951
// un := tmp [ rand ( 1 , tmp ) ] ;
94895: LD_ADDR_VAR 0 2
94899: PUSH
94900: LD_VAR 0 3
94904: PUSH
94905: LD_INT 1
94907: PPUSH
94908: LD_VAR 0 3
94912: PPUSH
94913: CALL_OW 12
94917: ARRAY
94918: ST_TO_ADDR
// if Crawls ( un ) then
94919: LD_VAR 0 2
94923: PPUSH
94924: CALL_OW 318
94928: IFFALSE 94939
// ComWalk ( un ) ;
94930: LD_VAR 0 2
94934: PPUSH
94935: CALL_OW 138
// SetClass ( un , class_sniper ) ;
94939: LD_VAR 0 2
94943: PPUSH
94944: LD_INT 5
94946: PPUSH
94947: CALL_OW 336
// end ;
94951: PPOPN 3
94953: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
94954: LD_EXP 94
94958: PUSH
94959: LD_EXP 112
94963: AND
94964: PUSH
94965: LD_OWVAR 67
94969: PUSH
94970: LD_INT 3
94972: LESS
94973: AND
94974: IFFALSE 94993
94976: GO 94978
94978: DISABLE
// Difficulty := Difficulty + 1 ;
94979: LD_ADDR_OWVAR 67
94983: PUSH
94984: LD_OWVAR 67
94988: PUSH
94989: LD_INT 1
94991: PLUS
94992: ST_TO_ADDR
94993: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
94994: LD_EXP 94
94998: PUSH
94999: LD_EXP 113
95003: AND
95004: IFFALSE 95107
95006: GO 95008
95008: DISABLE
95009: LD_INT 0
95011: PPUSH
// begin for i := 1 to 5 do
95012: LD_ADDR_VAR 0 1
95016: PUSH
95017: DOUBLE
95018: LD_INT 1
95020: DEC
95021: ST_TO_ADDR
95022: LD_INT 5
95024: PUSH
95025: FOR_TO
95026: IFFALSE 95105
// begin uc_nation := nation_nature ;
95028: LD_ADDR_OWVAR 21
95032: PUSH
95033: LD_INT 0
95035: ST_TO_ADDR
// uc_side := 0 ;
95036: LD_ADDR_OWVAR 20
95040: PUSH
95041: LD_INT 0
95043: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
95044: LD_ADDR_OWVAR 29
95048: PUSH
95049: LD_INT 12
95051: PUSH
95052: LD_INT 12
95054: PUSH
95055: EMPTY
95056: LIST
95057: LIST
95058: ST_TO_ADDR
// hc_agressivity := 20 ;
95059: LD_ADDR_OWVAR 35
95063: PUSH
95064: LD_INT 20
95066: ST_TO_ADDR
// hc_class := class_tiger ;
95067: LD_ADDR_OWVAR 28
95071: PUSH
95072: LD_INT 14
95074: ST_TO_ADDR
// hc_gallery :=  ;
95075: LD_ADDR_OWVAR 33
95079: PUSH
95080: LD_STRING 
95082: ST_TO_ADDR
// hc_name :=  ;
95083: LD_ADDR_OWVAR 26
95087: PUSH
95088: LD_STRING 
95090: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
95091: CALL_OW 44
95095: PPUSH
95096: LD_INT 0
95098: PPUSH
95099: CALL_OW 51
// end ;
95103: GO 95025
95105: POP
95106: POP
// end ;
95107: PPOPN 1
95109: END
// every 0 0$1 trigger StreamModeActive and sBomb do
95110: LD_EXP 94
95114: PUSH
95115: LD_EXP 114
95119: AND
95120: IFFALSE 95129
95122: GO 95124
95124: DISABLE
// StreamSibBomb ;
95125: CALL 95130 0 0
95129: END
// export function StreamSibBomb ; var i , x , y ; begin
95130: LD_INT 0
95132: PPUSH
95133: PPUSH
95134: PPUSH
95135: PPUSH
// result := false ;
95136: LD_ADDR_VAR 0 1
95140: PUSH
95141: LD_INT 0
95143: ST_TO_ADDR
// for i := 1 to 16 do
95144: LD_ADDR_VAR 0 2
95148: PUSH
95149: DOUBLE
95150: LD_INT 1
95152: DEC
95153: ST_TO_ADDR
95154: LD_INT 16
95156: PUSH
95157: FOR_TO
95158: IFFALSE 95357
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
95160: LD_ADDR_VAR 0 3
95164: PUSH
95165: LD_INT 10
95167: PUSH
95168: LD_INT 20
95170: PUSH
95171: LD_INT 30
95173: PUSH
95174: LD_INT 40
95176: PUSH
95177: LD_INT 50
95179: PUSH
95180: LD_INT 60
95182: PUSH
95183: LD_INT 70
95185: PUSH
95186: LD_INT 80
95188: PUSH
95189: LD_INT 90
95191: PUSH
95192: LD_INT 100
95194: PUSH
95195: LD_INT 110
95197: PUSH
95198: LD_INT 120
95200: PUSH
95201: LD_INT 130
95203: PUSH
95204: LD_INT 140
95206: PUSH
95207: LD_INT 150
95209: PUSH
95210: EMPTY
95211: LIST
95212: LIST
95213: LIST
95214: LIST
95215: LIST
95216: LIST
95217: LIST
95218: LIST
95219: LIST
95220: LIST
95221: LIST
95222: LIST
95223: LIST
95224: LIST
95225: LIST
95226: PUSH
95227: LD_INT 1
95229: PPUSH
95230: LD_INT 15
95232: PPUSH
95233: CALL_OW 12
95237: ARRAY
95238: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
95239: LD_ADDR_VAR 0 4
95243: PUSH
95244: LD_INT 10
95246: PUSH
95247: LD_INT 20
95249: PUSH
95250: LD_INT 30
95252: PUSH
95253: LD_INT 40
95255: PUSH
95256: LD_INT 50
95258: PUSH
95259: LD_INT 60
95261: PUSH
95262: LD_INT 70
95264: PUSH
95265: LD_INT 80
95267: PUSH
95268: LD_INT 90
95270: PUSH
95271: LD_INT 100
95273: PUSH
95274: LD_INT 110
95276: PUSH
95277: LD_INT 120
95279: PUSH
95280: LD_INT 130
95282: PUSH
95283: LD_INT 140
95285: PUSH
95286: LD_INT 150
95288: PUSH
95289: EMPTY
95290: LIST
95291: LIST
95292: LIST
95293: LIST
95294: LIST
95295: LIST
95296: LIST
95297: LIST
95298: LIST
95299: LIST
95300: LIST
95301: LIST
95302: LIST
95303: LIST
95304: LIST
95305: PUSH
95306: LD_INT 1
95308: PPUSH
95309: LD_INT 15
95311: PPUSH
95312: CALL_OW 12
95316: ARRAY
95317: ST_TO_ADDR
// if ValidHex ( x , y ) then
95318: LD_VAR 0 3
95322: PPUSH
95323: LD_VAR 0 4
95327: PPUSH
95328: CALL_OW 488
95332: IFFALSE 95355
// begin result := [ x , y ] ;
95334: LD_ADDR_VAR 0 1
95338: PUSH
95339: LD_VAR 0 3
95343: PUSH
95344: LD_VAR 0 4
95348: PUSH
95349: EMPTY
95350: LIST
95351: LIST
95352: ST_TO_ADDR
// break ;
95353: GO 95357
// end ; end ;
95355: GO 95157
95357: POP
95358: POP
// if result then
95359: LD_VAR 0 1
95363: IFFALSE 95423
// begin ToLua ( playSibBomb() ) ;
95365: LD_STRING playSibBomb()
95367: PPUSH
95368: CALL_OW 559
// wait ( 0 0$14 ) ;
95372: LD_INT 490
95374: PPUSH
95375: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
95379: LD_VAR 0 1
95383: PUSH
95384: LD_INT 1
95386: ARRAY
95387: PPUSH
95388: LD_VAR 0 1
95392: PUSH
95393: LD_INT 2
95395: ARRAY
95396: PPUSH
95397: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
95401: LD_VAR 0 1
95405: PUSH
95406: LD_INT 1
95408: ARRAY
95409: PPUSH
95410: LD_VAR 0 1
95414: PUSH
95415: LD_INT 2
95417: ARRAY
95418: PPUSH
95419: CALL_OW 429
// end ; end ;
95423: LD_VAR 0 1
95427: RET
// every 0 0$1 trigger StreamModeActive and sReset do
95428: LD_EXP 94
95432: PUSH
95433: LD_EXP 116
95437: AND
95438: IFFALSE 95450
95440: GO 95442
95442: DISABLE
// YouLost (  ) ;
95443: LD_STRING 
95445: PPUSH
95446: CALL_OW 104
95450: END
// every 0 0$1 trigger StreamModeActive and sFog do
95451: LD_EXP 94
95455: PUSH
95456: LD_EXP 115
95460: AND
95461: IFFALSE 95475
95463: GO 95465
95465: DISABLE
// FogOff ( your_side ) ;
95466: LD_OWVAR 2
95470: PPUSH
95471: CALL_OW 344
95475: END
// every 0 0$1 trigger StreamModeActive and sSun do
95476: LD_EXP 94
95480: PUSH
95481: LD_EXP 117
95485: AND
95486: IFFALSE 95514
95488: GO 95490
95490: DISABLE
// begin solar_recharge_percent := 0 ;
95491: LD_ADDR_OWVAR 79
95495: PUSH
95496: LD_INT 0
95498: ST_TO_ADDR
// wait ( 5 5$00 ) ;
95499: LD_INT 10500
95501: PPUSH
95502: CALL_OW 67
// solar_recharge_percent := 100 ;
95506: LD_ADDR_OWVAR 79
95510: PUSH
95511: LD_INT 100
95513: ST_TO_ADDR
// end ;
95514: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
95515: LD_EXP 94
95519: PUSH
95520: LD_EXP 118
95524: AND
95525: IFFALSE 95764
95527: GO 95529
95529: DISABLE
95530: LD_INT 0
95532: PPUSH
95533: PPUSH
95534: PPUSH
// begin tmp := [ ] ;
95535: LD_ADDR_VAR 0 3
95539: PUSH
95540: EMPTY
95541: ST_TO_ADDR
// for i := 1 to 6 do
95542: LD_ADDR_VAR 0 1
95546: PUSH
95547: DOUBLE
95548: LD_INT 1
95550: DEC
95551: ST_TO_ADDR
95552: LD_INT 6
95554: PUSH
95555: FOR_TO
95556: IFFALSE 95661
// begin uc_nation := nation_nature ;
95558: LD_ADDR_OWVAR 21
95562: PUSH
95563: LD_INT 0
95565: ST_TO_ADDR
// uc_side := 0 ;
95566: LD_ADDR_OWVAR 20
95570: PUSH
95571: LD_INT 0
95573: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
95574: LD_ADDR_OWVAR 29
95578: PUSH
95579: LD_INT 12
95581: PUSH
95582: LD_INT 12
95584: PUSH
95585: EMPTY
95586: LIST
95587: LIST
95588: ST_TO_ADDR
// hc_agressivity := 20 ;
95589: LD_ADDR_OWVAR 35
95593: PUSH
95594: LD_INT 20
95596: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
95597: LD_ADDR_OWVAR 28
95601: PUSH
95602: LD_INT 17
95604: ST_TO_ADDR
// hc_gallery :=  ;
95605: LD_ADDR_OWVAR 33
95609: PUSH
95610: LD_STRING 
95612: ST_TO_ADDR
// hc_name :=  ;
95613: LD_ADDR_OWVAR 26
95617: PUSH
95618: LD_STRING 
95620: ST_TO_ADDR
// un := CreateHuman ;
95621: LD_ADDR_VAR 0 2
95625: PUSH
95626: CALL_OW 44
95630: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
95631: LD_VAR 0 2
95635: PPUSH
95636: LD_INT 1
95638: PPUSH
95639: CALL_OW 51
// tmp := tmp ^ un ;
95643: LD_ADDR_VAR 0 3
95647: PUSH
95648: LD_VAR 0 3
95652: PUSH
95653: LD_VAR 0 2
95657: ADD
95658: ST_TO_ADDR
// end ;
95659: GO 95555
95661: POP
95662: POP
// repeat wait ( 0 0$1 ) ;
95663: LD_INT 35
95665: PPUSH
95666: CALL_OW 67
// for un in tmp do
95670: LD_ADDR_VAR 0 2
95674: PUSH
95675: LD_VAR 0 3
95679: PUSH
95680: FOR_IN
95681: IFFALSE 95755
// begin if IsDead ( un ) then
95683: LD_VAR 0 2
95687: PPUSH
95688: CALL_OW 301
95692: IFFALSE 95712
// begin tmp := tmp diff un ;
95694: LD_ADDR_VAR 0 3
95698: PUSH
95699: LD_VAR 0 3
95703: PUSH
95704: LD_VAR 0 2
95708: DIFF
95709: ST_TO_ADDR
// continue ;
95710: GO 95680
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
95712: LD_VAR 0 2
95716: PPUSH
95717: LD_INT 3
95719: PUSH
95720: LD_INT 22
95722: PUSH
95723: LD_INT 0
95725: PUSH
95726: EMPTY
95727: LIST
95728: LIST
95729: PUSH
95730: EMPTY
95731: LIST
95732: LIST
95733: PPUSH
95734: CALL_OW 69
95738: PPUSH
95739: LD_VAR 0 2
95743: PPUSH
95744: CALL_OW 74
95748: PPUSH
95749: CALL_OW 115
// end ;
95753: GO 95680
95755: POP
95756: POP
// until not tmp ;
95757: LD_VAR 0 3
95761: NOT
95762: IFFALSE 95663
// end ;
95764: PPOPN 3
95766: END
// every 0 0$1 trigger StreamModeActive and sTroll do
95767: LD_EXP 94
95771: PUSH
95772: LD_EXP 119
95776: AND
95777: IFFALSE 95831
95779: GO 95781
95781: DISABLE
// begin ToLua ( displayTroll(); ) ;
95782: LD_STRING displayTroll();
95784: PPUSH
95785: CALL_OW 559
// wait ( 3 3$00 ) ;
95789: LD_INT 6300
95791: PPUSH
95792: CALL_OW 67
// ToLua ( hideTroll(); ) ;
95796: LD_STRING hideTroll();
95798: PPUSH
95799: CALL_OW 559
// wait ( 1 1$00 ) ;
95803: LD_INT 2100
95805: PPUSH
95806: CALL_OW 67
// ToLua ( displayTroll(); ) ;
95810: LD_STRING displayTroll();
95812: PPUSH
95813: CALL_OW 559
// wait ( 1 1$00 ) ;
95817: LD_INT 2100
95819: PPUSH
95820: CALL_OW 67
// ToLua ( hideTroll(); ) ;
95824: LD_STRING hideTroll();
95826: PPUSH
95827: CALL_OW 559
// end ;
95831: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
95832: LD_EXP 94
95836: PUSH
95837: LD_EXP 120
95841: AND
95842: IFFALSE 95905
95844: GO 95846
95846: DISABLE
95847: LD_INT 0
95849: PPUSH
// begin p := 0 ;
95850: LD_ADDR_VAR 0 1
95854: PUSH
95855: LD_INT 0
95857: ST_TO_ADDR
// repeat game_speed := 1 ;
95858: LD_ADDR_OWVAR 65
95862: PUSH
95863: LD_INT 1
95865: ST_TO_ADDR
// wait ( 0 0$1 ) ;
95866: LD_INT 35
95868: PPUSH
95869: CALL_OW 67
// p := p + 1 ;
95873: LD_ADDR_VAR 0 1
95877: PUSH
95878: LD_VAR 0 1
95882: PUSH
95883: LD_INT 1
95885: PLUS
95886: ST_TO_ADDR
// until p >= 60 ;
95887: LD_VAR 0 1
95891: PUSH
95892: LD_INT 60
95894: GREATEREQUAL
95895: IFFALSE 95858
// game_speed := 4 ;
95897: LD_ADDR_OWVAR 65
95901: PUSH
95902: LD_INT 4
95904: ST_TO_ADDR
// end ;
95905: PPOPN 1
95907: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
95908: LD_EXP 94
95912: PUSH
95913: LD_EXP 121
95917: AND
95918: IFFALSE 96064
95920: GO 95922
95922: DISABLE
95923: LD_INT 0
95925: PPUSH
95926: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
95927: LD_ADDR_VAR 0 1
95931: PUSH
95932: LD_INT 22
95934: PUSH
95935: LD_OWVAR 2
95939: PUSH
95940: EMPTY
95941: LIST
95942: LIST
95943: PUSH
95944: LD_INT 2
95946: PUSH
95947: LD_INT 30
95949: PUSH
95950: LD_INT 0
95952: PUSH
95953: EMPTY
95954: LIST
95955: LIST
95956: PUSH
95957: LD_INT 30
95959: PUSH
95960: LD_INT 1
95962: PUSH
95963: EMPTY
95964: LIST
95965: LIST
95966: PUSH
95967: EMPTY
95968: LIST
95969: LIST
95970: LIST
95971: PUSH
95972: EMPTY
95973: LIST
95974: LIST
95975: PPUSH
95976: CALL_OW 69
95980: ST_TO_ADDR
// if not depot then
95981: LD_VAR 0 1
95985: NOT
95986: IFFALSE 95990
// exit ;
95988: GO 96064
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
95990: LD_ADDR_VAR 0 2
95994: PUSH
95995: LD_VAR 0 1
95999: PUSH
96000: LD_INT 1
96002: PPUSH
96003: LD_VAR 0 1
96007: PPUSH
96008: CALL_OW 12
96012: ARRAY
96013: PPUSH
96014: CALL_OW 274
96018: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
96019: LD_VAR 0 2
96023: PPUSH
96024: LD_INT 1
96026: PPUSH
96027: LD_INT 0
96029: PPUSH
96030: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
96034: LD_VAR 0 2
96038: PPUSH
96039: LD_INT 2
96041: PPUSH
96042: LD_INT 0
96044: PPUSH
96045: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
96049: LD_VAR 0 2
96053: PPUSH
96054: LD_INT 3
96056: PPUSH
96057: LD_INT 0
96059: PPUSH
96060: CALL_OW 277
// end ;
96064: PPOPN 2
96066: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
96067: LD_EXP 94
96071: PUSH
96072: LD_EXP 122
96076: AND
96077: IFFALSE 96174
96079: GO 96081
96081: DISABLE
96082: LD_INT 0
96084: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
96085: LD_ADDR_VAR 0 1
96089: PUSH
96090: LD_INT 22
96092: PUSH
96093: LD_OWVAR 2
96097: PUSH
96098: EMPTY
96099: LIST
96100: LIST
96101: PUSH
96102: LD_INT 21
96104: PUSH
96105: LD_INT 1
96107: PUSH
96108: EMPTY
96109: LIST
96110: LIST
96111: PUSH
96112: LD_INT 3
96114: PUSH
96115: LD_INT 23
96117: PUSH
96118: LD_INT 0
96120: PUSH
96121: EMPTY
96122: LIST
96123: LIST
96124: PUSH
96125: EMPTY
96126: LIST
96127: LIST
96128: PUSH
96129: EMPTY
96130: LIST
96131: LIST
96132: LIST
96133: PPUSH
96134: CALL_OW 69
96138: ST_TO_ADDR
// if not tmp then
96139: LD_VAR 0 1
96143: NOT
96144: IFFALSE 96148
// exit ;
96146: GO 96174
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
96148: LD_VAR 0 1
96152: PUSH
96153: LD_INT 1
96155: PPUSH
96156: LD_VAR 0 1
96160: PPUSH
96161: CALL_OW 12
96165: ARRAY
96166: PPUSH
96167: LD_INT 200
96169: PPUSH
96170: CALL_OW 234
// end ;
96174: PPOPN 1
96176: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
96177: LD_EXP 94
96181: PUSH
96182: LD_EXP 123
96186: AND
96187: IFFALSE 96266
96189: GO 96191
96191: DISABLE
96192: LD_INT 0
96194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
96195: LD_ADDR_VAR 0 1
96199: PUSH
96200: LD_INT 22
96202: PUSH
96203: LD_OWVAR 2
96207: PUSH
96208: EMPTY
96209: LIST
96210: LIST
96211: PUSH
96212: LD_INT 21
96214: PUSH
96215: LD_INT 2
96217: PUSH
96218: EMPTY
96219: LIST
96220: LIST
96221: PUSH
96222: EMPTY
96223: LIST
96224: LIST
96225: PPUSH
96226: CALL_OW 69
96230: ST_TO_ADDR
// if not tmp then
96231: LD_VAR 0 1
96235: NOT
96236: IFFALSE 96240
// exit ;
96238: GO 96266
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
96240: LD_VAR 0 1
96244: PUSH
96245: LD_INT 1
96247: PPUSH
96248: LD_VAR 0 1
96252: PPUSH
96253: CALL_OW 12
96257: ARRAY
96258: PPUSH
96259: LD_INT 60
96261: PPUSH
96262: CALL_OW 234
// end ;
96266: PPOPN 1
96268: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
96269: LD_EXP 94
96273: PUSH
96274: LD_EXP 124
96278: AND
96279: IFFALSE 96378
96281: GO 96283
96283: DISABLE
96284: LD_INT 0
96286: PPUSH
96287: PPUSH
// begin enable ;
96288: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
96289: LD_ADDR_VAR 0 1
96293: PUSH
96294: LD_INT 22
96296: PUSH
96297: LD_OWVAR 2
96301: PUSH
96302: EMPTY
96303: LIST
96304: LIST
96305: PUSH
96306: LD_INT 61
96308: PUSH
96309: EMPTY
96310: LIST
96311: PUSH
96312: LD_INT 33
96314: PUSH
96315: LD_INT 2
96317: PUSH
96318: EMPTY
96319: LIST
96320: LIST
96321: PUSH
96322: EMPTY
96323: LIST
96324: LIST
96325: LIST
96326: PPUSH
96327: CALL_OW 69
96331: ST_TO_ADDR
// if not tmp then
96332: LD_VAR 0 1
96336: NOT
96337: IFFALSE 96341
// exit ;
96339: GO 96378
// for i in tmp do
96341: LD_ADDR_VAR 0 2
96345: PUSH
96346: LD_VAR 0 1
96350: PUSH
96351: FOR_IN
96352: IFFALSE 96376
// if IsControledBy ( i ) then
96354: LD_VAR 0 2
96358: PPUSH
96359: CALL_OW 312
96363: IFFALSE 96374
// ComUnlink ( i ) ;
96365: LD_VAR 0 2
96369: PPUSH
96370: CALL_OW 136
96374: GO 96351
96376: POP
96377: POP
// end ;
96378: PPOPN 2
96380: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
96381: LD_EXP 94
96385: PUSH
96386: LD_EXP 125
96390: AND
96391: IFFALSE 96531
96393: GO 96395
96395: DISABLE
96396: LD_INT 0
96398: PPUSH
96399: PPUSH
// begin ToLua ( displayPowell(); ) ;
96400: LD_STRING displayPowell();
96402: PPUSH
96403: CALL_OW 559
// uc_side := 0 ;
96407: LD_ADDR_OWVAR 20
96411: PUSH
96412: LD_INT 0
96414: ST_TO_ADDR
// uc_nation := 2 ;
96415: LD_ADDR_OWVAR 21
96419: PUSH
96420: LD_INT 2
96422: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
96423: LD_ADDR_OWVAR 37
96427: PUSH
96428: LD_INT 14
96430: ST_TO_ADDR
// vc_engine := engine_siberite ;
96431: LD_ADDR_OWVAR 39
96435: PUSH
96436: LD_INT 3
96438: ST_TO_ADDR
// vc_control := control_apeman ;
96439: LD_ADDR_OWVAR 38
96443: PUSH
96444: LD_INT 5
96446: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
96447: LD_ADDR_OWVAR 40
96451: PUSH
96452: LD_INT 29
96454: ST_TO_ADDR
// un := CreateVehicle ;
96455: LD_ADDR_VAR 0 2
96459: PUSH
96460: CALL_OW 45
96464: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
96465: LD_VAR 0 2
96469: PPUSH
96470: LD_INT 1
96472: PPUSH
96473: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
96477: LD_INT 35
96479: PPUSH
96480: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
96484: LD_VAR 0 2
96488: PPUSH
96489: LD_INT 22
96491: PUSH
96492: LD_OWVAR 2
96496: PUSH
96497: EMPTY
96498: LIST
96499: LIST
96500: PPUSH
96501: CALL_OW 69
96505: PPUSH
96506: LD_VAR 0 2
96510: PPUSH
96511: CALL_OW 74
96515: PPUSH
96516: CALL_OW 115
// until IsDead ( un ) ;
96520: LD_VAR 0 2
96524: PPUSH
96525: CALL_OW 301
96529: IFFALSE 96477
// end ;
96531: PPOPN 2
96533: END
// every 0 0$1 trigger StreamModeActive and sStu do
96534: LD_EXP 94
96538: PUSH
96539: LD_EXP 133
96543: AND
96544: IFFALSE 96560
96546: GO 96548
96548: DISABLE
// begin ToLua ( displayStucuk(); ) ;
96549: LD_STRING displayStucuk();
96551: PPUSH
96552: CALL_OW 559
// ResetFog ;
96556: CALL_OW 335
// end ;
96560: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
96561: LD_EXP 94
96565: PUSH
96566: LD_EXP 126
96570: AND
96571: IFFALSE 96712
96573: GO 96575
96575: DISABLE
96576: LD_INT 0
96578: PPUSH
96579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
96580: LD_ADDR_VAR 0 2
96584: PUSH
96585: LD_INT 22
96587: PUSH
96588: LD_OWVAR 2
96592: PUSH
96593: EMPTY
96594: LIST
96595: LIST
96596: PUSH
96597: LD_INT 21
96599: PUSH
96600: LD_INT 1
96602: PUSH
96603: EMPTY
96604: LIST
96605: LIST
96606: PUSH
96607: EMPTY
96608: LIST
96609: LIST
96610: PPUSH
96611: CALL_OW 69
96615: ST_TO_ADDR
// if not tmp then
96616: LD_VAR 0 2
96620: NOT
96621: IFFALSE 96625
// exit ;
96623: GO 96712
// un := tmp [ rand ( 1 , tmp ) ] ;
96625: LD_ADDR_VAR 0 1
96629: PUSH
96630: LD_VAR 0 2
96634: PUSH
96635: LD_INT 1
96637: PPUSH
96638: LD_VAR 0 2
96642: PPUSH
96643: CALL_OW 12
96647: ARRAY
96648: ST_TO_ADDR
// SetSide ( un , 0 ) ;
96649: LD_VAR 0 1
96653: PPUSH
96654: LD_INT 0
96656: PPUSH
96657: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
96661: LD_VAR 0 1
96665: PPUSH
96666: LD_OWVAR 3
96670: PUSH
96671: LD_VAR 0 1
96675: DIFF
96676: PPUSH
96677: LD_VAR 0 1
96681: PPUSH
96682: CALL_OW 74
96686: PPUSH
96687: CALL_OW 115
// wait ( 0 0$20 ) ;
96691: LD_INT 700
96693: PPUSH
96694: CALL_OW 67
// SetSide ( un , your_side ) ;
96698: LD_VAR 0 1
96702: PPUSH
96703: LD_OWVAR 2
96707: PPUSH
96708: CALL_OW 235
// end ;
96712: PPOPN 2
96714: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
96715: LD_EXP 94
96719: PUSH
96720: LD_EXP 127
96724: AND
96725: IFFALSE 96831
96727: GO 96729
96729: DISABLE
96730: LD_INT 0
96732: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
96733: LD_ADDR_VAR 0 1
96737: PUSH
96738: LD_INT 22
96740: PUSH
96741: LD_OWVAR 2
96745: PUSH
96746: EMPTY
96747: LIST
96748: LIST
96749: PUSH
96750: LD_INT 2
96752: PUSH
96753: LD_INT 30
96755: PUSH
96756: LD_INT 0
96758: PUSH
96759: EMPTY
96760: LIST
96761: LIST
96762: PUSH
96763: LD_INT 30
96765: PUSH
96766: LD_INT 1
96768: PUSH
96769: EMPTY
96770: LIST
96771: LIST
96772: PUSH
96773: EMPTY
96774: LIST
96775: LIST
96776: LIST
96777: PUSH
96778: EMPTY
96779: LIST
96780: LIST
96781: PPUSH
96782: CALL_OW 69
96786: ST_TO_ADDR
// if not depot then
96787: LD_VAR 0 1
96791: NOT
96792: IFFALSE 96796
// exit ;
96794: GO 96831
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
96796: LD_VAR 0 1
96800: PUSH
96801: LD_INT 1
96803: ARRAY
96804: PPUSH
96805: CALL_OW 250
96809: PPUSH
96810: LD_VAR 0 1
96814: PUSH
96815: LD_INT 1
96817: ARRAY
96818: PPUSH
96819: CALL_OW 251
96823: PPUSH
96824: LD_INT 70
96826: PPUSH
96827: CALL_OW 495
// end ;
96831: PPOPN 1
96833: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
96834: LD_EXP 94
96838: PUSH
96839: LD_EXP 128
96843: AND
96844: IFFALSE 97055
96846: GO 96848
96848: DISABLE
96849: LD_INT 0
96851: PPUSH
96852: PPUSH
96853: PPUSH
96854: PPUSH
96855: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
96856: LD_ADDR_VAR 0 5
96860: PUSH
96861: LD_INT 22
96863: PUSH
96864: LD_OWVAR 2
96868: PUSH
96869: EMPTY
96870: LIST
96871: LIST
96872: PUSH
96873: LD_INT 21
96875: PUSH
96876: LD_INT 1
96878: PUSH
96879: EMPTY
96880: LIST
96881: LIST
96882: PUSH
96883: EMPTY
96884: LIST
96885: LIST
96886: PPUSH
96887: CALL_OW 69
96891: ST_TO_ADDR
// if not tmp then
96892: LD_VAR 0 5
96896: NOT
96897: IFFALSE 96901
// exit ;
96899: GO 97055
// for i in tmp do
96901: LD_ADDR_VAR 0 1
96905: PUSH
96906: LD_VAR 0 5
96910: PUSH
96911: FOR_IN
96912: IFFALSE 97053
// begin d := rand ( 0 , 5 ) ;
96914: LD_ADDR_VAR 0 4
96918: PUSH
96919: LD_INT 0
96921: PPUSH
96922: LD_INT 5
96924: PPUSH
96925: CALL_OW 12
96929: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
96930: LD_ADDR_VAR 0 2
96934: PUSH
96935: LD_VAR 0 1
96939: PPUSH
96940: CALL_OW 250
96944: PPUSH
96945: LD_VAR 0 4
96949: PPUSH
96950: LD_INT 3
96952: PPUSH
96953: LD_INT 12
96955: PPUSH
96956: CALL_OW 12
96960: PPUSH
96961: CALL_OW 272
96965: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
96966: LD_ADDR_VAR 0 3
96970: PUSH
96971: LD_VAR 0 1
96975: PPUSH
96976: CALL_OW 251
96980: PPUSH
96981: LD_VAR 0 4
96985: PPUSH
96986: LD_INT 3
96988: PPUSH
96989: LD_INT 12
96991: PPUSH
96992: CALL_OW 12
96996: PPUSH
96997: CALL_OW 273
97001: ST_TO_ADDR
// if ValidHex ( x , y ) then
97002: LD_VAR 0 2
97006: PPUSH
97007: LD_VAR 0 3
97011: PPUSH
97012: CALL_OW 488
97016: IFFALSE 97051
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
97018: LD_VAR 0 1
97022: PPUSH
97023: LD_VAR 0 2
97027: PPUSH
97028: LD_VAR 0 3
97032: PPUSH
97033: LD_INT 3
97035: PPUSH
97036: LD_INT 6
97038: PPUSH
97039: CALL_OW 12
97043: PPUSH
97044: LD_INT 1
97046: PPUSH
97047: CALL_OW 483
// end ;
97051: GO 96911
97053: POP
97054: POP
// end ;
97055: PPOPN 5
97057: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
97058: LD_EXP 94
97062: PUSH
97063: LD_EXP 129
97067: AND
97068: IFFALSE 97162
97070: GO 97072
97072: DISABLE
97073: LD_INT 0
97075: PPUSH
97076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
97077: LD_ADDR_VAR 0 2
97081: PUSH
97082: LD_INT 22
97084: PUSH
97085: LD_OWVAR 2
97089: PUSH
97090: EMPTY
97091: LIST
97092: LIST
97093: PUSH
97094: LD_INT 32
97096: PUSH
97097: LD_INT 1
97099: PUSH
97100: EMPTY
97101: LIST
97102: LIST
97103: PUSH
97104: LD_INT 21
97106: PUSH
97107: LD_INT 2
97109: PUSH
97110: EMPTY
97111: LIST
97112: LIST
97113: PUSH
97114: EMPTY
97115: LIST
97116: LIST
97117: LIST
97118: PPUSH
97119: CALL_OW 69
97123: ST_TO_ADDR
// if not tmp then
97124: LD_VAR 0 2
97128: NOT
97129: IFFALSE 97133
// exit ;
97131: GO 97162
// for i in tmp do
97133: LD_ADDR_VAR 0 1
97137: PUSH
97138: LD_VAR 0 2
97142: PUSH
97143: FOR_IN
97144: IFFALSE 97160
// SetFuel ( i , 0 ) ;
97146: LD_VAR 0 1
97150: PPUSH
97151: LD_INT 0
97153: PPUSH
97154: CALL_OW 240
97158: GO 97143
97160: POP
97161: POP
// end ;
97162: PPOPN 2
97164: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
97165: LD_EXP 94
97169: PUSH
97170: LD_EXP 130
97174: AND
97175: IFFALSE 97241
97177: GO 97179
97179: DISABLE
97180: LD_INT 0
97182: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
97183: LD_ADDR_VAR 0 1
97187: PUSH
97188: LD_INT 22
97190: PUSH
97191: LD_OWVAR 2
97195: PUSH
97196: EMPTY
97197: LIST
97198: LIST
97199: PUSH
97200: LD_INT 30
97202: PUSH
97203: LD_INT 29
97205: PUSH
97206: EMPTY
97207: LIST
97208: LIST
97209: PUSH
97210: EMPTY
97211: LIST
97212: LIST
97213: PPUSH
97214: CALL_OW 69
97218: ST_TO_ADDR
// if not tmp then
97219: LD_VAR 0 1
97223: NOT
97224: IFFALSE 97228
// exit ;
97226: GO 97241
// DestroyUnit ( tmp [ 1 ] ) ;
97228: LD_VAR 0 1
97232: PUSH
97233: LD_INT 1
97235: ARRAY
97236: PPUSH
97237: CALL_OW 65
// end ;
97241: PPOPN 1
97243: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
97244: LD_EXP 94
97248: PUSH
97249: LD_EXP 132
97253: AND
97254: IFFALSE 97383
97256: GO 97258
97258: DISABLE
97259: LD_INT 0
97261: PPUSH
// begin uc_side := 0 ;
97262: LD_ADDR_OWVAR 20
97266: PUSH
97267: LD_INT 0
97269: ST_TO_ADDR
// uc_nation := nation_arabian ;
97270: LD_ADDR_OWVAR 21
97274: PUSH
97275: LD_INT 2
97277: ST_TO_ADDR
// hc_gallery :=  ;
97278: LD_ADDR_OWVAR 33
97282: PUSH
97283: LD_STRING 
97285: ST_TO_ADDR
// hc_name :=  ;
97286: LD_ADDR_OWVAR 26
97290: PUSH
97291: LD_STRING 
97293: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
97294: LD_INT 1
97296: PPUSH
97297: LD_INT 11
97299: PPUSH
97300: LD_INT 10
97302: PPUSH
97303: CALL_OW 380
// un := CreateHuman ;
97307: LD_ADDR_VAR 0 1
97311: PUSH
97312: CALL_OW 44
97316: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
97317: LD_VAR 0 1
97321: PPUSH
97322: LD_INT 1
97324: PPUSH
97325: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
97329: LD_INT 35
97331: PPUSH
97332: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
97336: LD_VAR 0 1
97340: PPUSH
97341: LD_INT 22
97343: PUSH
97344: LD_OWVAR 2
97348: PUSH
97349: EMPTY
97350: LIST
97351: LIST
97352: PPUSH
97353: CALL_OW 69
97357: PPUSH
97358: LD_VAR 0 1
97362: PPUSH
97363: CALL_OW 74
97367: PPUSH
97368: CALL_OW 115
// until IsDead ( un ) ;
97372: LD_VAR 0 1
97376: PPUSH
97377: CALL_OW 301
97381: IFFALSE 97329
// end ;
97383: PPOPN 1
97385: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
97386: LD_EXP 94
97390: PUSH
97391: LD_EXP 134
97395: AND
97396: IFFALSE 97408
97398: GO 97400
97400: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
97401: LD_STRING earthquake(getX(game), 0, 32)
97403: PPUSH
97404: CALL_OW 559
97408: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
97409: LD_EXP 94
97413: PUSH
97414: LD_EXP 135
97418: AND
97419: IFFALSE 97510
97421: GO 97423
97423: DISABLE
97424: LD_INT 0
97426: PPUSH
// begin enable ;
97427: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
97428: LD_ADDR_VAR 0 1
97432: PUSH
97433: LD_INT 22
97435: PUSH
97436: LD_OWVAR 2
97440: PUSH
97441: EMPTY
97442: LIST
97443: LIST
97444: PUSH
97445: LD_INT 21
97447: PUSH
97448: LD_INT 2
97450: PUSH
97451: EMPTY
97452: LIST
97453: LIST
97454: PUSH
97455: LD_INT 33
97457: PUSH
97458: LD_INT 3
97460: PUSH
97461: EMPTY
97462: LIST
97463: LIST
97464: PUSH
97465: EMPTY
97466: LIST
97467: LIST
97468: LIST
97469: PPUSH
97470: CALL_OW 69
97474: ST_TO_ADDR
// if not tmp then
97475: LD_VAR 0 1
97479: NOT
97480: IFFALSE 97484
// exit ;
97482: GO 97510
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
97484: LD_VAR 0 1
97488: PUSH
97489: LD_INT 1
97491: PPUSH
97492: LD_VAR 0 1
97496: PPUSH
97497: CALL_OW 12
97501: ARRAY
97502: PPUSH
97503: LD_INT 1
97505: PPUSH
97506: CALL_OW 234
// end ;
97510: PPOPN 1
97512: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
97513: LD_EXP 94
97517: PUSH
97518: LD_EXP 136
97522: AND
97523: IFFALSE 97664
97525: GO 97527
97527: DISABLE
97528: LD_INT 0
97530: PPUSH
97531: PPUSH
97532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
97533: LD_ADDR_VAR 0 3
97537: PUSH
97538: LD_INT 22
97540: PUSH
97541: LD_OWVAR 2
97545: PUSH
97546: EMPTY
97547: LIST
97548: LIST
97549: PUSH
97550: LD_INT 25
97552: PUSH
97553: LD_INT 1
97555: PUSH
97556: EMPTY
97557: LIST
97558: LIST
97559: PUSH
97560: EMPTY
97561: LIST
97562: LIST
97563: PPUSH
97564: CALL_OW 69
97568: ST_TO_ADDR
// if not tmp then
97569: LD_VAR 0 3
97573: NOT
97574: IFFALSE 97578
// exit ;
97576: GO 97664
// un := tmp [ rand ( 1 , tmp ) ] ;
97578: LD_ADDR_VAR 0 2
97582: PUSH
97583: LD_VAR 0 3
97587: PUSH
97588: LD_INT 1
97590: PPUSH
97591: LD_VAR 0 3
97595: PPUSH
97596: CALL_OW 12
97600: ARRAY
97601: ST_TO_ADDR
// if Crawls ( un ) then
97602: LD_VAR 0 2
97606: PPUSH
97607: CALL_OW 318
97611: IFFALSE 97622
// ComWalk ( un ) ;
97613: LD_VAR 0 2
97617: PPUSH
97618: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
97622: LD_VAR 0 2
97626: PPUSH
97627: LD_INT 9
97629: PPUSH
97630: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
97634: LD_INT 28
97636: PPUSH
97637: LD_OWVAR 2
97641: PPUSH
97642: LD_INT 2
97644: PPUSH
97645: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
97649: LD_INT 29
97651: PPUSH
97652: LD_OWVAR 2
97656: PPUSH
97657: LD_INT 2
97659: PPUSH
97660: CALL_OW 322
// end ;
97664: PPOPN 3
97666: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
97667: LD_EXP 94
97671: PUSH
97672: LD_EXP 137
97676: AND
97677: IFFALSE 97788
97679: GO 97681
97681: DISABLE
97682: LD_INT 0
97684: PPUSH
97685: PPUSH
97686: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
97687: LD_ADDR_VAR 0 3
97691: PUSH
97692: LD_INT 22
97694: PUSH
97695: LD_OWVAR 2
97699: PUSH
97700: EMPTY
97701: LIST
97702: LIST
97703: PUSH
97704: LD_INT 25
97706: PUSH
97707: LD_INT 1
97709: PUSH
97710: EMPTY
97711: LIST
97712: LIST
97713: PUSH
97714: EMPTY
97715: LIST
97716: LIST
97717: PPUSH
97718: CALL_OW 69
97722: ST_TO_ADDR
// if not tmp then
97723: LD_VAR 0 3
97727: NOT
97728: IFFALSE 97732
// exit ;
97730: GO 97788
// un := tmp [ rand ( 1 , tmp ) ] ;
97732: LD_ADDR_VAR 0 2
97736: PUSH
97737: LD_VAR 0 3
97741: PUSH
97742: LD_INT 1
97744: PPUSH
97745: LD_VAR 0 3
97749: PPUSH
97750: CALL_OW 12
97754: ARRAY
97755: ST_TO_ADDR
// if Crawls ( un ) then
97756: LD_VAR 0 2
97760: PPUSH
97761: CALL_OW 318
97765: IFFALSE 97776
// ComWalk ( un ) ;
97767: LD_VAR 0 2
97771: PPUSH
97772: CALL_OW 138
// SetClass ( un , class_mortar ) ;
97776: LD_VAR 0 2
97780: PPUSH
97781: LD_INT 8
97783: PPUSH
97784: CALL_OW 336
// end ;
97788: PPOPN 3
97790: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
97791: LD_EXP 94
97795: PUSH
97796: LD_EXP 138
97800: AND
97801: IFFALSE 97945
97803: GO 97805
97805: DISABLE
97806: LD_INT 0
97808: PPUSH
97809: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
97810: LD_ADDR_VAR 0 2
97814: PUSH
97815: LD_INT 22
97817: PUSH
97818: LD_OWVAR 2
97822: PUSH
97823: EMPTY
97824: LIST
97825: LIST
97826: PUSH
97827: LD_INT 21
97829: PUSH
97830: LD_INT 2
97832: PUSH
97833: EMPTY
97834: LIST
97835: LIST
97836: PUSH
97837: LD_INT 2
97839: PUSH
97840: LD_INT 34
97842: PUSH
97843: LD_INT 12
97845: PUSH
97846: EMPTY
97847: LIST
97848: LIST
97849: PUSH
97850: LD_INT 34
97852: PUSH
97853: LD_INT 51
97855: PUSH
97856: EMPTY
97857: LIST
97858: LIST
97859: PUSH
97860: LD_INT 34
97862: PUSH
97863: LD_INT 32
97865: PUSH
97866: EMPTY
97867: LIST
97868: LIST
97869: PUSH
97870: EMPTY
97871: LIST
97872: LIST
97873: LIST
97874: LIST
97875: PUSH
97876: EMPTY
97877: LIST
97878: LIST
97879: LIST
97880: PPUSH
97881: CALL_OW 69
97885: ST_TO_ADDR
// if not tmp then
97886: LD_VAR 0 2
97890: NOT
97891: IFFALSE 97895
// exit ;
97893: GO 97945
// for i in tmp do
97895: LD_ADDR_VAR 0 1
97899: PUSH
97900: LD_VAR 0 2
97904: PUSH
97905: FOR_IN
97906: IFFALSE 97943
// if GetCargo ( i , mat_artifact ) = 0 then
97908: LD_VAR 0 1
97912: PPUSH
97913: LD_INT 4
97915: PPUSH
97916: CALL_OW 289
97920: PUSH
97921: LD_INT 0
97923: EQUAL
97924: IFFALSE 97941
// SetCargo ( i , mat_siberit , 100 ) ;
97926: LD_VAR 0 1
97930: PPUSH
97931: LD_INT 3
97933: PPUSH
97934: LD_INT 100
97936: PPUSH
97937: CALL_OW 290
97941: GO 97905
97943: POP
97944: POP
// end ;
97945: PPOPN 2
97947: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
97948: LD_EXP 94
97952: PUSH
97953: LD_EXP 139
97957: AND
97958: IFFALSE 98141
97960: GO 97962
97962: DISABLE
97963: LD_INT 0
97965: PPUSH
97966: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
97967: LD_ADDR_VAR 0 2
97971: PUSH
97972: LD_INT 22
97974: PUSH
97975: LD_OWVAR 2
97979: PUSH
97980: EMPTY
97981: LIST
97982: LIST
97983: PPUSH
97984: CALL_OW 69
97988: ST_TO_ADDR
// if not tmp then
97989: LD_VAR 0 2
97993: NOT
97994: IFFALSE 97998
// exit ;
97996: GO 98141
// for i := 1 to 2 do
97998: LD_ADDR_VAR 0 1
98002: PUSH
98003: DOUBLE
98004: LD_INT 1
98006: DEC
98007: ST_TO_ADDR
98008: LD_INT 2
98010: PUSH
98011: FOR_TO
98012: IFFALSE 98139
// begin uc_side := your_side ;
98014: LD_ADDR_OWVAR 20
98018: PUSH
98019: LD_OWVAR 2
98023: ST_TO_ADDR
// uc_nation := nation_american ;
98024: LD_ADDR_OWVAR 21
98028: PUSH
98029: LD_INT 1
98031: ST_TO_ADDR
// vc_chassis := us_morphling ;
98032: LD_ADDR_OWVAR 37
98036: PUSH
98037: LD_INT 5
98039: ST_TO_ADDR
// vc_engine := engine_siberite ;
98040: LD_ADDR_OWVAR 39
98044: PUSH
98045: LD_INT 3
98047: ST_TO_ADDR
// vc_control := control_computer ;
98048: LD_ADDR_OWVAR 38
98052: PUSH
98053: LD_INT 3
98055: ST_TO_ADDR
// vc_weapon := us_double_laser ;
98056: LD_ADDR_OWVAR 40
98060: PUSH
98061: LD_INT 10
98063: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
98064: LD_VAR 0 2
98068: PUSH
98069: LD_INT 1
98071: ARRAY
98072: PPUSH
98073: CALL_OW 310
98077: NOT
98078: IFFALSE 98125
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
98080: CALL_OW 45
98084: PPUSH
98085: LD_VAR 0 2
98089: PUSH
98090: LD_INT 1
98092: ARRAY
98093: PPUSH
98094: CALL_OW 250
98098: PPUSH
98099: LD_VAR 0 2
98103: PUSH
98104: LD_INT 1
98106: ARRAY
98107: PPUSH
98108: CALL_OW 251
98112: PPUSH
98113: LD_INT 12
98115: PPUSH
98116: LD_INT 1
98118: PPUSH
98119: CALL_OW 50
98123: GO 98137
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
98125: CALL_OW 45
98129: PPUSH
98130: LD_INT 1
98132: PPUSH
98133: CALL_OW 51
// end ;
98137: GO 98011
98139: POP
98140: POP
// end ;
98141: PPOPN 2
98143: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
98144: LD_EXP 94
98148: PUSH
98149: LD_EXP 140
98153: AND
98154: IFFALSE 98376
98156: GO 98158
98158: DISABLE
98159: LD_INT 0
98161: PPUSH
98162: PPUSH
98163: PPUSH
98164: PPUSH
98165: PPUSH
98166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
98167: LD_ADDR_VAR 0 6
98171: PUSH
98172: LD_INT 22
98174: PUSH
98175: LD_OWVAR 2
98179: PUSH
98180: EMPTY
98181: LIST
98182: LIST
98183: PUSH
98184: LD_INT 21
98186: PUSH
98187: LD_INT 1
98189: PUSH
98190: EMPTY
98191: LIST
98192: LIST
98193: PUSH
98194: LD_INT 3
98196: PUSH
98197: LD_INT 23
98199: PUSH
98200: LD_INT 0
98202: PUSH
98203: EMPTY
98204: LIST
98205: LIST
98206: PUSH
98207: EMPTY
98208: LIST
98209: LIST
98210: PUSH
98211: EMPTY
98212: LIST
98213: LIST
98214: LIST
98215: PPUSH
98216: CALL_OW 69
98220: ST_TO_ADDR
// if not tmp then
98221: LD_VAR 0 6
98225: NOT
98226: IFFALSE 98230
// exit ;
98228: GO 98376
// s1 := rand ( 1 , 4 ) ;
98230: LD_ADDR_VAR 0 2
98234: PUSH
98235: LD_INT 1
98237: PPUSH
98238: LD_INT 4
98240: PPUSH
98241: CALL_OW 12
98245: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
98246: LD_ADDR_VAR 0 4
98250: PUSH
98251: LD_VAR 0 6
98255: PUSH
98256: LD_INT 1
98258: ARRAY
98259: PPUSH
98260: LD_VAR 0 2
98264: PPUSH
98265: CALL_OW 259
98269: ST_TO_ADDR
// if s1 = 1 then
98270: LD_VAR 0 2
98274: PUSH
98275: LD_INT 1
98277: EQUAL
98278: IFFALSE 98298
// s2 := rand ( 2 , 4 ) else
98280: LD_ADDR_VAR 0 3
98284: PUSH
98285: LD_INT 2
98287: PPUSH
98288: LD_INT 4
98290: PPUSH
98291: CALL_OW 12
98295: ST_TO_ADDR
98296: GO 98306
// s2 := 1 ;
98298: LD_ADDR_VAR 0 3
98302: PUSH
98303: LD_INT 1
98305: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
98306: LD_ADDR_VAR 0 5
98310: PUSH
98311: LD_VAR 0 6
98315: PUSH
98316: LD_INT 1
98318: ARRAY
98319: PPUSH
98320: LD_VAR 0 3
98324: PPUSH
98325: CALL_OW 259
98329: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
98330: LD_VAR 0 6
98334: PUSH
98335: LD_INT 1
98337: ARRAY
98338: PPUSH
98339: LD_VAR 0 2
98343: PPUSH
98344: LD_VAR 0 5
98348: PPUSH
98349: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
98353: LD_VAR 0 6
98357: PUSH
98358: LD_INT 1
98360: ARRAY
98361: PPUSH
98362: LD_VAR 0 3
98366: PPUSH
98367: LD_VAR 0 4
98371: PPUSH
98372: CALL_OW 237
// end ;
98376: PPOPN 6
98378: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
98379: LD_EXP 94
98383: PUSH
98384: LD_EXP 141
98388: AND
98389: IFFALSE 98468
98391: GO 98393
98393: DISABLE
98394: LD_INT 0
98396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
98397: LD_ADDR_VAR 0 1
98401: PUSH
98402: LD_INT 22
98404: PUSH
98405: LD_OWVAR 2
98409: PUSH
98410: EMPTY
98411: LIST
98412: LIST
98413: PUSH
98414: LD_INT 30
98416: PUSH
98417: LD_INT 3
98419: PUSH
98420: EMPTY
98421: LIST
98422: LIST
98423: PUSH
98424: EMPTY
98425: LIST
98426: LIST
98427: PPUSH
98428: CALL_OW 69
98432: ST_TO_ADDR
// if not tmp then
98433: LD_VAR 0 1
98437: NOT
98438: IFFALSE 98442
// exit ;
98440: GO 98468
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
98442: LD_VAR 0 1
98446: PUSH
98447: LD_INT 1
98449: PPUSH
98450: LD_VAR 0 1
98454: PPUSH
98455: CALL_OW 12
98459: ARRAY
98460: PPUSH
98461: LD_INT 1
98463: PPUSH
98464: CALL_OW 234
// end ;
98468: PPOPN 1
98470: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
98471: LD_EXP 94
98475: PUSH
98476: LD_EXP 142
98480: AND
98481: IFFALSE 98593
98483: GO 98485
98485: DISABLE
98486: LD_INT 0
98488: PPUSH
98489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
98490: LD_ADDR_VAR 0 2
98494: PUSH
98495: LD_INT 22
98497: PUSH
98498: LD_OWVAR 2
98502: PUSH
98503: EMPTY
98504: LIST
98505: LIST
98506: PUSH
98507: LD_INT 2
98509: PUSH
98510: LD_INT 30
98512: PUSH
98513: LD_INT 27
98515: PUSH
98516: EMPTY
98517: LIST
98518: LIST
98519: PUSH
98520: LD_INT 30
98522: PUSH
98523: LD_INT 26
98525: PUSH
98526: EMPTY
98527: LIST
98528: LIST
98529: PUSH
98530: LD_INT 30
98532: PUSH
98533: LD_INT 28
98535: PUSH
98536: EMPTY
98537: LIST
98538: LIST
98539: PUSH
98540: EMPTY
98541: LIST
98542: LIST
98543: LIST
98544: LIST
98545: PUSH
98546: EMPTY
98547: LIST
98548: LIST
98549: PPUSH
98550: CALL_OW 69
98554: ST_TO_ADDR
// if not tmp then
98555: LD_VAR 0 2
98559: NOT
98560: IFFALSE 98564
// exit ;
98562: GO 98593
// for i in tmp do
98564: LD_ADDR_VAR 0 1
98568: PUSH
98569: LD_VAR 0 2
98573: PUSH
98574: FOR_IN
98575: IFFALSE 98591
// SetLives ( i , 1 ) ;
98577: LD_VAR 0 1
98581: PPUSH
98582: LD_INT 1
98584: PPUSH
98585: CALL_OW 234
98589: GO 98574
98591: POP
98592: POP
// end ;
98593: PPOPN 2
98595: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
98596: LD_EXP 94
98600: PUSH
98601: LD_EXP 143
98605: AND
98606: IFFALSE 98880
98608: GO 98610
98610: DISABLE
98611: LD_INT 0
98613: PPUSH
98614: PPUSH
98615: PPUSH
// begin i := rand ( 1 , 7 ) ;
98616: LD_ADDR_VAR 0 1
98620: PUSH
98621: LD_INT 1
98623: PPUSH
98624: LD_INT 7
98626: PPUSH
98627: CALL_OW 12
98631: ST_TO_ADDR
// case i of 1 :
98632: LD_VAR 0 1
98636: PUSH
98637: LD_INT 1
98639: DOUBLE
98640: EQUAL
98641: IFTRUE 98645
98643: GO 98655
98645: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
98646: LD_STRING earthquake(getX(game), 0, 32)
98648: PPUSH
98649: CALL_OW 559
98653: GO 98880
98655: LD_INT 2
98657: DOUBLE
98658: EQUAL
98659: IFTRUE 98663
98661: GO 98677
98663: POP
// begin ToLua ( displayStucuk(); ) ;
98664: LD_STRING displayStucuk();
98666: PPUSH
98667: CALL_OW 559
// ResetFog ;
98671: CALL_OW 335
// end ; 3 :
98675: GO 98880
98677: LD_INT 3
98679: DOUBLE
98680: EQUAL
98681: IFTRUE 98685
98683: GO 98789
98685: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
98686: LD_ADDR_VAR 0 2
98690: PUSH
98691: LD_INT 22
98693: PUSH
98694: LD_OWVAR 2
98698: PUSH
98699: EMPTY
98700: LIST
98701: LIST
98702: PUSH
98703: LD_INT 25
98705: PUSH
98706: LD_INT 1
98708: PUSH
98709: EMPTY
98710: LIST
98711: LIST
98712: PUSH
98713: EMPTY
98714: LIST
98715: LIST
98716: PPUSH
98717: CALL_OW 69
98721: ST_TO_ADDR
// if not tmp then
98722: LD_VAR 0 2
98726: NOT
98727: IFFALSE 98731
// exit ;
98729: GO 98880
// un := tmp [ rand ( 1 , tmp ) ] ;
98731: LD_ADDR_VAR 0 3
98735: PUSH
98736: LD_VAR 0 2
98740: PUSH
98741: LD_INT 1
98743: PPUSH
98744: LD_VAR 0 2
98748: PPUSH
98749: CALL_OW 12
98753: ARRAY
98754: ST_TO_ADDR
// if Crawls ( un ) then
98755: LD_VAR 0 3
98759: PPUSH
98760: CALL_OW 318
98764: IFFALSE 98775
// ComWalk ( un ) ;
98766: LD_VAR 0 3
98770: PPUSH
98771: CALL_OW 138
// SetClass ( un , class_mortar ) ;
98775: LD_VAR 0 3
98779: PPUSH
98780: LD_INT 8
98782: PPUSH
98783: CALL_OW 336
// end ; 4 :
98787: GO 98880
98789: LD_INT 4
98791: DOUBLE
98792: EQUAL
98793: IFTRUE 98797
98795: GO 98858
98797: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
98798: LD_ADDR_VAR 0 2
98802: PUSH
98803: LD_INT 22
98805: PUSH
98806: LD_OWVAR 2
98810: PUSH
98811: EMPTY
98812: LIST
98813: LIST
98814: PUSH
98815: LD_INT 30
98817: PUSH
98818: LD_INT 29
98820: PUSH
98821: EMPTY
98822: LIST
98823: LIST
98824: PUSH
98825: EMPTY
98826: LIST
98827: LIST
98828: PPUSH
98829: CALL_OW 69
98833: ST_TO_ADDR
// if not tmp then
98834: LD_VAR 0 2
98838: NOT
98839: IFFALSE 98843
// exit ;
98841: GO 98880
// DestroyUnit ( tmp [ 1 ] ) ;
98843: LD_VAR 0 2
98847: PUSH
98848: LD_INT 1
98850: ARRAY
98851: PPUSH
98852: CALL_OW 65
// end ; 5 .. 7 :
98856: GO 98880
98858: LD_INT 5
98860: DOUBLE
98861: GREATEREQUAL
98862: IFFALSE 98870
98864: LD_INT 7
98866: DOUBLE
98867: LESSEQUAL
98868: IFTRUE 98872
98870: GO 98879
98872: POP
// StreamSibBomb ; end ;
98873: CALL 95130 0 0
98877: GO 98880
98879: POP
// end ;
98880: PPOPN 3
98882: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
98883: LD_EXP 94
98887: PUSH
98888: LD_EXP 144
98892: AND
98893: IFFALSE 99049
98895: GO 98897
98897: DISABLE
98898: LD_INT 0
98900: PPUSH
98901: PPUSH
98902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
98903: LD_ADDR_VAR 0 2
98907: PUSH
98908: LD_INT 81
98910: PUSH
98911: LD_OWVAR 2
98915: PUSH
98916: EMPTY
98917: LIST
98918: LIST
98919: PUSH
98920: LD_INT 2
98922: PUSH
98923: LD_INT 21
98925: PUSH
98926: LD_INT 1
98928: PUSH
98929: EMPTY
98930: LIST
98931: LIST
98932: PUSH
98933: LD_INT 21
98935: PUSH
98936: LD_INT 2
98938: PUSH
98939: EMPTY
98940: LIST
98941: LIST
98942: PUSH
98943: EMPTY
98944: LIST
98945: LIST
98946: LIST
98947: PUSH
98948: EMPTY
98949: LIST
98950: LIST
98951: PPUSH
98952: CALL_OW 69
98956: ST_TO_ADDR
// if not tmp then
98957: LD_VAR 0 2
98961: NOT
98962: IFFALSE 98966
// exit ;
98964: GO 99049
// p := 0 ;
98966: LD_ADDR_VAR 0 3
98970: PUSH
98971: LD_INT 0
98973: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
98974: LD_INT 35
98976: PPUSH
98977: CALL_OW 67
// p := p + 1 ;
98981: LD_ADDR_VAR 0 3
98985: PUSH
98986: LD_VAR 0 3
98990: PUSH
98991: LD_INT 1
98993: PLUS
98994: ST_TO_ADDR
// for i in tmp do
98995: LD_ADDR_VAR 0 1
98999: PUSH
99000: LD_VAR 0 2
99004: PUSH
99005: FOR_IN
99006: IFFALSE 99037
// if GetLives ( i ) < 1000 then
99008: LD_VAR 0 1
99012: PPUSH
99013: CALL_OW 256
99017: PUSH
99018: LD_INT 1000
99020: LESS
99021: IFFALSE 99035
// SetLives ( i , 1000 ) ;
99023: LD_VAR 0 1
99027: PPUSH
99028: LD_INT 1000
99030: PPUSH
99031: CALL_OW 234
99035: GO 99005
99037: POP
99038: POP
// until p > 20 ;
99039: LD_VAR 0 3
99043: PUSH
99044: LD_INT 20
99046: GREATER
99047: IFFALSE 98974
// end ;
99049: PPOPN 3
99051: END
// every 0 0$1 trigger StreamModeActive and sTime do
99052: LD_EXP 94
99056: PUSH
99057: LD_EXP 145
99061: AND
99062: IFFALSE 99097
99064: GO 99066
99066: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
99067: LD_INT 28
99069: PPUSH
99070: LD_OWVAR 2
99074: PPUSH
99075: LD_INT 2
99077: PPUSH
99078: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
99082: LD_INT 30
99084: PPUSH
99085: LD_OWVAR 2
99089: PPUSH
99090: LD_INT 2
99092: PPUSH
99093: CALL_OW 322
// end ;
99097: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
99098: LD_EXP 94
99102: PUSH
99103: LD_EXP 146
99107: AND
99108: IFFALSE 99229
99110: GO 99112
99112: DISABLE
99113: LD_INT 0
99115: PPUSH
99116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
99117: LD_ADDR_VAR 0 2
99121: PUSH
99122: LD_INT 22
99124: PUSH
99125: LD_OWVAR 2
99129: PUSH
99130: EMPTY
99131: LIST
99132: LIST
99133: PUSH
99134: LD_INT 21
99136: PUSH
99137: LD_INT 1
99139: PUSH
99140: EMPTY
99141: LIST
99142: LIST
99143: PUSH
99144: LD_INT 3
99146: PUSH
99147: LD_INT 23
99149: PUSH
99150: LD_INT 0
99152: PUSH
99153: EMPTY
99154: LIST
99155: LIST
99156: PUSH
99157: EMPTY
99158: LIST
99159: LIST
99160: PUSH
99161: EMPTY
99162: LIST
99163: LIST
99164: LIST
99165: PPUSH
99166: CALL_OW 69
99170: ST_TO_ADDR
// if not tmp then
99171: LD_VAR 0 2
99175: NOT
99176: IFFALSE 99180
// exit ;
99178: GO 99229
// for i in tmp do
99180: LD_ADDR_VAR 0 1
99184: PUSH
99185: LD_VAR 0 2
99189: PUSH
99190: FOR_IN
99191: IFFALSE 99227
// begin if Crawls ( i ) then
99193: LD_VAR 0 1
99197: PPUSH
99198: CALL_OW 318
99202: IFFALSE 99213
// ComWalk ( i ) ;
99204: LD_VAR 0 1
99208: PPUSH
99209: CALL_OW 138
// SetClass ( i , 2 ) ;
99213: LD_VAR 0 1
99217: PPUSH
99218: LD_INT 2
99220: PPUSH
99221: CALL_OW 336
// end ;
99225: GO 99190
99227: POP
99228: POP
// end ;
99229: PPOPN 2
99231: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
99232: LD_EXP 94
99236: PUSH
99237: LD_EXP 147
99241: AND
99242: IFFALSE 99523
99244: GO 99246
99246: DISABLE
99247: LD_INT 0
99249: PPUSH
99250: PPUSH
99251: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
99252: LD_OWVAR 2
99256: PPUSH
99257: LD_INT 9
99259: PPUSH
99260: LD_INT 1
99262: PPUSH
99263: LD_INT 1
99265: PPUSH
99266: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
99270: LD_INT 9
99272: PPUSH
99273: LD_OWVAR 2
99277: PPUSH
99278: CALL_OW 343
// uc_side := 9 ;
99282: LD_ADDR_OWVAR 20
99286: PUSH
99287: LD_INT 9
99289: ST_TO_ADDR
// uc_nation := 2 ;
99290: LD_ADDR_OWVAR 21
99294: PUSH
99295: LD_INT 2
99297: ST_TO_ADDR
// hc_name := Dark Warrior ;
99298: LD_ADDR_OWVAR 26
99302: PUSH
99303: LD_STRING Dark Warrior
99305: ST_TO_ADDR
// hc_gallery :=  ;
99306: LD_ADDR_OWVAR 33
99310: PUSH
99311: LD_STRING 
99313: ST_TO_ADDR
// hc_noskilllimit := true ;
99314: LD_ADDR_OWVAR 76
99318: PUSH
99319: LD_INT 1
99321: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
99322: LD_ADDR_OWVAR 31
99326: PUSH
99327: LD_INT 30
99329: PUSH
99330: LD_INT 30
99332: PUSH
99333: LD_INT 30
99335: PUSH
99336: LD_INT 30
99338: PUSH
99339: EMPTY
99340: LIST
99341: LIST
99342: LIST
99343: LIST
99344: ST_TO_ADDR
// un := CreateHuman ;
99345: LD_ADDR_VAR 0 3
99349: PUSH
99350: CALL_OW 44
99354: ST_TO_ADDR
// hc_noskilllimit := false ;
99355: LD_ADDR_OWVAR 76
99359: PUSH
99360: LD_INT 0
99362: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
99363: LD_VAR 0 3
99367: PPUSH
99368: LD_INT 1
99370: PPUSH
99371: CALL_OW 51
// p := 0 ;
99375: LD_ADDR_VAR 0 2
99379: PUSH
99380: LD_INT 0
99382: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
99383: LD_INT 35
99385: PPUSH
99386: CALL_OW 67
// p := p + 1 ;
99390: LD_ADDR_VAR 0 2
99394: PUSH
99395: LD_VAR 0 2
99399: PUSH
99400: LD_INT 1
99402: PLUS
99403: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
99404: LD_VAR 0 3
99408: PPUSH
99409: CALL_OW 256
99413: PUSH
99414: LD_INT 1000
99416: LESS
99417: IFFALSE 99431
// SetLives ( un , 1000 ) ;
99419: LD_VAR 0 3
99423: PPUSH
99424: LD_INT 1000
99426: PPUSH
99427: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
99431: LD_VAR 0 3
99435: PPUSH
99436: LD_INT 81
99438: PUSH
99439: LD_OWVAR 2
99443: PUSH
99444: EMPTY
99445: LIST
99446: LIST
99447: PUSH
99448: LD_INT 91
99450: PUSH
99451: LD_VAR 0 3
99455: PUSH
99456: LD_INT 30
99458: PUSH
99459: EMPTY
99460: LIST
99461: LIST
99462: LIST
99463: PUSH
99464: EMPTY
99465: LIST
99466: LIST
99467: PPUSH
99468: CALL_OW 69
99472: PPUSH
99473: LD_VAR 0 3
99477: PPUSH
99478: CALL_OW 74
99482: PPUSH
99483: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
99487: LD_VAR 0 2
99491: PUSH
99492: LD_INT 60
99494: GREATER
99495: PUSH
99496: LD_VAR 0 3
99500: PPUSH
99501: CALL_OW 301
99505: OR
99506: IFFALSE 99383
// if un then
99508: LD_VAR 0 3
99512: IFFALSE 99523
// RemoveUnit ( un ) ;
99514: LD_VAR 0 3
99518: PPUSH
99519: CALL_OW 64
// end ;
99523: PPOPN 3
99525: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
99526: LD_INT 0
99528: PPUSH
// case cmd of 301 :
99529: LD_VAR 0 1
99533: PUSH
99534: LD_INT 301
99536: DOUBLE
99537: EQUAL
99538: IFTRUE 99542
99540: GO 99574
99542: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
99543: LD_VAR 0 6
99547: PPUSH
99548: LD_VAR 0 7
99552: PPUSH
99553: LD_VAR 0 8
99557: PPUSH
99558: LD_VAR 0 4
99562: PPUSH
99563: LD_VAR 0 5
99567: PPUSH
99568: CALL 100775 0 5
99572: GO 99695
99574: LD_INT 302
99576: DOUBLE
99577: EQUAL
99578: IFTRUE 99582
99580: GO 99619
99582: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
99583: LD_VAR 0 6
99587: PPUSH
99588: LD_VAR 0 7
99592: PPUSH
99593: LD_VAR 0 8
99597: PPUSH
99598: LD_VAR 0 9
99602: PPUSH
99603: LD_VAR 0 4
99607: PPUSH
99608: LD_VAR 0 5
99612: PPUSH
99613: CALL 100866 0 6
99617: GO 99695
99619: LD_INT 303
99621: DOUBLE
99622: EQUAL
99623: IFTRUE 99627
99625: GO 99664
99627: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
99628: LD_VAR 0 6
99632: PPUSH
99633: LD_VAR 0 7
99637: PPUSH
99638: LD_VAR 0 8
99642: PPUSH
99643: LD_VAR 0 9
99647: PPUSH
99648: LD_VAR 0 4
99652: PPUSH
99653: LD_VAR 0 5
99657: PPUSH
99658: CALL 99700 0 6
99662: GO 99695
99664: LD_INT 304
99666: DOUBLE
99667: EQUAL
99668: IFTRUE 99672
99670: GO 99694
99672: POP
// hHackTeleport ( unit , x , y ) ; end ;
99673: LD_VAR 0 2
99677: PPUSH
99678: LD_VAR 0 4
99682: PPUSH
99683: LD_VAR 0 5
99687: PPUSH
99688: CALL 101459 0 3
99692: GO 99695
99694: POP
// end ;
99695: LD_VAR 0 12
99699: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
99700: LD_INT 0
99702: PPUSH
99703: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
99704: LD_VAR 0 1
99708: PUSH
99709: LD_INT 1
99711: LESS
99712: PUSH
99713: LD_VAR 0 1
99717: PUSH
99718: LD_INT 3
99720: GREATER
99721: OR
99722: PUSH
99723: LD_VAR 0 5
99727: PPUSH
99728: LD_VAR 0 6
99732: PPUSH
99733: CALL_OW 428
99737: OR
99738: IFFALSE 99742
// exit ;
99740: GO 100462
// uc_side := your_side ;
99742: LD_ADDR_OWVAR 20
99746: PUSH
99747: LD_OWVAR 2
99751: ST_TO_ADDR
// uc_nation := nation ;
99752: LD_ADDR_OWVAR 21
99756: PUSH
99757: LD_VAR 0 1
99761: ST_TO_ADDR
// bc_level = 1 ;
99762: LD_ADDR_OWVAR 43
99766: PUSH
99767: LD_INT 1
99769: ST_TO_ADDR
// case btype of 1 :
99770: LD_VAR 0 2
99774: PUSH
99775: LD_INT 1
99777: DOUBLE
99778: EQUAL
99779: IFTRUE 99783
99781: GO 99794
99783: POP
// bc_type := b_depot ; 2 :
99784: LD_ADDR_OWVAR 42
99788: PUSH
99789: LD_INT 0
99791: ST_TO_ADDR
99792: GO 100406
99794: LD_INT 2
99796: DOUBLE
99797: EQUAL
99798: IFTRUE 99802
99800: GO 99813
99802: POP
// bc_type := b_warehouse ; 3 :
99803: LD_ADDR_OWVAR 42
99807: PUSH
99808: LD_INT 1
99810: ST_TO_ADDR
99811: GO 100406
99813: LD_INT 3
99815: DOUBLE
99816: EQUAL
99817: IFTRUE 99821
99819: GO 99832
99821: POP
// bc_type := b_lab ; 4 .. 9 :
99822: LD_ADDR_OWVAR 42
99826: PUSH
99827: LD_INT 6
99829: ST_TO_ADDR
99830: GO 100406
99832: LD_INT 4
99834: DOUBLE
99835: GREATEREQUAL
99836: IFFALSE 99844
99838: LD_INT 9
99840: DOUBLE
99841: LESSEQUAL
99842: IFTRUE 99846
99844: GO 99898
99846: POP
// begin bc_type := b_lab_half ;
99847: LD_ADDR_OWVAR 42
99851: PUSH
99852: LD_INT 7
99854: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
99855: LD_ADDR_OWVAR 44
99859: PUSH
99860: LD_INT 10
99862: PUSH
99863: LD_INT 11
99865: PUSH
99866: LD_INT 12
99868: PUSH
99869: LD_INT 15
99871: PUSH
99872: LD_INT 14
99874: PUSH
99875: LD_INT 13
99877: PUSH
99878: EMPTY
99879: LIST
99880: LIST
99881: LIST
99882: LIST
99883: LIST
99884: LIST
99885: PUSH
99886: LD_VAR 0 2
99890: PUSH
99891: LD_INT 3
99893: MINUS
99894: ARRAY
99895: ST_TO_ADDR
// end ; 10 .. 13 :
99896: GO 100406
99898: LD_INT 10
99900: DOUBLE
99901: GREATEREQUAL
99902: IFFALSE 99910
99904: LD_INT 13
99906: DOUBLE
99907: LESSEQUAL
99908: IFTRUE 99912
99910: GO 99989
99912: POP
// begin bc_type := b_lab_full ;
99913: LD_ADDR_OWVAR 42
99917: PUSH
99918: LD_INT 8
99920: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
99921: LD_ADDR_OWVAR 44
99925: PUSH
99926: LD_INT 10
99928: PUSH
99929: LD_INT 12
99931: PUSH
99932: LD_INT 14
99934: PUSH
99935: LD_INT 13
99937: PUSH
99938: EMPTY
99939: LIST
99940: LIST
99941: LIST
99942: LIST
99943: PUSH
99944: LD_VAR 0 2
99948: PUSH
99949: LD_INT 9
99951: MINUS
99952: ARRAY
99953: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
99954: LD_ADDR_OWVAR 45
99958: PUSH
99959: LD_INT 11
99961: PUSH
99962: LD_INT 15
99964: PUSH
99965: LD_INT 12
99967: PUSH
99968: LD_INT 15
99970: PUSH
99971: EMPTY
99972: LIST
99973: LIST
99974: LIST
99975: LIST
99976: PUSH
99977: LD_VAR 0 2
99981: PUSH
99982: LD_INT 9
99984: MINUS
99985: ARRAY
99986: ST_TO_ADDR
// end ; 14 :
99987: GO 100406
99989: LD_INT 14
99991: DOUBLE
99992: EQUAL
99993: IFTRUE 99997
99995: GO 100008
99997: POP
// bc_type := b_workshop ; 15 :
99998: LD_ADDR_OWVAR 42
100002: PUSH
100003: LD_INT 2
100005: ST_TO_ADDR
100006: GO 100406
100008: LD_INT 15
100010: DOUBLE
100011: EQUAL
100012: IFTRUE 100016
100014: GO 100027
100016: POP
// bc_type := b_factory ; 16 :
100017: LD_ADDR_OWVAR 42
100021: PUSH
100022: LD_INT 3
100024: ST_TO_ADDR
100025: GO 100406
100027: LD_INT 16
100029: DOUBLE
100030: EQUAL
100031: IFTRUE 100035
100033: GO 100046
100035: POP
// bc_type := b_ext_gun ; 17 :
100036: LD_ADDR_OWVAR 42
100040: PUSH
100041: LD_INT 17
100043: ST_TO_ADDR
100044: GO 100406
100046: LD_INT 17
100048: DOUBLE
100049: EQUAL
100050: IFTRUE 100054
100052: GO 100082
100054: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
100055: LD_ADDR_OWVAR 42
100059: PUSH
100060: LD_INT 19
100062: PUSH
100063: LD_INT 23
100065: PUSH
100066: LD_INT 19
100068: PUSH
100069: EMPTY
100070: LIST
100071: LIST
100072: LIST
100073: PUSH
100074: LD_VAR 0 1
100078: ARRAY
100079: ST_TO_ADDR
100080: GO 100406
100082: LD_INT 18
100084: DOUBLE
100085: EQUAL
100086: IFTRUE 100090
100088: GO 100101
100090: POP
// bc_type := b_ext_radar ; 19 :
100091: LD_ADDR_OWVAR 42
100095: PUSH
100096: LD_INT 20
100098: ST_TO_ADDR
100099: GO 100406
100101: LD_INT 19
100103: DOUBLE
100104: EQUAL
100105: IFTRUE 100109
100107: GO 100120
100109: POP
// bc_type := b_ext_radio ; 20 :
100110: LD_ADDR_OWVAR 42
100114: PUSH
100115: LD_INT 22
100117: ST_TO_ADDR
100118: GO 100406
100120: LD_INT 20
100122: DOUBLE
100123: EQUAL
100124: IFTRUE 100128
100126: GO 100139
100128: POP
// bc_type := b_ext_siberium ; 21 :
100129: LD_ADDR_OWVAR 42
100133: PUSH
100134: LD_INT 21
100136: ST_TO_ADDR
100137: GO 100406
100139: LD_INT 21
100141: DOUBLE
100142: EQUAL
100143: IFTRUE 100147
100145: GO 100158
100147: POP
// bc_type := b_ext_computer ; 22 :
100148: LD_ADDR_OWVAR 42
100152: PUSH
100153: LD_INT 24
100155: ST_TO_ADDR
100156: GO 100406
100158: LD_INT 22
100160: DOUBLE
100161: EQUAL
100162: IFTRUE 100166
100164: GO 100177
100166: POP
// bc_type := b_ext_track ; 23 :
100167: LD_ADDR_OWVAR 42
100171: PUSH
100172: LD_INT 16
100174: ST_TO_ADDR
100175: GO 100406
100177: LD_INT 23
100179: DOUBLE
100180: EQUAL
100181: IFTRUE 100185
100183: GO 100196
100185: POP
// bc_type := b_ext_laser ; 24 :
100186: LD_ADDR_OWVAR 42
100190: PUSH
100191: LD_INT 25
100193: ST_TO_ADDR
100194: GO 100406
100196: LD_INT 24
100198: DOUBLE
100199: EQUAL
100200: IFTRUE 100204
100202: GO 100215
100204: POP
// bc_type := b_control_tower ; 25 :
100205: LD_ADDR_OWVAR 42
100209: PUSH
100210: LD_INT 36
100212: ST_TO_ADDR
100213: GO 100406
100215: LD_INT 25
100217: DOUBLE
100218: EQUAL
100219: IFTRUE 100223
100221: GO 100234
100223: POP
// bc_type := b_breastwork ; 26 :
100224: LD_ADDR_OWVAR 42
100228: PUSH
100229: LD_INT 31
100231: ST_TO_ADDR
100232: GO 100406
100234: LD_INT 26
100236: DOUBLE
100237: EQUAL
100238: IFTRUE 100242
100240: GO 100253
100242: POP
// bc_type := b_bunker ; 27 :
100243: LD_ADDR_OWVAR 42
100247: PUSH
100248: LD_INT 32
100250: ST_TO_ADDR
100251: GO 100406
100253: LD_INT 27
100255: DOUBLE
100256: EQUAL
100257: IFTRUE 100261
100259: GO 100272
100261: POP
// bc_type := b_turret ; 28 :
100262: LD_ADDR_OWVAR 42
100266: PUSH
100267: LD_INT 33
100269: ST_TO_ADDR
100270: GO 100406
100272: LD_INT 28
100274: DOUBLE
100275: EQUAL
100276: IFTRUE 100280
100278: GO 100291
100280: POP
// bc_type := b_armoury ; 29 :
100281: LD_ADDR_OWVAR 42
100285: PUSH
100286: LD_INT 4
100288: ST_TO_ADDR
100289: GO 100406
100291: LD_INT 29
100293: DOUBLE
100294: EQUAL
100295: IFTRUE 100299
100297: GO 100310
100299: POP
// bc_type := b_barracks ; 30 :
100300: LD_ADDR_OWVAR 42
100304: PUSH
100305: LD_INT 5
100307: ST_TO_ADDR
100308: GO 100406
100310: LD_INT 30
100312: DOUBLE
100313: EQUAL
100314: IFTRUE 100318
100316: GO 100329
100318: POP
// bc_type := b_solar_power ; 31 :
100319: LD_ADDR_OWVAR 42
100323: PUSH
100324: LD_INT 27
100326: ST_TO_ADDR
100327: GO 100406
100329: LD_INT 31
100331: DOUBLE
100332: EQUAL
100333: IFTRUE 100337
100335: GO 100348
100337: POP
// bc_type := b_oil_power ; 32 :
100338: LD_ADDR_OWVAR 42
100342: PUSH
100343: LD_INT 26
100345: ST_TO_ADDR
100346: GO 100406
100348: LD_INT 32
100350: DOUBLE
100351: EQUAL
100352: IFTRUE 100356
100354: GO 100367
100356: POP
// bc_type := b_siberite_power ; 33 :
100357: LD_ADDR_OWVAR 42
100361: PUSH
100362: LD_INT 28
100364: ST_TO_ADDR
100365: GO 100406
100367: LD_INT 33
100369: DOUBLE
100370: EQUAL
100371: IFTRUE 100375
100373: GO 100386
100375: POP
// bc_type := b_oil_mine ; 34 :
100376: LD_ADDR_OWVAR 42
100380: PUSH
100381: LD_INT 29
100383: ST_TO_ADDR
100384: GO 100406
100386: LD_INT 34
100388: DOUBLE
100389: EQUAL
100390: IFTRUE 100394
100392: GO 100405
100394: POP
// bc_type := b_siberite_mine ; end ;
100395: LD_ADDR_OWVAR 42
100399: PUSH
100400: LD_INT 30
100402: ST_TO_ADDR
100403: GO 100406
100405: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
100406: LD_ADDR_VAR 0 8
100410: PUSH
100411: LD_VAR 0 5
100415: PPUSH
100416: LD_VAR 0 6
100420: PPUSH
100421: LD_VAR 0 3
100425: PPUSH
100426: CALL_OW 47
100430: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
100431: LD_OWVAR 42
100435: PUSH
100436: LD_INT 32
100438: PUSH
100439: LD_INT 33
100441: PUSH
100442: EMPTY
100443: LIST
100444: LIST
100445: IN
100446: IFFALSE 100462
// PlaceWeaponTurret ( b , weapon ) ;
100448: LD_VAR 0 8
100452: PPUSH
100453: LD_VAR 0 4
100457: PPUSH
100458: CALL_OW 431
// end ;
100462: LD_VAR 0 7
100466: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
100467: LD_INT 0
100469: PPUSH
100470: PPUSH
100471: PPUSH
100472: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
100473: LD_ADDR_VAR 0 4
100477: PUSH
100478: LD_INT 22
100480: PUSH
100481: LD_OWVAR 2
100485: PUSH
100486: EMPTY
100487: LIST
100488: LIST
100489: PUSH
100490: LD_INT 2
100492: PUSH
100493: LD_INT 30
100495: PUSH
100496: LD_INT 0
100498: PUSH
100499: EMPTY
100500: LIST
100501: LIST
100502: PUSH
100503: LD_INT 30
100505: PUSH
100506: LD_INT 1
100508: PUSH
100509: EMPTY
100510: LIST
100511: LIST
100512: PUSH
100513: EMPTY
100514: LIST
100515: LIST
100516: LIST
100517: PUSH
100518: EMPTY
100519: LIST
100520: LIST
100521: PPUSH
100522: CALL_OW 69
100526: ST_TO_ADDR
// if not tmp then
100527: LD_VAR 0 4
100531: NOT
100532: IFFALSE 100536
// exit ;
100534: GO 100595
// for i in tmp do
100536: LD_ADDR_VAR 0 2
100540: PUSH
100541: LD_VAR 0 4
100545: PUSH
100546: FOR_IN
100547: IFFALSE 100593
// for j = 1 to 3 do
100549: LD_ADDR_VAR 0 3
100553: PUSH
100554: DOUBLE
100555: LD_INT 1
100557: DEC
100558: ST_TO_ADDR
100559: LD_INT 3
100561: PUSH
100562: FOR_TO
100563: IFFALSE 100589
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
100565: LD_VAR 0 2
100569: PPUSH
100570: CALL_OW 274
100574: PPUSH
100575: LD_VAR 0 3
100579: PPUSH
100580: LD_INT 99999
100582: PPUSH
100583: CALL_OW 277
100587: GO 100562
100589: POP
100590: POP
100591: GO 100546
100593: POP
100594: POP
// end ;
100595: LD_VAR 0 1
100599: RET
// export function hHackSetLevel10 ; var i , j ; begin
100600: LD_INT 0
100602: PPUSH
100603: PPUSH
100604: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
100605: LD_ADDR_VAR 0 2
100609: PUSH
100610: LD_INT 21
100612: PUSH
100613: LD_INT 1
100615: PUSH
100616: EMPTY
100617: LIST
100618: LIST
100619: PPUSH
100620: CALL_OW 69
100624: PUSH
100625: FOR_IN
100626: IFFALSE 100678
// if IsSelected ( i ) then
100628: LD_VAR 0 2
100632: PPUSH
100633: CALL_OW 306
100637: IFFALSE 100676
// begin for j := 1 to 4 do
100639: LD_ADDR_VAR 0 3
100643: PUSH
100644: DOUBLE
100645: LD_INT 1
100647: DEC
100648: ST_TO_ADDR
100649: LD_INT 4
100651: PUSH
100652: FOR_TO
100653: IFFALSE 100674
// SetSkill ( i , j , 10 ) ;
100655: LD_VAR 0 2
100659: PPUSH
100660: LD_VAR 0 3
100664: PPUSH
100665: LD_INT 10
100667: PPUSH
100668: CALL_OW 237
100672: GO 100652
100674: POP
100675: POP
// end ;
100676: GO 100625
100678: POP
100679: POP
// end ;
100680: LD_VAR 0 1
100684: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
100685: LD_INT 0
100687: PPUSH
100688: PPUSH
100689: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
100690: LD_ADDR_VAR 0 2
100694: PUSH
100695: LD_INT 22
100697: PUSH
100698: LD_OWVAR 2
100702: PUSH
100703: EMPTY
100704: LIST
100705: LIST
100706: PUSH
100707: LD_INT 21
100709: PUSH
100710: LD_INT 1
100712: PUSH
100713: EMPTY
100714: LIST
100715: LIST
100716: PUSH
100717: EMPTY
100718: LIST
100719: LIST
100720: PPUSH
100721: CALL_OW 69
100725: PUSH
100726: FOR_IN
100727: IFFALSE 100768
// begin for j := 1 to 4 do
100729: LD_ADDR_VAR 0 3
100733: PUSH
100734: DOUBLE
100735: LD_INT 1
100737: DEC
100738: ST_TO_ADDR
100739: LD_INT 4
100741: PUSH
100742: FOR_TO
100743: IFFALSE 100764
// SetSkill ( i , j , 10 ) ;
100745: LD_VAR 0 2
100749: PPUSH
100750: LD_VAR 0 3
100754: PPUSH
100755: LD_INT 10
100757: PPUSH
100758: CALL_OW 237
100762: GO 100742
100764: POP
100765: POP
// end ;
100766: GO 100726
100768: POP
100769: POP
// end ;
100770: LD_VAR 0 1
100774: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
100775: LD_INT 0
100777: PPUSH
// uc_side := your_side ;
100778: LD_ADDR_OWVAR 20
100782: PUSH
100783: LD_OWVAR 2
100787: ST_TO_ADDR
// uc_nation := nation ;
100788: LD_ADDR_OWVAR 21
100792: PUSH
100793: LD_VAR 0 1
100797: ST_TO_ADDR
// InitHc ;
100798: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
100802: LD_INT 0
100804: PPUSH
100805: LD_VAR 0 2
100809: PPUSH
100810: LD_VAR 0 3
100814: PPUSH
100815: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
100819: LD_VAR 0 4
100823: PPUSH
100824: LD_VAR 0 5
100828: PPUSH
100829: CALL_OW 428
100833: PUSH
100834: LD_INT 0
100836: EQUAL
100837: IFFALSE 100861
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
100839: CALL_OW 44
100843: PPUSH
100844: LD_VAR 0 4
100848: PPUSH
100849: LD_VAR 0 5
100853: PPUSH
100854: LD_INT 1
100856: PPUSH
100857: CALL_OW 48
// end ;
100861: LD_VAR 0 6
100865: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
100866: LD_INT 0
100868: PPUSH
100869: PPUSH
// uc_side := your_side ;
100870: LD_ADDR_OWVAR 20
100874: PUSH
100875: LD_OWVAR 2
100879: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
100880: LD_VAR 0 1
100884: PUSH
100885: LD_INT 1
100887: PUSH
100888: LD_INT 2
100890: PUSH
100891: LD_INT 3
100893: PUSH
100894: LD_INT 4
100896: PUSH
100897: LD_INT 5
100899: PUSH
100900: EMPTY
100901: LIST
100902: LIST
100903: LIST
100904: LIST
100905: LIST
100906: IN
100907: IFFALSE 100919
// uc_nation := nation_american else
100909: LD_ADDR_OWVAR 21
100913: PUSH
100914: LD_INT 1
100916: ST_TO_ADDR
100917: GO 100962
// if chassis in [ 11 , 12 , 13 , 14 ] then
100919: LD_VAR 0 1
100923: PUSH
100924: LD_INT 11
100926: PUSH
100927: LD_INT 12
100929: PUSH
100930: LD_INT 13
100932: PUSH
100933: LD_INT 14
100935: PUSH
100936: EMPTY
100937: LIST
100938: LIST
100939: LIST
100940: LIST
100941: IN
100942: IFFALSE 100954
// uc_nation := nation_arabian else
100944: LD_ADDR_OWVAR 21
100948: PUSH
100949: LD_INT 2
100951: ST_TO_ADDR
100952: GO 100962
// uc_nation := nation_russian ;
100954: LD_ADDR_OWVAR 21
100958: PUSH
100959: LD_INT 3
100961: ST_TO_ADDR
// vc_chassis := chassis ;
100962: LD_ADDR_OWVAR 37
100966: PUSH
100967: LD_VAR 0 1
100971: ST_TO_ADDR
// vc_engine := engine ;
100972: LD_ADDR_OWVAR 39
100976: PUSH
100977: LD_VAR 0 2
100981: ST_TO_ADDR
// vc_control := control ;
100982: LD_ADDR_OWVAR 38
100986: PUSH
100987: LD_VAR 0 3
100991: ST_TO_ADDR
// vc_weapon := weapon ;
100992: LD_ADDR_OWVAR 40
100996: PUSH
100997: LD_VAR 0 4
101001: ST_TO_ADDR
// un := CreateVehicle ;
101002: LD_ADDR_VAR 0 8
101006: PUSH
101007: CALL_OW 45
101011: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
101012: LD_VAR 0 8
101016: PPUSH
101017: LD_INT 0
101019: PPUSH
101020: LD_INT 5
101022: PPUSH
101023: CALL_OW 12
101027: PPUSH
101028: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
101032: LD_VAR 0 8
101036: PPUSH
101037: LD_VAR 0 5
101041: PPUSH
101042: LD_VAR 0 6
101046: PPUSH
101047: LD_INT 1
101049: PPUSH
101050: CALL_OW 48
// end ;
101054: LD_VAR 0 7
101058: RET
// export hInvincible ; every 1 do
101059: GO 101061
101061: DISABLE
// hInvincible := [ ] ;
101062: LD_ADDR_EXP 148
101066: PUSH
101067: EMPTY
101068: ST_TO_ADDR
101069: END
// every 10 do var i ;
101070: GO 101072
101072: DISABLE
101073: LD_INT 0
101075: PPUSH
// begin enable ;
101076: ENABLE
// if not hInvincible then
101077: LD_EXP 148
101081: NOT
101082: IFFALSE 101086
// exit ;
101084: GO 101130
// for i in hInvincible do
101086: LD_ADDR_VAR 0 1
101090: PUSH
101091: LD_EXP 148
101095: PUSH
101096: FOR_IN
101097: IFFALSE 101128
// if GetLives ( i ) < 1000 then
101099: LD_VAR 0 1
101103: PPUSH
101104: CALL_OW 256
101108: PUSH
101109: LD_INT 1000
101111: LESS
101112: IFFALSE 101126
// SetLives ( i , 1000 ) ;
101114: LD_VAR 0 1
101118: PPUSH
101119: LD_INT 1000
101121: PPUSH
101122: CALL_OW 234
101126: GO 101096
101128: POP
101129: POP
// end ;
101130: PPOPN 1
101132: END
// export function hHackInvincible ; var i ; begin
101133: LD_INT 0
101135: PPUSH
101136: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
101137: LD_ADDR_VAR 0 2
101141: PUSH
101142: LD_INT 2
101144: PUSH
101145: LD_INT 21
101147: PUSH
101148: LD_INT 1
101150: PUSH
101151: EMPTY
101152: LIST
101153: LIST
101154: PUSH
101155: LD_INT 21
101157: PUSH
101158: LD_INT 2
101160: PUSH
101161: EMPTY
101162: LIST
101163: LIST
101164: PUSH
101165: EMPTY
101166: LIST
101167: LIST
101168: LIST
101169: PPUSH
101170: CALL_OW 69
101174: PUSH
101175: FOR_IN
101176: IFFALSE 101237
// if IsSelected ( i ) then
101178: LD_VAR 0 2
101182: PPUSH
101183: CALL_OW 306
101187: IFFALSE 101235
// begin if i in hInvincible then
101189: LD_VAR 0 2
101193: PUSH
101194: LD_EXP 148
101198: IN
101199: IFFALSE 101219
// hInvincible := hInvincible diff i else
101201: LD_ADDR_EXP 148
101205: PUSH
101206: LD_EXP 148
101210: PUSH
101211: LD_VAR 0 2
101215: DIFF
101216: ST_TO_ADDR
101217: GO 101235
// hInvincible := hInvincible union i ;
101219: LD_ADDR_EXP 148
101223: PUSH
101224: LD_EXP 148
101228: PUSH
101229: LD_VAR 0 2
101233: UNION
101234: ST_TO_ADDR
// end ;
101235: GO 101175
101237: POP
101238: POP
// end ;
101239: LD_VAR 0 1
101243: RET
// export function hHackInvisible ; var i , j ; begin
101244: LD_INT 0
101246: PPUSH
101247: PPUSH
101248: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
101249: LD_ADDR_VAR 0 2
101253: PUSH
101254: LD_INT 21
101256: PUSH
101257: LD_INT 1
101259: PUSH
101260: EMPTY
101261: LIST
101262: LIST
101263: PPUSH
101264: CALL_OW 69
101268: PUSH
101269: FOR_IN
101270: IFFALSE 101294
// if IsSelected ( i ) then
101272: LD_VAR 0 2
101276: PPUSH
101277: CALL_OW 306
101281: IFFALSE 101292
// ComForceInvisible ( i ) ;
101283: LD_VAR 0 2
101287: PPUSH
101288: CALL_OW 496
101292: GO 101269
101294: POP
101295: POP
// end ;
101296: LD_VAR 0 1
101300: RET
// export function hHackChangeYourSide ; begin
101301: LD_INT 0
101303: PPUSH
// if your_side = 8 then
101304: LD_OWVAR 2
101308: PUSH
101309: LD_INT 8
101311: EQUAL
101312: IFFALSE 101324
// your_side := 0 else
101314: LD_ADDR_OWVAR 2
101318: PUSH
101319: LD_INT 0
101321: ST_TO_ADDR
101322: GO 101338
// your_side := your_side + 1 ;
101324: LD_ADDR_OWVAR 2
101328: PUSH
101329: LD_OWVAR 2
101333: PUSH
101334: LD_INT 1
101336: PLUS
101337: ST_TO_ADDR
// end ;
101338: LD_VAR 0 1
101342: RET
// export function hHackChangeUnitSide ; var i , j ; begin
101343: LD_INT 0
101345: PPUSH
101346: PPUSH
101347: PPUSH
// for i in all_units do
101348: LD_ADDR_VAR 0 2
101352: PUSH
101353: LD_OWVAR 3
101357: PUSH
101358: FOR_IN
101359: IFFALSE 101437
// if IsSelected ( i ) then
101361: LD_VAR 0 2
101365: PPUSH
101366: CALL_OW 306
101370: IFFALSE 101435
// begin j := GetSide ( i ) ;
101372: LD_ADDR_VAR 0 3
101376: PUSH
101377: LD_VAR 0 2
101381: PPUSH
101382: CALL_OW 255
101386: ST_TO_ADDR
// if j = 8 then
101387: LD_VAR 0 3
101391: PUSH
101392: LD_INT 8
101394: EQUAL
101395: IFFALSE 101407
// j := 0 else
101397: LD_ADDR_VAR 0 3
101401: PUSH
101402: LD_INT 0
101404: ST_TO_ADDR
101405: GO 101421
// j := j + 1 ;
101407: LD_ADDR_VAR 0 3
101411: PUSH
101412: LD_VAR 0 3
101416: PUSH
101417: LD_INT 1
101419: PLUS
101420: ST_TO_ADDR
// SetSide ( i , j ) ;
101421: LD_VAR 0 2
101425: PPUSH
101426: LD_VAR 0 3
101430: PPUSH
101431: CALL_OW 235
// end ;
101435: GO 101358
101437: POP
101438: POP
// end ;
101439: LD_VAR 0 1
101443: RET
// export function hHackFog ; begin
101444: LD_INT 0
101446: PPUSH
// FogOff ( true ) ;
101447: LD_INT 1
101449: PPUSH
101450: CALL_OW 344
// end ;
101454: LD_VAR 0 1
101458: RET
// export function hHackTeleport ( unit , x , y ) ; begin
101459: LD_INT 0
101461: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
101462: LD_VAR 0 1
101466: PPUSH
101467: LD_VAR 0 2
101471: PPUSH
101472: LD_VAR 0 3
101476: PPUSH
101477: LD_INT 1
101479: PPUSH
101480: LD_INT 1
101482: PPUSH
101483: CALL_OW 483
// CenterOnXY ( x , y ) ;
101487: LD_VAR 0 2
101491: PPUSH
101492: LD_VAR 0 3
101496: PPUSH
101497: CALL_OW 84
// end ; end_of_file
101501: LD_VAR 0 4
101505: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
101506: LD_INT 0
101508: PPUSH
101509: PPUSH
101510: PPUSH
101511: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
101512: LD_VAR 0 1
101516: PPUSH
101517: CALL_OW 264
101521: PUSH
101522: LD_EXP 33
101526: EQUAL
101527: IFFALSE 101599
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
101529: LD_INT 68
101531: PPUSH
101532: LD_VAR 0 1
101536: PPUSH
101537: CALL_OW 255
101541: PPUSH
101542: CALL_OW 321
101546: PUSH
101547: LD_INT 2
101549: EQUAL
101550: IFFALSE 101562
// eff := 70 else
101552: LD_ADDR_VAR 0 4
101556: PUSH
101557: LD_INT 70
101559: ST_TO_ADDR
101560: GO 101570
// eff := 30 ;
101562: LD_ADDR_VAR 0 4
101566: PUSH
101567: LD_INT 30
101569: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
101570: LD_VAR 0 1
101574: PPUSH
101575: CALL_OW 250
101579: PPUSH
101580: LD_VAR 0 1
101584: PPUSH
101585: CALL_OW 251
101589: PPUSH
101590: LD_VAR 0 4
101594: PPUSH
101595: CALL_OW 495
// end ; end ;
101599: LD_VAR 0 2
101603: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
101604: LD_INT 0
101606: PPUSH
// end ;
101607: LD_VAR 0 4
101611: RET
// export function SOS_Command ( cmd ) ; begin
101612: LD_INT 0
101614: PPUSH
// end ;
101615: LD_VAR 0 2
101619: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
101620: LD_INT 0
101622: PPUSH
// if cmd = 121 then
101623: LD_VAR 0 1
101627: PUSH
101628: LD_INT 121
101630: EQUAL
101631: IFFALSE 101633
// end ;
101633: LD_VAR 0 6
101637: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
101638: LD_INT 0
101640: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
101641: LD_VAR 0 1
101645: PUSH
101646: LD_INT 250
101648: EQUAL
101649: PUSH
101650: LD_VAR 0 2
101654: PPUSH
101655: CALL_OW 264
101659: PUSH
101660: LD_EXP 36
101664: EQUAL
101665: AND
101666: IFFALSE 101687
// MinerPlaceMine ( unit , x , y ) ;
101668: LD_VAR 0 2
101672: PPUSH
101673: LD_VAR 0 4
101677: PPUSH
101678: LD_VAR 0 5
101682: PPUSH
101683: CALL 104036 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
101687: LD_VAR 0 1
101691: PUSH
101692: LD_INT 251
101694: EQUAL
101695: PUSH
101696: LD_VAR 0 2
101700: PPUSH
101701: CALL_OW 264
101705: PUSH
101706: LD_EXP 36
101710: EQUAL
101711: AND
101712: IFFALSE 101733
// MinerDetonateMine ( unit , x , y ) ;
101714: LD_VAR 0 2
101718: PPUSH
101719: LD_VAR 0 4
101723: PPUSH
101724: LD_VAR 0 5
101728: PPUSH
101729: CALL 104313 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
101733: LD_VAR 0 1
101737: PUSH
101738: LD_INT 252
101740: EQUAL
101741: PUSH
101742: LD_VAR 0 2
101746: PPUSH
101747: CALL_OW 264
101751: PUSH
101752: LD_EXP 36
101756: EQUAL
101757: AND
101758: IFFALSE 101779
// MinerCreateMinefield ( unit , x , y ) ;
101760: LD_VAR 0 2
101764: PPUSH
101765: LD_VAR 0 4
101769: PPUSH
101770: LD_VAR 0 5
101774: PPUSH
101775: CALL 104730 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
101779: LD_VAR 0 1
101783: PUSH
101784: LD_INT 253
101786: EQUAL
101787: PUSH
101788: LD_VAR 0 2
101792: PPUSH
101793: CALL_OW 257
101797: PUSH
101798: LD_INT 5
101800: EQUAL
101801: AND
101802: IFFALSE 101823
// ComBinocular ( unit , x , y ) ;
101804: LD_VAR 0 2
101808: PPUSH
101809: LD_VAR 0 4
101813: PPUSH
101814: LD_VAR 0 5
101818: PPUSH
101819: CALL 105101 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
101823: LD_VAR 0 1
101827: PUSH
101828: LD_INT 254
101830: EQUAL
101831: PUSH
101832: LD_VAR 0 2
101836: PPUSH
101837: CALL_OW 264
101841: PUSH
101842: LD_EXP 31
101846: EQUAL
101847: AND
101848: PUSH
101849: LD_VAR 0 3
101853: PPUSH
101854: CALL_OW 263
101858: PUSH
101859: LD_INT 3
101861: EQUAL
101862: AND
101863: IFFALSE 101879
// HackDestroyVehicle ( unit , selectedUnit ) ;
101865: LD_VAR 0 2
101869: PPUSH
101870: LD_VAR 0 3
101874: PPUSH
101875: CALL 103396 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
101879: LD_VAR 0 1
101883: PUSH
101884: LD_INT 255
101886: EQUAL
101887: PUSH
101888: LD_VAR 0 2
101892: PPUSH
101893: CALL_OW 264
101897: PUSH
101898: LD_INT 14
101900: PUSH
101901: LD_INT 53
101903: PUSH
101904: EMPTY
101905: LIST
101906: LIST
101907: IN
101908: AND
101909: PUSH
101910: LD_VAR 0 4
101914: PPUSH
101915: LD_VAR 0 5
101919: PPUSH
101920: CALL_OW 488
101924: AND
101925: IFFALSE 101949
// CutTreeXYR ( unit , x , y , 12 ) ;
101927: LD_VAR 0 2
101931: PPUSH
101932: LD_VAR 0 4
101936: PPUSH
101937: LD_VAR 0 5
101941: PPUSH
101942: LD_INT 12
101944: PPUSH
101945: CALL 101962 0 4
// end ;
101949: LD_VAR 0 6
101953: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
101954: LD_INT 0
101956: PPUSH
// end ;
101957: LD_VAR 0 4
101961: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
101962: LD_INT 0
101964: PPUSH
101965: PPUSH
101966: PPUSH
101967: PPUSH
101968: PPUSH
101969: PPUSH
101970: PPUSH
101971: PPUSH
101972: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
101973: LD_VAR 0 1
101977: NOT
101978: PUSH
101979: LD_VAR 0 2
101983: PPUSH
101984: LD_VAR 0 3
101988: PPUSH
101989: CALL_OW 488
101993: NOT
101994: OR
101995: PUSH
101996: LD_VAR 0 4
102000: NOT
102001: OR
102002: IFFALSE 102006
// exit ;
102004: GO 102346
// list := [ ] ;
102006: LD_ADDR_VAR 0 13
102010: PUSH
102011: EMPTY
102012: ST_TO_ADDR
// if x - r < 0 then
102013: LD_VAR 0 2
102017: PUSH
102018: LD_VAR 0 4
102022: MINUS
102023: PUSH
102024: LD_INT 0
102026: LESS
102027: IFFALSE 102039
// min_x := 0 else
102029: LD_ADDR_VAR 0 7
102033: PUSH
102034: LD_INT 0
102036: ST_TO_ADDR
102037: GO 102055
// min_x := x - r ;
102039: LD_ADDR_VAR 0 7
102043: PUSH
102044: LD_VAR 0 2
102048: PUSH
102049: LD_VAR 0 4
102053: MINUS
102054: ST_TO_ADDR
// if y - r < 0 then
102055: LD_VAR 0 3
102059: PUSH
102060: LD_VAR 0 4
102064: MINUS
102065: PUSH
102066: LD_INT 0
102068: LESS
102069: IFFALSE 102081
// min_y := 0 else
102071: LD_ADDR_VAR 0 8
102075: PUSH
102076: LD_INT 0
102078: ST_TO_ADDR
102079: GO 102097
// min_y := y - r ;
102081: LD_ADDR_VAR 0 8
102085: PUSH
102086: LD_VAR 0 3
102090: PUSH
102091: LD_VAR 0 4
102095: MINUS
102096: ST_TO_ADDR
// max_x := x + r ;
102097: LD_ADDR_VAR 0 9
102101: PUSH
102102: LD_VAR 0 2
102106: PUSH
102107: LD_VAR 0 4
102111: PLUS
102112: ST_TO_ADDR
// max_y := y + r ;
102113: LD_ADDR_VAR 0 10
102117: PUSH
102118: LD_VAR 0 3
102122: PUSH
102123: LD_VAR 0 4
102127: PLUS
102128: ST_TO_ADDR
// for _x = min_x to max_x do
102129: LD_ADDR_VAR 0 11
102133: PUSH
102134: DOUBLE
102135: LD_VAR 0 7
102139: DEC
102140: ST_TO_ADDR
102141: LD_VAR 0 9
102145: PUSH
102146: FOR_TO
102147: IFFALSE 102264
// for _y = min_y to max_y do
102149: LD_ADDR_VAR 0 12
102153: PUSH
102154: DOUBLE
102155: LD_VAR 0 8
102159: DEC
102160: ST_TO_ADDR
102161: LD_VAR 0 10
102165: PUSH
102166: FOR_TO
102167: IFFALSE 102260
// begin if not ValidHex ( _x , _y ) then
102169: LD_VAR 0 11
102173: PPUSH
102174: LD_VAR 0 12
102178: PPUSH
102179: CALL_OW 488
102183: NOT
102184: IFFALSE 102188
// continue ;
102186: GO 102166
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
102188: LD_VAR 0 11
102192: PPUSH
102193: LD_VAR 0 12
102197: PPUSH
102198: CALL_OW 351
102202: PUSH
102203: LD_VAR 0 11
102207: PPUSH
102208: LD_VAR 0 12
102212: PPUSH
102213: CALL_OW 554
102217: AND
102218: IFFALSE 102258
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
102220: LD_ADDR_VAR 0 13
102224: PUSH
102225: LD_VAR 0 13
102229: PPUSH
102230: LD_VAR 0 13
102234: PUSH
102235: LD_INT 1
102237: PLUS
102238: PPUSH
102239: LD_VAR 0 11
102243: PUSH
102244: LD_VAR 0 12
102248: PUSH
102249: EMPTY
102250: LIST
102251: LIST
102252: PPUSH
102253: CALL_OW 2
102257: ST_TO_ADDR
// end ;
102258: GO 102166
102260: POP
102261: POP
102262: GO 102146
102264: POP
102265: POP
// if not list then
102266: LD_VAR 0 13
102270: NOT
102271: IFFALSE 102275
// exit ;
102273: GO 102346
// for i in list do
102275: LD_ADDR_VAR 0 6
102279: PUSH
102280: LD_VAR 0 13
102284: PUSH
102285: FOR_IN
102286: IFFALSE 102344
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
102288: LD_VAR 0 1
102292: PPUSH
102293: LD_STRING M
102295: PUSH
102296: LD_VAR 0 6
102300: PUSH
102301: LD_INT 1
102303: ARRAY
102304: PUSH
102305: LD_VAR 0 6
102309: PUSH
102310: LD_INT 2
102312: ARRAY
102313: PUSH
102314: LD_INT 0
102316: PUSH
102317: LD_INT 0
102319: PUSH
102320: LD_INT 0
102322: PUSH
102323: LD_INT 0
102325: PUSH
102326: EMPTY
102327: LIST
102328: LIST
102329: LIST
102330: LIST
102331: LIST
102332: LIST
102333: LIST
102334: PUSH
102335: EMPTY
102336: LIST
102337: PPUSH
102338: CALL_OW 447
102342: GO 102285
102344: POP
102345: POP
// end ;
102346: LD_VAR 0 5
102350: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
102351: LD_EXP 151
102355: NOT
102356: IFFALSE 102406
102358: GO 102360
102360: DISABLE
// begin initHack := true ;
102361: LD_ADDR_EXP 151
102365: PUSH
102366: LD_INT 1
102368: ST_TO_ADDR
// hackTanks := [ ] ;
102369: LD_ADDR_EXP 152
102373: PUSH
102374: EMPTY
102375: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
102376: LD_ADDR_EXP 153
102380: PUSH
102381: EMPTY
102382: ST_TO_ADDR
// hackLimit := 3 ;
102383: LD_ADDR_EXP 154
102387: PUSH
102388: LD_INT 3
102390: ST_TO_ADDR
// hackDist := 12 ;
102391: LD_ADDR_EXP 155
102395: PUSH
102396: LD_INT 12
102398: ST_TO_ADDR
// hackCounter := [ ] ;
102399: LD_ADDR_EXP 156
102403: PUSH
102404: EMPTY
102405: ST_TO_ADDR
// end ;
102406: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
102407: LD_EXP 151
102411: PUSH
102412: LD_INT 34
102414: PUSH
102415: LD_EXP 31
102419: PUSH
102420: EMPTY
102421: LIST
102422: LIST
102423: PPUSH
102424: CALL_OW 69
102428: AND
102429: IFFALSE 102684
102431: GO 102433
102433: DISABLE
102434: LD_INT 0
102436: PPUSH
102437: PPUSH
// begin enable ;
102438: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
102439: LD_ADDR_VAR 0 1
102443: PUSH
102444: LD_INT 34
102446: PUSH
102447: LD_EXP 31
102451: PUSH
102452: EMPTY
102453: LIST
102454: LIST
102455: PPUSH
102456: CALL_OW 69
102460: PUSH
102461: FOR_IN
102462: IFFALSE 102682
// begin if not i in hackTanks then
102464: LD_VAR 0 1
102468: PUSH
102469: LD_EXP 152
102473: IN
102474: NOT
102475: IFFALSE 102558
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
102477: LD_ADDR_EXP 152
102481: PUSH
102482: LD_EXP 152
102486: PPUSH
102487: LD_EXP 152
102491: PUSH
102492: LD_INT 1
102494: PLUS
102495: PPUSH
102496: LD_VAR 0 1
102500: PPUSH
102501: CALL_OW 1
102505: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
102506: LD_ADDR_EXP 153
102510: PUSH
102511: LD_EXP 153
102515: PPUSH
102516: LD_EXP 153
102520: PUSH
102521: LD_INT 1
102523: PLUS
102524: PPUSH
102525: EMPTY
102526: PPUSH
102527: CALL_OW 1
102531: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
102532: LD_ADDR_EXP 156
102536: PUSH
102537: LD_EXP 156
102541: PPUSH
102542: LD_EXP 156
102546: PUSH
102547: LD_INT 1
102549: PLUS
102550: PPUSH
102551: EMPTY
102552: PPUSH
102553: CALL_OW 1
102557: ST_TO_ADDR
// end ; if not IsOk ( i ) then
102558: LD_VAR 0 1
102562: PPUSH
102563: CALL_OW 302
102567: NOT
102568: IFFALSE 102581
// begin HackUnlinkAll ( i ) ;
102570: LD_VAR 0 1
102574: PPUSH
102575: CALL 102687 0 1
// continue ;
102579: GO 102461
// end ; HackCheckCapturedStatus ( i ) ;
102581: LD_VAR 0 1
102585: PPUSH
102586: CALL 103130 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
102590: LD_ADDR_VAR 0 2
102594: PUSH
102595: LD_INT 81
102597: PUSH
102598: LD_VAR 0 1
102602: PPUSH
102603: CALL_OW 255
102607: PUSH
102608: EMPTY
102609: LIST
102610: LIST
102611: PUSH
102612: LD_INT 33
102614: PUSH
102615: LD_INT 3
102617: PUSH
102618: EMPTY
102619: LIST
102620: LIST
102621: PUSH
102622: LD_INT 91
102624: PUSH
102625: LD_VAR 0 1
102629: PUSH
102630: LD_EXP 155
102634: PUSH
102635: EMPTY
102636: LIST
102637: LIST
102638: LIST
102639: PUSH
102640: LD_INT 50
102642: PUSH
102643: EMPTY
102644: LIST
102645: PUSH
102646: EMPTY
102647: LIST
102648: LIST
102649: LIST
102650: LIST
102651: PPUSH
102652: CALL_OW 69
102656: ST_TO_ADDR
// if not tmp then
102657: LD_VAR 0 2
102661: NOT
102662: IFFALSE 102666
// continue ;
102664: GO 102461
// HackLink ( i , tmp ) ;
102666: LD_VAR 0 1
102670: PPUSH
102671: LD_VAR 0 2
102675: PPUSH
102676: CALL 102823 0 2
// end ;
102680: GO 102461
102682: POP
102683: POP
// end ;
102684: PPOPN 2
102686: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
102687: LD_INT 0
102689: PPUSH
102690: PPUSH
102691: PPUSH
// if not hack in hackTanks then
102692: LD_VAR 0 1
102696: PUSH
102697: LD_EXP 152
102701: IN
102702: NOT
102703: IFFALSE 102707
// exit ;
102705: GO 102818
// index := GetElementIndex ( hackTanks , hack ) ;
102707: LD_ADDR_VAR 0 4
102711: PUSH
102712: LD_EXP 152
102716: PPUSH
102717: LD_VAR 0 1
102721: PPUSH
102722: CALL 24147 0 2
102726: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
102727: LD_EXP 153
102731: PUSH
102732: LD_VAR 0 4
102736: ARRAY
102737: IFFALSE 102818
// begin for i in hackTanksCaptured [ index ] do
102739: LD_ADDR_VAR 0 3
102743: PUSH
102744: LD_EXP 153
102748: PUSH
102749: LD_VAR 0 4
102753: ARRAY
102754: PUSH
102755: FOR_IN
102756: IFFALSE 102782
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
102758: LD_VAR 0 3
102762: PUSH
102763: LD_INT 1
102765: ARRAY
102766: PPUSH
102767: LD_VAR 0 3
102771: PUSH
102772: LD_INT 2
102774: ARRAY
102775: PPUSH
102776: CALL_OW 235
102780: GO 102755
102782: POP
102783: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
102784: LD_ADDR_EXP 153
102788: PUSH
102789: LD_EXP 153
102793: PPUSH
102794: LD_VAR 0 4
102798: PPUSH
102799: EMPTY
102800: PPUSH
102801: CALL_OW 1
102805: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
102806: LD_VAR 0 1
102810: PPUSH
102811: LD_INT 0
102813: PPUSH
102814: CALL_OW 505
// end ; end ;
102818: LD_VAR 0 2
102822: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
102823: LD_INT 0
102825: PPUSH
102826: PPUSH
102827: PPUSH
// if not hack in hackTanks or not vehicles then
102828: LD_VAR 0 1
102832: PUSH
102833: LD_EXP 152
102837: IN
102838: NOT
102839: PUSH
102840: LD_VAR 0 2
102844: NOT
102845: OR
102846: IFFALSE 102850
// exit ;
102848: GO 103125
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
102850: LD_ADDR_VAR 0 2
102854: PUSH
102855: LD_VAR 0 1
102859: PPUSH
102860: LD_VAR 0 2
102864: PPUSH
102865: LD_INT 1
102867: PPUSH
102868: LD_INT 1
102870: PPUSH
102871: CALL 24797 0 4
102875: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
102876: LD_ADDR_VAR 0 5
102880: PUSH
102881: LD_EXP 152
102885: PPUSH
102886: LD_VAR 0 1
102890: PPUSH
102891: CALL 24147 0 2
102895: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
102896: LD_EXP 153
102900: PUSH
102901: LD_VAR 0 5
102905: ARRAY
102906: PUSH
102907: LD_EXP 154
102911: LESS
102912: IFFALSE 103101
// begin for i := 1 to vehicles do
102914: LD_ADDR_VAR 0 4
102918: PUSH
102919: DOUBLE
102920: LD_INT 1
102922: DEC
102923: ST_TO_ADDR
102924: LD_VAR 0 2
102928: PUSH
102929: FOR_TO
102930: IFFALSE 103099
// begin if hackTanksCaptured [ index ] = hackLimit then
102932: LD_EXP 153
102936: PUSH
102937: LD_VAR 0 5
102941: ARRAY
102942: PUSH
102943: LD_EXP 154
102947: EQUAL
102948: IFFALSE 102952
// break ;
102950: GO 103099
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
102952: LD_ADDR_EXP 156
102956: PUSH
102957: LD_EXP 156
102961: PPUSH
102962: LD_VAR 0 5
102966: PPUSH
102967: LD_EXP 156
102971: PUSH
102972: LD_VAR 0 5
102976: ARRAY
102977: PUSH
102978: LD_INT 1
102980: PLUS
102981: PPUSH
102982: CALL_OW 1
102986: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
102987: LD_ADDR_EXP 153
102991: PUSH
102992: LD_EXP 153
102996: PPUSH
102997: LD_VAR 0 5
103001: PUSH
103002: LD_EXP 153
103006: PUSH
103007: LD_VAR 0 5
103011: ARRAY
103012: PUSH
103013: LD_INT 1
103015: PLUS
103016: PUSH
103017: EMPTY
103018: LIST
103019: LIST
103020: PPUSH
103021: LD_VAR 0 2
103025: PUSH
103026: LD_VAR 0 4
103030: ARRAY
103031: PUSH
103032: LD_VAR 0 2
103036: PUSH
103037: LD_VAR 0 4
103041: ARRAY
103042: PPUSH
103043: CALL_OW 255
103047: PUSH
103048: EMPTY
103049: LIST
103050: LIST
103051: PPUSH
103052: CALL 24362 0 3
103056: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
103057: LD_VAR 0 2
103061: PUSH
103062: LD_VAR 0 4
103066: ARRAY
103067: PPUSH
103068: LD_VAR 0 1
103072: PPUSH
103073: CALL_OW 255
103077: PPUSH
103078: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
103082: LD_VAR 0 2
103086: PUSH
103087: LD_VAR 0 4
103091: ARRAY
103092: PPUSH
103093: CALL_OW 141
// end ;
103097: GO 102929
103099: POP
103100: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
103101: LD_VAR 0 1
103105: PPUSH
103106: LD_EXP 153
103110: PUSH
103111: LD_VAR 0 5
103115: ARRAY
103116: PUSH
103117: LD_INT 0
103119: PLUS
103120: PPUSH
103121: CALL_OW 505
// end ;
103125: LD_VAR 0 3
103129: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
103130: LD_INT 0
103132: PPUSH
103133: PPUSH
103134: PPUSH
103135: PPUSH
// if not hack in hackTanks then
103136: LD_VAR 0 1
103140: PUSH
103141: LD_EXP 152
103145: IN
103146: NOT
103147: IFFALSE 103151
// exit ;
103149: GO 103391
// index := GetElementIndex ( hackTanks , hack ) ;
103151: LD_ADDR_VAR 0 4
103155: PUSH
103156: LD_EXP 152
103160: PPUSH
103161: LD_VAR 0 1
103165: PPUSH
103166: CALL 24147 0 2
103170: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
103171: LD_ADDR_VAR 0 3
103175: PUSH
103176: DOUBLE
103177: LD_EXP 153
103181: PUSH
103182: LD_VAR 0 4
103186: ARRAY
103187: INC
103188: ST_TO_ADDR
103189: LD_INT 1
103191: PUSH
103192: FOR_DOWNTO
103193: IFFALSE 103365
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
103195: LD_ADDR_VAR 0 5
103199: PUSH
103200: LD_EXP 153
103204: PUSH
103205: LD_VAR 0 4
103209: ARRAY
103210: PUSH
103211: LD_VAR 0 3
103215: ARRAY
103216: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
103217: LD_VAR 0 5
103221: PUSH
103222: LD_INT 1
103224: ARRAY
103225: PPUSH
103226: CALL_OW 302
103230: NOT
103231: PUSH
103232: LD_VAR 0 5
103236: PUSH
103237: LD_INT 1
103239: ARRAY
103240: PPUSH
103241: CALL_OW 255
103245: PUSH
103246: LD_VAR 0 1
103250: PPUSH
103251: CALL_OW 255
103255: NONEQUAL
103256: OR
103257: IFFALSE 103363
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
103259: LD_VAR 0 5
103263: PUSH
103264: LD_INT 1
103266: ARRAY
103267: PPUSH
103268: CALL_OW 305
103272: PUSH
103273: LD_VAR 0 5
103277: PUSH
103278: LD_INT 1
103280: ARRAY
103281: PPUSH
103282: CALL_OW 255
103286: PUSH
103287: LD_VAR 0 1
103291: PPUSH
103292: CALL_OW 255
103296: EQUAL
103297: AND
103298: IFFALSE 103322
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
103300: LD_VAR 0 5
103304: PUSH
103305: LD_INT 1
103307: ARRAY
103308: PPUSH
103309: LD_VAR 0 5
103313: PUSH
103314: LD_INT 2
103316: ARRAY
103317: PPUSH
103318: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
103322: LD_ADDR_EXP 153
103326: PUSH
103327: LD_EXP 153
103331: PPUSH
103332: LD_VAR 0 4
103336: PPUSH
103337: LD_EXP 153
103341: PUSH
103342: LD_VAR 0 4
103346: ARRAY
103347: PPUSH
103348: LD_VAR 0 3
103352: PPUSH
103353: CALL_OW 3
103357: PPUSH
103358: CALL_OW 1
103362: ST_TO_ADDR
// end ; end ;
103363: GO 103192
103365: POP
103366: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
103367: LD_VAR 0 1
103371: PPUSH
103372: LD_EXP 153
103376: PUSH
103377: LD_VAR 0 4
103381: ARRAY
103382: PUSH
103383: LD_INT 0
103385: PLUS
103386: PPUSH
103387: CALL_OW 505
// end ;
103391: LD_VAR 0 2
103395: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
103396: LD_INT 0
103398: PPUSH
103399: PPUSH
103400: PPUSH
103401: PPUSH
// if not hack in hackTanks then
103402: LD_VAR 0 1
103406: PUSH
103407: LD_EXP 152
103411: IN
103412: NOT
103413: IFFALSE 103417
// exit ;
103415: GO 103502
// index := GetElementIndex ( hackTanks , hack ) ;
103417: LD_ADDR_VAR 0 5
103421: PUSH
103422: LD_EXP 152
103426: PPUSH
103427: LD_VAR 0 1
103431: PPUSH
103432: CALL 24147 0 2
103436: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
103437: LD_ADDR_VAR 0 4
103441: PUSH
103442: DOUBLE
103443: LD_INT 1
103445: DEC
103446: ST_TO_ADDR
103447: LD_EXP 153
103451: PUSH
103452: LD_VAR 0 5
103456: ARRAY
103457: PUSH
103458: FOR_TO
103459: IFFALSE 103500
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
103461: LD_EXP 153
103465: PUSH
103466: LD_VAR 0 5
103470: ARRAY
103471: PUSH
103472: LD_VAR 0 4
103476: ARRAY
103477: PUSH
103478: LD_INT 1
103480: ARRAY
103481: PUSH
103482: LD_VAR 0 2
103486: EQUAL
103487: IFFALSE 103498
// KillUnit ( vehicle ) ;
103489: LD_VAR 0 2
103493: PPUSH
103494: CALL_OW 66
103498: GO 103458
103500: POP
103501: POP
// end ;
103502: LD_VAR 0 3
103506: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
103507: LD_EXP 157
103511: NOT
103512: IFFALSE 103547
103514: GO 103516
103516: DISABLE
// begin initMiner := true ;
103517: LD_ADDR_EXP 157
103521: PUSH
103522: LD_INT 1
103524: ST_TO_ADDR
// minersList := [ ] ;
103525: LD_ADDR_EXP 158
103529: PUSH
103530: EMPTY
103531: ST_TO_ADDR
// minerMinesList := [ ] ;
103532: LD_ADDR_EXP 159
103536: PUSH
103537: EMPTY
103538: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
103539: LD_ADDR_EXP 160
103543: PUSH
103544: LD_INT 5
103546: ST_TO_ADDR
// end ;
103547: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
103548: LD_EXP 157
103552: PUSH
103553: LD_INT 34
103555: PUSH
103556: LD_EXP 36
103560: PUSH
103561: EMPTY
103562: LIST
103563: LIST
103564: PPUSH
103565: CALL_OW 69
103569: AND
103570: IFFALSE 104033
103572: GO 103574
103574: DISABLE
103575: LD_INT 0
103577: PPUSH
103578: PPUSH
103579: PPUSH
103580: PPUSH
// begin enable ;
103581: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
103582: LD_ADDR_VAR 0 1
103586: PUSH
103587: LD_INT 34
103589: PUSH
103590: LD_EXP 36
103594: PUSH
103595: EMPTY
103596: LIST
103597: LIST
103598: PPUSH
103599: CALL_OW 69
103603: PUSH
103604: FOR_IN
103605: IFFALSE 103677
// begin if not i in minersList then
103607: LD_VAR 0 1
103611: PUSH
103612: LD_EXP 158
103616: IN
103617: NOT
103618: IFFALSE 103675
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
103620: LD_ADDR_EXP 158
103624: PUSH
103625: LD_EXP 158
103629: PPUSH
103630: LD_EXP 158
103634: PUSH
103635: LD_INT 1
103637: PLUS
103638: PPUSH
103639: LD_VAR 0 1
103643: PPUSH
103644: CALL_OW 1
103648: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
103649: LD_ADDR_EXP 159
103653: PUSH
103654: LD_EXP 159
103658: PPUSH
103659: LD_EXP 159
103663: PUSH
103664: LD_INT 1
103666: PLUS
103667: PPUSH
103668: EMPTY
103669: PPUSH
103670: CALL_OW 1
103674: ST_TO_ADDR
// end end ;
103675: GO 103604
103677: POP
103678: POP
// for i := minerMinesList downto 1 do
103679: LD_ADDR_VAR 0 1
103683: PUSH
103684: DOUBLE
103685: LD_EXP 159
103689: INC
103690: ST_TO_ADDR
103691: LD_INT 1
103693: PUSH
103694: FOR_DOWNTO
103695: IFFALSE 104031
// begin if IsLive ( minersList [ i ] ) then
103697: LD_EXP 158
103701: PUSH
103702: LD_VAR 0 1
103706: ARRAY
103707: PPUSH
103708: CALL_OW 300
103712: IFFALSE 103740
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
103714: LD_EXP 158
103718: PUSH
103719: LD_VAR 0 1
103723: ARRAY
103724: PPUSH
103725: LD_EXP 159
103729: PUSH
103730: LD_VAR 0 1
103734: ARRAY
103735: PPUSH
103736: CALL_OW 505
// if not minerMinesList [ i ] then
103740: LD_EXP 159
103744: PUSH
103745: LD_VAR 0 1
103749: ARRAY
103750: NOT
103751: IFFALSE 103755
// continue ;
103753: GO 103694
// for j := minerMinesList [ i ] downto 1 do
103755: LD_ADDR_VAR 0 2
103759: PUSH
103760: DOUBLE
103761: LD_EXP 159
103765: PUSH
103766: LD_VAR 0 1
103770: ARRAY
103771: INC
103772: ST_TO_ADDR
103773: LD_INT 1
103775: PUSH
103776: FOR_DOWNTO
103777: IFFALSE 104027
// begin side := GetSide ( minersList [ i ] ) ;
103779: LD_ADDR_VAR 0 3
103783: PUSH
103784: LD_EXP 158
103788: PUSH
103789: LD_VAR 0 1
103793: ARRAY
103794: PPUSH
103795: CALL_OW 255
103799: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
103800: LD_ADDR_VAR 0 4
103804: PUSH
103805: LD_EXP 159
103809: PUSH
103810: LD_VAR 0 1
103814: ARRAY
103815: PUSH
103816: LD_VAR 0 2
103820: ARRAY
103821: PUSH
103822: LD_INT 1
103824: ARRAY
103825: PPUSH
103826: LD_EXP 159
103830: PUSH
103831: LD_VAR 0 1
103835: ARRAY
103836: PUSH
103837: LD_VAR 0 2
103841: ARRAY
103842: PUSH
103843: LD_INT 2
103845: ARRAY
103846: PPUSH
103847: CALL_OW 428
103851: ST_TO_ADDR
// if not tmp then
103852: LD_VAR 0 4
103856: NOT
103857: IFFALSE 103861
// continue ;
103859: GO 103776
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
103861: LD_VAR 0 4
103865: PUSH
103866: LD_INT 81
103868: PUSH
103869: LD_VAR 0 3
103873: PUSH
103874: EMPTY
103875: LIST
103876: LIST
103877: PPUSH
103878: CALL_OW 69
103882: IN
103883: PUSH
103884: LD_EXP 159
103888: PUSH
103889: LD_VAR 0 1
103893: ARRAY
103894: PUSH
103895: LD_VAR 0 2
103899: ARRAY
103900: PUSH
103901: LD_INT 1
103903: ARRAY
103904: PPUSH
103905: LD_EXP 159
103909: PUSH
103910: LD_VAR 0 1
103914: ARRAY
103915: PUSH
103916: LD_VAR 0 2
103920: ARRAY
103921: PUSH
103922: LD_INT 2
103924: ARRAY
103925: PPUSH
103926: CALL_OW 458
103930: AND
103931: IFFALSE 104025
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
103933: LD_EXP 159
103937: PUSH
103938: LD_VAR 0 1
103942: ARRAY
103943: PUSH
103944: LD_VAR 0 2
103948: ARRAY
103949: PUSH
103950: LD_INT 1
103952: ARRAY
103953: PPUSH
103954: LD_EXP 159
103958: PUSH
103959: LD_VAR 0 1
103963: ARRAY
103964: PUSH
103965: LD_VAR 0 2
103969: ARRAY
103970: PUSH
103971: LD_INT 2
103973: ARRAY
103974: PPUSH
103975: LD_VAR 0 3
103979: PPUSH
103980: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
103984: LD_ADDR_EXP 159
103988: PUSH
103989: LD_EXP 159
103993: PPUSH
103994: LD_VAR 0 1
103998: PPUSH
103999: LD_EXP 159
104003: PUSH
104004: LD_VAR 0 1
104008: ARRAY
104009: PPUSH
104010: LD_VAR 0 2
104014: PPUSH
104015: CALL_OW 3
104019: PPUSH
104020: CALL_OW 1
104024: ST_TO_ADDR
// end ; end ;
104025: GO 103776
104027: POP
104028: POP
// end ;
104029: GO 103694
104031: POP
104032: POP
// end ;
104033: PPOPN 4
104035: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
104036: LD_INT 0
104038: PPUSH
104039: PPUSH
// result := false ;
104040: LD_ADDR_VAR 0 4
104044: PUSH
104045: LD_INT 0
104047: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
104048: LD_VAR 0 1
104052: PPUSH
104053: CALL_OW 264
104057: PUSH
104058: LD_EXP 36
104062: EQUAL
104063: NOT
104064: IFFALSE 104068
// exit ;
104066: GO 104308
// index := GetElementIndex ( minersList , unit ) ;
104068: LD_ADDR_VAR 0 5
104072: PUSH
104073: LD_EXP 158
104077: PPUSH
104078: LD_VAR 0 1
104082: PPUSH
104083: CALL 24147 0 2
104087: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
104088: LD_EXP 159
104092: PUSH
104093: LD_VAR 0 5
104097: ARRAY
104098: PUSH
104099: LD_EXP 160
104103: GREATEREQUAL
104104: IFFALSE 104108
// exit ;
104106: GO 104308
// ComMoveXY ( unit , x , y ) ;
104108: LD_VAR 0 1
104112: PPUSH
104113: LD_VAR 0 2
104117: PPUSH
104118: LD_VAR 0 3
104122: PPUSH
104123: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
104127: LD_INT 35
104129: PPUSH
104130: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
104134: LD_VAR 0 1
104138: PPUSH
104139: LD_VAR 0 2
104143: PPUSH
104144: LD_VAR 0 3
104148: PPUSH
104149: CALL 54920 0 3
104153: NOT
104154: PUSH
104155: LD_VAR 0 1
104159: PPUSH
104160: CALL_OW 314
104164: AND
104165: IFFALSE 104169
// exit ;
104167: GO 104308
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
104169: LD_VAR 0 2
104173: PPUSH
104174: LD_VAR 0 3
104178: PPUSH
104179: CALL_OW 428
104183: PUSH
104184: LD_VAR 0 1
104188: EQUAL
104189: PUSH
104190: LD_VAR 0 1
104194: PPUSH
104195: CALL_OW 314
104199: NOT
104200: AND
104201: IFFALSE 104127
// PlaySoundXY ( x , y , PlantMine ) ;
104203: LD_VAR 0 2
104207: PPUSH
104208: LD_VAR 0 3
104212: PPUSH
104213: LD_STRING PlantMine
104215: PPUSH
104216: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
104220: LD_VAR 0 2
104224: PPUSH
104225: LD_VAR 0 3
104229: PPUSH
104230: LD_VAR 0 1
104234: PPUSH
104235: CALL_OW 255
104239: PPUSH
104240: LD_INT 0
104242: PPUSH
104243: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
104247: LD_ADDR_EXP 159
104251: PUSH
104252: LD_EXP 159
104256: PPUSH
104257: LD_VAR 0 5
104261: PUSH
104262: LD_EXP 159
104266: PUSH
104267: LD_VAR 0 5
104271: ARRAY
104272: PUSH
104273: LD_INT 1
104275: PLUS
104276: PUSH
104277: EMPTY
104278: LIST
104279: LIST
104280: PPUSH
104281: LD_VAR 0 2
104285: PUSH
104286: LD_VAR 0 3
104290: PUSH
104291: EMPTY
104292: LIST
104293: LIST
104294: PPUSH
104295: CALL 24362 0 3
104299: ST_TO_ADDR
// result := true ;
104300: LD_ADDR_VAR 0 4
104304: PUSH
104305: LD_INT 1
104307: ST_TO_ADDR
// end ;
104308: LD_VAR 0 4
104312: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
104313: LD_INT 0
104315: PPUSH
104316: PPUSH
104317: PPUSH
// if not unit in minersList then
104318: LD_VAR 0 1
104322: PUSH
104323: LD_EXP 158
104327: IN
104328: NOT
104329: IFFALSE 104333
// exit ;
104331: GO 104725
// index := GetElementIndex ( minersList , unit ) ;
104333: LD_ADDR_VAR 0 6
104337: PUSH
104338: LD_EXP 158
104342: PPUSH
104343: LD_VAR 0 1
104347: PPUSH
104348: CALL 24147 0 2
104352: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
104353: LD_ADDR_VAR 0 5
104357: PUSH
104358: DOUBLE
104359: LD_EXP 159
104363: PUSH
104364: LD_VAR 0 6
104368: ARRAY
104369: INC
104370: ST_TO_ADDR
104371: LD_INT 1
104373: PUSH
104374: FOR_DOWNTO
104375: IFFALSE 104536
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
104377: LD_EXP 159
104381: PUSH
104382: LD_VAR 0 6
104386: ARRAY
104387: PUSH
104388: LD_VAR 0 5
104392: ARRAY
104393: PUSH
104394: LD_INT 1
104396: ARRAY
104397: PUSH
104398: LD_VAR 0 2
104402: EQUAL
104403: PUSH
104404: LD_EXP 159
104408: PUSH
104409: LD_VAR 0 6
104413: ARRAY
104414: PUSH
104415: LD_VAR 0 5
104419: ARRAY
104420: PUSH
104421: LD_INT 2
104423: ARRAY
104424: PUSH
104425: LD_VAR 0 3
104429: EQUAL
104430: AND
104431: IFFALSE 104534
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
104433: LD_EXP 159
104437: PUSH
104438: LD_VAR 0 6
104442: ARRAY
104443: PUSH
104444: LD_VAR 0 5
104448: ARRAY
104449: PUSH
104450: LD_INT 1
104452: ARRAY
104453: PPUSH
104454: LD_EXP 159
104458: PUSH
104459: LD_VAR 0 6
104463: ARRAY
104464: PUSH
104465: LD_VAR 0 5
104469: ARRAY
104470: PUSH
104471: LD_INT 2
104473: ARRAY
104474: PPUSH
104475: LD_VAR 0 1
104479: PPUSH
104480: CALL_OW 255
104484: PPUSH
104485: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
104489: LD_ADDR_EXP 159
104493: PUSH
104494: LD_EXP 159
104498: PPUSH
104499: LD_VAR 0 6
104503: PPUSH
104504: LD_EXP 159
104508: PUSH
104509: LD_VAR 0 6
104513: ARRAY
104514: PPUSH
104515: LD_VAR 0 5
104519: PPUSH
104520: CALL_OW 3
104524: PPUSH
104525: CALL_OW 1
104529: ST_TO_ADDR
// exit ;
104530: POP
104531: POP
104532: GO 104725
// end ; end ;
104534: GO 104374
104536: POP
104537: POP
// for i := minerMinesList [ index ] downto 1 do
104538: LD_ADDR_VAR 0 5
104542: PUSH
104543: DOUBLE
104544: LD_EXP 159
104548: PUSH
104549: LD_VAR 0 6
104553: ARRAY
104554: INC
104555: ST_TO_ADDR
104556: LD_INT 1
104558: PUSH
104559: FOR_DOWNTO
104560: IFFALSE 104723
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
104562: LD_EXP 159
104566: PUSH
104567: LD_VAR 0 6
104571: ARRAY
104572: PUSH
104573: LD_VAR 0 5
104577: ARRAY
104578: PUSH
104579: LD_INT 1
104581: ARRAY
104582: PPUSH
104583: LD_EXP 159
104587: PUSH
104588: LD_VAR 0 6
104592: ARRAY
104593: PUSH
104594: LD_VAR 0 5
104598: ARRAY
104599: PUSH
104600: LD_INT 2
104602: ARRAY
104603: PPUSH
104604: LD_VAR 0 2
104608: PPUSH
104609: LD_VAR 0 3
104613: PPUSH
104614: CALL_OW 298
104618: PUSH
104619: LD_INT 6
104621: LESS
104622: IFFALSE 104721
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
104624: LD_EXP 159
104628: PUSH
104629: LD_VAR 0 6
104633: ARRAY
104634: PUSH
104635: LD_VAR 0 5
104639: ARRAY
104640: PUSH
104641: LD_INT 1
104643: ARRAY
104644: PPUSH
104645: LD_EXP 159
104649: PUSH
104650: LD_VAR 0 6
104654: ARRAY
104655: PUSH
104656: LD_VAR 0 5
104660: ARRAY
104661: PUSH
104662: LD_INT 2
104664: ARRAY
104665: PPUSH
104666: LD_VAR 0 1
104670: PPUSH
104671: CALL_OW 255
104675: PPUSH
104676: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
104680: LD_ADDR_EXP 159
104684: PUSH
104685: LD_EXP 159
104689: PPUSH
104690: LD_VAR 0 6
104694: PPUSH
104695: LD_EXP 159
104699: PUSH
104700: LD_VAR 0 6
104704: ARRAY
104705: PPUSH
104706: LD_VAR 0 5
104710: PPUSH
104711: CALL_OW 3
104715: PPUSH
104716: CALL_OW 1
104720: ST_TO_ADDR
// end ; end ;
104721: GO 104559
104723: POP
104724: POP
// end ;
104725: LD_VAR 0 4
104729: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
104730: LD_INT 0
104732: PPUSH
104733: PPUSH
104734: PPUSH
104735: PPUSH
104736: PPUSH
104737: PPUSH
104738: PPUSH
104739: PPUSH
104740: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
104741: LD_VAR 0 1
104745: PPUSH
104746: CALL_OW 264
104750: PUSH
104751: LD_EXP 36
104755: EQUAL
104756: NOT
104757: PUSH
104758: LD_VAR 0 1
104762: PUSH
104763: LD_EXP 158
104767: IN
104768: NOT
104769: OR
104770: IFFALSE 104774
// exit ;
104772: GO 105096
// index := GetElementIndex ( minersList , unit ) ;
104774: LD_ADDR_VAR 0 6
104778: PUSH
104779: LD_EXP 158
104783: PPUSH
104784: LD_VAR 0 1
104788: PPUSH
104789: CALL 24147 0 2
104793: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
104794: LD_ADDR_VAR 0 8
104798: PUSH
104799: LD_EXP 160
104803: PUSH
104804: LD_EXP 159
104808: PUSH
104809: LD_VAR 0 6
104813: ARRAY
104814: MINUS
104815: ST_TO_ADDR
// if not minesFreeAmount then
104816: LD_VAR 0 8
104820: NOT
104821: IFFALSE 104825
// exit ;
104823: GO 105096
// tmp := [ ] ;
104825: LD_ADDR_VAR 0 7
104829: PUSH
104830: EMPTY
104831: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
104832: LD_ADDR_VAR 0 5
104836: PUSH
104837: DOUBLE
104838: LD_INT 1
104840: DEC
104841: ST_TO_ADDR
104842: LD_VAR 0 8
104846: PUSH
104847: FOR_TO
104848: IFFALSE 105043
// begin _d := rand ( 0 , 5 ) ;
104850: LD_ADDR_VAR 0 11
104854: PUSH
104855: LD_INT 0
104857: PPUSH
104858: LD_INT 5
104860: PPUSH
104861: CALL_OW 12
104865: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
104866: LD_ADDR_VAR 0 12
104870: PUSH
104871: LD_INT 2
104873: PPUSH
104874: LD_INT 6
104876: PPUSH
104877: CALL_OW 12
104881: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
104882: LD_ADDR_VAR 0 9
104886: PUSH
104887: LD_VAR 0 2
104891: PPUSH
104892: LD_VAR 0 11
104896: PPUSH
104897: LD_VAR 0 12
104901: PPUSH
104902: CALL_OW 272
104906: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
104907: LD_ADDR_VAR 0 10
104911: PUSH
104912: LD_VAR 0 3
104916: PPUSH
104917: LD_VAR 0 11
104921: PPUSH
104922: LD_VAR 0 12
104926: PPUSH
104927: CALL_OW 273
104931: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
104932: LD_VAR 0 9
104936: PPUSH
104937: LD_VAR 0 10
104941: PPUSH
104942: CALL_OW 488
104946: PUSH
104947: LD_VAR 0 9
104951: PUSH
104952: LD_VAR 0 10
104956: PUSH
104957: EMPTY
104958: LIST
104959: LIST
104960: PUSH
104961: LD_VAR 0 7
104965: IN
104966: NOT
104967: AND
104968: PUSH
104969: LD_VAR 0 9
104973: PPUSH
104974: LD_VAR 0 10
104978: PPUSH
104979: CALL_OW 458
104983: NOT
104984: AND
104985: IFFALSE 105027
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
104987: LD_ADDR_VAR 0 7
104991: PUSH
104992: LD_VAR 0 7
104996: PPUSH
104997: LD_VAR 0 7
105001: PUSH
105002: LD_INT 1
105004: PLUS
105005: PPUSH
105006: LD_VAR 0 9
105010: PUSH
105011: LD_VAR 0 10
105015: PUSH
105016: EMPTY
105017: LIST
105018: LIST
105019: PPUSH
105020: CALL_OW 1
105024: ST_TO_ADDR
105025: GO 105041
// i := i - 1 ;
105027: LD_ADDR_VAR 0 5
105031: PUSH
105032: LD_VAR 0 5
105036: PUSH
105037: LD_INT 1
105039: MINUS
105040: ST_TO_ADDR
// end ;
105041: GO 104847
105043: POP
105044: POP
// for i in tmp do
105045: LD_ADDR_VAR 0 5
105049: PUSH
105050: LD_VAR 0 7
105054: PUSH
105055: FOR_IN
105056: IFFALSE 105094
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
105058: LD_VAR 0 1
105062: PPUSH
105063: LD_VAR 0 5
105067: PUSH
105068: LD_INT 1
105070: ARRAY
105071: PPUSH
105072: LD_VAR 0 5
105076: PUSH
105077: LD_INT 2
105079: ARRAY
105080: PPUSH
105081: CALL 104036 0 3
105085: NOT
105086: IFFALSE 105092
// exit ;
105088: POP
105089: POP
105090: GO 105096
105092: GO 105055
105094: POP
105095: POP
// end ;
105096: LD_VAR 0 4
105100: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
105101: LD_INT 0
105103: PPUSH
105104: PPUSH
105105: PPUSH
105106: PPUSH
105107: PPUSH
105108: PPUSH
105109: PPUSH
// if not GetClass ( unit ) = class_sniper then
105110: LD_VAR 0 1
105114: PPUSH
105115: CALL_OW 257
105119: PUSH
105120: LD_INT 5
105122: EQUAL
105123: NOT
105124: IFFALSE 105128
// exit ;
105126: GO 105516
// dist := 8 ;
105128: LD_ADDR_VAR 0 5
105132: PUSH
105133: LD_INT 8
105135: ST_TO_ADDR
// viewRange := 12 ;
105136: LD_ADDR_VAR 0 7
105140: PUSH
105141: LD_INT 12
105143: ST_TO_ADDR
// side := GetSide ( unit ) ;
105144: LD_ADDR_VAR 0 6
105148: PUSH
105149: LD_VAR 0 1
105153: PPUSH
105154: CALL_OW 255
105158: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
105159: LD_INT 61
105161: PPUSH
105162: LD_VAR 0 6
105166: PPUSH
105167: CALL_OW 321
105171: PUSH
105172: LD_INT 2
105174: EQUAL
105175: IFFALSE 105185
// viewRange := 16 ;
105177: LD_ADDR_VAR 0 7
105181: PUSH
105182: LD_INT 16
105184: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
105185: LD_VAR 0 1
105189: PPUSH
105190: LD_VAR 0 2
105194: PPUSH
105195: LD_VAR 0 3
105199: PPUSH
105200: CALL_OW 297
105204: PUSH
105205: LD_VAR 0 5
105209: GREATER
105210: IFFALSE 105289
// begin ComMoveXY ( unit , x , y ) ;
105212: LD_VAR 0 1
105216: PPUSH
105217: LD_VAR 0 2
105221: PPUSH
105222: LD_VAR 0 3
105226: PPUSH
105227: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
105231: LD_INT 35
105233: PPUSH
105234: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
105238: LD_VAR 0 1
105242: PPUSH
105243: LD_VAR 0 2
105247: PPUSH
105248: LD_VAR 0 3
105252: PPUSH
105253: CALL 54920 0 3
105257: NOT
105258: IFFALSE 105262
// exit ;
105260: GO 105516
// until GetDistUnitXY ( unit , x , y ) < dist ;
105262: LD_VAR 0 1
105266: PPUSH
105267: LD_VAR 0 2
105271: PPUSH
105272: LD_VAR 0 3
105276: PPUSH
105277: CALL_OW 297
105281: PUSH
105282: LD_VAR 0 5
105286: LESS
105287: IFFALSE 105231
// end ; ComTurnXY ( unit , x , y ) ;
105289: LD_VAR 0 1
105293: PPUSH
105294: LD_VAR 0 2
105298: PPUSH
105299: LD_VAR 0 3
105303: PPUSH
105304: CALL_OW 118
// wait ( 5 ) ;
105308: LD_INT 5
105310: PPUSH
105311: CALL_OW 67
// _d := GetDir ( unit ) ;
105315: LD_ADDR_VAR 0 10
105319: PUSH
105320: LD_VAR 0 1
105324: PPUSH
105325: CALL_OW 254
105329: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
105330: LD_ADDR_VAR 0 8
105334: PUSH
105335: LD_VAR 0 1
105339: PPUSH
105340: CALL_OW 250
105344: PPUSH
105345: LD_VAR 0 10
105349: PPUSH
105350: LD_VAR 0 5
105354: PPUSH
105355: CALL_OW 272
105359: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
105360: LD_ADDR_VAR 0 9
105364: PUSH
105365: LD_VAR 0 1
105369: PPUSH
105370: CALL_OW 251
105374: PPUSH
105375: LD_VAR 0 10
105379: PPUSH
105380: LD_VAR 0 5
105384: PPUSH
105385: CALL_OW 273
105389: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
105390: LD_VAR 0 8
105394: PPUSH
105395: LD_VAR 0 9
105399: PPUSH
105400: CALL_OW 488
105404: NOT
105405: IFFALSE 105409
// exit ;
105407: GO 105516
// ComAnimCustom ( unit , 1 ) ;
105409: LD_VAR 0 1
105413: PPUSH
105414: LD_INT 1
105416: PPUSH
105417: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
105421: LD_VAR 0 8
105425: PPUSH
105426: LD_VAR 0 9
105430: PPUSH
105431: LD_VAR 0 6
105435: PPUSH
105436: LD_VAR 0 7
105440: PPUSH
105441: CALL_OW 330
// repeat wait ( 1 ) ;
105445: LD_INT 1
105447: PPUSH
105448: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
105452: LD_VAR 0 1
105456: PPUSH
105457: CALL_OW 316
105461: PUSH
105462: LD_VAR 0 1
105466: PPUSH
105467: CALL_OW 314
105471: OR
105472: PUSH
105473: LD_VAR 0 1
105477: PPUSH
105478: CALL_OW 302
105482: NOT
105483: OR
105484: PUSH
105485: LD_VAR 0 1
105489: PPUSH
105490: CALL_OW 301
105494: OR
105495: IFFALSE 105445
// RemoveSeeing ( _x , _y , side ) ;
105497: LD_VAR 0 8
105501: PPUSH
105502: LD_VAR 0 9
105506: PPUSH
105507: LD_VAR 0 6
105511: PPUSH
105512: CALL_OW 331
// end ; end_of_file
105516: LD_VAR 0 4
105520: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
105521: LD_INT 0
105523: PPUSH
105524: PPUSH
105525: PPUSH
105526: PPUSH
105527: PPUSH
105528: PPUSH
105529: PPUSH
105530: PPUSH
105531: PPUSH
105532: PPUSH
105533: PPUSH
105534: PPUSH
105535: PPUSH
105536: PPUSH
105537: PPUSH
105538: PPUSH
105539: PPUSH
105540: PPUSH
105541: PPUSH
105542: PPUSH
105543: PPUSH
105544: PPUSH
105545: PPUSH
105546: PPUSH
105547: PPUSH
105548: PPUSH
105549: PPUSH
105550: PPUSH
105551: PPUSH
105552: PPUSH
105553: PPUSH
105554: PPUSH
105555: PPUSH
105556: PPUSH
// if not list then
105557: LD_VAR 0 1
105561: NOT
105562: IFFALSE 105566
// exit ;
105564: GO 110225
// base := list [ 1 ] ;
105566: LD_ADDR_VAR 0 3
105570: PUSH
105571: LD_VAR 0 1
105575: PUSH
105576: LD_INT 1
105578: ARRAY
105579: ST_TO_ADDR
// group := list [ 2 ] ;
105580: LD_ADDR_VAR 0 4
105584: PUSH
105585: LD_VAR 0 1
105589: PUSH
105590: LD_INT 2
105592: ARRAY
105593: ST_TO_ADDR
// path := list [ 3 ] ;
105594: LD_ADDR_VAR 0 5
105598: PUSH
105599: LD_VAR 0 1
105603: PUSH
105604: LD_INT 3
105606: ARRAY
105607: ST_TO_ADDR
// flags := list [ 4 ] ;
105608: LD_ADDR_VAR 0 6
105612: PUSH
105613: LD_VAR 0 1
105617: PUSH
105618: LD_INT 4
105620: ARRAY
105621: ST_TO_ADDR
// mined := [ ] ;
105622: LD_ADDR_VAR 0 27
105626: PUSH
105627: EMPTY
105628: ST_TO_ADDR
// bombed := [ ] ;
105629: LD_ADDR_VAR 0 28
105633: PUSH
105634: EMPTY
105635: ST_TO_ADDR
// healers := [ ] ;
105636: LD_ADDR_VAR 0 31
105640: PUSH
105641: EMPTY
105642: ST_TO_ADDR
// to_heal := [ ] ;
105643: LD_ADDR_VAR 0 30
105647: PUSH
105648: EMPTY
105649: ST_TO_ADDR
// repairs := [ ] ;
105650: LD_ADDR_VAR 0 33
105654: PUSH
105655: EMPTY
105656: ST_TO_ADDR
// to_repair := [ ] ;
105657: LD_ADDR_VAR 0 32
105661: PUSH
105662: EMPTY
105663: ST_TO_ADDR
// if not group or not path then
105664: LD_VAR 0 4
105668: NOT
105669: PUSH
105670: LD_VAR 0 5
105674: NOT
105675: OR
105676: IFFALSE 105680
// exit ;
105678: GO 110225
// side := GetSide ( group [ 1 ] ) ;
105680: LD_ADDR_VAR 0 35
105684: PUSH
105685: LD_VAR 0 4
105689: PUSH
105690: LD_INT 1
105692: ARRAY
105693: PPUSH
105694: CALL_OW 255
105698: ST_TO_ADDR
// if flags then
105699: LD_VAR 0 6
105703: IFFALSE 105847
// begin f_ignore_area := flags [ 1 ] ;
105705: LD_ADDR_VAR 0 17
105709: PUSH
105710: LD_VAR 0 6
105714: PUSH
105715: LD_INT 1
105717: ARRAY
105718: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
105719: LD_ADDR_VAR 0 18
105723: PUSH
105724: LD_VAR 0 6
105728: PUSH
105729: LD_INT 2
105731: ARRAY
105732: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
105733: LD_ADDR_VAR 0 19
105737: PUSH
105738: LD_VAR 0 6
105742: PUSH
105743: LD_INT 3
105745: ARRAY
105746: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
105747: LD_ADDR_VAR 0 20
105751: PUSH
105752: LD_VAR 0 6
105756: PUSH
105757: LD_INT 4
105759: ARRAY
105760: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
105761: LD_ADDR_VAR 0 21
105765: PUSH
105766: LD_VAR 0 6
105770: PUSH
105771: LD_INT 5
105773: ARRAY
105774: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
105775: LD_ADDR_VAR 0 22
105779: PUSH
105780: LD_VAR 0 6
105784: PUSH
105785: LD_INT 6
105787: ARRAY
105788: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
105789: LD_ADDR_VAR 0 23
105793: PUSH
105794: LD_VAR 0 6
105798: PUSH
105799: LD_INT 7
105801: ARRAY
105802: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
105803: LD_ADDR_VAR 0 24
105807: PUSH
105808: LD_VAR 0 6
105812: PUSH
105813: LD_INT 8
105815: ARRAY
105816: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
105817: LD_ADDR_VAR 0 25
105821: PUSH
105822: LD_VAR 0 6
105826: PUSH
105827: LD_INT 9
105829: ARRAY
105830: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
105831: LD_ADDR_VAR 0 26
105835: PUSH
105836: LD_VAR 0 6
105840: PUSH
105841: LD_INT 10
105843: ARRAY
105844: ST_TO_ADDR
// end else
105845: GO 105927
// begin f_ignore_area := false ;
105847: LD_ADDR_VAR 0 17
105851: PUSH
105852: LD_INT 0
105854: ST_TO_ADDR
// f_capture := false ;
105855: LD_ADDR_VAR 0 18
105859: PUSH
105860: LD_INT 0
105862: ST_TO_ADDR
// f_ignore_civ := false ;
105863: LD_ADDR_VAR 0 19
105867: PUSH
105868: LD_INT 0
105870: ST_TO_ADDR
// f_murder := false ;
105871: LD_ADDR_VAR 0 20
105875: PUSH
105876: LD_INT 0
105878: ST_TO_ADDR
// f_mines := false ;
105879: LD_ADDR_VAR 0 21
105883: PUSH
105884: LD_INT 0
105886: ST_TO_ADDR
// f_repair := false ;
105887: LD_ADDR_VAR 0 22
105891: PUSH
105892: LD_INT 0
105894: ST_TO_ADDR
// f_heal := false ;
105895: LD_ADDR_VAR 0 23
105899: PUSH
105900: LD_INT 0
105902: ST_TO_ADDR
// f_spacetime := false ;
105903: LD_ADDR_VAR 0 24
105907: PUSH
105908: LD_INT 0
105910: ST_TO_ADDR
// f_attack_depot := false ;
105911: LD_ADDR_VAR 0 25
105915: PUSH
105916: LD_INT 0
105918: ST_TO_ADDR
// f_crawl := false ;
105919: LD_ADDR_VAR 0 26
105923: PUSH
105924: LD_INT 0
105926: ST_TO_ADDR
// end ; if f_heal then
105927: LD_VAR 0 23
105931: IFFALSE 105958
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
105933: LD_ADDR_VAR 0 31
105937: PUSH
105938: LD_VAR 0 4
105942: PPUSH
105943: LD_INT 25
105945: PUSH
105946: LD_INT 4
105948: PUSH
105949: EMPTY
105950: LIST
105951: LIST
105952: PPUSH
105953: CALL_OW 72
105957: ST_TO_ADDR
// if f_repair then
105958: LD_VAR 0 22
105962: IFFALSE 105989
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
105964: LD_ADDR_VAR 0 33
105968: PUSH
105969: LD_VAR 0 4
105973: PPUSH
105974: LD_INT 25
105976: PUSH
105977: LD_INT 3
105979: PUSH
105980: EMPTY
105981: LIST
105982: LIST
105983: PPUSH
105984: CALL_OW 72
105988: ST_TO_ADDR
// units_path := [ ] ;
105989: LD_ADDR_VAR 0 16
105993: PUSH
105994: EMPTY
105995: ST_TO_ADDR
// for i = 1 to group do
105996: LD_ADDR_VAR 0 7
106000: PUSH
106001: DOUBLE
106002: LD_INT 1
106004: DEC
106005: ST_TO_ADDR
106006: LD_VAR 0 4
106010: PUSH
106011: FOR_TO
106012: IFFALSE 106041
// units_path := Replace ( units_path , i , path ) ;
106014: LD_ADDR_VAR 0 16
106018: PUSH
106019: LD_VAR 0 16
106023: PPUSH
106024: LD_VAR 0 7
106028: PPUSH
106029: LD_VAR 0 5
106033: PPUSH
106034: CALL_OW 1
106038: ST_TO_ADDR
106039: GO 106011
106041: POP
106042: POP
// repeat for i = group downto 1 do
106043: LD_ADDR_VAR 0 7
106047: PUSH
106048: DOUBLE
106049: LD_VAR 0 4
106053: INC
106054: ST_TO_ADDR
106055: LD_INT 1
106057: PUSH
106058: FOR_DOWNTO
106059: IFFALSE 110181
// begin wait ( 5 ) ;
106061: LD_INT 5
106063: PPUSH
106064: CALL_OW 67
// tmp := [ ] ;
106068: LD_ADDR_VAR 0 14
106072: PUSH
106073: EMPTY
106074: ST_TO_ADDR
// attacking := false ;
106075: LD_ADDR_VAR 0 29
106079: PUSH
106080: LD_INT 0
106082: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
106083: LD_VAR 0 4
106087: PUSH
106088: LD_VAR 0 7
106092: ARRAY
106093: PPUSH
106094: CALL_OW 301
106098: PUSH
106099: LD_VAR 0 4
106103: PUSH
106104: LD_VAR 0 7
106108: ARRAY
106109: NOT
106110: OR
106111: IFFALSE 106220
// begin if GetType ( group [ i ] ) = unit_human then
106113: LD_VAR 0 4
106117: PUSH
106118: LD_VAR 0 7
106122: ARRAY
106123: PPUSH
106124: CALL_OW 247
106128: PUSH
106129: LD_INT 1
106131: EQUAL
106132: IFFALSE 106178
// begin to_heal := to_heal diff group [ i ] ;
106134: LD_ADDR_VAR 0 30
106138: PUSH
106139: LD_VAR 0 30
106143: PUSH
106144: LD_VAR 0 4
106148: PUSH
106149: LD_VAR 0 7
106153: ARRAY
106154: DIFF
106155: ST_TO_ADDR
// healers := healers diff group [ i ] ;
106156: LD_ADDR_VAR 0 31
106160: PUSH
106161: LD_VAR 0 31
106165: PUSH
106166: LD_VAR 0 4
106170: PUSH
106171: LD_VAR 0 7
106175: ARRAY
106176: DIFF
106177: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
106178: LD_ADDR_VAR 0 4
106182: PUSH
106183: LD_VAR 0 4
106187: PPUSH
106188: LD_VAR 0 7
106192: PPUSH
106193: CALL_OW 3
106197: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
106198: LD_ADDR_VAR 0 16
106202: PUSH
106203: LD_VAR 0 16
106207: PPUSH
106208: LD_VAR 0 7
106212: PPUSH
106213: CALL_OW 3
106217: ST_TO_ADDR
// continue ;
106218: GO 106058
// end ; if f_repair then
106220: LD_VAR 0 22
106224: IFFALSE 106713
// begin if GetType ( group [ i ] ) = unit_vehicle then
106226: LD_VAR 0 4
106230: PUSH
106231: LD_VAR 0 7
106235: ARRAY
106236: PPUSH
106237: CALL_OW 247
106241: PUSH
106242: LD_INT 2
106244: EQUAL
106245: IFFALSE 106435
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
106247: LD_VAR 0 4
106251: PUSH
106252: LD_VAR 0 7
106256: ARRAY
106257: PPUSH
106258: CALL_OW 256
106262: PUSH
106263: LD_INT 700
106265: LESS
106266: PUSH
106267: LD_VAR 0 4
106271: PUSH
106272: LD_VAR 0 7
106276: ARRAY
106277: PUSH
106278: LD_VAR 0 32
106282: IN
106283: NOT
106284: AND
106285: IFFALSE 106309
// to_repair := to_repair union group [ i ] ;
106287: LD_ADDR_VAR 0 32
106291: PUSH
106292: LD_VAR 0 32
106296: PUSH
106297: LD_VAR 0 4
106301: PUSH
106302: LD_VAR 0 7
106306: ARRAY
106307: UNION
106308: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
106309: LD_VAR 0 4
106313: PUSH
106314: LD_VAR 0 7
106318: ARRAY
106319: PPUSH
106320: CALL_OW 256
106324: PUSH
106325: LD_INT 1000
106327: EQUAL
106328: PUSH
106329: LD_VAR 0 4
106333: PUSH
106334: LD_VAR 0 7
106338: ARRAY
106339: PUSH
106340: LD_VAR 0 32
106344: IN
106345: AND
106346: IFFALSE 106370
// to_repair := to_repair diff group [ i ] ;
106348: LD_ADDR_VAR 0 32
106352: PUSH
106353: LD_VAR 0 32
106357: PUSH
106358: LD_VAR 0 4
106362: PUSH
106363: LD_VAR 0 7
106367: ARRAY
106368: DIFF
106369: ST_TO_ADDR
// if group [ i ] in to_repair then
106370: LD_VAR 0 4
106374: PUSH
106375: LD_VAR 0 7
106379: ARRAY
106380: PUSH
106381: LD_VAR 0 32
106385: IN
106386: IFFALSE 106433
// begin if not IsInArea ( group [ i ] , f_repair ) then
106388: LD_VAR 0 4
106392: PUSH
106393: LD_VAR 0 7
106397: ARRAY
106398: PPUSH
106399: LD_VAR 0 22
106403: PPUSH
106404: CALL_OW 308
106408: NOT
106409: IFFALSE 106431
// ComMoveToArea ( group [ i ] , f_repair ) ;
106411: LD_VAR 0 4
106415: PUSH
106416: LD_VAR 0 7
106420: ARRAY
106421: PPUSH
106422: LD_VAR 0 22
106426: PPUSH
106427: CALL_OW 113
// continue ;
106431: GO 106058
// end ; end else
106433: GO 106713
// if group [ i ] in repairs then
106435: LD_VAR 0 4
106439: PUSH
106440: LD_VAR 0 7
106444: ARRAY
106445: PUSH
106446: LD_VAR 0 33
106450: IN
106451: IFFALSE 106713
// begin if IsInUnit ( group [ i ] ) then
106453: LD_VAR 0 4
106457: PUSH
106458: LD_VAR 0 7
106462: ARRAY
106463: PPUSH
106464: CALL_OW 310
106468: IFFALSE 106536
// begin z := IsInUnit ( group [ i ] ) ;
106470: LD_ADDR_VAR 0 13
106474: PUSH
106475: LD_VAR 0 4
106479: PUSH
106480: LD_VAR 0 7
106484: ARRAY
106485: PPUSH
106486: CALL_OW 310
106490: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
106491: LD_VAR 0 13
106495: PUSH
106496: LD_VAR 0 32
106500: IN
106501: PUSH
106502: LD_VAR 0 13
106506: PPUSH
106507: LD_VAR 0 22
106511: PPUSH
106512: CALL_OW 308
106516: AND
106517: IFFALSE 106534
// ComExitVehicle ( group [ i ] ) ;
106519: LD_VAR 0 4
106523: PUSH
106524: LD_VAR 0 7
106528: ARRAY
106529: PPUSH
106530: CALL_OW 121
// end else
106534: GO 106713
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
106536: LD_ADDR_VAR 0 13
106540: PUSH
106541: LD_VAR 0 4
106545: PPUSH
106546: LD_INT 95
106548: PUSH
106549: LD_VAR 0 22
106553: PUSH
106554: EMPTY
106555: LIST
106556: LIST
106557: PUSH
106558: LD_INT 58
106560: PUSH
106561: EMPTY
106562: LIST
106563: PUSH
106564: EMPTY
106565: LIST
106566: LIST
106567: PPUSH
106568: CALL_OW 72
106572: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
106573: LD_VAR 0 4
106577: PUSH
106578: LD_VAR 0 7
106582: ARRAY
106583: PPUSH
106584: CALL_OW 314
106588: NOT
106589: IFFALSE 106711
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
106591: LD_ADDR_VAR 0 10
106595: PUSH
106596: LD_VAR 0 13
106600: PPUSH
106601: LD_VAR 0 4
106605: PUSH
106606: LD_VAR 0 7
106610: ARRAY
106611: PPUSH
106612: CALL_OW 74
106616: ST_TO_ADDR
// if not x then
106617: LD_VAR 0 10
106621: NOT
106622: IFFALSE 106626
// continue ;
106624: GO 106058
// if GetLives ( x ) < 1000 then
106626: LD_VAR 0 10
106630: PPUSH
106631: CALL_OW 256
106635: PUSH
106636: LD_INT 1000
106638: LESS
106639: IFFALSE 106663
// ComRepairVehicle ( group [ i ] , x ) else
106641: LD_VAR 0 4
106645: PUSH
106646: LD_VAR 0 7
106650: ARRAY
106651: PPUSH
106652: LD_VAR 0 10
106656: PPUSH
106657: CALL_OW 129
106661: GO 106711
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
106663: LD_VAR 0 23
106667: PUSH
106668: LD_VAR 0 4
106672: PUSH
106673: LD_VAR 0 7
106677: ARRAY
106678: PPUSH
106679: CALL_OW 256
106683: PUSH
106684: LD_INT 1000
106686: LESS
106687: AND
106688: NOT
106689: IFFALSE 106711
// ComEnterUnit ( group [ i ] , x ) ;
106691: LD_VAR 0 4
106695: PUSH
106696: LD_VAR 0 7
106700: ARRAY
106701: PPUSH
106702: LD_VAR 0 10
106706: PPUSH
106707: CALL_OW 120
// end ; continue ;
106711: GO 106058
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
106713: LD_VAR 0 23
106717: PUSH
106718: LD_VAR 0 4
106722: PUSH
106723: LD_VAR 0 7
106727: ARRAY
106728: PPUSH
106729: CALL_OW 247
106733: PUSH
106734: LD_INT 1
106736: EQUAL
106737: AND
106738: IFFALSE 107216
// begin if group [ i ] in healers then
106740: LD_VAR 0 4
106744: PUSH
106745: LD_VAR 0 7
106749: ARRAY
106750: PUSH
106751: LD_VAR 0 31
106755: IN
106756: IFFALSE 107029
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
106758: LD_VAR 0 4
106762: PUSH
106763: LD_VAR 0 7
106767: ARRAY
106768: PPUSH
106769: LD_VAR 0 23
106773: PPUSH
106774: CALL_OW 308
106778: NOT
106779: PUSH
106780: LD_VAR 0 4
106784: PUSH
106785: LD_VAR 0 7
106789: ARRAY
106790: PPUSH
106791: CALL_OW 314
106795: NOT
106796: AND
106797: IFFALSE 106821
// ComMoveToArea ( group [ i ] , f_heal ) else
106799: LD_VAR 0 4
106803: PUSH
106804: LD_VAR 0 7
106808: ARRAY
106809: PPUSH
106810: LD_VAR 0 23
106814: PPUSH
106815: CALL_OW 113
106819: GO 107027
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
106821: LD_VAR 0 4
106825: PUSH
106826: LD_VAR 0 7
106830: ARRAY
106831: PPUSH
106832: CALL 53443 0 1
106836: PPUSH
106837: CALL_OW 256
106841: PUSH
106842: LD_INT 1000
106844: EQUAL
106845: IFFALSE 106864
// ComStop ( group [ i ] ) else
106847: LD_VAR 0 4
106851: PUSH
106852: LD_VAR 0 7
106856: ARRAY
106857: PPUSH
106858: CALL_OW 141
106862: GO 107027
// if not HasTask ( group [ i ] ) and to_heal then
106864: LD_VAR 0 4
106868: PUSH
106869: LD_VAR 0 7
106873: ARRAY
106874: PPUSH
106875: CALL_OW 314
106879: NOT
106880: PUSH
106881: LD_VAR 0 30
106885: AND
106886: IFFALSE 107027
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
106888: LD_ADDR_VAR 0 13
106892: PUSH
106893: LD_VAR 0 30
106897: PPUSH
106898: LD_INT 3
106900: PUSH
106901: LD_INT 54
106903: PUSH
106904: EMPTY
106905: LIST
106906: PUSH
106907: EMPTY
106908: LIST
106909: LIST
106910: PPUSH
106911: CALL_OW 72
106915: PPUSH
106916: LD_VAR 0 4
106920: PUSH
106921: LD_VAR 0 7
106925: ARRAY
106926: PPUSH
106927: CALL_OW 74
106931: ST_TO_ADDR
// if z then
106932: LD_VAR 0 13
106936: IFFALSE 107027
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
106938: LD_INT 91
106940: PUSH
106941: LD_VAR 0 13
106945: PUSH
106946: LD_INT 10
106948: PUSH
106949: EMPTY
106950: LIST
106951: LIST
106952: LIST
106953: PUSH
106954: LD_INT 81
106956: PUSH
106957: LD_VAR 0 13
106961: PPUSH
106962: CALL_OW 255
106966: PUSH
106967: EMPTY
106968: LIST
106969: LIST
106970: PUSH
106971: EMPTY
106972: LIST
106973: LIST
106974: PPUSH
106975: CALL_OW 69
106979: PUSH
106980: LD_INT 0
106982: EQUAL
106983: IFFALSE 107007
// ComHeal ( group [ i ] , z ) else
106985: LD_VAR 0 4
106989: PUSH
106990: LD_VAR 0 7
106994: ARRAY
106995: PPUSH
106996: LD_VAR 0 13
107000: PPUSH
107001: CALL_OW 128
107005: GO 107027
// ComMoveToArea ( group [ i ] , f_heal ) ;
107007: LD_VAR 0 4
107011: PUSH
107012: LD_VAR 0 7
107016: ARRAY
107017: PPUSH
107018: LD_VAR 0 23
107022: PPUSH
107023: CALL_OW 113
// end ; continue ;
107027: GO 106058
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
107029: LD_VAR 0 4
107033: PUSH
107034: LD_VAR 0 7
107038: ARRAY
107039: PPUSH
107040: CALL_OW 256
107044: PUSH
107045: LD_INT 700
107047: LESS
107048: PUSH
107049: LD_VAR 0 4
107053: PUSH
107054: LD_VAR 0 7
107058: ARRAY
107059: PUSH
107060: LD_VAR 0 30
107064: IN
107065: NOT
107066: AND
107067: IFFALSE 107091
// to_heal := to_heal union group [ i ] ;
107069: LD_ADDR_VAR 0 30
107073: PUSH
107074: LD_VAR 0 30
107078: PUSH
107079: LD_VAR 0 4
107083: PUSH
107084: LD_VAR 0 7
107088: ARRAY
107089: UNION
107090: ST_TO_ADDR
// if group [ i ] in to_heal then
107091: LD_VAR 0 4
107095: PUSH
107096: LD_VAR 0 7
107100: ARRAY
107101: PUSH
107102: LD_VAR 0 30
107106: IN
107107: IFFALSE 107216
// begin if GetLives ( group [ i ] ) = 1000 then
107109: LD_VAR 0 4
107113: PUSH
107114: LD_VAR 0 7
107118: ARRAY
107119: PPUSH
107120: CALL_OW 256
107124: PUSH
107125: LD_INT 1000
107127: EQUAL
107128: IFFALSE 107154
// to_heal := to_heal diff group [ i ] else
107130: LD_ADDR_VAR 0 30
107134: PUSH
107135: LD_VAR 0 30
107139: PUSH
107140: LD_VAR 0 4
107144: PUSH
107145: LD_VAR 0 7
107149: ARRAY
107150: DIFF
107151: ST_TO_ADDR
107152: GO 107216
// begin if not IsInArea ( group [ i ] , to_heal ) then
107154: LD_VAR 0 4
107158: PUSH
107159: LD_VAR 0 7
107163: ARRAY
107164: PPUSH
107165: LD_VAR 0 30
107169: PPUSH
107170: CALL_OW 308
107174: NOT
107175: IFFALSE 107199
// ComMoveToArea ( group [ i ] , f_heal ) else
107177: LD_VAR 0 4
107181: PUSH
107182: LD_VAR 0 7
107186: ARRAY
107187: PPUSH
107188: LD_VAR 0 23
107192: PPUSH
107193: CALL_OW 113
107197: GO 107214
// ComHold ( group [ i ] ) ;
107199: LD_VAR 0 4
107203: PUSH
107204: LD_VAR 0 7
107208: ARRAY
107209: PPUSH
107210: CALL_OW 140
// continue ;
107214: GO 106058
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
107216: LD_VAR 0 4
107220: PUSH
107221: LD_VAR 0 7
107225: ARRAY
107226: PPUSH
107227: LD_INT 10
107229: PPUSH
107230: CALL 51863 0 2
107234: NOT
107235: PUSH
107236: LD_VAR 0 16
107240: PUSH
107241: LD_VAR 0 7
107245: ARRAY
107246: PUSH
107247: EMPTY
107248: EQUAL
107249: NOT
107250: AND
107251: IFFALSE 107517
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
107253: LD_VAR 0 4
107257: PUSH
107258: LD_VAR 0 7
107262: ARRAY
107263: PPUSH
107264: CALL_OW 262
107268: PUSH
107269: LD_INT 1
107271: PUSH
107272: LD_INT 2
107274: PUSH
107275: EMPTY
107276: LIST
107277: LIST
107278: IN
107279: IFFALSE 107320
// if GetFuel ( group [ i ] ) < 10 then
107281: LD_VAR 0 4
107285: PUSH
107286: LD_VAR 0 7
107290: ARRAY
107291: PPUSH
107292: CALL_OW 261
107296: PUSH
107297: LD_INT 10
107299: LESS
107300: IFFALSE 107320
// SetFuel ( group [ i ] , 12 ) ;
107302: LD_VAR 0 4
107306: PUSH
107307: LD_VAR 0 7
107311: ARRAY
107312: PPUSH
107313: LD_INT 12
107315: PPUSH
107316: CALL_OW 240
// if units_path [ i ] then
107320: LD_VAR 0 16
107324: PUSH
107325: LD_VAR 0 7
107329: ARRAY
107330: IFFALSE 107515
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
107332: LD_VAR 0 4
107336: PUSH
107337: LD_VAR 0 7
107341: ARRAY
107342: PPUSH
107343: LD_VAR 0 16
107347: PUSH
107348: LD_VAR 0 7
107352: ARRAY
107353: PUSH
107354: LD_INT 1
107356: ARRAY
107357: PUSH
107358: LD_INT 1
107360: ARRAY
107361: PPUSH
107362: LD_VAR 0 16
107366: PUSH
107367: LD_VAR 0 7
107371: ARRAY
107372: PUSH
107373: LD_INT 1
107375: ARRAY
107376: PUSH
107377: LD_INT 2
107379: ARRAY
107380: PPUSH
107381: CALL_OW 297
107385: PUSH
107386: LD_INT 6
107388: GREATER
107389: IFFALSE 107464
// begin if not HasTask ( group [ i ] ) then
107391: LD_VAR 0 4
107395: PUSH
107396: LD_VAR 0 7
107400: ARRAY
107401: PPUSH
107402: CALL_OW 314
107406: NOT
107407: IFFALSE 107462
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
107409: LD_VAR 0 4
107413: PUSH
107414: LD_VAR 0 7
107418: ARRAY
107419: PPUSH
107420: LD_VAR 0 16
107424: PUSH
107425: LD_VAR 0 7
107429: ARRAY
107430: PUSH
107431: LD_INT 1
107433: ARRAY
107434: PUSH
107435: LD_INT 1
107437: ARRAY
107438: PPUSH
107439: LD_VAR 0 16
107443: PUSH
107444: LD_VAR 0 7
107448: ARRAY
107449: PUSH
107450: LD_INT 1
107452: ARRAY
107453: PUSH
107454: LD_INT 2
107456: ARRAY
107457: PPUSH
107458: CALL_OW 114
// end else
107462: GO 107515
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
107464: LD_ADDR_VAR 0 15
107468: PUSH
107469: LD_VAR 0 16
107473: PUSH
107474: LD_VAR 0 7
107478: ARRAY
107479: PPUSH
107480: LD_INT 1
107482: PPUSH
107483: CALL_OW 3
107487: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
107488: LD_ADDR_VAR 0 16
107492: PUSH
107493: LD_VAR 0 16
107497: PPUSH
107498: LD_VAR 0 7
107502: PPUSH
107503: LD_VAR 0 15
107507: PPUSH
107508: CALL_OW 1
107512: ST_TO_ADDR
// continue ;
107513: GO 106058
// end ; end ; end else
107515: GO 110179
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
107517: LD_ADDR_VAR 0 14
107521: PUSH
107522: LD_INT 81
107524: PUSH
107525: LD_VAR 0 4
107529: PUSH
107530: LD_VAR 0 7
107534: ARRAY
107535: PPUSH
107536: CALL_OW 255
107540: PUSH
107541: EMPTY
107542: LIST
107543: LIST
107544: PPUSH
107545: CALL_OW 69
107549: ST_TO_ADDR
// if not tmp then
107550: LD_VAR 0 14
107554: NOT
107555: IFFALSE 107559
// continue ;
107557: GO 106058
// if f_ignore_area then
107559: LD_VAR 0 17
107563: IFFALSE 107651
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
107565: LD_ADDR_VAR 0 15
107569: PUSH
107570: LD_VAR 0 14
107574: PPUSH
107575: LD_INT 3
107577: PUSH
107578: LD_INT 92
107580: PUSH
107581: LD_VAR 0 17
107585: PUSH
107586: LD_INT 1
107588: ARRAY
107589: PUSH
107590: LD_VAR 0 17
107594: PUSH
107595: LD_INT 2
107597: ARRAY
107598: PUSH
107599: LD_VAR 0 17
107603: PUSH
107604: LD_INT 3
107606: ARRAY
107607: PUSH
107608: EMPTY
107609: LIST
107610: LIST
107611: LIST
107612: LIST
107613: PUSH
107614: EMPTY
107615: LIST
107616: LIST
107617: PPUSH
107618: CALL_OW 72
107622: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
107623: LD_VAR 0 14
107627: PUSH
107628: LD_VAR 0 15
107632: DIFF
107633: IFFALSE 107651
// tmp := tmp diff tmp2 ;
107635: LD_ADDR_VAR 0 14
107639: PUSH
107640: LD_VAR 0 14
107644: PUSH
107645: LD_VAR 0 15
107649: DIFF
107650: ST_TO_ADDR
// end ; if not f_murder then
107651: LD_VAR 0 20
107655: NOT
107656: IFFALSE 107714
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
107658: LD_ADDR_VAR 0 15
107662: PUSH
107663: LD_VAR 0 14
107667: PPUSH
107668: LD_INT 3
107670: PUSH
107671: LD_INT 50
107673: PUSH
107674: EMPTY
107675: LIST
107676: PUSH
107677: EMPTY
107678: LIST
107679: LIST
107680: PPUSH
107681: CALL_OW 72
107685: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
107686: LD_VAR 0 14
107690: PUSH
107691: LD_VAR 0 15
107695: DIFF
107696: IFFALSE 107714
// tmp := tmp diff tmp2 ;
107698: LD_ADDR_VAR 0 14
107702: PUSH
107703: LD_VAR 0 14
107707: PUSH
107708: LD_VAR 0 15
107712: DIFF
107713: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
107714: LD_ADDR_VAR 0 14
107718: PUSH
107719: LD_VAR 0 4
107723: PUSH
107724: LD_VAR 0 7
107728: ARRAY
107729: PPUSH
107730: LD_VAR 0 14
107734: PPUSH
107735: LD_INT 1
107737: PPUSH
107738: LD_INT 1
107740: PPUSH
107741: CALL 24797 0 4
107745: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
107746: LD_VAR 0 4
107750: PUSH
107751: LD_VAR 0 7
107755: ARRAY
107756: PPUSH
107757: CALL_OW 257
107761: PUSH
107762: LD_INT 1
107764: EQUAL
107765: IFFALSE 108213
// begin if WantPlant ( group [ i ] ) then
107767: LD_VAR 0 4
107771: PUSH
107772: LD_VAR 0 7
107776: ARRAY
107777: PPUSH
107778: CALL 24298 0 1
107782: IFFALSE 107786
// continue ;
107784: GO 106058
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
107786: LD_VAR 0 18
107790: PUSH
107791: LD_VAR 0 4
107795: PUSH
107796: LD_VAR 0 7
107800: ARRAY
107801: PPUSH
107802: CALL_OW 310
107806: NOT
107807: AND
107808: PUSH
107809: LD_VAR 0 14
107813: PUSH
107814: LD_INT 1
107816: ARRAY
107817: PUSH
107818: LD_VAR 0 14
107822: PPUSH
107823: LD_INT 21
107825: PUSH
107826: LD_INT 2
107828: PUSH
107829: EMPTY
107830: LIST
107831: LIST
107832: PUSH
107833: LD_INT 58
107835: PUSH
107836: EMPTY
107837: LIST
107838: PUSH
107839: EMPTY
107840: LIST
107841: LIST
107842: PPUSH
107843: CALL_OW 72
107847: IN
107848: AND
107849: IFFALSE 107885
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
107851: LD_VAR 0 4
107855: PUSH
107856: LD_VAR 0 7
107860: ARRAY
107861: PPUSH
107862: LD_VAR 0 14
107866: PUSH
107867: LD_INT 1
107869: ARRAY
107870: PPUSH
107871: CALL_OW 120
// attacking := true ;
107875: LD_ADDR_VAR 0 29
107879: PUSH
107880: LD_INT 1
107882: ST_TO_ADDR
// continue ;
107883: GO 106058
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
107885: LD_VAR 0 26
107889: PUSH
107890: LD_VAR 0 4
107894: PUSH
107895: LD_VAR 0 7
107899: ARRAY
107900: PPUSH
107901: CALL_OW 257
107905: PUSH
107906: LD_INT 1
107908: EQUAL
107909: AND
107910: PUSH
107911: LD_VAR 0 4
107915: PUSH
107916: LD_VAR 0 7
107920: ARRAY
107921: PPUSH
107922: CALL_OW 256
107926: PUSH
107927: LD_INT 800
107929: LESS
107930: AND
107931: PUSH
107932: LD_VAR 0 4
107936: PUSH
107937: LD_VAR 0 7
107941: ARRAY
107942: PPUSH
107943: CALL_OW 318
107947: NOT
107948: AND
107949: IFFALSE 107966
// ComCrawl ( group [ i ] ) ;
107951: LD_VAR 0 4
107955: PUSH
107956: LD_VAR 0 7
107960: ARRAY
107961: PPUSH
107962: CALL_OW 137
// if f_mines then
107966: LD_VAR 0 21
107970: IFFALSE 108213
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
107972: LD_VAR 0 14
107976: PUSH
107977: LD_INT 1
107979: ARRAY
107980: PPUSH
107981: CALL_OW 247
107985: PUSH
107986: LD_INT 3
107988: EQUAL
107989: PUSH
107990: LD_VAR 0 14
107994: PUSH
107995: LD_INT 1
107997: ARRAY
107998: PUSH
107999: LD_VAR 0 27
108003: IN
108004: NOT
108005: AND
108006: IFFALSE 108213
// begin x := GetX ( tmp [ 1 ] ) ;
108008: LD_ADDR_VAR 0 10
108012: PUSH
108013: LD_VAR 0 14
108017: PUSH
108018: LD_INT 1
108020: ARRAY
108021: PPUSH
108022: CALL_OW 250
108026: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
108027: LD_ADDR_VAR 0 11
108031: PUSH
108032: LD_VAR 0 14
108036: PUSH
108037: LD_INT 1
108039: ARRAY
108040: PPUSH
108041: CALL_OW 251
108045: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
108046: LD_ADDR_VAR 0 12
108050: PUSH
108051: LD_VAR 0 4
108055: PUSH
108056: LD_VAR 0 7
108060: ARRAY
108061: PPUSH
108062: CALL 51948 0 1
108066: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
108067: LD_VAR 0 4
108071: PUSH
108072: LD_VAR 0 7
108076: ARRAY
108077: PPUSH
108078: LD_VAR 0 10
108082: PPUSH
108083: LD_VAR 0 11
108087: PPUSH
108088: LD_VAR 0 14
108092: PUSH
108093: LD_INT 1
108095: ARRAY
108096: PPUSH
108097: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
108101: LD_VAR 0 4
108105: PUSH
108106: LD_VAR 0 7
108110: ARRAY
108111: PPUSH
108112: LD_VAR 0 10
108116: PPUSH
108117: LD_VAR 0 12
108121: PPUSH
108122: LD_INT 7
108124: PPUSH
108125: CALL_OW 272
108129: PPUSH
108130: LD_VAR 0 11
108134: PPUSH
108135: LD_VAR 0 12
108139: PPUSH
108140: LD_INT 7
108142: PPUSH
108143: CALL_OW 273
108147: PPUSH
108148: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
108152: LD_VAR 0 4
108156: PUSH
108157: LD_VAR 0 7
108161: ARRAY
108162: PPUSH
108163: LD_INT 71
108165: PPUSH
108166: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
108170: LD_ADDR_VAR 0 27
108174: PUSH
108175: LD_VAR 0 27
108179: PPUSH
108180: LD_VAR 0 27
108184: PUSH
108185: LD_INT 1
108187: PLUS
108188: PPUSH
108189: LD_VAR 0 14
108193: PUSH
108194: LD_INT 1
108196: ARRAY
108197: PPUSH
108198: CALL_OW 1
108202: ST_TO_ADDR
// attacking := true ;
108203: LD_ADDR_VAR 0 29
108207: PUSH
108208: LD_INT 1
108210: ST_TO_ADDR
// continue ;
108211: GO 106058
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
108213: LD_VAR 0 4
108217: PUSH
108218: LD_VAR 0 7
108222: ARRAY
108223: PPUSH
108224: CALL_OW 257
108228: PUSH
108229: LD_INT 17
108231: EQUAL
108232: PUSH
108233: LD_VAR 0 4
108237: PUSH
108238: LD_VAR 0 7
108242: ARRAY
108243: PPUSH
108244: CALL_OW 110
108248: PUSH
108249: LD_INT 71
108251: EQUAL
108252: NOT
108253: AND
108254: IFFALSE 108400
// begin attacking := false ;
108256: LD_ADDR_VAR 0 29
108260: PUSH
108261: LD_INT 0
108263: ST_TO_ADDR
// k := 5 ;
108264: LD_ADDR_VAR 0 9
108268: PUSH
108269: LD_INT 5
108271: ST_TO_ADDR
// if tmp < k then
108272: LD_VAR 0 14
108276: PUSH
108277: LD_VAR 0 9
108281: LESS
108282: IFFALSE 108294
// k := tmp ;
108284: LD_ADDR_VAR 0 9
108288: PUSH
108289: LD_VAR 0 14
108293: ST_TO_ADDR
// for j = 1 to k do
108294: LD_ADDR_VAR 0 8
108298: PUSH
108299: DOUBLE
108300: LD_INT 1
108302: DEC
108303: ST_TO_ADDR
108304: LD_VAR 0 9
108308: PUSH
108309: FOR_TO
108310: IFFALSE 108398
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
108312: LD_VAR 0 14
108316: PUSH
108317: LD_VAR 0 8
108321: ARRAY
108322: PUSH
108323: LD_VAR 0 14
108327: PPUSH
108328: LD_INT 58
108330: PUSH
108331: EMPTY
108332: LIST
108333: PPUSH
108334: CALL_OW 72
108338: IN
108339: NOT
108340: IFFALSE 108396
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
108342: LD_VAR 0 4
108346: PUSH
108347: LD_VAR 0 7
108351: ARRAY
108352: PPUSH
108353: LD_VAR 0 14
108357: PUSH
108358: LD_VAR 0 8
108362: ARRAY
108363: PPUSH
108364: CALL_OW 115
// attacking := true ;
108368: LD_ADDR_VAR 0 29
108372: PUSH
108373: LD_INT 1
108375: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
108376: LD_VAR 0 4
108380: PUSH
108381: LD_VAR 0 7
108385: ARRAY
108386: PPUSH
108387: LD_INT 71
108389: PPUSH
108390: CALL_OW 109
// continue ;
108394: GO 108309
// end ; end ;
108396: GO 108309
108398: POP
108399: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
108400: LD_VAR 0 4
108404: PUSH
108405: LD_VAR 0 7
108409: ARRAY
108410: PPUSH
108411: CALL_OW 257
108415: PUSH
108416: LD_INT 8
108418: EQUAL
108419: PUSH
108420: LD_VAR 0 4
108424: PUSH
108425: LD_VAR 0 7
108429: ARRAY
108430: PPUSH
108431: CALL_OW 264
108435: PUSH
108436: LD_INT 28
108438: PUSH
108439: LD_INT 45
108441: PUSH
108442: LD_INT 7
108444: PUSH
108445: LD_INT 47
108447: PUSH
108448: EMPTY
108449: LIST
108450: LIST
108451: LIST
108452: LIST
108453: IN
108454: OR
108455: IFFALSE 108711
// begin attacking := false ;
108457: LD_ADDR_VAR 0 29
108461: PUSH
108462: LD_INT 0
108464: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
108465: LD_VAR 0 14
108469: PUSH
108470: LD_INT 1
108472: ARRAY
108473: PPUSH
108474: CALL_OW 266
108478: PUSH
108479: LD_INT 32
108481: PUSH
108482: LD_INT 31
108484: PUSH
108485: LD_INT 33
108487: PUSH
108488: LD_INT 4
108490: PUSH
108491: LD_INT 5
108493: PUSH
108494: EMPTY
108495: LIST
108496: LIST
108497: LIST
108498: LIST
108499: LIST
108500: IN
108501: IFFALSE 108687
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
108503: LD_ADDR_VAR 0 9
108507: PUSH
108508: LD_VAR 0 14
108512: PUSH
108513: LD_INT 1
108515: ARRAY
108516: PPUSH
108517: CALL_OW 266
108521: PPUSH
108522: LD_VAR 0 14
108526: PUSH
108527: LD_INT 1
108529: ARRAY
108530: PPUSH
108531: CALL_OW 250
108535: PPUSH
108536: LD_VAR 0 14
108540: PUSH
108541: LD_INT 1
108543: ARRAY
108544: PPUSH
108545: CALL_OW 251
108549: PPUSH
108550: LD_VAR 0 14
108554: PUSH
108555: LD_INT 1
108557: ARRAY
108558: PPUSH
108559: CALL_OW 254
108563: PPUSH
108564: LD_VAR 0 14
108568: PUSH
108569: LD_INT 1
108571: ARRAY
108572: PPUSH
108573: CALL_OW 248
108577: PPUSH
108578: LD_INT 0
108580: PPUSH
108581: CALL 33318 0 6
108585: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
108586: LD_ADDR_VAR 0 8
108590: PUSH
108591: LD_VAR 0 4
108595: PUSH
108596: LD_VAR 0 7
108600: ARRAY
108601: PPUSH
108602: LD_VAR 0 9
108606: PPUSH
108607: CALL 51988 0 2
108611: ST_TO_ADDR
// if j then
108612: LD_VAR 0 8
108616: IFFALSE 108685
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
108618: LD_VAR 0 8
108622: PUSH
108623: LD_INT 1
108625: ARRAY
108626: PPUSH
108627: LD_VAR 0 8
108631: PUSH
108632: LD_INT 2
108634: ARRAY
108635: PPUSH
108636: CALL_OW 488
108640: IFFALSE 108685
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
108642: LD_VAR 0 4
108646: PUSH
108647: LD_VAR 0 7
108651: ARRAY
108652: PPUSH
108653: LD_VAR 0 8
108657: PUSH
108658: LD_INT 1
108660: ARRAY
108661: PPUSH
108662: LD_VAR 0 8
108666: PUSH
108667: LD_INT 2
108669: ARRAY
108670: PPUSH
108671: CALL_OW 116
// attacking := true ;
108675: LD_ADDR_VAR 0 29
108679: PUSH
108680: LD_INT 1
108682: ST_TO_ADDR
// continue ;
108683: GO 106058
// end ; end else
108685: GO 108711
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
108687: LD_VAR 0 4
108691: PUSH
108692: LD_VAR 0 7
108696: ARRAY
108697: PPUSH
108698: LD_VAR 0 14
108702: PUSH
108703: LD_INT 1
108705: ARRAY
108706: PPUSH
108707: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
108711: LD_VAR 0 4
108715: PUSH
108716: LD_VAR 0 7
108720: ARRAY
108721: PPUSH
108722: CALL_OW 265
108726: PUSH
108727: LD_INT 11
108729: EQUAL
108730: IFFALSE 109008
// begin k := 10 ;
108732: LD_ADDR_VAR 0 9
108736: PUSH
108737: LD_INT 10
108739: ST_TO_ADDR
// x := 0 ;
108740: LD_ADDR_VAR 0 10
108744: PUSH
108745: LD_INT 0
108747: ST_TO_ADDR
// if tmp < k then
108748: LD_VAR 0 14
108752: PUSH
108753: LD_VAR 0 9
108757: LESS
108758: IFFALSE 108770
// k := tmp ;
108760: LD_ADDR_VAR 0 9
108764: PUSH
108765: LD_VAR 0 14
108769: ST_TO_ADDR
// for j = k downto 1 do
108770: LD_ADDR_VAR 0 8
108774: PUSH
108775: DOUBLE
108776: LD_VAR 0 9
108780: INC
108781: ST_TO_ADDR
108782: LD_INT 1
108784: PUSH
108785: FOR_DOWNTO
108786: IFFALSE 108861
// begin if GetType ( tmp [ j ] ) = unit_human then
108788: LD_VAR 0 14
108792: PUSH
108793: LD_VAR 0 8
108797: ARRAY
108798: PPUSH
108799: CALL_OW 247
108803: PUSH
108804: LD_INT 1
108806: EQUAL
108807: IFFALSE 108859
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
108809: LD_VAR 0 4
108813: PUSH
108814: LD_VAR 0 7
108818: ARRAY
108819: PPUSH
108820: LD_VAR 0 14
108824: PUSH
108825: LD_VAR 0 8
108829: ARRAY
108830: PPUSH
108831: CALL 52259 0 2
// x := tmp [ j ] ;
108835: LD_ADDR_VAR 0 10
108839: PUSH
108840: LD_VAR 0 14
108844: PUSH
108845: LD_VAR 0 8
108849: ARRAY
108850: ST_TO_ADDR
// attacking := true ;
108851: LD_ADDR_VAR 0 29
108855: PUSH
108856: LD_INT 1
108858: ST_TO_ADDR
// end ; end ;
108859: GO 108785
108861: POP
108862: POP
// if not x then
108863: LD_VAR 0 10
108867: NOT
108868: IFFALSE 109008
// begin attacking := true ;
108870: LD_ADDR_VAR 0 29
108874: PUSH
108875: LD_INT 1
108877: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
108878: LD_VAR 0 4
108882: PUSH
108883: LD_VAR 0 7
108887: ARRAY
108888: PPUSH
108889: CALL_OW 250
108893: PPUSH
108894: LD_VAR 0 4
108898: PUSH
108899: LD_VAR 0 7
108903: ARRAY
108904: PPUSH
108905: CALL_OW 251
108909: PPUSH
108910: CALL_OW 546
108914: PUSH
108915: LD_INT 2
108917: ARRAY
108918: PUSH
108919: LD_VAR 0 14
108923: PUSH
108924: LD_INT 1
108926: ARRAY
108927: PPUSH
108928: CALL_OW 250
108932: PPUSH
108933: LD_VAR 0 14
108937: PUSH
108938: LD_INT 1
108940: ARRAY
108941: PPUSH
108942: CALL_OW 251
108946: PPUSH
108947: CALL_OW 546
108951: PUSH
108952: LD_INT 2
108954: ARRAY
108955: EQUAL
108956: IFFALSE 108984
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
108958: LD_VAR 0 4
108962: PUSH
108963: LD_VAR 0 7
108967: ARRAY
108968: PPUSH
108969: LD_VAR 0 14
108973: PUSH
108974: LD_INT 1
108976: ARRAY
108977: PPUSH
108978: CALL 52259 0 2
108982: GO 109008
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
108984: LD_VAR 0 4
108988: PUSH
108989: LD_VAR 0 7
108993: ARRAY
108994: PPUSH
108995: LD_VAR 0 14
108999: PUSH
109000: LD_INT 1
109002: ARRAY
109003: PPUSH
109004: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
109008: LD_VAR 0 4
109012: PUSH
109013: LD_VAR 0 7
109017: ARRAY
109018: PPUSH
109019: CALL_OW 264
109023: PUSH
109024: LD_INT 29
109026: EQUAL
109027: IFFALSE 109393
// begin if WantsToAttack ( group [ i ] ) in bombed then
109029: LD_VAR 0 4
109033: PUSH
109034: LD_VAR 0 7
109038: ARRAY
109039: PPUSH
109040: CALL_OW 319
109044: PUSH
109045: LD_VAR 0 28
109049: IN
109050: IFFALSE 109054
// continue ;
109052: GO 106058
// k := 8 ;
109054: LD_ADDR_VAR 0 9
109058: PUSH
109059: LD_INT 8
109061: ST_TO_ADDR
// x := 0 ;
109062: LD_ADDR_VAR 0 10
109066: PUSH
109067: LD_INT 0
109069: ST_TO_ADDR
// if tmp < k then
109070: LD_VAR 0 14
109074: PUSH
109075: LD_VAR 0 9
109079: LESS
109080: IFFALSE 109092
// k := tmp ;
109082: LD_ADDR_VAR 0 9
109086: PUSH
109087: LD_VAR 0 14
109091: ST_TO_ADDR
// for j = 1 to k do
109092: LD_ADDR_VAR 0 8
109096: PUSH
109097: DOUBLE
109098: LD_INT 1
109100: DEC
109101: ST_TO_ADDR
109102: LD_VAR 0 9
109106: PUSH
109107: FOR_TO
109108: IFFALSE 109240
// begin if GetType ( tmp [ j ] ) = unit_building then
109110: LD_VAR 0 14
109114: PUSH
109115: LD_VAR 0 8
109119: ARRAY
109120: PPUSH
109121: CALL_OW 247
109125: PUSH
109126: LD_INT 3
109128: EQUAL
109129: IFFALSE 109238
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
109131: LD_VAR 0 14
109135: PUSH
109136: LD_VAR 0 8
109140: ARRAY
109141: PUSH
109142: LD_VAR 0 28
109146: IN
109147: NOT
109148: PUSH
109149: LD_VAR 0 14
109153: PUSH
109154: LD_VAR 0 8
109158: ARRAY
109159: PPUSH
109160: CALL_OW 313
109164: AND
109165: IFFALSE 109238
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
109167: LD_VAR 0 4
109171: PUSH
109172: LD_VAR 0 7
109176: ARRAY
109177: PPUSH
109178: LD_VAR 0 14
109182: PUSH
109183: LD_VAR 0 8
109187: ARRAY
109188: PPUSH
109189: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
109193: LD_ADDR_VAR 0 28
109197: PUSH
109198: LD_VAR 0 28
109202: PPUSH
109203: LD_VAR 0 28
109207: PUSH
109208: LD_INT 1
109210: PLUS
109211: PPUSH
109212: LD_VAR 0 14
109216: PUSH
109217: LD_VAR 0 8
109221: ARRAY
109222: PPUSH
109223: CALL_OW 1
109227: ST_TO_ADDR
// attacking := true ;
109228: LD_ADDR_VAR 0 29
109232: PUSH
109233: LD_INT 1
109235: ST_TO_ADDR
// break ;
109236: GO 109240
// end ; end ;
109238: GO 109107
109240: POP
109241: POP
// if not attacking and f_attack_depot then
109242: LD_VAR 0 29
109246: NOT
109247: PUSH
109248: LD_VAR 0 25
109252: AND
109253: IFFALSE 109348
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
109255: LD_ADDR_VAR 0 13
109259: PUSH
109260: LD_VAR 0 14
109264: PPUSH
109265: LD_INT 2
109267: PUSH
109268: LD_INT 30
109270: PUSH
109271: LD_INT 0
109273: PUSH
109274: EMPTY
109275: LIST
109276: LIST
109277: PUSH
109278: LD_INT 30
109280: PUSH
109281: LD_INT 1
109283: PUSH
109284: EMPTY
109285: LIST
109286: LIST
109287: PUSH
109288: EMPTY
109289: LIST
109290: LIST
109291: LIST
109292: PPUSH
109293: CALL_OW 72
109297: ST_TO_ADDR
// if z then
109298: LD_VAR 0 13
109302: IFFALSE 109348
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
109304: LD_VAR 0 4
109308: PUSH
109309: LD_VAR 0 7
109313: ARRAY
109314: PPUSH
109315: LD_VAR 0 13
109319: PPUSH
109320: LD_VAR 0 4
109324: PUSH
109325: LD_VAR 0 7
109329: ARRAY
109330: PPUSH
109331: CALL_OW 74
109335: PPUSH
109336: CALL_OW 115
// attacking := true ;
109340: LD_ADDR_VAR 0 29
109344: PUSH
109345: LD_INT 1
109347: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
109348: LD_VAR 0 4
109352: PUSH
109353: LD_VAR 0 7
109357: ARRAY
109358: PPUSH
109359: CALL_OW 256
109363: PUSH
109364: LD_INT 500
109366: LESS
109367: IFFALSE 109393
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
109369: LD_VAR 0 4
109373: PUSH
109374: LD_VAR 0 7
109378: ARRAY
109379: PPUSH
109380: LD_VAR 0 14
109384: PUSH
109385: LD_INT 1
109387: ARRAY
109388: PPUSH
109389: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
109393: LD_VAR 0 4
109397: PUSH
109398: LD_VAR 0 7
109402: ARRAY
109403: PPUSH
109404: CALL_OW 264
109408: PUSH
109409: LD_INT 49
109411: EQUAL
109412: IFFALSE 109533
// begin if not HasTask ( group [ i ] ) then
109414: LD_VAR 0 4
109418: PUSH
109419: LD_VAR 0 7
109423: ARRAY
109424: PPUSH
109425: CALL_OW 314
109429: NOT
109430: IFFALSE 109533
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
109432: LD_ADDR_VAR 0 9
109436: PUSH
109437: LD_INT 81
109439: PUSH
109440: LD_VAR 0 4
109444: PUSH
109445: LD_VAR 0 7
109449: ARRAY
109450: PPUSH
109451: CALL_OW 255
109455: PUSH
109456: EMPTY
109457: LIST
109458: LIST
109459: PPUSH
109460: CALL_OW 69
109464: PPUSH
109465: LD_VAR 0 4
109469: PUSH
109470: LD_VAR 0 7
109474: ARRAY
109475: PPUSH
109476: CALL_OW 74
109480: ST_TO_ADDR
// if k then
109481: LD_VAR 0 9
109485: IFFALSE 109533
// if GetDistUnits ( group [ i ] , k ) > 10 then
109487: LD_VAR 0 4
109491: PUSH
109492: LD_VAR 0 7
109496: ARRAY
109497: PPUSH
109498: LD_VAR 0 9
109502: PPUSH
109503: CALL_OW 296
109507: PUSH
109508: LD_INT 10
109510: GREATER
109511: IFFALSE 109533
// ComMoveUnit ( group [ i ] , k ) ;
109513: LD_VAR 0 4
109517: PUSH
109518: LD_VAR 0 7
109522: ARRAY
109523: PPUSH
109524: LD_VAR 0 9
109528: PPUSH
109529: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
109533: LD_VAR 0 4
109537: PUSH
109538: LD_VAR 0 7
109542: ARRAY
109543: PPUSH
109544: CALL_OW 256
109548: PUSH
109549: LD_INT 250
109551: LESS
109552: PUSH
109553: LD_VAR 0 4
109557: PUSH
109558: LD_VAR 0 7
109562: ARRAY
109563: PUSH
109564: LD_INT 21
109566: PUSH
109567: LD_INT 2
109569: PUSH
109570: EMPTY
109571: LIST
109572: LIST
109573: PUSH
109574: LD_INT 23
109576: PUSH
109577: LD_INT 2
109579: PUSH
109580: EMPTY
109581: LIST
109582: LIST
109583: PUSH
109584: EMPTY
109585: LIST
109586: LIST
109587: PPUSH
109588: CALL_OW 69
109592: IN
109593: AND
109594: IFFALSE 109719
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
109596: LD_ADDR_VAR 0 9
109600: PUSH
109601: LD_OWVAR 3
109605: PUSH
109606: LD_VAR 0 4
109610: PUSH
109611: LD_VAR 0 7
109615: ARRAY
109616: DIFF
109617: PPUSH
109618: LD_VAR 0 4
109622: PUSH
109623: LD_VAR 0 7
109627: ARRAY
109628: PPUSH
109629: CALL_OW 74
109633: ST_TO_ADDR
// if not k then
109634: LD_VAR 0 9
109638: NOT
109639: IFFALSE 109643
// continue ;
109641: GO 106058
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
109643: LD_VAR 0 9
109647: PUSH
109648: LD_INT 81
109650: PUSH
109651: LD_VAR 0 4
109655: PUSH
109656: LD_VAR 0 7
109660: ARRAY
109661: PPUSH
109662: CALL_OW 255
109666: PUSH
109667: EMPTY
109668: LIST
109669: LIST
109670: PPUSH
109671: CALL_OW 69
109675: IN
109676: PUSH
109677: LD_VAR 0 9
109681: PPUSH
109682: LD_VAR 0 4
109686: PUSH
109687: LD_VAR 0 7
109691: ARRAY
109692: PPUSH
109693: CALL_OW 296
109697: PUSH
109698: LD_INT 5
109700: LESS
109701: AND
109702: IFFALSE 109719
// ComAutodestruct ( group [ i ] ) ;
109704: LD_VAR 0 4
109708: PUSH
109709: LD_VAR 0 7
109713: ARRAY
109714: PPUSH
109715: CALL 52157 0 1
// end ; if f_attack_depot then
109719: LD_VAR 0 25
109723: IFFALSE 109835
// begin k := 6 ;
109725: LD_ADDR_VAR 0 9
109729: PUSH
109730: LD_INT 6
109732: ST_TO_ADDR
// if tmp < k then
109733: LD_VAR 0 14
109737: PUSH
109738: LD_VAR 0 9
109742: LESS
109743: IFFALSE 109755
// k := tmp ;
109745: LD_ADDR_VAR 0 9
109749: PUSH
109750: LD_VAR 0 14
109754: ST_TO_ADDR
// for j = 1 to k do
109755: LD_ADDR_VAR 0 8
109759: PUSH
109760: DOUBLE
109761: LD_INT 1
109763: DEC
109764: ST_TO_ADDR
109765: LD_VAR 0 9
109769: PUSH
109770: FOR_TO
109771: IFFALSE 109833
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
109773: LD_VAR 0 8
109777: PPUSH
109778: CALL_OW 266
109782: PUSH
109783: LD_INT 0
109785: PUSH
109786: LD_INT 1
109788: PUSH
109789: EMPTY
109790: LIST
109791: LIST
109792: IN
109793: IFFALSE 109831
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
109795: LD_VAR 0 4
109799: PUSH
109800: LD_VAR 0 7
109804: ARRAY
109805: PPUSH
109806: LD_VAR 0 14
109810: PUSH
109811: LD_VAR 0 8
109815: ARRAY
109816: PPUSH
109817: CALL_OW 115
// attacking := true ;
109821: LD_ADDR_VAR 0 29
109825: PUSH
109826: LD_INT 1
109828: ST_TO_ADDR
// break ;
109829: GO 109833
// end ;
109831: GO 109770
109833: POP
109834: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
109835: LD_VAR 0 4
109839: PUSH
109840: LD_VAR 0 7
109844: ARRAY
109845: PPUSH
109846: CALL_OW 302
109850: PUSH
109851: LD_VAR 0 29
109855: NOT
109856: AND
109857: IFFALSE 110179
// begin if GetTag ( group [ i ] ) = 71 then
109859: LD_VAR 0 4
109863: PUSH
109864: LD_VAR 0 7
109868: ARRAY
109869: PPUSH
109870: CALL_OW 110
109874: PUSH
109875: LD_INT 71
109877: EQUAL
109878: IFFALSE 109919
// begin if HasTask ( group [ i ] ) then
109880: LD_VAR 0 4
109884: PUSH
109885: LD_VAR 0 7
109889: ARRAY
109890: PPUSH
109891: CALL_OW 314
109895: IFFALSE 109901
// continue else
109897: GO 106058
109899: GO 109919
// SetTag ( group [ i ] , 0 ) ;
109901: LD_VAR 0 4
109905: PUSH
109906: LD_VAR 0 7
109910: ARRAY
109911: PPUSH
109912: LD_INT 0
109914: PPUSH
109915: CALL_OW 109
// end ; k := 8 ;
109919: LD_ADDR_VAR 0 9
109923: PUSH
109924: LD_INT 8
109926: ST_TO_ADDR
// x := 0 ;
109927: LD_ADDR_VAR 0 10
109931: PUSH
109932: LD_INT 0
109934: ST_TO_ADDR
// if tmp < k then
109935: LD_VAR 0 14
109939: PUSH
109940: LD_VAR 0 9
109944: LESS
109945: IFFALSE 109957
// k := tmp ;
109947: LD_ADDR_VAR 0 9
109951: PUSH
109952: LD_VAR 0 14
109956: ST_TO_ADDR
// for j = 1 to k do
109957: LD_ADDR_VAR 0 8
109961: PUSH
109962: DOUBLE
109963: LD_INT 1
109965: DEC
109966: ST_TO_ADDR
109967: LD_VAR 0 9
109971: PUSH
109972: FOR_TO
109973: IFFALSE 110071
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
109975: LD_VAR 0 14
109979: PUSH
109980: LD_VAR 0 8
109984: ARRAY
109985: PPUSH
109986: CALL_OW 247
109990: PUSH
109991: LD_INT 1
109993: EQUAL
109994: PUSH
109995: LD_VAR 0 14
109999: PUSH
110000: LD_VAR 0 8
110004: ARRAY
110005: PPUSH
110006: CALL_OW 256
110010: PUSH
110011: LD_INT 250
110013: LESS
110014: PUSH
110015: LD_VAR 0 20
110019: AND
110020: PUSH
110021: LD_VAR 0 20
110025: NOT
110026: PUSH
110027: LD_VAR 0 14
110031: PUSH
110032: LD_VAR 0 8
110036: ARRAY
110037: PPUSH
110038: CALL_OW 256
110042: PUSH
110043: LD_INT 250
110045: GREATEREQUAL
110046: AND
110047: OR
110048: AND
110049: IFFALSE 110069
// begin x := tmp [ j ] ;
110051: LD_ADDR_VAR 0 10
110055: PUSH
110056: LD_VAR 0 14
110060: PUSH
110061: LD_VAR 0 8
110065: ARRAY
110066: ST_TO_ADDR
// break ;
110067: GO 110071
// end ;
110069: GO 109972
110071: POP
110072: POP
// if x then
110073: LD_VAR 0 10
110077: IFFALSE 110101
// ComAttackUnit ( group [ i ] , x ) else
110079: LD_VAR 0 4
110083: PUSH
110084: LD_VAR 0 7
110088: ARRAY
110089: PPUSH
110090: LD_VAR 0 10
110094: PPUSH
110095: CALL_OW 115
110099: GO 110125
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
110101: LD_VAR 0 4
110105: PUSH
110106: LD_VAR 0 7
110110: ARRAY
110111: PPUSH
110112: LD_VAR 0 14
110116: PUSH
110117: LD_INT 1
110119: ARRAY
110120: PPUSH
110121: CALL_OW 115
// if not HasTask ( group [ i ] ) then
110125: LD_VAR 0 4
110129: PUSH
110130: LD_VAR 0 7
110134: ARRAY
110135: PPUSH
110136: CALL_OW 314
110140: NOT
110141: IFFALSE 110179
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
110143: LD_VAR 0 4
110147: PUSH
110148: LD_VAR 0 7
110152: ARRAY
110153: PPUSH
110154: LD_VAR 0 14
110158: PPUSH
110159: LD_VAR 0 4
110163: PUSH
110164: LD_VAR 0 7
110168: ARRAY
110169: PPUSH
110170: CALL_OW 74
110174: PPUSH
110175: CALL_OW 115
// end ; end ; end ;
110179: GO 106058
110181: POP
110182: POP
// wait ( 0 0$2 ) ;
110183: LD_INT 70
110185: PPUSH
110186: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
110190: LD_VAR 0 4
110194: NOT
110195: PUSH
110196: LD_VAR 0 4
110200: PUSH
110201: EMPTY
110202: EQUAL
110203: OR
110204: PUSH
110205: LD_INT 81
110207: PUSH
110208: LD_VAR 0 35
110212: PUSH
110213: EMPTY
110214: LIST
110215: LIST
110216: PPUSH
110217: CALL_OW 69
110221: NOT
110222: OR
110223: IFFALSE 106043
// end ;
110225: LD_VAR 0 2
110229: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
110230: LD_INT 0
110232: PPUSH
110233: PPUSH
110234: PPUSH
110235: PPUSH
110236: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
110237: LD_VAR 0 1
110241: NOT
110242: PUSH
110243: LD_EXP 50
110247: PUSH
110248: LD_VAR 0 1
110252: ARRAY
110253: NOT
110254: OR
110255: PUSH
110256: LD_VAR 0 2
110260: NOT
110261: OR
110262: PUSH
110263: LD_VAR 0 3
110267: NOT
110268: OR
110269: IFFALSE 110273
// exit ;
110271: GO 110786
// side := mc_sides [ base ] ;
110273: LD_ADDR_VAR 0 6
110277: PUSH
110278: LD_EXP 76
110282: PUSH
110283: LD_VAR 0 1
110287: ARRAY
110288: ST_TO_ADDR
// if not side then
110289: LD_VAR 0 6
110293: NOT
110294: IFFALSE 110298
// exit ;
110296: GO 110786
// for i in solds do
110298: LD_ADDR_VAR 0 7
110302: PUSH
110303: LD_VAR 0 2
110307: PUSH
110308: FOR_IN
110309: IFFALSE 110370
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
110311: LD_VAR 0 7
110315: PPUSH
110316: CALL_OW 310
110320: PPUSH
110321: CALL_OW 266
110325: PUSH
110326: LD_INT 32
110328: PUSH
110329: LD_INT 31
110331: PUSH
110332: EMPTY
110333: LIST
110334: LIST
110335: IN
110336: IFFALSE 110356
// solds := solds diff i else
110338: LD_ADDR_VAR 0 2
110342: PUSH
110343: LD_VAR 0 2
110347: PUSH
110348: LD_VAR 0 7
110352: DIFF
110353: ST_TO_ADDR
110354: GO 110368
// SetTag ( i , 18 ) ;
110356: LD_VAR 0 7
110360: PPUSH
110361: LD_INT 18
110363: PPUSH
110364: CALL_OW 109
110368: GO 110308
110370: POP
110371: POP
// if not solds then
110372: LD_VAR 0 2
110376: NOT
110377: IFFALSE 110381
// exit ;
110379: GO 110786
// repeat wait ( 0 0$2 ) ;
110381: LD_INT 70
110383: PPUSH
110384: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
110388: LD_ADDR_VAR 0 5
110392: PUSH
110393: LD_VAR 0 6
110397: PPUSH
110398: LD_VAR 0 3
110402: PPUSH
110403: CALL 21127 0 2
110407: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
110408: LD_EXP 50
110412: PUSH
110413: LD_VAR 0 1
110417: ARRAY
110418: NOT
110419: PUSH
110420: LD_EXP 50
110424: PUSH
110425: LD_VAR 0 1
110429: ARRAY
110430: PUSH
110431: EMPTY
110432: EQUAL
110433: OR
110434: IFFALSE 110471
// begin for i in solds do
110436: LD_ADDR_VAR 0 7
110440: PUSH
110441: LD_VAR 0 2
110445: PUSH
110446: FOR_IN
110447: IFFALSE 110460
// ComStop ( i ) ;
110449: LD_VAR 0 7
110453: PPUSH
110454: CALL_OW 141
110458: GO 110446
110460: POP
110461: POP
// solds := [ ] ;
110462: LD_ADDR_VAR 0 2
110466: PUSH
110467: EMPTY
110468: ST_TO_ADDR
// exit ;
110469: GO 110786
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
110471: LD_VAR 0 5
110475: NOT
110476: PUSH
110477: LD_VAR 0 5
110481: PUSH
110482: LD_INT 3
110484: GREATER
110485: OR
110486: PUSH
110487: LD_EXP 72
110491: PUSH
110492: LD_VAR 0 1
110496: ARRAY
110497: OR
110498: IFFALSE 110539
// begin for i in solds do
110500: LD_ADDR_VAR 0 7
110504: PUSH
110505: LD_VAR 0 2
110509: PUSH
110510: FOR_IN
110511: IFFALSE 110535
// if HasTask ( i ) then
110513: LD_VAR 0 7
110517: PPUSH
110518: CALL_OW 314
110522: IFFALSE 110533
// ComStop ( i ) ;
110524: LD_VAR 0 7
110528: PPUSH
110529: CALL_OW 141
110533: GO 110510
110535: POP
110536: POP
// break ;
110537: GO 110774
// end ; for i in solds do
110539: LD_ADDR_VAR 0 7
110543: PUSH
110544: LD_VAR 0 2
110548: PUSH
110549: FOR_IN
110550: IFFALSE 110766
// begin if IsInUnit ( i ) then
110552: LD_VAR 0 7
110556: PPUSH
110557: CALL_OW 310
110561: IFFALSE 110572
// ComExitBuilding ( i ) ;
110563: LD_VAR 0 7
110567: PPUSH
110568: CALL_OW 122
// if GetLives ( i ) > 333 then
110572: LD_VAR 0 7
110576: PPUSH
110577: CALL_OW 256
110581: PUSH
110582: LD_INT 333
110584: GREATER
110585: IFFALSE 110613
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
110587: LD_VAR 0 7
110591: PPUSH
110592: LD_VAR 0 5
110596: PPUSH
110597: LD_VAR 0 7
110601: PPUSH
110602: CALL_OW 74
110606: PPUSH
110607: CALL_OW 115
110611: GO 110764
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
110613: LD_ADDR_VAR 0 8
110617: PUSH
110618: LD_EXP 50
110622: PUSH
110623: LD_VAR 0 1
110627: ARRAY
110628: PPUSH
110629: LD_INT 2
110631: PUSH
110632: LD_INT 30
110634: PUSH
110635: LD_INT 0
110637: PUSH
110638: EMPTY
110639: LIST
110640: LIST
110641: PUSH
110642: LD_INT 30
110644: PUSH
110645: LD_INT 1
110647: PUSH
110648: EMPTY
110649: LIST
110650: LIST
110651: PUSH
110652: LD_INT 30
110654: PUSH
110655: LD_INT 6
110657: PUSH
110658: EMPTY
110659: LIST
110660: LIST
110661: PUSH
110662: EMPTY
110663: LIST
110664: LIST
110665: LIST
110666: LIST
110667: PPUSH
110668: CALL_OW 72
110672: PPUSH
110673: LD_VAR 0 7
110677: PPUSH
110678: CALL_OW 74
110682: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
110683: LD_VAR 0 7
110687: PPUSH
110688: LD_VAR 0 8
110692: PPUSH
110693: CALL_OW 250
110697: PPUSH
110698: LD_INT 3
110700: PPUSH
110701: LD_INT 5
110703: PPUSH
110704: CALL_OW 272
110708: PPUSH
110709: LD_VAR 0 8
110713: PPUSH
110714: CALL_OW 251
110718: PPUSH
110719: LD_INT 3
110721: PPUSH
110722: LD_INT 5
110724: PPUSH
110725: CALL_OW 273
110729: PPUSH
110730: CALL_OW 111
// SetTag ( i , 0 ) ;
110734: LD_VAR 0 7
110738: PPUSH
110739: LD_INT 0
110741: PPUSH
110742: CALL_OW 109
// solds := solds diff i ;
110746: LD_ADDR_VAR 0 2
110750: PUSH
110751: LD_VAR 0 2
110755: PUSH
110756: LD_VAR 0 7
110760: DIFF
110761: ST_TO_ADDR
// continue ;
110762: GO 110549
// end ; end ;
110764: GO 110549
110766: POP
110767: POP
// until solds ;
110768: LD_VAR 0 2
110772: IFFALSE 110381
// MC_Reset ( base , 18 ) ;
110774: LD_VAR 0 1
110778: PPUSH
110779: LD_INT 18
110781: PPUSH
110782: CALL 62172 0 2
// end ;
110786: LD_VAR 0 4
110790: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
110791: LD_INT 0
110793: PPUSH
110794: PPUSH
110795: PPUSH
110796: PPUSH
110797: PPUSH
110798: PPUSH
110799: PPUSH
110800: PPUSH
110801: PPUSH
110802: PPUSH
110803: PPUSH
110804: PPUSH
110805: PPUSH
110806: PPUSH
110807: PPUSH
110808: PPUSH
110809: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
110810: LD_ADDR_VAR 0 13
110814: PUSH
110815: LD_EXP 50
110819: PUSH
110820: LD_VAR 0 1
110824: ARRAY
110825: PPUSH
110826: LD_INT 25
110828: PUSH
110829: LD_INT 3
110831: PUSH
110832: EMPTY
110833: LIST
110834: LIST
110835: PPUSH
110836: CALL_OW 72
110840: ST_TO_ADDR
// if mc_remote_driver [ base ] then
110841: LD_EXP 90
110845: PUSH
110846: LD_VAR 0 1
110850: ARRAY
110851: IFFALSE 110875
// mechs := mechs diff mc_remote_driver [ base ] ;
110853: LD_ADDR_VAR 0 13
110857: PUSH
110858: LD_VAR 0 13
110862: PUSH
110863: LD_EXP 90
110867: PUSH
110868: LD_VAR 0 1
110872: ARRAY
110873: DIFF
110874: ST_TO_ADDR
// for i in mechs do
110875: LD_ADDR_VAR 0 5
110879: PUSH
110880: LD_VAR 0 13
110884: PUSH
110885: FOR_IN
110886: IFFALSE 110921
// if GetTag ( i ) > 0 then
110888: LD_VAR 0 5
110892: PPUSH
110893: CALL_OW 110
110897: PUSH
110898: LD_INT 0
110900: GREATER
110901: IFFALSE 110919
// mechs := mechs diff i ;
110903: LD_ADDR_VAR 0 13
110907: PUSH
110908: LD_VAR 0 13
110912: PUSH
110913: LD_VAR 0 5
110917: DIFF
110918: ST_TO_ADDR
110919: GO 110885
110921: POP
110922: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
110923: LD_ADDR_VAR 0 9
110927: PUSH
110928: LD_EXP 50
110932: PUSH
110933: LD_VAR 0 1
110937: ARRAY
110938: PPUSH
110939: LD_INT 2
110941: PUSH
110942: LD_INT 25
110944: PUSH
110945: LD_INT 1
110947: PUSH
110948: EMPTY
110949: LIST
110950: LIST
110951: PUSH
110952: LD_INT 25
110954: PUSH
110955: LD_INT 5
110957: PUSH
110958: EMPTY
110959: LIST
110960: LIST
110961: PUSH
110962: LD_INT 25
110964: PUSH
110965: LD_INT 8
110967: PUSH
110968: EMPTY
110969: LIST
110970: LIST
110971: PUSH
110972: LD_INT 25
110974: PUSH
110975: LD_INT 9
110977: PUSH
110978: EMPTY
110979: LIST
110980: LIST
110981: PUSH
110982: EMPTY
110983: LIST
110984: LIST
110985: LIST
110986: LIST
110987: LIST
110988: PPUSH
110989: CALL_OW 72
110993: ST_TO_ADDR
// if not defenders and not solds then
110994: LD_VAR 0 2
110998: NOT
110999: PUSH
111000: LD_VAR 0 9
111004: NOT
111005: AND
111006: IFFALSE 111010
// exit ;
111008: GO 112700
// depot_under_attack := false ;
111010: LD_ADDR_VAR 0 17
111014: PUSH
111015: LD_INT 0
111017: ST_TO_ADDR
// sold_defenders := [ ] ;
111018: LD_ADDR_VAR 0 18
111022: PUSH
111023: EMPTY
111024: ST_TO_ADDR
// if mechs then
111025: LD_VAR 0 13
111029: IFFALSE 111182
// for i in UnitFilter ( defenders , [ f_type , unit_vehicle ] ) do
111031: LD_ADDR_VAR 0 5
111035: PUSH
111036: LD_VAR 0 2
111040: PPUSH
111041: LD_INT 21
111043: PUSH
111044: LD_INT 2
111046: PUSH
111047: EMPTY
111048: LIST
111049: LIST
111050: PPUSH
111051: CALL_OW 72
111055: PUSH
111056: FOR_IN
111057: IFFALSE 111180
// begin if GetTag ( i ) <> 20 then
111059: LD_VAR 0 5
111063: PPUSH
111064: CALL_OW 110
111068: PUSH
111069: LD_INT 20
111071: NONEQUAL
111072: IFFALSE 111086
// SetTag ( i , 20 ) ;
111074: LD_VAR 0 5
111078: PPUSH
111079: LD_INT 20
111081: PPUSH
111082: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
111086: LD_VAR 0 5
111090: PPUSH
111091: CALL_OW 263
111095: PUSH
111096: LD_INT 1
111098: EQUAL
111099: PUSH
111100: LD_VAR 0 5
111104: PPUSH
111105: CALL_OW 311
111109: NOT
111110: AND
111111: IFFALSE 111178
// begin un := mechs [ 1 ] ;
111113: LD_ADDR_VAR 0 11
111117: PUSH
111118: LD_VAR 0 13
111122: PUSH
111123: LD_INT 1
111125: ARRAY
111126: ST_TO_ADDR
// ComExit ( un ) ;
111127: LD_VAR 0 11
111131: PPUSH
111132: CALL 56502 0 1
// AddComEnterUnit ( un , i ) ;
111136: LD_VAR 0 11
111140: PPUSH
111141: LD_VAR 0 5
111145: PPUSH
111146: CALL_OW 180
// SetTag ( un , 19 ) ;
111150: LD_VAR 0 11
111154: PPUSH
111155: LD_INT 19
111157: PPUSH
111158: CALL_OW 109
// mechs := mechs diff un ;
111162: LD_ADDR_VAR 0 13
111166: PUSH
111167: LD_VAR 0 13
111171: PUSH
111172: LD_VAR 0 11
111176: DIFF
111177: ST_TO_ADDR
// end ; end ;
111178: GO 111056
111180: POP
111181: POP
// if solds then
111182: LD_VAR 0 9
111186: IFFALSE 111245
// for i in solds do
111188: LD_ADDR_VAR 0 5
111192: PUSH
111193: LD_VAR 0 9
111197: PUSH
111198: FOR_IN
111199: IFFALSE 111243
// if not GetTag ( i ) then
111201: LD_VAR 0 5
111205: PPUSH
111206: CALL_OW 110
111210: NOT
111211: IFFALSE 111241
// begin defenders := defenders union i ;
111213: LD_ADDR_VAR 0 2
111217: PUSH
111218: LD_VAR 0 2
111222: PUSH
111223: LD_VAR 0 5
111227: UNION
111228: ST_TO_ADDR
// SetTag ( i , 18 ) ;
111229: LD_VAR 0 5
111233: PPUSH
111234: LD_INT 18
111236: PPUSH
111237: CALL_OW 109
// end ;
111241: GO 111198
111243: POP
111244: POP
// repeat wait ( 0 0$2 ) ;
111245: LD_INT 70
111247: PPUSH
111248: CALL_OW 67
// enemy := mc_scan [ base ] ;
111252: LD_ADDR_VAR 0 3
111256: PUSH
111257: LD_EXP 73
111261: PUSH
111262: LD_VAR 0 1
111266: ARRAY
111267: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
111268: LD_EXP 50
111272: PUSH
111273: LD_VAR 0 1
111277: ARRAY
111278: NOT
111279: PUSH
111280: LD_EXP 50
111284: PUSH
111285: LD_VAR 0 1
111289: ARRAY
111290: PUSH
111291: EMPTY
111292: EQUAL
111293: OR
111294: IFFALSE 111331
// begin for i in defenders do
111296: LD_ADDR_VAR 0 5
111300: PUSH
111301: LD_VAR 0 2
111305: PUSH
111306: FOR_IN
111307: IFFALSE 111320
// ComStop ( i ) ;
111309: LD_VAR 0 5
111313: PPUSH
111314: CALL_OW 141
111318: GO 111306
111320: POP
111321: POP
// defenders := [ ] ;
111322: LD_ADDR_VAR 0 2
111326: PUSH
111327: EMPTY
111328: ST_TO_ADDR
// exit ;
111329: GO 112700
// end ; for i in defenders do
111331: LD_ADDR_VAR 0 5
111335: PUSH
111336: LD_VAR 0 2
111340: PUSH
111341: FOR_IN
111342: IFFALSE 112160
// begin e := NearestUnitToUnit ( enemy , i ) ;
111344: LD_ADDR_VAR 0 14
111348: PUSH
111349: LD_VAR 0 3
111353: PPUSH
111354: LD_VAR 0 5
111358: PPUSH
111359: CALL_OW 74
111363: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
111364: LD_ADDR_VAR 0 8
111368: PUSH
111369: LD_EXP 50
111373: PUSH
111374: LD_VAR 0 1
111378: ARRAY
111379: PPUSH
111380: LD_INT 2
111382: PUSH
111383: LD_INT 30
111385: PUSH
111386: LD_INT 0
111388: PUSH
111389: EMPTY
111390: LIST
111391: LIST
111392: PUSH
111393: LD_INT 30
111395: PUSH
111396: LD_INT 1
111398: PUSH
111399: EMPTY
111400: LIST
111401: LIST
111402: PUSH
111403: EMPTY
111404: LIST
111405: LIST
111406: LIST
111407: PPUSH
111408: CALL_OW 72
111412: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
111413: LD_ADDR_VAR 0 17
111417: PUSH
111418: LD_VAR 0 8
111422: NOT
111423: PUSH
111424: LD_VAR 0 8
111428: PPUSH
111429: LD_INT 3
111431: PUSH
111432: LD_INT 24
111434: PUSH
111435: LD_INT 600
111437: PUSH
111438: EMPTY
111439: LIST
111440: LIST
111441: PUSH
111442: EMPTY
111443: LIST
111444: LIST
111445: PPUSH
111446: CALL_OW 72
111450: OR
111451: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
111452: LD_VAR 0 5
111456: PPUSH
111457: CALL_OW 247
111461: PUSH
111462: LD_INT 2
111464: DOUBLE
111465: EQUAL
111466: IFTRUE 111470
111468: GO 111866
111470: POP
// begin if GetLives ( i ) = 1000 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
111471: LD_VAR 0 5
111475: PPUSH
111476: CALL_OW 256
111480: PUSH
111481: LD_INT 1000
111483: EQUAL
111484: PUSH
111485: LD_VAR 0 5
111489: PPUSH
111490: LD_VAR 0 14
111494: PPUSH
111495: CALL_OW 296
111499: PUSH
111500: LD_INT 40
111502: LESS
111503: PUSH
111504: LD_VAR 0 14
111508: PPUSH
111509: LD_EXP 75
111513: PUSH
111514: LD_VAR 0 1
111518: ARRAY
111519: PPUSH
111520: CALL_OW 308
111524: OR
111525: AND
111526: IFFALSE 111648
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
111528: LD_VAR 0 5
111532: PPUSH
111533: CALL_OW 262
111537: PUSH
111538: LD_INT 1
111540: EQUAL
111541: PUSH
111542: LD_VAR 0 5
111546: PPUSH
111547: CALL_OW 261
111551: PUSH
111552: LD_INT 30
111554: LESS
111555: AND
111556: PUSH
111557: LD_VAR 0 8
111561: AND
111562: IFFALSE 111632
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
111564: LD_VAR 0 5
111568: PPUSH
111569: LD_VAR 0 8
111573: PPUSH
111574: LD_VAR 0 5
111578: PPUSH
111579: CALL_OW 74
111583: PPUSH
111584: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
111588: LD_VAR 0 5
111592: PPUSH
111593: LD_VAR 0 8
111597: PPUSH
111598: LD_VAR 0 5
111602: PPUSH
111603: CALL_OW 74
111607: PPUSH
111608: CALL_OW 296
111612: PUSH
111613: LD_INT 6
111615: LESS
111616: IFFALSE 111630
// SetFuel ( i , 100 ) ;
111618: LD_VAR 0 5
111622: PPUSH
111623: LD_INT 100
111625: PPUSH
111626: CALL_OW 240
// end else
111630: GO 111646
// ComAttackUnit ( i , e ) ;
111632: LD_VAR 0 5
111636: PPUSH
111637: LD_VAR 0 14
111641: PPUSH
111642: CALL_OW 115
// end else
111646: GO 111749
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
111648: LD_VAR 0 14
111652: PPUSH
111653: LD_EXP 75
111657: PUSH
111658: LD_VAR 0 1
111662: ARRAY
111663: PPUSH
111664: CALL_OW 308
111668: NOT
111669: PUSH
111670: LD_VAR 0 5
111674: PPUSH
111675: LD_VAR 0 14
111679: PPUSH
111680: CALL_OW 296
111684: PUSH
111685: LD_INT 40
111687: GREATEREQUAL
111688: AND
111689: PUSH
111690: LD_VAR 0 5
111694: PPUSH
111695: CALL_OW 256
111699: PUSH
111700: LD_INT 650
111702: LESSEQUAL
111703: OR
111704: PUSH
111705: LD_VAR 0 5
111709: PPUSH
111710: LD_EXP 74
111714: PUSH
111715: LD_VAR 0 1
111719: ARRAY
111720: PPUSH
111721: CALL_OW 308
111725: NOT
111726: AND
111727: IFFALSE 111749
// ComMoveToArea ( i , mc_parking [ base ] ) ;
111729: LD_VAR 0 5
111733: PPUSH
111734: LD_EXP 74
111738: PUSH
111739: LD_VAR 0 1
111743: ARRAY
111744: PPUSH
111745: CALL_OW 113
// if GetLives ( i ) < 1000 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
111749: LD_VAR 0 5
111753: PPUSH
111754: CALL_OW 256
111758: PUSH
111759: LD_INT 1000
111761: LESS
111762: PUSH
111763: LD_VAR 0 5
111767: PPUSH
111768: CALL_OW 263
111772: PUSH
111773: LD_INT 1
111775: EQUAL
111776: AND
111777: PUSH
111778: LD_VAR 0 5
111782: PPUSH
111783: CALL_OW 311
111787: AND
111788: PUSH
111789: LD_VAR 0 5
111793: PPUSH
111794: LD_EXP 74
111798: PUSH
111799: LD_VAR 0 1
111803: ARRAY
111804: PPUSH
111805: CALL_OW 308
111809: AND
111810: IFFALSE 111864
// begin mech := IsDrivenBy ( i ) ;
111812: LD_ADDR_VAR 0 10
111816: PUSH
111817: LD_VAR 0 5
111821: PPUSH
111822: CALL_OW 311
111826: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
111827: LD_VAR 0 10
111831: PPUSH
111832: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
111836: LD_VAR 0 10
111840: PPUSH
111841: LD_VAR 0 5
111845: PPUSH
111846: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
111850: LD_VAR 0 10
111854: PPUSH
111855: LD_VAR 0 5
111859: PPUSH
111860: CALL_OW 180
// end ; end ; unit_human :
111864: GO 112131
111866: LD_INT 1
111868: DOUBLE
111869: EQUAL
111870: IFTRUE 111874
111872: GO 112130
111874: POP
// begin b := IsInUnit ( i ) ;
111875: LD_ADDR_VAR 0 19
111879: PUSH
111880: LD_VAR 0 5
111884: PPUSH
111885: CALL_OW 310
111889: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
111890: LD_ADDR_VAR 0 20
111894: PUSH
111895: LD_VAR 0 19
111899: NOT
111900: PUSH
111901: LD_VAR 0 19
111905: PPUSH
111906: CALL_OW 266
111910: PUSH
111911: LD_INT 32
111913: PUSH
111914: LD_INT 31
111916: PUSH
111917: EMPTY
111918: LIST
111919: LIST
111920: IN
111921: OR
111922: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
111923: LD_VAR 0 17
111927: PUSH
111928: LD_VAR 0 2
111932: PPUSH
111933: LD_INT 21
111935: PUSH
111936: LD_INT 2
111938: PUSH
111939: EMPTY
111940: LIST
111941: LIST
111942: PPUSH
111943: CALL_OW 72
111947: PUSH
111948: LD_INT 1
111950: LESSEQUAL
111951: OR
111952: PUSH
111953: LD_VAR 0 20
111957: AND
111958: PUSH
111959: LD_VAR 0 5
111963: PUSH
111964: LD_VAR 0 18
111968: IN
111969: NOT
111970: AND
111971: IFFALSE 112064
// begin if b then
111973: LD_VAR 0 19
111977: IFFALSE 112026
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
111979: LD_VAR 0 19
111983: PPUSH
111984: LD_VAR 0 3
111988: PPUSH
111989: LD_VAR 0 19
111993: PPUSH
111994: CALL_OW 74
111998: PPUSH
111999: CALL_OW 296
112003: PUSH
112004: LD_INT 10
112006: LESS
112007: PUSH
112008: LD_VAR 0 19
112012: PPUSH
112013: CALL_OW 461
112017: PUSH
112018: LD_INT 7
112020: NONEQUAL
112021: AND
112022: IFFALSE 112026
// continue ;
112024: GO 111341
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
112026: LD_ADDR_VAR 0 18
112030: PUSH
112031: LD_VAR 0 18
112035: PPUSH
112036: LD_VAR 0 18
112040: PUSH
112041: LD_INT 1
112043: PLUS
112044: PPUSH
112045: LD_VAR 0 5
112049: PPUSH
112050: CALL_OW 1
112054: ST_TO_ADDR
// ComExitBuilding ( i ) ;
112055: LD_VAR 0 5
112059: PPUSH
112060: CALL_OW 122
// end ; if sold_defenders then
112064: LD_VAR 0 18
112068: IFFALSE 112128
// if i in sold_defenders then
112070: LD_VAR 0 5
112074: PUSH
112075: LD_VAR 0 18
112079: IN
112080: IFFALSE 112128
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
112082: LD_VAR 0 5
112086: PPUSH
112087: CALL_OW 314
112091: NOT
112092: PUSH
112093: LD_VAR 0 5
112097: PPUSH
112098: LD_VAR 0 14
112102: PPUSH
112103: CALL_OW 296
112107: PUSH
112108: LD_INT 30
112110: LESS
112111: AND
112112: IFFALSE 112128
// ComAttackUnit ( i , e ) ;
112114: LD_VAR 0 5
112118: PPUSH
112119: LD_VAR 0 14
112123: PPUSH
112124: CALL_OW 115
// end ; end ; end ;
112128: GO 112131
112130: POP
// if IsDead ( i ) then
112131: LD_VAR 0 5
112135: PPUSH
112136: CALL_OW 301
112140: IFFALSE 112158
// defenders := defenders diff i ;
112142: LD_ADDR_VAR 0 2
112146: PUSH
112147: LD_VAR 0 2
112151: PUSH
112152: LD_VAR 0 5
112156: DIFF
112157: ST_TO_ADDR
// end ;
112158: GO 111341
112160: POP
112161: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
112162: LD_VAR 0 3
112166: NOT
112167: PUSH
112168: LD_VAR 0 2
112172: NOT
112173: OR
112174: PUSH
112175: LD_EXP 50
112179: PUSH
112180: LD_VAR 0 1
112184: ARRAY
112185: NOT
112186: OR
112187: IFFALSE 111245
// MC_Reset ( base , 18 ) ;
112189: LD_VAR 0 1
112193: PPUSH
112194: LD_INT 18
112196: PPUSH
112197: CALL 62172 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
112201: LD_ADDR_VAR 0 2
112205: PUSH
112206: LD_VAR 0 2
112210: PUSH
112211: LD_VAR 0 2
112215: PPUSH
112216: LD_INT 2
112218: PUSH
112219: LD_INT 25
112221: PUSH
112222: LD_INT 1
112224: PUSH
112225: EMPTY
112226: LIST
112227: LIST
112228: PUSH
112229: LD_INT 25
112231: PUSH
112232: LD_INT 5
112234: PUSH
112235: EMPTY
112236: LIST
112237: LIST
112238: PUSH
112239: LD_INT 25
112241: PUSH
112242: LD_INT 8
112244: PUSH
112245: EMPTY
112246: LIST
112247: LIST
112248: PUSH
112249: LD_INT 25
112251: PUSH
112252: LD_INT 9
112254: PUSH
112255: EMPTY
112256: LIST
112257: LIST
112258: PUSH
112259: EMPTY
112260: LIST
112261: LIST
112262: LIST
112263: LIST
112264: LIST
112265: PPUSH
112266: CALL_OW 72
112270: DIFF
112271: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
112272: LD_VAR 0 3
112276: NOT
112277: PUSH
112278: LD_VAR 0 2
112282: PPUSH
112283: LD_INT 21
112285: PUSH
112286: LD_INT 2
112288: PUSH
112289: EMPTY
112290: LIST
112291: LIST
112292: PPUSH
112293: CALL_OW 72
112297: AND
112298: IFFALSE 112636
// begin tmp := FilterByTag ( defenders , 19 ) ;
112300: LD_ADDR_VAR 0 12
112304: PUSH
112305: LD_VAR 0 2
112309: PPUSH
112310: LD_INT 19
112312: PPUSH
112313: CALL 53632 0 2
112317: ST_TO_ADDR
// if tmp then
112318: LD_VAR 0 12
112322: IFFALSE 112392
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
112324: LD_ADDR_VAR 0 12
112328: PUSH
112329: LD_VAR 0 12
112333: PPUSH
112334: LD_INT 25
112336: PUSH
112337: LD_INT 3
112339: PUSH
112340: EMPTY
112341: LIST
112342: LIST
112343: PPUSH
112344: CALL_OW 72
112348: ST_TO_ADDR
// if tmp then
112349: LD_VAR 0 12
112353: IFFALSE 112392
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
112355: LD_ADDR_EXP 62
112359: PUSH
112360: LD_EXP 62
112364: PPUSH
112365: LD_VAR 0 1
112369: PPUSH
112370: LD_EXP 62
112374: PUSH
112375: LD_VAR 0 1
112379: ARRAY
112380: PUSH
112381: LD_VAR 0 12
112385: UNION
112386: PPUSH
112387: CALL_OW 1
112391: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
112392: LD_VAR 0 1
112396: PPUSH
112397: LD_INT 19
112399: PPUSH
112400: CALL 62172 0 2
// repeat wait ( 0 0$1 ) ;
112404: LD_INT 35
112406: PPUSH
112407: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
112411: LD_EXP 50
112415: PUSH
112416: LD_VAR 0 1
112420: ARRAY
112421: NOT
112422: PUSH
112423: LD_EXP 50
112427: PUSH
112428: LD_VAR 0 1
112432: ARRAY
112433: PUSH
112434: EMPTY
112435: EQUAL
112436: OR
112437: IFFALSE 112474
// begin for i in defenders do
112439: LD_ADDR_VAR 0 5
112443: PUSH
112444: LD_VAR 0 2
112448: PUSH
112449: FOR_IN
112450: IFFALSE 112463
// ComStop ( i ) ;
112452: LD_VAR 0 5
112456: PPUSH
112457: CALL_OW 141
112461: GO 112449
112463: POP
112464: POP
// defenders := [ ] ;
112465: LD_ADDR_VAR 0 2
112469: PUSH
112470: EMPTY
112471: ST_TO_ADDR
// exit ;
112472: GO 112700
// end ; for i in defenders do
112474: LD_ADDR_VAR 0 5
112478: PUSH
112479: LD_VAR 0 2
112483: PUSH
112484: FOR_IN
112485: IFFALSE 112574
// begin if not IsInArea ( i , mc_parking [ base ] ) then
112487: LD_VAR 0 5
112491: PPUSH
112492: LD_EXP 74
112496: PUSH
112497: LD_VAR 0 1
112501: ARRAY
112502: PPUSH
112503: CALL_OW 308
112507: NOT
112508: IFFALSE 112532
// ComMoveToArea ( i , mc_parking [ base ] ) else
112510: LD_VAR 0 5
112514: PPUSH
112515: LD_EXP 74
112519: PUSH
112520: LD_VAR 0 1
112524: ARRAY
112525: PPUSH
112526: CALL_OW 113
112530: GO 112572
// if GetControl ( i ) = control_manual then
112532: LD_VAR 0 5
112536: PPUSH
112537: CALL_OW 263
112541: PUSH
112542: LD_INT 1
112544: EQUAL
112545: IFFALSE 112572
// if IsDrivenBy ( i ) then
112547: LD_VAR 0 5
112551: PPUSH
112552: CALL_OW 311
112556: IFFALSE 112572
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
112558: LD_VAR 0 5
112562: PPUSH
112563: CALL_OW 311
112567: PPUSH
112568: CALL_OW 121
// end ;
112572: GO 112484
112574: POP
112575: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
112576: LD_VAR 0 2
112580: PPUSH
112581: LD_INT 95
112583: PUSH
112584: LD_EXP 74
112588: PUSH
112589: LD_VAR 0 1
112593: ARRAY
112594: PUSH
112595: EMPTY
112596: LIST
112597: LIST
112598: PPUSH
112599: CALL_OW 72
112603: PUSH
112604: LD_VAR 0 2
112608: EQUAL
112609: PUSH
112610: LD_EXP 73
112614: PUSH
112615: LD_VAR 0 1
112619: ARRAY
112620: OR
112621: PUSH
112622: LD_EXP 50
112626: PUSH
112627: LD_VAR 0 1
112631: ARRAY
112632: NOT
112633: OR
112634: IFFALSE 112404
// end ; mc_defender := Replace ( mc_defender , base , UnitFilter ( defenders , [ f_type , unit_vehicle ] ) ) ;
112636: LD_ADDR_EXP 72
112640: PUSH
112641: LD_EXP 72
112645: PPUSH
112646: LD_VAR 0 1
112650: PPUSH
112651: LD_VAR 0 2
112655: PPUSH
112656: LD_INT 21
112658: PUSH
112659: LD_INT 2
112661: PUSH
112662: EMPTY
112663: LIST
112664: LIST
112665: PPUSH
112666: CALL_OW 72
112670: PPUSH
112671: CALL_OW 1
112675: ST_TO_ADDR
// MC_Reset ( base , 19 ) ;
112676: LD_VAR 0 1
112680: PPUSH
112681: LD_INT 19
112683: PPUSH
112684: CALL 62172 0 2
// MC_Reset ( base , 20 ) ;
112688: LD_VAR 0 1
112692: PPUSH
112693: LD_INT 20
112695: PPUSH
112696: CALL 62172 0 2
// end ; end_of_file
112700: LD_VAR 0 4
112704: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
112705: LD_VAR 0 1
112709: PUSH
112710: LD_INT 200
112712: DOUBLE
112713: GREATEREQUAL
112714: IFFALSE 112722
112716: LD_INT 299
112718: DOUBLE
112719: LESSEQUAL
112720: IFTRUE 112724
112722: GO 112756
112724: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
112725: LD_VAR 0 1
112729: PPUSH
112730: LD_VAR 0 2
112734: PPUSH
112735: LD_VAR 0 3
112739: PPUSH
112740: LD_VAR 0 4
112744: PPUSH
112745: LD_VAR 0 5
112749: PPUSH
112750: CALL 101638 0 5
112754: GO 112833
112756: LD_INT 300
112758: DOUBLE
112759: GREATEREQUAL
112760: IFFALSE 112768
112762: LD_INT 399
112764: DOUBLE
112765: LESSEQUAL
112766: IFTRUE 112770
112768: GO 112832
112770: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
112771: LD_VAR 0 1
112775: PPUSH
112776: LD_VAR 0 2
112780: PPUSH
112781: LD_VAR 0 3
112785: PPUSH
112786: LD_VAR 0 4
112790: PPUSH
112791: LD_VAR 0 5
112795: PPUSH
112796: LD_VAR 0 6
112800: PPUSH
112801: LD_VAR 0 7
112805: PPUSH
112806: LD_VAR 0 8
112810: PPUSH
112811: LD_VAR 0 9
112815: PPUSH
112816: LD_VAR 0 10
112820: PPUSH
112821: LD_VAR 0 11
112825: PPUSH
112826: CALL 99526 0 11
112830: GO 112833
112832: POP
// end ;
112833: PPOPN 11
112835: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
112836: LD_VAR 0 1
112840: PPUSH
112841: LD_VAR 0 2
112845: PPUSH
112846: LD_VAR 0 3
112850: PPUSH
112851: LD_VAR 0 4
112855: PPUSH
112856: LD_VAR 0 5
112860: PPUSH
112861: CALL 101620 0 5
// end ; end_of_file
112865: PPOPN 5
112867: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
112868: LD_VAR 0 1
112872: PPUSH
112873: LD_VAR 0 2
112877: PPUSH
112878: LD_VAR 0 3
112882: PPUSH
112883: LD_VAR 0 4
112887: PPUSH
112888: LD_VAR 0 5
112892: PPUSH
112893: LD_VAR 0 6
112897: PPUSH
112898: CALL 88334 0 6
// end ;
112902: PPOPN 6
112904: END
