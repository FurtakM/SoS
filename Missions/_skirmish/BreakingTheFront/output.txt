// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitSettings ;
  11: CALL 51 0 0
// if debug then
  15: LD_EXP 1
  19: IFFALSE 38
// begin PlaceSeeing ( 1 , 1 , 1 , - 372963 ) ;
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 372963
  32: NEG
  33: PPUSH
  34: CALL_OW 330
// end ; SetTechnologies ;
  38: CALL 602 0 0
// SetDiplomacy ;
  42: CALL 814 0 0
// PrepareGame ;
  46: CALL 896 0 0
// end ;
  50: END
// export debug , GameType , game , disableGlobalTimer ; export mc_amer , mc_leg , mc_rus_1 , mc_rus_2 ; export playerCommander , playerForces , allyCommander , Powell , Farmer , ruOutpost , ruEscape , staticMines , baseCaptured , legDestCounter , cratesSpawns , legOfferAccepted , legChangeSide , allyDestCounter , sibBombAllowed , reinforceAllowed , commander , cratesSpawn , outpostEscape , dialogueMineDetected ; end_of_file export function InitSettings ; begin
  51: LD_INT 0
  53: PPUSH
// debug := 0 ;
  54: LD_ADDR_EXP 1
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// GameType := 1 ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 1
  69: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  70: LD_ADDR_OWVAR 67
  74: PUSH
  75: LD_INT 0
  77: PPUSH
  78: CALL_OW 426
  82: ST_TO_ADDR
// sibBombAllowed := GetMultiPlayerSetting ( 1 ) - 1 ;
  83: LD_ADDR_EXP 23
  87: PUSH
  88: LD_INT 1
  90: PPUSH
  91: CALL_OW 426
  95: PUSH
  96: LD_INT 1
  98: MINUS
  99: ST_TO_ADDR
// reinforceAllowed := GetMultiPlayerSetting ( 2 ) - 1 ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: LD_INT 2
 107: PPUSH
 108: CALL_OW 426
 112: PUSH
 113: LD_INT 1
 115: MINUS
 116: ST_TO_ADDR
// cratesSpawn := GetMultiPlayerSetting ( 3 ) ;
 117: LD_ADDR_EXP 26
 121: PUSH
 122: LD_INT 3
 124: PPUSH
 125: CALL_OW 426
 129: ST_TO_ADDR
// commander := GetMultiPlayerSetting ( 4 ) ;
 130: LD_ADDR_EXP 25
 134: PUSH
 135: LD_INT 4
 137: PPUSH
 138: CALL_OW 426
 142: ST_TO_ADDR
// if not commander then
 143: LD_EXP 25
 147: NOT
 148: IFFALSE 158
// commander := 3 ;
 150: LD_ADDR_EXP 25
 154: PUSH
 155: LD_INT 3
 157: ST_TO_ADDR
// if not debug then
 158: LD_EXP 1
 162: NOT
 163: IFFALSE 167
// exit ;
 165: GO 224
// display_strings := [ Difficulty:  & Difficulty , sibBomb:  & sibBombAllowed , reinforceAllowed:  & reinforceAllowed , cratesSpawn:  & cratesSpawn , commander:  & commander ] ;
 167: LD_ADDR_OWVAR 47
 171: PUSH
 172: LD_STRING Difficulty: 
 174: PUSH
 175: LD_OWVAR 67
 179: STR
 180: PUSH
 181: LD_STRING sibBomb: 
 183: PUSH
 184: LD_EXP 23
 188: STR
 189: PUSH
 190: LD_STRING reinforceAllowed: 
 192: PUSH
 193: LD_EXP 24
 197: STR
 198: PUSH
 199: LD_STRING cratesSpawn: 
 201: PUSH
 202: LD_EXP 26
 206: STR
 207: PUSH
 208: LD_STRING commander: 
 210: PUSH
 211: LD_EXP 25
 215: STR
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// every 0 0$1 trigger game and GameType = 1 and not disableGlobalTimer do
 229: LD_EXP 3
 233: PUSH
 234: LD_EXP 2
 238: PUSH
 239: LD_INT 1
 241: EQUAL
 242: AND
 243: PUSH
 244: LD_EXP 4
 248: NOT
 249: AND
 250: IFFALSE 273
 252: GO 254
 254: DISABLE
// begin enable ;
 255: ENABLE
// display_strings := [ #SkrTime , tick ] ;
 256: LD_ADDR_OWVAR 47
 260: PUSH
 261: LD_STRING #SkrTime
 263: PUSH
 264: LD_OWVAR 1
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// end ;
 273: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 274: LD_EXP 19
 278: PUSH
 279: LD_EXP 3
 283: AND
 284: PUSH
 285: LD_EXP 2
 289: PUSH
 290: LD_INT 1
 292: EQUAL
 293: AND
 294: IFFALSE 355
 296: GO 298
 298: DISABLE
// Crates ( cratesSpawns [ 1 ] [ 1 ] , cratesSpawns [ 1 ] [ 2 ] , cratesSpawns [ 1 ] [ 3 ] , cratesSpawns [ 1 ] [ 4 ] ) ;
 299: LD_EXP 19
 303: PUSH
 304: LD_INT 1
 306: ARRAY
 307: PUSH
 308: LD_INT 1
 310: ARRAY
 311: PPUSH
 312: LD_EXP 19
 316: PUSH
 317: LD_INT 1
 319: ARRAY
 320: PUSH
 321: LD_INT 2
 323: ARRAY
 324: PPUSH
 325: LD_EXP 19
 329: PUSH
 330: LD_INT 1
 332: ARRAY
 333: PUSH
 334: LD_INT 3
 336: ARRAY
 337: PPUSH
 338: LD_EXP 19
 342: PUSH
 343: LD_INT 1
 345: ARRAY
 346: PUSH
 347: LD_INT 4
 349: ARRAY
 350: PPUSH
 351: CALL 55769 0 4
 355: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 356: LD_EXP 19
 360: PUSH
 361: LD_EXP 3
 365: AND
 366: PUSH
 367: LD_EXP 2
 371: PUSH
 372: LD_INT 1
 374: EQUAL
 375: AND
 376: IFFALSE 437
 378: GO 380
 380: DISABLE
// Crates ( cratesSpawns [ 2 ] [ 1 ] , cratesSpawns [ 2 ] [ 2 ] , cratesSpawns [ 2 ] [ 3 ] , cratesSpawns [ 2 ] [ 4 ] ) ;
 381: LD_EXP 19
 385: PUSH
 386: LD_INT 2
 388: ARRAY
 389: PUSH
 390: LD_INT 1
 392: ARRAY
 393: PPUSH
 394: LD_EXP 19
 398: PUSH
 399: LD_INT 2
 401: ARRAY
 402: PUSH
 403: LD_INT 2
 405: ARRAY
 406: PPUSH
 407: LD_EXP 19
 411: PUSH
 412: LD_INT 2
 414: ARRAY
 415: PUSH
 416: LD_INT 3
 418: ARRAY
 419: PPUSH
 420: LD_EXP 19
 424: PUSH
 425: LD_INT 2
 427: ARRAY
 428: PUSH
 429: LD_INT 4
 431: ARRAY
 432: PPUSH
 433: CALL 55769 0 4
 437: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 438: LD_EXP 19
 442: PUSH
 443: LD_EXP 3
 447: AND
 448: PUSH
 449: LD_EXP 2
 453: PUSH
 454: LD_INT 1
 456: EQUAL
 457: AND
 458: IFFALSE 519
 460: GO 462
 462: DISABLE
// Crates ( cratesSpawns [ 3 ] [ 1 ] , cratesSpawns [ 3 ] [ 2 ] , cratesSpawns [ 3 ] [ 3 ] , cratesSpawns [ 3 ] [ 4 ] ) ;
 463: LD_EXP 19
 467: PUSH
 468: LD_INT 3
 470: ARRAY
 471: PUSH
 472: LD_INT 1
 474: ARRAY
 475: PPUSH
 476: LD_EXP 19
 480: PUSH
 481: LD_INT 3
 483: ARRAY
 484: PUSH
 485: LD_INT 2
 487: ARRAY
 488: PPUSH
 489: LD_EXP 19
 493: PUSH
 494: LD_INT 3
 496: ARRAY
 497: PUSH
 498: LD_INT 3
 500: ARRAY
 501: PPUSH
 502: LD_EXP 19
 506: PUSH
 507: LD_INT 3
 509: ARRAY
 510: PUSH
 511: LD_INT 4
 513: ARRAY
 514: PPUSH
 515: CALL 55769 0 4
 519: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 520: LD_EXP 19
 524: PUSH
 525: LD_EXP 3
 529: AND
 530: PUSH
 531: LD_EXP 2
 535: PUSH
 536: LD_INT 1
 538: EQUAL
 539: AND
 540: IFFALSE 601
 542: GO 544
 544: DISABLE
// Crates ( cratesSpawns [ 4 ] [ 1 ] , cratesSpawns [ 4 ] [ 2 ] , cratesSpawns [ 4 ] [ 3 ] , cratesSpawns [ 4 ] [ 4 ] ) ;
 545: LD_EXP 19
 549: PUSH
 550: LD_INT 4
 552: ARRAY
 553: PUSH
 554: LD_INT 1
 556: ARRAY
 557: PPUSH
 558: LD_EXP 19
 562: PUSH
 563: LD_INT 4
 565: ARRAY
 566: PUSH
 567: LD_INT 2
 569: ARRAY
 570: PPUSH
 571: LD_EXP 19
 575: PUSH
 576: LD_INT 4
 578: ARRAY
 579: PUSH
 580: LD_INT 3
 582: ARRAY
 583: PPUSH
 584: LD_EXP 19
 588: PUSH
 589: LD_INT 4
 591: ARRAY
 592: PUSH
 593: LD_INT 4
 595: ARRAY
 596: PPUSH
 597: CALL 55769 0 4
 601: END
// export function SetTechnologies ; var i , j , ban_techs , res_techs ; begin
 602: LD_INT 0
 604: PPUSH
 605: PPUSH
 606: PPUSH
 607: PPUSH
 608: PPUSH
// if GameType = 1 then
 609: LD_EXP 2
 613: PUSH
 614: LD_INT 1
 616: EQUAL
 617: IFFALSE 686
// begin ban_techs := [ ] ;
 619: LD_ADDR_VAR 0 4
 623: PUSH
 624: EMPTY
 625: ST_TO_ADDR
// if sibBombAllowed < 2 then
 626: LD_EXP 23
 630: PUSH
 631: LD_INT 2
 633: LESS
 634: IFFALSE 647
// ban_techs := [ tech_sibFiss ] ;
 636: LD_ADDR_VAR 0 4
 640: PUSH
 641: LD_INT 25
 643: PUSH
 644: EMPTY
 645: LIST
 646: ST_TO_ADDR
// res_techs := [ tech_oilPow , tech_oilEng , tech_tech1 , tech_tech2 , tech_tech3 , tech_gun , tech_gatling , tech_rocket ] ;
 647: LD_ADDR_VAR 0 5
 651: PUSH
 652: LD_INT 46
 654: PUSH
 655: LD_INT 47
 657: PUSH
 658: LD_INT 48
 660: PUSH
 661: LD_INT 49
 663: PUSH
 664: LD_INT 50
 666: PUSH
 667: LD_INT 39
 669: PUSH
 670: LD_INT 69
 672: PUSH
 673: LD_INT 40
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: ST_TO_ADDR
// end ; for i = 1 to 8 do
 686: LD_ADDR_VAR 0 2
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 8
 698: PUSH
 699: FOR_TO
 700: IFFALSE 784
// begin if res_techs then
 702: LD_VAR 0 5
 706: IFFALSE 742
// for j in res_techs do
 708: LD_ADDR_VAR 0 3
 712: PUSH
 713: LD_VAR 0 5
 717: PUSH
 718: FOR_IN
 719: IFFALSE 740
// SetTech ( j , i , state_researched ) ;
 721: LD_VAR 0 3
 725: PPUSH
 726: LD_VAR 0 2
 730: PPUSH
 731: LD_INT 2
 733: PPUSH
 734: CALL_OW 322
 738: GO 718
 740: POP
 741: POP
// if ban_techs then
 742: LD_VAR 0 4
 746: IFFALSE 782
// for j in ban_techs do
 748: LD_ADDR_VAR 0 3
 752: PUSH
 753: LD_VAR 0 4
 757: PUSH
 758: FOR_IN
 759: IFFALSE 780
// SetTech ( j , i , state_disabled ) ;
 761: LD_VAR 0 3
 765: PPUSH
 766: LD_VAR 0 2
 770: PPUSH
 771: LD_INT 0
 773: PPUSH
 774: CALL_OW 322
 778: GO 758
 780: POP
 781: POP
// end ;
 782: GO 699
 784: POP
 785: POP
// if sibBombAllowed = 1 then
 786: LD_EXP 23
 790: PUSH
 791: LD_INT 1
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_sibFiss , 3 , state_enabled ) ;
 796: LD_INT 25
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 1
 804: PPUSH
 805: CALL_OW 322
// end ;
 809: LD_VAR 0 1
 813: RET
// export function SetDiplomacy ; begin
 814: LD_INT 0
 816: PPUSH
// if GameType = 1 then
 817: LD_EXP 2
 821: PUSH
 822: LD_INT 1
 824: EQUAL
 825: IFFALSE 891
// begin SetAttitude ( 1 , 4 , att_friend , true ) ;
 827: LD_INT 1
 829: PPUSH
 830: LD_INT 4
 832: PPUSH
 833: LD_INT 1
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 843: LD_INT 3
 845: PPUSH
 846: LD_INT 6
 848: PPUSH
 849: LD_INT 1
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL_OW 80
// SetAttitude ( 3 , 8 , att_friend , true ) ;
 859: LD_INT 3
 861: PPUSH
 862: LD_INT 8
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: CALL_OW 80
// SetAttitude ( 6 , 8 , att_friend , true ) ;
 875: LD_INT 6
 877: PPUSH
 878: LD_INT 8
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 80
// end ; end ;
 891: LD_VAR 0 1
 895: RET
// export function PrepareGame ; var i , tmp , sources ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
// if GameType = 1 then
 902: LD_EXP 2
 906: PUSH
 907: LD_INT 1
 909: EQUAL
 910: IFFALSE 1406
// begin game := false ;
 912: LD_ADDR_EXP 3
 916: PUSH
 917: LD_INT 0
 919: ST_TO_ADDR
// your_side := 1 ;
 920: LD_ADDR_OWVAR 2
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// mc_amer := 1 ;
 928: LD_ADDR_EXP 5
 932: PUSH
 933: LD_INT 1
 935: ST_TO_ADDR
// mc_leg := 2 ;
 936: LD_ADDR_EXP 6
 940: PUSH
 941: LD_INT 2
 943: ST_TO_ADDR
// mc_rus_1 := 3 ;
 944: LD_ADDR_EXP 7
 948: PUSH
 949: LD_INT 3
 951: ST_TO_ADDR
// mc_rus_2 := 4 ;
 952: LD_ADDR_EXP 8
 956: PUSH
 957: LD_INT 4
 959: ST_TO_ADDR
// cratesSpawns := [ [ amerCrates , 1 , 0 , [ 200 , 250 , 300 ] [ cratesSpawn ] ] , [ rusCrates , 8 , 50 , 500 ] , [ legCrates , 5 , 50 , 300 ] , [ playerCrates , [ 4 , 5 , 6 ] [ cratesSpawn ] , 30 , [ 300 , 450 , 500 ] [ cratesSpawn ] ] ] ;
 960: LD_ADDR_EXP 19
 964: PUSH
 965: LD_INT 5
 967: PUSH
 968: LD_INT 1
 970: PUSH
 971: LD_INT 0
 973: PUSH
 974: LD_INT 200
 976: PUSH
 977: LD_INT 250
 979: PUSH
 980: LD_INT 300
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: LIST
 987: PUSH
 988: LD_EXP 26
 992: ARRAY
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 13
1002: PUSH
1003: LD_INT 8
1005: PUSH
1006: LD_INT 50
1008: PUSH
1009: LD_INT 500
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 17
1020: PUSH
1021: LD_INT 5
1023: PUSH
1024: LD_INT 50
1026: PUSH
1027: LD_INT 300
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: LD_INT 18
1038: PUSH
1039: LD_INT 4
1041: PUSH
1042: LD_INT 5
1044: PUSH
1045: LD_INT 6
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_EXP 26
1057: ARRAY
1058: PUSH
1059: LD_INT 30
1061: PUSH
1062: LD_INT 300
1064: PUSH
1065: LD_INT 450
1067: PUSH
1068: LD_INT 500
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_EXP 26
1080: ARRAY
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: ST_TO_ADDR
// sources := [ [ 190 , 193 , mat_siberit ] , [ 182 , 117 , mat_siberit ] , [ 43 , 2 , mat_siberit ] , [ 114 , 152 , mat_oil ] , [ 85 , 38 , mat_oil ] ] ;
1094: LD_ADDR_VAR 0 4
1098: PUSH
1099: LD_INT 190
1101: PUSH
1102: LD_INT 193
1104: PUSH
1105: LD_INT 3
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_INT 182
1115: PUSH
1116: LD_INT 117
1118: PUSH
1119: LD_INT 3
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_INT 43
1129: PUSH
1130: LD_INT 2
1132: PUSH
1133: LD_INT 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_INT 114
1143: PUSH
1144: LD_INT 152
1146: PUSH
1147: LD_INT 2
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: PUSH
1155: LD_INT 85
1157: PUSH
1158: LD_INT 38
1160: PUSH
1161: LD_INT 2
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: ST_TO_ADDR
// for i in sources do
1176: LD_ADDR_VAR 0 2
1180: PUSH
1181: LD_VAR 0 4
1185: PUSH
1186: FOR_IN
1187: IFFALSE 1222
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
1189: LD_VAR 0 2
1193: PUSH
1194: LD_INT 1
1196: ARRAY
1197: PPUSH
1198: LD_VAR 0 2
1202: PUSH
1203: LD_INT 2
1205: ARRAY
1206: PPUSH
1207: LD_VAR 0 2
1211: PUSH
1212: LD_INT 3
1214: ARRAY
1215: PPUSH
1216: CALL_OW 62
1220: GO 1186
1222: POP
1223: POP
// disableGlobalTimer := false ;
1224: LD_ADDR_EXP 4
1228: PUSH
1229: LD_INT 0
1231: ST_TO_ADDR
// ruEscape := [ 0 , [ 5 , 6 , 7 ] [ Difficulty ] ] ;
1232: LD_ADDR_EXP 15
1236: PUSH
1237: LD_INT 0
1239: PUSH
1240: LD_INT 5
1242: PUSH
1243: LD_INT 6
1245: PUSH
1246: LD_INT 7
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: PUSH
1254: LD_OWVAR 67
1258: ARRAY
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: ST_TO_ADDR
// ruOutpost := [ ] ;
1264: LD_ADDR_EXP 14
1268: PUSH
1269: EMPTY
1270: ST_TO_ADDR
// staticMines := [ ] ;
1271: LD_ADDR_EXP 16
1275: PUSH
1276: EMPTY
1277: ST_TO_ADDR
// baseCaptured := false ;
1278: LD_ADDR_EXP 17
1282: PUSH
1283: LD_INT 0
1285: ST_TO_ADDR
// legDestCounter := 0 ;
1286: LD_ADDR_EXP 18
1290: PUSH
1291: LD_INT 0
1293: ST_TO_ADDR
// legOfferAccepted := false ;
1294: LD_ADDR_EXP 20
1298: PUSH
1299: LD_INT 0
1301: ST_TO_ADDR
// legChangeSide := false ;
1302: LD_ADDR_EXP 21
1306: PUSH
1307: LD_INT 0
1309: ST_TO_ADDR
// allyDestCounter := 0 ;
1310: LD_ADDR_EXP 22
1314: PUSH
1315: LD_INT 0
1317: ST_TO_ADDR
// outpostEscape := false ;
1318: LD_ADDR_EXP 27
1322: PUSH
1323: LD_INT 0
1325: ST_TO_ADDR
// dialogueMineDetected := false ;
1326: LD_ADDR_EXP 28
1330: PUSH
1331: LD_INT 0
1333: ST_TO_ADDR
// PrepareAmericans ;
1334: CALL 7606 0 0
// PrepareLegion ;
1338: CALL 5540 0 0
// PrepareRussians ;
1342: CALL 2506 0 0
// playerForces := PreparePlayer ;
1346: LD_ADDR_EXP 10
1350: PUSH
1351: CALL 8849 0 0
1355: ST_TO_ADDR
// AnimateTrees ( true ) ;
1356: LD_INT 1
1358: PPUSH
1359: CALL_OW 573
// PrepareNature ( 4 , 3 , 8 , 5 , 3 , 1 , 8 , natureGroundArea , natureWaterArea ) ;
1363: LD_INT 4
1365: PPUSH
1366: LD_INT 3
1368: PPUSH
1369: LD_INT 8
1371: PPUSH
1372: LD_INT 5
1374: PPUSH
1375: LD_INT 3
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 8
1383: PPUSH
1384: LD_INT 2
1386: PPUSH
1387: LD_INT 1
1389: PPUSH
1390: CALL 53074 0 9
// MC_Start ;
1394: CALL 60918 0 0
// SetAdditionalRussianForces ;
1398: CALL 7275 0 0
// Action ;
1402: CALL 11045 0 0
// end ; end ;
1406: LD_VAR 0 1
1410: RET
// export function CustomInitMacro ; begin
1411: LD_INT 0
1413: PPUSH
// if GameType <> 1 then
1414: LD_EXP 2
1418: PUSH
1419: LD_INT 1
1421: NONEQUAL
1422: IFFALSE 1426
// exit ;
1424: GO 2501
// MC_SetScanArea ( mc_amer , amerBase ) ;
1426: LD_EXP 5
1430: PPUSH
1431: LD_INT 3
1433: PPUSH
1434: CALL 84099 0 2
// MC_SetParkingArea ( mc_amer , amerParking ) ;
1438: LD_EXP 5
1442: PPUSH
1443: LD_INT 4
1445: PPUSH
1446: CALL 84043 0 2
// MC_SetAllowedTurretWeapons ( mc_amer , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1450: LD_EXP 5
1454: PPUSH
1455: LD_INT 11
1457: PUSH
1458: LD_INT 6
1460: PUSH
1461: LD_INT 7
1463: PUSH
1464: LD_INT 9
1466: PUSH
1467: LD_INT 10
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: PPUSH
1477: CALL 83931 0 2
// MC_SetCratesArea ( mc_amer , amerCrates ) ;
1481: LD_EXP 5
1485: PPUSH
1486: LD_INT 5
1488: PPUSH
1489: CALL 83613 0 2
// MC_SetTame ( mc_amer , amerBase ) ;
1493: LD_EXP 5
1497: PPUSH
1498: LD_INT 3
1500: PPUSH
1501: CALL 83344 0 2
// MC_SetDefenderLimit ( mc_amer , 4 ) ;
1505: LD_EXP 5
1509: PPUSH
1510: LD_INT 4
1512: PPUSH
1513: CALL 82963 0 2
// MC_SetProduceList ( mc_amer , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_solar , control_remote , us_laser ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , ] ) ;
1517: LD_EXP 5
1521: PPUSH
1522: LD_INT 3
1524: PUSH
1525: LD_INT 1
1527: PUSH
1528: LD_INT 2
1530: PUSH
1531: LD_INT 5
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: PUSH
1540: LD_INT 3
1542: PUSH
1543: LD_INT 2
1545: PUSH
1546: LD_INT 2
1548: PUSH
1549: LD_INT 9
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: LIST
1556: LIST
1557: PUSH
1558: LD_INT 4
1560: PUSH
1561: LD_INT 1
1563: PUSH
1564: LD_INT 2
1566: PUSH
1567: LD_INT 7
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: PUSH
1576: LD_INT 4
1578: PUSH
1579: LD_INT 1
1581: PUSH
1582: LD_INT 2
1584: PUSH
1585: LD_INT 6
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: PUSH
1594: EMPTY
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: PPUSH
1600: CALL 82778 0 2
// MC_SetBuildingList ( mc_amer , [ [ b_turret , 114 , 16 , 0 ] , [ b_bunker , 110 , 12 , 0 ] ] ) ;
1604: LD_EXP 5
1608: PPUSH
1609: LD_INT 33
1611: PUSH
1612: LD_INT 114
1614: PUSH
1615: LD_INT 16
1617: PUSH
1618: LD_INT 0
1620: PUSH
1621: EMPTY
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 32
1629: PUSH
1630: LD_INT 110
1632: PUSH
1633: LD_INT 12
1635: PUSH
1636: LD_INT 0
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: PPUSH
1649: CALL 82670 0 2
// MC_SetLabKind ( mc_amer , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1653: LD_EXP 5
1657: PPUSH
1658: LD_INT 10
1660: PUSH
1661: LD_INT 15
1663: PUSH
1664: LD_INT 12
1666: PUSH
1667: LD_INT 11
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: PPUSH
1676: CALL 83520 0 2
// MC_SetScanArea ( mc_leg , legBase ) ;
1680: LD_EXP 6
1684: PPUSH
1685: LD_INT 6
1687: PPUSH
1688: CALL 84099 0 2
// MC_SetParkingArea ( mc_leg , legParking ) ;
1692: LD_EXP 6
1696: PPUSH
1697: LD_INT 7
1699: PPUSH
1700: CALL 84043 0 2
// MC_SetAllowedTurretWeapons ( mc_leg , [ ar_radar , ar_gun , ar_rocket_launcher , ar_gatling_gun ] ) ;
1704: LD_EXP 6
1708: PPUSH
1709: LD_INT 30
1711: PUSH
1712: LD_INT 27
1714: PUSH
1715: LD_INT 28
1717: PUSH
1718: LD_INT 25
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: PPUSH
1727: CALL 83931 0 2
// MC_SetCratesArea ( mc_leg , legCrates ) ;
1731: LD_EXP 6
1735: PPUSH
1736: LD_INT 17
1738: PPUSH
1739: CALL 83613 0 2
// MC_SetTame ( mc_leg , legBase ) ;
1743: LD_EXP 6
1747: PPUSH
1748: LD_INT 6
1750: PPUSH
1751: CALL 83344 0 2
// MC_SetDefenderLimit ( mc_leg , 5 ) ;
1755: LD_EXP 6
1759: PPUSH
1760: LD_INT 5
1762: PPUSH
1763: CALL 82963 0 2
// MC_SetMinesField ( mc_leg , 10 , legMines ) ;
1767: LD_EXP 6
1771: PPUSH
1772: LD_INT 10
1774: PPUSH
1775: LD_INT 9
1777: PPUSH
1778: CALL 82460 0 3
// MC_SetBuildingList ( mc_leg , [ [ b_armoury , 157 , 144 , 0 ] , [ b_bunker , 151 , 142 , 0 ] , [ b_bunker , 161 , 144 , 0 ] , [ b_bunker , 140 , 133 , 0 ] ] ) ;
1782: LD_EXP 6
1786: PPUSH
1787: LD_INT 4
1789: PUSH
1790: LD_INT 157
1792: PUSH
1793: LD_INT 144
1795: PUSH
1796: LD_INT 0
1798: PUSH
1799: EMPTY
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: PUSH
1805: LD_INT 32
1807: PUSH
1808: LD_INT 151
1810: PUSH
1811: LD_INT 142
1813: PUSH
1814: LD_INT 0
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: PUSH
1823: LD_INT 32
1825: PUSH
1826: LD_INT 161
1828: PUSH
1829: LD_INT 144
1831: PUSH
1832: LD_INT 0
1834: PUSH
1835: EMPTY
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: PUSH
1841: LD_INT 32
1843: PUSH
1844: LD_INT 140
1846: PUSH
1847: LD_INT 133
1849: PUSH
1850: LD_INT 0
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: PPUSH
1865: CALL 82670 0 2
// MC_SetProduceList ( mc_leg , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] , [ ar_medium_trike , engine_combustion , control_remote , ar_crane ] ] ) ;
1869: LD_EXP 6
1873: PPUSH
1874: LD_INT 13
1876: PUSH
1877: LD_INT 2
1879: PUSH
1880: LD_INT 1
1882: PUSH
1883: LD_INT 31
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: PUSH
1892: LD_INT 13
1894: PUSH
1895: LD_INT 2
1897: PUSH
1898: LD_INT 1
1900: PUSH
1901: LD_INT 31
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: PUSH
1910: LD_INT 13
1912: PUSH
1913: LD_INT 1
1915: PUSH
1916: LD_INT 1
1918: PUSH
1919: LD_INT 27
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: PUSH
1928: LD_INT 13
1930: PUSH
1931: LD_INT 1
1933: PUSH
1934: LD_INT 2
1936: PUSH
1937: LD_INT 27
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 13
1948: PUSH
1949: LD_INT 1
1951: PUSH
1952: LD_INT 2
1954: PUSH
1955: LD_INT 27
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: PUSH
1964: LD_INT 13
1966: PUSH
1967: LD_INT 1
1969: PUSH
1970: LD_INT 2
1972: PUSH
1973: LD_INT 28
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: PUSH
1982: LD_INT 13
1984: PUSH
1985: LD_INT 1
1987: PUSH
1988: LD_INT 2
1990: PUSH
1991: LD_INT 28
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: PUSH
2000: LD_INT 13
2002: PUSH
2003: LD_INT 1
2005: PUSH
2006: LD_INT 2
2008: PUSH
2009: LD_INT 32
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: PUSH
2018: LD_INT 13
2020: PUSH
2021: LD_INT 1
2023: PUSH
2024: LD_INT 2
2026: PUSH
2027: LD_EXP 35
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: PPUSH
2049: CALL 82778 0 2
// HiddenCamera ( 165 , 156 , 8 ) ;
2053: LD_INT 165
2055: PPUSH
2056: LD_INT 156
2058: PPUSH
2059: LD_INT 8
2061: PPUSH
2062: CALL_OW 244
// MC_SetScanArea ( mc_rus_1 , rus1Base ) ;
2066: LD_EXP 7
2070: PPUSH
2071: LD_INT 15
2073: PPUSH
2074: CALL 84099 0 2
// MC_SetParkingArea ( mc_rus_1 , rus1Parking ) ;
2078: LD_EXP 7
2082: PPUSH
2083: LD_INT 16
2085: PPUSH
2086: CALL 84043 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_1 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2090: LD_EXP 7
2094: PPUSH
2095: LD_INT 43
2097: PUSH
2098: LD_INT 47
2100: PUSH
2101: LD_INT 45
2103: PUSH
2104: LD_INT 49
2106: PUSH
2107: LD_INT 46
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: PPUSH
2117: CALL 83931 0 2
// MC_SetCratesArea ( mc_rus_1 , rusCrates ) ;
2121: LD_EXP 7
2125: PPUSH
2126: LD_INT 13
2128: PPUSH
2129: CALL 83613 0 2
// MC_SetTame ( mc_rus_1 , rus1Base ) ;
2133: LD_EXP 7
2137: PPUSH
2138: LD_INT 15
2140: PPUSH
2141: CALL 83344 0 2
// MC_SetDefenderLimit ( mc_rus_1 , 5 ) ;
2145: LD_EXP 7
2149: PPUSH
2150: LD_INT 5
2152: PPUSH
2153: CALL 82963 0 2
// MC_SetProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_rocket ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_crane ] , ] ) ;
2157: LD_EXP 7
2161: PPUSH
2162: LD_INT 23
2164: PUSH
2165: LD_INT 1
2167: PUSH
2168: LD_INT 3
2170: PUSH
2171: LD_INT 46
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: PUSH
2180: LD_INT 23
2182: PUSH
2183: LD_INT 1
2185: PUSH
2186: LD_INT 1
2188: PUSH
2189: LD_INT 46
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: LIST
2197: PUSH
2198: LD_INT 23
2200: PUSH
2201: LD_INT 1
2203: PUSH
2204: LD_INT 3
2206: PUSH
2207: LD_INT 45
2209: PUSH
2210: EMPTY
2211: LIST
2212: LIST
2213: LIST
2214: LIST
2215: PUSH
2216: LD_INT 23
2218: PUSH
2219: LD_INT 1
2221: PUSH
2222: LD_INT 1
2224: PUSH
2225: LD_INT 47
2227: PUSH
2228: EMPTY
2229: LIST
2230: LIST
2231: LIST
2232: LIST
2233: PUSH
2234: LD_INT 23
2236: PUSH
2237: LD_INT 1
2239: PUSH
2240: LD_INT 3
2242: PUSH
2243: LD_INT 46
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: PUSH
2252: LD_INT 21
2254: PUSH
2255: LD_INT 1
2257: PUSH
2258: LD_INT 3
2260: PUSH
2261: LD_INT 51
2263: PUSH
2264: EMPTY
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: PUSH
2270: LD_INT 21
2272: PUSH
2273: LD_INT 1
2275: PUSH
2276: LD_INT 3
2278: PUSH
2279: LD_INT 52
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: LIST
2296: PPUSH
2297: CALL 82778 0 2
// MC_SetScanArea ( mc_rus_2 , rus2Base ) ;
2301: LD_EXP 8
2305: PPUSH
2306: LD_INT 11
2308: PPUSH
2309: CALL 84099 0 2
// MC_SetParkingArea ( mc_rus_2 , rus2Parking ) ;
2313: LD_EXP 8
2317: PPUSH
2318: LD_INT 12
2320: PPUSH
2321: CALL 84043 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_2 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2325: LD_EXP 8
2329: PPUSH
2330: LD_INT 43
2332: PUSH
2333: LD_INT 47
2335: PUSH
2336: LD_INT 45
2338: PUSH
2339: LD_INT 49
2341: PUSH
2342: LD_INT 46
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: LIST
2349: LIST
2350: LIST
2351: PPUSH
2352: CALL 83931 0 2
// MC_SetCratesArea ( mc_rus_2 , rusCrates ) ;
2356: LD_EXP 8
2360: PPUSH
2361: LD_INT 13
2363: PPUSH
2364: CALL 83613 0 2
// MC_SetTame ( mc_rus_2 , rus2Base ) ;
2368: LD_EXP 8
2372: PPUSH
2373: LD_INT 11
2375: PPUSH
2376: CALL 83344 0 2
// MC_SetDefenderLimit ( mc_rus_2 , 4 ) ;
2380: LD_EXP 8
2384: PPUSH
2385: LD_INT 4
2387: PPUSH
2388: CALL 82963 0 2
// MC_SetTeleportExit ( mc_rus_2 , [ [ 115 , 201 ] ] ) ;
2392: LD_EXP 8
2396: PPUSH
2397: LD_INT 115
2399: PUSH
2400: LD_INT 201
2402: PUSH
2403: EMPTY
2404: LIST
2405: LIST
2406: PUSH
2407: EMPTY
2408: LIST
2409: PPUSH
2410: CALL 83669 0 2
// MC_SetProduceList ( mc_rus_2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
2414: LD_EXP 8
2418: PPUSH
2419: LD_INT 24
2421: PUSH
2422: LD_INT 3
2424: PUSH
2425: LD_INT 3
2427: PUSH
2428: LD_INT 46
2430: PUSH
2431: EMPTY
2432: LIST
2433: LIST
2434: LIST
2435: LIST
2436: PUSH
2437: LD_INT 24
2439: PUSH
2440: LD_INT 3
2442: PUSH
2443: LD_INT 3
2445: PUSH
2446: LD_INT 46
2448: PUSH
2449: EMPTY
2450: LIST
2451: LIST
2452: LIST
2453: LIST
2454: PUSH
2455: LD_INT 24
2457: PUSH
2458: LD_INT 3
2460: PUSH
2461: LD_INT 3
2463: PUSH
2464: LD_INT 46
2466: PUSH
2467: EMPTY
2468: LIST
2469: LIST
2470: LIST
2471: LIST
2472: PUSH
2473: LD_INT 24
2475: PUSH
2476: LD_INT 3
2478: PUSH
2479: LD_INT 3
2481: PUSH
2482: LD_INT 46
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: LIST
2489: LIST
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: LIST
2495: LIST
2496: PPUSH
2497: CALL 82778 0 2
// end ;
2501: LD_VAR 0 1
2505: RET
// export function PrepareRussians ; var i , b , tmp , side , sr , depot , base ; begin
2506: LD_INT 0
2508: PPUSH
2509: PPUSH
2510: PPUSH
2511: PPUSH
2512: PPUSH
2513: PPUSH
2514: PPUSH
2515: PPUSH
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , rusApe , 0 ) ;
2516: LD_INT 0
2518: PPUSH
2519: LD_INT 0
2521: PPUSH
2522: LD_INT 3
2524: PPUSH
2525: LD_INT 0
2527: PPUSH
2528: LD_INT 0
2530: PPUSH
2531: LD_INT 0
2533: PPUSH
2534: LD_INT 0
2536: PPUSH
2537: LD_INT 14
2539: PPUSH
2540: LD_INT 0
2542: PPUSH
2543: CALL 53074 0 9
// side := 3 ;
2547: LD_ADDR_VAR 0 5
2551: PUSH
2552: LD_INT 3
2554: ST_TO_ADDR
// SetTech ( tech_targTeleport , side , state_researched ) ;
2555: LD_INT 38
2557: PPUSH
2558: LD_VAR 0 5
2562: PPUSH
2563: LD_INT 2
2565: PPUSH
2566: CALL_OW 322
// SetTech ( tech_gun , side , state_researched ) ;
2570: LD_INT 39
2572: PPUSH
2573: LD_VAR 0 5
2577: PPUSH
2578: LD_INT 2
2580: PPUSH
2581: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
2585: LD_INT 34
2587: PPUSH
2588: LD_VAR 0 5
2592: PPUSH
2593: LD_INT 2
2595: PPUSH
2596: CALL_OW 322
// tmp := [ [ 0 , 208 , 163 , 4 , 0 , 0 ] , [ 3 , 194 , 161 , 1 , 0 , 0 ] , [ 17 , 190 , 161 , 1 , 0 , 0 ] , [ 5 , 200 , 145 , 3 , 0 , 0 ] , [ 32 , 192 , 144 , 3 , 0 , 0 ] , [ 26 , 216 , 172 , 3 , 0 , 0 ] , [ 26 , 218 , 176 , 3 , 0 , 0 ] , [ 29 , 182 , 149 , 3 , 0 , 0 ] , [ 8 , 201 , 171 , 0 , 10 , 11 ] , [ 32 , 188 , 167 , 0 , 0 , 0 ] , [ 32 , 202 , 179 , 0 , 0 , 0 ] , [ 32 , 209 , 182 , 0 , 0 , 0 ] , [ 32 , 220 , 183 , 5 , 0 , 0 ] , [ 32 , 225 , 181 , 5 , 0 , 0 ] , [ 26 , 220 , 174 , 5 , 0 , 0 ] , [ 1 , 84 , 128 , 4 , 0 , 0 ] , [ 3 , 68 , 121 , 1 , 0 , 0 ] , [ 19 , 72 , 125 , 5 , 0 , 0 ] , [ 18 , 68 , 124 , 0 , 0 , 0 ] , [ 24 , 64 , 121 , 1 , 0 , 0 ] , [ 17 , 65 , 118 , 2 , 0 , 0 ] , [ 21 , 68 , 117 , 3 , 0 , 0 ] , [ 8 , 68 , 130 , 1 , 14 , 10 ] , [ 8 , 67 , 110 , 2 , 11 , 12 ] , [ 28 , 85 , 108 , 2 , 0 , 0 ] , [ 28 , 85 , 124 , 2 , 0 , 0 ] , [ 30 , 97 , 119 , 2 , 0 , 0 ] , [ 5 , 111 , 138 , 4 , 0 , 0 ] , [ 33 , 104 , 130 , 3 , 0 , 0 ] , [ 33 , 110 , 142 , 5 , 0 , 0 ] , [ 33 , 91 , 131 , 5 , 0 , 0 ] , [ 33 , 107 , 157 , 5 , 0 , 0 ] , [ 33 , 104 , 160 , 5 , 0 , 0 ] , [ 33 , 101 , 162 , 5 , 0 , 0 ] , [ 32 , 87 , 157 , 5 , 0 , 0 ] , [ 32 , 105 , 158 , 5 , 0 , 0 ] , [ 33 , 91 , 118 , 4 , 0 , 0 ] , [ 33 , 89 , 107 , 4 , 0 , 0 ] , [ 5 , 86 , 96 , 3 , 0 , 0 ] , [ 33 , 91 , 102 , 4 , 0 , 0 ] , [ 32 , 80 , 95 , 3 , 0 , 0 ] , [ 28 , 77 , 105 , 3 , 0 , 0 ] , [ 28 , 85 , 113 , 3 , 0 , 0 ] , [ 28 , 55 , 97 , 3 , 0 , 0 ] , [ 28 , 88 , 128 , 3 , 0 , 0 ] , [ 32 , 69 , 101 , 2 , 0 , 0 ] , [ 1 , 34 , 23 , 4 , 0 , 0 ] , [ 8 , 25 , 4 , 3 , 11 , 10 ] , [ 8 , 15 , 4 , 2 , 14 , 12 ] , [ 29 , 55 , 35 , 2 , 0 , 0 ] , [ 29 , 24 , 44 , 2 , 0 , 0 ] , [ 34 , 34 , 32 , 4 , 0 , 0 ] , [ 3 , 14 , 16 , 1 , 0 , 0 ] , [ 24 , 10 , 16 , 1 , 0 , 0 ] , [ 21 , 11 , 13 , 2 , 0 , 0 ] , [ 18 , 14 , 12 , 3 , 0 , 0 ] , [ 16 , 14 , 19 , 0 , 0 , 0 ] , [ 17 , 18 , 20 , 5 , 0 , 0 ] , [ 28 , 10 , 5 , 1 , 0 , 0 ] , [ 28 , 8 , 8 , 1 , 0 , 0 ] , [ 26 , 19 , 2 , 1 , 0 , 0 ] , [ 26 , 30 , 2 , 1 , 0 , 0 ] , [ 5 , 59 , 20 , 4 , 0 , 0 ] , [ 32 , 60 , 24 , 4 , 0 , 0 ] , [ 32 , 61 , 45 , 5 , 0 , 0 ] , [ 32 , 52 , 51 , 5 , 0 , 0 ] , [ 33 , 56 , 51 , 5 , 0 , 0 ] , [ 33 , 62 , 49 , 5 , 0 , 0 ] , [ 33 , 41 , 47 , 5 , 0 , 0 ] , [ 33 , 33 , 52 , 5 , 0 , 0 ] , [ 5 , 31 , 40 , 0 , 0 , 0 ] , [ 33 , 65 , 37 , 5 , 0 , 0 ] , [ 33 , 63 , 29 , 4 , 0 , 0 ] , [ 33 , 54 , 11 , 4 , 0 , 0 ] , [ 33 , 56 , 15 , 4 , 0 , 0 ] , [ 33 , 51 , 6 , 4 , 0 , 0 ] , [ 26 , 39 , 25 , 0 , 0 , 0 ] , [ 26 , 37 , 21 , 0 , 0 , 0 ] , [ 32 , 35 , 17 , 4 , 0 , 0 ] , [ 33 , 35 , 28 , 4 , 0 , 0 ] , [ 33 , 28 , 46 , 5 , 0 , 0 ] , [ 33 , 31 , 6 , 4 , 0 , 0 ] , [ 26 , 54 , 38 , 4 , 0 , 0 ] , [ 33 , 207 , 167 , 3 , 0 , 0 ] , [ 30 , 43 , 2 , 4 , 0 , 0 ] ] ;
2600: LD_ADDR_VAR 0 4
2604: PUSH
2605: LD_INT 0
2607: PUSH
2608: LD_INT 208
2610: PUSH
2611: LD_INT 163
2613: PUSH
2614: LD_INT 4
2616: PUSH
2617: LD_INT 0
2619: PUSH
2620: LD_INT 0
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: PUSH
2631: LD_INT 3
2633: PUSH
2634: LD_INT 194
2636: PUSH
2637: LD_INT 161
2639: PUSH
2640: LD_INT 1
2642: PUSH
2643: LD_INT 0
2645: PUSH
2646: LD_INT 0
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: PUSH
2657: LD_INT 17
2659: PUSH
2660: LD_INT 190
2662: PUSH
2663: LD_INT 161
2665: PUSH
2666: LD_INT 1
2668: PUSH
2669: LD_INT 0
2671: PUSH
2672: LD_INT 0
2674: PUSH
2675: EMPTY
2676: LIST
2677: LIST
2678: LIST
2679: LIST
2680: LIST
2681: LIST
2682: PUSH
2683: LD_INT 5
2685: PUSH
2686: LD_INT 200
2688: PUSH
2689: LD_INT 145
2691: PUSH
2692: LD_INT 3
2694: PUSH
2695: LD_INT 0
2697: PUSH
2698: LD_INT 0
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: PUSH
2709: LD_INT 32
2711: PUSH
2712: LD_INT 192
2714: PUSH
2715: LD_INT 144
2717: PUSH
2718: LD_INT 3
2720: PUSH
2721: LD_INT 0
2723: PUSH
2724: LD_INT 0
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: LIST
2731: LIST
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 26
2737: PUSH
2738: LD_INT 216
2740: PUSH
2741: LD_INT 172
2743: PUSH
2744: LD_INT 3
2746: PUSH
2747: LD_INT 0
2749: PUSH
2750: LD_INT 0
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: LIST
2757: LIST
2758: LIST
2759: LIST
2760: PUSH
2761: LD_INT 26
2763: PUSH
2764: LD_INT 218
2766: PUSH
2767: LD_INT 176
2769: PUSH
2770: LD_INT 3
2772: PUSH
2773: LD_INT 0
2775: PUSH
2776: LD_INT 0
2778: PUSH
2779: EMPTY
2780: LIST
2781: LIST
2782: LIST
2783: LIST
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 29
2789: PUSH
2790: LD_INT 182
2792: PUSH
2793: LD_INT 149
2795: PUSH
2796: LD_INT 3
2798: PUSH
2799: LD_INT 0
2801: PUSH
2802: LD_INT 0
2804: PUSH
2805: EMPTY
2806: LIST
2807: LIST
2808: LIST
2809: LIST
2810: LIST
2811: LIST
2812: PUSH
2813: LD_INT 8
2815: PUSH
2816: LD_INT 201
2818: PUSH
2819: LD_INT 171
2821: PUSH
2822: LD_INT 0
2824: PUSH
2825: LD_INT 10
2827: PUSH
2828: LD_INT 11
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: LIST
2837: LIST
2838: PUSH
2839: LD_INT 32
2841: PUSH
2842: LD_INT 188
2844: PUSH
2845: LD_INT 167
2847: PUSH
2848: LD_INT 0
2850: PUSH
2851: LD_INT 0
2853: PUSH
2854: LD_INT 0
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: LIST
2864: PUSH
2865: LD_INT 32
2867: PUSH
2868: LD_INT 202
2870: PUSH
2871: LD_INT 179
2873: PUSH
2874: LD_INT 0
2876: PUSH
2877: LD_INT 0
2879: PUSH
2880: LD_INT 0
2882: PUSH
2883: EMPTY
2884: LIST
2885: LIST
2886: LIST
2887: LIST
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 32
2893: PUSH
2894: LD_INT 209
2896: PUSH
2897: LD_INT 182
2899: PUSH
2900: LD_INT 0
2902: PUSH
2903: LD_INT 0
2905: PUSH
2906: LD_INT 0
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: LIST
2913: LIST
2914: LIST
2915: LIST
2916: PUSH
2917: LD_INT 32
2919: PUSH
2920: LD_INT 220
2922: PUSH
2923: LD_INT 183
2925: PUSH
2926: LD_INT 5
2928: PUSH
2929: LD_INT 0
2931: PUSH
2932: LD_INT 0
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: LIST
2939: LIST
2940: LIST
2941: LIST
2942: PUSH
2943: LD_INT 32
2945: PUSH
2946: LD_INT 225
2948: PUSH
2949: LD_INT 181
2951: PUSH
2952: LD_INT 5
2954: PUSH
2955: LD_INT 0
2957: PUSH
2958: LD_INT 0
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: LIST
2965: LIST
2966: LIST
2967: LIST
2968: PUSH
2969: LD_INT 26
2971: PUSH
2972: LD_INT 220
2974: PUSH
2975: LD_INT 174
2977: PUSH
2978: LD_INT 5
2980: PUSH
2981: LD_INT 0
2983: PUSH
2984: LD_INT 0
2986: PUSH
2987: EMPTY
2988: LIST
2989: LIST
2990: LIST
2991: LIST
2992: LIST
2993: LIST
2994: PUSH
2995: LD_INT 1
2997: PUSH
2998: LD_INT 84
3000: PUSH
3001: LD_INT 128
3003: PUSH
3004: LD_INT 4
3006: PUSH
3007: LD_INT 0
3009: PUSH
3010: LD_INT 0
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: LIST
3017: LIST
3018: LIST
3019: LIST
3020: PUSH
3021: LD_INT 3
3023: PUSH
3024: LD_INT 68
3026: PUSH
3027: LD_INT 121
3029: PUSH
3030: LD_INT 1
3032: PUSH
3033: LD_INT 0
3035: PUSH
3036: LD_INT 0
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: LIST
3043: LIST
3044: LIST
3045: LIST
3046: PUSH
3047: LD_INT 19
3049: PUSH
3050: LD_INT 72
3052: PUSH
3053: LD_INT 125
3055: PUSH
3056: LD_INT 5
3058: PUSH
3059: LD_INT 0
3061: PUSH
3062: LD_INT 0
3064: PUSH
3065: EMPTY
3066: LIST
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: PUSH
3073: LD_INT 18
3075: PUSH
3076: LD_INT 68
3078: PUSH
3079: LD_INT 124
3081: PUSH
3082: LD_INT 0
3084: PUSH
3085: LD_INT 0
3087: PUSH
3088: LD_INT 0
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: PUSH
3099: LD_INT 24
3101: PUSH
3102: LD_INT 64
3104: PUSH
3105: LD_INT 121
3107: PUSH
3108: LD_INT 1
3110: PUSH
3111: LD_INT 0
3113: PUSH
3114: LD_INT 0
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: PUSH
3125: LD_INT 17
3127: PUSH
3128: LD_INT 65
3130: PUSH
3131: LD_INT 118
3133: PUSH
3134: LD_INT 2
3136: PUSH
3137: LD_INT 0
3139: PUSH
3140: LD_INT 0
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: PUSH
3151: LD_INT 21
3153: PUSH
3154: LD_INT 68
3156: PUSH
3157: LD_INT 117
3159: PUSH
3160: LD_INT 3
3162: PUSH
3163: LD_INT 0
3165: PUSH
3166: LD_INT 0
3168: PUSH
3169: EMPTY
3170: LIST
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: PUSH
3177: LD_INT 8
3179: PUSH
3180: LD_INT 68
3182: PUSH
3183: LD_INT 130
3185: PUSH
3186: LD_INT 1
3188: PUSH
3189: LD_INT 14
3191: PUSH
3192: LD_INT 10
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: PUSH
3203: LD_INT 8
3205: PUSH
3206: LD_INT 67
3208: PUSH
3209: LD_INT 110
3211: PUSH
3212: LD_INT 2
3214: PUSH
3215: LD_INT 11
3217: PUSH
3218: LD_INT 12
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: PUSH
3229: LD_INT 28
3231: PUSH
3232: LD_INT 85
3234: PUSH
3235: LD_INT 108
3237: PUSH
3238: LD_INT 2
3240: PUSH
3241: LD_INT 0
3243: PUSH
3244: LD_INT 0
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: PUSH
3255: LD_INT 28
3257: PUSH
3258: LD_INT 85
3260: PUSH
3261: LD_INT 124
3263: PUSH
3264: LD_INT 2
3266: PUSH
3267: LD_INT 0
3269: PUSH
3270: LD_INT 0
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 30
3283: PUSH
3284: LD_INT 97
3286: PUSH
3287: LD_INT 119
3289: PUSH
3290: LD_INT 2
3292: PUSH
3293: LD_INT 0
3295: PUSH
3296: LD_INT 0
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: PUSH
3307: LD_INT 5
3309: PUSH
3310: LD_INT 111
3312: PUSH
3313: LD_INT 138
3315: PUSH
3316: LD_INT 4
3318: PUSH
3319: LD_INT 0
3321: PUSH
3322: LD_INT 0
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: PUSH
3333: LD_INT 33
3335: PUSH
3336: LD_INT 104
3338: PUSH
3339: LD_INT 130
3341: PUSH
3342: LD_INT 3
3344: PUSH
3345: LD_INT 0
3347: PUSH
3348: LD_INT 0
3350: PUSH
3351: EMPTY
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: PUSH
3359: LD_INT 33
3361: PUSH
3362: LD_INT 110
3364: PUSH
3365: LD_INT 142
3367: PUSH
3368: LD_INT 5
3370: PUSH
3371: LD_INT 0
3373: PUSH
3374: LD_INT 0
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: PUSH
3385: LD_INT 33
3387: PUSH
3388: LD_INT 91
3390: PUSH
3391: LD_INT 131
3393: PUSH
3394: LD_INT 5
3396: PUSH
3397: LD_INT 0
3399: PUSH
3400: LD_INT 0
3402: PUSH
3403: EMPTY
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: PUSH
3411: LD_INT 33
3413: PUSH
3414: LD_INT 107
3416: PUSH
3417: LD_INT 157
3419: PUSH
3420: LD_INT 5
3422: PUSH
3423: LD_INT 0
3425: PUSH
3426: LD_INT 0
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: PUSH
3437: LD_INT 33
3439: PUSH
3440: LD_INT 104
3442: PUSH
3443: LD_INT 160
3445: PUSH
3446: LD_INT 5
3448: PUSH
3449: LD_INT 0
3451: PUSH
3452: LD_INT 0
3454: PUSH
3455: EMPTY
3456: LIST
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: PUSH
3463: LD_INT 33
3465: PUSH
3466: LD_INT 101
3468: PUSH
3469: LD_INT 162
3471: PUSH
3472: LD_INT 5
3474: PUSH
3475: LD_INT 0
3477: PUSH
3478: LD_INT 0
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: PUSH
3489: LD_INT 32
3491: PUSH
3492: LD_INT 87
3494: PUSH
3495: LD_INT 157
3497: PUSH
3498: LD_INT 5
3500: PUSH
3501: LD_INT 0
3503: PUSH
3504: LD_INT 0
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: PUSH
3515: LD_INT 32
3517: PUSH
3518: LD_INT 105
3520: PUSH
3521: LD_INT 158
3523: PUSH
3524: LD_INT 5
3526: PUSH
3527: LD_INT 0
3529: PUSH
3530: LD_INT 0
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: PUSH
3541: LD_INT 33
3543: PUSH
3544: LD_INT 91
3546: PUSH
3547: LD_INT 118
3549: PUSH
3550: LD_INT 4
3552: PUSH
3553: LD_INT 0
3555: PUSH
3556: LD_INT 0
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: PUSH
3567: LD_INT 33
3569: PUSH
3570: LD_INT 89
3572: PUSH
3573: LD_INT 107
3575: PUSH
3576: LD_INT 4
3578: PUSH
3579: LD_INT 0
3581: PUSH
3582: LD_INT 0
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: PUSH
3593: LD_INT 5
3595: PUSH
3596: LD_INT 86
3598: PUSH
3599: LD_INT 96
3601: PUSH
3602: LD_INT 3
3604: PUSH
3605: LD_INT 0
3607: PUSH
3608: LD_INT 0
3610: PUSH
3611: EMPTY
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: PUSH
3619: LD_INT 33
3621: PUSH
3622: LD_INT 91
3624: PUSH
3625: LD_INT 102
3627: PUSH
3628: LD_INT 4
3630: PUSH
3631: LD_INT 0
3633: PUSH
3634: LD_INT 0
3636: PUSH
3637: EMPTY
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: PUSH
3645: LD_INT 32
3647: PUSH
3648: LD_INT 80
3650: PUSH
3651: LD_INT 95
3653: PUSH
3654: LD_INT 3
3656: PUSH
3657: LD_INT 0
3659: PUSH
3660: LD_INT 0
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: PUSH
3671: LD_INT 28
3673: PUSH
3674: LD_INT 77
3676: PUSH
3677: LD_INT 105
3679: PUSH
3680: LD_INT 3
3682: PUSH
3683: LD_INT 0
3685: PUSH
3686: LD_INT 0
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: PUSH
3697: LD_INT 28
3699: PUSH
3700: LD_INT 85
3702: PUSH
3703: LD_INT 113
3705: PUSH
3706: LD_INT 3
3708: PUSH
3709: LD_INT 0
3711: PUSH
3712: LD_INT 0
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: PUSH
3723: LD_INT 28
3725: PUSH
3726: LD_INT 55
3728: PUSH
3729: LD_INT 97
3731: PUSH
3732: LD_INT 3
3734: PUSH
3735: LD_INT 0
3737: PUSH
3738: LD_INT 0
3740: PUSH
3741: EMPTY
3742: LIST
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: LIST
3748: PUSH
3749: LD_INT 28
3751: PUSH
3752: LD_INT 88
3754: PUSH
3755: LD_INT 128
3757: PUSH
3758: LD_INT 3
3760: PUSH
3761: LD_INT 0
3763: PUSH
3764: LD_INT 0
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: PUSH
3775: LD_INT 32
3777: PUSH
3778: LD_INT 69
3780: PUSH
3781: LD_INT 101
3783: PUSH
3784: LD_INT 2
3786: PUSH
3787: LD_INT 0
3789: PUSH
3790: LD_INT 0
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: PUSH
3801: LD_INT 1
3803: PUSH
3804: LD_INT 34
3806: PUSH
3807: LD_INT 23
3809: PUSH
3810: LD_INT 4
3812: PUSH
3813: LD_INT 0
3815: PUSH
3816: LD_INT 0
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: PUSH
3827: LD_INT 8
3829: PUSH
3830: LD_INT 25
3832: PUSH
3833: LD_INT 4
3835: PUSH
3836: LD_INT 3
3838: PUSH
3839: LD_INT 11
3841: PUSH
3842: LD_INT 10
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: PUSH
3853: LD_INT 8
3855: PUSH
3856: LD_INT 15
3858: PUSH
3859: LD_INT 4
3861: PUSH
3862: LD_INT 2
3864: PUSH
3865: LD_INT 14
3867: PUSH
3868: LD_INT 12
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: PUSH
3879: LD_INT 29
3881: PUSH
3882: LD_INT 55
3884: PUSH
3885: LD_INT 35
3887: PUSH
3888: LD_INT 2
3890: PUSH
3891: LD_INT 0
3893: PUSH
3894: LD_INT 0
3896: PUSH
3897: EMPTY
3898: LIST
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: PUSH
3905: LD_INT 29
3907: PUSH
3908: LD_INT 24
3910: PUSH
3911: LD_INT 44
3913: PUSH
3914: LD_INT 2
3916: PUSH
3917: LD_INT 0
3919: PUSH
3920: LD_INT 0
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 34
3933: PUSH
3934: LD_INT 34
3936: PUSH
3937: LD_INT 32
3939: PUSH
3940: LD_INT 4
3942: PUSH
3943: LD_INT 0
3945: PUSH
3946: LD_INT 0
3948: PUSH
3949: EMPTY
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: PUSH
3957: LD_INT 3
3959: PUSH
3960: LD_INT 14
3962: PUSH
3963: LD_INT 16
3965: PUSH
3966: LD_INT 1
3968: PUSH
3969: LD_INT 0
3971: PUSH
3972: LD_INT 0
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: PUSH
3983: LD_INT 24
3985: PUSH
3986: LD_INT 10
3988: PUSH
3989: LD_INT 16
3991: PUSH
3992: LD_INT 1
3994: PUSH
3995: LD_INT 0
3997: PUSH
3998: LD_INT 0
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: PUSH
4009: LD_INT 21
4011: PUSH
4012: LD_INT 11
4014: PUSH
4015: LD_INT 13
4017: PUSH
4018: LD_INT 2
4020: PUSH
4021: LD_INT 0
4023: PUSH
4024: LD_INT 0
4026: PUSH
4027: EMPTY
4028: LIST
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: PUSH
4035: LD_INT 18
4037: PUSH
4038: LD_INT 14
4040: PUSH
4041: LD_INT 12
4043: PUSH
4044: LD_INT 3
4046: PUSH
4047: LD_INT 0
4049: PUSH
4050: LD_INT 0
4052: PUSH
4053: EMPTY
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: LIST
4059: LIST
4060: PUSH
4061: LD_INT 16
4063: PUSH
4064: LD_INT 14
4066: PUSH
4067: LD_INT 19
4069: PUSH
4070: LD_INT 0
4072: PUSH
4073: LD_INT 0
4075: PUSH
4076: LD_INT 0
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: PUSH
4087: LD_INT 17
4089: PUSH
4090: LD_INT 18
4092: PUSH
4093: LD_INT 20
4095: PUSH
4096: LD_INT 5
4098: PUSH
4099: LD_INT 0
4101: PUSH
4102: LD_INT 0
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: PUSH
4113: LD_INT 28
4115: PUSH
4116: LD_INT 10
4118: PUSH
4119: LD_INT 5
4121: PUSH
4122: LD_INT 1
4124: PUSH
4125: LD_INT 0
4127: PUSH
4128: LD_INT 0
4130: PUSH
4131: EMPTY
4132: LIST
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: PUSH
4139: LD_INT 28
4141: PUSH
4142: LD_INT 8
4144: PUSH
4145: LD_INT 8
4147: PUSH
4148: LD_INT 1
4150: PUSH
4151: LD_INT 0
4153: PUSH
4154: LD_INT 0
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: PUSH
4165: LD_INT 26
4167: PUSH
4168: LD_INT 19
4170: PUSH
4171: LD_INT 2
4173: PUSH
4174: LD_INT 1
4176: PUSH
4177: LD_INT 0
4179: PUSH
4180: LD_INT 0
4182: PUSH
4183: EMPTY
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: PUSH
4191: LD_INT 26
4193: PUSH
4194: LD_INT 30
4196: PUSH
4197: LD_INT 2
4199: PUSH
4200: LD_INT 1
4202: PUSH
4203: LD_INT 0
4205: PUSH
4206: LD_INT 0
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: PUSH
4217: LD_INT 5
4219: PUSH
4220: LD_INT 59
4222: PUSH
4223: LD_INT 20
4225: PUSH
4226: LD_INT 4
4228: PUSH
4229: LD_INT 0
4231: PUSH
4232: LD_INT 0
4234: PUSH
4235: EMPTY
4236: LIST
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: PUSH
4243: LD_INT 32
4245: PUSH
4246: LD_INT 60
4248: PUSH
4249: LD_INT 24
4251: PUSH
4252: LD_INT 4
4254: PUSH
4255: LD_INT 0
4257: PUSH
4258: LD_INT 0
4260: PUSH
4261: EMPTY
4262: LIST
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: PUSH
4269: LD_INT 32
4271: PUSH
4272: LD_INT 61
4274: PUSH
4275: LD_INT 45
4277: PUSH
4278: LD_INT 5
4280: PUSH
4281: LD_INT 0
4283: PUSH
4284: LD_INT 0
4286: PUSH
4287: EMPTY
4288: LIST
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: LIST
4294: PUSH
4295: LD_INT 32
4297: PUSH
4298: LD_INT 52
4300: PUSH
4301: LD_INT 51
4303: PUSH
4304: LD_INT 5
4306: PUSH
4307: LD_INT 0
4309: PUSH
4310: LD_INT 0
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: PUSH
4321: LD_INT 33
4323: PUSH
4324: LD_INT 56
4326: PUSH
4327: LD_INT 51
4329: PUSH
4330: LD_INT 5
4332: PUSH
4333: LD_INT 0
4335: PUSH
4336: LD_INT 0
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: PUSH
4347: LD_INT 33
4349: PUSH
4350: LD_INT 62
4352: PUSH
4353: LD_INT 49
4355: PUSH
4356: LD_INT 5
4358: PUSH
4359: LD_INT 0
4361: PUSH
4362: LD_INT 0
4364: PUSH
4365: EMPTY
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: PUSH
4373: LD_INT 33
4375: PUSH
4376: LD_INT 41
4378: PUSH
4379: LD_INT 47
4381: PUSH
4382: LD_INT 5
4384: PUSH
4385: LD_INT 0
4387: PUSH
4388: LD_INT 0
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: PUSH
4399: LD_INT 33
4401: PUSH
4402: LD_INT 33
4404: PUSH
4405: LD_INT 52
4407: PUSH
4408: LD_INT 5
4410: PUSH
4411: LD_INT 0
4413: PUSH
4414: LD_INT 0
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: PUSH
4425: LD_INT 5
4427: PUSH
4428: LD_INT 31
4430: PUSH
4431: LD_INT 40
4433: PUSH
4434: LD_INT 0
4436: PUSH
4437: LD_INT 0
4439: PUSH
4440: LD_INT 0
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: PUSH
4451: LD_INT 33
4453: PUSH
4454: LD_INT 65
4456: PUSH
4457: LD_INT 37
4459: PUSH
4460: LD_INT 5
4462: PUSH
4463: LD_INT 0
4465: PUSH
4466: LD_INT 0
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: PUSH
4477: LD_INT 33
4479: PUSH
4480: LD_INT 63
4482: PUSH
4483: LD_INT 29
4485: PUSH
4486: LD_INT 4
4488: PUSH
4489: LD_INT 0
4491: PUSH
4492: LD_INT 0
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 33
4505: PUSH
4506: LD_INT 54
4508: PUSH
4509: LD_INT 11
4511: PUSH
4512: LD_INT 4
4514: PUSH
4515: LD_INT 0
4517: PUSH
4518: LD_INT 0
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: PUSH
4529: LD_INT 33
4531: PUSH
4532: LD_INT 56
4534: PUSH
4535: LD_INT 15
4537: PUSH
4538: LD_INT 4
4540: PUSH
4541: LD_INT 0
4543: PUSH
4544: LD_INT 0
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: PUSH
4555: LD_INT 33
4557: PUSH
4558: LD_INT 51
4560: PUSH
4561: LD_INT 6
4563: PUSH
4564: LD_INT 4
4566: PUSH
4567: LD_INT 0
4569: PUSH
4570: LD_INT 0
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 26
4583: PUSH
4584: LD_INT 39
4586: PUSH
4587: LD_INT 25
4589: PUSH
4590: LD_INT 0
4592: PUSH
4593: LD_INT 0
4595: PUSH
4596: LD_INT 0
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: PUSH
4607: LD_INT 26
4609: PUSH
4610: LD_INT 37
4612: PUSH
4613: LD_INT 21
4615: PUSH
4616: LD_INT 0
4618: PUSH
4619: LD_INT 0
4621: PUSH
4622: LD_INT 0
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: PUSH
4633: LD_INT 32
4635: PUSH
4636: LD_INT 35
4638: PUSH
4639: LD_INT 17
4641: PUSH
4642: LD_INT 4
4644: PUSH
4645: LD_INT 0
4647: PUSH
4648: LD_INT 0
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: LIST
4658: PUSH
4659: LD_INT 33
4661: PUSH
4662: LD_INT 35
4664: PUSH
4665: LD_INT 28
4667: PUSH
4668: LD_INT 4
4670: PUSH
4671: LD_INT 0
4673: PUSH
4674: LD_INT 0
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: PUSH
4685: LD_INT 33
4687: PUSH
4688: LD_INT 28
4690: PUSH
4691: LD_INT 46
4693: PUSH
4694: LD_INT 5
4696: PUSH
4697: LD_INT 0
4699: PUSH
4700: LD_INT 0
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: PUSH
4711: LD_INT 33
4713: PUSH
4714: LD_INT 31
4716: PUSH
4717: LD_INT 6
4719: PUSH
4720: LD_INT 4
4722: PUSH
4723: LD_INT 0
4725: PUSH
4726: LD_INT 0
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: PUSH
4737: LD_INT 26
4739: PUSH
4740: LD_INT 54
4742: PUSH
4743: LD_INT 38
4745: PUSH
4746: LD_INT 4
4748: PUSH
4749: LD_INT 0
4751: PUSH
4752: LD_INT 0
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: PUSH
4763: LD_INT 33
4765: PUSH
4766: LD_INT 207
4768: PUSH
4769: LD_INT 167
4771: PUSH
4772: LD_INT 3
4774: PUSH
4775: LD_INT 0
4777: PUSH
4778: LD_INT 0
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: PUSH
4789: LD_INT 30
4791: PUSH
4792: LD_INT 43
4794: PUSH
4795: LD_INT 2
4797: PUSH
4798: LD_INT 4
4800: PUSH
4801: LD_INT 0
4803: PUSH
4804: LD_INT 0
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: LIST
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: ST_TO_ADDR
// for i in tmp do
4902: LD_ADDR_VAR 0 2
4906: PUSH
4907: LD_VAR 0 4
4911: PUSH
4912: FOR_IN
4913: IFFALSE 5144
// begin uc_side := side ;
4915: LD_ADDR_OWVAR 20
4919: PUSH
4920: LD_VAR 0 5
4924: ST_TO_ADDR
// uc_nation := nation_russian ;
4925: LD_ADDR_OWVAR 21
4929: PUSH
4930: LD_INT 3
4932: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4933: LD_ADDR_OWVAR 42
4937: PUSH
4938: LD_VAR 0 2
4942: PUSH
4943: LD_INT 1
4945: ARRAY
4946: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
4947: LD_ADDR_OWVAR 43
4951: PUSH
4952: LD_INT 5
4954: PPUSH
4955: LD_INT 6
4957: PPUSH
4958: CALL_OW 12
4962: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
4963: LD_ADDR_OWVAR 44
4967: PUSH
4968: LD_VAR 0 2
4972: PUSH
4973: LD_INT 5
4975: ARRAY
4976: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
4977: LD_ADDR_OWVAR 45
4981: PUSH
4982: LD_VAR 0 2
4986: PUSH
4987: LD_INT 6
4989: ARRAY
4990: ST_TO_ADDR
// sr := 0 ;
4991: LD_ADDR_VAR 0 6
4995: PUSH
4996: LD_INT 0
4998: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
4999: LD_VAR 0 2
5003: PUSH
5004: LD_INT 1
5006: ARRAY
5007: PUSH
5008: LD_INT 29
5010: EQUAL
5011: IFFALSE 5023
// sr := mat_oil else
5013: LD_ADDR_VAR 0 6
5017: PUSH
5018: LD_INT 2
5020: ST_TO_ADDR
5021: GO 5045
// if i [ 1 ] = b_siberite_mine then
5023: LD_VAR 0 2
5027: PUSH
5028: LD_INT 1
5030: ARRAY
5031: PUSH
5032: LD_INT 30
5034: EQUAL
5035: IFFALSE 5045
// sr := mat_siberit ;
5037: LD_ADDR_VAR 0 6
5041: PUSH
5042: LD_INT 3
5044: ST_TO_ADDR
// if sr then
5045: LD_VAR 0 6
5049: IFFALSE 5105
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
5051: LD_VAR 0 2
5055: PUSH
5056: LD_INT 2
5058: ARRAY
5059: PPUSH
5060: LD_VAR 0 2
5064: PUSH
5065: LD_INT 3
5067: ARRAY
5068: PPUSH
5069: LD_VAR 0 6
5073: PPUSH
5074: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
5078: LD_VAR 0 2
5082: PUSH
5083: LD_INT 2
5085: ARRAY
5086: PPUSH
5087: LD_VAR 0 2
5091: PUSH
5092: LD_INT 3
5094: ARRAY
5095: PPUSH
5096: LD_VAR 0 5
5100: PPUSH
5101: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
5105: LD_ADDR_VAR 0 3
5109: PUSH
5110: LD_VAR 0 2
5114: PUSH
5115: LD_INT 2
5117: ARRAY
5118: PPUSH
5119: LD_VAR 0 2
5123: PUSH
5124: LD_INT 3
5126: ARRAY
5127: PPUSH
5128: LD_VAR 0 2
5132: PUSH
5133: LD_INT 4
5135: ARRAY
5136: PPUSH
5137: CALL_OW 47
5141: ST_TO_ADDR
// end ;
5142: GO 4912
5144: POP
5145: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
5146: LD_ADDR_VAR 0 7
5150: PUSH
5151: LD_INT 22
5153: PUSH
5154: LD_VAR 0 5
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: PUSH
5163: LD_INT 30
5165: PUSH
5166: LD_INT 1
5168: PUSH
5169: EMPTY
5170: LIST
5171: LIST
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PPUSH
5177: CALL_OW 69
5181: ST_TO_ADDR
// if not depot then
5182: LD_VAR 0 7
5186: NOT
5187: IFFALSE 5191
// exit ;
5189: GO 5535
// base := PrepareBase ( HexInfo ( 84 , 128 ) , rus1Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5191: LD_ADDR_VAR 0 8
5195: PUSH
5196: LD_INT 84
5198: PPUSH
5199: LD_INT 128
5201: PPUSH
5202: CALL_OW 428
5206: PPUSH
5207: LD_INT 15
5209: PPUSH
5210: LD_INT 0
5212: PPUSH
5213: LD_INT 6
5215: PUSH
5216: LD_INT 7
5218: PUSH
5219: LD_INT 8
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: LIST
5226: PUSH
5227: LD_OWVAR 67
5231: ARRAY
5232: PPUSH
5233: LD_INT 3000
5235: PUSH
5236: LD_INT 300
5238: PUSH
5239: LD_INT 100
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: LIST
5246: PPUSH
5247: LD_INT 12
5249: PUSH
5250: LD_INT 6
5252: PUSH
5253: LD_INT 6
5255: PUSH
5256: LD_INT 4
5258: PUSH
5259: EMPTY
5260: LIST
5261: LIST
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL 28021 0 6
5269: ST_TO_ADDR
// if not base then
5270: LD_VAR 0 8
5274: NOT
5275: IFFALSE 5279
// exit ;
5277: GO 5535
// mc_bases := Replace ( mc_bases , mc_rus_1 , base ) ;
5279: LD_ADDR_EXP 50
5283: PUSH
5284: LD_EXP 50
5288: PPUSH
5289: LD_EXP 7
5293: PPUSH
5294: LD_VAR 0 8
5298: PPUSH
5299: CALL_OW 1
5303: ST_TO_ADDR
// base := PrepareBase ( HexInfo ( 34 , 23 ) , rus2Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 20000 , 3000 , 1000 ] , [ 12 , 6 , 6 , 4 ] ) ;
5304: LD_ADDR_VAR 0 8
5308: PUSH
5309: LD_INT 34
5311: PPUSH
5312: LD_INT 23
5314: PPUSH
5315: CALL_OW 428
5319: PPUSH
5320: LD_INT 11
5322: PPUSH
5323: LD_INT 0
5325: PPUSH
5326: LD_INT 6
5328: PUSH
5329: LD_INT 7
5331: PUSH
5332: LD_INT 8
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: LIST
5339: PUSH
5340: LD_OWVAR 67
5344: ARRAY
5345: PPUSH
5346: LD_INT 20000
5348: PUSH
5349: LD_INT 3000
5351: PUSH
5352: LD_INT 1000
5354: PUSH
5355: EMPTY
5356: LIST
5357: LIST
5358: LIST
5359: PPUSH
5360: LD_INT 12
5362: PUSH
5363: LD_INT 6
5365: PUSH
5366: LD_INT 6
5368: PUSH
5369: LD_INT 4
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: PPUSH
5378: CALL 28021 0 6
5382: ST_TO_ADDR
// if not base then
5383: LD_VAR 0 8
5387: NOT
5388: IFFALSE 5392
// exit ;
5390: GO 5535
// mc_bases := Replace ( mc_bases , mc_rus_2 , base ) ;
5392: LD_ADDR_EXP 50
5396: PUSH
5397: LD_EXP 50
5401: PPUSH
5402: LD_EXP 8
5406: PPUSH
5407: LD_VAR 0 8
5411: PPUSH
5412: CALL_OW 1
5416: ST_TO_ADDR
// ruOutpost := PrepareBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] , ruOutpostArea , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 500 , 100 , 10 ] , [ [ 6 , 7 , 8 ] [ Difficulty ] , 2 , 0 , 1 ] ) ;
5417: LD_ADDR_EXP 14
5421: PUSH
5422: LD_INT 22
5424: PUSH
5425: LD_INT 3
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: PUSH
5432: LD_INT 30
5434: PUSH
5435: LD_INT 0
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: PPUSH
5446: CALL_OW 69
5450: PUSH
5451: LD_INT 1
5453: ARRAY
5454: PPUSH
5455: LD_INT 25
5457: PPUSH
5458: LD_INT 0
5460: PPUSH
5461: LD_INT 6
5463: PUSH
5464: LD_INT 7
5466: PUSH
5467: LD_INT 8
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: LIST
5474: PUSH
5475: LD_OWVAR 67
5479: ARRAY
5480: PPUSH
5481: LD_INT 500
5483: PUSH
5484: LD_INT 100
5486: PUSH
5487: LD_INT 10
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: LIST
5494: PPUSH
5495: LD_INT 6
5497: PUSH
5498: LD_INT 7
5500: PUSH
5501: LD_INT 8
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: LIST
5508: PUSH
5509: LD_OWVAR 67
5513: ARRAY
5514: PUSH
5515: LD_INT 2
5517: PUSH
5518: LD_INT 0
5520: PUSH
5521: LD_INT 1
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: PPUSH
5530: CALL 28021 0 6
5534: ST_TO_ADDR
// end ;
5535: LD_VAR 0 1
5539: RET
// export function PrepareLegion ; var i , b , veh , tmp , tmp2 , cameras , side , sr , depot , base ; begin
5540: LD_INT 0
5542: PPUSH
5543: PPUSH
5544: PPUSH
5545: PPUSH
5546: PPUSH
5547: PPUSH
5548: PPUSH
5549: PPUSH
5550: PPUSH
5551: PPUSH
5552: PPUSH
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 0 , 0 , legApe , 0 ) ;
5553: LD_INT 0
5555: PPUSH
5556: LD_INT 0
5558: PPUSH
5559: LD_INT 6
5561: PPUSH
5562: LD_INT 0
5564: PPUSH
5565: LD_INT 0
5567: PPUSH
5568: LD_INT 0
5570: PPUSH
5571: LD_INT 0
5573: PPUSH
5574: LD_INT 8
5576: PPUSH
5577: LD_INT 0
5579: PPUSH
5580: CALL 53074 0 9
// side := 8 ;
5584: LD_ADDR_VAR 0 8
5588: PUSH
5589: LD_INT 8
5591: ST_TO_ADDR
// tmp := AreaToList ( minesArea , 0 ) ;
5592: LD_ADDR_VAR 0 5
5596: PUSH
5597: LD_INT 20
5599: PPUSH
5600: LD_INT 0
5602: PPUSH
5603: CALL_OW 517
5607: ST_TO_ADDR
// if Difficulty > 2 then
5608: LD_OWVAR 67
5612: PUSH
5613: LD_INT 2
5615: GREATER
5616: IFFALSE 5760
// begin tmp2 := AreaToList ( minesArea2 , 0 ) ;
5618: LD_ADDR_VAR 0 6
5622: PUSH
5623: LD_INT 27
5625: PPUSH
5626: LD_INT 0
5628: PPUSH
5629: CALL_OW 517
5633: ST_TO_ADDR
// for i = 1 to tmp2 [ 1 ] do
5634: LD_ADDR_VAR 0 2
5638: PUSH
5639: DOUBLE
5640: LD_INT 1
5642: DEC
5643: ST_TO_ADDR
5644: LD_VAR 0 6
5648: PUSH
5649: LD_INT 1
5651: ARRAY
5652: PUSH
5653: FOR_TO
5654: IFFALSE 5758
// begin tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , tmp2 [ 1 ] [ i ] ) ;
5656: LD_ADDR_VAR 0 5
5660: PUSH
5661: LD_VAR 0 5
5665: PPUSH
5666: LD_INT 1
5668: PUSH
5669: LD_VAR 0 5
5673: PUSH
5674: LD_INT 1
5676: ARRAY
5677: PUSH
5678: LD_INT 1
5680: PLUS
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: PPUSH
5686: LD_VAR 0 6
5690: PUSH
5691: LD_INT 1
5693: ARRAY
5694: PUSH
5695: LD_VAR 0 2
5699: ARRAY
5700: PPUSH
5701: CALL 24697 0 3
5705: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , tmp2 [ 2 ] [ i ] ) ;
5706: LD_ADDR_VAR 0 5
5710: PUSH
5711: LD_VAR 0 5
5715: PPUSH
5716: LD_INT 2
5718: PUSH
5719: LD_VAR 0 5
5723: PUSH
5724: LD_INT 2
5726: ARRAY
5727: PUSH
5728: LD_INT 1
5730: PLUS
5731: PUSH
5732: EMPTY
5733: LIST
5734: LIST
5735: PPUSH
5736: LD_VAR 0 6
5740: PUSH
5741: LD_INT 2
5743: ARRAY
5744: PUSH
5745: LD_VAR 0 2
5749: ARRAY
5750: PPUSH
5751: CALL 24697 0 3
5755: ST_TO_ADDR
// end ;
5756: GO 5653
5758: POP
5759: POP
// end ; if tmp then
5760: LD_VAR 0 5
5764: IFFALSE 5892
// begin for i = 1 to tmp [ 1 ] do
5766: LD_ADDR_VAR 0 2
5770: PUSH
5771: DOUBLE
5772: LD_INT 1
5774: DEC
5775: ST_TO_ADDR
5776: LD_VAR 0 5
5780: PUSH
5781: LD_INT 1
5783: ARRAY
5784: PUSH
5785: FOR_TO
5786: IFFALSE 5890
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side , 0 ) ;
5788: LD_VAR 0 5
5792: PUSH
5793: LD_INT 1
5795: ARRAY
5796: PUSH
5797: LD_VAR 0 2
5801: ARRAY
5802: PPUSH
5803: LD_VAR 0 5
5807: PUSH
5808: LD_INT 2
5810: ARRAY
5811: PUSH
5812: LD_VAR 0 2
5816: ARRAY
5817: PPUSH
5818: LD_VAR 0 8
5822: PPUSH
5823: LD_INT 0
5825: PPUSH
5826: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
5830: LD_ADDR_EXP 16
5834: PUSH
5835: LD_EXP 16
5839: PPUSH
5840: LD_EXP 16
5844: PUSH
5845: LD_INT 1
5847: PLUS
5848: PPUSH
5849: LD_VAR 0 5
5853: PUSH
5854: LD_INT 1
5856: ARRAY
5857: PUSH
5858: LD_VAR 0 2
5862: ARRAY
5863: PUSH
5864: LD_VAR 0 5
5868: PUSH
5869: LD_INT 2
5871: ARRAY
5872: PUSH
5873: LD_VAR 0 2
5877: ARRAY
5878: PUSH
5879: EMPTY
5880: LIST
5881: LIST
5882: PPUSH
5883: CALL_OW 2
5887: ST_TO_ADDR
// end ;
5888: GO 5785
5890: POP
5891: POP
// end ; cameras := [ [ 165 , 156 ] , [ 143 , 145 ] , [ 152 , 165 ] , [ 123 , 153 ] , [ 161 , 215 ] , [ 172 , 100 ] , [ 148 , 83 ] , [ 122 , 68 ] , [ 105 , 74 ] , [ 113 , 97 ] ] ;
5892: LD_ADDR_VAR 0 7
5896: PUSH
5897: LD_INT 165
5899: PUSH
5900: LD_INT 156
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: PUSH
5907: LD_INT 143
5909: PUSH
5910: LD_INT 145
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: PUSH
5917: LD_INT 152
5919: PUSH
5920: LD_INT 165
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: PUSH
5927: LD_INT 123
5929: PUSH
5930: LD_INT 153
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: PUSH
5937: LD_INT 161
5939: PUSH
5940: LD_INT 215
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PUSH
5947: LD_INT 172
5949: PUSH
5950: LD_INT 100
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: PUSH
5957: LD_INT 148
5959: PUSH
5960: LD_INT 83
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: PUSH
5967: LD_INT 122
5969: PUSH
5970: LD_INT 68
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: PUSH
5977: LD_INT 105
5979: PUSH
5980: LD_INT 74
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: PUSH
5987: LD_INT 113
5989: PUSH
5990: LD_INT 97
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: ST_TO_ADDR
// for i in cameras do
6009: LD_ADDR_VAR 0 2
6013: PUSH
6014: LD_VAR 0 7
6018: PUSH
6019: FOR_IN
6020: IFFALSE 6051
// HiddenCamera ( i [ 1 ] , i [ 2 ] , side ) ;
6022: LD_VAR 0 2
6026: PUSH
6027: LD_INT 1
6029: ARRAY
6030: PPUSH
6031: LD_VAR 0 2
6035: PUSH
6036: LD_INT 2
6038: ARRAY
6039: PPUSH
6040: LD_VAR 0 8
6044: PPUSH
6045: CALL_OW 244
6049: GO 6019
6051: POP
6052: POP
// tmp := [ [ 1 , 144 , 110 , 1 , 0 , 0 ] , [ 3 , 151 , 118 , 0 , 0 , 0 ] , [ 8 , 158 , 110 , 4 , 10 , 15 ] , [ 23 , 154 , 121 , 5 , 0 , 0 ] , [ 22 , 155 , 118 , 4 , 0 , 0 ] , [ 21 , 151 , 122 , 0 , 0 , 0 ] , [ 18 , 148 , 118 , 1 , 0 , 0 ] , [ 17 , 147 , 114 , 2 , 0 , 0 ] , [ 29 , 163 , 120 , 5 , 0 , 0 ] , [ 27 , 137 , 116 , 3 , 0 , 0 ] , [ 27 , 133 , 111 , 1 , 0 , 0 ] , [ 27 , 132 , 106 , 4 , 0 , 0 ] , [ 26 , 137 , 111 , 0 , 0 , 0 ] , [ 8 , 141 , 117 , 1 , 13 , 11 ] , [ 30 , 140 , 128 , 1 , 0 , 0 ] , [ 5 , 146 , 96 , 3 , 0 , 0 ] , [ 32 , 150 , 98 , 3 , 0 , 0 ] , [ 32 , 142 , 95 , 3 , 0 , 0 ] , [ 32 , 159 , 104 , 3 , 0 , 0 ] , [ 32 , 133 , 95 , 3 , 0 , 0 ] , [ 32 , 131 , 102 , 2 , 0 , 0 ] , [ 32 , 164 , 144 , 0 , 0 , 0 ] , [ 32 , 146 , 139 , 0 , 0 , 0 ] , [ 26 , 143 , 122 , 4 , 0 , 0 ] , [ 26 , 164 , 116 , 2 , 0 , 0 ] , ] ;
6053: LD_ADDR_VAR 0 5
6057: PUSH
6058: LD_INT 1
6060: PUSH
6061: LD_INT 144
6063: PUSH
6064: LD_INT 110
6066: PUSH
6067: LD_INT 1
6069: PUSH
6070: LD_INT 0
6072: PUSH
6073: LD_INT 0
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: PUSH
6084: LD_INT 3
6086: PUSH
6087: LD_INT 151
6089: PUSH
6090: LD_INT 118
6092: PUSH
6093: LD_INT 0
6095: PUSH
6096: LD_INT 0
6098: PUSH
6099: LD_INT 0
6101: PUSH
6102: EMPTY
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: PUSH
6110: LD_INT 8
6112: PUSH
6113: LD_INT 158
6115: PUSH
6116: LD_INT 110
6118: PUSH
6119: LD_INT 4
6121: PUSH
6122: LD_INT 10
6124: PUSH
6125: LD_INT 15
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: PUSH
6136: LD_INT 23
6138: PUSH
6139: LD_INT 154
6141: PUSH
6142: LD_INT 121
6144: PUSH
6145: LD_INT 5
6147: PUSH
6148: LD_INT 0
6150: PUSH
6151: LD_INT 0
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: PUSH
6162: LD_INT 22
6164: PUSH
6165: LD_INT 155
6167: PUSH
6168: LD_INT 118
6170: PUSH
6171: LD_INT 4
6173: PUSH
6174: LD_INT 0
6176: PUSH
6177: LD_INT 0
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: PUSH
6188: LD_INT 21
6190: PUSH
6191: LD_INT 151
6193: PUSH
6194: LD_INT 122
6196: PUSH
6197: LD_INT 0
6199: PUSH
6200: LD_INT 0
6202: PUSH
6203: LD_INT 0
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: PUSH
6214: LD_INT 18
6216: PUSH
6217: LD_INT 148
6219: PUSH
6220: LD_INT 118
6222: PUSH
6223: LD_INT 1
6225: PUSH
6226: LD_INT 0
6228: PUSH
6229: LD_INT 0
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: PUSH
6240: LD_INT 17
6242: PUSH
6243: LD_INT 147
6245: PUSH
6246: LD_INT 114
6248: PUSH
6249: LD_INT 2
6251: PUSH
6252: LD_INT 0
6254: PUSH
6255: LD_INT 0
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: PUSH
6266: LD_INT 29
6268: PUSH
6269: LD_INT 163
6271: PUSH
6272: LD_INT 120
6274: PUSH
6275: LD_INT 5
6277: PUSH
6278: LD_INT 0
6280: PUSH
6281: LD_INT 0
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: PUSH
6292: LD_INT 27
6294: PUSH
6295: LD_INT 137
6297: PUSH
6298: LD_INT 116
6300: PUSH
6301: LD_INT 3
6303: PUSH
6304: LD_INT 0
6306: PUSH
6307: LD_INT 0
6309: PUSH
6310: EMPTY
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: PUSH
6318: LD_INT 27
6320: PUSH
6321: LD_INT 133
6323: PUSH
6324: LD_INT 111
6326: PUSH
6327: LD_INT 1
6329: PUSH
6330: LD_INT 0
6332: PUSH
6333: LD_INT 0
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: PUSH
6344: LD_INT 27
6346: PUSH
6347: LD_INT 132
6349: PUSH
6350: LD_INT 106
6352: PUSH
6353: LD_INT 4
6355: PUSH
6356: LD_INT 0
6358: PUSH
6359: LD_INT 0
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: PUSH
6370: LD_INT 26
6372: PUSH
6373: LD_INT 137
6375: PUSH
6376: LD_INT 111
6378: PUSH
6379: LD_INT 0
6381: PUSH
6382: LD_INT 0
6384: PUSH
6385: LD_INT 0
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: PUSH
6396: LD_INT 8
6398: PUSH
6399: LD_INT 141
6401: PUSH
6402: LD_INT 117
6404: PUSH
6405: LD_INT 1
6407: PUSH
6408: LD_INT 13
6410: PUSH
6411: LD_INT 11
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: PUSH
6422: LD_INT 30
6424: PUSH
6425: LD_INT 140
6427: PUSH
6428: LD_INT 128
6430: PUSH
6431: LD_INT 1
6433: PUSH
6434: LD_INT 0
6436: PUSH
6437: LD_INT 0
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: PUSH
6448: LD_INT 5
6450: PUSH
6451: LD_INT 146
6453: PUSH
6454: LD_INT 96
6456: PUSH
6457: LD_INT 3
6459: PUSH
6460: LD_INT 0
6462: PUSH
6463: LD_INT 0
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: PUSH
6474: LD_INT 32
6476: PUSH
6477: LD_INT 150
6479: PUSH
6480: LD_INT 98
6482: PUSH
6483: LD_INT 3
6485: PUSH
6486: LD_INT 0
6488: PUSH
6489: LD_INT 0
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: PUSH
6500: LD_INT 32
6502: PUSH
6503: LD_INT 142
6505: PUSH
6506: LD_INT 95
6508: PUSH
6509: LD_INT 3
6511: PUSH
6512: LD_INT 0
6514: PUSH
6515: LD_INT 0
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: PUSH
6526: LD_INT 32
6528: PUSH
6529: LD_INT 159
6531: PUSH
6532: LD_INT 104
6534: PUSH
6535: LD_INT 3
6537: PUSH
6538: LD_INT 0
6540: PUSH
6541: LD_INT 0
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: PUSH
6552: LD_INT 32
6554: PUSH
6555: LD_INT 133
6557: PUSH
6558: LD_INT 95
6560: PUSH
6561: LD_INT 3
6563: PUSH
6564: LD_INT 0
6566: PUSH
6567: LD_INT 0
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: PUSH
6578: LD_INT 32
6580: PUSH
6581: LD_INT 131
6583: PUSH
6584: LD_INT 102
6586: PUSH
6587: LD_INT 2
6589: PUSH
6590: LD_INT 0
6592: PUSH
6593: LD_INT 0
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: PUSH
6604: LD_INT 32
6606: PUSH
6607: LD_INT 164
6609: PUSH
6610: LD_INT 144
6612: PUSH
6613: LD_INT 0
6615: PUSH
6616: LD_INT 0
6618: PUSH
6619: LD_INT 0
6621: PUSH
6622: EMPTY
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: PUSH
6630: LD_INT 32
6632: PUSH
6633: LD_INT 146
6635: PUSH
6636: LD_INT 139
6638: PUSH
6639: LD_INT 0
6641: PUSH
6642: LD_INT 0
6644: PUSH
6645: LD_INT 0
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: PUSH
6656: LD_INT 26
6658: PUSH
6659: LD_INT 143
6661: PUSH
6662: LD_INT 122
6664: PUSH
6665: LD_INT 4
6667: PUSH
6668: LD_INT 0
6670: PUSH
6671: LD_INT 0
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: PUSH
6682: LD_INT 26
6684: PUSH
6685: LD_INT 164
6687: PUSH
6688: LD_INT 116
6690: PUSH
6691: LD_INT 2
6693: PUSH
6694: LD_INT 0
6696: PUSH
6697: LD_INT 0
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: ST_TO_ADDR
// for i in tmp do
6735: LD_ADDR_VAR 0 2
6739: PUSH
6740: LD_VAR 0 5
6744: PUSH
6745: FOR_IN
6746: IFFALSE 6977
// begin uc_side := side ;
6748: LD_ADDR_OWVAR 20
6752: PUSH
6753: LD_VAR 0 8
6757: ST_TO_ADDR
// uc_nation := nation_arabian ;
6758: LD_ADDR_OWVAR 21
6762: PUSH
6763: LD_INT 2
6765: ST_TO_ADDR
// bc_type := i [ 1 ] ;
6766: LD_ADDR_OWVAR 42
6770: PUSH
6771: LD_VAR 0 2
6775: PUSH
6776: LD_INT 1
6778: ARRAY
6779: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
6780: LD_ADDR_OWVAR 43
6784: PUSH
6785: LD_INT 5
6787: PPUSH
6788: LD_INT 6
6790: PPUSH
6791: CALL_OW 12
6795: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
6796: LD_ADDR_OWVAR 44
6800: PUSH
6801: LD_VAR 0 2
6805: PUSH
6806: LD_INT 5
6808: ARRAY
6809: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
6810: LD_ADDR_OWVAR 45
6814: PUSH
6815: LD_VAR 0 2
6819: PUSH
6820: LD_INT 6
6822: ARRAY
6823: ST_TO_ADDR
// sr := 0 ;
6824: LD_ADDR_VAR 0 9
6828: PUSH
6829: LD_INT 0
6831: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
6832: LD_VAR 0 2
6836: PUSH
6837: LD_INT 1
6839: ARRAY
6840: PUSH
6841: LD_INT 29
6843: EQUAL
6844: IFFALSE 6856
// sr := mat_oil else
6846: LD_ADDR_VAR 0 9
6850: PUSH
6851: LD_INT 2
6853: ST_TO_ADDR
6854: GO 6878
// if i [ 1 ] = b_siberite_mine then
6856: LD_VAR 0 2
6860: PUSH
6861: LD_INT 1
6863: ARRAY
6864: PUSH
6865: LD_INT 30
6867: EQUAL
6868: IFFALSE 6878
// sr := mat_siberit ;
6870: LD_ADDR_VAR 0 9
6874: PUSH
6875: LD_INT 3
6877: ST_TO_ADDR
// if sr then
6878: LD_VAR 0 9
6882: IFFALSE 6938
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
6884: LD_VAR 0 2
6888: PUSH
6889: LD_INT 2
6891: ARRAY
6892: PPUSH
6893: LD_VAR 0 2
6897: PUSH
6898: LD_INT 3
6900: ARRAY
6901: PPUSH
6902: LD_VAR 0 9
6906: PPUSH
6907: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
6911: LD_VAR 0 2
6915: PUSH
6916: LD_INT 2
6918: ARRAY
6919: PPUSH
6920: LD_VAR 0 2
6924: PUSH
6925: LD_INT 3
6927: ARRAY
6928: PPUSH
6929: LD_VAR 0 8
6933: PPUSH
6934: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
6938: LD_ADDR_VAR 0 3
6942: PUSH
6943: LD_VAR 0 2
6947: PUSH
6948: LD_INT 2
6950: ARRAY
6951: PPUSH
6952: LD_VAR 0 2
6956: PUSH
6957: LD_INT 3
6959: ARRAY
6960: PPUSH
6961: LD_VAR 0 2
6965: PUSH
6966: LD_INT 4
6968: ARRAY
6969: PPUSH
6970: CALL_OW 47
6974: ST_TO_ADDR
// end ;
6975: GO 6745
6977: POP
6978: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6979: LD_ADDR_VAR 0 10
6983: PUSH
6984: LD_INT 22
6986: PUSH
6987: LD_VAR 0 8
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: PUSH
6996: LD_INT 30
6998: PUSH
6999: LD_INT 1
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PPUSH
7010: CALL_OW 69
7014: ST_TO_ADDR
// if not depot then
7015: LD_VAR 0 10
7019: NOT
7020: IFFALSE 7024
// exit ;
7022: GO 7270
// base := PrepareBase ( depot [ 1 ] , legBase , 0 , [ 7 , 8 , 10 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 14 , 6 , 6 , 5 ] ) ;
7024: LD_ADDR_VAR 0 11
7028: PUSH
7029: LD_VAR 0 10
7033: PUSH
7034: LD_INT 1
7036: ARRAY
7037: PPUSH
7038: LD_INT 6
7040: PPUSH
7041: LD_INT 0
7043: PPUSH
7044: LD_INT 7
7046: PUSH
7047: LD_INT 8
7049: PUSH
7050: LD_INT 10
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: LIST
7057: PUSH
7058: LD_OWVAR 67
7062: ARRAY
7063: PPUSH
7064: LD_INT 3000
7066: PUSH
7067: LD_INT 300
7069: PUSH
7070: LD_INT 100
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: LIST
7077: PPUSH
7078: LD_INT 14
7080: PUSH
7081: LD_INT 6
7083: PUSH
7084: LD_INT 6
7086: PUSH
7087: LD_INT 5
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: PPUSH
7096: CALL 28021 0 6
7100: ST_TO_ADDR
// if not base then
7101: LD_VAR 0 11
7105: NOT
7106: IFFALSE 7110
// exit ;
7108: GO 7270
// if Difficulty > 1 then
7110: LD_OWVAR 67
7114: PUSH
7115: LD_INT 1
7117: GREATER
7118: IFFALSE 7191
// begin InitHc ;
7120: CALL_OW 19
// PrepareHuman ( sex_male , class_sniper , [ 5 , 8 ] [ Difficulty - 1 ] ) ;
7124: LD_INT 1
7126: PPUSH
7127: LD_INT 5
7129: PPUSH
7130: LD_INT 5
7132: PUSH
7133: LD_INT 8
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: LD_OWVAR 67
7144: PUSH
7145: LD_INT 1
7147: MINUS
7148: ARRAY
7149: PPUSH
7150: CALL_OW 380
// for i = 1 to Difficulty do
7154: LD_ADDR_VAR 0 2
7158: PUSH
7159: DOUBLE
7160: LD_INT 1
7162: DEC
7163: ST_TO_ADDR
7164: LD_OWVAR 67
7168: PUSH
7169: FOR_TO
7170: IFFALSE 7189
// PlaceUnitArea ( CreateHuman , sniperGuardArea , false ) ;
7172: CALL_OW 44
7176: PPUSH
7177: LD_INT 24
7179: PPUSH
7180: LD_INT 0
7182: PPUSH
7183: CALL_OW 49
7187: GO 7169
7189: POP
7190: POP
// end ; mc_bases := Replace ( mc_bases , mc_leg , base ) ;
7191: LD_ADDR_EXP 50
7195: PUSH
7196: LD_EXP 50
7200: PPUSH
7201: LD_EXP 6
7205: PPUSH
7206: LD_VAR 0 11
7210: PPUSH
7211: CALL_OW 1
7215: ST_TO_ADDR
// hc_gallery := ru ;
7216: LD_ADDR_OWVAR 33
7220: PUSH
7221: LD_STRING ru
7223: ST_TO_ADDR
// hc_face_number := 44 ;
7224: LD_ADDR_OWVAR 34
7228: PUSH
7229: LD_INT 44
7231: ST_TO_ADDR
// hc_name := Robert Farmer ;
7232: LD_ADDR_OWVAR 26
7236: PUSH
7237: LD_STRING Robert Farmer
7239: ST_TO_ADDR
// hc_sex := sex_male ;
7240: LD_ADDR_OWVAR 27
7244: PUSH
7245: LD_INT 1
7247: ST_TO_ADDR
// hc_class := 1 ;
7248: LD_ADDR_OWVAR 28
7252: PUSH
7253: LD_INT 1
7255: ST_TO_ADDR
// Farmer := CreateHuman ;
7256: LD_ADDR_EXP 13
7260: PUSH
7261: CALL_OW 44
7265: ST_TO_ADDR
// InitHc ;
7266: CALL_OW 19
// end ;
7270: LD_VAR 0 1
7274: RET
// export function SetAdditionalRussianForces ; var i , tmp , veh ; begin
7275: LD_INT 0
7277: PPUSH
7278: PPUSH
7279: PPUSH
7280: PPUSH
// tmp := [ ] ;
7281: LD_ADDR_VAR 0 3
7285: PUSH
7286: EMPTY
7287: ST_TO_ADDR
// for i := 1 to 3 do
7288: LD_ADDR_VAR 0 2
7292: PUSH
7293: DOUBLE
7294: LD_INT 1
7296: DEC
7297: ST_TO_ADDR
7298: LD_INT 3
7300: PUSH
7301: FOR_TO
7302: IFFALSE 7414
// begin uc_side := 3 ;
7304: LD_ADDR_OWVAR 20
7308: PUSH
7309: LD_INT 3
7311: ST_TO_ADDR
// uc_nation := 3 ;
7312: LD_ADDR_OWVAR 21
7316: PUSH
7317: LD_INT 3
7319: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
7320: LD_ADDR_OWVAR 37
7324: PUSH
7325: LD_INT 22
7327: ST_TO_ADDR
// vc_engine := engine_siberite ;
7328: LD_ADDR_OWVAR 39
7332: PUSH
7333: LD_INT 3
7335: ST_TO_ADDR
// vc_control := control_computer ;
7336: LD_ADDR_OWVAR 38
7340: PUSH
7341: LD_INT 3
7343: ST_TO_ADDR
// vc_weapon := ru_crane ;
7344: LD_ADDR_OWVAR 40
7348: PUSH
7349: LD_INT 52
7351: ST_TO_ADDR
// veh := CreateVehicle ;
7352: LD_ADDR_VAR 0 4
7356: PUSH
7357: CALL_OW 45
7361: ST_TO_ADDR
// PlaceUnitXYR ( veh , 73 , 122 , 3 , false ) ;
7362: LD_VAR 0 4
7366: PPUSH
7367: LD_INT 73
7369: PPUSH
7370: LD_INT 122
7372: PPUSH
7373: LD_INT 3
7375: PPUSH
7376: LD_INT 0
7378: PPUSH
7379: CALL_OW 50
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
7383: LD_ADDR_VAR 0 3
7387: PUSH
7388: LD_VAR 0 3
7392: PPUSH
7393: LD_VAR 0 3
7397: PUSH
7398: LD_INT 1
7400: PLUS
7401: PPUSH
7402: LD_VAR 0 4
7406: PPUSH
7407: CALL_OW 1
7411: ST_TO_ADDR
// end ;
7412: GO 7301
7414: POP
7415: POP
// mc_vehicles := Replace ( mc_vehicles , mc_rus_1 , tmp ) ;
7416: LD_ADDR_EXP 69
7420: PUSH
7421: LD_EXP 69
7425: PPUSH
7426: LD_EXP 7
7430: PPUSH
7431: LD_VAR 0 3
7435: PPUSH
7436: CALL_OW 1
7440: ST_TO_ADDR
// tmp := [ ] ;
7441: LD_ADDR_VAR 0 3
7445: PUSH
7446: EMPTY
7447: ST_TO_ADDR
// for i := 1 to 3 do
7448: LD_ADDR_VAR 0 2
7452: PUSH
7453: DOUBLE
7454: LD_INT 1
7456: DEC
7457: ST_TO_ADDR
7458: LD_INT 3
7460: PUSH
7461: FOR_TO
7462: IFFALSE 7574
// begin uc_side := 3 ;
7464: LD_ADDR_OWVAR 20
7468: PUSH
7469: LD_INT 3
7471: ST_TO_ADDR
// uc_nation := 3 ;
7472: LD_ADDR_OWVAR 21
7476: PUSH
7477: LD_INT 3
7479: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
7480: LD_ADDR_OWVAR 37
7484: PUSH
7485: LD_INT 22
7487: ST_TO_ADDR
// vc_engine := engine_siberite ;
7488: LD_ADDR_OWVAR 39
7492: PUSH
7493: LD_INT 3
7495: ST_TO_ADDR
// vc_control := control_computer ;
7496: LD_ADDR_OWVAR 38
7500: PUSH
7501: LD_INT 3
7503: ST_TO_ADDR
// vc_weapon := ru_crane ;
7504: LD_ADDR_OWVAR 40
7508: PUSH
7509: LD_INT 52
7511: ST_TO_ADDR
// veh := CreateVehicle ;
7512: LD_ADDR_VAR 0 4
7516: PUSH
7517: CALL_OW 45
7521: ST_TO_ADDR
// PlaceUnitXYR ( veh , 22 , 28 , 3 , false ) ;
7522: LD_VAR 0 4
7526: PPUSH
7527: LD_INT 22
7529: PPUSH
7530: LD_INT 28
7532: PPUSH
7533: LD_INT 3
7535: PPUSH
7536: LD_INT 0
7538: PPUSH
7539: CALL_OW 50
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
7543: LD_ADDR_VAR 0 3
7547: PUSH
7548: LD_VAR 0 3
7552: PPUSH
7553: LD_VAR 0 3
7557: PUSH
7558: LD_INT 1
7560: PLUS
7561: PPUSH
7562: LD_VAR 0 4
7566: PPUSH
7567: CALL_OW 1
7571: ST_TO_ADDR
// end ;
7572: GO 7461
7574: POP
7575: POP
// mc_vehicles := Replace ( mc_vehicles , mc_rus_2 , tmp ) ;
7576: LD_ADDR_EXP 69
7580: PUSH
7581: LD_EXP 69
7585: PPUSH
7586: LD_EXP 8
7590: PPUSH
7591: LD_VAR 0 3
7595: PPUSH
7596: CALL_OW 1
7600: ST_TO_ADDR
// end ;
7601: LD_VAR 0 1
7605: RET
// export function PrepareAmericans ; var i , b , tmp , side , sr , base , depot ; begin
7606: LD_INT 0
7608: PPUSH
7609: PPUSH
7610: PPUSH
7611: PPUSH
7612: PPUSH
7613: PPUSH
7614: PPUSH
7615: PPUSH
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , amerApe , 0 ) ;
7616: LD_INT 0
7618: PPUSH
7619: LD_INT 0
7621: PPUSH
7622: LD_INT 4
7624: PPUSH
7625: LD_INT 0
7627: PPUSH
7628: LD_INT 0
7630: PPUSH
7631: LD_INT 0
7633: PPUSH
7634: LD_INT 0
7636: PPUSH
7637: LD_INT 10
7639: PPUSH
7640: LD_INT 0
7642: PPUSH
7643: CALL 53074 0 9
// side := 4 ;
7647: LD_ADDR_VAR 0 5
7651: PUSH
7652: LD_INT 4
7654: ST_TO_ADDR
// tmp := [ [ 1 , 144 , 18 , 4 , 0 , 0 ] , [ 3 , 137 , 8 , 4 , 0 , 0 ] , [ 22 , 141 , 8 , 4 , 0 , 0 ] , [ 25 , 137 , 5 , 3 , 0 , 0 ] , [ 18 , 137 , 12 , 0 , 0 , 0 ] , [ 17 , 133 , 4 , 2 , 0 , 0 ] , [ 16 , 140 , 11 , 5 , 0 , 0 ] , [ 8 , 149 , 26 , 4 , 10 , 15 ] , [ 8 , 142 , 26 , 1 , 11 , 12 ] , [ 27 , 153 , 32 , 5 , 0 , 0 ] , [ 27 , 145 , 32 , 3 , 0 , 0 ] , [ 27 , 138 , 2 , 4 , 0 , 0 ] , [ 27 , 144 , 13 , 0 , 0 , 0 ] , [ 26 , 124 , 2 , 4 , 0 , 0 ] , [ 26 , 121 , 2 , 2 , 0 , 0 ] , [ 26 , 118 , 2 , 1 , 0 , 0 ] , [ 29 , 159 , 47 , 2 , 0 , 0 ] , [ 32 , 146 , 41 , 0 , 0 , 0 ] , [ 33 , 136 , 37 , 0 , 0 , 0 ] , [ 33 , 132 , 34 , 0 , 0 , 0 ] , [ 36 , 124 , 7 , 1 , 0 , 0 ] , [ 5 , 124 , 19 , 0 , 0 , 0 ] , [ 32 , 127 , 23 , 0 , 0 , 0 ] ] ;
7655: LD_ADDR_VAR 0 4
7659: PUSH
7660: LD_INT 1
7662: PUSH
7663: LD_INT 144
7665: PUSH
7666: LD_INT 18
7668: PUSH
7669: LD_INT 4
7671: PUSH
7672: LD_INT 0
7674: PUSH
7675: LD_INT 0
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: PUSH
7686: LD_INT 3
7688: PUSH
7689: LD_INT 137
7691: PUSH
7692: LD_INT 8
7694: PUSH
7695: LD_INT 4
7697: PUSH
7698: LD_INT 0
7700: PUSH
7701: LD_INT 0
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: PUSH
7712: LD_INT 22
7714: PUSH
7715: LD_INT 141
7717: PUSH
7718: LD_INT 8
7720: PUSH
7721: LD_INT 4
7723: PUSH
7724: LD_INT 0
7726: PUSH
7727: LD_INT 0
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: PUSH
7738: LD_INT 25
7740: PUSH
7741: LD_INT 137
7743: PUSH
7744: LD_INT 5
7746: PUSH
7747: LD_INT 3
7749: PUSH
7750: LD_INT 0
7752: PUSH
7753: LD_INT 0
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: PUSH
7764: LD_INT 18
7766: PUSH
7767: LD_INT 137
7769: PUSH
7770: LD_INT 12
7772: PUSH
7773: LD_INT 0
7775: PUSH
7776: LD_INT 0
7778: PUSH
7779: LD_INT 0
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: PUSH
7790: LD_INT 17
7792: PUSH
7793: LD_INT 133
7795: PUSH
7796: LD_INT 4
7798: PUSH
7799: LD_INT 2
7801: PUSH
7802: LD_INT 0
7804: PUSH
7805: LD_INT 0
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: PUSH
7816: LD_INT 16
7818: PUSH
7819: LD_INT 140
7821: PUSH
7822: LD_INT 11
7824: PUSH
7825: LD_INT 5
7827: PUSH
7828: LD_INT 0
7830: PUSH
7831: LD_INT 0
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: PUSH
7842: LD_INT 8
7844: PUSH
7845: LD_INT 149
7847: PUSH
7848: LD_INT 26
7850: PUSH
7851: LD_INT 4
7853: PUSH
7854: LD_INT 10
7856: PUSH
7857: LD_INT 15
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: PUSH
7868: LD_INT 8
7870: PUSH
7871: LD_INT 142
7873: PUSH
7874: LD_INT 26
7876: PUSH
7877: LD_INT 1
7879: PUSH
7880: LD_INT 11
7882: PUSH
7883: LD_INT 12
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: PUSH
7894: LD_INT 27
7896: PUSH
7897: LD_INT 153
7899: PUSH
7900: LD_INT 32
7902: PUSH
7903: LD_INT 5
7905: PUSH
7906: LD_INT 0
7908: PUSH
7909: LD_INT 0
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: PUSH
7920: LD_INT 27
7922: PUSH
7923: LD_INT 145
7925: PUSH
7926: LD_INT 32
7928: PUSH
7929: LD_INT 3
7931: PUSH
7932: LD_INT 0
7934: PUSH
7935: LD_INT 0
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: PUSH
7946: LD_INT 27
7948: PUSH
7949: LD_INT 138
7951: PUSH
7952: LD_INT 2
7954: PUSH
7955: LD_INT 4
7957: PUSH
7958: LD_INT 0
7960: PUSH
7961: LD_INT 0
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: PUSH
7972: LD_INT 27
7974: PUSH
7975: LD_INT 144
7977: PUSH
7978: LD_INT 13
7980: PUSH
7981: LD_INT 0
7983: PUSH
7984: LD_INT 0
7986: PUSH
7987: LD_INT 0
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: PUSH
7998: LD_INT 26
8000: PUSH
8001: LD_INT 124
8003: PUSH
8004: LD_INT 2
8006: PUSH
8007: LD_INT 4
8009: PUSH
8010: LD_INT 0
8012: PUSH
8013: LD_INT 0
8015: PUSH
8016: EMPTY
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: PUSH
8024: LD_INT 26
8026: PUSH
8027: LD_INT 121
8029: PUSH
8030: LD_INT 2
8032: PUSH
8033: LD_INT 2
8035: PUSH
8036: LD_INT 0
8038: PUSH
8039: LD_INT 0
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: PUSH
8050: LD_INT 26
8052: PUSH
8053: LD_INT 118
8055: PUSH
8056: LD_INT 2
8058: PUSH
8059: LD_INT 1
8061: PUSH
8062: LD_INT 0
8064: PUSH
8065: LD_INT 0
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: PUSH
8076: LD_INT 29
8078: PUSH
8079: LD_INT 159
8081: PUSH
8082: LD_INT 47
8084: PUSH
8085: LD_INT 2
8087: PUSH
8088: LD_INT 0
8090: PUSH
8091: LD_INT 0
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: PUSH
8102: LD_INT 32
8104: PUSH
8105: LD_INT 146
8107: PUSH
8108: LD_INT 41
8110: PUSH
8111: LD_INT 0
8113: PUSH
8114: LD_INT 0
8116: PUSH
8117: LD_INT 0
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: PUSH
8128: LD_INT 33
8130: PUSH
8131: LD_INT 136
8133: PUSH
8134: LD_INT 37
8136: PUSH
8137: LD_INT 0
8139: PUSH
8140: LD_INT 0
8142: PUSH
8143: LD_INT 0
8145: PUSH
8146: EMPTY
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: PUSH
8154: LD_INT 33
8156: PUSH
8157: LD_INT 132
8159: PUSH
8160: LD_INT 34
8162: PUSH
8163: LD_INT 0
8165: PUSH
8166: LD_INT 0
8168: PUSH
8169: LD_INT 0
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: PUSH
8180: LD_INT 36
8182: PUSH
8183: LD_INT 124
8185: PUSH
8186: LD_INT 7
8188: PUSH
8189: LD_INT 1
8191: PUSH
8192: LD_INT 0
8194: PUSH
8195: LD_INT 0
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: PUSH
8206: LD_INT 5
8208: PUSH
8209: LD_INT 124
8211: PUSH
8212: LD_INT 19
8214: PUSH
8215: LD_INT 0
8217: PUSH
8218: LD_INT 0
8220: PUSH
8221: LD_INT 0
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: PUSH
8232: LD_INT 32
8234: PUSH
8235: LD_INT 127
8237: PUSH
8238: LD_INT 23
8240: PUSH
8241: LD_INT 0
8243: PUSH
8244: LD_INT 0
8246: PUSH
8247: LD_INT 0
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: ST_TO_ADDR
// for i in tmp do
8283: LD_ADDR_VAR 0 2
8287: PUSH
8288: LD_VAR 0 4
8292: PUSH
8293: FOR_IN
8294: IFFALSE 8525
// begin uc_side := side ;
8296: LD_ADDR_OWVAR 20
8300: PUSH
8301: LD_VAR 0 5
8305: ST_TO_ADDR
// uc_nation := nation_american ;
8306: LD_ADDR_OWVAR 21
8310: PUSH
8311: LD_INT 1
8313: ST_TO_ADDR
// bc_type := i [ 1 ] ;
8314: LD_ADDR_OWVAR 42
8318: PUSH
8319: LD_VAR 0 2
8323: PUSH
8324: LD_INT 1
8326: ARRAY
8327: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
8328: LD_ADDR_OWVAR 43
8332: PUSH
8333: LD_INT 5
8335: PPUSH
8336: LD_INT 6
8338: PPUSH
8339: CALL_OW 12
8343: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
8344: LD_ADDR_OWVAR 44
8348: PUSH
8349: LD_VAR 0 2
8353: PUSH
8354: LD_INT 5
8356: ARRAY
8357: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
8358: LD_ADDR_OWVAR 45
8362: PUSH
8363: LD_VAR 0 2
8367: PUSH
8368: LD_INT 6
8370: ARRAY
8371: ST_TO_ADDR
// sr := 0 ;
8372: LD_ADDR_VAR 0 6
8376: PUSH
8377: LD_INT 0
8379: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
8380: LD_VAR 0 2
8384: PUSH
8385: LD_INT 1
8387: ARRAY
8388: PUSH
8389: LD_INT 29
8391: EQUAL
8392: IFFALSE 8404
// sr := mat_oil else
8394: LD_ADDR_VAR 0 6
8398: PUSH
8399: LD_INT 2
8401: ST_TO_ADDR
8402: GO 8426
// if i [ 1 ] = b_siberite_mine then
8404: LD_VAR 0 2
8408: PUSH
8409: LD_INT 1
8411: ARRAY
8412: PUSH
8413: LD_INT 30
8415: EQUAL
8416: IFFALSE 8426
// sr := mat_siberit ;
8418: LD_ADDR_VAR 0 6
8422: PUSH
8423: LD_INT 3
8425: ST_TO_ADDR
// if sr then
8426: LD_VAR 0 6
8430: IFFALSE 8486
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
8432: LD_VAR 0 2
8436: PUSH
8437: LD_INT 2
8439: ARRAY
8440: PPUSH
8441: LD_VAR 0 2
8445: PUSH
8446: LD_INT 3
8448: ARRAY
8449: PPUSH
8450: LD_VAR 0 6
8454: PPUSH
8455: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
8459: LD_VAR 0 2
8463: PUSH
8464: LD_INT 2
8466: ARRAY
8467: PPUSH
8468: LD_VAR 0 2
8472: PUSH
8473: LD_INT 3
8475: ARRAY
8476: PPUSH
8477: LD_VAR 0 5
8481: PPUSH
8482: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
8486: LD_ADDR_VAR 0 3
8490: PUSH
8491: LD_VAR 0 2
8495: PUSH
8496: LD_INT 2
8498: ARRAY
8499: PPUSH
8500: LD_VAR 0 2
8504: PUSH
8505: LD_INT 3
8507: ARRAY
8508: PPUSH
8509: LD_VAR 0 2
8513: PUSH
8514: LD_INT 4
8516: ARRAY
8517: PPUSH
8518: CALL_OW 47
8522: ST_TO_ADDR
// end ;
8523: GO 8293
8525: POP
8526: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
8527: LD_ADDR_VAR 0 8
8531: PUSH
8532: LD_INT 22
8534: PUSH
8535: LD_VAR 0 5
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: PUSH
8544: LD_INT 30
8546: PUSH
8547: LD_INT 1
8549: PUSH
8550: EMPTY
8551: LIST
8552: LIST
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: PPUSH
8558: CALL_OW 69
8562: ST_TO_ADDR
// if not depot then
8563: LD_VAR 0 8
8567: NOT
8568: IFFALSE 8572
// exit ;
8570: GO 8844
// base := PrepareBase ( depot [ 1 ] , amerBase , theta3 , [ 8 , 7 , 6 ] [ Difficulty ] , [ [ 2500 , 2000 , 1750 ] [ Difficulty ] , [ 300 , 250 , 200 ] [ Difficulty ] , [ 80 , 60 , 50 ] [ Difficulty ] ] , [ 7 , 6 , 5 , 5 ] ) ;
8572: LD_ADDR_VAR 0 7
8576: PUSH
8577: LD_VAR 0 8
8581: PUSH
8582: LD_INT 1
8584: ARRAY
8585: PPUSH
8586: LD_INT 3
8588: PPUSH
8589: LD_STRING theta3
8591: PPUSH
8592: LD_INT 8
8594: PUSH
8595: LD_INT 7
8597: PUSH
8598: LD_INT 6
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: LIST
8605: PUSH
8606: LD_OWVAR 67
8610: ARRAY
8611: PPUSH
8612: LD_INT 2500
8614: PUSH
8615: LD_INT 2000
8617: PUSH
8618: LD_INT 1750
8620: PUSH
8621: EMPTY
8622: LIST
8623: LIST
8624: LIST
8625: PUSH
8626: LD_OWVAR 67
8630: ARRAY
8631: PUSH
8632: LD_INT 300
8634: PUSH
8635: LD_INT 250
8637: PUSH
8638: LD_INT 200
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: LIST
8645: PUSH
8646: LD_OWVAR 67
8650: ARRAY
8651: PUSH
8652: LD_INT 80
8654: PUSH
8655: LD_INT 60
8657: PUSH
8658: LD_INT 50
8660: PUSH
8661: EMPTY
8662: LIST
8663: LIST
8664: LIST
8665: PUSH
8666: LD_OWVAR 67
8670: ARRAY
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: LIST
8676: PPUSH
8677: LD_INT 7
8679: PUSH
8680: LD_INT 6
8682: PUSH
8683: LD_INT 5
8685: PUSH
8686: LD_INT 5
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: PPUSH
8695: CALL 28021 0 6
8699: ST_TO_ADDR
// if not base then
8700: LD_VAR 0 7
8704: NOT
8705: IFFALSE 8709
// exit ;
8707: GO 8844
// mc_bases := Replace ( mc_bases , mc_amer , base ) ;
8709: LD_ADDR_EXP 50
8713: PUSH
8714: LD_EXP 50
8718: PPUSH
8719: LD_EXP 5
8723: PPUSH
8724: LD_VAR 0 7
8728: PPUSH
8729: CALL_OW 1
8733: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
8734: LD_INT 1
8736: PPUSH
8737: LD_INT 1
8739: PPUSH
8740: LD_INT 7
8742: PPUSH
8743: CALL_OW 380
// allyCommander := CreateHuman ;
8747: LD_ADDR_EXP 11
8751: PUSH
8752: CALL_OW 44
8756: ST_TO_ADDR
// PlaceUnitXY ( allyCommander , 139 , 15 , false ) ;
8757: LD_EXP 11
8761: PPUSH
8762: LD_INT 139
8764: PPUSH
8765: LD_INT 15
8767: PPUSH
8768: LD_INT 0
8770: PPUSH
8771: CALL_OW 48
// ComTurnXY ( allyCommander , 137 , 15 ) ;
8775: LD_EXP 11
8779: PPUSH
8780: LD_INT 137
8782: PPUSH
8783: LD_INT 15
8785: PPUSH
8786: CALL_OW 118
// hc_gallery := us ;
8790: LD_ADDR_OWVAR 33
8794: PUSH
8795: LD_STRING us
8797: ST_TO_ADDR
// hc_face_number := 7 ;
8798: LD_ADDR_OWVAR 34
8802: PUSH
8803: LD_INT 7
8805: ST_TO_ADDR
// hc_name := Arthur Powell ;
8806: LD_ADDR_OWVAR 26
8810: PUSH
8811: LD_STRING Arthur Powell
8813: ST_TO_ADDR
// hc_sex := sex_male ;
8814: LD_ADDR_OWVAR 27
8818: PUSH
8819: LD_INT 1
8821: ST_TO_ADDR
// hc_class := 1 ;
8822: LD_ADDR_OWVAR 28
8826: PUSH
8827: LD_INT 1
8829: ST_TO_ADDR
// Powell := CreateHuman ;
8830: LD_ADDR_EXP 12
8834: PUSH
8835: CALL_OW 44
8839: ST_TO_ADDR
// InitHc ;
8840: CALL_OW 19
// end ;
8844: LD_VAR 0 1
8848: RET
// export function PreparePlayer ; var i , side , techs , tanks , cl , chassis , engines , weapons ; begin
8849: LD_INT 0
8851: PPUSH
8852: PPUSH
8853: PPUSH
8854: PPUSH
8855: PPUSH
8856: PPUSH
8857: PPUSH
8858: PPUSH
8859: PPUSH
// side := 1 ;
8860: LD_ADDR_VAR 0 3
8864: PUSH
8865: LD_INT 1
8867: ST_TO_ADDR
// result := [ [ ] , [ ] ] ;
8868: LD_ADDR_VAR 0 1
8872: PUSH
8873: EMPTY
8874: PUSH
8875: EMPTY
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: ST_TO_ADDR
// uc_side := side ;
8881: LD_ADDR_OWVAR 20
8885: PUSH
8886: LD_VAR 0 3
8890: ST_TO_ADDR
// uc_nation := nation_american ;
8891: LD_ADDR_OWVAR 21
8895: PUSH
8896: LD_INT 1
8898: ST_TO_ADDR
// InitHc ;
8899: CALL_OW 19
// InitVc ;
8903: CALL_OW 20
// hc_importance := 0 ;
8907: LD_ADDR_OWVAR 32
8911: PUSH
8912: LD_INT 0
8914: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked ] ;
8915: LD_ADDR_VAR 0 7
8919: PUSH
8920: LD_INT 2
8922: PUSH
8923: LD_INT 3
8925: PUSH
8926: LD_INT 3
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: LIST
8933: ST_TO_ADDR
// if commander = 2 then
8934: LD_EXP 25
8938: PUSH
8939: LD_INT 2
8941: EQUAL
8942: IFFALSE 8963
// chassis := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] ;
8944: LD_ADDR_VAR 0 7
8948: PUSH
8949: LD_INT 3
8951: PUSH
8952: LD_INT 4
8954: PUSH
8955: LD_INT 4
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: LIST
8962: ST_TO_ADDR
// if commander = 3 then
8963: LD_EXP 25
8967: PUSH
8968: LD_INT 3
8970: EQUAL
8971: IFFALSE 8992
// chassis := [ us_medium_wheeled , us_morphling , us_morphling ] ;
8973: LD_ADDR_VAR 0 7
8977: PUSH
8978: LD_INT 2
8980: PUSH
8981: LD_INT 5
8983: PUSH
8984: LD_INT 5
8986: PUSH
8987: EMPTY
8988: LIST
8989: LIST
8990: LIST
8991: ST_TO_ADDR
// engines := [ engine_solar , engine_solar , engine_combustion ] ;
8992: LD_ADDR_VAR 0 8
8996: PUSH
8997: LD_INT 2
8999: PUSH
9000: LD_INT 2
9002: PUSH
9003: LD_INT 1
9005: PUSH
9006: EMPTY
9007: LIST
9008: LIST
9009: LIST
9010: ST_TO_ADDR
// if commander = 2 then
9011: LD_EXP 25
9015: PUSH
9016: LD_INT 2
9018: EQUAL
9019: IFFALSE 9040
// engines := [ engine_combustion , engine_combustion , engine_siberite ] ;
9021: LD_ADDR_VAR 0 8
9025: PUSH
9026: LD_INT 1
9028: PUSH
9029: LD_INT 1
9031: PUSH
9032: LD_INT 3
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: LIST
9039: ST_TO_ADDR
// if commander = 3 then
9040: LD_EXP 25
9044: PUSH
9045: LD_INT 3
9047: EQUAL
9048: IFFALSE 9069
// engines := [ engine_siberite , engine_siberite , engine_combustion ] ;
9050: LD_ADDR_VAR 0 8
9054: PUSH
9055: LD_INT 3
9057: PUSH
9058: LD_INT 3
9060: PUSH
9061: LD_INT 1
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: LIST
9068: ST_TO_ADDR
// weapons := [ us_double_gun , us_light_gun , us_gatling_gun ] ;
9069: LD_ADDR_VAR 0 9
9073: PUSH
9074: LD_INT 5
9076: PUSH
9077: LD_INT 3
9079: PUSH
9080: LD_INT 4
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: LIST
9087: ST_TO_ADDR
// if commander = 2 then
9088: LD_EXP 25
9092: PUSH
9093: LD_INT 2
9095: EQUAL
9096: IFFALSE 9117
// weapons := [ us_rocket_launcher , us_double_gun , us_heavy_gun ] ;
9098: LD_ADDR_VAR 0 9
9102: PUSH
9103: LD_INT 7
9105: PUSH
9106: LD_INT 5
9108: PUSH
9109: LD_INT 6
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: LIST
9116: ST_TO_ADDR
// if commander = 3 then
9117: LD_EXP 25
9121: PUSH
9122: LD_INT 3
9124: EQUAL
9125: IFFALSE 9146
// weapons := [ us_laser , us_double_laser , us_rocket_launcher ] ;
9127: LD_ADDR_VAR 0 9
9131: PUSH
9132: LD_INT 9
9134: PUSH
9135: LD_INT 10
9137: PUSH
9138: LD_INT 7
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: LIST
9145: ST_TO_ADDR
// tanks := [ 5 , 5 , 4 ] [ Difficulty ] ;
9146: LD_ADDR_VAR 0 5
9150: PUSH
9151: LD_INT 5
9153: PUSH
9154: LD_INT 5
9156: PUSH
9157: LD_INT 4
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: LIST
9164: PUSH
9165: LD_OWVAR 67
9169: ARRAY
9170: ST_TO_ADDR
// if commander = 2 then
9171: LD_EXP 25
9175: PUSH
9176: LD_INT 2
9178: EQUAL
9179: IFFALSE 9195
// tanks := tanks + 3 ;
9181: LD_ADDR_VAR 0 5
9185: PUSH
9186: LD_VAR 0 5
9190: PUSH
9191: LD_INT 3
9193: PLUS
9194: ST_TO_ADDR
// for i = 1 to tanks do
9195: LD_ADDR_VAR 0 2
9199: PUSH
9200: DOUBLE
9201: LD_INT 1
9203: DEC
9204: ST_TO_ADDR
9205: LD_VAR 0 5
9209: PUSH
9210: FOR_TO
9211: IFFALSE 9321
// begin PrepareVehicle ( chassis [ i mod 3 + 1 ] , engines [ rand ( 1 , 3 ) ] , control_manual , weapons [ i mod 3 + 1 ] , rand ( 60 , 70 ) ) ;
9213: LD_VAR 0 7
9217: PUSH
9218: LD_VAR 0 2
9222: PUSH
9223: LD_INT 3
9225: MOD
9226: PUSH
9227: LD_INT 1
9229: PLUS
9230: ARRAY
9231: PPUSH
9232: LD_VAR 0 8
9236: PUSH
9237: LD_INT 1
9239: PPUSH
9240: LD_INT 3
9242: PPUSH
9243: CALL_OW 12
9247: ARRAY
9248: PPUSH
9249: LD_INT 1
9251: PPUSH
9252: LD_VAR 0 9
9256: PUSH
9257: LD_VAR 0 2
9261: PUSH
9262: LD_INT 3
9264: MOD
9265: PUSH
9266: LD_INT 1
9268: PLUS
9269: ARRAY
9270: PPUSH
9271: LD_INT 60
9273: PPUSH
9274: LD_INT 70
9276: PPUSH
9277: CALL_OW 12
9281: PPUSH
9282: CALL 24575 0 5
// result := Replace ( result , 1 , result [ 1 ] ^ CreateVehicle ) ;
9286: LD_ADDR_VAR 0 1
9290: PUSH
9291: LD_VAR 0 1
9295: PPUSH
9296: LD_INT 1
9298: PPUSH
9299: LD_VAR 0 1
9303: PUSH
9304: LD_INT 1
9306: ARRAY
9307: PUSH
9308: CALL_OW 45
9312: ADD
9313: PPUSH
9314: CALL_OW 1
9318: ST_TO_ADDR
// end ;
9319: GO 9210
9321: POP
9322: POP
// cl := 1 ;
9323: LD_ADDR_VAR 0 6
9327: PUSH
9328: LD_INT 1
9330: ST_TO_ADDR
// for i = 1 to 10 do
9331: LD_ADDR_VAR 0 2
9335: PUSH
9336: DOUBLE
9337: LD_INT 1
9339: DEC
9340: ST_TO_ADDR
9341: LD_INT 10
9343: PUSH
9344: FOR_TO
9345: IFFALSE 9460
// begin if i mod 4 = 0 then
9347: LD_VAR 0 2
9351: PUSH
9352: LD_INT 4
9354: MOD
9355: PUSH
9356: LD_INT 0
9358: EQUAL
9359: IFFALSE 9375
// cl := cl + 1 ;
9361: LD_ADDR_VAR 0 6
9365: PUSH
9366: LD_VAR 0 6
9370: PUSH
9371: LD_INT 1
9373: PLUS
9374: ST_TO_ADDR
// if cl = 2 then
9375: LD_VAR 0 6
9379: PUSH
9380: LD_INT 2
9382: EQUAL
9383: IFFALSE 9393
// cl := 3 ;
9385: LD_ADDR_VAR 0 6
9389: PUSH
9390: LD_INT 3
9392: ST_TO_ADDR
// PrepareHuman ( false , cl , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
9393: LD_INT 0
9395: PPUSH
9396: LD_VAR 0 6
9400: PPUSH
9401: LD_INT 6
9403: PUSH
9404: LD_INT 6
9406: PUSH
9407: LD_INT 5
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: LIST
9414: PUSH
9415: LD_OWVAR 67
9419: ARRAY
9420: PPUSH
9421: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9425: LD_ADDR_VAR 0 1
9429: PUSH
9430: LD_VAR 0 1
9434: PPUSH
9435: LD_INT 2
9437: PPUSH
9438: LD_VAR 0 1
9442: PUSH
9443: LD_INT 2
9445: ARRAY
9446: PUSH
9447: CALL_OW 44
9451: ADD
9452: PPUSH
9453: CALL_OW 1
9457: ST_TO_ADDR
// end ;
9458: GO 9344
9460: POP
9461: POP
// if commander = 1 then
9462: LD_EXP 25
9466: PUSH
9467: LD_INT 1
9469: EQUAL
9470: IFFALSE 9538
// for i = 1 to 4 do
9472: LD_ADDR_VAR 0 2
9476: PUSH
9477: DOUBLE
9478: LD_INT 1
9480: DEC
9481: ST_TO_ADDR
9482: LD_INT 4
9484: PUSH
9485: FOR_TO
9486: IFFALSE 9536
// begin PrepareHuman ( false , class_soldier , 8 ) ;
9488: LD_INT 0
9490: PPUSH
9491: LD_INT 1
9493: PPUSH
9494: LD_INT 8
9496: PPUSH
9497: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9501: LD_ADDR_VAR 0 1
9505: PUSH
9506: LD_VAR 0 1
9510: PPUSH
9511: LD_INT 2
9513: PPUSH
9514: LD_VAR 0 1
9518: PUSH
9519: LD_INT 2
9521: ARRAY
9522: PUSH
9523: CALL_OW 44
9527: ADD
9528: PPUSH
9529: CALL_OW 1
9533: ST_TO_ADDR
// end ;
9534: GO 9485
9536: POP
9537: POP
// techs := [ ] ;
9538: LD_ADDR_VAR 0 4
9542: PUSH
9543: EMPTY
9544: ST_TO_ADDR
// if commander = 1 then
9545: LD_EXP 25
9549: PUSH
9550: LD_INT 1
9552: EQUAL
9553: IFFALSE 9578
// techs := [ tech_weap1 , tech_weap2 , tech_weap3 , tech_lasSight ] ;
9555: LD_ADDR_VAR 0 4
9559: PUSH
9560: LD_INT 51
9562: PUSH
9563: LD_INT 52
9565: PUSH
9566: LD_INT 53
9568: PUSH
9569: LD_INT 12
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: ST_TO_ADDR
// if commander = 2 then
9578: LD_EXP 25
9582: PUSH
9583: LD_INT 2
9585: EQUAL
9586: IFFALSE 9623
// techs := [ tech_tech1 , tech_oilEng , tech_oilPow , tech_solEng , tech_solPow , tech_opto1 , tech_radar ] ;
9588: LD_ADDR_VAR 0 4
9592: PUSH
9593: LD_INT 48
9595: PUSH
9596: LD_INT 47
9598: PUSH
9599: LD_INT 46
9601: PUSH
9602: LD_INT 45
9604: PUSH
9605: LD_INT 35
9607: PUSH
9608: LD_INT 60
9610: PUSH
9611: LD_INT 6
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: ST_TO_ADDR
// if commander = 3 then
9623: LD_EXP 25
9627: PUSH
9628: LD_INT 3
9630: EQUAL
9631: IFFALSE 9680
// techs := [ tech_advAI , tech_advchassis , tech_ai , tech_comp1 , tech_comp2 , tech_oilEng , tech_oilPow , tech_weap1 , tech_gatling , tech_gun ] ;
9633: LD_ADDR_VAR 0 4
9637: PUSH
9638: LD_INT 27
9640: PUSH
9641: LD_INT 36
9643: PUSH
9644: LD_INT 32
9646: PUSH
9647: LD_INT 57
9649: PUSH
9650: LD_INT 58
9652: PUSH
9653: LD_INT 47
9655: PUSH
9656: LD_INT 46
9658: PUSH
9659: LD_INT 51
9661: PUSH
9662: LD_INT 69
9664: PUSH
9665: LD_INT 39
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: ST_TO_ADDR
// if techs then
9680: LD_VAR 0 4
9684: IFFALSE 9718
// for i in techs do
9686: LD_ADDR_VAR 0 2
9690: PUSH
9691: LD_VAR 0 4
9695: PUSH
9696: FOR_IN
9697: IFFALSE 9716
// SetTech ( i , 1 , state_researched ) ;
9699: LD_VAR 0 2
9703: PPUSH
9704: LD_INT 1
9706: PPUSH
9707: LD_INT 2
9709: PPUSH
9710: CALL_OW 322
9714: GO 9696
9716: POP
9717: POP
// hc_gallery := skirmish ;
9718: LD_ADDR_OWVAR 33
9722: PUSH
9723: LD_STRING skirmish
9725: ST_TO_ADDR
// hc_face_number := commander ;
9726: LD_ADDR_OWVAR 34
9730: PUSH
9731: LD_EXP 25
9735: ST_TO_ADDR
// hc_importance := 100 ;
9736: LD_ADDR_OWVAR 32
9740: PUSH
9741: LD_INT 100
9743: ST_TO_ADDR
// case commander of 1 :
9744: LD_EXP 25
9748: PUSH
9749: LD_INT 1
9751: DOUBLE
9752: EQUAL
9753: IFTRUE 9757
9755: GO 9781
9757: POP
// begin hc_name := Jeff Ironside ;
9758: LD_ADDR_OWVAR 26
9762: PUSH
9763: LD_STRING Jeff Ironside
9765: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
9766: LD_INT 1
9768: PPUSH
9769: LD_INT 1
9771: PPUSH
9772: LD_INT 7
9774: PPUSH
9775: CALL_OW 380
// end ; 2 :
9779: GO 9846
9781: LD_INT 2
9783: DOUBLE
9784: EQUAL
9785: IFTRUE 9789
9787: GO 9813
9789: POP
// begin hc_name := Paul Johnson ;
9790: LD_ADDR_OWVAR 26
9794: PUSH
9795: LD_STRING Paul Johnson
9797: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 7 ) ;
9798: LD_INT 1
9800: PPUSH
9801: LD_INT 3
9803: PPUSH
9804: LD_INT 7
9806: PPUSH
9807: CALL_OW 380
// end ; 3 :
9811: GO 9846
9813: LD_INT 3
9815: DOUBLE
9816: EQUAL
9817: IFTRUE 9821
9819: GO 9845
9821: POP
// begin hc_name := Lisa Stuart ;
9822: LD_ADDR_OWVAR 26
9826: PUSH
9827: LD_STRING Lisa Stuart
9829: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 7 ) ;
9830: LD_INT 2
9832: PPUSH
9833: LD_INT 4
9835: PPUSH
9836: LD_INT 7
9838: PPUSH
9839: CALL_OW 380
// end ; end ;
9843: GO 9846
9845: POP
// playerCommander := CreateHuman ;
9846: LD_ADDR_EXP 9
9850: PUSH
9851: CALL_OW 44
9855: ST_TO_ADDR
// hc_importance := 0 ;
9856: LD_ADDR_OWVAR 32
9860: PUSH
9861: LD_INT 0
9863: ST_TO_ADDR
// hc_gallery :=  ;
9864: LD_ADDR_OWVAR 33
9868: PUSH
9869: LD_STRING 
9871: ST_TO_ADDR
// result := Replace ( result , 2 , result [ 2 ] ^ playerCommander ) ;
9872: LD_ADDR_VAR 0 1
9876: PUSH
9877: LD_VAR 0 1
9881: PPUSH
9882: LD_INT 2
9884: PPUSH
9885: LD_VAR 0 1
9889: PUSH
9890: LD_INT 2
9892: ARRAY
9893: PUSH
9894: LD_EXP 9
9898: ADD
9899: PPUSH
9900: CALL_OW 1
9904: ST_TO_ADDR
// end ;
9905: LD_VAR 0 1
9909: RET
// export function PrepareReinforcements ; var i , peopleAmount , tmp , un , veh ; begin
9910: LD_INT 0
9912: PPUSH
9913: PPUSH
9914: PPUSH
9915: PPUSH
9916: PPUSH
9917: PPUSH
// uc_side := 1 ;
9918: LD_ADDR_OWVAR 20
9922: PUSH
9923: LD_INT 1
9925: ST_TO_ADDR
// uc_nation := 1 ;
9926: LD_ADDR_OWVAR 21
9930: PUSH
9931: LD_INT 1
9933: ST_TO_ADDR
// InitHc ;
9934: CALL_OW 19
// peopleAmount := [ 3 , 3 , 2 ] [ Difficulty ] ;
9938: LD_ADDR_VAR 0 3
9942: PUSH
9943: LD_INT 3
9945: PUSH
9946: LD_INT 3
9948: PUSH
9949: LD_INT 2
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: LIST
9956: PUSH
9957: LD_OWVAR 67
9961: ARRAY
9962: ST_TO_ADDR
// for i = 1 to peopleAmount do
9963: LD_ADDR_VAR 0 2
9967: PUSH
9968: DOUBLE
9969: LD_INT 1
9971: DEC
9972: ST_TO_ADDR
9973: LD_VAR 0 3
9977: PUSH
9978: FOR_TO
9979: IFFALSE 10028
// begin PrepareHuman ( false , 2 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9981: LD_INT 0
9983: PPUSH
9984: LD_INT 2
9986: PPUSH
9987: LD_INT 7
9989: PUSH
9990: LD_INT 6
9992: PUSH
9993: LD_INT 5
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: LIST
10000: PUSH
10001: LD_OWVAR 67
10005: ARRAY
10006: PPUSH
10007: CALL_OW 380
// PlaceUnitInArea ( CreateHuman , startArea , false ) ;
10011: CALL_OW 44
10015: PPUSH
10016: LD_INT 19
10018: PPUSH
10019: LD_INT 0
10021: PPUSH
10022: CALL 55362 0 3
// end ;
10026: GO 9978
10028: POP
10029: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_crane , 58 ) ;
10030: LD_INT 2
10032: PPUSH
10033: LD_INT 1
10035: PPUSH
10036: LD_INT 3
10038: PPUSH
10039: LD_INT 13
10041: PPUSH
10042: LD_INT 58
10044: PPUSH
10045: CALL 24575 0 5
// PlaceUnitInArea ( CreateVehicle , startArea , false ) ;
10049: CALL_OW 45
10053: PPUSH
10054: LD_INT 19
10056: PPUSH
10057: LD_INT 0
10059: PPUSH
10060: CALL 55362 0 3
// if commander = 1 then
10064: LD_EXP 25
10068: PUSH
10069: LD_INT 1
10071: EQUAL
10072: IFFALSE 10083
// wait ( 6 6$00 ) else
10074: LD_INT 12600
10076: PPUSH
10077: CALL_OW 67
10081: GO 10090
// wait ( 8 8$00 ) ;
10083: LD_INT 16800
10085: PPUSH
10086: CALL_OW 67
// uc_side := 1 ;
10090: LD_ADDR_OWVAR 20
10094: PUSH
10095: LD_INT 1
10097: ST_TO_ADDR
// uc_nation := 1 ;
10098: LD_ADDR_OWVAR 21
10102: PUSH
10103: LD_INT 1
10105: ST_TO_ADDR
// InitVc ;
10106: CALL_OW 20
// InitHc ;
10110: CALL_OW 19
// for i = 1 to 5 do
10114: LD_ADDR_VAR 0 2
10118: PUSH
10119: DOUBLE
10120: LD_INT 1
10122: DEC
10123: ST_TO_ADDR
10124: LD_INT 5
10126: PUSH
10127: FOR_TO
10128: IFFALSE 10372
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_light_wheeled ] [ i mod 3 + 1 ] , engine_combustion , [ control_manual , control_computer , control_computer ] [ i mod 3 + 1 ] , [ us_heavy_gun , us_cargo_bay , us_radar ] [ i mod 3 + 1 ] , rand ( 40 , 55 ) ) ;
10130: LD_INT 4
10132: PUSH
10133: LD_INT 3
10135: PUSH
10136: LD_INT 1
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: LIST
10143: PUSH
10144: LD_VAR 0 2
10148: PUSH
10149: LD_INT 3
10151: MOD
10152: PUSH
10153: LD_INT 1
10155: PLUS
10156: ARRAY
10157: PPUSH
10158: LD_INT 1
10160: PPUSH
10161: LD_INT 1
10163: PUSH
10164: LD_INT 3
10166: PUSH
10167: LD_INT 3
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: LIST
10174: PUSH
10175: LD_VAR 0 2
10179: PUSH
10180: LD_INT 3
10182: MOD
10183: PUSH
10184: LD_INT 1
10186: PLUS
10187: ARRAY
10188: PPUSH
10189: LD_INT 6
10191: PUSH
10192: LD_INT 12
10194: PUSH
10195: LD_INT 11
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: LIST
10202: PUSH
10203: LD_VAR 0 2
10207: PUSH
10208: LD_INT 3
10210: MOD
10211: PUSH
10212: LD_INT 1
10214: PLUS
10215: ARRAY
10216: PPUSH
10217: LD_INT 40
10219: PPUSH
10220: LD_INT 55
10222: PPUSH
10223: CALL_OW 12
10227: PPUSH
10228: CALL 24575 0 5
// veh := CreateVehicle ;
10232: LD_ADDR_VAR 0 6
10236: PUSH
10237: CALL_OW 45
10241: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
10242: LD_VAR 0 6
10246: PPUSH
10247: LD_INT 19
10249: PPUSH
10250: LD_INT 0
10252: PPUSH
10253: CALL 55362 0 3
// if GetWeapon ( veh ) = us_cargo_bay then
10257: LD_VAR 0 6
10261: PPUSH
10262: CALL_OW 264
10266: PUSH
10267: LD_INT 12
10269: EQUAL
10270: IFFALSE 10302
// begin AddCargo ( veh , mat_cans , 70 ) ;
10272: LD_VAR 0 6
10276: PPUSH
10277: LD_INT 1
10279: PPUSH
10280: LD_INT 70
10282: PPUSH
10283: CALL_OW 291
// AddCargo ( veh , mat_siberit , 30 ) ;
10287: LD_VAR 0 6
10291: PPUSH
10292: LD_INT 3
10294: PPUSH
10295: LD_INT 30
10297: PPUSH
10298: CALL_OW 291
// end ; if GetControl ( veh ) = control_manual then
10302: LD_VAR 0 6
10306: PPUSH
10307: CALL_OW 263
10311: PUSH
10312: LD_INT 1
10314: EQUAL
10315: IFFALSE 10370
// begin PrepareHuman ( sex_male , 3 , 6 ) ;
10317: LD_INT 1
10319: PPUSH
10320: LD_INT 3
10322: PPUSH
10323: LD_INT 6
10325: PPUSH
10326: CALL_OW 380
// un := CreateHuman ;
10330: LD_ADDR_VAR 0 5
10334: PUSH
10335: CALL_OW 44
10339: ST_TO_ADDR
// tmp := tmp ^ un ;
10340: LD_ADDR_VAR 0 4
10344: PUSH
10345: LD_VAR 0 4
10349: PUSH
10350: LD_VAR 0 5
10354: ADD
10355: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10356: LD_VAR 0 5
10360: PPUSH
10361: LD_VAR 0 6
10365: PPUSH
10366: CALL_OW 52
// end ; end ;
10370: GO 10127
10372: POP
10373: POP
// if tmp then
10374: LD_VAR 0 4
10378: IFFALSE 10442
// begin CenterNowOnUnits ( tmp ) ;
10380: LD_VAR 0 4
10384: PPUSH
10385: CALL_OW 87
// Say ( tmp [ 1 ] , DAR-1 ) ;
10389: LD_VAR 0 4
10393: PUSH
10394: LD_INT 1
10396: ARRAY
10397: PPUSH
10398: LD_STRING DAR-1
10400: PPUSH
10401: CALL_OW 88
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-DAR ) ;
10405: LD_EXP 9
10409: PPUSH
10410: LD_STRING D
10412: PUSH
10413: LD_STRING I
10415: PUSH
10416: LD_STRING J
10418: PUSH
10419: LD_STRING S
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: LIST
10426: PUSH
10427: LD_EXP 25
10431: ARRAY
10432: STR
10433: PUSH
10434: LD_STRING -1-DAR
10436: STR
10437: PPUSH
10438: CALL_OW 88
// end ; if not reinforceAllowed then
10442: LD_EXP 24
10446: NOT
10447: IFFALSE 10451
// exit ;
10449: GO 10605
// wait ( 25 25$00 ) ;
10451: LD_INT 52500
10453: PPUSH
10454: CALL_OW 67
// uc_side := 1 ;
10458: LD_ADDR_OWVAR 20
10462: PUSH
10463: LD_INT 1
10465: ST_TO_ADDR
// uc_nation := 1 ;
10466: LD_ADDR_OWVAR 21
10470: PUSH
10471: LD_INT 1
10473: ST_TO_ADDR
// InitVc ;
10474: CALL_OW 20
// InitHc ;
10478: CALL_OW 19
// for i = 1 to 4 do
10482: LD_ADDR_VAR 0 2
10486: PUSH
10487: DOUBLE
10488: LD_INT 1
10490: DEC
10491: ST_TO_ADDR
10492: LD_INT 4
10494: PUSH
10495: FOR_TO
10496: IFFALSE 10603
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 1 ) ;
10498: LD_INT 5
10500: PPUSH
10501: LD_INT 3
10503: PPUSH
10504: LD_INT 1
10506: PPUSH
10507: LD_INT 6
10509: PPUSH
10510: LD_INT 1
10512: PPUSH
10513: CALL 24575 0 5
// veh := CreateVehicle ;
10517: LD_ADDR_VAR 0 6
10521: PUSH
10522: CALL_OW 45
10526: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
10527: LD_VAR 0 6
10531: PPUSH
10532: LD_INT 19
10534: PPUSH
10535: LD_INT 0
10537: PPUSH
10538: CALL 55362 0 3
// if GetControl ( veh ) = control_manual then
10542: LD_VAR 0 6
10546: PPUSH
10547: CALL_OW 263
10551: PUSH
10552: LD_INT 1
10554: EQUAL
10555: IFFALSE 10601
// begin PrepareHuman ( false , 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
10557: LD_INT 0
10559: PPUSH
10560: LD_INT 3
10562: PPUSH
10563: LD_INT 7
10565: PUSH
10566: LD_INT 6
10568: PUSH
10569: LD_INT 5
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: LIST
10576: PUSH
10577: LD_OWVAR 67
10581: ARRAY
10582: PPUSH
10583: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10587: CALL_OW 44
10591: PPUSH
10592: LD_VAR 0 6
10596: PPUSH
10597: CALL_OW 52
// end ; end ;
10601: GO 10495
10603: POP
10604: POP
// end ;
10605: LD_VAR 0 1
10609: RET
// export function PrepareLegionReinforcements ; var i , un , j , tmp ; begin
10610: LD_INT 0
10612: PPUSH
10613: PPUSH
10614: PPUSH
10615: PPUSH
10616: PPUSH
// uc_side := 8 ;
10617: LD_ADDR_OWVAR 20
10621: PUSH
10622: LD_INT 8
10624: ST_TO_ADDR
// uc_nation := nation_arabian ;
10625: LD_ADDR_OWVAR 21
10629: PUSH
10630: LD_INT 2
10632: ST_TO_ADDR
// for i = 1 to 2 do
10633: LD_ADDR_VAR 0 2
10637: PUSH
10638: DOUBLE
10639: LD_INT 1
10641: DEC
10642: ST_TO_ADDR
10643: LD_INT 2
10645: PUSH
10646: FOR_TO
10647: IFFALSE 10727
// for j = 1 to 4 do
10649: LD_ADDR_VAR 0 4
10653: PUSH
10654: DOUBLE
10655: LD_INT 1
10657: DEC
10658: ST_TO_ADDR
10659: LD_INT 4
10661: PUSH
10662: FOR_TO
10663: IFFALSE 10723
// begin PrepareHuman ( false , j , 8 ) ;
10665: LD_INT 0
10667: PPUSH
10668: LD_VAR 0 4
10672: PPUSH
10673: LD_INT 8
10675: PPUSH
10676: CALL_OW 380
// un := CreateHuman ;
10680: LD_ADDR_VAR 0 3
10684: PUSH
10685: CALL_OW 44
10689: ST_TO_ADDR
// PlaceUnitArea ( un , legionSpawn , false ) ;
10690: LD_VAR 0 3
10694: PPUSH
10695: LD_INT 23
10697: PPUSH
10698: LD_INT 0
10700: PPUSH
10701: CALL_OW 49
// tmp := tmp union un ;
10705: LD_ADDR_VAR 0 5
10709: PUSH
10710: LD_VAR 0 5
10714: PUSH
10715: LD_VAR 0 3
10719: UNION
10720: ST_TO_ADDR
// end ;
10721: GO 10662
10723: POP
10724: POP
10725: GO 10646
10727: POP
10728: POP
// for i in tmp do
10729: LD_ADDR_VAR 0 2
10733: PUSH
10734: LD_VAR 0 5
10738: PUSH
10739: FOR_IN
10740: IFFALSE 10759
// ComMoveXY ( i , 150 , 136 ) ;
10742: LD_VAR 0 2
10746: PPUSH
10747: LD_INT 150
10749: PPUSH
10750: LD_INT 136
10752: PPUSH
10753: CALL_OW 111
10757: GO 10739
10759: POP
10760: POP
// mc_bases := Replace ( mc_bases , mc_leg , mc_bases [ mc_leg ] union tmp ) ;
10761: LD_ADDR_EXP 50
10765: PUSH
10766: LD_EXP 50
10770: PPUSH
10771: LD_EXP 6
10775: PPUSH
10776: LD_EXP 50
10780: PUSH
10781: LD_EXP 6
10785: ARRAY
10786: PUSH
10787: LD_VAR 0 5
10791: UNION
10792: PPUSH
10793: CALL_OW 1
10797: ST_TO_ADDR
// end ;
10798: LD_VAR 0 1
10802: RET
// every 0 0$10 trigger Difficulty > 1 and GetTech ( tech_lapser , 3 ) = state_researched do
10803: LD_OWVAR 67
10807: PUSH
10808: LD_INT 1
10810: GREATER
10811: PUSH
10812: LD_INT 31
10814: PPUSH
10815: LD_INT 3
10817: PPUSH
10818: CALL_OW 321
10822: PUSH
10823: LD_INT 2
10825: EQUAL
10826: AND
10827: IFFALSE 11044
10829: GO 10831
10831: DISABLE
// begin MC_InsertBuildingList ( mc_rus_1 , [ [ b_turret , 101 , 159 , 5 ] , [ b_turret , 105 , 158 , 5 ] , [ b_turret , 96 , 136 , 5 ] , [ b_turret , 94 , 133 , 4 ] , [ b_turret , 84 , 102 , 4 ] ] ) ;
10832: LD_EXP 7
10836: PPUSH
10837: LD_INT 33
10839: PUSH
10840: LD_INT 101
10842: PUSH
10843: LD_INT 159
10845: PUSH
10846: LD_INT 5
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: PUSH
10855: LD_INT 33
10857: PUSH
10858: LD_INT 105
10860: PUSH
10861: LD_INT 158
10863: PUSH
10864: LD_INT 5
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: PUSH
10873: LD_INT 33
10875: PUSH
10876: LD_INT 96
10878: PUSH
10879: LD_INT 136
10881: PUSH
10882: LD_INT 5
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: PUSH
10891: LD_INT 33
10893: PUSH
10894: LD_INT 94
10896: PUSH
10897: LD_INT 133
10899: PUSH
10900: LD_INT 4
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: PUSH
10909: LD_INT 33
10911: PUSH
10912: LD_INT 84
10914: PUSH
10915: LD_INT 102
10917: PUSH
10918: LD_INT 4
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: PPUSH
10934: CALL 82718 0 2
// MC_InsertBuildingList ( mc_rus_2 , [ [ b_turret , 50 , 17 , 4 ] , [ b_turret , 52 , 20 , 4 ] , [ b_turret , 53 , 23 , 4 ] , [ b_turret , 45 , 32 , 4 ] , [ b_turret , 45 , 39 , 4 ] ] ) ;
10938: LD_EXP 8
10942: PPUSH
10943: LD_INT 33
10945: PUSH
10946: LD_INT 50
10948: PUSH
10949: LD_INT 17
10951: PUSH
10952: LD_INT 4
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: PUSH
10961: LD_INT 33
10963: PUSH
10964: LD_INT 52
10966: PUSH
10967: LD_INT 20
10969: PUSH
10970: LD_INT 4
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: PUSH
10979: LD_INT 33
10981: PUSH
10982: LD_INT 53
10984: PUSH
10985: LD_INT 23
10987: PUSH
10988: LD_INT 4
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: PUSH
10997: LD_INT 33
10999: PUSH
11000: LD_INT 45
11002: PUSH
11003: LD_INT 32
11005: PUSH
11006: LD_INT 4
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: PUSH
11015: LD_INT 33
11017: PUSH
11018: LD_INT 45
11020: PUSH
11021: LD_INT 39
11023: PUSH
11024: LD_INT 4
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: PPUSH
11040: CALL 82718 0 2
// end ; end_of_file
11044: END
// export function Action ; var i , tmp ; begin
11045: LD_INT 0
11047: PPUSH
11048: PPUSH
11049: PPUSH
// InGameOn ;
11050: CALL_OW 8
// CenterNowOnXY ( 225 , 217 ) ;
11054: LD_INT 225
11056: PPUSH
11057: LD_INT 217
11059: PPUSH
11060: CALL_OW 86
// for i in playerForces [ 2 ] do
11064: LD_ADDR_VAR 0 2
11068: PUSH
11069: LD_EXP 10
11073: PUSH
11074: LD_INT 2
11076: ARRAY
11077: PUSH
11078: FOR_IN
11079: IFFALSE 11212
// begin if playerForces [ 1 ] and GetClass ( i ) in [ 3 , 4 ] then
11081: LD_EXP 10
11085: PUSH
11086: LD_INT 1
11088: ARRAY
11089: PUSH
11090: LD_VAR 0 2
11094: PPUSH
11095: CALL_OW 257
11099: PUSH
11100: LD_INT 3
11102: PUSH
11103: LD_INT 4
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: IN
11110: AND
11111: IFFALSE 11195
// begin PlaceUnitInArea ( playerForces [ 1 ] [ 1 ] , startArea , false ) ;
11113: LD_EXP 10
11117: PUSH
11118: LD_INT 1
11120: ARRAY
11121: PUSH
11122: LD_INT 1
11124: ARRAY
11125: PPUSH
11126: LD_INT 19
11128: PPUSH
11129: LD_INT 0
11131: PPUSH
11132: CALL 55362 0 3
// PlaceHumanInUnit ( i , playerForces [ 1 ] [ 1 ] ) ;
11136: LD_VAR 0 2
11140: PPUSH
11141: LD_EXP 10
11145: PUSH
11146: LD_INT 1
11148: ARRAY
11149: PUSH
11150: LD_INT 1
11152: ARRAY
11153: PPUSH
11154: CALL_OW 52
// playerForces := Replace ( playerForces , 1 , Delete ( playerForces [ 1 ] , 1 ) ) ;
11158: LD_ADDR_EXP 10
11162: PUSH
11163: LD_EXP 10
11167: PPUSH
11168: LD_INT 1
11170: PPUSH
11171: LD_EXP 10
11175: PUSH
11176: LD_INT 1
11178: ARRAY
11179: PPUSH
11180: LD_INT 1
11182: PPUSH
11183: CALL_OW 3
11187: PPUSH
11188: CALL_OW 1
11192: ST_TO_ADDR
// end else
11193: GO 11210
// PlaceUnitInArea ( i , startArea , false ) ;
11195: LD_VAR 0 2
11199: PPUSH
11200: LD_INT 19
11202: PPUSH
11203: LD_INT 0
11205: PPUSH
11206: CALL 55362 0 3
// end ;
11210: GO 11078
11212: POP
11213: POP
// wait ( 0 0$2 ) ;
11214: LD_INT 70
11216: PPUSH
11217: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1 ) ;
11221: LD_EXP 9
11225: PPUSH
11226: LD_STRING D
11228: PUSH
11229: LD_STRING I
11231: PUSH
11232: LD_STRING J
11234: PUSH
11235: LD_STRING S
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: LIST
11242: PUSH
11243: LD_EXP 25
11247: ARRAY
11248: STR
11249: PUSH
11250: LD_STRING -1
11252: STR
11253: PPUSH
11254: CALL_OW 88
// SayRadio ( Powell , DP-1 ) ;
11258: LD_EXP 12
11262: PPUSH
11263: LD_STRING DP-1
11265: PPUSH
11266: CALL_OW 94
// SayRadio ( Powell , DP-2 ) ;
11270: LD_EXP 12
11274: PPUSH
11275: LD_STRING DP-2
11277: PPUSH
11278: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2 ) ;
11282: LD_EXP 9
11286: PPUSH
11287: LD_STRING D
11289: PUSH
11290: LD_STRING I
11292: PUSH
11293: LD_STRING J
11295: PUSH
11296: LD_STRING S
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: LIST
11303: PUSH
11304: LD_EXP 25
11308: ARRAY
11309: STR
11310: PUSH
11311: LD_STRING -2
11313: STR
11314: PPUSH
11315: CALL_OW 88
// InGameOff ;
11319: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
11323: LD_STRING O1
11325: PPUSH
11326: CALL_OW 337
// game := true ;
11330: LD_ADDR_EXP 3
11334: PUSH
11335: LD_INT 1
11337: ST_TO_ADDR
// SaveForQuickRestart ;
11338: CALL_OW 22
// wait ( 0 0$5 ) ;
11342: LD_INT 175
11344: PPUSH
11345: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3 ) ;
11349: LD_EXP 9
11353: PPUSH
11354: LD_STRING D
11356: PUSH
11357: LD_STRING I
11359: PUSH
11360: LD_STRING J
11362: PUSH
11363: LD_STRING S
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: LIST
11370: PUSH
11371: LD_EXP 25
11375: ARRAY
11376: STR
11377: PUSH
11378: LD_STRING -3
11380: STR
11381: PPUSH
11382: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11386: LD_INT 35
11388: PPUSH
11389: CALL_OW 67
// until ruEscape [ 1 ] >= ruEscape [ 2 ] ;
11393: LD_EXP 15
11397: PUSH
11398: LD_INT 1
11400: ARRAY
11401: PUSH
11402: LD_EXP 15
11406: PUSH
11407: LD_INT 2
11409: ARRAY
11410: GREATEREQUAL
11411: IFFALSE 11386
// outpostEscape := true ;
11413: LD_ADDR_EXP 27
11417: PUSH
11418: LD_INT 1
11420: ST_TO_ADDR
// tmp := UnitFilter ( ruOutpost , [ f_sex , sex_male ] ) ;
11421: LD_ADDR_VAR 0 3
11425: PUSH
11426: LD_EXP 14
11430: PPUSH
11431: LD_INT 26
11433: PUSH
11434: LD_INT 1
11436: PUSH
11437: EMPTY
11438: LIST
11439: LIST
11440: PPUSH
11441: CALL_OW 72
11445: ST_TO_ADDR
// if tmp then
11446: LD_VAR 0 3
11450: IFFALSE 11468
// Say ( tmp [ 1 ] , DR-1-Escape ) ;
11452: LD_VAR 0 3
11456: PUSH
11457: LD_INT 1
11459: ARRAY
11460: PPUSH
11461: LD_STRING DR-1-Escape
11463: PPUSH
11464: CALL_OW 88
// wait ( 0 0$1 ) ;
11468: LD_INT 35
11470: PPUSH
11471: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Escape ) ;
11475: LD_EXP 9
11479: PPUSH
11480: LD_STRING D
11482: PUSH
11483: LD_STRING I
11485: PUSH
11486: LD_STRING J
11488: PUSH
11489: LD_STRING S
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: LIST
11496: PUSH
11497: LD_EXP 25
11501: ARRAY
11502: STR
11503: PUSH
11504: LD_STRING -1-Escape
11506: STR
11507: PPUSH
11508: CALL_OW 88
// for i in ruOutpost do
11512: LD_ADDR_VAR 0 2
11516: PUSH
11517: LD_EXP 14
11521: PUSH
11522: FOR_IN
11523: IFFALSE 11577
// begin if IsInUnit ( i ) then
11525: LD_VAR 0 2
11529: PPUSH
11530: CALL_OW 310
11534: IFFALSE 11545
// ComExitBuilding ( i ) ;
11536: LD_VAR 0 2
11540: PPUSH
11541: CALL_OW 122
// AddComMoveXY ( i , 179 , 102 ) ;
11545: LD_VAR 0 2
11549: PPUSH
11550: LD_INT 179
11552: PPUSH
11553: LD_INT 102
11555: PPUSH
11556: CALL_OW 171
// AddComMoveXY ( i , 28 , 20 ) ;
11560: LD_VAR 0 2
11564: PPUSH
11565: LD_INT 28
11567: PPUSH
11568: LD_INT 20
11570: PPUSH
11571: CALL_OW 171
// end ;
11575: GO 11522
11577: POP
11578: POP
// tmp := [ ] ;
11579: LD_ADDR_VAR 0 3
11583: PUSH
11584: EMPTY
11585: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11586: LD_INT 35
11588: PPUSH
11589: CALL_OW 67
// tmp := UnitFilter ( ruOutpost , [ f_inarea , rus2Base ] ) ;
11593: LD_ADDR_VAR 0 3
11597: PUSH
11598: LD_EXP 14
11602: PPUSH
11603: LD_INT 95
11605: PUSH
11606: LD_INT 11
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PPUSH
11613: CALL_OW 72
11617: ST_TO_ADDR
// if tmp then
11618: LD_VAR 0 3
11622: IFFALSE 11701
// for i in tmp do
11624: LD_ADDR_VAR 0 2
11628: PUSH
11629: LD_VAR 0 3
11633: PUSH
11634: FOR_IN
11635: IFFALSE 11699
// begin ruOutpost := ruOutpost diff i ;
11637: LD_ADDR_EXP 14
11641: PUSH
11642: LD_EXP 14
11646: PUSH
11647: LD_VAR 0 2
11651: DIFF
11652: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ mc_rus_2 , mc_bases [ mc_rus_2 ] + 1 ] , i ) ;
11653: LD_ADDR_EXP 50
11657: PUSH
11658: LD_EXP 50
11662: PPUSH
11663: LD_EXP 8
11667: PUSH
11668: LD_EXP 50
11672: PUSH
11673: LD_EXP 8
11677: ARRAY
11678: PUSH
11679: LD_INT 1
11681: PLUS
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PPUSH
11687: LD_VAR 0 2
11691: PPUSH
11692: CALL 24697 0 3
11696: ST_TO_ADDR
// end ;
11697: GO 11634
11699: POP
11700: POP
// until not UnitFilter ( ruOutpost , [ f_type , unit_human ] ) ;
11701: LD_EXP 14
11705: PPUSH
11706: LD_INT 21
11708: PUSH
11709: LD_INT 1
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: PPUSH
11716: CALL_OW 72
11720: NOT
11721: IFFALSE 11586
// ruOutpost := [ ] ;
11723: LD_ADDR_EXP 14
11727: PUSH
11728: EMPTY
11729: ST_TO_ADDR
// end ;
11730: LD_VAR 0 1
11734: RET
// every 0 0$1 trigger outpostEscape do var i , tmp ;
11735: LD_EXP 27
11739: IFFALSE 11928
11741: GO 11743
11743: DISABLE
11744: LD_INT 0
11746: PPUSH
11747: PPUSH
// begin wait ( rand ( 0 0$25 , 0 0$35 ) ) ;
11748: LD_INT 875
11750: PPUSH
11751: LD_INT 1225
11753: PPUSH
11754: CALL_OW 12
11758: PPUSH
11759: CALL_OW 67
// tmp := [ [ 208 , 166 ] , [ 218 , 174 ] , [ 201 , 173 ] , [ 189 , 167 ] , [ 191 , 160 ] , [ 209 , 181 ] , [ 192 , 162 ] , [ 197 , 166 ] ] ;
11763: LD_ADDR_VAR 0 2
11767: PUSH
11768: LD_INT 208
11770: PUSH
11771: LD_INT 166
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: PUSH
11778: LD_INT 218
11780: PUSH
11781: LD_INT 174
11783: PUSH
11784: EMPTY
11785: LIST
11786: LIST
11787: PUSH
11788: LD_INT 201
11790: PUSH
11791: LD_INT 173
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: PUSH
11798: LD_INT 189
11800: PUSH
11801: LD_INT 167
11803: PUSH
11804: EMPTY
11805: LIST
11806: LIST
11807: PUSH
11808: LD_INT 191
11810: PUSH
11811: LD_INT 160
11813: PUSH
11814: EMPTY
11815: LIST
11816: LIST
11817: PUSH
11818: LD_INT 209
11820: PUSH
11821: LD_INT 181
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: PUSH
11828: LD_INT 192
11830: PUSH
11831: LD_INT 162
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PUSH
11838: LD_INT 197
11840: PUSH
11841: LD_INT 166
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: ST_TO_ADDR
// for i = 1 to 5 + Difficulty do
11858: LD_ADDR_VAR 0 1
11862: PUSH
11863: DOUBLE
11864: LD_INT 1
11866: DEC
11867: ST_TO_ADDR
11868: LD_INT 5
11870: PUSH
11871: LD_OWVAR 67
11875: PLUS
11876: PUSH
11877: FOR_TO
11878: IFFALSE 11926
// begin MineExplosion ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 1 ) ;
11880: LD_VAR 0 2
11884: PUSH
11885: LD_VAR 0 1
11889: ARRAY
11890: PUSH
11891: LD_INT 1
11893: ARRAY
11894: PPUSH
11895: LD_VAR 0 2
11899: PUSH
11900: LD_VAR 0 1
11904: ARRAY
11905: PUSH
11906: LD_INT 2
11908: ARRAY
11909: PPUSH
11910: LD_INT 1
11912: PPUSH
11913: CALL_OW 453
// wait ( 0 0$0.8 ) ;
11917: LD_INT 28
11919: PPUSH
11920: CALL_OW 67
// end ;
11924: GO 11877
11926: POP
11927: POP
// end ;
11928: PPOPN 2
11930: END
// every 0 0$3 trigger not outpostEscape do var tmp , engs , buildings , empty , i , j , k ;
11931: LD_EXP 27
11935: NOT
11936: IFFALSE 12590
11938: GO 11940
11940: DISABLE
11941: LD_INT 0
11943: PPUSH
11944: PPUSH
11945: PPUSH
11946: PPUSH
11947: PPUSH
11948: PPUSH
11949: PPUSH
// begin enable ;
11950: ENABLE
// tmp := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
11951: LD_ADDR_VAR 0 1
11955: PUSH
11956: LD_EXP 14
11960: PPUSH
11961: LD_INT 22
11963: PUSH
11964: LD_INT 3
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: PUSH
11971: LD_INT 25
11973: PUSH
11974: LD_INT 1
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: PPUSH
11985: CALL_OW 72
11989: ST_TO_ADDR
// engs := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11990: LD_ADDR_VAR 0 2
11994: PUSH
11995: LD_EXP 14
11999: PPUSH
12000: LD_INT 22
12002: PUSH
12003: LD_INT 3
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 25
12012: PUSH
12013: LD_INT 2
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PPUSH
12024: CALL_OW 72
12028: ST_TO_ADDR
// buildings := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12029: LD_ADDR_VAR 0 3
12033: PUSH
12034: LD_EXP 14
12038: PPUSH
12039: LD_INT 22
12041: PUSH
12042: LD_INT 3
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PUSH
12049: LD_INT 21
12051: PUSH
12052: LD_INT 3
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: PUSH
12059: LD_INT 3
12061: PUSH
12062: LD_INT 24
12064: PUSH
12065: LD_INT 1000
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: LIST
12080: PPUSH
12081: CALL_OW 72
12085: ST_TO_ADDR
// if engs and buildings then
12086: LD_VAR 0 2
12090: PUSH
12091: LD_VAR 0 3
12095: AND
12096: IFFALSE 12169
// begin for i in engs do
12098: LD_ADDR_VAR 0 5
12102: PUSH
12103: LD_VAR 0 2
12107: PUSH
12108: FOR_IN
12109: IFFALSE 12165
// if IsInUnit ( i ) then
12111: LD_VAR 0 5
12115: PPUSH
12116: CALL_OW 310
12120: IFFALSE 12133
// ComExitBuilding ( i ) else
12122: LD_VAR 0 5
12126: PPUSH
12127: CALL_OW 122
12131: GO 12163
// if not HasTask ( i ) then
12133: LD_VAR 0 5
12137: PPUSH
12138: CALL_OW 314
12142: NOT
12143: IFFALSE 12163
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
12145: LD_VAR 0 5
12149: PPUSH
12150: LD_VAR 0 3
12154: PUSH
12155: LD_INT 1
12157: ARRAY
12158: PPUSH
12159: CALL_OW 130
12163: GO 12108
12165: POP
12166: POP
// end else
12167: GO 12272
// if not buildings and UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) and UnitFilter ( engs , [ f_not , [ f_inside ] ] ) then
12169: LD_VAR 0 3
12173: NOT
12174: PUSH
12175: LD_EXP 14
12179: PPUSH
12180: LD_INT 30
12182: PUSH
12183: LD_INT 0
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: PPUSH
12190: CALL_OW 72
12194: AND
12195: PUSH
12196: LD_VAR 0 2
12200: PPUSH
12201: LD_INT 3
12203: PUSH
12204: LD_INT 54
12206: PUSH
12207: EMPTY
12208: LIST
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PPUSH
12214: CALL_OW 72
12218: AND
12219: IFFALSE 12272
// ComEnterUnit ( UnitFilter ( engs , [ f_not , [ f_inside ] ] ) , UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) [ 1 ] ) ;
12221: LD_VAR 0 2
12225: PPUSH
12226: LD_INT 3
12228: PUSH
12229: LD_INT 54
12231: PUSH
12232: EMPTY
12233: LIST
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: PPUSH
12239: CALL_OW 72
12243: PPUSH
12244: LD_EXP 14
12248: PPUSH
12249: LD_INT 30
12251: PUSH
12252: LD_INT 0
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: PPUSH
12259: CALL_OW 72
12263: PUSH
12264: LD_INT 1
12266: ARRAY
12267: PPUSH
12268: CALL_OW 120
// if not tmp then
12272: LD_VAR 0 1
12276: NOT
12277: IFFALSE 12281
// exit ;
12279: GO 12590
// if FilterUnitsInArea ( ruOutpostCenterArea , [ f_enemy , 3 ] ) > 1 then
12281: LD_INT 26
12283: PPUSH
12284: LD_INT 81
12286: PUSH
12287: LD_INT 3
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: PPUSH
12294: CALL_OW 70
12298: PUSH
12299: LD_INT 1
12301: GREATER
12302: IFFALSE 12358
// begin for i in tmp do
12304: LD_ADDR_VAR 0 5
12308: PUSH
12309: LD_VAR 0 1
12313: PUSH
12314: FOR_IN
12315: IFFALSE 12354
// begin if IsInUnit ( i ) then
12317: LD_VAR 0 5
12321: PPUSH
12322: CALL_OW 310
12326: IFFALSE 12337
// ComExitBuilding ( i ) ;
12328: LD_VAR 0 5
12332: PPUSH
12333: CALL_OW 122
// AddComAgressiveMove ( i , 204 , 164 ) ;
12337: LD_VAR 0 5
12341: PPUSH
12342: LD_INT 204
12344: PPUSH
12345: LD_INT 164
12347: PPUSH
12348: CALL_OW 174
// end ;
12352: GO 12314
12354: POP
12355: POP
// end else
12356: GO 12590
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
12358: LD_VAR 0 1
12362: PPUSH
12363: LD_INT 3
12365: PUSH
12366: LD_INT 54
12368: PUSH
12369: EMPTY
12370: LIST
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: PPUSH
12376: CALL_OW 72
12380: IFFALSE 12590
// begin empty := UnitFilter ( ruOutpost , [ [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
12382: LD_ADDR_VAR 0 4
12386: PUSH
12387: LD_EXP 14
12391: PPUSH
12392: LD_INT 30
12394: PUSH
12395: LD_INT 32
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: PUSH
12402: LD_INT 58
12404: PUSH
12405: EMPTY
12406: LIST
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: PPUSH
12412: CALL_OW 72
12416: ST_TO_ADDR
// if not empty and UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) then
12417: LD_VAR 0 4
12421: NOT
12422: PUSH
12423: LD_EXP 14
12427: PPUSH
12428: LD_INT 30
12430: PUSH
12431: LD_INT 5
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PPUSH
12438: CALL_OW 72
12442: AND
12443: IFFALSE 12480
// begin ComEnterUnit ( tmp , UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) [ 1 ] ) ;
12445: LD_VAR 0 1
12449: PPUSH
12450: LD_EXP 14
12454: PPUSH
12455: LD_INT 30
12457: PUSH
12458: LD_INT 5
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: PPUSH
12465: CALL_OW 72
12469: PUSH
12470: LD_INT 1
12472: ARRAY
12473: PPUSH
12474: CALL_OW 120
// exit ;
12478: GO 12590
// end ; j := UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) ;
12480: LD_ADDR_VAR 0 6
12484: PUSH
12485: LD_VAR 0 1
12489: PPUSH
12490: LD_INT 3
12492: PUSH
12493: LD_INT 54
12495: PUSH
12496: EMPTY
12497: LIST
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: PPUSH
12503: CALL_OW 72
12507: ST_TO_ADDR
// if j < empty then
12508: LD_VAR 0 6
12512: PUSH
12513: LD_VAR 0 4
12517: LESS
12518: IFFALSE 12532
// k := j else
12520: LD_ADDR_VAR 0 7
12524: PUSH
12525: LD_VAR 0 6
12529: ST_TO_ADDR
12530: GO 12542
// k := empty ;
12532: LD_ADDR_VAR 0 7
12536: PUSH
12537: LD_VAR 0 4
12541: ST_TO_ADDR
// for i = 1 to k do
12542: LD_ADDR_VAR 0 5
12546: PUSH
12547: DOUBLE
12548: LD_INT 1
12550: DEC
12551: ST_TO_ADDR
12552: LD_VAR 0 7
12556: PUSH
12557: FOR_TO
12558: IFFALSE 12588
// ComEnterUnit ( j [ i ] , empty [ i ] ) ;
12560: LD_VAR 0 6
12564: PUSH
12565: LD_VAR 0 5
12569: ARRAY
12570: PPUSH
12571: LD_VAR 0 4
12575: PUSH
12576: LD_VAR 0 5
12580: ARRAY
12581: PPUSH
12582: CALL_OW 120
12586: GO 12557
12588: POP
12589: POP
// end ; end ;
12590: PPOPN 7
12592: END
// every 0 0$2 trigger GameType = 1 and outpostEscape and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , 208 , 163 , 8 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 208 , 163 , 14 ] ] ) do var i ;
12593: LD_EXP 2
12597: PUSH
12598: LD_INT 1
12600: EQUAL
12601: PUSH
12602: LD_EXP 27
12606: AND
12607: PUSH
12608: LD_INT 22
12610: PUSH
12611: LD_INT 1
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: PUSH
12618: LD_INT 92
12620: PUSH
12621: LD_INT 208
12623: PUSH
12624: LD_INT 163
12626: PUSH
12627: LD_INT 8
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PPUSH
12640: CALL_OW 69
12644: AND
12645: PUSH
12646: LD_INT 22
12648: PUSH
12649: LD_INT 3
12651: PUSH
12652: EMPTY
12653: LIST
12654: LIST
12655: PUSH
12656: LD_INT 21
12658: PUSH
12659: LD_INT 1
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: PUSH
12666: LD_INT 92
12668: PUSH
12669: LD_INT 208
12671: PUSH
12672: LD_INT 163
12674: PUSH
12675: LD_INT 14
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: LIST
12688: PPUSH
12689: CALL_OW 69
12693: NOT
12694: AND
12695: IFFALSE 13000
12697: GO 12699
12699: DISABLE
12700: LD_INT 0
12702: PPUSH
// begin InGameOn ;
12703: CALL_OW 8
// CenterNowOnUnits ( playerCommander ) ;
12707: LD_EXP 9
12711: PPUSH
12712: CALL_OW 87
// wait ( 0 0$1 ) ;
12716: LD_INT 35
12718: PPUSH
12719: CALL_OW 67
// DialogueOn ;
12723: CALL_OW 6
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-BaseCaptured ) ;
12727: LD_EXP 9
12731: PPUSH
12732: LD_STRING D
12734: PUSH
12735: LD_STRING I
12737: PUSH
12738: LD_STRING J
12740: PUSH
12741: LD_STRING S
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: LIST
12748: PUSH
12749: LD_EXP 25
12753: ARRAY
12754: STR
12755: PUSH
12756: LD_STRING -1-BaseCaptured
12758: STR
12759: PPUSH
12760: CALL_OW 88
// SayRadio ( Powell , DP-1-BaseCaptured ) ;
12764: LD_EXP 12
12768: PPUSH
12769: LD_STRING DP-1-BaseCaptured
12771: PPUSH
12772: CALL_OW 94
// if sibBombAllowed then
12776: LD_EXP 23
12780: IFFALSE 12922
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-BaseCaptured ) ;
12782: LD_EXP 9
12786: PPUSH
12787: LD_STRING D
12789: PUSH
12790: LD_STRING I
12792: PUSH
12793: LD_STRING J
12795: PUSH
12796: LD_STRING S
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: LIST
12803: PUSH
12804: LD_EXP 25
12808: ARRAY
12809: STR
12810: PUSH
12811: LD_STRING -2-BaseCaptured
12813: STR
12814: PPUSH
12815: CALL_OW 88
// if commander = 1 then
12819: LD_EXP 25
12823: PUSH
12824: LD_INT 1
12826: EQUAL
12827: IFFALSE 12841
// SayRadio ( Powell , DP-2b-BaseCaptured ) ;
12829: LD_EXP 12
12833: PPUSH
12834: LD_STRING DP-2b-BaseCaptured
12836: PPUSH
12837: CALL_OW 94
// if commander = 2 then
12841: LD_EXP 25
12845: PUSH
12846: LD_INT 2
12848: EQUAL
12849: IFFALSE 12863
// SayRadio ( Powell , DP-2-BaseCaptured ) ;
12851: LD_EXP 12
12855: PPUSH
12856: LD_STRING DP-2-BaseCaptured
12858: PPUSH
12859: CALL_OW 94
// if commander = 3 then
12863: LD_EXP 25
12867: PUSH
12868: LD_INT 3
12870: EQUAL
12871: IFFALSE 12885
// SayRadio ( Powell , DP-2a-BaseCaptured ) ;
12873: LD_EXP 12
12877: PPUSH
12878: LD_STRING DP-2a-BaseCaptured
12880: PPUSH
12881: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3-BaseCaptured ) ;
12885: LD_EXP 9
12889: PPUSH
12890: LD_STRING D
12892: PUSH
12893: LD_STRING I
12895: PUSH
12896: LD_STRING J
12898: PUSH
12899: LD_STRING S
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: LIST
12906: PUSH
12907: LD_EXP 25
12911: ARRAY
12912: STR
12913: PUSH
12914: LD_STRING -3-BaseCaptured
12916: STR
12917: PPUSH
12918: CALL_OW 88
// end ; DialogueOff ;
12922: CALL_OW 7
// InGameOff ;
12926: CALL_OW 9
// ChangeMissionObjectives ( O2 ) ;
12930: LD_STRING O2
12932: PPUSH
12933: CALL_OW 337
// for i in UnitFilter ( ruOutpost , [ f_type , unit_building ] ) do
12937: LD_ADDR_VAR 0 1
12941: PUSH
12942: LD_EXP 14
12946: PPUSH
12947: LD_INT 21
12949: PUSH
12950: LD_INT 3
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: PPUSH
12957: CALL_OW 72
12961: PUSH
12962: FOR_IN
12963: IFFALSE 12979
// SetSide ( i , 1 ) ;
12965: LD_VAR 0 1
12969: PPUSH
12970: LD_INT 1
12972: PPUSH
12973: CALL_OW 235
12977: GO 12962
12979: POP
12980: POP
// baseCaptured := true ;
12981: LD_ADDR_EXP 17
12985: PUSH
12986: LD_INT 1
12988: ST_TO_ADDR
// wait ( 0 0$35 ) ;
12989: LD_INT 1225
12991: PPUSH
12992: CALL_OW 67
// PrepareReinforcements ;
12996: CALL 9910 0 0
// end ;
13000: PPOPN 1
13002: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 167 , 197 , 20 ] ] ) > 3 do
13003: LD_INT 22
13005: PUSH
13006: LD_INT 3
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: PUSH
13013: LD_INT 92
13015: PUSH
13016: LD_INT 167
13018: PUSH
13019: LD_INT 197
13021: PUSH
13022: LD_INT 20
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: PPUSH
13035: CALL_OW 69
13039: PUSH
13040: LD_INT 3
13042: GREATER
13043: IFFALSE 13060
13045: GO 13047
13047: DISABLE
// SayRadio ( Powell , DP-RuAttack ) ;
13048: LD_EXP 12
13052: PPUSH
13053: LD_STRING DP-RuAttack
13055: PPUSH
13056: CALL_OW 94
13060: END
// every 0 0$2 trigger not debug and SeeXY ( 1 , 168 , 74 ) and GetEnvironmentType ( 168 , 72 ) do
13061: LD_EXP 1
13065: NOT
13066: PUSH
13067: LD_INT 1
13069: PPUSH
13070: LD_INT 168
13072: PPUSH
13073: LD_INT 74
13075: PPUSH
13076: CALL_OW 293
13080: AND
13081: PUSH
13082: LD_INT 168
13084: PPUSH
13085: LD_INT 72
13087: PPUSH
13088: CALL_OW 553
13092: AND
13093: IFFALSE 13145
13095: GO 13097
13097: DISABLE
// begin CenterOnXY ( 168 , 72 ) ;
13098: LD_INT 168
13100: PPUSH
13101: LD_INT 72
13103: PPUSH
13104: CALL_OW 84
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Blockade ) ;
13108: LD_EXP 9
13112: PPUSH
13113: LD_STRING D
13115: PUSH
13116: LD_STRING I
13118: PUSH
13119: LD_STRING J
13121: PUSH
13122: LD_STRING S
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: LIST
13129: PUSH
13130: LD_EXP 25
13134: ARRAY
13135: STR
13136: PUSH
13137: LD_STRING -1-Blockade
13139: STR
13140: PPUSH
13141: CALL_OW 88
// end ;
13145: END
// every 0 0$2 trigger GameType = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 4 ] ] ) do
13146: LD_EXP 2
13150: PUSH
13151: LD_INT 1
13153: EQUAL
13154: PUSH
13155: LD_INT 22
13157: PUSH
13158: LD_INT 1
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PUSH
13165: LD_INT 101
13167: PUSH
13168: LD_INT 4
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PPUSH
13179: CALL_OW 69
13183: AND
13184: IFFALSE 13716
13186: GO 13188
13188: DISABLE
// begin ChangeSideFog ( 4 , 1 ) ;
13189: LD_INT 4
13191: PPUSH
13192: LD_INT 1
13194: PPUSH
13195: CALL_OW 343
// DialogueOn ;
13199: CALL_OW 6
// CenterNowOnUnits ( allyCommander ) ;
13203: LD_EXP 11
13207: PPUSH
13208: CALL_OW 87
// SayRadio ( allyCommander , DM-1-Contact ) ;
13212: LD_EXP 11
13216: PPUSH
13217: LD_STRING DM-1-Contact
13219: PPUSH
13220: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Contact ) ;
13224: LD_EXP 9
13228: PPUSH
13229: LD_STRING D
13231: PUSH
13232: LD_STRING I
13234: PUSH
13235: LD_STRING J
13237: PUSH
13238: LD_STRING S
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: LIST
13245: PUSH
13246: LD_EXP 25
13250: ARRAY
13251: STR
13252: PUSH
13253: LD_STRING -1-Contact
13255: STR
13256: PPUSH
13257: CALL_OW 88
// if commander = 1 then
13261: LD_EXP 25
13265: PUSH
13266: LD_INT 1
13268: EQUAL
13269: IFFALSE 13401
// begin SayRadio ( allyCommander , DM-2-Contact ) ;
13271: LD_EXP 11
13275: PPUSH
13276: LD_STRING DM-2-Contact
13278: PPUSH
13279: CALL_OW 94
// Say ( playerCommander , DI-2-Contact ) ;
13283: LD_EXP 9
13287: PPUSH
13288: LD_STRING DI-2-Contact
13290: PPUSH
13291: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13295: LD_INT 22
13297: PUSH
13298: LD_INT 8
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: PUSH
13305: LD_INT 21
13307: PUSH
13308: LD_INT 1
13310: PUSH
13311: EMPTY
13312: LIST
13313: LIST
13314: PUSH
13315: EMPTY
13316: LIST
13317: LIST
13318: PPUSH
13319: CALL_OW 69
13323: PUSH
13324: LD_INT 8
13326: PPUSH
13327: LD_INT 1
13329: PPUSH
13330: CALL_OW 81
13334: PUSH
13335: LD_INT 2
13337: EQUAL
13338: AND
13339: IFFALSE 13365
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13341: LD_EXP 11
13345: PPUSH
13346: LD_STRING DM-3-Contact
13348: PPUSH
13349: CALL_OW 94
// Say ( playerCommander , DI-3-Contact ) ;
13353: LD_EXP 9
13357: PPUSH
13358: LD_STRING DI-3-Contact
13360: PPUSH
13361: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13365: LD_EXP 11
13369: PPUSH
13370: LD_STRING DM-4-Contact
13372: PPUSH
13373: CALL_OW 94
// Say ( playerCommander , DI-4-Contact ) ;
13377: LD_EXP 9
13381: PPUSH
13382: LD_STRING DI-4-Contact
13384: PPUSH
13385: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13389: LD_EXP 11
13393: PPUSH
13394: LD_STRING DM-5-Contact
13396: PPUSH
13397: CALL_OW 94
// end ; if commander = 2 then
13401: LD_EXP 25
13405: PUSH
13406: LD_INT 2
13408: EQUAL
13409: IFFALSE 13541
// begin SayRadio ( allyCommander , DM-2c-Contact ) ;
13411: LD_EXP 11
13415: PPUSH
13416: LD_STRING DM-2c-Contact
13418: PPUSH
13419: CALL_OW 94
// Say ( playerCommander , DJ-2-Contact ) ;
13423: LD_EXP 9
13427: PPUSH
13428: LD_STRING DJ-2-Contact
13430: PPUSH
13431: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13435: LD_INT 22
13437: PUSH
13438: LD_INT 8
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: PUSH
13445: LD_INT 21
13447: PUSH
13448: LD_INT 1
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PPUSH
13459: CALL_OW 69
13463: PUSH
13464: LD_INT 8
13466: PPUSH
13467: LD_INT 1
13469: PPUSH
13470: CALL_OW 81
13474: PUSH
13475: LD_INT 2
13477: EQUAL
13478: AND
13479: IFFALSE 13505
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13481: LD_EXP 11
13485: PPUSH
13486: LD_STRING DM-3-Contact
13488: PPUSH
13489: CALL_OW 94
// Say ( playerCommander , DJ-3-Contact ) ;
13493: LD_EXP 9
13497: PPUSH
13498: LD_STRING DJ-3-Contact
13500: PPUSH
13501: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13505: LD_EXP 11
13509: PPUSH
13510: LD_STRING DM-4-Contact
13512: PPUSH
13513: CALL_OW 94
// Say ( playerCommander , DJ-4-Contact ) ;
13517: LD_EXP 9
13521: PPUSH
13522: LD_STRING DJ-4-Contact
13524: PPUSH
13525: CALL_OW 88
// SayRadio ( allyCommander , DM-5a-Contact ) ;
13529: LD_EXP 11
13533: PPUSH
13534: LD_STRING DM-5a-Contact
13536: PPUSH
13537: CALL_OW 94
// end ; if commander = 3 then
13541: LD_EXP 25
13545: PUSH
13546: LD_INT 3
13548: EQUAL
13549: IFFALSE 13705
// begin SayRadio ( allyCommander , DM-2a-Contact ) ;
13551: LD_EXP 11
13555: PPUSH
13556: LD_STRING DM-2a-Contact
13558: PPUSH
13559: CALL_OW 94
// Say ( playerCommander , DS-2a-Contact ) ;
13563: LD_EXP 9
13567: PPUSH
13568: LD_STRING DS-2a-Contact
13570: PPUSH
13571: CALL_OW 88
// SayRadio ( allyCommander , DM-2b-Contact ) ;
13575: LD_EXP 11
13579: PPUSH
13580: LD_STRING DM-2b-Contact
13582: PPUSH
13583: CALL_OW 94
// Say ( playerCommander , DS-2b-Contact ) ;
13587: LD_EXP 9
13591: PPUSH
13592: LD_STRING DS-2b-Contact
13594: PPUSH
13595: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13599: LD_INT 22
13601: PUSH
13602: LD_INT 8
13604: PUSH
13605: EMPTY
13606: LIST
13607: LIST
13608: PUSH
13609: LD_INT 21
13611: PUSH
13612: LD_INT 1
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: PPUSH
13623: CALL_OW 69
13627: PUSH
13628: LD_INT 8
13630: PPUSH
13631: LD_INT 1
13633: PPUSH
13634: CALL_OW 81
13638: PUSH
13639: LD_INT 2
13641: EQUAL
13642: AND
13643: IFFALSE 13669
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13645: LD_EXP 11
13649: PPUSH
13650: LD_STRING DM-3-Contact
13652: PPUSH
13653: CALL_OW 94
// Say ( playerCommander , DS-3-Contact ) ;
13657: LD_EXP 9
13661: PPUSH
13662: LD_STRING DS-3-Contact
13664: PPUSH
13665: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13669: LD_EXP 11
13673: PPUSH
13674: LD_STRING DM-4-Contact
13676: PPUSH
13677: CALL_OW 94
// Say ( playerCommander , DS-4-Contact ) ;
13681: LD_EXP 9
13685: PPUSH
13686: LD_STRING DS-4-Contact
13688: PPUSH
13689: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13693: LD_EXP 11
13697: PPUSH
13698: LD_STRING DM-5-Contact
13700: PPUSH
13701: CALL_OW 94
// end ; DialogueOff ;
13705: CALL_OW 7
// ChangeMissionObjectives ( O3 ) ;
13709: LD_STRING O3
13711: PPUSH
13712: CALL_OW 337
// end ;
13716: END
// every 0 0$10 trigger GameType = 1 and legDestCounter >= [ 15 , 20 , 25 ] [ Difficulty ] and FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) >= 5 do var time , sib , sources , i ;
13717: LD_EXP 2
13721: PUSH
13722: LD_INT 1
13724: EQUAL
13725: PUSH
13726: LD_EXP 18
13730: PUSH
13731: LD_INT 15
13733: PUSH
13734: LD_INT 20
13736: PUSH
13737: LD_INT 25
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: LIST
13744: PUSH
13745: LD_OWVAR 67
13749: ARRAY
13750: GREATEREQUAL
13751: AND
13752: PUSH
13753: LD_INT 22
13755: PUSH
13756: LD_INT 8
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PUSH
13763: LD_INT 30
13765: PUSH
13766: LD_INT 1
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PPUSH
13777: CALL_OW 69
13781: AND
13782: PUSH
13783: LD_INT 22
13785: PUSH
13786: LD_INT 8
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PUSH
13793: LD_INT 21
13795: PUSH
13796: LD_INT 3
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: PPUSH
13807: CALL_OW 69
13811: PUSH
13812: LD_INT 5
13814: GREATEREQUAL
13815: AND
13816: IFFALSE 14339
13818: GO 13820
13820: DISABLE
13821: LD_INT 0
13823: PPUSH
13824: PPUSH
13825: PPUSH
13826: PPUSH
// begin DialogueOn ;
13827: CALL_OW 6
// SayRadio ( Farmer , DF-1-Leg ) ;
13831: LD_EXP 13
13835: PPUSH
13836: LD_STRING DF-1-Leg
13838: PPUSH
13839: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Leg ) ;
13843: LD_EXP 9
13847: PPUSH
13848: LD_STRING D
13850: PUSH
13851: LD_STRING I
13853: PUSH
13854: LD_STRING J
13856: PUSH
13857: LD_STRING S
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: LIST
13864: PUSH
13865: LD_EXP 25
13869: ARRAY
13870: STR
13871: PUSH
13872: LD_STRING -1-Leg
13874: STR
13875: PPUSH
13876: CALL_OW 88
// SayRadio ( Farmer , DF-2-Leg ) ;
13880: LD_EXP 13
13884: PPUSH
13885: LD_STRING DF-2-Leg
13887: PPUSH
13888: CALL_OW 94
// DialogueOff ;
13892: CALL_OW 7
// case Query ( QLegionOffer ) of 1 :
13896: LD_STRING QLegionOffer
13898: PPUSH
13899: CALL_OW 97
13903: PUSH
13904: LD_INT 1
13906: DOUBLE
13907: EQUAL
13908: IFTRUE 13912
13910: GO 13915
13912: POP
// ; 2 :
13913: GO 13929
13915: LD_INT 2
13917: DOUBLE
13918: EQUAL
13919: IFTRUE 13923
13921: GO 13928
13923: POP
// exit ; end ;
13924: GO 14339
13926: GO 13929
13928: POP
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-Leg ) ;
13929: LD_EXP 9
13933: PPUSH
13934: LD_STRING D
13936: PUSH
13937: LD_STRING I
13939: PUSH
13940: LD_STRING J
13942: PUSH
13943: LD_STRING S
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: LIST
13950: PUSH
13951: LD_EXP 25
13955: ARRAY
13956: STR
13957: PUSH
13958: LD_STRING -2-Leg
13960: STR
13961: PPUSH
13962: CALL_OW 88
// legOfferAccepted := true ;
13966: LD_ADDR_EXP 20
13970: PUSH
13971: LD_INT 1
13973: ST_TO_ADDR
// SetAreaMapShow ( legOfferArea , 1 ) ;
13974: LD_INT 21
13976: PPUSH
13977: LD_INT 1
13979: PPUSH
13980: CALL_OW 424
// CenterOnXY ( 190 , 227 ) ;
13984: LD_INT 190
13986: PPUSH
13987: LD_INT 227
13989: PPUSH
13990: CALL_OW 84
// time := [ 8 8$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
13994: LD_ADDR_VAR 0 1
13998: PUSH
13999: LD_INT 16800
14001: PUSH
14002: LD_INT 14700
14004: PUSH
14005: LD_INT 12600
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: LIST
14012: PUSH
14013: LD_OWVAR 67
14017: ARRAY
14018: ST_TO_ADDR
// sib := 100 ;
14019: LD_ADDR_VAR 0 2
14023: PUSH
14024: LD_INT 100
14026: ST_TO_ADDR
// disableGlobalTimer := true ;
14027: LD_ADDR_EXP 4
14031: PUSH
14032: LD_INT 1
14034: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14035: LD_INT 35
14037: PPUSH
14038: CALL_OW 67
// time := time - 0 0$1 ;
14042: LD_ADDR_VAR 0 1
14046: PUSH
14047: LD_VAR 0 1
14051: PUSH
14052: LD_INT 35
14054: MINUS
14055: ST_TO_ADDR
// sources := GetResourceArea ( legOfferArea , mat_siberit ) ;
14056: LD_ADDR_VAR 0 3
14060: PUSH
14061: LD_INT 21
14063: PPUSH
14064: LD_INT 3
14066: PPUSH
14067: CALL_OW 287
14071: ST_TO_ADDR
// display_strings := [ #SkrTime , tick , #Skr-LegOffer , sib , time ] ;
14072: LD_ADDR_OWVAR 47
14076: PUSH
14077: LD_STRING #SkrTime
14079: PUSH
14080: LD_OWVAR 1
14084: PUSH
14085: LD_STRING #Skr-LegOffer
14087: PUSH
14088: LD_VAR 0 2
14092: PUSH
14093: LD_VAR 0 1
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: ST_TO_ADDR
// if sources then
14105: LD_VAR 0 3
14109: IFFALSE 14141
// begin sib := sib - sources * 10 ;
14111: LD_ADDR_VAR 0 2
14115: PUSH
14116: LD_VAR 0 2
14120: PUSH
14121: LD_VAR 0 3
14125: PUSH
14126: LD_INT 10
14128: MUL
14129: MINUS
14130: ST_TO_ADDR
// EraseResourceArea ( legOfferArea , mat_siberit ) ;
14131: LD_INT 21
14133: PPUSH
14134: LD_INT 3
14136: PPUSH
14137: CALL_OW 286
// end ; until time = 0 0$00 or sib <= 0 or not FilterAllUnits ( [ f_side , 8 ] ) ;
14141: LD_VAR 0 1
14145: PUSH
14146: LD_INT 0
14148: EQUAL
14149: PUSH
14150: LD_VAR 0 2
14154: PUSH
14155: LD_INT 0
14157: LESSEQUAL
14158: OR
14159: PUSH
14160: LD_INT 22
14162: PUSH
14163: LD_INT 8
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: PPUSH
14170: CALL_OW 69
14174: NOT
14175: OR
14176: IFFALSE 14035
// SetAreaMapShow ( legOfferArea , 0 ) ;
14178: LD_INT 21
14180: PPUSH
14181: LD_INT 0
14183: PPUSH
14184: CALL_OW 424
// disableGlobalTimer := false ;
14188: LD_ADDR_EXP 4
14192: PUSH
14193: LD_INT 0
14195: ST_TO_ADDR
// if sib <= 0 then
14196: LD_VAR 0 2
14200: PUSH
14201: LD_INT 0
14203: LESSEQUAL
14204: IFFALSE 14320
// begin legChangeSide := true ;
14206: LD_ADDR_EXP 21
14210: PUSH
14211: LD_INT 1
14213: ST_TO_ADDR
// SayRadio ( Farmer , DF-4y-Leg ) ;
14214: LD_EXP 13
14218: PPUSH
14219: LD_STRING DF-4y-Leg
14221: PPUSH
14222: CALL_OW 94
// ChangeMissionObjectives ( O3a ) ;
14226: LD_STRING O3a
14228: PPUSH
14229: CALL_OW 337
// ChangeSideFog ( 8 , 1 ) ;
14233: LD_INT 8
14235: PPUSH
14236: LD_INT 1
14238: PPUSH
14239: CALL_OW 343
// SetAttitude ( 8 , 1 , att_friend , true ) ;
14243: LD_INT 8
14245: PPUSH
14246: LD_INT 1
14248: PPUSH
14249: LD_INT 1
14251: PPUSH
14252: LD_INT 1
14254: PPUSH
14255: CALL_OW 80
// SetAttitude ( 8 , 4 , att_friend , true ) ;
14259: LD_INT 8
14261: PPUSH
14262: LD_INT 4
14264: PPUSH
14265: LD_INT 1
14267: PPUSH
14268: LD_INT 1
14270: PPUSH
14271: CALL_OW 80
// SetAttitude ( 8 , 6 , att_enemy , true ) ;
14275: LD_INT 8
14277: PPUSH
14278: LD_INT 6
14280: PPUSH
14281: LD_INT 2
14283: PPUSH
14284: LD_INT 1
14286: PPUSH
14287: CALL_OW 80
// SetAttitude ( 8 , 3 , att_enemy , true ) ;
14291: LD_INT 8
14293: PPUSH
14294: LD_INT 3
14296: PPUSH
14297: LD_INT 2
14299: PPUSH
14300: LD_INT 1
14302: PPUSH
14303: CALL_OW 80
// wait ( 0 0$30 ) ;
14307: LD_INT 1050
14309: PPUSH
14310: CALL_OW 67
// PrepareLegionReinforcements ;
14314: CALL 10610 0 0
// end else
14318: GO 14339
// begin ChangeMissionObjectives ( O3a ) ;
14320: LD_STRING O3a
14322: PPUSH
14323: CALL_OW 337
// SayRadio ( Farmer , DF-4n-Leg ) ;
14327: LD_EXP 13
14331: PPUSH
14332: LD_STRING DF-4n-Leg
14334: PPUSH
14335: CALL_OW 94
// end ; end ;
14339: PPOPN 4
14341: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 and GetAttitude ( 8 , 1 ) = att_enemy do
14342: LD_INT 22
14344: PUSH
14345: LD_INT 8
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PUSH
14352: LD_INT 21
14354: PUSH
14355: LD_INT 1
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: PPUSH
14366: CALL_OW 69
14370: PUSH
14371: LD_INT 0
14373: EQUAL
14374: PUSH
14375: LD_INT 8
14377: PPUSH
14378: LD_INT 1
14380: PPUSH
14381: CALL_OW 81
14385: PUSH
14386: LD_INT 2
14388: EQUAL
14389: AND
14390: IFFALSE 14402
14392: GO 14394
14394: DISABLE
// ChangeMissionObjectives ( O3a ) ;
14395: LD_STRING O3a
14397: PPUSH
14398: CALL_OW 337
14402: END
// every 0 0$1 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) = 0 do
14403: LD_EXP 2
14407: PUSH
14408: LD_INT 1
14410: EQUAL
14411: PUSH
14412: LD_EXP 3
14416: AND
14417: PUSH
14418: LD_INT 22
14420: PUSH
14421: LD_INT 3
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: PUSH
14428: LD_INT 21
14430: PUSH
14431: LD_INT 1
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PPUSH
14442: CALL_OW 69
14446: PUSH
14447: LD_INT 0
14449: EQUAL
14450: AND
14451: PUSH
14452: LD_INT 22
14454: PUSH
14455: LD_INT 3
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: PUSH
14462: LD_INT 30
14464: PUSH
14465: LD_INT 1
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: PPUSH
14476: CALL_OW 69
14480: PUSH
14481: LD_INT 0
14483: EQUAL
14484: AND
14485: IFFALSE 14723
14487: GO 14489
14489: DISABLE
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Win ) ;
14490: LD_EXP 9
14494: PPUSH
14495: LD_STRING D
14497: PUSH
14498: LD_STRING I
14500: PUSH
14501: LD_STRING J
14503: PUSH
14504: LD_STRING S
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: LIST
14511: PUSH
14512: LD_EXP 25
14516: ARRAY
14517: STR
14518: PUSH
14519: LD_STRING -1-Win
14521: STR
14522: PPUSH
14523: CALL_OW 88
// if tick >= [ 150 150$0 , 130 130$0 , 110 110$0 ] [ Difficulty ] then
14527: LD_OWVAR 1
14531: PUSH
14532: LD_INT 315000
14534: PUSH
14535: LD_INT 273000
14537: PUSH
14538: LD_INT 231000
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: LIST
14545: PUSH
14546: LD_OWVAR 67
14550: ARRAY
14551: GREATEREQUAL
14552: IFFALSE 14567
// AddMedal ( med1 , - 1 ) else
14554: LD_STRING med1
14556: PPUSH
14557: LD_INT 1
14559: NEG
14560: PPUSH
14561: CALL_OW 101
14565: GO 14577
// AddMedal ( med1 , 1 ) ;
14567: LD_STRING med1
14569: PPUSH
14570: LD_INT 1
14572: PPUSH
14573: CALL_OW 101
// if allyDestCounter >= [ 20 , 15 , 10 ] [ Difficulty ] then
14577: LD_EXP 22
14581: PUSH
14582: LD_INT 20
14584: PUSH
14585: LD_INT 15
14587: PUSH
14588: LD_INT 10
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: LIST
14595: PUSH
14596: LD_OWVAR 67
14600: ARRAY
14601: GREATEREQUAL
14602: IFFALSE 14617
// AddMedal ( med2 , - 1 ) else
14604: LD_STRING med2
14606: PPUSH
14607: LD_INT 1
14609: NEG
14610: PPUSH
14611: CALL_OW 101
14615: GO 14627
// AddMedal ( med2 , 1 ) ;
14617: LD_STRING med2
14619: PPUSH
14620: LD_INT 1
14622: PPUSH
14623: CALL_OW 101
// if GetAttitude ( 8 , 1 ) = att_friend then
14627: LD_INT 8
14629: PPUSH
14630: LD_INT 1
14632: PPUSH
14633: CALL_OW 81
14637: PUSH
14638: LD_INT 1
14640: EQUAL
14641: IFFALSE 14655
// AddMedal ( med3 , 1 ) else
14643: LD_STRING med3
14645: PPUSH
14646: LD_INT 1
14648: PPUSH
14649: CALL_OW 101
14653: GO 14712
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 then
14655: LD_INT 22
14657: PUSH
14658: LD_INT 8
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: PUSH
14665: LD_INT 21
14667: PUSH
14668: LD_INT 1
14670: PUSH
14671: EMPTY
14672: LIST
14673: LIST
14674: PUSH
14675: EMPTY
14676: LIST
14677: LIST
14678: PPUSH
14679: CALL_OW 69
14683: PUSH
14684: LD_INT 0
14686: EQUAL
14687: IFFALSE 14701
// AddMedal ( med3 , 2 ) else
14689: LD_STRING med3
14691: PPUSH
14692: LD_INT 2
14694: PPUSH
14695: CALL_OW 101
14699: GO 14712
// AddMedal ( med3 , - 1 ) ;
14701: LD_STRING med3
14703: PPUSH
14704: LD_INT 1
14706: NEG
14707: PPUSH
14708: CALL_OW 101
// GiveMedals ( MAIN ) ;
14712: LD_STRING MAIN
14714: PPUSH
14715: CALL_OW 102
// YouWin ;
14719: CALL_OW 103
// end ;
14723: END
// every 10 trigger GameType = 1 and staticMines and FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) do var i , j , tmp , x , y ;
14724: LD_EXP 2
14728: PUSH
14729: LD_INT 1
14731: EQUAL
14732: PUSH
14733: LD_EXP 16
14737: AND
14738: PUSH
14739: LD_INT 20
14741: PPUSH
14742: LD_INT 81
14744: PUSH
14745: LD_INT 8
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PPUSH
14752: CALL_OW 70
14756: AND
14757: IFFALSE 15036
14759: GO 14761
14761: DISABLE
14762: LD_INT 0
14764: PPUSH
14765: PPUSH
14766: PPUSH
14767: PPUSH
14768: PPUSH
// begin enable ;
14769: ENABLE
// tmp := FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) ;
14770: LD_ADDR_VAR 0 3
14774: PUSH
14775: LD_INT 20
14777: PPUSH
14778: LD_INT 81
14780: PUSH
14781: LD_INT 8
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PPUSH
14788: CALL_OW 70
14792: ST_TO_ADDR
// if not tmp then
14793: LD_VAR 0 3
14797: NOT
14798: IFFALSE 14802
// exit ;
14800: GO 15036
// for i in tmp do
14802: LD_ADDR_VAR 0 1
14806: PUSH
14807: LD_VAR 0 3
14811: PUSH
14812: FOR_IN
14813: IFFALSE 15034
// begin x := GetX ( i ) ;
14815: LD_ADDR_VAR 0 4
14819: PUSH
14820: LD_VAR 0 1
14824: PPUSH
14825: CALL_OW 250
14829: ST_TO_ADDR
// y := GetY ( i ) ;
14830: LD_ADDR_VAR 0 5
14834: PUSH
14835: LD_VAR 0 1
14839: PPUSH
14840: CALL_OW 251
14844: ST_TO_ADDR
// if MineAtPos ( x , y ) then
14845: LD_VAR 0 4
14849: PPUSH
14850: LD_VAR 0 5
14854: PPUSH
14855: CALL_OW 458
14859: IFFALSE 15032
// begin LaunchMineAtPos ( x , y , 8 ) ;
14861: LD_VAR 0 4
14865: PPUSH
14866: LD_VAR 0 5
14870: PPUSH
14871: LD_INT 8
14873: PPUSH
14874: CALL_OW 456
// if not dialogueMineDetected then
14878: LD_EXP 28
14882: NOT
14883: IFFALSE 14944
// begin CenterNowOnXY ( x , y ) ;
14885: LD_VAR 0 4
14889: PPUSH
14890: LD_VAR 0 5
14894: PPUSH
14895: CALL_OW 86
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Mine ) ;
14899: LD_EXP 9
14903: PPUSH
14904: LD_STRING D
14906: PUSH
14907: LD_STRING I
14909: PUSH
14910: LD_STRING J
14912: PUSH
14913: LD_STRING S
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: LIST
14920: PUSH
14921: LD_EXP 25
14925: ARRAY
14926: STR
14927: PUSH
14928: LD_STRING -1-Mine
14930: STR
14931: PPUSH
14932: CALL_OW 88
// dialogueMineDetected := true ;
14936: LD_ADDR_EXP 28
14940: PUSH
14941: LD_INT 1
14943: ST_TO_ADDR
// end ; for j = 1 to staticMines do
14944: LD_ADDR_VAR 0 2
14948: PUSH
14949: DOUBLE
14950: LD_INT 1
14952: DEC
14953: ST_TO_ADDR
14954: LD_EXP 16
14958: PUSH
14959: FOR_TO
14960: IFFALSE 15030
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
14962: LD_EXP 16
14966: PUSH
14967: LD_VAR 0 2
14971: ARRAY
14972: PUSH
14973: LD_INT 1
14975: ARRAY
14976: PUSH
14977: LD_VAR 0 4
14981: EQUAL
14982: PUSH
14983: LD_EXP 16
14987: PUSH
14988: LD_VAR 0 2
14992: ARRAY
14993: PUSH
14994: LD_INT 2
14996: ARRAY
14997: PUSH
14998: LD_VAR 0 5
15002: EQUAL
15003: AND
15004: IFFALSE 15028
// begin staticMines := Delete ( staticMines , j ) ;
15006: LD_ADDR_EXP 16
15010: PUSH
15011: LD_EXP 16
15015: PPUSH
15016: LD_VAR 0 2
15020: PPUSH
15021: CALL_OW 3
15025: ST_TO_ADDR
// break ;
15026: GO 15030
// end ;
15028: GO 14959
15030: POP
15031: POP
// end ; end ;
15032: GO 14812
15034: POP
15035: POP
// end ;
15036: PPOPN 5
15038: END
// every 30 30$00 + 50 50$00 trigger GameType = 1 and game and sibBombAllowed and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_btype , b_factory ] ) do var bomb , e ;
15039: LD_EXP 2
15043: PUSH
15044: LD_INT 1
15046: EQUAL
15047: PUSH
15048: LD_EXP 3
15052: AND
15053: PUSH
15054: LD_EXP 23
15058: AND
15059: PUSH
15060: LD_EXP 50
15064: PUSH
15065: LD_EXP 7
15069: ARRAY
15070: PPUSH
15071: LD_INT 30
15073: PUSH
15074: LD_INT 3
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PPUSH
15081: CALL_OW 72
15085: AND
15086: IFFALSE 15290
15088: GO 15090
15090: DISABLE
15091: LD_INT 0
15093: PPUSH
15094: PPUSH
// begin enable ;
15095: ENABLE
// MC_InsertProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
15096: LD_EXP 7
15100: PPUSH
15101: LD_INT 23
15103: PUSH
15104: LD_INT 3
15106: PUSH
15107: LD_INT 3
15109: PUSH
15110: LD_INT 48
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: PUSH
15119: EMPTY
15120: LIST
15121: PPUSH
15122: CALL 82826 0 2
// repeat wait ( 0 0$1 ) ;
15126: LD_INT 35
15128: PPUSH
15129: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
15133: LD_INT 22
15135: PUSH
15136: LD_INT 3
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: PUSH
15143: LD_INT 34
15145: PUSH
15146: LD_INT 48
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: PPUSH
15157: CALL_OW 69
15161: IFFALSE 15126
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
15163: LD_ADDR_VAR 0 1
15167: PUSH
15168: LD_INT 22
15170: PUSH
15171: LD_INT 3
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: PUSH
15178: LD_INT 34
15180: PUSH
15181: LD_INT 48
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: PUSH
15188: EMPTY
15189: LIST
15190: LIST
15191: PPUSH
15192: CALL_OW 69
15196: ST_TO_ADDR
// e := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) ;
15197: LD_ADDR_VAR 0 2
15201: PUSH
15202: LD_INT 81
15204: PUSH
15205: LD_INT 3
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: PUSH
15212: LD_INT 21
15214: PUSH
15215: LD_INT 3
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PPUSH
15226: CALL_OW 69
15230: ST_TO_ADDR
// if e then
15231: LD_VAR 0 2
15235: IFFALSE 15261
// e := NearestUnitToUnit ( e , bomb [ 1 ] ) ;
15237: LD_ADDR_VAR 0 2
15241: PUSH
15242: LD_VAR 0 2
15246: PPUSH
15247: LD_VAR 0 1
15251: PUSH
15252: LD_INT 1
15254: ARRAY
15255: PPUSH
15256: CALL_OW 74
15260: ST_TO_ADDR
// ComAttackPlace ( bomb , GetX ( e ) , GetY ( e ) ) ;
15261: LD_VAR 0 1
15265: PPUSH
15266: LD_VAR 0 2
15270: PPUSH
15271: CALL_OW 250
15275: PPUSH
15276: LD_VAR 0 2
15280: PPUSH
15281: CALL_OW 251
15285: PPUSH
15286: CALL_OW 116
// end ;
15290: PPOPN 2
15292: END
// every 0 0$2 trigger Difficulty > 1 and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) and GameType = 1 and game and GetTech ( tech_Behemoth , 3 ) = state_researched do var tmp , i ;
15293: LD_OWVAR 67
15297: PUSH
15298: LD_INT 1
15300: GREATER
15301: PUSH
15302: LD_EXP 50
15306: PUSH
15307: LD_EXP 7
15311: ARRAY
15312: PPUSH
15313: LD_INT 25
15315: PUSH
15316: LD_INT 3
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PPUSH
15323: CALL_OW 72
15327: AND
15328: PUSH
15329: LD_EXP 2
15333: PUSH
15334: LD_INT 1
15336: EQUAL
15337: AND
15338: PUSH
15339: LD_EXP 3
15343: AND
15344: PUSH
15345: LD_INT 23
15347: PPUSH
15348: LD_INT 3
15350: PPUSH
15351: CALL_OW 321
15355: PUSH
15356: LD_INT 2
15358: EQUAL
15359: AND
15360: IFFALSE 15487
15362: GO 15364
15364: DISABLE
15365: LD_INT 0
15367: PPUSH
15368: PPUSH
// begin tmp := UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) ;
15369: LD_ADDR_VAR 0 1
15373: PUSH
15374: LD_EXP 50
15378: PUSH
15379: LD_EXP 7
15383: ARRAY
15384: PPUSH
15385: LD_INT 25
15387: PUSH
15388: LD_INT 3
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PPUSH
15395: CALL_OW 72
15399: ST_TO_ADDR
// if not tmp then
15400: LD_VAR 0 1
15404: NOT
15405: IFFALSE 15409
// exit ;
15407: GO 15487
// for i in tmp do
15409: LD_ADDR_VAR 0 2
15413: PUSH
15414: LD_VAR 0 1
15418: PUSH
15419: FOR_IN
15420: IFFALSE 15466
// begin SetTag ( i , 29 ) ;
15422: LD_VAR 0 2
15426: PPUSH
15427: LD_INT 29
15429: PPUSH
15430: CALL_OW 109
// ComExitBuilding ( i ) ;
15434: LD_VAR 0 2
15438: PPUSH
15439: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , 97 , 133 , 0 ) ;
15443: LD_VAR 0 2
15447: PPUSH
15448: LD_INT 37
15450: PPUSH
15451: LD_INT 97
15453: PPUSH
15454: LD_INT 133
15456: PPUSH
15457: LD_INT 0
15459: PPUSH
15460: CALL_OW 230
// end ;
15464: GO 15419
15466: POP
15467: POP
// wait ( 1 1$00 ) ;
15468: LD_INT 2100
15470: PPUSH
15471: CALL_OW 67
// MC_Reset ( mc_rus_1 , 29 ) ;
15475: LD_EXP 7
15479: PPUSH
15480: LD_INT 29
15482: PPUSH
15483: CALL 62907 0 2
// end ;
15487: PPOPN 2
15489: END
// every 7 7$00 trigger GameType = 1 and GetBType ( HexInfo ( 84 , 128 ) ) = b_warehouse and GetSide ( HexInfo ( 84 , 128 ) ) = 3 do var veh , depot ;
15490: LD_EXP 2
15494: PUSH
15495: LD_INT 1
15497: EQUAL
15498: PUSH
15499: LD_INT 84
15501: PPUSH
15502: LD_INT 128
15504: PPUSH
15505: CALL_OW 428
15509: PPUSH
15510: CALL_OW 266
15514: PUSH
15515: LD_INT 1
15517: EQUAL
15518: AND
15519: PUSH
15520: LD_INT 84
15522: PPUSH
15523: LD_INT 128
15525: PPUSH
15526: CALL_OW 428
15530: PPUSH
15531: CALL_OW 255
15535: PUSH
15536: LD_INT 3
15538: EQUAL
15539: AND
15540: IFFALSE 15713
15542: GO 15544
15544: DISABLE
15545: LD_INT 0
15547: PPUSH
15548: PPUSH
// begin enable ;
15549: ENABLE
// depot := HexInfo ( 84 , 128 ) ;
15550: LD_ADDR_VAR 0 2
15554: PUSH
15555: LD_INT 84
15557: PPUSH
15558: LD_INT 128
15560: PPUSH
15561: CALL_OW 428
15565: ST_TO_ADDR
// uc_side := 3 ;
15566: LD_ADDR_OWVAR 20
15570: PUSH
15571: LD_INT 3
15573: ST_TO_ADDR
// uc_nation := 3 ;
15574: LD_ADDR_OWVAR 21
15578: PUSH
15579: LD_INT 3
15581: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay , 0 ) ;
15582: LD_INT 21
15584: PPUSH
15585: LD_INT 3
15587: PPUSH
15588: LD_INT 3
15590: PPUSH
15591: LD_INT 51
15593: PPUSH
15594: LD_INT 0
15596: PPUSH
15597: CALL 24575 0 5
// veh := CreateVehicle ;
15601: LD_ADDR_VAR 0 1
15605: PUSH
15606: CALL_OW 45
15610: ST_TO_ADDR
// PlaceUnitXY ( veh , 126 , 227 , false ) ;
15611: LD_VAR 0 1
15615: PPUSH
15616: LD_INT 126
15618: PPUSH
15619: LD_INT 227
15621: PPUSH
15622: LD_INT 0
15624: PPUSH
15625: CALL_OW 48
// SetCargo ( veh , mat_oil , 100 ) ;
15629: LD_VAR 0 1
15633: PPUSH
15634: LD_INT 2
15636: PPUSH
15637: LD_INT 100
15639: PPUSH
15640: CALL_OW 290
// ComGive ( veh , depot ) ;
15644: LD_VAR 0 1
15648: PPUSH
15649: LD_VAR 0 2
15653: PPUSH
15654: CALL_OW 161
// AddComMoveXY ( veh , 126 , 227 ) ;
15658: LD_VAR 0 1
15662: PPUSH
15663: LD_INT 126
15665: PPUSH
15666: LD_INT 227
15668: PPUSH
15669: CALL_OW 171
// wait ( 0 0$10 ) ;
15673: LD_INT 350
15675: PPUSH
15676: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15680: LD_INT 35
15682: PPUSH
15683: CALL_OW 67
// until IsAt ( veh , 126 , 227 ) ;
15687: LD_VAR 0 1
15691: PPUSH
15692: LD_INT 126
15694: PPUSH
15695: LD_INT 227
15697: PPUSH
15698: CALL_OW 307
15702: IFFALSE 15680
// RemoveUnit ( veh ) ;
15704: LD_VAR 0 1
15708: PPUSH
15709: CALL_OW 64
// end ;
15713: PPOPN 2
15715: END
// every 9 9$00 trigger GameType = 1 and outpostEscape and commander = 2 do var veh , depot ;
15716: LD_EXP 2
15720: PUSH
15721: LD_INT 1
15723: EQUAL
15724: PUSH
15725: LD_EXP 27
15729: AND
15730: PUSH
15731: LD_EXP 25
15735: PUSH
15736: LD_INT 2
15738: EQUAL
15739: AND
15740: IFFALSE 15932
15742: GO 15744
15744: DISABLE
15745: LD_INT 0
15747: PPUSH
15748: PPUSH
// begin enable ;
15749: ENABLE
// if tick >= [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] then
15750: LD_OWVAR 1
15754: PUSH
15755: LD_INT 105000
15757: PUSH
15758: LD_INT 84000
15760: PUSH
15761: LD_INT 63000
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: LIST
15768: PUSH
15769: LD_OWVAR 67
15773: ARRAY
15774: GREATEREQUAL
15775: IFFALSE 15778
// disable ;
15777: DISABLE
// uc_side := 4 ;
15778: LD_ADDR_OWVAR 20
15782: PUSH
15783: LD_INT 4
15785: ST_TO_ADDR
// uc_nation := 1 ;
15786: LD_ADDR_OWVAR 21
15790: PUSH
15791: LD_INT 1
15793: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 0 ) ;
15794: LD_INT 2
15796: PPUSH
15797: LD_INT 3
15799: PPUSH
15800: LD_INT 3
15802: PPUSH
15803: LD_INT 12
15805: PPUSH
15806: LD_INT 0
15808: PPUSH
15809: CALL 24575 0 5
// veh := CreateVehicle ;
15813: LD_ADDR_VAR 0 1
15817: PUSH
15818: CALL_OW 45
15822: ST_TO_ADDR
// PlaceUnitXY ( veh , 229 , 226 , false ) ;
15823: LD_VAR 0 1
15827: PPUSH
15828: LD_INT 229
15830: PPUSH
15831: LD_INT 226
15833: PPUSH
15834: LD_INT 0
15836: PPUSH
15837: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
15841: LD_VAR 0 1
15845: PPUSH
15846: LD_INT 1
15848: PPUSH
15849: LD_INT 100
15851: PPUSH
15852: CALL_OW 290
// AddComMoveToArea ( veh , ruOutpostArea ) ;
15856: LD_VAR 0 1
15860: PPUSH
15861: LD_INT 25
15863: PPUSH
15864: CALL_OW 173
// AddComUnload ( veh ) ;
15868: LD_VAR 0 1
15872: PPUSH
15873: CALL_OW 219
// AddComMoveXY ( veh , 229 , 226 ) ;
15877: LD_VAR 0 1
15881: PPUSH
15882: LD_INT 229
15884: PPUSH
15885: LD_INT 226
15887: PPUSH
15888: CALL_OW 171
// wait ( 0 0$10 ) ;
15892: LD_INT 350
15894: PPUSH
15895: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15899: LD_INT 35
15901: PPUSH
15902: CALL_OW 67
// until IsAt ( veh , 229 , 226 ) ;
15906: LD_VAR 0 1
15910: PPUSH
15911: LD_INT 229
15913: PPUSH
15914: LD_INT 226
15916: PPUSH
15917: CALL_OW 307
15921: IFFALSE 15899
// RemoveUnit ( veh ) ;
15923: LD_VAR 0 1
15927: PPUSH
15928: CALL_OW 64
// end ;
15932: PPOPN 2
15934: END
// every 15 15$00 trigger GameType = 1 and game and reinforceAllowed do var i , j , veh , tmp , amount ;
15935: LD_EXP 2
15939: PUSH
15940: LD_INT 1
15942: EQUAL
15943: PUSH
15944: LD_EXP 3
15948: AND
15949: PUSH
15950: LD_EXP 24
15954: AND
15955: IFFALSE 16288
15957: GO 15959
15959: DISABLE
15960: LD_INT 0
15962: PPUSH
15963: PPUSH
15964: PPUSH
15965: PPUSH
15966: PPUSH
// begin enable ;
15967: ENABLE
// tmp := [ ] ;
15968: LD_ADDR_VAR 0 4
15972: PUSH
15973: EMPTY
15974: ST_TO_ADDR
// if commander = 1 then
15975: LD_EXP 25
15979: PUSH
15980: LD_INT 1
15982: EQUAL
15983: IFFALSE 15995
// amount := 3 else
15985: LD_ADDR_VAR 0 5
15989: PUSH
15990: LD_INT 3
15992: ST_TO_ADDR
15993: GO 16003
// amount := 2 ;
15995: LD_ADDR_VAR 0 5
15999: PUSH
16000: LD_INT 2
16002: ST_TO_ADDR
// for i = 1 to amount do
16003: LD_ADDR_VAR 0 1
16007: PUSH
16008: DOUBLE
16009: LD_INT 1
16011: DEC
16012: ST_TO_ADDR
16013: LD_VAR 0 5
16017: PUSH
16018: FOR_TO
16019: IFFALSE 16183
// begin wait ( 0 0$5 ) ;
16021: LD_INT 175
16023: PPUSH
16024: CALL_OW 67
// for j = 1 to 3 do
16028: LD_ADDR_VAR 0 2
16032: PUSH
16033: DOUBLE
16034: LD_INT 1
16036: DEC
16037: ST_TO_ADDR
16038: LD_INT 3
16040: PUSH
16041: FOR_TO
16042: IFFALSE 16179
// begin uc_side := 4 ;
16044: LD_ADDR_OWVAR 20
16048: PUSH
16049: LD_INT 4
16051: ST_TO_ADDR
// uc_nation := 1 ;
16052: LD_ADDR_OWVAR 21
16056: PUSH
16057: LD_INT 1
16059: ST_TO_ADDR
// PrepareVehicle ( [ us_medium_tracked , us_morphling ] [ rand ( 1 , 2 ) ] , engine_siberite , control_computer , [ us_laser , us_double_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
16060: LD_INT 3
16062: PUSH
16063: LD_INT 5
16065: PUSH
16066: EMPTY
16067: LIST
16068: LIST
16069: PUSH
16070: LD_INT 1
16072: PPUSH
16073: LD_INT 2
16075: PPUSH
16076: CALL_OW 12
16080: ARRAY
16081: PPUSH
16082: LD_INT 3
16084: PPUSH
16085: LD_INT 3
16087: PPUSH
16088: LD_INT 9
16090: PUSH
16091: LD_INT 5
16093: PUSH
16094: LD_INT 7
16096: PUSH
16097: EMPTY
16098: LIST
16099: LIST
16100: LIST
16101: PUSH
16102: LD_INT 1
16104: PPUSH
16105: LD_INT 3
16107: PPUSH
16108: CALL_OW 12
16112: ARRAY
16113: PPUSH
16114: LD_INT 100
16116: PPUSH
16117: CALL 24575 0 5
// veh := CreateVehicle ;
16121: LD_ADDR_VAR 0 3
16125: PUSH
16126: CALL_OW 45
16130: ST_TO_ADDR
// tmp := tmp ^ veh ;
16131: LD_ADDR_VAR 0 4
16135: PUSH
16136: LD_VAR 0 4
16140: PUSH
16141: LD_VAR 0 3
16145: ADD
16146: ST_TO_ADDR
// PlaceUnitArea ( veh , westSpawn , false ) ;
16147: LD_VAR 0 3
16151: PPUSH
16152: LD_INT 22
16154: PPUSH
16155: LD_INT 0
16157: PPUSH
16158: CALL_OW 49
// ComMoveXY ( veh , 119 , 215 ) ;
16162: LD_VAR 0 3
16166: PPUSH
16167: LD_INT 119
16169: PPUSH
16170: LD_INT 215
16172: PPUSH
16173: CALL_OW 111
// end ;
16177: GO 16041
16179: POP
16180: POP
// end ;
16181: GO 16018
16183: POP
16184: POP
// wait ( 0 0$3 ) ;
16185: LD_INT 105
16187: PPUSH
16188: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16192: LD_INT 35
16194: PPUSH
16195: CALL_OW 67
// for i in tmp do
16199: LD_ADDR_VAR 0 1
16203: PUSH
16204: LD_VAR 0 4
16208: PUSH
16209: FOR_IN
16210: IFFALSE 16277
// if IsDead ( i ) then
16212: LD_VAR 0 1
16216: PPUSH
16217: CALL_OW 301
16221: IFFALSE 16241
// tmp := tmp diff i else
16223: LD_ADDR_VAR 0 4
16227: PUSH
16228: LD_VAR 0 4
16232: PUSH
16233: LD_VAR 0 1
16237: DIFF
16238: ST_TO_ADDR
16239: GO 16275
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) ;
16241: LD_VAR 0 1
16245: PPUSH
16246: LD_INT 81
16248: PUSH
16249: LD_INT 4
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: PPUSH
16256: CALL_OW 69
16260: PPUSH
16261: LD_VAR 0 1
16265: PPUSH
16266: CALL_OW 74
16270: PPUSH
16271: CALL_OW 115
16275: GO 16209
16277: POP
16278: POP
// until tmp = [ ] ;
16279: LD_VAR 0 4
16283: PUSH
16284: EMPTY
16285: EQUAL
16286: IFFALSE 16192
// end ;
16288: PPOPN 5
16290: END
// every 0 0$1 trigger GameType = 1 and game do var i , tmp ;
16291: LD_EXP 2
16295: PUSH
16296: LD_INT 1
16298: EQUAL
16299: PUSH
16300: LD_EXP 3
16304: AND
16305: IFFALSE 16406
16307: GO 16309
16309: DISABLE
16310: LD_INT 0
16312: PPUSH
16313: PPUSH
// begin enable ;
16314: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
16315: LD_ADDR_VAR 0 2
16319: PUSH
16320: LD_INT 3
16322: PUSH
16323: LD_INT 22
16325: PUSH
16326: LD_INT 1
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PUSH
16337: LD_INT 32
16339: PUSH
16340: LD_INT 1
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: PPUSH
16351: CALL_OW 69
16355: ST_TO_ADDR
// if tmp then
16356: LD_VAR 0 2
16360: IFFALSE 16406
// for i in tmp do
16362: LD_ADDR_VAR 0 1
16366: PUSH
16367: LD_VAR 0 2
16371: PUSH
16372: FOR_IN
16373: IFFALSE 16404
// if GetFuel ( i ) < 3 then
16375: LD_VAR 0 1
16379: PPUSH
16380: CALL_OW 261
16384: PUSH
16385: LD_INT 3
16387: LESS
16388: IFFALSE 16402
// SetFuel ( i , 3 ) ;
16390: LD_VAR 0 1
16394: PPUSH
16395: LD_INT 3
16397: PPUSH
16398: CALL_OW 240
16402: GO 16372
16404: POP
16405: POP
// end ;
16406: PPOPN 2
16408: END
// every 15 15$00 trigger game and GetAttitude ( 8 , 4 ) = att_enemy do var i , un , tmp ;
16409: LD_EXP 3
16413: PUSH
16414: LD_INT 8
16416: PPUSH
16417: LD_INT 4
16419: PPUSH
16420: CALL_OW 81
16424: PUSH
16425: LD_INT 2
16427: EQUAL
16428: AND
16429: IFFALSE 16639
16431: GO 16433
16433: DISABLE
16434: LD_INT 0
16436: PPUSH
16437: PPUSH
16438: PPUSH
// begin enable ;
16439: ENABLE
// tmp := [ ] ;
16440: LD_ADDR_VAR 0 3
16444: PUSH
16445: EMPTY
16446: ST_TO_ADDR
// for i = 1 to 4 do
16447: LD_ADDR_VAR 0 1
16451: PUSH
16452: DOUBLE
16453: LD_INT 1
16455: DEC
16456: ST_TO_ADDR
16457: LD_INT 4
16459: PUSH
16460: FOR_TO
16461: IFFALSE 16605
// begin uc_side := 8 ;
16463: LD_ADDR_OWVAR 20
16467: PUSH
16468: LD_INT 8
16470: ST_TO_ADDR
// uc_nation := nation_arabian ;
16471: LD_ADDR_OWVAR 21
16475: PUSH
16476: LD_INT 2
16478: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] , rand ( 60 , 80 ) ) ;
16479: LD_INT 11
16481: PPUSH
16482: LD_INT 1
16484: PPUSH
16485: LD_INT 5
16487: PPUSH
16488: LD_INT 24
16490: PUSH
16491: LD_INT 23
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: PUSH
16498: LD_INT 1
16500: PPUSH
16501: LD_INT 2
16503: PPUSH
16504: CALL_OW 12
16508: ARRAY
16509: PPUSH
16510: LD_INT 60
16512: PPUSH
16513: LD_INT 80
16515: PPUSH
16516: CALL_OW 12
16520: PPUSH
16521: CALL 24575 0 5
// un := CreateVehicle ;
16525: LD_ADDR_VAR 0 2
16529: PUSH
16530: CALL_OW 45
16534: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16535: LD_VAR 0 2
16539: PPUSH
16540: LD_INT 2
16542: PPUSH
16543: CALL_OW 233
// tmp := tmp ^ un ;
16547: LD_ADDR_VAR 0 3
16551: PUSH
16552: LD_VAR 0 3
16556: PUSH
16557: LD_VAR 0 2
16561: ADD
16562: ST_TO_ADDR
// PlaceUnitXY ( un , 88 , 2 , false ) ;
16563: LD_VAR 0 2
16567: PPUSH
16568: LD_INT 88
16570: PPUSH
16571: LD_INT 2
16573: PPUSH
16574: LD_INT 0
16576: PPUSH
16577: CALL_OW 48
// ComMoveXY ( un , 93 , 13 ) ;
16581: LD_VAR 0 2
16585: PPUSH
16586: LD_INT 93
16588: PPUSH
16589: LD_INT 13
16591: PPUSH
16592: CALL_OW 111
// wait ( 0 0$2 ) ;
16596: LD_INT 70
16598: PPUSH
16599: CALL_OW 67
// end ;
16603: GO 16460
16605: POP
16606: POP
// for i in tmp do
16607: LD_ADDR_VAR 0 1
16611: PUSH
16612: LD_VAR 0 3
16616: PUSH
16617: FOR_IN
16618: IFFALSE 16637
// AddComMoveXY ( i , 136 , 19 ) ;
16620: LD_VAR 0 1
16624: PPUSH
16625: LD_INT 136
16627: PPUSH
16628: LD_INT 19
16630: PPUSH
16631: CALL_OW 171
16635: GO 16617
16637: POP
16638: POP
// end ;
16639: PPOPN 3
16641: END
// every 7 7$30 + 7 7$30 trigger game do var i , base , tmp , target ;
16642: LD_EXP 3
16646: IFFALSE 17565
16648: GO 16650
16650: DISABLE
16651: LD_INT 0
16653: PPUSH
16654: PPUSH
16655: PPUSH
16656: PPUSH
// begin enable ;
16657: ENABLE
// base := mc_leg ;
16658: LD_ADDR_VAR 0 2
16662: PUSH
16663: LD_EXP 6
16667: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
16668: LD_INT 22
16670: PUSH
16671: LD_INT 8
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: PUSH
16678: LD_INT 23
16680: PUSH
16681: LD_INT 2
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: PUSH
16688: LD_INT 30
16690: PUSH
16691: LD_INT 3
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: LIST
16702: PPUSH
16703: CALL_OW 69
16707: NOT
16708: IFFALSE 16712
// exit ;
16710: GO 17565
// if Prob ( 40 ) then
16712: LD_INT 40
16714: PPUSH
16715: CALL_OW 13
16719: IFFALSE 16848
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16721: LD_VAR 0 2
16725: PPUSH
16726: LD_INT 13
16728: PUSH
16729: LD_INT 1
16731: PUSH
16732: LD_INT 2
16734: PUSH
16735: LD_INT 28
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: PUSH
16744: LD_INT 13
16746: PUSH
16747: LD_INT 1
16749: PUSH
16750: LD_INT 2
16752: PUSH
16753: LD_INT 28
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: PUSH
16762: LD_INT 13
16764: PUSH
16765: LD_INT 1
16767: PUSH
16768: LD_INT 2
16770: PUSH
16771: LD_INT 28
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: PUSH
16780: LD_INT 13
16782: PUSH
16783: LD_INT 1
16785: PUSH
16786: LD_INT 2
16788: PUSH
16789: LD_INT 28
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: PUSH
16798: LD_INT 13
16800: PUSH
16801: LD_INT 1
16803: PUSH
16804: LD_INT 2
16806: PUSH
16807: LD_INT 28
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: PUSH
16816: LD_INT 13
16818: PUSH
16819: LD_INT 1
16821: PUSH
16822: LD_INT 2
16824: PUSH
16825: LD_INT 26
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: PPUSH
16842: CALL 82826 0 2
// end else
16846: GO 17065
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16848: LD_VAR 0 2
16852: PPUSH
16853: LD_INT 13
16855: PUSH
16856: LD_INT 1
16858: PUSH
16859: LD_INT 2
16861: PUSH
16862: LD_INT 27
16864: PUSH
16865: LD_INT 26
16867: PUSH
16868: LD_INT 26
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: LIST
16875: PUSH
16876: LD_INT 1
16878: PPUSH
16879: LD_INT 3
16881: PPUSH
16882: CALL_OW 12
16886: ARRAY
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: PUSH
16894: LD_INT 13
16896: PUSH
16897: LD_INT 1
16899: PUSH
16900: LD_INT 2
16902: PUSH
16903: LD_INT 27
16905: PUSH
16906: LD_INT 26
16908: PUSH
16909: LD_INT 26
16911: PUSH
16912: EMPTY
16913: LIST
16914: LIST
16915: LIST
16916: PUSH
16917: LD_INT 1
16919: PPUSH
16920: LD_INT 3
16922: PPUSH
16923: CALL_OW 12
16927: ARRAY
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 13
16937: PUSH
16938: LD_INT 1
16940: PUSH
16941: LD_INT 2
16943: PUSH
16944: LD_INT 26
16946: PUSH
16947: LD_INT 26
16949: PUSH
16950: LD_INT 29
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: LIST
16957: PUSH
16958: LD_INT 1
16960: PPUSH
16961: LD_INT 3
16963: PPUSH
16964: CALL_OW 12
16968: ARRAY
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 13
16978: PUSH
16979: LD_INT 1
16981: PUSH
16982: LD_INT 2
16984: PUSH
16985: LD_INT 26
16987: PUSH
16988: LD_INT 29
16990: PUSH
16991: LD_INT 29
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: LIST
16998: PUSH
16999: LD_INT 1
17001: PPUSH
17002: LD_INT 3
17004: PPUSH
17005: CALL_OW 12
17009: ARRAY
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 13
17019: PUSH
17020: LD_INT 1
17022: PUSH
17023: LD_INT 2
17025: PUSH
17026: LD_INT 29
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: PUSH
17035: LD_INT 13
17037: PUSH
17038: LD_INT 1
17040: PUSH
17041: LD_INT 2
17043: PUSH
17044: LD_INT 26
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: PPUSH
17061: CALL 82826 0 2
// end ; repeat wait ( 0 0$1 ) ;
17065: LD_INT 35
17067: PPUSH
17068: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 6 or tick mod 10 10$00 = 0 ;
17072: LD_VAR 0 2
17076: PPUSH
17077: LD_INT 1
17079: PPUSH
17080: CALL 84244 0 2
17084: PUSH
17085: LD_INT 6
17087: GREATEREQUAL
17088: PUSH
17089: LD_OWVAR 1
17093: PUSH
17094: LD_INT 21000
17096: MOD
17097: PUSH
17098: LD_INT 0
17100: EQUAL
17101: OR
17102: IFFALSE 17065
// wait ( 0 0$30 ) ;
17104: LD_INT 1050
17106: PPUSH
17107: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
17111: LD_ADDR_VAR 0 3
17115: PUSH
17116: LD_VAR 0 2
17120: PPUSH
17121: LD_INT 1
17123: PPUSH
17124: CALL 84244 0 2
17128: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
17129: LD_ADDR_EXP 69
17133: PUSH
17134: LD_EXP 69
17138: PPUSH
17139: LD_VAR 0 2
17143: PPUSH
17144: LD_EXP 69
17148: PUSH
17149: LD_VAR 0 2
17153: ARRAY
17154: PUSH
17155: LD_VAR 0 3
17159: DIFF
17160: PPUSH
17161: CALL_OW 1
17165: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
17166: LD_ADDR_VAR 0 4
17170: PUSH
17171: LD_INT 0
17173: PPUSH
17174: LD_INT 2
17176: PPUSH
17177: CALL_OW 12
17181: ST_TO_ADDR
// if legChangeSide then
17182: LD_EXP 21
17186: IFFALSE 17196
// target := 2 ;
17188: LD_ADDR_VAR 0 4
17192: PUSH
17193: LD_INT 2
17195: ST_TO_ADDR
// if target = 2 then
17196: LD_VAR 0 4
17200: PUSH
17201: LD_INT 2
17203: EQUAL
17204: IFFALSE 17332
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17206: LD_ADDR_VAR 0 3
17210: PUSH
17211: LD_VAR 0 3
17215: PPUSH
17216: LD_INT 24
17218: PUSH
17219: LD_INT 250
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: PPUSH
17226: CALL_OW 72
17230: ST_TO_ADDR
// for i in tmp do
17231: LD_ADDR_VAR 0 1
17235: PUSH
17236: LD_VAR 0 3
17240: PUSH
17241: FOR_IN
17242: IFFALSE 17282
// if GetDistUnitXY ( i , 112 , 64 ) > 9 then
17244: LD_VAR 0 1
17248: PPUSH
17249: LD_INT 112
17251: PPUSH
17252: LD_INT 64
17254: PPUSH
17255: CALL_OW 297
17259: PUSH
17260: LD_INT 9
17262: GREATER
17263: IFFALSE 17280
// ComMoveXY ( i , 112 , 64 ) ;
17265: LD_VAR 0 1
17269: PPUSH
17270: LD_INT 112
17272: PPUSH
17273: LD_INT 64
17275: PPUSH
17276: CALL_OW 111
17280: GO 17241
17282: POP
17283: POP
// wait ( 0 0$1 ) ;
17284: LD_INT 35
17286: PPUSH
17287: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 112 , 64 , 9 ] ) >= ( tmp - 1 ) ;
17291: LD_VAR 0 3
17295: PPUSH
17296: LD_INT 92
17298: PUSH
17299: LD_INT 112
17301: PUSH
17302: LD_INT 64
17304: PUSH
17305: LD_INT 9
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: PPUSH
17314: CALL_OW 72
17318: PUSH
17319: LD_VAR 0 3
17323: PUSH
17324: LD_INT 1
17326: MINUS
17327: GREATEREQUAL
17328: IFFALSE 17206
// end else
17330: GO 17456
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17332: LD_ADDR_VAR 0 3
17336: PUSH
17337: LD_VAR 0 3
17341: PPUSH
17342: LD_INT 24
17344: PUSH
17345: LD_INT 250
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PPUSH
17352: CALL_OW 72
17356: ST_TO_ADDR
// for i in tmp do
17357: LD_ADDR_VAR 0 1
17361: PUSH
17362: LD_VAR 0 3
17366: PUSH
17367: FOR_IN
17368: IFFALSE 17408
// if GetDistUnitXY ( i , 174 , 94 ) > 9 then
17370: LD_VAR 0 1
17374: PPUSH
17375: LD_INT 174
17377: PPUSH
17378: LD_INT 94
17380: PPUSH
17381: CALL_OW 297
17385: PUSH
17386: LD_INT 9
17388: GREATER
17389: IFFALSE 17406
// ComMoveXY ( i , 174 , 94 ) ;
17391: LD_VAR 0 1
17395: PPUSH
17396: LD_INT 174
17398: PPUSH
17399: LD_INT 94
17401: PPUSH
17402: CALL_OW 111
17406: GO 17367
17408: POP
17409: POP
// wait ( 0 0$1 ) ;
17410: LD_INT 35
17412: PPUSH
17413: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 174 , 94 , 9 ] ) >= ( tmp - 1 ) ;
17417: LD_VAR 0 3
17421: PPUSH
17422: LD_INT 92
17424: PUSH
17425: LD_INT 174
17427: PUSH
17428: LD_INT 94
17430: PUSH
17431: LD_INT 9
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: PPUSH
17440: CALL_OW 72
17444: PUSH
17445: LD_VAR 0 3
17449: PUSH
17450: LD_INT 1
17452: MINUS
17453: GREATEREQUAL
17454: IFFALSE 17332
// end ; repeat wait ( 0 0$1 ) ;
17456: LD_INT 35
17458: PPUSH
17459: CALL_OW 67
// for i in tmp do
17463: LD_ADDR_VAR 0 1
17467: PUSH
17468: LD_VAR 0 3
17472: PUSH
17473: FOR_IN
17474: IFFALSE 17556
// begin if GetLives ( i ) > 251 then
17476: LD_VAR 0 1
17480: PPUSH
17481: CALL_OW 256
17485: PUSH
17486: LD_INT 251
17488: GREATER
17489: IFFALSE 17527
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
17491: LD_VAR 0 1
17495: PPUSH
17496: LD_INT 81
17498: PUSH
17499: LD_INT 8
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: PPUSH
17506: CALL_OW 69
17510: PPUSH
17511: LD_VAR 0 1
17515: PPUSH
17516: CALL_OW 74
17520: PPUSH
17521: CALL_OW 115
17525: GO 17554
// if IsDead ( i ) then
17527: LD_VAR 0 1
17531: PPUSH
17532: CALL_OW 301
17536: IFFALSE 17554
// tmp := tmp diff i ;
17538: LD_ADDR_VAR 0 3
17542: PUSH
17543: LD_VAR 0 3
17547: PUSH
17548: LD_VAR 0 1
17552: DIFF
17553: ST_TO_ADDR
// end ;
17554: GO 17473
17556: POP
17557: POP
// until not tmp ;
17558: LD_VAR 0 3
17562: NOT
17563: IFFALSE 17456
// end ;
17565: PPOPN 4
17567: END
// every 7 7$30 trigger game do var i , base , tmp , target , teleport ;
17568: LD_EXP 3
17572: IFFALSE 18560
17574: GO 17576
17576: DISABLE
17577: LD_INT 0
17579: PPUSH
17580: PPUSH
17581: PPUSH
17582: PPUSH
17583: PPUSH
// begin enable ;
17584: ENABLE
// if not UnitFilter ( mc_bases [ mc_rus_2 ] , [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
17585: LD_EXP 50
17589: PUSH
17590: LD_EXP 8
17594: ARRAY
17595: PPUSH
17596: LD_INT 22
17598: PUSH
17599: LD_INT 3
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: PUSH
17606: LD_INT 30
17608: PUSH
17609: LD_INT 3
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PPUSH
17620: CALL_OW 72
17624: NOT
17625: IFFALSE 17629
// exit ;
17627: GO 18560
// base := mc_rus_2 ;
17629: LD_ADDR_VAR 0 2
17633: PUSH
17634: LD_EXP 8
17638: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
17639: LD_ADDR_VAR 0 5
17643: PUSH
17644: LD_INT 22
17646: PUSH
17647: LD_INT 3
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: LD_INT 30
17656: PUSH
17657: LD_INT 34
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: PPUSH
17668: CALL_OW 69
17672: ST_TO_ADDR
// if Prob ( 40 ) then
17673: LD_INT 40
17675: PPUSH
17676: CALL_OW 13
17680: IFFALSE 17809
// begin MC_InsertProduceList ( base , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17682: LD_VAR 0 2
17686: PPUSH
17687: LD_INT 22
17689: PUSH
17690: LD_INT 3
17692: PUSH
17693: LD_INT 3
17695: PUSH
17696: LD_INT 49
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: PUSH
17705: LD_INT 22
17707: PUSH
17708: LD_INT 3
17710: PUSH
17711: LD_INT 3
17713: PUSH
17714: LD_INT 49
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: PUSH
17723: LD_INT 22
17725: PUSH
17726: LD_INT 3
17728: PUSH
17729: LD_INT 3
17731: PUSH
17732: LD_INT 49
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: PUSH
17741: LD_INT 24
17743: PUSH
17744: LD_INT 3
17746: PUSH
17747: LD_INT 3
17749: PUSH
17750: LD_INT 46
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: PUSH
17759: LD_INT 24
17761: PUSH
17762: LD_INT 3
17764: PUSH
17765: LD_INT 3
17767: PUSH
17768: LD_INT 46
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: PUSH
17777: LD_INT 24
17779: PUSH
17780: LD_INT 3
17782: PUSH
17783: LD_INT 3
17785: PUSH
17786: LD_INT 46
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: PPUSH
17803: CALL 82826 0 2
// end else
17807: GO 17934
// begin MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17809: LD_VAR 0 2
17813: PPUSH
17814: LD_INT 24
17816: PUSH
17817: LD_INT 3
17819: PUSH
17820: LD_INT 3
17822: PUSH
17823: LD_INT 47
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: PUSH
17832: LD_INT 24
17834: PUSH
17835: LD_INT 3
17837: PUSH
17838: LD_INT 3
17840: PUSH
17841: LD_INT 47
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: PUSH
17850: LD_INT 24
17852: PUSH
17853: LD_INT 3
17855: PUSH
17856: LD_INT 3
17858: PUSH
17859: LD_INT 47
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 24
17870: PUSH
17871: LD_INT 3
17873: PUSH
17874: LD_INT 3
17876: PUSH
17877: LD_INT 46
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 24
17888: PUSH
17889: LD_INT 3
17891: PUSH
17892: LD_INT 3
17894: PUSH
17895: LD_INT 46
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: PUSH
17904: LD_INT 24
17906: PUSH
17907: LD_INT 3
17909: PUSH
17910: LD_INT 3
17912: PUSH
17913: LD_INT 46
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: PPUSH
17930: CALL 82826 0 2
// end ; if Difficulty > 1 then
17934: LD_OWVAR 67
17938: PUSH
17939: LD_INT 1
17941: GREATER
17942: IFFALSE 17974
// MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
17944: LD_VAR 0 2
17948: PPUSH
17949: LD_INT 24
17951: PUSH
17952: LD_INT 3
17954: PUSH
17955: LD_INT 3
17957: PUSH
17958: LD_INT 47
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: PUSH
17967: EMPTY
17968: LIST
17969: PPUSH
17970: CALL 82826 0 2
// repeat wait ( 0 0$1 ) ;
17974: LD_INT 35
17976: PPUSH
17977: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] or tick mod 10 10$00 = 0 ;
17981: LD_VAR 0 2
17985: PPUSH
17986: LD_INT 1
17988: PPUSH
17989: CALL 84244 0 2
17993: PUSH
17994: LD_INT 6
17996: PUSH
17997: LD_INT 7
17999: PUSH
18000: LD_INT 7
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: LIST
18007: PUSH
18008: LD_OWVAR 67
18012: ARRAY
18013: GREATEREQUAL
18014: PUSH
18015: LD_OWVAR 1
18019: PUSH
18020: LD_INT 21000
18022: MOD
18023: PUSH
18024: LD_INT 0
18026: EQUAL
18027: OR
18028: IFFALSE 17974
// wait ( 0 0$45 ) ;
18030: LD_INT 1575
18032: PPUSH
18033: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
18037: LD_ADDR_VAR 0 3
18041: PUSH
18042: LD_VAR 0 2
18046: PPUSH
18047: LD_INT 1
18049: PPUSH
18050: CALL 84244 0 2
18054: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
18055: LD_ADDR_EXP 69
18059: PUSH
18060: LD_EXP 69
18064: PPUSH
18065: LD_VAR 0 2
18069: PPUSH
18070: LD_EXP 69
18074: PUSH
18075: LD_VAR 0 2
18079: ARRAY
18080: PUSH
18081: LD_VAR 0 3
18085: DIFF
18086: PPUSH
18087: CALL_OW 1
18091: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
18092: LD_ADDR_VAR 0 4
18096: PUSH
18097: LD_INT 0
18099: PPUSH
18100: LD_INT 1
18102: PPUSH
18103: CALL_OW 12
18107: ST_TO_ADDR
// if target then
18108: LD_VAR 0 4
18112: IFFALSE 18240
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
18114: LD_ADDR_VAR 0 3
18118: PUSH
18119: LD_VAR 0 3
18123: PPUSH
18124: LD_INT 24
18126: PUSH
18127: LD_INT 250
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PPUSH
18134: CALL_OW 72
18138: ST_TO_ADDR
// for i in tmp do
18139: LD_ADDR_VAR 0 1
18143: PUSH
18144: LD_VAR 0 3
18148: PUSH
18149: FOR_IN
18150: IFFALSE 18190
// if GetDistUnitXY ( i , 84 , 32 ) > 9 then
18152: LD_VAR 0 1
18156: PPUSH
18157: LD_INT 84
18159: PPUSH
18160: LD_INT 32
18162: PPUSH
18163: CALL_OW 297
18167: PUSH
18168: LD_INT 9
18170: GREATER
18171: IFFALSE 18188
// ComMoveXY ( i , 84 , 32 ) ;
18173: LD_VAR 0 1
18177: PPUSH
18178: LD_INT 84
18180: PPUSH
18181: LD_INT 32
18183: PPUSH
18184: CALL_OW 111
18188: GO 18149
18190: POP
18191: POP
// wait ( 0 0$1 ) ;
18192: LD_INT 35
18194: PPUSH
18195: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 84 , 32 , 9 ] ) >= ( tmp - 1 ) ;
18199: LD_VAR 0 3
18203: PPUSH
18204: LD_INT 92
18206: PUSH
18207: LD_INT 84
18209: PUSH
18210: LD_INT 32
18212: PUSH
18213: LD_INT 9
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: PPUSH
18222: CALL_OW 72
18226: PUSH
18227: LD_VAR 0 3
18231: PUSH
18232: LD_INT 1
18234: MINUS
18235: GREATEREQUAL
18236: IFFALSE 18114
// end else
18238: GO 18400
// begin if teleport then
18240: LD_VAR 0 5
18244: IFFALSE 18264
// ComEnterUnit ( tmp , teleport [ 1 ] ) ;
18246: LD_VAR 0 3
18250: PPUSH
18251: LD_VAR 0 5
18255: PUSH
18256: LD_INT 1
18258: ARRAY
18259: PPUSH
18260: CALL_OW 120
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
18264: LD_ADDR_VAR 0 3
18268: PUSH
18269: LD_VAR 0 3
18273: PPUSH
18274: LD_INT 24
18276: PUSH
18277: LD_INT 250
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PPUSH
18284: CALL_OW 72
18288: ST_TO_ADDR
// for i in tmp do
18289: LD_ADDR_VAR 0 1
18293: PUSH
18294: LD_VAR 0 3
18298: PUSH
18299: FOR_IN
18300: IFFALSE 18352
// if GetDistUnitXY ( i , 140 , 219 ) > 9 and not HasTask ( i ) then
18302: LD_VAR 0 1
18306: PPUSH
18307: LD_INT 140
18309: PPUSH
18310: LD_INT 219
18312: PPUSH
18313: CALL_OW 297
18317: PUSH
18318: LD_INT 9
18320: GREATER
18321: PUSH
18322: LD_VAR 0 1
18326: PPUSH
18327: CALL_OW 314
18331: NOT
18332: AND
18333: IFFALSE 18350
// AddComMoveXY ( i , 140 , 219 ) ;
18335: LD_VAR 0 1
18339: PPUSH
18340: LD_INT 140
18342: PPUSH
18343: LD_INT 219
18345: PPUSH
18346: CALL_OW 171
18350: GO 18299
18352: POP
18353: POP
// wait ( 0 0$1 ) ;
18354: LD_INT 35
18356: PPUSH
18357: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 140 , 219 , 9 ] ) >= ( tmp - 1 ) ;
18361: LD_VAR 0 3
18365: PPUSH
18366: LD_INT 92
18368: PUSH
18369: LD_INT 140
18371: PUSH
18372: LD_INT 219
18374: PUSH
18375: LD_INT 9
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: PPUSH
18384: CALL_OW 72
18388: PUSH
18389: LD_VAR 0 3
18393: PUSH
18394: LD_INT 1
18396: MINUS
18397: GREATEREQUAL
18398: IFFALSE 18264
// end ; repeat wait ( 0 0$1 ) ;
18400: LD_INT 35
18402: PPUSH
18403: CALL_OW 67
// for i in tmp do
18407: LD_ADDR_VAR 0 1
18411: PUSH
18412: LD_VAR 0 3
18416: PUSH
18417: FOR_IN
18418: IFFALSE 18551
// begin if GetLives ( i ) > 251 then
18420: LD_VAR 0 1
18424: PPUSH
18425: CALL_OW 256
18429: PUSH
18430: LD_INT 251
18432: GREATER
18433: IFFALSE 18522
// begin if GetWeapon ( i ) = ru_time_lapser then
18435: LD_VAR 0 1
18439: PPUSH
18440: CALL_OW 264
18444: PUSH
18445: LD_INT 49
18447: EQUAL
18448: IFFALSE 18486
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) else
18450: LD_VAR 0 1
18454: PPUSH
18455: LD_INT 81
18457: PUSH
18458: LD_INT 3
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PPUSH
18465: CALL_OW 69
18469: PPUSH
18470: LD_VAR 0 1
18474: PPUSH
18475: CALL_OW 74
18479: PPUSH
18480: CALL_OW 112
18484: GO 18520
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18486: LD_VAR 0 1
18490: PPUSH
18491: LD_INT 81
18493: PUSH
18494: LD_INT 3
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: PPUSH
18501: CALL_OW 69
18505: PPUSH
18506: LD_VAR 0 1
18510: PPUSH
18511: CALL_OW 74
18515: PPUSH
18516: CALL_OW 115
// end else
18520: GO 18549
// if IsDead ( i ) then
18522: LD_VAR 0 1
18526: PPUSH
18527: CALL_OW 301
18531: IFFALSE 18549
// tmp := tmp diff i ;
18533: LD_ADDR_VAR 0 3
18537: PUSH
18538: LD_VAR 0 3
18542: PUSH
18543: LD_VAR 0 1
18547: DIFF
18548: ST_TO_ADDR
// end ;
18549: GO 18417
18551: POP
18552: POP
// until not tmp ;
18553: LD_VAR 0 3
18557: NOT
18558: IFFALSE 18400
// end ;
18560: PPOPN 5
18562: END
// every 12 12$30 + 11 11$30 trigger game do var i , base , tmp , target ;
18563: LD_EXP 3
18567: IFFALSE 18949
18569: GO 18571
18571: DISABLE
18572: LD_INT 0
18574: PPUSH
18575: PPUSH
18576: PPUSH
18577: PPUSH
// begin enable ;
18578: ENABLE
// base := mc_amer ;
18579: LD_ADDR_VAR 0 2
18583: PUSH
18584: LD_EXP 5
18588: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_btype , b_factory ] ] ) then
18589: LD_INT 22
18591: PUSH
18592: LD_INT 4
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: LD_INT 23
18601: PUSH
18602: LD_INT 1
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PUSH
18609: LD_INT 30
18611: PUSH
18612: LD_INT 3
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: LIST
18623: PPUSH
18624: CALL_OW 69
18628: NOT
18629: IFFALSE 18633
// exit ;
18631: GO 18949
// MC_InsertProduceList ( base , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_laser ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] ] ) ;
18633: LD_VAR 0 2
18637: PPUSH
18638: LD_INT 3
18640: PUSH
18641: LD_INT 1
18643: PUSH
18644: LD_INT 2
18646: PUSH
18647: LD_INT 5
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 3
18658: PUSH
18659: LD_INT 1
18661: PUSH
18662: LD_INT 2
18664: PUSH
18665: LD_INT 9
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: PUSH
18674: LD_INT 3
18676: PUSH
18677: LD_INT 1
18679: PUSH
18680: LD_INT 2
18682: PUSH
18683: LD_INT 7
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: PUSH
18692: LD_INT 3
18694: PUSH
18695: LD_INT 1
18697: PUSH
18698: LD_INT 2
18700: PUSH
18701: LD_INT 7
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 3
18712: PUSH
18713: LD_INT 1
18715: PUSH
18716: LD_INT 2
18718: PUSH
18719: LD_INT 7
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: PPUSH
18735: CALL 82826 0 2
// repeat wait ( 0 0$1 ) ;
18739: LD_INT 35
18741: PPUSH
18742: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 5 or tick mod 10 10$00 = 0 ;
18746: LD_VAR 0 2
18750: PPUSH
18751: LD_INT 1
18753: PPUSH
18754: CALL 84244 0 2
18758: PUSH
18759: LD_INT 5
18761: GREATEREQUAL
18762: PUSH
18763: LD_OWVAR 1
18767: PUSH
18768: LD_INT 21000
18770: MOD
18771: PUSH
18772: LD_INT 0
18774: EQUAL
18775: OR
18776: IFFALSE 18739
// wait ( 0 0$30 ) ;
18778: LD_INT 1050
18780: PPUSH
18781: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
18785: LD_ADDR_VAR 0 3
18789: PUSH
18790: LD_VAR 0 2
18794: PPUSH
18795: LD_INT 1
18797: PPUSH
18798: CALL 84244 0 2
18802: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
18803: LD_ADDR_EXP 69
18807: PUSH
18808: LD_EXP 69
18812: PPUSH
18813: LD_VAR 0 2
18817: PPUSH
18818: LD_EXP 69
18822: PUSH
18823: LD_VAR 0 2
18827: ARRAY
18828: PUSH
18829: LD_VAR 0 3
18833: DIFF
18834: PPUSH
18835: CALL_OW 1
18839: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18840: LD_INT 35
18842: PPUSH
18843: CALL_OW 67
// for i in tmp do
18847: LD_ADDR_VAR 0 1
18851: PUSH
18852: LD_VAR 0 3
18856: PUSH
18857: FOR_IN
18858: IFFALSE 18940
// begin if GetLives ( i ) > 251 then
18860: LD_VAR 0 1
18864: PPUSH
18865: CALL_OW 256
18869: PUSH
18870: LD_INT 251
18872: GREATER
18873: IFFALSE 18911
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) else
18875: LD_VAR 0 1
18879: PPUSH
18880: LD_INT 81
18882: PUSH
18883: LD_INT 4
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: PPUSH
18890: CALL_OW 69
18894: PPUSH
18895: LD_VAR 0 1
18899: PPUSH
18900: CALL_OW 74
18904: PPUSH
18905: CALL_OW 115
18909: GO 18938
// if IsDead ( i ) then
18911: LD_VAR 0 1
18915: PPUSH
18916: CALL_OW 301
18920: IFFALSE 18938
// tmp := tmp diff i ;
18922: LD_ADDR_VAR 0 3
18926: PUSH
18927: LD_VAR 0 3
18931: PUSH
18932: LD_VAR 0 1
18936: DIFF
18937: ST_TO_ADDR
// end ;
18938: GO 18857
18940: POP
18941: POP
// until not tmp ;
18942: LD_VAR 0 3
18946: NOT
18947: IFFALSE 18840
// end ; end_of_file
18949: PPOPN 4
18951: END
// export function CustomEvent ( event ) ; begin
18952: LD_INT 0
18954: PPUSH
// end ;
18955: LD_VAR 0 2
18959: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 then
18960: LD_VAR 0 1
18964: PUSH
18965: LD_INT 1
18967: EQUAL
18968: PUSH
18969: LD_VAR 0 2
18973: PUSH
18974: LD_INT 4
18976: EQUAL
18977: AND
18978: IFFALSE 19006
// begin SayRadio ( Powell , DP-Lost ) ;
18980: LD_EXP 12
18984: PPUSH
18985: LD_STRING DP-Lost
18987: PPUSH
18988: CALL_OW 94
// wait ( 0 0$2 ) ;
18992: LD_INT 70
18994: PPUSH
18995: CALL_OW 67
// YouLost ( FriendlyFire ) ;
18999: LD_STRING FriendlyFire
19001: PPUSH
19002: CALL_OW 104
// end ; end ;
19006: PPOPN 2
19008: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
19009: LD_VAR 0 1
19013: PPUSH
19014: CALL 102404 0 1
// if GameType = 1 then
19018: LD_EXP 2
19022: PUSH
19023: LD_INT 1
19025: EQUAL
19026: IFFALSE 19261
// begin if un = playerCommander then
19028: LD_VAR 0 1
19032: PUSH
19033: LD_EXP 9
19037: EQUAL
19038: IFFALSE 19047
// YouLost ( commanderDied ) ;
19040: LD_STRING commanderDied
19042: PPUSH
19043: CALL_OW 104
// if un = allyCommander then
19047: LD_VAR 0 1
19051: PUSH
19052: LD_EXP 11
19056: EQUAL
19057: IFFALSE 19066
// YouLost ( Theta ) ;
19059: LD_STRING Theta
19061: PPUSH
19062: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
19066: LD_VAR 0 1
19070: PUSH
19071: LD_INT 22
19073: PUSH
19074: LD_INT 8
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: LD_INT 2
19083: PUSH
19084: LD_INT 21
19086: PUSH
19087: LD_INT 1
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: PUSH
19094: LD_INT 21
19096: PUSH
19097: LD_INT 3
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: LIST
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PPUSH
19113: CALL_OW 69
19117: IN
19118: IFFALSE 19134
// legDestCounter := legDestCounter + 1 ;
19120: LD_ADDR_EXP 18
19124: PUSH
19125: LD_EXP 18
19129: PUSH
19130: LD_INT 1
19132: PLUS
19133: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
19134: LD_VAR 0 1
19138: PUSH
19139: LD_INT 22
19141: PUSH
19142: LD_INT 4
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: LD_INT 2
19151: PUSH
19152: LD_INT 21
19154: PUSH
19155: LD_INT 1
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: LD_INT 21
19164: PUSH
19165: LD_INT 3
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: LIST
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PPUSH
19181: CALL_OW 69
19185: IN
19186: IFFALSE 19202
// allyDestCounter := allyDestCounter + 1 ;
19188: LD_ADDR_EXP 22
19192: PUSH
19193: LD_EXP 22
19197: PUSH
19198: LD_INT 1
19200: PLUS
19201: ST_TO_ADDR
// if un in ruOutpost then
19202: LD_VAR 0 1
19206: PUSH
19207: LD_EXP 14
19211: IN
19212: IFFALSE 19261
// begin ruOutpost := ruOutpost diff un ;
19214: LD_ADDR_EXP 14
19218: PUSH
19219: LD_EXP 14
19223: PUSH
19224: LD_VAR 0 1
19228: DIFF
19229: ST_TO_ADDR
// ruEscape := Replace ( ruEscape , 1 , ruEscape [ 1 ] + 1 ) ;
19230: LD_ADDR_EXP 15
19234: PUSH
19235: LD_EXP 15
19239: PPUSH
19240: LD_INT 1
19242: PPUSH
19243: LD_EXP 15
19247: PUSH
19248: LD_INT 1
19250: ARRAY
19251: PUSH
19252: LD_INT 1
19254: PLUS
19255: PPUSH
19256: CALL_OW 1
19260: ST_TO_ADDR
// end ; end ; MCE_UnitDestroyed ( un ) ;
19261: LD_VAR 0 1
19265: PPUSH
19266: CALL 86246 0 1
// end ;
19270: PPOPN 1
19272: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
19273: LD_VAR 0 1
19277: PPUSH
19278: LD_VAR 0 2
19282: PPUSH
19283: CALL 88580 0 2
// end ;
19287: PPOPN 2
19289: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
19290: LD_VAR 0 1
19294: PPUSH
19295: CALL 87648 0 1
// end ;
19299: PPOPN 1
19301: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
19302: LD_VAR 0 1
19306: PPUSH
19307: CALL 87889 0 1
// end ;
19311: PPOPN 1
19313: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_LasDouble and GetSide ( lab ) = 1 then
19314: LD_VAR 0 1
19318: PUSH
19319: LD_INT 14
19321: EQUAL
19322: PUSH
19323: LD_VAR 0 2
19327: PPUSH
19328: CALL_OW 255
19332: PUSH
19333: LD_INT 1
19335: EQUAL
19336: AND
19337: IFFALSE 19378
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Laser ) ;
19339: LD_EXP 9
19343: PPUSH
19344: LD_STRING D
19346: PUSH
19347: LD_STRING I
19349: PUSH
19350: LD_STRING J
19352: PUSH
19353: LD_STRING S
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: LIST
19360: PUSH
19361: LD_EXP 25
19365: ARRAY
19366: STR
19367: PUSH
19368: LD_STRING -1-Laser
19370: STR
19371: PPUSH
19372: CALL_OW 88
// exit ;
19376: GO 19520
// end ; if tech = tech_MatDet and GetSide ( lab ) = 1 then
19378: LD_VAR 0 1
19382: PUSH
19383: LD_INT 7
19385: EQUAL
19386: PUSH
19387: LD_VAR 0 2
19391: PPUSH
19392: CALL_OW 255
19396: PUSH
19397: LD_INT 1
19399: EQUAL
19400: AND
19401: IFFALSE 19442
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Materialization ) ;
19403: LD_EXP 9
19407: PPUSH
19408: LD_STRING D
19410: PUSH
19411: LD_STRING I
19413: PUSH
19414: LD_STRING J
19416: PUSH
19417: LD_STRING S
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: LIST
19424: PUSH
19425: LD_EXP 25
19429: ARRAY
19430: STR
19431: PUSH
19432: LD_STRING -1-Materialization
19434: STR
19435: PPUSH
19436: CALL_OW 88
// exit ;
19440: GO 19520
// end ; if tech = tech_SibFiss and GetSide ( lab ) = 1 then
19442: LD_VAR 0 1
19446: PUSH
19447: LD_INT 25
19449: EQUAL
19450: PUSH
19451: LD_VAR 0 2
19455: PPUSH
19456: CALL_OW 255
19460: PUSH
19461: LD_INT 1
19463: EQUAL
19464: AND
19465: IFFALSE 19506
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Rocket ) ;
19467: LD_EXP 9
19471: PPUSH
19472: LD_STRING D
19474: PUSH
19475: LD_STRING I
19477: PUSH
19478: LD_STRING J
19480: PUSH
19481: LD_STRING S
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: LIST
19488: PUSH
19489: LD_EXP 25
19493: ARRAY
19494: STR
19495: PUSH
19496: LD_STRING -1-Rocket
19498: STR
19499: PPUSH
19500: CALL_OW 88
// exit ;
19504: GO 19520
// end ; MCE_ResearchComplete ( tech , lab ) ;
19506: LD_VAR 0 1
19510: PPUSH
19511: LD_VAR 0 2
19515: PPUSH
19516: CALL 85942 0 2
// end ;
19520: PPOPN 2
19522: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
19523: LD_VAR 0 1
19527: PPUSH
19528: LD_VAR 0 2
19532: PPUSH
19533: LD_VAR 0 3
19537: PPUSH
19538: LD_VAR 0 4
19542: PPUSH
19543: LD_VAR 0 5
19547: PPUSH
19548: CALL 85562 0 5
// end ;
19552: PPOPN 5
19554: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
19555: LD_VAR 0 1
19559: PPUSH
19560: LD_VAR 0 2
19564: PPUSH
19565: CALL 85143 0 2
// end ;
19569: PPOPN 2
19571: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
19572: LD_VAR 0 1
19576: PPUSH
19577: LD_VAR 0 2
19581: PPUSH
19582: LD_VAR 0 3
19586: PPUSH
19587: LD_VAR 0 4
19591: PPUSH
19592: CALL 84981 0 4
// end ;
19596: PPOPN 4
19598: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
19599: LD_VAR 0 1
19603: PPUSH
19604: LD_VAR 0 2
19608: PPUSH
19609: LD_VAR 0 3
19613: PPUSH
19614: CALL 84756 0 3
// end ;
19618: PPOPN 3
19620: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
19621: LD_VAR 0 1
19625: PPUSH
19626: LD_VAR 0 2
19630: PPUSH
19631: CALL 84641 0 2
// end ;
19635: PPOPN 2
19637: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
19638: LD_VAR 0 1
19642: PPUSH
19643: LD_VAR 0 2
19647: PPUSH
19648: CALL 88875 0 2
// end ;
19652: PPOPN 2
19654: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
19655: LD_VAR 0 1
19659: PPUSH
19660: LD_VAR 0 2
19664: PPUSH
19665: LD_VAR 0 3
19669: PPUSH
19670: LD_VAR 0 4
19674: PPUSH
19675: CALL 89091 0 4
// end ;
19679: PPOPN 4
19681: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
19682: LD_VAR 0 1
19686: PPUSH
19687: LD_VAR 0 2
19691: PPUSH
19692: CALL 84450 0 2
// end ;
19696: PPOPN 2
19698: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
19699: LD_VAR 0 1
19703: PPUSH
19704: CALL 102510 0 1
// end ; end_of_file
19708: PPOPN 1
19710: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19711: LD_INT 0
19713: PPUSH
19714: PPUSH
// if exist_mode then
19715: LD_VAR 0 2
19719: IFFALSE 19744
// unit := CreateCharacter ( prefix & ident ) else
19721: LD_ADDR_VAR 0 5
19725: PUSH
19726: LD_VAR 0 3
19730: PUSH
19731: LD_VAR 0 1
19735: STR
19736: PPUSH
19737: CALL_OW 34
19741: ST_TO_ADDR
19742: GO 19759
// unit := NewCharacter ( ident ) ;
19744: LD_ADDR_VAR 0 5
19748: PUSH
19749: LD_VAR 0 1
19753: PPUSH
19754: CALL_OW 25
19758: ST_TO_ADDR
// result := unit ;
19759: LD_ADDR_VAR 0 4
19763: PUSH
19764: LD_VAR 0 5
19768: ST_TO_ADDR
// end ;
19769: LD_VAR 0 4
19773: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19774: LD_INT 0
19776: PPUSH
19777: PPUSH
// if not side or not nation then
19778: LD_VAR 0 1
19782: NOT
19783: PUSH
19784: LD_VAR 0 2
19788: NOT
19789: OR
19790: IFFALSE 19794
// exit ;
19792: GO 20562
// case nation of nation_american :
19794: LD_VAR 0 2
19798: PUSH
19799: LD_INT 1
19801: DOUBLE
19802: EQUAL
19803: IFTRUE 19807
19805: GO 20021
19807: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19808: LD_ADDR_VAR 0 4
19812: PUSH
19813: LD_INT 35
19815: PUSH
19816: LD_INT 45
19818: PUSH
19819: LD_INT 46
19821: PUSH
19822: LD_INT 47
19824: PUSH
19825: LD_INT 82
19827: PUSH
19828: LD_INT 83
19830: PUSH
19831: LD_INT 84
19833: PUSH
19834: LD_INT 85
19836: PUSH
19837: LD_INT 86
19839: PUSH
19840: LD_INT 1
19842: PUSH
19843: LD_INT 2
19845: PUSH
19846: LD_INT 6
19848: PUSH
19849: LD_INT 15
19851: PUSH
19852: LD_INT 16
19854: PUSH
19855: LD_INT 7
19857: PUSH
19858: LD_INT 12
19860: PUSH
19861: LD_INT 13
19863: PUSH
19864: LD_INT 10
19866: PUSH
19867: LD_INT 14
19869: PUSH
19870: LD_INT 20
19872: PUSH
19873: LD_INT 21
19875: PUSH
19876: LD_INT 22
19878: PUSH
19879: LD_INT 25
19881: PUSH
19882: LD_INT 32
19884: PUSH
19885: LD_INT 27
19887: PUSH
19888: LD_INT 36
19890: PUSH
19891: LD_INT 69
19893: PUSH
19894: LD_INT 39
19896: PUSH
19897: LD_INT 34
19899: PUSH
19900: LD_INT 40
19902: PUSH
19903: LD_INT 48
19905: PUSH
19906: LD_INT 49
19908: PUSH
19909: LD_INT 50
19911: PUSH
19912: LD_INT 51
19914: PUSH
19915: LD_INT 52
19917: PUSH
19918: LD_INT 53
19920: PUSH
19921: LD_INT 54
19923: PUSH
19924: LD_INT 55
19926: PUSH
19927: LD_INT 56
19929: PUSH
19930: LD_INT 57
19932: PUSH
19933: LD_INT 58
19935: PUSH
19936: LD_INT 59
19938: PUSH
19939: LD_INT 60
19941: PUSH
19942: LD_INT 61
19944: PUSH
19945: LD_INT 62
19947: PUSH
19948: LD_INT 80
19950: PUSH
19951: LD_INT 82
19953: PUSH
19954: LD_INT 83
19956: PUSH
19957: LD_INT 84
19959: PUSH
19960: LD_INT 85
19962: PUSH
19963: LD_INT 86
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: ST_TO_ADDR
20019: GO 20486
20021: LD_INT 2
20023: DOUBLE
20024: EQUAL
20025: IFTRUE 20029
20027: GO 20255
20029: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
20030: LD_ADDR_VAR 0 4
20034: PUSH
20035: LD_INT 35
20037: PUSH
20038: LD_INT 45
20040: PUSH
20041: LD_INT 46
20043: PUSH
20044: LD_INT 47
20046: PUSH
20047: LD_INT 82
20049: PUSH
20050: LD_INT 83
20052: PUSH
20053: LD_INT 84
20055: PUSH
20056: LD_INT 85
20058: PUSH
20059: LD_INT 87
20061: PUSH
20062: LD_INT 70
20064: PUSH
20065: LD_INT 1
20067: PUSH
20068: LD_INT 11
20070: PUSH
20071: LD_INT 3
20073: PUSH
20074: LD_INT 4
20076: PUSH
20077: LD_INT 5
20079: PUSH
20080: LD_INT 6
20082: PUSH
20083: LD_INT 15
20085: PUSH
20086: LD_INT 18
20088: PUSH
20089: LD_INT 7
20091: PUSH
20092: LD_INT 17
20094: PUSH
20095: LD_INT 8
20097: PUSH
20098: LD_INT 20
20100: PUSH
20101: LD_INT 21
20103: PUSH
20104: LD_INT 22
20106: PUSH
20107: LD_INT 72
20109: PUSH
20110: LD_INT 26
20112: PUSH
20113: LD_INT 69
20115: PUSH
20116: LD_INT 39
20118: PUSH
20119: LD_INT 40
20121: PUSH
20122: LD_INT 41
20124: PUSH
20125: LD_INT 42
20127: PUSH
20128: LD_INT 43
20130: PUSH
20131: LD_INT 48
20133: PUSH
20134: LD_INT 49
20136: PUSH
20137: LD_INT 50
20139: PUSH
20140: LD_INT 51
20142: PUSH
20143: LD_INT 52
20145: PUSH
20146: LD_INT 53
20148: PUSH
20149: LD_INT 54
20151: PUSH
20152: LD_INT 55
20154: PUSH
20155: LD_INT 56
20157: PUSH
20158: LD_INT 60
20160: PUSH
20161: LD_INT 61
20163: PUSH
20164: LD_INT 62
20166: PUSH
20167: LD_INT 66
20169: PUSH
20170: LD_INT 67
20172: PUSH
20173: LD_INT 68
20175: PUSH
20176: LD_INT 81
20178: PUSH
20179: LD_INT 82
20181: PUSH
20182: LD_INT 83
20184: PUSH
20185: LD_INT 84
20187: PUSH
20188: LD_INT 85
20190: PUSH
20191: LD_INT 87
20193: PUSH
20194: LD_INT 88
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: ST_TO_ADDR
20253: GO 20486
20255: LD_INT 3
20257: DOUBLE
20258: EQUAL
20259: IFTRUE 20263
20261: GO 20485
20263: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
20264: LD_ADDR_VAR 0 4
20268: PUSH
20269: LD_INT 46
20271: PUSH
20272: LD_INT 47
20274: PUSH
20275: LD_INT 1
20277: PUSH
20278: LD_INT 2
20280: PUSH
20281: LD_INT 82
20283: PUSH
20284: LD_INT 83
20286: PUSH
20287: LD_INT 84
20289: PUSH
20290: LD_INT 85
20292: PUSH
20293: LD_INT 86
20295: PUSH
20296: LD_INT 11
20298: PUSH
20299: LD_INT 9
20301: PUSH
20302: LD_INT 20
20304: PUSH
20305: LD_INT 19
20307: PUSH
20308: LD_INT 21
20310: PUSH
20311: LD_INT 24
20313: PUSH
20314: LD_INT 22
20316: PUSH
20317: LD_INT 25
20319: PUSH
20320: LD_INT 28
20322: PUSH
20323: LD_INT 29
20325: PUSH
20326: LD_INT 30
20328: PUSH
20329: LD_INT 31
20331: PUSH
20332: LD_INT 37
20334: PUSH
20335: LD_INT 38
20337: PUSH
20338: LD_INT 32
20340: PUSH
20341: LD_INT 27
20343: PUSH
20344: LD_INT 33
20346: PUSH
20347: LD_INT 69
20349: PUSH
20350: LD_INT 39
20352: PUSH
20353: LD_INT 34
20355: PUSH
20356: LD_INT 40
20358: PUSH
20359: LD_INT 71
20361: PUSH
20362: LD_INT 23
20364: PUSH
20365: LD_INT 44
20367: PUSH
20368: LD_INT 48
20370: PUSH
20371: LD_INT 49
20373: PUSH
20374: LD_INT 50
20376: PUSH
20377: LD_INT 51
20379: PUSH
20380: LD_INT 52
20382: PUSH
20383: LD_INT 53
20385: PUSH
20386: LD_INT 54
20388: PUSH
20389: LD_INT 55
20391: PUSH
20392: LD_INT 56
20394: PUSH
20395: LD_INT 57
20397: PUSH
20398: LD_INT 58
20400: PUSH
20401: LD_INT 59
20403: PUSH
20404: LD_INT 63
20406: PUSH
20407: LD_INT 64
20409: PUSH
20410: LD_INT 65
20412: PUSH
20413: LD_INT 82
20415: PUSH
20416: LD_INT 83
20418: PUSH
20419: LD_INT 84
20421: PUSH
20422: LD_INT 85
20424: PUSH
20425: LD_INT 86
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: ST_TO_ADDR
20483: GO 20486
20485: POP
// if state > - 1 and state < 3 then
20486: LD_VAR 0 3
20490: PUSH
20491: LD_INT 1
20493: NEG
20494: GREATER
20495: PUSH
20496: LD_VAR 0 3
20500: PUSH
20501: LD_INT 3
20503: LESS
20504: AND
20505: IFFALSE 20562
// for i in result do
20507: LD_ADDR_VAR 0 5
20511: PUSH
20512: LD_VAR 0 4
20516: PUSH
20517: FOR_IN
20518: IFFALSE 20560
// if GetTech ( i , side ) <> state then
20520: LD_VAR 0 5
20524: PPUSH
20525: LD_VAR 0 1
20529: PPUSH
20530: CALL_OW 321
20534: PUSH
20535: LD_VAR 0 3
20539: NONEQUAL
20540: IFFALSE 20558
// result := result diff i ;
20542: LD_ADDR_VAR 0 4
20546: PUSH
20547: LD_VAR 0 4
20551: PUSH
20552: LD_VAR 0 5
20556: DIFF
20557: ST_TO_ADDR
20558: GO 20517
20560: POP
20561: POP
// end ;
20562: LD_VAR 0 4
20566: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20567: LD_INT 0
20569: PPUSH
20570: PPUSH
20571: PPUSH
// result := true ;
20572: LD_ADDR_VAR 0 3
20576: PUSH
20577: LD_INT 1
20579: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20580: LD_ADDR_VAR 0 5
20584: PUSH
20585: LD_VAR 0 2
20589: PPUSH
20590: CALL_OW 480
20594: ST_TO_ADDR
// if not tmp then
20595: LD_VAR 0 5
20599: NOT
20600: IFFALSE 20604
// exit ;
20602: GO 20653
// for i in tmp do
20604: LD_ADDR_VAR 0 4
20608: PUSH
20609: LD_VAR 0 5
20613: PUSH
20614: FOR_IN
20615: IFFALSE 20651
// if GetTech ( i , side ) <> state_researched then
20617: LD_VAR 0 4
20621: PPUSH
20622: LD_VAR 0 1
20626: PPUSH
20627: CALL_OW 321
20631: PUSH
20632: LD_INT 2
20634: NONEQUAL
20635: IFFALSE 20649
// begin result := false ;
20637: LD_ADDR_VAR 0 3
20641: PUSH
20642: LD_INT 0
20644: ST_TO_ADDR
// exit ;
20645: POP
20646: POP
20647: GO 20653
// end ;
20649: GO 20614
20651: POP
20652: POP
// end ;
20653: LD_VAR 0 3
20657: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20658: LD_INT 0
20660: PPUSH
20661: PPUSH
20662: PPUSH
20663: PPUSH
20664: PPUSH
20665: PPUSH
20666: PPUSH
20667: PPUSH
20668: PPUSH
20669: PPUSH
20670: PPUSH
20671: PPUSH
20672: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20673: LD_VAR 0 1
20677: NOT
20678: PUSH
20679: LD_VAR 0 1
20683: PPUSH
20684: CALL_OW 257
20688: PUSH
20689: LD_INT 9
20691: NONEQUAL
20692: OR
20693: IFFALSE 20697
// exit ;
20695: GO 21270
// side := GetSide ( unit ) ;
20697: LD_ADDR_VAR 0 9
20701: PUSH
20702: LD_VAR 0 1
20706: PPUSH
20707: CALL_OW 255
20711: ST_TO_ADDR
// tech_space := tech_spacanom ;
20712: LD_ADDR_VAR 0 12
20716: PUSH
20717: LD_INT 29
20719: ST_TO_ADDR
// tech_time := tech_taurad ;
20720: LD_ADDR_VAR 0 13
20724: PUSH
20725: LD_INT 28
20727: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20728: LD_ADDR_VAR 0 11
20732: PUSH
20733: LD_VAR 0 1
20737: PPUSH
20738: CALL_OW 310
20742: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20743: LD_VAR 0 11
20747: PPUSH
20748: CALL_OW 247
20752: PUSH
20753: LD_INT 2
20755: EQUAL
20756: IFFALSE 20760
// exit ;
20758: GO 21270
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20760: LD_ADDR_VAR 0 8
20764: PUSH
20765: LD_INT 81
20767: PUSH
20768: LD_VAR 0 9
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 3
20779: PUSH
20780: LD_INT 21
20782: PUSH
20783: LD_INT 3
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PPUSH
20798: CALL_OW 69
20802: ST_TO_ADDR
// if not tmp then
20803: LD_VAR 0 8
20807: NOT
20808: IFFALSE 20812
// exit ;
20810: GO 21270
// if in_unit then
20812: LD_VAR 0 11
20816: IFFALSE 20840
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20818: LD_ADDR_VAR 0 10
20822: PUSH
20823: LD_VAR 0 8
20827: PPUSH
20828: LD_VAR 0 11
20832: PPUSH
20833: CALL_OW 74
20837: ST_TO_ADDR
20838: GO 20860
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20840: LD_ADDR_VAR 0 10
20844: PUSH
20845: LD_VAR 0 8
20849: PPUSH
20850: LD_VAR 0 1
20854: PPUSH
20855: CALL_OW 74
20859: ST_TO_ADDR
// if not enemy then
20860: LD_VAR 0 10
20864: NOT
20865: IFFALSE 20869
// exit ;
20867: GO 21270
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20869: LD_VAR 0 11
20873: PUSH
20874: LD_VAR 0 11
20878: PPUSH
20879: LD_VAR 0 10
20883: PPUSH
20884: CALL_OW 296
20888: PUSH
20889: LD_INT 13
20891: GREATER
20892: AND
20893: PUSH
20894: LD_VAR 0 1
20898: PPUSH
20899: LD_VAR 0 10
20903: PPUSH
20904: CALL_OW 296
20908: PUSH
20909: LD_INT 12
20911: GREATER
20912: OR
20913: IFFALSE 20917
// exit ;
20915: GO 21270
// missile := [ 1 ] ;
20917: LD_ADDR_VAR 0 14
20921: PUSH
20922: LD_INT 1
20924: PUSH
20925: EMPTY
20926: LIST
20927: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20928: LD_VAR 0 9
20932: PPUSH
20933: LD_VAR 0 12
20937: PPUSH
20938: CALL_OW 325
20942: IFFALSE 20971
// missile := Insert ( missile , missile + 1 , 2 ) ;
20944: LD_ADDR_VAR 0 14
20948: PUSH
20949: LD_VAR 0 14
20953: PPUSH
20954: LD_VAR 0 14
20958: PUSH
20959: LD_INT 1
20961: PLUS
20962: PPUSH
20963: LD_INT 2
20965: PPUSH
20966: CALL_OW 2
20970: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20971: LD_VAR 0 9
20975: PPUSH
20976: LD_VAR 0 13
20980: PPUSH
20981: CALL_OW 325
20985: PUSH
20986: LD_VAR 0 10
20990: PPUSH
20991: CALL_OW 255
20995: PPUSH
20996: LD_VAR 0 13
21000: PPUSH
21001: CALL_OW 325
21005: NOT
21006: AND
21007: IFFALSE 21036
// missile := Insert ( missile , missile + 1 , 3 ) ;
21009: LD_ADDR_VAR 0 14
21013: PUSH
21014: LD_VAR 0 14
21018: PPUSH
21019: LD_VAR 0 14
21023: PUSH
21024: LD_INT 1
21026: PLUS
21027: PPUSH
21028: LD_INT 3
21030: PPUSH
21031: CALL_OW 2
21035: ST_TO_ADDR
// if missile < 2 then
21036: LD_VAR 0 14
21040: PUSH
21041: LD_INT 2
21043: LESS
21044: IFFALSE 21048
// exit ;
21046: GO 21270
// x := GetX ( enemy ) ;
21048: LD_ADDR_VAR 0 4
21052: PUSH
21053: LD_VAR 0 10
21057: PPUSH
21058: CALL_OW 250
21062: ST_TO_ADDR
// y := GetY ( enemy ) ;
21063: LD_ADDR_VAR 0 5
21067: PUSH
21068: LD_VAR 0 10
21072: PPUSH
21073: CALL_OW 251
21077: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21078: LD_ADDR_VAR 0 6
21082: PUSH
21083: LD_VAR 0 4
21087: PUSH
21088: LD_INT 1
21090: NEG
21091: PPUSH
21092: LD_INT 1
21094: PPUSH
21095: CALL_OW 12
21099: PLUS
21100: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21101: LD_ADDR_VAR 0 7
21105: PUSH
21106: LD_VAR 0 5
21110: PUSH
21111: LD_INT 1
21113: NEG
21114: PPUSH
21115: LD_INT 1
21117: PPUSH
21118: CALL_OW 12
21122: PLUS
21123: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21124: LD_VAR 0 6
21128: PPUSH
21129: LD_VAR 0 7
21133: PPUSH
21134: CALL_OW 488
21138: NOT
21139: IFFALSE 21161
// begin _x := x ;
21141: LD_ADDR_VAR 0 6
21145: PUSH
21146: LD_VAR 0 4
21150: ST_TO_ADDR
// _y := y ;
21151: LD_ADDR_VAR 0 7
21155: PUSH
21156: LD_VAR 0 5
21160: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21161: LD_ADDR_VAR 0 3
21165: PUSH
21166: LD_INT 1
21168: PPUSH
21169: LD_VAR 0 14
21173: PPUSH
21174: CALL_OW 12
21178: ST_TO_ADDR
// case i of 1 :
21179: LD_VAR 0 3
21183: PUSH
21184: LD_INT 1
21186: DOUBLE
21187: EQUAL
21188: IFTRUE 21192
21190: GO 21209
21192: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21193: LD_VAR 0 1
21197: PPUSH
21198: LD_VAR 0 10
21202: PPUSH
21203: CALL_OW 115
21207: GO 21270
21209: LD_INT 2
21211: DOUBLE
21212: EQUAL
21213: IFTRUE 21217
21215: GO 21239
21217: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21218: LD_VAR 0 1
21222: PPUSH
21223: LD_VAR 0 6
21227: PPUSH
21228: LD_VAR 0 7
21232: PPUSH
21233: CALL_OW 153
21237: GO 21270
21239: LD_INT 3
21241: DOUBLE
21242: EQUAL
21243: IFTRUE 21247
21245: GO 21269
21247: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21248: LD_VAR 0 1
21252: PPUSH
21253: LD_VAR 0 6
21257: PPUSH
21258: LD_VAR 0 7
21262: PPUSH
21263: CALL_OW 154
21267: GO 21270
21269: POP
// end ;
21270: LD_VAR 0 2
21274: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21275: LD_INT 0
21277: PPUSH
21278: PPUSH
21279: PPUSH
21280: PPUSH
21281: PPUSH
21282: PPUSH
// if not unit or not building then
21283: LD_VAR 0 1
21287: NOT
21288: PUSH
21289: LD_VAR 0 2
21293: NOT
21294: OR
21295: IFFALSE 21299
// exit ;
21297: GO 21457
// x := GetX ( building ) ;
21299: LD_ADDR_VAR 0 5
21303: PUSH
21304: LD_VAR 0 2
21308: PPUSH
21309: CALL_OW 250
21313: ST_TO_ADDR
// y := GetY ( building ) ;
21314: LD_ADDR_VAR 0 6
21318: PUSH
21319: LD_VAR 0 2
21323: PPUSH
21324: CALL_OW 251
21328: ST_TO_ADDR
// for i = 0 to 5 do
21329: LD_ADDR_VAR 0 4
21333: PUSH
21334: DOUBLE
21335: LD_INT 0
21337: DEC
21338: ST_TO_ADDR
21339: LD_INT 5
21341: PUSH
21342: FOR_TO
21343: IFFALSE 21455
// begin _x := ShiftX ( x , i , 3 ) ;
21345: LD_ADDR_VAR 0 7
21349: PUSH
21350: LD_VAR 0 5
21354: PPUSH
21355: LD_VAR 0 4
21359: PPUSH
21360: LD_INT 3
21362: PPUSH
21363: CALL_OW 272
21367: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21368: LD_ADDR_VAR 0 8
21372: PUSH
21373: LD_VAR 0 6
21377: PPUSH
21378: LD_VAR 0 4
21382: PPUSH
21383: LD_INT 3
21385: PPUSH
21386: CALL_OW 273
21390: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21391: LD_VAR 0 7
21395: PPUSH
21396: LD_VAR 0 8
21400: PPUSH
21401: CALL_OW 488
21405: NOT
21406: IFFALSE 21410
// continue ;
21408: GO 21342
// if HexInfo ( _x , _y ) = 0 then
21410: LD_VAR 0 7
21414: PPUSH
21415: LD_VAR 0 8
21419: PPUSH
21420: CALL_OW 428
21424: PUSH
21425: LD_INT 0
21427: EQUAL
21428: IFFALSE 21453
// begin ComMoveXY ( unit , _x , _y ) ;
21430: LD_VAR 0 1
21434: PPUSH
21435: LD_VAR 0 7
21439: PPUSH
21440: LD_VAR 0 8
21444: PPUSH
21445: CALL_OW 111
// exit ;
21449: POP
21450: POP
21451: GO 21457
// end ; end ;
21453: GO 21342
21455: POP
21456: POP
// end ;
21457: LD_VAR 0 3
21461: RET
// export function ScanBase ( side , base_area ) ; begin
21462: LD_INT 0
21464: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21465: LD_ADDR_VAR 0 3
21469: PUSH
21470: LD_VAR 0 2
21474: PPUSH
21475: LD_INT 81
21477: PUSH
21478: LD_VAR 0 1
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PPUSH
21487: CALL_OW 70
21491: ST_TO_ADDR
// end ;
21492: LD_VAR 0 3
21496: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21497: LD_INT 0
21499: PPUSH
21500: PPUSH
21501: PPUSH
21502: PPUSH
// result := false ;
21503: LD_ADDR_VAR 0 2
21507: PUSH
21508: LD_INT 0
21510: ST_TO_ADDR
// side := GetSide ( unit ) ;
21511: LD_ADDR_VAR 0 3
21515: PUSH
21516: LD_VAR 0 1
21520: PPUSH
21521: CALL_OW 255
21525: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21526: LD_ADDR_VAR 0 4
21530: PUSH
21531: LD_VAR 0 1
21535: PPUSH
21536: CALL_OW 248
21540: ST_TO_ADDR
// case nat of 1 :
21541: LD_VAR 0 4
21545: PUSH
21546: LD_INT 1
21548: DOUBLE
21549: EQUAL
21550: IFTRUE 21554
21552: GO 21565
21554: POP
// tech := tech_lassight ; 2 :
21555: LD_ADDR_VAR 0 5
21559: PUSH
21560: LD_INT 12
21562: ST_TO_ADDR
21563: GO 21604
21565: LD_INT 2
21567: DOUBLE
21568: EQUAL
21569: IFTRUE 21573
21571: GO 21584
21573: POP
// tech := tech_mortar ; 3 :
21574: LD_ADDR_VAR 0 5
21578: PUSH
21579: LD_INT 41
21581: ST_TO_ADDR
21582: GO 21604
21584: LD_INT 3
21586: DOUBLE
21587: EQUAL
21588: IFTRUE 21592
21590: GO 21603
21592: POP
// tech := tech_bazooka ; end ;
21593: LD_ADDR_VAR 0 5
21597: PUSH
21598: LD_INT 44
21600: ST_TO_ADDR
21601: GO 21604
21603: POP
// if Researched ( side , tech ) then
21604: LD_VAR 0 3
21608: PPUSH
21609: LD_VAR 0 5
21613: PPUSH
21614: CALL_OW 325
21618: IFFALSE 21645
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21620: LD_ADDR_VAR 0 2
21624: PUSH
21625: LD_INT 5
21627: PUSH
21628: LD_INT 8
21630: PUSH
21631: LD_INT 9
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: LIST
21638: PUSH
21639: LD_VAR 0 4
21643: ARRAY
21644: ST_TO_ADDR
// end ;
21645: LD_VAR 0 2
21649: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21650: LD_INT 0
21652: PPUSH
21653: PPUSH
21654: PPUSH
// if not mines then
21655: LD_VAR 0 2
21659: NOT
21660: IFFALSE 21664
// exit ;
21662: GO 21808
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21664: LD_ADDR_VAR 0 5
21668: PUSH
21669: LD_INT 81
21671: PUSH
21672: LD_VAR 0 1
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: PUSH
21681: LD_INT 3
21683: PUSH
21684: LD_INT 21
21686: PUSH
21687: LD_INT 3
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PPUSH
21702: CALL_OW 69
21706: ST_TO_ADDR
// for i in mines do
21707: LD_ADDR_VAR 0 4
21711: PUSH
21712: LD_VAR 0 2
21716: PUSH
21717: FOR_IN
21718: IFFALSE 21806
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21720: LD_VAR 0 4
21724: PUSH
21725: LD_INT 1
21727: ARRAY
21728: PPUSH
21729: LD_VAR 0 4
21733: PUSH
21734: LD_INT 2
21736: ARRAY
21737: PPUSH
21738: CALL_OW 458
21742: NOT
21743: IFFALSE 21747
// continue ;
21745: GO 21717
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21747: LD_VAR 0 4
21751: PUSH
21752: LD_INT 1
21754: ARRAY
21755: PPUSH
21756: LD_VAR 0 4
21760: PUSH
21761: LD_INT 2
21763: ARRAY
21764: PPUSH
21765: CALL_OW 428
21769: PUSH
21770: LD_VAR 0 5
21774: IN
21775: IFFALSE 21804
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21777: LD_VAR 0 4
21781: PUSH
21782: LD_INT 1
21784: ARRAY
21785: PPUSH
21786: LD_VAR 0 4
21790: PUSH
21791: LD_INT 2
21793: ARRAY
21794: PPUSH
21795: LD_VAR 0 1
21799: PPUSH
21800: CALL_OW 456
// end ;
21804: GO 21717
21806: POP
21807: POP
// end ;
21808: LD_VAR 0 3
21812: RET
// export function Count ( array ) ; var i ; begin
21813: LD_INT 0
21815: PPUSH
21816: PPUSH
// result := 0 ;
21817: LD_ADDR_VAR 0 2
21821: PUSH
21822: LD_INT 0
21824: ST_TO_ADDR
// for i in array do
21825: LD_ADDR_VAR 0 3
21829: PUSH
21830: LD_VAR 0 1
21834: PUSH
21835: FOR_IN
21836: IFFALSE 21860
// if i then
21838: LD_VAR 0 3
21842: IFFALSE 21858
// result := result + 1 ;
21844: LD_ADDR_VAR 0 2
21848: PUSH
21849: LD_VAR 0 2
21853: PUSH
21854: LD_INT 1
21856: PLUS
21857: ST_TO_ADDR
21858: GO 21835
21860: POP
21861: POP
// end ;
21862: LD_VAR 0 2
21866: RET
// export function IsEmpty ( building ) ; begin
21867: LD_INT 0
21869: PPUSH
// if not building then
21870: LD_VAR 0 1
21874: NOT
21875: IFFALSE 21879
// exit ;
21877: GO 21922
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
21879: LD_ADDR_VAR 0 2
21883: PUSH
21884: LD_VAR 0 1
21888: PUSH
21889: LD_INT 22
21891: PUSH
21892: LD_VAR 0 1
21896: PPUSH
21897: CALL_OW 255
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: PUSH
21906: LD_INT 58
21908: PUSH
21909: EMPTY
21910: LIST
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: PPUSH
21916: CALL_OW 69
21920: IN
21921: ST_TO_ADDR
// end ;
21922: LD_VAR 0 2
21926: RET
// export function IsNotFull ( building ) ; begin
21927: LD_INT 0
21929: PPUSH
// if not building then
21930: LD_VAR 0 1
21934: NOT
21935: IFFALSE 21939
// exit ;
21937: GO 21958
// result := UnitsInside ( building ) < 6 ;
21939: LD_ADDR_VAR 0 2
21943: PUSH
21944: LD_VAR 0 1
21948: PPUSH
21949: CALL_OW 313
21953: PUSH
21954: LD_INT 6
21956: LESS
21957: ST_TO_ADDR
// end ;
21958: LD_VAR 0 2
21962: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
21963: LD_INT 0
21965: PPUSH
21966: PPUSH
21967: PPUSH
21968: PPUSH
// tmp := [ ] ;
21969: LD_ADDR_VAR 0 3
21973: PUSH
21974: EMPTY
21975: ST_TO_ADDR
// list := [ ] ;
21976: LD_ADDR_VAR 0 5
21980: PUSH
21981: EMPTY
21982: ST_TO_ADDR
// for i = 16 to 25 do
21983: LD_ADDR_VAR 0 4
21987: PUSH
21988: DOUBLE
21989: LD_INT 16
21991: DEC
21992: ST_TO_ADDR
21993: LD_INT 25
21995: PUSH
21996: FOR_TO
21997: IFFALSE 22070
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
21999: LD_ADDR_VAR 0 3
22003: PUSH
22004: LD_VAR 0 3
22008: PUSH
22009: LD_INT 22
22011: PUSH
22012: LD_VAR 0 1
22016: PPUSH
22017: CALL_OW 255
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PUSH
22026: LD_INT 91
22028: PUSH
22029: LD_VAR 0 1
22033: PUSH
22034: LD_INT 6
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: LIST
22041: PUSH
22042: LD_INT 30
22044: PUSH
22045: LD_VAR 0 4
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: LIST
22058: PUSH
22059: EMPTY
22060: LIST
22061: PPUSH
22062: CALL_OW 69
22066: ADD
22067: ST_TO_ADDR
22068: GO 21996
22070: POP
22071: POP
// for i = 1 to tmp do
22072: LD_ADDR_VAR 0 4
22076: PUSH
22077: DOUBLE
22078: LD_INT 1
22080: DEC
22081: ST_TO_ADDR
22082: LD_VAR 0 3
22086: PUSH
22087: FOR_TO
22088: IFFALSE 22176
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
22090: LD_ADDR_VAR 0 5
22094: PUSH
22095: LD_VAR 0 5
22099: PUSH
22100: LD_VAR 0 3
22104: PUSH
22105: LD_VAR 0 4
22109: ARRAY
22110: PPUSH
22111: CALL_OW 266
22115: PUSH
22116: LD_VAR 0 3
22120: PUSH
22121: LD_VAR 0 4
22125: ARRAY
22126: PPUSH
22127: CALL_OW 250
22131: PUSH
22132: LD_VAR 0 3
22136: PUSH
22137: LD_VAR 0 4
22141: ARRAY
22142: PPUSH
22143: CALL_OW 251
22147: PUSH
22148: LD_VAR 0 3
22152: PUSH
22153: LD_VAR 0 4
22157: ARRAY
22158: PPUSH
22159: CALL_OW 254
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: PUSH
22170: EMPTY
22171: LIST
22172: ADD
22173: ST_TO_ADDR
22174: GO 22087
22176: POP
22177: POP
// result := list ;
22178: LD_ADDR_VAR 0 2
22182: PUSH
22183: LD_VAR 0 5
22187: ST_TO_ADDR
// end ;
22188: LD_VAR 0 2
22192: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
22193: LD_INT 0
22195: PPUSH
22196: PPUSH
22197: PPUSH
22198: PPUSH
22199: PPUSH
22200: PPUSH
22201: PPUSH
// if not factory then
22202: LD_VAR 0 1
22206: NOT
22207: IFFALSE 22211
// exit ;
22209: GO 22804
// if control = control_apeman then
22211: LD_VAR 0 4
22215: PUSH
22216: LD_INT 5
22218: EQUAL
22219: IFFALSE 22328
// begin tmp := UnitsInside ( factory ) ;
22221: LD_ADDR_VAR 0 8
22225: PUSH
22226: LD_VAR 0 1
22230: PPUSH
22231: CALL_OW 313
22235: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22236: LD_VAR 0 8
22240: PPUSH
22241: LD_INT 25
22243: PUSH
22244: LD_INT 12
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: PPUSH
22251: CALL_OW 72
22255: NOT
22256: IFFALSE 22266
// control := control_manual ;
22258: LD_ADDR_VAR 0 4
22262: PUSH
22263: LD_INT 1
22265: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
22266: LD_ADDR_VAR 0 8
22270: PUSH
22271: LD_VAR 0 1
22275: PPUSH
22276: CALL 21963 0 1
22280: ST_TO_ADDR
// if tmp then
22281: LD_VAR 0 8
22285: IFFALSE 22328
// begin for i in tmp do
22287: LD_ADDR_VAR 0 7
22291: PUSH
22292: LD_VAR 0 8
22296: PUSH
22297: FOR_IN
22298: IFFALSE 22326
// if i [ 1 ] = b_ext_radio then
22300: LD_VAR 0 7
22304: PUSH
22305: LD_INT 1
22307: ARRAY
22308: PUSH
22309: LD_INT 22
22311: EQUAL
22312: IFFALSE 22324
// begin control := control_remote ;
22314: LD_ADDR_VAR 0 4
22318: PUSH
22319: LD_INT 2
22321: ST_TO_ADDR
// break ;
22322: GO 22326
// end ;
22324: GO 22297
22326: POP
22327: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22328: LD_VAR 0 1
22332: PPUSH
22333: LD_VAR 0 2
22337: PPUSH
22338: LD_VAR 0 3
22342: PPUSH
22343: LD_VAR 0 4
22347: PPUSH
22348: LD_VAR 0 5
22352: PPUSH
22353: CALL_OW 448
22357: IFFALSE 22392
// begin result := [ chassis , engine , control , weapon ] ;
22359: LD_ADDR_VAR 0 6
22363: PUSH
22364: LD_VAR 0 2
22368: PUSH
22369: LD_VAR 0 3
22373: PUSH
22374: LD_VAR 0 4
22378: PUSH
22379: LD_VAR 0 5
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: ST_TO_ADDR
// exit ;
22390: GO 22804
// end ; _chassis := AvailableChassisList ( factory ) ;
22392: LD_ADDR_VAR 0 9
22396: PUSH
22397: LD_VAR 0 1
22401: PPUSH
22402: CALL_OW 475
22406: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22407: LD_ADDR_VAR 0 11
22411: PUSH
22412: LD_VAR 0 1
22416: PPUSH
22417: CALL_OW 476
22421: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22422: LD_ADDR_VAR 0 12
22426: PUSH
22427: LD_VAR 0 1
22431: PPUSH
22432: CALL_OW 477
22436: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22437: LD_ADDR_VAR 0 10
22441: PUSH
22442: LD_VAR 0 1
22446: PPUSH
22447: CALL_OW 478
22451: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22452: LD_VAR 0 9
22456: NOT
22457: PUSH
22458: LD_VAR 0 11
22462: NOT
22463: OR
22464: PUSH
22465: LD_VAR 0 12
22469: NOT
22470: OR
22471: PUSH
22472: LD_VAR 0 10
22476: NOT
22477: OR
22478: IFFALSE 22513
// begin result := [ chassis , engine , control , weapon ] ;
22480: LD_ADDR_VAR 0 6
22484: PUSH
22485: LD_VAR 0 2
22489: PUSH
22490: LD_VAR 0 3
22494: PUSH
22495: LD_VAR 0 4
22499: PUSH
22500: LD_VAR 0 5
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: ST_TO_ADDR
// exit ;
22511: GO 22804
// end ; if not chassis in _chassis then
22513: LD_VAR 0 2
22517: PUSH
22518: LD_VAR 0 9
22522: IN
22523: NOT
22524: IFFALSE 22550
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22526: LD_ADDR_VAR 0 2
22530: PUSH
22531: LD_VAR 0 9
22535: PUSH
22536: LD_INT 1
22538: PPUSH
22539: LD_VAR 0 9
22543: PPUSH
22544: CALL_OW 12
22548: ARRAY
22549: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22550: LD_VAR 0 2
22554: PPUSH
22555: LD_VAR 0 3
22559: PPUSH
22560: CALL 22809 0 2
22564: NOT
22565: IFFALSE 22624
// repeat engine := _engine [ 1 ] ;
22567: LD_ADDR_VAR 0 3
22571: PUSH
22572: LD_VAR 0 11
22576: PUSH
22577: LD_INT 1
22579: ARRAY
22580: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22581: LD_ADDR_VAR 0 11
22585: PUSH
22586: LD_VAR 0 11
22590: PPUSH
22591: LD_INT 1
22593: PPUSH
22594: CALL_OW 3
22598: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22599: LD_VAR 0 2
22603: PPUSH
22604: LD_VAR 0 3
22608: PPUSH
22609: CALL 22809 0 2
22613: PUSH
22614: LD_VAR 0 11
22618: PUSH
22619: EMPTY
22620: EQUAL
22621: OR
22622: IFFALSE 22567
// if not control in _control then
22624: LD_VAR 0 4
22628: PUSH
22629: LD_VAR 0 12
22633: IN
22634: NOT
22635: IFFALSE 22661
// control := _control [ rand ( 1 , _control ) ] ;
22637: LD_ADDR_VAR 0 4
22641: PUSH
22642: LD_VAR 0 12
22646: PUSH
22647: LD_INT 1
22649: PPUSH
22650: LD_VAR 0 12
22654: PPUSH
22655: CALL_OW 12
22659: ARRAY
22660: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22661: LD_VAR 0 2
22665: PPUSH
22666: LD_VAR 0 5
22670: PPUSH
22671: CALL 23029 0 2
22675: NOT
22676: IFFALSE 22735
// repeat weapon := _weapon [ 1 ] ;
22678: LD_ADDR_VAR 0 5
22682: PUSH
22683: LD_VAR 0 10
22687: PUSH
22688: LD_INT 1
22690: ARRAY
22691: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22692: LD_ADDR_VAR 0 10
22696: PUSH
22697: LD_VAR 0 10
22701: PPUSH
22702: LD_INT 1
22704: PPUSH
22705: CALL_OW 3
22709: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22710: LD_VAR 0 2
22714: PPUSH
22715: LD_VAR 0 5
22719: PPUSH
22720: CALL 23029 0 2
22724: PUSH
22725: LD_VAR 0 10
22729: PUSH
22730: EMPTY
22731: EQUAL
22732: OR
22733: IFFALSE 22678
// result := [ ] ;
22735: LD_ADDR_VAR 0 6
22739: PUSH
22740: EMPTY
22741: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22742: LD_VAR 0 1
22746: PPUSH
22747: LD_VAR 0 2
22751: PPUSH
22752: LD_VAR 0 3
22756: PPUSH
22757: LD_VAR 0 4
22761: PPUSH
22762: LD_VAR 0 5
22766: PPUSH
22767: CALL_OW 448
22771: IFFALSE 22804
// result := [ chassis , engine , control , weapon ] ;
22773: LD_ADDR_VAR 0 6
22777: PUSH
22778: LD_VAR 0 2
22782: PUSH
22783: LD_VAR 0 3
22787: PUSH
22788: LD_VAR 0 4
22792: PUSH
22793: LD_VAR 0 5
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: ST_TO_ADDR
// end ;
22804: LD_VAR 0 6
22808: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22809: LD_INT 0
22811: PPUSH
// if not chassis or not engine then
22812: LD_VAR 0 1
22816: NOT
22817: PUSH
22818: LD_VAR 0 2
22822: NOT
22823: OR
22824: IFFALSE 22828
// exit ;
22826: GO 23024
// case engine of engine_solar :
22828: LD_VAR 0 2
22832: PUSH
22833: LD_INT 2
22835: DOUBLE
22836: EQUAL
22837: IFTRUE 22841
22839: GO 22879
22841: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
22842: LD_ADDR_VAR 0 3
22846: PUSH
22847: LD_INT 11
22849: PUSH
22850: LD_INT 12
22852: PUSH
22853: LD_INT 13
22855: PUSH
22856: LD_INT 14
22858: PUSH
22859: LD_INT 1
22861: PUSH
22862: LD_INT 2
22864: PUSH
22865: LD_INT 3
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: ST_TO_ADDR
22877: GO 23008
22879: LD_INT 1
22881: DOUBLE
22882: EQUAL
22883: IFTRUE 22887
22885: GO 22949
22887: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
22888: LD_ADDR_VAR 0 3
22892: PUSH
22893: LD_INT 11
22895: PUSH
22896: LD_INT 12
22898: PUSH
22899: LD_INT 13
22901: PUSH
22902: LD_INT 14
22904: PUSH
22905: LD_INT 1
22907: PUSH
22908: LD_INT 2
22910: PUSH
22911: LD_INT 3
22913: PUSH
22914: LD_INT 4
22916: PUSH
22917: LD_INT 5
22919: PUSH
22920: LD_INT 21
22922: PUSH
22923: LD_INT 23
22925: PUSH
22926: LD_INT 22
22928: PUSH
22929: LD_INT 24
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: ST_TO_ADDR
22947: GO 23008
22949: LD_INT 3
22951: DOUBLE
22952: EQUAL
22953: IFTRUE 22957
22955: GO 23007
22957: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22958: LD_ADDR_VAR 0 3
22962: PUSH
22963: LD_INT 13
22965: PUSH
22966: LD_INT 14
22968: PUSH
22969: LD_INT 2
22971: PUSH
22972: LD_INT 3
22974: PUSH
22975: LD_INT 4
22977: PUSH
22978: LD_INT 5
22980: PUSH
22981: LD_INT 21
22983: PUSH
22984: LD_INT 22
22986: PUSH
22987: LD_INT 23
22989: PUSH
22990: LD_INT 24
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: ST_TO_ADDR
23005: GO 23008
23007: POP
// result := ( chassis in result ) ;
23008: LD_ADDR_VAR 0 3
23012: PUSH
23013: LD_VAR 0 1
23017: PUSH
23018: LD_VAR 0 3
23022: IN
23023: ST_TO_ADDR
// end ;
23024: LD_VAR 0 3
23028: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23029: LD_INT 0
23031: PPUSH
// if not chassis or not weapon then
23032: LD_VAR 0 1
23036: NOT
23037: PUSH
23038: LD_VAR 0 2
23042: NOT
23043: OR
23044: IFFALSE 23048
// exit ;
23046: GO 24110
// case weapon of us_machine_gun :
23048: LD_VAR 0 2
23052: PUSH
23053: LD_INT 2
23055: DOUBLE
23056: EQUAL
23057: IFTRUE 23061
23059: GO 23091
23061: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23062: LD_ADDR_VAR 0 3
23066: PUSH
23067: LD_INT 1
23069: PUSH
23070: LD_INT 2
23072: PUSH
23073: LD_INT 3
23075: PUSH
23076: LD_INT 4
23078: PUSH
23079: LD_INT 5
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: ST_TO_ADDR
23089: GO 24094
23091: LD_INT 3
23093: DOUBLE
23094: EQUAL
23095: IFTRUE 23099
23097: GO 23129
23099: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23100: LD_ADDR_VAR 0 3
23104: PUSH
23105: LD_INT 1
23107: PUSH
23108: LD_INT 2
23110: PUSH
23111: LD_INT 3
23113: PUSH
23114: LD_INT 4
23116: PUSH
23117: LD_INT 5
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: ST_TO_ADDR
23127: GO 24094
23129: LD_INT 11
23131: DOUBLE
23132: EQUAL
23133: IFTRUE 23137
23135: GO 23167
23137: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
23138: LD_ADDR_VAR 0 3
23142: PUSH
23143: LD_INT 1
23145: PUSH
23146: LD_INT 2
23148: PUSH
23149: LD_INT 3
23151: PUSH
23152: LD_INT 4
23154: PUSH
23155: LD_INT 5
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: ST_TO_ADDR
23165: GO 24094
23167: LD_INT 4
23169: DOUBLE
23170: EQUAL
23171: IFTRUE 23175
23173: GO 23201
23175: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23176: LD_ADDR_VAR 0 3
23180: PUSH
23181: LD_INT 2
23183: PUSH
23184: LD_INT 3
23186: PUSH
23187: LD_INT 4
23189: PUSH
23190: LD_INT 5
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: ST_TO_ADDR
23199: GO 24094
23201: LD_INT 5
23203: DOUBLE
23204: EQUAL
23205: IFTRUE 23209
23207: GO 23235
23209: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23210: LD_ADDR_VAR 0 3
23214: PUSH
23215: LD_INT 2
23217: PUSH
23218: LD_INT 3
23220: PUSH
23221: LD_INT 4
23223: PUSH
23224: LD_INT 5
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: ST_TO_ADDR
23233: GO 24094
23235: LD_INT 9
23237: DOUBLE
23238: EQUAL
23239: IFTRUE 23243
23241: GO 23269
23243: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23244: LD_ADDR_VAR 0 3
23248: PUSH
23249: LD_INT 2
23251: PUSH
23252: LD_INT 3
23254: PUSH
23255: LD_INT 4
23257: PUSH
23258: LD_INT 5
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: ST_TO_ADDR
23267: GO 24094
23269: LD_INT 7
23271: DOUBLE
23272: EQUAL
23273: IFTRUE 23277
23275: GO 23303
23277: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
23278: LD_ADDR_VAR 0 3
23282: PUSH
23283: LD_INT 2
23285: PUSH
23286: LD_INT 3
23288: PUSH
23289: LD_INT 4
23291: PUSH
23292: LD_INT 5
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: ST_TO_ADDR
23301: GO 24094
23303: LD_INT 12
23305: DOUBLE
23306: EQUAL
23307: IFTRUE 23311
23309: GO 23337
23311: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
23312: LD_ADDR_VAR 0 3
23316: PUSH
23317: LD_INT 2
23319: PUSH
23320: LD_INT 3
23322: PUSH
23323: LD_INT 4
23325: PUSH
23326: LD_INT 5
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: ST_TO_ADDR
23335: GO 24094
23337: LD_INT 13
23339: DOUBLE
23340: EQUAL
23341: IFTRUE 23345
23343: GO 23371
23345: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23346: LD_ADDR_VAR 0 3
23350: PUSH
23351: LD_INT 2
23353: PUSH
23354: LD_INT 3
23356: PUSH
23357: LD_INT 4
23359: PUSH
23360: LD_INT 5
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: ST_TO_ADDR
23369: GO 24094
23371: LD_INT 14
23373: DOUBLE
23374: EQUAL
23375: IFTRUE 23379
23377: GO 23397
23379: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23380: LD_ADDR_VAR 0 3
23384: PUSH
23385: LD_INT 4
23387: PUSH
23388: LD_INT 5
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: ST_TO_ADDR
23395: GO 24094
23397: LD_INT 6
23399: DOUBLE
23400: EQUAL
23401: IFTRUE 23405
23403: GO 23423
23405: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23406: LD_ADDR_VAR 0 3
23410: PUSH
23411: LD_INT 4
23413: PUSH
23414: LD_INT 5
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: ST_TO_ADDR
23421: GO 24094
23423: LD_INT 10
23425: DOUBLE
23426: EQUAL
23427: IFTRUE 23431
23429: GO 23449
23431: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23432: LD_ADDR_VAR 0 3
23436: PUSH
23437: LD_INT 4
23439: PUSH
23440: LD_INT 5
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: ST_TO_ADDR
23447: GO 24094
23449: LD_INT 22
23451: DOUBLE
23452: EQUAL
23453: IFTRUE 23457
23455: GO 23483
23457: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23458: LD_ADDR_VAR 0 3
23462: PUSH
23463: LD_INT 11
23465: PUSH
23466: LD_INT 12
23468: PUSH
23469: LD_INT 13
23471: PUSH
23472: LD_INT 14
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: ST_TO_ADDR
23481: GO 24094
23483: LD_INT 23
23485: DOUBLE
23486: EQUAL
23487: IFTRUE 23491
23489: GO 23517
23491: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23492: LD_ADDR_VAR 0 3
23496: PUSH
23497: LD_INT 11
23499: PUSH
23500: LD_INT 12
23502: PUSH
23503: LD_INT 13
23505: PUSH
23506: LD_INT 14
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: ST_TO_ADDR
23515: GO 24094
23517: LD_INT 24
23519: DOUBLE
23520: EQUAL
23521: IFTRUE 23525
23523: GO 23551
23525: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23526: LD_ADDR_VAR 0 3
23530: PUSH
23531: LD_INT 11
23533: PUSH
23534: LD_INT 12
23536: PUSH
23537: LD_INT 13
23539: PUSH
23540: LD_INT 14
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: ST_TO_ADDR
23549: GO 24094
23551: LD_INT 30
23553: DOUBLE
23554: EQUAL
23555: IFTRUE 23559
23557: GO 23585
23559: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23560: LD_ADDR_VAR 0 3
23564: PUSH
23565: LD_INT 11
23567: PUSH
23568: LD_INT 12
23570: PUSH
23571: LD_INT 13
23573: PUSH
23574: LD_INT 14
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: ST_TO_ADDR
23583: GO 24094
23585: LD_INT 25
23587: DOUBLE
23588: EQUAL
23589: IFTRUE 23593
23591: GO 23611
23593: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23594: LD_ADDR_VAR 0 3
23598: PUSH
23599: LD_INT 13
23601: PUSH
23602: LD_INT 14
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: ST_TO_ADDR
23609: GO 24094
23611: LD_INT 27
23613: DOUBLE
23614: EQUAL
23615: IFTRUE 23619
23617: GO 23637
23619: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
23620: LD_ADDR_VAR 0 3
23624: PUSH
23625: LD_INT 13
23627: PUSH
23628: LD_INT 14
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: ST_TO_ADDR
23635: GO 24094
23637: LD_EXP 34
23641: DOUBLE
23642: EQUAL
23643: IFTRUE 23647
23645: GO 23673
23647: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23648: LD_ADDR_VAR 0 3
23652: PUSH
23653: LD_INT 11
23655: PUSH
23656: LD_INT 12
23658: PUSH
23659: LD_INT 13
23661: PUSH
23662: LD_INT 14
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: ST_TO_ADDR
23671: GO 24094
23673: LD_INT 28
23675: DOUBLE
23676: EQUAL
23677: IFTRUE 23681
23679: GO 23699
23681: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23682: LD_ADDR_VAR 0 3
23686: PUSH
23687: LD_INT 13
23689: PUSH
23690: LD_INT 14
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: ST_TO_ADDR
23697: GO 24094
23699: LD_INT 29
23701: DOUBLE
23702: EQUAL
23703: IFTRUE 23707
23705: GO 23725
23707: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23708: LD_ADDR_VAR 0 3
23712: PUSH
23713: LD_INT 13
23715: PUSH
23716: LD_INT 14
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: ST_TO_ADDR
23723: GO 24094
23725: LD_INT 31
23727: DOUBLE
23728: EQUAL
23729: IFTRUE 23733
23731: GO 23751
23733: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23734: LD_ADDR_VAR 0 3
23738: PUSH
23739: LD_INT 13
23741: PUSH
23742: LD_INT 14
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: ST_TO_ADDR
23749: GO 24094
23751: LD_INT 26
23753: DOUBLE
23754: EQUAL
23755: IFTRUE 23759
23757: GO 23777
23759: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23760: LD_ADDR_VAR 0 3
23764: PUSH
23765: LD_INT 13
23767: PUSH
23768: LD_INT 14
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: ST_TO_ADDR
23775: GO 24094
23777: LD_INT 42
23779: DOUBLE
23780: EQUAL
23781: IFTRUE 23785
23783: GO 23811
23785: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23786: LD_ADDR_VAR 0 3
23790: PUSH
23791: LD_INT 21
23793: PUSH
23794: LD_INT 22
23796: PUSH
23797: LD_INT 23
23799: PUSH
23800: LD_INT 24
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: ST_TO_ADDR
23809: GO 24094
23811: LD_INT 43
23813: DOUBLE
23814: EQUAL
23815: IFTRUE 23819
23817: GO 23845
23819: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23820: LD_ADDR_VAR 0 3
23824: PUSH
23825: LD_INT 21
23827: PUSH
23828: LD_INT 22
23830: PUSH
23831: LD_INT 23
23833: PUSH
23834: LD_INT 24
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: ST_TO_ADDR
23843: GO 24094
23845: LD_INT 44
23847: DOUBLE
23848: EQUAL
23849: IFTRUE 23853
23851: GO 23879
23853: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
23854: LD_ADDR_VAR 0 3
23858: PUSH
23859: LD_INT 21
23861: PUSH
23862: LD_INT 22
23864: PUSH
23865: LD_INT 23
23867: PUSH
23868: LD_INT 24
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: ST_TO_ADDR
23877: GO 24094
23879: LD_INT 45
23881: DOUBLE
23882: EQUAL
23883: IFTRUE 23887
23885: GO 23913
23887: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
23888: LD_ADDR_VAR 0 3
23892: PUSH
23893: LD_INT 21
23895: PUSH
23896: LD_INT 22
23898: PUSH
23899: LD_INT 23
23901: PUSH
23902: LD_INT 24
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: ST_TO_ADDR
23911: GO 24094
23913: LD_INT 49
23915: DOUBLE
23916: EQUAL
23917: IFTRUE 23921
23919: GO 23947
23921: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
23922: LD_ADDR_VAR 0 3
23926: PUSH
23927: LD_INT 21
23929: PUSH
23930: LD_INT 22
23932: PUSH
23933: LD_INT 23
23935: PUSH
23936: LD_INT 24
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: ST_TO_ADDR
23945: GO 24094
23947: LD_INT 51
23949: DOUBLE
23950: EQUAL
23951: IFTRUE 23955
23953: GO 23981
23955: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
23956: LD_ADDR_VAR 0 3
23960: PUSH
23961: LD_INT 21
23963: PUSH
23964: LD_INT 22
23966: PUSH
23967: LD_INT 23
23969: PUSH
23970: LD_INT 24
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: ST_TO_ADDR
23979: GO 24094
23981: LD_INT 52
23983: DOUBLE
23984: EQUAL
23985: IFTRUE 23989
23987: GO 24015
23989: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
23990: LD_ADDR_VAR 0 3
23994: PUSH
23995: LD_INT 21
23997: PUSH
23998: LD_INT 22
24000: PUSH
24001: LD_INT 23
24003: PUSH
24004: LD_INT 24
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: ST_TO_ADDR
24013: GO 24094
24015: LD_INT 53
24017: DOUBLE
24018: EQUAL
24019: IFTRUE 24023
24021: GO 24041
24023: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24024: LD_ADDR_VAR 0 3
24028: PUSH
24029: LD_INT 23
24031: PUSH
24032: LD_INT 24
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: ST_TO_ADDR
24039: GO 24094
24041: LD_INT 46
24043: DOUBLE
24044: EQUAL
24045: IFTRUE 24049
24047: GO 24067
24049: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24050: LD_ADDR_VAR 0 3
24054: PUSH
24055: LD_INT 23
24057: PUSH
24058: LD_INT 24
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: ST_TO_ADDR
24065: GO 24094
24067: LD_INT 47
24069: DOUBLE
24070: EQUAL
24071: IFTRUE 24075
24073: GO 24093
24075: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24076: LD_ADDR_VAR 0 3
24080: PUSH
24081: LD_INT 23
24083: PUSH
24084: LD_INT 24
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: ST_TO_ADDR
24091: GO 24094
24093: POP
// result := ( chassis in result ) ;
24094: LD_ADDR_VAR 0 3
24098: PUSH
24099: LD_VAR 0 1
24103: PUSH
24104: LD_VAR 0 3
24108: IN
24109: ST_TO_ADDR
// end ;
24110: LD_VAR 0 3
24114: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24115: LD_INT 0
24117: PPUSH
24118: PPUSH
24119: PPUSH
24120: PPUSH
24121: PPUSH
24122: PPUSH
24123: PPUSH
// result := array ;
24124: LD_ADDR_VAR 0 5
24128: PUSH
24129: LD_VAR 0 1
24133: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24134: LD_VAR 0 1
24138: NOT
24139: PUSH
24140: LD_VAR 0 2
24144: NOT
24145: OR
24146: PUSH
24147: LD_VAR 0 3
24151: NOT
24152: OR
24153: PUSH
24154: LD_VAR 0 2
24158: PUSH
24159: LD_VAR 0 1
24163: GREATER
24164: OR
24165: PUSH
24166: LD_VAR 0 3
24170: PUSH
24171: LD_VAR 0 1
24175: GREATER
24176: OR
24177: IFFALSE 24181
// exit ;
24179: GO 24477
// if direction then
24181: LD_VAR 0 4
24185: IFFALSE 24249
// begin d := 1 ;
24187: LD_ADDR_VAR 0 9
24191: PUSH
24192: LD_INT 1
24194: ST_TO_ADDR
// if i_from > i_to then
24195: LD_VAR 0 2
24199: PUSH
24200: LD_VAR 0 3
24204: GREATER
24205: IFFALSE 24231
// length := ( array - i_from ) + i_to else
24207: LD_ADDR_VAR 0 11
24211: PUSH
24212: LD_VAR 0 1
24216: PUSH
24217: LD_VAR 0 2
24221: MINUS
24222: PUSH
24223: LD_VAR 0 3
24227: PLUS
24228: ST_TO_ADDR
24229: GO 24247
// length := i_to - i_from ;
24231: LD_ADDR_VAR 0 11
24235: PUSH
24236: LD_VAR 0 3
24240: PUSH
24241: LD_VAR 0 2
24245: MINUS
24246: ST_TO_ADDR
// end else
24247: GO 24310
// begin d := - 1 ;
24249: LD_ADDR_VAR 0 9
24253: PUSH
24254: LD_INT 1
24256: NEG
24257: ST_TO_ADDR
// if i_from > i_to then
24258: LD_VAR 0 2
24262: PUSH
24263: LD_VAR 0 3
24267: GREATER
24268: IFFALSE 24288
// length := i_from - i_to else
24270: LD_ADDR_VAR 0 11
24274: PUSH
24275: LD_VAR 0 2
24279: PUSH
24280: LD_VAR 0 3
24284: MINUS
24285: ST_TO_ADDR
24286: GO 24310
// length := ( array - i_to ) + i_from ;
24288: LD_ADDR_VAR 0 11
24292: PUSH
24293: LD_VAR 0 1
24297: PUSH
24298: LD_VAR 0 3
24302: MINUS
24303: PUSH
24304: LD_VAR 0 2
24308: PLUS
24309: ST_TO_ADDR
// end ; if not length then
24310: LD_VAR 0 11
24314: NOT
24315: IFFALSE 24319
// exit ;
24317: GO 24477
// tmp := array ;
24319: LD_ADDR_VAR 0 10
24323: PUSH
24324: LD_VAR 0 1
24328: ST_TO_ADDR
// for i = 1 to length do
24329: LD_ADDR_VAR 0 6
24333: PUSH
24334: DOUBLE
24335: LD_INT 1
24337: DEC
24338: ST_TO_ADDR
24339: LD_VAR 0 11
24343: PUSH
24344: FOR_TO
24345: IFFALSE 24465
// begin for j = 1 to array do
24347: LD_ADDR_VAR 0 7
24351: PUSH
24352: DOUBLE
24353: LD_INT 1
24355: DEC
24356: ST_TO_ADDR
24357: LD_VAR 0 1
24361: PUSH
24362: FOR_TO
24363: IFFALSE 24451
// begin k := j + d ;
24365: LD_ADDR_VAR 0 8
24369: PUSH
24370: LD_VAR 0 7
24374: PUSH
24375: LD_VAR 0 9
24379: PLUS
24380: ST_TO_ADDR
// if k > array then
24381: LD_VAR 0 8
24385: PUSH
24386: LD_VAR 0 1
24390: GREATER
24391: IFFALSE 24401
// k := 1 ;
24393: LD_ADDR_VAR 0 8
24397: PUSH
24398: LD_INT 1
24400: ST_TO_ADDR
// if not k then
24401: LD_VAR 0 8
24405: NOT
24406: IFFALSE 24418
// k := array ;
24408: LD_ADDR_VAR 0 8
24412: PUSH
24413: LD_VAR 0 1
24417: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24418: LD_ADDR_VAR 0 10
24422: PUSH
24423: LD_VAR 0 10
24427: PPUSH
24428: LD_VAR 0 8
24432: PPUSH
24433: LD_VAR 0 1
24437: PUSH
24438: LD_VAR 0 7
24442: ARRAY
24443: PPUSH
24444: CALL_OW 1
24448: ST_TO_ADDR
// end ;
24449: GO 24362
24451: POP
24452: POP
// array := tmp ;
24453: LD_ADDR_VAR 0 1
24457: PUSH
24458: LD_VAR 0 10
24462: ST_TO_ADDR
// end ;
24463: GO 24344
24465: POP
24466: POP
// result := array ;
24467: LD_ADDR_VAR 0 5
24471: PUSH
24472: LD_VAR 0 1
24476: ST_TO_ADDR
// end ;
24477: LD_VAR 0 5
24481: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24482: LD_INT 0
24484: PPUSH
24485: PPUSH
// result := 0 ;
24486: LD_ADDR_VAR 0 3
24490: PUSH
24491: LD_INT 0
24493: ST_TO_ADDR
// if not array or not value in array then
24494: LD_VAR 0 1
24498: NOT
24499: PUSH
24500: LD_VAR 0 2
24504: PUSH
24505: LD_VAR 0 1
24509: IN
24510: NOT
24511: OR
24512: IFFALSE 24516
// exit ;
24514: GO 24570
// for i = 1 to array do
24516: LD_ADDR_VAR 0 4
24520: PUSH
24521: DOUBLE
24522: LD_INT 1
24524: DEC
24525: ST_TO_ADDR
24526: LD_VAR 0 1
24530: PUSH
24531: FOR_TO
24532: IFFALSE 24568
// if value = array [ i ] then
24534: LD_VAR 0 2
24538: PUSH
24539: LD_VAR 0 1
24543: PUSH
24544: LD_VAR 0 4
24548: ARRAY
24549: EQUAL
24550: IFFALSE 24566
// begin result := i ;
24552: LD_ADDR_VAR 0 3
24556: PUSH
24557: LD_VAR 0 4
24561: ST_TO_ADDR
// exit ;
24562: POP
24563: POP
24564: GO 24570
// end ;
24566: GO 24531
24568: POP
24569: POP
// end ;
24570: LD_VAR 0 3
24574: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24575: LD_INT 0
24577: PPUSH
// vc_chassis := chassis ;
24578: LD_ADDR_OWVAR 37
24582: PUSH
24583: LD_VAR 0 1
24587: ST_TO_ADDR
// vc_engine := engine ;
24588: LD_ADDR_OWVAR 39
24592: PUSH
24593: LD_VAR 0 2
24597: ST_TO_ADDR
// vc_control := control ;
24598: LD_ADDR_OWVAR 38
24602: PUSH
24603: LD_VAR 0 3
24607: ST_TO_ADDR
// vc_weapon := weapon ;
24608: LD_ADDR_OWVAR 40
24612: PUSH
24613: LD_VAR 0 4
24617: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24618: LD_ADDR_OWVAR 41
24622: PUSH
24623: LD_VAR 0 5
24627: ST_TO_ADDR
// end ;
24628: LD_VAR 0 6
24632: RET
// export function WantPlant ( unit ) ; var task ; begin
24633: LD_INT 0
24635: PPUSH
24636: PPUSH
// result := false ;
24637: LD_ADDR_VAR 0 2
24641: PUSH
24642: LD_INT 0
24644: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24645: LD_ADDR_VAR 0 3
24649: PUSH
24650: LD_VAR 0 1
24654: PPUSH
24655: CALL_OW 437
24659: ST_TO_ADDR
// if task then
24660: LD_VAR 0 3
24664: IFFALSE 24692
// if task [ 1 ] [ 1 ] = p then
24666: LD_VAR 0 3
24670: PUSH
24671: LD_INT 1
24673: ARRAY
24674: PUSH
24675: LD_INT 1
24677: ARRAY
24678: PUSH
24679: LD_STRING p
24681: EQUAL
24682: IFFALSE 24692
// result := true ;
24684: LD_ADDR_VAR 0 2
24688: PUSH
24689: LD_INT 1
24691: ST_TO_ADDR
// end ;
24692: LD_VAR 0 2
24696: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24697: LD_INT 0
24699: PPUSH
24700: PPUSH
24701: PPUSH
24702: PPUSH
// if pos < 1 then
24703: LD_VAR 0 2
24707: PUSH
24708: LD_INT 1
24710: LESS
24711: IFFALSE 24715
// exit ;
24713: GO 25018
// if pos = 1 then
24715: LD_VAR 0 2
24719: PUSH
24720: LD_INT 1
24722: EQUAL
24723: IFFALSE 24756
// result := Replace ( arr , pos [ 1 ] , value ) else
24725: LD_ADDR_VAR 0 4
24729: PUSH
24730: LD_VAR 0 1
24734: PPUSH
24735: LD_VAR 0 2
24739: PUSH
24740: LD_INT 1
24742: ARRAY
24743: PPUSH
24744: LD_VAR 0 3
24748: PPUSH
24749: CALL_OW 1
24753: ST_TO_ADDR
24754: GO 25018
// begin tmp := arr ;
24756: LD_ADDR_VAR 0 6
24760: PUSH
24761: LD_VAR 0 1
24765: ST_TO_ADDR
// s_arr := [ tmp ] ;
24766: LD_ADDR_VAR 0 7
24770: PUSH
24771: LD_VAR 0 6
24775: PUSH
24776: EMPTY
24777: LIST
24778: ST_TO_ADDR
// for i = 1 to pos - 1 do
24779: LD_ADDR_VAR 0 5
24783: PUSH
24784: DOUBLE
24785: LD_INT 1
24787: DEC
24788: ST_TO_ADDR
24789: LD_VAR 0 2
24793: PUSH
24794: LD_INT 1
24796: MINUS
24797: PUSH
24798: FOR_TO
24799: IFFALSE 24844
// begin tmp := tmp [ pos [ i ] ] ;
24801: LD_ADDR_VAR 0 6
24805: PUSH
24806: LD_VAR 0 6
24810: PUSH
24811: LD_VAR 0 2
24815: PUSH
24816: LD_VAR 0 5
24820: ARRAY
24821: ARRAY
24822: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24823: LD_ADDR_VAR 0 7
24827: PUSH
24828: LD_VAR 0 7
24832: PUSH
24833: LD_VAR 0 6
24837: PUSH
24838: EMPTY
24839: LIST
24840: ADD
24841: ST_TO_ADDR
// end ;
24842: GO 24798
24844: POP
24845: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
24846: LD_ADDR_VAR 0 6
24850: PUSH
24851: LD_VAR 0 6
24855: PPUSH
24856: LD_VAR 0 2
24860: PUSH
24861: LD_VAR 0 2
24865: ARRAY
24866: PPUSH
24867: LD_VAR 0 3
24871: PPUSH
24872: CALL_OW 1
24876: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
24877: LD_ADDR_VAR 0 7
24881: PUSH
24882: LD_VAR 0 7
24886: PPUSH
24887: LD_VAR 0 7
24891: PPUSH
24892: LD_VAR 0 6
24896: PPUSH
24897: CALL_OW 1
24901: ST_TO_ADDR
// for i = s_arr downto 2 do
24902: LD_ADDR_VAR 0 5
24906: PUSH
24907: DOUBLE
24908: LD_VAR 0 7
24912: INC
24913: ST_TO_ADDR
24914: LD_INT 2
24916: PUSH
24917: FOR_DOWNTO
24918: IFFALSE 25002
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
24920: LD_ADDR_VAR 0 6
24924: PUSH
24925: LD_VAR 0 7
24929: PUSH
24930: LD_VAR 0 5
24934: PUSH
24935: LD_INT 1
24937: MINUS
24938: ARRAY
24939: PPUSH
24940: LD_VAR 0 2
24944: PUSH
24945: LD_VAR 0 5
24949: PUSH
24950: LD_INT 1
24952: MINUS
24953: ARRAY
24954: PPUSH
24955: LD_VAR 0 7
24959: PUSH
24960: LD_VAR 0 5
24964: ARRAY
24965: PPUSH
24966: CALL_OW 1
24970: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
24971: LD_ADDR_VAR 0 7
24975: PUSH
24976: LD_VAR 0 7
24980: PPUSH
24981: LD_VAR 0 5
24985: PUSH
24986: LD_INT 1
24988: MINUS
24989: PPUSH
24990: LD_VAR 0 6
24994: PPUSH
24995: CALL_OW 1
24999: ST_TO_ADDR
// end ;
25000: GO 24917
25002: POP
25003: POP
// result := s_arr [ 1 ] ;
25004: LD_ADDR_VAR 0 4
25008: PUSH
25009: LD_VAR 0 7
25013: PUSH
25014: LD_INT 1
25016: ARRAY
25017: ST_TO_ADDR
// end ; end ;
25018: LD_VAR 0 4
25022: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25023: LD_INT 0
25025: PPUSH
25026: PPUSH
// if not list then
25027: LD_VAR 0 1
25031: NOT
25032: IFFALSE 25036
// exit ;
25034: GO 25127
// i := list [ pos1 ] ;
25036: LD_ADDR_VAR 0 5
25040: PUSH
25041: LD_VAR 0 1
25045: PUSH
25046: LD_VAR 0 2
25050: ARRAY
25051: ST_TO_ADDR
// if not i then
25052: LD_VAR 0 5
25056: NOT
25057: IFFALSE 25061
// exit ;
25059: GO 25127
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25061: LD_ADDR_VAR 0 1
25065: PUSH
25066: LD_VAR 0 1
25070: PPUSH
25071: LD_VAR 0 2
25075: PPUSH
25076: LD_VAR 0 1
25080: PUSH
25081: LD_VAR 0 3
25085: ARRAY
25086: PPUSH
25087: CALL_OW 1
25091: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25092: LD_ADDR_VAR 0 1
25096: PUSH
25097: LD_VAR 0 1
25101: PPUSH
25102: LD_VAR 0 3
25106: PPUSH
25107: LD_VAR 0 5
25111: PPUSH
25112: CALL_OW 1
25116: ST_TO_ADDR
// result := list ;
25117: LD_ADDR_VAR 0 4
25121: PUSH
25122: LD_VAR 0 1
25126: ST_TO_ADDR
// end ;
25127: LD_VAR 0 4
25131: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25132: LD_INT 0
25134: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25135: LD_ADDR_VAR 0 5
25139: PUSH
25140: LD_VAR 0 1
25144: PPUSH
25145: CALL_OW 250
25149: PPUSH
25150: LD_VAR 0 1
25154: PPUSH
25155: CALL_OW 251
25159: PPUSH
25160: LD_VAR 0 2
25164: PPUSH
25165: LD_VAR 0 3
25169: PPUSH
25170: LD_VAR 0 4
25174: PPUSH
25175: CALL 25185 0 5
25179: ST_TO_ADDR
// end ;
25180: LD_VAR 0 5
25184: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
25185: LD_INT 0
25187: PPUSH
25188: PPUSH
25189: PPUSH
25190: PPUSH
// if not list then
25191: LD_VAR 0 3
25195: NOT
25196: IFFALSE 25200
// exit ;
25198: GO 25588
// result := [ ] ;
25200: LD_ADDR_VAR 0 6
25204: PUSH
25205: EMPTY
25206: ST_TO_ADDR
// for i in list do
25207: LD_ADDR_VAR 0 7
25211: PUSH
25212: LD_VAR 0 3
25216: PUSH
25217: FOR_IN
25218: IFFALSE 25420
// begin tmp := GetDistUnitXY ( i , x , y ) ;
25220: LD_ADDR_VAR 0 9
25224: PUSH
25225: LD_VAR 0 7
25229: PPUSH
25230: LD_VAR 0 1
25234: PPUSH
25235: LD_VAR 0 2
25239: PPUSH
25240: CALL_OW 297
25244: ST_TO_ADDR
// if not result then
25245: LD_VAR 0 6
25249: NOT
25250: IFFALSE 25276
// result := [ [ i , tmp ] ] else
25252: LD_ADDR_VAR 0 6
25256: PUSH
25257: LD_VAR 0 7
25261: PUSH
25262: LD_VAR 0 9
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: EMPTY
25272: LIST
25273: ST_TO_ADDR
25274: GO 25418
// begin if result [ result ] [ 2 ] < tmp then
25276: LD_VAR 0 6
25280: PUSH
25281: LD_VAR 0 6
25285: ARRAY
25286: PUSH
25287: LD_INT 2
25289: ARRAY
25290: PUSH
25291: LD_VAR 0 9
25295: LESS
25296: IFFALSE 25338
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
25298: LD_ADDR_VAR 0 6
25302: PUSH
25303: LD_VAR 0 6
25307: PPUSH
25308: LD_VAR 0 6
25312: PUSH
25313: LD_INT 1
25315: PLUS
25316: PPUSH
25317: LD_VAR 0 7
25321: PUSH
25322: LD_VAR 0 9
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PPUSH
25331: CALL_OW 2
25335: ST_TO_ADDR
25336: GO 25418
// for j = 1 to result do
25338: LD_ADDR_VAR 0 8
25342: PUSH
25343: DOUBLE
25344: LD_INT 1
25346: DEC
25347: ST_TO_ADDR
25348: LD_VAR 0 6
25352: PUSH
25353: FOR_TO
25354: IFFALSE 25416
// begin if tmp < result [ j ] [ 2 ] then
25356: LD_VAR 0 9
25360: PUSH
25361: LD_VAR 0 6
25365: PUSH
25366: LD_VAR 0 8
25370: ARRAY
25371: PUSH
25372: LD_INT 2
25374: ARRAY
25375: LESS
25376: IFFALSE 25414
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25378: LD_ADDR_VAR 0 6
25382: PUSH
25383: LD_VAR 0 6
25387: PPUSH
25388: LD_VAR 0 8
25392: PPUSH
25393: LD_VAR 0 7
25397: PUSH
25398: LD_VAR 0 9
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PPUSH
25407: CALL_OW 2
25411: ST_TO_ADDR
// break ;
25412: GO 25416
// end ; end ;
25414: GO 25353
25416: POP
25417: POP
// end ; end ;
25418: GO 25217
25420: POP
25421: POP
// if result and not asc then
25422: LD_VAR 0 6
25426: PUSH
25427: LD_VAR 0 4
25431: NOT
25432: AND
25433: IFFALSE 25508
// begin tmp := result ;
25435: LD_ADDR_VAR 0 9
25439: PUSH
25440: LD_VAR 0 6
25444: ST_TO_ADDR
// for i = tmp downto 1 do
25445: LD_ADDR_VAR 0 7
25449: PUSH
25450: DOUBLE
25451: LD_VAR 0 9
25455: INC
25456: ST_TO_ADDR
25457: LD_INT 1
25459: PUSH
25460: FOR_DOWNTO
25461: IFFALSE 25506
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25463: LD_ADDR_VAR 0 6
25467: PUSH
25468: LD_VAR 0 6
25472: PPUSH
25473: LD_VAR 0 9
25477: PUSH
25478: LD_VAR 0 7
25482: MINUS
25483: PUSH
25484: LD_INT 1
25486: PLUS
25487: PPUSH
25488: LD_VAR 0 9
25492: PUSH
25493: LD_VAR 0 7
25497: ARRAY
25498: PPUSH
25499: CALL_OW 1
25503: ST_TO_ADDR
25504: GO 25460
25506: POP
25507: POP
// end ; tmp := [ ] ;
25508: LD_ADDR_VAR 0 9
25512: PUSH
25513: EMPTY
25514: ST_TO_ADDR
// if mode then
25515: LD_VAR 0 5
25519: IFFALSE 25588
// begin for i = 1 to result do
25521: LD_ADDR_VAR 0 7
25525: PUSH
25526: DOUBLE
25527: LD_INT 1
25529: DEC
25530: ST_TO_ADDR
25531: LD_VAR 0 6
25535: PUSH
25536: FOR_TO
25537: IFFALSE 25576
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25539: LD_ADDR_VAR 0 9
25543: PUSH
25544: LD_VAR 0 9
25548: PPUSH
25549: LD_VAR 0 7
25553: PPUSH
25554: LD_VAR 0 6
25558: PUSH
25559: LD_VAR 0 7
25563: ARRAY
25564: PUSH
25565: LD_INT 1
25567: ARRAY
25568: PPUSH
25569: CALL_OW 1
25573: ST_TO_ADDR
25574: GO 25536
25576: POP
25577: POP
// result := tmp ;
25578: LD_ADDR_VAR 0 6
25582: PUSH
25583: LD_VAR 0 9
25587: ST_TO_ADDR
// end ; end ;
25588: LD_VAR 0 6
25592: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25593: LD_INT 0
25595: PPUSH
25596: PPUSH
25597: PPUSH
25598: PPUSH
25599: PPUSH
25600: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25601: LD_ADDR_VAR 0 5
25605: PUSH
25606: LD_INT 0
25608: PUSH
25609: LD_INT 0
25611: PUSH
25612: LD_INT 0
25614: PUSH
25615: EMPTY
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: ST_TO_ADDR
// if not x or not y then
25623: LD_VAR 0 2
25627: NOT
25628: PUSH
25629: LD_VAR 0 3
25633: NOT
25634: OR
25635: IFFALSE 25639
// exit ;
25637: GO 27291
// if not range then
25639: LD_VAR 0 4
25643: NOT
25644: IFFALSE 25654
// range := 10 ;
25646: LD_ADDR_VAR 0 4
25650: PUSH
25651: LD_INT 10
25653: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25654: LD_ADDR_VAR 0 8
25658: PUSH
25659: LD_INT 81
25661: PUSH
25662: LD_VAR 0 1
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 92
25673: PUSH
25674: LD_VAR 0 2
25678: PUSH
25679: LD_VAR 0 3
25683: PUSH
25684: LD_VAR 0 4
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 3
25697: PUSH
25698: LD_INT 21
25700: PUSH
25701: LD_INT 3
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: LIST
25716: PPUSH
25717: CALL_OW 69
25721: ST_TO_ADDR
// if not tmp then
25722: LD_VAR 0 8
25726: NOT
25727: IFFALSE 25731
// exit ;
25729: GO 27291
// for i in tmp do
25731: LD_ADDR_VAR 0 6
25735: PUSH
25736: LD_VAR 0 8
25740: PUSH
25741: FOR_IN
25742: IFFALSE 27266
// begin points := [ 0 , 0 , 0 ] ;
25744: LD_ADDR_VAR 0 9
25748: PUSH
25749: LD_INT 0
25751: PUSH
25752: LD_INT 0
25754: PUSH
25755: LD_INT 0
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: LIST
25762: ST_TO_ADDR
// bpoints := 1 ;
25763: LD_ADDR_VAR 0 10
25767: PUSH
25768: LD_INT 1
25770: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25771: LD_VAR 0 6
25775: PPUSH
25776: CALL_OW 247
25780: PUSH
25781: LD_INT 1
25783: DOUBLE
25784: EQUAL
25785: IFTRUE 25789
25787: GO 26367
25789: POP
// begin if GetClass ( i ) = 1 then
25790: LD_VAR 0 6
25794: PPUSH
25795: CALL_OW 257
25799: PUSH
25800: LD_INT 1
25802: EQUAL
25803: IFFALSE 25824
// points := [ 10 , 5 , 3 ] ;
25805: LD_ADDR_VAR 0 9
25809: PUSH
25810: LD_INT 10
25812: PUSH
25813: LD_INT 5
25815: PUSH
25816: LD_INT 3
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: LIST
25823: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25824: LD_VAR 0 6
25828: PPUSH
25829: CALL_OW 257
25833: PUSH
25834: LD_INT 2
25836: PUSH
25837: LD_INT 3
25839: PUSH
25840: LD_INT 4
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: LIST
25847: IN
25848: IFFALSE 25869
// points := [ 3 , 2 , 1 ] ;
25850: LD_ADDR_VAR 0 9
25854: PUSH
25855: LD_INT 3
25857: PUSH
25858: LD_INT 2
25860: PUSH
25861: LD_INT 1
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: LIST
25868: ST_TO_ADDR
// if GetClass ( i ) = 5 then
25869: LD_VAR 0 6
25873: PPUSH
25874: CALL_OW 257
25878: PUSH
25879: LD_INT 5
25881: EQUAL
25882: IFFALSE 25903
// points := [ 130 , 5 , 2 ] ;
25884: LD_ADDR_VAR 0 9
25888: PUSH
25889: LD_INT 130
25891: PUSH
25892: LD_INT 5
25894: PUSH
25895: LD_INT 2
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: LIST
25902: ST_TO_ADDR
// if GetClass ( i ) = 8 then
25903: LD_VAR 0 6
25907: PPUSH
25908: CALL_OW 257
25912: PUSH
25913: LD_INT 8
25915: EQUAL
25916: IFFALSE 25937
// points := [ 35 , 35 , 30 ] ;
25918: LD_ADDR_VAR 0 9
25922: PUSH
25923: LD_INT 35
25925: PUSH
25926: LD_INT 35
25928: PUSH
25929: LD_INT 30
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: LIST
25936: ST_TO_ADDR
// if GetClass ( i ) = 9 then
25937: LD_VAR 0 6
25941: PPUSH
25942: CALL_OW 257
25946: PUSH
25947: LD_INT 9
25949: EQUAL
25950: IFFALSE 25971
// points := [ 20 , 55 , 40 ] ;
25952: LD_ADDR_VAR 0 9
25956: PUSH
25957: LD_INT 20
25959: PUSH
25960: LD_INT 55
25962: PUSH
25963: LD_INT 40
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: LIST
25970: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
25971: LD_VAR 0 6
25975: PPUSH
25976: CALL_OW 257
25980: PUSH
25981: LD_INT 12
25983: PUSH
25984: LD_INT 16
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: IN
25991: IFFALSE 26012
// points := [ 5 , 3 , 2 ] ;
25993: LD_ADDR_VAR 0 9
25997: PUSH
25998: LD_INT 5
26000: PUSH
26001: LD_INT 3
26003: PUSH
26004: LD_INT 2
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: LIST
26011: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26012: LD_VAR 0 6
26016: PPUSH
26017: CALL_OW 257
26021: PUSH
26022: LD_INT 17
26024: EQUAL
26025: IFFALSE 26046
// points := [ 100 , 50 , 75 ] ;
26027: LD_ADDR_VAR 0 9
26031: PUSH
26032: LD_INT 100
26034: PUSH
26035: LD_INT 50
26037: PUSH
26038: LD_INT 75
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: LIST
26045: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26046: LD_VAR 0 6
26050: PPUSH
26051: CALL_OW 257
26055: PUSH
26056: LD_INT 15
26058: EQUAL
26059: IFFALSE 26080
// points := [ 10 , 5 , 3 ] ;
26061: LD_ADDR_VAR 0 9
26065: PUSH
26066: LD_INT 10
26068: PUSH
26069: LD_INT 5
26071: PUSH
26072: LD_INT 3
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: LIST
26079: ST_TO_ADDR
// if GetClass ( i ) = 14 then
26080: LD_VAR 0 6
26084: PPUSH
26085: CALL_OW 257
26089: PUSH
26090: LD_INT 14
26092: EQUAL
26093: IFFALSE 26114
// points := [ 10 , 0 , 0 ] ;
26095: LD_ADDR_VAR 0 9
26099: PUSH
26100: LD_INT 10
26102: PUSH
26103: LD_INT 0
26105: PUSH
26106: LD_INT 0
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: LIST
26113: ST_TO_ADDR
// if GetClass ( i ) = 11 then
26114: LD_VAR 0 6
26118: PPUSH
26119: CALL_OW 257
26123: PUSH
26124: LD_INT 11
26126: EQUAL
26127: IFFALSE 26148
// points := [ 30 , 10 , 5 ] ;
26129: LD_ADDR_VAR 0 9
26133: PUSH
26134: LD_INT 30
26136: PUSH
26137: LD_INT 10
26139: PUSH
26140: LD_INT 5
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: LIST
26147: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
26148: LD_VAR 0 1
26152: PPUSH
26153: LD_INT 5
26155: PPUSH
26156: CALL_OW 321
26160: PUSH
26161: LD_INT 2
26163: EQUAL
26164: IFFALSE 26181
// bpoints := bpoints * 1.8 ;
26166: LD_ADDR_VAR 0 10
26170: PUSH
26171: LD_VAR 0 10
26175: PUSH
26176: LD_REAL  1.80000000000000E+0000
26179: MUL
26180: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
26181: LD_VAR 0 6
26185: PPUSH
26186: CALL_OW 257
26190: PUSH
26191: LD_INT 1
26193: PUSH
26194: LD_INT 2
26196: PUSH
26197: LD_INT 3
26199: PUSH
26200: LD_INT 4
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: IN
26209: PUSH
26210: LD_VAR 0 1
26214: PPUSH
26215: LD_INT 51
26217: PPUSH
26218: CALL_OW 321
26222: PUSH
26223: LD_INT 2
26225: EQUAL
26226: AND
26227: IFFALSE 26244
// bpoints := bpoints * 1.2 ;
26229: LD_ADDR_VAR 0 10
26233: PUSH
26234: LD_VAR 0 10
26238: PUSH
26239: LD_REAL  1.20000000000000E+0000
26242: MUL
26243: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
26244: LD_VAR 0 6
26248: PPUSH
26249: CALL_OW 257
26253: PUSH
26254: LD_INT 5
26256: PUSH
26257: LD_INT 7
26259: PUSH
26260: LD_INT 9
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: LIST
26267: IN
26268: PUSH
26269: LD_VAR 0 1
26273: PPUSH
26274: LD_INT 52
26276: PPUSH
26277: CALL_OW 321
26281: PUSH
26282: LD_INT 2
26284: EQUAL
26285: AND
26286: IFFALSE 26303
// bpoints := bpoints * 1.5 ;
26288: LD_ADDR_VAR 0 10
26292: PUSH
26293: LD_VAR 0 10
26297: PUSH
26298: LD_REAL  1.50000000000000E+0000
26301: MUL
26302: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
26303: LD_VAR 0 1
26307: PPUSH
26308: LD_INT 66
26310: PPUSH
26311: CALL_OW 321
26315: PUSH
26316: LD_INT 2
26318: EQUAL
26319: IFFALSE 26336
// bpoints := bpoints * 1.1 ;
26321: LD_ADDR_VAR 0 10
26325: PUSH
26326: LD_VAR 0 10
26330: PUSH
26331: LD_REAL  1.10000000000000E+0000
26334: MUL
26335: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
26336: LD_ADDR_VAR 0 10
26340: PUSH
26341: LD_VAR 0 10
26345: PUSH
26346: LD_VAR 0 6
26350: PPUSH
26351: LD_INT 1
26353: PPUSH
26354: CALL_OW 259
26358: PUSH
26359: LD_REAL  1.15000000000000E+0000
26362: MUL
26363: MUL
26364: ST_TO_ADDR
// end ; unit_vehicle :
26365: GO 27195
26367: LD_INT 2
26369: DOUBLE
26370: EQUAL
26371: IFTRUE 26375
26373: GO 27183
26375: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
26376: LD_VAR 0 6
26380: PPUSH
26381: CALL_OW 264
26385: PUSH
26386: LD_INT 2
26388: PUSH
26389: LD_INT 42
26391: PUSH
26392: LD_INT 24
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: LIST
26399: IN
26400: IFFALSE 26421
// points := [ 25 , 5 , 3 ] ;
26402: LD_ADDR_VAR 0 9
26406: PUSH
26407: LD_INT 25
26409: PUSH
26410: LD_INT 5
26412: PUSH
26413: LD_INT 3
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: LIST
26420: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26421: LD_VAR 0 6
26425: PPUSH
26426: CALL_OW 264
26430: PUSH
26431: LD_INT 4
26433: PUSH
26434: LD_INT 43
26436: PUSH
26437: LD_INT 25
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: LIST
26444: IN
26445: IFFALSE 26466
// points := [ 40 , 15 , 5 ] ;
26447: LD_ADDR_VAR 0 9
26451: PUSH
26452: LD_INT 40
26454: PUSH
26455: LD_INT 15
26457: PUSH
26458: LD_INT 5
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: LIST
26465: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26466: LD_VAR 0 6
26470: PPUSH
26471: CALL_OW 264
26475: PUSH
26476: LD_INT 3
26478: PUSH
26479: LD_INT 23
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: IN
26486: IFFALSE 26507
// points := [ 7 , 25 , 8 ] ;
26488: LD_ADDR_VAR 0 9
26492: PUSH
26493: LD_INT 7
26495: PUSH
26496: LD_INT 25
26498: PUSH
26499: LD_INT 8
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: LIST
26506: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26507: LD_VAR 0 6
26511: PPUSH
26512: CALL_OW 264
26516: PUSH
26517: LD_INT 5
26519: PUSH
26520: LD_INT 27
26522: PUSH
26523: LD_INT 44
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: LIST
26530: IN
26531: IFFALSE 26552
// points := [ 14 , 50 , 16 ] ;
26533: LD_ADDR_VAR 0 9
26537: PUSH
26538: LD_INT 14
26540: PUSH
26541: LD_INT 50
26543: PUSH
26544: LD_INT 16
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: LIST
26551: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26552: LD_VAR 0 6
26556: PPUSH
26557: CALL_OW 264
26561: PUSH
26562: LD_INT 6
26564: PUSH
26565: LD_INT 46
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: IN
26572: IFFALSE 26593
// points := [ 32 , 120 , 70 ] ;
26574: LD_ADDR_VAR 0 9
26578: PUSH
26579: LD_INT 32
26581: PUSH
26582: LD_INT 120
26584: PUSH
26585: LD_INT 70
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: LIST
26592: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
26593: LD_VAR 0 6
26597: PPUSH
26598: CALL_OW 264
26602: PUSH
26603: LD_INT 7
26605: PUSH
26606: LD_INT 28
26608: PUSH
26609: LD_INT 45
26611: PUSH
26612: LD_EXP 34
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: IN
26623: IFFALSE 26644
// points := [ 35 , 20 , 45 ] ;
26625: LD_ADDR_VAR 0 9
26629: PUSH
26630: LD_INT 35
26632: PUSH
26633: LD_INT 20
26635: PUSH
26636: LD_INT 45
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: LIST
26643: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26644: LD_VAR 0 6
26648: PPUSH
26649: CALL_OW 264
26653: PUSH
26654: LD_INT 47
26656: PUSH
26657: EMPTY
26658: LIST
26659: IN
26660: IFFALSE 26681
// points := [ 67 , 45 , 75 ] ;
26662: LD_ADDR_VAR 0 9
26666: PUSH
26667: LD_INT 67
26669: PUSH
26670: LD_INT 45
26672: PUSH
26673: LD_INT 75
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: LIST
26680: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26681: LD_VAR 0 6
26685: PPUSH
26686: CALL_OW 264
26690: PUSH
26691: LD_INT 26
26693: PUSH
26694: EMPTY
26695: LIST
26696: IN
26697: IFFALSE 26718
// points := [ 120 , 30 , 80 ] ;
26699: LD_ADDR_VAR 0 9
26703: PUSH
26704: LD_INT 120
26706: PUSH
26707: LD_INT 30
26709: PUSH
26710: LD_INT 80
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: LIST
26717: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26718: LD_VAR 0 6
26722: PPUSH
26723: CALL_OW 264
26727: PUSH
26728: LD_INT 22
26730: PUSH
26731: EMPTY
26732: LIST
26733: IN
26734: IFFALSE 26755
// points := [ 40 , 1 , 1 ] ;
26736: LD_ADDR_VAR 0 9
26740: PUSH
26741: LD_INT 40
26743: PUSH
26744: LD_INT 1
26746: PUSH
26747: LD_INT 1
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: LIST
26754: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26755: LD_VAR 0 6
26759: PPUSH
26760: CALL_OW 264
26764: PUSH
26765: LD_INT 29
26767: PUSH
26768: EMPTY
26769: LIST
26770: IN
26771: IFFALSE 26792
// points := [ 70 , 200 , 400 ] ;
26773: LD_ADDR_VAR 0 9
26777: PUSH
26778: LD_INT 70
26780: PUSH
26781: LD_INT 200
26783: PUSH
26784: LD_INT 400
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: LIST
26791: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26792: LD_VAR 0 6
26796: PPUSH
26797: CALL_OW 264
26801: PUSH
26802: LD_INT 14
26804: PUSH
26805: LD_INT 53
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: IN
26812: IFFALSE 26833
// points := [ 40 , 10 , 20 ] ;
26814: LD_ADDR_VAR 0 9
26818: PUSH
26819: LD_INT 40
26821: PUSH
26822: LD_INT 10
26824: PUSH
26825: LD_INT 20
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: LIST
26832: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26833: LD_VAR 0 6
26837: PPUSH
26838: CALL_OW 264
26842: PUSH
26843: LD_INT 9
26845: PUSH
26846: EMPTY
26847: LIST
26848: IN
26849: IFFALSE 26870
// points := [ 5 , 70 , 20 ] ;
26851: LD_ADDR_VAR 0 9
26855: PUSH
26856: LD_INT 5
26858: PUSH
26859: LD_INT 70
26861: PUSH
26862: LD_INT 20
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: LIST
26869: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
26870: LD_VAR 0 6
26874: PPUSH
26875: CALL_OW 264
26879: PUSH
26880: LD_INT 10
26882: PUSH
26883: EMPTY
26884: LIST
26885: IN
26886: IFFALSE 26907
// points := [ 35 , 110 , 70 ] ;
26888: LD_ADDR_VAR 0 9
26892: PUSH
26893: LD_INT 35
26895: PUSH
26896: LD_INT 110
26898: PUSH
26899: LD_INT 70
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: LIST
26906: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
26907: LD_VAR 0 6
26911: PPUSH
26912: CALL_OW 265
26916: PUSH
26917: LD_INT 25
26919: EQUAL
26920: IFFALSE 26941
// points := [ 80 , 65 , 100 ] ;
26922: LD_ADDR_VAR 0 9
26926: PUSH
26927: LD_INT 80
26929: PUSH
26930: LD_INT 65
26932: PUSH
26933: LD_INT 100
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: LIST
26940: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
26941: LD_VAR 0 6
26945: PPUSH
26946: CALL_OW 263
26950: PUSH
26951: LD_INT 1
26953: EQUAL
26954: IFFALSE 26989
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
26956: LD_ADDR_VAR 0 10
26960: PUSH
26961: LD_VAR 0 10
26965: PUSH
26966: LD_VAR 0 6
26970: PPUSH
26971: CALL_OW 311
26975: PPUSH
26976: LD_INT 3
26978: PPUSH
26979: CALL_OW 259
26983: PUSH
26984: LD_INT 4
26986: MUL
26987: MUL
26988: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
26989: LD_VAR 0 6
26993: PPUSH
26994: CALL_OW 263
26998: PUSH
26999: LD_INT 2
27001: EQUAL
27002: IFFALSE 27053
// begin j := IsControledBy ( i ) ;
27004: LD_ADDR_VAR 0 7
27008: PUSH
27009: LD_VAR 0 6
27013: PPUSH
27014: CALL_OW 312
27018: ST_TO_ADDR
// if j then
27019: LD_VAR 0 7
27023: IFFALSE 27053
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27025: LD_ADDR_VAR 0 10
27029: PUSH
27030: LD_VAR 0 10
27034: PUSH
27035: LD_VAR 0 7
27039: PPUSH
27040: LD_INT 3
27042: PPUSH
27043: CALL_OW 259
27047: PUSH
27048: LD_INT 3
27050: MUL
27051: MUL
27052: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27053: LD_VAR 0 6
27057: PPUSH
27058: CALL_OW 264
27062: PUSH
27063: LD_INT 5
27065: PUSH
27066: LD_INT 6
27068: PUSH
27069: LD_INT 46
27071: PUSH
27072: LD_INT 44
27074: PUSH
27075: LD_INT 47
27077: PUSH
27078: LD_INT 45
27080: PUSH
27081: LD_INT 28
27083: PUSH
27084: LD_INT 7
27086: PUSH
27087: LD_INT 27
27089: PUSH
27090: LD_INT 29
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: IN
27105: PUSH
27106: LD_VAR 0 1
27110: PPUSH
27111: LD_INT 52
27113: PPUSH
27114: CALL_OW 321
27118: PUSH
27119: LD_INT 2
27121: EQUAL
27122: AND
27123: IFFALSE 27140
// bpoints := bpoints * 1.2 ;
27125: LD_ADDR_VAR 0 10
27129: PUSH
27130: LD_VAR 0 10
27134: PUSH
27135: LD_REAL  1.20000000000000E+0000
27138: MUL
27139: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
27140: LD_VAR 0 6
27144: PPUSH
27145: CALL_OW 264
27149: PUSH
27150: LD_INT 6
27152: PUSH
27153: LD_INT 46
27155: PUSH
27156: LD_INT 47
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: LIST
27163: IN
27164: IFFALSE 27181
// bpoints := bpoints * 1.2 ;
27166: LD_ADDR_VAR 0 10
27170: PUSH
27171: LD_VAR 0 10
27175: PUSH
27176: LD_REAL  1.20000000000000E+0000
27179: MUL
27180: ST_TO_ADDR
// end ; unit_building :
27181: GO 27195
27183: LD_INT 3
27185: DOUBLE
27186: EQUAL
27187: IFTRUE 27191
27189: GO 27194
27191: POP
// ; end ;
27192: GO 27195
27194: POP
// for j = 1 to 3 do
27195: LD_ADDR_VAR 0 7
27199: PUSH
27200: DOUBLE
27201: LD_INT 1
27203: DEC
27204: ST_TO_ADDR
27205: LD_INT 3
27207: PUSH
27208: FOR_TO
27209: IFFALSE 27262
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
27211: LD_ADDR_VAR 0 5
27215: PUSH
27216: LD_VAR 0 5
27220: PPUSH
27221: LD_VAR 0 7
27225: PPUSH
27226: LD_VAR 0 5
27230: PUSH
27231: LD_VAR 0 7
27235: ARRAY
27236: PUSH
27237: LD_VAR 0 9
27241: PUSH
27242: LD_VAR 0 7
27246: ARRAY
27247: PUSH
27248: LD_VAR 0 10
27252: MUL
27253: PLUS
27254: PPUSH
27255: CALL_OW 1
27259: ST_TO_ADDR
27260: GO 27208
27262: POP
27263: POP
// end ;
27264: GO 25741
27266: POP
27267: POP
// result := Replace ( result , 4 , tmp ) ;
27268: LD_ADDR_VAR 0 5
27272: PUSH
27273: LD_VAR 0 5
27277: PPUSH
27278: LD_INT 4
27280: PPUSH
27281: LD_VAR 0 8
27285: PPUSH
27286: CALL_OW 1
27290: ST_TO_ADDR
// end ;
27291: LD_VAR 0 5
27295: RET
// export function DangerAtRange ( unit , range ) ; begin
27296: LD_INT 0
27298: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
27299: LD_ADDR_VAR 0 3
27303: PUSH
27304: LD_VAR 0 1
27308: PPUSH
27309: CALL_OW 255
27313: PPUSH
27314: LD_VAR 0 1
27318: PPUSH
27319: CALL_OW 250
27323: PPUSH
27324: LD_VAR 0 1
27328: PPUSH
27329: CALL_OW 251
27333: PPUSH
27334: LD_VAR 0 2
27338: PPUSH
27339: CALL 25593 0 4
27343: ST_TO_ADDR
// end ;
27344: LD_VAR 0 3
27348: RET
// export function DangerInArea ( side , area ) ; begin
27349: LD_INT 0
27351: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
27352: LD_ADDR_VAR 0 3
27356: PUSH
27357: LD_VAR 0 2
27361: PPUSH
27362: LD_INT 81
27364: PUSH
27365: LD_VAR 0 1
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PPUSH
27374: CALL_OW 70
27378: ST_TO_ADDR
// end ;
27379: LD_VAR 0 3
27383: RET
// export function IsExtension ( b ) ; begin
27384: LD_INT 0
27386: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
27387: LD_ADDR_VAR 0 2
27391: PUSH
27392: LD_VAR 0 1
27396: PUSH
27397: LD_INT 23
27399: PUSH
27400: LD_INT 20
27402: PUSH
27403: LD_INT 22
27405: PUSH
27406: LD_INT 17
27408: PUSH
27409: LD_INT 24
27411: PUSH
27412: LD_INT 21
27414: PUSH
27415: LD_INT 19
27417: PUSH
27418: LD_INT 16
27420: PUSH
27421: LD_INT 25
27423: PUSH
27424: LD_INT 18
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: IN
27439: ST_TO_ADDR
// end ;
27440: LD_VAR 0 2
27444: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
27445: LD_INT 0
27447: PPUSH
27448: PPUSH
27449: PPUSH
// result := [ ] ;
27450: LD_ADDR_VAR 0 4
27454: PUSH
27455: EMPTY
27456: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27457: LD_ADDR_VAR 0 5
27461: PUSH
27462: LD_VAR 0 2
27466: PPUSH
27467: LD_INT 21
27469: PUSH
27470: LD_INT 3
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PPUSH
27477: CALL_OW 70
27481: ST_TO_ADDR
// if not tmp then
27482: LD_VAR 0 5
27486: NOT
27487: IFFALSE 27491
// exit ;
27489: GO 27555
// if checkLink then
27491: LD_VAR 0 3
27495: IFFALSE 27545
// begin for i in tmp do
27497: LD_ADDR_VAR 0 6
27501: PUSH
27502: LD_VAR 0 5
27506: PUSH
27507: FOR_IN
27508: IFFALSE 27543
// if GetBase ( i ) <> base then
27510: LD_VAR 0 6
27514: PPUSH
27515: CALL_OW 274
27519: PUSH
27520: LD_VAR 0 1
27524: NONEQUAL
27525: IFFALSE 27541
// ComLinkToBase ( base , i ) ;
27527: LD_VAR 0 1
27531: PPUSH
27532: LD_VAR 0 6
27536: PPUSH
27537: CALL_OW 169
27541: GO 27507
27543: POP
27544: POP
// end ; result := tmp ;
27545: LD_ADDR_VAR 0 4
27549: PUSH
27550: LD_VAR 0 5
27554: ST_TO_ADDR
// end ;
27555: LD_VAR 0 4
27559: RET
// export function ComComplete ( units , b ) ; var i ; begin
27560: LD_INT 0
27562: PPUSH
27563: PPUSH
// if not units then
27564: LD_VAR 0 1
27568: NOT
27569: IFFALSE 27573
// exit ;
27571: GO 27663
// for i in units do
27573: LD_ADDR_VAR 0 4
27577: PUSH
27578: LD_VAR 0 1
27582: PUSH
27583: FOR_IN
27584: IFFALSE 27661
// if BuildingStatus ( b ) = bs_build then
27586: LD_VAR 0 2
27590: PPUSH
27591: CALL_OW 461
27595: PUSH
27596: LD_INT 1
27598: EQUAL
27599: IFFALSE 27659
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27601: LD_VAR 0 4
27605: PPUSH
27606: LD_STRING h
27608: PUSH
27609: LD_VAR 0 2
27613: PPUSH
27614: CALL_OW 250
27618: PUSH
27619: LD_VAR 0 2
27623: PPUSH
27624: CALL_OW 251
27628: PUSH
27629: LD_VAR 0 2
27633: PUSH
27634: LD_INT 0
27636: PUSH
27637: LD_INT 0
27639: PUSH
27640: LD_INT 0
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: PUSH
27652: EMPTY
27653: LIST
27654: PPUSH
27655: CALL_OW 446
27659: GO 27583
27661: POP
27662: POP
// end ;
27663: LD_VAR 0 3
27667: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27668: LD_INT 0
27670: PPUSH
27671: PPUSH
27672: PPUSH
27673: PPUSH
27674: PPUSH
27675: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
27676: LD_VAR 0 1
27680: NOT
27681: PUSH
27682: LD_VAR 0 1
27686: PPUSH
27687: CALL_OW 263
27691: PUSH
27692: LD_INT 2
27694: NONEQUAL
27695: OR
27696: IFFALSE 27700
// exit ;
27698: GO 28016
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27700: LD_ADDR_VAR 0 6
27704: PUSH
27705: LD_INT 22
27707: PUSH
27708: LD_VAR 0 1
27712: PPUSH
27713: CALL_OW 255
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: LD_INT 2
27724: PUSH
27725: LD_INT 30
27727: PUSH
27728: LD_INT 36
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: LD_INT 34
27737: PUSH
27738: LD_INT 31
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: LIST
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: PPUSH
27754: CALL_OW 69
27758: ST_TO_ADDR
// if not tmp then
27759: LD_VAR 0 6
27763: NOT
27764: IFFALSE 27768
// exit ;
27766: GO 28016
// result := [ ] ;
27768: LD_ADDR_VAR 0 2
27772: PUSH
27773: EMPTY
27774: ST_TO_ADDR
// for i in tmp do
27775: LD_ADDR_VAR 0 3
27779: PUSH
27780: LD_VAR 0 6
27784: PUSH
27785: FOR_IN
27786: IFFALSE 27857
// begin t := UnitsInside ( i ) ;
27788: LD_ADDR_VAR 0 4
27792: PUSH
27793: LD_VAR 0 3
27797: PPUSH
27798: CALL_OW 313
27802: ST_TO_ADDR
// if t then
27803: LD_VAR 0 4
27807: IFFALSE 27855
// for j in t do
27809: LD_ADDR_VAR 0 7
27813: PUSH
27814: LD_VAR 0 4
27818: PUSH
27819: FOR_IN
27820: IFFALSE 27853
// result := Replace ( result , result + 1 , j ) ;
27822: LD_ADDR_VAR 0 2
27826: PUSH
27827: LD_VAR 0 2
27831: PPUSH
27832: LD_VAR 0 2
27836: PUSH
27837: LD_INT 1
27839: PLUS
27840: PPUSH
27841: LD_VAR 0 7
27845: PPUSH
27846: CALL_OW 1
27850: ST_TO_ADDR
27851: GO 27819
27853: POP
27854: POP
// end ;
27855: GO 27785
27857: POP
27858: POP
// if not result then
27859: LD_VAR 0 2
27863: NOT
27864: IFFALSE 27868
// exit ;
27866: GO 28016
// mech := result [ 1 ] ;
27868: LD_ADDR_VAR 0 5
27872: PUSH
27873: LD_VAR 0 2
27877: PUSH
27878: LD_INT 1
27880: ARRAY
27881: ST_TO_ADDR
// if result > 1 then
27882: LD_VAR 0 2
27886: PUSH
27887: LD_INT 1
27889: GREATER
27890: IFFALSE 28002
// begin for i = 2 to result do
27892: LD_ADDR_VAR 0 3
27896: PUSH
27897: DOUBLE
27898: LD_INT 2
27900: DEC
27901: ST_TO_ADDR
27902: LD_VAR 0 2
27906: PUSH
27907: FOR_TO
27908: IFFALSE 28000
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
27910: LD_ADDR_VAR 0 4
27914: PUSH
27915: LD_VAR 0 2
27919: PUSH
27920: LD_VAR 0 3
27924: ARRAY
27925: PPUSH
27926: LD_INT 3
27928: PPUSH
27929: CALL_OW 259
27933: PUSH
27934: LD_VAR 0 2
27938: PUSH
27939: LD_VAR 0 3
27943: ARRAY
27944: PPUSH
27945: CALL_OW 432
27949: MINUS
27950: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
27951: LD_VAR 0 4
27955: PUSH
27956: LD_VAR 0 5
27960: PPUSH
27961: LD_INT 3
27963: PPUSH
27964: CALL_OW 259
27968: PUSH
27969: LD_VAR 0 5
27973: PPUSH
27974: CALL_OW 432
27978: MINUS
27979: GREATEREQUAL
27980: IFFALSE 27998
// mech := result [ i ] ;
27982: LD_ADDR_VAR 0 5
27986: PUSH
27987: LD_VAR 0 2
27991: PUSH
27992: LD_VAR 0 3
27996: ARRAY
27997: ST_TO_ADDR
// end ;
27998: GO 27907
28000: POP
28001: POP
// end ; ComLinkTo ( vehicle , mech ) ;
28002: LD_VAR 0 1
28006: PPUSH
28007: LD_VAR 0 5
28011: PPUSH
28012: CALL_OW 135
// end ;
28016: LD_VAR 0 2
28020: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28021: LD_INT 0
28023: PPUSH
28024: PPUSH
28025: PPUSH
28026: PPUSH
28027: PPUSH
28028: PPUSH
28029: PPUSH
28030: PPUSH
28031: PPUSH
28032: PPUSH
28033: PPUSH
28034: PPUSH
28035: PPUSH
// result := [ ] ;
28036: LD_ADDR_VAR 0 7
28040: PUSH
28041: EMPTY
28042: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28043: LD_VAR 0 1
28047: PPUSH
28048: CALL_OW 266
28052: PUSH
28053: LD_INT 0
28055: PUSH
28056: LD_INT 1
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: IN
28063: NOT
28064: IFFALSE 28068
// exit ;
28066: GO 29702
// if name then
28068: LD_VAR 0 3
28072: IFFALSE 28088
// SetBName ( base_dep , name ) ;
28074: LD_VAR 0 1
28078: PPUSH
28079: LD_VAR 0 3
28083: PPUSH
28084: CALL_OW 500
// base := GetBase ( base_dep ) ;
28088: LD_ADDR_VAR 0 15
28092: PUSH
28093: LD_VAR 0 1
28097: PPUSH
28098: CALL_OW 274
28102: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
28103: LD_ADDR_VAR 0 16
28107: PUSH
28108: LD_VAR 0 1
28112: PPUSH
28113: CALL_OW 255
28117: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
28118: LD_ADDR_VAR 0 17
28122: PUSH
28123: LD_VAR 0 1
28127: PPUSH
28128: CALL_OW 248
28132: ST_TO_ADDR
// if sources then
28133: LD_VAR 0 5
28137: IFFALSE 28184
// for i = 1 to 3 do
28139: LD_ADDR_VAR 0 8
28143: PUSH
28144: DOUBLE
28145: LD_INT 1
28147: DEC
28148: ST_TO_ADDR
28149: LD_INT 3
28151: PUSH
28152: FOR_TO
28153: IFFALSE 28182
// AddResourceType ( base , i , sources [ i ] ) ;
28155: LD_VAR 0 15
28159: PPUSH
28160: LD_VAR 0 8
28164: PPUSH
28165: LD_VAR 0 5
28169: PUSH
28170: LD_VAR 0 8
28174: ARRAY
28175: PPUSH
28176: CALL_OW 276
28180: GO 28152
28182: POP
28183: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
28184: LD_ADDR_VAR 0 18
28188: PUSH
28189: LD_VAR 0 15
28193: PPUSH
28194: LD_VAR 0 2
28198: PPUSH
28199: LD_INT 1
28201: PPUSH
28202: CALL 27445 0 3
28206: ST_TO_ADDR
// InitHc ;
28207: CALL_OW 19
// InitUc ;
28211: CALL_OW 18
// uc_side := side ;
28215: LD_ADDR_OWVAR 20
28219: PUSH
28220: LD_VAR 0 16
28224: ST_TO_ADDR
// uc_nation := nation ;
28225: LD_ADDR_OWVAR 21
28229: PUSH
28230: LD_VAR 0 17
28234: ST_TO_ADDR
// if buildings then
28235: LD_VAR 0 18
28239: IFFALSE 29561
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
28241: LD_ADDR_VAR 0 19
28245: PUSH
28246: LD_VAR 0 18
28250: PPUSH
28251: LD_INT 2
28253: PUSH
28254: LD_INT 30
28256: PUSH
28257: LD_INT 29
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 30
28266: PUSH
28267: LD_INT 30
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: LIST
28278: PPUSH
28279: CALL_OW 72
28283: ST_TO_ADDR
// if tmp then
28284: LD_VAR 0 19
28288: IFFALSE 28336
// for i in tmp do
28290: LD_ADDR_VAR 0 8
28294: PUSH
28295: LD_VAR 0 19
28299: PUSH
28300: FOR_IN
28301: IFFALSE 28334
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
28303: LD_VAR 0 8
28307: PPUSH
28308: CALL_OW 250
28312: PPUSH
28313: LD_VAR 0 8
28317: PPUSH
28318: CALL_OW 251
28322: PPUSH
28323: LD_VAR 0 16
28327: PPUSH
28328: CALL_OW 441
28332: GO 28300
28334: POP
28335: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28336: LD_VAR 0 18
28340: PPUSH
28341: LD_INT 2
28343: PUSH
28344: LD_INT 30
28346: PUSH
28347: LD_INT 32
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 30
28356: PUSH
28357: LD_INT 33
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: LIST
28368: PPUSH
28369: CALL_OW 72
28373: IFFALSE 28461
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28375: LD_ADDR_VAR 0 8
28379: PUSH
28380: LD_VAR 0 18
28384: PPUSH
28385: LD_INT 2
28387: PUSH
28388: LD_INT 30
28390: PUSH
28391: LD_INT 32
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 30
28400: PUSH
28401: LD_INT 33
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: LIST
28412: PPUSH
28413: CALL_OW 72
28417: PUSH
28418: FOR_IN
28419: IFFALSE 28459
// begin if not GetBWeapon ( i ) then
28421: LD_VAR 0 8
28425: PPUSH
28426: CALL_OW 269
28430: NOT
28431: IFFALSE 28457
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
28433: LD_VAR 0 8
28437: PPUSH
28438: LD_VAR 0 8
28442: PPUSH
28443: LD_VAR 0 2
28447: PPUSH
28448: CALL 29707 0 2
28452: PPUSH
28453: CALL_OW 431
// end ;
28457: GO 28418
28459: POP
28460: POP
// end ; for i = 1 to personel do
28461: LD_ADDR_VAR 0 8
28465: PUSH
28466: DOUBLE
28467: LD_INT 1
28469: DEC
28470: ST_TO_ADDR
28471: LD_VAR 0 6
28475: PUSH
28476: FOR_TO
28477: IFFALSE 29541
// begin if i > 4 then
28479: LD_VAR 0 8
28483: PUSH
28484: LD_INT 4
28486: GREATER
28487: IFFALSE 28491
// break ;
28489: GO 29541
// case i of 1 :
28491: LD_VAR 0 8
28495: PUSH
28496: LD_INT 1
28498: DOUBLE
28499: EQUAL
28500: IFTRUE 28504
28502: GO 28584
28504: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28505: LD_ADDR_VAR 0 12
28509: PUSH
28510: LD_VAR 0 18
28514: PPUSH
28515: LD_INT 22
28517: PUSH
28518: LD_VAR 0 16
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 58
28529: PUSH
28530: EMPTY
28531: LIST
28532: PUSH
28533: LD_INT 2
28535: PUSH
28536: LD_INT 30
28538: PUSH
28539: LD_INT 32
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 30
28548: PUSH
28549: LD_INT 4
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 30
28558: PUSH
28559: LD_INT 5
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: LIST
28576: PPUSH
28577: CALL_OW 72
28581: ST_TO_ADDR
28582: GO 28806
28584: LD_INT 2
28586: DOUBLE
28587: EQUAL
28588: IFTRUE 28592
28590: GO 28654
28592: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28593: LD_ADDR_VAR 0 12
28597: PUSH
28598: LD_VAR 0 18
28602: PPUSH
28603: LD_INT 22
28605: PUSH
28606: LD_VAR 0 16
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 2
28617: PUSH
28618: LD_INT 30
28620: PUSH
28621: LD_INT 0
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 30
28630: PUSH
28631: LD_INT 1
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: LIST
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PPUSH
28647: CALL_OW 72
28651: ST_TO_ADDR
28652: GO 28806
28654: LD_INT 3
28656: DOUBLE
28657: EQUAL
28658: IFTRUE 28662
28660: GO 28724
28662: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28663: LD_ADDR_VAR 0 12
28667: PUSH
28668: LD_VAR 0 18
28672: PPUSH
28673: LD_INT 22
28675: PUSH
28676: LD_VAR 0 16
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 2
28687: PUSH
28688: LD_INT 30
28690: PUSH
28691: LD_INT 2
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 30
28700: PUSH
28701: LD_INT 3
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: LIST
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PPUSH
28717: CALL_OW 72
28721: ST_TO_ADDR
28722: GO 28806
28724: LD_INT 4
28726: DOUBLE
28727: EQUAL
28728: IFTRUE 28732
28730: GO 28805
28732: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28733: LD_ADDR_VAR 0 12
28737: PUSH
28738: LD_VAR 0 18
28742: PPUSH
28743: LD_INT 22
28745: PUSH
28746: LD_VAR 0 16
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 2
28757: PUSH
28758: LD_INT 30
28760: PUSH
28761: LD_INT 6
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 30
28770: PUSH
28771: LD_INT 7
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 30
28780: PUSH
28781: LD_INT 8
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: PPUSH
28798: CALL_OW 72
28802: ST_TO_ADDR
28803: GO 28806
28805: POP
// if i = 1 then
28806: LD_VAR 0 8
28810: PUSH
28811: LD_INT 1
28813: EQUAL
28814: IFFALSE 28925
// begin tmp := [ ] ;
28816: LD_ADDR_VAR 0 19
28820: PUSH
28821: EMPTY
28822: ST_TO_ADDR
// for j in f do
28823: LD_ADDR_VAR 0 9
28827: PUSH
28828: LD_VAR 0 12
28832: PUSH
28833: FOR_IN
28834: IFFALSE 28907
// if GetBType ( j ) = b_bunker then
28836: LD_VAR 0 9
28840: PPUSH
28841: CALL_OW 266
28845: PUSH
28846: LD_INT 32
28848: EQUAL
28849: IFFALSE 28876
// tmp := Insert ( tmp , 1 , j ) else
28851: LD_ADDR_VAR 0 19
28855: PUSH
28856: LD_VAR 0 19
28860: PPUSH
28861: LD_INT 1
28863: PPUSH
28864: LD_VAR 0 9
28868: PPUSH
28869: CALL_OW 2
28873: ST_TO_ADDR
28874: GO 28905
// tmp := Insert ( tmp , tmp + 1 , j ) ;
28876: LD_ADDR_VAR 0 19
28880: PUSH
28881: LD_VAR 0 19
28885: PPUSH
28886: LD_VAR 0 19
28890: PUSH
28891: LD_INT 1
28893: PLUS
28894: PPUSH
28895: LD_VAR 0 9
28899: PPUSH
28900: CALL_OW 2
28904: ST_TO_ADDR
28905: GO 28833
28907: POP
28908: POP
// if tmp then
28909: LD_VAR 0 19
28913: IFFALSE 28925
// f := tmp ;
28915: LD_ADDR_VAR 0 12
28919: PUSH
28920: LD_VAR 0 19
28924: ST_TO_ADDR
// end ; x := personel [ i ] ;
28925: LD_ADDR_VAR 0 13
28929: PUSH
28930: LD_VAR 0 6
28934: PUSH
28935: LD_VAR 0 8
28939: ARRAY
28940: ST_TO_ADDR
// if x = - 1 then
28941: LD_VAR 0 13
28945: PUSH
28946: LD_INT 1
28948: NEG
28949: EQUAL
28950: IFFALSE 29159
// begin for j in f do
28952: LD_ADDR_VAR 0 9
28956: PUSH
28957: LD_VAR 0 12
28961: PUSH
28962: FOR_IN
28963: IFFALSE 29155
// repeat InitHc ;
28965: CALL_OW 19
// if GetBType ( j ) = b_barracks then
28969: LD_VAR 0 9
28973: PPUSH
28974: CALL_OW 266
28978: PUSH
28979: LD_INT 5
28981: EQUAL
28982: IFFALSE 29052
// begin if UnitsInside ( j ) < 3 then
28984: LD_VAR 0 9
28988: PPUSH
28989: CALL_OW 313
28993: PUSH
28994: LD_INT 3
28996: LESS
28997: IFFALSE 29033
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28999: LD_INT 0
29001: PPUSH
29002: LD_INT 5
29004: PUSH
29005: LD_INT 8
29007: PUSH
29008: LD_INT 9
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: LIST
29015: PUSH
29016: LD_VAR 0 17
29020: ARRAY
29021: PPUSH
29022: LD_VAR 0 4
29026: PPUSH
29027: CALL_OW 380
29031: GO 29050
// PrepareHuman ( false , i , skill ) ;
29033: LD_INT 0
29035: PPUSH
29036: LD_VAR 0 8
29040: PPUSH
29041: LD_VAR 0 4
29045: PPUSH
29046: CALL_OW 380
// end else
29050: GO 29069
// PrepareHuman ( false , i , skill ) ;
29052: LD_INT 0
29054: PPUSH
29055: LD_VAR 0 8
29059: PPUSH
29060: LD_VAR 0 4
29064: PPUSH
29065: CALL_OW 380
// un := CreateHuman ;
29069: LD_ADDR_VAR 0 14
29073: PUSH
29074: CALL_OW 44
29078: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29079: LD_ADDR_VAR 0 7
29083: PUSH
29084: LD_VAR 0 7
29088: PPUSH
29089: LD_INT 1
29091: PPUSH
29092: LD_VAR 0 14
29096: PPUSH
29097: CALL_OW 2
29101: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
29102: LD_VAR 0 14
29106: PPUSH
29107: LD_VAR 0 9
29111: PPUSH
29112: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
29116: LD_VAR 0 9
29120: PPUSH
29121: CALL_OW 313
29125: PUSH
29126: LD_INT 6
29128: EQUAL
29129: PUSH
29130: LD_VAR 0 9
29134: PPUSH
29135: CALL_OW 266
29139: PUSH
29140: LD_INT 32
29142: PUSH
29143: LD_INT 31
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: IN
29150: OR
29151: IFFALSE 28965
29153: GO 28962
29155: POP
29156: POP
// end else
29157: GO 29539
// for j = 1 to x do
29159: LD_ADDR_VAR 0 9
29163: PUSH
29164: DOUBLE
29165: LD_INT 1
29167: DEC
29168: ST_TO_ADDR
29169: LD_VAR 0 13
29173: PUSH
29174: FOR_TO
29175: IFFALSE 29537
// begin InitHc ;
29177: CALL_OW 19
// if not f then
29181: LD_VAR 0 12
29185: NOT
29186: IFFALSE 29275
// begin PrepareHuman ( false , i , skill ) ;
29188: LD_INT 0
29190: PPUSH
29191: LD_VAR 0 8
29195: PPUSH
29196: LD_VAR 0 4
29200: PPUSH
29201: CALL_OW 380
// un := CreateHuman ;
29205: LD_ADDR_VAR 0 14
29209: PUSH
29210: CALL_OW 44
29214: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29215: LD_ADDR_VAR 0 7
29219: PUSH
29220: LD_VAR 0 7
29224: PPUSH
29225: LD_INT 1
29227: PPUSH
29228: LD_VAR 0 14
29232: PPUSH
29233: CALL_OW 2
29237: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29238: LD_VAR 0 14
29242: PPUSH
29243: LD_VAR 0 1
29247: PPUSH
29248: CALL_OW 250
29252: PPUSH
29253: LD_VAR 0 1
29257: PPUSH
29258: CALL_OW 251
29262: PPUSH
29263: LD_INT 10
29265: PPUSH
29266: LD_INT 0
29268: PPUSH
29269: CALL_OW 50
// continue ;
29273: GO 29174
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
29275: LD_VAR 0 12
29279: PUSH
29280: LD_INT 1
29282: ARRAY
29283: PPUSH
29284: CALL_OW 313
29288: PUSH
29289: LD_VAR 0 12
29293: PUSH
29294: LD_INT 1
29296: ARRAY
29297: PPUSH
29298: CALL_OW 266
29302: PUSH
29303: LD_INT 32
29305: PUSH
29306: LD_INT 31
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: IN
29313: AND
29314: PUSH
29315: LD_VAR 0 12
29319: PUSH
29320: LD_INT 1
29322: ARRAY
29323: PPUSH
29324: CALL_OW 313
29328: PUSH
29329: LD_INT 6
29331: EQUAL
29332: OR
29333: IFFALSE 29353
// f := Delete ( f , 1 ) ;
29335: LD_ADDR_VAR 0 12
29339: PUSH
29340: LD_VAR 0 12
29344: PPUSH
29345: LD_INT 1
29347: PPUSH
29348: CALL_OW 3
29352: ST_TO_ADDR
// if not f then
29353: LD_VAR 0 12
29357: NOT
29358: IFFALSE 29376
// begin x := x + 2 ;
29360: LD_ADDR_VAR 0 13
29364: PUSH
29365: LD_VAR 0 13
29369: PUSH
29370: LD_INT 2
29372: PLUS
29373: ST_TO_ADDR
// continue ;
29374: GO 29174
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29376: LD_VAR 0 12
29380: PUSH
29381: LD_INT 1
29383: ARRAY
29384: PPUSH
29385: CALL_OW 266
29389: PUSH
29390: LD_INT 5
29392: EQUAL
29393: IFFALSE 29467
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29395: LD_VAR 0 12
29399: PUSH
29400: LD_INT 1
29402: ARRAY
29403: PPUSH
29404: CALL_OW 313
29408: PUSH
29409: LD_INT 3
29411: LESS
29412: IFFALSE 29448
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29414: LD_INT 0
29416: PPUSH
29417: LD_INT 5
29419: PUSH
29420: LD_INT 8
29422: PUSH
29423: LD_INT 9
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: LIST
29430: PUSH
29431: LD_VAR 0 17
29435: ARRAY
29436: PPUSH
29437: LD_VAR 0 4
29441: PPUSH
29442: CALL_OW 380
29446: GO 29465
// PrepareHuman ( false , i , skill ) ;
29448: LD_INT 0
29450: PPUSH
29451: LD_VAR 0 8
29455: PPUSH
29456: LD_VAR 0 4
29460: PPUSH
29461: CALL_OW 380
// end else
29465: GO 29484
// PrepareHuman ( false , i , skill ) ;
29467: LD_INT 0
29469: PPUSH
29470: LD_VAR 0 8
29474: PPUSH
29475: LD_VAR 0 4
29479: PPUSH
29480: CALL_OW 380
// un := CreateHuman ;
29484: LD_ADDR_VAR 0 14
29488: PUSH
29489: CALL_OW 44
29493: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29494: LD_ADDR_VAR 0 7
29498: PUSH
29499: LD_VAR 0 7
29503: PPUSH
29504: LD_INT 1
29506: PPUSH
29507: LD_VAR 0 14
29511: PPUSH
29512: CALL_OW 2
29516: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29517: LD_VAR 0 14
29521: PPUSH
29522: LD_VAR 0 12
29526: PUSH
29527: LD_INT 1
29529: ARRAY
29530: PPUSH
29531: CALL_OW 52
// end ;
29535: GO 29174
29537: POP
29538: POP
// end ;
29539: GO 28476
29541: POP
29542: POP
// result := result ^ buildings ;
29543: LD_ADDR_VAR 0 7
29547: PUSH
29548: LD_VAR 0 7
29552: PUSH
29553: LD_VAR 0 18
29557: ADD
29558: ST_TO_ADDR
// end else
29559: GO 29702
// begin for i = 1 to personel do
29561: LD_ADDR_VAR 0 8
29565: PUSH
29566: DOUBLE
29567: LD_INT 1
29569: DEC
29570: ST_TO_ADDR
29571: LD_VAR 0 6
29575: PUSH
29576: FOR_TO
29577: IFFALSE 29700
// begin if i > 4 then
29579: LD_VAR 0 8
29583: PUSH
29584: LD_INT 4
29586: GREATER
29587: IFFALSE 29591
// break ;
29589: GO 29700
// x := personel [ i ] ;
29591: LD_ADDR_VAR 0 13
29595: PUSH
29596: LD_VAR 0 6
29600: PUSH
29601: LD_VAR 0 8
29605: ARRAY
29606: ST_TO_ADDR
// if x = - 1 then
29607: LD_VAR 0 13
29611: PUSH
29612: LD_INT 1
29614: NEG
29615: EQUAL
29616: IFFALSE 29620
// continue ;
29618: GO 29576
// PrepareHuman ( false , i , skill ) ;
29620: LD_INT 0
29622: PPUSH
29623: LD_VAR 0 8
29627: PPUSH
29628: LD_VAR 0 4
29632: PPUSH
29633: CALL_OW 380
// un := CreateHuman ;
29637: LD_ADDR_VAR 0 14
29641: PUSH
29642: CALL_OW 44
29646: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29647: LD_VAR 0 14
29651: PPUSH
29652: LD_VAR 0 1
29656: PPUSH
29657: CALL_OW 250
29661: PPUSH
29662: LD_VAR 0 1
29666: PPUSH
29667: CALL_OW 251
29671: PPUSH
29672: LD_INT 10
29674: PPUSH
29675: LD_INT 0
29677: PPUSH
29678: CALL_OW 50
// result := result ^ un ;
29682: LD_ADDR_VAR 0 7
29686: PUSH
29687: LD_VAR 0 7
29691: PUSH
29692: LD_VAR 0 14
29696: ADD
29697: ST_TO_ADDR
// end ;
29698: GO 29576
29700: POP
29701: POP
// end ; end ;
29702: LD_VAR 0 7
29706: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29707: LD_INT 0
29709: PPUSH
29710: PPUSH
29711: PPUSH
29712: PPUSH
29713: PPUSH
29714: PPUSH
29715: PPUSH
29716: PPUSH
29717: PPUSH
29718: PPUSH
29719: PPUSH
29720: PPUSH
29721: PPUSH
29722: PPUSH
29723: PPUSH
29724: PPUSH
// result := false ;
29725: LD_ADDR_VAR 0 3
29729: PUSH
29730: LD_INT 0
29732: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29733: LD_VAR 0 1
29737: NOT
29738: PUSH
29739: LD_VAR 0 1
29743: PPUSH
29744: CALL_OW 266
29748: PUSH
29749: LD_INT 32
29751: PUSH
29752: LD_INT 33
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: IN
29759: NOT
29760: OR
29761: IFFALSE 29765
// exit ;
29763: GO 30874
// nat := GetNation ( tower ) ;
29765: LD_ADDR_VAR 0 12
29769: PUSH
29770: LD_VAR 0 1
29774: PPUSH
29775: CALL_OW 248
29779: ST_TO_ADDR
// side := GetSide ( tower ) ;
29780: LD_ADDR_VAR 0 16
29784: PUSH
29785: LD_VAR 0 1
29789: PPUSH
29790: CALL_OW 255
29794: ST_TO_ADDR
// x := GetX ( tower ) ;
29795: LD_ADDR_VAR 0 10
29799: PUSH
29800: LD_VAR 0 1
29804: PPUSH
29805: CALL_OW 250
29809: ST_TO_ADDR
// y := GetY ( tower ) ;
29810: LD_ADDR_VAR 0 11
29814: PUSH
29815: LD_VAR 0 1
29819: PPUSH
29820: CALL_OW 251
29824: ST_TO_ADDR
// if not x or not y then
29825: LD_VAR 0 10
29829: NOT
29830: PUSH
29831: LD_VAR 0 11
29835: NOT
29836: OR
29837: IFFALSE 29841
// exit ;
29839: GO 30874
// weapon := 0 ;
29841: LD_ADDR_VAR 0 18
29845: PUSH
29846: LD_INT 0
29848: ST_TO_ADDR
// fac_list := [ ] ;
29849: LD_ADDR_VAR 0 17
29853: PUSH
29854: EMPTY
29855: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
29856: LD_ADDR_VAR 0 6
29860: PUSH
29861: LD_VAR 0 1
29865: PPUSH
29866: CALL_OW 274
29870: PPUSH
29871: LD_VAR 0 2
29875: PPUSH
29876: LD_INT 0
29878: PPUSH
29879: CALL 27445 0 3
29883: PPUSH
29884: LD_INT 30
29886: PUSH
29887: LD_INT 3
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PPUSH
29894: CALL_OW 72
29898: ST_TO_ADDR
// if not factories then
29899: LD_VAR 0 6
29903: NOT
29904: IFFALSE 29908
// exit ;
29906: GO 30874
// for i in factories do
29908: LD_ADDR_VAR 0 8
29912: PUSH
29913: LD_VAR 0 6
29917: PUSH
29918: FOR_IN
29919: IFFALSE 29944
// fac_list := fac_list union AvailableWeaponList ( i ) ;
29921: LD_ADDR_VAR 0 17
29925: PUSH
29926: LD_VAR 0 17
29930: PUSH
29931: LD_VAR 0 8
29935: PPUSH
29936: CALL_OW 478
29940: UNION
29941: ST_TO_ADDR
29942: GO 29918
29944: POP
29945: POP
// if not fac_list then
29946: LD_VAR 0 17
29950: NOT
29951: IFFALSE 29955
// exit ;
29953: GO 30874
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
29955: LD_ADDR_VAR 0 5
29959: PUSH
29960: LD_INT 4
29962: PUSH
29963: LD_INT 5
29965: PUSH
29966: LD_INT 9
29968: PUSH
29969: LD_INT 10
29971: PUSH
29972: LD_INT 6
29974: PUSH
29975: LD_INT 7
29977: PUSH
29978: LD_INT 11
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 27
29992: PUSH
29993: LD_INT 28
29995: PUSH
29996: LD_INT 26
29998: PUSH
29999: LD_INT 30
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 43
30010: PUSH
30011: LD_INT 44
30013: PUSH
30014: LD_INT 46
30016: PUSH
30017: LD_INT 45
30019: PUSH
30020: LD_INT 47
30022: PUSH
30023: LD_INT 49
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: LIST
30038: PUSH
30039: LD_VAR 0 12
30043: ARRAY
30044: ST_TO_ADDR
// list := list isect fac_list ;
30045: LD_ADDR_VAR 0 5
30049: PUSH
30050: LD_VAR 0 5
30054: PUSH
30055: LD_VAR 0 17
30059: ISECT
30060: ST_TO_ADDR
// if not list then
30061: LD_VAR 0 5
30065: NOT
30066: IFFALSE 30070
// exit ;
30068: GO 30874
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
30070: LD_VAR 0 12
30074: PUSH
30075: LD_INT 3
30077: EQUAL
30078: PUSH
30079: LD_INT 49
30081: PUSH
30082: LD_VAR 0 5
30086: IN
30087: AND
30088: PUSH
30089: LD_INT 31
30091: PPUSH
30092: LD_VAR 0 16
30096: PPUSH
30097: CALL_OW 321
30101: PUSH
30102: LD_INT 2
30104: EQUAL
30105: AND
30106: IFFALSE 30166
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
30108: LD_INT 22
30110: PUSH
30111: LD_VAR 0 16
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 35
30122: PUSH
30123: LD_INT 49
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 91
30132: PUSH
30133: LD_VAR 0 1
30137: PUSH
30138: LD_INT 10
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: LIST
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: LIST
30150: PPUSH
30151: CALL_OW 69
30155: NOT
30156: IFFALSE 30166
// weapon := ru_time_lapser ;
30158: LD_ADDR_VAR 0 18
30162: PUSH
30163: LD_INT 49
30165: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
30166: LD_VAR 0 12
30170: PUSH
30171: LD_INT 1
30173: PUSH
30174: LD_INT 2
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: IN
30181: PUSH
30182: LD_INT 11
30184: PUSH
30185: LD_VAR 0 5
30189: IN
30190: PUSH
30191: LD_INT 30
30193: PUSH
30194: LD_VAR 0 5
30198: IN
30199: OR
30200: AND
30201: PUSH
30202: LD_INT 6
30204: PPUSH
30205: LD_VAR 0 16
30209: PPUSH
30210: CALL_OW 321
30214: PUSH
30215: LD_INT 2
30217: EQUAL
30218: AND
30219: IFFALSE 30384
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
30221: LD_INT 22
30223: PUSH
30224: LD_VAR 0 16
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 2
30235: PUSH
30236: LD_INT 35
30238: PUSH
30239: LD_INT 11
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 35
30248: PUSH
30249: LD_INT 30
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 91
30263: PUSH
30264: LD_VAR 0 1
30268: PUSH
30269: LD_INT 18
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: LIST
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: LIST
30281: PPUSH
30282: CALL_OW 69
30286: NOT
30287: PUSH
30288: LD_INT 22
30290: PUSH
30291: LD_VAR 0 16
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 2
30302: PUSH
30303: LD_INT 30
30305: PUSH
30306: LD_INT 32
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 30
30315: PUSH
30316: LD_INT 33
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 91
30330: PUSH
30331: LD_VAR 0 1
30335: PUSH
30336: LD_INT 12
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: LIST
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: LIST
30348: PUSH
30349: EMPTY
30350: LIST
30351: PPUSH
30352: CALL_OW 69
30356: PUSH
30357: LD_INT 2
30359: GREATER
30360: AND
30361: IFFALSE 30384
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30363: LD_ADDR_VAR 0 18
30367: PUSH
30368: LD_INT 11
30370: PUSH
30371: LD_INT 30
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: LD_VAR 0 12
30382: ARRAY
30383: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30384: LD_VAR 0 18
30388: NOT
30389: PUSH
30390: LD_INT 40
30392: PPUSH
30393: LD_VAR 0 16
30397: PPUSH
30398: CALL_OW 321
30402: PUSH
30403: LD_INT 2
30405: EQUAL
30406: AND
30407: PUSH
30408: LD_INT 7
30410: PUSH
30411: LD_VAR 0 5
30415: IN
30416: PUSH
30417: LD_INT 28
30419: PUSH
30420: LD_VAR 0 5
30424: IN
30425: OR
30426: PUSH
30427: LD_INT 45
30429: PUSH
30430: LD_VAR 0 5
30434: IN
30435: OR
30436: AND
30437: IFFALSE 30691
// begin hex := GetHexInfo ( x , y ) ;
30439: LD_ADDR_VAR 0 4
30443: PUSH
30444: LD_VAR 0 10
30448: PPUSH
30449: LD_VAR 0 11
30453: PPUSH
30454: CALL_OW 546
30458: ST_TO_ADDR
// if hex [ 1 ] then
30459: LD_VAR 0 4
30463: PUSH
30464: LD_INT 1
30466: ARRAY
30467: IFFALSE 30471
// exit ;
30469: GO 30874
// height := hex [ 2 ] ;
30471: LD_ADDR_VAR 0 15
30475: PUSH
30476: LD_VAR 0 4
30480: PUSH
30481: LD_INT 2
30483: ARRAY
30484: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30485: LD_ADDR_VAR 0 14
30489: PUSH
30490: LD_INT 0
30492: PUSH
30493: LD_INT 2
30495: PUSH
30496: LD_INT 3
30498: PUSH
30499: LD_INT 5
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: ST_TO_ADDR
// for i in tmp do
30508: LD_ADDR_VAR 0 8
30512: PUSH
30513: LD_VAR 0 14
30517: PUSH
30518: FOR_IN
30519: IFFALSE 30689
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30521: LD_ADDR_VAR 0 9
30525: PUSH
30526: LD_VAR 0 10
30530: PPUSH
30531: LD_VAR 0 8
30535: PPUSH
30536: LD_INT 5
30538: PPUSH
30539: CALL_OW 272
30543: PUSH
30544: LD_VAR 0 11
30548: PPUSH
30549: LD_VAR 0 8
30553: PPUSH
30554: LD_INT 5
30556: PPUSH
30557: CALL_OW 273
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30566: LD_VAR 0 9
30570: PUSH
30571: LD_INT 1
30573: ARRAY
30574: PPUSH
30575: LD_VAR 0 9
30579: PUSH
30580: LD_INT 2
30582: ARRAY
30583: PPUSH
30584: CALL_OW 488
30588: IFFALSE 30687
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30590: LD_ADDR_VAR 0 4
30594: PUSH
30595: LD_VAR 0 9
30599: PUSH
30600: LD_INT 1
30602: ARRAY
30603: PPUSH
30604: LD_VAR 0 9
30608: PUSH
30609: LD_INT 2
30611: ARRAY
30612: PPUSH
30613: CALL_OW 546
30617: ST_TO_ADDR
// if hex [ 1 ] then
30618: LD_VAR 0 4
30622: PUSH
30623: LD_INT 1
30625: ARRAY
30626: IFFALSE 30630
// continue ;
30628: GO 30518
// h := hex [ 2 ] ;
30630: LD_ADDR_VAR 0 13
30634: PUSH
30635: LD_VAR 0 4
30639: PUSH
30640: LD_INT 2
30642: ARRAY
30643: ST_TO_ADDR
// if h + 7 < height then
30644: LD_VAR 0 13
30648: PUSH
30649: LD_INT 7
30651: PLUS
30652: PUSH
30653: LD_VAR 0 15
30657: LESS
30658: IFFALSE 30687
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30660: LD_ADDR_VAR 0 18
30664: PUSH
30665: LD_INT 7
30667: PUSH
30668: LD_INT 28
30670: PUSH
30671: LD_INT 45
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: LIST
30678: PUSH
30679: LD_VAR 0 12
30683: ARRAY
30684: ST_TO_ADDR
// break ;
30685: GO 30689
// end ; end ; end ;
30687: GO 30518
30689: POP
30690: POP
// end ; if not weapon then
30691: LD_VAR 0 18
30695: NOT
30696: IFFALSE 30756
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30698: LD_ADDR_VAR 0 5
30702: PUSH
30703: LD_VAR 0 5
30707: PUSH
30708: LD_INT 11
30710: PUSH
30711: LD_INT 30
30713: PUSH
30714: LD_INT 49
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: LIST
30721: DIFF
30722: ST_TO_ADDR
// if not list then
30723: LD_VAR 0 5
30727: NOT
30728: IFFALSE 30732
// exit ;
30730: GO 30874
// weapon := list [ rand ( 1 , list ) ] ;
30732: LD_ADDR_VAR 0 18
30736: PUSH
30737: LD_VAR 0 5
30741: PUSH
30742: LD_INT 1
30744: PPUSH
30745: LD_VAR 0 5
30749: PPUSH
30750: CALL_OW 12
30754: ARRAY
30755: ST_TO_ADDR
// end ; if weapon then
30756: LD_VAR 0 18
30760: IFFALSE 30874
// begin tmp := CostOfWeapon ( weapon ) ;
30762: LD_ADDR_VAR 0 14
30766: PUSH
30767: LD_VAR 0 18
30771: PPUSH
30772: CALL_OW 451
30776: ST_TO_ADDR
// j := GetBase ( tower ) ;
30777: LD_ADDR_VAR 0 9
30781: PUSH
30782: LD_VAR 0 1
30786: PPUSH
30787: CALL_OW 274
30791: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30792: LD_VAR 0 9
30796: PPUSH
30797: LD_INT 1
30799: PPUSH
30800: CALL_OW 275
30804: PUSH
30805: LD_VAR 0 14
30809: PUSH
30810: LD_INT 1
30812: ARRAY
30813: GREATEREQUAL
30814: PUSH
30815: LD_VAR 0 9
30819: PPUSH
30820: LD_INT 2
30822: PPUSH
30823: CALL_OW 275
30827: PUSH
30828: LD_VAR 0 14
30832: PUSH
30833: LD_INT 2
30835: ARRAY
30836: GREATEREQUAL
30837: AND
30838: PUSH
30839: LD_VAR 0 9
30843: PPUSH
30844: LD_INT 3
30846: PPUSH
30847: CALL_OW 275
30851: PUSH
30852: LD_VAR 0 14
30856: PUSH
30857: LD_INT 3
30859: ARRAY
30860: GREATEREQUAL
30861: AND
30862: IFFALSE 30874
// result := weapon ;
30864: LD_ADDR_VAR 0 3
30868: PUSH
30869: LD_VAR 0 18
30873: ST_TO_ADDR
// end ; end ;
30874: LD_VAR 0 3
30878: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
30879: LD_INT 0
30881: PPUSH
30882: PPUSH
// result := true ;
30883: LD_ADDR_VAR 0 3
30887: PUSH
30888: LD_INT 1
30890: ST_TO_ADDR
// if array1 = array2 then
30891: LD_VAR 0 1
30895: PUSH
30896: LD_VAR 0 2
30900: EQUAL
30901: IFFALSE 30961
// begin for i = 1 to array1 do
30903: LD_ADDR_VAR 0 4
30907: PUSH
30908: DOUBLE
30909: LD_INT 1
30911: DEC
30912: ST_TO_ADDR
30913: LD_VAR 0 1
30917: PUSH
30918: FOR_TO
30919: IFFALSE 30957
// if array1 [ i ] <> array2 [ i ] then
30921: LD_VAR 0 1
30925: PUSH
30926: LD_VAR 0 4
30930: ARRAY
30931: PUSH
30932: LD_VAR 0 2
30936: PUSH
30937: LD_VAR 0 4
30941: ARRAY
30942: NONEQUAL
30943: IFFALSE 30955
// begin result := false ;
30945: LD_ADDR_VAR 0 3
30949: PUSH
30950: LD_INT 0
30952: ST_TO_ADDR
// break ;
30953: GO 30957
// end ;
30955: GO 30918
30957: POP
30958: POP
// end else
30959: GO 30969
// result := false ;
30961: LD_ADDR_VAR 0 3
30965: PUSH
30966: LD_INT 0
30968: ST_TO_ADDR
// end ;
30969: LD_VAR 0 3
30973: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
30974: LD_INT 0
30976: PPUSH
30977: PPUSH
// if not array1 or not array2 then
30978: LD_VAR 0 1
30982: NOT
30983: PUSH
30984: LD_VAR 0 2
30988: NOT
30989: OR
30990: IFFALSE 30994
// exit ;
30992: GO 31058
// result := true ;
30994: LD_ADDR_VAR 0 3
30998: PUSH
30999: LD_INT 1
31001: ST_TO_ADDR
// for i = 1 to array1 do
31002: LD_ADDR_VAR 0 4
31006: PUSH
31007: DOUBLE
31008: LD_INT 1
31010: DEC
31011: ST_TO_ADDR
31012: LD_VAR 0 1
31016: PUSH
31017: FOR_TO
31018: IFFALSE 31056
// if array1 [ i ] <> array2 [ i ] then
31020: LD_VAR 0 1
31024: PUSH
31025: LD_VAR 0 4
31029: ARRAY
31030: PUSH
31031: LD_VAR 0 2
31035: PUSH
31036: LD_VAR 0 4
31040: ARRAY
31041: NONEQUAL
31042: IFFALSE 31054
// begin result := false ;
31044: LD_ADDR_VAR 0 3
31048: PUSH
31049: LD_INT 0
31051: ST_TO_ADDR
// break ;
31052: GO 31056
// end ;
31054: GO 31017
31056: POP
31057: POP
// end ;
31058: LD_VAR 0 3
31062: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31063: LD_INT 0
31065: PPUSH
31066: PPUSH
31067: PPUSH
// pom := GetBase ( fac ) ;
31068: LD_ADDR_VAR 0 5
31072: PUSH
31073: LD_VAR 0 1
31077: PPUSH
31078: CALL_OW 274
31082: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31083: LD_ADDR_VAR 0 4
31087: PUSH
31088: LD_VAR 0 2
31092: PUSH
31093: LD_INT 1
31095: ARRAY
31096: PPUSH
31097: LD_VAR 0 2
31101: PUSH
31102: LD_INT 2
31104: ARRAY
31105: PPUSH
31106: LD_VAR 0 2
31110: PUSH
31111: LD_INT 3
31113: ARRAY
31114: PPUSH
31115: LD_VAR 0 2
31119: PUSH
31120: LD_INT 4
31122: ARRAY
31123: PPUSH
31124: CALL_OW 449
31128: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31129: LD_ADDR_VAR 0 3
31133: PUSH
31134: LD_VAR 0 5
31138: PPUSH
31139: LD_INT 1
31141: PPUSH
31142: CALL_OW 275
31146: PUSH
31147: LD_VAR 0 4
31151: PUSH
31152: LD_INT 1
31154: ARRAY
31155: GREATEREQUAL
31156: PUSH
31157: LD_VAR 0 5
31161: PPUSH
31162: LD_INT 2
31164: PPUSH
31165: CALL_OW 275
31169: PUSH
31170: LD_VAR 0 4
31174: PUSH
31175: LD_INT 2
31177: ARRAY
31178: GREATEREQUAL
31179: AND
31180: PUSH
31181: LD_VAR 0 5
31185: PPUSH
31186: LD_INT 3
31188: PPUSH
31189: CALL_OW 275
31193: PUSH
31194: LD_VAR 0 4
31198: PUSH
31199: LD_INT 3
31201: ARRAY
31202: GREATEREQUAL
31203: AND
31204: ST_TO_ADDR
// end ;
31205: LD_VAR 0 3
31209: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
31210: LD_INT 0
31212: PPUSH
31213: PPUSH
31214: PPUSH
31215: PPUSH
// pom := GetBase ( building ) ;
31216: LD_ADDR_VAR 0 3
31220: PUSH
31221: LD_VAR 0 1
31225: PPUSH
31226: CALL_OW 274
31230: ST_TO_ADDR
// if not pom then
31231: LD_VAR 0 3
31235: NOT
31236: IFFALSE 31240
// exit ;
31238: GO 31410
// btype := GetBType ( building ) ;
31240: LD_ADDR_VAR 0 5
31244: PUSH
31245: LD_VAR 0 1
31249: PPUSH
31250: CALL_OW 266
31254: ST_TO_ADDR
// if btype = b_armoury then
31255: LD_VAR 0 5
31259: PUSH
31260: LD_INT 4
31262: EQUAL
31263: IFFALSE 31273
// btype := b_barracks ;
31265: LD_ADDR_VAR 0 5
31269: PUSH
31270: LD_INT 5
31272: ST_TO_ADDR
// if btype = b_depot then
31273: LD_VAR 0 5
31277: PUSH
31278: LD_INT 0
31280: EQUAL
31281: IFFALSE 31291
// btype := b_warehouse ;
31283: LD_ADDR_VAR 0 5
31287: PUSH
31288: LD_INT 1
31290: ST_TO_ADDR
// if btype = b_workshop then
31291: LD_VAR 0 5
31295: PUSH
31296: LD_INT 2
31298: EQUAL
31299: IFFALSE 31309
// btype := b_factory ;
31301: LD_ADDR_VAR 0 5
31305: PUSH
31306: LD_INT 3
31308: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31309: LD_ADDR_VAR 0 4
31313: PUSH
31314: LD_VAR 0 5
31318: PPUSH
31319: LD_VAR 0 1
31323: PPUSH
31324: CALL_OW 248
31328: PPUSH
31329: CALL_OW 450
31333: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31334: LD_ADDR_VAR 0 2
31338: PUSH
31339: LD_VAR 0 3
31343: PPUSH
31344: LD_INT 1
31346: PPUSH
31347: CALL_OW 275
31351: PUSH
31352: LD_VAR 0 4
31356: PUSH
31357: LD_INT 1
31359: ARRAY
31360: GREATEREQUAL
31361: PUSH
31362: LD_VAR 0 3
31366: PPUSH
31367: LD_INT 2
31369: PPUSH
31370: CALL_OW 275
31374: PUSH
31375: LD_VAR 0 4
31379: PUSH
31380: LD_INT 2
31382: ARRAY
31383: GREATEREQUAL
31384: AND
31385: PUSH
31386: LD_VAR 0 3
31390: PPUSH
31391: LD_INT 3
31393: PPUSH
31394: CALL_OW 275
31398: PUSH
31399: LD_VAR 0 4
31403: PUSH
31404: LD_INT 3
31406: ARRAY
31407: GREATEREQUAL
31408: AND
31409: ST_TO_ADDR
// end ;
31410: LD_VAR 0 2
31414: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31415: LD_INT 0
31417: PPUSH
31418: PPUSH
31419: PPUSH
// pom := GetBase ( building ) ;
31420: LD_ADDR_VAR 0 4
31424: PUSH
31425: LD_VAR 0 1
31429: PPUSH
31430: CALL_OW 274
31434: ST_TO_ADDR
// if not pom then
31435: LD_VAR 0 4
31439: NOT
31440: IFFALSE 31444
// exit ;
31442: GO 31545
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31444: LD_ADDR_VAR 0 5
31448: PUSH
31449: LD_VAR 0 2
31453: PPUSH
31454: LD_VAR 0 1
31458: PPUSH
31459: CALL_OW 248
31463: PPUSH
31464: CALL_OW 450
31468: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31469: LD_ADDR_VAR 0 3
31473: PUSH
31474: LD_VAR 0 4
31478: PPUSH
31479: LD_INT 1
31481: PPUSH
31482: CALL_OW 275
31486: PUSH
31487: LD_VAR 0 5
31491: PUSH
31492: LD_INT 1
31494: ARRAY
31495: GREATEREQUAL
31496: PUSH
31497: LD_VAR 0 4
31501: PPUSH
31502: LD_INT 2
31504: PPUSH
31505: CALL_OW 275
31509: PUSH
31510: LD_VAR 0 5
31514: PUSH
31515: LD_INT 2
31517: ARRAY
31518: GREATEREQUAL
31519: AND
31520: PUSH
31521: LD_VAR 0 4
31525: PPUSH
31526: LD_INT 3
31528: PPUSH
31529: CALL_OW 275
31533: PUSH
31534: LD_VAR 0 5
31538: PUSH
31539: LD_INT 3
31541: ARRAY
31542: GREATEREQUAL
31543: AND
31544: ST_TO_ADDR
// end ;
31545: LD_VAR 0 3
31549: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
31550: LD_INT 0
31552: PPUSH
31553: PPUSH
31554: PPUSH
31555: PPUSH
31556: PPUSH
31557: PPUSH
31558: PPUSH
31559: PPUSH
31560: PPUSH
31561: PPUSH
31562: PPUSH
// result := false ;
31563: LD_ADDR_VAR 0 8
31567: PUSH
31568: LD_INT 0
31570: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
31571: LD_VAR 0 5
31575: NOT
31576: PUSH
31577: LD_VAR 0 1
31581: NOT
31582: OR
31583: PUSH
31584: LD_VAR 0 2
31588: NOT
31589: OR
31590: PUSH
31591: LD_VAR 0 3
31595: NOT
31596: OR
31597: IFFALSE 31601
// exit ;
31599: GO 32415
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
31601: LD_ADDR_VAR 0 14
31605: PUSH
31606: LD_VAR 0 1
31610: PPUSH
31611: LD_VAR 0 2
31615: PPUSH
31616: LD_VAR 0 3
31620: PPUSH
31621: LD_VAR 0 4
31625: PPUSH
31626: LD_VAR 0 5
31630: PUSH
31631: LD_INT 1
31633: ARRAY
31634: PPUSH
31635: CALL_OW 248
31639: PPUSH
31640: LD_INT 0
31642: PPUSH
31643: CALL 33652 0 6
31647: ST_TO_ADDR
// if not hexes then
31648: LD_VAR 0 14
31652: NOT
31653: IFFALSE 31657
// exit ;
31655: GO 32415
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31657: LD_ADDR_VAR 0 17
31661: PUSH
31662: LD_VAR 0 5
31666: PPUSH
31667: LD_INT 22
31669: PUSH
31670: LD_VAR 0 13
31674: PPUSH
31675: CALL_OW 255
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 2
31686: PUSH
31687: LD_INT 30
31689: PUSH
31690: LD_INT 0
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 30
31699: PUSH
31700: LD_INT 1
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: LIST
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PPUSH
31716: CALL_OW 72
31720: ST_TO_ADDR
// for i = 1 to hexes do
31721: LD_ADDR_VAR 0 9
31725: PUSH
31726: DOUBLE
31727: LD_INT 1
31729: DEC
31730: ST_TO_ADDR
31731: LD_VAR 0 14
31735: PUSH
31736: FOR_TO
31737: IFFALSE 32413
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31739: LD_ADDR_VAR 0 13
31743: PUSH
31744: LD_VAR 0 14
31748: PUSH
31749: LD_VAR 0 9
31753: ARRAY
31754: PUSH
31755: LD_INT 1
31757: ARRAY
31758: PPUSH
31759: LD_VAR 0 14
31763: PUSH
31764: LD_VAR 0 9
31768: ARRAY
31769: PUSH
31770: LD_INT 2
31772: ARRAY
31773: PPUSH
31774: CALL_OW 428
31778: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31779: LD_VAR 0 14
31783: PUSH
31784: LD_VAR 0 9
31788: ARRAY
31789: PUSH
31790: LD_INT 1
31792: ARRAY
31793: PPUSH
31794: LD_VAR 0 14
31798: PUSH
31799: LD_VAR 0 9
31803: ARRAY
31804: PUSH
31805: LD_INT 2
31807: ARRAY
31808: PPUSH
31809: CALL_OW 351
31813: PUSH
31814: LD_VAR 0 14
31818: PUSH
31819: LD_VAR 0 9
31823: ARRAY
31824: PUSH
31825: LD_INT 1
31827: ARRAY
31828: PPUSH
31829: LD_VAR 0 14
31833: PUSH
31834: LD_VAR 0 9
31838: ARRAY
31839: PUSH
31840: LD_INT 2
31842: ARRAY
31843: PPUSH
31844: CALL_OW 488
31848: NOT
31849: OR
31850: PUSH
31851: LD_VAR 0 13
31855: PPUSH
31856: CALL_OW 247
31860: PUSH
31861: LD_INT 3
31863: EQUAL
31864: OR
31865: IFFALSE 31871
// exit ;
31867: POP
31868: POP
31869: GO 32415
// if not tmp then
31871: LD_VAR 0 13
31875: NOT
31876: IFFALSE 31880
// continue ;
31878: GO 31736
// result := true ;
31880: LD_ADDR_VAR 0 8
31884: PUSH
31885: LD_INT 1
31887: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
31888: LD_VAR 0 6
31892: PUSH
31893: LD_VAR 0 13
31897: PPUSH
31898: CALL_OW 247
31902: PUSH
31903: LD_INT 2
31905: EQUAL
31906: AND
31907: PUSH
31908: LD_VAR 0 13
31912: PPUSH
31913: CALL_OW 263
31917: PUSH
31918: LD_INT 1
31920: EQUAL
31921: AND
31922: IFFALSE 32086
// begin if IsDrivenBy ( tmp ) then
31924: LD_VAR 0 13
31928: PPUSH
31929: CALL_OW 311
31933: IFFALSE 31937
// continue ;
31935: GO 31736
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
31937: LD_VAR 0 6
31941: PPUSH
31942: LD_INT 3
31944: PUSH
31945: LD_INT 60
31947: PUSH
31948: EMPTY
31949: LIST
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: LD_INT 3
31957: PUSH
31958: LD_INT 55
31960: PUSH
31961: EMPTY
31962: LIST
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PPUSH
31972: CALL_OW 72
31976: IFFALSE 32084
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
31978: LD_ADDR_VAR 0 18
31982: PUSH
31983: LD_VAR 0 6
31987: PPUSH
31988: LD_INT 3
31990: PUSH
31991: LD_INT 60
31993: PUSH
31994: EMPTY
31995: LIST
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 3
32003: PUSH
32004: LD_INT 55
32006: PUSH
32007: EMPTY
32008: LIST
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PPUSH
32018: CALL_OW 72
32022: PUSH
32023: LD_INT 1
32025: ARRAY
32026: ST_TO_ADDR
// if IsInUnit ( driver ) then
32027: LD_VAR 0 18
32031: PPUSH
32032: CALL_OW 310
32036: IFFALSE 32047
// ComExit ( driver ) ;
32038: LD_VAR 0 18
32042: PPUSH
32043: CALL 56836 0 1
// AddComEnterUnit ( driver , tmp ) ;
32047: LD_VAR 0 18
32051: PPUSH
32052: LD_VAR 0 13
32056: PPUSH
32057: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
32061: LD_VAR 0 18
32065: PPUSH
32066: LD_VAR 0 7
32070: PPUSH
32071: CALL_OW 173
// AddComExitVehicle ( driver ) ;
32075: LD_VAR 0 18
32079: PPUSH
32080: CALL_OW 181
// end ; continue ;
32084: GO 31736
// end ; if not cleaners or not tmp in cleaners then
32086: LD_VAR 0 6
32090: NOT
32091: PUSH
32092: LD_VAR 0 13
32096: PUSH
32097: LD_VAR 0 6
32101: IN
32102: NOT
32103: OR
32104: IFFALSE 32411
// begin if dep then
32106: LD_VAR 0 17
32110: IFFALSE 32246
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
32112: LD_ADDR_VAR 0 16
32116: PUSH
32117: LD_VAR 0 17
32121: PUSH
32122: LD_INT 1
32124: ARRAY
32125: PPUSH
32126: CALL_OW 250
32130: PPUSH
32131: LD_VAR 0 17
32135: PUSH
32136: LD_INT 1
32138: ARRAY
32139: PPUSH
32140: CALL_OW 254
32144: PPUSH
32145: LD_INT 5
32147: PPUSH
32148: CALL_OW 272
32152: PUSH
32153: LD_VAR 0 17
32157: PUSH
32158: LD_INT 1
32160: ARRAY
32161: PPUSH
32162: CALL_OW 251
32166: PPUSH
32167: LD_VAR 0 17
32171: PUSH
32172: LD_INT 1
32174: ARRAY
32175: PPUSH
32176: CALL_OW 254
32180: PPUSH
32181: LD_INT 5
32183: PPUSH
32184: CALL_OW 273
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
32193: LD_VAR 0 16
32197: PUSH
32198: LD_INT 1
32200: ARRAY
32201: PPUSH
32202: LD_VAR 0 16
32206: PUSH
32207: LD_INT 2
32209: ARRAY
32210: PPUSH
32211: CALL_OW 488
32215: IFFALSE 32246
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
32217: LD_VAR 0 13
32221: PPUSH
32222: LD_VAR 0 16
32226: PUSH
32227: LD_INT 1
32229: ARRAY
32230: PPUSH
32231: LD_VAR 0 16
32235: PUSH
32236: LD_INT 2
32238: ARRAY
32239: PPUSH
32240: CALL_OW 111
// continue ;
32244: GO 31736
// end ; end ; r := GetDir ( tmp ) ;
32246: LD_ADDR_VAR 0 15
32250: PUSH
32251: LD_VAR 0 13
32255: PPUSH
32256: CALL_OW 254
32260: ST_TO_ADDR
// if r = 5 then
32261: LD_VAR 0 15
32265: PUSH
32266: LD_INT 5
32268: EQUAL
32269: IFFALSE 32279
// r := 0 ;
32271: LD_ADDR_VAR 0 15
32275: PUSH
32276: LD_INT 0
32278: ST_TO_ADDR
// for j = r to 5 do
32279: LD_ADDR_VAR 0 10
32283: PUSH
32284: DOUBLE
32285: LD_VAR 0 15
32289: DEC
32290: ST_TO_ADDR
32291: LD_INT 5
32293: PUSH
32294: FOR_TO
32295: IFFALSE 32409
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32297: LD_ADDR_VAR 0 11
32301: PUSH
32302: LD_VAR 0 13
32306: PPUSH
32307: CALL_OW 250
32311: PPUSH
32312: LD_VAR 0 10
32316: PPUSH
32317: LD_INT 2
32319: PPUSH
32320: CALL_OW 272
32324: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32325: LD_ADDR_VAR 0 12
32329: PUSH
32330: LD_VAR 0 13
32334: PPUSH
32335: CALL_OW 251
32339: PPUSH
32340: LD_VAR 0 10
32344: PPUSH
32345: LD_INT 2
32347: PPUSH
32348: CALL_OW 273
32352: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32353: LD_VAR 0 11
32357: PPUSH
32358: LD_VAR 0 12
32362: PPUSH
32363: CALL_OW 488
32367: PUSH
32368: LD_VAR 0 11
32372: PPUSH
32373: LD_VAR 0 12
32377: PPUSH
32378: CALL_OW 428
32382: NOT
32383: AND
32384: IFFALSE 32407
// begin ComMoveXY ( tmp , _x , _y ) ;
32386: LD_VAR 0 13
32390: PPUSH
32391: LD_VAR 0 11
32395: PPUSH
32396: LD_VAR 0 12
32400: PPUSH
32401: CALL_OW 111
// break ;
32405: GO 32409
// end ; end ;
32407: GO 32294
32409: POP
32410: POP
// end ; end ;
32411: GO 31736
32413: POP
32414: POP
// end ;
32415: LD_VAR 0 8
32419: RET
// export function BuildingTechInvented ( side , btype ) ; begin
32420: LD_INT 0
32422: PPUSH
// result := true ;
32423: LD_ADDR_VAR 0 3
32427: PUSH
32428: LD_INT 1
32430: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
32431: LD_VAR 0 2
32435: PUSH
32436: LD_INT 24
32438: DOUBLE
32439: EQUAL
32440: IFTRUE 32450
32442: LD_INT 33
32444: DOUBLE
32445: EQUAL
32446: IFTRUE 32450
32448: GO 32475
32450: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
32451: LD_ADDR_VAR 0 3
32455: PUSH
32456: LD_INT 32
32458: PPUSH
32459: LD_VAR 0 1
32463: PPUSH
32464: CALL_OW 321
32468: PUSH
32469: LD_INT 2
32471: EQUAL
32472: ST_TO_ADDR
32473: GO 32795
32475: LD_INT 20
32477: DOUBLE
32478: EQUAL
32479: IFTRUE 32483
32481: GO 32508
32483: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
32484: LD_ADDR_VAR 0 3
32488: PUSH
32489: LD_INT 6
32491: PPUSH
32492: LD_VAR 0 1
32496: PPUSH
32497: CALL_OW 321
32501: PUSH
32502: LD_INT 2
32504: EQUAL
32505: ST_TO_ADDR
32506: GO 32795
32508: LD_INT 22
32510: DOUBLE
32511: EQUAL
32512: IFTRUE 32522
32514: LD_INT 36
32516: DOUBLE
32517: EQUAL
32518: IFTRUE 32522
32520: GO 32547
32522: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
32523: LD_ADDR_VAR 0 3
32527: PUSH
32528: LD_INT 15
32530: PPUSH
32531: LD_VAR 0 1
32535: PPUSH
32536: CALL_OW 321
32540: PUSH
32541: LD_INT 2
32543: EQUAL
32544: ST_TO_ADDR
32545: GO 32795
32547: LD_INT 30
32549: DOUBLE
32550: EQUAL
32551: IFTRUE 32555
32553: GO 32580
32555: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
32556: LD_ADDR_VAR 0 3
32560: PUSH
32561: LD_INT 20
32563: PPUSH
32564: LD_VAR 0 1
32568: PPUSH
32569: CALL_OW 321
32573: PUSH
32574: LD_INT 2
32576: EQUAL
32577: ST_TO_ADDR
32578: GO 32795
32580: LD_INT 28
32582: DOUBLE
32583: EQUAL
32584: IFTRUE 32594
32586: LD_INT 21
32588: DOUBLE
32589: EQUAL
32590: IFTRUE 32594
32592: GO 32619
32594: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
32595: LD_ADDR_VAR 0 3
32599: PUSH
32600: LD_INT 21
32602: PPUSH
32603: LD_VAR 0 1
32607: PPUSH
32608: CALL_OW 321
32612: PUSH
32613: LD_INT 2
32615: EQUAL
32616: ST_TO_ADDR
32617: GO 32795
32619: LD_INT 16
32621: DOUBLE
32622: EQUAL
32623: IFTRUE 32627
32625: GO 32654
32627: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
32628: LD_ADDR_VAR 0 3
32632: PUSH
32633: LD_EXP 41
32637: PPUSH
32638: LD_VAR 0 1
32642: PPUSH
32643: CALL_OW 321
32647: PUSH
32648: LD_INT 2
32650: EQUAL
32651: ST_TO_ADDR
32652: GO 32795
32654: LD_INT 19
32656: DOUBLE
32657: EQUAL
32658: IFTRUE 32668
32660: LD_INT 23
32662: DOUBLE
32663: EQUAL
32664: IFTRUE 32668
32666: GO 32695
32668: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
32669: LD_ADDR_VAR 0 3
32673: PUSH
32674: LD_EXP 40
32678: PPUSH
32679: LD_VAR 0 1
32683: PPUSH
32684: CALL_OW 321
32688: PUSH
32689: LD_INT 2
32691: EQUAL
32692: ST_TO_ADDR
32693: GO 32795
32695: LD_INT 17
32697: DOUBLE
32698: EQUAL
32699: IFTRUE 32703
32701: GO 32728
32703: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
32704: LD_ADDR_VAR 0 3
32708: PUSH
32709: LD_INT 39
32711: PPUSH
32712: LD_VAR 0 1
32716: PPUSH
32717: CALL_OW 321
32721: PUSH
32722: LD_INT 2
32724: EQUAL
32725: ST_TO_ADDR
32726: GO 32795
32728: LD_INT 18
32730: DOUBLE
32731: EQUAL
32732: IFTRUE 32736
32734: GO 32761
32736: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
32737: LD_ADDR_VAR 0 3
32741: PUSH
32742: LD_INT 40
32744: PPUSH
32745: LD_VAR 0 1
32749: PPUSH
32750: CALL_OW 321
32754: PUSH
32755: LD_INT 2
32757: EQUAL
32758: ST_TO_ADDR
32759: GO 32795
32761: LD_INT 27
32763: DOUBLE
32764: EQUAL
32765: IFTRUE 32769
32767: GO 32794
32769: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
32770: LD_ADDR_VAR 0 3
32774: PUSH
32775: LD_INT 35
32777: PPUSH
32778: LD_VAR 0 1
32782: PPUSH
32783: CALL_OW 321
32787: PUSH
32788: LD_INT 2
32790: EQUAL
32791: ST_TO_ADDR
32792: GO 32795
32794: POP
// end ;
32795: LD_VAR 0 3
32799: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
32800: LD_INT 0
32802: PPUSH
32803: PPUSH
32804: PPUSH
32805: PPUSH
32806: PPUSH
32807: PPUSH
32808: PPUSH
32809: PPUSH
32810: PPUSH
32811: PPUSH
32812: PPUSH
// result := false ;
32813: LD_ADDR_VAR 0 6
32817: PUSH
32818: LD_INT 0
32820: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
32821: LD_VAR 0 1
32825: NOT
32826: PUSH
32827: LD_VAR 0 1
32831: PPUSH
32832: CALL_OW 266
32836: PUSH
32837: LD_INT 0
32839: PUSH
32840: LD_INT 1
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: IN
32847: NOT
32848: OR
32849: PUSH
32850: LD_VAR 0 2
32854: NOT
32855: OR
32856: PUSH
32857: LD_VAR 0 5
32861: PUSH
32862: LD_INT 0
32864: PUSH
32865: LD_INT 1
32867: PUSH
32868: LD_INT 2
32870: PUSH
32871: LD_INT 3
32873: PUSH
32874: LD_INT 4
32876: PUSH
32877: LD_INT 5
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: IN
32888: NOT
32889: OR
32890: PUSH
32891: LD_VAR 0 3
32895: PPUSH
32896: LD_VAR 0 4
32900: PPUSH
32901: CALL_OW 488
32905: NOT
32906: OR
32907: IFFALSE 32911
// exit ;
32909: GO 33647
// side := GetSide ( depot ) ;
32911: LD_ADDR_VAR 0 9
32915: PUSH
32916: LD_VAR 0 1
32920: PPUSH
32921: CALL_OW 255
32925: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
32926: LD_VAR 0 9
32930: PPUSH
32931: LD_VAR 0 2
32935: PPUSH
32936: CALL 32420 0 2
32940: NOT
32941: IFFALSE 32945
// exit ;
32943: GO 33647
// pom := GetBase ( depot ) ;
32945: LD_ADDR_VAR 0 10
32949: PUSH
32950: LD_VAR 0 1
32954: PPUSH
32955: CALL_OW 274
32959: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
32960: LD_ADDR_VAR 0 11
32964: PUSH
32965: LD_VAR 0 2
32969: PPUSH
32970: LD_VAR 0 1
32974: PPUSH
32975: CALL_OW 248
32979: PPUSH
32980: CALL_OW 450
32984: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
32985: LD_VAR 0 10
32989: PPUSH
32990: LD_INT 1
32992: PPUSH
32993: CALL_OW 275
32997: PUSH
32998: LD_VAR 0 11
33002: PUSH
33003: LD_INT 1
33005: ARRAY
33006: GREATEREQUAL
33007: PUSH
33008: LD_VAR 0 10
33012: PPUSH
33013: LD_INT 2
33015: PPUSH
33016: CALL_OW 275
33020: PUSH
33021: LD_VAR 0 11
33025: PUSH
33026: LD_INT 2
33028: ARRAY
33029: GREATEREQUAL
33030: AND
33031: PUSH
33032: LD_VAR 0 10
33036: PPUSH
33037: LD_INT 3
33039: PPUSH
33040: CALL_OW 275
33044: PUSH
33045: LD_VAR 0 11
33049: PUSH
33050: LD_INT 3
33052: ARRAY
33053: GREATEREQUAL
33054: AND
33055: NOT
33056: IFFALSE 33060
// exit ;
33058: GO 33647
// if GetBType ( depot ) = b_depot then
33060: LD_VAR 0 1
33064: PPUSH
33065: CALL_OW 266
33069: PUSH
33070: LD_INT 0
33072: EQUAL
33073: IFFALSE 33085
// dist := 28 else
33075: LD_ADDR_VAR 0 14
33079: PUSH
33080: LD_INT 28
33082: ST_TO_ADDR
33083: GO 33093
// dist := 36 ;
33085: LD_ADDR_VAR 0 14
33089: PUSH
33090: LD_INT 36
33092: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33093: LD_VAR 0 1
33097: PPUSH
33098: LD_VAR 0 3
33102: PPUSH
33103: LD_VAR 0 4
33107: PPUSH
33108: CALL_OW 297
33112: PUSH
33113: LD_VAR 0 14
33117: GREATER
33118: IFFALSE 33122
// exit ;
33120: GO 33647
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33122: LD_ADDR_VAR 0 12
33126: PUSH
33127: LD_VAR 0 2
33131: PPUSH
33132: LD_VAR 0 3
33136: PPUSH
33137: LD_VAR 0 4
33141: PPUSH
33142: LD_VAR 0 5
33146: PPUSH
33147: LD_VAR 0 1
33151: PPUSH
33152: CALL_OW 248
33156: PPUSH
33157: LD_INT 0
33159: PPUSH
33160: CALL 33652 0 6
33164: ST_TO_ADDR
// if not hexes then
33165: LD_VAR 0 12
33169: NOT
33170: IFFALSE 33174
// exit ;
33172: GO 33647
// hex := GetHexInfo ( x , y ) ;
33174: LD_ADDR_VAR 0 15
33178: PUSH
33179: LD_VAR 0 3
33183: PPUSH
33184: LD_VAR 0 4
33188: PPUSH
33189: CALL_OW 546
33193: ST_TO_ADDR
// if hex [ 1 ] then
33194: LD_VAR 0 15
33198: PUSH
33199: LD_INT 1
33201: ARRAY
33202: IFFALSE 33206
// exit ;
33204: GO 33647
// height := hex [ 2 ] ;
33206: LD_ADDR_VAR 0 13
33210: PUSH
33211: LD_VAR 0 15
33215: PUSH
33216: LD_INT 2
33218: ARRAY
33219: ST_TO_ADDR
// for i = 1 to hexes do
33220: LD_ADDR_VAR 0 7
33224: PUSH
33225: DOUBLE
33226: LD_INT 1
33228: DEC
33229: ST_TO_ADDR
33230: LD_VAR 0 12
33234: PUSH
33235: FOR_TO
33236: IFFALSE 33566
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33238: LD_VAR 0 12
33242: PUSH
33243: LD_VAR 0 7
33247: ARRAY
33248: PUSH
33249: LD_INT 1
33251: ARRAY
33252: PPUSH
33253: LD_VAR 0 12
33257: PUSH
33258: LD_VAR 0 7
33262: ARRAY
33263: PUSH
33264: LD_INT 2
33266: ARRAY
33267: PPUSH
33268: CALL_OW 488
33272: NOT
33273: PUSH
33274: LD_VAR 0 12
33278: PUSH
33279: LD_VAR 0 7
33283: ARRAY
33284: PUSH
33285: LD_INT 1
33287: ARRAY
33288: PPUSH
33289: LD_VAR 0 12
33293: PUSH
33294: LD_VAR 0 7
33298: ARRAY
33299: PUSH
33300: LD_INT 2
33302: ARRAY
33303: PPUSH
33304: CALL_OW 428
33308: PUSH
33309: LD_INT 0
33311: GREATER
33312: OR
33313: PUSH
33314: LD_VAR 0 12
33318: PUSH
33319: LD_VAR 0 7
33323: ARRAY
33324: PUSH
33325: LD_INT 1
33327: ARRAY
33328: PPUSH
33329: LD_VAR 0 12
33333: PUSH
33334: LD_VAR 0 7
33338: ARRAY
33339: PUSH
33340: LD_INT 2
33342: ARRAY
33343: PPUSH
33344: CALL_OW 351
33348: OR
33349: IFFALSE 33355
// exit ;
33351: POP
33352: POP
33353: GO 33647
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33355: LD_ADDR_VAR 0 8
33359: PUSH
33360: LD_VAR 0 12
33364: PUSH
33365: LD_VAR 0 7
33369: ARRAY
33370: PUSH
33371: LD_INT 1
33373: ARRAY
33374: PPUSH
33375: LD_VAR 0 12
33379: PUSH
33380: LD_VAR 0 7
33384: ARRAY
33385: PUSH
33386: LD_INT 2
33388: ARRAY
33389: PPUSH
33390: CALL_OW 546
33394: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33395: LD_VAR 0 8
33399: PUSH
33400: LD_INT 1
33402: ARRAY
33403: PUSH
33404: LD_VAR 0 8
33408: PUSH
33409: LD_INT 2
33411: ARRAY
33412: PUSH
33413: LD_VAR 0 13
33417: PUSH
33418: LD_INT 2
33420: PLUS
33421: GREATER
33422: OR
33423: PUSH
33424: LD_VAR 0 8
33428: PUSH
33429: LD_INT 2
33431: ARRAY
33432: PUSH
33433: LD_VAR 0 13
33437: PUSH
33438: LD_INT 2
33440: MINUS
33441: LESS
33442: OR
33443: PUSH
33444: LD_VAR 0 8
33448: PUSH
33449: LD_INT 3
33451: ARRAY
33452: PUSH
33453: LD_INT 0
33455: PUSH
33456: LD_INT 8
33458: PUSH
33459: LD_INT 9
33461: PUSH
33462: LD_INT 10
33464: PUSH
33465: LD_INT 11
33467: PUSH
33468: LD_INT 12
33470: PUSH
33471: LD_INT 13
33473: PUSH
33474: LD_INT 16
33476: PUSH
33477: LD_INT 17
33479: PUSH
33480: LD_INT 18
33482: PUSH
33483: LD_INT 19
33485: PUSH
33486: LD_INT 20
33488: PUSH
33489: LD_INT 21
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: IN
33507: NOT
33508: OR
33509: PUSH
33510: LD_VAR 0 8
33514: PUSH
33515: LD_INT 5
33517: ARRAY
33518: NOT
33519: OR
33520: PUSH
33521: LD_VAR 0 8
33525: PUSH
33526: LD_INT 6
33528: ARRAY
33529: PUSH
33530: LD_INT 1
33532: PUSH
33533: LD_INT 2
33535: PUSH
33536: LD_INT 7
33538: PUSH
33539: LD_INT 9
33541: PUSH
33542: LD_INT 10
33544: PUSH
33545: LD_INT 11
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: IN
33556: NOT
33557: OR
33558: IFFALSE 33564
// exit ;
33560: POP
33561: POP
33562: GO 33647
// end ;
33564: GO 33235
33566: POP
33567: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33568: LD_VAR 0 9
33572: PPUSH
33573: LD_VAR 0 3
33577: PPUSH
33578: LD_VAR 0 4
33582: PPUSH
33583: LD_INT 20
33585: PPUSH
33586: CALL 25593 0 4
33590: PUSH
33591: LD_INT 4
33593: ARRAY
33594: IFFALSE 33598
// exit ;
33596: GO 33647
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
33598: LD_VAR 0 2
33602: PUSH
33603: LD_INT 29
33605: PUSH
33606: LD_INT 30
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: IN
33613: PUSH
33614: LD_VAR 0 3
33618: PPUSH
33619: LD_VAR 0 4
33623: PPUSH
33624: LD_VAR 0 9
33628: PPUSH
33629: CALL_OW 440
33633: NOT
33634: AND
33635: IFFALSE 33639
// exit ;
33637: GO 33647
// result := true ;
33639: LD_ADDR_VAR 0 6
33643: PUSH
33644: LD_INT 1
33646: ST_TO_ADDR
// end ;
33647: LD_VAR 0 6
33651: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
33652: LD_INT 0
33654: PPUSH
33655: PPUSH
33656: PPUSH
33657: PPUSH
33658: PPUSH
33659: PPUSH
33660: PPUSH
33661: PPUSH
33662: PPUSH
33663: PPUSH
33664: PPUSH
33665: PPUSH
33666: PPUSH
33667: PPUSH
33668: PPUSH
33669: PPUSH
33670: PPUSH
33671: PPUSH
33672: PPUSH
33673: PPUSH
33674: PPUSH
33675: PPUSH
33676: PPUSH
33677: PPUSH
33678: PPUSH
33679: PPUSH
33680: PPUSH
33681: PPUSH
33682: PPUSH
33683: PPUSH
33684: PPUSH
33685: PPUSH
33686: PPUSH
33687: PPUSH
33688: PPUSH
33689: PPUSH
33690: PPUSH
33691: PPUSH
33692: PPUSH
33693: PPUSH
33694: PPUSH
33695: PPUSH
33696: PPUSH
33697: PPUSH
33698: PPUSH
33699: PPUSH
33700: PPUSH
33701: PPUSH
33702: PPUSH
33703: PPUSH
33704: PPUSH
33705: PPUSH
33706: PPUSH
33707: PPUSH
33708: PPUSH
33709: PPUSH
33710: PPUSH
33711: PPUSH
// result = [ ] ;
33712: LD_ADDR_VAR 0 7
33716: PUSH
33717: EMPTY
33718: ST_TO_ADDR
// temp_list = [ ] ;
33719: LD_ADDR_VAR 0 9
33723: PUSH
33724: EMPTY
33725: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
33726: LD_VAR 0 4
33730: PUSH
33731: LD_INT 0
33733: PUSH
33734: LD_INT 1
33736: PUSH
33737: LD_INT 2
33739: PUSH
33740: LD_INT 3
33742: PUSH
33743: LD_INT 4
33745: PUSH
33746: LD_INT 5
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: IN
33757: NOT
33758: PUSH
33759: LD_VAR 0 1
33763: PUSH
33764: LD_INT 0
33766: PUSH
33767: LD_INT 1
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: IN
33774: PUSH
33775: LD_VAR 0 5
33779: PUSH
33780: LD_INT 1
33782: PUSH
33783: LD_INT 2
33785: PUSH
33786: LD_INT 3
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: LIST
33793: IN
33794: NOT
33795: AND
33796: OR
33797: IFFALSE 33801
// exit ;
33799: GO 52192
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
33801: LD_VAR 0 1
33805: PUSH
33806: LD_INT 6
33808: PUSH
33809: LD_INT 7
33811: PUSH
33812: LD_INT 8
33814: PUSH
33815: LD_INT 13
33817: PUSH
33818: LD_INT 12
33820: PUSH
33821: LD_INT 15
33823: PUSH
33824: LD_INT 11
33826: PUSH
33827: LD_INT 14
33829: PUSH
33830: LD_INT 10
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: IN
33844: IFFALSE 33854
// btype = b_lab ;
33846: LD_ADDR_VAR 0 1
33850: PUSH
33851: LD_INT 6
33853: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
33854: LD_VAR 0 6
33858: PUSH
33859: LD_INT 0
33861: PUSH
33862: LD_INT 1
33864: PUSH
33865: LD_INT 2
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: LIST
33872: IN
33873: NOT
33874: PUSH
33875: LD_VAR 0 1
33879: PUSH
33880: LD_INT 0
33882: PUSH
33883: LD_INT 1
33885: PUSH
33886: LD_INT 2
33888: PUSH
33889: LD_INT 3
33891: PUSH
33892: LD_INT 6
33894: PUSH
33895: LD_INT 36
33897: PUSH
33898: LD_INT 4
33900: PUSH
33901: LD_INT 5
33903: PUSH
33904: LD_INT 31
33906: PUSH
33907: LD_INT 32
33909: PUSH
33910: LD_INT 33
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: IN
33926: NOT
33927: PUSH
33928: LD_VAR 0 6
33932: PUSH
33933: LD_INT 1
33935: EQUAL
33936: AND
33937: OR
33938: PUSH
33939: LD_VAR 0 1
33943: PUSH
33944: LD_INT 2
33946: PUSH
33947: LD_INT 3
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: IN
33954: NOT
33955: PUSH
33956: LD_VAR 0 6
33960: PUSH
33961: LD_INT 2
33963: EQUAL
33964: AND
33965: OR
33966: IFFALSE 33976
// mode = 0 ;
33968: LD_ADDR_VAR 0 6
33972: PUSH
33973: LD_INT 0
33975: ST_TO_ADDR
// case mode of 0 :
33976: LD_VAR 0 6
33980: PUSH
33981: LD_INT 0
33983: DOUBLE
33984: EQUAL
33985: IFTRUE 33989
33987: GO 45442
33989: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33990: LD_ADDR_VAR 0 11
33994: PUSH
33995: LD_INT 0
33997: PUSH
33998: LD_INT 0
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 0
34007: PUSH
34008: LD_INT 1
34010: NEG
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 1
34018: PUSH
34019: LD_INT 0
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 1
34028: PUSH
34029: LD_INT 1
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 0
34038: PUSH
34039: LD_INT 1
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 1
34048: NEG
34049: PUSH
34050: LD_INT 0
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: LD_INT 1
34059: NEG
34060: PUSH
34061: LD_INT 1
34063: NEG
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: LD_INT 1
34071: NEG
34072: PUSH
34073: LD_INT 2
34075: NEG
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 0
34083: PUSH
34084: LD_INT 2
34086: NEG
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 1
34094: PUSH
34095: LD_INT 1
34097: NEG
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 1
34105: PUSH
34106: LD_INT 2
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 0
34115: PUSH
34116: LD_INT 2
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 1
34125: NEG
34126: PUSH
34127: LD_INT 1
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 1
34136: PUSH
34137: LD_INT 3
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 0
34146: PUSH
34147: LD_INT 3
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 1
34156: NEG
34157: PUSH
34158: LD_INT 2
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34183: LD_ADDR_VAR 0 12
34187: PUSH
34188: LD_INT 0
34190: PUSH
34191: LD_INT 0
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 0
34200: PUSH
34201: LD_INT 1
34203: NEG
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 1
34211: PUSH
34212: LD_INT 0
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 1
34221: PUSH
34222: LD_INT 1
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 0
34231: PUSH
34232: LD_INT 1
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: PUSH
34239: LD_INT 1
34241: NEG
34242: PUSH
34243: LD_INT 0
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: LD_INT 1
34252: NEG
34253: PUSH
34254: LD_INT 1
34256: NEG
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 1
34264: PUSH
34265: LD_INT 1
34267: NEG
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 2
34275: PUSH
34276: LD_INT 0
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 2
34285: PUSH
34286: LD_INT 1
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 1
34295: NEG
34296: PUSH
34297: LD_INT 1
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 2
34306: NEG
34307: PUSH
34308: LD_INT 0
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 2
34317: NEG
34318: PUSH
34319: LD_INT 1
34321: NEG
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 2
34329: NEG
34330: PUSH
34331: LD_INT 1
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 3
34340: NEG
34341: PUSH
34342: LD_INT 0
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 3
34351: NEG
34352: PUSH
34353: LD_INT 1
34355: NEG
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34379: LD_ADDR_VAR 0 13
34383: PUSH
34384: LD_INT 0
34386: PUSH
34387: LD_INT 0
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 0
34396: PUSH
34397: LD_INT 1
34399: NEG
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 1
34407: PUSH
34408: LD_INT 0
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 1
34417: PUSH
34418: LD_INT 1
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 0
34427: PUSH
34428: LD_INT 1
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 1
34437: NEG
34438: PUSH
34439: LD_INT 0
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 1
34448: NEG
34449: PUSH
34450: LD_INT 1
34452: NEG
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 1
34460: NEG
34461: PUSH
34462: LD_INT 2
34464: NEG
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 2
34472: PUSH
34473: LD_INT 1
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 2
34482: PUSH
34483: LD_INT 2
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 1
34492: PUSH
34493: LD_INT 2
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 2
34502: NEG
34503: PUSH
34504: LD_INT 1
34506: NEG
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 2
34514: NEG
34515: PUSH
34516: LD_INT 2
34518: NEG
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 2
34526: NEG
34527: PUSH
34528: LD_INT 3
34530: NEG
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 3
34538: NEG
34539: PUSH
34540: LD_INT 2
34542: NEG
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 3
34550: NEG
34551: PUSH
34552: LD_INT 3
34554: NEG
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34578: LD_ADDR_VAR 0 14
34582: PUSH
34583: LD_INT 0
34585: PUSH
34586: LD_INT 0
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_INT 0
34595: PUSH
34596: LD_INT 1
34598: NEG
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 1
34606: PUSH
34607: LD_INT 0
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 1
34616: PUSH
34617: LD_INT 1
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 0
34626: PUSH
34627: LD_INT 1
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 1
34636: NEG
34637: PUSH
34638: LD_INT 0
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 1
34647: NEG
34648: PUSH
34649: LD_INT 1
34651: NEG
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 1
34659: NEG
34660: PUSH
34661: LD_INT 2
34663: NEG
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 0
34671: PUSH
34672: LD_INT 2
34674: NEG
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: LD_INT 1
34682: PUSH
34683: LD_INT 1
34685: NEG
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 1
34693: PUSH
34694: LD_INT 2
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 0
34703: PUSH
34704: LD_INT 2
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 1
34713: NEG
34714: PUSH
34715: LD_INT 1
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 1
34724: NEG
34725: PUSH
34726: LD_INT 3
34728: NEG
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 0
34736: PUSH
34737: LD_INT 3
34739: NEG
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 1
34747: PUSH
34748: LD_INT 2
34750: NEG
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34774: LD_ADDR_VAR 0 15
34778: PUSH
34779: LD_INT 0
34781: PUSH
34782: LD_INT 0
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 0
34791: PUSH
34792: LD_INT 1
34794: NEG
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 1
34802: PUSH
34803: LD_INT 0
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 1
34812: PUSH
34813: LD_INT 1
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 0
34822: PUSH
34823: LD_INT 1
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 1
34832: NEG
34833: PUSH
34834: LD_INT 0
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 1
34843: NEG
34844: PUSH
34845: LD_INT 1
34847: NEG
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 1
34855: PUSH
34856: LD_INT 1
34858: NEG
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 2
34866: PUSH
34867: LD_INT 0
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 2
34876: PUSH
34877: LD_INT 1
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 1
34886: NEG
34887: PUSH
34888: LD_INT 1
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 2
34897: NEG
34898: PUSH
34899: LD_INT 0
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 2
34908: NEG
34909: PUSH
34910: LD_INT 1
34912: NEG
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 2
34920: PUSH
34921: LD_INT 1
34923: NEG
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 3
34931: PUSH
34932: LD_INT 0
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 3
34941: PUSH
34942: LD_INT 1
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34967: LD_ADDR_VAR 0 16
34971: PUSH
34972: LD_INT 0
34974: PUSH
34975: LD_INT 0
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 0
34984: PUSH
34985: LD_INT 1
34987: NEG
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 1
34995: PUSH
34996: LD_INT 0
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 1
35005: PUSH
35006: LD_INT 1
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 0
35015: PUSH
35016: LD_INT 1
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 1
35025: NEG
35026: PUSH
35027: LD_INT 0
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 1
35036: NEG
35037: PUSH
35038: LD_INT 1
35040: NEG
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 1
35048: NEG
35049: PUSH
35050: LD_INT 2
35052: NEG
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 2
35060: PUSH
35061: LD_INT 1
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 2
35070: PUSH
35071: LD_INT 2
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 1
35080: PUSH
35081: LD_INT 2
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 2
35090: NEG
35091: PUSH
35092: LD_INT 1
35094: NEG
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 2
35102: NEG
35103: PUSH
35104: LD_INT 2
35106: NEG
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 3
35114: PUSH
35115: LD_INT 2
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 3
35124: PUSH
35125: LD_INT 3
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 2
35134: PUSH
35135: LD_INT 3
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35160: LD_ADDR_VAR 0 17
35164: PUSH
35165: LD_INT 0
35167: PUSH
35168: LD_INT 0
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 0
35177: PUSH
35178: LD_INT 1
35180: NEG
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 1
35188: PUSH
35189: LD_INT 0
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 1
35198: PUSH
35199: LD_INT 1
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 0
35208: PUSH
35209: LD_INT 1
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 1
35218: NEG
35219: PUSH
35220: LD_INT 0
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 1
35229: NEG
35230: PUSH
35231: LD_INT 1
35233: NEG
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 1
35241: NEG
35242: PUSH
35243: LD_INT 2
35245: NEG
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 0
35253: PUSH
35254: LD_INT 2
35256: NEG
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 1
35264: PUSH
35265: LD_INT 1
35267: NEG
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 2
35275: PUSH
35276: LD_INT 0
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 2
35285: PUSH
35286: LD_INT 1
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 2
35295: PUSH
35296: LD_INT 2
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 1
35305: PUSH
35306: LD_INT 2
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 0
35315: PUSH
35316: LD_INT 2
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 1
35325: NEG
35326: PUSH
35327: LD_INT 1
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 2
35336: NEG
35337: PUSH
35338: LD_INT 0
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: LD_INT 2
35347: NEG
35348: PUSH
35349: LD_INT 1
35351: NEG
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 2
35359: NEG
35360: PUSH
35361: LD_INT 2
35363: NEG
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35390: LD_ADDR_VAR 0 18
35394: PUSH
35395: LD_INT 0
35397: PUSH
35398: LD_INT 0
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 0
35407: PUSH
35408: LD_INT 1
35410: NEG
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: LD_INT 1
35418: PUSH
35419: LD_INT 0
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 1
35428: PUSH
35429: LD_INT 1
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 0
35438: PUSH
35439: LD_INT 1
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 1
35448: NEG
35449: PUSH
35450: LD_INT 0
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 1
35459: NEG
35460: PUSH
35461: LD_INT 1
35463: NEG
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 1
35471: NEG
35472: PUSH
35473: LD_INT 2
35475: NEG
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 0
35483: PUSH
35484: LD_INT 2
35486: NEG
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 1
35494: PUSH
35495: LD_INT 1
35497: NEG
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 2
35505: PUSH
35506: LD_INT 0
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 2
35515: PUSH
35516: LD_INT 1
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 2
35525: PUSH
35526: LD_INT 2
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 1
35535: PUSH
35536: LD_INT 2
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 0
35545: PUSH
35546: LD_INT 2
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 1
35555: NEG
35556: PUSH
35557: LD_INT 1
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 2
35566: NEG
35567: PUSH
35568: LD_INT 0
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 2
35577: NEG
35578: PUSH
35579: LD_INT 1
35581: NEG
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PUSH
35587: LD_INT 2
35589: NEG
35590: PUSH
35591: LD_INT 2
35593: NEG
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35620: LD_ADDR_VAR 0 19
35624: PUSH
35625: LD_INT 0
35627: PUSH
35628: LD_INT 0
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 0
35637: PUSH
35638: LD_INT 1
35640: NEG
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 1
35648: PUSH
35649: LD_INT 0
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 1
35658: PUSH
35659: LD_INT 1
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 0
35668: PUSH
35669: LD_INT 1
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 1
35678: NEG
35679: PUSH
35680: LD_INT 0
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 1
35689: NEG
35690: PUSH
35691: LD_INT 1
35693: NEG
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 1
35701: NEG
35702: PUSH
35703: LD_INT 2
35705: NEG
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 0
35713: PUSH
35714: LD_INT 2
35716: NEG
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 1
35724: PUSH
35725: LD_INT 1
35727: NEG
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 2
35735: PUSH
35736: LD_INT 0
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 2
35745: PUSH
35746: LD_INT 1
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 2
35755: PUSH
35756: LD_INT 2
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 1
35765: PUSH
35766: LD_INT 2
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 0
35775: PUSH
35776: LD_INT 2
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 1
35785: NEG
35786: PUSH
35787: LD_INT 1
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 2
35796: NEG
35797: PUSH
35798: LD_INT 0
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 2
35807: NEG
35808: PUSH
35809: LD_INT 1
35811: NEG
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 2
35819: NEG
35820: PUSH
35821: LD_INT 2
35823: NEG
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35850: LD_ADDR_VAR 0 20
35854: PUSH
35855: LD_INT 0
35857: PUSH
35858: LD_INT 0
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 0
35867: PUSH
35868: LD_INT 1
35870: NEG
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 1
35878: PUSH
35879: LD_INT 0
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 1
35888: PUSH
35889: LD_INT 1
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 0
35898: PUSH
35899: LD_INT 1
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 1
35908: NEG
35909: PUSH
35910: LD_INT 0
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 1
35919: NEG
35920: PUSH
35921: LD_INT 1
35923: NEG
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 1
35931: NEG
35932: PUSH
35933: LD_INT 2
35935: NEG
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 0
35943: PUSH
35944: LD_INT 2
35946: NEG
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 1
35954: PUSH
35955: LD_INT 1
35957: NEG
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 2
35965: PUSH
35966: LD_INT 0
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 2
35975: PUSH
35976: LD_INT 1
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 2
35985: PUSH
35986: LD_INT 2
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 1
35995: PUSH
35996: LD_INT 2
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 0
36005: PUSH
36006: LD_INT 2
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 1
36015: NEG
36016: PUSH
36017: LD_INT 1
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 2
36026: NEG
36027: PUSH
36028: LD_INT 0
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 2
36037: NEG
36038: PUSH
36039: LD_INT 1
36041: NEG
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 2
36049: NEG
36050: PUSH
36051: LD_INT 2
36053: NEG
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36080: LD_ADDR_VAR 0 21
36084: PUSH
36085: LD_INT 0
36087: PUSH
36088: LD_INT 0
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 0
36097: PUSH
36098: LD_INT 1
36100: NEG
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 1
36108: PUSH
36109: LD_INT 0
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 1
36118: PUSH
36119: LD_INT 1
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: LD_INT 0
36128: PUSH
36129: LD_INT 1
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: LD_INT 1
36138: NEG
36139: PUSH
36140: LD_INT 0
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: LD_INT 1
36149: NEG
36150: PUSH
36151: LD_INT 1
36153: NEG
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 1
36161: NEG
36162: PUSH
36163: LD_INT 2
36165: NEG
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 0
36173: PUSH
36174: LD_INT 2
36176: NEG
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 1
36184: PUSH
36185: LD_INT 1
36187: NEG
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 2
36195: PUSH
36196: LD_INT 0
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 2
36205: PUSH
36206: LD_INT 1
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 2
36215: PUSH
36216: LD_INT 2
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 1
36225: PUSH
36226: LD_INT 2
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 0
36235: PUSH
36236: LD_INT 2
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 1
36245: NEG
36246: PUSH
36247: LD_INT 1
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 2
36256: NEG
36257: PUSH
36258: LD_INT 0
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 2
36267: NEG
36268: PUSH
36269: LD_INT 1
36271: NEG
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 2
36279: NEG
36280: PUSH
36281: LD_INT 2
36283: NEG
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36310: LD_ADDR_VAR 0 22
36314: PUSH
36315: LD_INT 0
36317: PUSH
36318: LD_INT 0
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 0
36327: PUSH
36328: LD_INT 1
36330: NEG
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 1
36338: PUSH
36339: LD_INT 0
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 1
36348: PUSH
36349: LD_INT 1
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 0
36358: PUSH
36359: LD_INT 1
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 1
36368: NEG
36369: PUSH
36370: LD_INT 0
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 1
36379: NEG
36380: PUSH
36381: LD_INT 1
36383: NEG
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 1
36391: NEG
36392: PUSH
36393: LD_INT 2
36395: NEG
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 0
36403: PUSH
36404: LD_INT 2
36406: NEG
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 1
36414: PUSH
36415: LD_INT 1
36417: NEG
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 2
36425: PUSH
36426: LD_INT 0
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 2
36435: PUSH
36436: LD_INT 1
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 2
36445: PUSH
36446: LD_INT 2
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 1
36455: PUSH
36456: LD_INT 2
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 0
36465: PUSH
36466: LD_INT 2
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 1
36475: NEG
36476: PUSH
36477: LD_INT 1
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 2
36486: NEG
36487: PUSH
36488: LD_INT 0
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 2
36497: NEG
36498: PUSH
36499: LD_INT 1
36501: NEG
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 2
36509: NEG
36510: PUSH
36511: LD_INT 2
36513: NEG
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36540: LD_ADDR_VAR 0 23
36544: PUSH
36545: LD_INT 0
36547: PUSH
36548: LD_INT 0
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 0
36557: PUSH
36558: LD_INT 1
36560: NEG
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 1
36568: PUSH
36569: LD_INT 0
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 1
36578: PUSH
36579: LD_INT 1
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 0
36588: PUSH
36589: LD_INT 1
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 1
36598: NEG
36599: PUSH
36600: LD_INT 0
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 1
36609: NEG
36610: PUSH
36611: LD_INT 1
36613: NEG
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 1
36621: NEG
36622: PUSH
36623: LD_INT 2
36625: NEG
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 0
36633: PUSH
36634: LD_INT 2
36636: NEG
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 1
36644: PUSH
36645: LD_INT 1
36647: NEG
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 2
36655: PUSH
36656: LD_INT 0
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 2
36665: PUSH
36666: LD_INT 1
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 2
36675: PUSH
36676: LD_INT 2
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 1
36685: PUSH
36686: LD_INT 2
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 0
36695: PUSH
36696: LD_INT 2
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 1
36705: NEG
36706: PUSH
36707: LD_INT 1
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 2
36716: NEG
36717: PUSH
36718: LD_INT 0
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 2
36727: NEG
36728: PUSH
36729: LD_INT 1
36731: NEG
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 2
36739: NEG
36740: PUSH
36741: LD_INT 2
36743: NEG
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: LD_INT 2
36751: NEG
36752: PUSH
36753: LD_INT 3
36755: NEG
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 1
36763: NEG
36764: PUSH
36765: LD_INT 3
36767: NEG
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 1
36775: PUSH
36776: LD_INT 2
36778: NEG
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 2
36786: PUSH
36787: LD_INT 1
36789: NEG
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
36820: LD_ADDR_VAR 0 24
36824: PUSH
36825: LD_INT 0
36827: PUSH
36828: LD_INT 0
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 0
36837: PUSH
36838: LD_INT 1
36840: NEG
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 1
36848: PUSH
36849: LD_INT 0
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 1
36858: PUSH
36859: LD_INT 1
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 0
36868: PUSH
36869: LD_INT 1
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: LD_INT 1
36878: NEG
36879: PUSH
36880: LD_INT 0
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: LD_INT 1
36889: NEG
36890: PUSH
36891: LD_INT 1
36893: NEG
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 1
36901: NEG
36902: PUSH
36903: LD_INT 2
36905: NEG
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 0
36913: PUSH
36914: LD_INT 2
36916: NEG
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 1
36924: PUSH
36925: LD_INT 1
36927: NEG
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 2
36935: PUSH
36936: LD_INT 0
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 2
36945: PUSH
36946: LD_INT 1
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 2
36955: PUSH
36956: LD_INT 2
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 1
36965: PUSH
36966: LD_INT 2
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 0
36975: PUSH
36976: LD_INT 2
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 1
36985: NEG
36986: PUSH
36987: LD_INT 1
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 2
36996: NEG
36997: PUSH
36998: LD_INT 0
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 2
37007: NEG
37008: PUSH
37009: LD_INT 1
37011: NEG
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 2
37019: NEG
37020: PUSH
37021: LD_INT 2
37023: NEG
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 1
37031: PUSH
37032: LD_INT 2
37034: NEG
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 2
37042: PUSH
37043: LD_INT 1
37045: NEG
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 3
37053: PUSH
37054: LD_INT 1
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 3
37063: PUSH
37064: LD_INT 2
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37096: LD_ADDR_VAR 0 25
37100: PUSH
37101: LD_INT 0
37103: PUSH
37104: LD_INT 0
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 0
37113: PUSH
37114: LD_INT 1
37116: NEG
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 1
37124: PUSH
37125: LD_INT 0
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 1
37134: PUSH
37135: LD_INT 1
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 0
37144: PUSH
37145: LD_INT 1
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 1
37154: NEG
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 1
37165: NEG
37166: PUSH
37167: LD_INT 1
37169: NEG
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 1
37177: NEG
37178: PUSH
37179: LD_INT 2
37181: NEG
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 0
37189: PUSH
37190: LD_INT 2
37192: NEG
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 1
37200: PUSH
37201: LD_INT 1
37203: NEG
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 2
37211: PUSH
37212: LD_INT 0
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 2
37221: PUSH
37222: LD_INT 1
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 2
37231: PUSH
37232: LD_INT 2
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: LD_INT 1
37241: PUSH
37242: LD_INT 2
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 0
37251: PUSH
37252: LD_INT 2
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 1
37261: NEG
37262: PUSH
37263: LD_INT 1
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 2
37272: NEG
37273: PUSH
37274: LD_INT 0
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 2
37283: NEG
37284: PUSH
37285: LD_INT 1
37287: NEG
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 2
37295: NEG
37296: PUSH
37297: LD_INT 2
37299: NEG
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 3
37307: PUSH
37308: LD_INT 1
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 3
37317: PUSH
37318: LD_INT 2
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 2
37327: PUSH
37328: LD_INT 3
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 1
37337: PUSH
37338: LD_INT 3
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37370: LD_ADDR_VAR 0 26
37374: PUSH
37375: LD_INT 0
37377: PUSH
37378: LD_INT 0
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 0
37387: PUSH
37388: LD_INT 1
37390: NEG
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 1
37398: PUSH
37399: LD_INT 0
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 1
37408: PUSH
37409: LD_INT 1
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 0
37418: PUSH
37419: LD_INT 1
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 1
37428: NEG
37429: PUSH
37430: LD_INT 0
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 1
37439: NEG
37440: PUSH
37441: LD_INT 1
37443: NEG
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 1
37451: NEG
37452: PUSH
37453: LD_INT 2
37455: NEG
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 0
37463: PUSH
37464: LD_INT 2
37466: NEG
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 1
37474: PUSH
37475: LD_INT 1
37477: NEG
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 2
37485: PUSH
37486: LD_INT 0
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 2
37495: PUSH
37496: LD_INT 1
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 2
37505: PUSH
37506: LD_INT 2
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 1
37515: PUSH
37516: LD_INT 2
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 0
37525: PUSH
37526: LD_INT 2
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 1
37535: NEG
37536: PUSH
37537: LD_INT 1
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 2
37546: NEG
37547: PUSH
37548: LD_INT 0
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 2
37557: NEG
37558: PUSH
37559: LD_INT 1
37561: NEG
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 2
37569: NEG
37570: PUSH
37571: LD_INT 2
37573: NEG
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 2
37581: PUSH
37582: LD_INT 3
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 1
37591: PUSH
37592: LD_INT 3
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 1
37601: NEG
37602: PUSH
37603: LD_INT 2
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 2
37612: NEG
37613: PUSH
37614: LD_INT 1
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37646: LD_ADDR_VAR 0 27
37650: PUSH
37651: LD_INT 0
37653: PUSH
37654: LD_INT 0
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: LD_INT 0
37663: PUSH
37664: LD_INT 1
37666: NEG
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 1
37674: PUSH
37675: LD_INT 0
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 1
37684: PUSH
37685: LD_INT 1
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 0
37694: PUSH
37695: LD_INT 1
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 1
37704: NEG
37705: PUSH
37706: LD_INT 0
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 1
37715: NEG
37716: PUSH
37717: LD_INT 1
37719: NEG
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 1
37727: NEG
37728: PUSH
37729: LD_INT 2
37731: NEG
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 0
37739: PUSH
37740: LD_INT 2
37742: NEG
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 1
37750: PUSH
37751: LD_INT 1
37753: NEG
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 2
37761: PUSH
37762: LD_INT 0
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 2
37771: PUSH
37772: LD_INT 1
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 2
37781: PUSH
37782: LD_INT 2
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 1
37791: PUSH
37792: LD_INT 2
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 0
37801: PUSH
37802: LD_INT 2
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 1
37811: NEG
37812: PUSH
37813: LD_INT 1
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 2
37822: NEG
37823: PUSH
37824: LD_INT 0
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 2
37833: NEG
37834: PUSH
37835: LD_INT 1
37837: NEG
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 2
37845: NEG
37846: PUSH
37847: LD_INT 2
37849: NEG
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 1
37857: NEG
37858: PUSH
37859: LD_INT 2
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 2
37868: NEG
37869: PUSH
37870: LD_INT 1
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 3
37879: NEG
37880: PUSH
37881: LD_INT 1
37883: NEG
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 3
37891: NEG
37892: PUSH
37893: LD_INT 2
37895: NEG
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37926: LD_ADDR_VAR 0 28
37930: PUSH
37931: LD_INT 0
37933: PUSH
37934: LD_INT 0
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 0
37943: PUSH
37944: LD_INT 1
37946: NEG
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 1
37954: PUSH
37955: LD_INT 0
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 1
37964: PUSH
37965: LD_INT 1
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 0
37974: PUSH
37975: LD_INT 1
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 1
37984: NEG
37985: PUSH
37986: LD_INT 0
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 1
37995: NEG
37996: PUSH
37997: LD_INT 1
37999: NEG
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 1
38007: NEG
38008: PUSH
38009: LD_INT 2
38011: NEG
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 0
38019: PUSH
38020: LD_INT 2
38022: NEG
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 1
38030: PUSH
38031: LD_INT 1
38033: NEG
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 2
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 2
38051: PUSH
38052: LD_INT 1
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 2
38061: PUSH
38062: LD_INT 2
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 1
38071: PUSH
38072: LD_INT 2
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 0
38081: PUSH
38082: LD_INT 2
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 1
38091: NEG
38092: PUSH
38093: LD_INT 1
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 2
38102: NEG
38103: PUSH
38104: LD_INT 0
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 2
38113: NEG
38114: PUSH
38115: LD_INT 1
38117: NEG
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 2
38125: NEG
38126: PUSH
38127: LD_INT 2
38129: NEG
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 2
38137: NEG
38138: PUSH
38139: LD_INT 3
38141: NEG
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 1
38149: NEG
38150: PUSH
38151: LD_INT 3
38153: NEG
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 3
38161: NEG
38162: PUSH
38163: LD_INT 1
38165: NEG
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_INT 3
38173: NEG
38174: PUSH
38175: LD_INT 2
38177: NEG
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38208: LD_ADDR_VAR 0 29
38212: PUSH
38213: LD_INT 0
38215: PUSH
38216: LD_INT 0
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 0
38225: PUSH
38226: LD_INT 1
38228: NEG
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 1
38236: PUSH
38237: LD_INT 0
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 1
38246: PUSH
38247: LD_INT 1
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 0
38256: PUSH
38257: LD_INT 1
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 1
38266: NEG
38267: PUSH
38268: LD_INT 0
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: LD_INT 1
38277: NEG
38278: PUSH
38279: LD_INT 1
38281: NEG
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 1
38289: NEG
38290: PUSH
38291: LD_INT 2
38293: NEG
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 0
38301: PUSH
38302: LD_INT 2
38304: NEG
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 1
38312: PUSH
38313: LD_INT 1
38315: NEG
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 2
38323: PUSH
38324: LD_INT 0
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 2
38333: PUSH
38334: LD_INT 1
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 1
38343: PUSH
38344: LD_INT 2
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 0
38353: PUSH
38354: LD_INT 2
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 1
38363: NEG
38364: PUSH
38365: LD_INT 1
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: LD_INT 2
38374: NEG
38375: PUSH
38376: LD_INT 1
38378: NEG
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 2
38386: NEG
38387: PUSH
38388: LD_INT 2
38390: NEG
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 2
38398: NEG
38399: PUSH
38400: LD_INT 3
38402: NEG
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 2
38410: PUSH
38411: LD_INT 1
38413: NEG
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 3
38421: PUSH
38422: LD_INT 1
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 1
38431: PUSH
38432: LD_INT 3
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 1
38441: NEG
38442: PUSH
38443: LD_INT 2
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 3
38452: NEG
38453: PUSH
38454: LD_INT 2
38456: NEG
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38487: LD_ADDR_VAR 0 30
38491: PUSH
38492: LD_INT 0
38494: PUSH
38495: LD_INT 0
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 0
38504: PUSH
38505: LD_INT 1
38507: NEG
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 1
38515: PUSH
38516: LD_INT 0
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 1
38525: PUSH
38526: LD_INT 1
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 0
38535: PUSH
38536: LD_INT 1
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 1
38545: NEG
38546: PUSH
38547: LD_INT 0
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 1
38556: NEG
38557: PUSH
38558: LD_INT 1
38560: NEG
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 1
38568: NEG
38569: PUSH
38570: LD_INT 2
38572: NEG
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 0
38580: PUSH
38581: LD_INT 2
38583: NEG
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 1
38591: PUSH
38592: LD_INT 1
38594: NEG
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 2
38602: PUSH
38603: LD_INT 0
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 2
38612: PUSH
38613: LD_INT 1
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 2
38622: PUSH
38623: LD_INT 2
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 1
38632: PUSH
38633: LD_INT 2
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 1
38642: NEG
38643: PUSH
38644: LD_INT 1
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: PUSH
38651: LD_INT 2
38653: NEG
38654: PUSH
38655: LD_INT 0
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 2
38664: NEG
38665: PUSH
38666: LD_INT 1
38668: NEG
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 1
38676: NEG
38677: PUSH
38678: LD_INT 3
38680: NEG
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 1
38688: PUSH
38689: LD_INT 2
38691: NEG
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 3
38699: PUSH
38700: LD_INT 2
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 2
38709: PUSH
38710: LD_INT 3
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 2
38719: NEG
38720: PUSH
38721: LD_INT 1
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 3
38730: NEG
38731: PUSH
38732: LD_INT 1
38734: NEG
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38765: LD_ADDR_VAR 0 31
38769: PUSH
38770: LD_INT 0
38772: PUSH
38773: LD_INT 0
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 0
38782: PUSH
38783: LD_INT 1
38785: NEG
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 1
38793: PUSH
38794: LD_INT 0
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 1
38803: PUSH
38804: LD_INT 1
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 0
38813: PUSH
38814: LD_INT 1
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 1
38823: NEG
38824: PUSH
38825: LD_INT 0
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 1
38834: NEG
38835: PUSH
38836: LD_INT 1
38838: NEG
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 1
38846: NEG
38847: PUSH
38848: LD_INT 2
38850: NEG
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 1
38858: PUSH
38859: LD_INT 1
38861: NEG
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 2
38869: PUSH
38870: LD_INT 0
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 2
38879: PUSH
38880: LD_INT 1
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 2
38889: PUSH
38890: LD_INT 2
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 1
38899: PUSH
38900: LD_INT 2
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 0
38909: PUSH
38910: LD_INT 2
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 1
38919: NEG
38920: PUSH
38921: LD_INT 1
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 2
38930: NEG
38931: PUSH
38932: LD_INT 1
38934: NEG
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 2
38942: NEG
38943: PUSH
38944: LD_INT 2
38946: NEG
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 2
38954: NEG
38955: PUSH
38956: LD_INT 3
38958: NEG
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 2
38966: PUSH
38967: LD_INT 1
38969: NEG
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 3
38977: PUSH
38978: LD_INT 1
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 1
38987: PUSH
38988: LD_INT 3
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 1
38997: NEG
38998: PUSH
38999: LD_INT 2
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 3
39008: NEG
39009: PUSH
39010: LD_INT 2
39012: NEG
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39043: LD_ADDR_VAR 0 32
39047: PUSH
39048: LD_INT 0
39050: PUSH
39051: LD_INT 0
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 0
39060: PUSH
39061: LD_INT 1
39063: NEG
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 1
39071: PUSH
39072: LD_INT 0
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: LD_INT 1
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 0
39091: PUSH
39092: LD_INT 1
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 1
39101: NEG
39102: PUSH
39103: LD_INT 0
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 1
39112: NEG
39113: PUSH
39114: LD_INT 1
39116: NEG
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 1
39124: NEG
39125: PUSH
39126: LD_INT 2
39128: NEG
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 0
39136: PUSH
39137: LD_INT 2
39139: NEG
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 1
39147: PUSH
39148: LD_INT 1
39150: NEG
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 2
39158: PUSH
39159: LD_INT 1
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 2
39168: PUSH
39169: LD_INT 2
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 1
39178: PUSH
39179: LD_INT 2
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 0
39188: PUSH
39189: LD_INT 2
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 1
39198: NEG
39199: PUSH
39200: LD_INT 1
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 2
39209: NEG
39210: PUSH
39211: LD_INT 0
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 2
39220: NEG
39221: PUSH
39222: LD_INT 1
39224: NEG
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 1
39232: NEG
39233: PUSH
39234: LD_INT 3
39236: NEG
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 1
39244: PUSH
39245: LD_INT 2
39247: NEG
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 3
39255: PUSH
39256: LD_INT 2
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 2
39265: PUSH
39266: LD_INT 3
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 2
39275: NEG
39276: PUSH
39277: LD_INT 1
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 3
39286: NEG
39287: PUSH
39288: LD_INT 1
39290: NEG
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39321: LD_ADDR_VAR 0 33
39325: PUSH
39326: LD_INT 0
39328: PUSH
39329: LD_INT 0
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 0
39338: PUSH
39339: LD_INT 1
39341: NEG
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 1
39349: PUSH
39350: LD_INT 0
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 1
39359: PUSH
39360: LD_INT 1
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 0
39369: PUSH
39370: LD_INT 1
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 1
39379: NEG
39380: PUSH
39381: LD_INT 0
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 1
39390: NEG
39391: PUSH
39392: LD_INT 1
39394: NEG
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 1
39402: NEG
39403: PUSH
39404: LD_INT 2
39406: NEG
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 1
39414: PUSH
39415: LD_INT 1
39417: NEG
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 2
39425: PUSH
39426: LD_INT 0
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 2
39435: PUSH
39436: LD_INT 1
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 1
39445: PUSH
39446: LD_INT 2
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 0
39455: PUSH
39456: LD_INT 2
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 1
39465: NEG
39466: PUSH
39467: LD_INT 1
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 2
39476: NEG
39477: PUSH
39478: LD_INT 0
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 2
39487: NEG
39488: PUSH
39489: LD_INT 1
39491: NEG
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 2
39499: NEG
39500: PUSH
39501: LD_INT 2
39503: NEG
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 2
39511: NEG
39512: PUSH
39513: LD_INT 3
39515: NEG
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 2
39523: PUSH
39524: LD_INT 1
39526: NEG
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 3
39534: PUSH
39535: LD_INT 1
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 1
39544: PUSH
39545: LD_INT 3
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 1
39554: NEG
39555: PUSH
39556: LD_INT 2
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 3
39565: NEG
39566: PUSH
39567: LD_INT 2
39569: NEG
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39600: LD_ADDR_VAR 0 34
39604: PUSH
39605: LD_INT 0
39607: PUSH
39608: LD_INT 0
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 0
39617: PUSH
39618: LD_INT 1
39620: NEG
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 1
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 1
39638: PUSH
39639: LD_INT 1
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 0
39648: PUSH
39649: LD_INT 1
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 1
39658: NEG
39659: PUSH
39660: LD_INT 0
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 1
39669: NEG
39670: PUSH
39671: LD_INT 1
39673: NEG
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 1
39681: NEG
39682: PUSH
39683: LD_INT 2
39685: NEG
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 0
39693: PUSH
39694: LD_INT 2
39696: NEG
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 1
39704: PUSH
39705: LD_INT 1
39707: NEG
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 2
39715: PUSH
39716: LD_INT 1
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 2
39725: PUSH
39726: LD_INT 2
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 1
39735: PUSH
39736: LD_INT 2
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 1
39745: NEG
39746: PUSH
39747: LD_INT 1
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 2
39756: NEG
39757: PUSH
39758: LD_INT 0
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 2
39767: NEG
39768: PUSH
39769: LD_INT 1
39771: NEG
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 2
39779: NEG
39780: PUSH
39781: LD_INT 2
39783: NEG
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 1
39791: NEG
39792: PUSH
39793: LD_INT 3
39795: NEG
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 1
39803: PUSH
39804: LD_INT 2
39806: NEG
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 3
39814: PUSH
39815: LD_INT 2
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 2
39824: PUSH
39825: LD_INT 3
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 2
39834: NEG
39835: PUSH
39836: LD_INT 1
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 3
39845: NEG
39846: PUSH
39847: LD_INT 1
39849: NEG
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39880: LD_ADDR_VAR 0 35
39884: PUSH
39885: LD_INT 0
39887: PUSH
39888: LD_INT 0
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 0
39897: PUSH
39898: LD_INT 1
39900: NEG
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 1
39908: PUSH
39909: LD_INT 0
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 1
39918: PUSH
39919: LD_INT 1
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 0
39928: PUSH
39929: LD_INT 1
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 1
39938: NEG
39939: PUSH
39940: LD_INT 0
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 1
39949: NEG
39950: PUSH
39951: LD_INT 1
39953: NEG
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 2
39961: PUSH
39962: LD_INT 1
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 2
39971: NEG
39972: PUSH
39973: LD_INT 1
39975: NEG
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39992: LD_ADDR_VAR 0 36
39996: PUSH
39997: LD_INT 0
39999: PUSH
40000: LD_INT 0
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 0
40009: PUSH
40010: LD_INT 1
40012: NEG
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 1
40020: PUSH
40021: LD_INT 0
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 1
40030: PUSH
40031: LD_INT 1
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 0
40040: PUSH
40041: LD_INT 1
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 1
40050: NEG
40051: PUSH
40052: LD_INT 0
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 1
40061: NEG
40062: PUSH
40063: LD_INT 1
40065: NEG
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 1
40073: NEG
40074: PUSH
40075: LD_INT 2
40077: NEG
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 1
40085: PUSH
40086: LD_INT 2
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40104: LD_ADDR_VAR 0 37
40108: PUSH
40109: LD_INT 0
40111: PUSH
40112: LD_INT 0
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 0
40121: PUSH
40122: LD_INT 1
40124: NEG
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 1
40132: PUSH
40133: LD_INT 0
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 1
40142: PUSH
40143: LD_INT 1
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 0
40152: PUSH
40153: LD_INT 1
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 1
40162: NEG
40163: PUSH
40164: LD_INT 0
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 1
40173: NEG
40174: PUSH
40175: LD_INT 1
40177: NEG
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 1
40185: PUSH
40186: LD_INT 1
40188: NEG
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 1
40196: NEG
40197: PUSH
40198: LD_INT 1
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40216: LD_ADDR_VAR 0 38
40220: PUSH
40221: LD_INT 0
40223: PUSH
40224: LD_INT 0
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 0
40233: PUSH
40234: LD_INT 1
40236: NEG
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 1
40244: PUSH
40245: LD_INT 0
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 1
40254: PUSH
40255: LD_INT 1
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 0
40264: PUSH
40265: LD_INT 1
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 1
40274: NEG
40275: PUSH
40276: LD_INT 0
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 1
40285: NEG
40286: PUSH
40287: LD_INT 1
40289: NEG
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 2
40297: PUSH
40298: LD_INT 1
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 2
40307: NEG
40308: PUSH
40309: LD_INT 1
40311: NEG
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40328: LD_ADDR_VAR 0 39
40332: PUSH
40333: LD_INT 0
40335: PUSH
40336: LD_INT 0
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 0
40345: PUSH
40346: LD_INT 1
40348: NEG
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 1
40356: PUSH
40357: LD_INT 0
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 1
40366: PUSH
40367: LD_INT 1
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 0
40376: PUSH
40377: LD_INT 1
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 1
40386: NEG
40387: PUSH
40388: LD_INT 0
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 1
40397: NEG
40398: PUSH
40399: LD_INT 1
40401: NEG
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 1
40409: NEG
40410: PUSH
40411: LD_INT 2
40413: NEG
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 1
40421: PUSH
40422: LD_INT 2
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40440: LD_ADDR_VAR 0 40
40444: PUSH
40445: LD_INT 0
40447: PUSH
40448: LD_INT 0
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 0
40457: PUSH
40458: LD_INT 1
40460: NEG
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 1
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 1
40478: PUSH
40479: LD_INT 1
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 0
40488: PUSH
40489: LD_INT 1
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 1
40498: NEG
40499: PUSH
40500: LD_INT 0
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: LD_INT 1
40513: NEG
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 1
40521: PUSH
40522: LD_INT 1
40524: NEG
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 1
40532: NEG
40533: PUSH
40534: LD_INT 1
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40552: LD_ADDR_VAR 0 41
40556: PUSH
40557: LD_INT 0
40559: PUSH
40560: LD_INT 0
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 0
40569: PUSH
40570: LD_INT 1
40572: NEG
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 1
40580: PUSH
40581: LD_INT 0
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 1
40590: PUSH
40591: LD_INT 1
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 0
40600: PUSH
40601: LD_INT 1
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 1
40610: NEG
40611: PUSH
40612: LD_INT 0
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 1
40621: NEG
40622: PUSH
40623: LD_INT 1
40625: NEG
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 1
40633: NEG
40634: PUSH
40635: LD_INT 2
40637: NEG
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 1
40645: PUSH
40646: LD_INT 1
40648: NEG
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 2
40656: PUSH
40657: LD_INT 0
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 2
40666: PUSH
40667: LD_INT 1
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 2
40676: PUSH
40677: LD_INT 2
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 1
40686: PUSH
40687: LD_INT 2
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 1
40696: NEG
40697: PUSH
40698: LD_INT 1
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 2
40707: NEG
40708: PUSH
40709: LD_INT 0
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 2
40718: NEG
40719: PUSH
40720: LD_INT 1
40722: NEG
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 2
40730: NEG
40731: PUSH
40732: LD_INT 2
40734: NEG
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 2
40742: NEG
40743: PUSH
40744: LD_INT 3
40746: NEG
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 2
40754: PUSH
40755: LD_INT 1
40757: NEG
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 3
40765: PUSH
40766: LD_INT 0
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 3
40775: PUSH
40776: LD_INT 1
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 3
40785: PUSH
40786: LD_INT 2
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 3
40795: PUSH
40796: LD_INT 3
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 2
40805: PUSH
40806: LD_INT 3
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 2
40815: NEG
40816: PUSH
40817: LD_INT 1
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 3
40826: NEG
40827: PUSH
40828: LD_INT 0
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 3
40837: NEG
40838: PUSH
40839: LD_INT 1
40841: NEG
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 3
40849: NEG
40850: PUSH
40851: LD_INT 2
40853: NEG
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 3
40861: NEG
40862: PUSH
40863: LD_INT 3
40865: NEG
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40902: LD_ADDR_VAR 0 42
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: LD_INT 1
40922: NEG
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 1
40930: PUSH
40931: LD_INT 0
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 1
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 0
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 1
40960: NEG
40961: PUSH
40962: LD_INT 0
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 1
40971: NEG
40972: PUSH
40973: LD_INT 1
40975: NEG
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 1
40983: NEG
40984: PUSH
40985: LD_INT 2
40987: NEG
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: LD_INT 2
40998: NEG
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 1
41006: PUSH
41007: LD_INT 1
41009: NEG
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 2
41017: PUSH
41018: LD_INT 1
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 2
41027: PUSH
41028: LD_INT 2
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 1
41037: PUSH
41038: LD_INT 2
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 0
41047: PUSH
41048: LD_INT 2
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 1
41057: NEG
41058: PUSH
41059: LD_INT 1
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 2
41068: NEG
41069: PUSH
41070: LD_INT 1
41072: NEG
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 2
41080: NEG
41081: PUSH
41082: LD_INT 2
41084: NEG
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 2
41092: NEG
41093: PUSH
41094: LD_INT 3
41096: NEG
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 1
41104: NEG
41105: PUSH
41106: LD_INT 3
41108: NEG
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 0
41116: PUSH
41117: LD_INT 3
41119: NEG
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 1
41127: PUSH
41128: LD_INT 2
41130: NEG
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 3
41138: PUSH
41139: LD_INT 2
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 3
41148: PUSH
41149: LD_INT 3
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 2
41158: PUSH
41159: LD_INT 3
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 1
41168: PUSH
41169: LD_INT 3
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 0
41178: PUSH
41179: LD_INT 3
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 1
41188: NEG
41189: PUSH
41190: LD_INT 2
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 3
41199: NEG
41200: PUSH
41201: LD_INT 2
41203: NEG
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 3
41211: NEG
41212: PUSH
41213: LD_INT 3
41215: NEG
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41252: LD_ADDR_VAR 0 43
41256: PUSH
41257: LD_INT 0
41259: PUSH
41260: LD_INT 0
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 0
41269: PUSH
41270: LD_INT 1
41272: NEG
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 1
41280: PUSH
41281: LD_INT 0
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 1
41290: PUSH
41291: LD_INT 1
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 0
41300: PUSH
41301: LD_INT 1
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 1
41310: NEG
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 1
41321: NEG
41322: PUSH
41323: LD_INT 1
41325: NEG
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 1
41333: NEG
41334: PUSH
41335: LD_INT 2
41337: NEG
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 0
41345: PUSH
41346: LD_INT 2
41348: NEG
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 1
41356: PUSH
41357: LD_INT 1
41359: NEG
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 2
41367: PUSH
41368: LD_INT 0
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 2
41377: PUSH
41378: LD_INT 1
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 1
41387: PUSH
41388: LD_INT 2
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: LD_INT 2
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 1
41407: NEG
41408: PUSH
41409: LD_INT 1
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 2
41418: NEG
41419: PUSH
41420: LD_INT 0
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 2
41429: NEG
41430: PUSH
41431: LD_INT 1
41433: NEG
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: NEG
41442: PUSH
41443: LD_INT 3
41445: NEG
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 0
41453: PUSH
41454: LD_INT 3
41456: NEG
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 1
41464: PUSH
41465: LD_INT 2
41467: NEG
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 2
41475: PUSH
41476: LD_INT 1
41478: NEG
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 3
41486: PUSH
41487: LD_INT 0
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 3
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 1
41506: PUSH
41507: LD_INT 3
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 0
41516: PUSH
41517: LD_INT 3
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 1
41526: NEG
41527: PUSH
41528: LD_INT 2
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 2
41537: NEG
41538: PUSH
41539: LD_INT 1
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 3
41548: NEG
41549: PUSH
41550: LD_INT 0
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 3
41559: NEG
41560: PUSH
41561: LD_INT 1
41563: NEG
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41600: LD_ADDR_VAR 0 44
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: LD_INT 0
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 0
41617: PUSH
41618: LD_INT 1
41620: NEG
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 1
41628: PUSH
41629: LD_INT 0
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 1
41638: PUSH
41639: LD_INT 1
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 0
41648: PUSH
41649: LD_INT 1
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 1
41658: NEG
41659: PUSH
41660: LD_INT 0
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 1
41669: NEG
41670: PUSH
41671: LD_INT 1
41673: NEG
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 1
41681: NEG
41682: PUSH
41683: LD_INT 2
41685: NEG
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 1
41693: PUSH
41694: LD_INT 1
41696: NEG
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 2
41704: PUSH
41705: LD_INT 0
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 2
41714: PUSH
41715: LD_INT 1
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 2
41724: PUSH
41725: LD_INT 2
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 1
41734: PUSH
41735: LD_INT 2
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 1
41744: NEG
41745: PUSH
41746: LD_INT 1
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 2
41755: NEG
41756: PUSH
41757: LD_INT 0
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 2
41766: NEG
41767: PUSH
41768: LD_INT 1
41770: NEG
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 2
41778: NEG
41779: PUSH
41780: LD_INT 2
41782: NEG
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 2
41790: NEG
41791: PUSH
41792: LD_INT 3
41794: NEG
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 2
41802: PUSH
41803: LD_INT 1
41805: NEG
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 3
41813: PUSH
41814: LD_INT 0
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 3
41823: PUSH
41824: LD_INT 1
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 3
41833: PUSH
41834: LD_INT 2
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 3
41843: PUSH
41844: LD_INT 3
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 2
41853: PUSH
41854: LD_INT 3
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 2
41863: NEG
41864: PUSH
41865: LD_INT 1
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 3
41874: NEG
41875: PUSH
41876: LD_INT 0
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 3
41885: NEG
41886: PUSH
41887: LD_INT 1
41889: NEG
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 3
41897: NEG
41898: PUSH
41899: LD_INT 2
41901: NEG
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 3
41909: NEG
41910: PUSH
41911: LD_INT 3
41913: NEG
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41950: LD_ADDR_VAR 0 45
41954: PUSH
41955: LD_INT 0
41957: PUSH
41958: LD_INT 0
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 0
41967: PUSH
41968: LD_INT 1
41970: NEG
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 1
41978: PUSH
41979: LD_INT 0
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 1
41988: PUSH
41989: LD_INT 1
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 0
41998: PUSH
41999: LD_INT 1
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 1
42008: NEG
42009: PUSH
42010: LD_INT 0
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 1
42019: NEG
42020: PUSH
42021: LD_INT 1
42023: NEG
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 1
42031: NEG
42032: PUSH
42033: LD_INT 2
42035: NEG
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: LD_INT 2
42046: NEG
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 1
42054: PUSH
42055: LD_INT 1
42057: NEG
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 2
42065: PUSH
42066: LD_INT 1
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 2
42075: PUSH
42076: LD_INT 2
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 1
42085: PUSH
42086: LD_INT 2
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 0
42095: PUSH
42096: LD_INT 2
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 1
42105: NEG
42106: PUSH
42107: LD_INT 1
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 2
42116: NEG
42117: PUSH
42118: LD_INT 1
42120: NEG
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 2
42128: NEG
42129: PUSH
42130: LD_INT 2
42132: NEG
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 2
42140: NEG
42141: PUSH
42142: LD_INT 3
42144: NEG
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 1
42152: NEG
42153: PUSH
42154: LD_INT 3
42156: NEG
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 0
42164: PUSH
42165: LD_INT 3
42167: NEG
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 1
42175: PUSH
42176: LD_INT 2
42178: NEG
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 3
42186: PUSH
42187: LD_INT 2
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 3
42196: PUSH
42197: LD_INT 3
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 2
42206: PUSH
42207: LD_INT 3
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 1
42216: PUSH
42217: LD_INT 3
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 0
42226: PUSH
42227: LD_INT 3
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 1
42236: NEG
42237: PUSH
42238: LD_INT 2
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 3
42247: NEG
42248: PUSH
42249: LD_INT 2
42251: NEG
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 3
42259: NEG
42260: PUSH
42261: LD_INT 3
42263: NEG
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42300: LD_ADDR_VAR 0 46
42304: PUSH
42305: LD_INT 0
42307: PUSH
42308: LD_INT 0
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 0
42317: PUSH
42318: LD_INT 1
42320: NEG
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 1
42328: PUSH
42329: LD_INT 0
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 1
42338: PUSH
42339: LD_INT 1
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: LD_INT 1
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 1
42358: NEG
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 1
42369: NEG
42370: PUSH
42371: LD_INT 1
42373: NEG
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 1
42381: NEG
42382: PUSH
42383: LD_INT 2
42385: NEG
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 0
42393: PUSH
42394: LD_INT 2
42396: NEG
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 1
42404: PUSH
42405: LD_INT 1
42407: NEG
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 2
42415: PUSH
42416: LD_INT 0
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 2
42425: PUSH
42426: LD_INT 1
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: PUSH
42436: LD_INT 2
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 0
42445: PUSH
42446: LD_INT 2
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 1
42455: NEG
42456: PUSH
42457: LD_INT 1
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 2
42466: NEG
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 2
42477: NEG
42478: PUSH
42479: LD_INT 1
42481: NEG
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 1
42489: NEG
42490: PUSH
42491: LD_INT 3
42493: NEG
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: LD_INT 3
42504: NEG
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 1
42512: PUSH
42513: LD_INT 2
42515: NEG
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 2
42523: PUSH
42524: LD_INT 1
42526: NEG
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 3
42534: PUSH
42535: LD_INT 0
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 3
42544: PUSH
42545: LD_INT 1
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 1
42554: PUSH
42555: LD_INT 3
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 0
42564: PUSH
42565: LD_INT 3
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 1
42574: NEG
42575: PUSH
42576: LD_INT 2
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 2
42585: NEG
42586: PUSH
42587: LD_INT 1
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 3
42596: NEG
42597: PUSH
42598: LD_INT 0
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 3
42607: NEG
42608: PUSH
42609: LD_INT 1
42611: NEG
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42648: LD_ADDR_VAR 0 47
42652: PUSH
42653: LD_INT 0
42655: PUSH
42656: LD_INT 0
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 0
42665: PUSH
42666: LD_INT 1
42668: NEG
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 1
42676: PUSH
42677: LD_INT 0
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 1
42686: PUSH
42687: LD_INT 1
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 0
42696: PUSH
42697: LD_INT 1
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 1
42706: NEG
42707: PUSH
42708: LD_INT 0
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 1
42717: NEG
42718: PUSH
42719: LD_INT 1
42721: NEG
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 1
42729: NEG
42730: PUSH
42731: LD_INT 2
42733: NEG
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 0
42741: PUSH
42742: LD_INT 2
42744: NEG
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 1
42752: PUSH
42753: LD_INT 1
42755: NEG
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 2
42763: NEG
42764: PUSH
42765: LD_INT 1
42767: NEG
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 2
42775: NEG
42776: PUSH
42777: LD_INT 2
42779: NEG
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42799: LD_ADDR_VAR 0 48
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 0
42816: PUSH
42817: LD_INT 1
42819: NEG
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 1
42827: PUSH
42828: LD_INT 0
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 1
42837: PUSH
42838: LD_INT 1
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 0
42847: PUSH
42848: LD_INT 1
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 1
42857: NEG
42858: PUSH
42859: LD_INT 0
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 1
42868: NEG
42869: PUSH
42870: LD_INT 1
42872: NEG
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 1
42880: NEG
42881: PUSH
42882: LD_INT 2
42884: NEG
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 0
42892: PUSH
42893: LD_INT 2
42895: NEG
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: LD_INT 1
42906: NEG
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 2
42914: PUSH
42915: LD_INT 0
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 2
42924: PUSH
42925: LD_INT 1
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42946: LD_ADDR_VAR 0 49
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: LD_INT 0
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: LD_INT 1
42966: NEG
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 1
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: LD_INT 1
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: LD_INT 1
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: LD_INT 0
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: PUSH
43017: LD_INT 1
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 1
43027: PUSH
43028: LD_INT 1
43030: NEG
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 2
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 2
43048: PUSH
43049: LD_INT 1
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 2
43058: PUSH
43059: LD_INT 2
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 1
43068: PUSH
43069: LD_INT 2
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43090: LD_ADDR_VAR 0 50
43094: PUSH
43095: LD_INT 0
43097: PUSH
43098: LD_INT 0
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 0
43107: PUSH
43108: LD_INT 1
43110: NEG
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 1
43118: PUSH
43119: LD_INT 0
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 1
43128: PUSH
43129: LD_INT 1
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: LD_INT 1
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 1
43148: NEG
43149: PUSH
43150: LD_INT 0
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 1
43159: NEG
43160: PUSH
43161: LD_INT 1
43163: NEG
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 2
43171: PUSH
43172: LD_INT 1
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 2
43181: PUSH
43182: LD_INT 2
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 1
43191: PUSH
43192: LD_INT 2
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 0
43201: PUSH
43202: LD_INT 2
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 1
43211: NEG
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43234: LD_ADDR_VAR 0 51
43238: PUSH
43239: LD_INT 0
43241: PUSH
43242: LD_INT 0
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 0
43251: PUSH
43252: LD_INT 1
43254: NEG
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 1
43262: PUSH
43263: LD_INT 0
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 1
43272: PUSH
43273: LD_INT 1
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 0
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 1
43292: NEG
43293: PUSH
43294: LD_INT 0
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 1
43303: NEG
43304: PUSH
43305: LD_INT 1
43307: NEG
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 1
43315: PUSH
43316: LD_INT 2
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 0
43325: PUSH
43326: LD_INT 2
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 1
43335: NEG
43336: PUSH
43337: LD_INT 1
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 2
43346: NEG
43347: PUSH
43348: LD_INT 0
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 2
43357: NEG
43358: PUSH
43359: LD_INT 1
43361: NEG
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43381: LD_ADDR_VAR 0 52
43385: PUSH
43386: LD_INT 0
43388: PUSH
43389: LD_INT 0
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 0
43398: PUSH
43399: LD_INT 1
43401: NEG
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 1
43409: PUSH
43410: LD_INT 0
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 1
43419: PUSH
43420: LD_INT 1
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: LD_INT 1
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 1
43439: NEG
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 1
43450: NEG
43451: PUSH
43452: LD_INT 1
43454: NEG
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 1
43462: NEG
43463: PUSH
43464: LD_INT 2
43466: NEG
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 1
43474: NEG
43475: PUSH
43476: LD_INT 1
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 2
43485: NEG
43486: PUSH
43487: LD_INT 0
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 2
43496: NEG
43497: PUSH
43498: LD_INT 1
43500: NEG
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 2
43508: NEG
43509: PUSH
43510: LD_INT 2
43512: NEG
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43532: LD_ADDR_VAR 0 53
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: LD_INT 0
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: LD_INT 1
43552: NEG
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 1
43560: PUSH
43561: LD_INT 0
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 1
43570: PUSH
43571: LD_INT 1
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 0
43580: PUSH
43581: LD_INT 1
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 1
43590: NEG
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 1
43601: NEG
43602: PUSH
43603: LD_INT 1
43605: NEG
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 1
43613: NEG
43614: PUSH
43615: LD_INT 2
43617: NEG
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 0
43625: PUSH
43626: LD_INT 2
43628: NEG
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 1
43636: PUSH
43637: LD_INT 1
43639: NEG
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 2
43647: PUSH
43648: LD_INT 0
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 2
43657: PUSH
43658: LD_INT 1
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 2
43667: PUSH
43668: LD_INT 2
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 1
43677: PUSH
43678: LD_INT 2
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 0
43687: PUSH
43688: LD_INT 2
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 1
43697: NEG
43698: PUSH
43699: LD_INT 1
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 2
43708: NEG
43709: PUSH
43710: LD_INT 0
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 2
43719: NEG
43720: PUSH
43721: LD_INT 1
43723: NEG
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 2
43731: NEG
43732: PUSH
43733: LD_INT 2
43735: NEG
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43762: LD_ADDR_VAR 0 54
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: LD_INT 0
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 0
43779: PUSH
43780: LD_INT 1
43782: NEG
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 1
43790: PUSH
43791: LD_INT 0
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 1
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 0
43810: PUSH
43811: LD_INT 1
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 1
43820: NEG
43821: PUSH
43822: LD_INT 0
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 1
43831: NEG
43832: PUSH
43833: LD_INT 1
43835: NEG
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 1
43843: NEG
43844: PUSH
43845: LD_INT 2
43847: NEG
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: LD_INT 2
43858: NEG
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 1
43866: PUSH
43867: LD_INT 1
43869: NEG
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 2
43877: PUSH
43878: LD_INT 0
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 2
43887: PUSH
43888: LD_INT 1
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 2
43897: PUSH
43898: LD_INT 2
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 1
43907: PUSH
43908: LD_INT 2
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 0
43917: PUSH
43918: LD_INT 2
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 1
43927: NEG
43928: PUSH
43929: LD_INT 1
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 2
43938: NEG
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 2
43949: NEG
43950: PUSH
43951: LD_INT 1
43953: NEG
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 2
43961: NEG
43962: PUSH
43963: LD_INT 2
43965: NEG
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43992: LD_ADDR_VAR 0 55
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: LD_INT 0
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 0
44009: PUSH
44010: LD_INT 1
44012: NEG
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 1
44020: PUSH
44021: LD_INT 0
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 1
44030: PUSH
44031: LD_INT 1
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 0
44040: PUSH
44041: LD_INT 1
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 1
44050: NEG
44051: PUSH
44052: LD_INT 0
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: LD_INT 1
44065: NEG
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 1
44073: NEG
44074: PUSH
44075: LD_INT 2
44077: NEG
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 0
44085: PUSH
44086: LD_INT 2
44088: NEG
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 1
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 2
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 2
44117: PUSH
44118: LD_INT 1
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 2
44127: PUSH
44128: LD_INT 2
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 1
44137: PUSH
44138: LD_INT 2
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 0
44147: PUSH
44148: LD_INT 2
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 1
44157: NEG
44158: PUSH
44159: LD_INT 1
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 2
44168: NEG
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 2
44179: NEG
44180: PUSH
44181: LD_INT 1
44183: NEG
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 2
44191: NEG
44192: PUSH
44193: LD_INT 2
44195: NEG
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44222: LD_ADDR_VAR 0 56
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: LD_INT 0
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 0
44239: PUSH
44240: LD_INT 1
44242: NEG
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 1
44250: PUSH
44251: LD_INT 0
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 1
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 0
44270: PUSH
44271: LD_INT 1
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 1
44280: NEG
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: LD_INT 1
44295: NEG
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 1
44303: NEG
44304: PUSH
44305: LD_INT 2
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: LD_INT 2
44318: NEG
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: LD_INT 1
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 2
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 2
44347: PUSH
44348: LD_INT 1
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 2
44357: PUSH
44358: LD_INT 2
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 1
44367: PUSH
44368: LD_INT 2
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: LD_INT 2
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 1
44387: NEG
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 2
44398: NEG
44399: PUSH
44400: LD_INT 0
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 2
44409: NEG
44410: PUSH
44411: LD_INT 1
44413: NEG
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 2
44421: NEG
44422: PUSH
44423: LD_INT 2
44425: NEG
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44452: LD_ADDR_VAR 0 57
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 0
44469: PUSH
44470: LD_INT 1
44472: NEG
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 1
44480: PUSH
44481: LD_INT 0
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 1
44490: PUSH
44491: LD_INT 1
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 0
44500: PUSH
44501: LD_INT 1
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 1
44510: NEG
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 1
44521: NEG
44522: PUSH
44523: LD_INT 1
44525: NEG
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: LD_INT 2
44537: NEG
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: LD_INT 2
44548: NEG
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 1
44556: PUSH
44557: LD_INT 1
44559: NEG
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 2
44567: PUSH
44568: LD_INT 0
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 2
44577: PUSH
44578: LD_INT 1
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 2
44587: PUSH
44588: LD_INT 2
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 1
44597: PUSH
44598: LD_INT 2
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: LD_INT 2
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: LD_INT 1
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 2
44628: NEG
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 2
44639: NEG
44640: PUSH
44641: LD_INT 1
44643: NEG
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 2
44651: NEG
44652: PUSH
44653: LD_INT 2
44655: NEG
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44682: LD_ADDR_VAR 0 58
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: LD_INT 0
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 0
44699: PUSH
44700: LD_INT 1
44702: NEG
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 1
44710: PUSH
44711: LD_INT 0
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 1
44720: PUSH
44721: LD_INT 1
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 0
44730: PUSH
44731: LD_INT 1
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 1
44740: NEG
44741: PUSH
44742: LD_INT 0
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 1
44751: NEG
44752: PUSH
44753: LD_INT 1
44755: NEG
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 1
44763: NEG
44764: PUSH
44765: LD_INT 2
44767: NEG
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 0
44775: PUSH
44776: LD_INT 2
44778: NEG
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 1
44786: PUSH
44787: LD_INT 1
44789: NEG
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 2
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 2
44807: PUSH
44808: LD_INT 1
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 2
44817: PUSH
44818: LD_INT 2
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 1
44827: PUSH
44828: LD_INT 2
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: LD_INT 2
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 1
44847: NEG
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 2
44858: NEG
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 2
44869: NEG
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 2
44881: NEG
44882: PUSH
44883: LD_INT 2
44885: NEG
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44912: LD_ADDR_VAR 0 59
44916: PUSH
44917: LD_INT 0
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 0
44929: PUSH
44930: LD_INT 1
44932: NEG
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 1
44940: PUSH
44941: LD_INT 0
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 1
44950: PUSH
44951: LD_INT 1
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 0
44960: PUSH
44961: LD_INT 1
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 1
44970: NEG
44971: PUSH
44972: LD_INT 0
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 1
44981: NEG
44982: PUSH
44983: LD_INT 1
44985: NEG
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45000: LD_ADDR_VAR 0 60
45004: PUSH
45005: LD_INT 0
45007: PUSH
45008: LD_INT 0
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 0
45017: PUSH
45018: LD_INT 1
45020: NEG
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: LD_INT 1
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 0
45048: PUSH
45049: LD_INT 1
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 1
45058: NEG
45059: PUSH
45060: LD_INT 0
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 1
45069: NEG
45070: PUSH
45071: LD_INT 1
45073: NEG
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45088: LD_ADDR_VAR 0 61
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: LD_INT 0
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: LD_INT 1
45108: NEG
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 1
45126: PUSH
45127: LD_INT 1
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: LD_INT 0
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 1
45157: NEG
45158: PUSH
45159: LD_INT 1
45161: NEG
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45176: LD_ADDR_VAR 0 62
45180: PUSH
45181: LD_INT 0
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 0
45193: PUSH
45194: LD_INT 1
45196: NEG
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 1
45214: PUSH
45215: LD_INT 1
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: LD_INT 1
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 1
45245: NEG
45246: PUSH
45247: LD_INT 1
45249: NEG
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45264: LD_ADDR_VAR 0 63
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 0
45281: PUSH
45282: LD_INT 1
45284: NEG
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: LD_INT 0
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 1
45302: PUSH
45303: LD_INT 1
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 1
45333: NEG
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45352: LD_ADDR_VAR 0 64
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 0
45369: PUSH
45370: LD_INT 1
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: LD_INT 1
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: LD_INT 1
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: LD_INT 0
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 1
45421: NEG
45422: PUSH
45423: LD_INT 1
45425: NEG
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: ST_TO_ADDR
// end ; 1 :
45440: GO 51337
45442: LD_INT 1
45444: DOUBLE
45445: EQUAL
45446: IFTRUE 45450
45448: GO 48073
45450: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45451: LD_ADDR_VAR 0 11
45455: PUSH
45456: LD_INT 1
45458: NEG
45459: PUSH
45460: LD_INT 3
45462: NEG
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 0
45470: PUSH
45471: LD_INT 3
45473: NEG
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 1
45481: PUSH
45482: LD_INT 2
45484: NEG
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: LIST
45494: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45495: LD_ADDR_VAR 0 12
45499: PUSH
45500: LD_INT 2
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 3
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 3
45523: PUSH
45524: LD_INT 1
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: LIST
45535: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45536: LD_ADDR_VAR 0 13
45540: PUSH
45541: LD_INT 3
45543: PUSH
45544: LD_INT 2
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 3
45553: PUSH
45554: LD_INT 3
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 2
45563: PUSH
45564: LD_INT 3
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: LIST
45575: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45576: LD_ADDR_VAR 0 14
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: LD_INT 3
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 0
45593: PUSH
45594: LD_INT 3
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: LD_INT 2
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: LIST
45616: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45617: LD_ADDR_VAR 0 15
45621: PUSH
45622: LD_INT 2
45624: NEG
45625: PUSH
45626: LD_INT 1
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 3
45635: NEG
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 3
45646: NEG
45647: PUSH
45648: LD_INT 1
45650: NEG
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: LIST
45660: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45661: LD_ADDR_VAR 0 16
45665: PUSH
45666: LD_INT 2
45668: NEG
45669: PUSH
45670: LD_INT 3
45672: NEG
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 3
45680: NEG
45681: PUSH
45682: LD_INT 2
45684: NEG
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 3
45692: NEG
45693: PUSH
45694: LD_INT 3
45696: NEG
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: LIST
45706: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45707: LD_ADDR_VAR 0 17
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: LD_INT 3
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: LD_INT 3
45729: NEG
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: PUSH
45738: LD_INT 2
45740: NEG
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: LIST
45750: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45751: LD_ADDR_VAR 0 18
45755: PUSH
45756: LD_INT 2
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 3
45769: PUSH
45770: LD_INT 0
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 3
45779: PUSH
45780: LD_INT 1
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: LIST
45791: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45792: LD_ADDR_VAR 0 19
45796: PUSH
45797: LD_INT 3
45799: PUSH
45800: LD_INT 2
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 3
45809: PUSH
45810: LD_INT 3
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 2
45819: PUSH
45820: LD_INT 3
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: LIST
45831: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45832: LD_ADDR_VAR 0 20
45836: PUSH
45837: LD_INT 1
45839: PUSH
45840: LD_INT 3
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: LD_INT 3
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 1
45859: NEG
45860: PUSH
45861: LD_INT 2
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: LIST
45872: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45873: LD_ADDR_VAR 0 21
45877: PUSH
45878: LD_INT 2
45880: NEG
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 3
45891: NEG
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 3
45902: NEG
45903: PUSH
45904: LD_INT 1
45906: NEG
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: LIST
45916: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45917: LD_ADDR_VAR 0 22
45921: PUSH
45922: LD_INT 2
45924: NEG
45925: PUSH
45926: LD_INT 3
45928: NEG
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 3
45936: NEG
45937: PUSH
45938: LD_INT 2
45940: NEG
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 3
45948: NEG
45949: PUSH
45950: LD_INT 3
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: LIST
45962: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
45963: LD_ADDR_VAR 0 23
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: LD_INT 3
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 1
45981: NEG
45982: PUSH
45983: LD_INT 4
45985: NEG
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 1
45993: PUSH
45994: LD_INT 3
45996: NEG
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: LIST
46006: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46007: LD_ADDR_VAR 0 24
46011: PUSH
46012: LD_INT 3
46014: PUSH
46015: LD_INT 0
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 3
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 4
46035: PUSH
46036: LD_INT 1
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: LIST
46047: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46048: LD_ADDR_VAR 0 25
46052: PUSH
46053: LD_INT 3
46055: PUSH
46056: LD_INT 3
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 4
46065: PUSH
46066: LD_INT 3
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 3
46075: PUSH
46076: LD_INT 4
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: LIST
46087: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46088: LD_ADDR_VAR 0 26
46092: PUSH
46093: LD_INT 0
46095: PUSH
46096: LD_INT 3
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 1
46105: PUSH
46106: LD_INT 4
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 1
46115: NEG
46116: PUSH
46117: LD_INT 3
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: LIST
46128: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46129: LD_ADDR_VAR 0 27
46133: PUSH
46134: LD_INT 3
46136: NEG
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 3
46147: NEG
46148: PUSH
46149: LD_INT 1
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 4
46158: NEG
46159: PUSH
46160: LD_INT 1
46162: NEG
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: LIST
46172: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46173: LD_ADDR_VAR 0 28
46177: PUSH
46178: LD_INT 3
46180: NEG
46181: PUSH
46182: LD_INT 3
46184: NEG
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 3
46192: NEG
46193: PUSH
46194: LD_INT 4
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 4
46204: NEG
46205: PUSH
46206: LD_INT 3
46208: NEG
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: LIST
46218: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46219: LD_ADDR_VAR 0 29
46223: PUSH
46224: LD_INT 1
46226: NEG
46227: PUSH
46228: LD_INT 3
46230: NEG
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 0
46238: PUSH
46239: LD_INT 3
46241: NEG
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: PUSH
46250: LD_INT 2
46252: NEG
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 1
46260: NEG
46261: PUSH
46262: LD_INT 4
46264: NEG
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 0
46272: PUSH
46273: LD_INT 4
46275: NEG
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 1
46283: PUSH
46284: LD_INT 3
46286: NEG
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 1
46294: NEG
46295: PUSH
46296: LD_INT 5
46298: NEG
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 0
46306: PUSH
46307: LD_INT 5
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 1
46317: PUSH
46318: LD_INT 4
46320: NEG
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 1
46328: NEG
46329: PUSH
46330: LD_INT 6
46332: NEG
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: LD_INT 6
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: PUSH
46352: LD_INT 5
46354: NEG
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46374: LD_ADDR_VAR 0 30
46378: PUSH
46379: LD_INT 2
46381: PUSH
46382: LD_INT 1
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 3
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 3
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 3
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 4
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 4
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 4
46443: PUSH
46444: LD_INT 1
46446: NEG
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 5
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 5
46464: PUSH
46465: LD_INT 1
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 5
46474: PUSH
46475: LD_INT 1
46477: NEG
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 6
46485: PUSH
46486: LD_INT 0
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 6
46495: PUSH
46496: LD_INT 1
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46517: LD_ADDR_VAR 0 31
46521: PUSH
46522: LD_INT 3
46524: PUSH
46525: LD_INT 2
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 3
46534: PUSH
46535: LD_INT 3
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 2
46544: PUSH
46545: LD_INT 3
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 4
46554: PUSH
46555: LD_INT 3
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 4
46564: PUSH
46565: LD_INT 4
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 3
46574: PUSH
46575: LD_INT 4
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 5
46584: PUSH
46585: LD_INT 4
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 5
46594: PUSH
46595: LD_INT 5
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 4
46604: PUSH
46605: LD_INT 5
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 6
46614: PUSH
46615: LD_INT 5
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 6
46624: PUSH
46625: LD_INT 6
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 5
46634: PUSH
46635: LD_INT 6
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46656: LD_ADDR_VAR 0 32
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: LD_INT 3
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 0
46673: PUSH
46674: LD_INT 3
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 1
46683: NEG
46684: PUSH
46685: LD_INT 2
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 1
46694: PUSH
46695: LD_INT 4
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 0
46704: PUSH
46705: LD_INT 4
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 1
46714: NEG
46715: PUSH
46716: LD_INT 3
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 1
46725: PUSH
46726: LD_INT 5
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 0
46735: PUSH
46736: LD_INT 5
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 1
46745: NEG
46746: PUSH
46747: LD_INT 4
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: PUSH
46757: LD_INT 6
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 0
46766: PUSH
46767: LD_INT 6
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: LD_INT 5
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
46799: LD_ADDR_VAR 0 33
46803: PUSH
46804: LD_INT 2
46806: NEG
46807: PUSH
46808: LD_INT 1
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 3
46817: NEG
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 3
46828: NEG
46829: PUSH
46830: LD_INT 1
46832: NEG
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 3
46840: NEG
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 4
46851: NEG
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 4
46862: NEG
46863: PUSH
46864: LD_INT 1
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 4
46874: NEG
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 5
46885: NEG
46886: PUSH
46887: LD_INT 0
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 5
46896: NEG
46897: PUSH
46898: LD_INT 1
46900: NEG
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 5
46908: NEG
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 6
46919: NEG
46920: PUSH
46921: LD_INT 0
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 6
46930: NEG
46931: PUSH
46932: LD_INT 1
46934: NEG
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
46954: LD_ADDR_VAR 0 34
46958: PUSH
46959: LD_INT 2
46961: NEG
46962: PUSH
46963: LD_INT 3
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 3
46973: NEG
46974: PUSH
46975: LD_INT 2
46977: NEG
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 3
46985: NEG
46986: PUSH
46987: LD_INT 3
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 3
46997: NEG
46998: PUSH
46999: LD_INT 4
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 4
47009: NEG
47010: PUSH
47011: LD_INT 3
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 4
47021: NEG
47022: PUSH
47023: LD_INT 4
47025: NEG
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 4
47033: NEG
47034: PUSH
47035: LD_INT 5
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 5
47045: NEG
47046: PUSH
47047: LD_INT 4
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 5
47057: NEG
47058: PUSH
47059: LD_INT 5
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 5
47069: NEG
47070: PUSH
47071: LD_INT 6
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 6
47081: NEG
47082: PUSH
47083: LD_INT 5
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 6
47093: NEG
47094: PUSH
47095: LD_INT 6
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47117: LD_ADDR_VAR 0 41
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: LD_INT 2
47127: NEG
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 1
47135: NEG
47136: PUSH
47137: LD_INT 3
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: LD_INT 2
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: LIST
47160: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47161: LD_ADDR_VAR 0 42
47165: PUSH
47166: LD_INT 2
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 2
47178: PUSH
47179: LD_INT 1
47181: NEG
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 3
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: LIST
47201: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47202: LD_ADDR_VAR 0 43
47206: PUSH
47207: LD_INT 2
47209: PUSH
47210: LD_INT 2
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 3
47219: PUSH
47220: LD_INT 2
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 2
47229: PUSH
47230: LD_INT 3
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: LIST
47241: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47242: LD_ADDR_VAR 0 44
47246: PUSH
47247: LD_INT 0
47249: PUSH
47250: LD_INT 2
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 1
47259: PUSH
47260: LD_INT 3
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: LD_INT 2
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: LIST
47282: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47283: LD_ADDR_VAR 0 45
47287: PUSH
47288: LD_INT 2
47290: NEG
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 2
47301: NEG
47302: PUSH
47303: LD_INT 1
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 3
47312: NEG
47313: PUSH
47314: LD_INT 1
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: LIST
47326: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47327: LD_ADDR_VAR 0 46
47331: PUSH
47332: LD_INT 2
47334: NEG
47335: PUSH
47336: LD_INT 2
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 2
47346: NEG
47347: PUSH
47348: LD_INT 3
47350: NEG
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 3
47358: NEG
47359: PUSH
47360: LD_INT 2
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: LIST
47372: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47373: LD_ADDR_VAR 0 47
47377: PUSH
47378: LD_INT 2
47380: NEG
47381: PUSH
47382: LD_INT 3
47384: NEG
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: LD_INT 3
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47406: LD_ADDR_VAR 0 48
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: LD_INT 2
47416: NEG
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 2
47424: PUSH
47425: LD_INT 1
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47437: LD_ADDR_VAR 0 49
47441: PUSH
47442: LD_INT 3
47444: PUSH
47445: LD_INT 1
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 3
47454: PUSH
47455: LD_INT 2
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47466: LD_ADDR_VAR 0 50
47470: PUSH
47471: LD_INT 2
47473: PUSH
47474: LD_INT 3
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 1
47483: PUSH
47484: LD_INT 3
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47495: LD_ADDR_VAR 0 51
47499: PUSH
47500: LD_INT 1
47502: NEG
47503: PUSH
47504: LD_INT 2
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 2
47513: NEG
47514: PUSH
47515: LD_INT 1
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47526: LD_ADDR_VAR 0 52
47530: PUSH
47531: LD_INT 3
47533: NEG
47534: PUSH
47535: LD_INT 1
47537: NEG
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 3
47545: NEG
47546: PUSH
47547: LD_INT 2
47549: NEG
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47559: LD_ADDR_VAR 0 53
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: LD_INT 3
47570: NEG
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: LD_INT 3
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: LD_INT 2
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: LIST
47602: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47603: LD_ADDR_VAR 0 54
47607: PUSH
47608: LD_INT 2
47610: PUSH
47611: LD_INT 1
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 3
47621: PUSH
47622: LD_INT 0
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 3
47631: PUSH
47632: LD_INT 1
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: LIST
47643: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47644: LD_ADDR_VAR 0 55
47648: PUSH
47649: LD_INT 3
47651: PUSH
47652: LD_INT 2
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 3
47661: PUSH
47662: LD_INT 3
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 2
47671: PUSH
47672: LD_INT 3
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: LIST
47683: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47684: LD_ADDR_VAR 0 56
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: LD_INT 3
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: LD_INT 3
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: LD_INT 2
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: LIST
47724: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47725: LD_ADDR_VAR 0 57
47729: PUSH
47730: LD_INT 2
47732: NEG
47733: PUSH
47734: LD_INT 1
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 3
47743: NEG
47744: PUSH
47745: LD_INT 0
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 3
47754: NEG
47755: PUSH
47756: LD_INT 1
47758: NEG
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: LIST
47768: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47769: LD_ADDR_VAR 0 58
47773: PUSH
47774: LD_INT 2
47776: NEG
47777: PUSH
47778: LD_INT 3
47780: NEG
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 3
47788: NEG
47789: PUSH
47790: LD_INT 2
47792: NEG
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 3
47800: NEG
47801: PUSH
47802: LD_INT 3
47804: NEG
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: LIST
47814: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
47815: LD_ADDR_VAR 0 59
47819: PUSH
47820: LD_INT 1
47822: NEG
47823: PUSH
47824: LD_INT 2
47826: NEG
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: LD_INT 2
47837: NEG
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: LD_INT 1
47848: NEG
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: LIST
47858: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47859: LD_ADDR_VAR 0 60
47863: PUSH
47864: LD_INT 1
47866: PUSH
47867: LD_INT 1
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 2
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 2
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: LIST
47899: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47900: LD_ADDR_VAR 0 61
47904: PUSH
47905: LD_INT 2
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 2
47917: PUSH
47918: LD_INT 2
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 1
47927: PUSH
47928: LD_INT 2
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: LIST
47939: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47940: LD_ADDR_VAR 0 62
47944: PUSH
47945: LD_INT 1
47947: PUSH
47948: LD_INT 2
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: LD_INT 2
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 1
47967: NEG
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: LIST
47980: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47981: LD_ADDR_VAR 0 63
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 2
47999: NEG
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 2
48010: NEG
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: LIST
48024: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48025: LD_ADDR_VAR 0 64
48029: PUSH
48030: LD_INT 1
48032: NEG
48033: PUSH
48034: LD_INT 2
48036: NEG
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 2
48044: NEG
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 2
48056: NEG
48057: PUSH
48058: LD_INT 2
48060: NEG
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: LIST
48070: ST_TO_ADDR
// end ; 2 :
48071: GO 51337
48073: LD_INT 2
48075: DOUBLE
48076: EQUAL
48077: IFTRUE 48081
48079: GO 51336
48081: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48082: LD_ADDR_VAR 0 29
48086: PUSH
48087: LD_INT 4
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 4
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 5
48110: PUSH
48111: LD_INT 0
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 5
48120: PUSH
48121: LD_INT 1
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 4
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 3
48140: PUSH
48141: LD_INT 0
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 3
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 3
48161: PUSH
48162: LD_INT 2
48164: NEG
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 5
48172: PUSH
48173: LD_INT 2
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 3
48182: PUSH
48183: LD_INT 3
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 3
48192: PUSH
48193: LD_INT 2
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 4
48202: PUSH
48203: LD_INT 3
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 4
48212: PUSH
48213: LD_INT 4
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 3
48222: PUSH
48223: LD_INT 4
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 2
48232: PUSH
48233: LD_INT 3
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 2
48242: PUSH
48243: LD_INT 2
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 4
48252: PUSH
48253: LD_INT 2
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 2
48262: PUSH
48263: LD_INT 4
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: LD_INT 4
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: LD_INT 3
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: LD_INT 4
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 1
48302: PUSH
48303: LD_INT 5
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 0
48312: PUSH
48313: LD_INT 5
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 1
48322: NEG
48323: PUSH
48324: LD_INT 4
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 1
48333: NEG
48334: PUSH
48335: LD_INT 3
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 2
48344: PUSH
48345: LD_INT 5
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 2
48354: NEG
48355: PUSH
48356: LD_INT 3
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 3
48365: NEG
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 3
48376: NEG
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 2
48388: NEG
48389: PUSH
48390: LD_INT 0
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 2
48399: NEG
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 3
48410: NEG
48411: PUSH
48412: LD_INT 1
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 4
48421: NEG
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 4
48432: NEG
48433: PUSH
48434: LD_INT 1
48436: NEG
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 4
48444: NEG
48445: PUSH
48446: LD_INT 2
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 2
48456: NEG
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 4
48467: NEG
48468: PUSH
48469: LD_INT 4
48471: NEG
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 4
48479: NEG
48480: PUSH
48481: LD_INT 5
48483: NEG
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 3
48491: NEG
48492: PUSH
48493: LD_INT 4
48495: NEG
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 3
48503: NEG
48504: PUSH
48505: LD_INT 3
48507: NEG
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 4
48515: NEG
48516: PUSH
48517: LD_INT 3
48519: NEG
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 5
48527: NEG
48528: PUSH
48529: LD_INT 4
48531: NEG
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 5
48539: NEG
48540: PUSH
48541: LD_INT 5
48543: NEG
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 3
48551: NEG
48552: PUSH
48553: LD_INT 5
48555: NEG
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 5
48563: NEG
48564: PUSH
48565: LD_INT 3
48567: NEG
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48620: LD_ADDR_VAR 0 30
48624: PUSH
48625: LD_INT 4
48627: PUSH
48628: LD_INT 4
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 4
48637: PUSH
48638: LD_INT 3
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 5
48647: PUSH
48648: LD_INT 4
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 5
48657: PUSH
48658: LD_INT 5
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 4
48667: PUSH
48668: LD_INT 5
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 3
48677: PUSH
48678: LD_INT 4
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 3
48687: PUSH
48688: LD_INT 3
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 5
48697: PUSH
48698: LD_INT 3
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 3
48707: PUSH
48708: LD_INT 5
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 0
48717: PUSH
48718: LD_INT 3
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: LD_INT 2
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: LD_INT 3
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 1
48747: PUSH
48748: LD_INT 4
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: LD_INT 4
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 1
48767: NEG
48768: PUSH
48769: LD_INT 3
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: NEG
48779: PUSH
48780: LD_INT 2
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 2
48789: PUSH
48790: LD_INT 4
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 2
48799: NEG
48800: PUSH
48801: LD_INT 2
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 4
48810: NEG
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 4
48821: NEG
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 3
48833: NEG
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 3
48844: NEG
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 4
48855: NEG
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 5
48866: NEG
48867: PUSH
48868: LD_INT 0
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 5
48877: NEG
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 5
48889: NEG
48890: PUSH
48891: LD_INT 2
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 3
48901: NEG
48902: PUSH
48903: LD_INT 2
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 3
48912: NEG
48913: PUSH
48914: LD_INT 3
48916: NEG
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 3
48924: NEG
48925: PUSH
48926: LD_INT 4
48928: NEG
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 2
48936: NEG
48937: PUSH
48938: LD_INT 3
48940: NEG
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 2
48948: NEG
48949: PUSH
48950: LD_INT 2
48952: NEG
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 3
48960: NEG
48961: PUSH
48962: LD_INT 2
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 4
48972: NEG
48973: PUSH
48974: LD_INT 3
48976: NEG
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 4
48984: NEG
48985: PUSH
48986: LD_INT 4
48988: NEG
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 2
48996: NEG
48997: PUSH
48998: LD_INT 4
49000: NEG
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 4
49008: NEG
49009: PUSH
49010: LD_INT 2
49012: NEG
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 0
49020: PUSH
49021: LD_INT 4
49023: NEG
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: LD_INT 5
49034: NEG
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 1
49042: PUSH
49043: LD_INT 4
49045: NEG
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: LD_INT 3
49056: NEG
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: LD_INT 3
49067: NEG
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 1
49075: NEG
49076: PUSH
49077: LD_INT 4
49079: NEG
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 1
49087: NEG
49088: PUSH
49089: LD_INT 5
49091: NEG
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 2
49099: PUSH
49100: LD_INT 3
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 2
49110: NEG
49111: PUSH
49112: LD_INT 5
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49167: LD_ADDR_VAR 0 31
49171: PUSH
49172: LD_INT 0
49174: PUSH
49175: LD_INT 4
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: LD_INT 3
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: LD_INT 4
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 1
49204: PUSH
49205: LD_INT 5
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 0
49214: PUSH
49215: LD_INT 5
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 1
49224: NEG
49225: PUSH
49226: LD_INT 4
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: LD_INT 3
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 2
49246: PUSH
49247: LD_INT 5
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 2
49256: NEG
49257: PUSH
49258: LD_INT 3
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 3
49267: NEG
49268: PUSH
49269: LD_INT 0
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 3
49278: NEG
49279: PUSH
49280: LD_INT 1
49282: NEG
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 2
49290: NEG
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 2
49301: NEG
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 3
49312: NEG
49313: PUSH
49314: LD_INT 1
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 4
49323: NEG
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 4
49334: NEG
49335: PUSH
49336: LD_INT 1
49338: NEG
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 4
49346: NEG
49347: PUSH
49348: LD_INT 2
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 2
49358: NEG
49359: PUSH
49360: LD_INT 2
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 4
49369: NEG
49370: PUSH
49371: LD_INT 4
49373: NEG
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 4
49381: NEG
49382: PUSH
49383: LD_INT 5
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 3
49393: NEG
49394: PUSH
49395: LD_INT 4
49397: NEG
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 3
49405: NEG
49406: PUSH
49407: LD_INT 3
49409: NEG
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 4
49417: NEG
49418: PUSH
49419: LD_INT 3
49421: NEG
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 5
49429: NEG
49430: PUSH
49431: LD_INT 4
49433: NEG
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 5
49441: NEG
49442: PUSH
49443: LD_INT 5
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 3
49453: NEG
49454: PUSH
49455: LD_INT 5
49457: NEG
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 5
49465: NEG
49466: PUSH
49467: LD_INT 3
49469: NEG
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 0
49477: PUSH
49478: LD_INT 3
49480: NEG
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: LD_INT 4
49491: NEG
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 1
49499: PUSH
49500: LD_INT 3
49502: NEG
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: PUSH
49511: LD_INT 2
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: LD_INT 2
49524: NEG
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 1
49532: NEG
49533: PUSH
49534: LD_INT 3
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 1
49544: NEG
49545: PUSH
49546: LD_INT 4
49548: NEG
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 2
49556: PUSH
49557: LD_INT 2
49559: NEG
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 2
49567: NEG
49568: PUSH
49569: LD_INT 4
49571: NEG
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 4
49579: PUSH
49580: LD_INT 0
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 4
49589: PUSH
49590: LD_INT 1
49592: NEG
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 5
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 5
49610: PUSH
49611: LD_INT 1
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 4
49620: PUSH
49621: LD_INT 1
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 3
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 3
49640: PUSH
49641: LD_INT 1
49643: NEG
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 3
49651: PUSH
49652: LD_INT 2
49654: NEG
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 5
49662: PUSH
49663: LD_INT 2
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
49717: LD_ADDR_VAR 0 32
49721: PUSH
49722: LD_INT 4
49724: NEG
49725: PUSH
49726: LD_INT 0
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 4
49735: NEG
49736: PUSH
49737: LD_INT 1
49739: NEG
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 3
49747: NEG
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 3
49758: NEG
49759: PUSH
49760: LD_INT 1
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 4
49769: NEG
49770: PUSH
49771: LD_INT 1
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 5
49780: NEG
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 5
49791: NEG
49792: PUSH
49793: LD_INT 1
49795: NEG
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 5
49803: NEG
49804: PUSH
49805: LD_INT 2
49807: NEG
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 3
49815: NEG
49816: PUSH
49817: LD_INT 2
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 3
49826: NEG
49827: PUSH
49828: LD_INT 3
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 3
49838: NEG
49839: PUSH
49840: LD_INT 4
49842: NEG
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 2
49850: NEG
49851: PUSH
49852: LD_INT 3
49854: NEG
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 2
49862: NEG
49863: PUSH
49864: LD_INT 2
49866: NEG
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 3
49874: NEG
49875: PUSH
49876: LD_INT 2
49878: NEG
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 4
49886: NEG
49887: PUSH
49888: LD_INT 3
49890: NEG
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 4
49898: NEG
49899: PUSH
49900: LD_INT 4
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 2
49910: NEG
49911: PUSH
49912: LD_INT 4
49914: NEG
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 4
49922: NEG
49923: PUSH
49924: LD_INT 2
49926: NEG
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: LD_INT 4
49937: NEG
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: LD_INT 5
49948: NEG
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 1
49956: PUSH
49957: LD_INT 4
49959: NEG
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 1
49967: PUSH
49968: LD_INT 3
49970: NEG
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 0
49978: PUSH
49979: LD_INT 3
49981: NEG
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 1
49989: NEG
49990: PUSH
49991: LD_INT 4
49993: NEG
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: LD_INT 5
50005: NEG
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 2
50013: PUSH
50014: LD_INT 3
50016: NEG
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 2
50024: NEG
50025: PUSH
50026: LD_INT 5
50028: NEG
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 3
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 3
50046: PUSH
50047: LD_INT 1
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 4
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 4
50067: PUSH
50068: LD_INT 1
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 3
50077: PUSH
50078: LD_INT 1
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 2
50087: PUSH
50088: LD_INT 0
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 2
50097: PUSH
50098: LD_INT 1
50100: NEG
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 2
50108: PUSH
50109: LD_INT 2
50111: NEG
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 4
50119: PUSH
50120: LD_INT 2
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 4
50129: PUSH
50130: LD_INT 4
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 4
50139: PUSH
50140: LD_INT 3
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 5
50149: PUSH
50150: LD_INT 4
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 5
50159: PUSH
50160: LD_INT 5
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 4
50169: PUSH
50170: LD_INT 5
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 3
50179: PUSH
50180: LD_INT 4
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 3
50189: PUSH
50190: LD_INT 3
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 5
50199: PUSH
50200: LD_INT 3
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 3
50209: PUSH
50210: LD_INT 5
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50264: LD_ADDR_VAR 0 33
50268: PUSH
50269: LD_INT 4
50271: NEG
50272: PUSH
50273: LD_INT 4
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 4
50283: NEG
50284: PUSH
50285: LD_INT 5
50287: NEG
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 3
50295: NEG
50296: PUSH
50297: LD_INT 4
50299: NEG
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 3
50307: NEG
50308: PUSH
50309: LD_INT 3
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 4
50319: NEG
50320: PUSH
50321: LD_INT 3
50323: NEG
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 5
50331: NEG
50332: PUSH
50333: LD_INT 4
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 5
50343: NEG
50344: PUSH
50345: LD_INT 5
50347: NEG
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 3
50355: NEG
50356: PUSH
50357: LD_INT 5
50359: NEG
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 5
50367: NEG
50368: PUSH
50369: LD_INT 3
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 0
50379: PUSH
50380: LD_INT 3
50382: NEG
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 0
50390: PUSH
50391: LD_INT 4
50393: NEG
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 1
50401: PUSH
50402: LD_INT 3
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: LD_INT 2
50415: NEG
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: LD_INT 2
50426: NEG
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: LD_INT 3
50438: NEG
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 1
50446: NEG
50447: PUSH
50448: LD_INT 4
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 2
50458: PUSH
50459: LD_INT 2
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 2
50469: NEG
50470: PUSH
50471: LD_INT 4
50473: NEG
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 4
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 4
50491: PUSH
50492: LD_INT 1
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 5
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 5
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 4
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 3
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 3
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 3
50553: PUSH
50554: LD_INT 2
50556: NEG
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 5
50564: PUSH
50565: LD_INT 2
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 3
50574: PUSH
50575: LD_INT 3
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 3
50584: PUSH
50585: LD_INT 2
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 4
50594: PUSH
50595: LD_INT 3
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 4
50604: PUSH
50605: LD_INT 4
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 3
50614: PUSH
50615: LD_INT 4
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 2
50624: PUSH
50625: LD_INT 3
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 2
50634: PUSH
50635: LD_INT 2
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 4
50644: PUSH
50645: LD_INT 2
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 2
50654: PUSH
50655: LD_INT 4
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 0
50664: PUSH
50665: LD_INT 4
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: LD_INT 3
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 1
50684: PUSH
50685: LD_INT 4
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: LD_INT 5
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 0
50704: PUSH
50705: LD_INT 5
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: LD_INT 4
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: LD_INT 3
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 2
50736: PUSH
50737: LD_INT 5
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 2
50746: NEG
50747: PUSH
50748: LD_INT 3
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
50802: LD_ADDR_VAR 0 34
50806: PUSH
50807: LD_INT 0
50809: PUSH
50810: LD_INT 4
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: LD_INT 5
50823: NEG
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: PUSH
50832: LD_INT 4
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 1
50842: PUSH
50843: LD_INT 3
50845: NEG
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: LD_INT 3
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 1
50864: NEG
50865: PUSH
50866: LD_INT 4
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 1
50876: NEG
50877: PUSH
50878: LD_INT 5
50880: NEG
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 2
50888: PUSH
50889: LD_INT 3
50891: NEG
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 2
50899: NEG
50900: PUSH
50901: LD_INT 5
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 3
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 3
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 4
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 4
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 3
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 2
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 2
50972: PUSH
50973: LD_INT 1
50975: NEG
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 2
50983: PUSH
50984: LD_INT 2
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 4
50994: PUSH
50995: LD_INT 2
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 4
51004: PUSH
51005: LD_INT 4
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 4
51014: PUSH
51015: LD_INT 3
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 5
51024: PUSH
51025: LD_INT 4
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 5
51034: PUSH
51035: LD_INT 5
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 4
51044: PUSH
51045: LD_INT 5
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 3
51054: PUSH
51055: LD_INT 4
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 3
51064: PUSH
51065: LD_INT 3
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 5
51074: PUSH
51075: LD_INT 3
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 3
51084: PUSH
51085: LD_INT 5
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: LD_INT 3
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 0
51104: PUSH
51105: LD_INT 2
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: LD_INT 3
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: LD_INT 4
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: LD_INT 4
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 1
51144: NEG
51145: PUSH
51146: LD_INT 3
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 1
51155: NEG
51156: PUSH
51157: LD_INT 2
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 2
51166: PUSH
51167: LD_INT 4
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 2
51176: NEG
51177: PUSH
51178: LD_INT 2
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 4
51187: NEG
51188: PUSH
51189: LD_INT 0
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 4
51198: NEG
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 3
51210: NEG
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 3
51221: NEG
51222: PUSH
51223: LD_INT 1
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 4
51232: NEG
51233: PUSH
51234: LD_INT 1
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 5
51243: NEG
51244: PUSH
51245: LD_INT 0
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 5
51254: NEG
51255: PUSH
51256: LD_INT 1
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 5
51266: NEG
51267: PUSH
51268: LD_INT 2
51270: NEG
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 3
51278: NEG
51279: PUSH
51280: LD_INT 2
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: ST_TO_ADDR
// end ; end ;
51334: GO 51337
51336: POP
// case btype of b_depot , b_warehouse :
51337: LD_VAR 0 1
51341: PUSH
51342: LD_INT 0
51344: DOUBLE
51345: EQUAL
51346: IFTRUE 51356
51348: LD_INT 1
51350: DOUBLE
51351: EQUAL
51352: IFTRUE 51356
51354: GO 51557
51356: POP
// case nation of nation_american :
51357: LD_VAR 0 5
51361: PUSH
51362: LD_INT 1
51364: DOUBLE
51365: EQUAL
51366: IFTRUE 51370
51368: GO 51426
51370: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
51371: LD_ADDR_VAR 0 9
51375: PUSH
51376: LD_VAR 0 11
51380: PUSH
51381: LD_VAR 0 12
51385: PUSH
51386: LD_VAR 0 13
51390: PUSH
51391: LD_VAR 0 14
51395: PUSH
51396: LD_VAR 0 15
51400: PUSH
51401: LD_VAR 0 16
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: PUSH
51414: LD_VAR 0 4
51418: PUSH
51419: LD_INT 1
51421: PLUS
51422: ARRAY
51423: ST_TO_ADDR
51424: GO 51555
51426: LD_INT 2
51428: DOUBLE
51429: EQUAL
51430: IFTRUE 51434
51432: GO 51490
51434: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
51435: LD_ADDR_VAR 0 9
51439: PUSH
51440: LD_VAR 0 17
51444: PUSH
51445: LD_VAR 0 18
51449: PUSH
51450: LD_VAR 0 19
51454: PUSH
51455: LD_VAR 0 20
51459: PUSH
51460: LD_VAR 0 21
51464: PUSH
51465: LD_VAR 0 22
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: PUSH
51478: LD_VAR 0 4
51482: PUSH
51483: LD_INT 1
51485: PLUS
51486: ARRAY
51487: ST_TO_ADDR
51488: GO 51555
51490: LD_INT 3
51492: DOUBLE
51493: EQUAL
51494: IFTRUE 51498
51496: GO 51554
51498: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51499: LD_ADDR_VAR 0 9
51503: PUSH
51504: LD_VAR 0 23
51508: PUSH
51509: LD_VAR 0 24
51513: PUSH
51514: LD_VAR 0 25
51518: PUSH
51519: LD_VAR 0 26
51523: PUSH
51524: LD_VAR 0 27
51528: PUSH
51529: LD_VAR 0 28
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: PUSH
51542: LD_VAR 0 4
51546: PUSH
51547: LD_INT 1
51549: PLUS
51550: ARRAY
51551: ST_TO_ADDR
51552: GO 51555
51554: POP
51555: GO 52110
51557: LD_INT 2
51559: DOUBLE
51560: EQUAL
51561: IFTRUE 51571
51563: LD_INT 3
51565: DOUBLE
51566: EQUAL
51567: IFTRUE 51571
51569: GO 51627
51571: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51572: LD_ADDR_VAR 0 9
51576: PUSH
51577: LD_VAR 0 29
51581: PUSH
51582: LD_VAR 0 30
51586: PUSH
51587: LD_VAR 0 31
51591: PUSH
51592: LD_VAR 0 32
51596: PUSH
51597: LD_VAR 0 33
51601: PUSH
51602: LD_VAR 0 34
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: PUSH
51615: LD_VAR 0 4
51619: PUSH
51620: LD_INT 1
51622: PLUS
51623: ARRAY
51624: ST_TO_ADDR
51625: GO 52110
51627: LD_INT 16
51629: DOUBLE
51630: EQUAL
51631: IFTRUE 51689
51633: LD_INT 17
51635: DOUBLE
51636: EQUAL
51637: IFTRUE 51689
51639: LD_INT 18
51641: DOUBLE
51642: EQUAL
51643: IFTRUE 51689
51645: LD_INT 19
51647: DOUBLE
51648: EQUAL
51649: IFTRUE 51689
51651: LD_INT 22
51653: DOUBLE
51654: EQUAL
51655: IFTRUE 51689
51657: LD_INT 20
51659: DOUBLE
51660: EQUAL
51661: IFTRUE 51689
51663: LD_INT 21
51665: DOUBLE
51666: EQUAL
51667: IFTRUE 51689
51669: LD_INT 23
51671: DOUBLE
51672: EQUAL
51673: IFTRUE 51689
51675: LD_INT 24
51677: DOUBLE
51678: EQUAL
51679: IFTRUE 51689
51681: LD_INT 25
51683: DOUBLE
51684: EQUAL
51685: IFTRUE 51689
51687: GO 51745
51689: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51690: LD_ADDR_VAR 0 9
51694: PUSH
51695: LD_VAR 0 35
51699: PUSH
51700: LD_VAR 0 36
51704: PUSH
51705: LD_VAR 0 37
51709: PUSH
51710: LD_VAR 0 38
51714: PUSH
51715: LD_VAR 0 39
51719: PUSH
51720: LD_VAR 0 40
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: PUSH
51733: LD_VAR 0 4
51737: PUSH
51738: LD_INT 1
51740: PLUS
51741: ARRAY
51742: ST_TO_ADDR
51743: GO 52110
51745: LD_INT 6
51747: DOUBLE
51748: EQUAL
51749: IFTRUE 51801
51751: LD_INT 7
51753: DOUBLE
51754: EQUAL
51755: IFTRUE 51801
51757: LD_INT 8
51759: DOUBLE
51760: EQUAL
51761: IFTRUE 51801
51763: LD_INT 13
51765: DOUBLE
51766: EQUAL
51767: IFTRUE 51801
51769: LD_INT 12
51771: DOUBLE
51772: EQUAL
51773: IFTRUE 51801
51775: LD_INT 15
51777: DOUBLE
51778: EQUAL
51779: IFTRUE 51801
51781: LD_INT 11
51783: DOUBLE
51784: EQUAL
51785: IFTRUE 51801
51787: LD_INT 14
51789: DOUBLE
51790: EQUAL
51791: IFTRUE 51801
51793: LD_INT 10
51795: DOUBLE
51796: EQUAL
51797: IFTRUE 51801
51799: GO 51857
51801: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
51802: LD_ADDR_VAR 0 9
51806: PUSH
51807: LD_VAR 0 41
51811: PUSH
51812: LD_VAR 0 42
51816: PUSH
51817: LD_VAR 0 43
51821: PUSH
51822: LD_VAR 0 44
51826: PUSH
51827: LD_VAR 0 45
51831: PUSH
51832: LD_VAR 0 46
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: PUSH
51845: LD_VAR 0 4
51849: PUSH
51850: LD_INT 1
51852: PLUS
51853: ARRAY
51854: ST_TO_ADDR
51855: GO 52110
51857: LD_INT 36
51859: DOUBLE
51860: EQUAL
51861: IFTRUE 51865
51863: GO 51921
51865: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
51866: LD_ADDR_VAR 0 9
51870: PUSH
51871: LD_VAR 0 47
51875: PUSH
51876: LD_VAR 0 48
51880: PUSH
51881: LD_VAR 0 49
51885: PUSH
51886: LD_VAR 0 50
51890: PUSH
51891: LD_VAR 0 51
51895: PUSH
51896: LD_VAR 0 52
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: PUSH
51909: LD_VAR 0 4
51913: PUSH
51914: LD_INT 1
51916: PLUS
51917: ARRAY
51918: ST_TO_ADDR
51919: GO 52110
51921: LD_INT 4
51923: DOUBLE
51924: EQUAL
51925: IFTRUE 51947
51927: LD_INT 5
51929: DOUBLE
51930: EQUAL
51931: IFTRUE 51947
51933: LD_INT 34
51935: DOUBLE
51936: EQUAL
51937: IFTRUE 51947
51939: LD_INT 37
51941: DOUBLE
51942: EQUAL
51943: IFTRUE 51947
51945: GO 52003
51947: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
51948: LD_ADDR_VAR 0 9
51952: PUSH
51953: LD_VAR 0 53
51957: PUSH
51958: LD_VAR 0 54
51962: PUSH
51963: LD_VAR 0 55
51967: PUSH
51968: LD_VAR 0 56
51972: PUSH
51973: LD_VAR 0 57
51977: PUSH
51978: LD_VAR 0 58
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: PUSH
51991: LD_VAR 0 4
51995: PUSH
51996: LD_INT 1
51998: PLUS
51999: ARRAY
52000: ST_TO_ADDR
52001: GO 52110
52003: LD_INT 31
52005: DOUBLE
52006: EQUAL
52007: IFTRUE 52053
52009: LD_INT 32
52011: DOUBLE
52012: EQUAL
52013: IFTRUE 52053
52015: LD_INT 33
52017: DOUBLE
52018: EQUAL
52019: IFTRUE 52053
52021: LD_INT 27
52023: DOUBLE
52024: EQUAL
52025: IFTRUE 52053
52027: LD_INT 26
52029: DOUBLE
52030: EQUAL
52031: IFTRUE 52053
52033: LD_INT 28
52035: DOUBLE
52036: EQUAL
52037: IFTRUE 52053
52039: LD_INT 29
52041: DOUBLE
52042: EQUAL
52043: IFTRUE 52053
52045: LD_INT 30
52047: DOUBLE
52048: EQUAL
52049: IFTRUE 52053
52051: GO 52109
52053: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
52054: LD_ADDR_VAR 0 9
52058: PUSH
52059: LD_VAR 0 59
52063: PUSH
52064: LD_VAR 0 60
52068: PUSH
52069: LD_VAR 0 61
52073: PUSH
52074: LD_VAR 0 62
52078: PUSH
52079: LD_VAR 0 63
52083: PUSH
52084: LD_VAR 0 64
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: PUSH
52097: LD_VAR 0 4
52101: PUSH
52102: LD_INT 1
52104: PLUS
52105: ARRAY
52106: ST_TO_ADDR
52107: GO 52110
52109: POP
// temp_list2 = [ ] ;
52110: LD_ADDR_VAR 0 10
52114: PUSH
52115: EMPTY
52116: ST_TO_ADDR
// for i in temp_list do
52117: LD_ADDR_VAR 0 8
52121: PUSH
52122: LD_VAR 0 9
52126: PUSH
52127: FOR_IN
52128: IFFALSE 52180
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52130: LD_ADDR_VAR 0 10
52134: PUSH
52135: LD_VAR 0 10
52139: PUSH
52140: LD_VAR 0 8
52144: PUSH
52145: LD_INT 1
52147: ARRAY
52148: PUSH
52149: LD_VAR 0 2
52153: PLUS
52154: PUSH
52155: LD_VAR 0 8
52159: PUSH
52160: LD_INT 2
52162: ARRAY
52163: PUSH
52164: LD_VAR 0 3
52168: PLUS
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: EMPTY
52175: LIST
52176: ADD
52177: ST_TO_ADDR
52178: GO 52127
52180: POP
52181: POP
// result = temp_list2 ;
52182: LD_ADDR_VAR 0 7
52186: PUSH
52187: LD_VAR 0 10
52191: ST_TO_ADDR
// end ;
52192: LD_VAR 0 7
52196: RET
// export function EnemyInRange ( unit , dist ) ; begin
52197: LD_INT 0
52199: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52200: LD_ADDR_VAR 0 3
52204: PUSH
52205: LD_VAR 0 1
52209: PPUSH
52210: CALL_OW 255
52214: PPUSH
52215: LD_VAR 0 1
52219: PPUSH
52220: CALL_OW 250
52224: PPUSH
52225: LD_VAR 0 1
52229: PPUSH
52230: CALL_OW 251
52234: PPUSH
52235: LD_VAR 0 2
52239: PPUSH
52240: CALL 25593 0 4
52244: PUSH
52245: LD_INT 4
52247: ARRAY
52248: ST_TO_ADDR
// end ;
52249: LD_VAR 0 3
52253: RET
// export function PlayerSeeMe ( unit ) ; begin
52254: LD_INT 0
52256: PPUSH
// result := See ( your_side , unit ) ;
52257: LD_ADDR_VAR 0 2
52261: PUSH
52262: LD_OWVAR 2
52266: PPUSH
52267: LD_VAR 0 1
52271: PPUSH
52272: CALL_OW 292
52276: ST_TO_ADDR
// end ;
52277: LD_VAR 0 2
52281: RET
// export function ReverseDir ( unit ) ; begin
52282: LD_INT 0
52284: PPUSH
// if not unit then
52285: LD_VAR 0 1
52289: NOT
52290: IFFALSE 52294
// exit ;
52292: GO 52317
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52294: LD_ADDR_VAR 0 2
52298: PUSH
52299: LD_VAR 0 1
52303: PPUSH
52304: CALL_OW 254
52308: PUSH
52309: LD_INT 3
52311: PLUS
52312: PUSH
52313: LD_INT 6
52315: MOD
52316: ST_TO_ADDR
// end ;
52317: LD_VAR 0 2
52321: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52322: LD_INT 0
52324: PPUSH
52325: PPUSH
52326: PPUSH
52327: PPUSH
52328: PPUSH
// if not hexes then
52329: LD_VAR 0 2
52333: NOT
52334: IFFALSE 52338
// exit ;
52336: GO 52486
// dist := 9999 ;
52338: LD_ADDR_VAR 0 5
52342: PUSH
52343: LD_INT 9999
52345: ST_TO_ADDR
// for i = 1 to hexes do
52346: LD_ADDR_VAR 0 4
52350: PUSH
52351: DOUBLE
52352: LD_INT 1
52354: DEC
52355: ST_TO_ADDR
52356: LD_VAR 0 2
52360: PUSH
52361: FOR_TO
52362: IFFALSE 52474
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52364: LD_VAR 0 1
52368: PPUSH
52369: LD_VAR 0 2
52373: PUSH
52374: LD_VAR 0 4
52378: ARRAY
52379: PUSH
52380: LD_INT 1
52382: ARRAY
52383: PPUSH
52384: LD_VAR 0 2
52388: PUSH
52389: LD_VAR 0 4
52393: ARRAY
52394: PUSH
52395: LD_INT 2
52397: ARRAY
52398: PPUSH
52399: CALL_OW 297
52403: PUSH
52404: LD_VAR 0 5
52408: LESS
52409: IFFALSE 52472
// begin hex := hexes [ i ] ;
52411: LD_ADDR_VAR 0 7
52415: PUSH
52416: LD_VAR 0 2
52420: PUSH
52421: LD_VAR 0 4
52425: ARRAY
52426: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52427: LD_ADDR_VAR 0 5
52431: PUSH
52432: LD_VAR 0 1
52436: PPUSH
52437: LD_VAR 0 2
52441: PUSH
52442: LD_VAR 0 4
52446: ARRAY
52447: PUSH
52448: LD_INT 1
52450: ARRAY
52451: PPUSH
52452: LD_VAR 0 2
52456: PUSH
52457: LD_VAR 0 4
52461: ARRAY
52462: PUSH
52463: LD_INT 2
52465: ARRAY
52466: PPUSH
52467: CALL_OW 297
52471: ST_TO_ADDR
// end ; end ;
52472: GO 52361
52474: POP
52475: POP
// result := hex ;
52476: LD_ADDR_VAR 0 3
52480: PUSH
52481: LD_VAR 0 7
52485: ST_TO_ADDR
// end ;
52486: LD_VAR 0 3
52490: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52491: LD_INT 0
52493: PPUSH
52494: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52495: LD_VAR 0 1
52499: NOT
52500: PUSH
52501: LD_VAR 0 1
52505: PUSH
52506: LD_INT 21
52508: PUSH
52509: LD_INT 2
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 23
52518: PUSH
52519: LD_INT 2
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PPUSH
52530: CALL_OW 69
52534: IN
52535: NOT
52536: OR
52537: IFFALSE 52541
// exit ;
52539: GO 52588
// for i = 1 to 3 do
52541: LD_ADDR_VAR 0 3
52545: PUSH
52546: DOUBLE
52547: LD_INT 1
52549: DEC
52550: ST_TO_ADDR
52551: LD_INT 3
52553: PUSH
52554: FOR_TO
52555: IFFALSE 52586
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52557: LD_VAR 0 1
52561: PPUSH
52562: CALL_OW 250
52566: PPUSH
52567: LD_VAR 0 1
52571: PPUSH
52572: CALL_OW 251
52576: PPUSH
52577: LD_INT 1
52579: PPUSH
52580: CALL_OW 453
52584: GO 52554
52586: POP
52587: POP
// end ;
52588: LD_VAR 0 2
52592: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52593: LD_INT 0
52595: PPUSH
52596: PPUSH
52597: PPUSH
52598: PPUSH
52599: PPUSH
52600: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
52601: LD_VAR 0 1
52605: NOT
52606: PUSH
52607: LD_VAR 0 2
52611: NOT
52612: OR
52613: PUSH
52614: LD_VAR 0 1
52618: PPUSH
52619: CALL_OW 314
52623: OR
52624: IFFALSE 52628
// exit ;
52626: GO 53069
// x := GetX ( enemy_unit ) ;
52628: LD_ADDR_VAR 0 7
52632: PUSH
52633: LD_VAR 0 2
52637: PPUSH
52638: CALL_OW 250
52642: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52643: LD_ADDR_VAR 0 8
52647: PUSH
52648: LD_VAR 0 2
52652: PPUSH
52653: CALL_OW 251
52657: ST_TO_ADDR
// if not x or not y then
52658: LD_VAR 0 7
52662: NOT
52663: PUSH
52664: LD_VAR 0 8
52668: NOT
52669: OR
52670: IFFALSE 52674
// exit ;
52672: GO 53069
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52674: LD_ADDR_VAR 0 6
52678: PUSH
52679: LD_VAR 0 7
52683: PPUSH
52684: LD_INT 0
52686: PPUSH
52687: LD_INT 4
52689: PPUSH
52690: CALL_OW 272
52694: PUSH
52695: LD_VAR 0 8
52699: PPUSH
52700: LD_INT 0
52702: PPUSH
52703: LD_INT 4
52705: PPUSH
52706: CALL_OW 273
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_VAR 0 7
52719: PPUSH
52720: LD_INT 1
52722: PPUSH
52723: LD_INT 4
52725: PPUSH
52726: CALL_OW 272
52730: PUSH
52731: LD_VAR 0 8
52735: PPUSH
52736: LD_INT 1
52738: PPUSH
52739: LD_INT 4
52741: PPUSH
52742: CALL_OW 273
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_VAR 0 7
52755: PPUSH
52756: LD_INT 2
52758: PPUSH
52759: LD_INT 4
52761: PPUSH
52762: CALL_OW 272
52766: PUSH
52767: LD_VAR 0 8
52771: PPUSH
52772: LD_INT 2
52774: PPUSH
52775: LD_INT 4
52777: PPUSH
52778: CALL_OW 273
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_VAR 0 7
52791: PPUSH
52792: LD_INT 3
52794: PPUSH
52795: LD_INT 4
52797: PPUSH
52798: CALL_OW 272
52802: PUSH
52803: LD_VAR 0 8
52807: PPUSH
52808: LD_INT 3
52810: PPUSH
52811: LD_INT 4
52813: PPUSH
52814: CALL_OW 273
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_VAR 0 7
52827: PPUSH
52828: LD_INT 4
52830: PPUSH
52831: LD_INT 4
52833: PPUSH
52834: CALL_OW 272
52838: PUSH
52839: LD_VAR 0 8
52843: PPUSH
52844: LD_INT 4
52846: PPUSH
52847: LD_INT 4
52849: PPUSH
52850: CALL_OW 273
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_VAR 0 7
52863: PPUSH
52864: LD_INT 5
52866: PPUSH
52867: LD_INT 4
52869: PPUSH
52870: CALL_OW 272
52874: PUSH
52875: LD_VAR 0 8
52879: PPUSH
52880: LD_INT 5
52882: PPUSH
52883: LD_INT 4
52885: PPUSH
52886: CALL_OW 273
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: ST_TO_ADDR
// for i = tmp downto 1 do
52903: LD_ADDR_VAR 0 4
52907: PUSH
52908: DOUBLE
52909: LD_VAR 0 6
52913: INC
52914: ST_TO_ADDR
52915: LD_INT 1
52917: PUSH
52918: FOR_DOWNTO
52919: IFFALSE 53020
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
52921: LD_VAR 0 6
52925: PUSH
52926: LD_VAR 0 4
52930: ARRAY
52931: PUSH
52932: LD_INT 1
52934: ARRAY
52935: PPUSH
52936: LD_VAR 0 6
52940: PUSH
52941: LD_VAR 0 4
52945: ARRAY
52946: PUSH
52947: LD_INT 2
52949: ARRAY
52950: PPUSH
52951: CALL_OW 488
52955: NOT
52956: PUSH
52957: LD_VAR 0 6
52961: PUSH
52962: LD_VAR 0 4
52966: ARRAY
52967: PUSH
52968: LD_INT 1
52970: ARRAY
52971: PPUSH
52972: LD_VAR 0 6
52976: PUSH
52977: LD_VAR 0 4
52981: ARRAY
52982: PUSH
52983: LD_INT 2
52985: ARRAY
52986: PPUSH
52987: CALL_OW 428
52991: PUSH
52992: LD_INT 0
52994: NONEQUAL
52995: OR
52996: IFFALSE 53018
// tmp := Delete ( tmp , i ) ;
52998: LD_ADDR_VAR 0 6
53002: PUSH
53003: LD_VAR 0 6
53007: PPUSH
53008: LD_VAR 0 4
53012: PPUSH
53013: CALL_OW 3
53017: ST_TO_ADDR
53018: GO 52918
53020: POP
53021: POP
// j := GetClosestHex ( unit , tmp ) ;
53022: LD_ADDR_VAR 0 5
53026: PUSH
53027: LD_VAR 0 1
53031: PPUSH
53032: LD_VAR 0 6
53036: PPUSH
53037: CALL 52322 0 2
53041: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53042: LD_VAR 0 1
53046: PPUSH
53047: LD_VAR 0 5
53051: PUSH
53052: LD_INT 1
53054: ARRAY
53055: PPUSH
53056: LD_VAR 0 5
53060: PUSH
53061: LD_INT 2
53063: ARRAY
53064: PPUSH
53065: CALL_OW 111
// end ;
53069: LD_VAR 0 3
53073: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53074: LD_INT 0
53076: PPUSH
53077: PPUSH
53078: PPUSH
// uc_side = 0 ;
53079: LD_ADDR_OWVAR 20
53083: PUSH
53084: LD_INT 0
53086: ST_TO_ADDR
// uc_nation = 0 ;
53087: LD_ADDR_OWVAR 21
53091: PUSH
53092: LD_INT 0
53094: ST_TO_ADDR
// InitHc_All ( ) ;
53095: CALL_OW 584
// InitVc ;
53099: CALL_OW 20
// if mastodonts then
53103: LD_VAR 0 6
53107: IFFALSE 53174
// for i = 1 to mastodonts do
53109: LD_ADDR_VAR 0 11
53113: PUSH
53114: DOUBLE
53115: LD_INT 1
53117: DEC
53118: ST_TO_ADDR
53119: LD_VAR 0 6
53123: PUSH
53124: FOR_TO
53125: IFFALSE 53172
// begin vc_chassis := 31 ;
53127: LD_ADDR_OWVAR 37
53131: PUSH
53132: LD_INT 31
53134: ST_TO_ADDR
// vc_control := control_rider ;
53135: LD_ADDR_OWVAR 38
53139: PUSH
53140: LD_INT 4
53142: ST_TO_ADDR
// animal := CreateVehicle ;
53143: LD_ADDR_VAR 0 12
53147: PUSH
53148: CALL_OW 45
53152: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53153: LD_VAR 0 12
53157: PPUSH
53158: LD_VAR 0 8
53162: PPUSH
53163: LD_INT 0
53165: PPUSH
53166: CALL 55362 0 3
// end ;
53170: GO 53124
53172: POP
53173: POP
// if horses then
53174: LD_VAR 0 5
53178: IFFALSE 53245
// for i = 1 to horses do
53180: LD_ADDR_VAR 0 11
53184: PUSH
53185: DOUBLE
53186: LD_INT 1
53188: DEC
53189: ST_TO_ADDR
53190: LD_VAR 0 5
53194: PUSH
53195: FOR_TO
53196: IFFALSE 53243
// begin hc_class := 21 ;
53198: LD_ADDR_OWVAR 28
53202: PUSH
53203: LD_INT 21
53205: ST_TO_ADDR
// hc_gallery :=  ;
53206: LD_ADDR_OWVAR 33
53210: PUSH
53211: LD_STRING 
53213: ST_TO_ADDR
// animal := CreateHuman ;
53214: LD_ADDR_VAR 0 12
53218: PUSH
53219: CALL_OW 44
53223: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53224: LD_VAR 0 12
53228: PPUSH
53229: LD_VAR 0 8
53233: PPUSH
53234: LD_INT 0
53236: PPUSH
53237: CALL 55362 0 3
// end ;
53241: GO 53195
53243: POP
53244: POP
// if birds then
53245: LD_VAR 0 1
53249: IFFALSE 53316
// for i = 1 to birds do
53251: LD_ADDR_VAR 0 11
53255: PUSH
53256: DOUBLE
53257: LD_INT 1
53259: DEC
53260: ST_TO_ADDR
53261: LD_VAR 0 1
53265: PUSH
53266: FOR_TO
53267: IFFALSE 53314
// begin hc_class = 18 ;
53269: LD_ADDR_OWVAR 28
53273: PUSH
53274: LD_INT 18
53276: ST_TO_ADDR
// hc_gallery =  ;
53277: LD_ADDR_OWVAR 33
53281: PUSH
53282: LD_STRING 
53284: ST_TO_ADDR
// animal := CreateHuman ;
53285: LD_ADDR_VAR 0 12
53289: PUSH
53290: CALL_OW 44
53294: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53295: LD_VAR 0 12
53299: PPUSH
53300: LD_VAR 0 8
53304: PPUSH
53305: LD_INT 0
53307: PPUSH
53308: CALL 55362 0 3
// end ;
53312: GO 53266
53314: POP
53315: POP
// if tigers then
53316: LD_VAR 0 2
53320: IFFALSE 53404
// for i = 1 to tigers do
53322: LD_ADDR_VAR 0 11
53326: PUSH
53327: DOUBLE
53328: LD_INT 1
53330: DEC
53331: ST_TO_ADDR
53332: LD_VAR 0 2
53336: PUSH
53337: FOR_TO
53338: IFFALSE 53402
// begin hc_class = class_tiger ;
53340: LD_ADDR_OWVAR 28
53344: PUSH
53345: LD_INT 14
53347: ST_TO_ADDR
// hc_gallery =  ;
53348: LD_ADDR_OWVAR 33
53352: PUSH
53353: LD_STRING 
53355: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53356: LD_ADDR_OWVAR 35
53360: PUSH
53361: LD_INT 7
53363: NEG
53364: PPUSH
53365: LD_INT 7
53367: PPUSH
53368: CALL_OW 12
53372: ST_TO_ADDR
// animal := CreateHuman ;
53373: LD_ADDR_VAR 0 12
53377: PUSH
53378: CALL_OW 44
53382: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53383: LD_VAR 0 12
53387: PPUSH
53388: LD_VAR 0 8
53392: PPUSH
53393: LD_INT 0
53395: PPUSH
53396: CALL 55362 0 3
// end ;
53400: GO 53337
53402: POP
53403: POP
// if apemans then
53404: LD_VAR 0 3
53408: IFFALSE 53531
// for i = 1 to apemans do
53410: LD_ADDR_VAR 0 11
53414: PUSH
53415: DOUBLE
53416: LD_INT 1
53418: DEC
53419: ST_TO_ADDR
53420: LD_VAR 0 3
53424: PUSH
53425: FOR_TO
53426: IFFALSE 53529
// begin hc_class = class_apeman ;
53428: LD_ADDR_OWVAR 28
53432: PUSH
53433: LD_INT 12
53435: ST_TO_ADDR
// hc_gallery =  ;
53436: LD_ADDR_OWVAR 33
53440: PUSH
53441: LD_STRING 
53443: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
53444: LD_ADDR_OWVAR 35
53448: PUSH
53449: LD_INT 2
53451: NEG
53452: PPUSH
53453: LD_INT 2
53455: PPUSH
53456: CALL_OW 12
53460: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53461: LD_ADDR_OWVAR 31
53465: PUSH
53466: LD_INT 1
53468: PPUSH
53469: LD_INT 3
53471: PPUSH
53472: CALL_OW 12
53476: PUSH
53477: LD_INT 1
53479: PPUSH
53480: LD_INT 3
53482: PPUSH
53483: CALL_OW 12
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: ST_TO_ADDR
// animal := CreateHuman ;
53500: LD_ADDR_VAR 0 12
53504: PUSH
53505: CALL_OW 44
53509: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53510: LD_VAR 0 12
53514: PPUSH
53515: LD_VAR 0 8
53519: PPUSH
53520: LD_INT 0
53522: PPUSH
53523: CALL 55362 0 3
// end ;
53527: GO 53425
53529: POP
53530: POP
// if enchidnas then
53531: LD_VAR 0 4
53535: IFFALSE 53602
// for i = 1 to enchidnas do
53537: LD_ADDR_VAR 0 11
53541: PUSH
53542: DOUBLE
53543: LD_INT 1
53545: DEC
53546: ST_TO_ADDR
53547: LD_VAR 0 4
53551: PUSH
53552: FOR_TO
53553: IFFALSE 53600
// begin hc_class = 13 ;
53555: LD_ADDR_OWVAR 28
53559: PUSH
53560: LD_INT 13
53562: ST_TO_ADDR
// hc_gallery =  ;
53563: LD_ADDR_OWVAR 33
53567: PUSH
53568: LD_STRING 
53570: ST_TO_ADDR
// animal := CreateHuman ;
53571: LD_ADDR_VAR 0 12
53575: PUSH
53576: CALL_OW 44
53580: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53581: LD_VAR 0 12
53585: PPUSH
53586: LD_VAR 0 8
53590: PPUSH
53591: LD_INT 0
53593: PPUSH
53594: CALL 55362 0 3
// end ;
53598: GO 53552
53600: POP
53601: POP
// if fishes then
53602: LD_VAR 0 7
53606: IFFALSE 53673
// for i = 1 to fishes do
53608: LD_ADDR_VAR 0 11
53612: PUSH
53613: DOUBLE
53614: LD_INT 1
53616: DEC
53617: ST_TO_ADDR
53618: LD_VAR 0 7
53622: PUSH
53623: FOR_TO
53624: IFFALSE 53671
// begin hc_class = 20 ;
53626: LD_ADDR_OWVAR 28
53630: PUSH
53631: LD_INT 20
53633: ST_TO_ADDR
// hc_gallery =  ;
53634: LD_ADDR_OWVAR 33
53638: PUSH
53639: LD_STRING 
53641: ST_TO_ADDR
// animal := CreateHuman ;
53642: LD_ADDR_VAR 0 12
53646: PUSH
53647: CALL_OW 44
53651: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53652: LD_VAR 0 12
53656: PPUSH
53657: LD_VAR 0 9
53661: PPUSH
53662: LD_INT 0
53664: PPUSH
53665: CALL 55362 0 3
// end ;
53669: GO 53623
53671: POP
53672: POP
// end ;
53673: LD_VAR 0 10
53677: RET
// export function WantHeal ( sci , unit ) ; begin
53678: LD_INT 0
53680: PPUSH
// if GetTaskList ( sci ) > 0 then
53681: LD_VAR 0 1
53685: PPUSH
53686: CALL_OW 437
53690: PUSH
53691: LD_INT 0
53693: GREATER
53694: IFFALSE 53764
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53696: LD_VAR 0 1
53700: PPUSH
53701: CALL_OW 437
53705: PUSH
53706: LD_INT 1
53708: ARRAY
53709: PUSH
53710: LD_INT 1
53712: ARRAY
53713: PUSH
53714: LD_STRING l
53716: EQUAL
53717: PUSH
53718: LD_VAR 0 1
53722: PPUSH
53723: CALL_OW 437
53727: PUSH
53728: LD_INT 1
53730: ARRAY
53731: PUSH
53732: LD_INT 4
53734: ARRAY
53735: PUSH
53736: LD_VAR 0 2
53740: EQUAL
53741: AND
53742: IFFALSE 53754
// result := true else
53744: LD_ADDR_VAR 0 3
53748: PUSH
53749: LD_INT 1
53751: ST_TO_ADDR
53752: GO 53762
// result := false ;
53754: LD_ADDR_VAR 0 3
53758: PUSH
53759: LD_INT 0
53761: ST_TO_ADDR
// end else
53762: GO 53772
// result := false ;
53764: LD_ADDR_VAR 0 3
53768: PUSH
53769: LD_INT 0
53771: ST_TO_ADDR
// end ;
53772: LD_VAR 0 3
53776: RET
// export function HealTarget ( sci ) ; begin
53777: LD_INT 0
53779: PPUSH
// if not sci then
53780: LD_VAR 0 1
53784: NOT
53785: IFFALSE 53789
// exit ;
53787: GO 53854
// result := 0 ;
53789: LD_ADDR_VAR 0 2
53793: PUSH
53794: LD_INT 0
53796: ST_TO_ADDR
// if GetTaskList ( sci ) then
53797: LD_VAR 0 1
53801: PPUSH
53802: CALL_OW 437
53806: IFFALSE 53854
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
53808: LD_VAR 0 1
53812: PPUSH
53813: CALL_OW 437
53817: PUSH
53818: LD_INT 1
53820: ARRAY
53821: PUSH
53822: LD_INT 1
53824: ARRAY
53825: PUSH
53826: LD_STRING l
53828: EQUAL
53829: IFFALSE 53854
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
53831: LD_ADDR_VAR 0 2
53835: PUSH
53836: LD_VAR 0 1
53840: PPUSH
53841: CALL_OW 437
53845: PUSH
53846: LD_INT 1
53848: ARRAY
53849: PUSH
53850: LD_INT 4
53852: ARRAY
53853: ST_TO_ADDR
// end ;
53854: LD_VAR 0 2
53858: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
53859: LD_INT 0
53861: PPUSH
53862: PPUSH
53863: PPUSH
53864: PPUSH
// if not base_units then
53865: LD_VAR 0 1
53869: NOT
53870: IFFALSE 53874
// exit ;
53872: GO 53961
// result := false ;
53874: LD_ADDR_VAR 0 2
53878: PUSH
53879: LD_INT 0
53881: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
53882: LD_ADDR_VAR 0 5
53886: PUSH
53887: LD_VAR 0 1
53891: PPUSH
53892: LD_INT 21
53894: PUSH
53895: LD_INT 3
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PPUSH
53902: CALL_OW 72
53906: ST_TO_ADDR
// if not tmp then
53907: LD_VAR 0 5
53911: NOT
53912: IFFALSE 53916
// exit ;
53914: GO 53961
// for i in tmp do
53916: LD_ADDR_VAR 0 3
53920: PUSH
53921: LD_VAR 0 5
53925: PUSH
53926: FOR_IN
53927: IFFALSE 53959
// begin result := EnemyInRange ( i , 22 ) ;
53929: LD_ADDR_VAR 0 2
53933: PUSH
53934: LD_VAR 0 3
53938: PPUSH
53939: LD_INT 22
53941: PPUSH
53942: CALL 52197 0 2
53946: ST_TO_ADDR
// if result then
53947: LD_VAR 0 2
53951: IFFALSE 53957
// exit ;
53953: POP
53954: POP
53955: GO 53961
// end ;
53957: GO 53926
53959: POP
53960: POP
// end ;
53961: LD_VAR 0 2
53965: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
53966: LD_INT 0
53968: PPUSH
53969: PPUSH
// if not units then
53970: LD_VAR 0 1
53974: NOT
53975: IFFALSE 53979
// exit ;
53977: GO 54049
// result := [ ] ;
53979: LD_ADDR_VAR 0 3
53983: PUSH
53984: EMPTY
53985: ST_TO_ADDR
// for i in units do
53986: LD_ADDR_VAR 0 4
53990: PUSH
53991: LD_VAR 0 1
53995: PUSH
53996: FOR_IN
53997: IFFALSE 54047
// if GetTag ( i ) = tag then
53999: LD_VAR 0 4
54003: PPUSH
54004: CALL_OW 110
54008: PUSH
54009: LD_VAR 0 2
54013: EQUAL
54014: IFFALSE 54045
// result := Insert ( result , result + 1 , i ) ;
54016: LD_ADDR_VAR 0 3
54020: PUSH
54021: LD_VAR 0 3
54025: PPUSH
54026: LD_VAR 0 3
54030: PUSH
54031: LD_INT 1
54033: PLUS
54034: PPUSH
54035: LD_VAR 0 4
54039: PPUSH
54040: CALL_OW 2
54044: ST_TO_ADDR
54045: GO 53996
54047: POP
54048: POP
// end ;
54049: LD_VAR 0 3
54053: RET
// export function IsDriver ( un ) ; begin
54054: LD_INT 0
54056: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
54057: LD_ADDR_VAR 0 2
54061: PUSH
54062: LD_VAR 0 1
54066: PUSH
54067: LD_INT 55
54069: PUSH
54070: EMPTY
54071: LIST
54072: PPUSH
54073: CALL_OW 69
54077: IN
54078: ST_TO_ADDR
// end ;
54079: LD_VAR 0 2
54083: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
54084: LD_INT 0
54086: PPUSH
54087: PPUSH
// list := [ ] ;
54088: LD_ADDR_VAR 0 5
54092: PUSH
54093: EMPTY
54094: ST_TO_ADDR
// case d of 0 :
54095: LD_VAR 0 3
54099: PUSH
54100: LD_INT 0
54102: DOUBLE
54103: EQUAL
54104: IFTRUE 54108
54106: GO 54241
54108: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
54109: LD_ADDR_VAR 0 5
54113: PUSH
54114: LD_VAR 0 1
54118: PUSH
54119: LD_INT 4
54121: MINUS
54122: PUSH
54123: LD_VAR 0 2
54127: PUSH
54128: LD_INT 4
54130: MINUS
54131: PUSH
54132: LD_INT 2
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: LIST
54139: PUSH
54140: LD_VAR 0 1
54144: PUSH
54145: LD_INT 3
54147: MINUS
54148: PUSH
54149: LD_VAR 0 2
54153: PUSH
54154: LD_INT 1
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: LIST
54161: PUSH
54162: LD_VAR 0 1
54166: PUSH
54167: LD_INT 4
54169: PLUS
54170: PUSH
54171: LD_VAR 0 2
54175: PUSH
54176: LD_INT 4
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: LIST
54183: PUSH
54184: LD_VAR 0 1
54188: PUSH
54189: LD_INT 3
54191: PLUS
54192: PUSH
54193: LD_VAR 0 2
54197: PUSH
54198: LD_INT 3
54200: PLUS
54201: PUSH
54202: LD_INT 5
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: LIST
54209: PUSH
54210: LD_VAR 0 1
54214: PUSH
54215: LD_VAR 0 2
54219: PUSH
54220: LD_INT 4
54222: PLUS
54223: PUSH
54224: LD_INT 0
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: LIST
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: ST_TO_ADDR
// end ; 1 :
54239: GO 54939
54241: LD_INT 1
54243: DOUBLE
54244: EQUAL
54245: IFTRUE 54249
54247: GO 54382
54249: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
54250: LD_ADDR_VAR 0 5
54254: PUSH
54255: LD_VAR 0 1
54259: PUSH
54260: LD_VAR 0 2
54264: PUSH
54265: LD_INT 4
54267: MINUS
54268: PUSH
54269: LD_INT 3
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: LIST
54276: PUSH
54277: LD_VAR 0 1
54281: PUSH
54282: LD_INT 3
54284: MINUS
54285: PUSH
54286: LD_VAR 0 2
54290: PUSH
54291: LD_INT 3
54293: MINUS
54294: PUSH
54295: LD_INT 2
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: LIST
54302: PUSH
54303: LD_VAR 0 1
54307: PUSH
54308: LD_INT 4
54310: MINUS
54311: PUSH
54312: LD_VAR 0 2
54316: PUSH
54317: LD_INT 1
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: LIST
54324: PUSH
54325: LD_VAR 0 1
54329: PUSH
54330: LD_VAR 0 2
54334: PUSH
54335: LD_INT 3
54337: PLUS
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: LIST
54346: PUSH
54347: LD_VAR 0 1
54351: PUSH
54352: LD_INT 4
54354: PLUS
54355: PUSH
54356: LD_VAR 0 2
54360: PUSH
54361: LD_INT 4
54363: PLUS
54364: PUSH
54365: LD_INT 5
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: LIST
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: ST_TO_ADDR
// end ; 2 :
54380: GO 54939
54382: LD_INT 2
54384: DOUBLE
54385: EQUAL
54386: IFTRUE 54390
54388: GO 54519
54390: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54391: LD_ADDR_VAR 0 5
54395: PUSH
54396: LD_VAR 0 1
54400: PUSH
54401: LD_VAR 0 2
54405: PUSH
54406: LD_INT 3
54408: MINUS
54409: PUSH
54410: LD_INT 3
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: LIST
54417: PUSH
54418: LD_VAR 0 1
54422: PUSH
54423: LD_INT 4
54425: PLUS
54426: PUSH
54427: LD_VAR 0 2
54431: PUSH
54432: LD_INT 4
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: LIST
54439: PUSH
54440: LD_VAR 0 1
54444: PUSH
54445: LD_VAR 0 2
54449: PUSH
54450: LD_INT 4
54452: PLUS
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: LIST
54461: PUSH
54462: LD_VAR 0 1
54466: PUSH
54467: LD_INT 3
54469: MINUS
54470: PUSH
54471: LD_VAR 0 2
54475: PUSH
54476: LD_INT 1
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: LIST
54483: PUSH
54484: LD_VAR 0 1
54488: PUSH
54489: LD_INT 4
54491: MINUS
54492: PUSH
54493: LD_VAR 0 2
54497: PUSH
54498: LD_INT 4
54500: MINUS
54501: PUSH
54502: LD_INT 2
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: LIST
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: ST_TO_ADDR
// end ; 3 :
54517: GO 54939
54519: LD_INT 3
54521: DOUBLE
54522: EQUAL
54523: IFTRUE 54527
54525: GO 54660
54527: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
54528: LD_ADDR_VAR 0 5
54532: PUSH
54533: LD_VAR 0 1
54537: PUSH
54538: LD_INT 3
54540: PLUS
54541: PUSH
54542: LD_VAR 0 2
54546: PUSH
54547: LD_INT 4
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: LIST
54554: PUSH
54555: LD_VAR 0 1
54559: PUSH
54560: LD_INT 4
54562: PLUS
54563: PUSH
54564: LD_VAR 0 2
54568: PUSH
54569: LD_INT 4
54571: PLUS
54572: PUSH
54573: LD_INT 5
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: LIST
54580: PUSH
54581: LD_VAR 0 1
54585: PUSH
54586: LD_INT 4
54588: MINUS
54589: PUSH
54590: LD_VAR 0 2
54594: PUSH
54595: LD_INT 1
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: LIST
54602: PUSH
54603: LD_VAR 0 1
54607: PUSH
54608: LD_VAR 0 2
54612: PUSH
54613: LD_INT 4
54615: MINUS
54616: PUSH
54617: LD_INT 3
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: LIST
54624: PUSH
54625: LD_VAR 0 1
54629: PUSH
54630: LD_INT 3
54632: MINUS
54633: PUSH
54634: LD_VAR 0 2
54638: PUSH
54639: LD_INT 3
54641: MINUS
54642: PUSH
54643: LD_INT 2
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: LIST
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: ST_TO_ADDR
// end ; 4 :
54658: GO 54939
54660: LD_INT 4
54662: DOUBLE
54663: EQUAL
54664: IFTRUE 54668
54666: GO 54801
54668: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
54669: LD_ADDR_VAR 0 5
54673: PUSH
54674: LD_VAR 0 1
54678: PUSH
54679: LD_VAR 0 2
54683: PUSH
54684: LD_INT 4
54686: PLUS
54687: PUSH
54688: LD_INT 0
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: LIST
54695: PUSH
54696: LD_VAR 0 1
54700: PUSH
54701: LD_INT 3
54703: PLUS
54704: PUSH
54705: LD_VAR 0 2
54709: PUSH
54710: LD_INT 3
54712: PLUS
54713: PUSH
54714: LD_INT 5
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: LIST
54721: PUSH
54722: LD_VAR 0 1
54726: PUSH
54727: LD_INT 4
54729: PLUS
54730: PUSH
54731: LD_VAR 0 2
54735: PUSH
54736: LD_INT 4
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: LIST
54743: PUSH
54744: LD_VAR 0 1
54748: PUSH
54749: LD_VAR 0 2
54753: PUSH
54754: LD_INT 3
54756: MINUS
54757: PUSH
54758: LD_INT 3
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: LIST
54765: PUSH
54766: LD_VAR 0 1
54770: PUSH
54771: LD_INT 4
54773: MINUS
54774: PUSH
54775: LD_VAR 0 2
54779: PUSH
54780: LD_INT 4
54782: MINUS
54783: PUSH
54784: LD_INT 2
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: LIST
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: ST_TO_ADDR
// end ; 5 :
54799: GO 54939
54801: LD_INT 5
54803: DOUBLE
54804: EQUAL
54805: IFTRUE 54809
54807: GO 54938
54809: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
54810: LD_ADDR_VAR 0 5
54814: PUSH
54815: LD_VAR 0 1
54819: PUSH
54820: LD_INT 4
54822: MINUS
54823: PUSH
54824: LD_VAR 0 2
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: LIST
54836: PUSH
54837: LD_VAR 0 1
54841: PUSH
54842: LD_VAR 0 2
54846: PUSH
54847: LD_INT 4
54849: MINUS
54850: PUSH
54851: LD_INT 3
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: LIST
54858: PUSH
54859: LD_VAR 0 1
54863: PUSH
54864: LD_INT 4
54866: PLUS
54867: PUSH
54868: LD_VAR 0 2
54872: PUSH
54873: LD_INT 4
54875: PLUS
54876: PUSH
54877: LD_INT 5
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: LIST
54884: PUSH
54885: LD_VAR 0 1
54889: PUSH
54890: LD_INT 3
54892: PLUS
54893: PUSH
54894: LD_VAR 0 2
54898: PUSH
54899: LD_INT 4
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: LIST
54906: PUSH
54907: LD_VAR 0 1
54911: PUSH
54912: LD_VAR 0 2
54916: PUSH
54917: LD_INT 3
54919: PLUS
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: LIST
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: ST_TO_ADDR
// end ; end ;
54936: GO 54939
54938: POP
// result := list ;
54939: LD_ADDR_VAR 0 4
54943: PUSH
54944: LD_VAR 0 5
54948: ST_TO_ADDR
// end ;
54949: LD_VAR 0 4
54953: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
54954: LD_INT 0
54956: PPUSH
54957: PPUSH
54958: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
54959: LD_VAR 0 1
54963: NOT
54964: PUSH
54965: LD_VAR 0 2
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: LD_INT 2
54975: PUSH
54976: LD_INT 3
54978: PUSH
54979: LD_INT 4
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: IN
54988: NOT
54989: OR
54990: IFFALSE 54994
// exit ;
54992: GO 55086
// tmp := [ ] ;
54994: LD_ADDR_VAR 0 5
54998: PUSH
54999: EMPTY
55000: ST_TO_ADDR
// for i in units do
55001: LD_ADDR_VAR 0 4
55005: PUSH
55006: LD_VAR 0 1
55010: PUSH
55011: FOR_IN
55012: IFFALSE 55055
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
55014: LD_ADDR_VAR 0 5
55018: PUSH
55019: LD_VAR 0 5
55023: PPUSH
55024: LD_VAR 0 5
55028: PUSH
55029: LD_INT 1
55031: PLUS
55032: PPUSH
55033: LD_VAR 0 4
55037: PPUSH
55038: LD_VAR 0 2
55042: PPUSH
55043: CALL_OW 259
55047: PPUSH
55048: CALL_OW 2
55052: ST_TO_ADDR
55053: GO 55011
55055: POP
55056: POP
// if not tmp then
55057: LD_VAR 0 5
55061: NOT
55062: IFFALSE 55066
// exit ;
55064: GO 55086
// result := SortListByListDesc ( units , tmp ) ;
55066: LD_ADDR_VAR 0 3
55070: PUSH
55071: LD_VAR 0 1
55075: PPUSH
55076: LD_VAR 0 5
55080: PPUSH
55081: CALL_OW 77
55085: ST_TO_ADDR
// end ;
55086: LD_VAR 0 3
55090: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
55091: LD_INT 0
55093: PPUSH
55094: PPUSH
55095: PPUSH
// result := false ;
55096: LD_ADDR_VAR 0 3
55100: PUSH
55101: LD_INT 0
55103: ST_TO_ADDR
// x := GetX ( building ) ;
55104: LD_ADDR_VAR 0 4
55108: PUSH
55109: LD_VAR 0 2
55113: PPUSH
55114: CALL_OW 250
55118: ST_TO_ADDR
// y := GetY ( building ) ;
55119: LD_ADDR_VAR 0 5
55123: PUSH
55124: LD_VAR 0 2
55128: PPUSH
55129: CALL_OW 251
55133: ST_TO_ADDR
// if not building or not x or not y then
55134: LD_VAR 0 2
55138: NOT
55139: PUSH
55140: LD_VAR 0 4
55144: NOT
55145: OR
55146: PUSH
55147: LD_VAR 0 5
55151: NOT
55152: OR
55153: IFFALSE 55157
// exit ;
55155: GO 55249
// if GetTaskList ( unit ) then
55157: LD_VAR 0 1
55161: PPUSH
55162: CALL_OW 437
55166: IFFALSE 55249
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55168: LD_STRING e
55170: PUSH
55171: LD_VAR 0 1
55175: PPUSH
55176: CALL_OW 437
55180: PUSH
55181: LD_INT 1
55183: ARRAY
55184: PUSH
55185: LD_INT 1
55187: ARRAY
55188: EQUAL
55189: PUSH
55190: LD_VAR 0 4
55194: PUSH
55195: LD_VAR 0 1
55199: PPUSH
55200: CALL_OW 437
55204: PUSH
55205: LD_INT 1
55207: ARRAY
55208: PUSH
55209: LD_INT 2
55211: ARRAY
55212: EQUAL
55213: AND
55214: PUSH
55215: LD_VAR 0 5
55219: PUSH
55220: LD_VAR 0 1
55224: PPUSH
55225: CALL_OW 437
55229: PUSH
55230: LD_INT 1
55232: ARRAY
55233: PUSH
55234: LD_INT 3
55236: ARRAY
55237: EQUAL
55238: AND
55239: IFFALSE 55249
// result := true end ;
55241: LD_ADDR_VAR 0 3
55245: PUSH
55246: LD_INT 1
55248: ST_TO_ADDR
// end ;
55249: LD_VAR 0 3
55253: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
55254: LD_INT 0
55256: PPUSH
// result := false ;
55257: LD_ADDR_VAR 0 4
55261: PUSH
55262: LD_INT 0
55264: ST_TO_ADDR
// if GetTaskList ( unit ) then
55265: LD_VAR 0 1
55269: PPUSH
55270: CALL_OW 437
55274: IFFALSE 55357
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55276: LD_STRING M
55278: PUSH
55279: LD_VAR 0 1
55283: PPUSH
55284: CALL_OW 437
55288: PUSH
55289: LD_INT 1
55291: ARRAY
55292: PUSH
55293: LD_INT 1
55295: ARRAY
55296: EQUAL
55297: PUSH
55298: LD_VAR 0 2
55302: PUSH
55303: LD_VAR 0 1
55307: PPUSH
55308: CALL_OW 437
55312: PUSH
55313: LD_INT 1
55315: ARRAY
55316: PUSH
55317: LD_INT 2
55319: ARRAY
55320: EQUAL
55321: AND
55322: PUSH
55323: LD_VAR 0 3
55327: PUSH
55328: LD_VAR 0 1
55332: PPUSH
55333: CALL_OW 437
55337: PUSH
55338: LD_INT 1
55340: ARRAY
55341: PUSH
55342: LD_INT 3
55344: ARRAY
55345: EQUAL
55346: AND
55347: IFFALSE 55357
// result := true ;
55349: LD_ADDR_VAR 0 4
55353: PUSH
55354: LD_INT 1
55356: ST_TO_ADDR
// end ; end ;
55357: LD_VAR 0 4
55361: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
55362: LD_INT 0
55364: PPUSH
55365: PPUSH
55366: PPUSH
55367: PPUSH
// if not unit or not area then
55368: LD_VAR 0 1
55372: NOT
55373: PUSH
55374: LD_VAR 0 2
55378: NOT
55379: OR
55380: IFFALSE 55384
// exit ;
55382: GO 55548
// tmp := AreaToList ( area , i ) ;
55384: LD_ADDR_VAR 0 6
55388: PUSH
55389: LD_VAR 0 2
55393: PPUSH
55394: LD_VAR 0 5
55398: PPUSH
55399: CALL_OW 517
55403: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55404: LD_ADDR_VAR 0 5
55408: PUSH
55409: DOUBLE
55410: LD_INT 1
55412: DEC
55413: ST_TO_ADDR
55414: LD_VAR 0 6
55418: PUSH
55419: LD_INT 1
55421: ARRAY
55422: PUSH
55423: FOR_TO
55424: IFFALSE 55546
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
55426: LD_ADDR_VAR 0 7
55430: PUSH
55431: LD_VAR 0 6
55435: PUSH
55436: LD_INT 1
55438: ARRAY
55439: PUSH
55440: LD_VAR 0 5
55444: ARRAY
55445: PUSH
55446: LD_VAR 0 6
55450: PUSH
55451: LD_INT 2
55453: ARRAY
55454: PUSH
55455: LD_VAR 0 5
55459: ARRAY
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
55465: LD_VAR 0 7
55469: PUSH
55470: LD_INT 1
55472: ARRAY
55473: PPUSH
55474: LD_VAR 0 7
55478: PUSH
55479: LD_INT 2
55481: ARRAY
55482: PPUSH
55483: CALL_OW 428
55487: PUSH
55488: LD_INT 0
55490: EQUAL
55491: IFFALSE 55544
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
55493: LD_VAR 0 1
55497: PPUSH
55498: LD_VAR 0 7
55502: PUSH
55503: LD_INT 1
55505: ARRAY
55506: PPUSH
55507: LD_VAR 0 7
55511: PUSH
55512: LD_INT 2
55514: ARRAY
55515: PPUSH
55516: LD_VAR 0 3
55520: PPUSH
55521: CALL_OW 48
// result := IsPlaced ( unit ) ;
55525: LD_ADDR_VAR 0 4
55529: PUSH
55530: LD_VAR 0 1
55534: PPUSH
55535: CALL_OW 305
55539: ST_TO_ADDR
// exit ;
55540: POP
55541: POP
55542: GO 55548
// end ; end ;
55544: GO 55423
55546: POP
55547: POP
// end ;
55548: LD_VAR 0 4
55552: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
55553: LD_INT 0
55555: PPUSH
55556: PPUSH
55557: PPUSH
// if not side or side > 8 then
55558: LD_VAR 0 1
55562: NOT
55563: PUSH
55564: LD_VAR 0 1
55568: PUSH
55569: LD_INT 8
55571: GREATER
55572: OR
55573: IFFALSE 55577
// exit ;
55575: GO 55764
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
55577: LD_ADDR_VAR 0 4
55581: PUSH
55582: LD_INT 22
55584: PUSH
55585: LD_VAR 0 1
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 21
55596: PUSH
55597: LD_INT 3
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PPUSH
55608: CALL_OW 69
55612: ST_TO_ADDR
// if not tmp then
55613: LD_VAR 0 4
55617: NOT
55618: IFFALSE 55622
// exit ;
55620: GO 55764
// enable_addtolog := true ;
55622: LD_ADDR_OWVAR 81
55626: PUSH
55627: LD_INT 1
55629: ST_TO_ADDR
// AddToLog ( [ ) ;
55630: LD_STRING [
55632: PPUSH
55633: CALL_OW 561
// for i in tmp do
55637: LD_ADDR_VAR 0 3
55641: PUSH
55642: LD_VAR 0 4
55646: PUSH
55647: FOR_IN
55648: IFFALSE 55755
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
55650: LD_STRING [
55652: PUSH
55653: LD_VAR 0 3
55657: PPUSH
55658: CALL_OW 266
55662: STR
55663: PUSH
55664: LD_STRING , 
55666: STR
55667: PUSH
55668: LD_VAR 0 3
55672: PPUSH
55673: CALL_OW 250
55677: STR
55678: PUSH
55679: LD_STRING , 
55681: STR
55682: PUSH
55683: LD_VAR 0 3
55687: PPUSH
55688: CALL_OW 251
55692: STR
55693: PUSH
55694: LD_STRING , 
55696: STR
55697: PUSH
55698: LD_VAR 0 3
55702: PPUSH
55703: CALL_OW 254
55707: STR
55708: PUSH
55709: LD_STRING , 
55711: STR
55712: PUSH
55713: LD_VAR 0 3
55717: PPUSH
55718: LD_INT 1
55720: PPUSH
55721: CALL_OW 268
55725: STR
55726: PUSH
55727: LD_STRING , 
55729: STR
55730: PUSH
55731: LD_VAR 0 3
55735: PPUSH
55736: LD_INT 2
55738: PPUSH
55739: CALL_OW 268
55743: STR
55744: PUSH
55745: LD_STRING ],
55747: STR
55748: PPUSH
55749: CALL_OW 561
// end ;
55753: GO 55647
55755: POP
55756: POP
// AddToLog ( ]; ) ;
55757: LD_STRING ];
55759: PPUSH
55760: CALL_OW 561
// end ;
55764: LD_VAR 0 2
55768: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
55769: LD_INT 0
55771: PPUSH
55772: PPUSH
55773: PPUSH
55774: PPUSH
55775: PPUSH
// if not area or not rate or not max then
55776: LD_VAR 0 1
55780: NOT
55781: PUSH
55782: LD_VAR 0 2
55786: NOT
55787: OR
55788: PUSH
55789: LD_VAR 0 4
55793: NOT
55794: OR
55795: IFFALSE 55799
// exit ;
55797: GO 55991
// while 1 do
55799: LD_INT 1
55801: IFFALSE 55991
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
55803: LD_ADDR_VAR 0 9
55807: PUSH
55808: LD_VAR 0 1
55812: PPUSH
55813: LD_INT 1
55815: PPUSH
55816: CALL_OW 287
55820: PUSH
55821: LD_INT 10
55823: MUL
55824: ST_TO_ADDR
// r := rate / 10 ;
55825: LD_ADDR_VAR 0 7
55829: PUSH
55830: LD_VAR 0 2
55834: PUSH
55835: LD_INT 10
55837: DIVREAL
55838: ST_TO_ADDR
// time := 1 1$00 ;
55839: LD_ADDR_VAR 0 8
55843: PUSH
55844: LD_INT 2100
55846: ST_TO_ADDR
// if amount < min then
55847: LD_VAR 0 9
55851: PUSH
55852: LD_VAR 0 3
55856: LESS
55857: IFFALSE 55875
// r := r * 2 else
55859: LD_ADDR_VAR 0 7
55863: PUSH
55864: LD_VAR 0 7
55868: PUSH
55869: LD_INT 2
55871: MUL
55872: ST_TO_ADDR
55873: GO 55901
// if amount > max then
55875: LD_VAR 0 9
55879: PUSH
55880: LD_VAR 0 4
55884: GREATER
55885: IFFALSE 55901
// r := r / 2 ;
55887: LD_ADDR_VAR 0 7
55891: PUSH
55892: LD_VAR 0 7
55896: PUSH
55897: LD_INT 2
55899: DIVREAL
55900: ST_TO_ADDR
// time := time / r ;
55901: LD_ADDR_VAR 0 8
55905: PUSH
55906: LD_VAR 0 8
55910: PUSH
55911: LD_VAR 0 7
55915: DIVREAL
55916: ST_TO_ADDR
// if time < 0 then
55917: LD_VAR 0 8
55921: PUSH
55922: LD_INT 0
55924: LESS
55925: IFFALSE 55942
// time := time * - 1 ;
55927: LD_ADDR_VAR 0 8
55931: PUSH
55932: LD_VAR 0 8
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: MUL
55941: ST_TO_ADDR
// wait ( time ) ;
55942: LD_VAR 0 8
55946: PPUSH
55947: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
55951: LD_INT 35
55953: PPUSH
55954: LD_INT 875
55956: PPUSH
55957: CALL_OW 12
55961: PPUSH
55962: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
55966: LD_INT 1
55968: PPUSH
55969: LD_INT 5
55971: PPUSH
55972: CALL_OW 12
55976: PPUSH
55977: LD_VAR 0 1
55981: PPUSH
55982: LD_INT 1
55984: PPUSH
55985: CALL_OW 55
// end ;
55989: GO 55799
// end ;
55991: LD_VAR 0 5
55995: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
55996: LD_INT 0
55998: PPUSH
55999: PPUSH
56000: PPUSH
56001: PPUSH
56002: PPUSH
56003: PPUSH
56004: PPUSH
56005: PPUSH
// if not turrets or not factories then
56006: LD_VAR 0 1
56010: NOT
56011: PUSH
56012: LD_VAR 0 2
56016: NOT
56017: OR
56018: IFFALSE 56022
// exit ;
56020: GO 56329
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56022: LD_ADDR_VAR 0 10
56026: PUSH
56027: LD_INT 5
56029: PUSH
56030: LD_INT 6
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 2
56039: PUSH
56040: LD_INT 4
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 3
56049: PUSH
56050: LD_INT 5
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 24
56064: PUSH
56065: LD_INT 25
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 23
56074: PUSH
56075: LD_INT 27
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 42
56088: PUSH
56089: LD_INT 43
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 44
56098: PUSH
56099: LD_INT 46
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 45
56108: PUSH
56109: LD_INT 47
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: LIST
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: LIST
56125: ST_TO_ADDR
// result := [ ] ;
56126: LD_ADDR_VAR 0 3
56130: PUSH
56131: EMPTY
56132: ST_TO_ADDR
// for i in turrets do
56133: LD_ADDR_VAR 0 4
56137: PUSH
56138: LD_VAR 0 1
56142: PUSH
56143: FOR_IN
56144: IFFALSE 56327
// begin nat := GetNation ( i ) ;
56146: LD_ADDR_VAR 0 7
56150: PUSH
56151: LD_VAR 0 4
56155: PPUSH
56156: CALL_OW 248
56160: ST_TO_ADDR
// weapon := 0 ;
56161: LD_ADDR_VAR 0 8
56165: PUSH
56166: LD_INT 0
56168: ST_TO_ADDR
// if not nat then
56169: LD_VAR 0 7
56173: NOT
56174: IFFALSE 56178
// continue ;
56176: GO 56143
// for j in list [ nat ] do
56178: LD_ADDR_VAR 0 5
56182: PUSH
56183: LD_VAR 0 10
56187: PUSH
56188: LD_VAR 0 7
56192: ARRAY
56193: PUSH
56194: FOR_IN
56195: IFFALSE 56236
// if GetBWeapon ( i ) = j [ 1 ] then
56197: LD_VAR 0 4
56201: PPUSH
56202: CALL_OW 269
56206: PUSH
56207: LD_VAR 0 5
56211: PUSH
56212: LD_INT 1
56214: ARRAY
56215: EQUAL
56216: IFFALSE 56234
// begin weapon := j [ 2 ] ;
56218: LD_ADDR_VAR 0 8
56222: PUSH
56223: LD_VAR 0 5
56227: PUSH
56228: LD_INT 2
56230: ARRAY
56231: ST_TO_ADDR
// break ;
56232: GO 56236
// end ;
56234: GO 56194
56236: POP
56237: POP
// if not weapon then
56238: LD_VAR 0 8
56242: NOT
56243: IFFALSE 56247
// continue ;
56245: GO 56143
// for k in factories do
56247: LD_ADDR_VAR 0 6
56251: PUSH
56252: LD_VAR 0 2
56256: PUSH
56257: FOR_IN
56258: IFFALSE 56323
// begin weapons := AvailableWeaponList ( k ) ;
56260: LD_ADDR_VAR 0 9
56264: PUSH
56265: LD_VAR 0 6
56269: PPUSH
56270: CALL_OW 478
56274: ST_TO_ADDR
// if not weapons then
56275: LD_VAR 0 9
56279: NOT
56280: IFFALSE 56284
// continue ;
56282: GO 56257
// if weapon in weapons then
56284: LD_VAR 0 8
56288: PUSH
56289: LD_VAR 0 9
56293: IN
56294: IFFALSE 56321
// begin result := [ i , weapon ] ;
56296: LD_ADDR_VAR 0 3
56300: PUSH
56301: LD_VAR 0 4
56305: PUSH
56306: LD_VAR 0 8
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: ST_TO_ADDR
// exit ;
56315: POP
56316: POP
56317: POP
56318: POP
56319: GO 56329
// end ; end ;
56321: GO 56257
56323: POP
56324: POP
// end ;
56325: GO 56143
56327: POP
56328: POP
// end ;
56329: LD_VAR 0 3
56333: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
56334: LD_INT 0
56336: PPUSH
// if not side or side > 8 then
56337: LD_VAR 0 3
56341: NOT
56342: PUSH
56343: LD_VAR 0 3
56347: PUSH
56348: LD_INT 8
56350: GREATER
56351: OR
56352: IFFALSE 56356
// exit ;
56354: GO 56415
// if not range then
56356: LD_VAR 0 4
56360: NOT
56361: IFFALSE 56372
// range := - 12 ;
56363: LD_ADDR_VAR 0 4
56367: PUSH
56368: LD_INT 12
56370: NEG
56371: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
56372: LD_VAR 0 1
56376: PPUSH
56377: LD_VAR 0 2
56381: PPUSH
56382: LD_VAR 0 3
56386: PPUSH
56387: LD_VAR 0 4
56391: PPUSH
56392: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56396: LD_VAR 0 1
56400: PPUSH
56401: LD_VAR 0 2
56405: PPUSH
56406: LD_VAR 0 3
56410: PPUSH
56411: CALL_OW 331
// end ;
56415: LD_VAR 0 5
56419: RET
// export function Video ( mode ) ; begin
56420: LD_INT 0
56422: PPUSH
// ingame_video = mode ;
56423: LD_ADDR_OWVAR 52
56427: PUSH
56428: LD_VAR 0 1
56432: ST_TO_ADDR
// interface_hidden = mode ;
56433: LD_ADDR_OWVAR 54
56437: PUSH
56438: LD_VAR 0 1
56442: ST_TO_ADDR
// end ;
56443: LD_VAR 0 2
56447: RET
// export function Join ( array , element ) ; begin
56448: LD_INT 0
56450: PPUSH
// result := Replace ( array , array + 1 , element ) ;
56451: LD_ADDR_VAR 0 3
56455: PUSH
56456: LD_VAR 0 1
56460: PPUSH
56461: LD_VAR 0 1
56465: PUSH
56466: LD_INT 1
56468: PLUS
56469: PPUSH
56470: LD_VAR 0 2
56474: PPUSH
56475: CALL_OW 1
56479: ST_TO_ADDR
// end ;
56480: LD_VAR 0 3
56484: RET
// export function JoinUnion ( array , element ) ; begin
56485: LD_INT 0
56487: PPUSH
// result := array union element ;
56488: LD_ADDR_VAR 0 3
56492: PUSH
56493: LD_VAR 0 1
56497: PUSH
56498: LD_VAR 0 2
56502: UNION
56503: ST_TO_ADDR
// end ;
56504: LD_VAR 0 3
56508: RET
// export function GetBehemoths ( side ) ; begin
56509: LD_INT 0
56511: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
56512: LD_ADDR_VAR 0 2
56516: PUSH
56517: LD_INT 22
56519: PUSH
56520: LD_VAR 0 1
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 31
56531: PUSH
56532: LD_INT 25
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PPUSH
56543: CALL_OW 69
56547: ST_TO_ADDR
// end ;
56548: LD_VAR 0 2
56552: RET
// export function Shuffle ( array ) ; var i , index ; begin
56553: LD_INT 0
56555: PPUSH
56556: PPUSH
56557: PPUSH
// result := [ ] ;
56558: LD_ADDR_VAR 0 2
56562: PUSH
56563: EMPTY
56564: ST_TO_ADDR
// if not array then
56565: LD_VAR 0 1
56569: NOT
56570: IFFALSE 56574
// exit ;
56572: GO 56673
// Randomize ;
56574: CALL_OW 10
// for i = array downto 1 do
56578: LD_ADDR_VAR 0 3
56582: PUSH
56583: DOUBLE
56584: LD_VAR 0 1
56588: INC
56589: ST_TO_ADDR
56590: LD_INT 1
56592: PUSH
56593: FOR_DOWNTO
56594: IFFALSE 56671
// begin index := rand ( 1 , array ) ;
56596: LD_ADDR_VAR 0 4
56600: PUSH
56601: LD_INT 1
56603: PPUSH
56604: LD_VAR 0 1
56608: PPUSH
56609: CALL_OW 12
56613: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
56614: LD_ADDR_VAR 0 2
56618: PUSH
56619: LD_VAR 0 2
56623: PPUSH
56624: LD_VAR 0 2
56628: PUSH
56629: LD_INT 1
56631: PLUS
56632: PPUSH
56633: LD_VAR 0 1
56637: PUSH
56638: LD_VAR 0 4
56642: ARRAY
56643: PPUSH
56644: CALL_OW 2
56648: ST_TO_ADDR
// array := Delete ( array , index ) ;
56649: LD_ADDR_VAR 0 1
56653: PUSH
56654: LD_VAR 0 1
56658: PPUSH
56659: LD_VAR 0 4
56663: PPUSH
56664: CALL_OW 3
56668: ST_TO_ADDR
// end ;
56669: GO 56593
56671: POP
56672: POP
// end ;
56673: LD_VAR 0 2
56677: RET
// export function GetBaseMaterials ( base ) ; begin
56678: LD_INT 0
56680: PPUSH
// result := [ 0 , 0 , 0 ] ;
56681: LD_ADDR_VAR 0 2
56685: PUSH
56686: LD_INT 0
56688: PUSH
56689: LD_INT 0
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: LIST
56699: ST_TO_ADDR
// if not base then
56700: LD_VAR 0 1
56704: NOT
56705: IFFALSE 56709
// exit ;
56707: GO 56758
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
56709: LD_ADDR_VAR 0 2
56713: PUSH
56714: LD_VAR 0 1
56718: PPUSH
56719: LD_INT 1
56721: PPUSH
56722: CALL_OW 275
56726: PUSH
56727: LD_VAR 0 1
56731: PPUSH
56732: LD_INT 2
56734: PPUSH
56735: CALL_OW 275
56739: PUSH
56740: LD_VAR 0 1
56744: PPUSH
56745: LD_INT 3
56747: PPUSH
56748: CALL_OW 275
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: LIST
56757: ST_TO_ADDR
// end ;
56758: LD_VAR 0 2
56762: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
56763: LD_INT 0
56765: PPUSH
56766: PPUSH
// result := array ;
56767: LD_ADDR_VAR 0 3
56771: PUSH
56772: LD_VAR 0 1
56776: ST_TO_ADDR
// if size > 0 then
56777: LD_VAR 0 2
56781: PUSH
56782: LD_INT 0
56784: GREATER
56785: IFFALSE 56831
// for i := array downto size do
56787: LD_ADDR_VAR 0 4
56791: PUSH
56792: DOUBLE
56793: LD_VAR 0 1
56797: INC
56798: ST_TO_ADDR
56799: LD_VAR 0 2
56803: PUSH
56804: FOR_DOWNTO
56805: IFFALSE 56829
// result := Delete ( result , result ) ;
56807: LD_ADDR_VAR 0 3
56811: PUSH
56812: LD_VAR 0 3
56816: PPUSH
56817: LD_VAR 0 3
56821: PPUSH
56822: CALL_OW 3
56826: ST_TO_ADDR
56827: GO 56804
56829: POP
56830: POP
// end ;
56831: LD_VAR 0 3
56835: RET
// export function ComExit ( unit ) ; var tmp ; begin
56836: LD_INT 0
56838: PPUSH
56839: PPUSH
// if not IsInUnit ( unit ) then
56840: LD_VAR 0 1
56844: PPUSH
56845: CALL_OW 310
56849: NOT
56850: IFFALSE 56854
// exit ;
56852: GO 56914
// tmp := IsInUnit ( unit ) ;
56854: LD_ADDR_VAR 0 3
56858: PUSH
56859: LD_VAR 0 1
56863: PPUSH
56864: CALL_OW 310
56868: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
56869: LD_VAR 0 3
56873: PPUSH
56874: CALL_OW 247
56878: PUSH
56879: LD_INT 2
56881: EQUAL
56882: IFFALSE 56895
// ComExitVehicle ( unit ) else
56884: LD_VAR 0 1
56888: PPUSH
56889: CALL_OW 121
56893: GO 56904
// ComExitBuilding ( unit ) ;
56895: LD_VAR 0 1
56899: PPUSH
56900: CALL_OW 122
// result := tmp ;
56904: LD_ADDR_VAR 0 2
56908: PUSH
56909: LD_VAR 0 3
56913: ST_TO_ADDR
// end ;
56914: LD_VAR 0 2
56918: RET
// export function ComExitAll ( units ) ; var i ; begin
56919: LD_INT 0
56921: PPUSH
56922: PPUSH
// if not units then
56923: LD_VAR 0 1
56927: NOT
56928: IFFALSE 56932
// exit ;
56930: GO 56958
// for i in units do
56932: LD_ADDR_VAR 0 3
56936: PUSH
56937: LD_VAR 0 1
56941: PUSH
56942: FOR_IN
56943: IFFALSE 56956
// ComExit ( i ) ;
56945: LD_VAR 0 3
56949: PPUSH
56950: CALL 56836 0 1
56954: GO 56942
56956: POP
56957: POP
// end ;
56958: LD_VAR 0 2
56962: RET
// export function ResetHc ; begin
56963: LD_INT 0
56965: PPUSH
// InitHc ;
56966: CALL_OW 19
// hc_importance := 0 ;
56970: LD_ADDR_OWVAR 32
56974: PUSH
56975: LD_INT 0
56977: ST_TO_ADDR
// end ;
56978: LD_VAR 0 1
56982: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
56983: LD_INT 0
56985: PPUSH
56986: PPUSH
56987: PPUSH
// _x := ( x1 + x2 ) div 2 ;
56988: LD_ADDR_VAR 0 6
56992: PUSH
56993: LD_VAR 0 1
56997: PUSH
56998: LD_VAR 0 3
57002: PLUS
57003: PUSH
57004: LD_INT 2
57006: DIV
57007: ST_TO_ADDR
// if _x < 0 then
57008: LD_VAR 0 6
57012: PUSH
57013: LD_INT 0
57015: LESS
57016: IFFALSE 57033
// _x := _x * - 1 ;
57018: LD_ADDR_VAR 0 6
57022: PUSH
57023: LD_VAR 0 6
57027: PUSH
57028: LD_INT 1
57030: NEG
57031: MUL
57032: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
57033: LD_ADDR_VAR 0 7
57037: PUSH
57038: LD_VAR 0 2
57042: PUSH
57043: LD_VAR 0 4
57047: PLUS
57048: PUSH
57049: LD_INT 2
57051: DIV
57052: ST_TO_ADDR
// if _y < 0 then
57053: LD_VAR 0 7
57057: PUSH
57058: LD_INT 0
57060: LESS
57061: IFFALSE 57078
// _y := _y * - 1 ;
57063: LD_ADDR_VAR 0 7
57067: PUSH
57068: LD_VAR 0 7
57072: PUSH
57073: LD_INT 1
57075: NEG
57076: MUL
57077: ST_TO_ADDR
// result := [ _x , _y ] ;
57078: LD_ADDR_VAR 0 5
57082: PUSH
57083: LD_VAR 0 6
57087: PUSH
57088: LD_VAR 0 7
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: ST_TO_ADDR
// end ;
57097: LD_VAR 0 5
57101: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
57102: LD_INT 0
57104: PPUSH
57105: PPUSH
57106: PPUSH
57107: PPUSH
// task := GetTaskList ( unit ) ;
57108: LD_ADDR_VAR 0 7
57112: PUSH
57113: LD_VAR 0 1
57117: PPUSH
57118: CALL_OW 437
57122: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
57123: LD_VAR 0 7
57127: NOT
57128: PUSH
57129: LD_VAR 0 1
57133: PPUSH
57134: LD_VAR 0 2
57138: PPUSH
57139: CALL_OW 308
57143: NOT
57144: AND
57145: IFFALSE 57149
// exit ;
57147: GO 57267
// if IsInArea ( unit , area ) then
57149: LD_VAR 0 1
57153: PPUSH
57154: LD_VAR 0 2
57158: PPUSH
57159: CALL_OW 308
57163: IFFALSE 57181
// begin ComMoveToArea ( unit , goAway ) ;
57165: LD_VAR 0 1
57169: PPUSH
57170: LD_VAR 0 3
57174: PPUSH
57175: CALL_OW 113
// exit ;
57179: GO 57267
// end ; if task [ 1 ] [ 1 ] <> M then
57181: LD_VAR 0 7
57185: PUSH
57186: LD_INT 1
57188: ARRAY
57189: PUSH
57190: LD_INT 1
57192: ARRAY
57193: PUSH
57194: LD_STRING M
57196: NONEQUAL
57197: IFFALSE 57201
// exit ;
57199: GO 57267
// x := task [ 1 ] [ 2 ] ;
57201: LD_ADDR_VAR 0 5
57205: PUSH
57206: LD_VAR 0 7
57210: PUSH
57211: LD_INT 1
57213: ARRAY
57214: PUSH
57215: LD_INT 2
57217: ARRAY
57218: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
57219: LD_ADDR_VAR 0 6
57223: PUSH
57224: LD_VAR 0 7
57228: PUSH
57229: LD_INT 1
57231: ARRAY
57232: PUSH
57233: LD_INT 3
57235: ARRAY
57236: ST_TO_ADDR
// if InArea ( x , y , area ) then
57237: LD_VAR 0 5
57241: PPUSH
57242: LD_VAR 0 6
57246: PPUSH
57247: LD_VAR 0 2
57251: PPUSH
57252: CALL_OW 309
57256: IFFALSE 57267
// ComStop ( unit ) ;
57258: LD_VAR 0 1
57262: PPUSH
57263: CALL_OW 141
// end ;
57267: LD_VAR 0 4
57271: RET
// export function Abs ( value ) ; begin
57272: LD_INT 0
57274: PPUSH
// result := value ;
57275: LD_ADDR_VAR 0 2
57279: PUSH
57280: LD_VAR 0 1
57284: ST_TO_ADDR
// if value < 0 then
57285: LD_VAR 0 1
57289: PUSH
57290: LD_INT 0
57292: LESS
57293: IFFALSE 57310
// result := value * - 1 ;
57295: LD_ADDR_VAR 0 2
57299: PUSH
57300: LD_VAR 0 1
57304: PUSH
57305: LD_INT 1
57307: NEG
57308: MUL
57309: ST_TO_ADDR
// end ;
57310: LD_VAR 0 2
57314: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
57315: LD_INT 0
57317: PPUSH
57318: PPUSH
57319: PPUSH
57320: PPUSH
57321: PPUSH
57322: PPUSH
57323: PPUSH
57324: PPUSH
// if not unit or not building then
57325: LD_VAR 0 1
57329: NOT
57330: PUSH
57331: LD_VAR 0 2
57335: NOT
57336: OR
57337: IFFALSE 57341
// exit ;
57339: GO 57567
// x := GetX ( building ) ;
57341: LD_ADDR_VAR 0 4
57345: PUSH
57346: LD_VAR 0 2
57350: PPUSH
57351: CALL_OW 250
57355: ST_TO_ADDR
// y := GetY ( building ) ;
57356: LD_ADDR_VAR 0 6
57360: PUSH
57361: LD_VAR 0 2
57365: PPUSH
57366: CALL_OW 251
57370: ST_TO_ADDR
// d := GetDir ( building ) ;
57371: LD_ADDR_VAR 0 8
57375: PUSH
57376: LD_VAR 0 2
57380: PPUSH
57381: CALL_OW 254
57385: ST_TO_ADDR
// r := 4 ;
57386: LD_ADDR_VAR 0 9
57390: PUSH
57391: LD_INT 4
57393: ST_TO_ADDR
// for i := 1 to 5 do
57394: LD_ADDR_VAR 0 10
57398: PUSH
57399: DOUBLE
57400: LD_INT 1
57402: DEC
57403: ST_TO_ADDR
57404: LD_INT 5
57406: PUSH
57407: FOR_TO
57408: IFFALSE 57565
// begin _x := ShiftX ( x , d , r + i ) ;
57410: LD_ADDR_VAR 0 5
57414: PUSH
57415: LD_VAR 0 4
57419: PPUSH
57420: LD_VAR 0 8
57424: PPUSH
57425: LD_VAR 0 9
57429: PUSH
57430: LD_VAR 0 10
57434: PLUS
57435: PPUSH
57436: CALL_OW 272
57440: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
57441: LD_ADDR_VAR 0 7
57445: PUSH
57446: LD_VAR 0 6
57450: PPUSH
57451: LD_VAR 0 8
57455: PPUSH
57456: LD_VAR 0 9
57460: PUSH
57461: LD_VAR 0 10
57465: PLUS
57466: PPUSH
57467: CALL_OW 273
57471: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
57472: LD_VAR 0 5
57476: PPUSH
57477: LD_VAR 0 7
57481: PPUSH
57482: CALL_OW 488
57486: PUSH
57487: LD_VAR 0 5
57491: PPUSH
57492: LD_VAR 0 7
57496: PPUSH
57497: CALL_OW 428
57501: PPUSH
57502: CALL_OW 247
57506: PUSH
57507: LD_INT 3
57509: PUSH
57510: LD_INT 2
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: IN
57517: NOT
57518: AND
57519: IFFALSE 57563
// begin ComMoveXY ( unit , _x , _y ) ;
57521: LD_VAR 0 1
57525: PPUSH
57526: LD_VAR 0 5
57530: PPUSH
57531: LD_VAR 0 7
57535: PPUSH
57536: CALL_OW 111
// result := [ _x , _y ] ;
57540: LD_ADDR_VAR 0 3
57544: PUSH
57545: LD_VAR 0 5
57549: PUSH
57550: LD_VAR 0 7
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: ST_TO_ADDR
// exit ;
57559: POP
57560: POP
57561: GO 57567
// end ; end ;
57563: GO 57407
57565: POP
57566: POP
// end ;
57567: LD_VAR 0 3
57571: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
57572: LD_INT 0
57574: PPUSH
57575: PPUSH
57576: PPUSH
// result := 0 ;
57577: LD_ADDR_VAR 0 3
57581: PUSH
57582: LD_INT 0
57584: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
57585: LD_VAR 0 1
57589: PUSH
57590: LD_INT 0
57592: LESS
57593: PUSH
57594: LD_VAR 0 1
57598: PUSH
57599: LD_INT 8
57601: GREATER
57602: OR
57603: PUSH
57604: LD_VAR 0 2
57608: PUSH
57609: LD_INT 0
57611: LESS
57612: OR
57613: PUSH
57614: LD_VAR 0 2
57618: PUSH
57619: LD_INT 8
57621: GREATER
57622: OR
57623: IFFALSE 57627
// exit ;
57625: GO 57702
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
57627: LD_ADDR_VAR 0 4
57631: PUSH
57632: LD_INT 22
57634: PUSH
57635: LD_VAR 0 2
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PPUSH
57644: CALL_OW 69
57648: PUSH
57649: FOR_IN
57650: IFFALSE 57700
// begin un := UnitShoot ( i ) ;
57652: LD_ADDR_VAR 0 5
57656: PUSH
57657: LD_VAR 0 4
57661: PPUSH
57662: CALL_OW 504
57666: ST_TO_ADDR
// if GetSide ( un ) = side1 then
57667: LD_VAR 0 5
57671: PPUSH
57672: CALL_OW 255
57676: PUSH
57677: LD_VAR 0 1
57681: EQUAL
57682: IFFALSE 57698
// begin result := un ;
57684: LD_ADDR_VAR 0 3
57688: PUSH
57689: LD_VAR 0 5
57693: ST_TO_ADDR
// exit ;
57694: POP
57695: POP
57696: GO 57702
// end ; end ;
57698: GO 57649
57700: POP
57701: POP
// end ;
57702: LD_VAR 0 3
57706: RET
// export function GetCargoBay ( units ) ; begin
57707: LD_INT 0
57709: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
57710: LD_ADDR_VAR 0 2
57714: PUSH
57715: LD_VAR 0 1
57719: PPUSH
57720: LD_INT 2
57722: PUSH
57723: LD_INT 34
57725: PUSH
57726: LD_INT 12
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 34
57735: PUSH
57736: LD_INT 51
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 34
57745: PUSH
57746: LD_INT 32
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 34
57755: PUSH
57756: LD_EXP 30
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: PPUSH
57772: CALL_OW 72
57776: ST_TO_ADDR
// end ;
57777: LD_VAR 0 2
57781: RET
// export function Negate ( value ) ; begin
57782: LD_INT 0
57784: PPUSH
// result := not value ;
57785: LD_ADDR_VAR 0 2
57789: PUSH
57790: LD_VAR 0 1
57794: NOT
57795: ST_TO_ADDR
// end ;
57796: LD_VAR 0 2
57800: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
57801: LD_INT 0
57803: PPUSH
// if x1 = x2 then
57804: LD_VAR 0 1
57808: PUSH
57809: LD_VAR 0 3
57813: EQUAL
57814: IFFALSE 57848
// begin if y1 > y2 then
57816: LD_VAR 0 2
57820: PUSH
57821: LD_VAR 0 4
57825: GREATER
57826: IFFALSE 57838
// result := 0 else
57828: LD_ADDR_VAR 0 5
57832: PUSH
57833: LD_INT 0
57835: ST_TO_ADDR
57836: GO 57846
// result := 3 ;
57838: LD_ADDR_VAR 0 5
57842: PUSH
57843: LD_INT 3
57845: ST_TO_ADDR
// exit ;
57846: GO 57934
// end ; if y1 = y2 then
57848: LD_VAR 0 2
57852: PUSH
57853: LD_VAR 0 4
57857: EQUAL
57858: IFFALSE 57892
// begin if x1 > x2 then
57860: LD_VAR 0 1
57864: PUSH
57865: LD_VAR 0 3
57869: GREATER
57870: IFFALSE 57882
// result := 1 else
57872: LD_ADDR_VAR 0 5
57876: PUSH
57877: LD_INT 1
57879: ST_TO_ADDR
57880: GO 57890
// result := 4 ;
57882: LD_ADDR_VAR 0 5
57886: PUSH
57887: LD_INT 4
57889: ST_TO_ADDR
// exit ;
57890: GO 57934
// end ; if x1 > x2 and y1 > y2 then
57892: LD_VAR 0 1
57896: PUSH
57897: LD_VAR 0 3
57901: GREATER
57902: PUSH
57903: LD_VAR 0 2
57907: PUSH
57908: LD_VAR 0 4
57912: GREATER
57913: AND
57914: IFFALSE 57926
// result := 2 else
57916: LD_ADDR_VAR 0 5
57920: PUSH
57921: LD_INT 2
57923: ST_TO_ADDR
57924: GO 57934
// result := 5 ;
57926: LD_ADDR_VAR 0 5
57930: PUSH
57931: LD_INT 5
57933: ST_TO_ADDR
// end ;
57934: LD_VAR 0 5
57938: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57939: LD_INT 0
57941: PPUSH
57942: PPUSH
// if not driver or not IsInUnit ( driver ) then
57943: LD_VAR 0 1
57947: NOT
57948: PUSH
57949: LD_VAR 0 1
57953: PPUSH
57954: CALL_OW 310
57958: NOT
57959: OR
57960: IFFALSE 57964
// exit ;
57962: GO 58054
// vehicle := IsInUnit ( driver ) ;
57964: LD_ADDR_VAR 0 3
57968: PUSH
57969: LD_VAR 0 1
57973: PPUSH
57974: CALL_OW 310
57978: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57979: LD_VAR 0 1
57983: PPUSH
57984: LD_STRING \
57986: PUSH
57987: LD_INT 0
57989: PUSH
57990: LD_INT 0
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: LD_INT 0
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: LD_INT 0
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: PUSH
58014: LD_STRING E
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: LD_INT 0
58022: PUSH
58023: LD_VAR 0 3
58027: PUSH
58028: LD_INT 0
58030: PUSH
58031: LD_INT 0
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PPUSH
58050: CALL_OW 446
// end ;
58054: LD_VAR 0 2
58058: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
58059: LD_INT 0
58061: PPUSH
58062: PPUSH
// if not driver or not IsInUnit ( driver ) then
58063: LD_VAR 0 1
58067: NOT
58068: PUSH
58069: LD_VAR 0 1
58073: PPUSH
58074: CALL_OW 310
58078: NOT
58079: OR
58080: IFFALSE 58084
// exit ;
58082: GO 58174
// vehicle := IsInUnit ( driver ) ;
58084: LD_ADDR_VAR 0 3
58088: PUSH
58089: LD_VAR 0 1
58093: PPUSH
58094: CALL_OW 310
58098: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
58099: LD_VAR 0 1
58103: PPUSH
58104: LD_STRING \
58106: PUSH
58107: LD_INT 0
58109: PUSH
58110: LD_INT 0
58112: PUSH
58113: LD_INT 0
58115: PUSH
58116: LD_INT 0
58118: PUSH
58119: LD_INT 0
58121: PUSH
58122: LD_INT 0
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: PUSH
58134: LD_STRING E
58136: PUSH
58137: LD_INT 0
58139: PUSH
58140: LD_INT 0
58142: PUSH
58143: LD_VAR 0 3
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: LD_INT 0
58153: PUSH
58154: LD_INT 0
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PPUSH
58170: CALL_OW 447
// end ;
58174: LD_VAR 0 2
58178: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
58179: LD_INT 0
58181: PPUSH
58182: PPUSH
58183: PPUSH
// tmp := [ ] ;
58184: LD_ADDR_VAR 0 5
58188: PUSH
58189: EMPTY
58190: ST_TO_ADDR
// for i in units do
58191: LD_ADDR_VAR 0 4
58195: PUSH
58196: LD_VAR 0 1
58200: PUSH
58201: FOR_IN
58202: IFFALSE 58240
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
58204: LD_ADDR_VAR 0 5
58208: PUSH
58209: LD_VAR 0 5
58213: PPUSH
58214: LD_VAR 0 5
58218: PUSH
58219: LD_INT 1
58221: PLUS
58222: PPUSH
58223: LD_VAR 0 4
58227: PPUSH
58228: CALL_OW 256
58232: PPUSH
58233: CALL_OW 2
58237: ST_TO_ADDR
58238: GO 58201
58240: POP
58241: POP
// if not tmp then
58242: LD_VAR 0 5
58246: NOT
58247: IFFALSE 58251
// exit ;
58249: GO 58299
// if asc then
58251: LD_VAR 0 2
58255: IFFALSE 58279
// result := SortListByListAsc ( units , tmp ) else
58257: LD_ADDR_VAR 0 3
58261: PUSH
58262: LD_VAR 0 1
58266: PPUSH
58267: LD_VAR 0 5
58271: PPUSH
58272: CALL_OW 76
58276: ST_TO_ADDR
58277: GO 58299
// result := SortListByListDesc ( units , tmp ) ;
58279: LD_ADDR_VAR 0 3
58283: PUSH
58284: LD_VAR 0 1
58288: PPUSH
58289: LD_VAR 0 5
58293: PPUSH
58294: CALL_OW 77
58298: ST_TO_ADDR
// end ;
58299: LD_VAR 0 3
58303: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
58304: LD_INT 0
58306: PPUSH
58307: PPUSH
// task := GetTaskList ( mech ) ;
58308: LD_ADDR_VAR 0 4
58312: PUSH
58313: LD_VAR 0 1
58317: PPUSH
58318: CALL_OW 437
58322: ST_TO_ADDR
// if not task then
58323: LD_VAR 0 4
58327: NOT
58328: IFFALSE 58332
// exit ;
58330: GO 58374
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
58332: LD_ADDR_VAR 0 3
58336: PUSH
58337: LD_VAR 0 4
58341: PUSH
58342: LD_INT 1
58344: ARRAY
58345: PUSH
58346: LD_INT 1
58348: ARRAY
58349: PUSH
58350: LD_STRING r
58352: EQUAL
58353: PUSH
58354: LD_VAR 0 4
58358: PUSH
58359: LD_INT 1
58361: ARRAY
58362: PUSH
58363: LD_INT 4
58365: ARRAY
58366: PUSH
58367: LD_VAR 0 2
58371: EQUAL
58372: AND
58373: ST_TO_ADDR
// end ;
58374: LD_VAR 0 3
58378: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
58379: LD_INT 0
58381: PPUSH
// SetDir ( unit , d ) ;
58382: LD_VAR 0 1
58386: PPUSH
58387: LD_VAR 0 4
58391: PPUSH
58392: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
58396: LD_VAR 0 1
58400: PPUSH
58401: LD_VAR 0 2
58405: PPUSH
58406: LD_VAR 0 3
58410: PPUSH
58411: LD_VAR 0 5
58415: PPUSH
58416: CALL_OW 48
// end ;
58420: LD_VAR 0 6
58424: RET
// export function ToNaturalNumber ( number ) ; begin
58425: LD_INT 0
58427: PPUSH
// result := number div 1 ;
58428: LD_ADDR_VAR 0 2
58432: PUSH
58433: LD_VAR 0 1
58437: PUSH
58438: LD_INT 1
58440: DIV
58441: ST_TO_ADDR
// if number < 0 then
58442: LD_VAR 0 1
58446: PUSH
58447: LD_INT 0
58449: LESS
58450: IFFALSE 58460
// result := 0 ;
58452: LD_ADDR_VAR 0 2
58456: PUSH
58457: LD_INT 0
58459: ST_TO_ADDR
// end ;
58460: LD_VAR 0 2
58464: RET
// export function SortByClass ( units , class ) ; var un ; begin
58465: LD_INT 0
58467: PPUSH
58468: PPUSH
// if not units or not class then
58469: LD_VAR 0 1
58473: NOT
58474: PUSH
58475: LD_VAR 0 2
58479: NOT
58480: OR
58481: IFFALSE 58485
// exit ;
58483: GO 58580
// result := [ ] ;
58485: LD_ADDR_VAR 0 3
58489: PUSH
58490: EMPTY
58491: ST_TO_ADDR
// for un in units do
58492: LD_ADDR_VAR 0 4
58496: PUSH
58497: LD_VAR 0 1
58501: PUSH
58502: FOR_IN
58503: IFFALSE 58578
// if GetClass ( un ) = class then
58505: LD_VAR 0 4
58509: PPUSH
58510: CALL_OW 257
58514: PUSH
58515: LD_VAR 0 2
58519: EQUAL
58520: IFFALSE 58547
// result := Insert ( result , 1 , un ) else
58522: LD_ADDR_VAR 0 3
58526: PUSH
58527: LD_VAR 0 3
58531: PPUSH
58532: LD_INT 1
58534: PPUSH
58535: LD_VAR 0 4
58539: PPUSH
58540: CALL_OW 2
58544: ST_TO_ADDR
58545: GO 58576
// result := Replace ( result , result + 1 , un ) ;
58547: LD_ADDR_VAR 0 3
58551: PUSH
58552: LD_VAR 0 3
58556: PPUSH
58557: LD_VAR 0 3
58561: PUSH
58562: LD_INT 1
58564: PLUS
58565: PPUSH
58566: LD_VAR 0 4
58570: PPUSH
58571: CALL_OW 1
58575: ST_TO_ADDR
58576: GO 58502
58578: POP
58579: POP
// end ; end_of_file
58580: LD_VAR 0 3
58584: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
58585: LD_INT 0
58587: PPUSH
// ar_miner := 81 ;
58588: LD_ADDR_EXP 36
58592: PUSH
58593: LD_INT 81
58595: ST_TO_ADDR
// ar_crane := 88 ;
58596: LD_ADDR_EXP 35
58600: PUSH
58601: LD_INT 88
58603: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
58604: LD_ADDR_EXP 30
58608: PUSH
58609: LD_INT 89
58611: ST_TO_ADDR
// us_hack := 99 ;
58612: LD_ADDR_EXP 31
58616: PUSH
58617: LD_INT 99
58619: ST_TO_ADDR
// us_artillery := 97 ;
58620: LD_ADDR_EXP 32
58624: PUSH
58625: LD_INT 97
58627: ST_TO_ADDR
// ar_bio_bomb := 91 ;
58628: LD_ADDR_EXP 33
58632: PUSH
58633: LD_INT 91
58635: ST_TO_ADDR
// ar_mortar := 92 ;
58636: LD_ADDR_EXP 34
58640: PUSH
58641: LD_INT 92
58643: ST_TO_ADDR
// ru_radar := 98 ;
58644: LD_ADDR_EXP 29
58648: PUSH
58649: LD_INT 98
58651: ST_TO_ADDR
// tech_Artillery := 80 ;
58652: LD_ADDR_EXP 37
58656: PUSH
58657: LD_INT 80
58659: ST_TO_ADDR
// tech_RadMat := 81 ;
58660: LD_ADDR_EXP 38
58664: PUSH
58665: LD_INT 81
58667: ST_TO_ADDR
// tech_BasicTools := 82 ;
58668: LD_ADDR_EXP 39
58672: PUSH
58673: LD_INT 82
58675: ST_TO_ADDR
// tech_Cargo := 83 ;
58676: LD_ADDR_EXP 40
58680: PUSH
58681: LD_INT 83
58683: ST_TO_ADDR
// tech_Track := 84 ;
58684: LD_ADDR_EXP 41
58688: PUSH
58689: LD_INT 84
58691: ST_TO_ADDR
// tech_Crane := 85 ;
58692: LD_ADDR_EXP 42
58696: PUSH
58697: LD_INT 85
58699: ST_TO_ADDR
// tech_Bulldozer := 86 ;
58700: LD_ADDR_EXP 43
58704: PUSH
58705: LD_INT 86
58707: ST_TO_ADDR
// tech_Hovercraft := 87 ;
58708: LD_ADDR_EXP 44
58712: PUSH
58713: LD_INT 87
58715: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
58716: LD_ADDR_EXP 45
58720: PUSH
58721: LD_INT 88
58723: ST_TO_ADDR
// class_mastodont := 31 ;
58724: LD_ADDR_EXP 46
58728: PUSH
58729: LD_INT 31
58731: ST_TO_ADDR
// class_horse := 21 ;
58732: LD_ADDR_EXP 47
58736: PUSH
58737: LD_INT 21
58739: ST_TO_ADDR
// end ;
58740: LD_VAR 0 1
58744: RET
// every 1 do
58745: GO 58747
58747: DISABLE
// InitGlobalVariables ; end_of_file
58748: CALL 58585 0 0
58752: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use , mc_is_defending ; export function InitMacro ; var i ; begin
58753: LD_INT 0
58755: PPUSH
58756: PPUSH
// skirmish := false ;
58757: LD_ADDR_EXP 48
58761: PUSH
58762: LD_INT 0
58764: ST_TO_ADDR
// debug_mc := false ;
58765: LD_ADDR_EXP 49
58769: PUSH
58770: LD_INT 0
58772: ST_TO_ADDR
// mc_bases := [ ] ;
58773: LD_ADDR_EXP 50
58777: PUSH
58778: EMPTY
58779: ST_TO_ADDR
// mc_sides := [ ] ;
58780: LD_ADDR_EXP 76
58784: PUSH
58785: EMPTY
58786: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
58787: LD_ADDR_EXP 51
58791: PUSH
58792: EMPTY
58793: ST_TO_ADDR
// mc_building_repairs := [ ] ;
58794: LD_ADDR_EXP 52
58798: PUSH
58799: EMPTY
58800: ST_TO_ADDR
// mc_need_heal := [ ] ;
58801: LD_ADDR_EXP 53
58805: PUSH
58806: EMPTY
58807: ST_TO_ADDR
// mc_healers := [ ] ;
58808: LD_ADDR_EXP 54
58812: PUSH
58813: EMPTY
58814: ST_TO_ADDR
// mc_build_list := [ ] ;
58815: LD_ADDR_EXP 55
58819: PUSH
58820: EMPTY
58821: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
58822: LD_ADDR_EXP 82
58826: PUSH
58827: EMPTY
58828: ST_TO_ADDR
// mc_builders := [ ] ;
58829: LD_ADDR_EXP 56
58833: PUSH
58834: EMPTY
58835: ST_TO_ADDR
// mc_construct_list := [ ] ;
58836: LD_ADDR_EXP 57
58840: PUSH
58841: EMPTY
58842: ST_TO_ADDR
// mc_turret_list := [ ] ;
58843: LD_ADDR_EXP 58
58847: PUSH
58848: EMPTY
58849: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
58850: LD_ADDR_EXP 59
58854: PUSH
58855: EMPTY
58856: ST_TO_ADDR
// mc_miners := [ ] ;
58857: LD_ADDR_EXP 64
58861: PUSH
58862: EMPTY
58863: ST_TO_ADDR
// mc_mines := [ ] ;
58864: LD_ADDR_EXP 63
58868: PUSH
58869: EMPTY
58870: ST_TO_ADDR
// mc_minefields := [ ] ;
58871: LD_ADDR_EXP 65
58875: PUSH
58876: EMPTY
58877: ST_TO_ADDR
// mc_crates := [ ] ;
58878: LD_ADDR_EXP 66
58882: PUSH
58883: EMPTY
58884: ST_TO_ADDR
// mc_crates_collector := [ ] ;
58885: LD_ADDR_EXP 67
58889: PUSH
58890: EMPTY
58891: ST_TO_ADDR
// mc_crates_area := [ ] ;
58892: LD_ADDR_EXP 68
58896: PUSH
58897: EMPTY
58898: ST_TO_ADDR
// mc_vehicles := [ ] ;
58899: LD_ADDR_EXP 69
58903: PUSH
58904: EMPTY
58905: ST_TO_ADDR
// mc_attack := [ ] ;
58906: LD_ADDR_EXP 70
58910: PUSH
58911: EMPTY
58912: ST_TO_ADDR
// mc_produce := [ ] ;
58913: LD_ADDR_EXP 71
58917: PUSH
58918: EMPTY
58919: ST_TO_ADDR
// mc_defender := [ ] ;
58920: LD_ADDR_EXP 72
58924: PUSH
58925: EMPTY
58926: ST_TO_ADDR
// mc_parking := [ ] ;
58927: LD_ADDR_EXP 74
58931: PUSH
58932: EMPTY
58933: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
58934: LD_ADDR_EXP 60
58938: PUSH
58939: EMPTY
58940: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
58941: LD_ADDR_EXP 62
58945: PUSH
58946: EMPTY
58947: ST_TO_ADDR
// mc_scan := [ ] ;
58948: LD_ADDR_EXP 73
58952: PUSH
58953: EMPTY
58954: ST_TO_ADDR
// mc_scan_area := [ ] ;
58955: LD_ADDR_EXP 75
58959: PUSH
58960: EMPTY
58961: ST_TO_ADDR
// mc_tech := [ ] ;
58962: LD_ADDR_EXP 77
58966: PUSH
58967: EMPTY
58968: ST_TO_ADDR
// mc_class := [ ] ;
58969: LD_ADDR_EXP 91
58973: PUSH
58974: EMPTY
58975: ST_TO_ADDR
// mc_class_case_use := [ ] ;
58976: LD_ADDR_EXP 92
58980: PUSH
58981: EMPTY
58982: ST_TO_ADDR
// mc_is_defending := [ ] ;
58983: LD_ADDR_EXP 93
58987: PUSH
58988: EMPTY
58989: ST_TO_ADDR
// end ;
58990: LD_VAR 0 1
58994: RET
// export function MC_Kill ( base ) ; begin
58995: LD_INT 0
58997: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
58998: LD_ADDR_EXP 50
59002: PUSH
59003: LD_EXP 50
59007: PPUSH
59008: LD_VAR 0 1
59012: PPUSH
59013: EMPTY
59014: PPUSH
59015: CALL_OW 1
59019: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
59020: LD_ADDR_EXP 51
59024: PUSH
59025: LD_EXP 51
59029: PPUSH
59030: LD_VAR 0 1
59034: PPUSH
59035: EMPTY
59036: PPUSH
59037: CALL_OW 1
59041: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
59042: LD_ADDR_EXP 52
59046: PUSH
59047: LD_EXP 52
59051: PPUSH
59052: LD_VAR 0 1
59056: PPUSH
59057: EMPTY
59058: PPUSH
59059: CALL_OW 1
59063: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
59064: LD_ADDR_EXP 53
59068: PUSH
59069: LD_EXP 53
59073: PPUSH
59074: LD_VAR 0 1
59078: PPUSH
59079: EMPTY
59080: PPUSH
59081: CALL_OW 1
59085: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
59086: LD_ADDR_EXP 54
59090: PUSH
59091: LD_EXP 54
59095: PPUSH
59096: LD_VAR 0 1
59100: PPUSH
59101: EMPTY
59102: PPUSH
59103: CALL_OW 1
59107: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
59108: LD_ADDR_EXP 55
59112: PUSH
59113: LD_EXP 55
59117: PPUSH
59118: LD_VAR 0 1
59122: PPUSH
59123: EMPTY
59124: PPUSH
59125: CALL_OW 1
59129: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
59130: LD_ADDR_EXP 56
59134: PUSH
59135: LD_EXP 56
59139: PPUSH
59140: LD_VAR 0 1
59144: PPUSH
59145: EMPTY
59146: PPUSH
59147: CALL_OW 1
59151: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
59152: LD_ADDR_EXP 57
59156: PUSH
59157: LD_EXP 57
59161: PPUSH
59162: LD_VAR 0 1
59166: PPUSH
59167: EMPTY
59168: PPUSH
59169: CALL_OW 1
59173: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
59174: LD_ADDR_EXP 58
59178: PUSH
59179: LD_EXP 58
59183: PPUSH
59184: LD_VAR 0 1
59188: PPUSH
59189: EMPTY
59190: PPUSH
59191: CALL_OW 1
59195: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
59196: LD_ADDR_EXP 59
59200: PUSH
59201: LD_EXP 59
59205: PPUSH
59206: LD_VAR 0 1
59210: PPUSH
59211: EMPTY
59212: PPUSH
59213: CALL_OW 1
59217: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
59218: LD_ADDR_EXP 60
59222: PUSH
59223: LD_EXP 60
59227: PPUSH
59228: LD_VAR 0 1
59232: PPUSH
59233: EMPTY
59234: PPUSH
59235: CALL_OW 1
59239: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
59240: LD_ADDR_EXP 61
59244: PUSH
59245: LD_EXP 61
59249: PPUSH
59250: LD_VAR 0 1
59254: PPUSH
59255: LD_INT 0
59257: PPUSH
59258: CALL_OW 1
59262: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
59263: LD_ADDR_EXP 62
59267: PUSH
59268: LD_EXP 62
59272: PPUSH
59273: LD_VAR 0 1
59277: PPUSH
59278: EMPTY
59279: PPUSH
59280: CALL_OW 1
59284: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
59285: LD_ADDR_EXP 63
59289: PUSH
59290: LD_EXP 63
59294: PPUSH
59295: LD_VAR 0 1
59299: PPUSH
59300: EMPTY
59301: PPUSH
59302: CALL_OW 1
59306: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
59307: LD_ADDR_EXP 64
59311: PUSH
59312: LD_EXP 64
59316: PPUSH
59317: LD_VAR 0 1
59321: PPUSH
59322: EMPTY
59323: PPUSH
59324: CALL_OW 1
59328: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
59329: LD_ADDR_EXP 65
59333: PUSH
59334: LD_EXP 65
59338: PPUSH
59339: LD_VAR 0 1
59343: PPUSH
59344: EMPTY
59345: PPUSH
59346: CALL_OW 1
59350: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
59351: LD_ADDR_EXP 66
59355: PUSH
59356: LD_EXP 66
59360: PPUSH
59361: LD_VAR 0 1
59365: PPUSH
59366: EMPTY
59367: PPUSH
59368: CALL_OW 1
59372: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
59373: LD_ADDR_EXP 67
59377: PUSH
59378: LD_EXP 67
59382: PPUSH
59383: LD_VAR 0 1
59387: PPUSH
59388: EMPTY
59389: PPUSH
59390: CALL_OW 1
59394: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
59395: LD_ADDR_EXP 68
59399: PUSH
59400: LD_EXP 68
59404: PPUSH
59405: LD_VAR 0 1
59409: PPUSH
59410: EMPTY
59411: PPUSH
59412: CALL_OW 1
59416: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
59417: LD_ADDR_EXP 69
59421: PUSH
59422: LD_EXP 69
59426: PPUSH
59427: LD_VAR 0 1
59431: PPUSH
59432: EMPTY
59433: PPUSH
59434: CALL_OW 1
59438: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
59439: LD_ADDR_EXP 70
59443: PUSH
59444: LD_EXP 70
59448: PPUSH
59449: LD_VAR 0 1
59453: PPUSH
59454: EMPTY
59455: PPUSH
59456: CALL_OW 1
59460: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
59461: LD_ADDR_EXP 71
59465: PUSH
59466: LD_EXP 71
59470: PPUSH
59471: LD_VAR 0 1
59475: PPUSH
59476: EMPTY
59477: PPUSH
59478: CALL_OW 1
59482: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
59483: LD_ADDR_EXP 72
59487: PUSH
59488: LD_EXP 72
59492: PPUSH
59493: LD_VAR 0 1
59497: PPUSH
59498: EMPTY
59499: PPUSH
59500: CALL_OW 1
59504: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
59505: LD_ADDR_EXP 73
59509: PUSH
59510: LD_EXP 73
59514: PPUSH
59515: LD_VAR 0 1
59519: PPUSH
59520: EMPTY
59521: PPUSH
59522: CALL_OW 1
59526: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
59527: LD_ADDR_EXP 74
59531: PUSH
59532: LD_EXP 74
59536: PPUSH
59537: LD_VAR 0 1
59541: PPUSH
59542: EMPTY
59543: PPUSH
59544: CALL_OW 1
59548: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
59549: LD_ADDR_EXP 75
59553: PUSH
59554: LD_EXP 75
59558: PPUSH
59559: LD_VAR 0 1
59563: PPUSH
59564: EMPTY
59565: PPUSH
59566: CALL_OW 1
59570: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
59571: LD_ADDR_EXP 77
59575: PUSH
59576: LD_EXP 77
59580: PPUSH
59581: LD_VAR 0 1
59585: PPUSH
59586: EMPTY
59587: PPUSH
59588: CALL_OW 1
59592: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
59593: LD_ADDR_EXP 79
59597: PUSH
59598: LD_EXP 79
59602: PPUSH
59603: LD_VAR 0 1
59607: PPUSH
59608: EMPTY
59609: PPUSH
59610: CALL_OW 1
59614: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
59615: LD_ADDR_EXP 80
59619: PUSH
59620: LD_EXP 80
59624: PPUSH
59625: LD_VAR 0 1
59629: PPUSH
59630: EMPTY
59631: PPUSH
59632: CALL_OW 1
59636: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
59637: LD_ADDR_EXP 81
59641: PUSH
59642: LD_EXP 81
59646: PPUSH
59647: LD_VAR 0 1
59651: PPUSH
59652: EMPTY
59653: PPUSH
59654: CALL_OW 1
59658: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
59659: LD_ADDR_EXP 82
59663: PUSH
59664: LD_EXP 82
59668: PPUSH
59669: LD_VAR 0 1
59673: PPUSH
59674: EMPTY
59675: PPUSH
59676: CALL_OW 1
59680: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
59681: LD_ADDR_EXP 83
59685: PUSH
59686: LD_EXP 83
59690: PPUSH
59691: LD_VAR 0 1
59695: PPUSH
59696: EMPTY
59697: PPUSH
59698: CALL_OW 1
59702: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
59703: LD_ADDR_EXP 84
59707: PUSH
59708: LD_EXP 84
59712: PPUSH
59713: LD_VAR 0 1
59717: PPUSH
59718: EMPTY
59719: PPUSH
59720: CALL_OW 1
59724: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
59725: LD_ADDR_EXP 85
59729: PUSH
59730: LD_EXP 85
59734: PPUSH
59735: LD_VAR 0 1
59739: PPUSH
59740: EMPTY
59741: PPUSH
59742: CALL_OW 1
59746: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
59747: LD_ADDR_EXP 86
59751: PUSH
59752: LD_EXP 86
59756: PPUSH
59757: LD_VAR 0 1
59761: PPUSH
59762: EMPTY
59763: PPUSH
59764: CALL_OW 1
59768: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
59769: LD_ADDR_EXP 87
59773: PUSH
59774: LD_EXP 87
59778: PPUSH
59779: LD_VAR 0 1
59783: PPUSH
59784: EMPTY
59785: PPUSH
59786: CALL_OW 1
59790: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
59791: LD_ADDR_EXP 88
59795: PUSH
59796: LD_EXP 88
59800: PPUSH
59801: LD_VAR 0 1
59805: PPUSH
59806: EMPTY
59807: PPUSH
59808: CALL_OW 1
59812: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
59813: LD_ADDR_EXP 89
59817: PUSH
59818: LD_EXP 89
59822: PPUSH
59823: LD_VAR 0 1
59827: PPUSH
59828: EMPTY
59829: PPUSH
59830: CALL_OW 1
59834: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
59835: LD_ADDR_EXP 90
59839: PUSH
59840: LD_EXP 90
59844: PPUSH
59845: LD_VAR 0 1
59849: PPUSH
59850: EMPTY
59851: PPUSH
59852: CALL_OW 1
59856: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
59857: LD_ADDR_EXP 91
59861: PUSH
59862: LD_EXP 91
59866: PPUSH
59867: LD_VAR 0 1
59871: PPUSH
59872: EMPTY
59873: PPUSH
59874: CALL_OW 1
59878: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
59879: LD_ADDR_EXP 92
59883: PUSH
59884: LD_EXP 92
59888: PPUSH
59889: LD_VAR 0 1
59893: PPUSH
59894: LD_INT 0
59896: PPUSH
59897: CALL_OW 1
59901: ST_TO_ADDR
// mc_is_defending := Replace ( mc_is_defending , base , false ) ;
59902: LD_ADDR_EXP 93
59906: PUSH
59907: LD_EXP 93
59911: PPUSH
59912: LD_VAR 0 1
59916: PPUSH
59917: LD_INT 0
59919: PPUSH
59920: CALL_OW 1
59924: ST_TO_ADDR
// end ;
59925: LD_VAR 0 2
59929: RET
// export function MC_Add ( side , units ) ; var base ; begin
59930: LD_INT 0
59932: PPUSH
59933: PPUSH
// base := mc_bases + 1 ;
59934: LD_ADDR_VAR 0 4
59938: PUSH
59939: LD_EXP 50
59943: PUSH
59944: LD_INT 1
59946: PLUS
59947: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
59948: LD_ADDR_EXP 76
59952: PUSH
59953: LD_EXP 76
59957: PPUSH
59958: LD_VAR 0 4
59962: PPUSH
59963: LD_VAR 0 1
59967: PPUSH
59968: CALL_OW 1
59972: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
59973: LD_ADDR_EXP 50
59977: PUSH
59978: LD_EXP 50
59982: PPUSH
59983: LD_VAR 0 4
59987: PPUSH
59988: LD_VAR 0 2
59992: PPUSH
59993: CALL_OW 1
59997: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
59998: LD_ADDR_EXP 51
60002: PUSH
60003: LD_EXP 51
60007: PPUSH
60008: LD_VAR 0 4
60012: PPUSH
60013: EMPTY
60014: PPUSH
60015: CALL_OW 1
60019: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
60020: LD_ADDR_EXP 52
60024: PUSH
60025: LD_EXP 52
60029: PPUSH
60030: LD_VAR 0 4
60034: PPUSH
60035: EMPTY
60036: PPUSH
60037: CALL_OW 1
60041: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
60042: LD_ADDR_EXP 53
60046: PUSH
60047: LD_EXP 53
60051: PPUSH
60052: LD_VAR 0 4
60056: PPUSH
60057: EMPTY
60058: PPUSH
60059: CALL_OW 1
60063: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
60064: LD_ADDR_EXP 54
60068: PUSH
60069: LD_EXP 54
60073: PPUSH
60074: LD_VAR 0 4
60078: PPUSH
60079: EMPTY
60080: PPUSH
60081: CALL_OW 1
60085: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
60086: LD_ADDR_EXP 55
60090: PUSH
60091: LD_EXP 55
60095: PPUSH
60096: LD_VAR 0 4
60100: PPUSH
60101: EMPTY
60102: PPUSH
60103: CALL_OW 1
60107: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
60108: LD_ADDR_EXP 56
60112: PUSH
60113: LD_EXP 56
60117: PPUSH
60118: LD_VAR 0 4
60122: PPUSH
60123: EMPTY
60124: PPUSH
60125: CALL_OW 1
60129: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
60130: LD_ADDR_EXP 57
60134: PUSH
60135: LD_EXP 57
60139: PPUSH
60140: LD_VAR 0 4
60144: PPUSH
60145: EMPTY
60146: PPUSH
60147: CALL_OW 1
60151: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
60152: LD_ADDR_EXP 58
60156: PUSH
60157: LD_EXP 58
60161: PPUSH
60162: LD_VAR 0 4
60166: PPUSH
60167: EMPTY
60168: PPUSH
60169: CALL_OW 1
60173: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
60174: LD_ADDR_EXP 59
60178: PUSH
60179: LD_EXP 59
60183: PPUSH
60184: LD_VAR 0 4
60188: PPUSH
60189: EMPTY
60190: PPUSH
60191: CALL_OW 1
60195: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
60196: LD_ADDR_EXP 60
60200: PUSH
60201: LD_EXP 60
60205: PPUSH
60206: LD_VAR 0 4
60210: PPUSH
60211: EMPTY
60212: PPUSH
60213: CALL_OW 1
60217: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
60218: LD_ADDR_EXP 61
60222: PUSH
60223: LD_EXP 61
60227: PPUSH
60228: LD_VAR 0 4
60232: PPUSH
60233: LD_INT 0
60235: PPUSH
60236: CALL_OW 1
60240: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
60241: LD_ADDR_EXP 62
60245: PUSH
60246: LD_EXP 62
60250: PPUSH
60251: LD_VAR 0 4
60255: PPUSH
60256: EMPTY
60257: PPUSH
60258: CALL_OW 1
60262: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
60263: LD_ADDR_EXP 63
60267: PUSH
60268: LD_EXP 63
60272: PPUSH
60273: LD_VAR 0 4
60277: PPUSH
60278: EMPTY
60279: PPUSH
60280: CALL_OW 1
60284: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
60285: LD_ADDR_EXP 64
60289: PUSH
60290: LD_EXP 64
60294: PPUSH
60295: LD_VAR 0 4
60299: PPUSH
60300: EMPTY
60301: PPUSH
60302: CALL_OW 1
60306: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
60307: LD_ADDR_EXP 65
60311: PUSH
60312: LD_EXP 65
60316: PPUSH
60317: LD_VAR 0 4
60321: PPUSH
60322: EMPTY
60323: PPUSH
60324: CALL_OW 1
60328: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
60329: LD_ADDR_EXP 66
60333: PUSH
60334: LD_EXP 66
60338: PPUSH
60339: LD_VAR 0 4
60343: PPUSH
60344: EMPTY
60345: PPUSH
60346: CALL_OW 1
60350: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
60351: LD_ADDR_EXP 67
60355: PUSH
60356: LD_EXP 67
60360: PPUSH
60361: LD_VAR 0 4
60365: PPUSH
60366: EMPTY
60367: PPUSH
60368: CALL_OW 1
60372: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
60373: LD_ADDR_EXP 68
60377: PUSH
60378: LD_EXP 68
60382: PPUSH
60383: LD_VAR 0 4
60387: PPUSH
60388: EMPTY
60389: PPUSH
60390: CALL_OW 1
60394: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
60395: LD_ADDR_EXP 69
60399: PUSH
60400: LD_EXP 69
60404: PPUSH
60405: LD_VAR 0 4
60409: PPUSH
60410: EMPTY
60411: PPUSH
60412: CALL_OW 1
60416: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
60417: LD_ADDR_EXP 70
60421: PUSH
60422: LD_EXP 70
60426: PPUSH
60427: LD_VAR 0 4
60431: PPUSH
60432: EMPTY
60433: PPUSH
60434: CALL_OW 1
60438: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
60439: LD_ADDR_EXP 71
60443: PUSH
60444: LD_EXP 71
60448: PPUSH
60449: LD_VAR 0 4
60453: PPUSH
60454: EMPTY
60455: PPUSH
60456: CALL_OW 1
60460: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
60461: LD_ADDR_EXP 72
60465: PUSH
60466: LD_EXP 72
60470: PPUSH
60471: LD_VAR 0 4
60475: PPUSH
60476: EMPTY
60477: PPUSH
60478: CALL_OW 1
60482: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
60483: LD_ADDR_EXP 73
60487: PUSH
60488: LD_EXP 73
60492: PPUSH
60493: LD_VAR 0 4
60497: PPUSH
60498: EMPTY
60499: PPUSH
60500: CALL_OW 1
60504: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
60505: LD_ADDR_EXP 74
60509: PUSH
60510: LD_EXP 74
60514: PPUSH
60515: LD_VAR 0 4
60519: PPUSH
60520: EMPTY
60521: PPUSH
60522: CALL_OW 1
60526: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
60527: LD_ADDR_EXP 75
60531: PUSH
60532: LD_EXP 75
60536: PPUSH
60537: LD_VAR 0 4
60541: PPUSH
60542: EMPTY
60543: PPUSH
60544: CALL_OW 1
60548: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
60549: LD_ADDR_EXP 77
60553: PUSH
60554: LD_EXP 77
60558: PPUSH
60559: LD_VAR 0 4
60563: PPUSH
60564: EMPTY
60565: PPUSH
60566: CALL_OW 1
60570: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
60571: LD_ADDR_EXP 79
60575: PUSH
60576: LD_EXP 79
60580: PPUSH
60581: LD_VAR 0 4
60585: PPUSH
60586: EMPTY
60587: PPUSH
60588: CALL_OW 1
60592: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
60593: LD_ADDR_EXP 80
60597: PUSH
60598: LD_EXP 80
60602: PPUSH
60603: LD_VAR 0 4
60607: PPUSH
60608: EMPTY
60609: PPUSH
60610: CALL_OW 1
60614: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
60615: LD_ADDR_EXP 81
60619: PUSH
60620: LD_EXP 81
60624: PPUSH
60625: LD_VAR 0 4
60629: PPUSH
60630: EMPTY
60631: PPUSH
60632: CALL_OW 1
60636: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
60637: LD_ADDR_EXP 82
60641: PUSH
60642: LD_EXP 82
60646: PPUSH
60647: LD_VAR 0 4
60651: PPUSH
60652: EMPTY
60653: PPUSH
60654: CALL_OW 1
60658: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
60659: LD_ADDR_EXP 83
60663: PUSH
60664: LD_EXP 83
60668: PPUSH
60669: LD_VAR 0 4
60673: PPUSH
60674: EMPTY
60675: PPUSH
60676: CALL_OW 1
60680: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
60681: LD_ADDR_EXP 84
60685: PUSH
60686: LD_EXP 84
60690: PPUSH
60691: LD_VAR 0 4
60695: PPUSH
60696: EMPTY
60697: PPUSH
60698: CALL_OW 1
60702: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
60703: LD_ADDR_EXP 85
60707: PUSH
60708: LD_EXP 85
60712: PPUSH
60713: LD_VAR 0 4
60717: PPUSH
60718: EMPTY
60719: PPUSH
60720: CALL_OW 1
60724: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
60725: LD_ADDR_EXP 86
60729: PUSH
60730: LD_EXP 86
60734: PPUSH
60735: LD_VAR 0 4
60739: PPUSH
60740: EMPTY
60741: PPUSH
60742: CALL_OW 1
60746: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
60747: LD_ADDR_EXP 87
60751: PUSH
60752: LD_EXP 87
60756: PPUSH
60757: LD_VAR 0 4
60761: PPUSH
60762: EMPTY
60763: PPUSH
60764: CALL_OW 1
60768: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
60769: LD_ADDR_EXP 88
60773: PUSH
60774: LD_EXP 88
60778: PPUSH
60779: LD_VAR 0 4
60783: PPUSH
60784: EMPTY
60785: PPUSH
60786: CALL_OW 1
60790: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
60791: LD_ADDR_EXP 89
60795: PUSH
60796: LD_EXP 89
60800: PPUSH
60801: LD_VAR 0 4
60805: PPUSH
60806: EMPTY
60807: PPUSH
60808: CALL_OW 1
60812: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
60813: LD_ADDR_EXP 90
60817: PUSH
60818: LD_EXP 90
60822: PPUSH
60823: LD_VAR 0 4
60827: PPUSH
60828: EMPTY
60829: PPUSH
60830: CALL_OW 1
60834: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
60835: LD_ADDR_EXP 91
60839: PUSH
60840: LD_EXP 91
60844: PPUSH
60845: LD_VAR 0 4
60849: PPUSH
60850: EMPTY
60851: PPUSH
60852: CALL_OW 1
60856: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
60857: LD_ADDR_EXP 92
60861: PUSH
60862: LD_EXP 92
60866: PPUSH
60867: LD_VAR 0 4
60871: PPUSH
60872: LD_INT 0
60874: PPUSH
60875: CALL_OW 1
60879: ST_TO_ADDR
// mc_is_defending := Replace ( mc_is_defending , base , false ) ;
60880: LD_ADDR_EXP 93
60884: PUSH
60885: LD_EXP 93
60889: PPUSH
60890: LD_VAR 0 4
60894: PPUSH
60895: LD_INT 0
60897: PPUSH
60898: CALL_OW 1
60902: ST_TO_ADDR
// result := base ;
60903: LD_ADDR_VAR 0 3
60907: PUSH
60908: LD_VAR 0 4
60912: ST_TO_ADDR
// end ;
60913: LD_VAR 0 3
60917: RET
// export function MC_Start ( ) ; var i ; begin
60918: LD_INT 0
60920: PPUSH
60921: PPUSH
// for i = 1 to mc_bases do
60922: LD_ADDR_VAR 0 2
60926: PUSH
60927: DOUBLE
60928: LD_INT 1
60930: DEC
60931: ST_TO_ADDR
60932: LD_EXP 50
60936: PUSH
60937: FOR_TO
60938: IFFALSE 62038
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
60940: LD_ADDR_EXP 50
60944: PUSH
60945: LD_EXP 50
60949: PPUSH
60950: LD_VAR 0 2
60954: PPUSH
60955: LD_EXP 50
60959: PUSH
60960: LD_VAR 0 2
60964: ARRAY
60965: PUSH
60966: LD_INT 0
60968: DIFF
60969: PPUSH
60970: CALL_OW 1
60974: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
60975: LD_ADDR_EXP 51
60979: PUSH
60980: LD_EXP 51
60984: PPUSH
60985: LD_VAR 0 2
60989: PPUSH
60990: EMPTY
60991: PPUSH
60992: CALL_OW 1
60996: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
60997: LD_ADDR_EXP 52
61001: PUSH
61002: LD_EXP 52
61006: PPUSH
61007: LD_VAR 0 2
61011: PPUSH
61012: EMPTY
61013: PPUSH
61014: CALL_OW 1
61018: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
61019: LD_ADDR_EXP 53
61023: PUSH
61024: LD_EXP 53
61028: PPUSH
61029: LD_VAR 0 2
61033: PPUSH
61034: EMPTY
61035: PPUSH
61036: CALL_OW 1
61040: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
61041: LD_ADDR_EXP 54
61045: PUSH
61046: LD_EXP 54
61050: PPUSH
61051: LD_VAR 0 2
61055: PPUSH
61056: EMPTY
61057: PUSH
61058: EMPTY
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PPUSH
61064: CALL_OW 1
61068: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
61069: LD_ADDR_EXP 55
61073: PUSH
61074: LD_EXP 55
61078: PPUSH
61079: LD_VAR 0 2
61083: PPUSH
61084: EMPTY
61085: PPUSH
61086: CALL_OW 1
61090: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
61091: LD_ADDR_EXP 82
61095: PUSH
61096: LD_EXP 82
61100: PPUSH
61101: LD_VAR 0 2
61105: PPUSH
61106: EMPTY
61107: PPUSH
61108: CALL_OW 1
61112: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
61113: LD_ADDR_EXP 56
61117: PUSH
61118: LD_EXP 56
61122: PPUSH
61123: LD_VAR 0 2
61127: PPUSH
61128: EMPTY
61129: PPUSH
61130: CALL_OW 1
61134: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
61135: LD_ADDR_EXP 57
61139: PUSH
61140: LD_EXP 57
61144: PPUSH
61145: LD_VAR 0 2
61149: PPUSH
61150: EMPTY
61151: PPUSH
61152: CALL_OW 1
61156: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
61157: LD_ADDR_EXP 58
61161: PUSH
61162: LD_EXP 58
61166: PPUSH
61167: LD_VAR 0 2
61171: PPUSH
61172: LD_EXP 50
61176: PUSH
61177: LD_VAR 0 2
61181: ARRAY
61182: PPUSH
61183: LD_INT 2
61185: PUSH
61186: LD_INT 30
61188: PUSH
61189: LD_INT 32
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 30
61198: PUSH
61199: LD_INT 33
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: LIST
61210: PPUSH
61211: CALL_OW 72
61215: PPUSH
61216: CALL_OW 1
61220: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
61221: LD_ADDR_EXP 59
61225: PUSH
61226: LD_EXP 59
61230: PPUSH
61231: LD_VAR 0 2
61235: PPUSH
61236: LD_EXP 50
61240: PUSH
61241: LD_VAR 0 2
61245: ARRAY
61246: PPUSH
61247: LD_INT 2
61249: PUSH
61250: LD_INT 30
61252: PUSH
61253: LD_INT 32
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 30
61262: PUSH
61263: LD_INT 31
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 58
61277: PUSH
61278: EMPTY
61279: LIST
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PPUSH
61285: CALL_OW 72
61289: PPUSH
61290: CALL_OW 1
61294: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
61295: LD_ADDR_EXP 60
61299: PUSH
61300: LD_EXP 60
61304: PPUSH
61305: LD_VAR 0 2
61309: PPUSH
61310: EMPTY
61311: PPUSH
61312: CALL_OW 1
61316: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
61317: LD_ADDR_EXP 64
61321: PUSH
61322: LD_EXP 64
61326: PPUSH
61327: LD_VAR 0 2
61331: PPUSH
61332: EMPTY
61333: PPUSH
61334: CALL_OW 1
61338: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
61339: LD_ADDR_EXP 63
61343: PUSH
61344: LD_EXP 63
61348: PPUSH
61349: LD_VAR 0 2
61353: PPUSH
61354: EMPTY
61355: PPUSH
61356: CALL_OW 1
61360: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
61361: LD_ADDR_EXP 65
61365: PUSH
61366: LD_EXP 65
61370: PPUSH
61371: LD_VAR 0 2
61375: PPUSH
61376: EMPTY
61377: PPUSH
61378: CALL_OW 1
61382: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
61383: LD_ADDR_EXP 66
61387: PUSH
61388: LD_EXP 66
61392: PPUSH
61393: LD_VAR 0 2
61397: PPUSH
61398: EMPTY
61399: PPUSH
61400: CALL_OW 1
61404: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
61405: LD_ADDR_EXP 67
61409: PUSH
61410: LD_EXP 67
61414: PPUSH
61415: LD_VAR 0 2
61419: PPUSH
61420: EMPTY
61421: PPUSH
61422: CALL_OW 1
61426: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
61427: LD_ADDR_EXP 68
61431: PUSH
61432: LD_EXP 68
61436: PPUSH
61437: LD_VAR 0 2
61441: PPUSH
61442: EMPTY
61443: PPUSH
61444: CALL_OW 1
61448: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
61449: LD_ADDR_EXP 69
61453: PUSH
61454: LD_EXP 69
61458: PPUSH
61459: LD_VAR 0 2
61463: PPUSH
61464: EMPTY
61465: PPUSH
61466: CALL_OW 1
61470: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
61471: LD_ADDR_EXP 70
61475: PUSH
61476: LD_EXP 70
61480: PPUSH
61481: LD_VAR 0 2
61485: PPUSH
61486: EMPTY
61487: PPUSH
61488: CALL_OW 1
61492: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
61493: LD_ADDR_EXP 71
61497: PUSH
61498: LD_EXP 71
61502: PPUSH
61503: LD_VAR 0 2
61507: PPUSH
61508: EMPTY
61509: PPUSH
61510: CALL_OW 1
61514: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
61515: LD_ADDR_EXP 72
61519: PUSH
61520: LD_EXP 72
61524: PPUSH
61525: LD_VAR 0 2
61529: PPUSH
61530: EMPTY
61531: PPUSH
61532: CALL_OW 1
61536: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
61537: LD_ADDR_EXP 61
61541: PUSH
61542: LD_EXP 61
61546: PPUSH
61547: LD_VAR 0 2
61551: PPUSH
61552: LD_INT 0
61554: PPUSH
61555: CALL_OW 1
61559: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
61560: LD_ADDR_EXP 74
61564: PUSH
61565: LD_EXP 74
61569: PPUSH
61570: LD_VAR 0 2
61574: PPUSH
61575: LD_INT 0
61577: PPUSH
61578: CALL_OW 1
61582: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
61583: LD_ADDR_EXP 62
61587: PUSH
61588: LD_EXP 62
61592: PPUSH
61593: LD_VAR 0 2
61597: PPUSH
61598: EMPTY
61599: PPUSH
61600: CALL_OW 1
61604: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
61605: LD_ADDR_EXP 73
61609: PUSH
61610: LD_EXP 73
61614: PPUSH
61615: LD_VAR 0 2
61619: PPUSH
61620: LD_INT 0
61622: PPUSH
61623: CALL_OW 1
61627: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
61628: LD_ADDR_EXP 75
61632: PUSH
61633: LD_EXP 75
61637: PPUSH
61638: LD_VAR 0 2
61642: PPUSH
61643: EMPTY
61644: PPUSH
61645: CALL_OW 1
61649: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
61650: LD_ADDR_EXP 78
61654: PUSH
61655: LD_EXP 78
61659: PPUSH
61660: LD_VAR 0 2
61664: PPUSH
61665: LD_INT 0
61667: PPUSH
61668: CALL_OW 1
61672: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
61673: LD_ADDR_EXP 79
61677: PUSH
61678: LD_EXP 79
61682: PPUSH
61683: LD_VAR 0 2
61687: PPUSH
61688: EMPTY
61689: PPUSH
61690: CALL_OW 1
61694: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
61695: LD_ADDR_EXP 80
61699: PUSH
61700: LD_EXP 80
61704: PPUSH
61705: LD_VAR 0 2
61709: PPUSH
61710: EMPTY
61711: PPUSH
61712: CALL_OW 1
61716: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
61717: LD_ADDR_EXP 81
61721: PUSH
61722: LD_EXP 81
61726: PPUSH
61727: LD_VAR 0 2
61731: PPUSH
61732: EMPTY
61733: PPUSH
61734: CALL_OW 1
61738: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
61739: LD_ADDR_EXP 83
61743: PUSH
61744: LD_EXP 83
61748: PPUSH
61749: LD_VAR 0 2
61753: PPUSH
61754: LD_EXP 50
61758: PUSH
61759: LD_VAR 0 2
61763: ARRAY
61764: PPUSH
61765: LD_INT 2
61767: PUSH
61768: LD_INT 30
61770: PUSH
61771: LD_INT 6
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 30
61780: PUSH
61781: LD_INT 7
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 30
61790: PUSH
61791: LD_INT 8
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: PPUSH
61804: CALL_OW 72
61808: PPUSH
61809: CALL_OW 1
61813: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
61814: LD_ADDR_EXP 84
61818: PUSH
61819: LD_EXP 84
61823: PPUSH
61824: LD_VAR 0 2
61828: PPUSH
61829: EMPTY
61830: PPUSH
61831: CALL_OW 1
61835: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
61836: LD_ADDR_EXP 85
61840: PUSH
61841: LD_EXP 85
61845: PPUSH
61846: LD_VAR 0 2
61850: PPUSH
61851: EMPTY
61852: PPUSH
61853: CALL_OW 1
61857: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
61858: LD_ADDR_EXP 86
61862: PUSH
61863: LD_EXP 86
61867: PPUSH
61868: LD_VAR 0 2
61872: PPUSH
61873: EMPTY
61874: PPUSH
61875: CALL_OW 1
61879: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
61880: LD_ADDR_EXP 87
61884: PUSH
61885: LD_EXP 87
61889: PPUSH
61890: LD_VAR 0 2
61894: PPUSH
61895: EMPTY
61896: PPUSH
61897: CALL_OW 1
61901: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
61902: LD_ADDR_EXP 88
61906: PUSH
61907: LD_EXP 88
61911: PPUSH
61912: LD_VAR 0 2
61916: PPUSH
61917: EMPTY
61918: PPUSH
61919: CALL_OW 1
61923: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
61924: LD_ADDR_EXP 89
61928: PUSH
61929: LD_EXP 89
61933: PPUSH
61934: LD_VAR 0 2
61938: PPUSH
61939: EMPTY
61940: PPUSH
61941: CALL_OW 1
61945: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
61946: LD_ADDR_EXP 90
61950: PUSH
61951: LD_EXP 90
61955: PPUSH
61956: LD_VAR 0 2
61960: PPUSH
61961: EMPTY
61962: PPUSH
61963: CALL_OW 1
61967: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
61968: LD_ADDR_EXP 91
61972: PUSH
61973: LD_EXP 91
61977: PPUSH
61978: LD_VAR 0 2
61982: PPUSH
61983: EMPTY
61984: PPUSH
61985: CALL_OW 1
61989: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
61990: LD_ADDR_EXP 92
61994: PUSH
61995: LD_EXP 92
61999: PPUSH
62000: LD_VAR 0 2
62004: PPUSH
62005: LD_INT 0
62007: PPUSH
62008: CALL_OW 1
62012: ST_TO_ADDR
// mc_is_defending := Replace ( mc_is_defending , i , false ) ;
62013: LD_ADDR_EXP 93
62017: PUSH
62018: LD_EXP 93
62022: PPUSH
62023: LD_VAR 0 2
62027: PPUSH
62028: LD_INT 0
62030: PPUSH
62031: CALL_OW 1
62035: ST_TO_ADDR
// end ;
62036: GO 60937
62038: POP
62039: POP
// MC_InitSides ( ) ;
62040: CALL 62326 0 0
// MC_InitResearch ( ) ;
62044: CALL 62065 0 0
// CustomInitMacro ( ) ;
62048: CALL 1411 0 0
// skirmish := true ;
62052: LD_ADDR_EXP 48
62056: PUSH
62057: LD_INT 1
62059: ST_TO_ADDR
// end ;
62060: LD_VAR 0 1
62064: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
62065: LD_INT 0
62067: PPUSH
62068: PPUSH
62069: PPUSH
62070: PPUSH
62071: PPUSH
62072: PPUSH
// if not mc_bases then
62073: LD_EXP 50
62077: NOT
62078: IFFALSE 62082
// exit ;
62080: GO 62321
// for i = 1 to 8 do
62082: LD_ADDR_VAR 0 2
62086: PUSH
62087: DOUBLE
62088: LD_INT 1
62090: DEC
62091: ST_TO_ADDR
62092: LD_INT 8
62094: PUSH
62095: FOR_TO
62096: IFFALSE 62122
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
62098: LD_ADDR_EXP 77
62102: PUSH
62103: LD_EXP 77
62107: PPUSH
62108: LD_VAR 0 2
62112: PPUSH
62113: EMPTY
62114: PPUSH
62115: CALL_OW 1
62119: ST_TO_ADDR
62120: GO 62095
62122: POP
62123: POP
// tmp := [ ] ;
62124: LD_ADDR_VAR 0 5
62128: PUSH
62129: EMPTY
62130: ST_TO_ADDR
// for i = 1 to mc_sides do
62131: LD_ADDR_VAR 0 2
62135: PUSH
62136: DOUBLE
62137: LD_INT 1
62139: DEC
62140: ST_TO_ADDR
62141: LD_EXP 76
62145: PUSH
62146: FOR_TO
62147: IFFALSE 62205
// if not mc_sides [ i ] in tmp then
62149: LD_EXP 76
62153: PUSH
62154: LD_VAR 0 2
62158: ARRAY
62159: PUSH
62160: LD_VAR 0 5
62164: IN
62165: NOT
62166: IFFALSE 62203
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
62168: LD_ADDR_VAR 0 5
62172: PUSH
62173: LD_VAR 0 5
62177: PPUSH
62178: LD_VAR 0 5
62182: PUSH
62183: LD_INT 1
62185: PLUS
62186: PPUSH
62187: LD_EXP 76
62191: PUSH
62192: LD_VAR 0 2
62196: ARRAY
62197: PPUSH
62198: CALL_OW 2
62202: ST_TO_ADDR
62203: GO 62146
62205: POP
62206: POP
// if not tmp then
62207: LD_VAR 0 5
62211: NOT
62212: IFFALSE 62216
// exit ;
62214: GO 62321
// for j in tmp do
62216: LD_ADDR_VAR 0 3
62220: PUSH
62221: LD_VAR 0 5
62225: PUSH
62226: FOR_IN
62227: IFFALSE 62319
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
62229: LD_ADDR_VAR 0 6
62233: PUSH
62234: LD_INT 22
62236: PUSH
62237: LD_VAR 0 3
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PPUSH
62246: CALL_OW 69
62250: ST_TO_ADDR
// if not un then
62251: LD_VAR 0 6
62255: NOT
62256: IFFALSE 62260
// continue ;
62258: GO 62226
// nation := GetNation ( un [ 1 ] ) ;
62260: LD_ADDR_VAR 0 4
62264: PUSH
62265: LD_VAR 0 6
62269: PUSH
62270: LD_INT 1
62272: ARRAY
62273: PPUSH
62274: CALL_OW 248
62278: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
62279: LD_ADDR_EXP 77
62283: PUSH
62284: LD_EXP 77
62288: PPUSH
62289: LD_VAR 0 3
62293: PPUSH
62294: LD_VAR 0 3
62298: PPUSH
62299: LD_VAR 0 4
62303: PPUSH
62304: LD_INT 1
62306: PPUSH
62307: CALL 19774 0 3
62311: PPUSH
62312: CALL_OW 1
62316: ST_TO_ADDR
// end ;
62317: GO 62226
62319: POP
62320: POP
// end ;
62321: LD_VAR 0 1
62325: RET
// export function MC_InitSides ( ) ; var i ; begin
62326: LD_INT 0
62328: PPUSH
62329: PPUSH
// if not mc_bases then
62330: LD_EXP 50
62334: NOT
62335: IFFALSE 62339
// exit ;
62337: GO 62413
// for i = 1 to mc_bases do
62339: LD_ADDR_VAR 0 2
62343: PUSH
62344: DOUBLE
62345: LD_INT 1
62347: DEC
62348: ST_TO_ADDR
62349: LD_EXP 50
62353: PUSH
62354: FOR_TO
62355: IFFALSE 62411
// if mc_bases [ i ] then
62357: LD_EXP 50
62361: PUSH
62362: LD_VAR 0 2
62366: ARRAY
62367: IFFALSE 62409
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
62369: LD_ADDR_EXP 76
62373: PUSH
62374: LD_EXP 76
62378: PPUSH
62379: LD_VAR 0 2
62383: PPUSH
62384: LD_EXP 50
62388: PUSH
62389: LD_VAR 0 2
62393: ARRAY
62394: PUSH
62395: LD_INT 1
62397: ARRAY
62398: PPUSH
62399: CALL_OW 255
62403: PPUSH
62404: CALL_OW 1
62408: ST_TO_ADDR
62409: GO 62354
62411: POP
62412: POP
// end ;
62413: LD_VAR 0 1
62417: RET
// every 0 0$03 trigger skirmish do
62418: LD_EXP 48
62422: IFFALSE 62576
62424: GO 62426
62426: DISABLE
// begin enable ;
62427: ENABLE
// MC_CheckBuildings ( ) ;
62428: CALL 67074 0 0
// MC_CheckPeopleLife ( ) ;
62432: CALL 67235 0 0
// RaiseSailEvent ( 100 ) ;
62436: LD_INT 100
62438: PPUSH
62439: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
62443: LD_INT 103
62445: PPUSH
62446: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
62450: LD_INT 104
62452: PPUSH
62453: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
62457: LD_INT 105
62459: PPUSH
62460: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
62464: LD_INT 106
62466: PPUSH
62467: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
62471: LD_INT 107
62473: PPUSH
62474: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
62478: LD_INT 108
62480: PPUSH
62481: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
62485: LD_INT 109
62487: PPUSH
62488: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
62492: LD_INT 110
62494: PPUSH
62495: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
62499: LD_INT 111
62501: PPUSH
62502: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
62506: LD_INT 112
62508: PPUSH
62509: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
62513: LD_INT 113
62515: PPUSH
62516: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
62520: LD_INT 120
62522: PPUSH
62523: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
62527: LD_INT 121
62529: PPUSH
62530: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
62534: LD_INT 122
62536: PPUSH
62537: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
62541: LD_INT 123
62543: PPUSH
62544: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
62548: LD_INT 124
62550: PPUSH
62551: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
62555: LD_INT 125
62557: PPUSH
62558: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
62562: LD_INT 126
62564: PPUSH
62565: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
62569: LD_INT 200
62571: PPUSH
62572: CALL_OW 427
// end ;
62576: END
// on SailEvent ( event ) do begin if event < 100 then
62577: LD_VAR 0 1
62581: PUSH
62582: LD_INT 100
62584: LESS
62585: IFFALSE 62596
// CustomEvent ( event ) ;
62587: LD_VAR 0 1
62591: PPUSH
62592: CALL 18952 0 1
// if event = 100 then
62596: LD_VAR 0 1
62600: PUSH
62601: LD_INT 100
62603: EQUAL
62604: IFFALSE 62610
// MC_ClassManager ( ) ;
62606: CALL 63002 0 0
// if event = 101 then
62610: LD_VAR 0 1
62614: PUSH
62615: LD_INT 101
62617: EQUAL
62618: IFFALSE 62624
// MC_RepairBuildings ( ) ;
62620: CALL 67820 0 0
// if event = 102 then
62624: LD_VAR 0 1
62628: PUSH
62629: LD_INT 102
62631: EQUAL
62632: IFFALSE 62638
// MC_Heal ( ) ;
62634: CALL 68727 0 0
// if event = 103 then
62638: LD_VAR 0 1
62642: PUSH
62643: LD_INT 103
62645: EQUAL
62646: IFFALSE 62652
// MC_Build ( ) ;
62648: CALL 69149 0 0
// if event = 104 then
62652: LD_VAR 0 1
62656: PUSH
62657: LD_INT 104
62659: EQUAL
62660: IFFALSE 62666
// MC_TurretWeapon ( ) ;
62662: CALL 70790 0 0
// if event = 105 then
62666: LD_VAR 0 1
62670: PUSH
62671: LD_INT 105
62673: EQUAL
62674: IFFALSE 62680
// MC_BuildUpgrade ( ) ;
62676: CALL 70341 0 0
// if event = 106 then
62680: LD_VAR 0 1
62684: PUSH
62685: LD_INT 106
62687: EQUAL
62688: IFFALSE 62694
// MC_PlantMines ( ) ;
62690: CALL 71220 0 0
// if event = 107 then
62694: LD_VAR 0 1
62698: PUSH
62699: LD_INT 107
62701: EQUAL
62702: IFFALSE 62708
// MC_CollectCrates ( ) ;
62704: CALL 72011 0 0
// if event = 108 then
62708: LD_VAR 0 1
62712: PUSH
62713: LD_INT 108
62715: EQUAL
62716: IFFALSE 62722
// MC_LinkRemoteControl ( ) ;
62718: CALL 73861 0 0
// if event = 109 then
62722: LD_VAR 0 1
62726: PUSH
62727: LD_INT 109
62729: EQUAL
62730: IFFALSE 62736
// MC_ProduceVehicle ( ) ;
62732: CALL 74042 0 0
// if event = 110 then
62736: LD_VAR 0 1
62740: PUSH
62741: LD_INT 110
62743: EQUAL
62744: IFFALSE 62750
// MC_SendAttack ( ) ;
62746: CALL 74508 0 0
// if event = 111 then
62750: LD_VAR 0 1
62754: PUSH
62755: LD_INT 111
62757: EQUAL
62758: IFFALSE 62764
// MC_Defend ( ) ;
62760: CALL 74616 0 0
// if event = 112 then
62764: LD_VAR 0 1
62768: PUSH
62769: LD_INT 112
62771: EQUAL
62772: IFFALSE 62778
// MC_Research ( ) ;
62774: CALL 75349 0 0
// if event = 113 then
62778: LD_VAR 0 1
62782: PUSH
62783: LD_INT 113
62785: EQUAL
62786: IFFALSE 62792
// MC_MinesTrigger ( ) ;
62788: CALL 76463 0 0
// if event = 120 then
62792: LD_VAR 0 1
62796: PUSH
62797: LD_INT 120
62799: EQUAL
62800: IFFALSE 62806
// MC_RepairVehicle ( ) ;
62802: CALL 76562 0 0
// if event = 121 then
62806: LD_VAR 0 1
62810: PUSH
62811: LD_INT 121
62813: EQUAL
62814: IFFALSE 62820
// MC_TameApe ( ) ;
62816: CALL 77303 0 0
// if event = 122 then
62820: LD_VAR 0 1
62824: PUSH
62825: LD_INT 122
62827: EQUAL
62828: IFFALSE 62834
// MC_ChangeApeClass ( ) ;
62830: CALL 78132 0 0
// if event = 123 then
62834: LD_VAR 0 1
62838: PUSH
62839: LD_INT 123
62841: EQUAL
62842: IFFALSE 62848
// MC_Bazooka ( ) ;
62844: CALL 78782 0 0
// if event = 124 then
62848: LD_VAR 0 1
62852: PUSH
62853: LD_INT 124
62855: EQUAL
62856: IFFALSE 62862
// MC_TeleportExit ( ) ;
62858: CALL 78980 0 0
// if event = 125 then
62862: LD_VAR 0 1
62866: PUSH
62867: LD_INT 125
62869: EQUAL
62870: IFFALSE 62876
// MC_Deposits ( ) ;
62872: CALL 79627 0 0
// if event = 126 then
62876: LD_VAR 0 1
62880: PUSH
62881: LD_INT 126
62883: EQUAL
62884: IFFALSE 62890
// MC_RemoteDriver ( ) ;
62886: CALL 80252 0 0
// if event = 200 then
62890: LD_VAR 0 1
62894: PUSH
62895: LD_INT 200
62897: EQUAL
62898: IFFALSE 62904
// MC_Idle ( ) ;
62900: CALL 82201 0 0
// end ;
62904: PPOPN 1
62906: END
// export function MC_Reset ( base , tag ) ; var i ; begin
62907: LD_INT 0
62909: PPUSH
62910: PPUSH
// if not mc_bases [ base ] or not tag then
62911: LD_EXP 50
62915: PUSH
62916: LD_VAR 0 1
62920: ARRAY
62921: NOT
62922: PUSH
62923: LD_VAR 0 2
62927: NOT
62928: OR
62929: IFFALSE 62933
// exit ;
62931: GO 62997
// for i in mc_bases [ base ] union mc_ape [ base ] do
62933: LD_ADDR_VAR 0 4
62937: PUSH
62938: LD_EXP 50
62942: PUSH
62943: LD_VAR 0 1
62947: ARRAY
62948: PUSH
62949: LD_EXP 79
62953: PUSH
62954: LD_VAR 0 1
62958: ARRAY
62959: UNION
62960: PUSH
62961: FOR_IN
62962: IFFALSE 62995
// if GetTag ( i ) = tag then
62964: LD_VAR 0 4
62968: PPUSH
62969: CALL_OW 110
62973: PUSH
62974: LD_VAR 0 2
62978: EQUAL
62979: IFFALSE 62993
// SetTag ( i , 0 ) ;
62981: LD_VAR 0 4
62985: PPUSH
62986: LD_INT 0
62988: PPUSH
62989: CALL_OW 109
62993: GO 62961
62995: POP
62996: POP
// end ;
62997: LD_VAR 0 3
63001: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
63002: LD_INT 0
63004: PPUSH
63005: PPUSH
63006: PPUSH
63007: PPUSH
63008: PPUSH
63009: PPUSH
63010: PPUSH
63011: PPUSH
// if not mc_bases then
63012: LD_EXP 50
63016: NOT
63017: IFFALSE 63021
// exit ;
63019: GO 63479
// for i = 1 to mc_bases do
63021: LD_ADDR_VAR 0 2
63025: PUSH
63026: DOUBLE
63027: LD_INT 1
63029: DEC
63030: ST_TO_ADDR
63031: LD_EXP 50
63035: PUSH
63036: FOR_TO
63037: IFFALSE 63477
// begin tmp := MC_ClassCheckReq ( i ) ;
63039: LD_ADDR_VAR 0 4
63043: PUSH
63044: LD_VAR 0 2
63048: PPUSH
63049: CALL 63484 0 1
63053: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
63054: LD_ADDR_EXP 91
63058: PUSH
63059: LD_EXP 91
63063: PPUSH
63064: LD_VAR 0 2
63068: PPUSH
63069: LD_VAR 0 4
63073: PPUSH
63074: CALL_OW 1
63078: ST_TO_ADDR
// if not tmp then
63079: LD_VAR 0 4
63083: NOT
63084: IFFALSE 63088
// continue ;
63086: GO 63036
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
63088: LD_ADDR_VAR 0 6
63092: PUSH
63093: LD_EXP 50
63097: PUSH
63098: LD_VAR 0 2
63102: ARRAY
63103: PPUSH
63104: LD_INT 2
63106: PUSH
63107: LD_INT 30
63109: PUSH
63110: LD_INT 4
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: LD_INT 30
63119: PUSH
63120: LD_INT 5
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: LIST
63131: PPUSH
63132: CALL_OW 72
63136: PUSH
63137: LD_EXP 50
63141: PUSH
63142: LD_VAR 0 2
63146: ARRAY
63147: PPUSH
63148: LD_INT 2
63150: PUSH
63151: LD_INT 30
63153: PUSH
63154: LD_INT 0
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: PUSH
63161: LD_INT 30
63163: PUSH
63164: LD_INT 1
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: LIST
63175: PPUSH
63176: CALL_OW 72
63180: PUSH
63181: LD_EXP 50
63185: PUSH
63186: LD_VAR 0 2
63190: ARRAY
63191: PPUSH
63192: LD_INT 30
63194: PUSH
63195: LD_INT 3
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PPUSH
63202: CALL_OW 72
63206: PUSH
63207: LD_EXP 50
63211: PUSH
63212: LD_VAR 0 2
63216: ARRAY
63217: PPUSH
63218: LD_INT 2
63220: PUSH
63221: LD_INT 30
63223: PUSH
63224: LD_INT 6
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 30
63233: PUSH
63234: LD_INT 7
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 30
63243: PUSH
63244: LD_INT 8
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: PPUSH
63257: CALL_OW 72
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: ST_TO_ADDR
// for j = 1 to 4 do
63268: LD_ADDR_VAR 0 3
63272: PUSH
63273: DOUBLE
63274: LD_INT 1
63276: DEC
63277: ST_TO_ADDR
63278: LD_INT 4
63280: PUSH
63281: FOR_TO
63282: IFFALSE 63473
// begin if not tmp [ j ] then
63284: LD_VAR 0 4
63288: PUSH
63289: LD_VAR 0 3
63293: ARRAY
63294: NOT
63295: IFFALSE 63299
// continue ;
63297: GO 63281
// for p in tmp [ j ] do
63299: LD_ADDR_VAR 0 5
63303: PUSH
63304: LD_VAR 0 4
63308: PUSH
63309: LD_VAR 0 3
63313: ARRAY
63314: PUSH
63315: FOR_IN
63316: IFFALSE 63469
// begin if not b [ j ] then
63318: LD_VAR 0 6
63322: PUSH
63323: LD_VAR 0 3
63327: ARRAY
63328: NOT
63329: IFFALSE 63333
// break ;
63331: GO 63469
// e := 0 ;
63333: LD_ADDR_VAR 0 7
63337: PUSH
63338: LD_INT 0
63340: ST_TO_ADDR
// for k in b [ j ] do
63341: LD_ADDR_VAR 0 8
63345: PUSH
63346: LD_VAR 0 6
63350: PUSH
63351: LD_VAR 0 3
63355: ARRAY
63356: PUSH
63357: FOR_IN
63358: IFFALSE 63385
// if IsNotFull ( k ) then
63360: LD_VAR 0 8
63364: PPUSH
63365: CALL 21927 0 1
63369: IFFALSE 63383
// begin e := k ;
63371: LD_ADDR_VAR 0 7
63375: PUSH
63376: LD_VAR 0 8
63380: ST_TO_ADDR
// break ;
63381: GO 63385
// end ;
63383: GO 63357
63385: POP
63386: POP
// if e and not UnitGoingToBuilding ( p , e ) then
63387: LD_VAR 0 7
63391: PUSH
63392: LD_VAR 0 5
63396: PPUSH
63397: LD_VAR 0 7
63401: PPUSH
63402: CALL 55091 0 2
63406: NOT
63407: AND
63408: IFFALSE 63467
// begin if IsInUnit ( p ) then
63410: LD_VAR 0 5
63414: PPUSH
63415: CALL_OW 310
63419: IFFALSE 63430
// ComExitBuilding ( p ) ;
63421: LD_VAR 0 5
63425: PPUSH
63426: CALL_OW 122
// ComEnterUnit ( p , e ) ;
63430: LD_VAR 0 5
63434: PPUSH
63435: LD_VAR 0 7
63439: PPUSH
63440: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
63444: LD_VAR 0 5
63448: PPUSH
63449: LD_VAR 0 3
63453: PPUSH
63454: CALL_OW 183
// AddComExitBuilding ( p ) ;
63458: LD_VAR 0 5
63462: PPUSH
63463: CALL_OW 182
// end ; end ;
63467: GO 63315
63469: POP
63470: POP
// end ;
63471: GO 63281
63473: POP
63474: POP
// end ;
63475: GO 63036
63477: POP
63478: POP
// end ;
63479: LD_VAR 0 1
63483: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
63484: LD_INT 0
63486: PPUSH
63487: PPUSH
63488: PPUSH
63489: PPUSH
63490: PPUSH
63491: PPUSH
63492: PPUSH
63493: PPUSH
63494: PPUSH
63495: PPUSH
63496: PPUSH
63497: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
63498: LD_VAR 0 1
63502: NOT
63503: PUSH
63504: LD_EXP 50
63508: PUSH
63509: LD_VAR 0 1
63513: ARRAY
63514: NOT
63515: OR
63516: PUSH
63517: LD_EXP 50
63521: PUSH
63522: LD_VAR 0 1
63526: ARRAY
63527: PPUSH
63528: LD_INT 2
63530: PUSH
63531: LD_INT 30
63533: PUSH
63534: LD_INT 0
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 30
63543: PUSH
63544: LD_INT 1
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: LIST
63555: PPUSH
63556: CALL_OW 72
63560: NOT
63561: OR
63562: IFFALSE 63566
// exit ;
63564: GO 67069
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
63566: LD_ADDR_VAR 0 4
63570: PUSH
63571: LD_EXP 50
63575: PUSH
63576: LD_VAR 0 1
63580: ARRAY
63581: PPUSH
63582: LD_INT 2
63584: PUSH
63585: LD_INT 25
63587: PUSH
63588: LD_INT 1
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 25
63597: PUSH
63598: LD_INT 2
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 25
63607: PUSH
63608: LD_INT 3
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 25
63617: PUSH
63618: LD_INT 4
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 25
63627: PUSH
63628: LD_INT 5
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 25
63637: PUSH
63638: LD_INT 8
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 25
63647: PUSH
63648: LD_INT 9
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: PPUSH
63665: CALL_OW 72
63669: ST_TO_ADDR
// if not tmp then
63670: LD_VAR 0 4
63674: NOT
63675: IFFALSE 63679
// exit ;
63677: GO 67069
// for i in tmp do
63679: LD_ADDR_VAR 0 3
63683: PUSH
63684: LD_VAR 0 4
63688: PUSH
63689: FOR_IN
63690: IFFALSE 63721
// if GetTag ( i ) then
63692: LD_VAR 0 3
63696: PPUSH
63697: CALL_OW 110
63701: IFFALSE 63719
// tmp := tmp diff i ;
63703: LD_ADDR_VAR 0 4
63707: PUSH
63708: LD_VAR 0 4
63712: PUSH
63713: LD_VAR 0 3
63717: DIFF
63718: ST_TO_ADDR
63719: GO 63689
63721: POP
63722: POP
// if not tmp then
63723: LD_VAR 0 4
63727: NOT
63728: IFFALSE 63732
// exit ;
63730: GO 67069
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
63732: LD_ADDR_VAR 0 5
63736: PUSH
63737: LD_EXP 50
63741: PUSH
63742: LD_VAR 0 1
63746: ARRAY
63747: PPUSH
63748: LD_INT 2
63750: PUSH
63751: LD_INT 25
63753: PUSH
63754: LD_INT 1
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 25
63763: PUSH
63764: LD_INT 5
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 25
63773: PUSH
63774: LD_INT 8
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 25
63783: PUSH
63784: LD_INT 9
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: PPUSH
63798: CALL_OW 72
63802: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
63803: LD_ADDR_VAR 0 6
63807: PUSH
63808: LD_EXP 50
63812: PUSH
63813: LD_VAR 0 1
63817: ARRAY
63818: PPUSH
63819: LD_INT 25
63821: PUSH
63822: LD_INT 2
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PPUSH
63829: CALL_OW 72
63833: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
63834: LD_ADDR_VAR 0 7
63838: PUSH
63839: LD_EXP 50
63843: PUSH
63844: LD_VAR 0 1
63848: ARRAY
63849: PPUSH
63850: LD_INT 25
63852: PUSH
63853: LD_INT 3
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PPUSH
63860: CALL_OW 72
63864: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
63865: LD_ADDR_VAR 0 8
63869: PUSH
63870: LD_EXP 50
63874: PUSH
63875: LD_VAR 0 1
63879: ARRAY
63880: PPUSH
63881: LD_INT 25
63883: PUSH
63884: LD_INT 4
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 24
63893: PUSH
63894: LD_INT 251
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PPUSH
63905: CALL_OW 72
63909: ST_TO_ADDR
// if mc_is_defending [ base ] then
63910: LD_EXP 93
63914: PUSH
63915: LD_VAR 0 1
63919: ARRAY
63920: IFFALSE 64381
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
63922: LD_ADDR_EXP 92
63926: PUSH
63927: LD_EXP 92
63931: PPUSH
63932: LD_VAR 0 1
63936: PPUSH
63937: LD_INT 4
63939: PPUSH
63940: CALL_OW 1
63944: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
63945: LD_ADDR_VAR 0 12
63949: PUSH
63950: LD_EXP 50
63954: PUSH
63955: LD_VAR 0 1
63959: ARRAY
63960: PPUSH
63961: LD_INT 2
63963: PUSH
63964: LD_INT 30
63966: PUSH
63967: LD_INT 4
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 30
63976: PUSH
63977: LD_INT 5
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: LIST
63988: PPUSH
63989: CALL_OW 72
63993: ST_TO_ADDR
// if not b then
63994: LD_VAR 0 12
63998: NOT
63999: IFFALSE 64003
// exit ;
64001: GO 67069
// p := [ ] ;
64003: LD_ADDR_VAR 0 11
64007: PUSH
64008: EMPTY
64009: ST_TO_ADDR
// if sci >= 2 then
64010: LD_VAR 0 8
64014: PUSH
64015: LD_INT 2
64017: GREATEREQUAL
64018: IFFALSE 64049
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
64020: LD_ADDR_VAR 0 8
64024: PUSH
64025: LD_VAR 0 8
64029: PUSH
64030: LD_INT 1
64032: ARRAY
64033: PUSH
64034: LD_VAR 0 8
64038: PUSH
64039: LD_INT 2
64041: ARRAY
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: ST_TO_ADDR
64047: GO 64110
// if sci = 1 then
64049: LD_VAR 0 8
64053: PUSH
64054: LD_INT 1
64056: EQUAL
64057: IFFALSE 64078
// sci := [ sci [ 1 ] ] else
64059: LD_ADDR_VAR 0 8
64063: PUSH
64064: LD_VAR 0 8
64068: PUSH
64069: LD_INT 1
64071: ARRAY
64072: PUSH
64073: EMPTY
64074: LIST
64075: ST_TO_ADDR
64076: GO 64110
// if sci = 0 then
64078: LD_VAR 0 8
64082: PUSH
64083: LD_INT 0
64085: EQUAL
64086: IFFALSE 64110
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
64088: LD_ADDR_VAR 0 11
64092: PUSH
64093: LD_VAR 0 4
64097: PPUSH
64098: LD_INT 4
64100: PPUSH
64101: CALL 54954 0 2
64105: PUSH
64106: LD_INT 1
64108: ARRAY
64109: ST_TO_ADDR
// if eng > 4 then
64110: LD_VAR 0 6
64114: PUSH
64115: LD_INT 4
64117: GREATER
64118: IFFALSE 64164
// for i = eng downto 4 do
64120: LD_ADDR_VAR 0 3
64124: PUSH
64125: DOUBLE
64126: LD_VAR 0 6
64130: INC
64131: ST_TO_ADDR
64132: LD_INT 4
64134: PUSH
64135: FOR_DOWNTO
64136: IFFALSE 64162
// eng := eng diff eng [ i ] ;
64138: LD_ADDR_VAR 0 6
64142: PUSH
64143: LD_VAR 0 6
64147: PUSH
64148: LD_VAR 0 6
64152: PUSH
64153: LD_VAR 0 3
64157: ARRAY
64158: DIFF
64159: ST_TO_ADDR
64160: GO 64135
64162: POP
64163: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
64164: LD_ADDR_VAR 0 4
64168: PUSH
64169: LD_VAR 0 4
64173: PUSH
64174: LD_VAR 0 5
64178: PUSH
64179: LD_VAR 0 6
64183: UNION
64184: PUSH
64185: LD_VAR 0 7
64189: UNION
64190: PUSH
64191: LD_VAR 0 8
64195: UNION
64196: DIFF
64197: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
64198: LD_ADDR_VAR 0 13
64202: PUSH
64203: LD_EXP 50
64207: PUSH
64208: LD_VAR 0 1
64212: ARRAY
64213: PPUSH
64214: LD_INT 2
64216: PUSH
64217: LD_INT 30
64219: PUSH
64220: LD_INT 32
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 30
64229: PUSH
64230: LD_INT 31
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: LIST
64241: PPUSH
64242: CALL_OW 72
64246: PUSH
64247: LD_EXP 50
64251: PUSH
64252: LD_VAR 0 1
64256: ARRAY
64257: PPUSH
64258: LD_INT 2
64260: PUSH
64261: LD_INT 30
64263: PUSH
64264: LD_INT 4
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: LD_INT 30
64273: PUSH
64274: LD_INT 5
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: LIST
64285: PPUSH
64286: CALL_OW 72
64290: PUSH
64291: LD_INT 6
64293: MUL
64294: PLUS
64295: ST_TO_ADDR
// if bcount < tmp then
64296: LD_VAR 0 13
64300: PUSH
64301: LD_VAR 0 4
64305: LESS
64306: IFFALSE 64352
// for i = tmp downto bcount do
64308: LD_ADDR_VAR 0 3
64312: PUSH
64313: DOUBLE
64314: LD_VAR 0 4
64318: INC
64319: ST_TO_ADDR
64320: LD_VAR 0 13
64324: PUSH
64325: FOR_DOWNTO
64326: IFFALSE 64350
// tmp := Delete ( tmp , tmp ) ;
64328: LD_ADDR_VAR 0 4
64332: PUSH
64333: LD_VAR 0 4
64337: PPUSH
64338: LD_VAR 0 4
64342: PPUSH
64343: CALL_OW 3
64347: ST_TO_ADDR
64348: GO 64325
64350: POP
64351: POP
// result := [ tmp , 0 , 0 , p ] ;
64352: LD_ADDR_VAR 0 2
64356: PUSH
64357: LD_VAR 0 4
64361: PUSH
64362: LD_INT 0
64364: PUSH
64365: LD_INT 0
64367: PUSH
64368: LD_VAR 0 11
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: ST_TO_ADDR
// exit ;
64379: GO 67069
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
64381: LD_EXP 50
64385: PUSH
64386: LD_VAR 0 1
64390: ARRAY
64391: PPUSH
64392: LD_INT 2
64394: PUSH
64395: LD_INT 30
64397: PUSH
64398: LD_INT 6
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 30
64407: PUSH
64408: LD_INT 7
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 30
64417: PUSH
64418: LD_INT 8
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: PPUSH
64431: CALL_OW 72
64435: NOT
64436: PUSH
64437: LD_EXP 50
64441: PUSH
64442: LD_VAR 0 1
64446: ARRAY
64447: PPUSH
64448: LD_INT 30
64450: PUSH
64451: LD_INT 3
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PPUSH
64458: CALL_OW 72
64462: NOT
64463: AND
64464: IFFALSE 64536
// begin if eng = tmp then
64466: LD_VAR 0 6
64470: PUSH
64471: LD_VAR 0 4
64475: EQUAL
64476: IFFALSE 64480
// exit ;
64478: GO 67069
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
64480: LD_ADDR_EXP 92
64484: PUSH
64485: LD_EXP 92
64489: PPUSH
64490: LD_VAR 0 1
64494: PPUSH
64495: LD_INT 1
64497: PPUSH
64498: CALL_OW 1
64502: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
64503: LD_ADDR_VAR 0 2
64507: PUSH
64508: LD_INT 0
64510: PUSH
64511: LD_VAR 0 4
64515: PUSH
64516: LD_VAR 0 6
64520: DIFF
64521: PUSH
64522: LD_INT 0
64524: PUSH
64525: LD_INT 0
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: ST_TO_ADDR
// exit ;
64534: GO 67069
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
64536: LD_EXP 77
64540: PUSH
64541: LD_EXP 76
64545: PUSH
64546: LD_VAR 0 1
64550: ARRAY
64551: ARRAY
64552: PUSH
64553: LD_EXP 50
64557: PUSH
64558: LD_VAR 0 1
64562: ARRAY
64563: PPUSH
64564: LD_INT 2
64566: PUSH
64567: LD_INT 30
64569: PUSH
64570: LD_INT 6
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 30
64579: PUSH
64580: LD_INT 7
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 30
64589: PUSH
64590: LD_INT 8
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: PPUSH
64603: CALL_OW 72
64607: AND
64608: PUSH
64609: LD_EXP 50
64613: PUSH
64614: LD_VAR 0 1
64618: ARRAY
64619: PPUSH
64620: LD_INT 30
64622: PUSH
64623: LD_INT 3
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PPUSH
64630: CALL_OW 72
64634: NOT
64635: AND
64636: IFFALSE 64850
// begin if sci >= 6 then
64638: LD_VAR 0 8
64642: PUSH
64643: LD_INT 6
64645: GREATEREQUAL
64646: IFFALSE 64650
// exit ;
64648: GO 67069
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
64650: LD_ADDR_EXP 92
64654: PUSH
64655: LD_EXP 92
64659: PPUSH
64660: LD_VAR 0 1
64664: PPUSH
64665: LD_INT 2
64667: PPUSH
64668: CALL_OW 1
64672: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
64673: LD_ADDR_VAR 0 9
64677: PUSH
64678: LD_VAR 0 4
64682: PUSH
64683: LD_VAR 0 8
64687: DIFF
64688: PPUSH
64689: LD_INT 4
64691: PPUSH
64692: CALL 54954 0 2
64696: ST_TO_ADDR
// p := [ ] ;
64697: LD_ADDR_VAR 0 11
64701: PUSH
64702: EMPTY
64703: ST_TO_ADDR
// if sci < 6 and sort > 6 then
64704: LD_VAR 0 8
64708: PUSH
64709: LD_INT 6
64711: LESS
64712: PUSH
64713: LD_VAR 0 9
64717: PUSH
64718: LD_INT 6
64720: GREATER
64721: AND
64722: IFFALSE 64803
// begin for i = 1 to 6 - sci do
64724: LD_ADDR_VAR 0 3
64728: PUSH
64729: DOUBLE
64730: LD_INT 1
64732: DEC
64733: ST_TO_ADDR
64734: LD_INT 6
64736: PUSH
64737: LD_VAR 0 8
64741: MINUS
64742: PUSH
64743: FOR_TO
64744: IFFALSE 64799
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
64746: LD_ADDR_VAR 0 11
64750: PUSH
64751: LD_VAR 0 11
64755: PPUSH
64756: LD_VAR 0 11
64760: PUSH
64761: LD_INT 1
64763: PLUS
64764: PPUSH
64765: LD_VAR 0 9
64769: PUSH
64770: LD_INT 1
64772: ARRAY
64773: PPUSH
64774: CALL_OW 2
64778: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
64779: LD_ADDR_VAR 0 9
64783: PUSH
64784: LD_VAR 0 9
64788: PPUSH
64789: LD_INT 1
64791: PPUSH
64792: CALL_OW 3
64796: ST_TO_ADDR
// end ;
64797: GO 64743
64799: POP
64800: POP
// end else
64801: GO 64823
// if sort then
64803: LD_VAR 0 9
64807: IFFALSE 64823
// p := sort [ 1 ] ;
64809: LD_ADDR_VAR 0 11
64813: PUSH
64814: LD_VAR 0 9
64818: PUSH
64819: LD_INT 1
64821: ARRAY
64822: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
64823: LD_ADDR_VAR 0 2
64827: PUSH
64828: LD_INT 0
64830: PUSH
64831: LD_INT 0
64833: PUSH
64834: LD_INT 0
64836: PUSH
64837: LD_VAR 0 11
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: ST_TO_ADDR
// exit ;
64848: GO 67069
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
64850: LD_EXP 77
64854: PUSH
64855: LD_EXP 76
64859: PUSH
64860: LD_VAR 0 1
64864: ARRAY
64865: ARRAY
64866: PUSH
64867: LD_EXP 50
64871: PUSH
64872: LD_VAR 0 1
64876: ARRAY
64877: PPUSH
64878: LD_INT 2
64880: PUSH
64881: LD_INT 30
64883: PUSH
64884: LD_INT 6
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 30
64893: PUSH
64894: LD_INT 7
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 30
64903: PUSH
64904: LD_INT 8
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: PPUSH
64917: CALL_OW 72
64921: AND
64922: PUSH
64923: LD_EXP 50
64927: PUSH
64928: LD_VAR 0 1
64932: ARRAY
64933: PPUSH
64934: LD_INT 30
64936: PUSH
64937: LD_INT 3
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PPUSH
64944: CALL_OW 72
64948: AND
64949: IFFALSE 65683
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
64951: LD_ADDR_EXP 92
64955: PUSH
64956: LD_EXP 92
64960: PPUSH
64961: LD_VAR 0 1
64965: PPUSH
64966: LD_INT 3
64968: PPUSH
64969: CALL_OW 1
64973: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
64974: LD_ADDR_VAR 0 2
64978: PUSH
64979: LD_INT 0
64981: PUSH
64982: LD_INT 0
64984: PUSH
64985: LD_INT 0
64987: PUSH
64988: LD_INT 0
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: ST_TO_ADDR
// if not eng then
64997: LD_VAR 0 6
65001: NOT
65002: IFFALSE 65065
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
65004: LD_ADDR_VAR 0 11
65008: PUSH
65009: LD_VAR 0 4
65013: PPUSH
65014: LD_INT 2
65016: PPUSH
65017: CALL 54954 0 2
65021: PUSH
65022: LD_INT 1
65024: ARRAY
65025: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
65026: LD_ADDR_VAR 0 2
65030: PUSH
65031: LD_VAR 0 2
65035: PPUSH
65036: LD_INT 2
65038: PPUSH
65039: LD_VAR 0 11
65043: PPUSH
65044: CALL_OW 1
65048: ST_TO_ADDR
// tmp := tmp diff p ;
65049: LD_ADDR_VAR 0 4
65053: PUSH
65054: LD_VAR 0 4
65058: PUSH
65059: LD_VAR 0 11
65063: DIFF
65064: ST_TO_ADDR
// end ; if tmp and sci < 6 then
65065: LD_VAR 0 4
65069: PUSH
65070: LD_VAR 0 8
65074: PUSH
65075: LD_INT 6
65077: LESS
65078: AND
65079: IFFALSE 65267
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
65081: LD_ADDR_VAR 0 9
65085: PUSH
65086: LD_VAR 0 4
65090: PUSH
65091: LD_VAR 0 8
65095: PUSH
65096: LD_VAR 0 7
65100: UNION
65101: DIFF
65102: PPUSH
65103: LD_INT 4
65105: PPUSH
65106: CALL 54954 0 2
65110: ST_TO_ADDR
// p := [ ] ;
65111: LD_ADDR_VAR 0 11
65115: PUSH
65116: EMPTY
65117: ST_TO_ADDR
// if sort then
65118: LD_VAR 0 9
65122: IFFALSE 65238
// for i = 1 to 6 - sci do
65124: LD_ADDR_VAR 0 3
65128: PUSH
65129: DOUBLE
65130: LD_INT 1
65132: DEC
65133: ST_TO_ADDR
65134: LD_INT 6
65136: PUSH
65137: LD_VAR 0 8
65141: MINUS
65142: PUSH
65143: FOR_TO
65144: IFFALSE 65236
// begin if i = sort then
65146: LD_VAR 0 3
65150: PUSH
65151: LD_VAR 0 9
65155: EQUAL
65156: IFFALSE 65160
// break ;
65158: GO 65236
// if GetClass ( i ) = 4 then
65160: LD_VAR 0 3
65164: PPUSH
65165: CALL_OW 257
65169: PUSH
65170: LD_INT 4
65172: EQUAL
65173: IFFALSE 65177
// continue ;
65175: GO 65143
// p := Insert ( p , p + 1 , sort [ i ] ) ;
65177: LD_ADDR_VAR 0 11
65181: PUSH
65182: LD_VAR 0 11
65186: PPUSH
65187: LD_VAR 0 11
65191: PUSH
65192: LD_INT 1
65194: PLUS
65195: PPUSH
65196: LD_VAR 0 9
65200: PUSH
65201: LD_VAR 0 3
65205: ARRAY
65206: PPUSH
65207: CALL_OW 2
65211: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
65212: LD_ADDR_VAR 0 4
65216: PUSH
65217: LD_VAR 0 4
65221: PUSH
65222: LD_VAR 0 9
65226: PUSH
65227: LD_VAR 0 3
65231: ARRAY
65232: DIFF
65233: ST_TO_ADDR
// end ;
65234: GO 65143
65236: POP
65237: POP
// if p then
65238: LD_VAR 0 11
65242: IFFALSE 65267
// result := Replace ( result , 4 , p ) ;
65244: LD_ADDR_VAR 0 2
65248: PUSH
65249: LD_VAR 0 2
65253: PPUSH
65254: LD_INT 4
65256: PPUSH
65257: LD_VAR 0 11
65261: PPUSH
65262: CALL_OW 1
65266: ST_TO_ADDR
// end ; if tmp and mech < 6 then
65267: LD_VAR 0 4
65271: PUSH
65272: LD_VAR 0 7
65276: PUSH
65277: LD_INT 6
65279: LESS
65280: AND
65281: IFFALSE 65469
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
65283: LD_ADDR_VAR 0 9
65287: PUSH
65288: LD_VAR 0 4
65292: PUSH
65293: LD_VAR 0 8
65297: PUSH
65298: LD_VAR 0 7
65302: UNION
65303: DIFF
65304: PPUSH
65305: LD_INT 3
65307: PPUSH
65308: CALL 54954 0 2
65312: ST_TO_ADDR
// p := [ ] ;
65313: LD_ADDR_VAR 0 11
65317: PUSH
65318: EMPTY
65319: ST_TO_ADDR
// if sort then
65320: LD_VAR 0 9
65324: IFFALSE 65440
// for i = 1 to 6 - mech do
65326: LD_ADDR_VAR 0 3
65330: PUSH
65331: DOUBLE
65332: LD_INT 1
65334: DEC
65335: ST_TO_ADDR
65336: LD_INT 6
65338: PUSH
65339: LD_VAR 0 7
65343: MINUS
65344: PUSH
65345: FOR_TO
65346: IFFALSE 65438
// begin if i = sort then
65348: LD_VAR 0 3
65352: PUSH
65353: LD_VAR 0 9
65357: EQUAL
65358: IFFALSE 65362
// break ;
65360: GO 65438
// if GetClass ( i ) = 3 then
65362: LD_VAR 0 3
65366: PPUSH
65367: CALL_OW 257
65371: PUSH
65372: LD_INT 3
65374: EQUAL
65375: IFFALSE 65379
// continue ;
65377: GO 65345
// p := Insert ( p , p + 1 , sort [ i ] ) ;
65379: LD_ADDR_VAR 0 11
65383: PUSH
65384: LD_VAR 0 11
65388: PPUSH
65389: LD_VAR 0 11
65393: PUSH
65394: LD_INT 1
65396: PLUS
65397: PPUSH
65398: LD_VAR 0 9
65402: PUSH
65403: LD_VAR 0 3
65407: ARRAY
65408: PPUSH
65409: CALL_OW 2
65413: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
65414: LD_ADDR_VAR 0 4
65418: PUSH
65419: LD_VAR 0 4
65423: PUSH
65424: LD_VAR 0 9
65428: PUSH
65429: LD_VAR 0 3
65433: ARRAY
65434: DIFF
65435: ST_TO_ADDR
// end ;
65436: GO 65345
65438: POP
65439: POP
// if p then
65440: LD_VAR 0 11
65444: IFFALSE 65469
// result := Replace ( result , 3 , p ) ;
65446: LD_ADDR_VAR 0 2
65450: PUSH
65451: LD_VAR 0 2
65455: PPUSH
65456: LD_INT 3
65458: PPUSH
65459: LD_VAR 0 11
65463: PPUSH
65464: CALL_OW 1
65468: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
65469: LD_VAR 0 4
65473: PUSH
65474: LD_INT 6
65476: GREATER
65477: PUSH
65478: LD_VAR 0 6
65482: PUSH
65483: LD_INT 6
65485: LESS
65486: AND
65487: IFFALSE 65681
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
65489: LD_ADDR_VAR 0 9
65493: PUSH
65494: LD_VAR 0 4
65498: PUSH
65499: LD_VAR 0 8
65503: PUSH
65504: LD_VAR 0 7
65508: UNION
65509: PUSH
65510: LD_VAR 0 6
65514: UNION
65515: DIFF
65516: PPUSH
65517: LD_INT 2
65519: PPUSH
65520: CALL 54954 0 2
65524: ST_TO_ADDR
// p := [ ] ;
65525: LD_ADDR_VAR 0 11
65529: PUSH
65530: EMPTY
65531: ST_TO_ADDR
// if sort then
65532: LD_VAR 0 9
65536: IFFALSE 65652
// for i = 1 to 6 - eng do
65538: LD_ADDR_VAR 0 3
65542: PUSH
65543: DOUBLE
65544: LD_INT 1
65546: DEC
65547: ST_TO_ADDR
65548: LD_INT 6
65550: PUSH
65551: LD_VAR 0 6
65555: MINUS
65556: PUSH
65557: FOR_TO
65558: IFFALSE 65650
// begin if i = sort then
65560: LD_VAR 0 3
65564: PUSH
65565: LD_VAR 0 9
65569: EQUAL
65570: IFFALSE 65574
// break ;
65572: GO 65650
// if GetClass ( i ) = 2 then
65574: LD_VAR 0 3
65578: PPUSH
65579: CALL_OW 257
65583: PUSH
65584: LD_INT 2
65586: EQUAL
65587: IFFALSE 65591
// continue ;
65589: GO 65557
// p := Insert ( p , p + 1 , sort [ i ] ) ;
65591: LD_ADDR_VAR 0 11
65595: PUSH
65596: LD_VAR 0 11
65600: PPUSH
65601: LD_VAR 0 11
65605: PUSH
65606: LD_INT 1
65608: PLUS
65609: PPUSH
65610: LD_VAR 0 9
65614: PUSH
65615: LD_VAR 0 3
65619: ARRAY
65620: PPUSH
65621: CALL_OW 2
65625: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
65626: LD_ADDR_VAR 0 4
65630: PUSH
65631: LD_VAR 0 4
65635: PUSH
65636: LD_VAR 0 9
65640: PUSH
65641: LD_VAR 0 3
65645: ARRAY
65646: DIFF
65647: ST_TO_ADDR
// end ;
65648: GO 65557
65650: POP
65651: POP
// if p then
65652: LD_VAR 0 11
65656: IFFALSE 65681
// result := Replace ( result , 2 , p ) ;
65658: LD_ADDR_VAR 0 2
65662: PUSH
65663: LD_VAR 0 2
65667: PPUSH
65668: LD_INT 2
65670: PPUSH
65671: LD_VAR 0 11
65675: PPUSH
65676: CALL_OW 1
65680: ST_TO_ADDR
// end ; exit ;
65681: GO 67069
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
65683: LD_EXP 77
65687: PUSH
65688: LD_EXP 76
65692: PUSH
65693: LD_VAR 0 1
65697: ARRAY
65698: ARRAY
65699: NOT
65700: PUSH
65701: LD_EXP 50
65705: PUSH
65706: LD_VAR 0 1
65710: ARRAY
65711: PPUSH
65712: LD_INT 30
65714: PUSH
65715: LD_INT 3
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PPUSH
65722: CALL_OW 72
65726: AND
65727: PUSH
65728: LD_EXP 55
65732: PUSH
65733: LD_VAR 0 1
65737: ARRAY
65738: AND
65739: IFFALSE 66347
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
65741: LD_ADDR_EXP 92
65745: PUSH
65746: LD_EXP 92
65750: PPUSH
65751: LD_VAR 0 1
65755: PPUSH
65756: LD_INT 5
65758: PPUSH
65759: CALL_OW 1
65763: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
65764: LD_ADDR_VAR 0 2
65768: PUSH
65769: LD_INT 0
65771: PUSH
65772: LD_INT 0
65774: PUSH
65775: LD_INT 0
65777: PUSH
65778: LD_INT 0
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: ST_TO_ADDR
// if sci > 1 then
65787: LD_VAR 0 8
65791: PUSH
65792: LD_INT 1
65794: GREATER
65795: IFFALSE 65823
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
65797: LD_ADDR_VAR 0 4
65801: PUSH
65802: LD_VAR 0 4
65806: PUSH
65807: LD_VAR 0 8
65811: PUSH
65812: LD_VAR 0 8
65816: PUSH
65817: LD_INT 1
65819: ARRAY
65820: DIFF
65821: DIFF
65822: ST_TO_ADDR
// if tmp and not sci then
65823: LD_VAR 0 4
65827: PUSH
65828: LD_VAR 0 8
65832: NOT
65833: AND
65834: IFFALSE 65903
// begin sort := SortBySkill ( tmp , 4 ) ;
65836: LD_ADDR_VAR 0 9
65840: PUSH
65841: LD_VAR 0 4
65845: PPUSH
65846: LD_INT 4
65848: PPUSH
65849: CALL 54954 0 2
65853: ST_TO_ADDR
// if sort then
65854: LD_VAR 0 9
65858: IFFALSE 65874
// p := sort [ 1 ] ;
65860: LD_ADDR_VAR 0 11
65864: PUSH
65865: LD_VAR 0 9
65869: PUSH
65870: LD_INT 1
65872: ARRAY
65873: ST_TO_ADDR
// if p then
65874: LD_VAR 0 11
65878: IFFALSE 65903
// result := Replace ( result , 4 , p ) ;
65880: LD_ADDR_VAR 0 2
65884: PUSH
65885: LD_VAR 0 2
65889: PPUSH
65890: LD_INT 4
65892: PPUSH
65893: LD_VAR 0 11
65897: PPUSH
65898: CALL_OW 1
65902: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
65903: LD_ADDR_VAR 0 4
65907: PUSH
65908: LD_VAR 0 4
65912: PUSH
65913: LD_VAR 0 7
65917: DIFF
65918: ST_TO_ADDR
// if tmp and mech < 6 then
65919: LD_VAR 0 4
65923: PUSH
65924: LD_VAR 0 7
65928: PUSH
65929: LD_INT 6
65931: LESS
65932: AND
65933: IFFALSE 66121
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
65935: LD_ADDR_VAR 0 9
65939: PUSH
65940: LD_VAR 0 4
65944: PUSH
65945: LD_VAR 0 8
65949: PUSH
65950: LD_VAR 0 7
65954: UNION
65955: DIFF
65956: PPUSH
65957: LD_INT 3
65959: PPUSH
65960: CALL 54954 0 2
65964: ST_TO_ADDR
// p := [ ] ;
65965: LD_ADDR_VAR 0 11
65969: PUSH
65970: EMPTY
65971: ST_TO_ADDR
// if sort then
65972: LD_VAR 0 9
65976: IFFALSE 66092
// for i = 1 to 6 - mech do
65978: LD_ADDR_VAR 0 3
65982: PUSH
65983: DOUBLE
65984: LD_INT 1
65986: DEC
65987: ST_TO_ADDR
65988: LD_INT 6
65990: PUSH
65991: LD_VAR 0 7
65995: MINUS
65996: PUSH
65997: FOR_TO
65998: IFFALSE 66090
// begin if i = sort then
66000: LD_VAR 0 3
66004: PUSH
66005: LD_VAR 0 9
66009: EQUAL
66010: IFFALSE 66014
// break ;
66012: GO 66090
// if GetClass ( i ) = 3 then
66014: LD_VAR 0 3
66018: PPUSH
66019: CALL_OW 257
66023: PUSH
66024: LD_INT 3
66026: EQUAL
66027: IFFALSE 66031
// continue ;
66029: GO 65997
// p := Insert ( p , p + 1 , sort [ i ] ) ;
66031: LD_ADDR_VAR 0 11
66035: PUSH
66036: LD_VAR 0 11
66040: PPUSH
66041: LD_VAR 0 11
66045: PUSH
66046: LD_INT 1
66048: PLUS
66049: PPUSH
66050: LD_VAR 0 9
66054: PUSH
66055: LD_VAR 0 3
66059: ARRAY
66060: PPUSH
66061: CALL_OW 2
66065: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
66066: LD_ADDR_VAR 0 4
66070: PUSH
66071: LD_VAR 0 4
66075: PUSH
66076: LD_VAR 0 9
66080: PUSH
66081: LD_VAR 0 3
66085: ARRAY
66086: DIFF
66087: ST_TO_ADDR
// end ;
66088: GO 65997
66090: POP
66091: POP
// if p then
66092: LD_VAR 0 11
66096: IFFALSE 66121
// result := Replace ( result , 3 , p ) ;
66098: LD_ADDR_VAR 0 2
66102: PUSH
66103: LD_VAR 0 2
66107: PPUSH
66108: LD_INT 3
66110: PPUSH
66111: LD_VAR 0 11
66115: PPUSH
66116: CALL_OW 1
66120: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
66121: LD_ADDR_VAR 0 4
66125: PUSH
66126: LD_VAR 0 4
66130: PUSH
66131: LD_VAR 0 6
66135: DIFF
66136: ST_TO_ADDR
// if tmp and eng < 6 then
66137: LD_VAR 0 4
66141: PUSH
66142: LD_VAR 0 6
66146: PUSH
66147: LD_INT 6
66149: LESS
66150: AND
66151: IFFALSE 66345
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
66153: LD_ADDR_VAR 0 9
66157: PUSH
66158: LD_VAR 0 4
66162: PUSH
66163: LD_VAR 0 8
66167: PUSH
66168: LD_VAR 0 7
66172: UNION
66173: PUSH
66174: LD_VAR 0 6
66178: UNION
66179: DIFF
66180: PPUSH
66181: LD_INT 2
66183: PPUSH
66184: CALL 54954 0 2
66188: ST_TO_ADDR
// p := [ ] ;
66189: LD_ADDR_VAR 0 11
66193: PUSH
66194: EMPTY
66195: ST_TO_ADDR
// if sort then
66196: LD_VAR 0 9
66200: IFFALSE 66316
// for i = 1 to 6 - eng do
66202: LD_ADDR_VAR 0 3
66206: PUSH
66207: DOUBLE
66208: LD_INT 1
66210: DEC
66211: ST_TO_ADDR
66212: LD_INT 6
66214: PUSH
66215: LD_VAR 0 6
66219: MINUS
66220: PUSH
66221: FOR_TO
66222: IFFALSE 66314
// begin if i = sort then
66224: LD_VAR 0 3
66228: PUSH
66229: LD_VAR 0 9
66233: EQUAL
66234: IFFALSE 66238
// break ;
66236: GO 66314
// if GetClass ( i ) = 2 then
66238: LD_VAR 0 3
66242: PPUSH
66243: CALL_OW 257
66247: PUSH
66248: LD_INT 2
66250: EQUAL
66251: IFFALSE 66255
// continue ;
66253: GO 66221
// p := Insert ( p , p + 1 , sort [ i ] ) ;
66255: LD_ADDR_VAR 0 11
66259: PUSH
66260: LD_VAR 0 11
66264: PPUSH
66265: LD_VAR 0 11
66269: PUSH
66270: LD_INT 1
66272: PLUS
66273: PPUSH
66274: LD_VAR 0 9
66278: PUSH
66279: LD_VAR 0 3
66283: ARRAY
66284: PPUSH
66285: CALL_OW 2
66289: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
66290: LD_ADDR_VAR 0 4
66294: PUSH
66295: LD_VAR 0 4
66299: PUSH
66300: LD_VAR 0 9
66304: PUSH
66305: LD_VAR 0 3
66309: ARRAY
66310: DIFF
66311: ST_TO_ADDR
// end ;
66312: GO 66221
66314: POP
66315: POP
// if p then
66316: LD_VAR 0 11
66320: IFFALSE 66345
// result := Replace ( result , 2 , p ) ;
66322: LD_ADDR_VAR 0 2
66326: PUSH
66327: LD_VAR 0 2
66331: PPUSH
66332: LD_INT 2
66334: PPUSH
66335: LD_VAR 0 11
66339: PPUSH
66340: CALL_OW 1
66344: ST_TO_ADDR
// end ; exit ;
66345: GO 67069
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
66347: LD_EXP 77
66351: PUSH
66352: LD_EXP 76
66356: PUSH
66357: LD_VAR 0 1
66361: ARRAY
66362: ARRAY
66363: NOT
66364: PUSH
66365: LD_EXP 50
66369: PUSH
66370: LD_VAR 0 1
66374: ARRAY
66375: PPUSH
66376: LD_INT 30
66378: PUSH
66379: LD_INT 3
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PPUSH
66386: CALL_OW 72
66390: AND
66391: PUSH
66392: LD_EXP 55
66396: PUSH
66397: LD_VAR 0 1
66401: ARRAY
66402: NOT
66403: AND
66404: IFFALSE 67069
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
66406: LD_ADDR_EXP 92
66410: PUSH
66411: LD_EXP 92
66415: PPUSH
66416: LD_VAR 0 1
66420: PPUSH
66421: LD_INT 6
66423: PPUSH
66424: CALL_OW 1
66428: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
66429: LD_ADDR_VAR 0 2
66433: PUSH
66434: LD_INT 0
66436: PUSH
66437: LD_INT 0
66439: PUSH
66440: LD_INT 0
66442: PUSH
66443: LD_INT 0
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: LIST
66450: LIST
66451: ST_TO_ADDR
// if sci >= 1 then
66452: LD_VAR 0 8
66456: PUSH
66457: LD_INT 1
66459: GREATEREQUAL
66460: IFFALSE 66482
// tmp := tmp diff sci [ 1 ] ;
66462: LD_ADDR_VAR 0 4
66466: PUSH
66467: LD_VAR 0 4
66471: PUSH
66472: LD_VAR 0 8
66476: PUSH
66477: LD_INT 1
66479: ARRAY
66480: DIFF
66481: ST_TO_ADDR
// if tmp and not sci then
66482: LD_VAR 0 4
66486: PUSH
66487: LD_VAR 0 8
66491: NOT
66492: AND
66493: IFFALSE 66562
// begin sort := SortBySkill ( tmp , 4 ) ;
66495: LD_ADDR_VAR 0 9
66499: PUSH
66500: LD_VAR 0 4
66504: PPUSH
66505: LD_INT 4
66507: PPUSH
66508: CALL 54954 0 2
66512: ST_TO_ADDR
// if sort then
66513: LD_VAR 0 9
66517: IFFALSE 66533
// p := sort [ 1 ] ;
66519: LD_ADDR_VAR 0 11
66523: PUSH
66524: LD_VAR 0 9
66528: PUSH
66529: LD_INT 1
66531: ARRAY
66532: ST_TO_ADDR
// if p then
66533: LD_VAR 0 11
66537: IFFALSE 66562
// result := Replace ( result , 4 , p ) ;
66539: LD_ADDR_VAR 0 2
66543: PUSH
66544: LD_VAR 0 2
66548: PPUSH
66549: LD_INT 4
66551: PPUSH
66552: LD_VAR 0 11
66556: PPUSH
66557: CALL_OW 1
66561: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
66562: LD_ADDR_VAR 0 4
66566: PUSH
66567: LD_VAR 0 4
66571: PUSH
66572: LD_VAR 0 7
66576: DIFF
66577: ST_TO_ADDR
// if tmp and mech < 6 then
66578: LD_VAR 0 4
66582: PUSH
66583: LD_VAR 0 7
66587: PUSH
66588: LD_INT 6
66590: LESS
66591: AND
66592: IFFALSE 66774
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
66594: LD_ADDR_VAR 0 9
66598: PUSH
66599: LD_VAR 0 4
66603: PUSH
66604: LD_VAR 0 7
66608: DIFF
66609: PPUSH
66610: LD_INT 3
66612: PPUSH
66613: CALL 54954 0 2
66617: ST_TO_ADDR
// p := [ ] ;
66618: LD_ADDR_VAR 0 11
66622: PUSH
66623: EMPTY
66624: ST_TO_ADDR
// if sort then
66625: LD_VAR 0 9
66629: IFFALSE 66745
// for i = 1 to 6 - mech do
66631: LD_ADDR_VAR 0 3
66635: PUSH
66636: DOUBLE
66637: LD_INT 1
66639: DEC
66640: ST_TO_ADDR
66641: LD_INT 6
66643: PUSH
66644: LD_VAR 0 7
66648: MINUS
66649: PUSH
66650: FOR_TO
66651: IFFALSE 66743
// begin if i = sort then
66653: LD_VAR 0 3
66657: PUSH
66658: LD_VAR 0 9
66662: EQUAL
66663: IFFALSE 66667
// break ;
66665: GO 66743
// if GetClass ( i ) = 3 then
66667: LD_VAR 0 3
66671: PPUSH
66672: CALL_OW 257
66676: PUSH
66677: LD_INT 3
66679: EQUAL
66680: IFFALSE 66684
// continue ;
66682: GO 66650
// p := Insert ( p , p + 1 , sort [ i ] ) ;
66684: LD_ADDR_VAR 0 11
66688: PUSH
66689: LD_VAR 0 11
66693: PPUSH
66694: LD_VAR 0 11
66698: PUSH
66699: LD_INT 1
66701: PLUS
66702: PPUSH
66703: LD_VAR 0 9
66707: PUSH
66708: LD_VAR 0 3
66712: ARRAY
66713: PPUSH
66714: CALL_OW 2
66718: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
66719: LD_ADDR_VAR 0 4
66723: PUSH
66724: LD_VAR 0 4
66728: PUSH
66729: LD_VAR 0 9
66733: PUSH
66734: LD_VAR 0 3
66738: ARRAY
66739: DIFF
66740: ST_TO_ADDR
// end ;
66741: GO 66650
66743: POP
66744: POP
// if p then
66745: LD_VAR 0 11
66749: IFFALSE 66774
// result := Replace ( result , 3 , p ) ;
66751: LD_ADDR_VAR 0 2
66755: PUSH
66756: LD_VAR 0 2
66760: PPUSH
66761: LD_INT 3
66763: PPUSH
66764: LD_VAR 0 11
66768: PPUSH
66769: CALL_OW 1
66773: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
66774: LD_ADDR_VAR 0 4
66778: PUSH
66779: LD_VAR 0 4
66783: PUSH
66784: LD_VAR 0 6
66788: DIFF
66789: ST_TO_ADDR
// if tmp and eng < 4 then
66790: LD_VAR 0 4
66794: PUSH
66795: LD_VAR 0 6
66799: PUSH
66800: LD_INT 4
66802: LESS
66803: AND
66804: IFFALSE 66994
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
66806: LD_ADDR_VAR 0 9
66810: PUSH
66811: LD_VAR 0 4
66815: PUSH
66816: LD_VAR 0 7
66820: PUSH
66821: LD_VAR 0 6
66825: UNION
66826: DIFF
66827: PPUSH
66828: LD_INT 2
66830: PPUSH
66831: CALL 54954 0 2
66835: ST_TO_ADDR
// p := [ ] ;
66836: LD_ADDR_VAR 0 11
66840: PUSH
66841: EMPTY
66842: ST_TO_ADDR
// if sort then
66843: LD_VAR 0 9
66847: IFFALSE 66963
// for i = 1 to 4 - eng do
66849: LD_ADDR_VAR 0 3
66853: PUSH
66854: DOUBLE
66855: LD_INT 1
66857: DEC
66858: ST_TO_ADDR
66859: LD_INT 4
66861: PUSH
66862: LD_VAR 0 6
66866: MINUS
66867: PUSH
66868: FOR_TO
66869: IFFALSE 66961
// begin if i = sort then
66871: LD_VAR 0 3
66875: PUSH
66876: LD_VAR 0 9
66880: EQUAL
66881: IFFALSE 66885
// break ;
66883: GO 66961
// if GetClass ( i ) = 2 then
66885: LD_VAR 0 3
66889: PPUSH
66890: CALL_OW 257
66894: PUSH
66895: LD_INT 2
66897: EQUAL
66898: IFFALSE 66902
// continue ;
66900: GO 66868
// p := Insert ( p , p + 1 , sort [ i ] ) ;
66902: LD_ADDR_VAR 0 11
66906: PUSH
66907: LD_VAR 0 11
66911: PPUSH
66912: LD_VAR 0 11
66916: PUSH
66917: LD_INT 1
66919: PLUS
66920: PPUSH
66921: LD_VAR 0 9
66925: PUSH
66926: LD_VAR 0 3
66930: ARRAY
66931: PPUSH
66932: CALL_OW 2
66936: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
66937: LD_ADDR_VAR 0 4
66941: PUSH
66942: LD_VAR 0 4
66946: PUSH
66947: LD_VAR 0 9
66951: PUSH
66952: LD_VAR 0 3
66956: ARRAY
66957: DIFF
66958: ST_TO_ADDR
// end ;
66959: GO 66868
66961: POP
66962: POP
// if p then
66963: LD_VAR 0 11
66967: IFFALSE 66992
// result := Replace ( result , 2 , p ) ;
66969: LD_ADDR_VAR 0 2
66973: PUSH
66974: LD_VAR 0 2
66978: PPUSH
66979: LD_INT 2
66981: PPUSH
66982: LD_VAR 0 11
66986: PPUSH
66987: CALL_OW 1
66991: ST_TO_ADDR
// end else
66992: GO 67038
// for i = eng downto 5 do
66994: LD_ADDR_VAR 0 3
66998: PUSH
66999: DOUBLE
67000: LD_VAR 0 6
67004: INC
67005: ST_TO_ADDR
67006: LD_INT 5
67008: PUSH
67009: FOR_DOWNTO
67010: IFFALSE 67036
// tmp := tmp union eng [ i ] ;
67012: LD_ADDR_VAR 0 4
67016: PUSH
67017: LD_VAR 0 4
67021: PUSH
67022: LD_VAR 0 6
67026: PUSH
67027: LD_VAR 0 3
67031: ARRAY
67032: UNION
67033: ST_TO_ADDR
67034: GO 67009
67036: POP
67037: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
67038: LD_ADDR_VAR 0 2
67042: PUSH
67043: LD_VAR 0 2
67047: PPUSH
67048: LD_INT 1
67050: PPUSH
67051: LD_VAR 0 4
67055: PUSH
67056: LD_VAR 0 5
67060: DIFF
67061: PPUSH
67062: CALL_OW 1
67066: ST_TO_ADDR
// exit ;
67067: GO 67069
// end ; end ;
67069: LD_VAR 0 2
67073: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
67074: LD_INT 0
67076: PPUSH
67077: PPUSH
67078: PPUSH
// if not mc_bases then
67079: LD_EXP 50
67083: NOT
67084: IFFALSE 67088
// exit ;
67086: GO 67230
// for i = 1 to mc_bases do
67088: LD_ADDR_VAR 0 2
67092: PUSH
67093: DOUBLE
67094: LD_INT 1
67096: DEC
67097: ST_TO_ADDR
67098: LD_EXP 50
67102: PUSH
67103: FOR_TO
67104: IFFALSE 67221
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
67106: LD_ADDR_VAR 0 3
67110: PUSH
67111: LD_EXP 50
67115: PUSH
67116: LD_VAR 0 2
67120: ARRAY
67121: PPUSH
67122: LD_INT 21
67124: PUSH
67125: LD_INT 3
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 3
67134: PUSH
67135: LD_INT 2
67137: PUSH
67138: LD_INT 30
67140: PUSH
67141: LD_INT 29
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: PUSH
67148: LD_INT 30
67150: PUSH
67151: LD_INT 30
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: LIST
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: LD_INT 3
67169: PUSH
67170: LD_INT 24
67172: PUSH
67173: LD_INT 1000
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: LIST
67188: PPUSH
67189: CALL_OW 72
67193: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
67194: LD_ADDR_EXP 51
67198: PUSH
67199: LD_EXP 51
67203: PPUSH
67204: LD_VAR 0 2
67208: PPUSH
67209: LD_VAR 0 3
67213: PPUSH
67214: CALL_OW 1
67218: ST_TO_ADDR
// end ;
67219: GO 67103
67221: POP
67222: POP
// RaiseSailEvent ( 101 ) ;
67223: LD_INT 101
67225: PPUSH
67226: CALL_OW 427
// end ;
67230: LD_VAR 0 1
67234: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
67235: LD_INT 0
67237: PPUSH
67238: PPUSH
67239: PPUSH
67240: PPUSH
67241: PPUSH
67242: PPUSH
67243: PPUSH
// if not mc_bases then
67244: LD_EXP 50
67248: NOT
67249: IFFALSE 67253
// exit ;
67251: GO 67815
// for i = 1 to mc_bases do
67253: LD_ADDR_VAR 0 2
67257: PUSH
67258: DOUBLE
67259: LD_INT 1
67261: DEC
67262: ST_TO_ADDR
67263: LD_EXP 50
67267: PUSH
67268: FOR_TO
67269: IFFALSE 67806
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
67271: LD_ADDR_VAR 0 5
67275: PUSH
67276: LD_EXP 50
67280: PUSH
67281: LD_VAR 0 2
67285: ARRAY
67286: PUSH
67287: LD_EXP 79
67291: PUSH
67292: LD_VAR 0 2
67296: ARRAY
67297: UNION
67298: PPUSH
67299: LD_INT 21
67301: PUSH
67302: LD_INT 1
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: LD_INT 1
67311: PUSH
67312: LD_INT 3
67314: PUSH
67315: LD_INT 54
67317: PUSH
67318: EMPTY
67319: LIST
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 3
67327: PUSH
67328: LD_INT 24
67330: PUSH
67331: LD_INT 1000
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: LIST
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PPUSH
67351: CALL_OW 72
67355: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
67356: LD_ADDR_VAR 0 6
67360: PUSH
67361: LD_EXP 50
67365: PUSH
67366: LD_VAR 0 2
67370: ARRAY
67371: PPUSH
67372: LD_INT 21
67374: PUSH
67375: LD_INT 1
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: LD_INT 1
67384: PUSH
67385: LD_INT 3
67387: PUSH
67388: LD_INT 54
67390: PUSH
67391: EMPTY
67392: LIST
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: LD_INT 3
67400: PUSH
67401: LD_INT 24
67403: PUSH
67404: LD_INT 250
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: LIST
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PPUSH
67424: CALL_OW 72
67428: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
67429: LD_ADDR_VAR 0 7
67433: PUSH
67434: LD_VAR 0 5
67438: PUSH
67439: LD_VAR 0 6
67443: DIFF
67444: ST_TO_ADDR
// if not need_heal_1 then
67445: LD_VAR 0 6
67449: NOT
67450: IFFALSE 67483
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
67452: LD_ADDR_EXP 53
67456: PUSH
67457: LD_EXP 53
67461: PPUSH
67462: LD_VAR 0 2
67466: PUSH
67467: LD_INT 1
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PPUSH
67474: EMPTY
67475: PPUSH
67476: CALL 24697 0 3
67480: ST_TO_ADDR
67481: GO 67553
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
67483: LD_ADDR_EXP 53
67487: PUSH
67488: LD_EXP 53
67492: PPUSH
67493: LD_VAR 0 2
67497: PUSH
67498: LD_INT 1
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PPUSH
67505: LD_EXP 53
67509: PUSH
67510: LD_VAR 0 2
67514: ARRAY
67515: PUSH
67516: LD_INT 1
67518: ARRAY
67519: PPUSH
67520: LD_INT 3
67522: PUSH
67523: LD_INT 24
67525: PUSH
67526: LD_INT 1000
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: PPUSH
67537: CALL_OW 72
67541: PUSH
67542: LD_VAR 0 6
67546: UNION
67547: PPUSH
67548: CALL 24697 0 3
67552: ST_TO_ADDR
// if not need_heal_2 then
67553: LD_VAR 0 7
67557: NOT
67558: IFFALSE 67591
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
67560: LD_ADDR_EXP 53
67564: PUSH
67565: LD_EXP 53
67569: PPUSH
67570: LD_VAR 0 2
67574: PUSH
67575: LD_INT 2
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PPUSH
67582: EMPTY
67583: PPUSH
67584: CALL 24697 0 3
67588: ST_TO_ADDR
67589: GO 67623
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
67591: LD_ADDR_EXP 53
67595: PUSH
67596: LD_EXP 53
67600: PPUSH
67601: LD_VAR 0 2
67605: PUSH
67606: LD_INT 2
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PPUSH
67613: LD_VAR 0 7
67617: PPUSH
67618: CALL 24697 0 3
67622: ST_TO_ADDR
// if need_heal_2 then
67623: LD_VAR 0 7
67627: IFFALSE 67788
// for j in need_heal_2 do
67629: LD_ADDR_VAR 0 3
67633: PUSH
67634: LD_VAR 0 7
67638: PUSH
67639: FOR_IN
67640: IFFALSE 67786
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
67642: LD_ADDR_VAR 0 5
67646: PUSH
67647: LD_EXP 50
67651: PUSH
67652: LD_VAR 0 2
67656: ARRAY
67657: PPUSH
67658: LD_INT 2
67660: PUSH
67661: LD_INT 30
67663: PUSH
67664: LD_INT 6
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: LD_INT 30
67673: PUSH
67674: LD_INT 7
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: LD_INT 30
67683: PUSH
67684: LD_INT 8
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: LD_INT 30
67693: PUSH
67694: LD_INT 0
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 30
67703: PUSH
67704: LD_INT 1
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: PPUSH
67719: CALL_OW 72
67723: ST_TO_ADDR
// if tmp then
67724: LD_VAR 0 5
67728: IFFALSE 67784
// begin k := NearestUnitToUnit ( tmp , j ) ;
67730: LD_ADDR_VAR 0 4
67734: PUSH
67735: LD_VAR 0 5
67739: PPUSH
67740: LD_VAR 0 3
67744: PPUSH
67745: CALL_OW 74
67749: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
67750: LD_VAR 0 3
67754: PPUSH
67755: LD_VAR 0 4
67759: PPUSH
67760: CALL_OW 296
67764: PUSH
67765: LD_INT 5
67767: GREATER
67768: IFFALSE 67784
// ComMoveToNearbyEntrance ( j , k ) ;
67770: LD_VAR 0 3
67774: PPUSH
67775: LD_VAR 0 4
67779: PPUSH
67780: CALL 57315 0 2
// end ; end ;
67784: GO 67639
67786: POP
67787: POP
// if not need_heal_1 and not need_heal_2 then
67788: LD_VAR 0 6
67792: NOT
67793: PUSH
67794: LD_VAR 0 7
67798: NOT
67799: AND
67800: IFFALSE 67804
// continue ;
67802: GO 67268
// end ;
67804: GO 67268
67806: POP
67807: POP
// RaiseSailEvent ( 102 ) ;
67808: LD_INT 102
67810: PPUSH
67811: CALL_OW 427
// end ;
67815: LD_VAR 0 1
67819: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
67820: LD_INT 0
67822: PPUSH
67823: PPUSH
67824: PPUSH
67825: PPUSH
67826: PPUSH
67827: PPUSH
67828: PPUSH
67829: PPUSH
// if not mc_bases then
67830: LD_EXP 50
67834: NOT
67835: IFFALSE 67839
// exit ;
67837: GO 68722
// for i = 1 to mc_bases do
67839: LD_ADDR_VAR 0 2
67843: PUSH
67844: DOUBLE
67845: LD_INT 1
67847: DEC
67848: ST_TO_ADDR
67849: LD_EXP 50
67853: PUSH
67854: FOR_TO
67855: IFFALSE 68720
// begin if not mc_building_need_repair [ i ] then
67857: LD_EXP 51
67861: PUSH
67862: LD_VAR 0 2
67866: ARRAY
67867: NOT
67868: IFFALSE 68055
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] ] ] ) ;
67870: LD_ADDR_VAR 0 6
67874: PUSH
67875: LD_EXP 69
67879: PUSH
67880: LD_VAR 0 2
67884: ARRAY
67885: PPUSH
67886: LD_INT 3
67888: PUSH
67889: LD_INT 24
67891: PUSH
67892: LD_INT 1000
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: LD_INT 2
67905: PUSH
67906: LD_INT 34
67908: PUSH
67909: LD_INT 13
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: PUSH
67916: LD_INT 34
67918: PUSH
67919: LD_INT 52
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: LD_INT 34
67928: PUSH
67929: LD_EXP 35
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: LIST
67942: LIST
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: PPUSH
67948: CALL_OW 72
67952: ST_TO_ADDR
// if cranes then
67953: LD_VAR 0 6
67957: IFFALSE 68019
// for j in cranes do
67959: LD_ADDR_VAR 0 3
67963: PUSH
67964: LD_VAR 0 6
67968: PUSH
67969: FOR_IN
67970: IFFALSE 68017
// if not IsInArea ( j , mc_parking [ i ] ) then
67972: LD_VAR 0 3
67976: PPUSH
67977: LD_EXP 74
67981: PUSH
67982: LD_VAR 0 2
67986: ARRAY
67987: PPUSH
67988: CALL_OW 308
67992: NOT
67993: IFFALSE 68015
// ComMoveToArea ( j , mc_parking [ i ] ) ;
67995: LD_VAR 0 3
67999: PPUSH
68000: LD_EXP 74
68004: PUSH
68005: LD_VAR 0 2
68009: ARRAY
68010: PPUSH
68011: CALL_OW 113
68015: GO 67969
68017: POP
68018: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
68019: LD_ADDR_EXP 52
68023: PUSH
68024: LD_EXP 52
68028: PPUSH
68029: LD_VAR 0 2
68033: PPUSH
68034: EMPTY
68035: PPUSH
68036: CALL_OW 1
68040: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
68041: LD_VAR 0 2
68045: PPUSH
68046: LD_INT 101
68048: PPUSH
68049: CALL 62907 0 2
// continue ;
68053: GO 67854
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
68055: LD_ADDR_EXP 56
68059: PUSH
68060: LD_EXP 56
68064: PPUSH
68065: LD_VAR 0 2
68069: PPUSH
68070: EMPTY
68071: PPUSH
68072: CALL_OW 1
68076: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
68077: LD_VAR 0 2
68081: PPUSH
68082: LD_INT 103
68084: PPUSH
68085: CALL 62907 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
68089: LD_ADDR_VAR 0 5
68093: PUSH
68094: LD_EXP 50
68098: PUSH
68099: LD_VAR 0 2
68103: ARRAY
68104: PUSH
68105: LD_EXP 79
68109: PUSH
68110: LD_VAR 0 2
68114: ARRAY
68115: UNION
68116: PPUSH
68117: LD_INT 2
68119: PUSH
68120: LD_INT 25
68122: PUSH
68123: LD_INT 2
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 25
68132: PUSH
68133: LD_INT 16
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: LIST
68144: PUSH
68145: EMPTY
68146: LIST
68147: PPUSH
68148: CALL_OW 72
68152: ST_TO_ADDR
// if mc_need_heal [ i ] then
68153: LD_EXP 53
68157: PUSH
68158: LD_VAR 0 2
68162: ARRAY
68163: IFFALSE 68207
// tmp := tmp diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
68165: LD_ADDR_VAR 0 5
68169: PUSH
68170: LD_VAR 0 5
68174: PUSH
68175: LD_EXP 53
68179: PUSH
68180: LD_VAR 0 2
68184: ARRAY
68185: PUSH
68186: LD_INT 1
68188: ARRAY
68189: PUSH
68190: LD_EXP 53
68194: PUSH
68195: LD_VAR 0 2
68199: ARRAY
68200: PUSH
68201: LD_INT 2
68203: ARRAY
68204: UNION
68205: DIFF
68206: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] ] ) ;
68207: LD_ADDR_VAR 0 6
68211: PUSH
68212: LD_EXP 69
68216: PUSH
68217: LD_VAR 0 2
68221: ARRAY
68222: PPUSH
68223: LD_INT 2
68225: PUSH
68226: LD_INT 34
68228: PUSH
68229: LD_INT 13
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: PUSH
68236: LD_INT 34
68238: PUSH
68239: LD_INT 52
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: PUSH
68246: LD_INT 34
68248: PUSH
68249: LD_EXP 35
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: PPUSH
68264: CALL_OW 72
68268: ST_TO_ADDR
// if cranes then
68269: LD_VAR 0 6
68273: IFFALSE 68409
// begin for j in cranes do
68275: LD_ADDR_VAR 0 3
68279: PUSH
68280: LD_VAR 0 6
68284: PUSH
68285: FOR_IN
68286: IFFALSE 68407
// begin if GetLives ( j ) = 1000 and not HasTask ( j ) then
68288: LD_VAR 0 3
68292: PPUSH
68293: CALL_OW 256
68297: PUSH
68298: LD_INT 1000
68300: EQUAL
68301: PUSH
68302: LD_VAR 0 3
68306: PPUSH
68307: CALL_OW 314
68311: NOT
68312: AND
68313: IFFALSE 68347
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
68315: LD_VAR 0 3
68319: PPUSH
68320: LD_EXP 51
68324: PUSH
68325: LD_VAR 0 2
68329: ARRAY
68330: PPUSH
68331: LD_VAR 0 3
68335: PPUSH
68336: CALL_OW 74
68340: PPUSH
68341: CALL_OW 130
68345: GO 68405
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
68347: LD_VAR 0 3
68351: PPUSH
68352: CALL_OW 256
68356: PUSH
68357: LD_INT 500
68359: LESS
68360: PUSH
68361: LD_VAR 0 3
68365: PPUSH
68366: LD_EXP 74
68370: PUSH
68371: LD_VAR 0 2
68375: ARRAY
68376: PPUSH
68377: CALL_OW 308
68381: NOT
68382: AND
68383: IFFALSE 68405
// ComMoveToArea ( j , mc_parking [ i ] ) ;
68385: LD_VAR 0 3
68389: PPUSH
68390: LD_EXP 74
68394: PUSH
68395: LD_VAR 0 2
68399: ARRAY
68400: PPUSH
68401: CALL_OW 113
// end ;
68405: GO 68285
68407: POP
68408: POP
// end ; if tmp > 3 then
68409: LD_VAR 0 5
68413: PUSH
68414: LD_INT 3
68416: GREATER
68417: IFFALSE 68437
// tmp := ShrinkArray ( tmp , 4 ) ;
68419: LD_ADDR_VAR 0 5
68423: PUSH
68424: LD_VAR 0 5
68428: PPUSH
68429: LD_INT 4
68431: PPUSH
68432: CALL 56763 0 2
68436: ST_TO_ADDR
// if not tmp then
68437: LD_VAR 0 5
68441: NOT
68442: IFFALSE 68446
// continue ;
68444: GO 67854
// for j in tmp do
68446: LD_ADDR_VAR 0 3
68450: PUSH
68451: LD_VAR 0 5
68455: PUSH
68456: FOR_IN
68457: IFFALSE 68716
// begin if IsInUnit ( j ) then
68459: LD_VAR 0 3
68463: PPUSH
68464: CALL_OW 310
68468: IFFALSE 68479
// ComExitBuilding ( j ) ;
68470: LD_VAR 0 3
68474: PPUSH
68475: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
68479: LD_VAR 0 3
68483: PUSH
68484: LD_EXP 52
68488: PUSH
68489: LD_VAR 0 2
68493: ARRAY
68494: IN
68495: NOT
68496: IFFALSE 68554
// begin SetTag ( j , 101 ) ;
68498: LD_VAR 0 3
68502: PPUSH
68503: LD_INT 101
68505: PPUSH
68506: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
68510: LD_ADDR_EXP 52
68514: PUSH
68515: LD_EXP 52
68519: PPUSH
68520: LD_VAR 0 2
68524: PUSH
68525: LD_EXP 52
68529: PUSH
68530: LD_VAR 0 2
68534: ARRAY
68535: PUSH
68536: LD_INT 1
68538: PLUS
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PPUSH
68544: LD_VAR 0 3
68548: PPUSH
68549: CALL 24697 0 3
68553: ST_TO_ADDR
// end ; wait ( 1 ) ;
68554: LD_INT 1
68556: PPUSH
68557: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
68561: LD_ADDR_VAR 0 7
68565: PUSH
68566: LD_EXP 51
68570: PUSH
68571: LD_VAR 0 2
68575: ARRAY
68576: ST_TO_ADDR
// if mc_scan [ i ] then
68577: LD_EXP 73
68581: PUSH
68582: LD_VAR 0 2
68586: ARRAY
68587: IFFALSE 68649
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
68589: LD_ADDR_VAR 0 7
68593: PUSH
68594: LD_EXP 51
68598: PUSH
68599: LD_VAR 0 2
68603: ARRAY
68604: PPUSH
68605: LD_INT 3
68607: PUSH
68608: LD_INT 30
68610: PUSH
68611: LD_INT 32
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: LD_INT 30
68620: PUSH
68621: LD_INT 33
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: LD_INT 30
68630: PUSH
68631: LD_INT 31
68633: PUSH
68634: EMPTY
68635: LIST
68636: LIST
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: LIST
68642: LIST
68643: PPUSH
68644: CALL_OW 72
68648: ST_TO_ADDR
// if not to_repair_tmp then
68649: LD_VAR 0 7
68653: NOT
68654: IFFALSE 68658
// continue ;
68656: GO 68456
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
68658: LD_ADDR_VAR 0 8
68662: PUSH
68663: LD_VAR 0 7
68667: PPUSH
68668: LD_VAR 0 3
68672: PPUSH
68673: CALL_OW 74
68677: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 10 then
68678: LD_VAR 0 8
68682: PPUSH
68683: LD_INT 16
68685: PPUSH
68686: CALL 27296 0 2
68690: PUSH
68691: LD_INT 4
68693: ARRAY
68694: PUSH
68695: LD_INT 10
68697: LESS
68698: IFFALSE 68714
// ComRepairBuilding ( j , to_repair ) ;
68700: LD_VAR 0 3
68704: PPUSH
68705: LD_VAR 0 8
68709: PPUSH
68710: CALL_OW 130
// end ;
68714: GO 68456
68716: POP
68717: POP
// end ;
68718: GO 67854
68720: POP
68721: POP
// end ;
68722: LD_VAR 0 1
68726: RET
// export function MC_Heal ; var i , j , tmp ; begin
68727: LD_INT 0
68729: PPUSH
68730: PPUSH
68731: PPUSH
68732: PPUSH
// if not mc_bases then
68733: LD_EXP 50
68737: NOT
68738: IFFALSE 68742
// exit ;
68740: GO 69144
// for i = 1 to mc_bases do
68742: LD_ADDR_VAR 0 2
68746: PUSH
68747: DOUBLE
68748: LD_INT 1
68750: DEC
68751: ST_TO_ADDR
68752: LD_EXP 50
68756: PUSH
68757: FOR_TO
68758: IFFALSE 69142
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
68760: LD_EXP 53
68764: PUSH
68765: LD_VAR 0 2
68769: ARRAY
68770: PUSH
68771: LD_INT 1
68773: ARRAY
68774: NOT
68775: PUSH
68776: LD_EXP 53
68780: PUSH
68781: LD_VAR 0 2
68785: ARRAY
68786: PUSH
68787: LD_INT 2
68789: ARRAY
68790: NOT
68791: AND
68792: IFFALSE 68830
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
68794: LD_ADDR_EXP 54
68798: PUSH
68799: LD_EXP 54
68803: PPUSH
68804: LD_VAR 0 2
68808: PPUSH
68809: EMPTY
68810: PPUSH
68811: CALL_OW 1
68815: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
68816: LD_VAR 0 2
68820: PPUSH
68821: LD_INT 102
68823: PPUSH
68824: CALL 62907 0 2
// continue ;
68828: GO 68757
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
68830: LD_ADDR_VAR 0 4
68834: PUSH
68835: LD_EXP 50
68839: PUSH
68840: LD_VAR 0 2
68844: ARRAY
68845: PPUSH
68846: LD_INT 25
68848: PUSH
68849: LD_INT 4
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: PPUSH
68856: CALL_OW 72
68860: ST_TO_ADDR
// if not tmp then
68861: LD_VAR 0 4
68865: NOT
68866: IFFALSE 68870
// continue ;
68868: GO 68757
// if mc_taming [ i ] then
68870: LD_EXP 81
68874: PUSH
68875: LD_VAR 0 2
68879: ARRAY
68880: IFFALSE 68904
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
68882: LD_ADDR_EXP 81
68886: PUSH
68887: LD_EXP 81
68891: PPUSH
68892: LD_VAR 0 2
68896: PPUSH
68897: EMPTY
68898: PPUSH
68899: CALL_OW 1
68903: ST_TO_ADDR
// for j in tmp do
68904: LD_ADDR_VAR 0 3
68908: PUSH
68909: LD_VAR 0 4
68913: PUSH
68914: FOR_IN
68915: IFFALSE 69138
// begin if IsInUnit ( j ) then
68917: LD_VAR 0 3
68921: PPUSH
68922: CALL_OW 310
68926: IFFALSE 68937
// ComExitBuilding ( j ) ;
68928: LD_VAR 0 3
68932: PPUSH
68933: CALL_OW 122
// if not j in mc_healers [ i ] then
68937: LD_VAR 0 3
68941: PUSH
68942: LD_EXP 54
68946: PUSH
68947: LD_VAR 0 2
68951: ARRAY
68952: IN
68953: NOT
68954: IFFALSE 69000
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
68956: LD_ADDR_EXP 54
68960: PUSH
68961: LD_EXP 54
68965: PPUSH
68966: LD_VAR 0 2
68970: PUSH
68971: LD_EXP 54
68975: PUSH
68976: LD_VAR 0 2
68980: ARRAY
68981: PUSH
68982: LD_INT 1
68984: PLUS
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PPUSH
68990: LD_VAR 0 3
68994: PPUSH
68995: CALL 24697 0 3
68999: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
69000: LD_VAR 0 3
69004: PPUSH
69005: CALL_OW 110
69009: PUSH
69010: LD_INT 102
69012: NONEQUAL
69013: IFFALSE 69027
// SetTag ( j , 102 ) ;
69015: LD_VAR 0 3
69019: PPUSH
69020: LD_INT 102
69022: PPUSH
69023: CALL_OW 109
// Wait ( 3 ) ;
69027: LD_INT 3
69029: PPUSH
69030: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
69034: LD_EXP 53
69038: PUSH
69039: LD_VAR 0 2
69043: ARRAY
69044: PUSH
69045: LD_INT 1
69047: ARRAY
69048: IFFALSE 69080
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
69050: LD_VAR 0 3
69054: PPUSH
69055: LD_EXP 53
69059: PUSH
69060: LD_VAR 0 2
69064: ARRAY
69065: PUSH
69066: LD_INT 1
69068: ARRAY
69069: PUSH
69070: LD_INT 1
69072: ARRAY
69073: PPUSH
69074: CALL_OW 128
69078: GO 69136
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
69080: LD_VAR 0 3
69084: PPUSH
69085: CALL_OW 314
69089: NOT
69090: PUSH
69091: LD_EXP 53
69095: PUSH
69096: LD_VAR 0 2
69100: ARRAY
69101: PUSH
69102: LD_INT 2
69104: ARRAY
69105: AND
69106: IFFALSE 69136
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
69108: LD_VAR 0 3
69112: PPUSH
69113: LD_EXP 53
69117: PUSH
69118: LD_VAR 0 2
69122: ARRAY
69123: PUSH
69124: LD_INT 2
69126: ARRAY
69127: PUSH
69128: LD_INT 1
69130: ARRAY
69131: PPUSH
69132: CALL_OW 128
// end ;
69136: GO 68914
69138: POP
69139: POP
// end ;
69140: GO 68757
69142: POP
69143: POP
// end ;
69144: LD_VAR 0 1
69148: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
69149: LD_INT 0
69151: PPUSH
69152: PPUSH
69153: PPUSH
69154: PPUSH
69155: PPUSH
// if not mc_bases then
69156: LD_EXP 50
69160: NOT
69161: IFFALSE 69165
// exit ;
69163: GO 70336
// for i = 1 to mc_bases do
69165: LD_ADDR_VAR 0 2
69169: PUSH
69170: DOUBLE
69171: LD_INT 1
69173: DEC
69174: ST_TO_ADDR
69175: LD_EXP 50
69179: PUSH
69180: FOR_TO
69181: IFFALSE 70334
// begin if mc_scan [ i ] then
69183: LD_EXP 73
69187: PUSH
69188: LD_VAR 0 2
69192: ARRAY
69193: IFFALSE 69197
// continue ;
69195: GO 69180
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
69197: LD_EXP 55
69201: PUSH
69202: LD_VAR 0 2
69206: ARRAY
69207: NOT
69208: PUSH
69209: LD_EXP 57
69213: PUSH
69214: LD_VAR 0 2
69218: ARRAY
69219: NOT
69220: AND
69221: PUSH
69222: LD_EXP 56
69226: PUSH
69227: LD_VAR 0 2
69231: ARRAY
69232: AND
69233: IFFALSE 69271
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
69235: LD_ADDR_EXP 56
69239: PUSH
69240: LD_EXP 56
69244: PPUSH
69245: LD_VAR 0 2
69249: PPUSH
69250: EMPTY
69251: PPUSH
69252: CALL_OW 1
69256: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
69257: LD_VAR 0 2
69261: PPUSH
69262: LD_INT 103
69264: PPUSH
69265: CALL 62907 0 2
// continue ;
69269: GO 69180
// end ; if mc_construct_list [ i ] then
69271: LD_EXP 57
69275: PUSH
69276: LD_VAR 0 2
69280: ARRAY
69281: IFFALSE 69501
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
69283: LD_ADDR_VAR 0 4
69287: PUSH
69288: LD_EXP 50
69292: PUSH
69293: LD_VAR 0 2
69297: ARRAY
69298: PPUSH
69299: LD_INT 25
69301: PUSH
69302: LD_INT 2
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PPUSH
69309: CALL_OW 72
69313: PUSH
69314: LD_EXP 52
69318: PUSH
69319: LD_VAR 0 2
69323: ARRAY
69324: DIFF
69325: ST_TO_ADDR
// if not tmp then
69326: LD_VAR 0 4
69330: NOT
69331: IFFALSE 69335
// continue ;
69333: GO 69180
// for j in tmp do
69335: LD_ADDR_VAR 0 3
69339: PUSH
69340: LD_VAR 0 4
69344: PUSH
69345: FOR_IN
69346: IFFALSE 69497
// begin if not mc_builders [ i ] then
69348: LD_EXP 56
69352: PUSH
69353: LD_VAR 0 2
69357: ARRAY
69358: NOT
69359: IFFALSE 69417
// begin SetTag ( j , 103 ) ;
69361: LD_VAR 0 3
69365: PPUSH
69366: LD_INT 103
69368: PPUSH
69369: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
69373: LD_ADDR_EXP 56
69377: PUSH
69378: LD_EXP 56
69382: PPUSH
69383: LD_VAR 0 2
69387: PUSH
69388: LD_EXP 56
69392: PUSH
69393: LD_VAR 0 2
69397: ARRAY
69398: PUSH
69399: LD_INT 1
69401: PLUS
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PPUSH
69407: LD_VAR 0 3
69411: PPUSH
69412: CALL 24697 0 3
69416: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
69417: LD_VAR 0 3
69421: PPUSH
69422: CALL_OW 310
69426: IFFALSE 69437
// ComExitBuilding ( j ) ;
69428: LD_VAR 0 3
69432: PPUSH
69433: CALL_OW 122
// wait ( 3 ) ;
69437: LD_INT 3
69439: PPUSH
69440: CALL_OW 67
// if not mc_construct_list [ i ] then
69444: LD_EXP 57
69448: PUSH
69449: LD_VAR 0 2
69453: ARRAY
69454: NOT
69455: IFFALSE 69459
// break ;
69457: GO 69497
// if not HasTask ( j ) then
69459: LD_VAR 0 3
69463: PPUSH
69464: CALL_OW 314
69468: NOT
69469: IFFALSE 69495
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
69471: LD_VAR 0 3
69475: PPUSH
69476: LD_EXP 57
69480: PUSH
69481: LD_VAR 0 2
69485: ARRAY
69486: PUSH
69487: LD_INT 1
69489: ARRAY
69490: PPUSH
69491: CALL 27560 0 2
// end ;
69495: GO 69345
69497: POP
69498: POP
// end else
69499: GO 70332
// if mc_build_list [ i ] then
69501: LD_EXP 55
69505: PUSH
69506: LD_VAR 0 2
69510: ARRAY
69511: IFFALSE 70332
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
69513: LD_ADDR_VAR 0 5
69517: PUSH
69518: LD_EXP 50
69522: PUSH
69523: LD_VAR 0 2
69527: ARRAY
69528: PPUSH
69529: LD_INT 2
69531: PUSH
69532: LD_INT 30
69534: PUSH
69535: LD_INT 0
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: PUSH
69542: LD_INT 30
69544: PUSH
69545: LD_INT 1
69547: PUSH
69548: EMPTY
69549: LIST
69550: LIST
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: LIST
69556: PPUSH
69557: CALL_OW 72
69561: ST_TO_ADDR
// if depot then
69562: LD_VAR 0 5
69566: IFFALSE 69584
// depot := depot [ 1 ] else
69568: LD_ADDR_VAR 0 5
69572: PUSH
69573: LD_VAR 0 5
69577: PUSH
69578: LD_INT 1
69580: ARRAY
69581: ST_TO_ADDR
69582: GO 69592
// depot := 0 ;
69584: LD_ADDR_VAR 0 5
69588: PUSH
69589: LD_INT 0
69591: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
69592: LD_EXP 55
69596: PUSH
69597: LD_VAR 0 2
69601: ARRAY
69602: PUSH
69603: LD_INT 1
69605: ARRAY
69606: PUSH
69607: LD_INT 1
69609: ARRAY
69610: PPUSH
69611: CALL 27384 0 1
69615: PUSH
69616: LD_EXP 50
69620: PUSH
69621: LD_VAR 0 2
69625: ARRAY
69626: PPUSH
69627: LD_INT 2
69629: PUSH
69630: LD_INT 30
69632: PUSH
69633: LD_INT 2
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 30
69642: PUSH
69643: LD_INT 3
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: LIST
69654: PPUSH
69655: CALL_OW 72
69659: NOT
69660: AND
69661: IFFALSE 69766
// begin for j = 1 to mc_build_list [ i ] do
69663: LD_ADDR_VAR 0 3
69667: PUSH
69668: DOUBLE
69669: LD_INT 1
69671: DEC
69672: ST_TO_ADDR
69673: LD_EXP 55
69677: PUSH
69678: LD_VAR 0 2
69682: ARRAY
69683: PUSH
69684: FOR_TO
69685: IFFALSE 69764
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
69687: LD_EXP 55
69691: PUSH
69692: LD_VAR 0 2
69696: ARRAY
69697: PUSH
69698: LD_VAR 0 3
69702: ARRAY
69703: PUSH
69704: LD_INT 1
69706: ARRAY
69707: PUSH
69708: LD_INT 2
69710: EQUAL
69711: IFFALSE 69762
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
69713: LD_ADDR_EXP 55
69717: PUSH
69718: LD_EXP 55
69722: PPUSH
69723: LD_VAR 0 2
69727: PPUSH
69728: LD_EXP 55
69732: PUSH
69733: LD_VAR 0 2
69737: ARRAY
69738: PPUSH
69739: LD_VAR 0 3
69743: PPUSH
69744: LD_INT 1
69746: PPUSH
69747: LD_INT 0
69749: PPUSH
69750: CALL 24115 0 4
69754: PPUSH
69755: CALL_OW 1
69759: ST_TO_ADDR
// break ;
69760: GO 69764
// end ;
69762: GO 69684
69764: POP
69765: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
69766: LD_EXP 55
69770: PUSH
69771: LD_VAR 0 2
69775: ARRAY
69776: PUSH
69777: LD_INT 1
69779: ARRAY
69780: PUSH
69781: LD_INT 1
69783: ARRAY
69784: PUSH
69785: LD_INT 0
69787: EQUAL
69788: PUSH
69789: LD_VAR 0 5
69793: PUSH
69794: LD_VAR 0 5
69798: PPUSH
69799: LD_EXP 55
69803: PUSH
69804: LD_VAR 0 2
69808: ARRAY
69809: PUSH
69810: LD_INT 1
69812: ARRAY
69813: PUSH
69814: LD_INT 1
69816: ARRAY
69817: PPUSH
69818: LD_EXP 55
69822: PUSH
69823: LD_VAR 0 2
69827: ARRAY
69828: PUSH
69829: LD_INT 1
69831: ARRAY
69832: PUSH
69833: LD_INT 2
69835: ARRAY
69836: PPUSH
69837: LD_EXP 55
69841: PUSH
69842: LD_VAR 0 2
69846: ARRAY
69847: PUSH
69848: LD_INT 1
69850: ARRAY
69851: PUSH
69852: LD_INT 3
69854: ARRAY
69855: PPUSH
69856: LD_EXP 55
69860: PUSH
69861: LD_VAR 0 2
69865: ARRAY
69866: PUSH
69867: LD_INT 1
69869: ARRAY
69870: PUSH
69871: LD_INT 4
69873: ARRAY
69874: PPUSH
69875: CALL 32800 0 5
69879: AND
69880: OR
69881: IFFALSE 70162
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
69883: LD_ADDR_VAR 0 4
69887: PUSH
69888: LD_EXP 50
69892: PUSH
69893: LD_VAR 0 2
69897: ARRAY
69898: PPUSH
69899: LD_INT 25
69901: PUSH
69902: LD_INT 2
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: PPUSH
69909: CALL_OW 72
69913: PUSH
69914: LD_EXP 52
69918: PUSH
69919: LD_VAR 0 2
69923: ARRAY
69924: DIFF
69925: ST_TO_ADDR
// if not tmp then
69926: LD_VAR 0 4
69930: NOT
69931: IFFALSE 69935
// continue ;
69933: GO 69180
// for j in tmp do
69935: LD_ADDR_VAR 0 3
69939: PUSH
69940: LD_VAR 0 4
69944: PUSH
69945: FOR_IN
69946: IFFALSE 70158
// begin if not mc_builders [ i ] then
69948: LD_EXP 56
69952: PUSH
69953: LD_VAR 0 2
69957: ARRAY
69958: NOT
69959: IFFALSE 70017
// begin SetTag ( j , 103 ) ;
69961: LD_VAR 0 3
69965: PPUSH
69966: LD_INT 103
69968: PPUSH
69969: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
69973: LD_ADDR_EXP 56
69977: PUSH
69978: LD_EXP 56
69982: PPUSH
69983: LD_VAR 0 2
69987: PUSH
69988: LD_EXP 56
69992: PUSH
69993: LD_VAR 0 2
69997: ARRAY
69998: PUSH
69999: LD_INT 1
70001: PLUS
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: PPUSH
70007: LD_VAR 0 3
70011: PPUSH
70012: CALL 24697 0 3
70016: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
70017: LD_VAR 0 3
70021: PPUSH
70022: CALL_OW 310
70026: IFFALSE 70037
// ComExitBuilding ( j ) ;
70028: LD_VAR 0 3
70032: PPUSH
70033: CALL_OW 122
// wait ( 3 ) ;
70037: LD_INT 3
70039: PPUSH
70040: CALL_OW 67
// if not mc_build_list [ i ] then
70044: LD_EXP 55
70048: PUSH
70049: LD_VAR 0 2
70053: ARRAY
70054: NOT
70055: IFFALSE 70059
// break ;
70057: GO 70158
// if not HasTask ( j ) then
70059: LD_VAR 0 3
70063: PPUSH
70064: CALL_OW 314
70068: NOT
70069: IFFALSE 70156
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
70071: LD_VAR 0 3
70075: PPUSH
70076: LD_EXP 55
70080: PUSH
70081: LD_VAR 0 2
70085: ARRAY
70086: PUSH
70087: LD_INT 1
70089: ARRAY
70090: PUSH
70091: LD_INT 1
70093: ARRAY
70094: PPUSH
70095: LD_EXP 55
70099: PUSH
70100: LD_VAR 0 2
70104: ARRAY
70105: PUSH
70106: LD_INT 1
70108: ARRAY
70109: PUSH
70110: LD_INT 2
70112: ARRAY
70113: PPUSH
70114: LD_EXP 55
70118: PUSH
70119: LD_VAR 0 2
70123: ARRAY
70124: PUSH
70125: LD_INT 1
70127: ARRAY
70128: PUSH
70129: LD_INT 3
70131: ARRAY
70132: PPUSH
70133: LD_EXP 55
70137: PUSH
70138: LD_VAR 0 2
70142: ARRAY
70143: PUSH
70144: LD_INT 1
70146: ARRAY
70147: PUSH
70148: LD_INT 4
70150: ARRAY
70151: PPUSH
70152: CALL_OW 145
// end ;
70156: GO 69945
70158: POP
70159: POP
// end else
70160: GO 70332
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] , UnitFilter ( mc_bases [ i ] , [ f_type , unit_building ] ) , [ ] ) then
70162: LD_EXP 50
70166: PUSH
70167: LD_VAR 0 2
70171: ARRAY
70172: PPUSH
70173: LD_EXP 55
70177: PUSH
70178: LD_VAR 0 2
70182: ARRAY
70183: PUSH
70184: LD_INT 1
70186: ARRAY
70187: PUSH
70188: LD_INT 1
70190: ARRAY
70191: PPUSH
70192: LD_EXP 55
70196: PUSH
70197: LD_VAR 0 2
70201: ARRAY
70202: PUSH
70203: LD_INT 1
70205: ARRAY
70206: PUSH
70207: LD_INT 2
70209: ARRAY
70210: PPUSH
70211: LD_EXP 55
70215: PUSH
70216: LD_VAR 0 2
70220: ARRAY
70221: PUSH
70222: LD_INT 1
70224: ARRAY
70225: PUSH
70226: LD_INT 3
70228: ARRAY
70229: PPUSH
70230: LD_EXP 55
70234: PUSH
70235: LD_VAR 0 2
70239: ARRAY
70240: PUSH
70241: LD_INT 1
70243: ARRAY
70244: PUSH
70245: LD_INT 4
70247: ARRAY
70248: PPUSH
70249: LD_EXP 50
70253: PUSH
70254: LD_VAR 0 2
70258: ARRAY
70259: PPUSH
70260: LD_INT 21
70262: PUSH
70263: LD_INT 3
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PPUSH
70270: CALL_OW 72
70274: PPUSH
70275: EMPTY
70276: PPUSH
70277: CALL 31550 0 7
70281: NOT
70282: IFFALSE 70332
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
70284: LD_ADDR_EXP 55
70288: PUSH
70289: LD_EXP 55
70293: PPUSH
70294: LD_VAR 0 2
70298: PPUSH
70299: LD_EXP 55
70303: PUSH
70304: LD_VAR 0 2
70308: ARRAY
70309: PPUSH
70310: LD_INT 1
70312: PPUSH
70313: LD_INT 1
70315: NEG
70316: PPUSH
70317: LD_INT 0
70319: PPUSH
70320: CALL 24115 0 4
70324: PPUSH
70325: CALL_OW 1
70329: ST_TO_ADDR
// continue ;
70330: GO 69180
// end ; end ; end ;
70332: GO 69180
70334: POP
70335: POP
// end ;
70336: LD_VAR 0 1
70340: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
70341: LD_INT 0
70343: PPUSH
70344: PPUSH
70345: PPUSH
70346: PPUSH
70347: PPUSH
70348: PPUSH
// if not mc_bases then
70349: LD_EXP 50
70353: NOT
70354: IFFALSE 70358
// exit ;
70356: GO 70785
// for i = 1 to mc_bases do
70358: LD_ADDR_VAR 0 2
70362: PUSH
70363: DOUBLE
70364: LD_INT 1
70366: DEC
70367: ST_TO_ADDR
70368: LD_EXP 50
70372: PUSH
70373: FOR_TO
70374: IFFALSE 70783
// begin tmp := mc_build_upgrade [ i ] ;
70376: LD_ADDR_VAR 0 4
70380: PUSH
70381: LD_EXP 82
70385: PUSH
70386: LD_VAR 0 2
70390: ARRAY
70391: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
70392: LD_ADDR_VAR 0 6
70396: PUSH
70397: LD_EXP 83
70401: PUSH
70402: LD_VAR 0 2
70406: ARRAY
70407: PPUSH
70408: LD_INT 2
70410: PUSH
70411: LD_INT 30
70413: PUSH
70414: LD_INT 6
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: LD_INT 30
70423: PUSH
70424: LD_INT 7
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: EMPTY
70432: LIST
70433: LIST
70434: LIST
70435: PPUSH
70436: CALL_OW 72
70440: ST_TO_ADDR
// if not tmp and not lab then
70441: LD_VAR 0 4
70445: NOT
70446: PUSH
70447: LD_VAR 0 6
70451: NOT
70452: AND
70453: IFFALSE 70457
// continue ;
70455: GO 70373
// if tmp then
70457: LD_VAR 0 4
70461: IFFALSE 70581
// for j in tmp do
70463: LD_ADDR_VAR 0 3
70467: PUSH
70468: LD_VAR 0 4
70472: PUSH
70473: FOR_IN
70474: IFFALSE 70579
// begin if UpgradeCost ( j ) then
70476: LD_VAR 0 3
70480: PPUSH
70481: CALL 31210 0 1
70485: IFFALSE 70577
// begin ComUpgrade ( j ) ;
70487: LD_VAR 0 3
70491: PPUSH
70492: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
70496: LD_ADDR_EXP 82
70500: PUSH
70501: LD_EXP 82
70505: PPUSH
70506: LD_VAR 0 2
70510: PPUSH
70511: LD_EXP 82
70515: PUSH
70516: LD_VAR 0 2
70520: ARRAY
70521: PUSH
70522: LD_VAR 0 3
70526: DIFF
70527: PPUSH
70528: CALL_OW 1
70532: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
70533: LD_ADDR_EXP 57
70537: PUSH
70538: LD_EXP 57
70542: PPUSH
70543: LD_VAR 0 2
70547: PUSH
70548: LD_EXP 57
70552: PUSH
70553: LD_VAR 0 2
70557: ARRAY
70558: PUSH
70559: LD_INT 1
70561: PLUS
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: PPUSH
70567: LD_VAR 0 3
70571: PPUSH
70572: CALL 24697 0 3
70576: ST_TO_ADDR
// end ; end ;
70577: GO 70473
70579: POP
70580: POP
// if not lab or not mc_lab_upgrade [ i ] then
70581: LD_VAR 0 6
70585: NOT
70586: PUSH
70587: LD_EXP 84
70591: PUSH
70592: LD_VAR 0 2
70596: ARRAY
70597: NOT
70598: OR
70599: IFFALSE 70603
// continue ;
70601: GO 70373
// for j in lab do
70603: LD_ADDR_VAR 0 3
70607: PUSH
70608: LD_VAR 0 6
70612: PUSH
70613: FOR_IN
70614: IFFALSE 70779
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
70616: LD_VAR 0 3
70620: PPUSH
70621: CALL_OW 266
70625: PUSH
70626: LD_INT 6
70628: PUSH
70629: LD_INT 7
70631: PUSH
70632: EMPTY
70633: LIST
70634: LIST
70635: IN
70636: PUSH
70637: LD_VAR 0 3
70641: PPUSH
70642: CALL_OW 461
70646: PUSH
70647: LD_INT 1
70649: NONEQUAL
70650: AND
70651: IFFALSE 70777
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
70653: LD_VAR 0 3
70657: PPUSH
70658: LD_EXP 84
70662: PUSH
70663: LD_VAR 0 2
70667: ARRAY
70668: PUSH
70669: LD_INT 1
70671: ARRAY
70672: PPUSH
70673: CALL 31415 0 2
70677: IFFALSE 70777
// begin ComCancel ( j ) ;
70679: LD_VAR 0 3
70683: PPUSH
70684: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
70688: LD_VAR 0 3
70692: PPUSH
70693: LD_EXP 84
70697: PUSH
70698: LD_VAR 0 2
70702: ARRAY
70703: PUSH
70704: LD_INT 1
70706: ARRAY
70707: PPUSH
70708: CALL_OW 207
// if not j in mc_construct_list [ i ] then
70712: LD_VAR 0 3
70716: PUSH
70717: LD_EXP 57
70721: PUSH
70722: LD_VAR 0 2
70726: ARRAY
70727: IN
70728: NOT
70729: IFFALSE 70775
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
70731: LD_ADDR_EXP 57
70735: PUSH
70736: LD_EXP 57
70740: PPUSH
70741: LD_VAR 0 2
70745: PUSH
70746: LD_EXP 57
70750: PUSH
70751: LD_VAR 0 2
70755: ARRAY
70756: PUSH
70757: LD_INT 1
70759: PLUS
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: PPUSH
70765: LD_VAR 0 3
70769: PPUSH
70770: CALL 24697 0 3
70774: ST_TO_ADDR
// break ;
70775: GO 70779
// end ; end ; end ;
70777: GO 70613
70779: POP
70780: POP
// end ;
70781: GO 70373
70783: POP
70784: POP
// end ;
70785: LD_VAR 0 1
70789: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
70790: LD_INT 0
70792: PPUSH
70793: PPUSH
70794: PPUSH
70795: PPUSH
70796: PPUSH
70797: PPUSH
70798: PPUSH
70799: PPUSH
70800: PPUSH
// if not mc_bases then
70801: LD_EXP 50
70805: NOT
70806: IFFALSE 70810
// exit ;
70808: GO 71215
// for i = 1 to mc_bases do
70810: LD_ADDR_VAR 0 2
70814: PUSH
70815: DOUBLE
70816: LD_INT 1
70818: DEC
70819: ST_TO_ADDR
70820: LD_EXP 50
70824: PUSH
70825: FOR_TO
70826: IFFALSE 71213
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
70828: LD_EXP 58
70832: PUSH
70833: LD_VAR 0 2
70837: ARRAY
70838: NOT
70839: PUSH
70840: LD_EXP 50
70844: PUSH
70845: LD_VAR 0 2
70849: ARRAY
70850: PPUSH
70851: LD_INT 30
70853: PUSH
70854: LD_INT 3
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PPUSH
70861: CALL_OW 72
70865: NOT
70866: OR
70867: IFFALSE 70871
// continue ;
70869: GO 70825
// busy := false ;
70871: LD_ADDR_VAR 0 8
70875: PUSH
70876: LD_INT 0
70878: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
70879: LD_ADDR_VAR 0 4
70883: PUSH
70884: LD_EXP 50
70888: PUSH
70889: LD_VAR 0 2
70893: ARRAY
70894: PPUSH
70895: LD_INT 30
70897: PUSH
70898: LD_INT 3
70900: PUSH
70901: EMPTY
70902: LIST
70903: LIST
70904: PPUSH
70905: CALL_OW 72
70909: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
70910: LD_ADDR_VAR 0 6
70914: PUSH
70915: LD_EXP 58
70919: PUSH
70920: LD_VAR 0 2
70924: ARRAY
70925: PPUSH
70926: LD_INT 2
70928: PUSH
70929: LD_INT 30
70931: PUSH
70932: LD_INT 32
70934: PUSH
70935: EMPTY
70936: LIST
70937: LIST
70938: PUSH
70939: LD_INT 30
70941: PUSH
70942: LD_INT 33
70944: PUSH
70945: EMPTY
70946: LIST
70947: LIST
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: LIST
70953: PPUSH
70954: CALL_OW 72
70958: ST_TO_ADDR
// if not t then
70959: LD_VAR 0 6
70963: NOT
70964: IFFALSE 70968
// continue ;
70966: GO 70825
// for j in tmp do
70968: LD_ADDR_VAR 0 3
70972: PUSH
70973: LD_VAR 0 4
70977: PUSH
70978: FOR_IN
70979: IFFALSE 71009
// if not BuildingStatus ( j ) = bs_idle then
70981: LD_VAR 0 3
70985: PPUSH
70986: CALL_OW 461
70990: PUSH
70991: LD_INT 2
70993: EQUAL
70994: NOT
70995: IFFALSE 71007
// begin busy := true ;
70997: LD_ADDR_VAR 0 8
71001: PUSH
71002: LD_INT 1
71004: ST_TO_ADDR
// break ;
71005: GO 71009
// end ;
71007: GO 70978
71009: POP
71010: POP
// if busy then
71011: LD_VAR 0 8
71015: IFFALSE 71019
// continue ;
71017: GO 70825
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
71019: LD_ADDR_VAR 0 7
71023: PUSH
71024: LD_VAR 0 6
71028: PPUSH
71029: LD_INT 35
71031: PUSH
71032: LD_INT 0
71034: PUSH
71035: EMPTY
71036: LIST
71037: LIST
71038: PPUSH
71039: CALL_OW 72
71043: ST_TO_ADDR
// if tw then
71044: LD_VAR 0 7
71048: IFFALSE 71125
// begin tw := tw [ 1 ] ;
71050: LD_ADDR_VAR 0 7
71054: PUSH
71055: LD_VAR 0 7
71059: PUSH
71060: LD_INT 1
71062: ARRAY
71063: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
71064: LD_ADDR_VAR 0 9
71068: PUSH
71069: LD_VAR 0 7
71073: PPUSH
71074: LD_EXP 75
71078: PUSH
71079: LD_VAR 0 2
71083: ARRAY
71084: PPUSH
71085: CALL 29707 0 2
71089: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
71090: LD_EXP 89
71094: PUSH
71095: LD_VAR 0 2
71099: ARRAY
71100: IFFALSE 71123
// if not weapon in mc_allowed_tower_weapons [ i ] then
71102: LD_VAR 0 9
71106: PUSH
71107: LD_EXP 89
71111: PUSH
71112: LD_VAR 0 2
71116: ARRAY
71117: IN
71118: NOT
71119: IFFALSE 71123
// continue ;
71121: GO 70825
// end else
71123: GO 71188
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
71125: LD_ADDR_VAR 0 5
71129: PUSH
71130: LD_EXP 58
71134: PUSH
71135: LD_VAR 0 2
71139: ARRAY
71140: PPUSH
71141: LD_VAR 0 4
71145: PPUSH
71146: CALL 55996 0 2
71150: ST_TO_ADDR
// if not tmp2 then
71151: LD_VAR 0 5
71155: NOT
71156: IFFALSE 71160
// continue ;
71158: GO 70825
// tw := tmp2 [ 1 ] ;
71160: LD_ADDR_VAR 0 7
71164: PUSH
71165: LD_VAR 0 5
71169: PUSH
71170: LD_INT 1
71172: ARRAY
71173: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
71174: LD_ADDR_VAR 0 9
71178: PUSH
71179: LD_VAR 0 5
71183: PUSH
71184: LD_INT 2
71186: ARRAY
71187: ST_TO_ADDR
// end ; if not weapon then
71188: LD_VAR 0 9
71192: NOT
71193: IFFALSE 71197
// continue ;
71195: GO 70825
// ComPlaceWeapon ( tw , weapon ) ;
71197: LD_VAR 0 7
71201: PPUSH
71202: LD_VAR 0 9
71206: PPUSH
71207: CALL_OW 148
// end ;
71211: GO 70825
71213: POP
71214: POP
// end ;
71215: LD_VAR 0 1
71219: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list , r ; begin
71220: LD_INT 0
71222: PPUSH
71223: PPUSH
71224: PPUSH
71225: PPUSH
71226: PPUSH
71227: PPUSH
71228: PPUSH
// if not mc_bases then
71229: LD_EXP 50
71233: NOT
71234: IFFALSE 71238
// exit ;
71236: GO 72006
// for i = 1 to mc_bases do
71238: LD_ADDR_VAR 0 2
71242: PUSH
71243: DOUBLE
71244: LD_INT 1
71246: DEC
71247: ST_TO_ADDR
71248: LD_EXP 50
71252: PUSH
71253: FOR_TO
71254: IFFALSE 72004
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
71256: LD_EXP 63
71260: PUSH
71261: LD_VAR 0 2
71265: ARRAY
71266: NOT
71267: PUSH
71268: LD_EXP 63
71272: PUSH
71273: LD_VAR 0 2
71277: ARRAY
71278: PUSH
71279: LD_EXP 64
71283: PUSH
71284: LD_VAR 0 2
71288: ARRAY
71289: EQUAL
71290: OR
71291: PUSH
71292: LD_EXP 73
71296: PUSH
71297: LD_VAR 0 2
71301: ARRAY
71302: OR
71303: IFFALSE 71307
// continue ;
71305: GO 71253
// if mc_miners [ i ] then
71307: LD_EXP 64
71311: PUSH
71312: LD_VAR 0 2
71316: ARRAY
71317: IFFALSE 71691
// begin for j = mc_miners [ i ] downto 1 do
71319: LD_ADDR_VAR 0 3
71323: PUSH
71324: DOUBLE
71325: LD_EXP 64
71329: PUSH
71330: LD_VAR 0 2
71334: ARRAY
71335: INC
71336: ST_TO_ADDR
71337: LD_INT 1
71339: PUSH
71340: FOR_DOWNTO
71341: IFFALSE 71689
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
71343: LD_EXP 64
71347: PUSH
71348: LD_VAR 0 2
71352: ARRAY
71353: PUSH
71354: LD_VAR 0 3
71358: ARRAY
71359: PPUSH
71360: CALL_OW 301
71364: PUSH
71365: LD_EXP 64
71369: PUSH
71370: LD_VAR 0 2
71374: ARRAY
71375: PUSH
71376: LD_VAR 0 3
71380: ARRAY
71381: PPUSH
71382: CALL_OW 257
71386: PUSH
71387: LD_INT 1
71389: NONEQUAL
71390: OR
71391: IFFALSE 71454
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
71393: LD_ADDR_VAR 0 5
71397: PUSH
71398: LD_EXP 64
71402: PUSH
71403: LD_VAR 0 2
71407: ARRAY
71408: PUSH
71409: LD_EXP 64
71413: PUSH
71414: LD_VAR 0 2
71418: ARRAY
71419: PUSH
71420: LD_VAR 0 3
71424: ARRAY
71425: DIFF
71426: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
71427: LD_ADDR_EXP 64
71431: PUSH
71432: LD_EXP 64
71436: PPUSH
71437: LD_VAR 0 2
71441: PPUSH
71442: LD_VAR 0 5
71446: PPUSH
71447: CALL_OW 1
71451: ST_TO_ADDR
// continue ;
71452: GO 71340
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
71454: LD_EXP 64
71458: PUSH
71459: LD_VAR 0 2
71463: ARRAY
71464: PUSH
71465: LD_VAR 0 3
71469: ARRAY
71470: PPUSH
71471: CALL_OW 257
71475: PUSH
71476: LD_INT 1
71478: EQUAL
71479: PUSH
71480: LD_EXP 64
71484: PUSH
71485: LD_VAR 0 2
71489: ARRAY
71490: PUSH
71491: LD_VAR 0 3
71495: ARRAY
71496: PPUSH
71497: CALL_OW 459
71501: NOT
71502: AND
71503: PUSH
71504: LD_EXP 64
71508: PUSH
71509: LD_VAR 0 2
71513: ARRAY
71514: PUSH
71515: LD_VAR 0 3
71519: ARRAY
71520: PPUSH
71521: CALL_OW 314
71525: NOT
71526: AND
71527: IFFALSE 71687
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
71529: LD_EXP 64
71533: PUSH
71534: LD_VAR 0 2
71538: ARRAY
71539: PUSH
71540: LD_VAR 0 3
71544: ARRAY
71545: PPUSH
71546: CALL_OW 310
71550: IFFALSE 71573
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
71552: LD_EXP 64
71556: PUSH
71557: LD_VAR 0 2
71561: ARRAY
71562: PUSH
71563: LD_VAR 0 3
71567: ARRAY
71568: PPUSH
71569: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
71573: LD_EXP 64
71577: PUSH
71578: LD_VAR 0 2
71582: ARRAY
71583: PUSH
71584: LD_VAR 0 3
71588: ARRAY
71589: PPUSH
71590: CALL_OW 314
71594: NOT
71595: IFFALSE 71687
// begin r := rand ( 1 , mc_mines [ i ] ) ;
71597: LD_ADDR_VAR 0 7
71601: PUSH
71602: LD_INT 1
71604: PPUSH
71605: LD_EXP 63
71609: PUSH
71610: LD_VAR 0 2
71614: ARRAY
71615: PPUSH
71616: CALL_OW 12
71620: ST_TO_ADDR
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ r ] [ 1 ] , mc_mines [ i ] [ r ] [ 2 ] , 0 ) ;
71621: LD_EXP 64
71625: PUSH
71626: LD_VAR 0 2
71630: ARRAY
71631: PUSH
71632: LD_VAR 0 3
71636: ARRAY
71637: PPUSH
71638: LD_EXP 63
71642: PUSH
71643: LD_VAR 0 2
71647: ARRAY
71648: PUSH
71649: LD_VAR 0 7
71653: ARRAY
71654: PUSH
71655: LD_INT 1
71657: ARRAY
71658: PPUSH
71659: LD_EXP 63
71663: PUSH
71664: LD_VAR 0 2
71668: ARRAY
71669: PUSH
71670: LD_VAR 0 7
71674: ARRAY
71675: PUSH
71676: LD_INT 2
71678: ARRAY
71679: PPUSH
71680: LD_INT 0
71682: PPUSH
71683: CALL_OW 193
// end ; end ; end ;
71687: GO 71340
71689: POP
71690: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
71691: LD_ADDR_VAR 0 5
71695: PUSH
71696: LD_EXP 50
71700: PUSH
71701: LD_VAR 0 2
71705: ARRAY
71706: PPUSH
71707: LD_INT 2
71709: PUSH
71710: LD_INT 30
71712: PUSH
71713: LD_INT 4
71715: PUSH
71716: EMPTY
71717: LIST
71718: LIST
71719: PUSH
71720: LD_INT 30
71722: PUSH
71723: LD_INT 5
71725: PUSH
71726: EMPTY
71727: LIST
71728: LIST
71729: PUSH
71730: LD_INT 30
71732: PUSH
71733: LD_INT 32
71735: PUSH
71736: EMPTY
71737: LIST
71738: LIST
71739: PUSH
71740: EMPTY
71741: LIST
71742: LIST
71743: LIST
71744: LIST
71745: PPUSH
71746: CALL_OW 72
71750: ST_TO_ADDR
// if not tmp then
71751: LD_VAR 0 5
71755: NOT
71756: IFFALSE 71760
// continue ;
71758: GO 71253
// list := [ ] ;
71760: LD_ADDR_VAR 0 6
71764: PUSH
71765: EMPTY
71766: ST_TO_ADDR
// for j in tmp do
71767: LD_ADDR_VAR 0 3
71771: PUSH
71772: LD_VAR 0 5
71776: PUSH
71777: FOR_IN
71778: IFFALSE 71847
// begin for k in UnitsInside ( j ) do
71780: LD_ADDR_VAR 0 4
71784: PUSH
71785: LD_VAR 0 3
71789: PPUSH
71790: CALL_OW 313
71794: PUSH
71795: FOR_IN
71796: IFFALSE 71843
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
71798: LD_VAR 0 4
71802: PPUSH
71803: CALL_OW 257
71807: PUSH
71808: LD_INT 1
71810: EQUAL
71811: PUSH
71812: LD_VAR 0 4
71816: PPUSH
71817: CALL_OW 459
71821: NOT
71822: AND
71823: IFFALSE 71841
// list := list ^ k ;
71825: LD_ADDR_VAR 0 6
71829: PUSH
71830: LD_VAR 0 6
71834: PUSH
71835: LD_VAR 0 4
71839: ADD
71840: ST_TO_ADDR
71841: GO 71795
71843: POP
71844: POP
// end ;
71845: GO 71777
71847: POP
71848: POP
// list := list diff mc_miners [ i ] ;
71849: LD_ADDR_VAR 0 6
71853: PUSH
71854: LD_VAR 0 6
71858: PUSH
71859: LD_EXP 64
71863: PUSH
71864: LD_VAR 0 2
71868: ARRAY
71869: DIFF
71870: ST_TO_ADDR
// if not list then
71871: LD_VAR 0 6
71875: NOT
71876: IFFALSE 71880
// continue ;
71878: GO 71253
// k := mc_mines [ i ] - mc_miners [ i ] ;
71880: LD_ADDR_VAR 0 4
71884: PUSH
71885: LD_EXP 63
71889: PUSH
71890: LD_VAR 0 2
71894: ARRAY
71895: PUSH
71896: LD_EXP 64
71900: PUSH
71901: LD_VAR 0 2
71905: ARRAY
71906: MINUS
71907: ST_TO_ADDR
// if k > list then
71908: LD_VAR 0 4
71912: PUSH
71913: LD_VAR 0 6
71917: GREATER
71918: IFFALSE 71930
// k := list ;
71920: LD_ADDR_VAR 0 4
71924: PUSH
71925: LD_VAR 0 6
71929: ST_TO_ADDR
// for j = 1 to k do
71930: LD_ADDR_VAR 0 3
71934: PUSH
71935: DOUBLE
71936: LD_INT 1
71938: DEC
71939: ST_TO_ADDR
71940: LD_VAR 0 4
71944: PUSH
71945: FOR_TO
71946: IFFALSE 72000
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
71948: LD_ADDR_EXP 64
71952: PUSH
71953: LD_EXP 64
71957: PPUSH
71958: LD_VAR 0 2
71962: PUSH
71963: LD_EXP 64
71967: PUSH
71968: LD_VAR 0 2
71972: ARRAY
71973: PUSH
71974: LD_INT 1
71976: PLUS
71977: PUSH
71978: EMPTY
71979: LIST
71980: LIST
71981: PPUSH
71982: LD_VAR 0 6
71986: PUSH
71987: LD_VAR 0 3
71991: ARRAY
71992: PPUSH
71993: CALL 24697 0 3
71997: ST_TO_ADDR
71998: GO 71945
72000: POP
72001: POP
// end ;
72002: GO 71253
72004: POP
72005: POP
// end ;
72006: LD_VAR 0 1
72010: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , side , target , cargo , depot , fac , components ; begin
72011: LD_INT 0
72013: PPUSH
72014: PPUSH
72015: PPUSH
72016: PPUSH
72017: PPUSH
72018: PPUSH
72019: PPUSH
72020: PPUSH
72021: PPUSH
72022: PPUSH
72023: PPUSH
// if not mc_bases then
72024: LD_EXP 50
72028: NOT
72029: IFFALSE 72033
// exit ;
72031: GO 73856
// for i = 1 to mc_bases do
72033: LD_ADDR_VAR 0 2
72037: PUSH
72038: DOUBLE
72039: LD_INT 1
72041: DEC
72042: ST_TO_ADDR
72043: LD_EXP 50
72047: PUSH
72048: FOR_TO
72049: IFFALSE 73854
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
72051: LD_EXP 50
72055: PUSH
72056: LD_VAR 0 2
72060: ARRAY
72061: NOT
72062: PUSH
72063: LD_EXP 57
72067: PUSH
72068: LD_VAR 0 2
72072: ARRAY
72073: OR
72074: IFFALSE 72078
// continue ;
72076: GO 72048
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
72078: LD_EXP 66
72082: PUSH
72083: LD_VAR 0 2
72087: ARRAY
72088: NOT
72089: PUSH
72090: LD_EXP 67
72094: PUSH
72095: LD_VAR 0 2
72099: ARRAY
72100: AND
72101: IFFALSE 72139
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
72103: LD_ADDR_EXP 67
72107: PUSH
72108: LD_EXP 67
72112: PPUSH
72113: LD_VAR 0 2
72117: PPUSH
72118: EMPTY
72119: PPUSH
72120: CALL_OW 1
72124: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
72125: LD_VAR 0 2
72129: PPUSH
72130: LD_INT 107
72132: PPUSH
72133: CALL 62907 0 2
// continue ;
72137: GO 72048
// end ; target := [ ] ;
72139: LD_ADDR_VAR 0 7
72143: PUSH
72144: EMPTY
72145: ST_TO_ADDR
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
72146: LD_ADDR_VAR 0 6
72150: PUSH
72151: LD_EXP 50
72155: PUSH
72156: LD_VAR 0 2
72160: ARRAY
72161: PUSH
72162: LD_INT 1
72164: ARRAY
72165: PPUSH
72166: CALL_OW 255
72170: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72171: LD_ADDR_VAR 0 9
72175: PUSH
72176: LD_EXP 50
72180: PUSH
72181: LD_VAR 0 2
72185: ARRAY
72186: PPUSH
72187: LD_INT 2
72189: PUSH
72190: LD_INT 30
72192: PUSH
72193: LD_INT 0
72195: PUSH
72196: EMPTY
72197: LIST
72198: LIST
72199: PUSH
72200: LD_INT 30
72202: PUSH
72203: LD_INT 1
72205: PUSH
72206: EMPTY
72207: LIST
72208: LIST
72209: PUSH
72210: EMPTY
72211: LIST
72212: LIST
72213: LIST
72214: PPUSH
72215: CALL_OW 72
72219: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
72220: LD_ADDR_VAR 0 3
72224: PUSH
72225: DOUBLE
72226: LD_EXP 66
72230: PUSH
72231: LD_VAR 0 2
72235: ARRAY
72236: INC
72237: ST_TO_ADDR
72238: LD_INT 1
72240: PUSH
72241: FOR_DOWNTO
72242: IFFALSE 72487
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
72244: LD_EXP 66
72248: PUSH
72249: LD_VAR 0 2
72253: ARRAY
72254: PUSH
72255: LD_VAR 0 3
72259: ARRAY
72260: PUSH
72261: LD_INT 2
72263: ARRAY
72264: PPUSH
72265: LD_EXP 66
72269: PUSH
72270: LD_VAR 0 2
72274: ARRAY
72275: PUSH
72276: LD_VAR 0 3
72280: ARRAY
72281: PUSH
72282: LD_INT 3
72284: ARRAY
72285: PPUSH
72286: CALL_OW 488
72290: PUSH
72291: LD_EXP 66
72295: PUSH
72296: LD_VAR 0 2
72300: ARRAY
72301: PUSH
72302: LD_VAR 0 3
72306: ARRAY
72307: PUSH
72308: LD_INT 2
72310: ARRAY
72311: PPUSH
72312: LD_EXP 66
72316: PUSH
72317: LD_VAR 0 2
72321: ARRAY
72322: PUSH
72323: LD_VAR 0 3
72327: ARRAY
72328: PUSH
72329: LD_INT 3
72331: ARRAY
72332: PPUSH
72333: CALL_OW 284
72337: PUSH
72338: LD_INT 0
72340: EQUAL
72341: AND
72342: IFFALSE 72397
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
72344: LD_ADDR_VAR 0 5
72348: PUSH
72349: LD_EXP 66
72353: PUSH
72354: LD_VAR 0 2
72358: ARRAY
72359: PPUSH
72360: LD_VAR 0 3
72364: PPUSH
72365: CALL_OW 3
72369: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
72370: LD_ADDR_EXP 66
72374: PUSH
72375: LD_EXP 66
72379: PPUSH
72380: LD_VAR 0 2
72384: PPUSH
72385: LD_VAR 0 5
72389: PPUSH
72390: CALL_OW 1
72394: ST_TO_ADDR
// continue ;
72395: GO 72241
// end ; if DangerAtRangeXY ( side , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
72397: LD_VAR 0 6
72401: PPUSH
72402: LD_EXP 66
72406: PUSH
72407: LD_VAR 0 2
72411: ARRAY
72412: PUSH
72413: LD_VAR 0 3
72417: ARRAY
72418: PUSH
72419: LD_INT 2
72421: ARRAY
72422: PPUSH
72423: LD_EXP 66
72427: PUSH
72428: LD_VAR 0 2
72432: ARRAY
72433: PUSH
72434: LD_VAR 0 3
72438: ARRAY
72439: PUSH
72440: LD_INT 3
72442: ARRAY
72443: PPUSH
72444: LD_INT 30
72446: PPUSH
72447: CALL 25593 0 4
72451: PUSH
72452: LD_INT 4
72454: ARRAY
72455: PUSH
72456: LD_INT 0
72458: EQUAL
72459: IFFALSE 72485
// begin target := mc_crates [ i ] [ j ] ;
72461: LD_ADDR_VAR 0 7
72465: PUSH
72466: LD_EXP 66
72470: PUSH
72471: LD_VAR 0 2
72475: ARRAY
72476: PUSH
72477: LD_VAR 0 3
72481: ARRAY
72482: ST_TO_ADDR
// break ;
72483: GO 72487
// end ; end ;
72485: GO 72241
72487: POP
72488: POP
// if not target then
72489: LD_VAR 0 7
72493: NOT
72494: IFFALSE 72498
// continue ;
72496: GO 72048
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
72498: LD_ADDR_VAR 0 8
72502: PUSH
72503: LD_EXP 69
72507: PUSH
72508: LD_VAR 0 2
72512: ARRAY
72513: PPUSH
72514: LD_INT 2
72516: PUSH
72517: LD_INT 3
72519: PUSH
72520: LD_INT 58
72522: PUSH
72523: EMPTY
72524: LIST
72525: PUSH
72526: EMPTY
72527: LIST
72528: LIST
72529: PUSH
72530: LD_INT 61
72532: PUSH
72533: EMPTY
72534: LIST
72535: PUSH
72536: LD_INT 33
72538: PUSH
72539: LD_INT 5
72541: PUSH
72542: EMPTY
72543: LIST
72544: LIST
72545: PUSH
72546: LD_INT 33
72548: PUSH
72549: LD_INT 3
72551: PUSH
72552: EMPTY
72553: LIST
72554: LIST
72555: PUSH
72556: EMPTY
72557: LIST
72558: LIST
72559: LIST
72560: LIST
72561: LIST
72562: PUSH
72563: LD_INT 2
72565: PUSH
72566: LD_INT 34
72568: PUSH
72569: LD_INT 32
72571: PUSH
72572: EMPTY
72573: LIST
72574: LIST
72575: PUSH
72576: LD_INT 34
72578: PUSH
72579: LD_INT 51
72581: PUSH
72582: EMPTY
72583: LIST
72584: LIST
72585: PUSH
72586: LD_INT 34
72588: PUSH
72589: LD_INT 12
72591: PUSH
72592: EMPTY
72593: LIST
72594: LIST
72595: PUSH
72596: EMPTY
72597: LIST
72598: LIST
72599: LIST
72600: LIST
72601: PUSH
72602: EMPTY
72603: LIST
72604: LIST
72605: PPUSH
72606: CALL_OW 72
72610: ST_TO_ADDR
// if not cargo then
72611: LD_VAR 0 8
72615: NOT
72616: IFFALSE 73322
// begin if mc_crates_collector [ i ] < 5 then
72618: LD_EXP 67
72622: PUSH
72623: LD_VAR 0 2
72627: ARRAY
72628: PUSH
72629: LD_INT 5
72631: LESS
72632: IFFALSE 72998
// begin if mc_ape [ i ] then
72634: LD_EXP 79
72638: PUSH
72639: LD_VAR 0 2
72643: ARRAY
72644: IFFALSE 72691
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
72646: LD_ADDR_VAR 0 5
72650: PUSH
72651: LD_EXP 79
72655: PUSH
72656: LD_VAR 0 2
72660: ARRAY
72661: PPUSH
72662: LD_INT 25
72664: PUSH
72665: LD_INT 16
72667: PUSH
72668: EMPTY
72669: LIST
72670: LIST
72671: PUSH
72672: LD_INT 24
72674: PUSH
72675: LD_INT 750
72677: PUSH
72678: EMPTY
72679: LIST
72680: LIST
72681: PUSH
72682: EMPTY
72683: LIST
72684: LIST
72685: PPUSH
72686: CALL_OW 72
72690: ST_TO_ADDR
// if not tmp then
72691: LD_VAR 0 5
72695: NOT
72696: IFFALSE 72743
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
72698: LD_ADDR_VAR 0 5
72702: PUSH
72703: LD_EXP 50
72707: PUSH
72708: LD_VAR 0 2
72712: ARRAY
72713: PPUSH
72714: LD_INT 25
72716: PUSH
72717: LD_INT 2
72719: PUSH
72720: EMPTY
72721: LIST
72722: LIST
72723: PUSH
72724: LD_INT 24
72726: PUSH
72727: LD_INT 750
72729: PUSH
72730: EMPTY
72731: LIST
72732: LIST
72733: PUSH
72734: EMPTY
72735: LIST
72736: LIST
72737: PPUSH
72738: CALL_OW 72
72742: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
72743: LD_EXP 79
72747: PUSH
72748: LD_VAR 0 2
72752: ARRAY
72753: PUSH
72754: LD_EXP 50
72758: PUSH
72759: LD_VAR 0 2
72763: ARRAY
72764: PPUSH
72765: LD_INT 25
72767: PUSH
72768: LD_INT 2
72770: PUSH
72771: EMPTY
72772: LIST
72773: LIST
72774: PUSH
72775: LD_INT 24
72777: PUSH
72778: LD_INT 750
72780: PUSH
72781: EMPTY
72782: LIST
72783: LIST
72784: PUSH
72785: EMPTY
72786: LIST
72787: LIST
72788: PPUSH
72789: CALL_OW 72
72793: AND
72794: PUSH
72795: LD_VAR 0 5
72799: PUSH
72800: LD_INT 5
72802: LESS
72803: AND
72804: IFFALSE 72886
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
72806: LD_ADDR_VAR 0 3
72810: PUSH
72811: LD_EXP 50
72815: PUSH
72816: LD_VAR 0 2
72820: ARRAY
72821: PPUSH
72822: LD_INT 25
72824: PUSH
72825: LD_INT 2
72827: PUSH
72828: EMPTY
72829: LIST
72830: LIST
72831: PUSH
72832: LD_INT 24
72834: PUSH
72835: LD_INT 750
72837: PUSH
72838: EMPTY
72839: LIST
72840: LIST
72841: PUSH
72842: EMPTY
72843: LIST
72844: LIST
72845: PPUSH
72846: CALL_OW 72
72850: PUSH
72851: FOR_IN
72852: IFFALSE 72884
// begin tmp := tmp union j ;
72854: LD_ADDR_VAR 0 5
72858: PUSH
72859: LD_VAR 0 5
72863: PUSH
72864: LD_VAR 0 3
72868: UNION
72869: ST_TO_ADDR
// if tmp >= 5 then
72870: LD_VAR 0 5
72874: PUSH
72875: LD_INT 5
72877: GREATEREQUAL
72878: IFFALSE 72882
// break ;
72880: GO 72884
// end ;
72882: GO 72851
72884: POP
72885: POP
// end ; if not tmp then
72886: LD_VAR 0 5
72890: NOT
72891: IFFALSE 72895
// continue ;
72893: GO 72048
// for j in tmp do
72895: LD_ADDR_VAR 0 3
72899: PUSH
72900: LD_VAR 0 5
72904: PUSH
72905: FOR_IN
72906: IFFALSE 72996
// if not GetTag ( j ) then
72908: LD_VAR 0 3
72912: PPUSH
72913: CALL_OW 110
72917: NOT
72918: IFFALSE 72994
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
72920: LD_ADDR_EXP 67
72924: PUSH
72925: LD_EXP 67
72929: PPUSH
72930: LD_VAR 0 2
72934: PUSH
72935: LD_EXP 67
72939: PUSH
72940: LD_VAR 0 2
72944: ARRAY
72945: PUSH
72946: LD_INT 1
72948: PLUS
72949: PUSH
72950: EMPTY
72951: LIST
72952: LIST
72953: PPUSH
72954: LD_VAR 0 3
72958: PPUSH
72959: CALL 24697 0 3
72963: ST_TO_ADDR
// SetTag ( j , 107 ) ;
72964: LD_VAR 0 3
72968: PPUSH
72969: LD_INT 107
72971: PPUSH
72972: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
72976: LD_EXP 67
72980: PUSH
72981: LD_VAR 0 2
72985: ARRAY
72986: PUSH
72987: LD_INT 5
72989: GREATEREQUAL
72990: IFFALSE 72994
// break ;
72992: GO 72996
// end ;
72994: GO 72905
72996: POP
72997: POP
// end ; if mc_crates_collector [ i ] and target then
72998: LD_EXP 67
73002: PUSH
73003: LD_VAR 0 2
73007: ARRAY
73008: PUSH
73009: LD_VAR 0 7
73013: AND
73014: IFFALSE 73320
// begin if mc_crates_collector [ i ] < target [ 1 ] then
73016: LD_EXP 67
73020: PUSH
73021: LD_VAR 0 2
73025: ARRAY
73026: PUSH
73027: LD_VAR 0 7
73031: PUSH
73032: LD_INT 1
73034: ARRAY
73035: LESS
73036: IFFALSE 73056
// tmp := mc_crates_collector [ i ] else
73038: LD_ADDR_VAR 0 5
73042: PUSH
73043: LD_EXP 67
73047: PUSH
73048: LD_VAR 0 2
73052: ARRAY
73053: ST_TO_ADDR
73054: GO 73070
// tmp := target [ 1 ] ;
73056: LD_ADDR_VAR 0 5
73060: PUSH
73061: LD_VAR 0 7
73065: PUSH
73066: LD_INT 1
73068: ARRAY
73069: ST_TO_ADDR
// k := 0 ;
73070: LD_ADDR_VAR 0 4
73074: PUSH
73075: LD_INT 0
73077: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
73078: LD_ADDR_VAR 0 3
73082: PUSH
73083: LD_EXP 67
73087: PUSH
73088: LD_VAR 0 2
73092: ARRAY
73093: PUSH
73094: FOR_IN
73095: IFFALSE 73318
// begin k := k + 1 ;
73097: LD_ADDR_VAR 0 4
73101: PUSH
73102: LD_VAR 0 4
73106: PUSH
73107: LD_INT 1
73109: PLUS
73110: ST_TO_ADDR
// if k > tmp then
73111: LD_VAR 0 4
73115: PUSH
73116: LD_VAR 0 5
73120: GREATER
73121: IFFALSE 73125
// break ;
73123: GO 73318
// if not GetClass ( j ) in [ 2 , 16 ] then
73125: LD_VAR 0 3
73129: PPUSH
73130: CALL_OW 257
73134: PUSH
73135: LD_INT 2
73137: PUSH
73138: LD_INT 16
73140: PUSH
73141: EMPTY
73142: LIST
73143: LIST
73144: IN
73145: NOT
73146: IFFALSE 73199
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
73148: LD_ADDR_EXP 67
73152: PUSH
73153: LD_EXP 67
73157: PPUSH
73158: LD_VAR 0 2
73162: PPUSH
73163: LD_EXP 67
73167: PUSH
73168: LD_VAR 0 2
73172: ARRAY
73173: PUSH
73174: LD_VAR 0 3
73178: DIFF
73179: PPUSH
73180: CALL_OW 1
73184: ST_TO_ADDR
// SetTag ( j , 0 ) ;
73185: LD_VAR 0 3
73189: PPUSH
73190: LD_INT 0
73192: PPUSH
73193: CALL_OW 109
// continue ;
73197: GO 73094
// end ; if IsInUnit ( j ) then
73199: LD_VAR 0 3
73203: PPUSH
73204: CALL_OW 310
73208: IFFALSE 73219
// ComExitBuilding ( j ) ;
73210: LD_VAR 0 3
73214: PPUSH
73215: CALL_OW 122
// wait ( 3 ) ;
73219: LD_INT 3
73221: PPUSH
73222: CALL_OW 67
// if HasTask ( j ) and DangerAtRangeXY ( side , target [ 2 ] , target [ 3 ] , 30 ) [ 4 ] then
73226: LD_VAR 0 3
73230: PPUSH
73231: CALL_OW 314
73235: PUSH
73236: LD_VAR 0 6
73240: PPUSH
73241: LD_VAR 0 7
73245: PUSH
73246: LD_INT 2
73248: ARRAY
73249: PPUSH
73250: LD_VAR 0 7
73254: PUSH
73255: LD_INT 3
73257: ARRAY
73258: PPUSH
73259: LD_INT 30
73261: PPUSH
73262: CALL 25593 0 4
73266: PUSH
73267: LD_INT 4
73269: ARRAY
73270: AND
73271: IFFALSE 73289
// ComStandNearbyBuilding ( j , depot ) else
73273: LD_VAR 0 3
73277: PPUSH
73278: LD_VAR 0 9
73282: PPUSH
73283: CALL 21275 0 2
73287: GO 73316
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
73289: LD_VAR 0 3
73293: PPUSH
73294: LD_VAR 0 7
73298: PUSH
73299: LD_INT 2
73301: ARRAY
73302: PPUSH
73303: LD_VAR 0 7
73307: PUSH
73308: LD_INT 3
73310: ARRAY
73311: PPUSH
73312: CALL_OW 117
// end ;
73316: GO 73094
73318: POP
73319: POP
// end ; end else
73320: GO 73852
// begin for j in cargo do
73322: LD_ADDR_VAR 0 3
73326: PUSH
73327: LD_VAR 0 8
73331: PUSH
73332: FOR_IN
73333: IFFALSE 73850
// begin if GetTag ( j ) <> 0 then
73335: LD_VAR 0 3
73339: PPUSH
73340: CALL_OW 110
73344: PUSH
73345: LD_INT 0
73347: NONEQUAL
73348: IFFALSE 73352
// continue ;
73350: GO 73332
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
73352: LD_VAR 0 3
73356: PPUSH
73357: CALL_OW 256
73361: PUSH
73362: LD_INT 1000
73364: LESS
73365: PUSH
73366: LD_VAR 0 3
73370: PPUSH
73371: LD_EXP 74
73375: PUSH
73376: LD_VAR 0 2
73380: ARRAY
73381: PPUSH
73382: CALL_OW 308
73386: NOT
73387: AND
73388: IFFALSE 73410
// ComMoveToArea ( j , mc_parking [ i ] ) ;
73390: LD_VAR 0 3
73394: PPUSH
73395: LD_EXP 74
73399: PUSH
73400: LD_VAR 0 2
73404: ARRAY
73405: PPUSH
73406: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
73410: LD_VAR 0 3
73414: PPUSH
73415: CALL_OW 256
73419: PUSH
73420: LD_INT 1000
73422: LESS
73423: PUSH
73424: LD_VAR 0 3
73428: PPUSH
73429: LD_EXP 74
73433: PUSH
73434: LD_VAR 0 2
73438: ARRAY
73439: PPUSH
73440: CALL_OW 308
73444: AND
73445: IFFALSE 73449
// continue ;
73447: GO 73332
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
73449: LD_VAR 0 3
73453: PPUSH
73454: CALL_OW 262
73458: PUSH
73459: LD_INT 2
73461: EQUAL
73462: PUSH
73463: LD_VAR 0 3
73467: PPUSH
73468: CALL_OW 261
73472: PUSH
73473: LD_INT 15
73475: LESS
73476: AND
73477: IFFALSE 73481
// continue ;
73479: GO 73332
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
73481: LD_VAR 0 3
73485: PPUSH
73486: CALL_OW 262
73490: PUSH
73491: LD_INT 1
73493: EQUAL
73494: PUSH
73495: LD_VAR 0 3
73499: PPUSH
73500: CALL_OW 261
73504: PUSH
73505: LD_INT 10
73507: LESS
73508: AND
73509: IFFALSE 73789
// begin if not depot then
73511: LD_VAR 0 9
73515: NOT
73516: IFFALSE 73520
// continue ;
73518: GO 73332
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
73520: LD_VAR 0 3
73524: PPUSH
73525: LD_VAR 0 9
73529: PPUSH
73530: LD_VAR 0 3
73534: PPUSH
73535: CALL_OW 74
73539: PPUSH
73540: CALL_OW 296
73544: PUSH
73545: LD_INT 6
73547: LESS
73548: IFFALSE 73564
// SetFuel ( j , 100 ) else
73550: LD_VAR 0 3
73554: PPUSH
73555: LD_INT 100
73557: PPUSH
73558: CALL_OW 240
73562: GO 73789
// if GetFuel ( j ) = 0 then
73564: LD_VAR 0 3
73568: PPUSH
73569: CALL_OW 261
73573: PUSH
73574: LD_INT 0
73576: EQUAL
73577: IFFALSE 73789
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
73579: LD_ADDR_EXP 69
73583: PUSH
73584: LD_EXP 69
73588: PPUSH
73589: LD_VAR 0 2
73593: PPUSH
73594: LD_EXP 69
73598: PUSH
73599: LD_VAR 0 2
73603: ARRAY
73604: PUSH
73605: LD_VAR 0 3
73609: DIFF
73610: PPUSH
73611: CALL_OW 1
73615: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
73616: LD_VAR 0 3
73620: PPUSH
73621: CALL_OW 263
73625: PUSH
73626: LD_INT 1
73628: EQUAL
73629: IFFALSE 73645
// ComExitVehicle ( IsInUnit ( j ) ) ;
73631: LD_VAR 0 3
73635: PPUSH
73636: CALL_OW 310
73640: PPUSH
73641: CALL_OW 121
// if GetControl ( j ) = control_remote then
73645: LD_VAR 0 3
73649: PPUSH
73650: CALL_OW 263
73654: PUSH
73655: LD_INT 2
73657: EQUAL
73658: IFFALSE 73669
// ComUnlink ( j ) ;
73660: LD_VAR 0 3
73664: PPUSH
73665: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
73669: LD_ADDR_VAR 0 10
73673: PUSH
73674: LD_VAR 0 2
73678: PPUSH
73679: LD_INT 3
73681: PPUSH
73682: CALL 83281 0 2
73686: ST_TO_ADDR
// if fac then
73687: LD_VAR 0 10
73691: IFFALSE 73787
// begin for k in fac do
73693: LD_ADDR_VAR 0 4
73697: PUSH
73698: LD_VAR 0 10
73702: PUSH
73703: FOR_IN
73704: IFFALSE 73785
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
73706: LD_ADDR_VAR 0 11
73710: PUSH
73711: LD_VAR 0 10
73715: PPUSH
73716: LD_VAR 0 3
73720: PPUSH
73721: CALL_OW 265
73725: PPUSH
73726: LD_VAR 0 3
73730: PPUSH
73731: CALL_OW 262
73735: PPUSH
73736: LD_VAR 0 3
73740: PPUSH
73741: CALL_OW 263
73745: PPUSH
73746: LD_VAR 0 3
73750: PPUSH
73751: CALL_OW 264
73755: PPUSH
73756: CALL 22193 0 5
73760: ST_TO_ADDR
// if components then
73761: LD_VAR 0 11
73765: IFFALSE 73783
// begin MC_InsertProduceList ( i , components ) ;
73767: LD_VAR 0 2
73771: PPUSH
73772: LD_VAR 0 11
73776: PPUSH
73777: CALL 82826 0 2
// break ;
73781: GO 73785
// end ; end ;
73783: GO 73703
73785: POP
73786: POP
// end ; continue ;
73787: GO 73332
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
73789: LD_VAR 0 3
73793: PPUSH
73794: LD_INT 1
73796: PPUSH
73797: CALL_OW 289
73801: PUSH
73802: LD_INT 100
73804: LESS
73805: PUSH
73806: LD_VAR 0 3
73810: PPUSH
73811: CALL_OW 314
73815: NOT
73816: AND
73817: IFFALSE 73846
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
73819: LD_VAR 0 3
73823: PPUSH
73824: LD_VAR 0 7
73828: PUSH
73829: LD_INT 2
73831: ARRAY
73832: PPUSH
73833: LD_VAR 0 7
73837: PUSH
73838: LD_INT 3
73840: ARRAY
73841: PPUSH
73842: CALL_OW 117
// break ;
73846: GO 73850
// end ;
73848: GO 73332
73850: POP
73851: POP
// end ; end ;
73852: GO 72048
73854: POP
73855: POP
// end ;
73856: LD_VAR 0 1
73860: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
73861: LD_INT 0
73863: PPUSH
73864: PPUSH
73865: PPUSH
73866: PPUSH
// if not mc_bases then
73867: LD_EXP 50
73871: NOT
73872: IFFALSE 73876
// exit ;
73874: GO 74037
// for i = 1 to mc_bases do
73876: LD_ADDR_VAR 0 2
73880: PUSH
73881: DOUBLE
73882: LD_INT 1
73884: DEC
73885: ST_TO_ADDR
73886: LD_EXP 50
73890: PUSH
73891: FOR_TO
73892: IFFALSE 74035
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
73894: LD_ADDR_VAR 0 4
73898: PUSH
73899: LD_EXP 69
73903: PUSH
73904: LD_VAR 0 2
73908: ARRAY
73909: PUSH
73910: LD_EXP 72
73914: PUSH
73915: LD_VAR 0 2
73919: ARRAY
73920: UNION
73921: PPUSH
73922: LD_INT 33
73924: PUSH
73925: LD_INT 2
73927: PUSH
73928: EMPTY
73929: LIST
73930: LIST
73931: PPUSH
73932: CALL_OW 72
73936: ST_TO_ADDR
// if tmp then
73937: LD_VAR 0 4
73941: IFFALSE 74033
// for j in tmp do
73943: LD_ADDR_VAR 0 3
73947: PUSH
73948: LD_VAR 0 4
73952: PUSH
73953: FOR_IN
73954: IFFALSE 74031
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
73956: LD_VAR 0 3
73960: PPUSH
73961: CALL_OW 312
73965: NOT
73966: PUSH
73967: LD_VAR 0 3
73971: PPUSH
73972: CALL_OW 256
73976: PUSH
73977: LD_INT 250
73979: GREATEREQUAL
73980: AND
73981: IFFALSE 73994
// Connect ( j ) else
73983: LD_VAR 0 3
73987: PPUSH
73988: CALL 27668 0 1
73992: GO 74029
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
73994: LD_VAR 0 3
73998: PPUSH
73999: CALL_OW 256
74003: PUSH
74004: LD_INT 250
74006: LESS
74007: PUSH
74008: LD_VAR 0 3
74012: PPUSH
74013: CALL_OW 312
74017: AND
74018: IFFALSE 74029
// ComUnlink ( j ) ;
74020: LD_VAR 0 3
74024: PPUSH
74025: CALL_OW 136
74029: GO 73953
74031: POP
74032: POP
// end ;
74033: GO 73891
74035: POP
74036: POP
// end ;
74037: LD_VAR 0 1
74041: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
74042: LD_INT 0
74044: PPUSH
74045: PPUSH
74046: PPUSH
74047: PPUSH
74048: PPUSH
// if not mc_bases then
74049: LD_EXP 50
74053: NOT
74054: IFFALSE 74058
// exit ;
74056: GO 74503
// for i = 1 to mc_bases do
74058: LD_ADDR_VAR 0 2
74062: PUSH
74063: DOUBLE
74064: LD_INT 1
74066: DEC
74067: ST_TO_ADDR
74068: LD_EXP 50
74072: PUSH
74073: FOR_TO
74074: IFFALSE 74501
// begin if not mc_produce [ i ] then
74076: LD_EXP 71
74080: PUSH
74081: LD_VAR 0 2
74085: ARRAY
74086: NOT
74087: IFFALSE 74091
// continue ;
74089: GO 74073
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
74091: LD_ADDR_VAR 0 5
74095: PUSH
74096: LD_EXP 50
74100: PUSH
74101: LD_VAR 0 2
74105: ARRAY
74106: PPUSH
74107: LD_INT 30
74109: PUSH
74110: LD_INT 3
74112: PUSH
74113: EMPTY
74114: LIST
74115: LIST
74116: PPUSH
74117: CALL_OW 72
74121: ST_TO_ADDR
// if not fac then
74122: LD_VAR 0 5
74126: NOT
74127: IFFALSE 74131
// continue ;
74129: GO 74073
// for j in fac do
74131: LD_ADDR_VAR 0 3
74135: PUSH
74136: LD_VAR 0 5
74140: PUSH
74141: FOR_IN
74142: IFFALSE 74497
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
74144: LD_VAR 0 3
74148: PPUSH
74149: CALL_OW 461
74153: PUSH
74154: LD_INT 2
74156: NONEQUAL
74157: PUSH
74158: LD_VAR 0 3
74162: PPUSH
74163: LD_INT 15
74165: PPUSH
74166: CALL 27296 0 2
74170: PUSH
74171: LD_INT 4
74173: ARRAY
74174: OR
74175: IFFALSE 74179
// continue ;
74177: GO 74141
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
74179: LD_VAR 0 3
74183: PPUSH
74184: LD_EXP 71
74188: PUSH
74189: LD_VAR 0 2
74193: ARRAY
74194: PUSH
74195: LD_INT 1
74197: ARRAY
74198: PUSH
74199: LD_INT 1
74201: ARRAY
74202: PPUSH
74203: LD_EXP 71
74207: PUSH
74208: LD_VAR 0 2
74212: ARRAY
74213: PUSH
74214: LD_INT 1
74216: ARRAY
74217: PUSH
74218: LD_INT 2
74220: ARRAY
74221: PPUSH
74222: LD_EXP 71
74226: PUSH
74227: LD_VAR 0 2
74231: ARRAY
74232: PUSH
74233: LD_INT 1
74235: ARRAY
74236: PUSH
74237: LD_INT 3
74239: ARRAY
74240: PPUSH
74241: LD_EXP 71
74245: PUSH
74246: LD_VAR 0 2
74250: ARRAY
74251: PUSH
74252: LD_INT 1
74254: ARRAY
74255: PUSH
74256: LD_INT 4
74258: ARRAY
74259: PPUSH
74260: CALL_OW 448
74264: PUSH
74265: LD_VAR 0 3
74269: PPUSH
74270: LD_EXP 71
74274: PUSH
74275: LD_VAR 0 2
74279: ARRAY
74280: PUSH
74281: LD_INT 1
74283: ARRAY
74284: PUSH
74285: LD_INT 1
74287: ARRAY
74288: PUSH
74289: LD_EXP 71
74293: PUSH
74294: LD_VAR 0 2
74298: ARRAY
74299: PUSH
74300: LD_INT 1
74302: ARRAY
74303: PUSH
74304: LD_INT 2
74306: ARRAY
74307: PUSH
74308: LD_EXP 71
74312: PUSH
74313: LD_VAR 0 2
74317: ARRAY
74318: PUSH
74319: LD_INT 1
74321: ARRAY
74322: PUSH
74323: LD_INT 3
74325: ARRAY
74326: PUSH
74327: LD_EXP 71
74331: PUSH
74332: LD_VAR 0 2
74336: ARRAY
74337: PUSH
74338: LD_INT 1
74340: ARRAY
74341: PUSH
74342: LD_INT 4
74344: ARRAY
74345: PUSH
74346: EMPTY
74347: LIST
74348: LIST
74349: LIST
74350: LIST
74351: PPUSH
74352: CALL 31063 0 2
74356: AND
74357: IFFALSE 74495
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
74359: LD_VAR 0 3
74363: PPUSH
74364: LD_EXP 71
74368: PUSH
74369: LD_VAR 0 2
74373: ARRAY
74374: PUSH
74375: LD_INT 1
74377: ARRAY
74378: PUSH
74379: LD_INT 1
74381: ARRAY
74382: PPUSH
74383: LD_EXP 71
74387: PUSH
74388: LD_VAR 0 2
74392: ARRAY
74393: PUSH
74394: LD_INT 1
74396: ARRAY
74397: PUSH
74398: LD_INT 2
74400: ARRAY
74401: PPUSH
74402: LD_EXP 71
74406: PUSH
74407: LD_VAR 0 2
74411: ARRAY
74412: PUSH
74413: LD_INT 1
74415: ARRAY
74416: PUSH
74417: LD_INT 3
74419: ARRAY
74420: PPUSH
74421: LD_EXP 71
74425: PUSH
74426: LD_VAR 0 2
74430: ARRAY
74431: PUSH
74432: LD_INT 1
74434: ARRAY
74435: PUSH
74436: LD_INT 4
74438: ARRAY
74439: PPUSH
74440: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
74444: LD_ADDR_VAR 0 4
74448: PUSH
74449: LD_EXP 71
74453: PUSH
74454: LD_VAR 0 2
74458: ARRAY
74459: PPUSH
74460: LD_INT 1
74462: PPUSH
74463: CALL_OW 3
74467: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
74468: LD_ADDR_EXP 71
74472: PUSH
74473: LD_EXP 71
74477: PPUSH
74478: LD_VAR 0 2
74482: PPUSH
74483: LD_VAR 0 4
74487: PPUSH
74488: CALL_OW 1
74492: ST_TO_ADDR
// break ;
74493: GO 74497
// end ; end ;
74495: GO 74141
74497: POP
74498: POP
// end ;
74499: GO 74073
74501: POP
74502: POP
// end ;
74503: LD_VAR 0 1
74507: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
74508: LD_INT 0
74510: PPUSH
74511: PPUSH
74512: PPUSH
// if not mc_bases then
74513: LD_EXP 50
74517: NOT
74518: IFFALSE 74522
// exit ;
74520: GO 74611
// for i = 1 to mc_bases do
74522: LD_ADDR_VAR 0 2
74526: PUSH
74527: DOUBLE
74528: LD_INT 1
74530: DEC
74531: ST_TO_ADDR
74532: LD_EXP 50
74536: PUSH
74537: FOR_TO
74538: IFFALSE 74609
// begin if mc_attack [ i ] then
74540: LD_EXP 70
74544: PUSH
74545: LD_VAR 0 2
74549: ARRAY
74550: IFFALSE 74607
// begin tmp := mc_attack [ i ] [ 1 ] ;
74552: LD_ADDR_VAR 0 3
74556: PUSH
74557: LD_EXP 70
74561: PUSH
74562: LD_VAR 0 2
74566: ARRAY
74567: PUSH
74568: LD_INT 1
74570: ARRAY
74571: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
74572: LD_ADDR_EXP 70
74576: PUSH
74577: LD_EXP 70
74581: PPUSH
74582: LD_VAR 0 2
74586: PPUSH
74587: EMPTY
74588: PPUSH
74589: CALL_OW 1
74593: ST_TO_ADDR
// Attack ( tmp ) ;
74594: LD_VAR 0 3
74598: PPUSH
74599: CALL 106419 0 1
// exit ;
74603: POP
74604: POP
74605: GO 74611
// end ; end ;
74607: GO 74537
74609: POP
74610: POP
// end ;
74611: LD_VAR 0 1
74615: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
74616: LD_INT 0
74618: PPUSH
74619: PPUSH
74620: PPUSH
74621: PPUSH
74622: PPUSH
74623: PPUSH
74624: PPUSH
// if not mc_bases then
74625: LD_EXP 50
74629: NOT
74630: IFFALSE 74634
// exit ;
74632: GO 75344
// for i = 1 to mc_bases do
74634: LD_ADDR_VAR 0 2
74638: PUSH
74639: DOUBLE
74640: LD_INT 1
74642: DEC
74643: ST_TO_ADDR
74644: LD_EXP 50
74648: PUSH
74649: FOR_TO
74650: IFFALSE 75342
// begin if not mc_bases [ i ] then
74652: LD_EXP 50
74656: PUSH
74657: LD_VAR 0 2
74661: ARRAY
74662: NOT
74663: IFFALSE 74667
// continue ;
74665: GO 74649
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
74667: LD_ADDR_VAR 0 7
74671: PUSH
74672: LD_EXP 50
74676: PUSH
74677: LD_VAR 0 2
74681: ARRAY
74682: PUSH
74683: LD_INT 1
74685: ARRAY
74686: PPUSH
74687: CALL 21497 0 1
74691: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
74692: LD_ADDR_EXP 73
74696: PUSH
74697: LD_EXP 73
74701: PPUSH
74702: LD_VAR 0 2
74706: PPUSH
74707: LD_EXP 50
74711: PUSH
74712: LD_VAR 0 2
74716: ARRAY
74717: PUSH
74718: LD_INT 1
74720: ARRAY
74721: PPUSH
74722: CALL_OW 255
74726: PPUSH
74727: LD_EXP 75
74731: PUSH
74732: LD_VAR 0 2
74736: ARRAY
74737: PPUSH
74738: CALL 21462 0 2
74742: PPUSH
74743: CALL_OW 1
74747: ST_TO_ADDR
// if not mc_scan [ i ] then
74748: LD_EXP 73
74752: PUSH
74753: LD_VAR 0 2
74757: ARRAY
74758: NOT
74759: IFFALSE 74937
// begin mc_is_defending := Replace ( mc_is_defending , i , false ) ;
74761: LD_ADDR_EXP 93
74765: PUSH
74766: LD_EXP 93
74770: PPUSH
74771: LD_VAR 0 2
74775: PPUSH
74776: LD_INT 0
74778: PPUSH
74779: CALL_OW 1
74783: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
74784: LD_ADDR_VAR 0 4
74788: PUSH
74789: LD_EXP 50
74793: PUSH
74794: LD_VAR 0 2
74798: ARRAY
74799: PPUSH
74800: LD_INT 2
74802: PUSH
74803: LD_INT 25
74805: PUSH
74806: LD_INT 5
74808: PUSH
74809: EMPTY
74810: LIST
74811: LIST
74812: PUSH
74813: LD_INT 25
74815: PUSH
74816: LD_INT 8
74818: PUSH
74819: EMPTY
74820: LIST
74821: LIST
74822: PUSH
74823: LD_INT 25
74825: PUSH
74826: LD_INT 9
74828: PUSH
74829: EMPTY
74830: LIST
74831: LIST
74832: PUSH
74833: EMPTY
74834: LIST
74835: LIST
74836: LIST
74837: LIST
74838: PPUSH
74839: CALL_OW 72
74843: ST_TO_ADDR
// if not tmp then
74844: LD_VAR 0 4
74848: NOT
74849: IFFALSE 74853
// continue ;
74851: GO 74649
// for j in tmp do
74853: LD_ADDR_VAR 0 3
74857: PUSH
74858: LD_VAR 0 4
74862: PUSH
74863: FOR_IN
74864: IFFALSE 74935
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
74866: LD_VAR 0 3
74870: PPUSH
74871: CALL_OW 310
74875: PPUSH
74876: CALL_OW 266
74880: PUSH
74881: LD_INT 5
74883: EQUAL
74884: PUSH
74885: LD_VAR 0 3
74889: PPUSH
74890: CALL_OW 257
74894: PUSH
74895: LD_INT 1
74897: EQUAL
74898: AND
74899: PUSH
74900: LD_VAR 0 3
74904: PPUSH
74905: CALL_OW 459
74909: NOT
74910: AND
74911: PUSH
74912: LD_VAR 0 7
74916: AND
74917: IFFALSE 74933
// ComChangeProfession ( j , class ) ;
74919: LD_VAR 0 3
74923: PPUSH
74924: LD_VAR 0 7
74928: PPUSH
74929: CALL_OW 123
74933: GO 74863
74935: POP
74936: POP
// end ; if mc_scan [ i ] and not mc_is_defending [ i ] and not mc_defender [ i ] then
74937: LD_EXP 73
74941: PUSH
74942: LD_VAR 0 2
74946: ARRAY
74947: PUSH
74948: LD_EXP 93
74952: PUSH
74953: LD_VAR 0 2
74957: ARRAY
74958: NOT
74959: AND
74960: PUSH
74961: LD_EXP 72
74965: PUSH
74966: LD_VAR 0 2
74970: ARRAY
74971: NOT
74972: AND
74973: IFFALSE 75224
// begin mc_is_defending := Replace ( mc_is_defending , i , true ) ;
74975: LD_ADDR_EXP 93
74979: PUSH
74980: LD_EXP 93
74984: PPUSH
74985: LD_VAR 0 2
74989: PPUSH
74990: LD_INT 1
74992: PPUSH
74993: CALL_OW 1
74997: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
74998: LD_ADDR_VAR 0 4
75002: PUSH
75003: LD_EXP 50
75007: PUSH
75008: LD_VAR 0 2
75012: ARRAY
75013: PPUSH
75014: LD_INT 2
75016: PUSH
75017: LD_INT 25
75019: PUSH
75020: LD_INT 1
75022: PUSH
75023: EMPTY
75024: LIST
75025: LIST
75026: PUSH
75027: LD_INT 25
75029: PUSH
75030: LD_INT 5
75032: PUSH
75033: EMPTY
75034: LIST
75035: LIST
75036: PUSH
75037: LD_INT 25
75039: PUSH
75040: LD_INT 8
75042: PUSH
75043: EMPTY
75044: LIST
75045: LIST
75046: PUSH
75047: LD_INT 25
75049: PUSH
75050: LD_INT 9
75052: PUSH
75053: EMPTY
75054: LIST
75055: LIST
75056: PUSH
75057: EMPTY
75058: LIST
75059: LIST
75060: LIST
75061: LIST
75062: LIST
75063: PPUSH
75064: CALL_OW 72
75068: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
75069: LD_ADDR_VAR 0 4
75073: PUSH
75074: LD_VAR 0 4
75078: PUSH
75079: LD_VAR 0 4
75083: PPUSH
75084: LD_INT 18
75086: PPUSH
75087: CALL 53966 0 2
75091: DIFF
75092: ST_TO_ADDR
// if not tmp and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
75093: LD_VAR 0 4
75097: NOT
75098: PUSH
75099: LD_EXP 50
75103: PUSH
75104: LD_VAR 0 2
75108: ARRAY
75109: PPUSH
75110: LD_INT 2
75112: PUSH
75113: LD_INT 30
75115: PUSH
75116: LD_INT 4
75118: PUSH
75119: EMPTY
75120: LIST
75121: LIST
75122: PUSH
75123: LD_INT 30
75125: PUSH
75126: LD_INT 5
75128: PUSH
75129: EMPTY
75130: LIST
75131: LIST
75132: PUSH
75133: EMPTY
75134: LIST
75135: LIST
75136: LIST
75137: PPUSH
75138: CALL_OW 72
75142: NOT
75143: AND
75144: IFFALSE 75206
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ) ;
75146: LD_ADDR_VAR 0 4
75150: PUSH
75151: LD_EXP 50
75155: PUSH
75156: LD_VAR 0 2
75160: ARRAY
75161: PPUSH
75162: LD_INT 2
75164: PUSH
75165: LD_INT 25
75167: PUSH
75168: LD_INT 2
75170: PUSH
75171: EMPTY
75172: LIST
75173: LIST
75174: PUSH
75175: LD_INT 25
75177: PUSH
75178: LD_INT 3
75180: PUSH
75181: EMPTY
75182: LIST
75183: LIST
75184: PUSH
75185: LD_INT 25
75187: PUSH
75188: LD_INT 4
75190: PUSH
75191: EMPTY
75192: LIST
75193: LIST
75194: PUSH
75195: EMPTY
75196: LIST
75197: LIST
75198: LIST
75199: LIST
75200: PPUSH
75201: CALL_OW 72
75205: ST_TO_ADDR
// BasicDefend ( i , tmp ) ;
75206: LD_VAR 0 2
75210: PPUSH
75211: LD_VAR 0 4
75215: PPUSH
75216: CALL 111128 0 2
// exit ;
75220: POP
75221: POP
75222: GO 75344
// end ; if mc_scan [ i ] and not mc_is_defending [ i ] and mc_defender [ i ] then
75224: LD_EXP 73
75228: PUSH
75229: LD_VAR 0 2
75233: ARRAY
75234: PUSH
75235: LD_EXP 93
75239: PUSH
75240: LD_VAR 0 2
75244: ARRAY
75245: NOT
75246: AND
75247: PUSH
75248: LD_EXP 72
75252: PUSH
75253: LD_VAR 0 2
75257: ARRAY
75258: AND
75259: IFFALSE 75340
// begin mc_is_defending := Replace ( mc_is_defending , i , true ) ;
75261: LD_ADDR_EXP 93
75265: PUSH
75266: LD_EXP 93
75270: PPUSH
75271: LD_VAR 0 2
75275: PPUSH
75276: LD_INT 1
75278: PPUSH
75279: CALL_OW 1
75283: ST_TO_ADDR
// tmp := mc_defender [ i ] ;
75284: LD_ADDR_VAR 0 4
75288: PUSH
75289: LD_EXP 72
75293: PUSH
75294: LD_VAR 0 2
75298: ARRAY
75299: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
75300: LD_ADDR_EXP 72
75304: PUSH
75305: LD_EXP 72
75309: PPUSH
75310: LD_VAR 0 2
75314: PPUSH
75315: EMPTY
75316: PPUSH
75317: CALL_OW 1
75321: ST_TO_ADDR
// Defend ( i , tmp ) ;
75322: LD_VAR 0 2
75326: PPUSH
75327: LD_VAR 0 4
75331: PPUSH
75332: CALL 111698 0 2
// exit ;
75336: POP
75337: POP
75338: GO 75344
// end ; end ;
75340: GO 74649
75342: POP
75343: POP
// end ;
75344: LD_VAR 0 1
75348: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
75349: LD_INT 0
75351: PPUSH
75352: PPUSH
75353: PPUSH
75354: PPUSH
75355: PPUSH
75356: PPUSH
75357: PPUSH
75358: PPUSH
75359: PPUSH
75360: PPUSH
75361: PPUSH
// if not mc_bases then
75362: LD_EXP 50
75366: NOT
75367: IFFALSE 75371
// exit ;
75369: GO 76458
// for i = 1 to mc_bases do
75371: LD_ADDR_VAR 0 2
75375: PUSH
75376: DOUBLE
75377: LD_INT 1
75379: DEC
75380: ST_TO_ADDR
75381: LD_EXP 50
75385: PUSH
75386: FOR_TO
75387: IFFALSE 76456
// begin tmp := mc_lab [ i ] ;
75389: LD_ADDR_VAR 0 6
75393: PUSH
75394: LD_EXP 83
75398: PUSH
75399: LD_VAR 0 2
75403: ARRAY
75404: ST_TO_ADDR
// if not tmp then
75405: LD_VAR 0 6
75409: NOT
75410: IFFALSE 75414
// continue ;
75412: GO 75386
// idle_lab := 0 ;
75414: LD_ADDR_VAR 0 11
75418: PUSH
75419: LD_INT 0
75421: ST_TO_ADDR
// for j in tmp do
75422: LD_ADDR_VAR 0 3
75426: PUSH
75427: LD_VAR 0 6
75431: PUSH
75432: FOR_IN
75433: IFFALSE 76452
// begin researching := false ;
75435: LD_ADDR_VAR 0 10
75439: PUSH
75440: LD_INT 0
75442: ST_TO_ADDR
// side := GetSide ( j ) ;
75443: LD_ADDR_VAR 0 4
75447: PUSH
75448: LD_VAR 0 3
75452: PPUSH
75453: CALL_OW 255
75457: ST_TO_ADDR
// if not mc_tech [ side ] then
75458: LD_EXP 77
75462: PUSH
75463: LD_VAR 0 4
75467: ARRAY
75468: NOT
75469: IFFALSE 75473
// continue ;
75471: GO 75432
// if BuildingStatus ( j ) = bs_idle then
75473: LD_VAR 0 3
75477: PPUSH
75478: CALL_OW 461
75482: PUSH
75483: LD_INT 2
75485: EQUAL
75486: IFFALSE 75674
// begin if idle_lab and UnitsInside ( j ) < 6 then
75488: LD_VAR 0 11
75492: PUSH
75493: LD_VAR 0 3
75497: PPUSH
75498: CALL_OW 313
75502: PUSH
75503: LD_INT 6
75505: LESS
75506: AND
75507: IFFALSE 75578
// begin tmp2 := UnitsInside ( idle_lab ) ;
75509: LD_ADDR_VAR 0 9
75513: PUSH
75514: LD_VAR 0 11
75518: PPUSH
75519: CALL_OW 313
75523: ST_TO_ADDR
// if tmp2 then
75524: LD_VAR 0 9
75528: IFFALSE 75570
// for x in tmp2 do
75530: LD_ADDR_VAR 0 7
75534: PUSH
75535: LD_VAR 0 9
75539: PUSH
75540: FOR_IN
75541: IFFALSE 75568
// begin ComExitBuilding ( x ) ;
75543: LD_VAR 0 7
75547: PPUSH
75548: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
75552: LD_VAR 0 7
75556: PPUSH
75557: LD_VAR 0 3
75561: PPUSH
75562: CALL_OW 180
// end ;
75566: GO 75540
75568: POP
75569: POP
// idle_lab := 0 ;
75570: LD_ADDR_VAR 0 11
75574: PUSH
75575: LD_INT 0
75577: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
75578: LD_ADDR_VAR 0 5
75582: PUSH
75583: LD_EXP 77
75587: PUSH
75588: LD_VAR 0 4
75592: ARRAY
75593: PUSH
75594: FOR_IN
75595: IFFALSE 75655
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
75597: LD_VAR 0 3
75601: PPUSH
75602: LD_VAR 0 5
75606: PPUSH
75607: CALL_OW 430
75611: PUSH
75612: LD_VAR 0 4
75616: PPUSH
75617: LD_VAR 0 5
75621: PPUSH
75622: CALL 20567 0 2
75626: AND
75627: IFFALSE 75653
// begin researching := true ;
75629: LD_ADDR_VAR 0 10
75633: PUSH
75634: LD_INT 1
75636: ST_TO_ADDR
// ComResearch ( j , t ) ;
75637: LD_VAR 0 3
75641: PPUSH
75642: LD_VAR 0 5
75646: PPUSH
75647: CALL_OW 124
// break ;
75651: GO 75655
// end ;
75653: GO 75594
75655: POP
75656: POP
// if not researching then
75657: LD_VAR 0 10
75661: NOT
75662: IFFALSE 75674
// idle_lab := j ;
75664: LD_ADDR_VAR 0 11
75668: PUSH
75669: LD_VAR 0 3
75673: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
75674: LD_VAR 0 3
75678: PPUSH
75679: CALL_OW 461
75683: PUSH
75684: LD_INT 10
75686: EQUAL
75687: IFFALSE 76275
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
75689: LD_EXP 79
75693: PUSH
75694: LD_VAR 0 2
75698: ARRAY
75699: NOT
75700: PUSH
75701: LD_EXP 80
75705: PUSH
75706: LD_VAR 0 2
75710: ARRAY
75711: NOT
75712: AND
75713: PUSH
75714: LD_EXP 77
75718: PUSH
75719: LD_VAR 0 4
75723: ARRAY
75724: PUSH
75725: LD_INT 1
75727: GREATER
75728: AND
75729: IFFALSE 75860
// begin ComCancel ( j ) ;
75731: LD_VAR 0 3
75735: PPUSH
75736: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
75740: LD_ADDR_EXP 77
75744: PUSH
75745: LD_EXP 77
75749: PPUSH
75750: LD_VAR 0 4
75754: PPUSH
75755: LD_EXP 77
75759: PUSH
75760: LD_VAR 0 4
75764: ARRAY
75765: PPUSH
75766: LD_EXP 77
75770: PUSH
75771: LD_VAR 0 4
75775: ARRAY
75776: PUSH
75777: LD_INT 1
75779: MINUS
75780: PPUSH
75781: LD_EXP 77
75785: PUSH
75786: LD_VAR 0 4
75790: ARRAY
75791: PPUSH
75792: LD_INT 0
75794: PPUSH
75795: CALL 24115 0 4
75799: PPUSH
75800: CALL_OW 1
75804: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
75805: LD_ADDR_EXP 77
75809: PUSH
75810: LD_EXP 77
75814: PPUSH
75815: LD_VAR 0 4
75819: PPUSH
75820: LD_EXP 77
75824: PUSH
75825: LD_VAR 0 4
75829: ARRAY
75830: PPUSH
75831: LD_EXP 77
75835: PUSH
75836: LD_VAR 0 4
75840: ARRAY
75841: PPUSH
75842: LD_INT 1
75844: PPUSH
75845: LD_INT 0
75847: PPUSH
75848: CALL 24115 0 4
75852: PPUSH
75853: CALL_OW 1
75857: ST_TO_ADDR
// continue ;
75858: GO 75432
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
75860: LD_EXP 79
75864: PUSH
75865: LD_VAR 0 2
75869: ARRAY
75870: PUSH
75871: LD_EXP 80
75875: PUSH
75876: LD_VAR 0 2
75880: ARRAY
75881: NOT
75882: AND
75883: IFFALSE 76010
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
75885: LD_ADDR_EXP 80
75889: PUSH
75890: LD_EXP 80
75894: PPUSH
75895: LD_VAR 0 2
75899: PUSH
75900: LD_EXP 80
75904: PUSH
75905: LD_VAR 0 2
75909: ARRAY
75910: PUSH
75911: LD_INT 1
75913: PLUS
75914: PUSH
75915: EMPTY
75916: LIST
75917: LIST
75918: PPUSH
75919: LD_EXP 79
75923: PUSH
75924: LD_VAR 0 2
75928: ARRAY
75929: PUSH
75930: LD_INT 1
75932: ARRAY
75933: PPUSH
75934: CALL 24697 0 3
75938: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
75939: LD_EXP 79
75943: PUSH
75944: LD_VAR 0 2
75948: ARRAY
75949: PUSH
75950: LD_INT 1
75952: ARRAY
75953: PPUSH
75954: LD_INT 112
75956: PPUSH
75957: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
75961: LD_ADDR_VAR 0 9
75965: PUSH
75966: LD_EXP 79
75970: PUSH
75971: LD_VAR 0 2
75975: ARRAY
75976: PPUSH
75977: LD_INT 1
75979: PPUSH
75980: CALL_OW 3
75984: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
75985: LD_ADDR_EXP 79
75989: PUSH
75990: LD_EXP 79
75994: PPUSH
75995: LD_VAR 0 2
75999: PPUSH
76000: LD_VAR 0 9
76004: PPUSH
76005: CALL_OW 1
76009: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
76010: LD_EXP 79
76014: PUSH
76015: LD_VAR 0 2
76019: ARRAY
76020: PUSH
76021: LD_EXP 80
76025: PUSH
76026: LD_VAR 0 2
76030: ARRAY
76031: AND
76032: PUSH
76033: LD_EXP 80
76037: PUSH
76038: LD_VAR 0 2
76042: ARRAY
76043: PUSH
76044: LD_INT 1
76046: ARRAY
76047: PPUSH
76048: CALL_OW 310
76052: NOT
76053: AND
76054: PUSH
76055: LD_VAR 0 3
76059: PPUSH
76060: CALL_OW 313
76064: PUSH
76065: LD_INT 6
76067: EQUAL
76068: AND
76069: IFFALSE 76125
// begin tmp2 := UnitsInside ( j ) ;
76071: LD_ADDR_VAR 0 9
76075: PUSH
76076: LD_VAR 0 3
76080: PPUSH
76081: CALL_OW 313
76085: ST_TO_ADDR
// if tmp2 = 6 then
76086: LD_VAR 0 9
76090: PUSH
76091: LD_INT 6
76093: EQUAL
76094: IFFALSE 76125
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
76096: LD_VAR 0 9
76100: PUSH
76101: LD_INT 1
76103: ARRAY
76104: PPUSH
76105: LD_INT 112
76107: PPUSH
76108: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
76112: LD_VAR 0 9
76116: PUSH
76117: LD_INT 1
76119: ARRAY
76120: PPUSH
76121: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
76125: LD_EXP 80
76129: PUSH
76130: LD_VAR 0 2
76134: ARRAY
76135: PUSH
76136: LD_EXP 80
76140: PUSH
76141: LD_VAR 0 2
76145: ARRAY
76146: PUSH
76147: LD_INT 1
76149: ARRAY
76150: PPUSH
76151: CALL_OW 314
76155: NOT
76156: AND
76157: PUSH
76158: LD_EXP 80
76162: PUSH
76163: LD_VAR 0 2
76167: ARRAY
76168: PUSH
76169: LD_INT 1
76171: ARRAY
76172: PPUSH
76173: CALL_OW 310
76177: NOT
76178: AND
76179: IFFALSE 76205
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
76181: LD_EXP 80
76185: PUSH
76186: LD_VAR 0 2
76190: ARRAY
76191: PUSH
76192: LD_INT 1
76194: ARRAY
76195: PPUSH
76196: LD_VAR 0 3
76200: PPUSH
76201: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
76205: LD_EXP 80
76209: PUSH
76210: LD_VAR 0 2
76214: ARRAY
76215: PUSH
76216: LD_INT 1
76218: ARRAY
76219: PPUSH
76220: CALL_OW 310
76224: PUSH
76225: LD_EXP 80
76229: PUSH
76230: LD_VAR 0 2
76234: ARRAY
76235: PUSH
76236: LD_INT 1
76238: ARRAY
76239: PPUSH
76240: CALL_OW 310
76244: PPUSH
76245: CALL_OW 461
76249: PUSH
76250: LD_INT 3
76252: NONEQUAL
76253: AND
76254: IFFALSE 76275
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
76256: LD_EXP 80
76260: PUSH
76261: LD_VAR 0 2
76265: ARRAY
76266: PUSH
76267: LD_INT 1
76269: ARRAY
76270: PPUSH
76271: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
76275: LD_VAR 0 3
76279: PPUSH
76280: CALL_OW 461
76284: PUSH
76285: LD_INT 6
76287: EQUAL
76288: PUSH
76289: LD_VAR 0 6
76293: PUSH
76294: LD_INT 1
76296: GREATER
76297: AND
76298: IFFALSE 76450
// begin sci := [ ] ;
76300: LD_ADDR_VAR 0 8
76304: PUSH
76305: EMPTY
76306: ST_TO_ADDR
// for x in ( tmp diff j ) do
76307: LD_ADDR_VAR 0 7
76311: PUSH
76312: LD_VAR 0 6
76316: PUSH
76317: LD_VAR 0 3
76321: DIFF
76322: PUSH
76323: FOR_IN
76324: IFFALSE 76376
// begin if sci = 6 then
76326: LD_VAR 0 8
76330: PUSH
76331: LD_INT 6
76333: EQUAL
76334: IFFALSE 76338
// break ;
76336: GO 76376
// if BuildingStatus ( x ) = bs_idle then
76338: LD_VAR 0 7
76342: PPUSH
76343: CALL_OW 461
76347: PUSH
76348: LD_INT 2
76350: EQUAL
76351: IFFALSE 76374
// sci := sci ^ UnitsInside ( x ) ;
76353: LD_ADDR_VAR 0 8
76357: PUSH
76358: LD_VAR 0 8
76362: PUSH
76363: LD_VAR 0 7
76367: PPUSH
76368: CALL_OW 313
76372: ADD
76373: ST_TO_ADDR
// end ;
76374: GO 76323
76376: POP
76377: POP
// if not sci then
76378: LD_VAR 0 8
76382: NOT
76383: IFFALSE 76387
// continue ;
76385: GO 75432
// for x in sci do
76387: LD_ADDR_VAR 0 7
76391: PUSH
76392: LD_VAR 0 8
76396: PUSH
76397: FOR_IN
76398: IFFALSE 76448
// if IsInUnit ( x ) and not HasTask ( x ) then
76400: LD_VAR 0 7
76404: PPUSH
76405: CALL_OW 310
76409: PUSH
76410: LD_VAR 0 7
76414: PPUSH
76415: CALL_OW 314
76419: NOT
76420: AND
76421: IFFALSE 76446
// begin ComExitBuilding ( x ) ;
76423: LD_VAR 0 7
76427: PPUSH
76428: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
76432: LD_VAR 0 7
76436: PPUSH
76437: LD_VAR 0 3
76441: PPUSH
76442: CALL_OW 180
// end ;
76446: GO 76397
76448: POP
76449: POP
// end ; end ;
76450: GO 75432
76452: POP
76453: POP
// end ;
76454: GO 75386
76456: POP
76457: POP
// end ;
76458: LD_VAR 0 1
76462: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
76463: LD_INT 0
76465: PPUSH
76466: PPUSH
// if not mc_bases then
76467: LD_EXP 50
76471: NOT
76472: IFFALSE 76476
// exit ;
76474: GO 76557
// for i = 1 to mc_bases do
76476: LD_ADDR_VAR 0 2
76480: PUSH
76481: DOUBLE
76482: LD_INT 1
76484: DEC
76485: ST_TO_ADDR
76486: LD_EXP 50
76490: PUSH
76491: FOR_TO
76492: IFFALSE 76555
// if mc_mines [ i ] and mc_miners [ i ] then
76494: LD_EXP 63
76498: PUSH
76499: LD_VAR 0 2
76503: ARRAY
76504: PUSH
76505: LD_EXP 64
76509: PUSH
76510: LD_VAR 0 2
76514: ARRAY
76515: AND
76516: IFFALSE 76553
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
76518: LD_EXP 64
76522: PUSH
76523: LD_VAR 0 2
76527: ARRAY
76528: PUSH
76529: LD_INT 1
76531: ARRAY
76532: PPUSH
76533: CALL_OW 255
76537: PPUSH
76538: LD_EXP 63
76542: PUSH
76543: LD_VAR 0 2
76547: ARRAY
76548: PPUSH
76549: CALL 21650 0 2
76553: GO 76491
76555: POP
76556: POP
// end ;
76557: LD_VAR 0 1
76561: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
76562: LD_INT 0
76564: PPUSH
76565: PPUSH
76566: PPUSH
76567: PPUSH
76568: PPUSH
76569: PPUSH
76570: PPUSH
76571: PPUSH
// if not mc_bases or not mc_parking then
76572: LD_EXP 50
76576: NOT
76577: PUSH
76578: LD_EXP 74
76582: NOT
76583: OR
76584: IFFALSE 76588
// exit ;
76586: GO 77298
// for i = 1 to mc_bases do
76588: LD_ADDR_VAR 0 2
76592: PUSH
76593: DOUBLE
76594: LD_INT 1
76596: DEC
76597: ST_TO_ADDR
76598: LD_EXP 50
76602: PUSH
76603: FOR_TO
76604: IFFALSE 77296
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
76606: LD_EXP 50
76610: PUSH
76611: LD_VAR 0 2
76615: ARRAY
76616: NOT
76617: PUSH
76618: LD_EXP 74
76622: PUSH
76623: LD_VAR 0 2
76627: ARRAY
76628: NOT
76629: OR
76630: IFFALSE 76634
// continue ;
76632: GO 76603
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
76634: LD_ADDR_VAR 0 5
76638: PUSH
76639: LD_EXP 50
76643: PUSH
76644: LD_VAR 0 2
76648: ARRAY
76649: PUSH
76650: LD_INT 1
76652: ARRAY
76653: PPUSH
76654: CALL_OW 255
76658: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
76659: LD_ADDR_VAR 0 6
76663: PUSH
76664: LD_EXP 50
76668: PUSH
76669: LD_VAR 0 2
76673: ARRAY
76674: PPUSH
76675: LD_INT 30
76677: PUSH
76678: LD_INT 3
76680: PUSH
76681: EMPTY
76682: LIST
76683: LIST
76684: PPUSH
76685: CALL_OW 72
76689: ST_TO_ADDR
// if not fac then
76690: LD_VAR 0 6
76694: NOT
76695: IFFALSE 76746
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
76697: LD_ADDR_VAR 0 6
76701: PUSH
76702: LD_EXP 50
76706: PUSH
76707: LD_VAR 0 2
76711: ARRAY
76712: PPUSH
76713: LD_INT 2
76715: PUSH
76716: LD_INT 30
76718: PUSH
76719: LD_INT 0
76721: PUSH
76722: EMPTY
76723: LIST
76724: LIST
76725: PUSH
76726: LD_INT 30
76728: PUSH
76729: LD_INT 1
76731: PUSH
76732: EMPTY
76733: LIST
76734: LIST
76735: PUSH
76736: EMPTY
76737: LIST
76738: LIST
76739: LIST
76740: PPUSH
76741: CALL_OW 72
76745: ST_TO_ADDR
// if not fac then
76746: LD_VAR 0 6
76750: NOT
76751: IFFALSE 76755
// continue ;
76753: GO 76603
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
76755: LD_ADDR_VAR 0 7
76759: PUSH
76760: LD_EXP 74
76764: PUSH
76765: LD_VAR 0 2
76769: ARRAY
76770: PPUSH
76771: LD_INT 22
76773: PUSH
76774: LD_VAR 0 5
76778: PUSH
76779: EMPTY
76780: LIST
76781: LIST
76782: PUSH
76783: LD_INT 21
76785: PUSH
76786: LD_INT 2
76788: PUSH
76789: EMPTY
76790: LIST
76791: LIST
76792: PUSH
76793: LD_INT 3
76795: PUSH
76796: LD_INT 24
76798: PUSH
76799: LD_INT 1000
76801: PUSH
76802: EMPTY
76803: LIST
76804: LIST
76805: PUSH
76806: EMPTY
76807: LIST
76808: LIST
76809: PUSH
76810: EMPTY
76811: LIST
76812: LIST
76813: LIST
76814: PPUSH
76815: CALL_OW 70
76819: ST_TO_ADDR
// for j in fac do
76820: LD_ADDR_VAR 0 3
76824: PUSH
76825: LD_VAR 0 6
76829: PUSH
76830: FOR_IN
76831: IFFALSE 76912
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
76833: LD_ADDR_VAR 0 7
76837: PUSH
76838: LD_VAR 0 7
76842: PUSH
76843: LD_INT 22
76845: PUSH
76846: LD_VAR 0 5
76850: PUSH
76851: EMPTY
76852: LIST
76853: LIST
76854: PUSH
76855: LD_INT 91
76857: PUSH
76858: LD_VAR 0 3
76862: PUSH
76863: LD_INT 15
76865: PUSH
76866: EMPTY
76867: LIST
76868: LIST
76869: LIST
76870: PUSH
76871: LD_INT 21
76873: PUSH
76874: LD_INT 2
76876: PUSH
76877: EMPTY
76878: LIST
76879: LIST
76880: PUSH
76881: LD_INT 3
76883: PUSH
76884: LD_INT 24
76886: PUSH
76887: LD_INT 1000
76889: PUSH
76890: EMPTY
76891: LIST
76892: LIST
76893: PUSH
76894: EMPTY
76895: LIST
76896: LIST
76897: PUSH
76898: EMPTY
76899: LIST
76900: LIST
76901: LIST
76902: LIST
76903: PPUSH
76904: CALL_OW 69
76908: UNION
76909: ST_TO_ADDR
76910: GO 76830
76912: POP
76913: POP
// if not vehs then
76914: LD_VAR 0 7
76918: NOT
76919: IFFALSE 76945
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
76921: LD_ADDR_EXP 62
76925: PUSH
76926: LD_EXP 62
76930: PPUSH
76931: LD_VAR 0 2
76935: PPUSH
76936: EMPTY
76937: PPUSH
76938: CALL_OW 1
76942: ST_TO_ADDR
// continue ;
76943: GO 76603
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
76945: LD_ADDR_VAR 0 8
76949: PUSH
76950: LD_EXP 50
76954: PUSH
76955: LD_VAR 0 2
76959: ARRAY
76960: PPUSH
76961: LD_INT 30
76963: PUSH
76964: LD_INT 3
76966: PUSH
76967: EMPTY
76968: LIST
76969: LIST
76970: PPUSH
76971: CALL_OW 72
76975: ST_TO_ADDR
// if tmp then
76976: LD_VAR 0 8
76980: IFFALSE 77083
// begin for j in tmp do
76982: LD_ADDR_VAR 0 3
76986: PUSH
76987: LD_VAR 0 8
76991: PUSH
76992: FOR_IN
76993: IFFALSE 77081
// for k in UnitsInside ( j ) do
76995: LD_ADDR_VAR 0 4
76999: PUSH
77000: LD_VAR 0 3
77004: PPUSH
77005: CALL_OW 313
77009: PUSH
77010: FOR_IN
77011: IFFALSE 77077
// if k then
77013: LD_VAR 0 4
77017: IFFALSE 77075
// if not k in mc_repair_vehicle [ i ] then
77019: LD_VAR 0 4
77023: PUSH
77024: LD_EXP 62
77028: PUSH
77029: LD_VAR 0 2
77033: ARRAY
77034: IN
77035: NOT
77036: IFFALSE 77075
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
77038: LD_ADDR_EXP 62
77042: PUSH
77043: LD_EXP 62
77047: PPUSH
77048: LD_VAR 0 2
77052: PPUSH
77053: LD_EXP 62
77057: PUSH
77058: LD_VAR 0 2
77062: ARRAY
77063: PUSH
77064: LD_VAR 0 4
77068: UNION
77069: PPUSH
77070: CALL_OW 1
77074: ST_TO_ADDR
77075: GO 77010
77077: POP
77078: POP
77079: GO 76992
77081: POP
77082: POP
// end ; if not mc_repair_vehicle [ i ] then
77083: LD_EXP 62
77087: PUSH
77088: LD_VAR 0 2
77092: ARRAY
77093: NOT
77094: IFFALSE 77098
// continue ;
77096: GO 76603
// for j in mc_repair_vehicle [ i ] do
77098: LD_ADDR_VAR 0 3
77102: PUSH
77103: LD_EXP 62
77107: PUSH
77108: LD_VAR 0 2
77112: ARRAY
77113: PUSH
77114: FOR_IN
77115: IFFALSE 77292
// begin if GetClass ( j ) <> 3 then
77117: LD_VAR 0 3
77121: PPUSH
77122: CALL_OW 257
77126: PUSH
77127: LD_INT 3
77129: NONEQUAL
77130: IFFALSE 77171
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
77132: LD_ADDR_EXP 62
77136: PUSH
77137: LD_EXP 62
77141: PPUSH
77142: LD_VAR 0 2
77146: PPUSH
77147: LD_EXP 62
77151: PUSH
77152: LD_VAR 0 2
77156: ARRAY
77157: PUSH
77158: LD_VAR 0 3
77162: DIFF
77163: PPUSH
77164: CALL_OW 1
77168: ST_TO_ADDR
// continue ;
77169: GO 77114
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
77171: LD_VAR 0 3
77175: PPUSH
77176: CALL_OW 311
77180: NOT
77181: PUSH
77182: LD_VAR 0 3
77186: PUSH
77187: LD_EXP 53
77191: PUSH
77192: LD_VAR 0 2
77196: ARRAY
77197: PUSH
77198: LD_INT 1
77200: ARRAY
77201: IN
77202: NOT
77203: AND
77204: PUSH
77205: LD_VAR 0 3
77209: PUSH
77210: LD_EXP 53
77214: PUSH
77215: LD_VAR 0 2
77219: ARRAY
77220: PUSH
77221: LD_INT 2
77223: ARRAY
77224: IN
77225: NOT
77226: AND
77227: IFFALSE 77290
// begin if IsInUnit ( j ) then
77229: LD_VAR 0 3
77233: PPUSH
77234: CALL_OW 310
77238: IFFALSE 77251
// ComExitBuilding ( j ) else
77240: LD_VAR 0 3
77244: PPUSH
77245: CALL_OW 122
77249: GO 77290
// if not WantToRepairVehicle ( j , vehs [ 1 ] ) then
77251: LD_VAR 0 3
77255: PPUSH
77256: LD_VAR 0 7
77260: PUSH
77261: LD_INT 1
77263: ARRAY
77264: PPUSH
77265: CALL 58304 0 2
77269: NOT
77270: IFFALSE 77290
// ComRepairVehicle ( j , vehs [ 1 ] ) ;
77272: LD_VAR 0 3
77276: PPUSH
77277: LD_VAR 0 7
77281: PUSH
77282: LD_INT 1
77284: ARRAY
77285: PPUSH
77286: CALL_OW 129
// end ; end ;
77290: GO 77114
77292: POP
77293: POP
// end ;
77294: GO 76603
77296: POP
77297: POP
// end ;
77298: LD_VAR 0 1
77302: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
77303: LD_INT 0
77305: PPUSH
77306: PPUSH
77307: PPUSH
77308: PPUSH
77309: PPUSH
77310: PPUSH
77311: PPUSH
77312: PPUSH
77313: PPUSH
77314: PPUSH
77315: PPUSH
// if not mc_bases then
77316: LD_EXP 50
77320: NOT
77321: IFFALSE 77325
// exit ;
77323: GO 78127
// for i = 1 to mc_bases do
77325: LD_ADDR_VAR 0 2
77329: PUSH
77330: DOUBLE
77331: LD_INT 1
77333: DEC
77334: ST_TO_ADDR
77335: LD_EXP 50
77339: PUSH
77340: FOR_TO
77341: IFFALSE 78125
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
77343: LD_EXP 78
77347: PUSH
77348: LD_VAR 0 2
77352: ARRAY
77353: NOT
77354: PUSH
77355: LD_EXP 53
77359: PUSH
77360: LD_VAR 0 2
77364: ARRAY
77365: PUSH
77366: LD_INT 1
77368: ARRAY
77369: OR
77370: PUSH
77371: LD_EXP 53
77375: PUSH
77376: LD_VAR 0 2
77380: ARRAY
77381: PUSH
77382: LD_INT 2
77384: ARRAY
77385: OR
77386: PUSH
77387: LD_EXP 76
77391: PUSH
77392: LD_VAR 0 2
77396: ARRAY
77397: PPUSH
77398: LD_INT 1
77400: PPUSH
77401: CALL_OW 325
77405: NOT
77406: OR
77407: PUSH
77408: LD_EXP 73
77412: PUSH
77413: LD_VAR 0 2
77417: ARRAY
77418: OR
77419: IFFALSE 77423
// continue ;
77421: GO 77340
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
77423: LD_ADDR_VAR 0 8
77427: PUSH
77428: LD_EXP 50
77432: PUSH
77433: LD_VAR 0 2
77437: ARRAY
77438: PPUSH
77439: LD_INT 25
77441: PUSH
77442: LD_INT 4
77444: PUSH
77445: EMPTY
77446: LIST
77447: LIST
77448: PUSH
77449: LD_INT 50
77451: PUSH
77452: EMPTY
77453: LIST
77454: PUSH
77455: LD_INT 3
77457: PUSH
77458: LD_INT 60
77460: PUSH
77461: EMPTY
77462: LIST
77463: PUSH
77464: EMPTY
77465: LIST
77466: LIST
77467: PUSH
77468: EMPTY
77469: LIST
77470: LIST
77471: LIST
77472: PPUSH
77473: CALL_OW 72
77477: PUSH
77478: LD_EXP 54
77482: PUSH
77483: LD_VAR 0 2
77487: ARRAY
77488: DIFF
77489: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
77490: LD_ADDR_VAR 0 9
77494: PUSH
77495: LD_EXP 50
77499: PUSH
77500: LD_VAR 0 2
77504: ARRAY
77505: PPUSH
77506: LD_INT 2
77508: PUSH
77509: LD_INT 30
77511: PUSH
77512: LD_INT 0
77514: PUSH
77515: EMPTY
77516: LIST
77517: LIST
77518: PUSH
77519: LD_INT 30
77521: PUSH
77522: LD_INT 1
77524: PUSH
77525: EMPTY
77526: LIST
77527: LIST
77528: PUSH
77529: EMPTY
77530: LIST
77531: LIST
77532: LIST
77533: PPUSH
77534: CALL_OW 72
77538: ST_TO_ADDR
// if not tmp or not dep then
77539: LD_VAR 0 8
77543: NOT
77544: PUSH
77545: LD_VAR 0 9
77549: NOT
77550: OR
77551: IFFALSE 77555
// continue ;
77553: GO 77340
// side := GetSide ( tmp [ 1 ] ) ;
77555: LD_ADDR_VAR 0 11
77559: PUSH
77560: LD_VAR 0 8
77564: PUSH
77565: LD_INT 1
77567: ARRAY
77568: PPUSH
77569: CALL_OW 255
77573: ST_TO_ADDR
// dep := dep [ 1 ] ;
77574: LD_ADDR_VAR 0 9
77578: PUSH
77579: LD_VAR 0 9
77583: PUSH
77584: LD_INT 1
77586: ARRAY
77587: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
77588: LD_ADDR_VAR 0 7
77592: PUSH
77593: LD_EXP 78
77597: PUSH
77598: LD_VAR 0 2
77602: ARRAY
77603: PPUSH
77604: LD_INT 22
77606: PUSH
77607: LD_INT 0
77609: PUSH
77610: EMPTY
77611: LIST
77612: LIST
77613: PUSH
77614: LD_INT 25
77616: PUSH
77617: LD_INT 12
77619: PUSH
77620: EMPTY
77621: LIST
77622: LIST
77623: PUSH
77624: EMPTY
77625: LIST
77626: LIST
77627: PPUSH
77628: CALL_OW 70
77632: PUSH
77633: LD_INT 22
77635: PUSH
77636: LD_INT 0
77638: PUSH
77639: EMPTY
77640: LIST
77641: LIST
77642: PUSH
77643: LD_INT 25
77645: PUSH
77646: LD_INT 12
77648: PUSH
77649: EMPTY
77650: LIST
77651: LIST
77652: PUSH
77653: LD_INT 91
77655: PUSH
77656: LD_VAR 0 9
77660: PUSH
77661: LD_INT 20
77663: PUSH
77664: EMPTY
77665: LIST
77666: LIST
77667: LIST
77668: PUSH
77669: EMPTY
77670: LIST
77671: LIST
77672: LIST
77673: PPUSH
77674: CALL_OW 69
77678: UNION
77679: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
77680: LD_ADDR_VAR 0 10
77684: PUSH
77685: LD_EXP 78
77689: PUSH
77690: LD_VAR 0 2
77694: ARRAY
77695: PPUSH
77696: LD_INT 81
77698: PUSH
77699: LD_VAR 0 11
77703: PUSH
77704: EMPTY
77705: LIST
77706: LIST
77707: PPUSH
77708: CALL_OW 70
77712: ST_TO_ADDR
// if not apes or danger_at_area then
77713: LD_VAR 0 7
77717: NOT
77718: PUSH
77719: LD_VAR 0 10
77723: OR
77724: IFFALSE 77774
// begin if mc_taming [ i ] then
77726: LD_EXP 81
77730: PUSH
77731: LD_VAR 0 2
77735: ARRAY
77736: IFFALSE 77772
// begin MC_Reset ( i , 121 ) ;
77738: LD_VAR 0 2
77742: PPUSH
77743: LD_INT 121
77745: PPUSH
77746: CALL 62907 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
77750: LD_ADDR_EXP 81
77754: PUSH
77755: LD_EXP 81
77759: PPUSH
77760: LD_VAR 0 2
77764: PPUSH
77765: EMPTY
77766: PPUSH
77767: CALL_OW 1
77771: ST_TO_ADDR
// end ; continue ;
77772: GO 77340
// end ; for j in tmp do
77774: LD_ADDR_VAR 0 3
77778: PUSH
77779: LD_VAR 0 8
77783: PUSH
77784: FOR_IN
77785: IFFALSE 78121
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
77787: LD_VAR 0 3
77791: PUSH
77792: LD_EXP 81
77796: PUSH
77797: LD_VAR 0 2
77801: ARRAY
77802: IN
77803: NOT
77804: PUSH
77805: LD_EXP 81
77809: PUSH
77810: LD_VAR 0 2
77814: ARRAY
77815: PUSH
77816: LD_INT 3
77818: LESS
77819: AND
77820: IFFALSE 77878
// begin SetTag ( j , 121 ) ;
77822: LD_VAR 0 3
77826: PPUSH
77827: LD_INT 121
77829: PPUSH
77830: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
77834: LD_ADDR_EXP 81
77838: PUSH
77839: LD_EXP 81
77843: PPUSH
77844: LD_VAR 0 2
77848: PUSH
77849: LD_EXP 81
77853: PUSH
77854: LD_VAR 0 2
77858: ARRAY
77859: PUSH
77860: LD_INT 1
77862: PLUS
77863: PUSH
77864: EMPTY
77865: LIST
77866: LIST
77867: PPUSH
77868: LD_VAR 0 3
77872: PPUSH
77873: CALL 24697 0 3
77877: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
77878: LD_VAR 0 3
77882: PUSH
77883: LD_EXP 81
77887: PUSH
77888: LD_VAR 0 2
77892: ARRAY
77893: IN
77894: IFFALSE 78119
// begin if GetClass ( j ) <> 4 then
77896: LD_VAR 0 3
77900: PPUSH
77901: CALL_OW 257
77905: PUSH
77906: LD_INT 4
77908: NONEQUAL
77909: IFFALSE 77962
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
77911: LD_ADDR_EXP 81
77915: PUSH
77916: LD_EXP 81
77920: PPUSH
77921: LD_VAR 0 2
77925: PPUSH
77926: LD_EXP 81
77930: PUSH
77931: LD_VAR 0 2
77935: ARRAY
77936: PUSH
77937: LD_VAR 0 3
77941: DIFF
77942: PPUSH
77943: CALL_OW 1
77947: ST_TO_ADDR
// SetTag ( j , 0 ) ;
77948: LD_VAR 0 3
77952: PPUSH
77953: LD_INT 0
77955: PPUSH
77956: CALL_OW 109
// continue ;
77960: GO 77784
// end ; if IsInUnit ( j ) then
77962: LD_VAR 0 3
77966: PPUSH
77967: CALL_OW 310
77971: IFFALSE 77982
// ComExitBuilding ( j ) ;
77973: LD_VAR 0 3
77977: PPUSH
77978: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
77982: LD_ADDR_VAR 0 6
77986: PUSH
77987: LD_VAR 0 7
77991: PPUSH
77992: LD_VAR 0 3
77996: PPUSH
77997: CALL_OW 74
78001: ST_TO_ADDR
// if not ape then
78002: LD_VAR 0 6
78006: NOT
78007: IFFALSE 78011
// break ;
78009: GO 78121
// x := GetX ( ape ) ;
78011: LD_ADDR_VAR 0 4
78015: PUSH
78016: LD_VAR 0 6
78020: PPUSH
78021: CALL_OW 250
78025: ST_TO_ADDR
// y := GetY ( ape ) ;
78026: LD_ADDR_VAR 0 5
78030: PUSH
78031: LD_VAR 0 6
78035: PPUSH
78036: CALL_OW 251
78040: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
78041: LD_VAR 0 4
78045: PPUSH
78046: LD_VAR 0 5
78050: PPUSH
78051: CALL_OW 488
78055: NOT
78056: PUSH
78057: LD_VAR 0 11
78061: PPUSH
78062: LD_VAR 0 4
78066: PPUSH
78067: LD_VAR 0 5
78071: PPUSH
78072: LD_INT 20
78074: PPUSH
78075: CALL 25593 0 4
78079: PUSH
78080: LD_INT 4
78082: ARRAY
78083: OR
78084: IFFALSE 78088
// break ;
78086: GO 78121
// if not HasTask ( j ) then
78088: LD_VAR 0 3
78092: PPUSH
78093: CALL_OW 314
78097: NOT
78098: IFFALSE 78119
// ComTameXY ( j , x , y ) ;
78100: LD_VAR 0 3
78104: PPUSH
78105: LD_VAR 0 4
78109: PPUSH
78110: LD_VAR 0 5
78114: PPUSH
78115: CALL_OW 131
// end ; end ;
78119: GO 77784
78121: POP
78122: POP
// end ;
78123: GO 77340
78125: POP
78126: POP
// end ;
78127: LD_VAR 0 1
78131: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
78132: LD_INT 0
78134: PPUSH
78135: PPUSH
78136: PPUSH
78137: PPUSH
78138: PPUSH
78139: PPUSH
78140: PPUSH
78141: PPUSH
// if not mc_bases then
78142: LD_EXP 50
78146: NOT
78147: IFFALSE 78151
// exit ;
78149: GO 78777
// for i = 1 to mc_bases do
78151: LD_ADDR_VAR 0 2
78155: PUSH
78156: DOUBLE
78157: LD_INT 1
78159: DEC
78160: ST_TO_ADDR
78161: LD_EXP 50
78165: PUSH
78166: FOR_TO
78167: IFFALSE 78775
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
78169: LD_EXP 79
78173: PUSH
78174: LD_VAR 0 2
78178: ARRAY
78179: NOT
78180: PUSH
78181: LD_EXP 79
78185: PUSH
78186: LD_VAR 0 2
78190: ARRAY
78191: PPUSH
78192: LD_INT 25
78194: PUSH
78195: LD_INT 12
78197: PUSH
78198: EMPTY
78199: LIST
78200: LIST
78201: PPUSH
78202: CALL_OW 72
78206: NOT
78207: OR
78208: IFFALSE 78212
// continue ;
78210: GO 78166
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
78212: LD_ADDR_VAR 0 5
78216: PUSH
78217: LD_EXP 79
78221: PUSH
78222: LD_VAR 0 2
78226: ARRAY
78227: PUSH
78228: LD_INT 1
78230: ARRAY
78231: PPUSH
78232: CALL_OW 255
78236: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
78237: LD_VAR 0 5
78241: PPUSH
78242: LD_INT 2
78244: PPUSH
78245: CALL_OW 325
78249: IFFALSE 78502
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
78251: LD_ADDR_VAR 0 4
78255: PUSH
78256: LD_EXP 79
78260: PUSH
78261: LD_VAR 0 2
78265: ARRAY
78266: PPUSH
78267: LD_INT 25
78269: PUSH
78270: LD_INT 16
78272: PUSH
78273: EMPTY
78274: LIST
78275: LIST
78276: PPUSH
78277: CALL_OW 72
78281: ST_TO_ADDR
// if tmp < 6 then
78282: LD_VAR 0 4
78286: PUSH
78287: LD_INT 6
78289: LESS
78290: IFFALSE 78502
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
78292: LD_ADDR_VAR 0 6
78296: PUSH
78297: LD_EXP 50
78301: PUSH
78302: LD_VAR 0 2
78306: ARRAY
78307: PPUSH
78308: LD_INT 2
78310: PUSH
78311: LD_INT 30
78313: PUSH
78314: LD_INT 0
78316: PUSH
78317: EMPTY
78318: LIST
78319: LIST
78320: PUSH
78321: LD_INT 30
78323: PUSH
78324: LD_INT 1
78326: PUSH
78327: EMPTY
78328: LIST
78329: LIST
78330: PUSH
78331: EMPTY
78332: LIST
78333: LIST
78334: LIST
78335: PPUSH
78336: CALL_OW 72
78340: ST_TO_ADDR
// if depot then
78341: LD_VAR 0 6
78345: IFFALSE 78502
// begin selected := 0 ;
78347: LD_ADDR_VAR 0 7
78351: PUSH
78352: LD_INT 0
78354: ST_TO_ADDR
// for j in depot do
78355: LD_ADDR_VAR 0 3
78359: PUSH
78360: LD_VAR 0 6
78364: PUSH
78365: FOR_IN
78366: IFFALSE 78397
// begin if UnitsInside ( j ) < 6 then
78368: LD_VAR 0 3
78372: PPUSH
78373: CALL_OW 313
78377: PUSH
78378: LD_INT 6
78380: LESS
78381: IFFALSE 78395
// begin selected := j ;
78383: LD_ADDR_VAR 0 7
78387: PUSH
78388: LD_VAR 0 3
78392: ST_TO_ADDR
// break ;
78393: GO 78397
// end ; end ;
78395: GO 78365
78397: POP
78398: POP
// if selected then
78399: LD_VAR 0 7
78403: IFFALSE 78502
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
78405: LD_ADDR_VAR 0 3
78409: PUSH
78410: LD_EXP 79
78414: PUSH
78415: LD_VAR 0 2
78419: ARRAY
78420: PPUSH
78421: LD_INT 25
78423: PUSH
78424: LD_INT 12
78426: PUSH
78427: EMPTY
78428: LIST
78429: LIST
78430: PPUSH
78431: CALL_OW 72
78435: PUSH
78436: FOR_IN
78437: IFFALSE 78500
// if not HasTask ( j ) then
78439: LD_VAR 0 3
78443: PPUSH
78444: CALL_OW 314
78448: NOT
78449: IFFALSE 78498
// begin if not IsInUnit ( j ) then
78451: LD_VAR 0 3
78455: PPUSH
78456: CALL_OW 310
78460: NOT
78461: IFFALSE 78477
// ComEnterUnit ( j , selected ) ;
78463: LD_VAR 0 3
78467: PPUSH
78468: LD_VAR 0 7
78472: PPUSH
78473: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
78477: LD_VAR 0 3
78481: PPUSH
78482: LD_INT 16
78484: PPUSH
78485: CALL_OW 183
// AddComExitBuilding ( j ) ;
78489: LD_VAR 0 3
78493: PPUSH
78494: CALL_OW 182
// end ;
78498: GO 78436
78500: POP
78501: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
78502: LD_VAR 0 5
78506: PPUSH
78507: LD_INT 11
78509: PPUSH
78510: CALL_OW 325
78514: IFFALSE 78773
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
78516: LD_ADDR_VAR 0 4
78520: PUSH
78521: LD_EXP 79
78525: PUSH
78526: LD_VAR 0 2
78530: ARRAY
78531: PPUSH
78532: LD_INT 25
78534: PUSH
78535: LD_INT 16
78537: PUSH
78538: EMPTY
78539: LIST
78540: LIST
78541: PPUSH
78542: CALL_OW 72
78546: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
78547: LD_VAR 0 4
78551: PUSH
78552: LD_INT 6
78554: GREATEREQUAL
78555: PUSH
78556: LD_VAR 0 5
78560: PPUSH
78561: LD_INT 2
78563: PPUSH
78564: CALL_OW 325
78568: NOT
78569: OR
78570: IFFALSE 78773
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
78572: LD_ADDR_VAR 0 8
78576: PUSH
78577: LD_EXP 50
78581: PUSH
78582: LD_VAR 0 2
78586: ARRAY
78587: PPUSH
78588: LD_INT 2
78590: PUSH
78591: LD_INT 30
78593: PUSH
78594: LD_INT 4
78596: PUSH
78597: EMPTY
78598: LIST
78599: LIST
78600: PUSH
78601: LD_INT 30
78603: PUSH
78604: LD_INT 5
78606: PUSH
78607: EMPTY
78608: LIST
78609: LIST
78610: PUSH
78611: EMPTY
78612: LIST
78613: LIST
78614: LIST
78615: PPUSH
78616: CALL_OW 72
78620: ST_TO_ADDR
// if barracks then
78621: LD_VAR 0 8
78625: IFFALSE 78773
// begin selected := 0 ;
78627: LD_ADDR_VAR 0 7
78631: PUSH
78632: LD_INT 0
78634: ST_TO_ADDR
// for j in barracks do
78635: LD_ADDR_VAR 0 3
78639: PUSH
78640: LD_VAR 0 8
78644: PUSH
78645: FOR_IN
78646: IFFALSE 78677
// begin if UnitsInside ( j ) < 6 then
78648: LD_VAR 0 3
78652: PPUSH
78653: CALL_OW 313
78657: PUSH
78658: LD_INT 6
78660: LESS
78661: IFFALSE 78675
// begin selected := j ;
78663: LD_ADDR_VAR 0 7
78667: PUSH
78668: LD_VAR 0 3
78672: ST_TO_ADDR
// break ;
78673: GO 78677
// end ; end ;
78675: GO 78645
78677: POP
78678: POP
// if selected then
78679: LD_VAR 0 7
78683: IFFALSE 78773
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
78685: LD_ADDR_VAR 0 3
78689: PUSH
78690: LD_EXP 79
78694: PUSH
78695: LD_VAR 0 2
78699: ARRAY
78700: PPUSH
78701: LD_INT 25
78703: PUSH
78704: LD_INT 12
78706: PUSH
78707: EMPTY
78708: LIST
78709: LIST
78710: PPUSH
78711: CALL_OW 72
78715: PUSH
78716: FOR_IN
78717: IFFALSE 78771
// if not IsInUnit ( j ) and not HasTask ( j ) then
78719: LD_VAR 0 3
78723: PPUSH
78724: CALL_OW 310
78728: NOT
78729: PUSH
78730: LD_VAR 0 3
78734: PPUSH
78735: CALL_OW 314
78739: NOT
78740: AND
78741: IFFALSE 78769
// begin ComEnterUnit ( j , selected ) ;
78743: LD_VAR 0 3
78747: PPUSH
78748: LD_VAR 0 7
78752: PPUSH
78753: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
78757: LD_VAR 0 3
78761: PPUSH
78762: LD_INT 15
78764: PPUSH
78765: CALL_OW 183
// end ;
78769: GO 78716
78771: POP
78772: POP
// end ; end ; end ; end ; end ;
78773: GO 78166
78775: POP
78776: POP
// end ;
78777: LD_VAR 0 1
78781: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
78782: LD_INT 0
78784: PPUSH
78785: PPUSH
78786: PPUSH
78787: PPUSH
// if not mc_bases then
78788: LD_EXP 50
78792: NOT
78793: IFFALSE 78797
// exit ;
78795: GO 78975
// for i = 1 to mc_bases do
78797: LD_ADDR_VAR 0 2
78801: PUSH
78802: DOUBLE
78803: LD_INT 1
78805: DEC
78806: ST_TO_ADDR
78807: LD_EXP 50
78811: PUSH
78812: FOR_TO
78813: IFFALSE 78973
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
78815: LD_ADDR_VAR 0 4
78819: PUSH
78820: LD_EXP 50
78824: PUSH
78825: LD_VAR 0 2
78829: ARRAY
78830: PPUSH
78831: LD_INT 25
78833: PUSH
78834: LD_INT 9
78836: PUSH
78837: EMPTY
78838: LIST
78839: LIST
78840: PPUSH
78841: CALL_OW 72
78845: ST_TO_ADDR
// if not tmp then
78846: LD_VAR 0 4
78850: NOT
78851: IFFALSE 78855
// continue ;
78853: GO 78812
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
78855: LD_EXP 76
78859: PUSH
78860: LD_VAR 0 2
78864: ARRAY
78865: PPUSH
78866: LD_INT 29
78868: PPUSH
78869: CALL_OW 325
78873: NOT
78874: PUSH
78875: LD_EXP 76
78879: PUSH
78880: LD_VAR 0 2
78884: ARRAY
78885: PPUSH
78886: LD_INT 28
78888: PPUSH
78889: CALL_OW 325
78893: NOT
78894: AND
78895: IFFALSE 78899
// continue ;
78897: GO 78812
// for j in tmp do
78899: LD_ADDR_VAR 0 3
78903: PUSH
78904: LD_VAR 0 4
78908: PUSH
78909: FOR_IN
78910: IFFALSE 78969
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
78912: LD_VAR 0 3
78916: PUSH
78917: LD_EXP 53
78921: PUSH
78922: LD_VAR 0 2
78926: ARRAY
78927: PUSH
78928: LD_INT 1
78930: ARRAY
78931: IN
78932: NOT
78933: PUSH
78934: LD_VAR 0 3
78938: PUSH
78939: LD_EXP 53
78943: PUSH
78944: LD_VAR 0 2
78948: ARRAY
78949: PUSH
78950: LD_INT 2
78952: ARRAY
78953: IN
78954: NOT
78955: AND
78956: IFFALSE 78967
// ComSpaceTimeShoot ( j ) ;
78958: LD_VAR 0 3
78962: PPUSH
78963: CALL 20658 0 1
78967: GO 78909
78969: POP
78970: POP
// end ;
78971: GO 78812
78973: POP
78974: POP
// end ;
78975: LD_VAR 0 1
78979: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
78980: LD_INT 0
78982: PPUSH
78983: PPUSH
78984: PPUSH
78985: PPUSH
78986: PPUSH
78987: PPUSH
78988: PPUSH
78989: PPUSH
78990: PPUSH
// if not mc_bases then
78991: LD_EXP 50
78995: NOT
78996: IFFALSE 79000
// exit ;
78998: GO 79622
// for i = 1 to mc_bases do
79000: LD_ADDR_VAR 0 2
79004: PUSH
79005: DOUBLE
79006: LD_INT 1
79008: DEC
79009: ST_TO_ADDR
79010: LD_EXP 50
79014: PUSH
79015: FOR_TO
79016: IFFALSE 79620
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
79018: LD_EXP 85
79022: PUSH
79023: LD_VAR 0 2
79027: ARRAY
79028: NOT
79029: PUSH
79030: LD_INT 38
79032: PPUSH
79033: LD_EXP 76
79037: PUSH
79038: LD_VAR 0 2
79042: ARRAY
79043: PPUSH
79044: CALL_OW 321
79048: PUSH
79049: LD_INT 2
79051: NONEQUAL
79052: OR
79053: IFFALSE 79057
// continue ;
79055: GO 79015
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
79057: LD_ADDR_VAR 0 8
79061: PUSH
79062: LD_EXP 50
79066: PUSH
79067: LD_VAR 0 2
79071: ARRAY
79072: PPUSH
79073: LD_INT 30
79075: PUSH
79076: LD_INT 34
79078: PUSH
79079: EMPTY
79080: LIST
79081: LIST
79082: PPUSH
79083: CALL_OW 72
79087: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
79088: LD_ADDR_VAR 0 9
79092: PUSH
79093: LD_EXP 50
79097: PUSH
79098: LD_VAR 0 2
79102: ARRAY
79103: PPUSH
79104: LD_INT 25
79106: PUSH
79107: LD_INT 4
79109: PUSH
79110: EMPTY
79111: LIST
79112: LIST
79113: PPUSH
79114: CALL_OW 72
79118: PPUSH
79119: LD_INT 0
79121: PPUSH
79122: CALL 53966 0 2
79126: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
79127: LD_VAR 0 9
79131: NOT
79132: PUSH
79133: LD_VAR 0 8
79137: NOT
79138: OR
79139: PUSH
79140: LD_EXP 50
79144: PUSH
79145: LD_VAR 0 2
79149: ARRAY
79150: PPUSH
79151: LD_INT 124
79153: PPUSH
79154: CALL 53966 0 2
79158: OR
79159: IFFALSE 79163
// continue ;
79161: GO 79015
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
79163: LD_EXP 86
79167: PUSH
79168: LD_VAR 0 2
79172: ARRAY
79173: PUSH
79174: LD_EXP 85
79178: PUSH
79179: LD_VAR 0 2
79183: ARRAY
79184: LESS
79185: PUSH
79186: LD_EXP 86
79190: PUSH
79191: LD_VAR 0 2
79195: ARRAY
79196: PUSH
79197: LD_VAR 0 8
79201: LESS
79202: AND
79203: IFFALSE 79618
// begin tmp := sci [ 1 ] ;
79205: LD_ADDR_VAR 0 7
79209: PUSH
79210: LD_VAR 0 9
79214: PUSH
79215: LD_INT 1
79217: ARRAY
79218: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
79219: LD_VAR 0 7
79223: PPUSH
79224: LD_INT 124
79226: PPUSH
79227: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
79231: LD_ADDR_VAR 0 3
79235: PUSH
79236: DOUBLE
79237: LD_EXP 85
79241: PUSH
79242: LD_VAR 0 2
79246: ARRAY
79247: INC
79248: ST_TO_ADDR
79249: LD_EXP 85
79253: PUSH
79254: LD_VAR 0 2
79258: ARRAY
79259: PUSH
79260: FOR_DOWNTO
79261: IFFALSE 79604
// begin if IsInUnit ( tmp ) then
79263: LD_VAR 0 7
79267: PPUSH
79268: CALL_OW 310
79272: IFFALSE 79283
// ComExitBuilding ( tmp ) ;
79274: LD_VAR 0 7
79278: PPUSH
79279: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
79283: LD_INT 35
79285: PPUSH
79286: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
79290: LD_VAR 0 7
79294: PPUSH
79295: CALL_OW 310
79299: NOT
79300: PUSH
79301: LD_VAR 0 7
79305: PPUSH
79306: CALL_OW 314
79310: NOT
79311: AND
79312: IFFALSE 79283
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
79314: LD_ADDR_VAR 0 6
79318: PUSH
79319: LD_VAR 0 7
79323: PPUSH
79324: CALL_OW 250
79328: PUSH
79329: LD_VAR 0 7
79333: PPUSH
79334: CALL_OW 251
79338: PUSH
79339: EMPTY
79340: LIST
79341: LIST
79342: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
79343: LD_INT 35
79345: PPUSH
79346: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
79350: LD_ADDR_VAR 0 4
79354: PUSH
79355: LD_EXP 85
79359: PUSH
79360: LD_VAR 0 2
79364: ARRAY
79365: PUSH
79366: LD_VAR 0 3
79370: ARRAY
79371: PUSH
79372: LD_INT 1
79374: ARRAY
79375: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
79376: LD_ADDR_VAR 0 5
79380: PUSH
79381: LD_EXP 85
79385: PUSH
79386: LD_VAR 0 2
79390: ARRAY
79391: PUSH
79392: LD_VAR 0 3
79396: ARRAY
79397: PUSH
79398: LD_INT 2
79400: ARRAY
79401: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
79402: LD_VAR 0 7
79406: PPUSH
79407: LD_INT 10
79409: PPUSH
79410: CALL 27296 0 2
79414: PUSH
79415: LD_INT 4
79417: ARRAY
79418: IFFALSE 79456
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
79420: LD_VAR 0 7
79424: PPUSH
79425: LD_VAR 0 6
79429: PUSH
79430: LD_INT 1
79432: ARRAY
79433: PPUSH
79434: LD_VAR 0 6
79438: PUSH
79439: LD_INT 2
79441: ARRAY
79442: PPUSH
79443: CALL_OW 111
// wait ( 0 0$10 ) ;
79447: LD_INT 350
79449: PPUSH
79450: CALL_OW 67
// end else
79454: GO 79482
// begin ComMoveXY ( tmp , x , y ) ;
79456: LD_VAR 0 7
79460: PPUSH
79461: LD_VAR 0 4
79465: PPUSH
79466: LD_VAR 0 5
79470: PPUSH
79471: CALL_OW 111
// wait ( 0 0$3 ) ;
79475: LD_INT 105
79477: PPUSH
79478: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
79482: LD_VAR 0 7
79486: PPUSH
79487: LD_VAR 0 4
79491: PPUSH
79492: LD_VAR 0 5
79496: PPUSH
79497: CALL_OW 307
79501: IFFALSE 79343
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
79503: LD_VAR 0 7
79507: PPUSH
79508: LD_VAR 0 4
79512: PPUSH
79513: LD_VAR 0 5
79517: PPUSH
79518: LD_VAR 0 8
79522: PUSH
79523: LD_VAR 0 3
79527: ARRAY
79528: PPUSH
79529: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
79533: LD_INT 35
79535: PPUSH
79536: CALL_OW 67
// until not HasTask ( tmp ) ;
79540: LD_VAR 0 7
79544: PPUSH
79545: CALL_OW 314
79549: NOT
79550: IFFALSE 79533
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
79552: LD_ADDR_EXP 86
79556: PUSH
79557: LD_EXP 86
79561: PPUSH
79562: LD_VAR 0 2
79566: PUSH
79567: LD_EXP 86
79571: PUSH
79572: LD_VAR 0 2
79576: ARRAY
79577: PUSH
79578: LD_INT 1
79580: PLUS
79581: PUSH
79582: EMPTY
79583: LIST
79584: LIST
79585: PPUSH
79586: LD_VAR 0 8
79590: PUSH
79591: LD_VAR 0 3
79595: ARRAY
79596: PPUSH
79597: CALL 24697 0 3
79601: ST_TO_ADDR
// end ;
79602: GO 79260
79604: POP
79605: POP
// MC_Reset ( i , 124 ) ;
79606: LD_VAR 0 2
79610: PPUSH
79611: LD_INT 124
79613: PPUSH
79614: CALL 62907 0 2
// end ; end ;
79618: GO 79015
79620: POP
79621: POP
// end ;
79622: LD_VAR 0 1
79626: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
79627: LD_INT 0
79629: PPUSH
79630: PPUSH
79631: PPUSH
// if not mc_bases then
79632: LD_EXP 50
79636: NOT
79637: IFFALSE 79641
// exit ;
79639: GO 80247
// for i = 1 to mc_bases do
79641: LD_ADDR_VAR 0 2
79645: PUSH
79646: DOUBLE
79647: LD_INT 1
79649: DEC
79650: ST_TO_ADDR
79651: LD_EXP 50
79655: PUSH
79656: FOR_TO
79657: IFFALSE 80245
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
79659: LD_ADDR_VAR 0 3
79663: PUSH
79664: LD_EXP 50
79668: PUSH
79669: LD_VAR 0 2
79673: ARRAY
79674: PPUSH
79675: LD_INT 25
79677: PUSH
79678: LD_INT 4
79680: PUSH
79681: EMPTY
79682: LIST
79683: LIST
79684: PPUSH
79685: CALL_OW 72
79689: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
79690: LD_VAR 0 3
79694: NOT
79695: PUSH
79696: LD_EXP 87
79700: PUSH
79701: LD_VAR 0 2
79705: ARRAY
79706: NOT
79707: OR
79708: PUSH
79709: LD_EXP 50
79713: PUSH
79714: LD_VAR 0 2
79718: ARRAY
79719: PPUSH
79720: LD_INT 2
79722: PUSH
79723: LD_INT 30
79725: PUSH
79726: LD_INT 0
79728: PUSH
79729: EMPTY
79730: LIST
79731: LIST
79732: PUSH
79733: LD_INT 30
79735: PUSH
79736: LD_INT 1
79738: PUSH
79739: EMPTY
79740: LIST
79741: LIST
79742: PUSH
79743: EMPTY
79744: LIST
79745: LIST
79746: LIST
79747: PPUSH
79748: CALL_OW 72
79752: NOT
79753: OR
79754: IFFALSE 79804
// begin if mc_deposits_finder [ i ] then
79756: LD_EXP 88
79760: PUSH
79761: LD_VAR 0 2
79765: ARRAY
79766: IFFALSE 79802
// begin MC_Reset ( i , 125 ) ;
79768: LD_VAR 0 2
79772: PPUSH
79773: LD_INT 125
79775: PPUSH
79776: CALL 62907 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
79780: LD_ADDR_EXP 88
79784: PUSH
79785: LD_EXP 88
79789: PPUSH
79790: LD_VAR 0 2
79794: PPUSH
79795: EMPTY
79796: PPUSH
79797: CALL_OW 1
79801: ST_TO_ADDR
// end ; continue ;
79802: GO 79656
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
79804: LD_EXP 87
79808: PUSH
79809: LD_VAR 0 2
79813: ARRAY
79814: PUSH
79815: LD_INT 1
79817: ARRAY
79818: PUSH
79819: LD_INT 3
79821: ARRAY
79822: PUSH
79823: LD_INT 1
79825: EQUAL
79826: PUSH
79827: LD_INT 20
79829: PPUSH
79830: LD_EXP 76
79834: PUSH
79835: LD_VAR 0 2
79839: ARRAY
79840: PPUSH
79841: CALL_OW 321
79845: PUSH
79846: LD_INT 2
79848: NONEQUAL
79849: AND
79850: IFFALSE 79900
// begin if mc_deposits_finder [ i ] then
79852: LD_EXP 88
79856: PUSH
79857: LD_VAR 0 2
79861: ARRAY
79862: IFFALSE 79898
// begin MC_Reset ( i , 125 ) ;
79864: LD_VAR 0 2
79868: PPUSH
79869: LD_INT 125
79871: PPUSH
79872: CALL 62907 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
79876: LD_ADDR_EXP 88
79880: PUSH
79881: LD_EXP 88
79885: PPUSH
79886: LD_VAR 0 2
79890: PPUSH
79891: EMPTY
79892: PPUSH
79893: CALL_OW 1
79897: ST_TO_ADDR
// end ; continue ;
79898: GO 79656
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
79900: LD_EXP 87
79904: PUSH
79905: LD_VAR 0 2
79909: ARRAY
79910: PUSH
79911: LD_INT 1
79913: ARRAY
79914: PUSH
79915: LD_INT 1
79917: ARRAY
79918: PPUSH
79919: LD_EXP 87
79923: PUSH
79924: LD_VAR 0 2
79928: ARRAY
79929: PUSH
79930: LD_INT 1
79932: ARRAY
79933: PUSH
79934: LD_INT 2
79936: ARRAY
79937: PPUSH
79938: LD_EXP 76
79942: PUSH
79943: LD_VAR 0 2
79947: ARRAY
79948: PPUSH
79949: CALL_OW 440
79953: IFFALSE 79996
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
79955: LD_ADDR_EXP 87
79959: PUSH
79960: LD_EXP 87
79964: PPUSH
79965: LD_VAR 0 2
79969: PPUSH
79970: LD_EXP 87
79974: PUSH
79975: LD_VAR 0 2
79979: ARRAY
79980: PPUSH
79981: LD_INT 1
79983: PPUSH
79984: CALL_OW 3
79988: PPUSH
79989: CALL_OW 1
79993: ST_TO_ADDR
79994: GO 80243
// begin if not mc_deposits_finder [ i ] then
79996: LD_EXP 88
80000: PUSH
80001: LD_VAR 0 2
80005: ARRAY
80006: NOT
80007: IFFALSE 80059
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
80009: LD_ADDR_EXP 88
80013: PUSH
80014: LD_EXP 88
80018: PPUSH
80019: LD_VAR 0 2
80023: PPUSH
80024: LD_VAR 0 3
80028: PUSH
80029: LD_INT 1
80031: ARRAY
80032: PUSH
80033: EMPTY
80034: LIST
80035: PPUSH
80036: CALL_OW 1
80040: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
80041: LD_VAR 0 3
80045: PUSH
80046: LD_INT 1
80048: ARRAY
80049: PPUSH
80050: LD_INT 125
80052: PPUSH
80053: CALL_OW 109
// end else
80057: GO 80243
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
80059: LD_EXP 88
80063: PUSH
80064: LD_VAR 0 2
80068: ARRAY
80069: PUSH
80070: LD_INT 1
80072: ARRAY
80073: PPUSH
80074: CALL_OW 310
80078: IFFALSE 80101
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
80080: LD_EXP 88
80084: PUSH
80085: LD_VAR 0 2
80089: ARRAY
80090: PUSH
80091: LD_INT 1
80093: ARRAY
80094: PPUSH
80095: CALL_OW 122
80099: GO 80243
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
80101: LD_EXP 88
80105: PUSH
80106: LD_VAR 0 2
80110: ARRAY
80111: PUSH
80112: LD_INT 1
80114: ARRAY
80115: PPUSH
80116: CALL_OW 314
80120: NOT
80121: PUSH
80122: LD_EXP 88
80126: PUSH
80127: LD_VAR 0 2
80131: ARRAY
80132: PUSH
80133: LD_INT 1
80135: ARRAY
80136: PPUSH
80137: LD_EXP 87
80141: PUSH
80142: LD_VAR 0 2
80146: ARRAY
80147: PUSH
80148: LD_INT 1
80150: ARRAY
80151: PUSH
80152: LD_INT 1
80154: ARRAY
80155: PPUSH
80156: LD_EXP 87
80160: PUSH
80161: LD_VAR 0 2
80165: ARRAY
80166: PUSH
80167: LD_INT 1
80169: ARRAY
80170: PUSH
80171: LD_INT 2
80173: ARRAY
80174: PPUSH
80175: CALL_OW 297
80179: PUSH
80180: LD_INT 6
80182: GREATER
80183: AND
80184: IFFALSE 80243
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
80186: LD_EXP 88
80190: PUSH
80191: LD_VAR 0 2
80195: ARRAY
80196: PUSH
80197: LD_INT 1
80199: ARRAY
80200: PPUSH
80201: LD_EXP 87
80205: PUSH
80206: LD_VAR 0 2
80210: ARRAY
80211: PUSH
80212: LD_INT 1
80214: ARRAY
80215: PUSH
80216: LD_INT 1
80218: ARRAY
80219: PPUSH
80220: LD_EXP 87
80224: PUSH
80225: LD_VAR 0 2
80229: ARRAY
80230: PUSH
80231: LD_INT 1
80233: ARRAY
80234: PUSH
80235: LD_INT 2
80237: ARRAY
80238: PPUSH
80239: CALL_OW 111
// end ; end ; end ;
80243: GO 79656
80245: POP
80246: POP
// end ;
80247: LD_VAR 0 1
80251: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
80252: LD_INT 0
80254: PPUSH
80255: PPUSH
80256: PPUSH
80257: PPUSH
80258: PPUSH
80259: PPUSH
80260: PPUSH
80261: PPUSH
80262: PPUSH
80263: PPUSH
80264: PPUSH
// if not mc_bases then
80265: LD_EXP 50
80269: NOT
80270: IFFALSE 80274
// exit ;
80272: GO 81214
// for i = 1 to mc_bases do
80274: LD_ADDR_VAR 0 2
80278: PUSH
80279: DOUBLE
80280: LD_INT 1
80282: DEC
80283: ST_TO_ADDR
80284: LD_EXP 50
80288: PUSH
80289: FOR_TO
80290: IFFALSE 81212
// begin if not mc_bases [ i ] or mc_scan [ i ] then
80292: LD_EXP 50
80296: PUSH
80297: LD_VAR 0 2
80301: ARRAY
80302: NOT
80303: PUSH
80304: LD_EXP 73
80308: PUSH
80309: LD_VAR 0 2
80313: ARRAY
80314: OR
80315: IFFALSE 80319
// continue ;
80317: GO 80289
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
80319: LD_ADDR_VAR 0 7
80323: PUSH
80324: LD_EXP 50
80328: PUSH
80329: LD_VAR 0 2
80333: ARRAY
80334: PUSH
80335: LD_INT 1
80337: ARRAY
80338: PPUSH
80339: CALL_OW 248
80343: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
80344: LD_VAR 0 7
80348: PUSH
80349: LD_INT 3
80351: EQUAL
80352: PUSH
80353: LD_EXP 69
80357: PUSH
80358: LD_VAR 0 2
80362: ARRAY
80363: PUSH
80364: LD_EXP 72
80368: PUSH
80369: LD_VAR 0 2
80373: ARRAY
80374: UNION
80375: PPUSH
80376: LD_INT 33
80378: PUSH
80379: LD_INT 2
80381: PUSH
80382: EMPTY
80383: LIST
80384: LIST
80385: PPUSH
80386: CALL_OW 72
80390: NOT
80391: OR
80392: IFFALSE 80396
// continue ;
80394: GO 80289
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
80396: LD_ADDR_VAR 0 9
80400: PUSH
80401: LD_EXP 50
80405: PUSH
80406: LD_VAR 0 2
80410: ARRAY
80411: PPUSH
80412: LD_INT 30
80414: PUSH
80415: LD_INT 36
80417: PUSH
80418: EMPTY
80419: LIST
80420: LIST
80421: PPUSH
80422: CALL_OW 72
80426: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
80427: LD_ADDR_VAR 0 10
80431: PUSH
80432: LD_EXP 69
80436: PUSH
80437: LD_VAR 0 2
80441: ARRAY
80442: PPUSH
80443: LD_INT 34
80445: PUSH
80446: LD_INT 31
80448: PUSH
80449: EMPTY
80450: LIST
80451: LIST
80452: PPUSH
80453: CALL_OW 72
80457: ST_TO_ADDR
// if not cts and not mcts then
80458: LD_VAR 0 9
80462: NOT
80463: PUSH
80464: LD_VAR 0 10
80468: NOT
80469: AND
80470: IFFALSE 80474
// continue ;
80472: GO 80289
// x := cts ;
80474: LD_ADDR_VAR 0 11
80478: PUSH
80479: LD_VAR 0 9
80483: ST_TO_ADDR
// if not x then
80484: LD_VAR 0 11
80488: NOT
80489: IFFALSE 80501
// x := mcts ;
80491: LD_ADDR_VAR 0 11
80495: PUSH
80496: LD_VAR 0 10
80500: ST_TO_ADDR
// if not x then
80501: LD_VAR 0 11
80505: NOT
80506: IFFALSE 80510
// continue ;
80508: GO 80289
// if mc_remote_driver [ i ] then
80510: LD_EXP 90
80514: PUSH
80515: LD_VAR 0 2
80519: ARRAY
80520: IFFALSE 80907
// for j in mc_remote_driver [ i ] do
80522: LD_ADDR_VAR 0 3
80526: PUSH
80527: LD_EXP 90
80531: PUSH
80532: LD_VAR 0 2
80536: ARRAY
80537: PUSH
80538: FOR_IN
80539: IFFALSE 80905
// begin if GetClass ( j ) <> 3 then
80541: LD_VAR 0 3
80545: PPUSH
80546: CALL_OW 257
80550: PUSH
80551: LD_INT 3
80553: NONEQUAL
80554: IFFALSE 80607
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
80556: LD_ADDR_EXP 90
80560: PUSH
80561: LD_EXP 90
80565: PPUSH
80566: LD_VAR 0 2
80570: PPUSH
80571: LD_EXP 90
80575: PUSH
80576: LD_VAR 0 2
80580: ARRAY
80581: PUSH
80582: LD_VAR 0 3
80586: DIFF
80587: PPUSH
80588: CALL_OW 1
80592: ST_TO_ADDR
// SetTag ( j , 0 ) ;
80593: LD_VAR 0 3
80597: PPUSH
80598: LD_INT 0
80600: PPUSH
80601: CALL_OW 109
// continue ;
80605: GO 80538
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
80607: LD_EXP 69
80611: PUSH
80612: LD_VAR 0 2
80616: ARRAY
80617: PPUSH
80618: LD_INT 34
80620: PUSH
80621: LD_INT 31
80623: PUSH
80624: EMPTY
80625: LIST
80626: LIST
80627: PUSH
80628: LD_INT 58
80630: PUSH
80631: EMPTY
80632: LIST
80633: PUSH
80634: EMPTY
80635: LIST
80636: LIST
80637: PPUSH
80638: CALL_OW 72
80642: PUSH
80643: LD_VAR 0 3
80647: PPUSH
80648: CALL 54054 0 1
80652: NOT
80653: AND
80654: IFFALSE 80725
// begin if IsInUnit ( j ) then
80656: LD_VAR 0 3
80660: PPUSH
80661: CALL_OW 310
80665: IFFALSE 80676
// ComExitBuilding ( j ) ;
80667: LD_VAR 0 3
80671: PPUSH
80672: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
80676: LD_VAR 0 3
80680: PPUSH
80681: LD_EXP 69
80685: PUSH
80686: LD_VAR 0 2
80690: ARRAY
80691: PPUSH
80692: LD_INT 34
80694: PUSH
80695: LD_INT 31
80697: PUSH
80698: EMPTY
80699: LIST
80700: LIST
80701: PUSH
80702: LD_INT 58
80704: PUSH
80705: EMPTY
80706: LIST
80707: PUSH
80708: EMPTY
80709: LIST
80710: LIST
80711: PPUSH
80712: CALL_OW 72
80716: PUSH
80717: LD_INT 1
80719: ARRAY
80720: PPUSH
80721: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
80725: LD_VAR 0 3
80729: PPUSH
80730: CALL_OW 310
80734: NOT
80735: PUSH
80736: LD_VAR 0 3
80740: PPUSH
80741: CALL_OW 310
80745: PPUSH
80746: CALL_OW 266
80750: PUSH
80751: LD_INT 36
80753: NONEQUAL
80754: PUSH
80755: LD_VAR 0 3
80759: PPUSH
80760: CALL 54054 0 1
80764: NOT
80765: AND
80766: OR
80767: IFFALSE 80903
// begin if IsInUnit ( j ) then
80769: LD_VAR 0 3
80773: PPUSH
80774: CALL_OW 310
80778: IFFALSE 80789
// ComExitBuilding ( j ) ;
80780: LD_VAR 0 3
80784: PPUSH
80785: CALL_OW 122
// ct := 0 ;
80789: LD_ADDR_VAR 0 8
80793: PUSH
80794: LD_INT 0
80796: ST_TO_ADDR
// for k in x do
80797: LD_ADDR_VAR 0 4
80801: PUSH
80802: LD_VAR 0 11
80806: PUSH
80807: FOR_IN
80808: IFFALSE 80881
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
80810: LD_VAR 0 4
80814: PPUSH
80815: CALL_OW 264
80819: PUSH
80820: LD_INT 31
80822: EQUAL
80823: PUSH
80824: LD_VAR 0 4
80828: PPUSH
80829: CALL_OW 311
80833: NOT
80834: AND
80835: PUSH
80836: LD_VAR 0 4
80840: PPUSH
80841: CALL_OW 266
80845: PUSH
80846: LD_INT 36
80848: EQUAL
80849: PUSH
80850: LD_VAR 0 4
80854: PPUSH
80855: CALL_OW 313
80859: PUSH
80860: LD_INT 3
80862: LESS
80863: AND
80864: OR
80865: IFFALSE 80879
// begin ct := k ;
80867: LD_ADDR_VAR 0 8
80871: PUSH
80872: LD_VAR 0 4
80876: ST_TO_ADDR
// break ;
80877: GO 80881
// end ;
80879: GO 80807
80881: POP
80882: POP
// if ct then
80883: LD_VAR 0 8
80887: IFFALSE 80903
// ComEnterUnit ( j , ct ) ;
80889: LD_VAR 0 3
80893: PPUSH
80894: LD_VAR 0 8
80898: PPUSH
80899: CALL_OW 120
// end ; end ;
80903: GO 80538
80905: POP
80906: POP
// places := 0 ;
80907: LD_ADDR_VAR 0 5
80911: PUSH
80912: LD_INT 0
80914: ST_TO_ADDR
// for j = 1 to x do
80915: LD_ADDR_VAR 0 3
80919: PUSH
80920: DOUBLE
80921: LD_INT 1
80923: DEC
80924: ST_TO_ADDR
80925: LD_VAR 0 11
80929: PUSH
80930: FOR_TO
80931: IFFALSE 81007
// if GetWeapon ( x [ j ] ) = ar_control_tower then
80933: LD_VAR 0 11
80937: PUSH
80938: LD_VAR 0 3
80942: ARRAY
80943: PPUSH
80944: CALL_OW 264
80948: PUSH
80949: LD_INT 31
80951: EQUAL
80952: IFFALSE 80970
// places := places + 1 else
80954: LD_ADDR_VAR 0 5
80958: PUSH
80959: LD_VAR 0 5
80963: PUSH
80964: LD_INT 1
80966: PLUS
80967: ST_TO_ADDR
80968: GO 81005
// if GetBType ( x [ j ] ) = b_control_tower then
80970: LD_VAR 0 11
80974: PUSH
80975: LD_VAR 0 3
80979: ARRAY
80980: PPUSH
80981: CALL_OW 266
80985: PUSH
80986: LD_INT 36
80988: EQUAL
80989: IFFALSE 81005
// places := places + 3 ;
80991: LD_ADDR_VAR 0 5
80995: PUSH
80996: LD_VAR 0 5
81000: PUSH
81001: LD_INT 3
81003: PLUS
81004: ST_TO_ADDR
81005: GO 80930
81007: POP
81008: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
81009: LD_VAR 0 5
81013: PUSH
81014: LD_INT 0
81016: EQUAL
81017: PUSH
81018: LD_VAR 0 5
81022: PUSH
81023: LD_EXP 90
81027: PUSH
81028: LD_VAR 0 2
81032: ARRAY
81033: LESSEQUAL
81034: OR
81035: IFFALSE 81039
// continue ;
81037: GO 80289
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
81039: LD_ADDR_VAR 0 6
81043: PUSH
81044: LD_EXP 50
81048: PUSH
81049: LD_VAR 0 2
81053: ARRAY
81054: PPUSH
81055: LD_INT 25
81057: PUSH
81058: LD_INT 3
81060: PUSH
81061: EMPTY
81062: LIST
81063: LIST
81064: PPUSH
81065: CALL_OW 72
81069: PUSH
81070: LD_EXP 90
81074: PUSH
81075: LD_VAR 0 2
81079: ARRAY
81080: DIFF
81081: PPUSH
81082: LD_INT 3
81084: PPUSH
81085: CALL 54954 0 2
81089: ST_TO_ADDR
// for j in tmp do
81090: LD_ADDR_VAR 0 3
81094: PUSH
81095: LD_VAR 0 6
81099: PUSH
81100: FOR_IN
81101: IFFALSE 81136
// if GetTag ( j ) > 0 then
81103: LD_VAR 0 3
81107: PPUSH
81108: CALL_OW 110
81112: PUSH
81113: LD_INT 0
81115: GREATER
81116: IFFALSE 81134
// tmp := tmp diff j ;
81118: LD_ADDR_VAR 0 6
81122: PUSH
81123: LD_VAR 0 6
81127: PUSH
81128: LD_VAR 0 3
81132: DIFF
81133: ST_TO_ADDR
81134: GO 81100
81136: POP
81137: POP
// if not tmp then
81138: LD_VAR 0 6
81142: NOT
81143: IFFALSE 81147
// continue ;
81145: GO 80289
// if places then
81147: LD_VAR 0 5
81151: IFFALSE 81210
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
81153: LD_ADDR_EXP 90
81157: PUSH
81158: LD_EXP 90
81162: PPUSH
81163: LD_VAR 0 2
81167: PPUSH
81168: LD_EXP 90
81172: PUSH
81173: LD_VAR 0 2
81177: ARRAY
81178: PUSH
81179: LD_VAR 0 6
81183: PUSH
81184: LD_INT 1
81186: ARRAY
81187: UNION
81188: PPUSH
81189: CALL_OW 1
81193: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
81194: LD_VAR 0 6
81198: PUSH
81199: LD_INT 1
81201: ARRAY
81202: PPUSH
81203: LD_INT 126
81205: PPUSH
81206: CALL_OW 109
// end ; end ;
81210: GO 80289
81212: POP
81213: POP
// end ;
81214: LD_VAR 0 1
81218: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
81219: LD_INT 0
81221: PPUSH
81222: PPUSH
81223: PPUSH
81224: PPUSH
81225: PPUSH
81226: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
81227: LD_VAR 0 1
81231: NOT
81232: PUSH
81233: LD_VAR 0 2
81237: NOT
81238: OR
81239: PUSH
81240: LD_VAR 0 3
81244: NOT
81245: OR
81246: PUSH
81247: LD_VAR 0 4
81251: PUSH
81252: LD_INT 1
81254: PUSH
81255: LD_INT 2
81257: PUSH
81258: LD_INT 3
81260: PUSH
81261: LD_INT 4
81263: PUSH
81264: LD_INT 5
81266: PUSH
81267: LD_INT 8
81269: PUSH
81270: LD_INT 9
81272: PUSH
81273: LD_INT 15
81275: PUSH
81276: LD_INT 16
81278: PUSH
81279: EMPTY
81280: LIST
81281: LIST
81282: LIST
81283: LIST
81284: LIST
81285: LIST
81286: LIST
81287: LIST
81288: LIST
81289: IN
81290: NOT
81291: OR
81292: IFFALSE 81296
// exit ;
81294: GO 82196
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
81296: LD_ADDR_VAR 0 2
81300: PUSH
81301: LD_VAR 0 2
81305: PPUSH
81306: LD_INT 21
81308: PUSH
81309: LD_INT 3
81311: PUSH
81312: EMPTY
81313: LIST
81314: LIST
81315: PUSH
81316: LD_INT 24
81318: PUSH
81319: LD_INT 250
81321: PUSH
81322: EMPTY
81323: LIST
81324: LIST
81325: PUSH
81326: EMPTY
81327: LIST
81328: LIST
81329: PPUSH
81330: CALL_OW 72
81334: ST_TO_ADDR
// case class of 1 , 15 :
81335: LD_VAR 0 4
81339: PUSH
81340: LD_INT 1
81342: DOUBLE
81343: EQUAL
81344: IFTRUE 81354
81346: LD_INT 15
81348: DOUBLE
81349: EQUAL
81350: IFTRUE 81354
81352: GO 81439
81354: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
81355: LD_ADDR_VAR 0 8
81359: PUSH
81360: LD_VAR 0 2
81364: PPUSH
81365: LD_INT 2
81367: PUSH
81368: LD_INT 30
81370: PUSH
81371: LD_INT 32
81373: PUSH
81374: EMPTY
81375: LIST
81376: LIST
81377: PUSH
81378: LD_INT 30
81380: PUSH
81381: LD_INT 31
81383: PUSH
81384: EMPTY
81385: LIST
81386: LIST
81387: PUSH
81388: EMPTY
81389: LIST
81390: LIST
81391: LIST
81392: PPUSH
81393: CALL_OW 72
81397: PUSH
81398: LD_VAR 0 2
81402: PPUSH
81403: LD_INT 2
81405: PUSH
81406: LD_INT 30
81408: PUSH
81409: LD_INT 4
81411: PUSH
81412: EMPTY
81413: LIST
81414: LIST
81415: PUSH
81416: LD_INT 30
81418: PUSH
81419: LD_INT 5
81421: PUSH
81422: EMPTY
81423: LIST
81424: LIST
81425: PUSH
81426: EMPTY
81427: LIST
81428: LIST
81429: LIST
81430: PPUSH
81431: CALL_OW 72
81435: ADD
81436: ST_TO_ADDR
81437: GO 81685
81439: LD_INT 2
81441: DOUBLE
81442: EQUAL
81443: IFTRUE 81453
81445: LD_INT 16
81447: DOUBLE
81448: EQUAL
81449: IFTRUE 81453
81451: GO 81499
81453: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
81454: LD_ADDR_VAR 0 8
81458: PUSH
81459: LD_VAR 0 2
81463: PPUSH
81464: LD_INT 2
81466: PUSH
81467: LD_INT 30
81469: PUSH
81470: LD_INT 0
81472: PUSH
81473: EMPTY
81474: LIST
81475: LIST
81476: PUSH
81477: LD_INT 30
81479: PUSH
81480: LD_INT 1
81482: PUSH
81483: EMPTY
81484: LIST
81485: LIST
81486: PUSH
81487: EMPTY
81488: LIST
81489: LIST
81490: LIST
81491: PPUSH
81492: CALL_OW 72
81496: ST_TO_ADDR
81497: GO 81685
81499: LD_INT 3
81501: DOUBLE
81502: EQUAL
81503: IFTRUE 81507
81505: GO 81553
81507: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
81508: LD_ADDR_VAR 0 8
81512: PUSH
81513: LD_VAR 0 2
81517: PPUSH
81518: LD_INT 2
81520: PUSH
81521: LD_INT 30
81523: PUSH
81524: LD_INT 2
81526: PUSH
81527: EMPTY
81528: LIST
81529: LIST
81530: PUSH
81531: LD_INT 30
81533: PUSH
81534: LD_INT 3
81536: PUSH
81537: EMPTY
81538: LIST
81539: LIST
81540: PUSH
81541: EMPTY
81542: LIST
81543: LIST
81544: LIST
81545: PPUSH
81546: CALL_OW 72
81550: ST_TO_ADDR
81551: GO 81685
81553: LD_INT 4
81555: DOUBLE
81556: EQUAL
81557: IFTRUE 81561
81559: GO 81618
81561: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
81562: LD_ADDR_VAR 0 8
81566: PUSH
81567: LD_VAR 0 2
81571: PPUSH
81572: LD_INT 2
81574: PUSH
81575: LD_INT 30
81577: PUSH
81578: LD_INT 6
81580: PUSH
81581: EMPTY
81582: LIST
81583: LIST
81584: PUSH
81585: LD_INT 30
81587: PUSH
81588: LD_INT 7
81590: PUSH
81591: EMPTY
81592: LIST
81593: LIST
81594: PUSH
81595: LD_INT 30
81597: PUSH
81598: LD_INT 8
81600: PUSH
81601: EMPTY
81602: LIST
81603: LIST
81604: PUSH
81605: EMPTY
81606: LIST
81607: LIST
81608: LIST
81609: LIST
81610: PPUSH
81611: CALL_OW 72
81615: ST_TO_ADDR
81616: GO 81685
81618: LD_INT 5
81620: DOUBLE
81621: EQUAL
81622: IFTRUE 81638
81624: LD_INT 8
81626: DOUBLE
81627: EQUAL
81628: IFTRUE 81638
81630: LD_INT 9
81632: DOUBLE
81633: EQUAL
81634: IFTRUE 81638
81636: GO 81684
81638: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
81639: LD_ADDR_VAR 0 8
81643: PUSH
81644: LD_VAR 0 2
81648: PPUSH
81649: LD_INT 2
81651: PUSH
81652: LD_INT 30
81654: PUSH
81655: LD_INT 4
81657: PUSH
81658: EMPTY
81659: LIST
81660: LIST
81661: PUSH
81662: LD_INT 30
81664: PUSH
81665: LD_INT 5
81667: PUSH
81668: EMPTY
81669: LIST
81670: LIST
81671: PUSH
81672: EMPTY
81673: LIST
81674: LIST
81675: LIST
81676: PPUSH
81677: CALL_OW 72
81681: ST_TO_ADDR
81682: GO 81685
81684: POP
// if not tmp then
81685: LD_VAR 0 8
81689: NOT
81690: IFFALSE 81694
// exit ;
81692: GO 82196
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
81694: LD_VAR 0 4
81698: PUSH
81699: LD_INT 1
81701: PUSH
81702: LD_INT 15
81704: PUSH
81705: EMPTY
81706: LIST
81707: LIST
81708: IN
81709: PUSH
81710: LD_EXP 59
81714: PUSH
81715: LD_VAR 0 1
81719: ARRAY
81720: AND
81721: IFFALSE 81877
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
81723: LD_ADDR_VAR 0 9
81727: PUSH
81728: LD_EXP 59
81732: PUSH
81733: LD_VAR 0 1
81737: ARRAY
81738: PUSH
81739: LD_INT 1
81741: ARRAY
81742: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
81743: LD_VAR 0 9
81747: PUSH
81748: LD_EXP 60
81752: PUSH
81753: LD_VAR 0 1
81757: ARRAY
81758: IN
81759: NOT
81760: IFFALSE 81875
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
81762: LD_ADDR_EXP 60
81766: PUSH
81767: LD_EXP 60
81771: PPUSH
81772: LD_VAR 0 1
81776: PUSH
81777: LD_EXP 60
81781: PUSH
81782: LD_VAR 0 1
81786: ARRAY
81787: PUSH
81788: LD_INT 1
81790: PLUS
81791: PUSH
81792: EMPTY
81793: LIST
81794: LIST
81795: PPUSH
81796: LD_VAR 0 9
81800: PPUSH
81801: CALL 24697 0 3
81805: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
81806: LD_ADDR_EXP 59
81810: PUSH
81811: LD_EXP 59
81815: PPUSH
81816: LD_VAR 0 1
81820: PPUSH
81821: LD_EXP 59
81825: PUSH
81826: LD_VAR 0 1
81830: ARRAY
81831: PUSH
81832: LD_VAR 0 9
81836: DIFF
81837: PPUSH
81838: CALL_OW 1
81842: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
81843: LD_VAR 0 3
81847: PPUSH
81848: LD_EXP 60
81852: PUSH
81853: LD_VAR 0 1
81857: ARRAY
81858: PUSH
81859: LD_EXP 60
81863: PUSH
81864: LD_VAR 0 1
81868: ARRAY
81869: ARRAY
81870: PPUSH
81871: CALL_OW 120
// end ; exit ;
81875: GO 82196
// end ; if tmp > 1 then
81877: LD_VAR 0 8
81881: PUSH
81882: LD_INT 1
81884: GREATER
81885: IFFALSE 81989
// for i = 2 to tmp do
81887: LD_ADDR_VAR 0 6
81891: PUSH
81892: DOUBLE
81893: LD_INT 2
81895: DEC
81896: ST_TO_ADDR
81897: LD_VAR 0 8
81901: PUSH
81902: FOR_TO
81903: IFFALSE 81987
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
81905: LD_VAR 0 8
81909: PUSH
81910: LD_VAR 0 6
81914: ARRAY
81915: PPUSH
81916: CALL_OW 461
81920: PUSH
81921: LD_INT 6
81923: EQUAL
81924: IFFALSE 81985
// begin x := tmp [ i ] ;
81926: LD_ADDR_VAR 0 9
81930: PUSH
81931: LD_VAR 0 8
81935: PUSH
81936: LD_VAR 0 6
81940: ARRAY
81941: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
81942: LD_ADDR_VAR 0 8
81946: PUSH
81947: LD_VAR 0 8
81951: PPUSH
81952: LD_VAR 0 6
81956: PPUSH
81957: CALL_OW 3
81961: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
81962: LD_ADDR_VAR 0 8
81966: PUSH
81967: LD_VAR 0 8
81971: PPUSH
81972: LD_INT 1
81974: PPUSH
81975: LD_VAR 0 9
81979: PPUSH
81980: CALL_OW 2
81984: ST_TO_ADDR
// end ;
81985: GO 81902
81987: POP
81988: POP
// for i in tmp do
81989: LD_ADDR_VAR 0 6
81993: PUSH
81994: LD_VAR 0 8
81998: PUSH
81999: FOR_IN
82000: IFFALSE 82069
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
82002: LD_VAR 0 6
82006: PPUSH
82007: CALL_OW 313
82011: PUSH
82012: LD_INT 6
82014: LESS
82015: PUSH
82016: LD_VAR 0 6
82020: PPUSH
82021: CALL_OW 266
82025: PUSH
82026: LD_INT 31
82028: PUSH
82029: LD_INT 32
82031: PUSH
82032: EMPTY
82033: LIST
82034: LIST
82035: IN
82036: NOT
82037: AND
82038: PUSH
82039: LD_VAR 0 6
82043: PPUSH
82044: CALL_OW 313
82048: PUSH
82049: LD_INT 0
82051: EQUAL
82052: OR
82053: IFFALSE 82067
// begin j := i ;
82055: LD_ADDR_VAR 0 7
82059: PUSH
82060: LD_VAR 0 6
82064: ST_TO_ADDR
// break ;
82065: GO 82069
// end ; end ;
82067: GO 81999
82069: POP
82070: POP
// if j then
82071: LD_VAR 0 7
82075: IFFALSE 82093
// ComEnterUnit ( unit , j ) else
82077: LD_VAR 0 3
82081: PPUSH
82082: LD_VAR 0 7
82086: PPUSH
82087: CALL_OW 120
82091: GO 82196
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
82093: LD_ADDR_VAR 0 10
82097: PUSH
82098: LD_VAR 0 2
82102: PPUSH
82103: LD_INT 2
82105: PUSH
82106: LD_INT 30
82108: PUSH
82109: LD_INT 0
82111: PUSH
82112: EMPTY
82113: LIST
82114: LIST
82115: PUSH
82116: LD_INT 30
82118: PUSH
82119: LD_INT 1
82121: PUSH
82122: EMPTY
82123: LIST
82124: LIST
82125: PUSH
82126: EMPTY
82127: LIST
82128: LIST
82129: LIST
82130: PPUSH
82131: CALL_OW 72
82135: ST_TO_ADDR
// if depot then
82136: LD_VAR 0 10
82140: IFFALSE 82196
// begin depot := NearestUnitToUnit ( depot , unit ) ;
82142: LD_ADDR_VAR 0 10
82146: PUSH
82147: LD_VAR 0 10
82151: PPUSH
82152: LD_VAR 0 3
82156: PPUSH
82157: CALL_OW 74
82161: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
82162: LD_VAR 0 3
82166: PPUSH
82167: LD_VAR 0 10
82171: PPUSH
82172: CALL_OW 296
82176: PUSH
82177: LD_INT 10
82179: GREATER
82180: IFFALSE 82196
// ComStandNearbyBuilding ( unit , depot ) ;
82182: LD_VAR 0 3
82186: PPUSH
82187: LD_VAR 0 10
82191: PPUSH
82192: CALL 21275 0 2
// end ; end ; end ;
82196: LD_VAR 0 5
82200: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
82201: LD_INT 0
82203: PPUSH
82204: PPUSH
82205: PPUSH
82206: PPUSH
// if not mc_bases then
82207: LD_EXP 50
82211: NOT
82212: IFFALSE 82216
// exit ;
82214: GO 82455
// for i = 1 to mc_bases do
82216: LD_ADDR_VAR 0 2
82220: PUSH
82221: DOUBLE
82222: LD_INT 1
82224: DEC
82225: ST_TO_ADDR
82226: LD_EXP 50
82230: PUSH
82231: FOR_TO
82232: IFFALSE 82453
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
82234: LD_ADDR_VAR 0 4
82238: PUSH
82239: LD_EXP 50
82243: PUSH
82244: LD_VAR 0 2
82248: ARRAY
82249: PPUSH
82250: LD_INT 21
82252: PUSH
82253: LD_INT 1
82255: PUSH
82256: EMPTY
82257: LIST
82258: LIST
82259: PPUSH
82260: CALL_OW 72
82264: PUSH
82265: LD_EXP 79
82269: PUSH
82270: LD_VAR 0 2
82274: ARRAY
82275: UNION
82276: ST_TO_ADDR
// if not tmp then
82277: LD_VAR 0 4
82281: NOT
82282: IFFALSE 82286
// continue ;
82284: GO 82231
// for j in tmp do
82286: LD_ADDR_VAR 0 3
82290: PUSH
82291: LD_VAR 0 4
82295: PUSH
82296: FOR_IN
82297: IFFALSE 82449
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
82299: LD_VAR 0 3
82303: PPUSH
82304: CALL_OW 110
82308: NOT
82309: PUSH
82310: LD_VAR 0 3
82314: PPUSH
82315: CALL_OW 314
82319: NOT
82320: AND
82321: PUSH
82322: LD_VAR 0 3
82326: PPUSH
82327: CALL_OW 311
82331: NOT
82332: AND
82333: PUSH
82334: LD_VAR 0 3
82338: PPUSH
82339: CALL_OW 310
82343: NOT
82344: AND
82345: PUSH
82346: LD_VAR 0 3
82350: PUSH
82351: LD_EXP 53
82355: PUSH
82356: LD_VAR 0 2
82360: ARRAY
82361: PUSH
82362: LD_INT 1
82364: ARRAY
82365: IN
82366: NOT
82367: AND
82368: PUSH
82369: LD_VAR 0 3
82373: PUSH
82374: LD_EXP 53
82378: PUSH
82379: LD_VAR 0 2
82383: ARRAY
82384: PUSH
82385: LD_INT 2
82387: ARRAY
82388: IN
82389: NOT
82390: AND
82391: PUSH
82392: LD_VAR 0 3
82396: PUSH
82397: LD_EXP 62
82401: PUSH
82402: LD_VAR 0 2
82406: ARRAY
82407: IN
82408: NOT
82409: AND
82410: IFFALSE 82447
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
82412: LD_VAR 0 2
82416: PPUSH
82417: LD_EXP 50
82421: PUSH
82422: LD_VAR 0 2
82426: ARRAY
82427: PPUSH
82428: LD_VAR 0 3
82432: PPUSH
82433: LD_VAR 0 3
82437: PPUSH
82438: CALL_OW 257
82442: PPUSH
82443: CALL 81219 0 4
// end ;
82447: GO 82296
82449: POP
82450: POP
// end ;
82451: GO 82231
82453: POP
82454: POP
// end ;
82455: LD_VAR 0 1
82459: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
82460: LD_INT 0
82462: PPUSH
82463: PPUSH
82464: PPUSH
82465: PPUSH
82466: PPUSH
82467: PPUSH
// if not mc_bases [ base ] then
82468: LD_EXP 50
82472: PUSH
82473: LD_VAR 0 1
82477: ARRAY
82478: NOT
82479: IFFALSE 82483
// exit ;
82481: GO 82665
// tmp := [ ] ;
82483: LD_ADDR_VAR 0 6
82487: PUSH
82488: EMPTY
82489: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
82490: LD_ADDR_VAR 0 7
82494: PUSH
82495: LD_VAR 0 3
82499: PPUSH
82500: LD_INT 0
82502: PPUSH
82503: CALL_OW 517
82507: ST_TO_ADDR
// if not list then
82508: LD_VAR 0 7
82512: NOT
82513: IFFALSE 82517
// exit ;
82515: GO 82665
// for i = 1 to amount do
82517: LD_ADDR_VAR 0 5
82521: PUSH
82522: DOUBLE
82523: LD_INT 1
82525: DEC
82526: ST_TO_ADDR
82527: LD_VAR 0 2
82531: PUSH
82532: FOR_TO
82533: IFFALSE 82613
// begin x := rand ( 1 , list [ 1 ] ) ;
82535: LD_ADDR_VAR 0 8
82539: PUSH
82540: LD_INT 1
82542: PPUSH
82543: LD_VAR 0 7
82547: PUSH
82548: LD_INT 1
82550: ARRAY
82551: PPUSH
82552: CALL_OW 12
82556: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
82557: LD_ADDR_VAR 0 6
82561: PUSH
82562: LD_VAR 0 6
82566: PPUSH
82567: LD_VAR 0 5
82571: PPUSH
82572: LD_VAR 0 7
82576: PUSH
82577: LD_INT 1
82579: ARRAY
82580: PUSH
82581: LD_VAR 0 8
82585: ARRAY
82586: PUSH
82587: LD_VAR 0 7
82591: PUSH
82592: LD_INT 2
82594: ARRAY
82595: PUSH
82596: LD_VAR 0 8
82600: ARRAY
82601: PUSH
82602: EMPTY
82603: LIST
82604: LIST
82605: PPUSH
82606: CALL_OW 1
82610: ST_TO_ADDR
// end ;
82611: GO 82532
82613: POP
82614: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
82615: LD_ADDR_EXP 63
82619: PUSH
82620: LD_EXP 63
82624: PPUSH
82625: LD_VAR 0 1
82629: PPUSH
82630: LD_VAR 0 6
82634: PPUSH
82635: CALL_OW 1
82639: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
82640: LD_ADDR_EXP 65
82644: PUSH
82645: LD_EXP 65
82649: PPUSH
82650: LD_VAR 0 1
82654: PPUSH
82655: LD_VAR 0 3
82659: PPUSH
82660: CALL_OW 1
82664: ST_TO_ADDR
// end ;
82665: LD_VAR 0 4
82669: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
82670: LD_INT 0
82672: PPUSH
// if not mc_bases [ base ] then
82673: LD_EXP 50
82677: PUSH
82678: LD_VAR 0 1
82682: ARRAY
82683: NOT
82684: IFFALSE 82688
// exit ;
82686: GO 82713
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
82688: LD_ADDR_EXP 55
82692: PUSH
82693: LD_EXP 55
82697: PPUSH
82698: LD_VAR 0 1
82702: PPUSH
82703: LD_VAR 0 2
82707: PPUSH
82708: CALL_OW 1
82712: ST_TO_ADDR
// end ;
82713: LD_VAR 0 3
82717: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
82718: LD_INT 0
82720: PPUSH
// if not mc_bases [ base ] then
82721: LD_EXP 50
82725: PUSH
82726: LD_VAR 0 1
82730: ARRAY
82731: NOT
82732: IFFALSE 82736
// exit ;
82734: GO 82773
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
82736: LD_ADDR_EXP 55
82740: PUSH
82741: LD_EXP 55
82745: PPUSH
82746: LD_VAR 0 1
82750: PPUSH
82751: LD_EXP 55
82755: PUSH
82756: LD_VAR 0 1
82760: ARRAY
82761: PUSH
82762: LD_VAR 0 2
82766: UNION
82767: PPUSH
82768: CALL_OW 1
82772: ST_TO_ADDR
// end ;
82773: LD_VAR 0 3
82777: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
82778: LD_INT 0
82780: PPUSH
// if not mc_bases [ base ] then
82781: LD_EXP 50
82785: PUSH
82786: LD_VAR 0 1
82790: ARRAY
82791: NOT
82792: IFFALSE 82796
// exit ;
82794: GO 82821
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
82796: LD_ADDR_EXP 71
82800: PUSH
82801: LD_EXP 71
82805: PPUSH
82806: LD_VAR 0 1
82810: PPUSH
82811: LD_VAR 0 2
82815: PPUSH
82816: CALL_OW 1
82820: ST_TO_ADDR
// end ;
82821: LD_VAR 0 3
82825: RET
// export function MC_InsertProduceList ( base , components ) ; begin
82826: LD_INT 0
82828: PPUSH
// if not mc_bases [ base ] then
82829: LD_EXP 50
82833: PUSH
82834: LD_VAR 0 1
82838: ARRAY
82839: NOT
82840: IFFALSE 82844
// exit ;
82842: GO 82881
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
82844: LD_ADDR_EXP 71
82848: PUSH
82849: LD_EXP 71
82853: PPUSH
82854: LD_VAR 0 1
82858: PPUSH
82859: LD_EXP 71
82863: PUSH
82864: LD_VAR 0 1
82868: ARRAY
82869: PUSH
82870: LD_VAR 0 2
82874: ADD
82875: PPUSH
82876: CALL_OW 1
82880: ST_TO_ADDR
// end ;
82881: LD_VAR 0 3
82885: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
82886: LD_INT 0
82888: PPUSH
// if not mc_bases [ base ] then
82889: LD_EXP 50
82893: PUSH
82894: LD_VAR 0 1
82898: ARRAY
82899: NOT
82900: IFFALSE 82904
// exit ;
82902: GO 82958
// mc_defender := Replace ( mc_defender , base , deflist ) ;
82904: LD_ADDR_EXP 72
82908: PUSH
82909: LD_EXP 72
82913: PPUSH
82914: LD_VAR 0 1
82918: PPUSH
82919: LD_VAR 0 2
82923: PPUSH
82924: CALL_OW 1
82928: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
82929: LD_ADDR_EXP 61
82933: PUSH
82934: LD_EXP 61
82938: PPUSH
82939: LD_VAR 0 1
82943: PPUSH
82944: LD_VAR 0 2
82948: PUSH
82949: LD_INT 0
82951: PLUS
82952: PPUSH
82953: CALL_OW 1
82957: ST_TO_ADDR
// end ;
82958: LD_VAR 0 3
82962: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
82963: LD_INT 0
82965: PPUSH
// if not mc_bases [ base ] then
82966: LD_EXP 50
82970: PUSH
82971: LD_VAR 0 1
82975: ARRAY
82976: NOT
82977: IFFALSE 82981
// exit ;
82979: GO 83006
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
82981: LD_ADDR_EXP 61
82985: PUSH
82986: LD_EXP 61
82990: PPUSH
82991: LD_VAR 0 1
82995: PPUSH
82996: LD_VAR 0 2
83000: PPUSH
83001: CALL_OW 1
83005: ST_TO_ADDR
// end ;
83006: LD_VAR 0 3
83010: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
83011: LD_INT 0
83013: PPUSH
83014: PPUSH
83015: PPUSH
83016: PPUSH
// if not mc_bases [ base ] then
83017: LD_EXP 50
83021: PUSH
83022: LD_VAR 0 1
83026: ARRAY
83027: NOT
83028: IFFALSE 83032
// exit ;
83030: GO 83097
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
83032: LD_ADDR_EXP 70
83036: PUSH
83037: LD_EXP 70
83041: PPUSH
83042: LD_VAR 0 1
83046: PUSH
83047: LD_EXP 70
83051: PUSH
83052: LD_VAR 0 1
83056: ARRAY
83057: PUSH
83058: LD_INT 1
83060: PLUS
83061: PUSH
83062: EMPTY
83063: LIST
83064: LIST
83065: PPUSH
83066: LD_VAR 0 1
83070: PUSH
83071: LD_VAR 0 2
83075: PUSH
83076: LD_VAR 0 3
83080: PUSH
83081: LD_VAR 0 4
83085: PUSH
83086: EMPTY
83087: LIST
83088: LIST
83089: LIST
83090: LIST
83091: PPUSH
83092: CALL 24697 0 3
83096: ST_TO_ADDR
// end ;
83097: LD_VAR 0 5
83101: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
83102: LD_INT 0
83104: PPUSH
// if not mc_bases [ base ] then
83105: LD_EXP 50
83109: PUSH
83110: LD_VAR 0 1
83114: ARRAY
83115: NOT
83116: IFFALSE 83120
// exit ;
83118: GO 83145
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
83120: LD_ADDR_EXP 87
83124: PUSH
83125: LD_EXP 87
83129: PPUSH
83130: LD_VAR 0 1
83134: PPUSH
83135: LD_VAR 0 2
83139: PPUSH
83140: CALL_OW 1
83144: ST_TO_ADDR
// end ;
83145: LD_VAR 0 3
83149: RET
// export function MC_GetMinesField ( base ) ; begin
83150: LD_INT 0
83152: PPUSH
// result := mc_mines [ base ] ;
83153: LD_ADDR_VAR 0 2
83157: PUSH
83158: LD_EXP 63
83162: PUSH
83163: LD_VAR 0 1
83167: ARRAY
83168: ST_TO_ADDR
// end ;
83169: LD_VAR 0 2
83173: RET
// export function MC_GetProduceList ( base ) ; begin
83174: LD_INT 0
83176: PPUSH
// result := mc_produce [ base ] ;
83177: LD_ADDR_VAR 0 2
83181: PUSH
83182: LD_EXP 71
83186: PUSH
83187: LD_VAR 0 1
83191: ARRAY
83192: ST_TO_ADDR
// end ;
83193: LD_VAR 0 2
83197: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
83198: LD_INT 0
83200: PPUSH
83201: PPUSH
// if not mc_bases then
83202: LD_EXP 50
83206: NOT
83207: IFFALSE 83211
// exit ;
83209: GO 83276
// if mc_bases [ base ] then
83211: LD_EXP 50
83215: PUSH
83216: LD_VAR 0 1
83220: ARRAY
83221: IFFALSE 83276
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
83223: LD_ADDR_VAR 0 3
83227: PUSH
83228: LD_EXP 50
83232: PUSH
83233: LD_VAR 0 1
83237: ARRAY
83238: PPUSH
83239: LD_INT 30
83241: PUSH
83242: LD_VAR 0 2
83246: PUSH
83247: EMPTY
83248: LIST
83249: LIST
83250: PPUSH
83251: CALL_OW 72
83255: ST_TO_ADDR
// if result then
83256: LD_VAR 0 3
83260: IFFALSE 83276
// result := result [ 1 ] ;
83262: LD_ADDR_VAR 0 3
83266: PUSH
83267: LD_VAR 0 3
83271: PUSH
83272: LD_INT 1
83274: ARRAY
83275: ST_TO_ADDR
// end ; end ;
83276: LD_VAR 0 3
83280: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
83281: LD_INT 0
83283: PPUSH
83284: PPUSH
// if not mc_bases then
83285: LD_EXP 50
83289: NOT
83290: IFFALSE 83294
// exit ;
83292: GO 83339
// if mc_bases [ base ] then
83294: LD_EXP 50
83298: PUSH
83299: LD_VAR 0 1
83303: ARRAY
83304: IFFALSE 83339
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
83306: LD_ADDR_VAR 0 3
83310: PUSH
83311: LD_EXP 50
83315: PUSH
83316: LD_VAR 0 1
83320: ARRAY
83321: PPUSH
83322: LD_INT 30
83324: PUSH
83325: LD_VAR 0 2
83329: PUSH
83330: EMPTY
83331: LIST
83332: LIST
83333: PPUSH
83334: CALL_OW 72
83338: ST_TO_ADDR
// end ;
83339: LD_VAR 0 3
83343: RET
// export function MC_SetTame ( base , area ) ; begin
83344: LD_INT 0
83346: PPUSH
// if not mc_bases or not base then
83347: LD_EXP 50
83351: NOT
83352: PUSH
83353: LD_VAR 0 1
83357: NOT
83358: OR
83359: IFFALSE 83363
// exit ;
83361: GO 83388
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
83363: LD_ADDR_EXP 78
83367: PUSH
83368: LD_EXP 78
83372: PPUSH
83373: LD_VAR 0 1
83377: PPUSH
83378: LD_VAR 0 2
83382: PPUSH
83383: CALL_OW 1
83387: ST_TO_ADDR
// end ;
83388: LD_VAR 0 3
83392: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
83393: LD_INT 0
83395: PPUSH
83396: PPUSH
// if not mc_bases or not base then
83397: LD_EXP 50
83401: NOT
83402: PUSH
83403: LD_VAR 0 1
83407: NOT
83408: OR
83409: IFFALSE 83413
// exit ;
83411: GO 83515
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
83413: LD_ADDR_VAR 0 4
83417: PUSH
83418: LD_EXP 50
83422: PUSH
83423: LD_VAR 0 1
83427: ARRAY
83428: PPUSH
83429: LD_INT 30
83431: PUSH
83432: LD_VAR 0 2
83436: PUSH
83437: EMPTY
83438: LIST
83439: LIST
83440: PPUSH
83441: CALL_OW 72
83445: ST_TO_ADDR
// if not tmp then
83446: LD_VAR 0 4
83450: NOT
83451: IFFALSE 83455
// exit ;
83453: GO 83515
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
83455: LD_ADDR_EXP 82
83459: PUSH
83460: LD_EXP 82
83464: PPUSH
83465: LD_VAR 0 1
83469: PPUSH
83470: LD_EXP 82
83474: PUSH
83475: LD_VAR 0 1
83479: ARRAY
83480: PPUSH
83481: LD_EXP 82
83485: PUSH
83486: LD_VAR 0 1
83490: ARRAY
83491: PUSH
83492: LD_INT 1
83494: PLUS
83495: PPUSH
83496: LD_VAR 0 4
83500: PUSH
83501: LD_INT 1
83503: ARRAY
83504: PPUSH
83505: CALL_OW 2
83509: PPUSH
83510: CALL_OW 1
83514: ST_TO_ADDR
// end ;
83515: LD_VAR 0 3
83519: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
83520: LD_INT 0
83522: PPUSH
83523: PPUSH
// if not mc_bases or not base or not kinds then
83524: LD_EXP 50
83528: NOT
83529: PUSH
83530: LD_VAR 0 1
83534: NOT
83535: OR
83536: PUSH
83537: LD_VAR 0 2
83541: NOT
83542: OR
83543: IFFALSE 83547
// exit ;
83545: GO 83608
// for i in kinds do
83547: LD_ADDR_VAR 0 4
83551: PUSH
83552: LD_VAR 0 2
83556: PUSH
83557: FOR_IN
83558: IFFALSE 83606
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
83560: LD_ADDR_EXP 84
83564: PUSH
83565: LD_EXP 84
83569: PPUSH
83570: LD_VAR 0 1
83574: PUSH
83575: LD_EXP 84
83579: PUSH
83580: LD_VAR 0 1
83584: ARRAY
83585: PUSH
83586: LD_INT 1
83588: PLUS
83589: PUSH
83590: EMPTY
83591: LIST
83592: LIST
83593: PPUSH
83594: LD_VAR 0 4
83598: PPUSH
83599: CALL 24697 0 3
83603: ST_TO_ADDR
83604: GO 83557
83606: POP
83607: POP
// end ;
83608: LD_VAR 0 3
83612: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
83613: LD_INT 0
83615: PPUSH
// if not mc_bases or not base or not areas then
83616: LD_EXP 50
83620: NOT
83621: PUSH
83622: LD_VAR 0 1
83626: NOT
83627: OR
83628: PUSH
83629: LD_VAR 0 2
83633: NOT
83634: OR
83635: IFFALSE 83639
// exit ;
83637: GO 83664
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
83639: LD_ADDR_EXP 68
83643: PUSH
83644: LD_EXP 68
83648: PPUSH
83649: LD_VAR 0 1
83653: PPUSH
83654: LD_VAR 0 2
83658: PPUSH
83659: CALL_OW 1
83663: ST_TO_ADDR
// end ;
83664: LD_VAR 0 3
83668: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
83669: LD_INT 0
83671: PPUSH
// if not mc_bases or not base or not teleports_exit then
83672: LD_EXP 50
83676: NOT
83677: PUSH
83678: LD_VAR 0 1
83682: NOT
83683: OR
83684: PUSH
83685: LD_VAR 0 2
83689: NOT
83690: OR
83691: IFFALSE 83695
// exit ;
83693: GO 83720
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
83695: LD_ADDR_EXP 85
83699: PUSH
83700: LD_EXP 85
83704: PPUSH
83705: LD_VAR 0 1
83709: PPUSH
83710: LD_VAR 0 2
83714: PPUSH
83715: CALL_OW 1
83719: ST_TO_ADDR
// end ;
83720: LD_VAR 0 3
83724: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
83725: LD_INT 0
83727: PPUSH
83728: PPUSH
83729: PPUSH
// if not mc_bases or not base or not ext_list then
83730: LD_EXP 50
83734: NOT
83735: PUSH
83736: LD_VAR 0 1
83740: NOT
83741: OR
83742: PUSH
83743: LD_VAR 0 5
83747: NOT
83748: OR
83749: IFFALSE 83753
// exit ;
83751: GO 83926
// tmp := GetFacExtXYD ( x , y , d ) ;
83753: LD_ADDR_VAR 0 8
83757: PUSH
83758: LD_VAR 0 2
83762: PPUSH
83763: LD_VAR 0 3
83767: PPUSH
83768: LD_VAR 0 4
83772: PPUSH
83773: CALL 54084 0 3
83777: ST_TO_ADDR
// if not tmp then
83778: LD_VAR 0 8
83782: NOT
83783: IFFALSE 83787
// exit ;
83785: GO 83926
// for i in tmp do
83787: LD_ADDR_VAR 0 7
83791: PUSH
83792: LD_VAR 0 8
83796: PUSH
83797: FOR_IN
83798: IFFALSE 83924
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
83800: LD_ADDR_EXP 55
83804: PUSH
83805: LD_EXP 55
83809: PPUSH
83810: LD_VAR 0 1
83814: PPUSH
83815: LD_EXP 55
83819: PUSH
83820: LD_VAR 0 1
83824: ARRAY
83825: PPUSH
83826: LD_EXP 55
83830: PUSH
83831: LD_VAR 0 1
83835: ARRAY
83836: PUSH
83837: LD_INT 1
83839: PLUS
83840: PPUSH
83841: LD_VAR 0 5
83845: PUSH
83846: LD_INT 1
83848: ARRAY
83849: PUSH
83850: LD_VAR 0 7
83854: PUSH
83855: LD_INT 1
83857: ARRAY
83858: PUSH
83859: LD_VAR 0 7
83863: PUSH
83864: LD_INT 2
83866: ARRAY
83867: PUSH
83868: LD_VAR 0 7
83872: PUSH
83873: LD_INT 3
83875: ARRAY
83876: PUSH
83877: EMPTY
83878: LIST
83879: LIST
83880: LIST
83881: LIST
83882: PPUSH
83883: CALL_OW 2
83887: PPUSH
83888: CALL_OW 1
83892: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
83893: LD_ADDR_VAR 0 5
83897: PUSH
83898: LD_VAR 0 5
83902: PPUSH
83903: LD_INT 1
83905: PPUSH
83906: CALL_OW 3
83910: ST_TO_ADDR
// if not ext_list then
83911: LD_VAR 0 5
83915: NOT
83916: IFFALSE 83922
// exit ;
83918: POP
83919: POP
83920: GO 83926
// end ;
83922: GO 83797
83924: POP
83925: POP
// end ;
83926: LD_VAR 0 6
83930: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
83931: LD_INT 0
83933: PPUSH
// if not mc_bases or not base or not weapon_list then
83934: LD_EXP 50
83938: NOT
83939: PUSH
83940: LD_VAR 0 1
83944: NOT
83945: OR
83946: PUSH
83947: LD_VAR 0 2
83951: NOT
83952: OR
83953: IFFALSE 83957
// exit ;
83955: GO 83982
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
83957: LD_ADDR_EXP 89
83961: PUSH
83962: LD_EXP 89
83966: PPUSH
83967: LD_VAR 0 1
83971: PPUSH
83972: LD_VAR 0 2
83976: PPUSH
83977: CALL_OW 1
83981: ST_TO_ADDR
// end ;
83982: LD_VAR 0 3
83986: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
83987: LD_INT 0
83989: PPUSH
// if not mc_bases or not base or not tech_list then
83990: LD_EXP 50
83994: NOT
83995: PUSH
83996: LD_VAR 0 1
84000: NOT
84001: OR
84002: PUSH
84003: LD_VAR 0 2
84007: NOT
84008: OR
84009: IFFALSE 84013
// exit ;
84011: GO 84038
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
84013: LD_ADDR_EXP 77
84017: PUSH
84018: LD_EXP 77
84022: PPUSH
84023: LD_VAR 0 1
84027: PPUSH
84028: LD_VAR 0 2
84032: PPUSH
84033: CALL_OW 1
84037: ST_TO_ADDR
// end ;
84038: LD_VAR 0 3
84042: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
84043: LD_INT 0
84045: PPUSH
// if not mc_bases or not parking_area or not base then
84046: LD_EXP 50
84050: NOT
84051: PUSH
84052: LD_VAR 0 2
84056: NOT
84057: OR
84058: PUSH
84059: LD_VAR 0 1
84063: NOT
84064: OR
84065: IFFALSE 84069
// exit ;
84067: GO 84094
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
84069: LD_ADDR_EXP 74
84073: PUSH
84074: LD_EXP 74
84078: PPUSH
84079: LD_VAR 0 1
84083: PPUSH
84084: LD_VAR 0 2
84088: PPUSH
84089: CALL_OW 1
84093: ST_TO_ADDR
// end ;
84094: LD_VAR 0 3
84098: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
84099: LD_INT 0
84101: PPUSH
// if not mc_bases or not base or not scan_area then
84102: LD_EXP 50
84106: NOT
84107: PUSH
84108: LD_VAR 0 1
84112: NOT
84113: OR
84114: PUSH
84115: LD_VAR 0 2
84119: NOT
84120: OR
84121: IFFALSE 84125
// exit ;
84123: GO 84150
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
84125: LD_ADDR_EXP 75
84129: PUSH
84130: LD_EXP 75
84134: PPUSH
84135: LD_VAR 0 1
84139: PPUSH
84140: LD_VAR 0 2
84144: PPUSH
84145: CALL_OW 1
84149: ST_TO_ADDR
// end ;
84150: LD_VAR 0 3
84154: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
84155: LD_INT 0
84157: PPUSH
84158: PPUSH
// if not mc_bases or not base then
84159: LD_EXP 50
84163: NOT
84164: PUSH
84165: LD_VAR 0 1
84169: NOT
84170: OR
84171: IFFALSE 84175
// exit ;
84173: GO 84239
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
84175: LD_ADDR_VAR 0 3
84179: PUSH
84180: LD_INT 1
84182: PUSH
84183: LD_INT 2
84185: PUSH
84186: LD_INT 3
84188: PUSH
84189: LD_INT 4
84191: PUSH
84192: LD_INT 11
84194: PUSH
84195: EMPTY
84196: LIST
84197: LIST
84198: LIST
84199: LIST
84200: LIST
84201: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
84202: LD_ADDR_EXP 77
84206: PUSH
84207: LD_EXP 77
84211: PPUSH
84212: LD_VAR 0 1
84216: PPUSH
84217: LD_EXP 77
84221: PUSH
84222: LD_VAR 0 1
84226: ARRAY
84227: PUSH
84228: LD_VAR 0 3
84232: DIFF
84233: PPUSH
84234: CALL_OW 1
84238: ST_TO_ADDR
// end ;
84239: LD_VAR 0 2
84243: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
84244: LD_INT 0
84246: PPUSH
// result := mc_vehicles [ base ] ;
84247: LD_ADDR_VAR 0 3
84251: PUSH
84252: LD_EXP 69
84256: PUSH
84257: LD_VAR 0 1
84261: ARRAY
84262: ST_TO_ADDR
// if onlyCombat then
84263: LD_VAR 0 2
84267: IFFALSE 84445
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
84269: LD_ADDR_VAR 0 3
84273: PUSH
84274: LD_VAR 0 3
84278: PUSH
84279: LD_VAR 0 3
84283: PPUSH
84284: LD_INT 2
84286: PUSH
84287: LD_INT 34
84289: PUSH
84290: LD_INT 12
84292: PUSH
84293: EMPTY
84294: LIST
84295: LIST
84296: PUSH
84297: LD_INT 34
84299: PUSH
84300: LD_INT 51
84302: PUSH
84303: EMPTY
84304: LIST
84305: LIST
84306: PUSH
84307: LD_INT 34
84309: PUSH
84310: LD_EXP 30
84314: PUSH
84315: EMPTY
84316: LIST
84317: LIST
84318: PUSH
84319: LD_INT 34
84321: PUSH
84322: LD_INT 32
84324: PUSH
84325: EMPTY
84326: LIST
84327: LIST
84328: PUSH
84329: LD_INT 34
84331: PUSH
84332: LD_INT 13
84334: PUSH
84335: EMPTY
84336: LIST
84337: LIST
84338: PUSH
84339: LD_INT 34
84341: PUSH
84342: LD_INT 52
84344: PUSH
84345: EMPTY
84346: LIST
84347: LIST
84348: PUSH
84349: LD_INT 34
84351: PUSH
84352: LD_EXP 35
84356: PUSH
84357: EMPTY
84358: LIST
84359: LIST
84360: PUSH
84361: LD_INT 34
84363: PUSH
84364: LD_INT 14
84366: PUSH
84367: EMPTY
84368: LIST
84369: LIST
84370: PUSH
84371: LD_INT 34
84373: PUSH
84374: LD_INT 53
84376: PUSH
84377: EMPTY
84378: LIST
84379: LIST
84380: PUSH
84381: LD_INT 34
84383: PUSH
84384: LD_EXP 29
84388: PUSH
84389: EMPTY
84390: LIST
84391: LIST
84392: PUSH
84393: LD_INT 34
84395: PUSH
84396: LD_INT 31
84398: PUSH
84399: EMPTY
84400: LIST
84401: LIST
84402: PUSH
84403: LD_INT 34
84405: PUSH
84406: LD_INT 48
84408: PUSH
84409: EMPTY
84410: LIST
84411: LIST
84412: PUSH
84413: LD_INT 34
84415: PUSH
84416: LD_INT 8
84418: PUSH
84419: EMPTY
84420: LIST
84421: LIST
84422: PUSH
84423: EMPTY
84424: LIST
84425: LIST
84426: LIST
84427: LIST
84428: LIST
84429: LIST
84430: LIST
84431: LIST
84432: LIST
84433: LIST
84434: LIST
84435: LIST
84436: LIST
84437: LIST
84438: PPUSH
84439: CALL_OW 72
84443: DIFF
84444: ST_TO_ADDR
// end ; end_of_file
84445: LD_VAR 0 3
84449: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
84450: LD_INT 0
84452: PPUSH
84453: PPUSH
84454: PPUSH
// if not mc_bases or not skirmish then
84455: LD_EXP 50
84459: NOT
84460: PUSH
84461: LD_EXP 48
84465: NOT
84466: OR
84467: IFFALSE 84471
// exit ;
84469: GO 84636
// for i = 1 to mc_bases do
84471: LD_ADDR_VAR 0 4
84475: PUSH
84476: DOUBLE
84477: LD_INT 1
84479: DEC
84480: ST_TO_ADDR
84481: LD_EXP 50
84485: PUSH
84486: FOR_TO
84487: IFFALSE 84634
// begin if sci in mc_bases [ i ] then
84489: LD_VAR 0 2
84493: PUSH
84494: LD_EXP 50
84498: PUSH
84499: LD_VAR 0 4
84503: ARRAY
84504: IN
84505: IFFALSE 84632
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
84507: LD_ADDR_EXP 79
84511: PUSH
84512: LD_EXP 79
84516: PPUSH
84517: LD_VAR 0 4
84521: PUSH
84522: LD_EXP 79
84526: PUSH
84527: LD_VAR 0 4
84531: ARRAY
84532: PUSH
84533: LD_INT 1
84535: PLUS
84536: PUSH
84537: EMPTY
84538: LIST
84539: LIST
84540: PPUSH
84541: LD_VAR 0 1
84545: PPUSH
84546: CALL 24697 0 3
84550: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
84551: LD_ADDR_VAR 0 5
84555: PUSH
84556: LD_EXP 50
84560: PUSH
84561: LD_VAR 0 4
84565: ARRAY
84566: PPUSH
84567: LD_INT 2
84569: PUSH
84570: LD_INT 30
84572: PUSH
84573: LD_INT 0
84575: PUSH
84576: EMPTY
84577: LIST
84578: LIST
84579: PUSH
84580: LD_INT 30
84582: PUSH
84583: LD_INT 1
84585: PUSH
84586: EMPTY
84587: LIST
84588: LIST
84589: PUSH
84590: EMPTY
84591: LIST
84592: LIST
84593: LIST
84594: PPUSH
84595: CALL_OW 72
84599: PPUSH
84600: LD_VAR 0 1
84604: PPUSH
84605: CALL_OW 74
84609: ST_TO_ADDR
// if tmp then
84610: LD_VAR 0 5
84614: IFFALSE 84630
// ComStandNearbyBuilding ( ape , tmp ) ;
84616: LD_VAR 0 1
84620: PPUSH
84621: LD_VAR 0 5
84625: PPUSH
84626: CALL 21275 0 2
// break ;
84630: GO 84634
// end ; end ;
84632: GO 84486
84634: POP
84635: POP
// end ;
84636: LD_VAR 0 3
84640: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
84641: LD_INT 0
84643: PPUSH
84644: PPUSH
84645: PPUSH
// if not mc_bases or not skirmish then
84646: LD_EXP 50
84650: NOT
84651: PUSH
84652: LD_EXP 48
84656: NOT
84657: OR
84658: IFFALSE 84662
// exit ;
84660: GO 84751
// for i = 1 to mc_bases do
84662: LD_ADDR_VAR 0 4
84666: PUSH
84667: DOUBLE
84668: LD_INT 1
84670: DEC
84671: ST_TO_ADDR
84672: LD_EXP 50
84676: PUSH
84677: FOR_TO
84678: IFFALSE 84749
// begin if building in mc_busy_turret_list [ i ] then
84680: LD_VAR 0 1
84684: PUSH
84685: LD_EXP 60
84689: PUSH
84690: LD_VAR 0 4
84694: ARRAY
84695: IN
84696: IFFALSE 84747
// begin tmp := mc_busy_turret_list [ i ] diff building ;
84698: LD_ADDR_VAR 0 5
84702: PUSH
84703: LD_EXP 60
84707: PUSH
84708: LD_VAR 0 4
84712: ARRAY
84713: PUSH
84714: LD_VAR 0 1
84718: DIFF
84719: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
84720: LD_ADDR_EXP 60
84724: PUSH
84725: LD_EXP 60
84729: PPUSH
84730: LD_VAR 0 4
84734: PPUSH
84735: LD_VAR 0 5
84739: PPUSH
84740: CALL_OW 1
84744: ST_TO_ADDR
// break ;
84745: GO 84749
// end ; end ;
84747: GO 84677
84749: POP
84750: POP
// end ;
84751: LD_VAR 0 3
84755: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
84756: LD_INT 0
84758: PPUSH
84759: PPUSH
84760: PPUSH
// if not mc_bases or not skirmish then
84761: LD_EXP 50
84765: NOT
84766: PUSH
84767: LD_EXP 48
84771: NOT
84772: OR
84773: IFFALSE 84777
// exit ;
84775: GO 84976
// for i = 1 to mc_bases do
84777: LD_ADDR_VAR 0 5
84781: PUSH
84782: DOUBLE
84783: LD_INT 1
84785: DEC
84786: ST_TO_ADDR
84787: LD_EXP 50
84791: PUSH
84792: FOR_TO
84793: IFFALSE 84974
// if building in mc_bases [ i ] then
84795: LD_VAR 0 1
84799: PUSH
84800: LD_EXP 50
84804: PUSH
84805: LD_VAR 0 5
84809: ARRAY
84810: IN
84811: IFFALSE 84972
// begin tmp := mc_bases [ i ] diff building ;
84813: LD_ADDR_VAR 0 6
84817: PUSH
84818: LD_EXP 50
84822: PUSH
84823: LD_VAR 0 5
84827: ARRAY
84828: PUSH
84829: LD_VAR 0 1
84833: DIFF
84834: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
84835: LD_ADDR_EXP 50
84839: PUSH
84840: LD_EXP 50
84844: PPUSH
84845: LD_VAR 0 5
84849: PPUSH
84850: LD_VAR 0 6
84854: PPUSH
84855: CALL_OW 1
84859: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
84860: LD_VAR 0 1
84864: PUSH
84865: LD_EXP 58
84869: PUSH
84870: LD_VAR 0 5
84874: ARRAY
84875: IN
84876: IFFALSE 84915
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
84878: LD_ADDR_EXP 58
84882: PUSH
84883: LD_EXP 58
84887: PPUSH
84888: LD_VAR 0 5
84892: PPUSH
84893: LD_EXP 58
84897: PUSH
84898: LD_VAR 0 5
84902: ARRAY
84903: PUSH
84904: LD_VAR 0 1
84908: DIFF
84909: PPUSH
84910: CALL_OW 1
84914: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
84915: LD_VAR 0 1
84919: PUSH
84920: LD_EXP 59
84924: PUSH
84925: LD_VAR 0 5
84929: ARRAY
84930: IN
84931: IFFALSE 84970
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
84933: LD_ADDR_EXP 59
84937: PUSH
84938: LD_EXP 59
84942: PPUSH
84943: LD_VAR 0 5
84947: PPUSH
84948: LD_EXP 59
84952: PUSH
84953: LD_VAR 0 5
84957: ARRAY
84958: PUSH
84959: LD_VAR 0 1
84963: DIFF
84964: PPUSH
84965: CALL_OW 1
84969: ST_TO_ADDR
// break ;
84970: GO 84974
// end ;
84972: GO 84792
84974: POP
84975: POP
// end ;
84976: LD_VAR 0 4
84980: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
84981: LD_INT 0
84983: PPUSH
84984: PPUSH
84985: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
84986: LD_EXP 50
84990: NOT
84991: PUSH
84992: LD_EXP 48
84996: NOT
84997: OR
84998: PUSH
84999: LD_VAR 0 3
85003: PUSH
85004: LD_EXP 76
85008: IN
85009: NOT
85010: OR
85011: IFFALSE 85015
// exit ;
85013: GO 85138
// for i = 1 to mc_vehicles do
85015: LD_ADDR_VAR 0 6
85019: PUSH
85020: DOUBLE
85021: LD_INT 1
85023: DEC
85024: ST_TO_ADDR
85025: LD_EXP 69
85029: PUSH
85030: FOR_TO
85031: IFFALSE 85136
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
85033: LD_VAR 0 2
85037: PUSH
85038: LD_EXP 69
85042: PUSH
85043: LD_VAR 0 6
85047: ARRAY
85048: IN
85049: PUSH
85050: LD_VAR 0 1
85054: PUSH
85055: LD_EXP 69
85059: PUSH
85060: LD_VAR 0 6
85064: ARRAY
85065: IN
85066: OR
85067: IFFALSE 85134
// begin tmp := mc_vehicles [ i ] diff old ;
85069: LD_ADDR_VAR 0 7
85073: PUSH
85074: LD_EXP 69
85078: PUSH
85079: LD_VAR 0 6
85083: ARRAY
85084: PUSH
85085: LD_VAR 0 2
85089: DIFF
85090: ST_TO_ADDR
// tmp := tmp diff new ;
85091: LD_ADDR_VAR 0 7
85095: PUSH
85096: LD_VAR 0 7
85100: PUSH
85101: LD_VAR 0 1
85105: DIFF
85106: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
85107: LD_ADDR_EXP 69
85111: PUSH
85112: LD_EXP 69
85116: PPUSH
85117: LD_VAR 0 6
85121: PPUSH
85122: LD_VAR 0 7
85126: PPUSH
85127: CALL_OW 1
85131: ST_TO_ADDR
// break ;
85132: GO 85136
// end ;
85134: GO 85030
85136: POP
85137: POP
// end ;
85138: LD_VAR 0 5
85142: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
85143: LD_INT 0
85145: PPUSH
85146: PPUSH
85147: PPUSH
85148: PPUSH
// if not mc_bases or not skirmish then
85149: LD_EXP 50
85153: NOT
85154: PUSH
85155: LD_EXP 48
85159: NOT
85160: OR
85161: IFFALSE 85165
// exit ;
85163: GO 85557
// side := GetSide ( vehicle ) ;
85165: LD_ADDR_VAR 0 5
85169: PUSH
85170: LD_VAR 0 1
85174: PPUSH
85175: CALL_OW 255
85179: ST_TO_ADDR
// for i = 1 to mc_bases do
85180: LD_ADDR_VAR 0 4
85184: PUSH
85185: DOUBLE
85186: LD_INT 1
85188: DEC
85189: ST_TO_ADDR
85190: LD_EXP 50
85194: PUSH
85195: FOR_TO
85196: IFFALSE 85555
// begin if factory in mc_bases [ i ] then
85198: LD_VAR 0 2
85202: PUSH
85203: LD_EXP 50
85207: PUSH
85208: LD_VAR 0 4
85212: ARRAY
85213: IN
85214: IFFALSE 85553
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ar_crane , ru_siberium_rocket , us_siberium_rocket ] then
85216: LD_EXP 72
85220: PUSH
85221: LD_VAR 0 4
85225: ARRAY
85226: PUSH
85227: LD_EXP 61
85231: PUSH
85232: LD_VAR 0 4
85236: ARRAY
85237: LESS
85238: PUSH
85239: LD_VAR 0 1
85243: PPUSH
85244: CALL_OW 264
85248: PUSH
85249: LD_INT 31
85251: PUSH
85252: LD_INT 32
85254: PUSH
85255: LD_INT 51
85257: PUSH
85258: LD_EXP 30
85262: PUSH
85263: LD_INT 12
85265: PUSH
85266: LD_INT 30
85268: PUSH
85269: LD_EXP 29
85273: PUSH
85274: LD_INT 11
85276: PUSH
85277: LD_INT 53
85279: PUSH
85280: LD_INT 14
85282: PUSH
85283: LD_EXP 33
85287: PUSH
85288: LD_INT 29
85290: PUSH
85291: LD_EXP 31
85295: PUSH
85296: LD_INT 13
85298: PUSH
85299: LD_INT 52
85301: PUSH
85302: LD_EXP 35
85306: PUSH
85307: LD_INT 48
85309: PUSH
85310: LD_INT 8
85312: PUSH
85313: EMPTY
85314: LIST
85315: LIST
85316: LIST
85317: LIST
85318: LIST
85319: LIST
85320: LIST
85321: LIST
85322: LIST
85323: LIST
85324: LIST
85325: LIST
85326: LIST
85327: LIST
85328: LIST
85329: LIST
85330: LIST
85331: LIST
85332: IN
85333: NOT
85334: AND
85335: IFFALSE 85383
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
85337: LD_ADDR_EXP 72
85341: PUSH
85342: LD_EXP 72
85346: PPUSH
85347: LD_VAR 0 4
85351: PUSH
85352: LD_EXP 72
85356: PUSH
85357: LD_VAR 0 4
85361: ARRAY
85362: PUSH
85363: LD_INT 1
85365: PLUS
85366: PUSH
85367: EMPTY
85368: LIST
85369: LIST
85370: PPUSH
85371: LD_VAR 0 1
85375: PPUSH
85376: CALL 24697 0 3
85380: ST_TO_ADDR
85381: GO 85427
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
85383: LD_ADDR_EXP 69
85387: PUSH
85388: LD_EXP 69
85392: PPUSH
85393: LD_VAR 0 4
85397: PUSH
85398: LD_EXP 69
85402: PUSH
85403: LD_VAR 0 4
85407: ARRAY
85408: PUSH
85409: LD_INT 1
85411: PLUS
85412: PUSH
85413: EMPTY
85414: LIST
85415: LIST
85416: PPUSH
85417: LD_VAR 0 1
85421: PPUSH
85422: CALL 24697 0 3
85426: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
85427: LD_VAR 0 1
85431: PPUSH
85432: CALL_OW 263
85436: PUSH
85437: LD_INT 2
85439: EQUAL
85440: IFFALSE 85469
// begin repeat Connect ( vehicle ) ;
85442: LD_VAR 0 1
85446: PPUSH
85447: CALL 27668 0 1
// wait ( 0 0$1 ) ;
85451: LD_INT 35
85453: PPUSH
85454: CALL_OW 67
// until IsControledBy ( vehicle ) ;
85458: LD_VAR 0 1
85462: PPUSH
85463: CALL_OW 312
85467: IFFALSE 85442
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
85469: LD_VAR 0 1
85473: PPUSH
85474: LD_EXP 74
85478: PUSH
85479: LD_VAR 0 4
85483: ARRAY
85484: PPUSH
85485: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
85489: LD_VAR 0 1
85493: PPUSH
85494: CALL_OW 263
85498: PUSH
85499: LD_INT 1
85501: NONEQUAL
85502: IFFALSE 85506
// break ;
85504: GO 85555
// repeat wait ( 0 0$1 ) ;
85506: LD_INT 35
85508: PPUSH
85509: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
85513: LD_VAR 0 1
85517: PPUSH
85518: LD_EXP 74
85522: PUSH
85523: LD_VAR 0 4
85527: ARRAY
85528: PPUSH
85529: CALL_OW 308
85533: IFFALSE 85506
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
85535: LD_VAR 0 1
85539: PPUSH
85540: CALL_OW 311
85544: PPUSH
85545: CALL_OW 121
// exit ;
85549: POP
85550: POP
85551: GO 85557
// end ; end ;
85553: GO 85195
85555: POP
85556: POP
// end ;
85557: LD_VAR 0 3
85561: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
85562: LD_INT 0
85564: PPUSH
85565: PPUSH
85566: PPUSH
85567: PPUSH
// if not mc_bases or not skirmish then
85568: LD_EXP 50
85572: NOT
85573: PUSH
85574: LD_EXP 48
85578: NOT
85579: OR
85580: IFFALSE 85584
// exit ;
85582: GO 85937
// repeat wait ( 0 0$1 ) ;
85584: LD_INT 35
85586: PPUSH
85587: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
85591: LD_VAR 0 2
85595: PPUSH
85596: LD_VAR 0 3
85600: PPUSH
85601: CALL_OW 284
85605: IFFALSE 85584
// if GetResourceTypeXY ( x , y ) = mat_artefact then
85607: LD_VAR 0 2
85611: PPUSH
85612: LD_VAR 0 3
85616: PPUSH
85617: CALL_OW 283
85621: PUSH
85622: LD_INT 4
85624: EQUAL
85625: IFFALSE 85629
// exit ;
85627: GO 85937
// for i = 1 to mc_bases do
85629: LD_ADDR_VAR 0 7
85633: PUSH
85634: DOUBLE
85635: LD_INT 1
85637: DEC
85638: ST_TO_ADDR
85639: LD_EXP 50
85643: PUSH
85644: FOR_TO
85645: IFFALSE 85935
// begin if mc_crates_area [ i ] then
85647: LD_EXP 68
85651: PUSH
85652: LD_VAR 0 7
85656: ARRAY
85657: IFFALSE 85768
// for j in mc_crates_area [ i ] do
85659: LD_ADDR_VAR 0 8
85663: PUSH
85664: LD_EXP 68
85668: PUSH
85669: LD_VAR 0 7
85673: ARRAY
85674: PUSH
85675: FOR_IN
85676: IFFALSE 85766
// if InArea ( x , y , j ) then
85678: LD_VAR 0 2
85682: PPUSH
85683: LD_VAR 0 3
85687: PPUSH
85688: LD_VAR 0 8
85692: PPUSH
85693: CALL_OW 309
85697: IFFALSE 85764
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
85699: LD_ADDR_EXP 66
85703: PUSH
85704: LD_EXP 66
85708: PPUSH
85709: LD_VAR 0 7
85713: PUSH
85714: LD_EXP 66
85718: PUSH
85719: LD_VAR 0 7
85723: ARRAY
85724: PUSH
85725: LD_INT 1
85727: PLUS
85728: PUSH
85729: EMPTY
85730: LIST
85731: LIST
85732: PPUSH
85733: LD_VAR 0 4
85737: PUSH
85738: LD_VAR 0 2
85742: PUSH
85743: LD_VAR 0 3
85747: PUSH
85748: EMPTY
85749: LIST
85750: LIST
85751: LIST
85752: PPUSH
85753: CALL 24697 0 3
85757: ST_TO_ADDR
// exit ;
85758: POP
85759: POP
85760: POP
85761: POP
85762: GO 85937
// end ;
85764: GO 85675
85766: POP
85767: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
85768: LD_ADDR_VAR 0 9
85772: PUSH
85773: LD_EXP 50
85777: PUSH
85778: LD_VAR 0 7
85782: ARRAY
85783: PPUSH
85784: LD_INT 2
85786: PUSH
85787: LD_INT 30
85789: PUSH
85790: LD_INT 0
85792: PUSH
85793: EMPTY
85794: LIST
85795: LIST
85796: PUSH
85797: LD_INT 30
85799: PUSH
85800: LD_INT 1
85802: PUSH
85803: EMPTY
85804: LIST
85805: LIST
85806: PUSH
85807: EMPTY
85808: LIST
85809: LIST
85810: LIST
85811: PPUSH
85812: CALL_OW 72
85816: ST_TO_ADDR
// if not depot then
85817: LD_VAR 0 9
85821: NOT
85822: IFFALSE 85826
// continue ;
85824: GO 85644
// for j in depot do
85826: LD_ADDR_VAR 0 8
85830: PUSH
85831: LD_VAR 0 9
85835: PUSH
85836: FOR_IN
85837: IFFALSE 85931
// if GetDistUnitXY ( j , x , y ) < 30 then
85839: LD_VAR 0 8
85843: PPUSH
85844: LD_VAR 0 2
85848: PPUSH
85849: LD_VAR 0 3
85853: PPUSH
85854: CALL_OW 297
85858: PUSH
85859: LD_INT 30
85861: LESS
85862: IFFALSE 85929
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
85864: LD_ADDR_EXP 66
85868: PUSH
85869: LD_EXP 66
85873: PPUSH
85874: LD_VAR 0 7
85878: PUSH
85879: LD_EXP 66
85883: PUSH
85884: LD_VAR 0 7
85888: ARRAY
85889: PUSH
85890: LD_INT 1
85892: PLUS
85893: PUSH
85894: EMPTY
85895: LIST
85896: LIST
85897: PPUSH
85898: LD_VAR 0 4
85902: PUSH
85903: LD_VAR 0 2
85907: PUSH
85908: LD_VAR 0 3
85912: PUSH
85913: EMPTY
85914: LIST
85915: LIST
85916: LIST
85917: PPUSH
85918: CALL 24697 0 3
85922: ST_TO_ADDR
// exit ;
85923: POP
85924: POP
85925: POP
85926: POP
85927: GO 85937
// end ;
85929: GO 85836
85931: POP
85932: POP
// end ;
85933: GO 85644
85935: POP
85936: POP
// end ;
85937: LD_VAR 0 6
85941: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
85942: LD_INT 0
85944: PPUSH
85945: PPUSH
85946: PPUSH
85947: PPUSH
// if not mc_bases or not skirmish then
85948: LD_EXP 50
85952: NOT
85953: PUSH
85954: LD_EXP 48
85958: NOT
85959: OR
85960: IFFALSE 85964
// exit ;
85962: GO 86241
// side := GetSide ( lab ) ;
85964: LD_ADDR_VAR 0 4
85968: PUSH
85969: LD_VAR 0 2
85973: PPUSH
85974: CALL_OW 255
85978: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
85979: LD_VAR 0 4
85983: PUSH
85984: LD_EXP 76
85988: IN
85989: NOT
85990: PUSH
85991: LD_EXP 77
85995: NOT
85996: OR
85997: PUSH
85998: LD_EXP 50
86002: NOT
86003: OR
86004: IFFALSE 86008
// exit ;
86006: GO 86241
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
86008: LD_ADDR_EXP 77
86012: PUSH
86013: LD_EXP 77
86017: PPUSH
86018: LD_VAR 0 4
86022: PPUSH
86023: LD_EXP 77
86027: PUSH
86028: LD_VAR 0 4
86032: ARRAY
86033: PUSH
86034: LD_VAR 0 1
86038: DIFF
86039: PPUSH
86040: CALL_OW 1
86044: ST_TO_ADDR
// for i = 1 to mc_bases do
86045: LD_ADDR_VAR 0 5
86049: PUSH
86050: DOUBLE
86051: LD_INT 1
86053: DEC
86054: ST_TO_ADDR
86055: LD_EXP 50
86059: PUSH
86060: FOR_TO
86061: IFFALSE 86239
// begin if lab in mc_bases [ i ] then
86063: LD_VAR 0 2
86067: PUSH
86068: LD_EXP 50
86072: PUSH
86073: LD_VAR 0 5
86077: ARRAY
86078: IN
86079: IFFALSE 86237
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
86081: LD_VAR 0 1
86085: PUSH
86086: LD_INT 11
86088: PUSH
86089: LD_INT 4
86091: PUSH
86092: LD_INT 3
86094: PUSH
86095: LD_INT 2
86097: PUSH
86098: EMPTY
86099: LIST
86100: LIST
86101: LIST
86102: LIST
86103: IN
86104: PUSH
86105: LD_EXP 80
86109: PUSH
86110: LD_VAR 0 5
86114: ARRAY
86115: AND
86116: IFFALSE 86237
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
86118: LD_ADDR_VAR 0 6
86122: PUSH
86123: LD_EXP 80
86127: PUSH
86128: LD_VAR 0 5
86132: ARRAY
86133: PUSH
86134: LD_INT 1
86136: ARRAY
86137: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
86138: LD_ADDR_EXP 80
86142: PUSH
86143: LD_EXP 80
86147: PPUSH
86148: LD_VAR 0 5
86152: PPUSH
86153: EMPTY
86154: PPUSH
86155: CALL_OW 1
86159: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
86160: LD_VAR 0 6
86164: PPUSH
86165: LD_INT 0
86167: PPUSH
86168: CALL_OW 109
// ComExitBuilding ( tmp ) ;
86172: LD_VAR 0 6
86176: PPUSH
86177: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
86181: LD_ADDR_EXP 79
86185: PUSH
86186: LD_EXP 79
86190: PPUSH
86191: LD_VAR 0 5
86195: PPUSH
86196: LD_EXP 79
86200: PUSH
86201: LD_VAR 0 5
86205: ARRAY
86206: PPUSH
86207: LD_INT 1
86209: PPUSH
86210: LD_VAR 0 6
86214: PPUSH
86215: CALL_OW 2
86219: PPUSH
86220: CALL_OW 1
86224: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
86225: LD_VAR 0 5
86229: PPUSH
86230: LD_INT 112
86232: PPUSH
86233: CALL 62907 0 2
// end ; end ; end ;
86237: GO 86060
86239: POP
86240: POP
// end ;
86241: LD_VAR 0 3
86245: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
86246: LD_INT 0
86248: PPUSH
86249: PPUSH
86250: PPUSH
86251: PPUSH
86252: PPUSH
86253: PPUSH
86254: PPUSH
86255: PPUSH
// if not mc_bases or not skirmish then
86256: LD_EXP 50
86260: NOT
86261: PUSH
86262: LD_EXP 48
86266: NOT
86267: OR
86268: IFFALSE 86272
// exit ;
86270: GO 87643
// for i = 1 to mc_bases do
86272: LD_ADDR_VAR 0 3
86276: PUSH
86277: DOUBLE
86278: LD_INT 1
86280: DEC
86281: ST_TO_ADDR
86282: LD_EXP 50
86286: PUSH
86287: FOR_TO
86288: IFFALSE 87641
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
86290: LD_VAR 0 1
86294: PUSH
86295: LD_EXP 50
86299: PUSH
86300: LD_VAR 0 3
86304: ARRAY
86305: IN
86306: PUSH
86307: LD_VAR 0 1
86311: PUSH
86312: LD_EXP 57
86316: PUSH
86317: LD_VAR 0 3
86321: ARRAY
86322: IN
86323: OR
86324: PUSH
86325: LD_VAR 0 1
86329: PUSH
86330: LD_EXP 72
86334: PUSH
86335: LD_VAR 0 3
86339: ARRAY
86340: IN
86341: OR
86342: PUSH
86343: LD_VAR 0 1
86347: PUSH
86348: LD_EXP 69
86352: PUSH
86353: LD_VAR 0 3
86357: ARRAY
86358: IN
86359: OR
86360: PUSH
86361: LD_VAR 0 1
86365: PUSH
86366: LD_EXP 79
86370: PUSH
86371: LD_VAR 0 3
86375: ARRAY
86376: IN
86377: OR
86378: PUSH
86379: LD_VAR 0 1
86383: PUSH
86384: LD_EXP 80
86388: PUSH
86389: LD_VAR 0 3
86393: ARRAY
86394: IN
86395: OR
86396: IFFALSE 87639
// begin if un in mc_ape [ i ] then
86398: LD_VAR 0 1
86402: PUSH
86403: LD_EXP 79
86407: PUSH
86408: LD_VAR 0 3
86412: ARRAY
86413: IN
86414: IFFALSE 86453
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
86416: LD_ADDR_EXP 79
86420: PUSH
86421: LD_EXP 79
86425: PPUSH
86426: LD_VAR 0 3
86430: PPUSH
86431: LD_EXP 79
86435: PUSH
86436: LD_VAR 0 3
86440: ARRAY
86441: PUSH
86442: LD_VAR 0 1
86446: DIFF
86447: PPUSH
86448: CALL_OW 1
86452: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
86453: LD_VAR 0 1
86457: PUSH
86458: LD_EXP 80
86462: PUSH
86463: LD_VAR 0 3
86467: ARRAY
86468: IN
86469: IFFALSE 86493
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
86471: LD_ADDR_EXP 80
86475: PUSH
86476: LD_EXP 80
86480: PPUSH
86481: LD_VAR 0 3
86485: PPUSH
86486: EMPTY
86487: PPUSH
86488: CALL_OW 1
86492: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
86493: LD_VAR 0 1
86497: PPUSH
86498: CALL_OW 247
86502: PUSH
86503: LD_INT 2
86505: EQUAL
86506: PUSH
86507: LD_VAR 0 1
86511: PPUSH
86512: CALL_OW 110
86516: PUSH
86517: LD_INT 20
86519: EQUAL
86520: PUSH
86521: LD_VAR 0 1
86525: PUSH
86526: LD_EXP 72
86530: PUSH
86531: LD_VAR 0 3
86535: ARRAY
86536: IN
86537: OR
86538: PUSH
86539: LD_VAR 0 1
86543: PPUSH
86544: CALL_OW 264
86548: PUSH
86549: LD_INT 12
86551: PUSH
86552: LD_INT 51
86554: PUSH
86555: LD_EXP 30
86559: PUSH
86560: LD_INT 32
86562: PUSH
86563: LD_INT 13
86565: PUSH
86566: LD_INT 52
86568: PUSH
86569: LD_INT 31
86571: PUSH
86572: EMPTY
86573: LIST
86574: LIST
86575: LIST
86576: LIST
86577: LIST
86578: LIST
86579: LIST
86580: IN
86581: OR
86582: AND
86583: IFFALSE 86891
// begin if un in mc_defender [ i ] then
86585: LD_VAR 0 1
86589: PUSH
86590: LD_EXP 72
86594: PUSH
86595: LD_VAR 0 3
86599: ARRAY
86600: IN
86601: IFFALSE 86640
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
86603: LD_ADDR_EXP 72
86607: PUSH
86608: LD_EXP 72
86612: PPUSH
86613: LD_VAR 0 3
86617: PPUSH
86618: LD_EXP 72
86622: PUSH
86623: LD_VAR 0 3
86627: ARRAY
86628: PUSH
86629: LD_VAR 0 1
86633: DIFF
86634: PPUSH
86635: CALL_OW 1
86639: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
86640: LD_ADDR_VAR 0 8
86644: PUSH
86645: LD_VAR 0 3
86649: PPUSH
86650: LD_INT 3
86652: PPUSH
86653: CALL 83281 0 2
86657: ST_TO_ADDR
// if fac then
86658: LD_VAR 0 8
86662: IFFALSE 86891
// begin for j in fac do
86664: LD_ADDR_VAR 0 4
86668: PUSH
86669: LD_VAR 0 8
86673: PUSH
86674: FOR_IN
86675: IFFALSE 86889
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
86677: LD_ADDR_VAR 0 9
86681: PUSH
86682: LD_VAR 0 8
86686: PPUSH
86687: LD_VAR 0 1
86691: PPUSH
86692: CALL_OW 265
86696: PPUSH
86697: LD_VAR 0 1
86701: PPUSH
86702: CALL_OW 262
86706: PPUSH
86707: LD_VAR 0 1
86711: PPUSH
86712: CALL_OW 263
86716: PPUSH
86717: LD_VAR 0 1
86721: PPUSH
86722: CALL_OW 264
86726: PPUSH
86727: CALL 22193 0 5
86731: ST_TO_ADDR
// if components then
86732: LD_VAR 0 9
86736: IFFALSE 86887
// begin if GetWeapon ( un ) = ar_control_tower then
86738: LD_VAR 0 1
86742: PPUSH
86743: CALL_OW 264
86747: PUSH
86748: LD_INT 31
86750: EQUAL
86751: IFFALSE 86868
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
86753: LD_VAR 0 1
86757: PPUSH
86758: CALL_OW 311
86762: PPUSH
86763: LD_INT 0
86765: PPUSH
86766: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
86770: LD_ADDR_EXP 90
86774: PUSH
86775: LD_EXP 90
86779: PPUSH
86780: LD_VAR 0 3
86784: PPUSH
86785: LD_EXP 90
86789: PUSH
86790: LD_VAR 0 3
86794: ARRAY
86795: PUSH
86796: LD_VAR 0 1
86800: PPUSH
86801: CALL_OW 311
86805: DIFF
86806: PPUSH
86807: CALL_OW 1
86811: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
86812: LD_ADDR_VAR 0 7
86816: PUSH
86817: LD_EXP 71
86821: PUSH
86822: LD_VAR 0 3
86826: ARRAY
86827: PPUSH
86828: LD_INT 1
86830: PPUSH
86831: LD_VAR 0 9
86835: PPUSH
86836: CALL_OW 2
86840: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
86841: LD_ADDR_EXP 71
86845: PUSH
86846: LD_EXP 71
86850: PPUSH
86851: LD_VAR 0 3
86855: PPUSH
86856: LD_VAR 0 7
86860: PPUSH
86861: CALL_OW 1
86865: ST_TO_ADDR
// end else
86866: GO 86885
// MC_InsertProduceList ( i , [ components ] ) ;
86868: LD_VAR 0 3
86872: PPUSH
86873: LD_VAR 0 9
86877: PUSH
86878: EMPTY
86879: LIST
86880: PPUSH
86881: CALL 82826 0 2
// break ;
86885: GO 86889
// end ; end ;
86887: GO 86674
86889: POP
86890: POP
// end ; end ; if GetType ( un ) = unit_building then
86891: LD_VAR 0 1
86895: PPUSH
86896: CALL_OW 247
86900: PUSH
86901: LD_INT 3
86903: EQUAL
86904: IFFALSE 87307
// begin btype := GetBType ( un ) ;
86906: LD_ADDR_VAR 0 5
86910: PUSH
86911: LD_VAR 0 1
86915: PPUSH
86916: CALL_OW 266
86920: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
86921: LD_VAR 0 5
86925: PUSH
86926: LD_INT 29
86928: PUSH
86929: LD_INT 30
86931: PUSH
86932: EMPTY
86933: LIST
86934: LIST
86935: IN
86936: IFFALSE 87009
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
86938: LD_VAR 0 1
86942: PPUSH
86943: CALL_OW 250
86947: PPUSH
86948: LD_VAR 0 1
86952: PPUSH
86953: CALL_OW 251
86957: PPUSH
86958: LD_VAR 0 1
86962: PPUSH
86963: CALL_OW 255
86967: PPUSH
86968: CALL_OW 440
86972: NOT
86973: IFFALSE 87009
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
86975: LD_VAR 0 1
86979: PPUSH
86980: CALL_OW 250
86984: PPUSH
86985: LD_VAR 0 1
86989: PPUSH
86990: CALL_OW 251
86994: PPUSH
86995: LD_VAR 0 1
86999: PPUSH
87000: CALL_OW 255
87004: PPUSH
87005: CALL_OW 441
// end ; if btype = b_warehouse then
87009: LD_VAR 0 5
87013: PUSH
87014: LD_INT 1
87016: EQUAL
87017: IFFALSE 87035
// begin btype := b_depot ;
87019: LD_ADDR_VAR 0 5
87023: PUSH
87024: LD_INT 0
87026: ST_TO_ADDR
// pos := 1 ;
87027: LD_ADDR_VAR 0 6
87031: PUSH
87032: LD_INT 1
87034: ST_TO_ADDR
// end ; if btype = b_factory then
87035: LD_VAR 0 5
87039: PUSH
87040: LD_INT 3
87042: EQUAL
87043: IFFALSE 87061
// begin btype := b_workshop ;
87045: LD_ADDR_VAR 0 5
87049: PUSH
87050: LD_INT 2
87052: ST_TO_ADDR
// pos := 1 ;
87053: LD_ADDR_VAR 0 6
87057: PUSH
87058: LD_INT 1
87060: ST_TO_ADDR
// end ; if btype = b_barracks then
87061: LD_VAR 0 5
87065: PUSH
87066: LD_INT 5
87068: EQUAL
87069: IFFALSE 87079
// btype := b_armoury ;
87071: LD_ADDR_VAR 0 5
87075: PUSH
87076: LD_INT 4
87078: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
87079: LD_VAR 0 5
87083: PUSH
87084: LD_INT 7
87086: PUSH
87087: LD_INT 8
87089: PUSH
87090: EMPTY
87091: LIST
87092: LIST
87093: IN
87094: IFFALSE 87104
// btype := b_lab ;
87096: LD_ADDR_VAR 0 5
87100: PUSH
87101: LD_INT 6
87103: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
87104: LD_ADDR_EXP 55
87108: PUSH
87109: LD_EXP 55
87113: PPUSH
87114: LD_VAR 0 3
87118: PUSH
87119: LD_EXP 55
87123: PUSH
87124: LD_VAR 0 3
87128: ARRAY
87129: PUSH
87130: LD_INT 1
87132: PLUS
87133: PUSH
87134: EMPTY
87135: LIST
87136: LIST
87137: PPUSH
87138: LD_VAR 0 5
87142: PUSH
87143: LD_VAR 0 1
87147: PPUSH
87148: CALL_OW 250
87152: PUSH
87153: LD_VAR 0 1
87157: PPUSH
87158: CALL_OW 251
87162: PUSH
87163: LD_VAR 0 1
87167: PPUSH
87168: CALL_OW 254
87172: PUSH
87173: EMPTY
87174: LIST
87175: LIST
87176: LIST
87177: LIST
87178: PPUSH
87179: CALL 24697 0 3
87183: ST_TO_ADDR
// if pos = 1 then
87184: LD_VAR 0 6
87188: PUSH
87189: LD_INT 1
87191: EQUAL
87192: IFFALSE 87307
// begin tmp := mc_build_list [ i ] ;
87194: LD_ADDR_VAR 0 7
87198: PUSH
87199: LD_EXP 55
87203: PUSH
87204: LD_VAR 0 3
87208: ARRAY
87209: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
87210: LD_VAR 0 7
87214: PPUSH
87215: LD_INT 2
87217: PUSH
87218: LD_INT 30
87220: PUSH
87221: LD_INT 0
87223: PUSH
87224: EMPTY
87225: LIST
87226: LIST
87227: PUSH
87228: LD_INT 30
87230: PUSH
87231: LD_INT 1
87233: PUSH
87234: EMPTY
87235: LIST
87236: LIST
87237: PUSH
87238: EMPTY
87239: LIST
87240: LIST
87241: LIST
87242: PPUSH
87243: CALL_OW 72
87247: IFFALSE 87257
// pos := 2 ;
87249: LD_ADDR_VAR 0 6
87253: PUSH
87254: LD_INT 2
87256: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
87257: LD_ADDR_VAR 0 7
87261: PUSH
87262: LD_VAR 0 7
87266: PPUSH
87267: LD_VAR 0 6
87271: PPUSH
87272: LD_VAR 0 7
87276: PPUSH
87277: CALL 25023 0 3
87281: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
87282: LD_ADDR_EXP 55
87286: PUSH
87287: LD_EXP 55
87291: PPUSH
87292: LD_VAR 0 3
87296: PPUSH
87297: LD_VAR 0 7
87301: PPUSH
87302: CALL_OW 1
87306: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
87307: LD_VAR 0 1
87311: PUSH
87312: LD_EXP 50
87316: PUSH
87317: LD_VAR 0 3
87321: ARRAY
87322: IN
87323: IFFALSE 87362
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
87325: LD_ADDR_EXP 50
87329: PUSH
87330: LD_EXP 50
87334: PPUSH
87335: LD_VAR 0 3
87339: PPUSH
87340: LD_EXP 50
87344: PUSH
87345: LD_VAR 0 3
87349: ARRAY
87350: PUSH
87351: LD_VAR 0 1
87355: DIFF
87356: PPUSH
87357: CALL_OW 1
87361: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
87362: LD_VAR 0 1
87366: PUSH
87367: LD_EXP 57
87371: PUSH
87372: LD_VAR 0 3
87376: ARRAY
87377: IN
87378: IFFALSE 87417
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
87380: LD_ADDR_EXP 57
87384: PUSH
87385: LD_EXP 57
87389: PPUSH
87390: LD_VAR 0 3
87394: PPUSH
87395: LD_EXP 57
87399: PUSH
87400: LD_VAR 0 3
87404: ARRAY
87405: PUSH
87406: LD_VAR 0 1
87410: DIFF
87411: PPUSH
87412: CALL_OW 1
87416: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
87417: LD_VAR 0 1
87421: PUSH
87422: LD_EXP 69
87426: PUSH
87427: LD_VAR 0 3
87431: ARRAY
87432: IN
87433: IFFALSE 87472
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
87435: LD_ADDR_EXP 69
87439: PUSH
87440: LD_EXP 69
87444: PPUSH
87445: LD_VAR 0 3
87449: PPUSH
87450: LD_EXP 69
87454: PUSH
87455: LD_VAR 0 3
87459: ARRAY
87460: PUSH
87461: LD_VAR 0 1
87465: DIFF
87466: PPUSH
87467: CALL_OW 1
87471: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
87472: LD_VAR 0 1
87476: PUSH
87477: LD_EXP 72
87481: PUSH
87482: LD_VAR 0 3
87486: ARRAY
87487: IN
87488: IFFALSE 87527
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
87490: LD_ADDR_EXP 72
87494: PUSH
87495: LD_EXP 72
87499: PPUSH
87500: LD_VAR 0 3
87504: PPUSH
87505: LD_EXP 72
87509: PUSH
87510: LD_VAR 0 3
87514: ARRAY
87515: PUSH
87516: LD_VAR 0 1
87520: DIFF
87521: PPUSH
87522: CALL_OW 1
87526: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
87527: LD_VAR 0 1
87531: PUSH
87532: LD_EXP 59
87536: PUSH
87537: LD_VAR 0 3
87541: ARRAY
87542: IN
87543: IFFALSE 87582
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
87545: LD_ADDR_EXP 59
87549: PUSH
87550: LD_EXP 59
87554: PPUSH
87555: LD_VAR 0 3
87559: PPUSH
87560: LD_EXP 59
87564: PUSH
87565: LD_VAR 0 3
87569: ARRAY
87570: PUSH
87571: LD_VAR 0 1
87575: DIFF
87576: PPUSH
87577: CALL_OW 1
87581: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
87582: LD_VAR 0 1
87586: PUSH
87587: LD_EXP 58
87591: PUSH
87592: LD_VAR 0 3
87596: ARRAY
87597: IN
87598: IFFALSE 87637
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
87600: LD_ADDR_EXP 58
87604: PUSH
87605: LD_EXP 58
87609: PPUSH
87610: LD_VAR 0 3
87614: PPUSH
87615: LD_EXP 58
87619: PUSH
87620: LD_VAR 0 3
87624: ARRAY
87625: PUSH
87626: LD_VAR 0 1
87630: DIFF
87631: PPUSH
87632: CALL_OW 1
87636: ST_TO_ADDR
// end ; break ;
87637: GO 87641
// end ;
87639: GO 86287
87641: POP
87642: POP
// end ;
87643: LD_VAR 0 2
87647: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
87648: LD_INT 0
87650: PPUSH
87651: PPUSH
87652: PPUSH
// if not mc_bases or not skirmish then
87653: LD_EXP 50
87657: NOT
87658: PUSH
87659: LD_EXP 48
87663: NOT
87664: OR
87665: IFFALSE 87669
// exit ;
87667: GO 87884
// for i = 1 to mc_bases do
87669: LD_ADDR_VAR 0 3
87673: PUSH
87674: DOUBLE
87675: LD_INT 1
87677: DEC
87678: ST_TO_ADDR
87679: LD_EXP 50
87683: PUSH
87684: FOR_TO
87685: IFFALSE 87882
// begin if building in mc_construct_list [ i ] then
87687: LD_VAR 0 1
87691: PUSH
87692: LD_EXP 57
87696: PUSH
87697: LD_VAR 0 3
87701: ARRAY
87702: IN
87703: IFFALSE 87880
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
87705: LD_ADDR_EXP 57
87709: PUSH
87710: LD_EXP 57
87714: PPUSH
87715: LD_VAR 0 3
87719: PPUSH
87720: LD_EXP 57
87724: PUSH
87725: LD_VAR 0 3
87729: ARRAY
87730: PUSH
87731: LD_VAR 0 1
87735: DIFF
87736: PPUSH
87737: CALL_OW 1
87741: ST_TO_ADDR
// if building in mc_lab [ i ] then
87742: LD_VAR 0 1
87746: PUSH
87747: LD_EXP 83
87751: PUSH
87752: LD_VAR 0 3
87756: ARRAY
87757: IN
87758: IFFALSE 87813
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
87760: LD_ADDR_EXP 84
87764: PUSH
87765: LD_EXP 84
87769: PPUSH
87770: LD_VAR 0 3
87774: PPUSH
87775: LD_EXP 84
87779: PUSH
87780: LD_VAR 0 3
87784: ARRAY
87785: PPUSH
87786: LD_INT 1
87788: PPUSH
87789: LD_EXP 84
87793: PUSH
87794: LD_VAR 0 3
87798: ARRAY
87799: PPUSH
87800: LD_INT 0
87802: PPUSH
87803: CALL 24115 0 4
87807: PPUSH
87808: CALL_OW 1
87812: ST_TO_ADDR
// if not building in mc_bases [ i ] then
87813: LD_VAR 0 1
87817: PUSH
87818: LD_EXP 50
87822: PUSH
87823: LD_VAR 0 3
87827: ARRAY
87828: IN
87829: NOT
87830: IFFALSE 87876
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
87832: LD_ADDR_EXP 50
87836: PUSH
87837: LD_EXP 50
87841: PPUSH
87842: LD_VAR 0 3
87846: PUSH
87847: LD_EXP 50
87851: PUSH
87852: LD_VAR 0 3
87856: ARRAY
87857: PUSH
87858: LD_INT 1
87860: PLUS
87861: PUSH
87862: EMPTY
87863: LIST
87864: LIST
87865: PPUSH
87866: LD_VAR 0 1
87870: PPUSH
87871: CALL 24697 0 3
87875: ST_TO_ADDR
// exit ;
87876: POP
87877: POP
87878: GO 87884
// end ; end ;
87880: GO 87684
87882: POP
87883: POP
// end ;
87884: LD_VAR 0 2
87888: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
87889: LD_INT 0
87891: PPUSH
87892: PPUSH
87893: PPUSH
87894: PPUSH
87895: PPUSH
87896: PPUSH
87897: PPUSH
// if not mc_bases or not skirmish then
87898: LD_EXP 50
87902: NOT
87903: PUSH
87904: LD_EXP 48
87908: NOT
87909: OR
87910: IFFALSE 87914
// exit ;
87912: GO 88575
// for i = 1 to mc_bases do
87914: LD_ADDR_VAR 0 3
87918: PUSH
87919: DOUBLE
87920: LD_INT 1
87922: DEC
87923: ST_TO_ADDR
87924: LD_EXP 50
87928: PUSH
87929: FOR_TO
87930: IFFALSE 88573
// begin if building in mc_construct_list [ i ] then
87932: LD_VAR 0 1
87936: PUSH
87937: LD_EXP 57
87941: PUSH
87942: LD_VAR 0 3
87946: ARRAY
87947: IN
87948: IFFALSE 88571
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
87950: LD_ADDR_EXP 57
87954: PUSH
87955: LD_EXP 57
87959: PPUSH
87960: LD_VAR 0 3
87964: PPUSH
87965: LD_EXP 57
87969: PUSH
87970: LD_VAR 0 3
87974: ARRAY
87975: PUSH
87976: LD_VAR 0 1
87980: DIFF
87981: PPUSH
87982: CALL_OW 1
87986: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
87987: LD_ADDR_EXP 50
87991: PUSH
87992: LD_EXP 50
87996: PPUSH
87997: LD_VAR 0 3
88001: PUSH
88002: LD_EXP 50
88006: PUSH
88007: LD_VAR 0 3
88011: ARRAY
88012: PUSH
88013: LD_INT 1
88015: PLUS
88016: PUSH
88017: EMPTY
88018: LIST
88019: LIST
88020: PPUSH
88021: LD_VAR 0 1
88025: PPUSH
88026: CALL 24697 0 3
88030: ST_TO_ADDR
// btype := GetBType ( building ) ;
88031: LD_ADDR_VAR 0 5
88035: PUSH
88036: LD_VAR 0 1
88040: PPUSH
88041: CALL_OW 266
88045: ST_TO_ADDR
// side := GetSide ( building ) ;
88046: LD_ADDR_VAR 0 8
88050: PUSH
88051: LD_VAR 0 1
88055: PPUSH
88056: CALL_OW 255
88060: ST_TO_ADDR
// if btype = b_lab then
88061: LD_VAR 0 5
88065: PUSH
88066: LD_INT 6
88068: EQUAL
88069: IFFALSE 88119
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
88071: LD_ADDR_EXP 83
88075: PUSH
88076: LD_EXP 83
88080: PPUSH
88081: LD_VAR 0 3
88085: PUSH
88086: LD_EXP 83
88090: PUSH
88091: LD_VAR 0 3
88095: ARRAY
88096: PUSH
88097: LD_INT 1
88099: PLUS
88100: PUSH
88101: EMPTY
88102: LIST
88103: LIST
88104: PPUSH
88105: LD_VAR 0 1
88109: PPUSH
88110: CALL 24697 0 3
88114: ST_TO_ADDR
// exit ;
88115: POP
88116: POP
88117: GO 88575
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
88119: LD_VAR 0 5
88123: PUSH
88124: LD_INT 0
88126: PUSH
88127: LD_INT 2
88129: PUSH
88130: LD_INT 4
88132: PUSH
88133: EMPTY
88134: LIST
88135: LIST
88136: LIST
88137: IN
88138: IFFALSE 88262
// begin if btype = b_armoury then
88140: LD_VAR 0 5
88144: PUSH
88145: LD_INT 4
88147: EQUAL
88148: IFFALSE 88158
// btype := b_barracks ;
88150: LD_ADDR_VAR 0 5
88154: PUSH
88155: LD_INT 5
88157: ST_TO_ADDR
// if btype = b_depot then
88158: LD_VAR 0 5
88162: PUSH
88163: LD_INT 0
88165: EQUAL
88166: IFFALSE 88176
// btype := b_warehouse ;
88168: LD_ADDR_VAR 0 5
88172: PUSH
88173: LD_INT 1
88175: ST_TO_ADDR
// if btype = b_workshop then
88176: LD_VAR 0 5
88180: PUSH
88181: LD_INT 2
88183: EQUAL
88184: IFFALSE 88194
// btype := b_factory ;
88186: LD_ADDR_VAR 0 5
88190: PUSH
88191: LD_INT 3
88193: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
88194: LD_VAR 0 5
88198: PPUSH
88199: LD_VAR 0 8
88203: PPUSH
88204: CALL_OW 323
88208: PUSH
88209: LD_INT 1
88211: EQUAL
88212: IFFALSE 88258
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
88214: LD_ADDR_EXP 82
88218: PUSH
88219: LD_EXP 82
88223: PPUSH
88224: LD_VAR 0 3
88228: PUSH
88229: LD_EXP 82
88233: PUSH
88234: LD_VAR 0 3
88238: ARRAY
88239: PUSH
88240: LD_INT 1
88242: PLUS
88243: PUSH
88244: EMPTY
88245: LIST
88246: LIST
88247: PPUSH
88248: LD_VAR 0 1
88252: PPUSH
88253: CALL 24697 0 3
88257: ST_TO_ADDR
// exit ;
88258: POP
88259: POP
88260: GO 88575
// end ; if btype in [ b_bunker , b_turret ] then
88262: LD_VAR 0 5
88266: PUSH
88267: LD_INT 32
88269: PUSH
88270: LD_INT 33
88272: PUSH
88273: EMPTY
88274: LIST
88275: LIST
88276: IN
88277: IFFALSE 88567
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
88279: LD_ADDR_EXP 58
88283: PUSH
88284: LD_EXP 58
88288: PPUSH
88289: LD_VAR 0 3
88293: PUSH
88294: LD_EXP 58
88298: PUSH
88299: LD_VAR 0 3
88303: ARRAY
88304: PUSH
88305: LD_INT 1
88307: PLUS
88308: PUSH
88309: EMPTY
88310: LIST
88311: LIST
88312: PPUSH
88313: LD_VAR 0 1
88317: PPUSH
88318: CALL 24697 0 3
88322: ST_TO_ADDR
// if btype = b_bunker then
88323: LD_VAR 0 5
88327: PUSH
88328: LD_INT 32
88330: EQUAL
88331: IFFALSE 88567
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
88333: LD_ADDR_EXP 59
88337: PUSH
88338: LD_EXP 59
88342: PPUSH
88343: LD_VAR 0 3
88347: PUSH
88348: LD_EXP 59
88352: PUSH
88353: LD_VAR 0 3
88357: ARRAY
88358: PUSH
88359: LD_INT 1
88361: PLUS
88362: PUSH
88363: EMPTY
88364: LIST
88365: LIST
88366: PPUSH
88367: LD_VAR 0 1
88371: PPUSH
88372: CALL 24697 0 3
88376: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
88377: LD_ADDR_VAR 0 6
88381: PUSH
88382: LD_EXP 50
88386: PUSH
88387: LD_VAR 0 3
88391: ARRAY
88392: PPUSH
88393: LD_INT 25
88395: PUSH
88396: LD_INT 1
88398: PUSH
88399: EMPTY
88400: LIST
88401: LIST
88402: PUSH
88403: LD_INT 3
88405: PUSH
88406: LD_INT 54
88408: PUSH
88409: EMPTY
88410: LIST
88411: PUSH
88412: EMPTY
88413: LIST
88414: LIST
88415: PUSH
88416: EMPTY
88417: LIST
88418: LIST
88419: PPUSH
88420: CALL_OW 72
88424: ST_TO_ADDR
// if tmp then
88425: LD_VAR 0 6
88429: IFFALSE 88435
// exit ;
88431: POP
88432: POP
88433: GO 88575
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
88435: LD_ADDR_VAR 0 6
88439: PUSH
88440: LD_EXP 50
88444: PUSH
88445: LD_VAR 0 3
88449: ARRAY
88450: PPUSH
88451: LD_INT 2
88453: PUSH
88454: LD_INT 30
88456: PUSH
88457: LD_INT 4
88459: PUSH
88460: EMPTY
88461: LIST
88462: LIST
88463: PUSH
88464: LD_INT 30
88466: PUSH
88467: LD_INT 5
88469: PUSH
88470: EMPTY
88471: LIST
88472: LIST
88473: PUSH
88474: EMPTY
88475: LIST
88476: LIST
88477: LIST
88478: PPUSH
88479: CALL_OW 72
88483: ST_TO_ADDR
// if not tmp then
88484: LD_VAR 0 6
88488: NOT
88489: IFFALSE 88495
// exit ;
88491: POP
88492: POP
88493: GO 88575
// for j in tmp do
88495: LD_ADDR_VAR 0 4
88499: PUSH
88500: LD_VAR 0 6
88504: PUSH
88505: FOR_IN
88506: IFFALSE 88565
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
88508: LD_ADDR_VAR 0 7
88512: PUSH
88513: LD_VAR 0 4
88517: PPUSH
88518: CALL_OW 313
88522: PPUSH
88523: LD_INT 25
88525: PUSH
88526: LD_INT 1
88528: PUSH
88529: EMPTY
88530: LIST
88531: LIST
88532: PPUSH
88533: CALL_OW 72
88537: ST_TO_ADDR
// if units then
88538: LD_VAR 0 7
88542: IFFALSE 88563
// begin ComExitBuilding ( units [ 1 ] ) ;
88544: LD_VAR 0 7
88548: PUSH
88549: LD_INT 1
88551: ARRAY
88552: PPUSH
88553: CALL_OW 122
// exit ;
88557: POP
88558: POP
88559: POP
88560: POP
88561: GO 88575
// end ; end ;
88563: GO 88505
88565: POP
88566: POP
// end ; end ; exit ;
88567: POP
88568: POP
88569: GO 88575
// end ; end ;
88571: GO 87929
88573: POP
88574: POP
// end ;
88575: LD_VAR 0 2
88579: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
88580: LD_INT 0
88582: PPUSH
88583: PPUSH
88584: PPUSH
88585: PPUSH
88586: PPUSH
88587: PPUSH
88588: PPUSH
// if not mc_bases or not skirmish then
88589: LD_EXP 50
88593: NOT
88594: PUSH
88595: LD_EXP 48
88599: NOT
88600: OR
88601: IFFALSE 88605
// exit ;
88603: GO 88870
// btype := GetBType ( building ) ;
88605: LD_ADDR_VAR 0 6
88609: PUSH
88610: LD_VAR 0 1
88614: PPUSH
88615: CALL_OW 266
88619: ST_TO_ADDR
// x := GetX ( building ) ;
88620: LD_ADDR_VAR 0 7
88624: PUSH
88625: LD_VAR 0 1
88629: PPUSH
88630: CALL_OW 250
88634: ST_TO_ADDR
// y := GetY ( building ) ;
88635: LD_ADDR_VAR 0 8
88639: PUSH
88640: LD_VAR 0 1
88644: PPUSH
88645: CALL_OW 251
88649: ST_TO_ADDR
// d := GetDir ( building ) ;
88650: LD_ADDR_VAR 0 9
88654: PUSH
88655: LD_VAR 0 1
88659: PPUSH
88660: CALL_OW 254
88664: ST_TO_ADDR
// for i = 1 to mc_bases do
88665: LD_ADDR_VAR 0 4
88669: PUSH
88670: DOUBLE
88671: LD_INT 1
88673: DEC
88674: ST_TO_ADDR
88675: LD_EXP 50
88679: PUSH
88680: FOR_TO
88681: IFFALSE 88868
// begin if not mc_build_list [ i ] then
88683: LD_EXP 55
88687: PUSH
88688: LD_VAR 0 4
88692: ARRAY
88693: NOT
88694: IFFALSE 88698
// continue ;
88696: GO 88680
// for j := 1 to mc_build_list [ i ] do
88698: LD_ADDR_VAR 0 5
88702: PUSH
88703: DOUBLE
88704: LD_INT 1
88706: DEC
88707: ST_TO_ADDR
88708: LD_EXP 55
88712: PUSH
88713: LD_VAR 0 4
88717: ARRAY
88718: PUSH
88719: FOR_TO
88720: IFFALSE 88864
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ j ] ) then
88722: LD_VAR 0 6
88726: PUSH
88727: LD_VAR 0 7
88731: PUSH
88732: LD_VAR 0 8
88736: PUSH
88737: LD_VAR 0 9
88741: PUSH
88742: EMPTY
88743: LIST
88744: LIST
88745: LIST
88746: LIST
88747: PPUSH
88748: LD_EXP 55
88752: PUSH
88753: LD_VAR 0 4
88757: ARRAY
88758: PUSH
88759: LD_VAR 0 5
88763: ARRAY
88764: PPUSH
88765: CALL 30879 0 2
88769: IFFALSE 88862
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , j ) ) ;
88771: LD_ADDR_EXP 55
88775: PUSH
88776: LD_EXP 55
88780: PPUSH
88781: LD_VAR 0 4
88785: PPUSH
88786: LD_EXP 55
88790: PUSH
88791: LD_VAR 0 4
88795: ARRAY
88796: PPUSH
88797: LD_VAR 0 5
88801: PPUSH
88802: CALL_OW 3
88806: PPUSH
88807: CALL_OW 1
88811: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
88812: LD_ADDR_EXP 57
88816: PUSH
88817: LD_EXP 57
88821: PPUSH
88822: LD_VAR 0 4
88826: PUSH
88827: LD_EXP 57
88831: PUSH
88832: LD_VAR 0 4
88836: ARRAY
88837: PUSH
88838: LD_INT 1
88840: PLUS
88841: PUSH
88842: EMPTY
88843: LIST
88844: LIST
88845: PPUSH
88846: LD_VAR 0 1
88850: PPUSH
88851: CALL 24697 0 3
88855: ST_TO_ADDR
// exit ;
88856: POP
88857: POP
88858: POP
88859: POP
88860: GO 88870
// end ;
88862: GO 88719
88864: POP
88865: POP
// end ;
88866: GO 88680
88868: POP
88869: POP
// end ;
88870: LD_VAR 0 3
88874: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
88875: LD_INT 0
88877: PPUSH
88878: PPUSH
88879: PPUSH
// if not mc_bases or not skirmish then
88880: LD_EXP 50
88884: NOT
88885: PUSH
88886: LD_EXP 48
88890: NOT
88891: OR
88892: IFFALSE 88896
// exit ;
88894: GO 89086
// for i = 1 to mc_bases do
88896: LD_ADDR_VAR 0 4
88900: PUSH
88901: DOUBLE
88902: LD_INT 1
88904: DEC
88905: ST_TO_ADDR
88906: LD_EXP 50
88910: PUSH
88911: FOR_TO
88912: IFFALSE 88999
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
88914: LD_VAR 0 1
88918: PUSH
88919: LD_EXP 58
88923: PUSH
88924: LD_VAR 0 4
88928: ARRAY
88929: IN
88930: PUSH
88931: LD_VAR 0 1
88935: PUSH
88936: LD_EXP 59
88940: PUSH
88941: LD_VAR 0 4
88945: ARRAY
88946: IN
88947: NOT
88948: AND
88949: IFFALSE 88997
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
88951: LD_ADDR_EXP 59
88955: PUSH
88956: LD_EXP 59
88960: PPUSH
88961: LD_VAR 0 4
88965: PUSH
88966: LD_EXP 59
88970: PUSH
88971: LD_VAR 0 4
88975: ARRAY
88976: PUSH
88977: LD_INT 1
88979: PLUS
88980: PUSH
88981: EMPTY
88982: LIST
88983: LIST
88984: PPUSH
88985: LD_VAR 0 1
88989: PPUSH
88990: CALL 24697 0 3
88994: ST_TO_ADDR
// break ;
88995: GO 88999
// end ; end ;
88997: GO 88911
88999: POP
89000: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
89001: LD_VAR 0 1
89005: PPUSH
89006: CALL_OW 257
89010: PUSH
89011: LD_EXP 76
89015: IN
89016: PUSH
89017: LD_VAR 0 1
89021: PPUSH
89022: CALL_OW 266
89026: PUSH
89027: LD_INT 5
89029: EQUAL
89030: AND
89031: PUSH
89032: LD_VAR 0 2
89036: PPUSH
89037: CALL_OW 110
89041: PUSH
89042: LD_INT 18
89044: NONEQUAL
89045: AND
89046: IFFALSE 89086
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
89048: LD_VAR 0 2
89052: PPUSH
89053: CALL_OW 257
89057: PUSH
89058: LD_INT 5
89060: PUSH
89061: LD_INT 8
89063: PUSH
89064: LD_INT 9
89066: PUSH
89067: EMPTY
89068: LIST
89069: LIST
89070: LIST
89071: IN
89072: IFFALSE 89086
// SetClass ( unit , 1 ) ;
89074: LD_VAR 0 2
89078: PPUSH
89079: LD_INT 1
89081: PPUSH
89082: CALL_OW 336
// end ;
89086: LD_VAR 0 3
89090: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
89091: LD_INT 0
89093: PPUSH
89094: PPUSH
// if not mc_bases or not skirmish then
89095: LD_EXP 50
89099: NOT
89100: PUSH
89101: LD_EXP 48
89105: NOT
89106: OR
89107: IFFALSE 89111
// exit ;
89109: GO 89227
// if GetLives ( abandoned_vehicle ) > 250 then
89111: LD_VAR 0 2
89115: PPUSH
89116: CALL_OW 256
89120: PUSH
89121: LD_INT 250
89123: GREATER
89124: IFFALSE 89128
// exit ;
89126: GO 89227
// for i = 1 to mc_bases do
89128: LD_ADDR_VAR 0 6
89132: PUSH
89133: DOUBLE
89134: LD_INT 1
89136: DEC
89137: ST_TO_ADDR
89138: LD_EXP 50
89142: PUSH
89143: FOR_TO
89144: IFFALSE 89225
// begin if driver in mc_bases [ i ] then
89146: LD_VAR 0 1
89150: PUSH
89151: LD_EXP 50
89155: PUSH
89156: LD_VAR 0 6
89160: ARRAY
89161: IN
89162: IFFALSE 89223
// begin ComMoveToNearbyEntrance ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
89164: LD_VAR 0 1
89168: PPUSH
89169: LD_EXP 50
89173: PUSH
89174: LD_VAR 0 6
89178: ARRAY
89179: PPUSH
89180: LD_INT 2
89182: PUSH
89183: LD_INT 30
89185: PUSH
89186: LD_INT 0
89188: PUSH
89189: EMPTY
89190: LIST
89191: LIST
89192: PUSH
89193: LD_INT 30
89195: PUSH
89196: LD_INT 1
89198: PUSH
89199: EMPTY
89200: LIST
89201: LIST
89202: PUSH
89203: EMPTY
89204: LIST
89205: LIST
89206: LIST
89207: PPUSH
89208: CALL_OW 72
89212: PUSH
89213: LD_INT 1
89215: ARRAY
89216: PPUSH
89217: CALL 57315 0 2
// break ;
89221: GO 89225
// end ; end ;
89223: GO 89143
89225: POP
89226: POP
// end ; end_of_file end_of_file
89227: LD_VAR 0 5
89231: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
89232: LD_INT 0
89234: PPUSH
// if p2 = 100 then
89235: LD_VAR 0 2
89239: PUSH
89240: LD_INT 100
89242: EQUAL
89243: IFFALSE 90192
// begin if not StreamModeActive then
89245: LD_EXP 94
89249: NOT
89250: IFFALSE 89260
// StreamModeActive := true ;
89252: LD_ADDR_EXP 94
89256: PUSH
89257: LD_INT 1
89259: ST_TO_ADDR
// if p3 = 0 then
89260: LD_VAR 0 3
89264: PUSH
89265: LD_INT 0
89267: EQUAL
89268: IFFALSE 89274
// InitStreamMode ;
89270: CALL 90352 0 0
// if p3 = 1 then
89274: LD_VAR 0 3
89278: PUSH
89279: LD_INT 1
89281: EQUAL
89282: IFFALSE 89292
// sRocket := true ;
89284: LD_ADDR_EXP 99
89288: PUSH
89289: LD_INT 1
89291: ST_TO_ADDR
// if p3 = 2 then
89292: LD_VAR 0 3
89296: PUSH
89297: LD_INT 2
89299: EQUAL
89300: IFFALSE 89310
// sSpeed := true ;
89302: LD_ADDR_EXP 98
89306: PUSH
89307: LD_INT 1
89309: ST_TO_ADDR
// if p3 = 3 then
89310: LD_VAR 0 3
89314: PUSH
89315: LD_INT 3
89317: EQUAL
89318: IFFALSE 89328
// sEngine := true ;
89320: LD_ADDR_EXP 100
89324: PUSH
89325: LD_INT 1
89327: ST_TO_ADDR
// if p3 = 4 then
89328: LD_VAR 0 3
89332: PUSH
89333: LD_INT 4
89335: EQUAL
89336: IFFALSE 89346
// sSpec := true ;
89338: LD_ADDR_EXP 97
89342: PUSH
89343: LD_INT 1
89345: ST_TO_ADDR
// if p3 = 5 then
89346: LD_VAR 0 3
89350: PUSH
89351: LD_INT 5
89353: EQUAL
89354: IFFALSE 89364
// sLevel := true ;
89356: LD_ADDR_EXP 101
89360: PUSH
89361: LD_INT 1
89363: ST_TO_ADDR
// if p3 = 6 then
89364: LD_VAR 0 3
89368: PUSH
89369: LD_INT 6
89371: EQUAL
89372: IFFALSE 89382
// sArmoury := true ;
89374: LD_ADDR_EXP 102
89378: PUSH
89379: LD_INT 1
89381: ST_TO_ADDR
// if p3 = 7 then
89382: LD_VAR 0 3
89386: PUSH
89387: LD_INT 7
89389: EQUAL
89390: IFFALSE 89400
// sRadar := true ;
89392: LD_ADDR_EXP 103
89396: PUSH
89397: LD_INT 1
89399: ST_TO_ADDR
// if p3 = 8 then
89400: LD_VAR 0 3
89404: PUSH
89405: LD_INT 8
89407: EQUAL
89408: IFFALSE 89418
// sBunker := true ;
89410: LD_ADDR_EXP 104
89414: PUSH
89415: LD_INT 1
89417: ST_TO_ADDR
// if p3 = 9 then
89418: LD_VAR 0 3
89422: PUSH
89423: LD_INT 9
89425: EQUAL
89426: IFFALSE 89436
// sHack := true ;
89428: LD_ADDR_EXP 105
89432: PUSH
89433: LD_INT 1
89435: ST_TO_ADDR
// if p3 = 10 then
89436: LD_VAR 0 3
89440: PUSH
89441: LD_INT 10
89443: EQUAL
89444: IFFALSE 89454
// sFire := true ;
89446: LD_ADDR_EXP 106
89450: PUSH
89451: LD_INT 1
89453: ST_TO_ADDR
// if p3 = 11 then
89454: LD_VAR 0 3
89458: PUSH
89459: LD_INT 11
89461: EQUAL
89462: IFFALSE 89472
// sRefresh := true ;
89464: LD_ADDR_EXP 107
89468: PUSH
89469: LD_INT 1
89471: ST_TO_ADDR
// if p3 = 12 then
89472: LD_VAR 0 3
89476: PUSH
89477: LD_INT 12
89479: EQUAL
89480: IFFALSE 89490
// sExp := true ;
89482: LD_ADDR_EXP 108
89486: PUSH
89487: LD_INT 1
89489: ST_TO_ADDR
// if p3 = 13 then
89490: LD_VAR 0 3
89494: PUSH
89495: LD_INT 13
89497: EQUAL
89498: IFFALSE 89508
// sDepot := true ;
89500: LD_ADDR_EXP 109
89504: PUSH
89505: LD_INT 1
89507: ST_TO_ADDR
// if p3 = 14 then
89508: LD_VAR 0 3
89512: PUSH
89513: LD_INT 14
89515: EQUAL
89516: IFFALSE 89526
// sFlag := true ;
89518: LD_ADDR_EXP 110
89522: PUSH
89523: LD_INT 1
89525: ST_TO_ADDR
// if p3 = 15 then
89526: LD_VAR 0 3
89530: PUSH
89531: LD_INT 15
89533: EQUAL
89534: IFFALSE 89544
// sKamikadze := true ;
89536: LD_ADDR_EXP 118
89540: PUSH
89541: LD_INT 1
89543: ST_TO_ADDR
// if p3 = 16 then
89544: LD_VAR 0 3
89548: PUSH
89549: LD_INT 16
89551: EQUAL
89552: IFFALSE 89562
// sTroll := true ;
89554: LD_ADDR_EXP 119
89558: PUSH
89559: LD_INT 1
89561: ST_TO_ADDR
// if p3 = 17 then
89562: LD_VAR 0 3
89566: PUSH
89567: LD_INT 17
89569: EQUAL
89570: IFFALSE 89580
// sSlow := true ;
89572: LD_ADDR_EXP 120
89576: PUSH
89577: LD_INT 1
89579: ST_TO_ADDR
// if p3 = 18 then
89580: LD_VAR 0 3
89584: PUSH
89585: LD_INT 18
89587: EQUAL
89588: IFFALSE 89598
// sLack := true ;
89590: LD_ADDR_EXP 121
89594: PUSH
89595: LD_INT 1
89597: ST_TO_ADDR
// if p3 = 19 then
89598: LD_VAR 0 3
89602: PUSH
89603: LD_INT 19
89605: EQUAL
89606: IFFALSE 89616
// sTank := true ;
89608: LD_ADDR_EXP 123
89612: PUSH
89613: LD_INT 1
89615: ST_TO_ADDR
// if p3 = 20 then
89616: LD_VAR 0 3
89620: PUSH
89621: LD_INT 20
89623: EQUAL
89624: IFFALSE 89634
// sRemote := true ;
89626: LD_ADDR_EXP 124
89630: PUSH
89631: LD_INT 1
89633: ST_TO_ADDR
// if p3 = 21 then
89634: LD_VAR 0 3
89638: PUSH
89639: LD_INT 21
89641: EQUAL
89642: IFFALSE 89652
// sPowell := true ;
89644: LD_ADDR_EXP 125
89648: PUSH
89649: LD_INT 1
89651: ST_TO_ADDR
// if p3 = 22 then
89652: LD_VAR 0 3
89656: PUSH
89657: LD_INT 22
89659: EQUAL
89660: IFFALSE 89670
// sTeleport := true ;
89662: LD_ADDR_EXP 128
89666: PUSH
89667: LD_INT 1
89669: ST_TO_ADDR
// if p3 = 23 then
89670: LD_VAR 0 3
89674: PUSH
89675: LD_INT 23
89677: EQUAL
89678: IFFALSE 89688
// sOilTower := true ;
89680: LD_ADDR_EXP 130
89684: PUSH
89685: LD_INT 1
89687: ST_TO_ADDR
// if p3 = 24 then
89688: LD_VAR 0 3
89692: PUSH
89693: LD_INT 24
89695: EQUAL
89696: IFFALSE 89706
// sShovel := true ;
89698: LD_ADDR_EXP 131
89702: PUSH
89703: LD_INT 1
89705: ST_TO_ADDR
// if p3 = 25 then
89706: LD_VAR 0 3
89710: PUSH
89711: LD_INT 25
89713: EQUAL
89714: IFFALSE 89724
// sSheik := true ;
89716: LD_ADDR_EXP 132
89720: PUSH
89721: LD_INT 1
89723: ST_TO_ADDR
// if p3 = 26 then
89724: LD_VAR 0 3
89728: PUSH
89729: LD_INT 26
89731: EQUAL
89732: IFFALSE 89742
// sEarthquake := true ;
89734: LD_ADDR_EXP 134
89738: PUSH
89739: LD_INT 1
89741: ST_TO_ADDR
// if p3 = 27 then
89742: LD_VAR 0 3
89746: PUSH
89747: LD_INT 27
89749: EQUAL
89750: IFFALSE 89760
// sAI := true ;
89752: LD_ADDR_EXP 135
89756: PUSH
89757: LD_INT 1
89759: ST_TO_ADDR
// if p3 = 28 then
89760: LD_VAR 0 3
89764: PUSH
89765: LD_INT 28
89767: EQUAL
89768: IFFALSE 89778
// sCargo := true ;
89770: LD_ADDR_EXP 138
89774: PUSH
89775: LD_INT 1
89777: ST_TO_ADDR
// if p3 = 29 then
89778: LD_VAR 0 3
89782: PUSH
89783: LD_INT 29
89785: EQUAL
89786: IFFALSE 89796
// sDLaser := true ;
89788: LD_ADDR_EXP 139
89792: PUSH
89793: LD_INT 1
89795: ST_TO_ADDR
// if p3 = 30 then
89796: LD_VAR 0 3
89800: PUSH
89801: LD_INT 30
89803: EQUAL
89804: IFFALSE 89814
// sExchange := true ;
89806: LD_ADDR_EXP 140
89810: PUSH
89811: LD_INT 1
89813: ST_TO_ADDR
// if p3 = 31 then
89814: LD_VAR 0 3
89818: PUSH
89819: LD_INT 31
89821: EQUAL
89822: IFFALSE 89832
// sFac := true ;
89824: LD_ADDR_EXP 141
89828: PUSH
89829: LD_INT 1
89831: ST_TO_ADDR
// if p3 = 32 then
89832: LD_VAR 0 3
89836: PUSH
89837: LD_INT 32
89839: EQUAL
89840: IFFALSE 89850
// sPower := true ;
89842: LD_ADDR_EXP 142
89846: PUSH
89847: LD_INT 1
89849: ST_TO_ADDR
// if p3 = 33 then
89850: LD_VAR 0 3
89854: PUSH
89855: LD_INT 33
89857: EQUAL
89858: IFFALSE 89868
// sRandom := true ;
89860: LD_ADDR_EXP 143
89864: PUSH
89865: LD_INT 1
89867: ST_TO_ADDR
// if p3 = 34 then
89868: LD_VAR 0 3
89872: PUSH
89873: LD_INT 34
89875: EQUAL
89876: IFFALSE 89886
// sShield := true ;
89878: LD_ADDR_EXP 144
89882: PUSH
89883: LD_INT 1
89885: ST_TO_ADDR
// if p3 = 35 then
89886: LD_VAR 0 3
89890: PUSH
89891: LD_INT 35
89893: EQUAL
89894: IFFALSE 89904
// sTime := true ;
89896: LD_ADDR_EXP 145
89900: PUSH
89901: LD_INT 1
89903: ST_TO_ADDR
// if p3 = 36 then
89904: LD_VAR 0 3
89908: PUSH
89909: LD_INT 36
89911: EQUAL
89912: IFFALSE 89922
// sTools := true ;
89914: LD_ADDR_EXP 146
89918: PUSH
89919: LD_INT 1
89921: ST_TO_ADDR
// if p3 = 101 then
89922: LD_VAR 0 3
89926: PUSH
89927: LD_INT 101
89929: EQUAL
89930: IFFALSE 89940
// sSold := true ;
89932: LD_ADDR_EXP 111
89936: PUSH
89937: LD_INT 1
89939: ST_TO_ADDR
// if p3 = 102 then
89940: LD_VAR 0 3
89944: PUSH
89945: LD_INT 102
89947: EQUAL
89948: IFFALSE 89958
// sDiff := true ;
89950: LD_ADDR_EXP 112
89954: PUSH
89955: LD_INT 1
89957: ST_TO_ADDR
// if p3 = 103 then
89958: LD_VAR 0 3
89962: PUSH
89963: LD_INT 103
89965: EQUAL
89966: IFFALSE 89976
// sFog := true ;
89968: LD_ADDR_EXP 115
89972: PUSH
89973: LD_INT 1
89975: ST_TO_ADDR
// if p3 = 104 then
89976: LD_VAR 0 3
89980: PUSH
89981: LD_INT 104
89983: EQUAL
89984: IFFALSE 89994
// sReset := true ;
89986: LD_ADDR_EXP 116
89990: PUSH
89991: LD_INT 1
89993: ST_TO_ADDR
// if p3 = 105 then
89994: LD_VAR 0 3
89998: PUSH
89999: LD_INT 105
90001: EQUAL
90002: IFFALSE 90012
// sSun := true ;
90004: LD_ADDR_EXP 117
90008: PUSH
90009: LD_INT 1
90011: ST_TO_ADDR
// if p3 = 106 then
90012: LD_VAR 0 3
90016: PUSH
90017: LD_INT 106
90019: EQUAL
90020: IFFALSE 90030
// sTiger := true ;
90022: LD_ADDR_EXP 113
90026: PUSH
90027: LD_INT 1
90029: ST_TO_ADDR
// if p3 = 107 then
90030: LD_VAR 0 3
90034: PUSH
90035: LD_INT 107
90037: EQUAL
90038: IFFALSE 90048
// sBomb := true ;
90040: LD_ADDR_EXP 114
90044: PUSH
90045: LD_INT 1
90047: ST_TO_ADDR
// if p3 = 108 then
90048: LD_VAR 0 3
90052: PUSH
90053: LD_INT 108
90055: EQUAL
90056: IFFALSE 90066
// sWound := true ;
90058: LD_ADDR_EXP 122
90062: PUSH
90063: LD_INT 1
90065: ST_TO_ADDR
// if p3 = 109 then
90066: LD_VAR 0 3
90070: PUSH
90071: LD_INT 109
90073: EQUAL
90074: IFFALSE 90084
// sBetray := true ;
90076: LD_ADDR_EXP 126
90080: PUSH
90081: LD_INT 1
90083: ST_TO_ADDR
// if p3 = 110 then
90084: LD_VAR 0 3
90088: PUSH
90089: LD_INT 110
90091: EQUAL
90092: IFFALSE 90102
// sContamin := true ;
90094: LD_ADDR_EXP 127
90098: PUSH
90099: LD_INT 1
90101: ST_TO_ADDR
// if p3 = 111 then
90102: LD_VAR 0 3
90106: PUSH
90107: LD_INT 111
90109: EQUAL
90110: IFFALSE 90120
// sOil := true ;
90112: LD_ADDR_EXP 129
90116: PUSH
90117: LD_INT 1
90119: ST_TO_ADDR
// if p3 = 112 then
90120: LD_VAR 0 3
90124: PUSH
90125: LD_INT 112
90127: EQUAL
90128: IFFALSE 90138
// sStu := true ;
90130: LD_ADDR_EXP 133
90134: PUSH
90135: LD_INT 1
90137: ST_TO_ADDR
// if p3 = 113 then
90138: LD_VAR 0 3
90142: PUSH
90143: LD_INT 113
90145: EQUAL
90146: IFFALSE 90156
// sBazooka := true ;
90148: LD_ADDR_EXP 136
90152: PUSH
90153: LD_INT 1
90155: ST_TO_ADDR
// if p3 = 114 then
90156: LD_VAR 0 3
90160: PUSH
90161: LD_INT 114
90163: EQUAL
90164: IFFALSE 90174
// sMortar := true ;
90166: LD_ADDR_EXP 137
90170: PUSH
90171: LD_INT 1
90173: ST_TO_ADDR
// if p3 = 115 then
90174: LD_VAR 0 3
90178: PUSH
90179: LD_INT 115
90181: EQUAL
90182: IFFALSE 90192
// sRanger := true ;
90184: LD_ADDR_EXP 147
90188: PUSH
90189: LD_INT 1
90191: ST_TO_ADDR
// end ; if p2 = 101 then
90192: LD_VAR 0 2
90196: PUSH
90197: LD_INT 101
90199: EQUAL
90200: IFFALSE 90328
// begin case p3 of 1 :
90202: LD_VAR 0 3
90206: PUSH
90207: LD_INT 1
90209: DOUBLE
90210: EQUAL
90211: IFTRUE 90215
90213: GO 90222
90215: POP
// hHackUnlimitedResources ; 2 :
90216: CALL 101365 0 0
90220: GO 90328
90222: LD_INT 2
90224: DOUBLE
90225: EQUAL
90226: IFTRUE 90230
90228: GO 90237
90230: POP
// hHackSetLevel10 ; 3 :
90231: CALL 101498 0 0
90235: GO 90328
90237: LD_INT 3
90239: DOUBLE
90240: EQUAL
90241: IFTRUE 90245
90243: GO 90252
90245: POP
// hHackSetLevel10YourUnits ; 4 :
90246: CALL 101583 0 0
90250: GO 90328
90252: LD_INT 4
90254: DOUBLE
90255: EQUAL
90256: IFTRUE 90260
90258: GO 90267
90260: POP
// hHackInvincible ; 5 :
90261: CALL 102031 0 0
90265: GO 90328
90267: LD_INT 5
90269: DOUBLE
90270: EQUAL
90271: IFTRUE 90275
90273: GO 90282
90275: POP
// hHackInvisible ; 6 :
90276: CALL 102142 0 0
90280: GO 90328
90282: LD_INT 6
90284: DOUBLE
90285: EQUAL
90286: IFTRUE 90290
90288: GO 90297
90290: POP
// hHackChangeYourSide ; 7 :
90291: CALL 102199 0 0
90295: GO 90328
90297: LD_INT 7
90299: DOUBLE
90300: EQUAL
90301: IFTRUE 90305
90303: GO 90312
90305: POP
// hHackChangeUnitSide ; 8 :
90306: CALL 102241 0 0
90310: GO 90328
90312: LD_INT 8
90314: DOUBLE
90315: EQUAL
90316: IFTRUE 90320
90318: GO 90327
90320: POP
// hHackFog ; end ;
90321: CALL 102342 0 0
90325: GO 90328
90327: POP
// end ; end ;
90328: LD_VAR 0 7
90332: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
90333: GO 90335
90335: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
90336: LD_STRING initStreamRollete();
90338: PPUSH
90339: CALL_OW 559
// InitStreamMode ;
90343: CALL 90352 0 0
// DefineStreamItems ( ) ;
90347: CALL 90792 0 0
// end ;
90351: END
// function InitStreamMode ; begin
90352: LD_INT 0
90354: PPUSH
// streamModeActive := false ;
90355: LD_ADDR_EXP 94
90359: PUSH
90360: LD_INT 0
90362: ST_TO_ADDR
// normalCounter := 36 ;
90363: LD_ADDR_EXP 95
90367: PUSH
90368: LD_INT 36
90370: ST_TO_ADDR
// hardcoreCounter := 16 ;
90371: LD_ADDR_EXP 96
90375: PUSH
90376: LD_INT 16
90378: ST_TO_ADDR
// sRocket := false ;
90379: LD_ADDR_EXP 99
90383: PUSH
90384: LD_INT 0
90386: ST_TO_ADDR
// sSpeed := false ;
90387: LD_ADDR_EXP 98
90391: PUSH
90392: LD_INT 0
90394: ST_TO_ADDR
// sEngine := false ;
90395: LD_ADDR_EXP 100
90399: PUSH
90400: LD_INT 0
90402: ST_TO_ADDR
// sSpec := false ;
90403: LD_ADDR_EXP 97
90407: PUSH
90408: LD_INT 0
90410: ST_TO_ADDR
// sLevel := false ;
90411: LD_ADDR_EXP 101
90415: PUSH
90416: LD_INT 0
90418: ST_TO_ADDR
// sArmoury := false ;
90419: LD_ADDR_EXP 102
90423: PUSH
90424: LD_INT 0
90426: ST_TO_ADDR
// sRadar := false ;
90427: LD_ADDR_EXP 103
90431: PUSH
90432: LD_INT 0
90434: ST_TO_ADDR
// sBunker := false ;
90435: LD_ADDR_EXP 104
90439: PUSH
90440: LD_INT 0
90442: ST_TO_ADDR
// sHack := false ;
90443: LD_ADDR_EXP 105
90447: PUSH
90448: LD_INT 0
90450: ST_TO_ADDR
// sFire := false ;
90451: LD_ADDR_EXP 106
90455: PUSH
90456: LD_INT 0
90458: ST_TO_ADDR
// sRefresh := false ;
90459: LD_ADDR_EXP 107
90463: PUSH
90464: LD_INT 0
90466: ST_TO_ADDR
// sExp := false ;
90467: LD_ADDR_EXP 108
90471: PUSH
90472: LD_INT 0
90474: ST_TO_ADDR
// sDepot := false ;
90475: LD_ADDR_EXP 109
90479: PUSH
90480: LD_INT 0
90482: ST_TO_ADDR
// sFlag := false ;
90483: LD_ADDR_EXP 110
90487: PUSH
90488: LD_INT 0
90490: ST_TO_ADDR
// sKamikadze := false ;
90491: LD_ADDR_EXP 118
90495: PUSH
90496: LD_INT 0
90498: ST_TO_ADDR
// sTroll := false ;
90499: LD_ADDR_EXP 119
90503: PUSH
90504: LD_INT 0
90506: ST_TO_ADDR
// sSlow := false ;
90507: LD_ADDR_EXP 120
90511: PUSH
90512: LD_INT 0
90514: ST_TO_ADDR
// sLack := false ;
90515: LD_ADDR_EXP 121
90519: PUSH
90520: LD_INT 0
90522: ST_TO_ADDR
// sTank := false ;
90523: LD_ADDR_EXP 123
90527: PUSH
90528: LD_INT 0
90530: ST_TO_ADDR
// sRemote := false ;
90531: LD_ADDR_EXP 124
90535: PUSH
90536: LD_INT 0
90538: ST_TO_ADDR
// sPowell := false ;
90539: LD_ADDR_EXP 125
90543: PUSH
90544: LD_INT 0
90546: ST_TO_ADDR
// sTeleport := false ;
90547: LD_ADDR_EXP 128
90551: PUSH
90552: LD_INT 0
90554: ST_TO_ADDR
// sOilTower := false ;
90555: LD_ADDR_EXP 130
90559: PUSH
90560: LD_INT 0
90562: ST_TO_ADDR
// sShovel := false ;
90563: LD_ADDR_EXP 131
90567: PUSH
90568: LD_INT 0
90570: ST_TO_ADDR
// sSheik := false ;
90571: LD_ADDR_EXP 132
90575: PUSH
90576: LD_INT 0
90578: ST_TO_ADDR
// sEarthquake := false ;
90579: LD_ADDR_EXP 134
90583: PUSH
90584: LD_INT 0
90586: ST_TO_ADDR
// sAI := false ;
90587: LD_ADDR_EXP 135
90591: PUSH
90592: LD_INT 0
90594: ST_TO_ADDR
// sCargo := false ;
90595: LD_ADDR_EXP 138
90599: PUSH
90600: LD_INT 0
90602: ST_TO_ADDR
// sDLaser := false ;
90603: LD_ADDR_EXP 139
90607: PUSH
90608: LD_INT 0
90610: ST_TO_ADDR
// sExchange := false ;
90611: LD_ADDR_EXP 140
90615: PUSH
90616: LD_INT 0
90618: ST_TO_ADDR
// sFac := false ;
90619: LD_ADDR_EXP 141
90623: PUSH
90624: LD_INT 0
90626: ST_TO_ADDR
// sPower := false ;
90627: LD_ADDR_EXP 142
90631: PUSH
90632: LD_INT 0
90634: ST_TO_ADDR
// sRandom := false ;
90635: LD_ADDR_EXP 143
90639: PUSH
90640: LD_INT 0
90642: ST_TO_ADDR
// sShield := false ;
90643: LD_ADDR_EXP 144
90647: PUSH
90648: LD_INT 0
90650: ST_TO_ADDR
// sTime := false ;
90651: LD_ADDR_EXP 145
90655: PUSH
90656: LD_INT 0
90658: ST_TO_ADDR
// sTools := false ;
90659: LD_ADDR_EXP 146
90663: PUSH
90664: LD_INT 0
90666: ST_TO_ADDR
// sSold := false ;
90667: LD_ADDR_EXP 111
90671: PUSH
90672: LD_INT 0
90674: ST_TO_ADDR
// sDiff := false ;
90675: LD_ADDR_EXP 112
90679: PUSH
90680: LD_INT 0
90682: ST_TO_ADDR
// sFog := false ;
90683: LD_ADDR_EXP 115
90687: PUSH
90688: LD_INT 0
90690: ST_TO_ADDR
// sReset := false ;
90691: LD_ADDR_EXP 116
90695: PUSH
90696: LD_INT 0
90698: ST_TO_ADDR
// sSun := false ;
90699: LD_ADDR_EXP 117
90703: PUSH
90704: LD_INT 0
90706: ST_TO_ADDR
// sTiger := false ;
90707: LD_ADDR_EXP 113
90711: PUSH
90712: LD_INT 0
90714: ST_TO_ADDR
// sBomb := false ;
90715: LD_ADDR_EXP 114
90719: PUSH
90720: LD_INT 0
90722: ST_TO_ADDR
// sWound := false ;
90723: LD_ADDR_EXP 122
90727: PUSH
90728: LD_INT 0
90730: ST_TO_ADDR
// sBetray := false ;
90731: LD_ADDR_EXP 126
90735: PUSH
90736: LD_INT 0
90738: ST_TO_ADDR
// sContamin := false ;
90739: LD_ADDR_EXP 127
90743: PUSH
90744: LD_INT 0
90746: ST_TO_ADDR
// sOil := false ;
90747: LD_ADDR_EXP 129
90751: PUSH
90752: LD_INT 0
90754: ST_TO_ADDR
// sStu := false ;
90755: LD_ADDR_EXP 133
90759: PUSH
90760: LD_INT 0
90762: ST_TO_ADDR
// sBazooka := false ;
90763: LD_ADDR_EXP 136
90767: PUSH
90768: LD_INT 0
90770: ST_TO_ADDR
// sMortar := false ;
90771: LD_ADDR_EXP 137
90775: PUSH
90776: LD_INT 0
90778: ST_TO_ADDR
// sRanger := false ;
90779: LD_ADDR_EXP 147
90783: PUSH
90784: LD_INT 0
90786: ST_TO_ADDR
// end ;
90787: LD_VAR 0 1
90791: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
90792: LD_INT 0
90794: PPUSH
90795: PPUSH
90796: PPUSH
90797: PPUSH
90798: PPUSH
// result := [ ] ;
90799: LD_ADDR_VAR 0 1
90803: PUSH
90804: EMPTY
90805: ST_TO_ADDR
// if campaign_id = 1 then
90806: LD_OWVAR 69
90810: PUSH
90811: LD_INT 1
90813: EQUAL
90814: IFFALSE 93752
// begin case mission_number of 1 :
90816: LD_OWVAR 70
90820: PUSH
90821: LD_INT 1
90823: DOUBLE
90824: EQUAL
90825: IFTRUE 90829
90827: GO 90893
90829: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
90830: LD_ADDR_VAR 0 1
90834: PUSH
90835: LD_INT 2
90837: PUSH
90838: LD_INT 4
90840: PUSH
90841: LD_INT 11
90843: PUSH
90844: LD_INT 12
90846: PUSH
90847: LD_INT 15
90849: PUSH
90850: LD_INT 16
90852: PUSH
90853: LD_INT 22
90855: PUSH
90856: LD_INT 23
90858: PUSH
90859: LD_INT 26
90861: PUSH
90862: EMPTY
90863: LIST
90864: LIST
90865: LIST
90866: LIST
90867: LIST
90868: LIST
90869: LIST
90870: LIST
90871: LIST
90872: PUSH
90873: LD_INT 101
90875: PUSH
90876: LD_INT 102
90878: PUSH
90879: LD_INT 106
90881: PUSH
90882: EMPTY
90883: LIST
90884: LIST
90885: LIST
90886: PUSH
90887: EMPTY
90888: LIST
90889: LIST
90890: ST_TO_ADDR
90891: GO 93750
90893: LD_INT 2
90895: DOUBLE
90896: EQUAL
90897: IFTRUE 90901
90899: GO 90973
90901: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
90902: LD_ADDR_VAR 0 1
90906: PUSH
90907: LD_INT 2
90909: PUSH
90910: LD_INT 4
90912: PUSH
90913: LD_INT 11
90915: PUSH
90916: LD_INT 12
90918: PUSH
90919: LD_INT 15
90921: PUSH
90922: LD_INT 16
90924: PUSH
90925: LD_INT 22
90927: PUSH
90928: LD_INT 23
90930: PUSH
90931: LD_INT 26
90933: PUSH
90934: EMPTY
90935: LIST
90936: LIST
90937: LIST
90938: LIST
90939: LIST
90940: LIST
90941: LIST
90942: LIST
90943: LIST
90944: PUSH
90945: LD_INT 101
90947: PUSH
90948: LD_INT 102
90950: PUSH
90951: LD_INT 105
90953: PUSH
90954: LD_INT 106
90956: PUSH
90957: LD_INT 108
90959: PUSH
90960: EMPTY
90961: LIST
90962: LIST
90963: LIST
90964: LIST
90965: LIST
90966: PUSH
90967: EMPTY
90968: LIST
90969: LIST
90970: ST_TO_ADDR
90971: GO 93750
90973: LD_INT 3
90975: DOUBLE
90976: EQUAL
90977: IFTRUE 90981
90979: GO 91057
90981: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
90982: LD_ADDR_VAR 0 1
90986: PUSH
90987: LD_INT 2
90989: PUSH
90990: LD_INT 4
90992: PUSH
90993: LD_INT 5
90995: PUSH
90996: LD_INT 11
90998: PUSH
90999: LD_INT 12
91001: PUSH
91002: LD_INT 15
91004: PUSH
91005: LD_INT 16
91007: PUSH
91008: LD_INT 22
91010: PUSH
91011: LD_INT 26
91013: PUSH
91014: LD_INT 36
91016: PUSH
91017: EMPTY
91018: LIST
91019: LIST
91020: LIST
91021: LIST
91022: LIST
91023: LIST
91024: LIST
91025: LIST
91026: LIST
91027: LIST
91028: PUSH
91029: LD_INT 101
91031: PUSH
91032: LD_INT 102
91034: PUSH
91035: LD_INT 105
91037: PUSH
91038: LD_INT 106
91040: PUSH
91041: LD_INT 108
91043: PUSH
91044: EMPTY
91045: LIST
91046: LIST
91047: LIST
91048: LIST
91049: LIST
91050: PUSH
91051: EMPTY
91052: LIST
91053: LIST
91054: ST_TO_ADDR
91055: GO 93750
91057: LD_INT 4
91059: DOUBLE
91060: EQUAL
91061: IFTRUE 91065
91063: GO 91149
91065: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
91066: LD_ADDR_VAR 0 1
91070: PUSH
91071: LD_INT 2
91073: PUSH
91074: LD_INT 4
91076: PUSH
91077: LD_INT 5
91079: PUSH
91080: LD_INT 8
91082: PUSH
91083: LD_INT 11
91085: PUSH
91086: LD_INT 12
91088: PUSH
91089: LD_INT 15
91091: PUSH
91092: LD_INT 16
91094: PUSH
91095: LD_INT 22
91097: PUSH
91098: LD_INT 23
91100: PUSH
91101: LD_INT 26
91103: PUSH
91104: LD_INT 36
91106: PUSH
91107: EMPTY
91108: LIST
91109: LIST
91110: LIST
91111: LIST
91112: LIST
91113: LIST
91114: LIST
91115: LIST
91116: LIST
91117: LIST
91118: LIST
91119: LIST
91120: PUSH
91121: LD_INT 101
91123: PUSH
91124: LD_INT 102
91126: PUSH
91127: LD_INT 105
91129: PUSH
91130: LD_INT 106
91132: PUSH
91133: LD_INT 108
91135: PUSH
91136: EMPTY
91137: LIST
91138: LIST
91139: LIST
91140: LIST
91141: LIST
91142: PUSH
91143: EMPTY
91144: LIST
91145: LIST
91146: ST_TO_ADDR
91147: GO 93750
91149: LD_INT 5
91151: DOUBLE
91152: EQUAL
91153: IFTRUE 91157
91155: GO 91257
91157: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
91158: LD_ADDR_VAR 0 1
91162: PUSH
91163: LD_INT 2
91165: PUSH
91166: LD_INT 4
91168: PUSH
91169: LD_INT 5
91171: PUSH
91172: LD_INT 6
91174: PUSH
91175: LD_INT 8
91177: PUSH
91178: LD_INT 11
91180: PUSH
91181: LD_INT 12
91183: PUSH
91184: LD_INT 15
91186: PUSH
91187: LD_INT 16
91189: PUSH
91190: LD_INT 22
91192: PUSH
91193: LD_INT 23
91195: PUSH
91196: LD_INT 25
91198: PUSH
91199: LD_INT 26
91201: PUSH
91202: LD_INT 36
91204: PUSH
91205: EMPTY
91206: LIST
91207: LIST
91208: LIST
91209: LIST
91210: LIST
91211: LIST
91212: LIST
91213: LIST
91214: LIST
91215: LIST
91216: LIST
91217: LIST
91218: LIST
91219: LIST
91220: PUSH
91221: LD_INT 101
91223: PUSH
91224: LD_INT 102
91226: PUSH
91227: LD_INT 105
91229: PUSH
91230: LD_INT 106
91232: PUSH
91233: LD_INT 108
91235: PUSH
91236: LD_INT 109
91238: PUSH
91239: LD_INT 112
91241: PUSH
91242: EMPTY
91243: LIST
91244: LIST
91245: LIST
91246: LIST
91247: LIST
91248: LIST
91249: LIST
91250: PUSH
91251: EMPTY
91252: LIST
91253: LIST
91254: ST_TO_ADDR
91255: GO 93750
91257: LD_INT 6
91259: DOUBLE
91260: EQUAL
91261: IFTRUE 91265
91263: GO 91385
91265: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
91266: LD_ADDR_VAR 0 1
91270: PUSH
91271: LD_INT 2
91273: PUSH
91274: LD_INT 4
91276: PUSH
91277: LD_INT 5
91279: PUSH
91280: LD_INT 6
91282: PUSH
91283: LD_INT 8
91285: PUSH
91286: LD_INT 11
91288: PUSH
91289: LD_INT 12
91291: PUSH
91292: LD_INT 15
91294: PUSH
91295: LD_INT 16
91297: PUSH
91298: LD_INT 20
91300: PUSH
91301: LD_INT 21
91303: PUSH
91304: LD_INT 22
91306: PUSH
91307: LD_INT 23
91309: PUSH
91310: LD_INT 25
91312: PUSH
91313: LD_INT 26
91315: PUSH
91316: LD_INT 30
91318: PUSH
91319: LD_INT 31
91321: PUSH
91322: LD_INT 32
91324: PUSH
91325: LD_INT 36
91327: PUSH
91328: EMPTY
91329: LIST
91330: LIST
91331: LIST
91332: LIST
91333: LIST
91334: LIST
91335: LIST
91336: LIST
91337: LIST
91338: LIST
91339: LIST
91340: LIST
91341: LIST
91342: LIST
91343: LIST
91344: LIST
91345: LIST
91346: LIST
91347: LIST
91348: PUSH
91349: LD_INT 101
91351: PUSH
91352: LD_INT 102
91354: PUSH
91355: LD_INT 105
91357: PUSH
91358: LD_INT 106
91360: PUSH
91361: LD_INT 108
91363: PUSH
91364: LD_INT 109
91366: PUSH
91367: LD_INT 112
91369: PUSH
91370: EMPTY
91371: LIST
91372: LIST
91373: LIST
91374: LIST
91375: LIST
91376: LIST
91377: LIST
91378: PUSH
91379: EMPTY
91380: LIST
91381: LIST
91382: ST_TO_ADDR
91383: GO 93750
91385: LD_INT 7
91387: DOUBLE
91388: EQUAL
91389: IFTRUE 91393
91391: GO 91493
91393: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
91394: LD_ADDR_VAR 0 1
91398: PUSH
91399: LD_INT 2
91401: PUSH
91402: LD_INT 4
91404: PUSH
91405: LD_INT 5
91407: PUSH
91408: LD_INT 7
91410: PUSH
91411: LD_INT 11
91413: PUSH
91414: LD_INT 12
91416: PUSH
91417: LD_INT 15
91419: PUSH
91420: LD_INT 16
91422: PUSH
91423: LD_INT 20
91425: PUSH
91426: LD_INT 21
91428: PUSH
91429: LD_INT 22
91431: PUSH
91432: LD_INT 23
91434: PUSH
91435: LD_INT 25
91437: PUSH
91438: LD_INT 26
91440: PUSH
91441: EMPTY
91442: LIST
91443: LIST
91444: LIST
91445: LIST
91446: LIST
91447: LIST
91448: LIST
91449: LIST
91450: LIST
91451: LIST
91452: LIST
91453: LIST
91454: LIST
91455: LIST
91456: PUSH
91457: LD_INT 101
91459: PUSH
91460: LD_INT 102
91462: PUSH
91463: LD_INT 103
91465: PUSH
91466: LD_INT 105
91468: PUSH
91469: LD_INT 106
91471: PUSH
91472: LD_INT 108
91474: PUSH
91475: LD_INT 112
91477: PUSH
91478: EMPTY
91479: LIST
91480: LIST
91481: LIST
91482: LIST
91483: LIST
91484: LIST
91485: LIST
91486: PUSH
91487: EMPTY
91488: LIST
91489: LIST
91490: ST_TO_ADDR
91491: GO 93750
91493: LD_INT 8
91495: DOUBLE
91496: EQUAL
91497: IFTRUE 91501
91499: GO 91629
91501: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
91502: LD_ADDR_VAR 0 1
91506: PUSH
91507: LD_INT 2
91509: PUSH
91510: LD_INT 4
91512: PUSH
91513: LD_INT 5
91515: PUSH
91516: LD_INT 6
91518: PUSH
91519: LD_INT 7
91521: PUSH
91522: LD_INT 8
91524: PUSH
91525: LD_INT 11
91527: PUSH
91528: LD_INT 12
91530: PUSH
91531: LD_INT 15
91533: PUSH
91534: LD_INT 16
91536: PUSH
91537: LD_INT 20
91539: PUSH
91540: LD_INT 21
91542: PUSH
91543: LD_INT 22
91545: PUSH
91546: LD_INT 23
91548: PUSH
91549: LD_INT 25
91551: PUSH
91552: LD_INT 26
91554: PUSH
91555: LD_INT 30
91557: PUSH
91558: LD_INT 31
91560: PUSH
91561: LD_INT 32
91563: PUSH
91564: LD_INT 36
91566: PUSH
91567: EMPTY
91568: LIST
91569: LIST
91570: LIST
91571: LIST
91572: LIST
91573: LIST
91574: LIST
91575: LIST
91576: LIST
91577: LIST
91578: LIST
91579: LIST
91580: LIST
91581: LIST
91582: LIST
91583: LIST
91584: LIST
91585: LIST
91586: LIST
91587: LIST
91588: PUSH
91589: LD_INT 101
91591: PUSH
91592: LD_INT 102
91594: PUSH
91595: LD_INT 103
91597: PUSH
91598: LD_INT 105
91600: PUSH
91601: LD_INT 106
91603: PUSH
91604: LD_INT 108
91606: PUSH
91607: LD_INT 109
91609: PUSH
91610: LD_INT 112
91612: PUSH
91613: EMPTY
91614: LIST
91615: LIST
91616: LIST
91617: LIST
91618: LIST
91619: LIST
91620: LIST
91621: LIST
91622: PUSH
91623: EMPTY
91624: LIST
91625: LIST
91626: ST_TO_ADDR
91627: GO 93750
91629: LD_INT 9
91631: DOUBLE
91632: EQUAL
91633: IFTRUE 91637
91635: GO 91773
91637: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
91638: LD_ADDR_VAR 0 1
91642: PUSH
91643: LD_INT 2
91645: PUSH
91646: LD_INT 4
91648: PUSH
91649: LD_INT 5
91651: PUSH
91652: LD_INT 6
91654: PUSH
91655: LD_INT 7
91657: PUSH
91658: LD_INT 8
91660: PUSH
91661: LD_INT 11
91663: PUSH
91664: LD_INT 12
91666: PUSH
91667: LD_INT 15
91669: PUSH
91670: LD_INT 16
91672: PUSH
91673: LD_INT 20
91675: PUSH
91676: LD_INT 21
91678: PUSH
91679: LD_INT 22
91681: PUSH
91682: LD_INT 23
91684: PUSH
91685: LD_INT 25
91687: PUSH
91688: LD_INT 26
91690: PUSH
91691: LD_INT 28
91693: PUSH
91694: LD_INT 30
91696: PUSH
91697: LD_INT 31
91699: PUSH
91700: LD_INT 32
91702: PUSH
91703: LD_INT 36
91705: PUSH
91706: EMPTY
91707: LIST
91708: LIST
91709: LIST
91710: LIST
91711: LIST
91712: LIST
91713: LIST
91714: LIST
91715: LIST
91716: LIST
91717: LIST
91718: LIST
91719: LIST
91720: LIST
91721: LIST
91722: LIST
91723: LIST
91724: LIST
91725: LIST
91726: LIST
91727: LIST
91728: PUSH
91729: LD_INT 101
91731: PUSH
91732: LD_INT 102
91734: PUSH
91735: LD_INT 103
91737: PUSH
91738: LD_INT 105
91740: PUSH
91741: LD_INT 106
91743: PUSH
91744: LD_INT 108
91746: PUSH
91747: LD_INT 109
91749: PUSH
91750: LD_INT 112
91752: PUSH
91753: LD_INT 114
91755: PUSH
91756: EMPTY
91757: LIST
91758: LIST
91759: LIST
91760: LIST
91761: LIST
91762: LIST
91763: LIST
91764: LIST
91765: LIST
91766: PUSH
91767: EMPTY
91768: LIST
91769: LIST
91770: ST_TO_ADDR
91771: GO 93750
91773: LD_INT 10
91775: DOUBLE
91776: EQUAL
91777: IFTRUE 91781
91779: GO 91965
91781: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
91782: LD_ADDR_VAR 0 1
91786: PUSH
91787: LD_INT 2
91789: PUSH
91790: LD_INT 4
91792: PUSH
91793: LD_INT 5
91795: PUSH
91796: LD_INT 6
91798: PUSH
91799: LD_INT 7
91801: PUSH
91802: LD_INT 8
91804: PUSH
91805: LD_INT 9
91807: PUSH
91808: LD_INT 10
91810: PUSH
91811: LD_INT 11
91813: PUSH
91814: LD_INT 12
91816: PUSH
91817: LD_INT 13
91819: PUSH
91820: LD_INT 14
91822: PUSH
91823: LD_INT 15
91825: PUSH
91826: LD_INT 16
91828: PUSH
91829: LD_INT 17
91831: PUSH
91832: LD_INT 18
91834: PUSH
91835: LD_INT 19
91837: PUSH
91838: LD_INT 20
91840: PUSH
91841: LD_INT 21
91843: PUSH
91844: LD_INT 22
91846: PUSH
91847: LD_INT 23
91849: PUSH
91850: LD_INT 24
91852: PUSH
91853: LD_INT 25
91855: PUSH
91856: LD_INT 26
91858: PUSH
91859: LD_INT 28
91861: PUSH
91862: LD_INT 30
91864: PUSH
91865: LD_INT 31
91867: PUSH
91868: LD_INT 32
91870: PUSH
91871: LD_INT 36
91873: PUSH
91874: EMPTY
91875: LIST
91876: LIST
91877: LIST
91878: LIST
91879: LIST
91880: LIST
91881: LIST
91882: LIST
91883: LIST
91884: LIST
91885: LIST
91886: LIST
91887: LIST
91888: LIST
91889: LIST
91890: LIST
91891: LIST
91892: LIST
91893: LIST
91894: LIST
91895: LIST
91896: LIST
91897: LIST
91898: LIST
91899: LIST
91900: LIST
91901: LIST
91902: LIST
91903: LIST
91904: PUSH
91905: LD_INT 101
91907: PUSH
91908: LD_INT 102
91910: PUSH
91911: LD_INT 103
91913: PUSH
91914: LD_INT 104
91916: PUSH
91917: LD_INT 105
91919: PUSH
91920: LD_INT 106
91922: PUSH
91923: LD_INT 107
91925: PUSH
91926: LD_INT 108
91928: PUSH
91929: LD_INT 109
91931: PUSH
91932: LD_INT 110
91934: PUSH
91935: LD_INT 111
91937: PUSH
91938: LD_INT 112
91940: PUSH
91941: LD_INT 114
91943: PUSH
91944: EMPTY
91945: LIST
91946: LIST
91947: LIST
91948: LIST
91949: LIST
91950: LIST
91951: LIST
91952: LIST
91953: LIST
91954: LIST
91955: LIST
91956: LIST
91957: LIST
91958: PUSH
91959: EMPTY
91960: LIST
91961: LIST
91962: ST_TO_ADDR
91963: GO 93750
91965: LD_INT 11
91967: DOUBLE
91968: EQUAL
91969: IFTRUE 91973
91971: GO 92165
91973: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
91974: LD_ADDR_VAR 0 1
91978: PUSH
91979: LD_INT 2
91981: PUSH
91982: LD_INT 3
91984: PUSH
91985: LD_INT 4
91987: PUSH
91988: LD_INT 5
91990: PUSH
91991: LD_INT 6
91993: PUSH
91994: LD_INT 7
91996: PUSH
91997: LD_INT 8
91999: PUSH
92000: LD_INT 9
92002: PUSH
92003: LD_INT 10
92005: PUSH
92006: LD_INT 11
92008: PUSH
92009: LD_INT 12
92011: PUSH
92012: LD_INT 13
92014: PUSH
92015: LD_INT 14
92017: PUSH
92018: LD_INT 15
92020: PUSH
92021: LD_INT 16
92023: PUSH
92024: LD_INT 17
92026: PUSH
92027: LD_INT 18
92029: PUSH
92030: LD_INT 19
92032: PUSH
92033: LD_INT 20
92035: PUSH
92036: LD_INT 21
92038: PUSH
92039: LD_INT 22
92041: PUSH
92042: LD_INT 23
92044: PUSH
92045: LD_INT 24
92047: PUSH
92048: LD_INT 25
92050: PUSH
92051: LD_INT 26
92053: PUSH
92054: LD_INT 28
92056: PUSH
92057: LD_INT 30
92059: PUSH
92060: LD_INT 31
92062: PUSH
92063: LD_INT 32
92065: PUSH
92066: LD_INT 34
92068: PUSH
92069: LD_INT 36
92071: PUSH
92072: EMPTY
92073: LIST
92074: LIST
92075: LIST
92076: LIST
92077: LIST
92078: LIST
92079: LIST
92080: LIST
92081: LIST
92082: LIST
92083: LIST
92084: LIST
92085: LIST
92086: LIST
92087: LIST
92088: LIST
92089: LIST
92090: LIST
92091: LIST
92092: LIST
92093: LIST
92094: LIST
92095: LIST
92096: LIST
92097: LIST
92098: LIST
92099: LIST
92100: LIST
92101: LIST
92102: LIST
92103: LIST
92104: PUSH
92105: LD_INT 101
92107: PUSH
92108: LD_INT 102
92110: PUSH
92111: LD_INT 103
92113: PUSH
92114: LD_INT 104
92116: PUSH
92117: LD_INT 105
92119: PUSH
92120: LD_INT 106
92122: PUSH
92123: LD_INT 107
92125: PUSH
92126: LD_INT 108
92128: PUSH
92129: LD_INT 109
92131: PUSH
92132: LD_INT 110
92134: PUSH
92135: LD_INT 111
92137: PUSH
92138: LD_INT 112
92140: PUSH
92141: LD_INT 114
92143: PUSH
92144: EMPTY
92145: LIST
92146: LIST
92147: LIST
92148: LIST
92149: LIST
92150: LIST
92151: LIST
92152: LIST
92153: LIST
92154: LIST
92155: LIST
92156: LIST
92157: LIST
92158: PUSH
92159: EMPTY
92160: LIST
92161: LIST
92162: ST_TO_ADDR
92163: GO 93750
92165: LD_INT 12
92167: DOUBLE
92168: EQUAL
92169: IFTRUE 92173
92171: GO 92381
92173: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
92174: LD_ADDR_VAR 0 1
92178: PUSH
92179: LD_INT 1
92181: PUSH
92182: LD_INT 2
92184: PUSH
92185: LD_INT 3
92187: PUSH
92188: LD_INT 4
92190: PUSH
92191: LD_INT 5
92193: PUSH
92194: LD_INT 6
92196: PUSH
92197: LD_INT 7
92199: PUSH
92200: LD_INT 8
92202: PUSH
92203: LD_INT 9
92205: PUSH
92206: LD_INT 10
92208: PUSH
92209: LD_INT 11
92211: PUSH
92212: LD_INT 12
92214: PUSH
92215: LD_INT 13
92217: PUSH
92218: LD_INT 14
92220: PUSH
92221: LD_INT 15
92223: PUSH
92224: LD_INT 16
92226: PUSH
92227: LD_INT 17
92229: PUSH
92230: LD_INT 18
92232: PUSH
92233: LD_INT 19
92235: PUSH
92236: LD_INT 20
92238: PUSH
92239: LD_INT 21
92241: PUSH
92242: LD_INT 22
92244: PUSH
92245: LD_INT 23
92247: PUSH
92248: LD_INT 24
92250: PUSH
92251: LD_INT 25
92253: PUSH
92254: LD_INT 26
92256: PUSH
92257: LD_INT 27
92259: PUSH
92260: LD_INT 28
92262: PUSH
92263: LD_INT 30
92265: PUSH
92266: LD_INT 31
92268: PUSH
92269: LD_INT 32
92271: PUSH
92272: LD_INT 33
92274: PUSH
92275: LD_INT 34
92277: PUSH
92278: LD_INT 36
92280: PUSH
92281: EMPTY
92282: LIST
92283: LIST
92284: LIST
92285: LIST
92286: LIST
92287: LIST
92288: LIST
92289: LIST
92290: LIST
92291: LIST
92292: LIST
92293: LIST
92294: LIST
92295: LIST
92296: LIST
92297: LIST
92298: LIST
92299: LIST
92300: LIST
92301: LIST
92302: LIST
92303: LIST
92304: LIST
92305: LIST
92306: LIST
92307: LIST
92308: LIST
92309: LIST
92310: LIST
92311: LIST
92312: LIST
92313: LIST
92314: LIST
92315: LIST
92316: PUSH
92317: LD_INT 101
92319: PUSH
92320: LD_INT 102
92322: PUSH
92323: LD_INT 103
92325: PUSH
92326: LD_INT 104
92328: PUSH
92329: LD_INT 105
92331: PUSH
92332: LD_INT 106
92334: PUSH
92335: LD_INT 107
92337: PUSH
92338: LD_INT 108
92340: PUSH
92341: LD_INT 109
92343: PUSH
92344: LD_INT 110
92346: PUSH
92347: LD_INT 111
92349: PUSH
92350: LD_INT 112
92352: PUSH
92353: LD_INT 113
92355: PUSH
92356: LD_INT 114
92358: PUSH
92359: EMPTY
92360: LIST
92361: LIST
92362: LIST
92363: LIST
92364: LIST
92365: LIST
92366: LIST
92367: LIST
92368: LIST
92369: LIST
92370: LIST
92371: LIST
92372: LIST
92373: LIST
92374: PUSH
92375: EMPTY
92376: LIST
92377: LIST
92378: ST_TO_ADDR
92379: GO 93750
92381: LD_INT 13
92383: DOUBLE
92384: EQUAL
92385: IFTRUE 92389
92387: GO 92585
92389: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
92390: LD_ADDR_VAR 0 1
92394: PUSH
92395: LD_INT 1
92397: PUSH
92398: LD_INT 2
92400: PUSH
92401: LD_INT 3
92403: PUSH
92404: LD_INT 4
92406: PUSH
92407: LD_INT 5
92409: PUSH
92410: LD_INT 8
92412: PUSH
92413: LD_INT 9
92415: PUSH
92416: LD_INT 10
92418: PUSH
92419: LD_INT 11
92421: PUSH
92422: LD_INT 12
92424: PUSH
92425: LD_INT 14
92427: PUSH
92428: LD_INT 15
92430: PUSH
92431: LD_INT 16
92433: PUSH
92434: LD_INT 17
92436: PUSH
92437: LD_INT 18
92439: PUSH
92440: LD_INT 19
92442: PUSH
92443: LD_INT 20
92445: PUSH
92446: LD_INT 21
92448: PUSH
92449: LD_INT 22
92451: PUSH
92452: LD_INT 23
92454: PUSH
92455: LD_INT 24
92457: PUSH
92458: LD_INT 25
92460: PUSH
92461: LD_INT 26
92463: PUSH
92464: LD_INT 27
92466: PUSH
92467: LD_INT 28
92469: PUSH
92470: LD_INT 30
92472: PUSH
92473: LD_INT 31
92475: PUSH
92476: LD_INT 32
92478: PUSH
92479: LD_INT 33
92481: PUSH
92482: LD_INT 34
92484: PUSH
92485: LD_INT 36
92487: PUSH
92488: EMPTY
92489: LIST
92490: LIST
92491: LIST
92492: LIST
92493: LIST
92494: LIST
92495: LIST
92496: LIST
92497: LIST
92498: LIST
92499: LIST
92500: LIST
92501: LIST
92502: LIST
92503: LIST
92504: LIST
92505: LIST
92506: LIST
92507: LIST
92508: LIST
92509: LIST
92510: LIST
92511: LIST
92512: LIST
92513: LIST
92514: LIST
92515: LIST
92516: LIST
92517: LIST
92518: LIST
92519: LIST
92520: PUSH
92521: LD_INT 101
92523: PUSH
92524: LD_INT 102
92526: PUSH
92527: LD_INT 103
92529: PUSH
92530: LD_INT 104
92532: PUSH
92533: LD_INT 105
92535: PUSH
92536: LD_INT 106
92538: PUSH
92539: LD_INT 107
92541: PUSH
92542: LD_INT 108
92544: PUSH
92545: LD_INT 109
92547: PUSH
92548: LD_INT 110
92550: PUSH
92551: LD_INT 111
92553: PUSH
92554: LD_INT 112
92556: PUSH
92557: LD_INT 113
92559: PUSH
92560: LD_INT 114
92562: PUSH
92563: EMPTY
92564: LIST
92565: LIST
92566: LIST
92567: LIST
92568: LIST
92569: LIST
92570: LIST
92571: LIST
92572: LIST
92573: LIST
92574: LIST
92575: LIST
92576: LIST
92577: LIST
92578: PUSH
92579: EMPTY
92580: LIST
92581: LIST
92582: ST_TO_ADDR
92583: GO 93750
92585: LD_INT 14
92587: DOUBLE
92588: EQUAL
92589: IFTRUE 92593
92591: GO 92805
92593: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
92594: LD_ADDR_VAR 0 1
92598: PUSH
92599: LD_INT 1
92601: PUSH
92602: LD_INT 2
92604: PUSH
92605: LD_INT 3
92607: PUSH
92608: LD_INT 4
92610: PUSH
92611: LD_INT 5
92613: PUSH
92614: LD_INT 6
92616: PUSH
92617: LD_INT 7
92619: PUSH
92620: LD_INT 8
92622: PUSH
92623: LD_INT 9
92625: PUSH
92626: LD_INT 10
92628: PUSH
92629: LD_INT 11
92631: PUSH
92632: LD_INT 12
92634: PUSH
92635: LD_INT 13
92637: PUSH
92638: LD_INT 14
92640: PUSH
92641: LD_INT 15
92643: PUSH
92644: LD_INT 16
92646: PUSH
92647: LD_INT 17
92649: PUSH
92650: LD_INT 18
92652: PUSH
92653: LD_INT 19
92655: PUSH
92656: LD_INT 20
92658: PUSH
92659: LD_INT 21
92661: PUSH
92662: LD_INT 22
92664: PUSH
92665: LD_INT 23
92667: PUSH
92668: LD_INT 24
92670: PUSH
92671: LD_INT 25
92673: PUSH
92674: LD_INT 26
92676: PUSH
92677: LD_INT 27
92679: PUSH
92680: LD_INT 28
92682: PUSH
92683: LD_INT 29
92685: PUSH
92686: LD_INT 30
92688: PUSH
92689: LD_INT 31
92691: PUSH
92692: LD_INT 32
92694: PUSH
92695: LD_INT 33
92697: PUSH
92698: LD_INT 34
92700: PUSH
92701: LD_INT 36
92703: PUSH
92704: EMPTY
92705: LIST
92706: LIST
92707: LIST
92708: LIST
92709: LIST
92710: LIST
92711: LIST
92712: LIST
92713: LIST
92714: LIST
92715: LIST
92716: LIST
92717: LIST
92718: LIST
92719: LIST
92720: LIST
92721: LIST
92722: LIST
92723: LIST
92724: LIST
92725: LIST
92726: LIST
92727: LIST
92728: LIST
92729: LIST
92730: LIST
92731: LIST
92732: LIST
92733: LIST
92734: LIST
92735: LIST
92736: LIST
92737: LIST
92738: LIST
92739: LIST
92740: PUSH
92741: LD_INT 101
92743: PUSH
92744: LD_INT 102
92746: PUSH
92747: LD_INT 103
92749: PUSH
92750: LD_INT 104
92752: PUSH
92753: LD_INT 105
92755: PUSH
92756: LD_INT 106
92758: PUSH
92759: LD_INT 107
92761: PUSH
92762: LD_INT 108
92764: PUSH
92765: LD_INT 109
92767: PUSH
92768: LD_INT 110
92770: PUSH
92771: LD_INT 111
92773: PUSH
92774: LD_INT 112
92776: PUSH
92777: LD_INT 113
92779: PUSH
92780: LD_INT 114
92782: PUSH
92783: EMPTY
92784: LIST
92785: LIST
92786: LIST
92787: LIST
92788: LIST
92789: LIST
92790: LIST
92791: LIST
92792: LIST
92793: LIST
92794: LIST
92795: LIST
92796: LIST
92797: LIST
92798: PUSH
92799: EMPTY
92800: LIST
92801: LIST
92802: ST_TO_ADDR
92803: GO 93750
92805: LD_INT 15
92807: DOUBLE
92808: EQUAL
92809: IFTRUE 92813
92811: GO 93025
92813: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
92814: LD_ADDR_VAR 0 1
92818: PUSH
92819: LD_INT 1
92821: PUSH
92822: LD_INT 2
92824: PUSH
92825: LD_INT 3
92827: PUSH
92828: LD_INT 4
92830: PUSH
92831: LD_INT 5
92833: PUSH
92834: LD_INT 6
92836: PUSH
92837: LD_INT 7
92839: PUSH
92840: LD_INT 8
92842: PUSH
92843: LD_INT 9
92845: PUSH
92846: LD_INT 10
92848: PUSH
92849: LD_INT 11
92851: PUSH
92852: LD_INT 12
92854: PUSH
92855: LD_INT 13
92857: PUSH
92858: LD_INT 14
92860: PUSH
92861: LD_INT 15
92863: PUSH
92864: LD_INT 16
92866: PUSH
92867: LD_INT 17
92869: PUSH
92870: LD_INT 18
92872: PUSH
92873: LD_INT 19
92875: PUSH
92876: LD_INT 20
92878: PUSH
92879: LD_INT 21
92881: PUSH
92882: LD_INT 22
92884: PUSH
92885: LD_INT 23
92887: PUSH
92888: LD_INT 24
92890: PUSH
92891: LD_INT 25
92893: PUSH
92894: LD_INT 26
92896: PUSH
92897: LD_INT 27
92899: PUSH
92900: LD_INT 28
92902: PUSH
92903: LD_INT 29
92905: PUSH
92906: LD_INT 30
92908: PUSH
92909: LD_INT 31
92911: PUSH
92912: LD_INT 32
92914: PUSH
92915: LD_INT 33
92917: PUSH
92918: LD_INT 34
92920: PUSH
92921: LD_INT 36
92923: PUSH
92924: EMPTY
92925: LIST
92926: LIST
92927: LIST
92928: LIST
92929: LIST
92930: LIST
92931: LIST
92932: LIST
92933: LIST
92934: LIST
92935: LIST
92936: LIST
92937: LIST
92938: LIST
92939: LIST
92940: LIST
92941: LIST
92942: LIST
92943: LIST
92944: LIST
92945: LIST
92946: LIST
92947: LIST
92948: LIST
92949: LIST
92950: LIST
92951: LIST
92952: LIST
92953: LIST
92954: LIST
92955: LIST
92956: LIST
92957: LIST
92958: LIST
92959: LIST
92960: PUSH
92961: LD_INT 101
92963: PUSH
92964: LD_INT 102
92966: PUSH
92967: LD_INT 103
92969: PUSH
92970: LD_INT 104
92972: PUSH
92973: LD_INT 105
92975: PUSH
92976: LD_INT 106
92978: PUSH
92979: LD_INT 107
92981: PUSH
92982: LD_INT 108
92984: PUSH
92985: LD_INT 109
92987: PUSH
92988: LD_INT 110
92990: PUSH
92991: LD_INT 111
92993: PUSH
92994: LD_INT 112
92996: PUSH
92997: LD_INT 113
92999: PUSH
93000: LD_INT 114
93002: PUSH
93003: EMPTY
93004: LIST
93005: LIST
93006: LIST
93007: LIST
93008: LIST
93009: LIST
93010: LIST
93011: LIST
93012: LIST
93013: LIST
93014: LIST
93015: LIST
93016: LIST
93017: LIST
93018: PUSH
93019: EMPTY
93020: LIST
93021: LIST
93022: ST_TO_ADDR
93023: GO 93750
93025: LD_INT 16
93027: DOUBLE
93028: EQUAL
93029: IFTRUE 93033
93031: GO 93157
93033: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
93034: LD_ADDR_VAR 0 1
93038: PUSH
93039: LD_INT 2
93041: PUSH
93042: LD_INT 4
93044: PUSH
93045: LD_INT 5
93047: PUSH
93048: LD_INT 7
93050: PUSH
93051: LD_INT 11
93053: PUSH
93054: LD_INT 12
93056: PUSH
93057: LD_INT 15
93059: PUSH
93060: LD_INT 16
93062: PUSH
93063: LD_INT 20
93065: PUSH
93066: LD_INT 21
93068: PUSH
93069: LD_INT 22
93071: PUSH
93072: LD_INT 23
93074: PUSH
93075: LD_INT 25
93077: PUSH
93078: LD_INT 26
93080: PUSH
93081: LD_INT 30
93083: PUSH
93084: LD_INT 31
93086: PUSH
93087: LD_INT 32
93089: PUSH
93090: LD_INT 33
93092: PUSH
93093: LD_INT 34
93095: PUSH
93096: EMPTY
93097: LIST
93098: LIST
93099: LIST
93100: LIST
93101: LIST
93102: LIST
93103: LIST
93104: LIST
93105: LIST
93106: LIST
93107: LIST
93108: LIST
93109: LIST
93110: LIST
93111: LIST
93112: LIST
93113: LIST
93114: LIST
93115: LIST
93116: PUSH
93117: LD_INT 101
93119: PUSH
93120: LD_INT 102
93122: PUSH
93123: LD_INT 103
93125: PUSH
93126: LD_INT 106
93128: PUSH
93129: LD_INT 108
93131: PUSH
93132: LD_INT 112
93134: PUSH
93135: LD_INT 113
93137: PUSH
93138: LD_INT 114
93140: PUSH
93141: EMPTY
93142: LIST
93143: LIST
93144: LIST
93145: LIST
93146: LIST
93147: LIST
93148: LIST
93149: LIST
93150: PUSH
93151: EMPTY
93152: LIST
93153: LIST
93154: ST_TO_ADDR
93155: GO 93750
93157: LD_INT 17
93159: DOUBLE
93160: EQUAL
93161: IFTRUE 93165
93163: GO 93377
93165: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
93166: LD_ADDR_VAR 0 1
93170: PUSH
93171: LD_INT 1
93173: PUSH
93174: LD_INT 2
93176: PUSH
93177: LD_INT 3
93179: PUSH
93180: LD_INT 4
93182: PUSH
93183: LD_INT 5
93185: PUSH
93186: LD_INT 6
93188: PUSH
93189: LD_INT 7
93191: PUSH
93192: LD_INT 8
93194: PUSH
93195: LD_INT 9
93197: PUSH
93198: LD_INT 10
93200: PUSH
93201: LD_INT 11
93203: PUSH
93204: LD_INT 12
93206: PUSH
93207: LD_INT 13
93209: PUSH
93210: LD_INT 14
93212: PUSH
93213: LD_INT 15
93215: PUSH
93216: LD_INT 16
93218: PUSH
93219: LD_INT 17
93221: PUSH
93222: LD_INT 18
93224: PUSH
93225: LD_INT 19
93227: PUSH
93228: LD_INT 20
93230: PUSH
93231: LD_INT 21
93233: PUSH
93234: LD_INT 22
93236: PUSH
93237: LD_INT 23
93239: PUSH
93240: LD_INT 24
93242: PUSH
93243: LD_INT 25
93245: PUSH
93246: LD_INT 26
93248: PUSH
93249: LD_INT 27
93251: PUSH
93252: LD_INT 28
93254: PUSH
93255: LD_INT 29
93257: PUSH
93258: LD_INT 30
93260: PUSH
93261: LD_INT 31
93263: PUSH
93264: LD_INT 32
93266: PUSH
93267: LD_INT 33
93269: PUSH
93270: LD_INT 34
93272: PUSH
93273: LD_INT 36
93275: PUSH
93276: EMPTY
93277: LIST
93278: LIST
93279: LIST
93280: LIST
93281: LIST
93282: LIST
93283: LIST
93284: LIST
93285: LIST
93286: LIST
93287: LIST
93288: LIST
93289: LIST
93290: LIST
93291: LIST
93292: LIST
93293: LIST
93294: LIST
93295: LIST
93296: LIST
93297: LIST
93298: LIST
93299: LIST
93300: LIST
93301: LIST
93302: LIST
93303: LIST
93304: LIST
93305: LIST
93306: LIST
93307: LIST
93308: LIST
93309: LIST
93310: LIST
93311: LIST
93312: PUSH
93313: LD_INT 101
93315: PUSH
93316: LD_INT 102
93318: PUSH
93319: LD_INT 103
93321: PUSH
93322: LD_INT 104
93324: PUSH
93325: LD_INT 105
93327: PUSH
93328: LD_INT 106
93330: PUSH
93331: LD_INT 107
93333: PUSH
93334: LD_INT 108
93336: PUSH
93337: LD_INT 109
93339: PUSH
93340: LD_INT 110
93342: PUSH
93343: LD_INT 111
93345: PUSH
93346: LD_INT 112
93348: PUSH
93349: LD_INT 113
93351: PUSH
93352: LD_INT 114
93354: PUSH
93355: EMPTY
93356: LIST
93357: LIST
93358: LIST
93359: LIST
93360: LIST
93361: LIST
93362: LIST
93363: LIST
93364: LIST
93365: LIST
93366: LIST
93367: LIST
93368: LIST
93369: LIST
93370: PUSH
93371: EMPTY
93372: LIST
93373: LIST
93374: ST_TO_ADDR
93375: GO 93750
93377: LD_INT 18
93379: DOUBLE
93380: EQUAL
93381: IFTRUE 93385
93383: GO 93521
93385: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
93386: LD_ADDR_VAR 0 1
93390: PUSH
93391: LD_INT 2
93393: PUSH
93394: LD_INT 4
93396: PUSH
93397: LD_INT 5
93399: PUSH
93400: LD_INT 7
93402: PUSH
93403: LD_INT 11
93405: PUSH
93406: LD_INT 12
93408: PUSH
93409: LD_INT 15
93411: PUSH
93412: LD_INT 16
93414: PUSH
93415: LD_INT 20
93417: PUSH
93418: LD_INT 21
93420: PUSH
93421: LD_INT 22
93423: PUSH
93424: LD_INT 23
93426: PUSH
93427: LD_INT 25
93429: PUSH
93430: LD_INT 26
93432: PUSH
93433: LD_INT 30
93435: PUSH
93436: LD_INT 31
93438: PUSH
93439: LD_INT 32
93441: PUSH
93442: LD_INT 33
93444: PUSH
93445: LD_INT 34
93447: PUSH
93448: LD_INT 35
93450: PUSH
93451: LD_INT 36
93453: PUSH
93454: EMPTY
93455: LIST
93456: LIST
93457: LIST
93458: LIST
93459: LIST
93460: LIST
93461: LIST
93462: LIST
93463: LIST
93464: LIST
93465: LIST
93466: LIST
93467: LIST
93468: LIST
93469: LIST
93470: LIST
93471: LIST
93472: LIST
93473: LIST
93474: LIST
93475: LIST
93476: PUSH
93477: LD_INT 101
93479: PUSH
93480: LD_INT 102
93482: PUSH
93483: LD_INT 103
93485: PUSH
93486: LD_INT 106
93488: PUSH
93489: LD_INT 108
93491: PUSH
93492: LD_INT 112
93494: PUSH
93495: LD_INT 113
93497: PUSH
93498: LD_INT 114
93500: PUSH
93501: LD_INT 115
93503: PUSH
93504: EMPTY
93505: LIST
93506: LIST
93507: LIST
93508: LIST
93509: LIST
93510: LIST
93511: LIST
93512: LIST
93513: LIST
93514: PUSH
93515: EMPTY
93516: LIST
93517: LIST
93518: ST_TO_ADDR
93519: GO 93750
93521: LD_INT 19
93523: DOUBLE
93524: EQUAL
93525: IFTRUE 93529
93527: GO 93749
93529: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
93530: LD_ADDR_VAR 0 1
93534: PUSH
93535: LD_INT 1
93537: PUSH
93538: LD_INT 2
93540: PUSH
93541: LD_INT 3
93543: PUSH
93544: LD_INT 4
93546: PUSH
93547: LD_INT 5
93549: PUSH
93550: LD_INT 6
93552: PUSH
93553: LD_INT 7
93555: PUSH
93556: LD_INT 8
93558: PUSH
93559: LD_INT 9
93561: PUSH
93562: LD_INT 10
93564: PUSH
93565: LD_INT 11
93567: PUSH
93568: LD_INT 12
93570: PUSH
93571: LD_INT 13
93573: PUSH
93574: LD_INT 14
93576: PUSH
93577: LD_INT 15
93579: PUSH
93580: LD_INT 16
93582: PUSH
93583: LD_INT 17
93585: PUSH
93586: LD_INT 18
93588: PUSH
93589: LD_INT 19
93591: PUSH
93592: LD_INT 20
93594: PUSH
93595: LD_INT 21
93597: PUSH
93598: LD_INT 22
93600: PUSH
93601: LD_INT 23
93603: PUSH
93604: LD_INT 24
93606: PUSH
93607: LD_INT 25
93609: PUSH
93610: LD_INT 26
93612: PUSH
93613: LD_INT 27
93615: PUSH
93616: LD_INT 28
93618: PUSH
93619: LD_INT 29
93621: PUSH
93622: LD_INT 30
93624: PUSH
93625: LD_INT 31
93627: PUSH
93628: LD_INT 32
93630: PUSH
93631: LD_INT 33
93633: PUSH
93634: LD_INT 34
93636: PUSH
93637: LD_INT 35
93639: PUSH
93640: LD_INT 36
93642: PUSH
93643: EMPTY
93644: LIST
93645: LIST
93646: LIST
93647: LIST
93648: LIST
93649: LIST
93650: LIST
93651: LIST
93652: LIST
93653: LIST
93654: LIST
93655: LIST
93656: LIST
93657: LIST
93658: LIST
93659: LIST
93660: LIST
93661: LIST
93662: LIST
93663: LIST
93664: LIST
93665: LIST
93666: LIST
93667: LIST
93668: LIST
93669: LIST
93670: LIST
93671: LIST
93672: LIST
93673: LIST
93674: LIST
93675: LIST
93676: LIST
93677: LIST
93678: LIST
93679: LIST
93680: PUSH
93681: LD_INT 101
93683: PUSH
93684: LD_INT 102
93686: PUSH
93687: LD_INT 103
93689: PUSH
93690: LD_INT 104
93692: PUSH
93693: LD_INT 105
93695: PUSH
93696: LD_INT 106
93698: PUSH
93699: LD_INT 107
93701: PUSH
93702: LD_INT 108
93704: PUSH
93705: LD_INT 109
93707: PUSH
93708: LD_INT 110
93710: PUSH
93711: LD_INT 111
93713: PUSH
93714: LD_INT 112
93716: PUSH
93717: LD_INT 113
93719: PUSH
93720: LD_INT 114
93722: PUSH
93723: LD_INT 115
93725: PUSH
93726: EMPTY
93727: LIST
93728: LIST
93729: LIST
93730: LIST
93731: LIST
93732: LIST
93733: LIST
93734: LIST
93735: LIST
93736: LIST
93737: LIST
93738: LIST
93739: LIST
93740: LIST
93741: LIST
93742: PUSH
93743: EMPTY
93744: LIST
93745: LIST
93746: ST_TO_ADDR
93747: GO 93750
93749: POP
// end else
93750: GO 93969
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
93752: LD_ADDR_VAR 0 1
93756: PUSH
93757: LD_INT 1
93759: PUSH
93760: LD_INT 2
93762: PUSH
93763: LD_INT 3
93765: PUSH
93766: LD_INT 4
93768: PUSH
93769: LD_INT 5
93771: PUSH
93772: LD_INT 6
93774: PUSH
93775: LD_INT 7
93777: PUSH
93778: LD_INT 8
93780: PUSH
93781: LD_INT 9
93783: PUSH
93784: LD_INT 10
93786: PUSH
93787: LD_INT 11
93789: PUSH
93790: LD_INT 12
93792: PUSH
93793: LD_INT 13
93795: PUSH
93796: LD_INT 14
93798: PUSH
93799: LD_INT 15
93801: PUSH
93802: LD_INT 16
93804: PUSH
93805: LD_INT 17
93807: PUSH
93808: LD_INT 18
93810: PUSH
93811: LD_INT 19
93813: PUSH
93814: LD_INT 20
93816: PUSH
93817: LD_INT 21
93819: PUSH
93820: LD_INT 22
93822: PUSH
93823: LD_INT 23
93825: PUSH
93826: LD_INT 24
93828: PUSH
93829: LD_INT 25
93831: PUSH
93832: LD_INT 26
93834: PUSH
93835: LD_INT 27
93837: PUSH
93838: LD_INT 28
93840: PUSH
93841: LD_INT 29
93843: PUSH
93844: LD_INT 30
93846: PUSH
93847: LD_INT 31
93849: PUSH
93850: LD_INT 32
93852: PUSH
93853: LD_INT 33
93855: PUSH
93856: LD_INT 34
93858: PUSH
93859: LD_INT 35
93861: PUSH
93862: LD_INT 36
93864: PUSH
93865: EMPTY
93866: LIST
93867: LIST
93868: LIST
93869: LIST
93870: LIST
93871: LIST
93872: LIST
93873: LIST
93874: LIST
93875: LIST
93876: LIST
93877: LIST
93878: LIST
93879: LIST
93880: LIST
93881: LIST
93882: LIST
93883: LIST
93884: LIST
93885: LIST
93886: LIST
93887: LIST
93888: LIST
93889: LIST
93890: LIST
93891: LIST
93892: LIST
93893: LIST
93894: LIST
93895: LIST
93896: LIST
93897: LIST
93898: LIST
93899: LIST
93900: LIST
93901: LIST
93902: PUSH
93903: LD_INT 101
93905: PUSH
93906: LD_INT 102
93908: PUSH
93909: LD_INT 103
93911: PUSH
93912: LD_INT 104
93914: PUSH
93915: LD_INT 105
93917: PUSH
93918: LD_INT 106
93920: PUSH
93921: LD_INT 107
93923: PUSH
93924: LD_INT 108
93926: PUSH
93927: LD_INT 109
93929: PUSH
93930: LD_INT 110
93932: PUSH
93933: LD_INT 111
93935: PUSH
93936: LD_INT 112
93938: PUSH
93939: LD_INT 113
93941: PUSH
93942: LD_INT 114
93944: PUSH
93945: LD_INT 115
93947: PUSH
93948: EMPTY
93949: LIST
93950: LIST
93951: LIST
93952: LIST
93953: LIST
93954: LIST
93955: LIST
93956: LIST
93957: LIST
93958: LIST
93959: LIST
93960: LIST
93961: LIST
93962: LIST
93963: LIST
93964: PUSH
93965: EMPTY
93966: LIST
93967: LIST
93968: ST_TO_ADDR
// if result then
93969: LD_VAR 0 1
93973: IFFALSE 94262
// begin normal :=  ;
93975: LD_ADDR_VAR 0 3
93979: PUSH
93980: LD_STRING 
93982: ST_TO_ADDR
// hardcore :=  ;
93983: LD_ADDR_VAR 0 4
93987: PUSH
93988: LD_STRING 
93990: ST_TO_ADDR
// for i = 1 to normalCounter do
93991: LD_ADDR_VAR 0 5
93995: PUSH
93996: DOUBLE
93997: LD_INT 1
93999: DEC
94000: ST_TO_ADDR
94001: LD_EXP 95
94005: PUSH
94006: FOR_TO
94007: IFFALSE 94108
// begin tmp := 0 ;
94009: LD_ADDR_VAR 0 2
94013: PUSH
94014: LD_STRING 0
94016: ST_TO_ADDR
// if result [ 1 ] then
94017: LD_VAR 0 1
94021: PUSH
94022: LD_INT 1
94024: ARRAY
94025: IFFALSE 94090
// if result [ 1 ] [ 1 ] = i then
94027: LD_VAR 0 1
94031: PUSH
94032: LD_INT 1
94034: ARRAY
94035: PUSH
94036: LD_INT 1
94038: ARRAY
94039: PUSH
94040: LD_VAR 0 5
94044: EQUAL
94045: IFFALSE 94090
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
94047: LD_ADDR_VAR 0 1
94051: PUSH
94052: LD_VAR 0 1
94056: PPUSH
94057: LD_INT 1
94059: PPUSH
94060: LD_VAR 0 1
94064: PUSH
94065: LD_INT 1
94067: ARRAY
94068: PPUSH
94069: LD_INT 1
94071: PPUSH
94072: CALL_OW 3
94076: PPUSH
94077: CALL_OW 1
94081: ST_TO_ADDR
// tmp := 1 ;
94082: LD_ADDR_VAR 0 2
94086: PUSH
94087: LD_STRING 1
94089: ST_TO_ADDR
// end ; normal := normal & tmp ;
94090: LD_ADDR_VAR 0 3
94094: PUSH
94095: LD_VAR 0 3
94099: PUSH
94100: LD_VAR 0 2
94104: STR
94105: ST_TO_ADDR
// end ;
94106: GO 94006
94108: POP
94109: POP
// for i = 1 to hardcoreCounter do
94110: LD_ADDR_VAR 0 5
94114: PUSH
94115: DOUBLE
94116: LD_INT 1
94118: DEC
94119: ST_TO_ADDR
94120: LD_EXP 96
94124: PUSH
94125: FOR_TO
94126: IFFALSE 94231
// begin tmp := 0 ;
94128: LD_ADDR_VAR 0 2
94132: PUSH
94133: LD_STRING 0
94135: ST_TO_ADDR
// if result [ 2 ] then
94136: LD_VAR 0 1
94140: PUSH
94141: LD_INT 2
94143: ARRAY
94144: IFFALSE 94213
// if result [ 2 ] [ 1 ] = 100 + i then
94146: LD_VAR 0 1
94150: PUSH
94151: LD_INT 2
94153: ARRAY
94154: PUSH
94155: LD_INT 1
94157: ARRAY
94158: PUSH
94159: LD_INT 100
94161: PUSH
94162: LD_VAR 0 5
94166: PLUS
94167: EQUAL
94168: IFFALSE 94213
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
94170: LD_ADDR_VAR 0 1
94174: PUSH
94175: LD_VAR 0 1
94179: PPUSH
94180: LD_INT 2
94182: PPUSH
94183: LD_VAR 0 1
94187: PUSH
94188: LD_INT 2
94190: ARRAY
94191: PPUSH
94192: LD_INT 1
94194: PPUSH
94195: CALL_OW 3
94199: PPUSH
94200: CALL_OW 1
94204: ST_TO_ADDR
// tmp := 1 ;
94205: LD_ADDR_VAR 0 2
94209: PUSH
94210: LD_STRING 1
94212: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
94213: LD_ADDR_VAR 0 4
94217: PUSH
94218: LD_VAR 0 4
94222: PUSH
94223: LD_VAR 0 2
94227: STR
94228: ST_TO_ADDR
// end ;
94229: GO 94125
94231: POP
94232: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
94233: LD_STRING getStreamItemsFromMission("
94235: PUSH
94236: LD_VAR 0 3
94240: STR
94241: PUSH
94242: LD_STRING ","
94244: STR
94245: PUSH
94246: LD_VAR 0 4
94250: STR
94251: PUSH
94252: LD_STRING ")
94254: STR
94255: PPUSH
94256: CALL_OW 559
// end else
94260: GO 94269
// ToLua ( getStreamItemsFromMission("","") ) ;
94262: LD_STRING getStreamItemsFromMission("","")
94264: PPUSH
94265: CALL_OW 559
// end ;
94269: LD_VAR 0 1
94273: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
94274: LD_EXP 94
94278: PUSH
94279: LD_EXP 99
94283: AND
94284: IFFALSE 94408
94286: GO 94288
94288: DISABLE
94289: LD_INT 0
94291: PPUSH
94292: PPUSH
// begin enable ;
94293: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
94294: LD_ADDR_VAR 0 2
94298: PUSH
94299: LD_INT 22
94301: PUSH
94302: LD_OWVAR 2
94306: PUSH
94307: EMPTY
94308: LIST
94309: LIST
94310: PUSH
94311: LD_INT 2
94313: PUSH
94314: LD_INT 34
94316: PUSH
94317: LD_INT 7
94319: PUSH
94320: EMPTY
94321: LIST
94322: LIST
94323: PUSH
94324: LD_INT 34
94326: PUSH
94327: LD_INT 45
94329: PUSH
94330: EMPTY
94331: LIST
94332: LIST
94333: PUSH
94334: LD_INT 34
94336: PUSH
94337: LD_INT 28
94339: PUSH
94340: EMPTY
94341: LIST
94342: LIST
94343: PUSH
94344: LD_INT 34
94346: PUSH
94347: LD_INT 47
94349: PUSH
94350: EMPTY
94351: LIST
94352: LIST
94353: PUSH
94354: EMPTY
94355: LIST
94356: LIST
94357: LIST
94358: LIST
94359: LIST
94360: PUSH
94361: EMPTY
94362: LIST
94363: LIST
94364: PPUSH
94365: CALL_OW 69
94369: ST_TO_ADDR
// if not tmp then
94370: LD_VAR 0 2
94374: NOT
94375: IFFALSE 94379
// exit ;
94377: GO 94408
// for i in tmp do
94379: LD_ADDR_VAR 0 1
94383: PUSH
94384: LD_VAR 0 2
94388: PUSH
94389: FOR_IN
94390: IFFALSE 94406
// begin SetLives ( i , 0 ) ;
94392: LD_VAR 0 1
94396: PPUSH
94397: LD_INT 0
94399: PPUSH
94400: CALL_OW 234
// end ;
94404: GO 94389
94406: POP
94407: POP
// end ;
94408: PPOPN 2
94410: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
94411: LD_EXP 94
94415: PUSH
94416: LD_EXP 100
94420: AND
94421: IFFALSE 94505
94423: GO 94425
94425: DISABLE
94426: LD_INT 0
94428: PPUSH
94429: PPUSH
// begin enable ;
94430: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
94431: LD_ADDR_VAR 0 2
94435: PUSH
94436: LD_INT 22
94438: PUSH
94439: LD_OWVAR 2
94443: PUSH
94444: EMPTY
94445: LIST
94446: LIST
94447: PUSH
94448: LD_INT 32
94450: PUSH
94451: LD_INT 3
94453: PUSH
94454: EMPTY
94455: LIST
94456: LIST
94457: PUSH
94458: EMPTY
94459: LIST
94460: LIST
94461: PPUSH
94462: CALL_OW 69
94466: ST_TO_ADDR
// if not tmp then
94467: LD_VAR 0 2
94471: NOT
94472: IFFALSE 94476
// exit ;
94474: GO 94505
// for i in tmp do
94476: LD_ADDR_VAR 0 1
94480: PUSH
94481: LD_VAR 0 2
94485: PUSH
94486: FOR_IN
94487: IFFALSE 94503
// begin SetLives ( i , 0 ) ;
94489: LD_VAR 0 1
94493: PPUSH
94494: LD_INT 0
94496: PPUSH
94497: CALL_OW 234
// end ;
94501: GO 94486
94503: POP
94504: POP
// end ;
94505: PPOPN 2
94507: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
94508: LD_EXP 94
94512: PUSH
94513: LD_EXP 97
94517: AND
94518: IFFALSE 94611
94520: GO 94522
94522: DISABLE
94523: LD_INT 0
94525: PPUSH
// begin enable ;
94526: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
94527: LD_ADDR_VAR 0 1
94531: PUSH
94532: LD_INT 22
94534: PUSH
94535: LD_OWVAR 2
94539: PUSH
94540: EMPTY
94541: LIST
94542: LIST
94543: PUSH
94544: LD_INT 2
94546: PUSH
94547: LD_INT 25
94549: PUSH
94550: LD_INT 5
94552: PUSH
94553: EMPTY
94554: LIST
94555: LIST
94556: PUSH
94557: LD_INT 25
94559: PUSH
94560: LD_INT 9
94562: PUSH
94563: EMPTY
94564: LIST
94565: LIST
94566: PUSH
94567: LD_INT 25
94569: PUSH
94570: LD_INT 8
94572: PUSH
94573: EMPTY
94574: LIST
94575: LIST
94576: PUSH
94577: EMPTY
94578: LIST
94579: LIST
94580: LIST
94581: LIST
94582: PUSH
94583: EMPTY
94584: LIST
94585: LIST
94586: PPUSH
94587: CALL_OW 69
94591: PUSH
94592: FOR_IN
94593: IFFALSE 94609
// begin SetClass ( i , 1 ) ;
94595: LD_VAR 0 1
94599: PPUSH
94600: LD_INT 1
94602: PPUSH
94603: CALL_OW 336
// end ;
94607: GO 94592
94609: POP
94610: POP
// end ;
94611: PPOPN 1
94613: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
94614: LD_EXP 94
94618: PUSH
94619: LD_EXP 98
94623: AND
94624: PUSH
94625: LD_OWVAR 65
94629: PUSH
94630: LD_INT 7
94632: LESS
94633: AND
94634: IFFALSE 94648
94636: GO 94638
94638: DISABLE
// begin enable ;
94639: ENABLE
// game_speed := 7 ;
94640: LD_ADDR_OWVAR 65
94644: PUSH
94645: LD_INT 7
94647: ST_TO_ADDR
// end ;
94648: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
94649: LD_EXP 94
94653: PUSH
94654: LD_EXP 101
94658: AND
94659: IFFALSE 94861
94661: GO 94663
94663: DISABLE
94664: LD_INT 0
94666: PPUSH
94667: PPUSH
94668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
94669: LD_ADDR_VAR 0 3
94673: PUSH
94674: LD_INT 81
94676: PUSH
94677: LD_OWVAR 2
94681: PUSH
94682: EMPTY
94683: LIST
94684: LIST
94685: PUSH
94686: LD_INT 21
94688: PUSH
94689: LD_INT 1
94691: PUSH
94692: EMPTY
94693: LIST
94694: LIST
94695: PUSH
94696: EMPTY
94697: LIST
94698: LIST
94699: PPUSH
94700: CALL_OW 69
94704: ST_TO_ADDR
// if not tmp then
94705: LD_VAR 0 3
94709: NOT
94710: IFFALSE 94714
// exit ;
94712: GO 94861
// if tmp > 5 then
94714: LD_VAR 0 3
94718: PUSH
94719: LD_INT 5
94721: GREATER
94722: IFFALSE 94734
// k := 5 else
94724: LD_ADDR_VAR 0 2
94728: PUSH
94729: LD_INT 5
94731: ST_TO_ADDR
94732: GO 94744
// k := tmp ;
94734: LD_ADDR_VAR 0 2
94738: PUSH
94739: LD_VAR 0 3
94743: ST_TO_ADDR
// for i := 1 to k do
94744: LD_ADDR_VAR 0 1
94748: PUSH
94749: DOUBLE
94750: LD_INT 1
94752: DEC
94753: ST_TO_ADDR
94754: LD_VAR 0 2
94758: PUSH
94759: FOR_TO
94760: IFFALSE 94859
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
94762: LD_VAR 0 3
94766: PUSH
94767: LD_VAR 0 1
94771: ARRAY
94772: PPUSH
94773: LD_VAR 0 1
94777: PUSH
94778: LD_INT 4
94780: MOD
94781: PUSH
94782: LD_INT 1
94784: PLUS
94785: PPUSH
94786: CALL_OW 259
94790: PUSH
94791: LD_INT 10
94793: LESS
94794: IFFALSE 94857
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
94796: LD_VAR 0 3
94800: PUSH
94801: LD_VAR 0 1
94805: ARRAY
94806: PPUSH
94807: LD_VAR 0 1
94811: PUSH
94812: LD_INT 4
94814: MOD
94815: PUSH
94816: LD_INT 1
94818: PLUS
94819: PPUSH
94820: LD_VAR 0 3
94824: PUSH
94825: LD_VAR 0 1
94829: ARRAY
94830: PPUSH
94831: LD_VAR 0 1
94835: PUSH
94836: LD_INT 4
94838: MOD
94839: PUSH
94840: LD_INT 1
94842: PLUS
94843: PPUSH
94844: CALL_OW 259
94848: PUSH
94849: LD_INT 1
94851: PLUS
94852: PPUSH
94853: CALL_OW 237
94857: GO 94759
94859: POP
94860: POP
// end ;
94861: PPOPN 3
94863: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
94864: LD_EXP 94
94868: PUSH
94869: LD_EXP 102
94873: AND
94874: IFFALSE 94894
94876: GO 94878
94878: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
94879: LD_INT 4
94881: PPUSH
94882: LD_OWVAR 2
94886: PPUSH
94887: LD_INT 0
94889: PPUSH
94890: CALL_OW 324
94894: END
// every 0 0$1 trigger StreamModeActive and sShovel do
94895: LD_EXP 94
94899: PUSH
94900: LD_EXP 131
94904: AND
94905: IFFALSE 94925
94907: GO 94909
94909: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
94910: LD_INT 19
94912: PPUSH
94913: LD_OWVAR 2
94917: PPUSH
94918: LD_INT 0
94920: PPUSH
94921: CALL_OW 324
94925: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
94926: LD_EXP 94
94930: PUSH
94931: LD_EXP 103
94935: AND
94936: IFFALSE 95038
94938: GO 94940
94940: DISABLE
94941: LD_INT 0
94943: PPUSH
94944: PPUSH
// begin enable ;
94945: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
94946: LD_ADDR_VAR 0 2
94950: PUSH
94951: LD_INT 22
94953: PUSH
94954: LD_OWVAR 2
94958: PUSH
94959: EMPTY
94960: LIST
94961: LIST
94962: PUSH
94963: LD_INT 2
94965: PUSH
94966: LD_INT 34
94968: PUSH
94969: LD_INT 11
94971: PUSH
94972: EMPTY
94973: LIST
94974: LIST
94975: PUSH
94976: LD_INT 34
94978: PUSH
94979: LD_INT 30
94981: PUSH
94982: EMPTY
94983: LIST
94984: LIST
94985: PUSH
94986: EMPTY
94987: LIST
94988: LIST
94989: LIST
94990: PUSH
94991: EMPTY
94992: LIST
94993: LIST
94994: PPUSH
94995: CALL_OW 69
94999: ST_TO_ADDR
// if not tmp then
95000: LD_VAR 0 2
95004: NOT
95005: IFFALSE 95009
// exit ;
95007: GO 95038
// for i in tmp do
95009: LD_ADDR_VAR 0 1
95013: PUSH
95014: LD_VAR 0 2
95018: PUSH
95019: FOR_IN
95020: IFFALSE 95036
// begin SetLives ( i , 0 ) ;
95022: LD_VAR 0 1
95026: PPUSH
95027: LD_INT 0
95029: PPUSH
95030: CALL_OW 234
// end ;
95034: GO 95019
95036: POP
95037: POP
// end ;
95038: PPOPN 2
95040: END
// every 0 0$1 trigger StreamModeActive and sBunker do
95041: LD_EXP 94
95045: PUSH
95046: LD_EXP 104
95050: AND
95051: IFFALSE 95071
95053: GO 95055
95055: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
95056: LD_INT 32
95058: PPUSH
95059: LD_OWVAR 2
95063: PPUSH
95064: LD_INT 0
95066: PPUSH
95067: CALL_OW 324
95071: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
95072: LD_EXP 94
95076: PUSH
95077: LD_EXP 105
95081: AND
95082: IFFALSE 95263
95084: GO 95086
95086: DISABLE
95087: LD_INT 0
95089: PPUSH
95090: PPUSH
95091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
95092: LD_ADDR_VAR 0 2
95096: PUSH
95097: LD_INT 22
95099: PUSH
95100: LD_OWVAR 2
95104: PUSH
95105: EMPTY
95106: LIST
95107: LIST
95108: PUSH
95109: LD_INT 33
95111: PUSH
95112: LD_INT 3
95114: PUSH
95115: EMPTY
95116: LIST
95117: LIST
95118: PUSH
95119: EMPTY
95120: LIST
95121: LIST
95122: PPUSH
95123: CALL_OW 69
95127: ST_TO_ADDR
// if not tmp then
95128: LD_VAR 0 2
95132: NOT
95133: IFFALSE 95137
// exit ;
95135: GO 95263
// side := 0 ;
95137: LD_ADDR_VAR 0 3
95141: PUSH
95142: LD_INT 0
95144: ST_TO_ADDR
// for i := 1 to 8 do
95145: LD_ADDR_VAR 0 1
95149: PUSH
95150: DOUBLE
95151: LD_INT 1
95153: DEC
95154: ST_TO_ADDR
95155: LD_INT 8
95157: PUSH
95158: FOR_TO
95159: IFFALSE 95207
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
95161: LD_OWVAR 2
95165: PUSH
95166: LD_VAR 0 1
95170: NONEQUAL
95171: PUSH
95172: LD_OWVAR 2
95176: PPUSH
95177: LD_VAR 0 1
95181: PPUSH
95182: CALL_OW 81
95186: PUSH
95187: LD_INT 2
95189: EQUAL
95190: AND
95191: IFFALSE 95205
// begin side := i ;
95193: LD_ADDR_VAR 0 3
95197: PUSH
95198: LD_VAR 0 1
95202: ST_TO_ADDR
// break ;
95203: GO 95207
// end ;
95205: GO 95158
95207: POP
95208: POP
// if not side then
95209: LD_VAR 0 3
95213: NOT
95214: IFFALSE 95218
// exit ;
95216: GO 95263
// for i := 1 to tmp do
95218: LD_ADDR_VAR 0 1
95222: PUSH
95223: DOUBLE
95224: LD_INT 1
95226: DEC
95227: ST_TO_ADDR
95228: LD_VAR 0 2
95232: PUSH
95233: FOR_TO
95234: IFFALSE 95261
// if Prob ( 60 ) then
95236: LD_INT 60
95238: PPUSH
95239: CALL_OW 13
95243: IFFALSE 95259
// SetSide ( i , side ) ;
95245: LD_VAR 0 1
95249: PPUSH
95250: LD_VAR 0 3
95254: PPUSH
95255: CALL_OW 235
95259: GO 95233
95261: POP
95262: POP
// end ;
95263: PPOPN 3
95265: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
95266: LD_EXP 94
95270: PUSH
95271: LD_EXP 107
95275: AND
95276: IFFALSE 95395
95278: GO 95280
95280: DISABLE
95281: LD_INT 0
95283: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
95284: LD_ADDR_VAR 0 1
95288: PUSH
95289: LD_INT 22
95291: PUSH
95292: LD_OWVAR 2
95296: PUSH
95297: EMPTY
95298: LIST
95299: LIST
95300: PUSH
95301: LD_INT 21
95303: PUSH
95304: LD_INT 1
95306: PUSH
95307: EMPTY
95308: LIST
95309: LIST
95310: PUSH
95311: LD_INT 3
95313: PUSH
95314: LD_INT 23
95316: PUSH
95317: LD_INT 0
95319: PUSH
95320: EMPTY
95321: LIST
95322: LIST
95323: PUSH
95324: EMPTY
95325: LIST
95326: LIST
95327: PUSH
95328: EMPTY
95329: LIST
95330: LIST
95331: LIST
95332: PPUSH
95333: CALL_OW 69
95337: PUSH
95338: FOR_IN
95339: IFFALSE 95393
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
95341: LD_VAR 0 1
95345: PPUSH
95346: CALL_OW 257
95350: PUSH
95351: LD_INT 1
95353: PUSH
95354: LD_INT 2
95356: PUSH
95357: LD_INT 3
95359: PUSH
95360: LD_INT 4
95362: PUSH
95363: EMPTY
95364: LIST
95365: LIST
95366: LIST
95367: LIST
95368: IN
95369: IFFALSE 95391
// SetClass ( un , rand ( 1 , 4 ) ) ;
95371: LD_VAR 0 1
95375: PPUSH
95376: LD_INT 1
95378: PPUSH
95379: LD_INT 4
95381: PPUSH
95382: CALL_OW 12
95386: PPUSH
95387: CALL_OW 336
95391: GO 95338
95393: POP
95394: POP
// end ;
95395: PPOPN 1
95397: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
95398: LD_EXP 94
95402: PUSH
95403: LD_EXP 106
95407: AND
95408: IFFALSE 95487
95410: GO 95412
95412: DISABLE
95413: LD_INT 0
95415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
95416: LD_ADDR_VAR 0 1
95420: PUSH
95421: LD_INT 22
95423: PUSH
95424: LD_OWVAR 2
95428: PUSH
95429: EMPTY
95430: LIST
95431: LIST
95432: PUSH
95433: LD_INT 21
95435: PUSH
95436: LD_INT 3
95438: PUSH
95439: EMPTY
95440: LIST
95441: LIST
95442: PUSH
95443: EMPTY
95444: LIST
95445: LIST
95446: PPUSH
95447: CALL_OW 69
95451: ST_TO_ADDR
// if not tmp then
95452: LD_VAR 0 1
95456: NOT
95457: IFFALSE 95461
// exit ;
95459: GO 95487
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
95461: LD_VAR 0 1
95465: PUSH
95466: LD_INT 1
95468: PPUSH
95469: LD_VAR 0 1
95473: PPUSH
95474: CALL_OW 12
95478: ARRAY
95479: PPUSH
95480: LD_INT 100
95482: PPUSH
95483: CALL_OW 234
// end ;
95487: PPOPN 1
95489: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
95490: LD_EXP 94
95494: PUSH
95495: LD_EXP 108
95499: AND
95500: IFFALSE 95598
95502: GO 95504
95504: DISABLE
95505: LD_INT 0
95507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
95508: LD_ADDR_VAR 0 1
95512: PUSH
95513: LD_INT 22
95515: PUSH
95516: LD_OWVAR 2
95520: PUSH
95521: EMPTY
95522: LIST
95523: LIST
95524: PUSH
95525: LD_INT 21
95527: PUSH
95528: LD_INT 1
95530: PUSH
95531: EMPTY
95532: LIST
95533: LIST
95534: PUSH
95535: EMPTY
95536: LIST
95537: LIST
95538: PPUSH
95539: CALL_OW 69
95543: ST_TO_ADDR
// if not tmp then
95544: LD_VAR 0 1
95548: NOT
95549: IFFALSE 95553
// exit ;
95551: GO 95598
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
95553: LD_VAR 0 1
95557: PUSH
95558: LD_INT 1
95560: PPUSH
95561: LD_VAR 0 1
95565: PPUSH
95566: CALL_OW 12
95570: ARRAY
95571: PPUSH
95572: LD_INT 1
95574: PPUSH
95575: LD_INT 4
95577: PPUSH
95578: CALL_OW 12
95582: PPUSH
95583: LD_INT 3000
95585: PPUSH
95586: LD_INT 9000
95588: PPUSH
95589: CALL_OW 12
95593: PPUSH
95594: CALL_OW 492
// end ;
95598: PPOPN 1
95600: END
// every 0 0$1 trigger StreamModeActive and sDepot do
95601: LD_EXP 94
95605: PUSH
95606: LD_EXP 109
95610: AND
95611: IFFALSE 95631
95613: GO 95615
95615: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
95616: LD_INT 1
95618: PPUSH
95619: LD_OWVAR 2
95623: PPUSH
95624: LD_INT 0
95626: PPUSH
95627: CALL_OW 324
95631: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
95632: LD_EXP 94
95636: PUSH
95637: LD_EXP 110
95641: AND
95642: IFFALSE 95725
95644: GO 95646
95646: DISABLE
95647: LD_INT 0
95649: PPUSH
95650: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
95651: LD_ADDR_VAR 0 2
95655: PUSH
95656: LD_INT 22
95658: PUSH
95659: LD_OWVAR 2
95663: PUSH
95664: EMPTY
95665: LIST
95666: LIST
95667: PUSH
95668: LD_INT 21
95670: PUSH
95671: LD_INT 3
95673: PUSH
95674: EMPTY
95675: LIST
95676: LIST
95677: PUSH
95678: EMPTY
95679: LIST
95680: LIST
95681: PPUSH
95682: CALL_OW 69
95686: ST_TO_ADDR
// if not tmp then
95687: LD_VAR 0 2
95691: NOT
95692: IFFALSE 95696
// exit ;
95694: GO 95725
// for i in tmp do
95696: LD_ADDR_VAR 0 1
95700: PUSH
95701: LD_VAR 0 2
95705: PUSH
95706: FOR_IN
95707: IFFALSE 95723
// SetBLevel ( i , 10 ) ;
95709: LD_VAR 0 1
95713: PPUSH
95714: LD_INT 10
95716: PPUSH
95717: CALL_OW 241
95721: GO 95706
95723: POP
95724: POP
// end ;
95725: PPOPN 2
95727: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
95728: LD_EXP 94
95732: PUSH
95733: LD_EXP 111
95737: AND
95738: IFFALSE 95849
95740: GO 95742
95742: DISABLE
95743: LD_INT 0
95745: PPUSH
95746: PPUSH
95747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
95748: LD_ADDR_VAR 0 3
95752: PUSH
95753: LD_INT 22
95755: PUSH
95756: LD_OWVAR 2
95760: PUSH
95761: EMPTY
95762: LIST
95763: LIST
95764: PUSH
95765: LD_INT 25
95767: PUSH
95768: LD_INT 1
95770: PUSH
95771: EMPTY
95772: LIST
95773: LIST
95774: PUSH
95775: EMPTY
95776: LIST
95777: LIST
95778: PPUSH
95779: CALL_OW 69
95783: ST_TO_ADDR
// if not tmp then
95784: LD_VAR 0 3
95788: NOT
95789: IFFALSE 95793
// exit ;
95791: GO 95849
// un := tmp [ rand ( 1 , tmp ) ] ;
95793: LD_ADDR_VAR 0 2
95797: PUSH
95798: LD_VAR 0 3
95802: PUSH
95803: LD_INT 1
95805: PPUSH
95806: LD_VAR 0 3
95810: PPUSH
95811: CALL_OW 12
95815: ARRAY
95816: ST_TO_ADDR
// if Crawls ( un ) then
95817: LD_VAR 0 2
95821: PPUSH
95822: CALL_OW 318
95826: IFFALSE 95837
// ComWalk ( un ) ;
95828: LD_VAR 0 2
95832: PPUSH
95833: CALL_OW 138
// SetClass ( un , class_sniper ) ;
95837: LD_VAR 0 2
95841: PPUSH
95842: LD_INT 5
95844: PPUSH
95845: CALL_OW 336
// end ;
95849: PPOPN 3
95851: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
95852: LD_EXP 94
95856: PUSH
95857: LD_EXP 112
95861: AND
95862: PUSH
95863: LD_OWVAR 67
95867: PUSH
95868: LD_INT 3
95870: LESS
95871: AND
95872: IFFALSE 95891
95874: GO 95876
95876: DISABLE
// Difficulty := Difficulty + 1 ;
95877: LD_ADDR_OWVAR 67
95881: PUSH
95882: LD_OWVAR 67
95886: PUSH
95887: LD_INT 1
95889: PLUS
95890: ST_TO_ADDR
95891: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
95892: LD_EXP 94
95896: PUSH
95897: LD_EXP 113
95901: AND
95902: IFFALSE 96005
95904: GO 95906
95906: DISABLE
95907: LD_INT 0
95909: PPUSH
// begin for i := 1 to 5 do
95910: LD_ADDR_VAR 0 1
95914: PUSH
95915: DOUBLE
95916: LD_INT 1
95918: DEC
95919: ST_TO_ADDR
95920: LD_INT 5
95922: PUSH
95923: FOR_TO
95924: IFFALSE 96003
// begin uc_nation := nation_nature ;
95926: LD_ADDR_OWVAR 21
95930: PUSH
95931: LD_INT 0
95933: ST_TO_ADDR
// uc_side := 0 ;
95934: LD_ADDR_OWVAR 20
95938: PUSH
95939: LD_INT 0
95941: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
95942: LD_ADDR_OWVAR 29
95946: PUSH
95947: LD_INT 12
95949: PUSH
95950: LD_INT 12
95952: PUSH
95953: EMPTY
95954: LIST
95955: LIST
95956: ST_TO_ADDR
// hc_agressivity := 20 ;
95957: LD_ADDR_OWVAR 35
95961: PUSH
95962: LD_INT 20
95964: ST_TO_ADDR
// hc_class := class_tiger ;
95965: LD_ADDR_OWVAR 28
95969: PUSH
95970: LD_INT 14
95972: ST_TO_ADDR
// hc_gallery :=  ;
95973: LD_ADDR_OWVAR 33
95977: PUSH
95978: LD_STRING 
95980: ST_TO_ADDR
// hc_name :=  ;
95981: LD_ADDR_OWVAR 26
95985: PUSH
95986: LD_STRING 
95988: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
95989: CALL_OW 44
95993: PPUSH
95994: LD_INT 0
95996: PPUSH
95997: CALL_OW 51
// end ;
96001: GO 95923
96003: POP
96004: POP
// end ;
96005: PPOPN 1
96007: END
// every 0 0$1 trigger StreamModeActive and sBomb do
96008: LD_EXP 94
96012: PUSH
96013: LD_EXP 114
96017: AND
96018: IFFALSE 96027
96020: GO 96022
96022: DISABLE
// StreamSibBomb ;
96023: CALL 96028 0 0
96027: END
// export function StreamSibBomb ; var i , x , y ; begin
96028: LD_INT 0
96030: PPUSH
96031: PPUSH
96032: PPUSH
96033: PPUSH
// result := false ;
96034: LD_ADDR_VAR 0 1
96038: PUSH
96039: LD_INT 0
96041: ST_TO_ADDR
// for i := 1 to 16 do
96042: LD_ADDR_VAR 0 2
96046: PUSH
96047: DOUBLE
96048: LD_INT 1
96050: DEC
96051: ST_TO_ADDR
96052: LD_INT 16
96054: PUSH
96055: FOR_TO
96056: IFFALSE 96255
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
96058: LD_ADDR_VAR 0 3
96062: PUSH
96063: LD_INT 10
96065: PUSH
96066: LD_INT 20
96068: PUSH
96069: LD_INT 30
96071: PUSH
96072: LD_INT 40
96074: PUSH
96075: LD_INT 50
96077: PUSH
96078: LD_INT 60
96080: PUSH
96081: LD_INT 70
96083: PUSH
96084: LD_INT 80
96086: PUSH
96087: LD_INT 90
96089: PUSH
96090: LD_INT 100
96092: PUSH
96093: LD_INT 110
96095: PUSH
96096: LD_INT 120
96098: PUSH
96099: LD_INT 130
96101: PUSH
96102: LD_INT 140
96104: PUSH
96105: LD_INT 150
96107: PUSH
96108: EMPTY
96109: LIST
96110: LIST
96111: LIST
96112: LIST
96113: LIST
96114: LIST
96115: LIST
96116: LIST
96117: LIST
96118: LIST
96119: LIST
96120: LIST
96121: LIST
96122: LIST
96123: LIST
96124: PUSH
96125: LD_INT 1
96127: PPUSH
96128: LD_INT 15
96130: PPUSH
96131: CALL_OW 12
96135: ARRAY
96136: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
96137: LD_ADDR_VAR 0 4
96141: PUSH
96142: LD_INT 10
96144: PUSH
96145: LD_INT 20
96147: PUSH
96148: LD_INT 30
96150: PUSH
96151: LD_INT 40
96153: PUSH
96154: LD_INT 50
96156: PUSH
96157: LD_INT 60
96159: PUSH
96160: LD_INT 70
96162: PUSH
96163: LD_INT 80
96165: PUSH
96166: LD_INT 90
96168: PUSH
96169: LD_INT 100
96171: PUSH
96172: LD_INT 110
96174: PUSH
96175: LD_INT 120
96177: PUSH
96178: LD_INT 130
96180: PUSH
96181: LD_INT 140
96183: PUSH
96184: LD_INT 150
96186: PUSH
96187: EMPTY
96188: LIST
96189: LIST
96190: LIST
96191: LIST
96192: LIST
96193: LIST
96194: LIST
96195: LIST
96196: LIST
96197: LIST
96198: LIST
96199: LIST
96200: LIST
96201: LIST
96202: LIST
96203: PUSH
96204: LD_INT 1
96206: PPUSH
96207: LD_INT 15
96209: PPUSH
96210: CALL_OW 12
96214: ARRAY
96215: ST_TO_ADDR
// if ValidHex ( x , y ) then
96216: LD_VAR 0 3
96220: PPUSH
96221: LD_VAR 0 4
96225: PPUSH
96226: CALL_OW 488
96230: IFFALSE 96253
// begin result := [ x , y ] ;
96232: LD_ADDR_VAR 0 1
96236: PUSH
96237: LD_VAR 0 3
96241: PUSH
96242: LD_VAR 0 4
96246: PUSH
96247: EMPTY
96248: LIST
96249: LIST
96250: ST_TO_ADDR
// break ;
96251: GO 96255
// end ; end ;
96253: GO 96055
96255: POP
96256: POP
// if result then
96257: LD_VAR 0 1
96261: IFFALSE 96321
// begin ToLua ( playSibBomb() ) ;
96263: LD_STRING playSibBomb()
96265: PPUSH
96266: CALL_OW 559
// wait ( 0 0$14 ) ;
96270: LD_INT 490
96272: PPUSH
96273: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
96277: LD_VAR 0 1
96281: PUSH
96282: LD_INT 1
96284: ARRAY
96285: PPUSH
96286: LD_VAR 0 1
96290: PUSH
96291: LD_INT 2
96293: ARRAY
96294: PPUSH
96295: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
96299: LD_VAR 0 1
96303: PUSH
96304: LD_INT 1
96306: ARRAY
96307: PPUSH
96308: LD_VAR 0 1
96312: PUSH
96313: LD_INT 2
96315: ARRAY
96316: PPUSH
96317: CALL_OW 429
// end ; end ;
96321: LD_VAR 0 1
96325: RET
// every 0 0$1 trigger StreamModeActive and sReset do
96326: LD_EXP 94
96330: PUSH
96331: LD_EXP 116
96335: AND
96336: IFFALSE 96348
96338: GO 96340
96340: DISABLE
// YouLost (  ) ;
96341: LD_STRING 
96343: PPUSH
96344: CALL_OW 104
96348: END
// every 0 0$1 trigger StreamModeActive and sFog do
96349: LD_EXP 94
96353: PUSH
96354: LD_EXP 115
96358: AND
96359: IFFALSE 96373
96361: GO 96363
96363: DISABLE
// FogOff ( your_side ) ;
96364: LD_OWVAR 2
96368: PPUSH
96369: CALL_OW 344
96373: END
// every 0 0$1 trigger StreamModeActive and sSun do
96374: LD_EXP 94
96378: PUSH
96379: LD_EXP 117
96383: AND
96384: IFFALSE 96412
96386: GO 96388
96388: DISABLE
// begin solar_recharge_percent := 0 ;
96389: LD_ADDR_OWVAR 79
96393: PUSH
96394: LD_INT 0
96396: ST_TO_ADDR
// wait ( 5 5$00 ) ;
96397: LD_INT 10500
96399: PPUSH
96400: CALL_OW 67
// solar_recharge_percent := 100 ;
96404: LD_ADDR_OWVAR 79
96408: PUSH
96409: LD_INT 100
96411: ST_TO_ADDR
// end ;
96412: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
96413: LD_EXP 94
96417: PUSH
96418: LD_EXP 118
96422: AND
96423: IFFALSE 96662
96425: GO 96427
96427: DISABLE
96428: LD_INT 0
96430: PPUSH
96431: PPUSH
96432: PPUSH
// begin tmp := [ ] ;
96433: LD_ADDR_VAR 0 3
96437: PUSH
96438: EMPTY
96439: ST_TO_ADDR
// for i := 1 to 6 do
96440: LD_ADDR_VAR 0 1
96444: PUSH
96445: DOUBLE
96446: LD_INT 1
96448: DEC
96449: ST_TO_ADDR
96450: LD_INT 6
96452: PUSH
96453: FOR_TO
96454: IFFALSE 96559
// begin uc_nation := nation_nature ;
96456: LD_ADDR_OWVAR 21
96460: PUSH
96461: LD_INT 0
96463: ST_TO_ADDR
// uc_side := 0 ;
96464: LD_ADDR_OWVAR 20
96468: PUSH
96469: LD_INT 0
96471: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
96472: LD_ADDR_OWVAR 29
96476: PUSH
96477: LD_INT 12
96479: PUSH
96480: LD_INT 12
96482: PUSH
96483: EMPTY
96484: LIST
96485: LIST
96486: ST_TO_ADDR
// hc_agressivity := 20 ;
96487: LD_ADDR_OWVAR 35
96491: PUSH
96492: LD_INT 20
96494: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
96495: LD_ADDR_OWVAR 28
96499: PUSH
96500: LD_INT 17
96502: ST_TO_ADDR
// hc_gallery :=  ;
96503: LD_ADDR_OWVAR 33
96507: PUSH
96508: LD_STRING 
96510: ST_TO_ADDR
// hc_name :=  ;
96511: LD_ADDR_OWVAR 26
96515: PUSH
96516: LD_STRING 
96518: ST_TO_ADDR
// un := CreateHuman ;
96519: LD_ADDR_VAR 0 2
96523: PUSH
96524: CALL_OW 44
96528: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
96529: LD_VAR 0 2
96533: PPUSH
96534: LD_INT 1
96536: PPUSH
96537: CALL_OW 51
// tmp := tmp ^ un ;
96541: LD_ADDR_VAR 0 3
96545: PUSH
96546: LD_VAR 0 3
96550: PUSH
96551: LD_VAR 0 2
96555: ADD
96556: ST_TO_ADDR
// end ;
96557: GO 96453
96559: POP
96560: POP
// repeat wait ( 0 0$1 ) ;
96561: LD_INT 35
96563: PPUSH
96564: CALL_OW 67
// for un in tmp do
96568: LD_ADDR_VAR 0 2
96572: PUSH
96573: LD_VAR 0 3
96577: PUSH
96578: FOR_IN
96579: IFFALSE 96653
// begin if IsDead ( un ) then
96581: LD_VAR 0 2
96585: PPUSH
96586: CALL_OW 301
96590: IFFALSE 96610
// begin tmp := tmp diff un ;
96592: LD_ADDR_VAR 0 3
96596: PUSH
96597: LD_VAR 0 3
96601: PUSH
96602: LD_VAR 0 2
96606: DIFF
96607: ST_TO_ADDR
// continue ;
96608: GO 96578
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
96610: LD_VAR 0 2
96614: PPUSH
96615: LD_INT 3
96617: PUSH
96618: LD_INT 22
96620: PUSH
96621: LD_INT 0
96623: PUSH
96624: EMPTY
96625: LIST
96626: LIST
96627: PUSH
96628: EMPTY
96629: LIST
96630: LIST
96631: PPUSH
96632: CALL_OW 69
96636: PPUSH
96637: LD_VAR 0 2
96641: PPUSH
96642: CALL_OW 74
96646: PPUSH
96647: CALL_OW 115
// end ;
96651: GO 96578
96653: POP
96654: POP
// until not tmp ;
96655: LD_VAR 0 3
96659: NOT
96660: IFFALSE 96561
// end ;
96662: PPOPN 3
96664: END
// every 0 0$1 trigger StreamModeActive and sTroll do
96665: LD_EXP 94
96669: PUSH
96670: LD_EXP 119
96674: AND
96675: IFFALSE 96729
96677: GO 96679
96679: DISABLE
// begin ToLua ( displayTroll(); ) ;
96680: LD_STRING displayTroll();
96682: PPUSH
96683: CALL_OW 559
// wait ( 3 3$00 ) ;
96687: LD_INT 6300
96689: PPUSH
96690: CALL_OW 67
// ToLua ( hideTroll(); ) ;
96694: LD_STRING hideTroll();
96696: PPUSH
96697: CALL_OW 559
// wait ( 1 1$00 ) ;
96701: LD_INT 2100
96703: PPUSH
96704: CALL_OW 67
// ToLua ( displayTroll(); ) ;
96708: LD_STRING displayTroll();
96710: PPUSH
96711: CALL_OW 559
// wait ( 1 1$00 ) ;
96715: LD_INT 2100
96717: PPUSH
96718: CALL_OW 67
// ToLua ( hideTroll(); ) ;
96722: LD_STRING hideTroll();
96724: PPUSH
96725: CALL_OW 559
// end ;
96729: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
96730: LD_EXP 94
96734: PUSH
96735: LD_EXP 120
96739: AND
96740: IFFALSE 96803
96742: GO 96744
96744: DISABLE
96745: LD_INT 0
96747: PPUSH
// begin p := 0 ;
96748: LD_ADDR_VAR 0 1
96752: PUSH
96753: LD_INT 0
96755: ST_TO_ADDR
// repeat game_speed := 1 ;
96756: LD_ADDR_OWVAR 65
96760: PUSH
96761: LD_INT 1
96763: ST_TO_ADDR
// wait ( 0 0$1 ) ;
96764: LD_INT 35
96766: PPUSH
96767: CALL_OW 67
// p := p + 1 ;
96771: LD_ADDR_VAR 0 1
96775: PUSH
96776: LD_VAR 0 1
96780: PUSH
96781: LD_INT 1
96783: PLUS
96784: ST_TO_ADDR
// until p >= 60 ;
96785: LD_VAR 0 1
96789: PUSH
96790: LD_INT 60
96792: GREATEREQUAL
96793: IFFALSE 96756
// game_speed := 4 ;
96795: LD_ADDR_OWVAR 65
96799: PUSH
96800: LD_INT 4
96802: ST_TO_ADDR
// end ;
96803: PPOPN 1
96805: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
96806: LD_EXP 94
96810: PUSH
96811: LD_EXP 121
96815: AND
96816: IFFALSE 96962
96818: GO 96820
96820: DISABLE
96821: LD_INT 0
96823: PPUSH
96824: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
96825: LD_ADDR_VAR 0 1
96829: PUSH
96830: LD_INT 22
96832: PUSH
96833: LD_OWVAR 2
96837: PUSH
96838: EMPTY
96839: LIST
96840: LIST
96841: PUSH
96842: LD_INT 2
96844: PUSH
96845: LD_INT 30
96847: PUSH
96848: LD_INT 0
96850: PUSH
96851: EMPTY
96852: LIST
96853: LIST
96854: PUSH
96855: LD_INT 30
96857: PUSH
96858: LD_INT 1
96860: PUSH
96861: EMPTY
96862: LIST
96863: LIST
96864: PUSH
96865: EMPTY
96866: LIST
96867: LIST
96868: LIST
96869: PUSH
96870: EMPTY
96871: LIST
96872: LIST
96873: PPUSH
96874: CALL_OW 69
96878: ST_TO_ADDR
// if not depot then
96879: LD_VAR 0 1
96883: NOT
96884: IFFALSE 96888
// exit ;
96886: GO 96962
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
96888: LD_ADDR_VAR 0 2
96892: PUSH
96893: LD_VAR 0 1
96897: PUSH
96898: LD_INT 1
96900: PPUSH
96901: LD_VAR 0 1
96905: PPUSH
96906: CALL_OW 12
96910: ARRAY
96911: PPUSH
96912: CALL_OW 274
96916: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
96917: LD_VAR 0 2
96921: PPUSH
96922: LD_INT 1
96924: PPUSH
96925: LD_INT 0
96927: PPUSH
96928: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
96932: LD_VAR 0 2
96936: PPUSH
96937: LD_INT 2
96939: PPUSH
96940: LD_INT 0
96942: PPUSH
96943: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
96947: LD_VAR 0 2
96951: PPUSH
96952: LD_INT 3
96954: PPUSH
96955: LD_INT 0
96957: PPUSH
96958: CALL_OW 277
// end ;
96962: PPOPN 2
96964: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
96965: LD_EXP 94
96969: PUSH
96970: LD_EXP 122
96974: AND
96975: IFFALSE 97072
96977: GO 96979
96979: DISABLE
96980: LD_INT 0
96982: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
96983: LD_ADDR_VAR 0 1
96987: PUSH
96988: LD_INT 22
96990: PUSH
96991: LD_OWVAR 2
96995: PUSH
96996: EMPTY
96997: LIST
96998: LIST
96999: PUSH
97000: LD_INT 21
97002: PUSH
97003: LD_INT 1
97005: PUSH
97006: EMPTY
97007: LIST
97008: LIST
97009: PUSH
97010: LD_INT 3
97012: PUSH
97013: LD_INT 23
97015: PUSH
97016: LD_INT 0
97018: PUSH
97019: EMPTY
97020: LIST
97021: LIST
97022: PUSH
97023: EMPTY
97024: LIST
97025: LIST
97026: PUSH
97027: EMPTY
97028: LIST
97029: LIST
97030: LIST
97031: PPUSH
97032: CALL_OW 69
97036: ST_TO_ADDR
// if not tmp then
97037: LD_VAR 0 1
97041: NOT
97042: IFFALSE 97046
// exit ;
97044: GO 97072
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
97046: LD_VAR 0 1
97050: PUSH
97051: LD_INT 1
97053: PPUSH
97054: LD_VAR 0 1
97058: PPUSH
97059: CALL_OW 12
97063: ARRAY
97064: PPUSH
97065: LD_INT 200
97067: PPUSH
97068: CALL_OW 234
// end ;
97072: PPOPN 1
97074: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
97075: LD_EXP 94
97079: PUSH
97080: LD_EXP 123
97084: AND
97085: IFFALSE 97164
97087: GO 97089
97089: DISABLE
97090: LD_INT 0
97092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
97093: LD_ADDR_VAR 0 1
97097: PUSH
97098: LD_INT 22
97100: PUSH
97101: LD_OWVAR 2
97105: PUSH
97106: EMPTY
97107: LIST
97108: LIST
97109: PUSH
97110: LD_INT 21
97112: PUSH
97113: LD_INT 2
97115: PUSH
97116: EMPTY
97117: LIST
97118: LIST
97119: PUSH
97120: EMPTY
97121: LIST
97122: LIST
97123: PPUSH
97124: CALL_OW 69
97128: ST_TO_ADDR
// if not tmp then
97129: LD_VAR 0 1
97133: NOT
97134: IFFALSE 97138
// exit ;
97136: GO 97164
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
97138: LD_VAR 0 1
97142: PUSH
97143: LD_INT 1
97145: PPUSH
97146: LD_VAR 0 1
97150: PPUSH
97151: CALL_OW 12
97155: ARRAY
97156: PPUSH
97157: LD_INT 60
97159: PPUSH
97160: CALL_OW 234
// end ;
97164: PPOPN 1
97166: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
97167: LD_EXP 94
97171: PUSH
97172: LD_EXP 124
97176: AND
97177: IFFALSE 97276
97179: GO 97181
97181: DISABLE
97182: LD_INT 0
97184: PPUSH
97185: PPUSH
// begin enable ;
97186: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
97187: LD_ADDR_VAR 0 1
97191: PUSH
97192: LD_INT 22
97194: PUSH
97195: LD_OWVAR 2
97199: PUSH
97200: EMPTY
97201: LIST
97202: LIST
97203: PUSH
97204: LD_INT 61
97206: PUSH
97207: EMPTY
97208: LIST
97209: PUSH
97210: LD_INT 33
97212: PUSH
97213: LD_INT 2
97215: PUSH
97216: EMPTY
97217: LIST
97218: LIST
97219: PUSH
97220: EMPTY
97221: LIST
97222: LIST
97223: LIST
97224: PPUSH
97225: CALL_OW 69
97229: ST_TO_ADDR
// if not tmp then
97230: LD_VAR 0 1
97234: NOT
97235: IFFALSE 97239
// exit ;
97237: GO 97276
// for i in tmp do
97239: LD_ADDR_VAR 0 2
97243: PUSH
97244: LD_VAR 0 1
97248: PUSH
97249: FOR_IN
97250: IFFALSE 97274
// if IsControledBy ( i ) then
97252: LD_VAR 0 2
97256: PPUSH
97257: CALL_OW 312
97261: IFFALSE 97272
// ComUnlink ( i ) ;
97263: LD_VAR 0 2
97267: PPUSH
97268: CALL_OW 136
97272: GO 97249
97274: POP
97275: POP
// end ;
97276: PPOPN 2
97278: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
97279: LD_EXP 94
97283: PUSH
97284: LD_EXP 125
97288: AND
97289: IFFALSE 97429
97291: GO 97293
97293: DISABLE
97294: LD_INT 0
97296: PPUSH
97297: PPUSH
// begin ToLua ( displayPowell(); ) ;
97298: LD_STRING displayPowell();
97300: PPUSH
97301: CALL_OW 559
// uc_side := 0 ;
97305: LD_ADDR_OWVAR 20
97309: PUSH
97310: LD_INT 0
97312: ST_TO_ADDR
// uc_nation := 2 ;
97313: LD_ADDR_OWVAR 21
97317: PUSH
97318: LD_INT 2
97320: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
97321: LD_ADDR_OWVAR 37
97325: PUSH
97326: LD_INT 14
97328: ST_TO_ADDR
// vc_engine := engine_siberite ;
97329: LD_ADDR_OWVAR 39
97333: PUSH
97334: LD_INT 3
97336: ST_TO_ADDR
// vc_control := control_apeman ;
97337: LD_ADDR_OWVAR 38
97341: PUSH
97342: LD_INT 5
97344: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
97345: LD_ADDR_OWVAR 40
97349: PUSH
97350: LD_INT 29
97352: ST_TO_ADDR
// un := CreateVehicle ;
97353: LD_ADDR_VAR 0 2
97357: PUSH
97358: CALL_OW 45
97362: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
97363: LD_VAR 0 2
97367: PPUSH
97368: LD_INT 1
97370: PPUSH
97371: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
97375: LD_INT 35
97377: PPUSH
97378: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
97382: LD_VAR 0 2
97386: PPUSH
97387: LD_INT 22
97389: PUSH
97390: LD_OWVAR 2
97394: PUSH
97395: EMPTY
97396: LIST
97397: LIST
97398: PPUSH
97399: CALL_OW 69
97403: PPUSH
97404: LD_VAR 0 2
97408: PPUSH
97409: CALL_OW 74
97413: PPUSH
97414: CALL_OW 115
// until IsDead ( un ) ;
97418: LD_VAR 0 2
97422: PPUSH
97423: CALL_OW 301
97427: IFFALSE 97375
// end ;
97429: PPOPN 2
97431: END
// every 0 0$1 trigger StreamModeActive and sStu do
97432: LD_EXP 94
97436: PUSH
97437: LD_EXP 133
97441: AND
97442: IFFALSE 97458
97444: GO 97446
97446: DISABLE
// begin ToLua ( displayStucuk(); ) ;
97447: LD_STRING displayStucuk();
97449: PPUSH
97450: CALL_OW 559
// ResetFog ;
97454: CALL_OW 335
// end ;
97458: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
97459: LD_EXP 94
97463: PUSH
97464: LD_EXP 126
97468: AND
97469: IFFALSE 97610
97471: GO 97473
97473: DISABLE
97474: LD_INT 0
97476: PPUSH
97477: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
97478: LD_ADDR_VAR 0 2
97482: PUSH
97483: LD_INT 22
97485: PUSH
97486: LD_OWVAR 2
97490: PUSH
97491: EMPTY
97492: LIST
97493: LIST
97494: PUSH
97495: LD_INT 21
97497: PUSH
97498: LD_INT 1
97500: PUSH
97501: EMPTY
97502: LIST
97503: LIST
97504: PUSH
97505: EMPTY
97506: LIST
97507: LIST
97508: PPUSH
97509: CALL_OW 69
97513: ST_TO_ADDR
// if not tmp then
97514: LD_VAR 0 2
97518: NOT
97519: IFFALSE 97523
// exit ;
97521: GO 97610
// un := tmp [ rand ( 1 , tmp ) ] ;
97523: LD_ADDR_VAR 0 1
97527: PUSH
97528: LD_VAR 0 2
97532: PUSH
97533: LD_INT 1
97535: PPUSH
97536: LD_VAR 0 2
97540: PPUSH
97541: CALL_OW 12
97545: ARRAY
97546: ST_TO_ADDR
// SetSide ( un , 0 ) ;
97547: LD_VAR 0 1
97551: PPUSH
97552: LD_INT 0
97554: PPUSH
97555: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
97559: LD_VAR 0 1
97563: PPUSH
97564: LD_OWVAR 3
97568: PUSH
97569: LD_VAR 0 1
97573: DIFF
97574: PPUSH
97575: LD_VAR 0 1
97579: PPUSH
97580: CALL_OW 74
97584: PPUSH
97585: CALL_OW 115
// wait ( 0 0$20 ) ;
97589: LD_INT 700
97591: PPUSH
97592: CALL_OW 67
// SetSide ( un , your_side ) ;
97596: LD_VAR 0 1
97600: PPUSH
97601: LD_OWVAR 2
97605: PPUSH
97606: CALL_OW 235
// end ;
97610: PPOPN 2
97612: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
97613: LD_EXP 94
97617: PUSH
97618: LD_EXP 127
97622: AND
97623: IFFALSE 97729
97625: GO 97627
97627: DISABLE
97628: LD_INT 0
97630: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
97631: LD_ADDR_VAR 0 1
97635: PUSH
97636: LD_INT 22
97638: PUSH
97639: LD_OWVAR 2
97643: PUSH
97644: EMPTY
97645: LIST
97646: LIST
97647: PUSH
97648: LD_INT 2
97650: PUSH
97651: LD_INT 30
97653: PUSH
97654: LD_INT 0
97656: PUSH
97657: EMPTY
97658: LIST
97659: LIST
97660: PUSH
97661: LD_INT 30
97663: PUSH
97664: LD_INT 1
97666: PUSH
97667: EMPTY
97668: LIST
97669: LIST
97670: PUSH
97671: EMPTY
97672: LIST
97673: LIST
97674: LIST
97675: PUSH
97676: EMPTY
97677: LIST
97678: LIST
97679: PPUSH
97680: CALL_OW 69
97684: ST_TO_ADDR
// if not depot then
97685: LD_VAR 0 1
97689: NOT
97690: IFFALSE 97694
// exit ;
97692: GO 97729
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
97694: LD_VAR 0 1
97698: PUSH
97699: LD_INT 1
97701: ARRAY
97702: PPUSH
97703: CALL_OW 250
97707: PPUSH
97708: LD_VAR 0 1
97712: PUSH
97713: LD_INT 1
97715: ARRAY
97716: PPUSH
97717: CALL_OW 251
97721: PPUSH
97722: LD_INT 70
97724: PPUSH
97725: CALL_OW 495
// end ;
97729: PPOPN 1
97731: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
97732: LD_EXP 94
97736: PUSH
97737: LD_EXP 128
97741: AND
97742: IFFALSE 97953
97744: GO 97746
97746: DISABLE
97747: LD_INT 0
97749: PPUSH
97750: PPUSH
97751: PPUSH
97752: PPUSH
97753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
97754: LD_ADDR_VAR 0 5
97758: PUSH
97759: LD_INT 22
97761: PUSH
97762: LD_OWVAR 2
97766: PUSH
97767: EMPTY
97768: LIST
97769: LIST
97770: PUSH
97771: LD_INT 21
97773: PUSH
97774: LD_INT 1
97776: PUSH
97777: EMPTY
97778: LIST
97779: LIST
97780: PUSH
97781: EMPTY
97782: LIST
97783: LIST
97784: PPUSH
97785: CALL_OW 69
97789: ST_TO_ADDR
// if not tmp then
97790: LD_VAR 0 5
97794: NOT
97795: IFFALSE 97799
// exit ;
97797: GO 97953
// for i in tmp do
97799: LD_ADDR_VAR 0 1
97803: PUSH
97804: LD_VAR 0 5
97808: PUSH
97809: FOR_IN
97810: IFFALSE 97951
// begin d := rand ( 0 , 5 ) ;
97812: LD_ADDR_VAR 0 4
97816: PUSH
97817: LD_INT 0
97819: PPUSH
97820: LD_INT 5
97822: PPUSH
97823: CALL_OW 12
97827: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
97828: LD_ADDR_VAR 0 2
97832: PUSH
97833: LD_VAR 0 1
97837: PPUSH
97838: CALL_OW 250
97842: PPUSH
97843: LD_VAR 0 4
97847: PPUSH
97848: LD_INT 3
97850: PPUSH
97851: LD_INT 12
97853: PPUSH
97854: CALL_OW 12
97858: PPUSH
97859: CALL_OW 272
97863: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
97864: LD_ADDR_VAR 0 3
97868: PUSH
97869: LD_VAR 0 1
97873: PPUSH
97874: CALL_OW 251
97878: PPUSH
97879: LD_VAR 0 4
97883: PPUSH
97884: LD_INT 3
97886: PPUSH
97887: LD_INT 12
97889: PPUSH
97890: CALL_OW 12
97894: PPUSH
97895: CALL_OW 273
97899: ST_TO_ADDR
// if ValidHex ( x , y ) then
97900: LD_VAR 0 2
97904: PPUSH
97905: LD_VAR 0 3
97909: PPUSH
97910: CALL_OW 488
97914: IFFALSE 97949
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
97916: LD_VAR 0 1
97920: PPUSH
97921: LD_VAR 0 2
97925: PPUSH
97926: LD_VAR 0 3
97930: PPUSH
97931: LD_INT 3
97933: PPUSH
97934: LD_INT 6
97936: PPUSH
97937: CALL_OW 12
97941: PPUSH
97942: LD_INT 1
97944: PPUSH
97945: CALL_OW 483
// end ;
97949: GO 97809
97951: POP
97952: POP
// end ;
97953: PPOPN 5
97955: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
97956: LD_EXP 94
97960: PUSH
97961: LD_EXP 129
97965: AND
97966: IFFALSE 98060
97968: GO 97970
97970: DISABLE
97971: LD_INT 0
97973: PPUSH
97974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
97975: LD_ADDR_VAR 0 2
97979: PUSH
97980: LD_INT 22
97982: PUSH
97983: LD_OWVAR 2
97987: PUSH
97988: EMPTY
97989: LIST
97990: LIST
97991: PUSH
97992: LD_INT 32
97994: PUSH
97995: LD_INT 1
97997: PUSH
97998: EMPTY
97999: LIST
98000: LIST
98001: PUSH
98002: LD_INT 21
98004: PUSH
98005: LD_INT 2
98007: PUSH
98008: EMPTY
98009: LIST
98010: LIST
98011: PUSH
98012: EMPTY
98013: LIST
98014: LIST
98015: LIST
98016: PPUSH
98017: CALL_OW 69
98021: ST_TO_ADDR
// if not tmp then
98022: LD_VAR 0 2
98026: NOT
98027: IFFALSE 98031
// exit ;
98029: GO 98060
// for i in tmp do
98031: LD_ADDR_VAR 0 1
98035: PUSH
98036: LD_VAR 0 2
98040: PUSH
98041: FOR_IN
98042: IFFALSE 98058
// SetFuel ( i , 0 ) ;
98044: LD_VAR 0 1
98048: PPUSH
98049: LD_INT 0
98051: PPUSH
98052: CALL_OW 240
98056: GO 98041
98058: POP
98059: POP
// end ;
98060: PPOPN 2
98062: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
98063: LD_EXP 94
98067: PUSH
98068: LD_EXP 130
98072: AND
98073: IFFALSE 98139
98075: GO 98077
98077: DISABLE
98078: LD_INT 0
98080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
98081: LD_ADDR_VAR 0 1
98085: PUSH
98086: LD_INT 22
98088: PUSH
98089: LD_OWVAR 2
98093: PUSH
98094: EMPTY
98095: LIST
98096: LIST
98097: PUSH
98098: LD_INT 30
98100: PUSH
98101: LD_INT 29
98103: PUSH
98104: EMPTY
98105: LIST
98106: LIST
98107: PUSH
98108: EMPTY
98109: LIST
98110: LIST
98111: PPUSH
98112: CALL_OW 69
98116: ST_TO_ADDR
// if not tmp then
98117: LD_VAR 0 1
98121: NOT
98122: IFFALSE 98126
// exit ;
98124: GO 98139
// DestroyUnit ( tmp [ 1 ] ) ;
98126: LD_VAR 0 1
98130: PUSH
98131: LD_INT 1
98133: ARRAY
98134: PPUSH
98135: CALL_OW 65
// end ;
98139: PPOPN 1
98141: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
98142: LD_EXP 94
98146: PUSH
98147: LD_EXP 132
98151: AND
98152: IFFALSE 98281
98154: GO 98156
98156: DISABLE
98157: LD_INT 0
98159: PPUSH
// begin uc_side := 0 ;
98160: LD_ADDR_OWVAR 20
98164: PUSH
98165: LD_INT 0
98167: ST_TO_ADDR
// uc_nation := nation_arabian ;
98168: LD_ADDR_OWVAR 21
98172: PUSH
98173: LD_INT 2
98175: ST_TO_ADDR
// hc_gallery :=  ;
98176: LD_ADDR_OWVAR 33
98180: PUSH
98181: LD_STRING 
98183: ST_TO_ADDR
// hc_name :=  ;
98184: LD_ADDR_OWVAR 26
98188: PUSH
98189: LD_STRING 
98191: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
98192: LD_INT 1
98194: PPUSH
98195: LD_INT 11
98197: PPUSH
98198: LD_INT 10
98200: PPUSH
98201: CALL_OW 380
// un := CreateHuman ;
98205: LD_ADDR_VAR 0 1
98209: PUSH
98210: CALL_OW 44
98214: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
98215: LD_VAR 0 1
98219: PPUSH
98220: LD_INT 1
98222: PPUSH
98223: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
98227: LD_INT 35
98229: PPUSH
98230: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
98234: LD_VAR 0 1
98238: PPUSH
98239: LD_INT 22
98241: PUSH
98242: LD_OWVAR 2
98246: PUSH
98247: EMPTY
98248: LIST
98249: LIST
98250: PPUSH
98251: CALL_OW 69
98255: PPUSH
98256: LD_VAR 0 1
98260: PPUSH
98261: CALL_OW 74
98265: PPUSH
98266: CALL_OW 115
// until IsDead ( un ) ;
98270: LD_VAR 0 1
98274: PPUSH
98275: CALL_OW 301
98279: IFFALSE 98227
// end ;
98281: PPOPN 1
98283: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
98284: LD_EXP 94
98288: PUSH
98289: LD_EXP 134
98293: AND
98294: IFFALSE 98306
98296: GO 98298
98298: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
98299: LD_STRING earthquake(getX(game), 0, 32)
98301: PPUSH
98302: CALL_OW 559
98306: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
98307: LD_EXP 94
98311: PUSH
98312: LD_EXP 135
98316: AND
98317: IFFALSE 98408
98319: GO 98321
98321: DISABLE
98322: LD_INT 0
98324: PPUSH
// begin enable ;
98325: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
98326: LD_ADDR_VAR 0 1
98330: PUSH
98331: LD_INT 22
98333: PUSH
98334: LD_OWVAR 2
98338: PUSH
98339: EMPTY
98340: LIST
98341: LIST
98342: PUSH
98343: LD_INT 21
98345: PUSH
98346: LD_INT 2
98348: PUSH
98349: EMPTY
98350: LIST
98351: LIST
98352: PUSH
98353: LD_INT 33
98355: PUSH
98356: LD_INT 3
98358: PUSH
98359: EMPTY
98360: LIST
98361: LIST
98362: PUSH
98363: EMPTY
98364: LIST
98365: LIST
98366: LIST
98367: PPUSH
98368: CALL_OW 69
98372: ST_TO_ADDR
// if not tmp then
98373: LD_VAR 0 1
98377: NOT
98378: IFFALSE 98382
// exit ;
98380: GO 98408
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
98382: LD_VAR 0 1
98386: PUSH
98387: LD_INT 1
98389: PPUSH
98390: LD_VAR 0 1
98394: PPUSH
98395: CALL_OW 12
98399: ARRAY
98400: PPUSH
98401: LD_INT 1
98403: PPUSH
98404: CALL_OW 234
// end ;
98408: PPOPN 1
98410: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
98411: LD_EXP 94
98415: PUSH
98416: LD_EXP 136
98420: AND
98421: IFFALSE 98562
98423: GO 98425
98425: DISABLE
98426: LD_INT 0
98428: PPUSH
98429: PPUSH
98430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
98431: LD_ADDR_VAR 0 3
98435: PUSH
98436: LD_INT 22
98438: PUSH
98439: LD_OWVAR 2
98443: PUSH
98444: EMPTY
98445: LIST
98446: LIST
98447: PUSH
98448: LD_INT 25
98450: PUSH
98451: LD_INT 1
98453: PUSH
98454: EMPTY
98455: LIST
98456: LIST
98457: PUSH
98458: EMPTY
98459: LIST
98460: LIST
98461: PPUSH
98462: CALL_OW 69
98466: ST_TO_ADDR
// if not tmp then
98467: LD_VAR 0 3
98471: NOT
98472: IFFALSE 98476
// exit ;
98474: GO 98562
// un := tmp [ rand ( 1 , tmp ) ] ;
98476: LD_ADDR_VAR 0 2
98480: PUSH
98481: LD_VAR 0 3
98485: PUSH
98486: LD_INT 1
98488: PPUSH
98489: LD_VAR 0 3
98493: PPUSH
98494: CALL_OW 12
98498: ARRAY
98499: ST_TO_ADDR
// if Crawls ( un ) then
98500: LD_VAR 0 2
98504: PPUSH
98505: CALL_OW 318
98509: IFFALSE 98520
// ComWalk ( un ) ;
98511: LD_VAR 0 2
98515: PPUSH
98516: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
98520: LD_VAR 0 2
98524: PPUSH
98525: LD_INT 9
98527: PPUSH
98528: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
98532: LD_INT 28
98534: PPUSH
98535: LD_OWVAR 2
98539: PPUSH
98540: LD_INT 2
98542: PPUSH
98543: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
98547: LD_INT 29
98549: PPUSH
98550: LD_OWVAR 2
98554: PPUSH
98555: LD_INT 2
98557: PPUSH
98558: CALL_OW 322
// end ;
98562: PPOPN 3
98564: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
98565: LD_EXP 94
98569: PUSH
98570: LD_EXP 137
98574: AND
98575: IFFALSE 98686
98577: GO 98579
98579: DISABLE
98580: LD_INT 0
98582: PPUSH
98583: PPUSH
98584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
98585: LD_ADDR_VAR 0 3
98589: PUSH
98590: LD_INT 22
98592: PUSH
98593: LD_OWVAR 2
98597: PUSH
98598: EMPTY
98599: LIST
98600: LIST
98601: PUSH
98602: LD_INT 25
98604: PUSH
98605: LD_INT 1
98607: PUSH
98608: EMPTY
98609: LIST
98610: LIST
98611: PUSH
98612: EMPTY
98613: LIST
98614: LIST
98615: PPUSH
98616: CALL_OW 69
98620: ST_TO_ADDR
// if not tmp then
98621: LD_VAR 0 3
98625: NOT
98626: IFFALSE 98630
// exit ;
98628: GO 98686
// un := tmp [ rand ( 1 , tmp ) ] ;
98630: LD_ADDR_VAR 0 2
98634: PUSH
98635: LD_VAR 0 3
98639: PUSH
98640: LD_INT 1
98642: PPUSH
98643: LD_VAR 0 3
98647: PPUSH
98648: CALL_OW 12
98652: ARRAY
98653: ST_TO_ADDR
// if Crawls ( un ) then
98654: LD_VAR 0 2
98658: PPUSH
98659: CALL_OW 318
98663: IFFALSE 98674
// ComWalk ( un ) ;
98665: LD_VAR 0 2
98669: PPUSH
98670: CALL_OW 138
// SetClass ( un , class_mortar ) ;
98674: LD_VAR 0 2
98678: PPUSH
98679: LD_INT 8
98681: PPUSH
98682: CALL_OW 336
// end ;
98686: PPOPN 3
98688: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
98689: LD_EXP 94
98693: PUSH
98694: LD_EXP 138
98698: AND
98699: IFFALSE 98843
98701: GO 98703
98703: DISABLE
98704: LD_INT 0
98706: PPUSH
98707: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
98708: LD_ADDR_VAR 0 2
98712: PUSH
98713: LD_INT 22
98715: PUSH
98716: LD_OWVAR 2
98720: PUSH
98721: EMPTY
98722: LIST
98723: LIST
98724: PUSH
98725: LD_INT 21
98727: PUSH
98728: LD_INT 2
98730: PUSH
98731: EMPTY
98732: LIST
98733: LIST
98734: PUSH
98735: LD_INT 2
98737: PUSH
98738: LD_INT 34
98740: PUSH
98741: LD_INT 12
98743: PUSH
98744: EMPTY
98745: LIST
98746: LIST
98747: PUSH
98748: LD_INT 34
98750: PUSH
98751: LD_INT 51
98753: PUSH
98754: EMPTY
98755: LIST
98756: LIST
98757: PUSH
98758: LD_INT 34
98760: PUSH
98761: LD_INT 32
98763: PUSH
98764: EMPTY
98765: LIST
98766: LIST
98767: PUSH
98768: EMPTY
98769: LIST
98770: LIST
98771: LIST
98772: LIST
98773: PUSH
98774: EMPTY
98775: LIST
98776: LIST
98777: LIST
98778: PPUSH
98779: CALL_OW 69
98783: ST_TO_ADDR
// if not tmp then
98784: LD_VAR 0 2
98788: NOT
98789: IFFALSE 98793
// exit ;
98791: GO 98843
// for i in tmp do
98793: LD_ADDR_VAR 0 1
98797: PUSH
98798: LD_VAR 0 2
98802: PUSH
98803: FOR_IN
98804: IFFALSE 98841
// if GetCargo ( i , mat_artifact ) = 0 then
98806: LD_VAR 0 1
98810: PPUSH
98811: LD_INT 4
98813: PPUSH
98814: CALL_OW 289
98818: PUSH
98819: LD_INT 0
98821: EQUAL
98822: IFFALSE 98839
// SetCargo ( i , mat_siberit , 100 ) ;
98824: LD_VAR 0 1
98828: PPUSH
98829: LD_INT 3
98831: PPUSH
98832: LD_INT 100
98834: PPUSH
98835: CALL_OW 290
98839: GO 98803
98841: POP
98842: POP
// end ;
98843: PPOPN 2
98845: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
98846: LD_EXP 94
98850: PUSH
98851: LD_EXP 139
98855: AND
98856: IFFALSE 99039
98858: GO 98860
98860: DISABLE
98861: LD_INT 0
98863: PPUSH
98864: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
98865: LD_ADDR_VAR 0 2
98869: PUSH
98870: LD_INT 22
98872: PUSH
98873: LD_OWVAR 2
98877: PUSH
98878: EMPTY
98879: LIST
98880: LIST
98881: PPUSH
98882: CALL_OW 69
98886: ST_TO_ADDR
// if not tmp then
98887: LD_VAR 0 2
98891: NOT
98892: IFFALSE 98896
// exit ;
98894: GO 99039
// for i := 1 to 2 do
98896: LD_ADDR_VAR 0 1
98900: PUSH
98901: DOUBLE
98902: LD_INT 1
98904: DEC
98905: ST_TO_ADDR
98906: LD_INT 2
98908: PUSH
98909: FOR_TO
98910: IFFALSE 99037
// begin uc_side := your_side ;
98912: LD_ADDR_OWVAR 20
98916: PUSH
98917: LD_OWVAR 2
98921: ST_TO_ADDR
// uc_nation := nation_american ;
98922: LD_ADDR_OWVAR 21
98926: PUSH
98927: LD_INT 1
98929: ST_TO_ADDR
// vc_chassis := us_morphling ;
98930: LD_ADDR_OWVAR 37
98934: PUSH
98935: LD_INT 5
98937: ST_TO_ADDR
// vc_engine := engine_siberite ;
98938: LD_ADDR_OWVAR 39
98942: PUSH
98943: LD_INT 3
98945: ST_TO_ADDR
// vc_control := control_computer ;
98946: LD_ADDR_OWVAR 38
98950: PUSH
98951: LD_INT 3
98953: ST_TO_ADDR
// vc_weapon := us_double_laser ;
98954: LD_ADDR_OWVAR 40
98958: PUSH
98959: LD_INT 10
98961: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
98962: LD_VAR 0 2
98966: PUSH
98967: LD_INT 1
98969: ARRAY
98970: PPUSH
98971: CALL_OW 310
98975: NOT
98976: IFFALSE 99023
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
98978: CALL_OW 45
98982: PPUSH
98983: LD_VAR 0 2
98987: PUSH
98988: LD_INT 1
98990: ARRAY
98991: PPUSH
98992: CALL_OW 250
98996: PPUSH
98997: LD_VAR 0 2
99001: PUSH
99002: LD_INT 1
99004: ARRAY
99005: PPUSH
99006: CALL_OW 251
99010: PPUSH
99011: LD_INT 12
99013: PPUSH
99014: LD_INT 1
99016: PPUSH
99017: CALL_OW 50
99021: GO 99035
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
99023: CALL_OW 45
99027: PPUSH
99028: LD_INT 1
99030: PPUSH
99031: CALL_OW 51
// end ;
99035: GO 98909
99037: POP
99038: POP
// end ;
99039: PPOPN 2
99041: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
99042: LD_EXP 94
99046: PUSH
99047: LD_EXP 140
99051: AND
99052: IFFALSE 99274
99054: GO 99056
99056: DISABLE
99057: LD_INT 0
99059: PPUSH
99060: PPUSH
99061: PPUSH
99062: PPUSH
99063: PPUSH
99064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
99065: LD_ADDR_VAR 0 6
99069: PUSH
99070: LD_INT 22
99072: PUSH
99073: LD_OWVAR 2
99077: PUSH
99078: EMPTY
99079: LIST
99080: LIST
99081: PUSH
99082: LD_INT 21
99084: PUSH
99085: LD_INT 1
99087: PUSH
99088: EMPTY
99089: LIST
99090: LIST
99091: PUSH
99092: LD_INT 3
99094: PUSH
99095: LD_INT 23
99097: PUSH
99098: LD_INT 0
99100: PUSH
99101: EMPTY
99102: LIST
99103: LIST
99104: PUSH
99105: EMPTY
99106: LIST
99107: LIST
99108: PUSH
99109: EMPTY
99110: LIST
99111: LIST
99112: LIST
99113: PPUSH
99114: CALL_OW 69
99118: ST_TO_ADDR
// if not tmp then
99119: LD_VAR 0 6
99123: NOT
99124: IFFALSE 99128
// exit ;
99126: GO 99274
// s1 := rand ( 1 , 4 ) ;
99128: LD_ADDR_VAR 0 2
99132: PUSH
99133: LD_INT 1
99135: PPUSH
99136: LD_INT 4
99138: PPUSH
99139: CALL_OW 12
99143: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
99144: LD_ADDR_VAR 0 4
99148: PUSH
99149: LD_VAR 0 6
99153: PUSH
99154: LD_INT 1
99156: ARRAY
99157: PPUSH
99158: LD_VAR 0 2
99162: PPUSH
99163: CALL_OW 259
99167: ST_TO_ADDR
// if s1 = 1 then
99168: LD_VAR 0 2
99172: PUSH
99173: LD_INT 1
99175: EQUAL
99176: IFFALSE 99196
// s2 := rand ( 2 , 4 ) else
99178: LD_ADDR_VAR 0 3
99182: PUSH
99183: LD_INT 2
99185: PPUSH
99186: LD_INT 4
99188: PPUSH
99189: CALL_OW 12
99193: ST_TO_ADDR
99194: GO 99204
// s2 := 1 ;
99196: LD_ADDR_VAR 0 3
99200: PUSH
99201: LD_INT 1
99203: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
99204: LD_ADDR_VAR 0 5
99208: PUSH
99209: LD_VAR 0 6
99213: PUSH
99214: LD_INT 1
99216: ARRAY
99217: PPUSH
99218: LD_VAR 0 3
99222: PPUSH
99223: CALL_OW 259
99227: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
99228: LD_VAR 0 6
99232: PUSH
99233: LD_INT 1
99235: ARRAY
99236: PPUSH
99237: LD_VAR 0 2
99241: PPUSH
99242: LD_VAR 0 5
99246: PPUSH
99247: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
99251: LD_VAR 0 6
99255: PUSH
99256: LD_INT 1
99258: ARRAY
99259: PPUSH
99260: LD_VAR 0 3
99264: PPUSH
99265: LD_VAR 0 4
99269: PPUSH
99270: CALL_OW 237
// end ;
99274: PPOPN 6
99276: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
99277: LD_EXP 94
99281: PUSH
99282: LD_EXP 141
99286: AND
99287: IFFALSE 99366
99289: GO 99291
99291: DISABLE
99292: LD_INT 0
99294: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
99295: LD_ADDR_VAR 0 1
99299: PUSH
99300: LD_INT 22
99302: PUSH
99303: LD_OWVAR 2
99307: PUSH
99308: EMPTY
99309: LIST
99310: LIST
99311: PUSH
99312: LD_INT 30
99314: PUSH
99315: LD_INT 3
99317: PUSH
99318: EMPTY
99319: LIST
99320: LIST
99321: PUSH
99322: EMPTY
99323: LIST
99324: LIST
99325: PPUSH
99326: CALL_OW 69
99330: ST_TO_ADDR
// if not tmp then
99331: LD_VAR 0 1
99335: NOT
99336: IFFALSE 99340
// exit ;
99338: GO 99366
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
99340: LD_VAR 0 1
99344: PUSH
99345: LD_INT 1
99347: PPUSH
99348: LD_VAR 0 1
99352: PPUSH
99353: CALL_OW 12
99357: ARRAY
99358: PPUSH
99359: LD_INT 1
99361: PPUSH
99362: CALL_OW 234
// end ;
99366: PPOPN 1
99368: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
99369: LD_EXP 94
99373: PUSH
99374: LD_EXP 142
99378: AND
99379: IFFALSE 99491
99381: GO 99383
99383: DISABLE
99384: LD_INT 0
99386: PPUSH
99387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
99388: LD_ADDR_VAR 0 2
99392: PUSH
99393: LD_INT 22
99395: PUSH
99396: LD_OWVAR 2
99400: PUSH
99401: EMPTY
99402: LIST
99403: LIST
99404: PUSH
99405: LD_INT 2
99407: PUSH
99408: LD_INT 30
99410: PUSH
99411: LD_INT 27
99413: PUSH
99414: EMPTY
99415: LIST
99416: LIST
99417: PUSH
99418: LD_INT 30
99420: PUSH
99421: LD_INT 26
99423: PUSH
99424: EMPTY
99425: LIST
99426: LIST
99427: PUSH
99428: LD_INT 30
99430: PUSH
99431: LD_INT 28
99433: PUSH
99434: EMPTY
99435: LIST
99436: LIST
99437: PUSH
99438: EMPTY
99439: LIST
99440: LIST
99441: LIST
99442: LIST
99443: PUSH
99444: EMPTY
99445: LIST
99446: LIST
99447: PPUSH
99448: CALL_OW 69
99452: ST_TO_ADDR
// if not tmp then
99453: LD_VAR 0 2
99457: NOT
99458: IFFALSE 99462
// exit ;
99460: GO 99491
// for i in tmp do
99462: LD_ADDR_VAR 0 1
99466: PUSH
99467: LD_VAR 0 2
99471: PUSH
99472: FOR_IN
99473: IFFALSE 99489
// SetLives ( i , 1 ) ;
99475: LD_VAR 0 1
99479: PPUSH
99480: LD_INT 1
99482: PPUSH
99483: CALL_OW 234
99487: GO 99472
99489: POP
99490: POP
// end ;
99491: PPOPN 2
99493: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
99494: LD_EXP 94
99498: PUSH
99499: LD_EXP 143
99503: AND
99504: IFFALSE 99778
99506: GO 99508
99508: DISABLE
99509: LD_INT 0
99511: PPUSH
99512: PPUSH
99513: PPUSH
// begin i := rand ( 1 , 7 ) ;
99514: LD_ADDR_VAR 0 1
99518: PUSH
99519: LD_INT 1
99521: PPUSH
99522: LD_INT 7
99524: PPUSH
99525: CALL_OW 12
99529: ST_TO_ADDR
// case i of 1 :
99530: LD_VAR 0 1
99534: PUSH
99535: LD_INT 1
99537: DOUBLE
99538: EQUAL
99539: IFTRUE 99543
99541: GO 99553
99543: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
99544: LD_STRING earthquake(getX(game), 0, 32)
99546: PPUSH
99547: CALL_OW 559
99551: GO 99778
99553: LD_INT 2
99555: DOUBLE
99556: EQUAL
99557: IFTRUE 99561
99559: GO 99575
99561: POP
// begin ToLua ( displayStucuk(); ) ;
99562: LD_STRING displayStucuk();
99564: PPUSH
99565: CALL_OW 559
// ResetFog ;
99569: CALL_OW 335
// end ; 3 :
99573: GO 99778
99575: LD_INT 3
99577: DOUBLE
99578: EQUAL
99579: IFTRUE 99583
99581: GO 99687
99583: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
99584: LD_ADDR_VAR 0 2
99588: PUSH
99589: LD_INT 22
99591: PUSH
99592: LD_OWVAR 2
99596: PUSH
99597: EMPTY
99598: LIST
99599: LIST
99600: PUSH
99601: LD_INT 25
99603: PUSH
99604: LD_INT 1
99606: PUSH
99607: EMPTY
99608: LIST
99609: LIST
99610: PUSH
99611: EMPTY
99612: LIST
99613: LIST
99614: PPUSH
99615: CALL_OW 69
99619: ST_TO_ADDR
// if not tmp then
99620: LD_VAR 0 2
99624: NOT
99625: IFFALSE 99629
// exit ;
99627: GO 99778
// un := tmp [ rand ( 1 , tmp ) ] ;
99629: LD_ADDR_VAR 0 3
99633: PUSH
99634: LD_VAR 0 2
99638: PUSH
99639: LD_INT 1
99641: PPUSH
99642: LD_VAR 0 2
99646: PPUSH
99647: CALL_OW 12
99651: ARRAY
99652: ST_TO_ADDR
// if Crawls ( un ) then
99653: LD_VAR 0 3
99657: PPUSH
99658: CALL_OW 318
99662: IFFALSE 99673
// ComWalk ( un ) ;
99664: LD_VAR 0 3
99668: PPUSH
99669: CALL_OW 138
// SetClass ( un , class_mortar ) ;
99673: LD_VAR 0 3
99677: PPUSH
99678: LD_INT 8
99680: PPUSH
99681: CALL_OW 336
// end ; 4 :
99685: GO 99778
99687: LD_INT 4
99689: DOUBLE
99690: EQUAL
99691: IFTRUE 99695
99693: GO 99756
99695: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
99696: LD_ADDR_VAR 0 2
99700: PUSH
99701: LD_INT 22
99703: PUSH
99704: LD_OWVAR 2
99708: PUSH
99709: EMPTY
99710: LIST
99711: LIST
99712: PUSH
99713: LD_INT 30
99715: PUSH
99716: LD_INT 29
99718: PUSH
99719: EMPTY
99720: LIST
99721: LIST
99722: PUSH
99723: EMPTY
99724: LIST
99725: LIST
99726: PPUSH
99727: CALL_OW 69
99731: ST_TO_ADDR
// if not tmp then
99732: LD_VAR 0 2
99736: NOT
99737: IFFALSE 99741
// exit ;
99739: GO 99778
// DestroyUnit ( tmp [ 1 ] ) ;
99741: LD_VAR 0 2
99745: PUSH
99746: LD_INT 1
99748: ARRAY
99749: PPUSH
99750: CALL_OW 65
// end ; 5 .. 7 :
99754: GO 99778
99756: LD_INT 5
99758: DOUBLE
99759: GREATEREQUAL
99760: IFFALSE 99768
99762: LD_INT 7
99764: DOUBLE
99765: LESSEQUAL
99766: IFTRUE 99770
99768: GO 99777
99770: POP
// StreamSibBomb ; end ;
99771: CALL 96028 0 0
99775: GO 99778
99777: POP
// end ;
99778: PPOPN 3
99780: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
99781: LD_EXP 94
99785: PUSH
99786: LD_EXP 144
99790: AND
99791: IFFALSE 99947
99793: GO 99795
99795: DISABLE
99796: LD_INT 0
99798: PPUSH
99799: PPUSH
99800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
99801: LD_ADDR_VAR 0 2
99805: PUSH
99806: LD_INT 81
99808: PUSH
99809: LD_OWVAR 2
99813: PUSH
99814: EMPTY
99815: LIST
99816: LIST
99817: PUSH
99818: LD_INT 2
99820: PUSH
99821: LD_INT 21
99823: PUSH
99824: LD_INT 1
99826: PUSH
99827: EMPTY
99828: LIST
99829: LIST
99830: PUSH
99831: LD_INT 21
99833: PUSH
99834: LD_INT 2
99836: PUSH
99837: EMPTY
99838: LIST
99839: LIST
99840: PUSH
99841: EMPTY
99842: LIST
99843: LIST
99844: LIST
99845: PUSH
99846: EMPTY
99847: LIST
99848: LIST
99849: PPUSH
99850: CALL_OW 69
99854: ST_TO_ADDR
// if not tmp then
99855: LD_VAR 0 2
99859: NOT
99860: IFFALSE 99864
// exit ;
99862: GO 99947
// p := 0 ;
99864: LD_ADDR_VAR 0 3
99868: PUSH
99869: LD_INT 0
99871: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
99872: LD_INT 35
99874: PPUSH
99875: CALL_OW 67
// p := p + 1 ;
99879: LD_ADDR_VAR 0 3
99883: PUSH
99884: LD_VAR 0 3
99888: PUSH
99889: LD_INT 1
99891: PLUS
99892: ST_TO_ADDR
// for i in tmp do
99893: LD_ADDR_VAR 0 1
99897: PUSH
99898: LD_VAR 0 2
99902: PUSH
99903: FOR_IN
99904: IFFALSE 99935
// if GetLives ( i ) < 1000 then
99906: LD_VAR 0 1
99910: PPUSH
99911: CALL_OW 256
99915: PUSH
99916: LD_INT 1000
99918: LESS
99919: IFFALSE 99933
// SetLives ( i , 1000 ) ;
99921: LD_VAR 0 1
99925: PPUSH
99926: LD_INT 1000
99928: PPUSH
99929: CALL_OW 234
99933: GO 99903
99935: POP
99936: POP
// until p > 20 ;
99937: LD_VAR 0 3
99941: PUSH
99942: LD_INT 20
99944: GREATER
99945: IFFALSE 99872
// end ;
99947: PPOPN 3
99949: END
// every 0 0$1 trigger StreamModeActive and sTime do
99950: LD_EXP 94
99954: PUSH
99955: LD_EXP 145
99959: AND
99960: IFFALSE 99995
99962: GO 99964
99964: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
99965: LD_INT 28
99967: PPUSH
99968: LD_OWVAR 2
99972: PPUSH
99973: LD_INT 2
99975: PPUSH
99976: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
99980: LD_INT 30
99982: PPUSH
99983: LD_OWVAR 2
99987: PPUSH
99988: LD_INT 2
99990: PPUSH
99991: CALL_OW 322
// end ;
99995: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
99996: LD_EXP 94
100000: PUSH
100001: LD_EXP 146
100005: AND
100006: IFFALSE 100127
100008: GO 100010
100010: DISABLE
100011: LD_INT 0
100013: PPUSH
100014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
100015: LD_ADDR_VAR 0 2
100019: PUSH
100020: LD_INT 22
100022: PUSH
100023: LD_OWVAR 2
100027: PUSH
100028: EMPTY
100029: LIST
100030: LIST
100031: PUSH
100032: LD_INT 21
100034: PUSH
100035: LD_INT 1
100037: PUSH
100038: EMPTY
100039: LIST
100040: LIST
100041: PUSH
100042: LD_INT 3
100044: PUSH
100045: LD_INT 23
100047: PUSH
100048: LD_INT 0
100050: PUSH
100051: EMPTY
100052: LIST
100053: LIST
100054: PUSH
100055: EMPTY
100056: LIST
100057: LIST
100058: PUSH
100059: EMPTY
100060: LIST
100061: LIST
100062: LIST
100063: PPUSH
100064: CALL_OW 69
100068: ST_TO_ADDR
// if not tmp then
100069: LD_VAR 0 2
100073: NOT
100074: IFFALSE 100078
// exit ;
100076: GO 100127
// for i in tmp do
100078: LD_ADDR_VAR 0 1
100082: PUSH
100083: LD_VAR 0 2
100087: PUSH
100088: FOR_IN
100089: IFFALSE 100125
// begin if Crawls ( i ) then
100091: LD_VAR 0 1
100095: PPUSH
100096: CALL_OW 318
100100: IFFALSE 100111
// ComWalk ( i ) ;
100102: LD_VAR 0 1
100106: PPUSH
100107: CALL_OW 138
// SetClass ( i , 2 ) ;
100111: LD_VAR 0 1
100115: PPUSH
100116: LD_INT 2
100118: PPUSH
100119: CALL_OW 336
// end ;
100123: GO 100088
100125: POP
100126: POP
// end ;
100127: PPOPN 2
100129: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
100130: LD_EXP 94
100134: PUSH
100135: LD_EXP 147
100139: AND
100140: IFFALSE 100421
100142: GO 100144
100144: DISABLE
100145: LD_INT 0
100147: PPUSH
100148: PPUSH
100149: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
100150: LD_OWVAR 2
100154: PPUSH
100155: LD_INT 9
100157: PPUSH
100158: LD_INT 1
100160: PPUSH
100161: LD_INT 1
100163: PPUSH
100164: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
100168: LD_INT 9
100170: PPUSH
100171: LD_OWVAR 2
100175: PPUSH
100176: CALL_OW 343
// uc_side := 9 ;
100180: LD_ADDR_OWVAR 20
100184: PUSH
100185: LD_INT 9
100187: ST_TO_ADDR
// uc_nation := 2 ;
100188: LD_ADDR_OWVAR 21
100192: PUSH
100193: LD_INT 2
100195: ST_TO_ADDR
// hc_name := Dark Warrior ;
100196: LD_ADDR_OWVAR 26
100200: PUSH
100201: LD_STRING Dark Warrior
100203: ST_TO_ADDR
// hc_gallery :=  ;
100204: LD_ADDR_OWVAR 33
100208: PUSH
100209: LD_STRING 
100211: ST_TO_ADDR
// hc_noskilllimit := true ;
100212: LD_ADDR_OWVAR 76
100216: PUSH
100217: LD_INT 1
100219: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
100220: LD_ADDR_OWVAR 31
100224: PUSH
100225: LD_INT 30
100227: PUSH
100228: LD_INT 30
100230: PUSH
100231: LD_INT 30
100233: PUSH
100234: LD_INT 30
100236: PUSH
100237: EMPTY
100238: LIST
100239: LIST
100240: LIST
100241: LIST
100242: ST_TO_ADDR
// un := CreateHuman ;
100243: LD_ADDR_VAR 0 3
100247: PUSH
100248: CALL_OW 44
100252: ST_TO_ADDR
// hc_noskilllimit := false ;
100253: LD_ADDR_OWVAR 76
100257: PUSH
100258: LD_INT 0
100260: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
100261: LD_VAR 0 3
100265: PPUSH
100266: LD_INT 1
100268: PPUSH
100269: CALL_OW 51
// p := 0 ;
100273: LD_ADDR_VAR 0 2
100277: PUSH
100278: LD_INT 0
100280: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
100281: LD_INT 35
100283: PPUSH
100284: CALL_OW 67
// p := p + 1 ;
100288: LD_ADDR_VAR 0 2
100292: PUSH
100293: LD_VAR 0 2
100297: PUSH
100298: LD_INT 1
100300: PLUS
100301: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
100302: LD_VAR 0 3
100306: PPUSH
100307: CALL_OW 256
100311: PUSH
100312: LD_INT 1000
100314: LESS
100315: IFFALSE 100329
// SetLives ( un , 1000 ) ;
100317: LD_VAR 0 3
100321: PPUSH
100322: LD_INT 1000
100324: PPUSH
100325: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
100329: LD_VAR 0 3
100333: PPUSH
100334: LD_INT 81
100336: PUSH
100337: LD_OWVAR 2
100341: PUSH
100342: EMPTY
100343: LIST
100344: LIST
100345: PUSH
100346: LD_INT 91
100348: PUSH
100349: LD_VAR 0 3
100353: PUSH
100354: LD_INT 30
100356: PUSH
100357: EMPTY
100358: LIST
100359: LIST
100360: LIST
100361: PUSH
100362: EMPTY
100363: LIST
100364: LIST
100365: PPUSH
100366: CALL_OW 69
100370: PPUSH
100371: LD_VAR 0 3
100375: PPUSH
100376: CALL_OW 74
100380: PPUSH
100381: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
100385: LD_VAR 0 2
100389: PUSH
100390: LD_INT 60
100392: GREATER
100393: PUSH
100394: LD_VAR 0 3
100398: PPUSH
100399: CALL_OW 301
100403: OR
100404: IFFALSE 100281
// if un then
100406: LD_VAR 0 3
100410: IFFALSE 100421
// RemoveUnit ( un ) ;
100412: LD_VAR 0 3
100416: PPUSH
100417: CALL_OW 64
// end ;
100421: PPOPN 3
100423: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
100424: LD_INT 0
100426: PPUSH
// case cmd of 301 :
100427: LD_VAR 0 1
100431: PUSH
100432: LD_INT 301
100434: DOUBLE
100435: EQUAL
100436: IFTRUE 100440
100438: GO 100472
100440: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
100441: LD_VAR 0 6
100445: PPUSH
100446: LD_VAR 0 7
100450: PPUSH
100451: LD_VAR 0 8
100455: PPUSH
100456: LD_VAR 0 4
100460: PPUSH
100461: LD_VAR 0 5
100465: PPUSH
100466: CALL 101673 0 5
100470: GO 100593
100472: LD_INT 302
100474: DOUBLE
100475: EQUAL
100476: IFTRUE 100480
100478: GO 100517
100480: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
100481: LD_VAR 0 6
100485: PPUSH
100486: LD_VAR 0 7
100490: PPUSH
100491: LD_VAR 0 8
100495: PPUSH
100496: LD_VAR 0 9
100500: PPUSH
100501: LD_VAR 0 4
100505: PPUSH
100506: LD_VAR 0 5
100510: PPUSH
100511: CALL 101764 0 6
100515: GO 100593
100517: LD_INT 303
100519: DOUBLE
100520: EQUAL
100521: IFTRUE 100525
100523: GO 100562
100525: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
100526: LD_VAR 0 6
100530: PPUSH
100531: LD_VAR 0 7
100535: PPUSH
100536: LD_VAR 0 8
100540: PPUSH
100541: LD_VAR 0 9
100545: PPUSH
100546: LD_VAR 0 4
100550: PPUSH
100551: LD_VAR 0 5
100555: PPUSH
100556: CALL 100598 0 6
100560: GO 100593
100562: LD_INT 304
100564: DOUBLE
100565: EQUAL
100566: IFTRUE 100570
100568: GO 100592
100570: POP
// hHackTeleport ( unit , x , y ) ; end ;
100571: LD_VAR 0 2
100575: PPUSH
100576: LD_VAR 0 4
100580: PPUSH
100581: LD_VAR 0 5
100585: PPUSH
100586: CALL 102357 0 3
100590: GO 100593
100592: POP
// end ;
100593: LD_VAR 0 12
100597: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
100598: LD_INT 0
100600: PPUSH
100601: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
100602: LD_VAR 0 1
100606: PUSH
100607: LD_INT 1
100609: LESS
100610: PUSH
100611: LD_VAR 0 1
100615: PUSH
100616: LD_INT 3
100618: GREATER
100619: OR
100620: PUSH
100621: LD_VAR 0 5
100625: PPUSH
100626: LD_VAR 0 6
100630: PPUSH
100631: CALL_OW 428
100635: OR
100636: IFFALSE 100640
// exit ;
100638: GO 101360
// uc_side := your_side ;
100640: LD_ADDR_OWVAR 20
100644: PUSH
100645: LD_OWVAR 2
100649: ST_TO_ADDR
// uc_nation := nation ;
100650: LD_ADDR_OWVAR 21
100654: PUSH
100655: LD_VAR 0 1
100659: ST_TO_ADDR
// bc_level = 1 ;
100660: LD_ADDR_OWVAR 43
100664: PUSH
100665: LD_INT 1
100667: ST_TO_ADDR
// case btype of 1 :
100668: LD_VAR 0 2
100672: PUSH
100673: LD_INT 1
100675: DOUBLE
100676: EQUAL
100677: IFTRUE 100681
100679: GO 100692
100681: POP
// bc_type := b_depot ; 2 :
100682: LD_ADDR_OWVAR 42
100686: PUSH
100687: LD_INT 0
100689: ST_TO_ADDR
100690: GO 101304
100692: LD_INT 2
100694: DOUBLE
100695: EQUAL
100696: IFTRUE 100700
100698: GO 100711
100700: POP
// bc_type := b_warehouse ; 3 :
100701: LD_ADDR_OWVAR 42
100705: PUSH
100706: LD_INT 1
100708: ST_TO_ADDR
100709: GO 101304
100711: LD_INT 3
100713: DOUBLE
100714: EQUAL
100715: IFTRUE 100719
100717: GO 100730
100719: POP
// bc_type := b_lab ; 4 .. 9 :
100720: LD_ADDR_OWVAR 42
100724: PUSH
100725: LD_INT 6
100727: ST_TO_ADDR
100728: GO 101304
100730: LD_INT 4
100732: DOUBLE
100733: GREATEREQUAL
100734: IFFALSE 100742
100736: LD_INT 9
100738: DOUBLE
100739: LESSEQUAL
100740: IFTRUE 100744
100742: GO 100796
100744: POP
// begin bc_type := b_lab_half ;
100745: LD_ADDR_OWVAR 42
100749: PUSH
100750: LD_INT 7
100752: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
100753: LD_ADDR_OWVAR 44
100757: PUSH
100758: LD_INT 10
100760: PUSH
100761: LD_INT 11
100763: PUSH
100764: LD_INT 12
100766: PUSH
100767: LD_INT 15
100769: PUSH
100770: LD_INT 14
100772: PUSH
100773: LD_INT 13
100775: PUSH
100776: EMPTY
100777: LIST
100778: LIST
100779: LIST
100780: LIST
100781: LIST
100782: LIST
100783: PUSH
100784: LD_VAR 0 2
100788: PUSH
100789: LD_INT 3
100791: MINUS
100792: ARRAY
100793: ST_TO_ADDR
// end ; 10 .. 13 :
100794: GO 101304
100796: LD_INT 10
100798: DOUBLE
100799: GREATEREQUAL
100800: IFFALSE 100808
100802: LD_INT 13
100804: DOUBLE
100805: LESSEQUAL
100806: IFTRUE 100810
100808: GO 100887
100810: POP
// begin bc_type := b_lab_full ;
100811: LD_ADDR_OWVAR 42
100815: PUSH
100816: LD_INT 8
100818: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
100819: LD_ADDR_OWVAR 44
100823: PUSH
100824: LD_INT 10
100826: PUSH
100827: LD_INT 12
100829: PUSH
100830: LD_INT 14
100832: PUSH
100833: LD_INT 13
100835: PUSH
100836: EMPTY
100837: LIST
100838: LIST
100839: LIST
100840: LIST
100841: PUSH
100842: LD_VAR 0 2
100846: PUSH
100847: LD_INT 9
100849: MINUS
100850: ARRAY
100851: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
100852: LD_ADDR_OWVAR 45
100856: PUSH
100857: LD_INT 11
100859: PUSH
100860: LD_INT 15
100862: PUSH
100863: LD_INT 12
100865: PUSH
100866: LD_INT 15
100868: PUSH
100869: EMPTY
100870: LIST
100871: LIST
100872: LIST
100873: LIST
100874: PUSH
100875: LD_VAR 0 2
100879: PUSH
100880: LD_INT 9
100882: MINUS
100883: ARRAY
100884: ST_TO_ADDR
// end ; 14 :
100885: GO 101304
100887: LD_INT 14
100889: DOUBLE
100890: EQUAL
100891: IFTRUE 100895
100893: GO 100906
100895: POP
// bc_type := b_workshop ; 15 :
100896: LD_ADDR_OWVAR 42
100900: PUSH
100901: LD_INT 2
100903: ST_TO_ADDR
100904: GO 101304
100906: LD_INT 15
100908: DOUBLE
100909: EQUAL
100910: IFTRUE 100914
100912: GO 100925
100914: POP
// bc_type := b_factory ; 16 :
100915: LD_ADDR_OWVAR 42
100919: PUSH
100920: LD_INT 3
100922: ST_TO_ADDR
100923: GO 101304
100925: LD_INT 16
100927: DOUBLE
100928: EQUAL
100929: IFTRUE 100933
100931: GO 100944
100933: POP
// bc_type := b_ext_gun ; 17 :
100934: LD_ADDR_OWVAR 42
100938: PUSH
100939: LD_INT 17
100941: ST_TO_ADDR
100942: GO 101304
100944: LD_INT 17
100946: DOUBLE
100947: EQUAL
100948: IFTRUE 100952
100950: GO 100980
100952: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
100953: LD_ADDR_OWVAR 42
100957: PUSH
100958: LD_INT 19
100960: PUSH
100961: LD_INT 23
100963: PUSH
100964: LD_INT 19
100966: PUSH
100967: EMPTY
100968: LIST
100969: LIST
100970: LIST
100971: PUSH
100972: LD_VAR 0 1
100976: ARRAY
100977: ST_TO_ADDR
100978: GO 101304
100980: LD_INT 18
100982: DOUBLE
100983: EQUAL
100984: IFTRUE 100988
100986: GO 100999
100988: POP
// bc_type := b_ext_radar ; 19 :
100989: LD_ADDR_OWVAR 42
100993: PUSH
100994: LD_INT 20
100996: ST_TO_ADDR
100997: GO 101304
100999: LD_INT 19
101001: DOUBLE
101002: EQUAL
101003: IFTRUE 101007
101005: GO 101018
101007: POP
// bc_type := b_ext_radio ; 20 :
101008: LD_ADDR_OWVAR 42
101012: PUSH
101013: LD_INT 22
101015: ST_TO_ADDR
101016: GO 101304
101018: LD_INT 20
101020: DOUBLE
101021: EQUAL
101022: IFTRUE 101026
101024: GO 101037
101026: POP
// bc_type := b_ext_siberium ; 21 :
101027: LD_ADDR_OWVAR 42
101031: PUSH
101032: LD_INT 21
101034: ST_TO_ADDR
101035: GO 101304
101037: LD_INT 21
101039: DOUBLE
101040: EQUAL
101041: IFTRUE 101045
101043: GO 101056
101045: POP
// bc_type := b_ext_computer ; 22 :
101046: LD_ADDR_OWVAR 42
101050: PUSH
101051: LD_INT 24
101053: ST_TO_ADDR
101054: GO 101304
101056: LD_INT 22
101058: DOUBLE
101059: EQUAL
101060: IFTRUE 101064
101062: GO 101075
101064: POP
// bc_type := b_ext_track ; 23 :
101065: LD_ADDR_OWVAR 42
101069: PUSH
101070: LD_INT 16
101072: ST_TO_ADDR
101073: GO 101304
101075: LD_INT 23
101077: DOUBLE
101078: EQUAL
101079: IFTRUE 101083
101081: GO 101094
101083: POP
// bc_type := b_ext_laser ; 24 :
101084: LD_ADDR_OWVAR 42
101088: PUSH
101089: LD_INT 25
101091: ST_TO_ADDR
101092: GO 101304
101094: LD_INT 24
101096: DOUBLE
101097: EQUAL
101098: IFTRUE 101102
101100: GO 101113
101102: POP
// bc_type := b_control_tower ; 25 :
101103: LD_ADDR_OWVAR 42
101107: PUSH
101108: LD_INT 36
101110: ST_TO_ADDR
101111: GO 101304
101113: LD_INT 25
101115: DOUBLE
101116: EQUAL
101117: IFTRUE 101121
101119: GO 101132
101121: POP
// bc_type := b_breastwork ; 26 :
101122: LD_ADDR_OWVAR 42
101126: PUSH
101127: LD_INT 31
101129: ST_TO_ADDR
101130: GO 101304
101132: LD_INT 26
101134: DOUBLE
101135: EQUAL
101136: IFTRUE 101140
101138: GO 101151
101140: POP
// bc_type := b_bunker ; 27 :
101141: LD_ADDR_OWVAR 42
101145: PUSH
101146: LD_INT 32
101148: ST_TO_ADDR
101149: GO 101304
101151: LD_INT 27
101153: DOUBLE
101154: EQUAL
101155: IFTRUE 101159
101157: GO 101170
101159: POP
// bc_type := b_turret ; 28 :
101160: LD_ADDR_OWVAR 42
101164: PUSH
101165: LD_INT 33
101167: ST_TO_ADDR
101168: GO 101304
101170: LD_INT 28
101172: DOUBLE
101173: EQUAL
101174: IFTRUE 101178
101176: GO 101189
101178: POP
// bc_type := b_armoury ; 29 :
101179: LD_ADDR_OWVAR 42
101183: PUSH
101184: LD_INT 4
101186: ST_TO_ADDR
101187: GO 101304
101189: LD_INT 29
101191: DOUBLE
101192: EQUAL
101193: IFTRUE 101197
101195: GO 101208
101197: POP
// bc_type := b_barracks ; 30 :
101198: LD_ADDR_OWVAR 42
101202: PUSH
101203: LD_INT 5
101205: ST_TO_ADDR
101206: GO 101304
101208: LD_INT 30
101210: DOUBLE
101211: EQUAL
101212: IFTRUE 101216
101214: GO 101227
101216: POP
// bc_type := b_solar_power ; 31 :
101217: LD_ADDR_OWVAR 42
101221: PUSH
101222: LD_INT 27
101224: ST_TO_ADDR
101225: GO 101304
101227: LD_INT 31
101229: DOUBLE
101230: EQUAL
101231: IFTRUE 101235
101233: GO 101246
101235: POP
// bc_type := b_oil_power ; 32 :
101236: LD_ADDR_OWVAR 42
101240: PUSH
101241: LD_INT 26
101243: ST_TO_ADDR
101244: GO 101304
101246: LD_INT 32
101248: DOUBLE
101249: EQUAL
101250: IFTRUE 101254
101252: GO 101265
101254: POP
// bc_type := b_siberite_power ; 33 :
101255: LD_ADDR_OWVAR 42
101259: PUSH
101260: LD_INT 28
101262: ST_TO_ADDR
101263: GO 101304
101265: LD_INT 33
101267: DOUBLE
101268: EQUAL
101269: IFTRUE 101273
101271: GO 101284
101273: POP
// bc_type := b_oil_mine ; 34 :
101274: LD_ADDR_OWVAR 42
101278: PUSH
101279: LD_INT 29
101281: ST_TO_ADDR
101282: GO 101304
101284: LD_INT 34
101286: DOUBLE
101287: EQUAL
101288: IFTRUE 101292
101290: GO 101303
101292: POP
// bc_type := b_siberite_mine ; end ;
101293: LD_ADDR_OWVAR 42
101297: PUSH
101298: LD_INT 30
101300: ST_TO_ADDR
101301: GO 101304
101303: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
101304: LD_ADDR_VAR 0 8
101308: PUSH
101309: LD_VAR 0 5
101313: PPUSH
101314: LD_VAR 0 6
101318: PPUSH
101319: LD_VAR 0 3
101323: PPUSH
101324: CALL_OW 47
101328: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
101329: LD_OWVAR 42
101333: PUSH
101334: LD_INT 32
101336: PUSH
101337: LD_INT 33
101339: PUSH
101340: EMPTY
101341: LIST
101342: LIST
101343: IN
101344: IFFALSE 101360
// PlaceWeaponTurret ( b , weapon ) ;
101346: LD_VAR 0 8
101350: PPUSH
101351: LD_VAR 0 4
101355: PPUSH
101356: CALL_OW 431
// end ;
101360: LD_VAR 0 7
101364: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
101365: LD_INT 0
101367: PPUSH
101368: PPUSH
101369: PPUSH
101370: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
101371: LD_ADDR_VAR 0 4
101375: PUSH
101376: LD_INT 22
101378: PUSH
101379: LD_OWVAR 2
101383: PUSH
101384: EMPTY
101385: LIST
101386: LIST
101387: PUSH
101388: LD_INT 2
101390: PUSH
101391: LD_INT 30
101393: PUSH
101394: LD_INT 0
101396: PUSH
101397: EMPTY
101398: LIST
101399: LIST
101400: PUSH
101401: LD_INT 30
101403: PUSH
101404: LD_INT 1
101406: PUSH
101407: EMPTY
101408: LIST
101409: LIST
101410: PUSH
101411: EMPTY
101412: LIST
101413: LIST
101414: LIST
101415: PUSH
101416: EMPTY
101417: LIST
101418: LIST
101419: PPUSH
101420: CALL_OW 69
101424: ST_TO_ADDR
// if not tmp then
101425: LD_VAR 0 4
101429: NOT
101430: IFFALSE 101434
// exit ;
101432: GO 101493
// for i in tmp do
101434: LD_ADDR_VAR 0 2
101438: PUSH
101439: LD_VAR 0 4
101443: PUSH
101444: FOR_IN
101445: IFFALSE 101491
// for j = 1 to 3 do
101447: LD_ADDR_VAR 0 3
101451: PUSH
101452: DOUBLE
101453: LD_INT 1
101455: DEC
101456: ST_TO_ADDR
101457: LD_INT 3
101459: PUSH
101460: FOR_TO
101461: IFFALSE 101487
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
101463: LD_VAR 0 2
101467: PPUSH
101468: CALL_OW 274
101472: PPUSH
101473: LD_VAR 0 3
101477: PPUSH
101478: LD_INT 99999
101480: PPUSH
101481: CALL_OW 277
101485: GO 101460
101487: POP
101488: POP
101489: GO 101444
101491: POP
101492: POP
// end ;
101493: LD_VAR 0 1
101497: RET
// export function hHackSetLevel10 ; var i , j ; begin
101498: LD_INT 0
101500: PPUSH
101501: PPUSH
101502: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
101503: LD_ADDR_VAR 0 2
101507: PUSH
101508: LD_INT 21
101510: PUSH
101511: LD_INT 1
101513: PUSH
101514: EMPTY
101515: LIST
101516: LIST
101517: PPUSH
101518: CALL_OW 69
101522: PUSH
101523: FOR_IN
101524: IFFALSE 101576
// if IsSelected ( i ) then
101526: LD_VAR 0 2
101530: PPUSH
101531: CALL_OW 306
101535: IFFALSE 101574
// begin for j := 1 to 4 do
101537: LD_ADDR_VAR 0 3
101541: PUSH
101542: DOUBLE
101543: LD_INT 1
101545: DEC
101546: ST_TO_ADDR
101547: LD_INT 4
101549: PUSH
101550: FOR_TO
101551: IFFALSE 101572
// SetSkill ( i , j , 10 ) ;
101553: LD_VAR 0 2
101557: PPUSH
101558: LD_VAR 0 3
101562: PPUSH
101563: LD_INT 10
101565: PPUSH
101566: CALL_OW 237
101570: GO 101550
101572: POP
101573: POP
// end ;
101574: GO 101523
101576: POP
101577: POP
// end ;
101578: LD_VAR 0 1
101582: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
101583: LD_INT 0
101585: PPUSH
101586: PPUSH
101587: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
101588: LD_ADDR_VAR 0 2
101592: PUSH
101593: LD_INT 22
101595: PUSH
101596: LD_OWVAR 2
101600: PUSH
101601: EMPTY
101602: LIST
101603: LIST
101604: PUSH
101605: LD_INT 21
101607: PUSH
101608: LD_INT 1
101610: PUSH
101611: EMPTY
101612: LIST
101613: LIST
101614: PUSH
101615: EMPTY
101616: LIST
101617: LIST
101618: PPUSH
101619: CALL_OW 69
101623: PUSH
101624: FOR_IN
101625: IFFALSE 101666
// begin for j := 1 to 4 do
101627: LD_ADDR_VAR 0 3
101631: PUSH
101632: DOUBLE
101633: LD_INT 1
101635: DEC
101636: ST_TO_ADDR
101637: LD_INT 4
101639: PUSH
101640: FOR_TO
101641: IFFALSE 101662
// SetSkill ( i , j , 10 ) ;
101643: LD_VAR 0 2
101647: PPUSH
101648: LD_VAR 0 3
101652: PPUSH
101653: LD_INT 10
101655: PPUSH
101656: CALL_OW 237
101660: GO 101640
101662: POP
101663: POP
// end ;
101664: GO 101624
101666: POP
101667: POP
// end ;
101668: LD_VAR 0 1
101672: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
101673: LD_INT 0
101675: PPUSH
// uc_side := your_side ;
101676: LD_ADDR_OWVAR 20
101680: PUSH
101681: LD_OWVAR 2
101685: ST_TO_ADDR
// uc_nation := nation ;
101686: LD_ADDR_OWVAR 21
101690: PUSH
101691: LD_VAR 0 1
101695: ST_TO_ADDR
// InitHc ;
101696: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
101700: LD_INT 0
101702: PPUSH
101703: LD_VAR 0 2
101707: PPUSH
101708: LD_VAR 0 3
101712: PPUSH
101713: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
101717: LD_VAR 0 4
101721: PPUSH
101722: LD_VAR 0 5
101726: PPUSH
101727: CALL_OW 428
101731: PUSH
101732: LD_INT 0
101734: EQUAL
101735: IFFALSE 101759
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
101737: CALL_OW 44
101741: PPUSH
101742: LD_VAR 0 4
101746: PPUSH
101747: LD_VAR 0 5
101751: PPUSH
101752: LD_INT 1
101754: PPUSH
101755: CALL_OW 48
// end ;
101759: LD_VAR 0 6
101763: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
101764: LD_INT 0
101766: PPUSH
101767: PPUSH
// uc_side := your_side ;
101768: LD_ADDR_OWVAR 20
101772: PUSH
101773: LD_OWVAR 2
101777: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
101778: LD_VAR 0 1
101782: PUSH
101783: LD_INT 1
101785: PUSH
101786: LD_INT 2
101788: PUSH
101789: LD_INT 3
101791: PUSH
101792: LD_INT 4
101794: PUSH
101795: LD_INT 5
101797: PUSH
101798: EMPTY
101799: LIST
101800: LIST
101801: LIST
101802: LIST
101803: LIST
101804: IN
101805: IFFALSE 101817
// uc_nation := nation_american else
101807: LD_ADDR_OWVAR 21
101811: PUSH
101812: LD_INT 1
101814: ST_TO_ADDR
101815: GO 101860
// if chassis in [ 11 , 12 , 13 , 14 ] then
101817: LD_VAR 0 1
101821: PUSH
101822: LD_INT 11
101824: PUSH
101825: LD_INT 12
101827: PUSH
101828: LD_INT 13
101830: PUSH
101831: LD_INT 14
101833: PUSH
101834: EMPTY
101835: LIST
101836: LIST
101837: LIST
101838: LIST
101839: IN
101840: IFFALSE 101852
// uc_nation := nation_arabian else
101842: LD_ADDR_OWVAR 21
101846: PUSH
101847: LD_INT 2
101849: ST_TO_ADDR
101850: GO 101860
// uc_nation := nation_russian ;
101852: LD_ADDR_OWVAR 21
101856: PUSH
101857: LD_INT 3
101859: ST_TO_ADDR
// vc_chassis := chassis ;
101860: LD_ADDR_OWVAR 37
101864: PUSH
101865: LD_VAR 0 1
101869: ST_TO_ADDR
// vc_engine := engine ;
101870: LD_ADDR_OWVAR 39
101874: PUSH
101875: LD_VAR 0 2
101879: ST_TO_ADDR
// vc_control := control ;
101880: LD_ADDR_OWVAR 38
101884: PUSH
101885: LD_VAR 0 3
101889: ST_TO_ADDR
// vc_weapon := weapon ;
101890: LD_ADDR_OWVAR 40
101894: PUSH
101895: LD_VAR 0 4
101899: ST_TO_ADDR
// un := CreateVehicle ;
101900: LD_ADDR_VAR 0 8
101904: PUSH
101905: CALL_OW 45
101909: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
101910: LD_VAR 0 8
101914: PPUSH
101915: LD_INT 0
101917: PPUSH
101918: LD_INT 5
101920: PPUSH
101921: CALL_OW 12
101925: PPUSH
101926: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
101930: LD_VAR 0 8
101934: PPUSH
101935: LD_VAR 0 5
101939: PPUSH
101940: LD_VAR 0 6
101944: PPUSH
101945: LD_INT 1
101947: PPUSH
101948: CALL_OW 48
// end ;
101952: LD_VAR 0 7
101956: RET
// export hInvincible ; every 1 do
101957: GO 101959
101959: DISABLE
// hInvincible := [ ] ;
101960: LD_ADDR_EXP 148
101964: PUSH
101965: EMPTY
101966: ST_TO_ADDR
101967: END
// every 10 do var i ;
101968: GO 101970
101970: DISABLE
101971: LD_INT 0
101973: PPUSH
// begin enable ;
101974: ENABLE
// if not hInvincible then
101975: LD_EXP 148
101979: NOT
101980: IFFALSE 101984
// exit ;
101982: GO 102028
// for i in hInvincible do
101984: LD_ADDR_VAR 0 1
101988: PUSH
101989: LD_EXP 148
101993: PUSH
101994: FOR_IN
101995: IFFALSE 102026
// if GetLives ( i ) < 1000 then
101997: LD_VAR 0 1
102001: PPUSH
102002: CALL_OW 256
102006: PUSH
102007: LD_INT 1000
102009: LESS
102010: IFFALSE 102024
// SetLives ( i , 1000 ) ;
102012: LD_VAR 0 1
102016: PPUSH
102017: LD_INT 1000
102019: PPUSH
102020: CALL_OW 234
102024: GO 101994
102026: POP
102027: POP
// end ;
102028: PPOPN 1
102030: END
// export function hHackInvincible ; var i ; begin
102031: LD_INT 0
102033: PPUSH
102034: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
102035: LD_ADDR_VAR 0 2
102039: PUSH
102040: LD_INT 2
102042: PUSH
102043: LD_INT 21
102045: PUSH
102046: LD_INT 1
102048: PUSH
102049: EMPTY
102050: LIST
102051: LIST
102052: PUSH
102053: LD_INT 21
102055: PUSH
102056: LD_INT 2
102058: PUSH
102059: EMPTY
102060: LIST
102061: LIST
102062: PUSH
102063: EMPTY
102064: LIST
102065: LIST
102066: LIST
102067: PPUSH
102068: CALL_OW 69
102072: PUSH
102073: FOR_IN
102074: IFFALSE 102135
// if IsSelected ( i ) then
102076: LD_VAR 0 2
102080: PPUSH
102081: CALL_OW 306
102085: IFFALSE 102133
// begin if i in hInvincible then
102087: LD_VAR 0 2
102091: PUSH
102092: LD_EXP 148
102096: IN
102097: IFFALSE 102117
// hInvincible := hInvincible diff i else
102099: LD_ADDR_EXP 148
102103: PUSH
102104: LD_EXP 148
102108: PUSH
102109: LD_VAR 0 2
102113: DIFF
102114: ST_TO_ADDR
102115: GO 102133
// hInvincible := hInvincible union i ;
102117: LD_ADDR_EXP 148
102121: PUSH
102122: LD_EXP 148
102126: PUSH
102127: LD_VAR 0 2
102131: UNION
102132: ST_TO_ADDR
// end ;
102133: GO 102073
102135: POP
102136: POP
// end ;
102137: LD_VAR 0 1
102141: RET
// export function hHackInvisible ; var i , j ; begin
102142: LD_INT 0
102144: PPUSH
102145: PPUSH
102146: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
102147: LD_ADDR_VAR 0 2
102151: PUSH
102152: LD_INT 21
102154: PUSH
102155: LD_INT 1
102157: PUSH
102158: EMPTY
102159: LIST
102160: LIST
102161: PPUSH
102162: CALL_OW 69
102166: PUSH
102167: FOR_IN
102168: IFFALSE 102192
// if IsSelected ( i ) then
102170: LD_VAR 0 2
102174: PPUSH
102175: CALL_OW 306
102179: IFFALSE 102190
// ComForceInvisible ( i ) ;
102181: LD_VAR 0 2
102185: PPUSH
102186: CALL_OW 496
102190: GO 102167
102192: POP
102193: POP
// end ;
102194: LD_VAR 0 1
102198: RET
// export function hHackChangeYourSide ; begin
102199: LD_INT 0
102201: PPUSH
// if your_side = 8 then
102202: LD_OWVAR 2
102206: PUSH
102207: LD_INT 8
102209: EQUAL
102210: IFFALSE 102222
// your_side := 0 else
102212: LD_ADDR_OWVAR 2
102216: PUSH
102217: LD_INT 0
102219: ST_TO_ADDR
102220: GO 102236
// your_side := your_side + 1 ;
102222: LD_ADDR_OWVAR 2
102226: PUSH
102227: LD_OWVAR 2
102231: PUSH
102232: LD_INT 1
102234: PLUS
102235: ST_TO_ADDR
// end ;
102236: LD_VAR 0 1
102240: RET
// export function hHackChangeUnitSide ; var i , j ; begin
102241: LD_INT 0
102243: PPUSH
102244: PPUSH
102245: PPUSH
// for i in all_units do
102246: LD_ADDR_VAR 0 2
102250: PUSH
102251: LD_OWVAR 3
102255: PUSH
102256: FOR_IN
102257: IFFALSE 102335
// if IsSelected ( i ) then
102259: LD_VAR 0 2
102263: PPUSH
102264: CALL_OW 306
102268: IFFALSE 102333
// begin j := GetSide ( i ) ;
102270: LD_ADDR_VAR 0 3
102274: PUSH
102275: LD_VAR 0 2
102279: PPUSH
102280: CALL_OW 255
102284: ST_TO_ADDR
// if j = 8 then
102285: LD_VAR 0 3
102289: PUSH
102290: LD_INT 8
102292: EQUAL
102293: IFFALSE 102305
// j := 0 else
102295: LD_ADDR_VAR 0 3
102299: PUSH
102300: LD_INT 0
102302: ST_TO_ADDR
102303: GO 102319
// j := j + 1 ;
102305: LD_ADDR_VAR 0 3
102309: PUSH
102310: LD_VAR 0 3
102314: PUSH
102315: LD_INT 1
102317: PLUS
102318: ST_TO_ADDR
// SetSide ( i , j ) ;
102319: LD_VAR 0 2
102323: PPUSH
102324: LD_VAR 0 3
102328: PPUSH
102329: CALL_OW 235
// end ;
102333: GO 102256
102335: POP
102336: POP
// end ;
102337: LD_VAR 0 1
102341: RET
// export function hHackFog ; begin
102342: LD_INT 0
102344: PPUSH
// FogOff ( true ) ;
102345: LD_INT 1
102347: PPUSH
102348: CALL_OW 344
// end ;
102352: LD_VAR 0 1
102356: RET
// export function hHackTeleport ( unit , x , y ) ; begin
102357: LD_INT 0
102359: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
102360: LD_VAR 0 1
102364: PPUSH
102365: LD_VAR 0 2
102369: PPUSH
102370: LD_VAR 0 3
102374: PPUSH
102375: LD_INT 1
102377: PPUSH
102378: LD_INT 1
102380: PPUSH
102381: CALL_OW 483
// CenterOnXY ( x , y ) ;
102385: LD_VAR 0 2
102389: PPUSH
102390: LD_VAR 0 3
102394: PPUSH
102395: CALL_OW 84
// end ; end_of_file
102399: LD_VAR 0 4
102403: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
102404: LD_INT 0
102406: PPUSH
102407: PPUSH
102408: PPUSH
102409: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
102410: LD_VAR 0 1
102414: PPUSH
102415: CALL_OW 264
102419: PUSH
102420: LD_EXP 33
102424: EQUAL
102425: IFFALSE 102497
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
102427: LD_INT 68
102429: PPUSH
102430: LD_VAR 0 1
102434: PPUSH
102435: CALL_OW 255
102439: PPUSH
102440: CALL_OW 321
102444: PUSH
102445: LD_INT 2
102447: EQUAL
102448: IFFALSE 102460
// eff := 70 else
102450: LD_ADDR_VAR 0 4
102454: PUSH
102455: LD_INT 70
102457: ST_TO_ADDR
102458: GO 102468
// eff := 30 ;
102460: LD_ADDR_VAR 0 4
102464: PUSH
102465: LD_INT 30
102467: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
102468: LD_VAR 0 1
102472: PPUSH
102473: CALL_OW 250
102477: PPUSH
102478: LD_VAR 0 1
102482: PPUSH
102483: CALL_OW 251
102487: PPUSH
102488: LD_VAR 0 4
102492: PPUSH
102493: CALL_OW 495
// end ; end ;
102497: LD_VAR 0 2
102501: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
102502: LD_INT 0
102504: PPUSH
// end ;
102505: LD_VAR 0 4
102509: RET
// export function SOS_Command ( cmd ) ; begin
102510: LD_INT 0
102512: PPUSH
// end ;
102513: LD_VAR 0 2
102517: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
102518: LD_INT 0
102520: PPUSH
// if cmd = 121 then
102521: LD_VAR 0 1
102525: PUSH
102526: LD_INT 121
102528: EQUAL
102529: IFFALSE 102531
// end ;
102531: LD_VAR 0 6
102535: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
102536: LD_INT 0
102538: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
102539: LD_VAR 0 1
102543: PUSH
102544: LD_INT 250
102546: EQUAL
102547: PUSH
102548: LD_VAR 0 2
102552: PPUSH
102553: CALL_OW 264
102557: PUSH
102558: LD_EXP 36
102562: EQUAL
102563: AND
102564: IFFALSE 102585
// MinerPlaceMine ( unit , x , y ) ;
102566: LD_VAR 0 2
102570: PPUSH
102571: LD_VAR 0 4
102575: PPUSH
102576: LD_VAR 0 5
102580: PPUSH
102581: CALL 104934 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
102585: LD_VAR 0 1
102589: PUSH
102590: LD_INT 251
102592: EQUAL
102593: PUSH
102594: LD_VAR 0 2
102598: PPUSH
102599: CALL_OW 264
102603: PUSH
102604: LD_EXP 36
102608: EQUAL
102609: AND
102610: IFFALSE 102631
// MinerDetonateMine ( unit , x , y ) ;
102612: LD_VAR 0 2
102616: PPUSH
102617: LD_VAR 0 4
102621: PPUSH
102622: LD_VAR 0 5
102626: PPUSH
102627: CALL 105211 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
102631: LD_VAR 0 1
102635: PUSH
102636: LD_INT 252
102638: EQUAL
102639: PUSH
102640: LD_VAR 0 2
102644: PPUSH
102645: CALL_OW 264
102649: PUSH
102650: LD_EXP 36
102654: EQUAL
102655: AND
102656: IFFALSE 102677
// MinerCreateMinefield ( unit , x , y ) ;
102658: LD_VAR 0 2
102662: PPUSH
102663: LD_VAR 0 4
102667: PPUSH
102668: LD_VAR 0 5
102672: PPUSH
102673: CALL 105628 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
102677: LD_VAR 0 1
102681: PUSH
102682: LD_INT 253
102684: EQUAL
102685: PUSH
102686: LD_VAR 0 2
102690: PPUSH
102691: CALL_OW 257
102695: PUSH
102696: LD_INT 5
102698: EQUAL
102699: AND
102700: IFFALSE 102721
// ComBinocular ( unit , x , y ) ;
102702: LD_VAR 0 2
102706: PPUSH
102707: LD_VAR 0 4
102711: PPUSH
102712: LD_VAR 0 5
102716: PPUSH
102717: CALL 105999 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
102721: LD_VAR 0 1
102725: PUSH
102726: LD_INT 254
102728: EQUAL
102729: PUSH
102730: LD_VAR 0 2
102734: PPUSH
102735: CALL_OW 264
102739: PUSH
102740: LD_EXP 31
102744: EQUAL
102745: AND
102746: PUSH
102747: LD_VAR 0 3
102751: PPUSH
102752: CALL_OW 263
102756: PUSH
102757: LD_INT 3
102759: EQUAL
102760: AND
102761: IFFALSE 102777
// HackDestroyVehicle ( unit , selectedUnit ) ;
102763: LD_VAR 0 2
102767: PPUSH
102768: LD_VAR 0 3
102772: PPUSH
102773: CALL 104294 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
102777: LD_VAR 0 1
102781: PUSH
102782: LD_INT 255
102784: EQUAL
102785: PUSH
102786: LD_VAR 0 2
102790: PPUSH
102791: CALL_OW 264
102795: PUSH
102796: LD_INT 14
102798: PUSH
102799: LD_INT 53
102801: PUSH
102802: EMPTY
102803: LIST
102804: LIST
102805: IN
102806: AND
102807: PUSH
102808: LD_VAR 0 4
102812: PPUSH
102813: LD_VAR 0 5
102817: PPUSH
102818: CALL_OW 488
102822: AND
102823: IFFALSE 102847
// CutTreeXYR ( unit , x , y , 12 ) ;
102825: LD_VAR 0 2
102829: PPUSH
102830: LD_VAR 0 4
102834: PPUSH
102835: LD_VAR 0 5
102839: PPUSH
102840: LD_INT 12
102842: PPUSH
102843: CALL 102860 0 4
// end ;
102847: LD_VAR 0 6
102851: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
102852: LD_INT 0
102854: PPUSH
// end ;
102855: LD_VAR 0 4
102859: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
102860: LD_INT 0
102862: PPUSH
102863: PPUSH
102864: PPUSH
102865: PPUSH
102866: PPUSH
102867: PPUSH
102868: PPUSH
102869: PPUSH
102870: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
102871: LD_VAR 0 1
102875: NOT
102876: PUSH
102877: LD_VAR 0 2
102881: PPUSH
102882: LD_VAR 0 3
102886: PPUSH
102887: CALL_OW 488
102891: NOT
102892: OR
102893: PUSH
102894: LD_VAR 0 4
102898: NOT
102899: OR
102900: IFFALSE 102904
// exit ;
102902: GO 103244
// list := [ ] ;
102904: LD_ADDR_VAR 0 13
102908: PUSH
102909: EMPTY
102910: ST_TO_ADDR
// if x - r < 0 then
102911: LD_VAR 0 2
102915: PUSH
102916: LD_VAR 0 4
102920: MINUS
102921: PUSH
102922: LD_INT 0
102924: LESS
102925: IFFALSE 102937
// min_x := 0 else
102927: LD_ADDR_VAR 0 7
102931: PUSH
102932: LD_INT 0
102934: ST_TO_ADDR
102935: GO 102953
// min_x := x - r ;
102937: LD_ADDR_VAR 0 7
102941: PUSH
102942: LD_VAR 0 2
102946: PUSH
102947: LD_VAR 0 4
102951: MINUS
102952: ST_TO_ADDR
// if y - r < 0 then
102953: LD_VAR 0 3
102957: PUSH
102958: LD_VAR 0 4
102962: MINUS
102963: PUSH
102964: LD_INT 0
102966: LESS
102967: IFFALSE 102979
// min_y := 0 else
102969: LD_ADDR_VAR 0 8
102973: PUSH
102974: LD_INT 0
102976: ST_TO_ADDR
102977: GO 102995
// min_y := y - r ;
102979: LD_ADDR_VAR 0 8
102983: PUSH
102984: LD_VAR 0 3
102988: PUSH
102989: LD_VAR 0 4
102993: MINUS
102994: ST_TO_ADDR
// max_x := x + r ;
102995: LD_ADDR_VAR 0 9
102999: PUSH
103000: LD_VAR 0 2
103004: PUSH
103005: LD_VAR 0 4
103009: PLUS
103010: ST_TO_ADDR
// max_y := y + r ;
103011: LD_ADDR_VAR 0 10
103015: PUSH
103016: LD_VAR 0 3
103020: PUSH
103021: LD_VAR 0 4
103025: PLUS
103026: ST_TO_ADDR
// for _x = min_x to max_x do
103027: LD_ADDR_VAR 0 11
103031: PUSH
103032: DOUBLE
103033: LD_VAR 0 7
103037: DEC
103038: ST_TO_ADDR
103039: LD_VAR 0 9
103043: PUSH
103044: FOR_TO
103045: IFFALSE 103162
// for _y = min_y to max_y do
103047: LD_ADDR_VAR 0 12
103051: PUSH
103052: DOUBLE
103053: LD_VAR 0 8
103057: DEC
103058: ST_TO_ADDR
103059: LD_VAR 0 10
103063: PUSH
103064: FOR_TO
103065: IFFALSE 103158
// begin if not ValidHex ( _x , _y ) then
103067: LD_VAR 0 11
103071: PPUSH
103072: LD_VAR 0 12
103076: PPUSH
103077: CALL_OW 488
103081: NOT
103082: IFFALSE 103086
// continue ;
103084: GO 103064
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
103086: LD_VAR 0 11
103090: PPUSH
103091: LD_VAR 0 12
103095: PPUSH
103096: CALL_OW 351
103100: PUSH
103101: LD_VAR 0 11
103105: PPUSH
103106: LD_VAR 0 12
103110: PPUSH
103111: CALL_OW 554
103115: AND
103116: IFFALSE 103156
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
103118: LD_ADDR_VAR 0 13
103122: PUSH
103123: LD_VAR 0 13
103127: PPUSH
103128: LD_VAR 0 13
103132: PUSH
103133: LD_INT 1
103135: PLUS
103136: PPUSH
103137: LD_VAR 0 11
103141: PUSH
103142: LD_VAR 0 12
103146: PUSH
103147: EMPTY
103148: LIST
103149: LIST
103150: PPUSH
103151: CALL_OW 2
103155: ST_TO_ADDR
// end ;
103156: GO 103064
103158: POP
103159: POP
103160: GO 103044
103162: POP
103163: POP
// if not list then
103164: LD_VAR 0 13
103168: NOT
103169: IFFALSE 103173
// exit ;
103171: GO 103244
// for i in list do
103173: LD_ADDR_VAR 0 6
103177: PUSH
103178: LD_VAR 0 13
103182: PUSH
103183: FOR_IN
103184: IFFALSE 103242
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
103186: LD_VAR 0 1
103190: PPUSH
103191: LD_STRING M
103193: PUSH
103194: LD_VAR 0 6
103198: PUSH
103199: LD_INT 1
103201: ARRAY
103202: PUSH
103203: LD_VAR 0 6
103207: PUSH
103208: LD_INT 2
103210: ARRAY
103211: PUSH
103212: LD_INT 0
103214: PUSH
103215: LD_INT 0
103217: PUSH
103218: LD_INT 0
103220: PUSH
103221: LD_INT 0
103223: PUSH
103224: EMPTY
103225: LIST
103226: LIST
103227: LIST
103228: LIST
103229: LIST
103230: LIST
103231: LIST
103232: PUSH
103233: EMPTY
103234: LIST
103235: PPUSH
103236: CALL_OW 447
103240: GO 103183
103242: POP
103243: POP
// end ;
103244: LD_VAR 0 5
103248: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
103249: LD_EXP 151
103253: NOT
103254: IFFALSE 103304
103256: GO 103258
103258: DISABLE
// begin initHack := true ;
103259: LD_ADDR_EXP 151
103263: PUSH
103264: LD_INT 1
103266: ST_TO_ADDR
// hackTanks := [ ] ;
103267: LD_ADDR_EXP 152
103271: PUSH
103272: EMPTY
103273: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
103274: LD_ADDR_EXP 153
103278: PUSH
103279: EMPTY
103280: ST_TO_ADDR
// hackLimit := 3 ;
103281: LD_ADDR_EXP 154
103285: PUSH
103286: LD_INT 3
103288: ST_TO_ADDR
// hackDist := 12 ;
103289: LD_ADDR_EXP 155
103293: PUSH
103294: LD_INT 12
103296: ST_TO_ADDR
// hackCounter := [ ] ;
103297: LD_ADDR_EXP 156
103301: PUSH
103302: EMPTY
103303: ST_TO_ADDR
// end ;
103304: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
103305: LD_EXP 151
103309: PUSH
103310: LD_INT 34
103312: PUSH
103313: LD_EXP 31
103317: PUSH
103318: EMPTY
103319: LIST
103320: LIST
103321: PPUSH
103322: CALL_OW 69
103326: AND
103327: IFFALSE 103582
103329: GO 103331
103331: DISABLE
103332: LD_INT 0
103334: PPUSH
103335: PPUSH
// begin enable ;
103336: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
103337: LD_ADDR_VAR 0 1
103341: PUSH
103342: LD_INT 34
103344: PUSH
103345: LD_EXP 31
103349: PUSH
103350: EMPTY
103351: LIST
103352: LIST
103353: PPUSH
103354: CALL_OW 69
103358: PUSH
103359: FOR_IN
103360: IFFALSE 103580
// begin if not i in hackTanks then
103362: LD_VAR 0 1
103366: PUSH
103367: LD_EXP 152
103371: IN
103372: NOT
103373: IFFALSE 103456
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
103375: LD_ADDR_EXP 152
103379: PUSH
103380: LD_EXP 152
103384: PPUSH
103385: LD_EXP 152
103389: PUSH
103390: LD_INT 1
103392: PLUS
103393: PPUSH
103394: LD_VAR 0 1
103398: PPUSH
103399: CALL_OW 1
103403: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
103404: LD_ADDR_EXP 153
103408: PUSH
103409: LD_EXP 153
103413: PPUSH
103414: LD_EXP 153
103418: PUSH
103419: LD_INT 1
103421: PLUS
103422: PPUSH
103423: EMPTY
103424: PPUSH
103425: CALL_OW 1
103429: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
103430: LD_ADDR_EXP 156
103434: PUSH
103435: LD_EXP 156
103439: PPUSH
103440: LD_EXP 156
103444: PUSH
103445: LD_INT 1
103447: PLUS
103448: PPUSH
103449: EMPTY
103450: PPUSH
103451: CALL_OW 1
103455: ST_TO_ADDR
// end ; if not IsOk ( i ) then
103456: LD_VAR 0 1
103460: PPUSH
103461: CALL_OW 302
103465: NOT
103466: IFFALSE 103479
// begin HackUnlinkAll ( i ) ;
103468: LD_VAR 0 1
103472: PPUSH
103473: CALL 103585 0 1
// continue ;
103477: GO 103359
// end ; HackCheckCapturedStatus ( i ) ;
103479: LD_VAR 0 1
103483: PPUSH
103484: CALL 104028 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
103488: LD_ADDR_VAR 0 2
103492: PUSH
103493: LD_INT 81
103495: PUSH
103496: LD_VAR 0 1
103500: PPUSH
103501: CALL_OW 255
103505: PUSH
103506: EMPTY
103507: LIST
103508: LIST
103509: PUSH
103510: LD_INT 33
103512: PUSH
103513: LD_INT 3
103515: PUSH
103516: EMPTY
103517: LIST
103518: LIST
103519: PUSH
103520: LD_INT 91
103522: PUSH
103523: LD_VAR 0 1
103527: PUSH
103528: LD_EXP 155
103532: PUSH
103533: EMPTY
103534: LIST
103535: LIST
103536: LIST
103537: PUSH
103538: LD_INT 50
103540: PUSH
103541: EMPTY
103542: LIST
103543: PUSH
103544: EMPTY
103545: LIST
103546: LIST
103547: LIST
103548: LIST
103549: PPUSH
103550: CALL_OW 69
103554: ST_TO_ADDR
// if not tmp then
103555: LD_VAR 0 2
103559: NOT
103560: IFFALSE 103564
// continue ;
103562: GO 103359
// HackLink ( i , tmp ) ;
103564: LD_VAR 0 1
103568: PPUSH
103569: LD_VAR 0 2
103573: PPUSH
103574: CALL 103721 0 2
// end ;
103578: GO 103359
103580: POP
103581: POP
// end ;
103582: PPOPN 2
103584: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
103585: LD_INT 0
103587: PPUSH
103588: PPUSH
103589: PPUSH
// if not hack in hackTanks then
103590: LD_VAR 0 1
103594: PUSH
103595: LD_EXP 152
103599: IN
103600: NOT
103601: IFFALSE 103605
// exit ;
103603: GO 103716
// index := GetElementIndex ( hackTanks , hack ) ;
103605: LD_ADDR_VAR 0 4
103609: PUSH
103610: LD_EXP 152
103614: PPUSH
103615: LD_VAR 0 1
103619: PPUSH
103620: CALL 24482 0 2
103624: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
103625: LD_EXP 153
103629: PUSH
103630: LD_VAR 0 4
103634: ARRAY
103635: IFFALSE 103716
// begin for i in hackTanksCaptured [ index ] do
103637: LD_ADDR_VAR 0 3
103641: PUSH
103642: LD_EXP 153
103646: PUSH
103647: LD_VAR 0 4
103651: ARRAY
103652: PUSH
103653: FOR_IN
103654: IFFALSE 103680
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
103656: LD_VAR 0 3
103660: PUSH
103661: LD_INT 1
103663: ARRAY
103664: PPUSH
103665: LD_VAR 0 3
103669: PUSH
103670: LD_INT 2
103672: ARRAY
103673: PPUSH
103674: CALL_OW 235
103678: GO 103653
103680: POP
103681: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
103682: LD_ADDR_EXP 153
103686: PUSH
103687: LD_EXP 153
103691: PPUSH
103692: LD_VAR 0 4
103696: PPUSH
103697: EMPTY
103698: PPUSH
103699: CALL_OW 1
103703: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
103704: LD_VAR 0 1
103708: PPUSH
103709: LD_INT 0
103711: PPUSH
103712: CALL_OW 505
// end ; end ;
103716: LD_VAR 0 2
103720: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
103721: LD_INT 0
103723: PPUSH
103724: PPUSH
103725: PPUSH
// if not hack in hackTanks or not vehicles then
103726: LD_VAR 0 1
103730: PUSH
103731: LD_EXP 152
103735: IN
103736: NOT
103737: PUSH
103738: LD_VAR 0 2
103742: NOT
103743: OR
103744: IFFALSE 103748
// exit ;
103746: GO 104023
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
103748: LD_ADDR_VAR 0 2
103752: PUSH
103753: LD_VAR 0 1
103757: PPUSH
103758: LD_VAR 0 2
103762: PPUSH
103763: LD_INT 1
103765: PPUSH
103766: LD_INT 1
103768: PPUSH
103769: CALL 25132 0 4
103773: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
103774: LD_ADDR_VAR 0 5
103778: PUSH
103779: LD_EXP 152
103783: PPUSH
103784: LD_VAR 0 1
103788: PPUSH
103789: CALL 24482 0 2
103793: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
103794: LD_EXP 153
103798: PUSH
103799: LD_VAR 0 5
103803: ARRAY
103804: PUSH
103805: LD_EXP 154
103809: LESS
103810: IFFALSE 103999
// begin for i := 1 to vehicles do
103812: LD_ADDR_VAR 0 4
103816: PUSH
103817: DOUBLE
103818: LD_INT 1
103820: DEC
103821: ST_TO_ADDR
103822: LD_VAR 0 2
103826: PUSH
103827: FOR_TO
103828: IFFALSE 103997
// begin if hackTanksCaptured [ index ] = hackLimit then
103830: LD_EXP 153
103834: PUSH
103835: LD_VAR 0 5
103839: ARRAY
103840: PUSH
103841: LD_EXP 154
103845: EQUAL
103846: IFFALSE 103850
// break ;
103848: GO 103997
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
103850: LD_ADDR_EXP 156
103854: PUSH
103855: LD_EXP 156
103859: PPUSH
103860: LD_VAR 0 5
103864: PPUSH
103865: LD_EXP 156
103869: PUSH
103870: LD_VAR 0 5
103874: ARRAY
103875: PUSH
103876: LD_INT 1
103878: PLUS
103879: PPUSH
103880: CALL_OW 1
103884: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
103885: LD_ADDR_EXP 153
103889: PUSH
103890: LD_EXP 153
103894: PPUSH
103895: LD_VAR 0 5
103899: PUSH
103900: LD_EXP 153
103904: PUSH
103905: LD_VAR 0 5
103909: ARRAY
103910: PUSH
103911: LD_INT 1
103913: PLUS
103914: PUSH
103915: EMPTY
103916: LIST
103917: LIST
103918: PPUSH
103919: LD_VAR 0 2
103923: PUSH
103924: LD_VAR 0 4
103928: ARRAY
103929: PUSH
103930: LD_VAR 0 2
103934: PUSH
103935: LD_VAR 0 4
103939: ARRAY
103940: PPUSH
103941: CALL_OW 255
103945: PUSH
103946: EMPTY
103947: LIST
103948: LIST
103949: PPUSH
103950: CALL 24697 0 3
103954: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
103955: LD_VAR 0 2
103959: PUSH
103960: LD_VAR 0 4
103964: ARRAY
103965: PPUSH
103966: LD_VAR 0 1
103970: PPUSH
103971: CALL_OW 255
103975: PPUSH
103976: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
103980: LD_VAR 0 2
103984: PUSH
103985: LD_VAR 0 4
103989: ARRAY
103990: PPUSH
103991: CALL_OW 141
// end ;
103995: GO 103827
103997: POP
103998: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
103999: LD_VAR 0 1
104003: PPUSH
104004: LD_EXP 153
104008: PUSH
104009: LD_VAR 0 5
104013: ARRAY
104014: PUSH
104015: LD_INT 0
104017: PLUS
104018: PPUSH
104019: CALL_OW 505
// end ;
104023: LD_VAR 0 3
104027: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
104028: LD_INT 0
104030: PPUSH
104031: PPUSH
104032: PPUSH
104033: PPUSH
// if not hack in hackTanks then
104034: LD_VAR 0 1
104038: PUSH
104039: LD_EXP 152
104043: IN
104044: NOT
104045: IFFALSE 104049
// exit ;
104047: GO 104289
// index := GetElementIndex ( hackTanks , hack ) ;
104049: LD_ADDR_VAR 0 4
104053: PUSH
104054: LD_EXP 152
104058: PPUSH
104059: LD_VAR 0 1
104063: PPUSH
104064: CALL 24482 0 2
104068: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
104069: LD_ADDR_VAR 0 3
104073: PUSH
104074: DOUBLE
104075: LD_EXP 153
104079: PUSH
104080: LD_VAR 0 4
104084: ARRAY
104085: INC
104086: ST_TO_ADDR
104087: LD_INT 1
104089: PUSH
104090: FOR_DOWNTO
104091: IFFALSE 104263
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
104093: LD_ADDR_VAR 0 5
104097: PUSH
104098: LD_EXP 153
104102: PUSH
104103: LD_VAR 0 4
104107: ARRAY
104108: PUSH
104109: LD_VAR 0 3
104113: ARRAY
104114: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
104115: LD_VAR 0 5
104119: PUSH
104120: LD_INT 1
104122: ARRAY
104123: PPUSH
104124: CALL_OW 302
104128: NOT
104129: PUSH
104130: LD_VAR 0 5
104134: PUSH
104135: LD_INT 1
104137: ARRAY
104138: PPUSH
104139: CALL_OW 255
104143: PUSH
104144: LD_VAR 0 1
104148: PPUSH
104149: CALL_OW 255
104153: NONEQUAL
104154: OR
104155: IFFALSE 104261
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
104157: LD_VAR 0 5
104161: PUSH
104162: LD_INT 1
104164: ARRAY
104165: PPUSH
104166: CALL_OW 305
104170: PUSH
104171: LD_VAR 0 5
104175: PUSH
104176: LD_INT 1
104178: ARRAY
104179: PPUSH
104180: CALL_OW 255
104184: PUSH
104185: LD_VAR 0 1
104189: PPUSH
104190: CALL_OW 255
104194: EQUAL
104195: AND
104196: IFFALSE 104220
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
104198: LD_VAR 0 5
104202: PUSH
104203: LD_INT 1
104205: ARRAY
104206: PPUSH
104207: LD_VAR 0 5
104211: PUSH
104212: LD_INT 2
104214: ARRAY
104215: PPUSH
104216: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
104220: LD_ADDR_EXP 153
104224: PUSH
104225: LD_EXP 153
104229: PPUSH
104230: LD_VAR 0 4
104234: PPUSH
104235: LD_EXP 153
104239: PUSH
104240: LD_VAR 0 4
104244: ARRAY
104245: PPUSH
104246: LD_VAR 0 3
104250: PPUSH
104251: CALL_OW 3
104255: PPUSH
104256: CALL_OW 1
104260: ST_TO_ADDR
// end ; end ;
104261: GO 104090
104263: POP
104264: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
104265: LD_VAR 0 1
104269: PPUSH
104270: LD_EXP 153
104274: PUSH
104275: LD_VAR 0 4
104279: ARRAY
104280: PUSH
104281: LD_INT 0
104283: PLUS
104284: PPUSH
104285: CALL_OW 505
// end ;
104289: LD_VAR 0 2
104293: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
104294: LD_INT 0
104296: PPUSH
104297: PPUSH
104298: PPUSH
104299: PPUSH
// if not hack in hackTanks then
104300: LD_VAR 0 1
104304: PUSH
104305: LD_EXP 152
104309: IN
104310: NOT
104311: IFFALSE 104315
// exit ;
104313: GO 104400
// index := GetElementIndex ( hackTanks , hack ) ;
104315: LD_ADDR_VAR 0 5
104319: PUSH
104320: LD_EXP 152
104324: PPUSH
104325: LD_VAR 0 1
104329: PPUSH
104330: CALL 24482 0 2
104334: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
104335: LD_ADDR_VAR 0 4
104339: PUSH
104340: DOUBLE
104341: LD_INT 1
104343: DEC
104344: ST_TO_ADDR
104345: LD_EXP 153
104349: PUSH
104350: LD_VAR 0 5
104354: ARRAY
104355: PUSH
104356: FOR_TO
104357: IFFALSE 104398
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
104359: LD_EXP 153
104363: PUSH
104364: LD_VAR 0 5
104368: ARRAY
104369: PUSH
104370: LD_VAR 0 4
104374: ARRAY
104375: PUSH
104376: LD_INT 1
104378: ARRAY
104379: PUSH
104380: LD_VAR 0 2
104384: EQUAL
104385: IFFALSE 104396
// KillUnit ( vehicle ) ;
104387: LD_VAR 0 2
104391: PPUSH
104392: CALL_OW 66
104396: GO 104356
104398: POP
104399: POP
// end ;
104400: LD_VAR 0 3
104404: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
104405: LD_EXP 157
104409: NOT
104410: IFFALSE 104445
104412: GO 104414
104414: DISABLE
// begin initMiner := true ;
104415: LD_ADDR_EXP 157
104419: PUSH
104420: LD_INT 1
104422: ST_TO_ADDR
// minersList := [ ] ;
104423: LD_ADDR_EXP 158
104427: PUSH
104428: EMPTY
104429: ST_TO_ADDR
// minerMinesList := [ ] ;
104430: LD_ADDR_EXP 159
104434: PUSH
104435: EMPTY
104436: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
104437: LD_ADDR_EXP 160
104441: PUSH
104442: LD_INT 5
104444: ST_TO_ADDR
// end ;
104445: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
104446: LD_EXP 157
104450: PUSH
104451: LD_INT 34
104453: PUSH
104454: LD_EXP 36
104458: PUSH
104459: EMPTY
104460: LIST
104461: LIST
104462: PPUSH
104463: CALL_OW 69
104467: AND
104468: IFFALSE 104931
104470: GO 104472
104472: DISABLE
104473: LD_INT 0
104475: PPUSH
104476: PPUSH
104477: PPUSH
104478: PPUSH
// begin enable ;
104479: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
104480: LD_ADDR_VAR 0 1
104484: PUSH
104485: LD_INT 34
104487: PUSH
104488: LD_EXP 36
104492: PUSH
104493: EMPTY
104494: LIST
104495: LIST
104496: PPUSH
104497: CALL_OW 69
104501: PUSH
104502: FOR_IN
104503: IFFALSE 104575
// begin if not i in minersList then
104505: LD_VAR 0 1
104509: PUSH
104510: LD_EXP 158
104514: IN
104515: NOT
104516: IFFALSE 104573
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
104518: LD_ADDR_EXP 158
104522: PUSH
104523: LD_EXP 158
104527: PPUSH
104528: LD_EXP 158
104532: PUSH
104533: LD_INT 1
104535: PLUS
104536: PPUSH
104537: LD_VAR 0 1
104541: PPUSH
104542: CALL_OW 1
104546: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
104547: LD_ADDR_EXP 159
104551: PUSH
104552: LD_EXP 159
104556: PPUSH
104557: LD_EXP 159
104561: PUSH
104562: LD_INT 1
104564: PLUS
104565: PPUSH
104566: EMPTY
104567: PPUSH
104568: CALL_OW 1
104572: ST_TO_ADDR
// end end ;
104573: GO 104502
104575: POP
104576: POP
// for i := minerMinesList downto 1 do
104577: LD_ADDR_VAR 0 1
104581: PUSH
104582: DOUBLE
104583: LD_EXP 159
104587: INC
104588: ST_TO_ADDR
104589: LD_INT 1
104591: PUSH
104592: FOR_DOWNTO
104593: IFFALSE 104929
// begin if IsLive ( minersList [ i ] ) then
104595: LD_EXP 158
104599: PUSH
104600: LD_VAR 0 1
104604: ARRAY
104605: PPUSH
104606: CALL_OW 300
104610: IFFALSE 104638
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
104612: LD_EXP 158
104616: PUSH
104617: LD_VAR 0 1
104621: ARRAY
104622: PPUSH
104623: LD_EXP 159
104627: PUSH
104628: LD_VAR 0 1
104632: ARRAY
104633: PPUSH
104634: CALL_OW 505
// if not minerMinesList [ i ] then
104638: LD_EXP 159
104642: PUSH
104643: LD_VAR 0 1
104647: ARRAY
104648: NOT
104649: IFFALSE 104653
// continue ;
104651: GO 104592
// for j := minerMinesList [ i ] downto 1 do
104653: LD_ADDR_VAR 0 2
104657: PUSH
104658: DOUBLE
104659: LD_EXP 159
104663: PUSH
104664: LD_VAR 0 1
104668: ARRAY
104669: INC
104670: ST_TO_ADDR
104671: LD_INT 1
104673: PUSH
104674: FOR_DOWNTO
104675: IFFALSE 104925
// begin side := GetSide ( minersList [ i ] ) ;
104677: LD_ADDR_VAR 0 3
104681: PUSH
104682: LD_EXP 158
104686: PUSH
104687: LD_VAR 0 1
104691: ARRAY
104692: PPUSH
104693: CALL_OW 255
104697: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
104698: LD_ADDR_VAR 0 4
104702: PUSH
104703: LD_EXP 159
104707: PUSH
104708: LD_VAR 0 1
104712: ARRAY
104713: PUSH
104714: LD_VAR 0 2
104718: ARRAY
104719: PUSH
104720: LD_INT 1
104722: ARRAY
104723: PPUSH
104724: LD_EXP 159
104728: PUSH
104729: LD_VAR 0 1
104733: ARRAY
104734: PUSH
104735: LD_VAR 0 2
104739: ARRAY
104740: PUSH
104741: LD_INT 2
104743: ARRAY
104744: PPUSH
104745: CALL_OW 428
104749: ST_TO_ADDR
// if not tmp then
104750: LD_VAR 0 4
104754: NOT
104755: IFFALSE 104759
// continue ;
104757: GO 104674
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
104759: LD_VAR 0 4
104763: PUSH
104764: LD_INT 81
104766: PUSH
104767: LD_VAR 0 3
104771: PUSH
104772: EMPTY
104773: LIST
104774: LIST
104775: PPUSH
104776: CALL_OW 69
104780: IN
104781: PUSH
104782: LD_EXP 159
104786: PUSH
104787: LD_VAR 0 1
104791: ARRAY
104792: PUSH
104793: LD_VAR 0 2
104797: ARRAY
104798: PUSH
104799: LD_INT 1
104801: ARRAY
104802: PPUSH
104803: LD_EXP 159
104807: PUSH
104808: LD_VAR 0 1
104812: ARRAY
104813: PUSH
104814: LD_VAR 0 2
104818: ARRAY
104819: PUSH
104820: LD_INT 2
104822: ARRAY
104823: PPUSH
104824: CALL_OW 458
104828: AND
104829: IFFALSE 104923
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
104831: LD_EXP 159
104835: PUSH
104836: LD_VAR 0 1
104840: ARRAY
104841: PUSH
104842: LD_VAR 0 2
104846: ARRAY
104847: PUSH
104848: LD_INT 1
104850: ARRAY
104851: PPUSH
104852: LD_EXP 159
104856: PUSH
104857: LD_VAR 0 1
104861: ARRAY
104862: PUSH
104863: LD_VAR 0 2
104867: ARRAY
104868: PUSH
104869: LD_INT 2
104871: ARRAY
104872: PPUSH
104873: LD_VAR 0 3
104877: PPUSH
104878: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
104882: LD_ADDR_EXP 159
104886: PUSH
104887: LD_EXP 159
104891: PPUSH
104892: LD_VAR 0 1
104896: PPUSH
104897: LD_EXP 159
104901: PUSH
104902: LD_VAR 0 1
104906: ARRAY
104907: PPUSH
104908: LD_VAR 0 2
104912: PPUSH
104913: CALL_OW 3
104917: PPUSH
104918: CALL_OW 1
104922: ST_TO_ADDR
// end ; end ;
104923: GO 104674
104925: POP
104926: POP
// end ;
104927: GO 104592
104929: POP
104930: POP
// end ;
104931: PPOPN 4
104933: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
104934: LD_INT 0
104936: PPUSH
104937: PPUSH
// result := false ;
104938: LD_ADDR_VAR 0 4
104942: PUSH
104943: LD_INT 0
104945: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
104946: LD_VAR 0 1
104950: PPUSH
104951: CALL_OW 264
104955: PUSH
104956: LD_EXP 36
104960: EQUAL
104961: NOT
104962: IFFALSE 104966
// exit ;
104964: GO 105206
// index := GetElementIndex ( minersList , unit ) ;
104966: LD_ADDR_VAR 0 5
104970: PUSH
104971: LD_EXP 158
104975: PPUSH
104976: LD_VAR 0 1
104980: PPUSH
104981: CALL 24482 0 2
104985: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
104986: LD_EXP 159
104990: PUSH
104991: LD_VAR 0 5
104995: ARRAY
104996: PUSH
104997: LD_EXP 160
105001: GREATEREQUAL
105002: IFFALSE 105006
// exit ;
105004: GO 105206
// ComMoveXY ( unit , x , y ) ;
105006: LD_VAR 0 1
105010: PPUSH
105011: LD_VAR 0 2
105015: PPUSH
105016: LD_VAR 0 3
105020: PPUSH
105021: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
105025: LD_INT 35
105027: PPUSH
105028: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
105032: LD_VAR 0 1
105036: PPUSH
105037: LD_VAR 0 2
105041: PPUSH
105042: LD_VAR 0 3
105046: PPUSH
105047: CALL 55254 0 3
105051: NOT
105052: PUSH
105053: LD_VAR 0 1
105057: PPUSH
105058: CALL_OW 314
105062: AND
105063: IFFALSE 105067
// exit ;
105065: GO 105206
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
105067: LD_VAR 0 2
105071: PPUSH
105072: LD_VAR 0 3
105076: PPUSH
105077: CALL_OW 428
105081: PUSH
105082: LD_VAR 0 1
105086: EQUAL
105087: PUSH
105088: LD_VAR 0 1
105092: PPUSH
105093: CALL_OW 314
105097: NOT
105098: AND
105099: IFFALSE 105025
// PlaySoundXY ( x , y , PlantMine ) ;
105101: LD_VAR 0 2
105105: PPUSH
105106: LD_VAR 0 3
105110: PPUSH
105111: LD_STRING PlantMine
105113: PPUSH
105114: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
105118: LD_VAR 0 2
105122: PPUSH
105123: LD_VAR 0 3
105127: PPUSH
105128: LD_VAR 0 1
105132: PPUSH
105133: CALL_OW 255
105137: PPUSH
105138: LD_INT 0
105140: PPUSH
105141: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
105145: LD_ADDR_EXP 159
105149: PUSH
105150: LD_EXP 159
105154: PPUSH
105155: LD_VAR 0 5
105159: PUSH
105160: LD_EXP 159
105164: PUSH
105165: LD_VAR 0 5
105169: ARRAY
105170: PUSH
105171: LD_INT 1
105173: PLUS
105174: PUSH
105175: EMPTY
105176: LIST
105177: LIST
105178: PPUSH
105179: LD_VAR 0 2
105183: PUSH
105184: LD_VAR 0 3
105188: PUSH
105189: EMPTY
105190: LIST
105191: LIST
105192: PPUSH
105193: CALL 24697 0 3
105197: ST_TO_ADDR
// result := true ;
105198: LD_ADDR_VAR 0 4
105202: PUSH
105203: LD_INT 1
105205: ST_TO_ADDR
// end ;
105206: LD_VAR 0 4
105210: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
105211: LD_INT 0
105213: PPUSH
105214: PPUSH
105215: PPUSH
// if not unit in minersList then
105216: LD_VAR 0 1
105220: PUSH
105221: LD_EXP 158
105225: IN
105226: NOT
105227: IFFALSE 105231
// exit ;
105229: GO 105623
// index := GetElementIndex ( minersList , unit ) ;
105231: LD_ADDR_VAR 0 6
105235: PUSH
105236: LD_EXP 158
105240: PPUSH
105241: LD_VAR 0 1
105245: PPUSH
105246: CALL 24482 0 2
105250: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
105251: LD_ADDR_VAR 0 5
105255: PUSH
105256: DOUBLE
105257: LD_EXP 159
105261: PUSH
105262: LD_VAR 0 6
105266: ARRAY
105267: INC
105268: ST_TO_ADDR
105269: LD_INT 1
105271: PUSH
105272: FOR_DOWNTO
105273: IFFALSE 105434
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
105275: LD_EXP 159
105279: PUSH
105280: LD_VAR 0 6
105284: ARRAY
105285: PUSH
105286: LD_VAR 0 5
105290: ARRAY
105291: PUSH
105292: LD_INT 1
105294: ARRAY
105295: PUSH
105296: LD_VAR 0 2
105300: EQUAL
105301: PUSH
105302: LD_EXP 159
105306: PUSH
105307: LD_VAR 0 6
105311: ARRAY
105312: PUSH
105313: LD_VAR 0 5
105317: ARRAY
105318: PUSH
105319: LD_INT 2
105321: ARRAY
105322: PUSH
105323: LD_VAR 0 3
105327: EQUAL
105328: AND
105329: IFFALSE 105432
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
105331: LD_EXP 159
105335: PUSH
105336: LD_VAR 0 6
105340: ARRAY
105341: PUSH
105342: LD_VAR 0 5
105346: ARRAY
105347: PUSH
105348: LD_INT 1
105350: ARRAY
105351: PPUSH
105352: LD_EXP 159
105356: PUSH
105357: LD_VAR 0 6
105361: ARRAY
105362: PUSH
105363: LD_VAR 0 5
105367: ARRAY
105368: PUSH
105369: LD_INT 2
105371: ARRAY
105372: PPUSH
105373: LD_VAR 0 1
105377: PPUSH
105378: CALL_OW 255
105382: PPUSH
105383: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
105387: LD_ADDR_EXP 159
105391: PUSH
105392: LD_EXP 159
105396: PPUSH
105397: LD_VAR 0 6
105401: PPUSH
105402: LD_EXP 159
105406: PUSH
105407: LD_VAR 0 6
105411: ARRAY
105412: PPUSH
105413: LD_VAR 0 5
105417: PPUSH
105418: CALL_OW 3
105422: PPUSH
105423: CALL_OW 1
105427: ST_TO_ADDR
// exit ;
105428: POP
105429: POP
105430: GO 105623
// end ; end ;
105432: GO 105272
105434: POP
105435: POP
// for i := minerMinesList [ index ] downto 1 do
105436: LD_ADDR_VAR 0 5
105440: PUSH
105441: DOUBLE
105442: LD_EXP 159
105446: PUSH
105447: LD_VAR 0 6
105451: ARRAY
105452: INC
105453: ST_TO_ADDR
105454: LD_INT 1
105456: PUSH
105457: FOR_DOWNTO
105458: IFFALSE 105621
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
105460: LD_EXP 159
105464: PUSH
105465: LD_VAR 0 6
105469: ARRAY
105470: PUSH
105471: LD_VAR 0 5
105475: ARRAY
105476: PUSH
105477: LD_INT 1
105479: ARRAY
105480: PPUSH
105481: LD_EXP 159
105485: PUSH
105486: LD_VAR 0 6
105490: ARRAY
105491: PUSH
105492: LD_VAR 0 5
105496: ARRAY
105497: PUSH
105498: LD_INT 2
105500: ARRAY
105501: PPUSH
105502: LD_VAR 0 2
105506: PPUSH
105507: LD_VAR 0 3
105511: PPUSH
105512: CALL_OW 298
105516: PUSH
105517: LD_INT 6
105519: LESS
105520: IFFALSE 105619
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
105522: LD_EXP 159
105526: PUSH
105527: LD_VAR 0 6
105531: ARRAY
105532: PUSH
105533: LD_VAR 0 5
105537: ARRAY
105538: PUSH
105539: LD_INT 1
105541: ARRAY
105542: PPUSH
105543: LD_EXP 159
105547: PUSH
105548: LD_VAR 0 6
105552: ARRAY
105553: PUSH
105554: LD_VAR 0 5
105558: ARRAY
105559: PUSH
105560: LD_INT 2
105562: ARRAY
105563: PPUSH
105564: LD_VAR 0 1
105568: PPUSH
105569: CALL_OW 255
105573: PPUSH
105574: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
105578: LD_ADDR_EXP 159
105582: PUSH
105583: LD_EXP 159
105587: PPUSH
105588: LD_VAR 0 6
105592: PPUSH
105593: LD_EXP 159
105597: PUSH
105598: LD_VAR 0 6
105602: ARRAY
105603: PPUSH
105604: LD_VAR 0 5
105608: PPUSH
105609: CALL_OW 3
105613: PPUSH
105614: CALL_OW 1
105618: ST_TO_ADDR
// end ; end ;
105619: GO 105457
105621: POP
105622: POP
// end ;
105623: LD_VAR 0 4
105627: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
105628: LD_INT 0
105630: PPUSH
105631: PPUSH
105632: PPUSH
105633: PPUSH
105634: PPUSH
105635: PPUSH
105636: PPUSH
105637: PPUSH
105638: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
105639: LD_VAR 0 1
105643: PPUSH
105644: CALL_OW 264
105648: PUSH
105649: LD_EXP 36
105653: EQUAL
105654: NOT
105655: PUSH
105656: LD_VAR 0 1
105660: PUSH
105661: LD_EXP 158
105665: IN
105666: NOT
105667: OR
105668: IFFALSE 105672
// exit ;
105670: GO 105994
// index := GetElementIndex ( minersList , unit ) ;
105672: LD_ADDR_VAR 0 6
105676: PUSH
105677: LD_EXP 158
105681: PPUSH
105682: LD_VAR 0 1
105686: PPUSH
105687: CALL 24482 0 2
105691: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
105692: LD_ADDR_VAR 0 8
105696: PUSH
105697: LD_EXP 160
105701: PUSH
105702: LD_EXP 159
105706: PUSH
105707: LD_VAR 0 6
105711: ARRAY
105712: MINUS
105713: ST_TO_ADDR
// if not minesFreeAmount then
105714: LD_VAR 0 8
105718: NOT
105719: IFFALSE 105723
// exit ;
105721: GO 105994
// tmp := [ ] ;
105723: LD_ADDR_VAR 0 7
105727: PUSH
105728: EMPTY
105729: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
105730: LD_ADDR_VAR 0 5
105734: PUSH
105735: DOUBLE
105736: LD_INT 1
105738: DEC
105739: ST_TO_ADDR
105740: LD_VAR 0 8
105744: PUSH
105745: FOR_TO
105746: IFFALSE 105941
// begin _d := rand ( 0 , 5 ) ;
105748: LD_ADDR_VAR 0 11
105752: PUSH
105753: LD_INT 0
105755: PPUSH
105756: LD_INT 5
105758: PPUSH
105759: CALL_OW 12
105763: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
105764: LD_ADDR_VAR 0 12
105768: PUSH
105769: LD_INT 2
105771: PPUSH
105772: LD_INT 6
105774: PPUSH
105775: CALL_OW 12
105779: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
105780: LD_ADDR_VAR 0 9
105784: PUSH
105785: LD_VAR 0 2
105789: PPUSH
105790: LD_VAR 0 11
105794: PPUSH
105795: LD_VAR 0 12
105799: PPUSH
105800: CALL_OW 272
105804: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
105805: LD_ADDR_VAR 0 10
105809: PUSH
105810: LD_VAR 0 3
105814: PPUSH
105815: LD_VAR 0 11
105819: PPUSH
105820: LD_VAR 0 12
105824: PPUSH
105825: CALL_OW 273
105829: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
105830: LD_VAR 0 9
105834: PPUSH
105835: LD_VAR 0 10
105839: PPUSH
105840: CALL_OW 488
105844: PUSH
105845: LD_VAR 0 9
105849: PUSH
105850: LD_VAR 0 10
105854: PUSH
105855: EMPTY
105856: LIST
105857: LIST
105858: PUSH
105859: LD_VAR 0 7
105863: IN
105864: NOT
105865: AND
105866: PUSH
105867: LD_VAR 0 9
105871: PPUSH
105872: LD_VAR 0 10
105876: PPUSH
105877: CALL_OW 458
105881: NOT
105882: AND
105883: IFFALSE 105925
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
105885: LD_ADDR_VAR 0 7
105889: PUSH
105890: LD_VAR 0 7
105894: PPUSH
105895: LD_VAR 0 7
105899: PUSH
105900: LD_INT 1
105902: PLUS
105903: PPUSH
105904: LD_VAR 0 9
105908: PUSH
105909: LD_VAR 0 10
105913: PUSH
105914: EMPTY
105915: LIST
105916: LIST
105917: PPUSH
105918: CALL_OW 1
105922: ST_TO_ADDR
105923: GO 105939
// i := i - 1 ;
105925: LD_ADDR_VAR 0 5
105929: PUSH
105930: LD_VAR 0 5
105934: PUSH
105935: LD_INT 1
105937: MINUS
105938: ST_TO_ADDR
// end ;
105939: GO 105745
105941: POP
105942: POP
// for i in tmp do
105943: LD_ADDR_VAR 0 5
105947: PUSH
105948: LD_VAR 0 7
105952: PUSH
105953: FOR_IN
105954: IFFALSE 105992
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
105956: LD_VAR 0 1
105960: PPUSH
105961: LD_VAR 0 5
105965: PUSH
105966: LD_INT 1
105968: ARRAY
105969: PPUSH
105970: LD_VAR 0 5
105974: PUSH
105975: LD_INT 2
105977: ARRAY
105978: PPUSH
105979: CALL 104934 0 3
105983: NOT
105984: IFFALSE 105990
// exit ;
105986: POP
105987: POP
105988: GO 105994
105990: GO 105953
105992: POP
105993: POP
// end ;
105994: LD_VAR 0 4
105998: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
105999: LD_INT 0
106001: PPUSH
106002: PPUSH
106003: PPUSH
106004: PPUSH
106005: PPUSH
106006: PPUSH
106007: PPUSH
// if not GetClass ( unit ) = class_sniper then
106008: LD_VAR 0 1
106012: PPUSH
106013: CALL_OW 257
106017: PUSH
106018: LD_INT 5
106020: EQUAL
106021: NOT
106022: IFFALSE 106026
// exit ;
106024: GO 106414
// dist := 8 ;
106026: LD_ADDR_VAR 0 5
106030: PUSH
106031: LD_INT 8
106033: ST_TO_ADDR
// viewRange := 12 ;
106034: LD_ADDR_VAR 0 7
106038: PUSH
106039: LD_INT 12
106041: ST_TO_ADDR
// side := GetSide ( unit ) ;
106042: LD_ADDR_VAR 0 6
106046: PUSH
106047: LD_VAR 0 1
106051: PPUSH
106052: CALL_OW 255
106056: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
106057: LD_INT 61
106059: PPUSH
106060: LD_VAR 0 6
106064: PPUSH
106065: CALL_OW 321
106069: PUSH
106070: LD_INT 2
106072: EQUAL
106073: IFFALSE 106083
// viewRange := 16 ;
106075: LD_ADDR_VAR 0 7
106079: PUSH
106080: LD_INT 16
106082: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
106083: LD_VAR 0 1
106087: PPUSH
106088: LD_VAR 0 2
106092: PPUSH
106093: LD_VAR 0 3
106097: PPUSH
106098: CALL_OW 297
106102: PUSH
106103: LD_VAR 0 5
106107: GREATER
106108: IFFALSE 106187
// begin ComMoveXY ( unit , x , y ) ;
106110: LD_VAR 0 1
106114: PPUSH
106115: LD_VAR 0 2
106119: PPUSH
106120: LD_VAR 0 3
106124: PPUSH
106125: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
106129: LD_INT 35
106131: PPUSH
106132: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
106136: LD_VAR 0 1
106140: PPUSH
106141: LD_VAR 0 2
106145: PPUSH
106146: LD_VAR 0 3
106150: PPUSH
106151: CALL 55254 0 3
106155: NOT
106156: IFFALSE 106160
// exit ;
106158: GO 106414
// until GetDistUnitXY ( unit , x , y ) < dist ;
106160: LD_VAR 0 1
106164: PPUSH
106165: LD_VAR 0 2
106169: PPUSH
106170: LD_VAR 0 3
106174: PPUSH
106175: CALL_OW 297
106179: PUSH
106180: LD_VAR 0 5
106184: LESS
106185: IFFALSE 106129
// end ; ComTurnXY ( unit , x , y ) ;
106187: LD_VAR 0 1
106191: PPUSH
106192: LD_VAR 0 2
106196: PPUSH
106197: LD_VAR 0 3
106201: PPUSH
106202: CALL_OW 118
// wait ( 5 ) ;
106206: LD_INT 5
106208: PPUSH
106209: CALL_OW 67
// _d := GetDir ( unit ) ;
106213: LD_ADDR_VAR 0 10
106217: PUSH
106218: LD_VAR 0 1
106222: PPUSH
106223: CALL_OW 254
106227: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
106228: LD_ADDR_VAR 0 8
106232: PUSH
106233: LD_VAR 0 1
106237: PPUSH
106238: CALL_OW 250
106242: PPUSH
106243: LD_VAR 0 10
106247: PPUSH
106248: LD_VAR 0 5
106252: PPUSH
106253: CALL_OW 272
106257: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
106258: LD_ADDR_VAR 0 9
106262: PUSH
106263: LD_VAR 0 1
106267: PPUSH
106268: CALL_OW 251
106272: PPUSH
106273: LD_VAR 0 10
106277: PPUSH
106278: LD_VAR 0 5
106282: PPUSH
106283: CALL_OW 273
106287: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
106288: LD_VAR 0 8
106292: PPUSH
106293: LD_VAR 0 9
106297: PPUSH
106298: CALL_OW 488
106302: NOT
106303: IFFALSE 106307
// exit ;
106305: GO 106414
// ComAnimCustom ( unit , 1 ) ;
106307: LD_VAR 0 1
106311: PPUSH
106312: LD_INT 1
106314: PPUSH
106315: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
106319: LD_VAR 0 8
106323: PPUSH
106324: LD_VAR 0 9
106328: PPUSH
106329: LD_VAR 0 6
106333: PPUSH
106334: LD_VAR 0 7
106338: PPUSH
106339: CALL_OW 330
// repeat wait ( 1 ) ;
106343: LD_INT 1
106345: PPUSH
106346: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
106350: LD_VAR 0 1
106354: PPUSH
106355: CALL_OW 316
106359: PUSH
106360: LD_VAR 0 1
106364: PPUSH
106365: CALL_OW 314
106369: OR
106370: PUSH
106371: LD_VAR 0 1
106375: PPUSH
106376: CALL_OW 302
106380: NOT
106381: OR
106382: PUSH
106383: LD_VAR 0 1
106387: PPUSH
106388: CALL_OW 301
106392: OR
106393: IFFALSE 106343
// RemoveSeeing ( _x , _y , side ) ;
106395: LD_VAR 0 8
106399: PPUSH
106400: LD_VAR 0 9
106404: PPUSH
106405: LD_VAR 0 6
106409: PPUSH
106410: CALL_OW 331
// end ; end_of_file
106414: LD_VAR 0 4
106418: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
106419: LD_INT 0
106421: PPUSH
106422: PPUSH
106423: PPUSH
106424: PPUSH
106425: PPUSH
106426: PPUSH
106427: PPUSH
106428: PPUSH
106429: PPUSH
106430: PPUSH
106431: PPUSH
106432: PPUSH
106433: PPUSH
106434: PPUSH
106435: PPUSH
106436: PPUSH
106437: PPUSH
106438: PPUSH
106439: PPUSH
106440: PPUSH
106441: PPUSH
106442: PPUSH
106443: PPUSH
106444: PPUSH
106445: PPUSH
106446: PPUSH
106447: PPUSH
106448: PPUSH
106449: PPUSH
106450: PPUSH
106451: PPUSH
106452: PPUSH
106453: PPUSH
106454: PPUSH
// if not list then
106455: LD_VAR 0 1
106459: NOT
106460: IFFALSE 106464
// exit ;
106462: GO 111123
// base := list [ 1 ] ;
106464: LD_ADDR_VAR 0 3
106468: PUSH
106469: LD_VAR 0 1
106473: PUSH
106474: LD_INT 1
106476: ARRAY
106477: ST_TO_ADDR
// group := list [ 2 ] ;
106478: LD_ADDR_VAR 0 4
106482: PUSH
106483: LD_VAR 0 1
106487: PUSH
106488: LD_INT 2
106490: ARRAY
106491: ST_TO_ADDR
// path := list [ 3 ] ;
106492: LD_ADDR_VAR 0 5
106496: PUSH
106497: LD_VAR 0 1
106501: PUSH
106502: LD_INT 3
106504: ARRAY
106505: ST_TO_ADDR
// flags := list [ 4 ] ;
106506: LD_ADDR_VAR 0 6
106510: PUSH
106511: LD_VAR 0 1
106515: PUSH
106516: LD_INT 4
106518: ARRAY
106519: ST_TO_ADDR
// mined := [ ] ;
106520: LD_ADDR_VAR 0 27
106524: PUSH
106525: EMPTY
106526: ST_TO_ADDR
// bombed := [ ] ;
106527: LD_ADDR_VAR 0 28
106531: PUSH
106532: EMPTY
106533: ST_TO_ADDR
// healers := [ ] ;
106534: LD_ADDR_VAR 0 31
106538: PUSH
106539: EMPTY
106540: ST_TO_ADDR
// to_heal := [ ] ;
106541: LD_ADDR_VAR 0 30
106545: PUSH
106546: EMPTY
106547: ST_TO_ADDR
// repairs := [ ] ;
106548: LD_ADDR_VAR 0 33
106552: PUSH
106553: EMPTY
106554: ST_TO_ADDR
// to_repair := [ ] ;
106555: LD_ADDR_VAR 0 32
106559: PUSH
106560: EMPTY
106561: ST_TO_ADDR
// if not group or not path then
106562: LD_VAR 0 4
106566: NOT
106567: PUSH
106568: LD_VAR 0 5
106572: NOT
106573: OR
106574: IFFALSE 106578
// exit ;
106576: GO 111123
// side := GetSide ( group [ 1 ] ) ;
106578: LD_ADDR_VAR 0 35
106582: PUSH
106583: LD_VAR 0 4
106587: PUSH
106588: LD_INT 1
106590: ARRAY
106591: PPUSH
106592: CALL_OW 255
106596: ST_TO_ADDR
// if flags then
106597: LD_VAR 0 6
106601: IFFALSE 106745
// begin f_ignore_area := flags [ 1 ] ;
106603: LD_ADDR_VAR 0 17
106607: PUSH
106608: LD_VAR 0 6
106612: PUSH
106613: LD_INT 1
106615: ARRAY
106616: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
106617: LD_ADDR_VAR 0 18
106621: PUSH
106622: LD_VAR 0 6
106626: PUSH
106627: LD_INT 2
106629: ARRAY
106630: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
106631: LD_ADDR_VAR 0 19
106635: PUSH
106636: LD_VAR 0 6
106640: PUSH
106641: LD_INT 3
106643: ARRAY
106644: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
106645: LD_ADDR_VAR 0 20
106649: PUSH
106650: LD_VAR 0 6
106654: PUSH
106655: LD_INT 4
106657: ARRAY
106658: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
106659: LD_ADDR_VAR 0 21
106663: PUSH
106664: LD_VAR 0 6
106668: PUSH
106669: LD_INT 5
106671: ARRAY
106672: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
106673: LD_ADDR_VAR 0 22
106677: PUSH
106678: LD_VAR 0 6
106682: PUSH
106683: LD_INT 6
106685: ARRAY
106686: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
106687: LD_ADDR_VAR 0 23
106691: PUSH
106692: LD_VAR 0 6
106696: PUSH
106697: LD_INT 7
106699: ARRAY
106700: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
106701: LD_ADDR_VAR 0 24
106705: PUSH
106706: LD_VAR 0 6
106710: PUSH
106711: LD_INT 8
106713: ARRAY
106714: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
106715: LD_ADDR_VAR 0 25
106719: PUSH
106720: LD_VAR 0 6
106724: PUSH
106725: LD_INT 9
106727: ARRAY
106728: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
106729: LD_ADDR_VAR 0 26
106733: PUSH
106734: LD_VAR 0 6
106738: PUSH
106739: LD_INT 10
106741: ARRAY
106742: ST_TO_ADDR
// end else
106743: GO 106825
// begin f_ignore_area := false ;
106745: LD_ADDR_VAR 0 17
106749: PUSH
106750: LD_INT 0
106752: ST_TO_ADDR
// f_capture := false ;
106753: LD_ADDR_VAR 0 18
106757: PUSH
106758: LD_INT 0
106760: ST_TO_ADDR
// f_ignore_civ := false ;
106761: LD_ADDR_VAR 0 19
106765: PUSH
106766: LD_INT 0
106768: ST_TO_ADDR
// f_murder := false ;
106769: LD_ADDR_VAR 0 20
106773: PUSH
106774: LD_INT 0
106776: ST_TO_ADDR
// f_mines := false ;
106777: LD_ADDR_VAR 0 21
106781: PUSH
106782: LD_INT 0
106784: ST_TO_ADDR
// f_repair := false ;
106785: LD_ADDR_VAR 0 22
106789: PUSH
106790: LD_INT 0
106792: ST_TO_ADDR
// f_heal := false ;
106793: LD_ADDR_VAR 0 23
106797: PUSH
106798: LD_INT 0
106800: ST_TO_ADDR
// f_spacetime := false ;
106801: LD_ADDR_VAR 0 24
106805: PUSH
106806: LD_INT 0
106808: ST_TO_ADDR
// f_attack_depot := false ;
106809: LD_ADDR_VAR 0 25
106813: PUSH
106814: LD_INT 0
106816: ST_TO_ADDR
// f_crawl := false ;
106817: LD_ADDR_VAR 0 26
106821: PUSH
106822: LD_INT 0
106824: ST_TO_ADDR
// end ; if f_heal then
106825: LD_VAR 0 23
106829: IFFALSE 106856
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
106831: LD_ADDR_VAR 0 31
106835: PUSH
106836: LD_VAR 0 4
106840: PPUSH
106841: LD_INT 25
106843: PUSH
106844: LD_INT 4
106846: PUSH
106847: EMPTY
106848: LIST
106849: LIST
106850: PPUSH
106851: CALL_OW 72
106855: ST_TO_ADDR
// if f_repair then
106856: LD_VAR 0 22
106860: IFFALSE 106887
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
106862: LD_ADDR_VAR 0 33
106866: PUSH
106867: LD_VAR 0 4
106871: PPUSH
106872: LD_INT 25
106874: PUSH
106875: LD_INT 3
106877: PUSH
106878: EMPTY
106879: LIST
106880: LIST
106881: PPUSH
106882: CALL_OW 72
106886: ST_TO_ADDR
// units_path := [ ] ;
106887: LD_ADDR_VAR 0 16
106891: PUSH
106892: EMPTY
106893: ST_TO_ADDR
// for i = 1 to group do
106894: LD_ADDR_VAR 0 7
106898: PUSH
106899: DOUBLE
106900: LD_INT 1
106902: DEC
106903: ST_TO_ADDR
106904: LD_VAR 0 4
106908: PUSH
106909: FOR_TO
106910: IFFALSE 106939
// units_path := Replace ( units_path , i , path ) ;
106912: LD_ADDR_VAR 0 16
106916: PUSH
106917: LD_VAR 0 16
106921: PPUSH
106922: LD_VAR 0 7
106926: PPUSH
106927: LD_VAR 0 5
106931: PPUSH
106932: CALL_OW 1
106936: ST_TO_ADDR
106937: GO 106909
106939: POP
106940: POP
// repeat for i = group downto 1 do
106941: LD_ADDR_VAR 0 7
106945: PUSH
106946: DOUBLE
106947: LD_VAR 0 4
106951: INC
106952: ST_TO_ADDR
106953: LD_INT 1
106955: PUSH
106956: FOR_DOWNTO
106957: IFFALSE 111079
// begin wait ( 5 ) ;
106959: LD_INT 5
106961: PPUSH
106962: CALL_OW 67
// tmp := [ ] ;
106966: LD_ADDR_VAR 0 14
106970: PUSH
106971: EMPTY
106972: ST_TO_ADDR
// attacking := false ;
106973: LD_ADDR_VAR 0 29
106977: PUSH
106978: LD_INT 0
106980: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
106981: LD_VAR 0 4
106985: PUSH
106986: LD_VAR 0 7
106990: ARRAY
106991: PPUSH
106992: CALL_OW 301
106996: PUSH
106997: LD_VAR 0 4
107001: PUSH
107002: LD_VAR 0 7
107006: ARRAY
107007: NOT
107008: OR
107009: IFFALSE 107118
// begin if GetType ( group [ i ] ) = unit_human then
107011: LD_VAR 0 4
107015: PUSH
107016: LD_VAR 0 7
107020: ARRAY
107021: PPUSH
107022: CALL_OW 247
107026: PUSH
107027: LD_INT 1
107029: EQUAL
107030: IFFALSE 107076
// begin to_heal := to_heal diff group [ i ] ;
107032: LD_ADDR_VAR 0 30
107036: PUSH
107037: LD_VAR 0 30
107041: PUSH
107042: LD_VAR 0 4
107046: PUSH
107047: LD_VAR 0 7
107051: ARRAY
107052: DIFF
107053: ST_TO_ADDR
// healers := healers diff group [ i ] ;
107054: LD_ADDR_VAR 0 31
107058: PUSH
107059: LD_VAR 0 31
107063: PUSH
107064: LD_VAR 0 4
107068: PUSH
107069: LD_VAR 0 7
107073: ARRAY
107074: DIFF
107075: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
107076: LD_ADDR_VAR 0 4
107080: PUSH
107081: LD_VAR 0 4
107085: PPUSH
107086: LD_VAR 0 7
107090: PPUSH
107091: CALL_OW 3
107095: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
107096: LD_ADDR_VAR 0 16
107100: PUSH
107101: LD_VAR 0 16
107105: PPUSH
107106: LD_VAR 0 7
107110: PPUSH
107111: CALL_OW 3
107115: ST_TO_ADDR
// continue ;
107116: GO 106956
// end ; if f_repair then
107118: LD_VAR 0 22
107122: IFFALSE 107611
// begin if GetType ( group [ i ] ) = unit_vehicle then
107124: LD_VAR 0 4
107128: PUSH
107129: LD_VAR 0 7
107133: ARRAY
107134: PPUSH
107135: CALL_OW 247
107139: PUSH
107140: LD_INT 2
107142: EQUAL
107143: IFFALSE 107333
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
107145: LD_VAR 0 4
107149: PUSH
107150: LD_VAR 0 7
107154: ARRAY
107155: PPUSH
107156: CALL_OW 256
107160: PUSH
107161: LD_INT 700
107163: LESS
107164: PUSH
107165: LD_VAR 0 4
107169: PUSH
107170: LD_VAR 0 7
107174: ARRAY
107175: PUSH
107176: LD_VAR 0 32
107180: IN
107181: NOT
107182: AND
107183: IFFALSE 107207
// to_repair := to_repair union group [ i ] ;
107185: LD_ADDR_VAR 0 32
107189: PUSH
107190: LD_VAR 0 32
107194: PUSH
107195: LD_VAR 0 4
107199: PUSH
107200: LD_VAR 0 7
107204: ARRAY
107205: UNION
107206: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
107207: LD_VAR 0 4
107211: PUSH
107212: LD_VAR 0 7
107216: ARRAY
107217: PPUSH
107218: CALL_OW 256
107222: PUSH
107223: LD_INT 1000
107225: EQUAL
107226: PUSH
107227: LD_VAR 0 4
107231: PUSH
107232: LD_VAR 0 7
107236: ARRAY
107237: PUSH
107238: LD_VAR 0 32
107242: IN
107243: AND
107244: IFFALSE 107268
// to_repair := to_repair diff group [ i ] ;
107246: LD_ADDR_VAR 0 32
107250: PUSH
107251: LD_VAR 0 32
107255: PUSH
107256: LD_VAR 0 4
107260: PUSH
107261: LD_VAR 0 7
107265: ARRAY
107266: DIFF
107267: ST_TO_ADDR
// if group [ i ] in to_repair then
107268: LD_VAR 0 4
107272: PUSH
107273: LD_VAR 0 7
107277: ARRAY
107278: PUSH
107279: LD_VAR 0 32
107283: IN
107284: IFFALSE 107331
// begin if not IsInArea ( group [ i ] , f_repair ) then
107286: LD_VAR 0 4
107290: PUSH
107291: LD_VAR 0 7
107295: ARRAY
107296: PPUSH
107297: LD_VAR 0 22
107301: PPUSH
107302: CALL_OW 308
107306: NOT
107307: IFFALSE 107329
// ComMoveToArea ( group [ i ] , f_repair ) ;
107309: LD_VAR 0 4
107313: PUSH
107314: LD_VAR 0 7
107318: ARRAY
107319: PPUSH
107320: LD_VAR 0 22
107324: PPUSH
107325: CALL_OW 113
// continue ;
107329: GO 106956
// end ; end else
107331: GO 107611
// if group [ i ] in repairs then
107333: LD_VAR 0 4
107337: PUSH
107338: LD_VAR 0 7
107342: ARRAY
107343: PUSH
107344: LD_VAR 0 33
107348: IN
107349: IFFALSE 107611
// begin if IsInUnit ( group [ i ] ) then
107351: LD_VAR 0 4
107355: PUSH
107356: LD_VAR 0 7
107360: ARRAY
107361: PPUSH
107362: CALL_OW 310
107366: IFFALSE 107434
// begin z := IsInUnit ( group [ i ] ) ;
107368: LD_ADDR_VAR 0 13
107372: PUSH
107373: LD_VAR 0 4
107377: PUSH
107378: LD_VAR 0 7
107382: ARRAY
107383: PPUSH
107384: CALL_OW 310
107388: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
107389: LD_VAR 0 13
107393: PUSH
107394: LD_VAR 0 32
107398: IN
107399: PUSH
107400: LD_VAR 0 13
107404: PPUSH
107405: LD_VAR 0 22
107409: PPUSH
107410: CALL_OW 308
107414: AND
107415: IFFALSE 107432
// ComExitVehicle ( group [ i ] ) ;
107417: LD_VAR 0 4
107421: PUSH
107422: LD_VAR 0 7
107426: ARRAY
107427: PPUSH
107428: CALL_OW 121
// end else
107432: GO 107611
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
107434: LD_ADDR_VAR 0 13
107438: PUSH
107439: LD_VAR 0 4
107443: PPUSH
107444: LD_INT 95
107446: PUSH
107447: LD_VAR 0 22
107451: PUSH
107452: EMPTY
107453: LIST
107454: LIST
107455: PUSH
107456: LD_INT 58
107458: PUSH
107459: EMPTY
107460: LIST
107461: PUSH
107462: EMPTY
107463: LIST
107464: LIST
107465: PPUSH
107466: CALL_OW 72
107470: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
107471: LD_VAR 0 4
107475: PUSH
107476: LD_VAR 0 7
107480: ARRAY
107481: PPUSH
107482: CALL_OW 314
107486: NOT
107487: IFFALSE 107609
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
107489: LD_ADDR_VAR 0 10
107493: PUSH
107494: LD_VAR 0 13
107498: PPUSH
107499: LD_VAR 0 4
107503: PUSH
107504: LD_VAR 0 7
107508: ARRAY
107509: PPUSH
107510: CALL_OW 74
107514: ST_TO_ADDR
// if not x then
107515: LD_VAR 0 10
107519: NOT
107520: IFFALSE 107524
// continue ;
107522: GO 106956
// if GetLives ( x ) < 1000 then
107524: LD_VAR 0 10
107528: PPUSH
107529: CALL_OW 256
107533: PUSH
107534: LD_INT 1000
107536: LESS
107537: IFFALSE 107561
// ComRepairVehicle ( group [ i ] , x ) else
107539: LD_VAR 0 4
107543: PUSH
107544: LD_VAR 0 7
107548: ARRAY
107549: PPUSH
107550: LD_VAR 0 10
107554: PPUSH
107555: CALL_OW 129
107559: GO 107609
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
107561: LD_VAR 0 23
107565: PUSH
107566: LD_VAR 0 4
107570: PUSH
107571: LD_VAR 0 7
107575: ARRAY
107576: PPUSH
107577: CALL_OW 256
107581: PUSH
107582: LD_INT 1000
107584: LESS
107585: AND
107586: NOT
107587: IFFALSE 107609
// ComEnterUnit ( group [ i ] , x ) ;
107589: LD_VAR 0 4
107593: PUSH
107594: LD_VAR 0 7
107598: ARRAY
107599: PPUSH
107600: LD_VAR 0 10
107604: PPUSH
107605: CALL_OW 120
// end ; continue ;
107609: GO 106956
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
107611: LD_VAR 0 23
107615: PUSH
107616: LD_VAR 0 4
107620: PUSH
107621: LD_VAR 0 7
107625: ARRAY
107626: PPUSH
107627: CALL_OW 247
107631: PUSH
107632: LD_INT 1
107634: EQUAL
107635: AND
107636: IFFALSE 108114
// begin if group [ i ] in healers then
107638: LD_VAR 0 4
107642: PUSH
107643: LD_VAR 0 7
107647: ARRAY
107648: PUSH
107649: LD_VAR 0 31
107653: IN
107654: IFFALSE 107927
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
107656: LD_VAR 0 4
107660: PUSH
107661: LD_VAR 0 7
107665: ARRAY
107666: PPUSH
107667: LD_VAR 0 23
107671: PPUSH
107672: CALL_OW 308
107676: NOT
107677: PUSH
107678: LD_VAR 0 4
107682: PUSH
107683: LD_VAR 0 7
107687: ARRAY
107688: PPUSH
107689: CALL_OW 314
107693: NOT
107694: AND
107695: IFFALSE 107719
// ComMoveToArea ( group [ i ] , f_heal ) else
107697: LD_VAR 0 4
107701: PUSH
107702: LD_VAR 0 7
107706: ARRAY
107707: PPUSH
107708: LD_VAR 0 23
107712: PPUSH
107713: CALL_OW 113
107717: GO 107925
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
107719: LD_VAR 0 4
107723: PUSH
107724: LD_VAR 0 7
107728: ARRAY
107729: PPUSH
107730: CALL 53777 0 1
107734: PPUSH
107735: CALL_OW 256
107739: PUSH
107740: LD_INT 1000
107742: EQUAL
107743: IFFALSE 107762
// ComStop ( group [ i ] ) else
107745: LD_VAR 0 4
107749: PUSH
107750: LD_VAR 0 7
107754: ARRAY
107755: PPUSH
107756: CALL_OW 141
107760: GO 107925
// if not HasTask ( group [ i ] ) and to_heal then
107762: LD_VAR 0 4
107766: PUSH
107767: LD_VAR 0 7
107771: ARRAY
107772: PPUSH
107773: CALL_OW 314
107777: NOT
107778: PUSH
107779: LD_VAR 0 30
107783: AND
107784: IFFALSE 107925
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
107786: LD_ADDR_VAR 0 13
107790: PUSH
107791: LD_VAR 0 30
107795: PPUSH
107796: LD_INT 3
107798: PUSH
107799: LD_INT 54
107801: PUSH
107802: EMPTY
107803: LIST
107804: PUSH
107805: EMPTY
107806: LIST
107807: LIST
107808: PPUSH
107809: CALL_OW 72
107813: PPUSH
107814: LD_VAR 0 4
107818: PUSH
107819: LD_VAR 0 7
107823: ARRAY
107824: PPUSH
107825: CALL_OW 74
107829: ST_TO_ADDR
// if z then
107830: LD_VAR 0 13
107834: IFFALSE 107925
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
107836: LD_INT 91
107838: PUSH
107839: LD_VAR 0 13
107843: PUSH
107844: LD_INT 10
107846: PUSH
107847: EMPTY
107848: LIST
107849: LIST
107850: LIST
107851: PUSH
107852: LD_INT 81
107854: PUSH
107855: LD_VAR 0 13
107859: PPUSH
107860: CALL_OW 255
107864: PUSH
107865: EMPTY
107866: LIST
107867: LIST
107868: PUSH
107869: EMPTY
107870: LIST
107871: LIST
107872: PPUSH
107873: CALL_OW 69
107877: PUSH
107878: LD_INT 0
107880: EQUAL
107881: IFFALSE 107905
// ComHeal ( group [ i ] , z ) else
107883: LD_VAR 0 4
107887: PUSH
107888: LD_VAR 0 7
107892: ARRAY
107893: PPUSH
107894: LD_VAR 0 13
107898: PPUSH
107899: CALL_OW 128
107903: GO 107925
// ComMoveToArea ( group [ i ] , f_heal ) ;
107905: LD_VAR 0 4
107909: PUSH
107910: LD_VAR 0 7
107914: ARRAY
107915: PPUSH
107916: LD_VAR 0 23
107920: PPUSH
107921: CALL_OW 113
// end ; continue ;
107925: GO 106956
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
107927: LD_VAR 0 4
107931: PUSH
107932: LD_VAR 0 7
107936: ARRAY
107937: PPUSH
107938: CALL_OW 256
107942: PUSH
107943: LD_INT 700
107945: LESS
107946: PUSH
107947: LD_VAR 0 4
107951: PUSH
107952: LD_VAR 0 7
107956: ARRAY
107957: PUSH
107958: LD_VAR 0 30
107962: IN
107963: NOT
107964: AND
107965: IFFALSE 107989
// to_heal := to_heal union group [ i ] ;
107967: LD_ADDR_VAR 0 30
107971: PUSH
107972: LD_VAR 0 30
107976: PUSH
107977: LD_VAR 0 4
107981: PUSH
107982: LD_VAR 0 7
107986: ARRAY
107987: UNION
107988: ST_TO_ADDR
// if group [ i ] in to_heal then
107989: LD_VAR 0 4
107993: PUSH
107994: LD_VAR 0 7
107998: ARRAY
107999: PUSH
108000: LD_VAR 0 30
108004: IN
108005: IFFALSE 108114
// begin if GetLives ( group [ i ] ) = 1000 then
108007: LD_VAR 0 4
108011: PUSH
108012: LD_VAR 0 7
108016: ARRAY
108017: PPUSH
108018: CALL_OW 256
108022: PUSH
108023: LD_INT 1000
108025: EQUAL
108026: IFFALSE 108052
// to_heal := to_heal diff group [ i ] else
108028: LD_ADDR_VAR 0 30
108032: PUSH
108033: LD_VAR 0 30
108037: PUSH
108038: LD_VAR 0 4
108042: PUSH
108043: LD_VAR 0 7
108047: ARRAY
108048: DIFF
108049: ST_TO_ADDR
108050: GO 108114
// begin if not IsInArea ( group [ i ] , to_heal ) then
108052: LD_VAR 0 4
108056: PUSH
108057: LD_VAR 0 7
108061: ARRAY
108062: PPUSH
108063: LD_VAR 0 30
108067: PPUSH
108068: CALL_OW 308
108072: NOT
108073: IFFALSE 108097
// ComMoveToArea ( group [ i ] , f_heal ) else
108075: LD_VAR 0 4
108079: PUSH
108080: LD_VAR 0 7
108084: ARRAY
108085: PPUSH
108086: LD_VAR 0 23
108090: PPUSH
108091: CALL_OW 113
108095: GO 108112
// ComHold ( group [ i ] ) ;
108097: LD_VAR 0 4
108101: PUSH
108102: LD_VAR 0 7
108106: ARRAY
108107: PPUSH
108108: CALL_OW 140
// continue ;
108112: GO 106956
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
108114: LD_VAR 0 4
108118: PUSH
108119: LD_VAR 0 7
108123: ARRAY
108124: PPUSH
108125: LD_INT 10
108127: PPUSH
108128: CALL 52197 0 2
108132: NOT
108133: PUSH
108134: LD_VAR 0 16
108138: PUSH
108139: LD_VAR 0 7
108143: ARRAY
108144: PUSH
108145: EMPTY
108146: EQUAL
108147: NOT
108148: AND
108149: IFFALSE 108415
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
108151: LD_VAR 0 4
108155: PUSH
108156: LD_VAR 0 7
108160: ARRAY
108161: PPUSH
108162: CALL_OW 262
108166: PUSH
108167: LD_INT 1
108169: PUSH
108170: LD_INT 2
108172: PUSH
108173: EMPTY
108174: LIST
108175: LIST
108176: IN
108177: IFFALSE 108218
// if GetFuel ( group [ i ] ) < 10 then
108179: LD_VAR 0 4
108183: PUSH
108184: LD_VAR 0 7
108188: ARRAY
108189: PPUSH
108190: CALL_OW 261
108194: PUSH
108195: LD_INT 10
108197: LESS
108198: IFFALSE 108218
// SetFuel ( group [ i ] , 12 ) ;
108200: LD_VAR 0 4
108204: PUSH
108205: LD_VAR 0 7
108209: ARRAY
108210: PPUSH
108211: LD_INT 12
108213: PPUSH
108214: CALL_OW 240
// if units_path [ i ] then
108218: LD_VAR 0 16
108222: PUSH
108223: LD_VAR 0 7
108227: ARRAY
108228: IFFALSE 108413
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
108230: LD_VAR 0 4
108234: PUSH
108235: LD_VAR 0 7
108239: ARRAY
108240: PPUSH
108241: LD_VAR 0 16
108245: PUSH
108246: LD_VAR 0 7
108250: ARRAY
108251: PUSH
108252: LD_INT 1
108254: ARRAY
108255: PUSH
108256: LD_INT 1
108258: ARRAY
108259: PPUSH
108260: LD_VAR 0 16
108264: PUSH
108265: LD_VAR 0 7
108269: ARRAY
108270: PUSH
108271: LD_INT 1
108273: ARRAY
108274: PUSH
108275: LD_INT 2
108277: ARRAY
108278: PPUSH
108279: CALL_OW 297
108283: PUSH
108284: LD_INT 6
108286: GREATER
108287: IFFALSE 108362
// begin if not HasTask ( group [ i ] ) then
108289: LD_VAR 0 4
108293: PUSH
108294: LD_VAR 0 7
108298: ARRAY
108299: PPUSH
108300: CALL_OW 314
108304: NOT
108305: IFFALSE 108360
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
108307: LD_VAR 0 4
108311: PUSH
108312: LD_VAR 0 7
108316: ARRAY
108317: PPUSH
108318: LD_VAR 0 16
108322: PUSH
108323: LD_VAR 0 7
108327: ARRAY
108328: PUSH
108329: LD_INT 1
108331: ARRAY
108332: PUSH
108333: LD_INT 1
108335: ARRAY
108336: PPUSH
108337: LD_VAR 0 16
108341: PUSH
108342: LD_VAR 0 7
108346: ARRAY
108347: PUSH
108348: LD_INT 1
108350: ARRAY
108351: PUSH
108352: LD_INT 2
108354: ARRAY
108355: PPUSH
108356: CALL_OW 114
// end else
108360: GO 108413
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
108362: LD_ADDR_VAR 0 15
108366: PUSH
108367: LD_VAR 0 16
108371: PUSH
108372: LD_VAR 0 7
108376: ARRAY
108377: PPUSH
108378: LD_INT 1
108380: PPUSH
108381: CALL_OW 3
108385: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
108386: LD_ADDR_VAR 0 16
108390: PUSH
108391: LD_VAR 0 16
108395: PPUSH
108396: LD_VAR 0 7
108400: PPUSH
108401: LD_VAR 0 15
108405: PPUSH
108406: CALL_OW 1
108410: ST_TO_ADDR
// continue ;
108411: GO 106956
// end ; end ; end else
108413: GO 111077
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
108415: LD_ADDR_VAR 0 14
108419: PUSH
108420: LD_INT 81
108422: PUSH
108423: LD_VAR 0 4
108427: PUSH
108428: LD_VAR 0 7
108432: ARRAY
108433: PPUSH
108434: CALL_OW 255
108438: PUSH
108439: EMPTY
108440: LIST
108441: LIST
108442: PPUSH
108443: CALL_OW 69
108447: ST_TO_ADDR
// if not tmp then
108448: LD_VAR 0 14
108452: NOT
108453: IFFALSE 108457
// continue ;
108455: GO 106956
// if f_ignore_area then
108457: LD_VAR 0 17
108461: IFFALSE 108549
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
108463: LD_ADDR_VAR 0 15
108467: PUSH
108468: LD_VAR 0 14
108472: PPUSH
108473: LD_INT 3
108475: PUSH
108476: LD_INT 92
108478: PUSH
108479: LD_VAR 0 17
108483: PUSH
108484: LD_INT 1
108486: ARRAY
108487: PUSH
108488: LD_VAR 0 17
108492: PUSH
108493: LD_INT 2
108495: ARRAY
108496: PUSH
108497: LD_VAR 0 17
108501: PUSH
108502: LD_INT 3
108504: ARRAY
108505: PUSH
108506: EMPTY
108507: LIST
108508: LIST
108509: LIST
108510: LIST
108511: PUSH
108512: EMPTY
108513: LIST
108514: LIST
108515: PPUSH
108516: CALL_OW 72
108520: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
108521: LD_VAR 0 14
108525: PUSH
108526: LD_VAR 0 15
108530: DIFF
108531: IFFALSE 108549
// tmp := tmp diff tmp2 ;
108533: LD_ADDR_VAR 0 14
108537: PUSH
108538: LD_VAR 0 14
108542: PUSH
108543: LD_VAR 0 15
108547: DIFF
108548: ST_TO_ADDR
// end ; if not f_murder then
108549: LD_VAR 0 20
108553: NOT
108554: IFFALSE 108612
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
108556: LD_ADDR_VAR 0 15
108560: PUSH
108561: LD_VAR 0 14
108565: PPUSH
108566: LD_INT 3
108568: PUSH
108569: LD_INT 50
108571: PUSH
108572: EMPTY
108573: LIST
108574: PUSH
108575: EMPTY
108576: LIST
108577: LIST
108578: PPUSH
108579: CALL_OW 72
108583: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
108584: LD_VAR 0 14
108588: PUSH
108589: LD_VAR 0 15
108593: DIFF
108594: IFFALSE 108612
// tmp := tmp diff tmp2 ;
108596: LD_ADDR_VAR 0 14
108600: PUSH
108601: LD_VAR 0 14
108605: PUSH
108606: LD_VAR 0 15
108610: DIFF
108611: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
108612: LD_ADDR_VAR 0 14
108616: PUSH
108617: LD_VAR 0 4
108621: PUSH
108622: LD_VAR 0 7
108626: ARRAY
108627: PPUSH
108628: LD_VAR 0 14
108632: PPUSH
108633: LD_INT 1
108635: PPUSH
108636: LD_INT 1
108638: PPUSH
108639: CALL 25132 0 4
108643: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
108644: LD_VAR 0 4
108648: PUSH
108649: LD_VAR 0 7
108653: ARRAY
108654: PPUSH
108655: CALL_OW 257
108659: PUSH
108660: LD_INT 1
108662: EQUAL
108663: IFFALSE 109111
// begin if WantPlant ( group [ i ] ) then
108665: LD_VAR 0 4
108669: PUSH
108670: LD_VAR 0 7
108674: ARRAY
108675: PPUSH
108676: CALL 24633 0 1
108680: IFFALSE 108684
// continue ;
108682: GO 106956
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
108684: LD_VAR 0 18
108688: PUSH
108689: LD_VAR 0 4
108693: PUSH
108694: LD_VAR 0 7
108698: ARRAY
108699: PPUSH
108700: CALL_OW 310
108704: NOT
108705: AND
108706: PUSH
108707: LD_VAR 0 14
108711: PUSH
108712: LD_INT 1
108714: ARRAY
108715: PUSH
108716: LD_VAR 0 14
108720: PPUSH
108721: LD_INT 21
108723: PUSH
108724: LD_INT 2
108726: PUSH
108727: EMPTY
108728: LIST
108729: LIST
108730: PUSH
108731: LD_INT 58
108733: PUSH
108734: EMPTY
108735: LIST
108736: PUSH
108737: EMPTY
108738: LIST
108739: LIST
108740: PPUSH
108741: CALL_OW 72
108745: IN
108746: AND
108747: IFFALSE 108783
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
108749: LD_VAR 0 4
108753: PUSH
108754: LD_VAR 0 7
108758: ARRAY
108759: PPUSH
108760: LD_VAR 0 14
108764: PUSH
108765: LD_INT 1
108767: ARRAY
108768: PPUSH
108769: CALL_OW 120
// attacking := true ;
108773: LD_ADDR_VAR 0 29
108777: PUSH
108778: LD_INT 1
108780: ST_TO_ADDR
// continue ;
108781: GO 106956
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
108783: LD_VAR 0 26
108787: PUSH
108788: LD_VAR 0 4
108792: PUSH
108793: LD_VAR 0 7
108797: ARRAY
108798: PPUSH
108799: CALL_OW 257
108803: PUSH
108804: LD_INT 1
108806: EQUAL
108807: AND
108808: PUSH
108809: LD_VAR 0 4
108813: PUSH
108814: LD_VAR 0 7
108818: ARRAY
108819: PPUSH
108820: CALL_OW 256
108824: PUSH
108825: LD_INT 800
108827: LESS
108828: AND
108829: PUSH
108830: LD_VAR 0 4
108834: PUSH
108835: LD_VAR 0 7
108839: ARRAY
108840: PPUSH
108841: CALL_OW 318
108845: NOT
108846: AND
108847: IFFALSE 108864
// ComCrawl ( group [ i ] ) ;
108849: LD_VAR 0 4
108853: PUSH
108854: LD_VAR 0 7
108858: ARRAY
108859: PPUSH
108860: CALL_OW 137
// if f_mines then
108864: LD_VAR 0 21
108868: IFFALSE 109111
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
108870: LD_VAR 0 14
108874: PUSH
108875: LD_INT 1
108877: ARRAY
108878: PPUSH
108879: CALL_OW 247
108883: PUSH
108884: LD_INT 3
108886: EQUAL
108887: PUSH
108888: LD_VAR 0 14
108892: PUSH
108893: LD_INT 1
108895: ARRAY
108896: PUSH
108897: LD_VAR 0 27
108901: IN
108902: NOT
108903: AND
108904: IFFALSE 109111
// begin x := GetX ( tmp [ 1 ] ) ;
108906: LD_ADDR_VAR 0 10
108910: PUSH
108911: LD_VAR 0 14
108915: PUSH
108916: LD_INT 1
108918: ARRAY
108919: PPUSH
108920: CALL_OW 250
108924: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
108925: LD_ADDR_VAR 0 11
108929: PUSH
108930: LD_VAR 0 14
108934: PUSH
108935: LD_INT 1
108937: ARRAY
108938: PPUSH
108939: CALL_OW 251
108943: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
108944: LD_ADDR_VAR 0 12
108948: PUSH
108949: LD_VAR 0 4
108953: PUSH
108954: LD_VAR 0 7
108958: ARRAY
108959: PPUSH
108960: CALL 52282 0 1
108964: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
108965: LD_VAR 0 4
108969: PUSH
108970: LD_VAR 0 7
108974: ARRAY
108975: PPUSH
108976: LD_VAR 0 10
108980: PPUSH
108981: LD_VAR 0 11
108985: PPUSH
108986: LD_VAR 0 14
108990: PUSH
108991: LD_INT 1
108993: ARRAY
108994: PPUSH
108995: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
108999: LD_VAR 0 4
109003: PUSH
109004: LD_VAR 0 7
109008: ARRAY
109009: PPUSH
109010: LD_VAR 0 10
109014: PPUSH
109015: LD_VAR 0 12
109019: PPUSH
109020: LD_INT 7
109022: PPUSH
109023: CALL_OW 272
109027: PPUSH
109028: LD_VAR 0 11
109032: PPUSH
109033: LD_VAR 0 12
109037: PPUSH
109038: LD_INT 7
109040: PPUSH
109041: CALL_OW 273
109045: PPUSH
109046: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
109050: LD_VAR 0 4
109054: PUSH
109055: LD_VAR 0 7
109059: ARRAY
109060: PPUSH
109061: LD_INT 71
109063: PPUSH
109064: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
109068: LD_ADDR_VAR 0 27
109072: PUSH
109073: LD_VAR 0 27
109077: PPUSH
109078: LD_VAR 0 27
109082: PUSH
109083: LD_INT 1
109085: PLUS
109086: PPUSH
109087: LD_VAR 0 14
109091: PUSH
109092: LD_INT 1
109094: ARRAY
109095: PPUSH
109096: CALL_OW 1
109100: ST_TO_ADDR
// attacking := true ;
109101: LD_ADDR_VAR 0 29
109105: PUSH
109106: LD_INT 1
109108: ST_TO_ADDR
// continue ;
109109: GO 106956
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
109111: LD_VAR 0 4
109115: PUSH
109116: LD_VAR 0 7
109120: ARRAY
109121: PPUSH
109122: CALL_OW 257
109126: PUSH
109127: LD_INT 17
109129: EQUAL
109130: PUSH
109131: LD_VAR 0 4
109135: PUSH
109136: LD_VAR 0 7
109140: ARRAY
109141: PPUSH
109142: CALL_OW 110
109146: PUSH
109147: LD_INT 71
109149: EQUAL
109150: NOT
109151: AND
109152: IFFALSE 109298
// begin attacking := false ;
109154: LD_ADDR_VAR 0 29
109158: PUSH
109159: LD_INT 0
109161: ST_TO_ADDR
// k := 5 ;
109162: LD_ADDR_VAR 0 9
109166: PUSH
109167: LD_INT 5
109169: ST_TO_ADDR
// if tmp < k then
109170: LD_VAR 0 14
109174: PUSH
109175: LD_VAR 0 9
109179: LESS
109180: IFFALSE 109192
// k := tmp ;
109182: LD_ADDR_VAR 0 9
109186: PUSH
109187: LD_VAR 0 14
109191: ST_TO_ADDR
// for j = 1 to k do
109192: LD_ADDR_VAR 0 8
109196: PUSH
109197: DOUBLE
109198: LD_INT 1
109200: DEC
109201: ST_TO_ADDR
109202: LD_VAR 0 9
109206: PUSH
109207: FOR_TO
109208: IFFALSE 109296
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
109210: LD_VAR 0 14
109214: PUSH
109215: LD_VAR 0 8
109219: ARRAY
109220: PUSH
109221: LD_VAR 0 14
109225: PPUSH
109226: LD_INT 58
109228: PUSH
109229: EMPTY
109230: LIST
109231: PPUSH
109232: CALL_OW 72
109236: IN
109237: NOT
109238: IFFALSE 109294
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
109240: LD_VAR 0 4
109244: PUSH
109245: LD_VAR 0 7
109249: ARRAY
109250: PPUSH
109251: LD_VAR 0 14
109255: PUSH
109256: LD_VAR 0 8
109260: ARRAY
109261: PPUSH
109262: CALL_OW 115
// attacking := true ;
109266: LD_ADDR_VAR 0 29
109270: PUSH
109271: LD_INT 1
109273: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
109274: LD_VAR 0 4
109278: PUSH
109279: LD_VAR 0 7
109283: ARRAY
109284: PPUSH
109285: LD_INT 71
109287: PPUSH
109288: CALL_OW 109
// continue ;
109292: GO 109207
// end ; end ;
109294: GO 109207
109296: POP
109297: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
109298: LD_VAR 0 4
109302: PUSH
109303: LD_VAR 0 7
109307: ARRAY
109308: PPUSH
109309: CALL_OW 257
109313: PUSH
109314: LD_INT 8
109316: EQUAL
109317: PUSH
109318: LD_VAR 0 4
109322: PUSH
109323: LD_VAR 0 7
109327: ARRAY
109328: PPUSH
109329: CALL_OW 264
109333: PUSH
109334: LD_INT 28
109336: PUSH
109337: LD_INT 45
109339: PUSH
109340: LD_INT 7
109342: PUSH
109343: LD_INT 47
109345: PUSH
109346: EMPTY
109347: LIST
109348: LIST
109349: LIST
109350: LIST
109351: IN
109352: OR
109353: IFFALSE 109609
// begin attacking := false ;
109355: LD_ADDR_VAR 0 29
109359: PUSH
109360: LD_INT 0
109362: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
109363: LD_VAR 0 14
109367: PUSH
109368: LD_INT 1
109370: ARRAY
109371: PPUSH
109372: CALL_OW 266
109376: PUSH
109377: LD_INT 32
109379: PUSH
109380: LD_INT 31
109382: PUSH
109383: LD_INT 33
109385: PUSH
109386: LD_INT 4
109388: PUSH
109389: LD_INT 5
109391: PUSH
109392: EMPTY
109393: LIST
109394: LIST
109395: LIST
109396: LIST
109397: LIST
109398: IN
109399: IFFALSE 109585
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
109401: LD_ADDR_VAR 0 9
109405: PUSH
109406: LD_VAR 0 14
109410: PUSH
109411: LD_INT 1
109413: ARRAY
109414: PPUSH
109415: CALL_OW 266
109419: PPUSH
109420: LD_VAR 0 14
109424: PUSH
109425: LD_INT 1
109427: ARRAY
109428: PPUSH
109429: CALL_OW 250
109433: PPUSH
109434: LD_VAR 0 14
109438: PUSH
109439: LD_INT 1
109441: ARRAY
109442: PPUSH
109443: CALL_OW 251
109447: PPUSH
109448: LD_VAR 0 14
109452: PUSH
109453: LD_INT 1
109455: ARRAY
109456: PPUSH
109457: CALL_OW 254
109461: PPUSH
109462: LD_VAR 0 14
109466: PUSH
109467: LD_INT 1
109469: ARRAY
109470: PPUSH
109471: CALL_OW 248
109475: PPUSH
109476: LD_INT 0
109478: PPUSH
109479: CALL 33652 0 6
109483: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
109484: LD_ADDR_VAR 0 8
109488: PUSH
109489: LD_VAR 0 4
109493: PUSH
109494: LD_VAR 0 7
109498: ARRAY
109499: PPUSH
109500: LD_VAR 0 9
109504: PPUSH
109505: CALL 52322 0 2
109509: ST_TO_ADDR
// if j then
109510: LD_VAR 0 8
109514: IFFALSE 109583
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
109516: LD_VAR 0 8
109520: PUSH
109521: LD_INT 1
109523: ARRAY
109524: PPUSH
109525: LD_VAR 0 8
109529: PUSH
109530: LD_INT 2
109532: ARRAY
109533: PPUSH
109534: CALL_OW 488
109538: IFFALSE 109583
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
109540: LD_VAR 0 4
109544: PUSH
109545: LD_VAR 0 7
109549: ARRAY
109550: PPUSH
109551: LD_VAR 0 8
109555: PUSH
109556: LD_INT 1
109558: ARRAY
109559: PPUSH
109560: LD_VAR 0 8
109564: PUSH
109565: LD_INT 2
109567: ARRAY
109568: PPUSH
109569: CALL_OW 116
// attacking := true ;
109573: LD_ADDR_VAR 0 29
109577: PUSH
109578: LD_INT 1
109580: ST_TO_ADDR
// continue ;
109581: GO 106956
// end ; end else
109583: GO 109609
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
109585: LD_VAR 0 4
109589: PUSH
109590: LD_VAR 0 7
109594: ARRAY
109595: PPUSH
109596: LD_VAR 0 14
109600: PUSH
109601: LD_INT 1
109603: ARRAY
109604: PPUSH
109605: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
109609: LD_VAR 0 4
109613: PUSH
109614: LD_VAR 0 7
109618: ARRAY
109619: PPUSH
109620: CALL_OW 265
109624: PUSH
109625: LD_INT 11
109627: EQUAL
109628: IFFALSE 109906
// begin k := 10 ;
109630: LD_ADDR_VAR 0 9
109634: PUSH
109635: LD_INT 10
109637: ST_TO_ADDR
// x := 0 ;
109638: LD_ADDR_VAR 0 10
109642: PUSH
109643: LD_INT 0
109645: ST_TO_ADDR
// if tmp < k then
109646: LD_VAR 0 14
109650: PUSH
109651: LD_VAR 0 9
109655: LESS
109656: IFFALSE 109668
// k := tmp ;
109658: LD_ADDR_VAR 0 9
109662: PUSH
109663: LD_VAR 0 14
109667: ST_TO_ADDR
// for j = k downto 1 do
109668: LD_ADDR_VAR 0 8
109672: PUSH
109673: DOUBLE
109674: LD_VAR 0 9
109678: INC
109679: ST_TO_ADDR
109680: LD_INT 1
109682: PUSH
109683: FOR_DOWNTO
109684: IFFALSE 109759
// begin if GetType ( tmp [ j ] ) = unit_human then
109686: LD_VAR 0 14
109690: PUSH
109691: LD_VAR 0 8
109695: ARRAY
109696: PPUSH
109697: CALL_OW 247
109701: PUSH
109702: LD_INT 1
109704: EQUAL
109705: IFFALSE 109757
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
109707: LD_VAR 0 4
109711: PUSH
109712: LD_VAR 0 7
109716: ARRAY
109717: PPUSH
109718: LD_VAR 0 14
109722: PUSH
109723: LD_VAR 0 8
109727: ARRAY
109728: PPUSH
109729: CALL 52593 0 2
// x := tmp [ j ] ;
109733: LD_ADDR_VAR 0 10
109737: PUSH
109738: LD_VAR 0 14
109742: PUSH
109743: LD_VAR 0 8
109747: ARRAY
109748: ST_TO_ADDR
// attacking := true ;
109749: LD_ADDR_VAR 0 29
109753: PUSH
109754: LD_INT 1
109756: ST_TO_ADDR
// end ; end ;
109757: GO 109683
109759: POP
109760: POP
// if not x then
109761: LD_VAR 0 10
109765: NOT
109766: IFFALSE 109906
// begin attacking := true ;
109768: LD_ADDR_VAR 0 29
109772: PUSH
109773: LD_INT 1
109775: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
109776: LD_VAR 0 4
109780: PUSH
109781: LD_VAR 0 7
109785: ARRAY
109786: PPUSH
109787: CALL_OW 250
109791: PPUSH
109792: LD_VAR 0 4
109796: PUSH
109797: LD_VAR 0 7
109801: ARRAY
109802: PPUSH
109803: CALL_OW 251
109807: PPUSH
109808: CALL_OW 546
109812: PUSH
109813: LD_INT 2
109815: ARRAY
109816: PUSH
109817: LD_VAR 0 14
109821: PUSH
109822: LD_INT 1
109824: ARRAY
109825: PPUSH
109826: CALL_OW 250
109830: PPUSH
109831: LD_VAR 0 14
109835: PUSH
109836: LD_INT 1
109838: ARRAY
109839: PPUSH
109840: CALL_OW 251
109844: PPUSH
109845: CALL_OW 546
109849: PUSH
109850: LD_INT 2
109852: ARRAY
109853: EQUAL
109854: IFFALSE 109882
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
109856: LD_VAR 0 4
109860: PUSH
109861: LD_VAR 0 7
109865: ARRAY
109866: PPUSH
109867: LD_VAR 0 14
109871: PUSH
109872: LD_INT 1
109874: ARRAY
109875: PPUSH
109876: CALL 52593 0 2
109880: GO 109906
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
109882: LD_VAR 0 4
109886: PUSH
109887: LD_VAR 0 7
109891: ARRAY
109892: PPUSH
109893: LD_VAR 0 14
109897: PUSH
109898: LD_INT 1
109900: ARRAY
109901: PPUSH
109902: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
109906: LD_VAR 0 4
109910: PUSH
109911: LD_VAR 0 7
109915: ARRAY
109916: PPUSH
109917: CALL_OW 264
109921: PUSH
109922: LD_INT 29
109924: EQUAL
109925: IFFALSE 110291
// begin if WantsToAttack ( group [ i ] ) in bombed then
109927: LD_VAR 0 4
109931: PUSH
109932: LD_VAR 0 7
109936: ARRAY
109937: PPUSH
109938: CALL_OW 319
109942: PUSH
109943: LD_VAR 0 28
109947: IN
109948: IFFALSE 109952
// continue ;
109950: GO 106956
// k := 8 ;
109952: LD_ADDR_VAR 0 9
109956: PUSH
109957: LD_INT 8
109959: ST_TO_ADDR
// x := 0 ;
109960: LD_ADDR_VAR 0 10
109964: PUSH
109965: LD_INT 0
109967: ST_TO_ADDR
// if tmp < k then
109968: LD_VAR 0 14
109972: PUSH
109973: LD_VAR 0 9
109977: LESS
109978: IFFALSE 109990
// k := tmp ;
109980: LD_ADDR_VAR 0 9
109984: PUSH
109985: LD_VAR 0 14
109989: ST_TO_ADDR
// for j = 1 to k do
109990: LD_ADDR_VAR 0 8
109994: PUSH
109995: DOUBLE
109996: LD_INT 1
109998: DEC
109999: ST_TO_ADDR
110000: LD_VAR 0 9
110004: PUSH
110005: FOR_TO
110006: IFFALSE 110138
// begin if GetType ( tmp [ j ] ) = unit_building then
110008: LD_VAR 0 14
110012: PUSH
110013: LD_VAR 0 8
110017: ARRAY
110018: PPUSH
110019: CALL_OW 247
110023: PUSH
110024: LD_INT 3
110026: EQUAL
110027: IFFALSE 110136
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
110029: LD_VAR 0 14
110033: PUSH
110034: LD_VAR 0 8
110038: ARRAY
110039: PUSH
110040: LD_VAR 0 28
110044: IN
110045: NOT
110046: PUSH
110047: LD_VAR 0 14
110051: PUSH
110052: LD_VAR 0 8
110056: ARRAY
110057: PPUSH
110058: CALL_OW 313
110062: AND
110063: IFFALSE 110136
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
110065: LD_VAR 0 4
110069: PUSH
110070: LD_VAR 0 7
110074: ARRAY
110075: PPUSH
110076: LD_VAR 0 14
110080: PUSH
110081: LD_VAR 0 8
110085: ARRAY
110086: PPUSH
110087: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
110091: LD_ADDR_VAR 0 28
110095: PUSH
110096: LD_VAR 0 28
110100: PPUSH
110101: LD_VAR 0 28
110105: PUSH
110106: LD_INT 1
110108: PLUS
110109: PPUSH
110110: LD_VAR 0 14
110114: PUSH
110115: LD_VAR 0 8
110119: ARRAY
110120: PPUSH
110121: CALL_OW 1
110125: ST_TO_ADDR
// attacking := true ;
110126: LD_ADDR_VAR 0 29
110130: PUSH
110131: LD_INT 1
110133: ST_TO_ADDR
// break ;
110134: GO 110138
// end ; end ;
110136: GO 110005
110138: POP
110139: POP
// if not attacking and f_attack_depot then
110140: LD_VAR 0 29
110144: NOT
110145: PUSH
110146: LD_VAR 0 25
110150: AND
110151: IFFALSE 110246
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
110153: LD_ADDR_VAR 0 13
110157: PUSH
110158: LD_VAR 0 14
110162: PPUSH
110163: LD_INT 2
110165: PUSH
110166: LD_INT 30
110168: PUSH
110169: LD_INT 0
110171: PUSH
110172: EMPTY
110173: LIST
110174: LIST
110175: PUSH
110176: LD_INT 30
110178: PUSH
110179: LD_INT 1
110181: PUSH
110182: EMPTY
110183: LIST
110184: LIST
110185: PUSH
110186: EMPTY
110187: LIST
110188: LIST
110189: LIST
110190: PPUSH
110191: CALL_OW 72
110195: ST_TO_ADDR
// if z then
110196: LD_VAR 0 13
110200: IFFALSE 110246
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
110202: LD_VAR 0 4
110206: PUSH
110207: LD_VAR 0 7
110211: ARRAY
110212: PPUSH
110213: LD_VAR 0 13
110217: PPUSH
110218: LD_VAR 0 4
110222: PUSH
110223: LD_VAR 0 7
110227: ARRAY
110228: PPUSH
110229: CALL_OW 74
110233: PPUSH
110234: CALL_OW 115
// attacking := true ;
110238: LD_ADDR_VAR 0 29
110242: PUSH
110243: LD_INT 1
110245: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
110246: LD_VAR 0 4
110250: PUSH
110251: LD_VAR 0 7
110255: ARRAY
110256: PPUSH
110257: CALL_OW 256
110261: PUSH
110262: LD_INT 500
110264: LESS
110265: IFFALSE 110291
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
110267: LD_VAR 0 4
110271: PUSH
110272: LD_VAR 0 7
110276: ARRAY
110277: PPUSH
110278: LD_VAR 0 14
110282: PUSH
110283: LD_INT 1
110285: ARRAY
110286: PPUSH
110287: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
110291: LD_VAR 0 4
110295: PUSH
110296: LD_VAR 0 7
110300: ARRAY
110301: PPUSH
110302: CALL_OW 264
110306: PUSH
110307: LD_INT 49
110309: EQUAL
110310: IFFALSE 110431
// begin if not HasTask ( group [ i ] ) then
110312: LD_VAR 0 4
110316: PUSH
110317: LD_VAR 0 7
110321: ARRAY
110322: PPUSH
110323: CALL_OW 314
110327: NOT
110328: IFFALSE 110431
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
110330: LD_ADDR_VAR 0 9
110334: PUSH
110335: LD_INT 81
110337: PUSH
110338: LD_VAR 0 4
110342: PUSH
110343: LD_VAR 0 7
110347: ARRAY
110348: PPUSH
110349: CALL_OW 255
110353: PUSH
110354: EMPTY
110355: LIST
110356: LIST
110357: PPUSH
110358: CALL_OW 69
110362: PPUSH
110363: LD_VAR 0 4
110367: PUSH
110368: LD_VAR 0 7
110372: ARRAY
110373: PPUSH
110374: CALL_OW 74
110378: ST_TO_ADDR
// if k then
110379: LD_VAR 0 9
110383: IFFALSE 110431
// if GetDistUnits ( group [ i ] , k ) > 10 then
110385: LD_VAR 0 4
110389: PUSH
110390: LD_VAR 0 7
110394: ARRAY
110395: PPUSH
110396: LD_VAR 0 9
110400: PPUSH
110401: CALL_OW 296
110405: PUSH
110406: LD_INT 10
110408: GREATER
110409: IFFALSE 110431
// ComMoveUnit ( group [ i ] , k ) ;
110411: LD_VAR 0 4
110415: PUSH
110416: LD_VAR 0 7
110420: ARRAY
110421: PPUSH
110422: LD_VAR 0 9
110426: PPUSH
110427: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
110431: LD_VAR 0 4
110435: PUSH
110436: LD_VAR 0 7
110440: ARRAY
110441: PPUSH
110442: CALL_OW 256
110446: PUSH
110447: LD_INT 250
110449: LESS
110450: PUSH
110451: LD_VAR 0 4
110455: PUSH
110456: LD_VAR 0 7
110460: ARRAY
110461: PUSH
110462: LD_INT 21
110464: PUSH
110465: LD_INT 2
110467: PUSH
110468: EMPTY
110469: LIST
110470: LIST
110471: PUSH
110472: LD_INT 23
110474: PUSH
110475: LD_INT 2
110477: PUSH
110478: EMPTY
110479: LIST
110480: LIST
110481: PUSH
110482: EMPTY
110483: LIST
110484: LIST
110485: PPUSH
110486: CALL_OW 69
110490: IN
110491: AND
110492: IFFALSE 110617
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
110494: LD_ADDR_VAR 0 9
110498: PUSH
110499: LD_OWVAR 3
110503: PUSH
110504: LD_VAR 0 4
110508: PUSH
110509: LD_VAR 0 7
110513: ARRAY
110514: DIFF
110515: PPUSH
110516: LD_VAR 0 4
110520: PUSH
110521: LD_VAR 0 7
110525: ARRAY
110526: PPUSH
110527: CALL_OW 74
110531: ST_TO_ADDR
// if not k then
110532: LD_VAR 0 9
110536: NOT
110537: IFFALSE 110541
// continue ;
110539: GO 106956
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
110541: LD_VAR 0 9
110545: PUSH
110546: LD_INT 81
110548: PUSH
110549: LD_VAR 0 4
110553: PUSH
110554: LD_VAR 0 7
110558: ARRAY
110559: PPUSH
110560: CALL_OW 255
110564: PUSH
110565: EMPTY
110566: LIST
110567: LIST
110568: PPUSH
110569: CALL_OW 69
110573: IN
110574: PUSH
110575: LD_VAR 0 9
110579: PPUSH
110580: LD_VAR 0 4
110584: PUSH
110585: LD_VAR 0 7
110589: ARRAY
110590: PPUSH
110591: CALL_OW 296
110595: PUSH
110596: LD_INT 5
110598: LESS
110599: AND
110600: IFFALSE 110617
// ComAutodestruct ( group [ i ] ) ;
110602: LD_VAR 0 4
110606: PUSH
110607: LD_VAR 0 7
110611: ARRAY
110612: PPUSH
110613: CALL 52491 0 1
// end ; if f_attack_depot then
110617: LD_VAR 0 25
110621: IFFALSE 110733
// begin k := 6 ;
110623: LD_ADDR_VAR 0 9
110627: PUSH
110628: LD_INT 6
110630: ST_TO_ADDR
// if tmp < k then
110631: LD_VAR 0 14
110635: PUSH
110636: LD_VAR 0 9
110640: LESS
110641: IFFALSE 110653
// k := tmp ;
110643: LD_ADDR_VAR 0 9
110647: PUSH
110648: LD_VAR 0 14
110652: ST_TO_ADDR
// for j = 1 to k do
110653: LD_ADDR_VAR 0 8
110657: PUSH
110658: DOUBLE
110659: LD_INT 1
110661: DEC
110662: ST_TO_ADDR
110663: LD_VAR 0 9
110667: PUSH
110668: FOR_TO
110669: IFFALSE 110731
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
110671: LD_VAR 0 8
110675: PPUSH
110676: CALL_OW 266
110680: PUSH
110681: LD_INT 0
110683: PUSH
110684: LD_INT 1
110686: PUSH
110687: EMPTY
110688: LIST
110689: LIST
110690: IN
110691: IFFALSE 110729
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
110693: LD_VAR 0 4
110697: PUSH
110698: LD_VAR 0 7
110702: ARRAY
110703: PPUSH
110704: LD_VAR 0 14
110708: PUSH
110709: LD_VAR 0 8
110713: ARRAY
110714: PPUSH
110715: CALL_OW 115
// attacking := true ;
110719: LD_ADDR_VAR 0 29
110723: PUSH
110724: LD_INT 1
110726: ST_TO_ADDR
// break ;
110727: GO 110731
// end ;
110729: GO 110668
110731: POP
110732: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
110733: LD_VAR 0 4
110737: PUSH
110738: LD_VAR 0 7
110742: ARRAY
110743: PPUSH
110744: CALL_OW 302
110748: PUSH
110749: LD_VAR 0 29
110753: NOT
110754: AND
110755: IFFALSE 111077
// begin if GetTag ( group [ i ] ) = 71 then
110757: LD_VAR 0 4
110761: PUSH
110762: LD_VAR 0 7
110766: ARRAY
110767: PPUSH
110768: CALL_OW 110
110772: PUSH
110773: LD_INT 71
110775: EQUAL
110776: IFFALSE 110817
// begin if HasTask ( group [ i ] ) then
110778: LD_VAR 0 4
110782: PUSH
110783: LD_VAR 0 7
110787: ARRAY
110788: PPUSH
110789: CALL_OW 314
110793: IFFALSE 110799
// continue else
110795: GO 106956
110797: GO 110817
// SetTag ( group [ i ] , 0 ) ;
110799: LD_VAR 0 4
110803: PUSH
110804: LD_VAR 0 7
110808: ARRAY
110809: PPUSH
110810: LD_INT 0
110812: PPUSH
110813: CALL_OW 109
// end ; k := 8 ;
110817: LD_ADDR_VAR 0 9
110821: PUSH
110822: LD_INT 8
110824: ST_TO_ADDR
// x := 0 ;
110825: LD_ADDR_VAR 0 10
110829: PUSH
110830: LD_INT 0
110832: ST_TO_ADDR
// if tmp < k then
110833: LD_VAR 0 14
110837: PUSH
110838: LD_VAR 0 9
110842: LESS
110843: IFFALSE 110855
// k := tmp ;
110845: LD_ADDR_VAR 0 9
110849: PUSH
110850: LD_VAR 0 14
110854: ST_TO_ADDR
// for j = 1 to k do
110855: LD_ADDR_VAR 0 8
110859: PUSH
110860: DOUBLE
110861: LD_INT 1
110863: DEC
110864: ST_TO_ADDR
110865: LD_VAR 0 9
110869: PUSH
110870: FOR_TO
110871: IFFALSE 110969
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
110873: LD_VAR 0 14
110877: PUSH
110878: LD_VAR 0 8
110882: ARRAY
110883: PPUSH
110884: CALL_OW 247
110888: PUSH
110889: LD_INT 1
110891: EQUAL
110892: PUSH
110893: LD_VAR 0 14
110897: PUSH
110898: LD_VAR 0 8
110902: ARRAY
110903: PPUSH
110904: CALL_OW 256
110908: PUSH
110909: LD_INT 250
110911: LESS
110912: PUSH
110913: LD_VAR 0 20
110917: AND
110918: PUSH
110919: LD_VAR 0 20
110923: NOT
110924: PUSH
110925: LD_VAR 0 14
110929: PUSH
110930: LD_VAR 0 8
110934: ARRAY
110935: PPUSH
110936: CALL_OW 256
110940: PUSH
110941: LD_INT 250
110943: GREATEREQUAL
110944: AND
110945: OR
110946: AND
110947: IFFALSE 110967
// begin x := tmp [ j ] ;
110949: LD_ADDR_VAR 0 10
110953: PUSH
110954: LD_VAR 0 14
110958: PUSH
110959: LD_VAR 0 8
110963: ARRAY
110964: ST_TO_ADDR
// break ;
110965: GO 110969
// end ;
110967: GO 110870
110969: POP
110970: POP
// if x then
110971: LD_VAR 0 10
110975: IFFALSE 110999
// ComAttackUnit ( group [ i ] , x ) else
110977: LD_VAR 0 4
110981: PUSH
110982: LD_VAR 0 7
110986: ARRAY
110987: PPUSH
110988: LD_VAR 0 10
110992: PPUSH
110993: CALL_OW 115
110997: GO 111023
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
110999: LD_VAR 0 4
111003: PUSH
111004: LD_VAR 0 7
111008: ARRAY
111009: PPUSH
111010: LD_VAR 0 14
111014: PUSH
111015: LD_INT 1
111017: ARRAY
111018: PPUSH
111019: CALL_OW 115
// if not HasTask ( group [ i ] ) then
111023: LD_VAR 0 4
111027: PUSH
111028: LD_VAR 0 7
111032: ARRAY
111033: PPUSH
111034: CALL_OW 314
111038: NOT
111039: IFFALSE 111077
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
111041: LD_VAR 0 4
111045: PUSH
111046: LD_VAR 0 7
111050: ARRAY
111051: PPUSH
111052: LD_VAR 0 14
111056: PPUSH
111057: LD_VAR 0 4
111061: PUSH
111062: LD_VAR 0 7
111066: ARRAY
111067: PPUSH
111068: CALL_OW 74
111072: PPUSH
111073: CALL_OW 115
// end ; end ; end ;
111077: GO 106956
111079: POP
111080: POP
// wait ( 0 0$2 ) ;
111081: LD_INT 70
111083: PPUSH
111084: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
111088: LD_VAR 0 4
111092: NOT
111093: PUSH
111094: LD_VAR 0 4
111098: PUSH
111099: EMPTY
111100: EQUAL
111101: OR
111102: PUSH
111103: LD_INT 81
111105: PUSH
111106: LD_VAR 0 35
111110: PUSH
111111: EMPTY
111112: LIST
111113: LIST
111114: PPUSH
111115: CALL_OW 69
111119: NOT
111120: OR
111121: IFFALSE 106941
// end ;
111123: LD_VAR 0 2
111127: RET
// export function BasicDefend ( base , solds ) ; var enemy , side , i , hex ; begin
111128: LD_INT 0
111130: PPUSH
111131: PPUSH
111132: PPUSH
111133: PPUSH
111134: PPUSH
// if not base or not mc_bases [ base ] or not solds then
111135: LD_VAR 0 1
111139: NOT
111140: PUSH
111141: LD_EXP 50
111145: PUSH
111146: LD_VAR 0 1
111150: ARRAY
111151: NOT
111152: OR
111153: PUSH
111154: LD_VAR 0 2
111158: NOT
111159: OR
111160: IFFALSE 111164
// exit ;
111162: GO 111693
// side := mc_sides [ base ] ;
111164: LD_ADDR_VAR 0 5
111168: PUSH
111169: LD_EXP 76
111173: PUSH
111174: LD_VAR 0 1
111178: ARRAY
111179: ST_TO_ADDR
// if not side then
111180: LD_VAR 0 5
111184: NOT
111185: IFFALSE 111189
// exit ;
111187: GO 111693
// for i in solds do
111189: LD_ADDR_VAR 0 6
111193: PUSH
111194: LD_VAR 0 2
111198: PUSH
111199: FOR_IN
111200: IFFALSE 111261
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
111202: LD_VAR 0 6
111206: PPUSH
111207: CALL_OW 310
111211: PPUSH
111212: CALL_OW 266
111216: PUSH
111217: LD_INT 32
111219: PUSH
111220: LD_INT 31
111222: PUSH
111223: EMPTY
111224: LIST
111225: LIST
111226: IN
111227: IFFALSE 111247
// solds := solds diff i else
111229: LD_ADDR_VAR 0 2
111233: PUSH
111234: LD_VAR 0 2
111238: PUSH
111239: LD_VAR 0 6
111243: DIFF
111244: ST_TO_ADDR
111245: GO 111259
// SetTag ( i , 18 ) ;
111247: LD_VAR 0 6
111251: PPUSH
111252: LD_INT 18
111254: PPUSH
111255: CALL_OW 109
111259: GO 111199
111261: POP
111262: POP
// if not solds then
111263: LD_VAR 0 2
111267: NOT
111268: IFFALSE 111272
// exit ;
111270: GO 111693
// repeat wait ( 0 0$2 ) ;
111272: LD_INT 70
111274: PPUSH
111275: CALL_OW 67
// enemy := mc_scan [ base ] ;
111279: LD_ADDR_VAR 0 4
111283: PUSH
111284: LD_EXP 73
111288: PUSH
111289: LD_VAR 0 1
111293: ARRAY
111294: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
111295: LD_EXP 50
111299: PUSH
111300: LD_VAR 0 1
111304: ARRAY
111305: NOT
111306: PUSH
111307: LD_EXP 50
111311: PUSH
111312: LD_VAR 0 1
111316: ARRAY
111317: PUSH
111318: EMPTY
111319: EQUAL
111320: OR
111321: IFFALSE 111358
// begin for i in solds do
111323: LD_ADDR_VAR 0 6
111327: PUSH
111328: LD_VAR 0 2
111332: PUSH
111333: FOR_IN
111334: IFFALSE 111347
// ComStop ( i ) ;
111336: LD_VAR 0 6
111340: PPUSH
111341: CALL_OW 141
111345: GO 111333
111347: POP
111348: POP
// solds := [ ] ;
111349: LD_ADDR_VAR 0 2
111353: PUSH
111354: EMPTY
111355: ST_TO_ADDR
// exit ;
111356: GO 111693
// end ; for i in solds do
111358: LD_ADDR_VAR 0 6
111362: PUSH
111363: LD_VAR 0 2
111367: PUSH
111368: FOR_IN
111369: IFFALSE 111665
// begin if IsInUnit ( i ) then
111371: LD_VAR 0 6
111375: PPUSH
111376: CALL_OW 310
111380: IFFALSE 111391
// ComExitBuilding ( i ) ;
111382: LD_VAR 0 6
111386: PPUSH
111387: CALL_OW 122
// if GetLives ( i ) > 333 then
111391: LD_VAR 0 6
111395: PPUSH
111396: CALL_OW 256
111400: PUSH
111401: LD_INT 333
111403: GREATER
111404: IFFALSE 111432
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
111406: LD_VAR 0 6
111410: PPUSH
111411: LD_VAR 0 4
111415: PPUSH
111416: LD_VAR 0 6
111420: PPUSH
111421: CALL_OW 74
111425: PPUSH
111426: CALL_OW 115
111430: GO 111663
// if GetDistUnits ( i , NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ) > 10 then
111432: LD_VAR 0 6
111436: PPUSH
111437: LD_EXP 50
111441: PUSH
111442: LD_VAR 0 1
111446: ARRAY
111447: PPUSH
111448: LD_INT 2
111450: PUSH
111451: LD_INT 30
111453: PUSH
111454: LD_INT 0
111456: PUSH
111457: EMPTY
111458: LIST
111459: LIST
111460: PUSH
111461: LD_INT 30
111463: PUSH
111464: LD_INT 1
111466: PUSH
111467: EMPTY
111468: LIST
111469: LIST
111470: PUSH
111471: LD_INT 30
111473: PUSH
111474: LD_INT 6
111476: PUSH
111477: EMPTY
111478: LIST
111479: LIST
111480: PUSH
111481: EMPTY
111482: LIST
111483: LIST
111484: LIST
111485: LIST
111486: PPUSH
111487: CALL_OW 72
111491: PPUSH
111492: LD_VAR 0 6
111496: PPUSH
111497: CALL_OW 74
111501: PPUSH
111502: CALL_OW 296
111506: PUSH
111507: LD_INT 10
111509: GREATER
111510: IFFALSE 111663
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
111512: LD_ADDR_VAR 0 7
111516: PUSH
111517: LD_EXP 50
111521: PUSH
111522: LD_VAR 0 1
111526: ARRAY
111527: PPUSH
111528: LD_INT 2
111530: PUSH
111531: LD_INT 30
111533: PUSH
111534: LD_INT 0
111536: PUSH
111537: EMPTY
111538: LIST
111539: LIST
111540: PUSH
111541: LD_INT 30
111543: PUSH
111544: LD_INT 1
111546: PUSH
111547: EMPTY
111548: LIST
111549: LIST
111550: PUSH
111551: LD_INT 30
111553: PUSH
111554: LD_INT 6
111556: PUSH
111557: EMPTY
111558: LIST
111559: LIST
111560: PUSH
111561: EMPTY
111562: LIST
111563: LIST
111564: LIST
111565: LIST
111566: PPUSH
111567: CALL_OW 72
111571: PPUSH
111572: LD_VAR 0 6
111576: PPUSH
111577: CALL_OW 74
111581: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
111582: LD_VAR 0 6
111586: PPUSH
111587: LD_VAR 0 7
111591: PPUSH
111592: CALL_OW 250
111596: PPUSH
111597: LD_INT 3
111599: PPUSH
111600: LD_INT 5
111602: PPUSH
111603: CALL_OW 272
111607: PPUSH
111608: LD_VAR 0 7
111612: PPUSH
111613: CALL_OW 251
111617: PPUSH
111618: LD_INT 3
111620: PPUSH
111621: LD_INT 5
111623: PPUSH
111624: CALL_OW 273
111628: PPUSH
111629: CALL_OW 111
// SetTag ( i , 0 ) ;
111633: LD_VAR 0 6
111637: PPUSH
111638: LD_INT 0
111640: PPUSH
111641: CALL_OW 109
// solds := solds diff i ;
111645: LD_ADDR_VAR 0 2
111649: PUSH
111650: LD_VAR 0 2
111654: PUSH
111655: LD_VAR 0 6
111659: DIFF
111660: ST_TO_ADDR
// continue ;
111661: GO 111368
// end ; end ;
111663: GO 111368
111665: POP
111666: POP
// until not solds or not enemy ;
111667: LD_VAR 0 2
111671: NOT
111672: PUSH
111673: LD_VAR 0 4
111677: NOT
111678: OR
111679: IFFALSE 111272
// MC_Reset ( base , 18 ) ;
111681: LD_VAR 0 1
111685: PPUSH
111686: LD_INT 18
111688: PPUSH
111689: CALL 62907 0 2
// end ;
111693: LD_VAR 0 3
111697: RET
// export function Defend ( base , defenders ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend , class , enemy ; begin
111698: LD_INT 0
111700: PPUSH
111701: PPUSH
111702: PPUSH
111703: PPUSH
111704: PPUSH
111705: PPUSH
111706: PPUSH
111707: PPUSH
111708: PPUSH
111709: PPUSH
111710: PPUSH
111711: PPUSH
111712: PPUSH
111713: PPUSH
111714: PPUSH
111715: PPUSH
111716: PPUSH
111717: PPUSH
111718: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
111719: LD_ADDR_VAR 0 12
111723: PUSH
111724: LD_EXP 50
111728: PUSH
111729: LD_VAR 0 1
111733: ARRAY
111734: PPUSH
111735: LD_INT 25
111737: PUSH
111738: LD_INT 3
111740: PUSH
111741: EMPTY
111742: LIST
111743: LIST
111744: PPUSH
111745: CALL_OW 72
111749: ST_TO_ADDR
// if mc_remote_driver [ base ] then
111750: LD_EXP 90
111754: PUSH
111755: LD_VAR 0 1
111759: ARRAY
111760: IFFALSE 111784
// mechs := mechs diff mc_remote_driver [ base ] ;
111762: LD_ADDR_VAR 0 12
111766: PUSH
111767: LD_VAR 0 12
111771: PUSH
111772: LD_EXP 90
111776: PUSH
111777: LD_VAR 0 1
111781: ARRAY
111782: DIFF
111783: ST_TO_ADDR
// for i in mechs do
111784: LD_ADDR_VAR 0 4
111788: PUSH
111789: LD_VAR 0 12
111793: PUSH
111794: FOR_IN
111795: IFFALSE 111830
// if GetTag ( i ) > 0 then
111797: LD_VAR 0 4
111801: PPUSH
111802: CALL_OW 110
111806: PUSH
111807: LD_INT 0
111809: GREATER
111810: IFFALSE 111828
// mechs := mechs diff i ;
111812: LD_ADDR_VAR 0 12
111816: PUSH
111817: LD_VAR 0 12
111821: PUSH
111822: LD_VAR 0 4
111826: DIFF
111827: ST_TO_ADDR
111828: GO 111794
111830: POP
111831: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
111832: LD_ADDR_VAR 0 8
111836: PUSH
111837: LD_EXP 50
111841: PUSH
111842: LD_VAR 0 1
111846: ARRAY
111847: PPUSH
111848: LD_INT 2
111850: PUSH
111851: LD_INT 25
111853: PUSH
111854: LD_INT 1
111856: PUSH
111857: EMPTY
111858: LIST
111859: LIST
111860: PUSH
111861: LD_INT 25
111863: PUSH
111864: LD_INT 5
111866: PUSH
111867: EMPTY
111868: LIST
111869: LIST
111870: PUSH
111871: LD_INT 25
111873: PUSH
111874: LD_INT 8
111876: PUSH
111877: EMPTY
111878: LIST
111879: LIST
111880: PUSH
111881: LD_INT 25
111883: PUSH
111884: LD_INT 9
111886: PUSH
111887: EMPTY
111888: LIST
111889: LIST
111890: PUSH
111891: EMPTY
111892: LIST
111893: LIST
111894: LIST
111895: LIST
111896: LIST
111897: PPUSH
111898: CALL_OW 72
111902: ST_TO_ADDR
// if not defenders and not solds then
111903: LD_VAR 0 2
111907: NOT
111908: PUSH
111909: LD_VAR 0 8
111913: NOT
111914: AND
111915: IFFALSE 111919
// exit ;
111917: GO 113689
// depot_under_attack := false ;
111919: LD_ADDR_VAR 0 16
111923: PUSH
111924: LD_INT 0
111926: ST_TO_ADDR
// sold_defenders := [ ] ;
111927: LD_ADDR_VAR 0 17
111931: PUSH
111932: EMPTY
111933: ST_TO_ADDR
// if mechs then
111934: LD_VAR 0 12
111938: IFFALSE 112091
// for i in UnitFilter ( defenders , [ f_type , unit_vehicle ] ) do
111940: LD_ADDR_VAR 0 4
111944: PUSH
111945: LD_VAR 0 2
111949: PPUSH
111950: LD_INT 21
111952: PUSH
111953: LD_INT 2
111955: PUSH
111956: EMPTY
111957: LIST
111958: LIST
111959: PPUSH
111960: CALL_OW 72
111964: PUSH
111965: FOR_IN
111966: IFFALSE 112089
// begin if GetTag ( i ) <> 20 then
111968: LD_VAR 0 4
111972: PPUSH
111973: CALL_OW 110
111977: PUSH
111978: LD_INT 20
111980: NONEQUAL
111981: IFFALSE 111995
// SetTag ( i , 20 ) ;
111983: LD_VAR 0 4
111987: PPUSH
111988: LD_INT 20
111990: PPUSH
111991: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
111995: LD_VAR 0 4
111999: PPUSH
112000: CALL_OW 263
112004: PUSH
112005: LD_INT 1
112007: EQUAL
112008: PUSH
112009: LD_VAR 0 4
112013: PPUSH
112014: CALL_OW 311
112018: NOT
112019: AND
112020: IFFALSE 112087
// begin un := mechs [ 1 ] ;
112022: LD_ADDR_VAR 0 10
112026: PUSH
112027: LD_VAR 0 12
112031: PUSH
112032: LD_INT 1
112034: ARRAY
112035: ST_TO_ADDR
// ComExit ( un ) ;
112036: LD_VAR 0 10
112040: PPUSH
112041: CALL 56836 0 1
// AddComEnterUnit ( un , i ) ;
112045: LD_VAR 0 10
112049: PPUSH
112050: LD_VAR 0 4
112054: PPUSH
112055: CALL_OW 180
// SetTag ( un , 19 ) ;
112059: LD_VAR 0 10
112063: PPUSH
112064: LD_INT 19
112066: PPUSH
112067: CALL_OW 109
// mechs := mechs diff un ;
112071: LD_ADDR_VAR 0 12
112075: PUSH
112076: LD_VAR 0 12
112080: PUSH
112081: LD_VAR 0 10
112085: DIFF
112086: ST_TO_ADDR
// end ; end ;
112087: GO 111965
112089: POP
112090: POP
// if solds then
112091: LD_VAR 0 8
112095: IFFALSE 112154
// for i in solds do
112097: LD_ADDR_VAR 0 4
112101: PUSH
112102: LD_VAR 0 8
112106: PUSH
112107: FOR_IN
112108: IFFALSE 112152
// if not GetTag ( i ) then
112110: LD_VAR 0 4
112114: PPUSH
112115: CALL_OW 110
112119: NOT
112120: IFFALSE 112150
// begin defenders := defenders union i ;
112122: LD_ADDR_VAR 0 2
112126: PUSH
112127: LD_VAR 0 2
112131: PUSH
112132: LD_VAR 0 4
112136: UNION
112137: ST_TO_ADDR
// SetTag ( i , 18 ) ;
112138: LD_VAR 0 4
112142: PPUSH
112143: LD_INT 18
112145: PPUSH
112146: CALL_OW 109
// end ;
112150: GO 112107
112152: POP
112153: POP
// repeat wait ( 0 0$2 ) ;
112154: LD_INT 70
112156: PPUSH
112157: CALL_OW 67
// enemy := mc_scan [ base ] ;
112161: LD_ADDR_VAR 0 21
112165: PUSH
112166: LD_EXP 73
112170: PUSH
112171: LD_VAR 0 1
112175: ARRAY
112176: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
112177: LD_EXP 50
112181: PUSH
112182: LD_VAR 0 1
112186: ARRAY
112187: NOT
112188: PUSH
112189: LD_EXP 50
112193: PUSH
112194: LD_VAR 0 1
112198: ARRAY
112199: PUSH
112200: EMPTY
112201: EQUAL
112202: OR
112203: IFFALSE 112240
// begin for i in defenders do
112205: LD_ADDR_VAR 0 4
112209: PUSH
112210: LD_VAR 0 2
112214: PUSH
112215: FOR_IN
112216: IFFALSE 112229
// ComStop ( i ) ;
112218: LD_VAR 0 4
112222: PPUSH
112223: CALL_OW 141
112227: GO 112215
112229: POP
112230: POP
// defenders := [ ] ;
112231: LD_ADDR_VAR 0 2
112235: PUSH
112236: EMPTY
112237: ST_TO_ADDR
// exit ;
112238: GO 113689
// end ; for i in defenders do
112240: LD_ADDR_VAR 0 4
112244: PUSH
112245: LD_VAR 0 2
112249: PUSH
112250: FOR_IN
112251: IFFALSE 113149
// begin e := NearestUnitToUnit ( enemy , i ) ;
112253: LD_ADDR_VAR 0 13
112257: PUSH
112258: LD_VAR 0 21
112262: PPUSH
112263: LD_VAR 0 4
112267: PPUSH
112268: CALL_OW 74
112272: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
112273: LD_ADDR_VAR 0 7
112277: PUSH
112278: LD_EXP 50
112282: PUSH
112283: LD_VAR 0 1
112287: ARRAY
112288: PPUSH
112289: LD_INT 2
112291: PUSH
112292: LD_INT 30
112294: PUSH
112295: LD_INT 0
112297: PUSH
112298: EMPTY
112299: LIST
112300: LIST
112301: PUSH
112302: LD_INT 30
112304: PUSH
112305: LD_INT 1
112307: PUSH
112308: EMPTY
112309: LIST
112310: LIST
112311: PUSH
112312: EMPTY
112313: LIST
112314: LIST
112315: LIST
112316: PPUSH
112317: CALL_OW 72
112321: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
112322: LD_ADDR_VAR 0 16
112326: PUSH
112327: LD_VAR 0 7
112331: NOT
112332: PUSH
112333: LD_VAR 0 7
112337: PPUSH
112338: LD_INT 3
112340: PUSH
112341: LD_INT 24
112343: PUSH
112344: LD_INT 600
112346: PUSH
112347: EMPTY
112348: LIST
112349: LIST
112350: PUSH
112351: EMPTY
112352: LIST
112353: LIST
112354: PPUSH
112355: CALL_OW 72
112359: OR
112360: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
112361: LD_VAR 0 4
112365: PPUSH
112366: CALL_OW 247
112370: PUSH
112371: LD_INT 2
112373: DOUBLE
112374: EQUAL
112375: IFTRUE 112379
112377: GO 112775
112379: POP
// begin if GetLives ( i ) = 1000 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
112380: LD_VAR 0 4
112384: PPUSH
112385: CALL_OW 256
112389: PUSH
112390: LD_INT 1000
112392: EQUAL
112393: PUSH
112394: LD_VAR 0 4
112398: PPUSH
112399: LD_VAR 0 13
112403: PPUSH
112404: CALL_OW 296
112408: PUSH
112409: LD_INT 40
112411: LESS
112412: PUSH
112413: LD_VAR 0 13
112417: PPUSH
112418: LD_EXP 75
112422: PUSH
112423: LD_VAR 0 1
112427: ARRAY
112428: PPUSH
112429: CALL_OW 308
112433: OR
112434: AND
112435: IFFALSE 112557
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
112437: LD_VAR 0 4
112441: PPUSH
112442: CALL_OW 262
112446: PUSH
112447: LD_INT 1
112449: EQUAL
112450: PUSH
112451: LD_VAR 0 4
112455: PPUSH
112456: CALL_OW 261
112460: PUSH
112461: LD_INT 30
112463: LESS
112464: AND
112465: PUSH
112466: LD_VAR 0 7
112470: AND
112471: IFFALSE 112541
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
112473: LD_VAR 0 4
112477: PPUSH
112478: LD_VAR 0 7
112482: PPUSH
112483: LD_VAR 0 4
112487: PPUSH
112488: CALL_OW 74
112492: PPUSH
112493: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
112497: LD_VAR 0 4
112501: PPUSH
112502: LD_VAR 0 7
112506: PPUSH
112507: LD_VAR 0 4
112511: PPUSH
112512: CALL_OW 74
112516: PPUSH
112517: CALL_OW 296
112521: PUSH
112522: LD_INT 6
112524: LESS
112525: IFFALSE 112539
// SetFuel ( i , 100 ) ;
112527: LD_VAR 0 4
112531: PPUSH
112532: LD_INT 100
112534: PPUSH
112535: CALL_OW 240
// end else
112539: GO 112555
// ComAttackUnit ( i , e ) ;
112541: LD_VAR 0 4
112545: PPUSH
112546: LD_VAR 0 13
112550: PPUSH
112551: CALL_OW 115
// end else
112555: GO 112658
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
112557: LD_VAR 0 13
112561: PPUSH
112562: LD_EXP 75
112566: PUSH
112567: LD_VAR 0 1
112571: ARRAY
112572: PPUSH
112573: CALL_OW 308
112577: NOT
112578: PUSH
112579: LD_VAR 0 4
112583: PPUSH
112584: LD_VAR 0 13
112588: PPUSH
112589: CALL_OW 296
112593: PUSH
112594: LD_INT 40
112596: GREATEREQUAL
112597: AND
112598: PUSH
112599: LD_VAR 0 4
112603: PPUSH
112604: CALL_OW 256
112608: PUSH
112609: LD_INT 650
112611: LESSEQUAL
112612: OR
112613: PUSH
112614: LD_VAR 0 4
112618: PPUSH
112619: LD_EXP 74
112623: PUSH
112624: LD_VAR 0 1
112628: ARRAY
112629: PPUSH
112630: CALL_OW 308
112634: NOT
112635: AND
112636: IFFALSE 112658
// ComMoveToArea ( i , mc_parking [ base ] ) ;
112638: LD_VAR 0 4
112642: PPUSH
112643: LD_EXP 74
112647: PUSH
112648: LD_VAR 0 1
112652: ARRAY
112653: PPUSH
112654: CALL_OW 113
// if GetLives ( i ) < 1000 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
112658: LD_VAR 0 4
112662: PPUSH
112663: CALL_OW 256
112667: PUSH
112668: LD_INT 1000
112670: LESS
112671: PUSH
112672: LD_VAR 0 4
112676: PPUSH
112677: CALL_OW 263
112681: PUSH
112682: LD_INT 1
112684: EQUAL
112685: AND
112686: PUSH
112687: LD_VAR 0 4
112691: PPUSH
112692: CALL_OW 311
112696: AND
112697: PUSH
112698: LD_VAR 0 4
112702: PPUSH
112703: LD_EXP 74
112707: PUSH
112708: LD_VAR 0 1
112712: ARRAY
112713: PPUSH
112714: CALL_OW 308
112718: AND
112719: IFFALSE 112773
// begin mech := IsDrivenBy ( i ) ;
112721: LD_ADDR_VAR 0 9
112725: PUSH
112726: LD_VAR 0 4
112730: PPUSH
112731: CALL_OW 311
112735: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
112736: LD_VAR 0 9
112740: PPUSH
112741: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
112745: LD_VAR 0 9
112749: PPUSH
112750: LD_VAR 0 4
112754: PPUSH
112755: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
112759: LD_VAR 0 9
112763: PPUSH
112764: LD_VAR 0 4
112768: PPUSH
112769: CALL_OW 180
// end ; end ; unit_human :
112773: GO 113120
112775: LD_INT 1
112777: DOUBLE
112778: EQUAL
112779: IFTRUE 112783
112781: GO 113119
112783: POP
// begin b := IsInUnit ( i ) ;
112784: LD_ADDR_VAR 0 18
112788: PUSH
112789: LD_VAR 0 4
112793: PPUSH
112794: CALL_OW 310
112798: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
112799: LD_ADDR_VAR 0 19
112803: PUSH
112804: LD_VAR 0 18
112808: NOT
112809: PUSH
112810: LD_VAR 0 18
112814: PPUSH
112815: CALL_OW 266
112819: PUSH
112820: LD_INT 32
112822: PUSH
112823: LD_INT 31
112825: PUSH
112826: EMPTY
112827: LIST
112828: LIST
112829: IN
112830: OR
112831: ST_TO_ADDR
// if GetBType ( b ) = b_barracks and GetClass ( i ) in [ 1 , 2 , 3 , 4 ] then
112832: LD_VAR 0 18
112836: PPUSH
112837: CALL_OW 266
112841: PUSH
112842: LD_INT 5
112844: EQUAL
112845: PUSH
112846: LD_VAR 0 4
112850: PPUSH
112851: CALL_OW 257
112855: PUSH
112856: LD_INT 1
112858: PUSH
112859: LD_INT 2
112861: PUSH
112862: LD_INT 3
112864: PUSH
112865: LD_INT 4
112867: PUSH
112868: EMPTY
112869: LIST
112870: LIST
112871: LIST
112872: LIST
112873: IN
112874: AND
112875: IFFALSE 112912
// begin class := AllowSpecClass ( i ) ;
112877: LD_ADDR_VAR 0 20
112881: PUSH
112882: LD_VAR 0 4
112886: PPUSH
112887: CALL 21497 0 1
112891: ST_TO_ADDR
// if class then
112892: LD_VAR 0 20
112896: IFFALSE 112912
// ComChangeProfession ( i , class ) ;
112898: LD_VAR 0 4
112902: PPUSH
112903: LD_VAR 0 20
112907: PPUSH
112908: CALL_OW 123
// end ; if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
112912: LD_VAR 0 16
112916: PUSH
112917: LD_VAR 0 2
112921: PPUSH
112922: LD_INT 21
112924: PUSH
112925: LD_INT 2
112927: PUSH
112928: EMPTY
112929: LIST
112930: LIST
112931: PPUSH
112932: CALL_OW 72
112936: PUSH
112937: LD_INT 1
112939: LESSEQUAL
112940: OR
112941: PUSH
112942: LD_VAR 0 19
112946: AND
112947: PUSH
112948: LD_VAR 0 4
112952: PUSH
112953: LD_VAR 0 17
112957: IN
112958: NOT
112959: AND
112960: IFFALSE 113053
// begin if b then
112962: LD_VAR 0 18
112966: IFFALSE 113015
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
112968: LD_VAR 0 18
112972: PPUSH
112973: LD_VAR 0 21
112977: PPUSH
112978: LD_VAR 0 18
112982: PPUSH
112983: CALL_OW 74
112987: PPUSH
112988: CALL_OW 296
112992: PUSH
112993: LD_INT 10
112995: LESS
112996: PUSH
112997: LD_VAR 0 18
113001: PPUSH
113002: CALL_OW 461
113006: PUSH
113007: LD_INT 7
113009: NONEQUAL
113010: AND
113011: IFFALSE 113015
// continue ;
113013: GO 112250
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
113015: LD_ADDR_VAR 0 17
113019: PUSH
113020: LD_VAR 0 17
113024: PPUSH
113025: LD_VAR 0 17
113029: PUSH
113030: LD_INT 1
113032: PLUS
113033: PPUSH
113034: LD_VAR 0 4
113038: PPUSH
113039: CALL_OW 1
113043: ST_TO_ADDR
// ComExitBuilding ( i ) ;
113044: LD_VAR 0 4
113048: PPUSH
113049: CALL_OW 122
// end ; if sold_defenders then
113053: LD_VAR 0 17
113057: IFFALSE 113117
// if i in sold_defenders then
113059: LD_VAR 0 4
113063: PUSH
113064: LD_VAR 0 17
113068: IN
113069: IFFALSE 113117
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
113071: LD_VAR 0 4
113075: PPUSH
113076: CALL_OW 314
113080: NOT
113081: PUSH
113082: LD_VAR 0 4
113086: PPUSH
113087: LD_VAR 0 13
113091: PPUSH
113092: CALL_OW 296
113096: PUSH
113097: LD_INT 30
113099: LESS
113100: AND
113101: IFFALSE 113117
// ComAttackUnit ( i , e ) ;
113103: LD_VAR 0 4
113107: PPUSH
113108: LD_VAR 0 13
113112: PPUSH
113113: CALL_OW 115
// end ; end ; end ;
113117: GO 113120
113119: POP
// if IsDead ( i ) then
113120: LD_VAR 0 4
113124: PPUSH
113125: CALL_OW 301
113129: IFFALSE 113147
// defenders := defenders diff i ;
113131: LD_ADDR_VAR 0 2
113135: PUSH
113136: LD_VAR 0 2
113140: PUSH
113141: LD_VAR 0 4
113145: DIFF
113146: ST_TO_ADDR
// end ;
113147: GO 112250
113149: POP
113150: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
113151: LD_VAR 0 21
113155: NOT
113156: PUSH
113157: LD_VAR 0 2
113161: NOT
113162: OR
113163: PUSH
113164: LD_EXP 50
113168: PUSH
113169: LD_VAR 0 1
113173: ARRAY
113174: NOT
113175: OR
113176: IFFALSE 112154
// MC_Reset ( base , 18 ) ;
113178: LD_VAR 0 1
113182: PPUSH
113183: LD_INT 18
113185: PPUSH
113186: CALL 62907 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
113190: LD_ADDR_VAR 0 2
113194: PUSH
113195: LD_VAR 0 2
113199: PUSH
113200: LD_VAR 0 2
113204: PPUSH
113205: LD_INT 2
113207: PUSH
113208: LD_INT 25
113210: PUSH
113211: LD_INT 1
113213: PUSH
113214: EMPTY
113215: LIST
113216: LIST
113217: PUSH
113218: LD_INT 25
113220: PUSH
113221: LD_INT 5
113223: PUSH
113224: EMPTY
113225: LIST
113226: LIST
113227: PUSH
113228: LD_INT 25
113230: PUSH
113231: LD_INT 8
113233: PUSH
113234: EMPTY
113235: LIST
113236: LIST
113237: PUSH
113238: LD_INT 25
113240: PUSH
113241: LD_INT 9
113243: PUSH
113244: EMPTY
113245: LIST
113246: LIST
113247: PUSH
113248: EMPTY
113249: LIST
113250: LIST
113251: LIST
113252: LIST
113253: LIST
113254: PPUSH
113255: CALL_OW 72
113259: DIFF
113260: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
113261: LD_VAR 0 21
113265: NOT
113266: PUSH
113267: LD_VAR 0 2
113271: PPUSH
113272: LD_INT 21
113274: PUSH
113275: LD_INT 2
113277: PUSH
113278: EMPTY
113279: LIST
113280: LIST
113281: PPUSH
113282: CALL_OW 72
113286: AND
113287: IFFALSE 113625
// begin tmp := FilterByTag ( defenders , 19 ) ;
113289: LD_ADDR_VAR 0 11
113293: PUSH
113294: LD_VAR 0 2
113298: PPUSH
113299: LD_INT 19
113301: PPUSH
113302: CALL 53966 0 2
113306: ST_TO_ADDR
// if tmp then
113307: LD_VAR 0 11
113311: IFFALSE 113381
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
113313: LD_ADDR_VAR 0 11
113317: PUSH
113318: LD_VAR 0 11
113322: PPUSH
113323: LD_INT 25
113325: PUSH
113326: LD_INT 3
113328: PUSH
113329: EMPTY
113330: LIST
113331: LIST
113332: PPUSH
113333: CALL_OW 72
113337: ST_TO_ADDR
// if tmp then
113338: LD_VAR 0 11
113342: IFFALSE 113381
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
113344: LD_ADDR_EXP 62
113348: PUSH
113349: LD_EXP 62
113353: PPUSH
113354: LD_VAR 0 1
113358: PPUSH
113359: LD_EXP 62
113363: PUSH
113364: LD_VAR 0 1
113368: ARRAY
113369: PUSH
113370: LD_VAR 0 11
113374: UNION
113375: PPUSH
113376: CALL_OW 1
113380: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
113381: LD_VAR 0 1
113385: PPUSH
113386: LD_INT 19
113388: PPUSH
113389: CALL 62907 0 2
// repeat wait ( 0 0$1 ) ;
113393: LD_INT 35
113395: PPUSH
113396: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
113400: LD_EXP 50
113404: PUSH
113405: LD_VAR 0 1
113409: ARRAY
113410: NOT
113411: PUSH
113412: LD_EXP 50
113416: PUSH
113417: LD_VAR 0 1
113421: ARRAY
113422: PUSH
113423: EMPTY
113424: EQUAL
113425: OR
113426: IFFALSE 113463
// begin for i in defenders do
113428: LD_ADDR_VAR 0 4
113432: PUSH
113433: LD_VAR 0 2
113437: PUSH
113438: FOR_IN
113439: IFFALSE 113452
// ComStop ( i ) ;
113441: LD_VAR 0 4
113445: PPUSH
113446: CALL_OW 141
113450: GO 113438
113452: POP
113453: POP
// defenders := [ ] ;
113454: LD_ADDR_VAR 0 2
113458: PUSH
113459: EMPTY
113460: ST_TO_ADDR
// exit ;
113461: GO 113689
// end ; for i in defenders do
113463: LD_ADDR_VAR 0 4
113467: PUSH
113468: LD_VAR 0 2
113472: PUSH
113473: FOR_IN
113474: IFFALSE 113563
// begin if not IsInArea ( i , mc_parking [ base ] ) then
113476: LD_VAR 0 4
113480: PPUSH
113481: LD_EXP 74
113485: PUSH
113486: LD_VAR 0 1
113490: ARRAY
113491: PPUSH
113492: CALL_OW 308
113496: NOT
113497: IFFALSE 113521
// ComMoveToArea ( i , mc_parking [ base ] ) else
113499: LD_VAR 0 4
113503: PPUSH
113504: LD_EXP 74
113508: PUSH
113509: LD_VAR 0 1
113513: ARRAY
113514: PPUSH
113515: CALL_OW 113
113519: GO 113561
// if GetControl ( i ) = control_manual then
113521: LD_VAR 0 4
113525: PPUSH
113526: CALL_OW 263
113530: PUSH
113531: LD_INT 1
113533: EQUAL
113534: IFFALSE 113561
// if IsDrivenBy ( i ) then
113536: LD_VAR 0 4
113540: PPUSH
113541: CALL_OW 311
113545: IFFALSE 113561
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
113547: LD_VAR 0 4
113551: PPUSH
113552: CALL_OW 311
113556: PPUSH
113557: CALL_OW 121
// end ;
113561: GO 113473
113563: POP
113564: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
113565: LD_VAR 0 2
113569: PPUSH
113570: LD_INT 95
113572: PUSH
113573: LD_EXP 74
113577: PUSH
113578: LD_VAR 0 1
113582: ARRAY
113583: PUSH
113584: EMPTY
113585: LIST
113586: LIST
113587: PPUSH
113588: CALL_OW 72
113592: PUSH
113593: LD_VAR 0 2
113597: EQUAL
113598: PUSH
113599: LD_EXP 73
113603: PUSH
113604: LD_VAR 0 1
113608: ARRAY
113609: OR
113610: PUSH
113611: LD_EXP 50
113615: PUSH
113616: LD_VAR 0 1
113620: ARRAY
113621: NOT
113622: OR
113623: IFFALSE 113393
// end ; mc_defender := Replace ( mc_defender , base , UnitFilter ( defenders , [ f_type , unit_vehicle ] ) ) ;
113625: LD_ADDR_EXP 72
113629: PUSH
113630: LD_EXP 72
113634: PPUSH
113635: LD_VAR 0 1
113639: PPUSH
113640: LD_VAR 0 2
113644: PPUSH
113645: LD_INT 21
113647: PUSH
113648: LD_INT 2
113650: PUSH
113651: EMPTY
113652: LIST
113653: LIST
113654: PPUSH
113655: CALL_OW 72
113659: PPUSH
113660: CALL_OW 1
113664: ST_TO_ADDR
// MC_Reset ( base , 19 ) ;
113665: LD_VAR 0 1
113669: PPUSH
113670: LD_INT 19
113672: PPUSH
113673: CALL 62907 0 2
// MC_Reset ( base , 20 ) ;
113677: LD_VAR 0 1
113681: PPUSH
113682: LD_INT 20
113684: PPUSH
113685: CALL 62907 0 2
// end ; end_of_file
113689: LD_VAR 0 3
113693: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
113694: LD_VAR 0 1
113698: PUSH
113699: LD_INT 200
113701: DOUBLE
113702: GREATEREQUAL
113703: IFFALSE 113711
113705: LD_INT 299
113707: DOUBLE
113708: LESSEQUAL
113709: IFTRUE 113713
113711: GO 113745
113713: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
113714: LD_VAR 0 1
113718: PPUSH
113719: LD_VAR 0 2
113723: PPUSH
113724: LD_VAR 0 3
113728: PPUSH
113729: LD_VAR 0 4
113733: PPUSH
113734: LD_VAR 0 5
113738: PPUSH
113739: CALL 102536 0 5
113743: GO 113822
113745: LD_INT 300
113747: DOUBLE
113748: GREATEREQUAL
113749: IFFALSE 113757
113751: LD_INT 399
113753: DOUBLE
113754: LESSEQUAL
113755: IFTRUE 113759
113757: GO 113821
113759: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
113760: LD_VAR 0 1
113764: PPUSH
113765: LD_VAR 0 2
113769: PPUSH
113770: LD_VAR 0 3
113774: PPUSH
113775: LD_VAR 0 4
113779: PPUSH
113780: LD_VAR 0 5
113784: PPUSH
113785: LD_VAR 0 6
113789: PPUSH
113790: LD_VAR 0 7
113794: PPUSH
113795: LD_VAR 0 8
113799: PPUSH
113800: LD_VAR 0 9
113804: PPUSH
113805: LD_VAR 0 10
113809: PPUSH
113810: LD_VAR 0 11
113814: PPUSH
113815: CALL 100424 0 11
113819: GO 113822
113821: POP
// end ;
113822: PPOPN 11
113824: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
113825: LD_VAR 0 1
113829: PPUSH
113830: LD_VAR 0 2
113834: PPUSH
113835: LD_VAR 0 3
113839: PPUSH
113840: LD_VAR 0 4
113844: PPUSH
113845: LD_VAR 0 5
113849: PPUSH
113850: CALL 102518 0 5
// end ; end_of_file
113854: PPOPN 5
113856: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
113857: LD_VAR 0 1
113861: PPUSH
113862: LD_VAR 0 2
113866: PPUSH
113867: LD_VAR 0 3
113871: PPUSH
113872: LD_VAR 0 4
113876: PPUSH
113877: LD_VAR 0 5
113881: PPUSH
113882: LD_VAR 0 6
113886: PPUSH
113887: CALL 89232 0 6
// end ;
113891: PPOPN 6
113893: END
