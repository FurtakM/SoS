// starting begin ResetFog ;
   0: CALL_OW 335
// InitSettings ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 31
// begin PlaceSeeing ( 1 , 1 , 1 , - 372963 ) ;
  14: LD_INT 1
  16: PPUSH
  17: LD_INT 1
  19: PPUSH
  20: LD_INT 1
  22: PPUSH
  23: LD_INT 372963
  25: NEG
  26: PPUSH
  27: CALL_OW 330
// end ; SetTechnologies ;
  31: CALL 627 0 0
// SetDiplomacy ;
  35: CALL 839 0 0
// PrepareGame ;
  39: CALL 921 0 0
// end ;
  43: END
// export debug , GameType , game , disableGlobalTimer ; export mc_amer , mc_leg , mc_rus_1 , mc_rus_2 ; export playerCommander , playerForces , allyCommander , Powell , Farmer , ruOutpost , ruEscape , staticMines , baseCaptured , legDestCounter , cratesSpawns , legOfferAccepted , legChangeSide , allyDestCounter , sibBombAllowed , reinforceAllowed , commander , cratesSpawn , outpostEscape , dialogueMineDetected ; end_of_file export function InitSettings ; begin
  44: LD_INT 0
  46: PPUSH
// debug := 0 ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// GameType := 1 ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_INT 1
  62: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) + 1 ;
  63: LD_ADDR_OWVAR 67
  67: PUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL_OW 426
  75: PUSH
  76: LD_INT 1
  78: PLUS
  79: ST_TO_ADDR
// if not Difficulty or debug then
  80: LD_OWVAR 67
  84: NOT
  85: PUSH
  86: LD_EXP 1
  90: OR
  91: IFFALSE 101
// Difficulty := 2 ;
  93: LD_ADDR_OWVAR 67
  97: PUSH
  98: LD_INT 2
 100: ST_TO_ADDR
// sibBombAllowed := GetMultiPlayerSetting ( 1 ) ;
 101: LD_ADDR_EXP 23
 105: PUSH
 106: LD_INT 1
 108: PPUSH
 109: CALL_OW 426
 113: ST_TO_ADDR
// reinforceAllowed := GetMultiPlayerSetting ( 2 ) ;
 114: LD_ADDR_EXP 24
 118: PUSH
 119: LD_INT 2
 121: PPUSH
 122: CALL_OW 426
 126: ST_TO_ADDR
// cratesSpawn := GetMultiPlayerSetting ( 3 ) ;
 127: LD_ADDR_EXP 26
 131: PUSH
 132: LD_INT 3
 134: PPUSH
 135: CALL_OW 426
 139: ST_TO_ADDR
// if not cratesSpawn then
 140: LD_EXP 26
 144: NOT
 145: IFFALSE 155
// cratesSpawn := 2 ;
 147: LD_ADDR_EXP 26
 151: PUSH
 152: LD_INT 2
 154: ST_TO_ADDR
// commander := GetMultiPlayerSetting ( 4 ) ;
 155: LD_ADDR_EXP 25
 159: PUSH
 160: LD_INT 4
 162: PPUSH
 163: CALL_OW 426
 167: ST_TO_ADDR
// if not commander then
 168: LD_EXP 25
 172: NOT
 173: IFFALSE 183
// commander := 3 ;
 175: LD_ADDR_EXP 25
 179: PUSH
 180: LD_INT 3
 182: ST_TO_ADDR
// if not debug then
 183: LD_EXP 1
 187: NOT
 188: IFFALSE 192
// exit ;
 190: GO 249
// display_strings := [ Difficulty:  & Difficulty , sibBomb:  & sibBombAllowed , reinforceAllowed:  & reinforceAllowed , cratesSpawn:  & cratesSpawn , commander:  & commander ] ;
 192: LD_ADDR_OWVAR 47
 196: PUSH
 197: LD_STRING Difficulty: 
 199: PUSH
 200: LD_OWVAR 67
 204: STR
 205: PUSH
 206: LD_STRING sibBomb: 
 208: PUSH
 209: LD_EXP 23
 213: STR
 214: PUSH
 215: LD_STRING reinforceAllowed: 
 217: PUSH
 218: LD_EXP 24
 222: STR
 223: PUSH
 224: LD_STRING cratesSpawn: 
 226: PUSH
 227: LD_EXP 26
 231: STR
 232: PUSH
 233: LD_STRING commander: 
 235: PUSH
 236: LD_EXP 25
 240: STR
 241: PUSH
 242: EMPTY
 243: LIST
 244: LIST
 245: LIST
 246: LIST
 247: LIST
 248: ST_TO_ADDR
// end ;
 249: LD_VAR 0 1
 253: RET
// every 0 0$1 trigger game and GameType = 1 and not disableGlobalTimer do
 254: LD_EXP 3
 258: PUSH
 259: LD_EXP 2
 263: PUSH
 264: LD_INT 1
 266: EQUAL
 267: AND
 268: PUSH
 269: LD_EXP 4
 273: NOT
 274: AND
 275: IFFALSE 298
 277: GO 279
 279: DISABLE
// begin enable ;
 280: ENABLE
// display_strings := [ #SkrTime , tick ] ;
 281: LD_ADDR_OWVAR 47
 285: PUSH
 286: LD_STRING #SkrTime
 288: PUSH
 289: LD_OWVAR 1
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: ST_TO_ADDR
// end ;
 298: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 299: LD_EXP 19
 303: PUSH
 304: LD_EXP 3
 308: AND
 309: PUSH
 310: LD_EXP 2
 314: PUSH
 315: LD_INT 1
 317: EQUAL
 318: AND
 319: IFFALSE 380
 321: GO 323
 323: DISABLE
// Crates ( cratesSpawns [ 1 ] [ 1 ] , cratesSpawns [ 1 ] [ 2 ] , cratesSpawns [ 1 ] [ 3 ] , cratesSpawns [ 1 ] [ 4 ] ) ;
 324: LD_EXP 19
 328: PUSH
 329: LD_INT 1
 331: ARRAY
 332: PUSH
 333: LD_INT 1
 335: ARRAY
 336: PPUSH
 337: LD_EXP 19
 341: PUSH
 342: LD_INT 1
 344: ARRAY
 345: PUSH
 346: LD_INT 2
 348: ARRAY
 349: PPUSH
 350: LD_EXP 19
 354: PUSH
 355: LD_INT 1
 357: ARRAY
 358: PUSH
 359: LD_INT 3
 361: ARRAY
 362: PPUSH
 363: LD_EXP 19
 367: PUSH
 368: LD_INT 1
 370: ARRAY
 371: PUSH
 372: LD_INT 4
 374: ARRAY
 375: PPUSH
 376: CALL 61620 0 4
 380: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 381: LD_EXP 19
 385: PUSH
 386: LD_EXP 3
 390: AND
 391: PUSH
 392: LD_EXP 2
 396: PUSH
 397: LD_INT 1
 399: EQUAL
 400: AND
 401: IFFALSE 462
 403: GO 405
 405: DISABLE
// Crates ( cratesSpawns [ 2 ] [ 1 ] , cratesSpawns [ 2 ] [ 2 ] , cratesSpawns [ 2 ] [ 3 ] , cratesSpawns [ 2 ] [ 4 ] ) ;
 406: LD_EXP 19
 410: PUSH
 411: LD_INT 2
 413: ARRAY
 414: PUSH
 415: LD_INT 1
 417: ARRAY
 418: PPUSH
 419: LD_EXP 19
 423: PUSH
 424: LD_INT 2
 426: ARRAY
 427: PUSH
 428: LD_INT 2
 430: ARRAY
 431: PPUSH
 432: LD_EXP 19
 436: PUSH
 437: LD_INT 2
 439: ARRAY
 440: PUSH
 441: LD_INT 3
 443: ARRAY
 444: PPUSH
 445: LD_EXP 19
 449: PUSH
 450: LD_INT 2
 452: ARRAY
 453: PUSH
 454: LD_INT 4
 456: ARRAY
 457: PPUSH
 458: CALL 61620 0 4
 462: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 463: LD_EXP 19
 467: PUSH
 468: LD_EXP 3
 472: AND
 473: PUSH
 474: LD_EXP 2
 478: PUSH
 479: LD_INT 1
 481: EQUAL
 482: AND
 483: IFFALSE 544
 485: GO 487
 487: DISABLE
// Crates ( cratesSpawns [ 3 ] [ 1 ] , cratesSpawns [ 3 ] [ 2 ] , cratesSpawns [ 3 ] [ 3 ] , cratesSpawns [ 3 ] [ 4 ] ) ;
 488: LD_EXP 19
 492: PUSH
 493: LD_INT 3
 495: ARRAY
 496: PUSH
 497: LD_INT 1
 499: ARRAY
 500: PPUSH
 501: LD_EXP 19
 505: PUSH
 506: LD_INT 3
 508: ARRAY
 509: PUSH
 510: LD_INT 2
 512: ARRAY
 513: PPUSH
 514: LD_EXP 19
 518: PUSH
 519: LD_INT 3
 521: ARRAY
 522: PUSH
 523: LD_INT 3
 525: ARRAY
 526: PPUSH
 527: LD_EXP 19
 531: PUSH
 532: LD_INT 3
 534: ARRAY
 535: PUSH
 536: LD_INT 4
 538: ARRAY
 539: PPUSH
 540: CALL 61620 0 4
 544: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 545: LD_EXP 19
 549: PUSH
 550: LD_EXP 3
 554: AND
 555: PUSH
 556: LD_EXP 2
 560: PUSH
 561: LD_INT 1
 563: EQUAL
 564: AND
 565: IFFALSE 626
 567: GO 569
 569: DISABLE
// Crates ( cratesSpawns [ 4 ] [ 1 ] , cratesSpawns [ 4 ] [ 2 ] , cratesSpawns [ 4 ] [ 3 ] , cratesSpawns [ 4 ] [ 4 ] ) ;
 570: LD_EXP 19
 574: PUSH
 575: LD_INT 4
 577: ARRAY
 578: PUSH
 579: LD_INT 1
 581: ARRAY
 582: PPUSH
 583: LD_EXP 19
 587: PUSH
 588: LD_INT 4
 590: ARRAY
 591: PUSH
 592: LD_INT 2
 594: ARRAY
 595: PPUSH
 596: LD_EXP 19
 600: PUSH
 601: LD_INT 4
 603: ARRAY
 604: PUSH
 605: LD_INT 3
 607: ARRAY
 608: PPUSH
 609: LD_EXP 19
 613: PUSH
 614: LD_INT 4
 616: ARRAY
 617: PUSH
 618: LD_INT 4
 620: ARRAY
 621: PPUSH
 622: CALL 61620 0 4
 626: END
// export function SetTechnologies ; var i , j , ban_techs , res_techs ; begin
 627: LD_INT 0
 629: PPUSH
 630: PPUSH
 631: PPUSH
 632: PPUSH
 633: PPUSH
// if GameType = 1 then
 634: LD_EXP 2
 638: PUSH
 639: LD_INT 1
 641: EQUAL
 642: IFFALSE 711
// begin ban_techs := [ ] ;
 644: LD_ADDR_VAR 0 4
 648: PUSH
 649: EMPTY
 650: ST_TO_ADDR
// if sibBombAllowed < 2 then
 651: LD_EXP 23
 655: PUSH
 656: LD_INT 2
 658: LESS
 659: IFFALSE 672
// ban_techs := [ tech_sibFiss ] ;
 661: LD_ADDR_VAR 0 4
 665: PUSH
 666: LD_INT 25
 668: PUSH
 669: EMPTY
 670: LIST
 671: ST_TO_ADDR
// res_techs := [ tech_oilPow , tech_oilEng , tech_tech1 , tech_tech2 , tech_tech3 , tech_gun , tech_gatling , tech_rocket ] ;
 672: LD_ADDR_VAR 0 5
 676: PUSH
 677: LD_INT 46
 679: PUSH
 680: LD_INT 47
 682: PUSH
 683: LD_INT 48
 685: PUSH
 686: LD_INT 49
 688: PUSH
 689: LD_INT 50
 691: PUSH
 692: LD_INT 39
 694: PUSH
 695: LD_INT 69
 697: PUSH
 698: LD_INT 40
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: LIST
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: ST_TO_ADDR
// end ; for i = 1 to 8 do
 711: LD_ADDR_VAR 0 2
 715: PUSH
 716: DOUBLE
 717: LD_INT 1
 719: DEC
 720: ST_TO_ADDR
 721: LD_INT 8
 723: PUSH
 724: FOR_TO
 725: IFFALSE 809
// begin if res_techs then
 727: LD_VAR 0 5
 731: IFFALSE 767
// for j in res_techs do
 733: LD_ADDR_VAR 0 3
 737: PUSH
 738: LD_VAR 0 5
 742: PUSH
 743: FOR_IN
 744: IFFALSE 765
// SetTech ( j , i , state_researched ) ;
 746: LD_VAR 0 3
 750: PPUSH
 751: LD_VAR 0 2
 755: PPUSH
 756: LD_INT 2
 758: PPUSH
 759: CALL_OW 322
 763: GO 743
 765: POP
 766: POP
// if ban_techs then
 767: LD_VAR 0 4
 771: IFFALSE 807
// for j in ban_techs do
 773: LD_ADDR_VAR 0 3
 777: PUSH
 778: LD_VAR 0 4
 782: PUSH
 783: FOR_IN
 784: IFFALSE 805
// SetTech ( j , i , state_disabled ) ;
 786: LD_VAR 0 3
 790: PPUSH
 791: LD_VAR 0 2
 795: PPUSH
 796: LD_INT 0
 798: PPUSH
 799: CALL_OW 322
 803: GO 783
 805: POP
 806: POP
// end ;
 807: GO 724
 809: POP
 810: POP
// if sibBombAllowed = 1 then
 811: LD_EXP 23
 815: PUSH
 816: LD_INT 1
 818: EQUAL
 819: IFFALSE 834
// SetTech ( tech_sibFiss , 3 , state_enabled ) ;
 821: LD_INT 25
 823: PPUSH
 824: LD_INT 3
 826: PPUSH
 827: LD_INT 1
 829: PPUSH
 830: CALL_OW 322
// end ;
 834: LD_VAR 0 1
 838: RET
// export function SetDiplomacy ; begin
 839: LD_INT 0
 841: PPUSH
// if GameType = 1 then
 842: LD_EXP 2
 846: PUSH
 847: LD_INT 1
 849: EQUAL
 850: IFFALSE 916
// begin SetAttitude ( 1 , 4 , att_friend , true ) ;
 852: LD_INT 1
 854: PPUSH
 855: LD_INT 4
 857: PPUSH
 858: LD_INT 1
 860: PPUSH
 861: LD_INT 1
 863: PPUSH
 864: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 868: LD_INT 3
 870: PPUSH
 871: LD_INT 6
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: LD_INT 1
 879: PPUSH
 880: CALL_OW 80
// SetAttitude ( 3 , 8 , att_friend , true ) ;
 884: LD_INT 3
 886: PPUSH
 887: LD_INT 8
 889: PPUSH
 890: LD_INT 1
 892: PPUSH
 893: LD_INT 1
 895: PPUSH
 896: CALL_OW 80
// SetAttitude ( 6 , 8 , att_friend , true ) ;
 900: LD_INT 6
 902: PPUSH
 903: LD_INT 8
 905: PPUSH
 906: LD_INT 1
 908: PPUSH
 909: LD_INT 1
 911: PPUSH
 912: CALL_OW 80
// end ; end ;
 916: LD_VAR 0 1
 920: RET
// export function PrepareGame ; var i , tmp , sources ; begin
 921: LD_INT 0
 923: PPUSH
 924: PPUSH
 925: PPUSH
 926: PPUSH
// if GameType = 1 then
 927: LD_EXP 2
 931: PUSH
 932: LD_INT 1
 934: EQUAL
 935: IFFALSE 1412
// begin game := false ;
 937: LD_ADDR_EXP 3
 941: PUSH
 942: LD_INT 0
 944: ST_TO_ADDR
// your_side := 1 ;
 945: LD_ADDR_OWVAR 2
 949: PUSH
 950: LD_INT 1
 952: ST_TO_ADDR
// mc_amer := 1 ;
 953: LD_ADDR_EXP 5
 957: PUSH
 958: LD_INT 1
 960: ST_TO_ADDR
// mc_leg := 2 ;
 961: LD_ADDR_EXP 6
 965: PUSH
 966: LD_INT 2
 968: ST_TO_ADDR
// mc_rus_1 := 3 ;
 969: LD_ADDR_EXP 7
 973: PUSH
 974: LD_INT 3
 976: ST_TO_ADDR
// mc_rus_2 := 4 ;
 977: LD_ADDR_EXP 8
 981: PUSH
 982: LD_INT 4
 984: ST_TO_ADDR
// cratesSpawns := [ [ amerCrates , 1 , 0 , [ 200 , 250 , 300 ] [ cratesSpawn ] ] , [ rusCrates , 8 , 50 , 500 ] , [ legCrates , 5 , 50 , 300 ] , [ playerCrates , [ 4 , 5 , 6 ] [ cratesSpawn ] , 30 , [ 300 , 450 , 500 ] [ cratesSpawn ] ] ] ;
 985: LD_ADDR_EXP 19
 989: PUSH
 990: LD_INT 5
 992: PUSH
 993: LD_INT 1
 995: PUSH
 996: LD_INT 0
 998: PUSH
 999: LD_INT 200
1001: PUSH
1002: LD_INT 250
1004: PUSH
1005: LD_INT 300
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: LIST
1012: PUSH
1013: LD_EXP 26
1017: ARRAY
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: PUSH
1025: LD_INT 13
1027: PUSH
1028: LD_INT 8
1030: PUSH
1031: LD_INT 50
1033: PUSH
1034: LD_INT 500
1036: PUSH
1037: EMPTY
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: PUSH
1043: LD_INT 17
1045: PUSH
1046: LD_INT 5
1048: PUSH
1049: LD_INT 50
1051: PUSH
1052: LD_INT 300
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: PUSH
1061: LD_INT 18
1063: PUSH
1064: LD_INT 4
1066: PUSH
1067: LD_INT 5
1069: PUSH
1070: LD_INT 6
1072: PUSH
1073: EMPTY
1074: LIST
1075: LIST
1076: LIST
1077: PUSH
1078: LD_EXP 26
1082: ARRAY
1083: PUSH
1084: LD_INT 30
1086: PUSH
1087: LD_INT 300
1089: PUSH
1090: LD_INT 450
1092: PUSH
1093: LD_INT 500
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: LIST
1100: PUSH
1101: LD_EXP 26
1105: ARRAY
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: LIST
1117: LIST
1118: ST_TO_ADDR
// sources := [ [ 190 , 193 , mat_siberit ] , [ 182 , 117 , mat_siberit ] , [ 114 , 152 , mat_oil ] , [ 85 , 38 , mat_oil ] ] ;
1119: LD_ADDR_VAR 0 4
1123: PUSH
1124: LD_INT 190
1126: PUSH
1127: LD_INT 193
1129: PUSH
1130: LD_INT 3
1132: PUSH
1133: EMPTY
1134: LIST
1135: LIST
1136: LIST
1137: PUSH
1138: LD_INT 182
1140: PUSH
1141: LD_INT 117
1143: PUSH
1144: LD_INT 3
1146: PUSH
1147: EMPTY
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 114
1154: PUSH
1155: LD_INT 152
1157: PUSH
1158: LD_INT 2
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: LIST
1165: PUSH
1166: LD_INT 85
1168: PUSH
1169: LD_INT 38
1171: PUSH
1172: LD_INT 2
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: LIST
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: ST_TO_ADDR
// for i in sources do
1186: LD_ADDR_VAR 0 2
1190: PUSH
1191: LD_VAR 0 4
1195: PUSH
1196: FOR_IN
1197: IFFALSE 1232
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
1199: LD_VAR 0 2
1203: PUSH
1204: LD_INT 1
1206: ARRAY
1207: PPUSH
1208: LD_VAR 0 2
1212: PUSH
1213: LD_INT 2
1215: ARRAY
1216: PPUSH
1217: LD_VAR 0 2
1221: PUSH
1222: LD_INT 3
1224: ARRAY
1225: PPUSH
1226: CALL_OW 62
1230: GO 1196
1232: POP
1233: POP
// disableGlobalTimer := false ;
1234: LD_ADDR_EXP 4
1238: PUSH
1239: LD_INT 0
1241: ST_TO_ADDR
// ruEscape := [ 0 , [ 5 , 6 , 7 ] [ Difficulty ] ] ;
1242: LD_ADDR_EXP 15
1246: PUSH
1247: LD_INT 0
1249: PUSH
1250: LD_INT 5
1252: PUSH
1253: LD_INT 6
1255: PUSH
1256: LD_INT 7
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: LIST
1263: PUSH
1264: LD_OWVAR 67
1268: ARRAY
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: ST_TO_ADDR
// ruOutpost := [ ] ;
1274: LD_ADDR_EXP 14
1278: PUSH
1279: EMPTY
1280: ST_TO_ADDR
// staticMines := [ ] ;
1281: LD_ADDR_EXP 16
1285: PUSH
1286: EMPTY
1287: ST_TO_ADDR
// baseCaptured := false ;
1288: LD_ADDR_EXP 17
1292: PUSH
1293: LD_INT 0
1295: ST_TO_ADDR
// legDestCounter := 0 ;
1296: LD_ADDR_EXP 18
1300: PUSH
1301: LD_INT 0
1303: ST_TO_ADDR
// legOfferAccepted := false ;
1304: LD_ADDR_EXP 20
1308: PUSH
1309: LD_INT 0
1311: ST_TO_ADDR
// legChangeSide := false ;
1312: LD_ADDR_EXP 21
1316: PUSH
1317: LD_INT 0
1319: ST_TO_ADDR
// allyDestCounter := 0 ;
1320: LD_ADDR_EXP 22
1324: PUSH
1325: LD_INT 0
1327: ST_TO_ADDR
// outpostEscape := false ;
1328: LD_ADDR_EXP 27
1332: PUSH
1333: LD_INT 0
1335: ST_TO_ADDR
// dialogueMineDetected := false ;
1336: LD_ADDR_EXP 28
1340: PUSH
1341: LD_INT 0
1343: ST_TO_ADDR
// PrepareAmericans ;
1344: CALL 6998 0 0
// PrepareLegion ;
1348: CALL 5416 0 0
// PrepareRussians ;
1352: CALL 2440 0 0
// playerForces := PreparePlayer ;
1356: LD_ADDR_EXP 10
1360: PUSH
1361: CALL 8271 0 0
1365: ST_TO_ADDR
// AnimateTrees ( true ) ;
1366: LD_INT 1
1368: PPUSH
1369: CALL_OW 573
// PrepareNature ( 4 , 3 , 8 , 5 , 3 , 1 , 8 , natureGroundArea , natureWaterArea ) ;
1373: LD_INT 4
1375: PPUSH
1376: LD_INT 3
1378: PPUSH
1379: LD_INT 8
1381: PPUSH
1382: LD_INT 5
1384: PPUSH
1385: LD_INT 3
1387: PPUSH
1388: LD_INT 1
1390: PPUSH
1391: LD_INT 8
1393: PPUSH
1394: LD_INT 2
1396: PPUSH
1397: LD_INT 1
1399: PPUSH
1400: CALL 54368 0 9
// MC_Start ;
1404: CALL 64672 0 0
// Action ;
1408: CALL 10370 0 0
// end ; end ;
1412: LD_VAR 0 1
1416: RET
// export function CustomInitMacro ; begin
1417: LD_INT 0
1419: PPUSH
// if GameType <> 1 then
1420: LD_EXP 2
1424: PUSH
1425: LD_INT 1
1427: NONEQUAL
1428: IFFALSE 1432
// exit ;
1430: GO 2435
// MC_SetScanArea ( mc_amer , amerBase ) ;
1432: LD_EXP 5
1436: PPUSH
1437: LD_INT 3
1439: PPUSH
1440: CALL 87049 0 2
// MC_SetParkingArea ( mc_amer , amerParking ) ;
1444: LD_EXP 5
1448: PPUSH
1449: LD_INT 4
1451: PPUSH
1452: CALL 86993 0 2
// MC_SetAllowedTurretWeapons ( mc_amer , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1456: LD_EXP 5
1460: PPUSH
1461: LD_INT 11
1463: PUSH
1464: LD_INT 6
1466: PUSH
1467: LD_INT 7
1469: PUSH
1470: LD_INT 9
1472: PUSH
1473: LD_INT 10
1475: PUSH
1476: EMPTY
1477: LIST
1478: LIST
1479: LIST
1480: LIST
1481: LIST
1482: PPUSH
1483: CALL 86881 0 2
// MC_SetCratesArea ( mc_amer , amerCrates ) ;
1487: LD_EXP 5
1491: PPUSH
1492: LD_INT 5
1494: PPUSH
1495: CALL 86563 0 2
// MC_SetTame ( mc_amer , amerBase ) ;
1499: LD_EXP 5
1503: PPUSH
1504: LD_INT 3
1506: PPUSH
1507: CALL 86294 0 2
// MC_SetDefenderLimit ( mc_amer , 3 ) ;
1511: LD_EXP 5
1515: PPUSH
1516: LD_INT 3
1518: PPUSH
1519: CALL 85976 0 2
// MC_SetProduceList ( mc_amer , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] ] ) ;
1523: LD_EXP 5
1527: PPUSH
1528: LD_INT 3
1530: PUSH
1531: LD_INT 1
1533: PUSH
1534: LD_INT 2
1536: PUSH
1537: LD_INT 5
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: PUSH
1546: LD_INT 4
1548: PUSH
1549: LD_INT 1
1551: PUSH
1552: LD_INT 2
1554: PUSH
1555: LD_INT 6
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: PUSH
1564: LD_INT 4
1566: PUSH
1567: LD_INT 1
1569: PUSH
1570: LD_INT 2
1572: PUSH
1573: LD_INT 7
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: PUSH
1582: LD_INT 4
1584: PUSH
1585: LD_INT 1
1587: PUSH
1588: LD_INT 2
1590: PUSH
1591: LD_INT 6
1593: PUSH
1594: EMPTY
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: PUSH
1600: LD_INT 2
1602: PUSH
1603: LD_INT 1
1605: PUSH
1606: LD_INT 2
1608: PUSH
1609: LD_INT 12
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: LIST
1622: LIST
1623: LIST
1624: PPUSH
1625: CALL 85791 0 2
// MC_SetBuildingList ( mc_amer , [ [ b_turret , 114 , 16 , 0 ] , [ b_bunker , 110 , 12 , 0 ] ] ) ;
1629: LD_EXP 5
1633: PPUSH
1634: LD_INT 33
1636: PUSH
1637: LD_INT 114
1639: PUSH
1640: LD_INT 16
1642: PUSH
1643: LD_INT 0
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: PUSH
1652: LD_INT 32
1654: PUSH
1655: LD_INT 110
1657: PUSH
1658: LD_INT 12
1660: PUSH
1661: LD_INT 0
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: PPUSH
1674: CALL 85683 0 2
// MC_SetLabKind ( mc_amer , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1678: LD_EXP 5
1682: PPUSH
1683: LD_INT 10
1685: PUSH
1686: LD_INT 15
1688: PUSH
1689: LD_INT 12
1691: PUSH
1692: LD_INT 11
1694: PUSH
1695: EMPTY
1696: LIST
1697: LIST
1698: LIST
1699: LIST
1700: PPUSH
1701: CALL 86470 0 2
// MC_SetScanArea ( mc_leg , legBase ) ;
1705: LD_EXP 6
1709: PPUSH
1710: LD_INT 6
1712: PPUSH
1713: CALL 87049 0 2
// MC_SetParkingArea ( mc_leg , legParking ) ;
1717: LD_EXP 6
1721: PPUSH
1722: LD_INT 7
1724: PPUSH
1725: CALL 86993 0 2
// MC_SetAllowedTurretWeapons ( mc_leg , [ ar_radar , ar_gun , ar_rocket_launcher , ar_gatling_gun ] ) ;
1729: LD_EXP 6
1733: PPUSH
1734: LD_INT 30
1736: PUSH
1737: LD_INT 27
1739: PUSH
1740: LD_INT 28
1742: PUSH
1743: LD_INT 25
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: LIST
1750: LIST
1751: PPUSH
1752: CALL 86881 0 2
// MC_SetCratesArea ( mc_leg , legCrates ) ;
1756: LD_EXP 6
1760: PPUSH
1761: LD_INT 17
1763: PPUSH
1764: CALL 86563 0 2
// MC_SetTame ( mc_leg , legBase ) ;
1768: LD_EXP 6
1772: PPUSH
1773: LD_INT 6
1775: PPUSH
1776: CALL 86294 0 2
// MC_SetDefenderLimit ( mc_leg , 5 ) ;
1780: LD_EXP 6
1784: PPUSH
1785: LD_INT 5
1787: PPUSH
1788: CALL 85976 0 2
// MC_SetMinesField ( mc_leg , 10 , legMines ) ;
1792: LD_EXP 6
1796: PPUSH
1797: LD_INT 10
1799: PPUSH
1800: LD_INT 9
1802: PPUSH
1803: CALL 85473 0 3
// MC_SetBuildingList ( mc_leg , [ [ b_armoury , 155 , 133 , 0 ] ] ) ;
1807: LD_EXP 6
1811: PPUSH
1812: LD_INT 4
1814: PUSH
1815: LD_INT 155
1817: PUSH
1818: LD_INT 133
1820: PUSH
1821: LD_INT 0
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: PUSH
1830: EMPTY
1831: LIST
1832: PPUSH
1833: CALL 85683 0 2
// MC_SetProduceList ( mc_leg , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ) ;
1837: LD_EXP 6
1841: PPUSH
1842: LD_INT 13
1844: PUSH
1845: LD_INT 2
1847: PUSH
1848: LD_INT 1
1850: PUSH
1851: LD_INT 31
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: LIST
1858: LIST
1859: PUSH
1860: LD_INT 13
1862: PUSH
1863: LD_INT 2
1865: PUSH
1866: LD_INT 1
1868: PUSH
1869: LD_INT 31
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: PUSH
1878: LD_INT 13
1880: PUSH
1881: LD_INT 1
1883: PUSH
1884: LD_INT 1
1886: PUSH
1887: LD_INT 27
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: PUSH
1896: LD_INT 13
1898: PUSH
1899: LD_INT 1
1901: PUSH
1902: LD_INT 2
1904: PUSH
1905: LD_INT 27
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 13
1916: PUSH
1917: LD_INT 1
1919: PUSH
1920: LD_INT 2
1922: PUSH
1923: LD_INT 27
1925: PUSH
1926: EMPTY
1927: LIST
1928: LIST
1929: LIST
1930: LIST
1931: PUSH
1932: LD_INT 13
1934: PUSH
1935: LD_INT 1
1937: PUSH
1938: LD_INT 2
1940: PUSH
1941: LD_INT 28
1943: PUSH
1944: EMPTY
1945: LIST
1946: LIST
1947: LIST
1948: LIST
1949: PUSH
1950: LD_INT 13
1952: PUSH
1953: LD_INT 1
1955: PUSH
1956: LD_INT 2
1958: PUSH
1959: LD_INT 28
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: PUSH
1968: LD_INT 13
1970: PUSH
1971: LD_INT 1
1973: PUSH
1974: LD_INT 2
1976: PUSH
1977: LD_INT 32
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: PPUSH
1996: CALL 85791 0 2
// MC_SetScanArea ( mc_rus_1 , rus1Base ) ;
2000: LD_EXP 7
2004: PPUSH
2005: LD_INT 11
2007: PPUSH
2008: CALL 87049 0 2
// MC_SetParkingArea ( mc_rus_1 , rus1Parking ) ;
2012: LD_EXP 7
2016: PPUSH
2017: LD_INT 12
2019: PPUSH
2020: CALL 86993 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_1 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2024: LD_EXP 7
2028: PPUSH
2029: LD_INT 43
2031: PUSH
2032: LD_INT 47
2034: PUSH
2035: LD_INT 45
2037: PUSH
2038: LD_INT 49
2040: PUSH
2041: LD_INT 46
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: PPUSH
2051: CALL 86881 0 2
// MC_SetCratesArea ( mc_rus_1 , rusCrates ) ;
2055: LD_EXP 7
2059: PPUSH
2060: LD_INT 13
2062: PPUSH
2063: CALL 86563 0 2
// MC_SetTame ( mc_rus_1 , rus1Base ) ;
2067: LD_EXP 7
2071: PPUSH
2072: LD_INT 11
2074: PPUSH
2075: CALL 86294 0 2
// MC_SetDefenderLimit ( mc_rus_1 , 5 ) ;
2079: LD_EXP 7
2083: PPUSH
2084: LD_INT 5
2086: PPUSH
2087: CALL 85976 0 2
// MC_SetProduceList ( mc_rus_1 , [ [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay ] ] ) ;
2091: LD_EXP 7
2095: PPUSH
2096: LD_INT 24
2098: PUSH
2099: LD_INT 1
2101: PUSH
2102: LD_INT 3
2104: PUSH
2105: LD_INT 46
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: PUSH
2114: LD_INT 24
2116: PUSH
2117: LD_INT 1
2119: PUSH
2120: LD_INT 3
2122: PUSH
2123: LD_INT 46
2125: PUSH
2126: EMPTY
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: PUSH
2132: LD_INT 24
2134: PUSH
2135: LD_INT 1
2137: PUSH
2138: LD_INT 3
2140: PUSH
2141: LD_INT 46
2143: PUSH
2144: EMPTY
2145: LIST
2146: LIST
2147: LIST
2148: LIST
2149: PUSH
2150: LD_INT 24
2152: PUSH
2153: LD_INT 1
2155: PUSH
2156: LD_INT 3
2158: PUSH
2159: LD_INT 46
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: LIST
2167: PUSH
2168: LD_INT 24
2170: PUSH
2171: LD_INT 1
2173: PUSH
2174: LD_INT 3
2176: PUSH
2177: LD_INT 46
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: PUSH
2186: LD_INT 22
2188: PUSH
2189: LD_INT 1
2191: PUSH
2192: LD_INT 3
2194: PUSH
2195: LD_INT 51
2197: PUSH
2198: EMPTY
2199: LIST
2200: LIST
2201: LIST
2202: LIST
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: LIST
2208: LIST
2209: LIST
2210: LIST
2211: PPUSH
2212: CALL 85791 0 2
// MC_SetTeleportExit ( mc_rus_1 , [ [ 115 , 201 ] ] ) ;
2216: LD_EXP 7
2220: PPUSH
2221: LD_INT 115
2223: PUSH
2224: LD_INT 201
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: PUSH
2231: EMPTY
2232: LIST
2233: PPUSH
2234: CALL 86619 0 2
// MC_SetScanArea ( mc_rus_2 , rus2Base ) ;
2238: LD_EXP 8
2242: PPUSH
2243: LD_INT 15
2245: PPUSH
2246: CALL 87049 0 2
// MC_SetParkingArea ( mc_rus_2 , rus2Parking ) ;
2250: LD_EXP 8
2254: PPUSH
2255: LD_INT 16
2257: PPUSH
2258: CALL 86993 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_2 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2262: LD_EXP 8
2266: PPUSH
2267: LD_INT 43
2269: PUSH
2270: LD_INT 47
2272: PUSH
2273: LD_INT 45
2275: PUSH
2276: LD_INT 49
2278: PUSH
2279: LD_INT 46
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: PPUSH
2289: CALL 86881 0 2
// MC_SetCratesArea ( mc_rus_2 , rusCrates ) ;
2293: LD_EXP 8
2297: PPUSH
2298: LD_INT 13
2300: PPUSH
2301: CALL 86563 0 2
// MC_SetTame ( mc_rus_2 , rus2Base ) ;
2305: LD_EXP 8
2309: PPUSH
2310: LD_INT 15
2312: PPUSH
2313: CALL 86294 0 2
// MC_SetDefenderLimit ( mc_rus_2 , 4 ) ;
2317: LD_EXP 8
2321: PPUSH
2322: LD_INT 4
2324: PPUSH
2325: CALL 85976 0 2
// MC_SetProduceList ( mc_rus_2 , [ [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_rocket ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] ] ) ;
2329: LD_EXP 8
2333: PPUSH
2334: LD_INT 23
2336: PUSH
2337: LD_INT 1
2339: PUSH
2340: LD_INT 3
2342: PUSH
2343: LD_INT 46
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: LIST
2350: LIST
2351: PUSH
2352: LD_INT 23
2354: PUSH
2355: LD_INT 1
2357: PUSH
2358: LD_INT 1
2360: PUSH
2361: LD_INT 46
2363: PUSH
2364: EMPTY
2365: LIST
2366: LIST
2367: LIST
2368: LIST
2369: PUSH
2370: LD_INT 23
2372: PUSH
2373: LD_INT 1
2375: PUSH
2376: LD_INT 3
2378: PUSH
2379: LD_INT 45
2381: PUSH
2382: EMPTY
2383: LIST
2384: LIST
2385: LIST
2386: LIST
2387: PUSH
2388: LD_INT 23
2390: PUSH
2391: LD_INT 1
2393: PUSH
2394: LD_INT 1
2396: PUSH
2397: LD_INT 47
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: LIST
2404: LIST
2405: PUSH
2406: LD_INT 21
2408: PUSH
2409: LD_INT 1
2411: PUSH
2412: LD_INT 3
2414: PUSH
2415: LD_INT 51
2417: PUSH
2418: EMPTY
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: PUSH
2424: EMPTY
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: PPUSH
2431: CALL 85791 0 2
// end ;
2435: LD_VAR 0 1
2439: RET
// export function PrepareRussians ; var i , b , tmp , side , sr , depot , base ; begin
2440: LD_INT 0
2442: PPUSH
2443: PPUSH
2444: PPUSH
2445: PPUSH
2446: PPUSH
2447: PPUSH
2448: PPUSH
2449: PPUSH
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , rusApe , 0 ) ;
2450: LD_INT 0
2452: PPUSH
2453: LD_INT 0
2455: PPUSH
2456: LD_INT 3
2458: PPUSH
2459: LD_INT 0
2461: PPUSH
2462: LD_INT 0
2464: PPUSH
2465: LD_INT 0
2467: PPUSH
2468: LD_INT 0
2470: PPUSH
2471: LD_INT 14
2473: PPUSH
2474: LD_INT 0
2476: PPUSH
2477: CALL 54368 0 9
// side := 3 ;
2481: LD_ADDR_VAR 0 5
2485: PUSH
2486: LD_INT 3
2488: ST_TO_ADDR
// SetTech ( tech_targTeleport , side , state_researched ) ;
2489: LD_INT 38
2491: PPUSH
2492: LD_VAR 0 5
2496: PPUSH
2497: LD_INT 2
2499: PPUSH
2500: CALL_OW 322
// SetTech ( tech_gun , side , state_researched ) ;
2504: LD_INT 39
2506: PPUSH
2507: LD_VAR 0 5
2511: PPUSH
2512: LD_INT 2
2514: PPUSH
2515: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
2519: LD_INT 34
2521: PPUSH
2522: LD_VAR 0 5
2526: PPUSH
2527: LD_INT 2
2529: PPUSH
2530: CALL_OW 322
// tmp := [ [ 0 , 208 , 163 , 4 , 0 , 0 ] , [ 3 , 194 , 161 , 1 , 0 , 0 ] , [ 17 , 190 , 161 , 1 , 0 , 0 ] , [ 5 , 200 , 145 , 3 , 0 , 0 ] , [ 32 , 192 , 144 , 3 , 0 , 0 ] , [ 26 , 216 , 172 , 3 , 0 , 0 ] , [ 26 , 218 , 176 , 3 , 0 , 0 ] , [ 29 , 182 , 149 , 3 , 0 , 0 ] , [ 8 , 201 , 171 , 0 , 10 , 11 ] , [ 32 , 188 , 167 , 0 , 0 , 0 ] , [ 32 , 202 , 179 , 0 , 0 , 0 ] , [ 32 , 209 , 182 , 0 , 0 , 0 ] , [ 32 , 220 , 183 , 5 , 0 , 0 ] , [ 32 , 225 , 181 , 5 , 0 , 0 ] , [ 26 , 220 , 174 , 5 , 0 , 0 ] , [ 1 , 84 , 128 , 4 , 0 , 0 ] , [ 3 , 68 , 121 , 1 , 0 , 0 ] , [ 19 , 72 , 125 , 5 , 0 , 0 ] , [ 18 , 68 , 124 , 0 , 0 , 0 ] , [ 24 , 64 , 121 , 1 , 0 , 0 ] , [ 17 , 65 , 118 , 2 , 0 , 0 ] , [ 21 , 68 , 117 , 3 , 0 , 0 ] , [ 8 , 68 , 130 , 1 , 14 , 10 ] , [ 8 , 67 , 110 , 2 , 11 , 12 ] , [ 28 , 71 , 136 , 2 , 0 , 0 ] , [ 28 , 73 , 141 , 2 , 0 , 0 ] , [ 30 , 75 , 145 , 2 , 0 , 0 ] , [ 5 , 111 , 138 , 4 , 0 , 0 ] , [ 33 , 104 , 130 , 3 , 0 , 0 ] , [ 33 , 110 , 142 , 5 , 0 , 0 ] , [ 33 , 91 , 131 , 5 , 0 , 0 ] , [ 33 , 107 , 157 , 5 , 0 , 0 ] , [ 33 , 104 , 160 , 5 , 0 , 0 ] , [ 33 , 101 , 162 , 5 , 0 , 0 ] , [ 32 , 87 , 157 , 5 , 0 , 0 ] , [ 32 , 82 , 158 , 5 , 0 , 0 ] , [ 33 , 91 , 118 , 4 , 0 , 0 ] , [ 33 , 89 , 107 , 4 , 0 , 0 ] , [ 5 , 86 , 96 , 3 , 0 , 0 ] , [ 33 , 91 , 102 , 4 , 0 , 0 ] , [ 32 , 80 , 95 , 3 , 0 , 0 ] , [ 28 , 77 , 105 , 3 , 0 , 0 ] , [ 28 , 85 , 113 , 3 , 0 , 0 ] , [ 28 , 55 , 97 , 3 , 0 , 0 ] , [ 28 , 88 , 128 , 3 , 0 , 0 ] , [ 32 , 69 , 101 , 2 , 0 , 0 ] , [ 1 , 34 , 23 , 4 , 0 , 0 ] , [ 8 , 25 , 4 , 3 , 11 , 10 ] , [ 8 , 15 , 4 , 2 , 14 , 12 ] , [ 29 , 55 , 35 , 2 , 0 , 0 ] , [ 29 , 24 , 44 , 2 , 0 , 0 ] , [ 34 , 34 , 32 , 4 , 0 , 0 ] , [ 3 , 14 , 16 , 1 , 0 , 0 ] , [ 24 , 10 , 16 , 1 , 0 , 0 ] , [ 19 , 11 , 13 , 2 , 0 , 0 ] , [ 18 , 14 , 12 , 3 , 0 , 0 ] , [ 16 , 14 , 19 , 0 , 0 , 0 ] , [ 17 , 18 , 20 , 5 , 0 , 0 ] , [ 28 , 10 , 5 , 1 , 0 , 0 ] , [ 28 , 8 , 8 , 1 , 0 , 0 ] , [ 26 , 19 , 2 , 1 , 0 , 0 ] , [ 26 , 30 , 2 , 1 , 0 , 0 ] , [ 5 , 53 , 20 , 4 , 0 , 0 ] , [ 32 , 55 , 24 , 4 , 0 , 0 ] , [ 32 , 61 , 45 , 5 , 0 , 0 ] , [ 32 , 52 , 51 , 5 , 0 , 0 ] , [ 33 , 56 , 51 , 5 , 0 , 0 ] , [ 33 , 62 , 49 , 5 , 0 , 0 ] , [ 33 , 41 , 47 , 5 , 0 , 0 ] , [ 33 , 33 , 52 , 5 , 0 , 0 ] , [ 5 , 31 , 40 , 0 , 0 , 0 ] , [ 33 , 65 , 37 , 5 , 0 , 0 ] , [ 33 , 63 , 29 , 4 , 0 , 0 ] , [ 33 , 54 , 11 , 4 , 0 , 0 ] , [ 33 , 51 , 6 , 4 , 0 , 0 ] , [ 26 , 39 , 25 , 0 , 0 , 0 ] , [ 26 , 37 , 21 , 0 , 0 , 0 ] , [ 32 , 35 , 17 , 4 , 0 , 0 ] , [ 33 , 35 , 28 , 4 , 0 , 0 ] , [ 33 , 28 , 46 , 5 , 0 , 0 ] , [ 33 , 31 , 6 , 4 , 0 , 0 ] , [ 26 , 54 , 38 , 4 , 0 , 0 ] , [ 33 , 207 , 167 , 3 , 0 , 0 ] ] ;
2534: LD_ADDR_VAR 0 4
2538: PUSH
2539: LD_INT 0
2541: PUSH
2542: LD_INT 208
2544: PUSH
2545: LD_INT 163
2547: PUSH
2548: LD_INT 4
2550: PUSH
2551: LD_INT 0
2553: PUSH
2554: LD_INT 0
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: LIST
2564: PUSH
2565: LD_INT 3
2567: PUSH
2568: LD_INT 194
2570: PUSH
2571: LD_INT 161
2573: PUSH
2574: LD_INT 1
2576: PUSH
2577: LD_INT 0
2579: PUSH
2580: LD_INT 0
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: PUSH
2591: LD_INT 17
2593: PUSH
2594: LD_INT 190
2596: PUSH
2597: LD_INT 161
2599: PUSH
2600: LD_INT 1
2602: PUSH
2603: LD_INT 0
2605: PUSH
2606: LD_INT 0
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: LIST
2613: LIST
2614: LIST
2615: LIST
2616: PUSH
2617: LD_INT 5
2619: PUSH
2620: LD_INT 200
2622: PUSH
2623: LD_INT 145
2625: PUSH
2626: LD_INT 3
2628: PUSH
2629: LD_INT 0
2631: PUSH
2632: LD_INT 0
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: LIST
2639: LIST
2640: LIST
2641: LIST
2642: PUSH
2643: LD_INT 32
2645: PUSH
2646: LD_INT 192
2648: PUSH
2649: LD_INT 144
2651: PUSH
2652: LD_INT 3
2654: PUSH
2655: LD_INT 0
2657: PUSH
2658: LD_INT 0
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: LIST
2665: LIST
2666: LIST
2667: LIST
2668: PUSH
2669: LD_INT 26
2671: PUSH
2672: LD_INT 216
2674: PUSH
2675: LD_INT 172
2677: PUSH
2678: LD_INT 3
2680: PUSH
2681: LD_INT 0
2683: PUSH
2684: LD_INT 0
2686: PUSH
2687: EMPTY
2688: LIST
2689: LIST
2690: LIST
2691: LIST
2692: LIST
2693: LIST
2694: PUSH
2695: LD_INT 26
2697: PUSH
2698: LD_INT 218
2700: PUSH
2701: LD_INT 176
2703: PUSH
2704: LD_INT 3
2706: PUSH
2707: LD_INT 0
2709: PUSH
2710: LD_INT 0
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: LIST
2717: LIST
2718: LIST
2719: LIST
2720: PUSH
2721: LD_INT 29
2723: PUSH
2724: LD_INT 182
2726: PUSH
2727: LD_INT 149
2729: PUSH
2730: LD_INT 3
2732: PUSH
2733: LD_INT 0
2735: PUSH
2736: LD_INT 0
2738: PUSH
2739: EMPTY
2740: LIST
2741: LIST
2742: LIST
2743: LIST
2744: LIST
2745: LIST
2746: PUSH
2747: LD_INT 8
2749: PUSH
2750: LD_INT 201
2752: PUSH
2753: LD_INT 171
2755: PUSH
2756: LD_INT 0
2758: PUSH
2759: LD_INT 10
2761: PUSH
2762: LD_INT 11
2764: PUSH
2765: EMPTY
2766: LIST
2767: LIST
2768: LIST
2769: LIST
2770: LIST
2771: LIST
2772: PUSH
2773: LD_INT 32
2775: PUSH
2776: LD_INT 188
2778: PUSH
2779: LD_INT 167
2781: PUSH
2782: LD_INT 0
2784: PUSH
2785: LD_INT 0
2787: PUSH
2788: LD_INT 0
2790: PUSH
2791: EMPTY
2792: LIST
2793: LIST
2794: LIST
2795: LIST
2796: LIST
2797: LIST
2798: PUSH
2799: LD_INT 32
2801: PUSH
2802: LD_INT 202
2804: PUSH
2805: LD_INT 179
2807: PUSH
2808: LD_INT 0
2810: PUSH
2811: LD_INT 0
2813: PUSH
2814: LD_INT 0
2816: PUSH
2817: EMPTY
2818: LIST
2819: LIST
2820: LIST
2821: LIST
2822: LIST
2823: LIST
2824: PUSH
2825: LD_INT 32
2827: PUSH
2828: LD_INT 209
2830: PUSH
2831: LD_INT 182
2833: PUSH
2834: LD_INT 0
2836: PUSH
2837: LD_INT 0
2839: PUSH
2840: LD_INT 0
2842: PUSH
2843: EMPTY
2844: LIST
2845: LIST
2846: LIST
2847: LIST
2848: LIST
2849: LIST
2850: PUSH
2851: LD_INT 32
2853: PUSH
2854: LD_INT 220
2856: PUSH
2857: LD_INT 183
2859: PUSH
2860: LD_INT 5
2862: PUSH
2863: LD_INT 0
2865: PUSH
2866: LD_INT 0
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: LIST
2873: LIST
2874: LIST
2875: LIST
2876: PUSH
2877: LD_INT 32
2879: PUSH
2880: LD_INT 225
2882: PUSH
2883: LD_INT 181
2885: PUSH
2886: LD_INT 5
2888: PUSH
2889: LD_INT 0
2891: PUSH
2892: LD_INT 0
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: LIST
2899: LIST
2900: LIST
2901: LIST
2902: PUSH
2903: LD_INT 26
2905: PUSH
2906: LD_INT 220
2908: PUSH
2909: LD_INT 174
2911: PUSH
2912: LD_INT 5
2914: PUSH
2915: LD_INT 0
2917: PUSH
2918: LD_INT 0
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: LIST
2925: LIST
2926: LIST
2927: LIST
2928: PUSH
2929: LD_INT 1
2931: PUSH
2932: LD_INT 84
2934: PUSH
2935: LD_INT 128
2937: PUSH
2938: LD_INT 4
2940: PUSH
2941: LD_INT 0
2943: PUSH
2944: LD_INT 0
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: LIST
2951: LIST
2952: LIST
2953: LIST
2954: PUSH
2955: LD_INT 3
2957: PUSH
2958: LD_INT 68
2960: PUSH
2961: LD_INT 121
2963: PUSH
2964: LD_INT 1
2966: PUSH
2967: LD_INT 0
2969: PUSH
2970: LD_INT 0
2972: PUSH
2973: EMPTY
2974: LIST
2975: LIST
2976: LIST
2977: LIST
2978: LIST
2979: LIST
2980: PUSH
2981: LD_INT 19
2983: PUSH
2984: LD_INT 72
2986: PUSH
2987: LD_INT 125
2989: PUSH
2990: LD_INT 5
2992: PUSH
2993: LD_INT 0
2995: PUSH
2996: LD_INT 0
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: LIST
3003: LIST
3004: LIST
3005: LIST
3006: PUSH
3007: LD_INT 18
3009: PUSH
3010: LD_INT 68
3012: PUSH
3013: LD_INT 124
3015: PUSH
3016: LD_INT 0
3018: PUSH
3019: LD_INT 0
3021: PUSH
3022: LD_INT 0
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: LIST
3029: LIST
3030: LIST
3031: LIST
3032: PUSH
3033: LD_INT 24
3035: PUSH
3036: LD_INT 64
3038: PUSH
3039: LD_INT 121
3041: PUSH
3042: LD_INT 1
3044: PUSH
3045: LD_INT 0
3047: PUSH
3048: LD_INT 0
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: LIST
3055: LIST
3056: LIST
3057: LIST
3058: PUSH
3059: LD_INT 17
3061: PUSH
3062: LD_INT 65
3064: PUSH
3065: LD_INT 118
3067: PUSH
3068: LD_INT 2
3070: PUSH
3071: LD_INT 0
3073: PUSH
3074: LD_INT 0
3076: PUSH
3077: EMPTY
3078: LIST
3079: LIST
3080: LIST
3081: LIST
3082: LIST
3083: LIST
3084: PUSH
3085: LD_INT 21
3087: PUSH
3088: LD_INT 68
3090: PUSH
3091: LD_INT 117
3093: PUSH
3094: LD_INT 3
3096: PUSH
3097: LD_INT 0
3099: PUSH
3100: LD_INT 0
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: LIST
3107: LIST
3108: LIST
3109: LIST
3110: PUSH
3111: LD_INT 8
3113: PUSH
3114: LD_INT 68
3116: PUSH
3117: LD_INT 130
3119: PUSH
3120: LD_INT 1
3122: PUSH
3123: LD_INT 14
3125: PUSH
3126: LD_INT 10
3128: PUSH
3129: EMPTY
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: LIST
3136: PUSH
3137: LD_INT 8
3139: PUSH
3140: LD_INT 67
3142: PUSH
3143: LD_INT 110
3145: PUSH
3146: LD_INT 2
3148: PUSH
3149: LD_INT 11
3151: PUSH
3152: LD_INT 12
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: LIST
3159: LIST
3160: LIST
3161: LIST
3162: PUSH
3163: LD_INT 28
3165: PUSH
3166: LD_INT 71
3168: PUSH
3169: LD_INT 136
3171: PUSH
3172: LD_INT 2
3174: PUSH
3175: LD_INT 0
3177: PUSH
3178: LD_INT 0
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: PUSH
3189: LD_INT 28
3191: PUSH
3192: LD_INT 73
3194: PUSH
3195: LD_INT 141
3197: PUSH
3198: LD_INT 2
3200: PUSH
3201: LD_INT 0
3203: PUSH
3204: LD_INT 0
3206: PUSH
3207: EMPTY
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: PUSH
3215: LD_INT 30
3217: PUSH
3218: LD_INT 75
3220: PUSH
3221: LD_INT 145
3223: PUSH
3224: LD_INT 2
3226: PUSH
3227: LD_INT 0
3229: PUSH
3230: LD_INT 0
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: LIST
3237: LIST
3238: LIST
3239: LIST
3240: PUSH
3241: LD_INT 5
3243: PUSH
3244: LD_INT 111
3246: PUSH
3247: LD_INT 138
3249: PUSH
3250: LD_INT 4
3252: PUSH
3253: LD_INT 0
3255: PUSH
3256: LD_INT 0
3258: PUSH
3259: EMPTY
3260: LIST
3261: LIST
3262: LIST
3263: LIST
3264: LIST
3265: LIST
3266: PUSH
3267: LD_INT 33
3269: PUSH
3270: LD_INT 104
3272: PUSH
3273: LD_INT 130
3275: PUSH
3276: LD_INT 3
3278: PUSH
3279: LD_INT 0
3281: PUSH
3282: LD_INT 0
3284: PUSH
3285: EMPTY
3286: LIST
3287: LIST
3288: LIST
3289: LIST
3290: LIST
3291: LIST
3292: PUSH
3293: LD_INT 33
3295: PUSH
3296: LD_INT 110
3298: PUSH
3299: LD_INT 142
3301: PUSH
3302: LD_INT 5
3304: PUSH
3305: LD_INT 0
3307: PUSH
3308: LD_INT 0
3310: PUSH
3311: EMPTY
3312: LIST
3313: LIST
3314: LIST
3315: LIST
3316: LIST
3317: LIST
3318: PUSH
3319: LD_INT 33
3321: PUSH
3322: LD_INT 91
3324: PUSH
3325: LD_INT 131
3327: PUSH
3328: LD_INT 5
3330: PUSH
3331: LD_INT 0
3333: PUSH
3334: LD_INT 0
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: LIST
3341: LIST
3342: LIST
3343: LIST
3344: PUSH
3345: LD_INT 33
3347: PUSH
3348: LD_INT 107
3350: PUSH
3351: LD_INT 157
3353: PUSH
3354: LD_INT 5
3356: PUSH
3357: LD_INT 0
3359: PUSH
3360: LD_INT 0
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: LIST
3367: LIST
3368: LIST
3369: LIST
3370: PUSH
3371: LD_INT 33
3373: PUSH
3374: LD_INT 104
3376: PUSH
3377: LD_INT 160
3379: PUSH
3380: LD_INT 5
3382: PUSH
3383: LD_INT 0
3385: PUSH
3386: LD_INT 0
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: PUSH
3397: LD_INT 33
3399: PUSH
3400: LD_INT 101
3402: PUSH
3403: LD_INT 162
3405: PUSH
3406: LD_INT 5
3408: PUSH
3409: LD_INT 0
3411: PUSH
3412: LD_INT 0
3414: PUSH
3415: EMPTY
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: PUSH
3423: LD_INT 32
3425: PUSH
3426: LD_INT 87
3428: PUSH
3429: LD_INT 157
3431: PUSH
3432: LD_INT 5
3434: PUSH
3435: LD_INT 0
3437: PUSH
3438: LD_INT 0
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: LIST
3445: LIST
3446: LIST
3447: LIST
3448: PUSH
3449: LD_INT 32
3451: PUSH
3452: LD_INT 82
3454: PUSH
3455: LD_INT 158
3457: PUSH
3458: LD_INT 5
3460: PUSH
3461: LD_INT 0
3463: PUSH
3464: LD_INT 0
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: LIST
3474: PUSH
3475: LD_INT 33
3477: PUSH
3478: LD_INT 91
3480: PUSH
3481: LD_INT 118
3483: PUSH
3484: LD_INT 4
3486: PUSH
3487: LD_INT 0
3489: PUSH
3490: LD_INT 0
3492: PUSH
3493: EMPTY
3494: LIST
3495: LIST
3496: LIST
3497: LIST
3498: LIST
3499: LIST
3500: PUSH
3501: LD_INT 33
3503: PUSH
3504: LD_INT 89
3506: PUSH
3507: LD_INT 107
3509: PUSH
3510: LD_INT 4
3512: PUSH
3513: LD_INT 0
3515: PUSH
3516: LD_INT 0
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: PUSH
3527: LD_INT 5
3529: PUSH
3530: LD_INT 86
3532: PUSH
3533: LD_INT 96
3535: PUSH
3536: LD_INT 3
3538: PUSH
3539: LD_INT 0
3541: PUSH
3542: LD_INT 0
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: LIST
3549: LIST
3550: LIST
3551: LIST
3552: PUSH
3553: LD_INT 33
3555: PUSH
3556: LD_INT 91
3558: PUSH
3559: LD_INT 102
3561: PUSH
3562: LD_INT 4
3564: PUSH
3565: LD_INT 0
3567: PUSH
3568: LD_INT 0
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: PUSH
3579: LD_INT 32
3581: PUSH
3582: LD_INT 80
3584: PUSH
3585: LD_INT 95
3587: PUSH
3588: LD_INT 3
3590: PUSH
3591: LD_INT 0
3593: PUSH
3594: LD_INT 0
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: PUSH
3605: LD_INT 28
3607: PUSH
3608: LD_INT 77
3610: PUSH
3611: LD_INT 105
3613: PUSH
3614: LD_INT 3
3616: PUSH
3617: LD_INT 0
3619: PUSH
3620: LD_INT 0
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: PUSH
3631: LD_INT 28
3633: PUSH
3634: LD_INT 85
3636: PUSH
3637: LD_INT 113
3639: PUSH
3640: LD_INT 3
3642: PUSH
3643: LD_INT 0
3645: PUSH
3646: LD_INT 0
3648: PUSH
3649: EMPTY
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: LIST
3655: LIST
3656: PUSH
3657: LD_INT 28
3659: PUSH
3660: LD_INT 55
3662: PUSH
3663: LD_INT 97
3665: PUSH
3666: LD_INT 3
3668: PUSH
3669: LD_INT 0
3671: PUSH
3672: LD_INT 0
3674: PUSH
3675: EMPTY
3676: LIST
3677: LIST
3678: LIST
3679: LIST
3680: LIST
3681: LIST
3682: PUSH
3683: LD_INT 28
3685: PUSH
3686: LD_INT 88
3688: PUSH
3689: LD_INT 128
3691: PUSH
3692: LD_INT 3
3694: PUSH
3695: LD_INT 0
3697: PUSH
3698: LD_INT 0
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: LIST
3708: PUSH
3709: LD_INT 32
3711: PUSH
3712: LD_INT 69
3714: PUSH
3715: LD_INT 101
3717: PUSH
3718: LD_INT 2
3720: PUSH
3721: LD_INT 0
3723: PUSH
3724: LD_INT 0
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: LIST
3734: PUSH
3735: LD_INT 1
3737: PUSH
3738: LD_INT 34
3740: PUSH
3741: LD_INT 23
3743: PUSH
3744: LD_INT 4
3746: PUSH
3747: LD_INT 0
3749: PUSH
3750: LD_INT 0
3752: PUSH
3753: EMPTY
3754: LIST
3755: LIST
3756: LIST
3757: LIST
3758: LIST
3759: LIST
3760: PUSH
3761: LD_INT 8
3763: PUSH
3764: LD_INT 25
3766: PUSH
3767: LD_INT 4
3769: PUSH
3770: LD_INT 3
3772: PUSH
3773: LD_INT 11
3775: PUSH
3776: LD_INT 10
3778: PUSH
3779: EMPTY
3780: LIST
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: PUSH
3787: LD_INT 8
3789: PUSH
3790: LD_INT 15
3792: PUSH
3793: LD_INT 4
3795: PUSH
3796: LD_INT 2
3798: PUSH
3799: LD_INT 14
3801: PUSH
3802: LD_INT 12
3804: PUSH
3805: EMPTY
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: PUSH
3813: LD_INT 29
3815: PUSH
3816: LD_INT 55
3818: PUSH
3819: LD_INT 35
3821: PUSH
3822: LD_INT 2
3824: PUSH
3825: LD_INT 0
3827: PUSH
3828: LD_INT 0
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: PUSH
3839: LD_INT 29
3841: PUSH
3842: LD_INT 24
3844: PUSH
3845: LD_INT 44
3847: PUSH
3848: LD_INT 2
3850: PUSH
3851: LD_INT 0
3853: PUSH
3854: LD_INT 0
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: PUSH
3865: LD_INT 34
3867: PUSH
3868: LD_INT 34
3870: PUSH
3871: LD_INT 32
3873: PUSH
3874: LD_INT 4
3876: PUSH
3877: LD_INT 0
3879: PUSH
3880: LD_INT 0
3882: PUSH
3883: EMPTY
3884: LIST
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: LIST
3890: PUSH
3891: LD_INT 3
3893: PUSH
3894: LD_INT 14
3896: PUSH
3897: LD_INT 16
3899: PUSH
3900: LD_INT 1
3902: PUSH
3903: LD_INT 0
3905: PUSH
3906: LD_INT 0
3908: PUSH
3909: EMPTY
3910: LIST
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: LIST
3916: PUSH
3917: LD_INT 24
3919: PUSH
3920: LD_INT 10
3922: PUSH
3923: LD_INT 16
3925: PUSH
3926: LD_INT 1
3928: PUSH
3929: LD_INT 0
3931: PUSH
3932: LD_INT 0
3934: PUSH
3935: EMPTY
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: PUSH
3943: LD_INT 19
3945: PUSH
3946: LD_INT 11
3948: PUSH
3949: LD_INT 13
3951: PUSH
3952: LD_INT 2
3954: PUSH
3955: LD_INT 0
3957: PUSH
3958: LD_INT 0
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: LIST
3965: LIST
3966: LIST
3967: LIST
3968: PUSH
3969: LD_INT 18
3971: PUSH
3972: LD_INT 14
3974: PUSH
3975: LD_INT 12
3977: PUSH
3978: LD_INT 3
3980: PUSH
3981: LD_INT 0
3983: PUSH
3984: LD_INT 0
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: LIST
3991: LIST
3992: LIST
3993: LIST
3994: PUSH
3995: LD_INT 16
3997: PUSH
3998: LD_INT 14
4000: PUSH
4001: LD_INT 19
4003: PUSH
4004: LD_INT 0
4006: PUSH
4007: LD_INT 0
4009: PUSH
4010: LD_INT 0
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: PUSH
4021: LD_INT 17
4023: PUSH
4024: LD_INT 18
4026: PUSH
4027: LD_INT 20
4029: PUSH
4030: LD_INT 5
4032: PUSH
4033: LD_INT 0
4035: PUSH
4036: LD_INT 0
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: LIST
4043: LIST
4044: LIST
4045: LIST
4046: PUSH
4047: LD_INT 28
4049: PUSH
4050: LD_INT 10
4052: PUSH
4053: LD_INT 5
4055: PUSH
4056: LD_INT 1
4058: PUSH
4059: LD_INT 0
4061: PUSH
4062: LD_INT 0
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: PUSH
4073: LD_INT 28
4075: PUSH
4076: LD_INT 8
4078: PUSH
4079: LD_INT 8
4081: PUSH
4082: LD_INT 1
4084: PUSH
4085: LD_INT 0
4087: PUSH
4088: LD_INT 0
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: PUSH
4099: LD_INT 26
4101: PUSH
4102: LD_INT 19
4104: PUSH
4105: LD_INT 2
4107: PUSH
4108: LD_INT 1
4110: PUSH
4111: LD_INT 0
4113: PUSH
4114: LD_INT 0
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: LIST
4124: PUSH
4125: LD_INT 26
4127: PUSH
4128: LD_INT 30
4130: PUSH
4131: LD_INT 2
4133: PUSH
4134: LD_INT 1
4136: PUSH
4137: LD_INT 0
4139: PUSH
4140: LD_INT 0
4142: PUSH
4143: EMPTY
4144: LIST
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: PUSH
4151: LD_INT 5
4153: PUSH
4154: LD_INT 53
4156: PUSH
4157: LD_INT 20
4159: PUSH
4160: LD_INT 4
4162: PUSH
4163: LD_INT 0
4165: PUSH
4166: LD_INT 0
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: LIST
4176: PUSH
4177: LD_INT 32
4179: PUSH
4180: LD_INT 55
4182: PUSH
4183: LD_INT 24
4185: PUSH
4186: LD_INT 4
4188: PUSH
4189: LD_INT 0
4191: PUSH
4192: LD_INT 0
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 32
4205: PUSH
4206: LD_INT 61
4208: PUSH
4209: LD_INT 45
4211: PUSH
4212: LD_INT 5
4214: PUSH
4215: LD_INT 0
4217: PUSH
4218: LD_INT 0
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: LIST
4225: LIST
4226: LIST
4227: LIST
4228: PUSH
4229: LD_INT 32
4231: PUSH
4232: LD_INT 52
4234: PUSH
4235: LD_INT 51
4237: PUSH
4238: LD_INT 5
4240: PUSH
4241: LD_INT 0
4243: PUSH
4244: LD_INT 0
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: LIST
4253: LIST
4254: PUSH
4255: LD_INT 33
4257: PUSH
4258: LD_INT 56
4260: PUSH
4261: LD_INT 51
4263: PUSH
4264: LD_INT 5
4266: PUSH
4267: LD_INT 0
4269: PUSH
4270: LD_INT 0
4272: PUSH
4273: EMPTY
4274: LIST
4275: LIST
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: PUSH
4281: LD_INT 33
4283: PUSH
4284: LD_INT 62
4286: PUSH
4287: LD_INT 49
4289: PUSH
4290: LD_INT 5
4292: PUSH
4293: LD_INT 0
4295: PUSH
4296: LD_INT 0
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: PUSH
4307: LD_INT 33
4309: PUSH
4310: LD_INT 41
4312: PUSH
4313: LD_INT 47
4315: PUSH
4316: LD_INT 5
4318: PUSH
4319: LD_INT 0
4321: PUSH
4322: LD_INT 0
4324: PUSH
4325: EMPTY
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: PUSH
4333: LD_INT 33
4335: PUSH
4336: LD_INT 33
4338: PUSH
4339: LD_INT 52
4341: PUSH
4342: LD_INT 5
4344: PUSH
4345: LD_INT 0
4347: PUSH
4348: LD_INT 0
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: PUSH
4359: LD_INT 5
4361: PUSH
4362: LD_INT 31
4364: PUSH
4365: LD_INT 40
4367: PUSH
4368: LD_INT 0
4370: PUSH
4371: LD_INT 0
4373: PUSH
4374: LD_INT 0
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: PUSH
4385: LD_INT 33
4387: PUSH
4388: LD_INT 65
4390: PUSH
4391: LD_INT 37
4393: PUSH
4394: LD_INT 5
4396: PUSH
4397: LD_INT 0
4399: PUSH
4400: LD_INT 0
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: PUSH
4411: LD_INT 33
4413: PUSH
4414: LD_INT 63
4416: PUSH
4417: LD_INT 29
4419: PUSH
4420: LD_INT 4
4422: PUSH
4423: LD_INT 0
4425: PUSH
4426: LD_INT 0
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: LIST
4436: PUSH
4437: LD_INT 33
4439: PUSH
4440: LD_INT 54
4442: PUSH
4443: LD_INT 11
4445: PUSH
4446: LD_INT 4
4448: PUSH
4449: LD_INT 0
4451: PUSH
4452: LD_INT 0
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: LIST
4459: LIST
4460: LIST
4461: LIST
4462: PUSH
4463: LD_INT 33
4465: PUSH
4466: LD_INT 51
4468: PUSH
4469: LD_INT 6
4471: PUSH
4472: LD_INT 4
4474: PUSH
4475: LD_INT 0
4477: PUSH
4478: LD_INT 0
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: PUSH
4489: LD_INT 26
4491: PUSH
4492: LD_INT 39
4494: PUSH
4495: LD_INT 25
4497: PUSH
4498: LD_INT 0
4500: PUSH
4501: LD_INT 0
4503: PUSH
4504: LD_INT 0
4506: PUSH
4507: EMPTY
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: PUSH
4515: LD_INT 26
4517: PUSH
4518: LD_INT 37
4520: PUSH
4521: LD_INT 21
4523: PUSH
4524: LD_INT 0
4526: PUSH
4527: LD_INT 0
4529: PUSH
4530: LD_INT 0
4532: PUSH
4533: EMPTY
4534: LIST
4535: LIST
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: PUSH
4541: LD_INT 32
4543: PUSH
4544: LD_INT 35
4546: PUSH
4547: LD_INT 17
4549: PUSH
4550: LD_INT 4
4552: PUSH
4553: LD_INT 0
4555: PUSH
4556: LD_INT 0
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: PUSH
4567: LD_INT 33
4569: PUSH
4570: LD_INT 35
4572: PUSH
4573: LD_INT 28
4575: PUSH
4576: LD_INT 4
4578: PUSH
4579: LD_INT 0
4581: PUSH
4582: LD_INT 0
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: PUSH
4593: LD_INT 33
4595: PUSH
4596: LD_INT 28
4598: PUSH
4599: LD_INT 46
4601: PUSH
4602: LD_INT 5
4604: PUSH
4605: LD_INT 0
4607: PUSH
4608: LD_INT 0
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: PUSH
4619: LD_INT 33
4621: PUSH
4622: LD_INT 31
4624: PUSH
4625: LD_INT 6
4627: PUSH
4628: LD_INT 4
4630: PUSH
4631: LD_INT 0
4633: PUSH
4634: LD_INT 0
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: PUSH
4645: LD_INT 26
4647: PUSH
4648: LD_INT 54
4650: PUSH
4651: LD_INT 38
4653: PUSH
4654: LD_INT 4
4656: PUSH
4657: LD_INT 0
4659: PUSH
4660: LD_INT 0
4662: PUSH
4663: EMPTY
4664: LIST
4665: LIST
4666: LIST
4667: LIST
4668: LIST
4669: LIST
4670: PUSH
4671: LD_INT 33
4673: PUSH
4674: LD_INT 207
4676: PUSH
4677: LD_INT 167
4679: PUSH
4680: LD_INT 3
4682: PUSH
4683: LD_INT 0
4685: PUSH
4686: LD_INT 0
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: PUSH
4697: EMPTY
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: ST_TO_ADDR
// for i in tmp do
4782: LD_ADDR_VAR 0 2
4786: PUSH
4787: LD_VAR 0 4
4791: PUSH
4792: FOR_IN
4793: IFFALSE 5024
// begin uc_side := side ;
4795: LD_ADDR_OWVAR 20
4799: PUSH
4800: LD_VAR 0 5
4804: ST_TO_ADDR
// uc_nation := nation_russian ;
4805: LD_ADDR_OWVAR 21
4809: PUSH
4810: LD_INT 3
4812: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4813: LD_ADDR_OWVAR 42
4817: PUSH
4818: LD_VAR 0 2
4822: PUSH
4823: LD_INT 1
4825: ARRAY
4826: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
4827: LD_ADDR_OWVAR 43
4831: PUSH
4832: LD_INT 5
4834: PPUSH
4835: LD_INT 6
4837: PPUSH
4838: CALL_OW 12
4842: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
4843: LD_ADDR_OWVAR 44
4847: PUSH
4848: LD_VAR 0 2
4852: PUSH
4853: LD_INT 5
4855: ARRAY
4856: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
4857: LD_ADDR_OWVAR 45
4861: PUSH
4862: LD_VAR 0 2
4866: PUSH
4867: LD_INT 6
4869: ARRAY
4870: ST_TO_ADDR
// sr := 0 ;
4871: LD_ADDR_VAR 0 6
4875: PUSH
4876: LD_INT 0
4878: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
4879: LD_VAR 0 2
4883: PUSH
4884: LD_INT 1
4886: ARRAY
4887: PUSH
4888: LD_INT 29
4890: EQUAL
4891: IFFALSE 4903
// sr := mat_oil else
4893: LD_ADDR_VAR 0 6
4897: PUSH
4898: LD_INT 2
4900: ST_TO_ADDR
4901: GO 4925
// if i [ 1 ] = b_siberite_mine then
4903: LD_VAR 0 2
4907: PUSH
4908: LD_INT 1
4910: ARRAY
4911: PUSH
4912: LD_INT 30
4914: EQUAL
4915: IFFALSE 4925
// sr := mat_siberit ;
4917: LD_ADDR_VAR 0 6
4921: PUSH
4922: LD_INT 3
4924: ST_TO_ADDR
// if sr then
4925: LD_VAR 0 6
4929: IFFALSE 4985
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
4931: LD_VAR 0 2
4935: PUSH
4936: LD_INT 2
4938: ARRAY
4939: PPUSH
4940: LD_VAR 0 2
4944: PUSH
4945: LD_INT 3
4947: ARRAY
4948: PPUSH
4949: LD_VAR 0 6
4953: PPUSH
4954: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
4958: LD_VAR 0 2
4962: PUSH
4963: LD_INT 2
4965: ARRAY
4966: PPUSH
4967: LD_VAR 0 2
4971: PUSH
4972: LD_INT 3
4974: ARRAY
4975: PPUSH
4976: LD_VAR 0 5
4980: PPUSH
4981: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
4985: LD_ADDR_VAR 0 3
4989: PUSH
4990: LD_VAR 0 2
4994: PUSH
4995: LD_INT 2
4997: ARRAY
4998: PPUSH
4999: LD_VAR 0 2
5003: PUSH
5004: LD_INT 3
5006: ARRAY
5007: PPUSH
5008: LD_VAR 0 2
5012: PUSH
5013: LD_INT 4
5015: ARRAY
5016: PPUSH
5017: CALL_OW 47
5021: ST_TO_ADDR
// end ;
5022: GO 4792
5024: POP
5025: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
5026: LD_ADDR_VAR 0 7
5030: PUSH
5031: LD_INT 22
5033: PUSH
5034: LD_VAR 0 5
5038: PUSH
5039: EMPTY
5040: LIST
5041: LIST
5042: PUSH
5043: LD_INT 30
5045: PUSH
5046: LD_INT 1
5048: PUSH
5049: EMPTY
5050: LIST
5051: LIST
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PPUSH
5057: CALL_OW 69
5061: ST_TO_ADDR
// if not depot then
5062: LD_VAR 0 7
5066: NOT
5067: IFFALSE 5071
// exit ;
5069: GO 5411
// base := PrepareBase ( depot [ 2 ] , rus2Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5071: LD_ADDR_VAR 0 8
5075: PUSH
5076: LD_VAR 0 7
5080: PUSH
5081: LD_INT 2
5083: ARRAY
5084: PPUSH
5085: LD_INT 15
5087: PPUSH
5088: LD_INT 0
5090: PPUSH
5091: LD_INT 6
5093: PUSH
5094: LD_INT 7
5096: PUSH
5097: LD_INT 8
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: LIST
5104: PUSH
5105: LD_OWVAR 67
5109: ARRAY
5110: PPUSH
5111: LD_INT 3000
5113: PUSH
5114: LD_INT 300
5116: PUSH
5117: LD_INT 100
5119: PUSH
5120: EMPTY
5121: LIST
5122: LIST
5123: LIST
5124: PPUSH
5125: LD_INT 12
5127: PUSH
5128: LD_INT 6
5130: PUSH
5131: LD_INT 6
5133: PUSH
5134: LD_INT 4
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: PPUSH
5143: CALL 29987 0 6
5147: ST_TO_ADDR
// if not base then
5148: LD_VAR 0 8
5152: NOT
5153: IFFALSE 5157
// exit ;
5155: GO 5411
// mc_bases := Replace ( mc_bases , mc_rus_1 , base ) ;
5157: LD_ADDR_EXP 36
5161: PUSH
5162: LD_EXP 36
5166: PPUSH
5167: LD_EXP 7
5171: PPUSH
5172: LD_VAR 0 8
5176: PPUSH
5177: CALL_OW 1
5181: ST_TO_ADDR
// base := PrepareBase ( depot [ 1 ] , rus1Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5182: LD_ADDR_VAR 0 8
5186: PUSH
5187: LD_VAR 0 7
5191: PUSH
5192: LD_INT 1
5194: ARRAY
5195: PPUSH
5196: LD_INT 11
5198: PPUSH
5199: LD_INT 0
5201: PPUSH
5202: LD_INT 6
5204: PUSH
5205: LD_INT 7
5207: PUSH
5208: LD_INT 8
5210: PUSH
5211: EMPTY
5212: LIST
5213: LIST
5214: LIST
5215: PUSH
5216: LD_OWVAR 67
5220: ARRAY
5221: PPUSH
5222: LD_INT 3000
5224: PUSH
5225: LD_INT 300
5227: PUSH
5228: LD_INT 100
5230: PUSH
5231: EMPTY
5232: LIST
5233: LIST
5234: LIST
5235: PPUSH
5236: LD_INT 12
5238: PUSH
5239: LD_INT 6
5241: PUSH
5242: LD_INT 6
5244: PUSH
5245: LD_INT 4
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: LIST
5252: LIST
5253: PPUSH
5254: CALL 29987 0 6
5258: ST_TO_ADDR
// if not base then
5259: LD_VAR 0 8
5263: NOT
5264: IFFALSE 5268
// exit ;
5266: GO 5411
// mc_bases := Replace ( mc_bases , mc_rus_2 , base ) ;
5268: LD_ADDR_EXP 36
5272: PUSH
5273: LD_EXP 36
5277: PPUSH
5278: LD_EXP 8
5282: PPUSH
5283: LD_VAR 0 8
5287: PPUSH
5288: CALL_OW 1
5292: ST_TO_ADDR
// ruOutpost := PrepareBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] , ruOutpostArea , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 500 , 100 , 10 ] , [ [ 6 , 7 , 8 ] [ Difficulty ] , 2 , 0 , 1 ] ) ;
5293: LD_ADDR_EXP 14
5297: PUSH
5298: LD_INT 22
5300: PUSH
5301: LD_INT 3
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: PUSH
5308: LD_INT 30
5310: PUSH
5311: LD_INT 0
5313: PUSH
5314: EMPTY
5315: LIST
5316: LIST
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: PPUSH
5322: CALL_OW 69
5326: PUSH
5327: LD_INT 1
5329: ARRAY
5330: PPUSH
5331: LD_INT 25
5333: PPUSH
5334: LD_INT 0
5336: PPUSH
5337: LD_INT 6
5339: PUSH
5340: LD_INT 7
5342: PUSH
5343: LD_INT 8
5345: PUSH
5346: EMPTY
5347: LIST
5348: LIST
5349: LIST
5350: PUSH
5351: LD_OWVAR 67
5355: ARRAY
5356: PPUSH
5357: LD_INT 500
5359: PUSH
5360: LD_INT 100
5362: PUSH
5363: LD_INT 10
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: LIST
5370: PPUSH
5371: LD_INT 6
5373: PUSH
5374: LD_INT 7
5376: PUSH
5377: LD_INT 8
5379: PUSH
5380: EMPTY
5381: LIST
5382: LIST
5383: LIST
5384: PUSH
5385: LD_OWVAR 67
5389: ARRAY
5390: PUSH
5391: LD_INT 2
5393: PUSH
5394: LD_INT 0
5396: PUSH
5397: LD_INT 1
5399: PUSH
5400: EMPTY
5401: LIST
5402: LIST
5403: LIST
5404: LIST
5405: PPUSH
5406: CALL 29987 0 6
5410: ST_TO_ADDR
// end ;
5411: LD_VAR 0 1
5415: RET
// export function PrepareLegion ; var i , b , veh , tmp , cameras , side , sr , depot , base ; begin
5416: LD_INT 0
5418: PPUSH
5419: PPUSH
5420: PPUSH
5421: PPUSH
5422: PPUSH
5423: PPUSH
5424: PPUSH
5425: PPUSH
5426: PPUSH
5427: PPUSH
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 0 , 0 , legApe , 0 ) ;
5428: LD_INT 0
5430: PPUSH
5431: LD_INT 0
5433: PPUSH
5434: LD_INT 6
5436: PPUSH
5437: LD_INT 0
5439: PPUSH
5440: LD_INT 0
5442: PPUSH
5443: LD_INT 0
5445: PPUSH
5446: LD_INT 0
5448: PPUSH
5449: LD_INT 8
5451: PPUSH
5452: LD_INT 0
5454: PPUSH
5455: CALL 54368 0 9
// side := 8 ;
5459: LD_ADDR_VAR 0 7
5463: PUSH
5464: LD_INT 8
5466: ST_TO_ADDR
// tmp := AreaToList ( minesArea , 0 ) ;
5467: LD_ADDR_VAR 0 5
5471: PUSH
5472: LD_INT 20
5474: PPUSH
5475: LD_INT 0
5477: PPUSH
5478: CALL_OW 517
5482: ST_TO_ADDR
// if tmp then
5483: LD_VAR 0 5
5487: IFFALSE 5615
// begin for i = 1 to tmp [ 1 ] do
5489: LD_ADDR_VAR 0 2
5493: PUSH
5494: DOUBLE
5495: LD_INT 1
5497: DEC
5498: ST_TO_ADDR
5499: LD_VAR 0 5
5503: PUSH
5504: LD_INT 1
5506: ARRAY
5507: PUSH
5508: FOR_TO
5509: IFFALSE 5613
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side , 0 ) ;
5511: LD_VAR 0 5
5515: PUSH
5516: LD_INT 1
5518: ARRAY
5519: PUSH
5520: LD_VAR 0 2
5524: ARRAY
5525: PPUSH
5526: LD_VAR 0 5
5530: PUSH
5531: LD_INT 2
5533: ARRAY
5534: PUSH
5535: LD_VAR 0 2
5539: ARRAY
5540: PPUSH
5541: LD_VAR 0 7
5545: PPUSH
5546: LD_INT 0
5548: PPUSH
5549: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
5553: LD_ADDR_EXP 16
5557: PUSH
5558: LD_EXP 16
5562: PPUSH
5563: LD_EXP 16
5567: PUSH
5568: LD_INT 1
5570: PLUS
5571: PPUSH
5572: LD_VAR 0 5
5576: PUSH
5577: LD_INT 1
5579: ARRAY
5580: PUSH
5581: LD_VAR 0 2
5585: ARRAY
5586: PUSH
5587: LD_VAR 0 5
5591: PUSH
5592: LD_INT 2
5594: ARRAY
5595: PUSH
5596: LD_VAR 0 2
5600: ARRAY
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: PPUSH
5606: CALL_OW 2
5610: ST_TO_ADDR
// end ;
5611: GO 5508
5613: POP
5614: POP
// end ; cameras := [ [ 165 , 156 ] , [ 143 , 145 ] , [ 152 , 165 ] , [ 123 , 153 ] , [ 161 , 215 ] , [ 172 , 100 ] , [ 148 , 83 ] , [ 122 , 68 ] , [ 105 , 74 ] , [ 113 , 97 ] ] ;
5615: LD_ADDR_VAR 0 6
5619: PUSH
5620: LD_INT 165
5622: PUSH
5623: LD_INT 156
5625: PUSH
5626: EMPTY
5627: LIST
5628: LIST
5629: PUSH
5630: LD_INT 143
5632: PUSH
5633: LD_INT 145
5635: PUSH
5636: EMPTY
5637: LIST
5638: LIST
5639: PUSH
5640: LD_INT 152
5642: PUSH
5643: LD_INT 165
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: PUSH
5650: LD_INT 123
5652: PUSH
5653: LD_INT 153
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: PUSH
5660: LD_INT 161
5662: PUSH
5663: LD_INT 215
5665: PUSH
5666: EMPTY
5667: LIST
5668: LIST
5669: PUSH
5670: LD_INT 172
5672: PUSH
5673: LD_INT 100
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: PUSH
5680: LD_INT 148
5682: PUSH
5683: LD_INT 83
5685: PUSH
5686: EMPTY
5687: LIST
5688: LIST
5689: PUSH
5690: LD_INT 122
5692: PUSH
5693: LD_INT 68
5695: PUSH
5696: EMPTY
5697: LIST
5698: LIST
5699: PUSH
5700: LD_INT 105
5702: PUSH
5703: LD_INT 74
5705: PUSH
5706: EMPTY
5707: LIST
5708: LIST
5709: PUSH
5710: LD_INT 113
5712: PUSH
5713: LD_INT 97
5715: PUSH
5716: EMPTY
5717: LIST
5718: LIST
5719: PUSH
5720: EMPTY
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: ST_TO_ADDR
// for i in cameras do
5732: LD_ADDR_VAR 0 2
5736: PUSH
5737: LD_VAR 0 6
5741: PUSH
5742: FOR_IN
5743: IFFALSE 5774
// HiddenCamera ( i [ 1 ] , i [ 2 ] , side ) ;
5745: LD_VAR 0 2
5749: PUSH
5750: LD_INT 1
5752: ARRAY
5753: PPUSH
5754: LD_VAR 0 2
5758: PUSH
5759: LD_INT 2
5761: ARRAY
5762: PPUSH
5763: LD_VAR 0 7
5767: PPUSH
5768: CALL_OW 244
5772: GO 5742
5774: POP
5775: POP
// tmp := [ [ 1 , 144 , 110 , 1 , 0 , 0 ] , [ 3 , 151 , 118 , 0 , 0 , 0 ] , [ 8 , 158 , 110 , 4 , 10 , 15 ] , [ 23 , 154 , 121 , 5 , 0 , 0 ] , [ 20 , 155 , 118 , 4 , 0 , 0 ] , [ 21 , 151 , 122 , 0 , 0 , 0 ] , [ 18 , 148 , 118 , 1 , 0 , 0 ] , [ 17 , 147 , 114 , 2 , 0 , 0 ] , [ 29 , 163 , 120 , 5 , 0 , 0 ] , [ 27 , 137 , 116 , 3 , 0 , 0 ] , [ 27 , 133 , 111 , 1 , 0 , 0 ] , [ 27 , 132 , 106 , 4 , 0 , 0 ] , [ 26 , 137 , 111 , 0 , 0 , 0 ] , [ 8 , 141 , 117 , 1 , 13 , 11 ] , [ 30 , 140 , 128 , 1 , 0 , 0 ] , [ 5 , 146 , 96 , 3 , 0 , 0 ] , [ 32 , 150 , 98 , 3 , 0 , 0 ] , [ 32 , 142 , 95 , 3 , 0 , 0 ] , [ 32 , 159 , 104 , 3 , 0 , 0 ] , [ 32 , 133 , 95 , 3 , 0 , 0 ] , [ 32 , 131 , 102 , 2 , 0 , 0 ] , [ 32 , 162 , 134 , 0 , 0 , 0 ] , [ 32 , 149 , 132 , 0 , 0 , 0 ] , [ 26 , 143 , 122 , 4 , 0 , 0 ] , [ 26 , 164 , 116 , 2 , 0 , 0 ] , ] ;
5776: LD_ADDR_VAR 0 5
5780: PUSH
5781: LD_INT 1
5783: PUSH
5784: LD_INT 144
5786: PUSH
5787: LD_INT 110
5789: PUSH
5790: LD_INT 1
5792: PUSH
5793: LD_INT 0
5795: PUSH
5796: LD_INT 0
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: LIST
5803: LIST
5804: LIST
5805: LIST
5806: PUSH
5807: LD_INT 3
5809: PUSH
5810: LD_INT 151
5812: PUSH
5813: LD_INT 118
5815: PUSH
5816: LD_INT 0
5818: PUSH
5819: LD_INT 0
5821: PUSH
5822: LD_INT 0
5824: PUSH
5825: EMPTY
5826: LIST
5827: LIST
5828: LIST
5829: LIST
5830: LIST
5831: LIST
5832: PUSH
5833: LD_INT 8
5835: PUSH
5836: LD_INT 158
5838: PUSH
5839: LD_INT 110
5841: PUSH
5842: LD_INT 4
5844: PUSH
5845: LD_INT 10
5847: PUSH
5848: LD_INT 15
5850: PUSH
5851: EMPTY
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: PUSH
5859: LD_INT 23
5861: PUSH
5862: LD_INT 154
5864: PUSH
5865: LD_INT 121
5867: PUSH
5868: LD_INT 5
5870: PUSH
5871: LD_INT 0
5873: PUSH
5874: LD_INT 0
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: PUSH
5885: LD_INT 20
5887: PUSH
5888: LD_INT 155
5890: PUSH
5891: LD_INT 118
5893: PUSH
5894: LD_INT 4
5896: PUSH
5897: LD_INT 0
5899: PUSH
5900: LD_INT 0
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: PUSH
5911: LD_INT 21
5913: PUSH
5914: LD_INT 151
5916: PUSH
5917: LD_INT 122
5919: PUSH
5920: LD_INT 0
5922: PUSH
5923: LD_INT 0
5925: PUSH
5926: LD_INT 0
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: LIST
5933: LIST
5934: LIST
5935: LIST
5936: PUSH
5937: LD_INT 18
5939: PUSH
5940: LD_INT 148
5942: PUSH
5943: LD_INT 118
5945: PUSH
5946: LD_INT 1
5948: PUSH
5949: LD_INT 0
5951: PUSH
5952: LD_INT 0
5954: PUSH
5955: EMPTY
5956: LIST
5957: LIST
5958: LIST
5959: LIST
5960: LIST
5961: LIST
5962: PUSH
5963: LD_INT 17
5965: PUSH
5966: LD_INT 147
5968: PUSH
5969: LD_INT 114
5971: PUSH
5972: LD_INT 2
5974: PUSH
5975: LD_INT 0
5977: PUSH
5978: LD_INT 0
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: PUSH
5989: LD_INT 29
5991: PUSH
5992: LD_INT 163
5994: PUSH
5995: LD_INT 120
5997: PUSH
5998: LD_INT 5
6000: PUSH
6001: LD_INT 0
6003: PUSH
6004: LD_INT 0
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: PUSH
6015: LD_INT 27
6017: PUSH
6018: LD_INT 137
6020: PUSH
6021: LD_INT 116
6023: PUSH
6024: LD_INT 3
6026: PUSH
6027: LD_INT 0
6029: PUSH
6030: LD_INT 0
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: PUSH
6041: LD_INT 27
6043: PUSH
6044: LD_INT 133
6046: PUSH
6047: LD_INT 111
6049: PUSH
6050: LD_INT 1
6052: PUSH
6053: LD_INT 0
6055: PUSH
6056: LD_INT 0
6058: PUSH
6059: EMPTY
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: LIST
6065: LIST
6066: PUSH
6067: LD_INT 27
6069: PUSH
6070: LD_INT 132
6072: PUSH
6073: LD_INT 106
6075: PUSH
6076: LD_INT 4
6078: PUSH
6079: LD_INT 0
6081: PUSH
6082: LD_INT 0
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: PUSH
6093: LD_INT 26
6095: PUSH
6096: LD_INT 137
6098: PUSH
6099: LD_INT 111
6101: PUSH
6102: LD_INT 0
6104: PUSH
6105: LD_INT 0
6107: PUSH
6108: LD_INT 0
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: PUSH
6119: LD_INT 8
6121: PUSH
6122: LD_INT 141
6124: PUSH
6125: LD_INT 117
6127: PUSH
6128: LD_INT 1
6130: PUSH
6131: LD_INT 13
6133: PUSH
6134: LD_INT 11
6136: PUSH
6137: EMPTY
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: PUSH
6145: LD_INT 30
6147: PUSH
6148: LD_INT 140
6150: PUSH
6151: LD_INT 128
6153: PUSH
6154: LD_INT 1
6156: PUSH
6157: LD_INT 0
6159: PUSH
6160: LD_INT 0
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: PUSH
6171: LD_INT 5
6173: PUSH
6174: LD_INT 146
6176: PUSH
6177: LD_INT 96
6179: PUSH
6180: LD_INT 3
6182: PUSH
6183: LD_INT 0
6185: PUSH
6186: LD_INT 0
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: PUSH
6197: LD_INT 32
6199: PUSH
6200: LD_INT 150
6202: PUSH
6203: LD_INT 98
6205: PUSH
6206: LD_INT 3
6208: PUSH
6209: LD_INT 0
6211: PUSH
6212: LD_INT 0
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: LIST
6219: LIST
6220: LIST
6221: LIST
6222: PUSH
6223: LD_INT 32
6225: PUSH
6226: LD_INT 142
6228: PUSH
6229: LD_INT 95
6231: PUSH
6232: LD_INT 3
6234: PUSH
6235: LD_INT 0
6237: PUSH
6238: LD_INT 0
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: PUSH
6249: LD_INT 32
6251: PUSH
6252: LD_INT 159
6254: PUSH
6255: LD_INT 104
6257: PUSH
6258: LD_INT 3
6260: PUSH
6261: LD_INT 0
6263: PUSH
6264: LD_INT 0
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: PUSH
6275: LD_INT 32
6277: PUSH
6278: LD_INT 133
6280: PUSH
6281: LD_INT 95
6283: PUSH
6284: LD_INT 3
6286: PUSH
6287: LD_INT 0
6289: PUSH
6290: LD_INT 0
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: PUSH
6301: LD_INT 32
6303: PUSH
6304: LD_INT 131
6306: PUSH
6307: LD_INT 102
6309: PUSH
6310: LD_INT 2
6312: PUSH
6313: LD_INT 0
6315: PUSH
6316: LD_INT 0
6318: PUSH
6319: EMPTY
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: PUSH
6327: LD_INT 32
6329: PUSH
6330: LD_INT 162
6332: PUSH
6333: LD_INT 134
6335: PUSH
6336: LD_INT 0
6338: PUSH
6339: LD_INT 0
6341: PUSH
6342: LD_INT 0
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: PUSH
6353: LD_INT 32
6355: PUSH
6356: LD_INT 149
6358: PUSH
6359: LD_INT 132
6361: PUSH
6362: LD_INT 0
6364: PUSH
6365: LD_INT 0
6367: PUSH
6368: LD_INT 0
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: PUSH
6379: LD_INT 26
6381: PUSH
6382: LD_INT 143
6384: PUSH
6385: LD_INT 122
6387: PUSH
6388: LD_INT 4
6390: PUSH
6391: LD_INT 0
6393: PUSH
6394: LD_INT 0
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: PUSH
6405: LD_INT 26
6407: PUSH
6408: LD_INT 164
6410: PUSH
6411: LD_INT 116
6413: PUSH
6414: LD_INT 2
6416: PUSH
6417: LD_INT 0
6419: PUSH
6420: LD_INT 0
6422: PUSH
6423: EMPTY
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: PUSH
6431: EMPTY
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: LIST
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: ST_TO_ADDR
// for i in tmp do
6458: LD_ADDR_VAR 0 2
6462: PUSH
6463: LD_VAR 0 5
6467: PUSH
6468: FOR_IN
6469: IFFALSE 6700
// begin uc_side := side ;
6471: LD_ADDR_OWVAR 20
6475: PUSH
6476: LD_VAR 0 7
6480: ST_TO_ADDR
// uc_nation := nation_arabian ;
6481: LD_ADDR_OWVAR 21
6485: PUSH
6486: LD_INT 2
6488: ST_TO_ADDR
// bc_type := i [ 1 ] ;
6489: LD_ADDR_OWVAR 42
6493: PUSH
6494: LD_VAR 0 2
6498: PUSH
6499: LD_INT 1
6501: ARRAY
6502: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
6503: LD_ADDR_OWVAR 43
6507: PUSH
6508: LD_INT 5
6510: PPUSH
6511: LD_INT 6
6513: PPUSH
6514: CALL_OW 12
6518: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
6519: LD_ADDR_OWVAR 44
6523: PUSH
6524: LD_VAR 0 2
6528: PUSH
6529: LD_INT 5
6531: ARRAY
6532: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
6533: LD_ADDR_OWVAR 45
6537: PUSH
6538: LD_VAR 0 2
6542: PUSH
6543: LD_INT 6
6545: ARRAY
6546: ST_TO_ADDR
// sr := 0 ;
6547: LD_ADDR_VAR 0 8
6551: PUSH
6552: LD_INT 0
6554: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
6555: LD_VAR 0 2
6559: PUSH
6560: LD_INT 1
6562: ARRAY
6563: PUSH
6564: LD_INT 29
6566: EQUAL
6567: IFFALSE 6579
// sr := mat_oil else
6569: LD_ADDR_VAR 0 8
6573: PUSH
6574: LD_INT 2
6576: ST_TO_ADDR
6577: GO 6601
// if i [ 1 ] = b_siberite_mine then
6579: LD_VAR 0 2
6583: PUSH
6584: LD_INT 1
6586: ARRAY
6587: PUSH
6588: LD_INT 30
6590: EQUAL
6591: IFFALSE 6601
// sr := mat_siberit ;
6593: LD_ADDR_VAR 0 8
6597: PUSH
6598: LD_INT 3
6600: ST_TO_ADDR
// if sr then
6601: LD_VAR 0 8
6605: IFFALSE 6661
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
6607: LD_VAR 0 2
6611: PUSH
6612: LD_INT 2
6614: ARRAY
6615: PPUSH
6616: LD_VAR 0 2
6620: PUSH
6621: LD_INT 3
6623: ARRAY
6624: PPUSH
6625: LD_VAR 0 8
6629: PPUSH
6630: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
6634: LD_VAR 0 2
6638: PUSH
6639: LD_INT 2
6641: ARRAY
6642: PPUSH
6643: LD_VAR 0 2
6647: PUSH
6648: LD_INT 3
6650: ARRAY
6651: PPUSH
6652: LD_VAR 0 7
6656: PPUSH
6657: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
6661: LD_ADDR_VAR 0 3
6665: PUSH
6666: LD_VAR 0 2
6670: PUSH
6671: LD_INT 2
6673: ARRAY
6674: PPUSH
6675: LD_VAR 0 2
6679: PUSH
6680: LD_INT 3
6682: ARRAY
6683: PPUSH
6684: LD_VAR 0 2
6688: PUSH
6689: LD_INT 4
6691: ARRAY
6692: PPUSH
6693: CALL_OW 47
6697: ST_TO_ADDR
// end ;
6698: GO 6468
6700: POP
6701: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6702: LD_ADDR_VAR 0 9
6706: PUSH
6707: LD_INT 22
6709: PUSH
6710: LD_VAR 0 7
6714: PUSH
6715: EMPTY
6716: LIST
6717: LIST
6718: PUSH
6719: LD_INT 30
6721: PUSH
6722: LD_INT 1
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: PPUSH
6733: CALL_OW 69
6737: ST_TO_ADDR
// if not depot then
6738: LD_VAR 0 9
6742: NOT
6743: IFFALSE 6747
// exit ;
6745: GO 6993
// base := PrepareBase ( depot [ 1 ] , legBase , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 5 ] ) ;
6747: LD_ADDR_VAR 0 10
6751: PUSH
6752: LD_VAR 0 9
6756: PUSH
6757: LD_INT 1
6759: ARRAY
6760: PPUSH
6761: LD_INT 6
6763: PPUSH
6764: LD_INT 0
6766: PPUSH
6767: LD_INT 6
6769: PUSH
6770: LD_INT 7
6772: PUSH
6773: LD_INT 8
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: LIST
6780: PUSH
6781: LD_OWVAR 67
6785: ARRAY
6786: PPUSH
6787: LD_INT 3000
6789: PUSH
6790: LD_INT 300
6792: PUSH
6793: LD_INT 100
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: LIST
6800: PPUSH
6801: LD_INT 12
6803: PUSH
6804: LD_INT 6
6806: PUSH
6807: LD_INT 6
6809: PUSH
6810: LD_INT 5
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: PPUSH
6819: CALL 29987 0 6
6823: ST_TO_ADDR
// if not base then
6824: LD_VAR 0 10
6828: NOT
6829: IFFALSE 6833
// exit ;
6831: GO 6993
// if Difficulty > 1 then
6833: LD_OWVAR 67
6837: PUSH
6838: LD_INT 1
6840: GREATER
6841: IFFALSE 6914
// begin InitHc ;
6843: CALL_OW 19
// PrepareHuman ( sex_male , class_sniper , [ 5 , 8 ] [ Difficulty - 1 ] ) ;
6847: LD_INT 1
6849: PPUSH
6850: LD_INT 5
6852: PPUSH
6853: LD_INT 5
6855: PUSH
6856: LD_INT 8
6858: PUSH
6859: EMPTY
6860: LIST
6861: LIST
6862: PUSH
6863: LD_OWVAR 67
6867: PUSH
6868: LD_INT 1
6870: MINUS
6871: ARRAY
6872: PPUSH
6873: CALL_OW 380
// for i = 1 to Difficulty do
6877: LD_ADDR_VAR 0 2
6881: PUSH
6882: DOUBLE
6883: LD_INT 1
6885: DEC
6886: ST_TO_ADDR
6887: LD_OWVAR 67
6891: PUSH
6892: FOR_TO
6893: IFFALSE 6912
// PlaceUnitArea ( CreateHuman , sniperGuardArea , false ) ;
6895: CALL_OW 44
6899: PPUSH
6900: LD_INT 24
6902: PPUSH
6903: LD_INT 0
6905: PPUSH
6906: CALL_OW 49
6910: GO 6892
6912: POP
6913: POP
// end ; mc_bases := Replace ( mc_bases , mc_leg , base ) ;
6914: LD_ADDR_EXP 36
6918: PUSH
6919: LD_EXP 36
6923: PPUSH
6924: LD_EXP 6
6928: PPUSH
6929: LD_VAR 0 10
6933: PPUSH
6934: CALL_OW 1
6938: ST_TO_ADDR
// hc_gallery := ru ;
6939: LD_ADDR_OWVAR 33
6943: PUSH
6944: LD_STRING ru
6946: ST_TO_ADDR
// hc_face_number := 44 ;
6947: LD_ADDR_OWVAR 34
6951: PUSH
6952: LD_INT 44
6954: ST_TO_ADDR
// hc_name := Robert Farmer ;
6955: LD_ADDR_OWVAR 26
6959: PUSH
6960: LD_STRING Robert Farmer
6962: ST_TO_ADDR
// hc_sex := sex_male ;
6963: LD_ADDR_OWVAR 27
6967: PUSH
6968: LD_INT 1
6970: ST_TO_ADDR
// hc_class := 1 ;
6971: LD_ADDR_OWVAR 28
6975: PUSH
6976: LD_INT 1
6978: ST_TO_ADDR
// Farmer := CreateHuman ;
6979: LD_ADDR_EXP 13
6983: PUSH
6984: CALL_OW 44
6988: ST_TO_ADDR
// InitHc ;
6989: CALL_OW 19
// end ;
6993: LD_VAR 0 1
6997: RET
// export function PrepareAmericans ; var i , b , tmp , side , sr , base , depot ; begin
6998: LD_INT 0
7000: PPUSH
7001: PPUSH
7002: PPUSH
7003: PPUSH
7004: PPUSH
7005: PPUSH
7006: PPUSH
7007: PPUSH
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , amerApe , 0 ) ;
7008: LD_INT 0
7010: PPUSH
7011: LD_INT 0
7013: PPUSH
7014: LD_INT 4
7016: PPUSH
7017: LD_INT 0
7019: PPUSH
7020: LD_INT 0
7022: PPUSH
7023: LD_INT 0
7025: PPUSH
7026: LD_INT 0
7028: PPUSH
7029: LD_INT 10
7031: PPUSH
7032: LD_INT 0
7034: PPUSH
7035: CALL 54368 0 9
// side := 4 ;
7039: LD_ADDR_VAR 0 5
7043: PUSH
7044: LD_INT 4
7046: ST_TO_ADDR
// SetTech ( tech_gun , side , state_researched ) ;
7047: LD_INT 39
7049: PPUSH
7050: LD_VAR 0 5
7054: PPUSH
7055: LD_INT 2
7057: PPUSH
7058: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
7062: LD_INT 34
7064: PPUSH
7065: LD_VAR 0 5
7069: PPUSH
7070: LD_INT 2
7072: PPUSH
7073: CALL_OW 322
// tmp := [ [ 1 , 144 , 18 , 4 , 0 , 0 ] , [ 3 , 137 , 8 , 4 , 0 , 0 ] , [ 20 , 141 , 8 , 4 , 0 , 0 ] , [ 19 , 137 , 5 , 3 , 0 , 0 ] , [ 18 , 137 , 12 , 0 , 0 , 0 ] , [ 17 , 133 , 4 , 2 , 0 , 0 ] , [ 16 , 140 , 11 , 5 , 0 , 0 ] , [ 8 , 149 , 26 , 4 , 10 , 15 ] , [ 8 , 142 , 26 , 1 , 11 , 12 ] , [ 27 , 153 , 32 , 5 , 0 , 0 ] , [ 27 , 145 , 32 , 3 , 0 , 0 ] , [ 27 , 138 , 2 , 4 , 0 , 0 ] , [ 27 , 144 , 13 , 0 , 0 , 0 ] , [ 26 , 124 , 2 , 4 , 0 , 0 ] , [ 26 , 121 , 2 , 2 , 0 , 0 ] , [ 26 , 118 , 2 , 1 , 0 , 0 ] , [ 29 , 159 , 47 , 2 , 0 , 0 ] , [ 32 , 146 , 41 , 0 , 0 , 0 ] , [ 33 , 136 , 37 , 0 , 0 , 0 ] , [ 33 , 132 , 34 , 0 , 0 , 0 ] , [ 36 , 124 , 7 , 1 , 0 , 0 ] , [ 5 , 124 , 19 , 0 , 0 , 0 ] , [ 32 , 127 , 23 , 0 , 0 , 0 ] ] ;
7077: LD_ADDR_VAR 0 4
7081: PUSH
7082: LD_INT 1
7084: PUSH
7085: LD_INT 144
7087: PUSH
7088: LD_INT 18
7090: PUSH
7091: LD_INT 4
7093: PUSH
7094: LD_INT 0
7096: PUSH
7097: LD_INT 0
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: PUSH
7108: LD_INT 3
7110: PUSH
7111: LD_INT 137
7113: PUSH
7114: LD_INT 8
7116: PUSH
7117: LD_INT 4
7119: PUSH
7120: LD_INT 0
7122: PUSH
7123: LD_INT 0
7125: PUSH
7126: EMPTY
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: PUSH
7134: LD_INT 20
7136: PUSH
7137: LD_INT 141
7139: PUSH
7140: LD_INT 8
7142: PUSH
7143: LD_INT 4
7145: PUSH
7146: LD_INT 0
7148: PUSH
7149: LD_INT 0
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: PUSH
7160: LD_INT 19
7162: PUSH
7163: LD_INT 137
7165: PUSH
7166: LD_INT 5
7168: PUSH
7169: LD_INT 3
7171: PUSH
7172: LD_INT 0
7174: PUSH
7175: LD_INT 0
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: PUSH
7186: LD_INT 18
7188: PUSH
7189: LD_INT 137
7191: PUSH
7192: LD_INT 12
7194: PUSH
7195: LD_INT 0
7197: PUSH
7198: LD_INT 0
7200: PUSH
7201: LD_INT 0
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: PUSH
7212: LD_INT 17
7214: PUSH
7215: LD_INT 133
7217: PUSH
7218: LD_INT 4
7220: PUSH
7221: LD_INT 2
7223: PUSH
7224: LD_INT 0
7226: PUSH
7227: LD_INT 0
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: PUSH
7238: LD_INT 16
7240: PUSH
7241: LD_INT 140
7243: PUSH
7244: LD_INT 11
7246: PUSH
7247: LD_INT 5
7249: PUSH
7250: LD_INT 0
7252: PUSH
7253: LD_INT 0
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: PUSH
7264: LD_INT 8
7266: PUSH
7267: LD_INT 149
7269: PUSH
7270: LD_INT 26
7272: PUSH
7273: LD_INT 4
7275: PUSH
7276: LD_INT 10
7278: PUSH
7279: LD_INT 15
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: LIST
7288: LIST
7289: PUSH
7290: LD_INT 8
7292: PUSH
7293: LD_INT 142
7295: PUSH
7296: LD_INT 26
7298: PUSH
7299: LD_INT 1
7301: PUSH
7302: LD_INT 11
7304: PUSH
7305: LD_INT 12
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: PUSH
7316: LD_INT 27
7318: PUSH
7319: LD_INT 153
7321: PUSH
7322: LD_INT 32
7324: PUSH
7325: LD_INT 5
7327: PUSH
7328: LD_INT 0
7330: PUSH
7331: LD_INT 0
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: LIST
7338: LIST
7339: LIST
7340: LIST
7341: PUSH
7342: LD_INT 27
7344: PUSH
7345: LD_INT 145
7347: PUSH
7348: LD_INT 32
7350: PUSH
7351: LD_INT 3
7353: PUSH
7354: LD_INT 0
7356: PUSH
7357: LD_INT 0
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: PUSH
7368: LD_INT 27
7370: PUSH
7371: LD_INT 138
7373: PUSH
7374: LD_INT 2
7376: PUSH
7377: LD_INT 4
7379: PUSH
7380: LD_INT 0
7382: PUSH
7383: LD_INT 0
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: PUSH
7394: LD_INT 27
7396: PUSH
7397: LD_INT 144
7399: PUSH
7400: LD_INT 13
7402: PUSH
7403: LD_INT 0
7405: PUSH
7406: LD_INT 0
7408: PUSH
7409: LD_INT 0
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: PUSH
7420: LD_INT 26
7422: PUSH
7423: LD_INT 124
7425: PUSH
7426: LD_INT 2
7428: PUSH
7429: LD_INT 4
7431: PUSH
7432: LD_INT 0
7434: PUSH
7435: LD_INT 0
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: PUSH
7446: LD_INT 26
7448: PUSH
7449: LD_INT 121
7451: PUSH
7452: LD_INT 2
7454: PUSH
7455: LD_INT 2
7457: PUSH
7458: LD_INT 0
7460: PUSH
7461: LD_INT 0
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: PUSH
7472: LD_INT 26
7474: PUSH
7475: LD_INT 118
7477: PUSH
7478: LD_INT 2
7480: PUSH
7481: LD_INT 1
7483: PUSH
7484: LD_INT 0
7486: PUSH
7487: LD_INT 0
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: PUSH
7498: LD_INT 29
7500: PUSH
7501: LD_INT 159
7503: PUSH
7504: LD_INT 47
7506: PUSH
7507: LD_INT 2
7509: PUSH
7510: LD_INT 0
7512: PUSH
7513: LD_INT 0
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: PUSH
7524: LD_INT 32
7526: PUSH
7527: LD_INT 146
7529: PUSH
7530: LD_INT 41
7532: PUSH
7533: LD_INT 0
7535: PUSH
7536: LD_INT 0
7538: PUSH
7539: LD_INT 0
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: PUSH
7550: LD_INT 33
7552: PUSH
7553: LD_INT 136
7555: PUSH
7556: LD_INT 37
7558: PUSH
7559: LD_INT 0
7561: PUSH
7562: LD_INT 0
7564: PUSH
7565: LD_INT 0
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: PUSH
7576: LD_INT 33
7578: PUSH
7579: LD_INT 132
7581: PUSH
7582: LD_INT 34
7584: PUSH
7585: LD_INT 0
7587: PUSH
7588: LD_INT 0
7590: PUSH
7591: LD_INT 0
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: PUSH
7602: LD_INT 36
7604: PUSH
7605: LD_INT 124
7607: PUSH
7608: LD_INT 7
7610: PUSH
7611: LD_INT 1
7613: PUSH
7614: LD_INT 0
7616: PUSH
7617: LD_INT 0
7619: PUSH
7620: EMPTY
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: PUSH
7628: LD_INT 5
7630: PUSH
7631: LD_INT 124
7633: PUSH
7634: LD_INT 19
7636: PUSH
7637: LD_INT 0
7639: PUSH
7640: LD_INT 0
7642: PUSH
7643: LD_INT 0
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: PUSH
7654: LD_INT 32
7656: PUSH
7657: LD_INT 127
7659: PUSH
7660: LD_INT 23
7662: PUSH
7663: LD_INT 0
7665: PUSH
7666: LD_INT 0
7668: PUSH
7669: LD_INT 0
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: ST_TO_ADDR
// for i in tmp do
7705: LD_ADDR_VAR 0 2
7709: PUSH
7710: LD_VAR 0 4
7714: PUSH
7715: FOR_IN
7716: IFFALSE 7947
// begin uc_side := side ;
7718: LD_ADDR_OWVAR 20
7722: PUSH
7723: LD_VAR 0 5
7727: ST_TO_ADDR
// uc_nation := nation_american ;
7728: LD_ADDR_OWVAR 21
7732: PUSH
7733: LD_INT 1
7735: ST_TO_ADDR
// bc_type := i [ 1 ] ;
7736: LD_ADDR_OWVAR 42
7740: PUSH
7741: LD_VAR 0 2
7745: PUSH
7746: LD_INT 1
7748: ARRAY
7749: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
7750: LD_ADDR_OWVAR 43
7754: PUSH
7755: LD_INT 5
7757: PPUSH
7758: LD_INT 6
7760: PPUSH
7761: CALL_OW 12
7765: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
7766: LD_ADDR_OWVAR 44
7770: PUSH
7771: LD_VAR 0 2
7775: PUSH
7776: LD_INT 5
7778: ARRAY
7779: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
7780: LD_ADDR_OWVAR 45
7784: PUSH
7785: LD_VAR 0 2
7789: PUSH
7790: LD_INT 6
7792: ARRAY
7793: ST_TO_ADDR
// sr := 0 ;
7794: LD_ADDR_VAR 0 6
7798: PUSH
7799: LD_INT 0
7801: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
7802: LD_VAR 0 2
7806: PUSH
7807: LD_INT 1
7809: ARRAY
7810: PUSH
7811: LD_INT 29
7813: EQUAL
7814: IFFALSE 7826
// sr := mat_oil else
7816: LD_ADDR_VAR 0 6
7820: PUSH
7821: LD_INT 2
7823: ST_TO_ADDR
7824: GO 7848
// if i [ 1 ] = b_siberite_mine then
7826: LD_VAR 0 2
7830: PUSH
7831: LD_INT 1
7833: ARRAY
7834: PUSH
7835: LD_INT 30
7837: EQUAL
7838: IFFALSE 7848
// sr := mat_siberit ;
7840: LD_ADDR_VAR 0 6
7844: PUSH
7845: LD_INT 3
7847: ST_TO_ADDR
// if sr then
7848: LD_VAR 0 6
7852: IFFALSE 7908
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
7854: LD_VAR 0 2
7858: PUSH
7859: LD_INT 2
7861: ARRAY
7862: PPUSH
7863: LD_VAR 0 2
7867: PUSH
7868: LD_INT 3
7870: ARRAY
7871: PPUSH
7872: LD_VAR 0 6
7876: PPUSH
7877: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
7881: LD_VAR 0 2
7885: PUSH
7886: LD_INT 2
7888: ARRAY
7889: PPUSH
7890: LD_VAR 0 2
7894: PUSH
7895: LD_INT 3
7897: ARRAY
7898: PPUSH
7899: LD_VAR 0 5
7903: PPUSH
7904: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
7908: LD_ADDR_VAR 0 3
7912: PUSH
7913: LD_VAR 0 2
7917: PUSH
7918: LD_INT 2
7920: ARRAY
7921: PPUSH
7922: LD_VAR 0 2
7926: PUSH
7927: LD_INT 3
7929: ARRAY
7930: PPUSH
7931: LD_VAR 0 2
7935: PUSH
7936: LD_INT 4
7938: ARRAY
7939: PPUSH
7940: CALL_OW 47
7944: ST_TO_ADDR
// end ;
7945: GO 7715
7947: POP
7948: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
7949: LD_ADDR_VAR 0 8
7953: PUSH
7954: LD_INT 22
7956: PUSH
7957: LD_VAR 0 5
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: PUSH
7966: LD_INT 30
7968: PUSH
7969: LD_INT 1
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: PPUSH
7980: CALL_OW 69
7984: ST_TO_ADDR
// if not depot then
7985: LD_VAR 0 8
7989: NOT
7990: IFFALSE 7994
// exit ;
7992: GO 8266
// base := PrepareBase ( depot [ 1 ] , amerBase , theta3 , [ 8 , 7 , 6 ] [ Difficulty ] , [ [ 2500 , 2000 , 1750 ] [ Difficulty ] , [ 300 , 250 , 200 ] [ Difficulty ] , [ 50 , 50 , 40 ] [ Difficulty ] ] , [ 7 , 6 , 5 , 5 ] ) ;
7994: LD_ADDR_VAR 0 7
7998: PUSH
7999: LD_VAR 0 8
8003: PUSH
8004: LD_INT 1
8006: ARRAY
8007: PPUSH
8008: LD_INT 3
8010: PPUSH
8011: LD_STRING theta3
8013: PPUSH
8014: LD_INT 8
8016: PUSH
8017: LD_INT 7
8019: PUSH
8020: LD_INT 6
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: LIST
8027: PUSH
8028: LD_OWVAR 67
8032: ARRAY
8033: PPUSH
8034: LD_INT 2500
8036: PUSH
8037: LD_INT 2000
8039: PUSH
8040: LD_INT 1750
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: LIST
8047: PUSH
8048: LD_OWVAR 67
8052: ARRAY
8053: PUSH
8054: LD_INT 300
8056: PUSH
8057: LD_INT 250
8059: PUSH
8060: LD_INT 200
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: LIST
8067: PUSH
8068: LD_OWVAR 67
8072: ARRAY
8073: PUSH
8074: LD_INT 50
8076: PUSH
8077: LD_INT 50
8079: PUSH
8080: LD_INT 40
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: LIST
8087: PUSH
8088: LD_OWVAR 67
8092: ARRAY
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: LIST
8098: PPUSH
8099: LD_INT 7
8101: PUSH
8102: LD_INT 6
8104: PUSH
8105: LD_INT 5
8107: PUSH
8108: LD_INT 5
8110: PUSH
8111: EMPTY
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: PPUSH
8117: CALL 29987 0 6
8121: ST_TO_ADDR
// if not base then
8122: LD_VAR 0 7
8126: NOT
8127: IFFALSE 8131
// exit ;
8129: GO 8266
// mc_bases := Replace ( mc_bases , mc_amer , base ) ;
8131: LD_ADDR_EXP 36
8135: PUSH
8136: LD_EXP 36
8140: PPUSH
8141: LD_EXP 5
8145: PPUSH
8146: LD_VAR 0 7
8150: PPUSH
8151: CALL_OW 1
8155: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
8156: LD_INT 1
8158: PPUSH
8159: LD_INT 1
8161: PPUSH
8162: LD_INT 7
8164: PPUSH
8165: CALL_OW 380
// allyCommander := CreateHuman ;
8169: LD_ADDR_EXP 11
8173: PUSH
8174: CALL_OW 44
8178: ST_TO_ADDR
// PlaceUnitXY ( allyCommander , 139 , 15 , false ) ;
8179: LD_EXP 11
8183: PPUSH
8184: LD_INT 139
8186: PPUSH
8187: LD_INT 15
8189: PPUSH
8190: LD_INT 0
8192: PPUSH
8193: CALL_OW 48
// ComTurnXY ( allyCommander , 137 , 15 ) ;
8197: LD_EXP 11
8201: PPUSH
8202: LD_INT 137
8204: PPUSH
8205: LD_INT 15
8207: PPUSH
8208: CALL_OW 118
// hc_gallery := us ;
8212: LD_ADDR_OWVAR 33
8216: PUSH
8217: LD_STRING us
8219: ST_TO_ADDR
// hc_face_number := 7 ;
8220: LD_ADDR_OWVAR 34
8224: PUSH
8225: LD_INT 7
8227: ST_TO_ADDR
// hc_name := Arthur Powell ;
8228: LD_ADDR_OWVAR 26
8232: PUSH
8233: LD_STRING Arthur Powell
8235: ST_TO_ADDR
// hc_sex := sex_male ;
8236: LD_ADDR_OWVAR 27
8240: PUSH
8241: LD_INT 1
8243: ST_TO_ADDR
// hc_class := 1 ;
8244: LD_ADDR_OWVAR 28
8248: PUSH
8249: LD_INT 1
8251: ST_TO_ADDR
// Powell := CreateHuman ;
8252: LD_ADDR_EXP 12
8256: PUSH
8257: CALL_OW 44
8261: ST_TO_ADDR
// InitHc ;
8262: CALL_OW 19
// end ;
8266: LD_VAR 0 1
8270: RET
// export function PreparePlayer ; var i , side , techs , tanks , cl , chassis , engines , weapons ; begin
8271: LD_INT 0
8273: PPUSH
8274: PPUSH
8275: PPUSH
8276: PPUSH
8277: PPUSH
8278: PPUSH
8279: PPUSH
8280: PPUSH
8281: PPUSH
// side := 1 ;
8282: LD_ADDR_VAR 0 3
8286: PUSH
8287: LD_INT 1
8289: ST_TO_ADDR
// result := [ [ ] , [ ] ] ;
8290: LD_ADDR_VAR 0 1
8294: PUSH
8295: EMPTY
8296: PUSH
8297: EMPTY
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: ST_TO_ADDR
// uc_side := side ;
8303: LD_ADDR_OWVAR 20
8307: PUSH
8308: LD_VAR 0 3
8312: ST_TO_ADDR
// uc_nation := nation_american ;
8313: LD_ADDR_OWVAR 21
8317: PUSH
8318: LD_INT 1
8320: ST_TO_ADDR
// InitHc ;
8321: CALL_OW 19
// InitVc ;
8325: CALL_OW 20
// hc_importance := 0 ;
8329: LD_ADDR_OWVAR 32
8333: PUSH
8334: LD_INT 0
8336: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked ] ;
8337: LD_ADDR_VAR 0 7
8341: PUSH
8342: LD_INT 2
8344: PUSH
8345: LD_INT 3
8347: PUSH
8348: LD_INT 3
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: LIST
8355: ST_TO_ADDR
// if commander = 2 then
8356: LD_EXP 25
8360: PUSH
8361: LD_INT 2
8363: EQUAL
8364: IFFALSE 8385
// chassis := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] ;
8366: LD_ADDR_VAR 0 7
8370: PUSH
8371: LD_INT 3
8373: PUSH
8374: LD_INT 4
8376: PUSH
8377: LD_INT 4
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: LIST
8384: ST_TO_ADDR
// if commander = 3 then
8385: LD_EXP 25
8389: PUSH
8390: LD_INT 3
8392: EQUAL
8393: IFFALSE 8414
// chassis := [ us_medium_wheeled , us_morphling , us_morphling ] ;
8395: LD_ADDR_VAR 0 7
8399: PUSH
8400: LD_INT 2
8402: PUSH
8403: LD_INT 5
8405: PUSH
8406: LD_INT 5
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: LIST
8413: ST_TO_ADDR
// engines := [ engine_solar , engine_solar , engine_combustion ] ;
8414: LD_ADDR_VAR 0 8
8418: PUSH
8419: LD_INT 2
8421: PUSH
8422: LD_INT 2
8424: PUSH
8425: LD_INT 1
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: LIST
8432: ST_TO_ADDR
// if commander = 2 then
8433: LD_EXP 25
8437: PUSH
8438: LD_INT 2
8440: EQUAL
8441: IFFALSE 8462
// engines := [ engine_combustion , engine_combustion , engine_siberite ] ;
8443: LD_ADDR_VAR 0 8
8447: PUSH
8448: LD_INT 1
8450: PUSH
8451: LD_INT 1
8453: PUSH
8454: LD_INT 3
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: LIST
8461: ST_TO_ADDR
// if commander = 3 then
8462: LD_EXP 25
8466: PUSH
8467: LD_INT 3
8469: EQUAL
8470: IFFALSE 8491
// engines := [ engine_siberite , engine_siberite , engine_combustion ] ;
8472: LD_ADDR_VAR 0 8
8476: PUSH
8477: LD_INT 3
8479: PUSH
8480: LD_INT 3
8482: PUSH
8483: LD_INT 1
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: LIST
8490: ST_TO_ADDR
// weapons := [ us_double_gun , us_light_gun , us_gatling_gun ] ;
8491: LD_ADDR_VAR 0 9
8495: PUSH
8496: LD_INT 5
8498: PUSH
8499: LD_INT 3
8501: PUSH
8502: LD_INT 4
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: LIST
8509: ST_TO_ADDR
// if commander = 2 then
8510: LD_EXP 25
8514: PUSH
8515: LD_INT 2
8517: EQUAL
8518: IFFALSE 8539
// weapons := [ us_rocket_launcher , us_double_gun , us_heavy_gun ] ;
8520: LD_ADDR_VAR 0 9
8524: PUSH
8525: LD_INT 7
8527: PUSH
8528: LD_INT 5
8530: PUSH
8531: LD_INT 6
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: LIST
8538: ST_TO_ADDR
// if commander = 3 then
8539: LD_EXP 25
8543: PUSH
8544: LD_INT 3
8546: EQUAL
8547: IFFALSE 8568
// weapons := [ us_laser , us_double_laser , us_rocket_launcher ] ;
8549: LD_ADDR_VAR 0 9
8553: PUSH
8554: LD_INT 9
8556: PUSH
8557: LD_INT 10
8559: PUSH
8560: LD_INT 7
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: LIST
8567: ST_TO_ADDR
// tanks := [ 5 , 5 , 4 ] [ Difficulty ] ;
8568: LD_ADDR_VAR 0 5
8572: PUSH
8573: LD_INT 5
8575: PUSH
8576: LD_INT 5
8578: PUSH
8579: LD_INT 4
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: LIST
8586: PUSH
8587: LD_OWVAR 67
8591: ARRAY
8592: ST_TO_ADDR
// if commander = 2 then
8593: LD_EXP 25
8597: PUSH
8598: LD_INT 2
8600: EQUAL
8601: IFFALSE 8617
// tanks := tanks + 3 ;
8603: LD_ADDR_VAR 0 5
8607: PUSH
8608: LD_VAR 0 5
8612: PUSH
8613: LD_INT 3
8615: PLUS
8616: ST_TO_ADDR
// for i = 1 to tanks do
8617: LD_ADDR_VAR 0 2
8621: PUSH
8622: DOUBLE
8623: LD_INT 1
8625: DEC
8626: ST_TO_ADDR
8627: LD_VAR 0 5
8631: PUSH
8632: FOR_TO
8633: IFFALSE 8743
// begin PrepareVehicle ( chassis [ i mod 3 + 1 ] , engines [ rand ( 1 , 3 ) ] , control_manual , weapons [ i mod 3 + 1 ] , rand ( 60 , 70 ) ) ;
8635: LD_VAR 0 7
8639: PUSH
8640: LD_VAR 0 2
8644: PUSH
8645: LD_INT 3
8647: MOD
8648: PUSH
8649: LD_INT 1
8651: PLUS
8652: ARRAY
8653: PPUSH
8654: LD_VAR 0 8
8658: PUSH
8659: LD_INT 1
8661: PPUSH
8662: LD_INT 3
8664: PPUSH
8665: CALL_OW 12
8669: ARRAY
8670: PPUSH
8671: LD_INT 1
8673: PPUSH
8674: LD_VAR 0 9
8678: PUSH
8679: LD_VAR 0 2
8683: PUSH
8684: LD_INT 3
8686: MOD
8687: PUSH
8688: LD_INT 1
8690: PLUS
8691: ARRAY
8692: PPUSH
8693: LD_INT 60
8695: PPUSH
8696: LD_INT 70
8698: PPUSH
8699: CALL_OW 12
8703: PPUSH
8704: CALL 26578 0 5
// result := Replace ( result , 1 , result [ 1 ] ^ CreateVehicle ) ;
8708: LD_ADDR_VAR 0 1
8712: PUSH
8713: LD_VAR 0 1
8717: PPUSH
8718: LD_INT 1
8720: PPUSH
8721: LD_VAR 0 1
8725: PUSH
8726: LD_INT 1
8728: ARRAY
8729: PUSH
8730: CALL_OW 45
8734: ADD
8735: PPUSH
8736: CALL_OW 1
8740: ST_TO_ADDR
// end ;
8741: GO 8632
8743: POP
8744: POP
// cl := 1 ;
8745: LD_ADDR_VAR 0 6
8749: PUSH
8750: LD_INT 1
8752: ST_TO_ADDR
// for i = 1 to 10 do
8753: LD_ADDR_VAR 0 2
8757: PUSH
8758: DOUBLE
8759: LD_INT 1
8761: DEC
8762: ST_TO_ADDR
8763: LD_INT 10
8765: PUSH
8766: FOR_TO
8767: IFFALSE 8882
// begin if i mod 4 = 0 then
8769: LD_VAR 0 2
8773: PUSH
8774: LD_INT 4
8776: MOD
8777: PUSH
8778: LD_INT 0
8780: EQUAL
8781: IFFALSE 8797
// cl := cl + 1 ;
8783: LD_ADDR_VAR 0 6
8787: PUSH
8788: LD_VAR 0 6
8792: PUSH
8793: LD_INT 1
8795: PLUS
8796: ST_TO_ADDR
// if cl = 2 then
8797: LD_VAR 0 6
8801: PUSH
8802: LD_INT 2
8804: EQUAL
8805: IFFALSE 8815
// cl := 3 ;
8807: LD_ADDR_VAR 0 6
8811: PUSH
8812: LD_INT 3
8814: ST_TO_ADDR
// PrepareHuman ( false , cl , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
8815: LD_INT 0
8817: PPUSH
8818: LD_VAR 0 6
8822: PPUSH
8823: LD_INT 6
8825: PUSH
8826: LD_INT 6
8828: PUSH
8829: LD_INT 5
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: LIST
8836: PUSH
8837: LD_OWVAR 67
8841: ARRAY
8842: PPUSH
8843: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
8847: LD_ADDR_VAR 0 1
8851: PUSH
8852: LD_VAR 0 1
8856: PPUSH
8857: LD_INT 2
8859: PPUSH
8860: LD_VAR 0 1
8864: PUSH
8865: LD_INT 2
8867: ARRAY
8868: PUSH
8869: CALL_OW 44
8873: ADD
8874: PPUSH
8875: CALL_OW 1
8879: ST_TO_ADDR
// end ;
8880: GO 8766
8882: POP
8883: POP
// if commander = 1 then
8884: LD_EXP 25
8888: PUSH
8889: LD_INT 1
8891: EQUAL
8892: IFFALSE 8960
// for i = 1 to 4 do
8894: LD_ADDR_VAR 0 2
8898: PUSH
8899: DOUBLE
8900: LD_INT 1
8902: DEC
8903: ST_TO_ADDR
8904: LD_INT 4
8906: PUSH
8907: FOR_TO
8908: IFFALSE 8958
// begin PrepareHuman ( false , class_soldier , 8 ) ;
8910: LD_INT 0
8912: PPUSH
8913: LD_INT 1
8915: PPUSH
8916: LD_INT 8
8918: PPUSH
8919: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
8923: LD_ADDR_VAR 0 1
8927: PUSH
8928: LD_VAR 0 1
8932: PPUSH
8933: LD_INT 2
8935: PPUSH
8936: LD_VAR 0 1
8940: PUSH
8941: LD_INT 2
8943: ARRAY
8944: PUSH
8945: CALL_OW 44
8949: ADD
8950: PPUSH
8951: CALL_OW 1
8955: ST_TO_ADDR
// end ;
8956: GO 8907
8958: POP
8959: POP
// techs := [ ] ;
8960: LD_ADDR_VAR 0 4
8964: PUSH
8965: EMPTY
8966: ST_TO_ADDR
// if commander = 1 then
8967: LD_EXP 25
8971: PUSH
8972: LD_INT 1
8974: EQUAL
8975: IFFALSE 9000
// techs := [ tech_weap1 , tech_weap2 , tech_weap3 , tech_lasSight ] ;
8977: LD_ADDR_VAR 0 4
8981: PUSH
8982: LD_INT 51
8984: PUSH
8985: LD_INT 52
8987: PUSH
8988: LD_INT 53
8990: PUSH
8991: LD_INT 12
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: ST_TO_ADDR
// if commander = 2 then
9000: LD_EXP 25
9004: PUSH
9005: LD_INT 2
9007: EQUAL
9008: IFFALSE 9045
// techs := [ tech_tech1 , tech_oilEng , tech_oilPow , tech_solEng , tech_solPow , tech_opto1 , tech_radar ] ;
9010: LD_ADDR_VAR 0 4
9014: PUSH
9015: LD_INT 48
9017: PUSH
9018: LD_INT 47
9020: PUSH
9021: LD_INT 46
9023: PUSH
9024: LD_INT 45
9026: PUSH
9027: LD_INT 35
9029: PUSH
9030: LD_INT 60
9032: PUSH
9033: LD_INT 6
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: ST_TO_ADDR
// if commander = 3 then
9045: LD_EXP 25
9049: PUSH
9050: LD_INT 3
9052: EQUAL
9053: IFFALSE 9102
// techs := [ tech_advAI , tech_advchassis , tech_ai , tech_comp1 , tech_comp2 , tech_oilEng , tech_oilPow , tech_weap1 , tech_gatling , tech_gun ] ;
9055: LD_ADDR_VAR 0 4
9059: PUSH
9060: LD_INT 27
9062: PUSH
9063: LD_INT 36
9065: PUSH
9066: LD_INT 32
9068: PUSH
9069: LD_INT 57
9071: PUSH
9072: LD_INT 58
9074: PUSH
9075: LD_INT 47
9077: PUSH
9078: LD_INT 46
9080: PUSH
9081: LD_INT 51
9083: PUSH
9084: LD_INT 69
9086: PUSH
9087: LD_INT 39
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: ST_TO_ADDR
// if techs then
9102: LD_VAR 0 4
9106: IFFALSE 9140
// for i in techs do
9108: LD_ADDR_VAR 0 2
9112: PUSH
9113: LD_VAR 0 4
9117: PUSH
9118: FOR_IN
9119: IFFALSE 9138
// SetTech ( i , 1 , state_researched ) ;
9121: LD_VAR 0 2
9125: PPUSH
9126: LD_INT 1
9128: PPUSH
9129: LD_INT 2
9131: PPUSH
9132: CALL_OW 322
9136: GO 9118
9138: POP
9139: POP
// hc_gallery := skirmish ;
9140: LD_ADDR_OWVAR 33
9144: PUSH
9145: LD_STRING skirmish
9147: ST_TO_ADDR
// hc_face_number := commander ;
9148: LD_ADDR_OWVAR 34
9152: PUSH
9153: LD_EXP 25
9157: ST_TO_ADDR
// hc_importance := 100 ;
9158: LD_ADDR_OWVAR 32
9162: PUSH
9163: LD_INT 100
9165: ST_TO_ADDR
// case commander of 1 :
9166: LD_EXP 25
9170: PUSH
9171: LD_INT 1
9173: DOUBLE
9174: EQUAL
9175: IFTRUE 9179
9177: GO 9203
9179: POP
// begin hc_name := Jeff Ironside ;
9180: LD_ADDR_OWVAR 26
9184: PUSH
9185: LD_STRING Jeff Ironside
9187: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
9188: LD_INT 1
9190: PPUSH
9191: LD_INT 1
9193: PPUSH
9194: LD_INT 7
9196: PPUSH
9197: CALL_OW 380
// end ; 2 :
9201: GO 9268
9203: LD_INT 2
9205: DOUBLE
9206: EQUAL
9207: IFTRUE 9211
9209: GO 9235
9211: POP
// begin hc_name := Paul Johnson ;
9212: LD_ADDR_OWVAR 26
9216: PUSH
9217: LD_STRING Paul Johnson
9219: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 7 ) ;
9220: LD_INT 1
9222: PPUSH
9223: LD_INT 3
9225: PPUSH
9226: LD_INT 7
9228: PPUSH
9229: CALL_OW 380
// end ; 3 :
9233: GO 9268
9235: LD_INT 3
9237: DOUBLE
9238: EQUAL
9239: IFTRUE 9243
9241: GO 9267
9243: POP
// begin hc_name := Lisa Stuart ;
9244: LD_ADDR_OWVAR 26
9248: PUSH
9249: LD_STRING Lisa Stuart
9251: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 7 ) ;
9252: LD_INT 2
9254: PPUSH
9255: LD_INT 4
9257: PPUSH
9258: LD_INT 7
9260: PPUSH
9261: CALL_OW 380
// end ; end ;
9265: GO 9268
9267: POP
// playerCommander := CreateHuman ;
9268: LD_ADDR_EXP 9
9272: PUSH
9273: CALL_OW 44
9277: ST_TO_ADDR
// hc_importance := 0 ;
9278: LD_ADDR_OWVAR 32
9282: PUSH
9283: LD_INT 0
9285: ST_TO_ADDR
// hc_gallery :=  ;
9286: LD_ADDR_OWVAR 33
9290: PUSH
9291: LD_STRING 
9293: ST_TO_ADDR
// result := Replace ( result , 2 , result [ 2 ] ^ playerCommander ) ;
9294: LD_ADDR_VAR 0 1
9298: PUSH
9299: LD_VAR 0 1
9303: PPUSH
9304: LD_INT 2
9306: PPUSH
9307: LD_VAR 0 1
9311: PUSH
9312: LD_INT 2
9314: ARRAY
9315: PUSH
9316: LD_EXP 9
9320: ADD
9321: PPUSH
9322: CALL_OW 1
9326: ST_TO_ADDR
// end ;
9327: LD_VAR 0 1
9331: RET
// export function PrepareReinforcements ; var i , peopleAmount , tmp , un , veh ; begin
9332: LD_INT 0
9334: PPUSH
9335: PPUSH
9336: PPUSH
9337: PPUSH
9338: PPUSH
9339: PPUSH
// uc_side := 1 ;
9340: LD_ADDR_OWVAR 20
9344: PUSH
9345: LD_INT 1
9347: ST_TO_ADDR
// uc_nation := 1 ;
9348: LD_ADDR_OWVAR 21
9352: PUSH
9353: LD_INT 1
9355: ST_TO_ADDR
// InitHc ;
9356: CALL_OW 19
// peopleAmount := [ 3 , 3 , 2 ] [ Difficulty ] ;
9360: LD_ADDR_VAR 0 3
9364: PUSH
9365: LD_INT 3
9367: PUSH
9368: LD_INT 3
9370: PUSH
9371: LD_INT 2
9373: PUSH
9374: EMPTY
9375: LIST
9376: LIST
9377: LIST
9378: PUSH
9379: LD_OWVAR 67
9383: ARRAY
9384: ST_TO_ADDR
// for i = 1 to peopleAmount do
9385: LD_ADDR_VAR 0 2
9389: PUSH
9390: DOUBLE
9391: LD_INT 1
9393: DEC
9394: ST_TO_ADDR
9395: LD_VAR 0 3
9399: PUSH
9400: FOR_TO
9401: IFFALSE 9450
// begin PrepareHuman ( false , 2 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9403: LD_INT 0
9405: PPUSH
9406: LD_INT 2
9408: PPUSH
9409: LD_INT 7
9411: PUSH
9412: LD_INT 6
9414: PUSH
9415: LD_INT 5
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: LIST
9422: PUSH
9423: LD_OWVAR 67
9427: ARRAY
9428: PPUSH
9429: CALL_OW 380
// PlaceUnitInArea ( CreateHuman , startArea , false ) ;
9433: CALL_OW 44
9437: PPUSH
9438: LD_INT 19
9440: PPUSH
9441: LD_INT 0
9443: PPUSH
9444: CALL 61213 0 3
// end ;
9448: GO 9400
9450: POP
9451: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_crane , 58 ) ;
9452: LD_INT 2
9454: PPUSH
9455: LD_INT 1
9457: PPUSH
9458: LD_INT 3
9460: PPUSH
9461: LD_INT 13
9463: PPUSH
9464: LD_INT 58
9466: PPUSH
9467: CALL 26578 0 5
// PlaceUnitInArea ( CreateVehicle , startArea , false ) ;
9471: CALL_OW 45
9475: PPUSH
9476: LD_INT 19
9478: PPUSH
9479: LD_INT 0
9481: PPUSH
9482: CALL 61213 0 3
// if commander = 1 then
9486: LD_EXP 25
9490: PUSH
9491: LD_INT 1
9493: EQUAL
9494: IFFALSE 9505
// wait ( 6 6$00 ) else
9496: LD_INT 12600
9498: PPUSH
9499: CALL_OW 67
9503: GO 9512
// wait ( 8 8$00 ) ;
9505: LD_INT 16800
9507: PPUSH
9508: CALL_OW 67
// uc_side := 1 ;
9512: LD_ADDR_OWVAR 20
9516: PUSH
9517: LD_INT 1
9519: ST_TO_ADDR
// uc_nation := 1 ;
9520: LD_ADDR_OWVAR 21
9524: PUSH
9525: LD_INT 1
9527: ST_TO_ADDR
// InitVc ;
9528: CALL_OW 20
// InitHc ;
9532: CALL_OW 19
// for i = 1 to 5 do
9536: LD_ADDR_VAR 0 2
9540: PUSH
9541: DOUBLE
9542: LD_INT 1
9544: DEC
9545: ST_TO_ADDR
9546: LD_INT 5
9548: PUSH
9549: FOR_TO
9550: IFFALSE 9794
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_light_wheeled ] [ i mod 3 + 1 ] , engine_combustion , [ control_manual , control_computer , control_computer ] [ i mod 3 + 1 ] , [ us_heavy_gun , us_cargo_bay , us_radar ] [ i mod 3 + 1 ] , rand ( 40 , 55 ) ) ;
9552: LD_INT 4
9554: PUSH
9555: LD_INT 3
9557: PUSH
9558: LD_INT 1
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: LIST
9565: PUSH
9566: LD_VAR 0 2
9570: PUSH
9571: LD_INT 3
9573: MOD
9574: PUSH
9575: LD_INT 1
9577: PLUS
9578: ARRAY
9579: PPUSH
9580: LD_INT 1
9582: PPUSH
9583: LD_INT 1
9585: PUSH
9586: LD_INT 3
9588: PUSH
9589: LD_INT 3
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: LIST
9596: PUSH
9597: LD_VAR 0 2
9601: PUSH
9602: LD_INT 3
9604: MOD
9605: PUSH
9606: LD_INT 1
9608: PLUS
9609: ARRAY
9610: PPUSH
9611: LD_INT 6
9613: PUSH
9614: LD_INT 12
9616: PUSH
9617: LD_INT 11
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: LIST
9624: PUSH
9625: LD_VAR 0 2
9629: PUSH
9630: LD_INT 3
9632: MOD
9633: PUSH
9634: LD_INT 1
9636: PLUS
9637: ARRAY
9638: PPUSH
9639: LD_INT 40
9641: PPUSH
9642: LD_INT 55
9644: PPUSH
9645: CALL_OW 12
9649: PPUSH
9650: CALL 26578 0 5
// veh := CreateVehicle ;
9654: LD_ADDR_VAR 0 6
9658: PUSH
9659: CALL_OW 45
9663: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
9664: LD_VAR 0 6
9668: PPUSH
9669: LD_INT 19
9671: PPUSH
9672: LD_INT 0
9674: PPUSH
9675: CALL 61213 0 3
// if GetWeapon ( veh ) = us_cargo_bay then
9679: LD_VAR 0 6
9683: PPUSH
9684: CALL_OW 264
9688: PUSH
9689: LD_INT 12
9691: EQUAL
9692: IFFALSE 9724
// begin AddCargo ( veh , mat_cans , 70 ) ;
9694: LD_VAR 0 6
9698: PPUSH
9699: LD_INT 1
9701: PPUSH
9702: LD_INT 70
9704: PPUSH
9705: CALL_OW 291
// AddCargo ( veh , mat_siberit , 30 ) ;
9709: LD_VAR 0 6
9713: PPUSH
9714: LD_INT 3
9716: PPUSH
9717: LD_INT 30
9719: PPUSH
9720: CALL_OW 291
// end ; if GetControl ( veh ) = control_manual then
9724: LD_VAR 0 6
9728: PPUSH
9729: CALL_OW 263
9733: PUSH
9734: LD_INT 1
9736: EQUAL
9737: IFFALSE 9792
// begin PrepareHuman ( sex_male , 3 , 6 ) ;
9739: LD_INT 1
9741: PPUSH
9742: LD_INT 3
9744: PPUSH
9745: LD_INT 6
9747: PPUSH
9748: CALL_OW 380
// un := CreateHuman ;
9752: LD_ADDR_VAR 0 5
9756: PUSH
9757: CALL_OW 44
9761: ST_TO_ADDR
// tmp := tmp ^ un ;
9762: LD_ADDR_VAR 0 4
9766: PUSH
9767: LD_VAR 0 4
9771: PUSH
9772: LD_VAR 0 5
9776: ADD
9777: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9778: LD_VAR 0 5
9782: PPUSH
9783: LD_VAR 0 6
9787: PPUSH
9788: CALL_OW 52
// end ; end ;
9792: GO 9549
9794: POP
9795: POP
// if tmp then
9796: LD_VAR 0 4
9800: IFFALSE 9864
// begin CenterNowOnUnits ( tmp ) ;
9802: LD_VAR 0 4
9806: PPUSH
9807: CALL_OW 87
// Say ( tmp [ 1 ] , DAR-1 ) ;
9811: LD_VAR 0 4
9815: PUSH
9816: LD_INT 1
9818: ARRAY
9819: PPUSH
9820: LD_STRING DAR-1
9822: PPUSH
9823: CALL_OW 88
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-DAR ) ;
9827: LD_EXP 9
9831: PPUSH
9832: LD_STRING D
9834: PUSH
9835: LD_STRING I
9837: PUSH
9838: LD_STRING J
9840: PUSH
9841: LD_STRING S
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: LIST
9848: PUSH
9849: LD_EXP 25
9853: ARRAY
9854: STR
9855: PUSH
9856: LD_STRING -1-DAR
9858: STR
9859: PPUSH
9860: CALL_OW 88
// end ; if not reinforceAllowed then
9864: LD_EXP 24
9868: NOT
9869: IFFALSE 9873
// exit ;
9871: GO 10027
// wait ( 25 25$00 ) ;
9873: LD_INT 52500
9875: PPUSH
9876: CALL_OW 67
// uc_side := 1 ;
9880: LD_ADDR_OWVAR 20
9884: PUSH
9885: LD_INT 1
9887: ST_TO_ADDR
// uc_nation := 1 ;
9888: LD_ADDR_OWVAR 21
9892: PUSH
9893: LD_INT 1
9895: ST_TO_ADDR
// InitVc ;
9896: CALL_OW 20
// InitHc ;
9900: CALL_OW 19
// for i = 1 to 4 do
9904: LD_ADDR_VAR 0 2
9908: PUSH
9909: DOUBLE
9910: LD_INT 1
9912: DEC
9913: ST_TO_ADDR
9914: LD_INT 4
9916: PUSH
9917: FOR_TO
9918: IFFALSE 10025
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 1 ) ;
9920: LD_INT 5
9922: PPUSH
9923: LD_INT 3
9925: PPUSH
9926: LD_INT 1
9928: PPUSH
9929: LD_INT 6
9931: PPUSH
9932: LD_INT 1
9934: PPUSH
9935: CALL 26578 0 5
// veh := CreateVehicle ;
9939: LD_ADDR_VAR 0 6
9943: PUSH
9944: CALL_OW 45
9948: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
9949: LD_VAR 0 6
9953: PPUSH
9954: LD_INT 19
9956: PPUSH
9957: LD_INT 0
9959: PPUSH
9960: CALL 61213 0 3
// if GetControl ( veh ) = control_manual then
9964: LD_VAR 0 6
9968: PPUSH
9969: CALL_OW 263
9973: PUSH
9974: LD_INT 1
9976: EQUAL
9977: IFFALSE 10023
// begin PrepareHuman ( false , 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9979: LD_INT 0
9981: PPUSH
9982: LD_INT 3
9984: PPUSH
9985: LD_INT 7
9987: PUSH
9988: LD_INT 6
9990: PUSH
9991: LD_INT 5
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: LIST
9998: PUSH
9999: LD_OWVAR 67
10003: ARRAY
10004: PPUSH
10005: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10009: CALL_OW 44
10013: PPUSH
10014: LD_VAR 0 6
10018: PPUSH
10019: CALL_OW 52
// end ; end ;
10023: GO 9917
10025: POP
10026: POP
// end ;
10027: LD_VAR 0 1
10031: RET
// export function PrepareLegionReinforcements ; var i , un , j , tmp ; begin
10032: LD_INT 0
10034: PPUSH
10035: PPUSH
10036: PPUSH
10037: PPUSH
10038: PPUSH
// uc_side := 8 ;
10039: LD_ADDR_OWVAR 20
10043: PUSH
10044: LD_INT 8
10046: ST_TO_ADDR
// uc_nation := nation_arabian ;
10047: LD_ADDR_OWVAR 21
10051: PUSH
10052: LD_INT 2
10054: ST_TO_ADDR
// for i = 1 to 2 do
10055: LD_ADDR_VAR 0 2
10059: PUSH
10060: DOUBLE
10061: LD_INT 1
10063: DEC
10064: ST_TO_ADDR
10065: LD_INT 2
10067: PUSH
10068: FOR_TO
10069: IFFALSE 10149
// for j = 1 to 4 do
10071: LD_ADDR_VAR 0 4
10075: PUSH
10076: DOUBLE
10077: LD_INT 1
10079: DEC
10080: ST_TO_ADDR
10081: LD_INT 4
10083: PUSH
10084: FOR_TO
10085: IFFALSE 10145
// begin PrepareHuman ( false , j , 8 ) ;
10087: LD_INT 0
10089: PPUSH
10090: LD_VAR 0 4
10094: PPUSH
10095: LD_INT 8
10097: PPUSH
10098: CALL_OW 380
// un := CreateHuman ;
10102: LD_ADDR_VAR 0 3
10106: PUSH
10107: CALL_OW 44
10111: ST_TO_ADDR
// PlaceUnitArea ( un , legionSpawn , false ) ;
10112: LD_VAR 0 3
10116: PPUSH
10117: LD_INT 23
10119: PPUSH
10120: LD_INT 0
10122: PPUSH
10123: CALL_OW 49
// tmp := tmp union un ;
10127: LD_ADDR_VAR 0 5
10131: PUSH
10132: LD_VAR 0 5
10136: PUSH
10137: LD_VAR 0 3
10141: UNION
10142: ST_TO_ADDR
// end ;
10143: GO 10084
10145: POP
10146: POP
10147: GO 10068
10149: POP
10150: POP
// for i in tmp do
10151: LD_ADDR_VAR 0 2
10155: PUSH
10156: LD_VAR 0 5
10160: PUSH
10161: FOR_IN
10162: IFFALSE 10181
// ComMoveXY ( i , 150 , 136 ) ;
10164: LD_VAR 0 2
10168: PPUSH
10169: LD_INT 150
10171: PPUSH
10172: LD_INT 136
10174: PPUSH
10175: CALL_OW 111
10179: GO 10161
10181: POP
10182: POP
// mc_bases := Replace ( mc_bases , mc_leg , mc_bases [ mc_leg ] union tmp ) ;
10183: LD_ADDR_EXP 36
10187: PUSH
10188: LD_EXP 36
10192: PPUSH
10193: LD_EXP 6
10197: PPUSH
10198: LD_EXP 36
10202: PUSH
10203: LD_EXP 6
10207: ARRAY
10208: PUSH
10209: LD_VAR 0 5
10213: UNION
10214: PPUSH
10215: CALL_OW 1
10219: ST_TO_ADDR
// end ;
10220: LD_VAR 0 1
10224: RET
// every 0 0$10 trigger GetTech ( tech_lapser , 3 ) = state_researched do
10225: LD_INT 31
10227: PPUSH
10228: LD_INT 3
10230: PPUSH
10231: CALL_OW 321
10235: PUSH
10236: LD_INT 2
10238: EQUAL
10239: IFFALSE 10369
10241: GO 10243
10243: DISABLE
// begin MC_InsertBuildingList ( mc_rus_2 , [ [ b_turret , 78 , 151 , 5 ] , [ b_turret , 101 , 159 , 5 ] , [ b_turret , 105 , 158 , 5 ] , [ b_turret , 96 , 136 , 5 ] , [ b_turret , 94 , 133 , 4 ] , [ b_turret , 84 , 102 , 4 ] ] ) ;
10244: LD_EXP 8
10248: PPUSH
10249: LD_INT 33
10251: PUSH
10252: LD_INT 78
10254: PUSH
10255: LD_INT 151
10257: PUSH
10258: LD_INT 5
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: PUSH
10267: LD_INT 33
10269: PUSH
10270: LD_INT 101
10272: PUSH
10273: LD_INT 159
10275: PUSH
10276: LD_INT 5
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: PUSH
10285: LD_INT 33
10287: PUSH
10288: LD_INT 105
10290: PUSH
10291: LD_INT 158
10293: PUSH
10294: LD_INT 5
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: PUSH
10303: LD_INT 33
10305: PUSH
10306: LD_INT 96
10308: PUSH
10309: LD_INT 136
10311: PUSH
10312: LD_INT 5
10314: PUSH
10315: EMPTY
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: PUSH
10321: LD_INT 33
10323: PUSH
10324: LD_INT 94
10326: PUSH
10327: LD_INT 133
10329: PUSH
10330: LD_INT 4
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: PUSH
10339: LD_INT 33
10341: PUSH
10342: LD_INT 84
10344: PUSH
10345: LD_INT 102
10347: PUSH
10348: LD_INT 4
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: PPUSH
10365: CALL 85731 0 2
// end ; end_of_file
10369: END
// export function Action ; var i , tmp ; begin
10370: LD_INT 0
10372: PPUSH
10373: PPUSH
10374: PPUSH
// InGameOn ;
10375: CALL_OW 8
// CenterNowOnXY ( 225 , 217 ) ;
10379: LD_INT 225
10381: PPUSH
10382: LD_INT 217
10384: PPUSH
10385: CALL_OW 86
// for i in playerForces [ 2 ] do
10389: LD_ADDR_VAR 0 2
10393: PUSH
10394: LD_EXP 10
10398: PUSH
10399: LD_INT 2
10401: ARRAY
10402: PUSH
10403: FOR_IN
10404: IFFALSE 10537
// begin if playerForces [ 1 ] and GetClass ( i ) in [ 3 , 4 ] then
10406: LD_EXP 10
10410: PUSH
10411: LD_INT 1
10413: ARRAY
10414: PUSH
10415: LD_VAR 0 2
10419: PPUSH
10420: CALL_OW 257
10424: PUSH
10425: LD_INT 3
10427: PUSH
10428: LD_INT 4
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: IN
10435: AND
10436: IFFALSE 10520
// begin PlaceUnitInArea ( playerForces [ 1 ] [ 1 ] , startArea , false ) ;
10438: LD_EXP 10
10442: PUSH
10443: LD_INT 1
10445: ARRAY
10446: PUSH
10447: LD_INT 1
10449: ARRAY
10450: PPUSH
10451: LD_INT 19
10453: PPUSH
10454: LD_INT 0
10456: PPUSH
10457: CALL 61213 0 3
// PlaceHumanInUnit ( i , playerForces [ 1 ] [ 1 ] ) ;
10461: LD_VAR 0 2
10465: PPUSH
10466: LD_EXP 10
10470: PUSH
10471: LD_INT 1
10473: ARRAY
10474: PUSH
10475: LD_INT 1
10477: ARRAY
10478: PPUSH
10479: CALL_OW 52
// playerForces := Replace ( playerForces , 1 , Delete ( playerForces [ 1 ] , 1 ) ) ;
10483: LD_ADDR_EXP 10
10487: PUSH
10488: LD_EXP 10
10492: PPUSH
10493: LD_INT 1
10495: PPUSH
10496: LD_EXP 10
10500: PUSH
10501: LD_INT 1
10503: ARRAY
10504: PPUSH
10505: LD_INT 1
10507: PPUSH
10508: CALL_OW 3
10512: PPUSH
10513: CALL_OW 1
10517: ST_TO_ADDR
// end else
10518: GO 10535
// PlaceUnitInArea ( i , startArea , false ) ;
10520: LD_VAR 0 2
10524: PPUSH
10525: LD_INT 19
10527: PPUSH
10528: LD_INT 0
10530: PPUSH
10531: CALL 61213 0 3
// end ;
10535: GO 10403
10537: POP
10538: POP
// wait ( 0 0$2 ) ;
10539: LD_INT 70
10541: PPUSH
10542: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1 ) ;
10546: LD_EXP 9
10550: PPUSH
10551: LD_STRING D
10553: PUSH
10554: LD_STRING I
10556: PUSH
10557: LD_STRING J
10559: PUSH
10560: LD_STRING S
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: LIST
10567: PUSH
10568: LD_EXP 25
10572: ARRAY
10573: STR
10574: PUSH
10575: LD_STRING -1
10577: STR
10578: PPUSH
10579: CALL_OW 88
// SayRadio ( Powell , DP-1 ) ;
10583: LD_EXP 12
10587: PPUSH
10588: LD_STRING DP-1
10590: PPUSH
10591: CALL_OW 94
// SayRadio ( Powell , DP-2 ) ;
10595: LD_EXP 12
10599: PPUSH
10600: LD_STRING DP-2
10602: PPUSH
10603: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2 ) ;
10607: LD_EXP 9
10611: PPUSH
10612: LD_STRING D
10614: PUSH
10615: LD_STRING I
10617: PUSH
10618: LD_STRING J
10620: PUSH
10621: LD_STRING S
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: LIST
10628: PUSH
10629: LD_EXP 25
10633: ARRAY
10634: STR
10635: PUSH
10636: LD_STRING -2
10638: STR
10639: PPUSH
10640: CALL_OW 88
// InGameOff ;
10644: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
10648: LD_STRING O1
10650: PPUSH
10651: CALL_OW 337
// game := true ;
10655: LD_ADDR_EXP 3
10659: PUSH
10660: LD_INT 1
10662: ST_TO_ADDR
// wait ( 0 0$5 ) ;
10663: LD_INT 175
10665: PPUSH
10666: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3 ) ;
10670: LD_EXP 9
10674: PPUSH
10675: LD_STRING D
10677: PUSH
10678: LD_STRING I
10680: PUSH
10681: LD_STRING J
10683: PUSH
10684: LD_STRING S
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: LIST
10691: PUSH
10692: LD_EXP 25
10696: ARRAY
10697: STR
10698: PUSH
10699: LD_STRING -3
10701: STR
10702: PPUSH
10703: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10707: LD_INT 35
10709: PPUSH
10710: CALL_OW 67
// until ruEscape [ 1 ] >= ruEscape [ 2 ] ;
10714: LD_EXP 15
10718: PUSH
10719: LD_INT 1
10721: ARRAY
10722: PUSH
10723: LD_EXP 15
10727: PUSH
10728: LD_INT 2
10730: ARRAY
10731: GREATEREQUAL
10732: IFFALSE 10707
// outpostEscape := true ;
10734: LD_ADDR_EXP 27
10738: PUSH
10739: LD_INT 1
10741: ST_TO_ADDR
// tmp := UnitFilter ( ruOutpost , [ f_sex , sex_male ] ) ;
10742: LD_ADDR_VAR 0 3
10746: PUSH
10747: LD_EXP 14
10751: PPUSH
10752: LD_INT 26
10754: PUSH
10755: LD_INT 1
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: PPUSH
10762: CALL_OW 72
10766: ST_TO_ADDR
// if tmp then
10767: LD_VAR 0 3
10771: IFFALSE 10789
// Say ( tmp [ 1 ] , DR-1-Escape ) ;
10773: LD_VAR 0 3
10777: PUSH
10778: LD_INT 1
10780: ARRAY
10781: PPUSH
10782: LD_STRING DR-1-Escape
10784: PPUSH
10785: CALL_OW 88
// wait ( 0 0$1 ) ;
10789: LD_INT 35
10791: PPUSH
10792: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Escape ) ;
10796: LD_EXP 9
10800: PPUSH
10801: LD_STRING D
10803: PUSH
10804: LD_STRING I
10806: PUSH
10807: LD_STRING J
10809: PUSH
10810: LD_STRING S
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: LIST
10817: PUSH
10818: LD_EXP 25
10822: ARRAY
10823: STR
10824: PUSH
10825: LD_STRING -1-Escape
10827: STR
10828: PPUSH
10829: CALL_OW 88
// for i in ruOutpost do
10833: LD_ADDR_VAR 0 2
10837: PUSH
10838: LD_EXP 14
10842: PUSH
10843: FOR_IN
10844: IFFALSE 10898
// begin if IsInUnit ( i ) then
10846: LD_VAR 0 2
10850: PPUSH
10851: CALL_OW 310
10855: IFFALSE 10866
// ComExitBuilding ( i ) ;
10857: LD_VAR 0 2
10861: PPUSH
10862: CALL_OW 122
// AddComMoveXY ( i , 179 , 102 ) ;
10866: LD_VAR 0 2
10870: PPUSH
10871: LD_INT 179
10873: PPUSH
10874: LD_INT 102
10876: PPUSH
10877: CALL_OW 171
// AddComMoveXY ( i , 28 , 20 ) ;
10881: LD_VAR 0 2
10885: PPUSH
10886: LD_INT 28
10888: PPUSH
10889: LD_INT 20
10891: PPUSH
10892: CALL_OW 171
// end ;
10896: GO 10843
10898: POP
10899: POP
// tmp := [ ] ;
10900: LD_ADDR_VAR 0 3
10904: PUSH
10905: EMPTY
10906: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10907: LD_INT 35
10909: PPUSH
10910: CALL_OW 67
// tmp := UnitFilter ( ruOutpost , [ f_inarea , rus1Base ] ) ;
10914: LD_ADDR_VAR 0 3
10918: PUSH
10919: LD_EXP 14
10923: PPUSH
10924: LD_INT 95
10926: PUSH
10927: LD_INT 11
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: PPUSH
10934: CALL_OW 72
10938: ST_TO_ADDR
// if tmp then
10939: LD_VAR 0 3
10943: IFFALSE 11015
// for i in tmp do
10945: LD_ADDR_VAR 0 2
10949: PUSH
10950: LD_VAR 0 3
10954: PUSH
10955: FOR_IN
10956: IFFALSE 11013
// begin ruOutpost := ruOutpost diff i ;
10958: LD_ADDR_EXP 14
10962: PUSH
10963: LD_EXP 14
10967: PUSH
10968: LD_VAR 0 2
10972: DIFF
10973: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , mc_rus_1 , mc_bases [ mc_rus_1 ] union i ) ;
10974: LD_ADDR_EXP 36
10978: PUSH
10979: LD_EXP 36
10983: PPUSH
10984: LD_EXP 7
10988: PPUSH
10989: LD_EXP 36
10993: PUSH
10994: LD_EXP 7
10998: ARRAY
10999: PUSH
11000: LD_VAR 0 2
11004: UNION
11005: PPUSH
11006: CALL_OW 1
11010: ST_TO_ADDR
// end ;
11011: GO 10955
11013: POP
11014: POP
// until not ruOutpost ;
11015: LD_EXP 14
11019: NOT
11020: IFFALSE 10907
// end ;
11022: LD_VAR 0 1
11026: RET
// every 0 0$1 trigger outpostEscape do var i , tmp ;
11027: LD_EXP 27
11031: IFFALSE 11220
11033: GO 11035
11035: DISABLE
11036: LD_INT 0
11038: PPUSH
11039: PPUSH
// begin wait ( rand ( 0 0$25 , 0 0$35 ) ) ;
11040: LD_INT 875
11042: PPUSH
11043: LD_INT 1225
11045: PPUSH
11046: CALL_OW 12
11050: PPUSH
11051: CALL_OW 67
// tmp := [ [ 208 , 166 ] , [ 218 , 174 ] , [ 201 , 173 ] , [ 189 , 167 ] , [ 191 , 160 ] , [ 209 , 181 ] , [ 192 , 162 ] , [ 197 , 166 ] ] ;
11055: LD_ADDR_VAR 0 2
11059: PUSH
11060: LD_INT 208
11062: PUSH
11063: LD_INT 166
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PUSH
11070: LD_INT 218
11072: PUSH
11073: LD_INT 174
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PUSH
11080: LD_INT 201
11082: PUSH
11083: LD_INT 173
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: PUSH
11090: LD_INT 189
11092: PUSH
11093: LD_INT 167
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: PUSH
11100: LD_INT 191
11102: PUSH
11103: LD_INT 160
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: PUSH
11110: LD_INT 209
11112: PUSH
11113: LD_INT 181
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: PUSH
11120: LD_INT 192
11122: PUSH
11123: LD_INT 162
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: PUSH
11130: LD_INT 197
11132: PUSH
11133: LD_INT 166
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: ST_TO_ADDR
// for i = 1 to 5 + Difficulty do
11150: LD_ADDR_VAR 0 1
11154: PUSH
11155: DOUBLE
11156: LD_INT 1
11158: DEC
11159: ST_TO_ADDR
11160: LD_INT 5
11162: PUSH
11163: LD_OWVAR 67
11167: PLUS
11168: PUSH
11169: FOR_TO
11170: IFFALSE 11218
// begin MineExplosion ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 1 ) ;
11172: LD_VAR 0 2
11176: PUSH
11177: LD_VAR 0 1
11181: ARRAY
11182: PUSH
11183: LD_INT 1
11185: ARRAY
11186: PPUSH
11187: LD_VAR 0 2
11191: PUSH
11192: LD_VAR 0 1
11196: ARRAY
11197: PUSH
11198: LD_INT 2
11200: ARRAY
11201: PPUSH
11202: LD_INT 1
11204: PPUSH
11205: CALL_OW 453
// wait ( 0 0$0.8 ) ;
11209: LD_INT 28
11211: PPUSH
11212: CALL_OW 67
// end ;
11216: GO 11169
11218: POP
11219: POP
// end ;
11220: PPOPN 2
11222: END
// every 0 0$3 trigger not outpostEscape do var tmp , engs , buildings , empty , i , j , k ;
11223: LD_EXP 27
11227: NOT
11228: IFFALSE 11843
11230: GO 11232
11232: DISABLE
11233: LD_INT 0
11235: PPUSH
11236: PPUSH
11237: PPUSH
11238: PPUSH
11239: PPUSH
11240: PPUSH
11241: PPUSH
// begin enable ;
11242: ENABLE
// tmp := UnitFilter ( ruOutpost , [ f_class , 1 ] ) ;
11243: LD_ADDR_VAR 0 1
11247: PUSH
11248: LD_EXP 14
11252: PPUSH
11253: LD_INT 25
11255: PUSH
11256: LD_INT 1
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: PPUSH
11263: CALL_OW 72
11267: ST_TO_ADDR
// engs := UnitFilter ( ruOutpost , [ f_class , 2 ] ) ;
11268: LD_ADDR_VAR 0 2
11272: PUSH
11273: LD_EXP 14
11277: PPUSH
11278: LD_INT 25
11280: PUSH
11281: LD_INT 2
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PPUSH
11288: CALL_OW 72
11292: ST_TO_ADDR
// buildings := UnitFilter ( ruOutpost , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11293: LD_ADDR_VAR 0 3
11297: PUSH
11298: LD_EXP 14
11302: PPUSH
11303: LD_INT 21
11305: PUSH
11306: LD_INT 3
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: PUSH
11313: LD_INT 3
11315: PUSH
11316: LD_INT 24
11318: PUSH
11319: LD_INT 1000
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: PUSH
11326: EMPTY
11327: LIST
11328: LIST
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: PPUSH
11334: CALL_OW 72
11338: ST_TO_ADDR
// if engs and buildings then
11339: LD_VAR 0 2
11343: PUSH
11344: LD_VAR 0 3
11348: AND
11349: IFFALSE 11422
// begin for i in engs do
11351: LD_ADDR_VAR 0 5
11355: PUSH
11356: LD_VAR 0 2
11360: PUSH
11361: FOR_IN
11362: IFFALSE 11418
// if IsInUnit ( i ) then
11364: LD_VAR 0 5
11368: PPUSH
11369: CALL_OW 310
11373: IFFALSE 11386
// ComExitBuilding ( i ) else
11375: LD_VAR 0 5
11379: PPUSH
11380: CALL_OW 122
11384: GO 11416
// if not HasTask ( i ) then
11386: LD_VAR 0 5
11390: PPUSH
11391: CALL_OW 314
11395: NOT
11396: IFFALSE 11416
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
11398: LD_VAR 0 5
11402: PPUSH
11403: LD_VAR 0 3
11407: PUSH
11408: LD_INT 1
11410: ARRAY
11411: PPUSH
11412: CALL_OW 130
11416: GO 11361
11418: POP
11419: POP
// end else
11420: GO 11525
// if not buildings and UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) and UnitFilter ( engs , [ f_not , [ f_inside ] ] ) then
11422: LD_VAR 0 3
11426: NOT
11427: PUSH
11428: LD_EXP 14
11432: PPUSH
11433: LD_INT 30
11435: PUSH
11436: LD_INT 0
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: PPUSH
11443: CALL_OW 72
11447: AND
11448: PUSH
11449: LD_VAR 0 2
11453: PPUSH
11454: LD_INT 3
11456: PUSH
11457: LD_INT 54
11459: PUSH
11460: EMPTY
11461: LIST
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: PPUSH
11467: CALL_OW 72
11471: AND
11472: IFFALSE 11525
// ComEnterUnit ( UnitFilter ( engs , [ f_not , [ f_inside ] ] ) , UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) [ 1 ] ) ;
11474: LD_VAR 0 2
11478: PPUSH
11479: LD_INT 3
11481: PUSH
11482: LD_INT 54
11484: PUSH
11485: EMPTY
11486: LIST
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: PPUSH
11492: CALL_OW 72
11496: PPUSH
11497: LD_EXP 14
11501: PPUSH
11502: LD_INT 30
11504: PUSH
11505: LD_INT 0
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: PPUSH
11512: CALL_OW 72
11516: PUSH
11517: LD_INT 1
11519: ARRAY
11520: PPUSH
11521: CALL_OW 120
// if not tmp then
11525: LD_VAR 0 1
11529: NOT
11530: IFFALSE 11534
// exit ;
11532: GO 11843
// if FilterUnitsInArea ( ruOutpostCenterArea , [ f_enemy , 3 ] ) > 1 then
11534: LD_INT 26
11536: PPUSH
11537: LD_INT 81
11539: PUSH
11540: LD_INT 3
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: PPUSH
11547: CALL_OW 70
11551: PUSH
11552: LD_INT 1
11554: GREATER
11555: IFFALSE 11611
// begin for i in tmp do
11557: LD_ADDR_VAR 0 5
11561: PUSH
11562: LD_VAR 0 1
11566: PUSH
11567: FOR_IN
11568: IFFALSE 11607
// begin if IsInUnit ( i ) then
11570: LD_VAR 0 5
11574: PPUSH
11575: CALL_OW 310
11579: IFFALSE 11590
// ComExitBuilding ( i ) ;
11581: LD_VAR 0 5
11585: PPUSH
11586: CALL_OW 122
// AddComAgressiveMove ( i , 204 , 164 ) ;
11590: LD_VAR 0 5
11594: PPUSH
11595: LD_INT 204
11597: PPUSH
11598: LD_INT 164
11600: PPUSH
11601: CALL_OW 174
// end ;
11605: GO 11567
11607: POP
11608: POP
// end else
11609: GO 11843
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
11611: LD_VAR 0 1
11615: PPUSH
11616: LD_INT 3
11618: PUSH
11619: LD_INT 54
11621: PUSH
11622: EMPTY
11623: LIST
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PPUSH
11629: CALL_OW 72
11633: IFFALSE 11843
// begin empty := UnitFilter ( ruOutpost , [ [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
11635: LD_ADDR_VAR 0 4
11639: PUSH
11640: LD_EXP 14
11644: PPUSH
11645: LD_INT 30
11647: PUSH
11648: LD_INT 32
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: PUSH
11655: LD_INT 58
11657: PUSH
11658: EMPTY
11659: LIST
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PPUSH
11665: CALL_OW 72
11669: ST_TO_ADDR
// if not empty and UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) then
11670: LD_VAR 0 4
11674: NOT
11675: PUSH
11676: LD_EXP 14
11680: PPUSH
11681: LD_INT 30
11683: PUSH
11684: LD_INT 5
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: PPUSH
11691: CALL_OW 72
11695: AND
11696: IFFALSE 11733
// begin ComEnterUnit ( tmp , UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) [ 1 ] ) ;
11698: LD_VAR 0 1
11702: PPUSH
11703: LD_EXP 14
11707: PPUSH
11708: LD_INT 30
11710: PUSH
11711: LD_INT 5
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: PPUSH
11718: CALL_OW 72
11722: PUSH
11723: LD_INT 1
11725: ARRAY
11726: PPUSH
11727: CALL_OW 120
// exit ;
11731: GO 11843
// end ; j := UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) ;
11733: LD_ADDR_VAR 0 6
11737: PUSH
11738: LD_VAR 0 1
11742: PPUSH
11743: LD_INT 3
11745: PUSH
11746: LD_INT 54
11748: PUSH
11749: EMPTY
11750: LIST
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: PPUSH
11756: CALL_OW 72
11760: ST_TO_ADDR
// if j < empty then
11761: LD_VAR 0 6
11765: PUSH
11766: LD_VAR 0 4
11770: LESS
11771: IFFALSE 11785
// k := j else
11773: LD_ADDR_VAR 0 7
11777: PUSH
11778: LD_VAR 0 6
11782: ST_TO_ADDR
11783: GO 11795
// k := empty ;
11785: LD_ADDR_VAR 0 7
11789: PUSH
11790: LD_VAR 0 4
11794: ST_TO_ADDR
// for i = 1 to k do
11795: LD_ADDR_VAR 0 5
11799: PUSH
11800: DOUBLE
11801: LD_INT 1
11803: DEC
11804: ST_TO_ADDR
11805: LD_VAR 0 7
11809: PUSH
11810: FOR_TO
11811: IFFALSE 11841
// ComEnterUnit ( j [ i ] , empty [ i ] ) ;
11813: LD_VAR 0 6
11817: PUSH
11818: LD_VAR 0 5
11822: ARRAY
11823: PPUSH
11824: LD_VAR 0 4
11828: PUSH
11829: LD_VAR 0 5
11833: ARRAY
11834: PPUSH
11835: CALL_OW 120
11839: GO 11810
11841: POP
11842: POP
// end ; end ;
11843: PPOPN 7
11845: END
// every 0 0$2 trigger GameType = 1 and outpostEscape and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , 208 , 163 , 8 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 208 , 163 , 14 ] ] ) do var i ;
11846: LD_EXP 2
11850: PUSH
11851: LD_INT 1
11853: EQUAL
11854: PUSH
11855: LD_EXP 27
11859: AND
11860: PUSH
11861: LD_INT 22
11863: PUSH
11864: LD_INT 1
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PUSH
11871: LD_INT 92
11873: PUSH
11874: LD_INT 208
11876: PUSH
11877: LD_INT 163
11879: PUSH
11880: LD_INT 8
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: PPUSH
11893: CALL_OW 69
11897: AND
11898: PUSH
11899: LD_INT 22
11901: PUSH
11902: LD_INT 3
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: LD_INT 21
11911: PUSH
11912: LD_INT 1
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: LD_INT 92
11921: PUSH
11922: LD_INT 208
11924: PUSH
11925: LD_INT 163
11927: PUSH
11928: LD_INT 14
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: LIST
11941: PPUSH
11942: CALL_OW 69
11946: NOT
11947: AND
11948: IFFALSE 12247
11950: GO 11952
11952: DISABLE
11953: LD_INT 0
11955: PPUSH
// begin InGameOn ;
11956: CALL_OW 8
// CenterNowOnUnits ( playerCommander ) ;
11960: LD_EXP 9
11964: PPUSH
11965: CALL_OW 87
// wait ( 0 0$1 ) ;
11969: LD_INT 35
11971: PPUSH
11972: CALL_OW 67
// DialogueOn ;
11976: CALL_OW 6
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-BaseCaptured ) ;
11980: LD_EXP 9
11984: PPUSH
11985: LD_STRING D
11987: PUSH
11988: LD_STRING I
11990: PUSH
11991: LD_STRING J
11993: PUSH
11994: LD_STRING S
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: LIST
12001: PUSH
12002: LD_EXP 25
12006: ARRAY
12007: STR
12008: PUSH
12009: LD_STRING -1-BaseCaptured
12011: STR
12012: PPUSH
12013: CALL_OW 88
// SayRadio ( Powell , DP-1-BaseCaptured ) ;
12017: LD_EXP 12
12021: PPUSH
12022: LD_STRING DP-1-BaseCaptured
12024: PPUSH
12025: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-BaseCaptured ) ;
12029: LD_EXP 9
12033: PPUSH
12034: LD_STRING D
12036: PUSH
12037: LD_STRING I
12039: PUSH
12040: LD_STRING J
12042: PUSH
12043: LD_STRING S
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: LIST
12050: PUSH
12051: LD_EXP 25
12055: ARRAY
12056: STR
12057: PUSH
12058: LD_STRING -2-BaseCaptured
12060: STR
12061: PPUSH
12062: CALL_OW 88
// if commander = 1 then
12066: LD_EXP 25
12070: PUSH
12071: LD_INT 1
12073: EQUAL
12074: IFFALSE 12088
// SayRadio ( Powell , DP-2b-BaseCaptured ) ;
12076: LD_EXP 12
12080: PPUSH
12081: LD_STRING DP-2b-BaseCaptured
12083: PPUSH
12084: CALL_OW 94
// if commander = 2 then
12088: LD_EXP 25
12092: PUSH
12093: LD_INT 2
12095: EQUAL
12096: IFFALSE 12110
// SayRadio ( Powell , DP-2-BaseCaptured ) ;
12098: LD_EXP 12
12102: PPUSH
12103: LD_STRING DP-2-BaseCaptured
12105: PPUSH
12106: CALL_OW 94
// if commander = 3 then
12110: LD_EXP 25
12114: PUSH
12115: LD_INT 3
12117: EQUAL
12118: IFFALSE 12132
// SayRadio ( Powell , DP-2a-BaseCaptured ) ;
12120: LD_EXP 12
12124: PPUSH
12125: LD_STRING DP-2a-BaseCaptured
12127: PPUSH
12128: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3-BaseCaptured ) ;
12132: LD_EXP 9
12136: PPUSH
12137: LD_STRING D
12139: PUSH
12140: LD_STRING I
12142: PUSH
12143: LD_STRING J
12145: PUSH
12146: LD_STRING S
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: LIST
12153: PUSH
12154: LD_EXP 25
12158: ARRAY
12159: STR
12160: PUSH
12161: LD_STRING -3-BaseCaptured
12163: STR
12164: PPUSH
12165: CALL_OW 88
// DialogueOff ;
12169: CALL_OW 7
// InGameOff ;
12173: CALL_OW 9
// ChangeMissionObjectives ( O2 ) ;
12177: LD_STRING O2
12179: PPUSH
12180: CALL_OW 337
// for i in UnitFilter ( ruOutpost , [ f_type , unit_building ] ) do
12184: LD_ADDR_VAR 0 1
12188: PUSH
12189: LD_EXP 14
12193: PPUSH
12194: LD_INT 21
12196: PUSH
12197: LD_INT 3
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: PPUSH
12204: CALL_OW 72
12208: PUSH
12209: FOR_IN
12210: IFFALSE 12226
// SetSide ( i , 1 ) ;
12212: LD_VAR 0 1
12216: PPUSH
12217: LD_INT 1
12219: PPUSH
12220: CALL_OW 235
12224: GO 12209
12226: POP
12227: POP
// baseCaptured := true ;
12228: LD_ADDR_EXP 17
12232: PUSH
12233: LD_INT 1
12235: ST_TO_ADDR
// wait ( 0 0$35 ) ;
12236: LD_INT 1225
12238: PPUSH
12239: CALL_OW 67
// PrepareReinforcements ;
12243: CALL 9332 0 0
// end ;
12247: PPOPN 1
12249: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 167 , 197 , 20 ] ] ) > 3 do
12250: LD_INT 22
12252: PUSH
12253: LD_INT 3
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PUSH
12260: LD_INT 92
12262: PUSH
12263: LD_INT 167
12265: PUSH
12266: LD_INT 197
12268: PUSH
12269: LD_INT 20
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PPUSH
12282: CALL_OW 69
12286: PUSH
12287: LD_INT 3
12289: GREATER
12290: IFFALSE 12307
12292: GO 12294
12294: DISABLE
// begin SayRadio ( Powell , DP-RuAttack ) ;
12295: LD_EXP 12
12299: PPUSH
12300: LD_STRING DP-RuAttack
12302: PPUSH
12303: CALL_OW 94
// end ;
12307: END
// every 0 0$2 trigger SeeXY ( 1 , 168 , 74 ) and GetEnvironmentType ( 168 , 72 ) do
12308: LD_INT 1
12310: PPUSH
12311: LD_INT 168
12313: PPUSH
12314: LD_INT 74
12316: PPUSH
12317: CALL_OW 293
12321: PUSH
12322: LD_INT 168
12324: PPUSH
12325: LD_INT 72
12327: PPUSH
12328: CALL_OW 553
12332: AND
12333: IFFALSE 12385
12335: GO 12337
12337: DISABLE
// begin CenterOnXY ( 168 , 72 ) ;
12338: LD_INT 168
12340: PPUSH
12341: LD_INT 72
12343: PPUSH
12344: CALL_OW 84
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Blockade ) ;
12348: LD_EXP 9
12352: PPUSH
12353: LD_STRING D
12355: PUSH
12356: LD_STRING I
12358: PUSH
12359: LD_STRING J
12361: PUSH
12362: LD_STRING S
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: LIST
12369: PUSH
12370: LD_EXP 25
12374: ARRAY
12375: STR
12376: PUSH
12377: LD_STRING -1-Blockade
12379: STR
12380: PPUSH
12381: CALL_OW 88
// end ;
12385: END
// every 0 0$2 trigger GameType = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 4 ] ] ) do
12386: LD_EXP 2
12390: PUSH
12391: LD_INT 1
12393: EQUAL
12394: PUSH
12395: LD_INT 22
12397: PUSH
12398: LD_INT 1
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PUSH
12405: LD_INT 101
12407: PUSH
12408: LD_INT 4
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: PPUSH
12419: CALL_OW 69
12423: AND
12424: IFFALSE 12818
12426: GO 12428
12428: DISABLE
// begin ChangeSideFog ( 4 , 1 ) ;
12429: LD_INT 4
12431: PPUSH
12432: LD_INT 1
12434: PPUSH
12435: CALL_OW 343
// DialogueOn ;
12439: CALL_OW 6
// CenterNowOnUnits ( allyCommander ) ;
12443: LD_EXP 11
12447: PPUSH
12448: CALL_OW 87
// SayRadio ( allyCommander , DM-1-Contact ) ;
12452: LD_EXP 11
12456: PPUSH
12457: LD_STRING DM-1-Contact
12459: PPUSH
12460: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Contact ) ;
12464: LD_EXP 9
12468: PPUSH
12469: LD_STRING D
12471: PUSH
12472: LD_STRING I
12474: PUSH
12475: LD_STRING J
12477: PUSH
12478: LD_STRING S
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: LIST
12485: PUSH
12486: LD_EXP 25
12490: ARRAY
12491: STR
12492: PUSH
12493: LD_STRING -1-Contact
12495: STR
12496: PPUSH
12497: CALL_OW 88
// if commander = 1 then
12501: LD_EXP 25
12505: PUSH
12506: LD_INT 1
12508: EQUAL
12509: IFFALSE 12595
// begin SayRadio ( allyCommander , DM-2-Contact ) ;
12511: LD_EXP 11
12515: PPUSH
12516: LD_STRING DM-2-Contact
12518: PPUSH
12519: CALL_OW 94
// Say ( playerCommander , DI-2-Contact ) ;
12523: LD_EXP 9
12527: PPUSH
12528: LD_STRING DI-2-Contact
12530: PPUSH
12531: CALL_OW 88
// SayRadio ( allyCommander , DM-3-Contact ) ;
12535: LD_EXP 11
12539: PPUSH
12540: LD_STRING DM-3-Contact
12542: PPUSH
12543: CALL_OW 94
// Say ( playerCommander , DI-3-Contact ) ;
12547: LD_EXP 9
12551: PPUSH
12552: LD_STRING DI-3-Contact
12554: PPUSH
12555: CALL_OW 88
// SayRadio ( allyCommander , DM-4-Contact ) ;
12559: LD_EXP 11
12563: PPUSH
12564: LD_STRING DM-4-Contact
12566: PPUSH
12567: CALL_OW 94
// Say ( playerCommander , DI-4-Contact ) ;
12571: LD_EXP 9
12575: PPUSH
12576: LD_STRING DI-4-Contact
12578: PPUSH
12579: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
12583: LD_EXP 11
12587: PPUSH
12588: LD_STRING DM-5-Contact
12590: PPUSH
12591: CALL_OW 94
// end ; if commander = 2 then
12595: LD_EXP 25
12599: PUSH
12600: LD_INT 2
12602: EQUAL
12603: IFFALSE 12689
// begin SayRadio ( allyCommander , DM-2c-Contact ) ;
12605: LD_EXP 11
12609: PPUSH
12610: LD_STRING DM-2c-Contact
12612: PPUSH
12613: CALL_OW 94
// Say ( playerCommander , DJ-2-Contact ) ;
12617: LD_EXP 9
12621: PPUSH
12622: LD_STRING DJ-2-Contact
12624: PPUSH
12625: CALL_OW 88
// SayRadio ( allyCommander , DM-3-Contact ) ;
12629: LD_EXP 11
12633: PPUSH
12634: LD_STRING DM-3-Contact
12636: PPUSH
12637: CALL_OW 94
// Say ( playerCommander , DJ-3-Contact ) ;
12641: LD_EXP 9
12645: PPUSH
12646: LD_STRING DJ-3-Contact
12648: PPUSH
12649: CALL_OW 88
// SayRadio ( allyCommander , DM-4-Contact ) ;
12653: LD_EXP 11
12657: PPUSH
12658: LD_STRING DM-4-Contact
12660: PPUSH
12661: CALL_OW 94
// Say ( playerCommander , DJ-4-Contact ) ;
12665: LD_EXP 9
12669: PPUSH
12670: LD_STRING DJ-4-Contact
12672: PPUSH
12673: CALL_OW 88
// SayRadio ( allyCommander , DM-5a-Contact ) ;
12677: LD_EXP 11
12681: PPUSH
12682: LD_STRING DM-5a-Contact
12684: PPUSH
12685: CALL_OW 94
// end ; if commander = 3 then
12689: LD_EXP 25
12693: PUSH
12694: LD_INT 3
12696: EQUAL
12697: IFFALSE 12807
// begin SayRadio ( allyCommander , DM-2a-Contact ) ;
12699: LD_EXP 11
12703: PPUSH
12704: LD_STRING DM-2a-Contact
12706: PPUSH
12707: CALL_OW 94
// Say ( playerCommander , DS-2a-Contact ) ;
12711: LD_EXP 9
12715: PPUSH
12716: LD_STRING DS-2a-Contact
12718: PPUSH
12719: CALL_OW 88
// SayRadio ( allyCommander , DM-2b-Contact ) ;
12723: LD_EXP 11
12727: PPUSH
12728: LD_STRING DM-2b-Contact
12730: PPUSH
12731: CALL_OW 94
// Say ( playerCommander , DS-2b-Contact ) ;
12735: LD_EXP 9
12739: PPUSH
12740: LD_STRING DS-2b-Contact
12742: PPUSH
12743: CALL_OW 88
// SayRadio ( allyCommander , DM-3-Contact ) ;
12747: LD_EXP 11
12751: PPUSH
12752: LD_STRING DM-3-Contact
12754: PPUSH
12755: CALL_OW 94
// Say ( playerCommander , DS-3-Contact ) ;
12759: LD_EXP 9
12763: PPUSH
12764: LD_STRING DS-3-Contact
12766: PPUSH
12767: CALL_OW 88
// SayRadio ( allyCommander , DM-4-Contact ) ;
12771: LD_EXP 11
12775: PPUSH
12776: LD_STRING DM-4-Contact
12778: PPUSH
12779: CALL_OW 94
// Say ( playerCommander , DS-4-Contact ) ;
12783: LD_EXP 9
12787: PPUSH
12788: LD_STRING DS-4-Contact
12790: PPUSH
12791: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
12795: LD_EXP 11
12799: PPUSH
12800: LD_STRING DM-5-Contact
12802: PPUSH
12803: CALL_OW 94
// end ; DialogueOff ;
12807: CALL_OW 7
// ChangeMissionObjectives ( O3 ) ;
12811: LD_STRING O3
12813: PPUSH
12814: CALL_OW 337
// end ;
12818: END
// every 0 0$10 trigger GameType = 1 and legDestCounter >= [ 15 , 20 , 25 ] [ Difficulty ] and FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) >= 5 do var time , sib , sources , i ;
12819: LD_EXP 2
12823: PUSH
12824: LD_INT 1
12826: EQUAL
12827: PUSH
12828: LD_EXP 18
12832: PUSH
12833: LD_INT 15
12835: PUSH
12836: LD_INT 20
12838: PUSH
12839: LD_INT 25
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: LIST
12846: PUSH
12847: LD_OWVAR 67
12851: ARRAY
12852: GREATEREQUAL
12853: AND
12854: PUSH
12855: LD_INT 22
12857: PUSH
12858: LD_INT 8
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: PUSH
12865: LD_INT 30
12867: PUSH
12868: LD_INT 1
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: PPUSH
12879: CALL_OW 69
12883: AND
12884: PUSH
12885: LD_INT 22
12887: PUSH
12888: LD_INT 8
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PUSH
12895: LD_INT 21
12897: PUSH
12898: LD_INT 3
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: PPUSH
12909: CALL_OW 69
12913: PUSH
12914: LD_INT 5
12916: GREATEREQUAL
12917: AND
12918: IFFALSE 13441
12920: GO 12922
12922: DISABLE
12923: LD_INT 0
12925: PPUSH
12926: PPUSH
12927: PPUSH
12928: PPUSH
// begin DialogueOn ;
12929: CALL_OW 6
// SayRadio ( Farmer , DF-1-Leg ) ;
12933: LD_EXP 13
12937: PPUSH
12938: LD_STRING DF-1-Leg
12940: PPUSH
12941: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Leg ) ;
12945: LD_EXP 9
12949: PPUSH
12950: LD_STRING D
12952: PUSH
12953: LD_STRING I
12955: PUSH
12956: LD_STRING J
12958: PUSH
12959: LD_STRING S
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: LIST
12966: PUSH
12967: LD_EXP 25
12971: ARRAY
12972: STR
12973: PUSH
12974: LD_STRING -1-Leg
12976: STR
12977: PPUSH
12978: CALL_OW 88
// SayRadio ( Farmer , DF-2-Leg ) ;
12982: LD_EXP 13
12986: PPUSH
12987: LD_STRING DF-2-Leg
12989: PPUSH
12990: CALL_OW 94
// DialogueOff ;
12994: CALL_OW 7
// case Query ( QLegionOffer ) of 1 :
12998: LD_STRING QLegionOffer
13000: PPUSH
13001: CALL_OW 97
13005: PUSH
13006: LD_INT 1
13008: DOUBLE
13009: EQUAL
13010: IFTRUE 13014
13012: GO 13017
13014: POP
// ; 2 :
13015: GO 13031
13017: LD_INT 2
13019: DOUBLE
13020: EQUAL
13021: IFTRUE 13025
13023: GO 13030
13025: POP
// exit ; end ;
13026: GO 13441
13028: GO 13031
13030: POP
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-Leg ) ;
13031: LD_EXP 9
13035: PPUSH
13036: LD_STRING D
13038: PUSH
13039: LD_STRING I
13041: PUSH
13042: LD_STRING J
13044: PUSH
13045: LD_STRING S
13047: PUSH
13048: EMPTY
13049: LIST
13050: LIST
13051: LIST
13052: PUSH
13053: LD_EXP 25
13057: ARRAY
13058: STR
13059: PUSH
13060: LD_STRING -2-Leg
13062: STR
13063: PPUSH
13064: CALL_OW 88
// legOfferAccepted := true ;
13068: LD_ADDR_EXP 20
13072: PUSH
13073: LD_INT 1
13075: ST_TO_ADDR
// SetAreaMapShow ( legOfferArea , 1 ) ;
13076: LD_INT 21
13078: PPUSH
13079: LD_INT 1
13081: PPUSH
13082: CALL_OW 424
// CenterOnXY ( 190 , 227 ) ;
13086: LD_INT 190
13088: PPUSH
13089: LD_INT 227
13091: PPUSH
13092: CALL_OW 84
// time := [ 8 8$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
13096: LD_ADDR_VAR 0 1
13100: PUSH
13101: LD_INT 16800
13103: PUSH
13104: LD_INT 14700
13106: PUSH
13107: LD_INT 12600
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: LIST
13114: PUSH
13115: LD_OWVAR 67
13119: ARRAY
13120: ST_TO_ADDR
// sib := 100 ;
13121: LD_ADDR_VAR 0 2
13125: PUSH
13126: LD_INT 100
13128: ST_TO_ADDR
// disableGlobalTimer := true ;
13129: LD_ADDR_EXP 4
13133: PUSH
13134: LD_INT 1
13136: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13137: LD_INT 35
13139: PPUSH
13140: CALL_OW 67
// time := time - 0 0$1 ;
13144: LD_ADDR_VAR 0 1
13148: PUSH
13149: LD_VAR 0 1
13153: PUSH
13154: LD_INT 35
13156: MINUS
13157: ST_TO_ADDR
// sources := GetResourceArea ( legOfferArea , mat_siberit ) ;
13158: LD_ADDR_VAR 0 3
13162: PUSH
13163: LD_INT 21
13165: PPUSH
13166: LD_INT 3
13168: PPUSH
13169: CALL_OW 287
13173: ST_TO_ADDR
// display_strings := [ #SkrTime , tick , #Skr-LegOffer , sib , time ] ;
13174: LD_ADDR_OWVAR 47
13178: PUSH
13179: LD_STRING #SkrTime
13181: PUSH
13182: LD_OWVAR 1
13186: PUSH
13187: LD_STRING #Skr-LegOffer
13189: PUSH
13190: LD_VAR 0 2
13194: PUSH
13195: LD_VAR 0 1
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: ST_TO_ADDR
// if sources then
13207: LD_VAR 0 3
13211: IFFALSE 13243
// begin sib := sib - sources * 10 ;
13213: LD_ADDR_VAR 0 2
13217: PUSH
13218: LD_VAR 0 2
13222: PUSH
13223: LD_VAR 0 3
13227: PUSH
13228: LD_INT 10
13230: MUL
13231: MINUS
13232: ST_TO_ADDR
// EraseResourceArea ( legOfferArea , mat_siberit ) ;
13233: LD_INT 21
13235: PPUSH
13236: LD_INT 3
13238: PPUSH
13239: CALL_OW 286
// end ; until time = 0 0$00 or sib <= 0 or not FilterAllUnits ( [ f_side , 8 ] ) ;
13243: LD_VAR 0 1
13247: PUSH
13248: LD_INT 0
13250: EQUAL
13251: PUSH
13252: LD_VAR 0 2
13256: PUSH
13257: LD_INT 0
13259: LESSEQUAL
13260: OR
13261: PUSH
13262: LD_INT 22
13264: PUSH
13265: LD_INT 8
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: PPUSH
13272: CALL_OW 69
13276: NOT
13277: OR
13278: IFFALSE 13137
// SetAreaMapShow ( legOfferArea , 0 ) ;
13280: LD_INT 21
13282: PPUSH
13283: LD_INT 0
13285: PPUSH
13286: CALL_OW 424
// disableGlobalTimer := false ;
13290: LD_ADDR_EXP 4
13294: PUSH
13295: LD_INT 0
13297: ST_TO_ADDR
// if sib <= 0 then
13298: LD_VAR 0 2
13302: PUSH
13303: LD_INT 0
13305: LESSEQUAL
13306: IFFALSE 13422
// begin legChangeSide := true ;
13308: LD_ADDR_EXP 21
13312: PUSH
13313: LD_INT 1
13315: ST_TO_ADDR
// SayRadio ( Farmer , DF-4y-Leg ) ;
13316: LD_EXP 13
13320: PPUSH
13321: LD_STRING DF-4y-Leg
13323: PPUSH
13324: CALL_OW 94
// ChangeMissionObjectives ( O3a ) ;
13328: LD_STRING O3a
13330: PPUSH
13331: CALL_OW 337
// ChangeSideFog ( 8 , 1 ) ;
13335: LD_INT 8
13337: PPUSH
13338: LD_INT 1
13340: PPUSH
13341: CALL_OW 343
// SetAttitude ( 8 , 1 , att_friend , true ) ;
13345: LD_INT 8
13347: PPUSH
13348: LD_INT 1
13350: PPUSH
13351: LD_INT 1
13353: PPUSH
13354: LD_INT 1
13356: PPUSH
13357: CALL_OW 80
// SetAttitude ( 8 , 4 , att_friend , true ) ;
13361: LD_INT 8
13363: PPUSH
13364: LD_INT 4
13366: PPUSH
13367: LD_INT 1
13369: PPUSH
13370: LD_INT 1
13372: PPUSH
13373: CALL_OW 80
// SetAttitude ( 8 , 6 , att_enemy , true ) ;
13377: LD_INT 8
13379: PPUSH
13380: LD_INT 6
13382: PPUSH
13383: LD_INT 2
13385: PPUSH
13386: LD_INT 1
13388: PPUSH
13389: CALL_OW 80
// SetAttitude ( 8 , 3 , att_enemy , true ) ;
13393: LD_INT 8
13395: PPUSH
13396: LD_INT 3
13398: PPUSH
13399: LD_INT 2
13401: PPUSH
13402: LD_INT 1
13404: PPUSH
13405: CALL_OW 80
// wait ( 0 0$30 ) ;
13409: LD_INT 1050
13411: PPUSH
13412: CALL_OW 67
// PrepareLegionReinforcements ;
13416: CALL 10032 0 0
// end else
13420: GO 13441
// begin ChangeMissionObjectives ( O3a ) ;
13422: LD_STRING O3a
13424: PPUSH
13425: CALL_OW 337
// SayRadio ( Farmer , DF-4n-Leg ) ;
13429: LD_EXP 13
13433: PPUSH
13434: LD_STRING DF-4n-Leg
13436: PPUSH
13437: CALL_OW 94
// end ; end ;
13441: PPOPN 4
13443: END
// every 0 0$1 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) = 0 do
13444: LD_EXP 2
13448: PUSH
13449: LD_INT 1
13451: EQUAL
13452: PUSH
13453: LD_EXP 3
13457: AND
13458: PUSH
13459: LD_INT 22
13461: PUSH
13462: LD_INT 3
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: PUSH
13469: LD_INT 21
13471: PUSH
13472: LD_INT 1
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PPUSH
13483: CALL_OW 69
13487: PUSH
13488: LD_INT 0
13490: EQUAL
13491: AND
13492: PUSH
13493: LD_INT 22
13495: PUSH
13496: LD_INT 3
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PUSH
13503: LD_INT 30
13505: PUSH
13506: LD_INT 1
13508: PUSH
13509: EMPTY
13510: LIST
13511: LIST
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PPUSH
13517: CALL_OW 69
13521: PUSH
13522: LD_INT 0
13524: EQUAL
13525: AND
13526: IFFALSE 13770
13528: GO 13530
13530: DISABLE
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Win ) ;
13531: LD_EXP 9
13535: PPUSH
13536: LD_STRING D
13538: PUSH
13539: LD_STRING I
13541: PUSH
13542: LD_STRING J
13544: PUSH
13545: LD_STRING S
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: LIST
13552: PUSH
13553: LD_EXP 25
13557: ARRAY
13558: STR
13559: PUSH
13560: LD_STRING -1-Win
13562: STR
13563: PPUSH
13564: CALL_OW 88
// if tick >= [ 150 150$0 , 130 130$0 , 110 110$0 ] [ Difficulty ] then
13568: LD_OWVAR 1
13572: PUSH
13573: LD_INT 315000
13575: PUSH
13576: LD_INT 273000
13578: PUSH
13579: LD_INT 231000
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: LIST
13586: PUSH
13587: LD_OWVAR 67
13591: ARRAY
13592: GREATEREQUAL
13593: IFFALSE 13608
// AddMedal ( med1 , - 1 ) else
13595: LD_STRING med1
13597: PPUSH
13598: LD_INT 1
13600: NEG
13601: PPUSH
13602: CALL_OW 101
13606: GO 13618
// AddMedal ( med1 , 1 ) ;
13608: LD_STRING med1
13610: PPUSH
13611: LD_INT 1
13613: PPUSH
13614: CALL_OW 101
// if allyDestCounter >= [ 20 , 15 , 10 ] [ Difficulty ] then
13618: LD_EXP 22
13622: PUSH
13623: LD_INT 20
13625: PUSH
13626: LD_INT 15
13628: PUSH
13629: LD_INT 10
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: LIST
13636: PUSH
13637: LD_OWVAR 67
13641: ARRAY
13642: GREATEREQUAL
13643: IFFALSE 13658
// AddMedal ( med2 , - 1 ) else
13645: LD_STRING med2
13647: PPUSH
13648: LD_INT 1
13650: NEG
13651: PPUSH
13652: CALL_OW 101
13656: GO 13668
// AddMedal ( med2 , 1 ) ;
13658: LD_STRING med2
13660: PPUSH
13661: LD_INT 1
13663: PPUSH
13664: CALL_OW 101
// if legChangeSide and GetAttitude ( 8 , 1 ) = att_friend then
13668: LD_EXP 21
13672: PUSH
13673: LD_INT 8
13675: PPUSH
13676: LD_INT 1
13678: PPUSH
13679: CALL_OW 81
13683: PUSH
13684: LD_INT 1
13686: EQUAL
13687: AND
13688: IFFALSE 13702
// AddMedal ( med3 , 2 ) else
13690: LD_STRING med3
13692: PPUSH
13693: LD_INT 2
13695: PPUSH
13696: CALL_OW 101
13700: GO 13759
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 then
13702: LD_INT 22
13704: PUSH
13705: LD_INT 8
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: LD_INT 21
13714: PUSH
13715: LD_INT 1
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PPUSH
13726: CALL_OW 69
13730: PUSH
13731: LD_INT 0
13733: EQUAL
13734: IFFALSE 13748
// AddMedal ( med3 , 1 ) else
13736: LD_STRING med3
13738: PPUSH
13739: LD_INT 1
13741: PPUSH
13742: CALL_OW 101
13746: GO 13759
// AddMedal ( med3 , - 1 ) ;
13748: LD_STRING med3
13750: PPUSH
13751: LD_INT 1
13753: NEG
13754: PPUSH
13755: CALL_OW 101
// GiveMedals ( MAIN ) ;
13759: LD_STRING MAIN
13761: PPUSH
13762: CALL_OW 102
// YouWin ;
13766: CALL_OW 103
// end ;
13770: END
// every 10 trigger GameType = 1 and staticMines and FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) do var i , j , tmp , x , y ;
13771: LD_EXP 2
13775: PUSH
13776: LD_INT 1
13778: EQUAL
13779: PUSH
13780: LD_EXP 16
13784: AND
13785: PUSH
13786: LD_INT 20
13788: PPUSH
13789: LD_INT 81
13791: PUSH
13792: LD_INT 8
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: PPUSH
13799: CALL_OW 70
13803: AND
13804: IFFALSE 14083
13806: GO 13808
13808: DISABLE
13809: LD_INT 0
13811: PPUSH
13812: PPUSH
13813: PPUSH
13814: PPUSH
13815: PPUSH
// begin enable ;
13816: ENABLE
// tmp := FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) ;
13817: LD_ADDR_VAR 0 3
13821: PUSH
13822: LD_INT 20
13824: PPUSH
13825: LD_INT 81
13827: PUSH
13828: LD_INT 8
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: PPUSH
13835: CALL_OW 70
13839: ST_TO_ADDR
// if not tmp then
13840: LD_VAR 0 3
13844: NOT
13845: IFFALSE 13849
// exit ;
13847: GO 14083
// for i in tmp do
13849: LD_ADDR_VAR 0 1
13853: PUSH
13854: LD_VAR 0 3
13858: PUSH
13859: FOR_IN
13860: IFFALSE 14081
// begin x := GetX ( i ) ;
13862: LD_ADDR_VAR 0 4
13866: PUSH
13867: LD_VAR 0 1
13871: PPUSH
13872: CALL_OW 250
13876: ST_TO_ADDR
// y := GetY ( i ) ;
13877: LD_ADDR_VAR 0 5
13881: PUSH
13882: LD_VAR 0 1
13886: PPUSH
13887: CALL_OW 251
13891: ST_TO_ADDR
// if MineAtPos ( x , y ) then
13892: LD_VAR 0 4
13896: PPUSH
13897: LD_VAR 0 5
13901: PPUSH
13902: CALL_OW 458
13906: IFFALSE 14079
// begin LaunchMineAtPos ( x , y , 8 ) ;
13908: LD_VAR 0 4
13912: PPUSH
13913: LD_VAR 0 5
13917: PPUSH
13918: LD_INT 8
13920: PPUSH
13921: CALL_OW 456
// if not dialogueMineDetected then
13925: LD_EXP 28
13929: NOT
13930: IFFALSE 13991
// begin CenterNowOnXY ( x , y ) ;
13932: LD_VAR 0 4
13936: PPUSH
13937: LD_VAR 0 5
13941: PPUSH
13942: CALL_OW 86
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Mine ) ;
13946: LD_EXP 9
13950: PPUSH
13951: LD_STRING D
13953: PUSH
13954: LD_STRING I
13956: PUSH
13957: LD_STRING J
13959: PUSH
13960: LD_STRING S
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: LIST
13967: PUSH
13968: LD_EXP 25
13972: ARRAY
13973: STR
13974: PUSH
13975: LD_STRING -1-Mine
13977: STR
13978: PPUSH
13979: CALL_OW 88
// dialogueMineDetected := true ;
13983: LD_ADDR_EXP 28
13987: PUSH
13988: LD_INT 1
13990: ST_TO_ADDR
// end ; for j = 1 to staticMines do
13991: LD_ADDR_VAR 0 2
13995: PUSH
13996: DOUBLE
13997: LD_INT 1
13999: DEC
14000: ST_TO_ADDR
14001: LD_EXP 16
14005: PUSH
14006: FOR_TO
14007: IFFALSE 14077
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
14009: LD_EXP 16
14013: PUSH
14014: LD_VAR 0 2
14018: ARRAY
14019: PUSH
14020: LD_INT 1
14022: ARRAY
14023: PUSH
14024: LD_VAR 0 4
14028: EQUAL
14029: PUSH
14030: LD_EXP 16
14034: PUSH
14035: LD_VAR 0 2
14039: ARRAY
14040: PUSH
14041: LD_INT 2
14043: ARRAY
14044: PUSH
14045: LD_VAR 0 5
14049: EQUAL
14050: AND
14051: IFFALSE 14075
// begin staticMines := Delete ( staticMines , j ) ;
14053: LD_ADDR_EXP 16
14057: PUSH
14058: LD_EXP 16
14062: PPUSH
14063: LD_VAR 0 2
14067: PPUSH
14068: CALL_OW 3
14072: ST_TO_ADDR
// break ;
14073: GO 14077
// end ;
14075: GO 14006
14077: POP
14078: POP
// end ; end ;
14079: GO 13859
14081: POP
14082: POP
// end ;
14083: PPOPN 5
14085: END
// every 1 1$00 trigger GameType = 1 and game and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_btype , b_factory ] ) do var i , base , tmp , _target , _targetAlt , attackers , e ;
14086: LD_EXP 2
14090: PUSH
14091: LD_INT 1
14093: EQUAL
14094: PUSH
14095: LD_EXP 3
14099: AND
14100: PUSH
14101: LD_EXP 36
14105: PUSH
14106: LD_EXP 7
14110: ARRAY
14111: PPUSH
14112: LD_INT 30
14114: PUSH
14115: LD_INT 3
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: PPUSH
14122: CALL_OW 72
14126: AND
14127: IFFALSE 14831
14129: GO 14131
14131: DISABLE
14132: LD_INT 0
14134: PPUSH
14135: PPUSH
14136: PPUSH
14137: PPUSH
14138: PPUSH
14139: PPUSH
14140: PPUSH
// begin repeat wait ( 9 9$00 ) ;
14141: LD_INT 18900
14143: PPUSH
14144: CALL_OW 67
// base := mc_rus_1 ;
14148: LD_ADDR_VAR 0 2
14152: PUSH
14153: LD_EXP 7
14157: ST_TO_ADDR
// if not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
14158: LD_EXP 36
14162: PUSH
14163: LD_VAR 0 2
14167: ARRAY
14168: PPUSH
14169: LD_INT 30
14171: PUSH
14172: LD_INT 3
14174: PUSH
14175: EMPTY
14176: LIST
14177: LIST
14178: PPUSH
14179: CALL_OW 72
14183: NOT
14184: IFFALSE 14188
// continue ;
14186: GO 14141
// tmp := [ [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] ] ;
14188: LD_ADDR_VAR 0 3
14192: PUSH
14193: LD_INT 24
14195: PUSH
14196: LD_INT 1
14198: PUSH
14199: LD_INT 3
14201: PUSH
14202: LD_INT 47
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: PUSH
14211: LD_INT 24
14213: PUSH
14214: LD_INT 1
14216: PUSH
14217: LD_INT 3
14219: PUSH
14220: LD_INT 47
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: PUSH
14229: LD_INT 24
14231: PUSH
14232: LD_INT 1
14234: PUSH
14235: LD_INT 3
14237: PUSH
14238: LD_INT 47
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: PUSH
14247: LD_INT 24
14249: PUSH
14250: LD_INT 1
14252: PUSH
14253: LD_INT 3
14255: PUSH
14256: LD_INT 46
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
14271: LD_VAR 0 2
14275: PPUSH
14276: LD_VAR 0 3
14280: PPUSH
14281: CALL 85839 0 2
// repeat wait ( 0 0$1 ) ;
14285: LD_INT 35
14287: PPUSH
14288: CALL_OW 67
// until MC_GetProduceList ( base ) < 2 ;
14292: LD_VAR 0 2
14296: PPUSH
14297: CALL 86187 0 1
14301: PUSH
14302: LD_INT 2
14304: LESS
14305: IFFALSE 14285
// wait ( 0 0$30 ) ;
14307: LD_INT 1050
14309: PPUSH
14310: CALL_OW 67
// if legChangeSide and FilterAllUnits ( [ f_side , 8 ] ) then
14314: LD_EXP 21
14318: PUSH
14319: LD_INT 22
14321: PUSH
14322: LD_INT 8
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PPUSH
14329: CALL_OW 69
14333: AND
14334: IFFALSE 14365
// _targetAlt := [ [ 107 , 58 ] , [ 128 , 79 ] ] ;
14336: LD_ADDR_VAR 0 5
14340: PUSH
14341: LD_INT 107
14343: PUSH
14344: LD_INT 58
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: PUSH
14351: LD_INT 128
14353: PUSH
14354: LD_INT 79
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: ST_TO_ADDR
// _target := [ [ 99 , 35 ] , [ 111 , 29 ] , [ 122 , 22 ] ] ;
14365: LD_ADDR_VAR 0 4
14369: PUSH
14370: LD_INT 99
14372: PUSH
14373: LD_INT 35
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PUSH
14380: LD_INT 111
14382: PUSH
14383: LD_INT 29
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PUSH
14390: LD_INT 122
14392: PUSH
14393: LD_INT 22
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: LIST
14404: ST_TO_ADDR
// if _targetAlt then
14405: LD_VAR 0 5
14409: IFFALSE 14442
// _target := [ _target , _targetAlt ] [ rand ( 1 , 2 ) ] ;
14411: LD_ADDR_VAR 0 4
14415: PUSH
14416: LD_VAR 0 4
14420: PUSH
14421: LD_VAR 0 5
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PUSH
14430: LD_INT 1
14432: PPUSH
14433: LD_INT 2
14435: PPUSH
14436: CALL_OW 12
14440: ARRAY
14441: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_crane ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_siberium_rocket ] ] ) ) ;
14442: LD_ADDR_VAR 0 6
14446: PUSH
14447: LD_EXP 55
14451: PUSH
14452: LD_VAR 0 2
14456: ARRAY
14457: PUSH
14458: LD_EXP 58
14462: PUSH
14463: LD_VAR 0 2
14467: ARRAY
14468: PUSH
14469: LD_EXP 55
14473: PUSH
14474: LD_VAR 0 2
14478: ARRAY
14479: PPUSH
14480: LD_INT 2
14482: PUSH
14483: LD_INT 34
14485: PUSH
14486: LD_INT 51
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: PUSH
14493: LD_INT 34
14495: PUSH
14496: LD_INT 52
14498: PUSH
14499: EMPTY
14500: LIST
14501: LIST
14502: PUSH
14503: LD_INT 34
14505: PUSH
14506: LD_INT 53
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PUSH
14513: LD_INT 34
14515: PUSH
14516: LD_INT 48
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: PPUSH
14530: CALL_OW 72
14534: UNION
14535: DIFF
14536: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
14537: LD_ADDR_EXP 55
14541: PUSH
14542: LD_EXP 55
14546: PPUSH
14547: LD_VAR 0 2
14551: PPUSH
14552: LD_EXP 55
14556: PUSH
14557: LD_VAR 0 2
14561: ARRAY
14562: PUSH
14563: LD_VAR 0 6
14567: DIFF
14568: PPUSH
14569: CALL_OW 1
14573: ST_TO_ADDR
// if not attackers then
14574: LD_VAR 0 6
14578: NOT
14579: IFFALSE 14583
// continue ;
14581: GO 14141
// ComAgressiveMove ( attackers , 84 , 36 ) ;
14583: LD_VAR 0 6
14587: PPUSH
14588: LD_INT 84
14590: PPUSH
14591: LD_INT 36
14593: PPUSH
14594: CALL_OW 114
// for i = 1 to _target do
14598: LD_ADDR_VAR 0 1
14602: PUSH
14603: DOUBLE
14604: LD_INT 1
14606: DEC
14607: ST_TO_ADDR
14608: LD_VAR 0 4
14612: PUSH
14613: FOR_TO
14614: IFFALSE 14657
// AddComAgressiveMove ( attackers , _target [ i ] [ 1 ] , _target [ i ] [ 2 ] ) ;
14616: LD_VAR 0 6
14620: PPUSH
14621: LD_VAR 0 4
14625: PUSH
14626: LD_VAR 0 1
14630: ARRAY
14631: PUSH
14632: LD_INT 1
14634: ARRAY
14635: PPUSH
14636: LD_VAR 0 4
14640: PUSH
14641: LD_VAR 0 1
14645: ARRAY
14646: PUSH
14647: LD_INT 2
14649: ARRAY
14650: PPUSH
14651: CALL_OW 174
14655: GO 14613
14657: POP
14658: POP
// repeat wait ( 0 0$1 ) ;
14659: LD_INT 35
14661: PPUSH
14662: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
14666: LD_VAR 0 6
14670: PPUSH
14671: LD_INT 60
14673: PUSH
14674: EMPTY
14675: LIST
14676: PPUSH
14677: CALL_OW 72
14681: NOT
14682: IFFALSE 14659
// repeat wait ( 0 0$1 ) ;
14684: LD_INT 35
14686: PPUSH
14687: CALL_OW 67
// for i in attackers do
14691: LD_ADDR_VAR 0 1
14695: PUSH
14696: LD_VAR 0 6
14700: PUSH
14701: FOR_IN
14702: IFFALSE 14798
// begin if IsDead ( i ) then
14704: LD_VAR 0 1
14708: PPUSH
14709: CALL_OW 301
14713: IFFALSE 14733
// begin attackers := attackers diff i ;
14715: LD_ADDR_VAR 0 6
14719: PUSH
14720: LD_VAR 0 6
14724: PUSH
14725: LD_VAR 0 1
14729: DIFF
14730: ST_TO_ADDR
// continue ;
14731: GO 14701
// end ; if HasTask ( i ) then
14733: LD_VAR 0 1
14737: PPUSH
14738: CALL_OW 314
14742: IFFALSE 14746
// continue ;
14744: GO 14701
// e := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ;
14746: LD_ADDR_VAR 0 7
14750: PUSH
14751: LD_INT 81
14753: PUSH
14754: LD_INT 3
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: PPUSH
14761: CALL_OW 69
14765: PPUSH
14766: LD_VAR 0 1
14770: PPUSH
14771: CALL_OW 74
14775: ST_TO_ADDR
// if e then
14776: LD_VAR 0 7
14780: IFFALSE 14796
// ComAttackUnit ( i , e ) ;
14782: LD_VAR 0 1
14786: PPUSH
14787: LD_VAR 0 7
14791: PPUSH
14792: CALL_OW 115
// end ;
14796: GO 14701
14798: POP
14799: POP
// until not attackers ;
14800: LD_VAR 0 6
14804: NOT
14805: IFFALSE 14684
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
14807: LD_EXP 36
14811: PUSH
14812: LD_VAR 0 2
14816: ARRAY
14817: PPUSH
14818: LD_INT 50
14820: PUSH
14821: EMPTY
14822: LIST
14823: PPUSH
14824: CALL_OW 72
14828: NOT
14829: IFFALSE 14141
// end ;
14831: PPOPN 7
14833: END
// every 1 1$00 trigger GameType = 1 and game and UnitFilter ( mc_bases [ mc_rus_2 ] , [ f_btype , b_factory ] ) do var i , base , tmp , _target , attackers , teleport , e ;
14834: LD_EXP 2
14838: PUSH
14839: LD_INT 1
14841: EQUAL
14842: PUSH
14843: LD_EXP 3
14847: AND
14848: PUSH
14849: LD_EXP 36
14853: PUSH
14854: LD_EXP 8
14858: ARRAY
14859: PPUSH
14860: LD_INT 30
14862: PUSH
14863: LD_INT 3
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PPUSH
14870: CALL_OW 72
14874: AND
14875: IFFALSE 15616
14877: GO 14879
14879: DISABLE
14880: LD_INT 0
14882: PPUSH
14883: PPUSH
14884: PPUSH
14885: PPUSH
14886: PPUSH
14887: PPUSH
14888: PPUSH
// begin repeat wait ( 9 9$00 ) ;
14889: LD_INT 18900
14891: PPUSH
14892: CALL_OW 67
// base := mc_rus_2 ;
14896: LD_ADDR_VAR 0 2
14900: PUSH
14901: LD_EXP 8
14905: ST_TO_ADDR
// if not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
14906: LD_EXP 36
14910: PUSH
14911: LD_VAR 0 2
14915: ARRAY
14916: PPUSH
14917: LD_INT 30
14919: PUSH
14920: LD_INT 3
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PPUSH
14927: CALL_OW 72
14931: NOT
14932: IFFALSE 14936
// continue ;
14934: GO 14889
// tmp := [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_wheeled , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_wheeled , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_time_lapser ] ] ;
14936: LD_ADDR_VAR 0 3
14940: PUSH
14941: LD_INT 23
14943: PUSH
14944: LD_INT 3
14946: PUSH
14947: LD_INT 3
14949: PUSH
14950: LD_INT 47
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: PUSH
14959: LD_INT 23
14961: PUSH
14962: LD_INT 3
14964: PUSH
14965: LD_INT 3
14967: PUSH
14968: LD_INT 47
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: PUSH
14977: LD_INT 23
14979: PUSH
14980: LD_INT 3
14982: PUSH
14983: LD_INT 3
14985: PUSH
14986: LD_INT 46
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: PUSH
14995: LD_INT 23
14997: PUSH
14998: LD_INT 1
15000: PUSH
15001: LD_INT 3
15003: PUSH
15004: LD_INT 46
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: PUSH
15013: LD_INT 21
15015: PUSH
15016: LD_INT 1
15018: PUSH
15019: LD_INT 3
15021: PUSH
15022: LD_INT 49
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
15038: LD_VAR 0 2
15042: PPUSH
15043: LD_VAR 0 3
15047: PPUSH
15048: CALL 85839 0 2
// repeat wait ( 0 0$1 ) ;
15052: LD_INT 35
15054: PPUSH
15055: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
15059: LD_VAR 0 2
15063: PPUSH
15064: CALL 86187 0 1
15068: PUSH
15069: LD_INT 0
15071: EQUAL
15072: IFFALSE 15052
// wait ( 0 0$30 ) ;
15074: LD_INT 1050
15076: PPUSH
15077: CALL_OW 67
// _target := [ [ 164 , 198 ] , [ 176 , 180 ] ] ;
15081: LD_ADDR_VAR 0 4
15085: PUSH
15086: LD_INT 164
15088: PUSH
15089: LD_INT 198
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: PUSH
15096: LD_INT 176
15098: PUSH
15099: LD_INT 180
15101: PUSH
15102: EMPTY
15103: LIST
15104: LIST
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_crane ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_siberium_rocket ] ] ) ) ;
15110: LD_ADDR_VAR 0 5
15114: PUSH
15115: LD_EXP 55
15119: PUSH
15120: LD_VAR 0 2
15124: ARRAY
15125: PUSH
15126: LD_EXP 58
15130: PUSH
15131: LD_VAR 0 2
15135: ARRAY
15136: PUSH
15137: LD_EXP 55
15141: PUSH
15142: LD_VAR 0 2
15146: ARRAY
15147: PPUSH
15148: LD_INT 2
15150: PUSH
15151: LD_INT 34
15153: PUSH
15154: LD_INT 51
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: PUSH
15161: LD_INT 34
15163: PUSH
15164: LD_INT 52
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: PUSH
15171: LD_INT 34
15173: PUSH
15174: LD_INT 53
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: PUSH
15181: LD_INT 34
15183: PUSH
15184: LD_INT 48
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: PPUSH
15198: CALL_OW 72
15202: UNION
15203: DIFF
15204: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
15205: LD_ADDR_EXP 55
15209: PUSH
15210: LD_EXP 55
15214: PPUSH
15215: LD_VAR 0 2
15219: PPUSH
15220: LD_EXP 55
15224: PUSH
15225: LD_VAR 0 2
15229: ARRAY
15230: PUSH
15231: LD_VAR 0 5
15235: DIFF
15236: PPUSH
15237: CALL_OW 1
15241: ST_TO_ADDR
// if not attackers then
15242: LD_VAR 0 5
15246: NOT
15247: IFFALSE 15251
// continue ;
15249: GO 14889
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
15251: LD_ADDR_VAR 0 6
15255: PUSH
15256: LD_INT 22
15258: PUSH
15259: LD_INT 3
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: PUSH
15266: LD_INT 30
15268: PUSH
15269: LD_INT 34
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: PPUSH
15280: CALL_OW 69
15284: ST_TO_ADDR
// for i in attackers do
15285: LD_ADDR_VAR 0 1
15289: PUSH
15290: LD_VAR 0 5
15294: PUSH
15295: FOR_IN
15296: IFFALSE 15356
// begin if teleport then
15298: LD_VAR 0 6
15302: IFFALSE 15339
// begin ComEnterUnit ( i , teleport [ 1 ] ) ;
15304: LD_VAR 0 1
15308: PPUSH
15309: LD_VAR 0 6
15313: PUSH
15314: LD_INT 1
15316: ARRAY
15317: PPUSH
15318: CALL_OW 120
// AddComAgressiveMove ( i , 129 , 215 ) ;
15322: LD_VAR 0 1
15326: PPUSH
15327: LD_INT 129
15329: PPUSH
15330: LD_INT 215
15332: PPUSH
15333: CALL_OW 174
// end else
15337: GO 15354
// AddComAgressiveMove ( i , 125 , 157 ) ;
15339: LD_VAR 0 1
15343: PPUSH
15344: LD_INT 125
15346: PPUSH
15347: LD_INT 157
15349: PPUSH
15350: CALL_OW 174
// end ;
15354: GO 15295
15356: POP
15357: POP
// repeat wait ( 0 0$1 ) ;
15358: LD_INT 35
15360: PPUSH
15361: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
15365: LD_VAR 0 5
15369: PPUSH
15370: LD_INT 60
15372: PUSH
15373: EMPTY
15374: LIST
15375: PPUSH
15376: CALL_OW 72
15380: NOT
15381: IFFALSE 15358
// for i = 1 to _target do
15383: LD_ADDR_VAR 0 1
15387: PUSH
15388: DOUBLE
15389: LD_INT 1
15391: DEC
15392: ST_TO_ADDR
15393: LD_VAR 0 4
15397: PUSH
15398: FOR_TO
15399: IFFALSE 15442
// AddComAgressiveMove ( attackers , _target [ i ] [ 1 ] , _target [ i ] [ 2 ] ) ;
15401: LD_VAR 0 5
15405: PPUSH
15406: LD_VAR 0 4
15410: PUSH
15411: LD_VAR 0 1
15415: ARRAY
15416: PUSH
15417: LD_INT 1
15419: ARRAY
15420: PPUSH
15421: LD_VAR 0 4
15425: PUSH
15426: LD_VAR 0 1
15430: ARRAY
15431: PUSH
15432: LD_INT 2
15434: ARRAY
15435: PPUSH
15436: CALL_OW 174
15440: GO 15398
15442: POP
15443: POP
// repeat wait ( 0 0$1 ) ;
15444: LD_INT 35
15446: PPUSH
15447: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
15451: LD_VAR 0 5
15455: PPUSH
15456: LD_INT 60
15458: PUSH
15459: EMPTY
15460: LIST
15461: PPUSH
15462: CALL_OW 72
15466: NOT
15467: IFFALSE 15444
// repeat wait ( 0 0$1 ) ;
15469: LD_INT 35
15471: PPUSH
15472: CALL_OW 67
// for i in attackers do
15476: LD_ADDR_VAR 0 1
15480: PUSH
15481: LD_VAR 0 5
15485: PUSH
15486: FOR_IN
15487: IFFALSE 15583
// begin if IsDead ( i ) then
15489: LD_VAR 0 1
15493: PPUSH
15494: CALL_OW 301
15498: IFFALSE 15518
// begin attackers := attackers diff i ;
15500: LD_ADDR_VAR 0 5
15504: PUSH
15505: LD_VAR 0 5
15509: PUSH
15510: LD_VAR 0 1
15514: DIFF
15515: ST_TO_ADDR
// continue ;
15516: GO 15486
// end ; if HasTask ( i ) then
15518: LD_VAR 0 1
15522: PPUSH
15523: CALL_OW 314
15527: IFFALSE 15531
// continue ;
15529: GO 15486
// e := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ;
15531: LD_ADDR_VAR 0 7
15535: PUSH
15536: LD_INT 81
15538: PUSH
15539: LD_INT 3
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PPUSH
15546: CALL_OW 69
15550: PPUSH
15551: LD_VAR 0 1
15555: PPUSH
15556: CALL_OW 74
15560: ST_TO_ADDR
// if e then
15561: LD_VAR 0 7
15565: IFFALSE 15581
// ComAttackUnit ( i , e ) ;
15567: LD_VAR 0 1
15571: PPUSH
15572: LD_VAR 0 7
15576: PPUSH
15577: CALL_OW 115
// end ;
15581: GO 15486
15583: POP
15584: POP
// until not attackers ;
15585: LD_VAR 0 5
15589: NOT
15590: IFFALSE 15469
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
15592: LD_EXP 36
15596: PUSH
15597: LD_VAR 0 2
15601: ARRAY
15602: PPUSH
15603: LD_INT 50
15605: PUSH
15606: EMPTY
15607: LIST
15608: PPUSH
15609: CALL_OW 72
15613: NOT
15614: IFFALSE 14889
// end ;
15616: PPOPN 7
15618: END
// every 1 1$00 trigger GameType = 1 and game and not legChangeSide and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) and UnitFilter ( mc_bases [ mc_leg ] , [ f_btype , b_factory ] ) do var i , base , tmp , flags , _target , attackers ;
15619: LD_EXP 2
15623: PUSH
15624: LD_INT 1
15626: EQUAL
15627: PUSH
15628: LD_EXP 3
15632: AND
15633: PUSH
15634: LD_EXP 21
15638: NOT
15639: AND
15640: PUSH
15641: LD_INT 22
15643: PUSH
15644: LD_INT 8
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 34
15653: PUSH
15654: LD_INT 31
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PPUSH
15665: CALL_OW 69
15669: AND
15670: PUSH
15671: LD_EXP 36
15675: PUSH
15676: LD_EXP 6
15680: ARRAY
15681: PPUSH
15682: LD_INT 30
15684: PUSH
15685: LD_INT 3
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PPUSH
15692: CALL_OW 72
15696: AND
15697: IFFALSE 16195
15699: GO 15701
15701: DISABLE
15702: LD_INT 0
15704: PPUSH
15705: PPUSH
15706: PPUSH
15707: PPUSH
15708: PPUSH
15709: PPUSH
// begin repeat wait ( [ 10 10$00 , 9 9$30 , 9 9$00 ] [ Difficulty ] ) ;
15710: LD_INT 21000
15712: PUSH
15713: LD_INT 19950
15715: PUSH
15716: LD_INT 18900
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: LIST
15723: PUSH
15724: LD_OWVAR 67
15728: ARRAY
15729: PPUSH
15730: CALL_OW 67
// base := mc_leg ;
15734: LD_ADDR_VAR 0 2
15738: PUSH
15739: LD_EXP 6
15743: ST_TO_ADDR
// if not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
15744: LD_EXP 36
15748: PUSH
15749: LD_VAR 0 2
15753: ARRAY
15754: PPUSH
15755: LD_INT 30
15757: PUSH
15758: LD_INT 3
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PPUSH
15765: CALL_OW 72
15769: NOT
15770: IFFALSE 15774
// continue ;
15772: GO 15710
// if legChangeSide then
15774: LD_EXP 21
15778: IFFALSE 15782
// exit ;
15780: GO 16195
// tmp := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] ;
15782: LD_ADDR_VAR 0 3
15786: PUSH
15787: LD_INT 11
15789: PUSH
15790: LD_INT 1
15792: PUSH
15793: LD_INT 2
15795: PUSH
15796: LD_INT 24
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: PUSH
15805: LD_INT 11
15807: PUSH
15808: LD_INT 1
15810: PUSH
15811: LD_INT 2
15813: PUSH
15814: LD_INT 24
15816: PUSH
15817: EMPTY
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: PUSH
15823: LD_INT 11
15825: PUSH
15826: LD_INT 1
15828: PUSH
15829: LD_INT 2
15831: PUSH
15832: LD_INT 24
15834: PUSH
15835: EMPTY
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: PUSH
15841: LD_INT 11
15843: PUSH
15844: LD_INT 1
15846: PUSH
15847: LD_INT 2
15849: PUSH
15850: LD_INT 24
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: PUSH
15859: LD_INT 11
15861: PUSH
15862: LD_INT 1
15864: PUSH
15865: LD_INT 2
15867: PUSH
15868: LD_INT 24
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
15884: LD_VAR 0 2
15888: PPUSH
15889: LD_VAR 0 3
15893: PPUSH
15894: CALL 85839 0 2
// repeat wait ( 0 0$1 ) ;
15898: LD_INT 35
15900: PPUSH
15901: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
15905: LD_VAR 0 2
15909: PPUSH
15910: CALL 86187 0 1
15914: PUSH
15915: LD_INT 0
15917: EQUAL
15918: IFFALSE 15898
// wait ( 0 0$30 ) ;
15920: LD_INT 1050
15922: PPUSH
15923: CALL_OW 67
// _target := [ [ 113 , 63 ] , [ 119 , 15 ] ] ;
15927: LD_ADDR_VAR 0 5
15931: PUSH
15932: LD_INT 113
15934: PUSH
15935: LD_INT 63
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PUSH
15942: LD_INT 119
15944: PUSH
15945: LD_INT 15
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
15956: LD_ADDR_VAR 0 4
15960: PUSH
15961: LD_INT 0
15963: PUSH
15964: LD_INT 0
15966: PUSH
15967: LD_INT 0
15969: PUSH
15970: LD_INT 0
15972: PUSH
15973: LD_INT 0
15975: PUSH
15976: LD_INT 0
15978: PUSH
15979: LD_INT 0
15981: PUSH
15982: LD_INT 0
15984: PUSH
15985: LD_INT 1
15987: PUSH
15988: LD_INT 0
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ) ) ;
16003: LD_ADDR_VAR 0 6
16007: PUSH
16008: LD_EXP 55
16012: PUSH
16013: LD_VAR 0 2
16017: ARRAY
16018: PUSH
16019: LD_EXP 58
16023: PUSH
16024: LD_VAR 0 2
16028: ARRAY
16029: PUSH
16030: LD_EXP 55
16034: PUSH
16035: LD_VAR 0 2
16039: ARRAY
16040: PPUSH
16041: LD_INT 2
16043: PUSH
16044: LD_INT 34
16046: PUSH
16047: LD_INT 32
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: LD_INT 34
16056: PUSH
16057: LD_INT 31
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: LIST
16068: PPUSH
16069: CALL_OW 72
16073: UNION
16074: DIFF
16075: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
16076: LD_ADDR_EXP 55
16080: PUSH
16081: LD_EXP 55
16085: PPUSH
16086: LD_VAR 0 2
16090: PPUSH
16091: LD_EXP 55
16095: PUSH
16096: LD_VAR 0 2
16100: ARRAY
16101: PUSH
16102: LD_VAR 0 6
16106: DIFF
16107: PPUSH
16108: CALL_OW 1
16112: ST_TO_ADDR
// if not attackers then
16113: LD_VAR 0 6
16117: NOT
16118: IFFALSE 16122
// continue ;
16120: GO 15710
// repeat wait ( 0 0$1 ) ;
16122: LD_INT 35
16124: PPUSH
16125: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
16129: LD_VAR 0 6
16133: PPUSH
16134: LD_INT 60
16136: PUSH
16137: EMPTY
16138: LIST
16139: PPUSH
16140: CALL_OW 72
16144: NOT
16145: IFFALSE 16122
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
16147: LD_VAR 0 2
16151: PPUSH
16152: LD_VAR 0 6
16156: PPUSH
16157: LD_VAR 0 5
16161: PPUSH
16162: LD_VAR 0 4
16166: PPUSH
16167: CALL 86024 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
16171: LD_EXP 36
16175: PUSH
16176: LD_VAR 0 2
16180: ARRAY
16181: PPUSH
16182: LD_INT 50
16184: PUSH
16185: EMPTY
16186: LIST
16187: PPUSH
16188: CALL_OW 72
16192: NOT
16193: IFFALSE 15710
// end ;
16195: PPOPN 6
16197: END
// every 1 1$00 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) and UnitFilter ( mc_bases [ mc_leg ] , [ f_btype , b_factory ] ) do var i , base , flags , tmp , _target , attackers ;
16198: LD_EXP 2
16202: PUSH
16203: LD_INT 1
16205: EQUAL
16206: PUSH
16207: LD_EXP 3
16211: AND
16212: PUSH
16213: LD_INT 22
16215: PUSH
16216: LD_INT 8
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: PUSH
16223: LD_INT 34
16225: PUSH
16226: LD_INT 31
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: PPUSH
16237: CALL_OW 69
16241: AND
16242: PUSH
16243: LD_EXP 36
16247: PUSH
16248: LD_EXP 6
16252: ARRAY
16253: PPUSH
16254: LD_INT 30
16256: PUSH
16257: LD_INT 3
16259: PUSH
16260: EMPTY
16261: LIST
16262: LIST
16263: PPUSH
16264: CALL_OW 72
16268: AND
16269: IFFALSE 16800
16271: GO 16273
16273: DISABLE
16274: LD_INT 0
16276: PPUSH
16277: PPUSH
16278: PPUSH
16279: PPUSH
16280: PPUSH
16281: PPUSH
// begin repeat wait ( 9 9$00 ) ;
16282: LD_INT 18900
16284: PPUSH
16285: CALL_OW 67
// base := mc_leg ;
16289: LD_ADDR_VAR 0 2
16293: PUSH
16294: LD_EXP 6
16298: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) or not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
16299: LD_INT 22
16301: PUSH
16302: LD_INT 8
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: PUSH
16309: LD_INT 34
16311: PUSH
16312: LD_INT 31
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: PPUSH
16323: CALL_OW 69
16327: NOT
16328: PUSH
16329: LD_EXP 36
16333: PUSH
16334: LD_VAR 0 2
16338: ARRAY
16339: PPUSH
16340: LD_INT 30
16342: PUSH
16343: LD_INT 3
16345: PUSH
16346: EMPTY
16347: LIST
16348: LIST
16349: PPUSH
16350: CALL_OW 72
16354: NOT
16355: OR
16356: IFFALSE 16360
// continue ;
16358: GO 16282
// if legChangeSide then
16360: LD_EXP 21
16364: IFFALSE 16368
// exit ;
16366: GO 16800
// tmp := [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ;
16368: LD_ADDR_VAR 0 4
16372: PUSH
16373: LD_INT 13
16375: PUSH
16376: LD_INT 1
16378: PUSH
16379: LD_INT 2
16381: PUSH
16382: LD_INT 28
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: PUSH
16391: LD_INT 13
16393: PUSH
16394: LD_INT 1
16396: PUSH
16397: LD_INT 2
16399: PUSH
16400: LD_INT 28
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: PUSH
16409: LD_INT 13
16411: PUSH
16412: LD_INT 1
16414: PUSH
16415: LD_INT 2
16417: PUSH
16418: LD_INT 28
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: PUSH
16427: LD_INT 13
16429: PUSH
16430: LD_INT 1
16432: PUSH
16433: LD_INT 2
16435: PUSH
16436: LD_INT 27
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 13
16447: PUSH
16448: LD_INT 1
16450: PUSH
16451: LD_INT 2
16453: PUSH
16454: LD_INT 27
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: PUSH
16463: LD_INT 13
16465: PUSH
16466: LD_INT 1
16468: PUSH
16469: LD_INT 2
16471: PUSH
16472: LD_INT 29
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
16489: LD_VAR 0 2
16493: PPUSH
16494: LD_VAR 0 4
16498: PPUSH
16499: CALL 85839 0 2
// repeat wait ( 0 0$1 ) ;
16503: LD_INT 35
16505: PPUSH
16506: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
16510: LD_VAR 0 2
16514: PPUSH
16515: CALL 86187 0 1
16519: PUSH
16520: LD_INT 0
16522: EQUAL
16523: IFFALSE 16503
// wait ( 0 0$30 ) ;
16525: LD_INT 1050
16527: PPUSH
16528: CALL_OW 67
// _target := [ [ 165 , 89 ] , [ 190 , 123 ] ] ;
16532: LD_ADDR_VAR 0 5
16536: PUSH
16537: LD_INT 165
16539: PUSH
16540: LD_INT 89
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PUSH
16547: LD_INT 190
16549: PUSH
16550: LD_INT 123
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
16561: LD_ADDR_VAR 0 3
16565: PUSH
16566: LD_INT 0
16568: PUSH
16569: LD_INT 0
16571: PUSH
16572: LD_INT 0
16574: PUSH
16575: LD_INT 0
16577: PUSH
16578: LD_INT 0
16580: PUSH
16581: LD_INT 0
16583: PUSH
16584: LD_INT 0
16586: PUSH
16587: LD_INT 0
16589: PUSH
16590: LD_INT 1
16592: PUSH
16593: LD_INT 0
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ) ) ;
16608: LD_ADDR_VAR 0 6
16612: PUSH
16613: LD_EXP 55
16617: PUSH
16618: LD_VAR 0 2
16622: ARRAY
16623: PUSH
16624: LD_EXP 58
16628: PUSH
16629: LD_VAR 0 2
16633: ARRAY
16634: PUSH
16635: LD_EXP 55
16639: PUSH
16640: LD_VAR 0 2
16644: ARRAY
16645: PPUSH
16646: LD_INT 2
16648: PUSH
16649: LD_INT 34
16651: PUSH
16652: LD_INT 32
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: PUSH
16659: LD_INT 34
16661: PUSH
16662: LD_INT 31
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: LIST
16673: PPUSH
16674: CALL_OW 72
16678: UNION
16679: DIFF
16680: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
16681: LD_ADDR_EXP 55
16685: PUSH
16686: LD_EXP 55
16690: PPUSH
16691: LD_VAR 0 2
16695: PPUSH
16696: LD_EXP 55
16700: PUSH
16701: LD_VAR 0 2
16705: ARRAY
16706: PUSH
16707: LD_VAR 0 6
16711: DIFF
16712: PPUSH
16713: CALL_OW 1
16717: ST_TO_ADDR
// if not attackers then
16718: LD_VAR 0 6
16722: NOT
16723: IFFALSE 16727
// continue ;
16725: GO 16282
// repeat wait ( 0 0$1 ) ;
16727: LD_INT 35
16729: PPUSH
16730: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
16734: LD_VAR 0 6
16738: PPUSH
16739: LD_INT 60
16741: PUSH
16742: EMPTY
16743: LIST
16744: PPUSH
16745: CALL_OW 72
16749: NOT
16750: IFFALSE 16727
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
16752: LD_VAR 0 2
16756: PPUSH
16757: LD_VAR 0 6
16761: PPUSH
16762: LD_VAR 0 5
16766: PPUSH
16767: LD_VAR 0 3
16771: PPUSH
16772: CALL 86024 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
16776: LD_EXP 36
16780: PUSH
16781: LD_VAR 0 2
16785: ARRAY
16786: PPUSH
16787: LD_INT 50
16789: PUSH
16790: EMPTY
16791: LIST
16792: PPUSH
16793: CALL_OW 72
16797: NOT
16798: IFFALSE 16282
// end ;
16800: PPOPN 6
16802: END
// every 1 1$00 trigger GameType = 1 and game and legChangeSide and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) and UnitFilter ( mc_bases [ mc_leg ] , [ f_btype , b_factory ] ) do var i , base , tmp , _target , attackers , flags ;
16803: LD_EXP 2
16807: PUSH
16808: LD_INT 1
16810: EQUAL
16811: PUSH
16812: LD_EXP 3
16816: AND
16817: PUSH
16818: LD_EXP 21
16822: AND
16823: PUSH
16824: LD_INT 22
16826: PUSH
16827: LD_INT 8
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: PUSH
16834: LD_INT 34
16836: PUSH
16837: LD_INT 31
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PPUSH
16848: CALL_OW 69
16852: AND
16853: PUSH
16854: LD_EXP 36
16858: PUSH
16859: LD_EXP 6
16863: ARRAY
16864: PPUSH
16865: LD_INT 30
16867: PUSH
16868: LD_INT 3
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: PPUSH
16875: CALL_OW 72
16879: AND
16880: IFFALSE 17422
16882: GO 16884
16884: DISABLE
16885: LD_INT 0
16887: PPUSH
16888: PPUSH
16889: PPUSH
16890: PPUSH
16891: PPUSH
16892: PPUSH
// begin repeat wait ( 12 12$00 ) ;
16893: LD_INT 25200
16895: PPUSH
16896: CALL_OW 67
// base := mc_leg ;
16900: LD_ADDR_VAR 0 2
16904: PUSH
16905: LD_EXP 6
16909: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) or not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
16910: LD_INT 22
16912: PUSH
16913: LD_INT 8
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: PUSH
16920: LD_INT 34
16922: PUSH
16923: LD_INT 31
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: PPUSH
16934: CALL_OW 69
16938: NOT
16939: PUSH
16940: LD_EXP 36
16944: PUSH
16945: LD_VAR 0 2
16949: ARRAY
16950: PPUSH
16951: LD_INT 30
16953: PUSH
16954: LD_INT 3
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PPUSH
16961: CALL_OW 72
16965: NOT
16966: OR
16967: IFFALSE 16971
// continue ;
16969: GO 16893
// tmp := [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ;
16971: LD_ADDR_VAR 0 3
16975: PUSH
16976: LD_INT 13
16978: PUSH
16979: LD_INT 1
16981: PUSH
16982: LD_INT 2
16984: PUSH
16985: LD_INT 28
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 13
16996: PUSH
16997: LD_INT 1
16999: PUSH
17000: LD_INT 2
17002: PUSH
17003: LD_INT 28
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: PUSH
17012: LD_INT 13
17014: PUSH
17015: LD_INT 1
17017: PUSH
17018: LD_INT 2
17020: PUSH
17021: LD_INT 28
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: PUSH
17030: LD_INT 13
17032: PUSH
17033: LD_INT 1
17035: PUSH
17036: LD_INT 2
17038: PUSH
17039: LD_INT 27
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: PUSH
17048: LD_INT 13
17050: PUSH
17051: LD_INT 1
17053: PUSH
17054: LD_INT 2
17056: PUSH
17057: LD_INT 27
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 13
17068: PUSH
17069: LD_INT 1
17071: PUSH
17072: LD_INT 2
17074: PUSH
17075: LD_INT 29
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: PUSH
17084: LD_INT 13
17086: PUSH
17087: LD_INT 1
17089: PUSH
17090: LD_INT 2
17092: PUSH
17093: LD_INT 29
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
17111: LD_VAR 0 2
17115: PPUSH
17116: LD_VAR 0 3
17120: PPUSH
17121: CALL 85839 0 2
// repeat wait ( 0 0$1 ) ;
17125: LD_INT 35
17127: PPUSH
17128: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
17132: LD_VAR 0 2
17136: PPUSH
17137: CALL 86187 0 1
17141: PUSH
17142: LD_INT 0
17144: EQUAL
17145: IFFALSE 17125
// wait ( 0 0$30 ) ;
17147: LD_INT 1050
17149: PPUSH
17150: CALL_OW 67
// _target := [ [ 110 , 63 ] , [ 92 , 72 ] ] ;
17154: LD_ADDR_VAR 0 4
17158: PUSH
17159: LD_INT 110
17161: PUSH
17162: LD_INT 63
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: PUSH
17169: LD_INT 92
17171: PUSH
17172: LD_INT 72
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
17183: LD_ADDR_VAR 0 6
17187: PUSH
17188: LD_INT 0
17190: PUSH
17191: LD_INT 0
17193: PUSH
17194: LD_INT 0
17196: PUSH
17197: LD_INT 0
17199: PUSH
17200: LD_INT 0
17202: PUSH
17203: LD_INT 0
17205: PUSH
17206: LD_INT 0
17208: PUSH
17209: LD_INT 0
17211: PUSH
17212: LD_INT 1
17214: PUSH
17215: LD_INT 0
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ) ) ;
17230: LD_ADDR_VAR 0 5
17234: PUSH
17235: LD_EXP 55
17239: PUSH
17240: LD_VAR 0 2
17244: ARRAY
17245: PUSH
17246: LD_EXP 58
17250: PUSH
17251: LD_VAR 0 2
17255: ARRAY
17256: PUSH
17257: LD_EXP 55
17261: PUSH
17262: LD_VAR 0 2
17266: ARRAY
17267: PPUSH
17268: LD_INT 2
17270: PUSH
17271: LD_INT 34
17273: PUSH
17274: LD_INT 32
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PUSH
17281: LD_INT 34
17283: PUSH
17284: LD_INT 31
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: LIST
17295: PPUSH
17296: CALL_OW 72
17300: UNION
17301: DIFF
17302: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
17303: LD_ADDR_EXP 55
17307: PUSH
17308: LD_EXP 55
17312: PPUSH
17313: LD_VAR 0 2
17317: PPUSH
17318: LD_EXP 55
17322: PUSH
17323: LD_VAR 0 2
17327: ARRAY
17328: PUSH
17329: LD_VAR 0 5
17333: DIFF
17334: PPUSH
17335: CALL_OW 1
17339: ST_TO_ADDR
// if not attackers then
17340: LD_VAR 0 5
17344: NOT
17345: IFFALSE 17349
// continue ;
17347: GO 16893
// repeat wait ( 0 0$1 ) ;
17349: LD_INT 35
17351: PPUSH
17352: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
17356: LD_VAR 0 5
17360: PPUSH
17361: LD_INT 60
17363: PUSH
17364: EMPTY
17365: LIST
17366: PPUSH
17367: CALL_OW 72
17371: NOT
17372: IFFALSE 17349
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
17374: LD_VAR 0 2
17378: PPUSH
17379: LD_VAR 0 5
17383: PPUSH
17384: LD_VAR 0 4
17388: PPUSH
17389: LD_VAR 0 6
17393: PPUSH
17394: CALL 86024 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
17398: LD_EXP 36
17402: PUSH
17403: LD_VAR 0 2
17407: ARRAY
17408: PPUSH
17409: LD_INT 50
17411: PUSH
17412: EMPTY
17413: LIST
17414: PPUSH
17415: CALL_OW 72
17419: NOT
17420: IFFALSE 16893
// end ;
17422: PPOPN 6
17424: END
// every 1 1$00 trigger GameType = 1 and game and UnitFilter ( mc_bases [ mc_amer ] , [ f_btype , b_factory ] ) do var i , base , tmp , _target , attackers , e ;
17425: LD_EXP 2
17429: PUSH
17430: LD_INT 1
17432: EQUAL
17433: PUSH
17434: LD_EXP 3
17438: AND
17439: PUSH
17440: LD_EXP 36
17444: PUSH
17445: LD_EXP 5
17449: ARRAY
17450: PPUSH
17451: LD_INT 30
17453: PUSH
17454: LD_INT 3
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PPUSH
17461: CALL_OW 72
17465: AND
17466: IFFALSE 18048
17468: GO 17470
17470: DISABLE
17471: LD_INT 0
17473: PPUSH
17474: PPUSH
17475: PPUSH
17476: PPUSH
17477: PPUSH
17478: PPUSH
// begin repeat wait ( 12 12$00 ) ;
17479: LD_INT 25200
17481: PPUSH
17482: CALL_OW 67
// base := mc_amer ;
17486: LD_ADDR_VAR 0 2
17490: PUSH
17491: LD_EXP 5
17495: ST_TO_ADDR
// if not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
17496: LD_EXP 36
17500: PUSH
17501: LD_VAR 0 2
17505: ARRAY
17506: PPUSH
17507: LD_INT 30
17509: PUSH
17510: LD_INT 3
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: PPUSH
17517: CALL_OW 72
17521: NOT
17522: IFFALSE 17526
// continue ;
17524: GO 17479
// tmp := [ [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_medium_wheeled , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_wheeled , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_wheeled , engine_combustion , control_remote , us_rocket_launcher ] ] ;
17526: LD_ADDR_VAR 0 3
17530: PUSH
17531: LD_INT 4
17533: PUSH
17534: LD_INT 1
17536: PUSH
17537: LD_INT 2
17539: PUSH
17540: LD_INT 6
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 4
17551: PUSH
17552: LD_INT 1
17554: PUSH
17555: LD_INT 2
17557: PUSH
17558: LD_INT 6
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: PUSH
17567: LD_INT 2
17569: PUSH
17570: LD_INT 1
17572: PUSH
17573: LD_INT 2
17575: PUSH
17576: LD_INT 7
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: PUSH
17585: LD_INT 2
17587: PUSH
17588: LD_INT 1
17590: PUSH
17591: LD_INT 2
17593: PUSH
17594: LD_INT 7
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: PUSH
17603: LD_INT 2
17605: PUSH
17606: LD_INT 1
17608: PUSH
17609: LD_INT 2
17611: PUSH
17612: LD_INT 7
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
17628: LD_VAR 0 2
17632: PPUSH
17633: LD_VAR 0 3
17637: PPUSH
17638: CALL 85839 0 2
// repeat wait ( 0 0$1 ) ;
17642: LD_INT 35
17644: PPUSH
17645: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
17649: LD_VAR 0 2
17653: PPUSH
17654: CALL 86187 0 1
17658: PUSH
17659: LD_INT 0
17661: EQUAL
17662: IFFALSE 17642
// wait ( 0 0$30 ) ;
17664: LD_INT 1050
17666: PPUSH
17667: CALL_OW 67
// _target := [ [ 92 , 34 ] ] ;
17671: LD_ADDR_VAR 0 4
17675: PUSH
17676: LD_INT 92
17678: PUSH
17679: LD_INT 34
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: PUSH
17686: EMPTY
17687: LIST
17688: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_weapon , us_cargo_bay ] ) ) ;
17689: LD_ADDR_VAR 0 5
17693: PUSH
17694: LD_EXP 55
17698: PUSH
17699: LD_VAR 0 2
17703: ARRAY
17704: PUSH
17705: LD_EXP 58
17709: PUSH
17710: LD_VAR 0 2
17714: ARRAY
17715: PUSH
17716: LD_EXP 55
17720: PUSH
17721: LD_VAR 0 2
17725: ARRAY
17726: PPUSH
17727: LD_INT 34
17729: PUSH
17730: LD_INT 12
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PPUSH
17737: CALL_OW 72
17741: UNION
17742: DIFF
17743: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
17744: LD_ADDR_EXP 55
17748: PUSH
17749: LD_EXP 55
17753: PPUSH
17754: LD_VAR 0 2
17758: PPUSH
17759: LD_EXP 55
17763: PUSH
17764: LD_VAR 0 2
17768: ARRAY
17769: PUSH
17770: LD_VAR 0 5
17774: DIFF
17775: PPUSH
17776: CALL_OW 1
17780: ST_TO_ADDR
// if not attackers then
17781: LD_VAR 0 5
17785: NOT
17786: IFFALSE 17790
// continue ;
17788: GO 17479
// repeat wait ( 0 0$1 ) ;
17790: LD_INT 35
17792: PPUSH
17793: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
17797: LD_VAR 0 5
17801: PPUSH
17802: LD_INT 60
17804: PUSH
17805: EMPTY
17806: LIST
17807: PPUSH
17808: CALL_OW 72
17812: NOT
17813: IFFALSE 17790
// for i = 1 to _target do
17815: LD_ADDR_VAR 0 1
17819: PUSH
17820: DOUBLE
17821: LD_INT 1
17823: DEC
17824: ST_TO_ADDR
17825: LD_VAR 0 4
17829: PUSH
17830: FOR_TO
17831: IFFALSE 17874
// AddComAgressiveMove ( attackers , _target [ i ] [ 1 ] , _target [ i ] [ 2 ] ) ;
17833: LD_VAR 0 5
17837: PPUSH
17838: LD_VAR 0 4
17842: PUSH
17843: LD_VAR 0 1
17847: ARRAY
17848: PUSH
17849: LD_INT 1
17851: ARRAY
17852: PPUSH
17853: LD_VAR 0 4
17857: PUSH
17858: LD_VAR 0 1
17862: ARRAY
17863: PUSH
17864: LD_INT 2
17866: ARRAY
17867: PPUSH
17868: CALL_OW 174
17872: GO 17830
17874: POP
17875: POP
// repeat wait ( 0 0$1 ) ;
17876: LD_INT 35
17878: PPUSH
17879: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
17883: LD_VAR 0 5
17887: PPUSH
17888: LD_INT 60
17890: PUSH
17891: EMPTY
17892: LIST
17893: PPUSH
17894: CALL_OW 72
17898: NOT
17899: IFFALSE 17876
// repeat wait ( 0 0$1 ) ;
17901: LD_INT 35
17903: PPUSH
17904: CALL_OW 67
// for i in attackers do
17908: LD_ADDR_VAR 0 1
17912: PUSH
17913: LD_VAR 0 5
17917: PUSH
17918: FOR_IN
17919: IFFALSE 18015
// begin if IsDead ( i ) then
17921: LD_VAR 0 1
17925: PPUSH
17926: CALL_OW 301
17930: IFFALSE 17950
// begin attackers := attackers diff i ;
17932: LD_ADDR_VAR 0 5
17936: PUSH
17937: LD_VAR 0 5
17941: PUSH
17942: LD_VAR 0 1
17946: DIFF
17947: ST_TO_ADDR
// continue ;
17948: GO 17918
// end ; if HasTask ( i ) then
17950: LD_VAR 0 1
17954: PPUSH
17955: CALL_OW 314
17959: IFFALSE 17963
// continue ;
17961: GO 17918
// e := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ;
17963: LD_ADDR_VAR 0 6
17967: PUSH
17968: LD_INT 81
17970: PUSH
17971: LD_INT 4
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PPUSH
17978: CALL_OW 69
17982: PPUSH
17983: LD_VAR 0 1
17987: PPUSH
17988: CALL_OW 74
17992: ST_TO_ADDR
// if e then
17993: LD_VAR 0 6
17997: IFFALSE 18013
// ComAttackUnit ( i , e ) ;
17999: LD_VAR 0 1
18003: PPUSH
18004: LD_VAR 0 6
18008: PPUSH
18009: CALL_OW 115
// end ;
18013: GO 17918
18015: POP
18016: POP
// until not attackers ;
18017: LD_VAR 0 5
18021: NOT
18022: IFFALSE 17901
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
18024: LD_EXP 36
18028: PUSH
18029: LD_VAR 0 2
18033: ARRAY
18034: PPUSH
18035: LD_INT 50
18037: PUSH
18038: EMPTY
18039: LIST
18040: PPUSH
18041: CALL_OW 72
18045: NOT
18046: IFFALSE 17479
// end ;
18048: PPOPN 6
18050: END
// every 30 30$00 + 50 50$00 trigger GameType = 1 and game and sibBombAllowed > 0 and UnitFilter ( mc_bases [ mc_rus_2 ] , [ f_btype , b_factory ] ) do var bomb , e ;
18051: LD_EXP 2
18055: PUSH
18056: LD_INT 1
18058: EQUAL
18059: PUSH
18060: LD_EXP 3
18064: AND
18065: PUSH
18066: LD_EXP 23
18070: PUSH
18071: LD_INT 0
18073: GREATER
18074: AND
18075: PUSH
18076: LD_EXP 36
18080: PUSH
18081: LD_EXP 8
18085: ARRAY
18086: PPUSH
18087: LD_INT 30
18089: PUSH
18090: LD_INT 3
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PPUSH
18097: CALL_OW 72
18101: AND
18102: IFFALSE 18306
18104: GO 18106
18106: DISABLE
18107: LD_INT 0
18109: PPUSH
18110: PPUSH
// begin enable ;
18111: ENABLE
// MC_InsertProduceList ( mc_rus_2 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
18112: LD_EXP 8
18116: PPUSH
18117: LD_INT 23
18119: PUSH
18120: LD_INT 3
18122: PUSH
18123: LD_INT 3
18125: PUSH
18126: LD_INT 48
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: PUSH
18135: EMPTY
18136: LIST
18137: PPUSH
18138: CALL 85839 0 2
// repeat wait ( 0 0$1 ) ;
18142: LD_INT 35
18144: PPUSH
18145: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
18149: LD_INT 22
18151: PUSH
18152: LD_INT 3
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 34
18161: PUSH
18162: LD_INT 48
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PPUSH
18173: CALL_OW 69
18177: IFFALSE 18142
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
18179: LD_ADDR_VAR 0 1
18183: PUSH
18184: LD_INT 22
18186: PUSH
18187: LD_INT 3
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: LD_INT 34
18196: PUSH
18197: LD_INT 48
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PPUSH
18208: CALL_OW 69
18212: ST_TO_ADDR
// e := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) ;
18213: LD_ADDR_VAR 0 2
18217: PUSH
18218: LD_INT 81
18220: PUSH
18221: LD_INT 3
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PUSH
18228: LD_INT 21
18230: PUSH
18231: LD_INT 3
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PPUSH
18242: CALL_OW 69
18246: ST_TO_ADDR
// if e then
18247: LD_VAR 0 2
18251: IFFALSE 18277
// e := NearestUnitToUnit ( e , bomb [ 1 ] ) ;
18253: LD_ADDR_VAR 0 2
18257: PUSH
18258: LD_VAR 0 2
18262: PPUSH
18263: LD_VAR 0 1
18267: PUSH
18268: LD_INT 1
18270: ARRAY
18271: PPUSH
18272: CALL_OW 74
18276: ST_TO_ADDR
// ComAttackPlace ( bomb , GetX ( e ) , GetY ( e ) ) ;
18277: LD_VAR 0 1
18281: PPUSH
18282: LD_VAR 0 2
18286: PPUSH
18287: CALL_OW 250
18291: PPUSH
18292: LD_VAR 0 2
18296: PPUSH
18297: CALL_OW 251
18301: PPUSH
18302: CALL_OW 116
// end ;
18306: PPOPN 2
18308: END
// every 7 7$00 trigger GameType = 1 and GetBType ( HexInfo ( 84 , 128 ) ) = b_warehouse do var veh , depot ;
18309: LD_EXP 2
18313: PUSH
18314: LD_INT 1
18316: EQUAL
18317: PUSH
18318: LD_INT 84
18320: PPUSH
18321: LD_INT 128
18323: PPUSH
18324: CALL_OW 428
18328: PPUSH
18329: CALL_OW 266
18333: PUSH
18334: LD_INT 1
18336: EQUAL
18337: AND
18338: IFFALSE 18511
18340: GO 18342
18342: DISABLE
18343: LD_INT 0
18345: PPUSH
18346: PPUSH
// begin enable ;
18347: ENABLE
// depot := HexInfo ( 84 , 128 ) ;
18348: LD_ADDR_VAR 0 2
18352: PUSH
18353: LD_INT 84
18355: PPUSH
18356: LD_INT 128
18358: PPUSH
18359: CALL_OW 428
18363: ST_TO_ADDR
// uc_side := 3 ;
18364: LD_ADDR_OWVAR 20
18368: PUSH
18369: LD_INT 3
18371: ST_TO_ADDR
// uc_nation := 3 ;
18372: LD_ADDR_OWVAR 21
18376: PUSH
18377: LD_INT 3
18379: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay , 0 ) ;
18380: LD_INT 21
18382: PPUSH
18383: LD_INT 3
18385: PPUSH
18386: LD_INT 3
18388: PPUSH
18389: LD_INT 51
18391: PPUSH
18392: LD_INT 0
18394: PPUSH
18395: CALL 26578 0 5
// veh := CreateVehicle ;
18399: LD_ADDR_VAR 0 1
18403: PUSH
18404: CALL_OW 45
18408: ST_TO_ADDR
// PlaceUnitXY ( veh , 126 , 227 , false ) ;
18409: LD_VAR 0 1
18413: PPUSH
18414: LD_INT 126
18416: PPUSH
18417: LD_INT 227
18419: PPUSH
18420: LD_INT 0
18422: PPUSH
18423: CALL_OW 48
// SetCargo ( veh , mat_oil , 100 ) ;
18427: LD_VAR 0 1
18431: PPUSH
18432: LD_INT 2
18434: PPUSH
18435: LD_INT 100
18437: PPUSH
18438: CALL_OW 290
// ComGive ( veh , depot ) ;
18442: LD_VAR 0 1
18446: PPUSH
18447: LD_VAR 0 2
18451: PPUSH
18452: CALL_OW 161
// AddComMoveXY ( veh , 126 , 227 ) ;
18456: LD_VAR 0 1
18460: PPUSH
18461: LD_INT 126
18463: PPUSH
18464: LD_INT 227
18466: PPUSH
18467: CALL_OW 171
// wait ( 0 0$10 ) ;
18471: LD_INT 350
18473: PPUSH
18474: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
18478: LD_INT 35
18480: PPUSH
18481: CALL_OW 67
// until IsAt ( veh , 126 , 227 ) ;
18485: LD_VAR 0 1
18489: PPUSH
18490: LD_INT 126
18492: PPUSH
18493: LD_INT 227
18495: PPUSH
18496: CALL_OW 307
18500: IFFALSE 18478
// RemoveUnit ( veh ) ;
18502: LD_VAR 0 1
18506: PPUSH
18507: CALL_OW 64
// end ;
18511: PPOPN 2
18513: END
// every 9 9$00 trigger GameType = 1 and outpostEscape and commander = 2 do var veh , depot ;
18514: LD_EXP 2
18518: PUSH
18519: LD_INT 1
18521: EQUAL
18522: PUSH
18523: LD_EXP 27
18527: AND
18528: PUSH
18529: LD_EXP 25
18533: PUSH
18534: LD_INT 2
18536: EQUAL
18537: AND
18538: IFFALSE 18730
18540: GO 18542
18542: DISABLE
18543: LD_INT 0
18545: PPUSH
18546: PPUSH
// begin enable ;
18547: ENABLE
// if tick >= [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] then
18548: LD_OWVAR 1
18552: PUSH
18553: LD_INT 105000
18555: PUSH
18556: LD_INT 84000
18558: PUSH
18559: LD_INT 63000
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: LIST
18566: PUSH
18567: LD_OWVAR 67
18571: ARRAY
18572: GREATEREQUAL
18573: IFFALSE 18576
// disable ;
18575: DISABLE
// uc_side := 4 ;
18576: LD_ADDR_OWVAR 20
18580: PUSH
18581: LD_INT 4
18583: ST_TO_ADDR
// uc_nation := 1 ;
18584: LD_ADDR_OWVAR 21
18588: PUSH
18589: LD_INT 1
18591: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 0 ) ;
18592: LD_INT 2
18594: PPUSH
18595: LD_INT 3
18597: PPUSH
18598: LD_INT 3
18600: PPUSH
18601: LD_INT 12
18603: PPUSH
18604: LD_INT 0
18606: PPUSH
18607: CALL 26578 0 5
// veh := CreateVehicle ;
18611: LD_ADDR_VAR 0 1
18615: PUSH
18616: CALL_OW 45
18620: ST_TO_ADDR
// PlaceUnitXY ( veh , 229 , 226 , false ) ;
18621: LD_VAR 0 1
18625: PPUSH
18626: LD_INT 229
18628: PPUSH
18629: LD_INT 226
18631: PPUSH
18632: LD_INT 0
18634: PPUSH
18635: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
18639: LD_VAR 0 1
18643: PPUSH
18644: LD_INT 1
18646: PPUSH
18647: LD_INT 100
18649: PPUSH
18650: CALL_OW 290
// AddComMoveToArea ( veh , ruOutpostArea ) ;
18654: LD_VAR 0 1
18658: PPUSH
18659: LD_INT 25
18661: PPUSH
18662: CALL_OW 173
// AddComUnload ( veh ) ;
18666: LD_VAR 0 1
18670: PPUSH
18671: CALL_OW 219
// AddComMoveXY ( veh , 229 , 226 ) ;
18675: LD_VAR 0 1
18679: PPUSH
18680: LD_INT 229
18682: PPUSH
18683: LD_INT 226
18685: PPUSH
18686: CALL_OW 171
// wait ( 0 0$10 ) ;
18690: LD_INT 350
18692: PPUSH
18693: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
18697: LD_INT 35
18699: PPUSH
18700: CALL_OW 67
// until IsAt ( veh , 229 , 226 ) ;
18704: LD_VAR 0 1
18708: PPUSH
18709: LD_INT 229
18711: PPUSH
18712: LD_INT 226
18714: PPUSH
18715: CALL_OW 307
18719: IFFALSE 18697
// RemoveUnit ( veh ) ;
18721: LD_VAR 0 1
18725: PPUSH
18726: CALL_OW 64
// end ;
18730: PPOPN 2
18732: END
// every 15 15$00 trigger GameType = 1 and game and reinforceAllowed do var i , j , veh , tmp , amount ;
18733: LD_EXP 2
18737: PUSH
18738: LD_INT 1
18740: EQUAL
18741: PUSH
18742: LD_EXP 3
18746: AND
18747: PUSH
18748: LD_EXP 24
18752: AND
18753: IFFALSE 19086
18755: GO 18757
18757: DISABLE
18758: LD_INT 0
18760: PPUSH
18761: PPUSH
18762: PPUSH
18763: PPUSH
18764: PPUSH
// begin enable ;
18765: ENABLE
// tmp := [ ] ;
18766: LD_ADDR_VAR 0 4
18770: PUSH
18771: EMPTY
18772: ST_TO_ADDR
// if commander = 1 then
18773: LD_EXP 25
18777: PUSH
18778: LD_INT 1
18780: EQUAL
18781: IFFALSE 18793
// amount := 3 else
18783: LD_ADDR_VAR 0 5
18787: PUSH
18788: LD_INT 3
18790: ST_TO_ADDR
18791: GO 18801
// amount := 2 ;
18793: LD_ADDR_VAR 0 5
18797: PUSH
18798: LD_INT 2
18800: ST_TO_ADDR
// for i = 1 to amount do
18801: LD_ADDR_VAR 0 1
18805: PUSH
18806: DOUBLE
18807: LD_INT 1
18809: DEC
18810: ST_TO_ADDR
18811: LD_VAR 0 5
18815: PUSH
18816: FOR_TO
18817: IFFALSE 18981
// begin wait ( 0 0$5 ) ;
18819: LD_INT 175
18821: PPUSH
18822: CALL_OW 67
// for j = 1 to 3 do
18826: LD_ADDR_VAR 0 2
18830: PUSH
18831: DOUBLE
18832: LD_INT 1
18834: DEC
18835: ST_TO_ADDR
18836: LD_INT 3
18838: PUSH
18839: FOR_TO
18840: IFFALSE 18977
// begin uc_side := 4 ;
18842: LD_ADDR_OWVAR 20
18846: PUSH
18847: LD_INT 4
18849: ST_TO_ADDR
// uc_nation := 1 ;
18850: LD_ADDR_OWVAR 21
18854: PUSH
18855: LD_INT 1
18857: ST_TO_ADDR
// PrepareVehicle ( [ us_medium_tracked , us_morphling ] [ rand ( 1 , 2 ) ] , engine_siberite , control_computer , [ us_laser , us_double_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
18858: LD_INT 3
18860: PUSH
18861: LD_INT 5
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 1
18870: PPUSH
18871: LD_INT 2
18873: PPUSH
18874: CALL_OW 12
18878: ARRAY
18879: PPUSH
18880: LD_INT 3
18882: PPUSH
18883: LD_INT 3
18885: PPUSH
18886: LD_INT 9
18888: PUSH
18889: LD_INT 5
18891: PUSH
18892: LD_INT 7
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: LIST
18899: PUSH
18900: LD_INT 1
18902: PPUSH
18903: LD_INT 3
18905: PPUSH
18906: CALL_OW 12
18910: ARRAY
18911: PPUSH
18912: LD_INT 100
18914: PPUSH
18915: CALL 26578 0 5
// veh := CreateVehicle ;
18919: LD_ADDR_VAR 0 3
18923: PUSH
18924: CALL_OW 45
18928: ST_TO_ADDR
// tmp := tmp ^ veh ;
18929: LD_ADDR_VAR 0 4
18933: PUSH
18934: LD_VAR 0 4
18938: PUSH
18939: LD_VAR 0 3
18943: ADD
18944: ST_TO_ADDR
// PlaceUnitArea ( veh , westSpawn , false ) ;
18945: LD_VAR 0 3
18949: PPUSH
18950: LD_INT 22
18952: PPUSH
18953: LD_INT 0
18955: PPUSH
18956: CALL_OW 49
// ComMoveXY ( veh , 119 , 215 ) ;
18960: LD_VAR 0 3
18964: PPUSH
18965: LD_INT 119
18967: PPUSH
18968: LD_INT 215
18970: PPUSH
18971: CALL_OW 111
// end ;
18975: GO 18839
18977: POP
18978: POP
// end ;
18979: GO 18816
18981: POP
18982: POP
// wait ( 0 0$3 ) ;
18983: LD_INT 105
18985: PPUSH
18986: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
18990: LD_INT 35
18992: PPUSH
18993: CALL_OW 67
// for i in tmp do
18997: LD_ADDR_VAR 0 1
19001: PUSH
19002: LD_VAR 0 4
19006: PUSH
19007: FOR_IN
19008: IFFALSE 19075
// if IsDead ( i ) then
19010: LD_VAR 0 1
19014: PPUSH
19015: CALL_OW 301
19019: IFFALSE 19039
// tmp := tmp diff i else
19021: LD_ADDR_VAR 0 4
19025: PUSH
19026: LD_VAR 0 4
19030: PUSH
19031: LD_VAR 0 1
19035: DIFF
19036: ST_TO_ADDR
19037: GO 19073
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) ;
19039: LD_VAR 0 1
19043: PPUSH
19044: LD_INT 81
19046: PUSH
19047: LD_INT 4
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PPUSH
19054: CALL_OW 69
19058: PPUSH
19059: LD_VAR 0 1
19063: PPUSH
19064: CALL_OW 74
19068: PPUSH
19069: CALL_OW 115
19073: GO 19007
19075: POP
19076: POP
// until tmp = [ ] ;
19077: LD_VAR 0 4
19081: PUSH
19082: EMPTY
19083: EQUAL
19084: IFFALSE 18990
// end ;
19086: PPOPN 5
19088: END
// every 0 0$1 trigger GameType = 1 and game do var i , tmp ;
19089: LD_EXP 2
19093: PUSH
19094: LD_INT 1
19096: EQUAL
19097: PUSH
19098: LD_EXP 3
19102: AND
19103: IFFALSE 19204
19105: GO 19107
19107: DISABLE
19108: LD_INT 0
19110: PPUSH
19111: PPUSH
// begin enable ;
19112: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
19113: LD_ADDR_VAR 0 2
19117: PUSH
19118: LD_INT 3
19120: PUSH
19121: LD_INT 22
19123: PUSH
19124: LD_INT 1
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 32
19137: PUSH
19138: LD_INT 1
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PPUSH
19149: CALL_OW 69
19153: ST_TO_ADDR
// if tmp then
19154: LD_VAR 0 2
19158: IFFALSE 19204
// for i in tmp do
19160: LD_ADDR_VAR 0 1
19164: PUSH
19165: LD_VAR 0 2
19169: PUSH
19170: FOR_IN
19171: IFFALSE 19202
// if GetFuel ( i ) < 3 then
19173: LD_VAR 0 1
19177: PPUSH
19178: CALL_OW 261
19182: PUSH
19183: LD_INT 3
19185: LESS
19186: IFFALSE 19200
// SetFuel ( i , 3 ) ;
19188: LD_VAR 0 1
19192: PPUSH
19193: LD_INT 3
19195: PPUSH
19196: CALL_OW 240
19200: GO 19170
19202: POP
19203: POP
// end ; end_of_file
19204: PPOPN 2
19206: END
// export function CustomEvent ( event ) ; begin
19207: LD_INT 0
19209: PPUSH
// end ;
19210: LD_VAR 0 2
19214: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 then
19215: LD_VAR 0 1
19219: PUSH
19220: LD_INT 1
19222: EQUAL
19223: PUSH
19224: LD_VAR 0 2
19228: PUSH
19229: LD_INT 4
19231: EQUAL
19232: AND
19233: IFFALSE 19261
// begin SayRadio ( Powell , DP-Lost ) ;
19235: LD_EXP 12
19239: PPUSH
19240: LD_STRING DP-Lost
19242: PPUSH
19243: CALL_OW 94
// wait ( 0 0$2 ) ;
19247: LD_INT 70
19249: PPUSH
19250: CALL_OW 67
// YouLost ( FriendlyFire ) ;
19254: LD_STRING FriendlyFire
19256: PPUSH
19257: CALL_OW 104
// end ; end ;
19261: PPOPN 2
19263: END
// on UnitDestroyed ( un ) do begin if GameType = 1 then
19264: LD_EXP 2
19268: PUSH
19269: LD_INT 1
19271: EQUAL
19272: IFFALSE 19507
// begin if un = playerCommander then
19274: LD_VAR 0 1
19278: PUSH
19279: LD_EXP 9
19283: EQUAL
19284: IFFALSE 19293
// YouLost ( commanderDied ) ;
19286: LD_STRING commanderDied
19288: PPUSH
19289: CALL_OW 104
// if un = allyCommander then
19293: LD_VAR 0 1
19297: PUSH
19298: LD_EXP 11
19302: EQUAL
19303: IFFALSE 19312
// YouLost ( Theta ) ;
19305: LD_STRING Theta
19307: PPUSH
19308: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
19312: LD_VAR 0 1
19316: PUSH
19317: LD_INT 22
19319: PUSH
19320: LD_INT 8
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: LD_INT 2
19329: PUSH
19330: LD_INT 21
19332: PUSH
19333: LD_INT 1
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: LD_INT 21
19342: PUSH
19343: LD_INT 3
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: LIST
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: PPUSH
19359: CALL_OW 69
19363: IN
19364: IFFALSE 19380
// legDestCounter := legDestCounter + 1 ;
19366: LD_ADDR_EXP 18
19370: PUSH
19371: LD_EXP 18
19375: PUSH
19376: LD_INT 1
19378: PLUS
19379: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
19380: LD_VAR 0 1
19384: PUSH
19385: LD_INT 22
19387: PUSH
19388: LD_INT 4
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 2
19397: PUSH
19398: LD_INT 21
19400: PUSH
19401: LD_INT 1
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PUSH
19408: LD_INT 21
19410: PUSH
19411: LD_INT 3
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: LIST
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PPUSH
19427: CALL_OW 69
19431: IN
19432: IFFALSE 19448
// allyDestCounter := allyDestCounter + 1 ;
19434: LD_ADDR_EXP 22
19438: PUSH
19439: LD_EXP 22
19443: PUSH
19444: LD_INT 1
19446: PLUS
19447: ST_TO_ADDR
// if un in ruOutpost then
19448: LD_VAR 0 1
19452: PUSH
19453: LD_EXP 14
19457: IN
19458: IFFALSE 19507
// begin ruOutpost := ruOutpost diff un ;
19460: LD_ADDR_EXP 14
19464: PUSH
19465: LD_EXP 14
19469: PUSH
19470: LD_VAR 0 1
19474: DIFF
19475: ST_TO_ADDR
// ruEscape := Replace ( ruEscape , 1 , ruEscape [ 1 ] + 1 ) ;
19476: LD_ADDR_EXP 15
19480: PUSH
19481: LD_EXP 15
19485: PPUSH
19486: LD_INT 1
19488: PPUSH
19489: LD_EXP 15
19493: PUSH
19494: LD_INT 1
19496: ARRAY
19497: PUSH
19498: LD_INT 1
19500: PLUS
19501: PPUSH
19502: CALL_OW 1
19506: ST_TO_ADDR
// end ; end ; MCE_UnitDestroyed ( un ) ;
19507: LD_VAR 0 1
19511: PPUSH
19512: CALL 89174 0 1
// end ;
19516: PPOPN 1
19518: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
19519: LD_VAR 0 1
19523: PPUSH
19524: LD_VAR 0 2
19528: PPUSH
19529: CALL 91153 0 2
// end ;
19533: PPOPN 2
19535: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
19536: LD_VAR 0 1
19540: PPUSH
19541: CALL 90221 0 1
// end ;
19545: PPOPN 1
19547: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
19548: LD_VAR 0 1
19552: PPUSH
19553: CALL 90462 0 1
// end ;
19557: PPOPN 1
19559: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_LasDouble and GetSide ( lab ) = 1 then
19560: LD_VAR 0 1
19564: PUSH
19565: LD_INT 14
19567: EQUAL
19568: PUSH
19569: LD_VAR 0 2
19573: PPUSH
19574: CALL_OW 255
19578: PUSH
19579: LD_INT 1
19581: EQUAL
19582: AND
19583: IFFALSE 19624
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Laser ) ;
19585: LD_EXP 9
19589: PPUSH
19590: LD_STRING D
19592: PUSH
19593: LD_STRING I
19595: PUSH
19596: LD_STRING J
19598: PUSH
19599: LD_STRING S
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: LIST
19606: PUSH
19607: LD_EXP 25
19611: ARRAY
19612: STR
19613: PUSH
19614: LD_STRING -1-Laser
19616: STR
19617: PPUSH
19618: CALL_OW 88
// exit ;
19622: GO 19766
// end ; if tech = tech_MatDet and GetSide ( lab ) = 1 then
19624: LD_VAR 0 1
19628: PUSH
19629: LD_INT 7
19631: EQUAL
19632: PUSH
19633: LD_VAR 0 2
19637: PPUSH
19638: CALL_OW 255
19642: PUSH
19643: LD_INT 1
19645: EQUAL
19646: AND
19647: IFFALSE 19688
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Materialization ) ;
19649: LD_EXP 9
19653: PPUSH
19654: LD_STRING D
19656: PUSH
19657: LD_STRING I
19659: PUSH
19660: LD_STRING J
19662: PUSH
19663: LD_STRING S
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: LIST
19670: PUSH
19671: LD_EXP 25
19675: ARRAY
19676: STR
19677: PUSH
19678: LD_STRING -1-Materialization
19680: STR
19681: PPUSH
19682: CALL_OW 88
// exit ;
19686: GO 19766
// end ; if tech = tech_SibFiss and GetSide ( lab ) = 1 then
19688: LD_VAR 0 1
19692: PUSH
19693: LD_INT 25
19695: EQUAL
19696: PUSH
19697: LD_VAR 0 2
19701: PPUSH
19702: CALL_OW 255
19706: PUSH
19707: LD_INT 1
19709: EQUAL
19710: AND
19711: IFFALSE 19752
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Rocket ) ;
19713: LD_EXP 9
19717: PPUSH
19718: LD_STRING D
19720: PUSH
19721: LD_STRING I
19723: PUSH
19724: LD_STRING J
19726: PUSH
19727: LD_STRING S
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: LIST
19734: PUSH
19735: LD_EXP 25
19739: ARRAY
19740: STR
19741: PUSH
19742: LD_STRING -1-Rocket
19744: STR
19745: PPUSH
19746: CALL_OW 88
// exit ;
19750: GO 19766
// end ; MCE_ResearchComplete ( tech , lab ) ;
19752: LD_VAR 0 1
19756: PPUSH
19757: LD_VAR 0 2
19761: PPUSH
19762: CALL 88870 0 2
// end ;
19766: PPOPN 2
19768: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
19769: LD_VAR 0 1
19773: PPUSH
19774: LD_VAR 0 2
19778: PPUSH
19779: LD_VAR 0 3
19783: PPUSH
19784: LD_VAR 0 4
19788: PPUSH
19789: LD_VAR 0 5
19793: PPUSH
19794: CALL 88490 0 5
// end ;
19798: PPOPN 5
19800: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
19801: LD_VAR 0 1
19805: PPUSH
19806: LD_VAR 0 2
19810: PPUSH
19811: CALL 88080 0 2
// end ;
19815: PPOPN 2
19817: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
19818: LD_VAR 0 1
19822: PPUSH
19823: LD_VAR 0 2
19827: PPUSH
19828: LD_VAR 0 3
19832: PPUSH
19833: LD_VAR 0 4
19837: PPUSH
19838: CALL 87918 0 4
// end ;
19842: PPOPN 4
19844: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
19845: LD_VAR 0 1
19849: PPUSH
19850: LD_VAR 0 2
19854: PPUSH
19855: LD_VAR 0 3
19859: PPUSH
19860: CALL 87693 0 3
// end ;
19864: PPOPN 3
19866: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
19867: LD_VAR 0 1
19871: PPUSH
19872: LD_VAR 0 2
19876: PPUSH
19877: CALL 87578 0 2
// end ;
19881: PPOPN 2
19883: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
19884: LD_VAR 0 1
19888: PPUSH
19889: LD_VAR 0 2
19893: PPUSH
19894: CALL 91414 0 2
// end ;
19898: PPOPN 2
19900: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
19901: LD_VAR 0 1
19905: PPUSH
19906: LD_VAR 0 2
19910: PPUSH
19911: LD_VAR 0 3
19915: PPUSH
19916: LD_VAR 0 4
19920: PPUSH
19921: CALL 91630 0 4
// end ;
19925: PPOPN 4
19927: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
19928: LD_VAR 0 1
19932: PPUSH
19933: LD_VAR 0 2
19937: PPUSH
19938: CALL 87387 0 2
// end ; end_of_file
19942: PPOPN 2
19944: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19945: LD_INT 0
19947: PPUSH
19948: PPUSH
// if exist_mode then
19949: LD_VAR 0 2
19953: IFFALSE 19978
// unit := CreateCharacter ( prefix & ident ) else
19955: LD_ADDR_VAR 0 5
19959: PUSH
19960: LD_VAR 0 3
19964: PUSH
19965: LD_VAR 0 1
19969: STR
19970: PPUSH
19971: CALL_OW 34
19975: ST_TO_ADDR
19976: GO 19993
// unit := NewCharacter ( ident ) ;
19978: LD_ADDR_VAR 0 5
19982: PUSH
19983: LD_VAR 0 1
19987: PPUSH
19988: CALL_OW 25
19992: ST_TO_ADDR
// result := unit ;
19993: LD_ADDR_VAR 0 4
19997: PUSH
19998: LD_VAR 0 5
20002: ST_TO_ADDR
// end ;
20003: LD_VAR 0 4
20007: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20008: LD_INT 0
20010: PPUSH
20011: PPUSH
// if not side or not nation then
20012: LD_VAR 0 1
20016: NOT
20017: PUSH
20018: LD_VAR 0 2
20022: NOT
20023: OR
20024: IFFALSE 20028
// exit ;
20026: GO 20664
// case nation of nation_american :
20028: LD_VAR 0 2
20032: PUSH
20033: LD_INT 1
20035: DOUBLE
20036: EQUAL
20037: IFTRUE 20041
20039: GO 20211
20041: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ; nation_arabian :
20042: LD_ADDR_VAR 0 4
20046: PUSH
20047: LD_INT 35
20049: PUSH
20050: LD_INT 45
20052: PUSH
20053: LD_INT 46
20055: PUSH
20056: LD_INT 47
20058: PUSH
20059: LD_INT 1
20061: PUSH
20062: LD_INT 2
20064: PUSH
20065: LD_INT 6
20067: PUSH
20068: LD_INT 15
20070: PUSH
20071: LD_INT 16
20073: PUSH
20074: LD_INT 7
20076: PUSH
20077: LD_INT 12
20079: PUSH
20080: LD_INT 13
20082: PUSH
20083: LD_INT 10
20085: PUSH
20086: LD_INT 14
20088: PUSH
20089: LD_INT 20
20091: PUSH
20092: LD_INT 21
20094: PUSH
20095: LD_INT 22
20097: PUSH
20098: LD_INT 25
20100: PUSH
20101: LD_INT 32
20103: PUSH
20104: LD_INT 27
20106: PUSH
20107: LD_INT 36
20109: PUSH
20110: LD_INT 69
20112: PUSH
20113: LD_INT 39
20115: PUSH
20116: LD_INT 34
20118: PUSH
20119: LD_INT 40
20121: PUSH
20122: LD_INT 48
20124: PUSH
20125: LD_INT 49
20127: PUSH
20128: LD_INT 50
20130: PUSH
20131: LD_INT 51
20133: PUSH
20134: LD_INT 52
20136: PUSH
20137: LD_INT 53
20139: PUSH
20140: LD_INT 54
20142: PUSH
20143: LD_INT 55
20145: PUSH
20146: LD_INT 56
20148: PUSH
20149: LD_INT 57
20151: PUSH
20152: LD_INT 58
20154: PUSH
20155: LD_INT 59
20157: PUSH
20158: LD_INT 60
20160: PUSH
20161: LD_INT 61
20163: PUSH
20164: LD_INT 62
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: ST_TO_ADDR
20209: GO 20588
20211: LD_INT 2
20213: DOUBLE
20214: EQUAL
20215: IFTRUE 20219
20217: GO 20397
20219: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
20220: LD_ADDR_VAR 0 4
20224: PUSH
20225: LD_INT 35
20227: PUSH
20228: LD_INT 45
20230: PUSH
20231: LD_INT 46
20233: PUSH
20234: LD_INT 47
20236: PUSH
20237: LD_INT 70
20239: PUSH
20240: LD_INT 1
20242: PUSH
20243: LD_INT 11
20245: PUSH
20246: LD_INT 3
20248: PUSH
20249: LD_INT 4
20251: PUSH
20252: LD_INT 5
20254: PUSH
20255: LD_INT 6
20257: PUSH
20258: LD_INT 15
20260: PUSH
20261: LD_INT 18
20263: PUSH
20264: LD_INT 7
20266: PUSH
20267: LD_INT 17
20269: PUSH
20270: LD_INT 8
20272: PUSH
20273: LD_INT 20
20275: PUSH
20276: LD_INT 21
20278: PUSH
20279: LD_INT 22
20281: PUSH
20282: LD_INT 72
20284: PUSH
20285: LD_INT 26
20287: PUSH
20288: LD_INT 69
20290: PUSH
20291: LD_INT 39
20293: PUSH
20294: LD_INT 40
20296: PUSH
20297: LD_INT 41
20299: PUSH
20300: LD_INT 42
20302: PUSH
20303: LD_INT 43
20305: PUSH
20306: LD_INT 48
20308: PUSH
20309: LD_INT 49
20311: PUSH
20312: LD_INT 50
20314: PUSH
20315: LD_INT 51
20317: PUSH
20318: LD_INT 52
20320: PUSH
20321: LD_INT 53
20323: PUSH
20324: LD_INT 54
20326: PUSH
20327: LD_INT 55
20329: PUSH
20330: LD_INT 56
20332: PUSH
20333: LD_INT 60
20335: PUSH
20336: LD_INT 61
20338: PUSH
20339: LD_INT 62
20341: PUSH
20342: LD_INT 66
20344: PUSH
20345: LD_INT 67
20347: PUSH
20348: LD_INT 68
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: ST_TO_ADDR
20395: GO 20588
20397: LD_INT 3
20399: DOUBLE
20400: EQUAL
20401: IFTRUE 20405
20403: GO 20587
20405: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
20406: LD_ADDR_VAR 0 4
20410: PUSH
20411: LD_INT 46
20413: PUSH
20414: LD_INT 47
20416: PUSH
20417: LD_INT 1
20419: PUSH
20420: LD_INT 2
20422: PUSH
20423: LD_INT 11
20425: PUSH
20426: LD_INT 9
20428: PUSH
20429: LD_INT 20
20431: PUSH
20432: LD_INT 19
20434: PUSH
20435: LD_INT 21
20437: PUSH
20438: LD_INT 24
20440: PUSH
20441: LD_INT 22
20443: PUSH
20444: LD_INT 25
20446: PUSH
20447: LD_INT 28
20449: PUSH
20450: LD_INT 29
20452: PUSH
20453: LD_INT 30
20455: PUSH
20456: LD_INT 31
20458: PUSH
20459: LD_INT 37
20461: PUSH
20462: LD_INT 38
20464: PUSH
20465: LD_INT 32
20467: PUSH
20468: LD_INT 27
20470: PUSH
20471: LD_INT 33
20473: PUSH
20474: LD_INT 69
20476: PUSH
20477: LD_INT 39
20479: PUSH
20480: LD_INT 34
20482: PUSH
20483: LD_INT 40
20485: PUSH
20486: LD_INT 71
20488: PUSH
20489: LD_INT 23
20491: PUSH
20492: LD_INT 44
20494: PUSH
20495: LD_INT 48
20497: PUSH
20498: LD_INT 49
20500: PUSH
20501: LD_INT 50
20503: PUSH
20504: LD_INT 51
20506: PUSH
20507: LD_INT 52
20509: PUSH
20510: LD_INT 53
20512: PUSH
20513: LD_INT 54
20515: PUSH
20516: LD_INT 55
20518: PUSH
20519: LD_INT 56
20521: PUSH
20522: LD_INT 57
20524: PUSH
20525: LD_INT 58
20527: PUSH
20528: LD_INT 59
20530: PUSH
20531: LD_INT 63
20533: PUSH
20534: LD_INT 64
20536: PUSH
20537: LD_INT 65
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: ST_TO_ADDR
20585: GO 20588
20587: POP
// if state > - 1 and state < 3 then
20588: LD_VAR 0 3
20592: PUSH
20593: LD_INT 1
20595: NEG
20596: GREATER
20597: PUSH
20598: LD_VAR 0 3
20602: PUSH
20603: LD_INT 3
20605: LESS
20606: AND
20607: IFFALSE 20664
// for i in result do
20609: LD_ADDR_VAR 0 5
20613: PUSH
20614: LD_VAR 0 4
20618: PUSH
20619: FOR_IN
20620: IFFALSE 20662
// if GetTech ( i , side ) <> state then
20622: LD_VAR 0 5
20626: PPUSH
20627: LD_VAR 0 1
20631: PPUSH
20632: CALL_OW 321
20636: PUSH
20637: LD_VAR 0 3
20641: NONEQUAL
20642: IFFALSE 20660
// result := result diff i ;
20644: LD_ADDR_VAR 0 4
20648: PUSH
20649: LD_VAR 0 4
20653: PUSH
20654: LD_VAR 0 5
20658: DIFF
20659: ST_TO_ADDR
20660: GO 20619
20662: POP
20663: POP
// end ;
20664: LD_VAR 0 4
20668: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20669: LD_INT 0
20671: PPUSH
20672: PPUSH
20673: PPUSH
// result := true ;
20674: LD_ADDR_VAR 0 3
20678: PUSH
20679: LD_INT 1
20681: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20682: LD_ADDR_VAR 0 5
20686: PUSH
20687: LD_VAR 0 2
20691: PPUSH
20692: CALL_OW 480
20696: ST_TO_ADDR
// if not tmp then
20697: LD_VAR 0 5
20701: NOT
20702: IFFALSE 20706
// exit ;
20704: GO 20755
// for i in tmp do
20706: LD_ADDR_VAR 0 4
20710: PUSH
20711: LD_VAR 0 5
20715: PUSH
20716: FOR_IN
20717: IFFALSE 20753
// if GetTech ( i , side ) <> state_researched then
20719: LD_VAR 0 4
20723: PPUSH
20724: LD_VAR 0 1
20728: PPUSH
20729: CALL_OW 321
20733: PUSH
20734: LD_INT 2
20736: NONEQUAL
20737: IFFALSE 20751
// begin result := false ;
20739: LD_ADDR_VAR 0 3
20743: PUSH
20744: LD_INT 0
20746: ST_TO_ADDR
// exit ;
20747: POP
20748: POP
20749: GO 20755
// end ;
20751: GO 20716
20753: POP
20754: POP
// end ;
20755: LD_VAR 0 3
20759: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20760: LD_INT 0
20762: PPUSH
20763: PPUSH
20764: PPUSH
20765: PPUSH
20766: PPUSH
20767: PPUSH
20768: PPUSH
20769: PPUSH
20770: PPUSH
20771: PPUSH
20772: PPUSH
20773: PPUSH
20774: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20775: LD_VAR 0 1
20779: NOT
20780: PUSH
20781: LD_VAR 0 1
20785: PPUSH
20786: CALL_OW 257
20790: PUSH
20791: LD_INT 9
20793: NONEQUAL
20794: OR
20795: IFFALSE 20799
// exit ;
20797: GO 21372
// side := GetSide ( unit ) ;
20799: LD_ADDR_VAR 0 9
20803: PUSH
20804: LD_VAR 0 1
20808: PPUSH
20809: CALL_OW 255
20813: ST_TO_ADDR
// tech_space := tech_spacanom ;
20814: LD_ADDR_VAR 0 12
20818: PUSH
20819: LD_INT 29
20821: ST_TO_ADDR
// tech_time := tech_taurad ;
20822: LD_ADDR_VAR 0 13
20826: PUSH
20827: LD_INT 28
20829: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20830: LD_ADDR_VAR 0 11
20834: PUSH
20835: LD_VAR 0 1
20839: PPUSH
20840: CALL_OW 310
20844: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20845: LD_VAR 0 11
20849: PPUSH
20850: CALL_OW 247
20854: PUSH
20855: LD_INT 2
20857: EQUAL
20858: IFFALSE 20862
// exit ;
20860: GO 21372
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20862: LD_ADDR_VAR 0 8
20866: PUSH
20867: LD_INT 81
20869: PUSH
20870: LD_VAR 0 9
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 3
20881: PUSH
20882: LD_INT 21
20884: PUSH
20885: LD_INT 3
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PPUSH
20900: CALL_OW 69
20904: ST_TO_ADDR
// if not tmp then
20905: LD_VAR 0 8
20909: NOT
20910: IFFALSE 20914
// exit ;
20912: GO 21372
// if in_unit then
20914: LD_VAR 0 11
20918: IFFALSE 20942
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20920: LD_ADDR_VAR 0 10
20924: PUSH
20925: LD_VAR 0 8
20929: PPUSH
20930: LD_VAR 0 11
20934: PPUSH
20935: CALL_OW 74
20939: ST_TO_ADDR
20940: GO 20962
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20942: LD_ADDR_VAR 0 10
20946: PUSH
20947: LD_VAR 0 8
20951: PPUSH
20952: LD_VAR 0 1
20956: PPUSH
20957: CALL_OW 74
20961: ST_TO_ADDR
// if not enemy then
20962: LD_VAR 0 10
20966: NOT
20967: IFFALSE 20971
// exit ;
20969: GO 21372
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20971: LD_VAR 0 11
20975: PUSH
20976: LD_VAR 0 11
20980: PPUSH
20981: LD_VAR 0 10
20985: PPUSH
20986: CALL_OW 296
20990: PUSH
20991: LD_INT 13
20993: GREATER
20994: AND
20995: PUSH
20996: LD_VAR 0 1
21000: PPUSH
21001: LD_VAR 0 10
21005: PPUSH
21006: CALL_OW 296
21010: PUSH
21011: LD_INT 12
21013: GREATER
21014: OR
21015: IFFALSE 21019
// exit ;
21017: GO 21372
// missile := [ 1 ] ;
21019: LD_ADDR_VAR 0 14
21023: PUSH
21024: LD_INT 1
21026: PUSH
21027: EMPTY
21028: LIST
21029: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21030: LD_VAR 0 9
21034: PPUSH
21035: LD_VAR 0 12
21039: PPUSH
21040: CALL_OW 325
21044: IFFALSE 21073
// missile := Insert ( missile , missile + 1 , 2 ) ;
21046: LD_ADDR_VAR 0 14
21050: PUSH
21051: LD_VAR 0 14
21055: PPUSH
21056: LD_VAR 0 14
21060: PUSH
21061: LD_INT 1
21063: PLUS
21064: PPUSH
21065: LD_INT 2
21067: PPUSH
21068: CALL_OW 2
21072: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21073: LD_VAR 0 9
21077: PPUSH
21078: LD_VAR 0 13
21082: PPUSH
21083: CALL_OW 325
21087: PUSH
21088: LD_VAR 0 10
21092: PPUSH
21093: CALL_OW 255
21097: PPUSH
21098: LD_VAR 0 13
21102: PPUSH
21103: CALL_OW 325
21107: NOT
21108: AND
21109: IFFALSE 21138
// missile := Insert ( missile , missile + 1 , 3 ) ;
21111: LD_ADDR_VAR 0 14
21115: PUSH
21116: LD_VAR 0 14
21120: PPUSH
21121: LD_VAR 0 14
21125: PUSH
21126: LD_INT 1
21128: PLUS
21129: PPUSH
21130: LD_INT 3
21132: PPUSH
21133: CALL_OW 2
21137: ST_TO_ADDR
// if missile < 2 then
21138: LD_VAR 0 14
21142: PUSH
21143: LD_INT 2
21145: LESS
21146: IFFALSE 21150
// exit ;
21148: GO 21372
// x := GetX ( enemy ) ;
21150: LD_ADDR_VAR 0 4
21154: PUSH
21155: LD_VAR 0 10
21159: PPUSH
21160: CALL_OW 250
21164: ST_TO_ADDR
// y := GetY ( enemy ) ;
21165: LD_ADDR_VAR 0 5
21169: PUSH
21170: LD_VAR 0 10
21174: PPUSH
21175: CALL_OW 251
21179: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21180: LD_ADDR_VAR 0 6
21184: PUSH
21185: LD_VAR 0 4
21189: PUSH
21190: LD_INT 1
21192: NEG
21193: PPUSH
21194: LD_INT 1
21196: PPUSH
21197: CALL_OW 12
21201: PLUS
21202: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21203: LD_ADDR_VAR 0 7
21207: PUSH
21208: LD_VAR 0 5
21212: PUSH
21213: LD_INT 1
21215: NEG
21216: PPUSH
21217: LD_INT 1
21219: PPUSH
21220: CALL_OW 12
21224: PLUS
21225: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21226: LD_VAR 0 6
21230: PPUSH
21231: LD_VAR 0 7
21235: PPUSH
21236: CALL_OW 488
21240: NOT
21241: IFFALSE 21263
// begin _x := x ;
21243: LD_ADDR_VAR 0 6
21247: PUSH
21248: LD_VAR 0 4
21252: ST_TO_ADDR
// _y := y ;
21253: LD_ADDR_VAR 0 7
21257: PUSH
21258: LD_VAR 0 5
21262: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21263: LD_ADDR_VAR 0 3
21267: PUSH
21268: LD_INT 1
21270: PPUSH
21271: LD_VAR 0 14
21275: PPUSH
21276: CALL_OW 12
21280: ST_TO_ADDR
// case i of 1 :
21281: LD_VAR 0 3
21285: PUSH
21286: LD_INT 1
21288: DOUBLE
21289: EQUAL
21290: IFTRUE 21294
21292: GO 21311
21294: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21295: LD_VAR 0 1
21299: PPUSH
21300: LD_VAR 0 10
21304: PPUSH
21305: CALL_OW 115
21309: GO 21372
21311: LD_INT 2
21313: DOUBLE
21314: EQUAL
21315: IFTRUE 21319
21317: GO 21341
21319: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21320: LD_VAR 0 1
21324: PPUSH
21325: LD_VAR 0 6
21329: PPUSH
21330: LD_VAR 0 7
21334: PPUSH
21335: CALL_OW 153
21339: GO 21372
21341: LD_INT 3
21343: DOUBLE
21344: EQUAL
21345: IFTRUE 21349
21347: GO 21371
21349: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21350: LD_VAR 0 1
21354: PPUSH
21355: LD_VAR 0 6
21359: PPUSH
21360: LD_VAR 0 7
21364: PPUSH
21365: CALL_OW 154
21369: GO 21372
21371: POP
// end ;
21372: LD_VAR 0 2
21376: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21377: LD_INT 0
21379: PPUSH
21380: PPUSH
21381: PPUSH
21382: PPUSH
21383: PPUSH
21384: PPUSH
// if not unit or not building then
21385: LD_VAR 0 1
21389: NOT
21390: PUSH
21391: LD_VAR 0 2
21395: NOT
21396: OR
21397: IFFALSE 21401
// exit ;
21399: GO 21559
// x := GetX ( building ) ;
21401: LD_ADDR_VAR 0 5
21405: PUSH
21406: LD_VAR 0 2
21410: PPUSH
21411: CALL_OW 250
21415: ST_TO_ADDR
// y := GetY ( building ) ;
21416: LD_ADDR_VAR 0 6
21420: PUSH
21421: LD_VAR 0 2
21425: PPUSH
21426: CALL_OW 251
21430: ST_TO_ADDR
// for i = 0 to 5 do
21431: LD_ADDR_VAR 0 4
21435: PUSH
21436: DOUBLE
21437: LD_INT 0
21439: DEC
21440: ST_TO_ADDR
21441: LD_INT 5
21443: PUSH
21444: FOR_TO
21445: IFFALSE 21557
// begin _x := ShiftX ( x , i , 3 ) ;
21447: LD_ADDR_VAR 0 7
21451: PUSH
21452: LD_VAR 0 5
21456: PPUSH
21457: LD_VAR 0 4
21461: PPUSH
21462: LD_INT 3
21464: PPUSH
21465: CALL_OW 272
21469: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21470: LD_ADDR_VAR 0 8
21474: PUSH
21475: LD_VAR 0 6
21479: PPUSH
21480: LD_VAR 0 4
21484: PPUSH
21485: LD_INT 3
21487: PPUSH
21488: CALL_OW 273
21492: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21493: LD_VAR 0 7
21497: PPUSH
21498: LD_VAR 0 8
21502: PPUSH
21503: CALL_OW 488
21507: NOT
21508: IFFALSE 21512
// continue ;
21510: GO 21444
// if HexInfo ( _x , _y ) = 0 then
21512: LD_VAR 0 7
21516: PPUSH
21517: LD_VAR 0 8
21521: PPUSH
21522: CALL_OW 428
21526: PUSH
21527: LD_INT 0
21529: EQUAL
21530: IFFALSE 21555
// begin ComMoveXY ( unit , _x , _y ) ;
21532: LD_VAR 0 1
21536: PPUSH
21537: LD_VAR 0 7
21541: PPUSH
21542: LD_VAR 0 8
21546: PPUSH
21547: CALL_OW 111
// exit ;
21551: POP
21552: POP
21553: GO 21559
// end ; end ;
21555: GO 21444
21557: POP
21558: POP
// end ;
21559: LD_VAR 0 3
21563: RET
// export function ScanBase ( side , base_area ) ; begin
21564: LD_INT 0
21566: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21567: LD_ADDR_VAR 0 3
21571: PUSH
21572: LD_VAR 0 2
21576: PPUSH
21577: LD_INT 81
21579: PUSH
21580: LD_VAR 0 1
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: PPUSH
21589: CALL_OW 70
21593: ST_TO_ADDR
// end ;
21594: LD_VAR 0 3
21598: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
21599: LD_INT 0
21601: PPUSH
21602: PPUSH
21603: PPUSH
21604: PPUSH
21605: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
21606: LD_VAR 0 1
21610: NOT
21611: PUSH
21612: LD_EXP 36
21616: PUSH
21617: LD_VAR 0 1
21621: ARRAY
21622: NOT
21623: OR
21624: PUSH
21625: LD_VAR 0 2
21629: NOT
21630: OR
21631: PUSH
21632: LD_VAR 0 3
21636: NOT
21637: OR
21638: IFFALSE 21642
// exit ;
21640: GO 22092
// side := mc_sides [ base ] ;
21642: LD_ADDR_VAR 0 6
21646: PUSH
21647: LD_EXP 62
21651: PUSH
21652: LD_VAR 0 1
21656: ARRAY
21657: ST_TO_ADDR
// if not side then
21658: LD_VAR 0 6
21662: NOT
21663: IFFALSE 21667
// exit ;
21665: GO 22092
// for i in solds do
21667: LD_ADDR_VAR 0 7
21671: PUSH
21672: LD_VAR 0 2
21676: PUSH
21677: FOR_IN
21678: IFFALSE 21739
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
21680: LD_VAR 0 7
21684: PPUSH
21685: CALL_OW 310
21689: PPUSH
21690: CALL_OW 266
21694: PUSH
21695: LD_INT 32
21697: PUSH
21698: LD_INT 31
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: IN
21705: IFFALSE 21725
// solds := solds diff i else
21707: LD_ADDR_VAR 0 2
21711: PUSH
21712: LD_VAR 0 2
21716: PUSH
21717: LD_VAR 0 7
21721: DIFF
21722: ST_TO_ADDR
21723: GO 21737
// SetTag ( i , 18 ) ;
21725: LD_VAR 0 7
21729: PPUSH
21730: LD_INT 18
21732: PPUSH
21733: CALL_OW 109
21737: GO 21677
21739: POP
21740: POP
// if not solds then
21741: LD_VAR 0 2
21745: NOT
21746: IFFALSE 21750
// exit ;
21748: GO 22092
// repeat wait ( 0 0$1 ) ;
21750: LD_INT 35
21752: PPUSH
21753: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
21757: LD_ADDR_VAR 0 5
21761: PUSH
21762: LD_VAR 0 6
21766: PPUSH
21767: LD_VAR 0 3
21771: PPUSH
21772: CALL 21564 0 2
21776: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
21777: LD_VAR 0 5
21781: NOT
21782: PUSH
21783: LD_VAR 0 5
21787: PUSH
21788: LD_INT 3
21790: GREATER
21791: OR
21792: PUSH
21793: LD_EXP 58
21797: PUSH
21798: LD_VAR 0 1
21802: ARRAY
21803: OR
21804: IFFALSE 21845
// begin for i in solds do
21806: LD_ADDR_VAR 0 7
21810: PUSH
21811: LD_VAR 0 2
21815: PUSH
21816: FOR_IN
21817: IFFALSE 21841
// if HasTask ( i ) then
21819: LD_VAR 0 7
21823: PPUSH
21824: CALL_OW 314
21828: IFFALSE 21839
// ComStop ( i ) ;
21830: LD_VAR 0 7
21834: PPUSH
21835: CALL_OW 141
21839: GO 21816
21841: POP
21842: POP
// break ;
21843: GO 22080
// end ; for i in solds do
21845: LD_ADDR_VAR 0 7
21849: PUSH
21850: LD_VAR 0 2
21854: PUSH
21855: FOR_IN
21856: IFFALSE 22072
// begin if IsInUnit ( i ) then
21858: LD_VAR 0 7
21862: PPUSH
21863: CALL_OW 310
21867: IFFALSE 21878
// ComExitBuilding ( i ) ;
21869: LD_VAR 0 7
21873: PPUSH
21874: CALL_OW 122
// if GetLives ( i ) > 333 then
21878: LD_VAR 0 7
21882: PPUSH
21883: CALL_OW 256
21887: PUSH
21888: LD_INT 333
21890: GREATER
21891: IFFALSE 21919
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
21893: LD_VAR 0 7
21897: PPUSH
21898: LD_VAR 0 5
21902: PPUSH
21903: LD_VAR 0 7
21907: PPUSH
21908: CALL_OW 74
21912: PPUSH
21913: CALL_OW 115
21917: GO 22070
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
21919: LD_ADDR_VAR 0 8
21923: PUSH
21924: LD_EXP 36
21928: PUSH
21929: LD_VAR 0 1
21933: ARRAY
21934: PPUSH
21935: LD_INT 2
21937: PUSH
21938: LD_INT 30
21940: PUSH
21941: LD_INT 0
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PUSH
21948: LD_INT 30
21950: PUSH
21951: LD_INT 1
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 30
21960: PUSH
21961: LD_INT 6
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: PPUSH
21974: CALL_OW 72
21978: PPUSH
21979: LD_VAR 0 7
21983: PPUSH
21984: CALL_OW 74
21988: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
21989: LD_VAR 0 7
21993: PPUSH
21994: LD_VAR 0 8
21998: PPUSH
21999: CALL_OW 250
22003: PPUSH
22004: LD_INT 3
22006: PPUSH
22007: LD_INT 5
22009: PPUSH
22010: CALL_OW 272
22014: PPUSH
22015: LD_VAR 0 8
22019: PPUSH
22020: CALL_OW 251
22024: PPUSH
22025: LD_INT 3
22027: PPUSH
22028: LD_INT 5
22030: PPUSH
22031: CALL_OW 273
22035: PPUSH
22036: CALL_OW 111
// SetTag ( i , 0 ) ;
22040: LD_VAR 0 7
22044: PPUSH
22045: LD_INT 0
22047: PPUSH
22048: CALL_OW 109
// solds := solds diff i ;
22052: LD_ADDR_VAR 0 2
22056: PUSH
22057: LD_VAR 0 2
22061: PUSH
22062: LD_VAR 0 7
22066: DIFF
22067: ST_TO_ADDR
// continue ;
22068: GO 21855
// end ; end ;
22070: GO 21855
22072: POP
22073: POP
// until solds ;
22074: LD_VAR 0 2
22078: IFFALSE 21750
// MC_Reset ( base , 18 ) ;
22080: LD_VAR 0 1
22084: PPUSH
22085: LD_INT 18
22087: PPUSH
22088: CALL 66638 0 2
// end ;
22092: LD_VAR 0 4
22096: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
22097: LD_INT 0
22099: PPUSH
22100: PPUSH
22101: PPUSH
22102: PPUSH
22103: PPUSH
22104: PPUSH
22105: PPUSH
22106: PPUSH
22107: PPUSH
22108: PPUSH
22109: PPUSH
22110: PPUSH
22111: PPUSH
22112: PPUSH
22113: PPUSH
22114: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
22115: LD_ADDR_VAR 0 12
22119: PUSH
22120: LD_EXP 36
22124: PUSH
22125: LD_VAR 0 1
22129: ARRAY
22130: PPUSH
22131: LD_INT 25
22133: PUSH
22134: LD_INT 3
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PPUSH
22141: CALL_OW 72
22145: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
22146: LD_ADDR_VAR 0 8
22150: PUSH
22151: LD_EXP 36
22155: PUSH
22156: LD_VAR 0 1
22160: ARRAY
22161: PPUSH
22162: LD_INT 2
22164: PUSH
22165: LD_INT 25
22167: PUSH
22168: LD_INT 1
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: PUSH
22175: LD_INT 25
22177: PUSH
22178: LD_INT 5
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PUSH
22185: LD_INT 25
22187: PUSH
22188: LD_INT 8
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: PUSH
22195: LD_INT 25
22197: PUSH
22198: LD_INT 9
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: PPUSH
22212: CALL_OW 72
22216: ST_TO_ADDR
// if not defenders and not solds then
22217: LD_VAR 0 2
22221: NOT
22222: PUSH
22223: LD_VAR 0 8
22227: NOT
22228: AND
22229: IFFALSE 22233
// exit ;
22231: GO 23599
// depot_under_attack := false ;
22233: LD_ADDR_VAR 0 16
22237: PUSH
22238: LD_INT 0
22240: ST_TO_ADDR
// sold_defenders := [ ] ;
22241: LD_ADDR_VAR 0 17
22245: PUSH
22246: EMPTY
22247: ST_TO_ADDR
// if mechs then
22248: LD_VAR 0 12
22252: IFFALSE 22381
// for i in defenders do
22254: LD_ADDR_VAR 0 5
22258: PUSH
22259: LD_VAR 0 2
22263: PUSH
22264: FOR_IN
22265: IFFALSE 22379
// begin SetTag ( i , 20 ) ;
22267: LD_VAR 0 5
22271: PPUSH
22272: LD_INT 20
22274: PPUSH
22275: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
22279: LD_VAR 0 5
22283: PPUSH
22284: CALL_OW 263
22288: PUSH
22289: LD_INT 1
22291: EQUAL
22292: PUSH
22293: LD_VAR 0 5
22297: PPUSH
22298: CALL_OW 311
22302: NOT
22303: AND
22304: PUSH
22305: LD_VAR 0 12
22309: AND
22310: IFFALSE 22377
// begin un := mechs [ 1 ] ;
22312: LD_ADDR_VAR 0 10
22316: PUSH
22317: LD_VAR 0 12
22321: PUSH
22322: LD_INT 1
22324: ARRAY
22325: ST_TO_ADDR
// ComExitBuilding ( un ) ;
22326: LD_VAR 0 10
22330: PPUSH
22331: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
22335: LD_VAR 0 10
22339: PPUSH
22340: LD_VAR 0 5
22344: PPUSH
22345: CALL_OW 180
// SetTag ( un , 19 ) ;
22349: LD_VAR 0 10
22353: PPUSH
22354: LD_INT 19
22356: PPUSH
22357: CALL_OW 109
// mechs := mechs diff un ;
22361: LD_ADDR_VAR 0 12
22365: PUSH
22366: LD_VAR 0 12
22370: PUSH
22371: LD_VAR 0 10
22375: DIFF
22376: ST_TO_ADDR
// end ; end ;
22377: GO 22264
22379: POP
22380: POP
// if solds then
22381: LD_VAR 0 8
22385: IFFALSE 22444
// for i in solds do
22387: LD_ADDR_VAR 0 5
22391: PUSH
22392: LD_VAR 0 8
22396: PUSH
22397: FOR_IN
22398: IFFALSE 22442
// if not GetTag ( i ) then
22400: LD_VAR 0 5
22404: PPUSH
22405: CALL_OW 110
22409: NOT
22410: IFFALSE 22440
// begin defenders := defenders union i ;
22412: LD_ADDR_VAR 0 2
22416: PUSH
22417: LD_VAR 0 2
22421: PUSH
22422: LD_VAR 0 5
22426: UNION
22427: ST_TO_ADDR
// SetTag ( i , 18 ) ;
22428: LD_VAR 0 5
22432: PPUSH
22433: LD_INT 18
22435: PPUSH
22436: CALL_OW 109
// end ;
22440: GO 22397
22442: POP
22443: POP
// repeat wait ( 0 0$1 ) ;
22444: LD_INT 35
22446: PPUSH
22447: CALL_OW 67
// enemy := mc_scan [ base ] ;
22451: LD_ADDR_VAR 0 3
22455: PUSH
22456: LD_EXP 59
22460: PUSH
22461: LD_VAR 0 1
22465: ARRAY
22466: ST_TO_ADDR
// for i in defenders do
22467: LD_ADDR_VAR 0 5
22471: PUSH
22472: LD_VAR 0 2
22476: PUSH
22477: FOR_IN
22478: IFFALSE 23163
// begin e := NearestUnitToUnit ( enemy , i ) ;
22480: LD_ADDR_VAR 0 13
22484: PUSH
22485: LD_VAR 0 3
22489: PPUSH
22490: LD_VAR 0 5
22494: PPUSH
22495: CALL_OW 74
22499: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
22500: LD_ADDR_VAR 0 16
22504: PUSH
22505: LD_EXP 36
22509: PUSH
22510: LD_VAR 0 1
22514: ARRAY
22515: PPUSH
22516: LD_INT 2
22518: PUSH
22519: LD_INT 30
22521: PUSH
22522: LD_INT 0
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 30
22531: PUSH
22532: LD_INT 1
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: LIST
22543: PPUSH
22544: CALL_OW 72
22548: NOT
22549: PUSH
22550: LD_EXP 36
22554: PUSH
22555: LD_VAR 0 1
22559: ARRAY
22560: PPUSH
22561: LD_INT 2
22563: PUSH
22564: LD_INT 30
22566: PUSH
22567: LD_INT 0
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: PUSH
22574: LD_INT 30
22576: PUSH
22577: LD_INT 1
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: LIST
22588: PPUSH
22589: CALL_OW 72
22593: PPUSH
22594: CALL_OW 256
22598: PUSH
22599: LD_INT 600
22601: LESS
22602: OR
22603: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
22604: LD_VAR 0 5
22608: PPUSH
22609: CALL_OW 247
22613: PUSH
22614: LD_INT 2
22616: DOUBLE
22617: EQUAL
22618: IFTRUE 22622
22620: GO 22869
22622: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
22623: LD_VAR 0 5
22627: PPUSH
22628: CALL_OW 256
22632: PUSH
22633: LD_INT 650
22635: GREATER
22636: PUSH
22637: LD_VAR 0 5
22641: PPUSH
22642: LD_VAR 0 13
22646: PPUSH
22647: CALL_OW 296
22651: PUSH
22652: LD_INT 40
22654: LESS
22655: AND
22656: IFFALSE 22674
// ComAttackUnit ( i , e ) else
22658: LD_VAR 0 5
22662: PPUSH
22663: LD_VAR 0 13
22667: PPUSH
22668: CALL_OW 115
22672: GO 22752
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
22674: LD_VAR 0 5
22678: PPUSH
22679: LD_VAR 0 13
22683: PPUSH
22684: CALL_OW 296
22688: PUSH
22689: LD_INT 30
22691: GREATEREQUAL
22692: PUSH
22693: LD_VAR 0 5
22697: PPUSH
22698: CALL_OW 256
22702: PUSH
22703: LD_INT 650
22705: LESSEQUAL
22706: OR
22707: PUSH
22708: LD_VAR 0 5
22712: PPUSH
22713: LD_EXP 60
22717: PUSH
22718: LD_VAR 0 1
22722: ARRAY
22723: PPUSH
22724: CALL_OW 308
22728: NOT
22729: AND
22730: IFFALSE 22752
// ComMoveToArea ( i , mc_parking [ base ] ) ;
22732: LD_VAR 0 5
22736: PPUSH
22737: LD_EXP 60
22741: PUSH
22742: LD_VAR 0 1
22746: ARRAY
22747: PPUSH
22748: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
22752: LD_VAR 0 5
22756: PPUSH
22757: CALL_OW 256
22761: PUSH
22762: LD_INT 998
22764: LESS
22765: PUSH
22766: LD_VAR 0 5
22770: PPUSH
22771: CALL_OW 263
22775: PUSH
22776: LD_INT 1
22778: EQUAL
22779: AND
22780: PUSH
22781: LD_VAR 0 5
22785: PPUSH
22786: CALL_OW 311
22790: AND
22791: PUSH
22792: LD_VAR 0 5
22796: PPUSH
22797: LD_EXP 60
22801: PUSH
22802: LD_VAR 0 1
22806: ARRAY
22807: PPUSH
22808: CALL_OW 308
22812: AND
22813: IFFALSE 22867
// begin mech := IsDrivenBy ( i ) ;
22815: LD_ADDR_VAR 0 9
22819: PUSH
22820: LD_VAR 0 5
22824: PPUSH
22825: CALL_OW 311
22829: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
22830: LD_VAR 0 9
22834: PPUSH
22835: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
22839: LD_VAR 0 9
22843: PPUSH
22844: LD_VAR 0 5
22848: PPUSH
22849: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
22853: LD_VAR 0 9
22857: PPUSH
22858: LD_VAR 0 5
22862: PPUSH
22863: CALL_OW 180
// end ; end ; unit_human :
22867: GO 23134
22869: LD_INT 1
22871: DOUBLE
22872: EQUAL
22873: IFTRUE 22877
22875: GO 23133
22877: POP
// begin b := IsInUnit ( i ) ;
22878: LD_ADDR_VAR 0 18
22882: PUSH
22883: LD_VAR 0 5
22887: PPUSH
22888: CALL_OW 310
22892: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
22893: LD_ADDR_VAR 0 19
22897: PUSH
22898: LD_VAR 0 18
22902: NOT
22903: PUSH
22904: LD_VAR 0 18
22908: PPUSH
22909: CALL_OW 266
22913: PUSH
22914: LD_INT 32
22916: PUSH
22917: LD_INT 31
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: IN
22924: OR
22925: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
22926: LD_VAR 0 16
22930: PUSH
22931: LD_VAR 0 2
22935: PPUSH
22936: LD_INT 21
22938: PUSH
22939: LD_INT 2
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PPUSH
22946: CALL_OW 72
22950: PUSH
22951: LD_INT 1
22953: LESSEQUAL
22954: OR
22955: PUSH
22956: LD_VAR 0 19
22960: AND
22961: PUSH
22962: LD_VAR 0 5
22966: PUSH
22967: LD_VAR 0 17
22971: IN
22972: NOT
22973: AND
22974: IFFALSE 23067
// begin if b then
22976: LD_VAR 0 18
22980: IFFALSE 23029
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
22982: LD_VAR 0 18
22986: PPUSH
22987: LD_VAR 0 3
22991: PPUSH
22992: LD_VAR 0 18
22996: PPUSH
22997: CALL_OW 74
23001: PPUSH
23002: CALL_OW 296
23006: PUSH
23007: LD_INT 10
23009: LESS
23010: PUSH
23011: LD_VAR 0 18
23015: PPUSH
23016: CALL_OW 461
23020: PUSH
23021: LD_INT 7
23023: NONEQUAL
23024: AND
23025: IFFALSE 23029
// continue ;
23027: GO 22477
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
23029: LD_ADDR_VAR 0 17
23033: PUSH
23034: LD_VAR 0 17
23038: PPUSH
23039: LD_VAR 0 17
23043: PUSH
23044: LD_INT 1
23046: PLUS
23047: PPUSH
23048: LD_VAR 0 5
23052: PPUSH
23053: CALL_OW 1
23057: ST_TO_ADDR
// ComExitBuilding ( i ) ;
23058: LD_VAR 0 5
23062: PPUSH
23063: CALL_OW 122
// end ; if sold_defenders then
23067: LD_VAR 0 17
23071: IFFALSE 23131
// if i in sold_defenders then
23073: LD_VAR 0 5
23077: PUSH
23078: LD_VAR 0 17
23082: IN
23083: IFFALSE 23131
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
23085: LD_VAR 0 5
23089: PPUSH
23090: CALL_OW 314
23094: NOT
23095: PUSH
23096: LD_VAR 0 5
23100: PPUSH
23101: LD_VAR 0 13
23105: PPUSH
23106: CALL_OW 296
23110: PUSH
23111: LD_INT 30
23113: LESS
23114: AND
23115: IFFALSE 23131
// ComAttackUnit ( i , e ) ;
23117: LD_VAR 0 5
23121: PPUSH
23122: LD_VAR 0 13
23126: PPUSH
23127: CALL_OW 115
// end ; end ; end ;
23131: GO 23134
23133: POP
// if IsDead ( i ) then
23134: LD_VAR 0 5
23138: PPUSH
23139: CALL_OW 301
23143: IFFALSE 23161
// defenders := defenders diff i ;
23145: LD_ADDR_VAR 0 2
23149: PUSH
23150: LD_VAR 0 2
23154: PUSH
23155: LD_VAR 0 5
23159: DIFF
23160: ST_TO_ADDR
// end ;
23161: GO 22477
23163: POP
23164: POP
// until not enemy or not defenders ;
23165: LD_VAR 0 3
23169: NOT
23170: PUSH
23171: LD_VAR 0 2
23175: NOT
23176: OR
23177: IFFALSE 22444
// MC_Reset ( base , 18 ) ;
23179: LD_VAR 0 1
23183: PPUSH
23184: LD_INT 18
23186: PPUSH
23187: CALL 66638 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
23191: LD_ADDR_VAR 0 2
23195: PUSH
23196: LD_VAR 0 2
23200: PUSH
23201: LD_VAR 0 2
23205: PPUSH
23206: LD_INT 2
23208: PUSH
23209: LD_INT 25
23211: PUSH
23212: LD_INT 1
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: PUSH
23219: LD_INT 25
23221: PUSH
23222: LD_INT 5
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PUSH
23229: LD_INT 25
23231: PUSH
23232: LD_INT 8
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 25
23241: PUSH
23242: LD_INT 9
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: PPUSH
23256: CALL_OW 72
23260: DIFF
23261: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
23262: LD_VAR 0 3
23266: NOT
23267: PUSH
23268: LD_VAR 0 2
23272: PPUSH
23273: LD_INT 21
23275: PUSH
23276: LD_INT 2
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PPUSH
23283: CALL_OW 72
23287: AND
23288: IFFALSE 23550
// begin tmp := FilterByTag ( defenders , 19 ) ;
23290: LD_ADDR_VAR 0 11
23294: PUSH
23295: LD_VAR 0 2
23299: PPUSH
23300: LD_INT 19
23302: PPUSH
23303: CALL 59936 0 2
23307: ST_TO_ADDR
// if tmp then
23308: LD_VAR 0 11
23312: IFFALSE 23382
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
23314: LD_ADDR_VAR 0 11
23318: PUSH
23319: LD_VAR 0 11
23323: PPUSH
23324: LD_INT 25
23326: PUSH
23327: LD_INT 3
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PPUSH
23334: CALL_OW 72
23338: ST_TO_ADDR
// if tmp then
23339: LD_VAR 0 11
23343: IFFALSE 23382
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
23345: LD_ADDR_EXP 48
23349: PUSH
23350: LD_EXP 48
23354: PPUSH
23355: LD_VAR 0 1
23359: PPUSH
23360: LD_EXP 48
23364: PUSH
23365: LD_VAR 0 1
23369: ARRAY
23370: PUSH
23371: LD_VAR 0 11
23375: UNION
23376: PPUSH
23377: CALL_OW 1
23381: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
23382: LD_VAR 0 1
23386: PPUSH
23387: LD_INT 19
23389: PPUSH
23390: CALL 66638 0 2
// repeat wait ( 0 0$1 ) ;
23394: LD_INT 35
23396: PPUSH
23397: CALL_OW 67
// for i in defenders do
23401: LD_ADDR_VAR 0 5
23405: PUSH
23406: LD_VAR 0 2
23410: PUSH
23411: FOR_IN
23412: IFFALSE 23501
// begin if not IsInArea ( i , mc_parking [ base ] ) then
23414: LD_VAR 0 5
23418: PPUSH
23419: LD_EXP 60
23423: PUSH
23424: LD_VAR 0 1
23428: ARRAY
23429: PPUSH
23430: CALL_OW 308
23434: NOT
23435: IFFALSE 23459
// ComMoveToArea ( i , mc_parking [ base ] ) else
23437: LD_VAR 0 5
23441: PPUSH
23442: LD_EXP 60
23446: PUSH
23447: LD_VAR 0 1
23451: ARRAY
23452: PPUSH
23453: CALL_OW 113
23457: GO 23499
// if GetControl ( i ) = control_manual then
23459: LD_VAR 0 5
23463: PPUSH
23464: CALL_OW 263
23468: PUSH
23469: LD_INT 1
23471: EQUAL
23472: IFFALSE 23499
// if IsDrivenBy ( i ) then
23474: LD_VAR 0 5
23478: PPUSH
23479: CALL_OW 311
23483: IFFALSE 23499
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
23485: LD_VAR 0 5
23489: PPUSH
23490: CALL_OW 311
23494: PPUSH
23495: CALL_OW 121
// end ;
23499: GO 23411
23501: POP
23502: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
23503: LD_VAR 0 2
23507: PPUSH
23508: LD_INT 95
23510: PUSH
23511: LD_EXP 60
23515: PUSH
23516: LD_VAR 0 1
23520: ARRAY
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PPUSH
23526: CALL_OW 72
23530: PUSH
23531: LD_VAR 0 2
23535: EQUAL
23536: PUSH
23537: LD_EXP 59
23541: PUSH
23542: LD_VAR 0 1
23546: ARRAY
23547: OR
23548: IFFALSE 23394
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
23550: LD_ADDR_EXP 58
23554: PUSH
23555: LD_EXP 58
23559: PPUSH
23560: LD_VAR 0 1
23564: PPUSH
23565: LD_EXP 58
23569: PUSH
23570: LD_VAR 0 1
23574: ARRAY
23575: PUSH
23576: LD_VAR 0 2
23580: UNION
23581: PPUSH
23582: CALL_OW 1
23586: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
23587: LD_VAR 0 1
23591: PPUSH
23592: LD_INT 20
23594: PPUSH
23595: CALL 66638 0 2
// end ;
23599: LD_VAR 0 4
23603: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23604: LD_INT 0
23606: PPUSH
23607: PPUSH
23608: PPUSH
23609: PPUSH
// result := false ;
23610: LD_ADDR_VAR 0 2
23614: PUSH
23615: LD_INT 0
23617: ST_TO_ADDR
// side := GetSide ( unit ) ;
23618: LD_ADDR_VAR 0 3
23622: PUSH
23623: LD_VAR 0 1
23627: PPUSH
23628: CALL_OW 255
23632: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23633: LD_ADDR_VAR 0 4
23637: PUSH
23638: LD_VAR 0 1
23642: PPUSH
23643: CALL_OW 248
23647: ST_TO_ADDR
// case nat of 1 :
23648: LD_VAR 0 4
23652: PUSH
23653: LD_INT 1
23655: DOUBLE
23656: EQUAL
23657: IFTRUE 23661
23659: GO 23672
23661: POP
// tech := tech_lassight ; 2 :
23662: LD_ADDR_VAR 0 5
23666: PUSH
23667: LD_INT 12
23669: ST_TO_ADDR
23670: GO 23711
23672: LD_INT 2
23674: DOUBLE
23675: EQUAL
23676: IFTRUE 23680
23678: GO 23691
23680: POP
// tech := tech_mortar ; 3 :
23681: LD_ADDR_VAR 0 5
23685: PUSH
23686: LD_INT 41
23688: ST_TO_ADDR
23689: GO 23711
23691: LD_INT 3
23693: DOUBLE
23694: EQUAL
23695: IFTRUE 23699
23697: GO 23710
23699: POP
// tech := tech_bazooka ; end ;
23700: LD_ADDR_VAR 0 5
23704: PUSH
23705: LD_INT 44
23707: ST_TO_ADDR
23708: GO 23711
23710: POP
// if Researched ( side , tech ) then
23711: LD_VAR 0 3
23715: PPUSH
23716: LD_VAR 0 5
23720: PPUSH
23721: CALL_OW 325
23725: IFFALSE 23752
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23727: LD_ADDR_VAR 0 2
23731: PUSH
23732: LD_INT 5
23734: PUSH
23735: LD_INT 8
23737: PUSH
23738: LD_INT 9
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: LIST
23745: PUSH
23746: LD_VAR 0 4
23750: ARRAY
23751: ST_TO_ADDR
// end ;
23752: LD_VAR 0 2
23756: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23757: LD_INT 0
23759: PPUSH
23760: PPUSH
23761: PPUSH
// if not mines then
23762: LD_VAR 0 2
23766: NOT
23767: IFFALSE 23771
// exit ;
23769: GO 23915
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23771: LD_ADDR_VAR 0 5
23775: PUSH
23776: LD_INT 81
23778: PUSH
23779: LD_VAR 0 1
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: LD_INT 3
23790: PUSH
23791: LD_INT 21
23793: PUSH
23794: LD_INT 3
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PPUSH
23809: CALL_OW 69
23813: ST_TO_ADDR
// for i in mines do
23814: LD_ADDR_VAR 0 4
23818: PUSH
23819: LD_VAR 0 2
23823: PUSH
23824: FOR_IN
23825: IFFALSE 23913
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23827: LD_VAR 0 4
23831: PUSH
23832: LD_INT 1
23834: ARRAY
23835: PPUSH
23836: LD_VAR 0 4
23840: PUSH
23841: LD_INT 2
23843: ARRAY
23844: PPUSH
23845: CALL_OW 458
23849: NOT
23850: IFFALSE 23854
// continue ;
23852: GO 23824
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23854: LD_VAR 0 4
23858: PUSH
23859: LD_INT 1
23861: ARRAY
23862: PPUSH
23863: LD_VAR 0 4
23867: PUSH
23868: LD_INT 2
23870: ARRAY
23871: PPUSH
23872: CALL_OW 428
23876: PUSH
23877: LD_VAR 0 5
23881: IN
23882: IFFALSE 23911
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23884: LD_VAR 0 4
23888: PUSH
23889: LD_INT 1
23891: ARRAY
23892: PPUSH
23893: LD_VAR 0 4
23897: PUSH
23898: LD_INT 2
23900: ARRAY
23901: PPUSH
23902: LD_VAR 0 1
23906: PPUSH
23907: CALL_OW 456
// end ;
23911: GO 23824
23913: POP
23914: POP
// end ;
23915: LD_VAR 0 3
23919: RET
// export function Count ( array ) ; var i ; begin
23920: LD_INT 0
23922: PPUSH
23923: PPUSH
// result := 0 ;
23924: LD_ADDR_VAR 0 2
23928: PUSH
23929: LD_INT 0
23931: ST_TO_ADDR
// for i in array do
23932: LD_ADDR_VAR 0 3
23936: PUSH
23937: LD_VAR 0 1
23941: PUSH
23942: FOR_IN
23943: IFFALSE 23967
// if i then
23945: LD_VAR 0 3
23949: IFFALSE 23965
// result := result + 1 ;
23951: LD_ADDR_VAR 0 2
23955: PUSH
23956: LD_VAR 0 2
23960: PUSH
23961: LD_INT 1
23963: PLUS
23964: ST_TO_ADDR
23965: GO 23942
23967: POP
23968: POP
// end ;
23969: LD_VAR 0 2
23973: RET
// export function IsEmpty ( building ) ; begin
23974: LD_INT 0
23976: PPUSH
// if not building then
23977: LD_VAR 0 1
23981: NOT
23982: IFFALSE 23986
// exit ;
23984: GO 24029
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23986: LD_ADDR_VAR 0 2
23990: PUSH
23991: LD_VAR 0 1
23995: PUSH
23996: LD_INT 22
23998: PUSH
23999: LD_VAR 0 1
24003: PPUSH
24004: CALL_OW 255
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 58
24015: PUSH
24016: EMPTY
24017: LIST
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PPUSH
24023: CALL_OW 69
24027: IN
24028: ST_TO_ADDR
// end ;
24029: LD_VAR 0 2
24033: RET
// export function IsNotFull ( building ) ; begin
24034: LD_INT 0
24036: PPUSH
// if not building then
24037: LD_VAR 0 1
24041: NOT
24042: IFFALSE 24046
// exit ;
24044: GO 24065
// result := UnitsInside ( building ) < 6 ;
24046: LD_ADDR_VAR 0 2
24050: PUSH
24051: LD_VAR 0 1
24055: PPUSH
24056: CALL_OW 313
24060: PUSH
24061: LD_INT 6
24063: LESS
24064: ST_TO_ADDR
// end ;
24065: LD_VAR 0 2
24069: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24070: LD_INT 0
24072: PPUSH
24073: PPUSH
24074: PPUSH
24075: PPUSH
// tmp := [ ] ;
24076: LD_ADDR_VAR 0 3
24080: PUSH
24081: EMPTY
24082: ST_TO_ADDR
// list := [ ] ;
24083: LD_ADDR_VAR 0 5
24087: PUSH
24088: EMPTY
24089: ST_TO_ADDR
// for i = 16 to 25 do
24090: LD_ADDR_VAR 0 4
24094: PUSH
24095: DOUBLE
24096: LD_INT 16
24098: DEC
24099: ST_TO_ADDR
24100: LD_INT 25
24102: PUSH
24103: FOR_TO
24104: IFFALSE 24177
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24106: LD_ADDR_VAR 0 3
24110: PUSH
24111: LD_VAR 0 3
24115: PUSH
24116: LD_INT 22
24118: PUSH
24119: LD_VAR 0 1
24123: PPUSH
24124: CALL_OW 255
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: LD_INT 91
24135: PUSH
24136: LD_VAR 0 1
24140: PUSH
24141: LD_INT 6
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 30
24151: PUSH
24152: LD_VAR 0 4
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: LIST
24165: PUSH
24166: EMPTY
24167: LIST
24168: PPUSH
24169: CALL_OW 69
24173: ADD
24174: ST_TO_ADDR
24175: GO 24103
24177: POP
24178: POP
// for i = 1 to tmp do
24179: LD_ADDR_VAR 0 4
24183: PUSH
24184: DOUBLE
24185: LD_INT 1
24187: DEC
24188: ST_TO_ADDR
24189: LD_VAR 0 3
24193: PUSH
24194: FOR_TO
24195: IFFALSE 24283
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24197: LD_ADDR_VAR 0 5
24201: PUSH
24202: LD_VAR 0 5
24206: PUSH
24207: LD_VAR 0 3
24211: PUSH
24212: LD_VAR 0 4
24216: ARRAY
24217: PPUSH
24218: CALL_OW 266
24222: PUSH
24223: LD_VAR 0 3
24227: PUSH
24228: LD_VAR 0 4
24232: ARRAY
24233: PPUSH
24234: CALL_OW 250
24238: PUSH
24239: LD_VAR 0 3
24243: PUSH
24244: LD_VAR 0 4
24248: ARRAY
24249: PPUSH
24250: CALL_OW 251
24254: PUSH
24255: LD_VAR 0 3
24259: PUSH
24260: LD_VAR 0 4
24264: ARRAY
24265: PPUSH
24266: CALL_OW 254
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: PUSH
24277: EMPTY
24278: LIST
24279: ADD
24280: ST_TO_ADDR
24281: GO 24194
24283: POP
24284: POP
// result := list ;
24285: LD_ADDR_VAR 0 2
24289: PUSH
24290: LD_VAR 0 5
24294: ST_TO_ADDR
// end ;
24295: LD_VAR 0 2
24299: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24300: LD_INT 0
24302: PPUSH
24303: PPUSH
24304: PPUSH
24305: PPUSH
24306: PPUSH
24307: PPUSH
24308: PPUSH
// if not factory then
24309: LD_VAR 0 1
24313: NOT
24314: IFFALSE 24318
// exit ;
24316: GO 24843
// if control = control_apeman then
24318: LD_VAR 0 4
24322: PUSH
24323: LD_INT 5
24325: EQUAL
24326: IFFALSE 24435
// begin tmp := UnitsInside ( factory ) ;
24328: LD_ADDR_VAR 0 8
24332: PUSH
24333: LD_VAR 0 1
24337: PPUSH
24338: CALL_OW 313
24342: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24343: LD_VAR 0 8
24347: PPUSH
24348: LD_INT 25
24350: PUSH
24351: LD_INT 12
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PPUSH
24358: CALL_OW 72
24362: NOT
24363: IFFALSE 24373
// control := control_manual ;
24365: LD_ADDR_VAR 0 4
24369: PUSH
24370: LD_INT 1
24372: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24373: LD_ADDR_VAR 0 8
24377: PUSH
24378: LD_VAR 0 1
24382: PPUSH
24383: CALL 24070 0 1
24387: ST_TO_ADDR
// if tmp then
24388: LD_VAR 0 8
24392: IFFALSE 24435
// begin for i in tmp do
24394: LD_ADDR_VAR 0 7
24398: PUSH
24399: LD_VAR 0 8
24403: PUSH
24404: FOR_IN
24405: IFFALSE 24433
// if i [ 1 ] = b_ext_radar then
24407: LD_VAR 0 7
24411: PUSH
24412: LD_INT 1
24414: ARRAY
24415: PUSH
24416: LD_INT 20
24418: EQUAL
24419: IFFALSE 24431
// begin control := control_remote ;
24421: LD_ADDR_VAR 0 4
24425: PUSH
24426: LD_INT 2
24428: ST_TO_ADDR
// break ;
24429: GO 24433
// end ;
24431: GO 24404
24433: POP
24434: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24435: LD_VAR 0 1
24439: PPUSH
24440: LD_VAR 0 2
24444: PPUSH
24445: LD_VAR 0 3
24449: PPUSH
24450: LD_VAR 0 4
24454: PPUSH
24455: LD_VAR 0 5
24459: PPUSH
24460: CALL_OW 448
24464: IFFALSE 24499
// begin result := [ chassis , engine , control , weapon ] ;
24466: LD_ADDR_VAR 0 6
24470: PUSH
24471: LD_VAR 0 2
24475: PUSH
24476: LD_VAR 0 3
24480: PUSH
24481: LD_VAR 0 4
24485: PUSH
24486: LD_VAR 0 5
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: ST_TO_ADDR
// exit ;
24497: GO 24843
// end ; _chassis := AvailableChassisList ( factory ) ;
24499: LD_ADDR_VAR 0 9
24503: PUSH
24504: LD_VAR 0 1
24508: PPUSH
24509: CALL_OW 475
24513: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24514: LD_ADDR_VAR 0 11
24518: PUSH
24519: LD_VAR 0 1
24523: PPUSH
24524: CALL_OW 476
24528: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24529: LD_ADDR_VAR 0 12
24533: PUSH
24534: LD_VAR 0 1
24538: PPUSH
24539: CALL_OW 477
24543: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24544: LD_ADDR_VAR 0 10
24548: PUSH
24549: LD_VAR 0 1
24553: PPUSH
24554: CALL_OW 478
24558: ST_TO_ADDR
// if not chassis in _chassis then
24559: LD_VAR 0 2
24563: PUSH
24564: LD_VAR 0 9
24568: IN
24569: NOT
24570: IFFALSE 24596
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24572: LD_ADDR_VAR 0 2
24576: PUSH
24577: LD_VAR 0 9
24581: PUSH
24582: LD_INT 1
24584: PPUSH
24585: LD_VAR 0 9
24589: PPUSH
24590: CALL_OW 12
24594: ARRAY
24595: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24596: LD_VAR 0 2
24600: PPUSH
24601: LD_VAR 0 3
24605: PPUSH
24606: CALL 24848 0 2
24610: NOT
24611: IFFALSE 24670
// repeat engine := _engine [ 1 ] ;
24613: LD_ADDR_VAR 0 3
24617: PUSH
24618: LD_VAR 0 11
24622: PUSH
24623: LD_INT 1
24625: ARRAY
24626: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24627: LD_ADDR_VAR 0 11
24631: PUSH
24632: LD_VAR 0 11
24636: PPUSH
24637: LD_INT 1
24639: PPUSH
24640: CALL_OW 3
24644: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24645: LD_VAR 0 2
24649: PPUSH
24650: LD_VAR 0 3
24654: PPUSH
24655: CALL 24848 0 2
24659: PUSH
24660: LD_VAR 0 11
24664: PUSH
24665: EMPTY
24666: EQUAL
24667: OR
24668: IFFALSE 24613
// if not control in _control then
24670: LD_VAR 0 4
24674: PUSH
24675: LD_VAR 0 12
24679: IN
24680: NOT
24681: IFFALSE 24707
// control := _control [ rand ( 1 , _control ) ] ;
24683: LD_ADDR_VAR 0 4
24687: PUSH
24688: LD_VAR 0 12
24692: PUSH
24693: LD_INT 1
24695: PPUSH
24696: LD_VAR 0 12
24700: PPUSH
24701: CALL_OW 12
24705: ARRAY
24706: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24707: LD_VAR 0 2
24711: PPUSH
24712: LD_VAR 0 5
24716: PPUSH
24717: CALL 25068 0 2
24721: NOT
24722: IFFALSE 24781
// repeat weapon := _weapon [ 1 ] ;
24724: LD_ADDR_VAR 0 5
24728: PUSH
24729: LD_VAR 0 10
24733: PUSH
24734: LD_INT 1
24736: ARRAY
24737: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24738: LD_ADDR_VAR 0 10
24742: PUSH
24743: LD_VAR 0 10
24747: PPUSH
24748: LD_INT 1
24750: PPUSH
24751: CALL_OW 3
24755: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24756: LD_VAR 0 2
24760: PPUSH
24761: LD_VAR 0 5
24765: PPUSH
24766: CALL 25068 0 2
24770: PUSH
24771: LD_VAR 0 10
24775: PUSH
24776: EMPTY
24777: EQUAL
24778: OR
24779: IFFALSE 24724
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24781: LD_VAR 0 1
24785: PPUSH
24786: LD_VAR 0 2
24790: PPUSH
24791: LD_VAR 0 3
24795: PPUSH
24796: LD_VAR 0 4
24800: PPUSH
24801: LD_VAR 0 5
24805: PPUSH
24806: CALL_OW 448
24810: IFFALSE 24843
// result := [ chassis , engine , control , weapon ] ;
24812: LD_ADDR_VAR 0 6
24816: PUSH
24817: LD_VAR 0 2
24821: PUSH
24822: LD_VAR 0 3
24826: PUSH
24827: LD_VAR 0 4
24831: PUSH
24832: LD_VAR 0 5
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: ST_TO_ADDR
// end ;
24843: LD_VAR 0 6
24847: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24848: LD_INT 0
24850: PPUSH
// if not chassis or not engine then
24851: LD_VAR 0 1
24855: NOT
24856: PUSH
24857: LD_VAR 0 2
24861: NOT
24862: OR
24863: IFFALSE 24867
// exit ;
24865: GO 25063
// case engine of engine_solar :
24867: LD_VAR 0 2
24871: PUSH
24872: LD_INT 2
24874: DOUBLE
24875: EQUAL
24876: IFTRUE 24880
24878: GO 24918
24880: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24881: LD_ADDR_VAR 0 3
24885: PUSH
24886: LD_INT 11
24888: PUSH
24889: LD_INT 12
24891: PUSH
24892: LD_INT 13
24894: PUSH
24895: LD_INT 14
24897: PUSH
24898: LD_INT 1
24900: PUSH
24901: LD_INT 2
24903: PUSH
24904: LD_INT 3
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: ST_TO_ADDR
24916: GO 25047
24918: LD_INT 1
24920: DOUBLE
24921: EQUAL
24922: IFTRUE 24926
24924: GO 24988
24926: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24927: LD_ADDR_VAR 0 3
24931: PUSH
24932: LD_INT 11
24934: PUSH
24935: LD_INT 12
24937: PUSH
24938: LD_INT 13
24940: PUSH
24941: LD_INT 14
24943: PUSH
24944: LD_INT 1
24946: PUSH
24947: LD_INT 2
24949: PUSH
24950: LD_INT 3
24952: PUSH
24953: LD_INT 4
24955: PUSH
24956: LD_INT 5
24958: PUSH
24959: LD_INT 21
24961: PUSH
24962: LD_INT 23
24964: PUSH
24965: LD_INT 22
24967: PUSH
24968: LD_INT 24
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: ST_TO_ADDR
24986: GO 25047
24988: LD_INT 3
24990: DOUBLE
24991: EQUAL
24992: IFTRUE 24996
24994: GO 25046
24996: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24997: LD_ADDR_VAR 0 3
25001: PUSH
25002: LD_INT 13
25004: PUSH
25005: LD_INT 14
25007: PUSH
25008: LD_INT 2
25010: PUSH
25011: LD_INT 3
25013: PUSH
25014: LD_INT 4
25016: PUSH
25017: LD_INT 5
25019: PUSH
25020: LD_INT 21
25022: PUSH
25023: LD_INT 22
25025: PUSH
25026: LD_INT 23
25028: PUSH
25029: LD_INT 24
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: ST_TO_ADDR
25044: GO 25047
25046: POP
// result := ( chassis in result ) ;
25047: LD_ADDR_VAR 0 3
25051: PUSH
25052: LD_VAR 0 1
25056: PUSH
25057: LD_VAR 0 3
25061: IN
25062: ST_TO_ADDR
// end ;
25063: LD_VAR 0 3
25067: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25068: LD_INT 0
25070: PPUSH
// if not chassis or not weapon then
25071: LD_VAR 0 1
25075: NOT
25076: PUSH
25077: LD_VAR 0 2
25081: NOT
25082: OR
25083: IFFALSE 25087
// exit ;
25085: GO 26113
// case weapon of us_machine_gun :
25087: LD_VAR 0 2
25091: PUSH
25092: LD_INT 2
25094: DOUBLE
25095: EQUAL
25096: IFTRUE 25100
25098: GO 25130
25100: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25101: LD_ADDR_VAR 0 3
25105: PUSH
25106: LD_INT 1
25108: PUSH
25109: LD_INT 2
25111: PUSH
25112: LD_INT 3
25114: PUSH
25115: LD_INT 4
25117: PUSH
25118: LD_INT 5
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: ST_TO_ADDR
25128: GO 26097
25130: LD_INT 3
25132: DOUBLE
25133: EQUAL
25134: IFTRUE 25138
25136: GO 25168
25138: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25139: LD_ADDR_VAR 0 3
25143: PUSH
25144: LD_INT 1
25146: PUSH
25147: LD_INT 2
25149: PUSH
25150: LD_INT 3
25152: PUSH
25153: LD_INT 4
25155: PUSH
25156: LD_INT 5
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: ST_TO_ADDR
25166: GO 26097
25168: LD_INT 11
25170: DOUBLE
25171: EQUAL
25172: IFTRUE 25176
25174: GO 25206
25176: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25177: LD_ADDR_VAR 0 3
25181: PUSH
25182: LD_INT 1
25184: PUSH
25185: LD_INT 2
25187: PUSH
25188: LD_INT 3
25190: PUSH
25191: LD_INT 4
25193: PUSH
25194: LD_INT 5
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: ST_TO_ADDR
25204: GO 26097
25206: LD_INT 4
25208: DOUBLE
25209: EQUAL
25210: IFTRUE 25214
25212: GO 25240
25214: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25215: LD_ADDR_VAR 0 3
25219: PUSH
25220: LD_INT 2
25222: PUSH
25223: LD_INT 3
25225: PUSH
25226: LD_INT 4
25228: PUSH
25229: LD_INT 5
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: ST_TO_ADDR
25238: GO 26097
25240: LD_INT 5
25242: DOUBLE
25243: EQUAL
25244: IFTRUE 25248
25246: GO 25274
25248: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25249: LD_ADDR_VAR 0 3
25253: PUSH
25254: LD_INT 2
25256: PUSH
25257: LD_INT 3
25259: PUSH
25260: LD_INT 4
25262: PUSH
25263: LD_INT 5
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: ST_TO_ADDR
25272: GO 26097
25274: LD_INT 9
25276: DOUBLE
25277: EQUAL
25278: IFTRUE 25282
25280: GO 25308
25282: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25283: LD_ADDR_VAR 0 3
25287: PUSH
25288: LD_INT 2
25290: PUSH
25291: LD_INT 3
25293: PUSH
25294: LD_INT 4
25296: PUSH
25297: LD_INT 5
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: ST_TO_ADDR
25306: GO 26097
25308: LD_INT 7
25310: DOUBLE
25311: EQUAL
25312: IFTRUE 25316
25314: GO 25342
25316: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25317: LD_ADDR_VAR 0 3
25321: PUSH
25322: LD_INT 2
25324: PUSH
25325: LD_INT 3
25327: PUSH
25328: LD_INT 4
25330: PUSH
25331: LD_INT 5
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: ST_TO_ADDR
25340: GO 26097
25342: LD_INT 12
25344: DOUBLE
25345: EQUAL
25346: IFTRUE 25350
25348: GO 25376
25350: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25351: LD_ADDR_VAR 0 3
25355: PUSH
25356: LD_INT 2
25358: PUSH
25359: LD_INT 3
25361: PUSH
25362: LD_INT 4
25364: PUSH
25365: LD_INT 5
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: ST_TO_ADDR
25374: GO 26097
25376: LD_INT 13
25378: DOUBLE
25379: EQUAL
25380: IFTRUE 25384
25382: GO 25410
25384: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25385: LD_ADDR_VAR 0 3
25389: PUSH
25390: LD_INT 2
25392: PUSH
25393: LD_INT 3
25395: PUSH
25396: LD_INT 4
25398: PUSH
25399: LD_INT 5
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: ST_TO_ADDR
25408: GO 26097
25410: LD_INT 14
25412: DOUBLE
25413: EQUAL
25414: IFTRUE 25418
25416: GO 25436
25418: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25419: LD_ADDR_VAR 0 3
25423: PUSH
25424: LD_INT 4
25426: PUSH
25427: LD_INT 5
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: ST_TO_ADDR
25434: GO 26097
25436: LD_INT 6
25438: DOUBLE
25439: EQUAL
25440: IFTRUE 25444
25442: GO 25462
25444: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25445: LD_ADDR_VAR 0 3
25449: PUSH
25450: LD_INT 4
25452: PUSH
25453: LD_INT 5
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: ST_TO_ADDR
25460: GO 26097
25462: LD_INT 10
25464: DOUBLE
25465: EQUAL
25466: IFTRUE 25470
25468: GO 25488
25470: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25471: LD_ADDR_VAR 0 3
25475: PUSH
25476: LD_INT 4
25478: PUSH
25479: LD_INT 5
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: ST_TO_ADDR
25486: GO 26097
25488: LD_INT 22
25490: DOUBLE
25491: EQUAL
25492: IFTRUE 25496
25494: GO 25522
25496: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25497: LD_ADDR_VAR 0 3
25501: PUSH
25502: LD_INT 11
25504: PUSH
25505: LD_INT 12
25507: PUSH
25508: LD_INT 13
25510: PUSH
25511: LD_INT 14
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: ST_TO_ADDR
25520: GO 26097
25522: LD_INT 23
25524: DOUBLE
25525: EQUAL
25526: IFTRUE 25530
25528: GO 25556
25530: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25531: LD_ADDR_VAR 0 3
25535: PUSH
25536: LD_INT 11
25538: PUSH
25539: LD_INT 12
25541: PUSH
25542: LD_INT 13
25544: PUSH
25545: LD_INT 14
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: ST_TO_ADDR
25554: GO 26097
25556: LD_INT 24
25558: DOUBLE
25559: EQUAL
25560: IFTRUE 25564
25562: GO 25590
25564: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25565: LD_ADDR_VAR 0 3
25569: PUSH
25570: LD_INT 11
25572: PUSH
25573: LD_INT 12
25575: PUSH
25576: LD_INT 13
25578: PUSH
25579: LD_INT 14
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: ST_TO_ADDR
25588: GO 26097
25590: LD_INT 30
25592: DOUBLE
25593: EQUAL
25594: IFTRUE 25598
25596: GO 25624
25598: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25599: LD_ADDR_VAR 0 3
25603: PUSH
25604: LD_INT 11
25606: PUSH
25607: LD_INT 12
25609: PUSH
25610: LD_INT 13
25612: PUSH
25613: LD_INT 14
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: ST_TO_ADDR
25622: GO 26097
25624: LD_INT 25
25626: DOUBLE
25627: EQUAL
25628: IFTRUE 25632
25630: GO 25650
25632: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25633: LD_ADDR_VAR 0 3
25637: PUSH
25638: LD_INT 13
25640: PUSH
25641: LD_INT 14
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: ST_TO_ADDR
25648: GO 26097
25650: LD_INT 27
25652: DOUBLE
25653: EQUAL
25654: IFTRUE 25658
25656: GO 25676
25658: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25659: LD_ADDR_VAR 0 3
25663: PUSH
25664: LD_INT 13
25666: PUSH
25667: LD_INT 14
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: ST_TO_ADDR
25674: GO 26097
25676: LD_INT 28
25678: DOUBLE
25679: EQUAL
25680: IFTRUE 25684
25682: GO 25702
25684: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25685: LD_ADDR_VAR 0 3
25689: PUSH
25690: LD_INT 13
25692: PUSH
25693: LD_INT 14
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: ST_TO_ADDR
25700: GO 26097
25702: LD_INT 29
25704: DOUBLE
25705: EQUAL
25706: IFTRUE 25710
25708: GO 25728
25710: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25711: LD_ADDR_VAR 0 3
25715: PUSH
25716: LD_INT 13
25718: PUSH
25719: LD_INT 14
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: ST_TO_ADDR
25726: GO 26097
25728: LD_INT 31
25730: DOUBLE
25731: EQUAL
25732: IFTRUE 25736
25734: GO 25754
25736: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25737: LD_ADDR_VAR 0 3
25741: PUSH
25742: LD_INT 13
25744: PUSH
25745: LD_INT 14
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: ST_TO_ADDR
25752: GO 26097
25754: LD_INT 26
25756: DOUBLE
25757: EQUAL
25758: IFTRUE 25762
25760: GO 25780
25762: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25763: LD_ADDR_VAR 0 3
25767: PUSH
25768: LD_INT 13
25770: PUSH
25771: LD_INT 14
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: ST_TO_ADDR
25778: GO 26097
25780: LD_INT 42
25782: DOUBLE
25783: EQUAL
25784: IFTRUE 25788
25786: GO 25814
25788: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25789: LD_ADDR_VAR 0 3
25793: PUSH
25794: LD_INT 21
25796: PUSH
25797: LD_INT 22
25799: PUSH
25800: LD_INT 23
25802: PUSH
25803: LD_INT 24
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: ST_TO_ADDR
25812: GO 26097
25814: LD_INT 43
25816: DOUBLE
25817: EQUAL
25818: IFTRUE 25822
25820: GO 25848
25822: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25823: LD_ADDR_VAR 0 3
25827: PUSH
25828: LD_INT 21
25830: PUSH
25831: LD_INT 22
25833: PUSH
25834: LD_INT 23
25836: PUSH
25837: LD_INT 24
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: ST_TO_ADDR
25846: GO 26097
25848: LD_INT 44
25850: DOUBLE
25851: EQUAL
25852: IFTRUE 25856
25854: GO 25882
25856: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25857: LD_ADDR_VAR 0 3
25861: PUSH
25862: LD_INT 21
25864: PUSH
25865: LD_INT 22
25867: PUSH
25868: LD_INT 23
25870: PUSH
25871: LD_INT 24
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: ST_TO_ADDR
25880: GO 26097
25882: LD_INT 45
25884: DOUBLE
25885: EQUAL
25886: IFTRUE 25890
25888: GO 25916
25890: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25891: LD_ADDR_VAR 0 3
25895: PUSH
25896: LD_INT 21
25898: PUSH
25899: LD_INT 22
25901: PUSH
25902: LD_INT 23
25904: PUSH
25905: LD_INT 24
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: ST_TO_ADDR
25914: GO 26097
25916: LD_INT 49
25918: DOUBLE
25919: EQUAL
25920: IFTRUE 25924
25922: GO 25950
25924: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25925: LD_ADDR_VAR 0 3
25929: PUSH
25930: LD_INT 21
25932: PUSH
25933: LD_INT 22
25935: PUSH
25936: LD_INT 23
25938: PUSH
25939: LD_INT 24
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: ST_TO_ADDR
25948: GO 26097
25950: LD_INT 51
25952: DOUBLE
25953: EQUAL
25954: IFTRUE 25958
25956: GO 25984
25958: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25959: LD_ADDR_VAR 0 3
25963: PUSH
25964: LD_INT 21
25966: PUSH
25967: LD_INT 22
25969: PUSH
25970: LD_INT 23
25972: PUSH
25973: LD_INT 24
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: ST_TO_ADDR
25982: GO 26097
25984: LD_INT 52
25986: DOUBLE
25987: EQUAL
25988: IFTRUE 25992
25990: GO 26018
25992: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25993: LD_ADDR_VAR 0 3
25997: PUSH
25998: LD_INT 21
26000: PUSH
26001: LD_INT 22
26003: PUSH
26004: LD_INT 23
26006: PUSH
26007: LD_INT 24
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: ST_TO_ADDR
26016: GO 26097
26018: LD_INT 53
26020: DOUBLE
26021: EQUAL
26022: IFTRUE 26026
26024: GO 26044
26026: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26027: LD_ADDR_VAR 0 3
26031: PUSH
26032: LD_INT 23
26034: PUSH
26035: LD_INT 24
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: ST_TO_ADDR
26042: GO 26097
26044: LD_INT 46
26046: DOUBLE
26047: EQUAL
26048: IFTRUE 26052
26050: GO 26070
26052: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26053: LD_ADDR_VAR 0 3
26057: PUSH
26058: LD_INT 23
26060: PUSH
26061: LD_INT 24
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: ST_TO_ADDR
26068: GO 26097
26070: LD_INT 47
26072: DOUBLE
26073: EQUAL
26074: IFTRUE 26078
26076: GO 26096
26078: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26079: LD_ADDR_VAR 0 3
26083: PUSH
26084: LD_INT 23
26086: PUSH
26087: LD_INT 24
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: ST_TO_ADDR
26094: GO 26097
26096: POP
// result := ( chassis in result ) ;
26097: LD_ADDR_VAR 0 3
26101: PUSH
26102: LD_VAR 0 1
26106: PUSH
26107: LD_VAR 0 3
26111: IN
26112: ST_TO_ADDR
// end ;
26113: LD_VAR 0 3
26117: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26118: LD_INT 0
26120: PPUSH
26121: PPUSH
26122: PPUSH
26123: PPUSH
26124: PPUSH
26125: PPUSH
26126: PPUSH
// result := array ;
26127: LD_ADDR_VAR 0 5
26131: PUSH
26132: LD_VAR 0 1
26136: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26137: LD_VAR 0 1
26141: NOT
26142: PUSH
26143: LD_VAR 0 2
26147: NOT
26148: OR
26149: PUSH
26150: LD_VAR 0 3
26154: NOT
26155: OR
26156: PUSH
26157: LD_VAR 0 2
26161: PUSH
26162: LD_VAR 0 1
26166: GREATER
26167: OR
26168: PUSH
26169: LD_VAR 0 3
26173: PUSH
26174: LD_VAR 0 1
26178: GREATER
26179: OR
26180: IFFALSE 26184
// exit ;
26182: GO 26480
// if direction then
26184: LD_VAR 0 4
26188: IFFALSE 26252
// begin d := 1 ;
26190: LD_ADDR_VAR 0 9
26194: PUSH
26195: LD_INT 1
26197: ST_TO_ADDR
// if i_from > i_to then
26198: LD_VAR 0 2
26202: PUSH
26203: LD_VAR 0 3
26207: GREATER
26208: IFFALSE 26234
// length := ( array - i_from ) + i_to else
26210: LD_ADDR_VAR 0 11
26214: PUSH
26215: LD_VAR 0 1
26219: PUSH
26220: LD_VAR 0 2
26224: MINUS
26225: PUSH
26226: LD_VAR 0 3
26230: PLUS
26231: ST_TO_ADDR
26232: GO 26250
// length := i_to - i_from ;
26234: LD_ADDR_VAR 0 11
26238: PUSH
26239: LD_VAR 0 3
26243: PUSH
26244: LD_VAR 0 2
26248: MINUS
26249: ST_TO_ADDR
// end else
26250: GO 26313
// begin d := - 1 ;
26252: LD_ADDR_VAR 0 9
26256: PUSH
26257: LD_INT 1
26259: NEG
26260: ST_TO_ADDR
// if i_from > i_to then
26261: LD_VAR 0 2
26265: PUSH
26266: LD_VAR 0 3
26270: GREATER
26271: IFFALSE 26291
// length := i_from - i_to else
26273: LD_ADDR_VAR 0 11
26277: PUSH
26278: LD_VAR 0 2
26282: PUSH
26283: LD_VAR 0 3
26287: MINUS
26288: ST_TO_ADDR
26289: GO 26313
// length := ( array - i_to ) + i_from ;
26291: LD_ADDR_VAR 0 11
26295: PUSH
26296: LD_VAR 0 1
26300: PUSH
26301: LD_VAR 0 3
26305: MINUS
26306: PUSH
26307: LD_VAR 0 2
26311: PLUS
26312: ST_TO_ADDR
// end ; if not length then
26313: LD_VAR 0 11
26317: NOT
26318: IFFALSE 26322
// exit ;
26320: GO 26480
// tmp := array ;
26322: LD_ADDR_VAR 0 10
26326: PUSH
26327: LD_VAR 0 1
26331: ST_TO_ADDR
// for i = 1 to length do
26332: LD_ADDR_VAR 0 6
26336: PUSH
26337: DOUBLE
26338: LD_INT 1
26340: DEC
26341: ST_TO_ADDR
26342: LD_VAR 0 11
26346: PUSH
26347: FOR_TO
26348: IFFALSE 26468
// begin for j = 1 to array do
26350: LD_ADDR_VAR 0 7
26354: PUSH
26355: DOUBLE
26356: LD_INT 1
26358: DEC
26359: ST_TO_ADDR
26360: LD_VAR 0 1
26364: PUSH
26365: FOR_TO
26366: IFFALSE 26454
// begin k := j + d ;
26368: LD_ADDR_VAR 0 8
26372: PUSH
26373: LD_VAR 0 7
26377: PUSH
26378: LD_VAR 0 9
26382: PLUS
26383: ST_TO_ADDR
// if k > array then
26384: LD_VAR 0 8
26388: PUSH
26389: LD_VAR 0 1
26393: GREATER
26394: IFFALSE 26404
// k := 1 ;
26396: LD_ADDR_VAR 0 8
26400: PUSH
26401: LD_INT 1
26403: ST_TO_ADDR
// if not k then
26404: LD_VAR 0 8
26408: NOT
26409: IFFALSE 26421
// k := array ;
26411: LD_ADDR_VAR 0 8
26415: PUSH
26416: LD_VAR 0 1
26420: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26421: LD_ADDR_VAR 0 10
26425: PUSH
26426: LD_VAR 0 10
26430: PPUSH
26431: LD_VAR 0 8
26435: PPUSH
26436: LD_VAR 0 1
26440: PUSH
26441: LD_VAR 0 7
26445: ARRAY
26446: PPUSH
26447: CALL_OW 1
26451: ST_TO_ADDR
// end ;
26452: GO 26365
26454: POP
26455: POP
// array := tmp ;
26456: LD_ADDR_VAR 0 1
26460: PUSH
26461: LD_VAR 0 10
26465: ST_TO_ADDR
// end ;
26466: GO 26347
26468: POP
26469: POP
// result := array ;
26470: LD_ADDR_VAR 0 5
26474: PUSH
26475: LD_VAR 0 1
26479: ST_TO_ADDR
// end ;
26480: LD_VAR 0 5
26484: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26485: LD_INT 0
26487: PPUSH
26488: PPUSH
// result := 0 ;
26489: LD_ADDR_VAR 0 3
26493: PUSH
26494: LD_INT 0
26496: ST_TO_ADDR
// if not array or not value in array then
26497: LD_VAR 0 1
26501: NOT
26502: PUSH
26503: LD_VAR 0 2
26507: PUSH
26508: LD_VAR 0 1
26512: IN
26513: NOT
26514: OR
26515: IFFALSE 26519
// exit ;
26517: GO 26573
// for i = 1 to array do
26519: LD_ADDR_VAR 0 4
26523: PUSH
26524: DOUBLE
26525: LD_INT 1
26527: DEC
26528: ST_TO_ADDR
26529: LD_VAR 0 1
26533: PUSH
26534: FOR_TO
26535: IFFALSE 26571
// if value = array [ i ] then
26537: LD_VAR 0 2
26541: PUSH
26542: LD_VAR 0 1
26546: PUSH
26547: LD_VAR 0 4
26551: ARRAY
26552: EQUAL
26553: IFFALSE 26569
// begin result := i ;
26555: LD_ADDR_VAR 0 3
26559: PUSH
26560: LD_VAR 0 4
26564: ST_TO_ADDR
// exit ;
26565: POP
26566: POP
26567: GO 26573
// end ;
26569: GO 26534
26571: POP
26572: POP
// end ;
26573: LD_VAR 0 3
26577: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26578: LD_INT 0
26580: PPUSH
// vc_chassis := chassis ;
26581: LD_ADDR_OWVAR 37
26585: PUSH
26586: LD_VAR 0 1
26590: ST_TO_ADDR
// vc_engine := engine ;
26591: LD_ADDR_OWVAR 39
26595: PUSH
26596: LD_VAR 0 2
26600: ST_TO_ADDR
// vc_control := control ;
26601: LD_ADDR_OWVAR 38
26605: PUSH
26606: LD_VAR 0 3
26610: ST_TO_ADDR
// vc_weapon := weapon ;
26611: LD_ADDR_OWVAR 40
26615: PUSH
26616: LD_VAR 0 4
26620: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26621: LD_ADDR_OWVAR 41
26625: PUSH
26626: LD_VAR 0 5
26630: ST_TO_ADDR
// end ;
26631: LD_VAR 0 6
26635: RET
// export function WantPlant ( unit ) ; var task ; begin
26636: LD_INT 0
26638: PPUSH
26639: PPUSH
// result := false ;
26640: LD_ADDR_VAR 0 2
26644: PUSH
26645: LD_INT 0
26647: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26648: LD_ADDR_VAR 0 3
26652: PUSH
26653: LD_VAR 0 1
26657: PPUSH
26658: CALL_OW 437
26662: ST_TO_ADDR
// if task then
26663: LD_VAR 0 3
26667: IFFALSE 26695
// if task [ 1 ] [ 1 ] = p then
26669: LD_VAR 0 3
26673: PUSH
26674: LD_INT 1
26676: ARRAY
26677: PUSH
26678: LD_INT 1
26680: ARRAY
26681: PUSH
26682: LD_STRING p
26684: EQUAL
26685: IFFALSE 26695
// result := true ;
26687: LD_ADDR_VAR 0 2
26691: PUSH
26692: LD_INT 1
26694: ST_TO_ADDR
// end ;
26695: LD_VAR 0 2
26699: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26700: LD_INT 0
26702: PPUSH
26703: PPUSH
26704: PPUSH
26705: PPUSH
// if pos < 1 then
26706: LD_VAR 0 2
26710: PUSH
26711: LD_INT 1
26713: LESS
26714: IFFALSE 26718
// exit ;
26716: GO 27021
// if pos = 1 then
26718: LD_VAR 0 2
26722: PUSH
26723: LD_INT 1
26725: EQUAL
26726: IFFALSE 26759
// result := Replace ( arr , pos [ 1 ] , value ) else
26728: LD_ADDR_VAR 0 4
26732: PUSH
26733: LD_VAR 0 1
26737: PPUSH
26738: LD_VAR 0 2
26742: PUSH
26743: LD_INT 1
26745: ARRAY
26746: PPUSH
26747: LD_VAR 0 3
26751: PPUSH
26752: CALL_OW 1
26756: ST_TO_ADDR
26757: GO 27021
// begin tmp := arr ;
26759: LD_ADDR_VAR 0 6
26763: PUSH
26764: LD_VAR 0 1
26768: ST_TO_ADDR
// s_arr := [ tmp ] ;
26769: LD_ADDR_VAR 0 7
26773: PUSH
26774: LD_VAR 0 6
26778: PUSH
26779: EMPTY
26780: LIST
26781: ST_TO_ADDR
// for i = 1 to pos - 1 do
26782: LD_ADDR_VAR 0 5
26786: PUSH
26787: DOUBLE
26788: LD_INT 1
26790: DEC
26791: ST_TO_ADDR
26792: LD_VAR 0 2
26796: PUSH
26797: LD_INT 1
26799: MINUS
26800: PUSH
26801: FOR_TO
26802: IFFALSE 26847
// begin tmp := tmp [ pos [ i ] ] ;
26804: LD_ADDR_VAR 0 6
26808: PUSH
26809: LD_VAR 0 6
26813: PUSH
26814: LD_VAR 0 2
26818: PUSH
26819: LD_VAR 0 5
26823: ARRAY
26824: ARRAY
26825: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26826: LD_ADDR_VAR 0 7
26830: PUSH
26831: LD_VAR 0 7
26835: PUSH
26836: LD_VAR 0 6
26840: PUSH
26841: EMPTY
26842: LIST
26843: ADD
26844: ST_TO_ADDR
// end ;
26845: GO 26801
26847: POP
26848: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26849: LD_ADDR_VAR 0 6
26853: PUSH
26854: LD_VAR 0 6
26858: PPUSH
26859: LD_VAR 0 2
26863: PUSH
26864: LD_VAR 0 2
26868: ARRAY
26869: PPUSH
26870: LD_VAR 0 3
26874: PPUSH
26875: CALL_OW 1
26879: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26880: LD_ADDR_VAR 0 7
26884: PUSH
26885: LD_VAR 0 7
26889: PPUSH
26890: LD_VAR 0 7
26894: PPUSH
26895: LD_VAR 0 6
26899: PPUSH
26900: CALL_OW 1
26904: ST_TO_ADDR
// for i = s_arr downto 2 do
26905: LD_ADDR_VAR 0 5
26909: PUSH
26910: DOUBLE
26911: LD_VAR 0 7
26915: INC
26916: ST_TO_ADDR
26917: LD_INT 2
26919: PUSH
26920: FOR_DOWNTO
26921: IFFALSE 27005
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26923: LD_ADDR_VAR 0 6
26927: PUSH
26928: LD_VAR 0 7
26932: PUSH
26933: LD_VAR 0 5
26937: PUSH
26938: LD_INT 1
26940: MINUS
26941: ARRAY
26942: PPUSH
26943: LD_VAR 0 2
26947: PUSH
26948: LD_VAR 0 5
26952: PUSH
26953: LD_INT 1
26955: MINUS
26956: ARRAY
26957: PPUSH
26958: LD_VAR 0 7
26962: PUSH
26963: LD_VAR 0 5
26967: ARRAY
26968: PPUSH
26969: CALL_OW 1
26973: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26974: LD_ADDR_VAR 0 7
26978: PUSH
26979: LD_VAR 0 7
26983: PPUSH
26984: LD_VAR 0 5
26988: PUSH
26989: LD_INT 1
26991: MINUS
26992: PPUSH
26993: LD_VAR 0 6
26997: PPUSH
26998: CALL_OW 1
27002: ST_TO_ADDR
// end ;
27003: GO 26920
27005: POP
27006: POP
// result := s_arr [ 1 ] ;
27007: LD_ADDR_VAR 0 4
27011: PUSH
27012: LD_VAR 0 7
27016: PUSH
27017: LD_INT 1
27019: ARRAY
27020: ST_TO_ADDR
// end ; end ;
27021: LD_VAR 0 4
27025: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27026: LD_INT 0
27028: PPUSH
27029: PPUSH
// if not list then
27030: LD_VAR 0 1
27034: NOT
27035: IFFALSE 27039
// exit ;
27037: GO 27130
// i := list [ pos1 ] ;
27039: LD_ADDR_VAR 0 5
27043: PUSH
27044: LD_VAR 0 1
27048: PUSH
27049: LD_VAR 0 2
27053: ARRAY
27054: ST_TO_ADDR
// if not i then
27055: LD_VAR 0 5
27059: NOT
27060: IFFALSE 27064
// exit ;
27062: GO 27130
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27064: LD_ADDR_VAR 0 1
27068: PUSH
27069: LD_VAR 0 1
27073: PPUSH
27074: LD_VAR 0 2
27078: PPUSH
27079: LD_VAR 0 1
27083: PUSH
27084: LD_VAR 0 3
27088: ARRAY
27089: PPUSH
27090: CALL_OW 1
27094: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27095: LD_ADDR_VAR 0 1
27099: PUSH
27100: LD_VAR 0 1
27104: PPUSH
27105: LD_VAR 0 3
27109: PPUSH
27110: LD_VAR 0 5
27114: PPUSH
27115: CALL_OW 1
27119: ST_TO_ADDR
// result := list ;
27120: LD_ADDR_VAR 0 4
27124: PUSH
27125: LD_VAR 0 1
27129: ST_TO_ADDR
// end ;
27130: LD_VAR 0 4
27134: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27135: LD_INT 0
27137: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27138: LD_ADDR_VAR 0 5
27142: PUSH
27143: LD_VAR 0 1
27147: PPUSH
27148: CALL_OW 250
27152: PPUSH
27153: LD_VAR 0 1
27157: PPUSH
27158: CALL_OW 251
27162: PPUSH
27163: LD_VAR 0 2
27167: PPUSH
27168: LD_VAR 0 3
27172: PPUSH
27173: LD_VAR 0 4
27177: PPUSH
27178: CALL 27188 0 5
27182: ST_TO_ADDR
// end ;
27183: LD_VAR 0 5
27187: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27188: LD_INT 0
27190: PPUSH
27191: PPUSH
27192: PPUSH
27193: PPUSH
// if not list then
27194: LD_VAR 0 3
27198: NOT
27199: IFFALSE 27203
// exit ;
27201: GO 27591
// result := [ ] ;
27203: LD_ADDR_VAR 0 6
27207: PUSH
27208: EMPTY
27209: ST_TO_ADDR
// for i in list do
27210: LD_ADDR_VAR 0 7
27214: PUSH
27215: LD_VAR 0 3
27219: PUSH
27220: FOR_IN
27221: IFFALSE 27423
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27223: LD_ADDR_VAR 0 9
27227: PUSH
27228: LD_VAR 0 7
27232: PPUSH
27233: LD_VAR 0 1
27237: PPUSH
27238: LD_VAR 0 2
27242: PPUSH
27243: CALL_OW 297
27247: ST_TO_ADDR
// if not result then
27248: LD_VAR 0 6
27252: NOT
27253: IFFALSE 27279
// result := [ [ i , tmp ] ] else
27255: LD_ADDR_VAR 0 6
27259: PUSH
27260: LD_VAR 0 7
27264: PUSH
27265: LD_VAR 0 9
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: EMPTY
27275: LIST
27276: ST_TO_ADDR
27277: GO 27421
// begin if result [ result ] [ 2 ] < tmp then
27279: LD_VAR 0 6
27283: PUSH
27284: LD_VAR 0 6
27288: ARRAY
27289: PUSH
27290: LD_INT 2
27292: ARRAY
27293: PUSH
27294: LD_VAR 0 9
27298: LESS
27299: IFFALSE 27341
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27301: LD_ADDR_VAR 0 6
27305: PUSH
27306: LD_VAR 0 6
27310: PPUSH
27311: LD_VAR 0 6
27315: PUSH
27316: LD_INT 1
27318: PLUS
27319: PPUSH
27320: LD_VAR 0 7
27324: PUSH
27325: LD_VAR 0 9
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PPUSH
27334: CALL_OW 2
27338: ST_TO_ADDR
27339: GO 27421
// for j = 1 to result do
27341: LD_ADDR_VAR 0 8
27345: PUSH
27346: DOUBLE
27347: LD_INT 1
27349: DEC
27350: ST_TO_ADDR
27351: LD_VAR 0 6
27355: PUSH
27356: FOR_TO
27357: IFFALSE 27419
// begin if tmp < result [ j ] [ 2 ] then
27359: LD_VAR 0 9
27363: PUSH
27364: LD_VAR 0 6
27368: PUSH
27369: LD_VAR 0 8
27373: ARRAY
27374: PUSH
27375: LD_INT 2
27377: ARRAY
27378: LESS
27379: IFFALSE 27417
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27381: LD_ADDR_VAR 0 6
27385: PUSH
27386: LD_VAR 0 6
27390: PPUSH
27391: LD_VAR 0 8
27395: PPUSH
27396: LD_VAR 0 7
27400: PUSH
27401: LD_VAR 0 9
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PPUSH
27410: CALL_OW 2
27414: ST_TO_ADDR
// break ;
27415: GO 27419
// end ; end ;
27417: GO 27356
27419: POP
27420: POP
// end ; end ;
27421: GO 27220
27423: POP
27424: POP
// if result and not asc then
27425: LD_VAR 0 6
27429: PUSH
27430: LD_VAR 0 4
27434: NOT
27435: AND
27436: IFFALSE 27511
// begin tmp := result ;
27438: LD_ADDR_VAR 0 9
27442: PUSH
27443: LD_VAR 0 6
27447: ST_TO_ADDR
// for i = tmp downto 1 do
27448: LD_ADDR_VAR 0 7
27452: PUSH
27453: DOUBLE
27454: LD_VAR 0 9
27458: INC
27459: ST_TO_ADDR
27460: LD_INT 1
27462: PUSH
27463: FOR_DOWNTO
27464: IFFALSE 27509
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27466: LD_ADDR_VAR 0 6
27470: PUSH
27471: LD_VAR 0 6
27475: PPUSH
27476: LD_VAR 0 9
27480: PUSH
27481: LD_VAR 0 7
27485: MINUS
27486: PUSH
27487: LD_INT 1
27489: PLUS
27490: PPUSH
27491: LD_VAR 0 9
27495: PUSH
27496: LD_VAR 0 7
27500: ARRAY
27501: PPUSH
27502: CALL_OW 1
27506: ST_TO_ADDR
27507: GO 27463
27509: POP
27510: POP
// end ; tmp := [ ] ;
27511: LD_ADDR_VAR 0 9
27515: PUSH
27516: EMPTY
27517: ST_TO_ADDR
// if mode then
27518: LD_VAR 0 5
27522: IFFALSE 27591
// begin for i = 1 to result do
27524: LD_ADDR_VAR 0 7
27528: PUSH
27529: DOUBLE
27530: LD_INT 1
27532: DEC
27533: ST_TO_ADDR
27534: LD_VAR 0 6
27538: PUSH
27539: FOR_TO
27540: IFFALSE 27579
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27542: LD_ADDR_VAR 0 9
27546: PUSH
27547: LD_VAR 0 9
27551: PPUSH
27552: LD_VAR 0 7
27556: PPUSH
27557: LD_VAR 0 6
27561: PUSH
27562: LD_VAR 0 7
27566: ARRAY
27567: PUSH
27568: LD_INT 1
27570: ARRAY
27571: PPUSH
27572: CALL_OW 1
27576: ST_TO_ADDR
27577: GO 27539
27579: POP
27580: POP
// result := tmp ;
27581: LD_ADDR_VAR 0 6
27585: PUSH
27586: LD_VAR 0 9
27590: ST_TO_ADDR
// end ; end ;
27591: LD_VAR 0 6
27595: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27596: LD_INT 0
27598: PPUSH
27599: PPUSH
27600: PPUSH
27601: PPUSH
27602: PPUSH
27603: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27604: LD_ADDR_VAR 0 5
27608: PUSH
27609: LD_INT 0
27611: PUSH
27612: LD_INT 0
27614: PUSH
27615: LD_INT 0
27617: PUSH
27618: EMPTY
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: ST_TO_ADDR
// if not x or not y then
27626: LD_VAR 0 2
27630: NOT
27631: PUSH
27632: LD_VAR 0 3
27636: NOT
27637: OR
27638: IFFALSE 27642
// exit ;
27640: GO 29288
// if not range then
27642: LD_VAR 0 4
27646: NOT
27647: IFFALSE 27657
// range := 10 ;
27649: LD_ADDR_VAR 0 4
27653: PUSH
27654: LD_INT 10
27656: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27657: LD_ADDR_VAR 0 8
27661: PUSH
27662: LD_INT 81
27664: PUSH
27665: LD_VAR 0 1
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: LD_INT 92
27676: PUSH
27677: LD_VAR 0 2
27681: PUSH
27682: LD_VAR 0 3
27686: PUSH
27687: LD_VAR 0 4
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 3
27700: PUSH
27701: LD_INT 21
27703: PUSH
27704: LD_INT 3
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: LIST
27719: PPUSH
27720: CALL_OW 69
27724: ST_TO_ADDR
// if not tmp then
27725: LD_VAR 0 8
27729: NOT
27730: IFFALSE 27734
// exit ;
27732: GO 29288
// for i in tmp do
27734: LD_ADDR_VAR 0 6
27738: PUSH
27739: LD_VAR 0 8
27743: PUSH
27744: FOR_IN
27745: IFFALSE 29263
// begin points := [ 0 , 0 , 0 ] ;
27747: LD_ADDR_VAR 0 9
27751: PUSH
27752: LD_INT 0
27754: PUSH
27755: LD_INT 0
27757: PUSH
27758: LD_INT 0
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: LIST
27765: ST_TO_ADDR
// bpoints := 1 ;
27766: LD_ADDR_VAR 0 10
27770: PUSH
27771: LD_INT 1
27773: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27774: LD_VAR 0 6
27778: PPUSH
27779: CALL_OW 247
27783: PUSH
27784: LD_INT 1
27786: DOUBLE
27787: EQUAL
27788: IFTRUE 27792
27790: GO 28370
27792: POP
// begin if GetClass ( i ) = 1 then
27793: LD_VAR 0 6
27797: PPUSH
27798: CALL_OW 257
27802: PUSH
27803: LD_INT 1
27805: EQUAL
27806: IFFALSE 27827
// points := [ 10 , 5 , 3 ] ;
27808: LD_ADDR_VAR 0 9
27812: PUSH
27813: LD_INT 10
27815: PUSH
27816: LD_INT 5
27818: PUSH
27819: LD_INT 3
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: LIST
27826: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27827: LD_VAR 0 6
27831: PPUSH
27832: CALL_OW 257
27836: PUSH
27837: LD_INT 2
27839: PUSH
27840: LD_INT 3
27842: PUSH
27843: LD_INT 4
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: LIST
27850: IN
27851: IFFALSE 27872
// points := [ 3 , 2 , 1 ] ;
27853: LD_ADDR_VAR 0 9
27857: PUSH
27858: LD_INT 3
27860: PUSH
27861: LD_INT 2
27863: PUSH
27864: LD_INT 1
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: LIST
27871: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27872: LD_VAR 0 6
27876: PPUSH
27877: CALL_OW 257
27881: PUSH
27882: LD_INT 5
27884: EQUAL
27885: IFFALSE 27906
// points := [ 130 , 5 , 2 ] ;
27887: LD_ADDR_VAR 0 9
27891: PUSH
27892: LD_INT 130
27894: PUSH
27895: LD_INT 5
27897: PUSH
27898: LD_INT 2
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: LIST
27905: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27906: LD_VAR 0 6
27910: PPUSH
27911: CALL_OW 257
27915: PUSH
27916: LD_INT 8
27918: EQUAL
27919: IFFALSE 27940
// points := [ 35 , 35 , 30 ] ;
27921: LD_ADDR_VAR 0 9
27925: PUSH
27926: LD_INT 35
27928: PUSH
27929: LD_INT 35
27931: PUSH
27932: LD_INT 30
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: LIST
27939: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27940: LD_VAR 0 6
27944: PPUSH
27945: CALL_OW 257
27949: PUSH
27950: LD_INT 9
27952: EQUAL
27953: IFFALSE 27974
// points := [ 20 , 55 , 40 ] ;
27955: LD_ADDR_VAR 0 9
27959: PUSH
27960: LD_INT 20
27962: PUSH
27963: LD_INT 55
27965: PUSH
27966: LD_INT 40
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: LIST
27973: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27974: LD_VAR 0 6
27978: PPUSH
27979: CALL_OW 257
27983: PUSH
27984: LD_INT 12
27986: PUSH
27987: LD_INT 16
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: IN
27994: IFFALSE 28015
// points := [ 5 , 3 , 2 ] ;
27996: LD_ADDR_VAR 0 9
28000: PUSH
28001: LD_INT 5
28003: PUSH
28004: LD_INT 3
28006: PUSH
28007: LD_INT 2
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: LIST
28014: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28015: LD_VAR 0 6
28019: PPUSH
28020: CALL_OW 257
28024: PUSH
28025: LD_INT 17
28027: EQUAL
28028: IFFALSE 28049
// points := [ 100 , 50 , 75 ] ;
28030: LD_ADDR_VAR 0 9
28034: PUSH
28035: LD_INT 100
28037: PUSH
28038: LD_INT 50
28040: PUSH
28041: LD_INT 75
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: LIST
28048: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28049: LD_VAR 0 6
28053: PPUSH
28054: CALL_OW 257
28058: PUSH
28059: LD_INT 15
28061: EQUAL
28062: IFFALSE 28083
// points := [ 10 , 5 , 3 ] ;
28064: LD_ADDR_VAR 0 9
28068: PUSH
28069: LD_INT 10
28071: PUSH
28072: LD_INT 5
28074: PUSH
28075: LD_INT 3
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: LIST
28082: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28083: LD_VAR 0 6
28087: PPUSH
28088: CALL_OW 257
28092: PUSH
28093: LD_INT 14
28095: EQUAL
28096: IFFALSE 28117
// points := [ 10 , 0 , 0 ] ;
28098: LD_ADDR_VAR 0 9
28102: PUSH
28103: LD_INT 10
28105: PUSH
28106: LD_INT 0
28108: PUSH
28109: LD_INT 0
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: LIST
28116: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28117: LD_VAR 0 6
28121: PPUSH
28122: CALL_OW 257
28126: PUSH
28127: LD_INT 11
28129: EQUAL
28130: IFFALSE 28151
// points := [ 30 , 10 , 5 ] ;
28132: LD_ADDR_VAR 0 9
28136: PUSH
28137: LD_INT 30
28139: PUSH
28140: LD_INT 10
28142: PUSH
28143: LD_INT 5
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: LIST
28150: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28151: LD_VAR 0 1
28155: PPUSH
28156: LD_INT 5
28158: PPUSH
28159: CALL_OW 321
28163: PUSH
28164: LD_INT 2
28166: EQUAL
28167: IFFALSE 28184
// bpoints := bpoints * 1.8 ;
28169: LD_ADDR_VAR 0 10
28173: PUSH
28174: LD_VAR 0 10
28178: PUSH
28179: LD_REAL  1.80000000000000E+0000
28182: MUL
28183: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28184: LD_VAR 0 6
28188: PPUSH
28189: CALL_OW 257
28193: PUSH
28194: LD_INT 1
28196: PUSH
28197: LD_INT 2
28199: PUSH
28200: LD_INT 3
28202: PUSH
28203: LD_INT 4
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: IN
28212: PUSH
28213: LD_VAR 0 1
28217: PPUSH
28218: LD_INT 51
28220: PPUSH
28221: CALL_OW 321
28225: PUSH
28226: LD_INT 2
28228: EQUAL
28229: AND
28230: IFFALSE 28247
// bpoints := bpoints * 1.2 ;
28232: LD_ADDR_VAR 0 10
28236: PUSH
28237: LD_VAR 0 10
28241: PUSH
28242: LD_REAL  1.20000000000000E+0000
28245: MUL
28246: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28247: LD_VAR 0 6
28251: PPUSH
28252: CALL_OW 257
28256: PUSH
28257: LD_INT 5
28259: PUSH
28260: LD_INT 7
28262: PUSH
28263: LD_INT 9
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: LIST
28270: IN
28271: PUSH
28272: LD_VAR 0 1
28276: PPUSH
28277: LD_INT 52
28279: PPUSH
28280: CALL_OW 321
28284: PUSH
28285: LD_INT 2
28287: EQUAL
28288: AND
28289: IFFALSE 28306
// bpoints := bpoints * 1.5 ;
28291: LD_ADDR_VAR 0 10
28295: PUSH
28296: LD_VAR 0 10
28300: PUSH
28301: LD_REAL  1.50000000000000E+0000
28304: MUL
28305: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28306: LD_VAR 0 1
28310: PPUSH
28311: LD_INT 66
28313: PPUSH
28314: CALL_OW 321
28318: PUSH
28319: LD_INT 2
28321: EQUAL
28322: IFFALSE 28339
// bpoints := bpoints * 1.1 ;
28324: LD_ADDR_VAR 0 10
28328: PUSH
28329: LD_VAR 0 10
28333: PUSH
28334: LD_REAL  1.10000000000000E+0000
28337: MUL
28338: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28339: LD_ADDR_VAR 0 10
28343: PUSH
28344: LD_VAR 0 10
28348: PUSH
28349: LD_VAR 0 6
28353: PPUSH
28354: LD_INT 1
28356: PPUSH
28357: CALL_OW 259
28361: PUSH
28362: LD_REAL  1.15000000000000E+0000
28365: MUL
28366: MUL
28367: ST_TO_ADDR
// end ; unit_vehicle :
28368: GO 29192
28370: LD_INT 2
28372: DOUBLE
28373: EQUAL
28374: IFTRUE 28378
28376: GO 29180
28378: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28379: LD_VAR 0 6
28383: PPUSH
28384: CALL_OW 264
28388: PUSH
28389: LD_INT 2
28391: PUSH
28392: LD_INT 42
28394: PUSH
28395: LD_INT 24
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: LIST
28402: IN
28403: IFFALSE 28424
// points := [ 25 , 5 , 3 ] ;
28405: LD_ADDR_VAR 0 9
28409: PUSH
28410: LD_INT 25
28412: PUSH
28413: LD_INT 5
28415: PUSH
28416: LD_INT 3
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: LIST
28423: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28424: LD_VAR 0 6
28428: PPUSH
28429: CALL_OW 264
28433: PUSH
28434: LD_INT 4
28436: PUSH
28437: LD_INT 43
28439: PUSH
28440: LD_INT 25
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: LIST
28447: IN
28448: IFFALSE 28469
// points := [ 40 , 15 , 5 ] ;
28450: LD_ADDR_VAR 0 9
28454: PUSH
28455: LD_INT 40
28457: PUSH
28458: LD_INT 15
28460: PUSH
28461: LD_INT 5
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: LIST
28468: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28469: LD_VAR 0 6
28473: PPUSH
28474: CALL_OW 264
28478: PUSH
28479: LD_INT 3
28481: PUSH
28482: LD_INT 23
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: IN
28489: IFFALSE 28510
// points := [ 7 , 25 , 8 ] ;
28491: LD_ADDR_VAR 0 9
28495: PUSH
28496: LD_INT 7
28498: PUSH
28499: LD_INT 25
28501: PUSH
28502: LD_INT 8
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: LIST
28509: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28510: LD_VAR 0 6
28514: PPUSH
28515: CALL_OW 264
28519: PUSH
28520: LD_INT 5
28522: PUSH
28523: LD_INT 27
28525: PUSH
28526: LD_INT 44
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: LIST
28533: IN
28534: IFFALSE 28555
// points := [ 14 , 50 , 16 ] ;
28536: LD_ADDR_VAR 0 9
28540: PUSH
28541: LD_INT 14
28543: PUSH
28544: LD_INT 50
28546: PUSH
28547: LD_INT 16
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: LIST
28554: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28555: LD_VAR 0 6
28559: PPUSH
28560: CALL_OW 264
28564: PUSH
28565: LD_INT 6
28567: PUSH
28568: LD_INT 46
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: IN
28575: IFFALSE 28596
// points := [ 32 , 120 , 70 ] ;
28577: LD_ADDR_VAR 0 9
28581: PUSH
28582: LD_INT 32
28584: PUSH
28585: LD_INT 120
28587: PUSH
28588: LD_INT 70
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: LIST
28595: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
28596: LD_VAR 0 6
28600: PPUSH
28601: CALL_OW 264
28605: PUSH
28606: LD_INT 7
28608: PUSH
28609: LD_INT 28
28611: PUSH
28612: LD_INT 45
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: LIST
28619: IN
28620: IFFALSE 28641
// points := [ 35 , 20 , 45 ] ;
28622: LD_ADDR_VAR 0 9
28626: PUSH
28627: LD_INT 35
28629: PUSH
28630: LD_INT 20
28632: PUSH
28633: LD_INT 45
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: LIST
28640: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28641: LD_VAR 0 6
28645: PPUSH
28646: CALL_OW 264
28650: PUSH
28651: LD_INT 47
28653: PUSH
28654: EMPTY
28655: LIST
28656: IN
28657: IFFALSE 28678
// points := [ 67 , 45 , 75 ] ;
28659: LD_ADDR_VAR 0 9
28663: PUSH
28664: LD_INT 67
28666: PUSH
28667: LD_INT 45
28669: PUSH
28670: LD_INT 75
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: LIST
28677: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28678: LD_VAR 0 6
28682: PPUSH
28683: CALL_OW 264
28687: PUSH
28688: LD_INT 26
28690: PUSH
28691: EMPTY
28692: LIST
28693: IN
28694: IFFALSE 28715
// points := [ 120 , 30 , 80 ] ;
28696: LD_ADDR_VAR 0 9
28700: PUSH
28701: LD_INT 120
28703: PUSH
28704: LD_INT 30
28706: PUSH
28707: LD_INT 80
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: LIST
28714: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28715: LD_VAR 0 6
28719: PPUSH
28720: CALL_OW 264
28724: PUSH
28725: LD_INT 22
28727: PUSH
28728: EMPTY
28729: LIST
28730: IN
28731: IFFALSE 28752
// points := [ 40 , 1 , 1 ] ;
28733: LD_ADDR_VAR 0 9
28737: PUSH
28738: LD_INT 40
28740: PUSH
28741: LD_INT 1
28743: PUSH
28744: LD_INT 1
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: LIST
28751: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28752: LD_VAR 0 6
28756: PPUSH
28757: CALL_OW 264
28761: PUSH
28762: LD_INT 29
28764: PUSH
28765: EMPTY
28766: LIST
28767: IN
28768: IFFALSE 28789
// points := [ 70 , 200 , 400 ] ;
28770: LD_ADDR_VAR 0 9
28774: PUSH
28775: LD_INT 70
28777: PUSH
28778: LD_INT 200
28780: PUSH
28781: LD_INT 400
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: LIST
28788: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28789: LD_VAR 0 6
28793: PPUSH
28794: CALL_OW 264
28798: PUSH
28799: LD_INT 14
28801: PUSH
28802: LD_INT 53
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: IN
28809: IFFALSE 28830
// points := [ 40 , 10 , 20 ] ;
28811: LD_ADDR_VAR 0 9
28815: PUSH
28816: LD_INT 40
28818: PUSH
28819: LD_INT 10
28821: PUSH
28822: LD_INT 20
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: LIST
28829: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28830: LD_VAR 0 6
28834: PPUSH
28835: CALL_OW 264
28839: PUSH
28840: LD_INT 9
28842: PUSH
28843: EMPTY
28844: LIST
28845: IN
28846: IFFALSE 28867
// points := [ 5 , 70 , 20 ] ;
28848: LD_ADDR_VAR 0 9
28852: PUSH
28853: LD_INT 5
28855: PUSH
28856: LD_INT 70
28858: PUSH
28859: LD_INT 20
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: LIST
28866: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28867: LD_VAR 0 6
28871: PPUSH
28872: CALL_OW 264
28876: PUSH
28877: LD_INT 10
28879: PUSH
28880: EMPTY
28881: LIST
28882: IN
28883: IFFALSE 28904
// points := [ 35 , 110 , 70 ] ;
28885: LD_ADDR_VAR 0 9
28889: PUSH
28890: LD_INT 35
28892: PUSH
28893: LD_INT 110
28895: PUSH
28896: LD_INT 70
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: LIST
28903: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28904: LD_VAR 0 6
28908: PPUSH
28909: CALL_OW 265
28913: PUSH
28914: LD_INT 25
28916: EQUAL
28917: IFFALSE 28938
// points := [ 80 , 65 , 100 ] ;
28919: LD_ADDR_VAR 0 9
28923: PUSH
28924: LD_INT 80
28926: PUSH
28927: LD_INT 65
28929: PUSH
28930: LD_INT 100
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: LIST
28937: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28938: LD_VAR 0 6
28942: PPUSH
28943: CALL_OW 263
28947: PUSH
28948: LD_INT 1
28950: EQUAL
28951: IFFALSE 28986
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28953: LD_ADDR_VAR 0 10
28957: PUSH
28958: LD_VAR 0 10
28962: PUSH
28963: LD_VAR 0 6
28967: PPUSH
28968: CALL_OW 311
28972: PPUSH
28973: LD_INT 3
28975: PPUSH
28976: CALL_OW 259
28980: PUSH
28981: LD_INT 4
28983: MUL
28984: MUL
28985: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28986: LD_VAR 0 6
28990: PPUSH
28991: CALL_OW 263
28995: PUSH
28996: LD_INT 2
28998: EQUAL
28999: IFFALSE 29050
// begin j := IsControledBy ( i ) ;
29001: LD_ADDR_VAR 0 7
29005: PUSH
29006: LD_VAR 0 6
29010: PPUSH
29011: CALL_OW 312
29015: ST_TO_ADDR
// if j then
29016: LD_VAR 0 7
29020: IFFALSE 29050
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29022: LD_ADDR_VAR 0 10
29026: PUSH
29027: LD_VAR 0 10
29031: PUSH
29032: LD_VAR 0 7
29036: PPUSH
29037: LD_INT 3
29039: PPUSH
29040: CALL_OW 259
29044: PUSH
29045: LD_INT 3
29047: MUL
29048: MUL
29049: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29050: LD_VAR 0 6
29054: PPUSH
29055: CALL_OW 264
29059: PUSH
29060: LD_INT 5
29062: PUSH
29063: LD_INT 6
29065: PUSH
29066: LD_INT 46
29068: PUSH
29069: LD_INT 44
29071: PUSH
29072: LD_INT 47
29074: PUSH
29075: LD_INT 45
29077: PUSH
29078: LD_INT 28
29080: PUSH
29081: LD_INT 7
29083: PUSH
29084: LD_INT 27
29086: PUSH
29087: LD_INT 29
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: IN
29102: PUSH
29103: LD_VAR 0 1
29107: PPUSH
29108: LD_INT 52
29110: PPUSH
29111: CALL_OW 321
29115: PUSH
29116: LD_INT 2
29118: EQUAL
29119: AND
29120: IFFALSE 29137
// bpoints := bpoints * 1.2 ;
29122: LD_ADDR_VAR 0 10
29126: PUSH
29127: LD_VAR 0 10
29131: PUSH
29132: LD_REAL  1.20000000000000E+0000
29135: MUL
29136: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29137: LD_VAR 0 6
29141: PPUSH
29142: CALL_OW 264
29146: PUSH
29147: LD_INT 6
29149: PUSH
29150: LD_INT 46
29152: PUSH
29153: LD_INT 47
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: LIST
29160: IN
29161: IFFALSE 29178
// bpoints := bpoints * 1.2 ;
29163: LD_ADDR_VAR 0 10
29167: PUSH
29168: LD_VAR 0 10
29172: PUSH
29173: LD_REAL  1.20000000000000E+0000
29176: MUL
29177: ST_TO_ADDR
// end ; unit_building :
29178: GO 29192
29180: LD_INT 3
29182: DOUBLE
29183: EQUAL
29184: IFTRUE 29188
29186: GO 29191
29188: POP
// ; end ;
29189: GO 29192
29191: POP
// for j = 1 to 3 do
29192: LD_ADDR_VAR 0 7
29196: PUSH
29197: DOUBLE
29198: LD_INT 1
29200: DEC
29201: ST_TO_ADDR
29202: LD_INT 3
29204: PUSH
29205: FOR_TO
29206: IFFALSE 29259
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29208: LD_ADDR_VAR 0 5
29212: PUSH
29213: LD_VAR 0 5
29217: PPUSH
29218: LD_VAR 0 7
29222: PPUSH
29223: LD_VAR 0 5
29227: PUSH
29228: LD_VAR 0 7
29232: ARRAY
29233: PUSH
29234: LD_VAR 0 9
29238: PUSH
29239: LD_VAR 0 7
29243: ARRAY
29244: PUSH
29245: LD_VAR 0 10
29249: MUL
29250: PLUS
29251: PPUSH
29252: CALL_OW 1
29256: ST_TO_ADDR
29257: GO 29205
29259: POP
29260: POP
// end ;
29261: GO 27744
29263: POP
29264: POP
// result := Replace ( result , 4 , tmp ) ;
29265: LD_ADDR_VAR 0 5
29269: PUSH
29270: LD_VAR 0 5
29274: PPUSH
29275: LD_INT 4
29277: PPUSH
29278: LD_VAR 0 8
29282: PPUSH
29283: CALL_OW 1
29287: ST_TO_ADDR
// end ;
29288: LD_VAR 0 5
29292: RET
// export function DangerAtRange ( unit , range ) ; begin
29293: LD_INT 0
29295: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29296: LD_ADDR_VAR 0 3
29300: PUSH
29301: LD_VAR 0 1
29305: PPUSH
29306: CALL_OW 255
29310: PPUSH
29311: LD_VAR 0 1
29315: PPUSH
29316: CALL_OW 250
29320: PPUSH
29321: LD_VAR 0 1
29325: PPUSH
29326: CALL_OW 251
29330: PPUSH
29331: LD_VAR 0 2
29335: PPUSH
29336: CALL 27596 0 4
29340: ST_TO_ADDR
// end ;
29341: LD_VAR 0 3
29345: RET
// export function DangerInArea ( side , area ) ; begin
29346: LD_INT 0
29348: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29349: LD_ADDR_VAR 0 3
29353: PUSH
29354: LD_VAR 0 2
29358: PPUSH
29359: LD_INT 81
29361: PUSH
29362: LD_VAR 0 1
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PPUSH
29371: CALL_OW 70
29375: ST_TO_ADDR
// end ;
29376: LD_VAR 0 3
29380: RET
// export function IsExtension ( b ) ; begin
29381: LD_INT 0
29383: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29384: LD_ADDR_VAR 0 2
29388: PUSH
29389: LD_VAR 0 1
29393: PUSH
29394: LD_INT 23
29396: PUSH
29397: LD_INT 20
29399: PUSH
29400: LD_INT 22
29402: PUSH
29403: LD_INT 17
29405: PUSH
29406: LD_INT 24
29408: PUSH
29409: LD_INT 21
29411: PUSH
29412: LD_INT 19
29414: PUSH
29415: LD_INT 16
29417: PUSH
29418: LD_INT 25
29420: PUSH
29421: LD_INT 18
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: IN
29436: ST_TO_ADDR
// end ;
29437: LD_VAR 0 2
29441: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
29442: LD_INT 0
29444: PPUSH
29445: PPUSH
29446: PPUSH
// result := [ ] ;
29447: LD_ADDR_VAR 0 3
29451: PUSH
29452: EMPTY
29453: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29454: LD_ADDR_VAR 0 4
29458: PUSH
29459: LD_VAR 0 2
29463: PPUSH
29464: LD_INT 21
29466: PUSH
29467: LD_INT 3
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PPUSH
29474: CALL_OW 70
29478: ST_TO_ADDR
// if not tmp then
29479: LD_VAR 0 4
29483: NOT
29484: IFFALSE 29488
// exit ;
29486: GO 29546
// for i in tmp do
29488: LD_ADDR_VAR 0 5
29492: PUSH
29493: LD_VAR 0 4
29497: PUSH
29498: FOR_IN
29499: IFFALSE 29534
// if GetBase ( i ) <> base then
29501: LD_VAR 0 5
29505: PPUSH
29506: CALL_OW 274
29510: PUSH
29511: LD_VAR 0 1
29515: NONEQUAL
29516: IFFALSE 29532
// ComLinkToBase ( base , i ) ;
29518: LD_VAR 0 1
29522: PPUSH
29523: LD_VAR 0 5
29527: PPUSH
29528: CALL_OW 169
29532: GO 29498
29534: POP
29535: POP
// result := tmp ;
29536: LD_ADDR_VAR 0 3
29540: PUSH
29541: LD_VAR 0 4
29545: ST_TO_ADDR
// end ;
29546: LD_VAR 0 3
29550: RET
// export function ComComplete ( unit , b ) ; var i ; begin
29551: LD_INT 0
29553: PPUSH
29554: PPUSH
// if BuildingStatus ( b ) = bs_build then
29555: LD_VAR 0 2
29559: PPUSH
29560: CALL_OW 461
29564: PUSH
29565: LD_INT 1
29567: EQUAL
29568: IFFALSE 29628
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29570: LD_VAR 0 1
29574: PPUSH
29575: LD_STRING h
29577: PUSH
29578: LD_VAR 0 2
29582: PPUSH
29583: CALL_OW 250
29587: PUSH
29588: LD_VAR 0 2
29592: PPUSH
29593: CALL_OW 251
29597: PUSH
29598: LD_VAR 0 2
29602: PUSH
29603: LD_INT 0
29605: PUSH
29606: LD_INT 0
29608: PUSH
29609: LD_INT 0
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: PUSH
29621: EMPTY
29622: LIST
29623: PPUSH
29624: CALL_OW 446
// end ;
29628: LD_VAR 0 3
29632: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29633: LD_INT 0
29635: PPUSH
29636: PPUSH
29637: PPUSH
29638: PPUSH
29639: PPUSH
29640: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
29641: LD_VAR 0 1
29645: NOT
29646: PUSH
29647: LD_VAR 0 1
29651: PPUSH
29652: CALL_OW 263
29656: PUSH
29657: LD_INT 2
29659: EQUAL
29660: NOT
29661: OR
29662: IFFALSE 29666
// exit ;
29664: GO 29982
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29666: LD_ADDR_VAR 0 6
29670: PUSH
29671: LD_INT 22
29673: PUSH
29674: LD_VAR 0 1
29678: PPUSH
29679: CALL_OW 255
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 2
29690: PUSH
29691: LD_INT 30
29693: PUSH
29694: LD_INT 36
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PUSH
29701: LD_INT 34
29703: PUSH
29704: LD_INT 31
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: LIST
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PPUSH
29720: CALL_OW 69
29724: ST_TO_ADDR
// if not tmp then
29725: LD_VAR 0 6
29729: NOT
29730: IFFALSE 29734
// exit ;
29732: GO 29982
// result := [ ] ;
29734: LD_ADDR_VAR 0 2
29738: PUSH
29739: EMPTY
29740: ST_TO_ADDR
// for i in tmp do
29741: LD_ADDR_VAR 0 3
29745: PUSH
29746: LD_VAR 0 6
29750: PUSH
29751: FOR_IN
29752: IFFALSE 29823
// begin t := UnitsInside ( i ) ;
29754: LD_ADDR_VAR 0 4
29758: PUSH
29759: LD_VAR 0 3
29763: PPUSH
29764: CALL_OW 313
29768: ST_TO_ADDR
// if t then
29769: LD_VAR 0 4
29773: IFFALSE 29821
// for j in t do
29775: LD_ADDR_VAR 0 7
29779: PUSH
29780: LD_VAR 0 4
29784: PUSH
29785: FOR_IN
29786: IFFALSE 29819
// result := Insert ( result , result + 1 , j ) ;
29788: LD_ADDR_VAR 0 2
29792: PUSH
29793: LD_VAR 0 2
29797: PPUSH
29798: LD_VAR 0 2
29802: PUSH
29803: LD_INT 1
29805: PLUS
29806: PPUSH
29807: LD_VAR 0 7
29811: PPUSH
29812: CALL_OW 2
29816: ST_TO_ADDR
29817: GO 29785
29819: POP
29820: POP
// end ;
29821: GO 29751
29823: POP
29824: POP
// if not result then
29825: LD_VAR 0 2
29829: NOT
29830: IFFALSE 29834
// exit ;
29832: GO 29982
// mech := result [ 1 ] ;
29834: LD_ADDR_VAR 0 5
29838: PUSH
29839: LD_VAR 0 2
29843: PUSH
29844: LD_INT 1
29846: ARRAY
29847: ST_TO_ADDR
// if result > 1 then
29848: LD_VAR 0 2
29852: PUSH
29853: LD_INT 1
29855: GREATER
29856: IFFALSE 29968
// for i = 2 to result do
29858: LD_ADDR_VAR 0 3
29862: PUSH
29863: DOUBLE
29864: LD_INT 2
29866: DEC
29867: ST_TO_ADDR
29868: LD_VAR 0 2
29872: PUSH
29873: FOR_TO
29874: IFFALSE 29966
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29876: LD_ADDR_VAR 0 4
29880: PUSH
29881: LD_VAR 0 2
29885: PUSH
29886: LD_VAR 0 3
29890: ARRAY
29891: PPUSH
29892: LD_INT 3
29894: PPUSH
29895: CALL_OW 259
29899: PUSH
29900: LD_VAR 0 2
29904: PUSH
29905: LD_VAR 0 3
29909: ARRAY
29910: PPUSH
29911: CALL_OW 432
29915: MINUS
29916: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29917: LD_VAR 0 4
29921: PUSH
29922: LD_VAR 0 5
29926: PPUSH
29927: LD_INT 3
29929: PPUSH
29930: CALL_OW 259
29934: PUSH
29935: LD_VAR 0 5
29939: PPUSH
29940: CALL_OW 432
29944: MINUS
29945: GREATEREQUAL
29946: IFFALSE 29964
// mech := result [ i ] ;
29948: LD_ADDR_VAR 0 5
29952: PUSH
29953: LD_VAR 0 2
29957: PUSH
29958: LD_VAR 0 3
29962: ARRAY
29963: ST_TO_ADDR
// end ;
29964: GO 29873
29966: POP
29967: POP
// ComLinkTo ( vehicle , mech ) ;
29968: LD_VAR 0 1
29972: PPUSH
29973: LD_VAR 0 5
29977: PPUSH
29978: CALL_OW 135
// end ;
29982: LD_VAR 0 2
29986: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29987: LD_INT 0
29989: PPUSH
29990: PPUSH
29991: PPUSH
29992: PPUSH
29993: PPUSH
29994: PPUSH
29995: PPUSH
29996: PPUSH
29997: PPUSH
29998: PPUSH
29999: PPUSH
30000: PPUSH
30001: PPUSH
// result := [ ] ;
30002: LD_ADDR_VAR 0 7
30006: PUSH
30007: EMPTY
30008: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30009: LD_VAR 0 1
30013: PPUSH
30014: CALL_OW 266
30018: PUSH
30019: LD_INT 0
30021: PUSH
30022: LD_INT 1
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: IN
30029: NOT
30030: IFFALSE 30034
// exit ;
30032: GO 31665
// if name then
30034: LD_VAR 0 3
30038: IFFALSE 30054
// SetBName ( base_dep , name ) ;
30040: LD_VAR 0 1
30044: PPUSH
30045: LD_VAR 0 3
30049: PPUSH
30050: CALL_OW 500
// base := GetBase ( base_dep ) ;
30054: LD_ADDR_VAR 0 15
30058: PUSH
30059: LD_VAR 0 1
30063: PPUSH
30064: CALL_OW 274
30068: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30069: LD_ADDR_VAR 0 16
30073: PUSH
30074: LD_VAR 0 1
30078: PPUSH
30079: CALL_OW 255
30083: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30084: LD_ADDR_VAR 0 17
30088: PUSH
30089: LD_VAR 0 1
30093: PPUSH
30094: CALL_OW 248
30098: ST_TO_ADDR
// if sources then
30099: LD_VAR 0 5
30103: IFFALSE 30150
// for i = 1 to 3 do
30105: LD_ADDR_VAR 0 8
30109: PUSH
30110: DOUBLE
30111: LD_INT 1
30113: DEC
30114: ST_TO_ADDR
30115: LD_INT 3
30117: PUSH
30118: FOR_TO
30119: IFFALSE 30148
// AddResourceType ( base , i , sources [ i ] ) ;
30121: LD_VAR 0 15
30125: PPUSH
30126: LD_VAR 0 8
30130: PPUSH
30131: LD_VAR 0 5
30135: PUSH
30136: LD_VAR 0 8
30140: ARRAY
30141: PPUSH
30142: CALL_OW 276
30146: GO 30118
30148: POP
30149: POP
// buildings := GetBaseBuildings ( base , area ) ;
30150: LD_ADDR_VAR 0 18
30154: PUSH
30155: LD_VAR 0 15
30159: PPUSH
30160: LD_VAR 0 2
30164: PPUSH
30165: CALL 29442 0 2
30169: ST_TO_ADDR
// InitHc ;
30170: CALL_OW 19
// InitUc ;
30174: CALL_OW 18
// uc_side := side ;
30178: LD_ADDR_OWVAR 20
30182: PUSH
30183: LD_VAR 0 16
30187: ST_TO_ADDR
// uc_nation := nation ;
30188: LD_ADDR_OWVAR 21
30192: PUSH
30193: LD_VAR 0 17
30197: ST_TO_ADDR
// if buildings then
30198: LD_VAR 0 18
30202: IFFALSE 31524
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30204: LD_ADDR_VAR 0 19
30208: PUSH
30209: LD_VAR 0 18
30213: PPUSH
30214: LD_INT 2
30216: PUSH
30217: LD_INT 30
30219: PUSH
30220: LD_INT 29
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 30
30229: PUSH
30230: LD_INT 30
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: LIST
30241: PPUSH
30242: CALL_OW 72
30246: ST_TO_ADDR
// if tmp then
30247: LD_VAR 0 19
30251: IFFALSE 30299
// for i in tmp do
30253: LD_ADDR_VAR 0 8
30257: PUSH
30258: LD_VAR 0 19
30262: PUSH
30263: FOR_IN
30264: IFFALSE 30297
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30266: LD_VAR 0 8
30270: PPUSH
30271: CALL_OW 250
30275: PPUSH
30276: LD_VAR 0 8
30280: PPUSH
30281: CALL_OW 251
30285: PPUSH
30286: LD_VAR 0 16
30290: PPUSH
30291: CALL_OW 441
30295: GO 30263
30297: POP
30298: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30299: LD_VAR 0 18
30303: PPUSH
30304: LD_INT 2
30306: PUSH
30307: LD_INT 30
30309: PUSH
30310: LD_INT 32
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 30
30319: PUSH
30320: LD_INT 33
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: LIST
30331: PPUSH
30332: CALL_OW 72
30336: IFFALSE 30424
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30338: LD_ADDR_VAR 0 8
30342: PUSH
30343: LD_VAR 0 18
30347: PPUSH
30348: LD_INT 2
30350: PUSH
30351: LD_INT 30
30353: PUSH
30354: LD_INT 32
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 30
30363: PUSH
30364: LD_INT 33
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: LIST
30375: PPUSH
30376: CALL_OW 72
30380: PUSH
30381: FOR_IN
30382: IFFALSE 30422
// begin if not GetBWeapon ( i ) then
30384: LD_VAR 0 8
30388: PPUSH
30389: CALL_OW 269
30393: NOT
30394: IFFALSE 30420
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30396: LD_VAR 0 8
30400: PPUSH
30401: LD_VAR 0 8
30405: PPUSH
30406: LD_VAR 0 2
30410: PPUSH
30411: CALL 31670 0 2
30415: PPUSH
30416: CALL_OW 431
// end ;
30420: GO 30381
30422: POP
30423: POP
// end ; for i = 1 to personel do
30424: LD_ADDR_VAR 0 8
30428: PUSH
30429: DOUBLE
30430: LD_INT 1
30432: DEC
30433: ST_TO_ADDR
30434: LD_VAR 0 6
30438: PUSH
30439: FOR_TO
30440: IFFALSE 31504
// begin if i > 4 then
30442: LD_VAR 0 8
30446: PUSH
30447: LD_INT 4
30449: GREATER
30450: IFFALSE 30454
// break ;
30452: GO 31504
// case i of 1 :
30454: LD_VAR 0 8
30458: PUSH
30459: LD_INT 1
30461: DOUBLE
30462: EQUAL
30463: IFTRUE 30467
30465: GO 30547
30467: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30468: LD_ADDR_VAR 0 12
30472: PUSH
30473: LD_VAR 0 18
30477: PPUSH
30478: LD_INT 22
30480: PUSH
30481: LD_VAR 0 16
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 58
30492: PUSH
30493: EMPTY
30494: LIST
30495: PUSH
30496: LD_INT 2
30498: PUSH
30499: LD_INT 30
30501: PUSH
30502: LD_INT 32
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 30
30511: PUSH
30512: LD_INT 4
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 30
30521: PUSH
30522: LD_INT 5
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: LIST
30539: PPUSH
30540: CALL_OW 72
30544: ST_TO_ADDR
30545: GO 30769
30547: LD_INT 2
30549: DOUBLE
30550: EQUAL
30551: IFTRUE 30555
30553: GO 30617
30555: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30556: LD_ADDR_VAR 0 12
30560: PUSH
30561: LD_VAR 0 18
30565: PPUSH
30566: LD_INT 22
30568: PUSH
30569: LD_VAR 0 16
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: LD_INT 2
30580: PUSH
30581: LD_INT 30
30583: PUSH
30584: LD_INT 0
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 30
30593: PUSH
30594: LD_INT 1
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: LIST
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PPUSH
30610: CALL_OW 72
30614: ST_TO_ADDR
30615: GO 30769
30617: LD_INT 3
30619: DOUBLE
30620: EQUAL
30621: IFTRUE 30625
30623: GO 30687
30625: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30626: LD_ADDR_VAR 0 12
30630: PUSH
30631: LD_VAR 0 18
30635: PPUSH
30636: LD_INT 22
30638: PUSH
30639: LD_VAR 0 16
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 2
30650: PUSH
30651: LD_INT 30
30653: PUSH
30654: LD_INT 2
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 30
30663: PUSH
30664: LD_INT 3
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: LIST
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PPUSH
30680: CALL_OW 72
30684: ST_TO_ADDR
30685: GO 30769
30687: LD_INT 4
30689: DOUBLE
30690: EQUAL
30691: IFTRUE 30695
30693: GO 30768
30695: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30696: LD_ADDR_VAR 0 12
30700: PUSH
30701: LD_VAR 0 18
30705: PPUSH
30706: LD_INT 22
30708: PUSH
30709: LD_VAR 0 16
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 2
30720: PUSH
30721: LD_INT 30
30723: PUSH
30724: LD_INT 6
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 30
30733: PUSH
30734: LD_INT 7
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: PUSH
30741: LD_INT 30
30743: PUSH
30744: LD_INT 8
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PPUSH
30761: CALL_OW 72
30765: ST_TO_ADDR
30766: GO 30769
30768: POP
// if i = 1 then
30769: LD_VAR 0 8
30773: PUSH
30774: LD_INT 1
30776: EQUAL
30777: IFFALSE 30888
// begin tmp := [ ] ;
30779: LD_ADDR_VAR 0 19
30783: PUSH
30784: EMPTY
30785: ST_TO_ADDR
// for j in f do
30786: LD_ADDR_VAR 0 9
30790: PUSH
30791: LD_VAR 0 12
30795: PUSH
30796: FOR_IN
30797: IFFALSE 30870
// if GetBType ( j ) = b_bunker then
30799: LD_VAR 0 9
30803: PPUSH
30804: CALL_OW 266
30808: PUSH
30809: LD_INT 32
30811: EQUAL
30812: IFFALSE 30839
// tmp := Insert ( tmp , 1 , j ) else
30814: LD_ADDR_VAR 0 19
30818: PUSH
30819: LD_VAR 0 19
30823: PPUSH
30824: LD_INT 1
30826: PPUSH
30827: LD_VAR 0 9
30831: PPUSH
30832: CALL_OW 2
30836: ST_TO_ADDR
30837: GO 30868
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30839: LD_ADDR_VAR 0 19
30843: PUSH
30844: LD_VAR 0 19
30848: PPUSH
30849: LD_VAR 0 19
30853: PUSH
30854: LD_INT 1
30856: PLUS
30857: PPUSH
30858: LD_VAR 0 9
30862: PPUSH
30863: CALL_OW 2
30867: ST_TO_ADDR
30868: GO 30796
30870: POP
30871: POP
// if tmp then
30872: LD_VAR 0 19
30876: IFFALSE 30888
// f := tmp ;
30878: LD_ADDR_VAR 0 12
30882: PUSH
30883: LD_VAR 0 19
30887: ST_TO_ADDR
// end ; x := personel [ i ] ;
30888: LD_ADDR_VAR 0 13
30892: PUSH
30893: LD_VAR 0 6
30897: PUSH
30898: LD_VAR 0 8
30902: ARRAY
30903: ST_TO_ADDR
// if x = - 1 then
30904: LD_VAR 0 13
30908: PUSH
30909: LD_INT 1
30911: NEG
30912: EQUAL
30913: IFFALSE 31122
// begin for j in f do
30915: LD_ADDR_VAR 0 9
30919: PUSH
30920: LD_VAR 0 12
30924: PUSH
30925: FOR_IN
30926: IFFALSE 31118
// repeat InitHc ;
30928: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30932: LD_VAR 0 9
30936: PPUSH
30937: CALL_OW 266
30941: PUSH
30942: LD_INT 5
30944: EQUAL
30945: IFFALSE 31015
// begin if UnitsInside ( j ) < 3 then
30947: LD_VAR 0 9
30951: PPUSH
30952: CALL_OW 313
30956: PUSH
30957: LD_INT 3
30959: LESS
30960: IFFALSE 30996
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30962: LD_INT 0
30964: PPUSH
30965: LD_INT 5
30967: PUSH
30968: LD_INT 8
30970: PUSH
30971: LD_INT 9
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: LIST
30978: PUSH
30979: LD_VAR 0 17
30983: ARRAY
30984: PPUSH
30985: LD_VAR 0 4
30989: PPUSH
30990: CALL_OW 380
30994: GO 31013
// PrepareHuman ( false , i , skill ) ;
30996: LD_INT 0
30998: PPUSH
30999: LD_VAR 0 8
31003: PPUSH
31004: LD_VAR 0 4
31008: PPUSH
31009: CALL_OW 380
// end else
31013: GO 31032
// PrepareHuman ( false , i , skill ) ;
31015: LD_INT 0
31017: PPUSH
31018: LD_VAR 0 8
31022: PPUSH
31023: LD_VAR 0 4
31027: PPUSH
31028: CALL_OW 380
// un := CreateHuman ;
31032: LD_ADDR_VAR 0 14
31036: PUSH
31037: CALL_OW 44
31041: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31042: LD_ADDR_VAR 0 7
31046: PUSH
31047: LD_VAR 0 7
31051: PPUSH
31052: LD_INT 1
31054: PPUSH
31055: LD_VAR 0 14
31059: PPUSH
31060: CALL_OW 2
31064: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31065: LD_VAR 0 14
31069: PPUSH
31070: LD_VAR 0 9
31074: PPUSH
31075: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31079: LD_VAR 0 9
31083: PPUSH
31084: CALL_OW 313
31088: PUSH
31089: LD_INT 6
31091: EQUAL
31092: PUSH
31093: LD_VAR 0 9
31097: PPUSH
31098: CALL_OW 266
31102: PUSH
31103: LD_INT 32
31105: PUSH
31106: LD_INT 31
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: IN
31113: OR
31114: IFFALSE 30928
31116: GO 30925
31118: POP
31119: POP
// end else
31120: GO 31502
// for j = 1 to x do
31122: LD_ADDR_VAR 0 9
31126: PUSH
31127: DOUBLE
31128: LD_INT 1
31130: DEC
31131: ST_TO_ADDR
31132: LD_VAR 0 13
31136: PUSH
31137: FOR_TO
31138: IFFALSE 31500
// begin InitHc ;
31140: CALL_OW 19
// if not f then
31144: LD_VAR 0 12
31148: NOT
31149: IFFALSE 31238
// begin PrepareHuman ( false , i , skill ) ;
31151: LD_INT 0
31153: PPUSH
31154: LD_VAR 0 8
31158: PPUSH
31159: LD_VAR 0 4
31163: PPUSH
31164: CALL_OW 380
// un := CreateHuman ;
31168: LD_ADDR_VAR 0 14
31172: PUSH
31173: CALL_OW 44
31177: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31178: LD_ADDR_VAR 0 7
31182: PUSH
31183: LD_VAR 0 7
31187: PPUSH
31188: LD_INT 1
31190: PPUSH
31191: LD_VAR 0 14
31195: PPUSH
31196: CALL_OW 2
31200: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31201: LD_VAR 0 14
31205: PPUSH
31206: LD_VAR 0 1
31210: PPUSH
31211: CALL_OW 250
31215: PPUSH
31216: LD_VAR 0 1
31220: PPUSH
31221: CALL_OW 251
31225: PPUSH
31226: LD_INT 10
31228: PPUSH
31229: LD_INT 0
31231: PPUSH
31232: CALL_OW 50
// continue ;
31236: GO 31137
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31238: LD_VAR 0 12
31242: PUSH
31243: LD_INT 1
31245: ARRAY
31246: PPUSH
31247: CALL_OW 313
31251: PUSH
31252: LD_VAR 0 12
31256: PUSH
31257: LD_INT 1
31259: ARRAY
31260: PPUSH
31261: CALL_OW 266
31265: PUSH
31266: LD_INT 32
31268: PUSH
31269: LD_INT 31
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: IN
31276: AND
31277: PUSH
31278: LD_VAR 0 12
31282: PUSH
31283: LD_INT 1
31285: ARRAY
31286: PPUSH
31287: CALL_OW 313
31291: PUSH
31292: LD_INT 6
31294: EQUAL
31295: OR
31296: IFFALSE 31316
// f := Delete ( f , 1 ) ;
31298: LD_ADDR_VAR 0 12
31302: PUSH
31303: LD_VAR 0 12
31307: PPUSH
31308: LD_INT 1
31310: PPUSH
31311: CALL_OW 3
31315: ST_TO_ADDR
// if not f then
31316: LD_VAR 0 12
31320: NOT
31321: IFFALSE 31339
// begin x := x + 2 ;
31323: LD_ADDR_VAR 0 13
31327: PUSH
31328: LD_VAR 0 13
31332: PUSH
31333: LD_INT 2
31335: PLUS
31336: ST_TO_ADDR
// continue ;
31337: GO 31137
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31339: LD_VAR 0 12
31343: PUSH
31344: LD_INT 1
31346: ARRAY
31347: PPUSH
31348: CALL_OW 266
31352: PUSH
31353: LD_INT 5
31355: EQUAL
31356: IFFALSE 31430
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31358: LD_VAR 0 12
31362: PUSH
31363: LD_INT 1
31365: ARRAY
31366: PPUSH
31367: CALL_OW 313
31371: PUSH
31372: LD_INT 3
31374: LESS
31375: IFFALSE 31411
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31377: LD_INT 0
31379: PPUSH
31380: LD_INT 5
31382: PUSH
31383: LD_INT 8
31385: PUSH
31386: LD_INT 9
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: LIST
31393: PUSH
31394: LD_VAR 0 17
31398: ARRAY
31399: PPUSH
31400: LD_VAR 0 4
31404: PPUSH
31405: CALL_OW 380
31409: GO 31428
// PrepareHuman ( false , i , skill ) ;
31411: LD_INT 0
31413: PPUSH
31414: LD_VAR 0 8
31418: PPUSH
31419: LD_VAR 0 4
31423: PPUSH
31424: CALL_OW 380
// end else
31428: GO 31447
// PrepareHuman ( false , i , skill ) ;
31430: LD_INT 0
31432: PPUSH
31433: LD_VAR 0 8
31437: PPUSH
31438: LD_VAR 0 4
31442: PPUSH
31443: CALL_OW 380
// un := CreateHuman ;
31447: LD_ADDR_VAR 0 14
31451: PUSH
31452: CALL_OW 44
31456: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31457: LD_ADDR_VAR 0 7
31461: PUSH
31462: LD_VAR 0 7
31466: PPUSH
31467: LD_INT 1
31469: PPUSH
31470: LD_VAR 0 14
31474: PPUSH
31475: CALL_OW 2
31479: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31480: LD_VAR 0 14
31484: PPUSH
31485: LD_VAR 0 12
31489: PUSH
31490: LD_INT 1
31492: ARRAY
31493: PPUSH
31494: CALL_OW 52
// end ;
31498: GO 31137
31500: POP
31501: POP
// end ;
31502: GO 30439
31504: POP
31505: POP
// result := result ^ buildings ;
31506: LD_ADDR_VAR 0 7
31510: PUSH
31511: LD_VAR 0 7
31515: PUSH
31516: LD_VAR 0 18
31520: ADD
31521: ST_TO_ADDR
// end else
31522: GO 31665
// begin for i = 1 to personel do
31524: LD_ADDR_VAR 0 8
31528: PUSH
31529: DOUBLE
31530: LD_INT 1
31532: DEC
31533: ST_TO_ADDR
31534: LD_VAR 0 6
31538: PUSH
31539: FOR_TO
31540: IFFALSE 31663
// begin if i > 4 then
31542: LD_VAR 0 8
31546: PUSH
31547: LD_INT 4
31549: GREATER
31550: IFFALSE 31554
// break ;
31552: GO 31663
// x := personel [ i ] ;
31554: LD_ADDR_VAR 0 13
31558: PUSH
31559: LD_VAR 0 6
31563: PUSH
31564: LD_VAR 0 8
31568: ARRAY
31569: ST_TO_ADDR
// if x = - 1 then
31570: LD_VAR 0 13
31574: PUSH
31575: LD_INT 1
31577: NEG
31578: EQUAL
31579: IFFALSE 31583
// continue ;
31581: GO 31539
// PrepareHuman ( false , i , skill ) ;
31583: LD_INT 0
31585: PPUSH
31586: LD_VAR 0 8
31590: PPUSH
31591: LD_VAR 0 4
31595: PPUSH
31596: CALL_OW 380
// un := CreateHuman ;
31600: LD_ADDR_VAR 0 14
31604: PUSH
31605: CALL_OW 44
31609: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31610: LD_VAR 0 14
31614: PPUSH
31615: LD_VAR 0 1
31619: PPUSH
31620: CALL_OW 250
31624: PPUSH
31625: LD_VAR 0 1
31629: PPUSH
31630: CALL_OW 251
31634: PPUSH
31635: LD_INT 10
31637: PPUSH
31638: LD_INT 0
31640: PPUSH
31641: CALL_OW 50
// result := result ^ un ;
31645: LD_ADDR_VAR 0 7
31649: PUSH
31650: LD_VAR 0 7
31654: PUSH
31655: LD_VAR 0 14
31659: ADD
31660: ST_TO_ADDR
// end ;
31661: GO 31539
31663: POP
31664: POP
// end ; end ;
31665: LD_VAR 0 7
31669: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31670: LD_INT 0
31672: PPUSH
31673: PPUSH
31674: PPUSH
31675: PPUSH
31676: PPUSH
31677: PPUSH
31678: PPUSH
31679: PPUSH
31680: PPUSH
31681: PPUSH
31682: PPUSH
31683: PPUSH
31684: PPUSH
31685: PPUSH
31686: PPUSH
31687: PPUSH
// result := false ;
31688: LD_ADDR_VAR 0 3
31692: PUSH
31693: LD_INT 0
31695: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31696: LD_VAR 0 1
31700: NOT
31701: PUSH
31702: LD_VAR 0 1
31706: PPUSH
31707: CALL_OW 266
31711: PUSH
31712: LD_INT 32
31714: PUSH
31715: LD_INT 33
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: IN
31722: NOT
31723: OR
31724: IFFALSE 31728
// exit ;
31726: GO 32864
// nat := GetNation ( tower ) ;
31728: LD_ADDR_VAR 0 12
31732: PUSH
31733: LD_VAR 0 1
31737: PPUSH
31738: CALL_OW 248
31742: ST_TO_ADDR
// side := GetSide ( tower ) ;
31743: LD_ADDR_VAR 0 16
31747: PUSH
31748: LD_VAR 0 1
31752: PPUSH
31753: CALL_OW 255
31757: ST_TO_ADDR
// x := GetX ( tower ) ;
31758: LD_ADDR_VAR 0 10
31762: PUSH
31763: LD_VAR 0 1
31767: PPUSH
31768: CALL_OW 250
31772: ST_TO_ADDR
// y := GetY ( tower ) ;
31773: LD_ADDR_VAR 0 11
31777: PUSH
31778: LD_VAR 0 1
31782: PPUSH
31783: CALL_OW 251
31787: ST_TO_ADDR
// if not x or not y then
31788: LD_VAR 0 10
31792: NOT
31793: PUSH
31794: LD_VAR 0 11
31798: NOT
31799: OR
31800: IFFALSE 31804
// exit ;
31802: GO 32864
// weapon := 0 ;
31804: LD_ADDR_VAR 0 18
31808: PUSH
31809: LD_INT 0
31811: ST_TO_ADDR
// fac_list := [ ] ;
31812: LD_ADDR_VAR 0 17
31816: PUSH
31817: EMPTY
31818: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
31819: LD_ADDR_VAR 0 6
31823: PUSH
31824: LD_VAR 0 1
31828: PPUSH
31829: CALL_OW 274
31833: PPUSH
31834: LD_VAR 0 2
31838: PPUSH
31839: CALL 29442 0 2
31843: PPUSH
31844: LD_INT 30
31846: PUSH
31847: LD_INT 3
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PPUSH
31854: CALL_OW 72
31858: ST_TO_ADDR
// if not factories then
31859: LD_VAR 0 6
31863: NOT
31864: IFFALSE 31868
// exit ;
31866: GO 32864
// for i in factories do
31868: LD_ADDR_VAR 0 8
31872: PUSH
31873: LD_VAR 0 6
31877: PUSH
31878: FOR_IN
31879: IFFALSE 31904
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31881: LD_ADDR_VAR 0 17
31885: PUSH
31886: LD_VAR 0 17
31890: PUSH
31891: LD_VAR 0 8
31895: PPUSH
31896: CALL_OW 478
31900: UNION
31901: ST_TO_ADDR
31902: GO 31878
31904: POP
31905: POP
// if not fac_list then
31906: LD_VAR 0 17
31910: NOT
31911: IFFALSE 31915
// exit ;
31913: GO 32864
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31915: LD_ADDR_VAR 0 5
31919: PUSH
31920: LD_INT 4
31922: PUSH
31923: LD_INT 5
31925: PUSH
31926: LD_INT 9
31928: PUSH
31929: LD_INT 10
31931: PUSH
31932: LD_INT 6
31934: PUSH
31935: LD_INT 7
31937: PUSH
31938: LD_INT 11
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 27
31952: PUSH
31953: LD_INT 28
31955: PUSH
31956: LD_INT 26
31958: PUSH
31959: LD_INT 30
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 43
31970: PUSH
31971: LD_INT 44
31973: PUSH
31974: LD_INT 46
31976: PUSH
31977: LD_INT 45
31979: PUSH
31980: LD_INT 47
31982: PUSH
31983: LD_INT 49
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: LIST
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: LIST
31998: PUSH
31999: LD_VAR 0 12
32003: ARRAY
32004: ST_TO_ADDR
// for i in list do
32005: LD_ADDR_VAR 0 8
32009: PUSH
32010: LD_VAR 0 5
32014: PUSH
32015: FOR_IN
32016: IFFALSE 32049
// if not i in fac_list then
32018: LD_VAR 0 8
32022: PUSH
32023: LD_VAR 0 17
32027: IN
32028: NOT
32029: IFFALSE 32047
// list := list diff i ;
32031: LD_ADDR_VAR 0 5
32035: PUSH
32036: LD_VAR 0 5
32040: PUSH
32041: LD_VAR 0 8
32045: DIFF
32046: ST_TO_ADDR
32047: GO 32015
32049: POP
32050: POP
// if not list then
32051: LD_VAR 0 5
32055: NOT
32056: IFFALSE 32060
// exit ;
32058: GO 32864
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32060: LD_VAR 0 12
32064: PUSH
32065: LD_INT 3
32067: EQUAL
32068: PUSH
32069: LD_INT 49
32071: PUSH
32072: LD_VAR 0 5
32076: IN
32077: AND
32078: PUSH
32079: LD_INT 31
32081: PPUSH
32082: LD_VAR 0 16
32086: PPUSH
32087: CALL_OW 321
32091: PUSH
32092: LD_INT 2
32094: EQUAL
32095: AND
32096: IFFALSE 32156
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32098: LD_INT 22
32100: PUSH
32101: LD_VAR 0 16
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 35
32112: PUSH
32113: LD_INT 49
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 91
32122: PUSH
32123: LD_VAR 0 1
32127: PUSH
32128: LD_INT 10
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: LIST
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: LIST
32140: PPUSH
32141: CALL_OW 69
32145: NOT
32146: IFFALSE 32156
// weapon := ru_time_lapser ;
32148: LD_ADDR_VAR 0 18
32152: PUSH
32153: LD_INT 49
32155: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32156: LD_VAR 0 12
32160: PUSH
32161: LD_INT 1
32163: PUSH
32164: LD_INT 2
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: IN
32171: PUSH
32172: LD_INT 11
32174: PUSH
32175: LD_VAR 0 5
32179: IN
32180: PUSH
32181: LD_INT 30
32183: PUSH
32184: LD_VAR 0 5
32188: IN
32189: OR
32190: AND
32191: PUSH
32192: LD_INT 6
32194: PPUSH
32195: LD_VAR 0 16
32199: PPUSH
32200: CALL_OW 321
32204: PUSH
32205: LD_INT 2
32207: EQUAL
32208: AND
32209: IFFALSE 32374
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32211: LD_INT 22
32213: PUSH
32214: LD_VAR 0 16
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 2
32225: PUSH
32226: LD_INT 35
32228: PUSH
32229: LD_INT 11
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 35
32238: PUSH
32239: LD_INT 30
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 91
32253: PUSH
32254: LD_VAR 0 1
32258: PUSH
32259: LD_INT 18
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: LIST
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: LIST
32271: PPUSH
32272: CALL_OW 69
32276: NOT
32277: PUSH
32278: LD_INT 22
32280: PUSH
32281: LD_VAR 0 16
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 2
32292: PUSH
32293: LD_INT 30
32295: PUSH
32296: LD_INT 32
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 30
32305: PUSH
32306: LD_INT 33
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 91
32320: PUSH
32321: LD_VAR 0 1
32325: PUSH
32326: LD_INT 12
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: LIST
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: LIST
32338: PUSH
32339: EMPTY
32340: LIST
32341: PPUSH
32342: CALL_OW 69
32346: PUSH
32347: LD_INT 2
32349: GREATER
32350: AND
32351: IFFALSE 32374
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32353: LD_ADDR_VAR 0 18
32357: PUSH
32358: LD_INT 11
32360: PUSH
32361: LD_INT 30
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_VAR 0 12
32372: ARRAY
32373: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32374: LD_VAR 0 18
32378: NOT
32379: PUSH
32380: LD_INT 40
32382: PPUSH
32383: LD_VAR 0 16
32387: PPUSH
32388: CALL_OW 321
32392: PUSH
32393: LD_INT 2
32395: EQUAL
32396: AND
32397: PUSH
32398: LD_INT 7
32400: PUSH
32401: LD_VAR 0 5
32405: IN
32406: PUSH
32407: LD_INT 28
32409: PUSH
32410: LD_VAR 0 5
32414: IN
32415: OR
32416: PUSH
32417: LD_INT 45
32419: PUSH
32420: LD_VAR 0 5
32424: IN
32425: OR
32426: AND
32427: IFFALSE 32681
// begin hex := GetHexInfo ( x , y ) ;
32429: LD_ADDR_VAR 0 4
32433: PUSH
32434: LD_VAR 0 10
32438: PPUSH
32439: LD_VAR 0 11
32443: PPUSH
32444: CALL_OW 546
32448: ST_TO_ADDR
// if hex [ 1 ] then
32449: LD_VAR 0 4
32453: PUSH
32454: LD_INT 1
32456: ARRAY
32457: IFFALSE 32461
// exit ;
32459: GO 32864
// height := hex [ 2 ] ;
32461: LD_ADDR_VAR 0 15
32465: PUSH
32466: LD_VAR 0 4
32470: PUSH
32471: LD_INT 2
32473: ARRAY
32474: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32475: LD_ADDR_VAR 0 14
32479: PUSH
32480: LD_INT 0
32482: PUSH
32483: LD_INT 2
32485: PUSH
32486: LD_INT 3
32488: PUSH
32489: LD_INT 5
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: ST_TO_ADDR
// for i in tmp do
32498: LD_ADDR_VAR 0 8
32502: PUSH
32503: LD_VAR 0 14
32507: PUSH
32508: FOR_IN
32509: IFFALSE 32679
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32511: LD_ADDR_VAR 0 9
32515: PUSH
32516: LD_VAR 0 10
32520: PPUSH
32521: LD_VAR 0 8
32525: PPUSH
32526: LD_INT 5
32528: PPUSH
32529: CALL_OW 272
32533: PUSH
32534: LD_VAR 0 11
32538: PPUSH
32539: LD_VAR 0 8
32543: PPUSH
32544: LD_INT 5
32546: PPUSH
32547: CALL_OW 273
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32556: LD_VAR 0 9
32560: PUSH
32561: LD_INT 1
32563: ARRAY
32564: PPUSH
32565: LD_VAR 0 9
32569: PUSH
32570: LD_INT 2
32572: ARRAY
32573: PPUSH
32574: CALL_OW 488
32578: IFFALSE 32677
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32580: LD_ADDR_VAR 0 4
32584: PUSH
32585: LD_VAR 0 9
32589: PUSH
32590: LD_INT 1
32592: ARRAY
32593: PPUSH
32594: LD_VAR 0 9
32598: PUSH
32599: LD_INT 2
32601: ARRAY
32602: PPUSH
32603: CALL_OW 546
32607: ST_TO_ADDR
// if hex [ 1 ] then
32608: LD_VAR 0 4
32612: PUSH
32613: LD_INT 1
32615: ARRAY
32616: IFFALSE 32620
// continue ;
32618: GO 32508
// h := hex [ 2 ] ;
32620: LD_ADDR_VAR 0 13
32624: PUSH
32625: LD_VAR 0 4
32629: PUSH
32630: LD_INT 2
32632: ARRAY
32633: ST_TO_ADDR
// if h + 7 < height then
32634: LD_VAR 0 13
32638: PUSH
32639: LD_INT 7
32641: PLUS
32642: PUSH
32643: LD_VAR 0 15
32647: LESS
32648: IFFALSE 32677
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32650: LD_ADDR_VAR 0 18
32654: PUSH
32655: LD_INT 7
32657: PUSH
32658: LD_INT 28
32660: PUSH
32661: LD_INT 45
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: LIST
32668: PUSH
32669: LD_VAR 0 12
32673: ARRAY
32674: ST_TO_ADDR
// break ;
32675: GO 32679
// end ; end ; end ;
32677: GO 32508
32679: POP
32680: POP
// end ; if not weapon then
32681: LD_VAR 0 18
32685: NOT
32686: IFFALSE 32746
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32688: LD_ADDR_VAR 0 5
32692: PUSH
32693: LD_VAR 0 5
32697: PUSH
32698: LD_INT 11
32700: PUSH
32701: LD_INT 30
32703: PUSH
32704: LD_INT 49
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: LIST
32711: DIFF
32712: ST_TO_ADDR
// if not list then
32713: LD_VAR 0 5
32717: NOT
32718: IFFALSE 32722
// exit ;
32720: GO 32864
// weapon := list [ rand ( 1 , list ) ] ;
32722: LD_ADDR_VAR 0 18
32726: PUSH
32727: LD_VAR 0 5
32731: PUSH
32732: LD_INT 1
32734: PPUSH
32735: LD_VAR 0 5
32739: PPUSH
32740: CALL_OW 12
32744: ARRAY
32745: ST_TO_ADDR
// end ; if weapon then
32746: LD_VAR 0 18
32750: IFFALSE 32864
// begin tmp := CostOfWeapon ( weapon ) ;
32752: LD_ADDR_VAR 0 14
32756: PUSH
32757: LD_VAR 0 18
32761: PPUSH
32762: CALL_OW 451
32766: ST_TO_ADDR
// j := GetBase ( tower ) ;
32767: LD_ADDR_VAR 0 9
32771: PUSH
32772: LD_VAR 0 1
32776: PPUSH
32777: CALL_OW 274
32781: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32782: LD_VAR 0 9
32786: PPUSH
32787: LD_INT 1
32789: PPUSH
32790: CALL_OW 275
32794: PUSH
32795: LD_VAR 0 14
32799: PUSH
32800: LD_INT 1
32802: ARRAY
32803: GREATEREQUAL
32804: PUSH
32805: LD_VAR 0 9
32809: PPUSH
32810: LD_INT 2
32812: PPUSH
32813: CALL_OW 275
32817: PUSH
32818: LD_VAR 0 14
32822: PUSH
32823: LD_INT 2
32825: ARRAY
32826: GREATEREQUAL
32827: AND
32828: PUSH
32829: LD_VAR 0 9
32833: PPUSH
32834: LD_INT 3
32836: PPUSH
32837: CALL_OW 275
32841: PUSH
32842: LD_VAR 0 14
32846: PUSH
32847: LD_INT 3
32849: ARRAY
32850: GREATEREQUAL
32851: AND
32852: IFFALSE 32864
// result := weapon ;
32854: LD_ADDR_VAR 0 3
32858: PUSH
32859: LD_VAR 0 18
32863: ST_TO_ADDR
// end ; end ;
32864: LD_VAR 0 3
32868: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32869: LD_INT 0
32871: PPUSH
32872: PPUSH
// result := true ;
32873: LD_ADDR_VAR 0 3
32877: PUSH
32878: LD_INT 1
32880: ST_TO_ADDR
// if array1 = array2 then
32881: LD_VAR 0 1
32885: PUSH
32886: LD_VAR 0 2
32890: EQUAL
32891: IFFALSE 32951
// begin for i = 1 to array1 do
32893: LD_ADDR_VAR 0 4
32897: PUSH
32898: DOUBLE
32899: LD_INT 1
32901: DEC
32902: ST_TO_ADDR
32903: LD_VAR 0 1
32907: PUSH
32908: FOR_TO
32909: IFFALSE 32947
// if array1 [ i ] <> array2 [ i ] then
32911: LD_VAR 0 1
32915: PUSH
32916: LD_VAR 0 4
32920: ARRAY
32921: PUSH
32922: LD_VAR 0 2
32926: PUSH
32927: LD_VAR 0 4
32931: ARRAY
32932: NONEQUAL
32933: IFFALSE 32945
// begin result := false ;
32935: LD_ADDR_VAR 0 3
32939: PUSH
32940: LD_INT 0
32942: ST_TO_ADDR
// break ;
32943: GO 32947
// end ;
32945: GO 32908
32947: POP
32948: POP
// end else
32949: GO 32959
// result := false ;
32951: LD_ADDR_VAR 0 3
32955: PUSH
32956: LD_INT 0
32958: ST_TO_ADDR
// end ;
32959: LD_VAR 0 3
32963: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32964: LD_INT 0
32966: PPUSH
32967: PPUSH
32968: PPUSH
// pom := GetBase ( fac ) ;
32969: LD_ADDR_VAR 0 5
32973: PUSH
32974: LD_VAR 0 1
32978: PPUSH
32979: CALL_OW 274
32983: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32984: LD_ADDR_VAR 0 4
32988: PUSH
32989: LD_VAR 0 2
32993: PUSH
32994: LD_INT 1
32996: ARRAY
32997: PPUSH
32998: LD_VAR 0 2
33002: PUSH
33003: LD_INT 2
33005: ARRAY
33006: PPUSH
33007: LD_VAR 0 2
33011: PUSH
33012: LD_INT 3
33014: ARRAY
33015: PPUSH
33016: LD_VAR 0 2
33020: PUSH
33021: LD_INT 4
33023: ARRAY
33024: PPUSH
33025: CALL_OW 449
33029: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33030: LD_ADDR_VAR 0 3
33034: PUSH
33035: LD_VAR 0 5
33039: PPUSH
33040: LD_INT 1
33042: PPUSH
33043: CALL_OW 275
33047: PUSH
33048: LD_VAR 0 4
33052: PUSH
33053: LD_INT 1
33055: ARRAY
33056: GREATEREQUAL
33057: PUSH
33058: LD_VAR 0 5
33062: PPUSH
33063: LD_INT 2
33065: PPUSH
33066: CALL_OW 275
33070: PUSH
33071: LD_VAR 0 4
33075: PUSH
33076: LD_INT 2
33078: ARRAY
33079: GREATEREQUAL
33080: AND
33081: PUSH
33082: LD_VAR 0 5
33086: PPUSH
33087: LD_INT 3
33089: PPUSH
33090: CALL_OW 275
33094: PUSH
33095: LD_VAR 0 4
33099: PUSH
33100: LD_INT 3
33102: ARRAY
33103: GREATEREQUAL
33104: AND
33105: ST_TO_ADDR
// end ;
33106: LD_VAR 0 3
33110: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33111: LD_INT 0
33113: PPUSH
33114: PPUSH
33115: PPUSH
33116: PPUSH
// pom := GetBase ( building ) ;
33117: LD_ADDR_VAR 0 3
33121: PUSH
33122: LD_VAR 0 1
33126: PPUSH
33127: CALL_OW 274
33131: ST_TO_ADDR
// if not pom then
33132: LD_VAR 0 3
33136: NOT
33137: IFFALSE 33141
// exit ;
33139: GO 33311
// btype := GetBType ( building ) ;
33141: LD_ADDR_VAR 0 5
33145: PUSH
33146: LD_VAR 0 1
33150: PPUSH
33151: CALL_OW 266
33155: ST_TO_ADDR
// if btype = b_armoury then
33156: LD_VAR 0 5
33160: PUSH
33161: LD_INT 4
33163: EQUAL
33164: IFFALSE 33174
// btype := b_barracks ;
33166: LD_ADDR_VAR 0 5
33170: PUSH
33171: LD_INT 5
33173: ST_TO_ADDR
// if btype = b_depot then
33174: LD_VAR 0 5
33178: PUSH
33179: LD_INT 0
33181: EQUAL
33182: IFFALSE 33192
// btype := b_warehouse ;
33184: LD_ADDR_VAR 0 5
33188: PUSH
33189: LD_INT 1
33191: ST_TO_ADDR
// if btype = b_workshop then
33192: LD_VAR 0 5
33196: PUSH
33197: LD_INT 2
33199: EQUAL
33200: IFFALSE 33210
// btype := b_factory ;
33202: LD_ADDR_VAR 0 5
33206: PUSH
33207: LD_INT 3
33209: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33210: LD_ADDR_VAR 0 4
33214: PUSH
33215: LD_VAR 0 5
33219: PPUSH
33220: LD_VAR 0 1
33224: PPUSH
33225: CALL_OW 248
33229: PPUSH
33230: CALL_OW 450
33234: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33235: LD_ADDR_VAR 0 2
33239: PUSH
33240: LD_VAR 0 3
33244: PPUSH
33245: LD_INT 1
33247: PPUSH
33248: CALL_OW 275
33252: PUSH
33253: LD_VAR 0 4
33257: PUSH
33258: LD_INT 1
33260: ARRAY
33261: GREATEREQUAL
33262: PUSH
33263: LD_VAR 0 3
33267: PPUSH
33268: LD_INT 2
33270: PPUSH
33271: CALL_OW 275
33275: PUSH
33276: LD_VAR 0 4
33280: PUSH
33281: LD_INT 2
33283: ARRAY
33284: GREATEREQUAL
33285: AND
33286: PUSH
33287: LD_VAR 0 3
33291: PPUSH
33292: LD_INT 3
33294: PPUSH
33295: CALL_OW 275
33299: PUSH
33300: LD_VAR 0 4
33304: PUSH
33305: LD_INT 3
33307: ARRAY
33308: GREATEREQUAL
33309: AND
33310: ST_TO_ADDR
// end ;
33311: LD_VAR 0 2
33315: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33316: LD_INT 0
33318: PPUSH
33319: PPUSH
33320: PPUSH
// pom := GetBase ( building ) ;
33321: LD_ADDR_VAR 0 4
33325: PUSH
33326: LD_VAR 0 1
33330: PPUSH
33331: CALL_OW 274
33335: ST_TO_ADDR
// if not pom then
33336: LD_VAR 0 4
33340: NOT
33341: IFFALSE 33345
// exit ;
33343: GO 33446
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33345: LD_ADDR_VAR 0 5
33349: PUSH
33350: LD_VAR 0 2
33354: PPUSH
33355: LD_VAR 0 1
33359: PPUSH
33360: CALL_OW 248
33364: PPUSH
33365: CALL_OW 450
33369: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33370: LD_ADDR_VAR 0 3
33374: PUSH
33375: LD_VAR 0 4
33379: PPUSH
33380: LD_INT 1
33382: PPUSH
33383: CALL_OW 275
33387: PUSH
33388: LD_VAR 0 5
33392: PUSH
33393: LD_INT 1
33395: ARRAY
33396: GREATEREQUAL
33397: PUSH
33398: LD_VAR 0 4
33402: PPUSH
33403: LD_INT 2
33405: PPUSH
33406: CALL_OW 275
33410: PUSH
33411: LD_VAR 0 5
33415: PUSH
33416: LD_INT 2
33418: ARRAY
33419: GREATEREQUAL
33420: AND
33421: PUSH
33422: LD_VAR 0 4
33426: PPUSH
33427: LD_INT 3
33429: PPUSH
33430: CALL_OW 275
33434: PUSH
33435: LD_VAR 0 5
33439: PUSH
33440: LD_INT 3
33442: ARRAY
33443: GREATEREQUAL
33444: AND
33445: ST_TO_ADDR
// end ;
33446: LD_VAR 0 3
33450: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
33451: LD_INT 0
33453: PPUSH
33454: PPUSH
33455: PPUSH
33456: PPUSH
33457: PPUSH
33458: PPUSH
33459: PPUSH
33460: PPUSH
33461: PPUSH
33462: PPUSH
// result := false ;
33463: LD_ADDR_VAR 0 6
33467: PUSH
33468: LD_INT 0
33470: ST_TO_ADDR
// if not base or not btype or not x or not y then
33471: LD_VAR 0 1
33475: NOT
33476: PUSH
33477: LD_VAR 0 2
33481: NOT
33482: OR
33483: PUSH
33484: LD_VAR 0 3
33488: NOT
33489: OR
33490: PUSH
33491: LD_VAR 0 4
33495: NOT
33496: OR
33497: IFFALSE 33501
// exit ;
33499: GO 34092
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
33501: LD_ADDR_VAR 0 12
33505: PUSH
33506: LD_VAR 0 2
33510: PPUSH
33511: LD_VAR 0 3
33515: PPUSH
33516: LD_VAR 0 4
33520: PPUSH
33521: LD_VAR 0 5
33525: PPUSH
33526: LD_VAR 0 1
33530: PUSH
33531: LD_INT 1
33533: ARRAY
33534: PPUSH
33535: CALL_OW 248
33539: PPUSH
33540: LD_INT 0
33542: PPUSH
33543: CALL 34929 0 6
33547: ST_TO_ADDR
// if not hexes then
33548: LD_VAR 0 12
33552: NOT
33553: IFFALSE 33557
// exit ;
33555: GO 34092
// for i = 1 to hexes do
33557: LD_ADDR_VAR 0 7
33561: PUSH
33562: DOUBLE
33563: LD_INT 1
33565: DEC
33566: ST_TO_ADDR
33567: LD_VAR 0 12
33571: PUSH
33572: FOR_TO
33573: IFFALSE 34090
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33575: LD_ADDR_VAR 0 11
33579: PUSH
33580: LD_VAR 0 12
33584: PUSH
33585: LD_VAR 0 7
33589: ARRAY
33590: PUSH
33591: LD_INT 1
33593: ARRAY
33594: PPUSH
33595: LD_VAR 0 12
33599: PUSH
33600: LD_VAR 0 7
33604: ARRAY
33605: PUSH
33606: LD_INT 2
33608: ARRAY
33609: PPUSH
33610: CALL_OW 428
33614: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33615: LD_VAR 0 12
33619: PUSH
33620: LD_VAR 0 7
33624: ARRAY
33625: PUSH
33626: LD_INT 1
33628: ARRAY
33629: PPUSH
33630: LD_VAR 0 12
33634: PUSH
33635: LD_VAR 0 7
33639: ARRAY
33640: PUSH
33641: LD_INT 2
33643: ARRAY
33644: PPUSH
33645: CALL_OW 351
33649: PUSH
33650: LD_VAR 0 12
33654: PUSH
33655: LD_VAR 0 7
33659: ARRAY
33660: PUSH
33661: LD_INT 1
33663: ARRAY
33664: PPUSH
33665: LD_VAR 0 12
33669: PUSH
33670: LD_VAR 0 7
33674: ARRAY
33675: PUSH
33676: LD_INT 2
33678: ARRAY
33679: PPUSH
33680: CALL_OW 488
33684: NOT
33685: OR
33686: PUSH
33687: LD_VAR 0 11
33691: PPUSH
33692: CALL_OW 247
33696: PUSH
33697: LD_INT 3
33699: EQUAL
33700: OR
33701: IFFALSE 33707
// exit ;
33703: POP
33704: POP
33705: GO 34092
// if not tmp then
33707: LD_VAR 0 11
33711: NOT
33712: IFFALSE 33716
// continue ;
33714: GO 33572
// result := true ;
33716: LD_ADDR_VAR 0 6
33720: PUSH
33721: LD_INT 1
33723: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33724: LD_ADDR_VAR 0 15
33728: PUSH
33729: LD_INT 22
33731: PUSH
33732: LD_VAR 0 11
33736: PPUSH
33737: CALL_OW 255
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 2
33748: PUSH
33749: LD_INT 30
33751: PUSH
33752: LD_INT 0
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 30
33761: PUSH
33762: LD_INT 1
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: LIST
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PPUSH
33778: CALL_OW 69
33782: ST_TO_ADDR
// if dep then
33783: LD_VAR 0 15
33787: IFFALSE 33923
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33789: LD_ADDR_VAR 0 14
33793: PUSH
33794: LD_VAR 0 15
33798: PUSH
33799: LD_INT 1
33801: ARRAY
33802: PPUSH
33803: CALL_OW 250
33807: PPUSH
33808: LD_VAR 0 15
33812: PUSH
33813: LD_INT 1
33815: ARRAY
33816: PPUSH
33817: CALL_OW 254
33821: PPUSH
33822: LD_INT 5
33824: PPUSH
33825: CALL_OW 272
33829: PUSH
33830: LD_VAR 0 15
33834: PUSH
33835: LD_INT 1
33837: ARRAY
33838: PPUSH
33839: CALL_OW 251
33843: PPUSH
33844: LD_VAR 0 15
33848: PUSH
33849: LD_INT 1
33851: ARRAY
33852: PPUSH
33853: CALL_OW 254
33857: PPUSH
33858: LD_INT 5
33860: PPUSH
33861: CALL_OW 273
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33870: LD_VAR 0 14
33874: PUSH
33875: LD_INT 1
33877: ARRAY
33878: PPUSH
33879: LD_VAR 0 14
33883: PUSH
33884: LD_INT 2
33886: ARRAY
33887: PPUSH
33888: CALL_OW 488
33892: IFFALSE 33923
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33894: LD_VAR 0 11
33898: PPUSH
33899: LD_VAR 0 14
33903: PUSH
33904: LD_INT 1
33906: ARRAY
33907: PPUSH
33908: LD_VAR 0 14
33912: PUSH
33913: LD_INT 2
33915: ARRAY
33916: PPUSH
33917: CALL_OW 111
// continue ;
33921: GO 33572
// end ; end ; r := GetDir ( tmp ) ;
33923: LD_ADDR_VAR 0 13
33927: PUSH
33928: LD_VAR 0 11
33932: PPUSH
33933: CALL_OW 254
33937: ST_TO_ADDR
// if r = 5 then
33938: LD_VAR 0 13
33942: PUSH
33943: LD_INT 5
33945: EQUAL
33946: IFFALSE 33956
// r := 0 ;
33948: LD_ADDR_VAR 0 13
33952: PUSH
33953: LD_INT 0
33955: ST_TO_ADDR
// for j = r to 5 do
33956: LD_ADDR_VAR 0 8
33960: PUSH
33961: DOUBLE
33962: LD_VAR 0 13
33966: DEC
33967: ST_TO_ADDR
33968: LD_INT 5
33970: PUSH
33971: FOR_TO
33972: IFFALSE 34086
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33974: LD_ADDR_VAR 0 9
33978: PUSH
33979: LD_VAR 0 11
33983: PPUSH
33984: CALL_OW 250
33988: PPUSH
33989: LD_VAR 0 8
33993: PPUSH
33994: LD_INT 2
33996: PPUSH
33997: CALL_OW 272
34001: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34002: LD_ADDR_VAR 0 10
34006: PUSH
34007: LD_VAR 0 11
34011: PPUSH
34012: CALL_OW 251
34016: PPUSH
34017: LD_VAR 0 8
34021: PPUSH
34022: LD_INT 2
34024: PPUSH
34025: CALL_OW 273
34029: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34030: LD_VAR 0 9
34034: PPUSH
34035: LD_VAR 0 10
34039: PPUSH
34040: CALL_OW 488
34044: PUSH
34045: LD_VAR 0 9
34049: PPUSH
34050: LD_VAR 0 10
34054: PPUSH
34055: CALL_OW 428
34059: NOT
34060: AND
34061: IFFALSE 34084
// begin ComMoveXY ( tmp , _x , _y ) ;
34063: LD_VAR 0 11
34067: PPUSH
34068: LD_VAR 0 9
34072: PPUSH
34073: LD_VAR 0 10
34077: PPUSH
34078: CALL_OW 111
// break ;
34082: GO 34086
// end ; end ;
34084: GO 33971
34086: POP
34087: POP
// end ;
34088: GO 33572
34090: POP
34091: POP
// end ;
34092: LD_VAR 0 6
34096: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
34097: LD_INT 0
34099: PPUSH
34100: PPUSH
34101: PPUSH
34102: PPUSH
34103: PPUSH
34104: PPUSH
34105: PPUSH
34106: PPUSH
34107: PPUSH
34108: PPUSH
// result := false ;
34109: LD_ADDR_VAR 0 6
34113: PUSH
34114: LD_INT 0
34116: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34117: LD_VAR 0 1
34121: NOT
34122: PUSH
34123: LD_VAR 0 1
34127: PPUSH
34128: CALL_OW 266
34132: PUSH
34133: LD_INT 0
34135: PUSH
34136: LD_INT 1
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: IN
34143: NOT
34144: OR
34145: PUSH
34146: LD_VAR 0 2
34150: NOT
34151: OR
34152: PUSH
34153: LD_VAR 0 5
34157: PUSH
34158: LD_INT 0
34160: PUSH
34161: LD_INT 1
34163: PUSH
34164: LD_INT 2
34166: PUSH
34167: LD_INT 3
34169: PUSH
34170: LD_INT 4
34172: PUSH
34173: LD_INT 5
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: IN
34184: NOT
34185: OR
34186: PUSH
34187: LD_VAR 0 3
34191: PPUSH
34192: LD_VAR 0 4
34196: PPUSH
34197: CALL_OW 488
34201: NOT
34202: OR
34203: IFFALSE 34207
// exit ;
34205: GO 34924
// pom := GetBase ( depot ) ;
34207: LD_ADDR_VAR 0 10
34211: PUSH
34212: LD_VAR 0 1
34216: PPUSH
34217: CALL_OW 274
34221: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34222: LD_ADDR_VAR 0 11
34226: PUSH
34227: LD_VAR 0 2
34231: PPUSH
34232: LD_VAR 0 1
34236: PPUSH
34237: CALL_OW 248
34241: PPUSH
34242: CALL_OW 450
34246: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34247: LD_VAR 0 10
34251: PPUSH
34252: LD_INT 1
34254: PPUSH
34255: CALL_OW 275
34259: PUSH
34260: LD_VAR 0 11
34264: PUSH
34265: LD_INT 1
34267: ARRAY
34268: GREATEREQUAL
34269: PUSH
34270: LD_VAR 0 10
34274: PPUSH
34275: LD_INT 2
34277: PPUSH
34278: CALL_OW 275
34282: PUSH
34283: LD_VAR 0 11
34287: PUSH
34288: LD_INT 2
34290: ARRAY
34291: GREATEREQUAL
34292: AND
34293: PUSH
34294: LD_VAR 0 10
34298: PPUSH
34299: LD_INT 3
34301: PPUSH
34302: CALL_OW 275
34306: PUSH
34307: LD_VAR 0 11
34311: PUSH
34312: LD_INT 3
34314: ARRAY
34315: GREATEREQUAL
34316: AND
34317: NOT
34318: IFFALSE 34322
// exit ;
34320: GO 34924
// if GetBType ( depot ) = b_depot then
34322: LD_VAR 0 1
34326: PPUSH
34327: CALL_OW 266
34331: PUSH
34332: LD_INT 0
34334: EQUAL
34335: IFFALSE 34347
// dist := 28 else
34337: LD_ADDR_VAR 0 14
34341: PUSH
34342: LD_INT 28
34344: ST_TO_ADDR
34345: GO 34355
// dist := 36 ;
34347: LD_ADDR_VAR 0 14
34351: PUSH
34352: LD_INT 36
34354: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34355: LD_VAR 0 1
34359: PPUSH
34360: LD_VAR 0 3
34364: PPUSH
34365: LD_VAR 0 4
34369: PPUSH
34370: CALL_OW 297
34374: PUSH
34375: LD_VAR 0 14
34379: GREATER
34380: IFFALSE 34384
// exit ;
34382: GO 34924
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34384: LD_ADDR_VAR 0 12
34388: PUSH
34389: LD_VAR 0 2
34393: PPUSH
34394: LD_VAR 0 3
34398: PPUSH
34399: LD_VAR 0 4
34403: PPUSH
34404: LD_VAR 0 5
34408: PPUSH
34409: LD_VAR 0 1
34413: PPUSH
34414: CALL_OW 248
34418: PPUSH
34419: LD_INT 0
34421: PPUSH
34422: CALL 34929 0 6
34426: ST_TO_ADDR
// if not hexes then
34427: LD_VAR 0 12
34431: NOT
34432: IFFALSE 34436
// exit ;
34434: GO 34924
// hex := GetHexInfo ( x , y ) ;
34436: LD_ADDR_VAR 0 15
34440: PUSH
34441: LD_VAR 0 3
34445: PPUSH
34446: LD_VAR 0 4
34450: PPUSH
34451: CALL_OW 546
34455: ST_TO_ADDR
// if hex [ 1 ] then
34456: LD_VAR 0 15
34460: PUSH
34461: LD_INT 1
34463: ARRAY
34464: IFFALSE 34468
// exit ;
34466: GO 34924
// height := hex [ 2 ] ;
34468: LD_ADDR_VAR 0 13
34472: PUSH
34473: LD_VAR 0 15
34477: PUSH
34478: LD_INT 2
34480: ARRAY
34481: ST_TO_ADDR
// for i = 1 to hexes do
34482: LD_ADDR_VAR 0 7
34486: PUSH
34487: DOUBLE
34488: LD_INT 1
34490: DEC
34491: ST_TO_ADDR
34492: LD_VAR 0 12
34496: PUSH
34497: FOR_TO
34498: IFFALSE 34828
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34500: LD_VAR 0 12
34504: PUSH
34505: LD_VAR 0 7
34509: ARRAY
34510: PUSH
34511: LD_INT 1
34513: ARRAY
34514: PPUSH
34515: LD_VAR 0 12
34519: PUSH
34520: LD_VAR 0 7
34524: ARRAY
34525: PUSH
34526: LD_INT 2
34528: ARRAY
34529: PPUSH
34530: CALL_OW 488
34534: NOT
34535: PUSH
34536: LD_VAR 0 12
34540: PUSH
34541: LD_VAR 0 7
34545: ARRAY
34546: PUSH
34547: LD_INT 1
34549: ARRAY
34550: PPUSH
34551: LD_VAR 0 12
34555: PUSH
34556: LD_VAR 0 7
34560: ARRAY
34561: PUSH
34562: LD_INT 2
34564: ARRAY
34565: PPUSH
34566: CALL_OW 428
34570: PUSH
34571: LD_INT 0
34573: GREATER
34574: OR
34575: PUSH
34576: LD_VAR 0 12
34580: PUSH
34581: LD_VAR 0 7
34585: ARRAY
34586: PUSH
34587: LD_INT 1
34589: ARRAY
34590: PPUSH
34591: LD_VAR 0 12
34595: PUSH
34596: LD_VAR 0 7
34600: ARRAY
34601: PUSH
34602: LD_INT 2
34604: ARRAY
34605: PPUSH
34606: CALL_OW 351
34610: OR
34611: IFFALSE 34617
// exit ;
34613: POP
34614: POP
34615: GO 34924
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34617: LD_ADDR_VAR 0 8
34621: PUSH
34622: LD_VAR 0 12
34626: PUSH
34627: LD_VAR 0 7
34631: ARRAY
34632: PUSH
34633: LD_INT 1
34635: ARRAY
34636: PPUSH
34637: LD_VAR 0 12
34641: PUSH
34642: LD_VAR 0 7
34646: ARRAY
34647: PUSH
34648: LD_INT 2
34650: ARRAY
34651: PPUSH
34652: CALL_OW 546
34656: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34657: LD_VAR 0 8
34661: PUSH
34662: LD_INT 1
34664: ARRAY
34665: PUSH
34666: LD_VAR 0 8
34670: PUSH
34671: LD_INT 2
34673: ARRAY
34674: PUSH
34675: LD_VAR 0 13
34679: PUSH
34680: LD_INT 2
34682: PLUS
34683: GREATER
34684: OR
34685: PUSH
34686: LD_VAR 0 8
34690: PUSH
34691: LD_INT 2
34693: ARRAY
34694: PUSH
34695: LD_VAR 0 13
34699: PUSH
34700: LD_INT 2
34702: MINUS
34703: LESS
34704: OR
34705: PUSH
34706: LD_VAR 0 8
34710: PUSH
34711: LD_INT 3
34713: ARRAY
34714: PUSH
34715: LD_INT 0
34717: PUSH
34718: LD_INT 8
34720: PUSH
34721: LD_INT 9
34723: PUSH
34724: LD_INT 10
34726: PUSH
34727: LD_INT 11
34729: PUSH
34730: LD_INT 12
34732: PUSH
34733: LD_INT 13
34735: PUSH
34736: LD_INT 16
34738: PUSH
34739: LD_INT 17
34741: PUSH
34742: LD_INT 18
34744: PUSH
34745: LD_INT 19
34747: PUSH
34748: LD_INT 20
34750: PUSH
34751: LD_INT 21
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: IN
34769: NOT
34770: OR
34771: PUSH
34772: LD_VAR 0 8
34776: PUSH
34777: LD_INT 5
34779: ARRAY
34780: NOT
34781: OR
34782: PUSH
34783: LD_VAR 0 8
34787: PUSH
34788: LD_INT 6
34790: ARRAY
34791: PUSH
34792: LD_INT 1
34794: PUSH
34795: LD_INT 2
34797: PUSH
34798: LD_INT 7
34800: PUSH
34801: LD_INT 9
34803: PUSH
34804: LD_INT 10
34806: PUSH
34807: LD_INT 11
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: IN
34818: NOT
34819: OR
34820: IFFALSE 34826
// exit ;
34822: POP
34823: POP
34824: GO 34924
// end ;
34826: GO 34497
34828: POP
34829: POP
// side := GetSide ( depot ) ;
34830: LD_ADDR_VAR 0 9
34834: PUSH
34835: LD_VAR 0 1
34839: PPUSH
34840: CALL_OW 255
34844: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34845: LD_VAR 0 9
34849: PPUSH
34850: LD_VAR 0 3
34854: PPUSH
34855: LD_VAR 0 4
34859: PPUSH
34860: LD_INT 20
34862: PPUSH
34863: CALL 27596 0 4
34867: PUSH
34868: LD_INT 4
34870: ARRAY
34871: IFFALSE 34875
// exit ;
34873: GO 34924
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34875: LD_VAR 0 2
34879: PUSH
34880: LD_INT 29
34882: PUSH
34883: LD_INT 30
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: IN
34890: PUSH
34891: LD_VAR 0 3
34895: PPUSH
34896: LD_VAR 0 4
34900: PPUSH
34901: LD_VAR 0 9
34905: PPUSH
34906: CALL_OW 440
34910: NOT
34911: AND
34912: IFFALSE 34916
// exit ;
34914: GO 34924
// result := true ;
34916: LD_ADDR_VAR 0 6
34920: PUSH
34921: LD_INT 1
34923: ST_TO_ADDR
// end ;
34924: LD_VAR 0 6
34928: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
34929: LD_INT 0
34931: PPUSH
34932: PPUSH
34933: PPUSH
34934: PPUSH
34935: PPUSH
34936: PPUSH
34937: PPUSH
34938: PPUSH
34939: PPUSH
34940: PPUSH
34941: PPUSH
34942: PPUSH
34943: PPUSH
34944: PPUSH
34945: PPUSH
34946: PPUSH
34947: PPUSH
34948: PPUSH
34949: PPUSH
34950: PPUSH
34951: PPUSH
34952: PPUSH
34953: PPUSH
34954: PPUSH
34955: PPUSH
34956: PPUSH
34957: PPUSH
34958: PPUSH
34959: PPUSH
34960: PPUSH
34961: PPUSH
34962: PPUSH
34963: PPUSH
34964: PPUSH
34965: PPUSH
34966: PPUSH
34967: PPUSH
34968: PPUSH
34969: PPUSH
34970: PPUSH
34971: PPUSH
34972: PPUSH
34973: PPUSH
34974: PPUSH
34975: PPUSH
34976: PPUSH
34977: PPUSH
34978: PPUSH
34979: PPUSH
34980: PPUSH
34981: PPUSH
34982: PPUSH
34983: PPUSH
34984: PPUSH
34985: PPUSH
34986: PPUSH
34987: PPUSH
34988: PPUSH
// result = [ ] ;
34989: LD_ADDR_VAR 0 7
34993: PUSH
34994: EMPTY
34995: ST_TO_ADDR
// temp_list = [ ] ;
34996: LD_ADDR_VAR 0 9
35000: PUSH
35001: EMPTY
35002: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35003: LD_VAR 0 4
35007: PUSH
35008: LD_INT 0
35010: PUSH
35011: LD_INT 1
35013: PUSH
35014: LD_INT 2
35016: PUSH
35017: LD_INT 3
35019: PUSH
35020: LD_INT 4
35022: PUSH
35023: LD_INT 5
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: IN
35034: NOT
35035: PUSH
35036: LD_VAR 0 1
35040: PUSH
35041: LD_INT 0
35043: PUSH
35044: LD_INT 1
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: IN
35051: PUSH
35052: LD_VAR 0 5
35056: PUSH
35057: LD_INT 1
35059: PUSH
35060: LD_INT 2
35062: PUSH
35063: LD_INT 3
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: LIST
35070: IN
35071: NOT
35072: AND
35073: OR
35074: IFFALSE 35078
// exit ;
35076: GO 53463
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35078: LD_VAR 0 1
35082: PUSH
35083: LD_INT 6
35085: PUSH
35086: LD_INT 7
35088: PUSH
35089: LD_INT 8
35091: PUSH
35092: LD_INT 13
35094: PUSH
35095: LD_INT 12
35097: PUSH
35098: LD_INT 15
35100: PUSH
35101: LD_INT 11
35103: PUSH
35104: LD_INT 14
35106: PUSH
35107: LD_INT 10
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: IN
35121: IFFALSE 35131
// btype = b_lab ;
35123: LD_ADDR_VAR 0 1
35127: PUSH
35128: LD_INT 6
35130: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35131: LD_VAR 0 6
35135: PUSH
35136: LD_INT 0
35138: PUSH
35139: LD_INT 1
35141: PUSH
35142: LD_INT 2
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: LIST
35149: IN
35150: NOT
35151: PUSH
35152: LD_VAR 0 1
35156: PUSH
35157: LD_INT 0
35159: PUSH
35160: LD_INT 1
35162: PUSH
35163: LD_INT 2
35165: PUSH
35166: LD_INT 3
35168: PUSH
35169: LD_INT 6
35171: PUSH
35172: LD_INT 36
35174: PUSH
35175: LD_INT 4
35177: PUSH
35178: LD_INT 5
35180: PUSH
35181: LD_INT 31
35183: PUSH
35184: LD_INT 32
35186: PUSH
35187: LD_INT 33
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: IN
35203: NOT
35204: PUSH
35205: LD_VAR 0 6
35209: PUSH
35210: LD_INT 1
35212: EQUAL
35213: AND
35214: OR
35215: PUSH
35216: LD_VAR 0 1
35220: PUSH
35221: LD_INT 2
35223: PUSH
35224: LD_INT 3
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: IN
35231: NOT
35232: PUSH
35233: LD_VAR 0 6
35237: PUSH
35238: LD_INT 2
35240: EQUAL
35241: AND
35242: OR
35243: IFFALSE 35253
// mode = 0 ;
35245: LD_ADDR_VAR 0 6
35249: PUSH
35250: LD_INT 0
35252: ST_TO_ADDR
// case mode of 0 :
35253: LD_VAR 0 6
35257: PUSH
35258: LD_INT 0
35260: DOUBLE
35261: EQUAL
35262: IFTRUE 35266
35264: GO 46719
35266: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35267: LD_ADDR_VAR 0 11
35271: PUSH
35272: LD_INT 0
35274: PUSH
35275: LD_INT 0
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 0
35284: PUSH
35285: LD_INT 1
35287: NEG
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 1
35295: PUSH
35296: LD_INT 0
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 1
35305: PUSH
35306: LD_INT 1
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 0
35315: PUSH
35316: LD_INT 1
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 1
35325: NEG
35326: PUSH
35327: LD_INT 0
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 1
35336: NEG
35337: PUSH
35338: LD_INT 1
35340: NEG
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: LD_INT 1
35348: NEG
35349: PUSH
35350: LD_INT 2
35352: NEG
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 0
35360: PUSH
35361: LD_INT 2
35363: NEG
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 1
35371: PUSH
35372: LD_INT 1
35374: NEG
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 1
35382: PUSH
35383: LD_INT 2
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 0
35392: PUSH
35393: LD_INT 2
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 1
35402: NEG
35403: PUSH
35404: LD_INT 1
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 1
35413: PUSH
35414: LD_INT 3
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 0
35423: PUSH
35424: LD_INT 3
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 1
35433: NEG
35434: PUSH
35435: LD_INT 2
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35460: LD_ADDR_VAR 0 12
35464: PUSH
35465: LD_INT 0
35467: PUSH
35468: LD_INT 0
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 0
35477: PUSH
35478: LD_INT 1
35480: NEG
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 1
35488: PUSH
35489: LD_INT 0
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 1
35498: PUSH
35499: LD_INT 1
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 0
35508: PUSH
35509: LD_INT 1
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 1
35518: NEG
35519: PUSH
35520: LD_INT 0
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 1
35529: NEG
35530: PUSH
35531: LD_INT 1
35533: NEG
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 1
35541: PUSH
35542: LD_INT 1
35544: NEG
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 2
35552: PUSH
35553: LD_INT 0
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 2
35562: PUSH
35563: LD_INT 1
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 1
35572: NEG
35573: PUSH
35574: LD_INT 1
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 2
35583: NEG
35584: PUSH
35585: LD_INT 0
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 2
35594: NEG
35595: PUSH
35596: LD_INT 1
35598: NEG
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: LD_INT 2
35606: NEG
35607: PUSH
35608: LD_INT 1
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: LD_INT 3
35617: NEG
35618: PUSH
35619: LD_INT 0
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 3
35628: NEG
35629: PUSH
35630: LD_INT 1
35632: NEG
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35656: LD_ADDR_VAR 0 13
35660: PUSH
35661: LD_INT 0
35663: PUSH
35664: LD_INT 0
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 0
35673: PUSH
35674: LD_INT 1
35676: NEG
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 1
35684: PUSH
35685: LD_INT 0
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: LD_INT 1
35694: PUSH
35695: LD_INT 1
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 0
35704: PUSH
35705: LD_INT 1
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 1
35714: NEG
35715: PUSH
35716: LD_INT 0
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 1
35725: NEG
35726: PUSH
35727: LD_INT 1
35729: NEG
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 1
35737: NEG
35738: PUSH
35739: LD_INT 2
35741: NEG
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 2
35749: PUSH
35750: LD_INT 1
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 2
35759: PUSH
35760: LD_INT 2
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 1
35769: PUSH
35770: LD_INT 2
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 2
35779: NEG
35780: PUSH
35781: LD_INT 1
35783: NEG
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 2
35791: NEG
35792: PUSH
35793: LD_INT 2
35795: NEG
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 2
35803: NEG
35804: PUSH
35805: LD_INT 3
35807: NEG
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 3
35815: NEG
35816: PUSH
35817: LD_INT 2
35819: NEG
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 3
35827: NEG
35828: PUSH
35829: LD_INT 3
35831: NEG
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35855: LD_ADDR_VAR 0 14
35859: PUSH
35860: LD_INT 0
35862: PUSH
35863: LD_INT 0
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 0
35872: PUSH
35873: LD_INT 1
35875: NEG
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 1
35883: PUSH
35884: LD_INT 0
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 1
35893: PUSH
35894: LD_INT 1
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: LD_INT 0
35903: PUSH
35904: LD_INT 1
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: LD_INT 1
35913: NEG
35914: PUSH
35915: LD_INT 0
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: PUSH
35922: LD_INT 1
35924: NEG
35925: PUSH
35926: LD_INT 1
35928: NEG
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 1
35936: NEG
35937: PUSH
35938: LD_INT 2
35940: NEG
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 0
35948: PUSH
35949: LD_INT 2
35951: NEG
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 1
35959: PUSH
35960: LD_INT 1
35962: NEG
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 1
35970: PUSH
35971: LD_INT 2
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 0
35980: PUSH
35981: LD_INT 2
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 1
35990: NEG
35991: PUSH
35992: LD_INT 1
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 1
36001: NEG
36002: PUSH
36003: LD_INT 3
36005: NEG
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 0
36013: PUSH
36014: LD_INT 3
36016: NEG
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 1
36024: PUSH
36025: LD_INT 2
36027: NEG
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36051: LD_ADDR_VAR 0 15
36055: PUSH
36056: LD_INT 0
36058: PUSH
36059: LD_INT 0
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 0
36068: PUSH
36069: LD_INT 1
36071: NEG
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: PUSH
36077: LD_INT 1
36079: PUSH
36080: LD_INT 0
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 1
36089: PUSH
36090: LD_INT 1
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 0
36099: PUSH
36100: LD_INT 1
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 1
36109: NEG
36110: PUSH
36111: LD_INT 0
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 1
36120: NEG
36121: PUSH
36122: LD_INT 1
36124: NEG
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 1
36132: PUSH
36133: LD_INT 1
36135: NEG
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 2
36143: PUSH
36144: LD_INT 0
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 2
36153: PUSH
36154: LD_INT 1
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: LD_INT 1
36163: NEG
36164: PUSH
36165: LD_INT 1
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 2
36174: NEG
36175: PUSH
36176: LD_INT 0
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 2
36185: NEG
36186: PUSH
36187: LD_INT 1
36189: NEG
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 2
36197: PUSH
36198: LD_INT 1
36200: NEG
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 3
36208: PUSH
36209: LD_INT 0
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 3
36218: PUSH
36219: LD_INT 1
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36244: LD_ADDR_VAR 0 16
36248: PUSH
36249: LD_INT 0
36251: PUSH
36252: LD_INT 0
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PUSH
36259: LD_INT 0
36261: PUSH
36262: LD_INT 1
36264: NEG
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 1
36272: PUSH
36273: LD_INT 0
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 1
36282: PUSH
36283: LD_INT 1
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 0
36292: PUSH
36293: LD_INT 1
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 1
36302: NEG
36303: PUSH
36304: LD_INT 0
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 1
36313: NEG
36314: PUSH
36315: LD_INT 1
36317: NEG
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 1
36325: NEG
36326: PUSH
36327: LD_INT 2
36329: NEG
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 2
36337: PUSH
36338: LD_INT 1
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 2
36347: PUSH
36348: LD_INT 2
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 1
36357: PUSH
36358: LD_INT 2
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 2
36367: NEG
36368: PUSH
36369: LD_INT 1
36371: NEG
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 2
36379: NEG
36380: PUSH
36381: LD_INT 2
36383: NEG
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 3
36391: PUSH
36392: LD_INT 2
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 3
36401: PUSH
36402: LD_INT 3
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 2
36411: PUSH
36412: LD_INT 3
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36437: LD_ADDR_VAR 0 17
36441: PUSH
36442: LD_INT 0
36444: PUSH
36445: LD_INT 0
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 0
36454: PUSH
36455: LD_INT 1
36457: NEG
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 1
36465: PUSH
36466: LD_INT 0
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 1
36475: PUSH
36476: LD_INT 1
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 0
36485: PUSH
36486: LD_INT 1
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 1
36495: NEG
36496: PUSH
36497: LD_INT 0
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 1
36506: NEG
36507: PUSH
36508: LD_INT 1
36510: NEG
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 1
36518: NEG
36519: PUSH
36520: LD_INT 2
36522: NEG
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 0
36530: PUSH
36531: LD_INT 2
36533: NEG
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 1
36541: PUSH
36542: LD_INT 1
36544: NEG
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 2
36552: PUSH
36553: LD_INT 0
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 2
36562: PUSH
36563: LD_INT 1
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 2
36572: PUSH
36573: LD_INT 2
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 1
36582: PUSH
36583: LD_INT 2
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: LD_INT 0
36592: PUSH
36593: LD_INT 2
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 1
36602: NEG
36603: PUSH
36604: LD_INT 1
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 2
36613: NEG
36614: PUSH
36615: LD_INT 0
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 2
36624: NEG
36625: PUSH
36626: LD_INT 1
36628: NEG
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 2
36636: NEG
36637: PUSH
36638: LD_INT 2
36640: NEG
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36667: LD_ADDR_VAR 0 18
36671: PUSH
36672: LD_INT 0
36674: PUSH
36675: LD_INT 0
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 0
36684: PUSH
36685: LD_INT 1
36687: NEG
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 1
36695: PUSH
36696: LD_INT 0
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 1
36705: PUSH
36706: LD_INT 1
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 0
36715: PUSH
36716: LD_INT 1
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 1
36725: NEG
36726: PUSH
36727: LD_INT 0
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 1
36736: NEG
36737: PUSH
36738: LD_INT 1
36740: NEG
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 1
36748: NEG
36749: PUSH
36750: LD_INT 2
36752: NEG
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 0
36760: PUSH
36761: LD_INT 2
36763: NEG
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 1
36771: PUSH
36772: LD_INT 1
36774: NEG
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 2
36782: PUSH
36783: LD_INT 0
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 2
36792: PUSH
36793: LD_INT 1
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 2
36802: PUSH
36803: LD_INT 2
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PUSH
36810: LD_INT 1
36812: PUSH
36813: LD_INT 2
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: LD_INT 0
36822: PUSH
36823: LD_INT 2
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 1
36832: NEG
36833: PUSH
36834: LD_INT 1
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 2
36843: NEG
36844: PUSH
36845: LD_INT 0
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 2
36854: NEG
36855: PUSH
36856: LD_INT 1
36858: NEG
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 2
36866: NEG
36867: PUSH
36868: LD_INT 2
36870: NEG
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36897: LD_ADDR_VAR 0 19
36901: PUSH
36902: LD_INT 0
36904: PUSH
36905: LD_INT 0
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 0
36914: PUSH
36915: LD_INT 1
36917: NEG
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 1
36925: PUSH
36926: LD_INT 0
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 1
36935: PUSH
36936: LD_INT 1
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 0
36945: PUSH
36946: LD_INT 1
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 1
36955: NEG
36956: PUSH
36957: LD_INT 0
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 1
36966: NEG
36967: PUSH
36968: LD_INT 1
36970: NEG
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 1
36978: NEG
36979: PUSH
36980: LD_INT 2
36982: NEG
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 0
36990: PUSH
36991: LD_INT 2
36993: NEG
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 1
37001: PUSH
37002: LD_INT 1
37004: NEG
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 2
37012: PUSH
37013: LD_INT 0
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 2
37022: PUSH
37023: LD_INT 1
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 2
37032: PUSH
37033: LD_INT 2
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 1
37042: PUSH
37043: LD_INT 2
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 0
37052: PUSH
37053: LD_INT 2
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 1
37062: NEG
37063: PUSH
37064: LD_INT 1
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 2
37073: NEG
37074: PUSH
37075: LD_INT 0
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 2
37084: NEG
37085: PUSH
37086: LD_INT 1
37088: NEG
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 2
37096: NEG
37097: PUSH
37098: LD_INT 2
37100: NEG
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37127: LD_ADDR_VAR 0 20
37131: PUSH
37132: LD_INT 0
37134: PUSH
37135: LD_INT 0
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 0
37144: PUSH
37145: LD_INT 1
37147: NEG
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 1
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 1
37165: PUSH
37166: LD_INT 1
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 0
37175: PUSH
37176: LD_INT 1
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 1
37185: NEG
37186: PUSH
37187: LD_INT 0
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 1
37196: NEG
37197: PUSH
37198: LD_INT 1
37200: NEG
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 1
37208: NEG
37209: PUSH
37210: LD_INT 2
37212: NEG
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 0
37220: PUSH
37221: LD_INT 2
37223: NEG
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 1
37231: PUSH
37232: LD_INT 1
37234: NEG
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 2
37242: PUSH
37243: LD_INT 0
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 2
37252: PUSH
37253: LD_INT 1
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 2
37262: PUSH
37263: LD_INT 2
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 1
37272: PUSH
37273: LD_INT 2
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 0
37282: PUSH
37283: LD_INT 2
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 1
37292: NEG
37293: PUSH
37294: LD_INT 1
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 2
37303: NEG
37304: PUSH
37305: LD_INT 0
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 2
37314: NEG
37315: PUSH
37316: LD_INT 1
37318: NEG
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 2
37326: NEG
37327: PUSH
37328: LD_INT 2
37330: NEG
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37357: LD_ADDR_VAR 0 21
37361: PUSH
37362: LD_INT 0
37364: PUSH
37365: LD_INT 0
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 0
37374: PUSH
37375: LD_INT 1
37377: NEG
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 1
37385: PUSH
37386: LD_INT 0
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 1
37395: PUSH
37396: LD_INT 1
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 0
37405: PUSH
37406: LD_INT 1
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 1
37415: NEG
37416: PUSH
37417: LD_INT 0
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 1
37426: NEG
37427: PUSH
37428: LD_INT 1
37430: NEG
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 1
37438: NEG
37439: PUSH
37440: LD_INT 2
37442: NEG
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 0
37450: PUSH
37451: LD_INT 2
37453: NEG
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 1
37461: PUSH
37462: LD_INT 1
37464: NEG
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 2
37472: PUSH
37473: LD_INT 0
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 2
37482: PUSH
37483: LD_INT 1
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 2
37492: PUSH
37493: LD_INT 2
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 1
37502: PUSH
37503: LD_INT 2
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 0
37512: PUSH
37513: LD_INT 2
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 1
37522: NEG
37523: PUSH
37524: LD_INT 1
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 2
37533: NEG
37534: PUSH
37535: LD_INT 0
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 2
37544: NEG
37545: PUSH
37546: LD_INT 1
37548: NEG
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 2
37556: NEG
37557: PUSH
37558: LD_INT 2
37560: NEG
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37587: LD_ADDR_VAR 0 22
37591: PUSH
37592: LD_INT 0
37594: PUSH
37595: LD_INT 0
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 0
37604: PUSH
37605: LD_INT 1
37607: NEG
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 1
37615: PUSH
37616: LD_INT 0
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 1
37625: PUSH
37626: LD_INT 1
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 0
37635: PUSH
37636: LD_INT 1
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 1
37645: NEG
37646: PUSH
37647: LD_INT 0
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 1
37656: NEG
37657: PUSH
37658: LD_INT 1
37660: NEG
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 1
37668: NEG
37669: PUSH
37670: LD_INT 2
37672: NEG
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 0
37680: PUSH
37681: LD_INT 2
37683: NEG
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 1
37691: PUSH
37692: LD_INT 1
37694: NEG
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 2
37702: PUSH
37703: LD_INT 0
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 2
37712: PUSH
37713: LD_INT 1
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 2
37722: PUSH
37723: LD_INT 2
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 1
37732: PUSH
37733: LD_INT 2
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 0
37742: PUSH
37743: LD_INT 2
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 1
37752: NEG
37753: PUSH
37754: LD_INT 1
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 2
37763: NEG
37764: PUSH
37765: LD_INT 0
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 2
37774: NEG
37775: PUSH
37776: LD_INT 1
37778: NEG
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 2
37786: NEG
37787: PUSH
37788: LD_INT 2
37790: NEG
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37817: LD_ADDR_VAR 0 23
37821: PUSH
37822: LD_INT 0
37824: PUSH
37825: LD_INT 0
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 0
37834: PUSH
37835: LD_INT 1
37837: NEG
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 1
37845: PUSH
37846: LD_INT 0
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 1
37855: PUSH
37856: LD_INT 1
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 0
37865: PUSH
37866: LD_INT 1
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 1
37875: NEG
37876: PUSH
37877: LD_INT 0
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 1
37886: NEG
37887: PUSH
37888: LD_INT 1
37890: NEG
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: LD_INT 1
37898: NEG
37899: PUSH
37900: LD_INT 2
37902: NEG
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: LD_INT 0
37910: PUSH
37911: LD_INT 2
37913: NEG
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 1
37921: PUSH
37922: LD_INT 1
37924: NEG
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 2
37932: PUSH
37933: LD_INT 0
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 2
37942: PUSH
37943: LD_INT 1
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 2
37952: PUSH
37953: LD_INT 2
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 1
37962: PUSH
37963: LD_INT 2
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 0
37972: PUSH
37973: LD_INT 2
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 1
37982: NEG
37983: PUSH
37984: LD_INT 1
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 2
37993: NEG
37994: PUSH
37995: LD_INT 0
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 2
38004: NEG
38005: PUSH
38006: LD_INT 1
38008: NEG
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 2
38016: NEG
38017: PUSH
38018: LD_INT 2
38020: NEG
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 2
38028: NEG
38029: PUSH
38030: LD_INT 3
38032: NEG
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 1
38040: NEG
38041: PUSH
38042: LD_INT 3
38044: NEG
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 1
38052: PUSH
38053: LD_INT 2
38055: NEG
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 2
38063: PUSH
38064: LD_INT 1
38066: NEG
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38097: LD_ADDR_VAR 0 24
38101: PUSH
38102: LD_INT 0
38104: PUSH
38105: LD_INT 0
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 0
38114: PUSH
38115: LD_INT 1
38117: NEG
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 1
38125: PUSH
38126: LD_INT 0
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 1
38135: PUSH
38136: LD_INT 1
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 0
38145: PUSH
38146: LD_INT 1
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 1
38155: NEG
38156: PUSH
38157: LD_INT 0
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 1
38166: NEG
38167: PUSH
38168: LD_INT 1
38170: NEG
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 1
38178: NEG
38179: PUSH
38180: LD_INT 2
38182: NEG
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 0
38190: PUSH
38191: LD_INT 2
38193: NEG
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 1
38201: PUSH
38202: LD_INT 1
38204: NEG
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 2
38212: PUSH
38213: LD_INT 0
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 2
38222: PUSH
38223: LD_INT 1
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 2
38232: PUSH
38233: LD_INT 2
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 1
38242: PUSH
38243: LD_INT 2
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 0
38252: PUSH
38253: LD_INT 2
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 1
38262: NEG
38263: PUSH
38264: LD_INT 1
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 2
38273: NEG
38274: PUSH
38275: LD_INT 0
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 2
38284: NEG
38285: PUSH
38286: LD_INT 1
38288: NEG
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 2
38296: NEG
38297: PUSH
38298: LD_INT 2
38300: NEG
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 1
38308: PUSH
38309: LD_INT 2
38311: NEG
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 2
38319: PUSH
38320: LD_INT 1
38322: NEG
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 3
38330: PUSH
38331: LD_INT 1
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 3
38340: PUSH
38341: LD_INT 2
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: LIST
38352: LIST
38353: LIST
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38373: LD_ADDR_VAR 0 25
38377: PUSH
38378: LD_INT 0
38380: PUSH
38381: LD_INT 0
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 0
38390: PUSH
38391: LD_INT 1
38393: NEG
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 1
38401: PUSH
38402: LD_INT 0
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 1
38411: PUSH
38412: LD_INT 1
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 0
38421: PUSH
38422: LD_INT 1
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 1
38431: NEG
38432: PUSH
38433: LD_INT 0
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 1
38442: NEG
38443: PUSH
38444: LD_INT 1
38446: NEG
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 1
38454: NEG
38455: PUSH
38456: LD_INT 2
38458: NEG
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 0
38466: PUSH
38467: LD_INT 2
38469: NEG
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 1
38477: PUSH
38478: LD_INT 1
38480: NEG
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 2
38488: PUSH
38489: LD_INT 0
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 2
38498: PUSH
38499: LD_INT 1
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 2
38508: PUSH
38509: LD_INT 2
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 1
38518: PUSH
38519: LD_INT 2
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 0
38528: PUSH
38529: LD_INT 2
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 1
38538: NEG
38539: PUSH
38540: LD_INT 1
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 2
38549: NEG
38550: PUSH
38551: LD_INT 0
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 2
38560: NEG
38561: PUSH
38562: LD_INT 1
38564: NEG
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 2
38572: NEG
38573: PUSH
38574: LD_INT 2
38576: NEG
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 3
38584: PUSH
38585: LD_INT 1
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 3
38594: PUSH
38595: LD_INT 2
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 2
38604: PUSH
38605: LD_INT 3
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 1
38614: PUSH
38615: LD_INT 3
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38647: LD_ADDR_VAR 0 26
38651: PUSH
38652: LD_INT 0
38654: PUSH
38655: LD_INT 0
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 0
38664: PUSH
38665: LD_INT 1
38667: NEG
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 1
38675: PUSH
38676: LD_INT 0
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 1
38685: PUSH
38686: LD_INT 1
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 0
38695: PUSH
38696: LD_INT 1
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 1
38705: NEG
38706: PUSH
38707: LD_INT 0
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 1
38716: NEG
38717: PUSH
38718: LD_INT 1
38720: NEG
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 1
38728: NEG
38729: PUSH
38730: LD_INT 2
38732: NEG
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 0
38740: PUSH
38741: LD_INT 2
38743: NEG
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 1
38751: PUSH
38752: LD_INT 1
38754: NEG
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 2
38762: PUSH
38763: LD_INT 0
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 2
38772: PUSH
38773: LD_INT 1
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 2
38782: PUSH
38783: LD_INT 2
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 1
38792: PUSH
38793: LD_INT 2
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 0
38802: PUSH
38803: LD_INT 2
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 1
38812: NEG
38813: PUSH
38814: LD_INT 1
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 2
38823: NEG
38824: PUSH
38825: LD_INT 0
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 2
38834: NEG
38835: PUSH
38836: LD_INT 1
38838: NEG
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 2
38846: NEG
38847: PUSH
38848: LD_INT 2
38850: NEG
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 2
38858: PUSH
38859: LD_INT 3
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 1
38868: PUSH
38869: LD_INT 3
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 1
38878: NEG
38879: PUSH
38880: LD_INT 2
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 2
38889: NEG
38890: PUSH
38891: LD_INT 1
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38923: LD_ADDR_VAR 0 27
38927: PUSH
38928: LD_INT 0
38930: PUSH
38931: LD_INT 0
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 0
38940: PUSH
38941: LD_INT 1
38943: NEG
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 1
38951: PUSH
38952: LD_INT 0
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 1
38961: PUSH
38962: LD_INT 1
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 0
38971: PUSH
38972: LD_INT 1
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 1
38981: NEG
38982: PUSH
38983: LD_INT 0
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 1
38992: NEG
38993: PUSH
38994: LD_INT 1
38996: NEG
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 1
39004: NEG
39005: PUSH
39006: LD_INT 2
39008: NEG
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 0
39016: PUSH
39017: LD_INT 2
39019: NEG
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: LD_INT 1
39027: PUSH
39028: LD_INT 1
39030: NEG
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 2
39038: PUSH
39039: LD_INT 0
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 2
39048: PUSH
39049: LD_INT 1
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 2
39058: PUSH
39059: LD_INT 2
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 1
39068: PUSH
39069: LD_INT 2
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 0
39078: PUSH
39079: LD_INT 2
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 1
39088: NEG
39089: PUSH
39090: LD_INT 1
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 2
39099: NEG
39100: PUSH
39101: LD_INT 0
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 2
39110: NEG
39111: PUSH
39112: LD_INT 1
39114: NEG
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 2
39122: NEG
39123: PUSH
39124: LD_INT 2
39126: NEG
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 1
39134: NEG
39135: PUSH
39136: LD_INT 2
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 2
39145: NEG
39146: PUSH
39147: LD_INT 1
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 3
39156: NEG
39157: PUSH
39158: LD_INT 1
39160: NEG
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 3
39168: NEG
39169: PUSH
39170: LD_INT 2
39172: NEG
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39203: LD_ADDR_VAR 0 28
39207: PUSH
39208: LD_INT 0
39210: PUSH
39211: LD_INT 0
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 0
39220: PUSH
39221: LD_INT 1
39223: NEG
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 1
39231: PUSH
39232: LD_INT 0
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 1
39241: PUSH
39242: LD_INT 1
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 0
39251: PUSH
39252: LD_INT 1
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 1
39261: NEG
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 1
39272: NEG
39273: PUSH
39274: LD_INT 1
39276: NEG
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 1
39284: NEG
39285: PUSH
39286: LD_INT 2
39288: NEG
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 0
39296: PUSH
39297: LD_INT 2
39299: NEG
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 1
39307: PUSH
39308: LD_INT 1
39310: NEG
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 2
39318: PUSH
39319: LD_INT 0
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 2
39328: PUSH
39329: LD_INT 1
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 2
39338: PUSH
39339: LD_INT 2
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 1
39348: PUSH
39349: LD_INT 2
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 0
39358: PUSH
39359: LD_INT 2
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 1
39368: NEG
39369: PUSH
39370: LD_INT 1
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 2
39379: NEG
39380: PUSH
39381: LD_INT 0
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 2
39390: NEG
39391: PUSH
39392: LD_INT 1
39394: NEG
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 2
39402: NEG
39403: PUSH
39404: LD_INT 2
39406: NEG
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 2
39414: NEG
39415: PUSH
39416: LD_INT 3
39418: NEG
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 1
39426: NEG
39427: PUSH
39428: LD_INT 3
39430: NEG
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 3
39438: NEG
39439: PUSH
39440: LD_INT 1
39442: NEG
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 3
39450: NEG
39451: PUSH
39452: LD_INT 2
39454: NEG
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39485: LD_ADDR_VAR 0 29
39489: PUSH
39490: LD_INT 0
39492: PUSH
39493: LD_INT 0
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 0
39502: PUSH
39503: LD_INT 1
39505: NEG
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 1
39513: PUSH
39514: LD_INT 0
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 1
39523: PUSH
39524: LD_INT 1
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 0
39533: PUSH
39534: LD_INT 1
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 1
39543: NEG
39544: PUSH
39545: LD_INT 0
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 1
39554: NEG
39555: PUSH
39556: LD_INT 1
39558: NEG
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 1
39566: NEG
39567: PUSH
39568: LD_INT 2
39570: NEG
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 0
39578: PUSH
39579: LD_INT 2
39581: NEG
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 1
39589: PUSH
39590: LD_INT 1
39592: NEG
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 2
39600: PUSH
39601: LD_INT 0
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 2
39610: PUSH
39611: LD_INT 1
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 1
39620: PUSH
39621: LD_INT 2
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 0
39630: PUSH
39631: LD_INT 2
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 1
39640: NEG
39641: PUSH
39642: LD_INT 1
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 2
39651: NEG
39652: PUSH
39653: LD_INT 1
39655: NEG
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 2
39663: NEG
39664: PUSH
39665: LD_INT 2
39667: NEG
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 2
39675: NEG
39676: PUSH
39677: LD_INT 3
39679: NEG
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 2
39687: PUSH
39688: LD_INT 1
39690: NEG
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 3
39698: PUSH
39699: LD_INT 1
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 1
39708: PUSH
39709: LD_INT 3
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 1
39718: NEG
39719: PUSH
39720: LD_INT 2
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 3
39729: NEG
39730: PUSH
39731: LD_INT 2
39733: NEG
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39764: LD_ADDR_VAR 0 30
39768: PUSH
39769: LD_INT 0
39771: PUSH
39772: LD_INT 0
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 0
39781: PUSH
39782: LD_INT 1
39784: NEG
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 1
39792: PUSH
39793: LD_INT 0
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 1
39802: PUSH
39803: LD_INT 1
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 0
39812: PUSH
39813: LD_INT 1
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 1
39822: NEG
39823: PUSH
39824: LD_INT 0
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 1
39833: NEG
39834: PUSH
39835: LD_INT 1
39837: NEG
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 1
39845: NEG
39846: PUSH
39847: LD_INT 2
39849: NEG
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 0
39857: PUSH
39858: LD_INT 2
39860: NEG
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 1
39868: PUSH
39869: LD_INT 1
39871: NEG
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 2
39879: PUSH
39880: LD_INT 0
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 2
39889: PUSH
39890: LD_INT 1
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 2
39899: PUSH
39900: LD_INT 2
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 1
39909: PUSH
39910: LD_INT 2
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 1
39919: NEG
39920: PUSH
39921: LD_INT 1
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 2
39930: NEG
39931: PUSH
39932: LD_INT 0
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 2
39941: NEG
39942: PUSH
39943: LD_INT 1
39945: NEG
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 1
39953: NEG
39954: PUSH
39955: LD_INT 3
39957: NEG
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 1
39965: PUSH
39966: LD_INT 2
39968: NEG
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 3
39976: PUSH
39977: LD_INT 2
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 2
39986: PUSH
39987: LD_INT 3
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 2
39996: NEG
39997: PUSH
39998: LD_INT 1
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 3
40007: NEG
40008: PUSH
40009: LD_INT 1
40011: NEG
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40042: LD_ADDR_VAR 0 31
40046: PUSH
40047: LD_INT 0
40049: PUSH
40050: LD_INT 0
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 0
40059: PUSH
40060: LD_INT 1
40062: NEG
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 1
40070: PUSH
40071: LD_INT 0
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 1
40080: PUSH
40081: LD_INT 1
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 0
40090: PUSH
40091: LD_INT 1
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 1
40100: NEG
40101: PUSH
40102: LD_INT 0
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 1
40111: NEG
40112: PUSH
40113: LD_INT 1
40115: NEG
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 1
40123: NEG
40124: PUSH
40125: LD_INT 2
40127: NEG
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 1
40135: PUSH
40136: LD_INT 1
40138: NEG
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 2
40146: PUSH
40147: LD_INT 0
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 2
40156: PUSH
40157: LD_INT 1
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 2
40166: PUSH
40167: LD_INT 2
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 1
40176: PUSH
40177: LD_INT 2
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 0
40186: PUSH
40187: LD_INT 2
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 1
40196: NEG
40197: PUSH
40198: LD_INT 1
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 2
40207: NEG
40208: PUSH
40209: LD_INT 1
40211: NEG
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 2
40219: NEG
40220: PUSH
40221: LD_INT 2
40223: NEG
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 2
40231: NEG
40232: PUSH
40233: LD_INT 3
40235: NEG
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 2
40243: PUSH
40244: LD_INT 1
40246: NEG
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 3
40254: PUSH
40255: LD_INT 1
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 1
40264: PUSH
40265: LD_INT 3
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 1
40274: NEG
40275: PUSH
40276: LD_INT 2
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 3
40285: NEG
40286: PUSH
40287: LD_INT 2
40289: NEG
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40320: LD_ADDR_VAR 0 32
40324: PUSH
40325: LD_INT 0
40327: PUSH
40328: LD_INT 0
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 0
40337: PUSH
40338: LD_INT 1
40340: NEG
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 1
40348: PUSH
40349: LD_INT 0
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 1
40358: PUSH
40359: LD_INT 1
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 0
40368: PUSH
40369: LD_INT 1
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 1
40378: NEG
40379: PUSH
40380: LD_INT 0
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 1
40389: NEG
40390: PUSH
40391: LD_INT 1
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 1
40401: NEG
40402: PUSH
40403: LD_INT 2
40405: NEG
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 0
40413: PUSH
40414: LD_INT 2
40416: NEG
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 1
40424: PUSH
40425: LD_INT 1
40427: NEG
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 2
40435: PUSH
40436: LD_INT 1
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 2
40445: PUSH
40446: LD_INT 2
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 1
40455: PUSH
40456: LD_INT 2
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 0
40465: PUSH
40466: LD_INT 2
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 1
40475: NEG
40476: PUSH
40477: LD_INT 1
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 2
40486: NEG
40487: PUSH
40488: LD_INT 0
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 2
40497: NEG
40498: PUSH
40499: LD_INT 1
40501: NEG
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: LD_INT 3
40513: NEG
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 1
40521: PUSH
40522: LD_INT 2
40524: NEG
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 3
40532: PUSH
40533: LD_INT 2
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 2
40542: PUSH
40543: LD_INT 3
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 2
40552: NEG
40553: PUSH
40554: LD_INT 1
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 3
40563: NEG
40564: PUSH
40565: LD_INT 1
40567: NEG
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40598: LD_ADDR_VAR 0 33
40602: PUSH
40603: LD_INT 0
40605: PUSH
40606: LD_INT 0
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 0
40615: PUSH
40616: LD_INT 1
40618: NEG
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 1
40626: PUSH
40627: LD_INT 0
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 1
40636: PUSH
40637: LD_INT 1
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 0
40646: PUSH
40647: LD_INT 1
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 1
40656: NEG
40657: PUSH
40658: LD_INT 0
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 1
40667: NEG
40668: PUSH
40669: LD_INT 1
40671: NEG
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 1
40679: NEG
40680: PUSH
40681: LD_INT 2
40683: NEG
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 1
40691: PUSH
40692: LD_INT 1
40694: NEG
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 2
40702: PUSH
40703: LD_INT 0
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 2
40712: PUSH
40713: LD_INT 1
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 1
40722: PUSH
40723: LD_INT 2
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 0
40732: PUSH
40733: LD_INT 2
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 1
40742: NEG
40743: PUSH
40744: LD_INT 1
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 2
40753: NEG
40754: PUSH
40755: LD_INT 0
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 2
40764: NEG
40765: PUSH
40766: LD_INT 1
40768: NEG
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 2
40776: NEG
40777: PUSH
40778: LD_INT 2
40780: NEG
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 2
40788: NEG
40789: PUSH
40790: LD_INT 3
40792: NEG
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 2
40800: PUSH
40801: LD_INT 1
40803: NEG
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 3
40811: PUSH
40812: LD_INT 1
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 1
40821: PUSH
40822: LD_INT 3
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 1
40831: NEG
40832: PUSH
40833: LD_INT 2
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 3
40842: NEG
40843: PUSH
40844: LD_INT 2
40846: NEG
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40877: LD_ADDR_VAR 0 34
40881: PUSH
40882: LD_INT 0
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: LD_INT 1
40897: NEG
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 1
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 1
40915: PUSH
40916: LD_INT 1
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 0
40925: PUSH
40926: LD_INT 1
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 1
40935: NEG
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 1
40946: NEG
40947: PUSH
40948: LD_INT 1
40950: NEG
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 1
40958: NEG
40959: PUSH
40960: LD_INT 2
40962: NEG
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 0
40970: PUSH
40971: LD_INT 2
40973: NEG
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: LD_INT 1
40984: NEG
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 2
40992: PUSH
40993: LD_INT 1
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 2
41002: PUSH
41003: LD_INT 2
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 1
41012: PUSH
41013: LD_INT 2
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 1
41022: NEG
41023: PUSH
41024: LD_INT 1
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 2
41033: NEG
41034: PUSH
41035: LD_INT 0
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 2
41044: NEG
41045: PUSH
41046: LD_INT 1
41048: NEG
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 2
41056: NEG
41057: PUSH
41058: LD_INT 2
41060: NEG
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 1
41068: NEG
41069: PUSH
41070: LD_INT 3
41072: NEG
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 1
41080: PUSH
41081: LD_INT 2
41083: NEG
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 3
41091: PUSH
41092: LD_INT 2
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 2
41101: PUSH
41102: LD_INT 3
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 2
41111: NEG
41112: PUSH
41113: LD_INT 1
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 3
41122: NEG
41123: PUSH
41124: LD_INT 1
41126: NEG
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41157: LD_ADDR_VAR 0 35
41161: PUSH
41162: LD_INT 0
41164: PUSH
41165: LD_INT 0
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 0
41174: PUSH
41175: LD_INT 1
41177: NEG
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 1
41185: PUSH
41186: LD_INT 0
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 1
41195: PUSH
41196: LD_INT 1
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 0
41205: PUSH
41206: LD_INT 1
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 1
41215: NEG
41216: PUSH
41217: LD_INT 0
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 1
41226: NEG
41227: PUSH
41228: LD_INT 1
41230: NEG
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 2
41238: PUSH
41239: LD_INT 1
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 2
41248: NEG
41249: PUSH
41250: LD_INT 1
41252: NEG
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41269: LD_ADDR_VAR 0 36
41273: PUSH
41274: LD_INT 0
41276: PUSH
41277: LD_INT 0
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 0
41286: PUSH
41287: LD_INT 1
41289: NEG
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 1
41297: PUSH
41298: LD_INT 0
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 1
41307: PUSH
41308: LD_INT 1
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 0
41317: PUSH
41318: LD_INT 1
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 1
41327: NEG
41328: PUSH
41329: LD_INT 0
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 1
41338: NEG
41339: PUSH
41340: LD_INT 1
41342: NEG
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 1
41350: NEG
41351: PUSH
41352: LD_INT 2
41354: NEG
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 1
41362: PUSH
41363: LD_INT 2
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41381: LD_ADDR_VAR 0 37
41385: PUSH
41386: LD_INT 0
41388: PUSH
41389: LD_INT 0
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: LD_INT 1
41401: NEG
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 1
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 1
41419: PUSH
41420: LD_INT 1
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 0
41429: PUSH
41430: LD_INT 1
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 1
41439: NEG
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 1
41450: NEG
41451: PUSH
41452: LD_INT 1
41454: NEG
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 1
41462: PUSH
41463: LD_INT 1
41465: NEG
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 1
41473: NEG
41474: PUSH
41475: LD_INT 1
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41493: LD_ADDR_VAR 0 38
41497: PUSH
41498: LD_INT 0
41500: PUSH
41501: LD_INT 0
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: LD_INT 1
41513: NEG
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 1
41521: PUSH
41522: LD_INT 0
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 1
41531: PUSH
41532: LD_INT 1
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 1
41551: NEG
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 1
41562: NEG
41563: PUSH
41564: LD_INT 1
41566: NEG
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 2
41574: PUSH
41575: LD_INT 1
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 2
41584: NEG
41585: PUSH
41586: LD_INT 1
41588: NEG
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41605: LD_ADDR_VAR 0 39
41609: PUSH
41610: LD_INT 0
41612: PUSH
41613: LD_INT 0
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: LD_INT 1
41625: NEG
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 1
41633: PUSH
41634: LD_INT 0
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 1
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: LD_INT 1
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 1
41663: NEG
41664: PUSH
41665: LD_INT 0
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 1
41674: NEG
41675: PUSH
41676: LD_INT 1
41678: NEG
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 1
41686: NEG
41687: PUSH
41688: LD_INT 2
41690: NEG
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 1
41698: PUSH
41699: LD_INT 2
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41717: LD_ADDR_VAR 0 40
41721: PUSH
41722: LD_INT 0
41724: PUSH
41725: LD_INT 0
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 0
41734: PUSH
41735: LD_INT 1
41737: NEG
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 1
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 1
41755: PUSH
41756: LD_INT 1
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 0
41765: PUSH
41766: LD_INT 1
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 1
41775: NEG
41776: PUSH
41777: LD_INT 0
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: LD_INT 1
41790: NEG
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 1
41798: PUSH
41799: LD_INT 1
41801: NEG
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 1
41809: NEG
41810: PUSH
41811: LD_INT 1
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41829: LD_ADDR_VAR 0 41
41833: PUSH
41834: LD_INT 0
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 0
41846: PUSH
41847: LD_INT 1
41849: NEG
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 1
41857: PUSH
41858: LD_INT 0
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 1
41867: PUSH
41868: LD_INT 1
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 0
41877: PUSH
41878: LD_INT 1
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 1
41887: NEG
41888: PUSH
41889: LD_INT 0
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 1
41898: NEG
41899: PUSH
41900: LD_INT 1
41902: NEG
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 1
41910: NEG
41911: PUSH
41912: LD_INT 2
41914: NEG
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 1
41922: PUSH
41923: LD_INT 1
41925: NEG
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 2
41933: PUSH
41934: LD_INT 0
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 2
41943: PUSH
41944: LD_INT 1
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 2
41953: PUSH
41954: LD_INT 2
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 1
41963: PUSH
41964: LD_INT 2
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 1
41973: NEG
41974: PUSH
41975: LD_INT 1
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 2
41984: NEG
41985: PUSH
41986: LD_INT 0
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 2
41995: NEG
41996: PUSH
41997: LD_INT 1
41999: NEG
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 2
42007: NEG
42008: PUSH
42009: LD_INT 2
42011: NEG
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 2
42019: NEG
42020: PUSH
42021: LD_INT 3
42023: NEG
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 2
42031: PUSH
42032: LD_INT 1
42034: NEG
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 3
42042: PUSH
42043: LD_INT 0
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 3
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 3
42062: PUSH
42063: LD_INT 2
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 3
42072: PUSH
42073: LD_INT 3
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 2
42082: PUSH
42083: LD_INT 3
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 2
42092: NEG
42093: PUSH
42094: LD_INT 1
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 3
42103: NEG
42104: PUSH
42105: LD_INT 0
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 3
42114: NEG
42115: PUSH
42116: LD_INT 1
42118: NEG
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 3
42126: NEG
42127: PUSH
42128: LD_INT 2
42130: NEG
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 3
42138: NEG
42139: PUSH
42140: LD_INT 3
42142: NEG
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42179: LD_ADDR_VAR 0 42
42183: PUSH
42184: LD_INT 0
42186: PUSH
42187: LD_INT 0
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 0
42196: PUSH
42197: LD_INT 1
42199: NEG
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 1
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 1
42217: PUSH
42218: LD_INT 1
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 0
42227: PUSH
42228: LD_INT 1
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 1
42237: NEG
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 1
42248: NEG
42249: PUSH
42250: LD_INT 1
42252: NEG
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 1
42260: NEG
42261: PUSH
42262: LD_INT 2
42264: NEG
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 0
42272: PUSH
42273: LD_INT 2
42275: NEG
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 1
42283: PUSH
42284: LD_INT 1
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 2
42294: PUSH
42295: LD_INT 1
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 2
42304: PUSH
42305: LD_INT 2
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 1
42314: PUSH
42315: LD_INT 2
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 0
42324: PUSH
42325: LD_INT 2
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 1
42334: NEG
42335: PUSH
42336: LD_INT 1
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 2
42345: NEG
42346: PUSH
42347: LD_INT 1
42349: NEG
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 2
42357: NEG
42358: PUSH
42359: LD_INT 2
42361: NEG
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 2
42369: NEG
42370: PUSH
42371: LD_INT 3
42373: NEG
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 1
42381: NEG
42382: PUSH
42383: LD_INT 3
42385: NEG
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 0
42393: PUSH
42394: LD_INT 3
42396: NEG
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 1
42404: PUSH
42405: LD_INT 2
42407: NEG
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 3
42415: PUSH
42416: LD_INT 2
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 3
42425: PUSH
42426: LD_INT 3
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 2
42435: PUSH
42436: LD_INT 3
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 1
42445: PUSH
42446: LD_INT 3
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: LD_INT 3
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 1
42465: NEG
42466: PUSH
42467: LD_INT 2
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 3
42476: NEG
42477: PUSH
42478: LD_INT 2
42480: NEG
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 3
42488: NEG
42489: PUSH
42490: LD_INT 3
42492: NEG
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42529: LD_ADDR_VAR 0 43
42533: PUSH
42534: LD_INT 0
42536: PUSH
42537: LD_INT 0
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 0
42546: PUSH
42547: LD_INT 1
42549: NEG
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 1
42557: PUSH
42558: LD_INT 0
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 1
42567: PUSH
42568: LD_INT 1
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: LD_INT 1
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 1
42587: NEG
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 1
42598: NEG
42599: PUSH
42600: LD_INT 1
42602: NEG
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 1
42610: NEG
42611: PUSH
42612: LD_INT 2
42614: NEG
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: LD_INT 2
42625: NEG
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 1
42633: PUSH
42634: LD_INT 1
42636: NEG
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 2
42644: PUSH
42645: LD_INT 0
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 2
42654: PUSH
42655: LD_INT 1
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 1
42664: PUSH
42665: LD_INT 2
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 0
42674: PUSH
42675: LD_INT 2
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 1
42684: NEG
42685: PUSH
42686: LD_INT 1
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 2
42695: NEG
42696: PUSH
42697: LD_INT 0
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 2
42706: NEG
42707: PUSH
42708: LD_INT 1
42710: NEG
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 1
42718: NEG
42719: PUSH
42720: LD_INT 3
42722: NEG
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 0
42730: PUSH
42731: LD_INT 3
42733: NEG
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 1
42741: PUSH
42742: LD_INT 2
42744: NEG
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 2
42752: PUSH
42753: LD_INT 1
42755: NEG
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 3
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 3
42773: PUSH
42774: LD_INT 1
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 1
42783: PUSH
42784: LD_INT 3
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 0
42793: PUSH
42794: LD_INT 3
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 1
42803: NEG
42804: PUSH
42805: LD_INT 2
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 2
42814: NEG
42815: PUSH
42816: LD_INT 1
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 3
42825: NEG
42826: PUSH
42827: LD_INT 0
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 3
42836: NEG
42837: PUSH
42838: LD_INT 1
42840: NEG
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42877: LD_ADDR_VAR 0 44
42881: PUSH
42882: LD_INT 0
42884: PUSH
42885: LD_INT 0
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: LD_INT 1
42897: NEG
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 1
42905: PUSH
42906: LD_INT 0
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 1
42915: PUSH
42916: LD_INT 1
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 0
42925: PUSH
42926: LD_INT 1
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 1
42935: NEG
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 1
42946: NEG
42947: PUSH
42948: LD_INT 1
42950: NEG
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 1
42958: NEG
42959: PUSH
42960: LD_INT 2
42962: NEG
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 1
42970: PUSH
42971: LD_INT 1
42973: NEG
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 2
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 2
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 2
43001: PUSH
43002: LD_INT 2
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 1
43011: PUSH
43012: LD_INT 2
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 1
43021: NEG
43022: PUSH
43023: LD_INT 1
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 2
43032: NEG
43033: PUSH
43034: LD_INT 0
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 2
43043: NEG
43044: PUSH
43045: LD_INT 1
43047: NEG
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 2
43055: NEG
43056: PUSH
43057: LD_INT 2
43059: NEG
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 2
43067: NEG
43068: PUSH
43069: LD_INT 3
43071: NEG
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 2
43079: PUSH
43080: LD_INT 1
43082: NEG
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 3
43090: PUSH
43091: LD_INT 0
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 3
43100: PUSH
43101: LD_INT 1
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 3
43110: PUSH
43111: LD_INT 2
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 3
43120: PUSH
43121: LD_INT 3
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 2
43130: PUSH
43131: LD_INT 3
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 2
43140: NEG
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 3
43151: NEG
43152: PUSH
43153: LD_INT 0
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 3
43162: NEG
43163: PUSH
43164: LD_INT 1
43166: NEG
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 3
43174: NEG
43175: PUSH
43176: LD_INT 2
43178: NEG
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 3
43186: NEG
43187: PUSH
43188: LD_INT 3
43190: NEG
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43227: LD_ADDR_VAR 0 45
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: LD_INT 0
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 0
43244: PUSH
43245: LD_INT 1
43247: NEG
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: LD_INT 0
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 1
43265: PUSH
43266: LD_INT 1
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 0
43275: PUSH
43276: LD_INT 1
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 1
43285: NEG
43286: PUSH
43287: LD_INT 0
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 1
43296: NEG
43297: PUSH
43298: LD_INT 1
43300: NEG
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 1
43308: NEG
43309: PUSH
43310: LD_INT 2
43312: NEG
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 0
43320: PUSH
43321: LD_INT 2
43323: NEG
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 1
43331: PUSH
43332: LD_INT 1
43334: NEG
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 2
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 2
43352: PUSH
43353: LD_INT 2
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 1
43362: PUSH
43363: LD_INT 2
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 0
43372: PUSH
43373: LD_INT 2
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 1
43382: NEG
43383: PUSH
43384: LD_INT 1
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 2
43393: NEG
43394: PUSH
43395: LD_INT 1
43397: NEG
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 2
43405: NEG
43406: PUSH
43407: LD_INT 2
43409: NEG
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 2
43417: NEG
43418: PUSH
43419: LD_INT 3
43421: NEG
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 1
43429: NEG
43430: PUSH
43431: LD_INT 3
43433: NEG
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 0
43441: PUSH
43442: LD_INT 3
43444: NEG
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 1
43452: PUSH
43453: LD_INT 2
43455: NEG
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 3
43463: PUSH
43464: LD_INT 2
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 3
43473: PUSH
43474: LD_INT 3
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 2
43483: PUSH
43484: LD_INT 3
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 1
43493: PUSH
43494: LD_INT 3
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: LD_INT 3
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: LD_INT 2
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 3
43524: NEG
43525: PUSH
43526: LD_INT 2
43528: NEG
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 3
43536: NEG
43537: PUSH
43538: LD_INT 3
43540: NEG
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43577: LD_ADDR_VAR 0 46
43581: PUSH
43582: LD_INT 0
43584: PUSH
43585: LD_INT 0
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: LD_INT 1
43597: NEG
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 1
43605: PUSH
43606: LD_INT 0
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 1
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 0
43625: PUSH
43626: LD_INT 1
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 1
43635: NEG
43636: PUSH
43637: LD_INT 0
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 1
43646: NEG
43647: PUSH
43648: LD_INT 1
43650: NEG
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 1
43658: NEG
43659: PUSH
43660: LD_INT 2
43662: NEG
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 0
43670: PUSH
43671: LD_INT 2
43673: NEG
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 1
43681: PUSH
43682: LD_INT 1
43684: NEG
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 2
43692: PUSH
43693: LD_INT 0
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 2
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: LD_INT 2
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 0
43722: PUSH
43723: LD_INT 2
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: NEG
43733: PUSH
43734: LD_INT 1
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 2
43743: NEG
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 2
43754: NEG
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 1
43766: NEG
43767: PUSH
43768: LD_INT 3
43770: NEG
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 0
43778: PUSH
43779: LD_INT 3
43781: NEG
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 1
43789: PUSH
43790: LD_INT 2
43792: NEG
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 2
43800: PUSH
43801: LD_INT 1
43803: NEG
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 3
43811: PUSH
43812: LD_INT 0
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 3
43821: PUSH
43822: LD_INT 1
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 1
43831: PUSH
43832: LD_INT 3
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 0
43841: PUSH
43842: LD_INT 3
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 1
43851: NEG
43852: PUSH
43853: LD_INT 2
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 2
43862: NEG
43863: PUSH
43864: LD_INT 1
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 3
43873: NEG
43874: PUSH
43875: LD_INT 0
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 3
43884: NEG
43885: PUSH
43886: LD_INT 1
43888: NEG
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43925: LD_ADDR_VAR 0 47
43929: PUSH
43930: LD_INT 0
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: LD_INT 1
43945: NEG
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 1
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 1
43963: PUSH
43964: LD_INT 1
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 0
43973: PUSH
43974: LD_INT 1
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 1
43983: NEG
43984: PUSH
43985: LD_INT 0
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 1
43994: NEG
43995: PUSH
43996: LD_INT 1
43998: NEG
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: NEG
44007: PUSH
44008: LD_INT 2
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 0
44018: PUSH
44019: LD_INT 2
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 1
44029: PUSH
44030: LD_INT 1
44032: NEG
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 2
44040: NEG
44041: PUSH
44042: LD_INT 1
44044: NEG
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 2
44052: NEG
44053: PUSH
44054: LD_INT 2
44056: NEG
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44076: LD_ADDR_VAR 0 48
44080: PUSH
44081: LD_INT 0
44083: PUSH
44084: LD_INT 0
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 0
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 1
44104: PUSH
44105: LD_INT 0
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 1
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 0
44124: PUSH
44125: LD_INT 1
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 1
44134: NEG
44135: PUSH
44136: LD_INT 0
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 1
44145: NEG
44146: PUSH
44147: LD_INT 1
44149: NEG
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 1
44157: NEG
44158: PUSH
44159: LD_INT 2
44161: NEG
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 0
44169: PUSH
44170: LD_INT 2
44172: NEG
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 1
44180: PUSH
44181: LD_INT 1
44183: NEG
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 2
44191: PUSH
44192: LD_INT 0
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 2
44201: PUSH
44202: LD_INT 1
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44223: LD_ADDR_VAR 0 49
44227: PUSH
44228: LD_INT 0
44230: PUSH
44231: LD_INT 0
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 0
44240: PUSH
44241: LD_INT 1
44243: NEG
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 1
44251: PUSH
44252: LD_INT 0
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 1
44261: PUSH
44262: LD_INT 1
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 0
44271: PUSH
44272: LD_INT 1
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 1
44281: NEG
44282: PUSH
44283: LD_INT 0
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 1
44292: NEG
44293: PUSH
44294: LD_INT 1
44296: NEG
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 1
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 2
44315: PUSH
44316: LD_INT 0
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 2
44325: PUSH
44326: LD_INT 1
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 2
44335: PUSH
44336: LD_INT 2
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: PUSH
44346: LD_INT 2
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44367: LD_ADDR_VAR 0 50
44371: PUSH
44372: LD_INT 0
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 0
44384: PUSH
44385: LD_INT 1
44387: NEG
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 1
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 1
44405: PUSH
44406: LD_INT 1
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: LD_INT 1
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 1
44425: NEG
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 1
44436: NEG
44437: PUSH
44438: LD_INT 1
44440: NEG
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 2
44448: PUSH
44449: LD_INT 1
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 2
44458: PUSH
44459: LD_INT 2
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: LD_INT 2
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 0
44478: PUSH
44479: LD_INT 2
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 1
44488: NEG
44489: PUSH
44490: LD_INT 1
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44511: LD_ADDR_VAR 0 51
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: LD_INT 1
44531: NEG
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 1
44539: PUSH
44540: LD_INT 0
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 1
44549: PUSH
44550: LD_INT 1
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: LD_INT 1
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 1
44569: NEG
44570: PUSH
44571: LD_INT 0
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 1
44580: NEG
44581: PUSH
44582: LD_INT 1
44584: NEG
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 1
44592: PUSH
44593: LD_INT 2
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 0
44602: PUSH
44603: LD_INT 2
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 1
44612: NEG
44613: PUSH
44614: LD_INT 1
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 2
44623: NEG
44624: PUSH
44625: LD_INT 0
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 2
44634: NEG
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44658: LD_ADDR_VAR 0 52
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 1
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 1
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 1
44716: NEG
44717: PUSH
44718: LD_INT 0
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 1
44727: NEG
44728: PUSH
44729: LD_INT 1
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 1
44739: NEG
44740: PUSH
44741: LD_INT 2
44743: NEG
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 1
44751: NEG
44752: PUSH
44753: LD_INT 1
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 2
44762: NEG
44763: PUSH
44764: LD_INT 0
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 2
44773: NEG
44774: PUSH
44775: LD_INT 1
44777: NEG
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 2
44785: NEG
44786: PUSH
44787: LD_INT 2
44789: NEG
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44809: LD_ADDR_VAR 0 53
44813: PUSH
44814: LD_INT 0
44816: PUSH
44817: LD_INT 0
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: LD_INT 1
44829: NEG
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 1
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 1
44847: PUSH
44848: LD_INT 1
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: LD_INT 1
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 1
44878: NEG
44879: PUSH
44880: LD_INT 1
44882: NEG
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 1
44890: NEG
44891: PUSH
44892: LD_INT 2
44894: NEG
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: LD_INT 2
44905: NEG
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 1
44913: PUSH
44914: LD_INT 1
44916: NEG
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 2
44924: PUSH
44925: LD_INT 0
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 2
44934: PUSH
44935: LD_INT 1
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 2
44944: PUSH
44945: LD_INT 2
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 1
44954: PUSH
44955: LD_INT 2
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 0
44964: PUSH
44965: LD_INT 2
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 1
44974: NEG
44975: PUSH
44976: LD_INT 1
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 2
44985: NEG
44986: PUSH
44987: LD_INT 0
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 2
44996: NEG
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 2
45008: NEG
45009: PUSH
45010: LD_INT 2
45012: NEG
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45039: LD_ADDR_VAR 0 54
45043: PUSH
45044: LD_INT 0
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: LD_INT 1
45059: NEG
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 1
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: LD_INT 1
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: LD_INT 1
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 1
45097: NEG
45098: PUSH
45099: LD_INT 0
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 1
45108: NEG
45109: PUSH
45110: LD_INT 1
45112: NEG
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 1
45120: NEG
45121: PUSH
45122: LD_INT 2
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: LD_INT 2
45135: NEG
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 1
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 2
45154: PUSH
45155: LD_INT 0
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 2
45164: PUSH
45165: LD_INT 1
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 2
45174: PUSH
45175: LD_INT 2
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: PUSH
45185: LD_INT 2
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: LD_INT 2
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 2
45215: NEG
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 2
45226: NEG
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 2
45238: NEG
45239: PUSH
45240: LD_INT 2
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45269: LD_ADDR_VAR 0 55
45273: PUSH
45274: LD_INT 0
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 0
45286: PUSH
45287: LD_INT 1
45289: NEG
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 1
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: LD_INT 1
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 0
45317: PUSH
45318: LD_INT 1
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 1
45327: NEG
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 1
45338: NEG
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 1
45350: NEG
45351: PUSH
45352: LD_INT 2
45354: NEG
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: LD_INT 2
45365: NEG
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: LD_INT 1
45376: NEG
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 2
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 2
45394: PUSH
45395: LD_INT 1
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 2
45404: PUSH
45405: LD_INT 2
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 1
45414: PUSH
45415: LD_INT 2
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 0
45424: PUSH
45425: LD_INT 2
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: NEG
45435: PUSH
45436: LD_INT 1
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 2
45445: NEG
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 2
45456: NEG
45457: PUSH
45458: LD_INT 1
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 2
45468: NEG
45469: PUSH
45470: LD_INT 2
45472: NEG
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45499: LD_ADDR_VAR 0 56
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: LD_INT 1
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: LD_INT 1
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 0
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 1
45557: NEG
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: NEG
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 1
45580: NEG
45581: PUSH
45582: LD_INT 2
45584: NEG
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: LD_INT 2
45595: NEG
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: PUSH
45604: LD_INT 1
45606: NEG
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 2
45614: PUSH
45615: LD_INT 0
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 2
45624: PUSH
45625: LD_INT 1
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 2
45634: PUSH
45635: LD_INT 2
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: LD_INT 2
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 0
45654: PUSH
45655: LD_INT 2
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 2
45675: NEG
45676: PUSH
45677: LD_INT 0
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 2
45686: NEG
45687: PUSH
45688: LD_INT 1
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 2
45698: NEG
45699: PUSH
45700: LD_INT 2
45702: NEG
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45729: LD_ADDR_VAR 0 57
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: LD_INT 0
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: LD_INT 1
45749: NEG
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 0
45777: PUSH
45778: LD_INT 1
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 1
45787: NEG
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 1
45798: NEG
45799: PUSH
45800: LD_INT 1
45802: NEG
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 1
45810: NEG
45811: PUSH
45812: LD_INT 2
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: LD_INT 2
45825: NEG
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 1
45833: PUSH
45834: LD_INT 1
45836: NEG
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 2
45844: PUSH
45845: LD_INT 0
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 2
45854: PUSH
45855: LD_INT 1
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 2
45864: PUSH
45865: LD_INT 2
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 1
45874: PUSH
45875: LD_INT 2
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 0
45884: PUSH
45885: LD_INT 2
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: NEG
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 2
45905: NEG
45906: PUSH
45907: LD_INT 0
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 2
45916: NEG
45917: PUSH
45918: LD_INT 1
45920: NEG
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 2
45928: NEG
45929: PUSH
45930: LD_INT 2
45932: NEG
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45959: LD_ADDR_VAR 0 58
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 0
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 1
45987: PUSH
45988: LD_INT 0
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 1
45997: PUSH
45998: LD_INT 1
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 0
46007: PUSH
46008: LD_INT 1
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 1
46017: NEG
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: LD_INT 1
46032: NEG
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 1
46040: NEG
46041: PUSH
46042: LD_INT 2
46044: NEG
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 0
46052: PUSH
46053: LD_INT 2
46055: NEG
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 1
46063: PUSH
46064: LD_INT 1
46066: NEG
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: LD_INT 0
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 2
46084: PUSH
46085: LD_INT 1
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 2
46094: PUSH
46095: LD_INT 2
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 1
46104: PUSH
46105: LD_INT 2
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 0
46114: PUSH
46115: LD_INT 2
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 1
46124: NEG
46125: PUSH
46126: LD_INT 1
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 2
46135: NEG
46136: PUSH
46137: LD_INT 0
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 2
46146: NEG
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 2
46158: NEG
46159: PUSH
46160: LD_INT 2
46162: NEG
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46189: LD_ADDR_VAR 0 59
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 0
46237: PUSH
46238: LD_INT 1
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: NEG
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: NEG
46259: PUSH
46260: LD_INT 1
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46277: LD_ADDR_VAR 0 60
46281: PUSH
46282: LD_INT 0
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 0
46294: PUSH
46295: LD_INT 1
46297: NEG
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 1
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 1
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 0
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: LD_INT 1
46350: NEG
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46365: LD_ADDR_VAR 0 61
46369: PUSH
46370: LD_INT 0
46372: PUSH
46373: LD_INT 0
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 0
46382: PUSH
46383: LD_INT 1
46385: NEG
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 1
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 0
46413: PUSH
46414: LD_INT 1
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: NEG
46424: PUSH
46425: LD_INT 0
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 1
46434: NEG
46435: PUSH
46436: LD_INT 1
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46453: LD_ADDR_VAR 0 62
46457: PUSH
46458: LD_INT 0
46460: PUSH
46461: LD_INT 0
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 0
46470: PUSH
46471: LD_INT 1
46473: NEG
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 1
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: PUSH
46492: LD_INT 1
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 0
46501: PUSH
46502: LD_INT 1
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 1
46522: NEG
46523: PUSH
46524: LD_INT 1
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46541: LD_ADDR_VAR 0 63
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 0
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: LD_INT 0
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 1
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: LD_INT 1
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: NEG
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 1
46610: NEG
46611: PUSH
46612: LD_INT 1
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46629: LD_ADDR_VAR 0 64
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: LD_INT 0
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: LD_INT 1
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 1
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 1
46667: PUSH
46668: LD_INT 1
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 0
46677: PUSH
46678: LD_INT 1
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: NEG
46688: PUSH
46689: LD_INT 0
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 1
46698: NEG
46699: PUSH
46700: LD_INT 1
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: ST_TO_ADDR
// end ; 1 :
46717: GO 52614
46719: LD_INT 1
46721: DOUBLE
46722: EQUAL
46723: IFTRUE 46727
46725: GO 49350
46727: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46728: LD_ADDR_VAR 0 11
46732: PUSH
46733: LD_INT 1
46735: NEG
46736: PUSH
46737: LD_INT 3
46739: NEG
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: LD_INT 3
46750: NEG
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: LD_INT 2
46761: NEG
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: LIST
46771: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46772: LD_ADDR_VAR 0 12
46776: PUSH
46777: LD_INT 2
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 3
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 3
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: LIST
46812: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46813: LD_ADDR_VAR 0 13
46817: PUSH
46818: LD_INT 3
46820: PUSH
46821: LD_INT 2
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 3
46830: PUSH
46831: LD_INT 3
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 2
46840: PUSH
46841: LD_INT 3
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: LIST
46852: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46853: LD_ADDR_VAR 0 14
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: LD_INT 3
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: LD_INT 3
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 1
46880: NEG
46881: PUSH
46882: LD_INT 2
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: LIST
46893: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46894: LD_ADDR_VAR 0 15
46898: PUSH
46899: LD_INT 2
46901: NEG
46902: PUSH
46903: LD_INT 1
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 3
46912: NEG
46913: PUSH
46914: LD_INT 0
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 3
46923: NEG
46924: PUSH
46925: LD_INT 1
46927: NEG
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: LIST
46937: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46938: LD_ADDR_VAR 0 16
46942: PUSH
46943: LD_INT 2
46945: NEG
46946: PUSH
46947: LD_INT 3
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 3
46957: NEG
46958: PUSH
46959: LD_INT 2
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 3
46969: NEG
46970: PUSH
46971: LD_INT 3
46973: NEG
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: LIST
46983: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46984: LD_ADDR_VAR 0 17
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: LD_INT 3
46995: NEG
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 0
47003: PUSH
47004: LD_INT 3
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: PUSH
47015: LD_INT 2
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: LIST
47027: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47028: LD_ADDR_VAR 0 18
47032: PUSH
47033: LD_INT 2
47035: PUSH
47036: LD_INT 1
47038: NEG
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 3
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 3
47056: PUSH
47057: LD_INT 1
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: LIST
47068: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47069: LD_ADDR_VAR 0 19
47073: PUSH
47074: LD_INT 3
47076: PUSH
47077: LD_INT 2
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 3
47086: PUSH
47087: LD_INT 3
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 2
47096: PUSH
47097: LD_INT 3
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: LIST
47108: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47109: LD_ADDR_VAR 0 20
47113: PUSH
47114: LD_INT 1
47116: PUSH
47117: LD_INT 3
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: LD_INT 3
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 1
47136: NEG
47137: PUSH
47138: LD_INT 2
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: LIST
47149: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47150: LD_ADDR_VAR 0 21
47154: PUSH
47155: LD_INT 2
47157: NEG
47158: PUSH
47159: LD_INT 1
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 3
47168: NEG
47169: PUSH
47170: LD_INT 0
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 3
47179: NEG
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: LIST
47193: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47194: LD_ADDR_VAR 0 22
47198: PUSH
47199: LD_INT 2
47201: NEG
47202: PUSH
47203: LD_INT 3
47205: NEG
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 3
47213: NEG
47214: PUSH
47215: LD_INT 2
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 3
47225: NEG
47226: PUSH
47227: LD_INT 3
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: LIST
47239: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47240: LD_ADDR_VAR 0 23
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: LD_INT 3
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: NEG
47259: PUSH
47260: LD_INT 4
47262: NEG
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 1
47270: PUSH
47271: LD_INT 3
47273: NEG
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: LIST
47283: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47284: LD_ADDR_VAR 0 24
47288: PUSH
47289: LD_INT 3
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 3
47301: PUSH
47302: LD_INT 1
47304: NEG
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 4
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: LIST
47324: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47325: LD_ADDR_VAR 0 25
47329: PUSH
47330: LD_INT 3
47332: PUSH
47333: LD_INT 3
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 4
47342: PUSH
47343: LD_INT 3
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 3
47352: PUSH
47353: LD_INT 4
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: LIST
47364: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47365: LD_ADDR_VAR 0 26
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: LD_INT 3
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 1
47382: PUSH
47383: LD_INT 4
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: LD_INT 3
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: LIST
47405: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47406: LD_ADDR_VAR 0 27
47410: PUSH
47411: LD_INT 3
47413: NEG
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 3
47424: NEG
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 4
47435: NEG
47436: PUSH
47437: LD_INT 1
47439: NEG
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: LIST
47449: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47450: LD_ADDR_VAR 0 28
47454: PUSH
47455: LD_INT 3
47457: NEG
47458: PUSH
47459: LD_INT 3
47461: NEG
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 3
47469: NEG
47470: PUSH
47471: LD_INT 4
47473: NEG
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 4
47481: NEG
47482: PUSH
47483: LD_INT 3
47485: NEG
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: LIST
47495: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47496: LD_ADDR_VAR 0 29
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: LD_INT 3
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: LD_INT 3
47518: NEG
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: LD_INT 2
47529: NEG
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 1
47537: NEG
47538: PUSH
47539: LD_INT 4
47541: NEG
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 0
47549: PUSH
47550: LD_INT 4
47552: NEG
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 1
47560: PUSH
47561: LD_INT 3
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: LD_INT 5
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: LD_INT 5
47586: NEG
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 1
47594: PUSH
47595: LD_INT 4
47597: NEG
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 1
47605: NEG
47606: PUSH
47607: LD_INT 6
47609: NEG
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: LD_INT 6
47620: NEG
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 1
47628: PUSH
47629: LD_INT 5
47631: NEG
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47651: LD_ADDR_VAR 0 30
47655: PUSH
47656: LD_INT 2
47658: PUSH
47659: LD_INT 1
47661: NEG
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 3
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 3
47679: PUSH
47680: LD_INT 1
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 3
47689: PUSH
47690: LD_INT 1
47692: NEG
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 4
47700: PUSH
47701: LD_INT 0
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 4
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 4
47720: PUSH
47721: LD_INT 1
47723: NEG
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 5
47731: PUSH
47732: LD_INT 0
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 5
47741: PUSH
47742: LD_INT 1
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 5
47751: PUSH
47752: LD_INT 1
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 6
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 6
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47794: LD_ADDR_VAR 0 31
47798: PUSH
47799: LD_INT 3
47801: PUSH
47802: LD_INT 2
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 3
47811: PUSH
47812: LD_INT 3
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 2
47821: PUSH
47822: LD_INT 3
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 4
47831: PUSH
47832: LD_INT 3
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 4
47841: PUSH
47842: LD_INT 4
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 3
47851: PUSH
47852: LD_INT 4
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 5
47861: PUSH
47862: LD_INT 4
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 5
47871: PUSH
47872: LD_INT 5
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 4
47881: PUSH
47882: LD_INT 5
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 6
47891: PUSH
47892: LD_INT 5
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 6
47901: PUSH
47902: LD_INT 6
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 5
47911: PUSH
47912: LD_INT 6
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47933: LD_ADDR_VAR 0 32
47937: PUSH
47938: LD_INT 1
47940: PUSH
47941: LD_INT 3
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: LD_INT 3
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 1
47960: NEG
47961: PUSH
47962: LD_INT 2
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: LD_INT 4
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: LD_INT 4
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 1
47991: NEG
47992: PUSH
47993: LD_INT 3
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 1
48002: PUSH
48003: LD_INT 5
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 0
48012: PUSH
48013: LD_INT 5
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 1
48022: NEG
48023: PUSH
48024: LD_INT 4
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 1
48033: PUSH
48034: LD_INT 6
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 0
48043: PUSH
48044: LD_INT 6
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 1
48053: NEG
48054: PUSH
48055: LD_INT 5
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48076: LD_ADDR_VAR 0 33
48080: PUSH
48081: LD_INT 2
48083: NEG
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 3
48094: NEG
48095: PUSH
48096: LD_INT 0
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 3
48105: NEG
48106: PUSH
48107: LD_INT 1
48109: NEG
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 3
48117: NEG
48118: PUSH
48119: LD_INT 1
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 4
48128: NEG
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 4
48139: NEG
48140: PUSH
48141: LD_INT 1
48143: NEG
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 4
48151: NEG
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 5
48162: NEG
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 5
48173: NEG
48174: PUSH
48175: LD_INT 1
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 5
48185: NEG
48186: PUSH
48187: LD_INT 1
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 6
48196: NEG
48197: PUSH
48198: LD_INT 0
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 6
48207: NEG
48208: PUSH
48209: LD_INT 1
48211: NEG
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48231: LD_ADDR_VAR 0 34
48235: PUSH
48236: LD_INT 2
48238: NEG
48239: PUSH
48240: LD_INT 3
48242: NEG
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 3
48250: NEG
48251: PUSH
48252: LD_INT 2
48254: NEG
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 3
48262: NEG
48263: PUSH
48264: LD_INT 3
48266: NEG
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 3
48274: NEG
48275: PUSH
48276: LD_INT 4
48278: NEG
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 4
48286: NEG
48287: PUSH
48288: LD_INT 3
48290: NEG
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 4
48298: NEG
48299: PUSH
48300: LD_INT 4
48302: NEG
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 4
48310: NEG
48311: PUSH
48312: LD_INT 5
48314: NEG
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 5
48322: NEG
48323: PUSH
48324: LD_INT 4
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 5
48334: NEG
48335: PUSH
48336: LD_INT 5
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 5
48346: NEG
48347: PUSH
48348: LD_INT 6
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 6
48358: NEG
48359: PUSH
48360: LD_INT 5
48362: NEG
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 6
48370: NEG
48371: PUSH
48372: LD_INT 6
48374: NEG
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48394: LD_ADDR_VAR 0 41
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: LD_INT 2
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: NEG
48413: PUSH
48414: LD_INT 3
48416: NEG
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 1
48424: PUSH
48425: LD_INT 2
48427: NEG
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: LIST
48437: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48438: LD_ADDR_VAR 0 42
48442: PUSH
48443: LD_INT 2
48445: PUSH
48446: LD_INT 0
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 2
48455: PUSH
48456: LD_INT 1
48458: NEG
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 3
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: LIST
48478: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48479: LD_ADDR_VAR 0 43
48483: PUSH
48484: LD_INT 2
48486: PUSH
48487: LD_INT 2
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 3
48496: PUSH
48497: LD_INT 2
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 2
48506: PUSH
48507: LD_INT 3
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: LIST
48518: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48519: LD_ADDR_VAR 0 44
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: LD_INT 2
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: LD_INT 3
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 1
48546: NEG
48547: PUSH
48548: LD_INT 2
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: LIST
48559: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48560: LD_ADDR_VAR 0 45
48564: PUSH
48565: LD_INT 2
48567: NEG
48568: PUSH
48569: LD_INT 0
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 2
48578: NEG
48579: PUSH
48580: LD_INT 1
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 3
48589: NEG
48590: PUSH
48591: LD_INT 1
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: LIST
48603: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48604: LD_ADDR_VAR 0 46
48608: PUSH
48609: LD_INT 2
48611: NEG
48612: PUSH
48613: LD_INT 2
48615: NEG
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 2
48623: NEG
48624: PUSH
48625: LD_INT 3
48627: NEG
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 3
48635: NEG
48636: PUSH
48637: LD_INT 2
48639: NEG
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: LIST
48649: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48650: LD_ADDR_VAR 0 47
48654: PUSH
48655: LD_INT 2
48657: NEG
48658: PUSH
48659: LD_INT 3
48661: NEG
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 1
48669: NEG
48670: PUSH
48671: LD_INT 3
48673: NEG
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48683: LD_ADDR_VAR 0 48
48687: PUSH
48688: LD_INT 1
48690: PUSH
48691: LD_INT 2
48693: NEG
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 2
48701: PUSH
48702: LD_INT 1
48704: NEG
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48714: LD_ADDR_VAR 0 49
48718: PUSH
48719: LD_INT 3
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 3
48731: PUSH
48732: LD_INT 2
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48743: LD_ADDR_VAR 0 50
48747: PUSH
48748: LD_INT 2
48750: PUSH
48751: LD_INT 3
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 1
48760: PUSH
48761: LD_INT 3
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48772: LD_ADDR_VAR 0 51
48776: PUSH
48777: LD_INT 1
48779: NEG
48780: PUSH
48781: LD_INT 2
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 2
48790: NEG
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48803: LD_ADDR_VAR 0 52
48807: PUSH
48808: LD_INT 3
48810: NEG
48811: PUSH
48812: LD_INT 1
48814: NEG
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 3
48822: NEG
48823: PUSH
48824: LD_INT 2
48826: NEG
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48836: LD_ADDR_VAR 0 53
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: PUSH
48845: LD_INT 3
48847: NEG
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: LD_INT 3
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: LD_INT 2
48869: NEG
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: LIST
48879: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48880: LD_ADDR_VAR 0 54
48884: PUSH
48885: LD_INT 2
48887: PUSH
48888: LD_INT 1
48890: NEG
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 3
48898: PUSH
48899: LD_INT 0
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 3
48908: PUSH
48909: LD_INT 1
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: LIST
48920: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48921: LD_ADDR_VAR 0 55
48925: PUSH
48926: LD_INT 3
48928: PUSH
48929: LD_INT 2
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 3
48938: PUSH
48939: LD_INT 3
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 2
48948: PUSH
48949: LD_INT 3
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: LIST
48960: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48961: LD_ADDR_VAR 0 56
48965: PUSH
48966: LD_INT 1
48968: PUSH
48969: LD_INT 3
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: LD_INT 3
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 1
48988: NEG
48989: PUSH
48990: LD_INT 2
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: LIST
49001: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49002: LD_ADDR_VAR 0 57
49006: PUSH
49007: LD_INT 2
49009: NEG
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 3
49020: NEG
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 3
49031: NEG
49032: PUSH
49033: LD_INT 1
49035: NEG
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: LIST
49045: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49046: LD_ADDR_VAR 0 58
49050: PUSH
49051: LD_INT 2
49053: NEG
49054: PUSH
49055: LD_INT 3
49057: NEG
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 3
49065: NEG
49066: PUSH
49067: LD_INT 2
49069: NEG
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 3
49077: NEG
49078: PUSH
49079: LD_INT 3
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: LIST
49091: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49092: LD_ADDR_VAR 0 59
49096: PUSH
49097: LD_INT 1
49099: NEG
49100: PUSH
49101: LD_INT 2
49103: NEG
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 0
49111: PUSH
49112: LD_INT 2
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 1
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: LIST
49135: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49136: LD_ADDR_VAR 0 60
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: LD_INT 1
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 2
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 2
49164: PUSH
49165: LD_INT 1
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: LIST
49176: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49177: LD_ADDR_VAR 0 61
49181: PUSH
49182: LD_INT 2
49184: PUSH
49185: LD_INT 1
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 2
49194: PUSH
49195: LD_INT 2
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 1
49204: PUSH
49205: LD_INT 2
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: LIST
49216: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49217: LD_ADDR_VAR 0 62
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: LD_INT 2
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 0
49234: PUSH
49235: LD_INT 2
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 1
49244: NEG
49245: PUSH
49246: LD_INT 1
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: LIST
49257: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49258: LD_ADDR_VAR 0 63
49262: PUSH
49263: LD_INT 1
49265: NEG
49266: PUSH
49267: LD_INT 1
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 2
49276: NEG
49277: PUSH
49278: LD_INT 0
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 2
49287: NEG
49288: PUSH
49289: LD_INT 1
49291: NEG
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: LIST
49301: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49302: LD_ADDR_VAR 0 64
49306: PUSH
49307: LD_INT 1
49309: NEG
49310: PUSH
49311: LD_INT 2
49313: NEG
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 2
49321: NEG
49322: PUSH
49323: LD_INT 1
49325: NEG
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 2
49333: NEG
49334: PUSH
49335: LD_INT 2
49337: NEG
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: LIST
49347: ST_TO_ADDR
// end ; 2 :
49348: GO 52614
49350: LD_INT 2
49352: DOUBLE
49353: EQUAL
49354: IFTRUE 49358
49356: GO 52613
49358: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49359: LD_ADDR_VAR 0 29
49363: PUSH
49364: LD_INT 4
49366: PUSH
49367: LD_INT 0
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 4
49376: PUSH
49377: LD_INT 1
49379: NEG
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 5
49387: PUSH
49388: LD_INT 0
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 5
49397: PUSH
49398: LD_INT 1
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 4
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 3
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 3
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 3
49438: PUSH
49439: LD_INT 2
49441: NEG
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 5
49449: PUSH
49450: LD_INT 2
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 3
49459: PUSH
49460: LD_INT 3
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 3
49469: PUSH
49470: LD_INT 2
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 4
49479: PUSH
49480: LD_INT 3
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 4
49489: PUSH
49490: LD_INT 4
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 3
49499: PUSH
49500: LD_INT 4
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 2
49509: PUSH
49510: LD_INT 3
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 2
49519: PUSH
49520: LD_INT 2
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 4
49529: PUSH
49530: LD_INT 2
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 2
49539: PUSH
49540: LD_INT 4
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 0
49549: PUSH
49550: LD_INT 4
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 0
49559: PUSH
49560: LD_INT 3
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 1
49569: PUSH
49570: LD_INT 4
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 1
49579: PUSH
49580: LD_INT 5
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: LD_INT 5
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 1
49599: NEG
49600: PUSH
49601: LD_INT 4
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: LD_INT 3
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 2
49621: PUSH
49622: LD_INT 5
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 2
49631: NEG
49632: PUSH
49633: LD_INT 3
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 3
49642: NEG
49643: PUSH
49644: LD_INT 0
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 3
49653: NEG
49654: PUSH
49655: LD_INT 1
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 2
49665: NEG
49666: PUSH
49667: LD_INT 0
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 2
49676: NEG
49677: PUSH
49678: LD_INT 1
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 3
49687: NEG
49688: PUSH
49689: LD_INT 1
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 4
49698: NEG
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 4
49709: NEG
49710: PUSH
49711: LD_INT 1
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 4
49721: NEG
49722: PUSH
49723: LD_INT 2
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 2
49733: NEG
49734: PUSH
49735: LD_INT 2
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 4
49744: NEG
49745: PUSH
49746: LD_INT 4
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 4
49756: NEG
49757: PUSH
49758: LD_INT 5
49760: NEG
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 3
49768: NEG
49769: PUSH
49770: LD_INT 4
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 3
49780: NEG
49781: PUSH
49782: LD_INT 3
49784: NEG
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 4
49792: NEG
49793: PUSH
49794: LD_INT 3
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 5
49804: NEG
49805: PUSH
49806: LD_INT 4
49808: NEG
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 5
49816: NEG
49817: PUSH
49818: LD_INT 5
49820: NEG
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 3
49828: NEG
49829: PUSH
49830: LD_INT 5
49832: NEG
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 5
49840: NEG
49841: PUSH
49842: LD_INT 3
49844: NEG
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49897: LD_ADDR_VAR 0 30
49901: PUSH
49902: LD_INT 4
49904: PUSH
49905: LD_INT 4
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 4
49914: PUSH
49915: LD_INT 3
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 5
49924: PUSH
49925: LD_INT 4
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 5
49934: PUSH
49935: LD_INT 5
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 4
49944: PUSH
49945: LD_INT 5
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 3
49954: PUSH
49955: LD_INT 4
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 3
49964: PUSH
49965: LD_INT 3
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 5
49974: PUSH
49975: LD_INT 3
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 3
49984: PUSH
49985: LD_INT 5
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 0
49994: PUSH
49995: LD_INT 3
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 0
50004: PUSH
50005: LD_INT 2
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: LD_INT 3
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: LD_INT 4
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: LD_INT 4
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: LD_INT 3
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 1
50055: NEG
50056: PUSH
50057: LD_INT 2
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 2
50066: PUSH
50067: LD_INT 4
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 2
50076: NEG
50077: PUSH
50078: LD_INT 2
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 4
50087: NEG
50088: PUSH
50089: LD_INT 0
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 4
50098: NEG
50099: PUSH
50100: LD_INT 1
50102: NEG
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 3
50110: NEG
50111: PUSH
50112: LD_INT 0
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 3
50121: NEG
50122: PUSH
50123: LD_INT 1
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 4
50132: NEG
50133: PUSH
50134: LD_INT 1
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 5
50143: NEG
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 5
50154: NEG
50155: PUSH
50156: LD_INT 1
50158: NEG
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 5
50166: NEG
50167: PUSH
50168: LD_INT 2
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 3
50178: NEG
50179: PUSH
50180: LD_INT 2
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 3
50189: NEG
50190: PUSH
50191: LD_INT 3
50193: NEG
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 3
50201: NEG
50202: PUSH
50203: LD_INT 4
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 2
50213: NEG
50214: PUSH
50215: LD_INT 3
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 2
50225: NEG
50226: PUSH
50227: LD_INT 2
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 3
50237: NEG
50238: PUSH
50239: LD_INT 2
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 4
50249: NEG
50250: PUSH
50251: LD_INT 3
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 4
50261: NEG
50262: PUSH
50263: LD_INT 4
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 2
50273: NEG
50274: PUSH
50275: LD_INT 4
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 4
50285: NEG
50286: PUSH
50287: LD_INT 2
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: LD_INT 4
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: LD_INT 5
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 1
50319: PUSH
50320: LD_INT 4
50322: NEG
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 1
50330: PUSH
50331: LD_INT 3
50333: NEG
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: LD_INT 3
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: LD_INT 4
50356: NEG
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: LD_INT 5
50368: NEG
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 2
50376: PUSH
50377: LD_INT 3
50379: NEG
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 2
50387: NEG
50388: PUSH
50389: LD_INT 5
50391: NEG
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50444: LD_ADDR_VAR 0 31
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: LD_INT 4
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 0
50461: PUSH
50462: LD_INT 3
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 1
50471: PUSH
50472: LD_INT 4
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 1
50481: PUSH
50482: LD_INT 5
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 0
50491: PUSH
50492: LD_INT 5
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 1
50501: NEG
50502: PUSH
50503: LD_INT 4
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 1
50512: NEG
50513: PUSH
50514: LD_INT 3
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 2
50523: PUSH
50524: LD_INT 5
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 2
50533: NEG
50534: PUSH
50535: LD_INT 3
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 3
50544: NEG
50545: PUSH
50546: LD_INT 0
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 3
50555: NEG
50556: PUSH
50557: LD_INT 1
50559: NEG
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 2
50567: NEG
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 2
50578: NEG
50579: PUSH
50580: LD_INT 1
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 3
50589: NEG
50590: PUSH
50591: LD_INT 1
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 4
50600: NEG
50601: PUSH
50602: LD_INT 0
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 4
50611: NEG
50612: PUSH
50613: LD_INT 1
50615: NEG
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 4
50623: NEG
50624: PUSH
50625: LD_INT 2
50627: NEG
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 2
50635: NEG
50636: PUSH
50637: LD_INT 2
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 4
50646: NEG
50647: PUSH
50648: LD_INT 4
50650: NEG
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 4
50658: NEG
50659: PUSH
50660: LD_INT 5
50662: NEG
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 3
50670: NEG
50671: PUSH
50672: LD_INT 4
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 3
50682: NEG
50683: PUSH
50684: LD_INT 3
50686: NEG
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 4
50694: NEG
50695: PUSH
50696: LD_INT 3
50698: NEG
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 5
50706: NEG
50707: PUSH
50708: LD_INT 4
50710: NEG
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 5
50718: NEG
50719: PUSH
50720: LD_INT 5
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 3
50730: NEG
50731: PUSH
50732: LD_INT 5
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 5
50742: NEG
50743: PUSH
50744: LD_INT 3
50746: NEG
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 0
50754: PUSH
50755: LD_INT 3
50757: NEG
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: LD_INT 4
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 1
50776: PUSH
50777: LD_INT 3
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: PUSH
50788: LD_INT 2
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: LD_INT 2
50801: NEG
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 1
50809: NEG
50810: PUSH
50811: LD_INT 3
50813: NEG
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 1
50821: NEG
50822: PUSH
50823: LD_INT 4
50825: NEG
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 2
50833: PUSH
50834: LD_INT 2
50836: NEG
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 2
50844: NEG
50845: PUSH
50846: LD_INT 4
50848: NEG
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 4
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 4
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 5
50877: PUSH
50878: LD_INT 0
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 5
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 4
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 3
50907: PUSH
50908: LD_INT 0
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 3
50917: PUSH
50918: LD_INT 1
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 3
50928: PUSH
50929: LD_INT 2
50931: NEG
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 5
50939: PUSH
50940: LD_INT 2
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50994: LD_ADDR_VAR 0 32
50998: PUSH
50999: LD_INT 4
51001: NEG
51002: PUSH
51003: LD_INT 0
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 4
51012: NEG
51013: PUSH
51014: LD_INT 1
51016: NEG
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 3
51024: NEG
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 3
51035: NEG
51036: PUSH
51037: LD_INT 1
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 4
51046: NEG
51047: PUSH
51048: LD_INT 1
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 5
51057: NEG
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 5
51068: NEG
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 5
51080: NEG
51081: PUSH
51082: LD_INT 2
51084: NEG
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 3
51092: NEG
51093: PUSH
51094: LD_INT 2
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 3
51103: NEG
51104: PUSH
51105: LD_INT 3
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 3
51115: NEG
51116: PUSH
51117: LD_INT 4
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 2
51127: NEG
51128: PUSH
51129: LD_INT 3
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 2
51139: NEG
51140: PUSH
51141: LD_INT 2
51143: NEG
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 3
51151: NEG
51152: PUSH
51153: LD_INT 2
51155: NEG
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 4
51163: NEG
51164: PUSH
51165: LD_INT 3
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 4
51175: NEG
51176: PUSH
51177: LD_INT 4
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 2
51187: NEG
51188: PUSH
51189: LD_INT 4
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 4
51199: NEG
51200: PUSH
51201: LD_INT 2
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 0
51211: PUSH
51212: LD_INT 4
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 0
51222: PUSH
51223: LD_INT 5
51225: NEG
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 1
51233: PUSH
51234: LD_INT 4
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: LD_INT 3
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: LD_INT 3
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: LD_INT 4
51270: NEG
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: LD_INT 5
51282: NEG
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 2
51290: PUSH
51291: LD_INT 3
51293: NEG
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 2
51301: NEG
51302: PUSH
51303: LD_INT 5
51305: NEG
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 3
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 3
51323: PUSH
51324: LD_INT 1
51326: NEG
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 4
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 4
51344: PUSH
51345: LD_INT 1
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 3
51354: PUSH
51355: LD_INT 1
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 2
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 2
51374: PUSH
51375: LD_INT 1
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 2
51385: PUSH
51386: LD_INT 2
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 4
51396: PUSH
51397: LD_INT 2
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 4
51406: PUSH
51407: LD_INT 4
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 4
51416: PUSH
51417: LD_INT 3
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 5
51426: PUSH
51427: LD_INT 4
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 5
51436: PUSH
51437: LD_INT 5
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 4
51446: PUSH
51447: LD_INT 5
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 3
51456: PUSH
51457: LD_INT 4
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 3
51466: PUSH
51467: LD_INT 3
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 5
51476: PUSH
51477: LD_INT 3
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 3
51486: PUSH
51487: LD_INT 5
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51541: LD_ADDR_VAR 0 33
51545: PUSH
51546: LD_INT 4
51548: NEG
51549: PUSH
51550: LD_INT 4
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 4
51560: NEG
51561: PUSH
51562: LD_INT 5
51564: NEG
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 3
51572: NEG
51573: PUSH
51574: LD_INT 4
51576: NEG
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 3
51584: NEG
51585: PUSH
51586: LD_INT 3
51588: NEG
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 4
51596: NEG
51597: PUSH
51598: LD_INT 3
51600: NEG
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 5
51608: NEG
51609: PUSH
51610: LD_INT 4
51612: NEG
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 5
51620: NEG
51621: PUSH
51622: LD_INT 5
51624: NEG
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 3
51632: NEG
51633: PUSH
51634: LD_INT 5
51636: NEG
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 5
51644: NEG
51645: PUSH
51646: LD_INT 3
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 0
51656: PUSH
51657: LD_INT 3
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: LD_INT 4
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 1
51678: PUSH
51679: LD_INT 3
51681: NEG
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 1
51689: PUSH
51690: LD_INT 2
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: LD_INT 2
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: LD_INT 3
51715: NEG
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 1
51723: NEG
51724: PUSH
51725: LD_INT 4
51727: NEG
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 2
51735: PUSH
51736: LD_INT 2
51738: NEG
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 2
51746: NEG
51747: PUSH
51748: LD_INT 4
51750: NEG
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 4
51758: PUSH
51759: LD_INT 0
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 4
51768: PUSH
51769: LD_INT 1
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 5
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 5
51789: PUSH
51790: LD_INT 1
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 4
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 3
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 3
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 3
51830: PUSH
51831: LD_INT 2
51833: NEG
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 5
51841: PUSH
51842: LD_INT 2
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 3
51851: PUSH
51852: LD_INT 3
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 3
51861: PUSH
51862: LD_INT 2
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 4
51871: PUSH
51872: LD_INT 3
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 4
51881: PUSH
51882: LD_INT 4
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 3
51891: PUSH
51892: LD_INT 4
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 2
51901: PUSH
51902: LD_INT 3
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 2
51911: PUSH
51912: LD_INT 2
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 4
51921: PUSH
51922: LD_INT 2
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 2
51931: PUSH
51932: LD_INT 4
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: LD_INT 4
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: LD_INT 3
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 1
51961: PUSH
51962: LD_INT 4
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: LD_INT 5
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: LD_INT 5
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: NEG
51992: PUSH
51993: LD_INT 4
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 1
52002: NEG
52003: PUSH
52004: LD_INT 3
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 2
52013: PUSH
52014: LD_INT 5
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 2
52023: NEG
52024: PUSH
52025: LD_INT 3
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52079: LD_ADDR_VAR 0 34
52083: PUSH
52084: LD_INT 0
52086: PUSH
52087: LD_INT 4
52089: NEG
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: LD_INT 5
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 1
52108: PUSH
52109: LD_INT 4
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: LD_INT 3
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 0
52130: PUSH
52131: LD_INT 3
52133: NEG
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 1
52141: NEG
52142: PUSH
52143: LD_INT 4
52145: NEG
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 1
52153: NEG
52154: PUSH
52155: LD_INT 5
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 2
52165: PUSH
52166: LD_INT 3
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 2
52176: NEG
52177: PUSH
52178: LD_INT 5
52180: NEG
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 3
52188: PUSH
52189: LD_INT 0
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 3
52198: PUSH
52199: LD_INT 1
52201: NEG
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 4
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 4
52219: PUSH
52220: LD_INT 1
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 3
52229: PUSH
52230: LD_INT 1
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 2
52239: PUSH
52240: LD_INT 0
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 2
52249: PUSH
52250: LD_INT 1
52252: NEG
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 2
52260: PUSH
52261: LD_INT 2
52263: NEG
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 4
52271: PUSH
52272: LD_INT 2
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 4
52281: PUSH
52282: LD_INT 4
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 4
52291: PUSH
52292: LD_INT 3
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 5
52301: PUSH
52302: LD_INT 4
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 5
52311: PUSH
52312: LD_INT 5
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 4
52321: PUSH
52322: LD_INT 5
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 3
52331: PUSH
52332: LD_INT 4
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 3
52341: PUSH
52342: LD_INT 3
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 5
52351: PUSH
52352: LD_INT 3
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 3
52361: PUSH
52362: LD_INT 5
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: LD_INT 3
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: LD_INT 2
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 1
52391: PUSH
52392: LD_INT 3
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 1
52401: PUSH
52402: LD_INT 4
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 0
52411: PUSH
52412: LD_INT 4
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: NEG
52422: PUSH
52423: LD_INT 3
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 1
52432: NEG
52433: PUSH
52434: LD_INT 2
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 2
52443: PUSH
52444: LD_INT 4
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 2
52453: NEG
52454: PUSH
52455: LD_INT 2
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 4
52464: NEG
52465: PUSH
52466: LD_INT 0
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 4
52475: NEG
52476: PUSH
52477: LD_INT 1
52479: NEG
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 3
52487: NEG
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 3
52498: NEG
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 4
52509: NEG
52510: PUSH
52511: LD_INT 1
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 5
52520: NEG
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 5
52531: NEG
52532: PUSH
52533: LD_INT 1
52535: NEG
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 5
52543: NEG
52544: PUSH
52545: LD_INT 2
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 3
52555: NEG
52556: PUSH
52557: LD_INT 2
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: ST_TO_ADDR
// end ; end ;
52611: GO 52614
52613: POP
// case btype of b_depot , b_warehouse :
52614: LD_VAR 0 1
52618: PUSH
52619: LD_INT 0
52621: DOUBLE
52622: EQUAL
52623: IFTRUE 52633
52625: LD_INT 1
52627: DOUBLE
52628: EQUAL
52629: IFTRUE 52633
52631: GO 52834
52633: POP
// case nation of nation_american :
52634: LD_VAR 0 5
52638: PUSH
52639: LD_INT 1
52641: DOUBLE
52642: EQUAL
52643: IFTRUE 52647
52645: GO 52703
52647: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
52648: LD_ADDR_VAR 0 9
52652: PUSH
52653: LD_VAR 0 11
52657: PUSH
52658: LD_VAR 0 12
52662: PUSH
52663: LD_VAR 0 13
52667: PUSH
52668: LD_VAR 0 14
52672: PUSH
52673: LD_VAR 0 15
52677: PUSH
52678: LD_VAR 0 16
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: PUSH
52691: LD_VAR 0 4
52695: PUSH
52696: LD_INT 1
52698: PLUS
52699: ARRAY
52700: ST_TO_ADDR
52701: GO 52832
52703: LD_INT 2
52705: DOUBLE
52706: EQUAL
52707: IFTRUE 52711
52709: GO 52767
52711: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
52712: LD_ADDR_VAR 0 9
52716: PUSH
52717: LD_VAR 0 17
52721: PUSH
52722: LD_VAR 0 18
52726: PUSH
52727: LD_VAR 0 19
52731: PUSH
52732: LD_VAR 0 20
52736: PUSH
52737: LD_VAR 0 21
52741: PUSH
52742: LD_VAR 0 22
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: PUSH
52755: LD_VAR 0 4
52759: PUSH
52760: LD_INT 1
52762: PLUS
52763: ARRAY
52764: ST_TO_ADDR
52765: GO 52832
52767: LD_INT 3
52769: DOUBLE
52770: EQUAL
52771: IFTRUE 52775
52773: GO 52831
52775: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52776: LD_ADDR_VAR 0 9
52780: PUSH
52781: LD_VAR 0 23
52785: PUSH
52786: LD_VAR 0 24
52790: PUSH
52791: LD_VAR 0 25
52795: PUSH
52796: LD_VAR 0 26
52800: PUSH
52801: LD_VAR 0 27
52805: PUSH
52806: LD_VAR 0 28
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: PUSH
52819: LD_VAR 0 4
52823: PUSH
52824: LD_INT 1
52826: PLUS
52827: ARRAY
52828: ST_TO_ADDR
52829: GO 52832
52831: POP
52832: GO 53381
52834: LD_INT 2
52836: DOUBLE
52837: EQUAL
52838: IFTRUE 52848
52840: LD_INT 3
52842: DOUBLE
52843: EQUAL
52844: IFTRUE 52848
52846: GO 52904
52848: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52849: LD_ADDR_VAR 0 9
52853: PUSH
52854: LD_VAR 0 29
52858: PUSH
52859: LD_VAR 0 30
52863: PUSH
52864: LD_VAR 0 31
52868: PUSH
52869: LD_VAR 0 32
52873: PUSH
52874: LD_VAR 0 33
52878: PUSH
52879: LD_VAR 0 34
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: PUSH
52892: LD_VAR 0 4
52896: PUSH
52897: LD_INT 1
52899: PLUS
52900: ARRAY
52901: ST_TO_ADDR
52902: GO 53381
52904: LD_INT 16
52906: DOUBLE
52907: EQUAL
52908: IFTRUE 52960
52910: LD_INT 17
52912: DOUBLE
52913: EQUAL
52914: IFTRUE 52960
52916: LD_INT 18
52918: DOUBLE
52919: EQUAL
52920: IFTRUE 52960
52922: LD_INT 19
52924: DOUBLE
52925: EQUAL
52926: IFTRUE 52960
52928: LD_INT 20
52930: DOUBLE
52931: EQUAL
52932: IFTRUE 52960
52934: LD_INT 21
52936: DOUBLE
52937: EQUAL
52938: IFTRUE 52960
52940: LD_INT 23
52942: DOUBLE
52943: EQUAL
52944: IFTRUE 52960
52946: LD_INT 24
52948: DOUBLE
52949: EQUAL
52950: IFTRUE 52960
52952: LD_INT 25
52954: DOUBLE
52955: EQUAL
52956: IFTRUE 52960
52958: GO 53016
52960: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52961: LD_ADDR_VAR 0 9
52965: PUSH
52966: LD_VAR 0 35
52970: PUSH
52971: LD_VAR 0 36
52975: PUSH
52976: LD_VAR 0 37
52980: PUSH
52981: LD_VAR 0 38
52985: PUSH
52986: LD_VAR 0 39
52990: PUSH
52991: LD_VAR 0 40
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: PUSH
53004: LD_VAR 0 4
53008: PUSH
53009: LD_INT 1
53011: PLUS
53012: ARRAY
53013: ST_TO_ADDR
53014: GO 53381
53016: LD_INT 6
53018: DOUBLE
53019: EQUAL
53020: IFTRUE 53072
53022: LD_INT 7
53024: DOUBLE
53025: EQUAL
53026: IFTRUE 53072
53028: LD_INT 8
53030: DOUBLE
53031: EQUAL
53032: IFTRUE 53072
53034: LD_INT 13
53036: DOUBLE
53037: EQUAL
53038: IFTRUE 53072
53040: LD_INT 12
53042: DOUBLE
53043: EQUAL
53044: IFTRUE 53072
53046: LD_INT 15
53048: DOUBLE
53049: EQUAL
53050: IFTRUE 53072
53052: LD_INT 11
53054: DOUBLE
53055: EQUAL
53056: IFTRUE 53072
53058: LD_INT 14
53060: DOUBLE
53061: EQUAL
53062: IFTRUE 53072
53064: LD_INT 10
53066: DOUBLE
53067: EQUAL
53068: IFTRUE 53072
53070: GO 53128
53072: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
53073: LD_ADDR_VAR 0 9
53077: PUSH
53078: LD_VAR 0 41
53082: PUSH
53083: LD_VAR 0 42
53087: PUSH
53088: LD_VAR 0 43
53092: PUSH
53093: LD_VAR 0 44
53097: PUSH
53098: LD_VAR 0 45
53102: PUSH
53103: LD_VAR 0 46
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: PUSH
53116: LD_VAR 0 4
53120: PUSH
53121: LD_INT 1
53123: PLUS
53124: ARRAY
53125: ST_TO_ADDR
53126: GO 53381
53128: LD_INT 36
53130: DOUBLE
53131: EQUAL
53132: IFTRUE 53136
53134: GO 53192
53136: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53137: LD_ADDR_VAR 0 9
53141: PUSH
53142: LD_VAR 0 47
53146: PUSH
53147: LD_VAR 0 48
53151: PUSH
53152: LD_VAR 0 49
53156: PUSH
53157: LD_VAR 0 50
53161: PUSH
53162: LD_VAR 0 51
53166: PUSH
53167: LD_VAR 0 52
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: PUSH
53180: LD_VAR 0 4
53184: PUSH
53185: LD_INT 1
53187: PLUS
53188: ARRAY
53189: ST_TO_ADDR
53190: GO 53381
53192: LD_INT 4
53194: DOUBLE
53195: EQUAL
53196: IFTRUE 53218
53198: LD_INT 5
53200: DOUBLE
53201: EQUAL
53202: IFTRUE 53218
53204: LD_INT 34
53206: DOUBLE
53207: EQUAL
53208: IFTRUE 53218
53210: LD_INT 37
53212: DOUBLE
53213: EQUAL
53214: IFTRUE 53218
53216: GO 53274
53218: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53219: LD_ADDR_VAR 0 9
53223: PUSH
53224: LD_VAR 0 53
53228: PUSH
53229: LD_VAR 0 54
53233: PUSH
53234: LD_VAR 0 55
53238: PUSH
53239: LD_VAR 0 56
53243: PUSH
53244: LD_VAR 0 57
53248: PUSH
53249: LD_VAR 0 58
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: PUSH
53262: LD_VAR 0 4
53266: PUSH
53267: LD_INT 1
53269: PLUS
53270: ARRAY
53271: ST_TO_ADDR
53272: GO 53381
53274: LD_INT 31
53276: DOUBLE
53277: EQUAL
53278: IFTRUE 53324
53280: LD_INT 32
53282: DOUBLE
53283: EQUAL
53284: IFTRUE 53324
53286: LD_INT 33
53288: DOUBLE
53289: EQUAL
53290: IFTRUE 53324
53292: LD_INT 27
53294: DOUBLE
53295: EQUAL
53296: IFTRUE 53324
53298: LD_INT 26
53300: DOUBLE
53301: EQUAL
53302: IFTRUE 53324
53304: LD_INT 28
53306: DOUBLE
53307: EQUAL
53308: IFTRUE 53324
53310: LD_INT 29
53312: DOUBLE
53313: EQUAL
53314: IFTRUE 53324
53316: LD_INT 30
53318: DOUBLE
53319: EQUAL
53320: IFTRUE 53324
53322: GO 53380
53324: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
53325: LD_ADDR_VAR 0 9
53329: PUSH
53330: LD_VAR 0 59
53334: PUSH
53335: LD_VAR 0 60
53339: PUSH
53340: LD_VAR 0 61
53344: PUSH
53345: LD_VAR 0 62
53349: PUSH
53350: LD_VAR 0 63
53354: PUSH
53355: LD_VAR 0 64
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: PUSH
53368: LD_VAR 0 4
53372: PUSH
53373: LD_INT 1
53375: PLUS
53376: ARRAY
53377: ST_TO_ADDR
53378: GO 53381
53380: POP
// temp_list2 = [ ] ;
53381: LD_ADDR_VAR 0 10
53385: PUSH
53386: EMPTY
53387: ST_TO_ADDR
// for i in temp_list do
53388: LD_ADDR_VAR 0 8
53392: PUSH
53393: LD_VAR 0 9
53397: PUSH
53398: FOR_IN
53399: IFFALSE 53451
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53401: LD_ADDR_VAR 0 10
53405: PUSH
53406: LD_VAR 0 10
53410: PUSH
53411: LD_VAR 0 8
53415: PUSH
53416: LD_INT 1
53418: ARRAY
53419: PUSH
53420: LD_VAR 0 2
53424: PLUS
53425: PUSH
53426: LD_VAR 0 8
53430: PUSH
53431: LD_INT 2
53433: ARRAY
53434: PUSH
53435: LD_VAR 0 3
53439: PLUS
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: EMPTY
53446: LIST
53447: ADD
53448: ST_TO_ADDR
53449: GO 53398
53451: POP
53452: POP
// result = temp_list2 ;
53453: LD_ADDR_VAR 0 7
53457: PUSH
53458: LD_VAR 0 10
53462: ST_TO_ADDR
// end ;
53463: LD_VAR 0 7
53467: RET
// export function EnemyInRange ( unit , dist ) ; begin
53468: LD_INT 0
53470: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53471: LD_ADDR_VAR 0 3
53475: PUSH
53476: LD_VAR 0 1
53480: PPUSH
53481: CALL_OW 255
53485: PPUSH
53486: LD_VAR 0 1
53490: PPUSH
53491: CALL_OW 250
53495: PPUSH
53496: LD_VAR 0 1
53500: PPUSH
53501: CALL_OW 251
53505: PPUSH
53506: LD_VAR 0 2
53510: PPUSH
53511: CALL 27596 0 4
53515: PUSH
53516: LD_INT 4
53518: ARRAY
53519: ST_TO_ADDR
// end ;
53520: LD_VAR 0 3
53524: RET
// export function PlayerSeeMe ( unit ) ; begin
53525: LD_INT 0
53527: PPUSH
// result := See ( your_side , unit ) ;
53528: LD_ADDR_VAR 0 2
53532: PUSH
53533: LD_OWVAR 2
53537: PPUSH
53538: LD_VAR 0 1
53542: PPUSH
53543: CALL_OW 292
53547: ST_TO_ADDR
// end ;
53548: LD_VAR 0 2
53552: RET
// export function ReverseDir ( unit ) ; begin
53553: LD_INT 0
53555: PPUSH
// if not unit then
53556: LD_VAR 0 1
53560: NOT
53561: IFFALSE 53565
// exit ;
53563: GO 53611
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
53565: LD_ADDR_VAR 0 2
53569: PUSH
53570: LD_INT 3
53572: PUSH
53573: LD_INT 4
53575: PUSH
53576: LD_INT 5
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: LD_INT 2
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: PUSH
53596: LD_VAR 0 1
53600: PPUSH
53601: CALL_OW 254
53605: PUSH
53606: LD_INT 1
53608: PLUS
53609: ARRAY
53610: ST_TO_ADDR
// end ;
53611: LD_VAR 0 2
53615: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53616: LD_INT 0
53618: PPUSH
53619: PPUSH
53620: PPUSH
53621: PPUSH
53622: PPUSH
// if not hexes then
53623: LD_VAR 0 2
53627: NOT
53628: IFFALSE 53632
// exit ;
53630: GO 53780
// dist := 9999 ;
53632: LD_ADDR_VAR 0 5
53636: PUSH
53637: LD_INT 9999
53639: ST_TO_ADDR
// for i = 1 to hexes do
53640: LD_ADDR_VAR 0 4
53644: PUSH
53645: DOUBLE
53646: LD_INT 1
53648: DEC
53649: ST_TO_ADDR
53650: LD_VAR 0 2
53654: PUSH
53655: FOR_TO
53656: IFFALSE 53768
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53658: LD_VAR 0 1
53662: PPUSH
53663: LD_VAR 0 2
53667: PUSH
53668: LD_VAR 0 4
53672: ARRAY
53673: PUSH
53674: LD_INT 1
53676: ARRAY
53677: PPUSH
53678: LD_VAR 0 2
53682: PUSH
53683: LD_VAR 0 4
53687: ARRAY
53688: PUSH
53689: LD_INT 2
53691: ARRAY
53692: PPUSH
53693: CALL_OW 297
53697: PUSH
53698: LD_VAR 0 5
53702: LESS
53703: IFFALSE 53766
// begin hex := hexes [ i ] ;
53705: LD_ADDR_VAR 0 7
53709: PUSH
53710: LD_VAR 0 2
53714: PUSH
53715: LD_VAR 0 4
53719: ARRAY
53720: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53721: LD_ADDR_VAR 0 5
53725: PUSH
53726: LD_VAR 0 1
53730: PPUSH
53731: LD_VAR 0 2
53735: PUSH
53736: LD_VAR 0 4
53740: ARRAY
53741: PUSH
53742: LD_INT 1
53744: ARRAY
53745: PPUSH
53746: LD_VAR 0 2
53750: PUSH
53751: LD_VAR 0 4
53755: ARRAY
53756: PUSH
53757: LD_INT 2
53759: ARRAY
53760: PPUSH
53761: CALL_OW 297
53765: ST_TO_ADDR
// end ; end ;
53766: GO 53655
53768: POP
53769: POP
// result := hex ;
53770: LD_ADDR_VAR 0 3
53774: PUSH
53775: LD_VAR 0 7
53779: ST_TO_ADDR
// end ;
53780: LD_VAR 0 3
53784: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53785: LD_INT 0
53787: PPUSH
53788: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53789: LD_VAR 0 1
53793: NOT
53794: PUSH
53795: LD_VAR 0 1
53799: PUSH
53800: LD_INT 21
53802: PUSH
53803: LD_INT 2
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 23
53812: PUSH
53813: LD_INT 2
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PPUSH
53824: CALL_OW 69
53828: IN
53829: NOT
53830: OR
53831: IFFALSE 53835
// exit ;
53833: GO 53882
// for i = 1 to 3 do
53835: LD_ADDR_VAR 0 3
53839: PUSH
53840: DOUBLE
53841: LD_INT 1
53843: DEC
53844: ST_TO_ADDR
53845: LD_INT 3
53847: PUSH
53848: FOR_TO
53849: IFFALSE 53880
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53851: LD_VAR 0 1
53855: PPUSH
53856: CALL_OW 250
53860: PPUSH
53861: LD_VAR 0 1
53865: PPUSH
53866: CALL_OW 251
53870: PPUSH
53871: LD_INT 1
53873: PPUSH
53874: CALL_OW 453
53878: GO 53848
53880: POP
53881: POP
// end ;
53882: LD_VAR 0 2
53886: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53887: LD_INT 0
53889: PPUSH
53890: PPUSH
53891: PPUSH
53892: PPUSH
53893: PPUSH
53894: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53895: LD_VAR 0 1
53899: NOT
53900: PUSH
53901: LD_VAR 0 2
53905: NOT
53906: OR
53907: PUSH
53908: LD_VAR 0 1
53912: PPUSH
53913: CALL_OW 314
53917: OR
53918: IFFALSE 53922
// exit ;
53920: GO 54363
// x := GetX ( enemy_unit ) ;
53922: LD_ADDR_VAR 0 7
53926: PUSH
53927: LD_VAR 0 2
53931: PPUSH
53932: CALL_OW 250
53936: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53937: LD_ADDR_VAR 0 8
53941: PUSH
53942: LD_VAR 0 2
53946: PPUSH
53947: CALL_OW 251
53951: ST_TO_ADDR
// if not x or not y then
53952: LD_VAR 0 7
53956: NOT
53957: PUSH
53958: LD_VAR 0 8
53962: NOT
53963: OR
53964: IFFALSE 53968
// exit ;
53966: GO 54363
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53968: LD_ADDR_VAR 0 6
53972: PUSH
53973: LD_VAR 0 7
53977: PPUSH
53978: LD_INT 0
53980: PPUSH
53981: LD_INT 4
53983: PPUSH
53984: CALL_OW 272
53988: PUSH
53989: LD_VAR 0 8
53993: PPUSH
53994: LD_INT 0
53996: PPUSH
53997: LD_INT 4
53999: PPUSH
54000: CALL_OW 273
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_VAR 0 7
54013: PPUSH
54014: LD_INT 1
54016: PPUSH
54017: LD_INT 4
54019: PPUSH
54020: CALL_OW 272
54024: PUSH
54025: LD_VAR 0 8
54029: PPUSH
54030: LD_INT 1
54032: PPUSH
54033: LD_INT 4
54035: PPUSH
54036: CALL_OW 273
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_VAR 0 7
54049: PPUSH
54050: LD_INT 2
54052: PPUSH
54053: LD_INT 4
54055: PPUSH
54056: CALL_OW 272
54060: PUSH
54061: LD_VAR 0 8
54065: PPUSH
54066: LD_INT 2
54068: PPUSH
54069: LD_INT 4
54071: PPUSH
54072: CALL_OW 273
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_VAR 0 7
54085: PPUSH
54086: LD_INT 3
54088: PPUSH
54089: LD_INT 4
54091: PPUSH
54092: CALL_OW 272
54096: PUSH
54097: LD_VAR 0 8
54101: PPUSH
54102: LD_INT 3
54104: PPUSH
54105: LD_INT 4
54107: PPUSH
54108: CALL_OW 273
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_VAR 0 7
54121: PPUSH
54122: LD_INT 4
54124: PPUSH
54125: LD_INT 4
54127: PPUSH
54128: CALL_OW 272
54132: PUSH
54133: LD_VAR 0 8
54137: PPUSH
54138: LD_INT 4
54140: PPUSH
54141: LD_INT 4
54143: PPUSH
54144: CALL_OW 273
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_VAR 0 7
54157: PPUSH
54158: LD_INT 5
54160: PPUSH
54161: LD_INT 4
54163: PPUSH
54164: CALL_OW 272
54168: PUSH
54169: LD_VAR 0 8
54173: PPUSH
54174: LD_INT 5
54176: PPUSH
54177: LD_INT 4
54179: PPUSH
54180: CALL_OW 273
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: ST_TO_ADDR
// for i = tmp downto 1 do
54197: LD_ADDR_VAR 0 4
54201: PUSH
54202: DOUBLE
54203: LD_VAR 0 6
54207: INC
54208: ST_TO_ADDR
54209: LD_INT 1
54211: PUSH
54212: FOR_DOWNTO
54213: IFFALSE 54314
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54215: LD_VAR 0 6
54219: PUSH
54220: LD_VAR 0 4
54224: ARRAY
54225: PUSH
54226: LD_INT 1
54228: ARRAY
54229: PPUSH
54230: LD_VAR 0 6
54234: PUSH
54235: LD_VAR 0 4
54239: ARRAY
54240: PUSH
54241: LD_INT 2
54243: ARRAY
54244: PPUSH
54245: CALL_OW 488
54249: NOT
54250: PUSH
54251: LD_VAR 0 6
54255: PUSH
54256: LD_VAR 0 4
54260: ARRAY
54261: PUSH
54262: LD_INT 1
54264: ARRAY
54265: PPUSH
54266: LD_VAR 0 6
54270: PUSH
54271: LD_VAR 0 4
54275: ARRAY
54276: PUSH
54277: LD_INT 2
54279: ARRAY
54280: PPUSH
54281: CALL_OW 428
54285: PUSH
54286: LD_INT 0
54288: NONEQUAL
54289: OR
54290: IFFALSE 54312
// tmp := Delete ( tmp , i ) ;
54292: LD_ADDR_VAR 0 6
54296: PUSH
54297: LD_VAR 0 6
54301: PPUSH
54302: LD_VAR 0 4
54306: PPUSH
54307: CALL_OW 3
54311: ST_TO_ADDR
54312: GO 54212
54314: POP
54315: POP
// j := GetClosestHex ( unit , tmp ) ;
54316: LD_ADDR_VAR 0 5
54320: PUSH
54321: LD_VAR 0 1
54325: PPUSH
54326: LD_VAR 0 6
54330: PPUSH
54331: CALL 53616 0 2
54335: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54336: LD_VAR 0 1
54340: PPUSH
54341: LD_VAR 0 5
54345: PUSH
54346: LD_INT 1
54348: ARRAY
54349: PPUSH
54350: LD_VAR 0 5
54354: PUSH
54355: LD_INT 2
54357: ARRAY
54358: PPUSH
54359: CALL_OW 111
// end ;
54363: LD_VAR 0 3
54367: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54368: LD_INT 0
54370: PPUSH
54371: PPUSH
54372: PPUSH
// uc_side = 0 ;
54373: LD_ADDR_OWVAR 20
54377: PUSH
54378: LD_INT 0
54380: ST_TO_ADDR
// uc_nation = 0 ;
54381: LD_ADDR_OWVAR 21
54385: PUSH
54386: LD_INT 0
54388: ST_TO_ADDR
// InitHc ;
54389: CALL_OW 19
// InitVc ;
54393: CALL_OW 20
// if mastodonts then
54397: LD_VAR 0 6
54401: IFFALSE 54468
// for i = 1 to mastodonts do
54403: LD_ADDR_VAR 0 11
54407: PUSH
54408: DOUBLE
54409: LD_INT 1
54411: DEC
54412: ST_TO_ADDR
54413: LD_VAR 0 6
54417: PUSH
54418: FOR_TO
54419: IFFALSE 54466
// begin vc_chassis := 31 ;
54421: LD_ADDR_OWVAR 37
54425: PUSH
54426: LD_INT 31
54428: ST_TO_ADDR
// vc_control := control_rider ;
54429: LD_ADDR_OWVAR 38
54433: PUSH
54434: LD_INT 4
54436: ST_TO_ADDR
// animal := CreateVehicle ;
54437: LD_ADDR_VAR 0 12
54441: PUSH
54442: CALL_OW 45
54446: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54447: LD_VAR 0 12
54451: PPUSH
54452: LD_VAR 0 8
54456: PPUSH
54457: LD_INT 0
54459: PPUSH
54460: CALL 61213 0 3
// end ;
54464: GO 54418
54466: POP
54467: POP
// if horses then
54468: LD_VAR 0 5
54472: IFFALSE 54539
// for i = 1 to horses do
54474: LD_ADDR_VAR 0 11
54478: PUSH
54479: DOUBLE
54480: LD_INT 1
54482: DEC
54483: ST_TO_ADDR
54484: LD_VAR 0 5
54488: PUSH
54489: FOR_TO
54490: IFFALSE 54537
// begin hc_class := 21 ;
54492: LD_ADDR_OWVAR 28
54496: PUSH
54497: LD_INT 21
54499: ST_TO_ADDR
// hc_gallery :=  ;
54500: LD_ADDR_OWVAR 33
54504: PUSH
54505: LD_STRING 
54507: ST_TO_ADDR
// animal := CreateHuman ;
54508: LD_ADDR_VAR 0 12
54512: PUSH
54513: CALL_OW 44
54517: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54518: LD_VAR 0 12
54522: PPUSH
54523: LD_VAR 0 8
54527: PPUSH
54528: LD_INT 0
54530: PPUSH
54531: CALL 61213 0 3
// end ;
54535: GO 54489
54537: POP
54538: POP
// if birds then
54539: LD_VAR 0 1
54543: IFFALSE 54610
// for i = 1 to birds do
54545: LD_ADDR_VAR 0 11
54549: PUSH
54550: DOUBLE
54551: LD_INT 1
54553: DEC
54554: ST_TO_ADDR
54555: LD_VAR 0 1
54559: PUSH
54560: FOR_TO
54561: IFFALSE 54608
// begin hc_class = 18 ;
54563: LD_ADDR_OWVAR 28
54567: PUSH
54568: LD_INT 18
54570: ST_TO_ADDR
// hc_gallery =  ;
54571: LD_ADDR_OWVAR 33
54575: PUSH
54576: LD_STRING 
54578: ST_TO_ADDR
// animal := CreateHuman ;
54579: LD_ADDR_VAR 0 12
54583: PUSH
54584: CALL_OW 44
54588: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54589: LD_VAR 0 12
54593: PPUSH
54594: LD_VAR 0 8
54598: PPUSH
54599: LD_INT 0
54601: PPUSH
54602: CALL 61213 0 3
// end ;
54606: GO 54560
54608: POP
54609: POP
// if tigers then
54610: LD_VAR 0 2
54614: IFFALSE 54698
// for i = 1 to tigers do
54616: LD_ADDR_VAR 0 11
54620: PUSH
54621: DOUBLE
54622: LD_INT 1
54624: DEC
54625: ST_TO_ADDR
54626: LD_VAR 0 2
54630: PUSH
54631: FOR_TO
54632: IFFALSE 54696
// begin hc_class = class_tiger ;
54634: LD_ADDR_OWVAR 28
54638: PUSH
54639: LD_INT 14
54641: ST_TO_ADDR
// hc_gallery =  ;
54642: LD_ADDR_OWVAR 33
54646: PUSH
54647: LD_STRING 
54649: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54650: LD_ADDR_OWVAR 35
54654: PUSH
54655: LD_INT 7
54657: NEG
54658: PPUSH
54659: LD_INT 7
54661: PPUSH
54662: CALL_OW 12
54666: ST_TO_ADDR
// animal := CreateHuman ;
54667: LD_ADDR_VAR 0 12
54671: PUSH
54672: CALL_OW 44
54676: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54677: LD_VAR 0 12
54681: PPUSH
54682: LD_VAR 0 8
54686: PPUSH
54687: LD_INT 0
54689: PPUSH
54690: CALL 61213 0 3
// end ;
54694: GO 54631
54696: POP
54697: POP
// if apemans then
54698: LD_VAR 0 3
54702: IFFALSE 54825
// for i = 1 to apemans do
54704: LD_ADDR_VAR 0 11
54708: PUSH
54709: DOUBLE
54710: LD_INT 1
54712: DEC
54713: ST_TO_ADDR
54714: LD_VAR 0 3
54718: PUSH
54719: FOR_TO
54720: IFFALSE 54823
// begin hc_class = class_apeman ;
54722: LD_ADDR_OWVAR 28
54726: PUSH
54727: LD_INT 12
54729: ST_TO_ADDR
// hc_gallery =  ;
54730: LD_ADDR_OWVAR 33
54734: PUSH
54735: LD_STRING 
54737: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54738: LD_ADDR_OWVAR 35
54742: PUSH
54743: LD_INT 5
54745: NEG
54746: PPUSH
54747: LD_INT 5
54749: PPUSH
54750: CALL_OW 12
54754: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54755: LD_ADDR_OWVAR 31
54759: PUSH
54760: LD_INT 1
54762: PPUSH
54763: LD_INT 3
54765: PPUSH
54766: CALL_OW 12
54770: PUSH
54771: LD_INT 1
54773: PPUSH
54774: LD_INT 3
54776: PPUSH
54777: CALL_OW 12
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: LD_INT 0
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: ST_TO_ADDR
// animal := CreateHuman ;
54794: LD_ADDR_VAR 0 12
54798: PUSH
54799: CALL_OW 44
54803: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54804: LD_VAR 0 12
54808: PPUSH
54809: LD_VAR 0 8
54813: PPUSH
54814: LD_INT 0
54816: PPUSH
54817: CALL 61213 0 3
// end ;
54821: GO 54719
54823: POP
54824: POP
// if enchidnas then
54825: LD_VAR 0 4
54829: IFFALSE 54896
// for i = 1 to enchidnas do
54831: LD_ADDR_VAR 0 11
54835: PUSH
54836: DOUBLE
54837: LD_INT 1
54839: DEC
54840: ST_TO_ADDR
54841: LD_VAR 0 4
54845: PUSH
54846: FOR_TO
54847: IFFALSE 54894
// begin hc_class = 13 ;
54849: LD_ADDR_OWVAR 28
54853: PUSH
54854: LD_INT 13
54856: ST_TO_ADDR
// hc_gallery =  ;
54857: LD_ADDR_OWVAR 33
54861: PUSH
54862: LD_STRING 
54864: ST_TO_ADDR
// animal := CreateHuman ;
54865: LD_ADDR_VAR 0 12
54869: PUSH
54870: CALL_OW 44
54874: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54875: LD_VAR 0 12
54879: PPUSH
54880: LD_VAR 0 8
54884: PPUSH
54885: LD_INT 0
54887: PPUSH
54888: CALL 61213 0 3
// end ;
54892: GO 54846
54894: POP
54895: POP
// if fishes then
54896: LD_VAR 0 7
54900: IFFALSE 54967
// for i = 1 to fishes do
54902: LD_ADDR_VAR 0 11
54906: PUSH
54907: DOUBLE
54908: LD_INT 1
54910: DEC
54911: ST_TO_ADDR
54912: LD_VAR 0 7
54916: PUSH
54917: FOR_TO
54918: IFFALSE 54965
// begin hc_class = 20 ;
54920: LD_ADDR_OWVAR 28
54924: PUSH
54925: LD_INT 20
54927: ST_TO_ADDR
// hc_gallery =  ;
54928: LD_ADDR_OWVAR 33
54932: PUSH
54933: LD_STRING 
54935: ST_TO_ADDR
// animal := CreateHuman ;
54936: LD_ADDR_VAR 0 12
54940: PUSH
54941: CALL_OW 44
54945: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54946: LD_VAR 0 12
54950: PPUSH
54951: LD_VAR 0 9
54955: PPUSH
54956: LD_INT 0
54958: PPUSH
54959: CALL 61213 0 3
// end ;
54963: GO 54917
54965: POP
54966: POP
// end ;
54967: LD_VAR 0 10
54971: RET
// export function WantHeal ( sci , unit ) ; begin
54972: LD_INT 0
54974: PPUSH
// if GetTaskList ( sci ) > 0 then
54975: LD_VAR 0 1
54979: PPUSH
54980: CALL_OW 437
54984: PUSH
54985: LD_INT 0
54987: GREATER
54988: IFFALSE 55058
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54990: LD_VAR 0 1
54994: PPUSH
54995: CALL_OW 437
54999: PUSH
55000: LD_INT 1
55002: ARRAY
55003: PUSH
55004: LD_INT 1
55006: ARRAY
55007: PUSH
55008: LD_STRING l
55010: EQUAL
55011: PUSH
55012: LD_VAR 0 1
55016: PPUSH
55017: CALL_OW 437
55021: PUSH
55022: LD_INT 1
55024: ARRAY
55025: PUSH
55026: LD_INT 4
55028: ARRAY
55029: PUSH
55030: LD_VAR 0 2
55034: EQUAL
55035: AND
55036: IFFALSE 55048
// result := true else
55038: LD_ADDR_VAR 0 3
55042: PUSH
55043: LD_INT 1
55045: ST_TO_ADDR
55046: GO 55056
// result := false ;
55048: LD_ADDR_VAR 0 3
55052: PUSH
55053: LD_INT 0
55055: ST_TO_ADDR
// end else
55056: GO 55066
// result := false ;
55058: LD_ADDR_VAR 0 3
55062: PUSH
55063: LD_INT 0
55065: ST_TO_ADDR
// end ;
55066: LD_VAR 0 3
55070: RET
// export function HealTarget ( sci ) ; begin
55071: LD_INT 0
55073: PPUSH
// if not sci then
55074: LD_VAR 0 1
55078: NOT
55079: IFFALSE 55083
// exit ;
55081: GO 55148
// result := 0 ;
55083: LD_ADDR_VAR 0 2
55087: PUSH
55088: LD_INT 0
55090: ST_TO_ADDR
// if GetTaskList ( sci ) then
55091: LD_VAR 0 1
55095: PPUSH
55096: CALL_OW 437
55100: IFFALSE 55148
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55102: LD_VAR 0 1
55106: PPUSH
55107: CALL_OW 437
55111: PUSH
55112: LD_INT 1
55114: ARRAY
55115: PUSH
55116: LD_INT 1
55118: ARRAY
55119: PUSH
55120: LD_STRING l
55122: EQUAL
55123: IFFALSE 55148
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55125: LD_ADDR_VAR 0 2
55129: PUSH
55130: LD_VAR 0 1
55134: PPUSH
55135: CALL_OW 437
55139: PUSH
55140: LD_INT 1
55142: ARRAY
55143: PUSH
55144: LD_INT 4
55146: ARRAY
55147: ST_TO_ADDR
// end ;
55148: LD_VAR 0 2
55152: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
55153: LD_INT 0
55155: PPUSH
55156: PPUSH
55157: PPUSH
55158: PPUSH
55159: PPUSH
55160: PPUSH
55161: PPUSH
55162: PPUSH
55163: PPUSH
55164: PPUSH
55165: PPUSH
55166: PPUSH
55167: PPUSH
55168: PPUSH
55169: PPUSH
55170: PPUSH
55171: PPUSH
55172: PPUSH
55173: PPUSH
55174: PPUSH
55175: PPUSH
55176: PPUSH
55177: PPUSH
55178: PPUSH
55179: PPUSH
55180: PPUSH
55181: PPUSH
55182: PPUSH
55183: PPUSH
55184: PPUSH
55185: PPUSH
55186: PPUSH
55187: PPUSH
55188: PPUSH
// if not list then
55189: LD_VAR 0 1
55193: NOT
55194: IFFALSE 55198
// exit ;
55196: GO 59824
// base := list [ 1 ] ;
55198: LD_ADDR_VAR 0 3
55202: PUSH
55203: LD_VAR 0 1
55207: PUSH
55208: LD_INT 1
55210: ARRAY
55211: ST_TO_ADDR
// group := list [ 2 ] ;
55212: LD_ADDR_VAR 0 4
55216: PUSH
55217: LD_VAR 0 1
55221: PUSH
55222: LD_INT 2
55224: ARRAY
55225: ST_TO_ADDR
// path := list [ 3 ] ;
55226: LD_ADDR_VAR 0 5
55230: PUSH
55231: LD_VAR 0 1
55235: PUSH
55236: LD_INT 3
55238: ARRAY
55239: ST_TO_ADDR
// flags := list [ 4 ] ;
55240: LD_ADDR_VAR 0 6
55244: PUSH
55245: LD_VAR 0 1
55249: PUSH
55250: LD_INT 4
55252: ARRAY
55253: ST_TO_ADDR
// mined := [ ] ;
55254: LD_ADDR_VAR 0 27
55258: PUSH
55259: EMPTY
55260: ST_TO_ADDR
// bombed := [ ] ;
55261: LD_ADDR_VAR 0 28
55265: PUSH
55266: EMPTY
55267: ST_TO_ADDR
// healers := [ ] ;
55268: LD_ADDR_VAR 0 31
55272: PUSH
55273: EMPTY
55274: ST_TO_ADDR
// to_heal := [ ] ;
55275: LD_ADDR_VAR 0 30
55279: PUSH
55280: EMPTY
55281: ST_TO_ADDR
// repairs := [ ] ;
55282: LD_ADDR_VAR 0 33
55286: PUSH
55287: EMPTY
55288: ST_TO_ADDR
// to_repair := [ ] ;
55289: LD_ADDR_VAR 0 32
55293: PUSH
55294: EMPTY
55295: ST_TO_ADDR
// if not group or not path then
55296: LD_VAR 0 4
55300: NOT
55301: PUSH
55302: LD_VAR 0 5
55306: NOT
55307: OR
55308: IFFALSE 55312
// exit ;
55310: GO 59824
// side := GetSide ( group [ 1 ] ) ;
55312: LD_ADDR_VAR 0 35
55316: PUSH
55317: LD_VAR 0 4
55321: PUSH
55322: LD_INT 1
55324: ARRAY
55325: PPUSH
55326: CALL_OW 255
55330: ST_TO_ADDR
// if flags then
55331: LD_VAR 0 6
55335: IFFALSE 55479
// begin f_ignore_area := flags [ 1 ] ;
55337: LD_ADDR_VAR 0 17
55341: PUSH
55342: LD_VAR 0 6
55346: PUSH
55347: LD_INT 1
55349: ARRAY
55350: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
55351: LD_ADDR_VAR 0 18
55355: PUSH
55356: LD_VAR 0 6
55360: PUSH
55361: LD_INT 2
55363: ARRAY
55364: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
55365: LD_ADDR_VAR 0 19
55369: PUSH
55370: LD_VAR 0 6
55374: PUSH
55375: LD_INT 3
55377: ARRAY
55378: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
55379: LD_ADDR_VAR 0 20
55383: PUSH
55384: LD_VAR 0 6
55388: PUSH
55389: LD_INT 4
55391: ARRAY
55392: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
55393: LD_ADDR_VAR 0 21
55397: PUSH
55398: LD_VAR 0 6
55402: PUSH
55403: LD_INT 5
55405: ARRAY
55406: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
55407: LD_ADDR_VAR 0 22
55411: PUSH
55412: LD_VAR 0 6
55416: PUSH
55417: LD_INT 6
55419: ARRAY
55420: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
55421: LD_ADDR_VAR 0 23
55425: PUSH
55426: LD_VAR 0 6
55430: PUSH
55431: LD_INT 7
55433: ARRAY
55434: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
55435: LD_ADDR_VAR 0 24
55439: PUSH
55440: LD_VAR 0 6
55444: PUSH
55445: LD_INT 8
55447: ARRAY
55448: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
55449: LD_ADDR_VAR 0 25
55453: PUSH
55454: LD_VAR 0 6
55458: PUSH
55459: LD_INT 9
55461: ARRAY
55462: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
55463: LD_ADDR_VAR 0 26
55467: PUSH
55468: LD_VAR 0 6
55472: PUSH
55473: LD_INT 10
55475: ARRAY
55476: ST_TO_ADDR
// end else
55477: GO 55559
// begin f_ignore_area := false ;
55479: LD_ADDR_VAR 0 17
55483: PUSH
55484: LD_INT 0
55486: ST_TO_ADDR
// f_capture := false ;
55487: LD_ADDR_VAR 0 18
55491: PUSH
55492: LD_INT 0
55494: ST_TO_ADDR
// f_ignore_civ := false ;
55495: LD_ADDR_VAR 0 19
55499: PUSH
55500: LD_INT 0
55502: ST_TO_ADDR
// f_murder := false ;
55503: LD_ADDR_VAR 0 20
55507: PUSH
55508: LD_INT 0
55510: ST_TO_ADDR
// f_mines := false ;
55511: LD_ADDR_VAR 0 21
55515: PUSH
55516: LD_INT 0
55518: ST_TO_ADDR
// f_repair := false ;
55519: LD_ADDR_VAR 0 22
55523: PUSH
55524: LD_INT 0
55526: ST_TO_ADDR
// f_heal := false ;
55527: LD_ADDR_VAR 0 23
55531: PUSH
55532: LD_INT 0
55534: ST_TO_ADDR
// f_spacetime := false ;
55535: LD_ADDR_VAR 0 24
55539: PUSH
55540: LD_INT 0
55542: ST_TO_ADDR
// f_attack_depot := false ;
55543: LD_ADDR_VAR 0 25
55547: PUSH
55548: LD_INT 0
55550: ST_TO_ADDR
// f_crawl := false ;
55551: LD_ADDR_VAR 0 26
55555: PUSH
55556: LD_INT 0
55558: ST_TO_ADDR
// end ; if f_heal then
55559: LD_VAR 0 23
55563: IFFALSE 55590
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
55565: LD_ADDR_VAR 0 31
55569: PUSH
55570: LD_VAR 0 4
55574: PPUSH
55575: LD_INT 25
55577: PUSH
55578: LD_INT 4
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PPUSH
55585: CALL_OW 72
55589: ST_TO_ADDR
// if f_repair then
55590: LD_VAR 0 22
55594: IFFALSE 55621
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
55596: LD_ADDR_VAR 0 33
55600: PUSH
55601: LD_VAR 0 4
55605: PPUSH
55606: LD_INT 25
55608: PUSH
55609: LD_INT 3
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PPUSH
55616: CALL_OW 72
55620: ST_TO_ADDR
// units_path := [ ] ;
55621: LD_ADDR_VAR 0 16
55625: PUSH
55626: EMPTY
55627: ST_TO_ADDR
// for i = 1 to group do
55628: LD_ADDR_VAR 0 7
55632: PUSH
55633: DOUBLE
55634: LD_INT 1
55636: DEC
55637: ST_TO_ADDR
55638: LD_VAR 0 4
55642: PUSH
55643: FOR_TO
55644: IFFALSE 55673
// units_path := Replace ( units_path , i , path ) ;
55646: LD_ADDR_VAR 0 16
55650: PUSH
55651: LD_VAR 0 16
55655: PPUSH
55656: LD_VAR 0 7
55660: PPUSH
55661: LD_VAR 0 5
55665: PPUSH
55666: CALL_OW 1
55670: ST_TO_ADDR
55671: GO 55643
55673: POP
55674: POP
// repeat for i = group downto 1 do
55675: LD_ADDR_VAR 0 7
55679: PUSH
55680: DOUBLE
55681: LD_VAR 0 4
55685: INC
55686: ST_TO_ADDR
55687: LD_INT 1
55689: PUSH
55690: FOR_DOWNTO
55691: IFFALSE 59787
// begin wait ( 5 ) ;
55693: LD_INT 5
55695: PPUSH
55696: CALL_OW 67
// tmp := [ ] ;
55700: LD_ADDR_VAR 0 14
55704: PUSH
55705: EMPTY
55706: ST_TO_ADDR
// attacking := false ;
55707: LD_ADDR_VAR 0 29
55711: PUSH
55712: LD_INT 0
55714: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
55715: LD_VAR 0 4
55719: PUSH
55720: LD_VAR 0 7
55724: ARRAY
55725: PPUSH
55726: CALL_OW 301
55730: PUSH
55731: LD_VAR 0 4
55735: PUSH
55736: LD_VAR 0 7
55740: ARRAY
55741: NOT
55742: OR
55743: IFFALSE 55852
// begin if GetType ( group [ i ] ) = unit_human then
55745: LD_VAR 0 4
55749: PUSH
55750: LD_VAR 0 7
55754: ARRAY
55755: PPUSH
55756: CALL_OW 247
55760: PUSH
55761: LD_INT 1
55763: EQUAL
55764: IFFALSE 55810
// begin to_heal := to_heal diff group [ i ] ;
55766: LD_ADDR_VAR 0 30
55770: PUSH
55771: LD_VAR 0 30
55775: PUSH
55776: LD_VAR 0 4
55780: PUSH
55781: LD_VAR 0 7
55785: ARRAY
55786: DIFF
55787: ST_TO_ADDR
// healers := healers diff group [ i ] ;
55788: LD_ADDR_VAR 0 31
55792: PUSH
55793: LD_VAR 0 31
55797: PUSH
55798: LD_VAR 0 4
55802: PUSH
55803: LD_VAR 0 7
55807: ARRAY
55808: DIFF
55809: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
55810: LD_ADDR_VAR 0 4
55814: PUSH
55815: LD_VAR 0 4
55819: PPUSH
55820: LD_VAR 0 7
55824: PPUSH
55825: CALL_OW 3
55829: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
55830: LD_ADDR_VAR 0 16
55834: PUSH
55835: LD_VAR 0 16
55839: PPUSH
55840: LD_VAR 0 7
55844: PPUSH
55845: CALL_OW 3
55849: ST_TO_ADDR
// continue ;
55850: GO 55690
// end ; if f_repair then
55852: LD_VAR 0 22
55856: IFFALSE 56345
// begin if GetType ( group [ i ] ) = unit_vehicle then
55858: LD_VAR 0 4
55862: PUSH
55863: LD_VAR 0 7
55867: ARRAY
55868: PPUSH
55869: CALL_OW 247
55873: PUSH
55874: LD_INT 2
55876: EQUAL
55877: IFFALSE 56067
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
55879: LD_VAR 0 4
55883: PUSH
55884: LD_VAR 0 7
55888: ARRAY
55889: PPUSH
55890: CALL_OW 256
55894: PUSH
55895: LD_INT 700
55897: LESS
55898: PUSH
55899: LD_VAR 0 4
55903: PUSH
55904: LD_VAR 0 7
55908: ARRAY
55909: PUSH
55910: LD_VAR 0 32
55914: IN
55915: NOT
55916: AND
55917: IFFALSE 55941
// to_repair := to_repair union group [ i ] ;
55919: LD_ADDR_VAR 0 32
55923: PUSH
55924: LD_VAR 0 32
55928: PUSH
55929: LD_VAR 0 4
55933: PUSH
55934: LD_VAR 0 7
55938: ARRAY
55939: UNION
55940: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
55941: LD_VAR 0 4
55945: PUSH
55946: LD_VAR 0 7
55950: ARRAY
55951: PPUSH
55952: CALL_OW 256
55956: PUSH
55957: LD_INT 1000
55959: EQUAL
55960: PUSH
55961: LD_VAR 0 4
55965: PUSH
55966: LD_VAR 0 7
55970: ARRAY
55971: PUSH
55972: LD_VAR 0 32
55976: IN
55977: AND
55978: IFFALSE 56002
// to_repair := to_repair diff group [ i ] ;
55980: LD_ADDR_VAR 0 32
55984: PUSH
55985: LD_VAR 0 32
55989: PUSH
55990: LD_VAR 0 4
55994: PUSH
55995: LD_VAR 0 7
55999: ARRAY
56000: DIFF
56001: ST_TO_ADDR
// if group [ i ] in to_repair then
56002: LD_VAR 0 4
56006: PUSH
56007: LD_VAR 0 7
56011: ARRAY
56012: PUSH
56013: LD_VAR 0 32
56017: IN
56018: IFFALSE 56065
// begin if not IsInArea ( group [ i ] , f_repair ) then
56020: LD_VAR 0 4
56024: PUSH
56025: LD_VAR 0 7
56029: ARRAY
56030: PPUSH
56031: LD_VAR 0 22
56035: PPUSH
56036: CALL_OW 308
56040: NOT
56041: IFFALSE 56063
// ComMoveToArea ( group [ i ] , f_repair ) ;
56043: LD_VAR 0 4
56047: PUSH
56048: LD_VAR 0 7
56052: ARRAY
56053: PPUSH
56054: LD_VAR 0 22
56058: PPUSH
56059: CALL_OW 113
// continue ;
56063: GO 55690
// end ; end else
56065: GO 56345
// if group [ i ] in repairs then
56067: LD_VAR 0 4
56071: PUSH
56072: LD_VAR 0 7
56076: ARRAY
56077: PUSH
56078: LD_VAR 0 33
56082: IN
56083: IFFALSE 56345
// begin if IsInUnit ( group [ i ] ) then
56085: LD_VAR 0 4
56089: PUSH
56090: LD_VAR 0 7
56094: ARRAY
56095: PPUSH
56096: CALL_OW 310
56100: IFFALSE 56168
// begin z := IsInUnit ( group [ i ] ) ;
56102: LD_ADDR_VAR 0 13
56106: PUSH
56107: LD_VAR 0 4
56111: PUSH
56112: LD_VAR 0 7
56116: ARRAY
56117: PPUSH
56118: CALL_OW 310
56122: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
56123: LD_VAR 0 13
56127: PUSH
56128: LD_VAR 0 32
56132: IN
56133: PUSH
56134: LD_VAR 0 13
56138: PPUSH
56139: LD_VAR 0 22
56143: PPUSH
56144: CALL_OW 308
56148: AND
56149: IFFALSE 56166
// ComExitVehicle ( group [ i ] ) ;
56151: LD_VAR 0 4
56155: PUSH
56156: LD_VAR 0 7
56160: ARRAY
56161: PPUSH
56162: CALL_OW 121
// end else
56166: GO 56345
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
56168: LD_ADDR_VAR 0 13
56172: PUSH
56173: LD_VAR 0 4
56177: PPUSH
56178: LD_INT 95
56180: PUSH
56181: LD_VAR 0 22
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 58
56192: PUSH
56193: EMPTY
56194: LIST
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PPUSH
56200: CALL_OW 72
56204: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
56205: LD_VAR 0 4
56209: PUSH
56210: LD_VAR 0 7
56214: ARRAY
56215: PPUSH
56216: CALL_OW 314
56220: NOT
56221: IFFALSE 56343
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
56223: LD_ADDR_VAR 0 10
56227: PUSH
56228: LD_VAR 0 13
56232: PPUSH
56233: LD_VAR 0 4
56237: PUSH
56238: LD_VAR 0 7
56242: ARRAY
56243: PPUSH
56244: CALL_OW 74
56248: ST_TO_ADDR
// if not x then
56249: LD_VAR 0 10
56253: NOT
56254: IFFALSE 56258
// continue ;
56256: GO 55690
// if GetLives ( x ) < 1000 then
56258: LD_VAR 0 10
56262: PPUSH
56263: CALL_OW 256
56267: PUSH
56268: LD_INT 1000
56270: LESS
56271: IFFALSE 56295
// ComRepairVehicle ( group [ i ] , x ) else
56273: LD_VAR 0 4
56277: PUSH
56278: LD_VAR 0 7
56282: ARRAY
56283: PPUSH
56284: LD_VAR 0 10
56288: PPUSH
56289: CALL_OW 129
56293: GO 56343
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
56295: LD_VAR 0 23
56299: PUSH
56300: LD_VAR 0 4
56304: PUSH
56305: LD_VAR 0 7
56309: ARRAY
56310: PPUSH
56311: CALL_OW 256
56315: PUSH
56316: LD_INT 1000
56318: LESS
56319: AND
56320: NOT
56321: IFFALSE 56343
// ComEnterUnit ( group [ i ] , x ) ;
56323: LD_VAR 0 4
56327: PUSH
56328: LD_VAR 0 7
56332: ARRAY
56333: PPUSH
56334: LD_VAR 0 10
56338: PPUSH
56339: CALL_OW 120
// end ; continue ;
56343: GO 55690
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
56345: LD_VAR 0 23
56349: PUSH
56350: LD_VAR 0 4
56354: PUSH
56355: LD_VAR 0 7
56359: ARRAY
56360: PPUSH
56361: CALL_OW 247
56365: PUSH
56366: LD_INT 1
56368: EQUAL
56369: AND
56370: IFFALSE 56848
// begin if group [ i ] in healers then
56372: LD_VAR 0 4
56376: PUSH
56377: LD_VAR 0 7
56381: ARRAY
56382: PUSH
56383: LD_VAR 0 31
56387: IN
56388: IFFALSE 56661
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
56390: LD_VAR 0 4
56394: PUSH
56395: LD_VAR 0 7
56399: ARRAY
56400: PPUSH
56401: LD_VAR 0 23
56405: PPUSH
56406: CALL_OW 308
56410: NOT
56411: PUSH
56412: LD_VAR 0 4
56416: PUSH
56417: LD_VAR 0 7
56421: ARRAY
56422: PPUSH
56423: CALL_OW 314
56427: NOT
56428: AND
56429: IFFALSE 56453
// ComMoveToArea ( group [ i ] , f_heal ) else
56431: LD_VAR 0 4
56435: PUSH
56436: LD_VAR 0 7
56440: ARRAY
56441: PPUSH
56442: LD_VAR 0 23
56446: PPUSH
56447: CALL_OW 113
56451: GO 56659
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
56453: LD_VAR 0 4
56457: PUSH
56458: LD_VAR 0 7
56462: ARRAY
56463: PPUSH
56464: CALL 55071 0 1
56468: PPUSH
56469: CALL_OW 256
56473: PUSH
56474: LD_INT 1000
56476: EQUAL
56477: IFFALSE 56496
// ComStop ( group [ i ] ) else
56479: LD_VAR 0 4
56483: PUSH
56484: LD_VAR 0 7
56488: ARRAY
56489: PPUSH
56490: CALL_OW 141
56494: GO 56659
// if not HasTask ( group [ i ] ) and to_heal then
56496: LD_VAR 0 4
56500: PUSH
56501: LD_VAR 0 7
56505: ARRAY
56506: PPUSH
56507: CALL_OW 314
56511: NOT
56512: PUSH
56513: LD_VAR 0 30
56517: AND
56518: IFFALSE 56659
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
56520: LD_ADDR_VAR 0 13
56524: PUSH
56525: LD_VAR 0 30
56529: PPUSH
56530: LD_INT 3
56532: PUSH
56533: LD_INT 54
56535: PUSH
56536: EMPTY
56537: LIST
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PPUSH
56543: CALL_OW 72
56547: PPUSH
56548: LD_VAR 0 4
56552: PUSH
56553: LD_VAR 0 7
56557: ARRAY
56558: PPUSH
56559: CALL_OW 74
56563: ST_TO_ADDR
// if z then
56564: LD_VAR 0 13
56568: IFFALSE 56659
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
56570: LD_INT 91
56572: PUSH
56573: LD_VAR 0 13
56577: PUSH
56578: LD_INT 10
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 81
56588: PUSH
56589: LD_VAR 0 13
56593: PPUSH
56594: CALL_OW 255
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PPUSH
56607: CALL_OW 69
56611: PUSH
56612: LD_INT 0
56614: EQUAL
56615: IFFALSE 56639
// ComHeal ( group [ i ] , z ) else
56617: LD_VAR 0 4
56621: PUSH
56622: LD_VAR 0 7
56626: ARRAY
56627: PPUSH
56628: LD_VAR 0 13
56632: PPUSH
56633: CALL_OW 128
56637: GO 56659
// ComMoveToArea ( group [ i ] , f_heal ) ;
56639: LD_VAR 0 4
56643: PUSH
56644: LD_VAR 0 7
56648: ARRAY
56649: PPUSH
56650: LD_VAR 0 23
56654: PPUSH
56655: CALL_OW 113
// end ; continue ;
56659: GO 55690
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
56661: LD_VAR 0 4
56665: PUSH
56666: LD_VAR 0 7
56670: ARRAY
56671: PPUSH
56672: CALL_OW 256
56676: PUSH
56677: LD_INT 700
56679: LESS
56680: PUSH
56681: LD_VAR 0 4
56685: PUSH
56686: LD_VAR 0 7
56690: ARRAY
56691: PUSH
56692: LD_VAR 0 30
56696: IN
56697: NOT
56698: AND
56699: IFFALSE 56723
// to_heal := to_heal union group [ i ] ;
56701: LD_ADDR_VAR 0 30
56705: PUSH
56706: LD_VAR 0 30
56710: PUSH
56711: LD_VAR 0 4
56715: PUSH
56716: LD_VAR 0 7
56720: ARRAY
56721: UNION
56722: ST_TO_ADDR
// if group [ i ] in to_heal then
56723: LD_VAR 0 4
56727: PUSH
56728: LD_VAR 0 7
56732: ARRAY
56733: PUSH
56734: LD_VAR 0 30
56738: IN
56739: IFFALSE 56848
// begin if GetLives ( group [ i ] ) = 1000 then
56741: LD_VAR 0 4
56745: PUSH
56746: LD_VAR 0 7
56750: ARRAY
56751: PPUSH
56752: CALL_OW 256
56756: PUSH
56757: LD_INT 1000
56759: EQUAL
56760: IFFALSE 56786
// to_heal := to_heal diff group [ i ] else
56762: LD_ADDR_VAR 0 30
56766: PUSH
56767: LD_VAR 0 30
56771: PUSH
56772: LD_VAR 0 4
56776: PUSH
56777: LD_VAR 0 7
56781: ARRAY
56782: DIFF
56783: ST_TO_ADDR
56784: GO 56848
// begin if not IsInArea ( group [ i ] , to_heal ) then
56786: LD_VAR 0 4
56790: PUSH
56791: LD_VAR 0 7
56795: ARRAY
56796: PPUSH
56797: LD_VAR 0 30
56801: PPUSH
56802: CALL_OW 308
56806: NOT
56807: IFFALSE 56831
// ComMoveToArea ( group [ i ] , f_heal ) else
56809: LD_VAR 0 4
56813: PUSH
56814: LD_VAR 0 7
56818: ARRAY
56819: PPUSH
56820: LD_VAR 0 23
56824: PPUSH
56825: CALL_OW 113
56829: GO 56846
// ComHold ( group [ i ] ) ;
56831: LD_VAR 0 4
56835: PUSH
56836: LD_VAR 0 7
56840: ARRAY
56841: PPUSH
56842: CALL_OW 140
// continue ;
56846: GO 55690
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
56848: LD_VAR 0 4
56852: PUSH
56853: LD_VAR 0 7
56857: ARRAY
56858: PPUSH
56859: LD_INT 10
56861: PPUSH
56862: CALL 53468 0 2
56866: NOT
56867: PUSH
56868: LD_VAR 0 16
56872: PUSH
56873: LD_VAR 0 7
56877: ARRAY
56878: PUSH
56879: EMPTY
56880: EQUAL
56881: NOT
56882: AND
56883: IFFALSE 57149
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
56885: LD_VAR 0 4
56889: PUSH
56890: LD_VAR 0 7
56894: ARRAY
56895: PPUSH
56896: CALL_OW 262
56900: PUSH
56901: LD_INT 1
56903: PUSH
56904: LD_INT 2
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: IN
56911: IFFALSE 56952
// if GetFuel ( group [ i ] ) < 10 then
56913: LD_VAR 0 4
56917: PUSH
56918: LD_VAR 0 7
56922: ARRAY
56923: PPUSH
56924: CALL_OW 261
56928: PUSH
56929: LD_INT 10
56931: LESS
56932: IFFALSE 56952
// SetFuel ( group [ i ] , 12 ) ;
56934: LD_VAR 0 4
56938: PUSH
56939: LD_VAR 0 7
56943: ARRAY
56944: PPUSH
56945: LD_INT 12
56947: PPUSH
56948: CALL_OW 240
// if units_path [ i ] then
56952: LD_VAR 0 16
56956: PUSH
56957: LD_VAR 0 7
56961: ARRAY
56962: IFFALSE 57147
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
56964: LD_VAR 0 4
56968: PUSH
56969: LD_VAR 0 7
56973: ARRAY
56974: PPUSH
56975: LD_VAR 0 16
56979: PUSH
56980: LD_VAR 0 7
56984: ARRAY
56985: PUSH
56986: LD_INT 1
56988: ARRAY
56989: PUSH
56990: LD_INT 1
56992: ARRAY
56993: PPUSH
56994: LD_VAR 0 16
56998: PUSH
56999: LD_VAR 0 7
57003: ARRAY
57004: PUSH
57005: LD_INT 1
57007: ARRAY
57008: PUSH
57009: LD_INT 2
57011: ARRAY
57012: PPUSH
57013: CALL_OW 297
57017: PUSH
57018: LD_INT 6
57020: GREATER
57021: IFFALSE 57096
// begin if not HasTask ( group [ i ] ) then
57023: LD_VAR 0 4
57027: PUSH
57028: LD_VAR 0 7
57032: ARRAY
57033: PPUSH
57034: CALL_OW 314
57038: NOT
57039: IFFALSE 57094
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
57041: LD_VAR 0 4
57045: PUSH
57046: LD_VAR 0 7
57050: ARRAY
57051: PPUSH
57052: LD_VAR 0 16
57056: PUSH
57057: LD_VAR 0 7
57061: ARRAY
57062: PUSH
57063: LD_INT 1
57065: ARRAY
57066: PUSH
57067: LD_INT 1
57069: ARRAY
57070: PPUSH
57071: LD_VAR 0 16
57075: PUSH
57076: LD_VAR 0 7
57080: ARRAY
57081: PUSH
57082: LD_INT 1
57084: ARRAY
57085: PUSH
57086: LD_INT 2
57088: ARRAY
57089: PPUSH
57090: CALL_OW 114
// end else
57094: GO 57147
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
57096: LD_ADDR_VAR 0 15
57100: PUSH
57101: LD_VAR 0 16
57105: PUSH
57106: LD_VAR 0 7
57110: ARRAY
57111: PPUSH
57112: LD_INT 1
57114: PPUSH
57115: CALL_OW 3
57119: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
57120: LD_ADDR_VAR 0 16
57124: PUSH
57125: LD_VAR 0 16
57129: PPUSH
57130: LD_VAR 0 7
57134: PPUSH
57135: LD_VAR 0 15
57139: PPUSH
57140: CALL_OW 1
57144: ST_TO_ADDR
// continue ;
57145: GO 55690
// end ; end ; end else
57147: GO 59785
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
57149: LD_ADDR_VAR 0 14
57153: PUSH
57154: LD_INT 81
57156: PUSH
57157: LD_VAR 0 4
57161: PUSH
57162: LD_VAR 0 7
57166: ARRAY
57167: PPUSH
57168: CALL_OW 255
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PPUSH
57177: CALL_OW 69
57181: ST_TO_ADDR
// if not tmp then
57182: LD_VAR 0 14
57186: NOT
57187: IFFALSE 57191
// continue ;
57189: GO 55690
// if f_ignore_area then
57191: LD_VAR 0 17
57195: IFFALSE 57283
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
57197: LD_ADDR_VAR 0 15
57201: PUSH
57202: LD_VAR 0 14
57206: PPUSH
57207: LD_INT 3
57209: PUSH
57210: LD_INT 92
57212: PUSH
57213: LD_VAR 0 17
57217: PUSH
57218: LD_INT 1
57220: ARRAY
57221: PUSH
57222: LD_VAR 0 17
57226: PUSH
57227: LD_INT 2
57229: ARRAY
57230: PUSH
57231: LD_VAR 0 17
57235: PUSH
57236: LD_INT 3
57238: ARRAY
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PPUSH
57250: CALL_OW 72
57254: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
57255: LD_VAR 0 14
57259: PUSH
57260: LD_VAR 0 15
57264: DIFF
57265: IFFALSE 57283
// tmp := tmp diff tmp2 ;
57267: LD_ADDR_VAR 0 14
57271: PUSH
57272: LD_VAR 0 14
57276: PUSH
57277: LD_VAR 0 15
57281: DIFF
57282: ST_TO_ADDR
// end ; if not f_murder then
57283: LD_VAR 0 20
57287: NOT
57288: IFFALSE 57346
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
57290: LD_ADDR_VAR 0 15
57294: PUSH
57295: LD_VAR 0 14
57299: PPUSH
57300: LD_INT 3
57302: PUSH
57303: LD_INT 50
57305: PUSH
57306: EMPTY
57307: LIST
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PPUSH
57313: CALL_OW 72
57317: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
57318: LD_VAR 0 14
57322: PUSH
57323: LD_VAR 0 15
57327: DIFF
57328: IFFALSE 57346
// tmp := tmp diff tmp2 ;
57330: LD_ADDR_VAR 0 14
57334: PUSH
57335: LD_VAR 0 14
57339: PUSH
57340: LD_VAR 0 15
57344: DIFF
57345: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
57346: LD_ADDR_VAR 0 14
57350: PUSH
57351: LD_VAR 0 4
57355: PUSH
57356: LD_VAR 0 7
57360: ARRAY
57361: PPUSH
57362: LD_VAR 0 14
57366: PPUSH
57367: LD_INT 1
57369: PPUSH
57370: LD_INT 1
57372: PPUSH
57373: CALL 27135 0 4
57377: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
57378: LD_VAR 0 4
57382: PUSH
57383: LD_VAR 0 7
57387: ARRAY
57388: PPUSH
57389: CALL_OW 257
57393: PUSH
57394: LD_INT 1
57396: EQUAL
57397: IFFALSE 57845
// begin if WantPlant ( group [ i ] ) then
57399: LD_VAR 0 4
57403: PUSH
57404: LD_VAR 0 7
57408: ARRAY
57409: PPUSH
57410: CALL 26636 0 1
57414: IFFALSE 57418
// continue ;
57416: GO 55690
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
57418: LD_VAR 0 18
57422: PUSH
57423: LD_VAR 0 4
57427: PUSH
57428: LD_VAR 0 7
57432: ARRAY
57433: PPUSH
57434: CALL_OW 310
57438: NOT
57439: AND
57440: PUSH
57441: LD_VAR 0 14
57445: PUSH
57446: LD_INT 1
57448: ARRAY
57449: PUSH
57450: LD_VAR 0 14
57454: PPUSH
57455: LD_INT 21
57457: PUSH
57458: LD_INT 2
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 58
57467: PUSH
57468: EMPTY
57469: LIST
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PPUSH
57475: CALL_OW 72
57479: IN
57480: AND
57481: IFFALSE 57517
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
57483: LD_VAR 0 4
57487: PUSH
57488: LD_VAR 0 7
57492: ARRAY
57493: PPUSH
57494: LD_VAR 0 14
57498: PUSH
57499: LD_INT 1
57501: ARRAY
57502: PPUSH
57503: CALL_OW 120
// attacking := true ;
57507: LD_ADDR_VAR 0 29
57511: PUSH
57512: LD_INT 1
57514: ST_TO_ADDR
// continue ;
57515: GO 55690
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
57517: LD_VAR 0 26
57521: PUSH
57522: LD_VAR 0 4
57526: PUSH
57527: LD_VAR 0 7
57531: ARRAY
57532: PPUSH
57533: CALL_OW 257
57537: PUSH
57538: LD_INT 1
57540: EQUAL
57541: AND
57542: PUSH
57543: LD_VAR 0 4
57547: PUSH
57548: LD_VAR 0 7
57552: ARRAY
57553: PPUSH
57554: CALL_OW 256
57558: PUSH
57559: LD_INT 800
57561: LESS
57562: AND
57563: PUSH
57564: LD_VAR 0 4
57568: PUSH
57569: LD_VAR 0 7
57573: ARRAY
57574: PPUSH
57575: CALL_OW 318
57579: NOT
57580: AND
57581: IFFALSE 57598
// ComCrawl ( group [ i ] ) ;
57583: LD_VAR 0 4
57587: PUSH
57588: LD_VAR 0 7
57592: ARRAY
57593: PPUSH
57594: CALL_OW 137
// if f_mines then
57598: LD_VAR 0 21
57602: IFFALSE 57845
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
57604: LD_VAR 0 14
57608: PUSH
57609: LD_INT 1
57611: ARRAY
57612: PPUSH
57613: CALL_OW 247
57617: PUSH
57618: LD_INT 3
57620: EQUAL
57621: PUSH
57622: LD_VAR 0 14
57626: PUSH
57627: LD_INT 1
57629: ARRAY
57630: PUSH
57631: LD_VAR 0 27
57635: IN
57636: NOT
57637: AND
57638: IFFALSE 57845
// begin x := GetX ( tmp [ 1 ] ) ;
57640: LD_ADDR_VAR 0 10
57644: PUSH
57645: LD_VAR 0 14
57649: PUSH
57650: LD_INT 1
57652: ARRAY
57653: PPUSH
57654: CALL_OW 250
57658: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
57659: LD_ADDR_VAR 0 11
57663: PUSH
57664: LD_VAR 0 14
57668: PUSH
57669: LD_INT 1
57671: ARRAY
57672: PPUSH
57673: CALL_OW 251
57677: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
57678: LD_ADDR_VAR 0 12
57682: PUSH
57683: LD_VAR 0 4
57687: PUSH
57688: LD_VAR 0 7
57692: ARRAY
57693: PPUSH
57694: CALL 53553 0 1
57698: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
57699: LD_VAR 0 4
57703: PUSH
57704: LD_VAR 0 7
57708: ARRAY
57709: PPUSH
57710: LD_VAR 0 10
57714: PPUSH
57715: LD_VAR 0 11
57719: PPUSH
57720: LD_VAR 0 14
57724: PUSH
57725: LD_INT 1
57727: ARRAY
57728: PPUSH
57729: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
57733: LD_VAR 0 4
57737: PUSH
57738: LD_VAR 0 7
57742: ARRAY
57743: PPUSH
57744: LD_VAR 0 10
57748: PPUSH
57749: LD_VAR 0 12
57753: PPUSH
57754: LD_INT 7
57756: PPUSH
57757: CALL_OW 272
57761: PPUSH
57762: LD_VAR 0 11
57766: PPUSH
57767: LD_VAR 0 12
57771: PPUSH
57772: LD_INT 7
57774: PPUSH
57775: CALL_OW 273
57779: PPUSH
57780: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
57784: LD_VAR 0 4
57788: PUSH
57789: LD_VAR 0 7
57793: ARRAY
57794: PPUSH
57795: LD_INT 71
57797: PPUSH
57798: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
57802: LD_ADDR_VAR 0 27
57806: PUSH
57807: LD_VAR 0 27
57811: PPUSH
57812: LD_VAR 0 27
57816: PUSH
57817: LD_INT 1
57819: PLUS
57820: PPUSH
57821: LD_VAR 0 14
57825: PUSH
57826: LD_INT 1
57828: ARRAY
57829: PPUSH
57830: CALL_OW 1
57834: ST_TO_ADDR
// attacking := true ;
57835: LD_ADDR_VAR 0 29
57839: PUSH
57840: LD_INT 1
57842: ST_TO_ADDR
// continue ;
57843: GO 55690
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
57845: LD_VAR 0 4
57849: PUSH
57850: LD_VAR 0 7
57854: ARRAY
57855: PPUSH
57856: CALL_OW 257
57860: PUSH
57861: LD_INT 17
57863: EQUAL
57864: PUSH
57865: LD_VAR 0 4
57869: PUSH
57870: LD_VAR 0 7
57874: ARRAY
57875: PPUSH
57876: CALL_OW 110
57880: PUSH
57881: LD_INT 71
57883: EQUAL
57884: NOT
57885: AND
57886: IFFALSE 58032
// begin attacking := false ;
57888: LD_ADDR_VAR 0 29
57892: PUSH
57893: LD_INT 0
57895: ST_TO_ADDR
// k := 5 ;
57896: LD_ADDR_VAR 0 9
57900: PUSH
57901: LD_INT 5
57903: ST_TO_ADDR
// if tmp < k then
57904: LD_VAR 0 14
57908: PUSH
57909: LD_VAR 0 9
57913: LESS
57914: IFFALSE 57926
// k := tmp ;
57916: LD_ADDR_VAR 0 9
57920: PUSH
57921: LD_VAR 0 14
57925: ST_TO_ADDR
// for j = 1 to k do
57926: LD_ADDR_VAR 0 8
57930: PUSH
57931: DOUBLE
57932: LD_INT 1
57934: DEC
57935: ST_TO_ADDR
57936: LD_VAR 0 9
57940: PUSH
57941: FOR_TO
57942: IFFALSE 58030
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
57944: LD_VAR 0 14
57948: PUSH
57949: LD_VAR 0 8
57953: ARRAY
57954: PUSH
57955: LD_VAR 0 14
57959: PPUSH
57960: LD_INT 58
57962: PUSH
57963: EMPTY
57964: LIST
57965: PPUSH
57966: CALL_OW 72
57970: IN
57971: NOT
57972: IFFALSE 58028
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
57974: LD_VAR 0 4
57978: PUSH
57979: LD_VAR 0 7
57983: ARRAY
57984: PPUSH
57985: LD_VAR 0 14
57989: PUSH
57990: LD_VAR 0 8
57994: ARRAY
57995: PPUSH
57996: CALL_OW 115
// attacking := true ;
58000: LD_ADDR_VAR 0 29
58004: PUSH
58005: LD_INT 1
58007: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
58008: LD_VAR 0 4
58012: PUSH
58013: LD_VAR 0 7
58017: ARRAY
58018: PPUSH
58019: LD_INT 71
58021: PPUSH
58022: CALL_OW 109
// continue ;
58026: GO 57941
// end ; end ;
58028: GO 57941
58030: POP
58031: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
58032: LD_VAR 0 4
58036: PUSH
58037: LD_VAR 0 7
58041: ARRAY
58042: PPUSH
58043: CALL_OW 257
58047: PUSH
58048: LD_INT 8
58050: EQUAL
58051: PUSH
58052: LD_VAR 0 4
58056: PUSH
58057: LD_VAR 0 7
58061: ARRAY
58062: PPUSH
58063: CALL_OW 264
58067: PUSH
58068: LD_INT 28
58070: PUSH
58071: LD_INT 45
58073: PUSH
58074: LD_INT 7
58076: PUSH
58077: LD_INT 47
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: IN
58086: OR
58087: IFFALSE 58317
// begin attacking := false ;
58089: LD_ADDR_VAR 0 29
58093: PUSH
58094: LD_INT 0
58096: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
58097: LD_VAR 0 14
58101: PUSH
58102: LD_INT 1
58104: ARRAY
58105: PPUSH
58106: CALL_OW 266
58110: PUSH
58111: LD_INT 32
58113: PUSH
58114: LD_INT 31
58116: PUSH
58117: LD_INT 33
58119: PUSH
58120: LD_INT 4
58122: PUSH
58123: LD_INT 5
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: IN
58133: IFFALSE 58317
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
58135: LD_ADDR_VAR 0 9
58139: PUSH
58140: LD_VAR 0 14
58144: PUSH
58145: LD_INT 1
58147: ARRAY
58148: PPUSH
58149: CALL_OW 266
58153: PPUSH
58154: LD_VAR 0 14
58158: PUSH
58159: LD_INT 1
58161: ARRAY
58162: PPUSH
58163: CALL_OW 250
58167: PPUSH
58168: LD_VAR 0 14
58172: PUSH
58173: LD_INT 1
58175: ARRAY
58176: PPUSH
58177: CALL_OW 251
58181: PPUSH
58182: LD_VAR 0 14
58186: PUSH
58187: LD_INT 1
58189: ARRAY
58190: PPUSH
58191: CALL_OW 254
58195: PPUSH
58196: LD_VAR 0 14
58200: PUSH
58201: LD_INT 1
58203: ARRAY
58204: PPUSH
58205: CALL_OW 248
58209: PPUSH
58210: LD_INT 0
58212: PPUSH
58213: CALL 34929 0 6
58217: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
58218: LD_ADDR_VAR 0 8
58222: PUSH
58223: LD_VAR 0 4
58227: PUSH
58228: LD_VAR 0 7
58232: ARRAY
58233: PPUSH
58234: LD_VAR 0 9
58238: PPUSH
58239: CALL 53616 0 2
58243: ST_TO_ADDR
// if j then
58244: LD_VAR 0 8
58248: IFFALSE 58317
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
58250: LD_VAR 0 8
58254: PUSH
58255: LD_INT 1
58257: ARRAY
58258: PPUSH
58259: LD_VAR 0 8
58263: PUSH
58264: LD_INT 2
58266: ARRAY
58267: PPUSH
58268: CALL_OW 488
58272: IFFALSE 58317
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
58274: LD_VAR 0 4
58278: PUSH
58279: LD_VAR 0 7
58283: ARRAY
58284: PPUSH
58285: LD_VAR 0 8
58289: PUSH
58290: LD_INT 1
58292: ARRAY
58293: PPUSH
58294: LD_VAR 0 8
58298: PUSH
58299: LD_INT 2
58301: ARRAY
58302: PPUSH
58303: CALL_OW 116
// attacking := true ;
58307: LD_ADDR_VAR 0 29
58311: PUSH
58312: LD_INT 1
58314: ST_TO_ADDR
// continue ;
58315: GO 55690
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
58317: LD_VAR 0 4
58321: PUSH
58322: LD_VAR 0 7
58326: ARRAY
58327: PPUSH
58328: CALL_OW 265
58332: PUSH
58333: LD_INT 11
58335: EQUAL
58336: IFFALSE 58614
// begin k := 10 ;
58338: LD_ADDR_VAR 0 9
58342: PUSH
58343: LD_INT 10
58345: ST_TO_ADDR
// x := 0 ;
58346: LD_ADDR_VAR 0 10
58350: PUSH
58351: LD_INT 0
58353: ST_TO_ADDR
// if tmp < k then
58354: LD_VAR 0 14
58358: PUSH
58359: LD_VAR 0 9
58363: LESS
58364: IFFALSE 58376
// k := tmp ;
58366: LD_ADDR_VAR 0 9
58370: PUSH
58371: LD_VAR 0 14
58375: ST_TO_ADDR
// for j = k downto 1 do
58376: LD_ADDR_VAR 0 8
58380: PUSH
58381: DOUBLE
58382: LD_VAR 0 9
58386: INC
58387: ST_TO_ADDR
58388: LD_INT 1
58390: PUSH
58391: FOR_DOWNTO
58392: IFFALSE 58467
// begin if GetType ( tmp [ j ] ) = unit_human then
58394: LD_VAR 0 14
58398: PUSH
58399: LD_VAR 0 8
58403: ARRAY
58404: PPUSH
58405: CALL_OW 247
58409: PUSH
58410: LD_INT 1
58412: EQUAL
58413: IFFALSE 58465
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
58415: LD_VAR 0 4
58419: PUSH
58420: LD_VAR 0 7
58424: ARRAY
58425: PPUSH
58426: LD_VAR 0 14
58430: PUSH
58431: LD_VAR 0 8
58435: ARRAY
58436: PPUSH
58437: CALL 53887 0 2
// x := tmp [ j ] ;
58441: LD_ADDR_VAR 0 10
58445: PUSH
58446: LD_VAR 0 14
58450: PUSH
58451: LD_VAR 0 8
58455: ARRAY
58456: ST_TO_ADDR
// attacking := true ;
58457: LD_ADDR_VAR 0 29
58461: PUSH
58462: LD_INT 1
58464: ST_TO_ADDR
// end ; end ;
58465: GO 58391
58467: POP
58468: POP
// if not x then
58469: LD_VAR 0 10
58473: NOT
58474: IFFALSE 58614
// begin attacking := true ;
58476: LD_ADDR_VAR 0 29
58480: PUSH
58481: LD_INT 1
58483: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
58484: LD_VAR 0 4
58488: PUSH
58489: LD_VAR 0 7
58493: ARRAY
58494: PPUSH
58495: CALL_OW 250
58499: PPUSH
58500: LD_VAR 0 4
58504: PUSH
58505: LD_VAR 0 7
58509: ARRAY
58510: PPUSH
58511: CALL_OW 251
58515: PPUSH
58516: CALL_OW 546
58520: PUSH
58521: LD_INT 2
58523: ARRAY
58524: PUSH
58525: LD_VAR 0 14
58529: PUSH
58530: LD_INT 1
58532: ARRAY
58533: PPUSH
58534: CALL_OW 250
58538: PPUSH
58539: LD_VAR 0 14
58543: PUSH
58544: LD_INT 1
58546: ARRAY
58547: PPUSH
58548: CALL_OW 251
58552: PPUSH
58553: CALL_OW 546
58557: PUSH
58558: LD_INT 2
58560: ARRAY
58561: EQUAL
58562: IFFALSE 58590
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
58564: LD_VAR 0 4
58568: PUSH
58569: LD_VAR 0 7
58573: ARRAY
58574: PPUSH
58575: LD_VAR 0 14
58579: PUSH
58580: LD_INT 1
58582: ARRAY
58583: PPUSH
58584: CALL 53887 0 2
58588: GO 58614
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58590: LD_VAR 0 4
58594: PUSH
58595: LD_VAR 0 7
58599: ARRAY
58600: PPUSH
58601: LD_VAR 0 14
58605: PUSH
58606: LD_INT 1
58608: ARRAY
58609: PPUSH
58610: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
58614: LD_VAR 0 4
58618: PUSH
58619: LD_VAR 0 7
58623: ARRAY
58624: PPUSH
58625: CALL_OW 264
58629: PUSH
58630: LD_INT 29
58632: EQUAL
58633: IFFALSE 58999
// begin if WantsToAttack ( group [ i ] ) in bombed then
58635: LD_VAR 0 4
58639: PUSH
58640: LD_VAR 0 7
58644: ARRAY
58645: PPUSH
58646: CALL_OW 319
58650: PUSH
58651: LD_VAR 0 28
58655: IN
58656: IFFALSE 58660
// continue ;
58658: GO 55690
// k := 8 ;
58660: LD_ADDR_VAR 0 9
58664: PUSH
58665: LD_INT 8
58667: ST_TO_ADDR
// x := 0 ;
58668: LD_ADDR_VAR 0 10
58672: PUSH
58673: LD_INT 0
58675: ST_TO_ADDR
// if tmp < k then
58676: LD_VAR 0 14
58680: PUSH
58681: LD_VAR 0 9
58685: LESS
58686: IFFALSE 58698
// k := tmp ;
58688: LD_ADDR_VAR 0 9
58692: PUSH
58693: LD_VAR 0 14
58697: ST_TO_ADDR
// for j = 1 to k do
58698: LD_ADDR_VAR 0 8
58702: PUSH
58703: DOUBLE
58704: LD_INT 1
58706: DEC
58707: ST_TO_ADDR
58708: LD_VAR 0 9
58712: PUSH
58713: FOR_TO
58714: IFFALSE 58846
// begin if GetType ( tmp [ j ] ) = unit_building then
58716: LD_VAR 0 14
58720: PUSH
58721: LD_VAR 0 8
58725: ARRAY
58726: PPUSH
58727: CALL_OW 247
58731: PUSH
58732: LD_INT 3
58734: EQUAL
58735: IFFALSE 58844
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
58737: LD_VAR 0 14
58741: PUSH
58742: LD_VAR 0 8
58746: ARRAY
58747: PUSH
58748: LD_VAR 0 28
58752: IN
58753: NOT
58754: PUSH
58755: LD_VAR 0 14
58759: PUSH
58760: LD_VAR 0 8
58764: ARRAY
58765: PPUSH
58766: CALL_OW 313
58770: AND
58771: IFFALSE 58844
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
58773: LD_VAR 0 4
58777: PUSH
58778: LD_VAR 0 7
58782: ARRAY
58783: PPUSH
58784: LD_VAR 0 14
58788: PUSH
58789: LD_VAR 0 8
58793: ARRAY
58794: PPUSH
58795: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
58799: LD_ADDR_VAR 0 28
58803: PUSH
58804: LD_VAR 0 28
58808: PPUSH
58809: LD_VAR 0 28
58813: PUSH
58814: LD_INT 1
58816: PLUS
58817: PPUSH
58818: LD_VAR 0 14
58822: PUSH
58823: LD_VAR 0 8
58827: ARRAY
58828: PPUSH
58829: CALL_OW 1
58833: ST_TO_ADDR
// attacking := true ;
58834: LD_ADDR_VAR 0 29
58838: PUSH
58839: LD_INT 1
58841: ST_TO_ADDR
// break ;
58842: GO 58846
// end ; end ;
58844: GO 58713
58846: POP
58847: POP
// if not attacking and f_attack_depot then
58848: LD_VAR 0 29
58852: NOT
58853: PUSH
58854: LD_VAR 0 25
58858: AND
58859: IFFALSE 58954
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58861: LD_ADDR_VAR 0 13
58865: PUSH
58866: LD_VAR 0 14
58870: PPUSH
58871: LD_INT 2
58873: PUSH
58874: LD_INT 30
58876: PUSH
58877: LD_INT 0
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 30
58886: PUSH
58887: LD_INT 1
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: LIST
58898: PPUSH
58899: CALL_OW 72
58903: ST_TO_ADDR
// if z then
58904: LD_VAR 0 13
58908: IFFALSE 58954
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
58910: LD_VAR 0 4
58914: PUSH
58915: LD_VAR 0 7
58919: ARRAY
58920: PPUSH
58921: LD_VAR 0 13
58925: PPUSH
58926: LD_VAR 0 4
58930: PUSH
58931: LD_VAR 0 7
58935: ARRAY
58936: PPUSH
58937: CALL_OW 74
58941: PPUSH
58942: CALL_OW 115
// attacking := true ;
58946: LD_ADDR_VAR 0 29
58950: PUSH
58951: LD_INT 1
58953: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
58954: LD_VAR 0 4
58958: PUSH
58959: LD_VAR 0 7
58963: ARRAY
58964: PPUSH
58965: CALL_OW 256
58969: PUSH
58970: LD_INT 500
58972: LESS
58973: IFFALSE 58999
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58975: LD_VAR 0 4
58979: PUSH
58980: LD_VAR 0 7
58984: ARRAY
58985: PPUSH
58986: LD_VAR 0 14
58990: PUSH
58991: LD_INT 1
58993: ARRAY
58994: PPUSH
58995: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
58999: LD_VAR 0 4
59003: PUSH
59004: LD_VAR 0 7
59008: ARRAY
59009: PPUSH
59010: CALL_OW 264
59014: PUSH
59015: LD_INT 49
59017: EQUAL
59018: IFFALSE 59139
// begin if not HasTask ( group [ i ] ) then
59020: LD_VAR 0 4
59024: PUSH
59025: LD_VAR 0 7
59029: ARRAY
59030: PPUSH
59031: CALL_OW 314
59035: NOT
59036: IFFALSE 59139
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
59038: LD_ADDR_VAR 0 9
59042: PUSH
59043: LD_INT 81
59045: PUSH
59046: LD_VAR 0 4
59050: PUSH
59051: LD_VAR 0 7
59055: ARRAY
59056: PPUSH
59057: CALL_OW 255
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PPUSH
59066: CALL_OW 69
59070: PPUSH
59071: LD_VAR 0 4
59075: PUSH
59076: LD_VAR 0 7
59080: ARRAY
59081: PPUSH
59082: CALL_OW 74
59086: ST_TO_ADDR
// if k then
59087: LD_VAR 0 9
59091: IFFALSE 59139
// if GetDistUnits ( group [ i ] , k ) > 10 then
59093: LD_VAR 0 4
59097: PUSH
59098: LD_VAR 0 7
59102: ARRAY
59103: PPUSH
59104: LD_VAR 0 9
59108: PPUSH
59109: CALL_OW 296
59113: PUSH
59114: LD_INT 10
59116: GREATER
59117: IFFALSE 59139
// ComMoveUnit ( group [ i ] , k ) ;
59119: LD_VAR 0 4
59123: PUSH
59124: LD_VAR 0 7
59128: ARRAY
59129: PPUSH
59130: LD_VAR 0 9
59134: PPUSH
59135: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59139: LD_VAR 0 4
59143: PUSH
59144: LD_VAR 0 7
59148: ARRAY
59149: PPUSH
59150: CALL_OW 256
59154: PUSH
59155: LD_INT 250
59157: LESS
59158: PUSH
59159: LD_VAR 0 4
59163: PUSH
59164: LD_VAR 0 7
59168: ARRAY
59169: PUSH
59170: LD_INT 21
59172: PUSH
59173: LD_INT 2
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 23
59182: PUSH
59183: LD_INT 2
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PPUSH
59194: CALL_OW 69
59198: IN
59199: AND
59200: IFFALSE 59325
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
59202: LD_ADDR_VAR 0 9
59206: PUSH
59207: LD_OWVAR 3
59211: PUSH
59212: LD_VAR 0 4
59216: PUSH
59217: LD_VAR 0 7
59221: ARRAY
59222: DIFF
59223: PPUSH
59224: LD_VAR 0 4
59228: PUSH
59229: LD_VAR 0 7
59233: ARRAY
59234: PPUSH
59235: CALL_OW 74
59239: ST_TO_ADDR
// if not k then
59240: LD_VAR 0 9
59244: NOT
59245: IFFALSE 59249
// continue ;
59247: GO 55690
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
59249: LD_VAR 0 9
59253: PUSH
59254: LD_INT 81
59256: PUSH
59257: LD_VAR 0 4
59261: PUSH
59262: LD_VAR 0 7
59266: ARRAY
59267: PPUSH
59268: CALL_OW 255
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PPUSH
59277: CALL_OW 69
59281: IN
59282: PUSH
59283: LD_VAR 0 9
59287: PPUSH
59288: LD_VAR 0 4
59292: PUSH
59293: LD_VAR 0 7
59297: ARRAY
59298: PPUSH
59299: CALL_OW 296
59303: PUSH
59304: LD_INT 5
59306: LESS
59307: AND
59308: IFFALSE 59325
// ComAutodestruct ( group [ i ] ) ;
59310: LD_VAR 0 4
59314: PUSH
59315: LD_VAR 0 7
59319: ARRAY
59320: PPUSH
59321: CALL 53785 0 1
// end ; if f_attack_depot then
59325: LD_VAR 0 25
59329: IFFALSE 59441
// begin k := 6 ;
59331: LD_ADDR_VAR 0 9
59335: PUSH
59336: LD_INT 6
59338: ST_TO_ADDR
// if tmp < k then
59339: LD_VAR 0 14
59343: PUSH
59344: LD_VAR 0 9
59348: LESS
59349: IFFALSE 59361
// k := tmp ;
59351: LD_ADDR_VAR 0 9
59355: PUSH
59356: LD_VAR 0 14
59360: ST_TO_ADDR
// for j = 1 to k do
59361: LD_ADDR_VAR 0 8
59365: PUSH
59366: DOUBLE
59367: LD_INT 1
59369: DEC
59370: ST_TO_ADDR
59371: LD_VAR 0 9
59375: PUSH
59376: FOR_TO
59377: IFFALSE 59439
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
59379: LD_VAR 0 8
59383: PPUSH
59384: CALL_OW 266
59388: PUSH
59389: LD_INT 0
59391: PUSH
59392: LD_INT 1
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: IN
59399: IFFALSE 59437
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
59401: LD_VAR 0 4
59405: PUSH
59406: LD_VAR 0 7
59410: ARRAY
59411: PPUSH
59412: LD_VAR 0 14
59416: PUSH
59417: LD_VAR 0 8
59421: ARRAY
59422: PPUSH
59423: CALL_OW 115
// attacking := true ;
59427: LD_ADDR_VAR 0 29
59431: PUSH
59432: LD_INT 1
59434: ST_TO_ADDR
// break ;
59435: GO 59439
// end ;
59437: GO 59376
59439: POP
59440: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
59441: LD_VAR 0 4
59445: PUSH
59446: LD_VAR 0 7
59450: ARRAY
59451: PPUSH
59452: CALL_OW 302
59456: PUSH
59457: LD_VAR 0 29
59461: NOT
59462: AND
59463: IFFALSE 59785
// begin if GetTag ( group [ i ] ) = 71 then
59465: LD_VAR 0 4
59469: PUSH
59470: LD_VAR 0 7
59474: ARRAY
59475: PPUSH
59476: CALL_OW 110
59480: PUSH
59481: LD_INT 71
59483: EQUAL
59484: IFFALSE 59525
// begin if HasTask ( group [ i ] ) then
59486: LD_VAR 0 4
59490: PUSH
59491: LD_VAR 0 7
59495: ARRAY
59496: PPUSH
59497: CALL_OW 314
59501: IFFALSE 59507
// continue else
59503: GO 55690
59505: GO 59525
// SetTag ( group [ i ] , 0 ) ;
59507: LD_VAR 0 4
59511: PUSH
59512: LD_VAR 0 7
59516: ARRAY
59517: PPUSH
59518: LD_INT 0
59520: PPUSH
59521: CALL_OW 109
// end ; k := 8 ;
59525: LD_ADDR_VAR 0 9
59529: PUSH
59530: LD_INT 8
59532: ST_TO_ADDR
// x := 0 ;
59533: LD_ADDR_VAR 0 10
59537: PUSH
59538: LD_INT 0
59540: ST_TO_ADDR
// if tmp < k then
59541: LD_VAR 0 14
59545: PUSH
59546: LD_VAR 0 9
59550: LESS
59551: IFFALSE 59563
// k := tmp ;
59553: LD_ADDR_VAR 0 9
59557: PUSH
59558: LD_VAR 0 14
59562: ST_TO_ADDR
// for j = 1 to k do
59563: LD_ADDR_VAR 0 8
59567: PUSH
59568: DOUBLE
59569: LD_INT 1
59571: DEC
59572: ST_TO_ADDR
59573: LD_VAR 0 9
59577: PUSH
59578: FOR_TO
59579: IFFALSE 59677
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
59581: LD_VAR 0 14
59585: PUSH
59586: LD_VAR 0 8
59590: ARRAY
59591: PPUSH
59592: CALL_OW 247
59596: PUSH
59597: LD_INT 1
59599: EQUAL
59600: PUSH
59601: LD_VAR 0 14
59605: PUSH
59606: LD_VAR 0 8
59610: ARRAY
59611: PPUSH
59612: CALL_OW 256
59616: PUSH
59617: LD_INT 250
59619: LESS
59620: PUSH
59621: LD_VAR 0 20
59625: AND
59626: PUSH
59627: LD_VAR 0 20
59631: NOT
59632: PUSH
59633: LD_VAR 0 14
59637: PUSH
59638: LD_VAR 0 8
59642: ARRAY
59643: PPUSH
59644: CALL_OW 256
59648: PUSH
59649: LD_INT 250
59651: GREATEREQUAL
59652: AND
59653: OR
59654: AND
59655: IFFALSE 59675
// begin x := tmp [ j ] ;
59657: LD_ADDR_VAR 0 10
59661: PUSH
59662: LD_VAR 0 14
59666: PUSH
59667: LD_VAR 0 8
59671: ARRAY
59672: ST_TO_ADDR
// break ;
59673: GO 59677
// end ;
59675: GO 59578
59677: POP
59678: POP
// if x then
59679: LD_VAR 0 10
59683: IFFALSE 59707
// ComAttackUnit ( group [ i ] , x ) else
59685: LD_VAR 0 4
59689: PUSH
59690: LD_VAR 0 7
59694: ARRAY
59695: PPUSH
59696: LD_VAR 0 10
59700: PPUSH
59701: CALL_OW 115
59705: GO 59731
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
59707: LD_VAR 0 4
59711: PUSH
59712: LD_VAR 0 7
59716: ARRAY
59717: PPUSH
59718: LD_VAR 0 14
59722: PUSH
59723: LD_INT 1
59725: ARRAY
59726: PPUSH
59727: CALL_OW 115
// if not HasTask ( group [ i ] ) then
59731: LD_VAR 0 4
59735: PUSH
59736: LD_VAR 0 7
59740: ARRAY
59741: PPUSH
59742: CALL_OW 314
59746: NOT
59747: IFFALSE 59785
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
59749: LD_VAR 0 4
59753: PUSH
59754: LD_VAR 0 7
59758: ARRAY
59759: PPUSH
59760: LD_VAR 0 14
59764: PPUSH
59765: LD_VAR 0 4
59769: PUSH
59770: LD_VAR 0 7
59774: ARRAY
59775: PPUSH
59776: CALL_OW 74
59780: PPUSH
59781: CALL_OW 115
// end ; end ; end ;
59785: GO 55690
59787: POP
59788: POP
// wait ( 0 0$1 ) ;
59789: LD_INT 35
59791: PPUSH
59792: CALL_OW 67
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
59796: LD_VAR 0 4
59800: PUSH
59801: EMPTY
59802: EQUAL
59803: PUSH
59804: LD_INT 81
59806: PUSH
59807: LD_VAR 0 35
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PPUSH
59816: CALL_OW 69
59820: NOT
59821: OR
59822: IFFALSE 55675
// end ;
59824: LD_VAR 0 2
59828: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59829: LD_INT 0
59831: PPUSH
59832: PPUSH
59833: PPUSH
59834: PPUSH
// if not base_units then
59835: LD_VAR 0 1
59839: NOT
59840: IFFALSE 59844
// exit ;
59842: GO 59931
// result := false ;
59844: LD_ADDR_VAR 0 2
59848: PUSH
59849: LD_INT 0
59851: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59852: LD_ADDR_VAR 0 5
59856: PUSH
59857: LD_VAR 0 1
59861: PPUSH
59862: LD_INT 21
59864: PUSH
59865: LD_INT 3
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PPUSH
59872: CALL_OW 72
59876: ST_TO_ADDR
// if not tmp then
59877: LD_VAR 0 5
59881: NOT
59882: IFFALSE 59886
// exit ;
59884: GO 59931
// for i in tmp do
59886: LD_ADDR_VAR 0 3
59890: PUSH
59891: LD_VAR 0 5
59895: PUSH
59896: FOR_IN
59897: IFFALSE 59929
// begin result := EnemyInRange ( i , 22 ) ;
59899: LD_ADDR_VAR 0 2
59903: PUSH
59904: LD_VAR 0 3
59908: PPUSH
59909: LD_INT 22
59911: PPUSH
59912: CALL 53468 0 2
59916: ST_TO_ADDR
// if result then
59917: LD_VAR 0 2
59921: IFFALSE 59927
// exit ;
59923: POP
59924: POP
59925: GO 59931
// end ;
59927: GO 59896
59929: POP
59930: POP
// end ;
59931: LD_VAR 0 2
59935: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59936: LD_INT 0
59938: PPUSH
59939: PPUSH
// if not units then
59940: LD_VAR 0 1
59944: NOT
59945: IFFALSE 59949
// exit ;
59947: GO 60019
// result := [ ] ;
59949: LD_ADDR_VAR 0 3
59953: PUSH
59954: EMPTY
59955: ST_TO_ADDR
// for i in units do
59956: LD_ADDR_VAR 0 4
59960: PUSH
59961: LD_VAR 0 1
59965: PUSH
59966: FOR_IN
59967: IFFALSE 60017
// if GetTag ( i ) = tag then
59969: LD_VAR 0 4
59973: PPUSH
59974: CALL_OW 110
59978: PUSH
59979: LD_VAR 0 2
59983: EQUAL
59984: IFFALSE 60015
// result := Insert ( result , result + 1 , i ) ;
59986: LD_ADDR_VAR 0 3
59990: PUSH
59991: LD_VAR 0 3
59995: PPUSH
59996: LD_VAR 0 3
60000: PUSH
60001: LD_INT 1
60003: PLUS
60004: PPUSH
60005: LD_VAR 0 4
60009: PPUSH
60010: CALL_OW 2
60014: ST_TO_ADDR
60015: GO 59966
60017: POP
60018: POP
// end ;
60019: LD_VAR 0 3
60023: RET
// export function IsDriver ( un ) ; begin
60024: LD_INT 0
60026: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60027: LD_ADDR_VAR 0 2
60031: PUSH
60032: LD_VAR 0 1
60036: PUSH
60037: LD_INT 55
60039: PUSH
60040: EMPTY
60041: LIST
60042: PPUSH
60043: CALL_OW 69
60047: IN
60048: ST_TO_ADDR
// end ;
60049: LD_VAR 0 2
60053: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60054: LD_INT 0
60056: PPUSH
60057: PPUSH
// list := [ ] ;
60058: LD_ADDR_VAR 0 5
60062: PUSH
60063: EMPTY
60064: ST_TO_ADDR
// case d of 0 :
60065: LD_VAR 0 3
60069: PUSH
60070: LD_INT 0
60072: DOUBLE
60073: EQUAL
60074: IFTRUE 60078
60076: GO 60211
60078: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60079: LD_ADDR_VAR 0 5
60083: PUSH
60084: LD_VAR 0 1
60088: PUSH
60089: LD_INT 4
60091: MINUS
60092: PUSH
60093: LD_VAR 0 2
60097: PUSH
60098: LD_INT 4
60100: MINUS
60101: PUSH
60102: LD_INT 2
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: LIST
60109: PUSH
60110: LD_VAR 0 1
60114: PUSH
60115: LD_INT 3
60117: MINUS
60118: PUSH
60119: LD_VAR 0 2
60123: PUSH
60124: LD_INT 1
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: LIST
60131: PUSH
60132: LD_VAR 0 1
60136: PUSH
60137: LD_INT 4
60139: PLUS
60140: PUSH
60141: LD_VAR 0 2
60145: PUSH
60146: LD_INT 4
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: LIST
60153: PUSH
60154: LD_VAR 0 1
60158: PUSH
60159: LD_INT 3
60161: PLUS
60162: PUSH
60163: LD_VAR 0 2
60167: PUSH
60168: LD_INT 3
60170: PLUS
60171: PUSH
60172: LD_INT 5
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: LIST
60179: PUSH
60180: LD_VAR 0 1
60184: PUSH
60185: LD_VAR 0 2
60189: PUSH
60190: LD_INT 4
60192: PLUS
60193: PUSH
60194: LD_INT 0
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: LIST
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: ST_TO_ADDR
// end ; 1 :
60209: GO 60909
60211: LD_INT 1
60213: DOUBLE
60214: EQUAL
60215: IFTRUE 60219
60217: GO 60352
60219: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60220: LD_ADDR_VAR 0 5
60224: PUSH
60225: LD_VAR 0 1
60229: PUSH
60230: LD_VAR 0 2
60234: PUSH
60235: LD_INT 4
60237: MINUS
60238: PUSH
60239: LD_INT 3
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: LIST
60246: PUSH
60247: LD_VAR 0 1
60251: PUSH
60252: LD_INT 3
60254: MINUS
60255: PUSH
60256: LD_VAR 0 2
60260: PUSH
60261: LD_INT 3
60263: MINUS
60264: PUSH
60265: LD_INT 2
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: LIST
60272: PUSH
60273: LD_VAR 0 1
60277: PUSH
60278: LD_INT 4
60280: MINUS
60281: PUSH
60282: LD_VAR 0 2
60286: PUSH
60287: LD_INT 1
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: LIST
60294: PUSH
60295: LD_VAR 0 1
60299: PUSH
60300: LD_VAR 0 2
60304: PUSH
60305: LD_INT 3
60307: PLUS
60308: PUSH
60309: LD_INT 0
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: LIST
60316: PUSH
60317: LD_VAR 0 1
60321: PUSH
60322: LD_INT 4
60324: PLUS
60325: PUSH
60326: LD_VAR 0 2
60330: PUSH
60331: LD_INT 4
60333: PLUS
60334: PUSH
60335: LD_INT 5
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: LIST
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: ST_TO_ADDR
// end ; 2 :
60350: GO 60909
60352: LD_INT 2
60354: DOUBLE
60355: EQUAL
60356: IFTRUE 60360
60358: GO 60489
60360: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60361: LD_ADDR_VAR 0 5
60365: PUSH
60366: LD_VAR 0 1
60370: PUSH
60371: LD_VAR 0 2
60375: PUSH
60376: LD_INT 3
60378: MINUS
60379: PUSH
60380: LD_INT 3
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: LIST
60387: PUSH
60388: LD_VAR 0 1
60392: PUSH
60393: LD_INT 4
60395: PLUS
60396: PUSH
60397: LD_VAR 0 2
60401: PUSH
60402: LD_INT 4
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: LIST
60409: PUSH
60410: LD_VAR 0 1
60414: PUSH
60415: LD_VAR 0 2
60419: PUSH
60420: LD_INT 4
60422: PLUS
60423: PUSH
60424: LD_INT 0
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: LIST
60431: PUSH
60432: LD_VAR 0 1
60436: PUSH
60437: LD_INT 3
60439: MINUS
60440: PUSH
60441: LD_VAR 0 2
60445: PUSH
60446: LD_INT 1
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: LIST
60453: PUSH
60454: LD_VAR 0 1
60458: PUSH
60459: LD_INT 4
60461: MINUS
60462: PUSH
60463: LD_VAR 0 2
60467: PUSH
60468: LD_INT 4
60470: MINUS
60471: PUSH
60472: LD_INT 2
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: LIST
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: ST_TO_ADDR
// end ; 3 :
60487: GO 60909
60489: LD_INT 3
60491: DOUBLE
60492: EQUAL
60493: IFTRUE 60497
60495: GO 60630
60497: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60498: LD_ADDR_VAR 0 5
60502: PUSH
60503: LD_VAR 0 1
60507: PUSH
60508: LD_INT 3
60510: PLUS
60511: PUSH
60512: LD_VAR 0 2
60516: PUSH
60517: LD_INT 4
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: LIST
60524: PUSH
60525: LD_VAR 0 1
60529: PUSH
60530: LD_INT 4
60532: PLUS
60533: PUSH
60534: LD_VAR 0 2
60538: PUSH
60539: LD_INT 4
60541: PLUS
60542: PUSH
60543: LD_INT 5
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: LIST
60550: PUSH
60551: LD_VAR 0 1
60555: PUSH
60556: LD_INT 4
60558: MINUS
60559: PUSH
60560: LD_VAR 0 2
60564: PUSH
60565: LD_INT 1
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: LIST
60572: PUSH
60573: LD_VAR 0 1
60577: PUSH
60578: LD_VAR 0 2
60582: PUSH
60583: LD_INT 4
60585: MINUS
60586: PUSH
60587: LD_INT 3
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: LIST
60594: PUSH
60595: LD_VAR 0 1
60599: PUSH
60600: LD_INT 3
60602: MINUS
60603: PUSH
60604: LD_VAR 0 2
60608: PUSH
60609: LD_INT 3
60611: MINUS
60612: PUSH
60613: LD_INT 2
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: LIST
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: ST_TO_ADDR
// end ; 4 :
60628: GO 60909
60630: LD_INT 4
60632: DOUBLE
60633: EQUAL
60634: IFTRUE 60638
60636: GO 60771
60638: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60639: LD_ADDR_VAR 0 5
60643: PUSH
60644: LD_VAR 0 1
60648: PUSH
60649: LD_VAR 0 2
60653: PUSH
60654: LD_INT 4
60656: PLUS
60657: PUSH
60658: LD_INT 0
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: LIST
60665: PUSH
60666: LD_VAR 0 1
60670: PUSH
60671: LD_INT 3
60673: PLUS
60674: PUSH
60675: LD_VAR 0 2
60679: PUSH
60680: LD_INT 3
60682: PLUS
60683: PUSH
60684: LD_INT 5
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: LIST
60691: PUSH
60692: LD_VAR 0 1
60696: PUSH
60697: LD_INT 4
60699: PLUS
60700: PUSH
60701: LD_VAR 0 2
60705: PUSH
60706: LD_INT 4
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: LIST
60713: PUSH
60714: LD_VAR 0 1
60718: PUSH
60719: LD_VAR 0 2
60723: PUSH
60724: LD_INT 3
60726: MINUS
60727: PUSH
60728: LD_INT 3
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: LIST
60735: PUSH
60736: LD_VAR 0 1
60740: PUSH
60741: LD_INT 4
60743: MINUS
60744: PUSH
60745: LD_VAR 0 2
60749: PUSH
60750: LD_INT 4
60752: MINUS
60753: PUSH
60754: LD_INT 2
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: LIST
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: ST_TO_ADDR
// end ; 5 :
60769: GO 60909
60771: LD_INT 5
60773: DOUBLE
60774: EQUAL
60775: IFTRUE 60779
60777: GO 60908
60779: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60780: LD_ADDR_VAR 0 5
60784: PUSH
60785: LD_VAR 0 1
60789: PUSH
60790: LD_INT 4
60792: MINUS
60793: PUSH
60794: LD_VAR 0 2
60798: PUSH
60799: LD_INT 1
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: LIST
60806: PUSH
60807: LD_VAR 0 1
60811: PUSH
60812: LD_VAR 0 2
60816: PUSH
60817: LD_INT 4
60819: MINUS
60820: PUSH
60821: LD_INT 3
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: LIST
60828: PUSH
60829: LD_VAR 0 1
60833: PUSH
60834: LD_INT 4
60836: PLUS
60837: PUSH
60838: LD_VAR 0 2
60842: PUSH
60843: LD_INT 4
60845: PLUS
60846: PUSH
60847: LD_INT 5
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: LIST
60854: PUSH
60855: LD_VAR 0 1
60859: PUSH
60860: LD_INT 3
60862: PLUS
60863: PUSH
60864: LD_VAR 0 2
60868: PUSH
60869: LD_INT 4
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: LIST
60876: PUSH
60877: LD_VAR 0 1
60881: PUSH
60882: LD_VAR 0 2
60886: PUSH
60887: LD_INT 3
60889: PLUS
60890: PUSH
60891: LD_INT 0
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: LIST
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: ST_TO_ADDR
// end ; end ;
60906: GO 60909
60908: POP
// result := list ;
60909: LD_ADDR_VAR 0 4
60913: PUSH
60914: LD_VAR 0 5
60918: ST_TO_ADDR
// end ;
60919: LD_VAR 0 4
60923: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60924: LD_INT 0
60926: PPUSH
60927: PPUSH
60928: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60929: LD_VAR 0 1
60933: NOT
60934: PUSH
60935: LD_VAR 0 2
60939: PUSH
60940: LD_INT 1
60942: PUSH
60943: LD_INT 2
60945: PUSH
60946: LD_INT 3
60948: PUSH
60949: LD_INT 4
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: IN
60958: NOT
60959: OR
60960: IFFALSE 60964
// exit ;
60962: GO 61056
// tmp := [ ] ;
60964: LD_ADDR_VAR 0 5
60968: PUSH
60969: EMPTY
60970: ST_TO_ADDR
// for i in units do
60971: LD_ADDR_VAR 0 4
60975: PUSH
60976: LD_VAR 0 1
60980: PUSH
60981: FOR_IN
60982: IFFALSE 61025
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60984: LD_ADDR_VAR 0 5
60988: PUSH
60989: LD_VAR 0 5
60993: PPUSH
60994: LD_VAR 0 5
60998: PUSH
60999: LD_INT 1
61001: PLUS
61002: PPUSH
61003: LD_VAR 0 4
61007: PPUSH
61008: LD_VAR 0 2
61012: PPUSH
61013: CALL_OW 259
61017: PPUSH
61018: CALL_OW 2
61022: ST_TO_ADDR
61023: GO 60981
61025: POP
61026: POP
// if not tmp then
61027: LD_VAR 0 5
61031: NOT
61032: IFFALSE 61036
// exit ;
61034: GO 61056
// result := SortListByListDesc ( units , tmp ) ;
61036: LD_ADDR_VAR 0 3
61040: PUSH
61041: LD_VAR 0 1
61045: PPUSH
61046: LD_VAR 0 5
61050: PPUSH
61051: CALL_OW 77
61055: ST_TO_ADDR
// end ;
61056: LD_VAR 0 3
61060: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61061: LD_INT 0
61063: PPUSH
61064: PPUSH
61065: PPUSH
// x := GetX ( building ) ;
61066: LD_ADDR_VAR 0 4
61070: PUSH
61071: LD_VAR 0 2
61075: PPUSH
61076: CALL_OW 250
61080: ST_TO_ADDR
// y := GetY ( building ) ;
61081: LD_ADDR_VAR 0 5
61085: PUSH
61086: LD_VAR 0 2
61090: PPUSH
61091: CALL_OW 251
61095: ST_TO_ADDR
// if GetTaskList ( unit ) then
61096: LD_VAR 0 1
61100: PPUSH
61101: CALL_OW 437
61105: IFFALSE 61200
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61107: LD_STRING e
61109: PUSH
61110: LD_VAR 0 1
61114: PPUSH
61115: CALL_OW 437
61119: PUSH
61120: LD_INT 1
61122: ARRAY
61123: PUSH
61124: LD_INT 1
61126: ARRAY
61127: EQUAL
61128: PUSH
61129: LD_VAR 0 4
61133: PUSH
61134: LD_VAR 0 1
61138: PPUSH
61139: CALL_OW 437
61143: PUSH
61144: LD_INT 1
61146: ARRAY
61147: PUSH
61148: LD_INT 2
61150: ARRAY
61151: EQUAL
61152: AND
61153: PUSH
61154: LD_VAR 0 5
61158: PUSH
61159: LD_VAR 0 1
61163: PPUSH
61164: CALL_OW 437
61168: PUSH
61169: LD_INT 1
61171: ARRAY
61172: PUSH
61173: LD_INT 3
61175: ARRAY
61176: EQUAL
61177: AND
61178: IFFALSE 61190
// result := true else
61180: LD_ADDR_VAR 0 3
61184: PUSH
61185: LD_INT 1
61187: ST_TO_ADDR
61188: GO 61198
// result := false ;
61190: LD_ADDR_VAR 0 3
61194: PUSH
61195: LD_INT 0
61197: ST_TO_ADDR
// end else
61198: GO 61208
// result := false ;
61200: LD_ADDR_VAR 0 3
61204: PUSH
61205: LD_INT 0
61207: ST_TO_ADDR
// end ;
61208: LD_VAR 0 3
61212: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61213: LD_INT 0
61215: PPUSH
61216: PPUSH
61217: PPUSH
61218: PPUSH
// if not unit or not area then
61219: LD_VAR 0 1
61223: NOT
61224: PUSH
61225: LD_VAR 0 2
61229: NOT
61230: OR
61231: IFFALSE 61235
// exit ;
61233: GO 61399
// tmp := AreaToList ( area , i ) ;
61235: LD_ADDR_VAR 0 6
61239: PUSH
61240: LD_VAR 0 2
61244: PPUSH
61245: LD_VAR 0 5
61249: PPUSH
61250: CALL_OW 517
61254: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61255: LD_ADDR_VAR 0 5
61259: PUSH
61260: DOUBLE
61261: LD_INT 1
61263: DEC
61264: ST_TO_ADDR
61265: LD_VAR 0 6
61269: PUSH
61270: LD_INT 1
61272: ARRAY
61273: PUSH
61274: FOR_TO
61275: IFFALSE 61397
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61277: LD_ADDR_VAR 0 7
61281: PUSH
61282: LD_VAR 0 6
61286: PUSH
61287: LD_INT 1
61289: ARRAY
61290: PUSH
61291: LD_VAR 0 5
61295: ARRAY
61296: PUSH
61297: LD_VAR 0 6
61301: PUSH
61302: LD_INT 2
61304: ARRAY
61305: PUSH
61306: LD_VAR 0 5
61310: ARRAY
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61316: LD_VAR 0 7
61320: PUSH
61321: LD_INT 1
61323: ARRAY
61324: PPUSH
61325: LD_VAR 0 7
61329: PUSH
61330: LD_INT 2
61332: ARRAY
61333: PPUSH
61334: CALL_OW 428
61338: PUSH
61339: LD_INT 0
61341: EQUAL
61342: IFFALSE 61395
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61344: LD_VAR 0 1
61348: PPUSH
61349: LD_VAR 0 7
61353: PUSH
61354: LD_INT 1
61356: ARRAY
61357: PPUSH
61358: LD_VAR 0 7
61362: PUSH
61363: LD_INT 2
61365: ARRAY
61366: PPUSH
61367: LD_VAR 0 3
61371: PPUSH
61372: CALL_OW 48
// result := IsPlaced ( unit ) ;
61376: LD_ADDR_VAR 0 4
61380: PUSH
61381: LD_VAR 0 1
61385: PPUSH
61386: CALL_OW 305
61390: ST_TO_ADDR
// exit ;
61391: POP
61392: POP
61393: GO 61399
// end ; end ;
61395: GO 61274
61397: POP
61398: POP
// end ;
61399: LD_VAR 0 4
61403: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61404: LD_INT 0
61406: PPUSH
61407: PPUSH
61408: PPUSH
// if not side or side > 8 then
61409: LD_VAR 0 1
61413: NOT
61414: PUSH
61415: LD_VAR 0 1
61419: PUSH
61420: LD_INT 8
61422: GREATER
61423: OR
61424: IFFALSE 61428
// exit ;
61426: GO 61615
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61428: LD_ADDR_VAR 0 4
61432: PUSH
61433: LD_INT 22
61435: PUSH
61436: LD_VAR 0 1
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 21
61447: PUSH
61448: LD_INT 3
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PPUSH
61459: CALL_OW 69
61463: ST_TO_ADDR
// if not tmp then
61464: LD_VAR 0 4
61468: NOT
61469: IFFALSE 61473
// exit ;
61471: GO 61615
// enable_addtolog := true ;
61473: LD_ADDR_OWVAR 81
61477: PUSH
61478: LD_INT 1
61480: ST_TO_ADDR
// AddToLog ( [ ) ;
61481: LD_STRING [
61483: PPUSH
61484: CALL_OW 561
// for i in tmp do
61488: LD_ADDR_VAR 0 3
61492: PUSH
61493: LD_VAR 0 4
61497: PUSH
61498: FOR_IN
61499: IFFALSE 61606
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61501: LD_STRING [
61503: PUSH
61504: LD_VAR 0 3
61508: PPUSH
61509: CALL_OW 266
61513: STR
61514: PUSH
61515: LD_STRING , 
61517: STR
61518: PUSH
61519: LD_VAR 0 3
61523: PPUSH
61524: CALL_OW 250
61528: STR
61529: PUSH
61530: LD_STRING , 
61532: STR
61533: PUSH
61534: LD_VAR 0 3
61538: PPUSH
61539: CALL_OW 251
61543: STR
61544: PUSH
61545: LD_STRING , 
61547: STR
61548: PUSH
61549: LD_VAR 0 3
61553: PPUSH
61554: CALL_OW 254
61558: STR
61559: PUSH
61560: LD_STRING , 
61562: STR
61563: PUSH
61564: LD_VAR 0 3
61568: PPUSH
61569: LD_INT 1
61571: PPUSH
61572: CALL_OW 268
61576: STR
61577: PUSH
61578: LD_STRING , 
61580: STR
61581: PUSH
61582: LD_VAR 0 3
61586: PPUSH
61587: LD_INT 2
61589: PPUSH
61590: CALL_OW 268
61594: STR
61595: PUSH
61596: LD_STRING ],
61598: STR
61599: PPUSH
61600: CALL_OW 561
// end ;
61604: GO 61498
61606: POP
61607: POP
// AddToLog ( ]; ) ;
61608: LD_STRING ];
61610: PPUSH
61611: CALL_OW 561
// end ;
61615: LD_VAR 0 2
61619: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61620: LD_INT 0
61622: PPUSH
61623: PPUSH
61624: PPUSH
61625: PPUSH
61626: PPUSH
// if not area or not rate or not max then
61627: LD_VAR 0 1
61631: NOT
61632: PUSH
61633: LD_VAR 0 2
61637: NOT
61638: OR
61639: PUSH
61640: LD_VAR 0 4
61644: NOT
61645: OR
61646: IFFALSE 61650
// exit ;
61648: GO 61842
// while 1 do
61650: LD_INT 1
61652: IFFALSE 61842
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61654: LD_ADDR_VAR 0 9
61658: PUSH
61659: LD_VAR 0 1
61663: PPUSH
61664: LD_INT 1
61666: PPUSH
61667: CALL_OW 287
61671: PUSH
61672: LD_INT 10
61674: MUL
61675: ST_TO_ADDR
// r := rate / 10 ;
61676: LD_ADDR_VAR 0 7
61680: PUSH
61681: LD_VAR 0 2
61685: PUSH
61686: LD_INT 10
61688: DIVREAL
61689: ST_TO_ADDR
// time := 1 1$00 ;
61690: LD_ADDR_VAR 0 8
61694: PUSH
61695: LD_INT 2100
61697: ST_TO_ADDR
// if amount < min then
61698: LD_VAR 0 9
61702: PUSH
61703: LD_VAR 0 3
61707: LESS
61708: IFFALSE 61726
// r := r * 2 else
61710: LD_ADDR_VAR 0 7
61714: PUSH
61715: LD_VAR 0 7
61719: PUSH
61720: LD_INT 2
61722: MUL
61723: ST_TO_ADDR
61724: GO 61752
// if amount > max then
61726: LD_VAR 0 9
61730: PUSH
61731: LD_VAR 0 4
61735: GREATER
61736: IFFALSE 61752
// r := r / 2 ;
61738: LD_ADDR_VAR 0 7
61742: PUSH
61743: LD_VAR 0 7
61747: PUSH
61748: LD_INT 2
61750: DIVREAL
61751: ST_TO_ADDR
// time := time / r ;
61752: LD_ADDR_VAR 0 8
61756: PUSH
61757: LD_VAR 0 8
61761: PUSH
61762: LD_VAR 0 7
61766: DIVREAL
61767: ST_TO_ADDR
// if time < 0 then
61768: LD_VAR 0 8
61772: PUSH
61773: LD_INT 0
61775: LESS
61776: IFFALSE 61793
// time := time * - 1 ;
61778: LD_ADDR_VAR 0 8
61782: PUSH
61783: LD_VAR 0 8
61787: PUSH
61788: LD_INT 1
61790: NEG
61791: MUL
61792: ST_TO_ADDR
// wait ( time ) ;
61793: LD_VAR 0 8
61797: PPUSH
61798: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61802: LD_INT 35
61804: PPUSH
61805: LD_INT 875
61807: PPUSH
61808: CALL_OW 12
61812: PPUSH
61813: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61817: LD_INT 1
61819: PPUSH
61820: LD_INT 5
61822: PPUSH
61823: CALL_OW 12
61827: PPUSH
61828: LD_VAR 0 1
61832: PPUSH
61833: LD_INT 1
61835: PPUSH
61836: CALL_OW 55
// end ;
61840: GO 61650
// end ;
61842: LD_VAR 0 5
61846: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61847: LD_INT 0
61849: PPUSH
61850: PPUSH
61851: PPUSH
61852: PPUSH
61853: PPUSH
61854: PPUSH
61855: PPUSH
61856: PPUSH
// if not turrets or not factories then
61857: LD_VAR 0 1
61861: NOT
61862: PUSH
61863: LD_VAR 0 2
61867: NOT
61868: OR
61869: IFFALSE 61873
// exit ;
61871: GO 62180
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61873: LD_ADDR_VAR 0 10
61877: PUSH
61878: LD_INT 5
61880: PUSH
61881: LD_INT 6
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 2
61890: PUSH
61891: LD_INT 4
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 3
61900: PUSH
61901: LD_INT 5
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 24
61915: PUSH
61916: LD_INT 25
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 23
61925: PUSH
61926: LD_INT 27
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 42
61939: PUSH
61940: LD_INT 43
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 44
61949: PUSH
61950: LD_INT 46
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 45
61959: PUSH
61960: LD_INT 47
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: LIST
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: LIST
61976: ST_TO_ADDR
// result := [ ] ;
61977: LD_ADDR_VAR 0 3
61981: PUSH
61982: EMPTY
61983: ST_TO_ADDR
// for i in turrets do
61984: LD_ADDR_VAR 0 4
61988: PUSH
61989: LD_VAR 0 1
61993: PUSH
61994: FOR_IN
61995: IFFALSE 62178
// begin nat := GetNation ( i ) ;
61997: LD_ADDR_VAR 0 7
62001: PUSH
62002: LD_VAR 0 4
62006: PPUSH
62007: CALL_OW 248
62011: ST_TO_ADDR
// weapon := 0 ;
62012: LD_ADDR_VAR 0 8
62016: PUSH
62017: LD_INT 0
62019: ST_TO_ADDR
// if not nat then
62020: LD_VAR 0 7
62024: NOT
62025: IFFALSE 62029
// continue ;
62027: GO 61994
// for j in list [ nat ] do
62029: LD_ADDR_VAR 0 5
62033: PUSH
62034: LD_VAR 0 10
62038: PUSH
62039: LD_VAR 0 7
62043: ARRAY
62044: PUSH
62045: FOR_IN
62046: IFFALSE 62087
// if GetBWeapon ( i ) = j [ 1 ] then
62048: LD_VAR 0 4
62052: PPUSH
62053: CALL_OW 269
62057: PUSH
62058: LD_VAR 0 5
62062: PUSH
62063: LD_INT 1
62065: ARRAY
62066: EQUAL
62067: IFFALSE 62085
// begin weapon := j [ 2 ] ;
62069: LD_ADDR_VAR 0 8
62073: PUSH
62074: LD_VAR 0 5
62078: PUSH
62079: LD_INT 2
62081: ARRAY
62082: ST_TO_ADDR
// break ;
62083: GO 62087
// end ;
62085: GO 62045
62087: POP
62088: POP
// if not weapon then
62089: LD_VAR 0 8
62093: NOT
62094: IFFALSE 62098
// continue ;
62096: GO 61994
// for k in factories do
62098: LD_ADDR_VAR 0 6
62102: PUSH
62103: LD_VAR 0 2
62107: PUSH
62108: FOR_IN
62109: IFFALSE 62174
// begin weapons := AvailableWeaponList ( k ) ;
62111: LD_ADDR_VAR 0 9
62115: PUSH
62116: LD_VAR 0 6
62120: PPUSH
62121: CALL_OW 478
62125: ST_TO_ADDR
// if not weapons then
62126: LD_VAR 0 9
62130: NOT
62131: IFFALSE 62135
// continue ;
62133: GO 62108
// if weapon in weapons then
62135: LD_VAR 0 8
62139: PUSH
62140: LD_VAR 0 9
62144: IN
62145: IFFALSE 62172
// begin result := [ i , weapon ] ;
62147: LD_ADDR_VAR 0 3
62151: PUSH
62152: LD_VAR 0 4
62156: PUSH
62157: LD_VAR 0 8
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: ST_TO_ADDR
// exit ;
62166: POP
62167: POP
62168: POP
62169: POP
62170: GO 62180
// end ; end ;
62172: GO 62108
62174: POP
62175: POP
// end ;
62176: GO 61994
62178: POP
62179: POP
// end ;
62180: LD_VAR 0 3
62184: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62185: LD_INT 0
62187: PPUSH
// if not side or side > 8 then
62188: LD_VAR 0 3
62192: NOT
62193: PUSH
62194: LD_VAR 0 3
62198: PUSH
62199: LD_INT 8
62201: GREATER
62202: OR
62203: IFFALSE 62207
// exit ;
62205: GO 62266
// if not range then
62207: LD_VAR 0 4
62211: NOT
62212: IFFALSE 62223
// range := - 12 ;
62214: LD_ADDR_VAR 0 4
62218: PUSH
62219: LD_INT 12
62221: NEG
62222: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62223: LD_VAR 0 1
62227: PPUSH
62228: LD_VAR 0 2
62232: PPUSH
62233: LD_VAR 0 3
62237: PPUSH
62238: LD_VAR 0 4
62242: PPUSH
62243: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62247: LD_VAR 0 1
62251: PPUSH
62252: LD_VAR 0 2
62256: PPUSH
62257: LD_VAR 0 3
62261: PPUSH
62262: CALL_OW 331
// end ;
62266: LD_VAR 0 5
62270: RET
// export function Video ( mode ) ; begin
62271: LD_INT 0
62273: PPUSH
// ingame_video = mode ;
62274: LD_ADDR_OWVAR 52
62278: PUSH
62279: LD_VAR 0 1
62283: ST_TO_ADDR
// interface_hidden = mode ;
62284: LD_ADDR_OWVAR 54
62288: PUSH
62289: LD_VAR 0 1
62293: ST_TO_ADDR
// end ;
62294: LD_VAR 0 2
62298: RET
// export function Join ( array , element ) ; begin
62299: LD_INT 0
62301: PPUSH
// result := array ^ element ;
62302: LD_ADDR_VAR 0 3
62306: PUSH
62307: LD_VAR 0 1
62311: PUSH
62312: LD_VAR 0 2
62316: ADD
62317: ST_TO_ADDR
// end ;
62318: LD_VAR 0 3
62322: RET
// export function JoinUnion ( array , element ) ; begin
62323: LD_INT 0
62325: PPUSH
// result := array union element ;
62326: LD_ADDR_VAR 0 3
62330: PUSH
62331: LD_VAR 0 1
62335: PUSH
62336: LD_VAR 0 2
62340: UNION
62341: ST_TO_ADDR
// end ;
62342: LD_VAR 0 3
62346: RET
// export function GetBehemoths ( side ) ; begin
62347: LD_INT 0
62349: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62350: LD_ADDR_VAR 0 2
62354: PUSH
62355: LD_INT 22
62357: PUSH
62358: LD_VAR 0 1
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 31
62369: PUSH
62370: LD_INT 25
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PPUSH
62381: CALL_OW 69
62385: ST_TO_ADDR
// end ;
62386: LD_VAR 0 2
62390: RET
// export function Shuffle ( array ) ; var i , index ; begin
62391: LD_INT 0
62393: PPUSH
62394: PPUSH
62395: PPUSH
// result := [ ] ;
62396: LD_ADDR_VAR 0 2
62400: PUSH
62401: EMPTY
62402: ST_TO_ADDR
// if not array then
62403: LD_VAR 0 1
62407: NOT
62408: IFFALSE 62412
// exit ;
62410: GO 62511
// Randomize ;
62412: CALL_OW 10
// for i = array downto 1 do
62416: LD_ADDR_VAR 0 3
62420: PUSH
62421: DOUBLE
62422: LD_VAR 0 1
62426: INC
62427: ST_TO_ADDR
62428: LD_INT 1
62430: PUSH
62431: FOR_DOWNTO
62432: IFFALSE 62509
// begin index := rand ( 1 , array ) ;
62434: LD_ADDR_VAR 0 4
62438: PUSH
62439: LD_INT 1
62441: PPUSH
62442: LD_VAR 0 1
62446: PPUSH
62447: CALL_OW 12
62451: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62452: LD_ADDR_VAR 0 2
62456: PUSH
62457: LD_VAR 0 2
62461: PPUSH
62462: LD_VAR 0 2
62466: PUSH
62467: LD_INT 1
62469: PLUS
62470: PPUSH
62471: LD_VAR 0 1
62475: PUSH
62476: LD_VAR 0 4
62480: ARRAY
62481: PPUSH
62482: CALL_OW 2
62486: ST_TO_ADDR
// array := Delete ( array , index ) ;
62487: LD_ADDR_VAR 0 1
62491: PUSH
62492: LD_VAR 0 1
62496: PPUSH
62497: LD_VAR 0 4
62501: PPUSH
62502: CALL_OW 3
62506: ST_TO_ADDR
// end ;
62507: GO 62431
62509: POP
62510: POP
// end ; end_of_file
62511: LD_VAR 0 2
62515: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
62516: GO 62518
62518: DISABLE
// begin ru_radar := 98 ;
62519: LD_ADDR_EXP 29
62523: PUSH
62524: LD_INT 98
62526: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
62527: LD_ADDR_EXP 30
62531: PUSH
62532: LD_INT 89
62534: ST_TO_ADDR
// us_hack := 99 ;
62535: LD_ADDR_EXP 31
62539: PUSH
62540: LD_INT 99
62542: ST_TO_ADDR
// us_artillery := 97 ;
62543: LD_ADDR_EXP 32
62547: PUSH
62548: LD_INT 97
62550: ST_TO_ADDR
// ar_bio_bomb := 91 ;
62551: LD_ADDR_EXP 33
62555: PUSH
62556: LD_INT 91
62558: ST_TO_ADDR
// end ; end_of_file
62559: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
62560: LD_INT 0
62562: PPUSH
62563: PPUSH
// skirmish := false ;
62564: LD_ADDR_EXP 34
62568: PUSH
62569: LD_INT 0
62571: ST_TO_ADDR
// debug_mc := false ;
62572: LD_ADDR_EXP 35
62576: PUSH
62577: LD_INT 0
62579: ST_TO_ADDR
// mc_bases := [ ] ;
62580: LD_ADDR_EXP 36
62584: PUSH
62585: EMPTY
62586: ST_TO_ADDR
// mc_sides := [ ] ;
62587: LD_ADDR_EXP 62
62591: PUSH
62592: EMPTY
62593: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
62594: LD_ADDR_EXP 37
62598: PUSH
62599: EMPTY
62600: ST_TO_ADDR
// mc_building_repairs := [ ] ;
62601: LD_ADDR_EXP 38
62605: PUSH
62606: EMPTY
62607: ST_TO_ADDR
// mc_need_heal := [ ] ;
62608: LD_ADDR_EXP 39
62612: PUSH
62613: EMPTY
62614: ST_TO_ADDR
// mc_healers := [ ] ;
62615: LD_ADDR_EXP 40
62619: PUSH
62620: EMPTY
62621: ST_TO_ADDR
// mc_build_list := [ ] ;
62622: LD_ADDR_EXP 41
62626: PUSH
62627: EMPTY
62628: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
62629: LD_ADDR_EXP 68
62633: PUSH
62634: EMPTY
62635: ST_TO_ADDR
// mc_builders := [ ] ;
62636: LD_ADDR_EXP 42
62640: PUSH
62641: EMPTY
62642: ST_TO_ADDR
// mc_construct_list := [ ] ;
62643: LD_ADDR_EXP 43
62647: PUSH
62648: EMPTY
62649: ST_TO_ADDR
// mc_turret_list := [ ] ;
62650: LD_ADDR_EXP 44
62654: PUSH
62655: EMPTY
62656: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
62657: LD_ADDR_EXP 45
62661: PUSH
62662: EMPTY
62663: ST_TO_ADDR
// mc_miners := [ ] ;
62664: LD_ADDR_EXP 50
62668: PUSH
62669: EMPTY
62670: ST_TO_ADDR
// mc_mines := [ ] ;
62671: LD_ADDR_EXP 49
62675: PUSH
62676: EMPTY
62677: ST_TO_ADDR
// mc_minefields := [ ] ;
62678: LD_ADDR_EXP 51
62682: PUSH
62683: EMPTY
62684: ST_TO_ADDR
// mc_crates := [ ] ;
62685: LD_ADDR_EXP 52
62689: PUSH
62690: EMPTY
62691: ST_TO_ADDR
// mc_crates_collector := [ ] ;
62692: LD_ADDR_EXP 53
62696: PUSH
62697: EMPTY
62698: ST_TO_ADDR
// mc_crates_area := [ ] ;
62699: LD_ADDR_EXP 54
62703: PUSH
62704: EMPTY
62705: ST_TO_ADDR
// mc_vehicles := [ ] ;
62706: LD_ADDR_EXP 55
62710: PUSH
62711: EMPTY
62712: ST_TO_ADDR
// mc_attack := [ ] ;
62713: LD_ADDR_EXP 56
62717: PUSH
62718: EMPTY
62719: ST_TO_ADDR
// mc_produce := [ ] ;
62720: LD_ADDR_EXP 57
62724: PUSH
62725: EMPTY
62726: ST_TO_ADDR
// mc_defender := [ ] ;
62727: LD_ADDR_EXP 58
62731: PUSH
62732: EMPTY
62733: ST_TO_ADDR
// mc_parking := [ ] ;
62734: LD_ADDR_EXP 60
62738: PUSH
62739: EMPTY
62740: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
62741: LD_ADDR_EXP 46
62745: PUSH
62746: EMPTY
62747: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
62748: LD_ADDR_EXP 48
62752: PUSH
62753: EMPTY
62754: ST_TO_ADDR
// mc_scan := [ ] ;
62755: LD_ADDR_EXP 59
62759: PUSH
62760: EMPTY
62761: ST_TO_ADDR
// mc_scan_area := [ ] ;
62762: LD_ADDR_EXP 61
62766: PUSH
62767: EMPTY
62768: ST_TO_ADDR
// mc_tech := [ ] ;
62769: LD_ADDR_EXP 63
62773: PUSH
62774: EMPTY
62775: ST_TO_ADDR
// mc_class := [ ] ;
62776: LD_ADDR_EXP 77
62780: PUSH
62781: EMPTY
62782: ST_TO_ADDR
// mc_class_case_use := [ ] ;
62783: LD_ADDR_EXP 78
62787: PUSH
62788: EMPTY
62789: ST_TO_ADDR
// end ;
62790: LD_VAR 0 1
62794: RET
// export function MC_Kill ( base ) ; begin
62795: LD_INT 0
62797: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
62798: LD_ADDR_EXP 36
62802: PUSH
62803: LD_EXP 36
62807: PPUSH
62808: LD_VAR 0 1
62812: PPUSH
62813: EMPTY
62814: PPUSH
62815: CALL_OW 1
62819: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
62820: LD_ADDR_EXP 37
62824: PUSH
62825: LD_EXP 37
62829: PPUSH
62830: LD_VAR 0 1
62834: PPUSH
62835: EMPTY
62836: PPUSH
62837: CALL_OW 1
62841: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
62842: LD_ADDR_EXP 38
62846: PUSH
62847: LD_EXP 38
62851: PPUSH
62852: LD_VAR 0 1
62856: PPUSH
62857: EMPTY
62858: PPUSH
62859: CALL_OW 1
62863: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
62864: LD_ADDR_EXP 39
62868: PUSH
62869: LD_EXP 39
62873: PPUSH
62874: LD_VAR 0 1
62878: PPUSH
62879: EMPTY
62880: PPUSH
62881: CALL_OW 1
62885: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
62886: LD_ADDR_EXP 40
62890: PUSH
62891: LD_EXP 40
62895: PPUSH
62896: LD_VAR 0 1
62900: PPUSH
62901: EMPTY
62902: PPUSH
62903: CALL_OW 1
62907: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
62908: LD_ADDR_EXP 41
62912: PUSH
62913: LD_EXP 41
62917: PPUSH
62918: LD_VAR 0 1
62922: PPUSH
62923: EMPTY
62924: PPUSH
62925: CALL_OW 1
62929: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
62930: LD_ADDR_EXP 42
62934: PUSH
62935: LD_EXP 42
62939: PPUSH
62940: LD_VAR 0 1
62944: PPUSH
62945: EMPTY
62946: PPUSH
62947: CALL_OW 1
62951: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
62952: LD_ADDR_EXP 43
62956: PUSH
62957: LD_EXP 43
62961: PPUSH
62962: LD_VAR 0 1
62966: PPUSH
62967: EMPTY
62968: PPUSH
62969: CALL_OW 1
62973: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
62974: LD_ADDR_EXP 44
62978: PUSH
62979: LD_EXP 44
62983: PPUSH
62984: LD_VAR 0 1
62988: PPUSH
62989: EMPTY
62990: PPUSH
62991: CALL_OW 1
62995: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
62996: LD_ADDR_EXP 45
63000: PUSH
63001: LD_EXP 45
63005: PPUSH
63006: LD_VAR 0 1
63010: PPUSH
63011: EMPTY
63012: PPUSH
63013: CALL_OW 1
63017: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
63018: LD_ADDR_EXP 46
63022: PUSH
63023: LD_EXP 46
63027: PPUSH
63028: LD_VAR 0 1
63032: PPUSH
63033: EMPTY
63034: PPUSH
63035: CALL_OW 1
63039: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
63040: LD_ADDR_EXP 47
63044: PUSH
63045: LD_EXP 47
63049: PPUSH
63050: LD_VAR 0 1
63054: PPUSH
63055: LD_INT 0
63057: PPUSH
63058: CALL_OW 1
63062: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
63063: LD_ADDR_EXP 48
63067: PUSH
63068: LD_EXP 48
63072: PPUSH
63073: LD_VAR 0 1
63077: PPUSH
63078: EMPTY
63079: PPUSH
63080: CALL_OW 1
63084: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
63085: LD_ADDR_EXP 49
63089: PUSH
63090: LD_EXP 49
63094: PPUSH
63095: LD_VAR 0 1
63099: PPUSH
63100: EMPTY
63101: PPUSH
63102: CALL_OW 1
63106: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
63107: LD_ADDR_EXP 50
63111: PUSH
63112: LD_EXP 50
63116: PPUSH
63117: LD_VAR 0 1
63121: PPUSH
63122: EMPTY
63123: PPUSH
63124: CALL_OW 1
63128: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
63129: LD_ADDR_EXP 51
63133: PUSH
63134: LD_EXP 51
63138: PPUSH
63139: LD_VAR 0 1
63143: PPUSH
63144: EMPTY
63145: PPUSH
63146: CALL_OW 1
63150: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
63151: LD_ADDR_EXP 52
63155: PUSH
63156: LD_EXP 52
63160: PPUSH
63161: LD_VAR 0 1
63165: PPUSH
63166: EMPTY
63167: PPUSH
63168: CALL_OW 1
63172: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
63173: LD_ADDR_EXP 53
63177: PUSH
63178: LD_EXP 53
63182: PPUSH
63183: LD_VAR 0 1
63187: PPUSH
63188: EMPTY
63189: PPUSH
63190: CALL_OW 1
63194: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
63195: LD_ADDR_EXP 54
63199: PUSH
63200: LD_EXP 54
63204: PPUSH
63205: LD_VAR 0 1
63209: PPUSH
63210: EMPTY
63211: PPUSH
63212: CALL_OW 1
63216: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
63217: LD_ADDR_EXP 55
63221: PUSH
63222: LD_EXP 55
63226: PPUSH
63227: LD_VAR 0 1
63231: PPUSH
63232: EMPTY
63233: PPUSH
63234: CALL_OW 1
63238: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
63239: LD_ADDR_EXP 56
63243: PUSH
63244: LD_EXP 56
63248: PPUSH
63249: LD_VAR 0 1
63253: PPUSH
63254: EMPTY
63255: PPUSH
63256: CALL_OW 1
63260: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
63261: LD_ADDR_EXP 57
63265: PUSH
63266: LD_EXP 57
63270: PPUSH
63271: LD_VAR 0 1
63275: PPUSH
63276: EMPTY
63277: PPUSH
63278: CALL_OW 1
63282: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
63283: LD_ADDR_EXP 58
63287: PUSH
63288: LD_EXP 58
63292: PPUSH
63293: LD_VAR 0 1
63297: PPUSH
63298: EMPTY
63299: PPUSH
63300: CALL_OW 1
63304: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
63305: LD_ADDR_EXP 59
63309: PUSH
63310: LD_EXP 59
63314: PPUSH
63315: LD_VAR 0 1
63319: PPUSH
63320: EMPTY
63321: PPUSH
63322: CALL_OW 1
63326: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
63327: LD_ADDR_EXP 60
63331: PUSH
63332: LD_EXP 60
63336: PPUSH
63337: LD_VAR 0 1
63341: PPUSH
63342: EMPTY
63343: PPUSH
63344: CALL_OW 1
63348: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
63349: LD_ADDR_EXP 61
63353: PUSH
63354: LD_EXP 61
63358: PPUSH
63359: LD_VAR 0 1
63363: PPUSH
63364: EMPTY
63365: PPUSH
63366: CALL_OW 1
63370: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
63371: LD_ADDR_EXP 63
63375: PUSH
63376: LD_EXP 63
63380: PPUSH
63381: LD_VAR 0 1
63385: PPUSH
63386: EMPTY
63387: PPUSH
63388: CALL_OW 1
63392: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
63393: LD_ADDR_EXP 65
63397: PUSH
63398: LD_EXP 65
63402: PPUSH
63403: LD_VAR 0 1
63407: PPUSH
63408: EMPTY
63409: PPUSH
63410: CALL_OW 1
63414: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
63415: LD_ADDR_EXP 66
63419: PUSH
63420: LD_EXP 66
63424: PPUSH
63425: LD_VAR 0 1
63429: PPUSH
63430: EMPTY
63431: PPUSH
63432: CALL_OW 1
63436: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
63437: LD_ADDR_EXP 67
63441: PUSH
63442: LD_EXP 67
63446: PPUSH
63447: LD_VAR 0 1
63451: PPUSH
63452: EMPTY
63453: PPUSH
63454: CALL_OW 1
63458: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
63459: LD_ADDR_EXP 68
63463: PUSH
63464: LD_EXP 68
63468: PPUSH
63469: LD_VAR 0 1
63473: PPUSH
63474: EMPTY
63475: PPUSH
63476: CALL_OW 1
63480: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
63481: LD_ADDR_EXP 69
63485: PUSH
63486: LD_EXP 69
63490: PPUSH
63491: LD_VAR 0 1
63495: PPUSH
63496: EMPTY
63497: PPUSH
63498: CALL_OW 1
63502: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
63503: LD_ADDR_EXP 70
63507: PUSH
63508: LD_EXP 70
63512: PPUSH
63513: LD_VAR 0 1
63517: PPUSH
63518: EMPTY
63519: PPUSH
63520: CALL_OW 1
63524: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
63525: LD_ADDR_EXP 71
63529: PUSH
63530: LD_EXP 71
63534: PPUSH
63535: LD_VAR 0 1
63539: PPUSH
63540: EMPTY
63541: PPUSH
63542: CALL_OW 1
63546: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
63547: LD_ADDR_EXP 72
63551: PUSH
63552: LD_EXP 72
63556: PPUSH
63557: LD_VAR 0 1
63561: PPUSH
63562: EMPTY
63563: PPUSH
63564: CALL_OW 1
63568: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
63569: LD_ADDR_EXP 73
63573: PUSH
63574: LD_EXP 73
63578: PPUSH
63579: LD_VAR 0 1
63583: PPUSH
63584: EMPTY
63585: PPUSH
63586: CALL_OW 1
63590: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
63591: LD_ADDR_EXP 74
63595: PUSH
63596: LD_EXP 74
63600: PPUSH
63601: LD_VAR 0 1
63605: PPUSH
63606: EMPTY
63607: PPUSH
63608: CALL_OW 1
63612: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
63613: LD_ADDR_EXP 75
63617: PUSH
63618: LD_EXP 75
63622: PPUSH
63623: LD_VAR 0 1
63627: PPUSH
63628: EMPTY
63629: PPUSH
63630: CALL_OW 1
63634: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
63635: LD_ADDR_EXP 76
63639: PUSH
63640: LD_EXP 76
63644: PPUSH
63645: LD_VAR 0 1
63649: PPUSH
63650: EMPTY
63651: PPUSH
63652: CALL_OW 1
63656: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
63657: LD_ADDR_EXP 77
63661: PUSH
63662: LD_EXP 77
63666: PPUSH
63667: LD_VAR 0 1
63671: PPUSH
63672: EMPTY
63673: PPUSH
63674: CALL_OW 1
63678: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
63679: LD_ADDR_EXP 78
63683: PUSH
63684: LD_EXP 78
63688: PPUSH
63689: LD_VAR 0 1
63693: PPUSH
63694: LD_INT 0
63696: PPUSH
63697: CALL_OW 1
63701: ST_TO_ADDR
// end ;
63702: LD_VAR 0 2
63706: RET
// export function MC_Add ( side , units ) ; var base ; begin
63707: LD_INT 0
63709: PPUSH
63710: PPUSH
// base := mc_bases + 1 ;
63711: LD_ADDR_VAR 0 4
63715: PUSH
63716: LD_EXP 36
63720: PUSH
63721: LD_INT 1
63723: PLUS
63724: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
63725: LD_ADDR_EXP 62
63729: PUSH
63730: LD_EXP 62
63734: PPUSH
63735: LD_VAR 0 4
63739: PPUSH
63740: LD_VAR 0 1
63744: PPUSH
63745: CALL_OW 1
63749: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
63750: LD_ADDR_EXP 36
63754: PUSH
63755: LD_EXP 36
63759: PPUSH
63760: LD_VAR 0 4
63764: PPUSH
63765: LD_VAR 0 2
63769: PPUSH
63770: CALL_OW 1
63774: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
63775: LD_ADDR_EXP 37
63779: PUSH
63780: LD_EXP 37
63784: PPUSH
63785: LD_VAR 0 4
63789: PPUSH
63790: EMPTY
63791: PPUSH
63792: CALL_OW 1
63796: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
63797: LD_ADDR_EXP 38
63801: PUSH
63802: LD_EXP 38
63806: PPUSH
63807: LD_VAR 0 4
63811: PPUSH
63812: EMPTY
63813: PPUSH
63814: CALL_OW 1
63818: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
63819: LD_ADDR_EXP 39
63823: PUSH
63824: LD_EXP 39
63828: PPUSH
63829: LD_VAR 0 4
63833: PPUSH
63834: EMPTY
63835: PPUSH
63836: CALL_OW 1
63840: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
63841: LD_ADDR_EXP 40
63845: PUSH
63846: LD_EXP 40
63850: PPUSH
63851: LD_VAR 0 4
63855: PPUSH
63856: EMPTY
63857: PPUSH
63858: CALL_OW 1
63862: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
63863: LD_ADDR_EXP 41
63867: PUSH
63868: LD_EXP 41
63872: PPUSH
63873: LD_VAR 0 4
63877: PPUSH
63878: EMPTY
63879: PPUSH
63880: CALL_OW 1
63884: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
63885: LD_ADDR_EXP 42
63889: PUSH
63890: LD_EXP 42
63894: PPUSH
63895: LD_VAR 0 4
63899: PPUSH
63900: EMPTY
63901: PPUSH
63902: CALL_OW 1
63906: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
63907: LD_ADDR_EXP 43
63911: PUSH
63912: LD_EXP 43
63916: PPUSH
63917: LD_VAR 0 4
63921: PPUSH
63922: EMPTY
63923: PPUSH
63924: CALL_OW 1
63928: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
63929: LD_ADDR_EXP 44
63933: PUSH
63934: LD_EXP 44
63938: PPUSH
63939: LD_VAR 0 4
63943: PPUSH
63944: EMPTY
63945: PPUSH
63946: CALL_OW 1
63950: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
63951: LD_ADDR_EXP 45
63955: PUSH
63956: LD_EXP 45
63960: PPUSH
63961: LD_VAR 0 4
63965: PPUSH
63966: EMPTY
63967: PPUSH
63968: CALL_OW 1
63972: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
63973: LD_ADDR_EXP 46
63977: PUSH
63978: LD_EXP 46
63982: PPUSH
63983: LD_VAR 0 4
63987: PPUSH
63988: EMPTY
63989: PPUSH
63990: CALL_OW 1
63994: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
63995: LD_ADDR_EXP 47
63999: PUSH
64000: LD_EXP 47
64004: PPUSH
64005: LD_VAR 0 4
64009: PPUSH
64010: LD_INT 0
64012: PPUSH
64013: CALL_OW 1
64017: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
64018: LD_ADDR_EXP 48
64022: PUSH
64023: LD_EXP 48
64027: PPUSH
64028: LD_VAR 0 4
64032: PPUSH
64033: EMPTY
64034: PPUSH
64035: CALL_OW 1
64039: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
64040: LD_ADDR_EXP 49
64044: PUSH
64045: LD_EXP 49
64049: PPUSH
64050: LD_VAR 0 4
64054: PPUSH
64055: EMPTY
64056: PPUSH
64057: CALL_OW 1
64061: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
64062: LD_ADDR_EXP 50
64066: PUSH
64067: LD_EXP 50
64071: PPUSH
64072: LD_VAR 0 4
64076: PPUSH
64077: EMPTY
64078: PPUSH
64079: CALL_OW 1
64083: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
64084: LD_ADDR_EXP 51
64088: PUSH
64089: LD_EXP 51
64093: PPUSH
64094: LD_VAR 0 4
64098: PPUSH
64099: EMPTY
64100: PPUSH
64101: CALL_OW 1
64105: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
64106: LD_ADDR_EXP 52
64110: PUSH
64111: LD_EXP 52
64115: PPUSH
64116: LD_VAR 0 4
64120: PPUSH
64121: EMPTY
64122: PPUSH
64123: CALL_OW 1
64127: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
64128: LD_ADDR_EXP 53
64132: PUSH
64133: LD_EXP 53
64137: PPUSH
64138: LD_VAR 0 4
64142: PPUSH
64143: EMPTY
64144: PPUSH
64145: CALL_OW 1
64149: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
64150: LD_ADDR_EXP 54
64154: PUSH
64155: LD_EXP 54
64159: PPUSH
64160: LD_VAR 0 4
64164: PPUSH
64165: EMPTY
64166: PPUSH
64167: CALL_OW 1
64171: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
64172: LD_ADDR_EXP 55
64176: PUSH
64177: LD_EXP 55
64181: PPUSH
64182: LD_VAR 0 4
64186: PPUSH
64187: EMPTY
64188: PPUSH
64189: CALL_OW 1
64193: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
64194: LD_ADDR_EXP 56
64198: PUSH
64199: LD_EXP 56
64203: PPUSH
64204: LD_VAR 0 4
64208: PPUSH
64209: EMPTY
64210: PPUSH
64211: CALL_OW 1
64215: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
64216: LD_ADDR_EXP 57
64220: PUSH
64221: LD_EXP 57
64225: PPUSH
64226: LD_VAR 0 4
64230: PPUSH
64231: EMPTY
64232: PPUSH
64233: CALL_OW 1
64237: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
64238: LD_ADDR_EXP 58
64242: PUSH
64243: LD_EXP 58
64247: PPUSH
64248: LD_VAR 0 4
64252: PPUSH
64253: EMPTY
64254: PPUSH
64255: CALL_OW 1
64259: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
64260: LD_ADDR_EXP 59
64264: PUSH
64265: LD_EXP 59
64269: PPUSH
64270: LD_VAR 0 4
64274: PPUSH
64275: EMPTY
64276: PPUSH
64277: CALL_OW 1
64281: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
64282: LD_ADDR_EXP 60
64286: PUSH
64287: LD_EXP 60
64291: PPUSH
64292: LD_VAR 0 4
64296: PPUSH
64297: EMPTY
64298: PPUSH
64299: CALL_OW 1
64303: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
64304: LD_ADDR_EXP 61
64308: PUSH
64309: LD_EXP 61
64313: PPUSH
64314: LD_VAR 0 4
64318: PPUSH
64319: EMPTY
64320: PPUSH
64321: CALL_OW 1
64325: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
64326: LD_ADDR_EXP 63
64330: PUSH
64331: LD_EXP 63
64335: PPUSH
64336: LD_VAR 0 4
64340: PPUSH
64341: EMPTY
64342: PPUSH
64343: CALL_OW 1
64347: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
64348: LD_ADDR_EXP 65
64352: PUSH
64353: LD_EXP 65
64357: PPUSH
64358: LD_VAR 0 4
64362: PPUSH
64363: EMPTY
64364: PPUSH
64365: CALL_OW 1
64369: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
64370: LD_ADDR_EXP 66
64374: PUSH
64375: LD_EXP 66
64379: PPUSH
64380: LD_VAR 0 4
64384: PPUSH
64385: EMPTY
64386: PPUSH
64387: CALL_OW 1
64391: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
64392: LD_ADDR_EXP 67
64396: PUSH
64397: LD_EXP 67
64401: PPUSH
64402: LD_VAR 0 4
64406: PPUSH
64407: EMPTY
64408: PPUSH
64409: CALL_OW 1
64413: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
64414: LD_ADDR_EXP 68
64418: PUSH
64419: LD_EXP 68
64423: PPUSH
64424: LD_VAR 0 4
64428: PPUSH
64429: EMPTY
64430: PPUSH
64431: CALL_OW 1
64435: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
64436: LD_ADDR_EXP 69
64440: PUSH
64441: LD_EXP 69
64445: PPUSH
64446: LD_VAR 0 4
64450: PPUSH
64451: EMPTY
64452: PPUSH
64453: CALL_OW 1
64457: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
64458: LD_ADDR_EXP 70
64462: PUSH
64463: LD_EXP 70
64467: PPUSH
64468: LD_VAR 0 4
64472: PPUSH
64473: EMPTY
64474: PPUSH
64475: CALL_OW 1
64479: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
64480: LD_ADDR_EXP 71
64484: PUSH
64485: LD_EXP 71
64489: PPUSH
64490: LD_VAR 0 4
64494: PPUSH
64495: EMPTY
64496: PPUSH
64497: CALL_OW 1
64501: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
64502: LD_ADDR_EXP 72
64506: PUSH
64507: LD_EXP 72
64511: PPUSH
64512: LD_VAR 0 4
64516: PPUSH
64517: EMPTY
64518: PPUSH
64519: CALL_OW 1
64523: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
64524: LD_ADDR_EXP 73
64528: PUSH
64529: LD_EXP 73
64533: PPUSH
64534: LD_VAR 0 4
64538: PPUSH
64539: EMPTY
64540: PPUSH
64541: CALL_OW 1
64545: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
64546: LD_ADDR_EXP 74
64550: PUSH
64551: LD_EXP 74
64555: PPUSH
64556: LD_VAR 0 4
64560: PPUSH
64561: EMPTY
64562: PPUSH
64563: CALL_OW 1
64567: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
64568: LD_ADDR_EXP 75
64572: PUSH
64573: LD_EXP 75
64577: PPUSH
64578: LD_VAR 0 4
64582: PPUSH
64583: EMPTY
64584: PPUSH
64585: CALL_OW 1
64589: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
64590: LD_ADDR_EXP 76
64594: PUSH
64595: LD_EXP 76
64599: PPUSH
64600: LD_VAR 0 4
64604: PPUSH
64605: EMPTY
64606: PPUSH
64607: CALL_OW 1
64611: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
64612: LD_ADDR_EXP 77
64616: PUSH
64617: LD_EXP 77
64621: PPUSH
64622: LD_VAR 0 4
64626: PPUSH
64627: EMPTY
64628: PPUSH
64629: CALL_OW 1
64633: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
64634: LD_ADDR_EXP 78
64638: PUSH
64639: LD_EXP 78
64643: PPUSH
64644: LD_VAR 0 4
64648: PPUSH
64649: LD_INT 0
64651: PPUSH
64652: CALL_OW 1
64656: ST_TO_ADDR
// result := base ;
64657: LD_ADDR_VAR 0 3
64661: PUSH
64662: LD_VAR 0 4
64666: ST_TO_ADDR
// end ;
64667: LD_VAR 0 3
64671: RET
// export function MC_Start ( ) ; var i ; begin
64672: LD_INT 0
64674: PPUSH
64675: PPUSH
// for i = 1 to mc_bases do
64676: LD_ADDR_VAR 0 2
64680: PUSH
64681: DOUBLE
64682: LD_INT 1
64684: DEC
64685: ST_TO_ADDR
64686: LD_EXP 36
64690: PUSH
64691: FOR_TO
64692: IFFALSE 65769
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
64694: LD_ADDR_EXP 36
64698: PUSH
64699: LD_EXP 36
64703: PPUSH
64704: LD_VAR 0 2
64708: PPUSH
64709: LD_EXP 36
64713: PUSH
64714: LD_VAR 0 2
64718: ARRAY
64719: PUSH
64720: LD_INT 0
64722: DIFF
64723: PPUSH
64724: CALL_OW 1
64728: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
64729: LD_ADDR_EXP 37
64733: PUSH
64734: LD_EXP 37
64738: PPUSH
64739: LD_VAR 0 2
64743: PPUSH
64744: EMPTY
64745: PPUSH
64746: CALL_OW 1
64750: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
64751: LD_ADDR_EXP 38
64755: PUSH
64756: LD_EXP 38
64760: PPUSH
64761: LD_VAR 0 2
64765: PPUSH
64766: EMPTY
64767: PPUSH
64768: CALL_OW 1
64772: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
64773: LD_ADDR_EXP 39
64777: PUSH
64778: LD_EXP 39
64782: PPUSH
64783: LD_VAR 0 2
64787: PPUSH
64788: EMPTY
64789: PPUSH
64790: CALL_OW 1
64794: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
64795: LD_ADDR_EXP 40
64799: PUSH
64800: LD_EXP 40
64804: PPUSH
64805: LD_VAR 0 2
64809: PPUSH
64810: EMPTY
64811: PUSH
64812: EMPTY
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PPUSH
64818: CALL_OW 1
64822: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
64823: LD_ADDR_EXP 41
64827: PUSH
64828: LD_EXP 41
64832: PPUSH
64833: LD_VAR 0 2
64837: PPUSH
64838: EMPTY
64839: PPUSH
64840: CALL_OW 1
64844: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
64845: LD_ADDR_EXP 68
64849: PUSH
64850: LD_EXP 68
64854: PPUSH
64855: LD_VAR 0 2
64859: PPUSH
64860: EMPTY
64861: PPUSH
64862: CALL_OW 1
64866: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
64867: LD_ADDR_EXP 42
64871: PUSH
64872: LD_EXP 42
64876: PPUSH
64877: LD_VAR 0 2
64881: PPUSH
64882: EMPTY
64883: PPUSH
64884: CALL_OW 1
64888: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
64889: LD_ADDR_EXP 43
64893: PUSH
64894: LD_EXP 43
64898: PPUSH
64899: LD_VAR 0 2
64903: PPUSH
64904: EMPTY
64905: PPUSH
64906: CALL_OW 1
64910: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
64911: LD_ADDR_EXP 44
64915: PUSH
64916: LD_EXP 44
64920: PPUSH
64921: LD_VAR 0 2
64925: PPUSH
64926: LD_EXP 36
64930: PUSH
64931: LD_VAR 0 2
64935: ARRAY
64936: PPUSH
64937: LD_INT 2
64939: PUSH
64940: LD_INT 30
64942: PUSH
64943: LD_INT 32
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 30
64952: PUSH
64953: LD_INT 33
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: LIST
64964: PPUSH
64965: CALL_OW 72
64969: PPUSH
64970: CALL_OW 1
64974: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
64975: LD_ADDR_EXP 45
64979: PUSH
64980: LD_EXP 45
64984: PPUSH
64985: LD_VAR 0 2
64989: PPUSH
64990: LD_EXP 36
64994: PUSH
64995: LD_VAR 0 2
64999: ARRAY
65000: PPUSH
65001: LD_INT 2
65003: PUSH
65004: LD_INT 30
65006: PUSH
65007: LD_INT 32
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 30
65016: PUSH
65017: LD_INT 31
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 58
65031: PUSH
65032: EMPTY
65033: LIST
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PPUSH
65039: CALL_OW 72
65043: PPUSH
65044: CALL_OW 1
65048: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
65049: LD_ADDR_EXP 46
65053: PUSH
65054: LD_EXP 46
65058: PPUSH
65059: LD_VAR 0 2
65063: PPUSH
65064: EMPTY
65065: PPUSH
65066: CALL_OW 1
65070: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
65071: LD_ADDR_EXP 50
65075: PUSH
65076: LD_EXP 50
65080: PPUSH
65081: LD_VAR 0 2
65085: PPUSH
65086: EMPTY
65087: PPUSH
65088: CALL_OW 1
65092: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
65093: LD_ADDR_EXP 49
65097: PUSH
65098: LD_EXP 49
65102: PPUSH
65103: LD_VAR 0 2
65107: PPUSH
65108: EMPTY
65109: PPUSH
65110: CALL_OW 1
65114: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
65115: LD_ADDR_EXP 51
65119: PUSH
65120: LD_EXP 51
65124: PPUSH
65125: LD_VAR 0 2
65129: PPUSH
65130: EMPTY
65131: PPUSH
65132: CALL_OW 1
65136: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
65137: LD_ADDR_EXP 52
65141: PUSH
65142: LD_EXP 52
65146: PPUSH
65147: LD_VAR 0 2
65151: PPUSH
65152: EMPTY
65153: PPUSH
65154: CALL_OW 1
65158: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
65159: LD_ADDR_EXP 53
65163: PUSH
65164: LD_EXP 53
65168: PPUSH
65169: LD_VAR 0 2
65173: PPUSH
65174: EMPTY
65175: PPUSH
65176: CALL_OW 1
65180: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
65181: LD_ADDR_EXP 54
65185: PUSH
65186: LD_EXP 54
65190: PPUSH
65191: LD_VAR 0 2
65195: PPUSH
65196: EMPTY
65197: PPUSH
65198: CALL_OW 1
65202: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
65203: LD_ADDR_EXP 55
65207: PUSH
65208: LD_EXP 55
65212: PPUSH
65213: LD_VAR 0 2
65217: PPUSH
65218: EMPTY
65219: PPUSH
65220: CALL_OW 1
65224: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
65225: LD_ADDR_EXP 56
65229: PUSH
65230: LD_EXP 56
65234: PPUSH
65235: LD_VAR 0 2
65239: PPUSH
65240: EMPTY
65241: PPUSH
65242: CALL_OW 1
65246: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
65247: LD_ADDR_EXP 57
65251: PUSH
65252: LD_EXP 57
65256: PPUSH
65257: LD_VAR 0 2
65261: PPUSH
65262: EMPTY
65263: PPUSH
65264: CALL_OW 1
65268: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
65269: LD_ADDR_EXP 58
65273: PUSH
65274: LD_EXP 58
65278: PPUSH
65279: LD_VAR 0 2
65283: PPUSH
65284: EMPTY
65285: PPUSH
65286: CALL_OW 1
65290: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
65291: LD_ADDR_EXP 47
65295: PUSH
65296: LD_EXP 47
65300: PPUSH
65301: LD_VAR 0 2
65305: PPUSH
65306: LD_INT 0
65308: PPUSH
65309: CALL_OW 1
65313: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
65314: LD_ADDR_EXP 60
65318: PUSH
65319: LD_EXP 60
65323: PPUSH
65324: LD_VAR 0 2
65328: PPUSH
65329: LD_INT 0
65331: PPUSH
65332: CALL_OW 1
65336: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
65337: LD_ADDR_EXP 48
65341: PUSH
65342: LD_EXP 48
65346: PPUSH
65347: LD_VAR 0 2
65351: PPUSH
65352: EMPTY
65353: PPUSH
65354: CALL_OW 1
65358: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
65359: LD_ADDR_EXP 59
65363: PUSH
65364: LD_EXP 59
65368: PPUSH
65369: LD_VAR 0 2
65373: PPUSH
65374: LD_INT 0
65376: PPUSH
65377: CALL_OW 1
65381: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
65382: LD_ADDR_EXP 61
65386: PUSH
65387: LD_EXP 61
65391: PPUSH
65392: LD_VAR 0 2
65396: PPUSH
65397: EMPTY
65398: PPUSH
65399: CALL_OW 1
65403: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
65404: LD_ADDR_EXP 64
65408: PUSH
65409: LD_EXP 64
65413: PPUSH
65414: LD_VAR 0 2
65418: PPUSH
65419: LD_INT 0
65421: PPUSH
65422: CALL_OW 1
65426: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
65427: LD_ADDR_EXP 65
65431: PUSH
65432: LD_EXP 65
65436: PPUSH
65437: LD_VAR 0 2
65441: PPUSH
65442: EMPTY
65443: PPUSH
65444: CALL_OW 1
65448: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
65449: LD_ADDR_EXP 66
65453: PUSH
65454: LD_EXP 66
65458: PPUSH
65459: LD_VAR 0 2
65463: PPUSH
65464: EMPTY
65465: PPUSH
65466: CALL_OW 1
65470: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
65471: LD_ADDR_EXP 67
65475: PUSH
65476: LD_EXP 67
65480: PPUSH
65481: LD_VAR 0 2
65485: PPUSH
65486: EMPTY
65487: PPUSH
65488: CALL_OW 1
65492: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
65493: LD_ADDR_EXP 69
65497: PUSH
65498: LD_EXP 69
65502: PPUSH
65503: LD_VAR 0 2
65507: PPUSH
65508: LD_EXP 36
65512: PUSH
65513: LD_VAR 0 2
65517: ARRAY
65518: PPUSH
65519: LD_INT 2
65521: PUSH
65522: LD_INT 30
65524: PUSH
65525: LD_INT 6
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 30
65534: PUSH
65535: LD_INT 7
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 30
65544: PUSH
65545: LD_INT 8
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: PPUSH
65558: CALL_OW 72
65562: PPUSH
65563: CALL_OW 1
65567: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
65568: LD_ADDR_EXP 70
65572: PUSH
65573: LD_EXP 70
65577: PPUSH
65578: LD_VAR 0 2
65582: PPUSH
65583: EMPTY
65584: PPUSH
65585: CALL_OW 1
65589: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
65590: LD_ADDR_EXP 71
65594: PUSH
65595: LD_EXP 71
65599: PPUSH
65600: LD_VAR 0 2
65604: PPUSH
65605: EMPTY
65606: PPUSH
65607: CALL_OW 1
65611: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
65612: LD_ADDR_EXP 72
65616: PUSH
65617: LD_EXP 72
65621: PPUSH
65622: LD_VAR 0 2
65626: PPUSH
65627: EMPTY
65628: PPUSH
65629: CALL_OW 1
65633: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
65634: LD_ADDR_EXP 73
65638: PUSH
65639: LD_EXP 73
65643: PPUSH
65644: LD_VAR 0 2
65648: PPUSH
65649: EMPTY
65650: PPUSH
65651: CALL_OW 1
65655: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
65656: LD_ADDR_EXP 74
65660: PUSH
65661: LD_EXP 74
65665: PPUSH
65666: LD_VAR 0 2
65670: PPUSH
65671: EMPTY
65672: PPUSH
65673: CALL_OW 1
65677: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
65678: LD_ADDR_EXP 75
65682: PUSH
65683: LD_EXP 75
65687: PPUSH
65688: LD_VAR 0 2
65692: PPUSH
65693: EMPTY
65694: PPUSH
65695: CALL_OW 1
65699: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
65700: LD_ADDR_EXP 76
65704: PUSH
65705: LD_EXP 76
65709: PPUSH
65710: LD_VAR 0 2
65714: PPUSH
65715: EMPTY
65716: PPUSH
65717: CALL_OW 1
65721: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
65722: LD_ADDR_EXP 77
65726: PUSH
65727: LD_EXP 77
65731: PPUSH
65732: LD_VAR 0 2
65736: PPUSH
65737: EMPTY
65738: PPUSH
65739: CALL_OW 1
65743: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
65744: LD_ADDR_EXP 78
65748: PUSH
65749: LD_EXP 78
65753: PPUSH
65754: LD_VAR 0 2
65758: PPUSH
65759: LD_INT 0
65761: PPUSH
65762: CALL_OW 1
65766: ST_TO_ADDR
// end ;
65767: GO 64691
65769: POP
65770: POP
// MC_InitSides ( ) ;
65771: CALL 66057 0 0
// MC_InitResearch ( ) ;
65775: CALL 65796 0 0
// CustomInitMacro ( ) ;
65779: CALL 1417 0 0
// skirmish := true ;
65783: LD_ADDR_EXP 34
65787: PUSH
65788: LD_INT 1
65790: ST_TO_ADDR
// end ;
65791: LD_VAR 0 1
65795: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
65796: LD_INT 0
65798: PPUSH
65799: PPUSH
65800: PPUSH
65801: PPUSH
65802: PPUSH
65803: PPUSH
// if not mc_bases then
65804: LD_EXP 36
65808: NOT
65809: IFFALSE 65813
// exit ;
65811: GO 66052
// for i = 1 to 8 do
65813: LD_ADDR_VAR 0 2
65817: PUSH
65818: DOUBLE
65819: LD_INT 1
65821: DEC
65822: ST_TO_ADDR
65823: LD_INT 8
65825: PUSH
65826: FOR_TO
65827: IFFALSE 65853
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
65829: LD_ADDR_EXP 63
65833: PUSH
65834: LD_EXP 63
65838: PPUSH
65839: LD_VAR 0 2
65843: PPUSH
65844: EMPTY
65845: PPUSH
65846: CALL_OW 1
65850: ST_TO_ADDR
65851: GO 65826
65853: POP
65854: POP
// tmp := [ ] ;
65855: LD_ADDR_VAR 0 5
65859: PUSH
65860: EMPTY
65861: ST_TO_ADDR
// for i = 1 to mc_sides do
65862: LD_ADDR_VAR 0 2
65866: PUSH
65867: DOUBLE
65868: LD_INT 1
65870: DEC
65871: ST_TO_ADDR
65872: LD_EXP 62
65876: PUSH
65877: FOR_TO
65878: IFFALSE 65936
// if not mc_sides [ i ] in tmp then
65880: LD_EXP 62
65884: PUSH
65885: LD_VAR 0 2
65889: ARRAY
65890: PUSH
65891: LD_VAR 0 5
65895: IN
65896: NOT
65897: IFFALSE 65934
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
65899: LD_ADDR_VAR 0 5
65903: PUSH
65904: LD_VAR 0 5
65908: PPUSH
65909: LD_VAR 0 5
65913: PUSH
65914: LD_INT 1
65916: PLUS
65917: PPUSH
65918: LD_EXP 62
65922: PUSH
65923: LD_VAR 0 2
65927: ARRAY
65928: PPUSH
65929: CALL_OW 2
65933: ST_TO_ADDR
65934: GO 65877
65936: POP
65937: POP
// if not tmp then
65938: LD_VAR 0 5
65942: NOT
65943: IFFALSE 65947
// exit ;
65945: GO 66052
// for j in tmp do
65947: LD_ADDR_VAR 0 3
65951: PUSH
65952: LD_VAR 0 5
65956: PUSH
65957: FOR_IN
65958: IFFALSE 66050
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
65960: LD_ADDR_VAR 0 6
65964: PUSH
65965: LD_INT 22
65967: PUSH
65968: LD_VAR 0 3
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: PPUSH
65977: CALL_OW 69
65981: ST_TO_ADDR
// if not un then
65982: LD_VAR 0 6
65986: NOT
65987: IFFALSE 65991
// continue ;
65989: GO 65957
// nation := GetNation ( un [ 1 ] ) ;
65991: LD_ADDR_VAR 0 4
65995: PUSH
65996: LD_VAR 0 6
66000: PUSH
66001: LD_INT 1
66003: ARRAY
66004: PPUSH
66005: CALL_OW 248
66009: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
66010: LD_ADDR_EXP 63
66014: PUSH
66015: LD_EXP 63
66019: PPUSH
66020: LD_VAR 0 3
66024: PPUSH
66025: LD_VAR 0 3
66029: PPUSH
66030: LD_VAR 0 4
66034: PPUSH
66035: LD_INT 1
66037: PPUSH
66038: CALL 20008 0 3
66042: PPUSH
66043: CALL_OW 1
66047: ST_TO_ADDR
// end ;
66048: GO 65957
66050: POP
66051: POP
// end ;
66052: LD_VAR 0 1
66056: RET
// export function MC_InitSides ( ) ; var i ; begin
66057: LD_INT 0
66059: PPUSH
66060: PPUSH
// if not mc_bases then
66061: LD_EXP 36
66065: NOT
66066: IFFALSE 66070
// exit ;
66068: GO 66144
// for i = 1 to mc_bases do
66070: LD_ADDR_VAR 0 2
66074: PUSH
66075: DOUBLE
66076: LD_INT 1
66078: DEC
66079: ST_TO_ADDR
66080: LD_EXP 36
66084: PUSH
66085: FOR_TO
66086: IFFALSE 66142
// if mc_bases [ i ] then
66088: LD_EXP 36
66092: PUSH
66093: LD_VAR 0 2
66097: ARRAY
66098: IFFALSE 66140
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
66100: LD_ADDR_EXP 62
66104: PUSH
66105: LD_EXP 62
66109: PPUSH
66110: LD_VAR 0 2
66114: PPUSH
66115: LD_EXP 36
66119: PUSH
66120: LD_VAR 0 2
66124: ARRAY
66125: PUSH
66126: LD_INT 1
66128: ARRAY
66129: PPUSH
66130: CALL_OW 255
66134: PPUSH
66135: CALL_OW 1
66139: ST_TO_ADDR
66140: GO 66085
66142: POP
66143: POP
// end ;
66144: LD_VAR 0 1
66148: RET
// every 0 0$01 trigger skirmish do
66149: LD_EXP 34
66153: IFFALSE 66307
66155: GO 66157
66157: DISABLE
// begin enable ;
66158: ENABLE
// MC_CheckBuildings ( ) ;
66159: CALL 70796 0 0
// MC_CheckPeopleLife ( ) ;
66163: CALL 70921 0 0
// RaiseSailEvent ( 100 ) ;
66167: LD_INT 100
66169: PPUSH
66170: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
66174: LD_INT 103
66176: PPUSH
66177: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
66181: LD_INT 104
66183: PPUSH
66184: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
66188: LD_INT 105
66190: PPUSH
66191: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
66195: LD_INT 106
66197: PPUSH
66198: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
66202: LD_INT 107
66204: PPUSH
66205: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
66209: LD_INT 108
66211: PPUSH
66212: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
66216: LD_INT 109
66218: PPUSH
66219: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
66223: LD_INT 110
66225: PPUSH
66226: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
66230: LD_INT 111
66232: PPUSH
66233: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
66237: LD_INT 112
66239: PPUSH
66240: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
66244: LD_INT 113
66246: PPUSH
66247: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
66251: LD_INT 120
66253: PPUSH
66254: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
66258: LD_INT 121
66260: PPUSH
66261: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
66265: LD_INT 122
66267: PPUSH
66268: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
66272: LD_INT 123
66274: PPUSH
66275: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
66279: LD_INT 124
66281: PPUSH
66282: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
66286: LD_INT 125
66288: PPUSH
66289: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
66293: LD_INT 126
66295: PPUSH
66296: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
66300: LD_INT 200
66302: PPUSH
66303: CALL_OW 427
// end ;
66307: END
// on SailEvent ( event ) do begin if event < 100 then
66308: LD_VAR 0 1
66312: PUSH
66313: LD_INT 100
66315: LESS
66316: IFFALSE 66327
// CustomEvent ( event ) ;
66318: LD_VAR 0 1
66322: PPUSH
66323: CALL 19207 0 1
// if event = 100 then
66327: LD_VAR 0 1
66331: PUSH
66332: LD_INT 100
66334: EQUAL
66335: IFFALSE 66341
// MC_ClassManager ( ) ;
66337: CALL 66733 0 0
// if event = 101 then
66341: LD_VAR 0 1
66345: PUSH
66346: LD_INT 101
66348: EQUAL
66349: IFFALSE 66355
// MC_RepairBuildings ( ) ;
66351: CALL 71517 0 0
// if event = 102 then
66355: LD_VAR 0 1
66359: PUSH
66360: LD_INT 102
66362: EQUAL
66363: IFFALSE 66369
// MC_Heal ( ) ;
66365: CALL 71923 0 0
// if event = 103 then
66369: LD_VAR 0 1
66373: PUSH
66374: LD_INT 103
66376: EQUAL
66377: IFFALSE 66383
// MC_Build ( ) ;
66379: CALL 72345 0 0
// if event = 104 then
66383: LD_VAR 0 1
66387: PUSH
66388: LD_INT 104
66390: EQUAL
66391: IFFALSE 66397
// MC_TurretWeapon ( ) ;
66393: CALL 73958 0 0
// if event = 105 then
66397: LD_VAR 0 1
66401: PUSH
66402: LD_INT 105
66404: EQUAL
66405: IFFALSE 66411
// MC_BuildUpgrade ( ) ;
66407: CALL 73509 0 0
// if event = 106 then
66411: LD_VAR 0 1
66415: PUSH
66416: LD_INT 106
66418: EQUAL
66419: IFFALSE 66425
// MC_PlantMines ( ) ;
66421: CALL 74388 0 0
// if event = 107 then
66425: LD_VAR 0 1
66429: PUSH
66430: LD_INT 107
66432: EQUAL
66433: IFFALSE 66439
// MC_CollectCrates ( ) ;
66435: CALL 75422 0 0
// if event = 108 then
66439: LD_VAR 0 1
66443: PUSH
66444: LD_INT 108
66446: EQUAL
66447: IFFALSE 66453
// MC_LinkRemoteControl ( ) ;
66449: CALL 77179 0 0
// if event = 109 then
66453: LD_VAR 0 1
66457: PUSH
66458: LD_INT 109
66460: EQUAL
66461: IFFALSE 66467
// MC_ProduceVehicle ( ) ;
66463: CALL 77360 0 0
// if event = 110 then
66467: LD_VAR 0 1
66471: PUSH
66472: LD_INT 110
66474: EQUAL
66475: IFFALSE 66481
// MC_SendAttack ( ) ;
66477: CALL 77841 0 0
// if event = 111 then
66481: LD_VAR 0 1
66485: PUSH
66486: LD_INT 111
66488: EQUAL
66489: IFFALSE 66495
// MC_Defend ( ) ;
66491: CALL 77949 0 0
// if event = 112 then
66495: LD_VAR 0 1
66499: PUSH
66500: LD_INT 112
66502: EQUAL
66503: IFFALSE 66509
// MC_Research ( ) ;
66505: CALL 78576 0 0
// if event = 113 then
66509: LD_VAR 0 1
66513: PUSH
66514: LD_INT 113
66516: EQUAL
66517: IFFALSE 66523
// MC_MinesTrigger ( ) ;
66519: CALL 79690 0 0
// if event = 120 then
66523: LD_VAR 0 1
66527: PUSH
66528: LD_INT 120
66530: EQUAL
66531: IFFALSE 66537
// MC_RepairVehicle ( ) ;
66533: CALL 79789 0 0
// if event = 121 then
66537: LD_VAR 0 1
66541: PUSH
66542: LD_INT 121
66544: EQUAL
66545: IFFALSE 66551
// MC_TameApe ( ) ;
66547: CALL 80532 0 0
// if event = 122 then
66551: LD_VAR 0 1
66555: PUSH
66556: LD_INT 122
66558: EQUAL
66559: IFFALSE 66565
// MC_ChangeApeClass ( ) ;
66561: CALL 81361 0 0
// if event = 123 then
66565: LD_VAR 0 1
66569: PUSH
66570: LD_INT 123
66572: EQUAL
66573: IFFALSE 66579
// MC_Bazooka ( ) ;
66575: CALL 82011 0 0
// if event = 124 then
66579: LD_VAR 0 1
66583: PUSH
66584: LD_INT 124
66586: EQUAL
66587: IFFALSE 66593
// MC_TeleportExit ( ) ;
66589: CALL 82209 0 0
// if event = 125 then
66593: LD_VAR 0 1
66597: PUSH
66598: LD_INT 125
66600: EQUAL
66601: IFFALSE 66607
// MC_Deposits ( ) ;
66603: CALL 82856 0 0
// if event = 126 then
66607: LD_VAR 0 1
66611: PUSH
66612: LD_INT 126
66614: EQUAL
66615: IFFALSE 66621
// MC_RemoteDriver ( ) ;
66617: CALL 83481 0 0
// if event = 200 then
66621: LD_VAR 0 1
66625: PUSH
66626: LD_INT 200
66628: EQUAL
66629: IFFALSE 66635
// MC_Idle ( ) ;
66631: CALL 85214 0 0
// end ;
66635: PPOPN 1
66637: END
// export function MC_Reset ( base , tag ) ; var i ; begin
66638: LD_INT 0
66640: PPUSH
66641: PPUSH
// if not mc_bases [ base ] or not tag then
66642: LD_EXP 36
66646: PUSH
66647: LD_VAR 0 1
66651: ARRAY
66652: NOT
66653: PUSH
66654: LD_VAR 0 2
66658: NOT
66659: OR
66660: IFFALSE 66664
// exit ;
66662: GO 66728
// for i in mc_bases [ base ] union mc_ape [ base ] do
66664: LD_ADDR_VAR 0 4
66668: PUSH
66669: LD_EXP 36
66673: PUSH
66674: LD_VAR 0 1
66678: ARRAY
66679: PUSH
66680: LD_EXP 65
66684: PUSH
66685: LD_VAR 0 1
66689: ARRAY
66690: UNION
66691: PUSH
66692: FOR_IN
66693: IFFALSE 66726
// if GetTag ( i ) = tag then
66695: LD_VAR 0 4
66699: PPUSH
66700: CALL_OW 110
66704: PUSH
66705: LD_VAR 0 2
66709: EQUAL
66710: IFFALSE 66724
// SetTag ( i , 0 ) ;
66712: LD_VAR 0 4
66716: PPUSH
66717: LD_INT 0
66719: PPUSH
66720: CALL_OW 109
66724: GO 66692
66726: POP
66727: POP
// end ;
66728: LD_VAR 0 3
66732: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
66733: LD_INT 0
66735: PPUSH
66736: PPUSH
66737: PPUSH
66738: PPUSH
66739: PPUSH
66740: PPUSH
66741: PPUSH
66742: PPUSH
// if not mc_bases then
66743: LD_EXP 36
66747: NOT
66748: IFFALSE 66752
// exit ;
66750: GO 67210
// for i = 1 to mc_bases do
66752: LD_ADDR_VAR 0 2
66756: PUSH
66757: DOUBLE
66758: LD_INT 1
66760: DEC
66761: ST_TO_ADDR
66762: LD_EXP 36
66766: PUSH
66767: FOR_TO
66768: IFFALSE 67208
// begin tmp := MC_ClassCheckReq ( i ) ;
66770: LD_ADDR_VAR 0 4
66774: PUSH
66775: LD_VAR 0 2
66779: PPUSH
66780: CALL 67215 0 1
66784: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
66785: LD_ADDR_EXP 77
66789: PUSH
66790: LD_EXP 77
66794: PPUSH
66795: LD_VAR 0 2
66799: PPUSH
66800: LD_VAR 0 4
66804: PPUSH
66805: CALL_OW 1
66809: ST_TO_ADDR
// if not tmp then
66810: LD_VAR 0 4
66814: NOT
66815: IFFALSE 66819
// continue ;
66817: GO 66767
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
66819: LD_ADDR_VAR 0 6
66823: PUSH
66824: LD_EXP 36
66828: PUSH
66829: LD_VAR 0 2
66833: ARRAY
66834: PPUSH
66835: LD_INT 2
66837: PUSH
66838: LD_INT 30
66840: PUSH
66841: LD_INT 4
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 30
66850: PUSH
66851: LD_INT 5
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: LIST
66862: PPUSH
66863: CALL_OW 72
66867: PUSH
66868: LD_EXP 36
66872: PUSH
66873: LD_VAR 0 2
66877: ARRAY
66878: PPUSH
66879: LD_INT 2
66881: PUSH
66882: LD_INT 30
66884: PUSH
66885: LD_INT 0
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 30
66894: PUSH
66895: LD_INT 1
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: LIST
66906: PPUSH
66907: CALL_OW 72
66911: PUSH
66912: LD_EXP 36
66916: PUSH
66917: LD_VAR 0 2
66921: ARRAY
66922: PPUSH
66923: LD_INT 30
66925: PUSH
66926: LD_INT 3
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PPUSH
66933: CALL_OW 72
66937: PUSH
66938: LD_EXP 36
66942: PUSH
66943: LD_VAR 0 2
66947: ARRAY
66948: PPUSH
66949: LD_INT 2
66951: PUSH
66952: LD_INT 30
66954: PUSH
66955: LD_INT 6
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 30
66964: PUSH
66965: LD_INT 7
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 30
66974: PUSH
66975: LD_INT 8
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: LIST
66986: LIST
66987: PPUSH
66988: CALL_OW 72
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: LIST
66997: LIST
66998: ST_TO_ADDR
// for j = 1 to 4 do
66999: LD_ADDR_VAR 0 3
67003: PUSH
67004: DOUBLE
67005: LD_INT 1
67007: DEC
67008: ST_TO_ADDR
67009: LD_INT 4
67011: PUSH
67012: FOR_TO
67013: IFFALSE 67204
// begin if not tmp [ j ] then
67015: LD_VAR 0 4
67019: PUSH
67020: LD_VAR 0 3
67024: ARRAY
67025: NOT
67026: IFFALSE 67030
// continue ;
67028: GO 67012
// for p in tmp [ j ] do
67030: LD_ADDR_VAR 0 5
67034: PUSH
67035: LD_VAR 0 4
67039: PUSH
67040: LD_VAR 0 3
67044: ARRAY
67045: PUSH
67046: FOR_IN
67047: IFFALSE 67200
// begin if not b [ j ] then
67049: LD_VAR 0 6
67053: PUSH
67054: LD_VAR 0 3
67058: ARRAY
67059: NOT
67060: IFFALSE 67064
// break ;
67062: GO 67200
// e := 0 ;
67064: LD_ADDR_VAR 0 7
67068: PUSH
67069: LD_INT 0
67071: ST_TO_ADDR
// for k in b [ j ] do
67072: LD_ADDR_VAR 0 8
67076: PUSH
67077: LD_VAR 0 6
67081: PUSH
67082: LD_VAR 0 3
67086: ARRAY
67087: PUSH
67088: FOR_IN
67089: IFFALSE 67116
// if IsNotFull ( k ) then
67091: LD_VAR 0 8
67095: PPUSH
67096: CALL 24034 0 1
67100: IFFALSE 67114
// begin e := k ;
67102: LD_ADDR_VAR 0 7
67106: PUSH
67107: LD_VAR 0 8
67111: ST_TO_ADDR
// break ;
67112: GO 67116
// end ;
67114: GO 67088
67116: POP
67117: POP
// if e and not UnitGoingToBuilding ( p , e ) then
67118: LD_VAR 0 7
67122: PUSH
67123: LD_VAR 0 5
67127: PPUSH
67128: LD_VAR 0 7
67132: PPUSH
67133: CALL 61061 0 2
67137: NOT
67138: AND
67139: IFFALSE 67198
// begin if IsInUnit ( p ) then
67141: LD_VAR 0 5
67145: PPUSH
67146: CALL_OW 310
67150: IFFALSE 67161
// ComExitBuilding ( p ) ;
67152: LD_VAR 0 5
67156: PPUSH
67157: CALL_OW 122
// ComEnterUnit ( p , e ) ;
67161: LD_VAR 0 5
67165: PPUSH
67166: LD_VAR 0 7
67170: PPUSH
67171: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
67175: LD_VAR 0 5
67179: PPUSH
67180: LD_VAR 0 3
67184: PPUSH
67185: CALL_OW 183
// AddComExitBuilding ( p ) ;
67189: LD_VAR 0 5
67193: PPUSH
67194: CALL_OW 182
// end ; end ;
67198: GO 67046
67200: POP
67201: POP
// end ;
67202: GO 67012
67204: POP
67205: POP
// end ;
67206: GO 66767
67208: POP
67209: POP
// end ;
67210: LD_VAR 0 1
67214: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
67215: LD_INT 0
67217: PPUSH
67218: PPUSH
67219: PPUSH
67220: PPUSH
67221: PPUSH
67222: PPUSH
67223: PPUSH
67224: PPUSH
67225: PPUSH
67226: PPUSH
67227: PPUSH
67228: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
67229: LD_VAR 0 1
67233: NOT
67234: PUSH
67235: LD_EXP 36
67239: PUSH
67240: LD_VAR 0 1
67244: ARRAY
67245: NOT
67246: OR
67247: PUSH
67248: LD_EXP 36
67252: PUSH
67253: LD_VAR 0 1
67257: ARRAY
67258: PPUSH
67259: LD_INT 2
67261: PUSH
67262: LD_INT 30
67264: PUSH
67265: LD_INT 0
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: LD_INT 30
67274: PUSH
67275: LD_INT 1
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: LIST
67286: PPUSH
67287: CALL_OW 72
67291: NOT
67292: OR
67293: IFFALSE 67297
// exit ;
67295: GO 70791
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
67297: LD_ADDR_VAR 0 4
67301: PUSH
67302: LD_EXP 36
67306: PUSH
67307: LD_VAR 0 1
67311: ARRAY
67312: PPUSH
67313: LD_INT 2
67315: PUSH
67316: LD_INT 25
67318: PUSH
67319: LD_INT 1
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: LD_INT 25
67328: PUSH
67329: LD_INT 2
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 25
67338: PUSH
67339: LD_INT 3
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: PUSH
67346: LD_INT 25
67348: PUSH
67349: LD_INT 4
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 25
67358: PUSH
67359: LD_INT 5
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 25
67368: PUSH
67369: LD_INT 8
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 25
67378: PUSH
67379: LD_INT 9
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: PPUSH
67396: CALL_OW 72
67400: ST_TO_ADDR
// for i in tmp do
67401: LD_ADDR_VAR 0 3
67405: PUSH
67406: LD_VAR 0 4
67410: PUSH
67411: FOR_IN
67412: IFFALSE 67443
// if GetTag ( i ) then
67414: LD_VAR 0 3
67418: PPUSH
67419: CALL_OW 110
67423: IFFALSE 67441
// tmp := tmp diff i ;
67425: LD_ADDR_VAR 0 4
67429: PUSH
67430: LD_VAR 0 4
67434: PUSH
67435: LD_VAR 0 3
67439: DIFF
67440: ST_TO_ADDR
67441: GO 67411
67443: POP
67444: POP
// if not tmp then
67445: LD_VAR 0 4
67449: NOT
67450: IFFALSE 67454
// exit ;
67452: GO 70791
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
67454: LD_ADDR_VAR 0 5
67458: PUSH
67459: LD_EXP 36
67463: PUSH
67464: LD_VAR 0 1
67468: ARRAY
67469: PPUSH
67470: LD_INT 2
67472: PUSH
67473: LD_INT 25
67475: PUSH
67476: LD_INT 1
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 25
67485: PUSH
67486: LD_INT 5
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: LD_INT 25
67495: PUSH
67496: LD_INT 8
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: LD_INT 25
67505: PUSH
67506: LD_INT 9
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: LIST
67519: PPUSH
67520: CALL_OW 72
67524: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
67525: LD_ADDR_VAR 0 6
67529: PUSH
67530: LD_EXP 36
67534: PUSH
67535: LD_VAR 0 1
67539: ARRAY
67540: PPUSH
67541: LD_INT 25
67543: PUSH
67544: LD_INT 2
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PPUSH
67551: CALL_OW 72
67555: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
67556: LD_ADDR_VAR 0 7
67560: PUSH
67561: LD_EXP 36
67565: PUSH
67566: LD_VAR 0 1
67570: ARRAY
67571: PPUSH
67572: LD_INT 25
67574: PUSH
67575: LD_INT 3
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PPUSH
67582: CALL_OW 72
67586: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
67587: LD_ADDR_VAR 0 8
67591: PUSH
67592: LD_EXP 36
67596: PUSH
67597: LD_VAR 0 1
67601: ARRAY
67602: PPUSH
67603: LD_INT 25
67605: PUSH
67606: LD_INT 4
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: LD_INT 24
67615: PUSH
67616: LD_INT 251
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PPUSH
67627: CALL_OW 72
67631: ST_TO_ADDR
// if mc_scan [ base ] then
67632: LD_EXP 59
67636: PUSH
67637: LD_VAR 0 1
67641: ARRAY
67642: IFFALSE 68103
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
67644: LD_ADDR_EXP 78
67648: PUSH
67649: LD_EXP 78
67653: PPUSH
67654: LD_VAR 0 1
67658: PPUSH
67659: LD_INT 4
67661: PPUSH
67662: CALL_OW 1
67666: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
67667: LD_ADDR_VAR 0 12
67671: PUSH
67672: LD_EXP 36
67676: PUSH
67677: LD_VAR 0 1
67681: ARRAY
67682: PPUSH
67683: LD_INT 2
67685: PUSH
67686: LD_INT 30
67688: PUSH
67689: LD_INT 4
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: PUSH
67696: LD_INT 30
67698: PUSH
67699: LD_INT 5
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: LIST
67710: PPUSH
67711: CALL_OW 72
67715: ST_TO_ADDR
// if not b then
67716: LD_VAR 0 12
67720: NOT
67721: IFFALSE 67725
// exit ;
67723: GO 70791
// p := [ ] ;
67725: LD_ADDR_VAR 0 11
67729: PUSH
67730: EMPTY
67731: ST_TO_ADDR
// if sci >= 2 then
67732: LD_VAR 0 8
67736: PUSH
67737: LD_INT 2
67739: GREATEREQUAL
67740: IFFALSE 67771
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
67742: LD_ADDR_VAR 0 8
67746: PUSH
67747: LD_VAR 0 8
67751: PUSH
67752: LD_INT 1
67754: ARRAY
67755: PUSH
67756: LD_VAR 0 8
67760: PUSH
67761: LD_INT 2
67763: ARRAY
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: ST_TO_ADDR
67769: GO 67832
// if sci = 1 then
67771: LD_VAR 0 8
67775: PUSH
67776: LD_INT 1
67778: EQUAL
67779: IFFALSE 67800
// sci := [ sci [ 1 ] ] else
67781: LD_ADDR_VAR 0 8
67785: PUSH
67786: LD_VAR 0 8
67790: PUSH
67791: LD_INT 1
67793: ARRAY
67794: PUSH
67795: EMPTY
67796: LIST
67797: ST_TO_ADDR
67798: GO 67832
// if sci = 0 then
67800: LD_VAR 0 8
67804: PUSH
67805: LD_INT 0
67807: EQUAL
67808: IFFALSE 67832
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
67810: LD_ADDR_VAR 0 11
67814: PUSH
67815: LD_VAR 0 4
67819: PPUSH
67820: LD_INT 4
67822: PPUSH
67823: CALL 60924 0 2
67827: PUSH
67828: LD_INT 1
67830: ARRAY
67831: ST_TO_ADDR
// if eng > 4 then
67832: LD_VAR 0 6
67836: PUSH
67837: LD_INT 4
67839: GREATER
67840: IFFALSE 67886
// for i = eng downto 4 do
67842: LD_ADDR_VAR 0 3
67846: PUSH
67847: DOUBLE
67848: LD_VAR 0 6
67852: INC
67853: ST_TO_ADDR
67854: LD_INT 4
67856: PUSH
67857: FOR_DOWNTO
67858: IFFALSE 67884
// eng := eng diff eng [ i ] ;
67860: LD_ADDR_VAR 0 6
67864: PUSH
67865: LD_VAR 0 6
67869: PUSH
67870: LD_VAR 0 6
67874: PUSH
67875: LD_VAR 0 3
67879: ARRAY
67880: DIFF
67881: ST_TO_ADDR
67882: GO 67857
67884: POP
67885: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
67886: LD_ADDR_VAR 0 4
67890: PUSH
67891: LD_VAR 0 4
67895: PUSH
67896: LD_VAR 0 5
67900: PUSH
67901: LD_VAR 0 6
67905: UNION
67906: PUSH
67907: LD_VAR 0 7
67911: UNION
67912: PUSH
67913: LD_VAR 0 8
67917: UNION
67918: DIFF
67919: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
67920: LD_ADDR_VAR 0 13
67924: PUSH
67925: LD_EXP 36
67929: PUSH
67930: LD_VAR 0 1
67934: ARRAY
67935: PPUSH
67936: LD_INT 2
67938: PUSH
67939: LD_INT 30
67941: PUSH
67942: LD_INT 32
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PUSH
67949: LD_INT 30
67951: PUSH
67952: LD_INT 31
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: LIST
67963: PPUSH
67964: CALL_OW 72
67968: PUSH
67969: LD_EXP 36
67973: PUSH
67974: LD_VAR 0 1
67978: ARRAY
67979: PPUSH
67980: LD_INT 2
67982: PUSH
67983: LD_INT 30
67985: PUSH
67986: LD_INT 4
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: PUSH
67993: LD_INT 30
67995: PUSH
67996: LD_INT 5
67998: PUSH
67999: EMPTY
68000: LIST
68001: LIST
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: LIST
68007: PPUSH
68008: CALL_OW 72
68012: PUSH
68013: LD_INT 6
68015: MUL
68016: PLUS
68017: ST_TO_ADDR
// if bcount < tmp then
68018: LD_VAR 0 13
68022: PUSH
68023: LD_VAR 0 4
68027: LESS
68028: IFFALSE 68074
// for i = tmp downto bcount do
68030: LD_ADDR_VAR 0 3
68034: PUSH
68035: DOUBLE
68036: LD_VAR 0 4
68040: INC
68041: ST_TO_ADDR
68042: LD_VAR 0 13
68046: PUSH
68047: FOR_DOWNTO
68048: IFFALSE 68072
// tmp := Delete ( tmp , tmp ) ;
68050: LD_ADDR_VAR 0 4
68054: PUSH
68055: LD_VAR 0 4
68059: PPUSH
68060: LD_VAR 0 4
68064: PPUSH
68065: CALL_OW 3
68069: ST_TO_ADDR
68070: GO 68047
68072: POP
68073: POP
// result := [ tmp , 0 , 0 , p ] ;
68074: LD_ADDR_VAR 0 2
68078: PUSH
68079: LD_VAR 0 4
68083: PUSH
68084: LD_INT 0
68086: PUSH
68087: LD_INT 0
68089: PUSH
68090: LD_VAR 0 11
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: ST_TO_ADDR
// exit ;
68101: GO 70791
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
68103: LD_EXP 36
68107: PUSH
68108: LD_VAR 0 1
68112: ARRAY
68113: PPUSH
68114: LD_INT 2
68116: PUSH
68117: LD_INT 30
68119: PUSH
68120: LD_INT 6
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: PUSH
68127: LD_INT 30
68129: PUSH
68130: LD_INT 7
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 30
68139: PUSH
68140: LD_INT 8
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: PPUSH
68153: CALL_OW 72
68157: NOT
68158: PUSH
68159: LD_EXP 36
68163: PUSH
68164: LD_VAR 0 1
68168: ARRAY
68169: PPUSH
68170: LD_INT 30
68172: PUSH
68173: LD_INT 3
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PPUSH
68180: CALL_OW 72
68184: NOT
68185: AND
68186: IFFALSE 68258
// begin if eng = tmp then
68188: LD_VAR 0 6
68192: PUSH
68193: LD_VAR 0 4
68197: EQUAL
68198: IFFALSE 68202
// exit ;
68200: GO 70791
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
68202: LD_ADDR_EXP 78
68206: PUSH
68207: LD_EXP 78
68211: PPUSH
68212: LD_VAR 0 1
68216: PPUSH
68217: LD_INT 1
68219: PPUSH
68220: CALL_OW 1
68224: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
68225: LD_ADDR_VAR 0 2
68229: PUSH
68230: LD_INT 0
68232: PUSH
68233: LD_VAR 0 4
68237: PUSH
68238: LD_VAR 0 6
68242: DIFF
68243: PUSH
68244: LD_INT 0
68246: PUSH
68247: LD_INT 0
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: ST_TO_ADDR
// exit ;
68256: GO 70791
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
68258: LD_EXP 63
68262: PUSH
68263: LD_EXP 62
68267: PUSH
68268: LD_VAR 0 1
68272: ARRAY
68273: ARRAY
68274: PUSH
68275: LD_EXP 36
68279: PUSH
68280: LD_VAR 0 1
68284: ARRAY
68285: PPUSH
68286: LD_INT 2
68288: PUSH
68289: LD_INT 30
68291: PUSH
68292: LD_INT 6
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: PUSH
68299: LD_INT 30
68301: PUSH
68302: LD_INT 7
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: LD_INT 30
68311: PUSH
68312: LD_INT 8
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: LIST
68323: LIST
68324: PPUSH
68325: CALL_OW 72
68329: AND
68330: PUSH
68331: LD_EXP 36
68335: PUSH
68336: LD_VAR 0 1
68340: ARRAY
68341: PPUSH
68342: LD_INT 30
68344: PUSH
68345: LD_INT 3
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PPUSH
68352: CALL_OW 72
68356: NOT
68357: AND
68358: IFFALSE 68572
// begin if sci >= 6 then
68360: LD_VAR 0 8
68364: PUSH
68365: LD_INT 6
68367: GREATEREQUAL
68368: IFFALSE 68372
// exit ;
68370: GO 70791
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
68372: LD_ADDR_EXP 78
68376: PUSH
68377: LD_EXP 78
68381: PPUSH
68382: LD_VAR 0 1
68386: PPUSH
68387: LD_INT 2
68389: PPUSH
68390: CALL_OW 1
68394: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
68395: LD_ADDR_VAR 0 9
68399: PUSH
68400: LD_VAR 0 4
68404: PUSH
68405: LD_VAR 0 8
68409: DIFF
68410: PPUSH
68411: LD_INT 4
68413: PPUSH
68414: CALL 60924 0 2
68418: ST_TO_ADDR
// p := [ ] ;
68419: LD_ADDR_VAR 0 11
68423: PUSH
68424: EMPTY
68425: ST_TO_ADDR
// if sci < 6 and sort > 6 then
68426: LD_VAR 0 8
68430: PUSH
68431: LD_INT 6
68433: LESS
68434: PUSH
68435: LD_VAR 0 9
68439: PUSH
68440: LD_INT 6
68442: GREATER
68443: AND
68444: IFFALSE 68525
// begin for i = 1 to 6 - sci do
68446: LD_ADDR_VAR 0 3
68450: PUSH
68451: DOUBLE
68452: LD_INT 1
68454: DEC
68455: ST_TO_ADDR
68456: LD_INT 6
68458: PUSH
68459: LD_VAR 0 8
68463: MINUS
68464: PUSH
68465: FOR_TO
68466: IFFALSE 68521
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
68468: LD_ADDR_VAR 0 11
68472: PUSH
68473: LD_VAR 0 11
68477: PPUSH
68478: LD_VAR 0 11
68482: PUSH
68483: LD_INT 1
68485: PLUS
68486: PPUSH
68487: LD_VAR 0 9
68491: PUSH
68492: LD_INT 1
68494: ARRAY
68495: PPUSH
68496: CALL_OW 2
68500: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
68501: LD_ADDR_VAR 0 9
68505: PUSH
68506: LD_VAR 0 9
68510: PPUSH
68511: LD_INT 1
68513: PPUSH
68514: CALL_OW 3
68518: ST_TO_ADDR
// end ;
68519: GO 68465
68521: POP
68522: POP
// end else
68523: GO 68545
// if sort then
68525: LD_VAR 0 9
68529: IFFALSE 68545
// p := sort [ 1 ] ;
68531: LD_ADDR_VAR 0 11
68535: PUSH
68536: LD_VAR 0 9
68540: PUSH
68541: LD_INT 1
68543: ARRAY
68544: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
68545: LD_ADDR_VAR 0 2
68549: PUSH
68550: LD_INT 0
68552: PUSH
68553: LD_INT 0
68555: PUSH
68556: LD_INT 0
68558: PUSH
68559: LD_VAR 0 11
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: ST_TO_ADDR
// exit ;
68570: GO 70791
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
68572: LD_EXP 63
68576: PUSH
68577: LD_EXP 62
68581: PUSH
68582: LD_VAR 0 1
68586: ARRAY
68587: ARRAY
68588: PUSH
68589: LD_EXP 36
68593: PUSH
68594: LD_VAR 0 1
68598: ARRAY
68599: PPUSH
68600: LD_INT 2
68602: PUSH
68603: LD_INT 30
68605: PUSH
68606: LD_INT 6
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: LD_INT 30
68615: PUSH
68616: LD_INT 7
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PUSH
68623: LD_INT 30
68625: PUSH
68626: LD_INT 8
68628: PUSH
68629: EMPTY
68630: LIST
68631: LIST
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: LIST
68637: LIST
68638: PPUSH
68639: CALL_OW 72
68643: AND
68644: PUSH
68645: LD_EXP 36
68649: PUSH
68650: LD_VAR 0 1
68654: ARRAY
68655: PPUSH
68656: LD_INT 30
68658: PUSH
68659: LD_INT 3
68661: PUSH
68662: EMPTY
68663: LIST
68664: LIST
68665: PPUSH
68666: CALL_OW 72
68670: AND
68671: IFFALSE 69405
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
68673: LD_ADDR_EXP 78
68677: PUSH
68678: LD_EXP 78
68682: PPUSH
68683: LD_VAR 0 1
68687: PPUSH
68688: LD_INT 3
68690: PPUSH
68691: CALL_OW 1
68695: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
68696: LD_ADDR_VAR 0 2
68700: PUSH
68701: LD_INT 0
68703: PUSH
68704: LD_INT 0
68706: PUSH
68707: LD_INT 0
68709: PUSH
68710: LD_INT 0
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: ST_TO_ADDR
// if not eng then
68719: LD_VAR 0 6
68723: NOT
68724: IFFALSE 68787
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
68726: LD_ADDR_VAR 0 11
68730: PUSH
68731: LD_VAR 0 4
68735: PPUSH
68736: LD_INT 2
68738: PPUSH
68739: CALL 60924 0 2
68743: PUSH
68744: LD_INT 1
68746: ARRAY
68747: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
68748: LD_ADDR_VAR 0 2
68752: PUSH
68753: LD_VAR 0 2
68757: PPUSH
68758: LD_INT 2
68760: PPUSH
68761: LD_VAR 0 11
68765: PPUSH
68766: CALL_OW 1
68770: ST_TO_ADDR
// tmp := tmp diff p ;
68771: LD_ADDR_VAR 0 4
68775: PUSH
68776: LD_VAR 0 4
68780: PUSH
68781: LD_VAR 0 11
68785: DIFF
68786: ST_TO_ADDR
// end ; if tmp and sci < 6 then
68787: LD_VAR 0 4
68791: PUSH
68792: LD_VAR 0 8
68796: PUSH
68797: LD_INT 6
68799: LESS
68800: AND
68801: IFFALSE 68989
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
68803: LD_ADDR_VAR 0 9
68807: PUSH
68808: LD_VAR 0 4
68812: PUSH
68813: LD_VAR 0 8
68817: PUSH
68818: LD_VAR 0 7
68822: UNION
68823: DIFF
68824: PPUSH
68825: LD_INT 4
68827: PPUSH
68828: CALL 60924 0 2
68832: ST_TO_ADDR
// p := [ ] ;
68833: LD_ADDR_VAR 0 11
68837: PUSH
68838: EMPTY
68839: ST_TO_ADDR
// if sort then
68840: LD_VAR 0 9
68844: IFFALSE 68960
// for i = 1 to 6 - sci do
68846: LD_ADDR_VAR 0 3
68850: PUSH
68851: DOUBLE
68852: LD_INT 1
68854: DEC
68855: ST_TO_ADDR
68856: LD_INT 6
68858: PUSH
68859: LD_VAR 0 8
68863: MINUS
68864: PUSH
68865: FOR_TO
68866: IFFALSE 68958
// begin if i = sort then
68868: LD_VAR 0 3
68872: PUSH
68873: LD_VAR 0 9
68877: EQUAL
68878: IFFALSE 68882
// break ;
68880: GO 68958
// if GetClass ( i ) = 4 then
68882: LD_VAR 0 3
68886: PPUSH
68887: CALL_OW 257
68891: PUSH
68892: LD_INT 4
68894: EQUAL
68895: IFFALSE 68899
// continue ;
68897: GO 68865
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68899: LD_ADDR_VAR 0 11
68903: PUSH
68904: LD_VAR 0 11
68908: PPUSH
68909: LD_VAR 0 11
68913: PUSH
68914: LD_INT 1
68916: PLUS
68917: PPUSH
68918: LD_VAR 0 9
68922: PUSH
68923: LD_VAR 0 3
68927: ARRAY
68928: PPUSH
68929: CALL_OW 2
68933: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68934: LD_ADDR_VAR 0 4
68938: PUSH
68939: LD_VAR 0 4
68943: PUSH
68944: LD_VAR 0 9
68948: PUSH
68949: LD_VAR 0 3
68953: ARRAY
68954: DIFF
68955: ST_TO_ADDR
// end ;
68956: GO 68865
68958: POP
68959: POP
// if p then
68960: LD_VAR 0 11
68964: IFFALSE 68989
// result := Replace ( result , 4 , p ) ;
68966: LD_ADDR_VAR 0 2
68970: PUSH
68971: LD_VAR 0 2
68975: PPUSH
68976: LD_INT 4
68978: PPUSH
68979: LD_VAR 0 11
68983: PPUSH
68984: CALL_OW 1
68988: ST_TO_ADDR
// end ; if tmp and mech < 6 then
68989: LD_VAR 0 4
68993: PUSH
68994: LD_VAR 0 7
68998: PUSH
68999: LD_INT 6
69001: LESS
69002: AND
69003: IFFALSE 69191
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
69005: LD_ADDR_VAR 0 9
69009: PUSH
69010: LD_VAR 0 4
69014: PUSH
69015: LD_VAR 0 8
69019: PUSH
69020: LD_VAR 0 7
69024: UNION
69025: DIFF
69026: PPUSH
69027: LD_INT 3
69029: PPUSH
69030: CALL 60924 0 2
69034: ST_TO_ADDR
// p := [ ] ;
69035: LD_ADDR_VAR 0 11
69039: PUSH
69040: EMPTY
69041: ST_TO_ADDR
// if sort then
69042: LD_VAR 0 9
69046: IFFALSE 69162
// for i = 1 to 6 - mech do
69048: LD_ADDR_VAR 0 3
69052: PUSH
69053: DOUBLE
69054: LD_INT 1
69056: DEC
69057: ST_TO_ADDR
69058: LD_INT 6
69060: PUSH
69061: LD_VAR 0 7
69065: MINUS
69066: PUSH
69067: FOR_TO
69068: IFFALSE 69160
// begin if i = sort then
69070: LD_VAR 0 3
69074: PUSH
69075: LD_VAR 0 9
69079: EQUAL
69080: IFFALSE 69084
// break ;
69082: GO 69160
// if GetClass ( i ) = 3 then
69084: LD_VAR 0 3
69088: PPUSH
69089: CALL_OW 257
69093: PUSH
69094: LD_INT 3
69096: EQUAL
69097: IFFALSE 69101
// continue ;
69099: GO 69067
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69101: LD_ADDR_VAR 0 11
69105: PUSH
69106: LD_VAR 0 11
69110: PPUSH
69111: LD_VAR 0 11
69115: PUSH
69116: LD_INT 1
69118: PLUS
69119: PPUSH
69120: LD_VAR 0 9
69124: PUSH
69125: LD_VAR 0 3
69129: ARRAY
69130: PPUSH
69131: CALL_OW 2
69135: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69136: LD_ADDR_VAR 0 4
69140: PUSH
69141: LD_VAR 0 4
69145: PUSH
69146: LD_VAR 0 9
69150: PUSH
69151: LD_VAR 0 3
69155: ARRAY
69156: DIFF
69157: ST_TO_ADDR
// end ;
69158: GO 69067
69160: POP
69161: POP
// if p then
69162: LD_VAR 0 11
69166: IFFALSE 69191
// result := Replace ( result , 3 , p ) ;
69168: LD_ADDR_VAR 0 2
69172: PUSH
69173: LD_VAR 0 2
69177: PPUSH
69178: LD_INT 3
69180: PPUSH
69181: LD_VAR 0 11
69185: PPUSH
69186: CALL_OW 1
69190: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
69191: LD_VAR 0 4
69195: PUSH
69196: LD_INT 6
69198: GREATER
69199: PUSH
69200: LD_VAR 0 6
69204: PUSH
69205: LD_INT 6
69207: LESS
69208: AND
69209: IFFALSE 69403
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
69211: LD_ADDR_VAR 0 9
69215: PUSH
69216: LD_VAR 0 4
69220: PUSH
69221: LD_VAR 0 8
69225: PUSH
69226: LD_VAR 0 7
69230: UNION
69231: PUSH
69232: LD_VAR 0 6
69236: UNION
69237: DIFF
69238: PPUSH
69239: LD_INT 2
69241: PPUSH
69242: CALL 60924 0 2
69246: ST_TO_ADDR
// p := [ ] ;
69247: LD_ADDR_VAR 0 11
69251: PUSH
69252: EMPTY
69253: ST_TO_ADDR
// if sort then
69254: LD_VAR 0 9
69258: IFFALSE 69374
// for i = 1 to 6 - eng do
69260: LD_ADDR_VAR 0 3
69264: PUSH
69265: DOUBLE
69266: LD_INT 1
69268: DEC
69269: ST_TO_ADDR
69270: LD_INT 6
69272: PUSH
69273: LD_VAR 0 6
69277: MINUS
69278: PUSH
69279: FOR_TO
69280: IFFALSE 69372
// begin if i = sort then
69282: LD_VAR 0 3
69286: PUSH
69287: LD_VAR 0 9
69291: EQUAL
69292: IFFALSE 69296
// break ;
69294: GO 69372
// if GetClass ( i ) = 2 then
69296: LD_VAR 0 3
69300: PPUSH
69301: CALL_OW 257
69305: PUSH
69306: LD_INT 2
69308: EQUAL
69309: IFFALSE 69313
// continue ;
69311: GO 69279
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69313: LD_ADDR_VAR 0 11
69317: PUSH
69318: LD_VAR 0 11
69322: PPUSH
69323: LD_VAR 0 11
69327: PUSH
69328: LD_INT 1
69330: PLUS
69331: PPUSH
69332: LD_VAR 0 9
69336: PUSH
69337: LD_VAR 0 3
69341: ARRAY
69342: PPUSH
69343: CALL_OW 2
69347: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69348: LD_ADDR_VAR 0 4
69352: PUSH
69353: LD_VAR 0 4
69357: PUSH
69358: LD_VAR 0 9
69362: PUSH
69363: LD_VAR 0 3
69367: ARRAY
69368: DIFF
69369: ST_TO_ADDR
// end ;
69370: GO 69279
69372: POP
69373: POP
// if p then
69374: LD_VAR 0 11
69378: IFFALSE 69403
// result := Replace ( result , 2 , p ) ;
69380: LD_ADDR_VAR 0 2
69384: PUSH
69385: LD_VAR 0 2
69389: PPUSH
69390: LD_INT 2
69392: PPUSH
69393: LD_VAR 0 11
69397: PPUSH
69398: CALL_OW 1
69402: ST_TO_ADDR
// end ; exit ;
69403: GO 70791
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
69405: LD_EXP 63
69409: PUSH
69410: LD_EXP 62
69414: PUSH
69415: LD_VAR 0 1
69419: ARRAY
69420: ARRAY
69421: NOT
69422: PUSH
69423: LD_EXP 36
69427: PUSH
69428: LD_VAR 0 1
69432: ARRAY
69433: PPUSH
69434: LD_INT 30
69436: PUSH
69437: LD_INT 3
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: PPUSH
69444: CALL_OW 72
69448: AND
69449: PUSH
69450: LD_EXP 41
69454: PUSH
69455: LD_VAR 0 1
69459: ARRAY
69460: AND
69461: IFFALSE 70069
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
69463: LD_ADDR_EXP 78
69467: PUSH
69468: LD_EXP 78
69472: PPUSH
69473: LD_VAR 0 1
69477: PPUSH
69478: LD_INT 5
69480: PPUSH
69481: CALL_OW 1
69485: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
69486: LD_ADDR_VAR 0 2
69490: PUSH
69491: LD_INT 0
69493: PUSH
69494: LD_INT 0
69496: PUSH
69497: LD_INT 0
69499: PUSH
69500: LD_INT 0
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: LIST
69507: LIST
69508: ST_TO_ADDR
// if sci > 1 then
69509: LD_VAR 0 8
69513: PUSH
69514: LD_INT 1
69516: GREATER
69517: IFFALSE 69545
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
69519: LD_ADDR_VAR 0 4
69523: PUSH
69524: LD_VAR 0 4
69528: PUSH
69529: LD_VAR 0 8
69533: PUSH
69534: LD_VAR 0 8
69538: PUSH
69539: LD_INT 1
69541: ARRAY
69542: DIFF
69543: DIFF
69544: ST_TO_ADDR
// if tmp and not sci then
69545: LD_VAR 0 4
69549: PUSH
69550: LD_VAR 0 8
69554: NOT
69555: AND
69556: IFFALSE 69625
// begin sort := SortBySkill ( tmp , 4 ) ;
69558: LD_ADDR_VAR 0 9
69562: PUSH
69563: LD_VAR 0 4
69567: PPUSH
69568: LD_INT 4
69570: PPUSH
69571: CALL 60924 0 2
69575: ST_TO_ADDR
// if sort then
69576: LD_VAR 0 9
69580: IFFALSE 69596
// p := sort [ 1 ] ;
69582: LD_ADDR_VAR 0 11
69586: PUSH
69587: LD_VAR 0 9
69591: PUSH
69592: LD_INT 1
69594: ARRAY
69595: ST_TO_ADDR
// if p then
69596: LD_VAR 0 11
69600: IFFALSE 69625
// result := Replace ( result , 4 , p ) ;
69602: LD_ADDR_VAR 0 2
69606: PUSH
69607: LD_VAR 0 2
69611: PPUSH
69612: LD_INT 4
69614: PPUSH
69615: LD_VAR 0 11
69619: PPUSH
69620: CALL_OW 1
69624: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
69625: LD_ADDR_VAR 0 4
69629: PUSH
69630: LD_VAR 0 4
69634: PUSH
69635: LD_VAR 0 7
69639: DIFF
69640: ST_TO_ADDR
// if tmp and mech < 6 then
69641: LD_VAR 0 4
69645: PUSH
69646: LD_VAR 0 7
69650: PUSH
69651: LD_INT 6
69653: LESS
69654: AND
69655: IFFALSE 69843
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
69657: LD_ADDR_VAR 0 9
69661: PUSH
69662: LD_VAR 0 4
69666: PUSH
69667: LD_VAR 0 8
69671: PUSH
69672: LD_VAR 0 7
69676: UNION
69677: DIFF
69678: PPUSH
69679: LD_INT 3
69681: PPUSH
69682: CALL 60924 0 2
69686: ST_TO_ADDR
// p := [ ] ;
69687: LD_ADDR_VAR 0 11
69691: PUSH
69692: EMPTY
69693: ST_TO_ADDR
// if sort then
69694: LD_VAR 0 9
69698: IFFALSE 69814
// for i = 1 to 6 - mech do
69700: LD_ADDR_VAR 0 3
69704: PUSH
69705: DOUBLE
69706: LD_INT 1
69708: DEC
69709: ST_TO_ADDR
69710: LD_INT 6
69712: PUSH
69713: LD_VAR 0 7
69717: MINUS
69718: PUSH
69719: FOR_TO
69720: IFFALSE 69812
// begin if i = sort then
69722: LD_VAR 0 3
69726: PUSH
69727: LD_VAR 0 9
69731: EQUAL
69732: IFFALSE 69736
// break ;
69734: GO 69812
// if GetClass ( i ) = 3 then
69736: LD_VAR 0 3
69740: PPUSH
69741: CALL_OW 257
69745: PUSH
69746: LD_INT 3
69748: EQUAL
69749: IFFALSE 69753
// continue ;
69751: GO 69719
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69753: LD_ADDR_VAR 0 11
69757: PUSH
69758: LD_VAR 0 11
69762: PPUSH
69763: LD_VAR 0 11
69767: PUSH
69768: LD_INT 1
69770: PLUS
69771: PPUSH
69772: LD_VAR 0 9
69776: PUSH
69777: LD_VAR 0 3
69781: ARRAY
69782: PPUSH
69783: CALL_OW 2
69787: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69788: LD_ADDR_VAR 0 4
69792: PUSH
69793: LD_VAR 0 4
69797: PUSH
69798: LD_VAR 0 9
69802: PUSH
69803: LD_VAR 0 3
69807: ARRAY
69808: DIFF
69809: ST_TO_ADDR
// end ;
69810: GO 69719
69812: POP
69813: POP
// if p then
69814: LD_VAR 0 11
69818: IFFALSE 69843
// result := Replace ( result , 3 , p ) ;
69820: LD_ADDR_VAR 0 2
69824: PUSH
69825: LD_VAR 0 2
69829: PPUSH
69830: LD_INT 3
69832: PPUSH
69833: LD_VAR 0 11
69837: PPUSH
69838: CALL_OW 1
69842: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
69843: LD_ADDR_VAR 0 4
69847: PUSH
69848: LD_VAR 0 4
69852: PUSH
69853: LD_VAR 0 6
69857: DIFF
69858: ST_TO_ADDR
// if tmp and eng < 6 then
69859: LD_VAR 0 4
69863: PUSH
69864: LD_VAR 0 6
69868: PUSH
69869: LD_INT 6
69871: LESS
69872: AND
69873: IFFALSE 70067
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
69875: LD_ADDR_VAR 0 9
69879: PUSH
69880: LD_VAR 0 4
69884: PUSH
69885: LD_VAR 0 8
69889: PUSH
69890: LD_VAR 0 7
69894: UNION
69895: PUSH
69896: LD_VAR 0 6
69900: UNION
69901: DIFF
69902: PPUSH
69903: LD_INT 2
69905: PPUSH
69906: CALL 60924 0 2
69910: ST_TO_ADDR
// p := [ ] ;
69911: LD_ADDR_VAR 0 11
69915: PUSH
69916: EMPTY
69917: ST_TO_ADDR
// if sort then
69918: LD_VAR 0 9
69922: IFFALSE 70038
// for i = 1 to 6 - eng do
69924: LD_ADDR_VAR 0 3
69928: PUSH
69929: DOUBLE
69930: LD_INT 1
69932: DEC
69933: ST_TO_ADDR
69934: LD_INT 6
69936: PUSH
69937: LD_VAR 0 6
69941: MINUS
69942: PUSH
69943: FOR_TO
69944: IFFALSE 70036
// begin if i = sort then
69946: LD_VAR 0 3
69950: PUSH
69951: LD_VAR 0 9
69955: EQUAL
69956: IFFALSE 69960
// break ;
69958: GO 70036
// if GetClass ( i ) = 2 then
69960: LD_VAR 0 3
69964: PPUSH
69965: CALL_OW 257
69969: PUSH
69970: LD_INT 2
69972: EQUAL
69973: IFFALSE 69977
// continue ;
69975: GO 69943
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69977: LD_ADDR_VAR 0 11
69981: PUSH
69982: LD_VAR 0 11
69986: PPUSH
69987: LD_VAR 0 11
69991: PUSH
69992: LD_INT 1
69994: PLUS
69995: PPUSH
69996: LD_VAR 0 9
70000: PUSH
70001: LD_VAR 0 3
70005: ARRAY
70006: PPUSH
70007: CALL_OW 2
70011: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
70012: LD_ADDR_VAR 0 4
70016: PUSH
70017: LD_VAR 0 4
70021: PUSH
70022: LD_VAR 0 9
70026: PUSH
70027: LD_VAR 0 3
70031: ARRAY
70032: DIFF
70033: ST_TO_ADDR
// end ;
70034: GO 69943
70036: POP
70037: POP
// if p then
70038: LD_VAR 0 11
70042: IFFALSE 70067
// result := Replace ( result , 2 , p ) ;
70044: LD_ADDR_VAR 0 2
70048: PUSH
70049: LD_VAR 0 2
70053: PPUSH
70054: LD_INT 2
70056: PPUSH
70057: LD_VAR 0 11
70061: PPUSH
70062: CALL_OW 1
70066: ST_TO_ADDR
// end ; exit ;
70067: GO 70791
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
70069: LD_EXP 63
70073: PUSH
70074: LD_EXP 62
70078: PUSH
70079: LD_VAR 0 1
70083: ARRAY
70084: ARRAY
70085: NOT
70086: PUSH
70087: LD_EXP 36
70091: PUSH
70092: LD_VAR 0 1
70096: ARRAY
70097: PPUSH
70098: LD_INT 30
70100: PUSH
70101: LD_INT 3
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: PPUSH
70108: CALL_OW 72
70112: AND
70113: PUSH
70114: LD_EXP 41
70118: PUSH
70119: LD_VAR 0 1
70123: ARRAY
70124: NOT
70125: AND
70126: IFFALSE 70791
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
70128: LD_ADDR_EXP 78
70132: PUSH
70133: LD_EXP 78
70137: PPUSH
70138: LD_VAR 0 1
70142: PPUSH
70143: LD_INT 6
70145: PPUSH
70146: CALL_OW 1
70150: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
70151: LD_ADDR_VAR 0 2
70155: PUSH
70156: LD_INT 0
70158: PUSH
70159: LD_INT 0
70161: PUSH
70162: LD_INT 0
70164: PUSH
70165: LD_INT 0
70167: PUSH
70168: EMPTY
70169: LIST
70170: LIST
70171: LIST
70172: LIST
70173: ST_TO_ADDR
// if sci >= 1 then
70174: LD_VAR 0 8
70178: PUSH
70179: LD_INT 1
70181: GREATEREQUAL
70182: IFFALSE 70204
// tmp := tmp diff sci [ 1 ] ;
70184: LD_ADDR_VAR 0 4
70188: PUSH
70189: LD_VAR 0 4
70193: PUSH
70194: LD_VAR 0 8
70198: PUSH
70199: LD_INT 1
70201: ARRAY
70202: DIFF
70203: ST_TO_ADDR
// if tmp and not sci then
70204: LD_VAR 0 4
70208: PUSH
70209: LD_VAR 0 8
70213: NOT
70214: AND
70215: IFFALSE 70284
// begin sort := SortBySkill ( tmp , 4 ) ;
70217: LD_ADDR_VAR 0 9
70221: PUSH
70222: LD_VAR 0 4
70226: PPUSH
70227: LD_INT 4
70229: PPUSH
70230: CALL 60924 0 2
70234: ST_TO_ADDR
// if sort then
70235: LD_VAR 0 9
70239: IFFALSE 70255
// p := sort [ 1 ] ;
70241: LD_ADDR_VAR 0 11
70245: PUSH
70246: LD_VAR 0 9
70250: PUSH
70251: LD_INT 1
70253: ARRAY
70254: ST_TO_ADDR
// if p then
70255: LD_VAR 0 11
70259: IFFALSE 70284
// result := Replace ( result , 4 , p ) ;
70261: LD_ADDR_VAR 0 2
70265: PUSH
70266: LD_VAR 0 2
70270: PPUSH
70271: LD_INT 4
70273: PPUSH
70274: LD_VAR 0 11
70278: PPUSH
70279: CALL_OW 1
70283: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
70284: LD_ADDR_VAR 0 4
70288: PUSH
70289: LD_VAR 0 4
70293: PUSH
70294: LD_VAR 0 7
70298: DIFF
70299: ST_TO_ADDR
// if tmp and mech < 6 then
70300: LD_VAR 0 4
70304: PUSH
70305: LD_VAR 0 7
70309: PUSH
70310: LD_INT 6
70312: LESS
70313: AND
70314: IFFALSE 70496
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
70316: LD_ADDR_VAR 0 9
70320: PUSH
70321: LD_VAR 0 4
70325: PUSH
70326: LD_VAR 0 7
70330: DIFF
70331: PPUSH
70332: LD_INT 3
70334: PPUSH
70335: CALL 60924 0 2
70339: ST_TO_ADDR
// p := [ ] ;
70340: LD_ADDR_VAR 0 11
70344: PUSH
70345: EMPTY
70346: ST_TO_ADDR
// if sort then
70347: LD_VAR 0 9
70351: IFFALSE 70467
// for i = 1 to 6 - mech do
70353: LD_ADDR_VAR 0 3
70357: PUSH
70358: DOUBLE
70359: LD_INT 1
70361: DEC
70362: ST_TO_ADDR
70363: LD_INT 6
70365: PUSH
70366: LD_VAR 0 7
70370: MINUS
70371: PUSH
70372: FOR_TO
70373: IFFALSE 70465
// begin if i = sort then
70375: LD_VAR 0 3
70379: PUSH
70380: LD_VAR 0 9
70384: EQUAL
70385: IFFALSE 70389
// break ;
70387: GO 70465
// if GetClass ( i ) = 3 then
70389: LD_VAR 0 3
70393: PPUSH
70394: CALL_OW 257
70398: PUSH
70399: LD_INT 3
70401: EQUAL
70402: IFFALSE 70406
// continue ;
70404: GO 70372
// p := Insert ( p , p + 1 , sort [ i ] ) ;
70406: LD_ADDR_VAR 0 11
70410: PUSH
70411: LD_VAR 0 11
70415: PPUSH
70416: LD_VAR 0 11
70420: PUSH
70421: LD_INT 1
70423: PLUS
70424: PPUSH
70425: LD_VAR 0 9
70429: PUSH
70430: LD_VAR 0 3
70434: ARRAY
70435: PPUSH
70436: CALL_OW 2
70440: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
70441: LD_ADDR_VAR 0 4
70445: PUSH
70446: LD_VAR 0 4
70450: PUSH
70451: LD_VAR 0 9
70455: PUSH
70456: LD_VAR 0 3
70460: ARRAY
70461: DIFF
70462: ST_TO_ADDR
// end ;
70463: GO 70372
70465: POP
70466: POP
// if p then
70467: LD_VAR 0 11
70471: IFFALSE 70496
// result := Replace ( result , 3 , p ) ;
70473: LD_ADDR_VAR 0 2
70477: PUSH
70478: LD_VAR 0 2
70482: PPUSH
70483: LD_INT 3
70485: PPUSH
70486: LD_VAR 0 11
70490: PPUSH
70491: CALL_OW 1
70495: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
70496: LD_ADDR_VAR 0 4
70500: PUSH
70501: LD_VAR 0 4
70505: PUSH
70506: LD_VAR 0 6
70510: DIFF
70511: ST_TO_ADDR
// if tmp and eng < 4 then
70512: LD_VAR 0 4
70516: PUSH
70517: LD_VAR 0 6
70521: PUSH
70522: LD_INT 4
70524: LESS
70525: AND
70526: IFFALSE 70716
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
70528: LD_ADDR_VAR 0 9
70532: PUSH
70533: LD_VAR 0 4
70537: PUSH
70538: LD_VAR 0 7
70542: PUSH
70543: LD_VAR 0 6
70547: UNION
70548: DIFF
70549: PPUSH
70550: LD_INT 2
70552: PPUSH
70553: CALL 60924 0 2
70557: ST_TO_ADDR
// p := [ ] ;
70558: LD_ADDR_VAR 0 11
70562: PUSH
70563: EMPTY
70564: ST_TO_ADDR
// if sort then
70565: LD_VAR 0 9
70569: IFFALSE 70685
// for i = 1 to 4 - eng do
70571: LD_ADDR_VAR 0 3
70575: PUSH
70576: DOUBLE
70577: LD_INT 1
70579: DEC
70580: ST_TO_ADDR
70581: LD_INT 4
70583: PUSH
70584: LD_VAR 0 6
70588: MINUS
70589: PUSH
70590: FOR_TO
70591: IFFALSE 70683
// begin if i = sort then
70593: LD_VAR 0 3
70597: PUSH
70598: LD_VAR 0 9
70602: EQUAL
70603: IFFALSE 70607
// break ;
70605: GO 70683
// if GetClass ( i ) = 2 then
70607: LD_VAR 0 3
70611: PPUSH
70612: CALL_OW 257
70616: PUSH
70617: LD_INT 2
70619: EQUAL
70620: IFFALSE 70624
// continue ;
70622: GO 70590
// p := Insert ( p , p + 1 , sort [ i ] ) ;
70624: LD_ADDR_VAR 0 11
70628: PUSH
70629: LD_VAR 0 11
70633: PPUSH
70634: LD_VAR 0 11
70638: PUSH
70639: LD_INT 1
70641: PLUS
70642: PPUSH
70643: LD_VAR 0 9
70647: PUSH
70648: LD_VAR 0 3
70652: ARRAY
70653: PPUSH
70654: CALL_OW 2
70658: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
70659: LD_ADDR_VAR 0 4
70663: PUSH
70664: LD_VAR 0 4
70668: PUSH
70669: LD_VAR 0 9
70673: PUSH
70674: LD_VAR 0 3
70678: ARRAY
70679: DIFF
70680: ST_TO_ADDR
// end ;
70681: GO 70590
70683: POP
70684: POP
// if p then
70685: LD_VAR 0 11
70689: IFFALSE 70714
// result := Replace ( result , 2 , p ) ;
70691: LD_ADDR_VAR 0 2
70695: PUSH
70696: LD_VAR 0 2
70700: PPUSH
70701: LD_INT 2
70703: PPUSH
70704: LD_VAR 0 11
70708: PPUSH
70709: CALL_OW 1
70713: ST_TO_ADDR
// end else
70714: GO 70760
// for i = eng downto 5 do
70716: LD_ADDR_VAR 0 3
70720: PUSH
70721: DOUBLE
70722: LD_VAR 0 6
70726: INC
70727: ST_TO_ADDR
70728: LD_INT 5
70730: PUSH
70731: FOR_DOWNTO
70732: IFFALSE 70758
// tmp := tmp union eng [ i ] ;
70734: LD_ADDR_VAR 0 4
70738: PUSH
70739: LD_VAR 0 4
70743: PUSH
70744: LD_VAR 0 6
70748: PUSH
70749: LD_VAR 0 3
70753: ARRAY
70754: UNION
70755: ST_TO_ADDR
70756: GO 70731
70758: POP
70759: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
70760: LD_ADDR_VAR 0 2
70764: PUSH
70765: LD_VAR 0 2
70769: PPUSH
70770: LD_INT 1
70772: PPUSH
70773: LD_VAR 0 4
70777: PUSH
70778: LD_VAR 0 5
70782: DIFF
70783: PPUSH
70784: CALL_OW 1
70788: ST_TO_ADDR
// exit ;
70789: GO 70791
// end ; end ;
70791: LD_VAR 0 2
70795: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
70796: LD_INT 0
70798: PPUSH
70799: PPUSH
70800: PPUSH
// if not mc_bases then
70801: LD_EXP 36
70805: NOT
70806: IFFALSE 70810
// exit ;
70808: GO 70916
// for i = 1 to mc_bases do
70810: LD_ADDR_VAR 0 2
70814: PUSH
70815: DOUBLE
70816: LD_INT 1
70818: DEC
70819: ST_TO_ADDR
70820: LD_EXP 36
70824: PUSH
70825: FOR_TO
70826: IFFALSE 70907
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
70828: LD_ADDR_VAR 0 3
70832: PUSH
70833: LD_EXP 36
70837: PUSH
70838: LD_VAR 0 2
70842: ARRAY
70843: PPUSH
70844: LD_INT 21
70846: PUSH
70847: LD_INT 3
70849: PUSH
70850: EMPTY
70851: LIST
70852: LIST
70853: PUSH
70854: LD_INT 3
70856: PUSH
70857: LD_INT 24
70859: PUSH
70860: LD_INT 1000
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: PUSH
70867: EMPTY
70868: LIST
70869: LIST
70870: PUSH
70871: EMPTY
70872: LIST
70873: LIST
70874: PPUSH
70875: CALL_OW 72
70879: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
70880: LD_ADDR_EXP 37
70884: PUSH
70885: LD_EXP 37
70889: PPUSH
70890: LD_VAR 0 2
70894: PPUSH
70895: LD_VAR 0 3
70899: PPUSH
70900: CALL_OW 1
70904: ST_TO_ADDR
// end ;
70905: GO 70825
70907: POP
70908: POP
// RaiseSailEvent ( 101 ) ;
70909: LD_INT 101
70911: PPUSH
70912: CALL_OW 427
// end ;
70916: LD_VAR 0 1
70920: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
70921: LD_INT 0
70923: PPUSH
70924: PPUSH
70925: PPUSH
70926: PPUSH
70927: PPUSH
70928: PPUSH
70929: PPUSH
// if not mc_bases then
70930: LD_EXP 36
70934: NOT
70935: IFFALSE 70939
// exit ;
70937: GO 71512
// for i = 1 to mc_bases do
70939: LD_ADDR_VAR 0 2
70943: PUSH
70944: DOUBLE
70945: LD_INT 1
70947: DEC
70948: ST_TO_ADDR
70949: LD_EXP 36
70953: PUSH
70954: FOR_TO
70955: IFFALSE 71503
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 750 ] ] ] ] ) ;
70957: LD_ADDR_VAR 0 5
70961: PUSH
70962: LD_EXP 36
70966: PUSH
70967: LD_VAR 0 2
70971: ARRAY
70972: PUSH
70973: LD_EXP 65
70977: PUSH
70978: LD_VAR 0 2
70982: ARRAY
70983: UNION
70984: PPUSH
70985: LD_INT 21
70987: PUSH
70988: LD_INT 1
70990: PUSH
70991: EMPTY
70992: LIST
70993: LIST
70994: PUSH
70995: LD_INT 1
70997: PUSH
70998: LD_INT 3
71000: PUSH
71001: LD_INT 54
71003: PUSH
71004: EMPTY
71005: LIST
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 3
71013: PUSH
71014: LD_INT 24
71016: PUSH
71017: LD_INT 750
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: PUSH
71024: EMPTY
71025: LIST
71026: LIST
71027: PUSH
71028: EMPTY
71029: LIST
71030: LIST
71031: LIST
71032: PUSH
71033: EMPTY
71034: LIST
71035: LIST
71036: PPUSH
71037: CALL_OW 72
71041: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
71042: LD_ADDR_VAR 0 6
71046: PUSH
71047: LD_EXP 36
71051: PUSH
71052: LD_VAR 0 2
71056: ARRAY
71057: PPUSH
71058: LD_INT 21
71060: PUSH
71061: LD_INT 1
71063: PUSH
71064: EMPTY
71065: LIST
71066: LIST
71067: PUSH
71068: LD_INT 1
71070: PUSH
71071: LD_INT 3
71073: PUSH
71074: LD_INT 54
71076: PUSH
71077: EMPTY
71078: LIST
71079: PUSH
71080: EMPTY
71081: LIST
71082: LIST
71083: PUSH
71084: LD_INT 3
71086: PUSH
71087: LD_INT 24
71089: PUSH
71090: LD_INT 250
71092: PUSH
71093: EMPTY
71094: LIST
71095: LIST
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: PUSH
71101: EMPTY
71102: LIST
71103: LIST
71104: LIST
71105: PUSH
71106: EMPTY
71107: LIST
71108: LIST
71109: PPUSH
71110: CALL_OW 72
71114: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
71115: LD_ADDR_VAR 0 7
71119: PUSH
71120: LD_VAR 0 5
71124: PUSH
71125: LD_VAR 0 6
71129: DIFF
71130: ST_TO_ADDR
// if not need_heal_1 then
71131: LD_VAR 0 6
71135: NOT
71136: IFFALSE 71169
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
71138: LD_ADDR_EXP 39
71142: PUSH
71143: LD_EXP 39
71147: PPUSH
71148: LD_VAR 0 2
71152: PUSH
71153: LD_INT 1
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: PPUSH
71160: EMPTY
71161: PPUSH
71162: CALL 26700 0 3
71166: ST_TO_ADDR
71167: GO 71239
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
71169: LD_ADDR_EXP 39
71173: PUSH
71174: LD_EXP 39
71178: PPUSH
71179: LD_VAR 0 2
71183: PUSH
71184: LD_INT 1
71186: PUSH
71187: EMPTY
71188: LIST
71189: LIST
71190: PPUSH
71191: LD_EXP 39
71195: PUSH
71196: LD_VAR 0 2
71200: ARRAY
71201: PUSH
71202: LD_INT 1
71204: ARRAY
71205: PPUSH
71206: LD_INT 3
71208: PUSH
71209: LD_INT 24
71211: PUSH
71212: LD_INT 1000
71214: PUSH
71215: EMPTY
71216: LIST
71217: LIST
71218: PUSH
71219: EMPTY
71220: LIST
71221: LIST
71222: PPUSH
71223: CALL_OW 72
71227: PUSH
71228: LD_VAR 0 6
71232: UNION
71233: PPUSH
71234: CALL 26700 0 3
71238: ST_TO_ADDR
// if not need_heal_2 then
71239: LD_VAR 0 7
71243: NOT
71244: IFFALSE 71277
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
71246: LD_ADDR_EXP 39
71250: PUSH
71251: LD_EXP 39
71255: PPUSH
71256: LD_VAR 0 2
71260: PUSH
71261: LD_INT 2
71263: PUSH
71264: EMPTY
71265: LIST
71266: LIST
71267: PPUSH
71268: EMPTY
71269: PPUSH
71270: CALL 26700 0 3
71274: ST_TO_ADDR
71275: GO 71309
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
71277: LD_ADDR_EXP 39
71281: PUSH
71282: LD_EXP 39
71286: PPUSH
71287: LD_VAR 0 2
71291: PUSH
71292: LD_INT 2
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: PPUSH
71299: LD_VAR 0 7
71303: PPUSH
71304: CALL 26700 0 3
71308: ST_TO_ADDR
// if need_heal_2 then
71309: LD_VAR 0 7
71313: IFFALSE 71485
// for j in need_heal_2 do
71315: LD_ADDR_VAR 0 3
71319: PUSH
71320: LD_VAR 0 7
71324: PUSH
71325: FOR_IN
71326: IFFALSE 71483
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
71328: LD_ADDR_VAR 0 5
71332: PUSH
71333: LD_EXP 36
71337: PUSH
71338: LD_VAR 0 2
71342: ARRAY
71343: PPUSH
71344: LD_INT 2
71346: PUSH
71347: LD_INT 30
71349: PUSH
71350: LD_INT 6
71352: PUSH
71353: EMPTY
71354: LIST
71355: LIST
71356: PUSH
71357: LD_INT 30
71359: PUSH
71360: LD_INT 7
71362: PUSH
71363: EMPTY
71364: LIST
71365: LIST
71366: PUSH
71367: LD_INT 30
71369: PUSH
71370: LD_INT 8
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: PUSH
71377: LD_INT 30
71379: PUSH
71380: LD_INT 0
71382: PUSH
71383: EMPTY
71384: LIST
71385: LIST
71386: PUSH
71387: LD_INT 30
71389: PUSH
71390: LD_INT 1
71392: PUSH
71393: EMPTY
71394: LIST
71395: LIST
71396: PUSH
71397: LD_INT 25
71399: PUSH
71400: LD_INT 4
71402: PUSH
71403: EMPTY
71404: LIST
71405: LIST
71406: PUSH
71407: EMPTY
71408: LIST
71409: LIST
71410: LIST
71411: LIST
71412: LIST
71413: LIST
71414: LIST
71415: PPUSH
71416: CALL_OW 72
71420: ST_TO_ADDR
// if tmp then
71421: LD_VAR 0 5
71425: IFFALSE 71481
// begin k := NearestUnitToUnit ( tmp , j ) ;
71427: LD_ADDR_VAR 0 4
71431: PUSH
71432: LD_VAR 0 5
71436: PPUSH
71437: LD_VAR 0 3
71441: PPUSH
71442: CALL_OW 74
71446: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
71447: LD_VAR 0 3
71451: PPUSH
71452: LD_VAR 0 4
71456: PPUSH
71457: CALL_OW 296
71461: PUSH
71462: LD_INT 7
71464: GREATER
71465: IFFALSE 71481
// ComMoveUnit ( j , k ) ;
71467: LD_VAR 0 3
71471: PPUSH
71472: LD_VAR 0 4
71476: PPUSH
71477: CALL_OW 112
// end ; end ;
71481: GO 71325
71483: POP
71484: POP
// if not need_heal_1 and not need_heal_2 then
71485: LD_VAR 0 6
71489: NOT
71490: PUSH
71491: LD_VAR 0 7
71495: NOT
71496: AND
71497: IFFALSE 71501
// continue ;
71499: GO 70954
// end ;
71501: GO 70954
71503: POP
71504: POP
// RaiseSailEvent ( 102 ) ;
71505: LD_INT 102
71507: PPUSH
71508: CALL_OW 427
// end ;
71512: LD_VAR 0 1
71516: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
71517: LD_INT 0
71519: PPUSH
71520: PPUSH
71521: PPUSH
71522: PPUSH
71523: PPUSH
// if not mc_bases then
71524: LD_EXP 36
71528: NOT
71529: IFFALSE 71533
// exit ;
71531: GO 71918
// for i = 1 to mc_bases do
71533: LD_ADDR_VAR 0 2
71537: PUSH
71538: DOUBLE
71539: LD_INT 1
71541: DEC
71542: ST_TO_ADDR
71543: LD_EXP 36
71547: PUSH
71548: FOR_TO
71549: IFFALSE 71916
// begin if not mc_building_need_repair [ i ] then
71551: LD_EXP 37
71555: PUSH
71556: LD_VAR 0 2
71560: ARRAY
71561: NOT
71562: IFFALSE 71600
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
71564: LD_ADDR_EXP 38
71568: PUSH
71569: LD_EXP 38
71573: PPUSH
71574: LD_VAR 0 2
71578: PPUSH
71579: EMPTY
71580: PPUSH
71581: CALL_OW 1
71585: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
71586: LD_VAR 0 2
71590: PPUSH
71591: LD_INT 101
71593: PPUSH
71594: CALL 66638 0 2
// continue ;
71598: GO 71548
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
71600: LD_ADDR_EXP 42
71604: PUSH
71605: LD_EXP 42
71609: PPUSH
71610: LD_VAR 0 2
71614: PPUSH
71615: EMPTY
71616: PPUSH
71617: CALL_OW 1
71621: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
71622: LD_VAR 0 2
71626: PPUSH
71627: LD_INT 103
71629: PPUSH
71630: CALL 66638 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
71634: LD_ADDR_VAR 0 5
71638: PUSH
71639: LD_EXP 36
71643: PUSH
71644: LD_VAR 0 2
71648: ARRAY
71649: PUSH
71650: LD_EXP 65
71654: PUSH
71655: LD_VAR 0 2
71659: ARRAY
71660: UNION
71661: PPUSH
71662: LD_INT 2
71664: PUSH
71665: LD_INT 25
71667: PUSH
71668: LD_INT 2
71670: PUSH
71671: EMPTY
71672: LIST
71673: LIST
71674: PUSH
71675: LD_INT 25
71677: PUSH
71678: LD_INT 16
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: PUSH
71685: EMPTY
71686: LIST
71687: LIST
71688: LIST
71689: PUSH
71690: EMPTY
71691: LIST
71692: PPUSH
71693: CALL_OW 72
71697: ST_TO_ADDR
// if not tmp then
71698: LD_VAR 0 5
71702: NOT
71703: IFFALSE 71707
// continue ;
71705: GO 71548
// for j in tmp do
71707: LD_ADDR_VAR 0 3
71711: PUSH
71712: LD_VAR 0 5
71716: PUSH
71717: FOR_IN
71718: IFFALSE 71912
// begin if mc_need_heal [ i ] then
71720: LD_EXP 39
71724: PUSH
71725: LD_VAR 0 2
71729: ARRAY
71730: IFFALSE 71778
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
71732: LD_VAR 0 3
71736: PUSH
71737: LD_EXP 39
71741: PUSH
71742: LD_VAR 0 2
71746: ARRAY
71747: PUSH
71748: LD_INT 1
71750: ARRAY
71751: IN
71752: PUSH
71753: LD_VAR 0 3
71757: PUSH
71758: LD_EXP 39
71762: PUSH
71763: LD_VAR 0 2
71767: ARRAY
71768: PUSH
71769: LD_INT 2
71771: ARRAY
71772: IN
71773: OR
71774: IFFALSE 71778
// continue ;
71776: GO 71717
// if IsInUnit ( j ) then
71778: LD_VAR 0 3
71782: PPUSH
71783: CALL_OW 310
71787: IFFALSE 71798
// ComExitBuilding ( j ) ;
71789: LD_VAR 0 3
71793: PPUSH
71794: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
71798: LD_VAR 0 3
71802: PUSH
71803: LD_EXP 38
71807: PUSH
71808: LD_VAR 0 2
71812: ARRAY
71813: IN
71814: NOT
71815: IFFALSE 71873
// begin SetTag ( j , 101 ) ;
71817: LD_VAR 0 3
71821: PPUSH
71822: LD_INT 101
71824: PPUSH
71825: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
71829: LD_ADDR_EXP 38
71833: PUSH
71834: LD_EXP 38
71838: PPUSH
71839: LD_VAR 0 2
71843: PUSH
71844: LD_EXP 38
71848: PUSH
71849: LD_VAR 0 2
71853: ARRAY
71854: PUSH
71855: LD_INT 1
71857: PLUS
71858: PUSH
71859: EMPTY
71860: LIST
71861: LIST
71862: PPUSH
71863: LD_VAR 0 3
71867: PPUSH
71868: CALL 26700 0 3
71872: ST_TO_ADDR
// end ; wait ( 1 ) ;
71873: LD_INT 1
71875: PPUSH
71876: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
71880: LD_VAR 0 3
71884: PPUSH
71885: LD_EXP 37
71889: PUSH
71890: LD_VAR 0 2
71894: ARRAY
71895: PPUSH
71896: LD_VAR 0 3
71900: PPUSH
71901: CALL_OW 74
71905: PPUSH
71906: CALL_OW 130
// end ;
71910: GO 71717
71912: POP
71913: POP
// end ;
71914: GO 71548
71916: POP
71917: POP
// end ;
71918: LD_VAR 0 1
71922: RET
// export function MC_Heal ; var i , j , tmp ; begin
71923: LD_INT 0
71925: PPUSH
71926: PPUSH
71927: PPUSH
71928: PPUSH
// if not mc_bases then
71929: LD_EXP 36
71933: NOT
71934: IFFALSE 71938
// exit ;
71936: GO 72340
// for i = 1 to mc_bases do
71938: LD_ADDR_VAR 0 2
71942: PUSH
71943: DOUBLE
71944: LD_INT 1
71946: DEC
71947: ST_TO_ADDR
71948: LD_EXP 36
71952: PUSH
71953: FOR_TO
71954: IFFALSE 72338
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
71956: LD_EXP 39
71960: PUSH
71961: LD_VAR 0 2
71965: ARRAY
71966: PUSH
71967: LD_INT 1
71969: ARRAY
71970: NOT
71971: PUSH
71972: LD_EXP 39
71976: PUSH
71977: LD_VAR 0 2
71981: ARRAY
71982: PUSH
71983: LD_INT 2
71985: ARRAY
71986: NOT
71987: AND
71988: IFFALSE 72026
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
71990: LD_ADDR_EXP 40
71994: PUSH
71995: LD_EXP 40
71999: PPUSH
72000: LD_VAR 0 2
72004: PPUSH
72005: EMPTY
72006: PPUSH
72007: CALL_OW 1
72011: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
72012: LD_VAR 0 2
72016: PPUSH
72017: LD_INT 102
72019: PPUSH
72020: CALL 66638 0 2
// continue ;
72024: GO 71953
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
72026: LD_ADDR_VAR 0 4
72030: PUSH
72031: LD_EXP 36
72035: PUSH
72036: LD_VAR 0 2
72040: ARRAY
72041: PPUSH
72042: LD_INT 25
72044: PUSH
72045: LD_INT 4
72047: PUSH
72048: EMPTY
72049: LIST
72050: LIST
72051: PPUSH
72052: CALL_OW 72
72056: ST_TO_ADDR
// if not tmp then
72057: LD_VAR 0 4
72061: NOT
72062: IFFALSE 72066
// continue ;
72064: GO 71953
// if mc_taming [ i ] then
72066: LD_EXP 67
72070: PUSH
72071: LD_VAR 0 2
72075: ARRAY
72076: IFFALSE 72100
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
72078: LD_ADDR_EXP 67
72082: PUSH
72083: LD_EXP 67
72087: PPUSH
72088: LD_VAR 0 2
72092: PPUSH
72093: EMPTY
72094: PPUSH
72095: CALL_OW 1
72099: ST_TO_ADDR
// for j in tmp do
72100: LD_ADDR_VAR 0 3
72104: PUSH
72105: LD_VAR 0 4
72109: PUSH
72110: FOR_IN
72111: IFFALSE 72334
// begin if IsInUnit ( j ) then
72113: LD_VAR 0 3
72117: PPUSH
72118: CALL_OW 310
72122: IFFALSE 72133
// ComExitBuilding ( j ) ;
72124: LD_VAR 0 3
72128: PPUSH
72129: CALL_OW 122
// if not j in mc_healers [ i ] then
72133: LD_VAR 0 3
72137: PUSH
72138: LD_EXP 40
72142: PUSH
72143: LD_VAR 0 2
72147: ARRAY
72148: IN
72149: NOT
72150: IFFALSE 72196
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
72152: LD_ADDR_EXP 40
72156: PUSH
72157: LD_EXP 40
72161: PPUSH
72162: LD_VAR 0 2
72166: PUSH
72167: LD_EXP 40
72171: PUSH
72172: LD_VAR 0 2
72176: ARRAY
72177: PUSH
72178: LD_INT 1
72180: PLUS
72181: PUSH
72182: EMPTY
72183: LIST
72184: LIST
72185: PPUSH
72186: LD_VAR 0 3
72190: PPUSH
72191: CALL 26700 0 3
72195: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
72196: LD_VAR 0 3
72200: PPUSH
72201: CALL_OW 110
72205: PUSH
72206: LD_INT 102
72208: NONEQUAL
72209: IFFALSE 72223
// SetTag ( j , 102 ) ;
72211: LD_VAR 0 3
72215: PPUSH
72216: LD_INT 102
72218: PPUSH
72219: CALL_OW 109
// Wait ( 3 ) ;
72223: LD_INT 3
72225: PPUSH
72226: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
72230: LD_EXP 39
72234: PUSH
72235: LD_VAR 0 2
72239: ARRAY
72240: PUSH
72241: LD_INT 1
72243: ARRAY
72244: IFFALSE 72276
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
72246: LD_VAR 0 3
72250: PPUSH
72251: LD_EXP 39
72255: PUSH
72256: LD_VAR 0 2
72260: ARRAY
72261: PUSH
72262: LD_INT 1
72264: ARRAY
72265: PUSH
72266: LD_INT 1
72268: ARRAY
72269: PPUSH
72270: CALL_OW 128
72274: GO 72332
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
72276: LD_VAR 0 3
72280: PPUSH
72281: CALL_OW 314
72285: NOT
72286: PUSH
72287: LD_EXP 39
72291: PUSH
72292: LD_VAR 0 2
72296: ARRAY
72297: PUSH
72298: LD_INT 2
72300: ARRAY
72301: AND
72302: IFFALSE 72332
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
72304: LD_VAR 0 3
72308: PPUSH
72309: LD_EXP 39
72313: PUSH
72314: LD_VAR 0 2
72318: ARRAY
72319: PUSH
72320: LD_INT 2
72322: ARRAY
72323: PUSH
72324: LD_INT 1
72326: ARRAY
72327: PPUSH
72328: CALL_OW 128
// end ;
72332: GO 72110
72334: POP
72335: POP
// end ;
72336: GO 71953
72338: POP
72339: POP
// end ;
72340: LD_VAR 0 1
72344: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
72345: LD_INT 0
72347: PPUSH
72348: PPUSH
72349: PPUSH
72350: PPUSH
72351: PPUSH
// if not mc_bases then
72352: LD_EXP 36
72356: NOT
72357: IFFALSE 72361
// exit ;
72359: GO 73504
// for i = 1 to mc_bases do
72361: LD_ADDR_VAR 0 2
72365: PUSH
72366: DOUBLE
72367: LD_INT 1
72369: DEC
72370: ST_TO_ADDR
72371: LD_EXP 36
72375: PUSH
72376: FOR_TO
72377: IFFALSE 73502
// begin if mc_scan [ i ] then
72379: LD_EXP 59
72383: PUSH
72384: LD_VAR 0 2
72388: ARRAY
72389: IFFALSE 72393
// continue ;
72391: GO 72376
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
72393: LD_EXP 41
72397: PUSH
72398: LD_VAR 0 2
72402: ARRAY
72403: NOT
72404: PUSH
72405: LD_EXP 43
72409: PUSH
72410: LD_VAR 0 2
72414: ARRAY
72415: NOT
72416: AND
72417: PUSH
72418: LD_EXP 42
72422: PUSH
72423: LD_VAR 0 2
72427: ARRAY
72428: AND
72429: IFFALSE 72467
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
72431: LD_ADDR_EXP 42
72435: PUSH
72436: LD_EXP 42
72440: PPUSH
72441: LD_VAR 0 2
72445: PPUSH
72446: EMPTY
72447: PPUSH
72448: CALL_OW 1
72452: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
72453: LD_VAR 0 2
72457: PPUSH
72458: LD_INT 103
72460: PPUSH
72461: CALL 66638 0 2
// continue ;
72465: GO 72376
// end ; if mc_construct_list [ i ] then
72467: LD_EXP 43
72471: PUSH
72472: LD_VAR 0 2
72476: ARRAY
72477: IFFALSE 72697
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
72479: LD_ADDR_VAR 0 4
72483: PUSH
72484: LD_EXP 36
72488: PUSH
72489: LD_VAR 0 2
72493: ARRAY
72494: PPUSH
72495: LD_INT 25
72497: PUSH
72498: LD_INT 2
72500: PUSH
72501: EMPTY
72502: LIST
72503: LIST
72504: PPUSH
72505: CALL_OW 72
72509: PUSH
72510: LD_EXP 38
72514: PUSH
72515: LD_VAR 0 2
72519: ARRAY
72520: DIFF
72521: ST_TO_ADDR
// if not tmp then
72522: LD_VAR 0 4
72526: NOT
72527: IFFALSE 72531
// continue ;
72529: GO 72376
// for j in tmp do
72531: LD_ADDR_VAR 0 3
72535: PUSH
72536: LD_VAR 0 4
72540: PUSH
72541: FOR_IN
72542: IFFALSE 72693
// begin if not mc_builders [ i ] then
72544: LD_EXP 42
72548: PUSH
72549: LD_VAR 0 2
72553: ARRAY
72554: NOT
72555: IFFALSE 72613
// begin SetTag ( j , 103 ) ;
72557: LD_VAR 0 3
72561: PPUSH
72562: LD_INT 103
72564: PPUSH
72565: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
72569: LD_ADDR_EXP 42
72573: PUSH
72574: LD_EXP 42
72578: PPUSH
72579: LD_VAR 0 2
72583: PUSH
72584: LD_EXP 42
72588: PUSH
72589: LD_VAR 0 2
72593: ARRAY
72594: PUSH
72595: LD_INT 1
72597: PLUS
72598: PUSH
72599: EMPTY
72600: LIST
72601: LIST
72602: PPUSH
72603: LD_VAR 0 3
72607: PPUSH
72608: CALL 26700 0 3
72612: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
72613: LD_VAR 0 3
72617: PPUSH
72618: CALL_OW 310
72622: IFFALSE 72633
// ComExitBuilding ( j ) ;
72624: LD_VAR 0 3
72628: PPUSH
72629: CALL_OW 122
// wait ( 3 ) ;
72633: LD_INT 3
72635: PPUSH
72636: CALL_OW 67
// if not mc_construct_list [ i ] then
72640: LD_EXP 43
72644: PUSH
72645: LD_VAR 0 2
72649: ARRAY
72650: NOT
72651: IFFALSE 72655
// break ;
72653: GO 72693
// if not HasTask ( j ) then
72655: LD_VAR 0 3
72659: PPUSH
72660: CALL_OW 314
72664: NOT
72665: IFFALSE 72691
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
72667: LD_VAR 0 3
72671: PPUSH
72672: LD_EXP 43
72676: PUSH
72677: LD_VAR 0 2
72681: ARRAY
72682: PUSH
72683: LD_INT 1
72685: ARRAY
72686: PPUSH
72687: CALL 29551 0 2
// end ;
72691: GO 72541
72693: POP
72694: POP
// end else
72695: GO 73500
// if mc_build_list [ i ] then
72697: LD_EXP 41
72701: PUSH
72702: LD_VAR 0 2
72706: ARRAY
72707: IFFALSE 73500
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72709: LD_ADDR_VAR 0 5
72713: PUSH
72714: LD_EXP 36
72718: PUSH
72719: LD_VAR 0 2
72723: ARRAY
72724: PPUSH
72725: LD_INT 2
72727: PUSH
72728: LD_INT 30
72730: PUSH
72731: LD_INT 0
72733: PUSH
72734: EMPTY
72735: LIST
72736: LIST
72737: PUSH
72738: LD_INT 30
72740: PUSH
72741: LD_INT 1
72743: PUSH
72744: EMPTY
72745: LIST
72746: LIST
72747: PUSH
72748: EMPTY
72749: LIST
72750: LIST
72751: LIST
72752: PPUSH
72753: CALL_OW 72
72757: ST_TO_ADDR
// if depot then
72758: LD_VAR 0 5
72762: IFFALSE 72780
// depot := depot [ 1 ] else
72764: LD_ADDR_VAR 0 5
72768: PUSH
72769: LD_VAR 0 5
72773: PUSH
72774: LD_INT 1
72776: ARRAY
72777: ST_TO_ADDR
72778: GO 72788
// depot := 0 ;
72780: LD_ADDR_VAR 0 5
72784: PUSH
72785: LD_INT 0
72787: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
72788: LD_EXP 41
72792: PUSH
72793: LD_VAR 0 2
72797: ARRAY
72798: PUSH
72799: LD_INT 1
72801: ARRAY
72802: PUSH
72803: LD_INT 1
72805: ARRAY
72806: PPUSH
72807: CALL 29381 0 1
72811: PUSH
72812: LD_EXP 36
72816: PUSH
72817: LD_VAR 0 2
72821: ARRAY
72822: PPUSH
72823: LD_INT 2
72825: PUSH
72826: LD_INT 30
72828: PUSH
72829: LD_INT 2
72831: PUSH
72832: EMPTY
72833: LIST
72834: LIST
72835: PUSH
72836: LD_INT 30
72838: PUSH
72839: LD_INT 3
72841: PUSH
72842: EMPTY
72843: LIST
72844: LIST
72845: PUSH
72846: EMPTY
72847: LIST
72848: LIST
72849: LIST
72850: PPUSH
72851: CALL_OW 72
72855: NOT
72856: AND
72857: IFFALSE 72962
// begin for j = 1 to mc_build_list [ i ] do
72859: LD_ADDR_VAR 0 3
72863: PUSH
72864: DOUBLE
72865: LD_INT 1
72867: DEC
72868: ST_TO_ADDR
72869: LD_EXP 41
72873: PUSH
72874: LD_VAR 0 2
72878: ARRAY
72879: PUSH
72880: FOR_TO
72881: IFFALSE 72960
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
72883: LD_EXP 41
72887: PUSH
72888: LD_VAR 0 2
72892: ARRAY
72893: PUSH
72894: LD_VAR 0 3
72898: ARRAY
72899: PUSH
72900: LD_INT 1
72902: ARRAY
72903: PUSH
72904: LD_INT 2
72906: EQUAL
72907: IFFALSE 72958
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
72909: LD_ADDR_EXP 41
72913: PUSH
72914: LD_EXP 41
72918: PPUSH
72919: LD_VAR 0 2
72923: PPUSH
72924: LD_EXP 41
72928: PUSH
72929: LD_VAR 0 2
72933: ARRAY
72934: PPUSH
72935: LD_VAR 0 3
72939: PPUSH
72940: LD_INT 1
72942: PPUSH
72943: LD_INT 0
72945: PPUSH
72946: CALL 26118 0 4
72950: PPUSH
72951: CALL_OW 1
72955: ST_TO_ADDR
// break ;
72956: GO 72960
// end ;
72958: GO 72880
72960: POP
72961: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
72962: LD_EXP 41
72966: PUSH
72967: LD_VAR 0 2
72971: ARRAY
72972: PUSH
72973: LD_INT 1
72975: ARRAY
72976: PUSH
72977: LD_INT 1
72979: ARRAY
72980: PUSH
72981: LD_INT 0
72983: EQUAL
72984: PUSH
72985: LD_VAR 0 5
72989: PUSH
72990: LD_VAR 0 5
72994: PPUSH
72995: LD_EXP 41
72999: PUSH
73000: LD_VAR 0 2
73004: ARRAY
73005: PUSH
73006: LD_INT 1
73008: ARRAY
73009: PUSH
73010: LD_INT 1
73012: ARRAY
73013: PPUSH
73014: LD_EXP 41
73018: PUSH
73019: LD_VAR 0 2
73023: ARRAY
73024: PUSH
73025: LD_INT 1
73027: ARRAY
73028: PUSH
73029: LD_INT 2
73031: ARRAY
73032: PPUSH
73033: LD_EXP 41
73037: PUSH
73038: LD_VAR 0 2
73042: ARRAY
73043: PUSH
73044: LD_INT 1
73046: ARRAY
73047: PUSH
73048: LD_INT 3
73050: ARRAY
73051: PPUSH
73052: LD_EXP 41
73056: PUSH
73057: LD_VAR 0 2
73061: ARRAY
73062: PUSH
73063: LD_INT 1
73065: ARRAY
73066: PUSH
73067: LD_INT 4
73069: ARRAY
73070: PPUSH
73071: CALL 34097 0 5
73075: AND
73076: OR
73077: IFFALSE 73358
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
73079: LD_ADDR_VAR 0 4
73083: PUSH
73084: LD_EXP 36
73088: PUSH
73089: LD_VAR 0 2
73093: ARRAY
73094: PPUSH
73095: LD_INT 25
73097: PUSH
73098: LD_INT 2
73100: PUSH
73101: EMPTY
73102: LIST
73103: LIST
73104: PPUSH
73105: CALL_OW 72
73109: PUSH
73110: LD_EXP 38
73114: PUSH
73115: LD_VAR 0 2
73119: ARRAY
73120: DIFF
73121: ST_TO_ADDR
// if not tmp then
73122: LD_VAR 0 4
73126: NOT
73127: IFFALSE 73131
// continue ;
73129: GO 72376
// for j in tmp do
73131: LD_ADDR_VAR 0 3
73135: PUSH
73136: LD_VAR 0 4
73140: PUSH
73141: FOR_IN
73142: IFFALSE 73354
// begin if not mc_builders [ i ] then
73144: LD_EXP 42
73148: PUSH
73149: LD_VAR 0 2
73153: ARRAY
73154: NOT
73155: IFFALSE 73213
// begin SetTag ( j , 103 ) ;
73157: LD_VAR 0 3
73161: PPUSH
73162: LD_INT 103
73164: PPUSH
73165: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
73169: LD_ADDR_EXP 42
73173: PUSH
73174: LD_EXP 42
73178: PPUSH
73179: LD_VAR 0 2
73183: PUSH
73184: LD_EXP 42
73188: PUSH
73189: LD_VAR 0 2
73193: ARRAY
73194: PUSH
73195: LD_INT 1
73197: PLUS
73198: PUSH
73199: EMPTY
73200: LIST
73201: LIST
73202: PPUSH
73203: LD_VAR 0 3
73207: PPUSH
73208: CALL 26700 0 3
73212: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
73213: LD_VAR 0 3
73217: PPUSH
73218: CALL_OW 310
73222: IFFALSE 73233
// ComExitBuilding ( j ) ;
73224: LD_VAR 0 3
73228: PPUSH
73229: CALL_OW 122
// wait ( 3 ) ;
73233: LD_INT 3
73235: PPUSH
73236: CALL_OW 67
// if not mc_build_list [ i ] then
73240: LD_EXP 41
73244: PUSH
73245: LD_VAR 0 2
73249: ARRAY
73250: NOT
73251: IFFALSE 73255
// break ;
73253: GO 73354
// if not HasTask ( j ) then
73255: LD_VAR 0 3
73259: PPUSH
73260: CALL_OW 314
73264: NOT
73265: IFFALSE 73352
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
73267: LD_VAR 0 3
73271: PPUSH
73272: LD_EXP 41
73276: PUSH
73277: LD_VAR 0 2
73281: ARRAY
73282: PUSH
73283: LD_INT 1
73285: ARRAY
73286: PUSH
73287: LD_INT 1
73289: ARRAY
73290: PPUSH
73291: LD_EXP 41
73295: PUSH
73296: LD_VAR 0 2
73300: ARRAY
73301: PUSH
73302: LD_INT 1
73304: ARRAY
73305: PUSH
73306: LD_INT 2
73308: ARRAY
73309: PPUSH
73310: LD_EXP 41
73314: PUSH
73315: LD_VAR 0 2
73319: ARRAY
73320: PUSH
73321: LD_INT 1
73323: ARRAY
73324: PUSH
73325: LD_INT 3
73327: ARRAY
73328: PPUSH
73329: LD_EXP 41
73333: PUSH
73334: LD_VAR 0 2
73338: ARRAY
73339: PUSH
73340: LD_INT 1
73342: ARRAY
73343: PUSH
73344: LD_INT 4
73346: ARRAY
73347: PPUSH
73348: CALL_OW 145
// end ;
73352: GO 73141
73354: POP
73355: POP
// end else
73356: GO 73500
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
73358: LD_EXP 36
73362: PUSH
73363: LD_VAR 0 2
73367: ARRAY
73368: PPUSH
73369: LD_EXP 41
73373: PUSH
73374: LD_VAR 0 2
73378: ARRAY
73379: PUSH
73380: LD_INT 1
73382: ARRAY
73383: PUSH
73384: LD_INT 1
73386: ARRAY
73387: PPUSH
73388: LD_EXP 41
73392: PUSH
73393: LD_VAR 0 2
73397: ARRAY
73398: PUSH
73399: LD_INT 1
73401: ARRAY
73402: PUSH
73403: LD_INT 2
73405: ARRAY
73406: PPUSH
73407: LD_EXP 41
73411: PUSH
73412: LD_VAR 0 2
73416: ARRAY
73417: PUSH
73418: LD_INT 1
73420: ARRAY
73421: PUSH
73422: LD_INT 3
73424: ARRAY
73425: PPUSH
73426: LD_EXP 41
73430: PUSH
73431: LD_VAR 0 2
73435: ARRAY
73436: PUSH
73437: LD_INT 1
73439: ARRAY
73440: PUSH
73441: LD_INT 4
73443: ARRAY
73444: PPUSH
73445: CALL 33451 0 5
73449: NOT
73450: IFFALSE 73500
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
73452: LD_ADDR_EXP 41
73456: PUSH
73457: LD_EXP 41
73461: PPUSH
73462: LD_VAR 0 2
73466: PPUSH
73467: LD_EXP 41
73471: PUSH
73472: LD_VAR 0 2
73476: ARRAY
73477: PPUSH
73478: LD_INT 1
73480: PPUSH
73481: LD_INT 1
73483: NEG
73484: PPUSH
73485: LD_INT 0
73487: PPUSH
73488: CALL 26118 0 4
73492: PPUSH
73493: CALL_OW 1
73497: ST_TO_ADDR
// continue ;
73498: GO 72376
// end ; end ; end ;
73500: GO 72376
73502: POP
73503: POP
// end ;
73504: LD_VAR 0 1
73508: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
73509: LD_INT 0
73511: PPUSH
73512: PPUSH
73513: PPUSH
73514: PPUSH
73515: PPUSH
73516: PPUSH
// if not mc_bases then
73517: LD_EXP 36
73521: NOT
73522: IFFALSE 73526
// exit ;
73524: GO 73953
// for i = 1 to mc_bases do
73526: LD_ADDR_VAR 0 2
73530: PUSH
73531: DOUBLE
73532: LD_INT 1
73534: DEC
73535: ST_TO_ADDR
73536: LD_EXP 36
73540: PUSH
73541: FOR_TO
73542: IFFALSE 73951
// begin tmp := mc_build_upgrade [ i ] ;
73544: LD_ADDR_VAR 0 4
73548: PUSH
73549: LD_EXP 68
73553: PUSH
73554: LD_VAR 0 2
73558: ARRAY
73559: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
73560: LD_ADDR_VAR 0 6
73564: PUSH
73565: LD_EXP 69
73569: PUSH
73570: LD_VAR 0 2
73574: ARRAY
73575: PPUSH
73576: LD_INT 2
73578: PUSH
73579: LD_INT 30
73581: PUSH
73582: LD_INT 6
73584: PUSH
73585: EMPTY
73586: LIST
73587: LIST
73588: PUSH
73589: LD_INT 30
73591: PUSH
73592: LD_INT 7
73594: PUSH
73595: EMPTY
73596: LIST
73597: LIST
73598: PUSH
73599: EMPTY
73600: LIST
73601: LIST
73602: LIST
73603: PPUSH
73604: CALL_OW 72
73608: ST_TO_ADDR
// if not tmp and not lab then
73609: LD_VAR 0 4
73613: NOT
73614: PUSH
73615: LD_VAR 0 6
73619: NOT
73620: AND
73621: IFFALSE 73625
// continue ;
73623: GO 73541
// if tmp then
73625: LD_VAR 0 4
73629: IFFALSE 73749
// for j in tmp do
73631: LD_ADDR_VAR 0 3
73635: PUSH
73636: LD_VAR 0 4
73640: PUSH
73641: FOR_IN
73642: IFFALSE 73747
// begin if UpgradeCost ( j ) then
73644: LD_VAR 0 3
73648: PPUSH
73649: CALL 33111 0 1
73653: IFFALSE 73745
// begin ComUpgrade ( j ) ;
73655: LD_VAR 0 3
73659: PPUSH
73660: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
73664: LD_ADDR_EXP 68
73668: PUSH
73669: LD_EXP 68
73673: PPUSH
73674: LD_VAR 0 2
73678: PPUSH
73679: LD_EXP 68
73683: PUSH
73684: LD_VAR 0 2
73688: ARRAY
73689: PUSH
73690: LD_VAR 0 3
73694: DIFF
73695: PPUSH
73696: CALL_OW 1
73700: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
73701: LD_ADDR_EXP 43
73705: PUSH
73706: LD_EXP 43
73710: PPUSH
73711: LD_VAR 0 2
73715: PUSH
73716: LD_EXP 43
73720: PUSH
73721: LD_VAR 0 2
73725: ARRAY
73726: PUSH
73727: LD_INT 1
73729: PLUS
73730: PUSH
73731: EMPTY
73732: LIST
73733: LIST
73734: PPUSH
73735: LD_VAR 0 3
73739: PPUSH
73740: CALL 26700 0 3
73744: ST_TO_ADDR
// end ; end ;
73745: GO 73641
73747: POP
73748: POP
// if not lab or not mc_lab_upgrade [ i ] then
73749: LD_VAR 0 6
73753: NOT
73754: PUSH
73755: LD_EXP 70
73759: PUSH
73760: LD_VAR 0 2
73764: ARRAY
73765: NOT
73766: OR
73767: IFFALSE 73771
// continue ;
73769: GO 73541
// for j in lab do
73771: LD_ADDR_VAR 0 3
73775: PUSH
73776: LD_VAR 0 6
73780: PUSH
73781: FOR_IN
73782: IFFALSE 73947
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
73784: LD_VAR 0 3
73788: PPUSH
73789: CALL_OW 266
73793: PUSH
73794: LD_INT 6
73796: PUSH
73797: LD_INT 7
73799: PUSH
73800: EMPTY
73801: LIST
73802: LIST
73803: IN
73804: PUSH
73805: LD_VAR 0 3
73809: PPUSH
73810: CALL_OW 461
73814: PUSH
73815: LD_INT 1
73817: NONEQUAL
73818: AND
73819: IFFALSE 73945
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
73821: LD_VAR 0 3
73825: PPUSH
73826: LD_EXP 70
73830: PUSH
73831: LD_VAR 0 2
73835: ARRAY
73836: PUSH
73837: LD_INT 1
73839: ARRAY
73840: PPUSH
73841: CALL 33316 0 2
73845: IFFALSE 73945
// begin ComCancel ( j ) ;
73847: LD_VAR 0 3
73851: PPUSH
73852: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
73856: LD_VAR 0 3
73860: PPUSH
73861: LD_EXP 70
73865: PUSH
73866: LD_VAR 0 2
73870: ARRAY
73871: PUSH
73872: LD_INT 1
73874: ARRAY
73875: PPUSH
73876: CALL_OW 207
// if not j in mc_construct_list [ i ] then
73880: LD_VAR 0 3
73884: PUSH
73885: LD_EXP 43
73889: PUSH
73890: LD_VAR 0 2
73894: ARRAY
73895: IN
73896: NOT
73897: IFFALSE 73943
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
73899: LD_ADDR_EXP 43
73903: PUSH
73904: LD_EXP 43
73908: PPUSH
73909: LD_VAR 0 2
73913: PUSH
73914: LD_EXP 43
73918: PUSH
73919: LD_VAR 0 2
73923: ARRAY
73924: PUSH
73925: LD_INT 1
73927: PLUS
73928: PUSH
73929: EMPTY
73930: LIST
73931: LIST
73932: PPUSH
73933: LD_VAR 0 3
73937: PPUSH
73938: CALL 26700 0 3
73942: ST_TO_ADDR
// break ;
73943: GO 73947
// end ; end ; end ;
73945: GO 73781
73947: POP
73948: POP
// end ;
73949: GO 73541
73951: POP
73952: POP
// end ;
73953: LD_VAR 0 1
73957: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
73958: LD_INT 0
73960: PPUSH
73961: PPUSH
73962: PPUSH
73963: PPUSH
73964: PPUSH
73965: PPUSH
73966: PPUSH
73967: PPUSH
73968: PPUSH
// if not mc_bases then
73969: LD_EXP 36
73973: NOT
73974: IFFALSE 73978
// exit ;
73976: GO 74383
// for i = 1 to mc_bases do
73978: LD_ADDR_VAR 0 2
73982: PUSH
73983: DOUBLE
73984: LD_INT 1
73986: DEC
73987: ST_TO_ADDR
73988: LD_EXP 36
73992: PUSH
73993: FOR_TO
73994: IFFALSE 74381
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
73996: LD_EXP 44
74000: PUSH
74001: LD_VAR 0 2
74005: ARRAY
74006: NOT
74007: PUSH
74008: LD_EXP 36
74012: PUSH
74013: LD_VAR 0 2
74017: ARRAY
74018: PPUSH
74019: LD_INT 30
74021: PUSH
74022: LD_INT 3
74024: PUSH
74025: EMPTY
74026: LIST
74027: LIST
74028: PPUSH
74029: CALL_OW 72
74033: NOT
74034: OR
74035: IFFALSE 74039
// continue ;
74037: GO 73993
// busy := false ;
74039: LD_ADDR_VAR 0 8
74043: PUSH
74044: LD_INT 0
74046: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
74047: LD_ADDR_VAR 0 4
74051: PUSH
74052: LD_EXP 36
74056: PUSH
74057: LD_VAR 0 2
74061: ARRAY
74062: PPUSH
74063: LD_INT 30
74065: PUSH
74066: LD_INT 3
74068: PUSH
74069: EMPTY
74070: LIST
74071: LIST
74072: PPUSH
74073: CALL_OW 72
74077: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
74078: LD_ADDR_VAR 0 6
74082: PUSH
74083: LD_EXP 44
74087: PUSH
74088: LD_VAR 0 2
74092: ARRAY
74093: PPUSH
74094: LD_INT 2
74096: PUSH
74097: LD_INT 30
74099: PUSH
74100: LD_INT 32
74102: PUSH
74103: EMPTY
74104: LIST
74105: LIST
74106: PUSH
74107: LD_INT 30
74109: PUSH
74110: LD_INT 33
74112: PUSH
74113: EMPTY
74114: LIST
74115: LIST
74116: PUSH
74117: EMPTY
74118: LIST
74119: LIST
74120: LIST
74121: PPUSH
74122: CALL_OW 72
74126: ST_TO_ADDR
// if not t then
74127: LD_VAR 0 6
74131: NOT
74132: IFFALSE 74136
// continue ;
74134: GO 73993
// for j in tmp do
74136: LD_ADDR_VAR 0 3
74140: PUSH
74141: LD_VAR 0 4
74145: PUSH
74146: FOR_IN
74147: IFFALSE 74177
// if not BuildingStatus ( j ) = bs_idle then
74149: LD_VAR 0 3
74153: PPUSH
74154: CALL_OW 461
74158: PUSH
74159: LD_INT 2
74161: EQUAL
74162: NOT
74163: IFFALSE 74175
// begin busy := true ;
74165: LD_ADDR_VAR 0 8
74169: PUSH
74170: LD_INT 1
74172: ST_TO_ADDR
// break ;
74173: GO 74177
// end ;
74175: GO 74146
74177: POP
74178: POP
// if busy then
74179: LD_VAR 0 8
74183: IFFALSE 74187
// continue ;
74185: GO 73993
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
74187: LD_ADDR_VAR 0 7
74191: PUSH
74192: LD_VAR 0 6
74196: PPUSH
74197: LD_INT 35
74199: PUSH
74200: LD_INT 0
74202: PUSH
74203: EMPTY
74204: LIST
74205: LIST
74206: PPUSH
74207: CALL_OW 72
74211: ST_TO_ADDR
// if tw then
74212: LD_VAR 0 7
74216: IFFALSE 74293
// begin tw := tw [ 1 ] ;
74218: LD_ADDR_VAR 0 7
74222: PUSH
74223: LD_VAR 0 7
74227: PUSH
74228: LD_INT 1
74230: ARRAY
74231: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
74232: LD_ADDR_VAR 0 9
74236: PUSH
74237: LD_VAR 0 7
74241: PPUSH
74242: LD_EXP 61
74246: PUSH
74247: LD_VAR 0 2
74251: ARRAY
74252: PPUSH
74253: CALL 31670 0 2
74257: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
74258: LD_EXP 75
74262: PUSH
74263: LD_VAR 0 2
74267: ARRAY
74268: IFFALSE 74291
// if not weapon in mc_allowed_tower_weapons [ i ] then
74270: LD_VAR 0 9
74274: PUSH
74275: LD_EXP 75
74279: PUSH
74280: LD_VAR 0 2
74284: ARRAY
74285: IN
74286: NOT
74287: IFFALSE 74291
// continue ;
74289: GO 73993
// end else
74291: GO 74356
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
74293: LD_ADDR_VAR 0 5
74297: PUSH
74298: LD_EXP 44
74302: PUSH
74303: LD_VAR 0 2
74307: ARRAY
74308: PPUSH
74309: LD_VAR 0 4
74313: PPUSH
74314: CALL 61847 0 2
74318: ST_TO_ADDR
// if not tmp2 then
74319: LD_VAR 0 5
74323: NOT
74324: IFFALSE 74328
// continue ;
74326: GO 73993
// tw := tmp2 [ 1 ] ;
74328: LD_ADDR_VAR 0 7
74332: PUSH
74333: LD_VAR 0 5
74337: PUSH
74338: LD_INT 1
74340: ARRAY
74341: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
74342: LD_ADDR_VAR 0 9
74346: PUSH
74347: LD_VAR 0 5
74351: PUSH
74352: LD_INT 2
74354: ARRAY
74355: ST_TO_ADDR
// end ; if not weapon then
74356: LD_VAR 0 9
74360: NOT
74361: IFFALSE 74365
// continue ;
74363: GO 73993
// ComPlaceWeapon ( tw , weapon ) ;
74365: LD_VAR 0 7
74369: PPUSH
74370: LD_VAR 0 9
74374: PPUSH
74375: CALL_OW 148
// end ;
74379: GO 73993
74381: POP
74382: POP
// end ;
74383: LD_VAR 0 1
74387: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
74388: LD_INT 0
74390: PPUSH
74391: PPUSH
74392: PPUSH
74393: PPUSH
74394: PPUSH
74395: PPUSH
// if not mc_bases then
74396: LD_EXP 36
74400: NOT
74401: IFFALSE 74405
// exit ;
74403: GO 75417
// for i = 1 to mc_bases do
74405: LD_ADDR_VAR 0 2
74409: PUSH
74410: DOUBLE
74411: LD_INT 1
74413: DEC
74414: ST_TO_ADDR
74415: LD_EXP 36
74419: PUSH
74420: FOR_TO
74421: IFFALSE 75415
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
74423: LD_EXP 49
74427: PUSH
74428: LD_VAR 0 2
74432: ARRAY
74433: NOT
74434: PUSH
74435: LD_EXP 49
74439: PUSH
74440: LD_VAR 0 2
74444: ARRAY
74445: PUSH
74446: LD_EXP 50
74450: PUSH
74451: LD_VAR 0 2
74455: ARRAY
74456: EQUAL
74457: OR
74458: IFFALSE 74462
// continue ;
74460: GO 74420
// if mc_miners [ i ] then
74462: LD_EXP 50
74466: PUSH
74467: LD_VAR 0 2
74471: ARRAY
74472: IFFALSE 75102
// begin k := 1 ;
74474: LD_ADDR_VAR 0 4
74478: PUSH
74479: LD_INT 1
74481: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
74482: LD_ADDR_VAR 0 3
74486: PUSH
74487: DOUBLE
74488: LD_EXP 50
74492: PUSH
74493: LD_VAR 0 2
74497: ARRAY
74498: INC
74499: ST_TO_ADDR
74500: LD_INT 1
74502: PUSH
74503: FOR_DOWNTO
74504: IFFALSE 75100
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
74506: LD_EXP 50
74510: PUSH
74511: LD_VAR 0 2
74515: ARRAY
74516: PUSH
74517: LD_VAR 0 3
74521: ARRAY
74522: PPUSH
74523: CALL_OW 301
74527: PUSH
74528: LD_EXP 50
74532: PUSH
74533: LD_VAR 0 2
74537: ARRAY
74538: PUSH
74539: LD_VAR 0 3
74543: ARRAY
74544: PPUSH
74545: CALL_OW 257
74549: PUSH
74550: LD_INT 1
74552: NONEQUAL
74553: OR
74554: IFFALSE 74617
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
74556: LD_ADDR_VAR 0 5
74560: PUSH
74561: LD_EXP 50
74565: PUSH
74566: LD_VAR 0 2
74570: ARRAY
74571: PUSH
74572: LD_EXP 50
74576: PUSH
74577: LD_VAR 0 2
74581: ARRAY
74582: PUSH
74583: LD_VAR 0 3
74587: ARRAY
74588: DIFF
74589: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
74590: LD_ADDR_EXP 50
74594: PUSH
74595: LD_EXP 50
74599: PPUSH
74600: LD_VAR 0 2
74604: PPUSH
74605: LD_VAR 0 5
74609: PPUSH
74610: CALL_OW 1
74614: ST_TO_ADDR
// continue ;
74615: GO 74503
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
74617: LD_EXP 50
74621: PUSH
74622: LD_VAR 0 2
74626: ARRAY
74627: PUSH
74628: LD_VAR 0 3
74632: ARRAY
74633: PPUSH
74634: CALL 26636 0 1
74638: PUSH
74639: LD_EXP 50
74643: PUSH
74644: LD_VAR 0 2
74648: ARRAY
74649: PUSH
74650: LD_VAR 0 3
74654: ARRAY
74655: PPUSH
74656: CALL_OW 255
74660: PPUSH
74661: LD_EXP 49
74665: PUSH
74666: LD_VAR 0 2
74670: ARRAY
74671: PUSH
74672: LD_VAR 0 4
74676: ARRAY
74677: PUSH
74678: LD_INT 1
74680: ARRAY
74681: PPUSH
74682: LD_EXP 49
74686: PUSH
74687: LD_VAR 0 2
74691: ARRAY
74692: PUSH
74693: LD_VAR 0 4
74697: ARRAY
74698: PUSH
74699: LD_INT 2
74701: ARRAY
74702: PPUSH
74703: LD_INT 15
74705: PPUSH
74706: CALL 27596 0 4
74710: PUSH
74711: LD_INT 4
74713: ARRAY
74714: PUSH
74715: LD_EXP 50
74719: PUSH
74720: LD_VAR 0 2
74724: ARRAY
74725: PUSH
74726: LD_VAR 0 3
74730: ARRAY
74731: PPUSH
74732: LD_INT 10
74734: PPUSH
74735: CALL 29293 0 2
74739: PUSH
74740: LD_INT 4
74742: ARRAY
74743: OR
74744: AND
74745: IFFALSE 74768
// ComStop ( mc_miners [ i ] [ j ] ) ;
74747: LD_EXP 50
74751: PUSH
74752: LD_VAR 0 2
74756: ARRAY
74757: PUSH
74758: LD_VAR 0 3
74762: ARRAY
74763: PPUSH
74764: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
74768: LD_EXP 50
74772: PUSH
74773: LD_VAR 0 2
74777: ARRAY
74778: PUSH
74779: LD_VAR 0 3
74783: ARRAY
74784: PPUSH
74785: CALL_OW 257
74789: PUSH
74790: LD_INT 1
74792: EQUAL
74793: PUSH
74794: LD_EXP 50
74798: PUSH
74799: LD_VAR 0 2
74803: ARRAY
74804: PUSH
74805: LD_VAR 0 3
74809: ARRAY
74810: PPUSH
74811: CALL_OW 459
74815: NOT
74816: AND
74817: PUSH
74818: LD_EXP 50
74822: PUSH
74823: LD_VAR 0 2
74827: ARRAY
74828: PUSH
74829: LD_VAR 0 3
74833: ARRAY
74834: PPUSH
74835: CALL_OW 255
74839: PPUSH
74840: LD_EXP 49
74844: PUSH
74845: LD_VAR 0 2
74849: ARRAY
74850: PUSH
74851: LD_VAR 0 4
74855: ARRAY
74856: PUSH
74857: LD_INT 1
74859: ARRAY
74860: PPUSH
74861: LD_EXP 49
74865: PUSH
74866: LD_VAR 0 2
74870: ARRAY
74871: PUSH
74872: LD_VAR 0 4
74876: ARRAY
74877: PUSH
74878: LD_INT 2
74880: ARRAY
74881: PPUSH
74882: LD_INT 15
74884: PPUSH
74885: CALL 27596 0 4
74889: PUSH
74890: LD_INT 4
74892: ARRAY
74893: PUSH
74894: LD_INT 0
74896: EQUAL
74897: AND
74898: PUSH
74899: LD_EXP 50
74903: PUSH
74904: LD_VAR 0 2
74908: ARRAY
74909: PUSH
74910: LD_VAR 0 3
74914: ARRAY
74915: PPUSH
74916: CALL_OW 314
74920: NOT
74921: AND
74922: IFFALSE 75098
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
74924: LD_EXP 50
74928: PUSH
74929: LD_VAR 0 2
74933: ARRAY
74934: PUSH
74935: LD_VAR 0 3
74939: ARRAY
74940: PPUSH
74941: CALL_OW 310
74945: IFFALSE 74968
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
74947: LD_EXP 50
74951: PUSH
74952: LD_VAR 0 2
74956: ARRAY
74957: PUSH
74958: LD_VAR 0 3
74962: ARRAY
74963: PPUSH
74964: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
74968: LD_EXP 50
74972: PUSH
74973: LD_VAR 0 2
74977: ARRAY
74978: PUSH
74979: LD_VAR 0 3
74983: ARRAY
74984: PPUSH
74985: CALL_OW 314
74989: NOT
74990: IFFALSE 75058
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
74992: LD_EXP 50
74996: PUSH
74997: LD_VAR 0 2
75001: ARRAY
75002: PUSH
75003: LD_VAR 0 3
75007: ARRAY
75008: PPUSH
75009: LD_EXP 49
75013: PUSH
75014: LD_VAR 0 2
75018: ARRAY
75019: PUSH
75020: LD_VAR 0 4
75024: ARRAY
75025: PUSH
75026: LD_INT 1
75028: ARRAY
75029: PPUSH
75030: LD_EXP 49
75034: PUSH
75035: LD_VAR 0 2
75039: ARRAY
75040: PUSH
75041: LD_VAR 0 4
75045: ARRAY
75046: PUSH
75047: LD_INT 2
75049: ARRAY
75050: PPUSH
75051: LD_INT 0
75053: PPUSH
75054: CALL_OW 193
// k := k + 1 ;
75058: LD_ADDR_VAR 0 4
75062: PUSH
75063: LD_VAR 0 4
75067: PUSH
75068: LD_INT 1
75070: PLUS
75071: ST_TO_ADDR
// if k > mc_mines [ i ] then
75072: LD_VAR 0 4
75076: PUSH
75077: LD_EXP 49
75081: PUSH
75082: LD_VAR 0 2
75086: ARRAY
75087: GREATER
75088: IFFALSE 75098
// k := 1 ;
75090: LD_ADDR_VAR 0 4
75094: PUSH
75095: LD_INT 1
75097: ST_TO_ADDR
// end ; end ;
75098: GO 74503
75100: POP
75101: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
75102: LD_ADDR_VAR 0 5
75106: PUSH
75107: LD_EXP 36
75111: PUSH
75112: LD_VAR 0 2
75116: ARRAY
75117: PPUSH
75118: LD_INT 2
75120: PUSH
75121: LD_INT 30
75123: PUSH
75124: LD_INT 4
75126: PUSH
75127: EMPTY
75128: LIST
75129: LIST
75130: PUSH
75131: LD_INT 30
75133: PUSH
75134: LD_INT 5
75136: PUSH
75137: EMPTY
75138: LIST
75139: LIST
75140: PUSH
75141: LD_INT 30
75143: PUSH
75144: LD_INT 32
75146: PUSH
75147: EMPTY
75148: LIST
75149: LIST
75150: PUSH
75151: EMPTY
75152: LIST
75153: LIST
75154: LIST
75155: LIST
75156: PPUSH
75157: CALL_OW 72
75161: ST_TO_ADDR
// if not tmp then
75162: LD_VAR 0 5
75166: NOT
75167: IFFALSE 75171
// continue ;
75169: GO 74420
// list := [ ] ;
75171: LD_ADDR_VAR 0 6
75175: PUSH
75176: EMPTY
75177: ST_TO_ADDR
// for j in tmp do
75178: LD_ADDR_VAR 0 3
75182: PUSH
75183: LD_VAR 0 5
75187: PUSH
75188: FOR_IN
75189: IFFALSE 75258
// begin for k in UnitsInside ( j ) do
75191: LD_ADDR_VAR 0 4
75195: PUSH
75196: LD_VAR 0 3
75200: PPUSH
75201: CALL_OW 313
75205: PUSH
75206: FOR_IN
75207: IFFALSE 75254
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
75209: LD_VAR 0 4
75213: PPUSH
75214: CALL_OW 257
75218: PUSH
75219: LD_INT 1
75221: EQUAL
75222: PUSH
75223: LD_VAR 0 4
75227: PPUSH
75228: CALL_OW 459
75232: NOT
75233: AND
75234: IFFALSE 75252
// list := list ^ k ;
75236: LD_ADDR_VAR 0 6
75240: PUSH
75241: LD_VAR 0 6
75245: PUSH
75246: LD_VAR 0 4
75250: ADD
75251: ST_TO_ADDR
75252: GO 75206
75254: POP
75255: POP
// end ;
75256: GO 75188
75258: POP
75259: POP
// list := list diff mc_miners [ i ] ;
75260: LD_ADDR_VAR 0 6
75264: PUSH
75265: LD_VAR 0 6
75269: PUSH
75270: LD_EXP 50
75274: PUSH
75275: LD_VAR 0 2
75279: ARRAY
75280: DIFF
75281: ST_TO_ADDR
// if not list then
75282: LD_VAR 0 6
75286: NOT
75287: IFFALSE 75291
// continue ;
75289: GO 74420
// k := mc_mines [ i ] - mc_miners [ i ] ;
75291: LD_ADDR_VAR 0 4
75295: PUSH
75296: LD_EXP 49
75300: PUSH
75301: LD_VAR 0 2
75305: ARRAY
75306: PUSH
75307: LD_EXP 50
75311: PUSH
75312: LD_VAR 0 2
75316: ARRAY
75317: MINUS
75318: ST_TO_ADDR
// if k > list then
75319: LD_VAR 0 4
75323: PUSH
75324: LD_VAR 0 6
75328: GREATER
75329: IFFALSE 75341
// k := list ;
75331: LD_ADDR_VAR 0 4
75335: PUSH
75336: LD_VAR 0 6
75340: ST_TO_ADDR
// for j = 1 to k do
75341: LD_ADDR_VAR 0 3
75345: PUSH
75346: DOUBLE
75347: LD_INT 1
75349: DEC
75350: ST_TO_ADDR
75351: LD_VAR 0 4
75355: PUSH
75356: FOR_TO
75357: IFFALSE 75411
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
75359: LD_ADDR_EXP 50
75363: PUSH
75364: LD_EXP 50
75368: PPUSH
75369: LD_VAR 0 2
75373: PUSH
75374: LD_EXP 50
75378: PUSH
75379: LD_VAR 0 2
75383: ARRAY
75384: PUSH
75385: LD_INT 1
75387: PLUS
75388: PUSH
75389: EMPTY
75390: LIST
75391: LIST
75392: PPUSH
75393: LD_VAR 0 6
75397: PUSH
75398: LD_VAR 0 3
75402: ARRAY
75403: PPUSH
75404: CALL 26700 0 3
75408: ST_TO_ADDR
75409: GO 75356
75411: POP
75412: POP
// end ;
75413: GO 74420
75415: POP
75416: POP
// end ;
75417: LD_VAR 0 1
75421: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
75422: LD_INT 0
75424: PPUSH
75425: PPUSH
75426: PPUSH
75427: PPUSH
75428: PPUSH
75429: PPUSH
75430: PPUSH
75431: PPUSH
75432: PPUSH
75433: PPUSH
// if not mc_bases then
75434: LD_EXP 36
75438: NOT
75439: IFFALSE 75443
// exit ;
75441: GO 77174
// for i = 1 to mc_bases do
75443: LD_ADDR_VAR 0 2
75447: PUSH
75448: DOUBLE
75449: LD_INT 1
75451: DEC
75452: ST_TO_ADDR
75453: LD_EXP 36
75457: PUSH
75458: FOR_TO
75459: IFFALSE 77172
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
75461: LD_EXP 36
75465: PUSH
75466: LD_VAR 0 2
75470: ARRAY
75471: NOT
75472: PUSH
75473: LD_EXP 43
75477: PUSH
75478: LD_VAR 0 2
75482: ARRAY
75483: OR
75484: IFFALSE 75488
// continue ;
75486: GO 75458
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
75488: LD_EXP 52
75492: PUSH
75493: LD_VAR 0 2
75497: ARRAY
75498: NOT
75499: PUSH
75500: LD_EXP 53
75504: PUSH
75505: LD_VAR 0 2
75509: ARRAY
75510: AND
75511: IFFALSE 75549
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
75513: LD_ADDR_EXP 53
75517: PUSH
75518: LD_EXP 53
75522: PPUSH
75523: LD_VAR 0 2
75527: PPUSH
75528: EMPTY
75529: PPUSH
75530: CALL_OW 1
75534: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
75535: LD_VAR 0 2
75539: PPUSH
75540: LD_INT 107
75542: PPUSH
75543: CALL 66638 0 2
// continue ;
75547: GO 75458
// end ; target := [ ] ;
75549: LD_ADDR_VAR 0 6
75553: PUSH
75554: EMPTY
75555: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
75556: LD_ADDR_VAR 0 3
75560: PUSH
75561: DOUBLE
75562: LD_EXP 52
75566: PUSH
75567: LD_VAR 0 2
75571: ARRAY
75572: INC
75573: ST_TO_ADDR
75574: LD_INT 1
75576: PUSH
75577: FOR_DOWNTO
75578: IFFALSE 75838
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
75580: LD_EXP 52
75584: PUSH
75585: LD_VAR 0 2
75589: ARRAY
75590: PUSH
75591: LD_VAR 0 3
75595: ARRAY
75596: PUSH
75597: LD_INT 2
75599: ARRAY
75600: PPUSH
75601: LD_EXP 52
75605: PUSH
75606: LD_VAR 0 2
75610: ARRAY
75611: PUSH
75612: LD_VAR 0 3
75616: ARRAY
75617: PUSH
75618: LD_INT 3
75620: ARRAY
75621: PPUSH
75622: CALL_OW 488
75626: PUSH
75627: LD_EXP 52
75631: PUSH
75632: LD_VAR 0 2
75636: ARRAY
75637: PUSH
75638: LD_VAR 0 3
75642: ARRAY
75643: PUSH
75644: LD_INT 2
75646: ARRAY
75647: PPUSH
75648: LD_EXP 52
75652: PUSH
75653: LD_VAR 0 2
75657: ARRAY
75658: PUSH
75659: LD_VAR 0 3
75663: ARRAY
75664: PUSH
75665: LD_INT 3
75667: ARRAY
75668: PPUSH
75669: CALL_OW 284
75673: PUSH
75674: LD_INT 0
75676: EQUAL
75677: AND
75678: IFFALSE 75733
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
75680: LD_ADDR_VAR 0 5
75684: PUSH
75685: LD_EXP 52
75689: PUSH
75690: LD_VAR 0 2
75694: ARRAY
75695: PPUSH
75696: LD_VAR 0 3
75700: PPUSH
75701: CALL_OW 3
75705: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
75706: LD_ADDR_EXP 52
75710: PUSH
75711: LD_EXP 52
75715: PPUSH
75716: LD_VAR 0 2
75720: PPUSH
75721: LD_VAR 0 5
75725: PPUSH
75726: CALL_OW 1
75730: ST_TO_ADDR
// continue ;
75731: GO 75577
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
75733: LD_EXP 36
75737: PUSH
75738: LD_VAR 0 2
75742: ARRAY
75743: PUSH
75744: LD_INT 1
75746: ARRAY
75747: PPUSH
75748: CALL_OW 255
75752: PPUSH
75753: LD_EXP 52
75757: PUSH
75758: LD_VAR 0 2
75762: ARRAY
75763: PUSH
75764: LD_VAR 0 3
75768: ARRAY
75769: PUSH
75770: LD_INT 2
75772: ARRAY
75773: PPUSH
75774: LD_EXP 52
75778: PUSH
75779: LD_VAR 0 2
75783: ARRAY
75784: PUSH
75785: LD_VAR 0 3
75789: ARRAY
75790: PUSH
75791: LD_INT 3
75793: ARRAY
75794: PPUSH
75795: LD_INT 30
75797: PPUSH
75798: CALL 27596 0 4
75802: PUSH
75803: LD_INT 4
75805: ARRAY
75806: PUSH
75807: LD_INT 0
75809: EQUAL
75810: IFFALSE 75836
// begin target := mc_crates [ i ] [ j ] ;
75812: LD_ADDR_VAR 0 6
75816: PUSH
75817: LD_EXP 52
75821: PUSH
75822: LD_VAR 0 2
75826: ARRAY
75827: PUSH
75828: LD_VAR 0 3
75832: ARRAY
75833: ST_TO_ADDR
// break ;
75834: GO 75838
// end ; end ;
75836: GO 75577
75838: POP
75839: POP
// if not target then
75840: LD_VAR 0 6
75844: NOT
75845: IFFALSE 75849
// continue ;
75847: GO 75458
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
75849: LD_ADDR_VAR 0 7
75853: PUSH
75854: LD_EXP 55
75858: PUSH
75859: LD_VAR 0 2
75863: ARRAY
75864: PPUSH
75865: LD_INT 2
75867: PUSH
75868: LD_INT 3
75870: PUSH
75871: LD_INT 58
75873: PUSH
75874: EMPTY
75875: LIST
75876: PUSH
75877: EMPTY
75878: LIST
75879: LIST
75880: PUSH
75881: LD_INT 61
75883: PUSH
75884: EMPTY
75885: LIST
75886: PUSH
75887: LD_INT 33
75889: PUSH
75890: LD_INT 5
75892: PUSH
75893: EMPTY
75894: LIST
75895: LIST
75896: PUSH
75897: LD_INT 33
75899: PUSH
75900: LD_INT 3
75902: PUSH
75903: EMPTY
75904: LIST
75905: LIST
75906: PUSH
75907: EMPTY
75908: LIST
75909: LIST
75910: LIST
75911: LIST
75912: LIST
75913: PUSH
75914: LD_INT 2
75916: PUSH
75917: LD_INT 34
75919: PUSH
75920: LD_INT 32
75922: PUSH
75923: EMPTY
75924: LIST
75925: LIST
75926: PUSH
75927: LD_INT 34
75929: PUSH
75930: LD_INT 51
75932: PUSH
75933: EMPTY
75934: LIST
75935: LIST
75936: PUSH
75937: LD_INT 34
75939: PUSH
75940: LD_INT 12
75942: PUSH
75943: EMPTY
75944: LIST
75945: LIST
75946: PUSH
75947: EMPTY
75948: LIST
75949: LIST
75950: LIST
75951: LIST
75952: PUSH
75953: EMPTY
75954: LIST
75955: LIST
75956: PPUSH
75957: CALL_OW 72
75961: ST_TO_ADDR
// if not cargo then
75962: LD_VAR 0 7
75966: NOT
75967: IFFALSE 76610
// begin if mc_crates_collector [ i ] < 5 then
75969: LD_EXP 53
75973: PUSH
75974: LD_VAR 0 2
75978: ARRAY
75979: PUSH
75980: LD_INT 5
75982: LESS
75983: IFFALSE 76349
// begin if mc_ape [ i ] then
75985: LD_EXP 65
75989: PUSH
75990: LD_VAR 0 2
75994: ARRAY
75995: IFFALSE 76042
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
75997: LD_ADDR_VAR 0 5
76001: PUSH
76002: LD_EXP 65
76006: PUSH
76007: LD_VAR 0 2
76011: ARRAY
76012: PPUSH
76013: LD_INT 25
76015: PUSH
76016: LD_INT 16
76018: PUSH
76019: EMPTY
76020: LIST
76021: LIST
76022: PUSH
76023: LD_INT 24
76025: PUSH
76026: LD_INT 750
76028: PUSH
76029: EMPTY
76030: LIST
76031: LIST
76032: PUSH
76033: EMPTY
76034: LIST
76035: LIST
76036: PPUSH
76037: CALL_OW 72
76041: ST_TO_ADDR
// if not tmp then
76042: LD_VAR 0 5
76046: NOT
76047: IFFALSE 76094
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
76049: LD_ADDR_VAR 0 5
76053: PUSH
76054: LD_EXP 36
76058: PUSH
76059: LD_VAR 0 2
76063: ARRAY
76064: PPUSH
76065: LD_INT 25
76067: PUSH
76068: LD_INT 2
76070: PUSH
76071: EMPTY
76072: LIST
76073: LIST
76074: PUSH
76075: LD_INT 24
76077: PUSH
76078: LD_INT 750
76080: PUSH
76081: EMPTY
76082: LIST
76083: LIST
76084: PUSH
76085: EMPTY
76086: LIST
76087: LIST
76088: PPUSH
76089: CALL_OW 72
76093: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
76094: LD_EXP 65
76098: PUSH
76099: LD_VAR 0 2
76103: ARRAY
76104: PUSH
76105: LD_EXP 36
76109: PUSH
76110: LD_VAR 0 2
76114: ARRAY
76115: PPUSH
76116: LD_INT 25
76118: PUSH
76119: LD_INT 2
76121: PUSH
76122: EMPTY
76123: LIST
76124: LIST
76125: PUSH
76126: LD_INT 24
76128: PUSH
76129: LD_INT 750
76131: PUSH
76132: EMPTY
76133: LIST
76134: LIST
76135: PUSH
76136: EMPTY
76137: LIST
76138: LIST
76139: PPUSH
76140: CALL_OW 72
76144: AND
76145: PUSH
76146: LD_VAR 0 5
76150: PUSH
76151: LD_INT 5
76153: LESS
76154: AND
76155: IFFALSE 76237
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
76157: LD_ADDR_VAR 0 3
76161: PUSH
76162: LD_EXP 36
76166: PUSH
76167: LD_VAR 0 2
76171: ARRAY
76172: PPUSH
76173: LD_INT 25
76175: PUSH
76176: LD_INT 2
76178: PUSH
76179: EMPTY
76180: LIST
76181: LIST
76182: PUSH
76183: LD_INT 24
76185: PUSH
76186: LD_INT 750
76188: PUSH
76189: EMPTY
76190: LIST
76191: LIST
76192: PUSH
76193: EMPTY
76194: LIST
76195: LIST
76196: PPUSH
76197: CALL_OW 72
76201: PUSH
76202: FOR_IN
76203: IFFALSE 76235
// begin tmp := tmp union j ;
76205: LD_ADDR_VAR 0 5
76209: PUSH
76210: LD_VAR 0 5
76214: PUSH
76215: LD_VAR 0 3
76219: UNION
76220: ST_TO_ADDR
// if tmp >= 5 then
76221: LD_VAR 0 5
76225: PUSH
76226: LD_INT 5
76228: GREATEREQUAL
76229: IFFALSE 76233
// break ;
76231: GO 76235
// end ;
76233: GO 76202
76235: POP
76236: POP
// end ; if not tmp then
76237: LD_VAR 0 5
76241: NOT
76242: IFFALSE 76246
// continue ;
76244: GO 75458
// for j in tmp do
76246: LD_ADDR_VAR 0 3
76250: PUSH
76251: LD_VAR 0 5
76255: PUSH
76256: FOR_IN
76257: IFFALSE 76347
// if not GetTag ( j ) then
76259: LD_VAR 0 3
76263: PPUSH
76264: CALL_OW 110
76268: NOT
76269: IFFALSE 76345
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
76271: LD_ADDR_EXP 53
76275: PUSH
76276: LD_EXP 53
76280: PPUSH
76281: LD_VAR 0 2
76285: PUSH
76286: LD_EXP 53
76290: PUSH
76291: LD_VAR 0 2
76295: ARRAY
76296: PUSH
76297: LD_INT 1
76299: PLUS
76300: PUSH
76301: EMPTY
76302: LIST
76303: LIST
76304: PPUSH
76305: LD_VAR 0 3
76309: PPUSH
76310: CALL 26700 0 3
76314: ST_TO_ADDR
// SetTag ( j , 107 ) ;
76315: LD_VAR 0 3
76319: PPUSH
76320: LD_INT 107
76322: PPUSH
76323: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
76327: LD_EXP 53
76331: PUSH
76332: LD_VAR 0 2
76336: ARRAY
76337: PUSH
76338: LD_INT 5
76340: GREATEREQUAL
76341: IFFALSE 76345
// break ;
76343: GO 76347
// end ;
76345: GO 76256
76347: POP
76348: POP
// end ; if mc_crates_collector [ i ] and target then
76349: LD_EXP 53
76353: PUSH
76354: LD_VAR 0 2
76358: ARRAY
76359: PUSH
76360: LD_VAR 0 6
76364: AND
76365: IFFALSE 76608
// begin if mc_crates_collector [ i ] < target [ 1 ] then
76367: LD_EXP 53
76371: PUSH
76372: LD_VAR 0 2
76376: ARRAY
76377: PUSH
76378: LD_VAR 0 6
76382: PUSH
76383: LD_INT 1
76385: ARRAY
76386: LESS
76387: IFFALSE 76407
// tmp := mc_crates_collector [ i ] else
76389: LD_ADDR_VAR 0 5
76393: PUSH
76394: LD_EXP 53
76398: PUSH
76399: LD_VAR 0 2
76403: ARRAY
76404: ST_TO_ADDR
76405: GO 76421
// tmp := target [ 1 ] ;
76407: LD_ADDR_VAR 0 5
76411: PUSH
76412: LD_VAR 0 6
76416: PUSH
76417: LD_INT 1
76419: ARRAY
76420: ST_TO_ADDR
// k := 0 ;
76421: LD_ADDR_VAR 0 4
76425: PUSH
76426: LD_INT 0
76428: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
76429: LD_ADDR_VAR 0 3
76433: PUSH
76434: LD_EXP 53
76438: PUSH
76439: LD_VAR 0 2
76443: ARRAY
76444: PUSH
76445: FOR_IN
76446: IFFALSE 76606
// begin k := k + 1 ;
76448: LD_ADDR_VAR 0 4
76452: PUSH
76453: LD_VAR 0 4
76457: PUSH
76458: LD_INT 1
76460: PLUS
76461: ST_TO_ADDR
// if k > tmp then
76462: LD_VAR 0 4
76466: PUSH
76467: LD_VAR 0 5
76471: GREATER
76472: IFFALSE 76476
// break ;
76474: GO 76606
// if not GetClass ( j ) in [ 2 , 16 ] then
76476: LD_VAR 0 3
76480: PPUSH
76481: CALL_OW 257
76485: PUSH
76486: LD_INT 2
76488: PUSH
76489: LD_INT 16
76491: PUSH
76492: EMPTY
76493: LIST
76494: LIST
76495: IN
76496: NOT
76497: IFFALSE 76550
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
76499: LD_ADDR_EXP 53
76503: PUSH
76504: LD_EXP 53
76508: PPUSH
76509: LD_VAR 0 2
76513: PPUSH
76514: LD_EXP 53
76518: PUSH
76519: LD_VAR 0 2
76523: ARRAY
76524: PUSH
76525: LD_VAR 0 3
76529: DIFF
76530: PPUSH
76531: CALL_OW 1
76535: ST_TO_ADDR
// SetTag ( j , 0 ) ;
76536: LD_VAR 0 3
76540: PPUSH
76541: LD_INT 0
76543: PPUSH
76544: CALL_OW 109
// continue ;
76548: GO 76445
// end ; if IsInUnit ( j ) then
76550: LD_VAR 0 3
76554: PPUSH
76555: CALL_OW 310
76559: IFFALSE 76570
// ComExitBuilding ( j ) ;
76561: LD_VAR 0 3
76565: PPUSH
76566: CALL_OW 122
// wait ( 3 ) ;
76570: LD_INT 3
76572: PPUSH
76573: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
76577: LD_VAR 0 3
76581: PPUSH
76582: LD_VAR 0 6
76586: PUSH
76587: LD_INT 2
76589: ARRAY
76590: PPUSH
76591: LD_VAR 0 6
76595: PUSH
76596: LD_INT 3
76598: ARRAY
76599: PPUSH
76600: CALL_OW 117
// end ;
76604: GO 76445
76606: POP
76607: POP
// end ; end else
76608: GO 77170
// begin for j in cargo do
76610: LD_ADDR_VAR 0 3
76614: PUSH
76615: LD_VAR 0 7
76619: PUSH
76620: FOR_IN
76621: IFFALSE 77168
// begin if GetTag ( j ) <> 0 then
76623: LD_VAR 0 3
76627: PPUSH
76628: CALL_OW 110
76632: PUSH
76633: LD_INT 0
76635: NONEQUAL
76636: IFFALSE 76640
// continue ;
76638: GO 76620
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
76640: LD_VAR 0 3
76644: PPUSH
76645: CALL_OW 256
76649: PUSH
76650: LD_INT 1000
76652: LESS
76653: PUSH
76654: LD_VAR 0 3
76658: PPUSH
76659: LD_EXP 60
76663: PUSH
76664: LD_VAR 0 2
76668: ARRAY
76669: PPUSH
76670: CALL_OW 308
76674: NOT
76675: AND
76676: IFFALSE 76698
// ComMoveToArea ( j , mc_parking [ i ] ) ;
76678: LD_VAR 0 3
76682: PPUSH
76683: LD_EXP 60
76687: PUSH
76688: LD_VAR 0 2
76692: ARRAY
76693: PPUSH
76694: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
76698: LD_VAR 0 3
76702: PPUSH
76703: CALL_OW 256
76707: PUSH
76708: LD_INT 1000
76710: LESS
76711: PUSH
76712: LD_VAR 0 3
76716: PPUSH
76717: LD_EXP 60
76721: PUSH
76722: LD_VAR 0 2
76726: ARRAY
76727: PPUSH
76728: CALL_OW 308
76732: AND
76733: IFFALSE 76737
// continue ;
76735: GO 76620
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
76737: LD_VAR 0 3
76741: PPUSH
76742: CALL_OW 262
76746: PUSH
76747: LD_INT 2
76749: EQUAL
76750: PUSH
76751: LD_VAR 0 3
76755: PPUSH
76756: CALL_OW 261
76760: PUSH
76761: LD_INT 15
76763: LESS
76764: AND
76765: IFFALSE 76769
// continue ;
76767: GO 76620
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
76769: LD_VAR 0 3
76773: PPUSH
76774: CALL_OW 262
76778: PUSH
76779: LD_INT 1
76781: EQUAL
76782: PUSH
76783: LD_VAR 0 3
76787: PPUSH
76788: CALL_OW 261
76792: PUSH
76793: LD_INT 10
76795: LESS
76796: AND
76797: IFFALSE 77107
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
76799: LD_ADDR_VAR 0 8
76803: PUSH
76804: LD_EXP 36
76808: PUSH
76809: LD_VAR 0 2
76813: ARRAY
76814: PPUSH
76815: LD_INT 2
76817: PUSH
76818: LD_INT 30
76820: PUSH
76821: LD_INT 0
76823: PUSH
76824: EMPTY
76825: LIST
76826: LIST
76827: PUSH
76828: LD_INT 30
76830: PUSH
76831: LD_INT 1
76833: PUSH
76834: EMPTY
76835: LIST
76836: LIST
76837: PUSH
76838: EMPTY
76839: LIST
76840: LIST
76841: LIST
76842: PPUSH
76843: CALL_OW 72
76847: ST_TO_ADDR
// if not depot then
76848: LD_VAR 0 8
76852: NOT
76853: IFFALSE 76857
// continue ;
76855: GO 76620
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
76857: LD_VAR 0 3
76861: PPUSH
76862: LD_VAR 0 8
76866: PPUSH
76867: LD_VAR 0 3
76871: PPUSH
76872: CALL_OW 74
76876: PPUSH
76877: CALL_OW 296
76881: PUSH
76882: LD_INT 6
76884: LESS
76885: IFFALSE 76901
// SetFuel ( j , 100 ) else
76887: LD_VAR 0 3
76891: PPUSH
76892: LD_INT 100
76894: PPUSH
76895: CALL_OW 240
76899: GO 77107
// if GetFuel ( j ) = 0 then
76901: LD_VAR 0 3
76905: PPUSH
76906: CALL_OW 261
76910: PUSH
76911: LD_INT 0
76913: EQUAL
76914: IFFALSE 77107
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
76916: LD_ADDR_EXP 55
76920: PUSH
76921: LD_EXP 55
76925: PPUSH
76926: LD_VAR 0 2
76930: PPUSH
76931: LD_EXP 55
76935: PUSH
76936: LD_VAR 0 2
76940: ARRAY
76941: PUSH
76942: LD_VAR 0 3
76946: DIFF
76947: PPUSH
76948: CALL_OW 1
76952: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
76953: LD_VAR 0 3
76957: PPUSH
76958: CALL_OW 263
76962: PUSH
76963: LD_INT 1
76965: EQUAL
76966: IFFALSE 76982
// ComExitVehicle ( IsInUnit ( j ) ) ;
76968: LD_VAR 0 3
76972: PPUSH
76973: CALL_OW 310
76977: PPUSH
76978: CALL_OW 121
// if GetControl ( j ) = control_remote then
76982: LD_VAR 0 3
76986: PPUSH
76987: CALL_OW 263
76991: PUSH
76992: LD_INT 2
76994: EQUAL
76995: IFFALSE 77006
// ComUnlink ( j ) ;
76997: LD_VAR 0 3
77001: PPUSH
77002: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
77006: LD_ADDR_VAR 0 9
77010: PUSH
77011: LD_VAR 0 2
77015: PPUSH
77016: LD_INT 3
77018: PPUSH
77019: CALL 86211 0 2
77023: ST_TO_ADDR
// if fac then
77024: LD_VAR 0 9
77028: IFFALSE 77105
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
77030: LD_ADDR_VAR 0 10
77034: PUSH
77035: LD_VAR 0 9
77039: PPUSH
77040: LD_VAR 0 3
77044: PPUSH
77045: CALL_OW 265
77049: PPUSH
77050: LD_VAR 0 3
77054: PPUSH
77055: CALL_OW 262
77059: PPUSH
77060: LD_VAR 0 3
77064: PPUSH
77065: CALL_OW 263
77069: PPUSH
77070: LD_VAR 0 3
77074: PPUSH
77075: CALL_OW 264
77079: PPUSH
77080: CALL 24300 0 5
77084: ST_TO_ADDR
// if components then
77085: LD_VAR 0 10
77089: IFFALSE 77105
// MC_InsertProduceList ( i , components ) ;
77091: LD_VAR 0 2
77095: PPUSH
77096: LD_VAR 0 10
77100: PPUSH
77101: CALL 85839 0 2
// end ; continue ;
77105: GO 76620
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
77107: LD_VAR 0 3
77111: PPUSH
77112: LD_INT 1
77114: PPUSH
77115: CALL_OW 289
77119: PUSH
77120: LD_INT 100
77122: LESS
77123: PUSH
77124: LD_VAR 0 3
77128: PPUSH
77129: CALL_OW 314
77133: NOT
77134: AND
77135: IFFALSE 77164
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
77137: LD_VAR 0 3
77141: PPUSH
77142: LD_VAR 0 6
77146: PUSH
77147: LD_INT 2
77149: ARRAY
77150: PPUSH
77151: LD_VAR 0 6
77155: PUSH
77156: LD_INT 3
77158: ARRAY
77159: PPUSH
77160: CALL_OW 117
// break ;
77164: GO 77168
// end ;
77166: GO 76620
77168: POP
77169: POP
// end ; end ;
77170: GO 75458
77172: POP
77173: POP
// end ;
77174: LD_VAR 0 1
77178: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
77179: LD_INT 0
77181: PPUSH
77182: PPUSH
77183: PPUSH
77184: PPUSH
// if not mc_bases then
77185: LD_EXP 36
77189: NOT
77190: IFFALSE 77194
// exit ;
77192: GO 77355
// for i = 1 to mc_bases do
77194: LD_ADDR_VAR 0 2
77198: PUSH
77199: DOUBLE
77200: LD_INT 1
77202: DEC
77203: ST_TO_ADDR
77204: LD_EXP 36
77208: PUSH
77209: FOR_TO
77210: IFFALSE 77353
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
77212: LD_ADDR_VAR 0 4
77216: PUSH
77217: LD_EXP 55
77221: PUSH
77222: LD_VAR 0 2
77226: ARRAY
77227: PUSH
77228: LD_EXP 58
77232: PUSH
77233: LD_VAR 0 2
77237: ARRAY
77238: UNION
77239: PPUSH
77240: LD_INT 33
77242: PUSH
77243: LD_INT 2
77245: PUSH
77246: EMPTY
77247: LIST
77248: LIST
77249: PPUSH
77250: CALL_OW 72
77254: ST_TO_ADDR
// if tmp then
77255: LD_VAR 0 4
77259: IFFALSE 77351
// for j in tmp do
77261: LD_ADDR_VAR 0 3
77265: PUSH
77266: LD_VAR 0 4
77270: PUSH
77271: FOR_IN
77272: IFFALSE 77349
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
77274: LD_VAR 0 3
77278: PPUSH
77279: CALL_OW 312
77283: NOT
77284: PUSH
77285: LD_VAR 0 3
77289: PPUSH
77290: CALL_OW 256
77294: PUSH
77295: LD_INT 250
77297: GREATEREQUAL
77298: AND
77299: IFFALSE 77312
// Connect ( j ) else
77301: LD_VAR 0 3
77305: PPUSH
77306: CALL 29633 0 1
77310: GO 77347
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
77312: LD_VAR 0 3
77316: PPUSH
77317: CALL_OW 256
77321: PUSH
77322: LD_INT 250
77324: LESS
77325: PUSH
77326: LD_VAR 0 3
77330: PPUSH
77331: CALL_OW 312
77335: AND
77336: IFFALSE 77347
// ComUnlink ( j ) ;
77338: LD_VAR 0 3
77342: PPUSH
77343: CALL_OW 136
77347: GO 77271
77349: POP
77350: POP
// end ;
77351: GO 77209
77353: POP
77354: POP
// end ;
77355: LD_VAR 0 1
77359: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
77360: LD_INT 0
77362: PPUSH
77363: PPUSH
77364: PPUSH
77365: PPUSH
77366: PPUSH
// if not mc_bases then
77367: LD_EXP 36
77371: NOT
77372: IFFALSE 77376
// exit ;
77374: GO 77836
// for i = 1 to mc_bases do
77376: LD_ADDR_VAR 0 2
77380: PUSH
77381: DOUBLE
77382: LD_INT 1
77384: DEC
77385: ST_TO_ADDR
77386: LD_EXP 36
77390: PUSH
77391: FOR_TO
77392: IFFALSE 77834
// begin if not mc_produce [ i ] then
77394: LD_EXP 57
77398: PUSH
77399: LD_VAR 0 2
77403: ARRAY
77404: NOT
77405: IFFALSE 77409
// continue ;
77407: GO 77391
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
77409: LD_ADDR_VAR 0 5
77413: PUSH
77414: LD_EXP 36
77418: PUSH
77419: LD_VAR 0 2
77423: ARRAY
77424: PPUSH
77425: LD_INT 30
77427: PUSH
77428: LD_INT 3
77430: PUSH
77431: EMPTY
77432: LIST
77433: LIST
77434: PPUSH
77435: CALL_OW 72
77439: ST_TO_ADDR
// if not fac then
77440: LD_VAR 0 5
77444: NOT
77445: IFFALSE 77449
// continue ;
77447: GO 77391
// for j in fac do
77449: LD_ADDR_VAR 0 3
77453: PUSH
77454: LD_VAR 0 5
77458: PUSH
77459: FOR_IN
77460: IFFALSE 77830
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
77462: LD_VAR 0 3
77466: PPUSH
77467: CALL_OW 461
77471: PUSH
77472: LD_INT 2
77474: NONEQUAL
77475: PUSH
77476: LD_VAR 0 3
77480: PPUSH
77481: LD_INT 15
77483: PPUSH
77484: CALL 29293 0 2
77488: PUSH
77489: LD_INT 4
77491: ARRAY
77492: OR
77493: PUSH
77494: LD_VAR 0 3
77498: PPUSH
77499: CALL_OW 313
77503: PUSH
77504: LD_INT 0
77506: EQUAL
77507: OR
77508: IFFALSE 77512
// continue ;
77510: GO 77459
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
77512: LD_VAR 0 3
77516: PPUSH
77517: LD_EXP 57
77521: PUSH
77522: LD_VAR 0 2
77526: ARRAY
77527: PUSH
77528: LD_INT 1
77530: ARRAY
77531: PUSH
77532: LD_INT 1
77534: ARRAY
77535: PPUSH
77536: LD_EXP 57
77540: PUSH
77541: LD_VAR 0 2
77545: ARRAY
77546: PUSH
77547: LD_INT 1
77549: ARRAY
77550: PUSH
77551: LD_INT 2
77553: ARRAY
77554: PPUSH
77555: LD_EXP 57
77559: PUSH
77560: LD_VAR 0 2
77564: ARRAY
77565: PUSH
77566: LD_INT 1
77568: ARRAY
77569: PUSH
77570: LD_INT 3
77572: ARRAY
77573: PPUSH
77574: LD_EXP 57
77578: PUSH
77579: LD_VAR 0 2
77583: ARRAY
77584: PUSH
77585: LD_INT 1
77587: ARRAY
77588: PUSH
77589: LD_INT 4
77591: ARRAY
77592: PPUSH
77593: CALL_OW 448
77597: PUSH
77598: LD_VAR 0 3
77602: PPUSH
77603: LD_EXP 57
77607: PUSH
77608: LD_VAR 0 2
77612: ARRAY
77613: PUSH
77614: LD_INT 1
77616: ARRAY
77617: PUSH
77618: LD_INT 1
77620: ARRAY
77621: PUSH
77622: LD_EXP 57
77626: PUSH
77627: LD_VAR 0 2
77631: ARRAY
77632: PUSH
77633: LD_INT 1
77635: ARRAY
77636: PUSH
77637: LD_INT 2
77639: ARRAY
77640: PUSH
77641: LD_EXP 57
77645: PUSH
77646: LD_VAR 0 2
77650: ARRAY
77651: PUSH
77652: LD_INT 1
77654: ARRAY
77655: PUSH
77656: LD_INT 3
77658: ARRAY
77659: PUSH
77660: LD_EXP 57
77664: PUSH
77665: LD_VAR 0 2
77669: ARRAY
77670: PUSH
77671: LD_INT 1
77673: ARRAY
77674: PUSH
77675: LD_INT 4
77677: ARRAY
77678: PUSH
77679: EMPTY
77680: LIST
77681: LIST
77682: LIST
77683: LIST
77684: PPUSH
77685: CALL 32964 0 2
77689: AND
77690: IFFALSE 77828
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
77692: LD_VAR 0 3
77696: PPUSH
77697: LD_EXP 57
77701: PUSH
77702: LD_VAR 0 2
77706: ARRAY
77707: PUSH
77708: LD_INT 1
77710: ARRAY
77711: PUSH
77712: LD_INT 1
77714: ARRAY
77715: PPUSH
77716: LD_EXP 57
77720: PUSH
77721: LD_VAR 0 2
77725: ARRAY
77726: PUSH
77727: LD_INT 1
77729: ARRAY
77730: PUSH
77731: LD_INT 2
77733: ARRAY
77734: PPUSH
77735: LD_EXP 57
77739: PUSH
77740: LD_VAR 0 2
77744: ARRAY
77745: PUSH
77746: LD_INT 1
77748: ARRAY
77749: PUSH
77750: LD_INT 3
77752: ARRAY
77753: PPUSH
77754: LD_EXP 57
77758: PUSH
77759: LD_VAR 0 2
77763: ARRAY
77764: PUSH
77765: LD_INT 1
77767: ARRAY
77768: PUSH
77769: LD_INT 4
77771: ARRAY
77772: PPUSH
77773: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
77777: LD_ADDR_VAR 0 4
77781: PUSH
77782: LD_EXP 57
77786: PUSH
77787: LD_VAR 0 2
77791: ARRAY
77792: PPUSH
77793: LD_INT 1
77795: PPUSH
77796: CALL_OW 3
77800: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
77801: LD_ADDR_EXP 57
77805: PUSH
77806: LD_EXP 57
77810: PPUSH
77811: LD_VAR 0 2
77815: PPUSH
77816: LD_VAR 0 4
77820: PPUSH
77821: CALL_OW 1
77825: ST_TO_ADDR
// break ;
77826: GO 77830
// end ; end ;
77828: GO 77459
77830: POP
77831: POP
// end ;
77832: GO 77391
77834: POP
77835: POP
// end ;
77836: LD_VAR 0 1
77840: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
77841: LD_INT 0
77843: PPUSH
77844: PPUSH
77845: PPUSH
// if not mc_bases then
77846: LD_EXP 36
77850: NOT
77851: IFFALSE 77855
// exit ;
77853: GO 77944
// for i = 1 to mc_bases do
77855: LD_ADDR_VAR 0 2
77859: PUSH
77860: DOUBLE
77861: LD_INT 1
77863: DEC
77864: ST_TO_ADDR
77865: LD_EXP 36
77869: PUSH
77870: FOR_TO
77871: IFFALSE 77942
// begin if mc_attack [ i ] then
77873: LD_EXP 56
77877: PUSH
77878: LD_VAR 0 2
77882: ARRAY
77883: IFFALSE 77940
// begin tmp := mc_attack [ i ] [ 1 ] ;
77885: LD_ADDR_VAR 0 3
77889: PUSH
77890: LD_EXP 56
77894: PUSH
77895: LD_VAR 0 2
77899: ARRAY
77900: PUSH
77901: LD_INT 1
77903: ARRAY
77904: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
77905: LD_ADDR_EXP 56
77909: PUSH
77910: LD_EXP 56
77914: PPUSH
77915: LD_VAR 0 2
77919: PPUSH
77920: EMPTY
77921: PPUSH
77922: CALL_OW 1
77926: ST_TO_ADDR
// Attack ( tmp ) ;
77927: LD_VAR 0 3
77931: PPUSH
77932: CALL 55153 0 1
// exit ;
77936: POP
77937: POP
77938: GO 77944
// end ; end ;
77940: GO 77870
77942: POP
77943: POP
// end ;
77944: LD_VAR 0 1
77948: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
77949: LD_INT 0
77951: PPUSH
77952: PPUSH
77953: PPUSH
77954: PPUSH
77955: PPUSH
77956: PPUSH
77957: PPUSH
// if not mc_bases then
77958: LD_EXP 36
77962: NOT
77963: IFFALSE 77967
// exit ;
77965: GO 78571
// for i = 1 to mc_bases do
77967: LD_ADDR_VAR 0 2
77971: PUSH
77972: DOUBLE
77973: LD_INT 1
77975: DEC
77976: ST_TO_ADDR
77977: LD_EXP 36
77981: PUSH
77982: FOR_TO
77983: IFFALSE 78569
// begin if not mc_bases [ i ] then
77985: LD_EXP 36
77989: PUSH
77990: LD_VAR 0 2
77994: ARRAY
77995: NOT
77996: IFFALSE 78000
// continue ;
77998: GO 77982
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
78000: LD_ADDR_VAR 0 7
78004: PUSH
78005: LD_EXP 36
78009: PUSH
78010: LD_VAR 0 2
78014: ARRAY
78015: PUSH
78016: LD_INT 1
78018: ARRAY
78019: PPUSH
78020: CALL 23604 0 1
78024: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
78025: LD_ADDR_EXP 59
78029: PUSH
78030: LD_EXP 59
78034: PPUSH
78035: LD_VAR 0 2
78039: PPUSH
78040: LD_EXP 36
78044: PUSH
78045: LD_VAR 0 2
78049: ARRAY
78050: PUSH
78051: LD_INT 1
78053: ARRAY
78054: PPUSH
78055: CALL_OW 255
78059: PPUSH
78060: LD_EXP 61
78064: PUSH
78065: LD_VAR 0 2
78069: ARRAY
78070: PPUSH
78071: CALL 21564 0 2
78075: PPUSH
78076: CALL_OW 1
78080: ST_TO_ADDR
// if not mc_scan [ i ] then
78081: LD_EXP 59
78085: PUSH
78086: LD_VAR 0 2
78090: ARRAY
78091: NOT
78092: IFFALSE 78247
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
78094: LD_ADDR_VAR 0 4
78098: PUSH
78099: LD_EXP 36
78103: PUSH
78104: LD_VAR 0 2
78108: ARRAY
78109: PPUSH
78110: LD_INT 2
78112: PUSH
78113: LD_INT 25
78115: PUSH
78116: LD_INT 5
78118: PUSH
78119: EMPTY
78120: LIST
78121: LIST
78122: PUSH
78123: LD_INT 25
78125: PUSH
78126: LD_INT 8
78128: PUSH
78129: EMPTY
78130: LIST
78131: LIST
78132: PUSH
78133: LD_INT 25
78135: PUSH
78136: LD_INT 9
78138: PUSH
78139: EMPTY
78140: LIST
78141: LIST
78142: PUSH
78143: EMPTY
78144: LIST
78145: LIST
78146: LIST
78147: LIST
78148: PPUSH
78149: CALL_OW 72
78153: ST_TO_ADDR
// if not tmp then
78154: LD_VAR 0 4
78158: NOT
78159: IFFALSE 78163
// continue ;
78161: GO 77982
// for j in tmp do
78163: LD_ADDR_VAR 0 3
78167: PUSH
78168: LD_VAR 0 4
78172: PUSH
78173: FOR_IN
78174: IFFALSE 78245
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
78176: LD_VAR 0 3
78180: PPUSH
78181: CALL_OW 310
78185: PPUSH
78186: CALL_OW 266
78190: PUSH
78191: LD_INT 5
78193: EQUAL
78194: PUSH
78195: LD_VAR 0 3
78199: PPUSH
78200: CALL_OW 257
78204: PUSH
78205: LD_INT 1
78207: EQUAL
78208: AND
78209: PUSH
78210: LD_VAR 0 3
78214: PPUSH
78215: CALL_OW 459
78219: NOT
78220: AND
78221: PUSH
78222: LD_VAR 0 7
78226: AND
78227: IFFALSE 78243
// ComChangeProfession ( j , class ) ;
78229: LD_VAR 0 3
78233: PPUSH
78234: LD_VAR 0 7
78238: PPUSH
78239: CALL_OW 123
78243: GO 78173
78245: POP
78246: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
78247: LD_EXP 59
78251: PUSH
78252: LD_VAR 0 2
78256: ARRAY
78257: PUSH
78258: LD_EXP 58
78262: PUSH
78263: LD_VAR 0 2
78267: ARRAY
78268: NOT
78269: AND
78270: PUSH
78271: LD_EXP 36
78275: PUSH
78276: LD_VAR 0 2
78280: ARRAY
78281: PPUSH
78282: LD_INT 30
78284: PUSH
78285: LD_INT 32
78287: PUSH
78288: EMPTY
78289: LIST
78290: LIST
78291: PPUSH
78292: CALL_OW 72
78296: NOT
78297: AND
78298: PUSH
78299: LD_EXP 36
78303: PUSH
78304: LD_VAR 0 2
78308: ARRAY
78309: PPUSH
78310: LD_INT 2
78312: PUSH
78313: LD_INT 30
78315: PUSH
78316: LD_INT 4
78318: PUSH
78319: EMPTY
78320: LIST
78321: LIST
78322: PUSH
78323: LD_INT 30
78325: PUSH
78326: LD_INT 5
78328: PUSH
78329: EMPTY
78330: LIST
78331: LIST
78332: PUSH
78333: EMPTY
78334: LIST
78335: LIST
78336: LIST
78337: PPUSH
78338: CALL_OW 72
78342: NOT
78343: AND
78344: IFFALSE 78476
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
78346: LD_ADDR_VAR 0 4
78350: PUSH
78351: LD_EXP 36
78355: PUSH
78356: LD_VAR 0 2
78360: ARRAY
78361: PPUSH
78362: LD_INT 2
78364: PUSH
78365: LD_INT 25
78367: PUSH
78368: LD_INT 1
78370: PUSH
78371: EMPTY
78372: LIST
78373: LIST
78374: PUSH
78375: LD_INT 25
78377: PUSH
78378: LD_INT 5
78380: PUSH
78381: EMPTY
78382: LIST
78383: LIST
78384: PUSH
78385: LD_INT 25
78387: PUSH
78388: LD_INT 8
78390: PUSH
78391: EMPTY
78392: LIST
78393: LIST
78394: PUSH
78395: LD_INT 25
78397: PUSH
78398: LD_INT 9
78400: PUSH
78401: EMPTY
78402: LIST
78403: LIST
78404: PUSH
78405: EMPTY
78406: LIST
78407: LIST
78408: LIST
78409: LIST
78410: LIST
78411: PPUSH
78412: CALL_OW 72
78416: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
78417: LD_ADDR_VAR 0 4
78421: PUSH
78422: LD_VAR 0 4
78426: PUSH
78427: LD_VAR 0 4
78431: PPUSH
78432: LD_INT 18
78434: PPUSH
78435: CALL 59936 0 2
78439: DIFF
78440: ST_TO_ADDR
// if tmp then
78441: LD_VAR 0 4
78445: IFFALSE 78476
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
78447: LD_VAR 0 2
78451: PPUSH
78452: LD_VAR 0 4
78456: PPUSH
78457: LD_EXP 61
78461: PUSH
78462: LD_VAR 0 2
78466: ARRAY
78467: PPUSH
78468: CALL 21599 0 3
// exit ;
78472: POP
78473: POP
78474: GO 78571
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
78476: LD_EXP 59
78480: PUSH
78481: LD_VAR 0 2
78485: ARRAY
78486: PUSH
78487: LD_EXP 58
78491: PUSH
78492: LD_VAR 0 2
78496: ARRAY
78497: AND
78498: IFFALSE 78567
// begin tmp := mc_defender [ i ] ;
78500: LD_ADDR_VAR 0 4
78504: PUSH
78505: LD_EXP 58
78509: PUSH
78510: LD_VAR 0 2
78514: ARRAY
78515: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
78516: LD_ADDR_EXP 58
78520: PUSH
78521: LD_EXP 58
78525: PPUSH
78526: LD_VAR 0 2
78530: PPUSH
78531: EMPTY
78532: PPUSH
78533: CALL_OW 1
78537: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
78538: LD_VAR 0 2
78542: PPUSH
78543: LD_VAR 0 4
78547: PPUSH
78548: LD_EXP 59
78552: PUSH
78553: LD_VAR 0 2
78557: ARRAY
78558: PPUSH
78559: CALL 22097 0 3
// exit ;
78563: POP
78564: POP
78565: GO 78571
// end ; end ;
78567: GO 77982
78569: POP
78570: POP
// end ;
78571: LD_VAR 0 1
78575: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
78576: LD_INT 0
78578: PPUSH
78579: PPUSH
78580: PPUSH
78581: PPUSH
78582: PPUSH
78583: PPUSH
78584: PPUSH
78585: PPUSH
78586: PPUSH
78587: PPUSH
78588: PPUSH
// if not mc_bases then
78589: LD_EXP 36
78593: NOT
78594: IFFALSE 78598
// exit ;
78596: GO 79685
// for i = 1 to mc_bases do
78598: LD_ADDR_VAR 0 2
78602: PUSH
78603: DOUBLE
78604: LD_INT 1
78606: DEC
78607: ST_TO_ADDR
78608: LD_EXP 36
78612: PUSH
78613: FOR_TO
78614: IFFALSE 79683
// begin tmp := mc_lab [ i ] ;
78616: LD_ADDR_VAR 0 6
78620: PUSH
78621: LD_EXP 69
78625: PUSH
78626: LD_VAR 0 2
78630: ARRAY
78631: ST_TO_ADDR
// if not tmp then
78632: LD_VAR 0 6
78636: NOT
78637: IFFALSE 78641
// continue ;
78639: GO 78613
// idle_lab := 0 ;
78641: LD_ADDR_VAR 0 11
78645: PUSH
78646: LD_INT 0
78648: ST_TO_ADDR
// for j in tmp do
78649: LD_ADDR_VAR 0 3
78653: PUSH
78654: LD_VAR 0 6
78658: PUSH
78659: FOR_IN
78660: IFFALSE 79679
// begin researching := false ;
78662: LD_ADDR_VAR 0 10
78666: PUSH
78667: LD_INT 0
78669: ST_TO_ADDR
// side := GetSide ( j ) ;
78670: LD_ADDR_VAR 0 4
78674: PUSH
78675: LD_VAR 0 3
78679: PPUSH
78680: CALL_OW 255
78684: ST_TO_ADDR
// if not mc_tech [ side ] then
78685: LD_EXP 63
78689: PUSH
78690: LD_VAR 0 4
78694: ARRAY
78695: NOT
78696: IFFALSE 78700
// continue ;
78698: GO 78659
// if BuildingStatus ( j ) = bs_idle then
78700: LD_VAR 0 3
78704: PPUSH
78705: CALL_OW 461
78709: PUSH
78710: LD_INT 2
78712: EQUAL
78713: IFFALSE 78901
// begin if idle_lab and UnitsInside ( j ) < 6 then
78715: LD_VAR 0 11
78719: PUSH
78720: LD_VAR 0 3
78724: PPUSH
78725: CALL_OW 313
78729: PUSH
78730: LD_INT 6
78732: LESS
78733: AND
78734: IFFALSE 78805
// begin tmp2 := UnitsInside ( idle_lab ) ;
78736: LD_ADDR_VAR 0 9
78740: PUSH
78741: LD_VAR 0 11
78745: PPUSH
78746: CALL_OW 313
78750: ST_TO_ADDR
// if tmp2 then
78751: LD_VAR 0 9
78755: IFFALSE 78797
// for x in tmp2 do
78757: LD_ADDR_VAR 0 7
78761: PUSH
78762: LD_VAR 0 9
78766: PUSH
78767: FOR_IN
78768: IFFALSE 78795
// begin ComExitBuilding ( x ) ;
78770: LD_VAR 0 7
78774: PPUSH
78775: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
78779: LD_VAR 0 7
78783: PPUSH
78784: LD_VAR 0 3
78788: PPUSH
78789: CALL_OW 180
// end ;
78793: GO 78767
78795: POP
78796: POP
// idle_lab := 0 ;
78797: LD_ADDR_VAR 0 11
78801: PUSH
78802: LD_INT 0
78804: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
78805: LD_ADDR_VAR 0 5
78809: PUSH
78810: LD_EXP 63
78814: PUSH
78815: LD_VAR 0 4
78819: ARRAY
78820: PUSH
78821: FOR_IN
78822: IFFALSE 78882
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
78824: LD_VAR 0 3
78828: PPUSH
78829: LD_VAR 0 5
78833: PPUSH
78834: CALL_OW 430
78838: PUSH
78839: LD_VAR 0 4
78843: PPUSH
78844: LD_VAR 0 5
78848: PPUSH
78849: CALL 20669 0 2
78853: AND
78854: IFFALSE 78880
// begin researching := true ;
78856: LD_ADDR_VAR 0 10
78860: PUSH
78861: LD_INT 1
78863: ST_TO_ADDR
// ComResearch ( j , t ) ;
78864: LD_VAR 0 3
78868: PPUSH
78869: LD_VAR 0 5
78873: PPUSH
78874: CALL_OW 124
// break ;
78878: GO 78882
// end ;
78880: GO 78821
78882: POP
78883: POP
// if not researching then
78884: LD_VAR 0 10
78888: NOT
78889: IFFALSE 78901
// idle_lab := j ;
78891: LD_ADDR_VAR 0 11
78895: PUSH
78896: LD_VAR 0 3
78900: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
78901: LD_VAR 0 3
78905: PPUSH
78906: CALL_OW 461
78910: PUSH
78911: LD_INT 10
78913: EQUAL
78914: IFFALSE 79502
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
78916: LD_EXP 65
78920: PUSH
78921: LD_VAR 0 2
78925: ARRAY
78926: NOT
78927: PUSH
78928: LD_EXP 66
78932: PUSH
78933: LD_VAR 0 2
78937: ARRAY
78938: NOT
78939: AND
78940: PUSH
78941: LD_EXP 63
78945: PUSH
78946: LD_VAR 0 4
78950: ARRAY
78951: PUSH
78952: LD_INT 1
78954: GREATER
78955: AND
78956: IFFALSE 79087
// begin ComCancel ( j ) ;
78958: LD_VAR 0 3
78962: PPUSH
78963: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
78967: LD_ADDR_EXP 63
78971: PUSH
78972: LD_EXP 63
78976: PPUSH
78977: LD_VAR 0 4
78981: PPUSH
78982: LD_EXP 63
78986: PUSH
78987: LD_VAR 0 4
78991: ARRAY
78992: PPUSH
78993: LD_EXP 63
78997: PUSH
78998: LD_VAR 0 4
79002: ARRAY
79003: PUSH
79004: LD_INT 1
79006: MINUS
79007: PPUSH
79008: LD_EXP 63
79012: PUSH
79013: LD_VAR 0 4
79017: ARRAY
79018: PPUSH
79019: LD_INT 0
79021: PPUSH
79022: CALL 26118 0 4
79026: PPUSH
79027: CALL_OW 1
79031: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
79032: LD_ADDR_EXP 63
79036: PUSH
79037: LD_EXP 63
79041: PPUSH
79042: LD_VAR 0 4
79046: PPUSH
79047: LD_EXP 63
79051: PUSH
79052: LD_VAR 0 4
79056: ARRAY
79057: PPUSH
79058: LD_EXP 63
79062: PUSH
79063: LD_VAR 0 4
79067: ARRAY
79068: PPUSH
79069: LD_INT 1
79071: PPUSH
79072: LD_INT 0
79074: PPUSH
79075: CALL 26118 0 4
79079: PPUSH
79080: CALL_OW 1
79084: ST_TO_ADDR
// continue ;
79085: GO 78659
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
79087: LD_EXP 65
79091: PUSH
79092: LD_VAR 0 2
79096: ARRAY
79097: PUSH
79098: LD_EXP 66
79102: PUSH
79103: LD_VAR 0 2
79107: ARRAY
79108: NOT
79109: AND
79110: IFFALSE 79237
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
79112: LD_ADDR_EXP 66
79116: PUSH
79117: LD_EXP 66
79121: PPUSH
79122: LD_VAR 0 2
79126: PUSH
79127: LD_EXP 66
79131: PUSH
79132: LD_VAR 0 2
79136: ARRAY
79137: PUSH
79138: LD_INT 1
79140: PLUS
79141: PUSH
79142: EMPTY
79143: LIST
79144: LIST
79145: PPUSH
79146: LD_EXP 65
79150: PUSH
79151: LD_VAR 0 2
79155: ARRAY
79156: PUSH
79157: LD_INT 1
79159: ARRAY
79160: PPUSH
79161: CALL 26700 0 3
79165: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
79166: LD_EXP 65
79170: PUSH
79171: LD_VAR 0 2
79175: ARRAY
79176: PUSH
79177: LD_INT 1
79179: ARRAY
79180: PPUSH
79181: LD_INT 112
79183: PPUSH
79184: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
79188: LD_ADDR_VAR 0 9
79192: PUSH
79193: LD_EXP 65
79197: PUSH
79198: LD_VAR 0 2
79202: ARRAY
79203: PPUSH
79204: LD_INT 1
79206: PPUSH
79207: CALL_OW 3
79211: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
79212: LD_ADDR_EXP 65
79216: PUSH
79217: LD_EXP 65
79221: PPUSH
79222: LD_VAR 0 2
79226: PPUSH
79227: LD_VAR 0 9
79231: PPUSH
79232: CALL_OW 1
79236: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
79237: LD_EXP 65
79241: PUSH
79242: LD_VAR 0 2
79246: ARRAY
79247: PUSH
79248: LD_EXP 66
79252: PUSH
79253: LD_VAR 0 2
79257: ARRAY
79258: AND
79259: PUSH
79260: LD_EXP 66
79264: PUSH
79265: LD_VAR 0 2
79269: ARRAY
79270: PUSH
79271: LD_INT 1
79273: ARRAY
79274: PPUSH
79275: CALL_OW 310
79279: NOT
79280: AND
79281: PUSH
79282: LD_VAR 0 3
79286: PPUSH
79287: CALL_OW 313
79291: PUSH
79292: LD_INT 6
79294: EQUAL
79295: AND
79296: IFFALSE 79352
// begin tmp2 := UnitsInside ( j ) ;
79298: LD_ADDR_VAR 0 9
79302: PUSH
79303: LD_VAR 0 3
79307: PPUSH
79308: CALL_OW 313
79312: ST_TO_ADDR
// if tmp2 = 6 then
79313: LD_VAR 0 9
79317: PUSH
79318: LD_INT 6
79320: EQUAL
79321: IFFALSE 79352
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
79323: LD_VAR 0 9
79327: PUSH
79328: LD_INT 1
79330: ARRAY
79331: PPUSH
79332: LD_INT 112
79334: PPUSH
79335: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
79339: LD_VAR 0 9
79343: PUSH
79344: LD_INT 1
79346: ARRAY
79347: PPUSH
79348: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
79352: LD_EXP 66
79356: PUSH
79357: LD_VAR 0 2
79361: ARRAY
79362: PUSH
79363: LD_EXP 66
79367: PUSH
79368: LD_VAR 0 2
79372: ARRAY
79373: PUSH
79374: LD_INT 1
79376: ARRAY
79377: PPUSH
79378: CALL_OW 314
79382: NOT
79383: AND
79384: PUSH
79385: LD_EXP 66
79389: PUSH
79390: LD_VAR 0 2
79394: ARRAY
79395: PUSH
79396: LD_INT 1
79398: ARRAY
79399: PPUSH
79400: CALL_OW 310
79404: NOT
79405: AND
79406: IFFALSE 79432
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
79408: LD_EXP 66
79412: PUSH
79413: LD_VAR 0 2
79417: ARRAY
79418: PUSH
79419: LD_INT 1
79421: ARRAY
79422: PPUSH
79423: LD_VAR 0 3
79427: PPUSH
79428: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
79432: LD_EXP 66
79436: PUSH
79437: LD_VAR 0 2
79441: ARRAY
79442: PUSH
79443: LD_INT 1
79445: ARRAY
79446: PPUSH
79447: CALL_OW 310
79451: PUSH
79452: LD_EXP 66
79456: PUSH
79457: LD_VAR 0 2
79461: ARRAY
79462: PUSH
79463: LD_INT 1
79465: ARRAY
79466: PPUSH
79467: CALL_OW 310
79471: PPUSH
79472: CALL_OW 461
79476: PUSH
79477: LD_INT 3
79479: NONEQUAL
79480: AND
79481: IFFALSE 79502
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
79483: LD_EXP 66
79487: PUSH
79488: LD_VAR 0 2
79492: ARRAY
79493: PUSH
79494: LD_INT 1
79496: ARRAY
79497: PPUSH
79498: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
79502: LD_VAR 0 3
79506: PPUSH
79507: CALL_OW 461
79511: PUSH
79512: LD_INT 6
79514: EQUAL
79515: PUSH
79516: LD_VAR 0 6
79520: PUSH
79521: LD_INT 1
79523: GREATER
79524: AND
79525: IFFALSE 79677
// begin sci := [ ] ;
79527: LD_ADDR_VAR 0 8
79531: PUSH
79532: EMPTY
79533: ST_TO_ADDR
// for x in ( tmp diff j ) do
79534: LD_ADDR_VAR 0 7
79538: PUSH
79539: LD_VAR 0 6
79543: PUSH
79544: LD_VAR 0 3
79548: DIFF
79549: PUSH
79550: FOR_IN
79551: IFFALSE 79603
// begin if sci = 6 then
79553: LD_VAR 0 8
79557: PUSH
79558: LD_INT 6
79560: EQUAL
79561: IFFALSE 79565
// break ;
79563: GO 79603
// if BuildingStatus ( x ) = bs_idle then
79565: LD_VAR 0 7
79569: PPUSH
79570: CALL_OW 461
79574: PUSH
79575: LD_INT 2
79577: EQUAL
79578: IFFALSE 79601
// sci := sci ^ UnitsInside ( x ) ;
79580: LD_ADDR_VAR 0 8
79584: PUSH
79585: LD_VAR 0 8
79589: PUSH
79590: LD_VAR 0 7
79594: PPUSH
79595: CALL_OW 313
79599: ADD
79600: ST_TO_ADDR
// end ;
79601: GO 79550
79603: POP
79604: POP
// if not sci then
79605: LD_VAR 0 8
79609: NOT
79610: IFFALSE 79614
// continue ;
79612: GO 78659
// for x in sci do
79614: LD_ADDR_VAR 0 7
79618: PUSH
79619: LD_VAR 0 8
79623: PUSH
79624: FOR_IN
79625: IFFALSE 79675
// if IsInUnit ( x ) and not HasTask ( x ) then
79627: LD_VAR 0 7
79631: PPUSH
79632: CALL_OW 310
79636: PUSH
79637: LD_VAR 0 7
79641: PPUSH
79642: CALL_OW 314
79646: NOT
79647: AND
79648: IFFALSE 79673
// begin ComExitBuilding ( x ) ;
79650: LD_VAR 0 7
79654: PPUSH
79655: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
79659: LD_VAR 0 7
79663: PPUSH
79664: LD_VAR 0 3
79668: PPUSH
79669: CALL_OW 180
// end ;
79673: GO 79624
79675: POP
79676: POP
// end ; end ;
79677: GO 78659
79679: POP
79680: POP
// end ;
79681: GO 78613
79683: POP
79684: POP
// end ;
79685: LD_VAR 0 1
79689: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
79690: LD_INT 0
79692: PPUSH
79693: PPUSH
// if not mc_bases then
79694: LD_EXP 36
79698: NOT
79699: IFFALSE 79703
// exit ;
79701: GO 79784
// for i = 1 to mc_bases do
79703: LD_ADDR_VAR 0 2
79707: PUSH
79708: DOUBLE
79709: LD_INT 1
79711: DEC
79712: ST_TO_ADDR
79713: LD_EXP 36
79717: PUSH
79718: FOR_TO
79719: IFFALSE 79782
// if mc_mines [ i ] and mc_miners [ i ] then
79721: LD_EXP 49
79725: PUSH
79726: LD_VAR 0 2
79730: ARRAY
79731: PUSH
79732: LD_EXP 50
79736: PUSH
79737: LD_VAR 0 2
79741: ARRAY
79742: AND
79743: IFFALSE 79780
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
79745: LD_EXP 50
79749: PUSH
79750: LD_VAR 0 2
79754: ARRAY
79755: PUSH
79756: LD_INT 1
79758: ARRAY
79759: PPUSH
79760: CALL_OW 255
79764: PPUSH
79765: LD_EXP 49
79769: PUSH
79770: LD_VAR 0 2
79774: ARRAY
79775: PPUSH
79776: CALL 23757 0 2
79780: GO 79718
79782: POP
79783: POP
// end ;
79784: LD_VAR 0 1
79788: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
79789: LD_INT 0
79791: PPUSH
79792: PPUSH
79793: PPUSH
79794: PPUSH
79795: PPUSH
79796: PPUSH
79797: PPUSH
79798: PPUSH
// if not mc_bases or not mc_parking then
79799: LD_EXP 36
79803: NOT
79804: PUSH
79805: LD_EXP 60
79809: NOT
79810: OR
79811: IFFALSE 79815
// exit ;
79813: GO 80527
// for i = 1 to mc_bases do
79815: LD_ADDR_VAR 0 2
79819: PUSH
79820: DOUBLE
79821: LD_INT 1
79823: DEC
79824: ST_TO_ADDR
79825: LD_EXP 36
79829: PUSH
79830: FOR_TO
79831: IFFALSE 80525
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
79833: LD_EXP 36
79837: PUSH
79838: LD_VAR 0 2
79842: ARRAY
79843: NOT
79844: PUSH
79845: LD_EXP 60
79849: PUSH
79850: LD_VAR 0 2
79854: ARRAY
79855: NOT
79856: OR
79857: IFFALSE 79861
// continue ;
79859: GO 79830
// if mc_scan [ i ] then
79861: LD_EXP 59
79865: PUSH
79866: LD_VAR 0 2
79870: ARRAY
79871: IFFALSE 79897
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
79873: LD_ADDR_EXP 48
79877: PUSH
79878: LD_EXP 48
79882: PPUSH
79883: LD_VAR 0 2
79887: PPUSH
79888: EMPTY
79889: PPUSH
79890: CALL_OW 1
79894: ST_TO_ADDR
// continue ;
79895: GO 79830
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
79897: LD_ADDR_VAR 0 5
79901: PUSH
79902: LD_EXP 36
79906: PUSH
79907: LD_VAR 0 2
79911: ARRAY
79912: PUSH
79913: LD_INT 1
79915: ARRAY
79916: PPUSH
79917: CALL_OW 255
79921: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
79922: LD_ADDR_VAR 0 6
79926: PUSH
79927: LD_EXP 36
79931: PUSH
79932: LD_VAR 0 2
79936: ARRAY
79937: PPUSH
79938: LD_INT 30
79940: PUSH
79941: LD_INT 3
79943: PUSH
79944: EMPTY
79945: LIST
79946: LIST
79947: PPUSH
79948: CALL_OW 72
79952: ST_TO_ADDR
// if not fac then
79953: LD_VAR 0 6
79957: NOT
79958: IFFALSE 80009
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
79960: LD_ADDR_VAR 0 6
79964: PUSH
79965: LD_EXP 36
79969: PUSH
79970: LD_VAR 0 2
79974: ARRAY
79975: PPUSH
79976: LD_INT 2
79978: PUSH
79979: LD_INT 30
79981: PUSH
79982: LD_INT 0
79984: PUSH
79985: EMPTY
79986: LIST
79987: LIST
79988: PUSH
79989: LD_INT 30
79991: PUSH
79992: LD_INT 1
79994: PUSH
79995: EMPTY
79996: LIST
79997: LIST
79998: PUSH
79999: EMPTY
80000: LIST
80001: LIST
80002: LIST
80003: PPUSH
80004: CALL_OW 72
80008: ST_TO_ADDR
// if not fac then
80009: LD_VAR 0 6
80013: NOT
80014: IFFALSE 80018
// continue ;
80016: GO 79830
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
80018: LD_ADDR_VAR 0 7
80022: PUSH
80023: LD_EXP 60
80027: PUSH
80028: LD_VAR 0 2
80032: ARRAY
80033: PPUSH
80034: LD_INT 22
80036: PUSH
80037: LD_VAR 0 5
80041: PUSH
80042: EMPTY
80043: LIST
80044: LIST
80045: PUSH
80046: LD_INT 21
80048: PUSH
80049: LD_INT 2
80051: PUSH
80052: EMPTY
80053: LIST
80054: LIST
80055: PUSH
80056: LD_INT 3
80058: PUSH
80059: LD_INT 24
80061: PUSH
80062: LD_INT 1000
80064: PUSH
80065: EMPTY
80066: LIST
80067: LIST
80068: PUSH
80069: EMPTY
80070: LIST
80071: LIST
80072: PUSH
80073: EMPTY
80074: LIST
80075: LIST
80076: LIST
80077: PPUSH
80078: CALL_OW 70
80082: PUSH
80083: LD_INT 22
80085: PUSH
80086: LD_VAR 0 5
80090: PUSH
80091: EMPTY
80092: LIST
80093: LIST
80094: PUSH
80095: LD_INT 91
80097: PUSH
80098: LD_VAR 0 6
80102: PUSH
80103: LD_INT 1
80105: ARRAY
80106: PUSH
80107: LD_INT 25
80109: PUSH
80110: EMPTY
80111: LIST
80112: LIST
80113: LIST
80114: PUSH
80115: LD_INT 21
80117: PUSH
80118: LD_INT 2
80120: PUSH
80121: EMPTY
80122: LIST
80123: LIST
80124: PUSH
80125: LD_INT 3
80127: PUSH
80128: LD_INT 24
80130: PUSH
80131: LD_INT 1000
80133: PUSH
80134: EMPTY
80135: LIST
80136: LIST
80137: PUSH
80138: EMPTY
80139: LIST
80140: LIST
80141: PUSH
80142: EMPTY
80143: LIST
80144: LIST
80145: LIST
80146: LIST
80147: PPUSH
80148: CALL_OW 69
80152: UNION
80153: ST_TO_ADDR
// if not vehs then
80154: LD_VAR 0 7
80158: NOT
80159: IFFALSE 80185
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
80161: LD_ADDR_EXP 48
80165: PUSH
80166: LD_EXP 48
80170: PPUSH
80171: LD_VAR 0 2
80175: PPUSH
80176: EMPTY
80177: PPUSH
80178: CALL_OW 1
80182: ST_TO_ADDR
// continue ;
80183: GO 79830
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
80185: LD_ADDR_VAR 0 8
80189: PUSH
80190: LD_EXP 36
80194: PUSH
80195: LD_VAR 0 2
80199: ARRAY
80200: PPUSH
80201: LD_INT 30
80203: PUSH
80204: LD_INT 3
80206: PUSH
80207: EMPTY
80208: LIST
80209: LIST
80210: PPUSH
80211: CALL_OW 72
80215: ST_TO_ADDR
// if tmp then
80216: LD_VAR 0 8
80220: IFFALSE 80323
// begin for j in tmp do
80222: LD_ADDR_VAR 0 3
80226: PUSH
80227: LD_VAR 0 8
80231: PUSH
80232: FOR_IN
80233: IFFALSE 80321
// for k in UnitsInside ( j ) do
80235: LD_ADDR_VAR 0 4
80239: PUSH
80240: LD_VAR 0 3
80244: PPUSH
80245: CALL_OW 313
80249: PUSH
80250: FOR_IN
80251: IFFALSE 80317
// if k then
80253: LD_VAR 0 4
80257: IFFALSE 80315
// if not k in mc_repair_vehicle [ i ] then
80259: LD_VAR 0 4
80263: PUSH
80264: LD_EXP 48
80268: PUSH
80269: LD_VAR 0 2
80273: ARRAY
80274: IN
80275: NOT
80276: IFFALSE 80315
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
80278: LD_ADDR_EXP 48
80282: PUSH
80283: LD_EXP 48
80287: PPUSH
80288: LD_VAR 0 2
80292: PPUSH
80293: LD_EXP 48
80297: PUSH
80298: LD_VAR 0 2
80302: ARRAY
80303: PUSH
80304: LD_VAR 0 4
80308: UNION
80309: PPUSH
80310: CALL_OW 1
80314: ST_TO_ADDR
80315: GO 80250
80317: POP
80318: POP
80319: GO 80232
80321: POP
80322: POP
// end ; if not mc_repair_vehicle [ i ] then
80323: LD_EXP 48
80327: PUSH
80328: LD_VAR 0 2
80332: ARRAY
80333: NOT
80334: IFFALSE 80338
// continue ;
80336: GO 79830
// for j in mc_repair_vehicle [ i ] do
80338: LD_ADDR_VAR 0 3
80342: PUSH
80343: LD_EXP 48
80347: PUSH
80348: LD_VAR 0 2
80352: ARRAY
80353: PUSH
80354: FOR_IN
80355: IFFALSE 80521
// begin if GetClass ( j ) <> 3 then
80357: LD_VAR 0 3
80361: PPUSH
80362: CALL_OW 257
80366: PUSH
80367: LD_INT 3
80369: NONEQUAL
80370: IFFALSE 80411
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
80372: LD_ADDR_EXP 48
80376: PUSH
80377: LD_EXP 48
80381: PPUSH
80382: LD_VAR 0 2
80386: PPUSH
80387: LD_EXP 48
80391: PUSH
80392: LD_VAR 0 2
80396: ARRAY
80397: PUSH
80398: LD_VAR 0 3
80402: DIFF
80403: PPUSH
80404: CALL_OW 1
80408: ST_TO_ADDR
// continue ;
80409: GO 80354
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
80411: LD_VAR 0 3
80415: PPUSH
80416: CALL_OW 311
80420: NOT
80421: PUSH
80422: LD_VAR 0 3
80426: PUSH
80427: LD_EXP 39
80431: PUSH
80432: LD_VAR 0 2
80436: ARRAY
80437: PUSH
80438: LD_INT 1
80440: ARRAY
80441: IN
80442: NOT
80443: AND
80444: PUSH
80445: LD_VAR 0 3
80449: PUSH
80450: LD_EXP 39
80454: PUSH
80455: LD_VAR 0 2
80459: ARRAY
80460: PUSH
80461: LD_INT 2
80463: ARRAY
80464: IN
80465: NOT
80466: AND
80467: IFFALSE 80519
// begin if IsInUnit ( j ) then
80469: LD_VAR 0 3
80473: PPUSH
80474: CALL_OW 310
80478: IFFALSE 80489
// ComExitBuilding ( j ) ;
80480: LD_VAR 0 3
80484: PPUSH
80485: CALL_OW 122
// if not HasTask ( j ) then
80489: LD_VAR 0 3
80493: PPUSH
80494: CALL_OW 314
80498: NOT
80499: IFFALSE 80519
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
80501: LD_VAR 0 3
80505: PPUSH
80506: LD_VAR 0 7
80510: PUSH
80511: LD_INT 1
80513: ARRAY
80514: PPUSH
80515: CALL_OW 189
// end ; end ;
80519: GO 80354
80521: POP
80522: POP
// end ;
80523: GO 79830
80525: POP
80526: POP
// end ;
80527: LD_VAR 0 1
80531: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
80532: LD_INT 0
80534: PPUSH
80535: PPUSH
80536: PPUSH
80537: PPUSH
80538: PPUSH
80539: PPUSH
80540: PPUSH
80541: PPUSH
80542: PPUSH
80543: PPUSH
80544: PPUSH
// if not mc_bases then
80545: LD_EXP 36
80549: NOT
80550: IFFALSE 80554
// exit ;
80552: GO 81356
// for i = 1 to mc_bases do
80554: LD_ADDR_VAR 0 2
80558: PUSH
80559: DOUBLE
80560: LD_INT 1
80562: DEC
80563: ST_TO_ADDR
80564: LD_EXP 36
80568: PUSH
80569: FOR_TO
80570: IFFALSE 81354
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
80572: LD_EXP 64
80576: PUSH
80577: LD_VAR 0 2
80581: ARRAY
80582: NOT
80583: PUSH
80584: LD_EXP 39
80588: PUSH
80589: LD_VAR 0 2
80593: ARRAY
80594: PUSH
80595: LD_INT 1
80597: ARRAY
80598: OR
80599: PUSH
80600: LD_EXP 39
80604: PUSH
80605: LD_VAR 0 2
80609: ARRAY
80610: PUSH
80611: LD_INT 2
80613: ARRAY
80614: OR
80615: PUSH
80616: LD_EXP 62
80620: PUSH
80621: LD_VAR 0 2
80625: ARRAY
80626: PPUSH
80627: LD_INT 1
80629: PPUSH
80630: CALL_OW 325
80634: NOT
80635: OR
80636: PUSH
80637: LD_EXP 59
80641: PUSH
80642: LD_VAR 0 2
80646: ARRAY
80647: OR
80648: IFFALSE 80652
// continue ;
80650: GO 80569
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
80652: LD_ADDR_VAR 0 8
80656: PUSH
80657: LD_EXP 36
80661: PUSH
80662: LD_VAR 0 2
80666: ARRAY
80667: PPUSH
80668: LD_INT 25
80670: PUSH
80671: LD_INT 4
80673: PUSH
80674: EMPTY
80675: LIST
80676: LIST
80677: PUSH
80678: LD_INT 50
80680: PUSH
80681: EMPTY
80682: LIST
80683: PUSH
80684: LD_INT 3
80686: PUSH
80687: LD_INT 60
80689: PUSH
80690: EMPTY
80691: LIST
80692: PUSH
80693: EMPTY
80694: LIST
80695: LIST
80696: PUSH
80697: EMPTY
80698: LIST
80699: LIST
80700: LIST
80701: PPUSH
80702: CALL_OW 72
80706: PUSH
80707: LD_EXP 40
80711: PUSH
80712: LD_VAR 0 2
80716: ARRAY
80717: DIFF
80718: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
80719: LD_ADDR_VAR 0 9
80723: PUSH
80724: LD_EXP 36
80728: PUSH
80729: LD_VAR 0 2
80733: ARRAY
80734: PPUSH
80735: LD_INT 2
80737: PUSH
80738: LD_INT 30
80740: PUSH
80741: LD_INT 0
80743: PUSH
80744: EMPTY
80745: LIST
80746: LIST
80747: PUSH
80748: LD_INT 30
80750: PUSH
80751: LD_INT 1
80753: PUSH
80754: EMPTY
80755: LIST
80756: LIST
80757: PUSH
80758: EMPTY
80759: LIST
80760: LIST
80761: LIST
80762: PPUSH
80763: CALL_OW 72
80767: ST_TO_ADDR
// if not tmp or not dep then
80768: LD_VAR 0 8
80772: NOT
80773: PUSH
80774: LD_VAR 0 9
80778: NOT
80779: OR
80780: IFFALSE 80784
// continue ;
80782: GO 80569
// side := GetSide ( tmp [ 1 ] ) ;
80784: LD_ADDR_VAR 0 11
80788: PUSH
80789: LD_VAR 0 8
80793: PUSH
80794: LD_INT 1
80796: ARRAY
80797: PPUSH
80798: CALL_OW 255
80802: ST_TO_ADDR
// dep := dep [ 1 ] ;
80803: LD_ADDR_VAR 0 9
80807: PUSH
80808: LD_VAR 0 9
80812: PUSH
80813: LD_INT 1
80815: ARRAY
80816: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
80817: LD_ADDR_VAR 0 7
80821: PUSH
80822: LD_EXP 64
80826: PUSH
80827: LD_VAR 0 2
80831: ARRAY
80832: PPUSH
80833: LD_INT 22
80835: PUSH
80836: LD_INT 0
80838: PUSH
80839: EMPTY
80840: LIST
80841: LIST
80842: PUSH
80843: LD_INT 25
80845: PUSH
80846: LD_INT 12
80848: PUSH
80849: EMPTY
80850: LIST
80851: LIST
80852: PUSH
80853: EMPTY
80854: LIST
80855: LIST
80856: PPUSH
80857: CALL_OW 70
80861: PUSH
80862: LD_INT 22
80864: PUSH
80865: LD_INT 0
80867: PUSH
80868: EMPTY
80869: LIST
80870: LIST
80871: PUSH
80872: LD_INT 25
80874: PUSH
80875: LD_INT 12
80877: PUSH
80878: EMPTY
80879: LIST
80880: LIST
80881: PUSH
80882: LD_INT 91
80884: PUSH
80885: LD_VAR 0 9
80889: PUSH
80890: LD_INT 20
80892: PUSH
80893: EMPTY
80894: LIST
80895: LIST
80896: LIST
80897: PUSH
80898: EMPTY
80899: LIST
80900: LIST
80901: LIST
80902: PPUSH
80903: CALL_OW 69
80907: UNION
80908: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
80909: LD_ADDR_VAR 0 10
80913: PUSH
80914: LD_EXP 64
80918: PUSH
80919: LD_VAR 0 2
80923: ARRAY
80924: PPUSH
80925: LD_INT 81
80927: PUSH
80928: LD_VAR 0 11
80932: PUSH
80933: EMPTY
80934: LIST
80935: LIST
80936: PPUSH
80937: CALL_OW 70
80941: ST_TO_ADDR
// if not apes or danger_at_area then
80942: LD_VAR 0 7
80946: NOT
80947: PUSH
80948: LD_VAR 0 10
80952: OR
80953: IFFALSE 81003
// begin if mc_taming [ i ] then
80955: LD_EXP 67
80959: PUSH
80960: LD_VAR 0 2
80964: ARRAY
80965: IFFALSE 81001
// begin MC_Reset ( i , 121 ) ;
80967: LD_VAR 0 2
80971: PPUSH
80972: LD_INT 121
80974: PPUSH
80975: CALL 66638 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
80979: LD_ADDR_EXP 67
80983: PUSH
80984: LD_EXP 67
80988: PPUSH
80989: LD_VAR 0 2
80993: PPUSH
80994: EMPTY
80995: PPUSH
80996: CALL_OW 1
81000: ST_TO_ADDR
// end ; continue ;
81001: GO 80569
// end ; for j in tmp do
81003: LD_ADDR_VAR 0 3
81007: PUSH
81008: LD_VAR 0 8
81012: PUSH
81013: FOR_IN
81014: IFFALSE 81350
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
81016: LD_VAR 0 3
81020: PUSH
81021: LD_EXP 67
81025: PUSH
81026: LD_VAR 0 2
81030: ARRAY
81031: IN
81032: NOT
81033: PUSH
81034: LD_EXP 67
81038: PUSH
81039: LD_VAR 0 2
81043: ARRAY
81044: PUSH
81045: LD_INT 3
81047: LESS
81048: AND
81049: IFFALSE 81107
// begin SetTag ( j , 121 ) ;
81051: LD_VAR 0 3
81055: PPUSH
81056: LD_INT 121
81058: PPUSH
81059: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
81063: LD_ADDR_EXP 67
81067: PUSH
81068: LD_EXP 67
81072: PPUSH
81073: LD_VAR 0 2
81077: PUSH
81078: LD_EXP 67
81082: PUSH
81083: LD_VAR 0 2
81087: ARRAY
81088: PUSH
81089: LD_INT 1
81091: PLUS
81092: PUSH
81093: EMPTY
81094: LIST
81095: LIST
81096: PPUSH
81097: LD_VAR 0 3
81101: PPUSH
81102: CALL 26700 0 3
81106: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
81107: LD_VAR 0 3
81111: PUSH
81112: LD_EXP 67
81116: PUSH
81117: LD_VAR 0 2
81121: ARRAY
81122: IN
81123: IFFALSE 81348
// begin if GetClass ( j ) <> 4 then
81125: LD_VAR 0 3
81129: PPUSH
81130: CALL_OW 257
81134: PUSH
81135: LD_INT 4
81137: NONEQUAL
81138: IFFALSE 81191
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
81140: LD_ADDR_EXP 67
81144: PUSH
81145: LD_EXP 67
81149: PPUSH
81150: LD_VAR 0 2
81154: PPUSH
81155: LD_EXP 67
81159: PUSH
81160: LD_VAR 0 2
81164: ARRAY
81165: PUSH
81166: LD_VAR 0 3
81170: DIFF
81171: PPUSH
81172: CALL_OW 1
81176: ST_TO_ADDR
// SetTag ( j , 0 ) ;
81177: LD_VAR 0 3
81181: PPUSH
81182: LD_INT 0
81184: PPUSH
81185: CALL_OW 109
// continue ;
81189: GO 81013
// end ; if IsInUnit ( j ) then
81191: LD_VAR 0 3
81195: PPUSH
81196: CALL_OW 310
81200: IFFALSE 81211
// ComExitBuilding ( j ) ;
81202: LD_VAR 0 3
81206: PPUSH
81207: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
81211: LD_ADDR_VAR 0 6
81215: PUSH
81216: LD_VAR 0 7
81220: PPUSH
81221: LD_VAR 0 3
81225: PPUSH
81226: CALL_OW 74
81230: ST_TO_ADDR
// if not ape then
81231: LD_VAR 0 6
81235: NOT
81236: IFFALSE 81240
// break ;
81238: GO 81350
// x := GetX ( ape ) ;
81240: LD_ADDR_VAR 0 4
81244: PUSH
81245: LD_VAR 0 6
81249: PPUSH
81250: CALL_OW 250
81254: ST_TO_ADDR
// y := GetY ( ape ) ;
81255: LD_ADDR_VAR 0 5
81259: PUSH
81260: LD_VAR 0 6
81264: PPUSH
81265: CALL_OW 251
81269: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
81270: LD_VAR 0 4
81274: PPUSH
81275: LD_VAR 0 5
81279: PPUSH
81280: CALL_OW 488
81284: NOT
81285: PUSH
81286: LD_VAR 0 11
81290: PPUSH
81291: LD_VAR 0 4
81295: PPUSH
81296: LD_VAR 0 5
81300: PPUSH
81301: LD_INT 20
81303: PPUSH
81304: CALL 27596 0 4
81308: PUSH
81309: LD_INT 4
81311: ARRAY
81312: OR
81313: IFFALSE 81317
// break ;
81315: GO 81350
// if not HasTask ( j ) then
81317: LD_VAR 0 3
81321: PPUSH
81322: CALL_OW 314
81326: NOT
81327: IFFALSE 81348
// ComTameXY ( j , x , y ) ;
81329: LD_VAR 0 3
81333: PPUSH
81334: LD_VAR 0 4
81338: PPUSH
81339: LD_VAR 0 5
81343: PPUSH
81344: CALL_OW 131
// end ; end ;
81348: GO 81013
81350: POP
81351: POP
// end ;
81352: GO 80569
81354: POP
81355: POP
// end ;
81356: LD_VAR 0 1
81360: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
81361: LD_INT 0
81363: PPUSH
81364: PPUSH
81365: PPUSH
81366: PPUSH
81367: PPUSH
81368: PPUSH
81369: PPUSH
81370: PPUSH
// if not mc_bases then
81371: LD_EXP 36
81375: NOT
81376: IFFALSE 81380
// exit ;
81378: GO 82006
// for i = 1 to mc_bases do
81380: LD_ADDR_VAR 0 2
81384: PUSH
81385: DOUBLE
81386: LD_INT 1
81388: DEC
81389: ST_TO_ADDR
81390: LD_EXP 36
81394: PUSH
81395: FOR_TO
81396: IFFALSE 82004
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
81398: LD_EXP 65
81402: PUSH
81403: LD_VAR 0 2
81407: ARRAY
81408: NOT
81409: PUSH
81410: LD_EXP 65
81414: PUSH
81415: LD_VAR 0 2
81419: ARRAY
81420: PPUSH
81421: LD_INT 25
81423: PUSH
81424: LD_INT 12
81426: PUSH
81427: EMPTY
81428: LIST
81429: LIST
81430: PPUSH
81431: CALL_OW 72
81435: NOT
81436: OR
81437: IFFALSE 81441
// continue ;
81439: GO 81395
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
81441: LD_ADDR_VAR 0 5
81445: PUSH
81446: LD_EXP 65
81450: PUSH
81451: LD_VAR 0 2
81455: ARRAY
81456: PUSH
81457: LD_INT 1
81459: ARRAY
81460: PPUSH
81461: CALL_OW 255
81465: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
81466: LD_VAR 0 5
81470: PPUSH
81471: LD_INT 2
81473: PPUSH
81474: CALL_OW 325
81478: IFFALSE 81731
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
81480: LD_ADDR_VAR 0 4
81484: PUSH
81485: LD_EXP 65
81489: PUSH
81490: LD_VAR 0 2
81494: ARRAY
81495: PPUSH
81496: LD_INT 25
81498: PUSH
81499: LD_INT 16
81501: PUSH
81502: EMPTY
81503: LIST
81504: LIST
81505: PPUSH
81506: CALL_OW 72
81510: ST_TO_ADDR
// if tmp < 6 then
81511: LD_VAR 0 4
81515: PUSH
81516: LD_INT 6
81518: LESS
81519: IFFALSE 81731
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
81521: LD_ADDR_VAR 0 6
81525: PUSH
81526: LD_EXP 36
81530: PUSH
81531: LD_VAR 0 2
81535: ARRAY
81536: PPUSH
81537: LD_INT 2
81539: PUSH
81540: LD_INT 30
81542: PUSH
81543: LD_INT 0
81545: PUSH
81546: EMPTY
81547: LIST
81548: LIST
81549: PUSH
81550: LD_INT 30
81552: PUSH
81553: LD_INT 1
81555: PUSH
81556: EMPTY
81557: LIST
81558: LIST
81559: PUSH
81560: EMPTY
81561: LIST
81562: LIST
81563: LIST
81564: PPUSH
81565: CALL_OW 72
81569: ST_TO_ADDR
// if depot then
81570: LD_VAR 0 6
81574: IFFALSE 81731
// begin selected := 0 ;
81576: LD_ADDR_VAR 0 7
81580: PUSH
81581: LD_INT 0
81583: ST_TO_ADDR
// for j in depot do
81584: LD_ADDR_VAR 0 3
81588: PUSH
81589: LD_VAR 0 6
81593: PUSH
81594: FOR_IN
81595: IFFALSE 81626
// begin if UnitsInside ( j ) < 6 then
81597: LD_VAR 0 3
81601: PPUSH
81602: CALL_OW 313
81606: PUSH
81607: LD_INT 6
81609: LESS
81610: IFFALSE 81624
// begin selected := j ;
81612: LD_ADDR_VAR 0 7
81616: PUSH
81617: LD_VAR 0 3
81621: ST_TO_ADDR
// break ;
81622: GO 81626
// end ; end ;
81624: GO 81594
81626: POP
81627: POP
// if selected then
81628: LD_VAR 0 7
81632: IFFALSE 81731
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
81634: LD_ADDR_VAR 0 3
81638: PUSH
81639: LD_EXP 65
81643: PUSH
81644: LD_VAR 0 2
81648: ARRAY
81649: PPUSH
81650: LD_INT 25
81652: PUSH
81653: LD_INT 12
81655: PUSH
81656: EMPTY
81657: LIST
81658: LIST
81659: PPUSH
81660: CALL_OW 72
81664: PUSH
81665: FOR_IN
81666: IFFALSE 81729
// if not HasTask ( j ) then
81668: LD_VAR 0 3
81672: PPUSH
81673: CALL_OW 314
81677: NOT
81678: IFFALSE 81727
// begin if not IsInUnit ( j ) then
81680: LD_VAR 0 3
81684: PPUSH
81685: CALL_OW 310
81689: NOT
81690: IFFALSE 81706
// ComEnterUnit ( j , selected ) ;
81692: LD_VAR 0 3
81696: PPUSH
81697: LD_VAR 0 7
81701: PPUSH
81702: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
81706: LD_VAR 0 3
81710: PPUSH
81711: LD_INT 16
81713: PPUSH
81714: CALL_OW 183
// AddComExitBuilding ( j ) ;
81718: LD_VAR 0 3
81722: PPUSH
81723: CALL_OW 182
// end ;
81727: GO 81665
81729: POP
81730: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
81731: LD_VAR 0 5
81735: PPUSH
81736: LD_INT 11
81738: PPUSH
81739: CALL_OW 325
81743: IFFALSE 82002
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
81745: LD_ADDR_VAR 0 4
81749: PUSH
81750: LD_EXP 65
81754: PUSH
81755: LD_VAR 0 2
81759: ARRAY
81760: PPUSH
81761: LD_INT 25
81763: PUSH
81764: LD_INT 16
81766: PUSH
81767: EMPTY
81768: LIST
81769: LIST
81770: PPUSH
81771: CALL_OW 72
81775: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
81776: LD_VAR 0 4
81780: PUSH
81781: LD_INT 6
81783: GREATEREQUAL
81784: PUSH
81785: LD_VAR 0 5
81789: PPUSH
81790: LD_INT 2
81792: PPUSH
81793: CALL_OW 325
81797: NOT
81798: OR
81799: IFFALSE 82002
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
81801: LD_ADDR_VAR 0 8
81805: PUSH
81806: LD_EXP 36
81810: PUSH
81811: LD_VAR 0 2
81815: ARRAY
81816: PPUSH
81817: LD_INT 2
81819: PUSH
81820: LD_INT 30
81822: PUSH
81823: LD_INT 4
81825: PUSH
81826: EMPTY
81827: LIST
81828: LIST
81829: PUSH
81830: LD_INT 30
81832: PUSH
81833: LD_INT 5
81835: PUSH
81836: EMPTY
81837: LIST
81838: LIST
81839: PUSH
81840: EMPTY
81841: LIST
81842: LIST
81843: LIST
81844: PPUSH
81845: CALL_OW 72
81849: ST_TO_ADDR
// if barracks then
81850: LD_VAR 0 8
81854: IFFALSE 82002
// begin selected := 0 ;
81856: LD_ADDR_VAR 0 7
81860: PUSH
81861: LD_INT 0
81863: ST_TO_ADDR
// for j in barracks do
81864: LD_ADDR_VAR 0 3
81868: PUSH
81869: LD_VAR 0 8
81873: PUSH
81874: FOR_IN
81875: IFFALSE 81906
// begin if UnitsInside ( j ) < 6 then
81877: LD_VAR 0 3
81881: PPUSH
81882: CALL_OW 313
81886: PUSH
81887: LD_INT 6
81889: LESS
81890: IFFALSE 81904
// begin selected := j ;
81892: LD_ADDR_VAR 0 7
81896: PUSH
81897: LD_VAR 0 3
81901: ST_TO_ADDR
// break ;
81902: GO 81906
// end ; end ;
81904: GO 81874
81906: POP
81907: POP
// if selected then
81908: LD_VAR 0 7
81912: IFFALSE 82002
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
81914: LD_ADDR_VAR 0 3
81918: PUSH
81919: LD_EXP 65
81923: PUSH
81924: LD_VAR 0 2
81928: ARRAY
81929: PPUSH
81930: LD_INT 25
81932: PUSH
81933: LD_INT 12
81935: PUSH
81936: EMPTY
81937: LIST
81938: LIST
81939: PPUSH
81940: CALL_OW 72
81944: PUSH
81945: FOR_IN
81946: IFFALSE 82000
// if not IsInUnit ( j ) and not HasTask ( j ) then
81948: LD_VAR 0 3
81952: PPUSH
81953: CALL_OW 310
81957: NOT
81958: PUSH
81959: LD_VAR 0 3
81963: PPUSH
81964: CALL_OW 314
81968: NOT
81969: AND
81970: IFFALSE 81998
// begin ComEnterUnit ( j , selected ) ;
81972: LD_VAR 0 3
81976: PPUSH
81977: LD_VAR 0 7
81981: PPUSH
81982: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
81986: LD_VAR 0 3
81990: PPUSH
81991: LD_INT 15
81993: PPUSH
81994: CALL_OW 183
// end ;
81998: GO 81945
82000: POP
82001: POP
// end ; end ; end ; end ; end ;
82002: GO 81395
82004: POP
82005: POP
// end ;
82006: LD_VAR 0 1
82010: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
82011: LD_INT 0
82013: PPUSH
82014: PPUSH
82015: PPUSH
82016: PPUSH
// if not mc_bases then
82017: LD_EXP 36
82021: NOT
82022: IFFALSE 82026
// exit ;
82024: GO 82204
// for i = 1 to mc_bases do
82026: LD_ADDR_VAR 0 2
82030: PUSH
82031: DOUBLE
82032: LD_INT 1
82034: DEC
82035: ST_TO_ADDR
82036: LD_EXP 36
82040: PUSH
82041: FOR_TO
82042: IFFALSE 82202
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
82044: LD_ADDR_VAR 0 4
82048: PUSH
82049: LD_EXP 36
82053: PUSH
82054: LD_VAR 0 2
82058: ARRAY
82059: PPUSH
82060: LD_INT 25
82062: PUSH
82063: LD_INT 9
82065: PUSH
82066: EMPTY
82067: LIST
82068: LIST
82069: PPUSH
82070: CALL_OW 72
82074: ST_TO_ADDR
// if not tmp then
82075: LD_VAR 0 4
82079: NOT
82080: IFFALSE 82084
// continue ;
82082: GO 82041
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
82084: LD_EXP 62
82088: PUSH
82089: LD_VAR 0 2
82093: ARRAY
82094: PPUSH
82095: LD_INT 29
82097: PPUSH
82098: CALL_OW 325
82102: NOT
82103: PUSH
82104: LD_EXP 62
82108: PUSH
82109: LD_VAR 0 2
82113: ARRAY
82114: PPUSH
82115: LD_INT 28
82117: PPUSH
82118: CALL_OW 325
82122: NOT
82123: AND
82124: IFFALSE 82128
// continue ;
82126: GO 82041
// for j in tmp do
82128: LD_ADDR_VAR 0 3
82132: PUSH
82133: LD_VAR 0 4
82137: PUSH
82138: FOR_IN
82139: IFFALSE 82198
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
82141: LD_VAR 0 3
82145: PUSH
82146: LD_EXP 39
82150: PUSH
82151: LD_VAR 0 2
82155: ARRAY
82156: PUSH
82157: LD_INT 1
82159: ARRAY
82160: IN
82161: NOT
82162: PUSH
82163: LD_VAR 0 3
82167: PUSH
82168: LD_EXP 39
82172: PUSH
82173: LD_VAR 0 2
82177: ARRAY
82178: PUSH
82179: LD_INT 2
82181: ARRAY
82182: IN
82183: NOT
82184: AND
82185: IFFALSE 82196
// ComSpaceTimeShoot ( j ) ;
82187: LD_VAR 0 3
82191: PPUSH
82192: CALL 20760 0 1
82196: GO 82138
82198: POP
82199: POP
// end ;
82200: GO 82041
82202: POP
82203: POP
// end ;
82204: LD_VAR 0 1
82208: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
82209: LD_INT 0
82211: PPUSH
82212: PPUSH
82213: PPUSH
82214: PPUSH
82215: PPUSH
82216: PPUSH
82217: PPUSH
82218: PPUSH
82219: PPUSH
// if not mc_bases then
82220: LD_EXP 36
82224: NOT
82225: IFFALSE 82229
// exit ;
82227: GO 82851
// for i = 1 to mc_bases do
82229: LD_ADDR_VAR 0 2
82233: PUSH
82234: DOUBLE
82235: LD_INT 1
82237: DEC
82238: ST_TO_ADDR
82239: LD_EXP 36
82243: PUSH
82244: FOR_TO
82245: IFFALSE 82849
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
82247: LD_EXP 71
82251: PUSH
82252: LD_VAR 0 2
82256: ARRAY
82257: NOT
82258: PUSH
82259: LD_INT 38
82261: PPUSH
82262: LD_EXP 62
82266: PUSH
82267: LD_VAR 0 2
82271: ARRAY
82272: PPUSH
82273: CALL_OW 321
82277: PUSH
82278: LD_INT 2
82280: NONEQUAL
82281: OR
82282: IFFALSE 82286
// continue ;
82284: GO 82244
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
82286: LD_ADDR_VAR 0 8
82290: PUSH
82291: LD_EXP 36
82295: PUSH
82296: LD_VAR 0 2
82300: ARRAY
82301: PPUSH
82302: LD_INT 30
82304: PUSH
82305: LD_INT 34
82307: PUSH
82308: EMPTY
82309: LIST
82310: LIST
82311: PPUSH
82312: CALL_OW 72
82316: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
82317: LD_ADDR_VAR 0 9
82321: PUSH
82322: LD_EXP 36
82326: PUSH
82327: LD_VAR 0 2
82331: ARRAY
82332: PPUSH
82333: LD_INT 25
82335: PUSH
82336: LD_INT 4
82338: PUSH
82339: EMPTY
82340: LIST
82341: LIST
82342: PPUSH
82343: CALL_OW 72
82347: PPUSH
82348: LD_INT 0
82350: PPUSH
82351: CALL 59936 0 2
82355: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
82356: LD_VAR 0 9
82360: NOT
82361: PUSH
82362: LD_VAR 0 8
82366: NOT
82367: OR
82368: PUSH
82369: LD_EXP 36
82373: PUSH
82374: LD_VAR 0 2
82378: ARRAY
82379: PPUSH
82380: LD_INT 124
82382: PPUSH
82383: CALL 59936 0 2
82387: OR
82388: IFFALSE 82392
// continue ;
82390: GO 82244
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
82392: LD_EXP 72
82396: PUSH
82397: LD_VAR 0 2
82401: ARRAY
82402: PUSH
82403: LD_EXP 71
82407: PUSH
82408: LD_VAR 0 2
82412: ARRAY
82413: LESS
82414: PUSH
82415: LD_EXP 72
82419: PUSH
82420: LD_VAR 0 2
82424: ARRAY
82425: PUSH
82426: LD_VAR 0 8
82430: LESS
82431: AND
82432: IFFALSE 82847
// begin tmp := sci [ 1 ] ;
82434: LD_ADDR_VAR 0 7
82438: PUSH
82439: LD_VAR 0 9
82443: PUSH
82444: LD_INT 1
82446: ARRAY
82447: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
82448: LD_VAR 0 7
82452: PPUSH
82453: LD_INT 124
82455: PPUSH
82456: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
82460: LD_ADDR_VAR 0 3
82464: PUSH
82465: DOUBLE
82466: LD_EXP 71
82470: PUSH
82471: LD_VAR 0 2
82475: ARRAY
82476: INC
82477: ST_TO_ADDR
82478: LD_EXP 71
82482: PUSH
82483: LD_VAR 0 2
82487: ARRAY
82488: PUSH
82489: FOR_DOWNTO
82490: IFFALSE 82833
// begin if IsInUnit ( tmp ) then
82492: LD_VAR 0 7
82496: PPUSH
82497: CALL_OW 310
82501: IFFALSE 82512
// ComExitBuilding ( tmp ) ;
82503: LD_VAR 0 7
82507: PPUSH
82508: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
82512: LD_INT 35
82514: PPUSH
82515: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
82519: LD_VAR 0 7
82523: PPUSH
82524: CALL_OW 310
82528: NOT
82529: PUSH
82530: LD_VAR 0 7
82534: PPUSH
82535: CALL_OW 314
82539: NOT
82540: AND
82541: IFFALSE 82512
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
82543: LD_ADDR_VAR 0 6
82547: PUSH
82548: LD_VAR 0 7
82552: PPUSH
82553: CALL_OW 250
82557: PUSH
82558: LD_VAR 0 7
82562: PPUSH
82563: CALL_OW 251
82567: PUSH
82568: EMPTY
82569: LIST
82570: LIST
82571: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
82572: LD_INT 35
82574: PPUSH
82575: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
82579: LD_ADDR_VAR 0 4
82583: PUSH
82584: LD_EXP 71
82588: PUSH
82589: LD_VAR 0 2
82593: ARRAY
82594: PUSH
82595: LD_VAR 0 3
82599: ARRAY
82600: PUSH
82601: LD_INT 1
82603: ARRAY
82604: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
82605: LD_ADDR_VAR 0 5
82609: PUSH
82610: LD_EXP 71
82614: PUSH
82615: LD_VAR 0 2
82619: ARRAY
82620: PUSH
82621: LD_VAR 0 3
82625: ARRAY
82626: PUSH
82627: LD_INT 2
82629: ARRAY
82630: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
82631: LD_VAR 0 7
82635: PPUSH
82636: LD_INT 10
82638: PPUSH
82639: CALL 29293 0 2
82643: PUSH
82644: LD_INT 4
82646: ARRAY
82647: IFFALSE 82685
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
82649: LD_VAR 0 7
82653: PPUSH
82654: LD_VAR 0 6
82658: PUSH
82659: LD_INT 1
82661: ARRAY
82662: PPUSH
82663: LD_VAR 0 6
82667: PUSH
82668: LD_INT 2
82670: ARRAY
82671: PPUSH
82672: CALL_OW 111
// wait ( 0 0$10 ) ;
82676: LD_INT 350
82678: PPUSH
82679: CALL_OW 67
// end else
82683: GO 82711
// begin ComMoveXY ( tmp , x , y ) ;
82685: LD_VAR 0 7
82689: PPUSH
82690: LD_VAR 0 4
82694: PPUSH
82695: LD_VAR 0 5
82699: PPUSH
82700: CALL_OW 111
// wait ( 0 0$3 ) ;
82704: LD_INT 105
82706: PPUSH
82707: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
82711: LD_VAR 0 7
82715: PPUSH
82716: LD_VAR 0 4
82720: PPUSH
82721: LD_VAR 0 5
82725: PPUSH
82726: CALL_OW 307
82730: IFFALSE 82572
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
82732: LD_VAR 0 7
82736: PPUSH
82737: LD_VAR 0 4
82741: PPUSH
82742: LD_VAR 0 5
82746: PPUSH
82747: LD_VAR 0 8
82751: PUSH
82752: LD_VAR 0 3
82756: ARRAY
82757: PPUSH
82758: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
82762: LD_INT 35
82764: PPUSH
82765: CALL_OW 67
// until not HasTask ( tmp ) ;
82769: LD_VAR 0 7
82773: PPUSH
82774: CALL_OW 314
82778: NOT
82779: IFFALSE 82762
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
82781: LD_ADDR_EXP 72
82785: PUSH
82786: LD_EXP 72
82790: PPUSH
82791: LD_VAR 0 2
82795: PUSH
82796: LD_EXP 72
82800: PUSH
82801: LD_VAR 0 2
82805: ARRAY
82806: PUSH
82807: LD_INT 1
82809: PLUS
82810: PUSH
82811: EMPTY
82812: LIST
82813: LIST
82814: PPUSH
82815: LD_VAR 0 8
82819: PUSH
82820: LD_VAR 0 3
82824: ARRAY
82825: PPUSH
82826: CALL 26700 0 3
82830: ST_TO_ADDR
// end ;
82831: GO 82489
82833: POP
82834: POP
// MC_Reset ( i , 124 ) ;
82835: LD_VAR 0 2
82839: PPUSH
82840: LD_INT 124
82842: PPUSH
82843: CALL 66638 0 2
// end ; end ;
82847: GO 82244
82849: POP
82850: POP
// end ;
82851: LD_VAR 0 1
82855: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
82856: LD_INT 0
82858: PPUSH
82859: PPUSH
82860: PPUSH
// if not mc_bases then
82861: LD_EXP 36
82865: NOT
82866: IFFALSE 82870
// exit ;
82868: GO 83476
// for i = 1 to mc_bases do
82870: LD_ADDR_VAR 0 2
82874: PUSH
82875: DOUBLE
82876: LD_INT 1
82878: DEC
82879: ST_TO_ADDR
82880: LD_EXP 36
82884: PUSH
82885: FOR_TO
82886: IFFALSE 83474
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
82888: LD_ADDR_VAR 0 3
82892: PUSH
82893: LD_EXP 36
82897: PUSH
82898: LD_VAR 0 2
82902: ARRAY
82903: PPUSH
82904: LD_INT 25
82906: PUSH
82907: LD_INT 4
82909: PUSH
82910: EMPTY
82911: LIST
82912: LIST
82913: PPUSH
82914: CALL_OW 72
82918: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
82919: LD_VAR 0 3
82923: NOT
82924: PUSH
82925: LD_EXP 73
82929: PUSH
82930: LD_VAR 0 2
82934: ARRAY
82935: NOT
82936: OR
82937: PUSH
82938: LD_EXP 36
82942: PUSH
82943: LD_VAR 0 2
82947: ARRAY
82948: PPUSH
82949: LD_INT 2
82951: PUSH
82952: LD_INT 30
82954: PUSH
82955: LD_INT 0
82957: PUSH
82958: EMPTY
82959: LIST
82960: LIST
82961: PUSH
82962: LD_INT 30
82964: PUSH
82965: LD_INT 1
82967: PUSH
82968: EMPTY
82969: LIST
82970: LIST
82971: PUSH
82972: EMPTY
82973: LIST
82974: LIST
82975: LIST
82976: PPUSH
82977: CALL_OW 72
82981: NOT
82982: OR
82983: IFFALSE 83033
// begin if mc_deposits_finder [ i ] then
82985: LD_EXP 74
82989: PUSH
82990: LD_VAR 0 2
82994: ARRAY
82995: IFFALSE 83031
// begin MC_Reset ( i , 125 ) ;
82997: LD_VAR 0 2
83001: PPUSH
83002: LD_INT 125
83004: PPUSH
83005: CALL 66638 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
83009: LD_ADDR_EXP 74
83013: PUSH
83014: LD_EXP 74
83018: PPUSH
83019: LD_VAR 0 2
83023: PPUSH
83024: EMPTY
83025: PPUSH
83026: CALL_OW 1
83030: ST_TO_ADDR
// end ; continue ;
83031: GO 82885
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
83033: LD_EXP 73
83037: PUSH
83038: LD_VAR 0 2
83042: ARRAY
83043: PUSH
83044: LD_INT 1
83046: ARRAY
83047: PUSH
83048: LD_INT 3
83050: ARRAY
83051: PUSH
83052: LD_INT 1
83054: EQUAL
83055: PUSH
83056: LD_INT 20
83058: PPUSH
83059: LD_EXP 62
83063: PUSH
83064: LD_VAR 0 2
83068: ARRAY
83069: PPUSH
83070: CALL_OW 321
83074: PUSH
83075: LD_INT 2
83077: NONEQUAL
83078: AND
83079: IFFALSE 83129
// begin if mc_deposits_finder [ i ] then
83081: LD_EXP 74
83085: PUSH
83086: LD_VAR 0 2
83090: ARRAY
83091: IFFALSE 83127
// begin MC_Reset ( i , 125 ) ;
83093: LD_VAR 0 2
83097: PPUSH
83098: LD_INT 125
83100: PPUSH
83101: CALL 66638 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
83105: LD_ADDR_EXP 74
83109: PUSH
83110: LD_EXP 74
83114: PPUSH
83115: LD_VAR 0 2
83119: PPUSH
83120: EMPTY
83121: PPUSH
83122: CALL_OW 1
83126: ST_TO_ADDR
// end ; continue ;
83127: GO 82885
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
83129: LD_EXP 73
83133: PUSH
83134: LD_VAR 0 2
83138: ARRAY
83139: PUSH
83140: LD_INT 1
83142: ARRAY
83143: PUSH
83144: LD_INT 1
83146: ARRAY
83147: PPUSH
83148: LD_EXP 73
83152: PUSH
83153: LD_VAR 0 2
83157: ARRAY
83158: PUSH
83159: LD_INT 1
83161: ARRAY
83162: PUSH
83163: LD_INT 2
83165: ARRAY
83166: PPUSH
83167: LD_EXP 62
83171: PUSH
83172: LD_VAR 0 2
83176: ARRAY
83177: PPUSH
83178: CALL_OW 440
83182: IFFALSE 83225
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
83184: LD_ADDR_EXP 73
83188: PUSH
83189: LD_EXP 73
83193: PPUSH
83194: LD_VAR 0 2
83198: PPUSH
83199: LD_EXP 73
83203: PUSH
83204: LD_VAR 0 2
83208: ARRAY
83209: PPUSH
83210: LD_INT 1
83212: PPUSH
83213: CALL_OW 3
83217: PPUSH
83218: CALL_OW 1
83222: ST_TO_ADDR
83223: GO 83472
// begin if not mc_deposits_finder [ i ] then
83225: LD_EXP 74
83229: PUSH
83230: LD_VAR 0 2
83234: ARRAY
83235: NOT
83236: IFFALSE 83288
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
83238: LD_ADDR_EXP 74
83242: PUSH
83243: LD_EXP 74
83247: PPUSH
83248: LD_VAR 0 2
83252: PPUSH
83253: LD_VAR 0 3
83257: PUSH
83258: LD_INT 1
83260: ARRAY
83261: PUSH
83262: EMPTY
83263: LIST
83264: PPUSH
83265: CALL_OW 1
83269: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
83270: LD_VAR 0 3
83274: PUSH
83275: LD_INT 1
83277: ARRAY
83278: PPUSH
83279: LD_INT 125
83281: PPUSH
83282: CALL_OW 109
// end else
83286: GO 83472
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
83288: LD_EXP 74
83292: PUSH
83293: LD_VAR 0 2
83297: ARRAY
83298: PUSH
83299: LD_INT 1
83301: ARRAY
83302: PPUSH
83303: CALL_OW 310
83307: IFFALSE 83330
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
83309: LD_EXP 74
83313: PUSH
83314: LD_VAR 0 2
83318: ARRAY
83319: PUSH
83320: LD_INT 1
83322: ARRAY
83323: PPUSH
83324: CALL_OW 122
83328: GO 83472
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
83330: LD_EXP 74
83334: PUSH
83335: LD_VAR 0 2
83339: ARRAY
83340: PUSH
83341: LD_INT 1
83343: ARRAY
83344: PPUSH
83345: CALL_OW 314
83349: NOT
83350: PUSH
83351: LD_EXP 74
83355: PUSH
83356: LD_VAR 0 2
83360: ARRAY
83361: PUSH
83362: LD_INT 1
83364: ARRAY
83365: PPUSH
83366: LD_EXP 73
83370: PUSH
83371: LD_VAR 0 2
83375: ARRAY
83376: PUSH
83377: LD_INT 1
83379: ARRAY
83380: PUSH
83381: LD_INT 1
83383: ARRAY
83384: PPUSH
83385: LD_EXP 73
83389: PUSH
83390: LD_VAR 0 2
83394: ARRAY
83395: PUSH
83396: LD_INT 1
83398: ARRAY
83399: PUSH
83400: LD_INT 2
83402: ARRAY
83403: PPUSH
83404: CALL_OW 297
83408: PUSH
83409: LD_INT 6
83411: GREATER
83412: AND
83413: IFFALSE 83472
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
83415: LD_EXP 74
83419: PUSH
83420: LD_VAR 0 2
83424: ARRAY
83425: PUSH
83426: LD_INT 1
83428: ARRAY
83429: PPUSH
83430: LD_EXP 73
83434: PUSH
83435: LD_VAR 0 2
83439: ARRAY
83440: PUSH
83441: LD_INT 1
83443: ARRAY
83444: PUSH
83445: LD_INT 1
83447: ARRAY
83448: PPUSH
83449: LD_EXP 73
83453: PUSH
83454: LD_VAR 0 2
83458: ARRAY
83459: PUSH
83460: LD_INT 1
83462: ARRAY
83463: PUSH
83464: LD_INT 2
83466: ARRAY
83467: PPUSH
83468: CALL_OW 111
// end ; end ; end ;
83472: GO 82885
83474: POP
83475: POP
// end ;
83476: LD_VAR 0 1
83480: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
83481: LD_INT 0
83483: PPUSH
83484: PPUSH
83485: PPUSH
83486: PPUSH
83487: PPUSH
83488: PPUSH
83489: PPUSH
83490: PPUSH
83491: PPUSH
83492: PPUSH
83493: PPUSH
// if not mc_bases then
83494: LD_EXP 36
83498: NOT
83499: IFFALSE 83503
// exit ;
83501: GO 84227
// for i = 1 to mc_bases do
83503: LD_ADDR_VAR 0 2
83507: PUSH
83508: DOUBLE
83509: LD_INT 1
83511: DEC
83512: ST_TO_ADDR
83513: LD_EXP 36
83517: PUSH
83518: FOR_TO
83519: IFFALSE 84225
// begin if not mc_bases [ i ] then
83521: LD_EXP 36
83525: PUSH
83526: LD_VAR 0 2
83530: ARRAY
83531: NOT
83532: IFFALSE 83536
// continue ;
83534: GO 83518
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
83536: LD_ADDR_VAR 0 7
83540: PUSH
83541: LD_EXP 36
83545: PUSH
83546: LD_VAR 0 2
83550: ARRAY
83551: PUSH
83552: LD_INT 1
83554: ARRAY
83555: PPUSH
83556: CALL_OW 248
83560: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
83561: LD_VAR 0 7
83565: PUSH
83566: LD_INT 3
83568: EQUAL
83569: PUSH
83570: LD_EXP 55
83574: PUSH
83575: LD_VAR 0 2
83579: ARRAY
83580: PUSH
83581: LD_EXP 58
83585: PUSH
83586: LD_VAR 0 2
83590: ARRAY
83591: UNION
83592: PPUSH
83593: LD_INT 33
83595: PUSH
83596: LD_INT 2
83598: PUSH
83599: EMPTY
83600: LIST
83601: LIST
83602: PPUSH
83603: CALL_OW 72
83607: NOT
83608: OR
83609: IFFALSE 83613
// continue ;
83611: GO 83518
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
83613: LD_ADDR_VAR 0 9
83617: PUSH
83618: LD_EXP 36
83622: PUSH
83623: LD_VAR 0 2
83627: ARRAY
83628: PPUSH
83629: LD_INT 30
83631: PUSH
83632: LD_INT 36
83634: PUSH
83635: EMPTY
83636: LIST
83637: LIST
83638: PPUSH
83639: CALL_OW 72
83643: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
83644: LD_ADDR_VAR 0 10
83648: PUSH
83649: LD_EXP 55
83653: PUSH
83654: LD_VAR 0 2
83658: ARRAY
83659: PPUSH
83660: LD_INT 34
83662: PUSH
83663: LD_INT 31
83665: PUSH
83666: EMPTY
83667: LIST
83668: LIST
83669: PPUSH
83670: CALL_OW 72
83674: ST_TO_ADDR
// if not cts and not mcts then
83675: LD_VAR 0 9
83679: NOT
83680: PUSH
83681: LD_VAR 0 10
83685: NOT
83686: AND
83687: IFFALSE 83691
// continue ;
83689: GO 83518
// x := cts ;
83691: LD_ADDR_VAR 0 11
83695: PUSH
83696: LD_VAR 0 9
83700: ST_TO_ADDR
// if not x then
83701: LD_VAR 0 11
83705: NOT
83706: IFFALSE 83718
// x := mcts ;
83708: LD_ADDR_VAR 0 11
83712: PUSH
83713: LD_VAR 0 10
83717: ST_TO_ADDR
// if mc_remote_driver [ i ] then
83718: LD_EXP 76
83722: PUSH
83723: LD_VAR 0 2
83727: ARRAY
83728: IFFALSE 83997
// for j in mc_remote_driver [ i ] do
83730: LD_ADDR_VAR 0 3
83734: PUSH
83735: LD_EXP 76
83739: PUSH
83740: LD_VAR 0 2
83744: ARRAY
83745: PUSH
83746: FOR_IN
83747: IFFALSE 83995
// begin if GetClass ( j ) <> 3 then
83749: LD_VAR 0 3
83753: PPUSH
83754: CALL_OW 257
83758: PUSH
83759: LD_INT 3
83761: NONEQUAL
83762: IFFALSE 83815
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
83764: LD_ADDR_EXP 76
83768: PUSH
83769: LD_EXP 76
83773: PPUSH
83774: LD_VAR 0 2
83778: PPUSH
83779: LD_EXP 76
83783: PUSH
83784: LD_VAR 0 2
83788: ARRAY
83789: PUSH
83790: LD_VAR 0 3
83794: DIFF
83795: PPUSH
83796: CALL_OW 1
83800: ST_TO_ADDR
// SetTag ( j , 0 ) ;
83801: LD_VAR 0 3
83805: PPUSH
83806: LD_INT 0
83808: PPUSH
83809: CALL_OW 109
// continue ;
83813: GO 83746
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
83815: LD_VAR 0 3
83819: PPUSH
83820: CALL_OW 310
83824: NOT
83825: PUSH
83826: LD_VAR 0 3
83830: PPUSH
83831: CALL_OW 310
83835: PPUSH
83836: CALL_OW 266
83840: PUSH
83841: LD_INT 36
83843: NONEQUAL
83844: PUSH
83845: LD_VAR 0 3
83849: PPUSH
83850: CALL 60024 0 1
83854: NOT
83855: AND
83856: OR
83857: IFFALSE 83993
// begin if IsInUnit ( j ) then
83859: LD_VAR 0 3
83863: PPUSH
83864: CALL_OW 310
83868: IFFALSE 83879
// ComExitBuilding ( j ) ;
83870: LD_VAR 0 3
83874: PPUSH
83875: CALL_OW 122
// ct := 0 ;
83879: LD_ADDR_VAR 0 8
83883: PUSH
83884: LD_INT 0
83886: ST_TO_ADDR
// for k in x do
83887: LD_ADDR_VAR 0 4
83891: PUSH
83892: LD_VAR 0 11
83896: PUSH
83897: FOR_IN
83898: IFFALSE 83971
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
83900: LD_VAR 0 4
83904: PPUSH
83905: CALL_OW 264
83909: PUSH
83910: LD_INT 31
83912: EQUAL
83913: PUSH
83914: LD_VAR 0 4
83918: PPUSH
83919: CALL_OW 311
83923: NOT
83924: AND
83925: PUSH
83926: LD_VAR 0 4
83930: PPUSH
83931: CALL_OW 266
83935: PUSH
83936: LD_INT 36
83938: EQUAL
83939: PUSH
83940: LD_VAR 0 4
83944: PPUSH
83945: CALL_OW 313
83949: PUSH
83950: LD_INT 3
83952: LESS
83953: AND
83954: OR
83955: IFFALSE 83969
// begin ct := k ;
83957: LD_ADDR_VAR 0 8
83961: PUSH
83962: LD_VAR 0 4
83966: ST_TO_ADDR
// break ;
83967: GO 83971
// end ;
83969: GO 83897
83971: POP
83972: POP
// if ct then
83973: LD_VAR 0 8
83977: IFFALSE 83993
// ComEnterUnit ( j , ct ) ;
83979: LD_VAR 0 3
83983: PPUSH
83984: LD_VAR 0 8
83988: PPUSH
83989: CALL_OW 120
// end ; end ;
83993: GO 83746
83995: POP
83996: POP
// places := 0 ;
83997: LD_ADDR_VAR 0 5
84001: PUSH
84002: LD_INT 0
84004: ST_TO_ADDR
// for j = 1 to x do
84005: LD_ADDR_VAR 0 3
84009: PUSH
84010: DOUBLE
84011: LD_INT 1
84013: DEC
84014: ST_TO_ADDR
84015: LD_VAR 0 11
84019: PUSH
84020: FOR_TO
84021: IFFALSE 84076
// if GetWeapon ( x [ j ] ) = ar_control_tower then
84023: LD_VAR 0 11
84027: PUSH
84028: LD_VAR 0 3
84032: ARRAY
84033: PPUSH
84034: CALL_OW 264
84038: PUSH
84039: LD_INT 31
84041: EQUAL
84042: IFFALSE 84060
// places := places + 1 else
84044: LD_ADDR_VAR 0 5
84048: PUSH
84049: LD_VAR 0 5
84053: PUSH
84054: LD_INT 1
84056: PLUS
84057: ST_TO_ADDR
84058: GO 84074
// places := places + 3 ;
84060: LD_ADDR_VAR 0 5
84064: PUSH
84065: LD_VAR 0 5
84069: PUSH
84070: LD_INT 3
84072: PLUS
84073: ST_TO_ADDR
84074: GO 84020
84076: POP
84077: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
84078: LD_ADDR_VAR 0 6
84082: PUSH
84083: LD_EXP 36
84087: PUSH
84088: LD_VAR 0 2
84092: ARRAY
84093: PPUSH
84094: LD_INT 25
84096: PUSH
84097: LD_INT 3
84099: PUSH
84100: EMPTY
84101: LIST
84102: LIST
84103: PPUSH
84104: CALL_OW 72
84108: PUSH
84109: LD_EXP 76
84113: PUSH
84114: LD_VAR 0 2
84118: ARRAY
84119: DIFF
84120: PPUSH
84121: LD_INT 3
84123: PPUSH
84124: CALL 60924 0 2
84128: ST_TO_ADDR
// if not tmp then
84129: LD_VAR 0 6
84133: NOT
84134: IFFALSE 84138
// continue ;
84136: GO 83518
// places := places - mc_remote_driver [ i ] ;
84138: LD_ADDR_VAR 0 5
84142: PUSH
84143: LD_VAR 0 5
84147: PUSH
84148: LD_EXP 76
84152: PUSH
84153: LD_VAR 0 2
84157: ARRAY
84158: MINUS
84159: ST_TO_ADDR
// if places then
84160: LD_VAR 0 5
84164: IFFALSE 84223
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
84166: LD_ADDR_EXP 76
84170: PUSH
84171: LD_EXP 76
84175: PPUSH
84176: LD_VAR 0 2
84180: PPUSH
84181: LD_EXP 76
84185: PUSH
84186: LD_VAR 0 2
84190: ARRAY
84191: PUSH
84192: LD_VAR 0 6
84196: PUSH
84197: LD_INT 1
84199: ARRAY
84200: UNION
84201: PPUSH
84202: CALL_OW 1
84206: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
84207: LD_VAR 0 6
84211: PUSH
84212: LD_INT 1
84214: ARRAY
84215: PPUSH
84216: LD_INT 126
84218: PPUSH
84219: CALL_OW 109
// end ; end ;
84223: GO 83518
84225: POP
84226: POP
// end ;
84227: LD_VAR 0 1
84231: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
84232: LD_INT 0
84234: PPUSH
84235: PPUSH
84236: PPUSH
84237: PPUSH
84238: PPUSH
84239: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
84240: LD_VAR 0 1
84244: NOT
84245: PUSH
84246: LD_VAR 0 2
84250: NOT
84251: OR
84252: PUSH
84253: LD_VAR 0 3
84257: NOT
84258: OR
84259: PUSH
84260: LD_VAR 0 4
84264: PUSH
84265: LD_INT 1
84267: PUSH
84268: LD_INT 2
84270: PUSH
84271: LD_INT 3
84273: PUSH
84274: LD_INT 4
84276: PUSH
84277: LD_INT 5
84279: PUSH
84280: LD_INT 8
84282: PUSH
84283: LD_INT 9
84285: PUSH
84286: LD_INT 15
84288: PUSH
84289: LD_INT 16
84291: PUSH
84292: EMPTY
84293: LIST
84294: LIST
84295: LIST
84296: LIST
84297: LIST
84298: LIST
84299: LIST
84300: LIST
84301: LIST
84302: IN
84303: NOT
84304: OR
84305: IFFALSE 84309
// exit ;
84307: GO 85209
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
84309: LD_ADDR_VAR 0 2
84313: PUSH
84314: LD_VAR 0 2
84318: PPUSH
84319: LD_INT 21
84321: PUSH
84322: LD_INT 3
84324: PUSH
84325: EMPTY
84326: LIST
84327: LIST
84328: PUSH
84329: LD_INT 24
84331: PUSH
84332: LD_INT 250
84334: PUSH
84335: EMPTY
84336: LIST
84337: LIST
84338: PUSH
84339: EMPTY
84340: LIST
84341: LIST
84342: PPUSH
84343: CALL_OW 72
84347: ST_TO_ADDR
// case class of 1 , 15 :
84348: LD_VAR 0 4
84352: PUSH
84353: LD_INT 1
84355: DOUBLE
84356: EQUAL
84357: IFTRUE 84367
84359: LD_INT 15
84361: DOUBLE
84362: EQUAL
84363: IFTRUE 84367
84365: GO 84452
84367: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
84368: LD_ADDR_VAR 0 8
84372: PUSH
84373: LD_VAR 0 2
84377: PPUSH
84378: LD_INT 2
84380: PUSH
84381: LD_INT 30
84383: PUSH
84384: LD_INT 32
84386: PUSH
84387: EMPTY
84388: LIST
84389: LIST
84390: PUSH
84391: LD_INT 30
84393: PUSH
84394: LD_INT 31
84396: PUSH
84397: EMPTY
84398: LIST
84399: LIST
84400: PUSH
84401: EMPTY
84402: LIST
84403: LIST
84404: LIST
84405: PPUSH
84406: CALL_OW 72
84410: PUSH
84411: LD_VAR 0 2
84415: PPUSH
84416: LD_INT 2
84418: PUSH
84419: LD_INT 30
84421: PUSH
84422: LD_INT 4
84424: PUSH
84425: EMPTY
84426: LIST
84427: LIST
84428: PUSH
84429: LD_INT 30
84431: PUSH
84432: LD_INT 5
84434: PUSH
84435: EMPTY
84436: LIST
84437: LIST
84438: PUSH
84439: EMPTY
84440: LIST
84441: LIST
84442: LIST
84443: PPUSH
84444: CALL_OW 72
84448: ADD
84449: ST_TO_ADDR
84450: GO 84698
84452: LD_INT 2
84454: DOUBLE
84455: EQUAL
84456: IFTRUE 84466
84458: LD_INT 16
84460: DOUBLE
84461: EQUAL
84462: IFTRUE 84466
84464: GO 84512
84466: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
84467: LD_ADDR_VAR 0 8
84471: PUSH
84472: LD_VAR 0 2
84476: PPUSH
84477: LD_INT 2
84479: PUSH
84480: LD_INT 30
84482: PUSH
84483: LD_INT 0
84485: PUSH
84486: EMPTY
84487: LIST
84488: LIST
84489: PUSH
84490: LD_INT 30
84492: PUSH
84493: LD_INT 1
84495: PUSH
84496: EMPTY
84497: LIST
84498: LIST
84499: PUSH
84500: EMPTY
84501: LIST
84502: LIST
84503: LIST
84504: PPUSH
84505: CALL_OW 72
84509: ST_TO_ADDR
84510: GO 84698
84512: LD_INT 3
84514: DOUBLE
84515: EQUAL
84516: IFTRUE 84520
84518: GO 84566
84520: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
84521: LD_ADDR_VAR 0 8
84525: PUSH
84526: LD_VAR 0 2
84530: PPUSH
84531: LD_INT 2
84533: PUSH
84534: LD_INT 30
84536: PUSH
84537: LD_INT 2
84539: PUSH
84540: EMPTY
84541: LIST
84542: LIST
84543: PUSH
84544: LD_INT 30
84546: PUSH
84547: LD_INT 3
84549: PUSH
84550: EMPTY
84551: LIST
84552: LIST
84553: PUSH
84554: EMPTY
84555: LIST
84556: LIST
84557: LIST
84558: PPUSH
84559: CALL_OW 72
84563: ST_TO_ADDR
84564: GO 84698
84566: LD_INT 4
84568: DOUBLE
84569: EQUAL
84570: IFTRUE 84574
84572: GO 84631
84574: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
84575: LD_ADDR_VAR 0 8
84579: PUSH
84580: LD_VAR 0 2
84584: PPUSH
84585: LD_INT 2
84587: PUSH
84588: LD_INT 30
84590: PUSH
84591: LD_INT 6
84593: PUSH
84594: EMPTY
84595: LIST
84596: LIST
84597: PUSH
84598: LD_INT 30
84600: PUSH
84601: LD_INT 7
84603: PUSH
84604: EMPTY
84605: LIST
84606: LIST
84607: PUSH
84608: LD_INT 30
84610: PUSH
84611: LD_INT 8
84613: PUSH
84614: EMPTY
84615: LIST
84616: LIST
84617: PUSH
84618: EMPTY
84619: LIST
84620: LIST
84621: LIST
84622: LIST
84623: PPUSH
84624: CALL_OW 72
84628: ST_TO_ADDR
84629: GO 84698
84631: LD_INT 5
84633: DOUBLE
84634: EQUAL
84635: IFTRUE 84651
84637: LD_INT 8
84639: DOUBLE
84640: EQUAL
84641: IFTRUE 84651
84643: LD_INT 9
84645: DOUBLE
84646: EQUAL
84647: IFTRUE 84651
84649: GO 84697
84651: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
84652: LD_ADDR_VAR 0 8
84656: PUSH
84657: LD_VAR 0 2
84661: PPUSH
84662: LD_INT 2
84664: PUSH
84665: LD_INT 30
84667: PUSH
84668: LD_INT 4
84670: PUSH
84671: EMPTY
84672: LIST
84673: LIST
84674: PUSH
84675: LD_INT 30
84677: PUSH
84678: LD_INT 5
84680: PUSH
84681: EMPTY
84682: LIST
84683: LIST
84684: PUSH
84685: EMPTY
84686: LIST
84687: LIST
84688: LIST
84689: PPUSH
84690: CALL_OW 72
84694: ST_TO_ADDR
84695: GO 84698
84697: POP
// if not tmp then
84698: LD_VAR 0 8
84702: NOT
84703: IFFALSE 84707
// exit ;
84705: GO 85209
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
84707: LD_VAR 0 4
84711: PUSH
84712: LD_INT 1
84714: PUSH
84715: LD_INT 15
84717: PUSH
84718: EMPTY
84719: LIST
84720: LIST
84721: IN
84722: PUSH
84723: LD_EXP 45
84727: PUSH
84728: LD_VAR 0 1
84732: ARRAY
84733: AND
84734: IFFALSE 84890
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
84736: LD_ADDR_VAR 0 9
84740: PUSH
84741: LD_EXP 45
84745: PUSH
84746: LD_VAR 0 1
84750: ARRAY
84751: PUSH
84752: LD_INT 1
84754: ARRAY
84755: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
84756: LD_VAR 0 9
84760: PUSH
84761: LD_EXP 46
84765: PUSH
84766: LD_VAR 0 1
84770: ARRAY
84771: IN
84772: NOT
84773: IFFALSE 84888
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
84775: LD_ADDR_EXP 46
84779: PUSH
84780: LD_EXP 46
84784: PPUSH
84785: LD_VAR 0 1
84789: PUSH
84790: LD_EXP 46
84794: PUSH
84795: LD_VAR 0 1
84799: ARRAY
84800: PUSH
84801: LD_INT 1
84803: PLUS
84804: PUSH
84805: EMPTY
84806: LIST
84807: LIST
84808: PPUSH
84809: LD_VAR 0 9
84813: PPUSH
84814: CALL 26700 0 3
84818: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
84819: LD_ADDR_EXP 45
84823: PUSH
84824: LD_EXP 45
84828: PPUSH
84829: LD_VAR 0 1
84833: PPUSH
84834: LD_EXP 45
84838: PUSH
84839: LD_VAR 0 1
84843: ARRAY
84844: PUSH
84845: LD_VAR 0 9
84849: DIFF
84850: PPUSH
84851: CALL_OW 1
84855: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
84856: LD_VAR 0 3
84860: PPUSH
84861: LD_EXP 46
84865: PUSH
84866: LD_VAR 0 1
84870: ARRAY
84871: PUSH
84872: LD_EXP 46
84876: PUSH
84877: LD_VAR 0 1
84881: ARRAY
84882: ARRAY
84883: PPUSH
84884: CALL_OW 120
// end ; exit ;
84888: GO 85209
// end ; if tmp > 1 then
84890: LD_VAR 0 8
84894: PUSH
84895: LD_INT 1
84897: GREATER
84898: IFFALSE 85002
// for i = 2 to tmp do
84900: LD_ADDR_VAR 0 6
84904: PUSH
84905: DOUBLE
84906: LD_INT 2
84908: DEC
84909: ST_TO_ADDR
84910: LD_VAR 0 8
84914: PUSH
84915: FOR_TO
84916: IFFALSE 85000
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
84918: LD_VAR 0 8
84922: PUSH
84923: LD_VAR 0 6
84927: ARRAY
84928: PPUSH
84929: CALL_OW 461
84933: PUSH
84934: LD_INT 6
84936: EQUAL
84937: IFFALSE 84998
// begin x := tmp [ i ] ;
84939: LD_ADDR_VAR 0 9
84943: PUSH
84944: LD_VAR 0 8
84948: PUSH
84949: LD_VAR 0 6
84953: ARRAY
84954: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
84955: LD_ADDR_VAR 0 8
84959: PUSH
84960: LD_VAR 0 8
84964: PPUSH
84965: LD_VAR 0 6
84969: PPUSH
84970: CALL_OW 3
84974: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
84975: LD_ADDR_VAR 0 8
84979: PUSH
84980: LD_VAR 0 8
84984: PPUSH
84985: LD_INT 1
84987: PPUSH
84988: LD_VAR 0 9
84992: PPUSH
84993: CALL_OW 2
84997: ST_TO_ADDR
// end ;
84998: GO 84915
85000: POP
85001: POP
// for i in tmp do
85002: LD_ADDR_VAR 0 6
85006: PUSH
85007: LD_VAR 0 8
85011: PUSH
85012: FOR_IN
85013: IFFALSE 85082
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
85015: LD_VAR 0 6
85019: PPUSH
85020: CALL_OW 313
85024: PUSH
85025: LD_INT 6
85027: LESS
85028: PUSH
85029: LD_VAR 0 6
85033: PPUSH
85034: CALL_OW 266
85038: PUSH
85039: LD_INT 31
85041: PUSH
85042: LD_INT 32
85044: PUSH
85045: EMPTY
85046: LIST
85047: LIST
85048: IN
85049: NOT
85050: AND
85051: PUSH
85052: LD_VAR 0 6
85056: PPUSH
85057: CALL_OW 313
85061: PUSH
85062: LD_INT 0
85064: EQUAL
85065: OR
85066: IFFALSE 85080
// begin j := i ;
85068: LD_ADDR_VAR 0 7
85072: PUSH
85073: LD_VAR 0 6
85077: ST_TO_ADDR
// break ;
85078: GO 85082
// end ; end ;
85080: GO 85012
85082: POP
85083: POP
// if j then
85084: LD_VAR 0 7
85088: IFFALSE 85106
// ComEnterUnit ( unit , j ) else
85090: LD_VAR 0 3
85094: PPUSH
85095: LD_VAR 0 7
85099: PPUSH
85100: CALL_OW 120
85104: GO 85209
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
85106: LD_ADDR_VAR 0 10
85110: PUSH
85111: LD_VAR 0 2
85115: PPUSH
85116: LD_INT 2
85118: PUSH
85119: LD_INT 30
85121: PUSH
85122: LD_INT 0
85124: PUSH
85125: EMPTY
85126: LIST
85127: LIST
85128: PUSH
85129: LD_INT 30
85131: PUSH
85132: LD_INT 1
85134: PUSH
85135: EMPTY
85136: LIST
85137: LIST
85138: PUSH
85139: EMPTY
85140: LIST
85141: LIST
85142: LIST
85143: PPUSH
85144: CALL_OW 72
85148: ST_TO_ADDR
// if depot then
85149: LD_VAR 0 10
85153: IFFALSE 85209
// begin depot := NearestUnitToUnit ( depot , unit ) ;
85155: LD_ADDR_VAR 0 10
85159: PUSH
85160: LD_VAR 0 10
85164: PPUSH
85165: LD_VAR 0 3
85169: PPUSH
85170: CALL_OW 74
85174: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
85175: LD_VAR 0 3
85179: PPUSH
85180: LD_VAR 0 10
85184: PPUSH
85185: CALL_OW 296
85189: PUSH
85190: LD_INT 10
85192: GREATER
85193: IFFALSE 85209
// ComStandNearbyBuilding ( unit , depot ) ;
85195: LD_VAR 0 3
85199: PPUSH
85200: LD_VAR 0 10
85204: PPUSH
85205: CALL 21377 0 2
// end ; end ; end ;
85209: LD_VAR 0 5
85213: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
85214: LD_INT 0
85216: PPUSH
85217: PPUSH
85218: PPUSH
85219: PPUSH
// if not mc_bases then
85220: LD_EXP 36
85224: NOT
85225: IFFALSE 85229
// exit ;
85227: GO 85468
// for i = 1 to mc_bases do
85229: LD_ADDR_VAR 0 2
85233: PUSH
85234: DOUBLE
85235: LD_INT 1
85237: DEC
85238: ST_TO_ADDR
85239: LD_EXP 36
85243: PUSH
85244: FOR_TO
85245: IFFALSE 85466
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
85247: LD_ADDR_VAR 0 4
85251: PUSH
85252: LD_EXP 36
85256: PUSH
85257: LD_VAR 0 2
85261: ARRAY
85262: PPUSH
85263: LD_INT 21
85265: PUSH
85266: LD_INT 1
85268: PUSH
85269: EMPTY
85270: LIST
85271: LIST
85272: PPUSH
85273: CALL_OW 72
85277: PUSH
85278: LD_EXP 65
85282: PUSH
85283: LD_VAR 0 2
85287: ARRAY
85288: UNION
85289: ST_TO_ADDR
// if not tmp then
85290: LD_VAR 0 4
85294: NOT
85295: IFFALSE 85299
// continue ;
85297: GO 85244
// for j in tmp do
85299: LD_ADDR_VAR 0 3
85303: PUSH
85304: LD_VAR 0 4
85308: PUSH
85309: FOR_IN
85310: IFFALSE 85462
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
85312: LD_VAR 0 3
85316: PPUSH
85317: CALL_OW 110
85321: NOT
85322: PUSH
85323: LD_VAR 0 3
85327: PPUSH
85328: CALL_OW 314
85332: NOT
85333: AND
85334: PUSH
85335: LD_VAR 0 3
85339: PPUSH
85340: CALL_OW 311
85344: NOT
85345: AND
85346: PUSH
85347: LD_VAR 0 3
85351: PPUSH
85352: CALL_OW 310
85356: NOT
85357: AND
85358: PUSH
85359: LD_VAR 0 3
85363: PUSH
85364: LD_EXP 39
85368: PUSH
85369: LD_VAR 0 2
85373: ARRAY
85374: PUSH
85375: LD_INT 1
85377: ARRAY
85378: IN
85379: NOT
85380: AND
85381: PUSH
85382: LD_VAR 0 3
85386: PUSH
85387: LD_EXP 39
85391: PUSH
85392: LD_VAR 0 2
85396: ARRAY
85397: PUSH
85398: LD_INT 2
85400: ARRAY
85401: IN
85402: NOT
85403: AND
85404: PUSH
85405: LD_VAR 0 3
85409: PUSH
85410: LD_EXP 48
85414: PUSH
85415: LD_VAR 0 2
85419: ARRAY
85420: IN
85421: NOT
85422: AND
85423: IFFALSE 85460
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
85425: LD_VAR 0 2
85429: PPUSH
85430: LD_EXP 36
85434: PUSH
85435: LD_VAR 0 2
85439: ARRAY
85440: PPUSH
85441: LD_VAR 0 3
85445: PPUSH
85446: LD_VAR 0 3
85450: PPUSH
85451: CALL_OW 257
85455: PPUSH
85456: CALL 84232 0 4
// end ;
85460: GO 85309
85462: POP
85463: POP
// end ;
85464: GO 85244
85466: POP
85467: POP
// end ;
85468: LD_VAR 0 1
85472: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
85473: LD_INT 0
85475: PPUSH
85476: PPUSH
85477: PPUSH
85478: PPUSH
85479: PPUSH
85480: PPUSH
// if not mc_bases [ base ] then
85481: LD_EXP 36
85485: PUSH
85486: LD_VAR 0 1
85490: ARRAY
85491: NOT
85492: IFFALSE 85496
// exit ;
85494: GO 85678
// tmp := [ ] ;
85496: LD_ADDR_VAR 0 6
85500: PUSH
85501: EMPTY
85502: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
85503: LD_ADDR_VAR 0 7
85507: PUSH
85508: LD_VAR 0 3
85512: PPUSH
85513: LD_INT 0
85515: PPUSH
85516: CALL_OW 517
85520: ST_TO_ADDR
// if not list then
85521: LD_VAR 0 7
85525: NOT
85526: IFFALSE 85530
// exit ;
85528: GO 85678
// for i = 1 to amount do
85530: LD_ADDR_VAR 0 5
85534: PUSH
85535: DOUBLE
85536: LD_INT 1
85538: DEC
85539: ST_TO_ADDR
85540: LD_VAR 0 2
85544: PUSH
85545: FOR_TO
85546: IFFALSE 85626
// begin x := rand ( 1 , list [ 1 ] ) ;
85548: LD_ADDR_VAR 0 8
85552: PUSH
85553: LD_INT 1
85555: PPUSH
85556: LD_VAR 0 7
85560: PUSH
85561: LD_INT 1
85563: ARRAY
85564: PPUSH
85565: CALL_OW 12
85569: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
85570: LD_ADDR_VAR 0 6
85574: PUSH
85575: LD_VAR 0 6
85579: PPUSH
85580: LD_VAR 0 5
85584: PPUSH
85585: LD_VAR 0 7
85589: PUSH
85590: LD_INT 1
85592: ARRAY
85593: PUSH
85594: LD_VAR 0 8
85598: ARRAY
85599: PUSH
85600: LD_VAR 0 7
85604: PUSH
85605: LD_INT 2
85607: ARRAY
85608: PUSH
85609: LD_VAR 0 8
85613: ARRAY
85614: PUSH
85615: EMPTY
85616: LIST
85617: LIST
85618: PPUSH
85619: CALL_OW 1
85623: ST_TO_ADDR
// end ;
85624: GO 85545
85626: POP
85627: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
85628: LD_ADDR_EXP 49
85632: PUSH
85633: LD_EXP 49
85637: PPUSH
85638: LD_VAR 0 1
85642: PPUSH
85643: LD_VAR 0 6
85647: PPUSH
85648: CALL_OW 1
85652: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
85653: LD_ADDR_EXP 51
85657: PUSH
85658: LD_EXP 51
85662: PPUSH
85663: LD_VAR 0 1
85667: PPUSH
85668: LD_VAR 0 3
85672: PPUSH
85673: CALL_OW 1
85677: ST_TO_ADDR
// end ;
85678: LD_VAR 0 4
85682: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
85683: LD_INT 0
85685: PPUSH
// if not mc_bases [ base ] then
85686: LD_EXP 36
85690: PUSH
85691: LD_VAR 0 1
85695: ARRAY
85696: NOT
85697: IFFALSE 85701
// exit ;
85699: GO 85726
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
85701: LD_ADDR_EXP 41
85705: PUSH
85706: LD_EXP 41
85710: PPUSH
85711: LD_VAR 0 1
85715: PPUSH
85716: LD_VAR 0 2
85720: PPUSH
85721: CALL_OW 1
85725: ST_TO_ADDR
// end ;
85726: LD_VAR 0 3
85730: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
85731: LD_INT 0
85733: PPUSH
// if not mc_bases [ base ] then
85734: LD_EXP 36
85738: PUSH
85739: LD_VAR 0 1
85743: ARRAY
85744: NOT
85745: IFFALSE 85749
// exit ;
85747: GO 85786
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
85749: LD_ADDR_EXP 41
85753: PUSH
85754: LD_EXP 41
85758: PPUSH
85759: LD_VAR 0 1
85763: PPUSH
85764: LD_EXP 41
85768: PUSH
85769: LD_VAR 0 1
85773: ARRAY
85774: PUSH
85775: LD_VAR 0 2
85779: UNION
85780: PPUSH
85781: CALL_OW 1
85785: ST_TO_ADDR
// end ;
85786: LD_VAR 0 3
85790: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
85791: LD_INT 0
85793: PPUSH
// if not mc_bases [ base ] then
85794: LD_EXP 36
85798: PUSH
85799: LD_VAR 0 1
85803: ARRAY
85804: NOT
85805: IFFALSE 85809
// exit ;
85807: GO 85834
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
85809: LD_ADDR_EXP 57
85813: PUSH
85814: LD_EXP 57
85818: PPUSH
85819: LD_VAR 0 1
85823: PPUSH
85824: LD_VAR 0 2
85828: PPUSH
85829: CALL_OW 1
85833: ST_TO_ADDR
// end ;
85834: LD_VAR 0 3
85838: RET
// export function MC_InsertProduceList ( base , components ) ; begin
85839: LD_INT 0
85841: PPUSH
// if not mc_bases [ base ] then
85842: LD_EXP 36
85846: PUSH
85847: LD_VAR 0 1
85851: ARRAY
85852: NOT
85853: IFFALSE 85857
// exit ;
85855: GO 85894
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
85857: LD_ADDR_EXP 57
85861: PUSH
85862: LD_EXP 57
85866: PPUSH
85867: LD_VAR 0 1
85871: PPUSH
85872: LD_EXP 57
85876: PUSH
85877: LD_VAR 0 1
85881: ARRAY
85882: PUSH
85883: LD_VAR 0 2
85887: ADD
85888: PPUSH
85889: CALL_OW 1
85893: ST_TO_ADDR
// end ;
85894: LD_VAR 0 3
85898: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
85899: LD_INT 0
85901: PPUSH
// if not mc_bases [ base ] then
85902: LD_EXP 36
85906: PUSH
85907: LD_VAR 0 1
85911: ARRAY
85912: NOT
85913: IFFALSE 85917
// exit ;
85915: GO 85971
// mc_defender := Replace ( mc_defender , base , deflist ) ;
85917: LD_ADDR_EXP 58
85921: PUSH
85922: LD_EXP 58
85926: PPUSH
85927: LD_VAR 0 1
85931: PPUSH
85932: LD_VAR 0 2
85936: PPUSH
85937: CALL_OW 1
85941: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
85942: LD_ADDR_EXP 47
85946: PUSH
85947: LD_EXP 47
85951: PPUSH
85952: LD_VAR 0 1
85956: PPUSH
85957: LD_VAR 0 2
85961: PUSH
85962: LD_INT 0
85964: PLUS
85965: PPUSH
85966: CALL_OW 1
85970: ST_TO_ADDR
// end ;
85971: LD_VAR 0 3
85975: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
85976: LD_INT 0
85978: PPUSH
// if not mc_bases [ base ] then
85979: LD_EXP 36
85983: PUSH
85984: LD_VAR 0 1
85988: ARRAY
85989: NOT
85990: IFFALSE 85994
// exit ;
85992: GO 86019
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
85994: LD_ADDR_EXP 47
85998: PUSH
85999: LD_EXP 47
86003: PPUSH
86004: LD_VAR 0 1
86008: PPUSH
86009: LD_VAR 0 2
86013: PPUSH
86014: CALL_OW 1
86018: ST_TO_ADDR
// end ;
86019: LD_VAR 0 3
86023: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
86024: LD_INT 0
86026: PPUSH
86027: PPUSH
86028: PPUSH
86029: PPUSH
// if not mc_bases [ base ] then
86030: LD_EXP 36
86034: PUSH
86035: LD_VAR 0 1
86039: ARRAY
86040: NOT
86041: IFFALSE 86045
// exit ;
86043: GO 86110
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
86045: LD_ADDR_EXP 56
86049: PUSH
86050: LD_EXP 56
86054: PPUSH
86055: LD_VAR 0 1
86059: PUSH
86060: LD_EXP 56
86064: PUSH
86065: LD_VAR 0 1
86069: ARRAY
86070: PUSH
86071: LD_INT 1
86073: PLUS
86074: PUSH
86075: EMPTY
86076: LIST
86077: LIST
86078: PPUSH
86079: LD_VAR 0 1
86083: PUSH
86084: LD_VAR 0 2
86088: PUSH
86089: LD_VAR 0 3
86093: PUSH
86094: LD_VAR 0 4
86098: PUSH
86099: EMPTY
86100: LIST
86101: LIST
86102: LIST
86103: LIST
86104: PPUSH
86105: CALL 26700 0 3
86109: ST_TO_ADDR
// end ;
86110: LD_VAR 0 5
86114: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
86115: LD_INT 0
86117: PPUSH
// if not mc_bases [ base ] then
86118: LD_EXP 36
86122: PUSH
86123: LD_VAR 0 1
86127: ARRAY
86128: NOT
86129: IFFALSE 86133
// exit ;
86131: GO 86158
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
86133: LD_ADDR_EXP 73
86137: PUSH
86138: LD_EXP 73
86142: PPUSH
86143: LD_VAR 0 1
86147: PPUSH
86148: LD_VAR 0 2
86152: PPUSH
86153: CALL_OW 1
86157: ST_TO_ADDR
// end ;
86158: LD_VAR 0 3
86162: RET
// export function MC_GetMinesField ( base ) ; begin
86163: LD_INT 0
86165: PPUSH
// result := mc_mines [ base ] ;
86166: LD_ADDR_VAR 0 2
86170: PUSH
86171: LD_EXP 49
86175: PUSH
86176: LD_VAR 0 1
86180: ARRAY
86181: ST_TO_ADDR
// end ;
86182: LD_VAR 0 2
86186: RET
// export function MC_GetProduceList ( base ) ; begin
86187: LD_INT 0
86189: PPUSH
// result := mc_produce [ base ] ;
86190: LD_ADDR_VAR 0 2
86194: PUSH
86195: LD_EXP 57
86199: PUSH
86200: LD_VAR 0 1
86204: ARRAY
86205: ST_TO_ADDR
// end ;
86206: LD_VAR 0 2
86210: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
86211: LD_INT 0
86213: PPUSH
86214: PPUSH
// if not mc_bases then
86215: LD_EXP 36
86219: NOT
86220: IFFALSE 86224
// exit ;
86222: GO 86289
// if mc_bases [ base ] then
86224: LD_EXP 36
86228: PUSH
86229: LD_VAR 0 1
86233: ARRAY
86234: IFFALSE 86289
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
86236: LD_ADDR_VAR 0 3
86240: PUSH
86241: LD_EXP 36
86245: PUSH
86246: LD_VAR 0 1
86250: ARRAY
86251: PPUSH
86252: LD_INT 30
86254: PUSH
86255: LD_VAR 0 2
86259: PUSH
86260: EMPTY
86261: LIST
86262: LIST
86263: PPUSH
86264: CALL_OW 72
86268: ST_TO_ADDR
// if result then
86269: LD_VAR 0 3
86273: IFFALSE 86289
// result := result [ 1 ] ;
86275: LD_ADDR_VAR 0 3
86279: PUSH
86280: LD_VAR 0 3
86284: PUSH
86285: LD_INT 1
86287: ARRAY
86288: ST_TO_ADDR
// end ; end ;
86289: LD_VAR 0 3
86293: RET
// export function MC_SetTame ( base , area ) ; begin
86294: LD_INT 0
86296: PPUSH
// if not mc_bases or not base then
86297: LD_EXP 36
86301: NOT
86302: PUSH
86303: LD_VAR 0 1
86307: NOT
86308: OR
86309: IFFALSE 86313
// exit ;
86311: GO 86338
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
86313: LD_ADDR_EXP 64
86317: PUSH
86318: LD_EXP 64
86322: PPUSH
86323: LD_VAR 0 1
86327: PPUSH
86328: LD_VAR 0 2
86332: PPUSH
86333: CALL_OW 1
86337: ST_TO_ADDR
// end ;
86338: LD_VAR 0 3
86342: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
86343: LD_INT 0
86345: PPUSH
86346: PPUSH
// if not mc_bases or not base then
86347: LD_EXP 36
86351: NOT
86352: PUSH
86353: LD_VAR 0 1
86357: NOT
86358: OR
86359: IFFALSE 86363
// exit ;
86361: GO 86465
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
86363: LD_ADDR_VAR 0 4
86367: PUSH
86368: LD_EXP 36
86372: PUSH
86373: LD_VAR 0 1
86377: ARRAY
86378: PPUSH
86379: LD_INT 30
86381: PUSH
86382: LD_VAR 0 2
86386: PUSH
86387: EMPTY
86388: LIST
86389: LIST
86390: PPUSH
86391: CALL_OW 72
86395: ST_TO_ADDR
// if not tmp then
86396: LD_VAR 0 4
86400: NOT
86401: IFFALSE 86405
// exit ;
86403: GO 86465
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
86405: LD_ADDR_EXP 68
86409: PUSH
86410: LD_EXP 68
86414: PPUSH
86415: LD_VAR 0 1
86419: PPUSH
86420: LD_EXP 68
86424: PUSH
86425: LD_VAR 0 1
86429: ARRAY
86430: PPUSH
86431: LD_EXP 68
86435: PUSH
86436: LD_VAR 0 1
86440: ARRAY
86441: PUSH
86442: LD_INT 1
86444: PLUS
86445: PPUSH
86446: LD_VAR 0 4
86450: PUSH
86451: LD_INT 1
86453: ARRAY
86454: PPUSH
86455: CALL_OW 2
86459: PPUSH
86460: CALL_OW 1
86464: ST_TO_ADDR
// end ;
86465: LD_VAR 0 3
86469: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
86470: LD_INT 0
86472: PPUSH
86473: PPUSH
// if not mc_bases or not base or not kinds then
86474: LD_EXP 36
86478: NOT
86479: PUSH
86480: LD_VAR 0 1
86484: NOT
86485: OR
86486: PUSH
86487: LD_VAR 0 2
86491: NOT
86492: OR
86493: IFFALSE 86497
// exit ;
86495: GO 86558
// for i in kinds do
86497: LD_ADDR_VAR 0 4
86501: PUSH
86502: LD_VAR 0 2
86506: PUSH
86507: FOR_IN
86508: IFFALSE 86556
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
86510: LD_ADDR_EXP 70
86514: PUSH
86515: LD_EXP 70
86519: PPUSH
86520: LD_VAR 0 1
86524: PUSH
86525: LD_EXP 70
86529: PUSH
86530: LD_VAR 0 1
86534: ARRAY
86535: PUSH
86536: LD_INT 1
86538: PLUS
86539: PUSH
86540: EMPTY
86541: LIST
86542: LIST
86543: PPUSH
86544: LD_VAR 0 4
86548: PPUSH
86549: CALL 26700 0 3
86553: ST_TO_ADDR
86554: GO 86507
86556: POP
86557: POP
// end ;
86558: LD_VAR 0 3
86562: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
86563: LD_INT 0
86565: PPUSH
// if not mc_bases or not base or not areas then
86566: LD_EXP 36
86570: NOT
86571: PUSH
86572: LD_VAR 0 1
86576: NOT
86577: OR
86578: PUSH
86579: LD_VAR 0 2
86583: NOT
86584: OR
86585: IFFALSE 86589
// exit ;
86587: GO 86614
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
86589: LD_ADDR_EXP 54
86593: PUSH
86594: LD_EXP 54
86598: PPUSH
86599: LD_VAR 0 1
86603: PPUSH
86604: LD_VAR 0 2
86608: PPUSH
86609: CALL_OW 1
86613: ST_TO_ADDR
// end ;
86614: LD_VAR 0 3
86618: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
86619: LD_INT 0
86621: PPUSH
// if not mc_bases or not base or not teleports_exit then
86622: LD_EXP 36
86626: NOT
86627: PUSH
86628: LD_VAR 0 1
86632: NOT
86633: OR
86634: PUSH
86635: LD_VAR 0 2
86639: NOT
86640: OR
86641: IFFALSE 86645
// exit ;
86643: GO 86670
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
86645: LD_ADDR_EXP 71
86649: PUSH
86650: LD_EXP 71
86654: PPUSH
86655: LD_VAR 0 1
86659: PPUSH
86660: LD_VAR 0 2
86664: PPUSH
86665: CALL_OW 1
86669: ST_TO_ADDR
// end ;
86670: LD_VAR 0 3
86674: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
86675: LD_INT 0
86677: PPUSH
86678: PPUSH
86679: PPUSH
// if not mc_bases or not base or not ext_list then
86680: LD_EXP 36
86684: NOT
86685: PUSH
86686: LD_VAR 0 1
86690: NOT
86691: OR
86692: PUSH
86693: LD_VAR 0 5
86697: NOT
86698: OR
86699: IFFALSE 86703
// exit ;
86701: GO 86876
// tmp := GetFacExtXYD ( x , y , d ) ;
86703: LD_ADDR_VAR 0 8
86707: PUSH
86708: LD_VAR 0 2
86712: PPUSH
86713: LD_VAR 0 3
86717: PPUSH
86718: LD_VAR 0 4
86722: PPUSH
86723: CALL 60054 0 3
86727: ST_TO_ADDR
// if not tmp then
86728: LD_VAR 0 8
86732: NOT
86733: IFFALSE 86737
// exit ;
86735: GO 86876
// for i in tmp do
86737: LD_ADDR_VAR 0 7
86741: PUSH
86742: LD_VAR 0 8
86746: PUSH
86747: FOR_IN
86748: IFFALSE 86874
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
86750: LD_ADDR_EXP 41
86754: PUSH
86755: LD_EXP 41
86759: PPUSH
86760: LD_VAR 0 1
86764: PPUSH
86765: LD_EXP 41
86769: PUSH
86770: LD_VAR 0 1
86774: ARRAY
86775: PPUSH
86776: LD_EXP 41
86780: PUSH
86781: LD_VAR 0 1
86785: ARRAY
86786: PUSH
86787: LD_INT 1
86789: PLUS
86790: PPUSH
86791: LD_VAR 0 5
86795: PUSH
86796: LD_INT 1
86798: ARRAY
86799: PUSH
86800: LD_VAR 0 7
86804: PUSH
86805: LD_INT 1
86807: ARRAY
86808: PUSH
86809: LD_VAR 0 7
86813: PUSH
86814: LD_INT 2
86816: ARRAY
86817: PUSH
86818: LD_VAR 0 7
86822: PUSH
86823: LD_INT 3
86825: ARRAY
86826: PUSH
86827: EMPTY
86828: LIST
86829: LIST
86830: LIST
86831: LIST
86832: PPUSH
86833: CALL_OW 2
86837: PPUSH
86838: CALL_OW 1
86842: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
86843: LD_ADDR_VAR 0 5
86847: PUSH
86848: LD_VAR 0 5
86852: PPUSH
86853: LD_INT 1
86855: PPUSH
86856: CALL_OW 3
86860: ST_TO_ADDR
// if not ext_list then
86861: LD_VAR 0 5
86865: NOT
86866: IFFALSE 86872
// exit ;
86868: POP
86869: POP
86870: GO 86876
// end ;
86872: GO 86747
86874: POP
86875: POP
// end ;
86876: LD_VAR 0 6
86880: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
86881: LD_INT 0
86883: PPUSH
// if not mc_bases or not base or not weapon_list then
86884: LD_EXP 36
86888: NOT
86889: PUSH
86890: LD_VAR 0 1
86894: NOT
86895: OR
86896: PUSH
86897: LD_VAR 0 2
86901: NOT
86902: OR
86903: IFFALSE 86907
// exit ;
86905: GO 86932
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
86907: LD_ADDR_EXP 75
86911: PUSH
86912: LD_EXP 75
86916: PPUSH
86917: LD_VAR 0 1
86921: PPUSH
86922: LD_VAR 0 2
86926: PPUSH
86927: CALL_OW 1
86931: ST_TO_ADDR
// end ;
86932: LD_VAR 0 3
86936: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
86937: LD_INT 0
86939: PPUSH
// if not mc_bases or not base or not tech_list then
86940: LD_EXP 36
86944: NOT
86945: PUSH
86946: LD_VAR 0 1
86950: NOT
86951: OR
86952: PUSH
86953: LD_VAR 0 2
86957: NOT
86958: OR
86959: IFFALSE 86963
// exit ;
86961: GO 86988
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
86963: LD_ADDR_EXP 63
86967: PUSH
86968: LD_EXP 63
86972: PPUSH
86973: LD_VAR 0 1
86977: PPUSH
86978: LD_VAR 0 2
86982: PPUSH
86983: CALL_OW 1
86987: ST_TO_ADDR
// end ;
86988: LD_VAR 0 3
86992: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
86993: LD_INT 0
86995: PPUSH
// if not mc_bases or not parking_area or not base then
86996: LD_EXP 36
87000: NOT
87001: PUSH
87002: LD_VAR 0 2
87006: NOT
87007: OR
87008: PUSH
87009: LD_VAR 0 1
87013: NOT
87014: OR
87015: IFFALSE 87019
// exit ;
87017: GO 87044
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
87019: LD_ADDR_EXP 60
87023: PUSH
87024: LD_EXP 60
87028: PPUSH
87029: LD_VAR 0 1
87033: PPUSH
87034: LD_VAR 0 2
87038: PPUSH
87039: CALL_OW 1
87043: ST_TO_ADDR
// end ;
87044: LD_VAR 0 3
87048: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
87049: LD_INT 0
87051: PPUSH
// if not mc_bases or not base or not scan_area then
87052: LD_EXP 36
87056: NOT
87057: PUSH
87058: LD_VAR 0 1
87062: NOT
87063: OR
87064: PUSH
87065: LD_VAR 0 2
87069: NOT
87070: OR
87071: IFFALSE 87075
// exit ;
87073: GO 87100
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
87075: LD_ADDR_EXP 61
87079: PUSH
87080: LD_EXP 61
87084: PPUSH
87085: LD_VAR 0 1
87089: PPUSH
87090: LD_VAR 0 2
87094: PPUSH
87095: CALL_OW 1
87099: ST_TO_ADDR
// end ;
87100: LD_VAR 0 3
87104: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
87105: LD_INT 0
87107: PPUSH
87108: PPUSH
// if not mc_bases or not base then
87109: LD_EXP 36
87113: NOT
87114: PUSH
87115: LD_VAR 0 1
87119: NOT
87120: OR
87121: IFFALSE 87125
// exit ;
87123: GO 87189
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
87125: LD_ADDR_VAR 0 3
87129: PUSH
87130: LD_INT 1
87132: PUSH
87133: LD_INT 2
87135: PUSH
87136: LD_INT 3
87138: PUSH
87139: LD_INT 4
87141: PUSH
87142: LD_INT 11
87144: PUSH
87145: EMPTY
87146: LIST
87147: LIST
87148: LIST
87149: LIST
87150: LIST
87151: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
87152: LD_ADDR_EXP 63
87156: PUSH
87157: LD_EXP 63
87161: PPUSH
87162: LD_VAR 0 1
87166: PPUSH
87167: LD_EXP 63
87171: PUSH
87172: LD_VAR 0 1
87176: ARRAY
87177: PUSH
87178: LD_VAR 0 3
87182: DIFF
87183: PPUSH
87184: CALL_OW 1
87188: ST_TO_ADDR
// end ;
87189: LD_VAR 0 2
87193: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
87194: LD_INT 0
87196: PPUSH
// result := mc_vehicles [ base ] ;
87197: LD_ADDR_VAR 0 3
87201: PUSH
87202: LD_EXP 55
87206: PUSH
87207: LD_VAR 0 1
87211: ARRAY
87212: ST_TO_ADDR
// if onlyCombat then
87213: LD_VAR 0 2
87217: IFFALSE 87382
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
87219: LD_ADDR_VAR 0 3
87223: PUSH
87224: LD_VAR 0 3
87228: PUSH
87229: LD_VAR 0 3
87233: PPUSH
87234: LD_INT 2
87236: PUSH
87237: LD_INT 34
87239: PUSH
87240: LD_INT 12
87242: PUSH
87243: EMPTY
87244: LIST
87245: LIST
87246: PUSH
87247: LD_INT 34
87249: PUSH
87250: LD_INT 51
87252: PUSH
87253: EMPTY
87254: LIST
87255: LIST
87256: PUSH
87257: LD_INT 34
87259: PUSH
87260: LD_EXP 30
87264: PUSH
87265: EMPTY
87266: LIST
87267: LIST
87268: PUSH
87269: LD_INT 34
87271: PUSH
87272: LD_INT 32
87274: PUSH
87275: EMPTY
87276: LIST
87277: LIST
87278: PUSH
87279: LD_INT 34
87281: PUSH
87282: LD_INT 13
87284: PUSH
87285: EMPTY
87286: LIST
87287: LIST
87288: PUSH
87289: LD_INT 34
87291: PUSH
87292: LD_INT 52
87294: PUSH
87295: EMPTY
87296: LIST
87297: LIST
87298: PUSH
87299: LD_INT 34
87301: PUSH
87302: LD_INT 14
87304: PUSH
87305: EMPTY
87306: LIST
87307: LIST
87308: PUSH
87309: LD_INT 34
87311: PUSH
87312: LD_INT 53
87314: PUSH
87315: EMPTY
87316: LIST
87317: LIST
87318: PUSH
87319: LD_INT 34
87321: PUSH
87322: LD_EXP 29
87326: PUSH
87327: EMPTY
87328: LIST
87329: LIST
87330: PUSH
87331: LD_INT 34
87333: PUSH
87334: LD_INT 31
87336: PUSH
87337: EMPTY
87338: LIST
87339: LIST
87340: PUSH
87341: LD_INT 34
87343: PUSH
87344: LD_INT 48
87346: PUSH
87347: EMPTY
87348: LIST
87349: LIST
87350: PUSH
87351: LD_INT 34
87353: PUSH
87354: LD_INT 8
87356: PUSH
87357: EMPTY
87358: LIST
87359: LIST
87360: PUSH
87361: EMPTY
87362: LIST
87363: LIST
87364: LIST
87365: LIST
87366: LIST
87367: LIST
87368: LIST
87369: LIST
87370: LIST
87371: LIST
87372: LIST
87373: LIST
87374: LIST
87375: PPUSH
87376: CALL_OW 72
87380: DIFF
87381: ST_TO_ADDR
// end ; end_of_file
87382: LD_VAR 0 3
87386: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
87387: LD_INT 0
87389: PPUSH
87390: PPUSH
87391: PPUSH
// if not mc_bases or not skirmish then
87392: LD_EXP 36
87396: NOT
87397: PUSH
87398: LD_EXP 34
87402: NOT
87403: OR
87404: IFFALSE 87408
// exit ;
87406: GO 87573
// for i = 1 to mc_bases do
87408: LD_ADDR_VAR 0 4
87412: PUSH
87413: DOUBLE
87414: LD_INT 1
87416: DEC
87417: ST_TO_ADDR
87418: LD_EXP 36
87422: PUSH
87423: FOR_TO
87424: IFFALSE 87571
// begin if sci in mc_bases [ i ] then
87426: LD_VAR 0 2
87430: PUSH
87431: LD_EXP 36
87435: PUSH
87436: LD_VAR 0 4
87440: ARRAY
87441: IN
87442: IFFALSE 87569
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
87444: LD_ADDR_EXP 65
87448: PUSH
87449: LD_EXP 65
87453: PPUSH
87454: LD_VAR 0 4
87458: PUSH
87459: LD_EXP 65
87463: PUSH
87464: LD_VAR 0 4
87468: ARRAY
87469: PUSH
87470: LD_INT 1
87472: PLUS
87473: PUSH
87474: EMPTY
87475: LIST
87476: LIST
87477: PPUSH
87478: LD_VAR 0 1
87482: PPUSH
87483: CALL 26700 0 3
87487: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
87488: LD_ADDR_VAR 0 5
87492: PUSH
87493: LD_EXP 36
87497: PUSH
87498: LD_VAR 0 4
87502: ARRAY
87503: PPUSH
87504: LD_INT 2
87506: PUSH
87507: LD_INT 30
87509: PUSH
87510: LD_INT 0
87512: PUSH
87513: EMPTY
87514: LIST
87515: LIST
87516: PUSH
87517: LD_INT 30
87519: PUSH
87520: LD_INT 1
87522: PUSH
87523: EMPTY
87524: LIST
87525: LIST
87526: PUSH
87527: EMPTY
87528: LIST
87529: LIST
87530: LIST
87531: PPUSH
87532: CALL_OW 72
87536: PPUSH
87537: LD_VAR 0 1
87541: PPUSH
87542: CALL_OW 74
87546: ST_TO_ADDR
// if tmp then
87547: LD_VAR 0 5
87551: IFFALSE 87567
// ComStandNearbyBuilding ( ape , tmp ) ;
87553: LD_VAR 0 1
87557: PPUSH
87558: LD_VAR 0 5
87562: PPUSH
87563: CALL 21377 0 2
// break ;
87567: GO 87571
// end ; end ;
87569: GO 87423
87571: POP
87572: POP
// end ;
87573: LD_VAR 0 3
87577: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
87578: LD_INT 0
87580: PPUSH
87581: PPUSH
87582: PPUSH
// if not mc_bases or not skirmish then
87583: LD_EXP 36
87587: NOT
87588: PUSH
87589: LD_EXP 34
87593: NOT
87594: OR
87595: IFFALSE 87599
// exit ;
87597: GO 87688
// for i = 1 to mc_bases do
87599: LD_ADDR_VAR 0 4
87603: PUSH
87604: DOUBLE
87605: LD_INT 1
87607: DEC
87608: ST_TO_ADDR
87609: LD_EXP 36
87613: PUSH
87614: FOR_TO
87615: IFFALSE 87686
// begin if building in mc_busy_turret_list [ i ] then
87617: LD_VAR 0 1
87621: PUSH
87622: LD_EXP 46
87626: PUSH
87627: LD_VAR 0 4
87631: ARRAY
87632: IN
87633: IFFALSE 87684
// begin tmp := mc_busy_turret_list [ i ] diff building ;
87635: LD_ADDR_VAR 0 5
87639: PUSH
87640: LD_EXP 46
87644: PUSH
87645: LD_VAR 0 4
87649: ARRAY
87650: PUSH
87651: LD_VAR 0 1
87655: DIFF
87656: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
87657: LD_ADDR_EXP 46
87661: PUSH
87662: LD_EXP 46
87666: PPUSH
87667: LD_VAR 0 4
87671: PPUSH
87672: LD_VAR 0 5
87676: PPUSH
87677: CALL_OW 1
87681: ST_TO_ADDR
// break ;
87682: GO 87686
// end ; end ;
87684: GO 87614
87686: POP
87687: POP
// end ;
87688: LD_VAR 0 3
87692: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
87693: LD_INT 0
87695: PPUSH
87696: PPUSH
87697: PPUSH
// if not mc_bases or not skirmish then
87698: LD_EXP 36
87702: NOT
87703: PUSH
87704: LD_EXP 34
87708: NOT
87709: OR
87710: IFFALSE 87714
// exit ;
87712: GO 87913
// for i = 1 to mc_bases do
87714: LD_ADDR_VAR 0 5
87718: PUSH
87719: DOUBLE
87720: LD_INT 1
87722: DEC
87723: ST_TO_ADDR
87724: LD_EXP 36
87728: PUSH
87729: FOR_TO
87730: IFFALSE 87911
// if building in mc_bases [ i ] then
87732: LD_VAR 0 1
87736: PUSH
87737: LD_EXP 36
87741: PUSH
87742: LD_VAR 0 5
87746: ARRAY
87747: IN
87748: IFFALSE 87909
// begin tmp := mc_bases [ i ] diff building ;
87750: LD_ADDR_VAR 0 6
87754: PUSH
87755: LD_EXP 36
87759: PUSH
87760: LD_VAR 0 5
87764: ARRAY
87765: PUSH
87766: LD_VAR 0 1
87770: DIFF
87771: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
87772: LD_ADDR_EXP 36
87776: PUSH
87777: LD_EXP 36
87781: PPUSH
87782: LD_VAR 0 5
87786: PPUSH
87787: LD_VAR 0 6
87791: PPUSH
87792: CALL_OW 1
87796: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
87797: LD_VAR 0 1
87801: PUSH
87802: LD_EXP 44
87806: PUSH
87807: LD_VAR 0 5
87811: ARRAY
87812: IN
87813: IFFALSE 87852
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
87815: LD_ADDR_EXP 44
87819: PUSH
87820: LD_EXP 44
87824: PPUSH
87825: LD_VAR 0 5
87829: PPUSH
87830: LD_EXP 44
87834: PUSH
87835: LD_VAR 0 5
87839: ARRAY
87840: PUSH
87841: LD_VAR 0 1
87845: DIFF
87846: PPUSH
87847: CALL_OW 1
87851: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
87852: LD_VAR 0 1
87856: PUSH
87857: LD_EXP 45
87861: PUSH
87862: LD_VAR 0 5
87866: ARRAY
87867: IN
87868: IFFALSE 87907
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
87870: LD_ADDR_EXP 45
87874: PUSH
87875: LD_EXP 45
87879: PPUSH
87880: LD_VAR 0 5
87884: PPUSH
87885: LD_EXP 45
87889: PUSH
87890: LD_VAR 0 5
87894: ARRAY
87895: PUSH
87896: LD_VAR 0 1
87900: DIFF
87901: PPUSH
87902: CALL_OW 1
87906: ST_TO_ADDR
// break ;
87907: GO 87911
// end ;
87909: GO 87729
87911: POP
87912: POP
// end ;
87913: LD_VAR 0 4
87917: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
87918: LD_INT 0
87920: PPUSH
87921: PPUSH
87922: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
87923: LD_EXP 36
87927: NOT
87928: PUSH
87929: LD_EXP 34
87933: NOT
87934: OR
87935: PUSH
87936: LD_VAR 0 3
87940: PUSH
87941: LD_EXP 62
87945: IN
87946: NOT
87947: OR
87948: IFFALSE 87952
// exit ;
87950: GO 88075
// for i = 1 to mc_vehicles do
87952: LD_ADDR_VAR 0 6
87956: PUSH
87957: DOUBLE
87958: LD_INT 1
87960: DEC
87961: ST_TO_ADDR
87962: LD_EXP 55
87966: PUSH
87967: FOR_TO
87968: IFFALSE 88073
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
87970: LD_VAR 0 2
87974: PUSH
87975: LD_EXP 55
87979: PUSH
87980: LD_VAR 0 6
87984: ARRAY
87985: IN
87986: PUSH
87987: LD_VAR 0 1
87991: PUSH
87992: LD_EXP 55
87996: PUSH
87997: LD_VAR 0 6
88001: ARRAY
88002: IN
88003: OR
88004: IFFALSE 88071
// begin tmp := mc_vehicles [ i ] diff old ;
88006: LD_ADDR_VAR 0 7
88010: PUSH
88011: LD_EXP 55
88015: PUSH
88016: LD_VAR 0 6
88020: ARRAY
88021: PUSH
88022: LD_VAR 0 2
88026: DIFF
88027: ST_TO_ADDR
// tmp := tmp diff new ;
88028: LD_ADDR_VAR 0 7
88032: PUSH
88033: LD_VAR 0 7
88037: PUSH
88038: LD_VAR 0 1
88042: DIFF
88043: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
88044: LD_ADDR_EXP 55
88048: PUSH
88049: LD_EXP 55
88053: PPUSH
88054: LD_VAR 0 6
88058: PPUSH
88059: LD_VAR 0 7
88063: PPUSH
88064: CALL_OW 1
88068: ST_TO_ADDR
// break ;
88069: GO 88073
// end ;
88071: GO 87967
88073: POP
88074: POP
// end ;
88075: LD_VAR 0 5
88079: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
88080: LD_INT 0
88082: PPUSH
88083: PPUSH
88084: PPUSH
88085: PPUSH
// if not mc_bases or not skirmish then
88086: LD_EXP 36
88090: NOT
88091: PUSH
88092: LD_EXP 34
88096: NOT
88097: OR
88098: IFFALSE 88102
// exit ;
88100: GO 88485
// side := GetSide ( vehicle ) ;
88102: LD_ADDR_VAR 0 5
88106: PUSH
88107: LD_VAR 0 1
88111: PPUSH
88112: CALL_OW 255
88116: ST_TO_ADDR
// for i = 1 to mc_bases do
88117: LD_ADDR_VAR 0 4
88121: PUSH
88122: DOUBLE
88123: LD_INT 1
88125: DEC
88126: ST_TO_ADDR
88127: LD_EXP 36
88131: PUSH
88132: FOR_TO
88133: IFFALSE 88483
// begin if factory in mc_bases [ i ] then
88135: LD_VAR 0 2
88139: PUSH
88140: LD_EXP 36
88144: PUSH
88145: LD_VAR 0 4
88149: ARRAY
88150: IN
88151: IFFALSE 88481
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
88153: LD_EXP 58
88157: PUSH
88158: LD_VAR 0 4
88162: ARRAY
88163: PUSH
88164: LD_EXP 47
88168: PUSH
88169: LD_VAR 0 4
88173: ARRAY
88174: LESS
88175: PUSH
88176: LD_VAR 0 1
88180: PPUSH
88181: CALL_OW 264
88185: PUSH
88186: LD_INT 31
88188: PUSH
88189: LD_INT 32
88191: PUSH
88192: LD_INT 51
88194: PUSH
88195: LD_EXP 30
88199: PUSH
88200: LD_INT 12
88202: PUSH
88203: LD_INT 30
88205: PUSH
88206: LD_EXP 29
88210: PUSH
88211: LD_INT 11
88213: PUSH
88214: LD_INT 53
88216: PUSH
88217: LD_INT 14
88219: PUSH
88220: LD_EXP 33
88224: PUSH
88225: LD_INT 29
88227: PUSH
88228: LD_EXP 31
88232: PUSH
88233: LD_INT 13
88235: PUSH
88236: LD_INT 52
88238: PUSH
88239: LD_INT 48
88241: PUSH
88242: LD_INT 8
88244: PUSH
88245: EMPTY
88246: LIST
88247: LIST
88248: LIST
88249: LIST
88250: LIST
88251: LIST
88252: LIST
88253: LIST
88254: LIST
88255: LIST
88256: LIST
88257: LIST
88258: LIST
88259: LIST
88260: LIST
88261: LIST
88262: LIST
88263: IN
88264: NOT
88265: AND
88266: IFFALSE 88307
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) else
88268: LD_ADDR_EXP 58
88272: PUSH
88273: LD_EXP 58
88277: PPUSH
88278: LD_VAR 0 4
88282: PPUSH
88283: LD_EXP 58
88287: PUSH
88288: LD_VAR 0 4
88292: ARRAY
88293: PUSH
88294: LD_VAR 0 1
88298: ADD
88299: PPUSH
88300: CALL_OW 1
88304: ST_TO_ADDR
88305: GO 88351
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
88307: LD_ADDR_EXP 55
88311: PUSH
88312: LD_EXP 55
88316: PPUSH
88317: LD_VAR 0 4
88321: PUSH
88322: LD_EXP 55
88326: PUSH
88327: LD_VAR 0 4
88331: ARRAY
88332: PUSH
88333: LD_INT 1
88335: PLUS
88336: PUSH
88337: EMPTY
88338: LIST
88339: LIST
88340: PPUSH
88341: LD_VAR 0 1
88345: PPUSH
88346: CALL 26700 0 3
88350: ST_TO_ADDR
// if not mc_scan [ i ] then
88351: LD_EXP 59
88355: PUSH
88356: LD_VAR 0 4
88360: ARRAY
88361: NOT
88362: IFFALSE 88481
// begin if GetControl ( vehicle ) = control_remote then
88364: LD_VAR 0 1
88368: PPUSH
88369: CALL_OW 263
88373: PUSH
88374: LD_INT 2
88376: EQUAL
88377: IFFALSE 88397
// repeat wait ( 0 0$1 ) ;
88379: LD_INT 35
88381: PPUSH
88382: CALL_OW 67
// until IsControledBy ( vehicle ) ;
88386: LD_VAR 0 1
88390: PPUSH
88391: CALL_OW 312
88395: IFFALSE 88379
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
88397: LD_VAR 0 1
88401: PPUSH
88402: LD_EXP 60
88406: PUSH
88407: LD_VAR 0 4
88411: ARRAY
88412: PPUSH
88413: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
88417: LD_VAR 0 1
88421: PPUSH
88422: CALL_OW 263
88426: PUSH
88427: LD_INT 1
88429: NONEQUAL
88430: IFFALSE 88434
// break ;
88432: GO 88483
// repeat wait ( 0 0$1 ) ;
88434: LD_INT 35
88436: PPUSH
88437: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
88441: LD_VAR 0 1
88445: PPUSH
88446: LD_EXP 60
88450: PUSH
88451: LD_VAR 0 4
88455: ARRAY
88456: PPUSH
88457: CALL_OW 308
88461: IFFALSE 88434
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
88463: LD_VAR 0 1
88467: PPUSH
88468: CALL_OW 311
88472: PPUSH
88473: CALL_OW 121
// exit ;
88477: POP
88478: POP
88479: GO 88485
// end ; end ; end ;
88481: GO 88132
88483: POP
88484: POP
// end ;
88485: LD_VAR 0 3
88489: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
88490: LD_INT 0
88492: PPUSH
88493: PPUSH
88494: PPUSH
88495: PPUSH
// if not mc_bases or not skirmish then
88496: LD_EXP 36
88500: NOT
88501: PUSH
88502: LD_EXP 34
88506: NOT
88507: OR
88508: IFFALSE 88512
// exit ;
88510: GO 88865
// repeat wait ( 0 0$1 ) ;
88512: LD_INT 35
88514: PPUSH
88515: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
88519: LD_VAR 0 2
88523: PPUSH
88524: LD_VAR 0 3
88528: PPUSH
88529: CALL_OW 284
88533: IFFALSE 88512
// if GetResourceTypeXY ( x , y ) = mat_artefact then
88535: LD_VAR 0 2
88539: PPUSH
88540: LD_VAR 0 3
88544: PPUSH
88545: CALL_OW 283
88549: PUSH
88550: LD_INT 4
88552: EQUAL
88553: IFFALSE 88557
// exit ;
88555: GO 88865
// for i = 1 to mc_bases do
88557: LD_ADDR_VAR 0 7
88561: PUSH
88562: DOUBLE
88563: LD_INT 1
88565: DEC
88566: ST_TO_ADDR
88567: LD_EXP 36
88571: PUSH
88572: FOR_TO
88573: IFFALSE 88863
// begin if mc_crates_area [ i ] then
88575: LD_EXP 54
88579: PUSH
88580: LD_VAR 0 7
88584: ARRAY
88585: IFFALSE 88696
// for j in mc_crates_area [ i ] do
88587: LD_ADDR_VAR 0 8
88591: PUSH
88592: LD_EXP 54
88596: PUSH
88597: LD_VAR 0 7
88601: ARRAY
88602: PUSH
88603: FOR_IN
88604: IFFALSE 88694
// if InArea ( x , y , j ) then
88606: LD_VAR 0 2
88610: PPUSH
88611: LD_VAR 0 3
88615: PPUSH
88616: LD_VAR 0 8
88620: PPUSH
88621: CALL_OW 309
88625: IFFALSE 88692
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
88627: LD_ADDR_EXP 52
88631: PUSH
88632: LD_EXP 52
88636: PPUSH
88637: LD_VAR 0 7
88641: PUSH
88642: LD_EXP 52
88646: PUSH
88647: LD_VAR 0 7
88651: ARRAY
88652: PUSH
88653: LD_INT 1
88655: PLUS
88656: PUSH
88657: EMPTY
88658: LIST
88659: LIST
88660: PPUSH
88661: LD_VAR 0 4
88665: PUSH
88666: LD_VAR 0 2
88670: PUSH
88671: LD_VAR 0 3
88675: PUSH
88676: EMPTY
88677: LIST
88678: LIST
88679: LIST
88680: PPUSH
88681: CALL 26700 0 3
88685: ST_TO_ADDR
// exit ;
88686: POP
88687: POP
88688: POP
88689: POP
88690: GO 88865
// end ;
88692: GO 88603
88694: POP
88695: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
88696: LD_ADDR_VAR 0 9
88700: PUSH
88701: LD_EXP 36
88705: PUSH
88706: LD_VAR 0 7
88710: ARRAY
88711: PPUSH
88712: LD_INT 2
88714: PUSH
88715: LD_INT 30
88717: PUSH
88718: LD_INT 0
88720: PUSH
88721: EMPTY
88722: LIST
88723: LIST
88724: PUSH
88725: LD_INT 30
88727: PUSH
88728: LD_INT 1
88730: PUSH
88731: EMPTY
88732: LIST
88733: LIST
88734: PUSH
88735: EMPTY
88736: LIST
88737: LIST
88738: LIST
88739: PPUSH
88740: CALL_OW 72
88744: ST_TO_ADDR
// if not depot then
88745: LD_VAR 0 9
88749: NOT
88750: IFFALSE 88754
// continue ;
88752: GO 88572
// for j in depot do
88754: LD_ADDR_VAR 0 8
88758: PUSH
88759: LD_VAR 0 9
88763: PUSH
88764: FOR_IN
88765: IFFALSE 88859
// if GetDistUnitXY ( j , x , y ) < 30 then
88767: LD_VAR 0 8
88771: PPUSH
88772: LD_VAR 0 2
88776: PPUSH
88777: LD_VAR 0 3
88781: PPUSH
88782: CALL_OW 297
88786: PUSH
88787: LD_INT 30
88789: LESS
88790: IFFALSE 88857
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
88792: LD_ADDR_EXP 52
88796: PUSH
88797: LD_EXP 52
88801: PPUSH
88802: LD_VAR 0 7
88806: PUSH
88807: LD_EXP 52
88811: PUSH
88812: LD_VAR 0 7
88816: ARRAY
88817: PUSH
88818: LD_INT 1
88820: PLUS
88821: PUSH
88822: EMPTY
88823: LIST
88824: LIST
88825: PPUSH
88826: LD_VAR 0 4
88830: PUSH
88831: LD_VAR 0 2
88835: PUSH
88836: LD_VAR 0 3
88840: PUSH
88841: EMPTY
88842: LIST
88843: LIST
88844: LIST
88845: PPUSH
88846: CALL 26700 0 3
88850: ST_TO_ADDR
// exit ;
88851: POP
88852: POP
88853: POP
88854: POP
88855: GO 88865
// end ;
88857: GO 88764
88859: POP
88860: POP
// end ;
88861: GO 88572
88863: POP
88864: POP
// end ;
88865: LD_VAR 0 6
88869: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
88870: LD_INT 0
88872: PPUSH
88873: PPUSH
88874: PPUSH
88875: PPUSH
// if not mc_bases or not skirmish then
88876: LD_EXP 36
88880: NOT
88881: PUSH
88882: LD_EXP 34
88886: NOT
88887: OR
88888: IFFALSE 88892
// exit ;
88890: GO 89169
// side := GetSide ( lab ) ;
88892: LD_ADDR_VAR 0 4
88896: PUSH
88897: LD_VAR 0 2
88901: PPUSH
88902: CALL_OW 255
88906: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
88907: LD_VAR 0 4
88911: PUSH
88912: LD_EXP 62
88916: IN
88917: NOT
88918: PUSH
88919: LD_EXP 63
88923: NOT
88924: OR
88925: PUSH
88926: LD_EXP 36
88930: NOT
88931: OR
88932: IFFALSE 88936
// exit ;
88934: GO 89169
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
88936: LD_ADDR_EXP 63
88940: PUSH
88941: LD_EXP 63
88945: PPUSH
88946: LD_VAR 0 4
88950: PPUSH
88951: LD_EXP 63
88955: PUSH
88956: LD_VAR 0 4
88960: ARRAY
88961: PUSH
88962: LD_VAR 0 1
88966: DIFF
88967: PPUSH
88968: CALL_OW 1
88972: ST_TO_ADDR
// for i = 1 to mc_bases do
88973: LD_ADDR_VAR 0 5
88977: PUSH
88978: DOUBLE
88979: LD_INT 1
88981: DEC
88982: ST_TO_ADDR
88983: LD_EXP 36
88987: PUSH
88988: FOR_TO
88989: IFFALSE 89167
// begin if lab in mc_bases [ i ] then
88991: LD_VAR 0 2
88995: PUSH
88996: LD_EXP 36
89000: PUSH
89001: LD_VAR 0 5
89005: ARRAY
89006: IN
89007: IFFALSE 89165
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
89009: LD_VAR 0 1
89013: PUSH
89014: LD_INT 11
89016: PUSH
89017: LD_INT 4
89019: PUSH
89020: LD_INT 3
89022: PUSH
89023: LD_INT 2
89025: PUSH
89026: EMPTY
89027: LIST
89028: LIST
89029: LIST
89030: LIST
89031: IN
89032: PUSH
89033: LD_EXP 66
89037: PUSH
89038: LD_VAR 0 5
89042: ARRAY
89043: AND
89044: IFFALSE 89165
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
89046: LD_ADDR_VAR 0 6
89050: PUSH
89051: LD_EXP 66
89055: PUSH
89056: LD_VAR 0 5
89060: ARRAY
89061: PUSH
89062: LD_INT 1
89064: ARRAY
89065: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
89066: LD_ADDR_EXP 66
89070: PUSH
89071: LD_EXP 66
89075: PPUSH
89076: LD_VAR 0 5
89080: PPUSH
89081: EMPTY
89082: PPUSH
89083: CALL_OW 1
89087: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
89088: LD_VAR 0 6
89092: PPUSH
89093: LD_INT 0
89095: PPUSH
89096: CALL_OW 109
// ComExitBuilding ( tmp ) ;
89100: LD_VAR 0 6
89104: PPUSH
89105: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
89109: LD_ADDR_EXP 65
89113: PUSH
89114: LD_EXP 65
89118: PPUSH
89119: LD_VAR 0 5
89123: PPUSH
89124: LD_EXP 65
89128: PUSH
89129: LD_VAR 0 5
89133: ARRAY
89134: PPUSH
89135: LD_INT 1
89137: PPUSH
89138: LD_VAR 0 6
89142: PPUSH
89143: CALL_OW 2
89147: PPUSH
89148: CALL_OW 1
89152: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
89153: LD_VAR 0 5
89157: PPUSH
89158: LD_INT 112
89160: PPUSH
89161: CALL 66638 0 2
// end ; end ; end ;
89165: GO 88988
89167: POP
89168: POP
// end ;
89169: LD_VAR 0 3
89173: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
89174: LD_INT 0
89176: PPUSH
89177: PPUSH
89178: PPUSH
89179: PPUSH
89180: PPUSH
89181: PPUSH
89182: PPUSH
89183: PPUSH
// if not mc_bases or not skirmish then
89184: LD_EXP 36
89188: NOT
89189: PUSH
89190: LD_EXP 34
89194: NOT
89195: OR
89196: IFFALSE 89200
// exit ;
89198: GO 90216
// for i = 1 to mc_bases do
89200: LD_ADDR_VAR 0 3
89204: PUSH
89205: DOUBLE
89206: LD_INT 1
89208: DEC
89209: ST_TO_ADDR
89210: LD_EXP 36
89214: PUSH
89215: FOR_TO
89216: IFFALSE 90214
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
89218: LD_VAR 0 1
89222: PUSH
89223: LD_EXP 36
89227: PUSH
89228: LD_VAR 0 3
89232: ARRAY
89233: IN
89234: PUSH
89235: LD_VAR 0 1
89239: PUSH
89240: LD_EXP 43
89244: PUSH
89245: LD_VAR 0 3
89249: ARRAY
89250: IN
89251: OR
89252: PUSH
89253: LD_VAR 0 1
89257: PUSH
89258: LD_EXP 55
89262: PUSH
89263: LD_VAR 0 3
89267: ARRAY
89268: IN
89269: OR
89270: PUSH
89271: LD_VAR 0 1
89275: PUSH
89276: LD_EXP 65
89280: PUSH
89281: LD_VAR 0 3
89285: ARRAY
89286: IN
89287: OR
89288: PUSH
89289: LD_VAR 0 1
89293: PUSH
89294: LD_EXP 66
89298: PUSH
89299: LD_VAR 0 3
89303: ARRAY
89304: IN
89305: OR
89306: IFFALSE 90212
// begin if un in mc_ape [ i ] then
89308: LD_VAR 0 1
89312: PUSH
89313: LD_EXP 65
89317: PUSH
89318: LD_VAR 0 3
89322: ARRAY
89323: IN
89324: IFFALSE 89363
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
89326: LD_ADDR_EXP 65
89330: PUSH
89331: LD_EXP 65
89335: PPUSH
89336: LD_VAR 0 3
89340: PPUSH
89341: LD_EXP 65
89345: PUSH
89346: LD_VAR 0 3
89350: ARRAY
89351: PUSH
89352: LD_VAR 0 1
89356: DIFF
89357: PPUSH
89358: CALL_OW 1
89362: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
89363: LD_VAR 0 1
89367: PUSH
89368: LD_EXP 66
89372: PUSH
89373: LD_VAR 0 3
89377: ARRAY
89378: IN
89379: IFFALSE 89403
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
89381: LD_ADDR_EXP 66
89385: PUSH
89386: LD_EXP 66
89390: PPUSH
89391: LD_VAR 0 3
89395: PPUSH
89396: EMPTY
89397: PPUSH
89398: CALL_OW 1
89402: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] ) then
89403: LD_VAR 0 1
89407: PPUSH
89408: CALL_OW 247
89412: PUSH
89413: LD_INT 2
89415: EQUAL
89416: PUSH
89417: LD_VAR 0 1
89421: PPUSH
89422: CALL_OW 110
89426: PUSH
89427: LD_INT 20
89429: EQUAL
89430: PUSH
89431: LD_VAR 0 1
89435: PUSH
89436: LD_EXP 58
89440: PUSH
89441: LD_VAR 0 3
89445: ARRAY
89446: IN
89447: OR
89448: AND
89449: IFFALSE 89552
// begin fac := MC_GetBuilding ( i , b_factory ) ;
89451: LD_ADDR_VAR 0 8
89455: PUSH
89456: LD_VAR 0 3
89460: PPUSH
89461: LD_INT 3
89463: PPUSH
89464: CALL 86211 0 2
89468: ST_TO_ADDR
// if fac then
89469: LD_VAR 0 8
89473: IFFALSE 89552
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
89475: LD_ADDR_VAR 0 9
89479: PUSH
89480: LD_VAR 0 8
89484: PPUSH
89485: LD_VAR 0 1
89489: PPUSH
89490: CALL_OW 265
89494: PPUSH
89495: LD_VAR 0 1
89499: PPUSH
89500: CALL_OW 262
89504: PPUSH
89505: LD_VAR 0 1
89509: PPUSH
89510: CALL_OW 263
89514: PPUSH
89515: LD_VAR 0 1
89519: PPUSH
89520: CALL_OW 264
89524: PPUSH
89525: CALL 24300 0 5
89529: ST_TO_ADDR
// if components then
89530: LD_VAR 0 9
89534: IFFALSE 89550
// MC_InsertProduceList ( i , components ) ;
89536: LD_VAR 0 3
89540: PPUSH
89541: LD_VAR 0 9
89545: PPUSH
89546: CALL 85839 0 2
// break ;
89550: GO 90214
// end ; end ; if GetType ( un ) = unit_building then
89552: LD_VAR 0 1
89556: PPUSH
89557: CALL_OW 247
89561: PUSH
89562: LD_INT 3
89564: EQUAL
89565: IFFALSE 89880
// begin btype := GetBType ( un ) ;
89567: LD_ADDR_VAR 0 5
89571: PUSH
89572: LD_VAR 0 1
89576: PPUSH
89577: CALL_OW 266
89581: ST_TO_ADDR
// if btype = b_warehouse then
89582: LD_VAR 0 5
89586: PUSH
89587: LD_INT 1
89589: EQUAL
89590: IFFALSE 89608
// begin btype := b_depot ;
89592: LD_ADDR_VAR 0 5
89596: PUSH
89597: LD_INT 0
89599: ST_TO_ADDR
// pos := 1 ;
89600: LD_ADDR_VAR 0 6
89604: PUSH
89605: LD_INT 1
89607: ST_TO_ADDR
// end ; if btype = b_factory then
89608: LD_VAR 0 5
89612: PUSH
89613: LD_INT 3
89615: EQUAL
89616: IFFALSE 89634
// begin btype := b_workshop ;
89618: LD_ADDR_VAR 0 5
89622: PUSH
89623: LD_INT 2
89625: ST_TO_ADDR
// pos := 1 ;
89626: LD_ADDR_VAR 0 6
89630: PUSH
89631: LD_INT 1
89633: ST_TO_ADDR
// end ; if btype = b_barracks then
89634: LD_VAR 0 5
89638: PUSH
89639: LD_INT 5
89641: EQUAL
89642: IFFALSE 89652
// btype := b_armoury ;
89644: LD_ADDR_VAR 0 5
89648: PUSH
89649: LD_INT 4
89651: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
89652: LD_VAR 0 5
89656: PUSH
89657: LD_INT 7
89659: PUSH
89660: LD_INT 8
89662: PUSH
89663: EMPTY
89664: LIST
89665: LIST
89666: IN
89667: IFFALSE 89677
// btype := b_lab ;
89669: LD_ADDR_VAR 0 5
89673: PUSH
89674: LD_INT 6
89676: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
89677: LD_ADDR_EXP 41
89681: PUSH
89682: LD_EXP 41
89686: PPUSH
89687: LD_VAR 0 3
89691: PUSH
89692: LD_EXP 41
89696: PUSH
89697: LD_VAR 0 3
89701: ARRAY
89702: PUSH
89703: LD_INT 1
89705: PLUS
89706: PUSH
89707: EMPTY
89708: LIST
89709: LIST
89710: PPUSH
89711: LD_VAR 0 5
89715: PUSH
89716: LD_VAR 0 1
89720: PPUSH
89721: CALL_OW 250
89725: PUSH
89726: LD_VAR 0 1
89730: PPUSH
89731: CALL_OW 251
89735: PUSH
89736: LD_VAR 0 1
89740: PPUSH
89741: CALL_OW 254
89745: PUSH
89746: EMPTY
89747: LIST
89748: LIST
89749: LIST
89750: LIST
89751: PPUSH
89752: CALL 26700 0 3
89756: ST_TO_ADDR
// if pos = 1 then
89757: LD_VAR 0 6
89761: PUSH
89762: LD_INT 1
89764: EQUAL
89765: IFFALSE 89880
// begin tmp := mc_build_list [ i ] ;
89767: LD_ADDR_VAR 0 7
89771: PUSH
89772: LD_EXP 41
89776: PUSH
89777: LD_VAR 0 3
89781: ARRAY
89782: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
89783: LD_VAR 0 7
89787: PPUSH
89788: LD_INT 2
89790: PUSH
89791: LD_INT 30
89793: PUSH
89794: LD_INT 0
89796: PUSH
89797: EMPTY
89798: LIST
89799: LIST
89800: PUSH
89801: LD_INT 30
89803: PUSH
89804: LD_INT 1
89806: PUSH
89807: EMPTY
89808: LIST
89809: LIST
89810: PUSH
89811: EMPTY
89812: LIST
89813: LIST
89814: LIST
89815: PPUSH
89816: CALL_OW 72
89820: IFFALSE 89830
// pos := 2 ;
89822: LD_ADDR_VAR 0 6
89826: PUSH
89827: LD_INT 2
89829: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
89830: LD_ADDR_VAR 0 7
89834: PUSH
89835: LD_VAR 0 7
89839: PPUSH
89840: LD_VAR 0 6
89844: PPUSH
89845: LD_VAR 0 7
89849: PPUSH
89850: CALL 27026 0 3
89854: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
89855: LD_ADDR_EXP 41
89859: PUSH
89860: LD_EXP 41
89864: PPUSH
89865: LD_VAR 0 3
89869: PPUSH
89870: LD_VAR 0 7
89874: PPUSH
89875: CALL_OW 1
89879: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
89880: LD_VAR 0 1
89884: PUSH
89885: LD_EXP 36
89889: PUSH
89890: LD_VAR 0 3
89894: ARRAY
89895: IN
89896: IFFALSE 89935
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
89898: LD_ADDR_EXP 36
89902: PUSH
89903: LD_EXP 36
89907: PPUSH
89908: LD_VAR 0 3
89912: PPUSH
89913: LD_EXP 36
89917: PUSH
89918: LD_VAR 0 3
89922: ARRAY
89923: PUSH
89924: LD_VAR 0 1
89928: DIFF
89929: PPUSH
89930: CALL_OW 1
89934: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
89935: LD_VAR 0 1
89939: PUSH
89940: LD_EXP 43
89944: PUSH
89945: LD_VAR 0 3
89949: ARRAY
89950: IN
89951: IFFALSE 89990
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
89953: LD_ADDR_EXP 43
89957: PUSH
89958: LD_EXP 43
89962: PPUSH
89963: LD_VAR 0 3
89967: PPUSH
89968: LD_EXP 43
89972: PUSH
89973: LD_VAR 0 3
89977: ARRAY
89978: PUSH
89979: LD_VAR 0 1
89983: DIFF
89984: PPUSH
89985: CALL_OW 1
89989: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
89990: LD_VAR 0 1
89994: PUSH
89995: LD_EXP 55
89999: PUSH
90000: LD_VAR 0 3
90004: ARRAY
90005: IN
90006: IFFALSE 90045
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
90008: LD_ADDR_EXP 55
90012: PUSH
90013: LD_EXP 55
90017: PPUSH
90018: LD_VAR 0 3
90022: PPUSH
90023: LD_EXP 55
90027: PUSH
90028: LD_VAR 0 3
90032: ARRAY
90033: PUSH
90034: LD_VAR 0 1
90038: DIFF
90039: PPUSH
90040: CALL_OW 1
90044: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
90045: LD_VAR 0 1
90049: PUSH
90050: LD_EXP 58
90054: PUSH
90055: LD_VAR 0 3
90059: ARRAY
90060: IN
90061: IFFALSE 90100
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
90063: LD_ADDR_EXP 58
90067: PUSH
90068: LD_EXP 58
90072: PPUSH
90073: LD_VAR 0 3
90077: PPUSH
90078: LD_EXP 58
90082: PUSH
90083: LD_VAR 0 3
90087: ARRAY
90088: PUSH
90089: LD_VAR 0 1
90093: DIFF
90094: PPUSH
90095: CALL_OW 1
90099: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
90100: LD_VAR 0 1
90104: PUSH
90105: LD_EXP 45
90109: PUSH
90110: LD_VAR 0 3
90114: ARRAY
90115: IN
90116: IFFALSE 90155
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
90118: LD_ADDR_EXP 45
90122: PUSH
90123: LD_EXP 45
90127: PPUSH
90128: LD_VAR 0 3
90132: PPUSH
90133: LD_EXP 45
90137: PUSH
90138: LD_VAR 0 3
90142: ARRAY
90143: PUSH
90144: LD_VAR 0 1
90148: DIFF
90149: PPUSH
90150: CALL_OW 1
90154: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
90155: LD_VAR 0 1
90159: PUSH
90160: LD_EXP 44
90164: PUSH
90165: LD_VAR 0 3
90169: ARRAY
90170: IN
90171: IFFALSE 90210
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
90173: LD_ADDR_EXP 44
90177: PUSH
90178: LD_EXP 44
90182: PPUSH
90183: LD_VAR 0 3
90187: PPUSH
90188: LD_EXP 44
90192: PUSH
90193: LD_VAR 0 3
90197: ARRAY
90198: PUSH
90199: LD_VAR 0 1
90203: DIFF
90204: PPUSH
90205: CALL_OW 1
90209: ST_TO_ADDR
// end ; break ;
90210: GO 90214
// end ;
90212: GO 89215
90214: POP
90215: POP
// end ;
90216: LD_VAR 0 2
90220: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
90221: LD_INT 0
90223: PPUSH
90224: PPUSH
90225: PPUSH
// if not mc_bases or not skirmish then
90226: LD_EXP 36
90230: NOT
90231: PUSH
90232: LD_EXP 34
90236: NOT
90237: OR
90238: IFFALSE 90242
// exit ;
90240: GO 90457
// for i = 1 to mc_bases do
90242: LD_ADDR_VAR 0 3
90246: PUSH
90247: DOUBLE
90248: LD_INT 1
90250: DEC
90251: ST_TO_ADDR
90252: LD_EXP 36
90256: PUSH
90257: FOR_TO
90258: IFFALSE 90455
// begin if building in mc_construct_list [ i ] then
90260: LD_VAR 0 1
90264: PUSH
90265: LD_EXP 43
90269: PUSH
90270: LD_VAR 0 3
90274: ARRAY
90275: IN
90276: IFFALSE 90453
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
90278: LD_ADDR_EXP 43
90282: PUSH
90283: LD_EXP 43
90287: PPUSH
90288: LD_VAR 0 3
90292: PPUSH
90293: LD_EXP 43
90297: PUSH
90298: LD_VAR 0 3
90302: ARRAY
90303: PUSH
90304: LD_VAR 0 1
90308: DIFF
90309: PPUSH
90310: CALL_OW 1
90314: ST_TO_ADDR
// if building in mc_lab [ i ] then
90315: LD_VAR 0 1
90319: PUSH
90320: LD_EXP 69
90324: PUSH
90325: LD_VAR 0 3
90329: ARRAY
90330: IN
90331: IFFALSE 90386
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
90333: LD_ADDR_EXP 70
90337: PUSH
90338: LD_EXP 70
90342: PPUSH
90343: LD_VAR 0 3
90347: PPUSH
90348: LD_EXP 70
90352: PUSH
90353: LD_VAR 0 3
90357: ARRAY
90358: PPUSH
90359: LD_INT 1
90361: PPUSH
90362: LD_EXP 70
90366: PUSH
90367: LD_VAR 0 3
90371: ARRAY
90372: PPUSH
90373: LD_INT 0
90375: PPUSH
90376: CALL 26118 0 4
90380: PPUSH
90381: CALL_OW 1
90385: ST_TO_ADDR
// if not building in mc_bases [ i ] then
90386: LD_VAR 0 1
90390: PUSH
90391: LD_EXP 36
90395: PUSH
90396: LD_VAR 0 3
90400: ARRAY
90401: IN
90402: NOT
90403: IFFALSE 90449
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
90405: LD_ADDR_EXP 36
90409: PUSH
90410: LD_EXP 36
90414: PPUSH
90415: LD_VAR 0 3
90419: PUSH
90420: LD_EXP 36
90424: PUSH
90425: LD_VAR 0 3
90429: ARRAY
90430: PUSH
90431: LD_INT 1
90433: PLUS
90434: PUSH
90435: EMPTY
90436: LIST
90437: LIST
90438: PPUSH
90439: LD_VAR 0 1
90443: PPUSH
90444: CALL 26700 0 3
90448: ST_TO_ADDR
// exit ;
90449: POP
90450: POP
90451: GO 90457
// end ; end ;
90453: GO 90257
90455: POP
90456: POP
// end ;
90457: LD_VAR 0 2
90461: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
90462: LD_INT 0
90464: PPUSH
90465: PPUSH
90466: PPUSH
90467: PPUSH
90468: PPUSH
90469: PPUSH
90470: PPUSH
// if not mc_bases or not skirmish then
90471: LD_EXP 36
90475: NOT
90476: PUSH
90477: LD_EXP 34
90481: NOT
90482: OR
90483: IFFALSE 90487
// exit ;
90485: GO 91148
// for i = 1 to mc_bases do
90487: LD_ADDR_VAR 0 3
90491: PUSH
90492: DOUBLE
90493: LD_INT 1
90495: DEC
90496: ST_TO_ADDR
90497: LD_EXP 36
90501: PUSH
90502: FOR_TO
90503: IFFALSE 91146
// begin if building in mc_construct_list [ i ] then
90505: LD_VAR 0 1
90509: PUSH
90510: LD_EXP 43
90514: PUSH
90515: LD_VAR 0 3
90519: ARRAY
90520: IN
90521: IFFALSE 91144
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
90523: LD_ADDR_EXP 43
90527: PUSH
90528: LD_EXP 43
90532: PPUSH
90533: LD_VAR 0 3
90537: PPUSH
90538: LD_EXP 43
90542: PUSH
90543: LD_VAR 0 3
90547: ARRAY
90548: PUSH
90549: LD_VAR 0 1
90553: DIFF
90554: PPUSH
90555: CALL_OW 1
90559: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
90560: LD_ADDR_EXP 36
90564: PUSH
90565: LD_EXP 36
90569: PPUSH
90570: LD_VAR 0 3
90574: PUSH
90575: LD_EXP 36
90579: PUSH
90580: LD_VAR 0 3
90584: ARRAY
90585: PUSH
90586: LD_INT 1
90588: PLUS
90589: PUSH
90590: EMPTY
90591: LIST
90592: LIST
90593: PPUSH
90594: LD_VAR 0 1
90598: PPUSH
90599: CALL 26700 0 3
90603: ST_TO_ADDR
// btype := GetBType ( building ) ;
90604: LD_ADDR_VAR 0 5
90608: PUSH
90609: LD_VAR 0 1
90613: PPUSH
90614: CALL_OW 266
90618: ST_TO_ADDR
// side := GetSide ( building ) ;
90619: LD_ADDR_VAR 0 8
90623: PUSH
90624: LD_VAR 0 1
90628: PPUSH
90629: CALL_OW 255
90633: ST_TO_ADDR
// if btype = b_lab then
90634: LD_VAR 0 5
90638: PUSH
90639: LD_INT 6
90641: EQUAL
90642: IFFALSE 90692
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
90644: LD_ADDR_EXP 69
90648: PUSH
90649: LD_EXP 69
90653: PPUSH
90654: LD_VAR 0 3
90658: PUSH
90659: LD_EXP 69
90663: PUSH
90664: LD_VAR 0 3
90668: ARRAY
90669: PUSH
90670: LD_INT 1
90672: PLUS
90673: PUSH
90674: EMPTY
90675: LIST
90676: LIST
90677: PPUSH
90678: LD_VAR 0 1
90682: PPUSH
90683: CALL 26700 0 3
90687: ST_TO_ADDR
// exit ;
90688: POP
90689: POP
90690: GO 91148
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
90692: LD_VAR 0 5
90696: PUSH
90697: LD_INT 0
90699: PUSH
90700: LD_INT 2
90702: PUSH
90703: LD_INT 4
90705: PUSH
90706: EMPTY
90707: LIST
90708: LIST
90709: LIST
90710: IN
90711: IFFALSE 90835
// begin if btype = b_armoury then
90713: LD_VAR 0 5
90717: PUSH
90718: LD_INT 4
90720: EQUAL
90721: IFFALSE 90731
// btype := b_barracks ;
90723: LD_ADDR_VAR 0 5
90727: PUSH
90728: LD_INT 5
90730: ST_TO_ADDR
// if btype = b_depot then
90731: LD_VAR 0 5
90735: PUSH
90736: LD_INT 0
90738: EQUAL
90739: IFFALSE 90749
// btype := b_warehouse ;
90741: LD_ADDR_VAR 0 5
90745: PUSH
90746: LD_INT 1
90748: ST_TO_ADDR
// if btype = b_workshop then
90749: LD_VAR 0 5
90753: PUSH
90754: LD_INT 2
90756: EQUAL
90757: IFFALSE 90767
// btype := b_factory ;
90759: LD_ADDR_VAR 0 5
90763: PUSH
90764: LD_INT 3
90766: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
90767: LD_VAR 0 5
90771: PPUSH
90772: LD_VAR 0 8
90776: PPUSH
90777: CALL_OW 323
90781: PUSH
90782: LD_INT 1
90784: EQUAL
90785: IFFALSE 90831
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
90787: LD_ADDR_EXP 68
90791: PUSH
90792: LD_EXP 68
90796: PPUSH
90797: LD_VAR 0 3
90801: PUSH
90802: LD_EXP 68
90806: PUSH
90807: LD_VAR 0 3
90811: ARRAY
90812: PUSH
90813: LD_INT 1
90815: PLUS
90816: PUSH
90817: EMPTY
90818: LIST
90819: LIST
90820: PPUSH
90821: LD_VAR 0 1
90825: PPUSH
90826: CALL 26700 0 3
90830: ST_TO_ADDR
// exit ;
90831: POP
90832: POP
90833: GO 91148
// end ; if btype in [ b_bunker , b_turret ] then
90835: LD_VAR 0 5
90839: PUSH
90840: LD_INT 32
90842: PUSH
90843: LD_INT 33
90845: PUSH
90846: EMPTY
90847: LIST
90848: LIST
90849: IN
90850: IFFALSE 91140
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
90852: LD_ADDR_EXP 44
90856: PUSH
90857: LD_EXP 44
90861: PPUSH
90862: LD_VAR 0 3
90866: PUSH
90867: LD_EXP 44
90871: PUSH
90872: LD_VAR 0 3
90876: ARRAY
90877: PUSH
90878: LD_INT 1
90880: PLUS
90881: PUSH
90882: EMPTY
90883: LIST
90884: LIST
90885: PPUSH
90886: LD_VAR 0 1
90890: PPUSH
90891: CALL 26700 0 3
90895: ST_TO_ADDR
// if btype = b_bunker then
90896: LD_VAR 0 5
90900: PUSH
90901: LD_INT 32
90903: EQUAL
90904: IFFALSE 91140
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
90906: LD_ADDR_EXP 45
90910: PUSH
90911: LD_EXP 45
90915: PPUSH
90916: LD_VAR 0 3
90920: PUSH
90921: LD_EXP 45
90925: PUSH
90926: LD_VAR 0 3
90930: ARRAY
90931: PUSH
90932: LD_INT 1
90934: PLUS
90935: PUSH
90936: EMPTY
90937: LIST
90938: LIST
90939: PPUSH
90940: LD_VAR 0 1
90944: PPUSH
90945: CALL 26700 0 3
90949: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
90950: LD_ADDR_VAR 0 6
90954: PUSH
90955: LD_EXP 36
90959: PUSH
90960: LD_VAR 0 3
90964: ARRAY
90965: PPUSH
90966: LD_INT 25
90968: PUSH
90969: LD_INT 1
90971: PUSH
90972: EMPTY
90973: LIST
90974: LIST
90975: PUSH
90976: LD_INT 3
90978: PUSH
90979: LD_INT 54
90981: PUSH
90982: EMPTY
90983: LIST
90984: PUSH
90985: EMPTY
90986: LIST
90987: LIST
90988: PUSH
90989: EMPTY
90990: LIST
90991: LIST
90992: PPUSH
90993: CALL_OW 72
90997: ST_TO_ADDR
// if tmp then
90998: LD_VAR 0 6
91002: IFFALSE 91008
// exit ;
91004: POP
91005: POP
91006: GO 91148
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
91008: LD_ADDR_VAR 0 6
91012: PUSH
91013: LD_EXP 36
91017: PUSH
91018: LD_VAR 0 3
91022: ARRAY
91023: PPUSH
91024: LD_INT 2
91026: PUSH
91027: LD_INT 30
91029: PUSH
91030: LD_INT 4
91032: PUSH
91033: EMPTY
91034: LIST
91035: LIST
91036: PUSH
91037: LD_INT 30
91039: PUSH
91040: LD_INT 5
91042: PUSH
91043: EMPTY
91044: LIST
91045: LIST
91046: PUSH
91047: EMPTY
91048: LIST
91049: LIST
91050: LIST
91051: PPUSH
91052: CALL_OW 72
91056: ST_TO_ADDR
// if not tmp then
91057: LD_VAR 0 6
91061: NOT
91062: IFFALSE 91068
// exit ;
91064: POP
91065: POP
91066: GO 91148
// for j in tmp do
91068: LD_ADDR_VAR 0 4
91072: PUSH
91073: LD_VAR 0 6
91077: PUSH
91078: FOR_IN
91079: IFFALSE 91138
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
91081: LD_ADDR_VAR 0 7
91085: PUSH
91086: LD_VAR 0 4
91090: PPUSH
91091: CALL_OW 313
91095: PPUSH
91096: LD_INT 25
91098: PUSH
91099: LD_INT 1
91101: PUSH
91102: EMPTY
91103: LIST
91104: LIST
91105: PPUSH
91106: CALL_OW 72
91110: ST_TO_ADDR
// if units then
91111: LD_VAR 0 7
91115: IFFALSE 91136
// begin ComExitBuilding ( units [ 1 ] ) ;
91117: LD_VAR 0 7
91121: PUSH
91122: LD_INT 1
91124: ARRAY
91125: PPUSH
91126: CALL_OW 122
// exit ;
91130: POP
91131: POP
91132: POP
91133: POP
91134: GO 91148
// end ; end ;
91136: GO 91078
91138: POP
91139: POP
// end ; end ; exit ;
91140: POP
91141: POP
91142: GO 91148
// end ; end ;
91144: GO 90502
91146: POP
91147: POP
// end ;
91148: LD_VAR 0 2
91152: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
91153: LD_INT 0
91155: PPUSH
91156: PPUSH
91157: PPUSH
91158: PPUSH
91159: PPUSH
91160: PPUSH
91161: PPUSH
// if not mc_bases or not skirmish then
91162: LD_EXP 36
91166: NOT
91167: PUSH
91168: LD_EXP 34
91172: NOT
91173: OR
91174: IFFALSE 91178
// exit ;
91176: GO 91409
// btype := GetBType ( building ) ;
91178: LD_ADDR_VAR 0 6
91182: PUSH
91183: LD_VAR 0 1
91187: PPUSH
91188: CALL_OW 266
91192: ST_TO_ADDR
// x := GetX ( building ) ;
91193: LD_ADDR_VAR 0 7
91197: PUSH
91198: LD_VAR 0 1
91202: PPUSH
91203: CALL_OW 250
91207: ST_TO_ADDR
// y := GetY ( building ) ;
91208: LD_ADDR_VAR 0 8
91212: PUSH
91213: LD_VAR 0 1
91217: PPUSH
91218: CALL_OW 251
91222: ST_TO_ADDR
// d := GetDir ( building ) ;
91223: LD_ADDR_VAR 0 9
91227: PUSH
91228: LD_VAR 0 1
91232: PPUSH
91233: CALL_OW 254
91237: ST_TO_ADDR
// for i = 1 to mc_bases do
91238: LD_ADDR_VAR 0 4
91242: PUSH
91243: DOUBLE
91244: LD_INT 1
91246: DEC
91247: ST_TO_ADDR
91248: LD_EXP 36
91252: PUSH
91253: FOR_TO
91254: IFFALSE 91407
// begin if not mc_build_list [ i ] then
91256: LD_EXP 41
91260: PUSH
91261: LD_VAR 0 4
91265: ARRAY
91266: NOT
91267: IFFALSE 91271
// continue ;
91269: GO 91253
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
91271: LD_VAR 0 6
91275: PUSH
91276: LD_VAR 0 7
91280: PUSH
91281: LD_VAR 0 8
91285: PUSH
91286: LD_VAR 0 9
91290: PUSH
91291: EMPTY
91292: LIST
91293: LIST
91294: LIST
91295: LIST
91296: PPUSH
91297: LD_EXP 41
91301: PUSH
91302: LD_VAR 0 4
91306: ARRAY
91307: PUSH
91308: LD_INT 1
91310: ARRAY
91311: PPUSH
91312: CALL 32869 0 2
91316: IFFALSE 91405
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
91318: LD_ADDR_EXP 41
91322: PUSH
91323: LD_EXP 41
91327: PPUSH
91328: LD_VAR 0 4
91332: PPUSH
91333: LD_EXP 41
91337: PUSH
91338: LD_VAR 0 4
91342: ARRAY
91343: PPUSH
91344: LD_INT 1
91346: PPUSH
91347: CALL_OW 3
91351: PPUSH
91352: CALL_OW 1
91356: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
91357: LD_ADDR_EXP 43
91361: PUSH
91362: LD_EXP 43
91366: PPUSH
91367: LD_VAR 0 4
91371: PUSH
91372: LD_EXP 43
91376: PUSH
91377: LD_VAR 0 4
91381: ARRAY
91382: PUSH
91383: LD_INT 1
91385: PLUS
91386: PUSH
91387: EMPTY
91388: LIST
91389: LIST
91390: PPUSH
91391: LD_VAR 0 1
91395: PPUSH
91396: CALL 26700 0 3
91400: ST_TO_ADDR
// exit ;
91401: POP
91402: POP
91403: GO 91409
// end ; end ;
91405: GO 91253
91407: POP
91408: POP
// end ;
91409: LD_VAR 0 3
91413: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
91414: LD_INT 0
91416: PPUSH
91417: PPUSH
91418: PPUSH
// if not mc_bases or not skirmish then
91419: LD_EXP 36
91423: NOT
91424: PUSH
91425: LD_EXP 34
91429: NOT
91430: OR
91431: IFFALSE 91435
// exit ;
91433: GO 91625
// for i = 1 to mc_bases do
91435: LD_ADDR_VAR 0 4
91439: PUSH
91440: DOUBLE
91441: LD_INT 1
91443: DEC
91444: ST_TO_ADDR
91445: LD_EXP 36
91449: PUSH
91450: FOR_TO
91451: IFFALSE 91538
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
91453: LD_VAR 0 1
91457: PUSH
91458: LD_EXP 44
91462: PUSH
91463: LD_VAR 0 4
91467: ARRAY
91468: IN
91469: PUSH
91470: LD_VAR 0 1
91474: PUSH
91475: LD_EXP 45
91479: PUSH
91480: LD_VAR 0 4
91484: ARRAY
91485: IN
91486: NOT
91487: AND
91488: IFFALSE 91536
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
91490: LD_ADDR_EXP 45
91494: PUSH
91495: LD_EXP 45
91499: PPUSH
91500: LD_VAR 0 4
91504: PUSH
91505: LD_EXP 45
91509: PUSH
91510: LD_VAR 0 4
91514: ARRAY
91515: PUSH
91516: LD_INT 1
91518: PLUS
91519: PUSH
91520: EMPTY
91521: LIST
91522: LIST
91523: PPUSH
91524: LD_VAR 0 1
91528: PPUSH
91529: CALL 26700 0 3
91533: ST_TO_ADDR
// break ;
91534: GO 91538
// end ; end ;
91536: GO 91450
91538: POP
91539: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
91540: LD_VAR 0 1
91544: PPUSH
91545: CALL_OW 257
91549: PUSH
91550: LD_EXP 62
91554: IN
91555: PUSH
91556: LD_VAR 0 1
91560: PPUSH
91561: CALL_OW 266
91565: PUSH
91566: LD_INT 5
91568: EQUAL
91569: AND
91570: PUSH
91571: LD_VAR 0 2
91575: PPUSH
91576: CALL_OW 110
91580: PUSH
91581: LD_INT 18
91583: NONEQUAL
91584: AND
91585: IFFALSE 91625
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
91587: LD_VAR 0 2
91591: PPUSH
91592: CALL_OW 257
91596: PUSH
91597: LD_INT 5
91599: PUSH
91600: LD_INT 8
91602: PUSH
91603: LD_INT 9
91605: PUSH
91606: EMPTY
91607: LIST
91608: LIST
91609: LIST
91610: IN
91611: IFFALSE 91625
// SetClass ( unit , 1 ) ;
91613: LD_VAR 0 2
91617: PPUSH
91618: LD_INT 1
91620: PPUSH
91621: CALL_OW 336
// end ;
91625: LD_VAR 0 3
91629: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
91630: LD_INT 0
91632: PPUSH
91633: PPUSH
// if not mc_bases or not skirmish then
91634: LD_EXP 36
91638: NOT
91639: PUSH
91640: LD_EXP 34
91644: NOT
91645: OR
91646: IFFALSE 91650
// exit ;
91648: GO 91766
// if GetLives ( abandoned_vehicle ) > 250 then
91650: LD_VAR 0 2
91654: PPUSH
91655: CALL_OW 256
91659: PUSH
91660: LD_INT 250
91662: GREATER
91663: IFFALSE 91667
// exit ;
91665: GO 91766
// for i = 1 to mc_bases do
91667: LD_ADDR_VAR 0 6
91671: PUSH
91672: DOUBLE
91673: LD_INT 1
91675: DEC
91676: ST_TO_ADDR
91677: LD_EXP 36
91681: PUSH
91682: FOR_TO
91683: IFFALSE 91764
// begin if driver in mc_bases [ i ] then
91685: LD_VAR 0 1
91689: PUSH
91690: LD_EXP 36
91694: PUSH
91695: LD_VAR 0 6
91699: ARRAY
91700: IN
91701: IFFALSE 91762
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
91703: LD_VAR 0 1
91707: PPUSH
91708: LD_EXP 36
91712: PUSH
91713: LD_VAR 0 6
91717: ARRAY
91718: PPUSH
91719: LD_INT 2
91721: PUSH
91722: LD_INT 30
91724: PUSH
91725: LD_INT 0
91727: PUSH
91728: EMPTY
91729: LIST
91730: LIST
91731: PUSH
91732: LD_INT 30
91734: PUSH
91735: LD_INT 1
91737: PUSH
91738: EMPTY
91739: LIST
91740: LIST
91741: PUSH
91742: EMPTY
91743: LIST
91744: LIST
91745: LIST
91746: PPUSH
91747: CALL_OW 72
91751: PUSH
91752: LD_INT 1
91754: ARRAY
91755: PPUSH
91756: CALL_OW 112
// break ;
91760: GO 91764
// end ; end ;
91762: GO 91682
91764: POP
91765: POP
// end ;
91766: LD_VAR 0 5
91770: RET
