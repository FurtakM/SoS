// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitSettings ;
  11: CALL 51 0 0
// if debug then
  15: LD_EXP 1
  19: IFFALSE 38
// begin PlaceSeeing ( 1 , 1 , 1 , - 372963 ) ;
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 372963
  32: NEG
  33: PPUSH
  34: CALL_OW 330
// end ; SetTechnologies ;
  38: CALL 602 0 0
// SetDiplomacy ;
  42: CALL 814 0 0
// PrepareGame ;
  46: CALL 896 0 0
// end ;
  50: END
// export debug , GameType , game , disableGlobalTimer ; export mc_amer , mc_leg , mc_rus_1 , mc_rus_2 ; export playerCommander , playerForces , allyCommander , Powell , Farmer , ruOutpost , ruEscape , staticMines , baseCaptured , legDestCounter , cratesSpawns , legOfferAccepted , legChangeSide , allyDestCounter , sibBombAllowed , reinforceAllowed , commander , cratesSpawn , outpostEscape , dialogueMineDetected ; end_of_file export function InitSettings ; begin
  51: LD_INT 0
  53: PPUSH
// debug := 0 ;
  54: LD_ADDR_EXP 1
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// GameType := 1 ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 1
  69: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  70: LD_ADDR_OWVAR 67
  74: PUSH
  75: LD_INT 0
  77: PPUSH
  78: CALL_OW 426
  82: ST_TO_ADDR
// sibBombAllowed := GetMultiPlayerSetting ( 1 ) - 1 ;
  83: LD_ADDR_EXP 23
  87: PUSH
  88: LD_INT 1
  90: PPUSH
  91: CALL_OW 426
  95: PUSH
  96: LD_INT 1
  98: MINUS
  99: ST_TO_ADDR
// reinforceAllowed := GetMultiPlayerSetting ( 2 ) - 1 ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: LD_INT 2
 107: PPUSH
 108: CALL_OW 426
 112: PUSH
 113: LD_INT 1
 115: MINUS
 116: ST_TO_ADDR
// cratesSpawn := GetMultiPlayerSetting ( 3 ) ;
 117: LD_ADDR_EXP 26
 121: PUSH
 122: LD_INT 3
 124: PPUSH
 125: CALL_OW 426
 129: ST_TO_ADDR
// commander := GetMultiPlayerSetting ( 4 ) ;
 130: LD_ADDR_EXP 25
 134: PUSH
 135: LD_INT 4
 137: PPUSH
 138: CALL_OW 426
 142: ST_TO_ADDR
// if not commander then
 143: LD_EXP 25
 147: NOT
 148: IFFALSE 158
// commander := 3 ;
 150: LD_ADDR_EXP 25
 154: PUSH
 155: LD_INT 3
 157: ST_TO_ADDR
// if not debug then
 158: LD_EXP 1
 162: NOT
 163: IFFALSE 167
// exit ;
 165: GO 224
// display_strings := [ Difficulty:  & Difficulty , sibBomb:  & sibBombAllowed , reinforceAllowed:  & reinforceAllowed , cratesSpawn:  & cratesSpawn , commander:  & commander ] ;
 167: LD_ADDR_OWVAR 47
 171: PUSH
 172: LD_STRING Difficulty: 
 174: PUSH
 175: LD_OWVAR 67
 179: STR
 180: PUSH
 181: LD_STRING sibBomb: 
 183: PUSH
 184: LD_EXP 23
 188: STR
 189: PUSH
 190: LD_STRING reinforceAllowed: 
 192: PUSH
 193: LD_EXP 24
 197: STR
 198: PUSH
 199: LD_STRING cratesSpawn: 
 201: PUSH
 202: LD_EXP 26
 206: STR
 207: PUSH
 208: LD_STRING commander: 
 210: PUSH
 211: LD_EXP 25
 215: STR
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// every 0 0$1 trigger game and GameType = 1 and not disableGlobalTimer do
 229: LD_EXP 3
 233: PUSH
 234: LD_EXP 2
 238: PUSH
 239: LD_INT 1
 241: EQUAL
 242: AND
 243: PUSH
 244: LD_EXP 4
 248: NOT
 249: AND
 250: IFFALSE 273
 252: GO 254
 254: DISABLE
// begin enable ;
 255: ENABLE
// display_strings := [ #SkrTime , tick ] ;
 256: LD_ADDR_OWVAR 47
 260: PUSH
 261: LD_STRING #SkrTime
 263: PUSH
 264: LD_OWVAR 1
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// end ;
 273: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 274: LD_EXP 19
 278: PUSH
 279: LD_EXP 3
 283: AND
 284: PUSH
 285: LD_EXP 2
 289: PUSH
 290: LD_INT 1
 292: EQUAL
 293: AND
 294: IFFALSE 355
 296: GO 298
 298: DISABLE
// Crates ( cratesSpawns [ 1 ] [ 1 ] , cratesSpawns [ 1 ] [ 2 ] , cratesSpawns [ 1 ] [ 3 ] , cratesSpawns [ 1 ] [ 4 ] ) ;
 299: LD_EXP 19
 303: PUSH
 304: LD_INT 1
 306: ARRAY
 307: PUSH
 308: LD_INT 1
 310: ARRAY
 311: PPUSH
 312: LD_EXP 19
 316: PUSH
 317: LD_INT 1
 319: ARRAY
 320: PUSH
 321: LD_INT 2
 323: ARRAY
 324: PPUSH
 325: LD_EXP 19
 329: PUSH
 330: LD_INT 1
 332: ARRAY
 333: PUSH
 334: LD_INT 3
 336: ARRAY
 337: PPUSH
 338: LD_EXP 19
 342: PUSH
 343: LD_INT 1
 345: ARRAY
 346: PUSH
 347: LD_INT 4
 349: ARRAY
 350: PPUSH
 351: CALL 54546 0 4
 355: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 356: LD_EXP 19
 360: PUSH
 361: LD_EXP 3
 365: AND
 366: PUSH
 367: LD_EXP 2
 371: PUSH
 372: LD_INT 1
 374: EQUAL
 375: AND
 376: IFFALSE 437
 378: GO 380
 380: DISABLE
// Crates ( cratesSpawns [ 2 ] [ 1 ] , cratesSpawns [ 2 ] [ 2 ] , cratesSpawns [ 2 ] [ 3 ] , cratesSpawns [ 2 ] [ 4 ] ) ;
 381: LD_EXP 19
 385: PUSH
 386: LD_INT 2
 388: ARRAY
 389: PUSH
 390: LD_INT 1
 392: ARRAY
 393: PPUSH
 394: LD_EXP 19
 398: PUSH
 399: LD_INT 2
 401: ARRAY
 402: PUSH
 403: LD_INT 2
 405: ARRAY
 406: PPUSH
 407: LD_EXP 19
 411: PUSH
 412: LD_INT 2
 414: ARRAY
 415: PUSH
 416: LD_INT 3
 418: ARRAY
 419: PPUSH
 420: LD_EXP 19
 424: PUSH
 425: LD_INT 2
 427: ARRAY
 428: PUSH
 429: LD_INT 4
 431: ARRAY
 432: PPUSH
 433: CALL 54546 0 4
 437: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 438: LD_EXP 19
 442: PUSH
 443: LD_EXP 3
 447: AND
 448: PUSH
 449: LD_EXP 2
 453: PUSH
 454: LD_INT 1
 456: EQUAL
 457: AND
 458: IFFALSE 519
 460: GO 462
 462: DISABLE
// Crates ( cratesSpawns [ 3 ] [ 1 ] , cratesSpawns [ 3 ] [ 2 ] , cratesSpawns [ 3 ] [ 3 ] , cratesSpawns [ 3 ] [ 4 ] ) ;
 463: LD_EXP 19
 467: PUSH
 468: LD_INT 3
 470: ARRAY
 471: PUSH
 472: LD_INT 1
 474: ARRAY
 475: PPUSH
 476: LD_EXP 19
 480: PUSH
 481: LD_INT 3
 483: ARRAY
 484: PUSH
 485: LD_INT 2
 487: ARRAY
 488: PPUSH
 489: LD_EXP 19
 493: PUSH
 494: LD_INT 3
 496: ARRAY
 497: PUSH
 498: LD_INT 3
 500: ARRAY
 501: PPUSH
 502: LD_EXP 19
 506: PUSH
 507: LD_INT 3
 509: ARRAY
 510: PUSH
 511: LD_INT 4
 513: ARRAY
 514: PPUSH
 515: CALL 54546 0 4
 519: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 520: LD_EXP 19
 524: PUSH
 525: LD_EXP 3
 529: AND
 530: PUSH
 531: LD_EXP 2
 535: PUSH
 536: LD_INT 1
 538: EQUAL
 539: AND
 540: IFFALSE 601
 542: GO 544
 544: DISABLE
// Crates ( cratesSpawns [ 4 ] [ 1 ] , cratesSpawns [ 4 ] [ 2 ] , cratesSpawns [ 4 ] [ 3 ] , cratesSpawns [ 4 ] [ 4 ] ) ;
 545: LD_EXP 19
 549: PUSH
 550: LD_INT 4
 552: ARRAY
 553: PUSH
 554: LD_INT 1
 556: ARRAY
 557: PPUSH
 558: LD_EXP 19
 562: PUSH
 563: LD_INT 4
 565: ARRAY
 566: PUSH
 567: LD_INT 2
 569: ARRAY
 570: PPUSH
 571: LD_EXP 19
 575: PUSH
 576: LD_INT 4
 578: ARRAY
 579: PUSH
 580: LD_INT 3
 582: ARRAY
 583: PPUSH
 584: LD_EXP 19
 588: PUSH
 589: LD_INT 4
 591: ARRAY
 592: PUSH
 593: LD_INT 4
 595: ARRAY
 596: PPUSH
 597: CALL 54546 0 4
 601: END
// export function SetTechnologies ; var i , j , ban_techs , res_techs ; begin
 602: LD_INT 0
 604: PPUSH
 605: PPUSH
 606: PPUSH
 607: PPUSH
 608: PPUSH
// if GameType = 1 then
 609: LD_EXP 2
 613: PUSH
 614: LD_INT 1
 616: EQUAL
 617: IFFALSE 686
// begin ban_techs := [ ] ;
 619: LD_ADDR_VAR 0 4
 623: PUSH
 624: EMPTY
 625: ST_TO_ADDR
// if sibBombAllowed < 2 then
 626: LD_EXP 23
 630: PUSH
 631: LD_INT 2
 633: LESS
 634: IFFALSE 647
// ban_techs := [ tech_sibFiss ] ;
 636: LD_ADDR_VAR 0 4
 640: PUSH
 641: LD_INT 25
 643: PUSH
 644: EMPTY
 645: LIST
 646: ST_TO_ADDR
// res_techs := [ tech_oilPow , tech_oilEng , tech_tech1 , tech_tech2 , tech_tech3 , tech_gun , tech_gatling , tech_rocket ] ;
 647: LD_ADDR_VAR 0 5
 651: PUSH
 652: LD_INT 46
 654: PUSH
 655: LD_INT 47
 657: PUSH
 658: LD_INT 48
 660: PUSH
 661: LD_INT 49
 663: PUSH
 664: LD_INT 50
 666: PUSH
 667: LD_INT 39
 669: PUSH
 670: LD_INT 69
 672: PUSH
 673: LD_INT 40
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: ST_TO_ADDR
// end ; for i = 1 to 8 do
 686: LD_ADDR_VAR 0 2
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 8
 698: PUSH
 699: FOR_TO
 700: IFFALSE 784
// begin if res_techs then
 702: LD_VAR 0 5
 706: IFFALSE 742
// for j in res_techs do
 708: LD_ADDR_VAR 0 3
 712: PUSH
 713: LD_VAR 0 5
 717: PUSH
 718: FOR_IN
 719: IFFALSE 740
// SetTech ( j , i , state_researched ) ;
 721: LD_VAR 0 3
 725: PPUSH
 726: LD_VAR 0 2
 730: PPUSH
 731: LD_INT 2
 733: PPUSH
 734: CALL_OW 322
 738: GO 718
 740: POP
 741: POP
// if ban_techs then
 742: LD_VAR 0 4
 746: IFFALSE 782
// for j in ban_techs do
 748: LD_ADDR_VAR 0 3
 752: PUSH
 753: LD_VAR 0 4
 757: PUSH
 758: FOR_IN
 759: IFFALSE 780
// SetTech ( j , i , state_disabled ) ;
 761: LD_VAR 0 3
 765: PPUSH
 766: LD_VAR 0 2
 770: PPUSH
 771: LD_INT 0
 773: PPUSH
 774: CALL_OW 322
 778: GO 758
 780: POP
 781: POP
// end ;
 782: GO 699
 784: POP
 785: POP
// if sibBombAllowed = 1 then
 786: LD_EXP 23
 790: PUSH
 791: LD_INT 1
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_sibFiss , 3 , state_enabled ) ;
 796: LD_INT 25
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 1
 804: PPUSH
 805: CALL_OW 322
// end ;
 809: LD_VAR 0 1
 813: RET
// export function SetDiplomacy ; begin
 814: LD_INT 0
 816: PPUSH
// if GameType = 1 then
 817: LD_EXP 2
 821: PUSH
 822: LD_INT 1
 824: EQUAL
 825: IFFALSE 891
// begin SetAttitude ( 1 , 4 , att_friend , true ) ;
 827: LD_INT 1
 829: PPUSH
 830: LD_INT 4
 832: PPUSH
 833: LD_INT 1
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 843: LD_INT 3
 845: PPUSH
 846: LD_INT 6
 848: PPUSH
 849: LD_INT 1
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL_OW 80
// SetAttitude ( 3 , 8 , att_friend , true ) ;
 859: LD_INT 3
 861: PPUSH
 862: LD_INT 8
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: CALL_OW 80
// SetAttitude ( 6 , 8 , att_friend , true ) ;
 875: LD_INT 6
 877: PPUSH
 878: LD_INT 8
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 80
// end ; end ;
 891: LD_VAR 0 1
 895: RET
// export function PrepareGame ; var i , tmp , sources ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
// if GameType = 1 then
 902: LD_EXP 2
 906: PUSH
 907: LD_INT 1
 909: EQUAL
 910: IFFALSE 1402
// begin game := false ;
 912: LD_ADDR_EXP 3
 916: PUSH
 917: LD_INT 0
 919: ST_TO_ADDR
// your_side := 1 ;
 920: LD_ADDR_OWVAR 2
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// mc_amer := 1 ;
 928: LD_ADDR_EXP 5
 932: PUSH
 933: LD_INT 1
 935: ST_TO_ADDR
// mc_leg := 2 ;
 936: LD_ADDR_EXP 6
 940: PUSH
 941: LD_INT 2
 943: ST_TO_ADDR
// mc_rus_1 := 3 ;
 944: LD_ADDR_EXP 7
 948: PUSH
 949: LD_INT 3
 951: ST_TO_ADDR
// mc_rus_2 := 4 ;
 952: LD_ADDR_EXP 8
 956: PUSH
 957: LD_INT 4
 959: ST_TO_ADDR
// cratesSpawns := [ [ amerCrates , 1 , 0 , [ 200 , 250 , 300 ] [ cratesSpawn ] ] , [ rusCrates , 8 , 50 , 500 ] , [ legCrates , 5 , 50 , 300 ] , [ playerCrates , [ 4 , 5 , 6 ] [ cratesSpawn ] , 30 , [ 300 , 450 , 500 ] [ cratesSpawn ] ] ] ;
 960: LD_ADDR_EXP 19
 964: PUSH
 965: LD_INT 5
 967: PUSH
 968: LD_INT 1
 970: PUSH
 971: LD_INT 0
 973: PUSH
 974: LD_INT 200
 976: PUSH
 977: LD_INT 250
 979: PUSH
 980: LD_INT 300
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: LIST
 987: PUSH
 988: LD_EXP 26
 992: ARRAY
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 13
1002: PUSH
1003: LD_INT 8
1005: PUSH
1006: LD_INT 50
1008: PUSH
1009: LD_INT 500
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 17
1020: PUSH
1021: LD_INT 5
1023: PUSH
1024: LD_INT 50
1026: PUSH
1027: LD_INT 300
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: LD_INT 18
1038: PUSH
1039: LD_INT 4
1041: PUSH
1042: LD_INT 5
1044: PUSH
1045: LD_INT 6
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_EXP 26
1057: ARRAY
1058: PUSH
1059: LD_INT 30
1061: PUSH
1062: LD_INT 300
1064: PUSH
1065: LD_INT 450
1067: PUSH
1068: LD_INT 500
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_EXP 26
1080: ARRAY
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: ST_TO_ADDR
// sources := [ [ 190 , 193 , mat_siberit ] , [ 182 , 117 , mat_siberit ] , [ 43 , 2 , mat_siberit ] , [ 114 , 152 , mat_oil ] , [ 85 , 38 , mat_oil ] ] ;
1094: LD_ADDR_VAR 0 4
1098: PUSH
1099: LD_INT 190
1101: PUSH
1102: LD_INT 193
1104: PUSH
1105: LD_INT 3
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_INT 182
1115: PUSH
1116: LD_INT 117
1118: PUSH
1119: LD_INT 3
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_INT 43
1129: PUSH
1130: LD_INT 2
1132: PUSH
1133: LD_INT 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_INT 114
1143: PUSH
1144: LD_INT 152
1146: PUSH
1147: LD_INT 2
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: PUSH
1155: LD_INT 85
1157: PUSH
1158: LD_INT 38
1160: PUSH
1161: LD_INT 2
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: ST_TO_ADDR
// for i in sources do
1176: LD_ADDR_VAR 0 2
1180: PUSH
1181: LD_VAR 0 4
1185: PUSH
1186: FOR_IN
1187: IFFALSE 1222
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
1189: LD_VAR 0 2
1193: PUSH
1194: LD_INT 1
1196: ARRAY
1197: PPUSH
1198: LD_VAR 0 2
1202: PUSH
1203: LD_INT 2
1205: ARRAY
1206: PPUSH
1207: LD_VAR 0 2
1211: PUSH
1212: LD_INT 3
1214: ARRAY
1215: PPUSH
1216: CALL_OW 62
1220: GO 1186
1222: POP
1223: POP
// disableGlobalTimer := false ;
1224: LD_ADDR_EXP 4
1228: PUSH
1229: LD_INT 0
1231: ST_TO_ADDR
// ruEscape := [ 0 , [ 5 , 6 , 7 ] [ Difficulty ] ] ;
1232: LD_ADDR_EXP 15
1236: PUSH
1237: LD_INT 0
1239: PUSH
1240: LD_INT 5
1242: PUSH
1243: LD_INT 6
1245: PUSH
1246: LD_INT 7
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: PUSH
1254: LD_OWVAR 67
1258: ARRAY
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: ST_TO_ADDR
// ruOutpost := [ ] ;
1264: LD_ADDR_EXP 14
1268: PUSH
1269: EMPTY
1270: ST_TO_ADDR
// staticMines := [ ] ;
1271: LD_ADDR_EXP 16
1275: PUSH
1276: EMPTY
1277: ST_TO_ADDR
// baseCaptured := false ;
1278: LD_ADDR_EXP 17
1282: PUSH
1283: LD_INT 0
1285: ST_TO_ADDR
// legDestCounter := 0 ;
1286: LD_ADDR_EXP 18
1290: PUSH
1291: LD_INT 0
1293: ST_TO_ADDR
// legOfferAccepted := false ;
1294: LD_ADDR_EXP 20
1298: PUSH
1299: LD_INT 0
1301: ST_TO_ADDR
// legChangeSide := false ;
1302: LD_ADDR_EXP 21
1306: PUSH
1307: LD_INT 0
1309: ST_TO_ADDR
// allyDestCounter := 0 ;
1310: LD_ADDR_EXP 22
1314: PUSH
1315: LD_INT 0
1317: ST_TO_ADDR
// outpostEscape := false ;
1318: LD_ADDR_EXP 27
1322: PUSH
1323: LD_INT 0
1325: ST_TO_ADDR
// dialogueMineDetected := false ;
1326: LD_ADDR_EXP 28
1330: PUSH
1331: LD_INT 0
1333: ST_TO_ADDR
// PrepareAmericans ;
1334: CALL 7250 0 0
// PrepareLegion ;
1338: CALL 5515 0 0
// PrepareRussians ;
1342: CALL 2481 0 0
// playerForces := PreparePlayer ;
1346: LD_ADDR_EXP 10
1350: PUSH
1351: CALL 8493 0 0
1355: ST_TO_ADDR
// AnimateTrees ( true ) ;
1356: LD_INT 1
1358: PPUSH
1359: CALL_OW 573
// PrepareNature ( 4 , 3 , 8 , 5 , 3 , 1 , 8 , natureGroundArea , natureWaterArea ) ;
1363: LD_INT 4
1365: PPUSH
1366: LD_INT 3
1368: PPUSH
1369: LD_INT 8
1371: PPUSH
1372: LD_INT 5
1374: PPUSH
1375: LD_INT 3
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 8
1383: PPUSH
1384: LD_INT 2
1386: PPUSH
1387: LD_INT 1
1389: PPUSH
1390: CALL 51970 0 9
// MC_Start ;
1394: CALL 57931 0 0
// Action ;
1398: CALL 10689 0 0
// end ; end ;
1402: LD_VAR 0 1
1406: RET
// export function CustomInitMacro ; begin
1407: LD_INT 0
1409: PPUSH
// if GameType <> 1 then
1410: LD_EXP 2
1414: PUSH
1415: LD_INT 1
1417: NONEQUAL
1418: IFFALSE 1422
// exit ;
1420: GO 2476
// MC_SetScanArea ( mc_amer , amerBase ) ;
1422: LD_EXP 5
1426: PPUSH
1427: LD_INT 3
1429: PPUSH
1430: CALL 80771 0 2
// MC_SetParkingArea ( mc_amer , amerParking ) ;
1434: LD_EXP 5
1438: PPUSH
1439: LD_INT 4
1441: PPUSH
1442: CALL 80715 0 2
// MC_SetAllowedTurretWeapons ( mc_amer , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1446: LD_EXP 5
1450: PPUSH
1451: LD_INT 11
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 7
1459: PUSH
1460: LD_INT 9
1462: PUSH
1463: LD_INT 10
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PPUSH
1473: CALL 80603 0 2
// MC_SetCratesArea ( mc_amer , amerCrates ) ;
1477: LD_EXP 5
1481: PPUSH
1482: LD_INT 5
1484: PPUSH
1485: CALL 80285 0 2
// MC_SetTame ( mc_amer , amerBase ) ;
1489: LD_EXP 5
1493: PPUSH
1494: LD_INT 3
1496: PPUSH
1497: CALL 80016 0 2
// MC_SetDefenderLimit ( mc_amer , 4 ) ;
1501: LD_EXP 5
1505: PPUSH
1506: LD_INT 4
1508: PPUSH
1509: CALL 79635 0 2
// MC_SetProduceList ( mc_amer , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_solar , control_remote , us_laser ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , ] ) ;
1513: LD_EXP 5
1517: PPUSH
1518: LD_INT 3
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 2
1526: PUSH
1527: LD_INT 5
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: PUSH
1536: LD_INT 3
1538: PUSH
1539: LD_INT 2
1541: PUSH
1542: LD_INT 2
1544: PUSH
1545: LD_INT 9
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: PUSH
1554: LD_INT 4
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: LD_INT 2
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 4
1574: PUSH
1575: LD_INT 1
1577: PUSH
1578: LD_INT 2
1580: PUSH
1581: LD_INT 6
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: PPUSH
1596: CALL 79450 0 2
// MC_SetBuildingList ( mc_amer , [ [ b_turret , 114 , 16 , 0 ] , [ b_bunker , 110 , 12 , 0 ] ] ) ;
1600: LD_EXP 5
1604: PPUSH
1605: LD_INT 33
1607: PUSH
1608: LD_INT 114
1610: PUSH
1611: LD_INT 16
1613: PUSH
1614: LD_INT 0
1616: PUSH
1617: EMPTY
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: PUSH
1623: LD_INT 32
1625: PUSH
1626: LD_INT 110
1628: PUSH
1629: LD_INT 12
1631: PUSH
1632: LD_INT 0
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PPUSH
1645: CALL 79342 0 2
// MC_SetLabKind ( mc_amer , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1649: LD_EXP 5
1653: PPUSH
1654: LD_INT 10
1656: PUSH
1657: LD_INT 15
1659: PUSH
1660: LD_INT 12
1662: PUSH
1663: LD_INT 11
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: PPUSH
1672: CALL 80192 0 2
// MC_SetScanArea ( mc_leg , legBase ) ;
1676: LD_EXP 6
1680: PPUSH
1681: LD_INT 6
1683: PPUSH
1684: CALL 80771 0 2
// MC_SetParkingArea ( mc_leg , legParking ) ;
1688: LD_EXP 6
1692: PPUSH
1693: LD_INT 7
1695: PPUSH
1696: CALL 80715 0 2
// MC_SetAllowedTurretWeapons ( mc_leg , [ ar_radar , ar_gun , ar_rocket_launcher , ar_gatling_gun ] ) ;
1700: LD_EXP 6
1704: PPUSH
1705: LD_INT 30
1707: PUSH
1708: LD_INT 27
1710: PUSH
1711: LD_INT 28
1713: PUSH
1714: LD_INT 25
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: PPUSH
1723: CALL 80603 0 2
// MC_SetCratesArea ( mc_leg , legCrates ) ;
1727: LD_EXP 6
1731: PPUSH
1732: LD_INT 17
1734: PPUSH
1735: CALL 80285 0 2
// MC_SetTame ( mc_leg , legBase ) ;
1739: LD_EXP 6
1743: PPUSH
1744: LD_INT 6
1746: PPUSH
1747: CALL 80016 0 2
// MC_SetDefenderLimit ( mc_leg , 5 ) ;
1751: LD_EXP 6
1755: PPUSH
1756: LD_INT 5
1758: PPUSH
1759: CALL 79635 0 2
// MC_SetMinesField ( mc_leg , 10 , legMines ) ;
1763: LD_EXP 6
1767: PPUSH
1768: LD_INT 10
1770: PPUSH
1771: LD_INT 9
1773: PPUSH
1774: CALL 79132 0 3
// MC_SetBuildingList ( mc_leg , [ [ b_armoury , 157 , 144 , 0 ] , [ b_bunker , 151 , 142 , 0 ] , [ b_bunker , 161 , 144 , 0 ] , [ b_bunker , 140 , 133 , 0 ] ] ) ;
1778: LD_EXP 6
1782: PPUSH
1783: LD_INT 4
1785: PUSH
1786: LD_INT 157
1788: PUSH
1789: LD_INT 144
1791: PUSH
1792: LD_INT 0
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 32
1803: PUSH
1804: LD_INT 151
1806: PUSH
1807: LD_INT 142
1809: PUSH
1810: LD_INT 0
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_INT 32
1821: PUSH
1822: LD_INT 161
1824: PUSH
1825: LD_INT 144
1827: PUSH
1828: LD_INT 0
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 32
1839: PUSH
1840: LD_INT 140
1842: PUSH
1843: LD_INT 133
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: PPUSH
1861: CALL 79342 0 2
// MC_SetProduceList ( mc_leg , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ) ;
1865: LD_EXP 6
1869: PPUSH
1870: LD_INT 13
1872: PUSH
1873: LD_INT 2
1875: PUSH
1876: LD_INT 1
1878: PUSH
1879: LD_INT 31
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 13
1890: PUSH
1891: LD_INT 2
1893: PUSH
1894: LD_INT 1
1896: PUSH
1897: LD_INT 31
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 13
1908: PUSH
1909: LD_INT 1
1911: PUSH
1912: LD_INT 1
1914: PUSH
1915: LD_INT 27
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 13
1926: PUSH
1927: LD_INT 1
1929: PUSH
1930: LD_INT 2
1932: PUSH
1933: LD_INT 27
1935: PUSH
1936: EMPTY
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 13
1944: PUSH
1945: LD_INT 1
1947: PUSH
1948: LD_INT 2
1950: PUSH
1951: LD_INT 27
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: PUSH
1960: LD_INT 13
1962: PUSH
1963: LD_INT 1
1965: PUSH
1966: LD_INT 2
1968: PUSH
1969: LD_INT 28
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 13
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: LD_INT 2
1986: PUSH
1987: LD_INT 28
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: PUSH
1996: LD_INT 13
1998: PUSH
1999: LD_INT 1
2001: PUSH
2002: LD_INT 2
2004: PUSH
2005: LD_INT 32
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: PPUSH
2024: CALL 79450 0 2
// HiddenCamera ( 165 , 156 , 8 ) ;
2028: LD_INT 165
2030: PPUSH
2031: LD_INT 156
2033: PPUSH
2034: LD_INT 8
2036: PPUSH
2037: CALL_OW 244
// MC_SetScanArea ( mc_rus_1 , rus1Base ) ;
2041: LD_EXP 7
2045: PPUSH
2046: LD_INT 15
2048: PPUSH
2049: CALL 80771 0 2
// MC_SetParkingArea ( mc_rus_1 , rus1Parking ) ;
2053: LD_EXP 7
2057: PPUSH
2058: LD_INT 16
2060: PPUSH
2061: CALL 80715 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_1 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2065: LD_EXP 7
2069: PPUSH
2070: LD_INT 43
2072: PUSH
2073: LD_INT 47
2075: PUSH
2076: LD_INT 45
2078: PUSH
2079: LD_INT 49
2081: PUSH
2082: LD_INT 46
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: PPUSH
2092: CALL 80603 0 2
// MC_SetCratesArea ( mc_rus_1 , rusCrates ) ;
2096: LD_EXP 7
2100: PPUSH
2101: LD_INT 13
2103: PPUSH
2104: CALL 80285 0 2
// MC_SetTame ( mc_rus_1 , rus1Base ) ;
2108: LD_EXP 7
2112: PPUSH
2113: LD_INT 15
2115: PPUSH
2116: CALL 80016 0 2
// MC_SetDefenderLimit ( mc_rus_1 , 5 ) ;
2120: LD_EXP 7
2124: PPUSH
2125: LD_INT 5
2127: PPUSH
2128: CALL 79635 0 2
// MC_SetProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_rocket ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_crane ] , ] ) ;
2132: LD_EXP 7
2136: PPUSH
2137: LD_INT 23
2139: PUSH
2140: LD_INT 1
2142: PUSH
2143: LD_INT 3
2145: PUSH
2146: LD_INT 46
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: PUSH
2155: LD_INT 23
2157: PUSH
2158: LD_INT 1
2160: PUSH
2161: LD_INT 1
2163: PUSH
2164: LD_INT 46
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: PUSH
2173: LD_INT 23
2175: PUSH
2176: LD_INT 1
2178: PUSH
2179: LD_INT 3
2181: PUSH
2182: LD_INT 45
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: PUSH
2191: LD_INT 23
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: LD_INT 47
2202: PUSH
2203: EMPTY
2204: LIST
2205: LIST
2206: LIST
2207: LIST
2208: PUSH
2209: LD_INT 23
2211: PUSH
2212: LD_INT 1
2214: PUSH
2215: LD_INT 3
2217: PUSH
2218: LD_INT 46
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: LIST
2225: LIST
2226: PUSH
2227: LD_INT 21
2229: PUSH
2230: LD_INT 1
2232: PUSH
2233: LD_INT 3
2235: PUSH
2236: LD_INT 51
2238: PUSH
2239: EMPTY
2240: LIST
2241: LIST
2242: LIST
2243: LIST
2244: PUSH
2245: LD_INT 21
2247: PUSH
2248: LD_INT 1
2250: PUSH
2251: LD_INT 3
2253: PUSH
2254: LD_INT 52
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: PPUSH
2272: CALL 79450 0 2
// MC_SetScanArea ( mc_rus_2 , rus2Base ) ;
2276: LD_EXP 8
2280: PPUSH
2281: LD_INT 11
2283: PPUSH
2284: CALL 80771 0 2
// MC_SetParkingArea ( mc_rus_2 , rus2Parking ) ;
2288: LD_EXP 8
2292: PPUSH
2293: LD_INT 12
2295: PPUSH
2296: CALL 80715 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_2 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2300: LD_EXP 8
2304: PPUSH
2305: LD_INT 43
2307: PUSH
2308: LD_INT 47
2310: PUSH
2311: LD_INT 45
2313: PUSH
2314: LD_INT 49
2316: PUSH
2317: LD_INT 46
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL 80603 0 2
// MC_SetCratesArea ( mc_rus_2 , rusCrates ) ;
2331: LD_EXP 8
2335: PPUSH
2336: LD_INT 13
2338: PPUSH
2339: CALL 80285 0 2
// MC_SetTame ( mc_rus_2 , rus2Base ) ;
2343: LD_EXP 8
2347: PPUSH
2348: LD_INT 11
2350: PPUSH
2351: CALL 80016 0 2
// MC_SetDefenderLimit ( mc_rus_2 , 4 ) ;
2355: LD_EXP 8
2359: PPUSH
2360: LD_INT 4
2362: PPUSH
2363: CALL 79635 0 2
// MC_SetTeleportExit ( mc_rus_2 , [ [ 115 , 201 ] ] ) ;
2367: LD_EXP 8
2371: PPUSH
2372: LD_INT 115
2374: PUSH
2375: LD_INT 201
2377: PUSH
2378: EMPTY
2379: LIST
2380: LIST
2381: PUSH
2382: EMPTY
2383: LIST
2384: PPUSH
2385: CALL 80341 0 2
// MC_SetProduceList ( mc_rus_2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
2389: LD_EXP 8
2393: PPUSH
2394: LD_INT 24
2396: PUSH
2397: LD_INT 3
2399: PUSH
2400: LD_INT 3
2402: PUSH
2403: LD_INT 46
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: PUSH
2412: LD_INT 24
2414: PUSH
2415: LD_INT 3
2417: PUSH
2418: LD_INT 3
2420: PUSH
2421: LD_INT 46
2423: PUSH
2424: EMPTY
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: PUSH
2430: LD_INT 24
2432: PUSH
2433: LD_INT 3
2435: PUSH
2436: LD_INT 3
2438: PUSH
2439: LD_INT 46
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: LIST
2446: LIST
2447: PUSH
2448: LD_INT 24
2450: PUSH
2451: LD_INT 3
2453: PUSH
2454: LD_INT 3
2456: PUSH
2457: LD_INT 46
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: LIST
2464: LIST
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL 79450 0 2
// end ;
2476: LD_VAR 0 1
2480: RET
// export function PrepareRussians ; var i , b , tmp , side , sr , depot , base ; begin
2481: LD_INT 0
2483: PPUSH
2484: PPUSH
2485: PPUSH
2486: PPUSH
2487: PPUSH
2488: PPUSH
2489: PPUSH
2490: PPUSH
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , rusApe , 0 ) ;
2491: LD_INT 0
2493: PPUSH
2494: LD_INT 0
2496: PPUSH
2497: LD_INT 3
2499: PPUSH
2500: LD_INT 0
2502: PPUSH
2503: LD_INT 0
2505: PPUSH
2506: LD_INT 0
2508: PPUSH
2509: LD_INT 0
2511: PPUSH
2512: LD_INT 14
2514: PPUSH
2515: LD_INT 0
2517: PPUSH
2518: CALL 51970 0 9
// side := 3 ;
2522: LD_ADDR_VAR 0 5
2526: PUSH
2527: LD_INT 3
2529: ST_TO_ADDR
// SetTech ( tech_targTeleport , side , state_researched ) ;
2530: LD_INT 38
2532: PPUSH
2533: LD_VAR 0 5
2537: PPUSH
2538: LD_INT 2
2540: PPUSH
2541: CALL_OW 322
// SetTech ( tech_gun , side , state_researched ) ;
2545: LD_INT 39
2547: PPUSH
2548: LD_VAR 0 5
2552: PPUSH
2553: LD_INT 2
2555: PPUSH
2556: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
2560: LD_INT 34
2562: PPUSH
2563: LD_VAR 0 5
2567: PPUSH
2568: LD_INT 2
2570: PPUSH
2571: CALL_OW 322
// tmp := [ [ 0 , 208 , 163 , 4 , 0 , 0 ] , [ 3 , 194 , 161 , 1 , 0 , 0 ] , [ 17 , 190 , 161 , 1 , 0 , 0 ] , [ 5 , 200 , 145 , 3 , 0 , 0 ] , [ 32 , 192 , 144 , 3 , 0 , 0 ] , [ 26 , 216 , 172 , 3 , 0 , 0 ] , [ 26 , 218 , 176 , 3 , 0 , 0 ] , [ 29 , 182 , 149 , 3 , 0 , 0 ] , [ 8 , 201 , 171 , 0 , 10 , 11 ] , [ 32 , 188 , 167 , 0 , 0 , 0 ] , [ 32 , 202 , 179 , 0 , 0 , 0 ] , [ 32 , 209 , 182 , 0 , 0 , 0 ] , [ 32 , 220 , 183 , 5 , 0 , 0 ] , [ 32 , 225 , 181 , 5 , 0 , 0 ] , [ 26 , 220 , 174 , 5 , 0 , 0 ] , [ 1 , 84 , 128 , 4 , 0 , 0 ] , [ 3 , 68 , 121 , 1 , 0 , 0 ] , [ 19 , 72 , 125 , 5 , 0 , 0 ] , [ 18 , 68 , 124 , 0 , 0 , 0 ] , [ 24 , 64 , 121 , 1 , 0 , 0 ] , [ 17 , 65 , 118 , 2 , 0 , 0 ] , [ 21 , 68 , 117 , 3 , 0 , 0 ] , [ 8 , 68 , 130 , 1 , 14 , 10 ] , [ 8 , 67 , 110 , 2 , 11 , 12 ] , [ 28 , 85 , 108 , 2 , 0 , 0 ] , [ 28 , 85 , 124 , 2 , 0 , 0 ] , [ 30 , 97 , 119 , 2 , 0 , 0 ] , [ 5 , 111 , 138 , 4 , 0 , 0 ] , [ 33 , 104 , 130 , 3 , 0 , 0 ] , [ 33 , 110 , 142 , 5 , 0 , 0 ] , [ 33 , 91 , 131 , 5 , 0 , 0 ] , [ 33 , 107 , 157 , 5 , 0 , 0 ] , [ 33 , 104 , 160 , 5 , 0 , 0 ] , [ 33 , 101 , 162 , 5 , 0 , 0 ] , [ 32 , 87 , 157 , 5 , 0 , 0 ] , [ 32 , 105 , 158 , 5 , 0 , 0 ] , [ 33 , 91 , 118 , 4 , 0 , 0 ] , [ 33 , 89 , 107 , 4 , 0 , 0 ] , [ 5 , 86 , 96 , 3 , 0 , 0 ] , [ 33 , 91 , 102 , 4 , 0 , 0 ] , [ 32 , 80 , 95 , 3 , 0 , 0 ] , [ 28 , 77 , 105 , 3 , 0 , 0 ] , [ 28 , 85 , 113 , 3 , 0 , 0 ] , [ 28 , 55 , 97 , 3 , 0 , 0 ] , [ 28 , 88 , 128 , 3 , 0 , 0 ] , [ 32 , 69 , 101 , 2 , 0 , 0 ] , [ 1 , 34 , 23 , 4 , 0 , 0 ] , [ 8 , 25 , 4 , 3 , 11 , 10 ] , [ 8 , 15 , 4 , 2 , 14 , 12 ] , [ 29 , 55 , 35 , 2 , 0 , 0 ] , [ 29 , 24 , 44 , 2 , 0 , 0 ] , [ 34 , 34 , 32 , 4 , 0 , 0 ] , [ 3 , 14 , 16 , 1 , 0 , 0 ] , [ 24 , 10 , 16 , 1 , 0 , 0 ] , [ 21 , 11 , 13 , 2 , 0 , 0 ] , [ 18 , 14 , 12 , 3 , 0 , 0 ] , [ 16 , 14 , 19 , 0 , 0 , 0 ] , [ 17 , 18 , 20 , 5 , 0 , 0 ] , [ 28 , 10 , 5 , 1 , 0 , 0 ] , [ 28 , 8 , 8 , 1 , 0 , 0 ] , [ 26 , 19 , 2 , 1 , 0 , 0 ] , [ 26 , 30 , 2 , 1 , 0 , 0 ] , [ 5 , 59 , 20 , 4 , 0 , 0 ] , [ 32 , 60 , 24 , 4 , 0 , 0 ] , [ 32 , 61 , 45 , 5 , 0 , 0 ] , [ 32 , 52 , 51 , 5 , 0 , 0 ] , [ 33 , 56 , 51 , 5 , 0 , 0 ] , [ 33 , 62 , 49 , 5 , 0 , 0 ] , [ 33 , 41 , 47 , 5 , 0 , 0 ] , [ 33 , 33 , 52 , 5 , 0 , 0 ] , [ 5 , 31 , 40 , 0 , 0 , 0 ] , [ 33 , 65 , 37 , 5 , 0 , 0 ] , [ 33 , 63 , 29 , 4 , 0 , 0 ] , [ 33 , 54 , 11 , 4 , 0 , 0 ] , [ 33 , 56 , 15 , 4 , 0 , 0 ] , [ 33 , 51 , 6 , 4 , 0 , 0 ] , [ 26 , 39 , 25 , 0 , 0 , 0 ] , [ 26 , 37 , 21 , 0 , 0 , 0 ] , [ 32 , 35 , 17 , 4 , 0 , 0 ] , [ 33 , 35 , 28 , 4 , 0 , 0 ] , [ 33 , 28 , 46 , 5 , 0 , 0 ] , [ 33 , 31 , 6 , 4 , 0 , 0 ] , [ 26 , 54 , 38 , 4 , 0 , 0 ] , [ 33 , 207 , 167 , 3 , 0 , 0 ] , [ 30 , 43 , 2 , 4 , 0 , 0 ] ] ;
2575: LD_ADDR_VAR 0 4
2579: PUSH
2580: LD_INT 0
2582: PUSH
2583: LD_INT 208
2585: PUSH
2586: LD_INT 163
2588: PUSH
2589: LD_INT 4
2591: PUSH
2592: LD_INT 0
2594: PUSH
2595: LD_INT 0
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: PUSH
2606: LD_INT 3
2608: PUSH
2609: LD_INT 194
2611: PUSH
2612: LD_INT 161
2614: PUSH
2615: LD_INT 1
2617: PUSH
2618: LD_INT 0
2620: PUSH
2621: LD_INT 0
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: PUSH
2632: LD_INT 17
2634: PUSH
2635: LD_INT 190
2637: PUSH
2638: LD_INT 161
2640: PUSH
2641: LD_INT 1
2643: PUSH
2644: LD_INT 0
2646: PUSH
2647: LD_INT 0
2649: PUSH
2650: EMPTY
2651: LIST
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: LIST
2657: PUSH
2658: LD_INT 5
2660: PUSH
2661: LD_INT 200
2663: PUSH
2664: LD_INT 145
2666: PUSH
2667: LD_INT 3
2669: PUSH
2670: LD_INT 0
2672: PUSH
2673: LD_INT 0
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: LIST
2680: LIST
2681: LIST
2682: LIST
2683: PUSH
2684: LD_INT 32
2686: PUSH
2687: LD_INT 192
2689: PUSH
2690: LD_INT 144
2692: PUSH
2693: LD_INT 3
2695: PUSH
2696: LD_INT 0
2698: PUSH
2699: LD_INT 0
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: LIST
2709: PUSH
2710: LD_INT 26
2712: PUSH
2713: LD_INT 216
2715: PUSH
2716: LD_INT 172
2718: PUSH
2719: LD_INT 3
2721: PUSH
2722: LD_INT 0
2724: PUSH
2725: LD_INT 0
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: LIST
2732: LIST
2733: LIST
2734: LIST
2735: PUSH
2736: LD_INT 26
2738: PUSH
2739: LD_INT 218
2741: PUSH
2742: LD_INT 176
2744: PUSH
2745: LD_INT 3
2747: PUSH
2748: LD_INT 0
2750: PUSH
2751: LD_INT 0
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: LIST
2758: LIST
2759: LIST
2760: LIST
2761: PUSH
2762: LD_INT 29
2764: PUSH
2765: LD_INT 182
2767: PUSH
2768: LD_INT 149
2770: PUSH
2771: LD_INT 3
2773: PUSH
2774: LD_INT 0
2776: PUSH
2777: LD_INT 0
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: LIST
2784: LIST
2785: LIST
2786: LIST
2787: PUSH
2788: LD_INT 8
2790: PUSH
2791: LD_INT 201
2793: PUSH
2794: LD_INT 171
2796: PUSH
2797: LD_INT 0
2799: PUSH
2800: LD_INT 10
2802: PUSH
2803: LD_INT 11
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: LIST
2810: LIST
2811: LIST
2812: LIST
2813: PUSH
2814: LD_INT 32
2816: PUSH
2817: LD_INT 188
2819: PUSH
2820: LD_INT 167
2822: PUSH
2823: LD_INT 0
2825: PUSH
2826: LD_INT 0
2828: PUSH
2829: LD_INT 0
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_INT 32
2842: PUSH
2843: LD_INT 202
2845: PUSH
2846: LD_INT 179
2848: PUSH
2849: LD_INT 0
2851: PUSH
2852: LD_INT 0
2854: PUSH
2855: LD_INT 0
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: PUSH
2866: LD_INT 32
2868: PUSH
2869: LD_INT 209
2871: PUSH
2872: LD_INT 182
2874: PUSH
2875: LD_INT 0
2877: PUSH
2878: LD_INT 0
2880: PUSH
2881: LD_INT 0
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: LIST
2888: LIST
2889: LIST
2890: LIST
2891: PUSH
2892: LD_INT 32
2894: PUSH
2895: LD_INT 220
2897: PUSH
2898: LD_INT 183
2900: PUSH
2901: LD_INT 5
2903: PUSH
2904: LD_INT 0
2906: PUSH
2907: LD_INT 0
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: LIST
2914: LIST
2915: LIST
2916: LIST
2917: PUSH
2918: LD_INT 32
2920: PUSH
2921: LD_INT 225
2923: PUSH
2924: LD_INT 181
2926: PUSH
2927: LD_INT 5
2929: PUSH
2930: LD_INT 0
2932: PUSH
2933: LD_INT 0
2935: PUSH
2936: EMPTY
2937: LIST
2938: LIST
2939: LIST
2940: LIST
2941: LIST
2942: LIST
2943: PUSH
2944: LD_INT 26
2946: PUSH
2947: LD_INT 220
2949: PUSH
2950: LD_INT 174
2952: PUSH
2953: LD_INT 5
2955: PUSH
2956: LD_INT 0
2958: PUSH
2959: LD_INT 0
2961: PUSH
2962: EMPTY
2963: LIST
2964: LIST
2965: LIST
2966: LIST
2967: LIST
2968: LIST
2969: PUSH
2970: LD_INT 1
2972: PUSH
2973: LD_INT 84
2975: PUSH
2976: LD_INT 128
2978: PUSH
2979: LD_INT 4
2981: PUSH
2982: LD_INT 0
2984: PUSH
2985: LD_INT 0
2987: PUSH
2988: EMPTY
2989: LIST
2990: LIST
2991: LIST
2992: LIST
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 3
2998: PUSH
2999: LD_INT 68
3001: PUSH
3002: LD_INT 121
3004: PUSH
3005: LD_INT 1
3007: PUSH
3008: LD_INT 0
3010: PUSH
3011: LD_INT 0
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: LIST
3018: LIST
3019: LIST
3020: LIST
3021: PUSH
3022: LD_INT 19
3024: PUSH
3025: LD_INT 72
3027: PUSH
3028: LD_INT 125
3030: PUSH
3031: LD_INT 5
3033: PUSH
3034: LD_INT 0
3036: PUSH
3037: LD_INT 0
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: LIST
3044: LIST
3045: LIST
3046: LIST
3047: PUSH
3048: LD_INT 18
3050: PUSH
3051: LD_INT 68
3053: PUSH
3054: LD_INT 124
3056: PUSH
3057: LD_INT 0
3059: PUSH
3060: LD_INT 0
3062: PUSH
3063: LD_INT 0
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: PUSH
3074: LD_INT 24
3076: PUSH
3077: LD_INT 64
3079: PUSH
3080: LD_INT 121
3082: PUSH
3083: LD_INT 1
3085: PUSH
3086: LD_INT 0
3088: PUSH
3089: LD_INT 0
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: LIST
3099: PUSH
3100: LD_INT 17
3102: PUSH
3103: LD_INT 65
3105: PUSH
3106: LD_INT 118
3108: PUSH
3109: LD_INT 2
3111: PUSH
3112: LD_INT 0
3114: PUSH
3115: LD_INT 0
3117: PUSH
3118: EMPTY
3119: LIST
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 21
3128: PUSH
3129: LD_INT 68
3131: PUSH
3132: LD_INT 117
3134: PUSH
3135: LD_INT 3
3137: PUSH
3138: LD_INT 0
3140: PUSH
3141: LD_INT 0
3143: PUSH
3144: EMPTY
3145: LIST
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: LIST
3151: PUSH
3152: LD_INT 8
3154: PUSH
3155: LD_INT 68
3157: PUSH
3158: LD_INT 130
3160: PUSH
3161: LD_INT 1
3163: PUSH
3164: LD_INT 14
3166: PUSH
3167: LD_INT 10
3169: PUSH
3170: EMPTY
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: PUSH
3178: LD_INT 8
3180: PUSH
3181: LD_INT 67
3183: PUSH
3184: LD_INT 110
3186: PUSH
3187: LD_INT 2
3189: PUSH
3190: LD_INT 11
3192: PUSH
3193: LD_INT 12
3195: PUSH
3196: EMPTY
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: PUSH
3204: LD_INT 28
3206: PUSH
3207: LD_INT 85
3209: PUSH
3210: LD_INT 108
3212: PUSH
3213: LD_INT 2
3215: PUSH
3216: LD_INT 0
3218: PUSH
3219: LD_INT 0
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: LIST
3229: PUSH
3230: LD_INT 28
3232: PUSH
3233: LD_INT 85
3235: PUSH
3236: LD_INT 124
3238: PUSH
3239: LD_INT 2
3241: PUSH
3242: LD_INT 0
3244: PUSH
3245: LD_INT 0
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: PUSH
3256: LD_INT 30
3258: PUSH
3259: LD_INT 97
3261: PUSH
3262: LD_INT 119
3264: PUSH
3265: LD_INT 2
3267: PUSH
3268: LD_INT 0
3270: PUSH
3271: LD_INT 0
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: PUSH
3282: LD_INT 5
3284: PUSH
3285: LD_INT 111
3287: PUSH
3288: LD_INT 138
3290: PUSH
3291: LD_INT 4
3293: PUSH
3294: LD_INT 0
3296: PUSH
3297: LD_INT 0
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: PUSH
3308: LD_INT 33
3310: PUSH
3311: LD_INT 104
3313: PUSH
3314: LD_INT 130
3316: PUSH
3317: LD_INT 3
3319: PUSH
3320: LD_INT 0
3322: PUSH
3323: LD_INT 0
3325: PUSH
3326: EMPTY
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: PUSH
3334: LD_INT 33
3336: PUSH
3337: LD_INT 110
3339: PUSH
3340: LD_INT 142
3342: PUSH
3343: LD_INT 5
3345: PUSH
3346: LD_INT 0
3348: PUSH
3349: LD_INT 0
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: PUSH
3360: LD_INT 33
3362: PUSH
3363: LD_INT 91
3365: PUSH
3366: LD_INT 131
3368: PUSH
3369: LD_INT 5
3371: PUSH
3372: LD_INT 0
3374: PUSH
3375: LD_INT 0
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: PUSH
3386: LD_INT 33
3388: PUSH
3389: LD_INT 107
3391: PUSH
3392: LD_INT 157
3394: PUSH
3395: LD_INT 5
3397: PUSH
3398: LD_INT 0
3400: PUSH
3401: LD_INT 0
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: PUSH
3412: LD_INT 33
3414: PUSH
3415: LD_INT 104
3417: PUSH
3418: LD_INT 160
3420: PUSH
3421: LD_INT 5
3423: PUSH
3424: LD_INT 0
3426: PUSH
3427: LD_INT 0
3429: PUSH
3430: EMPTY
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: PUSH
3438: LD_INT 33
3440: PUSH
3441: LD_INT 101
3443: PUSH
3444: LD_INT 162
3446: PUSH
3447: LD_INT 5
3449: PUSH
3450: LD_INT 0
3452: PUSH
3453: LD_INT 0
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: PUSH
3464: LD_INT 32
3466: PUSH
3467: LD_INT 87
3469: PUSH
3470: LD_INT 157
3472: PUSH
3473: LD_INT 5
3475: PUSH
3476: LD_INT 0
3478: PUSH
3479: LD_INT 0
3481: PUSH
3482: EMPTY
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: PUSH
3490: LD_INT 32
3492: PUSH
3493: LD_INT 105
3495: PUSH
3496: LD_INT 158
3498: PUSH
3499: LD_INT 5
3501: PUSH
3502: LD_INT 0
3504: PUSH
3505: LD_INT 0
3507: PUSH
3508: EMPTY
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: PUSH
3516: LD_INT 33
3518: PUSH
3519: LD_INT 91
3521: PUSH
3522: LD_INT 118
3524: PUSH
3525: LD_INT 4
3527: PUSH
3528: LD_INT 0
3530: PUSH
3531: LD_INT 0
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: PUSH
3542: LD_INT 33
3544: PUSH
3545: LD_INT 89
3547: PUSH
3548: LD_INT 107
3550: PUSH
3551: LD_INT 4
3553: PUSH
3554: LD_INT 0
3556: PUSH
3557: LD_INT 0
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: PUSH
3568: LD_INT 5
3570: PUSH
3571: LD_INT 86
3573: PUSH
3574: LD_INT 96
3576: PUSH
3577: LD_INT 3
3579: PUSH
3580: LD_INT 0
3582: PUSH
3583: LD_INT 0
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: PUSH
3594: LD_INT 33
3596: PUSH
3597: LD_INT 91
3599: PUSH
3600: LD_INT 102
3602: PUSH
3603: LD_INT 4
3605: PUSH
3606: LD_INT 0
3608: PUSH
3609: LD_INT 0
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: PUSH
3620: LD_INT 32
3622: PUSH
3623: LD_INT 80
3625: PUSH
3626: LD_INT 95
3628: PUSH
3629: LD_INT 3
3631: PUSH
3632: LD_INT 0
3634: PUSH
3635: LD_INT 0
3637: PUSH
3638: EMPTY
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: PUSH
3646: LD_INT 28
3648: PUSH
3649: LD_INT 77
3651: PUSH
3652: LD_INT 105
3654: PUSH
3655: LD_INT 3
3657: PUSH
3658: LD_INT 0
3660: PUSH
3661: LD_INT 0
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: PUSH
3672: LD_INT 28
3674: PUSH
3675: LD_INT 85
3677: PUSH
3678: LD_INT 113
3680: PUSH
3681: LD_INT 3
3683: PUSH
3684: LD_INT 0
3686: PUSH
3687: LD_INT 0
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: PUSH
3698: LD_INT 28
3700: PUSH
3701: LD_INT 55
3703: PUSH
3704: LD_INT 97
3706: PUSH
3707: LD_INT 3
3709: PUSH
3710: LD_INT 0
3712: PUSH
3713: LD_INT 0
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: PUSH
3724: LD_INT 28
3726: PUSH
3727: LD_INT 88
3729: PUSH
3730: LD_INT 128
3732: PUSH
3733: LD_INT 3
3735: PUSH
3736: LD_INT 0
3738: PUSH
3739: LD_INT 0
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: LIST
3748: LIST
3749: PUSH
3750: LD_INT 32
3752: PUSH
3753: LD_INT 69
3755: PUSH
3756: LD_INT 101
3758: PUSH
3759: LD_INT 2
3761: PUSH
3762: LD_INT 0
3764: PUSH
3765: LD_INT 0
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: PUSH
3776: LD_INT 1
3778: PUSH
3779: LD_INT 34
3781: PUSH
3782: LD_INT 23
3784: PUSH
3785: LD_INT 4
3787: PUSH
3788: LD_INT 0
3790: PUSH
3791: LD_INT 0
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: PUSH
3802: LD_INT 8
3804: PUSH
3805: LD_INT 25
3807: PUSH
3808: LD_INT 4
3810: PUSH
3811: LD_INT 3
3813: PUSH
3814: LD_INT 11
3816: PUSH
3817: LD_INT 10
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: PUSH
3828: LD_INT 8
3830: PUSH
3831: LD_INT 15
3833: PUSH
3834: LD_INT 4
3836: PUSH
3837: LD_INT 2
3839: PUSH
3840: LD_INT 14
3842: PUSH
3843: LD_INT 12
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: PUSH
3854: LD_INT 29
3856: PUSH
3857: LD_INT 55
3859: PUSH
3860: LD_INT 35
3862: PUSH
3863: LD_INT 2
3865: PUSH
3866: LD_INT 0
3868: PUSH
3869: LD_INT 0
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: PUSH
3880: LD_INT 29
3882: PUSH
3883: LD_INT 24
3885: PUSH
3886: LD_INT 44
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 0
3894: PUSH
3895: LD_INT 0
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: PUSH
3906: LD_INT 34
3908: PUSH
3909: LD_INT 34
3911: PUSH
3912: LD_INT 32
3914: PUSH
3915: LD_INT 4
3917: PUSH
3918: LD_INT 0
3920: PUSH
3921: LD_INT 0
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: PUSH
3932: LD_INT 3
3934: PUSH
3935: LD_INT 14
3937: PUSH
3938: LD_INT 16
3940: PUSH
3941: LD_INT 1
3943: PUSH
3944: LD_INT 0
3946: PUSH
3947: LD_INT 0
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: PUSH
3958: LD_INT 24
3960: PUSH
3961: LD_INT 10
3963: PUSH
3964: LD_INT 16
3966: PUSH
3967: LD_INT 1
3969: PUSH
3970: LD_INT 0
3972: PUSH
3973: LD_INT 0
3975: PUSH
3976: EMPTY
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: PUSH
3984: LD_INT 21
3986: PUSH
3987: LD_INT 11
3989: PUSH
3990: LD_INT 13
3992: PUSH
3993: LD_INT 2
3995: PUSH
3996: LD_INT 0
3998: PUSH
3999: LD_INT 0
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: PUSH
4010: LD_INT 18
4012: PUSH
4013: LD_INT 14
4015: PUSH
4016: LD_INT 12
4018: PUSH
4019: LD_INT 3
4021: PUSH
4022: LD_INT 0
4024: PUSH
4025: LD_INT 0
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: PUSH
4036: LD_INT 16
4038: PUSH
4039: LD_INT 14
4041: PUSH
4042: LD_INT 19
4044: PUSH
4045: LD_INT 0
4047: PUSH
4048: LD_INT 0
4050: PUSH
4051: LD_INT 0
4053: PUSH
4054: EMPTY
4055: LIST
4056: LIST
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: PUSH
4062: LD_INT 17
4064: PUSH
4065: LD_INT 18
4067: PUSH
4068: LD_INT 20
4070: PUSH
4071: LD_INT 5
4073: PUSH
4074: LD_INT 0
4076: PUSH
4077: LD_INT 0
4079: PUSH
4080: EMPTY
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 28
4090: PUSH
4091: LD_INT 10
4093: PUSH
4094: LD_INT 5
4096: PUSH
4097: LD_INT 1
4099: PUSH
4100: LD_INT 0
4102: PUSH
4103: LD_INT 0
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 28
4116: PUSH
4117: LD_INT 8
4119: PUSH
4120: LD_INT 8
4122: PUSH
4123: LD_INT 1
4125: PUSH
4126: LD_INT 0
4128: PUSH
4129: LD_INT 0
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: PUSH
4140: LD_INT 26
4142: PUSH
4143: LD_INT 19
4145: PUSH
4146: LD_INT 2
4148: PUSH
4149: LD_INT 1
4151: PUSH
4152: LD_INT 0
4154: PUSH
4155: LD_INT 0
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: PUSH
4166: LD_INT 26
4168: PUSH
4169: LD_INT 30
4171: PUSH
4172: LD_INT 2
4174: PUSH
4175: LD_INT 1
4177: PUSH
4178: LD_INT 0
4180: PUSH
4181: LD_INT 0
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: PUSH
4192: LD_INT 5
4194: PUSH
4195: LD_INT 59
4197: PUSH
4198: LD_INT 20
4200: PUSH
4201: LD_INT 4
4203: PUSH
4204: LD_INT 0
4206: PUSH
4207: LD_INT 0
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: PUSH
4218: LD_INT 32
4220: PUSH
4221: LD_INT 60
4223: PUSH
4224: LD_INT 24
4226: PUSH
4227: LD_INT 4
4229: PUSH
4230: LD_INT 0
4232: PUSH
4233: LD_INT 0
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: PUSH
4244: LD_INT 32
4246: PUSH
4247: LD_INT 61
4249: PUSH
4250: LD_INT 45
4252: PUSH
4253: LD_INT 5
4255: PUSH
4256: LD_INT 0
4258: PUSH
4259: LD_INT 0
4261: PUSH
4262: EMPTY
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: PUSH
4270: LD_INT 32
4272: PUSH
4273: LD_INT 52
4275: PUSH
4276: LD_INT 51
4278: PUSH
4279: LD_INT 5
4281: PUSH
4282: LD_INT 0
4284: PUSH
4285: LD_INT 0
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: PUSH
4296: LD_INT 33
4298: PUSH
4299: LD_INT 56
4301: PUSH
4302: LD_INT 51
4304: PUSH
4305: LD_INT 5
4307: PUSH
4308: LD_INT 0
4310: PUSH
4311: LD_INT 0
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: PUSH
4322: LD_INT 33
4324: PUSH
4325: LD_INT 62
4327: PUSH
4328: LD_INT 49
4330: PUSH
4331: LD_INT 5
4333: PUSH
4334: LD_INT 0
4336: PUSH
4337: LD_INT 0
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: PUSH
4348: LD_INT 33
4350: PUSH
4351: LD_INT 41
4353: PUSH
4354: LD_INT 47
4356: PUSH
4357: LD_INT 5
4359: PUSH
4360: LD_INT 0
4362: PUSH
4363: LD_INT 0
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: PUSH
4374: LD_INT 33
4376: PUSH
4377: LD_INT 33
4379: PUSH
4380: LD_INT 52
4382: PUSH
4383: LD_INT 5
4385: PUSH
4386: LD_INT 0
4388: PUSH
4389: LD_INT 0
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: PUSH
4400: LD_INT 5
4402: PUSH
4403: LD_INT 31
4405: PUSH
4406: LD_INT 40
4408: PUSH
4409: LD_INT 0
4411: PUSH
4412: LD_INT 0
4414: PUSH
4415: LD_INT 0
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: PUSH
4426: LD_INT 33
4428: PUSH
4429: LD_INT 65
4431: PUSH
4432: LD_INT 37
4434: PUSH
4435: LD_INT 5
4437: PUSH
4438: LD_INT 0
4440: PUSH
4441: LD_INT 0
4443: PUSH
4444: EMPTY
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: PUSH
4452: LD_INT 33
4454: PUSH
4455: LD_INT 63
4457: PUSH
4458: LD_INT 29
4460: PUSH
4461: LD_INT 4
4463: PUSH
4464: LD_INT 0
4466: PUSH
4467: LD_INT 0
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: PUSH
4478: LD_INT 33
4480: PUSH
4481: LD_INT 54
4483: PUSH
4484: LD_INT 11
4486: PUSH
4487: LD_INT 4
4489: PUSH
4490: LD_INT 0
4492: PUSH
4493: LD_INT 0
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: PUSH
4504: LD_INT 33
4506: PUSH
4507: LD_INT 56
4509: PUSH
4510: LD_INT 15
4512: PUSH
4513: LD_INT 4
4515: PUSH
4516: LD_INT 0
4518: PUSH
4519: LD_INT 0
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: PUSH
4530: LD_INT 33
4532: PUSH
4533: LD_INT 51
4535: PUSH
4536: LD_INT 6
4538: PUSH
4539: LD_INT 4
4541: PUSH
4542: LD_INT 0
4544: PUSH
4545: LD_INT 0
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: LIST
4555: PUSH
4556: LD_INT 26
4558: PUSH
4559: LD_INT 39
4561: PUSH
4562: LD_INT 25
4564: PUSH
4565: LD_INT 0
4567: PUSH
4568: LD_INT 0
4570: PUSH
4571: LD_INT 0
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: PUSH
4582: LD_INT 26
4584: PUSH
4585: LD_INT 37
4587: PUSH
4588: LD_INT 21
4590: PUSH
4591: LD_INT 0
4593: PUSH
4594: LD_INT 0
4596: PUSH
4597: LD_INT 0
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: PUSH
4608: LD_INT 32
4610: PUSH
4611: LD_INT 35
4613: PUSH
4614: LD_INT 17
4616: PUSH
4617: LD_INT 4
4619: PUSH
4620: LD_INT 0
4622: PUSH
4623: LD_INT 0
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: PUSH
4634: LD_INT 33
4636: PUSH
4637: LD_INT 35
4639: PUSH
4640: LD_INT 28
4642: PUSH
4643: LD_INT 4
4645: PUSH
4646: LD_INT 0
4648: PUSH
4649: LD_INT 0
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: LIST
4658: LIST
4659: PUSH
4660: LD_INT 33
4662: PUSH
4663: LD_INT 28
4665: PUSH
4666: LD_INT 46
4668: PUSH
4669: LD_INT 5
4671: PUSH
4672: LD_INT 0
4674: PUSH
4675: LD_INT 0
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: PUSH
4686: LD_INT 33
4688: PUSH
4689: LD_INT 31
4691: PUSH
4692: LD_INT 6
4694: PUSH
4695: LD_INT 4
4697: PUSH
4698: LD_INT 0
4700: PUSH
4701: LD_INT 0
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: PUSH
4712: LD_INT 26
4714: PUSH
4715: LD_INT 54
4717: PUSH
4718: LD_INT 38
4720: PUSH
4721: LD_INT 4
4723: PUSH
4724: LD_INT 0
4726: PUSH
4727: LD_INT 0
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: PUSH
4738: LD_INT 33
4740: PUSH
4741: LD_INT 207
4743: PUSH
4744: LD_INT 167
4746: PUSH
4747: LD_INT 3
4749: PUSH
4750: LD_INT 0
4752: PUSH
4753: LD_INT 0
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: PUSH
4764: LD_INT 30
4766: PUSH
4767: LD_INT 43
4769: PUSH
4770: LD_INT 2
4772: PUSH
4773: LD_INT 4
4775: PUSH
4776: LD_INT 0
4778: PUSH
4779: LD_INT 0
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: ST_TO_ADDR
// for i in tmp do
4877: LD_ADDR_VAR 0 2
4881: PUSH
4882: LD_VAR 0 4
4886: PUSH
4887: FOR_IN
4888: IFFALSE 5119
// begin uc_side := side ;
4890: LD_ADDR_OWVAR 20
4894: PUSH
4895: LD_VAR 0 5
4899: ST_TO_ADDR
// uc_nation := nation_russian ;
4900: LD_ADDR_OWVAR 21
4904: PUSH
4905: LD_INT 3
4907: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4908: LD_ADDR_OWVAR 42
4912: PUSH
4913: LD_VAR 0 2
4917: PUSH
4918: LD_INT 1
4920: ARRAY
4921: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
4922: LD_ADDR_OWVAR 43
4926: PUSH
4927: LD_INT 5
4929: PPUSH
4930: LD_INT 6
4932: PPUSH
4933: CALL_OW 12
4937: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
4938: LD_ADDR_OWVAR 44
4942: PUSH
4943: LD_VAR 0 2
4947: PUSH
4948: LD_INT 5
4950: ARRAY
4951: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
4952: LD_ADDR_OWVAR 45
4956: PUSH
4957: LD_VAR 0 2
4961: PUSH
4962: LD_INT 6
4964: ARRAY
4965: ST_TO_ADDR
// sr := 0 ;
4966: LD_ADDR_VAR 0 6
4970: PUSH
4971: LD_INT 0
4973: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
4974: LD_VAR 0 2
4978: PUSH
4979: LD_INT 1
4981: ARRAY
4982: PUSH
4983: LD_INT 29
4985: EQUAL
4986: IFFALSE 4998
// sr := mat_oil else
4988: LD_ADDR_VAR 0 6
4992: PUSH
4993: LD_INT 2
4995: ST_TO_ADDR
4996: GO 5020
// if i [ 1 ] = b_siberite_mine then
4998: LD_VAR 0 2
5002: PUSH
5003: LD_INT 1
5005: ARRAY
5006: PUSH
5007: LD_INT 30
5009: EQUAL
5010: IFFALSE 5020
// sr := mat_siberit ;
5012: LD_ADDR_VAR 0 6
5016: PUSH
5017: LD_INT 3
5019: ST_TO_ADDR
// if sr then
5020: LD_VAR 0 6
5024: IFFALSE 5080
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
5026: LD_VAR 0 2
5030: PUSH
5031: LD_INT 2
5033: ARRAY
5034: PPUSH
5035: LD_VAR 0 2
5039: PUSH
5040: LD_INT 3
5042: ARRAY
5043: PPUSH
5044: LD_VAR 0 6
5048: PPUSH
5049: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
5053: LD_VAR 0 2
5057: PUSH
5058: LD_INT 2
5060: ARRAY
5061: PPUSH
5062: LD_VAR 0 2
5066: PUSH
5067: LD_INT 3
5069: ARRAY
5070: PPUSH
5071: LD_VAR 0 5
5075: PPUSH
5076: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
5080: LD_ADDR_VAR 0 3
5084: PUSH
5085: LD_VAR 0 2
5089: PUSH
5090: LD_INT 2
5092: ARRAY
5093: PPUSH
5094: LD_VAR 0 2
5098: PUSH
5099: LD_INT 3
5101: ARRAY
5102: PPUSH
5103: LD_VAR 0 2
5107: PUSH
5108: LD_INT 4
5110: ARRAY
5111: PPUSH
5112: CALL_OW 47
5116: ST_TO_ADDR
// end ;
5117: GO 4887
5119: POP
5120: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
5121: LD_ADDR_VAR 0 7
5125: PUSH
5126: LD_INT 22
5128: PUSH
5129: LD_VAR 0 5
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: PUSH
5138: LD_INT 30
5140: PUSH
5141: LD_INT 1
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: PPUSH
5152: CALL_OW 69
5156: ST_TO_ADDR
// if not depot then
5157: LD_VAR 0 7
5161: NOT
5162: IFFALSE 5166
// exit ;
5164: GO 5510
// base := PrepareBase ( HexInfo ( 84 , 128 ) , rus1Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5166: LD_ADDR_VAR 0 8
5170: PUSH
5171: LD_INT 84
5173: PPUSH
5174: LD_INT 128
5176: PPUSH
5177: CALL_OW 428
5181: PPUSH
5182: LD_INT 15
5184: PPUSH
5185: LD_INT 0
5187: PPUSH
5188: LD_INT 6
5190: PUSH
5191: LD_INT 7
5193: PUSH
5194: LD_INT 8
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: LIST
5201: PUSH
5202: LD_OWVAR 67
5206: ARRAY
5207: PPUSH
5208: LD_INT 3000
5210: PUSH
5211: LD_INT 300
5213: PUSH
5214: LD_INT 100
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: LIST
5221: PPUSH
5222: LD_INT 12
5224: PUSH
5225: LD_INT 6
5227: PUSH
5228: LD_INT 6
5230: PUSH
5231: LD_INT 4
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: PPUSH
5240: CALL 27588 0 6
5244: ST_TO_ADDR
// if not base then
5245: LD_VAR 0 8
5249: NOT
5250: IFFALSE 5254
// exit ;
5252: GO 5510
// mc_bases := Replace ( mc_bases , mc_rus_1 , base ) ;
5254: LD_ADDR_EXP 45
5258: PUSH
5259: LD_EXP 45
5263: PPUSH
5264: LD_EXP 7
5268: PPUSH
5269: LD_VAR 0 8
5273: PPUSH
5274: CALL_OW 1
5278: ST_TO_ADDR
// base := PrepareBase ( HexInfo ( 34 , 23 ) , rus2Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 20000 , 3000 , 1000 ] , [ 12 , 6 , 6 , 4 ] ) ;
5279: LD_ADDR_VAR 0 8
5283: PUSH
5284: LD_INT 34
5286: PPUSH
5287: LD_INT 23
5289: PPUSH
5290: CALL_OW 428
5294: PPUSH
5295: LD_INT 11
5297: PPUSH
5298: LD_INT 0
5300: PPUSH
5301: LD_INT 6
5303: PUSH
5304: LD_INT 7
5306: PUSH
5307: LD_INT 8
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: PUSH
5315: LD_OWVAR 67
5319: ARRAY
5320: PPUSH
5321: LD_INT 20000
5323: PUSH
5324: LD_INT 3000
5326: PUSH
5327: LD_INT 1000
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: LIST
5334: PPUSH
5335: LD_INT 12
5337: PUSH
5338: LD_INT 6
5340: PUSH
5341: LD_INT 6
5343: PUSH
5344: LD_INT 4
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: LIST
5351: LIST
5352: PPUSH
5353: CALL 27588 0 6
5357: ST_TO_ADDR
// if not base then
5358: LD_VAR 0 8
5362: NOT
5363: IFFALSE 5367
// exit ;
5365: GO 5510
// mc_bases := Replace ( mc_bases , mc_rus_2 , base ) ;
5367: LD_ADDR_EXP 45
5371: PUSH
5372: LD_EXP 45
5376: PPUSH
5377: LD_EXP 8
5381: PPUSH
5382: LD_VAR 0 8
5386: PPUSH
5387: CALL_OW 1
5391: ST_TO_ADDR
// ruOutpost := PrepareBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] , ruOutpostArea , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 500 , 100 , 10 ] , [ [ 6 , 7 , 8 ] [ Difficulty ] , 2 , 0 , 1 ] ) ;
5392: LD_ADDR_EXP 14
5396: PUSH
5397: LD_INT 22
5399: PUSH
5400: LD_INT 3
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: PUSH
5407: LD_INT 30
5409: PUSH
5410: LD_INT 0
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: PPUSH
5421: CALL_OW 69
5425: PUSH
5426: LD_INT 1
5428: ARRAY
5429: PPUSH
5430: LD_INT 25
5432: PPUSH
5433: LD_INT 0
5435: PPUSH
5436: LD_INT 6
5438: PUSH
5439: LD_INT 7
5441: PUSH
5442: LD_INT 8
5444: PUSH
5445: EMPTY
5446: LIST
5447: LIST
5448: LIST
5449: PUSH
5450: LD_OWVAR 67
5454: ARRAY
5455: PPUSH
5456: LD_INT 500
5458: PUSH
5459: LD_INT 100
5461: PUSH
5462: LD_INT 10
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: LIST
5469: PPUSH
5470: LD_INT 6
5472: PUSH
5473: LD_INT 7
5475: PUSH
5476: LD_INT 8
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: LIST
5483: PUSH
5484: LD_OWVAR 67
5488: ARRAY
5489: PUSH
5490: LD_INT 2
5492: PUSH
5493: LD_INT 0
5495: PUSH
5496: LD_INT 1
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: LIST
5503: LIST
5504: PPUSH
5505: CALL 27588 0 6
5509: ST_TO_ADDR
// end ;
5510: LD_VAR 0 1
5514: RET
// export function PrepareLegion ; var i , b , veh , tmp , tmp2 , cameras , side , sr , depot , base ; begin
5515: LD_INT 0
5517: PPUSH
5518: PPUSH
5519: PPUSH
5520: PPUSH
5521: PPUSH
5522: PPUSH
5523: PPUSH
5524: PPUSH
5525: PPUSH
5526: PPUSH
5527: PPUSH
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 0 , 0 , legApe , 0 ) ;
5528: LD_INT 0
5530: PPUSH
5531: LD_INT 0
5533: PPUSH
5534: LD_INT 6
5536: PPUSH
5537: LD_INT 0
5539: PPUSH
5540: LD_INT 0
5542: PPUSH
5543: LD_INT 0
5545: PPUSH
5546: LD_INT 0
5548: PPUSH
5549: LD_INT 8
5551: PPUSH
5552: LD_INT 0
5554: PPUSH
5555: CALL 51970 0 9
// side := 8 ;
5559: LD_ADDR_VAR 0 8
5563: PUSH
5564: LD_INT 8
5566: ST_TO_ADDR
// tmp := AreaToList ( minesArea , 0 ) ;
5567: LD_ADDR_VAR 0 5
5571: PUSH
5572: LD_INT 20
5574: PPUSH
5575: LD_INT 0
5577: PPUSH
5578: CALL_OW 517
5582: ST_TO_ADDR
// if Difficulty > 2 then
5583: LD_OWVAR 67
5587: PUSH
5588: LD_INT 2
5590: GREATER
5591: IFFALSE 5735
// begin tmp2 := AreaToList ( minesArea2 , 0 ) ;
5593: LD_ADDR_VAR 0 6
5597: PUSH
5598: LD_INT 27
5600: PPUSH
5601: LD_INT 0
5603: PPUSH
5604: CALL_OW 517
5608: ST_TO_ADDR
// for i = 1 to tmp2 [ 1 ] do
5609: LD_ADDR_VAR 0 2
5613: PUSH
5614: DOUBLE
5615: LD_INT 1
5617: DEC
5618: ST_TO_ADDR
5619: LD_VAR 0 6
5623: PUSH
5624: LD_INT 1
5626: ARRAY
5627: PUSH
5628: FOR_TO
5629: IFFALSE 5733
// begin tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , tmp2 [ 1 ] [ i ] ) ;
5631: LD_ADDR_VAR 0 5
5635: PUSH
5636: LD_VAR 0 5
5640: PPUSH
5641: LD_INT 1
5643: PUSH
5644: LD_VAR 0 5
5648: PUSH
5649: LD_INT 1
5651: ARRAY
5652: PUSH
5653: LD_INT 1
5655: PLUS
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PPUSH
5661: LD_VAR 0 6
5665: PUSH
5666: LD_INT 1
5668: ARRAY
5669: PUSH
5670: LD_VAR 0 2
5674: ARRAY
5675: PPUSH
5676: CALL 24301 0 3
5680: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , tmp2 [ 2 ] [ i ] ) ;
5681: LD_ADDR_VAR 0 5
5685: PUSH
5686: LD_VAR 0 5
5690: PPUSH
5691: LD_INT 2
5693: PUSH
5694: LD_VAR 0 5
5698: PUSH
5699: LD_INT 2
5701: ARRAY
5702: PUSH
5703: LD_INT 1
5705: PLUS
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: PPUSH
5711: LD_VAR 0 6
5715: PUSH
5716: LD_INT 2
5718: ARRAY
5719: PUSH
5720: LD_VAR 0 2
5724: ARRAY
5725: PPUSH
5726: CALL 24301 0 3
5730: ST_TO_ADDR
// end ;
5731: GO 5628
5733: POP
5734: POP
// end ; if tmp then
5735: LD_VAR 0 5
5739: IFFALSE 5867
// begin for i = 1 to tmp [ 1 ] do
5741: LD_ADDR_VAR 0 2
5745: PUSH
5746: DOUBLE
5747: LD_INT 1
5749: DEC
5750: ST_TO_ADDR
5751: LD_VAR 0 5
5755: PUSH
5756: LD_INT 1
5758: ARRAY
5759: PUSH
5760: FOR_TO
5761: IFFALSE 5865
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side , 0 ) ;
5763: LD_VAR 0 5
5767: PUSH
5768: LD_INT 1
5770: ARRAY
5771: PUSH
5772: LD_VAR 0 2
5776: ARRAY
5777: PPUSH
5778: LD_VAR 0 5
5782: PUSH
5783: LD_INT 2
5785: ARRAY
5786: PUSH
5787: LD_VAR 0 2
5791: ARRAY
5792: PPUSH
5793: LD_VAR 0 8
5797: PPUSH
5798: LD_INT 0
5800: PPUSH
5801: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
5805: LD_ADDR_EXP 16
5809: PUSH
5810: LD_EXP 16
5814: PPUSH
5815: LD_EXP 16
5819: PUSH
5820: LD_INT 1
5822: PLUS
5823: PPUSH
5824: LD_VAR 0 5
5828: PUSH
5829: LD_INT 1
5831: ARRAY
5832: PUSH
5833: LD_VAR 0 2
5837: ARRAY
5838: PUSH
5839: LD_VAR 0 5
5843: PUSH
5844: LD_INT 2
5846: ARRAY
5847: PUSH
5848: LD_VAR 0 2
5852: ARRAY
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: PPUSH
5858: CALL_OW 2
5862: ST_TO_ADDR
// end ;
5863: GO 5760
5865: POP
5866: POP
// end ; cameras := [ [ 165 , 156 ] , [ 143 , 145 ] , [ 152 , 165 ] , [ 123 , 153 ] , [ 161 , 215 ] , [ 172 , 100 ] , [ 148 , 83 ] , [ 122 , 68 ] , [ 105 , 74 ] , [ 113 , 97 ] ] ;
5867: LD_ADDR_VAR 0 7
5871: PUSH
5872: LD_INT 165
5874: PUSH
5875: LD_INT 156
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: PUSH
5882: LD_INT 143
5884: PUSH
5885: LD_INT 145
5887: PUSH
5888: EMPTY
5889: LIST
5890: LIST
5891: PUSH
5892: LD_INT 152
5894: PUSH
5895: LD_INT 165
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: PUSH
5902: LD_INT 123
5904: PUSH
5905: LD_INT 153
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: LD_INT 161
5914: PUSH
5915: LD_INT 215
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: PUSH
5922: LD_INT 172
5924: PUSH
5925: LD_INT 100
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: PUSH
5932: LD_INT 148
5934: PUSH
5935: LD_INT 83
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: PUSH
5942: LD_INT 122
5944: PUSH
5945: LD_INT 68
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: PUSH
5952: LD_INT 105
5954: PUSH
5955: LD_INT 74
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: PUSH
5962: LD_INT 113
5964: PUSH
5965: LD_INT 97
5967: PUSH
5968: EMPTY
5969: LIST
5970: LIST
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: ST_TO_ADDR
// for i in cameras do
5984: LD_ADDR_VAR 0 2
5988: PUSH
5989: LD_VAR 0 7
5993: PUSH
5994: FOR_IN
5995: IFFALSE 6026
// HiddenCamera ( i [ 1 ] , i [ 2 ] , side ) ;
5997: LD_VAR 0 2
6001: PUSH
6002: LD_INT 1
6004: ARRAY
6005: PPUSH
6006: LD_VAR 0 2
6010: PUSH
6011: LD_INT 2
6013: ARRAY
6014: PPUSH
6015: LD_VAR 0 8
6019: PPUSH
6020: CALL_OW 244
6024: GO 5994
6026: POP
6027: POP
// tmp := [ [ 1 , 144 , 110 , 1 , 0 , 0 ] , [ 3 , 151 , 118 , 0 , 0 , 0 ] , [ 8 , 158 , 110 , 4 , 10 , 15 ] , [ 23 , 154 , 121 , 5 , 0 , 0 ] , [ 22 , 155 , 118 , 4 , 0 , 0 ] , [ 21 , 151 , 122 , 0 , 0 , 0 ] , [ 18 , 148 , 118 , 1 , 0 , 0 ] , [ 17 , 147 , 114 , 2 , 0 , 0 ] , [ 29 , 163 , 120 , 5 , 0 , 0 ] , [ 27 , 137 , 116 , 3 , 0 , 0 ] , [ 27 , 133 , 111 , 1 , 0 , 0 ] , [ 27 , 132 , 106 , 4 , 0 , 0 ] , [ 26 , 137 , 111 , 0 , 0 , 0 ] , [ 8 , 141 , 117 , 1 , 13 , 11 ] , [ 30 , 140 , 128 , 1 , 0 , 0 ] , [ 5 , 146 , 96 , 3 , 0 , 0 ] , [ 32 , 150 , 98 , 3 , 0 , 0 ] , [ 32 , 142 , 95 , 3 , 0 , 0 ] , [ 32 , 159 , 104 , 3 , 0 , 0 ] , [ 32 , 133 , 95 , 3 , 0 , 0 ] , [ 32 , 131 , 102 , 2 , 0 , 0 ] , [ 32 , 164 , 144 , 0 , 0 , 0 ] , [ 32 , 146 , 139 , 0 , 0 , 0 ] , [ 26 , 143 , 122 , 4 , 0 , 0 ] , [ 26 , 164 , 116 , 2 , 0 , 0 ] , ] ;
6028: LD_ADDR_VAR 0 5
6032: PUSH
6033: LD_INT 1
6035: PUSH
6036: LD_INT 144
6038: PUSH
6039: LD_INT 110
6041: PUSH
6042: LD_INT 1
6044: PUSH
6045: LD_INT 0
6047: PUSH
6048: LD_INT 0
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: PUSH
6059: LD_INT 3
6061: PUSH
6062: LD_INT 151
6064: PUSH
6065: LD_INT 118
6067: PUSH
6068: LD_INT 0
6070: PUSH
6071: LD_INT 0
6073: PUSH
6074: LD_INT 0
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: PUSH
6085: LD_INT 8
6087: PUSH
6088: LD_INT 158
6090: PUSH
6091: LD_INT 110
6093: PUSH
6094: LD_INT 4
6096: PUSH
6097: LD_INT 10
6099: PUSH
6100: LD_INT 15
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: PUSH
6111: LD_INT 23
6113: PUSH
6114: LD_INT 154
6116: PUSH
6117: LD_INT 121
6119: PUSH
6120: LD_INT 5
6122: PUSH
6123: LD_INT 0
6125: PUSH
6126: LD_INT 0
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: PUSH
6137: LD_INT 22
6139: PUSH
6140: LD_INT 155
6142: PUSH
6143: LD_INT 118
6145: PUSH
6146: LD_INT 4
6148: PUSH
6149: LD_INT 0
6151: PUSH
6152: LD_INT 0
6154: PUSH
6155: EMPTY
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 21
6165: PUSH
6166: LD_INT 151
6168: PUSH
6169: LD_INT 122
6171: PUSH
6172: LD_INT 0
6174: PUSH
6175: LD_INT 0
6177: PUSH
6178: LD_INT 0
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: PUSH
6189: LD_INT 18
6191: PUSH
6192: LD_INT 148
6194: PUSH
6195: LD_INT 118
6197: PUSH
6198: LD_INT 1
6200: PUSH
6201: LD_INT 0
6203: PUSH
6204: LD_INT 0
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: PUSH
6215: LD_INT 17
6217: PUSH
6218: LD_INT 147
6220: PUSH
6221: LD_INT 114
6223: PUSH
6224: LD_INT 2
6226: PUSH
6227: LD_INT 0
6229: PUSH
6230: LD_INT 0
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: PUSH
6241: LD_INT 29
6243: PUSH
6244: LD_INT 163
6246: PUSH
6247: LD_INT 120
6249: PUSH
6250: LD_INT 5
6252: PUSH
6253: LD_INT 0
6255: PUSH
6256: LD_INT 0
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 27
6269: PUSH
6270: LD_INT 137
6272: PUSH
6273: LD_INT 116
6275: PUSH
6276: LD_INT 3
6278: PUSH
6279: LD_INT 0
6281: PUSH
6282: LD_INT 0
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: PUSH
6293: LD_INT 27
6295: PUSH
6296: LD_INT 133
6298: PUSH
6299: LD_INT 111
6301: PUSH
6302: LD_INT 1
6304: PUSH
6305: LD_INT 0
6307: PUSH
6308: LD_INT 0
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_INT 27
6321: PUSH
6322: LD_INT 132
6324: PUSH
6325: LD_INT 106
6327: PUSH
6328: LD_INT 4
6330: PUSH
6331: LD_INT 0
6333: PUSH
6334: LD_INT 0
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: PUSH
6345: LD_INT 26
6347: PUSH
6348: LD_INT 137
6350: PUSH
6351: LD_INT 111
6353: PUSH
6354: LD_INT 0
6356: PUSH
6357: LD_INT 0
6359: PUSH
6360: LD_INT 0
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: PUSH
6371: LD_INT 8
6373: PUSH
6374: LD_INT 141
6376: PUSH
6377: LD_INT 117
6379: PUSH
6380: LD_INT 1
6382: PUSH
6383: LD_INT 13
6385: PUSH
6386: LD_INT 11
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: PUSH
6397: LD_INT 30
6399: PUSH
6400: LD_INT 140
6402: PUSH
6403: LD_INT 128
6405: PUSH
6406: LD_INT 1
6408: PUSH
6409: LD_INT 0
6411: PUSH
6412: LD_INT 0
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 5
6425: PUSH
6426: LD_INT 146
6428: PUSH
6429: LD_INT 96
6431: PUSH
6432: LD_INT 3
6434: PUSH
6435: LD_INT 0
6437: PUSH
6438: LD_INT 0
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: PUSH
6449: LD_INT 32
6451: PUSH
6452: LD_INT 150
6454: PUSH
6455: LD_INT 98
6457: PUSH
6458: LD_INT 3
6460: PUSH
6461: LD_INT 0
6463: PUSH
6464: LD_INT 0
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: PUSH
6475: LD_INT 32
6477: PUSH
6478: LD_INT 142
6480: PUSH
6481: LD_INT 95
6483: PUSH
6484: LD_INT 3
6486: PUSH
6487: LD_INT 0
6489: PUSH
6490: LD_INT 0
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: PUSH
6501: LD_INT 32
6503: PUSH
6504: LD_INT 159
6506: PUSH
6507: LD_INT 104
6509: PUSH
6510: LD_INT 3
6512: PUSH
6513: LD_INT 0
6515: PUSH
6516: LD_INT 0
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: PUSH
6527: LD_INT 32
6529: PUSH
6530: LD_INT 133
6532: PUSH
6533: LD_INT 95
6535: PUSH
6536: LD_INT 3
6538: PUSH
6539: LD_INT 0
6541: PUSH
6542: LD_INT 0
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: PUSH
6553: LD_INT 32
6555: PUSH
6556: LD_INT 131
6558: PUSH
6559: LD_INT 102
6561: PUSH
6562: LD_INT 2
6564: PUSH
6565: LD_INT 0
6567: PUSH
6568: LD_INT 0
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: PUSH
6579: LD_INT 32
6581: PUSH
6582: LD_INT 164
6584: PUSH
6585: LD_INT 144
6587: PUSH
6588: LD_INT 0
6590: PUSH
6591: LD_INT 0
6593: PUSH
6594: LD_INT 0
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: PUSH
6605: LD_INT 32
6607: PUSH
6608: LD_INT 146
6610: PUSH
6611: LD_INT 139
6613: PUSH
6614: LD_INT 0
6616: PUSH
6617: LD_INT 0
6619: PUSH
6620: LD_INT 0
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: PUSH
6631: LD_INT 26
6633: PUSH
6634: LD_INT 143
6636: PUSH
6637: LD_INT 122
6639: PUSH
6640: LD_INT 4
6642: PUSH
6643: LD_INT 0
6645: PUSH
6646: LD_INT 0
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: PUSH
6657: LD_INT 26
6659: PUSH
6660: LD_INT 164
6662: PUSH
6663: LD_INT 116
6665: PUSH
6666: LD_INT 2
6668: PUSH
6669: LD_INT 0
6671: PUSH
6672: LD_INT 0
6674: PUSH
6675: EMPTY
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: ST_TO_ADDR
// for i in tmp do
6710: LD_ADDR_VAR 0 2
6714: PUSH
6715: LD_VAR 0 5
6719: PUSH
6720: FOR_IN
6721: IFFALSE 6952
// begin uc_side := side ;
6723: LD_ADDR_OWVAR 20
6727: PUSH
6728: LD_VAR 0 8
6732: ST_TO_ADDR
// uc_nation := nation_arabian ;
6733: LD_ADDR_OWVAR 21
6737: PUSH
6738: LD_INT 2
6740: ST_TO_ADDR
// bc_type := i [ 1 ] ;
6741: LD_ADDR_OWVAR 42
6745: PUSH
6746: LD_VAR 0 2
6750: PUSH
6751: LD_INT 1
6753: ARRAY
6754: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
6755: LD_ADDR_OWVAR 43
6759: PUSH
6760: LD_INT 5
6762: PPUSH
6763: LD_INT 6
6765: PPUSH
6766: CALL_OW 12
6770: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
6771: LD_ADDR_OWVAR 44
6775: PUSH
6776: LD_VAR 0 2
6780: PUSH
6781: LD_INT 5
6783: ARRAY
6784: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
6785: LD_ADDR_OWVAR 45
6789: PUSH
6790: LD_VAR 0 2
6794: PUSH
6795: LD_INT 6
6797: ARRAY
6798: ST_TO_ADDR
// sr := 0 ;
6799: LD_ADDR_VAR 0 9
6803: PUSH
6804: LD_INT 0
6806: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
6807: LD_VAR 0 2
6811: PUSH
6812: LD_INT 1
6814: ARRAY
6815: PUSH
6816: LD_INT 29
6818: EQUAL
6819: IFFALSE 6831
// sr := mat_oil else
6821: LD_ADDR_VAR 0 9
6825: PUSH
6826: LD_INT 2
6828: ST_TO_ADDR
6829: GO 6853
// if i [ 1 ] = b_siberite_mine then
6831: LD_VAR 0 2
6835: PUSH
6836: LD_INT 1
6838: ARRAY
6839: PUSH
6840: LD_INT 30
6842: EQUAL
6843: IFFALSE 6853
// sr := mat_siberit ;
6845: LD_ADDR_VAR 0 9
6849: PUSH
6850: LD_INT 3
6852: ST_TO_ADDR
// if sr then
6853: LD_VAR 0 9
6857: IFFALSE 6913
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
6859: LD_VAR 0 2
6863: PUSH
6864: LD_INT 2
6866: ARRAY
6867: PPUSH
6868: LD_VAR 0 2
6872: PUSH
6873: LD_INT 3
6875: ARRAY
6876: PPUSH
6877: LD_VAR 0 9
6881: PPUSH
6882: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
6886: LD_VAR 0 2
6890: PUSH
6891: LD_INT 2
6893: ARRAY
6894: PPUSH
6895: LD_VAR 0 2
6899: PUSH
6900: LD_INT 3
6902: ARRAY
6903: PPUSH
6904: LD_VAR 0 8
6908: PPUSH
6909: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
6913: LD_ADDR_VAR 0 3
6917: PUSH
6918: LD_VAR 0 2
6922: PUSH
6923: LD_INT 2
6925: ARRAY
6926: PPUSH
6927: LD_VAR 0 2
6931: PUSH
6932: LD_INT 3
6934: ARRAY
6935: PPUSH
6936: LD_VAR 0 2
6940: PUSH
6941: LD_INT 4
6943: ARRAY
6944: PPUSH
6945: CALL_OW 47
6949: ST_TO_ADDR
// end ;
6950: GO 6720
6952: POP
6953: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6954: LD_ADDR_VAR 0 10
6958: PUSH
6959: LD_INT 22
6961: PUSH
6962: LD_VAR 0 8
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: PUSH
6971: LD_INT 30
6973: PUSH
6974: LD_INT 1
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: PPUSH
6985: CALL_OW 69
6989: ST_TO_ADDR
// if not depot then
6990: LD_VAR 0 10
6994: NOT
6995: IFFALSE 6999
// exit ;
6997: GO 7245
// base := PrepareBase ( depot [ 1 ] , legBase , 0 , [ 7 , 8 , 10 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 14 , 6 , 6 , 5 ] ) ;
6999: LD_ADDR_VAR 0 11
7003: PUSH
7004: LD_VAR 0 10
7008: PUSH
7009: LD_INT 1
7011: ARRAY
7012: PPUSH
7013: LD_INT 6
7015: PPUSH
7016: LD_INT 0
7018: PPUSH
7019: LD_INT 7
7021: PUSH
7022: LD_INT 8
7024: PUSH
7025: LD_INT 10
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: LIST
7032: PUSH
7033: LD_OWVAR 67
7037: ARRAY
7038: PPUSH
7039: LD_INT 3000
7041: PUSH
7042: LD_INT 300
7044: PUSH
7045: LD_INT 100
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: LIST
7052: PPUSH
7053: LD_INT 14
7055: PUSH
7056: LD_INT 6
7058: PUSH
7059: LD_INT 6
7061: PUSH
7062: LD_INT 5
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: PPUSH
7071: CALL 27588 0 6
7075: ST_TO_ADDR
// if not base then
7076: LD_VAR 0 11
7080: NOT
7081: IFFALSE 7085
// exit ;
7083: GO 7245
// if Difficulty > 1 then
7085: LD_OWVAR 67
7089: PUSH
7090: LD_INT 1
7092: GREATER
7093: IFFALSE 7166
// begin InitHc ;
7095: CALL_OW 19
// PrepareHuman ( sex_male , class_sniper , [ 5 , 8 ] [ Difficulty - 1 ] ) ;
7099: LD_INT 1
7101: PPUSH
7102: LD_INT 5
7104: PPUSH
7105: LD_INT 5
7107: PUSH
7108: LD_INT 8
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: LD_OWVAR 67
7119: PUSH
7120: LD_INT 1
7122: MINUS
7123: ARRAY
7124: PPUSH
7125: CALL_OW 380
// for i = 1 to Difficulty do
7129: LD_ADDR_VAR 0 2
7133: PUSH
7134: DOUBLE
7135: LD_INT 1
7137: DEC
7138: ST_TO_ADDR
7139: LD_OWVAR 67
7143: PUSH
7144: FOR_TO
7145: IFFALSE 7164
// PlaceUnitArea ( CreateHuman , sniperGuardArea , false ) ;
7147: CALL_OW 44
7151: PPUSH
7152: LD_INT 24
7154: PPUSH
7155: LD_INT 0
7157: PPUSH
7158: CALL_OW 49
7162: GO 7144
7164: POP
7165: POP
// end ; mc_bases := Replace ( mc_bases , mc_leg , base ) ;
7166: LD_ADDR_EXP 45
7170: PUSH
7171: LD_EXP 45
7175: PPUSH
7176: LD_EXP 6
7180: PPUSH
7181: LD_VAR 0 11
7185: PPUSH
7186: CALL_OW 1
7190: ST_TO_ADDR
// hc_gallery := ru ;
7191: LD_ADDR_OWVAR 33
7195: PUSH
7196: LD_STRING ru
7198: ST_TO_ADDR
// hc_face_number := 44 ;
7199: LD_ADDR_OWVAR 34
7203: PUSH
7204: LD_INT 44
7206: ST_TO_ADDR
// hc_name := Robert Farmer ;
7207: LD_ADDR_OWVAR 26
7211: PUSH
7212: LD_STRING Robert Farmer
7214: ST_TO_ADDR
// hc_sex := sex_male ;
7215: LD_ADDR_OWVAR 27
7219: PUSH
7220: LD_INT 1
7222: ST_TO_ADDR
// hc_class := 1 ;
7223: LD_ADDR_OWVAR 28
7227: PUSH
7228: LD_INT 1
7230: ST_TO_ADDR
// Farmer := CreateHuman ;
7231: LD_ADDR_EXP 13
7235: PUSH
7236: CALL_OW 44
7240: ST_TO_ADDR
// InitHc ;
7241: CALL_OW 19
// end ;
7245: LD_VAR 0 1
7249: RET
// export function PrepareAmericans ; var i , b , tmp , side , sr , base , depot ; begin
7250: LD_INT 0
7252: PPUSH
7253: PPUSH
7254: PPUSH
7255: PPUSH
7256: PPUSH
7257: PPUSH
7258: PPUSH
7259: PPUSH
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , amerApe , 0 ) ;
7260: LD_INT 0
7262: PPUSH
7263: LD_INT 0
7265: PPUSH
7266: LD_INT 4
7268: PPUSH
7269: LD_INT 0
7271: PPUSH
7272: LD_INT 0
7274: PPUSH
7275: LD_INT 0
7277: PPUSH
7278: LD_INT 0
7280: PPUSH
7281: LD_INT 10
7283: PPUSH
7284: LD_INT 0
7286: PPUSH
7287: CALL 51970 0 9
// side := 4 ;
7291: LD_ADDR_VAR 0 5
7295: PUSH
7296: LD_INT 4
7298: ST_TO_ADDR
// tmp := [ [ 1 , 144 , 18 , 4 , 0 , 0 ] , [ 3 , 137 , 8 , 4 , 0 , 0 ] , [ 22 , 141 , 8 , 4 , 0 , 0 ] , [ 25 , 137 , 5 , 3 , 0 , 0 ] , [ 18 , 137 , 12 , 0 , 0 , 0 ] , [ 17 , 133 , 4 , 2 , 0 , 0 ] , [ 16 , 140 , 11 , 5 , 0 , 0 ] , [ 8 , 149 , 26 , 4 , 10 , 15 ] , [ 8 , 142 , 26 , 1 , 11 , 12 ] , [ 27 , 153 , 32 , 5 , 0 , 0 ] , [ 27 , 145 , 32 , 3 , 0 , 0 ] , [ 27 , 138 , 2 , 4 , 0 , 0 ] , [ 27 , 144 , 13 , 0 , 0 , 0 ] , [ 26 , 124 , 2 , 4 , 0 , 0 ] , [ 26 , 121 , 2 , 2 , 0 , 0 ] , [ 26 , 118 , 2 , 1 , 0 , 0 ] , [ 29 , 159 , 47 , 2 , 0 , 0 ] , [ 32 , 146 , 41 , 0 , 0 , 0 ] , [ 33 , 136 , 37 , 0 , 0 , 0 ] , [ 33 , 132 , 34 , 0 , 0 , 0 ] , [ 36 , 124 , 7 , 1 , 0 , 0 ] , [ 5 , 124 , 19 , 0 , 0 , 0 ] , [ 32 , 127 , 23 , 0 , 0 , 0 ] ] ;
7299: LD_ADDR_VAR 0 4
7303: PUSH
7304: LD_INT 1
7306: PUSH
7307: LD_INT 144
7309: PUSH
7310: LD_INT 18
7312: PUSH
7313: LD_INT 4
7315: PUSH
7316: LD_INT 0
7318: PUSH
7319: LD_INT 0
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: PUSH
7330: LD_INT 3
7332: PUSH
7333: LD_INT 137
7335: PUSH
7336: LD_INT 8
7338: PUSH
7339: LD_INT 4
7341: PUSH
7342: LD_INT 0
7344: PUSH
7345: LD_INT 0
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: PUSH
7356: LD_INT 22
7358: PUSH
7359: LD_INT 141
7361: PUSH
7362: LD_INT 8
7364: PUSH
7365: LD_INT 4
7367: PUSH
7368: LD_INT 0
7370: PUSH
7371: LD_INT 0
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: PUSH
7382: LD_INT 25
7384: PUSH
7385: LD_INT 137
7387: PUSH
7388: LD_INT 5
7390: PUSH
7391: LD_INT 3
7393: PUSH
7394: LD_INT 0
7396: PUSH
7397: LD_INT 0
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: PUSH
7408: LD_INT 18
7410: PUSH
7411: LD_INT 137
7413: PUSH
7414: LD_INT 12
7416: PUSH
7417: LD_INT 0
7419: PUSH
7420: LD_INT 0
7422: PUSH
7423: LD_INT 0
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: PUSH
7434: LD_INT 17
7436: PUSH
7437: LD_INT 133
7439: PUSH
7440: LD_INT 4
7442: PUSH
7443: LD_INT 2
7445: PUSH
7446: LD_INT 0
7448: PUSH
7449: LD_INT 0
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: PUSH
7460: LD_INT 16
7462: PUSH
7463: LD_INT 140
7465: PUSH
7466: LD_INT 11
7468: PUSH
7469: LD_INT 5
7471: PUSH
7472: LD_INT 0
7474: PUSH
7475: LD_INT 0
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: PUSH
7486: LD_INT 8
7488: PUSH
7489: LD_INT 149
7491: PUSH
7492: LD_INT 26
7494: PUSH
7495: LD_INT 4
7497: PUSH
7498: LD_INT 10
7500: PUSH
7501: LD_INT 15
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: PUSH
7512: LD_INT 8
7514: PUSH
7515: LD_INT 142
7517: PUSH
7518: LD_INT 26
7520: PUSH
7521: LD_INT 1
7523: PUSH
7524: LD_INT 11
7526: PUSH
7527: LD_INT 12
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: PUSH
7538: LD_INT 27
7540: PUSH
7541: LD_INT 153
7543: PUSH
7544: LD_INT 32
7546: PUSH
7547: LD_INT 5
7549: PUSH
7550: LD_INT 0
7552: PUSH
7553: LD_INT 0
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 27
7566: PUSH
7567: LD_INT 145
7569: PUSH
7570: LD_INT 32
7572: PUSH
7573: LD_INT 3
7575: PUSH
7576: LD_INT 0
7578: PUSH
7579: LD_INT 0
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 27
7592: PUSH
7593: LD_INT 138
7595: PUSH
7596: LD_INT 2
7598: PUSH
7599: LD_INT 4
7601: PUSH
7602: LD_INT 0
7604: PUSH
7605: LD_INT 0
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: PUSH
7616: LD_INT 27
7618: PUSH
7619: LD_INT 144
7621: PUSH
7622: LD_INT 13
7624: PUSH
7625: LD_INT 0
7627: PUSH
7628: LD_INT 0
7630: PUSH
7631: LD_INT 0
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: PUSH
7642: LD_INT 26
7644: PUSH
7645: LD_INT 124
7647: PUSH
7648: LD_INT 2
7650: PUSH
7651: LD_INT 4
7653: PUSH
7654: LD_INT 0
7656: PUSH
7657: LD_INT 0
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: PUSH
7668: LD_INT 26
7670: PUSH
7671: LD_INT 121
7673: PUSH
7674: LD_INT 2
7676: PUSH
7677: LD_INT 2
7679: PUSH
7680: LD_INT 0
7682: PUSH
7683: LD_INT 0
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: PUSH
7694: LD_INT 26
7696: PUSH
7697: LD_INT 118
7699: PUSH
7700: LD_INT 2
7702: PUSH
7703: LD_INT 1
7705: PUSH
7706: LD_INT 0
7708: PUSH
7709: LD_INT 0
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: PUSH
7720: LD_INT 29
7722: PUSH
7723: LD_INT 159
7725: PUSH
7726: LD_INT 47
7728: PUSH
7729: LD_INT 2
7731: PUSH
7732: LD_INT 0
7734: PUSH
7735: LD_INT 0
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: PUSH
7746: LD_INT 32
7748: PUSH
7749: LD_INT 146
7751: PUSH
7752: LD_INT 41
7754: PUSH
7755: LD_INT 0
7757: PUSH
7758: LD_INT 0
7760: PUSH
7761: LD_INT 0
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: PUSH
7772: LD_INT 33
7774: PUSH
7775: LD_INT 136
7777: PUSH
7778: LD_INT 37
7780: PUSH
7781: LD_INT 0
7783: PUSH
7784: LD_INT 0
7786: PUSH
7787: LD_INT 0
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: PUSH
7798: LD_INT 33
7800: PUSH
7801: LD_INT 132
7803: PUSH
7804: LD_INT 34
7806: PUSH
7807: LD_INT 0
7809: PUSH
7810: LD_INT 0
7812: PUSH
7813: LD_INT 0
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: PUSH
7824: LD_INT 36
7826: PUSH
7827: LD_INT 124
7829: PUSH
7830: LD_INT 7
7832: PUSH
7833: LD_INT 1
7835: PUSH
7836: LD_INT 0
7838: PUSH
7839: LD_INT 0
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: PUSH
7850: LD_INT 5
7852: PUSH
7853: LD_INT 124
7855: PUSH
7856: LD_INT 19
7858: PUSH
7859: LD_INT 0
7861: PUSH
7862: LD_INT 0
7864: PUSH
7865: LD_INT 0
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: PUSH
7876: LD_INT 32
7878: PUSH
7879: LD_INT 127
7881: PUSH
7882: LD_INT 23
7884: PUSH
7885: LD_INT 0
7887: PUSH
7888: LD_INT 0
7890: PUSH
7891: LD_INT 0
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: ST_TO_ADDR
// for i in tmp do
7927: LD_ADDR_VAR 0 2
7931: PUSH
7932: LD_VAR 0 4
7936: PUSH
7937: FOR_IN
7938: IFFALSE 8169
// begin uc_side := side ;
7940: LD_ADDR_OWVAR 20
7944: PUSH
7945: LD_VAR 0 5
7949: ST_TO_ADDR
// uc_nation := nation_american ;
7950: LD_ADDR_OWVAR 21
7954: PUSH
7955: LD_INT 1
7957: ST_TO_ADDR
// bc_type := i [ 1 ] ;
7958: LD_ADDR_OWVAR 42
7962: PUSH
7963: LD_VAR 0 2
7967: PUSH
7968: LD_INT 1
7970: ARRAY
7971: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
7972: LD_ADDR_OWVAR 43
7976: PUSH
7977: LD_INT 5
7979: PPUSH
7980: LD_INT 6
7982: PPUSH
7983: CALL_OW 12
7987: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
7988: LD_ADDR_OWVAR 44
7992: PUSH
7993: LD_VAR 0 2
7997: PUSH
7998: LD_INT 5
8000: ARRAY
8001: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
8002: LD_ADDR_OWVAR 45
8006: PUSH
8007: LD_VAR 0 2
8011: PUSH
8012: LD_INT 6
8014: ARRAY
8015: ST_TO_ADDR
// sr := 0 ;
8016: LD_ADDR_VAR 0 6
8020: PUSH
8021: LD_INT 0
8023: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
8024: LD_VAR 0 2
8028: PUSH
8029: LD_INT 1
8031: ARRAY
8032: PUSH
8033: LD_INT 29
8035: EQUAL
8036: IFFALSE 8048
// sr := mat_oil else
8038: LD_ADDR_VAR 0 6
8042: PUSH
8043: LD_INT 2
8045: ST_TO_ADDR
8046: GO 8070
// if i [ 1 ] = b_siberite_mine then
8048: LD_VAR 0 2
8052: PUSH
8053: LD_INT 1
8055: ARRAY
8056: PUSH
8057: LD_INT 30
8059: EQUAL
8060: IFFALSE 8070
// sr := mat_siberit ;
8062: LD_ADDR_VAR 0 6
8066: PUSH
8067: LD_INT 3
8069: ST_TO_ADDR
// if sr then
8070: LD_VAR 0 6
8074: IFFALSE 8130
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
8076: LD_VAR 0 2
8080: PUSH
8081: LD_INT 2
8083: ARRAY
8084: PPUSH
8085: LD_VAR 0 2
8089: PUSH
8090: LD_INT 3
8092: ARRAY
8093: PPUSH
8094: LD_VAR 0 6
8098: PPUSH
8099: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
8103: LD_VAR 0 2
8107: PUSH
8108: LD_INT 2
8110: ARRAY
8111: PPUSH
8112: LD_VAR 0 2
8116: PUSH
8117: LD_INT 3
8119: ARRAY
8120: PPUSH
8121: LD_VAR 0 5
8125: PPUSH
8126: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
8130: LD_ADDR_VAR 0 3
8134: PUSH
8135: LD_VAR 0 2
8139: PUSH
8140: LD_INT 2
8142: ARRAY
8143: PPUSH
8144: LD_VAR 0 2
8148: PUSH
8149: LD_INT 3
8151: ARRAY
8152: PPUSH
8153: LD_VAR 0 2
8157: PUSH
8158: LD_INT 4
8160: ARRAY
8161: PPUSH
8162: CALL_OW 47
8166: ST_TO_ADDR
// end ;
8167: GO 7937
8169: POP
8170: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
8171: LD_ADDR_VAR 0 8
8175: PUSH
8176: LD_INT 22
8178: PUSH
8179: LD_VAR 0 5
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: PUSH
8188: LD_INT 30
8190: PUSH
8191: LD_INT 1
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: PPUSH
8202: CALL_OW 69
8206: ST_TO_ADDR
// if not depot then
8207: LD_VAR 0 8
8211: NOT
8212: IFFALSE 8216
// exit ;
8214: GO 8488
// base := PrepareBase ( depot [ 1 ] , amerBase , theta3 , [ 8 , 7 , 6 ] [ Difficulty ] , [ [ 2500 , 2000 , 1750 ] [ Difficulty ] , [ 300 , 250 , 200 ] [ Difficulty ] , [ 80 , 60 , 50 ] [ Difficulty ] ] , [ 7 , 6 , 5 , 5 ] ) ;
8216: LD_ADDR_VAR 0 7
8220: PUSH
8221: LD_VAR 0 8
8225: PUSH
8226: LD_INT 1
8228: ARRAY
8229: PPUSH
8230: LD_INT 3
8232: PPUSH
8233: LD_STRING theta3
8235: PPUSH
8236: LD_INT 8
8238: PUSH
8239: LD_INT 7
8241: PUSH
8242: LD_INT 6
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: LIST
8249: PUSH
8250: LD_OWVAR 67
8254: ARRAY
8255: PPUSH
8256: LD_INT 2500
8258: PUSH
8259: LD_INT 2000
8261: PUSH
8262: LD_INT 1750
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: LIST
8269: PUSH
8270: LD_OWVAR 67
8274: ARRAY
8275: PUSH
8276: LD_INT 300
8278: PUSH
8279: LD_INT 250
8281: PUSH
8282: LD_INT 200
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: LIST
8289: PUSH
8290: LD_OWVAR 67
8294: ARRAY
8295: PUSH
8296: LD_INT 80
8298: PUSH
8299: LD_INT 60
8301: PUSH
8302: LD_INT 50
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: LIST
8309: PUSH
8310: LD_OWVAR 67
8314: ARRAY
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: PPUSH
8321: LD_INT 7
8323: PUSH
8324: LD_INT 6
8326: PUSH
8327: LD_INT 5
8329: PUSH
8330: LD_INT 5
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL 27588 0 6
8343: ST_TO_ADDR
// if not base then
8344: LD_VAR 0 7
8348: NOT
8349: IFFALSE 8353
// exit ;
8351: GO 8488
// mc_bases := Replace ( mc_bases , mc_amer , base ) ;
8353: LD_ADDR_EXP 45
8357: PUSH
8358: LD_EXP 45
8362: PPUSH
8363: LD_EXP 5
8367: PPUSH
8368: LD_VAR 0 7
8372: PPUSH
8373: CALL_OW 1
8377: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
8378: LD_INT 1
8380: PPUSH
8381: LD_INT 1
8383: PPUSH
8384: LD_INT 7
8386: PPUSH
8387: CALL_OW 380
// allyCommander := CreateHuman ;
8391: LD_ADDR_EXP 11
8395: PUSH
8396: CALL_OW 44
8400: ST_TO_ADDR
// PlaceUnitXY ( allyCommander , 139 , 15 , false ) ;
8401: LD_EXP 11
8405: PPUSH
8406: LD_INT 139
8408: PPUSH
8409: LD_INT 15
8411: PPUSH
8412: LD_INT 0
8414: PPUSH
8415: CALL_OW 48
// ComTurnXY ( allyCommander , 137 , 15 ) ;
8419: LD_EXP 11
8423: PPUSH
8424: LD_INT 137
8426: PPUSH
8427: LD_INT 15
8429: PPUSH
8430: CALL_OW 118
// hc_gallery := us ;
8434: LD_ADDR_OWVAR 33
8438: PUSH
8439: LD_STRING us
8441: ST_TO_ADDR
// hc_face_number := 7 ;
8442: LD_ADDR_OWVAR 34
8446: PUSH
8447: LD_INT 7
8449: ST_TO_ADDR
// hc_name := Arthur Powell ;
8450: LD_ADDR_OWVAR 26
8454: PUSH
8455: LD_STRING Arthur Powell
8457: ST_TO_ADDR
// hc_sex := sex_male ;
8458: LD_ADDR_OWVAR 27
8462: PUSH
8463: LD_INT 1
8465: ST_TO_ADDR
// hc_class := 1 ;
8466: LD_ADDR_OWVAR 28
8470: PUSH
8471: LD_INT 1
8473: ST_TO_ADDR
// Powell := CreateHuman ;
8474: LD_ADDR_EXP 12
8478: PUSH
8479: CALL_OW 44
8483: ST_TO_ADDR
// InitHc ;
8484: CALL_OW 19
// end ;
8488: LD_VAR 0 1
8492: RET
// export function PreparePlayer ; var i , side , techs , tanks , cl , chassis , engines , weapons ; begin
8493: LD_INT 0
8495: PPUSH
8496: PPUSH
8497: PPUSH
8498: PPUSH
8499: PPUSH
8500: PPUSH
8501: PPUSH
8502: PPUSH
8503: PPUSH
// side := 1 ;
8504: LD_ADDR_VAR 0 3
8508: PUSH
8509: LD_INT 1
8511: ST_TO_ADDR
// result := [ [ ] , [ ] ] ;
8512: LD_ADDR_VAR 0 1
8516: PUSH
8517: EMPTY
8518: PUSH
8519: EMPTY
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: ST_TO_ADDR
// uc_side := side ;
8525: LD_ADDR_OWVAR 20
8529: PUSH
8530: LD_VAR 0 3
8534: ST_TO_ADDR
// uc_nation := nation_american ;
8535: LD_ADDR_OWVAR 21
8539: PUSH
8540: LD_INT 1
8542: ST_TO_ADDR
// InitHc ;
8543: CALL_OW 19
// InitVc ;
8547: CALL_OW 20
// hc_importance := 0 ;
8551: LD_ADDR_OWVAR 32
8555: PUSH
8556: LD_INT 0
8558: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked ] ;
8559: LD_ADDR_VAR 0 7
8563: PUSH
8564: LD_INT 2
8566: PUSH
8567: LD_INT 3
8569: PUSH
8570: LD_INT 3
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: LIST
8577: ST_TO_ADDR
// if commander = 2 then
8578: LD_EXP 25
8582: PUSH
8583: LD_INT 2
8585: EQUAL
8586: IFFALSE 8607
// chassis := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] ;
8588: LD_ADDR_VAR 0 7
8592: PUSH
8593: LD_INT 3
8595: PUSH
8596: LD_INT 4
8598: PUSH
8599: LD_INT 4
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: LIST
8606: ST_TO_ADDR
// if commander = 3 then
8607: LD_EXP 25
8611: PUSH
8612: LD_INT 3
8614: EQUAL
8615: IFFALSE 8636
// chassis := [ us_medium_wheeled , us_morphling , us_morphling ] ;
8617: LD_ADDR_VAR 0 7
8621: PUSH
8622: LD_INT 2
8624: PUSH
8625: LD_INT 5
8627: PUSH
8628: LD_INT 5
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: LIST
8635: ST_TO_ADDR
// engines := [ engine_solar , engine_solar , engine_combustion ] ;
8636: LD_ADDR_VAR 0 8
8640: PUSH
8641: LD_INT 2
8643: PUSH
8644: LD_INT 2
8646: PUSH
8647: LD_INT 1
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: LIST
8654: ST_TO_ADDR
// if commander = 2 then
8655: LD_EXP 25
8659: PUSH
8660: LD_INT 2
8662: EQUAL
8663: IFFALSE 8684
// engines := [ engine_combustion , engine_combustion , engine_siberite ] ;
8665: LD_ADDR_VAR 0 8
8669: PUSH
8670: LD_INT 1
8672: PUSH
8673: LD_INT 1
8675: PUSH
8676: LD_INT 3
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: LIST
8683: ST_TO_ADDR
// if commander = 3 then
8684: LD_EXP 25
8688: PUSH
8689: LD_INT 3
8691: EQUAL
8692: IFFALSE 8713
// engines := [ engine_siberite , engine_siberite , engine_combustion ] ;
8694: LD_ADDR_VAR 0 8
8698: PUSH
8699: LD_INT 3
8701: PUSH
8702: LD_INT 3
8704: PUSH
8705: LD_INT 1
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: LIST
8712: ST_TO_ADDR
// weapons := [ us_double_gun , us_light_gun , us_gatling_gun ] ;
8713: LD_ADDR_VAR 0 9
8717: PUSH
8718: LD_INT 5
8720: PUSH
8721: LD_INT 3
8723: PUSH
8724: LD_INT 4
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: LIST
8731: ST_TO_ADDR
// if commander = 2 then
8732: LD_EXP 25
8736: PUSH
8737: LD_INT 2
8739: EQUAL
8740: IFFALSE 8761
// weapons := [ us_rocket_launcher , us_double_gun , us_heavy_gun ] ;
8742: LD_ADDR_VAR 0 9
8746: PUSH
8747: LD_INT 7
8749: PUSH
8750: LD_INT 5
8752: PUSH
8753: LD_INT 6
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: LIST
8760: ST_TO_ADDR
// if commander = 3 then
8761: LD_EXP 25
8765: PUSH
8766: LD_INT 3
8768: EQUAL
8769: IFFALSE 8790
// weapons := [ us_laser , us_double_laser , us_rocket_launcher ] ;
8771: LD_ADDR_VAR 0 9
8775: PUSH
8776: LD_INT 9
8778: PUSH
8779: LD_INT 10
8781: PUSH
8782: LD_INT 7
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: LIST
8789: ST_TO_ADDR
// tanks := [ 5 , 5 , 4 ] [ Difficulty ] ;
8790: LD_ADDR_VAR 0 5
8794: PUSH
8795: LD_INT 5
8797: PUSH
8798: LD_INT 5
8800: PUSH
8801: LD_INT 4
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: LIST
8808: PUSH
8809: LD_OWVAR 67
8813: ARRAY
8814: ST_TO_ADDR
// if commander = 2 then
8815: LD_EXP 25
8819: PUSH
8820: LD_INT 2
8822: EQUAL
8823: IFFALSE 8839
// tanks := tanks + 3 ;
8825: LD_ADDR_VAR 0 5
8829: PUSH
8830: LD_VAR 0 5
8834: PUSH
8835: LD_INT 3
8837: PLUS
8838: ST_TO_ADDR
// for i = 1 to tanks do
8839: LD_ADDR_VAR 0 2
8843: PUSH
8844: DOUBLE
8845: LD_INT 1
8847: DEC
8848: ST_TO_ADDR
8849: LD_VAR 0 5
8853: PUSH
8854: FOR_TO
8855: IFFALSE 8965
// begin PrepareVehicle ( chassis [ i mod 3 + 1 ] , engines [ rand ( 1 , 3 ) ] , control_manual , weapons [ i mod 3 + 1 ] , rand ( 60 , 70 ) ) ;
8857: LD_VAR 0 7
8861: PUSH
8862: LD_VAR 0 2
8866: PUSH
8867: LD_INT 3
8869: MOD
8870: PUSH
8871: LD_INT 1
8873: PLUS
8874: ARRAY
8875: PPUSH
8876: LD_VAR 0 8
8880: PUSH
8881: LD_INT 1
8883: PPUSH
8884: LD_INT 3
8886: PPUSH
8887: CALL_OW 12
8891: ARRAY
8892: PPUSH
8893: LD_INT 1
8895: PPUSH
8896: LD_VAR 0 9
8900: PUSH
8901: LD_VAR 0 2
8905: PUSH
8906: LD_INT 3
8908: MOD
8909: PUSH
8910: LD_INT 1
8912: PLUS
8913: ARRAY
8914: PPUSH
8915: LD_INT 60
8917: PPUSH
8918: LD_INT 70
8920: PPUSH
8921: CALL_OW 12
8925: PPUSH
8926: CALL 24179 0 5
// result := Replace ( result , 1 , result [ 1 ] ^ CreateVehicle ) ;
8930: LD_ADDR_VAR 0 1
8934: PUSH
8935: LD_VAR 0 1
8939: PPUSH
8940: LD_INT 1
8942: PPUSH
8943: LD_VAR 0 1
8947: PUSH
8948: LD_INT 1
8950: ARRAY
8951: PUSH
8952: CALL_OW 45
8956: ADD
8957: PPUSH
8958: CALL_OW 1
8962: ST_TO_ADDR
// end ;
8963: GO 8854
8965: POP
8966: POP
// cl := 1 ;
8967: LD_ADDR_VAR 0 6
8971: PUSH
8972: LD_INT 1
8974: ST_TO_ADDR
// for i = 1 to 10 do
8975: LD_ADDR_VAR 0 2
8979: PUSH
8980: DOUBLE
8981: LD_INT 1
8983: DEC
8984: ST_TO_ADDR
8985: LD_INT 10
8987: PUSH
8988: FOR_TO
8989: IFFALSE 9104
// begin if i mod 4 = 0 then
8991: LD_VAR 0 2
8995: PUSH
8996: LD_INT 4
8998: MOD
8999: PUSH
9000: LD_INT 0
9002: EQUAL
9003: IFFALSE 9019
// cl := cl + 1 ;
9005: LD_ADDR_VAR 0 6
9009: PUSH
9010: LD_VAR 0 6
9014: PUSH
9015: LD_INT 1
9017: PLUS
9018: ST_TO_ADDR
// if cl = 2 then
9019: LD_VAR 0 6
9023: PUSH
9024: LD_INT 2
9026: EQUAL
9027: IFFALSE 9037
// cl := 3 ;
9029: LD_ADDR_VAR 0 6
9033: PUSH
9034: LD_INT 3
9036: ST_TO_ADDR
// PrepareHuman ( false , cl , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
9037: LD_INT 0
9039: PPUSH
9040: LD_VAR 0 6
9044: PPUSH
9045: LD_INT 6
9047: PUSH
9048: LD_INT 6
9050: PUSH
9051: LD_INT 5
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: LIST
9058: PUSH
9059: LD_OWVAR 67
9063: ARRAY
9064: PPUSH
9065: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9069: LD_ADDR_VAR 0 1
9073: PUSH
9074: LD_VAR 0 1
9078: PPUSH
9079: LD_INT 2
9081: PPUSH
9082: LD_VAR 0 1
9086: PUSH
9087: LD_INT 2
9089: ARRAY
9090: PUSH
9091: CALL_OW 44
9095: ADD
9096: PPUSH
9097: CALL_OW 1
9101: ST_TO_ADDR
// end ;
9102: GO 8988
9104: POP
9105: POP
// if commander = 1 then
9106: LD_EXP 25
9110: PUSH
9111: LD_INT 1
9113: EQUAL
9114: IFFALSE 9182
// for i = 1 to 4 do
9116: LD_ADDR_VAR 0 2
9120: PUSH
9121: DOUBLE
9122: LD_INT 1
9124: DEC
9125: ST_TO_ADDR
9126: LD_INT 4
9128: PUSH
9129: FOR_TO
9130: IFFALSE 9180
// begin PrepareHuman ( false , class_soldier , 8 ) ;
9132: LD_INT 0
9134: PPUSH
9135: LD_INT 1
9137: PPUSH
9138: LD_INT 8
9140: PPUSH
9141: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9145: LD_ADDR_VAR 0 1
9149: PUSH
9150: LD_VAR 0 1
9154: PPUSH
9155: LD_INT 2
9157: PPUSH
9158: LD_VAR 0 1
9162: PUSH
9163: LD_INT 2
9165: ARRAY
9166: PUSH
9167: CALL_OW 44
9171: ADD
9172: PPUSH
9173: CALL_OW 1
9177: ST_TO_ADDR
// end ;
9178: GO 9129
9180: POP
9181: POP
// techs := [ ] ;
9182: LD_ADDR_VAR 0 4
9186: PUSH
9187: EMPTY
9188: ST_TO_ADDR
// if commander = 1 then
9189: LD_EXP 25
9193: PUSH
9194: LD_INT 1
9196: EQUAL
9197: IFFALSE 9222
// techs := [ tech_weap1 , tech_weap2 , tech_weap3 , tech_lasSight ] ;
9199: LD_ADDR_VAR 0 4
9203: PUSH
9204: LD_INT 51
9206: PUSH
9207: LD_INT 52
9209: PUSH
9210: LD_INT 53
9212: PUSH
9213: LD_INT 12
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: ST_TO_ADDR
// if commander = 2 then
9222: LD_EXP 25
9226: PUSH
9227: LD_INT 2
9229: EQUAL
9230: IFFALSE 9267
// techs := [ tech_tech1 , tech_oilEng , tech_oilPow , tech_solEng , tech_solPow , tech_opto1 , tech_radar ] ;
9232: LD_ADDR_VAR 0 4
9236: PUSH
9237: LD_INT 48
9239: PUSH
9240: LD_INT 47
9242: PUSH
9243: LD_INT 46
9245: PUSH
9246: LD_INT 45
9248: PUSH
9249: LD_INT 35
9251: PUSH
9252: LD_INT 60
9254: PUSH
9255: LD_INT 6
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: ST_TO_ADDR
// if commander = 3 then
9267: LD_EXP 25
9271: PUSH
9272: LD_INT 3
9274: EQUAL
9275: IFFALSE 9324
// techs := [ tech_advAI , tech_advchassis , tech_ai , tech_comp1 , tech_comp2 , tech_oilEng , tech_oilPow , tech_weap1 , tech_gatling , tech_gun ] ;
9277: LD_ADDR_VAR 0 4
9281: PUSH
9282: LD_INT 27
9284: PUSH
9285: LD_INT 36
9287: PUSH
9288: LD_INT 32
9290: PUSH
9291: LD_INT 57
9293: PUSH
9294: LD_INT 58
9296: PUSH
9297: LD_INT 47
9299: PUSH
9300: LD_INT 46
9302: PUSH
9303: LD_INT 51
9305: PUSH
9306: LD_INT 69
9308: PUSH
9309: LD_INT 39
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: ST_TO_ADDR
// if techs then
9324: LD_VAR 0 4
9328: IFFALSE 9362
// for i in techs do
9330: LD_ADDR_VAR 0 2
9334: PUSH
9335: LD_VAR 0 4
9339: PUSH
9340: FOR_IN
9341: IFFALSE 9360
// SetTech ( i , 1 , state_researched ) ;
9343: LD_VAR 0 2
9347: PPUSH
9348: LD_INT 1
9350: PPUSH
9351: LD_INT 2
9353: PPUSH
9354: CALL_OW 322
9358: GO 9340
9360: POP
9361: POP
// hc_gallery := skirmish ;
9362: LD_ADDR_OWVAR 33
9366: PUSH
9367: LD_STRING skirmish
9369: ST_TO_ADDR
// hc_face_number := commander ;
9370: LD_ADDR_OWVAR 34
9374: PUSH
9375: LD_EXP 25
9379: ST_TO_ADDR
// hc_importance := 100 ;
9380: LD_ADDR_OWVAR 32
9384: PUSH
9385: LD_INT 100
9387: ST_TO_ADDR
// case commander of 1 :
9388: LD_EXP 25
9392: PUSH
9393: LD_INT 1
9395: DOUBLE
9396: EQUAL
9397: IFTRUE 9401
9399: GO 9425
9401: POP
// begin hc_name := Jeff Ironside ;
9402: LD_ADDR_OWVAR 26
9406: PUSH
9407: LD_STRING Jeff Ironside
9409: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
9410: LD_INT 1
9412: PPUSH
9413: LD_INT 1
9415: PPUSH
9416: LD_INT 7
9418: PPUSH
9419: CALL_OW 380
// end ; 2 :
9423: GO 9490
9425: LD_INT 2
9427: DOUBLE
9428: EQUAL
9429: IFTRUE 9433
9431: GO 9457
9433: POP
// begin hc_name := Paul Johnson ;
9434: LD_ADDR_OWVAR 26
9438: PUSH
9439: LD_STRING Paul Johnson
9441: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 7 ) ;
9442: LD_INT 1
9444: PPUSH
9445: LD_INT 3
9447: PPUSH
9448: LD_INT 7
9450: PPUSH
9451: CALL_OW 380
// end ; 3 :
9455: GO 9490
9457: LD_INT 3
9459: DOUBLE
9460: EQUAL
9461: IFTRUE 9465
9463: GO 9489
9465: POP
// begin hc_name := Lisa Stuart ;
9466: LD_ADDR_OWVAR 26
9470: PUSH
9471: LD_STRING Lisa Stuart
9473: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 7 ) ;
9474: LD_INT 2
9476: PPUSH
9477: LD_INT 4
9479: PPUSH
9480: LD_INT 7
9482: PPUSH
9483: CALL_OW 380
// end ; end ;
9487: GO 9490
9489: POP
// playerCommander := CreateHuman ;
9490: LD_ADDR_EXP 9
9494: PUSH
9495: CALL_OW 44
9499: ST_TO_ADDR
// hc_importance := 0 ;
9500: LD_ADDR_OWVAR 32
9504: PUSH
9505: LD_INT 0
9507: ST_TO_ADDR
// hc_gallery :=  ;
9508: LD_ADDR_OWVAR 33
9512: PUSH
9513: LD_STRING 
9515: ST_TO_ADDR
// result := Replace ( result , 2 , result [ 2 ] ^ playerCommander ) ;
9516: LD_ADDR_VAR 0 1
9520: PUSH
9521: LD_VAR 0 1
9525: PPUSH
9526: LD_INT 2
9528: PPUSH
9529: LD_VAR 0 1
9533: PUSH
9534: LD_INT 2
9536: ARRAY
9537: PUSH
9538: LD_EXP 9
9542: ADD
9543: PPUSH
9544: CALL_OW 1
9548: ST_TO_ADDR
// end ;
9549: LD_VAR 0 1
9553: RET
// export function PrepareReinforcements ; var i , peopleAmount , tmp , un , veh ; begin
9554: LD_INT 0
9556: PPUSH
9557: PPUSH
9558: PPUSH
9559: PPUSH
9560: PPUSH
9561: PPUSH
// uc_side := 1 ;
9562: LD_ADDR_OWVAR 20
9566: PUSH
9567: LD_INT 1
9569: ST_TO_ADDR
// uc_nation := 1 ;
9570: LD_ADDR_OWVAR 21
9574: PUSH
9575: LD_INT 1
9577: ST_TO_ADDR
// InitHc ;
9578: CALL_OW 19
// peopleAmount := [ 3 , 3 , 2 ] [ Difficulty ] ;
9582: LD_ADDR_VAR 0 3
9586: PUSH
9587: LD_INT 3
9589: PUSH
9590: LD_INT 3
9592: PUSH
9593: LD_INT 2
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: LIST
9600: PUSH
9601: LD_OWVAR 67
9605: ARRAY
9606: ST_TO_ADDR
// for i = 1 to peopleAmount do
9607: LD_ADDR_VAR 0 2
9611: PUSH
9612: DOUBLE
9613: LD_INT 1
9615: DEC
9616: ST_TO_ADDR
9617: LD_VAR 0 3
9621: PUSH
9622: FOR_TO
9623: IFFALSE 9672
// begin PrepareHuman ( false , 2 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9625: LD_INT 0
9627: PPUSH
9628: LD_INT 2
9630: PPUSH
9631: LD_INT 7
9633: PUSH
9634: LD_INT 6
9636: PUSH
9637: LD_INT 5
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: LIST
9644: PUSH
9645: LD_OWVAR 67
9649: ARRAY
9650: PPUSH
9651: CALL_OW 380
// PlaceUnitInArea ( CreateHuman , startArea , false ) ;
9655: CALL_OW 44
9659: PPUSH
9660: LD_INT 19
9662: PPUSH
9663: LD_INT 0
9665: PPUSH
9666: CALL 54139 0 3
// end ;
9670: GO 9622
9672: POP
9673: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_crane , 58 ) ;
9674: LD_INT 2
9676: PPUSH
9677: LD_INT 1
9679: PPUSH
9680: LD_INT 3
9682: PPUSH
9683: LD_INT 13
9685: PPUSH
9686: LD_INT 58
9688: PPUSH
9689: CALL 24179 0 5
// PlaceUnitInArea ( CreateVehicle , startArea , false ) ;
9693: CALL_OW 45
9697: PPUSH
9698: LD_INT 19
9700: PPUSH
9701: LD_INT 0
9703: PPUSH
9704: CALL 54139 0 3
// if commander = 1 then
9708: LD_EXP 25
9712: PUSH
9713: LD_INT 1
9715: EQUAL
9716: IFFALSE 9727
// wait ( 6 6$00 ) else
9718: LD_INT 12600
9720: PPUSH
9721: CALL_OW 67
9725: GO 9734
// wait ( 8 8$00 ) ;
9727: LD_INT 16800
9729: PPUSH
9730: CALL_OW 67
// uc_side := 1 ;
9734: LD_ADDR_OWVAR 20
9738: PUSH
9739: LD_INT 1
9741: ST_TO_ADDR
// uc_nation := 1 ;
9742: LD_ADDR_OWVAR 21
9746: PUSH
9747: LD_INT 1
9749: ST_TO_ADDR
// InitVc ;
9750: CALL_OW 20
// InitHc ;
9754: CALL_OW 19
// for i = 1 to 5 do
9758: LD_ADDR_VAR 0 2
9762: PUSH
9763: DOUBLE
9764: LD_INT 1
9766: DEC
9767: ST_TO_ADDR
9768: LD_INT 5
9770: PUSH
9771: FOR_TO
9772: IFFALSE 10016
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_light_wheeled ] [ i mod 3 + 1 ] , engine_combustion , [ control_manual , control_computer , control_computer ] [ i mod 3 + 1 ] , [ us_heavy_gun , us_cargo_bay , us_radar ] [ i mod 3 + 1 ] , rand ( 40 , 55 ) ) ;
9774: LD_INT 4
9776: PUSH
9777: LD_INT 3
9779: PUSH
9780: LD_INT 1
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: LIST
9787: PUSH
9788: LD_VAR 0 2
9792: PUSH
9793: LD_INT 3
9795: MOD
9796: PUSH
9797: LD_INT 1
9799: PLUS
9800: ARRAY
9801: PPUSH
9802: LD_INT 1
9804: PPUSH
9805: LD_INT 1
9807: PUSH
9808: LD_INT 3
9810: PUSH
9811: LD_INT 3
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: LIST
9818: PUSH
9819: LD_VAR 0 2
9823: PUSH
9824: LD_INT 3
9826: MOD
9827: PUSH
9828: LD_INT 1
9830: PLUS
9831: ARRAY
9832: PPUSH
9833: LD_INT 6
9835: PUSH
9836: LD_INT 12
9838: PUSH
9839: LD_INT 11
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: LIST
9846: PUSH
9847: LD_VAR 0 2
9851: PUSH
9852: LD_INT 3
9854: MOD
9855: PUSH
9856: LD_INT 1
9858: PLUS
9859: ARRAY
9860: PPUSH
9861: LD_INT 40
9863: PPUSH
9864: LD_INT 55
9866: PPUSH
9867: CALL_OW 12
9871: PPUSH
9872: CALL 24179 0 5
// veh := CreateVehicle ;
9876: LD_ADDR_VAR 0 6
9880: PUSH
9881: CALL_OW 45
9885: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
9886: LD_VAR 0 6
9890: PPUSH
9891: LD_INT 19
9893: PPUSH
9894: LD_INT 0
9896: PPUSH
9897: CALL 54139 0 3
// if GetWeapon ( veh ) = us_cargo_bay then
9901: LD_VAR 0 6
9905: PPUSH
9906: CALL_OW 264
9910: PUSH
9911: LD_INT 12
9913: EQUAL
9914: IFFALSE 9946
// begin AddCargo ( veh , mat_cans , 70 ) ;
9916: LD_VAR 0 6
9920: PPUSH
9921: LD_INT 1
9923: PPUSH
9924: LD_INT 70
9926: PPUSH
9927: CALL_OW 291
// AddCargo ( veh , mat_siberit , 30 ) ;
9931: LD_VAR 0 6
9935: PPUSH
9936: LD_INT 3
9938: PPUSH
9939: LD_INT 30
9941: PPUSH
9942: CALL_OW 291
// end ; if GetControl ( veh ) = control_manual then
9946: LD_VAR 0 6
9950: PPUSH
9951: CALL_OW 263
9955: PUSH
9956: LD_INT 1
9958: EQUAL
9959: IFFALSE 10014
// begin PrepareHuman ( sex_male , 3 , 6 ) ;
9961: LD_INT 1
9963: PPUSH
9964: LD_INT 3
9966: PPUSH
9967: LD_INT 6
9969: PPUSH
9970: CALL_OW 380
// un := CreateHuman ;
9974: LD_ADDR_VAR 0 5
9978: PUSH
9979: CALL_OW 44
9983: ST_TO_ADDR
// tmp := tmp ^ un ;
9984: LD_ADDR_VAR 0 4
9988: PUSH
9989: LD_VAR 0 4
9993: PUSH
9994: LD_VAR 0 5
9998: ADD
9999: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10000: LD_VAR 0 5
10004: PPUSH
10005: LD_VAR 0 6
10009: PPUSH
10010: CALL_OW 52
// end ; end ;
10014: GO 9771
10016: POP
10017: POP
// if tmp then
10018: LD_VAR 0 4
10022: IFFALSE 10086
// begin CenterNowOnUnits ( tmp ) ;
10024: LD_VAR 0 4
10028: PPUSH
10029: CALL_OW 87
// Say ( tmp [ 1 ] , DAR-1 ) ;
10033: LD_VAR 0 4
10037: PUSH
10038: LD_INT 1
10040: ARRAY
10041: PPUSH
10042: LD_STRING DAR-1
10044: PPUSH
10045: CALL_OW 88
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-DAR ) ;
10049: LD_EXP 9
10053: PPUSH
10054: LD_STRING D
10056: PUSH
10057: LD_STRING I
10059: PUSH
10060: LD_STRING J
10062: PUSH
10063: LD_STRING S
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: LIST
10070: PUSH
10071: LD_EXP 25
10075: ARRAY
10076: STR
10077: PUSH
10078: LD_STRING -1-DAR
10080: STR
10081: PPUSH
10082: CALL_OW 88
// end ; if not reinforceAllowed then
10086: LD_EXP 24
10090: NOT
10091: IFFALSE 10095
// exit ;
10093: GO 10249
// wait ( 25 25$00 ) ;
10095: LD_INT 52500
10097: PPUSH
10098: CALL_OW 67
// uc_side := 1 ;
10102: LD_ADDR_OWVAR 20
10106: PUSH
10107: LD_INT 1
10109: ST_TO_ADDR
// uc_nation := 1 ;
10110: LD_ADDR_OWVAR 21
10114: PUSH
10115: LD_INT 1
10117: ST_TO_ADDR
// InitVc ;
10118: CALL_OW 20
// InitHc ;
10122: CALL_OW 19
// for i = 1 to 4 do
10126: LD_ADDR_VAR 0 2
10130: PUSH
10131: DOUBLE
10132: LD_INT 1
10134: DEC
10135: ST_TO_ADDR
10136: LD_INT 4
10138: PUSH
10139: FOR_TO
10140: IFFALSE 10247
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 1 ) ;
10142: LD_INT 5
10144: PPUSH
10145: LD_INT 3
10147: PPUSH
10148: LD_INT 1
10150: PPUSH
10151: LD_INT 6
10153: PPUSH
10154: LD_INT 1
10156: PPUSH
10157: CALL 24179 0 5
// veh := CreateVehicle ;
10161: LD_ADDR_VAR 0 6
10165: PUSH
10166: CALL_OW 45
10170: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
10171: LD_VAR 0 6
10175: PPUSH
10176: LD_INT 19
10178: PPUSH
10179: LD_INT 0
10181: PPUSH
10182: CALL 54139 0 3
// if GetControl ( veh ) = control_manual then
10186: LD_VAR 0 6
10190: PPUSH
10191: CALL_OW 263
10195: PUSH
10196: LD_INT 1
10198: EQUAL
10199: IFFALSE 10245
// begin PrepareHuman ( false , 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
10201: LD_INT 0
10203: PPUSH
10204: LD_INT 3
10206: PPUSH
10207: LD_INT 7
10209: PUSH
10210: LD_INT 6
10212: PUSH
10213: LD_INT 5
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: LIST
10220: PUSH
10221: LD_OWVAR 67
10225: ARRAY
10226: PPUSH
10227: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10231: CALL_OW 44
10235: PPUSH
10236: LD_VAR 0 6
10240: PPUSH
10241: CALL_OW 52
// end ; end ;
10245: GO 10139
10247: POP
10248: POP
// end ;
10249: LD_VAR 0 1
10253: RET
// export function PrepareLegionReinforcements ; var i , un , j , tmp ; begin
10254: LD_INT 0
10256: PPUSH
10257: PPUSH
10258: PPUSH
10259: PPUSH
10260: PPUSH
// uc_side := 8 ;
10261: LD_ADDR_OWVAR 20
10265: PUSH
10266: LD_INT 8
10268: ST_TO_ADDR
// uc_nation := nation_arabian ;
10269: LD_ADDR_OWVAR 21
10273: PUSH
10274: LD_INT 2
10276: ST_TO_ADDR
// for i = 1 to 2 do
10277: LD_ADDR_VAR 0 2
10281: PUSH
10282: DOUBLE
10283: LD_INT 1
10285: DEC
10286: ST_TO_ADDR
10287: LD_INT 2
10289: PUSH
10290: FOR_TO
10291: IFFALSE 10371
// for j = 1 to 4 do
10293: LD_ADDR_VAR 0 4
10297: PUSH
10298: DOUBLE
10299: LD_INT 1
10301: DEC
10302: ST_TO_ADDR
10303: LD_INT 4
10305: PUSH
10306: FOR_TO
10307: IFFALSE 10367
// begin PrepareHuman ( false , j , 8 ) ;
10309: LD_INT 0
10311: PPUSH
10312: LD_VAR 0 4
10316: PPUSH
10317: LD_INT 8
10319: PPUSH
10320: CALL_OW 380
// un := CreateHuman ;
10324: LD_ADDR_VAR 0 3
10328: PUSH
10329: CALL_OW 44
10333: ST_TO_ADDR
// PlaceUnitArea ( un , legionSpawn , false ) ;
10334: LD_VAR 0 3
10338: PPUSH
10339: LD_INT 23
10341: PPUSH
10342: LD_INT 0
10344: PPUSH
10345: CALL_OW 49
// tmp := tmp union un ;
10349: LD_ADDR_VAR 0 5
10353: PUSH
10354: LD_VAR 0 5
10358: PUSH
10359: LD_VAR 0 3
10363: UNION
10364: ST_TO_ADDR
// end ;
10365: GO 10306
10367: POP
10368: POP
10369: GO 10290
10371: POP
10372: POP
// for i in tmp do
10373: LD_ADDR_VAR 0 2
10377: PUSH
10378: LD_VAR 0 5
10382: PUSH
10383: FOR_IN
10384: IFFALSE 10403
// ComMoveXY ( i , 150 , 136 ) ;
10386: LD_VAR 0 2
10390: PPUSH
10391: LD_INT 150
10393: PPUSH
10394: LD_INT 136
10396: PPUSH
10397: CALL_OW 111
10401: GO 10383
10403: POP
10404: POP
// mc_bases := Replace ( mc_bases , mc_leg , mc_bases [ mc_leg ] union tmp ) ;
10405: LD_ADDR_EXP 45
10409: PUSH
10410: LD_EXP 45
10414: PPUSH
10415: LD_EXP 6
10419: PPUSH
10420: LD_EXP 45
10424: PUSH
10425: LD_EXP 6
10429: ARRAY
10430: PUSH
10431: LD_VAR 0 5
10435: UNION
10436: PPUSH
10437: CALL_OW 1
10441: ST_TO_ADDR
// end ;
10442: LD_VAR 0 1
10446: RET
// every 0 0$10 trigger Difficulty > 1 and GetTech ( tech_lapser , 3 ) = state_researched do
10447: LD_OWVAR 67
10451: PUSH
10452: LD_INT 1
10454: GREATER
10455: PUSH
10456: LD_INT 31
10458: PPUSH
10459: LD_INT 3
10461: PPUSH
10462: CALL_OW 321
10466: PUSH
10467: LD_INT 2
10469: EQUAL
10470: AND
10471: IFFALSE 10688
10473: GO 10475
10475: DISABLE
// begin MC_InsertBuildingList ( mc_rus_1 , [ [ b_turret , 101 , 159 , 5 ] , [ b_turret , 105 , 158 , 5 ] , [ b_turret , 96 , 136 , 5 ] , [ b_turret , 94 , 133 , 4 ] , [ b_turret , 84 , 102 , 4 ] ] ) ;
10476: LD_EXP 7
10480: PPUSH
10481: LD_INT 33
10483: PUSH
10484: LD_INT 101
10486: PUSH
10487: LD_INT 159
10489: PUSH
10490: LD_INT 5
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: PUSH
10499: LD_INT 33
10501: PUSH
10502: LD_INT 105
10504: PUSH
10505: LD_INT 158
10507: PUSH
10508: LD_INT 5
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: PUSH
10517: LD_INT 33
10519: PUSH
10520: LD_INT 96
10522: PUSH
10523: LD_INT 136
10525: PUSH
10526: LD_INT 5
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: PUSH
10535: LD_INT 33
10537: PUSH
10538: LD_INT 94
10540: PUSH
10541: LD_INT 133
10543: PUSH
10544: LD_INT 4
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 33
10555: PUSH
10556: LD_INT 84
10558: PUSH
10559: LD_INT 102
10561: PUSH
10562: LD_INT 4
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: PPUSH
10578: CALL 79390 0 2
// MC_InsertBuildingList ( mc_rus_2 , [ [ b_turret , 50 , 17 , 4 ] , [ b_turret , 52 , 20 , 4 ] , [ b_turret , 53 , 23 , 4 ] , [ b_turret , 45 , 32 , 4 ] , [ b_turret , 45 , 39 , 4 ] ] ) ;
10582: LD_EXP 8
10586: PPUSH
10587: LD_INT 33
10589: PUSH
10590: LD_INT 50
10592: PUSH
10593: LD_INT 17
10595: PUSH
10596: LD_INT 4
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: PUSH
10605: LD_INT 33
10607: PUSH
10608: LD_INT 52
10610: PUSH
10611: LD_INT 20
10613: PUSH
10614: LD_INT 4
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: PUSH
10623: LD_INT 33
10625: PUSH
10626: LD_INT 53
10628: PUSH
10629: LD_INT 23
10631: PUSH
10632: LD_INT 4
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: PUSH
10641: LD_INT 33
10643: PUSH
10644: LD_INT 45
10646: PUSH
10647: LD_INT 32
10649: PUSH
10650: LD_INT 4
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: PUSH
10659: LD_INT 33
10661: PUSH
10662: LD_INT 45
10664: PUSH
10665: LD_INT 39
10667: PUSH
10668: LD_INT 4
10670: PUSH
10671: EMPTY
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: PPUSH
10684: CALL 79390 0 2
// end ; end_of_file
10688: END
// export function Action ; var i , tmp ; begin
10689: LD_INT 0
10691: PPUSH
10692: PPUSH
10693: PPUSH
// InGameOn ;
10694: CALL_OW 8
// CenterNowOnXY ( 225 , 217 ) ;
10698: LD_INT 225
10700: PPUSH
10701: LD_INT 217
10703: PPUSH
10704: CALL_OW 86
// for i in playerForces [ 2 ] do
10708: LD_ADDR_VAR 0 2
10712: PUSH
10713: LD_EXP 10
10717: PUSH
10718: LD_INT 2
10720: ARRAY
10721: PUSH
10722: FOR_IN
10723: IFFALSE 10856
// begin if playerForces [ 1 ] and GetClass ( i ) in [ 3 , 4 ] then
10725: LD_EXP 10
10729: PUSH
10730: LD_INT 1
10732: ARRAY
10733: PUSH
10734: LD_VAR 0 2
10738: PPUSH
10739: CALL_OW 257
10743: PUSH
10744: LD_INT 3
10746: PUSH
10747: LD_INT 4
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: IN
10754: AND
10755: IFFALSE 10839
// begin PlaceUnitInArea ( playerForces [ 1 ] [ 1 ] , startArea , false ) ;
10757: LD_EXP 10
10761: PUSH
10762: LD_INT 1
10764: ARRAY
10765: PUSH
10766: LD_INT 1
10768: ARRAY
10769: PPUSH
10770: LD_INT 19
10772: PPUSH
10773: LD_INT 0
10775: PPUSH
10776: CALL 54139 0 3
// PlaceHumanInUnit ( i , playerForces [ 1 ] [ 1 ] ) ;
10780: LD_VAR 0 2
10784: PPUSH
10785: LD_EXP 10
10789: PUSH
10790: LD_INT 1
10792: ARRAY
10793: PUSH
10794: LD_INT 1
10796: ARRAY
10797: PPUSH
10798: CALL_OW 52
// playerForces := Replace ( playerForces , 1 , Delete ( playerForces [ 1 ] , 1 ) ) ;
10802: LD_ADDR_EXP 10
10806: PUSH
10807: LD_EXP 10
10811: PPUSH
10812: LD_INT 1
10814: PPUSH
10815: LD_EXP 10
10819: PUSH
10820: LD_INT 1
10822: ARRAY
10823: PPUSH
10824: LD_INT 1
10826: PPUSH
10827: CALL_OW 3
10831: PPUSH
10832: CALL_OW 1
10836: ST_TO_ADDR
// end else
10837: GO 10854
// PlaceUnitInArea ( i , startArea , false ) ;
10839: LD_VAR 0 2
10843: PPUSH
10844: LD_INT 19
10846: PPUSH
10847: LD_INT 0
10849: PPUSH
10850: CALL 54139 0 3
// end ;
10854: GO 10722
10856: POP
10857: POP
// wait ( 0 0$2 ) ;
10858: LD_INT 70
10860: PPUSH
10861: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1 ) ;
10865: LD_EXP 9
10869: PPUSH
10870: LD_STRING D
10872: PUSH
10873: LD_STRING I
10875: PUSH
10876: LD_STRING J
10878: PUSH
10879: LD_STRING S
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: LIST
10886: PUSH
10887: LD_EXP 25
10891: ARRAY
10892: STR
10893: PUSH
10894: LD_STRING -1
10896: STR
10897: PPUSH
10898: CALL_OW 88
// SayRadio ( Powell , DP-1 ) ;
10902: LD_EXP 12
10906: PPUSH
10907: LD_STRING DP-1
10909: PPUSH
10910: CALL_OW 94
// SayRadio ( Powell , DP-2 ) ;
10914: LD_EXP 12
10918: PPUSH
10919: LD_STRING DP-2
10921: PPUSH
10922: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2 ) ;
10926: LD_EXP 9
10930: PPUSH
10931: LD_STRING D
10933: PUSH
10934: LD_STRING I
10936: PUSH
10937: LD_STRING J
10939: PUSH
10940: LD_STRING S
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: LIST
10947: PUSH
10948: LD_EXP 25
10952: ARRAY
10953: STR
10954: PUSH
10955: LD_STRING -2
10957: STR
10958: PPUSH
10959: CALL_OW 88
// InGameOff ;
10963: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
10967: LD_STRING O1
10969: PPUSH
10970: CALL_OW 337
// game := true ;
10974: LD_ADDR_EXP 3
10978: PUSH
10979: LD_INT 1
10981: ST_TO_ADDR
// SaveForQuickRestart ;
10982: CALL_OW 22
// wait ( 0 0$5 ) ;
10986: LD_INT 175
10988: PPUSH
10989: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3 ) ;
10993: LD_EXP 9
10997: PPUSH
10998: LD_STRING D
11000: PUSH
11001: LD_STRING I
11003: PUSH
11004: LD_STRING J
11006: PUSH
11007: LD_STRING S
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: LIST
11014: PUSH
11015: LD_EXP 25
11019: ARRAY
11020: STR
11021: PUSH
11022: LD_STRING -3
11024: STR
11025: PPUSH
11026: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11030: LD_INT 35
11032: PPUSH
11033: CALL_OW 67
// until ruEscape [ 1 ] >= ruEscape [ 2 ] ;
11037: LD_EXP 15
11041: PUSH
11042: LD_INT 1
11044: ARRAY
11045: PUSH
11046: LD_EXP 15
11050: PUSH
11051: LD_INT 2
11053: ARRAY
11054: GREATEREQUAL
11055: IFFALSE 11030
// outpostEscape := true ;
11057: LD_ADDR_EXP 27
11061: PUSH
11062: LD_INT 1
11064: ST_TO_ADDR
// tmp := UnitFilter ( ruOutpost , [ f_sex , sex_male ] ) ;
11065: LD_ADDR_VAR 0 3
11069: PUSH
11070: LD_EXP 14
11074: PPUSH
11075: LD_INT 26
11077: PUSH
11078: LD_INT 1
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: PPUSH
11085: CALL_OW 72
11089: ST_TO_ADDR
// if tmp then
11090: LD_VAR 0 3
11094: IFFALSE 11112
// Say ( tmp [ 1 ] , DR-1-Escape ) ;
11096: LD_VAR 0 3
11100: PUSH
11101: LD_INT 1
11103: ARRAY
11104: PPUSH
11105: LD_STRING DR-1-Escape
11107: PPUSH
11108: CALL_OW 88
// wait ( 0 0$1 ) ;
11112: LD_INT 35
11114: PPUSH
11115: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Escape ) ;
11119: LD_EXP 9
11123: PPUSH
11124: LD_STRING D
11126: PUSH
11127: LD_STRING I
11129: PUSH
11130: LD_STRING J
11132: PUSH
11133: LD_STRING S
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: LIST
11140: PUSH
11141: LD_EXP 25
11145: ARRAY
11146: STR
11147: PUSH
11148: LD_STRING -1-Escape
11150: STR
11151: PPUSH
11152: CALL_OW 88
// for i in ruOutpost do
11156: LD_ADDR_VAR 0 2
11160: PUSH
11161: LD_EXP 14
11165: PUSH
11166: FOR_IN
11167: IFFALSE 11221
// begin if IsInUnit ( i ) then
11169: LD_VAR 0 2
11173: PPUSH
11174: CALL_OW 310
11178: IFFALSE 11189
// ComExitBuilding ( i ) ;
11180: LD_VAR 0 2
11184: PPUSH
11185: CALL_OW 122
// AddComMoveXY ( i , 179 , 102 ) ;
11189: LD_VAR 0 2
11193: PPUSH
11194: LD_INT 179
11196: PPUSH
11197: LD_INT 102
11199: PPUSH
11200: CALL_OW 171
// AddComMoveXY ( i , 28 , 20 ) ;
11204: LD_VAR 0 2
11208: PPUSH
11209: LD_INT 28
11211: PPUSH
11212: LD_INT 20
11214: PPUSH
11215: CALL_OW 171
// end ;
11219: GO 11166
11221: POP
11222: POP
// tmp := [ ] ;
11223: LD_ADDR_VAR 0 3
11227: PUSH
11228: EMPTY
11229: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11230: LD_INT 35
11232: PPUSH
11233: CALL_OW 67
// tmp := UnitFilter ( ruOutpost , [ f_inarea , rus2Base ] ) ;
11237: LD_ADDR_VAR 0 3
11241: PUSH
11242: LD_EXP 14
11246: PPUSH
11247: LD_INT 95
11249: PUSH
11250: LD_INT 11
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PPUSH
11257: CALL_OW 72
11261: ST_TO_ADDR
// if tmp then
11262: LD_VAR 0 3
11266: IFFALSE 11345
// for i in tmp do
11268: LD_ADDR_VAR 0 2
11272: PUSH
11273: LD_VAR 0 3
11277: PUSH
11278: FOR_IN
11279: IFFALSE 11343
// begin ruOutpost := ruOutpost diff i ;
11281: LD_ADDR_EXP 14
11285: PUSH
11286: LD_EXP 14
11290: PUSH
11291: LD_VAR 0 2
11295: DIFF
11296: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ mc_rus_2 , mc_bases [ mc_rus_2 ] + 1 ] , i ) ;
11297: LD_ADDR_EXP 45
11301: PUSH
11302: LD_EXP 45
11306: PPUSH
11307: LD_EXP 8
11311: PUSH
11312: LD_EXP 45
11316: PUSH
11317: LD_EXP 8
11321: ARRAY
11322: PUSH
11323: LD_INT 1
11325: PLUS
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: PPUSH
11331: LD_VAR 0 2
11335: PPUSH
11336: CALL 24301 0 3
11340: ST_TO_ADDR
// end ;
11341: GO 11278
11343: POP
11344: POP
// until not UnitFilter ( ruOutpost , [ f_type , unit_human ] ) ;
11345: LD_EXP 14
11349: PPUSH
11350: LD_INT 21
11352: PUSH
11353: LD_INT 1
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PPUSH
11360: CALL_OW 72
11364: NOT
11365: IFFALSE 11230
// ruOutpost := [ ] ;
11367: LD_ADDR_EXP 14
11371: PUSH
11372: EMPTY
11373: ST_TO_ADDR
// end ;
11374: LD_VAR 0 1
11378: RET
// every 0 0$1 trigger outpostEscape do var i , tmp ;
11379: LD_EXP 27
11383: IFFALSE 11572
11385: GO 11387
11387: DISABLE
11388: LD_INT 0
11390: PPUSH
11391: PPUSH
// begin wait ( rand ( 0 0$25 , 0 0$35 ) ) ;
11392: LD_INT 875
11394: PPUSH
11395: LD_INT 1225
11397: PPUSH
11398: CALL_OW 12
11402: PPUSH
11403: CALL_OW 67
// tmp := [ [ 208 , 166 ] , [ 218 , 174 ] , [ 201 , 173 ] , [ 189 , 167 ] , [ 191 , 160 ] , [ 209 , 181 ] , [ 192 , 162 ] , [ 197 , 166 ] ] ;
11407: LD_ADDR_VAR 0 2
11411: PUSH
11412: LD_INT 208
11414: PUSH
11415: LD_INT 166
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: PUSH
11422: LD_INT 218
11424: PUSH
11425: LD_INT 174
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: PUSH
11432: LD_INT 201
11434: PUSH
11435: LD_INT 173
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: PUSH
11442: LD_INT 189
11444: PUSH
11445: LD_INT 167
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: PUSH
11452: LD_INT 191
11454: PUSH
11455: LD_INT 160
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: PUSH
11462: LD_INT 209
11464: PUSH
11465: LD_INT 181
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PUSH
11472: LD_INT 192
11474: PUSH
11475: LD_INT 162
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: LD_INT 197
11484: PUSH
11485: LD_INT 166
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: ST_TO_ADDR
// for i = 1 to 5 + Difficulty do
11502: LD_ADDR_VAR 0 1
11506: PUSH
11507: DOUBLE
11508: LD_INT 1
11510: DEC
11511: ST_TO_ADDR
11512: LD_INT 5
11514: PUSH
11515: LD_OWVAR 67
11519: PLUS
11520: PUSH
11521: FOR_TO
11522: IFFALSE 11570
// begin MineExplosion ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 1 ) ;
11524: LD_VAR 0 2
11528: PUSH
11529: LD_VAR 0 1
11533: ARRAY
11534: PUSH
11535: LD_INT 1
11537: ARRAY
11538: PPUSH
11539: LD_VAR 0 2
11543: PUSH
11544: LD_VAR 0 1
11548: ARRAY
11549: PUSH
11550: LD_INT 2
11552: ARRAY
11553: PPUSH
11554: LD_INT 1
11556: PPUSH
11557: CALL_OW 453
// wait ( 0 0$0.8 ) ;
11561: LD_INT 28
11563: PPUSH
11564: CALL_OW 67
// end ;
11568: GO 11521
11570: POP
11571: POP
// end ;
11572: PPOPN 2
11574: END
// every 0 0$3 trigger not outpostEscape do var tmp , engs , buildings , empty , i , j , k ;
11575: LD_EXP 27
11579: NOT
11580: IFFALSE 12234
11582: GO 11584
11584: DISABLE
11585: LD_INT 0
11587: PPUSH
11588: PPUSH
11589: PPUSH
11590: PPUSH
11591: PPUSH
11592: PPUSH
11593: PPUSH
// begin enable ;
11594: ENABLE
// tmp := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
11595: LD_ADDR_VAR 0 1
11599: PUSH
11600: LD_EXP 14
11604: PPUSH
11605: LD_INT 22
11607: PUSH
11608: LD_INT 3
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 25
11617: PUSH
11618: LD_INT 1
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PPUSH
11629: CALL_OW 72
11633: ST_TO_ADDR
// engs := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11634: LD_ADDR_VAR 0 2
11638: PUSH
11639: LD_EXP 14
11643: PPUSH
11644: LD_INT 22
11646: PUSH
11647: LD_INT 3
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: LD_INT 25
11656: PUSH
11657: LD_INT 2
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PPUSH
11668: CALL_OW 72
11672: ST_TO_ADDR
// buildings := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11673: LD_ADDR_VAR 0 3
11677: PUSH
11678: LD_EXP 14
11682: PPUSH
11683: LD_INT 22
11685: PUSH
11686: LD_INT 3
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: PUSH
11693: LD_INT 21
11695: PUSH
11696: LD_INT 3
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: LD_INT 3
11705: PUSH
11706: LD_INT 24
11708: PUSH
11709: LD_INT 1000
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: LIST
11724: PPUSH
11725: CALL_OW 72
11729: ST_TO_ADDR
// if engs and buildings then
11730: LD_VAR 0 2
11734: PUSH
11735: LD_VAR 0 3
11739: AND
11740: IFFALSE 11813
// begin for i in engs do
11742: LD_ADDR_VAR 0 5
11746: PUSH
11747: LD_VAR 0 2
11751: PUSH
11752: FOR_IN
11753: IFFALSE 11809
// if IsInUnit ( i ) then
11755: LD_VAR 0 5
11759: PPUSH
11760: CALL_OW 310
11764: IFFALSE 11777
// ComExitBuilding ( i ) else
11766: LD_VAR 0 5
11770: PPUSH
11771: CALL_OW 122
11775: GO 11807
// if not HasTask ( i ) then
11777: LD_VAR 0 5
11781: PPUSH
11782: CALL_OW 314
11786: NOT
11787: IFFALSE 11807
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
11789: LD_VAR 0 5
11793: PPUSH
11794: LD_VAR 0 3
11798: PUSH
11799: LD_INT 1
11801: ARRAY
11802: PPUSH
11803: CALL_OW 130
11807: GO 11752
11809: POP
11810: POP
// end else
11811: GO 11916
// if not buildings and UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) and UnitFilter ( engs , [ f_not , [ f_inside ] ] ) then
11813: LD_VAR 0 3
11817: NOT
11818: PUSH
11819: LD_EXP 14
11823: PPUSH
11824: LD_INT 30
11826: PUSH
11827: LD_INT 0
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PPUSH
11834: CALL_OW 72
11838: AND
11839: PUSH
11840: LD_VAR 0 2
11844: PPUSH
11845: LD_INT 3
11847: PUSH
11848: LD_INT 54
11850: PUSH
11851: EMPTY
11852: LIST
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PPUSH
11858: CALL_OW 72
11862: AND
11863: IFFALSE 11916
// ComEnterUnit ( UnitFilter ( engs , [ f_not , [ f_inside ] ] ) , UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) [ 1 ] ) ;
11865: LD_VAR 0 2
11869: PPUSH
11870: LD_INT 3
11872: PUSH
11873: LD_INT 54
11875: PUSH
11876: EMPTY
11877: LIST
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PPUSH
11883: CALL_OW 72
11887: PPUSH
11888: LD_EXP 14
11892: PPUSH
11893: LD_INT 30
11895: PUSH
11896: LD_INT 0
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PPUSH
11903: CALL_OW 72
11907: PUSH
11908: LD_INT 1
11910: ARRAY
11911: PPUSH
11912: CALL_OW 120
// if not tmp then
11916: LD_VAR 0 1
11920: NOT
11921: IFFALSE 11925
// exit ;
11923: GO 12234
// if FilterUnitsInArea ( ruOutpostCenterArea , [ f_enemy , 3 ] ) > 1 then
11925: LD_INT 26
11927: PPUSH
11928: LD_INT 81
11930: PUSH
11931: LD_INT 3
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PPUSH
11938: CALL_OW 70
11942: PUSH
11943: LD_INT 1
11945: GREATER
11946: IFFALSE 12002
// begin for i in tmp do
11948: LD_ADDR_VAR 0 5
11952: PUSH
11953: LD_VAR 0 1
11957: PUSH
11958: FOR_IN
11959: IFFALSE 11998
// begin if IsInUnit ( i ) then
11961: LD_VAR 0 5
11965: PPUSH
11966: CALL_OW 310
11970: IFFALSE 11981
// ComExitBuilding ( i ) ;
11972: LD_VAR 0 5
11976: PPUSH
11977: CALL_OW 122
// AddComAgressiveMove ( i , 204 , 164 ) ;
11981: LD_VAR 0 5
11985: PPUSH
11986: LD_INT 204
11988: PPUSH
11989: LD_INT 164
11991: PPUSH
11992: CALL_OW 174
// end ;
11996: GO 11958
11998: POP
11999: POP
// end else
12000: GO 12234
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
12002: LD_VAR 0 1
12006: PPUSH
12007: LD_INT 3
12009: PUSH
12010: LD_INT 54
12012: PUSH
12013: EMPTY
12014: LIST
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PPUSH
12020: CALL_OW 72
12024: IFFALSE 12234
// begin empty := UnitFilter ( ruOutpost , [ [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
12026: LD_ADDR_VAR 0 4
12030: PUSH
12031: LD_EXP 14
12035: PPUSH
12036: LD_INT 30
12038: PUSH
12039: LD_INT 32
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PUSH
12046: LD_INT 58
12048: PUSH
12049: EMPTY
12050: LIST
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: PPUSH
12056: CALL_OW 72
12060: ST_TO_ADDR
// if not empty and UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) then
12061: LD_VAR 0 4
12065: NOT
12066: PUSH
12067: LD_EXP 14
12071: PPUSH
12072: LD_INT 30
12074: PUSH
12075: LD_INT 5
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PPUSH
12082: CALL_OW 72
12086: AND
12087: IFFALSE 12124
// begin ComEnterUnit ( tmp , UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) [ 1 ] ) ;
12089: LD_VAR 0 1
12093: PPUSH
12094: LD_EXP 14
12098: PPUSH
12099: LD_INT 30
12101: PUSH
12102: LD_INT 5
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PPUSH
12109: CALL_OW 72
12113: PUSH
12114: LD_INT 1
12116: ARRAY
12117: PPUSH
12118: CALL_OW 120
// exit ;
12122: GO 12234
// end ; j := UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) ;
12124: LD_ADDR_VAR 0 6
12128: PUSH
12129: LD_VAR 0 1
12133: PPUSH
12134: LD_INT 3
12136: PUSH
12137: LD_INT 54
12139: PUSH
12140: EMPTY
12141: LIST
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: PPUSH
12147: CALL_OW 72
12151: ST_TO_ADDR
// if j < empty then
12152: LD_VAR 0 6
12156: PUSH
12157: LD_VAR 0 4
12161: LESS
12162: IFFALSE 12176
// k := j else
12164: LD_ADDR_VAR 0 7
12168: PUSH
12169: LD_VAR 0 6
12173: ST_TO_ADDR
12174: GO 12186
// k := empty ;
12176: LD_ADDR_VAR 0 7
12180: PUSH
12181: LD_VAR 0 4
12185: ST_TO_ADDR
// for i = 1 to k do
12186: LD_ADDR_VAR 0 5
12190: PUSH
12191: DOUBLE
12192: LD_INT 1
12194: DEC
12195: ST_TO_ADDR
12196: LD_VAR 0 7
12200: PUSH
12201: FOR_TO
12202: IFFALSE 12232
// ComEnterUnit ( j [ i ] , empty [ i ] ) ;
12204: LD_VAR 0 6
12208: PUSH
12209: LD_VAR 0 5
12213: ARRAY
12214: PPUSH
12215: LD_VAR 0 4
12219: PUSH
12220: LD_VAR 0 5
12224: ARRAY
12225: PPUSH
12226: CALL_OW 120
12230: GO 12201
12232: POP
12233: POP
// end ; end ;
12234: PPOPN 7
12236: END
// every 0 0$2 trigger GameType = 1 and outpostEscape and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , 208 , 163 , 8 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 208 , 163 , 14 ] ] ) do var i ;
12237: LD_EXP 2
12241: PUSH
12242: LD_INT 1
12244: EQUAL
12245: PUSH
12246: LD_EXP 27
12250: AND
12251: PUSH
12252: LD_INT 22
12254: PUSH
12255: LD_INT 1
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PUSH
12262: LD_INT 92
12264: PUSH
12265: LD_INT 208
12267: PUSH
12268: LD_INT 163
12270: PUSH
12271: LD_INT 8
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: PPUSH
12284: CALL_OW 69
12288: AND
12289: PUSH
12290: LD_INT 22
12292: PUSH
12293: LD_INT 3
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 21
12302: PUSH
12303: LD_INT 1
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PUSH
12310: LD_INT 92
12312: PUSH
12313: LD_INT 208
12315: PUSH
12316: LD_INT 163
12318: PUSH
12319: LD_INT 14
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: LIST
12332: PPUSH
12333: CALL_OW 69
12337: NOT
12338: AND
12339: IFFALSE 12644
12341: GO 12343
12343: DISABLE
12344: LD_INT 0
12346: PPUSH
// begin InGameOn ;
12347: CALL_OW 8
// CenterNowOnUnits ( playerCommander ) ;
12351: LD_EXP 9
12355: PPUSH
12356: CALL_OW 87
// wait ( 0 0$1 ) ;
12360: LD_INT 35
12362: PPUSH
12363: CALL_OW 67
// DialogueOn ;
12367: CALL_OW 6
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-BaseCaptured ) ;
12371: LD_EXP 9
12375: PPUSH
12376: LD_STRING D
12378: PUSH
12379: LD_STRING I
12381: PUSH
12382: LD_STRING J
12384: PUSH
12385: LD_STRING S
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: LIST
12392: PUSH
12393: LD_EXP 25
12397: ARRAY
12398: STR
12399: PUSH
12400: LD_STRING -1-BaseCaptured
12402: STR
12403: PPUSH
12404: CALL_OW 88
// SayRadio ( Powell , DP-1-BaseCaptured ) ;
12408: LD_EXP 12
12412: PPUSH
12413: LD_STRING DP-1-BaseCaptured
12415: PPUSH
12416: CALL_OW 94
// if sibBombAllowed then
12420: LD_EXP 23
12424: IFFALSE 12566
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-BaseCaptured ) ;
12426: LD_EXP 9
12430: PPUSH
12431: LD_STRING D
12433: PUSH
12434: LD_STRING I
12436: PUSH
12437: LD_STRING J
12439: PUSH
12440: LD_STRING S
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: LIST
12447: PUSH
12448: LD_EXP 25
12452: ARRAY
12453: STR
12454: PUSH
12455: LD_STRING -2-BaseCaptured
12457: STR
12458: PPUSH
12459: CALL_OW 88
// if commander = 1 then
12463: LD_EXP 25
12467: PUSH
12468: LD_INT 1
12470: EQUAL
12471: IFFALSE 12485
// SayRadio ( Powell , DP-2b-BaseCaptured ) ;
12473: LD_EXP 12
12477: PPUSH
12478: LD_STRING DP-2b-BaseCaptured
12480: PPUSH
12481: CALL_OW 94
// if commander = 2 then
12485: LD_EXP 25
12489: PUSH
12490: LD_INT 2
12492: EQUAL
12493: IFFALSE 12507
// SayRadio ( Powell , DP-2-BaseCaptured ) ;
12495: LD_EXP 12
12499: PPUSH
12500: LD_STRING DP-2-BaseCaptured
12502: PPUSH
12503: CALL_OW 94
// if commander = 3 then
12507: LD_EXP 25
12511: PUSH
12512: LD_INT 3
12514: EQUAL
12515: IFFALSE 12529
// SayRadio ( Powell , DP-2a-BaseCaptured ) ;
12517: LD_EXP 12
12521: PPUSH
12522: LD_STRING DP-2a-BaseCaptured
12524: PPUSH
12525: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3-BaseCaptured ) ;
12529: LD_EXP 9
12533: PPUSH
12534: LD_STRING D
12536: PUSH
12537: LD_STRING I
12539: PUSH
12540: LD_STRING J
12542: PUSH
12543: LD_STRING S
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: PUSH
12551: LD_EXP 25
12555: ARRAY
12556: STR
12557: PUSH
12558: LD_STRING -3-BaseCaptured
12560: STR
12561: PPUSH
12562: CALL_OW 88
// end ; DialogueOff ;
12566: CALL_OW 7
// InGameOff ;
12570: CALL_OW 9
// ChangeMissionObjectives ( O2 ) ;
12574: LD_STRING O2
12576: PPUSH
12577: CALL_OW 337
// for i in UnitFilter ( ruOutpost , [ f_type , unit_building ] ) do
12581: LD_ADDR_VAR 0 1
12585: PUSH
12586: LD_EXP 14
12590: PPUSH
12591: LD_INT 21
12593: PUSH
12594: LD_INT 3
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: PPUSH
12601: CALL_OW 72
12605: PUSH
12606: FOR_IN
12607: IFFALSE 12623
// SetSide ( i , 1 ) ;
12609: LD_VAR 0 1
12613: PPUSH
12614: LD_INT 1
12616: PPUSH
12617: CALL_OW 235
12621: GO 12606
12623: POP
12624: POP
// baseCaptured := true ;
12625: LD_ADDR_EXP 17
12629: PUSH
12630: LD_INT 1
12632: ST_TO_ADDR
// wait ( 0 0$35 ) ;
12633: LD_INT 1225
12635: PPUSH
12636: CALL_OW 67
// PrepareReinforcements ;
12640: CALL 9554 0 0
// end ;
12644: PPOPN 1
12646: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 167 , 197 , 20 ] ] ) > 3 do
12647: LD_INT 22
12649: PUSH
12650: LD_INT 3
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: LD_INT 92
12659: PUSH
12660: LD_INT 167
12662: PUSH
12663: LD_INT 197
12665: PUSH
12666: LD_INT 20
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PPUSH
12679: CALL_OW 69
12683: PUSH
12684: LD_INT 3
12686: GREATER
12687: IFFALSE 12704
12689: GO 12691
12691: DISABLE
// SayRadio ( Powell , DP-RuAttack ) ;
12692: LD_EXP 12
12696: PPUSH
12697: LD_STRING DP-RuAttack
12699: PPUSH
12700: CALL_OW 94
12704: END
// every 0 0$2 trigger not debug and SeeXY ( 1 , 168 , 74 ) and GetEnvironmentType ( 168 , 72 ) do
12705: LD_EXP 1
12709: NOT
12710: PUSH
12711: LD_INT 1
12713: PPUSH
12714: LD_INT 168
12716: PPUSH
12717: LD_INT 74
12719: PPUSH
12720: CALL_OW 293
12724: AND
12725: PUSH
12726: LD_INT 168
12728: PPUSH
12729: LD_INT 72
12731: PPUSH
12732: CALL_OW 553
12736: AND
12737: IFFALSE 12789
12739: GO 12741
12741: DISABLE
// begin CenterOnXY ( 168 , 72 ) ;
12742: LD_INT 168
12744: PPUSH
12745: LD_INT 72
12747: PPUSH
12748: CALL_OW 84
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Blockade ) ;
12752: LD_EXP 9
12756: PPUSH
12757: LD_STRING D
12759: PUSH
12760: LD_STRING I
12762: PUSH
12763: LD_STRING J
12765: PUSH
12766: LD_STRING S
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: LIST
12773: PUSH
12774: LD_EXP 25
12778: ARRAY
12779: STR
12780: PUSH
12781: LD_STRING -1-Blockade
12783: STR
12784: PPUSH
12785: CALL_OW 88
// end ;
12789: END
// every 0 0$2 trigger GameType = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 4 ] ] ) do
12790: LD_EXP 2
12794: PUSH
12795: LD_INT 1
12797: EQUAL
12798: PUSH
12799: LD_INT 22
12801: PUSH
12802: LD_INT 1
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: PUSH
12809: LD_INT 101
12811: PUSH
12812: LD_INT 4
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: PPUSH
12823: CALL_OW 69
12827: AND
12828: IFFALSE 13360
12830: GO 12832
12832: DISABLE
// begin ChangeSideFog ( 4 , 1 ) ;
12833: LD_INT 4
12835: PPUSH
12836: LD_INT 1
12838: PPUSH
12839: CALL_OW 343
// DialogueOn ;
12843: CALL_OW 6
// CenterNowOnUnits ( allyCommander ) ;
12847: LD_EXP 11
12851: PPUSH
12852: CALL_OW 87
// SayRadio ( allyCommander , DM-1-Contact ) ;
12856: LD_EXP 11
12860: PPUSH
12861: LD_STRING DM-1-Contact
12863: PPUSH
12864: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Contact ) ;
12868: LD_EXP 9
12872: PPUSH
12873: LD_STRING D
12875: PUSH
12876: LD_STRING I
12878: PUSH
12879: LD_STRING J
12881: PUSH
12882: LD_STRING S
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: LIST
12889: PUSH
12890: LD_EXP 25
12894: ARRAY
12895: STR
12896: PUSH
12897: LD_STRING -1-Contact
12899: STR
12900: PPUSH
12901: CALL_OW 88
// if commander = 1 then
12905: LD_EXP 25
12909: PUSH
12910: LD_INT 1
12912: EQUAL
12913: IFFALSE 13045
// begin SayRadio ( allyCommander , DM-2-Contact ) ;
12915: LD_EXP 11
12919: PPUSH
12920: LD_STRING DM-2-Contact
12922: PPUSH
12923: CALL_OW 94
// Say ( playerCommander , DI-2-Contact ) ;
12927: LD_EXP 9
12931: PPUSH
12932: LD_STRING DI-2-Contact
12934: PPUSH
12935: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
12939: LD_INT 22
12941: PUSH
12942: LD_INT 8
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PUSH
12949: LD_INT 21
12951: PUSH
12952: LD_INT 1
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PPUSH
12963: CALL_OW 69
12967: PUSH
12968: LD_INT 8
12970: PPUSH
12971: LD_INT 1
12973: PPUSH
12974: CALL_OW 81
12978: PUSH
12979: LD_INT 2
12981: EQUAL
12982: AND
12983: IFFALSE 13009
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
12985: LD_EXP 11
12989: PPUSH
12990: LD_STRING DM-3-Contact
12992: PPUSH
12993: CALL_OW 94
// Say ( playerCommander , DI-3-Contact ) ;
12997: LD_EXP 9
13001: PPUSH
13002: LD_STRING DI-3-Contact
13004: PPUSH
13005: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13009: LD_EXP 11
13013: PPUSH
13014: LD_STRING DM-4-Contact
13016: PPUSH
13017: CALL_OW 94
// Say ( playerCommander , DI-4-Contact ) ;
13021: LD_EXP 9
13025: PPUSH
13026: LD_STRING DI-4-Contact
13028: PPUSH
13029: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13033: LD_EXP 11
13037: PPUSH
13038: LD_STRING DM-5-Contact
13040: PPUSH
13041: CALL_OW 94
// end ; if commander = 2 then
13045: LD_EXP 25
13049: PUSH
13050: LD_INT 2
13052: EQUAL
13053: IFFALSE 13185
// begin SayRadio ( allyCommander , DM-2c-Contact ) ;
13055: LD_EXP 11
13059: PPUSH
13060: LD_STRING DM-2c-Contact
13062: PPUSH
13063: CALL_OW 94
// Say ( playerCommander , DJ-2-Contact ) ;
13067: LD_EXP 9
13071: PPUSH
13072: LD_STRING DJ-2-Contact
13074: PPUSH
13075: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13079: LD_INT 22
13081: PUSH
13082: LD_INT 8
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PUSH
13089: LD_INT 21
13091: PUSH
13092: LD_INT 1
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: PPUSH
13103: CALL_OW 69
13107: PUSH
13108: LD_INT 8
13110: PPUSH
13111: LD_INT 1
13113: PPUSH
13114: CALL_OW 81
13118: PUSH
13119: LD_INT 2
13121: EQUAL
13122: AND
13123: IFFALSE 13149
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13125: LD_EXP 11
13129: PPUSH
13130: LD_STRING DM-3-Contact
13132: PPUSH
13133: CALL_OW 94
// Say ( playerCommander , DJ-3-Contact ) ;
13137: LD_EXP 9
13141: PPUSH
13142: LD_STRING DJ-3-Contact
13144: PPUSH
13145: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13149: LD_EXP 11
13153: PPUSH
13154: LD_STRING DM-4-Contact
13156: PPUSH
13157: CALL_OW 94
// Say ( playerCommander , DJ-4-Contact ) ;
13161: LD_EXP 9
13165: PPUSH
13166: LD_STRING DJ-4-Contact
13168: PPUSH
13169: CALL_OW 88
// SayRadio ( allyCommander , DM-5a-Contact ) ;
13173: LD_EXP 11
13177: PPUSH
13178: LD_STRING DM-5a-Contact
13180: PPUSH
13181: CALL_OW 94
// end ; if commander = 3 then
13185: LD_EXP 25
13189: PUSH
13190: LD_INT 3
13192: EQUAL
13193: IFFALSE 13349
// begin SayRadio ( allyCommander , DM-2a-Contact ) ;
13195: LD_EXP 11
13199: PPUSH
13200: LD_STRING DM-2a-Contact
13202: PPUSH
13203: CALL_OW 94
// Say ( playerCommander , DS-2a-Contact ) ;
13207: LD_EXP 9
13211: PPUSH
13212: LD_STRING DS-2a-Contact
13214: PPUSH
13215: CALL_OW 88
// SayRadio ( allyCommander , DM-2b-Contact ) ;
13219: LD_EXP 11
13223: PPUSH
13224: LD_STRING DM-2b-Contact
13226: PPUSH
13227: CALL_OW 94
// Say ( playerCommander , DS-2b-Contact ) ;
13231: LD_EXP 9
13235: PPUSH
13236: LD_STRING DS-2b-Contact
13238: PPUSH
13239: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13243: LD_INT 22
13245: PUSH
13246: LD_INT 8
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: PUSH
13253: LD_INT 21
13255: PUSH
13256: LD_INT 1
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PPUSH
13267: CALL_OW 69
13271: PUSH
13272: LD_INT 8
13274: PPUSH
13275: LD_INT 1
13277: PPUSH
13278: CALL_OW 81
13282: PUSH
13283: LD_INT 2
13285: EQUAL
13286: AND
13287: IFFALSE 13313
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13289: LD_EXP 11
13293: PPUSH
13294: LD_STRING DM-3-Contact
13296: PPUSH
13297: CALL_OW 94
// Say ( playerCommander , DS-3-Contact ) ;
13301: LD_EXP 9
13305: PPUSH
13306: LD_STRING DS-3-Contact
13308: PPUSH
13309: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13313: LD_EXP 11
13317: PPUSH
13318: LD_STRING DM-4-Contact
13320: PPUSH
13321: CALL_OW 94
// Say ( playerCommander , DS-4-Contact ) ;
13325: LD_EXP 9
13329: PPUSH
13330: LD_STRING DS-4-Contact
13332: PPUSH
13333: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13337: LD_EXP 11
13341: PPUSH
13342: LD_STRING DM-5-Contact
13344: PPUSH
13345: CALL_OW 94
// end ; DialogueOff ;
13349: CALL_OW 7
// ChangeMissionObjectives ( O3 ) ;
13353: LD_STRING O3
13355: PPUSH
13356: CALL_OW 337
// end ;
13360: END
// every 0 0$10 trigger GameType = 1 and legDestCounter >= [ 15 , 20 , 25 ] [ Difficulty ] and FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) >= 5 do var time , sib , sources , i ;
13361: LD_EXP 2
13365: PUSH
13366: LD_INT 1
13368: EQUAL
13369: PUSH
13370: LD_EXP 18
13374: PUSH
13375: LD_INT 15
13377: PUSH
13378: LD_INT 20
13380: PUSH
13381: LD_INT 25
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: LIST
13388: PUSH
13389: LD_OWVAR 67
13393: ARRAY
13394: GREATEREQUAL
13395: AND
13396: PUSH
13397: LD_INT 22
13399: PUSH
13400: LD_INT 8
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: PUSH
13407: LD_INT 30
13409: PUSH
13410: LD_INT 1
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: PPUSH
13421: CALL_OW 69
13425: AND
13426: PUSH
13427: LD_INT 22
13429: PUSH
13430: LD_INT 8
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PUSH
13437: LD_INT 21
13439: PUSH
13440: LD_INT 3
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PPUSH
13451: CALL_OW 69
13455: PUSH
13456: LD_INT 5
13458: GREATEREQUAL
13459: AND
13460: IFFALSE 13983
13462: GO 13464
13464: DISABLE
13465: LD_INT 0
13467: PPUSH
13468: PPUSH
13469: PPUSH
13470: PPUSH
// begin DialogueOn ;
13471: CALL_OW 6
// SayRadio ( Farmer , DF-1-Leg ) ;
13475: LD_EXP 13
13479: PPUSH
13480: LD_STRING DF-1-Leg
13482: PPUSH
13483: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Leg ) ;
13487: LD_EXP 9
13491: PPUSH
13492: LD_STRING D
13494: PUSH
13495: LD_STRING I
13497: PUSH
13498: LD_STRING J
13500: PUSH
13501: LD_STRING S
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: LIST
13508: PUSH
13509: LD_EXP 25
13513: ARRAY
13514: STR
13515: PUSH
13516: LD_STRING -1-Leg
13518: STR
13519: PPUSH
13520: CALL_OW 88
// SayRadio ( Farmer , DF-2-Leg ) ;
13524: LD_EXP 13
13528: PPUSH
13529: LD_STRING DF-2-Leg
13531: PPUSH
13532: CALL_OW 94
// DialogueOff ;
13536: CALL_OW 7
// case Query ( QLegionOffer ) of 1 :
13540: LD_STRING QLegionOffer
13542: PPUSH
13543: CALL_OW 97
13547: PUSH
13548: LD_INT 1
13550: DOUBLE
13551: EQUAL
13552: IFTRUE 13556
13554: GO 13559
13556: POP
// ; 2 :
13557: GO 13573
13559: LD_INT 2
13561: DOUBLE
13562: EQUAL
13563: IFTRUE 13567
13565: GO 13572
13567: POP
// exit ; end ;
13568: GO 13983
13570: GO 13573
13572: POP
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-Leg ) ;
13573: LD_EXP 9
13577: PPUSH
13578: LD_STRING D
13580: PUSH
13581: LD_STRING I
13583: PUSH
13584: LD_STRING J
13586: PUSH
13587: LD_STRING S
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: LIST
13594: PUSH
13595: LD_EXP 25
13599: ARRAY
13600: STR
13601: PUSH
13602: LD_STRING -2-Leg
13604: STR
13605: PPUSH
13606: CALL_OW 88
// legOfferAccepted := true ;
13610: LD_ADDR_EXP 20
13614: PUSH
13615: LD_INT 1
13617: ST_TO_ADDR
// SetAreaMapShow ( legOfferArea , 1 ) ;
13618: LD_INT 21
13620: PPUSH
13621: LD_INT 1
13623: PPUSH
13624: CALL_OW 424
// CenterOnXY ( 190 , 227 ) ;
13628: LD_INT 190
13630: PPUSH
13631: LD_INT 227
13633: PPUSH
13634: CALL_OW 84
// time := [ 8 8$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
13638: LD_ADDR_VAR 0 1
13642: PUSH
13643: LD_INT 16800
13645: PUSH
13646: LD_INT 14700
13648: PUSH
13649: LD_INT 12600
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: LIST
13656: PUSH
13657: LD_OWVAR 67
13661: ARRAY
13662: ST_TO_ADDR
// sib := 100 ;
13663: LD_ADDR_VAR 0 2
13667: PUSH
13668: LD_INT 100
13670: ST_TO_ADDR
// disableGlobalTimer := true ;
13671: LD_ADDR_EXP 4
13675: PUSH
13676: LD_INT 1
13678: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13679: LD_INT 35
13681: PPUSH
13682: CALL_OW 67
// time := time - 0 0$1 ;
13686: LD_ADDR_VAR 0 1
13690: PUSH
13691: LD_VAR 0 1
13695: PUSH
13696: LD_INT 35
13698: MINUS
13699: ST_TO_ADDR
// sources := GetResourceArea ( legOfferArea , mat_siberit ) ;
13700: LD_ADDR_VAR 0 3
13704: PUSH
13705: LD_INT 21
13707: PPUSH
13708: LD_INT 3
13710: PPUSH
13711: CALL_OW 287
13715: ST_TO_ADDR
// display_strings := [ #SkrTime , tick , #Skr-LegOffer , sib , time ] ;
13716: LD_ADDR_OWVAR 47
13720: PUSH
13721: LD_STRING #SkrTime
13723: PUSH
13724: LD_OWVAR 1
13728: PUSH
13729: LD_STRING #Skr-LegOffer
13731: PUSH
13732: LD_VAR 0 2
13736: PUSH
13737: LD_VAR 0 1
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: ST_TO_ADDR
// if sources then
13749: LD_VAR 0 3
13753: IFFALSE 13785
// begin sib := sib - sources * 10 ;
13755: LD_ADDR_VAR 0 2
13759: PUSH
13760: LD_VAR 0 2
13764: PUSH
13765: LD_VAR 0 3
13769: PUSH
13770: LD_INT 10
13772: MUL
13773: MINUS
13774: ST_TO_ADDR
// EraseResourceArea ( legOfferArea , mat_siberit ) ;
13775: LD_INT 21
13777: PPUSH
13778: LD_INT 3
13780: PPUSH
13781: CALL_OW 286
// end ; until time = 0 0$00 or sib <= 0 or not FilterAllUnits ( [ f_side , 8 ] ) ;
13785: LD_VAR 0 1
13789: PUSH
13790: LD_INT 0
13792: EQUAL
13793: PUSH
13794: LD_VAR 0 2
13798: PUSH
13799: LD_INT 0
13801: LESSEQUAL
13802: OR
13803: PUSH
13804: LD_INT 22
13806: PUSH
13807: LD_INT 8
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: PPUSH
13814: CALL_OW 69
13818: NOT
13819: OR
13820: IFFALSE 13679
// SetAreaMapShow ( legOfferArea , 0 ) ;
13822: LD_INT 21
13824: PPUSH
13825: LD_INT 0
13827: PPUSH
13828: CALL_OW 424
// disableGlobalTimer := false ;
13832: LD_ADDR_EXP 4
13836: PUSH
13837: LD_INT 0
13839: ST_TO_ADDR
// if sib <= 0 then
13840: LD_VAR 0 2
13844: PUSH
13845: LD_INT 0
13847: LESSEQUAL
13848: IFFALSE 13964
// begin legChangeSide := true ;
13850: LD_ADDR_EXP 21
13854: PUSH
13855: LD_INT 1
13857: ST_TO_ADDR
// SayRadio ( Farmer , DF-4y-Leg ) ;
13858: LD_EXP 13
13862: PPUSH
13863: LD_STRING DF-4y-Leg
13865: PPUSH
13866: CALL_OW 94
// ChangeMissionObjectives ( O3a ) ;
13870: LD_STRING O3a
13872: PPUSH
13873: CALL_OW 337
// ChangeSideFog ( 8 , 1 ) ;
13877: LD_INT 8
13879: PPUSH
13880: LD_INT 1
13882: PPUSH
13883: CALL_OW 343
// SetAttitude ( 8 , 1 , att_friend , true ) ;
13887: LD_INT 8
13889: PPUSH
13890: LD_INT 1
13892: PPUSH
13893: LD_INT 1
13895: PPUSH
13896: LD_INT 1
13898: PPUSH
13899: CALL_OW 80
// SetAttitude ( 8 , 4 , att_friend , true ) ;
13903: LD_INT 8
13905: PPUSH
13906: LD_INT 4
13908: PPUSH
13909: LD_INT 1
13911: PPUSH
13912: LD_INT 1
13914: PPUSH
13915: CALL_OW 80
// SetAttitude ( 8 , 6 , att_enemy , true ) ;
13919: LD_INT 8
13921: PPUSH
13922: LD_INT 6
13924: PPUSH
13925: LD_INT 2
13927: PPUSH
13928: LD_INT 1
13930: PPUSH
13931: CALL_OW 80
// SetAttitude ( 8 , 3 , att_enemy , true ) ;
13935: LD_INT 8
13937: PPUSH
13938: LD_INT 3
13940: PPUSH
13941: LD_INT 2
13943: PPUSH
13944: LD_INT 1
13946: PPUSH
13947: CALL_OW 80
// wait ( 0 0$30 ) ;
13951: LD_INT 1050
13953: PPUSH
13954: CALL_OW 67
// PrepareLegionReinforcements ;
13958: CALL 10254 0 0
// end else
13962: GO 13983
// begin ChangeMissionObjectives ( O3a ) ;
13964: LD_STRING O3a
13966: PPUSH
13967: CALL_OW 337
// SayRadio ( Farmer , DF-4n-Leg ) ;
13971: LD_EXP 13
13975: PPUSH
13976: LD_STRING DF-4n-Leg
13978: PPUSH
13979: CALL_OW 94
// end ; end ;
13983: PPOPN 4
13985: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 and GetAttitude ( 8 , 1 ) = att_enemy do
13986: LD_INT 22
13988: PUSH
13989: LD_INT 8
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PUSH
13996: LD_INT 21
13998: PUSH
13999: LD_INT 1
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PPUSH
14010: CALL_OW 69
14014: PUSH
14015: LD_INT 0
14017: EQUAL
14018: PUSH
14019: LD_INT 8
14021: PPUSH
14022: LD_INT 1
14024: PPUSH
14025: CALL_OW 81
14029: PUSH
14030: LD_INT 2
14032: EQUAL
14033: AND
14034: IFFALSE 14046
14036: GO 14038
14038: DISABLE
// ChangeMissionObjectives ( O3a ) ;
14039: LD_STRING O3a
14041: PPUSH
14042: CALL_OW 337
14046: END
// every 0 0$1 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) = 0 do
14047: LD_EXP 2
14051: PUSH
14052: LD_INT 1
14054: EQUAL
14055: PUSH
14056: LD_EXP 3
14060: AND
14061: PUSH
14062: LD_INT 22
14064: PUSH
14065: LD_INT 3
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PUSH
14072: LD_INT 21
14074: PUSH
14075: LD_INT 1
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: PPUSH
14086: CALL_OW 69
14090: PUSH
14091: LD_INT 0
14093: EQUAL
14094: AND
14095: PUSH
14096: LD_INT 22
14098: PUSH
14099: LD_INT 3
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: LD_INT 30
14108: PUSH
14109: LD_INT 1
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PPUSH
14120: CALL_OW 69
14124: PUSH
14125: LD_INT 0
14127: EQUAL
14128: AND
14129: IFFALSE 14367
14131: GO 14133
14133: DISABLE
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Win ) ;
14134: LD_EXP 9
14138: PPUSH
14139: LD_STRING D
14141: PUSH
14142: LD_STRING I
14144: PUSH
14145: LD_STRING J
14147: PUSH
14148: LD_STRING S
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: LIST
14155: PUSH
14156: LD_EXP 25
14160: ARRAY
14161: STR
14162: PUSH
14163: LD_STRING -1-Win
14165: STR
14166: PPUSH
14167: CALL_OW 88
// if tick >= [ 150 150$0 , 130 130$0 , 110 110$0 ] [ Difficulty ] then
14171: LD_OWVAR 1
14175: PUSH
14176: LD_INT 315000
14178: PUSH
14179: LD_INT 273000
14181: PUSH
14182: LD_INT 231000
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: LIST
14189: PUSH
14190: LD_OWVAR 67
14194: ARRAY
14195: GREATEREQUAL
14196: IFFALSE 14211
// AddMedal ( med1 , - 1 ) else
14198: LD_STRING med1
14200: PPUSH
14201: LD_INT 1
14203: NEG
14204: PPUSH
14205: CALL_OW 101
14209: GO 14221
// AddMedal ( med1 , 1 ) ;
14211: LD_STRING med1
14213: PPUSH
14214: LD_INT 1
14216: PPUSH
14217: CALL_OW 101
// if allyDestCounter >= [ 20 , 15 , 10 ] [ Difficulty ] then
14221: LD_EXP 22
14225: PUSH
14226: LD_INT 20
14228: PUSH
14229: LD_INT 15
14231: PUSH
14232: LD_INT 10
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: LIST
14239: PUSH
14240: LD_OWVAR 67
14244: ARRAY
14245: GREATEREQUAL
14246: IFFALSE 14261
// AddMedal ( med2 , - 1 ) else
14248: LD_STRING med2
14250: PPUSH
14251: LD_INT 1
14253: NEG
14254: PPUSH
14255: CALL_OW 101
14259: GO 14271
// AddMedal ( med2 , 1 ) ;
14261: LD_STRING med2
14263: PPUSH
14264: LD_INT 1
14266: PPUSH
14267: CALL_OW 101
// if GetAttitude ( 8 , 1 ) = att_friend then
14271: LD_INT 8
14273: PPUSH
14274: LD_INT 1
14276: PPUSH
14277: CALL_OW 81
14281: PUSH
14282: LD_INT 1
14284: EQUAL
14285: IFFALSE 14299
// AddMedal ( med3 , 1 ) else
14287: LD_STRING med3
14289: PPUSH
14290: LD_INT 1
14292: PPUSH
14293: CALL_OW 101
14297: GO 14356
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 then
14299: LD_INT 22
14301: PUSH
14302: LD_INT 8
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: LD_INT 21
14311: PUSH
14312: LD_INT 1
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: PPUSH
14323: CALL_OW 69
14327: PUSH
14328: LD_INT 0
14330: EQUAL
14331: IFFALSE 14345
// AddMedal ( med3 , 2 ) else
14333: LD_STRING med3
14335: PPUSH
14336: LD_INT 2
14338: PPUSH
14339: CALL_OW 101
14343: GO 14356
// AddMedal ( med3 , - 1 ) ;
14345: LD_STRING med3
14347: PPUSH
14348: LD_INT 1
14350: NEG
14351: PPUSH
14352: CALL_OW 101
// GiveMedals ( MAIN ) ;
14356: LD_STRING MAIN
14358: PPUSH
14359: CALL_OW 102
// YouWin ;
14363: CALL_OW 103
// end ;
14367: END
// every 10 trigger GameType = 1 and staticMines and FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) do var i , j , tmp , x , y ;
14368: LD_EXP 2
14372: PUSH
14373: LD_INT 1
14375: EQUAL
14376: PUSH
14377: LD_EXP 16
14381: AND
14382: PUSH
14383: LD_INT 20
14385: PPUSH
14386: LD_INT 81
14388: PUSH
14389: LD_INT 8
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: PPUSH
14396: CALL_OW 70
14400: AND
14401: IFFALSE 14680
14403: GO 14405
14405: DISABLE
14406: LD_INT 0
14408: PPUSH
14409: PPUSH
14410: PPUSH
14411: PPUSH
14412: PPUSH
// begin enable ;
14413: ENABLE
// tmp := FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) ;
14414: LD_ADDR_VAR 0 3
14418: PUSH
14419: LD_INT 20
14421: PPUSH
14422: LD_INT 81
14424: PUSH
14425: LD_INT 8
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PPUSH
14432: CALL_OW 70
14436: ST_TO_ADDR
// if not tmp then
14437: LD_VAR 0 3
14441: NOT
14442: IFFALSE 14446
// exit ;
14444: GO 14680
// for i in tmp do
14446: LD_ADDR_VAR 0 1
14450: PUSH
14451: LD_VAR 0 3
14455: PUSH
14456: FOR_IN
14457: IFFALSE 14678
// begin x := GetX ( i ) ;
14459: LD_ADDR_VAR 0 4
14463: PUSH
14464: LD_VAR 0 1
14468: PPUSH
14469: CALL_OW 250
14473: ST_TO_ADDR
// y := GetY ( i ) ;
14474: LD_ADDR_VAR 0 5
14478: PUSH
14479: LD_VAR 0 1
14483: PPUSH
14484: CALL_OW 251
14488: ST_TO_ADDR
// if MineAtPos ( x , y ) then
14489: LD_VAR 0 4
14493: PPUSH
14494: LD_VAR 0 5
14498: PPUSH
14499: CALL_OW 458
14503: IFFALSE 14676
// begin LaunchMineAtPos ( x , y , 8 ) ;
14505: LD_VAR 0 4
14509: PPUSH
14510: LD_VAR 0 5
14514: PPUSH
14515: LD_INT 8
14517: PPUSH
14518: CALL_OW 456
// if not dialogueMineDetected then
14522: LD_EXP 28
14526: NOT
14527: IFFALSE 14588
// begin CenterNowOnXY ( x , y ) ;
14529: LD_VAR 0 4
14533: PPUSH
14534: LD_VAR 0 5
14538: PPUSH
14539: CALL_OW 86
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Mine ) ;
14543: LD_EXP 9
14547: PPUSH
14548: LD_STRING D
14550: PUSH
14551: LD_STRING I
14553: PUSH
14554: LD_STRING J
14556: PUSH
14557: LD_STRING S
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: LIST
14564: PUSH
14565: LD_EXP 25
14569: ARRAY
14570: STR
14571: PUSH
14572: LD_STRING -1-Mine
14574: STR
14575: PPUSH
14576: CALL_OW 88
// dialogueMineDetected := true ;
14580: LD_ADDR_EXP 28
14584: PUSH
14585: LD_INT 1
14587: ST_TO_ADDR
// end ; for j = 1 to staticMines do
14588: LD_ADDR_VAR 0 2
14592: PUSH
14593: DOUBLE
14594: LD_INT 1
14596: DEC
14597: ST_TO_ADDR
14598: LD_EXP 16
14602: PUSH
14603: FOR_TO
14604: IFFALSE 14674
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
14606: LD_EXP 16
14610: PUSH
14611: LD_VAR 0 2
14615: ARRAY
14616: PUSH
14617: LD_INT 1
14619: ARRAY
14620: PUSH
14621: LD_VAR 0 4
14625: EQUAL
14626: PUSH
14627: LD_EXP 16
14631: PUSH
14632: LD_VAR 0 2
14636: ARRAY
14637: PUSH
14638: LD_INT 2
14640: ARRAY
14641: PUSH
14642: LD_VAR 0 5
14646: EQUAL
14647: AND
14648: IFFALSE 14672
// begin staticMines := Delete ( staticMines , j ) ;
14650: LD_ADDR_EXP 16
14654: PUSH
14655: LD_EXP 16
14659: PPUSH
14660: LD_VAR 0 2
14664: PPUSH
14665: CALL_OW 3
14669: ST_TO_ADDR
// break ;
14670: GO 14674
// end ;
14672: GO 14603
14674: POP
14675: POP
// end ; end ;
14676: GO 14456
14678: POP
14679: POP
// end ;
14680: PPOPN 5
14682: END
// every 30 30$00 + 50 50$00 trigger GameType = 1 and game and sibBombAllowed and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_btype , b_factory ] ) do var bomb , e ;
14683: LD_EXP 2
14687: PUSH
14688: LD_INT 1
14690: EQUAL
14691: PUSH
14692: LD_EXP 3
14696: AND
14697: PUSH
14698: LD_EXP 23
14702: AND
14703: PUSH
14704: LD_EXP 45
14708: PUSH
14709: LD_EXP 7
14713: ARRAY
14714: PPUSH
14715: LD_INT 30
14717: PUSH
14718: LD_INT 3
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PPUSH
14725: CALL_OW 72
14729: AND
14730: IFFALSE 14934
14732: GO 14734
14734: DISABLE
14735: LD_INT 0
14737: PPUSH
14738: PPUSH
// begin enable ;
14739: ENABLE
// MC_InsertProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
14740: LD_EXP 7
14744: PPUSH
14745: LD_INT 23
14747: PUSH
14748: LD_INT 3
14750: PUSH
14751: LD_INT 3
14753: PUSH
14754: LD_INT 48
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: PUSH
14763: EMPTY
14764: LIST
14765: PPUSH
14766: CALL 79498 0 2
// repeat wait ( 0 0$1 ) ;
14770: LD_INT 35
14772: PPUSH
14773: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14777: LD_INT 22
14779: PUSH
14780: LD_INT 3
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PUSH
14787: LD_INT 34
14789: PUSH
14790: LD_INT 48
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PPUSH
14801: CALL_OW 69
14805: IFFALSE 14770
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14807: LD_ADDR_VAR 0 1
14811: PUSH
14812: LD_INT 22
14814: PUSH
14815: LD_INT 3
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: LD_INT 34
14824: PUSH
14825: LD_INT 48
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PPUSH
14836: CALL_OW 69
14840: ST_TO_ADDR
// e := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) ;
14841: LD_ADDR_VAR 0 2
14845: PUSH
14846: LD_INT 81
14848: PUSH
14849: LD_INT 3
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: LD_INT 21
14858: PUSH
14859: LD_INT 3
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PPUSH
14870: CALL_OW 69
14874: ST_TO_ADDR
// if e then
14875: LD_VAR 0 2
14879: IFFALSE 14905
// e := NearestUnitToUnit ( e , bomb [ 1 ] ) ;
14881: LD_ADDR_VAR 0 2
14885: PUSH
14886: LD_VAR 0 2
14890: PPUSH
14891: LD_VAR 0 1
14895: PUSH
14896: LD_INT 1
14898: ARRAY
14899: PPUSH
14900: CALL_OW 74
14904: ST_TO_ADDR
// ComAttackPlace ( bomb , GetX ( e ) , GetY ( e ) ) ;
14905: LD_VAR 0 1
14909: PPUSH
14910: LD_VAR 0 2
14914: PPUSH
14915: CALL_OW 250
14919: PPUSH
14920: LD_VAR 0 2
14924: PPUSH
14925: CALL_OW 251
14929: PPUSH
14930: CALL_OW 116
// end ;
14934: PPOPN 2
14936: END
// every 0 0$2 trigger Difficulty > 1 and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) and GameType = 1 and game and GetTech ( tech_Behemoth , 3 ) = state_researched do var tmp , i ;
14937: LD_OWVAR 67
14941: PUSH
14942: LD_INT 1
14944: GREATER
14945: PUSH
14946: LD_EXP 45
14950: PUSH
14951: LD_EXP 7
14955: ARRAY
14956: PPUSH
14957: LD_INT 25
14959: PUSH
14960: LD_INT 3
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PPUSH
14967: CALL_OW 72
14971: AND
14972: PUSH
14973: LD_EXP 2
14977: PUSH
14978: LD_INT 1
14980: EQUAL
14981: AND
14982: PUSH
14983: LD_EXP 3
14987: AND
14988: PUSH
14989: LD_INT 23
14991: PPUSH
14992: LD_INT 3
14994: PPUSH
14995: CALL_OW 321
14999: PUSH
15000: LD_INT 2
15002: EQUAL
15003: AND
15004: IFFALSE 15131
15006: GO 15008
15008: DISABLE
15009: LD_INT 0
15011: PPUSH
15012: PPUSH
// begin tmp := UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) ;
15013: LD_ADDR_VAR 0 1
15017: PUSH
15018: LD_EXP 45
15022: PUSH
15023: LD_EXP 7
15027: ARRAY
15028: PPUSH
15029: LD_INT 25
15031: PUSH
15032: LD_INT 3
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: PPUSH
15039: CALL_OW 72
15043: ST_TO_ADDR
// if not tmp then
15044: LD_VAR 0 1
15048: NOT
15049: IFFALSE 15053
// exit ;
15051: GO 15131
// for i in tmp do
15053: LD_ADDR_VAR 0 2
15057: PUSH
15058: LD_VAR 0 1
15062: PUSH
15063: FOR_IN
15064: IFFALSE 15110
// begin SetTag ( i , 29 ) ;
15066: LD_VAR 0 2
15070: PPUSH
15071: LD_INT 29
15073: PPUSH
15074: CALL_OW 109
// ComExitBuilding ( i ) ;
15078: LD_VAR 0 2
15082: PPUSH
15083: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , 97 , 133 , 0 ) ;
15087: LD_VAR 0 2
15091: PPUSH
15092: LD_INT 37
15094: PPUSH
15095: LD_INT 97
15097: PPUSH
15098: LD_INT 133
15100: PPUSH
15101: LD_INT 0
15103: PPUSH
15104: CALL_OW 230
// end ;
15108: GO 15063
15110: POP
15111: POP
// wait ( 1 1$00 ) ;
15112: LD_INT 2100
15114: PPUSH
15115: CALL_OW 67
// MC_Reset ( mc_rus_1 , 29 ) ;
15119: LD_EXP 7
15123: PPUSH
15124: LD_INT 29
15126: PPUSH
15127: CALL 59897 0 2
// end ;
15131: PPOPN 2
15133: END
// every 7 7$00 trigger GameType = 1 and GetBType ( HexInfo ( 84 , 128 ) ) = b_warehouse and GetSide ( HexInfo ( 84 , 128 ) ) = 3 do var veh , depot ;
15134: LD_EXP 2
15138: PUSH
15139: LD_INT 1
15141: EQUAL
15142: PUSH
15143: LD_INT 84
15145: PPUSH
15146: LD_INT 128
15148: PPUSH
15149: CALL_OW 428
15153: PPUSH
15154: CALL_OW 266
15158: PUSH
15159: LD_INT 1
15161: EQUAL
15162: AND
15163: PUSH
15164: LD_INT 84
15166: PPUSH
15167: LD_INT 128
15169: PPUSH
15170: CALL_OW 428
15174: PPUSH
15175: CALL_OW 255
15179: PUSH
15180: LD_INT 3
15182: EQUAL
15183: AND
15184: IFFALSE 15357
15186: GO 15188
15188: DISABLE
15189: LD_INT 0
15191: PPUSH
15192: PPUSH
// begin enable ;
15193: ENABLE
// depot := HexInfo ( 84 , 128 ) ;
15194: LD_ADDR_VAR 0 2
15198: PUSH
15199: LD_INT 84
15201: PPUSH
15202: LD_INT 128
15204: PPUSH
15205: CALL_OW 428
15209: ST_TO_ADDR
// uc_side := 3 ;
15210: LD_ADDR_OWVAR 20
15214: PUSH
15215: LD_INT 3
15217: ST_TO_ADDR
// uc_nation := 3 ;
15218: LD_ADDR_OWVAR 21
15222: PUSH
15223: LD_INT 3
15225: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay , 0 ) ;
15226: LD_INT 21
15228: PPUSH
15229: LD_INT 3
15231: PPUSH
15232: LD_INT 3
15234: PPUSH
15235: LD_INT 51
15237: PPUSH
15238: LD_INT 0
15240: PPUSH
15241: CALL 24179 0 5
// veh := CreateVehicle ;
15245: LD_ADDR_VAR 0 1
15249: PUSH
15250: CALL_OW 45
15254: ST_TO_ADDR
// PlaceUnitXY ( veh , 126 , 227 , false ) ;
15255: LD_VAR 0 1
15259: PPUSH
15260: LD_INT 126
15262: PPUSH
15263: LD_INT 227
15265: PPUSH
15266: LD_INT 0
15268: PPUSH
15269: CALL_OW 48
// SetCargo ( veh , mat_oil , 100 ) ;
15273: LD_VAR 0 1
15277: PPUSH
15278: LD_INT 2
15280: PPUSH
15281: LD_INT 100
15283: PPUSH
15284: CALL_OW 290
// ComGive ( veh , depot ) ;
15288: LD_VAR 0 1
15292: PPUSH
15293: LD_VAR 0 2
15297: PPUSH
15298: CALL_OW 161
// AddComMoveXY ( veh , 126 , 227 ) ;
15302: LD_VAR 0 1
15306: PPUSH
15307: LD_INT 126
15309: PPUSH
15310: LD_INT 227
15312: PPUSH
15313: CALL_OW 171
// wait ( 0 0$10 ) ;
15317: LD_INT 350
15319: PPUSH
15320: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15324: LD_INT 35
15326: PPUSH
15327: CALL_OW 67
// until IsAt ( veh , 126 , 227 ) ;
15331: LD_VAR 0 1
15335: PPUSH
15336: LD_INT 126
15338: PPUSH
15339: LD_INT 227
15341: PPUSH
15342: CALL_OW 307
15346: IFFALSE 15324
// RemoveUnit ( veh ) ;
15348: LD_VAR 0 1
15352: PPUSH
15353: CALL_OW 64
// end ;
15357: PPOPN 2
15359: END
// every 9 9$00 trigger GameType = 1 and outpostEscape and commander = 2 do var veh , depot ;
15360: LD_EXP 2
15364: PUSH
15365: LD_INT 1
15367: EQUAL
15368: PUSH
15369: LD_EXP 27
15373: AND
15374: PUSH
15375: LD_EXP 25
15379: PUSH
15380: LD_INT 2
15382: EQUAL
15383: AND
15384: IFFALSE 15576
15386: GO 15388
15388: DISABLE
15389: LD_INT 0
15391: PPUSH
15392: PPUSH
// begin enable ;
15393: ENABLE
// if tick >= [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] then
15394: LD_OWVAR 1
15398: PUSH
15399: LD_INT 105000
15401: PUSH
15402: LD_INT 84000
15404: PUSH
15405: LD_INT 63000
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: LIST
15412: PUSH
15413: LD_OWVAR 67
15417: ARRAY
15418: GREATEREQUAL
15419: IFFALSE 15422
// disable ;
15421: DISABLE
// uc_side := 4 ;
15422: LD_ADDR_OWVAR 20
15426: PUSH
15427: LD_INT 4
15429: ST_TO_ADDR
// uc_nation := 1 ;
15430: LD_ADDR_OWVAR 21
15434: PUSH
15435: LD_INT 1
15437: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 0 ) ;
15438: LD_INT 2
15440: PPUSH
15441: LD_INT 3
15443: PPUSH
15444: LD_INT 3
15446: PPUSH
15447: LD_INT 12
15449: PPUSH
15450: LD_INT 0
15452: PPUSH
15453: CALL 24179 0 5
// veh := CreateVehicle ;
15457: LD_ADDR_VAR 0 1
15461: PUSH
15462: CALL_OW 45
15466: ST_TO_ADDR
// PlaceUnitXY ( veh , 229 , 226 , false ) ;
15467: LD_VAR 0 1
15471: PPUSH
15472: LD_INT 229
15474: PPUSH
15475: LD_INT 226
15477: PPUSH
15478: LD_INT 0
15480: PPUSH
15481: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
15485: LD_VAR 0 1
15489: PPUSH
15490: LD_INT 1
15492: PPUSH
15493: LD_INT 100
15495: PPUSH
15496: CALL_OW 290
// AddComMoveToArea ( veh , ruOutpostArea ) ;
15500: LD_VAR 0 1
15504: PPUSH
15505: LD_INT 25
15507: PPUSH
15508: CALL_OW 173
// AddComUnload ( veh ) ;
15512: LD_VAR 0 1
15516: PPUSH
15517: CALL_OW 219
// AddComMoveXY ( veh , 229 , 226 ) ;
15521: LD_VAR 0 1
15525: PPUSH
15526: LD_INT 229
15528: PPUSH
15529: LD_INT 226
15531: PPUSH
15532: CALL_OW 171
// wait ( 0 0$10 ) ;
15536: LD_INT 350
15538: PPUSH
15539: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15543: LD_INT 35
15545: PPUSH
15546: CALL_OW 67
// until IsAt ( veh , 229 , 226 ) ;
15550: LD_VAR 0 1
15554: PPUSH
15555: LD_INT 229
15557: PPUSH
15558: LD_INT 226
15560: PPUSH
15561: CALL_OW 307
15565: IFFALSE 15543
// RemoveUnit ( veh ) ;
15567: LD_VAR 0 1
15571: PPUSH
15572: CALL_OW 64
// end ;
15576: PPOPN 2
15578: END
// every 15 15$00 trigger GameType = 1 and game and reinforceAllowed do var i , j , veh , tmp , amount ;
15579: LD_EXP 2
15583: PUSH
15584: LD_INT 1
15586: EQUAL
15587: PUSH
15588: LD_EXP 3
15592: AND
15593: PUSH
15594: LD_EXP 24
15598: AND
15599: IFFALSE 15932
15601: GO 15603
15603: DISABLE
15604: LD_INT 0
15606: PPUSH
15607: PPUSH
15608: PPUSH
15609: PPUSH
15610: PPUSH
// begin enable ;
15611: ENABLE
// tmp := [ ] ;
15612: LD_ADDR_VAR 0 4
15616: PUSH
15617: EMPTY
15618: ST_TO_ADDR
// if commander = 1 then
15619: LD_EXP 25
15623: PUSH
15624: LD_INT 1
15626: EQUAL
15627: IFFALSE 15639
// amount := 3 else
15629: LD_ADDR_VAR 0 5
15633: PUSH
15634: LD_INT 3
15636: ST_TO_ADDR
15637: GO 15647
// amount := 2 ;
15639: LD_ADDR_VAR 0 5
15643: PUSH
15644: LD_INT 2
15646: ST_TO_ADDR
// for i = 1 to amount do
15647: LD_ADDR_VAR 0 1
15651: PUSH
15652: DOUBLE
15653: LD_INT 1
15655: DEC
15656: ST_TO_ADDR
15657: LD_VAR 0 5
15661: PUSH
15662: FOR_TO
15663: IFFALSE 15827
// begin wait ( 0 0$5 ) ;
15665: LD_INT 175
15667: PPUSH
15668: CALL_OW 67
// for j = 1 to 3 do
15672: LD_ADDR_VAR 0 2
15676: PUSH
15677: DOUBLE
15678: LD_INT 1
15680: DEC
15681: ST_TO_ADDR
15682: LD_INT 3
15684: PUSH
15685: FOR_TO
15686: IFFALSE 15823
// begin uc_side := 4 ;
15688: LD_ADDR_OWVAR 20
15692: PUSH
15693: LD_INT 4
15695: ST_TO_ADDR
// uc_nation := 1 ;
15696: LD_ADDR_OWVAR 21
15700: PUSH
15701: LD_INT 1
15703: ST_TO_ADDR
// PrepareVehicle ( [ us_medium_tracked , us_morphling ] [ rand ( 1 , 2 ) ] , engine_siberite , control_computer , [ us_laser , us_double_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
15704: LD_INT 3
15706: PUSH
15707: LD_INT 5
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: LD_INT 1
15716: PPUSH
15717: LD_INT 2
15719: PPUSH
15720: CALL_OW 12
15724: ARRAY
15725: PPUSH
15726: LD_INT 3
15728: PPUSH
15729: LD_INT 3
15731: PPUSH
15732: LD_INT 9
15734: PUSH
15735: LD_INT 5
15737: PUSH
15738: LD_INT 7
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: LIST
15745: PUSH
15746: LD_INT 1
15748: PPUSH
15749: LD_INT 3
15751: PPUSH
15752: CALL_OW 12
15756: ARRAY
15757: PPUSH
15758: LD_INT 100
15760: PPUSH
15761: CALL 24179 0 5
// veh := CreateVehicle ;
15765: LD_ADDR_VAR 0 3
15769: PUSH
15770: CALL_OW 45
15774: ST_TO_ADDR
// tmp := tmp ^ veh ;
15775: LD_ADDR_VAR 0 4
15779: PUSH
15780: LD_VAR 0 4
15784: PUSH
15785: LD_VAR 0 3
15789: ADD
15790: ST_TO_ADDR
// PlaceUnitArea ( veh , westSpawn , false ) ;
15791: LD_VAR 0 3
15795: PPUSH
15796: LD_INT 22
15798: PPUSH
15799: LD_INT 0
15801: PPUSH
15802: CALL_OW 49
// ComMoveXY ( veh , 119 , 215 ) ;
15806: LD_VAR 0 3
15810: PPUSH
15811: LD_INT 119
15813: PPUSH
15814: LD_INT 215
15816: PPUSH
15817: CALL_OW 111
// end ;
15821: GO 15685
15823: POP
15824: POP
// end ;
15825: GO 15662
15827: POP
15828: POP
// wait ( 0 0$3 ) ;
15829: LD_INT 105
15831: PPUSH
15832: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15836: LD_INT 35
15838: PPUSH
15839: CALL_OW 67
// for i in tmp do
15843: LD_ADDR_VAR 0 1
15847: PUSH
15848: LD_VAR 0 4
15852: PUSH
15853: FOR_IN
15854: IFFALSE 15921
// if IsDead ( i ) then
15856: LD_VAR 0 1
15860: PPUSH
15861: CALL_OW 301
15865: IFFALSE 15885
// tmp := tmp diff i else
15867: LD_ADDR_VAR 0 4
15871: PUSH
15872: LD_VAR 0 4
15876: PUSH
15877: LD_VAR 0 1
15881: DIFF
15882: ST_TO_ADDR
15883: GO 15919
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) ;
15885: LD_VAR 0 1
15889: PPUSH
15890: LD_INT 81
15892: PUSH
15893: LD_INT 4
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: PPUSH
15900: CALL_OW 69
15904: PPUSH
15905: LD_VAR 0 1
15909: PPUSH
15910: CALL_OW 74
15914: PPUSH
15915: CALL_OW 115
15919: GO 15853
15921: POP
15922: POP
// until tmp = [ ] ;
15923: LD_VAR 0 4
15927: PUSH
15928: EMPTY
15929: EQUAL
15930: IFFALSE 15836
// end ;
15932: PPOPN 5
15934: END
// every 0 0$1 trigger GameType = 1 and game do var i , tmp ;
15935: LD_EXP 2
15939: PUSH
15940: LD_INT 1
15942: EQUAL
15943: PUSH
15944: LD_EXP 3
15948: AND
15949: IFFALSE 16050
15951: GO 15953
15953: DISABLE
15954: LD_INT 0
15956: PPUSH
15957: PPUSH
// begin enable ;
15958: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
15959: LD_ADDR_VAR 0 2
15963: PUSH
15964: LD_INT 3
15966: PUSH
15967: LD_INT 22
15969: PUSH
15970: LD_INT 1
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PUSH
15981: LD_INT 32
15983: PUSH
15984: LD_INT 1
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PPUSH
15995: CALL_OW 69
15999: ST_TO_ADDR
// if tmp then
16000: LD_VAR 0 2
16004: IFFALSE 16050
// for i in tmp do
16006: LD_ADDR_VAR 0 1
16010: PUSH
16011: LD_VAR 0 2
16015: PUSH
16016: FOR_IN
16017: IFFALSE 16048
// if GetFuel ( i ) < 3 then
16019: LD_VAR 0 1
16023: PPUSH
16024: CALL_OW 261
16028: PUSH
16029: LD_INT 3
16031: LESS
16032: IFFALSE 16046
// SetFuel ( i , 3 ) ;
16034: LD_VAR 0 1
16038: PPUSH
16039: LD_INT 3
16041: PPUSH
16042: CALL_OW 240
16046: GO 16016
16048: POP
16049: POP
// end ;
16050: PPOPN 2
16052: END
// every 15 15$00 trigger game and GetAttitude ( 8 , 4 ) = att_enemy do var i , un , tmp ;
16053: LD_EXP 3
16057: PUSH
16058: LD_INT 8
16060: PPUSH
16061: LD_INT 4
16063: PPUSH
16064: CALL_OW 81
16068: PUSH
16069: LD_INT 2
16071: EQUAL
16072: AND
16073: IFFALSE 16283
16075: GO 16077
16077: DISABLE
16078: LD_INT 0
16080: PPUSH
16081: PPUSH
16082: PPUSH
// begin enable ;
16083: ENABLE
// tmp := [ ] ;
16084: LD_ADDR_VAR 0 3
16088: PUSH
16089: EMPTY
16090: ST_TO_ADDR
// for i = 1 to 4 do
16091: LD_ADDR_VAR 0 1
16095: PUSH
16096: DOUBLE
16097: LD_INT 1
16099: DEC
16100: ST_TO_ADDR
16101: LD_INT 4
16103: PUSH
16104: FOR_TO
16105: IFFALSE 16249
// begin uc_side := 8 ;
16107: LD_ADDR_OWVAR 20
16111: PUSH
16112: LD_INT 8
16114: ST_TO_ADDR
// uc_nation := nation_arabian ;
16115: LD_ADDR_OWVAR 21
16119: PUSH
16120: LD_INT 2
16122: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] , rand ( 60 , 80 ) ) ;
16123: LD_INT 11
16125: PPUSH
16126: LD_INT 1
16128: PPUSH
16129: LD_INT 5
16131: PPUSH
16132: LD_INT 24
16134: PUSH
16135: LD_INT 23
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: PUSH
16142: LD_INT 1
16144: PPUSH
16145: LD_INT 2
16147: PPUSH
16148: CALL_OW 12
16152: ARRAY
16153: PPUSH
16154: LD_INT 60
16156: PPUSH
16157: LD_INT 80
16159: PPUSH
16160: CALL_OW 12
16164: PPUSH
16165: CALL 24179 0 5
// un := CreateVehicle ;
16169: LD_ADDR_VAR 0 2
16173: PUSH
16174: CALL_OW 45
16178: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16179: LD_VAR 0 2
16183: PPUSH
16184: LD_INT 2
16186: PPUSH
16187: CALL_OW 233
// tmp := tmp ^ un ;
16191: LD_ADDR_VAR 0 3
16195: PUSH
16196: LD_VAR 0 3
16200: PUSH
16201: LD_VAR 0 2
16205: ADD
16206: ST_TO_ADDR
// PlaceUnitXY ( un , 88 , 2 , false ) ;
16207: LD_VAR 0 2
16211: PPUSH
16212: LD_INT 88
16214: PPUSH
16215: LD_INT 2
16217: PPUSH
16218: LD_INT 0
16220: PPUSH
16221: CALL_OW 48
// ComMoveXY ( un , 93 , 13 ) ;
16225: LD_VAR 0 2
16229: PPUSH
16230: LD_INT 93
16232: PPUSH
16233: LD_INT 13
16235: PPUSH
16236: CALL_OW 111
// wait ( 0 0$2 ) ;
16240: LD_INT 70
16242: PPUSH
16243: CALL_OW 67
// end ;
16247: GO 16104
16249: POP
16250: POP
// for i in tmp do
16251: LD_ADDR_VAR 0 1
16255: PUSH
16256: LD_VAR 0 3
16260: PUSH
16261: FOR_IN
16262: IFFALSE 16281
// AddComMoveXY ( i , 136 , 19 ) ;
16264: LD_VAR 0 1
16268: PPUSH
16269: LD_INT 136
16271: PPUSH
16272: LD_INT 19
16274: PPUSH
16275: CALL_OW 171
16279: GO 16261
16281: POP
16282: POP
// end ;
16283: PPOPN 3
16285: END
// every 7 7$30 + 7 7$30 trigger game do var i , base , tmp , target ;
16286: LD_EXP 3
16290: IFFALSE 17209
16292: GO 16294
16294: DISABLE
16295: LD_INT 0
16297: PPUSH
16298: PPUSH
16299: PPUSH
16300: PPUSH
// begin enable ;
16301: ENABLE
// base := mc_leg ;
16302: LD_ADDR_VAR 0 2
16306: PUSH
16307: LD_EXP 6
16311: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
16312: LD_INT 22
16314: PUSH
16315: LD_INT 8
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: PUSH
16322: LD_INT 23
16324: PUSH
16325: LD_INT 2
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: PUSH
16332: LD_INT 30
16334: PUSH
16335: LD_INT 3
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: LIST
16346: PPUSH
16347: CALL_OW 69
16351: NOT
16352: IFFALSE 16356
// exit ;
16354: GO 17209
// if Prob ( 40 ) then
16356: LD_INT 40
16358: PPUSH
16359: CALL_OW 13
16363: IFFALSE 16492
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16365: LD_VAR 0 2
16369: PPUSH
16370: LD_INT 13
16372: PUSH
16373: LD_INT 1
16375: PUSH
16376: LD_INT 2
16378: PUSH
16379: LD_INT 28
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: PUSH
16388: LD_INT 13
16390: PUSH
16391: LD_INT 1
16393: PUSH
16394: LD_INT 2
16396: PUSH
16397: LD_INT 28
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: PUSH
16406: LD_INT 13
16408: PUSH
16409: LD_INT 1
16411: PUSH
16412: LD_INT 2
16414: PUSH
16415: LD_INT 28
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: PUSH
16424: LD_INT 13
16426: PUSH
16427: LD_INT 1
16429: PUSH
16430: LD_INT 2
16432: PUSH
16433: LD_INT 28
16435: PUSH
16436: EMPTY
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 13
16444: PUSH
16445: LD_INT 1
16447: PUSH
16448: LD_INT 2
16450: PUSH
16451: LD_INT 28
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: PUSH
16460: LD_INT 13
16462: PUSH
16463: LD_INT 1
16465: PUSH
16466: LD_INT 2
16468: PUSH
16469: LD_INT 26
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: PPUSH
16486: CALL 79498 0 2
// end else
16490: GO 16709
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16492: LD_VAR 0 2
16496: PPUSH
16497: LD_INT 13
16499: PUSH
16500: LD_INT 1
16502: PUSH
16503: LD_INT 2
16505: PUSH
16506: LD_INT 27
16508: PUSH
16509: LD_INT 26
16511: PUSH
16512: LD_INT 26
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: LIST
16519: PUSH
16520: LD_INT 1
16522: PPUSH
16523: LD_INT 3
16525: PPUSH
16526: CALL_OW 12
16530: ARRAY
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: PUSH
16538: LD_INT 13
16540: PUSH
16541: LD_INT 1
16543: PUSH
16544: LD_INT 2
16546: PUSH
16547: LD_INT 27
16549: PUSH
16550: LD_INT 26
16552: PUSH
16553: LD_INT 26
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: LIST
16560: PUSH
16561: LD_INT 1
16563: PPUSH
16564: LD_INT 3
16566: PPUSH
16567: CALL_OW 12
16571: ARRAY
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: PUSH
16579: LD_INT 13
16581: PUSH
16582: LD_INT 1
16584: PUSH
16585: LD_INT 2
16587: PUSH
16588: LD_INT 26
16590: PUSH
16591: LD_INT 26
16593: PUSH
16594: LD_INT 29
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: LIST
16601: PUSH
16602: LD_INT 1
16604: PPUSH
16605: LD_INT 3
16607: PPUSH
16608: CALL_OW 12
16612: ARRAY
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 13
16622: PUSH
16623: LD_INT 1
16625: PUSH
16626: LD_INT 2
16628: PUSH
16629: LD_INT 26
16631: PUSH
16632: LD_INT 29
16634: PUSH
16635: LD_INT 29
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: LIST
16642: PUSH
16643: LD_INT 1
16645: PPUSH
16646: LD_INT 3
16648: PPUSH
16649: CALL_OW 12
16653: ARRAY
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: PUSH
16661: LD_INT 13
16663: PUSH
16664: LD_INT 1
16666: PUSH
16667: LD_INT 2
16669: PUSH
16670: LD_INT 29
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: PUSH
16679: LD_INT 13
16681: PUSH
16682: LD_INT 1
16684: PUSH
16685: LD_INT 2
16687: PUSH
16688: LD_INT 26
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: PPUSH
16705: CALL 79498 0 2
// end ; repeat wait ( 0 0$1 ) ;
16709: LD_INT 35
16711: PPUSH
16712: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 6 or tick mod 10 10$00 = 0 ;
16716: LD_VAR 0 2
16720: PPUSH
16721: LD_INT 1
16723: PPUSH
16724: CALL 80916 0 2
16728: PUSH
16729: LD_INT 6
16731: GREATEREQUAL
16732: PUSH
16733: LD_OWVAR 1
16737: PUSH
16738: LD_INT 21000
16740: MOD
16741: PUSH
16742: LD_INT 0
16744: EQUAL
16745: OR
16746: IFFALSE 16709
// wait ( 0 0$30 ) ;
16748: LD_INT 1050
16750: PPUSH
16751: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
16755: LD_ADDR_VAR 0 3
16759: PUSH
16760: LD_VAR 0 2
16764: PPUSH
16765: LD_INT 1
16767: PPUSH
16768: CALL 80916 0 2
16772: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
16773: LD_ADDR_EXP 64
16777: PUSH
16778: LD_EXP 64
16782: PPUSH
16783: LD_VAR 0 2
16787: PPUSH
16788: LD_EXP 64
16792: PUSH
16793: LD_VAR 0 2
16797: ARRAY
16798: PUSH
16799: LD_VAR 0 3
16803: DIFF
16804: PPUSH
16805: CALL_OW 1
16809: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
16810: LD_ADDR_VAR 0 4
16814: PUSH
16815: LD_INT 0
16817: PPUSH
16818: LD_INT 2
16820: PPUSH
16821: CALL_OW 12
16825: ST_TO_ADDR
// if legChangeSide then
16826: LD_EXP 21
16830: IFFALSE 16840
// target := 2 ;
16832: LD_ADDR_VAR 0 4
16836: PUSH
16837: LD_INT 2
16839: ST_TO_ADDR
// if target = 2 then
16840: LD_VAR 0 4
16844: PUSH
16845: LD_INT 2
16847: EQUAL
16848: IFFALSE 16976
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16850: LD_ADDR_VAR 0 3
16854: PUSH
16855: LD_VAR 0 3
16859: PPUSH
16860: LD_INT 24
16862: PUSH
16863: LD_INT 250
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: PPUSH
16870: CALL_OW 72
16874: ST_TO_ADDR
// for i in tmp do
16875: LD_ADDR_VAR 0 1
16879: PUSH
16880: LD_VAR 0 3
16884: PUSH
16885: FOR_IN
16886: IFFALSE 16926
// if GetDistUnitXY ( i , 112 , 64 ) > 9 then
16888: LD_VAR 0 1
16892: PPUSH
16893: LD_INT 112
16895: PPUSH
16896: LD_INT 64
16898: PPUSH
16899: CALL_OW 297
16903: PUSH
16904: LD_INT 9
16906: GREATER
16907: IFFALSE 16924
// ComMoveXY ( i , 112 , 64 ) ;
16909: LD_VAR 0 1
16913: PPUSH
16914: LD_INT 112
16916: PPUSH
16917: LD_INT 64
16919: PPUSH
16920: CALL_OW 111
16924: GO 16885
16926: POP
16927: POP
// wait ( 0 0$1 ) ;
16928: LD_INT 35
16930: PPUSH
16931: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 112 , 64 , 9 ] ) >= ( tmp - 1 ) ;
16935: LD_VAR 0 3
16939: PPUSH
16940: LD_INT 92
16942: PUSH
16943: LD_INT 112
16945: PUSH
16946: LD_INT 64
16948: PUSH
16949: LD_INT 9
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: PPUSH
16958: CALL_OW 72
16962: PUSH
16963: LD_VAR 0 3
16967: PUSH
16968: LD_INT 1
16970: MINUS
16971: GREATEREQUAL
16972: IFFALSE 16850
// end else
16974: GO 17100
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16976: LD_ADDR_VAR 0 3
16980: PUSH
16981: LD_VAR 0 3
16985: PPUSH
16986: LD_INT 24
16988: PUSH
16989: LD_INT 250
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PPUSH
16996: CALL_OW 72
17000: ST_TO_ADDR
// for i in tmp do
17001: LD_ADDR_VAR 0 1
17005: PUSH
17006: LD_VAR 0 3
17010: PUSH
17011: FOR_IN
17012: IFFALSE 17052
// if GetDistUnitXY ( i , 174 , 94 ) > 9 then
17014: LD_VAR 0 1
17018: PPUSH
17019: LD_INT 174
17021: PPUSH
17022: LD_INT 94
17024: PPUSH
17025: CALL_OW 297
17029: PUSH
17030: LD_INT 9
17032: GREATER
17033: IFFALSE 17050
// ComMoveXY ( i , 174 , 94 ) ;
17035: LD_VAR 0 1
17039: PPUSH
17040: LD_INT 174
17042: PPUSH
17043: LD_INT 94
17045: PPUSH
17046: CALL_OW 111
17050: GO 17011
17052: POP
17053: POP
// wait ( 0 0$1 ) ;
17054: LD_INT 35
17056: PPUSH
17057: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 174 , 94 , 9 ] ) >= ( tmp - 1 ) ;
17061: LD_VAR 0 3
17065: PPUSH
17066: LD_INT 92
17068: PUSH
17069: LD_INT 174
17071: PUSH
17072: LD_INT 94
17074: PUSH
17075: LD_INT 9
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: PPUSH
17084: CALL_OW 72
17088: PUSH
17089: LD_VAR 0 3
17093: PUSH
17094: LD_INT 1
17096: MINUS
17097: GREATEREQUAL
17098: IFFALSE 16976
// end ; repeat wait ( 0 0$1 ) ;
17100: LD_INT 35
17102: PPUSH
17103: CALL_OW 67
// for i in tmp do
17107: LD_ADDR_VAR 0 1
17111: PUSH
17112: LD_VAR 0 3
17116: PUSH
17117: FOR_IN
17118: IFFALSE 17200
// begin if GetLives ( i ) > 251 then
17120: LD_VAR 0 1
17124: PPUSH
17125: CALL_OW 256
17129: PUSH
17130: LD_INT 251
17132: GREATER
17133: IFFALSE 17171
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
17135: LD_VAR 0 1
17139: PPUSH
17140: LD_INT 81
17142: PUSH
17143: LD_INT 8
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PPUSH
17150: CALL_OW 69
17154: PPUSH
17155: LD_VAR 0 1
17159: PPUSH
17160: CALL_OW 74
17164: PPUSH
17165: CALL_OW 115
17169: GO 17198
// if IsDead ( i ) then
17171: LD_VAR 0 1
17175: PPUSH
17176: CALL_OW 301
17180: IFFALSE 17198
// tmp := tmp diff i ;
17182: LD_ADDR_VAR 0 3
17186: PUSH
17187: LD_VAR 0 3
17191: PUSH
17192: LD_VAR 0 1
17196: DIFF
17197: ST_TO_ADDR
// end ;
17198: GO 17117
17200: POP
17201: POP
// until not tmp ;
17202: LD_VAR 0 3
17206: NOT
17207: IFFALSE 17100
// end ;
17209: PPOPN 4
17211: END
// every 7 7$30 trigger game do var i , base , tmp , target , teleport ;
17212: LD_EXP 3
17216: IFFALSE 18204
17218: GO 17220
17220: DISABLE
17221: LD_INT 0
17223: PPUSH
17224: PPUSH
17225: PPUSH
17226: PPUSH
17227: PPUSH
// begin enable ;
17228: ENABLE
// if not UnitFilter ( mc_bases [ mc_rus_2 ] , [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
17229: LD_EXP 45
17233: PUSH
17234: LD_EXP 8
17238: ARRAY
17239: PPUSH
17240: LD_INT 22
17242: PUSH
17243: LD_INT 3
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PUSH
17250: LD_INT 30
17252: PUSH
17253: LD_INT 3
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PPUSH
17264: CALL_OW 72
17268: NOT
17269: IFFALSE 17273
// exit ;
17271: GO 18204
// base := mc_rus_2 ;
17273: LD_ADDR_VAR 0 2
17277: PUSH
17278: LD_EXP 8
17282: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
17283: LD_ADDR_VAR 0 5
17287: PUSH
17288: LD_INT 22
17290: PUSH
17291: LD_INT 3
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 30
17300: PUSH
17301: LD_INT 34
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PPUSH
17312: CALL_OW 69
17316: ST_TO_ADDR
// if Prob ( 40 ) then
17317: LD_INT 40
17319: PPUSH
17320: CALL_OW 13
17324: IFFALSE 17453
// begin MC_InsertProduceList ( base , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17326: LD_VAR 0 2
17330: PPUSH
17331: LD_INT 22
17333: PUSH
17334: LD_INT 3
17336: PUSH
17337: LD_INT 3
17339: PUSH
17340: LD_INT 49
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: PUSH
17349: LD_INT 22
17351: PUSH
17352: LD_INT 3
17354: PUSH
17355: LD_INT 3
17357: PUSH
17358: LD_INT 49
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 22
17369: PUSH
17370: LD_INT 3
17372: PUSH
17373: LD_INT 3
17375: PUSH
17376: LD_INT 49
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 24
17387: PUSH
17388: LD_INT 3
17390: PUSH
17391: LD_INT 3
17393: PUSH
17394: LD_INT 46
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: PUSH
17403: LD_INT 24
17405: PUSH
17406: LD_INT 3
17408: PUSH
17409: LD_INT 3
17411: PUSH
17412: LD_INT 46
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 24
17423: PUSH
17424: LD_INT 3
17426: PUSH
17427: LD_INT 3
17429: PUSH
17430: LD_INT 46
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: PPUSH
17447: CALL 79498 0 2
// end else
17451: GO 17578
// begin MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17453: LD_VAR 0 2
17457: PPUSH
17458: LD_INT 24
17460: PUSH
17461: LD_INT 3
17463: PUSH
17464: LD_INT 3
17466: PUSH
17467: LD_INT 47
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 24
17478: PUSH
17479: LD_INT 3
17481: PUSH
17482: LD_INT 3
17484: PUSH
17485: LD_INT 47
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: PUSH
17494: LD_INT 24
17496: PUSH
17497: LD_INT 3
17499: PUSH
17500: LD_INT 3
17502: PUSH
17503: LD_INT 47
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 24
17514: PUSH
17515: LD_INT 3
17517: PUSH
17518: LD_INT 3
17520: PUSH
17521: LD_INT 46
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: PUSH
17530: LD_INT 24
17532: PUSH
17533: LD_INT 3
17535: PUSH
17536: LD_INT 3
17538: PUSH
17539: LD_INT 46
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 24
17550: PUSH
17551: LD_INT 3
17553: PUSH
17554: LD_INT 3
17556: PUSH
17557: LD_INT 46
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: PPUSH
17574: CALL 79498 0 2
// end ; if Difficulty > 1 then
17578: LD_OWVAR 67
17582: PUSH
17583: LD_INT 1
17585: GREATER
17586: IFFALSE 17618
// MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
17588: LD_VAR 0 2
17592: PPUSH
17593: LD_INT 24
17595: PUSH
17596: LD_INT 3
17598: PUSH
17599: LD_INT 3
17601: PUSH
17602: LD_INT 47
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: PUSH
17611: EMPTY
17612: LIST
17613: PPUSH
17614: CALL 79498 0 2
// repeat wait ( 0 0$1 ) ;
17618: LD_INT 35
17620: PPUSH
17621: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] or tick mod 10 10$00 = 0 ;
17625: LD_VAR 0 2
17629: PPUSH
17630: LD_INT 1
17632: PPUSH
17633: CALL 80916 0 2
17637: PUSH
17638: LD_INT 6
17640: PUSH
17641: LD_INT 7
17643: PUSH
17644: LD_INT 7
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: LIST
17651: PUSH
17652: LD_OWVAR 67
17656: ARRAY
17657: GREATEREQUAL
17658: PUSH
17659: LD_OWVAR 1
17663: PUSH
17664: LD_INT 21000
17666: MOD
17667: PUSH
17668: LD_INT 0
17670: EQUAL
17671: OR
17672: IFFALSE 17618
// wait ( 0 0$45 ) ;
17674: LD_INT 1575
17676: PPUSH
17677: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
17681: LD_ADDR_VAR 0 3
17685: PUSH
17686: LD_VAR 0 2
17690: PPUSH
17691: LD_INT 1
17693: PPUSH
17694: CALL 80916 0 2
17698: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
17699: LD_ADDR_EXP 64
17703: PUSH
17704: LD_EXP 64
17708: PPUSH
17709: LD_VAR 0 2
17713: PPUSH
17714: LD_EXP 64
17718: PUSH
17719: LD_VAR 0 2
17723: ARRAY
17724: PUSH
17725: LD_VAR 0 3
17729: DIFF
17730: PPUSH
17731: CALL_OW 1
17735: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
17736: LD_ADDR_VAR 0 4
17740: PUSH
17741: LD_INT 0
17743: PPUSH
17744: LD_INT 1
17746: PPUSH
17747: CALL_OW 12
17751: ST_TO_ADDR
// if target then
17752: LD_VAR 0 4
17756: IFFALSE 17884
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17758: LD_ADDR_VAR 0 3
17762: PUSH
17763: LD_VAR 0 3
17767: PPUSH
17768: LD_INT 24
17770: PUSH
17771: LD_INT 250
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PPUSH
17778: CALL_OW 72
17782: ST_TO_ADDR
// for i in tmp do
17783: LD_ADDR_VAR 0 1
17787: PUSH
17788: LD_VAR 0 3
17792: PUSH
17793: FOR_IN
17794: IFFALSE 17834
// if GetDistUnitXY ( i , 84 , 32 ) > 9 then
17796: LD_VAR 0 1
17800: PPUSH
17801: LD_INT 84
17803: PPUSH
17804: LD_INT 32
17806: PPUSH
17807: CALL_OW 297
17811: PUSH
17812: LD_INT 9
17814: GREATER
17815: IFFALSE 17832
// ComMoveXY ( i , 84 , 32 ) ;
17817: LD_VAR 0 1
17821: PPUSH
17822: LD_INT 84
17824: PPUSH
17825: LD_INT 32
17827: PPUSH
17828: CALL_OW 111
17832: GO 17793
17834: POP
17835: POP
// wait ( 0 0$1 ) ;
17836: LD_INT 35
17838: PPUSH
17839: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 84 , 32 , 9 ] ) >= ( tmp - 1 ) ;
17843: LD_VAR 0 3
17847: PPUSH
17848: LD_INT 92
17850: PUSH
17851: LD_INT 84
17853: PUSH
17854: LD_INT 32
17856: PUSH
17857: LD_INT 9
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: PPUSH
17866: CALL_OW 72
17870: PUSH
17871: LD_VAR 0 3
17875: PUSH
17876: LD_INT 1
17878: MINUS
17879: GREATEREQUAL
17880: IFFALSE 17758
// end else
17882: GO 18044
// begin if teleport then
17884: LD_VAR 0 5
17888: IFFALSE 17908
// ComEnterUnit ( tmp , teleport [ 1 ] ) ;
17890: LD_VAR 0 3
17894: PPUSH
17895: LD_VAR 0 5
17899: PUSH
17900: LD_INT 1
17902: ARRAY
17903: PPUSH
17904: CALL_OW 120
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17908: LD_ADDR_VAR 0 3
17912: PUSH
17913: LD_VAR 0 3
17917: PPUSH
17918: LD_INT 24
17920: PUSH
17921: LD_INT 250
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PPUSH
17928: CALL_OW 72
17932: ST_TO_ADDR
// for i in tmp do
17933: LD_ADDR_VAR 0 1
17937: PUSH
17938: LD_VAR 0 3
17942: PUSH
17943: FOR_IN
17944: IFFALSE 17996
// if GetDistUnitXY ( i , 140 , 219 ) > 9 and not HasTask ( i ) then
17946: LD_VAR 0 1
17950: PPUSH
17951: LD_INT 140
17953: PPUSH
17954: LD_INT 219
17956: PPUSH
17957: CALL_OW 297
17961: PUSH
17962: LD_INT 9
17964: GREATER
17965: PUSH
17966: LD_VAR 0 1
17970: PPUSH
17971: CALL_OW 314
17975: NOT
17976: AND
17977: IFFALSE 17994
// AddComMoveXY ( i , 140 , 219 ) ;
17979: LD_VAR 0 1
17983: PPUSH
17984: LD_INT 140
17986: PPUSH
17987: LD_INT 219
17989: PPUSH
17990: CALL_OW 171
17994: GO 17943
17996: POP
17997: POP
// wait ( 0 0$1 ) ;
17998: LD_INT 35
18000: PPUSH
18001: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 140 , 219 , 9 ] ) >= ( tmp - 1 ) ;
18005: LD_VAR 0 3
18009: PPUSH
18010: LD_INT 92
18012: PUSH
18013: LD_INT 140
18015: PUSH
18016: LD_INT 219
18018: PUSH
18019: LD_INT 9
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: PPUSH
18028: CALL_OW 72
18032: PUSH
18033: LD_VAR 0 3
18037: PUSH
18038: LD_INT 1
18040: MINUS
18041: GREATEREQUAL
18042: IFFALSE 17908
// end ; repeat wait ( 0 0$1 ) ;
18044: LD_INT 35
18046: PPUSH
18047: CALL_OW 67
// for i in tmp do
18051: LD_ADDR_VAR 0 1
18055: PUSH
18056: LD_VAR 0 3
18060: PUSH
18061: FOR_IN
18062: IFFALSE 18195
// begin if GetLives ( i ) > 251 then
18064: LD_VAR 0 1
18068: PPUSH
18069: CALL_OW 256
18073: PUSH
18074: LD_INT 251
18076: GREATER
18077: IFFALSE 18166
// begin if GetWeapon ( i ) = ru_time_lapser then
18079: LD_VAR 0 1
18083: PPUSH
18084: CALL_OW 264
18088: PUSH
18089: LD_INT 49
18091: EQUAL
18092: IFFALSE 18130
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) else
18094: LD_VAR 0 1
18098: PPUSH
18099: LD_INT 81
18101: PUSH
18102: LD_INT 3
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PPUSH
18109: CALL_OW 69
18113: PPUSH
18114: LD_VAR 0 1
18118: PPUSH
18119: CALL_OW 74
18123: PPUSH
18124: CALL_OW 112
18128: GO 18164
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18130: LD_VAR 0 1
18134: PPUSH
18135: LD_INT 81
18137: PUSH
18138: LD_INT 3
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PPUSH
18145: CALL_OW 69
18149: PPUSH
18150: LD_VAR 0 1
18154: PPUSH
18155: CALL_OW 74
18159: PPUSH
18160: CALL_OW 115
// end else
18164: GO 18193
// if IsDead ( i ) then
18166: LD_VAR 0 1
18170: PPUSH
18171: CALL_OW 301
18175: IFFALSE 18193
// tmp := tmp diff i ;
18177: LD_ADDR_VAR 0 3
18181: PUSH
18182: LD_VAR 0 3
18186: PUSH
18187: LD_VAR 0 1
18191: DIFF
18192: ST_TO_ADDR
// end ;
18193: GO 18061
18195: POP
18196: POP
// until not tmp ;
18197: LD_VAR 0 3
18201: NOT
18202: IFFALSE 18044
// end ;
18204: PPOPN 5
18206: END
// every 12 12$30 + 11 11$30 trigger game do var i , base , tmp , target ;
18207: LD_EXP 3
18211: IFFALSE 18593
18213: GO 18215
18215: DISABLE
18216: LD_INT 0
18218: PPUSH
18219: PPUSH
18220: PPUSH
18221: PPUSH
// begin enable ;
18222: ENABLE
// base := mc_amer ;
18223: LD_ADDR_VAR 0 2
18227: PUSH
18228: LD_EXP 5
18232: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_btype , b_factory ] ] ) then
18233: LD_INT 22
18235: PUSH
18236: LD_INT 4
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 23
18245: PUSH
18246: LD_INT 1
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 30
18255: PUSH
18256: LD_INT 3
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: LIST
18267: PPUSH
18268: CALL_OW 69
18272: NOT
18273: IFFALSE 18277
// exit ;
18275: GO 18593
// MC_InsertProduceList ( base , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_laser ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] ] ) ;
18277: LD_VAR 0 2
18281: PPUSH
18282: LD_INT 3
18284: PUSH
18285: LD_INT 1
18287: PUSH
18288: LD_INT 2
18290: PUSH
18291: LD_INT 5
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 3
18302: PUSH
18303: LD_INT 1
18305: PUSH
18306: LD_INT 2
18308: PUSH
18309: LD_INT 9
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 3
18320: PUSH
18321: LD_INT 1
18323: PUSH
18324: LD_INT 2
18326: PUSH
18327: LD_INT 7
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: PUSH
18336: LD_INT 3
18338: PUSH
18339: LD_INT 1
18341: PUSH
18342: LD_INT 2
18344: PUSH
18345: LD_INT 7
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 3
18356: PUSH
18357: LD_INT 1
18359: PUSH
18360: LD_INT 2
18362: PUSH
18363: LD_INT 7
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: PPUSH
18379: CALL 79498 0 2
// repeat wait ( 0 0$1 ) ;
18383: LD_INT 35
18385: PPUSH
18386: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 5 or tick mod 10 10$00 = 0 ;
18390: LD_VAR 0 2
18394: PPUSH
18395: LD_INT 1
18397: PPUSH
18398: CALL 80916 0 2
18402: PUSH
18403: LD_INT 5
18405: GREATEREQUAL
18406: PUSH
18407: LD_OWVAR 1
18411: PUSH
18412: LD_INT 21000
18414: MOD
18415: PUSH
18416: LD_INT 0
18418: EQUAL
18419: OR
18420: IFFALSE 18383
// wait ( 0 0$30 ) ;
18422: LD_INT 1050
18424: PPUSH
18425: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
18429: LD_ADDR_VAR 0 3
18433: PUSH
18434: LD_VAR 0 2
18438: PPUSH
18439: LD_INT 1
18441: PPUSH
18442: CALL 80916 0 2
18446: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
18447: LD_ADDR_EXP 64
18451: PUSH
18452: LD_EXP 64
18456: PPUSH
18457: LD_VAR 0 2
18461: PPUSH
18462: LD_EXP 64
18466: PUSH
18467: LD_VAR 0 2
18471: ARRAY
18472: PUSH
18473: LD_VAR 0 3
18477: DIFF
18478: PPUSH
18479: CALL_OW 1
18483: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18484: LD_INT 35
18486: PPUSH
18487: CALL_OW 67
// for i in tmp do
18491: LD_ADDR_VAR 0 1
18495: PUSH
18496: LD_VAR 0 3
18500: PUSH
18501: FOR_IN
18502: IFFALSE 18584
// begin if GetLives ( i ) > 251 then
18504: LD_VAR 0 1
18508: PPUSH
18509: CALL_OW 256
18513: PUSH
18514: LD_INT 251
18516: GREATER
18517: IFFALSE 18555
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) else
18519: LD_VAR 0 1
18523: PPUSH
18524: LD_INT 81
18526: PUSH
18527: LD_INT 4
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PPUSH
18534: CALL_OW 69
18538: PPUSH
18539: LD_VAR 0 1
18543: PPUSH
18544: CALL_OW 74
18548: PPUSH
18549: CALL_OW 115
18553: GO 18582
// if IsDead ( i ) then
18555: LD_VAR 0 1
18559: PPUSH
18560: CALL_OW 301
18564: IFFALSE 18582
// tmp := tmp diff i ;
18566: LD_ADDR_VAR 0 3
18570: PUSH
18571: LD_VAR 0 3
18575: PUSH
18576: LD_VAR 0 1
18580: DIFF
18581: ST_TO_ADDR
// end ;
18582: GO 18501
18584: POP
18585: POP
// until not tmp ;
18586: LD_VAR 0 3
18590: NOT
18591: IFFALSE 18484
// end ; end_of_file
18593: PPOPN 4
18595: END
// export function CustomEvent ( event ) ; begin
18596: LD_INT 0
18598: PPUSH
// end ;
18599: LD_VAR 0 2
18603: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 then
18604: LD_VAR 0 1
18608: PUSH
18609: LD_INT 1
18611: EQUAL
18612: PUSH
18613: LD_VAR 0 2
18617: PUSH
18618: LD_INT 4
18620: EQUAL
18621: AND
18622: IFFALSE 18650
// begin SayRadio ( Powell , DP-Lost ) ;
18624: LD_EXP 12
18628: PPUSH
18629: LD_STRING DP-Lost
18631: PPUSH
18632: CALL_OW 94
// wait ( 0 0$2 ) ;
18636: LD_INT 70
18638: PPUSH
18639: CALL_OW 67
// YouLost ( FriendlyFire ) ;
18643: LD_STRING FriendlyFire
18645: PPUSH
18646: CALL_OW 104
// end ; end ;
18650: PPOPN 2
18652: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18653: LD_VAR 0 1
18657: PPUSH
18658: CALL 96893 0 1
// if GameType = 1 then
18662: LD_EXP 2
18666: PUSH
18667: LD_INT 1
18669: EQUAL
18670: IFFALSE 18905
// begin if un = playerCommander then
18672: LD_VAR 0 1
18676: PUSH
18677: LD_EXP 9
18681: EQUAL
18682: IFFALSE 18691
// YouLost ( commanderDied ) ;
18684: LD_STRING commanderDied
18686: PPUSH
18687: CALL_OW 104
// if un = allyCommander then
18691: LD_VAR 0 1
18695: PUSH
18696: LD_EXP 11
18700: EQUAL
18701: IFFALSE 18710
// YouLost ( Theta ) ;
18703: LD_STRING Theta
18705: PPUSH
18706: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18710: LD_VAR 0 1
18714: PUSH
18715: LD_INT 22
18717: PUSH
18718: LD_INT 8
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PUSH
18725: LD_INT 2
18727: PUSH
18728: LD_INT 21
18730: PUSH
18731: LD_INT 1
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: LD_INT 21
18740: PUSH
18741: LD_INT 3
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: LIST
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PPUSH
18757: CALL_OW 69
18761: IN
18762: IFFALSE 18778
// legDestCounter := legDestCounter + 1 ;
18764: LD_ADDR_EXP 18
18768: PUSH
18769: LD_EXP 18
18773: PUSH
18774: LD_INT 1
18776: PLUS
18777: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18778: LD_VAR 0 1
18782: PUSH
18783: LD_INT 22
18785: PUSH
18786: LD_INT 4
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 2
18795: PUSH
18796: LD_INT 21
18798: PUSH
18799: LD_INT 1
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 21
18808: PUSH
18809: LD_INT 3
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: LIST
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PPUSH
18825: CALL_OW 69
18829: IN
18830: IFFALSE 18846
// allyDestCounter := allyDestCounter + 1 ;
18832: LD_ADDR_EXP 22
18836: PUSH
18837: LD_EXP 22
18841: PUSH
18842: LD_INT 1
18844: PLUS
18845: ST_TO_ADDR
// if un in ruOutpost then
18846: LD_VAR 0 1
18850: PUSH
18851: LD_EXP 14
18855: IN
18856: IFFALSE 18905
// begin ruOutpost := ruOutpost diff un ;
18858: LD_ADDR_EXP 14
18862: PUSH
18863: LD_EXP 14
18867: PUSH
18868: LD_VAR 0 1
18872: DIFF
18873: ST_TO_ADDR
// ruEscape := Replace ( ruEscape , 1 , ruEscape [ 1 ] + 1 ) ;
18874: LD_ADDR_EXP 15
18878: PUSH
18879: LD_EXP 15
18883: PPUSH
18884: LD_INT 1
18886: PPUSH
18887: LD_EXP 15
18891: PUSH
18892: LD_INT 1
18894: ARRAY
18895: PUSH
18896: LD_INT 1
18898: PLUS
18899: PPUSH
18900: CALL_OW 1
18904: ST_TO_ADDR
// end ; end ; MCE_UnitDestroyed ( un ) ;
18905: LD_VAR 0 1
18909: PPUSH
18910: CALL 82890 0 1
// end ;
18914: PPOPN 1
18916: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
18917: LD_VAR 0 1
18921: PPUSH
18922: LD_VAR 0 2
18926: PPUSH
18927: CALL 85224 0 2
// end ;
18931: PPOPN 2
18933: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
18934: LD_VAR 0 1
18938: PPUSH
18939: CALL 84292 0 1
// end ;
18943: PPOPN 1
18945: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
18946: LD_VAR 0 1
18950: PPUSH
18951: CALL 84533 0 1
// end ;
18955: PPOPN 1
18957: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_LasDouble and GetSide ( lab ) = 1 then
18958: LD_VAR 0 1
18962: PUSH
18963: LD_INT 14
18965: EQUAL
18966: PUSH
18967: LD_VAR 0 2
18971: PPUSH
18972: CALL_OW 255
18976: PUSH
18977: LD_INT 1
18979: EQUAL
18980: AND
18981: IFFALSE 19022
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Laser ) ;
18983: LD_EXP 9
18987: PPUSH
18988: LD_STRING D
18990: PUSH
18991: LD_STRING I
18993: PUSH
18994: LD_STRING J
18996: PUSH
18997: LD_STRING S
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: LIST
19004: PUSH
19005: LD_EXP 25
19009: ARRAY
19010: STR
19011: PUSH
19012: LD_STRING -1-Laser
19014: STR
19015: PPUSH
19016: CALL_OW 88
// exit ;
19020: GO 19164
// end ; if tech = tech_MatDet and GetSide ( lab ) = 1 then
19022: LD_VAR 0 1
19026: PUSH
19027: LD_INT 7
19029: EQUAL
19030: PUSH
19031: LD_VAR 0 2
19035: PPUSH
19036: CALL_OW 255
19040: PUSH
19041: LD_INT 1
19043: EQUAL
19044: AND
19045: IFFALSE 19086
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Materialization ) ;
19047: LD_EXP 9
19051: PPUSH
19052: LD_STRING D
19054: PUSH
19055: LD_STRING I
19057: PUSH
19058: LD_STRING J
19060: PUSH
19061: LD_STRING S
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: LIST
19068: PUSH
19069: LD_EXP 25
19073: ARRAY
19074: STR
19075: PUSH
19076: LD_STRING -1-Materialization
19078: STR
19079: PPUSH
19080: CALL_OW 88
// exit ;
19084: GO 19164
// end ; if tech = tech_SibFiss and GetSide ( lab ) = 1 then
19086: LD_VAR 0 1
19090: PUSH
19091: LD_INT 25
19093: EQUAL
19094: PUSH
19095: LD_VAR 0 2
19099: PPUSH
19100: CALL_OW 255
19104: PUSH
19105: LD_INT 1
19107: EQUAL
19108: AND
19109: IFFALSE 19150
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Rocket ) ;
19111: LD_EXP 9
19115: PPUSH
19116: LD_STRING D
19118: PUSH
19119: LD_STRING I
19121: PUSH
19122: LD_STRING J
19124: PUSH
19125: LD_STRING S
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: LIST
19132: PUSH
19133: LD_EXP 25
19137: ARRAY
19138: STR
19139: PUSH
19140: LD_STRING -1-Rocket
19142: STR
19143: PPUSH
19144: CALL_OW 88
// exit ;
19148: GO 19164
// end ; MCE_ResearchComplete ( tech , lab ) ;
19150: LD_VAR 0 1
19154: PPUSH
19155: LD_VAR 0 2
19159: PPUSH
19160: CALL 82586 0 2
// end ;
19164: PPOPN 2
19166: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
19167: LD_VAR 0 1
19171: PPUSH
19172: LD_VAR 0 2
19176: PPUSH
19177: LD_VAR 0 3
19181: PPUSH
19182: LD_VAR 0 4
19186: PPUSH
19187: LD_VAR 0 5
19191: PPUSH
19192: CALL 82206 0 5
// end ;
19196: PPOPN 5
19198: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
19199: LD_VAR 0 1
19203: PPUSH
19204: LD_VAR 0 2
19208: PPUSH
19209: CALL 81802 0 2
// end ;
19213: PPOPN 2
19215: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
19216: LD_VAR 0 1
19220: PPUSH
19221: LD_VAR 0 2
19225: PPUSH
19226: LD_VAR 0 3
19230: PPUSH
19231: LD_VAR 0 4
19235: PPUSH
19236: CALL 81640 0 4
// end ;
19240: PPOPN 4
19242: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
19243: LD_VAR 0 1
19247: PPUSH
19248: LD_VAR 0 2
19252: PPUSH
19253: LD_VAR 0 3
19257: PPUSH
19258: CALL 81415 0 3
// end ;
19262: PPOPN 3
19264: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
19265: LD_VAR 0 1
19269: PPUSH
19270: LD_VAR 0 2
19274: PPUSH
19275: CALL 81300 0 2
// end ;
19279: PPOPN 2
19281: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
19282: LD_VAR 0 1
19286: PPUSH
19287: LD_VAR 0 2
19291: PPUSH
19292: CALL 85485 0 2
// end ;
19296: PPOPN 2
19298: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
19299: LD_VAR 0 1
19303: PPUSH
19304: LD_VAR 0 2
19308: PPUSH
19309: LD_VAR 0 3
19313: PPUSH
19314: LD_VAR 0 4
19318: PPUSH
19319: CALL 85701 0 4
// end ;
19323: PPOPN 4
19325: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
19326: LD_VAR 0 1
19330: PPUSH
19331: LD_VAR 0 2
19335: PPUSH
19336: CALL 81109 0 2
// end ;
19340: PPOPN 2
19342: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
19343: LD_VAR 0 1
19347: PPUSH
19348: CALL 96999 0 1
// end ; end_of_file
19352: PPOPN 1
19354: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19355: LD_INT 0
19357: PPUSH
19358: PPUSH
// if exist_mode then
19359: LD_VAR 0 2
19363: IFFALSE 19388
// unit := CreateCharacter ( prefix & ident ) else
19365: LD_ADDR_VAR 0 5
19369: PUSH
19370: LD_VAR 0 3
19374: PUSH
19375: LD_VAR 0 1
19379: STR
19380: PPUSH
19381: CALL_OW 34
19385: ST_TO_ADDR
19386: GO 19403
// unit := NewCharacter ( ident ) ;
19388: LD_ADDR_VAR 0 5
19392: PUSH
19393: LD_VAR 0 1
19397: PPUSH
19398: CALL_OW 25
19402: ST_TO_ADDR
// result := unit ;
19403: LD_ADDR_VAR 0 4
19407: PUSH
19408: LD_VAR 0 5
19412: ST_TO_ADDR
// end ;
19413: LD_VAR 0 4
19417: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19418: LD_INT 0
19420: PPUSH
19421: PPUSH
// if not side or not nation then
19422: LD_VAR 0 1
19426: NOT
19427: PUSH
19428: LD_VAR 0 2
19432: NOT
19433: OR
19434: IFFALSE 19438
// exit ;
19436: GO 20202
// case nation of nation_american :
19438: LD_VAR 0 2
19442: PUSH
19443: LD_INT 1
19445: DOUBLE
19446: EQUAL
19447: IFTRUE 19451
19449: GO 19665
19451: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19452: LD_ADDR_VAR 0 4
19456: PUSH
19457: LD_INT 35
19459: PUSH
19460: LD_INT 45
19462: PUSH
19463: LD_INT 46
19465: PUSH
19466: LD_INT 47
19468: PUSH
19469: LD_INT 82
19471: PUSH
19472: LD_INT 83
19474: PUSH
19475: LD_INT 84
19477: PUSH
19478: LD_INT 85
19480: PUSH
19481: LD_INT 86
19483: PUSH
19484: LD_INT 1
19486: PUSH
19487: LD_INT 2
19489: PUSH
19490: LD_INT 6
19492: PUSH
19493: LD_INT 15
19495: PUSH
19496: LD_INT 16
19498: PUSH
19499: LD_INT 7
19501: PUSH
19502: LD_INT 12
19504: PUSH
19505: LD_INT 13
19507: PUSH
19508: LD_INT 10
19510: PUSH
19511: LD_INT 14
19513: PUSH
19514: LD_INT 20
19516: PUSH
19517: LD_INT 21
19519: PUSH
19520: LD_INT 22
19522: PUSH
19523: LD_INT 25
19525: PUSH
19526: LD_INT 32
19528: PUSH
19529: LD_INT 27
19531: PUSH
19532: LD_INT 36
19534: PUSH
19535: LD_INT 69
19537: PUSH
19538: LD_INT 39
19540: PUSH
19541: LD_INT 34
19543: PUSH
19544: LD_INT 40
19546: PUSH
19547: LD_INT 48
19549: PUSH
19550: LD_INT 49
19552: PUSH
19553: LD_INT 50
19555: PUSH
19556: LD_INT 51
19558: PUSH
19559: LD_INT 52
19561: PUSH
19562: LD_INT 53
19564: PUSH
19565: LD_INT 54
19567: PUSH
19568: LD_INT 55
19570: PUSH
19571: LD_INT 56
19573: PUSH
19574: LD_INT 57
19576: PUSH
19577: LD_INT 58
19579: PUSH
19580: LD_INT 59
19582: PUSH
19583: LD_INT 60
19585: PUSH
19586: LD_INT 61
19588: PUSH
19589: LD_INT 62
19591: PUSH
19592: LD_INT 80
19594: PUSH
19595: LD_INT 82
19597: PUSH
19598: LD_INT 83
19600: PUSH
19601: LD_INT 84
19603: PUSH
19604: LD_INT 85
19606: PUSH
19607: LD_INT 86
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: ST_TO_ADDR
19663: GO 20126
19665: LD_INT 2
19667: DOUBLE
19668: EQUAL
19669: IFTRUE 19673
19671: GO 19895
19673: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
19674: LD_ADDR_VAR 0 4
19678: PUSH
19679: LD_INT 35
19681: PUSH
19682: LD_INT 45
19684: PUSH
19685: LD_INT 46
19687: PUSH
19688: LD_INT 47
19690: PUSH
19691: LD_INT 82
19693: PUSH
19694: LD_INT 83
19696: PUSH
19697: LD_INT 84
19699: PUSH
19700: LD_INT 85
19702: PUSH
19703: LD_INT 87
19705: PUSH
19706: LD_INT 70
19708: PUSH
19709: LD_INT 1
19711: PUSH
19712: LD_INT 11
19714: PUSH
19715: LD_INT 3
19717: PUSH
19718: LD_INT 4
19720: PUSH
19721: LD_INT 5
19723: PUSH
19724: LD_INT 6
19726: PUSH
19727: LD_INT 15
19729: PUSH
19730: LD_INT 18
19732: PUSH
19733: LD_INT 7
19735: PUSH
19736: LD_INT 17
19738: PUSH
19739: LD_INT 8
19741: PUSH
19742: LD_INT 20
19744: PUSH
19745: LD_INT 21
19747: PUSH
19748: LD_INT 22
19750: PUSH
19751: LD_INT 72
19753: PUSH
19754: LD_INT 26
19756: PUSH
19757: LD_INT 69
19759: PUSH
19760: LD_INT 39
19762: PUSH
19763: LD_INT 40
19765: PUSH
19766: LD_INT 41
19768: PUSH
19769: LD_INT 42
19771: PUSH
19772: LD_INT 43
19774: PUSH
19775: LD_INT 48
19777: PUSH
19778: LD_INT 49
19780: PUSH
19781: LD_INT 50
19783: PUSH
19784: LD_INT 51
19786: PUSH
19787: LD_INT 52
19789: PUSH
19790: LD_INT 53
19792: PUSH
19793: LD_INT 54
19795: PUSH
19796: LD_INT 55
19798: PUSH
19799: LD_INT 56
19801: PUSH
19802: LD_INT 60
19804: PUSH
19805: LD_INT 61
19807: PUSH
19808: LD_INT 62
19810: PUSH
19811: LD_INT 66
19813: PUSH
19814: LD_INT 67
19816: PUSH
19817: LD_INT 68
19819: PUSH
19820: LD_INT 81
19822: PUSH
19823: LD_INT 82
19825: PUSH
19826: LD_INT 83
19828: PUSH
19829: LD_INT 84
19831: PUSH
19832: LD_INT 85
19834: PUSH
19835: LD_INT 87
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: ST_TO_ADDR
19893: GO 20126
19895: LD_INT 3
19897: DOUBLE
19898: EQUAL
19899: IFTRUE 19903
19901: GO 20125
19903: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
19904: LD_ADDR_VAR 0 4
19908: PUSH
19909: LD_INT 46
19911: PUSH
19912: LD_INT 47
19914: PUSH
19915: LD_INT 1
19917: PUSH
19918: LD_INT 2
19920: PUSH
19921: LD_INT 82
19923: PUSH
19924: LD_INT 83
19926: PUSH
19927: LD_INT 84
19929: PUSH
19930: LD_INT 85
19932: PUSH
19933: LD_INT 86
19935: PUSH
19936: LD_INT 11
19938: PUSH
19939: LD_INT 9
19941: PUSH
19942: LD_INT 20
19944: PUSH
19945: LD_INT 19
19947: PUSH
19948: LD_INT 21
19950: PUSH
19951: LD_INT 24
19953: PUSH
19954: LD_INT 22
19956: PUSH
19957: LD_INT 25
19959: PUSH
19960: LD_INT 28
19962: PUSH
19963: LD_INT 29
19965: PUSH
19966: LD_INT 30
19968: PUSH
19969: LD_INT 31
19971: PUSH
19972: LD_INT 37
19974: PUSH
19975: LD_INT 38
19977: PUSH
19978: LD_INT 32
19980: PUSH
19981: LD_INT 27
19983: PUSH
19984: LD_INT 33
19986: PUSH
19987: LD_INT 69
19989: PUSH
19990: LD_INT 39
19992: PUSH
19993: LD_INT 34
19995: PUSH
19996: LD_INT 40
19998: PUSH
19999: LD_INT 71
20001: PUSH
20002: LD_INT 23
20004: PUSH
20005: LD_INT 44
20007: PUSH
20008: LD_INT 48
20010: PUSH
20011: LD_INT 49
20013: PUSH
20014: LD_INT 50
20016: PUSH
20017: LD_INT 51
20019: PUSH
20020: LD_INT 52
20022: PUSH
20023: LD_INT 53
20025: PUSH
20026: LD_INT 54
20028: PUSH
20029: LD_INT 55
20031: PUSH
20032: LD_INT 56
20034: PUSH
20035: LD_INT 57
20037: PUSH
20038: LD_INT 58
20040: PUSH
20041: LD_INT 59
20043: PUSH
20044: LD_INT 63
20046: PUSH
20047: LD_INT 64
20049: PUSH
20050: LD_INT 65
20052: PUSH
20053: LD_INT 82
20055: PUSH
20056: LD_INT 83
20058: PUSH
20059: LD_INT 84
20061: PUSH
20062: LD_INT 85
20064: PUSH
20065: LD_INT 86
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: ST_TO_ADDR
20123: GO 20126
20125: POP
// if state > - 1 and state < 3 then
20126: LD_VAR 0 3
20130: PUSH
20131: LD_INT 1
20133: NEG
20134: GREATER
20135: PUSH
20136: LD_VAR 0 3
20140: PUSH
20141: LD_INT 3
20143: LESS
20144: AND
20145: IFFALSE 20202
// for i in result do
20147: LD_ADDR_VAR 0 5
20151: PUSH
20152: LD_VAR 0 4
20156: PUSH
20157: FOR_IN
20158: IFFALSE 20200
// if GetTech ( i , side ) <> state then
20160: LD_VAR 0 5
20164: PPUSH
20165: LD_VAR 0 1
20169: PPUSH
20170: CALL_OW 321
20174: PUSH
20175: LD_VAR 0 3
20179: NONEQUAL
20180: IFFALSE 20198
// result := result diff i ;
20182: LD_ADDR_VAR 0 4
20186: PUSH
20187: LD_VAR 0 4
20191: PUSH
20192: LD_VAR 0 5
20196: DIFF
20197: ST_TO_ADDR
20198: GO 20157
20200: POP
20201: POP
// end ;
20202: LD_VAR 0 4
20206: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20207: LD_INT 0
20209: PPUSH
20210: PPUSH
20211: PPUSH
// result := true ;
20212: LD_ADDR_VAR 0 3
20216: PUSH
20217: LD_INT 1
20219: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20220: LD_ADDR_VAR 0 5
20224: PUSH
20225: LD_VAR 0 2
20229: PPUSH
20230: CALL_OW 480
20234: ST_TO_ADDR
// if not tmp then
20235: LD_VAR 0 5
20239: NOT
20240: IFFALSE 20244
// exit ;
20242: GO 20293
// for i in tmp do
20244: LD_ADDR_VAR 0 4
20248: PUSH
20249: LD_VAR 0 5
20253: PUSH
20254: FOR_IN
20255: IFFALSE 20291
// if GetTech ( i , side ) <> state_researched then
20257: LD_VAR 0 4
20261: PPUSH
20262: LD_VAR 0 1
20266: PPUSH
20267: CALL_OW 321
20271: PUSH
20272: LD_INT 2
20274: NONEQUAL
20275: IFFALSE 20289
// begin result := false ;
20277: LD_ADDR_VAR 0 3
20281: PUSH
20282: LD_INT 0
20284: ST_TO_ADDR
// exit ;
20285: POP
20286: POP
20287: GO 20293
// end ;
20289: GO 20254
20291: POP
20292: POP
// end ;
20293: LD_VAR 0 3
20297: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20298: LD_INT 0
20300: PPUSH
20301: PPUSH
20302: PPUSH
20303: PPUSH
20304: PPUSH
20305: PPUSH
20306: PPUSH
20307: PPUSH
20308: PPUSH
20309: PPUSH
20310: PPUSH
20311: PPUSH
20312: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20313: LD_VAR 0 1
20317: NOT
20318: PUSH
20319: LD_VAR 0 1
20323: PPUSH
20324: CALL_OW 257
20328: PUSH
20329: LD_INT 9
20331: NONEQUAL
20332: OR
20333: IFFALSE 20337
// exit ;
20335: GO 20910
// side := GetSide ( unit ) ;
20337: LD_ADDR_VAR 0 9
20341: PUSH
20342: LD_VAR 0 1
20346: PPUSH
20347: CALL_OW 255
20351: ST_TO_ADDR
// tech_space := tech_spacanom ;
20352: LD_ADDR_VAR 0 12
20356: PUSH
20357: LD_INT 29
20359: ST_TO_ADDR
// tech_time := tech_taurad ;
20360: LD_ADDR_VAR 0 13
20364: PUSH
20365: LD_INT 28
20367: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20368: LD_ADDR_VAR 0 11
20372: PUSH
20373: LD_VAR 0 1
20377: PPUSH
20378: CALL_OW 310
20382: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20383: LD_VAR 0 11
20387: PPUSH
20388: CALL_OW 247
20392: PUSH
20393: LD_INT 2
20395: EQUAL
20396: IFFALSE 20400
// exit ;
20398: GO 20910
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20400: LD_ADDR_VAR 0 8
20404: PUSH
20405: LD_INT 81
20407: PUSH
20408: LD_VAR 0 9
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: LD_INT 3
20419: PUSH
20420: LD_INT 21
20422: PUSH
20423: LD_INT 3
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PPUSH
20438: CALL_OW 69
20442: ST_TO_ADDR
// if not tmp then
20443: LD_VAR 0 8
20447: NOT
20448: IFFALSE 20452
// exit ;
20450: GO 20910
// if in_unit then
20452: LD_VAR 0 11
20456: IFFALSE 20480
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20458: LD_ADDR_VAR 0 10
20462: PUSH
20463: LD_VAR 0 8
20467: PPUSH
20468: LD_VAR 0 11
20472: PPUSH
20473: CALL_OW 74
20477: ST_TO_ADDR
20478: GO 20500
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20480: LD_ADDR_VAR 0 10
20484: PUSH
20485: LD_VAR 0 8
20489: PPUSH
20490: LD_VAR 0 1
20494: PPUSH
20495: CALL_OW 74
20499: ST_TO_ADDR
// if not enemy then
20500: LD_VAR 0 10
20504: NOT
20505: IFFALSE 20509
// exit ;
20507: GO 20910
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20509: LD_VAR 0 11
20513: PUSH
20514: LD_VAR 0 11
20518: PPUSH
20519: LD_VAR 0 10
20523: PPUSH
20524: CALL_OW 296
20528: PUSH
20529: LD_INT 13
20531: GREATER
20532: AND
20533: PUSH
20534: LD_VAR 0 1
20538: PPUSH
20539: LD_VAR 0 10
20543: PPUSH
20544: CALL_OW 296
20548: PUSH
20549: LD_INT 12
20551: GREATER
20552: OR
20553: IFFALSE 20557
// exit ;
20555: GO 20910
// missile := [ 1 ] ;
20557: LD_ADDR_VAR 0 14
20561: PUSH
20562: LD_INT 1
20564: PUSH
20565: EMPTY
20566: LIST
20567: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20568: LD_VAR 0 9
20572: PPUSH
20573: LD_VAR 0 12
20577: PPUSH
20578: CALL_OW 325
20582: IFFALSE 20611
// missile := Insert ( missile , missile + 1 , 2 ) ;
20584: LD_ADDR_VAR 0 14
20588: PUSH
20589: LD_VAR 0 14
20593: PPUSH
20594: LD_VAR 0 14
20598: PUSH
20599: LD_INT 1
20601: PLUS
20602: PPUSH
20603: LD_INT 2
20605: PPUSH
20606: CALL_OW 2
20610: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20611: LD_VAR 0 9
20615: PPUSH
20616: LD_VAR 0 13
20620: PPUSH
20621: CALL_OW 325
20625: PUSH
20626: LD_VAR 0 10
20630: PPUSH
20631: CALL_OW 255
20635: PPUSH
20636: LD_VAR 0 13
20640: PPUSH
20641: CALL_OW 325
20645: NOT
20646: AND
20647: IFFALSE 20676
// missile := Insert ( missile , missile + 1 , 3 ) ;
20649: LD_ADDR_VAR 0 14
20653: PUSH
20654: LD_VAR 0 14
20658: PPUSH
20659: LD_VAR 0 14
20663: PUSH
20664: LD_INT 1
20666: PLUS
20667: PPUSH
20668: LD_INT 3
20670: PPUSH
20671: CALL_OW 2
20675: ST_TO_ADDR
// if missile < 2 then
20676: LD_VAR 0 14
20680: PUSH
20681: LD_INT 2
20683: LESS
20684: IFFALSE 20688
// exit ;
20686: GO 20910
// x := GetX ( enemy ) ;
20688: LD_ADDR_VAR 0 4
20692: PUSH
20693: LD_VAR 0 10
20697: PPUSH
20698: CALL_OW 250
20702: ST_TO_ADDR
// y := GetY ( enemy ) ;
20703: LD_ADDR_VAR 0 5
20707: PUSH
20708: LD_VAR 0 10
20712: PPUSH
20713: CALL_OW 251
20717: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20718: LD_ADDR_VAR 0 6
20722: PUSH
20723: LD_VAR 0 4
20727: PUSH
20728: LD_INT 1
20730: NEG
20731: PPUSH
20732: LD_INT 1
20734: PPUSH
20735: CALL_OW 12
20739: PLUS
20740: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20741: LD_ADDR_VAR 0 7
20745: PUSH
20746: LD_VAR 0 5
20750: PUSH
20751: LD_INT 1
20753: NEG
20754: PPUSH
20755: LD_INT 1
20757: PPUSH
20758: CALL_OW 12
20762: PLUS
20763: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20764: LD_VAR 0 6
20768: PPUSH
20769: LD_VAR 0 7
20773: PPUSH
20774: CALL_OW 488
20778: NOT
20779: IFFALSE 20801
// begin _x := x ;
20781: LD_ADDR_VAR 0 6
20785: PUSH
20786: LD_VAR 0 4
20790: ST_TO_ADDR
// _y := y ;
20791: LD_ADDR_VAR 0 7
20795: PUSH
20796: LD_VAR 0 5
20800: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20801: LD_ADDR_VAR 0 3
20805: PUSH
20806: LD_INT 1
20808: PPUSH
20809: LD_VAR 0 14
20813: PPUSH
20814: CALL_OW 12
20818: ST_TO_ADDR
// case i of 1 :
20819: LD_VAR 0 3
20823: PUSH
20824: LD_INT 1
20826: DOUBLE
20827: EQUAL
20828: IFTRUE 20832
20830: GO 20849
20832: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20833: LD_VAR 0 1
20837: PPUSH
20838: LD_VAR 0 10
20842: PPUSH
20843: CALL_OW 115
20847: GO 20910
20849: LD_INT 2
20851: DOUBLE
20852: EQUAL
20853: IFTRUE 20857
20855: GO 20879
20857: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20858: LD_VAR 0 1
20862: PPUSH
20863: LD_VAR 0 6
20867: PPUSH
20868: LD_VAR 0 7
20872: PPUSH
20873: CALL_OW 153
20877: GO 20910
20879: LD_INT 3
20881: DOUBLE
20882: EQUAL
20883: IFTRUE 20887
20885: GO 20909
20887: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20888: LD_VAR 0 1
20892: PPUSH
20893: LD_VAR 0 6
20897: PPUSH
20898: LD_VAR 0 7
20902: PPUSH
20903: CALL_OW 154
20907: GO 20910
20909: POP
// end ;
20910: LD_VAR 0 2
20914: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20915: LD_INT 0
20917: PPUSH
20918: PPUSH
20919: PPUSH
20920: PPUSH
20921: PPUSH
20922: PPUSH
// if not unit or not building then
20923: LD_VAR 0 1
20927: NOT
20928: PUSH
20929: LD_VAR 0 2
20933: NOT
20934: OR
20935: IFFALSE 20939
// exit ;
20937: GO 21097
// x := GetX ( building ) ;
20939: LD_ADDR_VAR 0 5
20943: PUSH
20944: LD_VAR 0 2
20948: PPUSH
20949: CALL_OW 250
20953: ST_TO_ADDR
// y := GetY ( building ) ;
20954: LD_ADDR_VAR 0 6
20958: PUSH
20959: LD_VAR 0 2
20963: PPUSH
20964: CALL_OW 251
20968: ST_TO_ADDR
// for i = 0 to 5 do
20969: LD_ADDR_VAR 0 4
20973: PUSH
20974: DOUBLE
20975: LD_INT 0
20977: DEC
20978: ST_TO_ADDR
20979: LD_INT 5
20981: PUSH
20982: FOR_TO
20983: IFFALSE 21095
// begin _x := ShiftX ( x , i , 3 ) ;
20985: LD_ADDR_VAR 0 7
20989: PUSH
20990: LD_VAR 0 5
20994: PPUSH
20995: LD_VAR 0 4
20999: PPUSH
21000: LD_INT 3
21002: PPUSH
21003: CALL_OW 272
21007: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21008: LD_ADDR_VAR 0 8
21012: PUSH
21013: LD_VAR 0 6
21017: PPUSH
21018: LD_VAR 0 4
21022: PPUSH
21023: LD_INT 3
21025: PPUSH
21026: CALL_OW 273
21030: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21031: LD_VAR 0 7
21035: PPUSH
21036: LD_VAR 0 8
21040: PPUSH
21041: CALL_OW 488
21045: NOT
21046: IFFALSE 21050
// continue ;
21048: GO 20982
// if HexInfo ( _x , _y ) = 0 then
21050: LD_VAR 0 7
21054: PPUSH
21055: LD_VAR 0 8
21059: PPUSH
21060: CALL_OW 428
21064: PUSH
21065: LD_INT 0
21067: EQUAL
21068: IFFALSE 21093
// begin ComMoveXY ( unit , _x , _y ) ;
21070: LD_VAR 0 1
21074: PPUSH
21075: LD_VAR 0 7
21079: PPUSH
21080: LD_VAR 0 8
21084: PPUSH
21085: CALL_OW 111
// exit ;
21089: POP
21090: POP
21091: GO 21097
// end ; end ;
21093: GO 20982
21095: POP
21096: POP
// end ;
21097: LD_VAR 0 3
21101: RET
// export function ScanBase ( side , base_area ) ; begin
21102: LD_INT 0
21104: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21105: LD_ADDR_VAR 0 3
21109: PUSH
21110: LD_VAR 0 2
21114: PPUSH
21115: LD_INT 81
21117: PUSH
21118: LD_VAR 0 1
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PPUSH
21127: CALL_OW 70
21131: ST_TO_ADDR
// end ;
21132: LD_VAR 0 3
21136: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21137: LD_INT 0
21139: PPUSH
21140: PPUSH
21141: PPUSH
21142: PPUSH
// result := false ;
21143: LD_ADDR_VAR 0 2
21147: PUSH
21148: LD_INT 0
21150: ST_TO_ADDR
// side := GetSide ( unit ) ;
21151: LD_ADDR_VAR 0 3
21155: PUSH
21156: LD_VAR 0 1
21160: PPUSH
21161: CALL_OW 255
21165: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21166: LD_ADDR_VAR 0 4
21170: PUSH
21171: LD_VAR 0 1
21175: PPUSH
21176: CALL_OW 248
21180: ST_TO_ADDR
// case nat of 1 :
21181: LD_VAR 0 4
21185: PUSH
21186: LD_INT 1
21188: DOUBLE
21189: EQUAL
21190: IFTRUE 21194
21192: GO 21205
21194: POP
// tech := tech_lassight ; 2 :
21195: LD_ADDR_VAR 0 5
21199: PUSH
21200: LD_INT 12
21202: ST_TO_ADDR
21203: GO 21244
21205: LD_INT 2
21207: DOUBLE
21208: EQUAL
21209: IFTRUE 21213
21211: GO 21224
21213: POP
// tech := tech_mortar ; 3 :
21214: LD_ADDR_VAR 0 5
21218: PUSH
21219: LD_INT 41
21221: ST_TO_ADDR
21222: GO 21244
21224: LD_INT 3
21226: DOUBLE
21227: EQUAL
21228: IFTRUE 21232
21230: GO 21243
21232: POP
// tech := tech_bazooka ; end ;
21233: LD_ADDR_VAR 0 5
21237: PUSH
21238: LD_INT 44
21240: ST_TO_ADDR
21241: GO 21244
21243: POP
// if Researched ( side , tech ) then
21244: LD_VAR 0 3
21248: PPUSH
21249: LD_VAR 0 5
21253: PPUSH
21254: CALL_OW 325
21258: IFFALSE 21285
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21260: LD_ADDR_VAR 0 2
21264: PUSH
21265: LD_INT 5
21267: PUSH
21268: LD_INT 8
21270: PUSH
21271: LD_INT 9
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: LIST
21278: PUSH
21279: LD_VAR 0 4
21283: ARRAY
21284: ST_TO_ADDR
// end ;
21285: LD_VAR 0 2
21289: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21290: LD_INT 0
21292: PPUSH
21293: PPUSH
21294: PPUSH
// if not mines then
21295: LD_VAR 0 2
21299: NOT
21300: IFFALSE 21304
// exit ;
21302: GO 21448
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21304: LD_ADDR_VAR 0 5
21308: PUSH
21309: LD_INT 81
21311: PUSH
21312: LD_VAR 0 1
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 3
21323: PUSH
21324: LD_INT 21
21326: PUSH
21327: LD_INT 3
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PPUSH
21342: CALL_OW 69
21346: ST_TO_ADDR
// for i in mines do
21347: LD_ADDR_VAR 0 4
21351: PUSH
21352: LD_VAR 0 2
21356: PUSH
21357: FOR_IN
21358: IFFALSE 21446
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21360: LD_VAR 0 4
21364: PUSH
21365: LD_INT 1
21367: ARRAY
21368: PPUSH
21369: LD_VAR 0 4
21373: PUSH
21374: LD_INT 2
21376: ARRAY
21377: PPUSH
21378: CALL_OW 458
21382: NOT
21383: IFFALSE 21387
// continue ;
21385: GO 21357
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21387: LD_VAR 0 4
21391: PUSH
21392: LD_INT 1
21394: ARRAY
21395: PPUSH
21396: LD_VAR 0 4
21400: PUSH
21401: LD_INT 2
21403: ARRAY
21404: PPUSH
21405: CALL_OW 428
21409: PUSH
21410: LD_VAR 0 5
21414: IN
21415: IFFALSE 21444
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21417: LD_VAR 0 4
21421: PUSH
21422: LD_INT 1
21424: ARRAY
21425: PPUSH
21426: LD_VAR 0 4
21430: PUSH
21431: LD_INT 2
21433: ARRAY
21434: PPUSH
21435: LD_VAR 0 1
21439: PPUSH
21440: CALL_OW 456
// end ;
21444: GO 21357
21446: POP
21447: POP
// end ;
21448: LD_VAR 0 3
21452: RET
// export function Count ( array ) ; var i ; begin
21453: LD_INT 0
21455: PPUSH
21456: PPUSH
// result := 0 ;
21457: LD_ADDR_VAR 0 2
21461: PUSH
21462: LD_INT 0
21464: ST_TO_ADDR
// for i in array do
21465: LD_ADDR_VAR 0 3
21469: PUSH
21470: LD_VAR 0 1
21474: PUSH
21475: FOR_IN
21476: IFFALSE 21500
// if i then
21478: LD_VAR 0 3
21482: IFFALSE 21498
// result := result + 1 ;
21484: LD_ADDR_VAR 0 2
21488: PUSH
21489: LD_VAR 0 2
21493: PUSH
21494: LD_INT 1
21496: PLUS
21497: ST_TO_ADDR
21498: GO 21475
21500: POP
21501: POP
// end ;
21502: LD_VAR 0 2
21506: RET
// export function IsEmpty ( building ) ; begin
21507: LD_INT 0
21509: PPUSH
// if not building then
21510: LD_VAR 0 1
21514: NOT
21515: IFFALSE 21519
// exit ;
21517: GO 21562
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
21519: LD_ADDR_VAR 0 2
21523: PUSH
21524: LD_VAR 0 1
21528: PUSH
21529: LD_INT 22
21531: PUSH
21532: LD_VAR 0 1
21536: PPUSH
21537: CALL_OW 255
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 58
21548: PUSH
21549: EMPTY
21550: LIST
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PPUSH
21556: CALL_OW 69
21560: IN
21561: ST_TO_ADDR
// end ;
21562: LD_VAR 0 2
21566: RET
// export function IsNotFull ( building ) ; begin
21567: LD_INT 0
21569: PPUSH
// if not building then
21570: LD_VAR 0 1
21574: NOT
21575: IFFALSE 21579
// exit ;
21577: GO 21598
// result := UnitsInside ( building ) < 6 ;
21579: LD_ADDR_VAR 0 2
21583: PUSH
21584: LD_VAR 0 1
21588: PPUSH
21589: CALL_OW 313
21593: PUSH
21594: LD_INT 6
21596: LESS
21597: ST_TO_ADDR
// end ;
21598: LD_VAR 0 2
21602: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
21603: LD_INT 0
21605: PPUSH
21606: PPUSH
21607: PPUSH
21608: PPUSH
// tmp := [ ] ;
21609: LD_ADDR_VAR 0 3
21613: PUSH
21614: EMPTY
21615: ST_TO_ADDR
// list := [ ] ;
21616: LD_ADDR_VAR 0 5
21620: PUSH
21621: EMPTY
21622: ST_TO_ADDR
// for i = 16 to 25 do
21623: LD_ADDR_VAR 0 4
21627: PUSH
21628: DOUBLE
21629: LD_INT 16
21631: DEC
21632: ST_TO_ADDR
21633: LD_INT 25
21635: PUSH
21636: FOR_TO
21637: IFFALSE 21710
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
21639: LD_ADDR_VAR 0 3
21643: PUSH
21644: LD_VAR 0 3
21648: PUSH
21649: LD_INT 22
21651: PUSH
21652: LD_VAR 0 1
21656: PPUSH
21657: CALL_OW 255
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: LD_INT 91
21668: PUSH
21669: LD_VAR 0 1
21673: PUSH
21674: LD_INT 6
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: LIST
21681: PUSH
21682: LD_INT 30
21684: PUSH
21685: LD_VAR 0 4
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: LIST
21698: PUSH
21699: EMPTY
21700: LIST
21701: PPUSH
21702: CALL_OW 69
21706: ADD
21707: ST_TO_ADDR
21708: GO 21636
21710: POP
21711: POP
// for i = 1 to tmp do
21712: LD_ADDR_VAR 0 4
21716: PUSH
21717: DOUBLE
21718: LD_INT 1
21720: DEC
21721: ST_TO_ADDR
21722: LD_VAR 0 3
21726: PUSH
21727: FOR_TO
21728: IFFALSE 21816
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
21730: LD_ADDR_VAR 0 5
21734: PUSH
21735: LD_VAR 0 5
21739: PUSH
21740: LD_VAR 0 3
21744: PUSH
21745: LD_VAR 0 4
21749: ARRAY
21750: PPUSH
21751: CALL_OW 266
21755: PUSH
21756: LD_VAR 0 3
21760: PUSH
21761: LD_VAR 0 4
21765: ARRAY
21766: PPUSH
21767: CALL_OW 250
21771: PUSH
21772: LD_VAR 0 3
21776: PUSH
21777: LD_VAR 0 4
21781: ARRAY
21782: PPUSH
21783: CALL_OW 251
21787: PUSH
21788: LD_VAR 0 3
21792: PUSH
21793: LD_VAR 0 4
21797: ARRAY
21798: PPUSH
21799: CALL_OW 254
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: PUSH
21810: EMPTY
21811: LIST
21812: ADD
21813: ST_TO_ADDR
21814: GO 21727
21816: POP
21817: POP
// result := list ;
21818: LD_ADDR_VAR 0 2
21822: PUSH
21823: LD_VAR 0 5
21827: ST_TO_ADDR
// end ;
21828: LD_VAR 0 2
21832: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
21833: LD_INT 0
21835: PPUSH
21836: PPUSH
21837: PPUSH
21838: PPUSH
21839: PPUSH
21840: PPUSH
21841: PPUSH
// if not factory then
21842: LD_VAR 0 1
21846: NOT
21847: IFFALSE 21851
// exit ;
21849: GO 22444
// if control = control_apeman then
21851: LD_VAR 0 4
21855: PUSH
21856: LD_INT 5
21858: EQUAL
21859: IFFALSE 21968
// begin tmp := UnitsInside ( factory ) ;
21861: LD_ADDR_VAR 0 8
21865: PUSH
21866: LD_VAR 0 1
21870: PPUSH
21871: CALL_OW 313
21875: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
21876: LD_VAR 0 8
21880: PPUSH
21881: LD_INT 25
21883: PUSH
21884: LD_INT 12
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PPUSH
21891: CALL_OW 72
21895: NOT
21896: IFFALSE 21906
// control := control_manual ;
21898: LD_ADDR_VAR 0 4
21902: PUSH
21903: LD_INT 1
21905: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
21906: LD_ADDR_VAR 0 8
21910: PUSH
21911: LD_VAR 0 1
21915: PPUSH
21916: CALL 21603 0 1
21920: ST_TO_ADDR
// if tmp then
21921: LD_VAR 0 8
21925: IFFALSE 21968
// begin for i in tmp do
21927: LD_ADDR_VAR 0 7
21931: PUSH
21932: LD_VAR 0 8
21936: PUSH
21937: FOR_IN
21938: IFFALSE 21966
// if i [ 1 ] = b_ext_radio then
21940: LD_VAR 0 7
21944: PUSH
21945: LD_INT 1
21947: ARRAY
21948: PUSH
21949: LD_INT 22
21951: EQUAL
21952: IFFALSE 21964
// begin control := control_remote ;
21954: LD_ADDR_VAR 0 4
21958: PUSH
21959: LD_INT 2
21961: ST_TO_ADDR
// break ;
21962: GO 21966
// end ;
21964: GO 21937
21966: POP
21967: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
21968: LD_VAR 0 1
21972: PPUSH
21973: LD_VAR 0 2
21977: PPUSH
21978: LD_VAR 0 3
21982: PPUSH
21983: LD_VAR 0 4
21987: PPUSH
21988: LD_VAR 0 5
21992: PPUSH
21993: CALL_OW 448
21997: IFFALSE 22032
// begin result := [ chassis , engine , control , weapon ] ;
21999: LD_ADDR_VAR 0 6
22003: PUSH
22004: LD_VAR 0 2
22008: PUSH
22009: LD_VAR 0 3
22013: PUSH
22014: LD_VAR 0 4
22018: PUSH
22019: LD_VAR 0 5
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: ST_TO_ADDR
// exit ;
22030: GO 22444
// end ; _chassis := AvailableChassisList ( factory ) ;
22032: LD_ADDR_VAR 0 9
22036: PUSH
22037: LD_VAR 0 1
22041: PPUSH
22042: CALL_OW 475
22046: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22047: LD_ADDR_VAR 0 11
22051: PUSH
22052: LD_VAR 0 1
22056: PPUSH
22057: CALL_OW 476
22061: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22062: LD_ADDR_VAR 0 12
22066: PUSH
22067: LD_VAR 0 1
22071: PPUSH
22072: CALL_OW 477
22076: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22077: LD_ADDR_VAR 0 10
22081: PUSH
22082: LD_VAR 0 1
22086: PPUSH
22087: CALL_OW 478
22091: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22092: LD_VAR 0 9
22096: NOT
22097: PUSH
22098: LD_VAR 0 11
22102: NOT
22103: OR
22104: PUSH
22105: LD_VAR 0 12
22109: NOT
22110: OR
22111: PUSH
22112: LD_VAR 0 10
22116: NOT
22117: OR
22118: IFFALSE 22153
// begin result := [ chassis , engine , control , weapon ] ;
22120: LD_ADDR_VAR 0 6
22124: PUSH
22125: LD_VAR 0 2
22129: PUSH
22130: LD_VAR 0 3
22134: PUSH
22135: LD_VAR 0 4
22139: PUSH
22140: LD_VAR 0 5
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: ST_TO_ADDR
// exit ;
22151: GO 22444
// end ; if not chassis in _chassis then
22153: LD_VAR 0 2
22157: PUSH
22158: LD_VAR 0 9
22162: IN
22163: NOT
22164: IFFALSE 22190
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22166: LD_ADDR_VAR 0 2
22170: PUSH
22171: LD_VAR 0 9
22175: PUSH
22176: LD_INT 1
22178: PPUSH
22179: LD_VAR 0 9
22183: PPUSH
22184: CALL_OW 12
22188: ARRAY
22189: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22190: LD_VAR 0 2
22194: PPUSH
22195: LD_VAR 0 3
22199: PPUSH
22200: CALL 22449 0 2
22204: NOT
22205: IFFALSE 22264
// repeat engine := _engine [ 1 ] ;
22207: LD_ADDR_VAR 0 3
22211: PUSH
22212: LD_VAR 0 11
22216: PUSH
22217: LD_INT 1
22219: ARRAY
22220: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22221: LD_ADDR_VAR 0 11
22225: PUSH
22226: LD_VAR 0 11
22230: PPUSH
22231: LD_INT 1
22233: PPUSH
22234: CALL_OW 3
22238: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22239: LD_VAR 0 2
22243: PPUSH
22244: LD_VAR 0 3
22248: PPUSH
22249: CALL 22449 0 2
22253: PUSH
22254: LD_VAR 0 11
22258: PUSH
22259: EMPTY
22260: EQUAL
22261: OR
22262: IFFALSE 22207
// if not control in _control then
22264: LD_VAR 0 4
22268: PUSH
22269: LD_VAR 0 12
22273: IN
22274: NOT
22275: IFFALSE 22301
// control := _control [ rand ( 1 , _control ) ] ;
22277: LD_ADDR_VAR 0 4
22281: PUSH
22282: LD_VAR 0 12
22286: PUSH
22287: LD_INT 1
22289: PPUSH
22290: LD_VAR 0 12
22294: PPUSH
22295: CALL_OW 12
22299: ARRAY
22300: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22301: LD_VAR 0 2
22305: PPUSH
22306: LD_VAR 0 5
22310: PPUSH
22311: CALL 22669 0 2
22315: NOT
22316: IFFALSE 22375
// repeat weapon := _weapon [ 1 ] ;
22318: LD_ADDR_VAR 0 5
22322: PUSH
22323: LD_VAR 0 10
22327: PUSH
22328: LD_INT 1
22330: ARRAY
22331: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22332: LD_ADDR_VAR 0 10
22336: PUSH
22337: LD_VAR 0 10
22341: PPUSH
22342: LD_INT 1
22344: PPUSH
22345: CALL_OW 3
22349: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22350: LD_VAR 0 2
22354: PPUSH
22355: LD_VAR 0 5
22359: PPUSH
22360: CALL 22669 0 2
22364: PUSH
22365: LD_VAR 0 10
22369: PUSH
22370: EMPTY
22371: EQUAL
22372: OR
22373: IFFALSE 22318
// result := [ ] ;
22375: LD_ADDR_VAR 0 6
22379: PUSH
22380: EMPTY
22381: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22382: LD_VAR 0 1
22386: PPUSH
22387: LD_VAR 0 2
22391: PPUSH
22392: LD_VAR 0 3
22396: PPUSH
22397: LD_VAR 0 4
22401: PPUSH
22402: LD_VAR 0 5
22406: PPUSH
22407: CALL_OW 448
22411: IFFALSE 22444
// result := [ chassis , engine , control , weapon ] ;
22413: LD_ADDR_VAR 0 6
22417: PUSH
22418: LD_VAR 0 2
22422: PUSH
22423: LD_VAR 0 3
22427: PUSH
22428: LD_VAR 0 4
22432: PUSH
22433: LD_VAR 0 5
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: ST_TO_ADDR
// end ;
22444: LD_VAR 0 6
22448: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22449: LD_INT 0
22451: PPUSH
// if not chassis or not engine then
22452: LD_VAR 0 1
22456: NOT
22457: PUSH
22458: LD_VAR 0 2
22462: NOT
22463: OR
22464: IFFALSE 22468
// exit ;
22466: GO 22664
// case engine of engine_solar :
22468: LD_VAR 0 2
22472: PUSH
22473: LD_INT 2
22475: DOUBLE
22476: EQUAL
22477: IFTRUE 22481
22479: GO 22519
22481: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
22482: LD_ADDR_VAR 0 3
22486: PUSH
22487: LD_INT 11
22489: PUSH
22490: LD_INT 12
22492: PUSH
22493: LD_INT 13
22495: PUSH
22496: LD_INT 14
22498: PUSH
22499: LD_INT 1
22501: PUSH
22502: LD_INT 2
22504: PUSH
22505: LD_INT 3
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: ST_TO_ADDR
22517: GO 22648
22519: LD_INT 1
22521: DOUBLE
22522: EQUAL
22523: IFTRUE 22527
22525: GO 22589
22527: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
22528: LD_ADDR_VAR 0 3
22532: PUSH
22533: LD_INT 11
22535: PUSH
22536: LD_INT 12
22538: PUSH
22539: LD_INT 13
22541: PUSH
22542: LD_INT 14
22544: PUSH
22545: LD_INT 1
22547: PUSH
22548: LD_INT 2
22550: PUSH
22551: LD_INT 3
22553: PUSH
22554: LD_INT 4
22556: PUSH
22557: LD_INT 5
22559: PUSH
22560: LD_INT 21
22562: PUSH
22563: LD_INT 23
22565: PUSH
22566: LD_INT 22
22568: PUSH
22569: LD_INT 24
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: ST_TO_ADDR
22587: GO 22648
22589: LD_INT 3
22591: DOUBLE
22592: EQUAL
22593: IFTRUE 22597
22595: GO 22647
22597: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22598: LD_ADDR_VAR 0 3
22602: PUSH
22603: LD_INT 13
22605: PUSH
22606: LD_INT 14
22608: PUSH
22609: LD_INT 2
22611: PUSH
22612: LD_INT 3
22614: PUSH
22615: LD_INT 4
22617: PUSH
22618: LD_INT 5
22620: PUSH
22621: LD_INT 21
22623: PUSH
22624: LD_INT 22
22626: PUSH
22627: LD_INT 23
22629: PUSH
22630: LD_INT 24
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: ST_TO_ADDR
22645: GO 22648
22647: POP
// result := ( chassis in result ) ;
22648: LD_ADDR_VAR 0 3
22652: PUSH
22653: LD_VAR 0 1
22657: PUSH
22658: LD_VAR 0 3
22662: IN
22663: ST_TO_ADDR
// end ;
22664: LD_VAR 0 3
22668: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
22669: LD_INT 0
22671: PPUSH
// if not chassis or not weapon then
22672: LD_VAR 0 1
22676: NOT
22677: PUSH
22678: LD_VAR 0 2
22682: NOT
22683: OR
22684: IFFALSE 22688
// exit ;
22686: GO 23714
// case weapon of us_machine_gun :
22688: LD_VAR 0 2
22692: PUSH
22693: LD_INT 2
22695: DOUBLE
22696: EQUAL
22697: IFTRUE 22701
22699: GO 22731
22701: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
22702: LD_ADDR_VAR 0 3
22706: PUSH
22707: LD_INT 1
22709: PUSH
22710: LD_INT 2
22712: PUSH
22713: LD_INT 3
22715: PUSH
22716: LD_INT 4
22718: PUSH
22719: LD_INT 5
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: ST_TO_ADDR
22729: GO 23698
22731: LD_INT 3
22733: DOUBLE
22734: EQUAL
22735: IFTRUE 22739
22737: GO 22769
22739: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
22740: LD_ADDR_VAR 0 3
22744: PUSH
22745: LD_INT 1
22747: PUSH
22748: LD_INT 2
22750: PUSH
22751: LD_INT 3
22753: PUSH
22754: LD_INT 4
22756: PUSH
22757: LD_INT 5
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: ST_TO_ADDR
22767: GO 23698
22769: LD_INT 11
22771: DOUBLE
22772: EQUAL
22773: IFTRUE 22777
22775: GO 22807
22777: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
22778: LD_ADDR_VAR 0 3
22782: PUSH
22783: LD_INT 1
22785: PUSH
22786: LD_INT 2
22788: PUSH
22789: LD_INT 3
22791: PUSH
22792: LD_INT 4
22794: PUSH
22795: LD_INT 5
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: ST_TO_ADDR
22805: GO 23698
22807: LD_INT 4
22809: DOUBLE
22810: EQUAL
22811: IFTRUE 22815
22813: GO 22841
22815: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
22816: LD_ADDR_VAR 0 3
22820: PUSH
22821: LD_INT 2
22823: PUSH
22824: LD_INT 3
22826: PUSH
22827: LD_INT 4
22829: PUSH
22830: LD_INT 5
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: ST_TO_ADDR
22839: GO 23698
22841: LD_INT 5
22843: DOUBLE
22844: EQUAL
22845: IFTRUE 22849
22847: GO 22875
22849: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
22850: LD_ADDR_VAR 0 3
22854: PUSH
22855: LD_INT 2
22857: PUSH
22858: LD_INT 3
22860: PUSH
22861: LD_INT 4
22863: PUSH
22864: LD_INT 5
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: ST_TO_ADDR
22873: GO 23698
22875: LD_INT 9
22877: DOUBLE
22878: EQUAL
22879: IFTRUE 22883
22881: GO 22909
22883: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
22884: LD_ADDR_VAR 0 3
22888: PUSH
22889: LD_INT 2
22891: PUSH
22892: LD_INT 3
22894: PUSH
22895: LD_INT 4
22897: PUSH
22898: LD_INT 5
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: ST_TO_ADDR
22907: GO 23698
22909: LD_INT 7
22911: DOUBLE
22912: EQUAL
22913: IFTRUE 22917
22915: GO 22943
22917: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
22918: LD_ADDR_VAR 0 3
22922: PUSH
22923: LD_INT 2
22925: PUSH
22926: LD_INT 3
22928: PUSH
22929: LD_INT 4
22931: PUSH
22932: LD_INT 5
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: ST_TO_ADDR
22941: GO 23698
22943: LD_INT 12
22945: DOUBLE
22946: EQUAL
22947: IFTRUE 22951
22949: GO 22977
22951: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
22952: LD_ADDR_VAR 0 3
22956: PUSH
22957: LD_INT 2
22959: PUSH
22960: LD_INT 3
22962: PUSH
22963: LD_INT 4
22965: PUSH
22966: LD_INT 5
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: ST_TO_ADDR
22975: GO 23698
22977: LD_INT 13
22979: DOUBLE
22980: EQUAL
22981: IFTRUE 22985
22983: GO 23011
22985: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
22986: LD_ADDR_VAR 0 3
22990: PUSH
22991: LD_INT 2
22993: PUSH
22994: LD_INT 3
22996: PUSH
22997: LD_INT 4
22999: PUSH
23000: LD_INT 5
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: ST_TO_ADDR
23009: GO 23698
23011: LD_INT 14
23013: DOUBLE
23014: EQUAL
23015: IFTRUE 23019
23017: GO 23037
23019: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23020: LD_ADDR_VAR 0 3
23024: PUSH
23025: LD_INT 4
23027: PUSH
23028: LD_INT 5
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: ST_TO_ADDR
23035: GO 23698
23037: LD_INT 6
23039: DOUBLE
23040: EQUAL
23041: IFTRUE 23045
23043: GO 23063
23045: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23046: LD_ADDR_VAR 0 3
23050: PUSH
23051: LD_INT 4
23053: PUSH
23054: LD_INT 5
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: ST_TO_ADDR
23061: GO 23698
23063: LD_INT 10
23065: DOUBLE
23066: EQUAL
23067: IFTRUE 23071
23069: GO 23089
23071: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23072: LD_ADDR_VAR 0 3
23076: PUSH
23077: LD_INT 4
23079: PUSH
23080: LD_INT 5
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: ST_TO_ADDR
23087: GO 23698
23089: LD_INT 22
23091: DOUBLE
23092: EQUAL
23093: IFTRUE 23097
23095: GO 23123
23097: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23098: LD_ADDR_VAR 0 3
23102: PUSH
23103: LD_INT 11
23105: PUSH
23106: LD_INT 12
23108: PUSH
23109: LD_INT 13
23111: PUSH
23112: LD_INT 14
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: ST_TO_ADDR
23121: GO 23698
23123: LD_INT 23
23125: DOUBLE
23126: EQUAL
23127: IFTRUE 23131
23129: GO 23157
23131: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23132: LD_ADDR_VAR 0 3
23136: PUSH
23137: LD_INT 11
23139: PUSH
23140: LD_INT 12
23142: PUSH
23143: LD_INT 13
23145: PUSH
23146: LD_INT 14
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: ST_TO_ADDR
23155: GO 23698
23157: LD_INT 24
23159: DOUBLE
23160: EQUAL
23161: IFTRUE 23165
23163: GO 23191
23165: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23166: LD_ADDR_VAR 0 3
23170: PUSH
23171: LD_INT 11
23173: PUSH
23174: LD_INT 12
23176: PUSH
23177: LD_INT 13
23179: PUSH
23180: LD_INT 14
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: ST_TO_ADDR
23189: GO 23698
23191: LD_INT 30
23193: DOUBLE
23194: EQUAL
23195: IFTRUE 23199
23197: GO 23225
23199: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23200: LD_ADDR_VAR 0 3
23204: PUSH
23205: LD_INT 11
23207: PUSH
23208: LD_INT 12
23210: PUSH
23211: LD_INT 13
23213: PUSH
23214: LD_INT 14
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: ST_TO_ADDR
23223: GO 23698
23225: LD_INT 25
23227: DOUBLE
23228: EQUAL
23229: IFTRUE 23233
23231: GO 23251
23233: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23234: LD_ADDR_VAR 0 3
23238: PUSH
23239: LD_INT 13
23241: PUSH
23242: LD_INT 14
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: ST_TO_ADDR
23249: GO 23698
23251: LD_INT 27
23253: DOUBLE
23254: EQUAL
23255: IFTRUE 23259
23257: GO 23277
23259: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23260: LD_ADDR_VAR 0 3
23264: PUSH
23265: LD_INT 13
23267: PUSH
23268: LD_INT 14
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: ST_TO_ADDR
23275: GO 23698
23277: LD_INT 28
23279: DOUBLE
23280: EQUAL
23281: IFTRUE 23285
23283: GO 23303
23285: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23286: LD_ADDR_VAR 0 3
23290: PUSH
23291: LD_INT 13
23293: PUSH
23294: LD_INT 14
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: ST_TO_ADDR
23301: GO 23698
23303: LD_INT 29
23305: DOUBLE
23306: EQUAL
23307: IFTRUE 23311
23309: GO 23329
23311: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23312: LD_ADDR_VAR 0 3
23316: PUSH
23317: LD_INT 13
23319: PUSH
23320: LD_INT 14
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: ST_TO_ADDR
23327: GO 23698
23329: LD_INT 31
23331: DOUBLE
23332: EQUAL
23333: IFTRUE 23337
23335: GO 23355
23337: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23338: LD_ADDR_VAR 0 3
23342: PUSH
23343: LD_INT 13
23345: PUSH
23346: LD_INT 14
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: ST_TO_ADDR
23353: GO 23698
23355: LD_INT 26
23357: DOUBLE
23358: EQUAL
23359: IFTRUE 23363
23361: GO 23381
23363: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23364: LD_ADDR_VAR 0 3
23368: PUSH
23369: LD_INT 13
23371: PUSH
23372: LD_INT 14
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: ST_TO_ADDR
23379: GO 23698
23381: LD_INT 42
23383: DOUBLE
23384: EQUAL
23385: IFTRUE 23389
23387: GO 23415
23389: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23390: LD_ADDR_VAR 0 3
23394: PUSH
23395: LD_INT 21
23397: PUSH
23398: LD_INT 22
23400: PUSH
23401: LD_INT 23
23403: PUSH
23404: LD_INT 24
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: ST_TO_ADDR
23413: GO 23698
23415: LD_INT 43
23417: DOUBLE
23418: EQUAL
23419: IFTRUE 23423
23421: GO 23449
23423: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23424: LD_ADDR_VAR 0 3
23428: PUSH
23429: LD_INT 21
23431: PUSH
23432: LD_INT 22
23434: PUSH
23435: LD_INT 23
23437: PUSH
23438: LD_INT 24
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: ST_TO_ADDR
23447: GO 23698
23449: LD_INT 44
23451: DOUBLE
23452: EQUAL
23453: IFTRUE 23457
23455: GO 23483
23457: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
23458: LD_ADDR_VAR 0 3
23462: PUSH
23463: LD_INT 21
23465: PUSH
23466: LD_INT 22
23468: PUSH
23469: LD_INT 23
23471: PUSH
23472: LD_INT 24
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: ST_TO_ADDR
23481: GO 23698
23483: LD_INT 45
23485: DOUBLE
23486: EQUAL
23487: IFTRUE 23491
23489: GO 23517
23491: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
23492: LD_ADDR_VAR 0 3
23496: PUSH
23497: LD_INT 21
23499: PUSH
23500: LD_INT 22
23502: PUSH
23503: LD_INT 23
23505: PUSH
23506: LD_INT 24
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: ST_TO_ADDR
23515: GO 23698
23517: LD_INT 49
23519: DOUBLE
23520: EQUAL
23521: IFTRUE 23525
23523: GO 23551
23525: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
23526: LD_ADDR_VAR 0 3
23530: PUSH
23531: LD_INT 21
23533: PUSH
23534: LD_INT 22
23536: PUSH
23537: LD_INT 23
23539: PUSH
23540: LD_INT 24
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: ST_TO_ADDR
23549: GO 23698
23551: LD_INT 51
23553: DOUBLE
23554: EQUAL
23555: IFTRUE 23559
23557: GO 23585
23559: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
23560: LD_ADDR_VAR 0 3
23564: PUSH
23565: LD_INT 21
23567: PUSH
23568: LD_INT 22
23570: PUSH
23571: LD_INT 23
23573: PUSH
23574: LD_INT 24
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: ST_TO_ADDR
23583: GO 23698
23585: LD_INT 52
23587: DOUBLE
23588: EQUAL
23589: IFTRUE 23593
23591: GO 23619
23593: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
23594: LD_ADDR_VAR 0 3
23598: PUSH
23599: LD_INT 21
23601: PUSH
23602: LD_INT 22
23604: PUSH
23605: LD_INT 23
23607: PUSH
23608: LD_INT 24
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: ST_TO_ADDR
23617: GO 23698
23619: LD_INT 53
23621: DOUBLE
23622: EQUAL
23623: IFTRUE 23627
23625: GO 23645
23627: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
23628: LD_ADDR_VAR 0 3
23632: PUSH
23633: LD_INT 23
23635: PUSH
23636: LD_INT 24
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: ST_TO_ADDR
23643: GO 23698
23645: LD_INT 46
23647: DOUBLE
23648: EQUAL
23649: IFTRUE 23653
23651: GO 23671
23653: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
23654: LD_ADDR_VAR 0 3
23658: PUSH
23659: LD_INT 23
23661: PUSH
23662: LD_INT 24
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: ST_TO_ADDR
23669: GO 23698
23671: LD_INT 47
23673: DOUBLE
23674: EQUAL
23675: IFTRUE 23679
23677: GO 23697
23679: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23680: LD_ADDR_VAR 0 3
23684: PUSH
23685: LD_INT 23
23687: PUSH
23688: LD_INT 24
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: ST_TO_ADDR
23695: GO 23698
23697: POP
// result := ( chassis in result ) ;
23698: LD_ADDR_VAR 0 3
23702: PUSH
23703: LD_VAR 0 1
23707: PUSH
23708: LD_VAR 0 3
23712: IN
23713: ST_TO_ADDR
// end ;
23714: LD_VAR 0 3
23718: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
23719: LD_INT 0
23721: PPUSH
23722: PPUSH
23723: PPUSH
23724: PPUSH
23725: PPUSH
23726: PPUSH
23727: PPUSH
// result := array ;
23728: LD_ADDR_VAR 0 5
23732: PUSH
23733: LD_VAR 0 1
23737: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
23738: LD_VAR 0 1
23742: NOT
23743: PUSH
23744: LD_VAR 0 2
23748: NOT
23749: OR
23750: PUSH
23751: LD_VAR 0 3
23755: NOT
23756: OR
23757: PUSH
23758: LD_VAR 0 2
23762: PUSH
23763: LD_VAR 0 1
23767: GREATER
23768: OR
23769: PUSH
23770: LD_VAR 0 3
23774: PUSH
23775: LD_VAR 0 1
23779: GREATER
23780: OR
23781: IFFALSE 23785
// exit ;
23783: GO 24081
// if direction then
23785: LD_VAR 0 4
23789: IFFALSE 23853
// begin d := 1 ;
23791: LD_ADDR_VAR 0 9
23795: PUSH
23796: LD_INT 1
23798: ST_TO_ADDR
// if i_from > i_to then
23799: LD_VAR 0 2
23803: PUSH
23804: LD_VAR 0 3
23808: GREATER
23809: IFFALSE 23835
// length := ( array - i_from ) + i_to else
23811: LD_ADDR_VAR 0 11
23815: PUSH
23816: LD_VAR 0 1
23820: PUSH
23821: LD_VAR 0 2
23825: MINUS
23826: PUSH
23827: LD_VAR 0 3
23831: PLUS
23832: ST_TO_ADDR
23833: GO 23851
// length := i_to - i_from ;
23835: LD_ADDR_VAR 0 11
23839: PUSH
23840: LD_VAR 0 3
23844: PUSH
23845: LD_VAR 0 2
23849: MINUS
23850: ST_TO_ADDR
// end else
23851: GO 23914
// begin d := - 1 ;
23853: LD_ADDR_VAR 0 9
23857: PUSH
23858: LD_INT 1
23860: NEG
23861: ST_TO_ADDR
// if i_from > i_to then
23862: LD_VAR 0 2
23866: PUSH
23867: LD_VAR 0 3
23871: GREATER
23872: IFFALSE 23892
// length := i_from - i_to else
23874: LD_ADDR_VAR 0 11
23878: PUSH
23879: LD_VAR 0 2
23883: PUSH
23884: LD_VAR 0 3
23888: MINUS
23889: ST_TO_ADDR
23890: GO 23914
// length := ( array - i_to ) + i_from ;
23892: LD_ADDR_VAR 0 11
23896: PUSH
23897: LD_VAR 0 1
23901: PUSH
23902: LD_VAR 0 3
23906: MINUS
23907: PUSH
23908: LD_VAR 0 2
23912: PLUS
23913: ST_TO_ADDR
// end ; if not length then
23914: LD_VAR 0 11
23918: NOT
23919: IFFALSE 23923
// exit ;
23921: GO 24081
// tmp := array ;
23923: LD_ADDR_VAR 0 10
23927: PUSH
23928: LD_VAR 0 1
23932: ST_TO_ADDR
// for i = 1 to length do
23933: LD_ADDR_VAR 0 6
23937: PUSH
23938: DOUBLE
23939: LD_INT 1
23941: DEC
23942: ST_TO_ADDR
23943: LD_VAR 0 11
23947: PUSH
23948: FOR_TO
23949: IFFALSE 24069
// begin for j = 1 to array do
23951: LD_ADDR_VAR 0 7
23955: PUSH
23956: DOUBLE
23957: LD_INT 1
23959: DEC
23960: ST_TO_ADDR
23961: LD_VAR 0 1
23965: PUSH
23966: FOR_TO
23967: IFFALSE 24055
// begin k := j + d ;
23969: LD_ADDR_VAR 0 8
23973: PUSH
23974: LD_VAR 0 7
23978: PUSH
23979: LD_VAR 0 9
23983: PLUS
23984: ST_TO_ADDR
// if k > array then
23985: LD_VAR 0 8
23989: PUSH
23990: LD_VAR 0 1
23994: GREATER
23995: IFFALSE 24005
// k := 1 ;
23997: LD_ADDR_VAR 0 8
24001: PUSH
24002: LD_INT 1
24004: ST_TO_ADDR
// if not k then
24005: LD_VAR 0 8
24009: NOT
24010: IFFALSE 24022
// k := array ;
24012: LD_ADDR_VAR 0 8
24016: PUSH
24017: LD_VAR 0 1
24021: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24022: LD_ADDR_VAR 0 10
24026: PUSH
24027: LD_VAR 0 10
24031: PPUSH
24032: LD_VAR 0 8
24036: PPUSH
24037: LD_VAR 0 1
24041: PUSH
24042: LD_VAR 0 7
24046: ARRAY
24047: PPUSH
24048: CALL_OW 1
24052: ST_TO_ADDR
// end ;
24053: GO 23966
24055: POP
24056: POP
// array := tmp ;
24057: LD_ADDR_VAR 0 1
24061: PUSH
24062: LD_VAR 0 10
24066: ST_TO_ADDR
// end ;
24067: GO 23948
24069: POP
24070: POP
// result := array ;
24071: LD_ADDR_VAR 0 5
24075: PUSH
24076: LD_VAR 0 1
24080: ST_TO_ADDR
// end ;
24081: LD_VAR 0 5
24085: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24086: LD_INT 0
24088: PPUSH
24089: PPUSH
// result := 0 ;
24090: LD_ADDR_VAR 0 3
24094: PUSH
24095: LD_INT 0
24097: ST_TO_ADDR
// if not array or not value in array then
24098: LD_VAR 0 1
24102: NOT
24103: PUSH
24104: LD_VAR 0 2
24108: PUSH
24109: LD_VAR 0 1
24113: IN
24114: NOT
24115: OR
24116: IFFALSE 24120
// exit ;
24118: GO 24174
// for i = 1 to array do
24120: LD_ADDR_VAR 0 4
24124: PUSH
24125: DOUBLE
24126: LD_INT 1
24128: DEC
24129: ST_TO_ADDR
24130: LD_VAR 0 1
24134: PUSH
24135: FOR_TO
24136: IFFALSE 24172
// if value = array [ i ] then
24138: LD_VAR 0 2
24142: PUSH
24143: LD_VAR 0 1
24147: PUSH
24148: LD_VAR 0 4
24152: ARRAY
24153: EQUAL
24154: IFFALSE 24170
// begin result := i ;
24156: LD_ADDR_VAR 0 3
24160: PUSH
24161: LD_VAR 0 4
24165: ST_TO_ADDR
// exit ;
24166: POP
24167: POP
24168: GO 24174
// end ;
24170: GO 24135
24172: POP
24173: POP
// end ;
24174: LD_VAR 0 3
24178: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24179: LD_INT 0
24181: PPUSH
// vc_chassis := chassis ;
24182: LD_ADDR_OWVAR 37
24186: PUSH
24187: LD_VAR 0 1
24191: ST_TO_ADDR
// vc_engine := engine ;
24192: LD_ADDR_OWVAR 39
24196: PUSH
24197: LD_VAR 0 2
24201: ST_TO_ADDR
// vc_control := control ;
24202: LD_ADDR_OWVAR 38
24206: PUSH
24207: LD_VAR 0 3
24211: ST_TO_ADDR
// vc_weapon := weapon ;
24212: LD_ADDR_OWVAR 40
24216: PUSH
24217: LD_VAR 0 4
24221: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24222: LD_ADDR_OWVAR 41
24226: PUSH
24227: LD_VAR 0 5
24231: ST_TO_ADDR
// end ;
24232: LD_VAR 0 6
24236: RET
// export function WantPlant ( unit ) ; var task ; begin
24237: LD_INT 0
24239: PPUSH
24240: PPUSH
// result := false ;
24241: LD_ADDR_VAR 0 2
24245: PUSH
24246: LD_INT 0
24248: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24249: LD_ADDR_VAR 0 3
24253: PUSH
24254: LD_VAR 0 1
24258: PPUSH
24259: CALL_OW 437
24263: ST_TO_ADDR
// if task then
24264: LD_VAR 0 3
24268: IFFALSE 24296
// if task [ 1 ] [ 1 ] = p then
24270: LD_VAR 0 3
24274: PUSH
24275: LD_INT 1
24277: ARRAY
24278: PUSH
24279: LD_INT 1
24281: ARRAY
24282: PUSH
24283: LD_STRING p
24285: EQUAL
24286: IFFALSE 24296
// result := true ;
24288: LD_ADDR_VAR 0 2
24292: PUSH
24293: LD_INT 1
24295: ST_TO_ADDR
// end ;
24296: LD_VAR 0 2
24300: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24301: LD_INT 0
24303: PPUSH
24304: PPUSH
24305: PPUSH
24306: PPUSH
// if pos < 1 then
24307: LD_VAR 0 2
24311: PUSH
24312: LD_INT 1
24314: LESS
24315: IFFALSE 24319
// exit ;
24317: GO 24622
// if pos = 1 then
24319: LD_VAR 0 2
24323: PUSH
24324: LD_INT 1
24326: EQUAL
24327: IFFALSE 24360
// result := Replace ( arr , pos [ 1 ] , value ) else
24329: LD_ADDR_VAR 0 4
24333: PUSH
24334: LD_VAR 0 1
24338: PPUSH
24339: LD_VAR 0 2
24343: PUSH
24344: LD_INT 1
24346: ARRAY
24347: PPUSH
24348: LD_VAR 0 3
24352: PPUSH
24353: CALL_OW 1
24357: ST_TO_ADDR
24358: GO 24622
// begin tmp := arr ;
24360: LD_ADDR_VAR 0 6
24364: PUSH
24365: LD_VAR 0 1
24369: ST_TO_ADDR
// s_arr := [ tmp ] ;
24370: LD_ADDR_VAR 0 7
24374: PUSH
24375: LD_VAR 0 6
24379: PUSH
24380: EMPTY
24381: LIST
24382: ST_TO_ADDR
// for i = 1 to pos - 1 do
24383: LD_ADDR_VAR 0 5
24387: PUSH
24388: DOUBLE
24389: LD_INT 1
24391: DEC
24392: ST_TO_ADDR
24393: LD_VAR 0 2
24397: PUSH
24398: LD_INT 1
24400: MINUS
24401: PUSH
24402: FOR_TO
24403: IFFALSE 24448
// begin tmp := tmp [ pos [ i ] ] ;
24405: LD_ADDR_VAR 0 6
24409: PUSH
24410: LD_VAR 0 6
24414: PUSH
24415: LD_VAR 0 2
24419: PUSH
24420: LD_VAR 0 5
24424: ARRAY
24425: ARRAY
24426: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24427: LD_ADDR_VAR 0 7
24431: PUSH
24432: LD_VAR 0 7
24436: PUSH
24437: LD_VAR 0 6
24441: PUSH
24442: EMPTY
24443: LIST
24444: ADD
24445: ST_TO_ADDR
// end ;
24446: GO 24402
24448: POP
24449: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
24450: LD_ADDR_VAR 0 6
24454: PUSH
24455: LD_VAR 0 6
24459: PPUSH
24460: LD_VAR 0 2
24464: PUSH
24465: LD_VAR 0 2
24469: ARRAY
24470: PPUSH
24471: LD_VAR 0 3
24475: PPUSH
24476: CALL_OW 1
24480: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
24481: LD_ADDR_VAR 0 7
24485: PUSH
24486: LD_VAR 0 7
24490: PPUSH
24491: LD_VAR 0 7
24495: PPUSH
24496: LD_VAR 0 6
24500: PPUSH
24501: CALL_OW 1
24505: ST_TO_ADDR
// for i = s_arr downto 2 do
24506: LD_ADDR_VAR 0 5
24510: PUSH
24511: DOUBLE
24512: LD_VAR 0 7
24516: INC
24517: ST_TO_ADDR
24518: LD_INT 2
24520: PUSH
24521: FOR_DOWNTO
24522: IFFALSE 24606
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
24524: LD_ADDR_VAR 0 6
24528: PUSH
24529: LD_VAR 0 7
24533: PUSH
24534: LD_VAR 0 5
24538: PUSH
24539: LD_INT 1
24541: MINUS
24542: ARRAY
24543: PPUSH
24544: LD_VAR 0 2
24548: PUSH
24549: LD_VAR 0 5
24553: PUSH
24554: LD_INT 1
24556: MINUS
24557: ARRAY
24558: PPUSH
24559: LD_VAR 0 7
24563: PUSH
24564: LD_VAR 0 5
24568: ARRAY
24569: PPUSH
24570: CALL_OW 1
24574: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
24575: LD_ADDR_VAR 0 7
24579: PUSH
24580: LD_VAR 0 7
24584: PPUSH
24585: LD_VAR 0 5
24589: PUSH
24590: LD_INT 1
24592: MINUS
24593: PPUSH
24594: LD_VAR 0 6
24598: PPUSH
24599: CALL_OW 1
24603: ST_TO_ADDR
// end ;
24604: GO 24521
24606: POP
24607: POP
// result := s_arr [ 1 ] ;
24608: LD_ADDR_VAR 0 4
24612: PUSH
24613: LD_VAR 0 7
24617: PUSH
24618: LD_INT 1
24620: ARRAY
24621: ST_TO_ADDR
// end ; end ;
24622: LD_VAR 0 4
24626: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
24627: LD_INT 0
24629: PPUSH
24630: PPUSH
// if not list then
24631: LD_VAR 0 1
24635: NOT
24636: IFFALSE 24640
// exit ;
24638: GO 24731
// i := list [ pos1 ] ;
24640: LD_ADDR_VAR 0 5
24644: PUSH
24645: LD_VAR 0 1
24649: PUSH
24650: LD_VAR 0 2
24654: ARRAY
24655: ST_TO_ADDR
// if not i then
24656: LD_VAR 0 5
24660: NOT
24661: IFFALSE 24665
// exit ;
24663: GO 24731
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
24665: LD_ADDR_VAR 0 1
24669: PUSH
24670: LD_VAR 0 1
24674: PPUSH
24675: LD_VAR 0 2
24679: PPUSH
24680: LD_VAR 0 1
24684: PUSH
24685: LD_VAR 0 3
24689: ARRAY
24690: PPUSH
24691: CALL_OW 1
24695: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
24696: LD_ADDR_VAR 0 1
24700: PUSH
24701: LD_VAR 0 1
24705: PPUSH
24706: LD_VAR 0 3
24710: PPUSH
24711: LD_VAR 0 5
24715: PPUSH
24716: CALL_OW 1
24720: ST_TO_ADDR
// result := list ;
24721: LD_ADDR_VAR 0 4
24725: PUSH
24726: LD_VAR 0 1
24730: ST_TO_ADDR
// end ;
24731: LD_VAR 0 4
24735: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
24736: LD_INT 0
24738: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
24739: LD_ADDR_VAR 0 5
24743: PUSH
24744: LD_VAR 0 1
24748: PPUSH
24749: CALL_OW 250
24753: PPUSH
24754: LD_VAR 0 1
24758: PPUSH
24759: CALL_OW 251
24763: PPUSH
24764: LD_VAR 0 2
24768: PPUSH
24769: LD_VAR 0 3
24773: PPUSH
24774: LD_VAR 0 4
24778: PPUSH
24779: CALL 24789 0 5
24783: ST_TO_ADDR
// end ;
24784: LD_VAR 0 5
24788: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
24789: LD_INT 0
24791: PPUSH
24792: PPUSH
24793: PPUSH
24794: PPUSH
// if not list then
24795: LD_VAR 0 3
24799: NOT
24800: IFFALSE 24804
// exit ;
24802: GO 25192
// result := [ ] ;
24804: LD_ADDR_VAR 0 6
24808: PUSH
24809: EMPTY
24810: ST_TO_ADDR
// for i in list do
24811: LD_ADDR_VAR 0 7
24815: PUSH
24816: LD_VAR 0 3
24820: PUSH
24821: FOR_IN
24822: IFFALSE 25024
// begin tmp := GetDistUnitXY ( i , x , y ) ;
24824: LD_ADDR_VAR 0 9
24828: PUSH
24829: LD_VAR 0 7
24833: PPUSH
24834: LD_VAR 0 1
24838: PPUSH
24839: LD_VAR 0 2
24843: PPUSH
24844: CALL_OW 297
24848: ST_TO_ADDR
// if not result then
24849: LD_VAR 0 6
24853: NOT
24854: IFFALSE 24880
// result := [ [ i , tmp ] ] else
24856: LD_ADDR_VAR 0 6
24860: PUSH
24861: LD_VAR 0 7
24865: PUSH
24866: LD_VAR 0 9
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: EMPTY
24876: LIST
24877: ST_TO_ADDR
24878: GO 25022
// begin if result [ result ] [ 2 ] < tmp then
24880: LD_VAR 0 6
24884: PUSH
24885: LD_VAR 0 6
24889: ARRAY
24890: PUSH
24891: LD_INT 2
24893: ARRAY
24894: PUSH
24895: LD_VAR 0 9
24899: LESS
24900: IFFALSE 24942
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
24902: LD_ADDR_VAR 0 6
24906: PUSH
24907: LD_VAR 0 6
24911: PPUSH
24912: LD_VAR 0 6
24916: PUSH
24917: LD_INT 1
24919: PLUS
24920: PPUSH
24921: LD_VAR 0 7
24925: PUSH
24926: LD_VAR 0 9
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PPUSH
24935: CALL_OW 2
24939: ST_TO_ADDR
24940: GO 25022
// for j = 1 to result do
24942: LD_ADDR_VAR 0 8
24946: PUSH
24947: DOUBLE
24948: LD_INT 1
24950: DEC
24951: ST_TO_ADDR
24952: LD_VAR 0 6
24956: PUSH
24957: FOR_TO
24958: IFFALSE 25020
// begin if tmp < result [ j ] [ 2 ] then
24960: LD_VAR 0 9
24964: PUSH
24965: LD_VAR 0 6
24969: PUSH
24970: LD_VAR 0 8
24974: ARRAY
24975: PUSH
24976: LD_INT 2
24978: ARRAY
24979: LESS
24980: IFFALSE 25018
// begin result := Insert ( result , j , [ i , tmp ] ) ;
24982: LD_ADDR_VAR 0 6
24986: PUSH
24987: LD_VAR 0 6
24991: PPUSH
24992: LD_VAR 0 8
24996: PPUSH
24997: LD_VAR 0 7
25001: PUSH
25002: LD_VAR 0 9
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PPUSH
25011: CALL_OW 2
25015: ST_TO_ADDR
// break ;
25016: GO 25020
// end ; end ;
25018: GO 24957
25020: POP
25021: POP
// end ; end ;
25022: GO 24821
25024: POP
25025: POP
// if result and not asc then
25026: LD_VAR 0 6
25030: PUSH
25031: LD_VAR 0 4
25035: NOT
25036: AND
25037: IFFALSE 25112
// begin tmp := result ;
25039: LD_ADDR_VAR 0 9
25043: PUSH
25044: LD_VAR 0 6
25048: ST_TO_ADDR
// for i = tmp downto 1 do
25049: LD_ADDR_VAR 0 7
25053: PUSH
25054: DOUBLE
25055: LD_VAR 0 9
25059: INC
25060: ST_TO_ADDR
25061: LD_INT 1
25063: PUSH
25064: FOR_DOWNTO
25065: IFFALSE 25110
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25067: LD_ADDR_VAR 0 6
25071: PUSH
25072: LD_VAR 0 6
25076: PPUSH
25077: LD_VAR 0 9
25081: PUSH
25082: LD_VAR 0 7
25086: MINUS
25087: PUSH
25088: LD_INT 1
25090: PLUS
25091: PPUSH
25092: LD_VAR 0 9
25096: PUSH
25097: LD_VAR 0 7
25101: ARRAY
25102: PPUSH
25103: CALL_OW 1
25107: ST_TO_ADDR
25108: GO 25064
25110: POP
25111: POP
// end ; tmp := [ ] ;
25112: LD_ADDR_VAR 0 9
25116: PUSH
25117: EMPTY
25118: ST_TO_ADDR
// if mode then
25119: LD_VAR 0 5
25123: IFFALSE 25192
// begin for i = 1 to result do
25125: LD_ADDR_VAR 0 7
25129: PUSH
25130: DOUBLE
25131: LD_INT 1
25133: DEC
25134: ST_TO_ADDR
25135: LD_VAR 0 6
25139: PUSH
25140: FOR_TO
25141: IFFALSE 25180
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25143: LD_ADDR_VAR 0 9
25147: PUSH
25148: LD_VAR 0 9
25152: PPUSH
25153: LD_VAR 0 7
25157: PPUSH
25158: LD_VAR 0 6
25162: PUSH
25163: LD_VAR 0 7
25167: ARRAY
25168: PUSH
25169: LD_INT 1
25171: ARRAY
25172: PPUSH
25173: CALL_OW 1
25177: ST_TO_ADDR
25178: GO 25140
25180: POP
25181: POP
// result := tmp ;
25182: LD_ADDR_VAR 0 6
25186: PUSH
25187: LD_VAR 0 9
25191: ST_TO_ADDR
// end ; end ;
25192: LD_VAR 0 6
25196: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25197: LD_INT 0
25199: PPUSH
25200: PPUSH
25201: PPUSH
25202: PPUSH
25203: PPUSH
25204: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25205: LD_ADDR_VAR 0 5
25209: PUSH
25210: LD_INT 0
25212: PUSH
25213: LD_INT 0
25215: PUSH
25216: LD_INT 0
25218: PUSH
25219: EMPTY
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: ST_TO_ADDR
// if not x or not y then
25227: LD_VAR 0 2
25231: NOT
25232: PUSH
25233: LD_VAR 0 3
25237: NOT
25238: OR
25239: IFFALSE 25243
// exit ;
25241: GO 26889
// if not range then
25243: LD_VAR 0 4
25247: NOT
25248: IFFALSE 25258
// range := 10 ;
25250: LD_ADDR_VAR 0 4
25254: PUSH
25255: LD_INT 10
25257: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25258: LD_ADDR_VAR 0 8
25262: PUSH
25263: LD_INT 81
25265: PUSH
25266: LD_VAR 0 1
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 92
25277: PUSH
25278: LD_VAR 0 2
25282: PUSH
25283: LD_VAR 0 3
25287: PUSH
25288: LD_VAR 0 4
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: PUSH
25299: LD_INT 3
25301: PUSH
25302: LD_INT 21
25304: PUSH
25305: LD_INT 3
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: LIST
25320: PPUSH
25321: CALL_OW 69
25325: ST_TO_ADDR
// if not tmp then
25326: LD_VAR 0 8
25330: NOT
25331: IFFALSE 25335
// exit ;
25333: GO 26889
// for i in tmp do
25335: LD_ADDR_VAR 0 6
25339: PUSH
25340: LD_VAR 0 8
25344: PUSH
25345: FOR_IN
25346: IFFALSE 26864
// begin points := [ 0 , 0 , 0 ] ;
25348: LD_ADDR_VAR 0 9
25352: PUSH
25353: LD_INT 0
25355: PUSH
25356: LD_INT 0
25358: PUSH
25359: LD_INT 0
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: LIST
25366: ST_TO_ADDR
// bpoints := 1 ;
25367: LD_ADDR_VAR 0 10
25371: PUSH
25372: LD_INT 1
25374: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25375: LD_VAR 0 6
25379: PPUSH
25380: CALL_OW 247
25384: PUSH
25385: LD_INT 1
25387: DOUBLE
25388: EQUAL
25389: IFTRUE 25393
25391: GO 25971
25393: POP
// begin if GetClass ( i ) = 1 then
25394: LD_VAR 0 6
25398: PPUSH
25399: CALL_OW 257
25403: PUSH
25404: LD_INT 1
25406: EQUAL
25407: IFFALSE 25428
// points := [ 10 , 5 , 3 ] ;
25409: LD_ADDR_VAR 0 9
25413: PUSH
25414: LD_INT 10
25416: PUSH
25417: LD_INT 5
25419: PUSH
25420: LD_INT 3
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: LIST
25427: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25428: LD_VAR 0 6
25432: PPUSH
25433: CALL_OW 257
25437: PUSH
25438: LD_INT 2
25440: PUSH
25441: LD_INT 3
25443: PUSH
25444: LD_INT 4
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: LIST
25451: IN
25452: IFFALSE 25473
// points := [ 3 , 2 , 1 ] ;
25454: LD_ADDR_VAR 0 9
25458: PUSH
25459: LD_INT 3
25461: PUSH
25462: LD_INT 2
25464: PUSH
25465: LD_INT 1
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: LIST
25472: ST_TO_ADDR
// if GetClass ( i ) = 5 then
25473: LD_VAR 0 6
25477: PPUSH
25478: CALL_OW 257
25482: PUSH
25483: LD_INT 5
25485: EQUAL
25486: IFFALSE 25507
// points := [ 130 , 5 , 2 ] ;
25488: LD_ADDR_VAR 0 9
25492: PUSH
25493: LD_INT 130
25495: PUSH
25496: LD_INT 5
25498: PUSH
25499: LD_INT 2
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: LIST
25506: ST_TO_ADDR
// if GetClass ( i ) = 8 then
25507: LD_VAR 0 6
25511: PPUSH
25512: CALL_OW 257
25516: PUSH
25517: LD_INT 8
25519: EQUAL
25520: IFFALSE 25541
// points := [ 35 , 35 , 30 ] ;
25522: LD_ADDR_VAR 0 9
25526: PUSH
25527: LD_INT 35
25529: PUSH
25530: LD_INT 35
25532: PUSH
25533: LD_INT 30
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: LIST
25540: ST_TO_ADDR
// if GetClass ( i ) = 9 then
25541: LD_VAR 0 6
25545: PPUSH
25546: CALL_OW 257
25550: PUSH
25551: LD_INT 9
25553: EQUAL
25554: IFFALSE 25575
// points := [ 20 , 55 , 40 ] ;
25556: LD_ADDR_VAR 0 9
25560: PUSH
25561: LD_INT 20
25563: PUSH
25564: LD_INT 55
25566: PUSH
25567: LD_INT 40
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: LIST
25574: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
25575: LD_VAR 0 6
25579: PPUSH
25580: CALL_OW 257
25584: PUSH
25585: LD_INT 12
25587: PUSH
25588: LD_INT 16
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: IN
25595: IFFALSE 25616
// points := [ 5 , 3 , 2 ] ;
25597: LD_ADDR_VAR 0 9
25601: PUSH
25602: LD_INT 5
25604: PUSH
25605: LD_INT 3
25607: PUSH
25608: LD_INT 2
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: LIST
25615: ST_TO_ADDR
// if GetClass ( i ) = 17 then
25616: LD_VAR 0 6
25620: PPUSH
25621: CALL_OW 257
25625: PUSH
25626: LD_INT 17
25628: EQUAL
25629: IFFALSE 25650
// points := [ 100 , 50 , 75 ] ;
25631: LD_ADDR_VAR 0 9
25635: PUSH
25636: LD_INT 100
25638: PUSH
25639: LD_INT 50
25641: PUSH
25642: LD_INT 75
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: LIST
25649: ST_TO_ADDR
// if GetClass ( i ) = 15 then
25650: LD_VAR 0 6
25654: PPUSH
25655: CALL_OW 257
25659: PUSH
25660: LD_INT 15
25662: EQUAL
25663: IFFALSE 25684
// points := [ 10 , 5 , 3 ] ;
25665: LD_ADDR_VAR 0 9
25669: PUSH
25670: LD_INT 10
25672: PUSH
25673: LD_INT 5
25675: PUSH
25676: LD_INT 3
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: LIST
25683: ST_TO_ADDR
// if GetClass ( i ) = 14 then
25684: LD_VAR 0 6
25688: PPUSH
25689: CALL_OW 257
25693: PUSH
25694: LD_INT 14
25696: EQUAL
25697: IFFALSE 25718
// points := [ 10 , 0 , 0 ] ;
25699: LD_ADDR_VAR 0 9
25703: PUSH
25704: LD_INT 10
25706: PUSH
25707: LD_INT 0
25709: PUSH
25710: LD_INT 0
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: LIST
25717: ST_TO_ADDR
// if GetClass ( i ) = 11 then
25718: LD_VAR 0 6
25722: PPUSH
25723: CALL_OW 257
25727: PUSH
25728: LD_INT 11
25730: EQUAL
25731: IFFALSE 25752
// points := [ 30 , 10 , 5 ] ;
25733: LD_ADDR_VAR 0 9
25737: PUSH
25738: LD_INT 30
25740: PUSH
25741: LD_INT 10
25743: PUSH
25744: LD_INT 5
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: LIST
25751: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
25752: LD_VAR 0 1
25756: PPUSH
25757: LD_INT 5
25759: PPUSH
25760: CALL_OW 321
25764: PUSH
25765: LD_INT 2
25767: EQUAL
25768: IFFALSE 25785
// bpoints := bpoints * 1.8 ;
25770: LD_ADDR_VAR 0 10
25774: PUSH
25775: LD_VAR 0 10
25779: PUSH
25780: LD_REAL  1.80000000000000E+0000
25783: MUL
25784: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
25785: LD_VAR 0 6
25789: PPUSH
25790: CALL_OW 257
25794: PUSH
25795: LD_INT 1
25797: PUSH
25798: LD_INT 2
25800: PUSH
25801: LD_INT 3
25803: PUSH
25804: LD_INT 4
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: IN
25813: PUSH
25814: LD_VAR 0 1
25818: PPUSH
25819: LD_INT 51
25821: PPUSH
25822: CALL_OW 321
25826: PUSH
25827: LD_INT 2
25829: EQUAL
25830: AND
25831: IFFALSE 25848
// bpoints := bpoints * 1.2 ;
25833: LD_ADDR_VAR 0 10
25837: PUSH
25838: LD_VAR 0 10
25842: PUSH
25843: LD_REAL  1.20000000000000E+0000
25846: MUL
25847: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
25848: LD_VAR 0 6
25852: PPUSH
25853: CALL_OW 257
25857: PUSH
25858: LD_INT 5
25860: PUSH
25861: LD_INT 7
25863: PUSH
25864: LD_INT 9
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: LIST
25871: IN
25872: PUSH
25873: LD_VAR 0 1
25877: PPUSH
25878: LD_INT 52
25880: PPUSH
25881: CALL_OW 321
25885: PUSH
25886: LD_INT 2
25888: EQUAL
25889: AND
25890: IFFALSE 25907
// bpoints := bpoints * 1.5 ;
25892: LD_ADDR_VAR 0 10
25896: PUSH
25897: LD_VAR 0 10
25901: PUSH
25902: LD_REAL  1.50000000000000E+0000
25905: MUL
25906: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
25907: LD_VAR 0 1
25911: PPUSH
25912: LD_INT 66
25914: PPUSH
25915: CALL_OW 321
25919: PUSH
25920: LD_INT 2
25922: EQUAL
25923: IFFALSE 25940
// bpoints := bpoints * 1.1 ;
25925: LD_ADDR_VAR 0 10
25929: PUSH
25930: LD_VAR 0 10
25934: PUSH
25935: LD_REAL  1.10000000000000E+0000
25938: MUL
25939: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
25940: LD_ADDR_VAR 0 10
25944: PUSH
25945: LD_VAR 0 10
25949: PUSH
25950: LD_VAR 0 6
25954: PPUSH
25955: LD_INT 1
25957: PPUSH
25958: CALL_OW 259
25962: PUSH
25963: LD_REAL  1.15000000000000E+0000
25966: MUL
25967: MUL
25968: ST_TO_ADDR
// end ; unit_vehicle :
25969: GO 26793
25971: LD_INT 2
25973: DOUBLE
25974: EQUAL
25975: IFTRUE 25979
25977: GO 26781
25979: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
25980: LD_VAR 0 6
25984: PPUSH
25985: CALL_OW 264
25989: PUSH
25990: LD_INT 2
25992: PUSH
25993: LD_INT 42
25995: PUSH
25996: LD_INT 24
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: LIST
26003: IN
26004: IFFALSE 26025
// points := [ 25 , 5 , 3 ] ;
26006: LD_ADDR_VAR 0 9
26010: PUSH
26011: LD_INT 25
26013: PUSH
26014: LD_INT 5
26016: PUSH
26017: LD_INT 3
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: LIST
26024: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26025: LD_VAR 0 6
26029: PPUSH
26030: CALL_OW 264
26034: PUSH
26035: LD_INT 4
26037: PUSH
26038: LD_INT 43
26040: PUSH
26041: LD_INT 25
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: LIST
26048: IN
26049: IFFALSE 26070
// points := [ 40 , 15 , 5 ] ;
26051: LD_ADDR_VAR 0 9
26055: PUSH
26056: LD_INT 40
26058: PUSH
26059: LD_INT 15
26061: PUSH
26062: LD_INT 5
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: LIST
26069: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26070: LD_VAR 0 6
26074: PPUSH
26075: CALL_OW 264
26079: PUSH
26080: LD_INT 3
26082: PUSH
26083: LD_INT 23
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: IN
26090: IFFALSE 26111
// points := [ 7 , 25 , 8 ] ;
26092: LD_ADDR_VAR 0 9
26096: PUSH
26097: LD_INT 7
26099: PUSH
26100: LD_INT 25
26102: PUSH
26103: LD_INT 8
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: LIST
26110: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26111: LD_VAR 0 6
26115: PPUSH
26116: CALL_OW 264
26120: PUSH
26121: LD_INT 5
26123: PUSH
26124: LD_INT 27
26126: PUSH
26127: LD_INT 44
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: LIST
26134: IN
26135: IFFALSE 26156
// points := [ 14 , 50 , 16 ] ;
26137: LD_ADDR_VAR 0 9
26141: PUSH
26142: LD_INT 14
26144: PUSH
26145: LD_INT 50
26147: PUSH
26148: LD_INT 16
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: LIST
26155: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26156: LD_VAR 0 6
26160: PPUSH
26161: CALL_OW 264
26165: PUSH
26166: LD_INT 6
26168: PUSH
26169: LD_INT 46
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: IN
26176: IFFALSE 26197
// points := [ 32 , 120 , 70 ] ;
26178: LD_ADDR_VAR 0 9
26182: PUSH
26183: LD_INT 32
26185: PUSH
26186: LD_INT 120
26188: PUSH
26189: LD_INT 70
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: LIST
26196: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
26197: LD_VAR 0 6
26201: PPUSH
26202: CALL_OW 264
26206: PUSH
26207: LD_INT 7
26209: PUSH
26210: LD_INT 28
26212: PUSH
26213: LD_INT 45
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: LIST
26220: IN
26221: IFFALSE 26242
// points := [ 35 , 20 , 45 ] ;
26223: LD_ADDR_VAR 0 9
26227: PUSH
26228: LD_INT 35
26230: PUSH
26231: LD_INT 20
26233: PUSH
26234: LD_INT 45
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: LIST
26241: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26242: LD_VAR 0 6
26246: PPUSH
26247: CALL_OW 264
26251: PUSH
26252: LD_INT 47
26254: PUSH
26255: EMPTY
26256: LIST
26257: IN
26258: IFFALSE 26279
// points := [ 67 , 45 , 75 ] ;
26260: LD_ADDR_VAR 0 9
26264: PUSH
26265: LD_INT 67
26267: PUSH
26268: LD_INT 45
26270: PUSH
26271: LD_INT 75
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: LIST
26278: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26279: LD_VAR 0 6
26283: PPUSH
26284: CALL_OW 264
26288: PUSH
26289: LD_INT 26
26291: PUSH
26292: EMPTY
26293: LIST
26294: IN
26295: IFFALSE 26316
// points := [ 120 , 30 , 80 ] ;
26297: LD_ADDR_VAR 0 9
26301: PUSH
26302: LD_INT 120
26304: PUSH
26305: LD_INT 30
26307: PUSH
26308: LD_INT 80
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: LIST
26315: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26316: LD_VAR 0 6
26320: PPUSH
26321: CALL_OW 264
26325: PUSH
26326: LD_INT 22
26328: PUSH
26329: EMPTY
26330: LIST
26331: IN
26332: IFFALSE 26353
// points := [ 40 , 1 , 1 ] ;
26334: LD_ADDR_VAR 0 9
26338: PUSH
26339: LD_INT 40
26341: PUSH
26342: LD_INT 1
26344: PUSH
26345: LD_INT 1
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: LIST
26352: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26353: LD_VAR 0 6
26357: PPUSH
26358: CALL_OW 264
26362: PUSH
26363: LD_INT 29
26365: PUSH
26366: EMPTY
26367: LIST
26368: IN
26369: IFFALSE 26390
// points := [ 70 , 200 , 400 ] ;
26371: LD_ADDR_VAR 0 9
26375: PUSH
26376: LD_INT 70
26378: PUSH
26379: LD_INT 200
26381: PUSH
26382: LD_INT 400
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: LIST
26389: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26390: LD_VAR 0 6
26394: PPUSH
26395: CALL_OW 264
26399: PUSH
26400: LD_INT 14
26402: PUSH
26403: LD_INT 53
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: IN
26410: IFFALSE 26431
// points := [ 40 , 10 , 20 ] ;
26412: LD_ADDR_VAR 0 9
26416: PUSH
26417: LD_INT 40
26419: PUSH
26420: LD_INT 10
26422: PUSH
26423: LD_INT 20
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: LIST
26430: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26431: LD_VAR 0 6
26435: PPUSH
26436: CALL_OW 264
26440: PUSH
26441: LD_INT 9
26443: PUSH
26444: EMPTY
26445: LIST
26446: IN
26447: IFFALSE 26468
// points := [ 5 , 70 , 20 ] ;
26449: LD_ADDR_VAR 0 9
26453: PUSH
26454: LD_INT 5
26456: PUSH
26457: LD_INT 70
26459: PUSH
26460: LD_INT 20
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: LIST
26467: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
26468: LD_VAR 0 6
26472: PPUSH
26473: CALL_OW 264
26477: PUSH
26478: LD_INT 10
26480: PUSH
26481: EMPTY
26482: LIST
26483: IN
26484: IFFALSE 26505
// points := [ 35 , 110 , 70 ] ;
26486: LD_ADDR_VAR 0 9
26490: PUSH
26491: LD_INT 35
26493: PUSH
26494: LD_INT 110
26496: PUSH
26497: LD_INT 70
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: LIST
26504: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
26505: LD_VAR 0 6
26509: PPUSH
26510: CALL_OW 265
26514: PUSH
26515: LD_INT 25
26517: EQUAL
26518: IFFALSE 26539
// points := [ 80 , 65 , 100 ] ;
26520: LD_ADDR_VAR 0 9
26524: PUSH
26525: LD_INT 80
26527: PUSH
26528: LD_INT 65
26530: PUSH
26531: LD_INT 100
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: LIST
26538: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
26539: LD_VAR 0 6
26543: PPUSH
26544: CALL_OW 263
26548: PUSH
26549: LD_INT 1
26551: EQUAL
26552: IFFALSE 26587
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
26554: LD_ADDR_VAR 0 10
26558: PUSH
26559: LD_VAR 0 10
26563: PUSH
26564: LD_VAR 0 6
26568: PPUSH
26569: CALL_OW 311
26573: PPUSH
26574: LD_INT 3
26576: PPUSH
26577: CALL_OW 259
26581: PUSH
26582: LD_INT 4
26584: MUL
26585: MUL
26586: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
26587: LD_VAR 0 6
26591: PPUSH
26592: CALL_OW 263
26596: PUSH
26597: LD_INT 2
26599: EQUAL
26600: IFFALSE 26651
// begin j := IsControledBy ( i ) ;
26602: LD_ADDR_VAR 0 7
26606: PUSH
26607: LD_VAR 0 6
26611: PPUSH
26612: CALL_OW 312
26616: ST_TO_ADDR
// if j then
26617: LD_VAR 0 7
26621: IFFALSE 26651
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
26623: LD_ADDR_VAR 0 10
26627: PUSH
26628: LD_VAR 0 10
26632: PUSH
26633: LD_VAR 0 7
26637: PPUSH
26638: LD_INT 3
26640: PPUSH
26641: CALL_OW 259
26645: PUSH
26646: LD_INT 3
26648: MUL
26649: MUL
26650: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
26651: LD_VAR 0 6
26655: PPUSH
26656: CALL_OW 264
26660: PUSH
26661: LD_INT 5
26663: PUSH
26664: LD_INT 6
26666: PUSH
26667: LD_INT 46
26669: PUSH
26670: LD_INT 44
26672: PUSH
26673: LD_INT 47
26675: PUSH
26676: LD_INT 45
26678: PUSH
26679: LD_INT 28
26681: PUSH
26682: LD_INT 7
26684: PUSH
26685: LD_INT 27
26687: PUSH
26688: LD_INT 29
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: IN
26703: PUSH
26704: LD_VAR 0 1
26708: PPUSH
26709: LD_INT 52
26711: PPUSH
26712: CALL_OW 321
26716: PUSH
26717: LD_INT 2
26719: EQUAL
26720: AND
26721: IFFALSE 26738
// bpoints := bpoints * 1.2 ;
26723: LD_ADDR_VAR 0 10
26727: PUSH
26728: LD_VAR 0 10
26732: PUSH
26733: LD_REAL  1.20000000000000E+0000
26736: MUL
26737: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
26738: LD_VAR 0 6
26742: PPUSH
26743: CALL_OW 264
26747: PUSH
26748: LD_INT 6
26750: PUSH
26751: LD_INT 46
26753: PUSH
26754: LD_INT 47
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: LIST
26761: IN
26762: IFFALSE 26779
// bpoints := bpoints * 1.2 ;
26764: LD_ADDR_VAR 0 10
26768: PUSH
26769: LD_VAR 0 10
26773: PUSH
26774: LD_REAL  1.20000000000000E+0000
26777: MUL
26778: ST_TO_ADDR
// end ; unit_building :
26779: GO 26793
26781: LD_INT 3
26783: DOUBLE
26784: EQUAL
26785: IFTRUE 26789
26787: GO 26792
26789: POP
// ; end ;
26790: GO 26793
26792: POP
// for j = 1 to 3 do
26793: LD_ADDR_VAR 0 7
26797: PUSH
26798: DOUBLE
26799: LD_INT 1
26801: DEC
26802: ST_TO_ADDR
26803: LD_INT 3
26805: PUSH
26806: FOR_TO
26807: IFFALSE 26860
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
26809: LD_ADDR_VAR 0 5
26813: PUSH
26814: LD_VAR 0 5
26818: PPUSH
26819: LD_VAR 0 7
26823: PPUSH
26824: LD_VAR 0 5
26828: PUSH
26829: LD_VAR 0 7
26833: ARRAY
26834: PUSH
26835: LD_VAR 0 9
26839: PUSH
26840: LD_VAR 0 7
26844: ARRAY
26845: PUSH
26846: LD_VAR 0 10
26850: MUL
26851: PLUS
26852: PPUSH
26853: CALL_OW 1
26857: ST_TO_ADDR
26858: GO 26806
26860: POP
26861: POP
// end ;
26862: GO 25345
26864: POP
26865: POP
// result := Replace ( result , 4 , tmp ) ;
26866: LD_ADDR_VAR 0 5
26870: PUSH
26871: LD_VAR 0 5
26875: PPUSH
26876: LD_INT 4
26878: PPUSH
26879: LD_VAR 0 8
26883: PPUSH
26884: CALL_OW 1
26888: ST_TO_ADDR
// end ;
26889: LD_VAR 0 5
26893: RET
// export function DangerAtRange ( unit , range ) ; begin
26894: LD_INT 0
26896: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
26897: LD_ADDR_VAR 0 3
26901: PUSH
26902: LD_VAR 0 1
26906: PPUSH
26907: CALL_OW 255
26911: PPUSH
26912: LD_VAR 0 1
26916: PPUSH
26917: CALL_OW 250
26921: PPUSH
26922: LD_VAR 0 1
26926: PPUSH
26927: CALL_OW 251
26931: PPUSH
26932: LD_VAR 0 2
26936: PPUSH
26937: CALL 25197 0 4
26941: ST_TO_ADDR
// end ;
26942: LD_VAR 0 3
26946: RET
// export function DangerInArea ( side , area ) ; begin
26947: LD_INT 0
26949: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
26950: LD_ADDR_VAR 0 3
26954: PUSH
26955: LD_VAR 0 2
26959: PPUSH
26960: LD_INT 81
26962: PUSH
26963: LD_VAR 0 1
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PPUSH
26972: CALL_OW 70
26976: ST_TO_ADDR
// end ;
26977: LD_VAR 0 3
26981: RET
// export function IsExtension ( b ) ; begin
26982: LD_INT 0
26984: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
26985: LD_ADDR_VAR 0 2
26989: PUSH
26990: LD_VAR 0 1
26994: PUSH
26995: LD_INT 23
26997: PUSH
26998: LD_INT 20
27000: PUSH
27001: LD_INT 22
27003: PUSH
27004: LD_INT 17
27006: PUSH
27007: LD_INT 24
27009: PUSH
27010: LD_INT 21
27012: PUSH
27013: LD_INT 19
27015: PUSH
27016: LD_INT 16
27018: PUSH
27019: LD_INT 25
27021: PUSH
27022: LD_INT 18
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: IN
27037: ST_TO_ADDR
// end ;
27038: LD_VAR 0 2
27042: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
27043: LD_INT 0
27045: PPUSH
27046: PPUSH
27047: PPUSH
// result := [ ] ;
27048: LD_ADDR_VAR 0 3
27052: PUSH
27053: EMPTY
27054: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27055: LD_ADDR_VAR 0 4
27059: PUSH
27060: LD_VAR 0 2
27064: PPUSH
27065: LD_INT 21
27067: PUSH
27068: LD_INT 3
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PPUSH
27075: CALL_OW 70
27079: ST_TO_ADDR
// if not tmp then
27080: LD_VAR 0 4
27084: NOT
27085: IFFALSE 27089
// exit ;
27087: GO 27147
// for i in tmp do
27089: LD_ADDR_VAR 0 5
27093: PUSH
27094: LD_VAR 0 4
27098: PUSH
27099: FOR_IN
27100: IFFALSE 27135
// if GetBase ( i ) <> base then
27102: LD_VAR 0 5
27106: PPUSH
27107: CALL_OW 274
27111: PUSH
27112: LD_VAR 0 1
27116: NONEQUAL
27117: IFFALSE 27133
// ComLinkToBase ( base , i ) ;
27119: LD_VAR 0 1
27123: PPUSH
27124: LD_VAR 0 5
27128: PPUSH
27129: CALL_OW 169
27133: GO 27099
27135: POP
27136: POP
// result := tmp ;
27137: LD_ADDR_VAR 0 3
27141: PUSH
27142: LD_VAR 0 4
27146: ST_TO_ADDR
// end ;
27147: LD_VAR 0 3
27151: RET
// export function ComComplete ( unit , b ) ; var i ; begin
27152: LD_INT 0
27154: PPUSH
27155: PPUSH
// if BuildingStatus ( b ) = bs_build then
27156: LD_VAR 0 2
27160: PPUSH
27161: CALL_OW 461
27165: PUSH
27166: LD_INT 1
27168: EQUAL
27169: IFFALSE 27229
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27171: LD_VAR 0 1
27175: PPUSH
27176: LD_STRING h
27178: PUSH
27179: LD_VAR 0 2
27183: PPUSH
27184: CALL_OW 250
27188: PUSH
27189: LD_VAR 0 2
27193: PPUSH
27194: CALL_OW 251
27198: PUSH
27199: LD_VAR 0 2
27203: PUSH
27204: LD_INT 0
27206: PUSH
27207: LD_INT 0
27209: PUSH
27210: LD_INT 0
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: PUSH
27222: EMPTY
27223: LIST
27224: PPUSH
27225: CALL_OW 446
// end ;
27229: LD_VAR 0 3
27233: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27234: LD_INT 0
27236: PPUSH
27237: PPUSH
27238: PPUSH
27239: PPUSH
27240: PPUSH
27241: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
27242: LD_VAR 0 1
27246: NOT
27247: PUSH
27248: LD_VAR 0 1
27252: PPUSH
27253: CALL_OW 263
27257: PUSH
27258: LD_INT 2
27260: EQUAL
27261: NOT
27262: OR
27263: IFFALSE 27267
// exit ;
27265: GO 27583
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27267: LD_ADDR_VAR 0 6
27271: PUSH
27272: LD_INT 22
27274: PUSH
27275: LD_VAR 0 1
27279: PPUSH
27280: CALL_OW 255
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 2
27291: PUSH
27292: LD_INT 30
27294: PUSH
27295: LD_INT 36
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 34
27304: PUSH
27305: LD_INT 31
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: LIST
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PPUSH
27321: CALL_OW 69
27325: ST_TO_ADDR
// if not tmp then
27326: LD_VAR 0 6
27330: NOT
27331: IFFALSE 27335
// exit ;
27333: GO 27583
// result := [ ] ;
27335: LD_ADDR_VAR 0 2
27339: PUSH
27340: EMPTY
27341: ST_TO_ADDR
// for i in tmp do
27342: LD_ADDR_VAR 0 3
27346: PUSH
27347: LD_VAR 0 6
27351: PUSH
27352: FOR_IN
27353: IFFALSE 27424
// begin t := UnitsInside ( i ) ;
27355: LD_ADDR_VAR 0 4
27359: PUSH
27360: LD_VAR 0 3
27364: PPUSH
27365: CALL_OW 313
27369: ST_TO_ADDR
// if t then
27370: LD_VAR 0 4
27374: IFFALSE 27422
// for j in t do
27376: LD_ADDR_VAR 0 7
27380: PUSH
27381: LD_VAR 0 4
27385: PUSH
27386: FOR_IN
27387: IFFALSE 27420
// result := Insert ( result , result + 1 , j ) ;
27389: LD_ADDR_VAR 0 2
27393: PUSH
27394: LD_VAR 0 2
27398: PPUSH
27399: LD_VAR 0 2
27403: PUSH
27404: LD_INT 1
27406: PLUS
27407: PPUSH
27408: LD_VAR 0 7
27412: PPUSH
27413: CALL_OW 2
27417: ST_TO_ADDR
27418: GO 27386
27420: POP
27421: POP
// end ;
27422: GO 27352
27424: POP
27425: POP
// if not result then
27426: LD_VAR 0 2
27430: NOT
27431: IFFALSE 27435
// exit ;
27433: GO 27583
// mech := result [ 1 ] ;
27435: LD_ADDR_VAR 0 5
27439: PUSH
27440: LD_VAR 0 2
27444: PUSH
27445: LD_INT 1
27447: ARRAY
27448: ST_TO_ADDR
// if result > 1 then
27449: LD_VAR 0 2
27453: PUSH
27454: LD_INT 1
27456: GREATER
27457: IFFALSE 27569
// for i = 2 to result do
27459: LD_ADDR_VAR 0 3
27463: PUSH
27464: DOUBLE
27465: LD_INT 2
27467: DEC
27468: ST_TO_ADDR
27469: LD_VAR 0 2
27473: PUSH
27474: FOR_TO
27475: IFFALSE 27567
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
27477: LD_ADDR_VAR 0 4
27481: PUSH
27482: LD_VAR 0 2
27486: PUSH
27487: LD_VAR 0 3
27491: ARRAY
27492: PPUSH
27493: LD_INT 3
27495: PPUSH
27496: CALL_OW 259
27500: PUSH
27501: LD_VAR 0 2
27505: PUSH
27506: LD_VAR 0 3
27510: ARRAY
27511: PPUSH
27512: CALL_OW 432
27516: MINUS
27517: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
27518: LD_VAR 0 4
27522: PUSH
27523: LD_VAR 0 5
27527: PPUSH
27528: LD_INT 3
27530: PPUSH
27531: CALL_OW 259
27535: PUSH
27536: LD_VAR 0 5
27540: PPUSH
27541: CALL_OW 432
27545: MINUS
27546: GREATEREQUAL
27547: IFFALSE 27565
// mech := result [ i ] ;
27549: LD_ADDR_VAR 0 5
27553: PUSH
27554: LD_VAR 0 2
27558: PUSH
27559: LD_VAR 0 3
27563: ARRAY
27564: ST_TO_ADDR
// end ;
27565: GO 27474
27567: POP
27568: POP
// ComLinkTo ( vehicle , mech ) ;
27569: LD_VAR 0 1
27573: PPUSH
27574: LD_VAR 0 5
27578: PPUSH
27579: CALL_OW 135
// end ;
27583: LD_VAR 0 2
27587: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
27588: LD_INT 0
27590: PPUSH
27591: PPUSH
27592: PPUSH
27593: PPUSH
27594: PPUSH
27595: PPUSH
27596: PPUSH
27597: PPUSH
27598: PPUSH
27599: PPUSH
27600: PPUSH
27601: PPUSH
27602: PPUSH
// result := [ ] ;
27603: LD_ADDR_VAR 0 7
27607: PUSH
27608: EMPTY
27609: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
27610: LD_VAR 0 1
27614: PPUSH
27615: CALL_OW 266
27619: PUSH
27620: LD_INT 0
27622: PUSH
27623: LD_INT 1
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: IN
27630: NOT
27631: IFFALSE 27635
// exit ;
27633: GO 29266
// if name then
27635: LD_VAR 0 3
27639: IFFALSE 27655
// SetBName ( base_dep , name ) ;
27641: LD_VAR 0 1
27645: PPUSH
27646: LD_VAR 0 3
27650: PPUSH
27651: CALL_OW 500
// base := GetBase ( base_dep ) ;
27655: LD_ADDR_VAR 0 15
27659: PUSH
27660: LD_VAR 0 1
27664: PPUSH
27665: CALL_OW 274
27669: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
27670: LD_ADDR_VAR 0 16
27674: PUSH
27675: LD_VAR 0 1
27679: PPUSH
27680: CALL_OW 255
27684: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
27685: LD_ADDR_VAR 0 17
27689: PUSH
27690: LD_VAR 0 1
27694: PPUSH
27695: CALL_OW 248
27699: ST_TO_ADDR
// if sources then
27700: LD_VAR 0 5
27704: IFFALSE 27751
// for i = 1 to 3 do
27706: LD_ADDR_VAR 0 8
27710: PUSH
27711: DOUBLE
27712: LD_INT 1
27714: DEC
27715: ST_TO_ADDR
27716: LD_INT 3
27718: PUSH
27719: FOR_TO
27720: IFFALSE 27749
// AddResourceType ( base , i , sources [ i ] ) ;
27722: LD_VAR 0 15
27726: PPUSH
27727: LD_VAR 0 8
27731: PPUSH
27732: LD_VAR 0 5
27736: PUSH
27737: LD_VAR 0 8
27741: ARRAY
27742: PPUSH
27743: CALL_OW 276
27747: GO 27719
27749: POP
27750: POP
// buildings := GetBaseBuildings ( base , area ) ;
27751: LD_ADDR_VAR 0 18
27755: PUSH
27756: LD_VAR 0 15
27760: PPUSH
27761: LD_VAR 0 2
27765: PPUSH
27766: CALL 27043 0 2
27770: ST_TO_ADDR
// InitHc ;
27771: CALL_OW 19
// InitUc ;
27775: CALL_OW 18
// uc_side := side ;
27779: LD_ADDR_OWVAR 20
27783: PUSH
27784: LD_VAR 0 16
27788: ST_TO_ADDR
// uc_nation := nation ;
27789: LD_ADDR_OWVAR 21
27793: PUSH
27794: LD_VAR 0 17
27798: ST_TO_ADDR
// if buildings then
27799: LD_VAR 0 18
27803: IFFALSE 29125
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
27805: LD_ADDR_VAR 0 19
27809: PUSH
27810: LD_VAR 0 18
27814: PPUSH
27815: LD_INT 2
27817: PUSH
27818: LD_INT 30
27820: PUSH
27821: LD_INT 29
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 30
27830: PUSH
27831: LD_INT 30
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: LIST
27842: PPUSH
27843: CALL_OW 72
27847: ST_TO_ADDR
// if tmp then
27848: LD_VAR 0 19
27852: IFFALSE 27900
// for i in tmp do
27854: LD_ADDR_VAR 0 8
27858: PUSH
27859: LD_VAR 0 19
27863: PUSH
27864: FOR_IN
27865: IFFALSE 27898
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
27867: LD_VAR 0 8
27871: PPUSH
27872: CALL_OW 250
27876: PPUSH
27877: LD_VAR 0 8
27881: PPUSH
27882: CALL_OW 251
27886: PPUSH
27887: LD_VAR 0 16
27891: PPUSH
27892: CALL_OW 441
27896: GO 27864
27898: POP
27899: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
27900: LD_VAR 0 18
27904: PPUSH
27905: LD_INT 2
27907: PUSH
27908: LD_INT 30
27910: PUSH
27911: LD_INT 32
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: LD_INT 30
27920: PUSH
27921: LD_INT 33
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: LIST
27932: PPUSH
27933: CALL_OW 72
27937: IFFALSE 28025
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
27939: LD_ADDR_VAR 0 8
27943: PUSH
27944: LD_VAR 0 18
27948: PPUSH
27949: LD_INT 2
27951: PUSH
27952: LD_INT 30
27954: PUSH
27955: LD_INT 32
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 30
27964: PUSH
27965: LD_INT 33
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: LIST
27976: PPUSH
27977: CALL_OW 72
27981: PUSH
27982: FOR_IN
27983: IFFALSE 28023
// begin if not GetBWeapon ( i ) then
27985: LD_VAR 0 8
27989: PPUSH
27990: CALL_OW 269
27994: NOT
27995: IFFALSE 28021
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
27997: LD_VAR 0 8
28001: PPUSH
28002: LD_VAR 0 8
28006: PPUSH
28007: LD_VAR 0 2
28011: PPUSH
28012: CALL 29271 0 2
28016: PPUSH
28017: CALL_OW 431
// end ;
28021: GO 27982
28023: POP
28024: POP
// end ; for i = 1 to personel do
28025: LD_ADDR_VAR 0 8
28029: PUSH
28030: DOUBLE
28031: LD_INT 1
28033: DEC
28034: ST_TO_ADDR
28035: LD_VAR 0 6
28039: PUSH
28040: FOR_TO
28041: IFFALSE 29105
// begin if i > 4 then
28043: LD_VAR 0 8
28047: PUSH
28048: LD_INT 4
28050: GREATER
28051: IFFALSE 28055
// break ;
28053: GO 29105
// case i of 1 :
28055: LD_VAR 0 8
28059: PUSH
28060: LD_INT 1
28062: DOUBLE
28063: EQUAL
28064: IFTRUE 28068
28066: GO 28148
28068: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28069: LD_ADDR_VAR 0 12
28073: PUSH
28074: LD_VAR 0 18
28078: PPUSH
28079: LD_INT 22
28081: PUSH
28082: LD_VAR 0 16
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 58
28093: PUSH
28094: EMPTY
28095: LIST
28096: PUSH
28097: LD_INT 2
28099: PUSH
28100: LD_INT 30
28102: PUSH
28103: LD_INT 32
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 30
28112: PUSH
28113: LD_INT 4
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PUSH
28120: LD_INT 30
28122: PUSH
28123: LD_INT 5
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: LIST
28140: PPUSH
28141: CALL_OW 72
28145: ST_TO_ADDR
28146: GO 28370
28148: LD_INT 2
28150: DOUBLE
28151: EQUAL
28152: IFTRUE 28156
28154: GO 28218
28156: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28157: LD_ADDR_VAR 0 12
28161: PUSH
28162: LD_VAR 0 18
28166: PPUSH
28167: LD_INT 22
28169: PUSH
28170: LD_VAR 0 16
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 2
28181: PUSH
28182: LD_INT 30
28184: PUSH
28185: LD_INT 0
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 30
28194: PUSH
28195: LD_INT 1
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: LIST
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PPUSH
28211: CALL_OW 72
28215: ST_TO_ADDR
28216: GO 28370
28218: LD_INT 3
28220: DOUBLE
28221: EQUAL
28222: IFTRUE 28226
28224: GO 28288
28226: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28227: LD_ADDR_VAR 0 12
28231: PUSH
28232: LD_VAR 0 18
28236: PPUSH
28237: LD_INT 22
28239: PUSH
28240: LD_VAR 0 16
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 2
28251: PUSH
28252: LD_INT 30
28254: PUSH
28255: LD_INT 2
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 30
28264: PUSH
28265: LD_INT 3
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: LIST
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PPUSH
28281: CALL_OW 72
28285: ST_TO_ADDR
28286: GO 28370
28288: LD_INT 4
28290: DOUBLE
28291: EQUAL
28292: IFTRUE 28296
28294: GO 28369
28296: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28297: LD_ADDR_VAR 0 12
28301: PUSH
28302: LD_VAR 0 18
28306: PPUSH
28307: LD_INT 22
28309: PUSH
28310: LD_VAR 0 16
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: LD_INT 2
28321: PUSH
28322: LD_INT 30
28324: PUSH
28325: LD_INT 6
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 30
28334: PUSH
28335: LD_INT 7
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: PUSH
28342: LD_INT 30
28344: PUSH
28345: LD_INT 8
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PPUSH
28362: CALL_OW 72
28366: ST_TO_ADDR
28367: GO 28370
28369: POP
// if i = 1 then
28370: LD_VAR 0 8
28374: PUSH
28375: LD_INT 1
28377: EQUAL
28378: IFFALSE 28489
// begin tmp := [ ] ;
28380: LD_ADDR_VAR 0 19
28384: PUSH
28385: EMPTY
28386: ST_TO_ADDR
// for j in f do
28387: LD_ADDR_VAR 0 9
28391: PUSH
28392: LD_VAR 0 12
28396: PUSH
28397: FOR_IN
28398: IFFALSE 28471
// if GetBType ( j ) = b_bunker then
28400: LD_VAR 0 9
28404: PPUSH
28405: CALL_OW 266
28409: PUSH
28410: LD_INT 32
28412: EQUAL
28413: IFFALSE 28440
// tmp := Insert ( tmp , 1 , j ) else
28415: LD_ADDR_VAR 0 19
28419: PUSH
28420: LD_VAR 0 19
28424: PPUSH
28425: LD_INT 1
28427: PPUSH
28428: LD_VAR 0 9
28432: PPUSH
28433: CALL_OW 2
28437: ST_TO_ADDR
28438: GO 28469
// tmp := Insert ( tmp , tmp + 1 , j ) ;
28440: LD_ADDR_VAR 0 19
28444: PUSH
28445: LD_VAR 0 19
28449: PPUSH
28450: LD_VAR 0 19
28454: PUSH
28455: LD_INT 1
28457: PLUS
28458: PPUSH
28459: LD_VAR 0 9
28463: PPUSH
28464: CALL_OW 2
28468: ST_TO_ADDR
28469: GO 28397
28471: POP
28472: POP
// if tmp then
28473: LD_VAR 0 19
28477: IFFALSE 28489
// f := tmp ;
28479: LD_ADDR_VAR 0 12
28483: PUSH
28484: LD_VAR 0 19
28488: ST_TO_ADDR
// end ; x := personel [ i ] ;
28489: LD_ADDR_VAR 0 13
28493: PUSH
28494: LD_VAR 0 6
28498: PUSH
28499: LD_VAR 0 8
28503: ARRAY
28504: ST_TO_ADDR
// if x = - 1 then
28505: LD_VAR 0 13
28509: PUSH
28510: LD_INT 1
28512: NEG
28513: EQUAL
28514: IFFALSE 28723
// begin for j in f do
28516: LD_ADDR_VAR 0 9
28520: PUSH
28521: LD_VAR 0 12
28525: PUSH
28526: FOR_IN
28527: IFFALSE 28719
// repeat InitHc ;
28529: CALL_OW 19
// if GetBType ( j ) = b_barracks then
28533: LD_VAR 0 9
28537: PPUSH
28538: CALL_OW 266
28542: PUSH
28543: LD_INT 5
28545: EQUAL
28546: IFFALSE 28616
// begin if UnitsInside ( j ) < 3 then
28548: LD_VAR 0 9
28552: PPUSH
28553: CALL_OW 313
28557: PUSH
28558: LD_INT 3
28560: LESS
28561: IFFALSE 28597
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28563: LD_INT 0
28565: PPUSH
28566: LD_INT 5
28568: PUSH
28569: LD_INT 8
28571: PUSH
28572: LD_INT 9
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: LIST
28579: PUSH
28580: LD_VAR 0 17
28584: ARRAY
28585: PPUSH
28586: LD_VAR 0 4
28590: PPUSH
28591: CALL_OW 380
28595: GO 28614
// PrepareHuman ( false , i , skill ) ;
28597: LD_INT 0
28599: PPUSH
28600: LD_VAR 0 8
28604: PPUSH
28605: LD_VAR 0 4
28609: PPUSH
28610: CALL_OW 380
// end else
28614: GO 28633
// PrepareHuman ( false , i , skill ) ;
28616: LD_INT 0
28618: PPUSH
28619: LD_VAR 0 8
28623: PPUSH
28624: LD_VAR 0 4
28628: PPUSH
28629: CALL_OW 380
// un := CreateHuman ;
28633: LD_ADDR_VAR 0 14
28637: PUSH
28638: CALL_OW 44
28642: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28643: LD_ADDR_VAR 0 7
28647: PUSH
28648: LD_VAR 0 7
28652: PPUSH
28653: LD_INT 1
28655: PPUSH
28656: LD_VAR 0 14
28660: PPUSH
28661: CALL_OW 2
28665: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
28666: LD_VAR 0 14
28670: PPUSH
28671: LD_VAR 0 9
28675: PPUSH
28676: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
28680: LD_VAR 0 9
28684: PPUSH
28685: CALL_OW 313
28689: PUSH
28690: LD_INT 6
28692: EQUAL
28693: PUSH
28694: LD_VAR 0 9
28698: PPUSH
28699: CALL_OW 266
28703: PUSH
28704: LD_INT 32
28706: PUSH
28707: LD_INT 31
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: IN
28714: OR
28715: IFFALSE 28529
28717: GO 28526
28719: POP
28720: POP
// end else
28721: GO 29103
// for j = 1 to x do
28723: LD_ADDR_VAR 0 9
28727: PUSH
28728: DOUBLE
28729: LD_INT 1
28731: DEC
28732: ST_TO_ADDR
28733: LD_VAR 0 13
28737: PUSH
28738: FOR_TO
28739: IFFALSE 29101
// begin InitHc ;
28741: CALL_OW 19
// if not f then
28745: LD_VAR 0 12
28749: NOT
28750: IFFALSE 28839
// begin PrepareHuman ( false , i , skill ) ;
28752: LD_INT 0
28754: PPUSH
28755: LD_VAR 0 8
28759: PPUSH
28760: LD_VAR 0 4
28764: PPUSH
28765: CALL_OW 380
// un := CreateHuman ;
28769: LD_ADDR_VAR 0 14
28773: PUSH
28774: CALL_OW 44
28778: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28779: LD_ADDR_VAR 0 7
28783: PUSH
28784: LD_VAR 0 7
28788: PPUSH
28789: LD_INT 1
28791: PPUSH
28792: LD_VAR 0 14
28796: PPUSH
28797: CALL_OW 2
28801: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
28802: LD_VAR 0 14
28806: PPUSH
28807: LD_VAR 0 1
28811: PPUSH
28812: CALL_OW 250
28816: PPUSH
28817: LD_VAR 0 1
28821: PPUSH
28822: CALL_OW 251
28826: PPUSH
28827: LD_INT 10
28829: PPUSH
28830: LD_INT 0
28832: PPUSH
28833: CALL_OW 50
// continue ;
28837: GO 28738
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
28839: LD_VAR 0 12
28843: PUSH
28844: LD_INT 1
28846: ARRAY
28847: PPUSH
28848: CALL_OW 313
28852: PUSH
28853: LD_VAR 0 12
28857: PUSH
28858: LD_INT 1
28860: ARRAY
28861: PPUSH
28862: CALL_OW 266
28866: PUSH
28867: LD_INT 32
28869: PUSH
28870: LD_INT 31
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: IN
28877: AND
28878: PUSH
28879: LD_VAR 0 12
28883: PUSH
28884: LD_INT 1
28886: ARRAY
28887: PPUSH
28888: CALL_OW 313
28892: PUSH
28893: LD_INT 6
28895: EQUAL
28896: OR
28897: IFFALSE 28917
// f := Delete ( f , 1 ) ;
28899: LD_ADDR_VAR 0 12
28903: PUSH
28904: LD_VAR 0 12
28908: PPUSH
28909: LD_INT 1
28911: PPUSH
28912: CALL_OW 3
28916: ST_TO_ADDR
// if not f then
28917: LD_VAR 0 12
28921: NOT
28922: IFFALSE 28940
// begin x := x + 2 ;
28924: LD_ADDR_VAR 0 13
28928: PUSH
28929: LD_VAR 0 13
28933: PUSH
28934: LD_INT 2
28936: PLUS
28937: ST_TO_ADDR
// continue ;
28938: GO 28738
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
28940: LD_VAR 0 12
28944: PUSH
28945: LD_INT 1
28947: ARRAY
28948: PPUSH
28949: CALL_OW 266
28953: PUSH
28954: LD_INT 5
28956: EQUAL
28957: IFFALSE 29031
// begin if UnitsInside ( f [ 1 ] ) < 3 then
28959: LD_VAR 0 12
28963: PUSH
28964: LD_INT 1
28966: ARRAY
28967: PPUSH
28968: CALL_OW 313
28972: PUSH
28973: LD_INT 3
28975: LESS
28976: IFFALSE 29012
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28978: LD_INT 0
28980: PPUSH
28981: LD_INT 5
28983: PUSH
28984: LD_INT 8
28986: PUSH
28987: LD_INT 9
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: LIST
28994: PUSH
28995: LD_VAR 0 17
28999: ARRAY
29000: PPUSH
29001: LD_VAR 0 4
29005: PPUSH
29006: CALL_OW 380
29010: GO 29029
// PrepareHuman ( false , i , skill ) ;
29012: LD_INT 0
29014: PPUSH
29015: LD_VAR 0 8
29019: PPUSH
29020: LD_VAR 0 4
29024: PPUSH
29025: CALL_OW 380
// end else
29029: GO 29048
// PrepareHuman ( false , i , skill ) ;
29031: LD_INT 0
29033: PPUSH
29034: LD_VAR 0 8
29038: PPUSH
29039: LD_VAR 0 4
29043: PPUSH
29044: CALL_OW 380
// un := CreateHuman ;
29048: LD_ADDR_VAR 0 14
29052: PUSH
29053: CALL_OW 44
29057: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29058: LD_ADDR_VAR 0 7
29062: PUSH
29063: LD_VAR 0 7
29067: PPUSH
29068: LD_INT 1
29070: PPUSH
29071: LD_VAR 0 14
29075: PPUSH
29076: CALL_OW 2
29080: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29081: LD_VAR 0 14
29085: PPUSH
29086: LD_VAR 0 12
29090: PUSH
29091: LD_INT 1
29093: ARRAY
29094: PPUSH
29095: CALL_OW 52
// end ;
29099: GO 28738
29101: POP
29102: POP
// end ;
29103: GO 28040
29105: POP
29106: POP
// result := result ^ buildings ;
29107: LD_ADDR_VAR 0 7
29111: PUSH
29112: LD_VAR 0 7
29116: PUSH
29117: LD_VAR 0 18
29121: ADD
29122: ST_TO_ADDR
// end else
29123: GO 29266
// begin for i = 1 to personel do
29125: LD_ADDR_VAR 0 8
29129: PUSH
29130: DOUBLE
29131: LD_INT 1
29133: DEC
29134: ST_TO_ADDR
29135: LD_VAR 0 6
29139: PUSH
29140: FOR_TO
29141: IFFALSE 29264
// begin if i > 4 then
29143: LD_VAR 0 8
29147: PUSH
29148: LD_INT 4
29150: GREATER
29151: IFFALSE 29155
// break ;
29153: GO 29264
// x := personel [ i ] ;
29155: LD_ADDR_VAR 0 13
29159: PUSH
29160: LD_VAR 0 6
29164: PUSH
29165: LD_VAR 0 8
29169: ARRAY
29170: ST_TO_ADDR
// if x = - 1 then
29171: LD_VAR 0 13
29175: PUSH
29176: LD_INT 1
29178: NEG
29179: EQUAL
29180: IFFALSE 29184
// continue ;
29182: GO 29140
// PrepareHuman ( false , i , skill ) ;
29184: LD_INT 0
29186: PPUSH
29187: LD_VAR 0 8
29191: PPUSH
29192: LD_VAR 0 4
29196: PPUSH
29197: CALL_OW 380
// un := CreateHuman ;
29201: LD_ADDR_VAR 0 14
29205: PUSH
29206: CALL_OW 44
29210: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29211: LD_VAR 0 14
29215: PPUSH
29216: LD_VAR 0 1
29220: PPUSH
29221: CALL_OW 250
29225: PPUSH
29226: LD_VAR 0 1
29230: PPUSH
29231: CALL_OW 251
29235: PPUSH
29236: LD_INT 10
29238: PPUSH
29239: LD_INT 0
29241: PPUSH
29242: CALL_OW 50
// result := result ^ un ;
29246: LD_ADDR_VAR 0 7
29250: PUSH
29251: LD_VAR 0 7
29255: PUSH
29256: LD_VAR 0 14
29260: ADD
29261: ST_TO_ADDR
// end ;
29262: GO 29140
29264: POP
29265: POP
// end ; end ;
29266: LD_VAR 0 7
29270: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29271: LD_INT 0
29273: PPUSH
29274: PPUSH
29275: PPUSH
29276: PPUSH
29277: PPUSH
29278: PPUSH
29279: PPUSH
29280: PPUSH
29281: PPUSH
29282: PPUSH
29283: PPUSH
29284: PPUSH
29285: PPUSH
29286: PPUSH
29287: PPUSH
29288: PPUSH
// result := false ;
29289: LD_ADDR_VAR 0 3
29293: PUSH
29294: LD_INT 0
29296: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29297: LD_VAR 0 1
29301: NOT
29302: PUSH
29303: LD_VAR 0 1
29307: PPUSH
29308: CALL_OW 266
29312: PUSH
29313: LD_INT 32
29315: PUSH
29316: LD_INT 33
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: IN
29323: NOT
29324: OR
29325: IFFALSE 29329
// exit ;
29327: GO 30465
// nat := GetNation ( tower ) ;
29329: LD_ADDR_VAR 0 12
29333: PUSH
29334: LD_VAR 0 1
29338: PPUSH
29339: CALL_OW 248
29343: ST_TO_ADDR
// side := GetSide ( tower ) ;
29344: LD_ADDR_VAR 0 16
29348: PUSH
29349: LD_VAR 0 1
29353: PPUSH
29354: CALL_OW 255
29358: ST_TO_ADDR
// x := GetX ( tower ) ;
29359: LD_ADDR_VAR 0 10
29363: PUSH
29364: LD_VAR 0 1
29368: PPUSH
29369: CALL_OW 250
29373: ST_TO_ADDR
// y := GetY ( tower ) ;
29374: LD_ADDR_VAR 0 11
29378: PUSH
29379: LD_VAR 0 1
29383: PPUSH
29384: CALL_OW 251
29388: ST_TO_ADDR
// if not x or not y then
29389: LD_VAR 0 10
29393: NOT
29394: PUSH
29395: LD_VAR 0 11
29399: NOT
29400: OR
29401: IFFALSE 29405
// exit ;
29403: GO 30465
// weapon := 0 ;
29405: LD_ADDR_VAR 0 18
29409: PUSH
29410: LD_INT 0
29412: ST_TO_ADDR
// fac_list := [ ] ;
29413: LD_ADDR_VAR 0 17
29417: PUSH
29418: EMPTY
29419: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
29420: LD_ADDR_VAR 0 6
29424: PUSH
29425: LD_VAR 0 1
29429: PPUSH
29430: CALL_OW 274
29434: PPUSH
29435: LD_VAR 0 2
29439: PPUSH
29440: CALL 27043 0 2
29444: PPUSH
29445: LD_INT 30
29447: PUSH
29448: LD_INT 3
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PPUSH
29455: CALL_OW 72
29459: ST_TO_ADDR
// if not factories then
29460: LD_VAR 0 6
29464: NOT
29465: IFFALSE 29469
// exit ;
29467: GO 30465
// for i in factories do
29469: LD_ADDR_VAR 0 8
29473: PUSH
29474: LD_VAR 0 6
29478: PUSH
29479: FOR_IN
29480: IFFALSE 29505
// fac_list := fac_list union AvailableWeaponList ( i ) ;
29482: LD_ADDR_VAR 0 17
29486: PUSH
29487: LD_VAR 0 17
29491: PUSH
29492: LD_VAR 0 8
29496: PPUSH
29497: CALL_OW 478
29501: UNION
29502: ST_TO_ADDR
29503: GO 29479
29505: POP
29506: POP
// if not fac_list then
29507: LD_VAR 0 17
29511: NOT
29512: IFFALSE 29516
// exit ;
29514: GO 30465
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
29516: LD_ADDR_VAR 0 5
29520: PUSH
29521: LD_INT 4
29523: PUSH
29524: LD_INT 5
29526: PUSH
29527: LD_INT 9
29529: PUSH
29530: LD_INT 10
29532: PUSH
29533: LD_INT 6
29535: PUSH
29536: LD_INT 7
29538: PUSH
29539: LD_INT 11
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 27
29553: PUSH
29554: LD_INT 28
29556: PUSH
29557: LD_INT 26
29559: PUSH
29560: LD_INT 30
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: PUSH
29569: LD_INT 43
29571: PUSH
29572: LD_INT 44
29574: PUSH
29575: LD_INT 46
29577: PUSH
29578: LD_INT 45
29580: PUSH
29581: LD_INT 47
29583: PUSH
29584: LD_INT 49
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: LIST
29599: PUSH
29600: LD_VAR 0 12
29604: ARRAY
29605: ST_TO_ADDR
// for i in list do
29606: LD_ADDR_VAR 0 8
29610: PUSH
29611: LD_VAR 0 5
29615: PUSH
29616: FOR_IN
29617: IFFALSE 29650
// if not i in fac_list then
29619: LD_VAR 0 8
29623: PUSH
29624: LD_VAR 0 17
29628: IN
29629: NOT
29630: IFFALSE 29648
// list := list diff i ;
29632: LD_ADDR_VAR 0 5
29636: PUSH
29637: LD_VAR 0 5
29641: PUSH
29642: LD_VAR 0 8
29646: DIFF
29647: ST_TO_ADDR
29648: GO 29616
29650: POP
29651: POP
// if not list then
29652: LD_VAR 0 5
29656: NOT
29657: IFFALSE 29661
// exit ;
29659: GO 30465
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
29661: LD_VAR 0 12
29665: PUSH
29666: LD_INT 3
29668: EQUAL
29669: PUSH
29670: LD_INT 49
29672: PUSH
29673: LD_VAR 0 5
29677: IN
29678: AND
29679: PUSH
29680: LD_INT 31
29682: PPUSH
29683: LD_VAR 0 16
29687: PPUSH
29688: CALL_OW 321
29692: PUSH
29693: LD_INT 2
29695: EQUAL
29696: AND
29697: IFFALSE 29757
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
29699: LD_INT 22
29701: PUSH
29702: LD_VAR 0 16
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 35
29713: PUSH
29714: LD_INT 49
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 91
29723: PUSH
29724: LD_VAR 0 1
29728: PUSH
29729: LD_INT 10
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: LIST
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: LIST
29741: PPUSH
29742: CALL_OW 69
29746: NOT
29747: IFFALSE 29757
// weapon := ru_time_lapser ;
29749: LD_ADDR_VAR 0 18
29753: PUSH
29754: LD_INT 49
29756: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
29757: LD_VAR 0 12
29761: PUSH
29762: LD_INT 1
29764: PUSH
29765: LD_INT 2
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: IN
29772: PUSH
29773: LD_INT 11
29775: PUSH
29776: LD_VAR 0 5
29780: IN
29781: PUSH
29782: LD_INT 30
29784: PUSH
29785: LD_VAR 0 5
29789: IN
29790: OR
29791: AND
29792: PUSH
29793: LD_INT 6
29795: PPUSH
29796: LD_VAR 0 16
29800: PPUSH
29801: CALL_OW 321
29805: PUSH
29806: LD_INT 2
29808: EQUAL
29809: AND
29810: IFFALSE 29975
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
29812: LD_INT 22
29814: PUSH
29815: LD_VAR 0 16
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 2
29826: PUSH
29827: LD_INT 35
29829: PUSH
29830: LD_INT 11
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: LD_INT 35
29839: PUSH
29840: LD_INT 30
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 91
29854: PUSH
29855: LD_VAR 0 1
29859: PUSH
29860: LD_INT 18
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: LIST
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: LIST
29872: PPUSH
29873: CALL_OW 69
29877: NOT
29878: PUSH
29879: LD_INT 22
29881: PUSH
29882: LD_VAR 0 16
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: LD_INT 2
29893: PUSH
29894: LD_INT 30
29896: PUSH
29897: LD_INT 32
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 30
29906: PUSH
29907: LD_INT 33
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 91
29921: PUSH
29922: LD_VAR 0 1
29926: PUSH
29927: LD_INT 12
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: LIST
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: LIST
29939: PUSH
29940: EMPTY
29941: LIST
29942: PPUSH
29943: CALL_OW 69
29947: PUSH
29948: LD_INT 2
29950: GREATER
29951: AND
29952: IFFALSE 29975
// weapon := [ us_radar , ar_radar ] [ nat ] ;
29954: LD_ADDR_VAR 0 18
29958: PUSH
29959: LD_INT 11
29961: PUSH
29962: LD_INT 30
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_VAR 0 12
29973: ARRAY
29974: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
29975: LD_VAR 0 18
29979: NOT
29980: PUSH
29981: LD_INT 40
29983: PPUSH
29984: LD_VAR 0 16
29988: PPUSH
29989: CALL_OW 321
29993: PUSH
29994: LD_INT 2
29996: EQUAL
29997: AND
29998: PUSH
29999: LD_INT 7
30001: PUSH
30002: LD_VAR 0 5
30006: IN
30007: PUSH
30008: LD_INT 28
30010: PUSH
30011: LD_VAR 0 5
30015: IN
30016: OR
30017: PUSH
30018: LD_INT 45
30020: PUSH
30021: LD_VAR 0 5
30025: IN
30026: OR
30027: AND
30028: IFFALSE 30282
// begin hex := GetHexInfo ( x , y ) ;
30030: LD_ADDR_VAR 0 4
30034: PUSH
30035: LD_VAR 0 10
30039: PPUSH
30040: LD_VAR 0 11
30044: PPUSH
30045: CALL_OW 546
30049: ST_TO_ADDR
// if hex [ 1 ] then
30050: LD_VAR 0 4
30054: PUSH
30055: LD_INT 1
30057: ARRAY
30058: IFFALSE 30062
// exit ;
30060: GO 30465
// height := hex [ 2 ] ;
30062: LD_ADDR_VAR 0 15
30066: PUSH
30067: LD_VAR 0 4
30071: PUSH
30072: LD_INT 2
30074: ARRAY
30075: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30076: LD_ADDR_VAR 0 14
30080: PUSH
30081: LD_INT 0
30083: PUSH
30084: LD_INT 2
30086: PUSH
30087: LD_INT 3
30089: PUSH
30090: LD_INT 5
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: ST_TO_ADDR
// for i in tmp do
30099: LD_ADDR_VAR 0 8
30103: PUSH
30104: LD_VAR 0 14
30108: PUSH
30109: FOR_IN
30110: IFFALSE 30280
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30112: LD_ADDR_VAR 0 9
30116: PUSH
30117: LD_VAR 0 10
30121: PPUSH
30122: LD_VAR 0 8
30126: PPUSH
30127: LD_INT 5
30129: PPUSH
30130: CALL_OW 272
30134: PUSH
30135: LD_VAR 0 11
30139: PPUSH
30140: LD_VAR 0 8
30144: PPUSH
30145: LD_INT 5
30147: PPUSH
30148: CALL_OW 273
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30157: LD_VAR 0 9
30161: PUSH
30162: LD_INT 1
30164: ARRAY
30165: PPUSH
30166: LD_VAR 0 9
30170: PUSH
30171: LD_INT 2
30173: ARRAY
30174: PPUSH
30175: CALL_OW 488
30179: IFFALSE 30278
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30181: LD_ADDR_VAR 0 4
30185: PUSH
30186: LD_VAR 0 9
30190: PUSH
30191: LD_INT 1
30193: ARRAY
30194: PPUSH
30195: LD_VAR 0 9
30199: PUSH
30200: LD_INT 2
30202: ARRAY
30203: PPUSH
30204: CALL_OW 546
30208: ST_TO_ADDR
// if hex [ 1 ] then
30209: LD_VAR 0 4
30213: PUSH
30214: LD_INT 1
30216: ARRAY
30217: IFFALSE 30221
// continue ;
30219: GO 30109
// h := hex [ 2 ] ;
30221: LD_ADDR_VAR 0 13
30225: PUSH
30226: LD_VAR 0 4
30230: PUSH
30231: LD_INT 2
30233: ARRAY
30234: ST_TO_ADDR
// if h + 7 < height then
30235: LD_VAR 0 13
30239: PUSH
30240: LD_INT 7
30242: PLUS
30243: PUSH
30244: LD_VAR 0 15
30248: LESS
30249: IFFALSE 30278
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30251: LD_ADDR_VAR 0 18
30255: PUSH
30256: LD_INT 7
30258: PUSH
30259: LD_INT 28
30261: PUSH
30262: LD_INT 45
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: LIST
30269: PUSH
30270: LD_VAR 0 12
30274: ARRAY
30275: ST_TO_ADDR
// break ;
30276: GO 30280
// end ; end ; end ;
30278: GO 30109
30280: POP
30281: POP
// end ; if not weapon then
30282: LD_VAR 0 18
30286: NOT
30287: IFFALSE 30347
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30289: LD_ADDR_VAR 0 5
30293: PUSH
30294: LD_VAR 0 5
30298: PUSH
30299: LD_INT 11
30301: PUSH
30302: LD_INT 30
30304: PUSH
30305: LD_INT 49
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: LIST
30312: DIFF
30313: ST_TO_ADDR
// if not list then
30314: LD_VAR 0 5
30318: NOT
30319: IFFALSE 30323
// exit ;
30321: GO 30465
// weapon := list [ rand ( 1 , list ) ] ;
30323: LD_ADDR_VAR 0 18
30327: PUSH
30328: LD_VAR 0 5
30332: PUSH
30333: LD_INT 1
30335: PPUSH
30336: LD_VAR 0 5
30340: PPUSH
30341: CALL_OW 12
30345: ARRAY
30346: ST_TO_ADDR
// end ; if weapon then
30347: LD_VAR 0 18
30351: IFFALSE 30465
// begin tmp := CostOfWeapon ( weapon ) ;
30353: LD_ADDR_VAR 0 14
30357: PUSH
30358: LD_VAR 0 18
30362: PPUSH
30363: CALL_OW 451
30367: ST_TO_ADDR
// j := GetBase ( tower ) ;
30368: LD_ADDR_VAR 0 9
30372: PUSH
30373: LD_VAR 0 1
30377: PPUSH
30378: CALL_OW 274
30382: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30383: LD_VAR 0 9
30387: PPUSH
30388: LD_INT 1
30390: PPUSH
30391: CALL_OW 275
30395: PUSH
30396: LD_VAR 0 14
30400: PUSH
30401: LD_INT 1
30403: ARRAY
30404: GREATEREQUAL
30405: PUSH
30406: LD_VAR 0 9
30410: PPUSH
30411: LD_INT 2
30413: PPUSH
30414: CALL_OW 275
30418: PUSH
30419: LD_VAR 0 14
30423: PUSH
30424: LD_INT 2
30426: ARRAY
30427: GREATEREQUAL
30428: AND
30429: PUSH
30430: LD_VAR 0 9
30434: PPUSH
30435: LD_INT 3
30437: PPUSH
30438: CALL_OW 275
30442: PUSH
30443: LD_VAR 0 14
30447: PUSH
30448: LD_INT 3
30450: ARRAY
30451: GREATEREQUAL
30452: AND
30453: IFFALSE 30465
// result := weapon ;
30455: LD_ADDR_VAR 0 3
30459: PUSH
30460: LD_VAR 0 18
30464: ST_TO_ADDR
// end ; end ;
30465: LD_VAR 0 3
30469: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
30470: LD_INT 0
30472: PPUSH
30473: PPUSH
// result := true ;
30474: LD_ADDR_VAR 0 3
30478: PUSH
30479: LD_INT 1
30481: ST_TO_ADDR
// if array1 = array2 then
30482: LD_VAR 0 1
30486: PUSH
30487: LD_VAR 0 2
30491: EQUAL
30492: IFFALSE 30552
// begin for i = 1 to array1 do
30494: LD_ADDR_VAR 0 4
30498: PUSH
30499: DOUBLE
30500: LD_INT 1
30502: DEC
30503: ST_TO_ADDR
30504: LD_VAR 0 1
30508: PUSH
30509: FOR_TO
30510: IFFALSE 30548
// if array1 [ i ] <> array2 [ i ] then
30512: LD_VAR 0 1
30516: PUSH
30517: LD_VAR 0 4
30521: ARRAY
30522: PUSH
30523: LD_VAR 0 2
30527: PUSH
30528: LD_VAR 0 4
30532: ARRAY
30533: NONEQUAL
30534: IFFALSE 30546
// begin result := false ;
30536: LD_ADDR_VAR 0 3
30540: PUSH
30541: LD_INT 0
30543: ST_TO_ADDR
// break ;
30544: GO 30548
// end ;
30546: GO 30509
30548: POP
30549: POP
// end else
30550: GO 30560
// result := false ;
30552: LD_ADDR_VAR 0 3
30556: PUSH
30557: LD_INT 0
30559: ST_TO_ADDR
// end ;
30560: LD_VAR 0 3
30564: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
30565: LD_INT 0
30567: PPUSH
30568: PPUSH
30569: PPUSH
// pom := GetBase ( fac ) ;
30570: LD_ADDR_VAR 0 5
30574: PUSH
30575: LD_VAR 0 1
30579: PPUSH
30580: CALL_OW 274
30584: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
30585: LD_ADDR_VAR 0 4
30589: PUSH
30590: LD_VAR 0 2
30594: PUSH
30595: LD_INT 1
30597: ARRAY
30598: PPUSH
30599: LD_VAR 0 2
30603: PUSH
30604: LD_INT 2
30606: ARRAY
30607: PPUSH
30608: LD_VAR 0 2
30612: PUSH
30613: LD_INT 3
30615: ARRAY
30616: PPUSH
30617: LD_VAR 0 2
30621: PUSH
30622: LD_INT 4
30624: ARRAY
30625: PPUSH
30626: CALL_OW 449
30630: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30631: LD_ADDR_VAR 0 3
30635: PUSH
30636: LD_VAR 0 5
30640: PPUSH
30641: LD_INT 1
30643: PPUSH
30644: CALL_OW 275
30648: PUSH
30649: LD_VAR 0 4
30653: PUSH
30654: LD_INT 1
30656: ARRAY
30657: GREATEREQUAL
30658: PUSH
30659: LD_VAR 0 5
30663: PPUSH
30664: LD_INT 2
30666: PPUSH
30667: CALL_OW 275
30671: PUSH
30672: LD_VAR 0 4
30676: PUSH
30677: LD_INT 2
30679: ARRAY
30680: GREATEREQUAL
30681: AND
30682: PUSH
30683: LD_VAR 0 5
30687: PPUSH
30688: LD_INT 3
30690: PPUSH
30691: CALL_OW 275
30695: PUSH
30696: LD_VAR 0 4
30700: PUSH
30701: LD_INT 3
30703: ARRAY
30704: GREATEREQUAL
30705: AND
30706: ST_TO_ADDR
// end ;
30707: LD_VAR 0 3
30711: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
30712: LD_INT 0
30714: PPUSH
30715: PPUSH
30716: PPUSH
30717: PPUSH
// pom := GetBase ( building ) ;
30718: LD_ADDR_VAR 0 3
30722: PUSH
30723: LD_VAR 0 1
30727: PPUSH
30728: CALL_OW 274
30732: ST_TO_ADDR
// if not pom then
30733: LD_VAR 0 3
30737: NOT
30738: IFFALSE 30742
// exit ;
30740: GO 30912
// btype := GetBType ( building ) ;
30742: LD_ADDR_VAR 0 5
30746: PUSH
30747: LD_VAR 0 1
30751: PPUSH
30752: CALL_OW 266
30756: ST_TO_ADDR
// if btype = b_armoury then
30757: LD_VAR 0 5
30761: PUSH
30762: LD_INT 4
30764: EQUAL
30765: IFFALSE 30775
// btype := b_barracks ;
30767: LD_ADDR_VAR 0 5
30771: PUSH
30772: LD_INT 5
30774: ST_TO_ADDR
// if btype = b_depot then
30775: LD_VAR 0 5
30779: PUSH
30780: LD_INT 0
30782: EQUAL
30783: IFFALSE 30793
// btype := b_warehouse ;
30785: LD_ADDR_VAR 0 5
30789: PUSH
30790: LD_INT 1
30792: ST_TO_ADDR
// if btype = b_workshop then
30793: LD_VAR 0 5
30797: PUSH
30798: LD_INT 2
30800: EQUAL
30801: IFFALSE 30811
// btype := b_factory ;
30803: LD_ADDR_VAR 0 5
30807: PUSH
30808: LD_INT 3
30810: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30811: LD_ADDR_VAR 0 4
30815: PUSH
30816: LD_VAR 0 5
30820: PPUSH
30821: LD_VAR 0 1
30825: PPUSH
30826: CALL_OW 248
30830: PPUSH
30831: CALL_OW 450
30835: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30836: LD_ADDR_VAR 0 2
30840: PUSH
30841: LD_VAR 0 3
30845: PPUSH
30846: LD_INT 1
30848: PPUSH
30849: CALL_OW 275
30853: PUSH
30854: LD_VAR 0 4
30858: PUSH
30859: LD_INT 1
30861: ARRAY
30862: GREATEREQUAL
30863: PUSH
30864: LD_VAR 0 3
30868: PPUSH
30869: LD_INT 2
30871: PPUSH
30872: CALL_OW 275
30876: PUSH
30877: LD_VAR 0 4
30881: PUSH
30882: LD_INT 2
30884: ARRAY
30885: GREATEREQUAL
30886: AND
30887: PUSH
30888: LD_VAR 0 3
30892: PPUSH
30893: LD_INT 3
30895: PPUSH
30896: CALL_OW 275
30900: PUSH
30901: LD_VAR 0 4
30905: PUSH
30906: LD_INT 3
30908: ARRAY
30909: GREATEREQUAL
30910: AND
30911: ST_TO_ADDR
// end ;
30912: LD_VAR 0 2
30916: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
30917: LD_INT 0
30919: PPUSH
30920: PPUSH
30921: PPUSH
// pom := GetBase ( building ) ;
30922: LD_ADDR_VAR 0 4
30926: PUSH
30927: LD_VAR 0 1
30931: PPUSH
30932: CALL_OW 274
30936: ST_TO_ADDR
// if not pom then
30937: LD_VAR 0 4
30941: NOT
30942: IFFALSE 30946
// exit ;
30944: GO 31047
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30946: LD_ADDR_VAR 0 5
30950: PUSH
30951: LD_VAR 0 2
30955: PPUSH
30956: LD_VAR 0 1
30960: PPUSH
30961: CALL_OW 248
30965: PPUSH
30966: CALL_OW 450
30970: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30971: LD_ADDR_VAR 0 3
30975: PUSH
30976: LD_VAR 0 4
30980: PPUSH
30981: LD_INT 1
30983: PPUSH
30984: CALL_OW 275
30988: PUSH
30989: LD_VAR 0 5
30993: PUSH
30994: LD_INT 1
30996: ARRAY
30997: GREATEREQUAL
30998: PUSH
30999: LD_VAR 0 4
31003: PPUSH
31004: LD_INT 2
31006: PPUSH
31007: CALL_OW 275
31011: PUSH
31012: LD_VAR 0 5
31016: PUSH
31017: LD_INT 2
31019: ARRAY
31020: GREATEREQUAL
31021: AND
31022: PUSH
31023: LD_VAR 0 4
31027: PPUSH
31028: LD_INT 3
31030: PPUSH
31031: CALL_OW 275
31035: PUSH
31036: LD_VAR 0 5
31040: PUSH
31041: LD_INT 3
31043: ARRAY
31044: GREATEREQUAL
31045: AND
31046: ST_TO_ADDR
// end ;
31047: LD_VAR 0 3
31051: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
31052: LD_INT 0
31054: PPUSH
31055: PPUSH
31056: PPUSH
31057: PPUSH
31058: PPUSH
31059: PPUSH
31060: PPUSH
31061: PPUSH
31062: PPUSH
31063: PPUSH
// result := false ;
31064: LD_ADDR_VAR 0 6
31068: PUSH
31069: LD_INT 0
31071: ST_TO_ADDR
// if not base or not btype or not x or not y then
31072: LD_VAR 0 1
31076: NOT
31077: PUSH
31078: LD_VAR 0 2
31082: NOT
31083: OR
31084: PUSH
31085: LD_VAR 0 3
31089: NOT
31090: OR
31091: PUSH
31092: LD_VAR 0 4
31096: NOT
31097: OR
31098: IFFALSE 31102
// exit ;
31100: GO 31711
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
31102: LD_ADDR_VAR 0 12
31106: PUSH
31107: LD_VAR 0 2
31111: PPUSH
31112: LD_VAR 0 3
31116: PPUSH
31117: LD_VAR 0 4
31121: PPUSH
31122: LD_VAR 0 5
31126: PPUSH
31127: LD_VAR 0 1
31131: PUSH
31132: LD_INT 1
31134: ARRAY
31135: PPUSH
31136: CALL_OW 248
31140: PPUSH
31141: LD_INT 0
31143: PPUSH
31144: CALL 32548 0 6
31148: ST_TO_ADDR
// if not hexes then
31149: LD_VAR 0 12
31153: NOT
31154: IFFALSE 31158
// exit ;
31156: GO 31711
// for i = 1 to hexes do
31158: LD_ADDR_VAR 0 7
31162: PUSH
31163: DOUBLE
31164: LD_INT 1
31166: DEC
31167: ST_TO_ADDR
31168: LD_VAR 0 12
31172: PUSH
31173: FOR_TO
31174: IFFALSE 31709
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31176: LD_ADDR_VAR 0 11
31180: PUSH
31181: LD_VAR 0 12
31185: PUSH
31186: LD_VAR 0 7
31190: ARRAY
31191: PUSH
31192: LD_INT 1
31194: ARRAY
31195: PPUSH
31196: LD_VAR 0 12
31200: PUSH
31201: LD_VAR 0 7
31205: ARRAY
31206: PUSH
31207: LD_INT 2
31209: ARRAY
31210: PPUSH
31211: CALL_OW 428
31215: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31216: LD_VAR 0 12
31220: PUSH
31221: LD_VAR 0 7
31225: ARRAY
31226: PUSH
31227: LD_INT 1
31229: ARRAY
31230: PPUSH
31231: LD_VAR 0 12
31235: PUSH
31236: LD_VAR 0 7
31240: ARRAY
31241: PUSH
31242: LD_INT 2
31244: ARRAY
31245: PPUSH
31246: CALL_OW 351
31250: PUSH
31251: LD_VAR 0 12
31255: PUSH
31256: LD_VAR 0 7
31260: ARRAY
31261: PUSH
31262: LD_INT 1
31264: ARRAY
31265: PPUSH
31266: LD_VAR 0 12
31270: PUSH
31271: LD_VAR 0 7
31275: ARRAY
31276: PUSH
31277: LD_INT 2
31279: ARRAY
31280: PPUSH
31281: CALL_OW 488
31285: NOT
31286: OR
31287: PUSH
31288: LD_VAR 0 11
31292: PPUSH
31293: CALL_OW 247
31297: PUSH
31298: LD_INT 3
31300: EQUAL
31301: OR
31302: IFFALSE 31308
// exit ;
31304: POP
31305: POP
31306: GO 31711
// if not tmp or not tmp in base then
31308: LD_VAR 0 11
31312: NOT
31313: PUSH
31314: LD_VAR 0 11
31318: PUSH
31319: LD_VAR 0 1
31323: IN
31324: NOT
31325: OR
31326: IFFALSE 31330
// continue ;
31328: GO 31173
// result := true ;
31330: LD_ADDR_VAR 0 6
31334: PUSH
31335: LD_INT 1
31337: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31338: LD_ADDR_VAR 0 15
31342: PUSH
31343: LD_VAR 0 1
31347: PPUSH
31348: LD_INT 22
31350: PUSH
31351: LD_VAR 0 11
31355: PPUSH
31356: CALL_OW 255
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 2
31367: PUSH
31368: LD_INT 30
31370: PUSH
31371: LD_INT 0
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 30
31380: PUSH
31381: LD_INT 1
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: LIST
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PPUSH
31397: CALL_OW 72
31401: ST_TO_ADDR
// if dep then
31402: LD_VAR 0 15
31406: IFFALSE 31542
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
31408: LD_ADDR_VAR 0 14
31412: PUSH
31413: LD_VAR 0 15
31417: PUSH
31418: LD_INT 1
31420: ARRAY
31421: PPUSH
31422: CALL_OW 250
31426: PPUSH
31427: LD_VAR 0 15
31431: PUSH
31432: LD_INT 1
31434: ARRAY
31435: PPUSH
31436: CALL_OW 254
31440: PPUSH
31441: LD_INT 5
31443: PPUSH
31444: CALL_OW 272
31448: PUSH
31449: LD_VAR 0 15
31453: PUSH
31454: LD_INT 1
31456: ARRAY
31457: PPUSH
31458: CALL_OW 251
31462: PPUSH
31463: LD_VAR 0 15
31467: PUSH
31468: LD_INT 1
31470: ARRAY
31471: PPUSH
31472: CALL_OW 254
31476: PPUSH
31477: LD_INT 5
31479: PPUSH
31480: CALL_OW 273
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
31489: LD_VAR 0 14
31493: PUSH
31494: LD_INT 1
31496: ARRAY
31497: PPUSH
31498: LD_VAR 0 14
31502: PUSH
31503: LD_INT 2
31505: ARRAY
31506: PPUSH
31507: CALL_OW 488
31511: IFFALSE 31542
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
31513: LD_VAR 0 11
31517: PPUSH
31518: LD_VAR 0 14
31522: PUSH
31523: LD_INT 1
31525: ARRAY
31526: PPUSH
31527: LD_VAR 0 14
31531: PUSH
31532: LD_INT 2
31534: ARRAY
31535: PPUSH
31536: CALL_OW 111
// continue ;
31540: GO 31173
// end ; end ; r := GetDir ( tmp ) ;
31542: LD_ADDR_VAR 0 13
31546: PUSH
31547: LD_VAR 0 11
31551: PPUSH
31552: CALL_OW 254
31556: ST_TO_ADDR
// if r = 5 then
31557: LD_VAR 0 13
31561: PUSH
31562: LD_INT 5
31564: EQUAL
31565: IFFALSE 31575
// r := 0 ;
31567: LD_ADDR_VAR 0 13
31571: PUSH
31572: LD_INT 0
31574: ST_TO_ADDR
// for j = r to 5 do
31575: LD_ADDR_VAR 0 8
31579: PUSH
31580: DOUBLE
31581: LD_VAR 0 13
31585: DEC
31586: ST_TO_ADDR
31587: LD_INT 5
31589: PUSH
31590: FOR_TO
31591: IFFALSE 31705
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
31593: LD_ADDR_VAR 0 9
31597: PUSH
31598: LD_VAR 0 11
31602: PPUSH
31603: CALL_OW 250
31607: PPUSH
31608: LD_VAR 0 8
31612: PPUSH
31613: LD_INT 2
31615: PPUSH
31616: CALL_OW 272
31620: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
31621: LD_ADDR_VAR 0 10
31625: PUSH
31626: LD_VAR 0 11
31630: PPUSH
31631: CALL_OW 251
31635: PPUSH
31636: LD_VAR 0 8
31640: PPUSH
31641: LD_INT 2
31643: PPUSH
31644: CALL_OW 273
31648: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
31649: LD_VAR 0 9
31653: PPUSH
31654: LD_VAR 0 10
31658: PPUSH
31659: CALL_OW 488
31663: PUSH
31664: LD_VAR 0 9
31668: PPUSH
31669: LD_VAR 0 10
31673: PPUSH
31674: CALL_OW 428
31678: NOT
31679: AND
31680: IFFALSE 31703
// begin ComMoveXY ( tmp , _x , _y ) ;
31682: LD_VAR 0 11
31686: PPUSH
31687: LD_VAR 0 9
31691: PPUSH
31692: LD_VAR 0 10
31696: PPUSH
31697: CALL_OW 111
// break ;
31701: GO 31705
// end ; end ;
31703: GO 31590
31705: POP
31706: POP
// end ;
31707: GO 31173
31709: POP
31710: POP
// end ;
31711: LD_VAR 0 6
31715: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
31716: LD_INT 0
31718: PPUSH
31719: PPUSH
31720: PPUSH
31721: PPUSH
31722: PPUSH
31723: PPUSH
31724: PPUSH
31725: PPUSH
31726: PPUSH
31727: PPUSH
// result := false ;
31728: LD_ADDR_VAR 0 6
31732: PUSH
31733: LD_INT 0
31735: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
31736: LD_VAR 0 1
31740: NOT
31741: PUSH
31742: LD_VAR 0 1
31746: PPUSH
31747: CALL_OW 266
31751: PUSH
31752: LD_INT 0
31754: PUSH
31755: LD_INT 1
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: IN
31762: NOT
31763: OR
31764: PUSH
31765: LD_VAR 0 2
31769: NOT
31770: OR
31771: PUSH
31772: LD_VAR 0 5
31776: PUSH
31777: LD_INT 0
31779: PUSH
31780: LD_INT 1
31782: PUSH
31783: LD_INT 2
31785: PUSH
31786: LD_INT 3
31788: PUSH
31789: LD_INT 4
31791: PUSH
31792: LD_INT 5
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: IN
31803: NOT
31804: OR
31805: PUSH
31806: LD_VAR 0 3
31810: PPUSH
31811: LD_VAR 0 4
31815: PPUSH
31816: CALL_OW 488
31820: NOT
31821: OR
31822: IFFALSE 31826
// exit ;
31824: GO 32543
// pom := GetBase ( depot ) ;
31826: LD_ADDR_VAR 0 10
31830: PUSH
31831: LD_VAR 0 1
31835: PPUSH
31836: CALL_OW 274
31840: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
31841: LD_ADDR_VAR 0 11
31845: PUSH
31846: LD_VAR 0 2
31850: PPUSH
31851: LD_VAR 0 1
31855: PPUSH
31856: CALL_OW 248
31860: PPUSH
31861: CALL_OW 450
31865: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
31866: LD_VAR 0 10
31870: PPUSH
31871: LD_INT 1
31873: PPUSH
31874: CALL_OW 275
31878: PUSH
31879: LD_VAR 0 11
31883: PUSH
31884: LD_INT 1
31886: ARRAY
31887: GREATEREQUAL
31888: PUSH
31889: LD_VAR 0 10
31893: PPUSH
31894: LD_INT 2
31896: PPUSH
31897: CALL_OW 275
31901: PUSH
31902: LD_VAR 0 11
31906: PUSH
31907: LD_INT 2
31909: ARRAY
31910: GREATEREQUAL
31911: AND
31912: PUSH
31913: LD_VAR 0 10
31917: PPUSH
31918: LD_INT 3
31920: PPUSH
31921: CALL_OW 275
31925: PUSH
31926: LD_VAR 0 11
31930: PUSH
31931: LD_INT 3
31933: ARRAY
31934: GREATEREQUAL
31935: AND
31936: NOT
31937: IFFALSE 31941
// exit ;
31939: GO 32543
// if GetBType ( depot ) = b_depot then
31941: LD_VAR 0 1
31945: PPUSH
31946: CALL_OW 266
31950: PUSH
31951: LD_INT 0
31953: EQUAL
31954: IFFALSE 31966
// dist := 28 else
31956: LD_ADDR_VAR 0 14
31960: PUSH
31961: LD_INT 28
31963: ST_TO_ADDR
31964: GO 31974
// dist := 36 ;
31966: LD_ADDR_VAR 0 14
31970: PUSH
31971: LD_INT 36
31973: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
31974: LD_VAR 0 1
31978: PPUSH
31979: LD_VAR 0 3
31983: PPUSH
31984: LD_VAR 0 4
31988: PPUSH
31989: CALL_OW 297
31993: PUSH
31994: LD_VAR 0 14
31998: GREATER
31999: IFFALSE 32003
// exit ;
32001: GO 32543
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
32003: LD_ADDR_VAR 0 12
32007: PUSH
32008: LD_VAR 0 2
32012: PPUSH
32013: LD_VAR 0 3
32017: PPUSH
32018: LD_VAR 0 4
32022: PPUSH
32023: LD_VAR 0 5
32027: PPUSH
32028: LD_VAR 0 1
32032: PPUSH
32033: CALL_OW 248
32037: PPUSH
32038: LD_INT 0
32040: PPUSH
32041: CALL 32548 0 6
32045: ST_TO_ADDR
// if not hexes then
32046: LD_VAR 0 12
32050: NOT
32051: IFFALSE 32055
// exit ;
32053: GO 32543
// hex := GetHexInfo ( x , y ) ;
32055: LD_ADDR_VAR 0 15
32059: PUSH
32060: LD_VAR 0 3
32064: PPUSH
32065: LD_VAR 0 4
32069: PPUSH
32070: CALL_OW 546
32074: ST_TO_ADDR
// if hex [ 1 ] then
32075: LD_VAR 0 15
32079: PUSH
32080: LD_INT 1
32082: ARRAY
32083: IFFALSE 32087
// exit ;
32085: GO 32543
// height := hex [ 2 ] ;
32087: LD_ADDR_VAR 0 13
32091: PUSH
32092: LD_VAR 0 15
32096: PUSH
32097: LD_INT 2
32099: ARRAY
32100: ST_TO_ADDR
// for i = 1 to hexes do
32101: LD_ADDR_VAR 0 7
32105: PUSH
32106: DOUBLE
32107: LD_INT 1
32109: DEC
32110: ST_TO_ADDR
32111: LD_VAR 0 12
32115: PUSH
32116: FOR_TO
32117: IFFALSE 32447
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
32119: LD_VAR 0 12
32123: PUSH
32124: LD_VAR 0 7
32128: ARRAY
32129: PUSH
32130: LD_INT 1
32132: ARRAY
32133: PPUSH
32134: LD_VAR 0 12
32138: PUSH
32139: LD_VAR 0 7
32143: ARRAY
32144: PUSH
32145: LD_INT 2
32147: ARRAY
32148: PPUSH
32149: CALL_OW 488
32153: NOT
32154: PUSH
32155: LD_VAR 0 12
32159: PUSH
32160: LD_VAR 0 7
32164: ARRAY
32165: PUSH
32166: LD_INT 1
32168: ARRAY
32169: PPUSH
32170: LD_VAR 0 12
32174: PUSH
32175: LD_VAR 0 7
32179: ARRAY
32180: PUSH
32181: LD_INT 2
32183: ARRAY
32184: PPUSH
32185: CALL_OW 428
32189: PUSH
32190: LD_INT 0
32192: GREATER
32193: OR
32194: PUSH
32195: LD_VAR 0 12
32199: PUSH
32200: LD_VAR 0 7
32204: ARRAY
32205: PUSH
32206: LD_INT 1
32208: ARRAY
32209: PPUSH
32210: LD_VAR 0 12
32214: PUSH
32215: LD_VAR 0 7
32219: ARRAY
32220: PUSH
32221: LD_INT 2
32223: ARRAY
32224: PPUSH
32225: CALL_OW 351
32229: OR
32230: IFFALSE 32236
// exit ;
32232: POP
32233: POP
32234: GO 32543
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32236: LD_ADDR_VAR 0 8
32240: PUSH
32241: LD_VAR 0 12
32245: PUSH
32246: LD_VAR 0 7
32250: ARRAY
32251: PUSH
32252: LD_INT 1
32254: ARRAY
32255: PPUSH
32256: LD_VAR 0 12
32260: PUSH
32261: LD_VAR 0 7
32265: ARRAY
32266: PUSH
32267: LD_INT 2
32269: ARRAY
32270: PPUSH
32271: CALL_OW 546
32275: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
32276: LD_VAR 0 8
32280: PUSH
32281: LD_INT 1
32283: ARRAY
32284: PUSH
32285: LD_VAR 0 8
32289: PUSH
32290: LD_INT 2
32292: ARRAY
32293: PUSH
32294: LD_VAR 0 13
32298: PUSH
32299: LD_INT 2
32301: PLUS
32302: GREATER
32303: OR
32304: PUSH
32305: LD_VAR 0 8
32309: PUSH
32310: LD_INT 2
32312: ARRAY
32313: PUSH
32314: LD_VAR 0 13
32318: PUSH
32319: LD_INT 2
32321: MINUS
32322: LESS
32323: OR
32324: PUSH
32325: LD_VAR 0 8
32329: PUSH
32330: LD_INT 3
32332: ARRAY
32333: PUSH
32334: LD_INT 0
32336: PUSH
32337: LD_INT 8
32339: PUSH
32340: LD_INT 9
32342: PUSH
32343: LD_INT 10
32345: PUSH
32346: LD_INT 11
32348: PUSH
32349: LD_INT 12
32351: PUSH
32352: LD_INT 13
32354: PUSH
32355: LD_INT 16
32357: PUSH
32358: LD_INT 17
32360: PUSH
32361: LD_INT 18
32363: PUSH
32364: LD_INT 19
32366: PUSH
32367: LD_INT 20
32369: PUSH
32370: LD_INT 21
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: IN
32388: NOT
32389: OR
32390: PUSH
32391: LD_VAR 0 8
32395: PUSH
32396: LD_INT 5
32398: ARRAY
32399: NOT
32400: OR
32401: PUSH
32402: LD_VAR 0 8
32406: PUSH
32407: LD_INT 6
32409: ARRAY
32410: PUSH
32411: LD_INT 1
32413: PUSH
32414: LD_INT 2
32416: PUSH
32417: LD_INT 7
32419: PUSH
32420: LD_INT 9
32422: PUSH
32423: LD_INT 10
32425: PUSH
32426: LD_INT 11
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: IN
32437: NOT
32438: OR
32439: IFFALSE 32445
// exit ;
32441: POP
32442: POP
32443: GO 32543
// end ;
32445: GO 32116
32447: POP
32448: POP
// side := GetSide ( depot ) ;
32449: LD_ADDR_VAR 0 9
32453: PUSH
32454: LD_VAR 0 1
32458: PPUSH
32459: CALL_OW 255
32463: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
32464: LD_VAR 0 9
32468: PPUSH
32469: LD_VAR 0 3
32473: PPUSH
32474: LD_VAR 0 4
32478: PPUSH
32479: LD_INT 20
32481: PPUSH
32482: CALL 25197 0 4
32486: PUSH
32487: LD_INT 4
32489: ARRAY
32490: IFFALSE 32494
// exit ;
32492: GO 32543
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
32494: LD_VAR 0 2
32498: PUSH
32499: LD_INT 29
32501: PUSH
32502: LD_INT 30
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: IN
32509: PUSH
32510: LD_VAR 0 3
32514: PPUSH
32515: LD_VAR 0 4
32519: PPUSH
32520: LD_VAR 0 9
32524: PPUSH
32525: CALL_OW 440
32529: NOT
32530: AND
32531: IFFALSE 32535
// exit ;
32533: GO 32543
// result := true ;
32535: LD_ADDR_VAR 0 6
32539: PUSH
32540: LD_INT 1
32542: ST_TO_ADDR
// end ;
32543: LD_VAR 0 6
32547: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
32548: LD_INT 0
32550: PPUSH
32551: PPUSH
32552: PPUSH
32553: PPUSH
32554: PPUSH
32555: PPUSH
32556: PPUSH
32557: PPUSH
32558: PPUSH
32559: PPUSH
32560: PPUSH
32561: PPUSH
32562: PPUSH
32563: PPUSH
32564: PPUSH
32565: PPUSH
32566: PPUSH
32567: PPUSH
32568: PPUSH
32569: PPUSH
32570: PPUSH
32571: PPUSH
32572: PPUSH
32573: PPUSH
32574: PPUSH
32575: PPUSH
32576: PPUSH
32577: PPUSH
32578: PPUSH
32579: PPUSH
32580: PPUSH
32581: PPUSH
32582: PPUSH
32583: PPUSH
32584: PPUSH
32585: PPUSH
32586: PPUSH
32587: PPUSH
32588: PPUSH
32589: PPUSH
32590: PPUSH
32591: PPUSH
32592: PPUSH
32593: PPUSH
32594: PPUSH
32595: PPUSH
32596: PPUSH
32597: PPUSH
32598: PPUSH
32599: PPUSH
32600: PPUSH
32601: PPUSH
32602: PPUSH
32603: PPUSH
32604: PPUSH
32605: PPUSH
32606: PPUSH
32607: PPUSH
// result = [ ] ;
32608: LD_ADDR_VAR 0 7
32612: PUSH
32613: EMPTY
32614: ST_TO_ADDR
// temp_list = [ ] ;
32615: LD_ADDR_VAR 0 9
32619: PUSH
32620: EMPTY
32621: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
32622: LD_VAR 0 4
32626: PUSH
32627: LD_INT 0
32629: PUSH
32630: LD_INT 1
32632: PUSH
32633: LD_INT 2
32635: PUSH
32636: LD_INT 3
32638: PUSH
32639: LD_INT 4
32641: PUSH
32642: LD_INT 5
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: IN
32653: NOT
32654: PUSH
32655: LD_VAR 0 1
32659: PUSH
32660: LD_INT 0
32662: PUSH
32663: LD_INT 1
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: IN
32670: PUSH
32671: LD_VAR 0 5
32675: PUSH
32676: LD_INT 1
32678: PUSH
32679: LD_INT 2
32681: PUSH
32682: LD_INT 3
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: LIST
32689: IN
32690: NOT
32691: AND
32692: OR
32693: IFFALSE 32697
// exit ;
32695: GO 51088
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
32697: LD_VAR 0 1
32701: PUSH
32702: LD_INT 6
32704: PUSH
32705: LD_INT 7
32707: PUSH
32708: LD_INT 8
32710: PUSH
32711: LD_INT 13
32713: PUSH
32714: LD_INT 12
32716: PUSH
32717: LD_INT 15
32719: PUSH
32720: LD_INT 11
32722: PUSH
32723: LD_INT 14
32725: PUSH
32726: LD_INT 10
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: IN
32740: IFFALSE 32750
// btype = b_lab ;
32742: LD_ADDR_VAR 0 1
32746: PUSH
32747: LD_INT 6
32749: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
32750: LD_VAR 0 6
32754: PUSH
32755: LD_INT 0
32757: PUSH
32758: LD_INT 1
32760: PUSH
32761: LD_INT 2
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: LIST
32768: IN
32769: NOT
32770: PUSH
32771: LD_VAR 0 1
32775: PUSH
32776: LD_INT 0
32778: PUSH
32779: LD_INT 1
32781: PUSH
32782: LD_INT 2
32784: PUSH
32785: LD_INT 3
32787: PUSH
32788: LD_INT 6
32790: PUSH
32791: LD_INT 36
32793: PUSH
32794: LD_INT 4
32796: PUSH
32797: LD_INT 5
32799: PUSH
32800: LD_INT 31
32802: PUSH
32803: LD_INT 32
32805: PUSH
32806: LD_INT 33
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: IN
32822: NOT
32823: PUSH
32824: LD_VAR 0 6
32828: PUSH
32829: LD_INT 1
32831: EQUAL
32832: AND
32833: OR
32834: PUSH
32835: LD_VAR 0 1
32839: PUSH
32840: LD_INT 2
32842: PUSH
32843: LD_INT 3
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: IN
32850: NOT
32851: PUSH
32852: LD_VAR 0 6
32856: PUSH
32857: LD_INT 2
32859: EQUAL
32860: AND
32861: OR
32862: IFFALSE 32872
// mode = 0 ;
32864: LD_ADDR_VAR 0 6
32868: PUSH
32869: LD_INT 0
32871: ST_TO_ADDR
// case mode of 0 :
32872: LD_VAR 0 6
32876: PUSH
32877: LD_INT 0
32879: DOUBLE
32880: EQUAL
32881: IFTRUE 32885
32883: GO 44338
32885: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32886: LD_ADDR_VAR 0 11
32890: PUSH
32891: LD_INT 0
32893: PUSH
32894: LD_INT 0
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 0
32903: PUSH
32904: LD_INT 1
32906: NEG
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 1
32914: PUSH
32915: LD_INT 0
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 1
32924: PUSH
32925: LD_INT 1
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 0
32934: PUSH
32935: LD_INT 1
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 1
32944: NEG
32945: PUSH
32946: LD_INT 0
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 1
32955: NEG
32956: PUSH
32957: LD_INT 1
32959: NEG
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 1
32967: NEG
32968: PUSH
32969: LD_INT 2
32971: NEG
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 0
32979: PUSH
32980: LD_INT 2
32982: NEG
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 1
32990: PUSH
32991: LD_INT 1
32993: NEG
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 1
33001: PUSH
33002: LD_INT 2
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 0
33011: PUSH
33012: LD_INT 2
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 1
33021: NEG
33022: PUSH
33023: LD_INT 1
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 1
33032: PUSH
33033: LD_INT 3
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 0
33042: PUSH
33043: LD_INT 3
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 1
33052: NEG
33053: PUSH
33054: LD_INT 2
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33079: LD_ADDR_VAR 0 12
33083: PUSH
33084: LD_INT 0
33086: PUSH
33087: LD_INT 0
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 0
33096: PUSH
33097: LD_INT 1
33099: NEG
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 1
33107: PUSH
33108: LD_INT 0
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 1
33117: PUSH
33118: LD_INT 1
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 0
33127: PUSH
33128: LD_INT 1
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 1
33137: NEG
33138: PUSH
33139: LD_INT 0
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 1
33148: NEG
33149: PUSH
33150: LD_INT 1
33152: NEG
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 1
33160: PUSH
33161: LD_INT 1
33163: NEG
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 2
33171: PUSH
33172: LD_INT 0
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 2
33181: PUSH
33182: LD_INT 1
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 1
33191: NEG
33192: PUSH
33193: LD_INT 1
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 2
33202: NEG
33203: PUSH
33204: LD_INT 0
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 2
33213: NEG
33214: PUSH
33215: LD_INT 1
33217: NEG
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 2
33225: NEG
33226: PUSH
33227: LD_INT 1
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: LD_INT 3
33236: NEG
33237: PUSH
33238: LD_INT 0
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 3
33247: NEG
33248: PUSH
33249: LD_INT 1
33251: NEG
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33275: LD_ADDR_VAR 0 13
33279: PUSH
33280: LD_INT 0
33282: PUSH
33283: LD_INT 0
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 0
33292: PUSH
33293: LD_INT 1
33295: NEG
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 1
33303: PUSH
33304: LD_INT 0
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 1
33313: PUSH
33314: LD_INT 1
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 0
33323: PUSH
33324: LD_INT 1
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 1
33333: NEG
33334: PUSH
33335: LD_INT 0
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 1
33344: NEG
33345: PUSH
33346: LD_INT 1
33348: NEG
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 1
33356: NEG
33357: PUSH
33358: LD_INT 2
33360: NEG
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 2
33368: PUSH
33369: LD_INT 1
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PUSH
33376: LD_INT 2
33378: PUSH
33379: LD_INT 2
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 1
33388: PUSH
33389: LD_INT 2
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 2
33398: NEG
33399: PUSH
33400: LD_INT 1
33402: NEG
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 2
33410: NEG
33411: PUSH
33412: LD_INT 2
33414: NEG
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 2
33422: NEG
33423: PUSH
33424: LD_INT 3
33426: NEG
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 3
33434: NEG
33435: PUSH
33436: LD_INT 2
33438: NEG
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 3
33446: NEG
33447: PUSH
33448: LD_INT 3
33450: NEG
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33474: LD_ADDR_VAR 0 14
33478: PUSH
33479: LD_INT 0
33481: PUSH
33482: LD_INT 0
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 0
33491: PUSH
33492: LD_INT 1
33494: NEG
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 1
33502: PUSH
33503: LD_INT 0
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 1
33512: PUSH
33513: LD_INT 1
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 0
33522: PUSH
33523: LD_INT 1
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 1
33532: NEG
33533: PUSH
33534: LD_INT 0
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 1
33543: NEG
33544: PUSH
33545: LD_INT 1
33547: NEG
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 1
33555: NEG
33556: PUSH
33557: LD_INT 2
33559: NEG
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 0
33567: PUSH
33568: LD_INT 2
33570: NEG
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 1
33578: PUSH
33579: LD_INT 1
33581: NEG
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 1
33589: PUSH
33590: LD_INT 2
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: LD_INT 0
33599: PUSH
33600: LD_INT 2
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 1
33609: NEG
33610: PUSH
33611: LD_INT 1
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 1
33620: NEG
33621: PUSH
33622: LD_INT 3
33624: NEG
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 0
33632: PUSH
33633: LD_INT 3
33635: NEG
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 1
33643: PUSH
33644: LD_INT 2
33646: NEG
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33670: LD_ADDR_VAR 0 15
33674: PUSH
33675: LD_INT 0
33677: PUSH
33678: LD_INT 0
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 0
33687: PUSH
33688: LD_INT 1
33690: NEG
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 1
33698: PUSH
33699: LD_INT 0
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 1
33708: PUSH
33709: LD_INT 1
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 0
33718: PUSH
33719: LD_INT 1
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 1
33728: NEG
33729: PUSH
33730: LD_INT 0
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: LD_INT 1
33739: NEG
33740: PUSH
33741: LD_INT 1
33743: NEG
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 1
33751: PUSH
33752: LD_INT 1
33754: NEG
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 2
33762: PUSH
33763: LD_INT 0
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 2
33772: PUSH
33773: LD_INT 1
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 1
33782: NEG
33783: PUSH
33784: LD_INT 1
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 2
33793: NEG
33794: PUSH
33795: LD_INT 0
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 2
33804: NEG
33805: PUSH
33806: LD_INT 1
33808: NEG
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 2
33816: PUSH
33817: LD_INT 1
33819: NEG
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 3
33827: PUSH
33828: LD_INT 0
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 3
33837: PUSH
33838: LD_INT 1
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33863: LD_ADDR_VAR 0 16
33867: PUSH
33868: LD_INT 0
33870: PUSH
33871: LD_INT 0
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 0
33880: PUSH
33881: LD_INT 1
33883: NEG
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 1
33891: PUSH
33892: LD_INT 0
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 1
33901: PUSH
33902: LD_INT 1
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 0
33911: PUSH
33912: LD_INT 1
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 1
33921: NEG
33922: PUSH
33923: LD_INT 0
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 1
33932: NEG
33933: PUSH
33934: LD_INT 1
33936: NEG
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 1
33944: NEG
33945: PUSH
33946: LD_INT 2
33948: NEG
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 2
33956: PUSH
33957: LD_INT 1
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 2
33966: PUSH
33967: LD_INT 2
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 1
33976: PUSH
33977: LD_INT 2
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 2
33986: NEG
33987: PUSH
33988: LD_INT 1
33990: NEG
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 2
33998: NEG
33999: PUSH
34000: LD_INT 2
34002: NEG
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: LD_INT 3
34010: PUSH
34011: LD_INT 2
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 3
34020: PUSH
34021: LD_INT 3
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 2
34030: PUSH
34031: LD_INT 3
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34056: LD_ADDR_VAR 0 17
34060: PUSH
34061: LD_INT 0
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 0
34073: PUSH
34074: LD_INT 1
34076: NEG
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 1
34084: PUSH
34085: LD_INT 0
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 1
34094: PUSH
34095: LD_INT 1
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 0
34104: PUSH
34105: LD_INT 1
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 1
34114: NEG
34115: PUSH
34116: LD_INT 0
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 1
34125: NEG
34126: PUSH
34127: LD_INT 1
34129: NEG
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 1
34137: NEG
34138: PUSH
34139: LD_INT 2
34141: NEG
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 0
34149: PUSH
34150: LD_INT 2
34152: NEG
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 1
34160: PUSH
34161: LD_INT 1
34163: NEG
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 2
34171: PUSH
34172: LD_INT 0
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 2
34181: PUSH
34182: LD_INT 1
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 2
34191: PUSH
34192: LD_INT 2
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 1
34201: PUSH
34202: LD_INT 2
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 0
34211: PUSH
34212: LD_INT 2
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 1
34221: NEG
34222: PUSH
34223: LD_INT 1
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 2
34232: NEG
34233: PUSH
34234: LD_INT 0
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 2
34243: NEG
34244: PUSH
34245: LD_INT 1
34247: NEG
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 2
34255: NEG
34256: PUSH
34257: LD_INT 2
34259: NEG
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34286: LD_ADDR_VAR 0 18
34290: PUSH
34291: LD_INT 0
34293: PUSH
34294: LD_INT 0
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 0
34303: PUSH
34304: LD_INT 1
34306: NEG
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 1
34314: PUSH
34315: LD_INT 0
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 1
34324: PUSH
34325: LD_INT 1
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 0
34334: PUSH
34335: LD_INT 1
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 1
34344: NEG
34345: PUSH
34346: LD_INT 0
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 1
34355: NEG
34356: PUSH
34357: LD_INT 1
34359: NEG
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 1
34367: NEG
34368: PUSH
34369: LD_INT 2
34371: NEG
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 0
34379: PUSH
34380: LD_INT 2
34382: NEG
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 1
34390: PUSH
34391: LD_INT 1
34393: NEG
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 2
34401: PUSH
34402: LD_INT 0
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 2
34411: PUSH
34412: LD_INT 1
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 2
34421: PUSH
34422: LD_INT 2
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 1
34431: PUSH
34432: LD_INT 2
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 0
34441: PUSH
34442: LD_INT 2
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 1
34451: NEG
34452: PUSH
34453: LD_INT 1
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 2
34462: NEG
34463: PUSH
34464: LD_INT 0
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 2
34473: NEG
34474: PUSH
34475: LD_INT 1
34477: NEG
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 2
34485: NEG
34486: PUSH
34487: LD_INT 2
34489: NEG
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34516: LD_ADDR_VAR 0 19
34520: PUSH
34521: LD_INT 0
34523: PUSH
34524: LD_INT 0
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 0
34533: PUSH
34534: LD_INT 1
34536: NEG
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 1
34544: PUSH
34545: LD_INT 0
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 1
34554: PUSH
34555: LD_INT 1
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 0
34564: PUSH
34565: LD_INT 1
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 1
34574: NEG
34575: PUSH
34576: LD_INT 0
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 1
34585: NEG
34586: PUSH
34587: LD_INT 1
34589: NEG
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 1
34597: NEG
34598: PUSH
34599: LD_INT 2
34601: NEG
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 0
34609: PUSH
34610: LD_INT 2
34612: NEG
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 1
34620: PUSH
34621: LD_INT 1
34623: NEG
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 2
34631: PUSH
34632: LD_INT 0
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 2
34641: PUSH
34642: LD_INT 1
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 2
34651: PUSH
34652: LD_INT 2
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 1
34661: PUSH
34662: LD_INT 2
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 0
34671: PUSH
34672: LD_INT 2
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 1
34681: NEG
34682: PUSH
34683: LD_INT 1
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 2
34692: NEG
34693: PUSH
34694: LD_INT 0
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 2
34703: NEG
34704: PUSH
34705: LD_INT 1
34707: NEG
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 2
34715: NEG
34716: PUSH
34717: LD_INT 2
34719: NEG
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34746: LD_ADDR_VAR 0 20
34750: PUSH
34751: LD_INT 0
34753: PUSH
34754: LD_INT 0
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 0
34763: PUSH
34764: LD_INT 1
34766: NEG
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 1
34774: PUSH
34775: LD_INT 0
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 1
34784: PUSH
34785: LD_INT 1
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 0
34794: PUSH
34795: LD_INT 1
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 1
34804: NEG
34805: PUSH
34806: LD_INT 0
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 1
34815: NEG
34816: PUSH
34817: LD_INT 1
34819: NEG
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 1
34827: NEG
34828: PUSH
34829: LD_INT 2
34831: NEG
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 0
34839: PUSH
34840: LD_INT 2
34842: NEG
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 1
34850: PUSH
34851: LD_INT 1
34853: NEG
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 2
34861: PUSH
34862: LD_INT 0
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 2
34871: PUSH
34872: LD_INT 1
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 2
34881: PUSH
34882: LD_INT 2
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 1
34891: PUSH
34892: LD_INT 2
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 0
34901: PUSH
34902: LD_INT 2
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 1
34911: NEG
34912: PUSH
34913: LD_INT 1
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 2
34922: NEG
34923: PUSH
34924: LD_INT 0
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 2
34933: NEG
34934: PUSH
34935: LD_INT 1
34937: NEG
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 2
34945: NEG
34946: PUSH
34947: LD_INT 2
34949: NEG
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34976: LD_ADDR_VAR 0 21
34980: PUSH
34981: LD_INT 0
34983: PUSH
34984: LD_INT 0
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 0
34993: PUSH
34994: LD_INT 1
34996: NEG
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 1
35004: PUSH
35005: LD_INT 0
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 1
35014: PUSH
35015: LD_INT 1
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 0
35024: PUSH
35025: LD_INT 1
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 1
35034: NEG
35035: PUSH
35036: LD_INT 0
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 1
35045: NEG
35046: PUSH
35047: LD_INT 1
35049: NEG
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 1
35057: NEG
35058: PUSH
35059: LD_INT 2
35061: NEG
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 0
35069: PUSH
35070: LD_INT 2
35072: NEG
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 1
35080: PUSH
35081: LD_INT 1
35083: NEG
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 2
35091: PUSH
35092: LD_INT 0
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_INT 2
35101: PUSH
35102: LD_INT 1
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 2
35111: PUSH
35112: LD_INT 2
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 1
35121: PUSH
35122: LD_INT 2
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 0
35131: PUSH
35132: LD_INT 2
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 1
35141: NEG
35142: PUSH
35143: LD_INT 1
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 2
35152: NEG
35153: PUSH
35154: LD_INT 0
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 2
35163: NEG
35164: PUSH
35165: LD_INT 1
35167: NEG
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 2
35175: NEG
35176: PUSH
35177: LD_INT 2
35179: NEG
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35206: LD_ADDR_VAR 0 22
35210: PUSH
35211: LD_INT 0
35213: PUSH
35214: LD_INT 0
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 0
35223: PUSH
35224: LD_INT 1
35226: NEG
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 1
35234: PUSH
35235: LD_INT 0
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 1
35244: PUSH
35245: LD_INT 1
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 0
35254: PUSH
35255: LD_INT 1
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 1
35264: NEG
35265: PUSH
35266: LD_INT 0
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 1
35275: NEG
35276: PUSH
35277: LD_INT 1
35279: NEG
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 1
35287: NEG
35288: PUSH
35289: LD_INT 2
35291: NEG
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 0
35299: PUSH
35300: LD_INT 2
35302: NEG
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 1
35310: PUSH
35311: LD_INT 1
35313: NEG
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 2
35321: PUSH
35322: LD_INT 0
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 2
35331: PUSH
35332: LD_INT 1
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 2
35341: PUSH
35342: LD_INT 2
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 1
35351: PUSH
35352: LD_INT 2
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 0
35361: PUSH
35362: LD_INT 2
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 1
35371: NEG
35372: PUSH
35373: LD_INT 1
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 2
35382: NEG
35383: PUSH
35384: LD_INT 0
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 2
35393: NEG
35394: PUSH
35395: LD_INT 1
35397: NEG
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 2
35405: NEG
35406: PUSH
35407: LD_INT 2
35409: NEG
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35436: LD_ADDR_VAR 0 23
35440: PUSH
35441: LD_INT 0
35443: PUSH
35444: LD_INT 0
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 0
35453: PUSH
35454: LD_INT 1
35456: NEG
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 1
35464: PUSH
35465: LD_INT 0
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 1
35474: PUSH
35475: LD_INT 1
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 0
35484: PUSH
35485: LD_INT 1
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 1
35494: NEG
35495: PUSH
35496: LD_INT 0
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 1
35505: NEG
35506: PUSH
35507: LD_INT 1
35509: NEG
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 1
35517: NEG
35518: PUSH
35519: LD_INT 2
35521: NEG
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 0
35529: PUSH
35530: LD_INT 2
35532: NEG
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 1
35540: PUSH
35541: LD_INT 1
35543: NEG
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 2
35551: PUSH
35552: LD_INT 0
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 2
35561: PUSH
35562: LD_INT 1
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 2
35571: PUSH
35572: LD_INT 2
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 1
35581: PUSH
35582: LD_INT 2
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 0
35591: PUSH
35592: LD_INT 2
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 1
35601: NEG
35602: PUSH
35603: LD_INT 1
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 2
35612: NEG
35613: PUSH
35614: LD_INT 0
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 2
35623: NEG
35624: PUSH
35625: LD_INT 1
35627: NEG
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 2
35635: NEG
35636: PUSH
35637: LD_INT 2
35639: NEG
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 2
35647: NEG
35648: PUSH
35649: LD_INT 3
35651: NEG
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 1
35659: NEG
35660: PUSH
35661: LD_INT 3
35663: NEG
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 1
35671: PUSH
35672: LD_INT 2
35674: NEG
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 2
35682: PUSH
35683: LD_INT 1
35685: NEG
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
35716: LD_ADDR_VAR 0 24
35720: PUSH
35721: LD_INT 0
35723: PUSH
35724: LD_INT 0
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 0
35733: PUSH
35734: LD_INT 1
35736: NEG
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 1
35744: PUSH
35745: LD_INT 0
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 1
35754: PUSH
35755: LD_INT 1
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 0
35764: PUSH
35765: LD_INT 1
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 1
35774: NEG
35775: PUSH
35776: LD_INT 0
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 1
35785: NEG
35786: PUSH
35787: LD_INT 1
35789: NEG
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 1
35797: NEG
35798: PUSH
35799: LD_INT 2
35801: NEG
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 0
35809: PUSH
35810: LD_INT 2
35812: NEG
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 1
35820: PUSH
35821: LD_INT 1
35823: NEG
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 2
35831: PUSH
35832: LD_INT 0
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 2
35841: PUSH
35842: LD_INT 1
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 2
35851: PUSH
35852: LD_INT 2
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 1
35861: PUSH
35862: LD_INT 2
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 0
35871: PUSH
35872: LD_INT 2
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 1
35881: NEG
35882: PUSH
35883: LD_INT 1
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 2
35892: NEG
35893: PUSH
35894: LD_INT 0
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: LD_INT 2
35903: NEG
35904: PUSH
35905: LD_INT 1
35907: NEG
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 2
35915: NEG
35916: PUSH
35917: LD_INT 2
35919: NEG
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 1
35927: PUSH
35928: LD_INT 2
35930: NEG
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 2
35938: PUSH
35939: LD_INT 1
35941: NEG
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 3
35949: PUSH
35950: LD_INT 1
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 3
35959: PUSH
35960: LD_INT 2
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
35992: LD_ADDR_VAR 0 25
35996: PUSH
35997: LD_INT 0
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 0
36009: PUSH
36010: LD_INT 1
36012: NEG
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 1
36020: PUSH
36021: LD_INT 0
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 1
36030: PUSH
36031: LD_INT 1
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 0
36040: PUSH
36041: LD_INT 1
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 1
36050: NEG
36051: PUSH
36052: LD_INT 0
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 1
36061: NEG
36062: PUSH
36063: LD_INT 1
36065: NEG
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 1
36073: NEG
36074: PUSH
36075: LD_INT 2
36077: NEG
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 0
36085: PUSH
36086: LD_INT 2
36088: NEG
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 1
36096: PUSH
36097: LD_INT 1
36099: NEG
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 2
36107: PUSH
36108: LD_INT 0
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 2
36117: PUSH
36118: LD_INT 1
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: LD_INT 2
36127: PUSH
36128: LD_INT 2
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: LD_INT 1
36137: PUSH
36138: LD_INT 2
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 0
36147: PUSH
36148: LD_INT 2
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 1
36157: NEG
36158: PUSH
36159: LD_INT 1
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 2
36168: NEG
36169: PUSH
36170: LD_INT 0
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: PUSH
36177: LD_INT 2
36179: NEG
36180: PUSH
36181: LD_INT 1
36183: NEG
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 2
36191: NEG
36192: PUSH
36193: LD_INT 2
36195: NEG
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 3
36203: PUSH
36204: LD_INT 1
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 3
36213: PUSH
36214: LD_INT 2
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 2
36223: PUSH
36224: LD_INT 3
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: PUSH
36231: LD_INT 1
36233: PUSH
36234: LD_INT 3
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36266: LD_ADDR_VAR 0 26
36270: PUSH
36271: LD_INT 0
36273: PUSH
36274: LD_INT 0
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 0
36283: PUSH
36284: LD_INT 1
36286: NEG
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 1
36294: PUSH
36295: LD_INT 0
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 1
36304: PUSH
36305: LD_INT 1
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 0
36314: PUSH
36315: LD_INT 1
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 1
36324: NEG
36325: PUSH
36326: LD_INT 0
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 1
36335: NEG
36336: PUSH
36337: LD_INT 1
36339: NEG
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 1
36347: NEG
36348: PUSH
36349: LD_INT 2
36351: NEG
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 0
36359: PUSH
36360: LD_INT 2
36362: NEG
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 1
36370: PUSH
36371: LD_INT 1
36373: NEG
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 2
36381: PUSH
36382: LD_INT 0
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 2
36391: PUSH
36392: LD_INT 1
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 2
36401: PUSH
36402: LD_INT 2
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 1
36411: PUSH
36412: LD_INT 2
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 0
36421: PUSH
36422: LD_INT 2
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 1
36431: NEG
36432: PUSH
36433: LD_INT 1
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 2
36442: NEG
36443: PUSH
36444: LD_INT 0
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 2
36453: NEG
36454: PUSH
36455: LD_INT 1
36457: NEG
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 2
36465: NEG
36466: PUSH
36467: LD_INT 2
36469: NEG
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 2
36477: PUSH
36478: LD_INT 3
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 1
36487: PUSH
36488: LD_INT 3
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 1
36497: NEG
36498: PUSH
36499: LD_INT 2
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 2
36508: NEG
36509: PUSH
36510: LD_INT 1
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36542: LD_ADDR_VAR 0 27
36546: PUSH
36547: LD_INT 0
36549: PUSH
36550: LD_INT 0
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 0
36559: PUSH
36560: LD_INT 1
36562: NEG
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 1
36570: PUSH
36571: LD_INT 0
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 1
36580: PUSH
36581: LD_INT 1
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 0
36590: PUSH
36591: LD_INT 1
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 1
36600: NEG
36601: PUSH
36602: LD_INT 0
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 1
36611: NEG
36612: PUSH
36613: LD_INT 1
36615: NEG
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: LD_INT 1
36623: NEG
36624: PUSH
36625: LD_INT 2
36627: NEG
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: LD_INT 0
36635: PUSH
36636: LD_INT 2
36638: NEG
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 1
36646: PUSH
36647: LD_INT 1
36649: NEG
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 2
36657: PUSH
36658: LD_INT 0
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 2
36667: PUSH
36668: LD_INT 1
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 2
36677: PUSH
36678: LD_INT 2
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 1
36687: PUSH
36688: LD_INT 2
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 0
36697: PUSH
36698: LD_INT 2
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 1
36707: NEG
36708: PUSH
36709: LD_INT 1
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 2
36718: NEG
36719: PUSH
36720: LD_INT 0
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 2
36729: NEG
36730: PUSH
36731: LD_INT 1
36733: NEG
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 2
36741: NEG
36742: PUSH
36743: LD_INT 2
36745: NEG
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 1
36753: NEG
36754: PUSH
36755: LD_INT 2
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 2
36764: NEG
36765: PUSH
36766: LD_INT 1
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 3
36775: NEG
36776: PUSH
36777: LD_INT 1
36779: NEG
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 3
36787: NEG
36788: PUSH
36789: LD_INT 2
36791: NEG
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36822: LD_ADDR_VAR 0 28
36826: PUSH
36827: LD_INT 0
36829: PUSH
36830: LD_INT 0
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 0
36839: PUSH
36840: LD_INT 1
36842: NEG
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 1
36850: PUSH
36851: LD_INT 0
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 1
36860: PUSH
36861: LD_INT 1
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 0
36870: PUSH
36871: LD_INT 1
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 1
36880: NEG
36881: PUSH
36882: LD_INT 0
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 1
36891: NEG
36892: PUSH
36893: LD_INT 1
36895: NEG
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 1
36903: NEG
36904: PUSH
36905: LD_INT 2
36907: NEG
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 0
36915: PUSH
36916: LD_INT 2
36918: NEG
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 1
36926: PUSH
36927: LD_INT 1
36929: NEG
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 2
36937: PUSH
36938: LD_INT 0
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 2
36947: PUSH
36948: LD_INT 1
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 2
36957: PUSH
36958: LD_INT 2
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 1
36967: PUSH
36968: LD_INT 2
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 0
36977: PUSH
36978: LD_INT 2
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 1
36987: NEG
36988: PUSH
36989: LD_INT 1
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 2
36998: NEG
36999: PUSH
37000: LD_INT 0
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 2
37009: NEG
37010: PUSH
37011: LD_INT 1
37013: NEG
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 2
37021: NEG
37022: PUSH
37023: LD_INT 2
37025: NEG
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 2
37033: NEG
37034: PUSH
37035: LD_INT 3
37037: NEG
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 1
37045: NEG
37046: PUSH
37047: LD_INT 3
37049: NEG
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 3
37057: NEG
37058: PUSH
37059: LD_INT 1
37061: NEG
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 3
37069: NEG
37070: PUSH
37071: LD_INT 2
37073: NEG
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37104: LD_ADDR_VAR 0 29
37108: PUSH
37109: LD_INT 0
37111: PUSH
37112: LD_INT 0
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 0
37121: PUSH
37122: LD_INT 1
37124: NEG
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 1
37132: PUSH
37133: LD_INT 0
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 1
37142: PUSH
37143: LD_INT 1
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 0
37152: PUSH
37153: LD_INT 1
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 1
37162: NEG
37163: PUSH
37164: LD_INT 0
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 1
37173: NEG
37174: PUSH
37175: LD_INT 1
37177: NEG
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 1
37185: NEG
37186: PUSH
37187: LD_INT 2
37189: NEG
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 0
37197: PUSH
37198: LD_INT 2
37200: NEG
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 1
37208: PUSH
37209: LD_INT 1
37211: NEG
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 2
37219: PUSH
37220: LD_INT 0
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 2
37229: PUSH
37230: LD_INT 1
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 1
37239: PUSH
37240: LD_INT 2
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 0
37249: PUSH
37250: LD_INT 2
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 1
37259: NEG
37260: PUSH
37261: LD_INT 1
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 2
37270: NEG
37271: PUSH
37272: LD_INT 1
37274: NEG
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 2
37282: NEG
37283: PUSH
37284: LD_INT 2
37286: NEG
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 2
37294: NEG
37295: PUSH
37296: LD_INT 3
37298: NEG
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 2
37306: PUSH
37307: LD_INT 1
37309: NEG
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 3
37317: PUSH
37318: LD_INT 1
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 1
37327: PUSH
37328: LD_INT 3
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 1
37337: NEG
37338: PUSH
37339: LD_INT 2
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 3
37348: NEG
37349: PUSH
37350: LD_INT 2
37352: NEG
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37383: LD_ADDR_VAR 0 30
37387: PUSH
37388: LD_INT 0
37390: PUSH
37391: LD_INT 0
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: LD_INT 0
37400: PUSH
37401: LD_INT 1
37403: NEG
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 1
37411: PUSH
37412: LD_INT 0
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 1
37421: PUSH
37422: LD_INT 1
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 0
37431: PUSH
37432: LD_INT 1
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 1
37441: NEG
37442: PUSH
37443: LD_INT 0
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 1
37452: NEG
37453: PUSH
37454: LD_INT 1
37456: NEG
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 1
37464: NEG
37465: PUSH
37466: LD_INT 2
37468: NEG
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 0
37476: PUSH
37477: LD_INT 2
37479: NEG
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 1
37487: PUSH
37488: LD_INT 1
37490: NEG
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 2
37498: PUSH
37499: LD_INT 0
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 2
37508: PUSH
37509: LD_INT 1
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 2
37518: PUSH
37519: LD_INT 2
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 1
37528: PUSH
37529: LD_INT 2
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 1
37538: NEG
37539: PUSH
37540: LD_INT 1
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 2
37549: NEG
37550: PUSH
37551: LD_INT 0
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 2
37560: NEG
37561: PUSH
37562: LD_INT 1
37564: NEG
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 1
37572: NEG
37573: PUSH
37574: LD_INT 3
37576: NEG
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 1
37584: PUSH
37585: LD_INT 2
37587: NEG
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 3
37595: PUSH
37596: LD_INT 2
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 2
37605: PUSH
37606: LD_INT 3
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 2
37615: NEG
37616: PUSH
37617: LD_INT 1
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 3
37626: NEG
37627: PUSH
37628: LD_INT 1
37630: NEG
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37661: LD_ADDR_VAR 0 31
37665: PUSH
37666: LD_INT 0
37668: PUSH
37669: LD_INT 0
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 0
37678: PUSH
37679: LD_INT 1
37681: NEG
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 1
37689: PUSH
37690: LD_INT 0
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 1
37699: PUSH
37700: LD_INT 1
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 0
37709: PUSH
37710: LD_INT 1
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 1
37719: NEG
37720: PUSH
37721: LD_INT 0
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 1
37730: NEG
37731: PUSH
37732: LD_INT 1
37734: NEG
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 1
37742: NEG
37743: PUSH
37744: LD_INT 2
37746: NEG
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 1
37754: PUSH
37755: LD_INT 1
37757: NEG
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 2
37765: PUSH
37766: LD_INT 0
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 2
37775: PUSH
37776: LD_INT 1
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 2
37785: PUSH
37786: LD_INT 2
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 1
37795: PUSH
37796: LD_INT 2
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 0
37805: PUSH
37806: LD_INT 2
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 1
37815: NEG
37816: PUSH
37817: LD_INT 1
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 2
37826: NEG
37827: PUSH
37828: LD_INT 1
37830: NEG
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 2
37838: NEG
37839: PUSH
37840: LD_INT 2
37842: NEG
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: LD_INT 2
37850: NEG
37851: PUSH
37852: LD_INT 3
37854: NEG
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 2
37862: PUSH
37863: LD_INT 1
37865: NEG
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 3
37873: PUSH
37874: LD_INT 1
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 1
37883: PUSH
37884: LD_INT 3
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 1
37893: NEG
37894: PUSH
37895: LD_INT 2
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 3
37904: NEG
37905: PUSH
37906: LD_INT 2
37908: NEG
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37939: LD_ADDR_VAR 0 32
37943: PUSH
37944: LD_INT 0
37946: PUSH
37947: LD_INT 0
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 0
37956: PUSH
37957: LD_INT 1
37959: NEG
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 1
37967: PUSH
37968: LD_INT 0
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 1
37977: PUSH
37978: LD_INT 1
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 0
37987: PUSH
37988: LD_INT 1
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 1
37997: NEG
37998: PUSH
37999: LD_INT 0
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 1
38008: NEG
38009: PUSH
38010: LD_INT 1
38012: NEG
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 1
38020: NEG
38021: PUSH
38022: LD_INT 2
38024: NEG
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 0
38032: PUSH
38033: LD_INT 2
38035: NEG
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 1
38043: PUSH
38044: LD_INT 1
38046: NEG
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 2
38054: PUSH
38055: LD_INT 1
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 2
38064: PUSH
38065: LD_INT 2
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 1
38074: PUSH
38075: LD_INT 2
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: LD_INT 2
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 1
38094: NEG
38095: PUSH
38096: LD_INT 1
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 2
38105: NEG
38106: PUSH
38107: LD_INT 0
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 2
38116: NEG
38117: PUSH
38118: LD_INT 1
38120: NEG
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 1
38128: NEG
38129: PUSH
38130: LD_INT 3
38132: NEG
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 1
38140: PUSH
38141: LD_INT 2
38143: NEG
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 3
38151: PUSH
38152: LD_INT 2
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 2
38161: PUSH
38162: LD_INT 3
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 2
38171: NEG
38172: PUSH
38173: LD_INT 1
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 3
38182: NEG
38183: PUSH
38184: LD_INT 1
38186: NEG
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38217: LD_ADDR_VAR 0 33
38221: PUSH
38222: LD_INT 0
38224: PUSH
38225: LD_INT 0
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 0
38234: PUSH
38235: LD_INT 1
38237: NEG
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 1
38245: PUSH
38246: LD_INT 0
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 1
38255: PUSH
38256: LD_INT 1
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 0
38265: PUSH
38266: LD_INT 1
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 1
38275: NEG
38276: PUSH
38277: LD_INT 0
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 1
38286: NEG
38287: PUSH
38288: LD_INT 1
38290: NEG
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 1
38298: NEG
38299: PUSH
38300: LD_INT 2
38302: NEG
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 1
38310: PUSH
38311: LD_INT 1
38313: NEG
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 2
38321: PUSH
38322: LD_INT 0
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 2
38331: PUSH
38332: LD_INT 1
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 1
38341: PUSH
38342: LD_INT 2
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 0
38351: PUSH
38352: LD_INT 2
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 1
38361: NEG
38362: PUSH
38363: LD_INT 1
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 2
38372: NEG
38373: PUSH
38374: LD_INT 0
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 2
38383: NEG
38384: PUSH
38385: LD_INT 1
38387: NEG
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 2
38395: NEG
38396: PUSH
38397: LD_INT 2
38399: NEG
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 2
38407: NEG
38408: PUSH
38409: LD_INT 3
38411: NEG
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 2
38419: PUSH
38420: LD_INT 1
38422: NEG
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_INT 3
38430: PUSH
38431: LD_INT 1
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 1
38440: PUSH
38441: LD_INT 3
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 1
38450: NEG
38451: PUSH
38452: LD_INT 2
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 3
38461: NEG
38462: PUSH
38463: LD_INT 2
38465: NEG
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38496: LD_ADDR_VAR 0 34
38500: PUSH
38501: LD_INT 0
38503: PUSH
38504: LD_INT 0
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 0
38513: PUSH
38514: LD_INT 1
38516: NEG
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 1
38524: PUSH
38525: LD_INT 0
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 1
38534: PUSH
38535: LD_INT 1
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 0
38544: PUSH
38545: LD_INT 1
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 1
38554: NEG
38555: PUSH
38556: LD_INT 0
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 1
38565: NEG
38566: PUSH
38567: LD_INT 1
38569: NEG
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 1
38577: NEG
38578: PUSH
38579: LD_INT 2
38581: NEG
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 0
38589: PUSH
38590: LD_INT 2
38592: NEG
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 1
38600: PUSH
38601: LD_INT 1
38603: NEG
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 2
38611: PUSH
38612: LD_INT 1
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 2
38621: PUSH
38622: LD_INT 2
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 1
38631: PUSH
38632: LD_INT 2
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 1
38641: NEG
38642: PUSH
38643: LD_INT 1
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 2
38652: NEG
38653: PUSH
38654: LD_INT 0
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 2
38663: NEG
38664: PUSH
38665: LD_INT 1
38667: NEG
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 2
38675: NEG
38676: PUSH
38677: LD_INT 2
38679: NEG
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 1
38687: NEG
38688: PUSH
38689: LD_INT 3
38691: NEG
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 1
38699: PUSH
38700: LD_INT 2
38702: NEG
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 3
38710: PUSH
38711: LD_INT 2
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 2
38720: PUSH
38721: LD_INT 3
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 2
38730: NEG
38731: PUSH
38732: LD_INT 1
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 3
38741: NEG
38742: PUSH
38743: LD_INT 1
38745: NEG
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38776: LD_ADDR_VAR 0 35
38780: PUSH
38781: LD_INT 0
38783: PUSH
38784: LD_INT 0
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 0
38793: PUSH
38794: LD_INT 1
38796: NEG
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 1
38804: PUSH
38805: LD_INT 0
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 1
38814: PUSH
38815: LD_INT 1
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 0
38824: PUSH
38825: LD_INT 1
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 1
38834: NEG
38835: PUSH
38836: LD_INT 0
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 1
38845: NEG
38846: PUSH
38847: LD_INT 1
38849: NEG
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 2
38857: PUSH
38858: LD_INT 1
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 2
38867: NEG
38868: PUSH
38869: LD_INT 1
38871: NEG
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38888: LD_ADDR_VAR 0 36
38892: PUSH
38893: LD_INT 0
38895: PUSH
38896: LD_INT 0
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 0
38905: PUSH
38906: LD_INT 1
38908: NEG
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 1
38916: PUSH
38917: LD_INT 0
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 1
38926: PUSH
38927: LD_INT 1
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 0
38936: PUSH
38937: LD_INT 1
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 1
38946: NEG
38947: PUSH
38948: LD_INT 0
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 1
38957: NEG
38958: PUSH
38959: LD_INT 1
38961: NEG
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 1
38969: NEG
38970: PUSH
38971: LD_INT 2
38973: NEG
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 1
38981: PUSH
38982: LD_INT 2
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39000: LD_ADDR_VAR 0 37
39004: PUSH
39005: LD_INT 0
39007: PUSH
39008: LD_INT 0
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 0
39017: PUSH
39018: LD_INT 1
39020: NEG
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 1
39028: PUSH
39029: LD_INT 0
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 1
39038: PUSH
39039: LD_INT 1
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 0
39048: PUSH
39049: LD_INT 1
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 1
39058: NEG
39059: PUSH
39060: LD_INT 0
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 1
39069: NEG
39070: PUSH
39071: LD_INT 1
39073: NEG
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: LD_INT 1
39084: NEG
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 1
39092: NEG
39093: PUSH
39094: LD_INT 1
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39112: LD_ADDR_VAR 0 38
39116: PUSH
39117: LD_INT 0
39119: PUSH
39120: LD_INT 0
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 0
39129: PUSH
39130: LD_INT 1
39132: NEG
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 1
39140: PUSH
39141: LD_INT 0
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 1
39150: PUSH
39151: LD_INT 1
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 0
39160: PUSH
39161: LD_INT 1
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 1
39170: NEG
39171: PUSH
39172: LD_INT 0
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 1
39181: NEG
39182: PUSH
39183: LD_INT 1
39185: NEG
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 2
39193: PUSH
39194: LD_INT 1
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 2
39203: NEG
39204: PUSH
39205: LD_INT 1
39207: NEG
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39224: LD_ADDR_VAR 0 39
39228: PUSH
39229: LD_INT 0
39231: PUSH
39232: LD_INT 0
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 0
39241: PUSH
39242: LD_INT 1
39244: NEG
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 1
39252: PUSH
39253: LD_INT 0
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 1
39262: PUSH
39263: LD_INT 1
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 0
39272: PUSH
39273: LD_INT 1
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 1
39282: NEG
39283: PUSH
39284: LD_INT 0
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 1
39293: NEG
39294: PUSH
39295: LD_INT 1
39297: NEG
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 1
39305: NEG
39306: PUSH
39307: LD_INT 2
39309: NEG
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 1
39317: PUSH
39318: LD_INT 2
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39336: LD_ADDR_VAR 0 40
39340: PUSH
39341: LD_INT 0
39343: PUSH
39344: LD_INT 0
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 0
39353: PUSH
39354: LD_INT 1
39356: NEG
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 1
39364: PUSH
39365: LD_INT 0
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 1
39374: PUSH
39375: LD_INT 1
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 0
39384: PUSH
39385: LD_INT 1
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 1
39394: NEG
39395: PUSH
39396: LD_INT 0
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 1
39405: NEG
39406: PUSH
39407: LD_INT 1
39409: NEG
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 1
39417: PUSH
39418: LD_INT 1
39420: NEG
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 1
39428: NEG
39429: PUSH
39430: LD_INT 1
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39448: LD_ADDR_VAR 0 41
39452: PUSH
39453: LD_INT 0
39455: PUSH
39456: LD_INT 0
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: LD_INT 1
39468: NEG
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 1
39476: PUSH
39477: LD_INT 0
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 1
39486: PUSH
39487: LD_INT 1
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 0
39496: PUSH
39497: LD_INT 1
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 1
39506: NEG
39507: PUSH
39508: LD_INT 0
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 1
39517: NEG
39518: PUSH
39519: LD_INT 1
39521: NEG
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 1
39529: NEG
39530: PUSH
39531: LD_INT 2
39533: NEG
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 1
39541: PUSH
39542: LD_INT 1
39544: NEG
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 2
39552: PUSH
39553: LD_INT 0
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 2
39562: PUSH
39563: LD_INT 1
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 2
39572: PUSH
39573: LD_INT 2
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 1
39582: PUSH
39583: LD_INT 2
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 1
39592: NEG
39593: PUSH
39594: LD_INT 1
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 2
39603: NEG
39604: PUSH
39605: LD_INT 0
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 2
39614: NEG
39615: PUSH
39616: LD_INT 1
39618: NEG
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 2
39626: NEG
39627: PUSH
39628: LD_INT 2
39630: NEG
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 2
39638: NEG
39639: PUSH
39640: LD_INT 3
39642: NEG
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 2
39650: PUSH
39651: LD_INT 1
39653: NEG
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 3
39661: PUSH
39662: LD_INT 0
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 3
39671: PUSH
39672: LD_INT 1
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 3
39681: PUSH
39682: LD_INT 2
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 3
39691: PUSH
39692: LD_INT 3
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 2
39701: PUSH
39702: LD_INT 3
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 2
39711: NEG
39712: PUSH
39713: LD_INT 1
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 3
39722: NEG
39723: PUSH
39724: LD_INT 0
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 3
39733: NEG
39734: PUSH
39735: LD_INT 1
39737: NEG
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 3
39745: NEG
39746: PUSH
39747: LD_INT 2
39749: NEG
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 3
39757: NEG
39758: PUSH
39759: LD_INT 3
39761: NEG
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39798: LD_ADDR_VAR 0 42
39802: PUSH
39803: LD_INT 0
39805: PUSH
39806: LD_INT 0
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 0
39815: PUSH
39816: LD_INT 1
39818: NEG
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 1
39826: PUSH
39827: LD_INT 0
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 1
39836: PUSH
39837: LD_INT 1
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 0
39846: PUSH
39847: LD_INT 1
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 1
39856: NEG
39857: PUSH
39858: LD_INT 0
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 1
39867: NEG
39868: PUSH
39869: LD_INT 1
39871: NEG
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 1
39879: NEG
39880: PUSH
39881: LD_INT 2
39883: NEG
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 0
39891: PUSH
39892: LD_INT 2
39894: NEG
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 1
39902: PUSH
39903: LD_INT 1
39905: NEG
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 2
39913: PUSH
39914: LD_INT 1
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 2
39923: PUSH
39924: LD_INT 2
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: PUSH
39934: LD_INT 2
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 0
39943: PUSH
39944: LD_INT 2
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 1
39953: NEG
39954: PUSH
39955: LD_INT 1
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 2
39964: NEG
39965: PUSH
39966: LD_INT 1
39968: NEG
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 2
39976: NEG
39977: PUSH
39978: LD_INT 2
39980: NEG
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 2
39988: NEG
39989: PUSH
39990: LD_INT 3
39992: NEG
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 1
40000: NEG
40001: PUSH
40002: LD_INT 3
40004: NEG
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 0
40012: PUSH
40013: LD_INT 3
40015: NEG
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 1
40023: PUSH
40024: LD_INT 2
40026: NEG
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 3
40034: PUSH
40035: LD_INT 2
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_INT 3
40044: PUSH
40045: LD_INT 3
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 2
40054: PUSH
40055: LD_INT 3
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 1
40064: PUSH
40065: LD_INT 3
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 0
40074: PUSH
40075: LD_INT 3
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 1
40084: NEG
40085: PUSH
40086: LD_INT 2
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 3
40095: NEG
40096: PUSH
40097: LD_INT 2
40099: NEG
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 3
40107: NEG
40108: PUSH
40109: LD_INT 3
40111: NEG
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40148: LD_ADDR_VAR 0 43
40152: PUSH
40153: LD_INT 0
40155: PUSH
40156: LD_INT 0
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 0
40165: PUSH
40166: LD_INT 1
40168: NEG
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 1
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 1
40186: PUSH
40187: LD_INT 1
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 0
40196: PUSH
40197: LD_INT 1
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 1
40206: NEG
40207: PUSH
40208: LD_INT 0
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 1
40217: NEG
40218: PUSH
40219: LD_INT 1
40221: NEG
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 1
40229: NEG
40230: PUSH
40231: LD_INT 2
40233: NEG
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 0
40241: PUSH
40242: LD_INT 2
40244: NEG
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 1
40252: PUSH
40253: LD_INT 1
40255: NEG
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 2
40263: PUSH
40264: LD_INT 0
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 2
40273: PUSH
40274: LD_INT 1
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 1
40283: PUSH
40284: LD_INT 2
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 0
40293: PUSH
40294: LD_INT 2
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 1
40303: NEG
40304: PUSH
40305: LD_INT 1
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 2
40314: NEG
40315: PUSH
40316: LD_INT 0
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 2
40325: NEG
40326: PUSH
40327: LD_INT 1
40329: NEG
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: LD_INT 3
40341: NEG
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 0
40349: PUSH
40350: LD_INT 3
40352: NEG
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: LD_INT 2
40363: NEG
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 2
40371: PUSH
40372: LD_INT 1
40374: NEG
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 3
40382: PUSH
40383: LD_INT 0
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 3
40392: PUSH
40393: LD_INT 1
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 1
40402: PUSH
40403: LD_INT 3
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: LD_INT 3
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 1
40422: NEG
40423: PUSH
40424: LD_INT 2
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 2
40433: NEG
40434: PUSH
40435: LD_INT 1
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 3
40444: NEG
40445: PUSH
40446: LD_INT 0
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 3
40455: NEG
40456: PUSH
40457: LD_INT 1
40459: NEG
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40496: LD_ADDR_VAR 0 44
40500: PUSH
40501: LD_INT 0
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 0
40513: PUSH
40514: LD_INT 1
40516: NEG
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 1
40524: PUSH
40525: LD_INT 0
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 1
40534: PUSH
40535: LD_INT 1
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 0
40544: PUSH
40545: LD_INT 1
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 1
40554: NEG
40555: PUSH
40556: LD_INT 0
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 1
40565: NEG
40566: PUSH
40567: LD_INT 1
40569: NEG
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 1
40577: NEG
40578: PUSH
40579: LD_INT 2
40581: NEG
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 1
40589: PUSH
40590: LD_INT 1
40592: NEG
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 2
40600: PUSH
40601: LD_INT 0
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 2
40610: PUSH
40611: LD_INT 1
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 2
40620: PUSH
40621: LD_INT 2
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 1
40630: PUSH
40631: LD_INT 2
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 1
40640: NEG
40641: PUSH
40642: LD_INT 1
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 2
40651: NEG
40652: PUSH
40653: LD_INT 0
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 2
40662: NEG
40663: PUSH
40664: LD_INT 1
40666: NEG
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 2
40674: NEG
40675: PUSH
40676: LD_INT 2
40678: NEG
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 2
40686: NEG
40687: PUSH
40688: LD_INT 3
40690: NEG
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 2
40698: PUSH
40699: LD_INT 1
40701: NEG
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 3
40709: PUSH
40710: LD_INT 0
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 3
40719: PUSH
40720: LD_INT 1
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 3
40729: PUSH
40730: LD_INT 2
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 3
40739: PUSH
40740: LD_INT 3
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 2
40749: PUSH
40750: LD_INT 3
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 2
40759: NEG
40760: PUSH
40761: LD_INT 1
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 3
40770: NEG
40771: PUSH
40772: LD_INT 0
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 3
40781: NEG
40782: PUSH
40783: LD_INT 1
40785: NEG
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 3
40793: NEG
40794: PUSH
40795: LD_INT 2
40797: NEG
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 3
40805: NEG
40806: PUSH
40807: LD_INT 3
40809: NEG
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40846: LD_ADDR_VAR 0 45
40850: PUSH
40851: LD_INT 0
40853: PUSH
40854: LD_INT 0
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: LD_INT 1
40866: NEG
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 1
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 1
40884: PUSH
40885: LD_INT 1
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: LD_INT 1
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 1
40904: NEG
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 1
40915: NEG
40916: PUSH
40917: LD_INT 1
40919: NEG
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 1
40927: NEG
40928: PUSH
40929: LD_INT 2
40931: NEG
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: LD_INT 2
40942: NEG
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 1
40950: PUSH
40951: LD_INT 1
40953: NEG
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 2
40961: PUSH
40962: LD_INT 1
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 2
40971: PUSH
40972: LD_INT 2
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: LD_INT 2
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 0
40991: PUSH
40992: LD_INT 2
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 1
41001: NEG
41002: PUSH
41003: LD_INT 1
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 2
41012: NEG
41013: PUSH
41014: LD_INT 1
41016: NEG
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 2
41024: NEG
41025: PUSH
41026: LD_INT 2
41028: NEG
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 2
41036: NEG
41037: PUSH
41038: LD_INT 3
41040: NEG
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 1
41048: NEG
41049: PUSH
41050: LD_INT 3
41052: NEG
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 0
41060: PUSH
41061: LD_INT 3
41063: NEG
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 1
41071: PUSH
41072: LD_INT 2
41074: NEG
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 3
41082: PUSH
41083: LD_INT 2
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 3
41092: PUSH
41093: LD_INT 3
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 2
41102: PUSH
41103: LD_INT 3
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 1
41112: PUSH
41113: LD_INT 3
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 0
41122: PUSH
41123: LD_INT 3
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 1
41132: NEG
41133: PUSH
41134: LD_INT 2
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 3
41143: NEG
41144: PUSH
41145: LD_INT 2
41147: NEG
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 3
41155: NEG
41156: PUSH
41157: LD_INT 3
41159: NEG
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41196: LD_ADDR_VAR 0 46
41200: PUSH
41201: LD_INT 0
41203: PUSH
41204: LD_INT 0
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 0
41213: PUSH
41214: LD_INT 1
41216: NEG
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 1
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 1
41234: PUSH
41235: LD_INT 1
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 0
41244: PUSH
41245: LD_INT 1
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 1
41254: NEG
41255: PUSH
41256: LD_INT 0
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 1
41265: NEG
41266: PUSH
41267: LD_INT 1
41269: NEG
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 1
41277: NEG
41278: PUSH
41279: LD_INT 2
41281: NEG
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 0
41289: PUSH
41290: LD_INT 2
41292: NEG
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 1
41300: PUSH
41301: LD_INT 1
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 2
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 2
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 1
41331: PUSH
41332: LD_INT 2
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 0
41341: PUSH
41342: LD_INT 2
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 1
41351: NEG
41352: PUSH
41353: LD_INT 1
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 2
41362: NEG
41363: PUSH
41364: LD_INT 0
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 2
41373: NEG
41374: PUSH
41375: LD_INT 1
41377: NEG
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 1
41385: NEG
41386: PUSH
41387: LD_INT 3
41389: NEG
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: LD_INT 3
41400: NEG
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 1
41408: PUSH
41409: LD_INT 2
41411: NEG
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 2
41419: PUSH
41420: LD_INT 1
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 3
41430: PUSH
41431: LD_INT 0
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 3
41440: PUSH
41441: LD_INT 1
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 1
41450: PUSH
41451: LD_INT 3
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 0
41460: PUSH
41461: LD_INT 3
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 1
41470: NEG
41471: PUSH
41472: LD_INT 2
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 2
41481: NEG
41482: PUSH
41483: LD_INT 1
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 3
41492: NEG
41493: PUSH
41494: LD_INT 0
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 3
41503: NEG
41504: PUSH
41505: LD_INT 1
41507: NEG
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41544: LD_ADDR_VAR 0 47
41548: PUSH
41549: LD_INT 0
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 0
41561: PUSH
41562: LD_INT 1
41564: NEG
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 1
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 1
41582: PUSH
41583: LD_INT 1
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 0
41592: PUSH
41593: LD_INT 1
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: PUSH
41604: LD_INT 0
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: LD_INT 1
41617: NEG
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 1
41625: NEG
41626: PUSH
41627: LD_INT 2
41629: NEG
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 0
41637: PUSH
41638: LD_INT 2
41640: NEG
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 1
41648: PUSH
41649: LD_INT 1
41651: NEG
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 2
41659: NEG
41660: PUSH
41661: LD_INT 1
41663: NEG
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 2
41671: NEG
41672: PUSH
41673: LD_INT 2
41675: NEG
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41695: LD_ADDR_VAR 0 48
41699: PUSH
41700: LD_INT 0
41702: PUSH
41703: LD_INT 0
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 0
41712: PUSH
41713: LD_INT 1
41715: NEG
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 1
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 1
41733: PUSH
41734: LD_INT 1
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 0
41743: PUSH
41744: LD_INT 1
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 1
41753: NEG
41754: PUSH
41755: LD_INT 0
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 1
41764: NEG
41765: PUSH
41766: LD_INT 1
41768: NEG
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 1
41776: NEG
41777: PUSH
41778: LD_INT 2
41780: NEG
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 0
41788: PUSH
41789: LD_INT 2
41791: NEG
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 1
41799: PUSH
41800: LD_INT 1
41802: NEG
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 2
41810: PUSH
41811: LD_INT 0
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 2
41820: PUSH
41821: LD_INT 1
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41842: LD_ADDR_VAR 0 49
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 0
41859: PUSH
41860: LD_INT 1
41862: NEG
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 1
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 1
41880: PUSH
41881: LD_INT 1
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: LD_INT 1
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 1
41900: NEG
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 1
41911: NEG
41912: PUSH
41913: LD_INT 1
41915: NEG
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 1
41923: PUSH
41924: LD_INT 1
41926: NEG
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 2
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 2
41944: PUSH
41945: LD_INT 1
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 2
41954: PUSH
41955: LD_INT 2
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 1
41964: PUSH
41965: LD_INT 2
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41986: LD_ADDR_VAR 0 50
41990: PUSH
41991: LD_INT 0
41993: PUSH
41994: LD_INT 0
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 0
42003: PUSH
42004: LD_INT 1
42006: NEG
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 1
42014: PUSH
42015: LD_INT 0
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 1
42024: PUSH
42025: LD_INT 1
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: LD_INT 1
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 1
42044: NEG
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 1
42055: NEG
42056: PUSH
42057: LD_INT 1
42059: NEG
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 2
42067: PUSH
42068: LD_INT 1
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 2
42077: PUSH
42078: LD_INT 2
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 1
42087: PUSH
42088: LD_INT 2
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: LD_INT 2
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 1
42107: NEG
42108: PUSH
42109: LD_INT 1
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42130: LD_ADDR_VAR 0 51
42134: PUSH
42135: LD_INT 0
42137: PUSH
42138: LD_INT 0
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 0
42147: PUSH
42148: LD_INT 1
42150: NEG
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 1
42158: PUSH
42159: LD_INT 0
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 1
42168: PUSH
42169: LD_INT 1
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 0
42178: PUSH
42179: LD_INT 1
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 1
42188: NEG
42189: PUSH
42190: LD_INT 0
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 1
42199: NEG
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 1
42211: PUSH
42212: LD_INT 2
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 0
42221: PUSH
42222: LD_INT 2
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: NEG
42232: PUSH
42233: LD_INT 1
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 2
42242: NEG
42243: PUSH
42244: LD_INT 0
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 2
42253: NEG
42254: PUSH
42255: LD_INT 1
42257: NEG
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42277: LD_ADDR_VAR 0 52
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: LD_INT 0
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: LD_INT 1
42297: NEG
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 1
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: LD_INT 1
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 0
42325: PUSH
42326: LD_INT 1
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 1
42335: NEG
42336: PUSH
42337: LD_INT 0
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 1
42346: NEG
42347: PUSH
42348: LD_INT 1
42350: NEG
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 1
42358: NEG
42359: PUSH
42360: LD_INT 2
42362: NEG
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 1
42370: NEG
42371: PUSH
42372: LD_INT 1
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 2
42381: NEG
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 2
42392: NEG
42393: PUSH
42394: LD_INT 1
42396: NEG
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 2
42404: NEG
42405: PUSH
42406: LD_INT 2
42408: NEG
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42428: LD_ADDR_VAR 0 53
42432: PUSH
42433: LD_INT 0
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 0
42445: PUSH
42446: LD_INT 1
42448: NEG
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 1
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 1
42466: PUSH
42467: LD_INT 1
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 0
42476: PUSH
42477: LD_INT 1
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 1
42486: NEG
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 1
42497: NEG
42498: PUSH
42499: LD_INT 1
42501: NEG
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 1
42509: NEG
42510: PUSH
42511: LD_INT 2
42513: NEG
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 0
42521: PUSH
42522: LD_INT 2
42524: NEG
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 1
42532: PUSH
42533: LD_INT 1
42535: NEG
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 2
42543: PUSH
42544: LD_INT 0
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 2
42553: PUSH
42554: LD_INT 1
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 2
42563: PUSH
42564: LD_INT 2
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 1
42573: PUSH
42574: LD_INT 2
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 0
42583: PUSH
42584: LD_INT 2
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 1
42593: NEG
42594: PUSH
42595: LD_INT 1
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 2
42604: NEG
42605: PUSH
42606: LD_INT 0
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 2
42615: NEG
42616: PUSH
42617: LD_INT 1
42619: NEG
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 2
42627: NEG
42628: PUSH
42629: LD_INT 2
42631: NEG
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42658: LD_ADDR_VAR 0 54
42662: PUSH
42663: LD_INT 0
42665: PUSH
42666: LD_INT 0
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 0
42675: PUSH
42676: LD_INT 1
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 1
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 1
42696: PUSH
42697: LD_INT 1
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 0
42706: PUSH
42707: LD_INT 1
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 1
42716: NEG
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 1
42727: NEG
42728: PUSH
42729: LD_INT 1
42731: NEG
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 1
42739: NEG
42740: PUSH
42741: LD_INT 2
42743: NEG
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 0
42751: PUSH
42752: LD_INT 2
42754: NEG
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 1
42762: PUSH
42763: LD_INT 1
42765: NEG
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 2
42773: PUSH
42774: LD_INT 0
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 2
42783: PUSH
42784: LD_INT 1
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 2
42793: PUSH
42794: LD_INT 2
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 1
42803: PUSH
42804: LD_INT 2
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 0
42813: PUSH
42814: LD_INT 2
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 1
42823: NEG
42824: PUSH
42825: LD_INT 1
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 2
42834: NEG
42835: PUSH
42836: LD_INT 0
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 2
42845: NEG
42846: PUSH
42847: LD_INT 1
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 2
42857: NEG
42858: PUSH
42859: LD_INT 2
42861: NEG
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42888: LD_ADDR_VAR 0 55
42892: PUSH
42893: LD_INT 0
42895: PUSH
42896: LD_INT 0
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 0
42905: PUSH
42906: LD_INT 1
42908: NEG
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 1
42916: PUSH
42917: LD_INT 0
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 1
42926: PUSH
42927: LD_INT 1
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: LD_INT 1
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 1
42946: NEG
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 1
42957: NEG
42958: PUSH
42959: LD_INT 1
42961: NEG
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 1
42969: NEG
42970: PUSH
42971: LD_INT 2
42973: NEG
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: LD_INT 2
42984: NEG
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 1
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 2
43003: PUSH
43004: LD_INT 0
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 2
43013: PUSH
43014: LD_INT 1
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 2
43023: PUSH
43024: LD_INT 2
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 1
43033: PUSH
43034: LD_INT 2
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 0
43043: PUSH
43044: LD_INT 2
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: LD_INT 1
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 2
43064: NEG
43065: PUSH
43066: LD_INT 0
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 2
43075: NEG
43076: PUSH
43077: LD_INT 1
43079: NEG
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 2
43087: NEG
43088: PUSH
43089: LD_INT 2
43091: NEG
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43118: LD_ADDR_VAR 0 56
43122: PUSH
43123: LD_INT 0
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: LD_INT 1
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 1
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: LD_INT 1
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: LD_INT 1
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: NEG
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 1
43187: NEG
43188: PUSH
43189: LD_INT 1
43191: NEG
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 1
43199: NEG
43200: PUSH
43201: LD_INT 2
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 0
43211: PUSH
43212: LD_INT 2
43214: NEG
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 1
43222: PUSH
43223: LD_INT 1
43225: NEG
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 2
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 2
43243: PUSH
43244: LD_INT 1
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 2
43253: PUSH
43254: LD_INT 2
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: LD_INT 2
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 0
43273: PUSH
43274: LD_INT 2
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: LD_INT 1
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 2
43294: NEG
43295: PUSH
43296: LD_INT 0
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 2
43305: NEG
43306: PUSH
43307: LD_INT 1
43309: NEG
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 2
43317: NEG
43318: PUSH
43319: LD_INT 2
43321: NEG
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43348: LD_ADDR_VAR 0 57
43352: PUSH
43353: LD_INT 0
43355: PUSH
43356: LD_INT 0
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 0
43365: PUSH
43366: LD_INT 1
43368: NEG
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 1
43376: PUSH
43377: LD_INT 0
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 1
43386: PUSH
43387: LD_INT 1
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 0
43396: PUSH
43397: LD_INT 1
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 1
43406: NEG
43407: PUSH
43408: LD_INT 0
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 1
43417: NEG
43418: PUSH
43419: LD_INT 1
43421: NEG
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 1
43429: NEG
43430: PUSH
43431: LD_INT 2
43433: NEG
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 0
43441: PUSH
43442: LD_INT 2
43444: NEG
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 1
43452: PUSH
43453: LD_INT 1
43455: NEG
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 2
43463: PUSH
43464: LD_INT 0
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 2
43473: PUSH
43474: LD_INT 1
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 2
43483: PUSH
43484: LD_INT 2
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 1
43493: PUSH
43494: LD_INT 2
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: LD_INT 2
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 2
43524: NEG
43525: PUSH
43526: LD_INT 0
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 2
43535: NEG
43536: PUSH
43537: LD_INT 1
43539: NEG
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 2
43547: NEG
43548: PUSH
43549: LD_INT 2
43551: NEG
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43578: LD_ADDR_VAR 0 58
43582: PUSH
43583: LD_INT 0
43585: PUSH
43586: LD_INT 0
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 0
43595: PUSH
43596: LD_INT 1
43598: NEG
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 1
43606: PUSH
43607: LD_INT 0
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 1
43616: PUSH
43617: LD_INT 1
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: LD_INT 1
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 1
43636: NEG
43637: PUSH
43638: LD_INT 0
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 1
43647: NEG
43648: PUSH
43649: LD_INT 1
43651: NEG
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 1
43659: NEG
43660: PUSH
43661: LD_INT 2
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: LD_INT 2
43674: NEG
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 1
43682: PUSH
43683: LD_INT 1
43685: NEG
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 2
43693: PUSH
43694: LD_INT 0
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 2
43703: PUSH
43704: LD_INT 1
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 2
43713: PUSH
43714: LD_INT 2
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: LD_INT 2
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 0
43733: PUSH
43734: LD_INT 2
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 1
43743: NEG
43744: PUSH
43745: LD_INT 1
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 2
43754: NEG
43755: PUSH
43756: LD_INT 0
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 2
43765: NEG
43766: PUSH
43767: LD_INT 1
43769: NEG
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 2
43777: NEG
43778: PUSH
43779: LD_INT 2
43781: NEG
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43808: LD_ADDR_VAR 0 59
43812: PUSH
43813: LD_INT 0
43815: PUSH
43816: LD_INT 0
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: LD_INT 1
43828: NEG
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: LD_INT 0
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: PUSH
43847: LD_INT 1
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 0
43856: PUSH
43857: LD_INT 1
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 1
43866: NEG
43867: PUSH
43868: LD_INT 0
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 1
43877: NEG
43878: PUSH
43879: LD_INT 1
43881: NEG
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43896: LD_ADDR_VAR 0 60
43900: PUSH
43901: LD_INT 0
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 1
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: LD_INT 1
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: LD_INT 1
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 1
43954: NEG
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 1
43965: NEG
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43984: LD_ADDR_VAR 0 61
43988: PUSH
43989: LD_INT 0
43991: PUSH
43992: LD_INT 0
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 0
44001: PUSH
44002: LD_INT 1
44004: NEG
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: LD_INT 0
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 1
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: LD_INT 1
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 1
44042: NEG
44043: PUSH
44044: LD_INT 0
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 1
44053: NEG
44054: PUSH
44055: LD_INT 1
44057: NEG
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44072: LD_ADDR_VAR 0 62
44076: PUSH
44077: LD_INT 0
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: LD_INT 1
44092: NEG
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 1
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: PUSH
44111: LD_INT 1
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: LD_INT 1
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 1
44130: NEG
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 1
44141: NEG
44142: PUSH
44143: LD_INT 1
44145: NEG
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44160: LD_ADDR_VAR 0 63
44164: PUSH
44165: LD_INT 0
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 0
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 1
44188: PUSH
44189: LD_INT 0
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 1
44198: PUSH
44199: LD_INT 1
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 0
44208: PUSH
44209: LD_INT 1
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: LD_INT 0
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 1
44229: NEG
44230: PUSH
44231: LD_INT 1
44233: NEG
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44248: LD_ADDR_VAR 0 64
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 0
44265: PUSH
44266: LD_INT 1
44268: NEG
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: LD_INT 0
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 1
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: LD_INT 1
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 1
44306: NEG
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 1
44317: NEG
44318: PUSH
44319: LD_INT 1
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: ST_TO_ADDR
// end ; 1 :
44336: GO 50233
44338: LD_INT 1
44340: DOUBLE
44341: EQUAL
44342: IFTRUE 44346
44344: GO 46969
44346: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44347: LD_ADDR_VAR 0 11
44351: PUSH
44352: LD_INT 1
44354: NEG
44355: PUSH
44356: LD_INT 3
44358: NEG
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 0
44366: PUSH
44367: LD_INT 3
44369: NEG
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 1
44377: PUSH
44378: LD_INT 2
44380: NEG
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: LIST
44390: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44391: LD_ADDR_VAR 0 12
44395: PUSH
44396: LD_INT 2
44398: PUSH
44399: LD_INT 1
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 3
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 3
44419: PUSH
44420: LD_INT 1
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: LIST
44431: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44432: LD_ADDR_VAR 0 13
44436: PUSH
44437: LD_INT 3
44439: PUSH
44440: LD_INT 2
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 3
44449: PUSH
44450: LD_INT 3
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 2
44459: PUSH
44460: LD_INT 3
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: LIST
44471: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44472: LD_ADDR_VAR 0 14
44476: PUSH
44477: LD_INT 1
44479: PUSH
44480: LD_INT 3
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 0
44489: PUSH
44490: LD_INT 3
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 1
44499: NEG
44500: PUSH
44501: LD_INT 2
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: LIST
44512: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44513: LD_ADDR_VAR 0 15
44517: PUSH
44518: LD_INT 2
44520: NEG
44521: PUSH
44522: LD_INT 1
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 3
44531: NEG
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 3
44542: NEG
44543: PUSH
44544: LD_INT 1
44546: NEG
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: LIST
44556: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44557: LD_ADDR_VAR 0 16
44561: PUSH
44562: LD_INT 2
44564: NEG
44565: PUSH
44566: LD_INT 3
44568: NEG
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 3
44576: NEG
44577: PUSH
44578: LD_INT 2
44580: NEG
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 3
44588: NEG
44589: PUSH
44590: LD_INT 3
44592: NEG
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: LIST
44602: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44603: LD_ADDR_VAR 0 17
44607: PUSH
44608: LD_INT 1
44610: NEG
44611: PUSH
44612: LD_INT 3
44614: NEG
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: LD_INT 3
44625: NEG
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 1
44633: PUSH
44634: LD_INT 2
44636: NEG
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: LIST
44646: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44647: LD_ADDR_VAR 0 18
44651: PUSH
44652: LD_INT 2
44654: PUSH
44655: LD_INT 1
44657: NEG
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 3
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 3
44675: PUSH
44676: LD_INT 1
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: LIST
44687: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44688: LD_ADDR_VAR 0 19
44692: PUSH
44693: LD_INT 3
44695: PUSH
44696: LD_INT 2
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 3
44705: PUSH
44706: LD_INT 3
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 2
44715: PUSH
44716: LD_INT 3
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: LIST
44727: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44728: LD_ADDR_VAR 0 20
44732: PUSH
44733: LD_INT 1
44735: PUSH
44736: LD_INT 3
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 0
44745: PUSH
44746: LD_INT 3
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: NEG
44756: PUSH
44757: LD_INT 2
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: LIST
44768: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44769: LD_ADDR_VAR 0 21
44773: PUSH
44774: LD_INT 2
44776: NEG
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 3
44787: NEG
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 3
44798: NEG
44799: PUSH
44800: LD_INT 1
44802: NEG
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: LIST
44812: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44813: LD_ADDR_VAR 0 22
44817: PUSH
44818: LD_INT 2
44820: NEG
44821: PUSH
44822: LD_INT 3
44824: NEG
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 3
44832: NEG
44833: PUSH
44834: LD_INT 2
44836: NEG
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 3
44844: NEG
44845: PUSH
44846: LD_INT 3
44848: NEG
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: LIST
44858: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
44859: LD_ADDR_VAR 0 23
44863: PUSH
44864: LD_INT 0
44866: PUSH
44867: LD_INT 3
44869: NEG
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 1
44877: NEG
44878: PUSH
44879: LD_INT 4
44881: NEG
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: LD_INT 3
44892: NEG
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: LIST
44902: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
44903: LD_ADDR_VAR 0 24
44907: PUSH
44908: LD_INT 3
44910: PUSH
44911: LD_INT 0
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 3
44920: PUSH
44921: LD_INT 1
44923: NEG
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 4
44931: PUSH
44932: LD_INT 1
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: LIST
44943: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
44944: LD_ADDR_VAR 0 25
44948: PUSH
44949: LD_INT 3
44951: PUSH
44952: LD_INT 3
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 4
44961: PUSH
44962: LD_INT 3
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 3
44971: PUSH
44972: LD_INT 4
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: LIST
44983: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
44984: LD_ADDR_VAR 0 26
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: LD_INT 3
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: LD_INT 4
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 1
45011: NEG
45012: PUSH
45013: LD_INT 3
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: LIST
45024: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
45025: LD_ADDR_VAR 0 27
45029: PUSH
45030: LD_INT 3
45032: NEG
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 3
45043: NEG
45044: PUSH
45045: LD_INT 1
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 4
45054: NEG
45055: PUSH
45056: LD_INT 1
45058: NEG
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: LIST
45068: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
45069: LD_ADDR_VAR 0 28
45073: PUSH
45074: LD_INT 3
45076: NEG
45077: PUSH
45078: LD_INT 3
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 3
45088: NEG
45089: PUSH
45090: LD_INT 4
45092: NEG
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 4
45100: NEG
45101: PUSH
45102: LD_INT 3
45104: NEG
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: LIST
45114: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
45115: LD_ADDR_VAR 0 29
45119: PUSH
45120: LD_INT 1
45122: NEG
45123: PUSH
45124: LD_INT 3
45126: NEG
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 0
45134: PUSH
45135: LD_INT 3
45137: NEG
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 1
45145: PUSH
45146: LD_INT 2
45148: NEG
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 1
45156: NEG
45157: PUSH
45158: LD_INT 4
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: LD_INT 4
45171: NEG
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 1
45179: PUSH
45180: LD_INT 3
45182: NEG
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 1
45190: NEG
45191: PUSH
45192: LD_INT 5
45194: NEG
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 0
45202: PUSH
45203: LD_INT 5
45205: NEG
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 1
45213: PUSH
45214: LD_INT 4
45216: NEG
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 1
45224: NEG
45225: PUSH
45226: LD_INT 6
45228: NEG
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 0
45236: PUSH
45237: LD_INT 6
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 1
45247: PUSH
45248: LD_INT 5
45250: NEG
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
45270: LD_ADDR_VAR 0 30
45274: PUSH
45275: LD_INT 2
45277: PUSH
45278: LD_INT 1
45280: NEG
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 3
45288: PUSH
45289: LD_INT 0
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 3
45298: PUSH
45299: LD_INT 1
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 3
45308: PUSH
45309: LD_INT 1
45311: NEG
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 4
45319: PUSH
45320: LD_INT 0
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 4
45329: PUSH
45330: LD_INT 1
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 4
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 5
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 5
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 5
45370: PUSH
45371: LD_INT 1
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 6
45381: PUSH
45382: LD_INT 0
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 6
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
45413: LD_ADDR_VAR 0 31
45417: PUSH
45418: LD_INT 3
45420: PUSH
45421: LD_INT 2
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 3
45430: PUSH
45431: LD_INT 3
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 2
45440: PUSH
45441: LD_INT 3
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 4
45450: PUSH
45451: LD_INT 3
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 4
45460: PUSH
45461: LD_INT 4
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 3
45470: PUSH
45471: LD_INT 4
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 5
45480: PUSH
45481: LD_INT 4
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 5
45490: PUSH
45491: LD_INT 5
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 4
45500: PUSH
45501: LD_INT 5
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 6
45510: PUSH
45511: LD_INT 5
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 6
45520: PUSH
45521: LD_INT 6
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 5
45530: PUSH
45531: LD_INT 6
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
45552: LD_ADDR_VAR 0 32
45556: PUSH
45557: LD_INT 1
45559: PUSH
45560: LD_INT 3
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: LD_INT 3
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: LD_INT 2
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: LD_INT 4
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: LD_INT 4
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: LD_INT 3
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: LD_INT 5
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: LD_INT 5
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: LD_INT 4
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 1
45652: PUSH
45653: LD_INT 6
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 0
45662: PUSH
45663: LD_INT 6
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 1
45672: NEG
45673: PUSH
45674: LD_INT 5
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
45695: LD_ADDR_VAR 0 33
45699: PUSH
45700: LD_INT 2
45702: NEG
45703: PUSH
45704: LD_INT 1
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 3
45713: NEG
45714: PUSH
45715: LD_INT 0
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 3
45724: NEG
45725: PUSH
45726: LD_INT 1
45728: NEG
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 3
45736: NEG
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 4
45747: NEG
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 4
45758: NEG
45759: PUSH
45760: LD_INT 1
45762: NEG
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 4
45770: NEG
45771: PUSH
45772: LD_INT 1
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 5
45781: NEG
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 5
45792: NEG
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 5
45804: NEG
45805: PUSH
45806: LD_INT 1
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 6
45815: NEG
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 6
45826: NEG
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
45850: LD_ADDR_VAR 0 34
45854: PUSH
45855: LD_INT 2
45857: NEG
45858: PUSH
45859: LD_INT 3
45861: NEG
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 3
45869: NEG
45870: PUSH
45871: LD_INT 2
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 3
45881: NEG
45882: PUSH
45883: LD_INT 3
45885: NEG
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 3
45893: NEG
45894: PUSH
45895: LD_INT 4
45897: NEG
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 4
45905: NEG
45906: PUSH
45907: LD_INT 3
45909: NEG
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 4
45917: NEG
45918: PUSH
45919: LD_INT 4
45921: NEG
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 4
45929: NEG
45930: PUSH
45931: LD_INT 5
45933: NEG
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 5
45941: NEG
45942: PUSH
45943: LD_INT 4
45945: NEG
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 5
45953: NEG
45954: PUSH
45955: LD_INT 5
45957: NEG
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 5
45965: NEG
45966: PUSH
45967: LD_INT 6
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 6
45977: NEG
45978: PUSH
45979: LD_INT 5
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 6
45989: NEG
45990: PUSH
45991: LD_INT 6
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
46013: LD_ADDR_VAR 0 41
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: LD_INT 2
46023: NEG
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 1
46031: NEG
46032: PUSH
46033: LD_INT 3
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: LD_INT 2
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: LIST
46056: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
46057: LD_ADDR_VAR 0 42
46061: PUSH
46062: LD_INT 2
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: LD_INT 1
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 3
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: LIST
46097: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
46098: LD_ADDR_VAR 0 43
46102: PUSH
46103: LD_INT 2
46105: PUSH
46106: LD_INT 2
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 3
46115: PUSH
46116: LD_INT 2
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 2
46125: PUSH
46126: LD_INT 3
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: LIST
46137: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
46138: LD_ADDR_VAR 0 44
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: LD_INT 2
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: LD_INT 3
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: LD_INT 2
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: LIST
46178: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46179: LD_ADDR_VAR 0 45
46183: PUSH
46184: LD_INT 2
46186: NEG
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 2
46197: NEG
46198: PUSH
46199: LD_INT 1
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 3
46208: NEG
46209: PUSH
46210: LD_INT 1
46212: NEG
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: LIST
46222: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
46223: LD_ADDR_VAR 0 46
46227: PUSH
46228: LD_INT 2
46230: NEG
46231: PUSH
46232: LD_INT 2
46234: NEG
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 2
46242: NEG
46243: PUSH
46244: LD_INT 3
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 3
46254: NEG
46255: PUSH
46256: LD_INT 2
46258: NEG
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: LIST
46268: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
46269: LD_ADDR_VAR 0 47
46273: PUSH
46274: LD_INT 2
46276: NEG
46277: PUSH
46278: LD_INT 3
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: NEG
46289: PUSH
46290: LD_INT 3
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46302: LD_ADDR_VAR 0 48
46306: PUSH
46307: LD_INT 1
46309: PUSH
46310: LD_INT 2
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 2
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
46333: LD_ADDR_VAR 0 49
46337: PUSH
46338: LD_INT 3
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 3
46350: PUSH
46351: LD_INT 2
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
46362: LD_ADDR_VAR 0 50
46366: PUSH
46367: LD_INT 2
46369: PUSH
46370: LD_INT 3
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 1
46379: PUSH
46380: LD_INT 3
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46391: LD_ADDR_VAR 0 51
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: LD_INT 2
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 2
46409: NEG
46410: PUSH
46411: LD_INT 1
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46422: LD_ADDR_VAR 0 52
46426: PUSH
46427: LD_INT 3
46429: NEG
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 3
46441: NEG
46442: PUSH
46443: LD_INT 2
46445: NEG
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46455: LD_ADDR_VAR 0 53
46459: PUSH
46460: LD_INT 1
46462: NEG
46463: PUSH
46464: LD_INT 3
46466: NEG
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: LD_INT 3
46477: NEG
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 1
46485: PUSH
46486: LD_INT 2
46488: NEG
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: LIST
46498: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46499: LD_ADDR_VAR 0 54
46503: PUSH
46504: LD_INT 2
46506: PUSH
46507: LD_INT 1
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 3
46517: PUSH
46518: LD_INT 0
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 3
46527: PUSH
46528: LD_INT 1
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: LIST
46539: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46540: LD_ADDR_VAR 0 55
46544: PUSH
46545: LD_INT 3
46547: PUSH
46548: LD_INT 2
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 3
46557: PUSH
46558: LD_INT 3
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 2
46567: PUSH
46568: LD_INT 3
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: LIST
46579: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46580: LD_ADDR_VAR 0 56
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: LD_INT 3
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: LD_INT 3
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 1
46607: NEG
46608: PUSH
46609: LD_INT 2
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: LIST
46620: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46621: LD_ADDR_VAR 0 57
46625: PUSH
46626: LD_INT 2
46628: NEG
46629: PUSH
46630: LD_INT 1
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 3
46639: NEG
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 3
46650: NEG
46651: PUSH
46652: LD_INT 1
46654: NEG
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: LIST
46664: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46665: LD_ADDR_VAR 0 58
46669: PUSH
46670: LD_INT 2
46672: NEG
46673: PUSH
46674: LD_INT 3
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 3
46684: NEG
46685: PUSH
46686: LD_INT 2
46688: NEG
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 3
46696: NEG
46697: PUSH
46698: LD_INT 3
46700: NEG
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: LIST
46710: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
46711: LD_ADDR_VAR 0 59
46715: PUSH
46716: LD_INT 1
46718: NEG
46719: PUSH
46720: LD_INT 2
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: LD_INT 2
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: LD_INT 1
46744: NEG
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: LIST
46754: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46755: LD_ADDR_VAR 0 60
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 2
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 2
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: LIST
46795: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46796: LD_ADDR_VAR 0 61
46800: PUSH
46801: LD_INT 2
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 2
46813: PUSH
46814: LD_INT 2
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: PUSH
46824: LD_INT 2
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: LIST
46835: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46836: LD_ADDR_VAR 0 62
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: LD_INT 2
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 0
46853: PUSH
46854: LD_INT 2
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: LD_INT 1
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: LIST
46876: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46877: LD_ADDR_VAR 0 63
46881: PUSH
46882: LD_INT 1
46884: NEG
46885: PUSH
46886: LD_INT 1
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 2
46895: NEG
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 2
46906: NEG
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: LIST
46920: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46921: LD_ADDR_VAR 0 64
46925: PUSH
46926: LD_INT 1
46928: NEG
46929: PUSH
46930: LD_INT 2
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 2
46940: NEG
46941: PUSH
46942: LD_INT 1
46944: NEG
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 2
46952: NEG
46953: PUSH
46954: LD_INT 2
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: LIST
46966: ST_TO_ADDR
// end ; 2 :
46967: GO 50233
46969: LD_INT 2
46971: DOUBLE
46972: EQUAL
46973: IFTRUE 46977
46975: GO 50232
46977: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
46978: LD_ADDR_VAR 0 29
46982: PUSH
46983: LD_INT 4
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 4
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 5
47006: PUSH
47007: LD_INT 0
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 5
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 4
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 3
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 3
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 3
47057: PUSH
47058: LD_INT 2
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 5
47068: PUSH
47069: LD_INT 2
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 3
47078: PUSH
47079: LD_INT 3
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 3
47088: PUSH
47089: LD_INT 2
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 4
47098: PUSH
47099: LD_INT 3
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 4
47108: PUSH
47109: LD_INT 4
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 3
47118: PUSH
47119: LD_INT 4
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 2
47128: PUSH
47129: LD_INT 3
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 2
47138: PUSH
47139: LD_INT 2
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 4
47148: PUSH
47149: LD_INT 2
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 2
47158: PUSH
47159: LD_INT 4
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 0
47168: PUSH
47169: LD_INT 4
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: LD_INT 3
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 1
47188: PUSH
47189: LD_INT 4
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: LD_INT 5
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: LD_INT 5
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 1
47218: NEG
47219: PUSH
47220: LD_INT 4
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 1
47229: NEG
47230: PUSH
47231: LD_INT 3
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 2
47240: PUSH
47241: LD_INT 5
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 2
47250: NEG
47251: PUSH
47252: LD_INT 3
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 3
47261: NEG
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 3
47272: NEG
47273: PUSH
47274: LD_INT 1
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 2
47284: NEG
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 2
47295: NEG
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 3
47306: NEG
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 4
47317: NEG
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 4
47328: NEG
47329: PUSH
47330: LD_INT 1
47332: NEG
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 4
47340: NEG
47341: PUSH
47342: LD_INT 2
47344: NEG
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 2
47352: NEG
47353: PUSH
47354: LD_INT 2
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 4
47363: NEG
47364: PUSH
47365: LD_INT 4
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 4
47375: NEG
47376: PUSH
47377: LD_INT 5
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 3
47387: NEG
47388: PUSH
47389: LD_INT 4
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 3
47399: NEG
47400: PUSH
47401: LD_INT 3
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 4
47411: NEG
47412: PUSH
47413: LD_INT 3
47415: NEG
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 5
47423: NEG
47424: PUSH
47425: LD_INT 4
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 5
47435: NEG
47436: PUSH
47437: LD_INT 5
47439: NEG
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 3
47447: NEG
47448: PUSH
47449: LD_INT 5
47451: NEG
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 5
47459: NEG
47460: PUSH
47461: LD_INT 3
47463: NEG
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
47516: LD_ADDR_VAR 0 30
47520: PUSH
47521: LD_INT 4
47523: PUSH
47524: LD_INT 4
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 4
47533: PUSH
47534: LD_INT 3
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 5
47543: PUSH
47544: LD_INT 4
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 5
47553: PUSH
47554: LD_INT 5
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 4
47563: PUSH
47564: LD_INT 5
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 3
47573: PUSH
47574: LD_INT 4
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 3
47583: PUSH
47584: LD_INT 3
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 5
47593: PUSH
47594: LD_INT 3
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 3
47603: PUSH
47604: LD_INT 5
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 0
47613: PUSH
47614: LD_INT 3
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: LD_INT 2
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 1
47633: PUSH
47634: LD_INT 3
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 1
47643: PUSH
47644: LD_INT 4
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: LD_INT 4
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: LD_INT 3
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: LD_INT 2
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 2
47685: PUSH
47686: LD_INT 4
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 2
47695: NEG
47696: PUSH
47697: LD_INT 2
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 4
47706: NEG
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 4
47717: NEG
47718: PUSH
47719: LD_INT 1
47721: NEG
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 3
47729: NEG
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 3
47740: NEG
47741: PUSH
47742: LD_INT 1
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 4
47751: NEG
47752: PUSH
47753: LD_INT 1
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 5
47762: NEG
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 5
47773: NEG
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 5
47785: NEG
47786: PUSH
47787: LD_INT 2
47789: NEG
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 3
47797: NEG
47798: PUSH
47799: LD_INT 2
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 3
47808: NEG
47809: PUSH
47810: LD_INT 3
47812: NEG
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 3
47820: NEG
47821: PUSH
47822: LD_INT 4
47824: NEG
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 2
47832: NEG
47833: PUSH
47834: LD_INT 3
47836: NEG
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 2
47844: NEG
47845: PUSH
47846: LD_INT 2
47848: NEG
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 3
47856: NEG
47857: PUSH
47858: LD_INT 2
47860: NEG
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 4
47868: NEG
47869: PUSH
47870: LD_INT 3
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 4
47880: NEG
47881: PUSH
47882: LD_INT 4
47884: NEG
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 2
47892: NEG
47893: PUSH
47894: LD_INT 4
47896: NEG
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 4
47904: NEG
47905: PUSH
47906: LD_INT 2
47908: NEG
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: LD_INT 4
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: LD_INT 5
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: LD_INT 4
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: PUSH
47950: LD_INT 3
47952: NEG
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: LD_INT 3
47963: NEG
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: NEG
47972: PUSH
47973: LD_INT 4
47975: NEG
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 1
47983: NEG
47984: PUSH
47985: LD_INT 5
47987: NEG
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 2
47995: PUSH
47996: LD_INT 3
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 2
48006: NEG
48007: PUSH
48008: LD_INT 5
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
48063: LD_ADDR_VAR 0 31
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: LD_INT 4
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: LD_INT 3
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: LD_INT 4
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 1
48100: PUSH
48101: LD_INT 5
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: LD_INT 5
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 1
48120: NEG
48121: PUSH
48122: LD_INT 4
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 1
48131: NEG
48132: PUSH
48133: LD_INT 3
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 2
48142: PUSH
48143: LD_INT 5
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 2
48152: NEG
48153: PUSH
48154: LD_INT 3
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 3
48163: NEG
48164: PUSH
48165: LD_INT 0
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 3
48174: NEG
48175: PUSH
48176: LD_INT 1
48178: NEG
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 2
48186: NEG
48187: PUSH
48188: LD_INT 0
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 2
48197: NEG
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 3
48208: NEG
48209: PUSH
48210: LD_INT 1
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 4
48219: NEG
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 4
48230: NEG
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 4
48242: NEG
48243: PUSH
48244: LD_INT 2
48246: NEG
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 2
48254: NEG
48255: PUSH
48256: LD_INT 2
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 4
48265: NEG
48266: PUSH
48267: LD_INT 4
48269: NEG
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 4
48277: NEG
48278: PUSH
48279: LD_INT 5
48281: NEG
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 3
48289: NEG
48290: PUSH
48291: LD_INT 4
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 3
48301: NEG
48302: PUSH
48303: LD_INT 3
48305: NEG
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 4
48313: NEG
48314: PUSH
48315: LD_INT 3
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 5
48325: NEG
48326: PUSH
48327: LD_INT 4
48329: NEG
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 5
48337: NEG
48338: PUSH
48339: LD_INT 5
48341: NEG
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 3
48349: NEG
48350: PUSH
48351: LD_INT 5
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 5
48361: NEG
48362: PUSH
48363: LD_INT 3
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 0
48373: PUSH
48374: LD_INT 3
48376: NEG
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: LD_INT 4
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: LD_INT 3
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 1
48406: PUSH
48407: LD_INT 2
48409: NEG
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 0
48417: PUSH
48418: LD_INT 2
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 1
48428: NEG
48429: PUSH
48430: LD_INT 3
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: LD_INT 4
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 2
48452: PUSH
48453: LD_INT 2
48455: NEG
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 2
48463: NEG
48464: PUSH
48465: LD_INT 4
48467: NEG
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 4
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 4
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 5
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 5
48506: PUSH
48507: LD_INT 1
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 4
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 3
48526: PUSH
48527: LD_INT 0
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 3
48536: PUSH
48537: LD_INT 1
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 3
48547: PUSH
48548: LD_INT 2
48550: NEG
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 5
48558: PUSH
48559: LD_INT 2
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
48613: LD_ADDR_VAR 0 32
48617: PUSH
48618: LD_INT 4
48620: NEG
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 4
48631: NEG
48632: PUSH
48633: LD_INT 1
48635: NEG
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 3
48643: NEG
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 3
48654: NEG
48655: PUSH
48656: LD_INT 1
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 4
48665: NEG
48666: PUSH
48667: LD_INT 1
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 5
48676: NEG
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 5
48687: NEG
48688: PUSH
48689: LD_INT 1
48691: NEG
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 5
48699: NEG
48700: PUSH
48701: LD_INT 2
48703: NEG
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 3
48711: NEG
48712: PUSH
48713: LD_INT 2
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 3
48722: NEG
48723: PUSH
48724: LD_INT 3
48726: NEG
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 3
48734: NEG
48735: PUSH
48736: LD_INT 4
48738: NEG
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 2
48746: NEG
48747: PUSH
48748: LD_INT 3
48750: NEG
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 2
48758: NEG
48759: PUSH
48760: LD_INT 2
48762: NEG
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 3
48770: NEG
48771: PUSH
48772: LD_INT 2
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 4
48782: NEG
48783: PUSH
48784: LD_INT 3
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 4
48794: NEG
48795: PUSH
48796: LD_INT 4
48798: NEG
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 2
48806: NEG
48807: PUSH
48808: LD_INT 4
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 4
48818: NEG
48819: PUSH
48820: LD_INT 2
48822: NEG
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: LD_INT 4
48833: NEG
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: LD_INT 5
48844: NEG
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 1
48852: PUSH
48853: LD_INT 4
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: PUSH
48864: LD_INT 3
48866: NEG
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 0
48874: PUSH
48875: LD_INT 3
48877: NEG
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 1
48885: NEG
48886: PUSH
48887: LD_INT 4
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: NEG
48898: PUSH
48899: LD_INT 5
48901: NEG
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 2
48909: PUSH
48910: LD_INT 3
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 2
48920: NEG
48921: PUSH
48922: LD_INT 5
48924: NEG
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 3
48932: PUSH
48933: LD_INT 0
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 3
48942: PUSH
48943: LD_INT 1
48945: NEG
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 4
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 4
48963: PUSH
48964: LD_INT 1
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 3
48973: PUSH
48974: LD_INT 1
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 2
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: LD_INT 1
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 2
49004: PUSH
49005: LD_INT 2
49007: NEG
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 4
49015: PUSH
49016: LD_INT 2
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 4
49025: PUSH
49026: LD_INT 4
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 4
49035: PUSH
49036: LD_INT 3
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 5
49045: PUSH
49046: LD_INT 4
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 5
49055: PUSH
49056: LD_INT 5
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 4
49065: PUSH
49066: LD_INT 5
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 3
49075: PUSH
49076: LD_INT 4
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 3
49085: PUSH
49086: LD_INT 3
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 5
49095: PUSH
49096: LD_INT 3
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 3
49105: PUSH
49106: LD_INT 5
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
49160: LD_ADDR_VAR 0 33
49164: PUSH
49165: LD_INT 4
49167: NEG
49168: PUSH
49169: LD_INT 4
49171: NEG
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 4
49179: NEG
49180: PUSH
49181: LD_INT 5
49183: NEG
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 3
49191: NEG
49192: PUSH
49193: LD_INT 4
49195: NEG
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 3
49203: NEG
49204: PUSH
49205: LD_INT 3
49207: NEG
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 4
49215: NEG
49216: PUSH
49217: LD_INT 3
49219: NEG
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 5
49227: NEG
49228: PUSH
49229: LD_INT 4
49231: NEG
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 5
49239: NEG
49240: PUSH
49241: LD_INT 5
49243: NEG
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 3
49251: NEG
49252: PUSH
49253: LD_INT 5
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 5
49263: NEG
49264: PUSH
49265: LD_INT 3
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 0
49275: PUSH
49276: LD_INT 3
49278: NEG
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: LD_INT 4
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 1
49297: PUSH
49298: LD_INT 3
49300: NEG
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: LD_INT 2
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: LD_INT 2
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 1
49330: NEG
49331: PUSH
49332: LD_INT 3
49334: NEG
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: LD_INT 4
49346: NEG
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 2
49354: PUSH
49355: LD_INT 2
49357: NEG
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 2
49365: NEG
49366: PUSH
49367: LD_INT 4
49369: NEG
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 4
49377: PUSH
49378: LD_INT 0
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 4
49387: PUSH
49388: LD_INT 1
49390: NEG
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 5
49398: PUSH
49399: LD_INT 0
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 5
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 4
49418: PUSH
49419: LD_INT 1
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 3
49428: PUSH
49429: LD_INT 0
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 3
49438: PUSH
49439: LD_INT 1
49441: NEG
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 3
49449: PUSH
49450: LD_INT 2
49452: NEG
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 5
49460: PUSH
49461: LD_INT 2
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 3
49470: PUSH
49471: LD_INT 3
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 3
49480: PUSH
49481: LD_INT 2
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 4
49490: PUSH
49491: LD_INT 3
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 4
49500: PUSH
49501: LD_INT 4
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 3
49510: PUSH
49511: LD_INT 4
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 2
49520: PUSH
49521: LD_INT 3
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 2
49530: PUSH
49531: LD_INT 2
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 4
49540: PUSH
49541: LD_INT 2
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 2
49550: PUSH
49551: LD_INT 4
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: LD_INT 4
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: LD_INT 3
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: LD_INT 4
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 1
49590: PUSH
49591: LD_INT 5
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: LD_INT 5
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: LD_INT 4
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: NEG
49622: PUSH
49623: LD_INT 3
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 2
49632: PUSH
49633: LD_INT 5
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 2
49642: NEG
49643: PUSH
49644: LD_INT 3
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
49698: LD_ADDR_VAR 0 34
49702: PUSH
49703: LD_INT 0
49705: PUSH
49706: LD_INT 4
49708: NEG
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: LD_INT 5
49719: NEG
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: LD_INT 4
49730: NEG
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 1
49738: PUSH
49739: LD_INT 3
49741: NEG
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 0
49749: PUSH
49750: LD_INT 3
49752: NEG
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 1
49760: NEG
49761: PUSH
49762: LD_INT 4
49764: NEG
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 1
49772: NEG
49773: PUSH
49774: LD_INT 5
49776: NEG
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 2
49784: PUSH
49785: LD_INT 3
49787: NEG
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 2
49795: NEG
49796: PUSH
49797: LD_INT 5
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 3
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 3
49817: PUSH
49818: LD_INT 1
49820: NEG
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 4
49828: PUSH
49829: LD_INT 0
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 4
49838: PUSH
49839: LD_INT 1
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 3
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 2
49858: PUSH
49859: LD_INT 0
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 2
49868: PUSH
49869: LD_INT 1
49871: NEG
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 2
49879: PUSH
49880: LD_INT 2
49882: NEG
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 4
49890: PUSH
49891: LD_INT 2
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 4
49900: PUSH
49901: LD_INT 4
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 4
49910: PUSH
49911: LD_INT 3
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 5
49920: PUSH
49921: LD_INT 4
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 5
49930: PUSH
49931: LD_INT 5
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 4
49940: PUSH
49941: LD_INT 5
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 3
49950: PUSH
49951: LD_INT 4
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 3
49960: PUSH
49961: LD_INT 3
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 5
49970: PUSH
49971: LD_INT 3
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 3
49980: PUSH
49981: LD_INT 5
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: LD_INT 3
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: LD_INT 2
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: LD_INT 3
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 1
50020: PUSH
50021: LD_INT 4
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: LD_INT 4
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 1
50040: NEG
50041: PUSH
50042: LD_INT 3
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 1
50051: NEG
50052: PUSH
50053: LD_INT 2
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: LD_INT 4
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 2
50072: NEG
50073: PUSH
50074: LD_INT 2
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 4
50083: NEG
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 4
50094: NEG
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 3
50106: NEG
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 3
50117: NEG
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 4
50128: NEG
50129: PUSH
50130: LD_INT 1
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 5
50139: NEG
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 5
50150: NEG
50151: PUSH
50152: LD_INT 1
50154: NEG
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 5
50162: NEG
50163: PUSH
50164: LD_INT 2
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 3
50174: NEG
50175: PUSH
50176: LD_INT 2
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: ST_TO_ADDR
// end ; end ;
50230: GO 50233
50232: POP
// case btype of b_depot , b_warehouse :
50233: LD_VAR 0 1
50237: PUSH
50238: LD_INT 0
50240: DOUBLE
50241: EQUAL
50242: IFTRUE 50252
50244: LD_INT 1
50246: DOUBLE
50247: EQUAL
50248: IFTRUE 50252
50250: GO 50453
50252: POP
// case nation of nation_american :
50253: LD_VAR 0 5
50257: PUSH
50258: LD_INT 1
50260: DOUBLE
50261: EQUAL
50262: IFTRUE 50266
50264: GO 50322
50266: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
50267: LD_ADDR_VAR 0 9
50271: PUSH
50272: LD_VAR 0 11
50276: PUSH
50277: LD_VAR 0 12
50281: PUSH
50282: LD_VAR 0 13
50286: PUSH
50287: LD_VAR 0 14
50291: PUSH
50292: LD_VAR 0 15
50296: PUSH
50297: LD_VAR 0 16
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: PUSH
50310: LD_VAR 0 4
50314: PUSH
50315: LD_INT 1
50317: PLUS
50318: ARRAY
50319: ST_TO_ADDR
50320: GO 50451
50322: LD_INT 2
50324: DOUBLE
50325: EQUAL
50326: IFTRUE 50330
50328: GO 50386
50330: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
50331: LD_ADDR_VAR 0 9
50335: PUSH
50336: LD_VAR 0 17
50340: PUSH
50341: LD_VAR 0 18
50345: PUSH
50346: LD_VAR 0 19
50350: PUSH
50351: LD_VAR 0 20
50355: PUSH
50356: LD_VAR 0 21
50360: PUSH
50361: LD_VAR 0 22
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: PUSH
50374: LD_VAR 0 4
50378: PUSH
50379: LD_INT 1
50381: PLUS
50382: ARRAY
50383: ST_TO_ADDR
50384: GO 50451
50386: LD_INT 3
50388: DOUBLE
50389: EQUAL
50390: IFTRUE 50394
50392: GO 50450
50394: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
50395: LD_ADDR_VAR 0 9
50399: PUSH
50400: LD_VAR 0 23
50404: PUSH
50405: LD_VAR 0 24
50409: PUSH
50410: LD_VAR 0 25
50414: PUSH
50415: LD_VAR 0 26
50419: PUSH
50420: LD_VAR 0 27
50424: PUSH
50425: LD_VAR 0 28
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: PUSH
50438: LD_VAR 0 4
50442: PUSH
50443: LD_INT 1
50445: PLUS
50446: ARRAY
50447: ST_TO_ADDR
50448: GO 50451
50450: POP
50451: GO 51006
50453: LD_INT 2
50455: DOUBLE
50456: EQUAL
50457: IFTRUE 50467
50459: LD_INT 3
50461: DOUBLE
50462: EQUAL
50463: IFTRUE 50467
50465: GO 50523
50467: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
50468: LD_ADDR_VAR 0 9
50472: PUSH
50473: LD_VAR 0 29
50477: PUSH
50478: LD_VAR 0 30
50482: PUSH
50483: LD_VAR 0 31
50487: PUSH
50488: LD_VAR 0 32
50492: PUSH
50493: LD_VAR 0 33
50497: PUSH
50498: LD_VAR 0 34
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: PUSH
50511: LD_VAR 0 4
50515: PUSH
50516: LD_INT 1
50518: PLUS
50519: ARRAY
50520: ST_TO_ADDR
50521: GO 51006
50523: LD_INT 16
50525: DOUBLE
50526: EQUAL
50527: IFTRUE 50585
50529: LD_INT 17
50531: DOUBLE
50532: EQUAL
50533: IFTRUE 50585
50535: LD_INT 18
50537: DOUBLE
50538: EQUAL
50539: IFTRUE 50585
50541: LD_INT 19
50543: DOUBLE
50544: EQUAL
50545: IFTRUE 50585
50547: LD_INT 22
50549: DOUBLE
50550: EQUAL
50551: IFTRUE 50585
50553: LD_INT 20
50555: DOUBLE
50556: EQUAL
50557: IFTRUE 50585
50559: LD_INT 21
50561: DOUBLE
50562: EQUAL
50563: IFTRUE 50585
50565: LD_INT 23
50567: DOUBLE
50568: EQUAL
50569: IFTRUE 50585
50571: LD_INT 24
50573: DOUBLE
50574: EQUAL
50575: IFTRUE 50585
50577: LD_INT 25
50579: DOUBLE
50580: EQUAL
50581: IFTRUE 50585
50583: GO 50641
50585: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
50586: LD_ADDR_VAR 0 9
50590: PUSH
50591: LD_VAR 0 35
50595: PUSH
50596: LD_VAR 0 36
50600: PUSH
50601: LD_VAR 0 37
50605: PUSH
50606: LD_VAR 0 38
50610: PUSH
50611: LD_VAR 0 39
50615: PUSH
50616: LD_VAR 0 40
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: PUSH
50629: LD_VAR 0 4
50633: PUSH
50634: LD_INT 1
50636: PLUS
50637: ARRAY
50638: ST_TO_ADDR
50639: GO 51006
50641: LD_INT 6
50643: DOUBLE
50644: EQUAL
50645: IFTRUE 50697
50647: LD_INT 7
50649: DOUBLE
50650: EQUAL
50651: IFTRUE 50697
50653: LD_INT 8
50655: DOUBLE
50656: EQUAL
50657: IFTRUE 50697
50659: LD_INT 13
50661: DOUBLE
50662: EQUAL
50663: IFTRUE 50697
50665: LD_INT 12
50667: DOUBLE
50668: EQUAL
50669: IFTRUE 50697
50671: LD_INT 15
50673: DOUBLE
50674: EQUAL
50675: IFTRUE 50697
50677: LD_INT 11
50679: DOUBLE
50680: EQUAL
50681: IFTRUE 50697
50683: LD_INT 14
50685: DOUBLE
50686: EQUAL
50687: IFTRUE 50697
50689: LD_INT 10
50691: DOUBLE
50692: EQUAL
50693: IFTRUE 50697
50695: GO 50753
50697: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
50698: LD_ADDR_VAR 0 9
50702: PUSH
50703: LD_VAR 0 41
50707: PUSH
50708: LD_VAR 0 42
50712: PUSH
50713: LD_VAR 0 43
50717: PUSH
50718: LD_VAR 0 44
50722: PUSH
50723: LD_VAR 0 45
50727: PUSH
50728: LD_VAR 0 46
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: PUSH
50741: LD_VAR 0 4
50745: PUSH
50746: LD_INT 1
50748: PLUS
50749: ARRAY
50750: ST_TO_ADDR
50751: GO 51006
50753: LD_INT 36
50755: DOUBLE
50756: EQUAL
50757: IFTRUE 50761
50759: GO 50817
50761: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
50762: LD_ADDR_VAR 0 9
50766: PUSH
50767: LD_VAR 0 47
50771: PUSH
50772: LD_VAR 0 48
50776: PUSH
50777: LD_VAR 0 49
50781: PUSH
50782: LD_VAR 0 50
50786: PUSH
50787: LD_VAR 0 51
50791: PUSH
50792: LD_VAR 0 52
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: PUSH
50805: LD_VAR 0 4
50809: PUSH
50810: LD_INT 1
50812: PLUS
50813: ARRAY
50814: ST_TO_ADDR
50815: GO 51006
50817: LD_INT 4
50819: DOUBLE
50820: EQUAL
50821: IFTRUE 50843
50823: LD_INT 5
50825: DOUBLE
50826: EQUAL
50827: IFTRUE 50843
50829: LD_INT 34
50831: DOUBLE
50832: EQUAL
50833: IFTRUE 50843
50835: LD_INT 37
50837: DOUBLE
50838: EQUAL
50839: IFTRUE 50843
50841: GO 50899
50843: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
50844: LD_ADDR_VAR 0 9
50848: PUSH
50849: LD_VAR 0 53
50853: PUSH
50854: LD_VAR 0 54
50858: PUSH
50859: LD_VAR 0 55
50863: PUSH
50864: LD_VAR 0 56
50868: PUSH
50869: LD_VAR 0 57
50873: PUSH
50874: LD_VAR 0 58
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: PUSH
50887: LD_VAR 0 4
50891: PUSH
50892: LD_INT 1
50894: PLUS
50895: ARRAY
50896: ST_TO_ADDR
50897: GO 51006
50899: LD_INT 31
50901: DOUBLE
50902: EQUAL
50903: IFTRUE 50949
50905: LD_INT 32
50907: DOUBLE
50908: EQUAL
50909: IFTRUE 50949
50911: LD_INT 33
50913: DOUBLE
50914: EQUAL
50915: IFTRUE 50949
50917: LD_INT 27
50919: DOUBLE
50920: EQUAL
50921: IFTRUE 50949
50923: LD_INT 26
50925: DOUBLE
50926: EQUAL
50927: IFTRUE 50949
50929: LD_INT 28
50931: DOUBLE
50932: EQUAL
50933: IFTRUE 50949
50935: LD_INT 29
50937: DOUBLE
50938: EQUAL
50939: IFTRUE 50949
50941: LD_INT 30
50943: DOUBLE
50944: EQUAL
50945: IFTRUE 50949
50947: GO 51005
50949: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
50950: LD_ADDR_VAR 0 9
50954: PUSH
50955: LD_VAR 0 59
50959: PUSH
50960: LD_VAR 0 60
50964: PUSH
50965: LD_VAR 0 61
50969: PUSH
50970: LD_VAR 0 62
50974: PUSH
50975: LD_VAR 0 63
50979: PUSH
50980: LD_VAR 0 64
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: PUSH
50993: LD_VAR 0 4
50997: PUSH
50998: LD_INT 1
51000: PLUS
51001: ARRAY
51002: ST_TO_ADDR
51003: GO 51006
51005: POP
// temp_list2 = [ ] ;
51006: LD_ADDR_VAR 0 10
51010: PUSH
51011: EMPTY
51012: ST_TO_ADDR
// for i in temp_list do
51013: LD_ADDR_VAR 0 8
51017: PUSH
51018: LD_VAR 0 9
51022: PUSH
51023: FOR_IN
51024: IFFALSE 51076
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
51026: LD_ADDR_VAR 0 10
51030: PUSH
51031: LD_VAR 0 10
51035: PUSH
51036: LD_VAR 0 8
51040: PUSH
51041: LD_INT 1
51043: ARRAY
51044: PUSH
51045: LD_VAR 0 2
51049: PLUS
51050: PUSH
51051: LD_VAR 0 8
51055: PUSH
51056: LD_INT 2
51058: ARRAY
51059: PUSH
51060: LD_VAR 0 3
51064: PLUS
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: EMPTY
51071: LIST
51072: ADD
51073: ST_TO_ADDR
51074: GO 51023
51076: POP
51077: POP
// result = temp_list2 ;
51078: LD_ADDR_VAR 0 7
51082: PUSH
51083: LD_VAR 0 10
51087: ST_TO_ADDR
// end ;
51088: LD_VAR 0 7
51092: RET
// export function EnemyInRange ( unit , dist ) ; begin
51093: LD_INT 0
51095: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
51096: LD_ADDR_VAR 0 3
51100: PUSH
51101: LD_VAR 0 1
51105: PPUSH
51106: CALL_OW 255
51110: PPUSH
51111: LD_VAR 0 1
51115: PPUSH
51116: CALL_OW 250
51120: PPUSH
51121: LD_VAR 0 1
51125: PPUSH
51126: CALL_OW 251
51130: PPUSH
51131: LD_VAR 0 2
51135: PPUSH
51136: CALL 25197 0 4
51140: PUSH
51141: LD_INT 4
51143: ARRAY
51144: ST_TO_ADDR
// end ;
51145: LD_VAR 0 3
51149: RET
// export function PlayerSeeMe ( unit ) ; begin
51150: LD_INT 0
51152: PPUSH
// result := See ( your_side , unit ) ;
51153: LD_ADDR_VAR 0 2
51157: PUSH
51158: LD_OWVAR 2
51162: PPUSH
51163: LD_VAR 0 1
51167: PPUSH
51168: CALL_OW 292
51172: ST_TO_ADDR
// end ;
51173: LD_VAR 0 2
51177: RET
// export function ReverseDir ( unit ) ; begin
51178: LD_INT 0
51180: PPUSH
// if not unit then
51181: LD_VAR 0 1
51185: NOT
51186: IFFALSE 51190
// exit ;
51188: GO 51213
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
51190: LD_ADDR_VAR 0 2
51194: PUSH
51195: LD_VAR 0 1
51199: PPUSH
51200: CALL_OW 254
51204: PUSH
51205: LD_INT 3
51207: PLUS
51208: PUSH
51209: LD_INT 6
51211: MOD
51212: ST_TO_ADDR
// end ;
51213: LD_VAR 0 2
51217: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
51218: LD_INT 0
51220: PPUSH
51221: PPUSH
51222: PPUSH
51223: PPUSH
51224: PPUSH
// if not hexes then
51225: LD_VAR 0 2
51229: NOT
51230: IFFALSE 51234
// exit ;
51232: GO 51382
// dist := 9999 ;
51234: LD_ADDR_VAR 0 5
51238: PUSH
51239: LD_INT 9999
51241: ST_TO_ADDR
// for i = 1 to hexes do
51242: LD_ADDR_VAR 0 4
51246: PUSH
51247: DOUBLE
51248: LD_INT 1
51250: DEC
51251: ST_TO_ADDR
51252: LD_VAR 0 2
51256: PUSH
51257: FOR_TO
51258: IFFALSE 51370
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
51260: LD_VAR 0 1
51264: PPUSH
51265: LD_VAR 0 2
51269: PUSH
51270: LD_VAR 0 4
51274: ARRAY
51275: PUSH
51276: LD_INT 1
51278: ARRAY
51279: PPUSH
51280: LD_VAR 0 2
51284: PUSH
51285: LD_VAR 0 4
51289: ARRAY
51290: PUSH
51291: LD_INT 2
51293: ARRAY
51294: PPUSH
51295: CALL_OW 297
51299: PUSH
51300: LD_VAR 0 5
51304: LESS
51305: IFFALSE 51368
// begin hex := hexes [ i ] ;
51307: LD_ADDR_VAR 0 7
51311: PUSH
51312: LD_VAR 0 2
51316: PUSH
51317: LD_VAR 0 4
51321: ARRAY
51322: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51323: LD_ADDR_VAR 0 5
51327: PUSH
51328: LD_VAR 0 1
51332: PPUSH
51333: LD_VAR 0 2
51337: PUSH
51338: LD_VAR 0 4
51342: ARRAY
51343: PUSH
51344: LD_INT 1
51346: ARRAY
51347: PPUSH
51348: LD_VAR 0 2
51352: PUSH
51353: LD_VAR 0 4
51357: ARRAY
51358: PUSH
51359: LD_INT 2
51361: ARRAY
51362: PPUSH
51363: CALL_OW 297
51367: ST_TO_ADDR
// end ; end ;
51368: GO 51257
51370: POP
51371: POP
// result := hex ;
51372: LD_ADDR_VAR 0 3
51376: PUSH
51377: LD_VAR 0 7
51381: ST_TO_ADDR
// end ;
51382: LD_VAR 0 3
51386: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
51387: LD_INT 0
51389: PPUSH
51390: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
51391: LD_VAR 0 1
51395: NOT
51396: PUSH
51397: LD_VAR 0 1
51401: PUSH
51402: LD_INT 21
51404: PUSH
51405: LD_INT 2
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 23
51414: PUSH
51415: LD_INT 2
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PPUSH
51426: CALL_OW 69
51430: IN
51431: NOT
51432: OR
51433: IFFALSE 51437
// exit ;
51435: GO 51484
// for i = 1 to 3 do
51437: LD_ADDR_VAR 0 3
51441: PUSH
51442: DOUBLE
51443: LD_INT 1
51445: DEC
51446: ST_TO_ADDR
51447: LD_INT 3
51449: PUSH
51450: FOR_TO
51451: IFFALSE 51482
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
51453: LD_VAR 0 1
51457: PPUSH
51458: CALL_OW 250
51462: PPUSH
51463: LD_VAR 0 1
51467: PPUSH
51468: CALL_OW 251
51472: PPUSH
51473: LD_INT 1
51475: PPUSH
51476: CALL_OW 453
51480: GO 51450
51482: POP
51483: POP
// end ;
51484: LD_VAR 0 2
51488: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
51489: LD_INT 0
51491: PPUSH
51492: PPUSH
51493: PPUSH
51494: PPUSH
51495: PPUSH
51496: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
51497: LD_VAR 0 1
51501: NOT
51502: PUSH
51503: LD_VAR 0 2
51507: NOT
51508: OR
51509: PUSH
51510: LD_VAR 0 1
51514: PPUSH
51515: CALL_OW 314
51519: OR
51520: IFFALSE 51524
// exit ;
51522: GO 51965
// x := GetX ( enemy_unit ) ;
51524: LD_ADDR_VAR 0 7
51528: PUSH
51529: LD_VAR 0 2
51533: PPUSH
51534: CALL_OW 250
51538: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
51539: LD_ADDR_VAR 0 8
51543: PUSH
51544: LD_VAR 0 2
51548: PPUSH
51549: CALL_OW 251
51553: ST_TO_ADDR
// if not x or not y then
51554: LD_VAR 0 7
51558: NOT
51559: PUSH
51560: LD_VAR 0 8
51564: NOT
51565: OR
51566: IFFALSE 51570
// exit ;
51568: GO 51965
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
51570: LD_ADDR_VAR 0 6
51574: PUSH
51575: LD_VAR 0 7
51579: PPUSH
51580: LD_INT 0
51582: PPUSH
51583: LD_INT 4
51585: PPUSH
51586: CALL_OW 272
51590: PUSH
51591: LD_VAR 0 8
51595: PPUSH
51596: LD_INT 0
51598: PPUSH
51599: LD_INT 4
51601: PPUSH
51602: CALL_OW 273
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_VAR 0 7
51615: PPUSH
51616: LD_INT 1
51618: PPUSH
51619: LD_INT 4
51621: PPUSH
51622: CALL_OW 272
51626: PUSH
51627: LD_VAR 0 8
51631: PPUSH
51632: LD_INT 1
51634: PPUSH
51635: LD_INT 4
51637: PPUSH
51638: CALL_OW 273
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_VAR 0 7
51651: PPUSH
51652: LD_INT 2
51654: PPUSH
51655: LD_INT 4
51657: PPUSH
51658: CALL_OW 272
51662: PUSH
51663: LD_VAR 0 8
51667: PPUSH
51668: LD_INT 2
51670: PPUSH
51671: LD_INT 4
51673: PPUSH
51674: CALL_OW 273
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_VAR 0 7
51687: PPUSH
51688: LD_INT 3
51690: PPUSH
51691: LD_INT 4
51693: PPUSH
51694: CALL_OW 272
51698: PUSH
51699: LD_VAR 0 8
51703: PPUSH
51704: LD_INT 3
51706: PPUSH
51707: LD_INT 4
51709: PPUSH
51710: CALL_OW 273
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_VAR 0 7
51723: PPUSH
51724: LD_INT 4
51726: PPUSH
51727: LD_INT 4
51729: PPUSH
51730: CALL_OW 272
51734: PUSH
51735: LD_VAR 0 8
51739: PPUSH
51740: LD_INT 4
51742: PPUSH
51743: LD_INT 4
51745: PPUSH
51746: CALL_OW 273
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_VAR 0 7
51759: PPUSH
51760: LD_INT 5
51762: PPUSH
51763: LD_INT 4
51765: PPUSH
51766: CALL_OW 272
51770: PUSH
51771: LD_VAR 0 8
51775: PPUSH
51776: LD_INT 5
51778: PPUSH
51779: LD_INT 4
51781: PPUSH
51782: CALL_OW 273
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: ST_TO_ADDR
// for i = tmp downto 1 do
51799: LD_ADDR_VAR 0 4
51803: PUSH
51804: DOUBLE
51805: LD_VAR 0 6
51809: INC
51810: ST_TO_ADDR
51811: LD_INT 1
51813: PUSH
51814: FOR_DOWNTO
51815: IFFALSE 51916
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
51817: LD_VAR 0 6
51821: PUSH
51822: LD_VAR 0 4
51826: ARRAY
51827: PUSH
51828: LD_INT 1
51830: ARRAY
51831: PPUSH
51832: LD_VAR 0 6
51836: PUSH
51837: LD_VAR 0 4
51841: ARRAY
51842: PUSH
51843: LD_INT 2
51845: ARRAY
51846: PPUSH
51847: CALL_OW 488
51851: NOT
51852: PUSH
51853: LD_VAR 0 6
51857: PUSH
51858: LD_VAR 0 4
51862: ARRAY
51863: PUSH
51864: LD_INT 1
51866: ARRAY
51867: PPUSH
51868: LD_VAR 0 6
51872: PUSH
51873: LD_VAR 0 4
51877: ARRAY
51878: PUSH
51879: LD_INT 2
51881: ARRAY
51882: PPUSH
51883: CALL_OW 428
51887: PUSH
51888: LD_INT 0
51890: NONEQUAL
51891: OR
51892: IFFALSE 51914
// tmp := Delete ( tmp , i ) ;
51894: LD_ADDR_VAR 0 6
51898: PUSH
51899: LD_VAR 0 6
51903: PPUSH
51904: LD_VAR 0 4
51908: PPUSH
51909: CALL_OW 3
51913: ST_TO_ADDR
51914: GO 51814
51916: POP
51917: POP
// j := GetClosestHex ( unit , tmp ) ;
51918: LD_ADDR_VAR 0 5
51922: PUSH
51923: LD_VAR 0 1
51927: PPUSH
51928: LD_VAR 0 6
51932: PPUSH
51933: CALL 51218 0 2
51937: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
51938: LD_VAR 0 1
51942: PPUSH
51943: LD_VAR 0 5
51947: PUSH
51948: LD_INT 1
51950: ARRAY
51951: PPUSH
51952: LD_VAR 0 5
51956: PUSH
51957: LD_INT 2
51959: ARRAY
51960: PPUSH
51961: CALL_OW 111
// end ;
51965: LD_VAR 0 3
51969: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51970: LD_INT 0
51972: PPUSH
51973: PPUSH
51974: PPUSH
// uc_side = 0 ;
51975: LD_ADDR_OWVAR 20
51979: PUSH
51980: LD_INT 0
51982: ST_TO_ADDR
// uc_nation = 0 ;
51983: LD_ADDR_OWVAR 21
51987: PUSH
51988: LD_INT 0
51990: ST_TO_ADDR
// InitHc ;
51991: CALL_OW 19
// InitVc ;
51995: CALL_OW 20
// if mastodonts then
51999: LD_VAR 0 6
52003: IFFALSE 52070
// for i = 1 to mastodonts do
52005: LD_ADDR_VAR 0 11
52009: PUSH
52010: DOUBLE
52011: LD_INT 1
52013: DEC
52014: ST_TO_ADDR
52015: LD_VAR 0 6
52019: PUSH
52020: FOR_TO
52021: IFFALSE 52068
// begin vc_chassis := 31 ;
52023: LD_ADDR_OWVAR 37
52027: PUSH
52028: LD_INT 31
52030: ST_TO_ADDR
// vc_control := control_rider ;
52031: LD_ADDR_OWVAR 38
52035: PUSH
52036: LD_INT 4
52038: ST_TO_ADDR
// animal := CreateVehicle ;
52039: LD_ADDR_VAR 0 12
52043: PUSH
52044: CALL_OW 45
52048: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52049: LD_VAR 0 12
52053: PPUSH
52054: LD_VAR 0 8
52058: PPUSH
52059: LD_INT 0
52061: PPUSH
52062: CALL 54139 0 3
// end ;
52066: GO 52020
52068: POP
52069: POP
// if horses then
52070: LD_VAR 0 5
52074: IFFALSE 52141
// for i = 1 to horses do
52076: LD_ADDR_VAR 0 11
52080: PUSH
52081: DOUBLE
52082: LD_INT 1
52084: DEC
52085: ST_TO_ADDR
52086: LD_VAR 0 5
52090: PUSH
52091: FOR_TO
52092: IFFALSE 52139
// begin hc_class := 21 ;
52094: LD_ADDR_OWVAR 28
52098: PUSH
52099: LD_INT 21
52101: ST_TO_ADDR
// hc_gallery :=  ;
52102: LD_ADDR_OWVAR 33
52106: PUSH
52107: LD_STRING 
52109: ST_TO_ADDR
// animal := CreateHuman ;
52110: LD_ADDR_VAR 0 12
52114: PUSH
52115: CALL_OW 44
52119: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52120: LD_VAR 0 12
52124: PPUSH
52125: LD_VAR 0 8
52129: PPUSH
52130: LD_INT 0
52132: PPUSH
52133: CALL 54139 0 3
// end ;
52137: GO 52091
52139: POP
52140: POP
// if birds then
52141: LD_VAR 0 1
52145: IFFALSE 52212
// for i = 1 to birds do
52147: LD_ADDR_VAR 0 11
52151: PUSH
52152: DOUBLE
52153: LD_INT 1
52155: DEC
52156: ST_TO_ADDR
52157: LD_VAR 0 1
52161: PUSH
52162: FOR_TO
52163: IFFALSE 52210
// begin hc_class = 18 ;
52165: LD_ADDR_OWVAR 28
52169: PUSH
52170: LD_INT 18
52172: ST_TO_ADDR
// hc_gallery =  ;
52173: LD_ADDR_OWVAR 33
52177: PUSH
52178: LD_STRING 
52180: ST_TO_ADDR
// animal := CreateHuman ;
52181: LD_ADDR_VAR 0 12
52185: PUSH
52186: CALL_OW 44
52190: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52191: LD_VAR 0 12
52195: PPUSH
52196: LD_VAR 0 8
52200: PPUSH
52201: LD_INT 0
52203: PPUSH
52204: CALL 54139 0 3
// end ;
52208: GO 52162
52210: POP
52211: POP
// if tigers then
52212: LD_VAR 0 2
52216: IFFALSE 52300
// for i = 1 to tigers do
52218: LD_ADDR_VAR 0 11
52222: PUSH
52223: DOUBLE
52224: LD_INT 1
52226: DEC
52227: ST_TO_ADDR
52228: LD_VAR 0 2
52232: PUSH
52233: FOR_TO
52234: IFFALSE 52298
// begin hc_class = class_tiger ;
52236: LD_ADDR_OWVAR 28
52240: PUSH
52241: LD_INT 14
52243: ST_TO_ADDR
// hc_gallery =  ;
52244: LD_ADDR_OWVAR 33
52248: PUSH
52249: LD_STRING 
52251: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52252: LD_ADDR_OWVAR 35
52256: PUSH
52257: LD_INT 7
52259: NEG
52260: PPUSH
52261: LD_INT 7
52263: PPUSH
52264: CALL_OW 12
52268: ST_TO_ADDR
// animal := CreateHuman ;
52269: LD_ADDR_VAR 0 12
52273: PUSH
52274: CALL_OW 44
52278: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52279: LD_VAR 0 12
52283: PPUSH
52284: LD_VAR 0 8
52288: PPUSH
52289: LD_INT 0
52291: PPUSH
52292: CALL 54139 0 3
// end ;
52296: GO 52233
52298: POP
52299: POP
// if apemans then
52300: LD_VAR 0 3
52304: IFFALSE 52427
// for i = 1 to apemans do
52306: LD_ADDR_VAR 0 11
52310: PUSH
52311: DOUBLE
52312: LD_INT 1
52314: DEC
52315: ST_TO_ADDR
52316: LD_VAR 0 3
52320: PUSH
52321: FOR_TO
52322: IFFALSE 52425
// begin hc_class = class_apeman ;
52324: LD_ADDR_OWVAR 28
52328: PUSH
52329: LD_INT 12
52331: ST_TO_ADDR
// hc_gallery =  ;
52332: LD_ADDR_OWVAR 33
52336: PUSH
52337: LD_STRING 
52339: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
52340: LD_ADDR_OWVAR 35
52344: PUSH
52345: LD_INT 5
52347: NEG
52348: PPUSH
52349: LD_INT 5
52351: PPUSH
52352: CALL_OW 12
52356: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52357: LD_ADDR_OWVAR 31
52361: PUSH
52362: LD_INT 1
52364: PPUSH
52365: LD_INT 3
52367: PPUSH
52368: CALL_OW 12
52372: PUSH
52373: LD_INT 1
52375: PPUSH
52376: LD_INT 3
52378: PPUSH
52379: CALL_OW 12
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: LD_INT 0
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: ST_TO_ADDR
// animal := CreateHuman ;
52396: LD_ADDR_VAR 0 12
52400: PUSH
52401: CALL_OW 44
52405: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52406: LD_VAR 0 12
52410: PPUSH
52411: LD_VAR 0 8
52415: PPUSH
52416: LD_INT 0
52418: PPUSH
52419: CALL 54139 0 3
// end ;
52423: GO 52321
52425: POP
52426: POP
// if enchidnas then
52427: LD_VAR 0 4
52431: IFFALSE 52498
// for i = 1 to enchidnas do
52433: LD_ADDR_VAR 0 11
52437: PUSH
52438: DOUBLE
52439: LD_INT 1
52441: DEC
52442: ST_TO_ADDR
52443: LD_VAR 0 4
52447: PUSH
52448: FOR_TO
52449: IFFALSE 52496
// begin hc_class = 13 ;
52451: LD_ADDR_OWVAR 28
52455: PUSH
52456: LD_INT 13
52458: ST_TO_ADDR
// hc_gallery =  ;
52459: LD_ADDR_OWVAR 33
52463: PUSH
52464: LD_STRING 
52466: ST_TO_ADDR
// animal := CreateHuman ;
52467: LD_ADDR_VAR 0 12
52471: PUSH
52472: CALL_OW 44
52476: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52477: LD_VAR 0 12
52481: PPUSH
52482: LD_VAR 0 8
52486: PPUSH
52487: LD_INT 0
52489: PPUSH
52490: CALL 54139 0 3
// end ;
52494: GO 52448
52496: POP
52497: POP
// if fishes then
52498: LD_VAR 0 7
52502: IFFALSE 52569
// for i = 1 to fishes do
52504: LD_ADDR_VAR 0 11
52508: PUSH
52509: DOUBLE
52510: LD_INT 1
52512: DEC
52513: ST_TO_ADDR
52514: LD_VAR 0 7
52518: PUSH
52519: FOR_TO
52520: IFFALSE 52567
// begin hc_class = 20 ;
52522: LD_ADDR_OWVAR 28
52526: PUSH
52527: LD_INT 20
52529: ST_TO_ADDR
// hc_gallery =  ;
52530: LD_ADDR_OWVAR 33
52534: PUSH
52535: LD_STRING 
52537: ST_TO_ADDR
// animal := CreateHuman ;
52538: LD_ADDR_VAR 0 12
52542: PUSH
52543: CALL_OW 44
52547: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
52548: LD_VAR 0 12
52552: PPUSH
52553: LD_VAR 0 9
52557: PPUSH
52558: LD_INT 0
52560: PPUSH
52561: CALL 54139 0 3
// end ;
52565: GO 52519
52567: POP
52568: POP
// end ;
52569: LD_VAR 0 10
52573: RET
// export function WantHeal ( sci , unit ) ; begin
52574: LD_INT 0
52576: PPUSH
// if GetTaskList ( sci ) > 0 then
52577: LD_VAR 0 1
52581: PPUSH
52582: CALL_OW 437
52586: PUSH
52587: LD_INT 0
52589: GREATER
52590: IFFALSE 52660
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52592: LD_VAR 0 1
52596: PPUSH
52597: CALL_OW 437
52601: PUSH
52602: LD_INT 1
52604: ARRAY
52605: PUSH
52606: LD_INT 1
52608: ARRAY
52609: PUSH
52610: LD_STRING l
52612: EQUAL
52613: PUSH
52614: LD_VAR 0 1
52618: PPUSH
52619: CALL_OW 437
52623: PUSH
52624: LD_INT 1
52626: ARRAY
52627: PUSH
52628: LD_INT 4
52630: ARRAY
52631: PUSH
52632: LD_VAR 0 2
52636: EQUAL
52637: AND
52638: IFFALSE 52650
// result := true else
52640: LD_ADDR_VAR 0 3
52644: PUSH
52645: LD_INT 1
52647: ST_TO_ADDR
52648: GO 52658
// result := false ;
52650: LD_ADDR_VAR 0 3
52654: PUSH
52655: LD_INT 0
52657: ST_TO_ADDR
// end else
52658: GO 52668
// result := false ;
52660: LD_ADDR_VAR 0 3
52664: PUSH
52665: LD_INT 0
52667: ST_TO_ADDR
// end ;
52668: LD_VAR 0 3
52672: RET
// export function HealTarget ( sci ) ; begin
52673: LD_INT 0
52675: PPUSH
// if not sci then
52676: LD_VAR 0 1
52680: NOT
52681: IFFALSE 52685
// exit ;
52683: GO 52750
// result := 0 ;
52685: LD_ADDR_VAR 0 2
52689: PUSH
52690: LD_INT 0
52692: ST_TO_ADDR
// if GetTaskList ( sci ) then
52693: LD_VAR 0 1
52697: PPUSH
52698: CALL_OW 437
52702: IFFALSE 52750
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52704: LD_VAR 0 1
52708: PPUSH
52709: CALL_OW 437
52713: PUSH
52714: LD_INT 1
52716: ARRAY
52717: PUSH
52718: LD_INT 1
52720: ARRAY
52721: PUSH
52722: LD_STRING l
52724: EQUAL
52725: IFFALSE 52750
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52727: LD_ADDR_VAR 0 2
52731: PUSH
52732: LD_VAR 0 1
52736: PPUSH
52737: CALL_OW 437
52741: PUSH
52742: LD_INT 1
52744: ARRAY
52745: PUSH
52746: LD_INT 4
52748: ARRAY
52749: ST_TO_ADDR
// end ;
52750: LD_VAR 0 2
52754: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52755: LD_INT 0
52757: PPUSH
52758: PPUSH
52759: PPUSH
52760: PPUSH
// if not base_units then
52761: LD_VAR 0 1
52765: NOT
52766: IFFALSE 52770
// exit ;
52768: GO 52857
// result := false ;
52770: LD_ADDR_VAR 0 2
52774: PUSH
52775: LD_INT 0
52777: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
52778: LD_ADDR_VAR 0 5
52782: PUSH
52783: LD_VAR 0 1
52787: PPUSH
52788: LD_INT 21
52790: PUSH
52791: LD_INT 3
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PPUSH
52798: CALL_OW 72
52802: ST_TO_ADDR
// if not tmp then
52803: LD_VAR 0 5
52807: NOT
52808: IFFALSE 52812
// exit ;
52810: GO 52857
// for i in tmp do
52812: LD_ADDR_VAR 0 3
52816: PUSH
52817: LD_VAR 0 5
52821: PUSH
52822: FOR_IN
52823: IFFALSE 52855
// begin result := EnemyInRange ( i , 22 ) ;
52825: LD_ADDR_VAR 0 2
52829: PUSH
52830: LD_VAR 0 3
52834: PPUSH
52835: LD_INT 22
52837: PPUSH
52838: CALL 51093 0 2
52842: ST_TO_ADDR
// if result then
52843: LD_VAR 0 2
52847: IFFALSE 52853
// exit ;
52849: POP
52850: POP
52851: GO 52857
// end ;
52853: GO 52822
52855: POP
52856: POP
// end ;
52857: LD_VAR 0 2
52861: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
52862: LD_INT 0
52864: PPUSH
52865: PPUSH
// if not units then
52866: LD_VAR 0 1
52870: NOT
52871: IFFALSE 52875
// exit ;
52873: GO 52945
// result := [ ] ;
52875: LD_ADDR_VAR 0 3
52879: PUSH
52880: EMPTY
52881: ST_TO_ADDR
// for i in units do
52882: LD_ADDR_VAR 0 4
52886: PUSH
52887: LD_VAR 0 1
52891: PUSH
52892: FOR_IN
52893: IFFALSE 52943
// if GetTag ( i ) = tag then
52895: LD_VAR 0 4
52899: PPUSH
52900: CALL_OW 110
52904: PUSH
52905: LD_VAR 0 2
52909: EQUAL
52910: IFFALSE 52941
// result := Insert ( result , result + 1 , i ) ;
52912: LD_ADDR_VAR 0 3
52916: PUSH
52917: LD_VAR 0 3
52921: PPUSH
52922: LD_VAR 0 3
52926: PUSH
52927: LD_INT 1
52929: PLUS
52930: PPUSH
52931: LD_VAR 0 4
52935: PPUSH
52936: CALL_OW 2
52940: ST_TO_ADDR
52941: GO 52892
52943: POP
52944: POP
// end ;
52945: LD_VAR 0 3
52949: RET
// export function IsDriver ( un ) ; begin
52950: LD_INT 0
52952: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52953: LD_ADDR_VAR 0 2
52957: PUSH
52958: LD_VAR 0 1
52962: PUSH
52963: LD_INT 55
52965: PUSH
52966: EMPTY
52967: LIST
52968: PPUSH
52969: CALL_OW 69
52973: IN
52974: ST_TO_ADDR
// end ;
52975: LD_VAR 0 2
52979: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52980: LD_INT 0
52982: PPUSH
52983: PPUSH
// list := [ ] ;
52984: LD_ADDR_VAR 0 5
52988: PUSH
52989: EMPTY
52990: ST_TO_ADDR
// case d of 0 :
52991: LD_VAR 0 3
52995: PUSH
52996: LD_INT 0
52998: DOUBLE
52999: EQUAL
53000: IFTRUE 53004
53002: GO 53137
53004: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
53005: LD_ADDR_VAR 0 5
53009: PUSH
53010: LD_VAR 0 1
53014: PUSH
53015: LD_INT 4
53017: MINUS
53018: PUSH
53019: LD_VAR 0 2
53023: PUSH
53024: LD_INT 4
53026: MINUS
53027: PUSH
53028: LD_INT 2
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: LIST
53035: PUSH
53036: LD_VAR 0 1
53040: PUSH
53041: LD_INT 3
53043: MINUS
53044: PUSH
53045: LD_VAR 0 2
53049: PUSH
53050: LD_INT 1
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: LIST
53057: PUSH
53058: LD_VAR 0 1
53062: PUSH
53063: LD_INT 4
53065: PLUS
53066: PUSH
53067: LD_VAR 0 2
53071: PUSH
53072: LD_INT 4
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: LIST
53079: PUSH
53080: LD_VAR 0 1
53084: PUSH
53085: LD_INT 3
53087: PLUS
53088: PUSH
53089: LD_VAR 0 2
53093: PUSH
53094: LD_INT 3
53096: PLUS
53097: PUSH
53098: LD_INT 5
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: LIST
53105: PUSH
53106: LD_VAR 0 1
53110: PUSH
53111: LD_VAR 0 2
53115: PUSH
53116: LD_INT 4
53118: PLUS
53119: PUSH
53120: LD_INT 0
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: LIST
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: ST_TO_ADDR
// end ; 1 :
53135: GO 53835
53137: LD_INT 1
53139: DOUBLE
53140: EQUAL
53141: IFTRUE 53145
53143: GO 53278
53145: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53146: LD_ADDR_VAR 0 5
53150: PUSH
53151: LD_VAR 0 1
53155: PUSH
53156: LD_VAR 0 2
53160: PUSH
53161: LD_INT 4
53163: MINUS
53164: PUSH
53165: LD_INT 3
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: LIST
53172: PUSH
53173: LD_VAR 0 1
53177: PUSH
53178: LD_INT 3
53180: MINUS
53181: PUSH
53182: LD_VAR 0 2
53186: PUSH
53187: LD_INT 3
53189: MINUS
53190: PUSH
53191: LD_INT 2
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: LIST
53198: PUSH
53199: LD_VAR 0 1
53203: PUSH
53204: LD_INT 4
53206: MINUS
53207: PUSH
53208: LD_VAR 0 2
53212: PUSH
53213: LD_INT 1
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: LIST
53220: PUSH
53221: LD_VAR 0 1
53225: PUSH
53226: LD_VAR 0 2
53230: PUSH
53231: LD_INT 3
53233: PLUS
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: LIST
53242: PUSH
53243: LD_VAR 0 1
53247: PUSH
53248: LD_INT 4
53250: PLUS
53251: PUSH
53252: LD_VAR 0 2
53256: PUSH
53257: LD_INT 4
53259: PLUS
53260: PUSH
53261: LD_INT 5
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: LIST
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: ST_TO_ADDR
// end ; 2 :
53276: GO 53835
53278: LD_INT 2
53280: DOUBLE
53281: EQUAL
53282: IFTRUE 53286
53284: GO 53415
53286: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53287: LD_ADDR_VAR 0 5
53291: PUSH
53292: LD_VAR 0 1
53296: PUSH
53297: LD_VAR 0 2
53301: PUSH
53302: LD_INT 3
53304: MINUS
53305: PUSH
53306: LD_INT 3
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: LIST
53313: PUSH
53314: LD_VAR 0 1
53318: PUSH
53319: LD_INT 4
53321: PLUS
53322: PUSH
53323: LD_VAR 0 2
53327: PUSH
53328: LD_INT 4
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: LIST
53335: PUSH
53336: LD_VAR 0 1
53340: PUSH
53341: LD_VAR 0 2
53345: PUSH
53346: LD_INT 4
53348: PLUS
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: LIST
53357: PUSH
53358: LD_VAR 0 1
53362: PUSH
53363: LD_INT 3
53365: MINUS
53366: PUSH
53367: LD_VAR 0 2
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: LIST
53379: PUSH
53380: LD_VAR 0 1
53384: PUSH
53385: LD_INT 4
53387: MINUS
53388: PUSH
53389: LD_VAR 0 2
53393: PUSH
53394: LD_INT 4
53396: MINUS
53397: PUSH
53398: LD_INT 2
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: LIST
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: ST_TO_ADDR
// end ; 3 :
53413: GO 53835
53415: LD_INT 3
53417: DOUBLE
53418: EQUAL
53419: IFTRUE 53423
53421: GO 53556
53423: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53424: LD_ADDR_VAR 0 5
53428: PUSH
53429: LD_VAR 0 1
53433: PUSH
53434: LD_INT 3
53436: PLUS
53437: PUSH
53438: LD_VAR 0 2
53442: PUSH
53443: LD_INT 4
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: LIST
53450: PUSH
53451: LD_VAR 0 1
53455: PUSH
53456: LD_INT 4
53458: PLUS
53459: PUSH
53460: LD_VAR 0 2
53464: PUSH
53465: LD_INT 4
53467: PLUS
53468: PUSH
53469: LD_INT 5
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: LIST
53476: PUSH
53477: LD_VAR 0 1
53481: PUSH
53482: LD_INT 4
53484: MINUS
53485: PUSH
53486: LD_VAR 0 2
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: LIST
53498: PUSH
53499: LD_VAR 0 1
53503: PUSH
53504: LD_VAR 0 2
53508: PUSH
53509: LD_INT 4
53511: MINUS
53512: PUSH
53513: LD_INT 3
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: LIST
53520: PUSH
53521: LD_VAR 0 1
53525: PUSH
53526: LD_INT 3
53528: MINUS
53529: PUSH
53530: LD_VAR 0 2
53534: PUSH
53535: LD_INT 3
53537: MINUS
53538: PUSH
53539: LD_INT 2
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: LIST
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: ST_TO_ADDR
// end ; 4 :
53554: GO 53835
53556: LD_INT 4
53558: DOUBLE
53559: EQUAL
53560: IFTRUE 53564
53562: GO 53697
53564: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
53565: LD_ADDR_VAR 0 5
53569: PUSH
53570: LD_VAR 0 1
53574: PUSH
53575: LD_VAR 0 2
53579: PUSH
53580: LD_INT 4
53582: PLUS
53583: PUSH
53584: LD_INT 0
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: LIST
53591: PUSH
53592: LD_VAR 0 1
53596: PUSH
53597: LD_INT 3
53599: PLUS
53600: PUSH
53601: LD_VAR 0 2
53605: PUSH
53606: LD_INT 3
53608: PLUS
53609: PUSH
53610: LD_INT 5
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: LIST
53617: PUSH
53618: LD_VAR 0 1
53622: PUSH
53623: LD_INT 4
53625: PLUS
53626: PUSH
53627: LD_VAR 0 2
53631: PUSH
53632: LD_INT 4
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: LIST
53639: PUSH
53640: LD_VAR 0 1
53644: PUSH
53645: LD_VAR 0 2
53649: PUSH
53650: LD_INT 3
53652: MINUS
53653: PUSH
53654: LD_INT 3
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: LIST
53661: PUSH
53662: LD_VAR 0 1
53666: PUSH
53667: LD_INT 4
53669: MINUS
53670: PUSH
53671: LD_VAR 0 2
53675: PUSH
53676: LD_INT 4
53678: MINUS
53679: PUSH
53680: LD_INT 2
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: LIST
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: ST_TO_ADDR
// end ; 5 :
53695: GO 53835
53697: LD_INT 5
53699: DOUBLE
53700: EQUAL
53701: IFTRUE 53705
53703: GO 53834
53705: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53706: LD_ADDR_VAR 0 5
53710: PUSH
53711: LD_VAR 0 1
53715: PUSH
53716: LD_INT 4
53718: MINUS
53719: PUSH
53720: LD_VAR 0 2
53724: PUSH
53725: LD_INT 1
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: LIST
53732: PUSH
53733: LD_VAR 0 1
53737: PUSH
53738: LD_VAR 0 2
53742: PUSH
53743: LD_INT 4
53745: MINUS
53746: PUSH
53747: LD_INT 3
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: LIST
53754: PUSH
53755: LD_VAR 0 1
53759: PUSH
53760: LD_INT 4
53762: PLUS
53763: PUSH
53764: LD_VAR 0 2
53768: PUSH
53769: LD_INT 4
53771: PLUS
53772: PUSH
53773: LD_INT 5
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: LIST
53780: PUSH
53781: LD_VAR 0 1
53785: PUSH
53786: LD_INT 3
53788: PLUS
53789: PUSH
53790: LD_VAR 0 2
53794: PUSH
53795: LD_INT 4
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: LIST
53802: PUSH
53803: LD_VAR 0 1
53807: PUSH
53808: LD_VAR 0 2
53812: PUSH
53813: LD_INT 3
53815: PLUS
53816: PUSH
53817: LD_INT 0
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: LIST
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: ST_TO_ADDR
// end ; end ;
53832: GO 53835
53834: POP
// result := list ;
53835: LD_ADDR_VAR 0 4
53839: PUSH
53840: LD_VAR 0 5
53844: ST_TO_ADDR
// end ;
53845: LD_VAR 0 4
53849: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
53850: LD_INT 0
53852: PPUSH
53853: PPUSH
53854: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
53855: LD_VAR 0 1
53859: NOT
53860: PUSH
53861: LD_VAR 0 2
53865: PUSH
53866: LD_INT 1
53868: PUSH
53869: LD_INT 2
53871: PUSH
53872: LD_INT 3
53874: PUSH
53875: LD_INT 4
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: IN
53884: NOT
53885: OR
53886: IFFALSE 53890
// exit ;
53888: GO 53982
// tmp := [ ] ;
53890: LD_ADDR_VAR 0 5
53894: PUSH
53895: EMPTY
53896: ST_TO_ADDR
// for i in units do
53897: LD_ADDR_VAR 0 4
53901: PUSH
53902: LD_VAR 0 1
53906: PUSH
53907: FOR_IN
53908: IFFALSE 53951
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
53910: LD_ADDR_VAR 0 5
53914: PUSH
53915: LD_VAR 0 5
53919: PPUSH
53920: LD_VAR 0 5
53924: PUSH
53925: LD_INT 1
53927: PLUS
53928: PPUSH
53929: LD_VAR 0 4
53933: PPUSH
53934: LD_VAR 0 2
53938: PPUSH
53939: CALL_OW 259
53943: PPUSH
53944: CALL_OW 2
53948: ST_TO_ADDR
53949: GO 53907
53951: POP
53952: POP
// if not tmp then
53953: LD_VAR 0 5
53957: NOT
53958: IFFALSE 53962
// exit ;
53960: GO 53982
// result := SortListByListDesc ( units , tmp ) ;
53962: LD_ADDR_VAR 0 3
53966: PUSH
53967: LD_VAR 0 1
53971: PPUSH
53972: LD_VAR 0 5
53976: PPUSH
53977: CALL_OW 77
53981: ST_TO_ADDR
// end ;
53982: LD_VAR 0 3
53986: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53987: LD_INT 0
53989: PPUSH
53990: PPUSH
53991: PPUSH
// x := GetX ( building ) ;
53992: LD_ADDR_VAR 0 4
53996: PUSH
53997: LD_VAR 0 2
54001: PPUSH
54002: CALL_OW 250
54006: ST_TO_ADDR
// y := GetY ( building ) ;
54007: LD_ADDR_VAR 0 5
54011: PUSH
54012: LD_VAR 0 2
54016: PPUSH
54017: CALL_OW 251
54021: ST_TO_ADDR
// if GetTaskList ( unit ) then
54022: LD_VAR 0 1
54026: PPUSH
54027: CALL_OW 437
54031: IFFALSE 54126
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54033: LD_STRING e
54035: PUSH
54036: LD_VAR 0 1
54040: PPUSH
54041: CALL_OW 437
54045: PUSH
54046: LD_INT 1
54048: ARRAY
54049: PUSH
54050: LD_INT 1
54052: ARRAY
54053: EQUAL
54054: PUSH
54055: LD_VAR 0 4
54059: PUSH
54060: LD_VAR 0 1
54064: PPUSH
54065: CALL_OW 437
54069: PUSH
54070: LD_INT 1
54072: ARRAY
54073: PUSH
54074: LD_INT 2
54076: ARRAY
54077: EQUAL
54078: AND
54079: PUSH
54080: LD_VAR 0 5
54084: PUSH
54085: LD_VAR 0 1
54089: PPUSH
54090: CALL_OW 437
54094: PUSH
54095: LD_INT 1
54097: ARRAY
54098: PUSH
54099: LD_INT 3
54101: ARRAY
54102: EQUAL
54103: AND
54104: IFFALSE 54116
// result := true else
54106: LD_ADDR_VAR 0 3
54110: PUSH
54111: LD_INT 1
54113: ST_TO_ADDR
54114: GO 54124
// result := false ;
54116: LD_ADDR_VAR 0 3
54120: PUSH
54121: LD_INT 0
54123: ST_TO_ADDR
// end else
54124: GO 54134
// result := false ;
54126: LD_ADDR_VAR 0 3
54130: PUSH
54131: LD_INT 0
54133: ST_TO_ADDR
// end ;
54134: LD_VAR 0 3
54138: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54139: LD_INT 0
54141: PPUSH
54142: PPUSH
54143: PPUSH
54144: PPUSH
// if not unit or not area then
54145: LD_VAR 0 1
54149: NOT
54150: PUSH
54151: LD_VAR 0 2
54155: NOT
54156: OR
54157: IFFALSE 54161
// exit ;
54159: GO 54325
// tmp := AreaToList ( area , i ) ;
54161: LD_ADDR_VAR 0 6
54165: PUSH
54166: LD_VAR 0 2
54170: PPUSH
54171: LD_VAR 0 5
54175: PPUSH
54176: CALL_OW 517
54180: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54181: LD_ADDR_VAR 0 5
54185: PUSH
54186: DOUBLE
54187: LD_INT 1
54189: DEC
54190: ST_TO_ADDR
54191: LD_VAR 0 6
54195: PUSH
54196: LD_INT 1
54198: ARRAY
54199: PUSH
54200: FOR_TO
54201: IFFALSE 54323
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54203: LD_ADDR_VAR 0 7
54207: PUSH
54208: LD_VAR 0 6
54212: PUSH
54213: LD_INT 1
54215: ARRAY
54216: PUSH
54217: LD_VAR 0 5
54221: ARRAY
54222: PUSH
54223: LD_VAR 0 6
54227: PUSH
54228: LD_INT 2
54230: ARRAY
54231: PUSH
54232: LD_VAR 0 5
54236: ARRAY
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
54242: LD_VAR 0 7
54246: PUSH
54247: LD_INT 1
54249: ARRAY
54250: PPUSH
54251: LD_VAR 0 7
54255: PUSH
54256: LD_INT 2
54258: ARRAY
54259: PPUSH
54260: CALL_OW 428
54264: PUSH
54265: LD_INT 0
54267: EQUAL
54268: IFFALSE 54321
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54270: LD_VAR 0 1
54274: PPUSH
54275: LD_VAR 0 7
54279: PUSH
54280: LD_INT 1
54282: ARRAY
54283: PPUSH
54284: LD_VAR 0 7
54288: PUSH
54289: LD_INT 2
54291: ARRAY
54292: PPUSH
54293: LD_VAR 0 3
54297: PPUSH
54298: CALL_OW 48
// result := IsPlaced ( unit ) ;
54302: LD_ADDR_VAR 0 4
54306: PUSH
54307: LD_VAR 0 1
54311: PPUSH
54312: CALL_OW 305
54316: ST_TO_ADDR
// exit ;
54317: POP
54318: POP
54319: GO 54325
// end ; end ;
54321: GO 54200
54323: POP
54324: POP
// end ;
54325: LD_VAR 0 4
54329: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54330: LD_INT 0
54332: PPUSH
54333: PPUSH
54334: PPUSH
// if not side or side > 8 then
54335: LD_VAR 0 1
54339: NOT
54340: PUSH
54341: LD_VAR 0 1
54345: PUSH
54346: LD_INT 8
54348: GREATER
54349: OR
54350: IFFALSE 54354
// exit ;
54352: GO 54541
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
54354: LD_ADDR_VAR 0 4
54358: PUSH
54359: LD_INT 22
54361: PUSH
54362: LD_VAR 0 1
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 21
54373: PUSH
54374: LD_INT 3
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PPUSH
54385: CALL_OW 69
54389: ST_TO_ADDR
// if not tmp then
54390: LD_VAR 0 4
54394: NOT
54395: IFFALSE 54399
// exit ;
54397: GO 54541
// enable_addtolog := true ;
54399: LD_ADDR_OWVAR 81
54403: PUSH
54404: LD_INT 1
54406: ST_TO_ADDR
// AddToLog ( [ ) ;
54407: LD_STRING [
54409: PPUSH
54410: CALL_OW 561
// for i in tmp do
54414: LD_ADDR_VAR 0 3
54418: PUSH
54419: LD_VAR 0 4
54423: PUSH
54424: FOR_IN
54425: IFFALSE 54532
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
54427: LD_STRING [
54429: PUSH
54430: LD_VAR 0 3
54434: PPUSH
54435: CALL_OW 266
54439: STR
54440: PUSH
54441: LD_STRING , 
54443: STR
54444: PUSH
54445: LD_VAR 0 3
54449: PPUSH
54450: CALL_OW 250
54454: STR
54455: PUSH
54456: LD_STRING , 
54458: STR
54459: PUSH
54460: LD_VAR 0 3
54464: PPUSH
54465: CALL_OW 251
54469: STR
54470: PUSH
54471: LD_STRING , 
54473: STR
54474: PUSH
54475: LD_VAR 0 3
54479: PPUSH
54480: CALL_OW 254
54484: STR
54485: PUSH
54486: LD_STRING , 
54488: STR
54489: PUSH
54490: LD_VAR 0 3
54494: PPUSH
54495: LD_INT 1
54497: PPUSH
54498: CALL_OW 268
54502: STR
54503: PUSH
54504: LD_STRING , 
54506: STR
54507: PUSH
54508: LD_VAR 0 3
54512: PPUSH
54513: LD_INT 2
54515: PPUSH
54516: CALL_OW 268
54520: STR
54521: PUSH
54522: LD_STRING ],
54524: STR
54525: PPUSH
54526: CALL_OW 561
// end ;
54530: GO 54424
54532: POP
54533: POP
// AddToLog ( ]; ) ;
54534: LD_STRING ];
54536: PPUSH
54537: CALL_OW 561
// end ;
54541: LD_VAR 0 2
54545: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54546: LD_INT 0
54548: PPUSH
54549: PPUSH
54550: PPUSH
54551: PPUSH
54552: PPUSH
// if not area or not rate or not max then
54553: LD_VAR 0 1
54557: NOT
54558: PUSH
54559: LD_VAR 0 2
54563: NOT
54564: OR
54565: PUSH
54566: LD_VAR 0 4
54570: NOT
54571: OR
54572: IFFALSE 54576
// exit ;
54574: GO 54768
// while 1 do
54576: LD_INT 1
54578: IFFALSE 54768
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54580: LD_ADDR_VAR 0 9
54584: PUSH
54585: LD_VAR 0 1
54589: PPUSH
54590: LD_INT 1
54592: PPUSH
54593: CALL_OW 287
54597: PUSH
54598: LD_INT 10
54600: MUL
54601: ST_TO_ADDR
// r := rate / 10 ;
54602: LD_ADDR_VAR 0 7
54606: PUSH
54607: LD_VAR 0 2
54611: PUSH
54612: LD_INT 10
54614: DIVREAL
54615: ST_TO_ADDR
// time := 1 1$00 ;
54616: LD_ADDR_VAR 0 8
54620: PUSH
54621: LD_INT 2100
54623: ST_TO_ADDR
// if amount < min then
54624: LD_VAR 0 9
54628: PUSH
54629: LD_VAR 0 3
54633: LESS
54634: IFFALSE 54652
// r := r * 2 else
54636: LD_ADDR_VAR 0 7
54640: PUSH
54641: LD_VAR 0 7
54645: PUSH
54646: LD_INT 2
54648: MUL
54649: ST_TO_ADDR
54650: GO 54678
// if amount > max then
54652: LD_VAR 0 9
54656: PUSH
54657: LD_VAR 0 4
54661: GREATER
54662: IFFALSE 54678
// r := r / 2 ;
54664: LD_ADDR_VAR 0 7
54668: PUSH
54669: LD_VAR 0 7
54673: PUSH
54674: LD_INT 2
54676: DIVREAL
54677: ST_TO_ADDR
// time := time / r ;
54678: LD_ADDR_VAR 0 8
54682: PUSH
54683: LD_VAR 0 8
54687: PUSH
54688: LD_VAR 0 7
54692: DIVREAL
54693: ST_TO_ADDR
// if time < 0 then
54694: LD_VAR 0 8
54698: PUSH
54699: LD_INT 0
54701: LESS
54702: IFFALSE 54719
// time := time * - 1 ;
54704: LD_ADDR_VAR 0 8
54708: PUSH
54709: LD_VAR 0 8
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: MUL
54718: ST_TO_ADDR
// wait ( time ) ;
54719: LD_VAR 0 8
54723: PPUSH
54724: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
54728: LD_INT 35
54730: PPUSH
54731: LD_INT 875
54733: PPUSH
54734: CALL_OW 12
54738: PPUSH
54739: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54743: LD_INT 1
54745: PPUSH
54746: LD_INT 5
54748: PPUSH
54749: CALL_OW 12
54753: PPUSH
54754: LD_VAR 0 1
54758: PPUSH
54759: LD_INT 1
54761: PPUSH
54762: CALL_OW 55
// end ;
54766: GO 54576
// end ;
54768: LD_VAR 0 5
54772: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54773: LD_INT 0
54775: PPUSH
54776: PPUSH
54777: PPUSH
54778: PPUSH
54779: PPUSH
54780: PPUSH
54781: PPUSH
54782: PPUSH
// if not turrets or not factories then
54783: LD_VAR 0 1
54787: NOT
54788: PUSH
54789: LD_VAR 0 2
54793: NOT
54794: OR
54795: IFFALSE 54799
// exit ;
54797: GO 55106
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54799: LD_ADDR_VAR 0 10
54803: PUSH
54804: LD_INT 5
54806: PUSH
54807: LD_INT 6
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: LD_INT 4
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 3
54826: PUSH
54827: LD_INT 5
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 24
54841: PUSH
54842: LD_INT 25
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 23
54851: PUSH
54852: LD_INT 27
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 42
54865: PUSH
54866: LD_INT 43
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 44
54875: PUSH
54876: LD_INT 46
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 45
54885: PUSH
54886: LD_INT 47
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: LIST
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: LIST
54902: ST_TO_ADDR
// result := [ ] ;
54903: LD_ADDR_VAR 0 3
54907: PUSH
54908: EMPTY
54909: ST_TO_ADDR
// for i in turrets do
54910: LD_ADDR_VAR 0 4
54914: PUSH
54915: LD_VAR 0 1
54919: PUSH
54920: FOR_IN
54921: IFFALSE 55104
// begin nat := GetNation ( i ) ;
54923: LD_ADDR_VAR 0 7
54927: PUSH
54928: LD_VAR 0 4
54932: PPUSH
54933: CALL_OW 248
54937: ST_TO_ADDR
// weapon := 0 ;
54938: LD_ADDR_VAR 0 8
54942: PUSH
54943: LD_INT 0
54945: ST_TO_ADDR
// if not nat then
54946: LD_VAR 0 7
54950: NOT
54951: IFFALSE 54955
// continue ;
54953: GO 54920
// for j in list [ nat ] do
54955: LD_ADDR_VAR 0 5
54959: PUSH
54960: LD_VAR 0 10
54964: PUSH
54965: LD_VAR 0 7
54969: ARRAY
54970: PUSH
54971: FOR_IN
54972: IFFALSE 55013
// if GetBWeapon ( i ) = j [ 1 ] then
54974: LD_VAR 0 4
54978: PPUSH
54979: CALL_OW 269
54983: PUSH
54984: LD_VAR 0 5
54988: PUSH
54989: LD_INT 1
54991: ARRAY
54992: EQUAL
54993: IFFALSE 55011
// begin weapon := j [ 2 ] ;
54995: LD_ADDR_VAR 0 8
54999: PUSH
55000: LD_VAR 0 5
55004: PUSH
55005: LD_INT 2
55007: ARRAY
55008: ST_TO_ADDR
// break ;
55009: GO 55013
// end ;
55011: GO 54971
55013: POP
55014: POP
// if not weapon then
55015: LD_VAR 0 8
55019: NOT
55020: IFFALSE 55024
// continue ;
55022: GO 54920
// for k in factories do
55024: LD_ADDR_VAR 0 6
55028: PUSH
55029: LD_VAR 0 2
55033: PUSH
55034: FOR_IN
55035: IFFALSE 55100
// begin weapons := AvailableWeaponList ( k ) ;
55037: LD_ADDR_VAR 0 9
55041: PUSH
55042: LD_VAR 0 6
55046: PPUSH
55047: CALL_OW 478
55051: ST_TO_ADDR
// if not weapons then
55052: LD_VAR 0 9
55056: NOT
55057: IFFALSE 55061
// continue ;
55059: GO 55034
// if weapon in weapons then
55061: LD_VAR 0 8
55065: PUSH
55066: LD_VAR 0 9
55070: IN
55071: IFFALSE 55098
// begin result := [ i , weapon ] ;
55073: LD_ADDR_VAR 0 3
55077: PUSH
55078: LD_VAR 0 4
55082: PUSH
55083: LD_VAR 0 8
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: ST_TO_ADDR
// exit ;
55092: POP
55093: POP
55094: POP
55095: POP
55096: GO 55106
// end ; end ;
55098: GO 55034
55100: POP
55101: POP
// end ;
55102: GO 54920
55104: POP
55105: POP
// end ;
55106: LD_VAR 0 3
55110: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55111: LD_INT 0
55113: PPUSH
// if not side or side > 8 then
55114: LD_VAR 0 3
55118: NOT
55119: PUSH
55120: LD_VAR 0 3
55124: PUSH
55125: LD_INT 8
55127: GREATER
55128: OR
55129: IFFALSE 55133
// exit ;
55131: GO 55192
// if not range then
55133: LD_VAR 0 4
55137: NOT
55138: IFFALSE 55149
// range := - 12 ;
55140: LD_ADDR_VAR 0 4
55144: PUSH
55145: LD_INT 12
55147: NEG
55148: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55149: LD_VAR 0 1
55153: PPUSH
55154: LD_VAR 0 2
55158: PPUSH
55159: LD_VAR 0 3
55163: PPUSH
55164: LD_VAR 0 4
55168: PPUSH
55169: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55173: LD_VAR 0 1
55177: PPUSH
55178: LD_VAR 0 2
55182: PPUSH
55183: LD_VAR 0 3
55187: PPUSH
55188: CALL_OW 331
// end ;
55192: LD_VAR 0 5
55196: RET
// export function Video ( mode ) ; begin
55197: LD_INT 0
55199: PPUSH
// ingame_video = mode ;
55200: LD_ADDR_OWVAR 52
55204: PUSH
55205: LD_VAR 0 1
55209: ST_TO_ADDR
// interface_hidden = mode ;
55210: LD_ADDR_OWVAR 54
55214: PUSH
55215: LD_VAR 0 1
55219: ST_TO_ADDR
// end ;
55220: LD_VAR 0 2
55224: RET
// export function Join ( array , element ) ; begin
55225: LD_INT 0
55227: PPUSH
// result := array ^ element ;
55228: LD_ADDR_VAR 0 3
55232: PUSH
55233: LD_VAR 0 1
55237: PUSH
55238: LD_VAR 0 2
55242: ADD
55243: ST_TO_ADDR
// end ;
55244: LD_VAR 0 3
55248: RET
// export function JoinUnion ( array , element ) ; begin
55249: LD_INT 0
55251: PPUSH
// result := array union element ;
55252: LD_ADDR_VAR 0 3
55256: PUSH
55257: LD_VAR 0 1
55261: PUSH
55262: LD_VAR 0 2
55266: UNION
55267: ST_TO_ADDR
// end ;
55268: LD_VAR 0 3
55272: RET
// export function GetBehemoths ( side ) ; begin
55273: LD_INT 0
55275: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
55276: LD_ADDR_VAR 0 2
55280: PUSH
55281: LD_INT 22
55283: PUSH
55284: LD_VAR 0 1
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 31
55295: PUSH
55296: LD_INT 25
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PPUSH
55307: CALL_OW 69
55311: ST_TO_ADDR
// end ;
55312: LD_VAR 0 2
55316: RET
// export function Shuffle ( array ) ; var i , index ; begin
55317: LD_INT 0
55319: PPUSH
55320: PPUSH
55321: PPUSH
// result := [ ] ;
55322: LD_ADDR_VAR 0 2
55326: PUSH
55327: EMPTY
55328: ST_TO_ADDR
// if not array then
55329: LD_VAR 0 1
55333: NOT
55334: IFFALSE 55338
// exit ;
55336: GO 55437
// Randomize ;
55338: CALL_OW 10
// for i = array downto 1 do
55342: LD_ADDR_VAR 0 3
55346: PUSH
55347: DOUBLE
55348: LD_VAR 0 1
55352: INC
55353: ST_TO_ADDR
55354: LD_INT 1
55356: PUSH
55357: FOR_DOWNTO
55358: IFFALSE 55435
// begin index := rand ( 1 , array ) ;
55360: LD_ADDR_VAR 0 4
55364: PUSH
55365: LD_INT 1
55367: PPUSH
55368: LD_VAR 0 1
55372: PPUSH
55373: CALL_OW 12
55377: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55378: LD_ADDR_VAR 0 2
55382: PUSH
55383: LD_VAR 0 2
55387: PPUSH
55388: LD_VAR 0 2
55392: PUSH
55393: LD_INT 1
55395: PLUS
55396: PPUSH
55397: LD_VAR 0 1
55401: PUSH
55402: LD_VAR 0 4
55406: ARRAY
55407: PPUSH
55408: CALL_OW 2
55412: ST_TO_ADDR
// array := Delete ( array , index ) ;
55413: LD_ADDR_VAR 0 1
55417: PUSH
55418: LD_VAR 0 1
55422: PPUSH
55423: LD_VAR 0 4
55427: PPUSH
55428: CALL_OW 3
55432: ST_TO_ADDR
// end ;
55433: GO 55357
55435: POP
55436: POP
// end ;
55437: LD_VAR 0 2
55441: RET
// export function GetBaseMaterials ( base ) ; begin
55442: LD_INT 0
55444: PPUSH
// result := [ 0 , 0 , 0 ] ;
55445: LD_ADDR_VAR 0 2
55449: PUSH
55450: LD_INT 0
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: LIST
55463: ST_TO_ADDR
// if not base then
55464: LD_VAR 0 1
55468: NOT
55469: IFFALSE 55473
// exit ;
55471: GO 55522
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55473: LD_ADDR_VAR 0 2
55477: PUSH
55478: LD_VAR 0 1
55482: PPUSH
55483: LD_INT 1
55485: PPUSH
55486: CALL_OW 275
55490: PUSH
55491: LD_VAR 0 1
55495: PPUSH
55496: LD_INT 2
55498: PPUSH
55499: CALL_OW 275
55503: PUSH
55504: LD_VAR 0 1
55508: PPUSH
55509: LD_INT 3
55511: PPUSH
55512: CALL_OW 275
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: LIST
55521: ST_TO_ADDR
// end ;
55522: LD_VAR 0 2
55526: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55527: LD_INT 0
55529: PPUSH
55530: PPUSH
// result := array ;
55531: LD_ADDR_VAR 0 3
55535: PUSH
55536: LD_VAR 0 1
55540: ST_TO_ADDR
// if size > 0 then
55541: LD_VAR 0 2
55545: PUSH
55546: LD_INT 0
55548: GREATER
55549: IFFALSE 55595
// for i := array downto size do
55551: LD_ADDR_VAR 0 4
55555: PUSH
55556: DOUBLE
55557: LD_VAR 0 1
55561: INC
55562: ST_TO_ADDR
55563: LD_VAR 0 2
55567: PUSH
55568: FOR_DOWNTO
55569: IFFALSE 55593
// result := Delete ( result , result ) ;
55571: LD_ADDR_VAR 0 3
55575: PUSH
55576: LD_VAR 0 3
55580: PPUSH
55581: LD_VAR 0 3
55585: PPUSH
55586: CALL_OW 3
55590: ST_TO_ADDR
55591: GO 55568
55593: POP
55594: POP
// end ;
55595: LD_VAR 0 3
55599: RET
// export function ComExit ( unit ) ; var tmp ; begin
55600: LD_INT 0
55602: PPUSH
55603: PPUSH
// if not IsInUnit ( unit ) then
55604: LD_VAR 0 1
55608: PPUSH
55609: CALL_OW 310
55613: NOT
55614: IFFALSE 55618
// exit ;
55616: GO 55678
// tmp := IsInUnit ( unit ) ;
55618: LD_ADDR_VAR 0 3
55622: PUSH
55623: LD_VAR 0 1
55627: PPUSH
55628: CALL_OW 310
55632: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
55633: LD_VAR 0 3
55637: PPUSH
55638: CALL_OW 247
55642: PUSH
55643: LD_INT 2
55645: EQUAL
55646: IFFALSE 55659
// ComExitVehicle ( unit ) else
55648: LD_VAR 0 1
55652: PPUSH
55653: CALL_OW 121
55657: GO 55668
// ComExitBuilding ( unit ) ;
55659: LD_VAR 0 1
55663: PPUSH
55664: CALL_OW 122
// result := tmp ;
55668: LD_ADDR_VAR 0 2
55672: PUSH
55673: LD_VAR 0 3
55677: ST_TO_ADDR
// end ;
55678: LD_VAR 0 2
55682: RET
// export function ResetHc ; begin
55683: LD_INT 0
55685: PPUSH
// InitHc ;
55686: CALL_OW 19
// hc_importance := 0 ;
55690: LD_ADDR_OWVAR 32
55694: PUSH
55695: LD_INT 0
55697: ST_TO_ADDR
// end ; end_of_file
55698: LD_VAR 0 1
55702: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
55703: GO 55705
55705: DISABLE
// begin ru_radar := 98 ;
55706: LD_ADDR_EXP 29
55710: PUSH
55711: LD_INT 98
55713: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
55714: LD_ADDR_EXP 30
55718: PUSH
55719: LD_INT 89
55721: ST_TO_ADDR
// us_hack := 99 ;
55722: LD_ADDR_EXP 31
55726: PUSH
55727: LD_INT 99
55729: ST_TO_ADDR
// us_artillery := 97 ;
55730: LD_ADDR_EXP 32
55734: PUSH
55735: LD_INT 97
55737: ST_TO_ADDR
// ar_bio_bomb := 91 ;
55738: LD_ADDR_EXP 33
55742: PUSH
55743: LD_INT 91
55745: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
55746: LD_ADDR_EXP 34
55750: PUSH
55751: LD_INT 92
55753: ST_TO_ADDR
// tech_Artillery := 80 ;
55754: LD_ADDR_EXP 35
55758: PUSH
55759: LD_INT 80
55761: ST_TO_ADDR
// tech_RadMat := 81 ;
55762: LD_ADDR_EXP 36
55766: PUSH
55767: LD_INT 81
55769: ST_TO_ADDR
// tech_BasicTools := 82 ;
55770: LD_ADDR_EXP 37
55774: PUSH
55775: LD_INT 82
55777: ST_TO_ADDR
// tech_Cargo := 83 ;
55778: LD_ADDR_EXP 38
55782: PUSH
55783: LD_INT 83
55785: ST_TO_ADDR
// tech_Track := 84 ;
55786: LD_ADDR_EXP 39
55790: PUSH
55791: LD_INT 84
55793: ST_TO_ADDR
// tech_Crane := 85 ;
55794: LD_ADDR_EXP 40
55798: PUSH
55799: LD_INT 85
55801: ST_TO_ADDR
// tech_Bulldozer := 86 ;
55802: LD_ADDR_EXP 41
55806: PUSH
55807: LD_INT 86
55809: ST_TO_ADDR
// tech_Hovercraft := 87 ;
55810: LD_ADDR_EXP 42
55814: PUSH
55815: LD_INT 87
55817: ST_TO_ADDR
// end ; end_of_file
55818: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
55819: LD_INT 0
55821: PPUSH
55822: PPUSH
// skirmish := false ;
55823: LD_ADDR_EXP 43
55827: PUSH
55828: LD_INT 0
55830: ST_TO_ADDR
// debug_mc := false ;
55831: LD_ADDR_EXP 44
55835: PUSH
55836: LD_INT 0
55838: ST_TO_ADDR
// mc_bases := [ ] ;
55839: LD_ADDR_EXP 45
55843: PUSH
55844: EMPTY
55845: ST_TO_ADDR
// mc_sides := [ ] ;
55846: LD_ADDR_EXP 71
55850: PUSH
55851: EMPTY
55852: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
55853: LD_ADDR_EXP 46
55857: PUSH
55858: EMPTY
55859: ST_TO_ADDR
// mc_building_repairs := [ ] ;
55860: LD_ADDR_EXP 47
55864: PUSH
55865: EMPTY
55866: ST_TO_ADDR
// mc_need_heal := [ ] ;
55867: LD_ADDR_EXP 48
55871: PUSH
55872: EMPTY
55873: ST_TO_ADDR
// mc_healers := [ ] ;
55874: LD_ADDR_EXP 49
55878: PUSH
55879: EMPTY
55880: ST_TO_ADDR
// mc_build_list := [ ] ;
55881: LD_ADDR_EXP 50
55885: PUSH
55886: EMPTY
55887: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
55888: LD_ADDR_EXP 77
55892: PUSH
55893: EMPTY
55894: ST_TO_ADDR
// mc_builders := [ ] ;
55895: LD_ADDR_EXP 51
55899: PUSH
55900: EMPTY
55901: ST_TO_ADDR
// mc_construct_list := [ ] ;
55902: LD_ADDR_EXP 52
55906: PUSH
55907: EMPTY
55908: ST_TO_ADDR
// mc_turret_list := [ ] ;
55909: LD_ADDR_EXP 53
55913: PUSH
55914: EMPTY
55915: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
55916: LD_ADDR_EXP 54
55920: PUSH
55921: EMPTY
55922: ST_TO_ADDR
// mc_miners := [ ] ;
55923: LD_ADDR_EXP 59
55927: PUSH
55928: EMPTY
55929: ST_TO_ADDR
// mc_mines := [ ] ;
55930: LD_ADDR_EXP 58
55934: PUSH
55935: EMPTY
55936: ST_TO_ADDR
// mc_minefields := [ ] ;
55937: LD_ADDR_EXP 60
55941: PUSH
55942: EMPTY
55943: ST_TO_ADDR
// mc_crates := [ ] ;
55944: LD_ADDR_EXP 61
55948: PUSH
55949: EMPTY
55950: ST_TO_ADDR
// mc_crates_collector := [ ] ;
55951: LD_ADDR_EXP 62
55955: PUSH
55956: EMPTY
55957: ST_TO_ADDR
// mc_crates_area := [ ] ;
55958: LD_ADDR_EXP 63
55962: PUSH
55963: EMPTY
55964: ST_TO_ADDR
// mc_vehicles := [ ] ;
55965: LD_ADDR_EXP 64
55969: PUSH
55970: EMPTY
55971: ST_TO_ADDR
// mc_attack := [ ] ;
55972: LD_ADDR_EXP 65
55976: PUSH
55977: EMPTY
55978: ST_TO_ADDR
// mc_produce := [ ] ;
55979: LD_ADDR_EXP 66
55983: PUSH
55984: EMPTY
55985: ST_TO_ADDR
// mc_defender := [ ] ;
55986: LD_ADDR_EXP 67
55990: PUSH
55991: EMPTY
55992: ST_TO_ADDR
// mc_parking := [ ] ;
55993: LD_ADDR_EXP 69
55997: PUSH
55998: EMPTY
55999: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
56000: LD_ADDR_EXP 55
56004: PUSH
56005: EMPTY
56006: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
56007: LD_ADDR_EXP 57
56011: PUSH
56012: EMPTY
56013: ST_TO_ADDR
// mc_scan := [ ] ;
56014: LD_ADDR_EXP 68
56018: PUSH
56019: EMPTY
56020: ST_TO_ADDR
// mc_scan_area := [ ] ;
56021: LD_ADDR_EXP 70
56025: PUSH
56026: EMPTY
56027: ST_TO_ADDR
// mc_tech := [ ] ;
56028: LD_ADDR_EXP 72
56032: PUSH
56033: EMPTY
56034: ST_TO_ADDR
// mc_class := [ ] ;
56035: LD_ADDR_EXP 86
56039: PUSH
56040: EMPTY
56041: ST_TO_ADDR
// mc_class_case_use := [ ] ;
56042: LD_ADDR_EXP 87
56046: PUSH
56047: EMPTY
56048: ST_TO_ADDR
// end ;
56049: LD_VAR 0 1
56053: RET
// export function MC_Kill ( base ) ; begin
56054: LD_INT 0
56056: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
56057: LD_ADDR_EXP 45
56061: PUSH
56062: LD_EXP 45
56066: PPUSH
56067: LD_VAR 0 1
56071: PPUSH
56072: EMPTY
56073: PPUSH
56074: CALL_OW 1
56078: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
56079: LD_ADDR_EXP 46
56083: PUSH
56084: LD_EXP 46
56088: PPUSH
56089: LD_VAR 0 1
56093: PPUSH
56094: EMPTY
56095: PPUSH
56096: CALL_OW 1
56100: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
56101: LD_ADDR_EXP 47
56105: PUSH
56106: LD_EXP 47
56110: PPUSH
56111: LD_VAR 0 1
56115: PPUSH
56116: EMPTY
56117: PPUSH
56118: CALL_OW 1
56122: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
56123: LD_ADDR_EXP 48
56127: PUSH
56128: LD_EXP 48
56132: PPUSH
56133: LD_VAR 0 1
56137: PPUSH
56138: EMPTY
56139: PPUSH
56140: CALL_OW 1
56144: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
56145: LD_ADDR_EXP 49
56149: PUSH
56150: LD_EXP 49
56154: PPUSH
56155: LD_VAR 0 1
56159: PPUSH
56160: EMPTY
56161: PPUSH
56162: CALL_OW 1
56166: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
56167: LD_ADDR_EXP 50
56171: PUSH
56172: LD_EXP 50
56176: PPUSH
56177: LD_VAR 0 1
56181: PPUSH
56182: EMPTY
56183: PPUSH
56184: CALL_OW 1
56188: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
56189: LD_ADDR_EXP 51
56193: PUSH
56194: LD_EXP 51
56198: PPUSH
56199: LD_VAR 0 1
56203: PPUSH
56204: EMPTY
56205: PPUSH
56206: CALL_OW 1
56210: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
56211: LD_ADDR_EXP 52
56215: PUSH
56216: LD_EXP 52
56220: PPUSH
56221: LD_VAR 0 1
56225: PPUSH
56226: EMPTY
56227: PPUSH
56228: CALL_OW 1
56232: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
56233: LD_ADDR_EXP 53
56237: PUSH
56238: LD_EXP 53
56242: PPUSH
56243: LD_VAR 0 1
56247: PPUSH
56248: EMPTY
56249: PPUSH
56250: CALL_OW 1
56254: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
56255: LD_ADDR_EXP 54
56259: PUSH
56260: LD_EXP 54
56264: PPUSH
56265: LD_VAR 0 1
56269: PPUSH
56270: EMPTY
56271: PPUSH
56272: CALL_OW 1
56276: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
56277: LD_ADDR_EXP 55
56281: PUSH
56282: LD_EXP 55
56286: PPUSH
56287: LD_VAR 0 1
56291: PPUSH
56292: EMPTY
56293: PPUSH
56294: CALL_OW 1
56298: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
56299: LD_ADDR_EXP 56
56303: PUSH
56304: LD_EXP 56
56308: PPUSH
56309: LD_VAR 0 1
56313: PPUSH
56314: LD_INT 0
56316: PPUSH
56317: CALL_OW 1
56321: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
56322: LD_ADDR_EXP 57
56326: PUSH
56327: LD_EXP 57
56331: PPUSH
56332: LD_VAR 0 1
56336: PPUSH
56337: EMPTY
56338: PPUSH
56339: CALL_OW 1
56343: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
56344: LD_ADDR_EXP 58
56348: PUSH
56349: LD_EXP 58
56353: PPUSH
56354: LD_VAR 0 1
56358: PPUSH
56359: EMPTY
56360: PPUSH
56361: CALL_OW 1
56365: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
56366: LD_ADDR_EXP 59
56370: PUSH
56371: LD_EXP 59
56375: PPUSH
56376: LD_VAR 0 1
56380: PPUSH
56381: EMPTY
56382: PPUSH
56383: CALL_OW 1
56387: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
56388: LD_ADDR_EXP 60
56392: PUSH
56393: LD_EXP 60
56397: PPUSH
56398: LD_VAR 0 1
56402: PPUSH
56403: EMPTY
56404: PPUSH
56405: CALL_OW 1
56409: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
56410: LD_ADDR_EXP 61
56414: PUSH
56415: LD_EXP 61
56419: PPUSH
56420: LD_VAR 0 1
56424: PPUSH
56425: EMPTY
56426: PPUSH
56427: CALL_OW 1
56431: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
56432: LD_ADDR_EXP 62
56436: PUSH
56437: LD_EXP 62
56441: PPUSH
56442: LD_VAR 0 1
56446: PPUSH
56447: EMPTY
56448: PPUSH
56449: CALL_OW 1
56453: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
56454: LD_ADDR_EXP 63
56458: PUSH
56459: LD_EXP 63
56463: PPUSH
56464: LD_VAR 0 1
56468: PPUSH
56469: EMPTY
56470: PPUSH
56471: CALL_OW 1
56475: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
56476: LD_ADDR_EXP 64
56480: PUSH
56481: LD_EXP 64
56485: PPUSH
56486: LD_VAR 0 1
56490: PPUSH
56491: EMPTY
56492: PPUSH
56493: CALL_OW 1
56497: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
56498: LD_ADDR_EXP 65
56502: PUSH
56503: LD_EXP 65
56507: PPUSH
56508: LD_VAR 0 1
56512: PPUSH
56513: EMPTY
56514: PPUSH
56515: CALL_OW 1
56519: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
56520: LD_ADDR_EXP 66
56524: PUSH
56525: LD_EXP 66
56529: PPUSH
56530: LD_VAR 0 1
56534: PPUSH
56535: EMPTY
56536: PPUSH
56537: CALL_OW 1
56541: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
56542: LD_ADDR_EXP 67
56546: PUSH
56547: LD_EXP 67
56551: PPUSH
56552: LD_VAR 0 1
56556: PPUSH
56557: EMPTY
56558: PPUSH
56559: CALL_OW 1
56563: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
56564: LD_ADDR_EXP 68
56568: PUSH
56569: LD_EXP 68
56573: PPUSH
56574: LD_VAR 0 1
56578: PPUSH
56579: EMPTY
56580: PPUSH
56581: CALL_OW 1
56585: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
56586: LD_ADDR_EXP 69
56590: PUSH
56591: LD_EXP 69
56595: PPUSH
56596: LD_VAR 0 1
56600: PPUSH
56601: EMPTY
56602: PPUSH
56603: CALL_OW 1
56607: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
56608: LD_ADDR_EXP 70
56612: PUSH
56613: LD_EXP 70
56617: PPUSH
56618: LD_VAR 0 1
56622: PPUSH
56623: EMPTY
56624: PPUSH
56625: CALL_OW 1
56629: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
56630: LD_ADDR_EXP 72
56634: PUSH
56635: LD_EXP 72
56639: PPUSH
56640: LD_VAR 0 1
56644: PPUSH
56645: EMPTY
56646: PPUSH
56647: CALL_OW 1
56651: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
56652: LD_ADDR_EXP 74
56656: PUSH
56657: LD_EXP 74
56661: PPUSH
56662: LD_VAR 0 1
56666: PPUSH
56667: EMPTY
56668: PPUSH
56669: CALL_OW 1
56673: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
56674: LD_ADDR_EXP 75
56678: PUSH
56679: LD_EXP 75
56683: PPUSH
56684: LD_VAR 0 1
56688: PPUSH
56689: EMPTY
56690: PPUSH
56691: CALL_OW 1
56695: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
56696: LD_ADDR_EXP 76
56700: PUSH
56701: LD_EXP 76
56705: PPUSH
56706: LD_VAR 0 1
56710: PPUSH
56711: EMPTY
56712: PPUSH
56713: CALL_OW 1
56717: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
56718: LD_ADDR_EXP 77
56722: PUSH
56723: LD_EXP 77
56727: PPUSH
56728: LD_VAR 0 1
56732: PPUSH
56733: EMPTY
56734: PPUSH
56735: CALL_OW 1
56739: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
56740: LD_ADDR_EXP 78
56744: PUSH
56745: LD_EXP 78
56749: PPUSH
56750: LD_VAR 0 1
56754: PPUSH
56755: EMPTY
56756: PPUSH
56757: CALL_OW 1
56761: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
56762: LD_ADDR_EXP 79
56766: PUSH
56767: LD_EXP 79
56771: PPUSH
56772: LD_VAR 0 1
56776: PPUSH
56777: EMPTY
56778: PPUSH
56779: CALL_OW 1
56783: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
56784: LD_ADDR_EXP 80
56788: PUSH
56789: LD_EXP 80
56793: PPUSH
56794: LD_VAR 0 1
56798: PPUSH
56799: EMPTY
56800: PPUSH
56801: CALL_OW 1
56805: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
56806: LD_ADDR_EXP 81
56810: PUSH
56811: LD_EXP 81
56815: PPUSH
56816: LD_VAR 0 1
56820: PPUSH
56821: EMPTY
56822: PPUSH
56823: CALL_OW 1
56827: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
56828: LD_ADDR_EXP 82
56832: PUSH
56833: LD_EXP 82
56837: PPUSH
56838: LD_VAR 0 1
56842: PPUSH
56843: EMPTY
56844: PPUSH
56845: CALL_OW 1
56849: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
56850: LD_ADDR_EXP 83
56854: PUSH
56855: LD_EXP 83
56859: PPUSH
56860: LD_VAR 0 1
56864: PPUSH
56865: EMPTY
56866: PPUSH
56867: CALL_OW 1
56871: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
56872: LD_ADDR_EXP 84
56876: PUSH
56877: LD_EXP 84
56881: PPUSH
56882: LD_VAR 0 1
56886: PPUSH
56887: EMPTY
56888: PPUSH
56889: CALL_OW 1
56893: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
56894: LD_ADDR_EXP 85
56898: PUSH
56899: LD_EXP 85
56903: PPUSH
56904: LD_VAR 0 1
56908: PPUSH
56909: EMPTY
56910: PPUSH
56911: CALL_OW 1
56915: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
56916: LD_ADDR_EXP 86
56920: PUSH
56921: LD_EXP 86
56925: PPUSH
56926: LD_VAR 0 1
56930: PPUSH
56931: EMPTY
56932: PPUSH
56933: CALL_OW 1
56937: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
56938: LD_ADDR_EXP 87
56942: PUSH
56943: LD_EXP 87
56947: PPUSH
56948: LD_VAR 0 1
56952: PPUSH
56953: LD_INT 0
56955: PPUSH
56956: CALL_OW 1
56960: ST_TO_ADDR
// end ;
56961: LD_VAR 0 2
56965: RET
// export function MC_Add ( side , units ) ; var base ; begin
56966: LD_INT 0
56968: PPUSH
56969: PPUSH
// base := mc_bases + 1 ;
56970: LD_ADDR_VAR 0 4
56974: PUSH
56975: LD_EXP 45
56979: PUSH
56980: LD_INT 1
56982: PLUS
56983: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
56984: LD_ADDR_EXP 71
56988: PUSH
56989: LD_EXP 71
56993: PPUSH
56994: LD_VAR 0 4
56998: PPUSH
56999: LD_VAR 0 1
57003: PPUSH
57004: CALL_OW 1
57008: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
57009: LD_ADDR_EXP 45
57013: PUSH
57014: LD_EXP 45
57018: PPUSH
57019: LD_VAR 0 4
57023: PPUSH
57024: LD_VAR 0 2
57028: PPUSH
57029: CALL_OW 1
57033: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
57034: LD_ADDR_EXP 46
57038: PUSH
57039: LD_EXP 46
57043: PPUSH
57044: LD_VAR 0 4
57048: PPUSH
57049: EMPTY
57050: PPUSH
57051: CALL_OW 1
57055: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
57056: LD_ADDR_EXP 47
57060: PUSH
57061: LD_EXP 47
57065: PPUSH
57066: LD_VAR 0 4
57070: PPUSH
57071: EMPTY
57072: PPUSH
57073: CALL_OW 1
57077: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
57078: LD_ADDR_EXP 48
57082: PUSH
57083: LD_EXP 48
57087: PPUSH
57088: LD_VAR 0 4
57092: PPUSH
57093: EMPTY
57094: PPUSH
57095: CALL_OW 1
57099: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
57100: LD_ADDR_EXP 49
57104: PUSH
57105: LD_EXP 49
57109: PPUSH
57110: LD_VAR 0 4
57114: PPUSH
57115: EMPTY
57116: PPUSH
57117: CALL_OW 1
57121: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
57122: LD_ADDR_EXP 50
57126: PUSH
57127: LD_EXP 50
57131: PPUSH
57132: LD_VAR 0 4
57136: PPUSH
57137: EMPTY
57138: PPUSH
57139: CALL_OW 1
57143: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
57144: LD_ADDR_EXP 51
57148: PUSH
57149: LD_EXP 51
57153: PPUSH
57154: LD_VAR 0 4
57158: PPUSH
57159: EMPTY
57160: PPUSH
57161: CALL_OW 1
57165: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
57166: LD_ADDR_EXP 52
57170: PUSH
57171: LD_EXP 52
57175: PPUSH
57176: LD_VAR 0 4
57180: PPUSH
57181: EMPTY
57182: PPUSH
57183: CALL_OW 1
57187: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
57188: LD_ADDR_EXP 53
57192: PUSH
57193: LD_EXP 53
57197: PPUSH
57198: LD_VAR 0 4
57202: PPUSH
57203: EMPTY
57204: PPUSH
57205: CALL_OW 1
57209: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
57210: LD_ADDR_EXP 54
57214: PUSH
57215: LD_EXP 54
57219: PPUSH
57220: LD_VAR 0 4
57224: PPUSH
57225: EMPTY
57226: PPUSH
57227: CALL_OW 1
57231: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
57232: LD_ADDR_EXP 55
57236: PUSH
57237: LD_EXP 55
57241: PPUSH
57242: LD_VAR 0 4
57246: PPUSH
57247: EMPTY
57248: PPUSH
57249: CALL_OW 1
57253: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
57254: LD_ADDR_EXP 56
57258: PUSH
57259: LD_EXP 56
57263: PPUSH
57264: LD_VAR 0 4
57268: PPUSH
57269: LD_INT 0
57271: PPUSH
57272: CALL_OW 1
57276: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
57277: LD_ADDR_EXP 57
57281: PUSH
57282: LD_EXP 57
57286: PPUSH
57287: LD_VAR 0 4
57291: PPUSH
57292: EMPTY
57293: PPUSH
57294: CALL_OW 1
57298: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
57299: LD_ADDR_EXP 58
57303: PUSH
57304: LD_EXP 58
57308: PPUSH
57309: LD_VAR 0 4
57313: PPUSH
57314: EMPTY
57315: PPUSH
57316: CALL_OW 1
57320: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
57321: LD_ADDR_EXP 59
57325: PUSH
57326: LD_EXP 59
57330: PPUSH
57331: LD_VAR 0 4
57335: PPUSH
57336: EMPTY
57337: PPUSH
57338: CALL_OW 1
57342: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
57343: LD_ADDR_EXP 60
57347: PUSH
57348: LD_EXP 60
57352: PPUSH
57353: LD_VAR 0 4
57357: PPUSH
57358: EMPTY
57359: PPUSH
57360: CALL_OW 1
57364: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
57365: LD_ADDR_EXP 61
57369: PUSH
57370: LD_EXP 61
57374: PPUSH
57375: LD_VAR 0 4
57379: PPUSH
57380: EMPTY
57381: PPUSH
57382: CALL_OW 1
57386: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
57387: LD_ADDR_EXP 62
57391: PUSH
57392: LD_EXP 62
57396: PPUSH
57397: LD_VAR 0 4
57401: PPUSH
57402: EMPTY
57403: PPUSH
57404: CALL_OW 1
57408: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
57409: LD_ADDR_EXP 63
57413: PUSH
57414: LD_EXP 63
57418: PPUSH
57419: LD_VAR 0 4
57423: PPUSH
57424: EMPTY
57425: PPUSH
57426: CALL_OW 1
57430: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
57431: LD_ADDR_EXP 64
57435: PUSH
57436: LD_EXP 64
57440: PPUSH
57441: LD_VAR 0 4
57445: PPUSH
57446: EMPTY
57447: PPUSH
57448: CALL_OW 1
57452: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
57453: LD_ADDR_EXP 65
57457: PUSH
57458: LD_EXP 65
57462: PPUSH
57463: LD_VAR 0 4
57467: PPUSH
57468: EMPTY
57469: PPUSH
57470: CALL_OW 1
57474: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
57475: LD_ADDR_EXP 66
57479: PUSH
57480: LD_EXP 66
57484: PPUSH
57485: LD_VAR 0 4
57489: PPUSH
57490: EMPTY
57491: PPUSH
57492: CALL_OW 1
57496: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
57497: LD_ADDR_EXP 67
57501: PUSH
57502: LD_EXP 67
57506: PPUSH
57507: LD_VAR 0 4
57511: PPUSH
57512: EMPTY
57513: PPUSH
57514: CALL_OW 1
57518: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
57519: LD_ADDR_EXP 68
57523: PUSH
57524: LD_EXP 68
57528: PPUSH
57529: LD_VAR 0 4
57533: PPUSH
57534: EMPTY
57535: PPUSH
57536: CALL_OW 1
57540: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
57541: LD_ADDR_EXP 69
57545: PUSH
57546: LD_EXP 69
57550: PPUSH
57551: LD_VAR 0 4
57555: PPUSH
57556: EMPTY
57557: PPUSH
57558: CALL_OW 1
57562: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
57563: LD_ADDR_EXP 70
57567: PUSH
57568: LD_EXP 70
57572: PPUSH
57573: LD_VAR 0 4
57577: PPUSH
57578: EMPTY
57579: PPUSH
57580: CALL_OW 1
57584: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
57585: LD_ADDR_EXP 72
57589: PUSH
57590: LD_EXP 72
57594: PPUSH
57595: LD_VAR 0 4
57599: PPUSH
57600: EMPTY
57601: PPUSH
57602: CALL_OW 1
57606: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
57607: LD_ADDR_EXP 74
57611: PUSH
57612: LD_EXP 74
57616: PPUSH
57617: LD_VAR 0 4
57621: PPUSH
57622: EMPTY
57623: PPUSH
57624: CALL_OW 1
57628: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
57629: LD_ADDR_EXP 75
57633: PUSH
57634: LD_EXP 75
57638: PPUSH
57639: LD_VAR 0 4
57643: PPUSH
57644: EMPTY
57645: PPUSH
57646: CALL_OW 1
57650: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
57651: LD_ADDR_EXP 76
57655: PUSH
57656: LD_EXP 76
57660: PPUSH
57661: LD_VAR 0 4
57665: PPUSH
57666: EMPTY
57667: PPUSH
57668: CALL_OW 1
57672: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
57673: LD_ADDR_EXP 77
57677: PUSH
57678: LD_EXP 77
57682: PPUSH
57683: LD_VAR 0 4
57687: PPUSH
57688: EMPTY
57689: PPUSH
57690: CALL_OW 1
57694: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
57695: LD_ADDR_EXP 78
57699: PUSH
57700: LD_EXP 78
57704: PPUSH
57705: LD_VAR 0 4
57709: PPUSH
57710: EMPTY
57711: PPUSH
57712: CALL_OW 1
57716: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
57717: LD_ADDR_EXP 79
57721: PUSH
57722: LD_EXP 79
57726: PPUSH
57727: LD_VAR 0 4
57731: PPUSH
57732: EMPTY
57733: PPUSH
57734: CALL_OW 1
57738: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
57739: LD_ADDR_EXP 80
57743: PUSH
57744: LD_EXP 80
57748: PPUSH
57749: LD_VAR 0 4
57753: PPUSH
57754: EMPTY
57755: PPUSH
57756: CALL_OW 1
57760: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
57761: LD_ADDR_EXP 81
57765: PUSH
57766: LD_EXP 81
57770: PPUSH
57771: LD_VAR 0 4
57775: PPUSH
57776: EMPTY
57777: PPUSH
57778: CALL_OW 1
57782: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
57783: LD_ADDR_EXP 82
57787: PUSH
57788: LD_EXP 82
57792: PPUSH
57793: LD_VAR 0 4
57797: PPUSH
57798: EMPTY
57799: PPUSH
57800: CALL_OW 1
57804: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
57805: LD_ADDR_EXP 83
57809: PUSH
57810: LD_EXP 83
57814: PPUSH
57815: LD_VAR 0 4
57819: PPUSH
57820: EMPTY
57821: PPUSH
57822: CALL_OW 1
57826: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
57827: LD_ADDR_EXP 84
57831: PUSH
57832: LD_EXP 84
57836: PPUSH
57837: LD_VAR 0 4
57841: PPUSH
57842: EMPTY
57843: PPUSH
57844: CALL_OW 1
57848: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
57849: LD_ADDR_EXP 85
57853: PUSH
57854: LD_EXP 85
57858: PPUSH
57859: LD_VAR 0 4
57863: PPUSH
57864: EMPTY
57865: PPUSH
57866: CALL_OW 1
57870: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
57871: LD_ADDR_EXP 86
57875: PUSH
57876: LD_EXP 86
57880: PPUSH
57881: LD_VAR 0 4
57885: PPUSH
57886: EMPTY
57887: PPUSH
57888: CALL_OW 1
57892: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
57893: LD_ADDR_EXP 87
57897: PUSH
57898: LD_EXP 87
57902: PPUSH
57903: LD_VAR 0 4
57907: PPUSH
57908: LD_INT 0
57910: PPUSH
57911: CALL_OW 1
57915: ST_TO_ADDR
// result := base ;
57916: LD_ADDR_VAR 0 3
57920: PUSH
57921: LD_VAR 0 4
57925: ST_TO_ADDR
// end ;
57926: LD_VAR 0 3
57930: RET
// export function MC_Start ( ) ; var i ; begin
57931: LD_INT 0
57933: PPUSH
57934: PPUSH
// for i = 1 to mc_bases do
57935: LD_ADDR_VAR 0 2
57939: PUSH
57940: DOUBLE
57941: LD_INT 1
57943: DEC
57944: ST_TO_ADDR
57945: LD_EXP 45
57949: PUSH
57950: FOR_TO
57951: IFFALSE 59028
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
57953: LD_ADDR_EXP 45
57957: PUSH
57958: LD_EXP 45
57962: PPUSH
57963: LD_VAR 0 2
57967: PPUSH
57968: LD_EXP 45
57972: PUSH
57973: LD_VAR 0 2
57977: ARRAY
57978: PUSH
57979: LD_INT 0
57981: DIFF
57982: PPUSH
57983: CALL_OW 1
57987: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
57988: LD_ADDR_EXP 46
57992: PUSH
57993: LD_EXP 46
57997: PPUSH
57998: LD_VAR 0 2
58002: PPUSH
58003: EMPTY
58004: PPUSH
58005: CALL_OW 1
58009: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
58010: LD_ADDR_EXP 47
58014: PUSH
58015: LD_EXP 47
58019: PPUSH
58020: LD_VAR 0 2
58024: PPUSH
58025: EMPTY
58026: PPUSH
58027: CALL_OW 1
58031: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
58032: LD_ADDR_EXP 48
58036: PUSH
58037: LD_EXP 48
58041: PPUSH
58042: LD_VAR 0 2
58046: PPUSH
58047: EMPTY
58048: PPUSH
58049: CALL_OW 1
58053: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
58054: LD_ADDR_EXP 49
58058: PUSH
58059: LD_EXP 49
58063: PPUSH
58064: LD_VAR 0 2
58068: PPUSH
58069: EMPTY
58070: PUSH
58071: EMPTY
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PPUSH
58077: CALL_OW 1
58081: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
58082: LD_ADDR_EXP 50
58086: PUSH
58087: LD_EXP 50
58091: PPUSH
58092: LD_VAR 0 2
58096: PPUSH
58097: EMPTY
58098: PPUSH
58099: CALL_OW 1
58103: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
58104: LD_ADDR_EXP 77
58108: PUSH
58109: LD_EXP 77
58113: PPUSH
58114: LD_VAR 0 2
58118: PPUSH
58119: EMPTY
58120: PPUSH
58121: CALL_OW 1
58125: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
58126: LD_ADDR_EXP 51
58130: PUSH
58131: LD_EXP 51
58135: PPUSH
58136: LD_VAR 0 2
58140: PPUSH
58141: EMPTY
58142: PPUSH
58143: CALL_OW 1
58147: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
58148: LD_ADDR_EXP 52
58152: PUSH
58153: LD_EXP 52
58157: PPUSH
58158: LD_VAR 0 2
58162: PPUSH
58163: EMPTY
58164: PPUSH
58165: CALL_OW 1
58169: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
58170: LD_ADDR_EXP 53
58174: PUSH
58175: LD_EXP 53
58179: PPUSH
58180: LD_VAR 0 2
58184: PPUSH
58185: LD_EXP 45
58189: PUSH
58190: LD_VAR 0 2
58194: ARRAY
58195: PPUSH
58196: LD_INT 2
58198: PUSH
58199: LD_INT 30
58201: PUSH
58202: LD_INT 32
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 30
58211: PUSH
58212: LD_INT 33
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: LIST
58223: PPUSH
58224: CALL_OW 72
58228: PPUSH
58229: CALL_OW 1
58233: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
58234: LD_ADDR_EXP 54
58238: PUSH
58239: LD_EXP 54
58243: PPUSH
58244: LD_VAR 0 2
58248: PPUSH
58249: LD_EXP 45
58253: PUSH
58254: LD_VAR 0 2
58258: ARRAY
58259: PPUSH
58260: LD_INT 2
58262: PUSH
58263: LD_INT 30
58265: PUSH
58266: LD_INT 32
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 30
58275: PUSH
58276: LD_INT 31
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 58
58290: PUSH
58291: EMPTY
58292: LIST
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PPUSH
58298: CALL_OW 72
58302: PPUSH
58303: CALL_OW 1
58307: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
58308: LD_ADDR_EXP 55
58312: PUSH
58313: LD_EXP 55
58317: PPUSH
58318: LD_VAR 0 2
58322: PPUSH
58323: EMPTY
58324: PPUSH
58325: CALL_OW 1
58329: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
58330: LD_ADDR_EXP 59
58334: PUSH
58335: LD_EXP 59
58339: PPUSH
58340: LD_VAR 0 2
58344: PPUSH
58345: EMPTY
58346: PPUSH
58347: CALL_OW 1
58351: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
58352: LD_ADDR_EXP 58
58356: PUSH
58357: LD_EXP 58
58361: PPUSH
58362: LD_VAR 0 2
58366: PPUSH
58367: EMPTY
58368: PPUSH
58369: CALL_OW 1
58373: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
58374: LD_ADDR_EXP 60
58378: PUSH
58379: LD_EXP 60
58383: PPUSH
58384: LD_VAR 0 2
58388: PPUSH
58389: EMPTY
58390: PPUSH
58391: CALL_OW 1
58395: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
58396: LD_ADDR_EXP 61
58400: PUSH
58401: LD_EXP 61
58405: PPUSH
58406: LD_VAR 0 2
58410: PPUSH
58411: EMPTY
58412: PPUSH
58413: CALL_OW 1
58417: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
58418: LD_ADDR_EXP 62
58422: PUSH
58423: LD_EXP 62
58427: PPUSH
58428: LD_VAR 0 2
58432: PPUSH
58433: EMPTY
58434: PPUSH
58435: CALL_OW 1
58439: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
58440: LD_ADDR_EXP 63
58444: PUSH
58445: LD_EXP 63
58449: PPUSH
58450: LD_VAR 0 2
58454: PPUSH
58455: EMPTY
58456: PPUSH
58457: CALL_OW 1
58461: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
58462: LD_ADDR_EXP 64
58466: PUSH
58467: LD_EXP 64
58471: PPUSH
58472: LD_VAR 0 2
58476: PPUSH
58477: EMPTY
58478: PPUSH
58479: CALL_OW 1
58483: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
58484: LD_ADDR_EXP 65
58488: PUSH
58489: LD_EXP 65
58493: PPUSH
58494: LD_VAR 0 2
58498: PPUSH
58499: EMPTY
58500: PPUSH
58501: CALL_OW 1
58505: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
58506: LD_ADDR_EXP 66
58510: PUSH
58511: LD_EXP 66
58515: PPUSH
58516: LD_VAR 0 2
58520: PPUSH
58521: EMPTY
58522: PPUSH
58523: CALL_OW 1
58527: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
58528: LD_ADDR_EXP 67
58532: PUSH
58533: LD_EXP 67
58537: PPUSH
58538: LD_VAR 0 2
58542: PPUSH
58543: EMPTY
58544: PPUSH
58545: CALL_OW 1
58549: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
58550: LD_ADDR_EXP 56
58554: PUSH
58555: LD_EXP 56
58559: PPUSH
58560: LD_VAR 0 2
58564: PPUSH
58565: LD_INT 0
58567: PPUSH
58568: CALL_OW 1
58572: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
58573: LD_ADDR_EXP 69
58577: PUSH
58578: LD_EXP 69
58582: PPUSH
58583: LD_VAR 0 2
58587: PPUSH
58588: LD_INT 0
58590: PPUSH
58591: CALL_OW 1
58595: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
58596: LD_ADDR_EXP 57
58600: PUSH
58601: LD_EXP 57
58605: PPUSH
58606: LD_VAR 0 2
58610: PPUSH
58611: EMPTY
58612: PPUSH
58613: CALL_OW 1
58617: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
58618: LD_ADDR_EXP 68
58622: PUSH
58623: LD_EXP 68
58627: PPUSH
58628: LD_VAR 0 2
58632: PPUSH
58633: LD_INT 0
58635: PPUSH
58636: CALL_OW 1
58640: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
58641: LD_ADDR_EXP 70
58645: PUSH
58646: LD_EXP 70
58650: PPUSH
58651: LD_VAR 0 2
58655: PPUSH
58656: EMPTY
58657: PPUSH
58658: CALL_OW 1
58662: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
58663: LD_ADDR_EXP 73
58667: PUSH
58668: LD_EXP 73
58672: PPUSH
58673: LD_VAR 0 2
58677: PPUSH
58678: LD_INT 0
58680: PPUSH
58681: CALL_OW 1
58685: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
58686: LD_ADDR_EXP 74
58690: PUSH
58691: LD_EXP 74
58695: PPUSH
58696: LD_VAR 0 2
58700: PPUSH
58701: EMPTY
58702: PPUSH
58703: CALL_OW 1
58707: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
58708: LD_ADDR_EXP 75
58712: PUSH
58713: LD_EXP 75
58717: PPUSH
58718: LD_VAR 0 2
58722: PPUSH
58723: EMPTY
58724: PPUSH
58725: CALL_OW 1
58729: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
58730: LD_ADDR_EXP 76
58734: PUSH
58735: LD_EXP 76
58739: PPUSH
58740: LD_VAR 0 2
58744: PPUSH
58745: EMPTY
58746: PPUSH
58747: CALL_OW 1
58751: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
58752: LD_ADDR_EXP 78
58756: PUSH
58757: LD_EXP 78
58761: PPUSH
58762: LD_VAR 0 2
58766: PPUSH
58767: LD_EXP 45
58771: PUSH
58772: LD_VAR 0 2
58776: ARRAY
58777: PPUSH
58778: LD_INT 2
58780: PUSH
58781: LD_INT 30
58783: PUSH
58784: LD_INT 6
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 30
58793: PUSH
58794: LD_INT 7
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 30
58803: PUSH
58804: LD_INT 8
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: PPUSH
58817: CALL_OW 72
58821: PPUSH
58822: CALL_OW 1
58826: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
58827: LD_ADDR_EXP 79
58831: PUSH
58832: LD_EXP 79
58836: PPUSH
58837: LD_VAR 0 2
58841: PPUSH
58842: EMPTY
58843: PPUSH
58844: CALL_OW 1
58848: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
58849: LD_ADDR_EXP 80
58853: PUSH
58854: LD_EXP 80
58858: PPUSH
58859: LD_VAR 0 2
58863: PPUSH
58864: EMPTY
58865: PPUSH
58866: CALL_OW 1
58870: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
58871: LD_ADDR_EXP 81
58875: PUSH
58876: LD_EXP 81
58880: PPUSH
58881: LD_VAR 0 2
58885: PPUSH
58886: EMPTY
58887: PPUSH
58888: CALL_OW 1
58892: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
58893: LD_ADDR_EXP 82
58897: PUSH
58898: LD_EXP 82
58902: PPUSH
58903: LD_VAR 0 2
58907: PPUSH
58908: EMPTY
58909: PPUSH
58910: CALL_OW 1
58914: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
58915: LD_ADDR_EXP 83
58919: PUSH
58920: LD_EXP 83
58924: PPUSH
58925: LD_VAR 0 2
58929: PPUSH
58930: EMPTY
58931: PPUSH
58932: CALL_OW 1
58936: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
58937: LD_ADDR_EXP 84
58941: PUSH
58942: LD_EXP 84
58946: PPUSH
58947: LD_VAR 0 2
58951: PPUSH
58952: EMPTY
58953: PPUSH
58954: CALL_OW 1
58958: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
58959: LD_ADDR_EXP 85
58963: PUSH
58964: LD_EXP 85
58968: PPUSH
58969: LD_VAR 0 2
58973: PPUSH
58974: EMPTY
58975: PPUSH
58976: CALL_OW 1
58980: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
58981: LD_ADDR_EXP 86
58985: PUSH
58986: LD_EXP 86
58990: PPUSH
58991: LD_VAR 0 2
58995: PPUSH
58996: EMPTY
58997: PPUSH
58998: CALL_OW 1
59002: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
59003: LD_ADDR_EXP 87
59007: PUSH
59008: LD_EXP 87
59012: PPUSH
59013: LD_VAR 0 2
59017: PPUSH
59018: LD_INT 0
59020: PPUSH
59021: CALL_OW 1
59025: ST_TO_ADDR
// end ;
59026: GO 57950
59028: POP
59029: POP
// MC_InitSides ( ) ;
59030: CALL 59316 0 0
// MC_InitResearch ( ) ;
59034: CALL 59055 0 0
// CustomInitMacro ( ) ;
59038: CALL 1407 0 0
// skirmish := true ;
59042: LD_ADDR_EXP 43
59046: PUSH
59047: LD_INT 1
59049: ST_TO_ADDR
// end ;
59050: LD_VAR 0 1
59054: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
59055: LD_INT 0
59057: PPUSH
59058: PPUSH
59059: PPUSH
59060: PPUSH
59061: PPUSH
59062: PPUSH
// if not mc_bases then
59063: LD_EXP 45
59067: NOT
59068: IFFALSE 59072
// exit ;
59070: GO 59311
// for i = 1 to 8 do
59072: LD_ADDR_VAR 0 2
59076: PUSH
59077: DOUBLE
59078: LD_INT 1
59080: DEC
59081: ST_TO_ADDR
59082: LD_INT 8
59084: PUSH
59085: FOR_TO
59086: IFFALSE 59112
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
59088: LD_ADDR_EXP 72
59092: PUSH
59093: LD_EXP 72
59097: PPUSH
59098: LD_VAR 0 2
59102: PPUSH
59103: EMPTY
59104: PPUSH
59105: CALL_OW 1
59109: ST_TO_ADDR
59110: GO 59085
59112: POP
59113: POP
// tmp := [ ] ;
59114: LD_ADDR_VAR 0 5
59118: PUSH
59119: EMPTY
59120: ST_TO_ADDR
// for i = 1 to mc_sides do
59121: LD_ADDR_VAR 0 2
59125: PUSH
59126: DOUBLE
59127: LD_INT 1
59129: DEC
59130: ST_TO_ADDR
59131: LD_EXP 71
59135: PUSH
59136: FOR_TO
59137: IFFALSE 59195
// if not mc_sides [ i ] in tmp then
59139: LD_EXP 71
59143: PUSH
59144: LD_VAR 0 2
59148: ARRAY
59149: PUSH
59150: LD_VAR 0 5
59154: IN
59155: NOT
59156: IFFALSE 59193
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
59158: LD_ADDR_VAR 0 5
59162: PUSH
59163: LD_VAR 0 5
59167: PPUSH
59168: LD_VAR 0 5
59172: PUSH
59173: LD_INT 1
59175: PLUS
59176: PPUSH
59177: LD_EXP 71
59181: PUSH
59182: LD_VAR 0 2
59186: ARRAY
59187: PPUSH
59188: CALL_OW 2
59192: ST_TO_ADDR
59193: GO 59136
59195: POP
59196: POP
// if not tmp then
59197: LD_VAR 0 5
59201: NOT
59202: IFFALSE 59206
// exit ;
59204: GO 59311
// for j in tmp do
59206: LD_ADDR_VAR 0 3
59210: PUSH
59211: LD_VAR 0 5
59215: PUSH
59216: FOR_IN
59217: IFFALSE 59309
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
59219: LD_ADDR_VAR 0 6
59223: PUSH
59224: LD_INT 22
59226: PUSH
59227: LD_VAR 0 3
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PPUSH
59236: CALL_OW 69
59240: ST_TO_ADDR
// if not un then
59241: LD_VAR 0 6
59245: NOT
59246: IFFALSE 59250
// continue ;
59248: GO 59216
// nation := GetNation ( un [ 1 ] ) ;
59250: LD_ADDR_VAR 0 4
59254: PUSH
59255: LD_VAR 0 6
59259: PUSH
59260: LD_INT 1
59262: ARRAY
59263: PPUSH
59264: CALL_OW 248
59268: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
59269: LD_ADDR_EXP 72
59273: PUSH
59274: LD_EXP 72
59278: PPUSH
59279: LD_VAR 0 3
59283: PPUSH
59284: LD_VAR 0 3
59288: PPUSH
59289: LD_VAR 0 4
59293: PPUSH
59294: LD_INT 1
59296: PPUSH
59297: CALL 19418 0 3
59301: PPUSH
59302: CALL_OW 1
59306: ST_TO_ADDR
// end ;
59307: GO 59216
59309: POP
59310: POP
// end ;
59311: LD_VAR 0 1
59315: RET
// export function MC_InitSides ( ) ; var i ; begin
59316: LD_INT 0
59318: PPUSH
59319: PPUSH
// if not mc_bases then
59320: LD_EXP 45
59324: NOT
59325: IFFALSE 59329
// exit ;
59327: GO 59403
// for i = 1 to mc_bases do
59329: LD_ADDR_VAR 0 2
59333: PUSH
59334: DOUBLE
59335: LD_INT 1
59337: DEC
59338: ST_TO_ADDR
59339: LD_EXP 45
59343: PUSH
59344: FOR_TO
59345: IFFALSE 59401
// if mc_bases [ i ] then
59347: LD_EXP 45
59351: PUSH
59352: LD_VAR 0 2
59356: ARRAY
59357: IFFALSE 59399
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
59359: LD_ADDR_EXP 71
59363: PUSH
59364: LD_EXP 71
59368: PPUSH
59369: LD_VAR 0 2
59373: PPUSH
59374: LD_EXP 45
59378: PUSH
59379: LD_VAR 0 2
59383: ARRAY
59384: PUSH
59385: LD_INT 1
59387: ARRAY
59388: PPUSH
59389: CALL_OW 255
59393: PPUSH
59394: CALL_OW 1
59398: ST_TO_ADDR
59399: GO 59344
59401: POP
59402: POP
// end ;
59403: LD_VAR 0 1
59407: RET
// every 0 0$01 trigger skirmish do
59408: LD_EXP 43
59412: IFFALSE 59566
59414: GO 59416
59416: DISABLE
// begin enable ;
59417: ENABLE
// MC_CheckBuildings ( ) ;
59418: CALL 64064 0 0
// MC_CheckPeopleLife ( ) ;
59422: CALL 64189 0 0
// RaiseSailEvent ( 100 ) ;
59426: LD_INT 100
59428: PPUSH
59429: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
59433: LD_INT 103
59435: PPUSH
59436: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
59440: LD_INT 104
59442: PPUSH
59443: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
59447: LD_INT 105
59449: PPUSH
59450: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
59454: LD_INT 106
59456: PPUSH
59457: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
59461: LD_INT 107
59463: PPUSH
59464: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
59468: LD_INT 108
59470: PPUSH
59471: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
59475: LD_INT 109
59477: PPUSH
59478: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
59482: LD_INT 110
59484: PPUSH
59485: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
59489: LD_INT 111
59491: PPUSH
59492: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
59496: LD_INT 112
59498: PPUSH
59499: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
59503: LD_INT 113
59505: PPUSH
59506: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
59510: LD_INT 120
59512: PPUSH
59513: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
59517: LD_INT 121
59519: PPUSH
59520: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
59524: LD_INT 122
59526: PPUSH
59527: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
59531: LD_INT 123
59533: PPUSH
59534: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
59538: LD_INT 124
59540: PPUSH
59541: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
59545: LD_INT 125
59547: PPUSH
59548: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
59552: LD_INT 126
59554: PPUSH
59555: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
59559: LD_INT 200
59561: PPUSH
59562: CALL_OW 427
// end ;
59566: END
// on SailEvent ( event ) do begin if event < 100 then
59567: LD_VAR 0 1
59571: PUSH
59572: LD_INT 100
59574: LESS
59575: IFFALSE 59586
// CustomEvent ( event ) ;
59577: LD_VAR 0 1
59581: PPUSH
59582: CALL 18596 0 1
// if event = 100 then
59586: LD_VAR 0 1
59590: PUSH
59591: LD_INT 100
59593: EQUAL
59594: IFFALSE 59600
// MC_ClassManager ( ) ;
59596: CALL 59992 0 0
// if event = 101 then
59600: LD_VAR 0 1
59604: PUSH
59605: LD_INT 101
59607: EQUAL
59608: IFFALSE 59614
// MC_RepairBuildings ( ) ;
59610: CALL 64774 0 0
// if event = 102 then
59614: LD_VAR 0 1
59618: PUSH
59619: LD_INT 102
59621: EQUAL
59622: IFFALSE 59628
// MC_Heal ( ) ;
59624: CALL 65633 0 0
// if event = 103 then
59628: LD_VAR 0 1
59632: PUSH
59633: LD_INT 103
59635: EQUAL
59636: IFFALSE 59642
// MC_Build ( ) ;
59638: CALL 66055 0 0
// if event = 104 then
59642: LD_VAR 0 1
59646: PUSH
59647: LD_INT 104
59649: EQUAL
59650: IFFALSE 59656
// MC_TurretWeapon ( ) ;
59652: CALL 67668 0 0
// if event = 105 then
59656: LD_VAR 0 1
59660: PUSH
59661: LD_INT 105
59663: EQUAL
59664: IFFALSE 59670
// MC_BuildUpgrade ( ) ;
59666: CALL 67219 0 0
// if event = 106 then
59670: LD_VAR 0 1
59674: PUSH
59675: LD_INT 106
59677: EQUAL
59678: IFFALSE 59684
// MC_PlantMines ( ) ;
59680: CALL 68098 0 0
// if event = 107 then
59684: LD_VAR 0 1
59688: PUSH
59689: LD_INT 107
59691: EQUAL
59692: IFFALSE 59698
// MC_CollectCrates ( ) ;
59694: CALL 68896 0 0
// if event = 108 then
59698: LD_VAR 0 1
59702: PUSH
59703: LD_INT 108
59705: EQUAL
59706: IFFALSE 59712
// MC_LinkRemoteControl ( ) ;
59708: CALL 70672 0 0
// if event = 109 then
59712: LD_VAR 0 1
59716: PUSH
59717: LD_INT 109
59719: EQUAL
59720: IFFALSE 59726
// MC_ProduceVehicle ( ) ;
59722: CALL 70853 0 0
// if event = 110 then
59726: LD_VAR 0 1
59730: PUSH
59731: LD_INT 110
59733: EQUAL
59734: IFFALSE 59740
// MC_SendAttack ( ) ;
59736: CALL 71319 0 0
// if event = 111 then
59740: LD_VAR 0 1
59744: PUSH
59745: LD_INT 111
59747: EQUAL
59748: IFFALSE 59754
// MC_Defend ( ) ;
59750: CALL 71427 0 0
// if event = 112 then
59754: LD_VAR 0 1
59758: PUSH
59759: LD_INT 112
59761: EQUAL
59762: IFFALSE 59768
// MC_Research ( ) ;
59764: CALL 72032 0 0
// if event = 113 then
59768: LD_VAR 0 1
59772: PUSH
59773: LD_INT 113
59775: EQUAL
59776: IFFALSE 59782
// MC_MinesTrigger ( ) ;
59778: CALL 73146 0 0
// if event = 120 then
59782: LD_VAR 0 1
59786: PUSH
59787: LD_INT 120
59789: EQUAL
59790: IFFALSE 59796
// MC_RepairVehicle ( ) ;
59792: CALL 73245 0 0
// if event = 121 then
59796: LD_VAR 0 1
59800: PUSH
59801: LD_INT 121
59803: EQUAL
59804: IFFALSE 59810
// MC_TameApe ( ) ;
59806: CALL 73975 0 0
// if event = 122 then
59810: LD_VAR 0 1
59814: PUSH
59815: LD_INT 122
59817: EQUAL
59818: IFFALSE 59824
// MC_ChangeApeClass ( ) ;
59820: CALL 74804 0 0
// if event = 123 then
59824: LD_VAR 0 1
59828: PUSH
59829: LD_INT 123
59831: EQUAL
59832: IFFALSE 59838
// MC_Bazooka ( ) ;
59834: CALL 75454 0 0
// if event = 124 then
59838: LD_VAR 0 1
59842: PUSH
59843: LD_INT 124
59845: EQUAL
59846: IFFALSE 59852
// MC_TeleportExit ( ) ;
59848: CALL 75652 0 0
// if event = 125 then
59852: LD_VAR 0 1
59856: PUSH
59857: LD_INT 125
59859: EQUAL
59860: IFFALSE 59866
// MC_Deposits ( ) ;
59862: CALL 76299 0 0
// if event = 126 then
59866: LD_VAR 0 1
59870: PUSH
59871: LD_INT 126
59873: EQUAL
59874: IFFALSE 59880
// MC_RemoteDriver ( ) ;
59876: CALL 76924 0 0
// if event = 200 then
59880: LD_VAR 0 1
59884: PUSH
59885: LD_INT 200
59887: EQUAL
59888: IFFALSE 59894
// MC_Idle ( ) ;
59890: CALL 78873 0 0
// end ;
59894: PPOPN 1
59896: END
// export function MC_Reset ( base , tag ) ; var i ; begin
59897: LD_INT 0
59899: PPUSH
59900: PPUSH
// if not mc_bases [ base ] or not tag then
59901: LD_EXP 45
59905: PUSH
59906: LD_VAR 0 1
59910: ARRAY
59911: NOT
59912: PUSH
59913: LD_VAR 0 2
59917: NOT
59918: OR
59919: IFFALSE 59923
// exit ;
59921: GO 59987
// for i in mc_bases [ base ] union mc_ape [ base ] do
59923: LD_ADDR_VAR 0 4
59927: PUSH
59928: LD_EXP 45
59932: PUSH
59933: LD_VAR 0 1
59937: ARRAY
59938: PUSH
59939: LD_EXP 74
59943: PUSH
59944: LD_VAR 0 1
59948: ARRAY
59949: UNION
59950: PUSH
59951: FOR_IN
59952: IFFALSE 59985
// if GetTag ( i ) = tag then
59954: LD_VAR 0 4
59958: PPUSH
59959: CALL_OW 110
59963: PUSH
59964: LD_VAR 0 2
59968: EQUAL
59969: IFFALSE 59983
// SetTag ( i , 0 ) ;
59971: LD_VAR 0 4
59975: PPUSH
59976: LD_INT 0
59978: PPUSH
59979: CALL_OW 109
59983: GO 59951
59985: POP
59986: POP
// end ;
59987: LD_VAR 0 3
59991: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
59992: LD_INT 0
59994: PPUSH
59995: PPUSH
59996: PPUSH
59997: PPUSH
59998: PPUSH
59999: PPUSH
60000: PPUSH
60001: PPUSH
// if not mc_bases then
60002: LD_EXP 45
60006: NOT
60007: IFFALSE 60011
// exit ;
60009: GO 60469
// for i = 1 to mc_bases do
60011: LD_ADDR_VAR 0 2
60015: PUSH
60016: DOUBLE
60017: LD_INT 1
60019: DEC
60020: ST_TO_ADDR
60021: LD_EXP 45
60025: PUSH
60026: FOR_TO
60027: IFFALSE 60467
// begin tmp := MC_ClassCheckReq ( i ) ;
60029: LD_ADDR_VAR 0 4
60033: PUSH
60034: LD_VAR 0 2
60038: PPUSH
60039: CALL 60474 0 1
60043: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
60044: LD_ADDR_EXP 86
60048: PUSH
60049: LD_EXP 86
60053: PPUSH
60054: LD_VAR 0 2
60058: PPUSH
60059: LD_VAR 0 4
60063: PPUSH
60064: CALL_OW 1
60068: ST_TO_ADDR
// if not tmp then
60069: LD_VAR 0 4
60073: NOT
60074: IFFALSE 60078
// continue ;
60076: GO 60026
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
60078: LD_ADDR_VAR 0 6
60082: PUSH
60083: LD_EXP 45
60087: PUSH
60088: LD_VAR 0 2
60092: ARRAY
60093: PPUSH
60094: LD_INT 2
60096: PUSH
60097: LD_INT 30
60099: PUSH
60100: LD_INT 4
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 30
60109: PUSH
60110: LD_INT 5
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: LIST
60121: PPUSH
60122: CALL_OW 72
60126: PUSH
60127: LD_EXP 45
60131: PUSH
60132: LD_VAR 0 2
60136: ARRAY
60137: PPUSH
60138: LD_INT 2
60140: PUSH
60141: LD_INT 30
60143: PUSH
60144: LD_INT 0
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 30
60153: PUSH
60154: LD_INT 1
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: LIST
60165: PPUSH
60166: CALL_OW 72
60170: PUSH
60171: LD_EXP 45
60175: PUSH
60176: LD_VAR 0 2
60180: ARRAY
60181: PPUSH
60182: LD_INT 30
60184: PUSH
60185: LD_INT 3
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PPUSH
60192: CALL_OW 72
60196: PUSH
60197: LD_EXP 45
60201: PUSH
60202: LD_VAR 0 2
60206: ARRAY
60207: PPUSH
60208: LD_INT 2
60210: PUSH
60211: LD_INT 30
60213: PUSH
60214: LD_INT 6
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 30
60223: PUSH
60224: LD_INT 7
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 30
60233: PUSH
60234: LD_INT 8
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: PPUSH
60247: CALL_OW 72
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: ST_TO_ADDR
// for j = 1 to 4 do
60258: LD_ADDR_VAR 0 3
60262: PUSH
60263: DOUBLE
60264: LD_INT 1
60266: DEC
60267: ST_TO_ADDR
60268: LD_INT 4
60270: PUSH
60271: FOR_TO
60272: IFFALSE 60463
// begin if not tmp [ j ] then
60274: LD_VAR 0 4
60278: PUSH
60279: LD_VAR 0 3
60283: ARRAY
60284: NOT
60285: IFFALSE 60289
// continue ;
60287: GO 60271
// for p in tmp [ j ] do
60289: LD_ADDR_VAR 0 5
60293: PUSH
60294: LD_VAR 0 4
60298: PUSH
60299: LD_VAR 0 3
60303: ARRAY
60304: PUSH
60305: FOR_IN
60306: IFFALSE 60459
// begin if not b [ j ] then
60308: LD_VAR 0 6
60312: PUSH
60313: LD_VAR 0 3
60317: ARRAY
60318: NOT
60319: IFFALSE 60323
// break ;
60321: GO 60459
// e := 0 ;
60323: LD_ADDR_VAR 0 7
60327: PUSH
60328: LD_INT 0
60330: ST_TO_ADDR
// for k in b [ j ] do
60331: LD_ADDR_VAR 0 8
60335: PUSH
60336: LD_VAR 0 6
60340: PUSH
60341: LD_VAR 0 3
60345: ARRAY
60346: PUSH
60347: FOR_IN
60348: IFFALSE 60375
// if IsNotFull ( k ) then
60350: LD_VAR 0 8
60354: PPUSH
60355: CALL 21567 0 1
60359: IFFALSE 60373
// begin e := k ;
60361: LD_ADDR_VAR 0 7
60365: PUSH
60366: LD_VAR 0 8
60370: ST_TO_ADDR
// break ;
60371: GO 60375
// end ;
60373: GO 60347
60375: POP
60376: POP
// if e and not UnitGoingToBuilding ( p , e ) then
60377: LD_VAR 0 7
60381: PUSH
60382: LD_VAR 0 5
60386: PPUSH
60387: LD_VAR 0 7
60391: PPUSH
60392: CALL 53987 0 2
60396: NOT
60397: AND
60398: IFFALSE 60457
// begin if IsInUnit ( p ) then
60400: LD_VAR 0 5
60404: PPUSH
60405: CALL_OW 310
60409: IFFALSE 60420
// ComExitBuilding ( p ) ;
60411: LD_VAR 0 5
60415: PPUSH
60416: CALL_OW 122
// ComEnterUnit ( p , e ) ;
60420: LD_VAR 0 5
60424: PPUSH
60425: LD_VAR 0 7
60429: PPUSH
60430: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
60434: LD_VAR 0 5
60438: PPUSH
60439: LD_VAR 0 3
60443: PPUSH
60444: CALL_OW 183
// AddComExitBuilding ( p ) ;
60448: LD_VAR 0 5
60452: PPUSH
60453: CALL_OW 182
// end ; end ;
60457: GO 60305
60459: POP
60460: POP
// end ;
60461: GO 60271
60463: POP
60464: POP
// end ;
60465: GO 60026
60467: POP
60468: POP
// end ;
60469: LD_VAR 0 1
60473: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
60474: LD_INT 0
60476: PPUSH
60477: PPUSH
60478: PPUSH
60479: PPUSH
60480: PPUSH
60481: PPUSH
60482: PPUSH
60483: PPUSH
60484: PPUSH
60485: PPUSH
60486: PPUSH
60487: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
60488: LD_VAR 0 1
60492: NOT
60493: PUSH
60494: LD_EXP 45
60498: PUSH
60499: LD_VAR 0 1
60503: ARRAY
60504: NOT
60505: OR
60506: PUSH
60507: LD_EXP 45
60511: PUSH
60512: LD_VAR 0 1
60516: ARRAY
60517: PPUSH
60518: LD_INT 2
60520: PUSH
60521: LD_INT 30
60523: PUSH
60524: LD_INT 0
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 30
60533: PUSH
60534: LD_INT 1
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: LIST
60545: PPUSH
60546: CALL_OW 72
60550: NOT
60551: OR
60552: IFFALSE 60556
// exit ;
60554: GO 64059
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
60556: LD_ADDR_VAR 0 4
60560: PUSH
60561: LD_EXP 45
60565: PUSH
60566: LD_VAR 0 1
60570: ARRAY
60571: PPUSH
60572: LD_INT 2
60574: PUSH
60575: LD_INT 25
60577: PUSH
60578: LD_INT 1
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 25
60587: PUSH
60588: LD_INT 2
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 25
60597: PUSH
60598: LD_INT 3
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 25
60607: PUSH
60608: LD_INT 4
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 25
60617: PUSH
60618: LD_INT 5
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 25
60627: PUSH
60628: LD_INT 8
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 25
60637: PUSH
60638: LD_INT 9
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: PPUSH
60655: CALL_OW 72
60659: ST_TO_ADDR
// if not tmp then
60660: LD_VAR 0 4
60664: NOT
60665: IFFALSE 60669
// exit ;
60667: GO 64059
// for i in tmp do
60669: LD_ADDR_VAR 0 3
60673: PUSH
60674: LD_VAR 0 4
60678: PUSH
60679: FOR_IN
60680: IFFALSE 60711
// if GetTag ( i ) then
60682: LD_VAR 0 3
60686: PPUSH
60687: CALL_OW 110
60691: IFFALSE 60709
// tmp := tmp diff i ;
60693: LD_ADDR_VAR 0 4
60697: PUSH
60698: LD_VAR 0 4
60702: PUSH
60703: LD_VAR 0 3
60707: DIFF
60708: ST_TO_ADDR
60709: GO 60679
60711: POP
60712: POP
// if not tmp then
60713: LD_VAR 0 4
60717: NOT
60718: IFFALSE 60722
// exit ;
60720: GO 64059
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
60722: LD_ADDR_VAR 0 5
60726: PUSH
60727: LD_EXP 45
60731: PUSH
60732: LD_VAR 0 1
60736: ARRAY
60737: PPUSH
60738: LD_INT 2
60740: PUSH
60741: LD_INT 25
60743: PUSH
60744: LD_INT 1
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 25
60753: PUSH
60754: LD_INT 5
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 25
60763: PUSH
60764: LD_INT 8
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 25
60773: PUSH
60774: LD_INT 9
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: PPUSH
60788: CALL_OW 72
60792: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
60793: LD_ADDR_VAR 0 6
60797: PUSH
60798: LD_EXP 45
60802: PUSH
60803: LD_VAR 0 1
60807: ARRAY
60808: PPUSH
60809: LD_INT 25
60811: PUSH
60812: LD_INT 2
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PPUSH
60819: CALL_OW 72
60823: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
60824: LD_ADDR_VAR 0 7
60828: PUSH
60829: LD_EXP 45
60833: PUSH
60834: LD_VAR 0 1
60838: ARRAY
60839: PPUSH
60840: LD_INT 25
60842: PUSH
60843: LD_INT 3
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PPUSH
60850: CALL_OW 72
60854: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
60855: LD_ADDR_VAR 0 8
60859: PUSH
60860: LD_EXP 45
60864: PUSH
60865: LD_VAR 0 1
60869: ARRAY
60870: PPUSH
60871: LD_INT 25
60873: PUSH
60874: LD_INT 4
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 24
60883: PUSH
60884: LD_INT 251
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PPUSH
60895: CALL_OW 72
60899: ST_TO_ADDR
// if mc_scan [ base ] then
60900: LD_EXP 68
60904: PUSH
60905: LD_VAR 0 1
60909: ARRAY
60910: IFFALSE 61371
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
60912: LD_ADDR_EXP 87
60916: PUSH
60917: LD_EXP 87
60921: PPUSH
60922: LD_VAR 0 1
60926: PPUSH
60927: LD_INT 4
60929: PPUSH
60930: CALL_OW 1
60934: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
60935: LD_ADDR_VAR 0 12
60939: PUSH
60940: LD_EXP 45
60944: PUSH
60945: LD_VAR 0 1
60949: ARRAY
60950: PPUSH
60951: LD_INT 2
60953: PUSH
60954: LD_INT 30
60956: PUSH
60957: LD_INT 4
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 30
60966: PUSH
60967: LD_INT 5
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: LIST
60978: PPUSH
60979: CALL_OW 72
60983: ST_TO_ADDR
// if not b then
60984: LD_VAR 0 12
60988: NOT
60989: IFFALSE 60993
// exit ;
60991: GO 64059
// p := [ ] ;
60993: LD_ADDR_VAR 0 11
60997: PUSH
60998: EMPTY
60999: ST_TO_ADDR
// if sci >= 2 then
61000: LD_VAR 0 8
61004: PUSH
61005: LD_INT 2
61007: GREATEREQUAL
61008: IFFALSE 61039
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
61010: LD_ADDR_VAR 0 8
61014: PUSH
61015: LD_VAR 0 8
61019: PUSH
61020: LD_INT 1
61022: ARRAY
61023: PUSH
61024: LD_VAR 0 8
61028: PUSH
61029: LD_INT 2
61031: ARRAY
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: ST_TO_ADDR
61037: GO 61100
// if sci = 1 then
61039: LD_VAR 0 8
61043: PUSH
61044: LD_INT 1
61046: EQUAL
61047: IFFALSE 61068
// sci := [ sci [ 1 ] ] else
61049: LD_ADDR_VAR 0 8
61053: PUSH
61054: LD_VAR 0 8
61058: PUSH
61059: LD_INT 1
61061: ARRAY
61062: PUSH
61063: EMPTY
61064: LIST
61065: ST_TO_ADDR
61066: GO 61100
// if sci = 0 then
61068: LD_VAR 0 8
61072: PUSH
61073: LD_INT 0
61075: EQUAL
61076: IFFALSE 61100
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
61078: LD_ADDR_VAR 0 11
61082: PUSH
61083: LD_VAR 0 4
61087: PPUSH
61088: LD_INT 4
61090: PPUSH
61091: CALL 53850 0 2
61095: PUSH
61096: LD_INT 1
61098: ARRAY
61099: ST_TO_ADDR
// if eng > 4 then
61100: LD_VAR 0 6
61104: PUSH
61105: LD_INT 4
61107: GREATER
61108: IFFALSE 61154
// for i = eng downto 4 do
61110: LD_ADDR_VAR 0 3
61114: PUSH
61115: DOUBLE
61116: LD_VAR 0 6
61120: INC
61121: ST_TO_ADDR
61122: LD_INT 4
61124: PUSH
61125: FOR_DOWNTO
61126: IFFALSE 61152
// eng := eng diff eng [ i ] ;
61128: LD_ADDR_VAR 0 6
61132: PUSH
61133: LD_VAR 0 6
61137: PUSH
61138: LD_VAR 0 6
61142: PUSH
61143: LD_VAR 0 3
61147: ARRAY
61148: DIFF
61149: ST_TO_ADDR
61150: GO 61125
61152: POP
61153: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
61154: LD_ADDR_VAR 0 4
61158: PUSH
61159: LD_VAR 0 4
61163: PUSH
61164: LD_VAR 0 5
61168: PUSH
61169: LD_VAR 0 6
61173: UNION
61174: PUSH
61175: LD_VAR 0 7
61179: UNION
61180: PUSH
61181: LD_VAR 0 8
61185: UNION
61186: DIFF
61187: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
61188: LD_ADDR_VAR 0 13
61192: PUSH
61193: LD_EXP 45
61197: PUSH
61198: LD_VAR 0 1
61202: ARRAY
61203: PPUSH
61204: LD_INT 2
61206: PUSH
61207: LD_INT 30
61209: PUSH
61210: LD_INT 32
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 30
61219: PUSH
61220: LD_INT 31
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: LIST
61231: PPUSH
61232: CALL_OW 72
61236: PUSH
61237: LD_EXP 45
61241: PUSH
61242: LD_VAR 0 1
61246: ARRAY
61247: PPUSH
61248: LD_INT 2
61250: PUSH
61251: LD_INT 30
61253: PUSH
61254: LD_INT 4
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 30
61263: PUSH
61264: LD_INT 5
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: LIST
61275: PPUSH
61276: CALL_OW 72
61280: PUSH
61281: LD_INT 6
61283: MUL
61284: PLUS
61285: ST_TO_ADDR
// if bcount < tmp then
61286: LD_VAR 0 13
61290: PUSH
61291: LD_VAR 0 4
61295: LESS
61296: IFFALSE 61342
// for i = tmp downto bcount do
61298: LD_ADDR_VAR 0 3
61302: PUSH
61303: DOUBLE
61304: LD_VAR 0 4
61308: INC
61309: ST_TO_ADDR
61310: LD_VAR 0 13
61314: PUSH
61315: FOR_DOWNTO
61316: IFFALSE 61340
// tmp := Delete ( tmp , tmp ) ;
61318: LD_ADDR_VAR 0 4
61322: PUSH
61323: LD_VAR 0 4
61327: PPUSH
61328: LD_VAR 0 4
61332: PPUSH
61333: CALL_OW 3
61337: ST_TO_ADDR
61338: GO 61315
61340: POP
61341: POP
// result := [ tmp , 0 , 0 , p ] ;
61342: LD_ADDR_VAR 0 2
61346: PUSH
61347: LD_VAR 0 4
61351: PUSH
61352: LD_INT 0
61354: PUSH
61355: LD_INT 0
61357: PUSH
61358: LD_VAR 0 11
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: ST_TO_ADDR
// exit ;
61369: GO 64059
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
61371: LD_EXP 45
61375: PUSH
61376: LD_VAR 0 1
61380: ARRAY
61381: PPUSH
61382: LD_INT 2
61384: PUSH
61385: LD_INT 30
61387: PUSH
61388: LD_INT 6
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 30
61397: PUSH
61398: LD_INT 7
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 30
61407: PUSH
61408: LD_INT 8
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: PPUSH
61421: CALL_OW 72
61425: NOT
61426: PUSH
61427: LD_EXP 45
61431: PUSH
61432: LD_VAR 0 1
61436: ARRAY
61437: PPUSH
61438: LD_INT 30
61440: PUSH
61441: LD_INT 3
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PPUSH
61448: CALL_OW 72
61452: NOT
61453: AND
61454: IFFALSE 61526
// begin if eng = tmp then
61456: LD_VAR 0 6
61460: PUSH
61461: LD_VAR 0 4
61465: EQUAL
61466: IFFALSE 61470
// exit ;
61468: GO 64059
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
61470: LD_ADDR_EXP 87
61474: PUSH
61475: LD_EXP 87
61479: PPUSH
61480: LD_VAR 0 1
61484: PPUSH
61485: LD_INT 1
61487: PPUSH
61488: CALL_OW 1
61492: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
61493: LD_ADDR_VAR 0 2
61497: PUSH
61498: LD_INT 0
61500: PUSH
61501: LD_VAR 0 4
61505: PUSH
61506: LD_VAR 0 6
61510: DIFF
61511: PUSH
61512: LD_INT 0
61514: PUSH
61515: LD_INT 0
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: ST_TO_ADDR
// exit ;
61524: GO 64059
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
61526: LD_EXP 72
61530: PUSH
61531: LD_EXP 71
61535: PUSH
61536: LD_VAR 0 1
61540: ARRAY
61541: ARRAY
61542: PUSH
61543: LD_EXP 45
61547: PUSH
61548: LD_VAR 0 1
61552: ARRAY
61553: PPUSH
61554: LD_INT 2
61556: PUSH
61557: LD_INT 30
61559: PUSH
61560: LD_INT 6
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 30
61569: PUSH
61570: LD_INT 7
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 30
61579: PUSH
61580: LD_INT 8
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: PPUSH
61593: CALL_OW 72
61597: AND
61598: PUSH
61599: LD_EXP 45
61603: PUSH
61604: LD_VAR 0 1
61608: ARRAY
61609: PPUSH
61610: LD_INT 30
61612: PUSH
61613: LD_INT 3
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PPUSH
61620: CALL_OW 72
61624: NOT
61625: AND
61626: IFFALSE 61840
// begin if sci >= 6 then
61628: LD_VAR 0 8
61632: PUSH
61633: LD_INT 6
61635: GREATEREQUAL
61636: IFFALSE 61640
// exit ;
61638: GO 64059
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
61640: LD_ADDR_EXP 87
61644: PUSH
61645: LD_EXP 87
61649: PPUSH
61650: LD_VAR 0 1
61654: PPUSH
61655: LD_INT 2
61657: PPUSH
61658: CALL_OW 1
61662: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
61663: LD_ADDR_VAR 0 9
61667: PUSH
61668: LD_VAR 0 4
61672: PUSH
61673: LD_VAR 0 8
61677: DIFF
61678: PPUSH
61679: LD_INT 4
61681: PPUSH
61682: CALL 53850 0 2
61686: ST_TO_ADDR
// p := [ ] ;
61687: LD_ADDR_VAR 0 11
61691: PUSH
61692: EMPTY
61693: ST_TO_ADDR
// if sci < 6 and sort > 6 then
61694: LD_VAR 0 8
61698: PUSH
61699: LD_INT 6
61701: LESS
61702: PUSH
61703: LD_VAR 0 9
61707: PUSH
61708: LD_INT 6
61710: GREATER
61711: AND
61712: IFFALSE 61793
// begin for i = 1 to 6 - sci do
61714: LD_ADDR_VAR 0 3
61718: PUSH
61719: DOUBLE
61720: LD_INT 1
61722: DEC
61723: ST_TO_ADDR
61724: LD_INT 6
61726: PUSH
61727: LD_VAR 0 8
61731: MINUS
61732: PUSH
61733: FOR_TO
61734: IFFALSE 61789
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
61736: LD_ADDR_VAR 0 11
61740: PUSH
61741: LD_VAR 0 11
61745: PPUSH
61746: LD_VAR 0 11
61750: PUSH
61751: LD_INT 1
61753: PLUS
61754: PPUSH
61755: LD_VAR 0 9
61759: PUSH
61760: LD_INT 1
61762: ARRAY
61763: PPUSH
61764: CALL_OW 2
61768: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
61769: LD_ADDR_VAR 0 9
61773: PUSH
61774: LD_VAR 0 9
61778: PPUSH
61779: LD_INT 1
61781: PPUSH
61782: CALL_OW 3
61786: ST_TO_ADDR
// end ;
61787: GO 61733
61789: POP
61790: POP
// end else
61791: GO 61813
// if sort then
61793: LD_VAR 0 9
61797: IFFALSE 61813
// p := sort [ 1 ] ;
61799: LD_ADDR_VAR 0 11
61803: PUSH
61804: LD_VAR 0 9
61808: PUSH
61809: LD_INT 1
61811: ARRAY
61812: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
61813: LD_ADDR_VAR 0 2
61817: PUSH
61818: LD_INT 0
61820: PUSH
61821: LD_INT 0
61823: PUSH
61824: LD_INT 0
61826: PUSH
61827: LD_VAR 0 11
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: ST_TO_ADDR
// exit ;
61838: GO 64059
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
61840: LD_EXP 72
61844: PUSH
61845: LD_EXP 71
61849: PUSH
61850: LD_VAR 0 1
61854: ARRAY
61855: ARRAY
61856: PUSH
61857: LD_EXP 45
61861: PUSH
61862: LD_VAR 0 1
61866: ARRAY
61867: PPUSH
61868: LD_INT 2
61870: PUSH
61871: LD_INT 30
61873: PUSH
61874: LD_INT 6
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 30
61883: PUSH
61884: LD_INT 7
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 30
61893: PUSH
61894: LD_INT 8
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: PPUSH
61907: CALL_OW 72
61911: AND
61912: PUSH
61913: LD_EXP 45
61917: PUSH
61918: LD_VAR 0 1
61922: ARRAY
61923: PPUSH
61924: LD_INT 30
61926: PUSH
61927: LD_INT 3
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PPUSH
61934: CALL_OW 72
61938: AND
61939: IFFALSE 62673
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
61941: LD_ADDR_EXP 87
61945: PUSH
61946: LD_EXP 87
61950: PPUSH
61951: LD_VAR 0 1
61955: PPUSH
61956: LD_INT 3
61958: PPUSH
61959: CALL_OW 1
61963: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
61964: LD_ADDR_VAR 0 2
61968: PUSH
61969: LD_INT 0
61971: PUSH
61972: LD_INT 0
61974: PUSH
61975: LD_INT 0
61977: PUSH
61978: LD_INT 0
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: ST_TO_ADDR
// if not eng then
61987: LD_VAR 0 6
61991: NOT
61992: IFFALSE 62055
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
61994: LD_ADDR_VAR 0 11
61998: PUSH
61999: LD_VAR 0 4
62003: PPUSH
62004: LD_INT 2
62006: PPUSH
62007: CALL 53850 0 2
62011: PUSH
62012: LD_INT 1
62014: ARRAY
62015: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
62016: LD_ADDR_VAR 0 2
62020: PUSH
62021: LD_VAR 0 2
62025: PPUSH
62026: LD_INT 2
62028: PPUSH
62029: LD_VAR 0 11
62033: PPUSH
62034: CALL_OW 1
62038: ST_TO_ADDR
// tmp := tmp diff p ;
62039: LD_ADDR_VAR 0 4
62043: PUSH
62044: LD_VAR 0 4
62048: PUSH
62049: LD_VAR 0 11
62053: DIFF
62054: ST_TO_ADDR
// end ; if tmp and sci < 6 then
62055: LD_VAR 0 4
62059: PUSH
62060: LD_VAR 0 8
62064: PUSH
62065: LD_INT 6
62067: LESS
62068: AND
62069: IFFALSE 62257
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
62071: LD_ADDR_VAR 0 9
62075: PUSH
62076: LD_VAR 0 4
62080: PUSH
62081: LD_VAR 0 8
62085: PUSH
62086: LD_VAR 0 7
62090: UNION
62091: DIFF
62092: PPUSH
62093: LD_INT 4
62095: PPUSH
62096: CALL 53850 0 2
62100: ST_TO_ADDR
// p := [ ] ;
62101: LD_ADDR_VAR 0 11
62105: PUSH
62106: EMPTY
62107: ST_TO_ADDR
// if sort then
62108: LD_VAR 0 9
62112: IFFALSE 62228
// for i = 1 to 6 - sci do
62114: LD_ADDR_VAR 0 3
62118: PUSH
62119: DOUBLE
62120: LD_INT 1
62122: DEC
62123: ST_TO_ADDR
62124: LD_INT 6
62126: PUSH
62127: LD_VAR 0 8
62131: MINUS
62132: PUSH
62133: FOR_TO
62134: IFFALSE 62226
// begin if i = sort then
62136: LD_VAR 0 3
62140: PUSH
62141: LD_VAR 0 9
62145: EQUAL
62146: IFFALSE 62150
// break ;
62148: GO 62226
// if GetClass ( i ) = 4 then
62150: LD_VAR 0 3
62154: PPUSH
62155: CALL_OW 257
62159: PUSH
62160: LD_INT 4
62162: EQUAL
62163: IFFALSE 62167
// continue ;
62165: GO 62133
// p := Insert ( p , p + 1 , sort [ i ] ) ;
62167: LD_ADDR_VAR 0 11
62171: PUSH
62172: LD_VAR 0 11
62176: PPUSH
62177: LD_VAR 0 11
62181: PUSH
62182: LD_INT 1
62184: PLUS
62185: PPUSH
62186: LD_VAR 0 9
62190: PUSH
62191: LD_VAR 0 3
62195: ARRAY
62196: PPUSH
62197: CALL_OW 2
62201: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
62202: LD_ADDR_VAR 0 4
62206: PUSH
62207: LD_VAR 0 4
62211: PUSH
62212: LD_VAR 0 9
62216: PUSH
62217: LD_VAR 0 3
62221: ARRAY
62222: DIFF
62223: ST_TO_ADDR
// end ;
62224: GO 62133
62226: POP
62227: POP
// if p then
62228: LD_VAR 0 11
62232: IFFALSE 62257
// result := Replace ( result , 4 , p ) ;
62234: LD_ADDR_VAR 0 2
62238: PUSH
62239: LD_VAR 0 2
62243: PPUSH
62244: LD_INT 4
62246: PPUSH
62247: LD_VAR 0 11
62251: PPUSH
62252: CALL_OW 1
62256: ST_TO_ADDR
// end ; if tmp and mech < 6 then
62257: LD_VAR 0 4
62261: PUSH
62262: LD_VAR 0 7
62266: PUSH
62267: LD_INT 6
62269: LESS
62270: AND
62271: IFFALSE 62459
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
62273: LD_ADDR_VAR 0 9
62277: PUSH
62278: LD_VAR 0 4
62282: PUSH
62283: LD_VAR 0 8
62287: PUSH
62288: LD_VAR 0 7
62292: UNION
62293: DIFF
62294: PPUSH
62295: LD_INT 3
62297: PPUSH
62298: CALL 53850 0 2
62302: ST_TO_ADDR
// p := [ ] ;
62303: LD_ADDR_VAR 0 11
62307: PUSH
62308: EMPTY
62309: ST_TO_ADDR
// if sort then
62310: LD_VAR 0 9
62314: IFFALSE 62430
// for i = 1 to 6 - mech do
62316: LD_ADDR_VAR 0 3
62320: PUSH
62321: DOUBLE
62322: LD_INT 1
62324: DEC
62325: ST_TO_ADDR
62326: LD_INT 6
62328: PUSH
62329: LD_VAR 0 7
62333: MINUS
62334: PUSH
62335: FOR_TO
62336: IFFALSE 62428
// begin if i = sort then
62338: LD_VAR 0 3
62342: PUSH
62343: LD_VAR 0 9
62347: EQUAL
62348: IFFALSE 62352
// break ;
62350: GO 62428
// if GetClass ( i ) = 3 then
62352: LD_VAR 0 3
62356: PPUSH
62357: CALL_OW 257
62361: PUSH
62362: LD_INT 3
62364: EQUAL
62365: IFFALSE 62369
// continue ;
62367: GO 62335
// p := Insert ( p , p + 1 , sort [ i ] ) ;
62369: LD_ADDR_VAR 0 11
62373: PUSH
62374: LD_VAR 0 11
62378: PPUSH
62379: LD_VAR 0 11
62383: PUSH
62384: LD_INT 1
62386: PLUS
62387: PPUSH
62388: LD_VAR 0 9
62392: PUSH
62393: LD_VAR 0 3
62397: ARRAY
62398: PPUSH
62399: CALL_OW 2
62403: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
62404: LD_ADDR_VAR 0 4
62408: PUSH
62409: LD_VAR 0 4
62413: PUSH
62414: LD_VAR 0 9
62418: PUSH
62419: LD_VAR 0 3
62423: ARRAY
62424: DIFF
62425: ST_TO_ADDR
// end ;
62426: GO 62335
62428: POP
62429: POP
// if p then
62430: LD_VAR 0 11
62434: IFFALSE 62459
// result := Replace ( result , 3 , p ) ;
62436: LD_ADDR_VAR 0 2
62440: PUSH
62441: LD_VAR 0 2
62445: PPUSH
62446: LD_INT 3
62448: PPUSH
62449: LD_VAR 0 11
62453: PPUSH
62454: CALL_OW 1
62458: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
62459: LD_VAR 0 4
62463: PUSH
62464: LD_INT 6
62466: GREATER
62467: PUSH
62468: LD_VAR 0 6
62472: PUSH
62473: LD_INT 6
62475: LESS
62476: AND
62477: IFFALSE 62671
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
62479: LD_ADDR_VAR 0 9
62483: PUSH
62484: LD_VAR 0 4
62488: PUSH
62489: LD_VAR 0 8
62493: PUSH
62494: LD_VAR 0 7
62498: UNION
62499: PUSH
62500: LD_VAR 0 6
62504: UNION
62505: DIFF
62506: PPUSH
62507: LD_INT 2
62509: PPUSH
62510: CALL 53850 0 2
62514: ST_TO_ADDR
// p := [ ] ;
62515: LD_ADDR_VAR 0 11
62519: PUSH
62520: EMPTY
62521: ST_TO_ADDR
// if sort then
62522: LD_VAR 0 9
62526: IFFALSE 62642
// for i = 1 to 6 - eng do
62528: LD_ADDR_VAR 0 3
62532: PUSH
62533: DOUBLE
62534: LD_INT 1
62536: DEC
62537: ST_TO_ADDR
62538: LD_INT 6
62540: PUSH
62541: LD_VAR 0 6
62545: MINUS
62546: PUSH
62547: FOR_TO
62548: IFFALSE 62640
// begin if i = sort then
62550: LD_VAR 0 3
62554: PUSH
62555: LD_VAR 0 9
62559: EQUAL
62560: IFFALSE 62564
// break ;
62562: GO 62640
// if GetClass ( i ) = 2 then
62564: LD_VAR 0 3
62568: PPUSH
62569: CALL_OW 257
62573: PUSH
62574: LD_INT 2
62576: EQUAL
62577: IFFALSE 62581
// continue ;
62579: GO 62547
// p := Insert ( p , p + 1 , sort [ i ] ) ;
62581: LD_ADDR_VAR 0 11
62585: PUSH
62586: LD_VAR 0 11
62590: PPUSH
62591: LD_VAR 0 11
62595: PUSH
62596: LD_INT 1
62598: PLUS
62599: PPUSH
62600: LD_VAR 0 9
62604: PUSH
62605: LD_VAR 0 3
62609: ARRAY
62610: PPUSH
62611: CALL_OW 2
62615: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
62616: LD_ADDR_VAR 0 4
62620: PUSH
62621: LD_VAR 0 4
62625: PUSH
62626: LD_VAR 0 9
62630: PUSH
62631: LD_VAR 0 3
62635: ARRAY
62636: DIFF
62637: ST_TO_ADDR
// end ;
62638: GO 62547
62640: POP
62641: POP
// if p then
62642: LD_VAR 0 11
62646: IFFALSE 62671
// result := Replace ( result , 2 , p ) ;
62648: LD_ADDR_VAR 0 2
62652: PUSH
62653: LD_VAR 0 2
62657: PPUSH
62658: LD_INT 2
62660: PPUSH
62661: LD_VAR 0 11
62665: PPUSH
62666: CALL_OW 1
62670: ST_TO_ADDR
// end ; exit ;
62671: GO 64059
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
62673: LD_EXP 72
62677: PUSH
62678: LD_EXP 71
62682: PUSH
62683: LD_VAR 0 1
62687: ARRAY
62688: ARRAY
62689: NOT
62690: PUSH
62691: LD_EXP 45
62695: PUSH
62696: LD_VAR 0 1
62700: ARRAY
62701: PPUSH
62702: LD_INT 30
62704: PUSH
62705: LD_INT 3
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PPUSH
62712: CALL_OW 72
62716: AND
62717: PUSH
62718: LD_EXP 50
62722: PUSH
62723: LD_VAR 0 1
62727: ARRAY
62728: AND
62729: IFFALSE 63337
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
62731: LD_ADDR_EXP 87
62735: PUSH
62736: LD_EXP 87
62740: PPUSH
62741: LD_VAR 0 1
62745: PPUSH
62746: LD_INT 5
62748: PPUSH
62749: CALL_OW 1
62753: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
62754: LD_ADDR_VAR 0 2
62758: PUSH
62759: LD_INT 0
62761: PUSH
62762: LD_INT 0
62764: PUSH
62765: LD_INT 0
62767: PUSH
62768: LD_INT 0
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: ST_TO_ADDR
// if sci > 1 then
62777: LD_VAR 0 8
62781: PUSH
62782: LD_INT 1
62784: GREATER
62785: IFFALSE 62813
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
62787: LD_ADDR_VAR 0 4
62791: PUSH
62792: LD_VAR 0 4
62796: PUSH
62797: LD_VAR 0 8
62801: PUSH
62802: LD_VAR 0 8
62806: PUSH
62807: LD_INT 1
62809: ARRAY
62810: DIFF
62811: DIFF
62812: ST_TO_ADDR
// if tmp and not sci then
62813: LD_VAR 0 4
62817: PUSH
62818: LD_VAR 0 8
62822: NOT
62823: AND
62824: IFFALSE 62893
// begin sort := SortBySkill ( tmp , 4 ) ;
62826: LD_ADDR_VAR 0 9
62830: PUSH
62831: LD_VAR 0 4
62835: PPUSH
62836: LD_INT 4
62838: PPUSH
62839: CALL 53850 0 2
62843: ST_TO_ADDR
// if sort then
62844: LD_VAR 0 9
62848: IFFALSE 62864
// p := sort [ 1 ] ;
62850: LD_ADDR_VAR 0 11
62854: PUSH
62855: LD_VAR 0 9
62859: PUSH
62860: LD_INT 1
62862: ARRAY
62863: ST_TO_ADDR
// if p then
62864: LD_VAR 0 11
62868: IFFALSE 62893
// result := Replace ( result , 4 , p ) ;
62870: LD_ADDR_VAR 0 2
62874: PUSH
62875: LD_VAR 0 2
62879: PPUSH
62880: LD_INT 4
62882: PPUSH
62883: LD_VAR 0 11
62887: PPUSH
62888: CALL_OW 1
62892: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
62893: LD_ADDR_VAR 0 4
62897: PUSH
62898: LD_VAR 0 4
62902: PUSH
62903: LD_VAR 0 7
62907: DIFF
62908: ST_TO_ADDR
// if tmp and mech < 6 then
62909: LD_VAR 0 4
62913: PUSH
62914: LD_VAR 0 7
62918: PUSH
62919: LD_INT 6
62921: LESS
62922: AND
62923: IFFALSE 63111
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
62925: LD_ADDR_VAR 0 9
62929: PUSH
62930: LD_VAR 0 4
62934: PUSH
62935: LD_VAR 0 8
62939: PUSH
62940: LD_VAR 0 7
62944: UNION
62945: DIFF
62946: PPUSH
62947: LD_INT 3
62949: PPUSH
62950: CALL 53850 0 2
62954: ST_TO_ADDR
// p := [ ] ;
62955: LD_ADDR_VAR 0 11
62959: PUSH
62960: EMPTY
62961: ST_TO_ADDR
// if sort then
62962: LD_VAR 0 9
62966: IFFALSE 63082
// for i = 1 to 6 - mech do
62968: LD_ADDR_VAR 0 3
62972: PUSH
62973: DOUBLE
62974: LD_INT 1
62976: DEC
62977: ST_TO_ADDR
62978: LD_INT 6
62980: PUSH
62981: LD_VAR 0 7
62985: MINUS
62986: PUSH
62987: FOR_TO
62988: IFFALSE 63080
// begin if i = sort then
62990: LD_VAR 0 3
62994: PUSH
62995: LD_VAR 0 9
62999: EQUAL
63000: IFFALSE 63004
// break ;
63002: GO 63080
// if GetClass ( i ) = 3 then
63004: LD_VAR 0 3
63008: PPUSH
63009: CALL_OW 257
63013: PUSH
63014: LD_INT 3
63016: EQUAL
63017: IFFALSE 63021
// continue ;
63019: GO 62987
// p := Insert ( p , p + 1 , sort [ i ] ) ;
63021: LD_ADDR_VAR 0 11
63025: PUSH
63026: LD_VAR 0 11
63030: PPUSH
63031: LD_VAR 0 11
63035: PUSH
63036: LD_INT 1
63038: PLUS
63039: PPUSH
63040: LD_VAR 0 9
63044: PUSH
63045: LD_VAR 0 3
63049: ARRAY
63050: PPUSH
63051: CALL_OW 2
63055: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
63056: LD_ADDR_VAR 0 4
63060: PUSH
63061: LD_VAR 0 4
63065: PUSH
63066: LD_VAR 0 9
63070: PUSH
63071: LD_VAR 0 3
63075: ARRAY
63076: DIFF
63077: ST_TO_ADDR
// end ;
63078: GO 62987
63080: POP
63081: POP
// if p then
63082: LD_VAR 0 11
63086: IFFALSE 63111
// result := Replace ( result , 3 , p ) ;
63088: LD_ADDR_VAR 0 2
63092: PUSH
63093: LD_VAR 0 2
63097: PPUSH
63098: LD_INT 3
63100: PPUSH
63101: LD_VAR 0 11
63105: PPUSH
63106: CALL_OW 1
63110: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
63111: LD_ADDR_VAR 0 4
63115: PUSH
63116: LD_VAR 0 4
63120: PUSH
63121: LD_VAR 0 6
63125: DIFF
63126: ST_TO_ADDR
// if tmp and eng < 6 then
63127: LD_VAR 0 4
63131: PUSH
63132: LD_VAR 0 6
63136: PUSH
63137: LD_INT 6
63139: LESS
63140: AND
63141: IFFALSE 63335
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
63143: LD_ADDR_VAR 0 9
63147: PUSH
63148: LD_VAR 0 4
63152: PUSH
63153: LD_VAR 0 8
63157: PUSH
63158: LD_VAR 0 7
63162: UNION
63163: PUSH
63164: LD_VAR 0 6
63168: UNION
63169: DIFF
63170: PPUSH
63171: LD_INT 2
63173: PPUSH
63174: CALL 53850 0 2
63178: ST_TO_ADDR
// p := [ ] ;
63179: LD_ADDR_VAR 0 11
63183: PUSH
63184: EMPTY
63185: ST_TO_ADDR
// if sort then
63186: LD_VAR 0 9
63190: IFFALSE 63306
// for i = 1 to 6 - eng do
63192: LD_ADDR_VAR 0 3
63196: PUSH
63197: DOUBLE
63198: LD_INT 1
63200: DEC
63201: ST_TO_ADDR
63202: LD_INT 6
63204: PUSH
63205: LD_VAR 0 6
63209: MINUS
63210: PUSH
63211: FOR_TO
63212: IFFALSE 63304
// begin if i = sort then
63214: LD_VAR 0 3
63218: PUSH
63219: LD_VAR 0 9
63223: EQUAL
63224: IFFALSE 63228
// break ;
63226: GO 63304
// if GetClass ( i ) = 2 then
63228: LD_VAR 0 3
63232: PPUSH
63233: CALL_OW 257
63237: PUSH
63238: LD_INT 2
63240: EQUAL
63241: IFFALSE 63245
// continue ;
63243: GO 63211
// p := Insert ( p , p + 1 , sort [ i ] ) ;
63245: LD_ADDR_VAR 0 11
63249: PUSH
63250: LD_VAR 0 11
63254: PPUSH
63255: LD_VAR 0 11
63259: PUSH
63260: LD_INT 1
63262: PLUS
63263: PPUSH
63264: LD_VAR 0 9
63268: PUSH
63269: LD_VAR 0 3
63273: ARRAY
63274: PPUSH
63275: CALL_OW 2
63279: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
63280: LD_ADDR_VAR 0 4
63284: PUSH
63285: LD_VAR 0 4
63289: PUSH
63290: LD_VAR 0 9
63294: PUSH
63295: LD_VAR 0 3
63299: ARRAY
63300: DIFF
63301: ST_TO_ADDR
// end ;
63302: GO 63211
63304: POP
63305: POP
// if p then
63306: LD_VAR 0 11
63310: IFFALSE 63335
// result := Replace ( result , 2 , p ) ;
63312: LD_ADDR_VAR 0 2
63316: PUSH
63317: LD_VAR 0 2
63321: PPUSH
63322: LD_INT 2
63324: PPUSH
63325: LD_VAR 0 11
63329: PPUSH
63330: CALL_OW 1
63334: ST_TO_ADDR
// end ; exit ;
63335: GO 64059
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
63337: LD_EXP 72
63341: PUSH
63342: LD_EXP 71
63346: PUSH
63347: LD_VAR 0 1
63351: ARRAY
63352: ARRAY
63353: NOT
63354: PUSH
63355: LD_EXP 45
63359: PUSH
63360: LD_VAR 0 1
63364: ARRAY
63365: PPUSH
63366: LD_INT 30
63368: PUSH
63369: LD_INT 3
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PPUSH
63376: CALL_OW 72
63380: AND
63381: PUSH
63382: LD_EXP 50
63386: PUSH
63387: LD_VAR 0 1
63391: ARRAY
63392: NOT
63393: AND
63394: IFFALSE 64059
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
63396: LD_ADDR_EXP 87
63400: PUSH
63401: LD_EXP 87
63405: PPUSH
63406: LD_VAR 0 1
63410: PPUSH
63411: LD_INT 6
63413: PPUSH
63414: CALL_OW 1
63418: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
63419: LD_ADDR_VAR 0 2
63423: PUSH
63424: LD_INT 0
63426: PUSH
63427: LD_INT 0
63429: PUSH
63430: LD_INT 0
63432: PUSH
63433: LD_INT 0
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: ST_TO_ADDR
// if sci >= 1 then
63442: LD_VAR 0 8
63446: PUSH
63447: LD_INT 1
63449: GREATEREQUAL
63450: IFFALSE 63472
// tmp := tmp diff sci [ 1 ] ;
63452: LD_ADDR_VAR 0 4
63456: PUSH
63457: LD_VAR 0 4
63461: PUSH
63462: LD_VAR 0 8
63466: PUSH
63467: LD_INT 1
63469: ARRAY
63470: DIFF
63471: ST_TO_ADDR
// if tmp and not sci then
63472: LD_VAR 0 4
63476: PUSH
63477: LD_VAR 0 8
63481: NOT
63482: AND
63483: IFFALSE 63552
// begin sort := SortBySkill ( tmp , 4 ) ;
63485: LD_ADDR_VAR 0 9
63489: PUSH
63490: LD_VAR 0 4
63494: PPUSH
63495: LD_INT 4
63497: PPUSH
63498: CALL 53850 0 2
63502: ST_TO_ADDR
// if sort then
63503: LD_VAR 0 9
63507: IFFALSE 63523
// p := sort [ 1 ] ;
63509: LD_ADDR_VAR 0 11
63513: PUSH
63514: LD_VAR 0 9
63518: PUSH
63519: LD_INT 1
63521: ARRAY
63522: ST_TO_ADDR
// if p then
63523: LD_VAR 0 11
63527: IFFALSE 63552
// result := Replace ( result , 4 , p ) ;
63529: LD_ADDR_VAR 0 2
63533: PUSH
63534: LD_VAR 0 2
63538: PPUSH
63539: LD_INT 4
63541: PPUSH
63542: LD_VAR 0 11
63546: PPUSH
63547: CALL_OW 1
63551: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
63552: LD_ADDR_VAR 0 4
63556: PUSH
63557: LD_VAR 0 4
63561: PUSH
63562: LD_VAR 0 7
63566: DIFF
63567: ST_TO_ADDR
// if tmp and mech < 6 then
63568: LD_VAR 0 4
63572: PUSH
63573: LD_VAR 0 7
63577: PUSH
63578: LD_INT 6
63580: LESS
63581: AND
63582: IFFALSE 63764
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
63584: LD_ADDR_VAR 0 9
63588: PUSH
63589: LD_VAR 0 4
63593: PUSH
63594: LD_VAR 0 7
63598: DIFF
63599: PPUSH
63600: LD_INT 3
63602: PPUSH
63603: CALL 53850 0 2
63607: ST_TO_ADDR
// p := [ ] ;
63608: LD_ADDR_VAR 0 11
63612: PUSH
63613: EMPTY
63614: ST_TO_ADDR
// if sort then
63615: LD_VAR 0 9
63619: IFFALSE 63735
// for i = 1 to 6 - mech do
63621: LD_ADDR_VAR 0 3
63625: PUSH
63626: DOUBLE
63627: LD_INT 1
63629: DEC
63630: ST_TO_ADDR
63631: LD_INT 6
63633: PUSH
63634: LD_VAR 0 7
63638: MINUS
63639: PUSH
63640: FOR_TO
63641: IFFALSE 63733
// begin if i = sort then
63643: LD_VAR 0 3
63647: PUSH
63648: LD_VAR 0 9
63652: EQUAL
63653: IFFALSE 63657
// break ;
63655: GO 63733
// if GetClass ( i ) = 3 then
63657: LD_VAR 0 3
63661: PPUSH
63662: CALL_OW 257
63666: PUSH
63667: LD_INT 3
63669: EQUAL
63670: IFFALSE 63674
// continue ;
63672: GO 63640
// p := Insert ( p , p + 1 , sort [ i ] ) ;
63674: LD_ADDR_VAR 0 11
63678: PUSH
63679: LD_VAR 0 11
63683: PPUSH
63684: LD_VAR 0 11
63688: PUSH
63689: LD_INT 1
63691: PLUS
63692: PPUSH
63693: LD_VAR 0 9
63697: PUSH
63698: LD_VAR 0 3
63702: ARRAY
63703: PPUSH
63704: CALL_OW 2
63708: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
63709: LD_ADDR_VAR 0 4
63713: PUSH
63714: LD_VAR 0 4
63718: PUSH
63719: LD_VAR 0 9
63723: PUSH
63724: LD_VAR 0 3
63728: ARRAY
63729: DIFF
63730: ST_TO_ADDR
// end ;
63731: GO 63640
63733: POP
63734: POP
// if p then
63735: LD_VAR 0 11
63739: IFFALSE 63764
// result := Replace ( result , 3 , p ) ;
63741: LD_ADDR_VAR 0 2
63745: PUSH
63746: LD_VAR 0 2
63750: PPUSH
63751: LD_INT 3
63753: PPUSH
63754: LD_VAR 0 11
63758: PPUSH
63759: CALL_OW 1
63763: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
63764: LD_ADDR_VAR 0 4
63768: PUSH
63769: LD_VAR 0 4
63773: PUSH
63774: LD_VAR 0 6
63778: DIFF
63779: ST_TO_ADDR
// if tmp and eng < 4 then
63780: LD_VAR 0 4
63784: PUSH
63785: LD_VAR 0 6
63789: PUSH
63790: LD_INT 4
63792: LESS
63793: AND
63794: IFFALSE 63984
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
63796: LD_ADDR_VAR 0 9
63800: PUSH
63801: LD_VAR 0 4
63805: PUSH
63806: LD_VAR 0 7
63810: PUSH
63811: LD_VAR 0 6
63815: UNION
63816: DIFF
63817: PPUSH
63818: LD_INT 2
63820: PPUSH
63821: CALL 53850 0 2
63825: ST_TO_ADDR
// p := [ ] ;
63826: LD_ADDR_VAR 0 11
63830: PUSH
63831: EMPTY
63832: ST_TO_ADDR
// if sort then
63833: LD_VAR 0 9
63837: IFFALSE 63953
// for i = 1 to 4 - eng do
63839: LD_ADDR_VAR 0 3
63843: PUSH
63844: DOUBLE
63845: LD_INT 1
63847: DEC
63848: ST_TO_ADDR
63849: LD_INT 4
63851: PUSH
63852: LD_VAR 0 6
63856: MINUS
63857: PUSH
63858: FOR_TO
63859: IFFALSE 63951
// begin if i = sort then
63861: LD_VAR 0 3
63865: PUSH
63866: LD_VAR 0 9
63870: EQUAL
63871: IFFALSE 63875
// break ;
63873: GO 63951
// if GetClass ( i ) = 2 then
63875: LD_VAR 0 3
63879: PPUSH
63880: CALL_OW 257
63884: PUSH
63885: LD_INT 2
63887: EQUAL
63888: IFFALSE 63892
// continue ;
63890: GO 63858
// p := Insert ( p , p + 1 , sort [ i ] ) ;
63892: LD_ADDR_VAR 0 11
63896: PUSH
63897: LD_VAR 0 11
63901: PPUSH
63902: LD_VAR 0 11
63906: PUSH
63907: LD_INT 1
63909: PLUS
63910: PPUSH
63911: LD_VAR 0 9
63915: PUSH
63916: LD_VAR 0 3
63920: ARRAY
63921: PPUSH
63922: CALL_OW 2
63926: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
63927: LD_ADDR_VAR 0 4
63931: PUSH
63932: LD_VAR 0 4
63936: PUSH
63937: LD_VAR 0 9
63941: PUSH
63942: LD_VAR 0 3
63946: ARRAY
63947: DIFF
63948: ST_TO_ADDR
// end ;
63949: GO 63858
63951: POP
63952: POP
// if p then
63953: LD_VAR 0 11
63957: IFFALSE 63982
// result := Replace ( result , 2 , p ) ;
63959: LD_ADDR_VAR 0 2
63963: PUSH
63964: LD_VAR 0 2
63968: PPUSH
63969: LD_INT 2
63971: PPUSH
63972: LD_VAR 0 11
63976: PPUSH
63977: CALL_OW 1
63981: ST_TO_ADDR
// end else
63982: GO 64028
// for i = eng downto 5 do
63984: LD_ADDR_VAR 0 3
63988: PUSH
63989: DOUBLE
63990: LD_VAR 0 6
63994: INC
63995: ST_TO_ADDR
63996: LD_INT 5
63998: PUSH
63999: FOR_DOWNTO
64000: IFFALSE 64026
// tmp := tmp union eng [ i ] ;
64002: LD_ADDR_VAR 0 4
64006: PUSH
64007: LD_VAR 0 4
64011: PUSH
64012: LD_VAR 0 6
64016: PUSH
64017: LD_VAR 0 3
64021: ARRAY
64022: UNION
64023: ST_TO_ADDR
64024: GO 63999
64026: POP
64027: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
64028: LD_ADDR_VAR 0 2
64032: PUSH
64033: LD_VAR 0 2
64037: PPUSH
64038: LD_INT 1
64040: PPUSH
64041: LD_VAR 0 4
64045: PUSH
64046: LD_VAR 0 5
64050: DIFF
64051: PPUSH
64052: CALL_OW 1
64056: ST_TO_ADDR
// exit ;
64057: GO 64059
// end ; end ;
64059: LD_VAR 0 2
64063: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
64064: LD_INT 0
64066: PPUSH
64067: PPUSH
64068: PPUSH
// if not mc_bases then
64069: LD_EXP 45
64073: NOT
64074: IFFALSE 64078
// exit ;
64076: GO 64184
// for i = 1 to mc_bases do
64078: LD_ADDR_VAR 0 2
64082: PUSH
64083: DOUBLE
64084: LD_INT 1
64086: DEC
64087: ST_TO_ADDR
64088: LD_EXP 45
64092: PUSH
64093: FOR_TO
64094: IFFALSE 64175
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
64096: LD_ADDR_VAR 0 3
64100: PUSH
64101: LD_EXP 45
64105: PUSH
64106: LD_VAR 0 2
64110: ARRAY
64111: PPUSH
64112: LD_INT 21
64114: PUSH
64115: LD_INT 3
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 3
64124: PUSH
64125: LD_INT 24
64127: PUSH
64128: LD_INT 1000
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PPUSH
64143: CALL_OW 72
64147: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
64148: LD_ADDR_EXP 46
64152: PUSH
64153: LD_EXP 46
64157: PPUSH
64158: LD_VAR 0 2
64162: PPUSH
64163: LD_VAR 0 3
64167: PPUSH
64168: CALL_OW 1
64172: ST_TO_ADDR
// end ;
64173: GO 64093
64175: POP
64176: POP
// RaiseSailEvent ( 101 ) ;
64177: LD_INT 101
64179: PPUSH
64180: CALL_OW 427
// end ;
64184: LD_VAR 0 1
64188: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
64189: LD_INT 0
64191: PPUSH
64192: PPUSH
64193: PPUSH
64194: PPUSH
64195: PPUSH
64196: PPUSH
64197: PPUSH
// if not mc_bases then
64198: LD_EXP 45
64202: NOT
64203: IFFALSE 64207
// exit ;
64205: GO 64769
// for i = 1 to mc_bases do
64207: LD_ADDR_VAR 0 2
64211: PUSH
64212: DOUBLE
64213: LD_INT 1
64215: DEC
64216: ST_TO_ADDR
64217: LD_EXP 45
64221: PUSH
64222: FOR_TO
64223: IFFALSE 64760
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
64225: LD_ADDR_VAR 0 5
64229: PUSH
64230: LD_EXP 45
64234: PUSH
64235: LD_VAR 0 2
64239: ARRAY
64240: PUSH
64241: LD_EXP 74
64245: PUSH
64246: LD_VAR 0 2
64250: ARRAY
64251: UNION
64252: PPUSH
64253: LD_INT 21
64255: PUSH
64256: LD_INT 1
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: LD_INT 1
64265: PUSH
64266: LD_INT 3
64268: PUSH
64269: LD_INT 54
64271: PUSH
64272: EMPTY
64273: LIST
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 3
64281: PUSH
64282: LD_INT 24
64284: PUSH
64285: LD_INT 800
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: LIST
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PPUSH
64305: CALL_OW 72
64309: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
64310: LD_ADDR_VAR 0 6
64314: PUSH
64315: LD_EXP 45
64319: PUSH
64320: LD_VAR 0 2
64324: ARRAY
64325: PPUSH
64326: LD_INT 21
64328: PUSH
64329: LD_INT 1
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 1
64338: PUSH
64339: LD_INT 3
64341: PUSH
64342: LD_INT 54
64344: PUSH
64345: EMPTY
64346: LIST
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: LD_INT 3
64354: PUSH
64355: LD_INT 24
64357: PUSH
64358: LD_INT 250
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: LIST
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PPUSH
64378: CALL_OW 72
64382: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
64383: LD_ADDR_VAR 0 7
64387: PUSH
64388: LD_VAR 0 5
64392: PUSH
64393: LD_VAR 0 6
64397: DIFF
64398: ST_TO_ADDR
// if not need_heal_1 then
64399: LD_VAR 0 6
64403: NOT
64404: IFFALSE 64437
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
64406: LD_ADDR_EXP 48
64410: PUSH
64411: LD_EXP 48
64415: PPUSH
64416: LD_VAR 0 2
64420: PUSH
64421: LD_INT 1
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PPUSH
64428: EMPTY
64429: PPUSH
64430: CALL 24301 0 3
64434: ST_TO_ADDR
64435: GO 64507
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
64437: LD_ADDR_EXP 48
64441: PUSH
64442: LD_EXP 48
64446: PPUSH
64447: LD_VAR 0 2
64451: PUSH
64452: LD_INT 1
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PPUSH
64459: LD_EXP 48
64463: PUSH
64464: LD_VAR 0 2
64468: ARRAY
64469: PUSH
64470: LD_INT 1
64472: ARRAY
64473: PPUSH
64474: LD_INT 3
64476: PUSH
64477: LD_INT 24
64479: PUSH
64480: LD_INT 1000
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PPUSH
64491: CALL_OW 72
64495: PUSH
64496: LD_VAR 0 6
64500: UNION
64501: PPUSH
64502: CALL 24301 0 3
64506: ST_TO_ADDR
// if not need_heal_2 then
64507: LD_VAR 0 7
64511: NOT
64512: IFFALSE 64545
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
64514: LD_ADDR_EXP 48
64518: PUSH
64519: LD_EXP 48
64523: PPUSH
64524: LD_VAR 0 2
64528: PUSH
64529: LD_INT 2
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PPUSH
64536: EMPTY
64537: PPUSH
64538: CALL 24301 0 3
64542: ST_TO_ADDR
64543: GO 64577
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
64545: LD_ADDR_EXP 48
64549: PUSH
64550: LD_EXP 48
64554: PPUSH
64555: LD_VAR 0 2
64559: PUSH
64560: LD_INT 2
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PPUSH
64567: LD_VAR 0 7
64571: PPUSH
64572: CALL 24301 0 3
64576: ST_TO_ADDR
// if need_heal_2 then
64577: LD_VAR 0 7
64581: IFFALSE 64742
// for j in need_heal_2 do
64583: LD_ADDR_VAR 0 3
64587: PUSH
64588: LD_VAR 0 7
64592: PUSH
64593: FOR_IN
64594: IFFALSE 64740
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
64596: LD_ADDR_VAR 0 5
64600: PUSH
64601: LD_EXP 45
64605: PUSH
64606: LD_VAR 0 2
64610: ARRAY
64611: PPUSH
64612: LD_INT 2
64614: PUSH
64615: LD_INT 30
64617: PUSH
64618: LD_INT 6
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 30
64627: PUSH
64628: LD_INT 7
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 30
64637: PUSH
64638: LD_INT 8
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 30
64647: PUSH
64648: LD_INT 0
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 30
64657: PUSH
64658: LD_INT 1
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: PPUSH
64673: CALL_OW 72
64677: ST_TO_ADDR
// if tmp then
64678: LD_VAR 0 5
64682: IFFALSE 64738
// begin k := NearestUnitToUnit ( tmp , j ) ;
64684: LD_ADDR_VAR 0 4
64688: PUSH
64689: LD_VAR 0 5
64693: PPUSH
64694: LD_VAR 0 3
64698: PPUSH
64699: CALL_OW 74
64703: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
64704: LD_VAR 0 3
64708: PPUSH
64709: LD_VAR 0 4
64713: PPUSH
64714: CALL_OW 296
64718: PUSH
64719: LD_INT 5
64721: GREATER
64722: IFFALSE 64738
// ComMoveUnit ( j , k ) ;
64724: LD_VAR 0 3
64728: PPUSH
64729: LD_VAR 0 4
64733: PPUSH
64734: CALL_OW 112
// end ; end ;
64738: GO 64593
64740: POP
64741: POP
// if not need_heal_1 and not need_heal_2 then
64742: LD_VAR 0 6
64746: NOT
64747: PUSH
64748: LD_VAR 0 7
64752: NOT
64753: AND
64754: IFFALSE 64758
// continue ;
64756: GO 64222
// end ;
64758: GO 64222
64760: POP
64761: POP
// RaiseSailEvent ( 102 ) ;
64762: LD_INT 102
64764: PPUSH
64765: CALL_OW 427
// end ;
64769: LD_VAR 0 1
64773: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
64774: LD_INT 0
64776: PPUSH
64777: PPUSH
64778: PPUSH
64779: PPUSH
64780: PPUSH
64781: PPUSH
64782: PPUSH
64783: PPUSH
// if not mc_bases then
64784: LD_EXP 45
64788: NOT
64789: IFFALSE 64793
// exit ;
64791: GO 65628
// for i = 1 to mc_bases do
64793: LD_ADDR_VAR 0 2
64797: PUSH
64798: DOUBLE
64799: LD_INT 1
64801: DEC
64802: ST_TO_ADDR
64803: LD_EXP 45
64807: PUSH
64808: FOR_TO
64809: IFFALSE 65626
// begin if not mc_building_need_repair [ i ] then
64811: LD_EXP 46
64815: PUSH
64816: LD_VAR 0 2
64820: ARRAY
64821: NOT
64822: IFFALSE 64996
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
64824: LD_ADDR_VAR 0 6
64828: PUSH
64829: LD_EXP 64
64833: PUSH
64834: LD_VAR 0 2
64838: ARRAY
64839: PPUSH
64840: LD_INT 3
64842: PUSH
64843: LD_INT 24
64845: PUSH
64846: LD_INT 1000
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: LD_INT 2
64859: PUSH
64860: LD_INT 34
64862: PUSH
64863: LD_INT 13
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 34
64872: PUSH
64873: LD_INT 52
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: LIST
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PPUSH
64889: CALL_OW 72
64893: ST_TO_ADDR
// if cranes then
64894: LD_VAR 0 6
64898: IFFALSE 64960
// for j in cranes do
64900: LD_ADDR_VAR 0 3
64904: PUSH
64905: LD_VAR 0 6
64909: PUSH
64910: FOR_IN
64911: IFFALSE 64958
// if not IsInArea ( j , mc_parking [ i ] ) then
64913: LD_VAR 0 3
64917: PPUSH
64918: LD_EXP 69
64922: PUSH
64923: LD_VAR 0 2
64927: ARRAY
64928: PPUSH
64929: CALL_OW 308
64933: NOT
64934: IFFALSE 64956
// ComMoveToArea ( j , mc_parking [ i ] ) ;
64936: LD_VAR 0 3
64940: PPUSH
64941: LD_EXP 69
64945: PUSH
64946: LD_VAR 0 2
64950: ARRAY
64951: PPUSH
64952: CALL_OW 113
64956: GO 64910
64958: POP
64959: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
64960: LD_ADDR_EXP 47
64964: PUSH
64965: LD_EXP 47
64969: PPUSH
64970: LD_VAR 0 2
64974: PPUSH
64975: EMPTY
64976: PPUSH
64977: CALL_OW 1
64981: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
64982: LD_VAR 0 2
64986: PPUSH
64987: LD_INT 101
64989: PPUSH
64990: CALL 59897 0 2
// continue ;
64994: GO 64808
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
64996: LD_ADDR_EXP 51
65000: PUSH
65001: LD_EXP 51
65005: PPUSH
65006: LD_VAR 0 2
65010: PPUSH
65011: EMPTY
65012: PPUSH
65013: CALL_OW 1
65017: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
65018: LD_VAR 0 2
65022: PPUSH
65023: LD_INT 103
65025: PPUSH
65026: CALL 59897 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
65030: LD_ADDR_VAR 0 5
65034: PUSH
65035: LD_EXP 45
65039: PUSH
65040: LD_VAR 0 2
65044: ARRAY
65045: PUSH
65046: LD_EXP 74
65050: PUSH
65051: LD_VAR 0 2
65055: ARRAY
65056: UNION
65057: PPUSH
65058: LD_INT 2
65060: PUSH
65061: LD_INT 25
65063: PUSH
65064: LD_INT 2
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 25
65073: PUSH
65074: LD_INT 16
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: LIST
65085: PUSH
65086: EMPTY
65087: LIST
65088: PPUSH
65089: CALL_OW 72
65093: PUSH
65094: LD_EXP 48
65098: PUSH
65099: LD_VAR 0 2
65103: ARRAY
65104: PUSH
65105: LD_INT 1
65107: ARRAY
65108: PUSH
65109: LD_EXP 48
65113: PUSH
65114: LD_VAR 0 2
65118: ARRAY
65119: PUSH
65120: LD_INT 2
65122: ARRAY
65123: UNION
65124: DIFF
65125: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
65126: LD_ADDR_VAR 0 6
65130: PUSH
65131: LD_EXP 64
65135: PUSH
65136: LD_VAR 0 2
65140: ARRAY
65141: PPUSH
65142: LD_INT 2
65144: PUSH
65145: LD_INT 34
65147: PUSH
65148: LD_INT 13
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 34
65157: PUSH
65158: LD_INT 52
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: LIST
65169: PPUSH
65170: CALL_OW 72
65174: ST_TO_ADDR
// if cranes then
65175: LD_VAR 0 6
65179: IFFALSE 65315
// begin for j in cranes do
65181: LD_ADDR_VAR 0 3
65185: PUSH
65186: LD_VAR 0 6
65190: PUSH
65191: FOR_IN
65192: IFFALSE 65313
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
65194: LD_VAR 0 3
65198: PPUSH
65199: CALL_OW 256
65203: PUSH
65204: LD_INT 500
65206: GREATEREQUAL
65207: PUSH
65208: LD_VAR 0 3
65212: PPUSH
65213: CALL_OW 314
65217: NOT
65218: AND
65219: IFFALSE 65253
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
65221: LD_VAR 0 3
65225: PPUSH
65226: LD_EXP 46
65230: PUSH
65231: LD_VAR 0 2
65235: ARRAY
65236: PPUSH
65237: LD_VAR 0 3
65241: PPUSH
65242: CALL_OW 74
65246: PPUSH
65247: CALL_OW 130
65251: GO 65311
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
65253: LD_VAR 0 3
65257: PPUSH
65258: CALL_OW 256
65262: PUSH
65263: LD_INT 500
65265: LESS
65266: PUSH
65267: LD_VAR 0 3
65271: PPUSH
65272: LD_EXP 69
65276: PUSH
65277: LD_VAR 0 2
65281: ARRAY
65282: PPUSH
65283: CALL_OW 308
65287: NOT
65288: AND
65289: IFFALSE 65311
// ComMoveToArea ( j , mc_parking [ i ] ) ;
65291: LD_VAR 0 3
65295: PPUSH
65296: LD_EXP 69
65300: PUSH
65301: LD_VAR 0 2
65305: ARRAY
65306: PPUSH
65307: CALL_OW 113
65311: GO 65191
65313: POP
65314: POP
// end ; if tmp > 3 then
65315: LD_VAR 0 5
65319: PUSH
65320: LD_INT 3
65322: GREATER
65323: IFFALSE 65343
// tmp := ShrinkArray ( tmp , 4 ) ;
65325: LD_ADDR_VAR 0 5
65329: PUSH
65330: LD_VAR 0 5
65334: PPUSH
65335: LD_INT 4
65337: PPUSH
65338: CALL 55527 0 2
65342: ST_TO_ADDR
// if not tmp then
65343: LD_VAR 0 5
65347: NOT
65348: IFFALSE 65352
// continue ;
65350: GO 64808
// for j in tmp do
65352: LD_ADDR_VAR 0 3
65356: PUSH
65357: LD_VAR 0 5
65361: PUSH
65362: FOR_IN
65363: IFFALSE 65622
// begin if IsInUnit ( j ) then
65365: LD_VAR 0 3
65369: PPUSH
65370: CALL_OW 310
65374: IFFALSE 65385
// ComExitBuilding ( j ) ;
65376: LD_VAR 0 3
65380: PPUSH
65381: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
65385: LD_VAR 0 3
65389: PUSH
65390: LD_EXP 47
65394: PUSH
65395: LD_VAR 0 2
65399: ARRAY
65400: IN
65401: NOT
65402: IFFALSE 65460
// begin SetTag ( j , 101 ) ;
65404: LD_VAR 0 3
65408: PPUSH
65409: LD_INT 101
65411: PPUSH
65412: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
65416: LD_ADDR_EXP 47
65420: PUSH
65421: LD_EXP 47
65425: PPUSH
65426: LD_VAR 0 2
65430: PUSH
65431: LD_EXP 47
65435: PUSH
65436: LD_VAR 0 2
65440: ARRAY
65441: PUSH
65442: LD_INT 1
65444: PLUS
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PPUSH
65450: LD_VAR 0 3
65454: PPUSH
65455: CALL 24301 0 3
65459: ST_TO_ADDR
// end ; wait ( 1 ) ;
65460: LD_INT 1
65462: PPUSH
65463: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
65467: LD_ADDR_VAR 0 7
65471: PUSH
65472: LD_EXP 46
65476: PUSH
65477: LD_VAR 0 2
65481: ARRAY
65482: ST_TO_ADDR
// if mc_scan [ i ] then
65483: LD_EXP 68
65487: PUSH
65488: LD_VAR 0 2
65492: ARRAY
65493: IFFALSE 65555
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
65495: LD_ADDR_VAR 0 7
65499: PUSH
65500: LD_EXP 46
65504: PUSH
65505: LD_VAR 0 2
65509: ARRAY
65510: PPUSH
65511: LD_INT 3
65513: PUSH
65514: LD_INT 30
65516: PUSH
65517: LD_INT 32
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 30
65526: PUSH
65527: LD_INT 33
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 30
65536: PUSH
65537: LD_INT 31
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: PPUSH
65550: CALL_OW 72
65554: ST_TO_ADDR
// if not to_repair_tmp then
65555: LD_VAR 0 7
65559: NOT
65560: IFFALSE 65564
// continue ;
65562: GO 65362
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
65564: LD_ADDR_VAR 0 8
65568: PUSH
65569: LD_VAR 0 7
65573: PPUSH
65574: LD_VAR 0 3
65578: PPUSH
65579: CALL_OW 74
65583: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 5 then
65584: LD_VAR 0 8
65588: PPUSH
65589: LD_INT 16
65591: PPUSH
65592: CALL 26894 0 2
65596: PUSH
65597: LD_INT 4
65599: ARRAY
65600: PUSH
65601: LD_INT 5
65603: LESS
65604: IFFALSE 65620
// ComRepairBuilding ( j , to_repair ) ;
65606: LD_VAR 0 3
65610: PPUSH
65611: LD_VAR 0 8
65615: PPUSH
65616: CALL_OW 130
// end ;
65620: GO 65362
65622: POP
65623: POP
// end ;
65624: GO 64808
65626: POP
65627: POP
// end ;
65628: LD_VAR 0 1
65632: RET
// export function MC_Heal ; var i , j , tmp ; begin
65633: LD_INT 0
65635: PPUSH
65636: PPUSH
65637: PPUSH
65638: PPUSH
// if not mc_bases then
65639: LD_EXP 45
65643: NOT
65644: IFFALSE 65648
// exit ;
65646: GO 66050
// for i = 1 to mc_bases do
65648: LD_ADDR_VAR 0 2
65652: PUSH
65653: DOUBLE
65654: LD_INT 1
65656: DEC
65657: ST_TO_ADDR
65658: LD_EXP 45
65662: PUSH
65663: FOR_TO
65664: IFFALSE 66048
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
65666: LD_EXP 48
65670: PUSH
65671: LD_VAR 0 2
65675: ARRAY
65676: PUSH
65677: LD_INT 1
65679: ARRAY
65680: NOT
65681: PUSH
65682: LD_EXP 48
65686: PUSH
65687: LD_VAR 0 2
65691: ARRAY
65692: PUSH
65693: LD_INT 2
65695: ARRAY
65696: NOT
65697: AND
65698: IFFALSE 65736
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
65700: LD_ADDR_EXP 49
65704: PUSH
65705: LD_EXP 49
65709: PPUSH
65710: LD_VAR 0 2
65714: PPUSH
65715: EMPTY
65716: PPUSH
65717: CALL_OW 1
65721: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
65722: LD_VAR 0 2
65726: PPUSH
65727: LD_INT 102
65729: PPUSH
65730: CALL 59897 0 2
// continue ;
65734: GO 65663
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
65736: LD_ADDR_VAR 0 4
65740: PUSH
65741: LD_EXP 45
65745: PUSH
65746: LD_VAR 0 2
65750: ARRAY
65751: PPUSH
65752: LD_INT 25
65754: PUSH
65755: LD_INT 4
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PPUSH
65762: CALL_OW 72
65766: ST_TO_ADDR
// if not tmp then
65767: LD_VAR 0 4
65771: NOT
65772: IFFALSE 65776
// continue ;
65774: GO 65663
// if mc_taming [ i ] then
65776: LD_EXP 76
65780: PUSH
65781: LD_VAR 0 2
65785: ARRAY
65786: IFFALSE 65810
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
65788: LD_ADDR_EXP 76
65792: PUSH
65793: LD_EXP 76
65797: PPUSH
65798: LD_VAR 0 2
65802: PPUSH
65803: EMPTY
65804: PPUSH
65805: CALL_OW 1
65809: ST_TO_ADDR
// for j in tmp do
65810: LD_ADDR_VAR 0 3
65814: PUSH
65815: LD_VAR 0 4
65819: PUSH
65820: FOR_IN
65821: IFFALSE 66044
// begin if IsInUnit ( j ) then
65823: LD_VAR 0 3
65827: PPUSH
65828: CALL_OW 310
65832: IFFALSE 65843
// ComExitBuilding ( j ) ;
65834: LD_VAR 0 3
65838: PPUSH
65839: CALL_OW 122
// if not j in mc_healers [ i ] then
65843: LD_VAR 0 3
65847: PUSH
65848: LD_EXP 49
65852: PUSH
65853: LD_VAR 0 2
65857: ARRAY
65858: IN
65859: NOT
65860: IFFALSE 65906
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
65862: LD_ADDR_EXP 49
65866: PUSH
65867: LD_EXP 49
65871: PPUSH
65872: LD_VAR 0 2
65876: PUSH
65877: LD_EXP 49
65881: PUSH
65882: LD_VAR 0 2
65886: ARRAY
65887: PUSH
65888: LD_INT 1
65890: PLUS
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PPUSH
65896: LD_VAR 0 3
65900: PPUSH
65901: CALL 24301 0 3
65905: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
65906: LD_VAR 0 3
65910: PPUSH
65911: CALL_OW 110
65915: PUSH
65916: LD_INT 102
65918: NONEQUAL
65919: IFFALSE 65933
// SetTag ( j , 102 ) ;
65921: LD_VAR 0 3
65925: PPUSH
65926: LD_INT 102
65928: PPUSH
65929: CALL_OW 109
// Wait ( 3 ) ;
65933: LD_INT 3
65935: PPUSH
65936: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
65940: LD_EXP 48
65944: PUSH
65945: LD_VAR 0 2
65949: ARRAY
65950: PUSH
65951: LD_INT 1
65953: ARRAY
65954: IFFALSE 65986
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
65956: LD_VAR 0 3
65960: PPUSH
65961: LD_EXP 48
65965: PUSH
65966: LD_VAR 0 2
65970: ARRAY
65971: PUSH
65972: LD_INT 1
65974: ARRAY
65975: PUSH
65976: LD_INT 1
65978: ARRAY
65979: PPUSH
65980: CALL_OW 128
65984: GO 66042
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
65986: LD_VAR 0 3
65990: PPUSH
65991: CALL_OW 314
65995: NOT
65996: PUSH
65997: LD_EXP 48
66001: PUSH
66002: LD_VAR 0 2
66006: ARRAY
66007: PUSH
66008: LD_INT 2
66010: ARRAY
66011: AND
66012: IFFALSE 66042
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
66014: LD_VAR 0 3
66018: PPUSH
66019: LD_EXP 48
66023: PUSH
66024: LD_VAR 0 2
66028: ARRAY
66029: PUSH
66030: LD_INT 2
66032: ARRAY
66033: PUSH
66034: LD_INT 1
66036: ARRAY
66037: PPUSH
66038: CALL_OW 128
// end ;
66042: GO 65820
66044: POP
66045: POP
// end ;
66046: GO 65663
66048: POP
66049: POP
// end ;
66050: LD_VAR 0 1
66054: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
66055: LD_INT 0
66057: PPUSH
66058: PPUSH
66059: PPUSH
66060: PPUSH
66061: PPUSH
// if not mc_bases then
66062: LD_EXP 45
66066: NOT
66067: IFFALSE 66071
// exit ;
66069: GO 67214
// for i = 1 to mc_bases do
66071: LD_ADDR_VAR 0 2
66075: PUSH
66076: DOUBLE
66077: LD_INT 1
66079: DEC
66080: ST_TO_ADDR
66081: LD_EXP 45
66085: PUSH
66086: FOR_TO
66087: IFFALSE 67212
// begin if mc_scan [ i ] then
66089: LD_EXP 68
66093: PUSH
66094: LD_VAR 0 2
66098: ARRAY
66099: IFFALSE 66103
// continue ;
66101: GO 66086
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
66103: LD_EXP 50
66107: PUSH
66108: LD_VAR 0 2
66112: ARRAY
66113: NOT
66114: PUSH
66115: LD_EXP 52
66119: PUSH
66120: LD_VAR 0 2
66124: ARRAY
66125: NOT
66126: AND
66127: PUSH
66128: LD_EXP 51
66132: PUSH
66133: LD_VAR 0 2
66137: ARRAY
66138: AND
66139: IFFALSE 66177
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
66141: LD_ADDR_EXP 51
66145: PUSH
66146: LD_EXP 51
66150: PPUSH
66151: LD_VAR 0 2
66155: PPUSH
66156: EMPTY
66157: PPUSH
66158: CALL_OW 1
66162: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
66163: LD_VAR 0 2
66167: PPUSH
66168: LD_INT 103
66170: PPUSH
66171: CALL 59897 0 2
// continue ;
66175: GO 66086
// end ; if mc_construct_list [ i ] then
66177: LD_EXP 52
66181: PUSH
66182: LD_VAR 0 2
66186: ARRAY
66187: IFFALSE 66407
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
66189: LD_ADDR_VAR 0 4
66193: PUSH
66194: LD_EXP 45
66198: PUSH
66199: LD_VAR 0 2
66203: ARRAY
66204: PPUSH
66205: LD_INT 25
66207: PUSH
66208: LD_INT 2
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PPUSH
66215: CALL_OW 72
66219: PUSH
66220: LD_EXP 47
66224: PUSH
66225: LD_VAR 0 2
66229: ARRAY
66230: DIFF
66231: ST_TO_ADDR
// if not tmp then
66232: LD_VAR 0 4
66236: NOT
66237: IFFALSE 66241
// continue ;
66239: GO 66086
// for j in tmp do
66241: LD_ADDR_VAR 0 3
66245: PUSH
66246: LD_VAR 0 4
66250: PUSH
66251: FOR_IN
66252: IFFALSE 66403
// begin if not mc_builders [ i ] then
66254: LD_EXP 51
66258: PUSH
66259: LD_VAR 0 2
66263: ARRAY
66264: NOT
66265: IFFALSE 66323
// begin SetTag ( j , 103 ) ;
66267: LD_VAR 0 3
66271: PPUSH
66272: LD_INT 103
66274: PPUSH
66275: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
66279: LD_ADDR_EXP 51
66283: PUSH
66284: LD_EXP 51
66288: PPUSH
66289: LD_VAR 0 2
66293: PUSH
66294: LD_EXP 51
66298: PUSH
66299: LD_VAR 0 2
66303: ARRAY
66304: PUSH
66305: LD_INT 1
66307: PLUS
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PPUSH
66313: LD_VAR 0 3
66317: PPUSH
66318: CALL 24301 0 3
66322: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
66323: LD_VAR 0 3
66327: PPUSH
66328: CALL_OW 310
66332: IFFALSE 66343
// ComExitBuilding ( j ) ;
66334: LD_VAR 0 3
66338: PPUSH
66339: CALL_OW 122
// wait ( 3 ) ;
66343: LD_INT 3
66345: PPUSH
66346: CALL_OW 67
// if not mc_construct_list [ i ] then
66350: LD_EXP 52
66354: PUSH
66355: LD_VAR 0 2
66359: ARRAY
66360: NOT
66361: IFFALSE 66365
// break ;
66363: GO 66403
// if not HasTask ( j ) then
66365: LD_VAR 0 3
66369: PPUSH
66370: CALL_OW 314
66374: NOT
66375: IFFALSE 66401
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
66377: LD_VAR 0 3
66381: PPUSH
66382: LD_EXP 52
66386: PUSH
66387: LD_VAR 0 2
66391: ARRAY
66392: PUSH
66393: LD_INT 1
66395: ARRAY
66396: PPUSH
66397: CALL 27152 0 2
// end ;
66401: GO 66251
66403: POP
66404: POP
// end else
66405: GO 67210
// if mc_build_list [ i ] then
66407: LD_EXP 50
66411: PUSH
66412: LD_VAR 0 2
66416: ARRAY
66417: IFFALSE 67210
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
66419: LD_ADDR_VAR 0 5
66423: PUSH
66424: LD_EXP 45
66428: PUSH
66429: LD_VAR 0 2
66433: ARRAY
66434: PPUSH
66435: LD_INT 2
66437: PUSH
66438: LD_INT 30
66440: PUSH
66441: LD_INT 0
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: LD_INT 30
66450: PUSH
66451: LD_INT 1
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: LIST
66462: PPUSH
66463: CALL_OW 72
66467: ST_TO_ADDR
// if depot then
66468: LD_VAR 0 5
66472: IFFALSE 66490
// depot := depot [ 1 ] else
66474: LD_ADDR_VAR 0 5
66478: PUSH
66479: LD_VAR 0 5
66483: PUSH
66484: LD_INT 1
66486: ARRAY
66487: ST_TO_ADDR
66488: GO 66498
// depot := 0 ;
66490: LD_ADDR_VAR 0 5
66494: PUSH
66495: LD_INT 0
66497: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
66498: LD_EXP 50
66502: PUSH
66503: LD_VAR 0 2
66507: ARRAY
66508: PUSH
66509: LD_INT 1
66511: ARRAY
66512: PUSH
66513: LD_INT 1
66515: ARRAY
66516: PPUSH
66517: CALL 26982 0 1
66521: PUSH
66522: LD_EXP 45
66526: PUSH
66527: LD_VAR 0 2
66531: ARRAY
66532: PPUSH
66533: LD_INT 2
66535: PUSH
66536: LD_INT 30
66538: PUSH
66539: LD_INT 2
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: LD_INT 30
66548: PUSH
66549: LD_INT 3
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: LIST
66560: PPUSH
66561: CALL_OW 72
66565: NOT
66566: AND
66567: IFFALSE 66672
// begin for j = 1 to mc_build_list [ i ] do
66569: LD_ADDR_VAR 0 3
66573: PUSH
66574: DOUBLE
66575: LD_INT 1
66577: DEC
66578: ST_TO_ADDR
66579: LD_EXP 50
66583: PUSH
66584: LD_VAR 0 2
66588: ARRAY
66589: PUSH
66590: FOR_TO
66591: IFFALSE 66670
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
66593: LD_EXP 50
66597: PUSH
66598: LD_VAR 0 2
66602: ARRAY
66603: PUSH
66604: LD_VAR 0 3
66608: ARRAY
66609: PUSH
66610: LD_INT 1
66612: ARRAY
66613: PUSH
66614: LD_INT 2
66616: EQUAL
66617: IFFALSE 66668
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
66619: LD_ADDR_EXP 50
66623: PUSH
66624: LD_EXP 50
66628: PPUSH
66629: LD_VAR 0 2
66633: PPUSH
66634: LD_EXP 50
66638: PUSH
66639: LD_VAR 0 2
66643: ARRAY
66644: PPUSH
66645: LD_VAR 0 3
66649: PPUSH
66650: LD_INT 1
66652: PPUSH
66653: LD_INT 0
66655: PPUSH
66656: CALL 23719 0 4
66660: PPUSH
66661: CALL_OW 1
66665: ST_TO_ADDR
// break ;
66666: GO 66670
// end ;
66668: GO 66590
66670: POP
66671: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
66672: LD_EXP 50
66676: PUSH
66677: LD_VAR 0 2
66681: ARRAY
66682: PUSH
66683: LD_INT 1
66685: ARRAY
66686: PUSH
66687: LD_INT 1
66689: ARRAY
66690: PUSH
66691: LD_INT 0
66693: EQUAL
66694: PUSH
66695: LD_VAR 0 5
66699: PUSH
66700: LD_VAR 0 5
66704: PPUSH
66705: LD_EXP 50
66709: PUSH
66710: LD_VAR 0 2
66714: ARRAY
66715: PUSH
66716: LD_INT 1
66718: ARRAY
66719: PUSH
66720: LD_INT 1
66722: ARRAY
66723: PPUSH
66724: LD_EXP 50
66728: PUSH
66729: LD_VAR 0 2
66733: ARRAY
66734: PUSH
66735: LD_INT 1
66737: ARRAY
66738: PUSH
66739: LD_INT 2
66741: ARRAY
66742: PPUSH
66743: LD_EXP 50
66747: PUSH
66748: LD_VAR 0 2
66752: ARRAY
66753: PUSH
66754: LD_INT 1
66756: ARRAY
66757: PUSH
66758: LD_INT 3
66760: ARRAY
66761: PPUSH
66762: LD_EXP 50
66766: PUSH
66767: LD_VAR 0 2
66771: ARRAY
66772: PUSH
66773: LD_INT 1
66775: ARRAY
66776: PUSH
66777: LD_INT 4
66779: ARRAY
66780: PPUSH
66781: CALL 31716 0 5
66785: AND
66786: OR
66787: IFFALSE 67068
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
66789: LD_ADDR_VAR 0 4
66793: PUSH
66794: LD_EXP 45
66798: PUSH
66799: LD_VAR 0 2
66803: ARRAY
66804: PPUSH
66805: LD_INT 25
66807: PUSH
66808: LD_INT 2
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: PPUSH
66815: CALL_OW 72
66819: PUSH
66820: LD_EXP 47
66824: PUSH
66825: LD_VAR 0 2
66829: ARRAY
66830: DIFF
66831: ST_TO_ADDR
// if not tmp then
66832: LD_VAR 0 4
66836: NOT
66837: IFFALSE 66841
// continue ;
66839: GO 66086
// for j in tmp do
66841: LD_ADDR_VAR 0 3
66845: PUSH
66846: LD_VAR 0 4
66850: PUSH
66851: FOR_IN
66852: IFFALSE 67064
// begin if not mc_builders [ i ] then
66854: LD_EXP 51
66858: PUSH
66859: LD_VAR 0 2
66863: ARRAY
66864: NOT
66865: IFFALSE 66923
// begin SetTag ( j , 103 ) ;
66867: LD_VAR 0 3
66871: PPUSH
66872: LD_INT 103
66874: PPUSH
66875: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
66879: LD_ADDR_EXP 51
66883: PUSH
66884: LD_EXP 51
66888: PPUSH
66889: LD_VAR 0 2
66893: PUSH
66894: LD_EXP 51
66898: PUSH
66899: LD_VAR 0 2
66903: ARRAY
66904: PUSH
66905: LD_INT 1
66907: PLUS
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PPUSH
66913: LD_VAR 0 3
66917: PPUSH
66918: CALL 24301 0 3
66922: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
66923: LD_VAR 0 3
66927: PPUSH
66928: CALL_OW 310
66932: IFFALSE 66943
// ComExitBuilding ( j ) ;
66934: LD_VAR 0 3
66938: PPUSH
66939: CALL_OW 122
// wait ( 3 ) ;
66943: LD_INT 3
66945: PPUSH
66946: CALL_OW 67
// if not mc_build_list [ i ] then
66950: LD_EXP 50
66954: PUSH
66955: LD_VAR 0 2
66959: ARRAY
66960: NOT
66961: IFFALSE 66965
// break ;
66963: GO 67064
// if not HasTask ( j ) then
66965: LD_VAR 0 3
66969: PPUSH
66970: CALL_OW 314
66974: NOT
66975: IFFALSE 67062
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
66977: LD_VAR 0 3
66981: PPUSH
66982: LD_EXP 50
66986: PUSH
66987: LD_VAR 0 2
66991: ARRAY
66992: PUSH
66993: LD_INT 1
66995: ARRAY
66996: PUSH
66997: LD_INT 1
66999: ARRAY
67000: PPUSH
67001: LD_EXP 50
67005: PUSH
67006: LD_VAR 0 2
67010: ARRAY
67011: PUSH
67012: LD_INT 1
67014: ARRAY
67015: PUSH
67016: LD_INT 2
67018: ARRAY
67019: PPUSH
67020: LD_EXP 50
67024: PUSH
67025: LD_VAR 0 2
67029: ARRAY
67030: PUSH
67031: LD_INT 1
67033: ARRAY
67034: PUSH
67035: LD_INT 3
67037: ARRAY
67038: PPUSH
67039: LD_EXP 50
67043: PUSH
67044: LD_VAR 0 2
67048: ARRAY
67049: PUSH
67050: LD_INT 1
67052: ARRAY
67053: PUSH
67054: LD_INT 4
67056: ARRAY
67057: PPUSH
67058: CALL_OW 145
// end ;
67062: GO 66851
67064: POP
67065: POP
// end else
67066: GO 67210
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
67068: LD_EXP 45
67072: PUSH
67073: LD_VAR 0 2
67077: ARRAY
67078: PPUSH
67079: LD_EXP 50
67083: PUSH
67084: LD_VAR 0 2
67088: ARRAY
67089: PUSH
67090: LD_INT 1
67092: ARRAY
67093: PUSH
67094: LD_INT 1
67096: ARRAY
67097: PPUSH
67098: LD_EXP 50
67102: PUSH
67103: LD_VAR 0 2
67107: ARRAY
67108: PUSH
67109: LD_INT 1
67111: ARRAY
67112: PUSH
67113: LD_INT 2
67115: ARRAY
67116: PPUSH
67117: LD_EXP 50
67121: PUSH
67122: LD_VAR 0 2
67126: ARRAY
67127: PUSH
67128: LD_INT 1
67130: ARRAY
67131: PUSH
67132: LD_INT 3
67134: ARRAY
67135: PPUSH
67136: LD_EXP 50
67140: PUSH
67141: LD_VAR 0 2
67145: ARRAY
67146: PUSH
67147: LD_INT 1
67149: ARRAY
67150: PUSH
67151: LD_INT 4
67153: ARRAY
67154: PPUSH
67155: CALL 31052 0 5
67159: NOT
67160: IFFALSE 67210
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
67162: LD_ADDR_EXP 50
67166: PUSH
67167: LD_EXP 50
67171: PPUSH
67172: LD_VAR 0 2
67176: PPUSH
67177: LD_EXP 50
67181: PUSH
67182: LD_VAR 0 2
67186: ARRAY
67187: PPUSH
67188: LD_INT 1
67190: PPUSH
67191: LD_INT 1
67193: NEG
67194: PPUSH
67195: LD_INT 0
67197: PPUSH
67198: CALL 23719 0 4
67202: PPUSH
67203: CALL_OW 1
67207: ST_TO_ADDR
// continue ;
67208: GO 66086
// end ; end ; end ;
67210: GO 66086
67212: POP
67213: POP
// end ;
67214: LD_VAR 0 1
67218: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
67219: LD_INT 0
67221: PPUSH
67222: PPUSH
67223: PPUSH
67224: PPUSH
67225: PPUSH
67226: PPUSH
// if not mc_bases then
67227: LD_EXP 45
67231: NOT
67232: IFFALSE 67236
// exit ;
67234: GO 67663
// for i = 1 to mc_bases do
67236: LD_ADDR_VAR 0 2
67240: PUSH
67241: DOUBLE
67242: LD_INT 1
67244: DEC
67245: ST_TO_ADDR
67246: LD_EXP 45
67250: PUSH
67251: FOR_TO
67252: IFFALSE 67661
// begin tmp := mc_build_upgrade [ i ] ;
67254: LD_ADDR_VAR 0 4
67258: PUSH
67259: LD_EXP 77
67263: PUSH
67264: LD_VAR 0 2
67268: ARRAY
67269: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
67270: LD_ADDR_VAR 0 6
67274: PUSH
67275: LD_EXP 78
67279: PUSH
67280: LD_VAR 0 2
67284: ARRAY
67285: PPUSH
67286: LD_INT 2
67288: PUSH
67289: LD_INT 30
67291: PUSH
67292: LD_INT 6
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 30
67301: PUSH
67302: LD_INT 7
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: LIST
67313: PPUSH
67314: CALL_OW 72
67318: ST_TO_ADDR
// if not tmp and not lab then
67319: LD_VAR 0 4
67323: NOT
67324: PUSH
67325: LD_VAR 0 6
67329: NOT
67330: AND
67331: IFFALSE 67335
// continue ;
67333: GO 67251
// if tmp then
67335: LD_VAR 0 4
67339: IFFALSE 67459
// for j in tmp do
67341: LD_ADDR_VAR 0 3
67345: PUSH
67346: LD_VAR 0 4
67350: PUSH
67351: FOR_IN
67352: IFFALSE 67457
// begin if UpgradeCost ( j ) then
67354: LD_VAR 0 3
67358: PPUSH
67359: CALL 30712 0 1
67363: IFFALSE 67455
// begin ComUpgrade ( j ) ;
67365: LD_VAR 0 3
67369: PPUSH
67370: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
67374: LD_ADDR_EXP 77
67378: PUSH
67379: LD_EXP 77
67383: PPUSH
67384: LD_VAR 0 2
67388: PPUSH
67389: LD_EXP 77
67393: PUSH
67394: LD_VAR 0 2
67398: ARRAY
67399: PUSH
67400: LD_VAR 0 3
67404: DIFF
67405: PPUSH
67406: CALL_OW 1
67410: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
67411: LD_ADDR_EXP 52
67415: PUSH
67416: LD_EXP 52
67420: PPUSH
67421: LD_VAR 0 2
67425: PUSH
67426: LD_EXP 52
67430: PUSH
67431: LD_VAR 0 2
67435: ARRAY
67436: PUSH
67437: LD_INT 1
67439: PLUS
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PPUSH
67445: LD_VAR 0 3
67449: PPUSH
67450: CALL 24301 0 3
67454: ST_TO_ADDR
// end ; end ;
67455: GO 67351
67457: POP
67458: POP
// if not lab or not mc_lab_upgrade [ i ] then
67459: LD_VAR 0 6
67463: NOT
67464: PUSH
67465: LD_EXP 79
67469: PUSH
67470: LD_VAR 0 2
67474: ARRAY
67475: NOT
67476: OR
67477: IFFALSE 67481
// continue ;
67479: GO 67251
// for j in lab do
67481: LD_ADDR_VAR 0 3
67485: PUSH
67486: LD_VAR 0 6
67490: PUSH
67491: FOR_IN
67492: IFFALSE 67657
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
67494: LD_VAR 0 3
67498: PPUSH
67499: CALL_OW 266
67503: PUSH
67504: LD_INT 6
67506: PUSH
67507: LD_INT 7
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: IN
67514: PUSH
67515: LD_VAR 0 3
67519: PPUSH
67520: CALL_OW 461
67524: PUSH
67525: LD_INT 1
67527: NONEQUAL
67528: AND
67529: IFFALSE 67655
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
67531: LD_VAR 0 3
67535: PPUSH
67536: LD_EXP 79
67540: PUSH
67541: LD_VAR 0 2
67545: ARRAY
67546: PUSH
67547: LD_INT 1
67549: ARRAY
67550: PPUSH
67551: CALL 30917 0 2
67555: IFFALSE 67655
// begin ComCancel ( j ) ;
67557: LD_VAR 0 3
67561: PPUSH
67562: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
67566: LD_VAR 0 3
67570: PPUSH
67571: LD_EXP 79
67575: PUSH
67576: LD_VAR 0 2
67580: ARRAY
67581: PUSH
67582: LD_INT 1
67584: ARRAY
67585: PPUSH
67586: CALL_OW 207
// if not j in mc_construct_list [ i ] then
67590: LD_VAR 0 3
67594: PUSH
67595: LD_EXP 52
67599: PUSH
67600: LD_VAR 0 2
67604: ARRAY
67605: IN
67606: NOT
67607: IFFALSE 67653
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
67609: LD_ADDR_EXP 52
67613: PUSH
67614: LD_EXP 52
67618: PPUSH
67619: LD_VAR 0 2
67623: PUSH
67624: LD_EXP 52
67628: PUSH
67629: LD_VAR 0 2
67633: ARRAY
67634: PUSH
67635: LD_INT 1
67637: PLUS
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PPUSH
67643: LD_VAR 0 3
67647: PPUSH
67648: CALL 24301 0 3
67652: ST_TO_ADDR
// break ;
67653: GO 67657
// end ; end ; end ;
67655: GO 67491
67657: POP
67658: POP
// end ;
67659: GO 67251
67661: POP
67662: POP
// end ;
67663: LD_VAR 0 1
67667: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
67668: LD_INT 0
67670: PPUSH
67671: PPUSH
67672: PPUSH
67673: PPUSH
67674: PPUSH
67675: PPUSH
67676: PPUSH
67677: PPUSH
67678: PPUSH
// if not mc_bases then
67679: LD_EXP 45
67683: NOT
67684: IFFALSE 67688
// exit ;
67686: GO 68093
// for i = 1 to mc_bases do
67688: LD_ADDR_VAR 0 2
67692: PUSH
67693: DOUBLE
67694: LD_INT 1
67696: DEC
67697: ST_TO_ADDR
67698: LD_EXP 45
67702: PUSH
67703: FOR_TO
67704: IFFALSE 68091
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
67706: LD_EXP 53
67710: PUSH
67711: LD_VAR 0 2
67715: ARRAY
67716: NOT
67717: PUSH
67718: LD_EXP 45
67722: PUSH
67723: LD_VAR 0 2
67727: ARRAY
67728: PPUSH
67729: LD_INT 30
67731: PUSH
67732: LD_INT 3
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PPUSH
67739: CALL_OW 72
67743: NOT
67744: OR
67745: IFFALSE 67749
// continue ;
67747: GO 67703
// busy := false ;
67749: LD_ADDR_VAR 0 8
67753: PUSH
67754: LD_INT 0
67756: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
67757: LD_ADDR_VAR 0 4
67761: PUSH
67762: LD_EXP 45
67766: PUSH
67767: LD_VAR 0 2
67771: ARRAY
67772: PPUSH
67773: LD_INT 30
67775: PUSH
67776: LD_INT 3
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PPUSH
67783: CALL_OW 72
67787: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
67788: LD_ADDR_VAR 0 6
67792: PUSH
67793: LD_EXP 53
67797: PUSH
67798: LD_VAR 0 2
67802: ARRAY
67803: PPUSH
67804: LD_INT 2
67806: PUSH
67807: LD_INT 30
67809: PUSH
67810: LD_INT 32
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: LD_INT 30
67819: PUSH
67820: LD_INT 33
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: LIST
67831: PPUSH
67832: CALL_OW 72
67836: ST_TO_ADDR
// if not t then
67837: LD_VAR 0 6
67841: NOT
67842: IFFALSE 67846
// continue ;
67844: GO 67703
// for j in tmp do
67846: LD_ADDR_VAR 0 3
67850: PUSH
67851: LD_VAR 0 4
67855: PUSH
67856: FOR_IN
67857: IFFALSE 67887
// if not BuildingStatus ( j ) = bs_idle then
67859: LD_VAR 0 3
67863: PPUSH
67864: CALL_OW 461
67868: PUSH
67869: LD_INT 2
67871: EQUAL
67872: NOT
67873: IFFALSE 67885
// begin busy := true ;
67875: LD_ADDR_VAR 0 8
67879: PUSH
67880: LD_INT 1
67882: ST_TO_ADDR
// break ;
67883: GO 67887
// end ;
67885: GO 67856
67887: POP
67888: POP
// if busy then
67889: LD_VAR 0 8
67893: IFFALSE 67897
// continue ;
67895: GO 67703
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
67897: LD_ADDR_VAR 0 7
67901: PUSH
67902: LD_VAR 0 6
67906: PPUSH
67907: LD_INT 35
67909: PUSH
67910: LD_INT 0
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PPUSH
67917: CALL_OW 72
67921: ST_TO_ADDR
// if tw then
67922: LD_VAR 0 7
67926: IFFALSE 68003
// begin tw := tw [ 1 ] ;
67928: LD_ADDR_VAR 0 7
67932: PUSH
67933: LD_VAR 0 7
67937: PUSH
67938: LD_INT 1
67940: ARRAY
67941: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
67942: LD_ADDR_VAR 0 9
67946: PUSH
67947: LD_VAR 0 7
67951: PPUSH
67952: LD_EXP 70
67956: PUSH
67957: LD_VAR 0 2
67961: ARRAY
67962: PPUSH
67963: CALL 29271 0 2
67967: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
67968: LD_EXP 84
67972: PUSH
67973: LD_VAR 0 2
67977: ARRAY
67978: IFFALSE 68001
// if not weapon in mc_allowed_tower_weapons [ i ] then
67980: LD_VAR 0 9
67984: PUSH
67985: LD_EXP 84
67989: PUSH
67990: LD_VAR 0 2
67994: ARRAY
67995: IN
67996: NOT
67997: IFFALSE 68001
// continue ;
67999: GO 67703
// end else
68001: GO 68066
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
68003: LD_ADDR_VAR 0 5
68007: PUSH
68008: LD_EXP 53
68012: PUSH
68013: LD_VAR 0 2
68017: ARRAY
68018: PPUSH
68019: LD_VAR 0 4
68023: PPUSH
68024: CALL 54773 0 2
68028: ST_TO_ADDR
// if not tmp2 then
68029: LD_VAR 0 5
68033: NOT
68034: IFFALSE 68038
// continue ;
68036: GO 67703
// tw := tmp2 [ 1 ] ;
68038: LD_ADDR_VAR 0 7
68042: PUSH
68043: LD_VAR 0 5
68047: PUSH
68048: LD_INT 1
68050: ARRAY
68051: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
68052: LD_ADDR_VAR 0 9
68056: PUSH
68057: LD_VAR 0 5
68061: PUSH
68062: LD_INT 2
68064: ARRAY
68065: ST_TO_ADDR
// end ; if not weapon then
68066: LD_VAR 0 9
68070: NOT
68071: IFFALSE 68075
// continue ;
68073: GO 67703
// ComPlaceWeapon ( tw , weapon ) ;
68075: LD_VAR 0 7
68079: PPUSH
68080: LD_VAR 0 9
68084: PPUSH
68085: CALL_OW 148
// end ;
68089: GO 67703
68091: POP
68092: POP
// end ;
68093: LD_VAR 0 1
68097: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
68098: LD_INT 0
68100: PPUSH
68101: PPUSH
68102: PPUSH
68103: PPUSH
68104: PPUSH
68105: PPUSH
// if not mc_bases then
68106: LD_EXP 45
68110: NOT
68111: IFFALSE 68115
// exit ;
68113: GO 68891
// for i = 1 to mc_bases do
68115: LD_ADDR_VAR 0 2
68119: PUSH
68120: DOUBLE
68121: LD_INT 1
68123: DEC
68124: ST_TO_ADDR
68125: LD_EXP 45
68129: PUSH
68130: FOR_TO
68131: IFFALSE 68889
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
68133: LD_EXP 58
68137: PUSH
68138: LD_VAR 0 2
68142: ARRAY
68143: NOT
68144: PUSH
68145: LD_EXP 58
68149: PUSH
68150: LD_VAR 0 2
68154: ARRAY
68155: PUSH
68156: LD_EXP 59
68160: PUSH
68161: LD_VAR 0 2
68165: ARRAY
68166: EQUAL
68167: OR
68168: PUSH
68169: LD_EXP 68
68173: PUSH
68174: LD_VAR 0 2
68178: ARRAY
68179: OR
68180: IFFALSE 68184
// continue ;
68182: GO 68130
// if mc_miners [ i ] then
68184: LD_EXP 59
68188: PUSH
68189: LD_VAR 0 2
68193: ARRAY
68194: IFFALSE 68576
// begin for j = mc_miners [ i ] downto 1 do
68196: LD_ADDR_VAR 0 3
68200: PUSH
68201: DOUBLE
68202: LD_EXP 59
68206: PUSH
68207: LD_VAR 0 2
68211: ARRAY
68212: INC
68213: ST_TO_ADDR
68214: LD_INT 1
68216: PUSH
68217: FOR_DOWNTO
68218: IFFALSE 68574
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
68220: LD_EXP 59
68224: PUSH
68225: LD_VAR 0 2
68229: ARRAY
68230: PUSH
68231: LD_VAR 0 3
68235: ARRAY
68236: PPUSH
68237: CALL_OW 301
68241: PUSH
68242: LD_EXP 59
68246: PUSH
68247: LD_VAR 0 2
68251: ARRAY
68252: PUSH
68253: LD_VAR 0 3
68257: ARRAY
68258: PPUSH
68259: CALL_OW 257
68263: PUSH
68264: LD_INT 1
68266: NONEQUAL
68267: OR
68268: IFFALSE 68331
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
68270: LD_ADDR_VAR 0 5
68274: PUSH
68275: LD_EXP 59
68279: PUSH
68280: LD_VAR 0 2
68284: ARRAY
68285: PUSH
68286: LD_EXP 59
68290: PUSH
68291: LD_VAR 0 2
68295: ARRAY
68296: PUSH
68297: LD_VAR 0 3
68301: ARRAY
68302: DIFF
68303: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
68304: LD_ADDR_EXP 59
68308: PUSH
68309: LD_EXP 59
68313: PPUSH
68314: LD_VAR 0 2
68318: PPUSH
68319: LD_VAR 0 5
68323: PPUSH
68324: CALL_OW 1
68328: ST_TO_ADDR
// continue ;
68329: GO 68217
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
68331: LD_EXP 59
68335: PUSH
68336: LD_VAR 0 2
68340: ARRAY
68341: PUSH
68342: LD_VAR 0 3
68346: ARRAY
68347: PPUSH
68348: CALL_OW 257
68352: PUSH
68353: LD_INT 1
68355: EQUAL
68356: PUSH
68357: LD_EXP 59
68361: PUSH
68362: LD_VAR 0 2
68366: ARRAY
68367: PUSH
68368: LD_VAR 0 3
68372: ARRAY
68373: PPUSH
68374: CALL_OW 459
68378: NOT
68379: AND
68380: PUSH
68381: LD_EXP 59
68385: PUSH
68386: LD_VAR 0 2
68390: ARRAY
68391: PUSH
68392: LD_VAR 0 3
68396: ARRAY
68397: PPUSH
68398: CALL_OW 314
68402: NOT
68403: AND
68404: IFFALSE 68572
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
68406: LD_EXP 59
68410: PUSH
68411: LD_VAR 0 2
68415: ARRAY
68416: PUSH
68417: LD_VAR 0 3
68421: ARRAY
68422: PPUSH
68423: CALL_OW 310
68427: IFFALSE 68450
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
68429: LD_EXP 59
68433: PUSH
68434: LD_VAR 0 2
68438: ARRAY
68439: PUSH
68440: LD_VAR 0 3
68444: ARRAY
68445: PPUSH
68446: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
68450: LD_EXP 59
68454: PUSH
68455: LD_VAR 0 2
68459: ARRAY
68460: PUSH
68461: LD_VAR 0 3
68465: ARRAY
68466: PPUSH
68467: CALL_OW 314
68471: NOT
68472: IFFALSE 68572
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
68474: LD_EXP 59
68478: PUSH
68479: LD_VAR 0 2
68483: ARRAY
68484: PUSH
68485: LD_VAR 0 3
68489: ARRAY
68490: PPUSH
68491: LD_EXP 58
68495: PUSH
68496: LD_VAR 0 2
68500: ARRAY
68501: PUSH
68502: LD_VAR 0 3
68506: PUSH
68507: LD_EXP 58
68511: PUSH
68512: LD_VAR 0 2
68516: ARRAY
68517: MOD
68518: PUSH
68519: LD_INT 1
68521: PLUS
68522: ARRAY
68523: PUSH
68524: LD_INT 1
68526: ARRAY
68527: PPUSH
68528: LD_EXP 58
68532: PUSH
68533: LD_VAR 0 2
68537: ARRAY
68538: PUSH
68539: LD_VAR 0 3
68543: PUSH
68544: LD_EXP 58
68548: PUSH
68549: LD_VAR 0 2
68553: ARRAY
68554: MOD
68555: PUSH
68556: LD_INT 1
68558: PLUS
68559: ARRAY
68560: PUSH
68561: LD_INT 2
68563: ARRAY
68564: PPUSH
68565: LD_INT 0
68567: PPUSH
68568: CALL_OW 193
// end ; end ;
68572: GO 68217
68574: POP
68575: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
68576: LD_ADDR_VAR 0 5
68580: PUSH
68581: LD_EXP 45
68585: PUSH
68586: LD_VAR 0 2
68590: ARRAY
68591: PPUSH
68592: LD_INT 2
68594: PUSH
68595: LD_INT 30
68597: PUSH
68598: LD_INT 4
68600: PUSH
68601: EMPTY
68602: LIST
68603: LIST
68604: PUSH
68605: LD_INT 30
68607: PUSH
68608: LD_INT 5
68610: PUSH
68611: EMPTY
68612: LIST
68613: LIST
68614: PUSH
68615: LD_INT 30
68617: PUSH
68618: LD_INT 32
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: LIST
68629: LIST
68630: PPUSH
68631: CALL_OW 72
68635: ST_TO_ADDR
// if not tmp then
68636: LD_VAR 0 5
68640: NOT
68641: IFFALSE 68645
// continue ;
68643: GO 68130
// list := [ ] ;
68645: LD_ADDR_VAR 0 6
68649: PUSH
68650: EMPTY
68651: ST_TO_ADDR
// for j in tmp do
68652: LD_ADDR_VAR 0 3
68656: PUSH
68657: LD_VAR 0 5
68661: PUSH
68662: FOR_IN
68663: IFFALSE 68732
// begin for k in UnitsInside ( j ) do
68665: LD_ADDR_VAR 0 4
68669: PUSH
68670: LD_VAR 0 3
68674: PPUSH
68675: CALL_OW 313
68679: PUSH
68680: FOR_IN
68681: IFFALSE 68728
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
68683: LD_VAR 0 4
68687: PPUSH
68688: CALL_OW 257
68692: PUSH
68693: LD_INT 1
68695: EQUAL
68696: PUSH
68697: LD_VAR 0 4
68701: PPUSH
68702: CALL_OW 459
68706: NOT
68707: AND
68708: IFFALSE 68726
// list := list ^ k ;
68710: LD_ADDR_VAR 0 6
68714: PUSH
68715: LD_VAR 0 6
68719: PUSH
68720: LD_VAR 0 4
68724: ADD
68725: ST_TO_ADDR
68726: GO 68680
68728: POP
68729: POP
// end ;
68730: GO 68662
68732: POP
68733: POP
// list := list diff mc_miners [ i ] ;
68734: LD_ADDR_VAR 0 6
68738: PUSH
68739: LD_VAR 0 6
68743: PUSH
68744: LD_EXP 59
68748: PUSH
68749: LD_VAR 0 2
68753: ARRAY
68754: DIFF
68755: ST_TO_ADDR
// if not list then
68756: LD_VAR 0 6
68760: NOT
68761: IFFALSE 68765
// continue ;
68763: GO 68130
// k := mc_mines [ i ] - mc_miners [ i ] ;
68765: LD_ADDR_VAR 0 4
68769: PUSH
68770: LD_EXP 58
68774: PUSH
68775: LD_VAR 0 2
68779: ARRAY
68780: PUSH
68781: LD_EXP 59
68785: PUSH
68786: LD_VAR 0 2
68790: ARRAY
68791: MINUS
68792: ST_TO_ADDR
// if k > list then
68793: LD_VAR 0 4
68797: PUSH
68798: LD_VAR 0 6
68802: GREATER
68803: IFFALSE 68815
// k := list ;
68805: LD_ADDR_VAR 0 4
68809: PUSH
68810: LD_VAR 0 6
68814: ST_TO_ADDR
// for j = 1 to k do
68815: LD_ADDR_VAR 0 3
68819: PUSH
68820: DOUBLE
68821: LD_INT 1
68823: DEC
68824: ST_TO_ADDR
68825: LD_VAR 0 4
68829: PUSH
68830: FOR_TO
68831: IFFALSE 68885
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
68833: LD_ADDR_EXP 59
68837: PUSH
68838: LD_EXP 59
68842: PPUSH
68843: LD_VAR 0 2
68847: PUSH
68848: LD_EXP 59
68852: PUSH
68853: LD_VAR 0 2
68857: ARRAY
68858: PUSH
68859: LD_INT 1
68861: PLUS
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: PPUSH
68867: LD_VAR 0 6
68871: PUSH
68872: LD_VAR 0 3
68876: ARRAY
68877: PPUSH
68878: CALL 24301 0 3
68882: ST_TO_ADDR
68883: GO 68830
68885: POP
68886: POP
// end ;
68887: GO 68130
68889: POP
68890: POP
// end ;
68891: LD_VAR 0 1
68895: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
68896: LD_INT 0
68898: PPUSH
68899: PPUSH
68900: PPUSH
68901: PPUSH
68902: PPUSH
68903: PPUSH
68904: PPUSH
68905: PPUSH
68906: PPUSH
68907: PPUSH
// if not mc_bases then
68908: LD_EXP 45
68912: NOT
68913: IFFALSE 68917
// exit ;
68915: GO 70667
// for i = 1 to mc_bases do
68917: LD_ADDR_VAR 0 2
68921: PUSH
68922: DOUBLE
68923: LD_INT 1
68925: DEC
68926: ST_TO_ADDR
68927: LD_EXP 45
68931: PUSH
68932: FOR_TO
68933: IFFALSE 70665
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
68935: LD_EXP 45
68939: PUSH
68940: LD_VAR 0 2
68944: ARRAY
68945: NOT
68946: PUSH
68947: LD_EXP 52
68951: PUSH
68952: LD_VAR 0 2
68956: ARRAY
68957: OR
68958: IFFALSE 68962
// continue ;
68960: GO 68932
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
68962: LD_EXP 61
68966: PUSH
68967: LD_VAR 0 2
68971: ARRAY
68972: NOT
68973: PUSH
68974: LD_EXP 62
68978: PUSH
68979: LD_VAR 0 2
68983: ARRAY
68984: AND
68985: IFFALSE 69023
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
68987: LD_ADDR_EXP 62
68991: PUSH
68992: LD_EXP 62
68996: PPUSH
68997: LD_VAR 0 2
69001: PPUSH
69002: EMPTY
69003: PPUSH
69004: CALL_OW 1
69008: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
69009: LD_VAR 0 2
69013: PPUSH
69014: LD_INT 107
69016: PPUSH
69017: CALL 59897 0 2
// continue ;
69021: GO 68932
// end ; target := [ ] ;
69023: LD_ADDR_VAR 0 6
69027: PUSH
69028: EMPTY
69029: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
69030: LD_ADDR_VAR 0 3
69034: PUSH
69035: DOUBLE
69036: LD_EXP 61
69040: PUSH
69041: LD_VAR 0 2
69045: ARRAY
69046: INC
69047: ST_TO_ADDR
69048: LD_INT 1
69050: PUSH
69051: FOR_DOWNTO
69052: IFFALSE 69312
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
69054: LD_EXP 61
69058: PUSH
69059: LD_VAR 0 2
69063: ARRAY
69064: PUSH
69065: LD_VAR 0 3
69069: ARRAY
69070: PUSH
69071: LD_INT 2
69073: ARRAY
69074: PPUSH
69075: LD_EXP 61
69079: PUSH
69080: LD_VAR 0 2
69084: ARRAY
69085: PUSH
69086: LD_VAR 0 3
69090: ARRAY
69091: PUSH
69092: LD_INT 3
69094: ARRAY
69095: PPUSH
69096: CALL_OW 488
69100: PUSH
69101: LD_EXP 61
69105: PUSH
69106: LD_VAR 0 2
69110: ARRAY
69111: PUSH
69112: LD_VAR 0 3
69116: ARRAY
69117: PUSH
69118: LD_INT 2
69120: ARRAY
69121: PPUSH
69122: LD_EXP 61
69126: PUSH
69127: LD_VAR 0 2
69131: ARRAY
69132: PUSH
69133: LD_VAR 0 3
69137: ARRAY
69138: PUSH
69139: LD_INT 3
69141: ARRAY
69142: PPUSH
69143: CALL_OW 284
69147: PUSH
69148: LD_INT 0
69150: EQUAL
69151: AND
69152: IFFALSE 69207
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
69154: LD_ADDR_VAR 0 5
69158: PUSH
69159: LD_EXP 61
69163: PUSH
69164: LD_VAR 0 2
69168: ARRAY
69169: PPUSH
69170: LD_VAR 0 3
69174: PPUSH
69175: CALL_OW 3
69179: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
69180: LD_ADDR_EXP 61
69184: PUSH
69185: LD_EXP 61
69189: PPUSH
69190: LD_VAR 0 2
69194: PPUSH
69195: LD_VAR 0 5
69199: PPUSH
69200: CALL_OW 1
69204: ST_TO_ADDR
// continue ;
69205: GO 69051
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
69207: LD_EXP 45
69211: PUSH
69212: LD_VAR 0 2
69216: ARRAY
69217: PUSH
69218: LD_INT 1
69220: ARRAY
69221: PPUSH
69222: CALL_OW 255
69226: PPUSH
69227: LD_EXP 61
69231: PUSH
69232: LD_VAR 0 2
69236: ARRAY
69237: PUSH
69238: LD_VAR 0 3
69242: ARRAY
69243: PUSH
69244: LD_INT 2
69246: ARRAY
69247: PPUSH
69248: LD_EXP 61
69252: PUSH
69253: LD_VAR 0 2
69257: ARRAY
69258: PUSH
69259: LD_VAR 0 3
69263: ARRAY
69264: PUSH
69265: LD_INT 3
69267: ARRAY
69268: PPUSH
69269: LD_INT 30
69271: PPUSH
69272: CALL 25197 0 4
69276: PUSH
69277: LD_INT 4
69279: ARRAY
69280: PUSH
69281: LD_INT 0
69283: EQUAL
69284: IFFALSE 69310
// begin target := mc_crates [ i ] [ j ] ;
69286: LD_ADDR_VAR 0 6
69290: PUSH
69291: LD_EXP 61
69295: PUSH
69296: LD_VAR 0 2
69300: ARRAY
69301: PUSH
69302: LD_VAR 0 3
69306: ARRAY
69307: ST_TO_ADDR
// break ;
69308: GO 69312
// end ; end ;
69310: GO 69051
69312: POP
69313: POP
// if not target then
69314: LD_VAR 0 6
69318: NOT
69319: IFFALSE 69323
// continue ;
69321: GO 68932
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
69323: LD_ADDR_VAR 0 7
69327: PUSH
69328: LD_EXP 64
69332: PUSH
69333: LD_VAR 0 2
69337: ARRAY
69338: PPUSH
69339: LD_INT 2
69341: PUSH
69342: LD_INT 3
69344: PUSH
69345: LD_INT 58
69347: PUSH
69348: EMPTY
69349: LIST
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: PUSH
69355: LD_INT 61
69357: PUSH
69358: EMPTY
69359: LIST
69360: PUSH
69361: LD_INT 33
69363: PUSH
69364: LD_INT 5
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 33
69373: PUSH
69374: LD_INT 3
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: PUSH
69381: EMPTY
69382: LIST
69383: LIST
69384: LIST
69385: LIST
69386: LIST
69387: PUSH
69388: LD_INT 2
69390: PUSH
69391: LD_INT 34
69393: PUSH
69394: LD_INT 32
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 34
69403: PUSH
69404: LD_INT 51
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: PUSH
69411: LD_INT 34
69413: PUSH
69414: LD_INT 12
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: PUSH
69421: EMPTY
69422: LIST
69423: LIST
69424: LIST
69425: LIST
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: PPUSH
69431: CALL_OW 72
69435: ST_TO_ADDR
// if not cargo then
69436: LD_VAR 0 7
69440: NOT
69441: IFFALSE 70084
// begin if mc_crates_collector [ i ] < 5 then
69443: LD_EXP 62
69447: PUSH
69448: LD_VAR 0 2
69452: ARRAY
69453: PUSH
69454: LD_INT 5
69456: LESS
69457: IFFALSE 69823
// begin if mc_ape [ i ] then
69459: LD_EXP 74
69463: PUSH
69464: LD_VAR 0 2
69468: ARRAY
69469: IFFALSE 69516
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
69471: LD_ADDR_VAR 0 5
69475: PUSH
69476: LD_EXP 74
69480: PUSH
69481: LD_VAR 0 2
69485: ARRAY
69486: PPUSH
69487: LD_INT 25
69489: PUSH
69490: LD_INT 16
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 24
69499: PUSH
69500: LD_INT 750
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: PUSH
69507: EMPTY
69508: LIST
69509: LIST
69510: PPUSH
69511: CALL_OW 72
69515: ST_TO_ADDR
// if not tmp then
69516: LD_VAR 0 5
69520: NOT
69521: IFFALSE 69568
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
69523: LD_ADDR_VAR 0 5
69527: PUSH
69528: LD_EXP 45
69532: PUSH
69533: LD_VAR 0 2
69537: ARRAY
69538: PPUSH
69539: LD_INT 25
69541: PUSH
69542: LD_INT 2
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: LD_INT 24
69551: PUSH
69552: LD_INT 750
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: PPUSH
69563: CALL_OW 72
69567: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
69568: LD_EXP 74
69572: PUSH
69573: LD_VAR 0 2
69577: ARRAY
69578: PUSH
69579: LD_EXP 45
69583: PUSH
69584: LD_VAR 0 2
69588: ARRAY
69589: PPUSH
69590: LD_INT 25
69592: PUSH
69593: LD_INT 2
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: LD_INT 24
69602: PUSH
69603: LD_INT 750
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PUSH
69610: EMPTY
69611: LIST
69612: LIST
69613: PPUSH
69614: CALL_OW 72
69618: AND
69619: PUSH
69620: LD_VAR 0 5
69624: PUSH
69625: LD_INT 5
69627: LESS
69628: AND
69629: IFFALSE 69711
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
69631: LD_ADDR_VAR 0 3
69635: PUSH
69636: LD_EXP 45
69640: PUSH
69641: LD_VAR 0 2
69645: ARRAY
69646: PPUSH
69647: LD_INT 25
69649: PUSH
69650: LD_INT 2
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: PUSH
69657: LD_INT 24
69659: PUSH
69660: LD_INT 750
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PUSH
69667: EMPTY
69668: LIST
69669: LIST
69670: PPUSH
69671: CALL_OW 72
69675: PUSH
69676: FOR_IN
69677: IFFALSE 69709
// begin tmp := tmp union j ;
69679: LD_ADDR_VAR 0 5
69683: PUSH
69684: LD_VAR 0 5
69688: PUSH
69689: LD_VAR 0 3
69693: UNION
69694: ST_TO_ADDR
// if tmp >= 5 then
69695: LD_VAR 0 5
69699: PUSH
69700: LD_INT 5
69702: GREATEREQUAL
69703: IFFALSE 69707
// break ;
69705: GO 69709
// end ;
69707: GO 69676
69709: POP
69710: POP
// end ; if not tmp then
69711: LD_VAR 0 5
69715: NOT
69716: IFFALSE 69720
// continue ;
69718: GO 68932
// for j in tmp do
69720: LD_ADDR_VAR 0 3
69724: PUSH
69725: LD_VAR 0 5
69729: PUSH
69730: FOR_IN
69731: IFFALSE 69821
// if not GetTag ( j ) then
69733: LD_VAR 0 3
69737: PPUSH
69738: CALL_OW 110
69742: NOT
69743: IFFALSE 69819
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
69745: LD_ADDR_EXP 62
69749: PUSH
69750: LD_EXP 62
69754: PPUSH
69755: LD_VAR 0 2
69759: PUSH
69760: LD_EXP 62
69764: PUSH
69765: LD_VAR 0 2
69769: ARRAY
69770: PUSH
69771: LD_INT 1
69773: PLUS
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: PPUSH
69779: LD_VAR 0 3
69783: PPUSH
69784: CALL 24301 0 3
69788: ST_TO_ADDR
// SetTag ( j , 107 ) ;
69789: LD_VAR 0 3
69793: PPUSH
69794: LD_INT 107
69796: PPUSH
69797: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
69801: LD_EXP 62
69805: PUSH
69806: LD_VAR 0 2
69810: ARRAY
69811: PUSH
69812: LD_INT 5
69814: GREATEREQUAL
69815: IFFALSE 69819
// break ;
69817: GO 69821
// end ;
69819: GO 69730
69821: POP
69822: POP
// end ; if mc_crates_collector [ i ] and target then
69823: LD_EXP 62
69827: PUSH
69828: LD_VAR 0 2
69832: ARRAY
69833: PUSH
69834: LD_VAR 0 6
69838: AND
69839: IFFALSE 70082
// begin if mc_crates_collector [ i ] < target [ 1 ] then
69841: LD_EXP 62
69845: PUSH
69846: LD_VAR 0 2
69850: ARRAY
69851: PUSH
69852: LD_VAR 0 6
69856: PUSH
69857: LD_INT 1
69859: ARRAY
69860: LESS
69861: IFFALSE 69881
// tmp := mc_crates_collector [ i ] else
69863: LD_ADDR_VAR 0 5
69867: PUSH
69868: LD_EXP 62
69872: PUSH
69873: LD_VAR 0 2
69877: ARRAY
69878: ST_TO_ADDR
69879: GO 69895
// tmp := target [ 1 ] ;
69881: LD_ADDR_VAR 0 5
69885: PUSH
69886: LD_VAR 0 6
69890: PUSH
69891: LD_INT 1
69893: ARRAY
69894: ST_TO_ADDR
// k := 0 ;
69895: LD_ADDR_VAR 0 4
69899: PUSH
69900: LD_INT 0
69902: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
69903: LD_ADDR_VAR 0 3
69907: PUSH
69908: LD_EXP 62
69912: PUSH
69913: LD_VAR 0 2
69917: ARRAY
69918: PUSH
69919: FOR_IN
69920: IFFALSE 70080
// begin k := k + 1 ;
69922: LD_ADDR_VAR 0 4
69926: PUSH
69927: LD_VAR 0 4
69931: PUSH
69932: LD_INT 1
69934: PLUS
69935: ST_TO_ADDR
// if k > tmp then
69936: LD_VAR 0 4
69940: PUSH
69941: LD_VAR 0 5
69945: GREATER
69946: IFFALSE 69950
// break ;
69948: GO 70080
// if not GetClass ( j ) in [ 2 , 16 ] then
69950: LD_VAR 0 3
69954: PPUSH
69955: CALL_OW 257
69959: PUSH
69960: LD_INT 2
69962: PUSH
69963: LD_INT 16
69965: PUSH
69966: EMPTY
69967: LIST
69968: LIST
69969: IN
69970: NOT
69971: IFFALSE 70024
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
69973: LD_ADDR_EXP 62
69977: PUSH
69978: LD_EXP 62
69982: PPUSH
69983: LD_VAR 0 2
69987: PPUSH
69988: LD_EXP 62
69992: PUSH
69993: LD_VAR 0 2
69997: ARRAY
69998: PUSH
69999: LD_VAR 0 3
70003: DIFF
70004: PPUSH
70005: CALL_OW 1
70009: ST_TO_ADDR
// SetTag ( j , 0 ) ;
70010: LD_VAR 0 3
70014: PPUSH
70015: LD_INT 0
70017: PPUSH
70018: CALL_OW 109
// continue ;
70022: GO 69919
// end ; if IsInUnit ( j ) then
70024: LD_VAR 0 3
70028: PPUSH
70029: CALL_OW 310
70033: IFFALSE 70044
// ComExitBuilding ( j ) ;
70035: LD_VAR 0 3
70039: PPUSH
70040: CALL_OW 122
// wait ( 3 ) ;
70044: LD_INT 3
70046: PPUSH
70047: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
70051: LD_VAR 0 3
70055: PPUSH
70056: LD_VAR 0 6
70060: PUSH
70061: LD_INT 2
70063: ARRAY
70064: PPUSH
70065: LD_VAR 0 6
70069: PUSH
70070: LD_INT 3
70072: ARRAY
70073: PPUSH
70074: CALL_OW 117
// end ;
70078: GO 69919
70080: POP
70081: POP
// end ; end else
70082: GO 70663
// begin for j in cargo do
70084: LD_ADDR_VAR 0 3
70088: PUSH
70089: LD_VAR 0 7
70093: PUSH
70094: FOR_IN
70095: IFFALSE 70661
// begin if GetTag ( j ) <> 0 then
70097: LD_VAR 0 3
70101: PPUSH
70102: CALL_OW 110
70106: PUSH
70107: LD_INT 0
70109: NONEQUAL
70110: IFFALSE 70114
// continue ;
70112: GO 70094
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
70114: LD_VAR 0 3
70118: PPUSH
70119: CALL_OW 256
70123: PUSH
70124: LD_INT 1000
70126: LESS
70127: PUSH
70128: LD_VAR 0 3
70132: PPUSH
70133: LD_EXP 69
70137: PUSH
70138: LD_VAR 0 2
70142: ARRAY
70143: PPUSH
70144: CALL_OW 308
70148: NOT
70149: AND
70150: IFFALSE 70172
// ComMoveToArea ( j , mc_parking [ i ] ) ;
70152: LD_VAR 0 3
70156: PPUSH
70157: LD_EXP 69
70161: PUSH
70162: LD_VAR 0 2
70166: ARRAY
70167: PPUSH
70168: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
70172: LD_VAR 0 3
70176: PPUSH
70177: CALL_OW 256
70181: PUSH
70182: LD_INT 1000
70184: LESS
70185: PUSH
70186: LD_VAR 0 3
70190: PPUSH
70191: LD_EXP 69
70195: PUSH
70196: LD_VAR 0 2
70200: ARRAY
70201: PPUSH
70202: CALL_OW 308
70206: AND
70207: IFFALSE 70211
// continue ;
70209: GO 70094
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
70211: LD_VAR 0 3
70215: PPUSH
70216: CALL_OW 262
70220: PUSH
70221: LD_INT 2
70223: EQUAL
70224: PUSH
70225: LD_VAR 0 3
70229: PPUSH
70230: CALL_OW 261
70234: PUSH
70235: LD_INT 15
70237: LESS
70238: AND
70239: IFFALSE 70243
// continue ;
70241: GO 70094
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
70243: LD_VAR 0 3
70247: PPUSH
70248: CALL_OW 262
70252: PUSH
70253: LD_INT 1
70255: EQUAL
70256: PUSH
70257: LD_VAR 0 3
70261: PPUSH
70262: CALL_OW 261
70266: PUSH
70267: LD_INT 10
70269: LESS
70270: AND
70271: IFFALSE 70600
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
70273: LD_ADDR_VAR 0 8
70277: PUSH
70278: LD_EXP 45
70282: PUSH
70283: LD_VAR 0 2
70287: ARRAY
70288: PPUSH
70289: LD_INT 2
70291: PUSH
70292: LD_INT 30
70294: PUSH
70295: LD_INT 0
70297: PUSH
70298: EMPTY
70299: LIST
70300: LIST
70301: PUSH
70302: LD_INT 30
70304: PUSH
70305: LD_INT 1
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: PUSH
70312: EMPTY
70313: LIST
70314: LIST
70315: LIST
70316: PPUSH
70317: CALL_OW 72
70321: ST_TO_ADDR
// if not depot then
70322: LD_VAR 0 8
70326: NOT
70327: IFFALSE 70331
// continue ;
70329: GO 70094
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
70331: LD_VAR 0 3
70335: PPUSH
70336: LD_VAR 0 8
70340: PPUSH
70341: LD_VAR 0 3
70345: PPUSH
70346: CALL_OW 74
70350: PPUSH
70351: CALL_OW 296
70355: PUSH
70356: LD_INT 6
70358: LESS
70359: IFFALSE 70375
// SetFuel ( j , 100 ) else
70361: LD_VAR 0 3
70365: PPUSH
70366: LD_INT 100
70368: PPUSH
70369: CALL_OW 240
70373: GO 70600
// if GetFuel ( j ) = 0 then
70375: LD_VAR 0 3
70379: PPUSH
70380: CALL_OW 261
70384: PUSH
70385: LD_INT 0
70387: EQUAL
70388: IFFALSE 70600
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
70390: LD_ADDR_EXP 64
70394: PUSH
70395: LD_EXP 64
70399: PPUSH
70400: LD_VAR 0 2
70404: PPUSH
70405: LD_EXP 64
70409: PUSH
70410: LD_VAR 0 2
70414: ARRAY
70415: PUSH
70416: LD_VAR 0 3
70420: DIFF
70421: PPUSH
70422: CALL_OW 1
70426: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
70427: LD_VAR 0 3
70431: PPUSH
70432: CALL_OW 263
70436: PUSH
70437: LD_INT 1
70439: EQUAL
70440: IFFALSE 70456
// ComExitVehicle ( IsInUnit ( j ) ) ;
70442: LD_VAR 0 3
70446: PPUSH
70447: CALL_OW 310
70451: PPUSH
70452: CALL_OW 121
// if GetControl ( j ) = control_remote then
70456: LD_VAR 0 3
70460: PPUSH
70461: CALL_OW 263
70465: PUSH
70466: LD_INT 2
70468: EQUAL
70469: IFFALSE 70480
// ComUnlink ( j ) ;
70471: LD_VAR 0 3
70475: PPUSH
70476: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
70480: LD_ADDR_VAR 0 9
70484: PUSH
70485: LD_VAR 0 2
70489: PPUSH
70490: LD_INT 3
70492: PPUSH
70493: CALL 79953 0 2
70497: ST_TO_ADDR
// if fac then
70498: LD_VAR 0 9
70502: IFFALSE 70598
// begin for k in fac do
70504: LD_ADDR_VAR 0 4
70508: PUSH
70509: LD_VAR 0 9
70513: PUSH
70514: FOR_IN
70515: IFFALSE 70596
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
70517: LD_ADDR_VAR 0 10
70521: PUSH
70522: LD_VAR 0 9
70526: PPUSH
70527: LD_VAR 0 3
70531: PPUSH
70532: CALL_OW 265
70536: PPUSH
70537: LD_VAR 0 3
70541: PPUSH
70542: CALL_OW 262
70546: PPUSH
70547: LD_VAR 0 3
70551: PPUSH
70552: CALL_OW 263
70556: PPUSH
70557: LD_VAR 0 3
70561: PPUSH
70562: CALL_OW 264
70566: PPUSH
70567: CALL 21833 0 5
70571: ST_TO_ADDR
// if components then
70572: LD_VAR 0 10
70576: IFFALSE 70594
// begin MC_InsertProduceList ( i , components ) ;
70578: LD_VAR 0 2
70582: PPUSH
70583: LD_VAR 0 10
70587: PPUSH
70588: CALL 79498 0 2
// break ;
70592: GO 70596
// end ; end ;
70594: GO 70514
70596: POP
70597: POP
// end ; continue ;
70598: GO 70094
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
70600: LD_VAR 0 3
70604: PPUSH
70605: LD_INT 1
70607: PPUSH
70608: CALL_OW 289
70612: PUSH
70613: LD_INT 100
70615: LESS
70616: PUSH
70617: LD_VAR 0 3
70621: PPUSH
70622: CALL_OW 314
70626: NOT
70627: AND
70628: IFFALSE 70657
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
70630: LD_VAR 0 3
70634: PPUSH
70635: LD_VAR 0 6
70639: PUSH
70640: LD_INT 2
70642: ARRAY
70643: PPUSH
70644: LD_VAR 0 6
70648: PUSH
70649: LD_INT 3
70651: ARRAY
70652: PPUSH
70653: CALL_OW 117
// break ;
70657: GO 70661
// end ;
70659: GO 70094
70661: POP
70662: POP
// end ; end ;
70663: GO 68932
70665: POP
70666: POP
// end ;
70667: LD_VAR 0 1
70671: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
70672: LD_INT 0
70674: PPUSH
70675: PPUSH
70676: PPUSH
70677: PPUSH
// if not mc_bases then
70678: LD_EXP 45
70682: NOT
70683: IFFALSE 70687
// exit ;
70685: GO 70848
// for i = 1 to mc_bases do
70687: LD_ADDR_VAR 0 2
70691: PUSH
70692: DOUBLE
70693: LD_INT 1
70695: DEC
70696: ST_TO_ADDR
70697: LD_EXP 45
70701: PUSH
70702: FOR_TO
70703: IFFALSE 70846
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
70705: LD_ADDR_VAR 0 4
70709: PUSH
70710: LD_EXP 64
70714: PUSH
70715: LD_VAR 0 2
70719: ARRAY
70720: PUSH
70721: LD_EXP 67
70725: PUSH
70726: LD_VAR 0 2
70730: ARRAY
70731: UNION
70732: PPUSH
70733: LD_INT 33
70735: PUSH
70736: LD_INT 2
70738: PUSH
70739: EMPTY
70740: LIST
70741: LIST
70742: PPUSH
70743: CALL_OW 72
70747: ST_TO_ADDR
// if tmp then
70748: LD_VAR 0 4
70752: IFFALSE 70844
// for j in tmp do
70754: LD_ADDR_VAR 0 3
70758: PUSH
70759: LD_VAR 0 4
70763: PUSH
70764: FOR_IN
70765: IFFALSE 70842
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
70767: LD_VAR 0 3
70771: PPUSH
70772: CALL_OW 312
70776: NOT
70777: PUSH
70778: LD_VAR 0 3
70782: PPUSH
70783: CALL_OW 256
70787: PUSH
70788: LD_INT 250
70790: GREATEREQUAL
70791: AND
70792: IFFALSE 70805
// Connect ( j ) else
70794: LD_VAR 0 3
70798: PPUSH
70799: CALL 27234 0 1
70803: GO 70840
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
70805: LD_VAR 0 3
70809: PPUSH
70810: CALL_OW 256
70814: PUSH
70815: LD_INT 250
70817: LESS
70818: PUSH
70819: LD_VAR 0 3
70823: PPUSH
70824: CALL_OW 312
70828: AND
70829: IFFALSE 70840
// ComUnlink ( j ) ;
70831: LD_VAR 0 3
70835: PPUSH
70836: CALL_OW 136
70840: GO 70764
70842: POP
70843: POP
// end ;
70844: GO 70702
70846: POP
70847: POP
// end ;
70848: LD_VAR 0 1
70852: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
70853: LD_INT 0
70855: PPUSH
70856: PPUSH
70857: PPUSH
70858: PPUSH
70859: PPUSH
// if not mc_bases then
70860: LD_EXP 45
70864: NOT
70865: IFFALSE 70869
// exit ;
70867: GO 71314
// for i = 1 to mc_bases do
70869: LD_ADDR_VAR 0 2
70873: PUSH
70874: DOUBLE
70875: LD_INT 1
70877: DEC
70878: ST_TO_ADDR
70879: LD_EXP 45
70883: PUSH
70884: FOR_TO
70885: IFFALSE 71312
// begin if not mc_produce [ i ] then
70887: LD_EXP 66
70891: PUSH
70892: LD_VAR 0 2
70896: ARRAY
70897: NOT
70898: IFFALSE 70902
// continue ;
70900: GO 70884
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
70902: LD_ADDR_VAR 0 5
70906: PUSH
70907: LD_EXP 45
70911: PUSH
70912: LD_VAR 0 2
70916: ARRAY
70917: PPUSH
70918: LD_INT 30
70920: PUSH
70921: LD_INT 3
70923: PUSH
70924: EMPTY
70925: LIST
70926: LIST
70927: PPUSH
70928: CALL_OW 72
70932: ST_TO_ADDR
// if not fac then
70933: LD_VAR 0 5
70937: NOT
70938: IFFALSE 70942
// continue ;
70940: GO 70884
// for j in fac do
70942: LD_ADDR_VAR 0 3
70946: PUSH
70947: LD_VAR 0 5
70951: PUSH
70952: FOR_IN
70953: IFFALSE 71308
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
70955: LD_VAR 0 3
70959: PPUSH
70960: CALL_OW 461
70964: PUSH
70965: LD_INT 2
70967: NONEQUAL
70968: PUSH
70969: LD_VAR 0 3
70973: PPUSH
70974: LD_INT 15
70976: PPUSH
70977: CALL 26894 0 2
70981: PUSH
70982: LD_INT 4
70984: ARRAY
70985: OR
70986: IFFALSE 70990
// continue ;
70988: GO 70952
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
70990: LD_VAR 0 3
70994: PPUSH
70995: LD_EXP 66
70999: PUSH
71000: LD_VAR 0 2
71004: ARRAY
71005: PUSH
71006: LD_INT 1
71008: ARRAY
71009: PUSH
71010: LD_INT 1
71012: ARRAY
71013: PPUSH
71014: LD_EXP 66
71018: PUSH
71019: LD_VAR 0 2
71023: ARRAY
71024: PUSH
71025: LD_INT 1
71027: ARRAY
71028: PUSH
71029: LD_INT 2
71031: ARRAY
71032: PPUSH
71033: LD_EXP 66
71037: PUSH
71038: LD_VAR 0 2
71042: ARRAY
71043: PUSH
71044: LD_INT 1
71046: ARRAY
71047: PUSH
71048: LD_INT 3
71050: ARRAY
71051: PPUSH
71052: LD_EXP 66
71056: PUSH
71057: LD_VAR 0 2
71061: ARRAY
71062: PUSH
71063: LD_INT 1
71065: ARRAY
71066: PUSH
71067: LD_INT 4
71069: ARRAY
71070: PPUSH
71071: CALL_OW 448
71075: PUSH
71076: LD_VAR 0 3
71080: PPUSH
71081: LD_EXP 66
71085: PUSH
71086: LD_VAR 0 2
71090: ARRAY
71091: PUSH
71092: LD_INT 1
71094: ARRAY
71095: PUSH
71096: LD_INT 1
71098: ARRAY
71099: PUSH
71100: LD_EXP 66
71104: PUSH
71105: LD_VAR 0 2
71109: ARRAY
71110: PUSH
71111: LD_INT 1
71113: ARRAY
71114: PUSH
71115: LD_INT 2
71117: ARRAY
71118: PUSH
71119: LD_EXP 66
71123: PUSH
71124: LD_VAR 0 2
71128: ARRAY
71129: PUSH
71130: LD_INT 1
71132: ARRAY
71133: PUSH
71134: LD_INT 3
71136: ARRAY
71137: PUSH
71138: LD_EXP 66
71142: PUSH
71143: LD_VAR 0 2
71147: ARRAY
71148: PUSH
71149: LD_INT 1
71151: ARRAY
71152: PUSH
71153: LD_INT 4
71155: ARRAY
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: LIST
71161: LIST
71162: PPUSH
71163: CALL 30565 0 2
71167: AND
71168: IFFALSE 71306
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
71170: LD_VAR 0 3
71174: PPUSH
71175: LD_EXP 66
71179: PUSH
71180: LD_VAR 0 2
71184: ARRAY
71185: PUSH
71186: LD_INT 1
71188: ARRAY
71189: PUSH
71190: LD_INT 1
71192: ARRAY
71193: PPUSH
71194: LD_EXP 66
71198: PUSH
71199: LD_VAR 0 2
71203: ARRAY
71204: PUSH
71205: LD_INT 1
71207: ARRAY
71208: PUSH
71209: LD_INT 2
71211: ARRAY
71212: PPUSH
71213: LD_EXP 66
71217: PUSH
71218: LD_VAR 0 2
71222: ARRAY
71223: PUSH
71224: LD_INT 1
71226: ARRAY
71227: PUSH
71228: LD_INT 3
71230: ARRAY
71231: PPUSH
71232: LD_EXP 66
71236: PUSH
71237: LD_VAR 0 2
71241: ARRAY
71242: PUSH
71243: LD_INT 1
71245: ARRAY
71246: PUSH
71247: LD_INT 4
71249: ARRAY
71250: PPUSH
71251: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
71255: LD_ADDR_VAR 0 4
71259: PUSH
71260: LD_EXP 66
71264: PUSH
71265: LD_VAR 0 2
71269: ARRAY
71270: PPUSH
71271: LD_INT 1
71273: PPUSH
71274: CALL_OW 3
71278: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
71279: LD_ADDR_EXP 66
71283: PUSH
71284: LD_EXP 66
71288: PPUSH
71289: LD_VAR 0 2
71293: PPUSH
71294: LD_VAR 0 4
71298: PPUSH
71299: CALL_OW 1
71303: ST_TO_ADDR
// break ;
71304: GO 71308
// end ; end ;
71306: GO 70952
71308: POP
71309: POP
// end ;
71310: GO 70884
71312: POP
71313: POP
// end ;
71314: LD_VAR 0 1
71318: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
71319: LD_INT 0
71321: PPUSH
71322: PPUSH
71323: PPUSH
// if not mc_bases then
71324: LD_EXP 45
71328: NOT
71329: IFFALSE 71333
// exit ;
71331: GO 71422
// for i = 1 to mc_bases do
71333: LD_ADDR_VAR 0 2
71337: PUSH
71338: DOUBLE
71339: LD_INT 1
71341: DEC
71342: ST_TO_ADDR
71343: LD_EXP 45
71347: PUSH
71348: FOR_TO
71349: IFFALSE 71420
// begin if mc_attack [ i ] then
71351: LD_EXP 65
71355: PUSH
71356: LD_VAR 0 2
71360: ARRAY
71361: IFFALSE 71418
// begin tmp := mc_attack [ i ] [ 1 ] ;
71363: LD_ADDR_VAR 0 3
71367: PUSH
71368: LD_EXP 65
71372: PUSH
71373: LD_VAR 0 2
71377: ARRAY
71378: PUSH
71379: LD_INT 1
71381: ARRAY
71382: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
71383: LD_ADDR_EXP 65
71387: PUSH
71388: LD_EXP 65
71392: PPUSH
71393: LD_VAR 0 2
71397: PPUSH
71398: EMPTY
71399: PPUSH
71400: CALL_OW 1
71404: ST_TO_ADDR
// Attack ( tmp ) ;
71405: LD_VAR 0 3
71409: PPUSH
71410: CALL 97469 0 1
// exit ;
71414: POP
71415: POP
71416: GO 71422
// end ; end ;
71418: GO 71348
71420: POP
71421: POP
// end ;
71422: LD_VAR 0 1
71426: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
71427: LD_INT 0
71429: PPUSH
71430: PPUSH
71431: PPUSH
71432: PPUSH
71433: PPUSH
71434: PPUSH
71435: PPUSH
// if not mc_bases then
71436: LD_EXP 45
71440: NOT
71441: IFFALSE 71445
// exit ;
71443: GO 72027
// for i = 1 to mc_bases do
71445: LD_ADDR_VAR 0 2
71449: PUSH
71450: DOUBLE
71451: LD_INT 1
71453: DEC
71454: ST_TO_ADDR
71455: LD_EXP 45
71459: PUSH
71460: FOR_TO
71461: IFFALSE 72025
// begin if not mc_bases [ i ] then
71463: LD_EXP 45
71467: PUSH
71468: LD_VAR 0 2
71472: ARRAY
71473: NOT
71474: IFFALSE 71478
// continue ;
71476: GO 71460
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
71478: LD_ADDR_VAR 0 7
71482: PUSH
71483: LD_EXP 45
71487: PUSH
71488: LD_VAR 0 2
71492: ARRAY
71493: PUSH
71494: LD_INT 1
71496: ARRAY
71497: PPUSH
71498: CALL 21137 0 1
71502: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
71503: LD_ADDR_EXP 68
71507: PUSH
71508: LD_EXP 68
71512: PPUSH
71513: LD_VAR 0 2
71517: PPUSH
71518: LD_EXP 45
71522: PUSH
71523: LD_VAR 0 2
71527: ARRAY
71528: PUSH
71529: LD_INT 1
71531: ARRAY
71532: PPUSH
71533: CALL_OW 255
71537: PPUSH
71538: LD_EXP 70
71542: PUSH
71543: LD_VAR 0 2
71547: ARRAY
71548: PPUSH
71549: CALL 21102 0 2
71553: PPUSH
71554: CALL_OW 1
71558: ST_TO_ADDR
// if not mc_scan [ i ] then
71559: LD_EXP 68
71563: PUSH
71564: LD_VAR 0 2
71568: ARRAY
71569: NOT
71570: IFFALSE 71725
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
71572: LD_ADDR_VAR 0 4
71576: PUSH
71577: LD_EXP 45
71581: PUSH
71582: LD_VAR 0 2
71586: ARRAY
71587: PPUSH
71588: LD_INT 2
71590: PUSH
71591: LD_INT 25
71593: PUSH
71594: LD_INT 5
71596: PUSH
71597: EMPTY
71598: LIST
71599: LIST
71600: PUSH
71601: LD_INT 25
71603: PUSH
71604: LD_INT 8
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: LD_INT 25
71613: PUSH
71614: LD_INT 9
71616: PUSH
71617: EMPTY
71618: LIST
71619: LIST
71620: PUSH
71621: EMPTY
71622: LIST
71623: LIST
71624: LIST
71625: LIST
71626: PPUSH
71627: CALL_OW 72
71631: ST_TO_ADDR
// if not tmp then
71632: LD_VAR 0 4
71636: NOT
71637: IFFALSE 71641
// continue ;
71639: GO 71460
// for j in tmp do
71641: LD_ADDR_VAR 0 3
71645: PUSH
71646: LD_VAR 0 4
71650: PUSH
71651: FOR_IN
71652: IFFALSE 71723
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
71654: LD_VAR 0 3
71658: PPUSH
71659: CALL_OW 310
71663: PPUSH
71664: CALL_OW 266
71668: PUSH
71669: LD_INT 5
71671: EQUAL
71672: PUSH
71673: LD_VAR 0 3
71677: PPUSH
71678: CALL_OW 257
71682: PUSH
71683: LD_INT 1
71685: EQUAL
71686: AND
71687: PUSH
71688: LD_VAR 0 3
71692: PPUSH
71693: CALL_OW 459
71697: NOT
71698: AND
71699: PUSH
71700: LD_VAR 0 7
71704: AND
71705: IFFALSE 71721
// ComChangeProfession ( j , class ) ;
71707: LD_VAR 0 3
71711: PPUSH
71712: LD_VAR 0 7
71716: PPUSH
71717: CALL_OW 123
71721: GO 71651
71723: POP
71724: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
71725: LD_EXP 68
71729: PUSH
71730: LD_VAR 0 2
71734: ARRAY
71735: PUSH
71736: LD_EXP 67
71740: PUSH
71741: LD_VAR 0 2
71745: ARRAY
71746: NOT
71747: AND
71748: PUSH
71749: LD_EXP 45
71753: PUSH
71754: LD_VAR 0 2
71758: ARRAY
71759: PPUSH
71760: LD_INT 30
71762: PUSH
71763: LD_INT 32
71765: PUSH
71766: EMPTY
71767: LIST
71768: LIST
71769: PPUSH
71770: CALL_OW 72
71774: NOT
71775: AND
71776: PUSH
71777: LD_EXP 45
71781: PUSH
71782: LD_VAR 0 2
71786: ARRAY
71787: PPUSH
71788: LD_INT 2
71790: PUSH
71791: LD_INT 30
71793: PUSH
71794: LD_INT 4
71796: PUSH
71797: EMPTY
71798: LIST
71799: LIST
71800: PUSH
71801: LD_INT 30
71803: PUSH
71804: LD_INT 5
71806: PUSH
71807: EMPTY
71808: LIST
71809: LIST
71810: PUSH
71811: EMPTY
71812: LIST
71813: LIST
71814: LIST
71815: PPUSH
71816: CALL_OW 72
71820: NOT
71821: AND
71822: IFFALSE 71954
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
71824: LD_ADDR_VAR 0 4
71828: PUSH
71829: LD_EXP 45
71833: PUSH
71834: LD_VAR 0 2
71838: ARRAY
71839: PPUSH
71840: LD_INT 2
71842: PUSH
71843: LD_INT 25
71845: PUSH
71846: LD_INT 1
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: PUSH
71853: LD_INT 25
71855: PUSH
71856: LD_INT 5
71858: PUSH
71859: EMPTY
71860: LIST
71861: LIST
71862: PUSH
71863: LD_INT 25
71865: PUSH
71866: LD_INT 8
71868: PUSH
71869: EMPTY
71870: LIST
71871: LIST
71872: PUSH
71873: LD_INT 25
71875: PUSH
71876: LD_INT 9
71878: PUSH
71879: EMPTY
71880: LIST
71881: LIST
71882: PUSH
71883: EMPTY
71884: LIST
71885: LIST
71886: LIST
71887: LIST
71888: LIST
71889: PPUSH
71890: CALL_OW 72
71894: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
71895: LD_ADDR_VAR 0 4
71899: PUSH
71900: LD_VAR 0 4
71904: PUSH
71905: LD_VAR 0 4
71909: PPUSH
71910: LD_INT 18
71912: PPUSH
71913: CALL 52862 0 2
71917: DIFF
71918: ST_TO_ADDR
// if tmp then
71919: LD_VAR 0 4
71923: IFFALSE 71954
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
71925: LD_VAR 0 2
71929: PPUSH
71930: LD_VAR 0 4
71934: PPUSH
71935: LD_EXP 70
71939: PUSH
71940: LD_VAR 0 2
71944: ARRAY
71945: PPUSH
71946: CALL 102178 0 3
// exit ;
71950: POP
71951: POP
71952: GO 72027
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
71954: LD_EXP 68
71958: PUSH
71959: LD_VAR 0 2
71963: ARRAY
71964: PUSH
71965: LD_EXP 67
71969: PUSH
71970: LD_VAR 0 2
71974: ARRAY
71975: AND
71976: IFFALSE 72023
// begin tmp := mc_defender [ i ] ;
71978: LD_ADDR_VAR 0 4
71982: PUSH
71983: LD_EXP 67
71987: PUSH
71988: LD_VAR 0 2
71992: ARRAY
71993: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
71994: LD_VAR 0 2
71998: PPUSH
71999: LD_VAR 0 4
72003: PPUSH
72004: LD_EXP 68
72008: PUSH
72009: LD_VAR 0 2
72013: ARRAY
72014: PPUSH
72015: CALL 102739 0 3
// exit ;
72019: POP
72020: POP
72021: GO 72027
// end ; end ;
72023: GO 71460
72025: POP
72026: POP
// end ;
72027: LD_VAR 0 1
72031: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
72032: LD_INT 0
72034: PPUSH
72035: PPUSH
72036: PPUSH
72037: PPUSH
72038: PPUSH
72039: PPUSH
72040: PPUSH
72041: PPUSH
72042: PPUSH
72043: PPUSH
72044: PPUSH
// if not mc_bases then
72045: LD_EXP 45
72049: NOT
72050: IFFALSE 72054
// exit ;
72052: GO 73141
// for i = 1 to mc_bases do
72054: LD_ADDR_VAR 0 2
72058: PUSH
72059: DOUBLE
72060: LD_INT 1
72062: DEC
72063: ST_TO_ADDR
72064: LD_EXP 45
72068: PUSH
72069: FOR_TO
72070: IFFALSE 73139
// begin tmp := mc_lab [ i ] ;
72072: LD_ADDR_VAR 0 6
72076: PUSH
72077: LD_EXP 78
72081: PUSH
72082: LD_VAR 0 2
72086: ARRAY
72087: ST_TO_ADDR
// if not tmp then
72088: LD_VAR 0 6
72092: NOT
72093: IFFALSE 72097
// continue ;
72095: GO 72069
// idle_lab := 0 ;
72097: LD_ADDR_VAR 0 11
72101: PUSH
72102: LD_INT 0
72104: ST_TO_ADDR
// for j in tmp do
72105: LD_ADDR_VAR 0 3
72109: PUSH
72110: LD_VAR 0 6
72114: PUSH
72115: FOR_IN
72116: IFFALSE 73135
// begin researching := false ;
72118: LD_ADDR_VAR 0 10
72122: PUSH
72123: LD_INT 0
72125: ST_TO_ADDR
// side := GetSide ( j ) ;
72126: LD_ADDR_VAR 0 4
72130: PUSH
72131: LD_VAR 0 3
72135: PPUSH
72136: CALL_OW 255
72140: ST_TO_ADDR
// if not mc_tech [ side ] then
72141: LD_EXP 72
72145: PUSH
72146: LD_VAR 0 4
72150: ARRAY
72151: NOT
72152: IFFALSE 72156
// continue ;
72154: GO 72115
// if BuildingStatus ( j ) = bs_idle then
72156: LD_VAR 0 3
72160: PPUSH
72161: CALL_OW 461
72165: PUSH
72166: LD_INT 2
72168: EQUAL
72169: IFFALSE 72357
// begin if idle_lab and UnitsInside ( j ) < 6 then
72171: LD_VAR 0 11
72175: PUSH
72176: LD_VAR 0 3
72180: PPUSH
72181: CALL_OW 313
72185: PUSH
72186: LD_INT 6
72188: LESS
72189: AND
72190: IFFALSE 72261
// begin tmp2 := UnitsInside ( idle_lab ) ;
72192: LD_ADDR_VAR 0 9
72196: PUSH
72197: LD_VAR 0 11
72201: PPUSH
72202: CALL_OW 313
72206: ST_TO_ADDR
// if tmp2 then
72207: LD_VAR 0 9
72211: IFFALSE 72253
// for x in tmp2 do
72213: LD_ADDR_VAR 0 7
72217: PUSH
72218: LD_VAR 0 9
72222: PUSH
72223: FOR_IN
72224: IFFALSE 72251
// begin ComExitBuilding ( x ) ;
72226: LD_VAR 0 7
72230: PPUSH
72231: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
72235: LD_VAR 0 7
72239: PPUSH
72240: LD_VAR 0 3
72244: PPUSH
72245: CALL_OW 180
// end ;
72249: GO 72223
72251: POP
72252: POP
// idle_lab := 0 ;
72253: LD_ADDR_VAR 0 11
72257: PUSH
72258: LD_INT 0
72260: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
72261: LD_ADDR_VAR 0 5
72265: PUSH
72266: LD_EXP 72
72270: PUSH
72271: LD_VAR 0 4
72275: ARRAY
72276: PUSH
72277: FOR_IN
72278: IFFALSE 72338
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
72280: LD_VAR 0 3
72284: PPUSH
72285: LD_VAR 0 5
72289: PPUSH
72290: CALL_OW 430
72294: PUSH
72295: LD_VAR 0 4
72299: PPUSH
72300: LD_VAR 0 5
72304: PPUSH
72305: CALL 20207 0 2
72309: AND
72310: IFFALSE 72336
// begin researching := true ;
72312: LD_ADDR_VAR 0 10
72316: PUSH
72317: LD_INT 1
72319: ST_TO_ADDR
// ComResearch ( j , t ) ;
72320: LD_VAR 0 3
72324: PPUSH
72325: LD_VAR 0 5
72329: PPUSH
72330: CALL_OW 124
// break ;
72334: GO 72338
// end ;
72336: GO 72277
72338: POP
72339: POP
// if not researching then
72340: LD_VAR 0 10
72344: NOT
72345: IFFALSE 72357
// idle_lab := j ;
72347: LD_ADDR_VAR 0 11
72351: PUSH
72352: LD_VAR 0 3
72356: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
72357: LD_VAR 0 3
72361: PPUSH
72362: CALL_OW 461
72366: PUSH
72367: LD_INT 10
72369: EQUAL
72370: IFFALSE 72958
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
72372: LD_EXP 74
72376: PUSH
72377: LD_VAR 0 2
72381: ARRAY
72382: NOT
72383: PUSH
72384: LD_EXP 75
72388: PUSH
72389: LD_VAR 0 2
72393: ARRAY
72394: NOT
72395: AND
72396: PUSH
72397: LD_EXP 72
72401: PUSH
72402: LD_VAR 0 4
72406: ARRAY
72407: PUSH
72408: LD_INT 1
72410: GREATER
72411: AND
72412: IFFALSE 72543
// begin ComCancel ( j ) ;
72414: LD_VAR 0 3
72418: PPUSH
72419: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
72423: LD_ADDR_EXP 72
72427: PUSH
72428: LD_EXP 72
72432: PPUSH
72433: LD_VAR 0 4
72437: PPUSH
72438: LD_EXP 72
72442: PUSH
72443: LD_VAR 0 4
72447: ARRAY
72448: PPUSH
72449: LD_EXP 72
72453: PUSH
72454: LD_VAR 0 4
72458: ARRAY
72459: PUSH
72460: LD_INT 1
72462: MINUS
72463: PPUSH
72464: LD_EXP 72
72468: PUSH
72469: LD_VAR 0 4
72473: ARRAY
72474: PPUSH
72475: LD_INT 0
72477: PPUSH
72478: CALL 23719 0 4
72482: PPUSH
72483: CALL_OW 1
72487: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
72488: LD_ADDR_EXP 72
72492: PUSH
72493: LD_EXP 72
72497: PPUSH
72498: LD_VAR 0 4
72502: PPUSH
72503: LD_EXP 72
72507: PUSH
72508: LD_VAR 0 4
72512: ARRAY
72513: PPUSH
72514: LD_EXP 72
72518: PUSH
72519: LD_VAR 0 4
72523: ARRAY
72524: PPUSH
72525: LD_INT 1
72527: PPUSH
72528: LD_INT 0
72530: PPUSH
72531: CALL 23719 0 4
72535: PPUSH
72536: CALL_OW 1
72540: ST_TO_ADDR
// continue ;
72541: GO 72115
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
72543: LD_EXP 74
72547: PUSH
72548: LD_VAR 0 2
72552: ARRAY
72553: PUSH
72554: LD_EXP 75
72558: PUSH
72559: LD_VAR 0 2
72563: ARRAY
72564: NOT
72565: AND
72566: IFFALSE 72693
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
72568: LD_ADDR_EXP 75
72572: PUSH
72573: LD_EXP 75
72577: PPUSH
72578: LD_VAR 0 2
72582: PUSH
72583: LD_EXP 75
72587: PUSH
72588: LD_VAR 0 2
72592: ARRAY
72593: PUSH
72594: LD_INT 1
72596: PLUS
72597: PUSH
72598: EMPTY
72599: LIST
72600: LIST
72601: PPUSH
72602: LD_EXP 74
72606: PUSH
72607: LD_VAR 0 2
72611: ARRAY
72612: PUSH
72613: LD_INT 1
72615: ARRAY
72616: PPUSH
72617: CALL 24301 0 3
72621: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
72622: LD_EXP 74
72626: PUSH
72627: LD_VAR 0 2
72631: ARRAY
72632: PUSH
72633: LD_INT 1
72635: ARRAY
72636: PPUSH
72637: LD_INT 112
72639: PPUSH
72640: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
72644: LD_ADDR_VAR 0 9
72648: PUSH
72649: LD_EXP 74
72653: PUSH
72654: LD_VAR 0 2
72658: ARRAY
72659: PPUSH
72660: LD_INT 1
72662: PPUSH
72663: CALL_OW 3
72667: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
72668: LD_ADDR_EXP 74
72672: PUSH
72673: LD_EXP 74
72677: PPUSH
72678: LD_VAR 0 2
72682: PPUSH
72683: LD_VAR 0 9
72687: PPUSH
72688: CALL_OW 1
72692: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
72693: LD_EXP 74
72697: PUSH
72698: LD_VAR 0 2
72702: ARRAY
72703: PUSH
72704: LD_EXP 75
72708: PUSH
72709: LD_VAR 0 2
72713: ARRAY
72714: AND
72715: PUSH
72716: LD_EXP 75
72720: PUSH
72721: LD_VAR 0 2
72725: ARRAY
72726: PUSH
72727: LD_INT 1
72729: ARRAY
72730: PPUSH
72731: CALL_OW 310
72735: NOT
72736: AND
72737: PUSH
72738: LD_VAR 0 3
72742: PPUSH
72743: CALL_OW 313
72747: PUSH
72748: LD_INT 6
72750: EQUAL
72751: AND
72752: IFFALSE 72808
// begin tmp2 := UnitsInside ( j ) ;
72754: LD_ADDR_VAR 0 9
72758: PUSH
72759: LD_VAR 0 3
72763: PPUSH
72764: CALL_OW 313
72768: ST_TO_ADDR
// if tmp2 = 6 then
72769: LD_VAR 0 9
72773: PUSH
72774: LD_INT 6
72776: EQUAL
72777: IFFALSE 72808
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
72779: LD_VAR 0 9
72783: PUSH
72784: LD_INT 1
72786: ARRAY
72787: PPUSH
72788: LD_INT 112
72790: PPUSH
72791: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
72795: LD_VAR 0 9
72799: PUSH
72800: LD_INT 1
72802: ARRAY
72803: PPUSH
72804: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
72808: LD_EXP 75
72812: PUSH
72813: LD_VAR 0 2
72817: ARRAY
72818: PUSH
72819: LD_EXP 75
72823: PUSH
72824: LD_VAR 0 2
72828: ARRAY
72829: PUSH
72830: LD_INT 1
72832: ARRAY
72833: PPUSH
72834: CALL_OW 314
72838: NOT
72839: AND
72840: PUSH
72841: LD_EXP 75
72845: PUSH
72846: LD_VAR 0 2
72850: ARRAY
72851: PUSH
72852: LD_INT 1
72854: ARRAY
72855: PPUSH
72856: CALL_OW 310
72860: NOT
72861: AND
72862: IFFALSE 72888
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
72864: LD_EXP 75
72868: PUSH
72869: LD_VAR 0 2
72873: ARRAY
72874: PUSH
72875: LD_INT 1
72877: ARRAY
72878: PPUSH
72879: LD_VAR 0 3
72883: PPUSH
72884: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
72888: LD_EXP 75
72892: PUSH
72893: LD_VAR 0 2
72897: ARRAY
72898: PUSH
72899: LD_INT 1
72901: ARRAY
72902: PPUSH
72903: CALL_OW 310
72907: PUSH
72908: LD_EXP 75
72912: PUSH
72913: LD_VAR 0 2
72917: ARRAY
72918: PUSH
72919: LD_INT 1
72921: ARRAY
72922: PPUSH
72923: CALL_OW 310
72927: PPUSH
72928: CALL_OW 461
72932: PUSH
72933: LD_INT 3
72935: NONEQUAL
72936: AND
72937: IFFALSE 72958
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
72939: LD_EXP 75
72943: PUSH
72944: LD_VAR 0 2
72948: ARRAY
72949: PUSH
72950: LD_INT 1
72952: ARRAY
72953: PPUSH
72954: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
72958: LD_VAR 0 3
72962: PPUSH
72963: CALL_OW 461
72967: PUSH
72968: LD_INT 6
72970: EQUAL
72971: PUSH
72972: LD_VAR 0 6
72976: PUSH
72977: LD_INT 1
72979: GREATER
72980: AND
72981: IFFALSE 73133
// begin sci := [ ] ;
72983: LD_ADDR_VAR 0 8
72987: PUSH
72988: EMPTY
72989: ST_TO_ADDR
// for x in ( tmp diff j ) do
72990: LD_ADDR_VAR 0 7
72994: PUSH
72995: LD_VAR 0 6
72999: PUSH
73000: LD_VAR 0 3
73004: DIFF
73005: PUSH
73006: FOR_IN
73007: IFFALSE 73059
// begin if sci = 6 then
73009: LD_VAR 0 8
73013: PUSH
73014: LD_INT 6
73016: EQUAL
73017: IFFALSE 73021
// break ;
73019: GO 73059
// if BuildingStatus ( x ) = bs_idle then
73021: LD_VAR 0 7
73025: PPUSH
73026: CALL_OW 461
73030: PUSH
73031: LD_INT 2
73033: EQUAL
73034: IFFALSE 73057
// sci := sci ^ UnitsInside ( x ) ;
73036: LD_ADDR_VAR 0 8
73040: PUSH
73041: LD_VAR 0 8
73045: PUSH
73046: LD_VAR 0 7
73050: PPUSH
73051: CALL_OW 313
73055: ADD
73056: ST_TO_ADDR
// end ;
73057: GO 73006
73059: POP
73060: POP
// if not sci then
73061: LD_VAR 0 8
73065: NOT
73066: IFFALSE 73070
// continue ;
73068: GO 72115
// for x in sci do
73070: LD_ADDR_VAR 0 7
73074: PUSH
73075: LD_VAR 0 8
73079: PUSH
73080: FOR_IN
73081: IFFALSE 73131
// if IsInUnit ( x ) and not HasTask ( x ) then
73083: LD_VAR 0 7
73087: PPUSH
73088: CALL_OW 310
73092: PUSH
73093: LD_VAR 0 7
73097: PPUSH
73098: CALL_OW 314
73102: NOT
73103: AND
73104: IFFALSE 73129
// begin ComExitBuilding ( x ) ;
73106: LD_VAR 0 7
73110: PPUSH
73111: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
73115: LD_VAR 0 7
73119: PPUSH
73120: LD_VAR 0 3
73124: PPUSH
73125: CALL_OW 180
// end ;
73129: GO 73080
73131: POP
73132: POP
// end ; end ;
73133: GO 72115
73135: POP
73136: POP
// end ;
73137: GO 72069
73139: POP
73140: POP
// end ;
73141: LD_VAR 0 1
73145: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
73146: LD_INT 0
73148: PPUSH
73149: PPUSH
// if not mc_bases then
73150: LD_EXP 45
73154: NOT
73155: IFFALSE 73159
// exit ;
73157: GO 73240
// for i = 1 to mc_bases do
73159: LD_ADDR_VAR 0 2
73163: PUSH
73164: DOUBLE
73165: LD_INT 1
73167: DEC
73168: ST_TO_ADDR
73169: LD_EXP 45
73173: PUSH
73174: FOR_TO
73175: IFFALSE 73238
// if mc_mines [ i ] and mc_miners [ i ] then
73177: LD_EXP 58
73181: PUSH
73182: LD_VAR 0 2
73186: ARRAY
73187: PUSH
73188: LD_EXP 59
73192: PUSH
73193: LD_VAR 0 2
73197: ARRAY
73198: AND
73199: IFFALSE 73236
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
73201: LD_EXP 59
73205: PUSH
73206: LD_VAR 0 2
73210: ARRAY
73211: PUSH
73212: LD_INT 1
73214: ARRAY
73215: PPUSH
73216: CALL_OW 255
73220: PPUSH
73221: LD_EXP 58
73225: PUSH
73226: LD_VAR 0 2
73230: ARRAY
73231: PPUSH
73232: CALL 21290 0 2
73236: GO 73174
73238: POP
73239: POP
// end ;
73240: LD_VAR 0 1
73244: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
73245: LD_INT 0
73247: PPUSH
73248: PPUSH
73249: PPUSH
73250: PPUSH
73251: PPUSH
73252: PPUSH
73253: PPUSH
73254: PPUSH
// if not mc_bases or not mc_parking then
73255: LD_EXP 45
73259: NOT
73260: PUSH
73261: LD_EXP 69
73265: NOT
73266: OR
73267: IFFALSE 73271
// exit ;
73269: GO 73970
// for i = 1 to mc_bases do
73271: LD_ADDR_VAR 0 2
73275: PUSH
73276: DOUBLE
73277: LD_INT 1
73279: DEC
73280: ST_TO_ADDR
73281: LD_EXP 45
73285: PUSH
73286: FOR_TO
73287: IFFALSE 73968
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
73289: LD_EXP 45
73293: PUSH
73294: LD_VAR 0 2
73298: ARRAY
73299: NOT
73300: PUSH
73301: LD_EXP 69
73305: PUSH
73306: LD_VAR 0 2
73310: ARRAY
73311: NOT
73312: OR
73313: IFFALSE 73317
// continue ;
73315: GO 73286
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
73317: LD_ADDR_VAR 0 5
73321: PUSH
73322: LD_EXP 45
73326: PUSH
73327: LD_VAR 0 2
73331: ARRAY
73332: PUSH
73333: LD_INT 1
73335: ARRAY
73336: PPUSH
73337: CALL_OW 255
73341: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
73342: LD_ADDR_VAR 0 6
73346: PUSH
73347: LD_EXP 45
73351: PUSH
73352: LD_VAR 0 2
73356: ARRAY
73357: PPUSH
73358: LD_INT 30
73360: PUSH
73361: LD_INT 3
73363: PUSH
73364: EMPTY
73365: LIST
73366: LIST
73367: PPUSH
73368: CALL_OW 72
73372: ST_TO_ADDR
// if not fac then
73373: LD_VAR 0 6
73377: NOT
73378: IFFALSE 73429
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
73380: LD_ADDR_VAR 0 6
73384: PUSH
73385: LD_EXP 45
73389: PUSH
73390: LD_VAR 0 2
73394: ARRAY
73395: PPUSH
73396: LD_INT 2
73398: PUSH
73399: LD_INT 30
73401: PUSH
73402: LD_INT 0
73404: PUSH
73405: EMPTY
73406: LIST
73407: LIST
73408: PUSH
73409: LD_INT 30
73411: PUSH
73412: LD_INT 1
73414: PUSH
73415: EMPTY
73416: LIST
73417: LIST
73418: PUSH
73419: EMPTY
73420: LIST
73421: LIST
73422: LIST
73423: PPUSH
73424: CALL_OW 72
73428: ST_TO_ADDR
// if not fac then
73429: LD_VAR 0 6
73433: NOT
73434: IFFALSE 73438
// continue ;
73436: GO 73286
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
73438: LD_ADDR_VAR 0 7
73442: PUSH
73443: LD_EXP 69
73447: PUSH
73448: LD_VAR 0 2
73452: ARRAY
73453: PPUSH
73454: LD_INT 22
73456: PUSH
73457: LD_VAR 0 5
73461: PUSH
73462: EMPTY
73463: LIST
73464: LIST
73465: PUSH
73466: LD_INT 21
73468: PUSH
73469: LD_INT 2
73471: PUSH
73472: EMPTY
73473: LIST
73474: LIST
73475: PUSH
73476: LD_INT 3
73478: PUSH
73479: LD_INT 24
73481: PUSH
73482: LD_INT 1000
73484: PUSH
73485: EMPTY
73486: LIST
73487: LIST
73488: PUSH
73489: EMPTY
73490: LIST
73491: LIST
73492: PUSH
73493: EMPTY
73494: LIST
73495: LIST
73496: LIST
73497: PPUSH
73498: CALL_OW 70
73502: ST_TO_ADDR
// for j in fac do
73503: LD_ADDR_VAR 0 3
73507: PUSH
73508: LD_VAR 0 6
73512: PUSH
73513: FOR_IN
73514: IFFALSE 73595
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
73516: LD_ADDR_VAR 0 7
73520: PUSH
73521: LD_VAR 0 7
73525: PUSH
73526: LD_INT 22
73528: PUSH
73529: LD_VAR 0 5
73533: PUSH
73534: EMPTY
73535: LIST
73536: LIST
73537: PUSH
73538: LD_INT 91
73540: PUSH
73541: LD_VAR 0 3
73545: PUSH
73546: LD_INT 15
73548: PUSH
73549: EMPTY
73550: LIST
73551: LIST
73552: LIST
73553: PUSH
73554: LD_INT 21
73556: PUSH
73557: LD_INT 2
73559: PUSH
73560: EMPTY
73561: LIST
73562: LIST
73563: PUSH
73564: LD_INT 3
73566: PUSH
73567: LD_INT 24
73569: PUSH
73570: LD_INT 1000
73572: PUSH
73573: EMPTY
73574: LIST
73575: LIST
73576: PUSH
73577: EMPTY
73578: LIST
73579: LIST
73580: PUSH
73581: EMPTY
73582: LIST
73583: LIST
73584: LIST
73585: LIST
73586: PPUSH
73587: CALL_OW 69
73591: UNION
73592: ST_TO_ADDR
73593: GO 73513
73595: POP
73596: POP
// if not vehs then
73597: LD_VAR 0 7
73601: NOT
73602: IFFALSE 73628
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
73604: LD_ADDR_EXP 57
73608: PUSH
73609: LD_EXP 57
73613: PPUSH
73614: LD_VAR 0 2
73618: PPUSH
73619: EMPTY
73620: PPUSH
73621: CALL_OW 1
73625: ST_TO_ADDR
// continue ;
73626: GO 73286
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
73628: LD_ADDR_VAR 0 8
73632: PUSH
73633: LD_EXP 45
73637: PUSH
73638: LD_VAR 0 2
73642: ARRAY
73643: PPUSH
73644: LD_INT 30
73646: PUSH
73647: LD_INT 3
73649: PUSH
73650: EMPTY
73651: LIST
73652: LIST
73653: PPUSH
73654: CALL_OW 72
73658: ST_TO_ADDR
// if tmp then
73659: LD_VAR 0 8
73663: IFFALSE 73766
// begin for j in tmp do
73665: LD_ADDR_VAR 0 3
73669: PUSH
73670: LD_VAR 0 8
73674: PUSH
73675: FOR_IN
73676: IFFALSE 73764
// for k in UnitsInside ( j ) do
73678: LD_ADDR_VAR 0 4
73682: PUSH
73683: LD_VAR 0 3
73687: PPUSH
73688: CALL_OW 313
73692: PUSH
73693: FOR_IN
73694: IFFALSE 73760
// if k then
73696: LD_VAR 0 4
73700: IFFALSE 73758
// if not k in mc_repair_vehicle [ i ] then
73702: LD_VAR 0 4
73706: PUSH
73707: LD_EXP 57
73711: PUSH
73712: LD_VAR 0 2
73716: ARRAY
73717: IN
73718: NOT
73719: IFFALSE 73758
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
73721: LD_ADDR_EXP 57
73725: PUSH
73726: LD_EXP 57
73730: PPUSH
73731: LD_VAR 0 2
73735: PPUSH
73736: LD_EXP 57
73740: PUSH
73741: LD_VAR 0 2
73745: ARRAY
73746: PUSH
73747: LD_VAR 0 4
73751: UNION
73752: PPUSH
73753: CALL_OW 1
73757: ST_TO_ADDR
73758: GO 73693
73760: POP
73761: POP
73762: GO 73675
73764: POP
73765: POP
// end ; if not mc_repair_vehicle [ i ] then
73766: LD_EXP 57
73770: PUSH
73771: LD_VAR 0 2
73775: ARRAY
73776: NOT
73777: IFFALSE 73781
// continue ;
73779: GO 73286
// for j in mc_repair_vehicle [ i ] do
73781: LD_ADDR_VAR 0 3
73785: PUSH
73786: LD_EXP 57
73790: PUSH
73791: LD_VAR 0 2
73795: ARRAY
73796: PUSH
73797: FOR_IN
73798: IFFALSE 73964
// begin if GetClass ( j ) <> 3 then
73800: LD_VAR 0 3
73804: PPUSH
73805: CALL_OW 257
73809: PUSH
73810: LD_INT 3
73812: NONEQUAL
73813: IFFALSE 73854
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
73815: LD_ADDR_EXP 57
73819: PUSH
73820: LD_EXP 57
73824: PPUSH
73825: LD_VAR 0 2
73829: PPUSH
73830: LD_EXP 57
73834: PUSH
73835: LD_VAR 0 2
73839: ARRAY
73840: PUSH
73841: LD_VAR 0 3
73845: DIFF
73846: PPUSH
73847: CALL_OW 1
73851: ST_TO_ADDR
// continue ;
73852: GO 73797
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
73854: LD_VAR 0 3
73858: PPUSH
73859: CALL_OW 311
73863: NOT
73864: PUSH
73865: LD_VAR 0 3
73869: PUSH
73870: LD_EXP 48
73874: PUSH
73875: LD_VAR 0 2
73879: ARRAY
73880: PUSH
73881: LD_INT 1
73883: ARRAY
73884: IN
73885: NOT
73886: AND
73887: PUSH
73888: LD_VAR 0 3
73892: PUSH
73893: LD_EXP 48
73897: PUSH
73898: LD_VAR 0 2
73902: ARRAY
73903: PUSH
73904: LD_INT 2
73906: ARRAY
73907: IN
73908: NOT
73909: AND
73910: IFFALSE 73962
// begin if IsInUnit ( j ) then
73912: LD_VAR 0 3
73916: PPUSH
73917: CALL_OW 310
73921: IFFALSE 73932
// ComExitBuilding ( j ) ;
73923: LD_VAR 0 3
73927: PPUSH
73928: CALL_OW 122
// if not HasTask ( j ) then
73932: LD_VAR 0 3
73936: PPUSH
73937: CALL_OW 314
73941: NOT
73942: IFFALSE 73962
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
73944: LD_VAR 0 3
73948: PPUSH
73949: LD_VAR 0 7
73953: PUSH
73954: LD_INT 1
73956: ARRAY
73957: PPUSH
73958: CALL_OW 189
// end ; end ;
73962: GO 73797
73964: POP
73965: POP
// end ;
73966: GO 73286
73968: POP
73969: POP
// end ;
73970: LD_VAR 0 1
73974: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
73975: LD_INT 0
73977: PPUSH
73978: PPUSH
73979: PPUSH
73980: PPUSH
73981: PPUSH
73982: PPUSH
73983: PPUSH
73984: PPUSH
73985: PPUSH
73986: PPUSH
73987: PPUSH
// if not mc_bases then
73988: LD_EXP 45
73992: NOT
73993: IFFALSE 73997
// exit ;
73995: GO 74799
// for i = 1 to mc_bases do
73997: LD_ADDR_VAR 0 2
74001: PUSH
74002: DOUBLE
74003: LD_INT 1
74005: DEC
74006: ST_TO_ADDR
74007: LD_EXP 45
74011: PUSH
74012: FOR_TO
74013: IFFALSE 74797
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
74015: LD_EXP 73
74019: PUSH
74020: LD_VAR 0 2
74024: ARRAY
74025: NOT
74026: PUSH
74027: LD_EXP 48
74031: PUSH
74032: LD_VAR 0 2
74036: ARRAY
74037: PUSH
74038: LD_INT 1
74040: ARRAY
74041: OR
74042: PUSH
74043: LD_EXP 48
74047: PUSH
74048: LD_VAR 0 2
74052: ARRAY
74053: PUSH
74054: LD_INT 2
74056: ARRAY
74057: OR
74058: PUSH
74059: LD_EXP 71
74063: PUSH
74064: LD_VAR 0 2
74068: ARRAY
74069: PPUSH
74070: LD_INT 1
74072: PPUSH
74073: CALL_OW 325
74077: NOT
74078: OR
74079: PUSH
74080: LD_EXP 68
74084: PUSH
74085: LD_VAR 0 2
74089: ARRAY
74090: OR
74091: IFFALSE 74095
// continue ;
74093: GO 74012
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
74095: LD_ADDR_VAR 0 8
74099: PUSH
74100: LD_EXP 45
74104: PUSH
74105: LD_VAR 0 2
74109: ARRAY
74110: PPUSH
74111: LD_INT 25
74113: PUSH
74114: LD_INT 4
74116: PUSH
74117: EMPTY
74118: LIST
74119: LIST
74120: PUSH
74121: LD_INT 50
74123: PUSH
74124: EMPTY
74125: LIST
74126: PUSH
74127: LD_INT 3
74129: PUSH
74130: LD_INT 60
74132: PUSH
74133: EMPTY
74134: LIST
74135: PUSH
74136: EMPTY
74137: LIST
74138: LIST
74139: PUSH
74140: EMPTY
74141: LIST
74142: LIST
74143: LIST
74144: PPUSH
74145: CALL_OW 72
74149: PUSH
74150: LD_EXP 49
74154: PUSH
74155: LD_VAR 0 2
74159: ARRAY
74160: DIFF
74161: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
74162: LD_ADDR_VAR 0 9
74166: PUSH
74167: LD_EXP 45
74171: PUSH
74172: LD_VAR 0 2
74176: ARRAY
74177: PPUSH
74178: LD_INT 2
74180: PUSH
74181: LD_INT 30
74183: PUSH
74184: LD_INT 0
74186: PUSH
74187: EMPTY
74188: LIST
74189: LIST
74190: PUSH
74191: LD_INT 30
74193: PUSH
74194: LD_INT 1
74196: PUSH
74197: EMPTY
74198: LIST
74199: LIST
74200: PUSH
74201: EMPTY
74202: LIST
74203: LIST
74204: LIST
74205: PPUSH
74206: CALL_OW 72
74210: ST_TO_ADDR
// if not tmp or not dep then
74211: LD_VAR 0 8
74215: NOT
74216: PUSH
74217: LD_VAR 0 9
74221: NOT
74222: OR
74223: IFFALSE 74227
// continue ;
74225: GO 74012
// side := GetSide ( tmp [ 1 ] ) ;
74227: LD_ADDR_VAR 0 11
74231: PUSH
74232: LD_VAR 0 8
74236: PUSH
74237: LD_INT 1
74239: ARRAY
74240: PPUSH
74241: CALL_OW 255
74245: ST_TO_ADDR
// dep := dep [ 1 ] ;
74246: LD_ADDR_VAR 0 9
74250: PUSH
74251: LD_VAR 0 9
74255: PUSH
74256: LD_INT 1
74258: ARRAY
74259: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
74260: LD_ADDR_VAR 0 7
74264: PUSH
74265: LD_EXP 73
74269: PUSH
74270: LD_VAR 0 2
74274: ARRAY
74275: PPUSH
74276: LD_INT 22
74278: PUSH
74279: LD_INT 0
74281: PUSH
74282: EMPTY
74283: LIST
74284: LIST
74285: PUSH
74286: LD_INT 25
74288: PUSH
74289: LD_INT 12
74291: PUSH
74292: EMPTY
74293: LIST
74294: LIST
74295: PUSH
74296: EMPTY
74297: LIST
74298: LIST
74299: PPUSH
74300: CALL_OW 70
74304: PUSH
74305: LD_INT 22
74307: PUSH
74308: LD_INT 0
74310: PUSH
74311: EMPTY
74312: LIST
74313: LIST
74314: PUSH
74315: LD_INT 25
74317: PUSH
74318: LD_INT 12
74320: PUSH
74321: EMPTY
74322: LIST
74323: LIST
74324: PUSH
74325: LD_INT 91
74327: PUSH
74328: LD_VAR 0 9
74332: PUSH
74333: LD_INT 20
74335: PUSH
74336: EMPTY
74337: LIST
74338: LIST
74339: LIST
74340: PUSH
74341: EMPTY
74342: LIST
74343: LIST
74344: LIST
74345: PPUSH
74346: CALL_OW 69
74350: UNION
74351: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
74352: LD_ADDR_VAR 0 10
74356: PUSH
74357: LD_EXP 73
74361: PUSH
74362: LD_VAR 0 2
74366: ARRAY
74367: PPUSH
74368: LD_INT 81
74370: PUSH
74371: LD_VAR 0 11
74375: PUSH
74376: EMPTY
74377: LIST
74378: LIST
74379: PPUSH
74380: CALL_OW 70
74384: ST_TO_ADDR
// if not apes or danger_at_area then
74385: LD_VAR 0 7
74389: NOT
74390: PUSH
74391: LD_VAR 0 10
74395: OR
74396: IFFALSE 74446
// begin if mc_taming [ i ] then
74398: LD_EXP 76
74402: PUSH
74403: LD_VAR 0 2
74407: ARRAY
74408: IFFALSE 74444
// begin MC_Reset ( i , 121 ) ;
74410: LD_VAR 0 2
74414: PPUSH
74415: LD_INT 121
74417: PPUSH
74418: CALL 59897 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
74422: LD_ADDR_EXP 76
74426: PUSH
74427: LD_EXP 76
74431: PPUSH
74432: LD_VAR 0 2
74436: PPUSH
74437: EMPTY
74438: PPUSH
74439: CALL_OW 1
74443: ST_TO_ADDR
// end ; continue ;
74444: GO 74012
// end ; for j in tmp do
74446: LD_ADDR_VAR 0 3
74450: PUSH
74451: LD_VAR 0 8
74455: PUSH
74456: FOR_IN
74457: IFFALSE 74793
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
74459: LD_VAR 0 3
74463: PUSH
74464: LD_EXP 76
74468: PUSH
74469: LD_VAR 0 2
74473: ARRAY
74474: IN
74475: NOT
74476: PUSH
74477: LD_EXP 76
74481: PUSH
74482: LD_VAR 0 2
74486: ARRAY
74487: PUSH
74488: LD_INT 3
74490: LESS
74491: AND
74492: IFFALSE 74550
// begin SetTag ( j , 121 ) ;
74494: LD_VAR 0 3
74498: PPUSH
74499: LD_INT 121
74501: PPUSH
74502: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
74506: LD_ADDR_EXP 76
74510: PUSH
74511: LD_EXP 76
74515: PPUSH
74516: LD_VAR 0 2
74520: PUSH
74521: LD_EXP 76
74525: PUSH
74526: LD_VAR 0 2
74530: ARRAY
74531: PUSH
74532: LD_INT 1
74534: PLUS
74535: PUSH
74536: EMPTY
74537: LIST
74538: LIST
74539: PPUSH
74540: LD_VAR 0 3
74544: PPUSH
74545: CALL 24301 0 3
74549: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
74550: LD_VAR 0 3
74554: PUSH
74555: LD_EXP 76
74559: PUSH
74560: LD_VAR 0 2
74564: ARRAY
74565: IN
74566: IFFALSE 74791
// begin if GetClass ( j ) <> 4 then
74568: LD_VAR 0 3
74572: PPUSH
74573: CALL_OW 257
74577: PUSH
74578: LD_INT 4
74580: NONEQUAL
74581: IFFALSE 74634
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
74583: LD_ADDR_EXP 76
74587: PUSH
74588: LD_EXP 76
74592: PPUSH
74593: LD_VAR 0 2
74597: PPUSH
74598: LD_EXP 76
74602: PUSH
74603: LD_VAR 0 2
74607: ARRAY
74608: PUSH
74609: LD_VAR 0 3
74613: DIFF
74614: PPUSH
74615: CALL_OW 1
74619: ST_TO_ADDR
// SetTag ( j , 0 ) ;
74620: LD_VAR 0 3
74624: PPUSH
74625: LD_INT 0
74627: PPUSH
74628: CALL_OW 109
// continue ;
74632: GO 74456
// end ; if IsInUnit ( j ) then
74634: LD_VAR 0 3
74638: PPUSH
74639: CALL_OW 310
74643: IFFALSE 74654
// ComExitBuilding ( j ) ;
74645: LD_VAR 0 3
74649: PPUSH
74650: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
74654: LD_ADDR_VAR 0 6
74658: PUSH
74659: LD_VAR 0 7
74663: PPUSH
74664: LD_VAR 0 3
74668: PPUSH
74669: CALL_OW 74
74673: ST_TO_ADDR
// if not ape then
74674: LD_VAR 0 6
74678: NOT
74679: IFFALSE 74683
// break ;
74681: GO 74793
// x := GetX ( ape ) ;
74683: LD_ADDR_VAR 0 4
74687: PUSH
74688: LD_VAR 0 6
74692: PPUSH
74693: CALL_OW 250
74697: ST_TO_ADDR
// y := GetY ( ape ) ;
74698: LD_ADDR_VAR 0 5
74702: PUSH
74703: LD_VAR 0 6
74707: PPUSH
74708: CALL_OW 251
74712: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
74713: LD_VAR 0 4
74717: PPUSH
74718: LD_VAR 0 5
74722: PPUSH
74723: CALL_OW 488
74727: NOT
74728: PUSH
74729: LD_VAR 0 11
74733: PPUSH
74734: LD_VAR 0 4
74738: PPUSH
74739: LD_VAR 0 5
74743: PPUSH
74744: LD_INT 20
74746: PPUSH
74747: CALL 25197 0 4
74751: PUSH
74752: LD_INT 4
74754: ARRAY
74755: OR
74756: IFFALSE 74760
// break ;
74758: GO 74793
// if not HasTask ( j ) then
74760: LD_VAR 0 3
74764: PPUSH
74765: CALL_OW 314
74769: NOT
74770: IFFALSE 74791
// ComTameXY ( j , x , y ) ;
74772: LD_VAR 0 3
74776: PPUSH
74777: LD_VAR 0 4
74781: PPUSH
74782: LD_VAR 0 5
74786: PPUSH
74787: CALL_OW 131
// end ; end ;
74791: GO 74456
74793: POP
74794: POP
// end ;
74795: GO 74012
74797: POP
74798: POP
// end ;
74799: LD_VAR 0 1
74803: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
74804: LD_INT 0
74806: PPUSH
74807: PPUSH
74808: PPUSH
74809: PPUSH
74810: PPUSH
74811: PPUSH
74812: PPUSH
74813: PPUSH
// if not mc_bases then
74814: LD_EXP 45
74818: NOT
74819: IFFALSE 74823
// exit ;
74821: GO 75449
// for i = 1 to mc_bases do
74823: LD_ADDR_VAR 0 2
74827: PUSH
74828: DOUBLE
74829: LD_INT 1
74831: DEC
74832: ST_TO_ADDR
74833: LD_EXP 45
74837: PUSH
74838: FOR_TO
74839: IFFALSE 75447
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
74841: LD_EXP 74
74845: PUSH
74846: LD_VAR 0 2
74850: ARRAY
74851: NOT
74852: PUSH
74853: LD_EXP 74
74857: PUSH
74858: LD_VAR 0 2
74862: ARRAY
74863: PPUSH
74864: LD_INT 25
74866: PUSH
74867: LD_INT 12
74869: PUSH
74870: EMPTY
74871: LIST
74872: LIST
74873: PPUSH
74874: CALL_OW 72
74878: NOT
74879: OR
74880: IFFALSE 74884
// continue ;
74882: GO 74838
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
74884: LD_ADDR_VAR 0 5
74888: PUSH
74889: LD_EXP 74
74893: PUSH
74894: LD_VAR 0 2
74898: ARRAY
74899: PUSH
74900: LD_INT 1
74902: ARRAY
74903: PPUSH
74904: CALL_OW 255
74908: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
74909: LD_VAR 0 5
74913: PPUSH
74914: LD_INT 2
74916: PPUSH
74917: CALL_OW 325
74921: IFFALSE 75174
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
74923: LD_ADDR_VAR 0 4
74927: PUSH
74928: LD_EXP 74
74932: PUSH
74933: LD_VAR 0 2
74937: ARRAY
74938: PPUSH
74939: LD_INT 25
74941: PUSH
74942: LD_INT 16
74944: PUSH
74945: EMPTY
74946: LIST
74947: LIST
74948: PPUSH
74949: CALL_OW 72
74953: ST_TO_ADDR
// if tmp < 6 then
74954: LD_VAR 0 4
74958: PUSH
74959: LD_INT 6
74961: LESS
74962: IFFALSE 75174
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
74964: LD_ADDR_VAR 0 6
74968: PUSH
74969: LD_EXP 45
74973: PUSH
74974: LD_VAR 0 2
74978: ARRAY
74979: PPUSH
74980: LD_INT 2
74982: PUSH
74983: LD_INT 30
74985: PUSH
74986: LD_INT 0
74988: PUSH
74989: EMPTY
74990: LIST
74991: LIST
74992: PUSH
74993: LD_INT 30
74995: PUSH
74996: LD_INT 1
74998: PUSH
74999: EMPTY
75000: LIST
75001: LIST
75002: PUSH
75003: EMPTY
75004: LIST
75005: LIST
75006: LIST
75007: PPUSH
75008: CALL_OW 72
75012: ST_TO_ADDR
// if depot then
75013: LD_VAR 0 6
75017: IFFALSE 75174
// begin selected := 0 ;
75019: LD_ADDR_VAR 0 7
75023: PUSH
75024: LD_INT 0
75026: ST_TO_ADDR
// for j in depot do
75027: LD_ADDR_VAR 0 3
75031: PUSH
75032: LD_VAR 0 6
75036: PUSH
75037: FOR_IN
75038: IFFALSE 75069
// begin if UnitsInside ( j ) < 6 then
75040: LD_VAR 0 3
75044: PPUSH
75045: CALL_OW 313
75049: PUSH
75050: LD_INT 6
75052: LESS
75053: IFFALSE 75067
// begin selected := j ;
75055: LD_ADDR_VAR 0 7
75059: PUSH
75060: LD_VAR 0 3
75064: ST_TO_ADDR
// break ;
75065: GO 75069
// end ; end ;
75067: GO 75037
75069: POP
75070: POP
// if selected then
75071: LD_VAR 0 7
75075: IFFALSE 75174
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
75077: LD_ADDR_VAR 0 3
75081: PUSH
75082: LD_EXP 74
75086: PUSH
75087: LD_VAR 0 2
75091: ARRAY
75092: PPUSH
75093: LD_INT 25
75095: PUSH
75096: LD_INT 12
75098: PUSH
75099: EMPTY
75100: LIST
75101: LIST
75102: PPUSH
75103: CALL_OW 72
75107: PUSH
75108: FOR_IN
75109: IFFALSE 75172
// if not HasTask ( j ) then
75111: LD_VAR 0 3
75115: PPUSH
75116: CALL_OW 314
75120: NOT
75121: IFFALSE 75170
// begin if not IsInUnit ( j ) then
75123: LD_VAR 0 3
75127: PPUSH
75128: CALL_OW 310
75132: NOT
75133: IFFALSE 75149
// ComEnterUnit ( j , selected ) ;
75135: LD_VAR 0 3
75139: PPUSH
75140: LD_VAR 0 7
75144: PPUSH
75145: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
75149: LD_VAR 0 3
75153: PPUSH
75154: LD_INT 16
75156: PPUSH
75157: CALL_OW 183
// AddComExitBuilding ( j ) ;
75161: LD_VAR 0 3
75165: PPUSH
75166: CALL_OW 182
// end ;
75170: GO 75108
75172: POP
75173: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
75174: LD_VAR 0 5
75178: PPUSH
75179: LD_INT 11
75181: PPUSH
75182: CALL_OW 325
75186: IFFALSE 75445
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
75188: LD_ADDR_VAR 0 4
75192: PUSH
75193: LD_EXP 74
75197: PUSH
75198: LD_VAR 0 2
75202: ARRAY
75203: PPUSH
75204: LD_INT 25
75206: PUSH
75207: LD_INT 16
75209: PUSH
75210: EMPTY
75211: LIST
75212: LIST
75213: PPUSH
75214: CALL_OW 72
75218: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
75219: LD_VAR 0 4
75223: PUSH
75224: LD_INT 6
75226: GREATEREQUAL
75227: PUSH
75228: LD_VAR 0 5
75232: PPUSH
75233: LD_INT 2
75235: PPUSH
75236: CALL_OW 325
75240: NOT
75241: OR
75242: IFFALSE 75445
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
75244: LD_ADDR_VAR 0 8
75248: PUSH
75249: LD_EXP 45
75253: PUSH
75254: LD_VAR 0 2
75258: ARRAY
75259: PPUSH
75260: LD_INT 2
75262: PUSH
75263: LD_INT 30
75265: PUSH
75266: LD_INT 4
75268: PUSH
75269: EMPTY
75270: LIST
75271: LIST
75272: PUSH
75273: LD_INT 30
75275: PUSH
75276: LD_INT 5
75278: PUSH
75279: EMPTY
75280: LIST
75281: LIST
75282: PUSH
75283: EMPTY
75284: LIST
75285: LIST
75286: LIST
75287: PPUSH
75288: CALL_OW 72
75292: ST_TO_ADDR
// if barracks then
75293: LD_VAR 0 8
75297: IFFALSE 75445
// begin selected := 0 ;
75299: LD_ADDR_VAR 0 7
75303: PUSH
75304: LD_INT 0
75306: ST_TO_ADDR
// for j in barracks do
75307: LD_ADDR_VAR 0 3
75311: PUSH
75312: LD_VAR 0 8
75316: PUSH
75317: FOR_IN
75318: IFFALSE 75349
// begin if UnitsInside ( j ) < 6 then
75320: LD_VAR 0 3
75324: PPUSH
75325: CALL_OW 313
75329: PUSH
75330: LD_INT 6
75332: LESS
75333: IFFALSE 75347
// begin selected := j ;
75335: LD_ADDR_VAR 0 7
75339: PUSH
75340: LD_VAR 0 3
75344: ST_TO_ADDR
// break ;
75345: GO 75349
// end ; end ;
75347: GO 75317
75349: POP
75350: POP
// if selected then
75351: LD_VAR 0 7
75355: IFFALSE 75445
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
75357: LD_ADDR_VAR 0 3
75361: PUSH
75362: LD_EXP 74
75366: PUSH
75367: LD_VAR 0 2
75371: ARRAY
75372: PPUSH
75373: LD_INT 25
75375: PUSH
75376: LD_INT 12
75378: PUSH
75379: EMPTY
75380: LIST
75381: LIST
75382: PPUSH
75383: CALL_OW 72
75387: PUSH
75388: FOR_IN
75389: IFFALSE 75443
// if not IsInUnit ( j ) and not HasTask ( j ) then
75391: LD_VAR 0 3
75395: PPUSH
75396: CALL_OW 310
75400: NOT
75401: PUSH
75402: LD_VAR 0 3
75406: PPUSH
75407: CALL_OW 314
75411: NOT
75412: AND
75413: IFFALSE 75441
// begin ComEnterUnit ( j , selected ) ;
75415: LD_VAR 0 3
75419: PPUSH
75420: LD_VAR 0 7
75424: PPUSH
75425: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
75429: LD_VAR 0 3
75433: PPUSH
75434: LD_INT 15
75436: PPUSH
75437: CALL_OW 183
// end ;
75441: GO 75388
75443: POP
75444: POP
// end ; end ; end ; end ; end ;
75445: GO 74838
75447: POP
75448: POP
// end ;
75449: LD_VAR 0 1
75453: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
75454: LD_INT 0
75456: PPUSH
75457: PPUSH
75458: PPUSH
75459: PPUSH
// if not mc_bases then
75460: LD_EXP 45
75464: NOT
75465: IFFALSE 75469
// exit ;
75467: GO 75647
// for i = 1 to mc_bases do
75469: LD_ADDR_VAR 0 2
75473: PUSH
75474: DOUBLE
75475: LD_INT 1
75477: DEC
75478: ST_TO_ADDR
75479: LD_EXP 45
75483: PUSH
75484: FOR_TO
75485: IFFALSE 75645
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
75487: LD_ADDR_VAR 0 4
75491: PUSH
75492: LD_EXP 45
75496: PUSH
75497: LD_VAR 0 2
75501: ARRAY
75502: PPUSH
75503: LD_INT 25
75505: PUSH
75506: LD_INT 9
75508: PUSH
75509: EMPTY
75510: LIST
75511: LIST
75512: PPUSH
75513: CALL_OW 72
75517: ST_TO_ADDR
// if not tmp then
75518: LD_VAR 0 4
75522: NOT
75523: IFFALSE 75527
// continue ;
75525: GO 75484
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
75527: LD_EXP 71
75531: PUSH
75532: LD_VAR 0 2
75536: ARRAY
75537: PPUSH
75538: LD_INT 29
75540: PPUSH
75541: CALL_OW 325
75545: NOT
75546: PUSH
75547: LD_EXP 71
75551: PUSH
75552: LD_VAR 0 2
75556: ARRAY
75557: PPUSH
75558: LD_INT 28
75560: PPUSH
75561: CALL_OW 325
75565: NOT
75566: AND
75567: IFFALSE 75571
// continue ;
75569: GO 75484
// for j in tmp do
75571: LD_ADDR_VAR 0 3
75575: PUSH
75576: LD_VAR 0 4
75580: PUSH
75581: FOR_IN
75582: IFFALSE 75641
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
75584: LD_VAR 0 3
75588: PUSH
75589: LD_EXP 48
75593: PUSH
75594: LD_VAR 0 2
75598: ARRAY
75599: PUSH
75600: LD_INT 1
75602: ARRAY
75603: IN
75604: NOT
75605: PUSH
75606: LD_VAR 0 3
75610: PUSH
75611: LD_EXP 48
75615: PUSH
75616: LD_VAR 0 2
75620: ARRAY
75621: PUSH
75622: LD_INT 2
75624: ARRAY
75625: IN
75626: NOT
75627: AND
75628: IFFALSE 75639
// ComSpaceTimeShoot ( j ) ;
75630: LD_VAR 0 3
75634: PPUSH
75635: CALL 20298 0 1
75639: GO 75581
75641: POP
75642: POP
// end ;
75643: GO 75484
75645: POP
75646: POP
// end ;
75647: LD_VAR 0 1
75651: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
75652: LD_INT 0
75654: PPUSH
75655: PPUSH
75656: PPUSH
75657: PPUSH
75658: PPUSH
75659: PPUSH
75660: PPUSH
75661: PPUSH
75662: PPUSH
// if not mc_bases then
75663: LD_EXP 45
75667: NOT
75668: IFFALSE 75672
// exit ;
75670: GO 76294
// for i = 1 to mc_bases do
75672: LD_ADDR_VAR 0 2
75676: PUSH
75677: DOUBLE
75678: LD_INT 1
75680: DEC
75681: ST_TO_ADDR
75682: LD_EXP 45
75686: PUSH
75687: FOR_TO
75688: IFFALSE 76292
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
75690: LD_EXP 80
75694: PUSH
75695: LD_VAR 0 2
75699: ARRAY
75700: NOT
75701: PUSH
75702: LD_INT 38
75704: PPUSH
75705: LD_EXP 71
75709: PUSH
75710: LD_VAR 0 2
75714: ARRAY
75715: PPUSH
75716: CALL_OW 321
75720: PUSH
75721: LD_INT 2
75723: NONEQUAL
75724: OR
75725: IFFALSE 75729
// continue ;
75727: GO 75687
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
75729: LD_ADDR_VAR 0 8
75733: PUSH
75734: LD_EXP 45
75738: PUSH
75739: LD_VAR 0 2
75743: ARRAY
75744: PPUSH
75745: LD_INT 30
75747: PUSH
75748: LD_INT 34
75750: PUSH
75751: EMPTY
75752: LIST
75753: LIST
75754: PPUSH
75755: CALL_OW 72
75759: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
75760: LD_ADDR_VAR 0 9
75764: PUSH
75765: LD_EXP 45
75769: PUSH
75770: LD_VAR 0 2
75774: ARRAY
75775: PPUSH
75776: LD_INT 25
75778: PUSH
75779: LD_INT 4
75781: PUSH
75782: EMPTY
75783: LIST
75784: LIST
75785: PPUSH
75786: CALL_OW 72
75790: PPUSH
75791: LD_INT 0
75793: PPUSH
75794: CALL 52862 0 2
75798: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
75799: LD_VAR 0 9
75803: NOT
75804: PUSH
75805: LD_VAR 0 8
75809: NOT
75810: OR
75811: PUSH
75812: LD_EXP 45
75816: PUSH
75817: LD_VAR 0 2
75821: ARRAY
75822: PPUSH
75823: LD_INT 124
75825: PPUSH
75826: CALL 52862 0 2
75830: OR
75831: IFFALSE 75835
// continue ;
75833: GO 75687
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
75835: LD_EXP 81
75839: PUSH
75840: LD_VAR 0 2
75844: ARRAY
75845: PUSH
75846: LD_EXP 80
75850: PUSH
75851: LD_VAR 0 2
75855: ARRAY
75856: LESS
75857: PUSH
75858: LD_EXP 81
75862: PUSH
75863: LD_VAR 0 2
75867: ARRAY
75868: PUSH
75869: LD_VAR 0 8
75873: LESS
75874: AND
75875: IFFALSE 76290
// begin tmp := sci [ 1 ] ;
75877: LD_ADDR_VAR 0 7
75881: PUSH
75882: LD_VAR 0 9
75886: PUSH
75887: LD_INT 1
75889: ARRAY
75890: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
75891: LD_VAR 0 7
75895: PPUSH
75896: LD_INT 124
75898: PPUSH
75899: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
75903: LD_ADDR_VAR 0 3
75907: PUSH
75908: DOUBLE
75909: LD_EXP 80
75913: PUSH
75914: LD_VAR 0 2
75918: ARRAY
75919: INC
75920: ST_TO_ADDR
75921: LD_EXP 80
75925: PUSH
75926: LD_VAR 0 2
75930: ARRAY
75931: PUSH
75932: FOR_DOWNTO
75933: IFFALSE 76276
// begin if IsInUnit ( tmp ) then
75935: LD_VAR 0 7
75939: PPUSH
75940: CALL_OW 310
75944: IFFALSE 75955
// ComExitBuilding ( tmp ) ;
75946: LD_VAR 0 7
75950: PPUSH
75951: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
75955: LD_INT 35
75957: PPUSH
75958: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
75962: LD_VAR 0 7
75966: PPUSH
75967: CALL_OW 310
75971: NOT
75972: PUSH
75973: LD_VAR 0 7
75977: PPUSH
75978: CALL_OW 314
75982: NOT
75983: AND
75984: IFFALSE 75955
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
75986: LD_ADDR_VAR 0 6
75990: PUSH
75991: LD_VAR 0 7
75995: PPUSH
75996: CALL_OW 250
76000: PUSH
76001: LD_VAR 0 7
76005: PPUSH
76006: CALL_OW 251
76010: PUSH
76011: EMPTY
76012: LIST
76013: LIST
76014: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
76015: LD_INT 35
76017: PPUSH
76018: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
76022: LD_ADDR_VAR 0 4
76026: PUSH
76027: LD_EXP 80
76031: PUSH
76032: LD_VAR 0 2
76036: ARRAY
76037: PUSH
76038: LD_VAR 0 3
76042: ARRAY
76043: PUSH
76044: LD_INT 1
76046: ARRAY
76047: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
76048: LD_ADDR_VAR 0 5
76052: PUSH
76053: LD_EXP 80
76057: PUSH
76058: LD_VAR 0 2
76062: ARRAY
76063: PUSH
76064: LD_VAR 0 3
76068: ARRAY
76069: PUSH
76070: LD_INT 2
76072: ARRAY
76073: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
76074: LD_VAR 0 7
76078: PPUSH
76079: LD_INT 10
76081: PPUSH
76082: CALL 26894 0 2
76086: PUSH
76087: LD_INT 4
76089: ARRAY
76090: IFFALSE 76128
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
76092: LD_VAR 0 7
76096: PPUSH
76097: LD_VAR 0 6
76101: PUSH
76102: LD_INT 1
76104: ARRAY
76105: PPUSH
76106: LD_VAR 0 6
76110: PUSH
76111: LD_INT 2
76113: ARRAY
76114: PPUSH
76115: CALL_OW 111
// wait ( 0 0$10 ) ;
76119: LD_INT 350
76121: PPUSH
76122: CALL_OW 67
// end else
76126: GO 76154
// begin ComMoveXY ( tmp , x , y ) ;
76128: LD_VAR 0 7
76132: PPUSH
76133: LD_VAR 0 4
76137: PPUSH
76138: LD_VAR 0 5
76142: PPUSH
76143: CALL_OW 111
// wait ( 0 0$3 ) ;
76147: LD_INT 105
76149: PPUSH
76150: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
76154: LD_VAR 0 7
76158: PPUSH
76159: LD_VAR 0 4
76163: PPUSH
76164: LD_VAR 0 5
76168: PPUSH
76169: CALL_OW 307
76173: IFFALSE 76015
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
76175: LD_VAR 0 7
76179: PPUSH
76180: LD_VAR 0 4
76184: PPUSH
76185: LD_VAR 0 5
76189: PPUSH
76190: LD_VAR 0 8
76194: PUSH
76195: LD_VAR 0 3
76199: ARRAY
76200: PPUSH
76201: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
76205: LD_INT 35
76207: PPUSH
76208: CALL_OW 67
// until not HasTask ( tmp ) ;
76212: LD_VAR 0 7
76216: PPUSH
76217: CALL_OW 314
76221: NOT
76222: IFFALSE 76205
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
76224: LD_ADDR_EXP 81
76228: PUSH
76229: LD_EXP 81
76233: PPUSH
76234: LD_VAR 0 2
76238: PUSH
76239: LD_EXP 81
76243: PUSH
76244: LD_VAR 0 2
76248: ARRAY
76249: PUSH
76250: LD_INT 1
76252: PLUS
76253: PUSH
76254: EMPTY
76255: LIST
76256: LIST
76257: PPUSH
76258: LD_VAR 0 8
76262: PUSH
76263: LD_VAR 0 3
76267: ARRAY
76268: PPUSH
76269: CALL 24301 0 3
76273: ST_TO_ADDR
// end ;
76274: GO 75932
76276: POP
76277: POP
// MC_Reset ( i , 124 ) ;
76278: LD_VAR 0 2
76282: PPUSH
76283: LD_INT 124
76285: PPUSH
76286: CALL 59897 0 2
// end ; end ;
76290: GO 75687
76292: POP
76293: POP
// end ;
76294: LD_VAR 0 1
76298: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
76299: LD_INT 0
76301: PPUSH
76302: PPUSH
76303: PPUSH
// if not mc_bases then
76304: LD_EXP 45
76308: NOT
76309: IFFALSE 76313
// exit ;
76311: GO 76919
// for i = 1 to mc_bases do
76313: LD_ADDR_VAR 0 2
76317: PUSH
76318: DOUBLE
76319: LD_INT 1
76321: DEC
76322: ST_TO_ADDR
76323: LD_EXP 45
76327: PUSH
76328: FOR_TO
76329: IFFALSE 76917
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
76331: LD_ADDR_VAR 0 3
76335: PUSH
76336: LD_EXP 45
76340: PUSH
76341: LD_VAR 0 2
76345: ARRAY
76346: PPUSH
76347: LD_INT 25
76349: PUSH
76350: LD_INT 4
76352: PUSH
76353: EMPTY
76354: LIST
76355: LIST
76356: PPUSH
76357: CALL_OW 72
76361: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
76362: LD_VAR 0 3
76366: NOT
76367: PUSH
76368: LD_EXP 82
76372: PUSH
76373: LD_VAR 0 2
76377: ARRAY
76378: NOT
76379: OR
76380: PUSH
76381: LD_EXP 45
76385: PUSH
76386: LD_VAR 0 2
76390: ARRAY
76391: PPUSH
76392: LD_INT 2
76394: PUSH
76395: LD_INT 30
76397: PUSH
76398: LD_INT 0
76400: PUSH
76401: EMPTY
76402: LIST
76403: LIST
76404: PUSH
76405: LD_INT 30
76407: PUSH
76408: LD_INT 1
76410: PUSH
76411: EMPTY
76412: LIST
76413: LIST
76414: PUSH
76415: EMPTY
76416: LIST
76417: LIST
76418: LIST
76419: PPUSH
76420: CALL_OW 72
76424: NOT
76425: OR
76426: IFFALSE 76476
// begin if mc_deposits_finder [ i ] then
76428: LD_EXP 83
76432: PUSH
76433: LD_VAR 0 2
76437: ARRAY
76438: IFFALSE 76474
// begin MC_Reset ( i , 125 ) ;
76440: LD_VAR 0 2
76444: PPUSH
76445: LD_INT 125
76447: PPUSH
76448: CALL 59897 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
76452: LD_ADDR_EXP 83
76456: PUSH
76457: LD_EXP 83
76461: PPUSH
76462: LD_VAR 0 2
76466: PPUSH
76467: EMPTY
76468: PPUSH
76469: CALL_OW 1
76473: ST_TO_ADDR
// end ; continue ;
76474: GO 76328
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
76476: LD_EXP 82
76480: PUSH
76481: LD_VAR 0 2
76485: ARRAY
76486: PUSH
76487: LD_INT 1
76489: ARRAY
76490: PUSH
76491: LD_INT 3
76493: ARRAY
76494: PUSH
76495: LD_INT 1
76497: EQUAL
76498: PUSH
76499: LD_INT 20
76501: PPUSH
76502: LD_EXP 71
76506: PUSH
76507: LD_VAR 0 2
76511: ARRAY
76512: PPUSH
76513: CALL_OW 321
76517: PUSH
76518: LD_INT 2
76520: NONEQUAL
76521: AND
76522: IFFALSE 76572
// begin if mc_deposits_finder [ i ] then
76524: LD_EXP 83
76528: PUSH
76529: LD_VAR 0 2
76533: ARRAY
76534: IFFALSE 76570
// begin MC_Reset ( i , 125 ) ;
76536: LD_VAR 0 2
76540: PPUSH
76541: LD_INT 125
76543: PPUSH
76544: CALL 59897 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
76548: LD_ADDR_EXP 83
76552: PUSH
76553: LD_EXP 83
76557: PPUSH
76558: LD_VAR 0 2
76562: PPUSH
76563: EMPTY
76564: PPUSH
76565: CALL_OW 1
76569: ST_TO_ADDR
// end ; continue ;
76570: GO 76328
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
76572: LD_EXP 82
76576: PUSH
76577: LD_VAR 0 2
76581: ARRAY
76582: PUSH
76583: LD_INT 1
76585: ARRAY
76586: PUSH
76587: LD_INT 1
76589: ARRAY
76590: PPUSH
76591: LD_EXP 82
76595: PUSH
76596: LD_VAR 0 2
76600: ARRAY
76601: PUSH
76602: LD_INT 1
76604: ARRAY
76605: PUSH
76606: LD_INT 2
76608: ARRAY
76609: PPUSH
76610: LD_EXP 71
76614: PUSH
76615: LD_VAR 0 2
76619: ARRAY
76620: PPUSH
76621: CALL_OW 440
76625: IFFALSE 76668
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
76627: LD_ADDR_EXP 82
76631: PUSH
76632: LD_EXP 82
76636: PPUSH
76637: LD_VAR 0 2
76641: PPUSH
76642: LD_EXP 82
76646: PUSH
76647: LD_VAR 0 2
76651: ARRAY
76652: PPUSH
76653: LD_INT 1
76655: PPUSH
76656: CALL_OW 3
76660: PPUSH
76661: CALL_OW 1
76665: ST_TO_ADDR
76666: GO 76915
// begin if not mc_deposits_finder [ i ] then
76668: LD_EXP 83
76672: PUSH
76673: LD_VAR 0 2
76677: ARRAY
76678: NOT
76679: IFFALSE 76731
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
76681: LD_ADDR_EXP 83
76685: PUSH
76686: LD_EXP 83
76690: PPUSH
76691: LD_VAR 0 2
76695: PPUSH
76696: LD_VAR 0 3
76700: PUSH
76701: LD_INT 1
76703: ARRAY
76704: PUSH
76705: EMPTY
76706: LIST
76707: PPUSH
76708: CALL_OW 1
76712: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
76713: LD_VAR 0 3
76717: PUSH
76718: LD_INT 1
76720: ARRAY
76721: PPUSH
76722: LD_INT 125
76724: PPUSH
76725: CALL_OW 109
// end else
76729: GO 76915
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
76731: LD_EXP 83
76735: PUSH
76736: LD_VAR 0 2
76740: ARRAY
76741: PUSH
76742: LD_INT 1
76744: ARRAY
76745: PPUSH
76746: CALL_OW 310
76750: IFFALSE 76773
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
76752: LD_EXP 83
76756: PUSH
76757: LD_VAR 0 2
76761: ARRAY
76762: PUSH
76763: LD_INT 1
76765: ARRAY
76766: PPUSH
76767: CALL_OW 122
76771: GO 76915
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
76773: LD_EXP 83
76777: PUSH
76778: LD_VAR 0 2
76782: ARRAY
76783: PUSH
76784: LD_INT 1
76786: ARRAY
76787: PPUSH
76788: CALL_OW 314
76792: NOT
76793: PUSH
76794: LD_EXP 83
76798: PUSH
76799: LD_VAR 0 2
76803: ARRAY
76804: PUSH
76805: LD_INT 1
76807: ARRAY
76808: PPUSH
76809: LD_EXP 82
76813: PUSH
76814: LD_VAR 0 2
76818: ARRAY
76819: PUSH
76820: LD_INT 1
76822: ARRAY
76823: PUSH
76824: LD_INT 1
76826: ARRAY
76827: PPUSH
76828: LD_EXP 82
76832: PUSH
76833: LD_VAR 0 2
76837: ARRAY
76838: PUSH
76839: LD_INT 1
76841: ARRAY
76842: PUSH
76843: LD_INT 2
76845: ARRAY
76846: PPUSH
76847: CALL_OW 297
76851: PUSH
76852: LD_INT 6
76854: GREATER
76855: AND
76856: IFFALSE 76915
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
76858: LD_EXP 83
76862: PUSH
76863: LD_VAR 0 2
76867: ARRAY
76868: PUSH
76869: LD_INT 1
76871: ARRAY
76872: PPUSH
76873: LD_EXP 82
76877: PUSH
76878: LD_VAR 0 2
76882: ARRAY
76883: PUSH
76884: LD_INT 1
76886: ARRAY
76887: PUSH
76888: LD_INT 1
76890: ARRAY
76891: PPUSH
76892: LD_EXP 82
76896: PUSH
76897: LD_VAR 0 2
76901: ARRAY
76902: PUSH
76903: LD_INT 1
76905: ARRAY
76906: PUSH
76907: LD_INT 2
76909: ARRAY
76910: PPUSH
76911: CALL_OW 111
// end ; end ; end ;
76915: GO 76328
76917: POP
76918: POP
// end ;
76919: LD_VAR 0 1
76923: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
76924: LD_INT 0
76926: PPUSH
76927: PPUSH
76928: PPUSH
76929: PPUSH
76930: PPUSH
76931: PPUSH
76932: PPUSH
76933: PPUSH
76934: PPUSH
76935: PPUSH
76936: PPUSH
// if not mc_bases then
76937: LD_EXP 45
76941: NOT
76942: IFFALSE 76946
// exit ;
76944: GO 77886
// for i = 1 to mc_bases do
76946: LD_ADDR_VAR 0 2
76950: PUSH
76951: DOUBLE
76952: LD_INT 1
76954: DEC
76955: ST_TO_ADDR
76956: LD_EXP 45
76960: PUSH
76961: FOR_TO
76962: IFFALSE 77884
// begin if not mc_bases [ i ] or mc_scan [ i ] then
76964: LD_EXP 45
76968: PUSH
76969: LD_VAR 0 2
76973: ARRAY
76974: NOT
76975: PUSH
76976: LD_EXP 68
76980: PUSH
76981: LD_VAR 0 2
76985: ARRAY
76986: OR
76987: IFFALSE 76991
// continue ;
76989: GO 76961
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
76991: LD_ADDR_VAR 0 7
76995: PUSH
76996: LD_EXP 45
77000: PUSH
77001: LD_VAR 0 2
77005: ARRAY
77006: PUSH
77007: LD_INT 1
77009: ARRAY
77010: PPUSH
77011: CALL_OW 248
77015: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
77016: LD_VAR 0 7
77020: PUSH
77021: LD_INT 3
77023: EQUAL
77024: PUSH
77025: LD_EXP 64
77029: PUSH
77030: LD_VAR 0 2
77034: ARRAY
77035: PUSH
77036: LD_EXP 67
77040: PUSH
77041: LD_VAR 0 2
77045: ARRAY
77046: UNION
77047: PPUSH
77048: LD_INT 33
77050: PUSH
77051: LD_INT 2
77053: PUSH
77054: EMPTY
77055: LIST
77056: LIST
77057: PPUSH
77058: CALL_OW 72
77062: NOT
77063: OR
77064: IFFALSE 77068
// continue ;
77066: GO 76961
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
77068: LD_ADDR_VAR 0 9
77072: PUSH
77073: LD_EXP 45
77077: PUSH
77078: LD_VAR 0 2
77082: ARRAY
77083: PPUSH
77084: LD_INT 30
77086: PUSH
77087: LD_INT 36
77089: PUSH
77090: EMPTY
77091: LIST
77092: LIST
77093: PPUSH
77094: CALL_OW 72
77098: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
77099: LD_ADDR_VAR 0 10
77103: PUSH
77104: LD_EXP 64
77108: PUSH
77109: LD_VAR 0 2
77113: ARRAY
77114: PPUSH
77115: LD_INT 34
77117: PUSH
77118: LD_INT 31
77120: PUSH
77121: EMPTY
77122: LIST
77123: LIST
77124: PPUSH
77125: CALL_OW 72
77129: ST_TO_ADDR
// if not cts and not mcts then
77130: LD_VAR 0 9
77134: NOT
77135: PUSH
77136: LD_VAR 0 10
77140: NOT
77141: AND
77142: IFFALSE 77146
// continue ;
77144: GO 76961
// x := cts ;
77146: LD_ADDR_VAR 0 11
77150: PUSH
77151: LD_VAR 0 9
77155: ST_TO_ADDR
// if not x then
77156: LD_VAR 0 11
77160: NOT
77161: IFFALSE 77173
// x := mcts ;
77163: LD_ADDR_VAR 0 11
77167: PUSH
77168: LD_VAR 0 10
77172: ST_TO_ADDR
// if not x then
77173: LD_VAR 0 11
77177: NOT
77178: IFFALSE 77182
// continue ;
77180: GO 76961
// if mc_remote_driver [ i ] then
77182: LD_EXP 85
77186: PUSH
77187: LD_VAR 0 2
77191: ARRAY
77192: IFFALSE 77579
// for j in mc_remote_driver [ i ] do
77194: LD_ADDR_VAR 0 3
77198: PUSH
77199: LD_EXP 85
77203: PUSH
77204: LD_VAR 0 2
77208: ARRAY
77209: PUSH
77210: FOR_IN
77211: IFFALSE 77577
// begin if GetClass ( j ) <> 3 then
77213: LD_VAR 0 3
77217: PPUSH
77218: CALL_OW 257
77222: PUSH
77223: LD_INT 3
77225: NONEQUAL
77226: IFFALSE 77279
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
77228: LD_ADDR_EXP 85
77232: PUSH
77233: LD_EXP 85
77237: PPUSH
77238: LD_VAR 0 2
77242: PPUSH
77243: LD_EXP 85
77247: PUSH
77248: LD_VAR 0 2
77252: ARRAY
77253: PUSH
77254: LD_VAR 0 3
77258: DIFF
77259: PPUSH
77260: CALL_OW 1
77264: ST_TO_ADDR
// SetTag ( j , 0 ) ;
77265: LD_VAR 0 3
77269: PPUSH
77270: LD_INT 0
77272: PPUSH
77273: CALL_OW 109
// continue ;
77277: GO 77210
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
77279: LD_EXP 64
77283: PUSH
77284: LD_VAR 0 2
77288: ARRAY
77289: PPUSH
77290: LD_INT 34
77292: PUSH
77293: LD_INT 31
77295: PUSH
77296: EMPTY
77297: LIST
77298: LIST
77299: PUSH
77300: LD_INT 58
77302: PUSH
77303: EMPTY
77304: LIST
77305: PUSH
77306: EMPTY
77307: LIST
77308: LIST
77309: PPUSH
77310: CALL_OW 72
77314: PUSH
77315: LD_VAR 0 3
77319: PPUSH
77320: CALL 52950 0 1
77324: NOT
77325: AND
77326: IFFALSE 77397
// begin if IsInUnit ( j ) then
77328: LD_VAR 0 3
77332: PPUSH
77333: CALL_OW 310
77337: IFFALSE 77348
// ComExitBuilding ( j ) ;
77339: LD_VAR 0 3
77343: PPUSH
77344: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
77348: LD_VAR 0 3
77352: PPUSH
77353: LD_EXP 64
77357: PUSH
77358: LD_VAR 0 2
77362: ARRAY
77363: PPUSH
77364: LD_INT 34
77366: PUSH
77367: LD_INT 31
77369: PUSH
77370: EMPTY
77371: LIST
77372: LIST
77373: PUSH
77374: LD_INT 58
77376: PUSH
77377: EMPTY
77378: LIST
77379: PUSH
77380: EMPTY
77381: LIST
77382: LIST
77383: PPUSH
77384: CALL_OW 72
77388: PUSH
77389: LD_INT 1
77391: ARRAY
77392: PPUSH
77393: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
77397: LD_VAR 0 3
77401: PPUSH
77402: CALL_OW 310
77406: NOT
77407: PUSH
77408: LD_VAR 0 3
77412: PPUSH
77413: CALL_OW 310
77417: PPUSH
77418: CALL_OW 266
77422: PUSH
77423: LD_INT 36
77425: NONEQUAL
77426: PUSH
77427: LD_VAR 0 3
77431: PPUSH
77432: CALL 52950 0 1
77436: NOT
77437: AND
77438: OR
77439: IFFALSE 77575
// begin if IsInUnit ( j ) then
77441: LD_VAR 0 3
77445: PPUSH
77446: CALL_OW 310
77450: IFFALSE 77461
// ComExitBuilding ( j ) ;
77452: LD_VAR 0 3
77456: PPUSH
77457: CALL_OW 122
// ct := 0 ;
77461: LD_ADDR_VAR 0 8
77465: PUSH
77466: LD_INT 0
77468: ST_TO_ADDR
// for k in x do
77469: LD_ADDR_VAR 0 4
77473: PUSH
77474: LD_VAR 0 11
77478: PUSH
77479: FOR_IN
77480: IFFALSE 77553
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
77482: LD_VAR 0 4
77486: PPUSH
77487: CALL_OW 264
77491: PUSH
77492: LD_INT 31
77494: EQUAL
77495: PUSH
77496: LD_VAR 0 4
77500: PPUSH
77501: CALL_OW 311
77505: NOT
77506: AND
77507: PUSH
77508: LD_VAR 0 4
77512: PPUSH
77513: CALL_OW 266
77517: PUSH
77518: LD_INT 36
77520: EQUAL
77521: PUSH
77522: LD_VAR 0 4
77526: PPUSH
77527: CALL_OW 313
77531: PUSH
77532: LD_INT 3
77534: LESS
77535: AND
77536: OR
77537: IFFALSE 77551
// begin ct := k ;
77539: LD_ADDR_VAR 0 8
77543: PUSH
77544: LD_VAR 0 4
77548: ST_TO_ADDR
// break ;
77549: GO 77553
// end ;
77551: GO 77479
77553: POP
77554: POP
// if ct then
77555: LD_VAR 0 8
77559: IFFALSE 77575
// ComEnterUnit ( j , ct ) ;
77561: LD_VAR 0 3
77565: PPUSH
77566: LD_VAR 0 8
77570: PPUSH
77571: CALL_OW 120
// end ; end ;
77575: GO 77210
77577: POP
77578: POP
// places := 0 ;
77579: LD_ADDR_VAR 0 5
77583: PUSH
77584: LD_INT 0
77586: ST_TO_ADDR
// for j = 1 to x do
77587: LD_ADDR_VAR 0 3
77591: PUSH
77592: DOUBLE
77593: LD_INT 1
77595: DEC
77596: ST_TO_ADDR
77597: LD_VAR 0 11
77601: PUSH
77602: FOR_TO
77603: IFFALSE 77679
// if GetWeapon ( x [ j ] ) = ar_control_tower then
77605: LD_VAR 0 11
77609: PUSH
77610: LD_VAR 0 3
77614: ARRAY
77615: PPUSH
77616: CALL_OW 264
77620: PUSH
77621: LD_INT 31
77623: EQUAL
77624: IFFALSE 77642
// places := places + 1 else
77626: LD_ADDR_VAR 0 5
77630: PUSH
77631: LD_VAR 0 5
77635: PUSH
77636: LD_INT 1
77638: PLUS
77639: ST_TO_ADDR
77640: GO 77677
// if GetBType ( x [ j ] ) = b_control_tower then
77642: LD_VAR 0 11
77646: PUSH
77647: LD_VAR 0 3
77651: ARRAY
77652: PPUSH
77653: CALL_OW 266
77657: PUSH
77658: LD_INT 36
77660: EQUAL
77661: IFFALSE 77677
// places := places + 3 ;
77663: LD_ADDR_VAR 0 5
77667: PUSH
77668: LD_VAR 0 5
77672: PUSH
77673: LD_INT 3
77675: PLUS
77676: ST_TO_ADDR
77677: GO 77602
77679: POP
77680: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
77681: LD_VAR 0 5
77685: PUSH
77686: LD_INT 0
77688: EQUAL
77689: PUSH
77690: LD_VAR 0 5
77694: PUSH
77695: LD_EXP 85
77699: PUSH
77700: LD_VAR 0 2
77704: ARRAY
77705: LESSEQUAL
77706: OR
77707: IFFALSE 77711
// continue ;
77709: GO 76961
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
77711: LD_ADDR_VAR 0 6
77715: PUSH
77716: LD_EXP 45
77720: PUSH
77721: LD_VAR 0 2
77725: ARRAY
77726: PPUSH
77727: LD_INT 25
77729: PUSH
77730: LD_INT 3
77732: PUSH
77733: EMPTY
77734: LIST
77735: LIST
77736: PPUSH
77737: CALL_OW 72
77741: PUSH
77742: LD_EXP 85
77746: PUSH
77747: LD_VAR 0 2
77751: ARRAY
77752: DIFF
77753: PPUSH
77754: LD_INT 3
77756: PPUSH
77757: CALL 53850 0 2
77761: ST_TO_ADDR
// for j in tmp do
77762: LD_ADDR_VAR 0 3
77766: PUSH
77767: LD_VAR 0 6
77771: PUSH
77772: FOR_IN
77773: IFFALSE 77808
// if GetTag ( j ) > 0 then
77775: LD_VAR 0 3
77779: PPUSH
77780: CALL_OW 110
77784: PUSH
77785: LD_INT 0
77787: GREATER
77788: IFFALSE 77806
// tmp := tmp diff j ;
77790: LD_ADDR_VAR 0 6
77794: PUSH
77795: LD_VAR 0 6
77799: PUSH
77800: LD_VAR 0 3
77804: DIFF
77805: ST_TO_ADDR
77806: GO 77772
77808: POP
77809: POP
// if not tmp then
77810: LD_VAR 0 6
77814: NOT
77815: IFFALSE 77819
// continue ;
77817: GO 76961
// if places then
77819: LD_VAR 0 5
77823: IFFALSE 77882
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
77825: LD_ADDR_EXP 85
77829: PUSH
77830: LD_EXP 85
77834: PPUSH
77835: LD_VAR 0 2
77839: PPUSH
77840: LD_EXP 85
77844: PUSH
77845: LD_VAR 0 2
77849: ARRAY
77850: PUSH
77851: LD_VAR 0 6
77855: PUSH
77856: LD_INT 1
77858: ARRAY
77859: UNION
77860: PPUSH
77861: CALL_OW 1
77865: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
77866: LD_VAR 0 6
77870: PUSH
77871: LD_INT 1
77873: ARRAY
77874: PPUSH
77875: LD_INT 126
77877: PPUSH
77878: CALL_OW 109
// end ; end ;
77882: GO 76961
77884: POP
77885: POP
// end ;
77886: LD_VAR 0 1
77890: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
77891: LD_INT 0
77893: PPUSH
77894: PPUSH
77895: PPUSH
77896: PPUSH
77897: PPUSH
77898: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
77899: LD_VAR 0 1
77903: NOT
77904: PUSH
77905: LD_VAR 0 2
77909: NOT
77910: OR
77911: PUSH
77912: LD_VAR 0 3
77916: NOT
77917: OR
77918: PUSH
77919: LD_VAR 0 4
77923: PUSH
77924: LD_INT 1
77926: PUSH
77927: LD_INT 2
77929: PUSH
77930: LD_INT 3
77932: PUSH
77933: LD_INT 4
77935: PUSH
77936: LD_INT 5
77938: PUSH
77939: LD_INT 8
77941: PUSH
77942: LD_INT 9
77944: PUSH
77945: LD_INT 15
77947: PUSH
77948: LD_INT 16
77950: PUSH
77951: EMPTY
77952: LIST
77953: LIST
77954: LIST
77955: LIST
77956: LIST
77957: LIST
77958: LIST
77959: LIST
77960: LIST
77961: IN
77962: NOT
77963: OR
77964: IFFALSE 77968
// exit ;
77966: GO 78868
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
77968: LD_ADDR_VAR 0 2
77972: PUSH
77973: LD_VAR 0 2
77977: PPUSH
77978: LD_INT 21
77980: PUSH
77981: LD_INT 3
77983: PUSH
77984: EMPTY
77985: LIST
77986: LIST
77987: PUSH
77988: LD_INT 24
77990: PUSH
77991: LD_INT 250
77993: PUSH
77994: EMPTY
77995: LIST
77996: LIST
77997: PUSH
77998: EMPTY
77999: LIST
78000: LIST
78001: PPUSH
78002: CALL_OW 72
78006: ST_TO_ADDR
// case class of 1 , 15 :
78007: LD_VAR 0 4
78011: PUSH
78012: LD_INT 1
78014: DOUBLE
78015: EQUAL
78016: IFTRUE 78026
78018: LD_INT 15
78020: DOUBLE
78021: EQUAL
78022: IFTRUE 78026
78024: GO 78111
78026: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
78027: LD_ADDR_VAR 0 8
78031: PUSH
78032: LD_VAR 0 2
78036: PPUSH
78037: LD_INT 2
78039: PUSH
78040: LD_INT 30
78042: PUSH
78043: LD_INT 32
78045: PUSH
78046: EMPTY
78047: LIST
78048: LIST
78049: PUSH
78050: LD_INT 30
78052: PUSH
78053: LD_INT 31
78055: PUSH
78056: EMPTY
78057: LIST
78058: LIST
78059: PUSH
78060: EMPTY
78061: LIST
78062: LIST
78063: LIST
78064: PPUSH
78065: CALL_OW 72
78069: PUSH
78070: LD_VAR 0 2
78074: PPUSH
78075: LD_INT 2
78077: PUSH
78078: LD_INT 30
78080: PUSH
78081: LD_INT 4
78083: PUSH
78084: EMPTY
78085: LIST
78086: LIST
78087: PUSH
78088: LD_INT 30
78090: PUSH
78091: LD_INT 5
78093: PUSH
78094: EMPTY
78095: LIST
78096: LIST
78097: PUSH
78098: EMPTY
78099: LIST
78100: LIST
78101: LIST
78102: PPUSH
78103: CALL_OW 72
78107: ADD
78108: ST_TO_ADDR
78109: GO 78357
78111: LD_INT 2
78113: DOUBLE
78114: EQUAL
78115: IFTRUE 78125
78117: LD_INT 16
78119: DOUBLE
78120: EQUAL
78121: IFTRUE 78125
78123: GO 78171
78125: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
78126: LD_ADDR_VAR 0 8
78130: PUSH
78131: LD_VAR 0 2
78135: PPUSH
78136: LD_INT 2
78138: PUSH
78139: LD_INT 30
78141: PUSH
78142: LD_INT 0
78144: PUSH
78145: EMPTY
78146: LIST
78147: LIST
78148: PUSH
78149: LD_INT 30
78151: PUSH
78152: LD_INT 1
78154: PUSH
78155: EMPTY
78156: LIST
78157: LIST
78158: PUSH
78159: EMPTY
78160: LIST
78161: LIST
78162: LIST
78163: PPUSH
78164: CALL_OW 72
78168: ST_TO_ADDR
78169: GO 78357
78171: LD_INT 3
78173: DOUBLE
78174: EQUAL
78175: IFTRUE 78179
78177: GO 78225
78179: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
78180: LD_ADDR_VAR 0 8
78184: PUSH
78185: LD_VAR 0 2
78189: PPUSH
78190: LD_INT 2
78192: PUSH
78193: LD_INT 30
78195: PUSH
78196: LD_INT 2
78198: PUSH
78199: EMPTY
78200: LIST
78201: LIST
78202: PUSH
78203: LD_INT 30
78205: PUSH
78206: LD_INT 3
78208: PUSH
78209: EMPTY
78210: LIST
78211: LIST
78212: PUSH
78213: EMPTY
78214: LIST
78215: LIST
78216: LIST
78217: PPUSH
78218: CALL_OW 72
78222: ST_TO_ADDR
78223: GO 78357
78225: LD_INT 4
78227: DOUBLE
78228: EQUAL
78229: IFTRUE 78233
78231: GO 78290
78233: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
78234: LD_ADDR_VAR 0 8
78238: PUSH
78239: LD_VAR 0 2
78243: PPUSH
78244: LD_INT 2
78246: PUSH
78247: LD_INT 30
78249: PUSH
78250: LD_INT 6
78252: PUSH
78253: EMPTY
78254: LIST
78255: LIST
78256: PUSH
78257: LD_INT 30
78259: PUSH
78260: LD_INT 7
78262: PUSH
78263: EMPTY
78264: LIST
78265: LIST
78266: PUSH
78267: LD_INT 30
78269: PUSH
78270: LD_INT 8
78272: PUSH
78273: EMPTY
78274: LIST
78275: LIST
78276: PUSH
78277: EMPTY
78278: LIST
78279: LIST
78280: LIST
78281: LIST
78282: PPUSH
78283: CALL_OW 72
78287: ST_TO_ADDR
78288: GO 78357
78290: LD_INT 5
78292: DOUBLE
78293: EQUAL
78294: IFTRUE 78310
78296: LD_INT 8
78298: DOUBLE
78299: EQUAL
78300: IFTRUE 78310
78302: LD_INT 9
78304: DOUBLE
78305: EQUAL
78306: IFTRUE 78310
78308: GO 78356
78310: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
78311: LD_ADDR_VAR 0 8
78315: PUSH
78316: LD_VAR 0 2
78320: PPUSH
78321: LD_INT 2
78323: PUSH
78324: LD_INT 30
78326: PUSH
78327: LD_INT 4
78329: PUSH
78330: EMPTY
78331: LIST
78332: LIST
78333: PUSH
78334: LD_INT 30
78336: PUSH
78337: LD_INT 5
78339: PUSH
78340: EMPTY
78341: LIST
78342: LIST
78343: PUSH
78344: EMPTY
78345: LIST
78346: LIST
78347: LIST
78348: PPUSH
78349: CALL_OW 72
78353: ST_TO_ADDR
78354: GO 78357
78356: POP
// if not tmp then
78357: LD_VAR 0 8
78361: NOT
78362: IFFALSE 78366
// exit ;
78364: GO 78868
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
78366: LD_VAR 0 4
78370: PUSH
78371: LD_INT 1
78373: PUSH
78374: LD_INT 15
78376: PUSH
78377: EMPTY
78378: LIST
78379: LIST
78380: IN
78381: PUSH
78382: LD_EXP 54
78386: PUSH
78387: LD_VAR 0 1
78391: ARRAY
78392: AND
78393: IFFALSE 78549
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
78395: LD_ADDR_VAR 0 9
78399: PUSH
78400: LD_EXP 54
78404: PUSH
78405: LD_VAR 0 1
78409: ARRAY
78410: PUSH
78411: LD_INT 1
78413: ARRAY
78414: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
78415: LD_VAR 0 9
78419: PUSH
78420: LD_EXP 55
78424: PUSH
78425: LD_VAR 0 1
78429: ARRAY
78430: IN
78431: NOT
78432: IFFALSE 78547
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
78434: LD_ADDR_EXP 55
78438: PUSH
78439: LD_EXP 55
78443: PPUSH
78444: LD_VAR 0 1
78448: PUSH
78449: LD_EXP 55
78453: PUSH
78454: LD_VAR 0 1
78458: ARRAY
78459: PUSH
78460: LD_INT 1
78462: PLUS
78463: PUSH
78464: EMPTY
78465: LIST
78466: LIST
78467: PPUSH
78468: LD_VAR 0 9
78472: PPUSH
78473: CALL 24301 0 3
78477: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
78478: LD_ADDR_EXP 54
78482: PUSH
78483: LD_EXP 54
78487: PPUSH
78488: LD_VAR 0 1
78492: PPUSH
78493: LD_EXP 54
78497: PUSH
78498: LD_VAR 0 1
78502: ARRAY
78503: PUSH
78504: LD_VAR 0 9
78508: DIFF
78509: PPUSH
78510: CALL_OW 1
78514: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
78515: LD_VAR 0 3
78519: PPUSH
78520: LD_EXP 55
78524: PUSH
78525: LD_VAR 0 1
78529: ARRAY
78530: PUSH
78531: LD_EXP 55
78535: PUSH
78536: LD_VAR 0 1
78540: ARRAY
78541: ARRAY
78542: PPUSH
78543: CALL_OW 120
// end ; exit ;
78547: GO 78868
// end ; if tmp > 1 then
78549: LD_VAR 0 8
78553: PUSH
78554: LD_INT 1
78556: GREATER
78557: IFFALSE 78661
// for i = 2 to tmp do
78559: LD_ADDR_VAR 0 6
78563: PUSH
78564: DOUBLE
78565: LD_INT 2
78567: DEC
78568: ST_TO_ADDR
78569: LD_VAR 0 8
78573: PUSH
78574: FOR_TO
78575: IFFALSE 78659
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
78577: LD_VAR 0 8
78581: PUSH
78582: LD_VAR 0 6
78586: ARRAY
78587: PPUSH
78588: CALL_OW 461
78592: PUSH
78593: LD_INT 6
78595: EQUAL
78596: IFFALSE 78657
// begin x := tmp [ i ] ;
78598: LD_ADDR_VAR 0 9
78602: PUSH
78603: LD_VAR 0 8
78607: PUSH
78608: LD_VAR 0 6
78612: ARRAY
78613: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
78614: LD_ADDR_VAR 0 8
78618: PUSH
78619: LD_VAR 0 8
78623: PPUSH
78624: LD_VAR 0 6
78628: PPUSH
78629: CALL_OW 3
78633: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
78634: LD_ADDR_VAR 0 8
78638: PUSH
78639: LD_VAR 0 8
78643: PPUSH
78644: LD_INT 1
78646: PPUSH
78647: LD_VAR 0 9
78651: PPUSH
78652: CALL_OW 2
78656: ST_TO_ADDR
// end ;
78657: GO 78574
78659: POP
78660: POP
// for i in tmp do
78661: LD_ADDR_VAR 0 6
78665: PUSH
78666: LD_VAR 0 8
78670: PUSH
78671: FOR_IN
78672: IFFALSE 78741
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
78674: LD_VAR 0 6
78678: PPUSH
78679: CALL_OW 313
78683: PUSH
78684: LD_INT 6
78686: LESS
78687: PUSH
78688: LD_VAR 0 6
78692: PPUSH
78693: CALL_OW 266
78697: PUSH
78698: LD_INT 31
78700: PUSH
78701: LD_INT 32
78703: PUSH
78704: EMPTY
78705: LIST
78706: LIST
78707: IN
78708: NOT
78709: AND
78710: PUSH
78711: LD_VAR 0 6
78715: PPUSH
78716: CALL_OW 313
78720: PUSH
78721: LD_INT 0
78723: EQUAL
78724: OR
78725: IFFALSE 78739
// begin j := i ;
78727: LD_ADDR_VAR 0 7
78731: PUSH
78732: LD_VAR 0 6
78736: ST_TO_ADDR
// break ;
78737: GO 78741
// end ; end ;
78739: GO 78671
78741: POP
78742: POP
// if j then
78743: LD_VAR 0 7
78747: IFFALSE 78765
// ComEnterUnit ( unit , j ) else
78749: LD_VAR 0 3
78753: PPUSH
78754: LD_VAR 0 7
78758: PPUSH
78759: CALL_OW 120
78763: GO 78868
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
78765: LD_ADDR_VAR 0 10
78769: PUSH
78770: LD_VAR 0 2
78774: PPUSH
78775: LD_INT 2
78777: PUSH
78778: LD_INT 30
78780: PUSH
78781: LD_INT 0
78783: PUSH
78784: EMPTY
78785: LIST
78786: LIST
78787: PUSH
78788: LD_INT 30
78790: PUSH
78791: LD_INT 1
78793: PUSH
78794: EMPTY
78795: LIST
78796: LIST
78797: PUSH
78798: EMPTY
78799: LIST
78800: LIST
78801: LIST
78802: PPUSH
78803: CALL_OW 72
78807: ST_TO_ADDR
// if depot then
78808: LD_VAR 0 10
78812: IFFALSE 78868
// begin depot := NearestUnitToUnit ( depot , unit ) ;
78814: LD_ADDR_VAR 0 10
78818: PUSH
78819: LD_VAR 0 10
78823: PPUSH
78824: LD_VAR 0 3
78828: PPUSH
78829: CALL_OW 74
78833: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
78834: LD_VAR 0 3
78838: PPUSH
78839: LD_VAR 0 10
78843: PPUSH
78844: CALL_OW 296
78848: PUSH
78849: LD_INT 10
78851: GREATER
78852: IFFALSE 78868
// ComStandNearbyBuilding ( unit , depot ) ;
78854: LD_VAR 0 3
78858: PPUSH
78859: LD_VAR 0 10
78863: PPUSH
78864: CALL 20915 0 2
// end ; end ; end ;
78868: LD_VAR 0 5
78872: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
78873: LD_INT 0
78875: PPUSH
78876: PPUSH
78877: PPUSH
78878: PPUSH
// if not mc_bases then
78879: LD_EXP 45
78883: NOT
78884: IFFALSE 78888
// exit ;
78886: GO 79127
// for i = 1 to mc_bases do
78888: LD_ADDR_VAR 0 2
78892: PUSH
78893: DOUBLE
78894: LD_INT 1
78896: DEC
78897: ST_TO_ADDR
78898: LD_EXP 45
78902: PUSH
78903: FOR_TO
78904: IFFALSE 79125
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
78906: LD_ADDR_VAR 0 4
78910: PUSH
78911: LD_EXP 45
78915: PUSH
78916: LD_VAR 0 2
78920: ARRAY
78921: PPUSH
78922: LD_INT 21
78924: PUSH
78925: LD_INT 1
78927: PUSH
78928: EMPTY
78929: LIST
78930: LIST
78931: PPUSH
78932: CALL_OW 72
78936: PUSH
78937: LD_EXP 74
78941: PUSH
78942: LD_VAR 0 2
78946: ARRAY
78947: UNION
78948: ST_TO_ADDR
// if not tmp then
78949: LD_VAR 0 4
78953: NOT
78954: IFFALSE 78958
// continue ;
78956: GO 78903
// for j in tmp do
78958: LD_ADDR_VAR 0 3
78962: PUSH
78963: LD_VAR 0 4
78967: PUSH
78968: FOR_IN
78969: IFFALSE 79121
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
78971: LD_VAR 0 3
78975: PPUSH
78976: CALL_OW 110
78980: NOT
78981: PUSH
78982: LD_VAR 0 3
78986: PPUSH
78987: CALL_OW 314
78991: NOT
78992: AND
78993: PUSH
78994: LD_VAR 0 3
78998: PPUSH
78999: CALL_OW 311
79003: NOT
79004: AND
79005: PUSH
79006: LD_VAR 0 3
79010: PPUSH
79011: CALL_OW 310
79015: NOT
79016: AND
79017: PUSH
79018: LD_VAR 0 3
79022: PUSH
79023: LD_EXP 48
79027: PUSH
79028: LD_VAR 0 2
79032: ARRAY
79033: PUSH
79034: LD_INT 1
79036: ARRAY
79037: IN
79038: NOT
79039: AND
79040: PUSH
79041: LD_VAR 0 3
79045: PUSH
79046: LD_EXP 48
79050: PUSH
79051: LD_VAR 0 2
79055: ARRAY
79056: PUSH
79057: LD_INT 2
79059: ARRAY
79060: IN
79061: NOT
79062: AND
79063: PUSH
79064: LD_VAR 0 3
79068: PUSH
79069: LD_EXP 57
79073: PUSH
79074: LD_VAR 0 2
79078: ARRAY
79079: IN
79080: NOT
79081: AND
79082: IFFALSE 79119
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
79084: LD_VAR 0 2
79088: PPUSH
79089: LD_EXP 45
79093: PUSH
79094: LD_VAR 0 2
79098: ARRAY
79099: PPUSH
79100: LD_VAR 0 3
79104: PPUSH
79105: LD_VAR 0 3
79109: PPUSH
79110: CALL_OW 257
79114: PPUSH
79115: CALL 77891 0 4
// end ;
79119: GO 78968
79121: POP
79122: POP
// end ;
79123: GO 78903
79125: POP
79126: POP
// end ;
79127: LD_VAR 0 1
79131: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
79132: LD_INT 0
79134: PPUSH
79135: PPUSH
79136: PPUSH
79137: PPUSH
79138: PPUSH
79139: PPUSH
// if not mc_bases [ base ] then
79140: LD_EXP 45
79144: PUSH
79145: LD_VAR 0 1
79149: ARRAY
79150: NOT
79151: IFFALSE 79155
// exit ;
79153: GO 79337
// tmp := [ ] ;
79155: LD_ADDR_VAR 0 6
79159: PUSH
79160: EMPTY
79161: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
79162: LD_ADDR_VAR 0 7
79166: PUSH
79167: LD_VAR 0 3
79171: PPUSH
79172: LD_INT 0
79174: PPUSH
79175: CALL_OW 517
79179: ST_TO_ADDR
// if not list then
79180: LD_VAR 0 7
79184: NOT
79185: IFFALSE 79189
// exit ;
79187: GO 79337
// for i = 1 to amount do
79189: LD_ADDR_VAR 0 5
79193: PUSH
79194: DOUBLE
79195: LD_INT 1
79197: DEC
79198: ST_TO_ADDR
79199: LD_VAR 0 2
79203: PUSH
79204: FOR_TO
79205: IFFALSE 79285
// begin x := rand ( 1 , list [ 1 ] ) ;
79207: LD_ADDR_VAR 0 8
79211: PUSH
79212: LD_INT 1
79214: PPUSH
79215: LD_VAR 0 7
79219: PUSH
79220: LD_INT 1
79222: ARRAY
79223: PPUSH
79224: CALL_OW 12
79228: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
79229: LD_ADDR_VAR 0 6
79233: PUSH
79234: LD_VAR 0 6
79238: PPUSH
79239: LD_VAR 0 5
79243: PPUSH
79244: LD_VAR 0 7
79248: PUSH
79249: LD_INT 1
79251: ARRAY
79252: PUSH
79253: LD_VAR 0 8
79257: ARRAY
79258: PUSH
79259: LD_VAR 0 7
79263: PUSH
79264: LD_INT 2
79266: ARRAY
79267: PUSH
79268: LD_VAR 0 8
79272: ARRAY
79273: PUSH
79274: EMPTY
79275: LIST
79276: LIST
79277: PPUSH
79278: CALL_OW 1
79282: ST_TO_ADDR
// end ;
79283: GO 79204
79285: POP
79286: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
79287: LD_ADDR_EXP 58
79291: PUSH
79292: LD_EXP 58
79296: PPUSH
79297: LD_VAR 0 1
79301: PPUSH
79302: LD_VAR 0 6
79306: PPUSH
79307: CALL_OW 1
79311: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
79312: LD_ADDR_EXP 60
79316: PUSH
79317: LD_EXP 60
79321: PPUSH
79322: LD_VAR 0 1
79326: PPUSH
79327: LD_VAR 0 3
79331: PPUSH
79332: CALL_OW 1
79336: ST_TO_ADDR
// end ;
79337: LD_VAR 0 4
79341: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
79342: LD_INT 0
79344: PPUSH
// if not mc_bases [ base ] then
79345: LD_EXP 45
79349: PUSH
79350: LD_VAR 0 1
79354: ARRAY
79355: NOT
79356: IFFALSE 79360
// exit ;
79358: GO 79385
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
79360: LD_ADDR_EXP 50
79364: PUSH
79365: LD_EXP 50
79369: PPUSH
79370: LD_VAR 0 1
79374: PPUSH
79375: LD_VAR 0 2
79379: PPUSH
79380: CALL_OW 1
79384: ST_TO_ADDR
// end ;
79385: LD_VAR 0 3
79389: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
79390: LD_INT 0
79392: PPUSH
// if not mc_bases [ base ] then
79393: LD_EXP 45
79397: PUSH
79398: LD_VAR 0 1
79402: ARRAY
79403: NOT
79404: IFFALSE 79408
// exit ;
79406: GO 79445
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
79408: LD_ADDR_EXP 50
79412: PUSH
79413: LD_EXP 50
79417: PPUSH
79418: LD_VAR 0 1
79422: PPUSH
79423: LD_EXP 50
79427: PUSH
79428: LD_VAR 0 1
79432: ARRAY
79433: PUSH
79434: LD_VAR 0 2
79438: UNION
79439: PPUSH
79440: CALL_OW 1
79444: ST_TO_ADDR
// end ;
79445: LD_VAR 0 3
79449: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
79450: LD_INT 0
79452: PPUSH
// if not mc_bases [ base ] then
79453: LD_EXP 45
79457: PUSH
79458: LD_VAR 0 1
79462: ARRAY
79463: NOT
79464: IFFALSE 79468
// exit ;
79466: GO 79493
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
79468: LD_ADDR_EXP 66
79472: PUSH
79473: LD_EXP 66
79477: PPUSH
79478: LD_VAR 0 1
79482: PPUSH
79483: LD_VAR 0 2
79487: PPUSH
79488: CALL_OW 1
79492: ST_TO_ADDR
// end ;
79493: LD_VAR 0 3
79497: RET
// export function MC_InsertProduceList ( base , components ) ; begin
79498: LD_INT 0
79500: PPUSH
// if not mc_bases [ base ] then
79501: LD_EXP 45
79505: PUSH
79506: LD_VAR 0 1
79510: ARRAY
79511: NOT
79512: IFFALSE 79516
// exit ;
79514: GO 79553
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
79516: LD_ADDR_EXP 66
79520: PUSH
79521: LD_EXP 66
79525: PPUSH
79526: LD_VAR 0 1
79530: PPUSH
79531: LD_EXP 66
79535: PUSH
79536: LD_VAR 0 1
79540: ARRAY
79541: PUSH
79542: LD_VAR 0 2
79546: ADD
79547: PPUSH
79548: CALL_OW 1
79552: ST_TO_ADDR
// end ;
79553: LD_VAR 0 3
79557: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
79558: LD_INT 0
79560: PPUSH
// if not mc_bases [ base ] then
79561: LD_EXP 45
79565: PUSH
79566: LD_VAR 0 1
79570: ARRAY
79571: NOT
79572: IFFALSE 79576
// exit ;
79574: GO 79630
// mc_defender := Replace ( mc_defender , base , deflist ) ;
79576: LD_ADDR_EXP 67
79580: PUSH
79581: LD_EXP 67
79585: PPUSH
79586: LD_VAR 0 1
79590: PPUSH
79591: LD_VAR 0 2
79595: PPUSH
79596: CALL_OW 1
79600: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
79601: LD_ADDR_EXP 56
79605: PUSH
79606: LD_EXP 56
79610: PPUSH
79611: LD_VAR 0 1
79615: PPUSH
79616: LD_VAR 0 2
79620: PUSH
79621: LD_INT 0
79623: PLUS
79624: PPUSH
79625: CALL_OW 1
79629: ST_TO_ADDR
// end ;
79630: LD_VAR 0 3
79634: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
79635: LD_INT 0
79637: PPUSH
// if not mc_bases [ base ] then
79638: LD_EXP 45
79642: PUSH
79643: LD_VAR 0 1
79647: ARRAY
79648: NOT
79649: IFFALSE 79653
// exit ;
79651: GO 79678
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
79653: LD_ADDR_EXP 56
79657: PUSH
79658: LD_EXP 56
79662: PPUSH
79663: LD_VAR 0 1
79667: PPUSH
79668: LD_VAR 0 2
79672: PPUSH
79673: CALL_OW 1
79677: ST_TO_ADDR
// end ;
79678: LD_VAR 0 3
79682: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
79683: LD_INT 0
79685: PPUSH
79686: PPUSH
79687: PPUSH
79688: PPUSH
// if not mc_bases [ base ] then
79689: LD_EXP 45
79693: PUSH
79694: LD_VAR 0 1
79698: ARRAY
79699: NOT
79700: IFFALSE 79704
// exit ;
79702: GO 79769
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
79704: LD_ADDR_EXP 65
79708: PUSH
79709: LD_EXP 65
79713: PPUSH
79714: LD_VAR 0 1
79718: PUSH
79719: LD_EXP 65
79723: PUSH
79724: LD_VAR 0 1
79728: ARRAY
79729: PUSH
79730: LD_INT 1
79732: PLUS
79733: PUSH
79734: EMPTY
79735: LIST
79736: LIST
79737: PPUSH
79738: LD_VAR 0 1
79742: PUSH
79743: LD_VAR 0 2
79747: PUSH
79748: LD_VAR 0 3
79752: PUSH
79753: LD_VAR 0 4
79757: PUSH
79758: EMPTY
79759: LIST
79760: LIST
79761: LIST
79762: LIST
79763: PPUSH
79764: CALL 24301 0 3
79768: ST_TO_ADDR
// end ;
79769: LD_VAR 0 5
79773: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
79774: LD_INT 0
79776: PPUSH
// if not mc_bases [ base ] then
79777: LD_EXP 45
79781: PUSH
79782: LD_VAR 0 1
79786: ARRAY
79787: NOT
79788: IFFALSE 79792
// exit ;
79790: GO 79817
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
79792: LD_ADDR_EXP 82
79796: PUSH
79797: LD_EXP 82
79801: PPUSH
79802: LD_VAR 0 1
79806: PPUSH
79807: LD_VAR 0 2
79811: PPUSH
79812: CALL_OW 1
79816: ST_TO_ADDR
// end ;
79817: LD_VAR 0 3
79821: RET
// export function MC_GetMinesField ( base ) ; begin
79822: LD_INT 0
79824: PPUSH
// result := mc_mines [ base ] ;
79825: LD_ADDR_VAR 0 2
79829: PUSH
79830: LD_EXP 58
79834: PUSH
79835: LD_VAR 0 1
79839: ARRAY
79840: ST_TO_ADDR
// end ;
79841: LD_VAR 0 2
79845: RET
// export function MC_GetProduceList ( base ) ; begin
79846: LD_INT 0
79848: PPUSH
// result := mc_produce [ base ] ;
79849: LD_ADDR_VAR 0 2
79853: PUSH
79854: LD_EXP 66
79858: PUSH
79859: LD_VAR 0 1
79863: ARRAY
79864: ST_TO_ADDR
// end ;
79865: LD_VAR 0 2
79869: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
79870: LD_INT 0
79872: PPUSH
79873: PPUSH
// if not mc_bases then
79874: LD_EXP 45
79878: NOT
79879: IFFALSE 79883
// exit ;
79881: GO 79948
// if mc_bases [ base ] then
79883: LD_EXP 45
79887: PUSH
79888: LD_VAR 0 1
79892: ARRAY
79893: IFFALSE 79948
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
79895: LD_ADDR_VAR 0 3
79899: PUSH
79900: LD_EXP 45
79904: PUSH
79905: LD_VAR 0 1
79909: ARRAY
79910: PPUSH
79911: LD_INT 30
79913: PUSH
79914: LD_VAR 0 2
79918: PUSH
79919: EMPTY
79920: LIST
79921: LIST
79922: PPUSH
79923: CALL_OW 72
79927: ST_TO_ADDR
// if result then
79928: LD_VAR 0 3
79932: IFFALSE 79948
// result := result [ 1 ] ;
79934: LD_ADDR_VAR 0 3
79938: PUSH
79939: LD_VAR 0 3
79943: PUSH
79944: LD_INT 1
79946: ARRAY
79947: ST_TO_ADDR
// end ; end ;
79948: LD_VAR 0 3
79952: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
79953: LD_INT 0
79955: PPUSH
79956: PPUSH
// if not mc_bases then
79957: LD_EXP 45
79961: NOT
79962: IFFALSE 79966
// exit ;
79964: GO 80011
// if mc_bases [ base ] then
79966: LD_EXP 45
79970: PUSH
79971: LD_VAR 0 1
79975: ARRAY
79976: IFFALSE 80011
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
79978: LD_ADDR_VAR 0 3
79982: PUSH
79983: LD_EXP 45
79987: PUSH
79988: LD_VAR 0 1
79992: ARRAY
79993: PPUSH
79994: LD_INT 30
79996: PUSH
79997: LD_VAR 0 2
80001: PUSH
80002: EMPTY
80003: LIST
80004: LIST
80005: PPUSH
80006: CALL_OW 72
80010: ST_TO_ADDR
// end ;
80011: LD_VAR 0 3
80015: RET
// export function MC_SetTame ( base , area ) ; begin
80016: LD_INT 0
80018: PPUSH
// if not mc_bases or not base then
80019: LD_EXP 45
80023: NOT
80024: PUSH
80025: LD_VAR 0 1
80029: NOT
80030: OR
80031: IFFALSE 80035
// exit ;
80033: GO 80060
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
80035: LD_ADDR_EXP 73
80039: PUSH
80040: LD_EXP 73
80044: PPUSH
80045: LD_VAR 0 1
80049: PPUSH
80050: LD_VAR 0 2
80054: PPUSH
80055: CALL_OW 1
80059: ST_TO_ADDR
// end ;
80060: LD_VAR 0 3
80064: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
80065: LD_INT 0
80067: PPUSH
80068: PPUSH
// if not mc_bases or not base then
80069: LD_EXP 45
80073: NOT
80074: PUSH
80075: LD_VAR 0 1
80079: NOT
80080: OR
80081: IFFALSE 80085
// exit ;
80083: GO 80187
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
80085: LD_ADDR_VAR 0 4
80089: PUSH
80090: LD_EXP 45
80094: PUSH
80095: LD_VAR 0 1
80099: ARRAY
80100: PPUSH
80101: LD_INT 30
80103: PUSH
80104: LD_VAR 0 2
80108: PUSH
80109: EMPTY
80110: LIST
80111: LIST
80112: PPUSH
80113: CALL_OW 72
80117: ST_TO_ADDR
// if not tmp then
80118: LD_VAR 0 4
80122: NOT
80123: IFFALSE 80127
// exit ;
80125: GO 80187
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
80127: LD_ADDR_EXP 77
80131: PUSH
80132: LD_EXP 77
80136: PPUSH
80137: LD_VAR 0 1
80141: PPUSH
80142: LD_EXP 77
80146: PUSH
80147: LD_VAR 0 1
80151: ARRAY
80152: PPUSH
80153: LD_EXP 77
80157: PUSH
80158: LD_VAR 0 1
80162: ARRAY
80163: PUSH
80164: LD_INT 1
80166: PLUS
80167: PPUSH
80168: LD_VAR 0 4
80172: PUSH
80173: LD_INT 1
80175: ARRAY
80176: PPUSH
80177: CALL_OW 2
80181: PPUSH
80182: CALL_OW 1
80186: ST_TO_ADDR
// end ;
80187: LD_VAR 0 3
80191: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
80192: LD_INT 0
80194: PPUSH
80195: PPUSH
// if not mc_bases or not base or not kinds then
80196: LD_EXP 45
80200: NOT
80201: PUSH
80202: LD_VAR 0 1
80206: NOT
80207: OR
80208: PUSH
80209: LD_VAR 0 2
80213: NOT
80214: OR
80215: IFFALSE 80219
// exit ;
80217: GO 80280
// for i in kinds do
80219: LD_ADDR_VAR 0 4
80223: PUSH
80224: LD_VAR 0 2
80228: PUSH
80229: FOR_IN
80230: IFFALSE 80278
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
80232: LD_ADDR_EXP 79
80236: PUSH
80237: LD_EXP 79
80241: PPUSH
80242: LD_VAR 0 1
80246: PUSH
80247: LD_EXP 79
80251: PUSH
80252: LD_VAR 0 1
80256: ARRAY
80257: PUSH
80258: LD_INT 1
80260: PLUS
80261: PUSH
80262: EMPTY
80263: LIST
80264: LIST
80265: PPUSH
80266: LD_VAR 0 4
80270: PPUSH
80271: CALL 24301 0 3
80275: ST_TO_ADDR
80276: GO 80229
80278: POP
80279: POP
// end ;
80280: LD_VAR 0 3
80284: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
80285: LD_INT 0
80287: PPUSH
// if not mc_bases or not base or not areas then
80288: LD_EXP 45
80292: NOT
80293: PUSH
80294: LD_VAR 0 1
80298: NOT
80299: OR
80300: PUSH
80301: LD_VAR 0 2
80305: NOT
80306: OR
80307: IFFALSE 80311
// exit ;
80309: GO 80336
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
80311: LD_ADDR_EXP 63
80315: PUSH
80316: LD_EXP 63
80320: PPUSH
80321: LD_VAR 0 1
80325: PPUSH
80326: LD_VAR 0 2
80330: PPUSH
80331: CALL_OW 1
80335: ST_TO_ADDR
// end ;
80336: LD_VAR 0 3
80340: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
80341: LD_INT 0
80343: PPUSH
// if not mc_bases or not base or not teleports_exit then
80344: LD_EXP 45
80348: NOT
80349: PUSH
80350: LD_VAR 0 1
80354: NOT
80355: OR
80356: PUSH
80357: LD_VAR 0 2
80361: NOT
80362: OR
80363: IFFALSE 80367
// exit ;
80365: GO 80392
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
80367: LD_ADDR_EXP 80
80371: PUSH
80372: LD_EXP 80
80376: PPUSH
80377: LD_VAR 0 1
80381: PPUSH
80382: LD_VAR 0 2
80386: PPUSH
80387: CALL_OW 1
80391: ST_TO_ADDR
// end ;
80392: LD_VAR 0 3
80396: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
80397: LD_INT 0
80399: PPUSH
80400: PPUSH
80401: PPUSH
// if not mc_bases or not base or not ext_list then
80402: LD_EXP 45
80406: NOT
80407: PUSH
80408: LD_VAR 0 1
80412: NOT
80413: OR
80414: PUSH
80415: LD_VAR 0 5
80419: NOT
80420: OR
80421: IFFALSE 80425
// exit ;
80423: GO 80598
// tmp := GetFacExtXYD ( x , y , d ) ;
80425: LD_ADDR_VAR 0 8
80429: PUSH
80430: LD_VAR 0 2
80434: PPUSH
80435: LD_VAR 0 3
80439: PPUSH
80440: LD_VAR 0 4
80444: PPUSH
80445: CALL 52980 0 3
80449: ST_TO_ADDR
// if not tmp then
80450: LD_VAR 0 8
80454: NOT
80455: IFFALSE 80459
// exit ;
80457: GO 80598
// for i in tmp do
80459: LD_ADDR_VAR 0 7
80463: PUSH
80464: LD_VAR 0 8
80468: PUSH
80469: FOR_IN
80470: IFFALSE 80596
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
80472: LD_ADDR_EXP 50
80476: PUSH
80477: LD_EXP 50
80481: PPUSH
80482: LD_VAR 0 1
80486: PPUSH
80487: LD_EXP 50
80491: PUSH
80492: LD_VAR 0 1
80496: ARRAY
80497: PPUSH
80498: LD_EXP 50
80502: PUSH
80503: LD_VAR 0 1
80507: ARRAY
80508: PUSH
80509: LD_INT 1
80511: PLUS
80512: PPUSH
80513: LD_VAR 0 5
80517: PUSH
80518: LD_INT 1
80520: ARRAY
80521: PUSH
80522: LD_VAR 0 7
80526: PUSH
80527: LD_INT 1
80529: ARRAY
80530: PUSH
80531: LD_VAR 0 7
80535: PUSH
80536: LD_INT 2
80538: ARRAY
80539: PUSH
80540: LD_VAR 0 7
80544: PUSH
80545: LD_INT 3
80547: ARRAY
80548: PUSH
80549: EMPTY
80550: LIST
80551: LIST
80552: LIST
80553: LIST
80554: PPUSH
80555: CALL_OW 2
80559: PPUSH
80560: CALL_OW 1
80564: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
80565: LD_ADDR_VAR 0 5
80569: PUSH
80570: LD_VAR 0 5
80574: PPUSH
80575: LD_INT 1
80577: PPUSH
80578: CALL_OW 3
80582: ST_TO_ADDR
// if not ext_list then
80583: LD_VAR 0 5
80587: NOT
80588: IFFALSE 80594
// exit ;
80590: POP
80591: POP
80592: GO 80598
// end ;
80594: GO 80469
80596: POP
80597: POP
// end ;
80598: LD_VAR 0 6
80602: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
80603: LD_INT 0
80605: PPUSH
// if not mc_bases or not base or not weapon_list then
80606: LD_EXP 45
80610: NOT
80611: PUSH
80612: LD_VAR 0 1
80616: NOT
80617: OR
80618: PUSH
80619: LD_VAR 0 2
80623: NOT
80624: OR
80625: IFFALSE 80629
// exit ;
80627: GO 80654
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
80629: LD_ADDR_EXP 84
80633: PUSH
80634: LD_EXP 84
80638: PPUSH
80639: LD_VAR 0 1
80643: PPUSH
80644: LD_VAR 0 2
80648: PPUSH
80649: CALL_OW 1
80653: ST_TO_ADDR
// end ;
80654: LD_VAR 0 3
80658: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
80659: LD_INT 0
80661: PPUSH
// if not mc_bases or not base or not tech_list then
80662: LD_EXP 45
80666: NOT
80667: PUSH
80668: LD_VAR 0 1
80672: NOT
80673: OR
80674: PUSH
80675: LD_VAR 0 2
80679: NOT
80680: OR
80681: IFFALSE 80685
// exit ;
80683: GO 80710
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
80685: LD_ADDR_EXP 72
80689: PUSH
80690: LD_EXP 72
80694: PPUSH
80695: LD_VAR 0 1
80699: PPUSH
80700: LD_VAR 0 2
80704: PPUSH
80705: CALL_OW 1
80709: ST_TO_ADDR
// end ;
80710: LD_VAR 0 3
80714: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
80715: LD_INT 0
80717: PPUSH
// if not mc_bases or not parking_area or not base then
80718: LD_EXP 45
80722: NOT
80723: PUSH
80724: LD_VAR 0 2
80728: NOT
80729: OR
80730: PUSH
80731: LD_VAR 0 1
80735: NOT
80736: OR
80737: IFFALSE 80741
// exit ;
80739: GO 80766
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
80741: LD_ADDR_EXP 69
80745: PUSH
80746: LD_EXP 69
80750: PPUSH
80751: LD_VAR 0 1
80755: PPUSH
80756: LD_VAR 0 2
80760: PPUSH
80761: CALL_OW 1
80765: ST_TO_ADDR
// end ;
80766: LD_VAR 0 3
80770: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
80771: LD_INT 0
80773: PPUSH
// if not mc_bases or not base or not scan_area then
80774: LD_EXP 45
80778: NOT
80779: PUSH
80780: LD_VAR 0 1
80784: NOT
80785: OR
80786: PUSH
80787: LD_VAR 0 2
80791: NOT
80792: OR
80793: IFFALSE 80797
// exit ;
80795: GO 80822
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
80797: LD_ADDR_EXP 70
80801: PUSH
80802: LD_EXP 70
80806: PPUSH
80807: LD_VAR 0 1
80811: PPUSH
80812: LD_VAR 0 2
80816: PPUSH
80817: CALL_OW 1
80821: ST_TO_ADDR
// end ;
80822: LD_VAR 0 3
80826: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
80827: LD_INT 0
80829: PPUSH
80830: PPUSH
// if not mc_bases or not base then
80831: LD_EXP 45
80835: NOT
80836: PUSH
80837: LD_VAR 0 1
80841: NOT
80842: OR
80843: IFFALSE 80847
// exit ;
80845: GO 80911
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
80847: LD_ADDR_VAR 0 3
80851: PUSH
80852: LD_INT 1
80854: PUSH
80855: LD_INT 2
80857: PUSH
80858: LD_INT 3
80860: PUSH
80861: LD_INT 4
80863: PUSH
80864: LD_INT 11
80866: PUSH
80867: EMPTY
80868: LIST
80869: LIST
80870: LIST
80871: LIST
80872: LIST
80873: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
80874: LD_ADDR_EXP 72
80878: PUSH
80879: LD_EXP 72
80883: PPUSH
80884: LD_VAR 0 1
80888: PPUSH
80889: LD_EXP 72
80893: PUSH
80894: LD_VAR 0 1
80898: ARRAY
80899: PUSH
80900: LD_VAR 0 3
80904: DIFF
80905: PPUSH
80906: CALL_OW 1
80910: ST_TO_ADDR
// end ;
80911: LD_VAR 0 2
80915: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
80916: LD_INT 0
80918: PPUSH
// result := mc_vehicles [ base ] ;
80919: LD_ADDR_VAR 0 3
80923: PUSH
80924: LD_EXP 64
80928: PUSH
80929: LD_VAR 0 1
80933: ARRAY
80934: ST_TO_ADDR
// if onlyCombat then
80935: LD_VAR 0 2
80939: IFFALSE 81104
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
80941: LD_ADDR_VAR 0 3
80945: PUSH
80946: LD_VAR 0 3
80950: PUSH
80951: LD_VAR 0 3
80955: PPUSH
80956: LD_INT 2
80958: PUSH
80959: LD_INT 34
80961: PUSH
80962: LD_INT 12
80964: PUSH
80965: EMPTY
80966: LIST
80967: LIST
80968: PUSH
80969: LD_INT 34
80971: PUSH
80972: LD_INT 51
80974: PUSH
80975: EMPTY
80976: LIST
80977: LIST
80978: PUSH
80979: LD_INT 34
80981: PUSH
80982: LD_EXP 30
80986: PUSH
80987: EMPTY
80988: LIST
80989: LIST
80990: PUSH
80991: LD_INT 34
80993: PUSH
80994: LD_INT 32
80996: PUSH
80997: EMPTY
80998: LIST
80999: LIST
81000: PUSH
81001: LD_INT 34
81003: PUSH
81004: LD_INT 13
81006: PUSH
81007: EMPTY
81008: LIST
81009: LIST
81010: PUSH
81011: LD_INT 34
81013: PUSH
81014: LD_INT 52
81016: PUSH
81017: EMPTY
81018: LIST
81019: LIST
81020: PUSH
81021: LD_INT 34
81023: PUSH
81024: LD_INT 14
81026: PUSH
81027: EMPTY
81028: LIST
81029: LIST
81030: PUSH
81031: LD_INT 34
81033: PUSH
81034: LD_INT 53
81036: PUSH
81037: EMPTY
81038: LIST
81039: LIST
81040: PUSH
81041: LD_INT 34
81043: PUSH
81044: LD_EXP 29
81048: PUSH
81049: EMPTY
81050: LIST
81051: LIST
81052: PUSH
81053: LD_INT 34
81055: PUSH
81056: LD_INT 31
81058: PUSH
81059: EMPTY
81060: LIST
81061: LIST
81062: PUSH
81063: LD_INT 34
81065: PUSH
81066: LD_INT 48
81068: PUSH
81069: EMPTY
81070: LIST
81071: LIST
81072: PUSH
81073: LD_INT 34
81075: PUSH
81076: LD_INT 8
81078: PUSH
81079: EMPTY
81080: LIST
81081: LIST
81082: PUSH
81083: EMPTY
81084: LIST
81085: LIST
81086: LIST
81087: LIST
81088: LIST
81089: LIST
81090: LIST
81091: LIST
81092: LIST
81093: LIST
81094: LIST
81095: LIST
81096: LIST
81097: PPUSH
81098: CALL_OW 72
81102: DIFF
81103: ST_TO_ADDR
// end ; end_of_file
81104: LD_VAR 0 3
81108: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
81109: LD_INT 0
81111: PPUSH
81112: PPUSH
81113: PPUSH
// if not mc_bases or not skirmish then
81114: LD_EXP 45
81118: NOT
81119: PUSH
81120: LD_EXP 43
81124: NOT
81125: OR
81126: IFFALSE 81130
// exit ;
81128: GO 81295
// for i = 1 to mc_bases do
81130: LD_ADDR_VAR 0 4
81134: PUSH
81135: DOUBLE
81136: LD_INT 1
81138: DEC
81139: ST_TO_ADDR
81140: LD_EXP 45
81144: PUSH
81145: FOR_TO
81146: IFFALSE 81293
// begin if sci in mc_bases [ i ] then
81148: LD_VAR 0 2
81152: PUSH
81153: LD_EXP 45
81157: PUSH
81158: LD_VAR 0 4
81162: ARRAY
81163: IN
81164: IFFALSE 81291
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
81166: LD_ADDR_EXP 74
81170: PUSH
81171: LD_EXP 74
81175: PPUSH
81176: LD_VAR 0 4
81180: PUSH
81181: LD_EXP 74
81185: PUSH
81186: LD_VAR 0 4
81190: ARRAY
81191: PUSH
81192: LD_INT 1
81194: PLUS
81195: PUSH
81196: EMPTY
81197: LIST
81198: LIST
81199: PPUSH
81200: LD_VAR 0 1
81204: PPUSH
81205: CALL 24301 0 3
81209: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
81210: LD_ADDR_VAR 0 5
81214: PUSH
81215: LD_EXP 45
81219: PUSH
81220: LD_VAR 0 4
81224: ARRAY
81225: PPUSH
81226: LD_INT 2
81228: PUSH
81229: LD_INT 30
81231: PUSH
81232: LD_INT 0
81234: PUSH
81235: EMPTY
81236: LIST
81237: LIST
81238: PUSH
81239: LD_INT 30
81241: PUSH
81242: LD_INT 1
81244: PUSH
81245: EMPTY
81246: LIST
81247: LIST
81248: PUSH
81249: EMPTY
81250: LIST
81251: LIST
81252: LIST
81253: PPUSH
81254: CALL_OW 72
81258: PPUSH
81259: LD_VAR 0 1
81263: PPUSH
81264: CALL_OW 74
81268: ST_TO_ADDR
// if tmp then
81269: LD_VAR 0 5
81273: IFFALSE 81289
// ComStandNearbyBuilding ( ape , tmp ) ;
81275: LD_VAR 0 1
81279: PPUSH
81280: LD_VAR 0 5
81284: PPUSH
81285: CALL 20915 0 2
// break ;
81289: GO 81293
// end ; end ;
81291: GO 81145
81293: POP
81294: POP
// end ;
81295: LD_VAR 0 3
81299: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
81300: LD_INT 0
81302: PPUSH
81303: PPUSH
81304: PPUSH
// if not mc_bases or not skirmish then
81305: LD_EXP 45
81309: NOT
81310: PUSH
81311: LD_EXP 43
81315: NOT
81316: OR
81317: IFFALSE 81321
// exit ;
81319: GO 81410
// for i = 1 to mc_bases do
81321: LD_ADDR_VAR 0 4
81325: PUSH
81326: DOUBLE
81327: LD_INT 1
81329: DEC
81330: ST_TO_ADDR
81331: LD_EXP 45
81335: PUSH
81336: FOR_TO
81337: IFFALSE 81408
// begin if building in mc_busy_turret_list [ i ] then
81339: LD_VAR 0 1
81343: PUSH
81344: LD_EXP 55
81348: PUSH
81349: LD_VAR 0 4
81353: ARRAY
81354: IN
81355: IFFALSE 81406
// begin tmp := mc_busy_turret_list [ i ] diff building ;
81357: LD_ADDR_VAR 0 5
81361: PUSH
81362: LD_EXP 55
81366: PUSH
81367: LD_VAR 0 4
81371: ARRAY
81372: PUSH
81373: LD_VAR 0 1
81377: DIFF
81378: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
81379: LD_ADDR_EXP 55
81383: PUSH
81384: LD_EXP 55
81388: PPUSH
81389: LD_VAR 0 4
81393: PPUSH
81394: LD_VAR 0 5
81398: PPUSH
81399: CALL_OW 1
81403: ST_TO_ADDR
// break ;
81404: GO 81408
// end ; end ;
81406: GO 81336
81408: POP
81409: POP
// end ;
81410: LD_VAR 0 3
81414: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
81415: LD_INT 0
81417: PPUSH
81418: PPUSH
81419: PPUSH
// if not mc_bases or not skirmish then
81420: LD_EXP 45
81424: NOT
81425: PUSH
81426: LD_EXP 43
81430: NOT
81431: OR
81432: IFFALSE 81436
// exit ;
81434: GO 81635
// for i = 1 to mc_bases do
81436: LD_ADDR_VAR 0 5
81440: PUSH
81441: DOUBLE
81442: LD_INT 1
81444: DEC
81445: ST_TO_ADDR
81446: LD_EXP 45
81450: PUSH
81451: FOR_TO
81452: IFFALSE 81633
// if building in mc_bases [ i ] then
81454: LD_VAR 0 1
81458: PUSH
81459: LD_EXP 45
81463: PUSH
81464: LD_VAR 0 5
81468: ARRAY
81469: IN
81470: IFFALSE 81631
// begin tmp := mc_bases [ i ] diff building ;
81472: LD_ADDR_VAR 0 6
81476: PUSH
81477: LD_EXP 45
81481: PUSH
81482: LD_VAR 0 5
81486: ARRAY
81487: PUSH
81488: LD_VAR 0 1
81492: DIFF
81493: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
81494: LD_ADDR_EXP 45
81498: PUSH
81499: LD_EXP 45
81503: PPUSH
81504: LD_VAR 0 5
81508: PPUSH
81509: LD_VAR 0 6
81513: PPUSH
81514: CALL_OW 1
81518: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
81519: LD_VAR 0 1
81523: PUSH
81524: LD_EXP 53
81528: PUSH
81529: LD_VAR 0 5
81533: ARRAY
81534: IN
81535: IFFALSE 81574
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
81537: LD_ADDR_EXP 53
81541: PUSH
81542: LD_EXP 53
81546: PPUSH
81547: LD_VAR 0 5
81551: PPUSH
81552: LD_EXP 53
81556: PUSH
81557: LD_VAR 0 5
81561: ARRAY
81562: PUSH
81563: LD_VAR 0 1
81567: DIFF
81568: PPUSH
81569: CALL_OW 1
81573: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
81574: LD_VAR 0 1
81578: PUSH
81579: LD_EXP 54
81583: PUSH
81584: LD_VAR 0 5
81588: ARRAY
81589: IN
81590: IFFALSE 81629
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
81592: LD_ADDR_EXP 54
81596: PUSH
81597: LD_EXP 54
81601: PPUSH
81602: LD_VAR 0 5
81606: PPUSH
81607: LD_EXP 54
81611: PUSH
81612: LD_VAR 0 5
81616: ARRAY
81617: PUSH
81618: LD_VAR 0 1
81622: DIFF
81623: PPUSH
81624: CALL_OW 1
81628: ST_TO_ADDR
// break ;
81629: GO 81633
// end ;
81631: GO 81451
81633: POP
81634: POP
// end ;
81635: LD_VAR 0 4
81639: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
81640: LD_INT 0
81642: PPUSH
81643: PPUSH
81644: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
81645: LD_EXP 45
81649: NOT
81650: PUSH
81651: LD_EXP 43
81655: NOT
81656: OR
81657: PUSH
81658: LD_VAR 0 3
81662: PUSH
81663: LD_EXP 71
81667: IN
81668: NOT
81669: OR
81670: IFFALSE 81674
// exit ;
81672: GO 81797
// for i = 1 to mc_vehicles do
81674: LD_ADDR_VAR 0 6
81678: PUSH
81679: DOUBLE
81680: LD_INT 1
81682: DEC
81683: ST_TO_ADDR
81684: LD_EXP 64
81688: PUSH
81689: FOR_TO
81690: IFFALSE 81795
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
81692: LD_VAR 0 2
81696: PUSH
81697: LD_EXP 64
81701: PUSH
81702: LD_VAR 0 6
81706: ARRAY
81707: IN
81708: PUSH
81709: LD_VAR 0 1
81713: PUSH
81714: LD_EXP 64
81718: PUSH
81719: LD_VAR 0 6
81723: ARRAY
81724: IN
81725: OR
81726: IFFALSE 81793
// begin tmp := mc_vehicles [ i ] diff old ;
81728: LD_ADDR_VAR 0 7
81732: PUSH
81733: LD_EXP 64
81737: PUSH
81738: LD_VAR 0 6
81742: ARRAY
81743: PUSH
81744: LD_VAR 0 2
81748: DIFF
81749: ST_TO_ADDR
// tmp := tmp diff new ;
81750: LD_ADDR_VAR 0 7
81754: PUSH
81755: LD_VAR 0 7
81759: PUSH
81760: LD_VAR 0 1
81764: DIFF
81765: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
81766: LD_ADDR_EXP 64
81770: PUSH
81771: LD_EXP 64
81775: PPUSH
81776: LD_VAR 0 6
81780: PPUSH
81781: LD_VAR 0 7
81785: PPUSH
81786: CALL_OW 1
81790: ST_TO_ADDR
// break ;
81791: GO 81795
// end ;
81793: GO 81689
81795: POP
81796: POP
// end ;
81797: LD_VAR 0 5
81801: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
81802: LD_INT 0
81804: PPUSH
81805: PPUSH
81806: PPUSH
81807: PPUSH
// if not mc_bases or not skirmish then
81808: LD_EXP 45
81812: NOT
81813: PUSH
81814: LD_EXP 43
81818: NOT
81819: OR
81820: IFFALSE 81824
// exit ;
81822: GO 82201
// side := GetSide ( vehicle ) ;
81824: LD_ADDR_VAR 0 5
81828: PUSH
81829: LD_VAR 0 1
81833: PPUSH
81834: CALL_OW 255
81838: ST_TO_ADDR
// for i = 1 to mc_bases do
81839: LD_ADDR_VAR 0 4
81843: PUSH
81844: DOUBLE
81845: LD_INT 1
81847: DEC
81848: ST_TO_ADDR
81849: LD_EXP 45
81853: PUSH
81854: FOR_TO
81855: IFFALSE 82199
// begin if factory in mc_bases [ i ] then
81857: LD_VAR 0 2
81861: PUSH
81862: LD_EXP 45
81866: PUSH
81867: LD_VAR 0 4
81871: ARRAY
81872: IN
81873: IFFALSE 82197
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
81875: LD_EXP 67
81879: PUSH
81880: LD_VAR 0 4
81884: ARRAY
81885: PUSH
81886: LD_EXP 56
81890: PUSH
81891: LD_VAR 0 4
81895: ARRAY
81896: LESS
81897: PUSH
81898: LD_VAR 0 1
81902: PPUSH
81903: CALL_OW 264
81907: PUSH
81908: LD_INT 31
81910: PUSH
81911: LD_INT 32
81913: PUSH
81914: LD_INT 51
81916: PUSH
81917: LD_EXP 30
81921: PUSH
81922: LD_INT 12
81924: PUSH
81925: LD_INT 30
81927: PUSH
81928: LD_EXP 29
81932: PUSH
81933: LD_INT 11
81935: PUSH
81936: LD_INT 53
81938: PUSH
81939: LD_INT 14
81941: PUSH
81942: LD_EXP 33
81946: PUSH
81947: LD_INT 29
81949: PUSH
81950: LD_EXP 31
81954: PUSH
81955: LD_INT 13
81957: PUSH
81958: LD_INT 52
81960: PUSH
81961: LD_INT 48
81963: PUSH
81964: LD_INT 8
81966: PUSH
81967: EMPTY
81968: LIST
81969: LIST
81970: LIST
81971: LIST
81972: LIST
81973: LIST
81974: LIST
81975: LIST
81976: LIST
81977: LIST
81978: LIST
81979: LIST
81980: LIST
81981: LIST
81982: LIST
81983: LIST
81984: LIST
81985: IN
81986: NOT
81987: AND
81988: IFFALSE 82036
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
81990: LD_ADDR_EXP 67
81994: PUSH
81995: LD_EXP 67
81999: PPUSH
82000: LD_VAR 0 4
82004: PUSH
82005: LD_EXP 67
82009: PUSH
82010: LD_VAR 0 4
82014: ARRAY
82015: PUSH
82016: LD_INT 1
82018: PLUS
82019: PUSH
82020: EMPTY
82021: LIST
82022: LIST
82023: PPUSH
82024: LD_VAR 0 1
82028: PPUSH
82029: CALL 24301 0 3
82033: ST_TO_ADDR
82034: GO 82080
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
82036: LD_ADDR_EXP 64
82040: PUSH
82041: LD_EXP 64
82045: PPUSH
82046: LD_VAR 0 4
82050: PUSH
82051: LD_EXP 64
82055: PUSH
82056: LD_VAR 0 4
82060: ARRAY
82061: PUSH
82062: LD_INT 1
82064: PLUS
82065: PUSH
82066: EMPTY
82067: LIST
82068: LIST
82069: PPUSH
82070: LD_VAR 0 1
82074: PPUSH
82075: CALL 24301 0 3
82079: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
82080: LD_VAR 0 1
82084: PPUSH
82085: CALL_OW 263
82089: PUSH
82090: LD_INT 2
82092: EQUAL
82093: IFFALSE 82113
// begin repeat wait ( 0 0$1 ) ;
82095: LD_INT 35
82097: PPUSH
82098: CALL_OW 67
// until IsControledBy ( vehicle ) ;
82102: LD_VAR 0 1
82106: PPUSH
82107: CALL_OW 312
82111: IFFALSE 82095
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
82113: LD_VAR 0 1
82117: PPUSH
82118: LD_EXP 69
82122: PUSH
82123: LD_VAR 0 4
82127: ARRAY
82128: PPUSH
82129: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
82133: LD_VAR 0 1
82137: PPUSH
82138: CALL_OW 263
82142: PUSH
82143: LD_INT 1
82145: NONEQUAL
82146: IFFALSE 82150
// break ;
82148: GO 82199
// repeat wait ( 0 0$1 ) ;
82150: LD_INT 35
82152: PPUSH
82153: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
82157: LD_VAR 0 1
82161: PPUSH
82162: LD_EXP 69
82166: PUSH
82167: LD_VAR 0 4
82171: ARRAY
82172: PPUSH
82173: CALL_OW 308
82177: IFFALSE 82150
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
82179: LD_VAR 0 1
82183: PPUSH
82184: CALL_OW 311
82188: PPUSH
82189: CALL_OW 121
// exit ;
82193: POP
82194: POP
82195: GO 82201
// end ; end ;
82197: GO 81854
82199: POP
82200: POP
// end ;
82201: LD_VAR 0 3
82205: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
82206: LD_INT 0
82208: PPUSH
82209: PPUSH
82210: PPUSH
82211: PPUSH
// if not mc_bases or not skirmish then
82212: LD_EXP 45
82216: NOT
82217: PUSH
82218: LD_EXP 43
82222: NOT
82223: OR
82224: IFFALSE 82228
// exit ;
82226: GO 82581
// repeat wait ( 0 0$1 ) ;
82228: LD_INT 35
82230: PPUSH
82231: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
82235: LD_VAR 0 2
82239: PPUSH
82240: LD_VAR 0 3
82244: PPUSH
82245: CALL_OW 284
82249: IFFALSE 82228
// if GetResourceTypeXY ( x , y ) = mat_artefact then
82251: LD_VAR 0 2
82255: PPUSH
82256: LD_VAR 0 3
82260: PPUSH
82261: CALL_OW 283
82265: PUSH
82266: LD_INT 4
82268: EQUAL
82269: IFFALSE 82273
// exit ;
82271: GO 82581
// for i = 1 to mc_bases do
82273: LD_ADDR_VAR 0 7
82277: PUSH
82278: DOUBLE
82279: LD_INT 1
82281: DEC
82282: ST_TO_ADDR
82283: LD_EXP 45
82287: PUSH
82288: FOR_TO
82289: IFFALSE 82579
// begin if mc_crates_area [ i ] then
82291: LD_EXP 63
82295: PUSH
82296: LD_VAR 0 7
82300: ARRAY
82301: IFFALSE 82412
// for j in mc_crates_area [ i ] do
82303: LD_ADDR_VAR 0 8
82307: PUSH
82308: LD_EXP 63
82312: PUSH
82313: LD_VAR 0 7
82317: ARRAY
82318: PUSH
82319: FOR_IN
82320: IFFALSE 82410
// if InArea ( x , y , j ) then
82322: LD_VAR 0 2
82326: PPUSH
82327: LD_VAR 0 3
82331: PPUSH
82332: LD_VAR 0 8
82336: PPUSH
82337: CALL_OW 309
82341: IFFALSE 82408
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
82343: LD_ADDR_EXP 61
82347: PUSH
82348: LD_EXP 61
82352: PPUSH
82353: LD_VAR 0 7
82357: PUSH
82358: LD_EXP 61
82362: PUSH
82363: LD_VAR 0 7
82367: ARRAY
82368: PUSH
82369: LD_INT 1
82371: PLUS
82372: PUSH
82373: EMPTY
82374: LIST
82375: LIST
82376: PPUSH
82377: LD_VAR 0 4
82381: PUSH
82382: LD_VAR 0 2
82386: PUSH
82387: LD_VAR 0 3
82391: PUSH
82392: EMPTY
82393: LIST
82394: LIST
82395: LIST
82396: PPUSH
82397: CALL 24301 0 3
82401: ST_TO_ADDR
// exit ;
82402: POP
82403: POP
82404: POP
82405: POP
82406: GO 82581
// end ;
82408: GO 82319
82410: POP
82411: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
82412: LD_ADDR_VAR 0 9
82416: PUSH
82417: LD_EXP 45
82421: PUSH
82422: LD_VAR 0 7
82426: ARRAY
82427: PPUSH
82428: LD_INT 2
82430: PUSH
82431: LD_INT 30
82433: PUSH
82434: LD_INT 0
82436: PUSH
82437: EMPTY
82438: LIST
82439: LIST
82440: PUSH
82441: LD_INT 30
82443: PUSH
82444: LD_INT 1
82446: PUSH
82447: EMPTY
82448: LIST
82449: LIST
82450: PUSH
82451: EMPTY
82452: LIST
82453: LIST
82454: LIST
82455: PPUSH
82456: CALL_OW 72
82460: ST_TO_ADDR
// if not depot then
82461: LD_VAR 0 9
82465: NOT
82466: IFFALSE 82470
// continue ;
82468: GO 82288
// for j in depot do
82470: LD_ADDR_VAR 0 8
82474: PUSH
82475: LD_VAR 0 9
82479: PUSH
82480: FOR_IN
82481: IFFALSE 82575
// if GetDistUnitXY ( j , x , y ) < 30 then
82483: LD_VAR 0 8
82487: PPUSH
82488: LD_VAR 0 2
82492: PPUSH
82493: LD_VAR 0 3
82497: PPUSH
82498: CALL_OW 297
82502: PUSH
82503: LD_INT 30
82505: LESS
82506: IFFALSE 82573
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
82508: LD_ADDR_EXP 61
82512: PUSH
82513: LD_EXP 61
82517: PPUSH
82518: LD_VAR 0 7
82522: PUSH
82523: LD_EXP 61
82527: PUSH
82528: LD_VAR 0 7
82532: ARRAY
82533: PUSH
82534: LD_INT 1
82536: PLUS
82537: PUSH
82538: EMPTY
82539: LIST
82540: LIST
82541: PPUSH
82542: LD_VAR 0 4
82546: PUSH
82547: LD_VAR 0 2
82551: PUSH
82552: LD_VAR 0 3
82556: PUSH
82557: EMPTY
82558: LIST
82559: LIST
82560: LIST
82561: PPUSH
82562: CALL 24301 0 3
82566: ST_TO_ADDR
// exit ;
82567: POP
82568: POP
82569: POP
82570: POP
82571: GO 82581
// end ;
82573: GO 82480
82575: POP
82576: POP
// end ;
82577: GO 82288
82579: POP
82580: POP
// end ;
82581: LD_VAR 0 6
82585: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
82586: LD_INT 0
82588: PPUSH
82589: PPUSH
82590: PPUSH
82591: PPUSH
// if not mc_bases or not skirmish then
82592: LD_EXP 45
82596: NOT
82597: PUSH
82598: LD_EXP 43
82602: NOT
82603: OR
82604: IFFALSE 82608
// exit ;
82606: GO 82885
// side := GetSide ( lab ) ;
82608: LD_ADDR_VAR 0 4
82612: PUSH
82613: LD_VAR 0 2
82617: PPUSH
82618: CALL_OW 255
82622: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
82623: LD_VAR 0 4
82627: PUSH
82628: LD_EXP 71
82632: IN
82633: NOT
82634: PUSH
82635: LD_EXP 72
82639: NOT
82640: OR
82641: PUSH
82642: LD_EXP 45
82646: NOT
82647: OR
82648: IFFALSE 82652
// exit ;
82650: GO 82885
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
82652: LD_ADDR_EXP 72
82656: PUSH
82657: LD_EXP 72
82661: PPUSH
82662: LD_VAR 0 4
82666: PPUSH
82667: LD_EXP 72
82671: PUSH
82672: LD_VAR 0 4
82676: ARRAY
82677: PUSH
82678: LD_VAR 0 1
82682: DIFF
82683: PPUSH
82684: CALL_OW 1
82688: ST_TO_ADDR
// for i = 1 to mc_bases do
82689: LD_ADDR_VAR 0 5
82693: PUSH
82694: DOUBLE
82695: LD_INT 1
82697: DEC
82698: ST_TO_ADDR
82699: LD_EXP 45
82703: PUSH
82704: FOR_TO
82705: IFFALSE 82883
// begin if lab in mc_bases [ i ] then
82707: LD_VAR 0 2
82711: PUSH
82712: LD_EXP 45
82716: PUSH
82717: LD_VAR 0 5
82721: ARRAY
82722: IN
82723: IFFALSE 82881
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
82725: LD_VAR 0 1
82729: PUSH
82730: LD_INT 11
82732: PUSH
82733: LD_INT 4
82735: PUSH
82736: LD_INT 3
82738: PUSH
82739: LD_INT 2
82741: PUSH
82742: EMPTY
82743: LIST
82744: LIST
82745: LIST
82746: LIST
82747: IN
82748: PUSH
82749: LD_EXP 75
82753: PUSH
82754: LD_VAR 0 5
82758: ARRAY
82759: AND
82760: IFFALSE 82881
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
82762: LD_ADDR_VAR 0 6
82766: PUSH
82767: LD_EXP 75
82771: PUSH
82772: LD_VAR 0 5
82776: ARRAY
82777: PUSH
82778: LD_INT 1
82780: ARRAY
82781: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
82782: LD_ADDR_EXP 75
82786: PUSH
82787: LD_EXP 75
82791: PPUSH
82792: LD_VAR 0 5
82796: PPUSH
82797: EMPTY
82798: PPUSH
82799: CALL_OW 1
82803: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
82804: LD_VAR 0 6
82808: PPUSH
82809: LD_INT 0
82811: PPUSH
82812: CALL_OW 109
// ComExitBuilding ( tmp ) ;
82816: LD_VAR 0 6
82820: PPUSH
82821: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
82825: LD_ADDR_EXP 74
82829: PUSH
82830: LD_EXP 74
82834: PPUSH
82835: LD_VAR 0 5
82839: PPUSH
82840: LD_EXP 74
82844: PUSH
82845: LD_VAR 0 5
82849: ARRAY
82850: PPUSH
82851: LD_INT 1
82853: PPUSH
82854: LD_VAR 0 6
82858: PPUSH
82859: CALL_OW 2
82863: PPUSH
82864: CALL_OW 1
82868: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
82869: LD_VAR 0 5
82873: PPUSH
82874: LD_INT 112
82876: PPUSH
82877: CALL 59897 0 2
// end ; end ; end ;
82881: GO 82704
82883: POP
82884: POP
// end ;
82885: LD_VAR 0 3
82889: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
82890: LD_INT 0
82892: PPUSH
82893: PPUSH
82894: PPUSH
82895: PPUSH
82896: PPUSH
82897: PPUSH
82898: PPUSH
82899: PPUSH
// if not mc_bases or not skirmish then
82900: LD_EXP 45
82904: NOT
82905: PUSH
82906: LD_EXP 43
82910: NOT
82911: OR
82912: IFFALSE 82916
// exit ;
82914: GO 84287
// for i = 1 to mc_bases do
82916: LD_ADDR_VAR 0 3
82920: PUSH
82921: DOUBLE
82922: LD_INT 1
82924: DEC
82925: ST_TO_ADDR
82926: LD_EXP 45
82930: PUSH
82931: FOR_TO
82932: IFFALSE 84285
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
82934: LD_VAR 0 1
82938: PUSH
82939: LD_EXP 45
82943: PUSH
82944: LD_VAR 0 3
82948: ARRAY
82949: IN
82950: PUSH
82951: LD_VAR 0 1
82955: PUSH
82956: LD_EXP 52
82960: PUSH
82961: LD_VAR 0 3
82965: ARRAY
82966: IN
82967: OR
82968: PUSH
82969: LD_VAR 0 1
82973: PUSH
82974: LD_EXP 67
82978: PUSH
82979: LD_VAR 0 3
82983: ARRAY
82984: IN
82985: OR
82986: PUSH
82987: LD_VAR 0 1
82991: PUSH
82992: LD_EXP 64
82996: PUSH
82997: LD_VAR 0 3
83001: ARRAY
83002: IN
83003: OR
83004: PUSH
83005: LD_VAR 0 1
83009: PUSH
83010: LD_EXP 74
83014: PUSH
83015: LD_VAR 0 3
83019: ARRAY
83020: IN
83021: OR
83022: PUSH
83023: LD_VAR 0 1
83027: PUSH
83028: LD_EXP 75
83032: PUSH
83033: LD_VAR 0 3
83037: ARRAY
83038: IN
83039: OR
83040: IFFALSE 84283
// begin if un in mc_ape [ i ] then
83042: LD_VAR 0 1
83046: PUSH
83047: LD_EXP 74
83051: PUSH
83052: LD_VAR 0 3
83056: ARRAY
83057: IN
83058: IFFALSE 83097
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
83060: LD_ADDR_EXP 74
83064: PUSH
83065: LD_EXP 74
83069: PPUSH
83070: LD_VAR 0 3
83074: PPUSH
83075: LD_EXP 74
83079: PUSH
83080: LD_VAR 0 3
83084: ARRAY
83085: PUSH
83086: LD_VAR 0 1
83090: DIFF
83091: PPUSH
83092: CALL_OW 1
83096: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
83097: LD_VAR 0 1
83101: PUSH
83102: LD_EXP 75
83106: PUSH
83107: LD_VAR 0 3
83111: ARRAY
83112: IN
83113: IFFALSE 83137
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
83115: LD_ADDR_EXP 75
83119: PUSH
83120: LD_EXP 75
83124: PPUSH
83125: LD_VAR 0 3
83129: PPUSH
83130: EMPTY
83131: PPUSH
83132: CALL_OW 1
83136: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
83137: LD_VAR 0 1
83141: PPUSH
83142: CALL_OW 247
83146: PUSH
83147: LD_INT 2
83149: EQUAL
83150: PUSH
83151: LD_VAR 0 1
83155: PPUSH
83156: CALL_OW 110
83160: PUSH
83161: LD_INT 20
83163: EQUAL
83164: PUSH
83165: LD_VAR 0 1
83169: PUSH
83170: LD_EXP 67
83174: PUSH
83175: LD_VAR 0 3
83179: ARRAY
83180: IN
83181: OR
83182: PUSH
83183: LD_VAR 0 1
83187: PPUSH
83188: CALL_OW 264
83192: PUSH
83193: LD_INT 12
83195: PUSH
83196: LD_INT 51
83198: PUSH
83199: LD_EXP 30
83203: PUSH
83204: LD_INT 32
83206: PUSH
83207: LD_INT 13
83209: PUSH
83210: LD_INT 52
83212: PUSH
83213: LD_INT 31
83215: PUSH
83216: EMPTY
83217: LIST
83218: LIST
83219: LIST
83220: LIST
83221: LIST
83222: LIST
83223: LIST
83224: IN
83225: OR
83226: AND
83227: IFFALSE 83535
// begin if un in mc_defender [ i ] then
83229: LD_VAR 0 1
83233: PUSH
83234: LD_EXP 67
83238: PUSH
83239: LD_VAR 0 3
83243: ARRAY
83244: IN
83245: IFFALSE 83284
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
83247: LD_ADDR_EXP 67
83251: PUSH
83252: LD_EXP 67
83256: PPUSH
83257: LD_VAR 0 3
83261: PPUSH
83262: LD_EXP 67
83266: PUSH
83267: LD_VAR 0 3
83271: ARRAY
83272: PUSH
83273: LD_VAR 0 1
83277: DIFF
83278: PPUSH
83279: CALL_OW 1
83283: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
83284: LD_ADDR_VAR 0 8
83288: PUSH
83289: LD_VAR 0 3
83293: PPUSH
83294: LD_INT 3
83296: PPUSH
83297: CALL 79953 0 2
83301: ST_TO_ADDR
// if fac then
83302: LD_VAR 0 8
83306: IFFALSE 83535
// begin for j in fac do
83308: LD_ADDR_VAR 0 4
83312: PUSH
83313: LD_VAR 0 8
83317: PUSH
83318: FOR_IN
83319: IFFALSE 83533
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
83321: LD_ADDR_VAR 0 9
83325: PUSH
83326: LD_VAR 0 8
83330: PPUSH
83331: LD_VAR 0 1
83335: PPUSH
83336: CALL_OW 265
83340: PPUSH
83341: LD_VAR 0 1
83345: PPUSH
83346: CALL_OW 262
83350: PPUSH
83351: LD_VAR 0 1
83355: PPUSH
83356: CALL_OW 263
83360: PPUSH
83361: LD_VAR 0 1
83365: PPUSH
83366: CALL_OW 264
83370: PPUSH
83371: CALL 21833 0 5
83375: ST_TO_ADDR
// if components then
83376: LD_VAR 0 9
83380: IFFALSE 83531
// begin if GetWeapon ( un ) = ar_control_tower then
83382: LD_VAR 0 1
83386: PPUSH
83387: CALL_OW 264
83391: PUSH
83392: LD_INT 31
83394: EQUAL
83395: IFFALSE 83512
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
83397: LD_VAR 0 1
83401: PPUSH
83402: CALL_OW 311
83406: PPUSH
83407: LD_INT 0
83409: PPUSH
83410: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
83414: LD_ADDR_EXP 85
83418: PUSH
83419: LD_EXP 85
83423: PPUSH
83424: LD_VAR 0 3
83428: PPUSH
83429: LD_EXP 85
83433: PUSH
83434: LD_VAR 0 3
83438: ARRAY
83439: PUSH
83440: LD_VAR 0 1
83444: PPUSH
83445: CALL_OW 311
83449: DIFF
83450: PPUSH
83451: CALL_OW 1
83455: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
83456: LD_ADDR_VAR 0 7
83460: PUSH
83461: LD_EXP 66
83465: PUSH
83466: LD_VAR 0 3
83470: ARRAY
83471: PPUSH
83472: LD_INT 1
83474: PPUSH
83475: LD_VAR 0 9
83479: PPUSH
83480: CALL_OW 2
83484: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
83485: LD_ADDR_EXP 66
83489: PUSH
83490: LD_EXP 66
83494: PPUSH
83495: LD_VAR 0 3
83499: PPUSH
83500: LD_VAR 0 7
83504: PPUSH
83505: CALL_OW 1
83509: ST_TO_ADDR
// end else
83510: GO 83529
// MC_InsertProduceList ( i , [ components ] ) ;
83512: LD_VAR 0 3
83516: PPUSH
83517: LD_VAR 0 9
83521: PUSH
83522: EMPTY
83523: LIST
83524: PPUSH
83525: CALL 79498 0 2
// break ;
83529: GO 83533
// end ; end ;
83531: GO 83318
83533: POP
83534: POP
// end ; end ; if GetType ( un ) = unit_building then
83535: LD_VAR 0 1
83539: PPUSH
83540: CALL_OW 247
83544: PUSH
83545: LD_INT 3
83547: EQUAL
83548: IFFALSE 83951
// begin btype := GetBType ( un ) ;
83550: LD_ADDR_VAR 0 5
83554: PUSH
83555: LD_VAR 0 1
83559: PPUSH
83560: CALL_OW 266
83564: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
83565: LD_VAR 0 5
83569: PUSH
83570: LD_INT 29
83572: PUSH
83573: LD_INT 30
83575: PUSH
83576: EMPTY
83577: LIST
83578: LIST
83579: IN
83580: IFFALSE 83653
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
83582: LD_VAR 0 1
83586: PPUSH
83587: CALL_OW 250
83591: PPUSH
83592: LD_VAR 0 1
83596: PPUSH
83597: CALL_OW 251
83601: PPUSH
83602: LD_VAR 0 1
83606: PPUSH
83607: CALL_OW 255
83611: PPUSH
83612: CALL_OW 440
83616: NOT
83617: IFFALSE 83653
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
83619: LD_VAR 0 1
83623: PPUSH
83624: CALL_OW 250
83628: PPUSH
83629: LD_VAR 0 1
83633: PPUSH
83634: CALL_OW 251
83638: PPUSH
83639: LD_VAR 0 1
83643: PPUSH
83644: CALL_OW 255
83648: PPUSH
83649: CALL_OW 441
// end ; if btype = b_warehouse then
83653: LD_VAR 0 5
83657: PUSH
83658: LD_INT 1
83660: EQUAL
83661: IFFALSE 83679
// begin btype := b_depot ;
83663: LD_ADDR_VAR 0 5
83667: PUSH
83668: LD_INT 0
83670: ST_TO_ADDR
// pos := 1 ;
83671: LD_ADDR_VAR 0 6
83675: PUSH
83676: LD_INT 1
83678: ST_TO_ADDR
// end ; if btype = b_factory then
83679: LD_VAR 0 5
83683: PUSH
83684: LD_INT 3
83686: EQUAL
83687: IFFALSE 83705
// begin btype := b_workshop ;
83689: LD_ADDR_VAR 0 5
83693: PUSH
83694: LD_INT 2
83696: ST_TO_ADDR
// pos := 1 ;
83697: LD_ADDR_VAR 0 6
83701: PUSH
83702: LD_INT 1
83704: ST_TO_ADDR
// end ; if btype = b_barracks then
83705: LD_VAR 0 5
83709: PUSH
83710: LD_INT 5
83712: EQUAL
83713: IFFALSE 83723
// btype := b_armoury ;
83715: LD_ADDR_VAR 0 5
83719: PUSH
83720: LD_INT 4
83722: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
83723: LD_VAR 0 5
83727: PUSH
83728: LD_INT 7
83730: PUSH
83731: LD_INT 8
83733: PUSH
83734: EMPTY
83735: LIST
83736: LIST
83737: IN
83738: IFFALSE 83748
// btype := b_lab ;
83740: LD_ADDR_VAR 0 5
83744: PUSH
83745: LD_INT 6
83747: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
83748: LD_ADDR_EXP 50
83752: PUSH
83753: LD_EXP 50
83757: PPUSH
83758: LD_VAR 0 3
83762: PUSH
83763: LD_EXP 50
83767: PUSH
83768: LD_VAR 0 3
83772: ARRAY
83773: PUSH
83774: LD_INT 1
83776: PLUS
83777: PUSH
83778: EMPTY
83779: LIST
83780: LIST
83781: PPUSH
83782: LD_VAR 0 5
83786: PUSH
83787: LD_VAR 0 1
83791: PPUSH
83792: CALL_OW 250
83796: PUSH
83797: LD_VAR 0 1
83801: PPUSH
83802: CALL_OW 251
83806: PUSH
83807: LD_VAR 0 1
83811: PPUSH
83812: CALL_OW 254
83816: PUSH
83817: EMPTY
83818: LIST
83819: LIST
83820: LIST
83821: LIST
83822: PPUSH
83823: CALL 24301 0 3
83827: ST_TO_ADDR
// if pos = 1 then
83828: LD_VAR 0 6
83832: PUSH
83833: LD_INT 1
83835: EQUAL
83836: IFFALSE 83951
// begin tmp := mc_build_list [ i ] ;
83838: LD_ADDR_VAR 0 7
83842: PUSH
83843: LD_EXP 50
83847: PUSH
83848: LD_VAR 0 3
83852: ARRAY
83853: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
83854: LD_VAR 0 7
83858: PPUSH
83859: LD_INT 2
83861: PUSH
83862: LD_INT 30
83864: PUSH
83865: LD_INT 0
83867: PUSH
83868: EMPTY
83869: LIST
83870: LIST
83871: PUSH
83872: LD_INT 30
83874: PUSH
83875: LD_INT 1
83877: PUSH
83878: EMPTY
83879: LIST
83880: LIST
83881: PUSH
83882: EMPTY
83883: LIST
83884: LIST
83885: LIST
83886: PPUSH
83887: CALL_OW 72
83891: IFFALSE 83901
// pos := 2 ;
83893: LD_ADDR_VAR 0 6
83897: PUSH
83898: LD_INT 2
83900: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
83901: LD_ADDR_VAR 0 7
83905: PUSH
83906: LD_VAR 0 7
83910: PPUSH
83911: LD_VAR 0 6
83915: PPUSH
83916: LD_VAR 0 7
83920: PPUSH
83921: CALL 24627 0 3
83925: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
83926: LD_ADDR_EXP 50
83930: PUSH
83931: LD_EXP 50
83935: PPUSH
83936: LD_VAR 0 3
83940: PPUSH
83941: LD_VAR 0 7
83945: PPUSH
83946: CALL_OW 1
83950: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
83951: LD_VAR 0 1
83955: PUSH
83956: LD_EXP 45
83960: PUSH
83961: LD_VAR 0 3
83965: ARRAY
83966: IN
83967: IFFALSE 84006
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
83969: LD_ADDR_EXP 45
83973: PUSH
83974: LD_EXP 45
83978: PPUSH
83979: LD_VAR 0 3
83983: PPUSH
83984: LD_EXP 45
83988: PUSH
83989: LD_VAR 0 3
83993: ARRAY
83994: PUSH
83995: LD_VAR 0 1
83999: DIFF
84000: PPUSH
84001: CALL_OW 1
84005: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
84006: LD_VAR 0 1
84010: PUSH
84011: LD_EXP 52
84015: PUSH
84016: LD_VAR 0 3
84020: ARRAY
84021: IN
84022: IFFALSE 84061
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
84024: LD_ADDR_EXP 52
84028: PUSH
84029: LD_EXP 52
84033: PPUSH
84034: LD_VAR 0 3
84038: PPUSH
84039: LD_EXP 52
84043: PUSH
84044: LD_VAR 0 3
84048: ARRAY
84049: PUSH
84050: LD_VAR 0 1
84054: DIFF
84055: PPUSH
84056: CALL_OW 1
84060: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
84061: LD_VAR 0 1
84065: PUSH
84066: LD_EXP 64
84070: PUSH
84071: LD_VAR 0 3
84075: ARRAY
84076: IN
84077: IFFALSE 84116
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
84079: LD_ADDR_EXP 64
84083: PUSH
84084: LD_EXP 64
84088: PPUSH
84089: LD_VAR 0 3
84093: PPUSH
84094: LD_EXP 64
84098: PUSH
84099: LD_VAR 0 3
84103: ARRAY
84104: PUSH
84105: LD_VAR 0 1
84109: DIFF
84110: PPUSH
84111: CALL_OW 1
84115: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
84116: LD_VAR 0 1
84120: PUSH
84121: LD_EXP 67
84125: PUSH
84126: LD_VAR 0 3
84130: ARRAY
84131: IN
84132: IFFALSE 84171
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
84134: LD_ADDR_EXP 67
84138: PUSH
84139: LD_EXP 67
84143: PPUSH
84144: LD_VAR 0 3
84148: PPUSH
84149: LD_EXP 67
84153: PUSH
84154: LD_VAR 0 3
84158: ARRAY
84159: PUSH
84160: LD_VAR 0 1
84164: DIFF
84165: PPUSH
84166: CALL_OW 1
84170: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
84171: LD_VAR 0 1
84175: PUSH
84176: LD_EXP 54
84180: PUSH
84181: LD_VAR 0 3
84185: ARRAY
84186: IN
84187: IFFALSE 84226
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
84189: LD_ADDR_EXP 54
84193: PUSH
84194: LD_EXP 54
84198: PPUSH
84199: LD_VAR 0 3
84203: PPUSH
84204: LD_EXP 54
84208: PUSH
84209: LD_VAR 0 3
84213: ARRAY
84214: PUSH
84215: LD_VAR 0 1
84219: DIFF
84220: PPUSH
84221: CALL_OW 1
84225: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
84226: LD_VAR 0 1
84230: PUSH
84231: LD_EXP 53
84235: PUSH
84236: LD_VAR 0 3
84240: ARRAY
84241: IN
84242: IFFALSE 84281
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
84244: LD_ADDR_EXP 53
84248: PUSH
84249: LD_EXP 53
84253: PPUSH
84254: LD_VAR 0 3
84258: PPUSH
84259: LD_EXP 53
84263: PUSH
84264: LD_VAR 0 3
84268: ARRAY
84269: PUSH
84270: LD_VAR 0 1
84274: DIFF
84275: PPUSH
84276: CALL_OW 1
84280: ST_TO_ADDR
// end ; break ;
84281: GO 84285
// end ;
84283: GO 82931
84285: POP
84286: POP
// end ;
84287: LD_VAR 0 2
84291: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
84292: LD_INT 0
84294: PPUSH
84295: PPUSH
84296: PPUSH
// if not mc_bases or not skirmish then
84297: LD_EXP 45
84301: NOT
84302: PUSH
84303: LD_EXP 43
84307: NOT
84308: OR
84309: IFFALSE 84313
// exit ;
84311: GO 84528
// for i = 1 to mc_bases do
84313: LD_ADDR_VAR 0 3
84317: PUSH
84318: DOUBLE
84319: LD_INT 1
84321: DEC
84322: ST_TO_ADDR
84323: LD_EXP 45
84327: PUSH
84328: FOR_TO
84329: IFFALSE 84526
// begin if building in mc_construct_list [ i ] then
84331: LD_VAR 0 1
84335: PUSH
84336: LD_EXP 52
84340: PUSH
84341: LD_VAR 0 3
84345: ARRAY
84346: IN
84347: IFFALSE 84524
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
84349: LD_ADDR_EXP 52
84353: PUSH
84354: LD_EXP 52
84358: PPUSH
84359: LD_VAR 0 3
84363: PPUSH
84364: LD_EXP 52
84368: PUSH
84369: LD_VAR 0 3
84373: ARRAY
84374: PUSH
84375: LD_VAR 0 1
84379: DIFF
84380: PPUSH
84381: CALL_OW 1
84385: ST_TO_ADDR
// if building in mc_lab [ i ] then
84386: LD_VAR 0 1
84390: PUSH
84391: LD_EXP 78
84395: PUSH
84396: LD_VAR 0 3
84400: ARRAY
84401: IN
84402: IFFALSE 84457
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
84404: LD_ADDR_EXP 79
84408: PUSH
84409: LD_EXP 79
84413: PPUSH
84414: LD_VAR 0 3
84418: PPUSH
84419: LD_EXP 79
84423: PUSH
84424: LD_VAR 0 3
84428: ARRAY
84429: PPUSH
84430: LD_INT 1
84432: PPUSH
84433: LD_EXP 79
84437: PUSH
84438: LD_VAR 0 3
84442: ARRAY
84443: PPUSH
84444: LD_INT 0
84446: PPUSH
84447: CALL 23719 0 4
84451: PPUSH
84452: CALL_OW 1
84456: ST_TO_ADDR
// if not building in mc_bases [ i ] then
84457: LD_VAR 0 1
84461: PUSH
84462: LD_EXP 45
84466: PUSH
84467: LD_VAR 0 3
84471: ARRAY
84472: IN
84473: NOT
84474: IFFALSE 84520
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
84476: LD_ADDR_EXP 45
84480: PUSH
84481: LD_EXP 45
84485: PPUSH
84486: LD_VAR 0 3
84490: PUSH
84491: LD_EXP 45
84495: PUSH
84496: LD_VAR 0 3
84500: ARRAY
84501: PUSH
84502: LD_INT 1
84504: PLUS
84505: PUSH
84506: EMPTY
84507: LIST
84508: LIST
84509: PPUSH
84510: LD_VAR 0 1
84514: PPUSH
84515: CALL 24301 0 3
84519: ST_TO_ADDR
// exit ;
84520: POP
84521: POP
84522: GO 84528
// end ; end ;
84524: GO 84328
84526: POP
84527: POP
// end ;
84528: LD_VAR 0 2
84532: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
84533: LD_INT 0
84535: PPUSH
84536: PPUSH
84537: PPUSH
84538: PPUSH
84539: PPUSH
84540: PPUSH
84541: PPUSH
// if not mc_bases or not skirmish then
84542: LD_EXP 45
84546: NOT
84547: PUSH
84548: LD_EXP 43
84552: NOT
84553: OR
84554: IFFALSE 84558
// exit ;
84556: GO 85219
// for i = 1 to mc_bases do
84558: LD_ADDR_VAR 0 3
84562: PUSH
84563: DOUBLE
84564: LD_INT 1
84566: DEC
84567: ST_TO_ADDR
84568: LD_EXP 45
84572: PUSH
84573: FOR_TO
84574: IFFALSE 85217
// begin if building in mc_construct_list [ i ] then
84576: LD_VAR 0 1
84580: PUSH
84581: LD_EXP 52
84585: PUSH
84586: LD_VAR 0 3
84590: ARRAY
84591: IN
84592: IFFALSE 85215
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
84594: LD_ADDR_EXP 52
84598: PUSH
84599: LD_EXP 52
84603: PPUSH
84604: LD_VAR 0 3
84608: PPUSH
84609: LD_EXP 52
84613: PUSH
84614: LD_VAR 0 3
84618: ARRAY
84619: PUSH
84620: LD_VAR 0 1
84624: DIFF
84625: PPUSH
84626: CALL_OW 1
84630: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
84631: LD_ADDR_EXP 45
84635: PUSH
84636: LD_EXP 45
84640: PPUSH
84641: LD_VAR 0 3
84645: PUSH
84646: LD_EXP 45
84650: PUSH
84651: LD_VAR 0 3
84655: ARRAY
84656: PUSH
84657: LD_INT 1
84659: PLUS
84660: PUSH
84661: EMPTY
84662: LIST
84663: LIST
84664: PPUSH
84665: LD_VAR 0 1
84669: PPUSH
84670: CALL 24301 0 3
84674: ST_TO_ADDR
// btype := GetBType ( building ) ;
84675: LD_ADDR_VAR 0 5
84679: PUSH
84680: LD_VAR 0 1
84684: PPUSH
84685: CALL_OW 266
84689: ST_TO_ADDR
// side := GetSide ( building ) ;
84690: LD_ADDR_VAR 0 8
84694: PUSH
84695: LD_VAR 0 1
84699: PPUSH
84700: CALL_OW 255
84704: ST_TO_ADDR
// if btype = b_lab then
84705: LD_VAR 0 5
84709: PUSH
84710: LD_INT 6
84712: EQUAL
84713: IFFALSE 84763
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
84715: LD_ADDR_EXP 78
84719: PUSH
84720: LD_EXP 78
84724: PPUSH
84725: LD_VAR 0 3
84729: PUSH
84730: LD_EXP 78
84734: PUSH
84735: LD_VAR 0 3
84739: ARRAY
84740: PUSH
84741: LD_INT 1
84743: PLUS
84744: PUSH
84745: EMPTY
84746: LIST
84747: LIST
84748: PPUSH
84749: LD_VAR 0 1
84753: PPUSH
84754: CALL 24301 0 3
84758: ST_TO_ADDR
// exit ;
84759: POP
84760: POP
84761: GO 85219
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
84763: LD_VAR 0 5
84767: PUSH
84768: LD_INT 0
84770: PUSH
84771: LD_INT 2
84773: PUSH
84774: LD_INT 4
84776: PUSH
84777: EMPTY
84778: LIST
84779: LIST
84780: LIST
84781: IN
84782: IFFALSE 84906
// begin if btype = b_armoury then
84784: LD_VAR 0 5
84788: PUSH
84789: LD_INT 4
84791: EQUAL
84792: IFFALSE 84802
// btype := b_barracks ;
84794: LD_ADDR_VAR 0 5
84798: PUSH
84799: LD_INT 5
84801: ST_TO_ADDR
// if btype = b_depot then
84802: LD_VAR 0 5
84806: PUSH
84807: LD_INT 0
84809: EQUAL
84810: IFFALSE 84820
// btype := b_warehouse ;
84812: LD_ADDR_VAR 0 5
84816: PUSH
84817: LD_INT 1
84819: ST_TO_ADDR
// if btype = b_workshop then
84820: LD_VAR 0 5
84824: PUSH
84825: LD_INT 2
84827: EQUAL
84828: IFFALSE 84838
// btype := b_factory ;
84830: LD_ADDR_VAR 0 5
84834: PUSH
84835: LD_INT 3
84837: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
84838: LD_VAR 0 5
84842: PPUSH
84843: LD_VAR 0 8
84847: PPUSH
84848: CALL_OW 323
84852: PUSH
84853: LD_INT 1
84855: EQUAL
84856: IFFALSE 84902
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
84858: LD_ADDR_EXP 77
84862: PUSH
84863: LD_EXP 77
84867: PPUSH
84868: LD_VAR 0 3
84872: PUSH
84873: LD_EXP 77
84877: PUSH
84878: LD_VAR 0 3
84882: ARRAY
84883: PUSH
84884: LD_INT 1
84886: PLUS
84887: PUSH
84888: EMPTY
84889: LIST
84890: LIST
84891: PPUSH
84892: LD_VAR 0 1
84896: PPUSH
84897: CALL 24301 0 3
84901: ST_TO_ADDR
// exit ;
84902: POP
84903: POP
84904: GO 85219
// end ; if btype in [ b_bunker , b_turret ] then
84906: LD_VAR 0 5
84910: PUSH
84911: LD_INT 32
84913: PUSH
84914: LD_INT 33
84916: PUSH
84917: EMPTY
84918: LIST
84919: LIST
84920: IN
84921: IFFALSE 85211
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
84923: LD_ADDR_EXP 53
84927: PUSH
84928: LD_EXP 53
84932: PPUSH
84933: LD_VAR 0 3
84937: PUSH
84938: LD_EXP 53
84942: PUSH
84943: LD_VAR 0 3
84947: ARRAY
84948: PUSH
84949: LD_INT 1
84951: PLUS
84952: PUSH
84953: EMPTY
84954: LIST
84955: LIST
84956: PPUSH
84957: LD_VAR 0 1
84961: PPUSH
84962: CALL 24301 0 3
84966: ST_TO_ADDR
// if btype = b_bunker then
84967: LD_VAR 0 5
84971: PUSH
84972: LD_INT 32
84974: EQUAL
84975: IFFALSE 85211
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
84977: LD_ADDR_EXP 54
84981: PUSH
84982: LD_EXP 54
84986: PPUSH
84987: LD_VAR 0 3
84991: PUSH
84992: LD_EXP 54
84996: PUSH
84997: LD_VAR 0 3
85001: ARRAY
85002: PUSH
85003: LD_INT 1
85005: PLUS
85006: PUSH
85007: EMPTY
85008: LIST
85009: LIST
85010: PPUSH
85011: LD_VAR 0 1
85015: PPUSH
85016: CALL 24301 0 3
85020: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
85021: LD_ADDR_VAR 0 6
85025: PUSH
85026: LD_EXP 45
85030: PUSH
85031: LD_VAR 0 3
85035: ARRAY
85036: PPUSH
85037: LD_INT 25
85039: PUSH
85040: LD_INT 1
85042: PUSH
85043: EMPTY
85044: LIST
85045: LIST
85046: PUSH
85047: LD_INT 3
85049: PUSH
85050: LD_INT 54
85052: PUSH
85053: EMPTY
85054: LIST
85055: PUSH
85056: EMPTY
85057: LIST
85058: LIST
85059: PUSH
85060: EMPTY
85061: LIST
85062: LIST
85063: PPUSH
85064: CALL_OW 72
85068: ST_TO_ADDR
// if tmp then
85069: LD_VAR 0 6
85073: IFFALSE 85079
// exit ;
85075: POP
85076: POP
85077: GO 85219
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
85079: LD_ADDR_VAR 0 6
85083: PUSH
85084: LD_EXP 45
85088: PUSH
85089: LD_VAR 0 3
85093: ARRAY
85094: PPUSH
85095: LD_INT 2
85097: PUSH
85098: LD_INT 30
85100: PUSH
85101: LD_INT 4
85103: PUSH
85104: EMPTY
85105: LIST
85106: LIST
85107: PUSH
85108: LD_INT 30
85110: PUSH
85111: LD_INT 5
85113: PUSH
85114: EMPTY
85115: LIST
85116: LIST
85117: PUSH
85118: EMPTY
85119: LIST
85120: LIST
85121: LIST
85122: PPUSH
85123: CALL_OW 72
85127: ST_TO_ADDR
// if not tmp then
85128: LD_VAR 0 6
85132: NOT
85133: IFFALSE 85139
// exit ;
85135: POP
85136: POP
85137: GO 85219
// for j in tmp do
85139: LD_ADDR_VAR 0 4
85143: PUSH
85144: LD_VAR 0 6
85148: PUSH
85149: FOR_IN
85150: IFFALSE 85209
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
85152: LD_ADDR_VAR 0 7
85156: PUSH
85157: LD_VAR 0 4
85161: PPUSH
85162: CALL_OW 313
85166: PPUSH
85167: LD_INT 25
85169: PUSH
85170: LD_INT 1
85172: PUSH
85173: EMPTY
85174: LIST
85175: LIST
85176: PPUSH
85177: CALL_OW 72
85181: ST_TO_ADDR
// if units then
85182: LD_VAR 0 7
85186: IFFALSE 85207
// begin ComExitBuilding ( units [ 1 ] ) ;
85188: LD_VAR 0 7
85192: PUSH
85193: LD_INT 1
85195: ARRAY
85196: PPUSH
85197: CALL_OW 122
// exit ;
85201: POP
85202: POP
85203: POP
85204: POP
85205: GO 85219
// end ; end ;
85207: GO 85149
85209: POP
85210: POP
// end ; end ; exit ;
85211: POP
85212: POP
85213: GO 85219
// end ; end ;
85215: GO 84573
85217: POP
85218: POP
// end ;
85219: LD_VAR 0 2
85223: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
85224: LD_INT 0
85226: PPUSH
85227: PPUSH
85228: PPUSH
85229: PPUSH
85230: PPUSH
85231: PPUSH
85232: PPUSH
// if not mc_bases or not skirmish then
85233: LD_EXP 45
85237: NOT
85238: PUSH
85239: LD_EXP 43
85243: NOT
85244: OR
85245: IFFALSE 85249
// exit ;
85247: GO 85480
// btype := GetBType ( building ) ;
85249: LD_ADDR_VAR 0 6
85253: PUSH
85254: LD_VAR 0 1
85258: PPUSH
85259: CALL_OW 266
85263: ST_TO_ADDR
// x := GetX ( building ) ;
85264: LD_ADDR_VAR 0 7
85268: PUSH
85269: LD_VAR 0 1
85273: PPUSH
85274: CALL_OW 250
85278: ST_TO_ADDR
// y := GetY ( building ) ;
85279: LD_ADDR_VAR 0 8
85283: PUSH
85284: LD_VAR 0 1
85288: PPUSH
85289: CALL_OW 251
85293: ST_TO_ADDR
// d := GetDir ( building ) ;
85294: LD_ADDR_VAR 0 9
85298: PUSH
85299: LD_VAR 0 1
85303: PPUSH
85304: CALL_OW 254
85308: ST_TO_ADDR
// for i = 1 to mc_bases do
85309: LD_ADDR_VAR 0 4
85313: PUSH
85314: DOUBLE
85315: LD_INT 1
85317: DEC
85318: ST_TO_ADDR
85319: LD_EXP 45
85323: PUSH
85324: FOR_TO
85325: IFFALSE 85478
// begin if not mc_build_list [ i ] then
85327: LD_EXP 50
85331: PUSH
85332: LD_VAR 0 4
85336: ARRAY
85337: NOT
85338: IFFALSE 85342
// continue ;
85340: GO 85324
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
85342: LD_VAR 0 6
85346: PUSH
85347: LD_VAR 0 7
85351: PUSH
85352: LD_VAR 0 8
85356: PUSH
85357: LD_VAR 0 9
85361: PUSH
85362: EMPTY
85363: LIST
85364: LIST
85365: LIST
85366: LIST
85367: PPUSH
85368: LD_EXP 50
85372: PUSH
85373: LD_VAR 0 4
85377: ARRAY
85378: PUSH
85379: LD_INT 1
85381: ARRAY
85382: PPUSH
85383: CALL 30470 0 2
85387: IFFALSE 85476
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
85389: LD_ADDR_EXP 50
85393: PUSH
85394: LD_EXP 50
85398: PPUSH
85399: LD_VAR 0 4
85403: PPUSH
85404: LD_EXP 50
85408: PUSH
85409: LD_VAR 0 4
85413: ARRAY
85414: PPUSH
85415: LD_INT 1
85417: PPUSH
85418: CALL_OW 3
85422: PPUSH
85423: CALL_OW 1
85427: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
85428: LD_ADDR_EXP 52
85432: PUSH
85433: LD_EXP 52
85437: PPUSH
85438: LD_VAR 0 4
85442: PUSH
85443: LD_EXP 52
85447: PUSH
85448: LD_VAR 0 4
85452: ARRAY
85453: PUSH
85454: LD_INT 1
85456: PLUS
85457: PUSH
85458: EMPTY
85459: LIST
85460: LIST
85461: PPUSH
85462: LD_VAR 0 1
85466: PPUSH
85467: CALL 24301 0 3
85471: ST_TO_ADDR
// exit ;
85472: POP
85473: POP
85474: GO 85480
// end ; end ;
85476: GO 85324
85478: POP
85479: POP
// end ;
85480: LD_VAR 0 3
85484: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
85485: LD_INT 0
85487: PPUSH
85488: PPUSH
85489: PPUSH
// if not mc_bases or not skirmish then
85490: LD_EXP 45
85494: NOT
85495: PUSH
85496: LD_EXP 43
85500: NOT
85501: OR
85502: IFFALSE 85506
// exit ;
85504: GO 85696
// for i = 1 to mc_bases do
85506: LD_ADDR_VAR 0 4
85510: PUSH
85511: DOUBLE
85512: LD_INT 1
85514: DEC
85515: ST_TO_ADDR
85516: LD_EXP 45
85520: PUSH
85521: FOR_TO
85522: IFFALSE 85609
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
85524: LD_VAR 0 1
85528: PUSH
85529: LD_EXP 53
85533: PUSH
85534: LD_VAR 0 4
85538: ARRAY
85539: IN
85540: PUSH
85541: LD_VAR 0 1
85545: PUSH
85546: LD_EXP 54
85550: PUSH
85551: LD_VAR 0 4
85555: ARRAY
85556: IN
85557: NOT
85558: AND
85559: IFFALSE 85607
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
85561: LD_ADDR_EXP 54
85565: PUSH
85566: LD_EXP 54
85570: PPUSH
85571: LD_VAR 0 4
85575: PUSH
85576: LD_EXP 54
85580: PUSH
85581: LD_VAR 0 4
85585: ARRAY
85586: PUSH
85587: LD_INT 1
85589: PLUS
85590: PUSH
85591: EMPTY
85592: LIST
85593: LIST
85594: PPUSH
85595: LD_VAR 0 1
85599: PPUSH
85600: CALL 24301 0 3
85604: ST_TO_ADDR
// break ;
85605: GO 85609
// end ; end ;
85607: GO 85521
85609: POP
85610: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
85611: LD_VAR 0 1
85615: PPUSH
85616: CALL_OW 257
85620: PUSH
85621: LD_EXP 71
85625: IN
85626: PUSH
85627: LD_VAR 0 1
85631: PPUSH
85632: CALL_OW 266
85636: PUSH
85637: LD_INT 5
85639: EQUAL
85640: AND
85641: PUSH
85642: LD_VAR 0 2
85646: PPUSH
85647: CALL_OW 110
85651: PUSH
85652: LD_INT 18
85654: NONEQUAL
85655: AND
85656: IFFALSE 85696
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
85658: LD_VAR 0 2
85662: PPUSH
85663: CALL_OW 257
85667: PUSH
85668: LD_INT 5
85670: PUSH
85671: LD_INT 8
85673: PUSH
85674: LD_INT 9
85676: PUSH
85677: EMPTY
85678: LIST
85679: LIST
85680: LIST
85681: IN
85682: IFFALSE 85696
// SetClass ( unit , 1 ) ;
85684: LD_VAR 0 2
85688: PPUSH
85689: LD_INT 1
85691: PPUSH
85692: CALL_OW 336
// end ;
85696: LD_VAR 0 3
85700: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
85701: LD_INT 0
85703: PPUSH
85704: PPUSH
// if not mc_bases or not skirmish then
85705: LD_EXP 45
85709: NOT
85710: PUSH
85711: LD_EXP 43
85715: NOT
85716: OR
85717: IFFALSE 85721
// exit ;
85719: GO 85837
// if GetLives ( abandoned_vehicle ) > 250 then
85721: LD_VAR 0 2
85725: PPUSH
85726: CALL_OW 256
85730: PUSH
85731: LD_INT 250
85733: GREATER
85734: IFFALSE 85738
// exit ;
85736: GO 85837
// for i = 1 to mc_bases do
85738: LD_ADDR_VAR 0 6
85742: PUSH
85743: DOUBLE
85744: LD_INT 1
85746: DEC
85747: ST_TO_ADDR
85748: LD_EXP 45
85752: PUSH
85753: FOR_TO
85754: IFFALSE 85835
// begin if driver in mc_bases [ i ] then
85756: LD_VAR 0 1
85760: PUSH
85761: LD_EXP 45
85765: PUSH
85766: LD_VAR 0 6
85770: ARRAY
85771: IN
85772: IFFALSE 85833
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
85774: LD_VAR 0 1
85778: PPUSH
85779: LD_EXP 45
85783: PUSH
85784: LD_VAR 0 6
85788: ARRAY
85789: PPUSH
85790: LD_INT 2
85792: PUSH
85793: LD_INT 30
85795: PUSH
85796: LD_INT 0
85798: PUSH
85799: EMPTY
85800: LIST
85801: LIST
85802: PUSH
85803: LD_INT 30
85805: PUSH
85806: LD_INT 1
85808: PUSH
85809: EMPTY
85810: LIST
85811: LIST
85812: PUSH
85813: EMPTY
85814: LIST
85815: LIST
85816: LIST
85817: PPUSH
85818: CALL_OW 72
85822: PUSH
85823: LD_INT 1
85825: ARRAY
85826: PPUSH
85827: CALL_OW 112
// break ;
85831: GO 85835
// end ; end ;
85833: GO 85753
85835: POP
85836: POP
// end ; end_of_file end_of_file
85837: LD_VAR 0 5
85841: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
85842: GO 85844
85844: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
85845: LD_STRING initStreamRollete();
85847: PPUSH
85848: CALL_OW 559
// InitStreamMode ;
85852: CALL 85861 0 0
// DefineStreamItems ( ) ;
85856: CALL 86301 0 0
// end ;
85860: END
// function InitStreamMode ; begin
85861: LD_INT 0
85863: PPUSH
// streamModeActive := false ;
85864: LD_ADDR_EXP 88
85868: PUSH
85869: LD_INT 0
85871: ST_TO_ADDR
// normalCounter := 36 ;
85872: LD_ADDR_EXP 89
85876: PUSH
85877: LD_INT 36
85879: ST_TO_ADDR
// hardcoreCounter := 16 ;
85880: LD_ADDR_EXP 90
85884: PUSH
85885: LD_INT 16
85887: ST_TO_ADDR
// sRocket := false ;
85888: LD_ADDR_EXP 93
85892: PUSH
85893: LD_INT 0
85895: ST_TO_ADDR
// sSpeed := false ;
85896: LD_ADDR_EXP 92
85900: PUSH
85901: LD_INT 0
85903: ST_TO_ADDR
// sEngine := false ;
85904: LD_ADDR_EXP 94
85908: PUSH
85909: LD_INT 0
85911: ST_TO_ADDR
// sSpec := false ;
85912: LD_ADDR_EXP 91
85916: PUSH
85917: LD_INT 0
85919: ST_TO_ADDR
// sLevel := false ;
85920: LD_ADDR_EXP 95
85924: PUSH
85925: LD_INT 0
85927: ST_TO_ADDR
// sArmoury := false ;
85928: LD_ADDR_EXP 96
85932: PUSH
85933: LD_INT 0
85935: ST_TO_ADDR
// sRadar := false ;
85936: LD_ADDR_EXP 97
85940: PUSH
85941: LD_INT 0
85943: ST_TO_ADDR
// sBunker := false ;
85944: LD_ADDR_EXP 98
85948: PUSH
85949: LD_INT 0
85951: ST_TO_ADDR
// sHack := false ;
85952: LD_ADDR_EXP 99
85956: PUSH
85957: LD_INT 0
85959: ST_TO_ADDR
// sFire := false ;
85960: LD_ADDR_EXP 100
85964: PUSH
85965: LD_INT 0
85967: ST_TO_ADDR
// sRefresh := false ;
85968: LD_ADDR_EXP 101
85972: PUSH
85973: LD_INT 0
85975: ST_TO_ADDR
// sExp := false ;
85976: LD_ADDR_EXP 102
85980: PUSH
85981: LD_INT 0
85983: ST_TO_ADDR
// sDepot := false ;
85984: LD_ADDR_EXP 103
85988: PUSH
85989: LD_INT 0
85991: ST_TO_ADDR
// sFlag := false ;
85992: LD_ADDR_EXP 104
85996: PUSH
85997: LD_INT 0
85999: ST_TO_ADDR
// sKamikadze := false ;
86000: LD_ADDR_EXP 112
86004: PUSH
86005: LD_INT 0
86007: ST_TO_ADDR
// sTroll := false ;
86008: LD_ADDR_EXP 113
86012: PUSH
86013: LD_INT 0
86015: ST_TO_ADDR
// sSlow := false ;
86016: LD_ADDR_EXP 114
86020: PUSH
86021: LD_INT 0
86023: ST_TO_ADDR
// sLack := false ;
86024: LD_ADDR_EXP 115
86028: PUSH
86029: LD_INT 0
86031: ST_TO_ADDR
// sTank := false ;
86032: LD_ADDR_EXP 117
86036: PUSH
86037: LD_INT 0
86039: ST_TO_ADDR
// sRemote := false ;
86040: LD_ADDR_EXP 118
86044: PUSH
86045: LD_INT 0
86047: ST_TO_ADDR
// sPowell := false ;
86048: LD_ADDR_EXP 119
86052: PUSH
86053: LD_INT 0
86055: ST_TO_ADDR
// sTeleport := false ;
86056: LD_ADDR_EXP 122
86060: PUSH
86061: LD_INT 0
86063: ST_TO_ADDR
// sOilTower := false ;
86064: LD_ADDR_EXP 124
86068: PUSH
86069: LD_INT 0
86071: ST_TO_ADDR
// sShovel := false ;
86072: LD_ADDR_EXP 125
86076: PUSH
86077: LD_INT 0
86079: ST_TO_ADDR
// sSheik := false ;
86080: LD_ADDR_EXP 126
86084: PUSH
86085: LD_INT 0
86087: ST_TO_ADDR
// sEarthquake := false ;
86088: LD_ADDR_EXP 128
86092: PUSH
86093: LD_INT 0
86095: ST_TO_ADDR
// sAI := false ;
86096: LD_ADDR_EXP 129
86100: PUSH
86101: LD_INT 0
86103: ST_TO_ADDR
// sCargo := false ;
86104: LD_ADDR_EXP 132
86108: PUSH
86109: LD_INT 0
86111: ST_TO_ADDR
// sDLaser := false ;
86112: LD_ADDR_EXP 133
86116: PUSH
86117: LD_INT 0
86119: ST_TO_ADDR
// sExchange := false ;
86120: LD_ADDR_EXP 134
86124: PUSH
86125: LD_INT 0
86127: ST_TO_ADDR
// sFac := false ;
86128: LD_ADDR_EXP 135
86132: PUSH
86133: LD_INT 0
86135: ST_TO_ADDR
// sPower := false ;
86136: LD_ADDR_EXP 136
86140: PUSH
86141: LD_INT 0
86143: ST_TO_ADDR
// sRandom := false ;
86144: LD_ADDR_EXP 137
86148: PUSH
86149: LD_INT 0
86151: ST_TO_ADDR
// sShield := false ;
86152: LD_ADDR_EXP 138
86156: PUSH
86157: LD_INT 0
86159: ST_TO_ADDR
// sTime := false ;
86160: LD_ADDR_EXP 139
86164: PUSH
86165: LD_INT 0
86167: ST_TO_ADDR
// sTools := false ;
86168: LD_ADDR_EXP 140
86172: PUSH
86173: LD_INT 0
86175: ST_TO_ADDR
// sSold := false ;
86176: LD_ADDR_EXP 105
86180: PUSH
86181: LD_INT 0
86183: ST_TO_ADDR
// sDiff := false ;
86184: LD_ADDR_EXP 106
86188: PUSH
86189: LD_INT 0
86191: ST_TO_ADDR
// sFog := false ;
86192: LD_ADDR_EXP 109
86196: PUSH
86197: LD_INT 0
86199: ST_TO_ADDR
// sReset := false ;
86200: LD_ADDR_EXP 110
86204: PUSH
86205: LD_INT 0
86207: ST_TO_ADDR
// sSun := false ;
86208: LD_ADDR_EXP 111
86212: PUSH
86213: LD_INT 0
86215: ST_TO_ADDR
// sTiger := false ;
86216: LD_ADDR_EXP 107
86220: PUSH
86221: LD_INT 0
86223: ST_TO_ADDR
// sBomb := false ;
86224: LD_ADDR_EXP 108
86228: PUSH
86229: LD_INT 0
86231: ST_TO_ADDR
// sWound := false ;
86232: LD_ADDR_EXP 116
86236: PUSH
86237: LD_INT 0
86239: ST_TO_ADDR
// sBetray := false ;
86240: LD_ADDR_EXP 120
86244: PUSH
86245: LD_INT 0
86247: ST_TO_ADDR
// sContamin := false ;
86248: LD_ADDR_EXP 121
86252: PUSH
86253: LD_INT 0
86255: ST_TO_ADDR
// sOil := false ;
86256: LD_ADDR_EXP 123
86260: PUSH
86261: LD_INT 0
86263: ST_TO_ADDR
// sStu := false ;
86264: LD_ADDR_EXP 127
86268: PUSH
86269: LD_INT 0
86271: ST_TO_ADDR
// sBazooka := false ;
86272: LD_ADDR_EXP 130
86276: PUSH
86277: LD_INT 0
86279: ST_TO_ADDR
// sMortar := false ;
86280: LD_ADDR_EXP 131
86284: PUSH
86285: LD_INT 0
86287: ST_TO_ADDR
// sRanger := false ;
86288: LD_ADDR_EXP 141
86292: PUSH
86293: LD_INT 0
86295: ST_TO_ADDR
// end ;
86296: LD_VAR 0 1
86300: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
86301: LD_INT 0
86303: PPUSH
86304: PPUSH
86305: PPUSH
86306: PPUSH
86307: PPUSH
// result := [ ] ;
86308: LD_ADDR_VAR 0 1
86312: PUSH
86313: EMPTY
86314: ST_TO_ADDR
// if campaign_id = 1 then
86315: LD_OWVAR 69
86319: PUSH
86320: LD_INT 1
86322: EQUAL
86323: IFFALSE 89261
// begin case mission_number of 1 :
86325: LD_OWVAR 70
86329: PUSH
86330: LD_INT 1
86332: DOUBLE
86333: EQUAL
86334: IFTRUE 86338
86336: GO 86402
86338: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
86339: LD_ADDR_VAR 0 1
86343: PUSH
86344: LD_INT 2
86346: PUSH
86347: LD_INT 4
86349: PUSH
86350: LD_INT 11
86352: PUSH
86353: LD_INT 12
86355: PUSH
86356: LD_INT 15
86358: PUSH
86359: LD_INT 16
86361: PUSH
86362: LD_INT 22
86364: PUSH
86365: LD_INT 23
86367: PUSH
86368: LD_INT 26
86370: PUSH
86371: EMPTY
86372: LIST
86373: LIST
86374: LIST
86375: LIST
86376: LIST
86377: LIST
86378: LIST
86379: LIST
86380: LIST
86381: PUSH
86382: LD_INT 101
86384: PUSH
86385: LD_INT 102
86387: PUSH
86388: LD_INT 106
86390: PUSH
86391: EMPTY
86392: LIST
86393: LIST
86394: LIST
86395: PUSH
86396: EMPTY
86397: LIST
86398: LIST
86399: ST_TO_ADDR
86400: GO 89259
86402: LD_INT 2
86404: DOUBLE
86405: EQUAL
86406: IFTRUE 86410
86408: GO 86482
86410: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
86411: LD_ADDR_VAR 0 1
86415: PUSH
86416: LD_INT 2
86418: PUSH
86419: LD_INT 4
86421: PUSH
86422: LD_INT 11
86424: PUSH
86425: LD_INT 12
86427: PUSH
86428: LD_INT 15
86430: PUSH
86431: LD_INT 16
86433: PUSH
86434: LD_INT 22
86436: PUSH
86437: LD_INT 23
86439: PUSH
86440: LD_INT 26
86442: PUSH
86443: EMPTY
86444: LIST
86445: LIST
86446: LIST
86447: LIST
86448: LIST
86449: LIST
86450: LIST
86451: LIST
86452: LIST
86453: PUSH
86454: LD_INT 101
86456: PUSH
86457: LD_INT 102
86459: PUSH
86460: LD_INT 105
86462: PUSH
86463: LD_INT 106
86465: PUSH
86466: LD_INT 108
86468: PUSH
86469: EMPTY
86470: LIST
86471: LIST
86472: LIST
86473: LIST
86474: LIST
86475: PUSH
86476: EMPTY
86477: LIST
86478: LIST
86479: ST_TO_ADDR
86480: GO 89259
86482: LD_INT 3
86484: DOUBLE
86485: EQUAL
86486: IFTRUE 86490
86488: GO 86566
86490: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
86491: LD_ADDR_VAR 0 1
86495: PUSH
86496: LD_INT 2
86498: PUSH
86499: LD_INT 4
86501: PUSH
86502: LD_INT 5
86504: PUSH
86505: LD_INT 11
86507: PUSH
86508: LD_INT 12
86510: PUSH
86511: LD_INT 15
86513: PUSH
86514: LD_INT 16
86516: PUSH
86517: LD_INT 22
86519: PUSH
86520: LD_INT 26
86522: PUSH
86523: LD_INT 36
86525: PUSH
86526: EMPTY
86527: LIST
86528: LIST
86529: LIST
86530: LIST
86531: LIST
86532: LIST
86533: LIST
86534: LIST
86535: LIST
86536: LIST
86537: PUSH
86538: LD_INT 101
86540: PUSH
86541: LD_INT 102
86543: PUSH
86544: LD_INT 105
86546: PUSH
86547: LD_INT 106
86549: PUSH
86550: LD_INT 108
86552: PUSH
86553: EMPTY
86554: LIST
86555: LIST
86556: LIST
86557: LIST
86558: LIST
86559: PUSH
86560: EMPTY
86561: LIST
86562: LIST
86563: ST_TO_ADDR
86564: GO 89259
86566: LD_INT 4
86568: DOUBLE
86569: EQUAL
86570: IFTRUE 86574
86572: GO 86658
86574: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
86575: LD_ADDR_VAR 0 1
86579: PUSH
86580: LD_INT 2
86582: PUSH
86583: LD_INT 4
86585: PUSH
86586: LD_INT 5
86588: PUSH
86589: LD_INT 8
86591: PUSH
86592: LD_INT 11
86594: PUSH
86595: LD_INT 12
86597: PUSH
86598: LD_INT 15
86600: PUSH
86601: LD_INT 16
86603: PUSH
86604: LD_INT 22
86606: PUSH
86607: LD_INT 23
86609: PUSH
86610: LD_INT 26
86612: PUSH
86613: LD_INT 36
86615: PUSH
86616: EMPTY
86617: LIST
86618: LIST
86619: LIST
86620: LIST
86621: LIST
86622: LIST
86623: LIST
86624: LIST
86625: LIST
86626: LIST
86627: LIST
86628: LIST
86629: PUSH
86630: LD_INT 101
86632: PUSH
86633: LD_INT 102
86635: PUSH
86636: LD_INT 105
86638: PUSH
86639: LD_INT 106
86641: PUSH
86642: LD_INT 108
86644: PUSH
86645: EMPTY
86646: LIST
86647: LIST
86648: LIST
86649: LIST
86650: LIST
86651: PUSH
86652: EMPTY
86653: LIST
86654: LIST
86655: ST_TO_ADDR
86656: GO 89259
86658: LD_INT 5
86660: DOUBLE
86661: EQUAL
86662: IFTRUE 86666
86664: GO 86766
86666: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
86667: LD_ADDR_VAR 0 1
86671: PUSH
86672: LD_INT 2
86674: PUSH
86675: LD_INT 4
86677: PUSH
86678: LD_INT 5
86680: PUSH
86681: LD_INT 6
86683: PUSH
86684: LD_INT 8
86686: PUSH
86687: LD_INT 11
86689: PUSH
86690: LD_INT 12
86692: PUSH
86693: LD_INT 15
86695: PUSH
86696: LD_INT 16
86698: PUSH
86699: LD_INT 22
86701: PUSH
86702: LD_INT 23
86704: PUSH
86705: LD_INT 25
86707: PUSH
86708: LD_INT 26
86710: PUSH
86711: LD_INT 36
86713: PUSH
86714: EMPTY
86715: LIST
86716: LIST
86717: LIST
86718: LIST
86719: LIST
86720: LIST
86721: LIST
86722: LIST
86723: LIST
86724: LIST
86725: LIST
86726: LIST
86727: LIST
86728: LIST
86729: PUSH
86730: LD_INT 101
86732: PUSH
86733: LD_INT 102
86735: PUSH
86736: LD_INT 105
86738: PUSH
86739: LD_INT 106
86741: PUSH
86742: LD_INT 108
86744: PUSH
86745: LD_INT 109
86747: PUSH
86748: LD_INT 112
86750: PUSH
86751: EMPTY
86752: LIST
86753: LIST
86754: LIST
86755: LIST
86756: LIST
86757: LIST
86758: LIST
86759: PUSH
86760: EMPTY
86761: LIST
86762: LIST
86763: ST_TO_ADDR
86764: GO 89259
86766: LD_INT 6
86768: DOUBLE
86769: EQUAL
86770: IFTRUE 86774
86772: GO 86894
86774: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
86775: LD_ADDR_VAR 0 1
86779: PUSH
86780: LD_INT 2
86782: PUSH
86783: LD_INT 4
86785: PUSH
86786: LD_INT 5
86788: PUSH
86789: LD_INT 6
86791: PUSH
86792: LD_INT 8
86794: PUSH
86795: LD_INT 11
86797: PUSH
86798: LD_INT 12
86800: PUSH
86801: LD_INT 15
86803: PUSH
86804: LD_INT 16
86806: PUSH
86807: LD_INT 20
86809: PUSH
86810: LD_INT 21
86812: PUSH
86813: LD_INT 22
86815: PUSH
86816: LD_INT 23
86818: PUSH
86819: LD_INT 25
86821: PUSH
86822: LD_INT 26
86824: PUSH
86825: LD_INT 30
86827: PUSH
86828: LD_INT 31
86830: PUSH
86831: LD_INT 32
86833: PUSH
86834: LD_INT 36
86836: PUSH
86837: EMPTY
86838: LIST
86839: LIST
86840: LIST
86841: LIST
86842: LIST
86843: LIST
86844: LIST
86845: LIST
86846: LIST
86847: LIST
86848: LIST
86849: LIST
86850: LIST
86851: LIST
86852: LIST
86853: LIST
86854: LIST
86855: LIST
86856: LIST
86857: PUSH
86858: LD_INT 101
86860: PUSH
86861: LD_INT 102
86863: PUSH
86864: LD_INT 105
86866: PUSH
86867: LD_INT 106
86869: PUSH
86870: LD_INT 108
86872: PUSH
86873: LD_INT 109
86875: PUSH
86876: LD_INT 112
86878: PUSH
86879: EMPTY
86880: LIST
86881: LIST
86882: LIST
86883: LIST
86884: LIST
86885: LIST
86886: LIST
86887: PUSH
86888: EMPTY
86889: LIST
86890: LIST
86891: ST_TO_ADDR
86892: GO 89259
86894: LD_INT 7
86896: DOUBLE
86897: EQUAL
86898: IFTRUE 86902
86900: GO 87002
86902: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
86903: LD_ADDR_VAR 0 1
86907: PUSH
86908: LD_INT 2
86910: PUSH
86911: LD_INT 4
86913: PUSH
86914: LD_INT 5
86916: PUSH
86917: LD_INT 7
86919: PUSH
86920: LD_INT 11
86922: PUSH
86923: LD_INT 12
86925: PUSH
86926: LD_INT 15
86928: PUSH
86929: LD_INT 16
86931: PUSH
86932: LD_INT 20
86934: PUSH
86935: LD_INT 21
86937: PUSH
86938: LD_INT 22
86940: PUSH
86941: LD_INT 23
86943: PUSH
86944: LD_INT 25
86946: PUSH
86947: LD_INT 26
86949: PUSH
86950: EMPTY
86951: LIST
86952: LIST
86953: LIST
86954: LIST
86955: LIST
86956: LIST
86957: LIST
86958: LIST
86959: LIST
86960: LIST
86961: LIST
86962: LIST
86963: LIST
86964: LIST
86965: PUSH
86966: LD_INT 101
86968: PUSH
86969: LD_INT 102
86971: PUSH
86972: LD_INT 103
86974: PUSH
86975: LD_INT 105
86977: PUSH
86978: LD_INT 106
86980: PUSH
86981: LD_INT 108
86983: PUSH
86984: LD_INT 112
86986: PUSH
86987: EMPTY
86988: LIST
86989: LIST
86990: LIST
86991: LIST
86992: LIST
86993: LIST
86994: LIST
86995: PUSH
86996: EMPTY
86997: LIST
86998: LIST
86999: ST_TO_ADDR
87000: GO 89259
87002: LD_INT 8
87004: DOUBLE
87005: EQUAL
87006: IFTRUE 87010
87008: GO 87138
87010: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
87011: LD_ADDR_VAR 0 1
87015: PUSH
87016: LD_INT 2
87018: PUSH
87019: LD_INT 4
87021: PUSH
87022: LD_INT 5
87024: PUSH
87025: LD_INT 6
87027: PUSH
87028: LD_INT 7
87030: PUSH
87031: LD_INT 8
87033: PUSH
87034: LD_INT 11
87036: PUSH
87037: LD_INT 12
87039: PUSH
87040: LD_INT 15
87042: PUSH
87043: LD_INT 16
87045: PUSH
87046: LD_INT 20
87048: PUSH
87049: LD_INT 21
87051: PUSH
87052: LD_INT 22
87054: PUSH
87055: LD_INT 23
87057: PUSH
87058: LD_INT 25
87060: PUSH
87061: LD_INT 26
87063: PUSH
87064: LD_INT 30
87066: PUSH
87067: LD_INT 31
87069: PUSH
87070: LD_INT 32
87072: PUSH
87073: LD_INT 36
87075: PUSH
87076: EMPTY
87077: LIST
87078: LIST
87079: LIST
87080: LIST
87081: LIST
87082: LIST
87083: LIST
87084: LIST
87085: LIST
87086: LIST
87087: LIST
87088: LIST
87089: LIST
87090: LIST
87091: LIST
87092: LIST
87093: LIST
87094: LIST
87095: LIST
87096: LIST
87097: PUSH
87098: LD_INT 101
87100: PUSH
87101: LD_INT 102
87103: PUSH
87104: LD_INT 103
87106: PUSH
87107: LD_INT 105
87109: PUSH
87110: LD_INT 106
87112: PUSH
87113: LD_INT 108
87115: PUSH
87116: LD_INT 109
87118: PUSH
87119: LD_INT 112
87121: PUSH
87122: EMPTY
87123: LIST
87124: LIST
87125: LIST
87126: LIST
87127: LIST
87128: LIST
87129: LIST
87130: LIST
87131: PUSH
87132: EMPTY
87133: LIST
87134: LIST
87135: ST_TO_ADDR
87136: GO 89259
87138: LD_INT 9
87140: DOUBLE
87141: EQUAL
87142: IFTRUE 87146
87144: GO 87282
87146: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
87147: LD_ADDR_VAR 0 1
87151: PUSH
87152: LD_INT 2
87154: PUSH
87155: LD_INT 4
87157: PUSH
87158: LD_INT 5
87160: PUSH
87161: LD_INT 6
87163: PUSH
87164: LD_INT 7
87166: PUSH
87167: LD_INT 8
87169: PUSH
87170: LD_INT 11
87172: PUSH
87173: LD_INT 12
87175: PUSH
87176: LD_INT 15
87178: PUSH
87179: LD_INT 16
87181: PUSH
87182: LD_INT 20
87184: PUSH
87185: LD_INT 21
87187: PUSH
87188: LD_INT 22
87190: PUSH
87191: LD_INT 23
87193: PUSH
87194: LD_INT 25
87196: PUSH
87197: LD_INT 26
87199: PUSH
87200: LD_INT 28
87202: PUSH
87203: LD_INT 30
87205: PUSH
87206: LD_INT 31
87208: PUSH
87209: LD_INT 32
87211: PUSH
87212: LD_INT 36
87214: PUSH
87215: EMPTY
87216: LIST
87217: LIST
87218: LIST
87219: LIST
87220: LIST
87221: LIST
87222: LIST
87223: LIST
87224: LIST
87225: LIST
87226: LIST
87227: LIST
87228: LIST
87229: LIST
87230: LIST
87231: LIST
87232: LIST
87233: LIST
87234: LIST
87235: LIST
87236: LIST
87237: PUSH
87238: LD_INT 101
87240: PUSH
87241: LD_INT 102
87243: PUSH
87244: LD_INT 103
87246: PUSH
87247: LD_INT 105
87249: PUSH
87250: LD_INT 106
87252: PUSH
87253: LD_INT 108
87255: PUSH
87256: LD_INT 109
87258: PUSH
87259: LD_INT 112
87261: PUSH
87262: LD_INT 114
87264: PUSH
87265: EMPTY
87266: LIST
87267: LIST
87268: LIST
87269: LIST
87270: LIST
87271: LIST
87272: LIST
87273: LIST
87274: LIST
87275: PUSH
87276: EMPTY
87277: LIST
87278: LIST
87279: ST_TO_ADDR
87280: GO 89259
87282: LD_INT 10
87284: DOUBLE
87285: EQUAL
87286: IFTRUE 87290
87288: GO 87474
87290: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
87291: LD_ADDR_VAR 0 1
87295: PUSH
87296: LD_INT 2
87298: PUSH
87299: LD_INT 4
87301: PUSH
87302: LD_INT 5
87304: PUSH
87305: LD_INT 6
87307: PUSH
87308: LD_INT 7
87310: PUSH
87311: LD_INT 8
87313: PUSH
87314: LD_INT 9
87316: PUSH
87317: LD_INT 10
87319: PUSH
87320: LD_INT 11
87322: PUSH
87323: LD_INT 12
87325: PUSH
87326: LD_INT 13
87328: PUSH
87329: LD_INT 14
87331: PUSH
87332: LD_INT 15
87334: PUSH
87335: LD_INT 16
87337: PUSH
87338: LD_INT 17
87340: PUSH
87341: LD_INT 18
87343: PUSH
87344: LD_INT 19
87346: PUSH
87347: LD_INT 20
87349: PUSH
87350: LD_INT 21
87352: PUSH
87353: LD_INT 22
87355: PUSH
87356: LD_INT 23
87358: PUSH
87359: LD_INT 24
87361: PUSH
87362: LD_INT 25
87364: PUSH
87365: LD_INT 26
87367: PUSH
87368: LD_INT 28
87370: PUSH
87371: LD_INT 30
87373: PUSH
87374: LD_INT 31
87376: PUSH
87377: LD_INT 32
87379: PUSH
87380: LD_INT 36
87382: PUSH
87383: EMPTY
87384: LIST
87385: LIST
87386: LIST
87387: LIST
87388: LIST
87389: LIST
87390: LIST
87391: LIST
87392: LIST
87393: LIST
87394: LIST
87395: LIST
87396: LIST
87397: LIST
87398: LIST
87399: LIST
87400: LIST
87401: LIST
87402: LIST
87403: LIST
87404: LIST
87405: LIST
87406: LIST
87407: LIST
87408: LIST
87409: LIST
87410: LIST
87411: LIST
87412: LIST
87413: PUSH
87414: LD_INT 101
87416: PUSH
87417: LD_INT 102
87419: PUSH
87420: LD_INT 103
87422: PUSH
87423: LD_INT 104
87425: PUSH
87426: LD_INT 105
87428: PUSH
87429: LD_INT 106
87431: PUSH
87432: LD_INT 107
87434: PUSH
87435: LD_INT 108
87437: PUSH
87438: LD_INT 109
87440: PUSH
87441: LD_INT 110
87443: PUSH
87444: LD_INT 111
87446: PUSH
87447: LD_INT 112
87449: PUSH
87450: LD_INT 114
87452: PUSH
87453: EMPTY
87454: LIST
87455: LIST
87456: LIST
87457: LIST
87458: LIST
87459: LIST
87460: LIST
87461: LIST
87462: LIST
87463: LIST
87464: LIST
87465: LIST
87466: LIST
87467: PUSH
87468: EMPTY
87469: LIST
87470: LIST
87471: ST_TO_ADDR
87472: GO 89259
87474: LD_INT 11
87476: DOUBLE
87477: EQUAL
87478: IFTRUE 87482
87480: GO 87674
87482: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
87483: LD_ADDR_VAR 0 1
87487: PUSH
87488: LD_INT 2
87490: PUSH
87491: LD_INT 3
87493: PUSH
87494: LD_INT 4
87496: PUSH
87497: LD_INT 5
87499: PUSH
87500: LD_INT 6
87502: PUSH
87503: LD_INT 7
87505: PUSH
87506: LD_INT 8
87508: PUSH
87509: LD_INT 9
87511: PUSH
87512: LD_INT 10
87514: PUSH
87515: LD_INT 11
87517: PUSH
87518: LD_INT 12
87520: PUSH
87521: LD_INT 13
87523: PUSH
87524: LD_INT 14
87526: PUSH
87527: LD_INT 15
87529: PUSH
87530: LD_INT 16
87532: PUSH
87533: LD_INT 17
87535: PUSH
87536: LD_INT 18
87538: PUSH
87539: LD_INT 19
87541: PUSH
87542: LD_INT 20
87544: PUSH
87545: LD_INT 21
87547: PUSH
87548: LD_INT 22
87550: PUSH
87551: LD_INT 23
87553: PUSH
87554: LD_INT 24
87556: PUSH
87557: LD_INT 25
87559: PUSH
87560: LD_INT 26
87562: PUSH
87563: LD_INT 28
87565: PUSH
87566: LD_INT 30
87568: PUSH
87569: LD_INT 31
87571: PUSH
87572: LD_INT 32
87574: PUSH
87575: LD_INT 34
87577: PUSH
87578: LD_INT 36
87580: PUSH
87581: EMPTY
87582: LIST
87583: LIST
87584: LIST
87585: LIST
87586: LIST
87587: LIST
87588: LIST
87589: LIST
87590: LIST
87591: LIST
87592: LIST
87593: LIST
87594: LIST
87595: LIST
87596: LIST
87597: LIST
87598: LIST
87599: LIST
87600: LIST
87601: LIST
87602: LIST
87603: LIST
87604: LIST
87605: LIST
87606: LIST
87607: LIST
87608: LIST
87609: LIST
87610: LIST
87611: LIST
87612: LIST
87613: PUSH
87614: LD_INT 101
87616: PUSH
87617: LD_INT 102
87619: PUSH
87620: LD_INT 103
87622: PUSH
87623: LD_INT 104
87625: PUSH
87626: LD_INT 105
87628: PUSH
87629: LD_INT 106
87631: PUSH
87632: LD_INT 107
87634: PUSH
87635: LD_INT 108
87637: PUSH
87638: LD_INT 109
87640: PUSH
87641: LD_INT 110
87643: PUSH
87644: LD_INT 111
87646: PUSH
87647: LD_INT 112
87649: PUSH
87650: LD_INT 114
87652: PUSH
87653: EMPTY
87654: LIST
87655: LIST
87656: LIST
87657: LIST
87658: LIST
87659: LIST
87660: LIST
87661: LIST
87662: LIST
87663: LIST
87664: LIST
87665: LIST
87666: LIST
87667: PUSH
87668: EMPTY
87669: LIST
87670: LIST
87671: ST_TO_ADDR
87672: GO 89259
87674: LD_INT 12
87676: DOUBLE
87677: EQUAL
87678: IFTRUE 87682
87680: GO 87890
87682: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
87683: LD_ADDR_VAR 0 1
87687: PUSH
87688: LD_INT 1
87690: PUSH
87691: LD_INT 2
87693: PUSH
87694: LD_INT 3
87696: PUSH
87697: LD_INT 4
87699: PUSH
87700: LD_INT 5
87702: PUSH
87703: LD_INT 6
87705: PUSH
87706: LD_INT 7
87708: PUSH
87709: LD_INT 8
87711: PUSH
87712: LD_INT 9
87714: PUSH
87715: LD_INT 10
87717: PUSH
87718: LD_INT 11
87720: PUSH
87721: LD_INT 12
87723: PUSH
87724: LD_INT 13
87726: PUSH
87727: LD_INT 14
87729: PUSH
87730: LD_INT 15
87732: PUSH
87733: LD_INT 16
87735: PUSH
87736: LD_INT 17
87738: PUSH
87739: LD_INT 18
87741: PUSH
87742: LD_INT 19
87744: PUSH
87745: LD_INT 20
87747: PUSH
87748: LD_INT 21
87750: PUSH
87751: LD_INT 22
87753: PUSH
87754: LD_INT 23
87756: PUSH
87757: LD_INT 24
87759: PUSH
87760: LD_INT 25
87762: PUSH
87763: LD_INT 26
87765: PUSH
87766: LD_INT 27
87768: PUSH
87769: LD_INT 28
87771: PUSH
87772: LD_INT 30
87774: PUSH
87775: LD_INT 31
87777: PUSH
87778: LD_INT 32
87780: PUSH
87781: LD_INT 33
87783: PUSH
87784: LD_INT 34
87786: PUSH
87787: LD_INT 36
87789: PUSH
87790: EMPTY
87791: LIST
87792: LIST
87793: LIST
87794: LIST
87795: LIST
87796: LIST
87797: LIST
87798: LIST
87799: LIST
87800: LIST
87801: LIST
87802: LIST
87803: LIST
87804: LIST
87805: LIST
87806: LIST
87807: LIST
87808: LIST
87809: LIST
87810: LIST
87811: LIST
87812: LIST
87813: LIST
87814: LIST
87815: LIST
87816: LIST
87817: LIST
87818: LIST
87819: LIST
87820: LIST
87821: LIST
87822: LIST
87823: LIST
87824: LIST
87825: PUSH
87826: LD_INT 101
87828: PUSH
87829: LD_INT 102
87831: PUSH
87832: LD_INT 103
87834: PUSH
87835: LD_INT 104
87837: PUSH
87838: LD_INT 105
87840: PUSH
87841: LD_INT 106
87843: PUSH
87844: LD_INT 107
87846: PUSH
87847: LD_INT 108
87849: PUSH
87850: LD_INT 109
87852: PUSH
87853: LD_INT 110
87855: PUSH
87856: LD_INT 111
87858: PUSH
87859: LD_INT 112
87861: PUSH
87862: LD_INT 113
87864: PUSH
87865: LD_INT 114
87867: PUSH
87868: EMPTY
87869: LIST
87870: LIST
87871: LIST
87872: LIST
87873: LIST
87874: LIST
87875: LIST
87876: LIST
87877: LIST
87878: LIST
87879: LIST
87880: LIST
87881: LIST
87882: LIST
87883: PUSH
87884: EMPTY
87885: LIST
87886: LIST
87887: ST_TO_ADDR
87888: GO 89259
87890: LD_INT 13
87892: DOUBLE
87893: EQUAL
87894: IFTRUE 87898
87896: GO 88094
87898: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
87899: LD_ADDR_VAR 0 1
87903: PUSH
87904: LD_INT 1
87906: PUSH
87907: LD_INT 2
87909: PUSH
87910: LD_INT 3
87912: PUSH
87913: LD_INT 4
87915: PUSH
87916: LD_INT 5
87918: PUSH
87919: LD_INT 8
87921: PUSH
87922: LD_INT 9
87924: PUSH
87925: LD_INT 10
87927: PUSH
87928: LD_INT 11
87930: PUSH
87931: LD_INT 12
87933: PUSH
87934: LD_INT 14
87936: PUSH
87937: LD_INT 15
87939: PUSH
87940: LD_INT 16
87942: PUSH
87943: LD_INT 17
87945: PUSH
87946: LD_INT 18
87948: PUSH
87949: LD_INT 19
87951: PUSH
87952: LD_INT 20
87954: PUSH
87955: LD_INT 21
87957: PUSH
87958: LD_INT 22
87960: PUSH
87961: LD_INT 23
87963: PUSH
87964: LD_INT 24
87966: PUSH
87967: LD_INT 25
87969: PUSH
87970: LD_INT 26
87972: PUSH
87973: LD_INT 27
87975: PUSH
87976: LD_INT 28
87978: PUSH
87979: LD_INT 30
87981: PUSH
87982: LD_INT 31
87984: PUSH
87985: LD_INT 32
87987: PUSH
87988: LD_INT 33
87990: PUSH
87991: LD_INT 34
87993: PUSH
87994: LD_INT 36
87996: PUSH
87997: EMPTY
87998: LIST
87999: LIST
88000: LIST
88001: LIST
88002: LIST
88003: LIST
88004: LIST
88005: LIST
88006: LIST
88007: LIST
88008: LIST
88009: LIST
88010: LIST
88011: LIST
88012: LIST
88013: LIST
88014: LIST
88015: LIST
88016: LIST
88017: LIST
88018: LIST
88019: LIST
88020: LIST
88021: LIST
88022: LIST
88023: LIST
88024: LIST
88025: LIST
88026: LIST
88027: LIST
88028: LIST
88029: PUSH
88030: LD_INT 101
88032: PUSH
88033: LD_INT 102
88035: PUSH
88036: LD_INT 103
88038: PUSH
88039: LD_INT 104
88041: PUSH
88042: LD_INT 105
88044: PUSH
88045: LD_INT 106
88047: PUSH
88048: LD_INT 107
88050: PUSH
88051: LD_INT 108
88053: PUSH
88054: LD_INT 109
88056: PUSH
88057: LD_INT 110
88059: PUSH
88060: LD_INT 111
88062: PUSH
88063: LD_INT 112
88065: PUSH
88066: LD_INT 113
88068: PUSH
88069: LD_INT 114
88071: PUSH
88072: EMPTY
88073: LIST
88074: LIST
88075: LIST
88076: LIST
88077: LIST
88078: LIST
88079: LIST
88080: LIST
88081: LIST
88082: LIST
88083: LIST
88084: LIST
88085: LIST
88086: LIST
88087: PUSH
88088: EMPTY
88089: LIST
88090: LIST
88091: ST_TO_ADDR
88092: GO 89259
88094: LD_INT 14
88096: DOUBLE
88097: EQUAL
88098: IFTRUE 88102
88100: GO 88314
88102: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
88103: LD_ADDR_VAR 0 1
88107: PUSH
88108: LD_INT 1
88110: PUSH
88111: LD_INT 2
88113: PUSH
88114: LD_INT 3
88116: PUSH
88117: LD_INT 4
88119: PUSH
88120: LD_INT 5
88122: PUSH
88123: LD_INT 6
88125: PUSH
88126: LD_INT 7
88128: PUSH
88129: LD_INT 8
88131: PUSH
88132: LD_INT 9
88134: PUSH
88135: LD_INT 10
88137: PUSH
88138: LD_INT 11
88140: PUSH
88141: LD_INT 12
88143: PUSH
88144: LD_INT 13
88146: PUSH
88147: LD_INT 14
88149: PUSH
88150: LD_INT 15
88152: PUSH
88153: LD_INT 16
88155: PUSH
88156: LD_INT 17
88158: PUSH
88159: LD_INT 18
88161: PUSH
88162: LD_INT 19
88164: PUSH
88165: LD_INT 20
88167: PUSH
88168: LD_INT 21
88170: PUSH
88171: LD_INT 22
88173: PUSH
88174: LD_INT 23
88176: PUSH
88177: LD_INT 24
88179: PUSH
88180: LD_INT 25
88182: PUSH
88183: LD_INT 26
88185: PUSH
88186: LD_INT 27
88188: PUSH
88189: LD_INT 28
88191: PUSH
88192: LD_INT 29
88194: PUSH
88195: LD_INT 30
88197: PUSH
88198: LD_INT 31
88200: PUSH
88201: LD_INT 32
88203: PUSH
88204: LD_INT 33
88206: PUSH
88207: LD_INT 34
88209: PUSH
88210: LD_INT 36
88212: PUSH
88213: EMPTY
88214: LIST
88215: LIST
88216: LIST
88217: LIST
88218: LIST
88219: LIST
88220: LIST
88221: LIST
88222: LIST
88223: LIST
88224: LIST
88225: LIST
88226: LIST
88227: LIST
88228: LIST
88229: LIST
88230: LIST
88231: LIST
88232: LIST
88233: LIST
88234: LIST
88235: LIST
88236: LIST
88237: LIST
88238: LIST
88239: LIST
88240: LIST
88241: LIST
88242: LIST
88243: LIST
88244: LIST
88245: LIST
88246: LIST
88247: LIST
88248: LIST
88249: PUSH
88250: LD_INT 101
88252: PUSH
88253: LD_INT 102
88255: PUSH
88256: LD_INT 103
88258: PUSH
88259: LD_INT 104
88261: PUSH
88262: LD_INT 105
88264: PUSH
88265: LD_INT 106
88267: PUSH
88268: LD_INT 107
88270: PUSH
88271: LD_INT 108
88273: PUSH
88274: LD_INT 109
88276: PUSH
88277: LD_INT 110
88279: PUSH
88280: LD_INT 111
88282: PUSH
88283: LD_INT 112
88285: PUSH
88286: LD_INT 113
88288: PUSH
88289: LD_INT 114
88291: PUSH
88292: EMPTY
88293: LIST
88294: LIST
88295: LIST
88296: LIST
88297: LIST
88298: LIST
88299: LIST
88300: LIST
88301: LIST
88302: LIST
88303: LIST
88304: LIST
88305: LIST
88306: LIST
88307: PUSH
88308: EMPTY
88309: LIST
88310: LIST
88311: ST_TO_ADDR
88312: GO 89259
88314: LD_INT 15
88316: DOUBLE
88317: EQUAL
88318: IFTRUE 88322
88320: GO 88534
88322: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
88323: LD_ADDR_VAR 0 1
88327: PUSH
88328: LD_INT 1
88330: PUSH
88331: LD_INT 2
88333: PUSH
88334: LD_INT 3
88336: PUSH
88337: LD_INT 4
88339: PUSH
88340: LD_INT 5
88342: PUSH
88343: LD_INT 6
88345: PUSH
88346: LD_INT 7
88348: PUSH
88349: LD_INT 8
88351: PUSH
88352: LD_INT 9
88354: PUSH
88355: LD_INT 10
88357: PUSH
88358: LD_INT 11
88360: PUSH
88361: LD_INT 12
88363: PUSH
88364: LD_INT 13
88366: PUSH
88367: LD_INT 14
88369: PUSH
88370: LD_INT 15
88372: PUSH
88373: LD_INT 16
88375: PUSH
88376: LD_INT 17
88378: PUSH
88379: LD_INT 18
88381: PUSH
88382: LD_INT 19
88384: PUSH
88385: LD_INT 20
88387: PUSH
88388: LD_INT 21
88390: PUSH
88391: LD_INT 22
88393: PUSH
88394: LD_INT 23
88396: PUSH
88397: LD_INT 24
88399: PUSH
88400: LD_INT 25
88402: PUSH
88403: LD_INT 26
88405: PUSH
88406: LD_INT 27
88408: PUSH
88409: LD_INT 28
88411: PUSH
88412: LD_INT 29
88414: PUSH
88415: LD_INT 30
88417: PUSH
88418: LD_INT 31
88420: PUSH
88421: LD_INT 32
88423: PUSH
88424: LD_INT 33
88426: PUSH
88427: LD_INT 34
88429: PUSH
88430: LD_INT 36
88432: PUSH
88433: EMPTY
88434: LIST
88435: LIST
88436: LIST
88437: LIST
88438: LIST
88439: LIST
88440: LIST
88441: LIST
88442: LIST
88443: LIST
88444: LIST
88445: LIST
88446: LIST
88447: LIST
88448: LIST
88449: LIST
88450: LIST
88451: LIST
88452: LIST
88453: LIST
88454: LIST
88455: LIST
88456: LIST
88457: LIST
88458: LIST
88459: LIST
88460: LIST
88461: LIST
88462: LIST
88463: LIST
88464: LIST
88465: LIST
88466: LIST
88467: LIST
88468: LIST
88469: PUSH
88470: LD_INT 101
88472: PUSH
88473: LD_INT 102
88475: PUSH
88476: LD_INT 103
88478: PUSH
88479: LD_INT 104
88481: PUSH
88482: LD_INT 105
88484: PUSH
88485: LD_INT 106
88487: PUSH
88488: LD_INT 107
88490: PUSH
88491: LD_INT 108
88493: PUSH
88494: LD_INT 109
88496: PUSH
88497: LD_INT 110
88499: PUSH
88500: LD_INT 111
88502: PUSH
88503: LD_INT 112
88505: PUSH
88506: LD_INT 113
88508: PUSH
88509: LD_INT 114
88511: PUSH
88512: EMPTY
88513: LIST
88514: LIST
88515: LIST
88516: LIST
88517: LIST
88518: LIST
88519: LIST
88520: LIST
88521: LIST
88522: LIST
88523: LIST
88524: LIST
88525: LIST
88526: LIST
88527: PUSH
88528: EMPTY
88529: LIST
88530: LIST
88531: ST_TO_ADDR
88532: GO 89259
88534: LD_INT 16
88536: DOUBLE
88537: EQUAL
88538: IFTRUE 88542
88540: GO 88666
88542: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
88543: LD_ADDR_VAR 0 1
88547: PUSH
88548: LD_INT 2
88550: PUSH
88551: LD_INT 4
88553: PUSH
88554: LD_INT 5
88556: PUSH
88557: LD_INT 7
88559: PUSH
88560: LD_INT 11
88562: PUSH
88563: LD_INT 12
88565: PUSH
88566: LD_INT 15
88568: PUSH
88569: LD_INT 16
88571: PUSH
88572: LD_INT 20
88574: PUSH
88575: LD_INT 21
88577: PUSH
88578: LD_INT 22
88580: PUSH
88581: LD_INT 23
88583: PUSH
88584: LD_INT 25
88586: PUSH
88587: LD_INT 26
88589: PUSH
88590: LD_INT 30
88592: PUSH
88593: LD_INT 31
88595: PUSH
88596: LD_INT 32
88598: PUSH
88599: LD_INT 33
88601: PUSH
88602: LD_INT 34
88604: PUSH
88605: EMPTY
88606: LIST
88607: LIST
88608: LIST
88609: LIST
88610: LIST
88611: LIST
88612: LIST
88613: LIST
88614: LIST
88615: LIST
88616: LIST
88617: LIST
88618: LIST
88619: LIST
88620: LIST
88621: LIST
88622: LIST
88623: LIST
88624: LIST
88625: PUSH
88626: LD_INT 101
88628: PUSH
88629: LD_INT 102
88631: PUSH
88632: LD_INT 103
88634: PUSH
88635: LD_INT 106
88637: PUSH
88638: LD_INT 108
88640: PUSH
88641: LD_INT 112
88643: PUSH
88644: LD_INT 113
88646: PUSH
88647: LD_INT 114
88649: PUSH
88650: EMPTY
88651: LIST
88652: LIST
88653: LIST
88654: LIST
88655: LIST
88656: LIST
88657: LIST
88658: LIST
88659: PUSH
88660: EMPTY
88661: LIST
88662: LIST
88663: ST_TO_ADDR
88664: GO 89259
88666: LD_INT 17
88668: DOUBLE
88669: EQUAL
88670: IFTRUE 88674
88672: GO 88886
88674: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
88675: LD_ADDR_VAR 0 1
88679: PUSH
88680: LD_INT 1
88682: PUSH
88683: LD_INT 2
88685: PUSH
88686: LD_INT 3
88688: PUSH
88689: LD_INT 4
88691: PUSH
88692: LD_INT 5
88694: PUSH
88695: LD_INT 6
88697: PUSH
88698: LD_INT 7
88700: PUSH
88701: LD_INT 8
88703: PUSH
88704: LD_INT 9
88706: PUSH
88707: LD_INT 10
88709: PUSH
88710: LD_INT 11
88712: PUSH
88713: LD_INT 12
88715: PUSH
88716: LD_INT 13
88718: PUSH
88719: LD_INT 14
88721: PUSH
88722: LD_INT 15
88724: PUSH
88725: LD_INT 16
88727: PUSH
88728: LD_INT 17
88730: PUSH
88731: LD_INT 18
88733: PUSH
88734: LD_INT 19
88736: PUSH
88737: LD_INT 20
88739: PUSH
88740: LD_INT 21
88742: PUSH
88743: LD_INT 22
88745: PUSH
88746: LD_INT 23
88748: PUSH
88749: LD_INT 24
88751: PUSH
88752: LD_INT 25
88754: PUSH
88755: LD_INT 26
88757: PUSH
88758: LD_INT 27
88760: PUSH
88761: LD_INT 28
88763: PUSH
88764: LD_INT 29
88766: PUSH
88767: LD_INT 30
88769: PUSH
88770: LD_INT 31
88772: PUSH
88773: LD_INT 32
88775: PUSH
88776: LD_INT 33
88778: PUSH
88779: LD_INT 34
88781: PUSH
88782: LD_INT 36
88784: PUSH
88785: EMPTY
88786: LIST
88787: LIST
88788: LIST
88789: LIST
88790: LIST
88791: LIST
88792: LIST
88793: LIST
88794: LIST
88795: LIST
88796: LIST
88797: LIST
88798: LIST
88799: LIST
88800: LIST
88801: LIST
88802: LIST
88803: LIST
88804: LIST
88805: LIST
88806: LIST
88807: LIST
88808: LIST
88809: LIST
88810: LIST
88811: LIST
88812: LIST
88813: LIST
88814: LIST
88815: LIST
88816: LIST
88817: LIST
88818: LIST
88819: LIST
88820: LIST
88821: PUSH
88822: LD_INT 101
88824: PUSH
88825: LD_INT 102
88827: PUSH
88828: LD_INT 103
88830: PUSH
88831: LD_INT 104
88833: PUSH
88834: LD_INT 105
88836: PUSH
88837: LD_INT 106
88839: PUSH
88840: LD_INT 107
88842: PUSH
88843: LD_INT 108
88845: PUSH
88846: LD_INT 109
88848: PUSH
88849: LD_INT 110
88851: PUSH
88852: LD_INT 111
88854: PUSH
88855: LD_INT 112
88857: PUSH
88858: LD_INT 113
88860: PUSH
88861: LD_INT 114
88863: PUSH
88864: EMPTY
88865: LIST
88866: LIST
88867: LIST
88868: LIST
88869: LIST
88870: LIST
88871: LIST
88872: LIST
88873: LIST
88874: LIST
88875: LIST
88876: LIST
88877: LIST
88878: LIST
88879: PUSH
88880: EMPTY
88881: LIST
88882: LIST
88883: ST_TO_ADDR
88884: GO 89259
88886: LD_INT 18
88888: DOUBLE
88889: EQUAL
88890: IFTRUE 88894
88892: GO 89030
88894: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
88895: LD_ADDR_VAR 0 1
88899: PUSH
88900: LD_INT 2
88902: PUSH
88903: LD_INT 4
88905: PUSH
88906: LD_INT 5
88908: PUSH
88909: LD_INT 7
88911: PUSH
88912: LD_INT 11
88914: PUSH
88915: LD_INT 12
88917: PUSH
88918: LD_INT 15
88920: PUSH
88921: LD_INT 16
88923: PUSH
88924: LD_INT 20
88926: PUSH
88927: LD_INT 21
88929: PUSH
88930: LD_INT 22
88932: PUSH
88933: LD_INT 23
88935: PUSH
88936: LD_INT 25
88938: PUSH
88939: LD_INT 26
88941: PUSH
88942: LD_INT 30
88944: PUSH
88945: LD_INT 31
88947: PUSH
88948: LD_INT 32
88950: PUSH
88951: LD_INT 33
88953: PUSH
88954: LD_INT 34
88956: PUSH
88957: LD_INT 35
88959: PUSH
88960: LD_INT 36
88962: PUSH
88963: EMPTY
88964: LIST
88965: LIST
88966: LIST
88967: LIST
88968: LIST
88969: LIST
88970: LIST
88971: LIST
88972: LIST
88973: LIST
88974: LIST
88975: LIST
88976: LIST
88977: LIST
88978: LIST
88979: LIST
88980: LIST
88981: LIST
88982: LIST
88983: LIST
88984: LIST
88985: PUSH
88986: LD_INT 101
88988: PUSH
88989: LD_INT 102
88991: PUSH
88992: LD_INT 103
88994: PUSH
88995: LD_INT 106
88997: PUSH
88998: LD_INT 108
89000: PUSH
89001: LD_INT 112
89003: PUSH
89004: LD_INT 113
89006: PUSH
89007: LD_INT 114
89009: PUSH
89010: LD_INT 115
89012: PUSH
89013: EMPTY
89014: LIST
89015: LIST
89016: LIST
89017: LIST
89018: LIST
89019: LIST
89020: LIST
89021: LIST
89022: LIST
89023: PUSH
89024: EMPTY
89025: LIST
89026: LIST
89027: ST_TO_ADDR
89028: GO 89259
89030: LD_INT 19
89032: DOUBLE
89033: EQUAL
89034: IFTRUE 89038
89036: GO 89258
89038: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
89039: LD_ADDR_VAR 0 1
89043: PUSH
89044: LD_INT 1
89046: PUSH
89047: LD_INT 2
89049: PUSH
89050: LD_INT 3
89052: PUSH
89053: LD_INT 4
89055: PUSH
89056: LD_INT 5
89058: PUSH
89059: LD_INT 6
89061: PUSH
89062: LD_INT 7
89064: PUSH
89065: LD_INT 8
89067: PUSH
89068: LD_INT 9
89070: PUSH
89071: LD_INT 10
89073: PUSH
89074: LD_INT 11
89076: PUSH
89077: LD_INT 12
89079: PUSH
89080: LD_INT 13
89082: PUSH
89083: LD_INT 14
89085: PUSH
89086: LD_INT 15
89088: PUSH
89089: LD_INT 16
89091: PUSH
89092: LD_INT 17
89094: PUSH
89095: LD_INT 18
89097: PUSH
89098: LD_INT 19
89100: PUSH
89101: LD_INT 20
89103: PUSH
89104: LD_INT 21
89106: PUSH
89107: LD_INT 22
89109: PUSH
89110: LD_INT 23
89112: PUSH
89113: LD_INT 24
89115: PUSH
89116: LD_INT 25
89118: PUSH
89119: LD_INT 26
89121: PUSH
89122: LD_INT 27
89124: PUSH
89125: LD_INT 28
89127: PUSH
89128: LD_INT 29
89130: PUSH
89131: LD_INT 30
89133: PUSH
89134: LD_INT 31
89136: PUSH
89137: LD_INT 32
89139: PUSH
89140: LD_INT 33
89142: PUSH
89143: LD_INT 34
89145: PUSH
89146: LD_INT 35
89148: PUSH
89149: LD_INT 36
89151: PUSH
89152: EMPTY
89153: LIST
89154: LIST
89155: LIST
89156: LIST
89157: LIST
89158: LIST
89159: LIST
89160: LIST
89161: LIST
89162: LIST
89163: LIST
89164: LIST
89165: LIST
89166: LIST
89167: LIST
89168: LIST
89169: LIST
89170: LIST
89171: LIST
89172: LIST
89173: LIST
89174: LIST
89175: LIST
89176: LIST
89177: LIST
89178: LIST
89179: LIST
89180: LIST
89181: LIST
89182: LIST
89183: LIST
89184: LIST
89185: LIST
89186: LIST
89187: LIST
89188: LIST
89189: PUSH
89190: LD_INT 101
89192: PUSH
89193: LD_INT 102
89195: PUSH
89196: LD_INT 103
89198: PUSH
89199: LD_INT 104
89201: PUSH
89202: LD_INT 105
89204: PUSH
89205: LD_INT 106
89207: PUSH
89208: LD_INT 107
89210: PUSH
89211: LD_INT 108
89213: PUSH
89214: LD_INT 109
89216: PUSH
89217: LD_INT 110
89219: PUSH
89220: LD_INT 111
89222: PUSH
89223: LD_INT 112
89225: PUSH
89226: LD_INT 113
89228: PUSH
89229: LD_INT 114
89231: PUSH
89232: LD_INT 115
89234: PUSH
89235: EMPTY
89236: LIST
89237: LIST
89238: LIST
89239: LIST
89240: LIST
89241: LIST
89242: LIST
89243: LIST
89244: LIST
89245: LIST
89246: LIST
89247: LIST
89248: LIST
89249: LIST
89250: LIST
89251: PUSH
89252: EMPTY
89253: LIST
89254: LIST
89255: ST_TO_ADDR
89256: GO 89259
89258: POP
// end else
89259: GO 89478
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
89261: LD_ADDR_VAR 0 1
89265: PUSH
89266: LD_INT 1
89268: PUSH
89269: LD_INT 2
89271: PUSH
89272: LD_INT 3
89274: PUSH
89275: LD_INT 4
89277: PUSH
89278: LD_INT 5
89280: PUSH
89281: LD_INT 6
89283: PUSH
89284: LD_INT 7
89286: PUSH
89287: LD_INT 8
89289: PUSH
89290: LD_INT 9
89292: PUSH
89293: LD_INT 10
89295: PUSH
89296: LD_INT 11
89298: PUSH
89299: LD_INT 12
89301: PUSH
89302: LD_INT 13
89304: PUSH
89305: LD_INT 14
89307: PUSH
89308: LD_INT 15
89310: PUSH
89311: LD_INT 16
89313: PUSH
89314: LD_INT 17
89316: PUSH
89317: LD_INT 18
89319: PUSH
89320: LD_INT 19
89322: PUSH
89323: LD_INT 20
89325: PUSH
89326: LD_INT 21
89328: PUSH
89329: LD_INT 22
89331: PUSH
89332: LD_INT 23
89334: PUSH
89335: LD_INT 24
89337: PUSH
89338: LD_INT 25
89340: PUSH
89341: LD_INT 26
89343: PUSH
89344: LD_INT 27
89346: PUSH
89347: LD_INT 28
89349: PUSH
89350: LD_INT 29
89352: PUSH
89353: LD_INT 30
89355: PUSH
89356: LD_INT 31
89358: PUSH
89359: LD_INT 32
89361: PUSH
89362: LD_INT 33
89364: PUSH
89365: LD_INT 34
89367: PUSH
89368: LD_INT 35
89370: PUSH
89371: LD_INT 36
89373: PUSH
89374: EMPTY
89375: LIST
89376: LIST
89377: LIST
89378: LIST
89379: LIST
89380: LIST
89381: LIST
89382: LIST
89383: LIST
89384: LIST
89385: LIST
89386: LIST
89387: LIST
89388: LIST
89389: LIST
89390: LIST
89391: LIST
89392: LIST
89393: LIST
89394: LIST
89395: LIST
89396: LIST
89397: LIST
89398: LIST
89399: LIST
89400: LIST
89401: LIST
89402: LIST
89403: LIST
89404: LIST
89405: LIST
89406: LIST
89407: LIST
89408: LIST
89409: LIST
89410: LIST
89411: PUSH
89412: LD_INT 101
89414: PUSH
89415: LD_INT 102
89417: PUSH
89418: LD_INT 103
89420: PUSH
89421: LD_INT 104
89423: PUSH
89424: LD_INT 105
89426: PUSH
89427: LD_INT 106
89429: PUSH
89430: LD_INT 107
89432: PUSH
89433: LD_INT 108
89435: PUSH
89436: LD_INT 109
89438: PUSH
89439: LD_INT 110
89441: PUSH
89442: LD_INT 111
89444: PUSH
89445: LD_INT 112
89447: PUSH
89448: LD_INT 113
89450: PUSH
89451: LD_INT 114
89453: PUSH
89454: LD_INT 115
89456: PUSH
89457: EMPTY
89458: LIST
89459: LIST
89460: LIST
89461: LIST
89462: LIST
89463: LIST
89464: LIST
89465: LIST
89466: LIST
89467: LIST
89468: LIST
89469: LIST
89470: LIST
89471: LIST
89472: LIST
89473: PUSH
89474: EMPTY
89475: LIST
89476: LIST
89477: ST_TO_ADDR
// if result then
89478: LD_VAR 0 1
89482: IFFALSE 89771
// begin normal :=  ;
89484: LD_ADDR_VAR 0 3
89488: PUSH
89489: LD_STRING 
89491: ST_TO_ADDR
// hardcore :=  ;
89492: LD_ADDR_VAR 0 4
89496: PUSH
89497: LD_STRING 
89499: ST_TO_ADDR
// for i = 1 to normalCounter do
89500: LD_ADDR_VAR 0 5
89504: PUSH
89505: DOUBLE
89506: LD_INT 1
89508: DEC
89509: ST_TO_ADDR
89510: LD_EXP 89
89514: PUSH
89515: FOR_TO
89516: IFFALSE 89617
// begin tmp := 0 ;
89518: LD_ADDR_VAR 0 2
89522: PUSH
89523: LD_STRING 0
89525: ST_TO_ADDR
// if result [ 1 ] then
89526: LD_VAR 0 1
89530: PUSH
89531: LD_INT 1
89533: ARRAY
89534: IFFALSE 89599
// if result [ 1 ] [ 1 ] = i then
89536: LD_VAR 0 1
89540: PUSH
89541: LD_INT 1
89543: ARRAY
89544: PUSH
89545: LD_INT 1
89547: ARRAY
89548: PUSH
89549: LD_VAR 0 5
89553: EQUAL
89554: IFFALSE 89599
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
89556: LD_ADDR_VAR 0 1
89560: PUSH
89561: LD_VAR 0 1
89565: PPUSH
89566: LD_INT 1
89568: PPUSH
89569: LD_VAR 0 1
89573: PUSH
89574: LD_INT 1
89576: ARRAY
89577: PPUSH
89578: LD_INT 1
89580: PPUSH
89581: CALL_OW 3
89585: PPUSH
89586: CALL_OW 1
89590: ST_TO_ADDR
// tmp := 1 ;
89591: LD_ADDR_VAR 0 2
89595: PUSH
89596: LD_STRING 1
89598: ST_TO_ADDR
// end ; normal := normal & tmp ;
89599: LD_ADDR_VAR 0 3
89603: PUSH
89604: LD_VAR 0 3
89608: PUSH
89609: LD_VAR 0 2
89613: STR
89614: ST_TO_ADDR
// end ;
89615: GO 89515
89617: POP
89618: POP
// for i = 1 to hardcoreCounter do
89619: LD_ADDR_VAR 0 5
89623: PUSH
89624: DOUBLE
89625: LD_INT 1
89627: DEC
89628: ST_TO_ADDR
89629: LD_EXP 90
89633: PUSH
89634: FOR_TO
89635: IFFALSE 89740
// begin tmp := 0 ;
89637: LD_ADDR_VAR 0 2
89641: PUSH
89642: LD_STRING 0
89644: ST_TO_ADDR
// if result [ 2 ] then
89645: LD_VAR 0 1
89649: PUSH
89650: LD_INT 2
89652: ARRAY
89653: IFFALSE 89722
// if result [ 2 ] [ 1 ] = 100 + i then
89655: LD_VAR 0 1
89659: PUSH
89660: LD_INT 2
89662: ARRAY
89663: PUSH
89664: LD_INT 1
89666: ARRAY
89667: PUSH
89668: LD_INT 100
89670: PUSH
89671: LD_VAR 0 5
89675: PLUS
89676: EQUAL
89677: IFFALSE 89722
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
89679: LD_ADDR_VAR 0 1
89683: PUSH
89684: LD_VAR 0 1
89688: PPUSH
89689: LD_INT 2
89691: PPUSH
89692: LD_VAR 0 1
89696: PUSH
89697: LD_INT 2
89699: ARRAY
89700: PPUSH
89701: LD_INT 1
89703: PPUSH
89704: CALL_OW 3
89708: PPUSH
89709: CALL_OW 1
89713: ST_TO_ADDR
// tmp := 1 ;
89714: LD_ADDR_VAR 0 2
89718: PUSH
89719: LD_STRING 1
89721: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
89722: LD_ADDR_VAR 0 4
89726: PUSH
89727: LD_VAR 0 4
89731: PUSH
89732: LD_VAR 0 2
89736: STR
89737: ST_TO_ADDR
// end ;
89738: GO 89634
89740: POP
89741: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
89742: LD_STRING getStreamItemsFromMission("
89744: PUSH
89745: LD_VAR 0 3
89749: STR
89750: PUSH
89751: LD_STRING ","
89753: STR
89754: PUSH
89755: LD_VAR 0 4
89759: STR
89760: PUSH
89761: LD_STRING ")
89763: STR
89764: PPUSH
89765: CALL_OW 559
// end else
89769: GO 89778
// ToLua ( getStreamItemsFromMission("","") ) ;
89771: LD_STRING getStreamItemsFromMission("","")
89773: PPUSH
89774: CALL_OW 559
// end ;
89778: LD_VAR 0 1
89782: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
89783: LD_VAR 0 2
89787: PUSH
89788: LD_INT 100
89790: EQUAL
89791: IFFALSE 90740
// begin if not StreamModeActive then
89793: LD_EXP 88
89797: NOT
89798: IFFALSE 89808
// StreamModeActive := true ;
89800: LD_ADDR_EXP 88
89804: PUSH
89805: LD_INT 1
89807: ST_TO_ADDR
// if p3 = 0 then
89808: LD_VAR 0 3
89812: PUSH
89813: LD_INT 0
89815: EQUAL
89816: IFFALSE 89822
// InitStreamMode ;
89818: CALL 85861 0 0
// if p3 = 1 then
89822: LD_VAR 0 3
89826: PUSH
89827: LD_INT 1
89829: EQUAL
89830: IFFALSE 89840
// sRocket := true ;
89832: LD_ADDR_EXP 93
89836: PUSH
89837: LD_INT 1
89839: ST_TO_ADDR
// if p3 = 2 then
89840: LD_VAR 0 3
89844: PUSH
89845: LD_INT 2
89847: EQUAL
89848: IFFALSE 89858
// sSpeed := true ;
89850: LD_ADDR_EXP 92
89854: PUSH
89855: LD_INT 1
89857: ST_TO_ADDR
// if p3 = 3 then
89858: LD_VAR 0 3
89862: PUSH
89863: LD_INT 3
89865: EQUAL
89866: IFFALSE 89876
// sEngine := true ;
89868: LD_ADDR_EXP 94
89872: PUSH
89873: LD_INT 1
89875: ST_TO_ADDR
// if p3 = 4 then
89876: LD_VAR 0 3
89880: PUSH
89881: LD_INT 4
89883: EQUAL
89884: IFFALSE 89894
// sSpec := true ;
89886: LD_ADDR_EXP 91
89890: PUSH
89891: LD_INT 1
89893: ST_TO_ADDR
// if p3 = 5 then
89894: LD_VAR 0 3
89898: PUSH
89899: LD_INT 5
89901: EQUAL
89902: IFFALSE 89912
// sLevel := true ;
89904: LD_ADDR_EXP 95
89908: PUSH
89909: LD_INT 1
89911: ST_TO_ADDR
// if p3 = 6 then
89912: LD_VAR 0 3
89916: PUSH
89917: LD_INT 6
89919: EQUAL
89920: IFFALSE 89930
// sArmoury := true ;
89922: LD_ADDR_EXP 96
89926: PUSH
89927: LD_INT 1
89929: ST_TO_ADDR
// if p3 = 7 then
89930: LD_VAR 0 3
89934: PUSH
89935: LD_INT 7
89937: EQUAL
89938: IFFALSE 89948
// sRadar := true ;
89940: LD_ADDR_EXP 97
89944: PUSH
89945: LD_INT 1
89947: ST_TO_ADDR
// if p3 = 8 then
89948: LD_VAR 0 3
89952: PUSH
89953: LD_INT 8
89955: EQUAL
89956: IFFALSE 89966
// sBunker := true ;
89958: LD_ADDR_EXP 98
89962: PUSH
89963: LD_INT 1
89965: ST_TO_ADDR
// if p3 = 9 then
89966: LD_VAR 0 3
89970: PUSH
89971: LD_INT 9
89973: EQUAL
89974: IFFALSE 89984
// sHack := true ;
89976: LD_ADDR_EXP 99
89980: PUSH
89981: LD_INT 1
89983: ST_TO_ADDR
// if p3 = 10 then
89984: LD_VAR 0 3
89988: PUSH
89989: LD_INT 10
89991: EQUAL
89992: IFFALSE 90002
// sFire := true ;
89994: LD_ADDR_EXP 100
89998: PUSH
89999: LD_INT 1
90001: ST_TO_ADDR
// if p3 = 11 then
90002: LD_VAR 0 3
90006: PUSH
90007: LD_INT 11
90009: EQUAL
90010: IFFALSE 90020
// sRefresh := true ;
90012: LD_ADDR_EXP 101
90016: PUSH
90017: LD_INT 1
90019: ST_TO_ADDR
// if p3 = 12 then
90020: LD_VAR 0 3
90024: PUSH
90025: LD_INT 12
90027: EQUAL
90028: IFFALSE 90038
// sExp := true ;
90030: LD_ADDR_EXP 102
90034: PUSH
90035: LD_INT 1
90037: ST_TO_ADDR
// if p3 = 13 then
90038: LD_VAR 0 3
90042: PUSH
90043: LD_INT 13
90045: EQUAL
90046: IFFALSE 90056
// sDepot := true ;
90048: LD_ADDR_EXP 103
90052: PUSH
90053: LD_INT 1
90055: ST_TO_ADDR
// if p3 = 14 then
90056: LD_VAR 0 3
90060: PUSH
90061: LD_INT 14
90063: EQUAL
90064: IFFALSE 90074
// sFlag := true ;
90066: LD_ADDR_EXP 104
90070: PUSH
90071: LD_INT 1
90073: ST_TO_ADDR
// if p3 = 15 then
90074: LD_VAR 0 3
90078: PUSH
90079: LD_INT 15
90081: EQUAL
90082: IFFALSE 90092
// sKamikadze := true ;
90084: LD_ADDR_EXP 112
90088: PUSH
90089: LD_INT 1
90091: ST_TO_ADDR
// if p3 = 16 then
90092: LD_VAR 0 3
90096: PUSH
90097: LD_INT 16
90099: EQUAL
90100: IFFALSE 90110
// sTroll := true ;
90102: LD_ADDR_EXP 113
90106: PUSH
90107: LD_INT 1
90109: ST_TO_ADDR
// if p3 = 17 then
90110: LD_VAR 0 3
90114: PUSH
90115: LD_INT 17
90117: EQUAL
90118: IFFALSE 90128
// sSlow := true ;
90120: LD_ADDR_EXP 114
90124: PUSH
90125: LD_INT 1
90127: ST_TO_ADDR
// if p3 = 18 then
90128: LD_VAR 0 3
90132: PUSH
90133: LD_INT 18
90135: EQUAL
90136: IFFALSE 90146
// sLack := true ;
90138: LD_ADDR_EXP 115
90142: PUSH
90143: LD_INT 1
90145: ST_TO_ADDR
// if p3 = 19 then
90146: LD_VAR 0 3
90150: PUSH
90151: LD_INT 19
90153: EQUAL
90154: IFFALSE 90164
// sTank := true ;
90156: LD_ADDR_EXP 117
90160: PUSH
90161: LD_INT 1
90163: ST_TO_ADDR
// if p3 = 20 then
90164: LD_VAR 0 3
90168: PUSH
90169: LD_INT 20
90171: EQUAL
90172: IFFALSE 90182
// sRemote := true ;
90174: LD_ADDR_EXP 118
90178: PUSH
90179: LD_INT 1
90181: ST_TO_ADDR
// if p3 = 21 then
90182: LD_VAR 0 3
90186: PUSH
90187: LD_INT 21
90189: EQUAL
90190: IFFALSE 90200
// sPowell := true ;
90192: LD_ADDR_EXP 119
90196: PUSH
90197: LD_INT 1
90199: ST_TO_ADDR
// if p3 = 22 then
90200: LD_VAR 0 3
90204: PUSH
90205: LD_INT 22
90207: EQUAL
90208: IFFALSE 90218
// sTeleport := true ;
90210: LD_ADDR_EXP 122
90214: PUSH
90215: LD_INT 1
90217: ST_TO_ADDR
// if p3 = 23 then
90218: LD_VAR 0 3
90222: PUSH
90223: LD_INT 23
90225: EQUAL
90226: IFFALSE 90236
// sOilTower := true ;
90228: LD_ADDR_EXP 124
90232: PUSH
90233: LD_INT 1
90235: ST_TO_ADDR
// if p3 = 24 then
90236: LD_VAR 0 3
90240: PUSH
90241: LD_INT 24
90243: EQUAL
90244: IFFALSE 90254
// sShovel := true ;
90246: LD_ADDR_EXP 125
90250: PUSH
90251: LD_INT 1
90253: ST_TO_ADDR
// if p3 = 25 then
90254: LD_VAR 0 3
90258: PUSH
90259: LD_INT 25
90261: EQUAL
90262: IFFALSE 90272
// sSheik := true ;
90264: LD_ADDR_EXP 126
90268: PUSH
90269: LD_INT 1
90271: ST_TO_ADDR
// if p3 = 26 then
90272: LD_VAR 0 3
90276: PUSH
90277: LD_INT 26
90279: EQUAL
90280: IFFALSE 90290
// sEarthquake := true ;
90282: LD_ADDR_EXP 128
90286: PUSH
90287: LD_INT 1
90289: ST_TO_ADDR
// if p3 = 27 then
90290: LD_VAR 0 3
90294: PUSH
90295: LD_INT 27
90297: EQUAL
90298: IFFALSE 90308
// sAI := true ;
90300: LD_ADDR_EXP 129
90304: PUSH
90305: LD_INT 1
90307: ST_TO_ADDR
// if p3 = 28 then
90308: LD_VAR 0 3
90312: PUSH
90313: LD_INT 28
90315: EQUAL
90316: IFFALSE 90326
// sCargo := true ;
90318: LD_ADDR_EXP 132
90322: PUSH
90323: LD_INT 1
90325: ST_TO_ADDR
// if p3 = 29 then
90326: LD_VAR 0 3
90330: PUSH
90331: LD_INT 29
90333: EQUAL
90334: IFFALSE 90344
// sDLaser := true ;
90336: LD_ADDR_EXP 133
90340: PUSH
90341: LD_INT 1
90343: ST_TO_ADDR
// if p3 = 30 then
90344: LD_VAR 0 3
90348: PUSH
90349: LD_INT 30
90351: EQUAL
90352: IFFALSE 90362
// sExchange := true ;
90354: LD_ADDR_EXP 134
90358: PUSH
90359: LD_INT 1
90361: ST_TO_ADDR
// if p3 = 31 then
90362: LD_VAR 0 3
90366: PUSH
90367: LD_INT 31
90369: EQUAL
90370: IFFALSE 90380
// sFac := true ;
90372: LD_ADDR_EXP 135
90376: PUSH
90377: LD_INT 1
90379: ST_TO_ADDR
// if p3 = 32 then
90380: LD_VAR 0 3
90384: PUSH
90385: LD_INT 32
90387: EQUAL
90388: IFFALSE 90398
// sPower := true ;
90390: LD_ADDR_EXP 136
90394: PUSH
90395: LD_INT 1
90397: ST_TO_ADDR
// if p3 = 33 then
90398: LD_VAR 0 3
90402: PUSH
90403: LD_INT 33
90405: EQUAL
90406: IFFALSE 90416
// sRandom := true ;
90408: LD_ADDR_EXP 137
90412: PUSH
90413: LD_INT 1
90415: ST_TO_ADDR
// if p3 = 34 then
90416: LD_VAR 0 3
90420: PUSH
90421: LD_INT 34
90423: EQUAL
90424: IFFALSE 90434
// sShield := true ;
90426: LD_ADDR_EXP 138
90430: PUSH
90431: LD_INT 1
90433: ST_TO_ADDR
// if p3 = 35 then
90434: LD_VAR 0 3
90438: PUSH
90439: LD_INT 35
90441: EQUAL
90442: IFFALSE 90452
// sTime := true ;
90444: LD_ADDR_EXP 139
90448: PUSH
90449: LD_INT 1
90451: ST_TO_ADDR
// if p3 = 36 then
90452: LD_VAR 0 3
90456: PUSH
90457: LD_INT 36
90459: EQUAL
90460: IFFALSE 90470
// sTools := true ;
90462: LD_ADDR_EXP 140
90466: PUSH
90467: LD_INT 1
90469: ST_TO_ADDR
// if p3 = 101 then
90470: LD_VAR 0 3
90474: PUSH
90475: LD_INT 101
90477: EQUAL
90478: IFFALSE 90488
// sSold := true ;
90480: LD_ADDR_EXP 105
90484: PUSH
90485: LD_INT 1
90487: ST_TO_ADDR
// if p3 = 102 then
90488: LD_VAR 0 3
90492: PUSH
90493: LD_INT 102
90495: EQUAL
90496: IFFALSE 90506
// sDiff := true ;
90498: LD_ADDR_EXP 106
90502: PUSH
90503: LD_INT 1
90505: ST_TO_ADDR
// if p3 = 103 then
90506: LD_VAR 0 3
90510: PUSH
90511: LD_INT 103
90513: EQUAL
90514: IFFALSE 90524
// sFog := true ;
90516: LD_ADDR_EXP 109
90520: PUSH
90521: LD_INT 1
90523: ST_TO_ADDR
// if p3 = 104 then
90524: LD_VAR 0 3
90528: PUSH
90529: LD_INT 104
90531: EQUAL
90532: IFFALSE 90542
// sReset := true ;
90534: LD_ADDR_EXP 110
90538: PUSH
90539: LD_INT 1
90541: ST_TO_ADDR
// if p3 = 105 then
90542: LD_VAR 0 3
90546: PUSH
90547: LD_INT 105
90549: EQUAL
90550: IFFALSE 90560
// sSun := true ;
90552: LD_ADDR_EXP 111
90556: PUSH
90557: LD_INT 1
90559: ST_TO_ADDR
// if p3 = 106 then
90560: LD_VAR 0 3
90564: PUSH
90565: LD_INT 106
90567: EQUAL
90568: IFFALSE 90578
// sTiger := true ;
90570: LD_ADDR_EXP 107
90574: PUSH
90575: LD_INT 1
90577: ST_TO_ADDR
// if p3 = 107 then
90578: LD_VAR 0 3
90582: PUSH
90583: LD_INT 107
90585: EQUAL
90586: IFFALSE 90596
// sBomb := true ;
90588: LD_ADDR_EXP 108
90592: PUSH
90593: LD_INT 1
90595: ST_TO_ADDR
// if p3 = 108 then
90596: LD_VAR 0 3
90600: PUSH
90601: LD_INT 108
90603: EQUAL
90604: IFFALSE 90614
// sWound := true ;
90606: LD_ADDR_EXP 116
90610: PUSH
90611: LD_INT 1
90613: ST_TO_ADDR
// if p3 = 109 then
90614: LD_VAR 0 3
90618: PUSH
90619: LD_INT 109
90621: EQUAL
90622: IFFALSE 90632
// sBetray := true ;
90624: LD_ADDR_EXP 120
90628: PUSH
90629: LD_INT 1
90631: ST_TO_ADDR
// if p3 = 110 then
90632: LD_VAR 0 3
90636: PUSH
90637: LD_INT 110
90639: EQUAL
90640: IFFALSE 90650
// sContamin := true ;
90642: LD_ADDR_EXP 121
90646: PUSH
90647: LD_INT 1
90649: ST_TO_ADDR
// if p3 = 111 then
90650: LD_VAR 0 3
90654: PUSH
90655: LD_INT 111
90657: EQUAL
90658: IFFALSE 90668
// sOil := true ;
90660: LD_ADDR_EXP 123
90664: PUSH
90665: LD_INT 1
90667: ST_TO_ADDR
// if p3 = 112 then
90668: LD_VAR 0 3
90672: PUSH
90673: LD_INT 112
90675: EQUAL
90676: IFFALSE 90686
// sStu := true ;
90678: LD_ADDR_EXP 127
90682: PUSH
90683: LD_INT 1
90685: ST_TO_ADDR
// if p3 = 113 then
90686: LD_VAR 0 3
90690: PUSH
90691: LD_INT 113
90693: EQUAL
90694: IFFALSE 90704
// sBazooka := true ;
90696: LD_ADDR_EXP 130
90700: PUSH
90701: LD_INT 1
90703: ST_TO_ADDR
// if p3 = 114 then
90704: LD_VAR 0 3
90708: PUSH
90709: LD_INT 114
90711: EQUAL
90712: IFFALSE 90722
// sMortar := true ;
90714: LD_ADDR_EXP 131
90718: PUSH
90719: LD_INT 1
90721: ST_TO_ADDR
// if p3 = 115 then
90722: LD_VAR 0 3
90726: PUSH
90727: LD_INT 115
90729: EQUAL
90730: IFFALSE 90740
// sRanger := true ;
90732: LD_ADDR_EXP 141
90736: PUSH
90737: LD_INT 1
90739: ST_TO_ADDR
// end ; end ;
90740: PPOPN 6
90742: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
90743: LD_EXP 88
90747: PUSH
90748: LD_EXP 93
90752: AND
90753: IFFALSE 90877
90755: GO 90757
90757: DISABLE
90758: LD_INT 0
90760: PPUSH
90761: PPUSH
// begin enable ;
90762: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
90763: LD_ADDR_VAR 0 2
90767: PUSH
90768: LD_INT 22
90770: PUSH
90771: LD_OWVAR 2
90775: PUSH
90776: EMPTY
90777: LIST
90778: LIST
90779: PUSH
90780: LD_INT 2
90782: PUSH
90783: LD_INT 34
90785: PUSH
90786: LD_INT 7
90788: PUSH
90789: EMPTY
90790: LIST
90791: LIST
90792: PUSH
90793: LD_INT 34
90795: PUSH
90796: LD_INT 45
90798: PUSH
90799: EMPTY
90800: LIST
90801: LIST
90802: PUSH
90803: LD_INT 34
90805: PUSH
90806: LD_INT 28
90808: PUSH
90809: EMPTY
90810: LIST
90811: LIST
90812: PUSH
90813: LD_INT 34
90815: PUSH
90816: LD_INT 47
90818: PUSH
90819: EMPTY
90820: LIST
90821: LIST
90822: PUSH
90823: EMPTY
90824: LIST
90825: LIST
90826: LIST
90827: LIST
90828: LIST
90829: PUSH
90830: EMPTY
90831: LIST
90832: LIST
90833: PPUSH
90834: CALL_OW 69
90838: ST_TO_ADDR
// if not tmp then
90839: LD_VAR 0 2
90843: NOT
90844: IFFALSE 90848
// exit ;
90846: GO 90877
// for i in tmp do
90848: LD_ADDR_VAR 0 1
90852: PUSH
90853: LD_VAR 0 2
90857: PUSH
90858: FOR_IN
90859: IFFALSE 90875
// begin SetLives ( i , 0 ) ;
90861: LD_VAR 0 1
90865: PPUSH
90866: LD_INT 0
90868: PPUSH
90869: CALL_OW 234
// end ;
90873: GO 90858
90875: POP
90876: POP
// end ;
90877: PPOPN 2
90879: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
90880: LD_EXP 88
90884: PUSH
90885: LD_EXP 94
90889: AND
90890: IFFALSE 90974
90892: GO 90894
90894: DISABLE
90895: LD_INT 0
90897: PPUSH
90898: PPUSH
// begin enable ;
90899: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
90900: LD_ADDR_VAR 0 2
90904: PUSH
90905: LD_INT 22
90907: PUSH
90908: LD_OWVAR 2
90912: PUSH
90913: EMPTY
90914: LIST
90915: LIST
90916: PUSH
90917: LD_INT 32
90919: PUSH
90920: LD_INT 3
90922: PUSH
90923: EMPTY
90924: LIST
90925: LIST
90926: PUSH
90927: EMPTY
90928: LIST
90929: LIST
90930: PPUSH
90931: CALL_OW 69
90935: ST_TO_ADDR
// if not tmp then
90936: LD_VAR 0 2
90940: NOT
90941: IFFALSE 90945
// exit ;
90943: GO 90974
// for i in tmp do
90945: LD_ADDR_VAR 0 1
90949: PUSH
90950: LD_VAR 0 2
90954: PUSH
90955: FOR_IN
90956: IFFALSE 90972
// begin SetLives ( i , 0 ) ;
90958: LD_VAR 0 1
90962: PPUSH
90963: LD_INT 0
90965: PPUSH
90966: CALL_OW 234
// end ;
90970: GO 90955
90972: POP
90973: POP
// end ;
90974: PPOPN 2
90976: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
90977: LD_EXP 88
90981: PUSH
90982: LD_EXP 91
90986: AND
90987: IFFALSE 91080
90989: GO 90991
90991: DISABLE
90992: LD_INT 0
90994: PPUSH
// begin enable ;
90995: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
90996: LD_ADDR_VAR 0 1
91000: PUSH
91001: LD_INT 22
91003: PUSH
91004: LD_OWVAR 2
91008: PUSH
91009: EMPTY
91010: LIST
91011: LIST
91012: PUSH
91013: LD_INT 2
91015: PUSH
91016: LD_INT 25
91018: PUSH
91019: LD_INT 5
91021: PUSH
91022: EMPTY
91023: LIST
91024: LIST
91025: PUSH
91026: LD_INT 25
91028: PUSH
91029: LD_INT 9
91031: PUSH
91032: EMPTY
91033: LIST
91034: LIST
91035: PUSH
91036: LD_INT 25
91038: PUSH
91039: LD_INT 8
91041: PUSH
91042: EMPTY
91043: LIST
91044: LIST
91045: PUSH
91046: EMPTY
91047: LIST
91048: LIST
91049: LIST
91050: LIST
91051: PUSH
91052: EMPTY
91053: LIST
91054: LIST
91055: PPUSH
91056: CALL_OW 69
91060: PUSH
91061: FOR_IN
91062: IFFALSE 91078
// begin SetClass ( i , 1 ) ;
91064: LD_VAR 0 1
91068: PPUSH
91069: LD_INT 1
91071: PPUSH
91072: CALL_OW 336
// end ;
91076: GO 91061
91078: POP
91079: POP
// end ;
91080: PPOPN 1
91082: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
91083: LD_EXP 88
91087: PUSH
91088: LD_EXP 92
91092: AND
91093: PUSH
91094: LD_OWVAR 65
91098: PUSH
91099: LD_INT 7
91101: LESS
91102: AND
91103: IFFALSE 91117
91105: GO 91107
91107: DISABLE
// begin enable ;
91108: ENABLE
// game_speed := 7 ;
91109: LD_ADDR_OWVAR 65
91113: PUSH
91114: LD_INT 7
91116: ST_TO_ADDR
// end ;
91117: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
91118: LD_EXP 88
91122: PUSH
91123: LD_EXP 95
91127: AND
91128: IFFALSE 91330
91130: GO 91132
91132: DISABLE
91133: LD_INT 0
91135: PPUSH
91136: PPUSH
91137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
91138: LD_ADDR_VAR 0 3
91142: PUSH
91143: LD_INT 81
91145: PUSH
91146: LD_OWVAR 2
91150: PUSH
91151: EMPTY
91152: LIST
91153: LIST
91154: PUSH
91155: LD_INT 21
91157: PUSH
91158: LD_INT 1
91160: PUSH
91161: EMPTY
91162: LIST
91163: LIST
91164: PUSH
91165: EMPTY
91166: LIST
91167: LIST
91168: PPUSH
91169: CALL_OW 69
91173: ST_TO_ADDR
// if not tmp then
91174: LD_VAR 0 3
91178: NOT
91179: IFFALSE 91183
// exit ;
91181: GO 91330
// if tmp > 5 then
91183: LD_VAR 0 3
91187: PUSH
91188: LD_INT 5
91190: GREATER
91191: IFFALSE 91203
// k := 5 else
91193: LD_ADDR_VAR 0 2
91197: PUSH
91198: LD_INT 5
91200: ST_TO_ADDR
91201: GO 91213
// k := tmp ;
91203: LD_ADDR_VAR 0 2
91207: PUSH
91208: LD_VAR 0 3
91212: ST_TO_ADDR
// for i := 1 to k do
91213: LD_ADDR_VAR 0 1
91217: PUSH
91218: DOUBLE
91219: LD_INT 1
91221: DEC
91222: ST_TO_ADDR
91223: LD_VAR 0 2
91227: PUSH
91228: FOR_TO
91229: IFFALSE 91328
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
91231: LD_VAR 0 3
91235: PUSH
91236: LD_VAR 0 1
91240: ARRAY
91241: PPUSH
91242: LD_VAR 0 1
91246: PUSH
91247: LD_INT 4
91249: MOD
91250: PUSH
91251: LD_INT 1
91253: PLUS
91254: PPUSH
91255: CALL_OW 259
91259: PUSH
91260: LD_INT 10
91262: LESS
91263: IFFALSE 91326
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
91265: LD_VAR 0 3
91269: PUSH
91270: LD_VAR 0 1
91274: ARRAY
91275: PPUSH
91276: LD_VAR 0 1
91280: PUSH
91281: LD_INT 4
91283: MOD
91284: PUSH
91285: LD_INT 1
91287: PLUS
91288: PPUSH
91289: LD_VAR 0 3
91293: PUSH
91294: LD_VAR 0 1
91298: ARRAY
91299: PPUSH
91300: LD_VAR 0 1
91304: PUSH
91305: LD_INT 4
91307: MOD
91308: PUSH
91309: LD_INT 1
91311: PLUS
91312: PPUSH
91313: CALL_OW 259
91317: PUSH
91318: LD_INT 1
91320: PLUS
91321: PPUSH
91322: CALL_OW 237
91326: GO 91228
91328: POP
91329: POP
// end ;
91330: PPOPN 3
91332: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
91333: LD_EXP 88
91337: PUSH
91338: LD_EXP 96
91342: AND
91343: IFFALSE 91363
91345: GO 91347
91347: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
91348: LD_INT 4
91350: PPUSH
91351: LD_OWVAR 2
91355: PPUSH
91356: LD_INT 0
91358: PPUSH
91359: CALL_OW 324
91363: END
// every 0 0$1 trigger StreamModeActive and sShovel do
91364: LD_EXP 88
91368: PUSH
91369: LD_EXP 125
91373: AND
91374: IFFALSE 91394
91376: GO 91378
91378: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
91379: LD_INT 19
91381: PPUSH
91382: LD_OWVAR 2
91386: PPUSH
91387: LD_INT 0
91389: PPUSH
91390: CALL_OW 324
91394: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
91395: LD_EXP 88
91399: PUSH
91400: LD_EXP 97
91404: AND
91405: IFFALSE 91507
91407: GO 91409
91409: DISABLE
91410: LD_INT 0
91412: PPUSH
91413: PPUSH
// begin enable ;
91414: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
91415: LD_ADDR_VAR 0 2
91419: PUSH
91420: LD_INT 22
91422: PUSH
91423: LD_OWVAR 2
91427: PUSH
91428: EMPTY
91429: LIST
91430: LIST
91431: PUSH
91432: LD_INT 2
91434: PUSH
91435: LD_INT 34
91437: PUSH
91438: LD_INT 11
91440: PUSH
91441: EMPTY
91442: LIST
91443: LIST
91444: PUSH
91445: LD_INT 34
91447: PUSH
91448: LD_INT 30
91450: PUSH
91451: EMPTY
91452: LIST
91453: LIST
91454: PUSH
91455: EMPTY
91456: LIST
91457: LIST
91458: LIST
91459: PUSH
91460: EMPTY
91461: LIST
91462: LIST
91463: PPUSH
91464: CALL_OW 69
91468: ST_TO_ADDR
// if not tmp then
91469: LD_VAR 0 2
91473: NOT
91474: IFFALSE 91478
// exit ;
91476: GO 91507
// for i in tmp do
91478: LD_ADDR_VAR 0 1
91482: PUSH
91483: LD_VAR 0 2
91487: PUSH
91488: FOR_IN
91489: IFFALSE 91505
// begin SetLives ( i , 0 ) ;
91491: LD_VAR 0 1
91495: PPUSH
91496: LD_INT 0
91498: PPUSH
91499: CALL_OW 234
// end ;
91503: GO 91488
91505: POP
91506: POP
// end ;
91507: PPOPN 2
91509: END
// every 0 0$1 trigger StreamModeActive and sBunker do
91510: LD_EXP 88
91514: PUSH
91515: LD_EXP 98
91519: AND
91520: IFFALSE 91540
91522: GO 91524
91524: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
91525: LD_INT 32
91527: PPUSH
91528: LD_OWVAR 2
91532: PPUSH
91533: LD_INT 0
91535: PPUSH
91536: CALL_OW 324
91540: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
91541: LD_EXP 88
91545: PUSH
91546: LD_EXP 99
91550: AND
91551: IFFALSE 91732
91553: GO 91555
91555: DISABLE
91556: LD_INT 0
91558: PPUSH
91559: PPUSH
91560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
91561: LD_ADDR_VAR 0 2
91565: PUSH
91566: LD_INT 22
91568: PUSH
91569: LD_OWVAR 2
91573: PUSH
91574: EMPTY
91575: LIST
91576: LIST
91577: PUSH
91578: LD_INT 33
91580: PUSH
91581: LD_INT 3
91583: PUSH
91584: EMPTY
91585: LIST
91586: LIST
91587: PUSH
91588: EMPTY
91589: LIST
91590: LIST
91591: PPUSH
91592: CALL_OW 69
91596: ST_TO_ADDR
// if not tmp then
91597: LD_VAR 0 2
91601: NOT
91602: IFFALSE 91606
// exit ;
91604: GO 91732
// side := 0 ;
91606: LD_ADDR_VAR 0 3
91610: PUSH
91611: LD_INT 0
91613: ST_TO_ADDR
// for i := 1 to 8 do
91614: LD_ADDR_VAR 0 1
91618: PUSH
91619: DOUBLE
91620: LD_INT 1
91622: DEC
91623: ST_TO_ADDR
91624: LD_INT 8
91626: PUSH
91627: FOR_TO
91628: IFFALSE 91676
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
91630: LD_OWVAR 2
91634: PUSH
91635: LD_VAR 0 1
91639: NONEQUAL
91640: PUSH
91641: LD_OWVAR 2
91645: PPUSH
91646: LD_VAR 0 1
91650: PPUSH
91651: CALL_OW 81
91655: PUSH
91656: LD_INT 2
91658: EQUAL
91659: AND
91660: IFFALSE 91674
// begin side := i ;
91662: LD_ADDR_VAR 0 3
91666: PUSH
91667: LD_VAR 0 1
91671: ST_TO_ADDR
// break ;
91672: GO 91676
// end ;
91674: GO 91627
91676: POP
91677: POP
// if not side then
91678: LD_VAR 0 3
91682: NOT
91683: IFFALSE 91687
// exit ;
91685: GO 91732
// for i := 1 to tmp do
91687: LD_ADDR_VAR 0 1
91691: PUSH
91692: DOUBLE
91693: LD_INT 1
91695: DEC
91696: ST_TO_ADDR
91697: LD_VAR 0 2
91701: PUSH
91702: FOR_TO
91703: IFFALSE 91730
// if Prob ( 60 ) then
91705: LD_INT 60
91707: PPUSH
91708: CALL_OW 13
91712: IFFALSE 91728
// SetSide ( i , side ) ;
91714: LD_VAR 0 1
91718: PPUSH
91719: LD_VAR 0 3
91723: PPUSH
91724: CALL_OW 235
91728: GO 91702
91730: POP
91731: POP
// end ;
91732: PPOPN 3
91734: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
91735: LD_EXP 88
91739: PUSH
91740: LD_EXP 101
91744: AND
91745: IFFALSE 91864
91747: GO 91749
91749: DISABLE
91750: LD_INT 0
91752: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
91753: LD_ADDR_VAR 0 1
91757: PUSH
91758: LD_INT 22
91760: PUSH
91761: LD_OWVAR 2
91765: PUSH
91766: EMPTY
91767: LIST
91768: LIST
91769: PUSH
91770: LD_INT 21
91772: PUSH
91773: LD_INT 1
91775: PUSH
91776: EMPTY
91777: LIST
91778: LIST
91779: PUSH
91780: LD_INT 3
91782: PUSH
91783: LD_INT 23
91785: PUSH
91786: LD_INT 0
91788: PUSH
91789: EMPTY
91790: LIST
91791: LIST
91792: PUSH
91793: EMPTY
91794: LIST
91795: LIST
91796: PUSH
91797: EMPTY
91798: LIST
91799: LIST
91800: LIST
91801: PPUSH
91802: CALL_OW 69
91806: PUSH
91807: FOR_IN
91808: IFFALSE 91862
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
91810: LD_VAR 0 1
91814: PPUSH
91815: CALL_OW 257
91819: PUSH
91820: LD_INT 1
91822: PUSH
91823: LD_INT 2
91825: PUSH
91826: LD_INT 3
91828: PUSH
91829: LD_INT 4
91831: PUSH
91832: EMPTY
91833: LIST
91834: LIST
91835: LIST
91836: LIST
91837: IN
91838: IFFALSE 91860
// SetClass ( un , rand ( 1 , 4 ) ) ;
91840: LD_VAR 0 1
91844: PPUSH
91845: LD_INT 1
91847: PPUSH
91848: LD_INT 4
91850: PPUSH
91851: CALL_OW 12
91855: PPUSH
91856: CALL_OW 336
91860: GO 91807
91862: POP
91863: POP
// end ;
91864: PPOPN 1
91866: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
91867: LD_EXP 88
91871: PUSH
91872: LD_EXP 100
91876: AND
91877: IFFALSE 91956
91879: GO 91881
91881: DISABLE
91882: LD_INT 0
91884: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
91885: LD_ADDR_VAR 0 1
91889: PUSH
91890: LD_INT 22
91892: PUSH
91893: LD_OWVAR 2
91897: PUSH
91898: EMPTY
91899: LIST
91900: LIST
91901: PUSH
91902: LD_INT 21
91904: PUSH
91905: LD_INT 3
91907: PUSH
91908: EMPTY
91909: LIST
91910: LIST
91911: PUSH
91912: EMPTY
91913: LIST
91914: LIST
91915: PPUSH
91916: CALL_OW 69
91920: ST_TO_ADDR
// if not tmp then
91921: LD_VAR 0 1
91925: NOT
91926: IFFALSE 91930
// exit ;
91928: GO 91956
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
91930: LD_VAR 0 1
91934: PUSH
91935: LD_INT 1
91937: PPUSH
91938: LD_VAR 0 1
91942: PPUSH
91943: CALL_OW 12
91947: ARRAY
91948: PPUSH
91949: LD_INT 100
91951: PPUSH
91952: CALL_OW 234
// end ;
91956: PPOPN 1
91958: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
91959: LD_EXP 88
91963: PUSH
91964: LD_EXP 102
91968: AND
91969: IFFALSE 92067
91971: GO 91973
91973: DISABLE
91974: LD_INT 0
91976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
91977: LD_ADDR_VAR 0 1
91981: PUSH
91982: LD_INT 22
91984: PUSH
91985: LD_OWVAR 2
91989: PUSH
91990: EMPTY
91991: LIST
91992: LIST
91993: PUSH
91994: LD_INT 21
91996: PUSH
91997: LD_INT 1
91999: PUSH
92000: EMPTY
92001: LIST
92002: LIST
92003: PUSH
92004: EMPTY
92005: LIST
92006: LIST
92007: PPUSH
92008: CALL_OW 69
92012: ST_TO_ADDR
// if not tmp then
92013: LD_VAR 0 1
92017: NOT
92018: IFFALSE 92022
// exit ;
92020: GO 92067
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
92022: LD_VAR 0 1
92026: PUSH
92027: LD_INT 1
92029: PPUSH
92030: LD_VAR 0 1
92034: PPUSH
92035: CALL_OW 12
92039: ARRAY
92040: PPUSH
92041: LD_INT 1
92043: PPUSH
92044: LD_INT 4
92046: PPUSH
92047: CALL_OW 12
92051: PPUSH
92052: LD_INT 3000
92054: PPUSH
92055: LD_INT 9000
92057: PPUSH
92058: CALL_OW 12
92062: PPUSH
92063: CALL_OW 492
// end ;
92067: PPOPN 1
92069: END
// every 0 0$1 trigger StreamModeActive and sDepot do
92070: LD_EXP 88
92074: PUSH
92075: LD_EXP 103
92079: AND
92080: IFFALSE 92100
92082: GO 92084
92084: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
92085: LD_INT 1
92087: PPUSH
92088: LD_OWVAR 2
92092: PPUSH
92093: LD_INT 0
92095: PPUSH
92096: CALL_OW 324
92100: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
92101: LD_EXP 88
92105: PUSH
92106: LD_EXP 104
92110: AND
92111: IFFALSE 92194
92113: GO 92115
92115: DISABLE
92116: LD_INT 0
92118: PPUSH
92119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
92120: LD_ADDR_VAR 0 2
92124: PUSH
92125: LD_INT 22
92127: PUSH
92128: LD_OWVAR 2
92132: PUSH
92133: EMPTY
92134: LIST
92135: LIST
92136: PUSH
92137: LD_INT 21
92139: PUSH
92140: LD_INT 3
92142: PUSH
92143: EMPTY
92144: LIST
92145: LIST
92146: PUSH
92147: EMPTY
92148: LIST
92149: LIST
92150: PPUSH
92151: CALL_OW 69
92155: ST_TO_ADDR
// if not tmp then
92156: LD_VAR 0 2
92160: NOT
92161: IFFALSE 92165
// exit ;
92163: GO 92194
// for i in tmp do
92165: LD_ADDR_VAR 0 1
92169: PUSH
92170: LD_VAR 0 2
92174: PUSH
92175: FOR_IN
92176: IFFALSE 92192
// SetBLevel ( i , 10 ) ;
92178: LD_VAR 0 1
92182: PPUSH
92183: LD_INT 10
92185: PPUSH
92186: CALL_OW 241
92190: GO 92175
92192: POP
92193: POP
// end ;
92194: PPOPN 2
92196: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
92197: LD_EXP 88
92201: PUSH
92202: LD_EXP 105
92206: AND
92207: IFFALSE 92318
92209: GO 92211
92211: DISABLE
92212: LD_INT 0
92214: PPUSH
92215: PPUSH
92216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
92217: LD_ADDR_VAR 0 3
92221: PUSH
92222: LD_INT 22
92224: PUSH
92225: LD_OWVAR 2
92229: PUSH
92230: EMPTY
92231: LIST
92232: LIST
92233: PUSH
92234: LD_INT 25
92236: PUSH
92237: LD_INT 1
92239: PUSH
92240: EMPTY
92241: LIST
92242: LIST
92243: PUSH
92244: EMPTY
92245: LIST
92246: LIST
92247: PPUSH
92248: CALL_OW 69
92252: ST_TO_ADDR
// if not tmp then
92253: LD_VAR 0 3
92257: NOT
92258: IFFALSE 92262
// exit ;
92260: GO 92318
// un := tmp [ rand ( 1 , tmp ) ] ;
92262: LD_ADDR_VAR 0 2
92266: PUSH
92267: LD_VAR 0 3
92271: PUSH
92272: LD_INT 1
92274: PPUSH
92275: LD_VAR 0 3
92279: PPUSH
92280: CALL_OW 12
92284: ARRAY
92285: ST_TO_ADDR
// if Crawls ( un ) then
92286: LD_VAR 0 2
92290: PPUSH
92291: CALL_OW 318
92295: IFFALSE 92306
// ComWalk ( un ) ;
92297: LD_VAR 0 2
92301: PPUSH
92302: CALL_OW 138
// SetClass ( un , class_sniper ) ;
92306: LD_VAR 0 2
92310: PPUSH
92311: LD_INT 5
92313: PPUSH
92314: CALL_OW 336
// end ;
92318: PPOPN 3
92320: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
92321: LD_EXP 88
92325: PUSH
92326: LD_EXP 106
92330: AND
92331: PUSH
92332: LD_OWVAR 67
92336: PUSH
92337: LD_INT 3
92339: LESS
92340: AND
92341: IFFALSE 92360
92343: GO 92345
92345: DISABLE
// Difficulty := Difficulty + 1 ;
92346: LD_ADDR_OWVAR 67
92350: PUSH
92351: LD_OWVAR 67
92355: PUSH
92356: LD_INT 1
92358: PLUS
92359: ST_TO_ADDR
92360: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
92361: LD_EXP 88
92365: PUSH
92366: LD_EXP 107
92370: AND
92371: IFFALSE 92474
92373: GO 92375
92375: DISABLE
92376: LD_INT 0
92378: PPUSH
// begin for i := 1 to 5 do
92379: LD_ADDR_VAR 0 1
92383: PUSH
92384: DOUBLE
92385: LD_INT 1
92387: DEC
92388: ST_TO_ADDR
92389: LD_INT 5
92391: PUSH
92392: FOR_TO
92393: IFFALSE 92472
// begin uc_nation := nation_nature ;
92395: LD_ADDR_OWVAR 21
92399: PUSH
92400: LD_INT 0
92402: ST_TO_ADDR
// uc_side := 0 ;
92403: LD_ADDR_OWVAR 20
92407: PUSH
92408: LD_INT 0
92410: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
92411: LD_ADDR_OWVAR 29
92415: PUSH
92416: LD_INT 12
92418: PUSH
92419: LD_INT 12
92421: PUSH
92422: EMPTY
92423: LIST
92424: LIST
92425: ST_TO_ADDR
// hc_agressivity := 20 ;
92426: LD_ADDR_OWVAR 35
92430: PUSH
92431: LD_INT 20
92433: ST_TO_ADDR
// hc_class := class_tiger ;
92434: LD_ADDR_OWVAR 28
92438: PUSH
92439: LD_INT 14
92441: ST_TO_ADDR
// hc_gallery :=  ;
92442: LD_ADDR_OWVAR 33
92446: PUSH
92447: LD_STRING 
92449: ST_TO_ADDR
// hc_name :=  ;
92450: LD_ADDR_OWVAR 26
92454: PUSH
92455: LD_STRING 
92457: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
92458: CALL_OW 44
92462: PPUSH
92463: LD_INT 0
92465: PPUSH
92466: CALL_OW 51
// end ;
92470: GO 92392
92472: POP
92473: POP
// end ;
92474: PPOPN 1
92476: END
// every 0 0$1 trigger StreamModeActive and sBomb do
92477: LD_EXP 88
92481: PUSH
92482: LD_EXP 108
92486: AND
92487: IFFALSE 92496
92489: GO 92491
92491: DISABLE
// StreamSibBomb ;
92492: CALL 92497 0 0
92496: END
// export function StreamSibBomb ; var i , x , y ; begin
92497: LD_INT 0
92499: PPUSH
92500: PPUSH
92501: PPUSH
92502: PPUSH
// result := false ;
92503: LD_ADDR_VAR 0 1
92507: PUSH
92508: LD_INT 0
92510: ST_TO_ADDR
// for i := 1 to 16 do
92511: LD_ADDR_VAR 0 2
92515: PUSH
92516: DOUBLE
92517: LD_INT 1
92519: DEC
92520: ST_TO_ADDR
92521: LD_INT 16
92523: PUSH
92524: FOR_TO
92525: IFFALSE 92724
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
92527: LD_ADDR_VAR 0 3
92531: PUSH
92532: LD_INT 10
92534: PUSH
92535: LD_INT 20
92537: PUSH
92538: LD_INT 30
92540: PUSH
92541: LD_INT 40
92543: PUSH
92544: LD_INT 50
92546: PUSH
92547: LD_INT 60
92549: PUSH
92550: LD_INT 70
92552: PUSH
92553: LD_INT 80
92555: PUSH
92556: LD_INT 90
92558: PUSH
92559: LD_INT 100
92561: PUSH
92562: LD_INT 110
92564: PUSH
92565: LD_INT 120
92567: PUSH
92568: LD_INT 130
92570: PUSH
92571: LD_INT 140
92573: PUSH
92574: LD_INT 150
92576: PUSH
92577: EMPTY
92578: LIST
92579: LIST
92580: LIST
92581: LIST
92582: LIST
92583: LIST
92584: LIST
92585: LIST
92586: LIST
92587: LIST
92588: LIST
92589: LIST
92590: LIST
92591: LIST
92592: LIST
92593: PUSH
92594: LD_INT 1
92596: PPUSH
92597: LD_INT 15
92599: PPUSH
92600: CALL_OW 12
92604: ARRAY
92605: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
92606: LD_ADDR_VAR 0 4
92610: PUSH
92611: LD_INT 10
92613: PUSH
92614: LD_INT 20
92616: PUSH
92617: LD_INT 30
92619: PUSH
92620: LD_INT 40
92622: PUSH
92623: LD_INT 50
92625: PUSH
92626: LD_INT 60
92628: PUSH
92629: LD_INT 70
92631: PUSH
92632: LD_INT 80
92634: PUSH
92635: LD_INT 90
92637: PUSH
92638: LD_INT 100
92640: PUSH
92641: LD_INT 110
92643: PUSH
92644: LD_INT 120
92646: PUSH
92647: LD_INT 130
92649: PUSH
92650: LD_INT 140
92652: PUSH
92653: LD_INT 150
92655: PUSH
92656: EMPTY
92657: LIST
92658: LIST
92659: LIST
92660: LIST
92661: LIST
92662: LIST
92663: LIST
92664: LIST
92665: LIST
92666: LIST
92667: LIST
92668: LIST
92669: LIST
92670: LIST
92671: LIST
92672: PUSH
92673: LD_INT 1
92675: PPUSH
92676: LD_INT 15
92678: PPUSH
92679: CALL_OW 12
92683: ARRAY
92684: ST_TO_ADDR
// if ValidHex ( x , y ) then
92685: LD_VAR 0 3
92689: PPUSH
92690: LD_VAR 0 4
92694: PPUSH
92695: CALL_OW 488
92699: IFFALSE 92722
// begin result := [ x , y ] ;
92701: LD_ADDR_VAR 0 1
92705: PUSH
92706: LD_VAR 0 3
92710: PUSH
92711: LD_VAR 0 4
92715: PUSH
92716: EMPTY
92717: LIST
92718: LIST
92719: ST_TO_ADDR
// break ;
92720: GO 92724
// end ; end ;
92722: GO 92524
92724: POP
92725: POP
// if result then
92726: LD_VAR 0 1
92730: IFFALSE 92790
// begin ToLua ( playSibBomb() ) ;
92732: LD_STRING playSibBomb()
92734: PPUSH
92735: CALL_OW 559
// wait ( 0 0$14 ) ;
92739: LD_INT 490
92741: PPUSH
92742: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
92746: LD_VAR 0 1
92750: PUSH
92751: LD_INT 1
92753: ARRAY
92754: PPUSH
92755: LD_VAR 0 1
92759: PUSH
92760: LD_INT 2
92762: ARRAY
92763: PPUSH
92764: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
92768: LD_VAR 0 1
92772: PUSH
92773: LD_INT 1
92775: ARRAY
92776: PPUSH
92777: LD_VAR 0 1
92781: PUSH
92782: LD_INT 2
92784: ARRAY
92785: PPUSH
92786: CALL_OW 429
// end ; end ;
92790: LD_VAR 0 1
92794: RET
// every 0 0$1 trigger StreamModeActive and sReset do
92795: LD_EXP 88
92799: PUSH
92800: LD_EXP 110
92804: AND
92805: IFFALSE 92817
92807: GO 92809
92809: DISABLE
// YouLost (  ) ;
92810: LD_STRING 
92812: PPUSH
92813: CALL_OW 104
92817: END
// every 0 0$1 trigger StreamModeActive and sFog do
92818: LD_EXP 88
92822: PUSH
92823: LD_EXP 109
92827: AND
92828: IFFALSE 92842
92830: GO 92832
92832: DISABLE
// FogOff ( your_side ) ;
92833: LD_OWVAR 2
92837: PPUSH
92838: CALL_OW 344
92842: END
// every 0 0$1 trigger StreamModeActive and sSun do
92843: LD_EXP 88
92847: PUSH
92848: LD_EXP 111
92852: AND
92853: IFFALSE 92881
92855: GO 92857
92857: DISABLE
// begin solar_recharge_percent := 0 ;
92858: LD_ADDR_OWVAR 79
92862: PUSH
92863: LD_INT 0
92865: ST_TO_ADDR
// wait ( 5 5$00 ) ;
92866: LD_INT 10500
92868: PPUSH
92869: CALL_OW 67
// solar_recharge_percent := 100 ;
92873: LD_ADDR_OWVAR 79
92877: PUSH
92878: LD_INT 100
92880: ST_TO_ADDR
// end ;
92881: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
92882: LD_EXP 88
92886: PUSH
92887: LD_EXP 112
92891: AND
92892: IFFALSE 93131
92894: GO 92896
92896: DISABLE
92897: LD_INT 0
92899: PPUSH
92900: PPUSH
92901: PPUSH
// begin tmp := [ ] ;
92902: LD_ADDR_VAR 0 3
92906: PUSH
92907: EMPTY
92908: ST_TO_ADDR
// for i := 1 to 6 do
92909: LD_ADDR_VAR 0 1
92913: PUSH
92914: DOUBLE
92915: LD_INT 1
92917: DEC
92918: ST_TO_ADDR
92919: LD_INT 6
92921: PUSH
92922: FOR_TO
92923: IFFALSE 93028
// begin uc_nation := nation_nature ;
92925: LD_ADDR_OWVAR 21
92929: PUSH
92930: LD_INT 0
92932: ST_TO_ADDR
// uc_side := 0 ;
92933: LD_ADDR_OWVAR 20
92937: PUSH
92938: LD_INT 0
92940: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
92941: LD_ADDR_OWVAR 29
92945: PUSH
92946: LD_INT 12
92948: PUSH
92949: LD_INT 12
92951: PUSH
92952: EMPTY
92953: LIST
92954: LIST
92955: ST_TO_ADDR
// hc_agressivity := 20 ;
92956: LD_ADDR_OWVAR 35
92960: PUSH
92961: LD_INT 20
92963: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
92964: LD_ADDR_OWVAR 28
92968: PUSH
92969: LD_INT 17
92971: ST_TO_ADDR
// hc_gallery :=  ;
92972: LD_ADDR_OWVAR 33
92976: PUSH
92977: LD_STRING 
92979: ST_TO_ADDR
// hc_name :=  ;
92980: LD_ADDR_OWVAR 26
92984: PUSH
92985: LD_STRING 
92987: ST_TO_ADDR
// un := CreateHuman ;
92988: LD_ADDR_VAR 0 2
92992: PUSH
92993: CALL_OW 44
92997: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
92998: LD_VAR 0 2
93002: PPUSH
93003: LD_INT 1
93005: PPUSH
93006: CALL_OW 51
// tmp := tmp ^ un ;
93010: LD_ADDR_VAR 0 3
93014: PUSH
93015: LD_VAR 0 3
93019: PUSH
93020: LD_VAR 0 2
93024: ADD
93025: ST_TO_ADDR
// end ;
93026: GO 92922
93028: POP
93029: POP
// repeat wait ( 0 0$1 ) ;
93030: LD_INT 35
93032: PPUSH
93033: CALL_OW 67
// for un in tmp do
93037: LD_ADDR_VAR 0 2
93041: PUSH
93042: LD_VAR 0 3
93046: PUSH
93047: FOR_IN
93048: IFFALSE 93122
// begin if IsDead ( un ) then
93050: LD_VAR 0 2
93054: PPUSH
93055: CALL_OW 301
93059: IFFALSE 93079
// begin tmp := tmp diff un ;
93061: LD_ADDR_VAR 0 3
93065: PUSH
93066: LD_VAR 0 3
93070: PUSH
93071: LD_VAR 0 2
93075: DIFF
93076: ST_TO_ADDR
// continue ;
93077: GO 93047
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
93079: LD_VAR 0 2
93083: PPUSH
93084: LD_INT 3
93086: PUSH
93087: LD_INT 22
93089: PUSH
93090: LD_INT 0
93092: PUSH
93093: EMPTY
93094: LIST
93095: LIST
93096: PUSH
93097: EMPTY
93098: LIST
93099: LIST
93100: PPUSH
93101: CALL_OW 69
93105: PPUSH
93106: LD_VAR 0 2
93110: PPUSH
93111: CALL_OW 74
93115: PPUSH
93116: CALL_OW 115
// end ;
93120: GO 93047
93122: POP
93123: POP
// until not tmp ;
93124: LD_VAR 0 3
93128: NOT
93129: IFFALSE 93030
// end ;
93131: PPOPN 3
93133: END
// every 0 0$1 trigger StreamModeActive and sTroll do
93134: LD_EXP 88
93138: PUSH
93139: LD_EXP 113
93143: AND
93144: IFFALSE 93198
93146: GO 93148
93148: DISABLE
// begin ToLua ( displayTroll(); ) ;
93149: LD_STRING displayTroll();
93151: PPUSH
93152: CALL_OW 559
// wait ( 3 3$00 ) ;
93156: LD_INT 6300
93158: PPUSH
93159: CALL_OW 67
// ToLua ( hideTroll(); ) ;
93163: LD_STRING hideTroll();
93165: PPUSH
93166: CALL_OW 559
// wait ( 1 1$00 ) ;
93170: LD_INT 2100
93172: PPUSH
93173: CALL_OW 67
// ToLua ( displayTroll(); ) ;
93177: LD_STRING displayTroll();
93179: PPUSH
93180: CALL_OW 559
// wait ( 1 1$00 ) ;
93184: LD_INT 2100
93186: PPUSH
93187: CALL_OW 67
// ToLua ( hideTroll(); ) ;
93191: LD_STRING hideTroll();
93193: PPUSH
93194: CALL_OW 559
// end ;
93198: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
93199: LD_EXP 88
93203: PUSH
93204: LD_EXP 114
93208: AND
93209: IFFALSE 93272
93211: GO 93213
93213: DISABLE
93214: LD_INT 0
93216: PPUSH
// begin p := 0 ;
93217: LD_ADDR_VAR 0 1
93221: PUSH
93222: LD_INT 0
93224: ST_TO_ADDR
// repeat game_speed := 1 ;
93225: LD_ADDR_OWVAR 65
93229: PUSH
93230: LD_INT 1
93232: ST_TO_ADDR
// wait ( 0 0$1 ) ;
93233: LD_INT 35
93235: PPUSH
93236: CALL_OW 67
// p := p + 1 ;
93240: LD_ADDR_VAR 0 1
93244: PUSH
93245: LD_VAR 0 1
93249: PUSH
93250: LD_INT 1
93252: PLUS
93253: ST_TO_ADDR
// until p >= 60 ;
93254: LD_VAR 0 1
93258: PUSH
93259: LD_INT 60
93261: GREATEREQUAL
93262: IFFALSE 93225
// game_speed := 4 ;
93264: LD_ADDR_OWVAR 65
93268: PUSH
93269: LD_INT 4
93271: ST_TO_ADDR
// end ;
93272: PPOPN 1
93274: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
93275: LD_EXP 88
93279: PUSH
93280: LD_EXP 115
93284: AND
93285: IFFALSE 93431
93287: GO 93289
93289: DISABLE
93290: LD_INT 0
93292: PPUSH
93293: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
93294: LD_ADDR_VAR 0 1
93298: PUSH
93299: LD_INT 22
93301: PUSH
93302: LD_OWVAR 2
93306: PUSH
93307: EMPTY
93308: LIST
93309: LIST
93310: PUSH
93311: LD_INT 2
93313: PUSH
93314: LD_INT 30
93316: PUSH
93317: LD_INT 0
93319: PUSH
93320: EMPTY
93321: LIST
93322: LIST
93323: PUSH
93324: LD_INT 30
93326: PUSH
93327: LD_INT 1
93329: PUSH
93330: EMPTY
93331: LIST
93332: LIST
93333: PUSH
93334: EMPTY
93335: LIST
93336: LIST
93337: LIST
93338: PUSH
93339: EMPTY
93340: LIST
93341: LIST
93342: PPUSH
93343: CALL_OW 69
93347: ST_TO_ADDR
// if not depot then
93348: LD_VAR 0 1
93352: NOT
93353: IFFALSE 93357
// exit ;
93355: GO 93431
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
93357: LD_ADDR_VAR 0 2
93361: PUSH
93362: LD_VAR 0 1
93366: PUSH
93367: LD_INT 1
93369: PPUSH
93370: LD_VAR 0 1
93374: PPUSH
93375: CALL_OW 12
93379: ARRAY
93380: PPUSH
93381: CALL_OW 274
93385: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
93386: LD_VAR 0 2
93390: PPUSH
93391: LD_INT 1
93393: PPUSH
93394: LD_INT 0
93396: PPUSH
93397: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
93401: LD_VAR 0 2
93405: PPUSH
93406: LD_INT 2
93408: PPUSH
93409: LD_INT 0
93411: PPUSH
93412: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
93416: LD_VAR 0 2
93420: PPUSH
93421: LD_INT 3
93423: PPUSH
93424: LD_INT 0
93426: PPUSH
93427: CALL_OW 277
// end ;
93431: PPOPN 2
93433: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
93434: LD_EXP 88
93438: PUSH
93439: LD_EXP 116
93443: AND
93444: IFFALSE 93541
93446: GO 93448
93448: DISABLE
93449: LD_INT 0
93451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
93452: LD_ADDR_VAR 0 1
93456: PUSH
93457: LD_INT 22
93459: PUSH
93460: LD_OWVAR 2
93464: PUSH
93465: EMPTY
93466: LIST
93467: LIST
93468: PUSH
93469: LD_INT 21
93471: PUSH
93472: LD_INT 1
93474: PUSH
93475: EMPTY
93476: LIST
93477: LIST
93478: PUSH
93479: LD_INT 3
93481: PUSH
93482: LD_INT 23
93484: PUSH
93485: LD_INT 0
93487: PUSH
93488: EMPTY
93489: LIST
93490: LIST
93491: PUSH
93492: EMPTY
93493: LIST
93494: LIST
93495: PUSH
93496: EMPTY
93497: LIST
93498: LIST
93499: LIST
93500: PPUSH
93501: CALL_OW 69
93505: ST_TO_ADDR
// if not tmp then
93506: LD_VAR 0 1
93510: NOT
93511: IFFALSE 93515
// exit ;
93513: GO 93541
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
93515: LD_VAR 0 1
93519: PUSH
93520: LD_INT 1
93522: PPUSH
93523: LD_VAR 0 1
93527: PPUSH
93528: CALL_OW 12
93532: ARRAY
93533: PPUSH
93534: LD_INT 200
93536: PPUSH
93537: CALL_OW 234
// end ;
93541: PPOPN 1
93543: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
93544: LD_EXP 88
93548: PUSH
93549: LD_EXP 117
93553: AND
93554: IFFALSE 93633
93556: GO 93558
93558: DISABLE
93559: LD_INT 0
93561: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
93562: LD_ADDR_VAR 0 1
93566: PUSH
93567: LD_INT 22
93569: PUSH
93570: LD_OWVAR 2
93574: PUSH
93575: EMPTY
93576: LIST
93577: LIST
93578: PUSH
93579: LD_INT 21
93581: PUSH
93582: LD_INT 2
93584: PUSH
93585: EMPTY
93586: LIST
93587: LIST
93588: PUSH
93589: EMPTY
93590: LIST
93591: LIST
93592: PPUSH
93593: CALL_OW 69
93597: ST_TO_ADDR
// if not tmp then
93598: LD_VAR 0 1
93602: NOT
93603: IFFALSE 93607
// exit ;
93605: GO 93633
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
93607: LD_VAR 0 1
93611: PUSH
93612: LD_INT 1
93614: PPUSH
93615: LD_VAR 0 1
93619: PPUSH
93620: CALL_OW 12
93624: ARRAY
93625: PPUSH
93626: LD_INT 60
93628: PPUSH
93629: CALL_OW 234
// end ;
93633: PPOPN 1
93635: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
93636: LD_EXP 88
93640: PUSH
93641: LD_EXP 118
93645: AND
93646: IFFALSE 93745
93648: GO 93650
93650: DISABLE
93651: LD_INT 0
93653: PPUSH
93654: PPUSH
// begin enable ;
93655: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
93656: LD_ADDR_VAR 0 1
93660: PUSH
93661: LD_INT 22
93663: PUSH
93664: LD_OWVAR 2
93668: PUSH
93669: EMPTY
93670: LIST
93671: LIST
93672: PUSH
93673: LD_INT 61
93675: PUSH
93676: EMPTY
93677: LIST
93678: PUSH
93679: LD_INT 33
93681: PUSH
93682: LD_INT 2
93684: PUSH
93685: EMPTY
93686: LIST
93687: LIST
93688: PUSH
93689: EMPTY
93690: LIST
93691: LIST
93692: LIST
93693: PPUSH
93694: CALL_OW 69
93698: ST_TO_ADDR
// if not tmp then
93699: LD_VAR 0 1
93703: NOT
93704: IFFALSE 93708
// exit ;
93706: GO 93745
// for i in tmp do
93708: LD_ADDR_VAR 0 2
93712: PUSH
93713: LD_VAR 0 1
93717: PUSH
93718: FOR_IN
93719: IFFALSE 93743
// if IsControledBy ( i ) then
93721: LD_VAR 0 2
93725: PPUSH
93726: CALL_OW 312
93730: IFFALSE 93741
// ComUnlink ( i ) ;
93732: LD_VAR 0 2
93736: PPUSH
93737: CALL_OW 136
93741: GO 93718
93743: POP
93744: POP
// end ;
93745: PPOPN 2
93747: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
93748: LD_EXP 88
93752: PUSH
93753: LD_EXP 119
93757: AND
93758: IFFALSE 93898
93760: GO 93762
93762: DISABLE
93763: LD_INT 0
93765: PPUSH
93766: PPUSH
// begin ToLua ( displayPowell(); ) ;
93767: LD_STRING displayPowell();
93769: PPUSH
93770: CALL_OW 559
// uc_side := 0 ;
93774: LD_ADDR_OWVAR 20
93778: PUSH
93779: LD_INT 0
93781: ST_TO_ADDR
// uc_nation := 2 ;
93782: LD_ADDR_OWVAR 21
93786: PUSH
93787: LD_INT 2
93789: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
93790: LD_ADDR_OWVAR 37
93794: PUSH
93795: LD_INT 14
93797: ST_TO_ADDR
// vc_engine := engine_siberite ;
93798: LD_ADDR_OWVAR 39
93802: PUSH
93803: LD_INT 3
93805: ST_TO_ADDR
// vc_control := control_apeman ;
93806: LD_ADDR_OWVAR 38
93810: PUSH
93811: LD_INT 5
93813: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
93814: LD_ADDR_OWVAR 40
93818: PUSH
93819: LD_INT 29
93821: ST_TO_ADDR
// un := CreateVehicle ;
93822: LD_ADDR_VAR 0 2
93826: PUSH
93827: CALL_OW 45
93831: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
93832: LD_VAR 0 2
93836: PPUSH
93837: LD_INT 1
93839: PPUSH
93840: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
93844: LD_INT 35
93846: PPUSH
93847: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
93851: LD_VAR 0 2
93855: PPUSH
93856: LD_INT 22
93858: PUSH
93859: LD_OWVAR 2
93863: PUSH
93864: EMPTY
93865: LIST
93866: LIST
93867: PPUSH
93868: CALL_OW 69
93872: PPUSH
93873: LD_VAR 0 2
93877: PPUSH
93878: CALL_OW 74
93882: PPUSH
93883: CALL_OW 115
// until IsDead ( un ) ;
93887: LD_VAR 0 2
93891: PPUSH
93892: CALL_OW 301
93896: IFFALSE 93844
// end ;
93898: PPOPN 2
93900: END
// every 0 0$1 trigger StreamModeActive and sStu do
93901: LD_EXP 88
93905: PUSH
93906: LD_EXP 127
93910: AND
93911: IFFALSE 93927
93913: GO 93915
93915: DISABLE
// begin ToLua ( displayStucuk(); ) ;
93916: LD_STRING displayStucuk();
93918: PPUSH
93919: CALL_OW 559
// ResetFog ;
93923: CALL_OW 335
// end ;
93927: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
93928: LD_EXP 88
93932: PUSH
93933: LD_EXP 120
93937: AND
93938: IFFALSE 94079
93940: GO 93942
93942: DISABLE
93943: LD_INT 0
93945: PPUSH
93946: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
93947: LD_ADDR_VAR 0 2
93951: PUSH
93952: LD_INT 22
93954: PUSH
93955: LD_OWVAR 2
93959: PUSH
93960: EMPTY
93961: LIST
93962: LIST
93963: PUSH
93964: LD_INT 21
93966: PUSH
93967: LD_INT 1
93969: PUSH
93970: EMPTY
93971: LIST
93972: LIST
93973: PUSH
93974: EMPTY
93975: LIST
93976: LIST
93977: PPUSH
93978: CALL_OW 69
93982: ST_TO_ADDR
// if not tmp then
93983: LD_VAR 0 2
93987: NOT
93988: IFFALSE 93992
// exit ;
93990: GO 94079
// un := tmp [ rand ( 1 , tmp ) ] ;
93992: LD_ADDR_VAR 0 1
93996: PUSH
93997: LD_VAR 0 2
94001: PUSH
94002: LD_INT 1
94004: PPUSH
94005: LD_VAR 0 2
94009: PPUSH
94010: CALL_OW 12
94014: ARRAY
94015: ST_TO_ADDR
// SetSide ( un , 0 ) ;
94016: LD_VAR 0 1
94020: PPUSH
94021: LD_INT 0
94023: PPUSH
94024: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
94028: LD_VAR 0 1
94032: PPUSH
94033: LD_OWVAR 3
94037: PUSH
94038: LD_VAR 0 1
94042: DIFF
94043: PPUSH
94044: LD_VAR 0 1
94048: PPUSH
94049: CALL_OW 74
94053: PPUSH
94054: CALL_OW 115
// wait ( 0 0$20 ) ;
94058: LD_INT 700
94060: PPUSH
94061: CALL_OW 67
// SetSide ( un , your_side ) ;
94065: LD_VAR 0 1
94069: PPUSH
94070: LD_OWVAR 2
94074: PPUSH
94075: CALL_OW 235
// end ;
94079: PPOPN 2
94081: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
94082: LD_EXP 88
94086: PUSH
94087: LD_EXP 121
94091: AND
94092: IFFALSE 94198
94094: GO 94096
94096: DISABLE
94097: LD_INT 0
94099: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
94100: LD_ADDR_VAR 0 1
94104: PUSH
94105: LD_INT 22
94107: PUSH
94108: LD_OWVAR 2
94112: PUSH
94113: EMPTY
94114: LIST
94115: LIST
94116: PUSH
94117: LD_INT 2
94119: PUSH
94120: LD_INT 30
94122: PUSH
94123: LD_INT 0
94125: PUSH
94126: EMPTY
94127: LIST
94128: LIST
94129: PUSH
94130: LD_INT 30
94132: PUSH
94133: LD_INT 1
94135: PUSH
94136: EMPTY
94137: LIST
94138: LIST
94139: PUSH
94140: EMPTY
94141: LIST
94142: LIST
94143: LIST
94144: PUSH
94145: EMPTY
94146: LIST
94147: LIST
94148: PPUSH
94149: CALL_OW 69
94153: ST_TO_ADDR
// if not depot then
94154: LD_VAR 0 1
94158: NOT
94159: IFFALSE 94163
// exit ;
94161: GO 94198
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
94163: LD_VAR 0 1
94167: PUSH
94168: LD_INT 1
94170: ARRAY
94171: PPUSH
94172: CALL_OW 250
94176: PPUSH
94177: LD_VAR 0 1
94181: PUSH
94182: LD_INT 1
94184: ARRAY
94185: PPUSH
94186: CALL_OW 251
94190: PPUSH
94191: LD_INT 70
94193: PPUSH
94194: CALL_OW 495
// end ;
94198: PPOPN 1
94200: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
94201: LD_EXP 88
94205: PUSH
94206: LD_EXP 122
94210: AND
94211: IFFALSE 94422
94213: GO 94215
94215: DISABLE
94216: LD_INT 0
94218: PPUSH
94219: PPUSH
94220: PPUSH
94221: PPUSH
94222: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
94223: LD_ADDR_VAR 0 5
94227: PUSH
94228: LD_INT 22
94230: PUSH
94231: LD_OWVAR 2
94235: PUSH
94236: EMPTY
94237: LIST
94238: LIST
94239: PUSH
94240: LD_INT 21
94242: PUSH
94243: LD_INT 1
94245: PUSH
94246: EMPTY
94247: LIST
94248: LIST
94249: PUSH
94250: EMPTY
94251: LIST
94252: LIST
94253: PPUSH
94254: CALL_OW 69
94258: ST_TO_ADDR
// if not tmp then
94259: LD_VAR 0 5
94263: NOT
94264: IFFALSE 94268
// exit ;
94266: GO 94422
// for i in tmp do
94268: LD_ADDR_VAR 0 1
94272: PUSH
94273: LD_VAR 0 5
94277: PUSH
94278: FOR_IN
94279: IFFALSE 94420
// begin d := rand ( 0 , 5 ) ;
94281: LD_ADDR_VAR 0 4
94285: PUSH
94286: LD_INT 0
94288: PPUSH
94289: LD_INT 5
94291: PPUSH
94292: CALL_OW 12
94296: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
94297: LD_ADDR_VAR 0 2
94301: PUSH
94302: LD_VAR 0 1
94306: PPUSH
94307: CALL_OW 250
94311: PPUSH
94312: LD_VAR 0 4
94316: PPUSH
94317: LD_INT 3
94319: PPUSH
94320: LD_INT 12
94322: PPUSH
94323: CALL_OW 12
94327: PPUSH
94328: CALL_OW 272
94332: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
94333: LD_ADDR_VAR 0 3
94337: PUSH
94338: LD_VAR 0 1
94342: PPUSH
94343: CALL_OW 251
94347: PPUSH
94348: LD_VAR 0 4
94352: PPUSH
94353: LD_INT 3
94355: PPUSH
94356: LD_INT 12
94358: PPUSH
94359: CALL_OW 12
94363: PPUSH
94364: CALL_OW 273
94368: ST_TO_ADDR
// if ValidHex ( x , y ) then
94369: LD_VAR 0 2
94373: PPUSH
94374: LD_VAR 0 3
94378: PPUSH
94379: CALL_OW 488
94383: IFFALSE 94418
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
94385: LD_VAR 0 1
94389: PPUSH
94390: LD_VAR 0 2
94394: PPUSH
94395: LD_VAR 0 3
94399: PPUSH
94400: LD_INT 3
94402: PPUSH
94403: LD_INT 6
94405: PPUSH
94406: CALL_OW 12
94410: PPUSH
94411: LD_INT 1
94413: PPUSH
94414: CALL_OW 483
// end ;
94418: GO 94278
94420: POP
94421: POP
// end ;
94422: PPOPN 5
94424: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
94425: LD_EXP 88
94429: PUSH
94430: LD_EXP 123
94434: AND
94435: IFFALSE 94529
94437: GO 94439
94439: DISABLE
94440: LD_INT 0
94442: PPUSH
94443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
94444: LD_ADDR_VAR 0 2
94448: PUSH
94449: LD_INT 22
94451: PUSH
94452: LD_OWVAR 2
94456: PUSH
94457: EMPTY
94458: LIST
94459: LIST
94460: PUSH
94461: LD_INT 32
94463: PUSH
94464: LD_INT 1
94466: PUSH
94467: EMPTY
94468: LIST
94469: LIST
94470: PUSH
94471: LD_INT 21
94473: PUSH
94474: LD_INT 2
94476: PUSH
94477: EMPTY
94478: LIST
94479: LIST
94480: PUSH
94481: EMPTY
94482: LIST
94483: LIST
94484: LIST
94485: PPUSH
94486: CALL_OW 69
94490: ST_TO_ADDR
// if not tmp then
94491: LD_VAR 0 2
94495: NOT
94496: IFFALSE 94500
// exit ;
94498: GO 94529
// for i in tmp do
94500: LD_ADDR_VAR 0 1
94504: PUSH
94505: LD_VAR 0 2
94509: PUSH
94510: FOR_IN
94511: IFFALSE 94527
// SetFuel ( i , 0 ) ;
94513: LD_VAR 0 1
94517: PPUSH
94518: LD_INT 0
94520: PPUSH
94521: CALL_OW 240
94525: GO 94510
94527: POP
94528: POP
// end ;
94529: PPOPN 2
94531: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
94532: LD_EXP 88
94536: PUSH
94537: LD_EXP 124
94541: AND
94542: IFFALSE 94608
94544: GO 94546
94546: DISABLE
94547: LD_INT 0
94549: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
94550: LD_ADDR_VAR 0 1
94554: PUSH
94555: LD_INT 22
94557: PUSH
94558: LD_OWVAR 2
94562: PUSH
94563: EMPTY
94564: LIST
94565: LIST
94566: PUSH
94567: LD_INT 30
94569: PUSH
94570: LD_INT 29
94572: PUSH
94573: EMPTY
94574: LIST
94575: LIST
94576: PUSH
94577: EMPTY
94578: LIST
94579: LIST
94580: PPUSH
94581: CALL_OW 69
94585: ST_TO_ADDR
// if not tmp then
94586: LD_VAR 0 1
94590: NOT
94591: IFFALSE 94595
// exit ;
94593: GO 94608
// DestroyUnit ( tmp [ 1 ] ) ;
94595: LD_VAR 0 1
94599: PUSH
94600: LD_INT 1
94602: ARRAY
94603: PPUSH
94604: CALL_OW 65
// end ;
94608: PPOPN 1
94610: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
94611: LD_EXP 88
94615: PUSH
94616: LD_EXP 126
94620: AND
94621: IFFALSE 94750
94623: GO 94625
94625: DISABLE
94626: LD_INT 0
94628: PPUSH
// begin uc_side := 0 ;
94629: LD_ADDR_OWVAR 20
94633: PUSH
94634: LD_INT 0
94636: ST_TO_ADDR
// uc_nation := nation_arabian ;
94637: LD_ADDR_OWVAR 21
94641: PUSH
94642: LD_INT 2
94644: ST_TO_ADDR
// hc_gallery :=  ;
94645: LD_ADDR_OWVAR 33
94649: PUSH
94650: LD_STRING 
94652: ST_TO_ADDR
// hc_name :=  ;
94653: LD_ADDR_OWVAR 26
94657: PUSH
94658: LD_STRING 
94660: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
94661: LD_INT 1
94663: PPUSH
94664: LD_INT 11
94666: PPUSH
94667: LD_INT 10
94669: PPUSH
94670: CALL_OW 380
// un := CreateHuman ;
94674: LD_ADDR_VAR 0 1
94678: PUSH
94679: CALL_OW 44
94683: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
94684: LD_VAR 0 1
94688: PPUSH
94689: LD_INT 1
94691: PPUSH
94692: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
94696: LD_INT 35
94698: PPUSH
94699: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
94703: LD_VAR 0 1
94707: PPUSH
94708: LD_INT 22
94710: PUSH
94711: LD_OWVAR 2
94715: PUSH
94716: EMPTY
94717: LIST
94718: LIST
94719: PPUSH
94720: CALL_OW 69
94724: PPUSH
94725: LD_VAR 0 1
94729: PPUSH
94730: CALL_OW 74
94734: PPUSH
94735: CALL_OW 115
// until IsDead ( un ) ;
94739: LD_VAR 0 1
94743: PPUSH
94744: CALL_OW 301
94748: IFFALSE 94696
// end ;
94750: PPOPN 1
94752: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
94753: LD_EXP 88
94757: PUSH
94758: LD_EXP 128
94762: AND
94763: IFFALSE 94775
94765: GO 94767
94767: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
94768: LD_STRING earthquake(getX(game), 0, 32)
94770: PPUSH
94771: CALL_OW 559
94775: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
94776: LD_EXP 88
94780: PUSH
94781: LD_EXP 129
94785: AND
94786: IFFALSE 94877
94788: GO 94790
94790: DISABLE
94791: LD_INT 0
94793: PPUSH
// begin enable ;
94794: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
94795: LD_ADDR_VAR 0 1
94799: PUSH
94800: LD_INT 22
94802: PUSH
94803: LD_OWVAR 2
94807: PUSH
94808: EMPTY
94809: LIST
94810: LIST
94811: PUSH
94812: LD_INT 21
94814: PUSH
94815: LD_INT 2
94817: PUSH
94818: EMPTY
94819: LIST
94820: LIST
94821: PUSH
94822: LD_INT 33
94824: PUSH
94825: LD_INT 3
94827: PUSH
94828: EMPTY
94829: LIST
94830: LIST
94831: PUSH
94832: EMPTY
94833: LIST
94834: LIST
94835: LIST
94836: PPUSH
94837: CALL_OW 69
94841: ST_TO_ADDR
// if not tmp then
94842: LD_VAR 0 1
94846: NOT
94847: IFFALSE 94851
// exit ;
94849: GO 94877
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
94851: LD_VAR 0 1
94855: PUSH
94856: LD_INT 1
94858: PPUSH
94859: LD_VAR 0 1
94863: PPUSH
94864: CALL_OW 12
94868: ARRAY
94869: PPUSH
94870: LD_INT 1
94872: PPUSH
94873: CALL_OW 234
// end ;
94877: PPOPN 1
94879: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
94880: LD_EXP 88
94884: PUSH
94885: LD_EXP 130
94889: AND
94890: IFFALSE 95031
94892: GO 94894
94894: DISABLE
94895: LD_INT 0
94897: PPUSH
94898: PPUSH
94899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
94900: LD_ADDR_VAR 0 3
94904: PUSH
94905: LD_INT 22
94907: PUSH
94908: LD_OWVAR 2
94912: PUSH
94913: EMPTY
94914: LIST
94915: LIST
94916: PUSH
94917: LD_INT 25
94919: PUSH
94920: LD_INT 1
94922: PUSH
94923: EMPTY
94924: LIST
94925: LIST
94926: PUSH
94927: EMPTY
94928: LIST
94929: LIST
94930: PPUSH
94931: CALL_OW 69
94935: ST_TO_ADDR
// if not tmp then
94936: LD_VAR 0 3
94940: NOT
94941: IFFALSE 94945
// exit ;
94943: GO 95031
// un := tmp [ rand ( 1 , tmp ) ] ;
94945: LD_ADDR_VAR 0 2
94949: PUSH
94950: LD_VAR 0 3
94954: PUSH
94955: LD_INT 1
94957: PPUSH
94958: LD_VAR 0 3
94962: PPUSH
94963: CALL_OW 12
94967: ARRAY
94968: ST_TO_ADDR
// if Crawls ( un ) then
94969: LD_VAR 0 2
94973: PPUSH
94974: CALL_OW 318
94978: IFFALSE 94989
// ComWalk ( un ) ;
94980: LD_VAR 0 2
94984: PPUSH
94985: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
94989: LD_VAR 0 2
94993: PPUSH
94994: LD_INT 9
94996: PPUSH
94997: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
95001: LD_INT 28
95003: PPUSH
95004: LD_OWVAR 2
95008: PPUSH
95009: LD_INT 2
95011: PPUSH
95012: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
95016: LD_INT 29
95018: PPUSH
95019: LD_OWVAR 2
95023: PPUSH
95024: LD_INT 2
95026: PPUSH
95027: CALL_OW 322
// end ;
95031: PPOPN 3
95033: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
95034: LD_EXP 88
95038: PUSH
95039: LD_EXP 131
95043: AND
95044: IFFALSE 95155
95046: GO 95048
95048: DISABLE
95049: LD_INT 0
95051: PPUSH
95052: PPUSH
95053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
95054: LD_ADDR_VAR 0 3
95058: PUSH
95059: LD_INT 22
95061: PUSH
95062: LD_OWVAR 2
95066: PUSH
95067: EMPTY
95068: LIST
95069: LIST
95070: PUSH
95071: LD_INT 25
95073: PUSH
95074: LD_INT 1
95076: PUSH
95077: EMPTY
95078: LIST
95079: LIST
95080: PUSH
95081: EMPTY
95082: LIST
95083: LIST
95084: PPUSH
95085: CALL_OW 69
95089: ST_TO_ADDR
// if not tmp then
95090: LD_VAR 0 3
95094: NOT
95095: IFFALSE 95099
// exit ;
95097: GO 95155
// un := tmp [ rand ( 1 , tmp ) ] ;
95099: LD_ADDR_VAR 0 2
95103: PUSH
95104: LD_VAR 0 3
95108: PUSH
95109: LD_INT 1
95111: PPUSH
95112: LD_VAR 0 3
95116: PPUSH
95117: CALL_OW 12
95121: ARRAY
95122: ST_TO_ADDR
// if Crawls ( un ) then
95123: LD_VAR 0 2
95127: PPUSH
95128: CALL_OW 318
95132: IFFALSE 95143
// ComWalk ( un ) ;
95134: LD_VAR 0 2
95138: PPUSH
95139: CALL_OW 138
// SetClass ( un , class_mortar ) ;
95143: LD_VAR 0 2
95147: PPUSH
95148: LD_INT 8
95150: PPUSH
95151: CALL_OW 336
// end ;
95155: PPOPN 3
95157: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
95158: LD_EXP 88
95162: PUSH
95163: LD_EXP 132
95167: AND
95168: IFFALSE 95312
95170: GO 95172
95172: DISABLE
95173: LD_INT 0
95175: PPUSH
95176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
95177: LD_ADDR_VAR 0 2
95181: PUSH
95182: LD_INT 22
95184: PUSH
95185: LD_OWVAR 2
95189: PUSH
95190: EMPTY
95191: LIST
95192: LIST
95193: PUSH
95194: LD_INT 21
95196: PUSH
95197: LD_INT 2
95199: PUSH
95200: EMPTY
95201: LIST
95202: LIST
95203: PUSH
95204: LD_INT 2
95206: PUSH
95207: LD_INT 34
95209: PUSH
95210: LD_INT 12
95212: PUSH
95213: EMPTY
95214: LIST
95215: LIST
95216: PUSH
95217: LD_INT 34
95219: PUSH
95220: LD_INT 51
95222: PUSH
95223: EMPTY
95224: LIST
95225: LIST
95226: PUSH
95227: LD_INT 34
95229: PUSH
95230: LD_INT 32
95232: PUSH
95233: EMPTY
95234: LIST
95235: LIST
95236: PUSH
95237: EMPTY
95238: LIST
95239: LIST
95240: LIST
95241: LIST
95242: PUSH
95243: EMPTY
95244: LIST
95245: LIST
95246: LIST
95247: PPUSH
95248: CALL_OW 69
95252: ST_TO_ADDR
// if not tmp then
95253: LD_VAR 0 2
95257: NOT
95258: IFFALSE 95262
// exit ;
95260: GO 95312
// for i in tmp do
95262: LD_ADDR_VAR 0 1
95266: PUSH
95267: LD_VAR 0 2
95271: PUSH
95272: FOR_IN
95273: IFFALSE 95310
// if GetCargo ( i , mat_artifact ) = 0 then
95275: LD_VAR 0 1
95279: PPUSH
95280: LD_INT 4
95282: PPUSH
95283: CALL_OW 289
95287: PUSH
95288: LD_INT 0
95290: EQUAL
95291: IFFALSE 95308
// SetCargo ( i , mat_siberit , 100 ) ;
95293: LD_VAR 0 1
95297: PPUSH
95298: LD_INT 3
95300: PPUSH
95301: LD_INT 100
95303: PPUSH
95304: CALL_OW 290
95308: GO 95272
95310: POP
95311: POP
// end ;
95312: PPOPN 2
95314: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
95315: LD_EXP 88
95319: PUSH
95320: LD_EXP 133
95324: AND
95325: IFFALSE 95508
95327: GO 95329
95329: DISABLE
95330: LD_INT 0
95332: PPUSH
95333: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
95334: LD_ADDR_VAR 0 2
95338: PUSH
95339: LD_INT 22
95341: PUSH
95342: LD_OWVAR 2
95346: PUSH
95347: EMPTY
95348: LIST
95349: LIST
95350: PPUSH
95351: CALL_OW 69
95355: ST_TO_ADDR
// if not tmp then
95356: LD_VAR 0 2
95360: NOT
95361: IFFALSE 95365
// exit ;
95363: GO 95508
// for i := 1 to 2 do
95365: LD_ADDR_VAR 0 1
95369: PUSH
95370: DOUBLE
95371: LD_INT 1
95373: DEC
95374: ST_TO_ADDR
95375: LD_INT 2
95377: PUSH
95378: FOR_TO
95379: IFFALSE 95506
// begin uc_side := your_side ;
95381: LD_ADDR_OWVAR 20
95385: PUSH
95386: LD_OWVAR 2
95390: ST_TO_ADDR
// uc_nation := nation_american ;
95391: LD_ADDR_OWVAR 21
95395: PUSH
95396: LD_INT 1
95398: ST_TO_ADDR
// vc_chassis := us_morphling ;
95399: LD_ADDR_OWVAR 37
95403: PUSH
95404: LD_INT 5
95406: ST_TO_ADDR
// vc_engine := engine_siberite ;
95407: LD_ADDR_OWVAR 39
95411: PUSH
95412: LD_INT 3
95414: ST_TO_ADDR
// vc_control := control_computer ;
95415: LD_ADDR_OWVAR 38
95419: PUSH
95420: LD_INT 3
95422: ST_TO_ADDR
// vc_weapon := us_double_laser ;
95423: LD_ADDR_OWVAR 40
95427: PUSH
95428: LD_INT 10
95430: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
95431: LD_VAR 0 2
95435: PUSH
95436: LD_INT 1
95438: ARRAY
95439: PPUSH
95440: CALL_OW 310
95444: NOT
95445: IFFALSE 95492
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
95447: CALL_OW 45
95451: PPUSH
95452: LD_VAR 0 2
95456: PUSH
95457: LD_INT 1
95459: ARRAY
95460: PPUSH
95461: CALL_OW 250
95465: PPUSH
95466: LD_VAR 0 2
95470: PUSH
95471: LD_INT 1
95473: ARRAY
95474: PPUSH
95475: CALL_OW 251
95479: PPUSH
95480: LD_INT 12
95482: PPUSH
95483: LD_INT 1
95485: PPUSH
95486: CALL_OW 50
95490: GO 95504
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
95492: CALL_OW 45
95496: PPUSH
95497: LD_INT 1
95499: PPUSH
95500: CALL_OW 51
// end ;
95504: GO 95378
95506: POP
95507: POP
// end ;
95508: PPOPN 2
95510: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
95511: LD_EXP 88
95515: PUSH
95516: LD_EXP 134
95520: AND
95521: IFFALSE 95743
95523: GO 95525
95525: DISABLE
95526: LD_INT 0
95528: PPUSH
95529: PPUSH
95530: PPUSH
95531: PPUSH
95532: PPUSH
95533: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
95534: LD_ADDR_VAR 0 6
95538: PUSH
95539: LD_INT 22
95541: PUSH
95542: LD_OWVAR 2
95546: PUSH
95547: EMPTY
95548: LIST
95549: LIST
95550: PUSH
95551: LD_INT 21
95553: PUSH
95554: LD_INT 1
95556: PUSH
95557: EMPTY
95558: LIST
95559: LIST
95560: PUSH
95561: LD_INT 3
95563: PUSH
95564: LD_INT 23
95566: PUSH
95567: LD_INT 0
95569: PUSH
95570: EMPTY
95571: LIST
95572: LIST
95573: PUSH
95574: EMPTY
95575: LIST
95576: LIST
95577: PUSH
95578: EMPTY
95579: LIST
95580: LIST
95581: LIST
95582: PPUSH
95583: CALL_OW 69
95587: ST_TO_ADDR
// if not tmp then
95588: LD_VAR 0 6
95592: NOT
95593: IFFALSE 95597
// exit ;
95595: GO 95743
// s1 := rand ( 1 , 4 ) ;
95597: LD_ADDR_VAR 0 2
95601: PUSH
95602: LD_INT 1
95604: PPUSH
95605: LD_INT 4
95607: PPUSH
95608: CALL_OW 12
95612: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
95613: LD_ADDR_VAR 0 4
95617: PUSH
95618: LD_VAR 0 6
95622: PUSH
95623: LD_INT 1
95625: ARRAY
95626: PPUSH
95627: LD_VAR 0 2
95631: PPUSH
95632: CALL_OW 259
95636: ST_TO_ADDR
// if s1 = 1 then
95637: LD_VAR 0 2
95641: PUSH
95642: LD_INT 1
95644: EQUAL
95645: IFFALSE 95665
// s2 := rand ( 2 , 4 ) else
95647: LD_ADDR_VAR 0 3
95651: PUSH
95652: LD_INT 2
95654: PPUSH
95655: LD_INT 4
95657: PPUSH
95658: CALL_OW 12
95662: ST_TO_ADDR
95663: GO 95673
// s2 := 1 ;
95665: LD_ADDR_VAR 0 3
95669: PUSH
95670: LD_INT 1
95672: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
95673: LD_ADDR_VAR 0 5
95677: PUSH
95678: LD_VAR 0 6
95682: PUSH
95683: LD_INT 1
95685: ARRAY
95686: PPUSH
95687: LD_VAR 0 3
95691: PPUSH
95692: CALL_OW 259
95696: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
95697: LD_VAR 0 6
95701: PUSH
95702: LD_INT 1
95704: ARRAY
95705: PPUSH
95706: LD_VAR 0 2
95710: PPUSH
95711: LD_VAR 0 5
95715: PPUSH
95716: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
95720: LD_VAR 0 6
95724: PUSH
95725: LD_INT 1
95727: ARRAY
95728: PPUSH
95729: LD_VAR 0 3
95733: PPUSH
95734: LD_VAR 0 4
95738: PPUSH
95739: CALL_OW 237
// end ;
95743: PPOPN 6
95745: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
95746: LD_EXP 88
95750: PUSH
95751: LD_EXP 135
95755: AND
95756: IFFALSE 95835
95758: GO 95760
95760: DISABLE
95761: LD_INT 0
95763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
95764: LD_ADDR_VAR 0 1
95768: PUSH
95769: LD_INT 22
95771: PUSH
95772: LD_OWVAR 2
95776: PUSH
95777: EMPTY
95778: LIST
95779: LIST
95780: PUSH
95781: LD_INT 30
95783: PUSH
95784: LD_INT 3
95786: PUSH
95787: EMPTY
95788: LIST
95789: LIST
95790: PUSH
95791: EMPTY
95792: LIST
95793: LIST
95794: PPUSH
95795: CALL_OW 69
95799: ST_TO_ADDR
// if not tmp then
95800: LD_VAR 0 1
95804: NOT
95805: IFFALSE 95809
// exit ;
95807: GO 95835
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
95809: LD_VAR 0 1
95813: PUSH
95814: LD_INT 1
95816: PPUSH
95817: LD_VAR 0 1
95821: PPUSH
95822: CALL_OW 12
95826: ARRAY
95827: PPUSH
95828: LD_INT 1
95830: PPUSH
95831: CALL_OW 234
// end ;
95835: PPOPN 1
95837: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
95838: LD_EXP 88
95842: PUSH
95843: LD_EXP 136
95847: AND
95848: IFFALSE 95960
95850: GO 95852
95852: DISABLE
95853: LD_INT 0
95855: PPUSH
95856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
95857: LD_ADDR_VAR 0 2
95861: PUSH
95862: LD_INT 22
95864: PUSH
95865: LD_OWVAR 2
95869: PUSH
95870: EMPTY
95871: LIST
95872: LIST
95873: PUSH
95874: LD_INT 2
95876: PUSH
95877: LD_INT 30
95879: PUSH
95880: LD_INT 27
95882: PUSH
95883: EMPTY
95884: LIST
95885: LIST
95886: PUSH
95887: LD_INT 30
95889: PUSH
95890: LD_INT 26
95892: PUSH
95893: EMPTY
95894: LIST
95895: LIST
95896: PUSH
95897: LD_INT 30
95899: PUSH
95900: LD_INT 28
95902: PUSH
95903: EMPTY
95904: LIST
95905: LIST
95906: PUSH
95907: EMPTY
95908: LIST
95909: LIST
95910: LIST
95911: LIST
95912: PUSH
95913: EMPTY
95914: LIST
95915: LIST
95916: PPUSH
95917: CALL_OW 69
95921: ST_TO_ADDR
// if not tmp then
95922: LD_VAR 0 2
95926: NOT
95927: IFFALSE 95931
// exit ;
95929: GO 95960
// for i in tmp do
95931: LD_ADDR_VAR 0 1
95935: PUSH
95936: LD_VAR 0 2
95940: PUSH
95941: FOR_IN
95942: IFFALSE 95958
// SetLives ( i , 1 ) ;
95944: LD_VAR 0 1
95948: PPUSH
95949: LD_INT 1
95951: PPUSH
95952: CALL_OW 234
95956: GO 95941
95958: POP
95959: POP
// end ;
95960: PPOPN 2
95962: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
95963: LD_EXP 88
95967: PUSH
95968: LD_EXP 137
95972: AND
95973: IFFALSE 96247
95975: GO 95977
95977: DISABLE
95978: LD_INT 0
95980: PPUSH
95981: PPUSH
95982: PPUSH
// begin i := rand ( 1 , 7 ) ;
95983: LD_ADDR_VAR 0 1
95987: PUSH
95988: LD_INT 1
95990: PPUSH
95991: LD_INT 7
95993: PPUSH
95994: CALL_OW 12
95998: ST_TO_ADDR
// case i of 1 :
95999: LD_VAR 0 1
96003: PUSH
96004: LD_INT 1
96006: DOUBLE
96007: EQUAL
96008: IFTRUE 96012
96010: GO 96022
96012: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
96013: LD_STRING earthquake(getX(game), 0, 32)
96015: PPUSH
96016: CALL_OW 559
96020: GO 96247
96022: LD_INT 2
96024: DOUBLE
96025: EQUAL
96026: IFTRUE 96030
96028: GO 96044
96030: POP
// begin ToLua ( displayStucuk(); ) ;
96031: LD_STRING displayStucuk();
96033: PPUSH
96034: CALL_OW 559
// ResetFog ;
96038: CALL_OW 335
// end ; 3 :
96042: GO 96247
96044: LD_INT 3
96046: DOUBLE
96047: EQUAL
96048: IFTRUE 96052
96050: GO 96156
96052: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
96053: LD_ADDR_VAR 0 2
96057: PUSH
96058: LD_INT 22
96060: PUSH
96061: LD_OWVAR 2
96065: PUSH
96066: EMPTY
96067: LIST
96068: LIST
96069: PUSH
96070: LD_INT 25
96072: PUSH
96073: LD_INT 1
96075: PUSH
96076: EMPTY
96077: LIST
96078: LIST
96079: PUSH
96080: EMPTY
96081: LIST
96082: LIST
96083: PPUSH
96084: CALL_OW 69
96088: ST_TO_ADDR
// if not tmp then
96089: LD_VAR 0 2
96093: NOT
96094: IFFALSE 96098
// exit ;
96096: GO 96247
// un := tmp [ rand ( 1 , tmp ) ] ;
96098: LD_ADDR_VAR 0 3
96102: PUSH
96103: LD_VAR 0 2
96107: PUSH
96108: LD_INT 1
96110: PPUSH
96111: LD_VAR 0 2
96115: PPUSH
96116: CALL_OW 12
96120: ARRAY
96121: ST_TO_ADDR
// if Crawls ( un ) then
96122: LD_VAR 0 3
96126: PPUSH
96127: CALL_OW 318
96131: IFFALSE 96142
// ComWalk ( un ) ;
96133: LD_VAR 0 3
96137: PPUSH
96138: CALL_OW 138
// SetClass ( un , class_mortar ) ;
96142: LD_VAR 0 3
96146: PPUSH
96147: LD_INT 8
96149: PPUSH
96150: CALL_OW 336
// end ; 4 :
96154: GO 96247
96156: LD_INT 4
96158: DOUBLE
96159: EQUAL
96160: IFTRUE 96164
96162: GO 96225
96164: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
96165: LD_ADDR_VAR 0 2
96169: PUSH
96170: LD_INT 22
96172: PUSH
96173: LD_OWVAR 2
96177: PUSH
96178: EMPTY
96179: LIST
96180: LIST
96181: PUSH
96182: LD_INT 30
96184: PUSH
96185: LD_INT 29
96187: PUSH
96188: EMPTY
96189: LIST
96190: LIST
96191: PUSH
96192: EMPTY
96193: LIST
96194: LIST
96195: PPUSH
96196: CALL_OW 69
96200: ST_TO_ADDR
// if not tmp then
96201: LD_VAR 0 2
96205: NOT
96206: IFFALSE 96210
// exit ;
96208: GO 96247
// DestroyUnit ( tmp [ 1 ] ) ;
96210: LD_VAR 0 2
96214: PUSH
96215: LD_INT 1
96217: ARRAY
96218: PPUSH
96219: CALL_OW 65
// end ; 5 .. 7 :
96223: GO 96247
96225: LD_INT 5
96227: DOUBLE
96228: GREATEREQUAL
96229: IFFALSE 96237
96231: LD_INT 7
96233: DOUBLE
96234: LESSEQUAL
96235: IFTRUE 96239
96237: GO 96246
96239: POP
// StreamSibBomb ; end ;
96240: CALL 92497 0 0
96244: GO 96247
96246: POP
// end ;
96247: PPOPN 3
96249: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
96250: LD_EXP 88
96254: PUSH
96255: LD_EXP 138
96259: AND
96260: IFFALSE 96416
96262: GO 96264
96264: DISABLE
96265: LD_INT 0
96267: PPUSH
96268: PPUSH
96269: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
96270: LD_ADDR_VAR 0 2
96274: PUSH
96275: LD_INT 81
96277: PUSH
96278: LD_OWVAR 2
96282: PUSH
96283: EMPTY
96284: LIST
96285: LIST
96286: PUSH
96287: LD_INT 2
96289: PUSH
96290: LD_INT 21
96292: PUSH
96293: LD_INT 1
96295: PUSH
96296: EMPTY
96297: LIST
96298: LIST
96299: PUSH
96300: LD_INT 21
96302: PUSH
96303: LD_INT 2
96305: PUSH
96306: EMPTY
96307: LIST
96308: LIST
96309: PUSH
96310: EMPTY
96311: LIST
96312: LIST
96313: LIST
96314: PUSH
96315: EMPTY
96316: LIST
96317: LIST
96318: PPUSH
96319: CALL_OW 69
96323: ST_TO_ADDR
// if not tmp then
96324: LD_VAR 0 2
96328: NOT
96329: IFFALSE 96333
// exit ;
96331: GO 96416
// p := 0 ;
96333: LD_ADDR_VAR 0 3
96337: PUSH
96338: LD_INT 0
96340: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
96341: LD_INT 35
96343: PPUSH
96344: CALL_OW 67
// p := p + 1 ;
96348: LD_ADDR_VAR 0 3
96352: PUSH
96353: LD_VAR 0 3
96357: PUSH
96358: LD_INT 1
96360: PLUS
96361: ST_TO_ADDR
// for i in tmp do
96362: LD_ADDR_VAR 0 1
96366: PUSH
96367: LD_VAR 0 2
96371: PUSH
96372: FOR_IN
96373: IFFALSE 96404
// if GetLives ( i ) < 1000 then
96375: LD_VAR 0 1
96379: PPUSH
96380: CALL_OW 256
96384: PUSH
96385: LD_INT 1000
96387: LESS
96388: IFFALSE 96402
// SetLives ( i , 1000 ) ;
96390: LD_VAR 0 1
96394: PPUSH
96395: LD_INT 1000
96397: PPUSH
96398: CALL_OW 234
96402: GO 96372
96404: POP
96405: POP
// until p > 20 ;
96406: LD_VAR 0 3
96410: PUSH
96411: LD_INT 20
96413: GREATER
96414: IFFALSE 96341
// end ;
96416: PPOPN 3
96418: END
// every 0 0$1 trigger StreamModeActive and sTime do
96419: LD_EXP 88
96423: PUSH
96424: LD_EXP 139
96428: AND
96429: IFFALSE 96464
96431: GO 96433
96433: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
96434: LD_INT 28
96436: PPUSH
96437: LD_OWVAR 2
96441: PPUSH
96442: LD_INT 2
96444: PPUSH
96445: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
96449: LD_INT 30
96451: PPUSH
96452: LD_OWVAR 2
96456: PPUSH
96457: LD_INT 2
96459: PPUSH
96460: CALL_OW 322
// end ;
96464: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
96465: LD_EXP 88
96469: PUSH
96470: LD_EXP 140
96474: AND
96475: IFFALSE 96596
96477: GO 96479
96479: DISABLE
96480: LD_INT 0
96482: PPUSH
96483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
96484: LD_ADDR_VAR 0 2
96488: PUSH
96489: LD_INT 22
96491: PUSH
96492: LD_OWVAR 2
96496: PUSH
96497: EMPTY
96498: LIST
96499: LIST
96500: PUSH
96501: LD_INT 21
96503: PUSH
96504: LD_INT 1
96506: PUSH
96507: EMPTY
96508: LIST
96509: LIST
96510: PUSH
96511: LD_INT 3
96513: PUSH
96514: LD_INT 23
96516: PUSH
96517: LD_INT 0
96519: PUSH
96520: EMPTY
96521: LIST
96522: LIST
96523: PUSH
96524: EMPTY
96525: LIST
96526: LIST
96527: PUSH
96528: EMPTY
96529: LIST
96530: LIST
96531: LIST
96532: PPUSH
96533: CALL_OW 69
96537: ST_TO_ADDR
// if not tmp then
96538: LD_VAR 0 2
96542: NOT
96543: IFFALSE 96547
// exit ;
96545: GO 96596
// for i in tmp do
96547: LD_ADDR_VAR 0 1
96551: PUSH
96552: LD_VAR 0 2
96556: PUSH
96557: FOR_IN
96558: IFFALSE 96594
// begin if Crawls ( i ) then
96560: LD_VAR 0 1
96564: PPUSH
96565: CALL_OW 318
96569: IFFALSE 96580
// ComWalk ( i ) ;
96571: LD_VAR 0 1
96575: PPUSH
96576: CALL_OW 138
// SetClass ( i , 2 ) ;
96580: LD_VAR 0 1
96584: PPUSH
96585: LD_INT 2
96587: PPUSH
96588: CALL_OW 336
// end ;
96592: GO 96557
96594: POP
96595: POP
// end ;
96596: PPOPN 2
96598: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
96599: LD_EXP 88
96603: PUSH
96604: LD_EXP 141
96608: AND
96609: IFFALSE 96890
96611: GO 96613
96613: DISABLE
96614: LD_INT 0
96616: PPUSH
96617: PPUSH
96618: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
96619: LD_OWVAR 2
96623: PPUSH
96624: LD_INT 9
96626: PPUSH
96627: LD_INT 1
96629: PPUSH
96630: LD_INT 1
96632: PPUSH
96633: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
96637: LD_INT 9
96639: PPUSH
96640: LD_OWVAR 2
96644: PPUSH
96645: CALL_OW 343
// uc_side := 9 ;
96649: LD_ADDR_OWVAR 20
96653: PUSH
96654: LD_INT 9
96656: ST_TO_ADDR
// uc_nation := 2 ;
96657: LD_ADDR_OWVAR 21
96661: PUSH
96662: LD_INT 2
96664: ST_TO_ADDR
// hc_name := Dark Warrior ;
96665: LD_ADDR_OWVAR 26
96669: PUSH
96670: LD_STRING Dark Warrior
96672: ST_TO_ADDR
// hc_gallery :=  ;
96673: LD_ADDR_OWVAR 33
96677: PUSH
96678: LD_STRING 
96680: ST_TO_ADDR
// hc_noskilllimit := true ;
96681: LD_ADDR_OWVAR 76
96685: PUSH
96686: LD_INT 1
96688: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
96689: LD_ADDR_OWVAR 31
96693: PUSH
96694: LD_INT 30
96696: PUSH
96697: LD_INT 30
96699: PUSH
96700: LD_INT 30
96702: PUSH
96703: LD_INT 30
96705: PUSH
96706: EMPTY
96707: LIST
96708: LIST
96709: LIST
96710: LIST
96711: ST_TO_ADDR
// un := CreateHuman ;
96712: LD_ADDR_VAR 0 3
96716: PUSH
96717: CALL_OW 44
96721: ST_TO_ADDR
// hc_noskilllimit := false ;
96722: LD_ADDR_OWVAR 76
96726: PUSH
96727: LD_INT 0
96729: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
96730: LD_VAR 0 3
96734: PPUSH
96735: LD_INT 1
96737: PPUSH
96738: CALL_OW 51
// p := 0 ;
96742: LD_ADDR_VAR 0 2
96746: PUSH
96747: LD_INT 0
96749: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
96750: LD_INT 35
96752: PPUSH
96753: CALL_OW 67
// p := p + 1 ;
96757: LD_ADDR_VAR 0 2
96761: PUSH
96762: LD_VAR 0 2
96766: PUSH
96767: LD_INT 1
96769: PLUS
96770: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
96771: LD_VAR 0 3
96775: PPUSH
96776: CALL_OW 256
96780: PUSH
96781: LD_INT 1000
96783: LESS
96784: IFFALSE 96798
// SetLives ( un , 1000 ) ;
96786: LD_VAR 0 3
96790: PPUSH
96791: LD_INT 1000
96793: PPUSH
96794: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
96798: LD_VAR 0 3
96802: PPUSH
96803: LD_INT 81
96805: PUSH
96806: LD_OWVAR 2
96810: PUSH
96811: EMPTY
96812: LIST
96813: LIST
96814: PUSH
96815: LD_INT 91
96817: PUSH
96818: LD_VAR 0 3
96822: PUSH
96823: LD_INT 30
96825: PUSH
96826: EMPTY
96827: LIST
96828: LIST
96829: LIST
96830: PUSH
96831: EMPTY
96832: LIST
96833: LIST
96834: PPUSH
96835: CALL_OW 69
96839: PPUSH
96840: LD_VAR 0 3
96844: PPUSH
96845: CALL_OW 74
96849: PPUSH
96850: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
96854: LD_VAR 0 2
96858: PUSH
96859: LD_INT 60
96861: GREATER
96862: PUSH
96863: LD_VAR 0 3
96867: PPUSH
96868: CALL_OW 301
96872: OR
96873: IFFALSE 96750
// if un then
96875: LD_VAR 0 3
96879: IFFALSE 96890
// RemoveUnit ( un ) ;
96881: LD_VAR 0 3
96885: PPUSH
96886: CALL_OW 64
// end ; end_of_file
96890: PPOPN 3
96892: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
96893: LD_INT 0
96895: PPUSH
96896: PPUSH
96897: PPUSH
96898: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
96899: LD_VAR 0 1
96903: PPUSH
96904: CALL_OW 264
96908: PUSH
96909: LD_EXP 33
96913: EQUAL
96914: IFFALSE 96986
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
96916: LD_INT 68
96918: PPUSH
96919: LD_VAR 0 1
96923: PPUSH
96924: CALL_OW 255
96928: PPUSH
96929: CALL_OW 321
96933: PUSH
96934: LD_INT 2
96936: EQUAL
96937: IFFALSE 96949
// eff := 70 else
96939: LD_ADDR_VAR 0 4
96943: PUSH
96944: LD_INT 70
96946: ST_TO_ADDR
96947: GO 96957
// eff := 30 ;
96949: LD_ADDR_VAR 0 4
96953: PUSH
96954: LD_INT 30
96956: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
96957: LD_VAR 0 1
96961: PPUSH
96962: CALL_OW 250
96966: PPUSH
96967: LD_VAR 0 1
96971: PPUSH
96972: CALL_OW 251
96976: PPUSH
96977: LD_VAR 0 4
96981: PPUSH
96982: CALL_OW 495
// end ; end ;
96986: LD_VAR 0 2
96990: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
96991: LD_INT 0
96993: PPUSH
// end ;
96994: LD_VAR 0 4
96998: RET
// export function SOS_Command ( cmd ) ; begin
96999: LD_INT 0
97001: PPUSH
// end ;
97002: LD_VAR 0 2
97006: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
97007: LD_VAR 0 1
97011: PUSH
97012: LD_INT 255
97014: EQUAL
97015: PUSH
97016: LD_VAR 0 2
97020: PPUSH
97021: CALL_OW 264
97025: PUSH
97026: LD_INT 14
97028: PUSH
97029: LD_INT 53
97031: PUSH
97032: EMPTY
97033: LIST
97034: LIST
97035: IN
97036: AND
97037: PUSH
97038: LD_VAR 0 4
97042: PPUSH
97043: LD_VAR 0 5
97047: PPUSH
97048: CALL_OW 488
97052: AND
97053: IFFALSE 97077
// CutTreeXYR ( unit , x , y , 12 ) ;
97055: LD_VAR 0 2
97059: PPUSH
97060: LD_VAR 0 4
97064: PPUSH
97065: LD_VAR 0 5
97069: PPUSH
97070: LD_INT 12
97072: PPUSH
97073: CALL 97080 0 4
// end ;
97077: PPOPN 5
97079: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
97080: LD_INT 0
97082: PPUSH
97083: PPUSH
97084: PPUSH
97085: PPUSH
97086: PPUSH
97087: PPUSH
97088: PPUSH
97089: PPUSH
97090: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
97091: LD_VAR 0 1
97095: NOT
97096: PUSH
97097: LD_VAR 0 2
97101: PPUSH
97102: LD_VAR 0 3
97106: PPUSH
97107: CALL_OW 488
97111: NOT
97112: OR
97113: PUSH
97114: LD_VAR 0 4
97118: NOT
97119: OR
97120: IFFALSE 97124
// exit ;
97122: GO 97464
// list := [ ] ;
97124: LD_ADDR_VAR 0 13
97128: PUSH
97129: EMPTY
97130: ST_TO_ADDR
// if x - r < 0 then
97131: LD_VAR 0 2
97135: PUSH
97136: LD_VAR 0 4
97140: MINUS
97141: PUSH
97142: LD_INT 0
97144: LESS
97145: IFFALSE 97157
// min_x := 0 else
97147: LD_ADDR_VAR 0 7
97151: PUSH
97152: LD_INT 0
97154: ST_TO_ADDR
97155: GO 97173
// min_x := x - r ;
97157: LD_ADDR_VAR 0 7
97161: PUSH
97162: LD_VAR 0 2
97166: PUSH
97167: LD_VAR 0 4
97171: MINUS
97172: ST_TO_ADDR
// if y - r < 0 then
97173: LD_VAR 0 3
97177: PUSH
97178: LD_VAR 0 4
97182: MINUS
97183: PUSH
97184: LD_INT 0
97186: LESS
97187: IFFALSE 97199
// min_y := 0 else
97189: LD_ADDR_VAR 0 8
97193: PUSH
97194: LD_INT 0
97196: ST_TO_ADDR
97197: GO 97215
// min_y := y - r ;
97199: LD_ADDR_VAR 0 8
97203: PUSH
97204: LD_VAR 0 3
97208: PUSH
97209: LD_VAR 0 4
97213: MINUS
97214: ST_TO_ADDR
// max_x := x + r ;
97215: LD_ADDR_VAR 0 9
97219: PUSH
97220: LD_VAR 0 2
97224: PUSH
97225: LD_VAR 0 4
97229: PLUS
97230: ST_TO_ADDR
// max_y := y + r ;
97231: LD_ADDR_VAR 0 10
97235: PUSH
97236: LD_VAR 0 3
97240: PUSH
97241: LD_VAR 0 4
97245: PLUS
97246: ST_TO_ADDR
// for _x = min_x to max_x do
97247: LD_ADDR_VAR 0 11
97251: PUSH
97252: DOUBLE
97253: LD_VAR 0 7
97257: DEC
97258: ST_TO_ADDR
97259: LD_VAR 0 9
97263: PUSH
97264: FOR_TO
97265: IFFALSE 97382
// for _y = min_y to max_y do
97267: LD_ADDR_VAR 0 12
97271: PUSH
97272: DOUBLE
97273: LD_VAR 0 8
97277: DEC
97278: ST_TO_ADDR
97279: LD_VAR 0 10
97283: PUSH
97284: FOR_TO
97285: IFFALSE 97378
// begin if not ValidHex ( _x , _y ) then
97287: LD_VAR 0 11
97291: PPUSH
97292: LD_VAR 0 12
97296: PPUSH
97297: CALL_OW 488
97301: NOT
97302: IFFALSE 97306
// continue ;
97304: GO 97284
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
97306: LD_VAR 0 11
97310: PPUSH
97311: LD_VAR 0 12
97315: PPUSH
97316: CALL_OW 351
97320: PUSH
97321: LD_VAR 0 11
97325: PPUSH
97326: LD_VAR 0 12
97330: PPUSH
97331: CALL_OW 554
97335: AND
97336: IFFALSE 97376
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
97338: LD_ADDR_VAR 0 13
97342: PUSH
97343: LD_VAR 0 13
97347: PPUSH
97348: LD_VAR 0 13
97352: PUSH
97353: LD_INT 1
97355: PLUS
97356: PPUSH
97357: LD_VAR 0 11
97361: PUSH
97362: LD_VAR 0 12
97366: PUSH
97367: EMPTY
97368: LIST
97369: LIST
97370: PPUSH
97371: CALL_OW 2
97375: ST_TO_ADDR
// end ;
97376: GO 97284
97378: POP
97379: POP
97380: GO 97264
97382: POP
97383: POP
// if not list then
97384: LD_VAR 0 13
97388: NOT
97389: IFFALSE 97393
// exit ;
97391: GO 97464
// for i in list do
97393: LD_ADDR_VAR 0 6
97397: PUSH
97398: LD_VAR 0 13
97402: PUSH
97403: FOR_IN
97404: IFFALSE 97462
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
97406: LD_VAR 0 1
97410: PPUSH
97411: LD_STRING M
97413: PUSH
97414: LD_VAR 0 6
97418: PUSH
97419: LD_INT 1
97421: ARRAY
97422: PUSH
97423: LD_VAR 0 6
97427: PUSH
97428: LD_INT 2
97430: ARRAY
97431: PUSH
97432: LD_INT 0
97434: PUSH
97435: LD_INT 0
97437: PUSH
97438: LD_INT 0
97440: PUSH
97441: LD_INT 0
97443: PUSH
97444: EMPTY
97445: LIST
97446: LIST
97447: LIST
97448: LIST
97449: LIST
97450: LIST
97451: LIST
97452: PUSH
97453: EMPTY
97454: LIST
97455: PPUSH
97456: CALL_OW 447
97460: GO 97403
97462: POP
97463: POP
// end ; end_of_file
97464: LD_VAR 0 5
97468: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
97469: LD_INT 0
97471: PPUSH
97472: PPUSH
97473: PPUSH
97474: PPUSH
97475: PPUSH
97476: PPUSH
97477: PPUSH
97478: PPUSH
97479: PPUSH
97480: PPUSH
97481: PPUSH
97482: PPUSH
97483: PPUSH
97484: PPUSH
97485: PPUSH
97486: PPUSH
97487: PPUSH
97488: PPUSH
97489: PPUSH
97490: PPUSH
97491: PPUSH
97492: PPUSH
97493: PPUSH
97494: PPUSH
97495: PPUSH
97496: PPUSH
97497: PPUSH
97498: PPUSH
97499: PPUSH
97500: PPUSH
97501: PPUSH
97502: PPUSH
97503: PPUSH
97504: PPUSH
// if not list then
97505: LD_VAR 0 1
97509: NOT
97510: IFFALSE 97514
// exit ;
97512: GO 102173
// base := list [ 1 ] ;
97514: LD_ADDR_VAR 0 3
97518: PUSH
97519: LD_VAR 0 1
97523: PUSH
97524: LD_INT 1
97526: ARRAY
97527: ST_TO_ADDR
// group := list [ 2 ] ;
97528: LD_ADDR_VAR 0 4
97532: PUSH
97533: LD_VAR 0 1
97537: PUSH
97538: LD_INT 2
97540: ARRAY
97541: ST_TO_ADDR
// path := list [ 3 ] ;
97542: LD_ADDR_VAR 0 5
97546: PUSH
97547: LD_VAR 0 1
97551: PUSH
97552: LD_INT 3
97554: ARRAY
97555: ST_TO_ADDR
// flags := list [ 4 ] ;
97556: LD_ADDR_VAR 0 6
97560: PUSH
97561: LD_VAR 0 1
97565: PUSH
97566: LD_INT 4
97568: ARRAY
97569: ST_TO_ADDR
// mined := [ ] ;
97570: LD_ADDR_VAR 0 27
97574: PUSH
97575: EMPTY
97576: ST_TO_ADDR
// bombed := [ ] ;
97577: LD_ADDR_VAR 0 28
97581: PUSH
97582: EMPTY
97583: ST_TO_ADDR
// healers := [ ] ;
97584: LD_ADDR_VAR 0 31
97588: PUSH
97589: EMPTY
97590: ST_TO_ADDR
// to_heal := [ ] ;
97591: LD_ADDR_VAR 0 30
97595: PUSH
97596: EMPTY
97597: ST_TO_ADDR
// repairs := [ ] ;
97598: LD_ADDR_VAR 0 33
97602: PUSH
97603: EMPTY
97604: ST_TO_ADDR
// to_repair := [ ] ;
97605: LD_ADDR_VAR 0 32
97609: PUSH
97610: EMPTY
97611: ST_TO_ADDR
// if not group or not path then
97612: LD_VAR 0 4
97616: NOT
97617: PUSH
97618: LD_VAR 0 5
97622: NOT
97623: OR
97624: IFFALSE 97628
// exit ;
97626: GO 102173
// side := GetSide ( group [ 1 ] ) ;
97628: LD_ADDR_VAR 0 35
97632: PUSH
97633: LD_VAR 0 4
97637: PUSH
97638: LD_INT 1
97640: ARRAY
97641: PPUSH
97642: CALL_OW 255
97646: ST_TO_ADDR
// if flags then
97647: LD_VAR 0 6
97651: IFFALSE 97795
// begin f_ignore_area := flags [ 1 ] ;
97653: LD_ADDR_VAR 0 17
97657: PUSH
97658: LD_VAR 0 6
97662: PUSH
97663: LD_INT 1
97665: ARRAY
97666: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
97667: LD_ADDR_VAR 0 18
97671: PUSH
97672: LD_VAR 0 6
97676: PUSH
97677: LD_INT 2
97679: ARRAY
97680: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
97681: LD_ADDR_VAR 0 19
97685: PUSH
97686: LD_VAR 0 6
97690: PUSH
97691: LD_INT 3
97693: ARRAY
97694: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
97695: LD_ADDR_VAR 0 20
97699: PUSH
97700: LD_VAR 0 6
97704: PUSH
97705: LD_INT 4
97707: ARRAY
97708: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
97709: LD_ADDR_VAR 0 21
97713: PUSH
97714: LD_VAR 0 6
97718: PUSH
97719: LD_INT 5
97721: ARRAY
97722: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
97723: LD_ADDR_VAR 0 22
97727: PUSH
97728: LD_VAR 0 6
97732: PUSH
97733: LD_INT 6
97735: ARRAY
97736: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
97737: LD_ADDR_VAR 0 23
97741: PUSH
97742: LD_VAR 0 6
97746: PUSH
97747: LD_INT 7
97749: ARRAY
97750: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
97751: LD_ADDR_VAR 0 24
97755: PUSH
97756: LD_VAR 0 6
97760: PUSH
97761: LD_INT 8
97763: ARRAY
97764: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
97765: LD_ADDR_VAR 0 25
97769: PUSH
97770: LD_VAR 0 6
97774: PUSH
97775: LD_INT 9
97777: ARRAY
97778: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
97779: LD_ADDR_VAR 0 26
97783: PUSH
97784: LD_VAR 0 6
97788: PUSH
97789: LD_INT 10
97791: ARRAY
97792: ST_TO_ADDR
// end else
97793: GO 97875
// begin f_ignore_area := false ;
97795: LD_ADDR_VAR 0 17
97799: PUSH
97800: LD_INT 0
97802: ST_TO_ADDR
// f_capture := false ;
97803: LD_ADDR_VAR 0 18
97807: PUSH
97808: LD_INT 0
97810: ST_TO_ADDR
// f_ignore_civ := false ;
97811: LD_ADDR_VAR 0 19
97815: PUSH
97816: LD_INT 0
97818: ST_TO_ADDR
// f_murder := false ;
97819: LD_ADDR_VAR 0 20
97823: PUSH
97824: LD_INT 0
97826: ST_TO_ADDR
// f_mines := false ;
97827: LD_ADDR_VAR 0 21
97831: PUSH
97832: LD_INT 0
97834: ST_TO_ADDR
// f_repair := false ;
97835: LD_ADDR_VAR 0 22
97839: PUSH
97840: LD_INT 0
97842: ST_TO_ADDR
// f_heal := false ;
97843: LD_ADDR_VAR 0 23
97847: PUSH
97848: LD_INT 0
97850: ST_TO_ADDR
// f_spacetime := false ;
97851: LD_ADDR_VAR 0 24
97855: PUSH
97856: LD_INT 0
97858: ST_TO_ADDR
// f_attack_depot := false ;
97859: LD_ADDR_VAR 0 25
97863: PUSH
97864: LD_INT 0
97866: ST_TO_ADDR
// f_crawl := false ;
97867: LD_ADDR_VAR 0 26
97871: PUSH
97872: LD_INT 0
97874: ST_TO_ADDR
// end ; if f_heal then
97875: LD_VAR 0 23
97879: IFFALSE 97906
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
97881: LD_ADDR_VAR 0 31
97885: PUSH
97886: LD_VAR 0 4
97890: PPUSH
97891: LD_INT 25
97893: PUSH
97894: LD_INT 4
97896: PUSH
97897: EMPTY
97898: LIST
97899: LIST
97900: PPUSH
97901: CALL_OW 72
97905: ST_TO_ADDR
// if f_repair then
97906: LD_VAR 0 22
97910: IFFALSE 97937
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
97912: LD_ADDR_VAR 0 33
97916: PUSH
97917: LD_VAR 0 4
97921: PPUSH
97922: LD_INT 25
97924: PUSH
97925: LD_INT 3
97927: PUSH
97928: EMPTY
97929: LIST
97930: LIST
97931: PPUSH
97932: CALL_OW 72
97936: ST_TO_ADDR
// units_path := [ ] ;
97937: LD_ADDR_VAR 0 16
97941: PUSH
97942: EMPTY
97943: ST_TO_ADDR
// for i = 1 to group do
97944: LD_ADDR_VAR 0 7
97948: PUSH
97949: DOUBLE
97950: LD_INT 1
97952: DEC
97953: ST_TO_ADDR
97954: LD_VAR 0 4
97958: PUSH
97959: FOR_TO
97960: IFFALSE 97989
// units_path := Replace ( units_path , i , path ) ;
97962: LD_ADDR_VAR 0 16
97966: PUSH
97967: LD_VAR 0 16
97971: PPUSH
97972: LD_VAR 0 7
97976: PPUSH
97977: LD_VAR 0 5
97981: PPUSH
97982: CALL_OW 1
97986: ST_TO_ADDR
97987: GO 97959
97989: POP
97990: POP
// repeat for i = group downto 1 do
97991: LD_ADDR_VAR 0 7
97995: PUSH
97996: DOUBLE
97997: LD_VAR 0 4
98001: INC
98002: ST_TO_ADDR
98003: LD_INT 1
98005: PUSH
98006: FOR_DOWNTO
98007: IFFALSE 102129
// begin wait ( 5 ) ;
98009: LD_INT 5
98011: PPUSH
98012: CALL_OW 67
// tmp := [ ] ;
98016: LD_ADDR_VAR 0 14
98020: PUSH
98021: EMPTY
98022: ST_TO_ADDR
// attacking := false ;
98023: LD_ADDR_VAR 0 29
98027: PUSH
98028: LD_INT 0
98030: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
98031: LD_VAR 0 4
98035: PUSH
98036: LD_VAR 0 7
98040: ARRAY
98041: PPUSH
98042: CALL_OW 301
98046: PUSH
98047: LD_VAR 0 4
98051: PUSH
98052: LD_VAR 0 7
98056: ARRAY
98057: NOT
98058: OR
98059: IFFALSE 98168
// begin if GetType ( group [ i ] ) = unit_human then
98061: LD_VAR 0 4
98065: PUSH
98066: LD_VAR 0 7
98070: ARRAY
98071: PPUSH
98072: CALL_OW 247
98076: PUSH
98077: LD_INT 1
98079: EQUAL
98080: IFFALSE 98126
// begin to_heal := to_heal diff group [ i ] ;
98082: LD_ADDR_VAR 0 30
98086: PUSH
98087: LD_VAR 0 30
98091: PUSH
98092: LD_VAR 0 4
98096: PUSH
98097: LD_VAR 0 7
98101: ARRAY
98102: DIFF
98103: ST_TO_ADDR
// healers := healers diff group [ i ] ;
98104: LD_ADDR_VAR 0 31
98108: PUSH
98109: LD_VAR 0 31
98113: PUSH
98114: LD_VAR 0 4
98118: PUSH
98119: LD_VAR 0 7
98123: ARRAY
98124: DIFF
98125: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
98126: LD_ADDR_VAR 0 4
98130: PUSH
98131: LD_VAR 0 4
98135: PPUSH
98136: LD_VAR 0 7
98140: PPUSH
98141: CALL_OW 3
98145: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
98146: LD_ADDR_VAR 0 16
98150: PUSH
98151: LD_VAR 0 16
98155: PPUSH
98156: LD_VAR 0 7
98160: PPUSH
98161: CALL_OW 3
98165: ST_TO_ADDR
// continue ;
98166: GO 98006
// end ; if f_repair then
98168: LD_VAR 0 22
98172: IFFALSE 98661
// begin if GetType ( group [ i ] ) = unit_vehicle then
98174: LD_VAR 0 4
98178: PUSH
98179: LD_VAR 0 7
98183: ARRAY
98184: PPUSH
98185: CALL_OW 247
98189: PUSH
98190: LD_INT 2
98192: EQUAL
98193: IFFALSE 98383
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
98195: LD_VAR 0 4
98199: PUSH
98200: LD_VAR 0 7
98204: ARRAY
98205: PPUSH
98206: CALL_OW 256
98210: PUSH
98211: LD_INT 700
98213: LESS
98214: PUSH
98215: LD_VAR 0 4
98219: PUSH
98220: LD_VAR 0 7
98224: ARRAY
98225: PUSH
98226: LD_VAR 0 32
98230: IN
98231: NOT
98232: AND
98233: IFFALSE 98257
// to_repair := to_repair union group [ i ] ;
98235: LD_ADDR_VAR 0 32
98239: PUSH
98240: LD_VAR 0 32
98244: PUSH
98245: LD_VAR 0 4
98249: PUSH
98250: LD_VAR 0 7
98254: ARRAY
98255: UNION
98256: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
98257: LD_VAR 0 4
98261: PUSH
98262: LD_VAR 0 7
98266: ARRAY
98267: PPUSH
98268: CALL_OW 256
98272: PUSH
98273: LD_INT 1000
98275: EQUAL
98276: PUSH
98277: LD_VAR 0 4
98281: PUSH
98282: LD_VAR 0 7
98286: ARRAY
98287: PUSH
98288: LD_VAR 0 32
98292: IN
98293: AND
98294: IFFALSE 98318
// to_repair := to_repair diff group [ i ] ;
98296: LD_ADDR_VAR 0 32
98300: PUSH
98301: LD_VAR 0 32
98305: PUSH
98306: LD_VAR 0 4
98310: PUSH
98311: LD_VAR 0 7
98315: ARRAY
98316: DIFF
98317: ST_TO_ADDR
// if group [ i ] in to_repair then
98318: LD_VAR 0 4
98322: PUSH
98323: LD_VAR 0 7
98327: ARRAY
98328: PUSH
98329: LD_VAR 0 32
98333: IN
98334: IFFALSE 98381
// begin if not IsInArea ( group [ i ] , f_repair ) then
98336: LD_VAR 0 4
98340: PUSH
98341: LD_VAR 0 7
98345: ARRAY
98346: PPUSH
98347: LD_VAR 0 22
98351: PPUSH
98352: CALL_OW 308
98356: NOT
98357: IFFALSE 98379
// ComMoveToArea ( group [ i ] , f_repair ) ;
98359: LD_VAR 0 4
98363: PUSH
98364: LD_VAR 0 7
98368: ARRAY
98369: PPUSH
98370: LD_VAR 0 22
98374: PPUSH
98375: CALL_OW 113
// continue ;
98379: GO 98006
// end ; end else
98381: GO 98661
// if group [ i ] in repairs then
98383: LD_VAR 0 4
98387: PUSH
98388: LD_VAR 0 7
98392: ARRAY
98393: PUSH
98394: LD_VAR 0 33
98398: IN
98399: IFFALSE 98661
// begin if IsInUnit ( group [ i ] ) then
98401: LD_VAR 0 4
98405: PUSH
98406: LD_VAR 0 7
98410: ARRAY
98411: PPUSH
98412: CALL_OW 310
98416: IFFALSE 98484
// begin z := IsInUnit ( group [ i ] ) ;
98418: LD_ADDR_VAR 0 13
98422: PUSH
98423: LD_VAR 0 4
98427: PUSH
98428: LD_VAR 0 7
98432: ARRAY
98433: PPUSH
98434: CALL_OW 310
98438: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
98439: LD_VAR 0 13
98443: PUSH
98444: LD_VAR 0 32
98448: IN
98449: PUSH
98450: LD_VAR 0 13
98454: PPUSH
98455: LD_VAR 0 22
98459: PPUSH
98460: CALL_OW 308
98464: AND
98465: IFFALSE 98482
// ComExitVehicle ( group [ i ] ) ;
98467: LD_VAR 0 4
98471: PUSH
98472: LD_VAR 0 7
98476: ARRAY
98477: PPUSH
98478: CALL_OW 121
// end else
98482: GO 98661
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
98484: LD_ADDR_VAR 0 13
98488: PUSH
98489: LD_VAR 0 4
98493: PPUSH
98494: LD_INT 95
98496: PUSH
98497: LD_VAR 0 22
98501: PUSH
98502: EMPTY
98503: LIST
98504: LIST
98505: PUSH
98506: LD_INT 58
98508: PUSH
98509: EMPTY
98510: LIST
98511: PUSH
98512: EMPTY
98513: LIST
98514: LIST
98515: PPUSH
98516: CALL_OW 72
98520: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
98521: LD_VAR 0 4
98525: PUSH
98526: LD_VAR 0 7
98530: ARRAY
98531: PPUSH
98532: CALL_OW 314
98536: NOT
98537: IFFALSE 98659
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
98539: LD_ADDR_VAR 0 10
98543: PUSH
98544: LD_VAR 0 13
98548: PPUSH
98549: LD_VAR 0 4
98553: PUSH
98554: LD_VAR 0 7
98558: ARRAY
98559: PPUSH
98560: CALL_OW 74
98564: ST_TO_ADDR
// if not x then
98565: LD_VAR 0 10
98569: NOT
98570: IFFALSE 98574
// continue ;
98572: GO 98006
// if GetLives ( x ) < 1000 then
98574: LD_VAR 0 10
98578: PPUSH
98579: CALL_OW 256
98583: PUSH
98584: LD_INT 1000
98586: LESS
98587: IFFALSE 98611
// ComRepairVehicle ( group [ i ] , x ) else
98589: LD_VAR 0 4
98593: PUSH
98594: LD_VAR 0 7
98598: ARRAY
98599: PPUSH
98600: LD_VAR 0 10
98604: PPUSH
98605: CALL_OW 129
98609: GO 98659
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
98611: LD_VAR 0 23
98615: PUSH
98616: LD_VAR 0 4
98620: PUSH
98621: LD_VAR 0 7
98625: ARRAY
98626: PPUSH
98627: CALL_OW 256
98631: PUSH
98632: LD_INT 1000
98634: LESS
98635: AND
98636: NOT
98637: IFFALSE 98659
// ComEnterUnit ( group [ i ] , x ) ;
98639: LD_VAR 0 4
98643: PUSH
98644: LD_VAR 0 7
98648: ARRAY
98649: PPUSH
98650: LD_VAR 0 10
98654: PPUSH
98655: CALL_OW 120
// end ; continue ;
98659: GO 98006
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
98661: LD_VAR 0 23
98665: PUSH
98666: LD_VAR 0 4
98670: PUSH
98671: LD_VAR 0 7
98675: ARRAY
98676: PPUSH
98677: CALL_OW 247
98681: PUSH
98682: LD_INT 1
98684: EQUAL
98685: AND
98686: IFFALSE 99164
// begin if group [ i ] in healers then
98688: LD_VAR 0 4
98692: PUSH
98693: LD_VAR 0 7
98697: ARRAY
98698: PUSH
98699: LD_VAR 0 31
98703: IN
98704: IFFALSE 98977
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
98706: LD_VAR 0 4
98710: PUSH
98711: LD_VAR 0 7
98715: ARRAY
98716: PPUSH
98717: LD_VAR 0 23
98721: PPUSH
98722: CALL_OW 308
98726: NOT
98727: PUSH
98728: LD_VAR 0 4
98732: PUSH
98733: LD_VAR 0 7
98737: ARRAY
98738: PPUSH
98739: CALL_OW 314
98743: NOT
98744: AND
98745: IFFALSE 98769
// ComMoveToArea ( group [ i ] , f_heal ) else
98747: LD_VAR 0 4
98751: PUSH
98752: LD_VAR 0 7
98756: ARRAY
98757: PPUSH
98758: LD_VAR 0 23
98762: PPUSH
98763: CALL_OW 113
98767: GO 98975
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
98769: LD_VAR 0 4
98773: PUSH
98774: LD_VAR 0 7
98778: ARRAY
98779: PPUSH
98780: CALL 52673 0 1
98784: PPUSH
98785: CALL_OW 256
98789: PUSH
98790: LD_INT 1000
98792: EQUAL
98793: IFFALSE 98812
// ComStop ( group [ i ] ) else
98795: LD_VAR 0 4
98799: PUSH
98800: LD_VAR 0 7
98804: ARRAY
98805: PPUSH
98806: CALL_OW 141
98810: GO 98975
// if not HasTask ( group [ i ] ) and to_heal then
98812: LD_VAR 0 4
98816: PUSH
98817: LD_VAR 0 7
98821: ARRAY
98822: PPUSH
98823: CALL_OW 314
98827: NOT
98828: PUSH
98829: LD_VAR 0 30
98833: AND
98834: IFFALSE 98975
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
98836: LD_ADDR_VAR 0 13
98840: PUSH
98841: LD_VAR 0 30
98845: PPUSH
98846: LD_INT 3
98848: PUSH
98849: LD_INT 54
98851: PUSH
98852: EMPTY
98853: LIST
98854: PUSH
98855: EMPTY
98856: LIST
98857: LIST
98858: PPUSH
98859: CALL_OW 72
98863: PPUSH
98864: LD_VAR 0 4
98868: PUSH
98869: LD_VAR 0 7
98873: ARRAY
98874: PPUSH
98875: CALL_OW 74
98879: ST_TO_ADDR
// if z then
98880: LD_VAR 0 13
98884: IFFALSE 98975
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
98886: LD_INT 91
98888: PUSH
98889: LD_VAR 0 13
98893: PUSH
98894: LD_INT 10
98896: PUSH
98897: EMPTY
98898: LIST
98899: LIST
98900: LIST
98901: PUSH
98902: LD_INT 81
98904: PUSH
98905: LD_VAR 0 13
98909: PPUSH
98910: CALL_OW 255
98914: PUSH
98915: EMPTY
98916: LIST
98917: LIST
98918: PUSH
98919: EMPTY
98920: LIST
98921: LIST
98922: PPUSH
98923: CALL_OW 69
98927: PUSH
98928: LD_INT 0
98930: EQUAL
98931: IFFALSE 98955
// ComHeal ( group [ i ] , z ) else
98933: LD_VAR 0 4
98937: PUSH
98938: LD_VAR 0 7
98942: ARRAY
98943: PPUSH
98944: LD_VAR 0 13
98948: PPUSH
98949: CALL_OW 128
98953: GO 98975
// ComMoveToArea ( group [ i ] , f_heal ) ;
98955: LD_VAR 0 4
98959: PUSH
98960: LD_VAR 0 7
98964: ARRAY
98965: PPUSH
98966: LD_VAR 0 23
98970: PPUSH
98971: CALL_OW 113
// end ; continue ;
98975: GO 98006
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
98977: LD_VAR 0 4
98981: PUSH
98982: LD_VAR 0 7
98986: ARRAY
98987: PPUSH
98988: CALL_OW 256
98992: PUSH
98993: LD_INT 700
98995: LESS
98996: PUSH
98997: LD_VAR 0 4
99001: PUSH
99002: LD_VAR 0 7
99006: ARRAY
99007: PUSH
99008: LD_VAR 0 30
99012: IN
99013: NOT
99014: AND
99015: IFFALSE 99039
// to_heal := to_heal union group [ i ] ;
99017: LD_ADDR_VAR 0 30
99021: PUSH
99022: LD_VAR 0 30
99026: PUSH
99027: LD_VAR 0 4
99031: PUSH
99032: LD_VAR 0 7
99036: ARRAY
99037: UNION
99038: ST_TO_ADDR
// if group [ i ] in to_heal then
99039: LD_VAR 0 4
99043: PUSH
99044: LD_VAR 0 7
99048: ARRAY
99049: PUSH
99050: LD_VAR 0 30
99054: IN
99055: IFFALSE 99164
// begin if GetLives ( group [ i ] ) = 1000 then
99057: LD_VAR 0 4
99061: PUSH
99062: LD_VAR 0 7
99066: ARRAY
99067: PPUSH
99068: CALL_OW 256
99072: PUSH
99073: LD_INT 1000
99075: EQUAL
99076: IFFALSE 99102
// to_heal := to_heal diff group [ i ] else
99078: LD_ADDR_VAR 0 30
99082: PUSH
99083: LD_VAR 0 30
99087: PUSH
99088: LD_VAR 0 4
99092: PUSH
99093: LD_VAR 0 7
99097: ARRAY
99098: DIFF
99099: ST_TO_ADDR
99100: GO 99164
// begin if not IsInArea ( group [ i ] , to_heal ) then
99102: LD_VAR 0 4
99106: PUSH
99107: LD_VAR 0 7
99111: ARRAY
99112: PPUSH
99113: LD_VAR 0 30
99117: PPUSH
99118: CALL_OW 308
99122: NOT
99123: IFFALSE 99147
// ComMoveToArea ( group [ i ] , f_heal ) else
99125: LD_VAR 0 4
99129: PUSH
99130: LD_VAR 0 7
99134: ARRAY
99135: PPUSH
99136: LD_VAR 0 23
99140: PPUSH
99141: CALL_OW 113
99145: GO 99162
// ComHold ( group [ i ] ) ;
99147: LD_VAR 0 4
99151: PUSH
99152: LD_VAR 0 7
99156: ARRAY
99157: PPUSH
99158: CALL_OW 140
// continue ;
99162: GO 98006
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
99164: LD_VAR 0 4
99168: PUSH
99169: LD_VAR 0 7
99173: ARRAY
99174: PPUSH
99175: LD_INT 10
99177: PPUSH
99178: CALL 51093 0 2
99182: NOT
99183: PUSH
99184: LD_VAR 0 16
99188: PUSH
99189: LD_VAR 0 7
99193: ARRAY
99194: PUSH
99195: EMPTY
99196: EQUAL
99197: NOT
99198: AND
99199: IFFALSE 99465
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
99201: LD_VAR 0 4
99205: PUSH
99206: LD_VAR 0 7
99210: ARRAY
99211: PPUSH
99212: CALL_OW 262
99216: PUSH
99217: LD_INT 1
99219: PUSH
99220: LD_INT 2
99222: PUSH
99223: EMPTY
99224: LIST
99225: LIST
99226: IN
99227: IFFALSE 99268
// if GetFuel ( group [ i ] ) < 10 then
99229: LD_VAR 0 4
99233: PUSH
99234: LD_VAR 0 7
99238: ARRAY
99239: PPUSH
99240: CALL_OW 261
99244: PUSH
99245: LD_INT 10
99247: LESS
99248: IFFALSE 99268
// SetFuel ( group [ i ] , 12 ) ;
99250: LD_VAR 0 4
99254: PUSH
99255: LD_VAR 0 7
99259: ARRAY
99260: PPUSH
99261: LD_INT 12
99263: PPUSH
99264: CALL_OW 240
// if units_path [ i ] then
99268: LD_VAR 0 16
99272: PUSH
99273: LD_VAR 0 7
99277: ARRAY
99278: IFFALSE 99463
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
99280: LD_VAR 0 4
99284: PUSH
99285: LD_VAR 0 7
99289: ARRAY
99290: PPUSH
99291: LD_VAR 0 16
99295: PUSH
99296: LD_VAR 0 7
99300: ARRAY
99301: PUSH
99302: LD_INT 1
99304: ARRAY
99305: PUSH
99306: LD_INT 1
99308: ARRAY
99309: PPUSH
99310: LD_VAR 0 16
99314: PUSH
99315: LD_VAR 0 7
99319: ARRAY
99320: PUSH
99321: LD_INT 1
99323: ARRAY
99324: PUSH
99325: LD_INT 2
99327: ARRAY
99328: PPUSH
99329: CALL_OW 297
99333: PUSH
99334: LD_INT 6
99336: GREATER
99337: IFFALSE 99412
// begin if not HasTask ( group [ i ] ) then
99339: LD_VAR 0 4
99343: PUSH
99344: LD_VAR 0 7
99348: ARRAY
99349: PPUSH
99350: CALL_OW 314
99354: NOT
99355: IFFALSE 99410
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
99357: LD_VAR 0 4
99361: PUSH
99362: LD_VAR 0 7
99366: ARRAY
99367: PPUSH
99368: LD_VAR 0 16
99372: PUSH
99373: LD_VAR 0 7
99377: ARRAY
99378: PUSH
99379: LD_INT 1
99381: ARRAY
99382: PUSH
99383: LD_INT 1
99385: ARRAY
99386: PPUSH
99387: LD_VAR 0 16
99391: PUSH
99392: LD_VAR 0 7
99396: ARRAY
99397: PUSH
99398: LD_INT 1
99400: ARRAY
99401: PUSH
99402: LD_INT 2
99404: ARRAY
99405: PPUSH
99406: CALL_OW 114
// end else
99410: GO 99463
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
99412: LD_ADDR_VAR 0 15
99416: PUSH
99417: LD_VAR 0 16
99421: PUSH
99422: LD_VAR 0 7
99426: ARRAY
99427: PPUSH
99428: LD_INT 1
99430: PPUSH
99431: CALL_OW 3
99435: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
99436: LD_ADDR_VAR 0 16
99440: PUSH
99441: LD_VAR 0 16
99445: PPUSH
99446: LD_VAR 0 7
99450: PPUSH
99451: LD_VAR 0 15
99455: PPUSH
99456: CALL_OW 1
99460: ST_TO_ADDR
// continue ;
99461: GO 98006
// end ; end ; end else
99463: GO 102127
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
99465: LD_ADDR_VAR 0 14
99469: PUSH
99470: LD_INT 81
99472: PUSH
99473: LD_VAR 0 4
99477: PUSH
99478: LD_VAR 0 7
99482: ARRAY
99483: PPUSH
99484: CALL_OW 255
99488: PUSH
99489: EMPTY
99490: LIST
99491: LIST
99492: PPUSH
99493: CALL_OW 69
99497: ST_TO_ADDR
// if not tmp then
99498: LD_VAR 0 14
99502: NOT
99503: IFFALSE 99507
// continue ;
99505: GO 98006
// if f_ignore_area then
99507: LD_VAR 0 17
99511: IFFALSE 99599
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
99513: LD_ADDR_VAR 0 15
99517: PUSH
99518: LD_VAR 0 14
99522: PPUSH
99523: LD_INT 3
99525: PUSH
99526: LD_INT 92
99528: PUSH
99529: LD_VAR 0 17
99533: PUSH
99534: LD_INT 1
99536: ARRAY
99537: PUSH
99538: LD_VAR 0 17
99542: PUSH
99543: LD_INT 2
99545: ARRAY
99546: PUSH
99547: LD_VAR 0 17
99551: PUSH
99552: LD_INT 3
99554: ARRAY
99555: PUSH
99556: EMPTY
99557: LIST
99558: LIST
99559: LIST
99560: LIST
99561: PUSH
99562: EMPTY
99563: LIST
99564: LIST
99565: PPUSH
99566: CALL_OW 72
99570: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
99571: LD_VAR 0 14
99575: PUSH
99576: LD_VAR 0 15
99580: DIFF
99581: IFFALSE 99599
// tmp := tmp diff tmp2 ;
99583: LD_ADDR_VAR 0 14
99587: PUSH
99588: LD_VAR 0 14
99592: PUSH
99593: LD_VAR 0 15
99597: DIFF
99598: ST_TO_ADDR
// end ; if not f_murder then
99599: LD_VAR 0 20
99603: NOT
99604: IFFALSE 99662
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
99606: LD_ADDR_VAR 0 15
99610: PUSH
99611: LD_VAR 0 14
99615: PPUSH
99616: LD_INT 3
99618: PUSH
99619: LD_INT 50
99621: PUSH
99622: EMPTY
99623: LIST
99624: PUSH
99625: EMPTY
99626: LIST
99627: LIST
99628: PPUSH
99629: CALL_OW 72
99633: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
99634: LD_VAR 0 14
99638: PUSH
99639: LD_VAR 0 15
99643: DIFF
99644: IFFALSE 99662
// tmp := tmp diff tmp2 ;
99646: LD_ADDR_VAR 0 14
99650: PUSH
99651: LD_VAR 0 14
99655: PUSH
99656: LD_VAR 0 15
99660: DIFF
99661: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
99662: LD_ADDR_VAR 0 14
99666: PUSH
99667: LD_VAR 0 4
99671: PUSH
99672: LD_VAR 0 7
99676: ARRAY
99677: PPUSH
99678: LD_VAR 0 14
99682: PPUSH
99683: LD_INT 1
99685: PPUSH
99686: LD_INT 1
99688: PPUSH
99689: CALL 24736 0 4
99693: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
99694: LD_VAR 0 4
99698: PUSH
99699: LD_VAR 0 7
99703: ARRAY
99704: PPUSH
99705: CALL_OW 257
99709: PUSH
99710: LD_INT 1
99712: EQUAL
99713: IFFALSE 100161
// begin if WantPlant ( group [ i ] ) then
99715: LD_VAR 0 4
99719: PUSH
99720: LD_VAR 0 7
99724: ARRAY
99725: PPUSH
99726: CALL 24237 0 1
99730: IFFALSE 99734
// continue ;
99732: GO 98006
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
99734: LD_VAR 0 18
99738: PUSH
99739: LD_VAR 0 4
99743: PUSH
99744: LD_VAR 0 7
99748: ARRAY
99749: PPUSH
99750: CALL_OW 310
99754: NOT
99755: AND
99756: PUSH
99757: LD_VAR 0 14
99761: PUSH
99762: LD_INT 1
99764: ARRAY
99765: PUSH
99766: LD_VAR 0 14
99770: PPUSH
99771: LD_INT 21
99773: PUSH
99774: LD_INT 2
99776: PUSH
99777: EMPTY
99778: LIST
99779: LIST
99780: PUSH
99781: LD_INT 58
99783: PUSH
99784: EMPTY
99785: LIST
99786: PUSH
99787: EMPTY
99788: LIST
99789: LIST
99790: PPUSH
99791: CALL_OW 72
99795: IN
99796: AND
99797: IFFALSE 99833
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
99799: LD_VAR 0 4
99803: PUSH
99804: LD_VAR 0 7
99808: ARRAY
99809: PPUSH
99810: LD_VAR 0 14
99814: PUSH
99815: LD_INT 1
99817: ARRAY
99818: PPUSH
99819: CALL_OW 120
// attacking := true ;
99823: LD_ADDR_VAR 0 29
99827: PUSH
99828: LD_INT 1
99830: ST_TO_ADDR
// continue ;
99831: GO 98006
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
99833: LD_VAR 0 26
99837: PUSH
99838: LD_VAR 0 4
99842: PUSH
99843: LD_VAR 0 7
99847: ARRAY
99848: PPUSH
99849: CALL_OW 257
99853: PUSH
99854: LD_INT 1
99856: EQUAL
99857: AND
99858: PUSH
99859: LD_VAR 0 4
99863: PUSH
99864: LD_VAR 0 7
99868: ARRAY
99869: PPUSH
99870: CALL_OW 256
99874: PUSH
99875: LD_INT 800
99877: LESS
99878: AND
99879: PUSH
99880: LD_VAR 0 4
99884: PUSH
99885: LD_VAR 0 7
99889: ARRAY
99890: PPUSH
99891: CALL_OW 318
99895: NOT
99896: AND
99897: IFFALSE 99914
// ComCrawl ( group [ i ] ) ;
99899: LD_VAR 0 4
99903: PUSH
99904: LD_VAR 0 7
99908: ARRAY
99909: PPUSH
99910: CALL_OW 137
// if f_mines then
99914: LD_VAR 0 21
99918: IFFALSE 100161
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
99920: LD_VAR 0 14
99924: PUSH
99925: LD_INT 1
99927: ARRAY
99928: PPUSH
99929: CALL_OW 247
99933: PUSH
99934: LD_INT 3
99936: EQUAL
99937: PUSH
99938: LD_VAR 0 14
99942: PUSH
99943: LD_INT 1
99945: ARRAY
99946: PUSH
99947: LD_VAR 0 27
99951: IN
99952: NOT
99953: AND
99954: IFFALSE 100161
// begin x := GetX ( tmp [ 1 ] ) ;
99956: LD_ADDR_VAR 0 10
99960: PUSH
99961: LD_VAR 0 14
99965: PUSH
99966: LD_INT 1
99968: ARRAY
99969: PPUSH
99970: CALL_OW 250
99974: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
99975: LD_ADDR_VAR 0 11
99979: PUSH
99980: LD_VAR 0 14
99984: PUSH
99985: LD_INT 1
99987: ARRAY
99988: PPUSH
99989: CALL_OW 251
99993: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
99994: LD_ADDR_VAR 0 12
99998: PUSH
99999: LD_VAR 0 4
100003: PUSH
100004: LD_VAR 0 7
100008: ARRAY
100009: PPUSH
100010: CALL 51178 0 1
100014: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
100015: LD_VAR 0 4
100019: PUSH
100020: LD_VAR 0 7
100024: ARRAY
100025: PPUSH
100026: LD_VAR 0 10
100030: PPUSH
100031: LD_VAR 0 11
100035: PPUSH
100036: LD_VAR 0 14
100040: PUSH
100041: LD_INT 1
100043: ARRAY
100044: PPUSH
100045: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
100049: LD_VAR 0 4
100053: PUSH
100054: LD_VAR 0 7
100058: ARRAY
100059: PPUSH
100060: LD_VAR 0 10
100064: PPUSH
100065: LD_VAR 0 12
100069: PPUSH
100070: LD_INT 7
100072: PPUSH
100073: CALL_OW 272
100077: PPUSH
100078: LD_VAR 0 11
100082: PPUSH
100083: LD_VAR 0 12
100087: PPUSH
100088: LD_INT 7
100090: PPUSH
100091: CALL_OW 273
100095: PPUSH
100096: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
100100: LD_VAR 0 4
100104: PUSH
100105: LD_VAR 0 7
100109: ARRAY
100110: PPUSH
100111: LD_INT 71
100113: PPUSH
100114: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
100118: LD_ADDR_VAR 0 27
100122: PUSH
100123: LD_VAR 0 27
100127: PPUSH
100128: LD_VAR 0 27
100132: PUSH
100133: LD_INT 1
100135: PLUS
100136: PPUSH
100137: LD_VAR 0 14
100141: PUSH
100142: LD_INT 1
100144: ARRAY
100145: PPUSH
100146: CALL_OW 1
100150: ST_TO_ADDR
// attacking := true ;
100151: LD_ADDR_VAR 0 29
100155: PUSH
100156: LD_INT 1
100158: ST_TO_ADDR
// continue ;
100159: GO 98006
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
100161: LD_VAR 0 4
100165: PUSH
100166: LD_VAR 0 7
100170: ARRAY
100171: PPUSH
100172: CALL_OW 257
100176: PUSH
100177: LD_INT 17
100179: EQUAL
100180: PUSH
100181: LD_VAR 0 4
100185: PUSH
100186: LD_VAR 0 7
100190: ARRAY
100191: PPUSH
100192: CALL_OW 110
100196: PUSH
100197: LD_INT 71
100199: EQUAL
100200: NOT
100201: AND
100202: IFFALSE 100348
// begin attacking := false ;
100204: LD_ADDR_VAR 0 29
100208: PUSH
100209: LD_INT 0
100211: ST_TO_ADDR
// k := 5 ;
100212: LD_ADDR_VAR 0 9
100216: PUSH
100217: LD_INT 5
100219: ST_TO_ADDR
// if tmp < k then
100220: LD_VAR 0 14
100224: PUSH
100225: LD_VAR 0 9
100229: LESS
100230: IFFALSE 100242
// k := tmp ;
100232: LD_ADDR_VAR 0 9
100236: PUSH
100237: LD_VAR 0 14
100241: ST_TO_ADDR
// for j = 1 to k do
100242: LD_ADDR_VAR 0 8
100246: PUSH
100247: DOUBLE
100248: LD_INT 1
100250: DEC
100251: ST_TO_ADDR
100252: LD_VAR 0 9
100256: PUSH
100257: FOR_TO
100258: IFFALSE 100346
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
100260: LD_VAR 0 14
100264: PUSH
100265: LD_VAR 0 8
100269: ARRAY
100270: PUSH
100271: LD_VAR 0 14
100275: PPUSH
100276: LD_INT 58
100278: PUSH
100279: EMPTY
100280: LIST
100281: PPUSH
100282: CALL_OW 72
100286: IN
100287: NOT
100288: IFFALSE 100344
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
100290: LD_VAR 0 4
100294: PUSH
100295: LD_VAR 0 7
100299: ARRAY
100300: PPUSH
100301: LD_VAR 0 14
100305: PUSH
100306: LD_VAR 0 8
100310: ARRAY
100311: PPUSH
100312: CALL_OW 115
// attacking := true ;
100316: LD_ADDR_VAR 0 29
100320: PUSH
100321: LD_INT 1
100323: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
100324: LD_VAR 0 4
100328: PUSH
100329: LD_VAR 0 7
100333: ARRAY
100334: PPUSH
100335: LD_INT 71
100337: PPUSH
100338: CALL_OW 109
// continue ;
100342: GO 100257
// end ; end ;
100344: GO 100257
100346: POP
100347: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
100348: LD_VAR 0 4
100352: PUSH
100353: LD_VAR 0 7
100357: ARRAY
100358: PPUSH
100359: CALL_OW 257
100363: PUSH
100364: LD_INT 8
100366: EQUAL
100367: PUSH
100368: LD_VAR 0 4
100372: PUSH
100373: LD_VAR 0 7
100377: ARRAY
100378: PPUSH
100379: CALL_OW 264
100383: PUSH
100384: LD_INT 28
100386: PUSH
100387: LD_INT 45
100389: PUSH
100390: LD_INT 7
100392: PUSH
100393: LD_INT 47
100395: PUSH
100396: EMPTY
100397: LIST
100398: LIST
100399: LIST
100400: LIST
100401: IN
100402: OR
100403: IFFALSE 100659
// begin attacking := false ;
100405: LD_ADDR_VAR 0 29
100409: PUSH
100410: LD_INT 0
100412: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
100413: LD_VAR 0 14
100417: PUSH
100418: LD_INT 1
100420: ARRAY
100421: PPUSH
100422: CALL_OW 266
100426: PUSH
100427: LD_INT 32
100429: PUSH
100430: LD_INT 31
100432: PUSH
100433: LD_INT 33
100435: PUSH
100436: LD_INT 4
100438: PUSH
100439: LD_INT 5
100441: PUSH
100442: EMPTY
100443: LIST
100444: LIST
100445: LIST
100446: LIST
100447: LIST
100448: IN
100449: IFFALSE 100635
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
100451: LD_ADDR_VAR 0 9
100455: PUSH
100456: LD_VAR 0 14
100460: PUSH
100461: LD_INT 1
100463: ARRAY
100464: PPUSH
100465: CALL_OW 266
100469: PPUSH
100470: LD_VAR 0 14
100474: PUSH
100475: LD_INT 1
100477: ARRAY
100478: PPUSH
100479: CALL_OW 250
100483: PPUSH
100484: LD_VAR 0 14
100488: PUSH
100489: LD_INT 1
100491: ARRAY
100492: PPUSH
100493: CALL_OW 251
100497: PPUSH
100498: LD_VAR 0 14
100502: PUSH
100503: LD_INT 1
100505: ARRAY
100506: PPUSH
100507: CALL_OW 254
100511: PPUSH
100512: LD_VAR 0 14
100516: PUSH
100517: LD_INT 1
100519: ARRAY
100520: PPUSH
100521: CALL_OW 248
100525: PPUSH
100526: LD_INT 0
100528: PPUSH
100529: CALL 32548 0 6
100533: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
100534: LD_ADDR_VAR 0 8
100538: PUSH
100539: LD_VAR 0 4
100543: PUSH
100544: LD_VAR 0 7
100548: ARRAY
100549: PPUSH
100550: LD_VAR 0 9
100554: PPUSH
100555: CALL 51218 0 2
100559: ST_TO_ADDR
// if j then
100560: LD_VAR 0 8
100564: IFFALSE 100633
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
100566: LD_VAR 0 8
100570: PUSH
100571: LD_INT 1
100573: ARRAY
100574: PPUSH
100575: LD_VAR 0 8
100579: PUSH
100580: LD_INT 2
100582: ARRAY
100583: PPUSH
100584: CALL_OW 488
100588: IFFALSE 100633
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
100590: LD_VAR 0 4
100594: PUSH
100595: LD_VAR 0 7
100599: ARRAY
100600: PPUSH
100601: LD_VAR 0 8
100605: PUSH
100606: LD_INT 1
100608: ARRAY
100609: PPUSH
100610: LD_VAR 0 8
100614: PUSH
100615: LD_INT 2
100617: ARRAY
100618: PPUSH
100619: CALL_OW 116
// attacking := true ;
100623: LD_ADDR_VAR 0 29
100627: PUSH
100628: LD_INT 1
100630: ST_TO_ADDR
// continue ;
100631: GO 98006
// end ; end else
100633: GO 100659
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
100635: LD_VAR 0 4
100639: PUSH
100640: LD_VAR 0 7
100644: ARRAY
100645: PPUSH
100646: LD_VAR 0 14
100650: PUSH
100651: LD_INT 1
100653: ARRAY
100654: PPUSH
100655: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
100659: LD_VAR 0 4
100663: PUSH
100664: LD_VAR 0 7
100668: ARRAY
100669: PPUSH
100670: CALL_OW 265
100674: PUSH
100675: LD_INT 11
100677: EQUAL
100678: IFFALSE 100956
// begin k := 10 ;
100680: LD_ADDR_VAR 0 9
100684: PUSH
100685: LD_INT 10
100687: ST_TO_ADDR
// x := 0 ;
100688: LD_ADDR_VAR 0 10
100692: PUSH
100693: LD_INT 0
100695: ST_TO_ADDR
// if tmp < k then
100696: LD_VAR 0 14
100700: PUSH
100701: LD_VAR 0 9
100705: LESS
100706: IFFALSE 100718
// k := tmp ;
100708: LD_ADDR_VAR 0 9
100712: PUSH
100713: LD_VAR 0 14
100717: ST_TO_ADDR
// for j = k downto 1 do
100718: LD_ADDR_VAR 0 8
100722: PUSH
100723: DOUBLE
100724: LD_VAR 0 9
100728: INC
100729: ST_TO_ADDR
100730: LD_INT 1
100732: PUSH
100733: FOR_DOWNTO
100734: IFFALSE 100809
// begin if GetType ( tmp [ j ] ) = unit_human then
100736: LD_VAR 0 14
100740: PUSH
100741: LD_VAR 0 8
100745: ARRAY
100746: PPUSH
100747: CALL_OW 247
100751: PUSH
100752: LD_INT 1
100754: EQUAL
100755: IFFALSE 100807
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
100757: LD_VAR 0 4
100761: PUSH
100762: LD_VAR 0 7
100766: ARRAY
100767: PPUSH
100768: LD_VAR 0 14
100772: PUSH
100773: LD_VAR 0 8
100777: ARRAY
100778: PPUSH
100779: CALL 51489 0 2
// x := tmp [ j ] ;
100783: LD_ADDR_VAR 0 10
100787: PUSH
100788: LD_VAR 0 14
100792: PUSH
100793: LD_VAR 0 8
100797: ARRAY
100798: ST_TO_ADDR
// attacking := true ;
100799: LD_ADDR_VAR 0 29
100803: PUSH
100804: LD_INT 1
100806: ST_TO_ADDR
// end ; end ;
100807: GO 100733
100809: POP
100810: POP
// if not x then
100811: LD_VAR 0 10
100815: NOT
100816: IFFALSE 100956
// begin attacking := true ;
100818: LD_ADDR_VAR 0 29
100822: PUSH
100823: LD_INT 1
100825: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
100826: LD_VAR 0 4
100830: PUSH
100831: LD_VAR 0 7
100835: ARRAY
100836: PPUSH
100837: CALL_OW 250
100841: PPUSH
100842: LD_VAR 0 4
100846: PUSH
100847: LD_VAR 0 7
100851: ARRAY
100852: PPUSH
100853: CALL_OW 251
100857: PPUSH
100858: CALL_OW 546
100862: PUSH
100863: LD_INT 2
100865: ARRAY
100866: PUSH
100867: LD_VAR 0 14
100871: PUSH
100872: LD_INT 1
100874: ARRAY
100875: PPUSH
100876: CALL_OW 250
100880: PPUSH
100881: LD_VAR 0 14
100885: PUSH
100886: LD_INT 1
100888: ARRAY
100889: PPUSH
100890: CALL_OW 251
100894: PPUSH
100895: CALL_OW 546
100899: PUSH
100900: LD_INT 2
100902: ARRAY
100903: EQUAL
100904: IFFALSE 100932
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
100906: LD_VAR 0 4
100910: PUSH
100911: LD_VAR 0 7
100915: ARRAY
100916: PPUSH
100917: LD_VAR 0 14
100921: PUSH
100922: LD_INT 1
100924: ARRAY
100925: PPUSH
100926: CALL 51489 0 2
100930: GO 100956
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
100932: LD_VAR 0 4
100936: PUSH
100937: LD_VAR 0 7
100941: ARRAY
100942: PPUSH
100943: LD_VAR 0 14
100947: PUSH
100948: LD_INT 1
100950: ARRAY
100951: PPUSH
100952: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
100956: LD_VAR 0 4
100960: PUSH
100961: LD_VAR 0 7
100965: ARRAY
100966: PPUSH
100967: CALL_OW 264
100971: PUSH
100972: LD_INT 29
100974: EQUAL
100975: IFFALSE 101341
// begin if WantsToAttack ( group [ i ] ) in bombed then
100977: LD_VAR 0 4
100981: PUSH
100982: LD_VAR 0 7
100986: ARRAY
100987: PPUSH
100988: CALL_OW 319
100992: PUSH
100993: LD_VAR 0 28
100997: IN
100998: IFFALSE 101002
// continue ;
101000: GO 98006
// k := 8 ;
101002: LD_ADDR_VAR 0 9
101006: PUSH
101007: LD_INT 8
101009: ST_TO_ADDR
// x := 0 ;
101010: LD_ADDR_VAR 0 10
101014: PUSH
101015: LD_INT 0
101017: ST_TO_ADDR
// if tmp < k then
101018: LD_VAR 0 14
101022: PUSH
101023: LD_VAR 0 9
101027: LESS
101028: IFFALSE 101040
// k := tmp ;
101030: LD_ADDR_VAR 0 9
101034: PUSH
101035: LD_VAR 0 14
101039: ST_TO_ADDR
// for j = 1 to k do
101040: LD_ADDR_VAR 0 8
101044: PUSH
101045: DOUBLE
101046: LD_INT 1
101048: DEC
101049: ST_TO_ADDR
101050: LD_VAR 0 9
101054: PUSH
101055: FOR_TO
101056: IFFALSE 101188
// begin if GetType ( tmp [ j ] ) = unit_building then
101058: LD_VAR 0 14
101062: PUSH
101063: LD_VAR 0 8
101067: ARRAY
101068: PPUSH
101069: CALL_OW 247
101073: PUSH
101074: LD_INT 3
101076: EQUAL
101077: IFFALSE 101186
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
101079: LD_VAR 0 14
101083: PUSH
101084: LD_VAR 0 8
101088: ARRAY
101089: PUSH
101090: LD_VAR 0 28
101094: IN
101095: NOT
101096: PUSH
101097: LD_VAR 0 14
101101: PUSH
101102: LD_VAR 0 8
101106: ARRAY
101107: PPUSH
101108: CALL_OW 313
101112: AND
101113: IFFALSE 101186
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
101115: LD_VAR 0 4
101119: PUSH
101120: LD_VAR 0 7
101124: ARRAY
101125: PPUSH
101126: LD_VAR 0 14
101130: PUSH
101131: LD_VAR 0 8
101135: ARRAY
101136: PPUSH
101137: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
101141: LD_ADDR_VAR 0 28
101145: PUSH
101146: LD_VAR 0 28
101150: PPUSH
101151: LD_VAR 0 28
101155: PUSH
101156: LD_INT 1
101158: PLUS
101159: PPUSH
101160: LD_VAR 0 14
101164: PUSH
101165: LD_VAR 0 8
101169: ARRAY
101170: PPUSH
101171: CALL_OW 1
101175: ST_TO_ADDR
// attacking := true ;
101176: LD_ADDR_VAR 0 29
101180: PUSH
101181: LD_INT 1
101183: ST_TO_ADDR
// break ;
101184: GO 101188
// end ; end ;
101186: GO 101055
101188: POP
101189: POP
// if not attacking and f_attack_depot then
101190: LD_VAR 0 29
101194: NOT
101195: PUSH
101196: LD_VAR 0 25
101200: AND
101201: IFFALSE 101296
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
101203: LD_ADDR_VAR 0 13
101207: PUSH
101208: LD_VAR 0 14
101212: PPUSH
101213: LD_INT 2
101215: PUSH
101216: LD_INT 30
101218: PUSH
101219: LD_INT 0
101221: PUSH
101222: EMPTY
101223: LIST
101224: LIST
101225: PUSH
101226: LD_INT 30
101228: PUSH
101229: LD_INT 1
101231: PUSH
101232: EMPTY
101233: LIST
101234: LIST
101235: PUSH
101236: EMPTY
101237: LIST
101238: LIST
101239: LIST
101240: PPUSH
101241: CALL_OW 72
101245: ST_TO_ADDR
// if z then
101246: LD_VAR 0 13
101250: IFFALSE 101296
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
101252: LD_VAR 0 4
101256: PUSH
101257: LD_VAR 0 7
101261: ARRAY
101262: PPUSH
101263: LD_VAR 0 13
101267: PPUSH
101268: LD_VAR 0 4
101272: PUSH
101273: LD_VAR 0 7
101277: ARRAY
101278: PPUSH
101279: CALL_OW 74
101283: PPUSH
101284: CALL_OW 115
// attacking := true ;
101288: LD_ADDR_VAR 0 29
101292: PUSH
101293: LD_INT 1
101295: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
101296: LD_VAR 0 4
101300: PUSH
101301: LD_VAR 0 7
101305: ARRAY
101306: PPUSH
101307: CALL_OW 256
101311: PUSH
101312: LD_INT 500
101314: LESS
101315: IFFALSE 101341
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
101317: LD_VAR 0 4
101321: PUSH
101322: LD_VAR 0 7
101326: ARRAY
101327: PPUSH
101328: LD_VAR 0 14
101332: PUSH
101333: LD_INT 1
101335: ARRAY
101336: PPUSH
101337: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
101341: LD_VAR 0 4
101345: PUSH
101346: LD_VAR 0 7
101350: ARRAY
101351: PPUSH
101352: CALL_OW 264
101356: PUSH
101357: LD_INT 49
101359: EQUAL
101360: IFFALSE 101481
// begin if not HasTask ( group [ i ] ) then
101362: LD_VAR 0 4
101366: PUSH
101367: LD_VAR 0 7
101371: ARRAY
101372: PPUSH
101373: CALL_OW 314
101377: NOT
101378: IFFALSE 101481
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
101380: LD_ADDR_VAR 0 9
101384: PUSH
101385: LD_INT 81
101387: PUSH
101388: LD_VAR 0 4
101392: PUSH
101393: LD_VAR 0 7
101397: ARRAY
101398: PPUSH
101399: CALL_OW 255
101403: PUSH
101404: EMPTY
101405: LIST
101406: LIST
101407: PPUSH
101408: CALL_OW 69
101412: PPUSH
101413: LD_VAR 0 4
101417: PUSH
101418: LD_VAR 0 7
101422: ARRAY
101423: PPUSH
101424: CALL_OW 74
101428: ST_TO_ADDR
// if k then
101429: LD_VAR 0 9
101433: IFFALSE 101481
// if GetDistUnits ( group [ i ] , k ) > 10 then
101435: LD_VAR 0 4
101439: PUSH
101440: LD_VAR 0 7
101444: ARRAY
101445: PPUSH
101446: LD_VAR 0 9
101450: PPUSH
101451: CALL_OW 296
101455: PUSH
101456: LD_INT 10
101458: GREATER
101459: IFFALSE 101481
// ComMoveUnit ( group [ i ] , k ) ;
101461: LD_VAR 0 4
101465: PUSH
101466: LD_VAR 0 7
101470: ARRAY
101471: PPUSH
101472: LD_VAR 0 9
101476: PPUSH
101477: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
101481: LD_VAR 0 4
101485: PUSH
101486: LD_VAR 0 7
101490: ARRAY
101491: PPUSH
101492: CALL_OW 256
101496: PUSH
101497: LD_INT 250
101499: LESS
101500: PUSH
101501: LD_VAR 0 4
101505: PUSH
101506: LD_VAR 0 7
101510: ARRAY
101511: PUSH
101512: LD_INT 21
101514: PUSH
101515: LD_INT 2
101517: PUSH
101518: EMPTY
101519: LIST
101520: LIST
101521: PUSH
101522: LD_INT 23
101524: PUSH
101525: LD_INT 2
101527: PUSH
101528: EMPTY
101529: LIST
101530: LIST
101531: PUSH
101532: EMPTY
101533: LIST
101534: LIST
101535: PPUSH
101536: CALL_OW 69
101540: IN
101541: AND
101542: IFFALSE 101667
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
101544: LD_ADDR_VAR 0 9
101548: PUSH
101549: LD_OWVAR 3
101553: PUSH
101554: LD_VAR 0 4
101558: PUSH
101559: LD_VAR 0 7
101563: ARRAY
101564: DIFF
101565: PPUSH
101566: LD_VAR 0 4
101570: PUSH
101571: LD_VAR 0 7
101575: ARRAY
101576: PPUSH
101577: CALL_OW 74
101581: ST_TO_ADDR
// if not k then
101582: LD_VAR 0 9
101586: NOT
101587: IFFALSE 101591
// continue ;
101589: GO 98006
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
101591: LD_VAR 0 9
101595: PUSH
101596: LD_INT 81
101598: PUSH
101599: LD_VAR 0 4
101603: PUSH
101604: LD_VAR 0 7
101608: ARRAY
101609: PPUSH
101610: CALL_OW 255
101614: PUSH
101615: EMPTY
101616: LIST
101617: LIST
101618: PPUSH
101619: CALL_OW 69
101623: IN
101624: PUSH
101625: LD_VAR 0 9
101629: PPUSH
101630: LD_VAR 0 4
101634: PUSH
101635: LD_VAR 0 7
101639: ARRAY
101640: PPUSH
101641: CALL_OW 296
101645: PUSH
101646: LD_INT 5
101648: LESS
101649: AND
101650: IFFALSE 101667
// ComAutodestruct ( group [ i ] ) ;
101652: LD_VAR 0 4
101656: PUSH
101657: LD_VAR 0 7
101661: ARRAY
101662: PPUSH
101663: CALL 51387 0 1
// end ; if f_attack_depot then
101667: LD_VAR 0 25
101671: IFFALSE 101783
// begin k := 6 ;
101673: LD_ADDR_VAR 0 9
101677: PUSH
101678: LD_INT 6
101680: ST_TO_ADDR
// if tmp < k then
101681: LD_VAR 0 14
101685: PUSH
101686: LD_VAR 0 9
101690: LESS
101691: IFFALSE 101703
// k := tmp ;
101693: LD_ADDR_VAR 0 9
101697: PUSH
101698: LD_VAR 0 14
101702: ST_TO_ADDR
// for j = 1 to k do
101703: LD_ADDR_VAR 0 8
101707: PUSH
101708: DOUBLE
101709: LD_INT 1
101711: DEC
101712: ST_TO_ADDR
101713: LD_VAR 0 9
101717: PUSH
101718: FOR_TO
101719: IFFALSE 101781
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
101721: LD_VAR 0 8
101725: PPUSH
101726: CALL_OW 266
101730: PUSH
101731: LD_INT 0
101733: PUSH
101734: LD_INT 1
101736: PUSH
101737: EMPTY
101738: LIST
101739: LIST
101740: IN
101741: IFFALSE 101779
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
101743: LD_VAR 0 4
101747: PUSH
101748: LD_VAR 0 7
101752: ARRAY
101753: PPUSH
101754: LD_VAR 0 14
101758: PUSH
101759: LD_VAR 0 8
101763: ARRAY
101764: PPUSH
101765: CALL_OW 115
// attacking := true ;
101769: LD_ADDR_VAR 0 29
101773: PUSH
101774: LD_INT 1
101776: ST_TO_ADDR
// break ;
101777: GO 101781
// end ;
101779: GO 101718
101781: POP
101782: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
101783: LD_VAR 0 4
101787: PUSH
101788: LD_VAR 0 7
101792: ARRAY
101793: PPUSH
101794: CALL_OW 302
101798: PUSH
101799: LD_VAR 0 29
101803: NOT
101804: AND
101805: IFFALSE 102127
// begin if GetTag ( group [ i ] ) = 71 then
101807: LD_VAR 0 4
101811: PUSH
101812: LD_VAR 0 7
101816: ARRAY
101817: PPUSH
101818: CALL_OW 110
101822: PUSH
101823: LD_INT 71
101825: EQUAL
101826: IFFALSE 101867
// begin if HasTask ( group [ i ] ) then
101828: LD_VAR 0 4
101832: PUSH
101833: LD_VAR 0 7
101837: ARRAY
101838: PPUSH
101839: CALL_OW 314
101843: IFFALSE 101849
// continue else
101845: GO 98006
101847: GO 101867
// SetTag ( group [ i ] , 0 ) ;
101849: LD_VAR 0 4
101853: PUSH
101854: LD_VAR 0 7
101858: ARRAY
101859: PPUSH
101860: LD_INT 0
101862: PPUSH
101863: CALL_OW 109
// end ; k := 8 ;
101867: LD_ADDR_VAR 0 9
101871: PUSH
101872: LD_INT 8
101874: ST_TO_ADDR
// x := 0 ;
101875: LD_ADDR_VAR 0 10
101879: PUSH
101880: LD_INT 0
101882: ST_TO_ADDR
// if tmp < k then
101883: LD_VAR 0 14
101887: PUSH
101888: LD_VAR 0 9
101892: LESS
101893: IFFALSE 101905
// k := tmp ;
101895: LD_ADDR_VAR 0 9
101899: PUSH
101900: LD_VAR 0 14
101904: ST_TO_ADDR
// for j = 1 to k do
101905: LD_ADDR_VAR 0 8
101909: PUSH
101910: DOUBLE
101911: LD_INT 1
101913: DEC
101914: ST_TO_ADDR
101915: LD_VAR 0 9
101919: PUSH
101920: FOR_TO
101921: IFFALSE 102019
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
101923: LD_VAR 0 14
101927: PUSH
101928: LD_VAR 0 8
101932: ARRAY
101933: PPUSH
101934: CALL_OW 247
101938: PUSH
101939: LD_INT 1
101941: EQUAL
101942: PUSH
101943: LD_VAR 0 14
101947: PUSH
101948: LD_VAR 0 8
101952: ARRAY
101953: PPUSH
101954: CALL_OW 256
101958: PUSH
101959: LD_INT 250
101961: LESS
101962: PUSH
101963: LD_VAR 0 20
101967: AND
101968: PUSH
101969: LD_VAR 0 20
101973: NOT
101974: PUSH
101975: LD_VAR 0 14
101979: PUSH
101980: LD_VAR 0 8
101984: ARRAY
101985: PPUSH
101986: CALL_OW 256
101990: PUSH
101991: LD_INT 250
101993: GREATEREQUAL
101994: AND
101995: OR
101996: AND
101997: IFFALSE 102017
// begin x := tmp [ j ] ;
101999: LD_ADDR_VAR 0 10
102003: PUSH
102004: LD_VAR 0 14
102008: PUSH
102009: LD_VAR 0 8
102013: ARRAY
102014: ST_TO_ADDR
// break ;
102015: GO 102019
// end ;
102017: GO 101920
102019: POP
102020: POP
// if x then
102021: LD_VAR 0 10
102025: IFFALSE 102049
// ComAttackUnit ( group [ i ] , x ) else
102027: LD_VAR 0 4
102031: PUSH
102032: LD_VAR 0 7
102036: ARRAY
102037: PPUSH
102038: LD_VAR 0 10
102042: PPUSH
102043: CALL_OW 115
102047: GO 102073
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
102049: LD_VAR 0 4
102053: PUSH
102054: LD_VAR 0 7
102058: ARRAY
102059: PPUSH
102060: LD_VAR 0 14
102064: PUSH
102065: LD_INT 1
102067: ARRAY
102068: PPUSH
102069: CALL_OW 115
// if not HasTask ( group [ i ] ) then
102073: LD_VAR 0 4
102077: PUSH
102078: LD_VAR 0 7
102082: ARRAY
102083: PPUSH
102084: CALL_OW 314
102088: NOT
102089: IFFALSE 102127
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
102091: LD_VAR 0 4
102095: PUSH
102096: LD_VAR 0 7
102100: ARRAY
102101: PPUSH
102102: LD_VAR 0 14
102106: PPUSH
102107: LD_VAR 0 4
102111: PUSH
102112: LD_VAR 0 7
102116: ARRAY
102117: PPUSH
102118: CALL_OW 74
102122: PPUSH
102123: CALL_OW 115
// end ; end ; end ;
102127: GO 98006
102129: POP
102130: POP
// wait ( 0 0$2 ) ;
102131: LD_INT 70
102133: PPUSH
102134: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
102138: LD_VAR 0 4
102142: NOT
102143: PUSH
102144: LD_VAR 0 4
102148: PUSH
102149: EMPTY
102150: EQUAL
102151: OR
102152: PUSH
102153: LD_INT 81
102155: PUSH
102156: LD_VAR 0 35
102160: PUSH
102161: EMPTY
102162: LIST
102163: LIST
102164: PPUSH
102165: CALL_OW 69
102169: NOT
102170: OR
102171: IFFALSE 97991
// end ;
102173: LD_VAR 0 2
102177: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
102178: LD_INT 0
102180: PPUSH
102181: PPUSH
102182: PPUSH
102183: PPUSH
102184: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
102185: LD_VAR 0 1
102189: NOT
102190: PUSH
102191: LD_EXP 45
102195: PUSH
102196: LD_VAR 0 1
102200: ARRAY
102201: NOT
102202: OR
102203: PUSH
102204: LD_VAR 0 2
102208: NOT
102209: OR
102210: PUSH
102211: LD_VAR 0 3
102215: NOT
102216: OR
102217: IFFALSE 102221
// exit ;
102219: GO 102734
// side := mc_sides [ base ] ;
102221: LD_ADDR_VAR 0 6
102225: PUSH
102226: LD_EXP 71
102230: PUSH
102231: LD_VAR 0 1
102235: ARRAY
102236: ST_TO_ADDR
// if not side then
102237: LD_VAR 0 6
102241: NOT
102242: IFFALSE 102246
// exit ;
102244: GO 102734
// for i in solds do
102246: LD_ADDR_VAR 0 7
102250: PUSH
102251: LD_VAR 0 2
102255: PUSH
102256: FOR_IN
102257: IFFALSE 102318
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
102259: LD_VAR 0 7
102263: PPUSH
102264: CALL_OW 310
102268: PPUSH
102269: CALL_OW 266
102273: PUSH
102274: LD_INT 32
102276: PUSH
102277: LD_INT 31
102279: PUSH
102280: EMPTY
102281: LIST
102282: LIST
102283: IN
102284: IFFALSE 102304
// solds := solds diff i else
102286: LD_ADDR_VAR 0 2
102290: PUSH
102291: LD_VAR 0 2
102295: PUSH
102296: LD_VAR 0 7
102300: DIFF
102301: ST_TO_ADDR
102302: GO 102316
// SetTag ( i , 18 ) ;
102304: LD_VAR 0 7
102308: PPUSH
102309: LD_INT 18
102311: PPUSH
102312: CALL_OW 109
102316: GO 102256
102318: POP
102319: POP
// if not solds then
102320: LD_VAR 0 2
102324: NOT
102325: IFFALSE 102329
// exit ;
102327: GO 102734
// repeat wait ( 0 0$1 ) ;
102329: LD_INT 35
102331: PPUSH
102332: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
102336: LD_ADDR_VAR 0 5
102340: PUSH
102341: LD_VAR 0 6
102345: PPUSH
102346: LD_VAR 0 3
102350: PPUSH
102351: CALL 21102 0 2
102355: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
102356: LD_EXP 45
102360: PUSH
102361: LD_VAR 0 1
102365: ARRAY
102366: NOT
102367: PUSH
102368: LD_EXP 45
102372: PUSH
102373: LD_VAR 0 1
102377: ARRAY
102378: PUSH
102379: EMPTY
102380: EQUAL
102381: OR
102382: IFFALSE 102419
// begin for i in solds do
102384: LD_ADDR_VAR 0 7
102388: PUSH
102389: LD_VAR 0 2
102393: PUSH
102394: FOR_IN
102395: IFFALSE 102408
// ComStop ( i ) ;
102397: LD_VAR 0 7
102401: PPUSH
102402: CALL_OW 141
102406: GO 102394
102408: POP
102409: POP
// solds := [ ] ;
102410: LD_ADDR_VAR 0 2
102414: PUSH
102415: EMPTY
102416: ST_TO_ADDR
// exit ;
102417: GO 102734
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
102419: LD_VAR 0 5
102423: NOT
102424: PUSH
102425: LD_VAR 0 5
102429: PUSH
102430: LD_INT 3
102432: GREATER
102433: OR
102434: PUSH
102435: LD_EXP 67
102439: PUSH
102440: LD_VAR 0 1
102444: ARRAY
102445: OR
102446: IFFALSE 102487
// begin for i in solds do
102448: LD_ADDR_VAR 0 7
102452: PUSH
102453: LD_VAR 0 2
102457: PUSH
102458: FOR_IN
102459: IFFALSE 102483
// if HasTask ( i ) then
102461: LD_VAR 0 7
102465: PPUSH
102466: CALL_OW 314
102470: IFFALSE 102481
// ComStop ( i ) ;
102472: LD_VAR 0 7
102476: PPUSH
102477: CALL_OW 141
102481: GO 102458
102483: POP
102484: POP
// break ;
102485: GO 102722
// end ; for i in solds do
102487: LD_ADDR_VAR 0 7
102491: PUSH
102492: LD_VAR 0 2
102496: PUSH
102497: FOR_IN
102498: IFFALSE 102714
// begin if IsInUnit ( i ) then
102500: LD_VAR 0 7
102504: PPUSH
102505: CALL_OW 310
102509: IFFALSE 102520
// ComExitBuilding ( i ) ;
102511: LD_VAR 0 7
102515: PPUSH
102516: CALL_OW 122
// if GetLives ( i ) > 333 then
102520: LD_VAR 0 7
102524: PPUSH
102525: CALL_OW 256
102529: PUSH
102530: LD_INT 333
102532: GREATER
102533: IFFALSE 102561
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
102535: LD_VAR 0 7
102539: PPUSH
102540: LD_VAR 0 5
102544: PPUSH
102545: LD_VAR 0 7
102549: PPUSH
102550: CALL_OW 74
102554: PPUSH
102555: CALL_OW 115
102559: GO 102712
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
102561: LD_ADDR_VAR 0 8
102565: PUSH
102566: LD_EXP 45
102570: PUSH
102571: LD_VAR 0 1
102575: ARRAY
102576: PPUSH
102577: LD_INT 2
102579: PUSH
102580: LD_INT 30
102582: PUSH
102583: LD_INT 0
102585: PUSH
102586: EMPTY
102587: LIST
102588: LIST
102589: PUSH
102590: LD_INT 30
102592: PUSH
102593: LD_INT 1
102595: PUSH
102596: EMPTY
102597: LIST
102598: LIST
102599: PUSH
102600: LD_INT 30
102602: PUSH
102603: LD_INT 6
102605: PUSH
102606: EMPTY
102607: LIST
102608: LIST
102609: PUSH
102610: EMPTY
102611: LIST
102612: LIST
102613: LIST
102614: LIST
102615: PPUSH
102616: CALL_OW 72
102620: PPUSH
102621: LD_VAR 0 7
102625: PPUSH
102626: CALL_OW 74
102630: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
102631: LD_VAR 0 7
102635: PPUSH
102636: LD_VAR 0 8
102640: PPUSH
102641: CALL_OW 250
102645: PPUSH
102646: LD_INT 3
102648: PPUSH
102649: LD_INT 5
102651: PPUSH
102652: CALL_OW 272
102656: PPUSH
102657: LD_VAR 0 8
102661: PPUSH
102662: CALL_OW 251
102666: PPUSH
102667: LD_INT 3
102669: PPUSH
102670: LD_INT 5
102672: PPUSH
102673: CALL_OW 273
102677: PPUSH
102678: CALL_OW 111
// SetTag ( i , 0 ) ;
102682: LD_VAR 0 7
102686: PPUSH
102687: LD_INT 0
102689: PPUSH
102690: CALL_OW 109
// solds := solds diff i ;
102694: LD_ADDR_VAR 0 2
102698: PUSH
102699: LD_VAR 0 2
102703: PUSH
102704: LD_VAR 0 7
102708: DIFF
102709: ST_TO_ADDR
// continue ;
102710: GO 102497
// end ; end ;
102712: GO 102497
102714: POP
102715: POP
// until solds ;
102716: LD_VAR 0 2
102720: IFFALSE 102329
// MC_Reset ( base , 18 ) ;
102722: LD_VAR 0 1
102726: PPUSH
102727: LD_INT 18
102729: PPUSH
102730: CALL 59897 0 2
// end ;
102734: LD_VAR 0 4
102738: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
102739: LD_INT 0
102741: PPUSH
102742: PPUSH
102743: PPUSH
102744: PPUSH
102745: PPUSH
102746: PPUSH
102747: PPUSH
102748: PPUSH
102749: PPUSH
102750: PPUSH
102751: PPUSH
102752: PPUSH
102753: PPUSH
102754: PPUSH
102755: PPUSH
102756: PPUSH
102757: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
102758: LD_ADDR_VAR 0 13
102762: PUSH
102763: LD_EXP 45
102767: PUSH
102768: LD_VAR 0 1
102772: ARRAY
102773: PPUSH
102774: LD_INT 25
102776: PUSH
102777: LD_INT 3
102779: PUSH
102780: EMPTY
102781: LIST
102782: LIST
102783: PPUSH
102784: CALL_OW 72
102788: ST_TO_ADDR
// if mc_remote_driver [ base ] then
102789: LD_EXP 85
102793: PUSH
102794: LD_VAR 0 1
102798: ARRAY
102799: IFFALSE 102823
// mechs := mechs diff mc_remote_driver [ base ] ;
102801: LD_ADDR_VAR 0 13
102805: PUSH
102806: LD_VAR 0 13
102810: PUSH
102811: LD_EXP 85
102815: PUSH
102816: LD_VAR 0 1
102820: ARRAY
102821: DIFF
102822: ST_TO_ADDR
// for i in mechs do
102823: LD_ADDR_VAR 0 5
102827: PUSH
102828: LD_VAR 0 13
102832: PUSH
102833: FOR_IN
102834: IFFALSE 102869
// if GetTag ( i ) > 0 then
102836: LD_VAR 0 5
102840: PPUSH
102841: CALL_OW 110
102845: PUSH
102846: LD_INT 0
102848: GREATER
102849: IFFALSE 102867
// mechs := mechs diff i ;
102851: LD_ADDR_VAR 0 13
102855: PUSH
102856: LD_VAR 0 13
102860: PUSH
102861: LD_VAR 0 5
102865: DIFF
102866: ST_TO_ADDR
102867: GO 102833
102869: POP
102870: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
102871: LD_ADDR_VAR 0 9
102875: PUSH
102876: LD_EXP 45
102880: PUSH
102881: LD_VAR 0 1
102885: ARRAY
102886: PPUSH
102887: LD_INT 2
102889: PUSH
102890: LD_INT 25
102892: PUSH
102893: LD_INT 1
102895: PUSH
102896: EMPTY
102897: LIST
102898: LIST
102899: PUSH
102900: LD_INT 25
102902: PUSH
102903: LD_INT 5
102905: PUSH
102906: EMPTY
102907: LIST
102908: LIST
102909: PUSH
102910: LD_INT 25
102912: PUSH
102913: LD_INT 8
102915: PUSH
102916: EMPTY
102917: LIST
102918: LIST
102919: PUSH
102920: LD_INT 25
102922: PUSH
102923: LD_INT 9
102925: PUSH
102926: EMPTY
102927: LIST
102928: LIST
102929: PUSH
102930: EMPTY
102931: LIST
102932: LIST
102933: LIST
102934: LIST
102935: LIST
102936: PPUSH
102937: CALL_OW 72
102941: ST_TO_ADDR
// if not defenders and not solds then
102942: LD_VAR 0 2
102946: NOT
102947: PUSH
102948: LD_VAR 0 9
102952: NOT
102953: AND
102954: IFFALSE 102958
// exit ;
102956: GO 104584
// depot_under_attack := false ;
102958: LD_ADDR_VAR 0 17
102962: PUSH
102963: LD_INT 0
102965: ST_TO_ADDR
// sold_defenders := [ ] ;
102966: LD_ADDR_VAR 0 18
102970: PUSH
102971: EMPTY
102972: ST_TO_ADDR
// if mechs then
102973: LD_VAR 0 13
102977: IFFALSE 103106
// for i in defenders do
102979: LD_ADDR_VAR 0 5
102983: PUSH
102984: LD_VAR 0 2
102988: PUSH
102989: FOR_IN
102990: IFFALSE 103104
// begin SetTag ( i , 20 ) ;
102992: LD_VAR 0 5
102996: PPUSH
102997: LD_INT 20
102999: PPUSH
103000: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
103004: LD_VAR 0 5
103008: PPUSH
103009: CALL_OW 263
103013: PUSH
103014: LD_INT 1
103016: EQUAL
103017: PUSH
103018: LD_VAR 0 5
103022: PPUSH
103023: CALL_OW 311
103027: NOT
103028: AND
103029: PUSH
103030: LD_VAR 0 13
103034: AND
103035: IFFALSE 103102
// begin un := mechs [ 1 ] ;
103037: LD_ADDR_VAR 0 11
103041: PUSH
103042: LD_VAR 0 13
103046: PUSH
103047: LD_INT 1
103049: ARRAY
103050: ST_TO_ADDR
// ComExitBuilding ( un ) ;
103051: LD_VAR 0 11
103055: PPUSH
103056: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
103060: LD_VAR 0 11
103064: PPUSH
103065: LD_VAR 0 5
103069: PPUSH
103070: CALL_OW 180
// SetTag ( un , 19 ) ;
103074: LD_VAR 0 11
103078: PPUSH
103079: LD_INT 19
103081: PPUSH
103082: CALL_OW 109
// mechs := mechs diff un ;
103086: LD_ADDR_VAR 0 13
103090: PUSH
103091: LD_VAR 0 13
103095: PUSH
103096: LD_VAR 0 11
103100: DIFF
103101: ST_TO_ADDR
// end ; end ;
103102: GO 102989
103104: POP
103105: POP
// if solds then
103106: LD_VAR 0 9
103110: IFFALSE 103169
// for i in solds do
103112: LD_ADDR_VAR 0 5
103116: PUSH
103117: LD_VAR 0 9
103121: PUSH
103122: FOR_IN
103123: IFFALSE 103167
// if not GetTag ( i ) then
103125: LD_VAR 0 5
103129: PPUSH
103130: CALL_OW 110
103134: NOT
103135: IFFALSE 103165
// begin defenders := defenders union i ;
103137: LD_ADDR_VAR 0 2
103141: PUSH
103142: LD_VAR 0 2
103146: PUSH
103147: LD_VAR 0 5
103151: UNION
103152: ST_TO_ADDR
// SetTag ( i , 18 ) ;
103153: LD_VAR 0 5
103157: PPUSH
103158: LD_INT 18
103160: PPUSH
103161: CALL_OW 109
// end ;
103165: GO 103122
103167: POP
103168: POP
// repeat wait ( 0 0$1 ) ;
103169: LD_INT 35
103171: PPUSH
103172: CALL_OW 67
// enemy := mc_scan [ base ] ;
103176: LD_ADDR_VAR 0 3
103180: PUSH
103181: LD_EXP 68
103185: PUSH
103186: LD_VAR 0 1
103190: ARRAY
103191: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
103192: LD_EXP 45
103196: PUSH
103197: LD_VAR 0 1
103201: ARRAY
103202: NOT
103203: PUSH
103204: LD_EXP 45
103208: PUSH
103209: LD_VAR 0 1
103213: ARRAY
103214: PUSH
103215: EMPTY
103216: EQUAL
103217: OR
103218: IFFALSE 103255
// begin for i in defenders do
103220: LD_ADDR_VAR 0 5
103224: PUSH
103225: LD_VAR 0 2
103229: PUSH
103230: FOR_IN
103231: IFFALSE 103244
// ComStop ( i ) ;
103233: LD_VAR 0 5
103237: PPUSH
103238: CALL_OW 141
103242: GO 103230
103244: POP
103245: POP
// defenders := [ ] ;
103246: LD_ADDR_VAR 0 2
103250: PUSH
103251: EMPTY
103252: ST_TO_ADDR
// exit ;
103253: GO 104584
// end ; for i in defenders do
103255: LD_ADDR_VAR 0 5
103259: PUSH
103260: LD_VAR 0 2
103264: PUSH
103265: FOR_IN
103266: IFFALSE 104084
// begin e := NearestUnitToUnit ( enemy , i ) ;
103268: LD_ADDR_VAR 0 14
103272: PUSH
103273: LD_VAR 0 3
103277: PPUSH
103278: LD_VAR 0 5
103282: PPUSH
103283: CALL_OW 74
103287: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
103288: LD_ADDR_VAR 0 8
103292: PUSH
103293: LD_EXP 45
103297: PUSH
103298: LD_VAR 0 1
103302: ARRAY
103303: PPUSH
103304: LD_INT 2
103306: PUSH
103307: LD_INT 30
103309: PUSH
103310: LD_INT 0
103312: PUSH
103313: EMPTY
103314: LIST
103315: LIST
103316: PUSH
103317: LD_INT 30
103319: PUSH
103320: LD_INT 1
103322: PUSH
103323: EMPTY
103324: LIST
103325: LIST
103326: PUSH
103327: EMPTY
103328: LIST
103329: LIST
103330: LIST
103331: PPUSH
103332: CALL_OW 72
103336: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
103337: LD_ADDR_VAR 0 17
103341: PUSH
103342: LD_VAR 0 8
103346: NOT
103347: PUSH
103348: LD_VAR 0 8
103352: PPUSH
103353: LD_INT 3
103355: PUSH
103356: LD_INT 24
103358: PUSH
103359: LD_INT 600
103361: PUSH
103362: EMPTY
103363: LIST
103364: LIST
103365: PUSH
103366: EMPTY
103367: LIST
103368: LIST
103369: PPUSH
103370: CALL_OW 72
103374: OR
103375: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
103376: LD_VAR 0 5
103380: PPUSH
103381: CALL_OW 247
103385: PUSH
103386: LD_INT 2
103388: DOUBLE
103389: EQUAL
103390: IFTRUE 103394
103392: GO 103790
103394: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
103395: LD_VAR 0 5
103399: PPUSH
103400: CALL_OW 256
103404: PUSH
103405: LD_INT 650
103407: GREATER
103408: PUSH
103409: LD_VAR 0 5
103413: PPUSH
103414: LD_VAR 0 14
103418: PPUSH
103419: CALL_OW 296
103423: PUSH
103424: LD_INT 40
103426: LESS
103427: PUSH
103428: LD_VAR 0 14
103432: PPUSH
103433: LD_EXP 70
103437: PUSH
103438: LD_VAR 0 1
103442: ARRAY
103443: PPUSH
103444: CALL_OW 308
103448: OR
103449: AND
103450: IFFALSE 103572
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
103452: LD_VAR 0 5
103456: PPUSH
103457: CALL_OW 262
103461: PUSH
103462: LD_INT 1
103464: EQUAL
103465: PUSH
103466: LD_VAR 0 5
103470: PPUSH
103471: CALL_OW 261
103475: PUSH
103476: LD_INT 30
103478: LESS
103479: AND
103480: PUSH
103481: LD_VAR 0 8
103485: AND
103486: IFFALSE 103556
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
103488: LD_VAR 0 5
103492: PPUSH
103493: LD_VAR 0 8
103497: PPUSH
103498: LD_VAR 0 5
103502: PPUSH
103503: CALL_OW 74
103507: PPUSH
103508: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
103512: LD_VAR 0 5
103516: PPUSH
103517: LD_VAR 0 8
103521: PPUSH
103522: LD_VAR 0 5
103526: PPUSH
103527: CALL_OW 74
103531: PPUSH
103532: CALL_OW 296
103536: PUSH
103537: LD_INT 6
103539: LESS
103540: IFFALSE 103554
// SetFuel ( i , 100 ) ;
103542: LD_VAR 0 5
103546: PPUSH
103547: LD_INT 100
103549: PPUSH
103550: CALL_OW 240
// end else
103554: GO 103570
// ComAttackUnit ( i , e ) ;
103556: LD_VAR 0 5
103560: PPUSH
103561: LD_VAR 0 14
103565: PPUSH
103566: CALL_OW 115
// end else
103570: GO 103673
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
103572: LD_VAR 0 14
103576: PPUSH
103577: LD_EXP 70
103581: PUSH
103582: LD_VAR 0 1
103586: ARRAY
103587: PPUSH
103588: CALL_OW 308
103592: NOT
103593: PUSH
103594: LD_VAR 0 5
103598: PPUSH
103599: LD_VAR 0 14
103603: PPUSH
103604: CALL_OW 296
103608: PUSH
103609: LD_INT 40
103611: GREATEREQUAL
103612: AND
103613: PUSH
103614: LD_VAR 0 5
103618: PPUSH
103619: CALL_OW 256
103623: PUSH
103624: LD_INT 650
103626: LESSEQUAL
103627: OR
103628: PUSH
103629: LD_VAR 0 5
103633: PPUSH
103634: LD_EXP 69
103638: PUSH
103639: LD_VAR 0 1
103643: ARRAY
103644: PPUSH
103645: CALL_OW 308
103649: NOT
103650: AND
103651: IFFALSE 103673
// ComMoveToArea ( i , mc_parking [ base ] ) ;
103653: LD_VAR 0 5
103657: PPUSH
103658: LD_EXP 69
103662: PUSH
103663: LD_VAR 0 1
103667: ARRAY
103668: PPUSH
103669: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
103673: LD_VAR 0 5
103677: PPUSH
103678: CALL_OW 256
103682: PUSH
103683: LD_INT 998
103685: LESS
103686: PUSH
103687: LD_VAR 0 5
103691: PPUSH
103692: CALL_OW 263
103696: PUSH
103697: LD_INT 1
103699: EQUAL
103700: AND
103701: PUSH
103702: LD_VAR 0 5
103706: PPUSH
103707: CALL_OW 311
103711: AND
103712: PUSH
103713: LD_VAR 0 5
103717: PPUSH
103718: LD_EXP 69
103722: PUSH
103723: LD_VAR 0 1
103727: ARRAY
103728: PPUSH
103729: CALL_OW 308
103733: AND
103734: IFFALSE 103788
// begin mech := IsDrivenBy ( i ) ;
103736: LD_ADDR_VAR 0 10
103740: PUSH
103741: LD_VAR 0 5
103745: PPUSH
103746: CALL_OW 311
103750: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
103751: LD_VAR 0 10
103755: PPUSH
103756: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
103760: LD_VAR 0 10
103764: PPUSH
103765: LD_VAR 0 5
103769: PPUSH
103770: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
103774: LD_VAR 0 10
103778: PPUSH
103779: LD_VAR 0 5
103783: PPUSH
103784: CALL_OW 180
// end ; end ; unit_human :
103788: GO 104055
103790: LD_INT 1
103792: DOUBLE
103793: EQUAL
103794: IFTRUE 103798
103796: GO 104054
103798: POP
// begin b := IsInUnit ( i ) ;
103799: LD_ADDR_VAR 0 19
103803: PUSH
103804: LD_VAR 0 5
103808: PPUSH
103809: CALL_OW 310
103813: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
103814: LD_ADDR_VAR 0 20
103818: PUSH
103819: LD_VAR 0 19
103823: NOT
103824: PUSH
103825: LD_VAR 0 19
103829: PPUSH
103830: CALL_OW 266
103834: PUSH
103835: LD_INT 32
103837: PUSH
103838: LD_INT 31
103840: PUSH
103841: EMPTY
103842: LIST
103843: LIST
103844: IN
103845: OR
103846: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
103847: LD_VAR 0 17
103851: PUSH
103852: LD_VAR 0 2
103856: PPUSH
103857: LD_INT 21
103859: PUSH
103860: LD_INT 2
103862: PUSH
103863: EMPTY
103864: LIST
103865: LIST
103866: PPUSH
103867: CALL_OW 72
103871: PUSH
103872: LD_INT 1
103874: LESSEQUAL
103875: OR
103876: PUSH
103877: LD_VAR 0 20
103881: AND
103882: PUSH
103883: LD_VAR 0 5
103887: PUSH
103888: LD_VAR 0 18
103892: IN
103893: NOT
103894: AND
103895: IFFALSE 103988
// begin if b then
103897: LD_VAR 0 19
103901: IFFALSE 103950
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
103903: LD_VAR 0 19
103907: PPUSH
103908: LD_VAR 0 3
103912: PPUSH
103913: LD_VAR 0 19
103917: PPUSH
103918: CALL_OW 74
103922: PPUSH
103923: CALL_OW 296
103927: PUSH
103928: LD_INT 10
103930: LESS
103931: PUSH
103932: LD_VAR 0 19
103936: PPUSH
103937: CALL_OW 461
103941: PUSH
103942: LD_INT 7
103944: NONEQUAL
103945: AND
103946: IFFALSE 103950
// continue ;
103948: GO 103265
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
103950: LD_ADDR_VAR 0 18
103954: PUSH
103955: LD_VAR 0 18
103959: PPUSH
103960: LD_VAR 0 18
103964: PUSH
103965: LD_INT 1
103967: PLUS
103968: PPUSH
103969: LD_VAR 0 5
103973: PPUSH
103974: CALL_OW 1
103978: ST_TO_ADDR
// ComExitBuilding ( i ) ;
103979: LD_VAR 0 5
103983: PPUSH
103984: CALL_OW 122
// end ; if sold_defenders then
103988: LD_VAR 0 18
103992: IFFALSE 104052
// if i in sold_defenders then
103994: LD_VAR 0 5
103998: PUSH
103999: LD_VAR 0 18
104003: IN
104004: IFFALSE 104052
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
104006: LD_VAR 0 5
104010: PPUSH
104011: CALL_OW 314
104015: NOT
104016: PUSH
104017: LD_VAR 0 5
104021: PPUSH
104022: LD_VAR 0 14
104026: PPUSH
104027: CALL_OW 296
104031: PUSH
104032: LD_INT 30
104034: LESS
104035: AND
104036: IFFALSE 104052
// ComAttackUnit ( i , e ) ;
104038: LD_VAR 0 5
104042: PPUSH
104043: LD_VAR 0 14
104047: PPUSH
104048: CALL_OW 115
// end ; end ; end ;
104052: GO 104055
104054: POP
// if IsDead ( i ) then
104055: LD_VAR 0 5
104059: PPUSH
104060: CALL_OW 301
104064: IFFALSE 104082
// defenders := defenders diff i ;
104066: LD_ADDR_VAR 0 2
104070: PUSH
104071: LD_VAR 0 2
104075: PUSH
104076: LD_VAR 0 5
104080: DIFF
104081: ST_TO_ADDR
// end ;
104082: GO 103265
104084: POP
104085: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
104086: LD_VAR 0 3
104090: NOT
104091: PUSH
104092: LD_VAR 0 2
104096: NOT
104097: OR
104098: PUSH
104099: LD_EXP 45
104103: PUSH
104104: LD_VAR 0 1
104108: ARRAY
104109: NOT
104110: OR
104111: IFFALSE 103169
// MC_Reset ( base , 18 ) ;
104113: LD_VAR 0 1
104117: PPUSH
104118: LD_INT 18
104120: PPUSH
104121: CALL 59897 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
104125: LD_ADDR_VAR 0 2
104129: PUSH
104130: LD_VAR 0 2
104134: PUSH
104135: LD_VAR 0 2
104139: PPUSH
104140: LD_INT 2
104142: PUSH
104143: LD_INT 25
104145: PUSH
104146: LD_INT 1
104148: PUSH
104149: EMPTY
104150: LIST
104151: LIST
104152: PUSH
104153: LD_INT 25
104155: PUSH
104156: LD_INT 5
104158: PUSH
104159: EMPTY
104160: LIST
104161: LIST
104162: PUSH
104163: LD_INT 25
104165: PUSH
104166: LD_INT 8
104168: PUSH
104169: EMPTY
104170: LIST
104171: LIST
104172: PUSH
104173: LD_INT 25
104175: PUSH
104176: LD_INT 9
104178: PUSH
104179: EMPTY
104180: LIST
104181: LIST
104182: PUSH
104183: EMPTY
104184: LIST
104185: LIST
104186: LIST
104187: LIST
104188: LIST
104189: PPUSH
104190: CALL_OW 72
104194: DIFF
104195: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
104196: LD_VAR 0 3
104200: NOT
104201: PUSH
104202: LD_VAR 0 2
104206: PPUSH
104207: LD_INT 21
104209: PUSH
104210: LD_INT 2
104212: PUSH
104213: EMPTY
104214: LIST
104215: LIST
104216: PPUSH
104217: CALL_OW 72
104221: AND
104222: IFFALSE 104560
// begin tmp := FilterByTag ( defenders , 19 ) ;
104224: LD_ADDR_VAR 0 12
104228: PUSH
104229: LD_VAR 0 2
104233: PPUSH
104234: LD_INT 19
104236: PPUSH
104237: CALL 52862 0 2
104241: ST_TO_ADDR
// if tmp then
104242: LD_VAR 0 12
104246: IFFALSE 104316
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
104248: LD_ADDR_VAR 0 12
104252: PUSH
104253: LD_VAR 0 12
104257: PPUSH
104258: LD_INT 25
104260: PUSH
104261: LD_INT 3
104263: PUSH
104264: EMPTY
104265: LIST
104266: LIST
104267: PPUSH
104268: CALL_OW 72
104272: ST_TO_ADDR
// if tmp then
104273: LD_VAR 0 12
104277: IFFALSE 104316
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
104279: LD_ADDR_EXP 57
104283: PUSH
104284: LD_EXP 57
104288: PPUSH
104289: LD_VAR 0 1
104293: PPUSH
104294: LD_EXP 57
104298: PUSH
104299: LD_VAR 0 1
104303: ARRAY
104304: PUSH
104305: LD_VAR 0 12
104309: UNION
104310: PPUSH
104311: CALL_OW 1
104315: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
104316: LD_VAR 0 1
104320: PPUSH
104321: LD_INT 19
104323: PPUSH
104324: CALL 59897 0 2
// repeat wait ( 0 0$1 ) ;
104328: LD_INT 35
104330: PPUSH
104331: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
104335: LD_EXP 45
104339: PUSH
104340: LD_VAR 0 1
104344: ARRAY
104345: NOT
104346: PUSH
104347: LD_EXP 45
104351: PUSH
104352: LD_VAR 0 1
104356: ARRAY
104357: PUSH
104358: EMPTY
104359: EQUAL
104360: OR
104361: IFFALSE 104398
// begin for i in defenders do
104363: LD_ADDR_VAR 0 5
104367: PUSH
104368: LD_VAR 0 2
104372: PUSH
104373: FOR_IN
104374: IFFALSE 104387
// ComStop ( i ) ;
104376: LD_VAR 0 5
104380: PPUSH
104381: CALL_OW 141
104385: GO 104373
104387: POP
104388: POP
// defenders := [ ] ;
104389: LD_ADDR_VAR 0 2
104393: PUSH
104394: EMPTY
104395: ST_TO_ADDR
// exit ;
104396: GO 104584
// end ; for i in defenders do
104398: LD_ADDR_VAR 0 5
104402: PUSH
104403: LD_VAR 0 2
104407: PUSH
104408: FOR_IN
104409: IFFALSE 104498
// begin if not IsInArea ( i , mc_parking [ base ] ) then
104411: LD_VAR 0 5
104415: PPUSH
104416: LD_EXP 69
104420: PUSH
104421: LD_VAR 0 1
104425: ARRAY
104426: PPUSH
104427: CALL_OW 308
104431: NOT
104432: IFFALSE 104456
// ComMoveToArea ( i , mc_parking [ base ] ) else
104434: LD_VAR 0 5
104438: PPUSH
104439: LD_EXP 69
104443: PUSH
104444: LD_VAR 0 1
104448: ARRAY
104449: PPUSH
104450: CALL_OW 113
104454: GO 104496
// if GetControl ( i ) = control_manual then
104456: LD_VAR 0 5
104460: PPUSH
104461: CALL_OW 263
104465: PUSH
104466: LD_INT 1
104468: EQUAL
104469: IFFALSE 104496
// if IsDrivenBy ( i ) then
104471: LD_VAR 0 5
104475: PPUSH
104476: CALL_OW 311
104480: IFFALSE 104496
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
104482: LD_VAR 0 5
104486: PPUSH
104487: CALL_OW 311
104491: PPUSH
104492: CALL_OW 121
// end ;
104496: GO 104408
104498: POP
104499: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
104500: LD_VAR 0 2
104504: PPUSH
104505: LD_INT 95
104507: PUSH
104508: LD_EXP 69
104512: PUSH
104513: LD_VAR 0 1
104517: ARRAY
104518: PUSH
104519: EMPTY
104520: LIST
104521: LIST
104522: PPUSH
104523: CALL_OW 72
104527: PUSH
104528: LD_VAR 0 2
104532: EQUAL
104533: PUSH
104534: LD_EXP 68
104538: PUSH
104539: LD_VAR 0 1
104543: ARRAY
104544: OR
104545: PUSH
104546: LD_EXP 45
104550: PUSH
104551: LD_VAR 0 1
104555: ARRAY
104556: NOT
104557: OR
104558: IFFALSE 104328
// end ; MC_Reset ( base , 19 ) ;
104560: LD_VAR 0 1
104564: PPUSH
104565: LD_INT 19
104567: PPUSH
104568: CALL 59897 0 2
// MC_Reset ( base , 20 ) ;
104572: LD_VAR 0 1
104576: PPUSH
104577: LD_INT 20
104579: PPUSH
104580: CALL 59897 0 2
// end ;
104584: LD_VAR 0 4
104588: RET
