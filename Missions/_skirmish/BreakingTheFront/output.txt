// starting begin ResetFog ;
   0: CALL_OW 335
// InitSettings ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 31
// begin PlaceSeeing ( 1 , 1 , 1 , - 372963 ) ;
  14: LD_INT 1
  16: PPUSH
  17: LD_INT 1
  19: PPUSH
  20: LD_INT 1
  22: PPUSH
  23: LD_INT 372963
  25: NEG
  26: PPUSH
  27: CALL_OW 330
// end ; SetTechnologies ;
  31: CALL 595 0 0
// SetDiplomacy ;
  35: CALL 807 0 0
// PrepareGame ;
  39: CALL 889 0 0
// end ;
  43: END
// export debug , GameType , game , disableGlobalTimer ; export mc_amer , mc_leg , mc_rus_1 , mc_rus_2 ; export playerCommander , playerForces , allyCommander , Powell , Farmer , ruOutpost , ruEscape , staticMines , baseCaptured , legDestCounter , cratesSpawns , legOfferAccepted , legChangeSide , allyDestCounter , sibBombAllowed , reinforceAllowed , commander , cratesSpawn , outpostEscape , dialogueMineDetected ; end_of_file export function InitSettings ; begin
  44: LD_INT 0
  46: PPUSH
// debug := 0 ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// GameType := 1 ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_INT 1
  62: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  63: LD_ADDR_OWVAR 67
  67: PUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL_OW 426
  75: ST_TO_ADDR
// sibBombAllowed := GetMultiPlayerSetting ( 1 ) - 1 ;
  76: LD_ADDR_EXP 23
  80: PUSH
  81: LD_INT 1
  83: PPUSH
  84: CALL_OW 426
  88: PUSH
  89: LD_INT 1
  91: MINUS
  92: ST_TO_ADDR
// reinforceAllowed := GetMultiPlayerSetting ( 2 ) - 1 ;
  93: LD_ADDR_EXP 24
  97: PUSH
  98: LD_INT 2
 100: PPUSH
 101: CALL_OW 426
 105: PUSH
 106: LD_INT 1
 108: MINUS
 109: ST_TO_ADDR
// cratesSpawn := GetMultiPlayerSetting ( 3 ) ;
 110: LD_ADDR_EXP 26
 114: PUSH
 115: LD_INT 3
 117: PPUSH
 118: CALL_OW 426
 122: ST_TO_ADDR
// commander := GetMultiPlayerSetting ( 4 ) ;
 123: LD_ADDR_EXP 25
 127: PUSH
 128: LD_INT 4
 130: PPUSH
 131: CALL_OW 426
 135: ST_TO_ADDR
// if not commander then
 136: LD_EXP 25
 140: NOT
 141: IFFALSE 151
// commander := 3 ;
 143: LD_ADDR_EXP 25
 147: PUSH
 148: LD_INT 3
 150: ST_TO_ADDR
// if not debug then
 151: LD_EXP 1
 155: NOT
 156: IFFALSE 160
// exit ;
 158: GO 217
// display_strings := [ Difficulty:  & Difficulty , sibBomb:  & sibBombAllowed , reinforceAllowed:  & reinforceAllowed , cratesSpawn:  & cratesSpawn , commander:  & commander ] ;
 160: LD_ADDR_OWVAR 47
 164: PUSH
 165: LD_STRING Difficulty: 
 167: PUSH
 168: LD_OWVAR 67
 172: STR
 173: PUSH
 174: LD_STRING sibBomb: 
 176: PUSH
 177: LD_EXP 23
 181: STR
 182: PUSH
 183: LD_STRING reinforceAllowed: 
 185: PUSH
 186: LD_EXP 24
 190: STR
 191: PUSH
 192: LD_STRING cratesSpawn: 
 194: PUSH
 195: LD_EXP 26
 199: STR
 200: PUSH
 201: LD_STRING commander: 
 203: PUSH
 204: LD_EXP 25
 208: STR
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: LIST
 214: LIST
 215: LIST
 216: ST_TO_ADDR
// end ;
 217: LD_VAR 0 1
 221: RET
// every 0 0$1 trigger game and GameType = 1 and not disableGlobalTimer do
 222: LD_EXP 3
 226: PUSH
 227: LD_EXP 2
 231: PUSH
 232: LD_INT 1
 234: EQUAL
 235: AND
 236: PUSH
 237: LD_EXP 4
 241: NOT
 242: AND
 243: IFFALSE 266
 245: GO 247
 247: DISABLE
// begin enable ;
 248: ENABLE
// display_strings := [ #SkrTime , tick ] ;
 249: LD_ADDR_OWVAR 47
 253: PUSH
 254: LD_STRING #SkrTime
 256: PUSH
 257: LD_OWVAR 1
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: ST_TO_ADDR
// end ;
 266: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 267: LD_EXP 19
 271: PUSH
 272: LD_EXP 3
 276: AND
 277: PUSH
 278: LD_EXP 2
 282: PUSH
 283: LD_INT 1
 285: EQUAL
 286: AND
 287: IFFALSE 348
 289: GO 291
 291: DISABLE
// Crates ( cratesSpawns [ 1 ] [ 1 ] , cratesSpawns [ 1 ] [ 2 ] , cratesSpawns [ 1 ] [ 3 ] , cratesSpawns [ 1 ] [ 4 ] ) ;
 292: LD_EXP 19
 296: PUSH
 297: LD_INT 1
 299: ARRAY
 300: PUSH
 301: LD_INT 1
 303: ARRAY
 304: PPUSH
 305: LD_EXP 19
 309: PUSH
 310: LD_INT 1
 312: ARRAY
 313: PUSH
 314: LD_INT 2
 316: ARRAY
 317: PPUSH
 318: LD_EXP 19
 322: PUSH
 323: LD_INT 1
 325: ARRAY
 326: PUSH
 327: LD_INT 3
 329: ARRAY
 330: PPUSH
 331: LD_EXP 19
 335: PUSH
 336: LD_INT 1
 338: ARRAY
 339: PUSH
 340: LD_INT 4
 342: ARRAY
 343: PPUSH
 344: CALL 54539 0 4
 348: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 349: LD_EXP 19
 353: PUSH
 354: LD_EXP 3
 358: AND
 359: PUSH
 360: LD_EXP 2
 364: PUSH
 365: LD_INT 1
 367: EQUAL
 368: AND
 369: IFFALSE 430
 371: GO 373
 373: DISABLE
// Crates ( cratesSpawns [ 2 ] [ 1 ] , cratesSpawns [ 2 ] [ 2 ] , cratesSpawns [ 2 ] [ 3 ] , cratesSpawns [ 2 ] [ 4 ] ) ;
 374: LD_EXP 19
 378: PUSH
 379: LD_INT 2
 381: ARRAY
 382: PUSH
 383: LD_INT 1
 385: ARRAY
 386: PPUSH
 387: LD_EXP 19
 391: PUSH
 392: LD_INT 2
 394: ARRAY
 395: PUSH
 396: LD_INT 2
 398: ARRAY
 399: PPUSH
 400: LD_EXP 19
 404: PUSH
 405: LD_INT 2
 407: ARRAY
 408: PUSH
 409: LD_INT 3
 411: ARRAY
 412: PPUSH
 413: LD_EXP 19
 417: PUSH
 418: LD_INT 2
 420: ARRAY
 421: PUSH
 422: LD_INT 4
 424: ARRAY
 425: PPUSH
 426: CALL 54539 0 4
 430: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 431: LD_EXP 19
 435: PUSH
 436: LD_EXP 3
 440: AND
 441: PUSH
 442: LD_EXP 2
 446: PUSH
 447: LD_INT 1
 449: EQUAL
 450: AND
 451: IFFALSE 512
 453: GO 455
 455: DISABLE
// Crates ( cratesSpawns [ 3 ] [ 1 ] , cratesSpawns [ 3 ] [ 2 ] , cratesSpawns [ 3 ] [ 3 ] , cratesSpawns [ 3 ] [ 4 ] ) ;
 456: LD_EXP 19
 460: PUSH
 461: LD_INT 3
 463: ARRAY
 464: PUSH
 465: LD_INT 1
 467: ARRAY
 468: PPUSH
 469: LD_EXP 19
 473: PUSH
 474: LD_INT 3
 476: ARRAY
 477: PUSH
 478: LD_INT 2
 480: ARRAY
 481: PPUSH
 482: LD_EXP 19
 486: PUSH
 487: LD_INT 3
 489: ARRAY
 490: PUSH
 491: LD_INT 3
 493: ARRAY
 494: PPUSH
 495: LD_EXP 19
 499: PUSH
 500: LD_INT 3
 502: ARRAY
 503: PUSH
 504: LD_INT 4
 506: ARRAY
 507: PPUSH
 508: CALL 54539 0 4
 512: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 513: LD_EXP 19
 517: PUSH
 518: LD_EXP 3
 522: AND
 523: PUSH
 524: LD_EXP 2
 528: PUSH
 529: LD_INT 1
 531: EQUAL
 532: AND
 533: IFFALSE 594
 535: GO 537
 537: DISABLE
// Crates ( cratesSpawns [ 4 ] [ 1 ] , cratesSpawns [ 4 ] [ 2 ] , cratesSpawns [ 4 ] [ 3 ] , cratesSpawns [ 4 ] [ 4 ] ) ;
 538: LD_EXP 19
 542: PUSH
 543: LD_INT 4
 545: ARRAY
 546: PUSH
 547: LD_INT 1
 549: ARRAY
 550: PPUSH
 551: LD_EXP 19
 555: PUSH
 556: LD_INT 4
 558: ARRAY
 559: PUSH
 560: LD_INT 2
 562: ARRAY
 563: PPUSH
 564: LD_EXP 19
 568: PUSH
 569: LD_INT 4
 571: ARRAY
 572: PUSH
 573: LD_INT 3
 575: ARRAY
 576: PPUSH
 577: LD_EXP 19
 581: PUSH
 582: LD_INT 4
 584: ARRAY
 585: PUSH
 586: LD_INT 4
 588: ARRAY
 589: PPUSH
 590: CALL 54539 0 4
 594: END
// export function SetTechnologies ; var i , j , ban_techs , res_techs ; begin
 595: LD_INT 0
 597: PPUSH
 598: PPUSH
 599: PPUSH
 600: PPUSH
 601: PPUSH
// if GameType = 1 then
 602: LD_EXP 2
 606: PUSH
 607: LD_INT 1
 609: EQUAL
 610: IFFALSE 679
// begin ban_techs := [ ] ;
 612: LD_ADDR_VAR 0 4
 616: PUSH
 617: EMPTY
 618: ST_TO_ADDR
// if sibBombAllowed < 2 then
 619: LD_EXP 23
 623: PUSH
 624: LD_INT 2
 626: LESS
 627: IFFALSE 640
// ban_techs := [ tech_sibFiss ] ;
 629: LD_ADDR_VAR 0 4
 633: PUSH
 634: LD_INT 25
 636: PUSH
 637: EMPTY
 638: LIST
 639: ST_TO_ADDR
// res_techs := [ tech_oilPow , tech_oilEng , tech_tech1 , tech_tech2 , tech_tech3 , tech_gun , tech_gatling , tech_rocket ] ;
 640: LD_ADDR_VAR 0 5
 644: PUSH
 645: LD_INT 46
 647: PUSH
 648: LD_INT 47
 650: PUSH
 651: LD_INT 48
 653: PUSH
 654: LD_INT 49
 656: PUSH
 657: LD_INT 50
 659: PUSH
 660: LD_INT 39
 662: PUSH
 663: LD_INT 69
 665: PUSH
 666: LD_INT 40
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// end ; for i = 1 to 8 do
 679: LD_ADDR_VAR 0 2
 683: PUSH
 684: DOUBLE
 685: LD_INT 1
 687: DEC
 688: ST_TO_ADDR
 689: LD_INT 8
 691: PUSH
 692: FOR_TO
 693: IFFALSE 777
// begin if res_techs then
 695: LD_VAR 0 5
 699: IFFALSE 735
// for j in res_techs do
 701: LD_ADDR_VAR 0 3
 705: PUSH
 706: LD_VAR 0 5
 710: PUSH
 711: FOR_IN
 712: IFFALSE 733
// SetTech ( j , i , state_researched ) ;
 714: LD_VAR 0 3
 718: PPUSH
 719: LD_VAR 0 2
 723: PPUSH
 724: LD_INT 2
 726: PPUSH
 727: CALL_OW 322
 731: GO 711
 733: POP
 734: POP
// if ban_techs then
 735: LD_VAR 0 4
 739: IFFALSE 775
// for j in ban_techs do
 741: LD_ADDR_VAR 0 3
 745: PUSH
 746: LD_VAR 0 4
 750: PUSH
 751: FOR_IN
 752: IFFALSE 773
// SetTech ( j , i , state_disabled ) ;
 754: LD_VAR 0 3
 758: PPUSH
 759: LD_VAR 0 2
 763: PPUSH
 764: LD_INT 0
 766: PPUSH
 767: CALL_OW 322
 771: GO 751
 773: POP
 774: POP
// end ;
 775: GO 692
 777: POP
 778: POP
// if sibBombAllowed = 1 then
 779: LD_EXP 23
 783: PUSH
 784: LD_INT 1
 786: EQUAL
 787: IFFALSE 802
// SetTech ( tech_sibFiss , 3 , state_enabled ) ;
 789: LD_INT 25
 791: PPUSH
 792: LD_INT 3
 794: PPUSH
 795: LD_INT 1
 797: PPUSH
 798: CALL_OW 322
// end ;
 802: LD_VAR 0 1
 806: RET
// export function SetDiplomacy ; begin
 807: LD_INT 0
 809: PPUSH
// if GameType = 1 then
 810: LD_EXP 2
 814: PUSH
 815: LD_INT 1
 817: EQUAL
 818: IFFALSE 884
// begin SetAttitude ( 1 , 4 , att_friend , true ) ;
 820: LD_INT 1
 822: PPUSH
 823: LD_INT 4
 825: PPUSH
 826: LD_INT 1
 828: PPUSH
 829: LD_INT 1
 831: PPUSH
 832: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 836: LD_INT 3
 838: PPUSH
 839: LD_INT 6
 841: PPUSH
 842: LD_INT 1
 844: PPUSH
 845: LD_INT 1
 847: PPUSH
 848: CALL_OW 80
// SetAttitude ( 3 , 8 , att_friend , true ) ;
 852: LD_INT 3
 854: PPUSH
 855: LD_INT 8
 857: PPUSH
 858: LD_INT 1
 860: PPUSH
 861: LD_INT 1
 863: PPUSH
 864: CALL_OW 80
// SetAttitude ( 6 , 8 , att_friend , true ) ;
 868: LD_INT 6
 870: PPUSH
 871: LD_INT 8
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: LD_INT 1
 879: PPUSH
 880: CALL_OW 80
// end ; end ;
 884: LD_VAR 0 1
 888: RET
// export function PrepareGame ; var i , tmp , sources ; begin
 889: LD_INT 0
 891: PPUSH
 892: PPUSH
 893: PPUSH
 894: PPUSH
// if GameType = 1 then
 895: LD_EXP 2
 899: PUSH
 900: LD_INT 1
 902: EQUAL
 903: IFFALSE 1395
// begin game := false ;
 905: LD_ADDR_EXP 3
 909: PUSH
 910: LD_INT 0
 912: ST_TO_ADDR
// your_side := 1 ;
 913: LD_ADDR_OWVAR 2
 917: PUSH
 918: LD_INT 1
 920: ST_TO_ADDR
// mc_amer := 1 ;
 921: LD_ADDR_EXP 5
 925: PUSH
 926: LD_INT 1
 928: ST_TO_ADDR
// mc_leg := 2 ;
 929: LD_ADDR_EXP 6
 933: PUSH
 934: LD_INT 2
 936: ST_TO_ADDR
// mc_rus_1 := 3 ;
 937: LD_ADDR_EXP 7
 941: PUSH
 942: LD_INT 3
 944: ST_TO_ADDR
// mc_rus_2 := 4 ;
 945: LD_ADDR_EXP 8
 949: PUSH
 950: LD_INT 4
 952: ST_TO_ADDR
// cratesSpawns := [ [ amerCrates , 1 , 0 , [ 200 , 250 , 300 ] [ cratesSpawn ] ] , [ rusCrates , 8 , 50 , 500 ] , [ legCrates , 5 , 50 , 300 ] , [ playerCrates , [ 4 , 5 , 6 ] [ cratesSpawn ] , 30 , [ 300 , 450 , 500 ] [ cratesSpawn ] ] ] ;
 953: LD_ADDR_EXP 19
 957: PUSH
 958: LD_INT 5
 960: PUSH
 961: LD_INT 1
 963: PUSH
 964: LD_INT 0
 966: PUSH
 967: LD_INT 200
 969: PUSH
 970: LD_INT 250
 972: PUSH
 973: LD_INT 300
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: LIST
 980: PUSH
 981: LD_EXP 26
 985: ARRAY
 986: PUSH
 987: EMPTY
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: LD_INT 13
 995: PUSH
 996: LD_INT 8
 998: PUSH
 999: LD_INT 50
1001: PUSH
1002: LD_INT 500
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: PUSH
1011: LD_INT 17
1013: PUSH
1014: LD_INT 5
1016: PUSH
1017: LD_INT 50
1019: PUSH
1020: LD_INT 300
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: PUSH
1029: LD_INT 18
1031: PUSH
1032: LD_INT 4
1034: PUSH
1035: LD_INT 5
1037: PUSH
1038: LD_INT 6
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: PUSH
1046: LD_EXP 26
1050: ARRAY
1051: PUSH
1052: LD_INT 30
1054: PUSH
1055: LD_INT 300
1057: PUSH
1058: LD_INT 450
1060: PUSH
1061: LD_INT 500
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: LIST
1068: PUSH
1069: LD_EXP 26
1073: ARRAY
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: PUSH
1081: EMPTY
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: ST_TO_ADDR
// sources := [ [ 190 , 193 , mat_siberit ] , [ 182 , 117 , mat_siberit ] , [ 43 , 2 , mat_siberit ] , [ 114 , 152 , mat_oil ] , [ 85 , 38 , mat_oil ] ] ;
1087: LD_ADDR_VAR 0 4
1091: PUSH
1092: LD_INT 190
1094: PUSH
1095: LD_INT 193
1097: PUSH
1098: LD_INT 3
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: LIST
1105: PUSH
1106: LD_INT 182
1108: PUSH
1109: LD_INT 117
1111: PUSH
1112: LD_INT 3
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: LIST
1119: PUSH
1120: LD_INT 43
1122: PUSH
1123: LD_INT 2
1125: PUSH
1126: LD_INT 3
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: LIST
1133: PUSH
1134: LD_INT 114
1136: PUSH
1137: LD_INT 152
1139: PUSH
1140: LD_INT 2
1142: PUSH
1143: EMPTY
1144: LIST
1145: LIST
1146: LIST
1147: PUSH
1148: LD_INT 85
1150: PUSH
1151: LD_INT 38
1153: PUSH
1154: LD_INT 2
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: LIST
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: ST_TO_ADDR
// for i in sources do
1169: LD_ADDR_VAR 0 2
1173: PUSH
1174: LD_VAR 0 4
1178: PUSH
1179: FOR_IN
1180: IFFALSE 1215
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
1182: LD_VAR 0 2
1186: PUSH
1187: LD_INT 1
1189: ARRAY
1190: PPUSH
1191: LD_VAR 0 2
1195: PUSH
1196: LD_INT 2
1198: ARRAY
1199: PPUSH
1200: LD_VAR 0 2
1204: PUSH
1205: LD_INT 3
1207: ARRAY
1208: PPUSH
1209: CALL_OW 62
1213: GO 1179
1215: POP
1216: POP
// disableGlobalTimer := false ;
1217: LD_ADDR_EXP 4
1221: PUSH
1222: LD_INT 0
1224: ST_TO_ADDR
// ruEscape := [ 0 , [ 5 , 6 , 7 ] [ Difficulty ] ] ;
1225: LD_ADDR_EXP 15
1229: PUSH
1230: LD_INT 0
1232: PUSH
1233: LD_INT 5
1235: PUSH
1236: LD_INT 6
1238: PUSH
1239: LD_INT 7
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: LIST
1246: PUSH
1247: LD_OWVAR 67
1251: ARRAY
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: ST_TO_ADDR
// ruOutpost := [ ] ;
1257: LD_ADDR_EXP 14
1261: PUSH
1262: EMPTY
1263: ST_TO_ADDR
// staticMines := [ ] ;
1264: LD_ADDR_EXP 16
1268: PUSH
1269: EMPTY
1270: ST_TO_ADDR
// baseCaptured := false ;
1271: LD_ADDR_EXP 17
1275: PUSH
1276: LD_INT 0
1278: ST_TO_ADDR
// legDestCounter := 0 ;
1279: LD_ADDR_EXP 18
1283: PUSH
1284: LD_INT 0
1286: ST_TO_ADDR
// legOfferAccepted := false ;
1287: LD_ADDR_EXP 20
1291: PUSH
1292: LD_INT 0
1294: ST_TO_ADDR
// legChangeSide := false ;
1295: LD_ADDR_EXP 21
1299: PUSH
1300: LD_INT 0
1302: ST_TO_ADDR
// allyDestCounter := 0 ;
1303: LD_ADDR_EXP 22
1307: PUSH
1308: LD_INT 0
1310: ST_TO_ADDR
// outpostEscape := false ;
1311: LD_ADDR_EXP 27
1315: PUSH
1316: LD_INT 0
1318: ST_TO_ADDR
// dialogueMineDetected := false ;
1319: LD_ADDR_EXP 28
1323: PUSH
1324: LD_INT 0
1326: ST_TO_ADDR
// PrepareAmericans ;
1327: CALL 7243 0 0
// PrepareLegion ;
1331: CALL 5508 0 0
// PrepareRussians ;
1335: CALL 2474 0 0
// playerForces := PreparePlayer ;
1339: LD_ADDR_EXP 10
1343: PUSH
1344: CALL 8486 0 0
1348: ST_TO_ADDR
// AnimateTrees ( true ) ;
1349: LD_INT 1
1351: PPUSH
1352: CALL_OW 573
// PrepareNature ( 4 , 3 , 8 , 5 , 3 , 1 , 8 , natureGroundArea , natureWaterArea ) ;
1356: LD_INT 4
1358: PPUSH
1359: LD_INT 3
1361: PPUSH
1362: LD_INT 8
1364: PPUSH
1365: LD_INT 5
1367: PPUSH
1368: LD_INT 3
1370: PPUSH
1371: LD_INT 1
1373: PPUSH
1374: LD_INT 8
1376: PPUSH
1377: LD_INT 2
1379: PPUSH
1380: LD_INT 1
1382: PPUSH
1383: CALL 51963 0 9
// MC_Start ;
1387: CALL 57936 0 0
// Action ;
1391: CALL 10682 0 0
// end ; end ;
1395: LD_VAR 0 1
1399: RET
// export function CustomInitMacro ; begin
1400: LD_INT 0
1402: PPUSH
// if GameType <> 1 then
1403: LD_EXP 2
1407: PUSH
1408: LD_INT 1
1410: NONEQUAL
1411: IFFALSE 1415
// exit ;
1413: GO 2469
// MC_SetScanArea ( mc_amer , amerBase ) ;
1415: LD_EXP 5
1419: PPUSH
1420: LD_INT 3
1422: PPUSH
1423: CALL 80776 0 2
// MC_SetParkingArea ( mc_amer , amerParking ) ;
1427: LD_EXP 5
1431: PPUSH
1432: LD_INT 4
1434: PPUSH
1435: CALL 80720 0 2
// MC_SetAllowedTurretWeapons ( mc_amer , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1439: LD_EXP 5
1443: PPUSH
1444: LD_INT 11
1446: PUSH
1447: LD_INT 6
1449: PUSH
1450: LD_INT 7
1452: PUSH
1453: LD_INT 9
1455: PUSH
1456: LD_INT 10
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: PPUSH
1466: CALL 80608 0 2
// MC_SetCratesArea ( mc_amer , amerCrates ) ;
1470: LD_EXP 5
1474: PPUSH
1475: LD_INT 5
1477: PPUSH
1478: CALL 80290 0 2
// MC_SetTame ( mc_amer , amerBase ) ;
1482: LD_EXP 5
1486: PPUSH
1487: LD_INT 3
1489: PPUSH
1490: CALL 80021 0 2
// MC_SetDefenderLimit ( mc_amer , 4 ) ;
1494: LD_EXP 5
1498: PPUSH
1499: LD_INT 4
1501: PPUSH
1502: CALL 79640 0 2
// MC_SetProduceList ( mc_amer , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_solar , control_remote , us_laser ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , ] ) ;
1506: LD_EXP 5
1510: PPUSH
1511: LD_INT 3
1513: PUSH
1514: LD_INT 1
1516: PUSH
1517: LD_INT 2
1519: PUSH
1520: LD_INT 5
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 3
1531: PUSH
1532: LD_INT 2
1534: PUSH
1535: LD_INT 2
1537: PUSH
1538: LD_INT 9
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: PUSH
1547: LD_INT 4
1549: PUSH
1550: LD_INT 1
1552: PUSH
1553: LD_INT 2
1555: PUSH
1556: LD_INT 7
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: PUSH
1565: LD_INT 4
1567: PUSH
1568: LD_INT 1
1570: PUSH
1571: LD_INT 2
1573: PUSH
1574: LD_INT 6
1576: PUSH
1577: EMPTY
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: PPUSH
1589: CALL 79455 0 2
// MC_SetBuildingList ( mc_amer , [ [ b_turret , 114 , 16 , 0 ] , [ b_bunker , 110 , 12 , 0 ] ] ) ;
1593: LD_EXP 5
1597: PPUSH
1598: LD_INT 33
1600: PUSH
1601: LD_INT 114
1603: PUSH
1604: LD_INT 16
1606: PUSH
1607: LD_INT 0
1609: PUSH
1610: EMPTY
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 32
1618: PUSH
1619: LD_INT 110
1621: PUSH
1622: LD_INT 12
1624: PUSH
1625: LD_INT 0
1627: PUSH
1628: EMPTY
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PPUSH
1638: CALL 79347 0 2
// MC_SetLabKind ( mc_amer , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1642: LD_EXP 5
1646: PPUSH
1647: LD_INT 10
1649: PUSH
1650: LD_INT 15
1652: PUSH
1653: LD_INT 12
1655: PUSH
1656: LD_INT 11
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: PPUSH
1665: CALL 80197 0 2
// MC_SetScanArea ( mc_leg , legBase ) ;
1669: LD_EXP 6
1673: PPUSH
1674: LD_INT 6
1676: PPUSH
1677: CALL 80776 0 2
// MC_SetParkingArea ( mc_leg , legParking ) ;
1681: LD_EXP 6
1685: PPUSH
1686: LD_INT 7
1688: PPUSH
1689: CALL 80720 0 2
// MC_SetAllowedTurretWeapons ( mc_leg , [ ar_radar , ar_gun , ar_rocket_launcher , ar_gatling_gun ] ) ;
1693: LD_EXP 6
1697: PPUSH
1698: LD_INT 30
1700: PUSH
1701: LD_INT 27
1703: PUSH
1704: LD_INT 28
1706: PUSH
1707: LD_INT 25
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: PPUSH
1716: CALL 80608 0 2
// MC_SetCratesArea ( mc_leg , legCrates ) ;
1720: LD_EXP 6
1724: PPUSH
1725: LD_INT 17
1727: PPUSH
1728: CALL 80290 0 2
// MC_SetTame ( mc_leg , legBase ) ;
1732: LD_EXP 6
1736: PPUSH
1737: LD_INT 6
1739: PPUSH
1740: CALL 80021 0 2
// MC_SetDefenderLimit ( mc_leg , 5 ) ;
1744: LD_EXP 6
1748: PPUSH
1749: LD_INT 5
1751: PPUSH
1752: CALL 79640 0 2
// MC_SetMinesField ( mc_leg , 10 , legMines ) ;
1756: LD_EXP 6
1760: PPUSH
1761: LD_INT 10
1763: PPUSH
1764: LD_INT 9
1766: PPUSH
1767: CALL 79137 0 3
// MC_SetBuildingList ( mc_leg , [ [ b_armoury , 157 , 144 , 0 ] , [ b_bunker , 151 , 142 , 0 ] , [ b_bunker , 161 , 144 , 0 ] , [ b_bunker , 140 , 133 , 0 ] ] ) ;
1771: LD_EXP 6
1775: PPUSH
1776: LD_INT 4
1778: PUSH
1779: LD_INT 157
1781: PUSH
1782: LD_INT 144
1784: PUSH
1785: LD_INT 0
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: PUSH
1794: LD_INT 32
1796: PUSH
1797: LD_INT 151
1799: PUSH
1800: LD_INT 142
1802: PUSH
1803: LD_INT 0
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: PUSH
1812: LD_INT 32
1814: PUSH
1815: LD_INT 161
1817: PUSH
1818: LD_INT 144
1820: PUSH
1821: LD_INT 0
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: PUSH
1830: LD_INT 32
1832: PUSH
1833: LD_INT 140
1835: PUSH
1836: LD_INT 133
1838: PUSH
1839: LD_INT 0
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: PPUSH
1854: CALL 79347 0 2
// MC_SetProduceList ( mc_leg , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ) ;
1858: LD_EXP 6
1862: PPUSH
1863: LD_INT 13
1865: PUSH
1866: LD_INT 2
1868: PUSH
1869: LD_INT 1
1871: PUSH
1872: LD_INT 31
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: PUSH
1881: LD_INT 13
1883: PUSH
1884: LD_INT 2
1886: PUSH
1887: LD_INT 1
1889: PUSH
1890: LD_INT 31
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 13
1901: PUSH
1902: LD_INT 1
1904: PUSH
1905: LD_INT 1
1907: PUSH
1908: LD_INT 27
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 13
1919: PUSH
1920: LD_INT 1
1922: PUSH
1923: LD_INT 2
1925: PUSH
1926: LD_INT 27
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: LIST
1933: LIST
1934: PUSH
1935: LD_INT 13
1937: PUSH
1938: LD_INT 1
1940: PUSH
1941: LD_INT 2
1943: PUSH
1944: LD_INT 27
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 13
1955: PUSH
1956: LD_INT 1
1958: PUSH
1959: LD_INT 2
1961: PUSH
1962: LD_INT 28
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: PUSH
1971: LD_INT 13
1973: PUSH
1974: LD_INT 1
1976: PUSH
1977: LD_INT 2
1979: PUSH
1980: LD_INT 28
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 13
1991: PUSH
1992: LD_INT 1
1994: PUSH
1995: LD_INT 2
1997: PUSH
1998: LD_INT 32
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: PPUSH
2017: CALL 79455 0 2
// HiddenCamera ( 165 , 156 , 8 ) ;
2021: LD_INT 165
2023: PPUSH
2024: LD_INT 156
2026: PPUSH
2027: LD_INT 8
2029: PPUSH
2030: CALL_OW 244
// MC_SetScanArea ( mc_rus_1 , rus1Base ) ;
2034: LD_EXP 7
2038: PPUSH
2039: LD_INT 15
2041: PPUSH
2042: CALL 80776 0 2
// MC_SetParkingArea ( mc_rus_1 , rus1Parking ) ;
2046: LD_EXP 7
2050: PPUSH
2051: LD_INT 16
2053: PPUSH
2054: CALL 80720 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_1 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2058: LD_EXP 7
2062: PPUSH
2063: LD_INT 43
2065: PUSH
2066: LD_INT 47
2068: PUSH
2069: LD_INT 45
2071: PUSH
2072: LD_INT 49
2074: PUSH
2075: LD_INT 46
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: LIST
2082: LIST
2083: LIST
2084: PPUSH
2085: CALL 80608 0 2
// MC_SetCratesArea ( mc_rus_1 , rusCrates ) ;
2089: LD_EXP 7
2093: PPUSH
2094: LD_INT 13
2096: PPUSH
2097: CALL 80290 0 2
// MC_SetTame ( mc_rus_1 , rus1Base ) ;
2101: LD_EXP 7
2105: PPUSH
2106: LD_INT 15
2108: PPUSH
2109: CALL 80021 0 2
// MC_SetDefenderLimit ( mc_rus_1 , 5 ) ;
2113: LD_EXP 7
2117: PPUSH
2118: LD_INT 5
2120: PPUSH
2121: CALL 79640 0 2
// MC_SetProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_rocket ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_crane ] , ] ) ;
2125: LD_EXP 7
2129: PPUSH
2130: LD_INT 23
2132: PUSH
2133: LD_INT 1
2135: PUSH
2136: LD_INT 3
2138: PUSH
2139: LD_INT 46
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: LIST
2147: PUSH
2148: LD_INT 23
2150: PUSH
2151: LD_INT 1
2153: PUSH
2154: LD_INT 1
2156: PUSH
2157: LD_INT 46
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: PUSH
2166: LD_INT 23
2168: PUSH
2169: LD_INT 1
2171: PUSH
2172: LD_INT 3
2174: PUSH
2175: LD_INT 45
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: PUSH
2184: LD_INT 23
2186: PUSH
2187: LD_INT 1
2189: PUSH
2190: LD_INT 1
2192: PUSH
2193: LD_INT 47
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: LIST
2200: LIST
2201: PUSH
2202: LD_INT 23
2204: PUSH
2205: LD_INT 1
2207: PUSH
2208: LD_INT 3
2210: PUSH
2211: LD_INT 46
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: LIST
2218: LIST
2219: PUSH
2220: LD_INT 21
2222: PUSH
2223: LD_INT 1
2225: PUSH
2226: LD_INT 3
2228: PUSH
2229: LD_INT 51
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: LIST
2236: LIST
2237: PUSH
2238: LD_INT 21
2240: PUSH
2241: LD_INT 1
2243: PUSH
2244: LD_INT 3
2246: PUSH
2247: LD_INT 52
2249: PUSH
2250: EMPTY
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: PPUSH
2265: CALL 79455 0 2
// MC_SetScanArea ( mc_rus_2 , rus2Base ) ;
2269: LD_EXP 8
2273: PPUSH
2274: LD_INT 11
2276: PPUSH
2277: CALL 80776 0 2
// MC_SetParkingArea ( mc_rus_2 , rus2Parking ) ;
2281: LD_EXP 8
2285: PPUSH
2286: LD_INT 12
2288: PPUSH
2289: CALL 80720 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_2 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2293: LD_EXP 8
2297: PPUSH
2298: LD_INT 43
2300: PUSH
2301: LD_INT 47
2303: PUSH
2304: LD_INT 45
2306: PUSH
2307: LD_INT 49
2309: PUSH
2310: LD_INT 46
2312: PUSH
2313: EMPTY
2314: LIST
2315: LIST
2316: LIST
2317: LIST
2318: LIST
2319: PPUSH
2320: CALL 80608 0 2
// MC_SetCratesArea ( mc_rus_2 , rusCrates ) ;
2324: LD_EXP 8
2328: PPUSH
2329: LD_INT 13
2331: PPUSH
2332: CALL 80290 0 2
// MC_SetTame ( mc_rus_2 , rus2Base ) ;
2336: LD_EXP 8
2340: PPUSH
2341: LD_INT 11
2343: PPUSH
2344: CALL 80021 0 2
// MC_SetDefenderLimit ( mc_rus_2 , 4 ) ;
2348: LD_EXP 8
2352: PPUSH
2353: LD_INT 4
2355: PPUSH
2356: CALL 79640 0 2
// MC_SetTeleportExit ( mc_rus_2 , [ [ 115 , 201 ] ] ) ;
2360: LD_EXP 8
2364: PPUSH
2365: LD_INT 115
2367: PUSH
2368: LD_INT 201
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PUSH
2375: EMPTY
2376: LIST
2377: PPUSH
2378: CALL 80346 0 2
// MC_SetProduceList ( mc_rus_2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
2382: LD_EXP 8
2386: PPUSH
2387: LD_INT 24
2389: PUSH
2390: LD_INT 3
2392: PUSH
2393: LD_INT 3
2395: PUSH
2396: LD_INT 46
2398: PUSH
2399: EMPTY
2400: LIST
2401: LIST
2402: LIST
2403: LIST
2404: PUSH
2405: LD_INT 24
2407: PUSH
2408: LD_INT 3
2410: PUSH
2411: LD_INT 3
2413: PUSH
2414: LD_INT 46
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: PUSH
2423: LD_INT 24
2425: PUSH
2426: LD_INT 3
2428: PUSH
2429: LD_INT 3
2431: PUSH
2432: LD_INT 46
2434: PUSH
2435: EMPTY
2436: LIST
2437: LIST
2438: LIST
2439: LIST
2440: PUSH
2441: LD_INT 24
2443: PUSH
2444: LD_INT 3
2446: PUSH
2447: LD_INT 3
2449: PUSH
2450: LD_INT 46
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: LIST
2457: LIST
2458: PUSH
2459: EMPTY
2460: LIST
2461: LIST
2462: LIST
2463: LIST
2464: PPUSH
2465: CALL 79455 0 2
// end ;
2469: LD_VAR 0 1
2473: RET
// export function PrepareRussians ; var i , b , tmp , side , sr , depot , base ; begin
2474: LD_INT 0
2476: PPUSH
2477: PPUSH
2478: PPUSH
2479: PPUSH
2480: PPUSH
2481: PPUSH
2482: PPUSH
2483: PPUSH
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , rusApe , 0 ) ;
2484: LD_INT 0
2486: PPUSH
2487: LD_INT 0
2489: PPUSH
2490: LD_INT 3
2492: PPUSH
2493: LD_INT 0
2495: PPUSH
2496: LD_INT 0
2498: PPUSH
2499: LD_INT 0
2501: PPUSH
2502: LD_INT 0
2504: PPUSH
2505: LD_INT 14
2507: PPUSH
2508: LD_INT 0
2510: PPUSH
2511: CALL 51963 0 9
// side := 3 ;
2515: LD_ADDR_VAR 0 5
2519: PUSH
2520: LD_INT 3
2522: ST_TO_ADDR
// SetTech ( tech_targTeleport , side , state_researched ) ;
2523: LD_INT 38
2525: PPUSH
2526: LD_VAR 0 5
2530: PPUSH
2531: LD_INT 2
2533: PPUSH
2534: CALL_OW 322
// SetTech ( tech_gun , side , state_researched ) ;
2538: LD_INT 39
2540: PPUSH
2541: LD_VAR 0 5
2545: PPUSH
2546: LD_INT 2
2548: PPUSH
2549: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
2553: LD_INT 34
2555: PPUSH
2556: LD_VAR 0 5
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: CALL_OW 322
// tmp := [ [ 0 , 208 , 163 , 4 , 0 , 0 ] , [ 3 , 194 , 161 , 1 , 0 , 0 ] , [ 17 , 190 , 161 , 1 , 0 , 0 ] , [ 5 , 200 , 145 , 3 , 0 , 0 ] , [ 32 , 192 , 144 , 3 , 0 , 0 ] , [ 26 , 216 , 172 , 3 , 0 , 0 ] , [ 26 , 218 , 176 , 3 , 0 , 0 ] , [ 29 , 182 , 149 , 3 , 0 , 0 ] , [ 8 , 201 , 171 , 0 , 10 , 11 ] , [ 32 , 188 , 167 , 0 , 0 , 0 ] , [ 32 , 202 , 179 , 0 , 0 , 0 ] , [ 32 , 209 , 182 , 0 , 0 , 0 ] , [ 32 , 220 , 183 , 5 , 0 , 0 ] , [ 32 , 225 , 181 , 5 , 0 , 0 ] , [ 26 , 220 , 174 , 5 , 0 , 0 ] , [ 1 , 84 , 128 , 4 , 0 , 0 ] , [ 3 , 68 , 121 , 1 , 0 , 0 ] , [ 19 , 72 , 125 , 5 , 0 , 0 ] , [ 18 , 68 , 124 , 0 , 0 , 0 ] , [ 24 , 64 , 121 , 1 , 0 , 0 ] , [ 17 , 65 , 118 , 2 , 0 , 0 ] , [ 21 , 68 , 117 , 3 , 0 , 0 ] , [ 8 , 68 , 130 , 1 , 14 , 10 ] , [ 8 , 67 , 110 , 2 , 11 , 12 ] , [ 28 , 85 , 108 , 2 , 0 , 0 ] , [ 28 , 85 , 124 , 2 , 0 , 0 ] , [ 30 , 97 , 119 , 2 , 0 , 0 ] , [ 5 , 111 , 138 , 4 , 0 , 0 ] , [ 33 , 104 , 130 , 3 , 0 , 0 ] , [ 33 , 110 , 142 , 5 , 0 , 0 ] , [ 33 , 91 , 131 , 5 , 0 , 0 ] , [ 33 , 107 , 157 , 5 , 0 , 0 ] , [ 33 , 104 , 160 , 5 , 0 , 0 ] , [ 33 , 101 , 162 , 5 , 0 , 0 ] , [ 32 , 87 , 157 , 5 , 0 , 0 ] , [ 32 , 105 , 158 , 5 , 0 , 0 ] , [ 33 , 91 , 118 , 4 , 0 , 0 ] , [ 33 , 89 , 107 , 4 , 0 , 0 ] , [ 5 , 86 , 96 , 3 , 0 , 0 ] , [ 33 , 91 , 102 , 4 , 0 , 0 ] , [ 32 , 80 , 95 , 3 , 0 , 0 ] , [ 28 , 77 , 105 , 3 , 0 , 0 ] , [ 28 , 85 , 113 , 3 , 0 , 0 ] , [ 28 , 55 , 97 , 3 , 0 , 0 ] , [ 28 , 88 , 128 , 3 , 0 , 0 ] , [ 32 , 69 , 101 , 2 , 0 , 0 ] , [ 1 , 34 , 23 , 4 , 0 , 0 ] , [ 8 , 25 , 4 , 3 , 11 , 10 ] , [ 8 , 15 , 4 , 2 , 14 , 12 ] , [ 29 , 55 , 35 , 2 , 0 , 0 ] , [ 29 , 24 , 44 , 2 , 0 , 0 ] , [ 34 , 34 , 32 , 4 , 0 , 0 ] , [ 3 , 14 , 16 , 1 , 0 , 0 ] , [ 24 , 10 , 16 , 1 , 0 , 0 ] , [ 21 , 11 , 13 , 2 , 0 , 0 ] , [ 18 , 14 , 12 , 3 , 0 , 0 ] , [ 16 , 14 , 19 , 0 , 0 , 0 ] , [ 17 , 18 , 20 , 5 , 0 , 0 ] , [ 28 , 10 , 5 , 1 , 0 , 0 ] , [ 28 , 8 , 8 , 1 , 0 , 0 ] , [ 26 , 19 , 2 , 1 , 0 , 0 ] , [ 26 , 30 , 2 , 1 , 0 , 0 ] , [ 5 , 59 , 20 , 4 , 0 , 0 ] , [ 32 , 60 , 24 , 4 , 0 , 0 ] , [ 32 , 61 , 45 , 5 , 0 , 0 ] , [ 32 , 52 , 51 , 5 , 0 , 0 ] , [ 33 , 56 , 51 , 5 , 0 , 0 ] , [ 33 , 62 , 49 , 5 , 0 , 0 ] , [ 33 , 41 , 47 , 5 , 0 , 0 ] , [ 33 , 33 , 52 , 5 , 0 , 0 ] , [ 5 , 31 , 40 , 0 , 0 , 0 ] , [ 33 , 65 , 37 , 5 , 0 , 0 ] , [ 33 , 63 , 29 , 4 , 0 , 0 ] , [ 33 , 54 , 11 , 4 , 0 , 0 ] , [ 33 , 56 , 15 , 4 , 0 , 0 ] , [ 33 , 51 , 6 , 4 , 0 , 0 ] , [ 26 , 39 , 25 , 0 , 0 , 0 ] , [ 26 , 37 , 21 , 0 , 0 , 0 ] , [ 32 , 35 , 17 , 4 , 0 , 0 ] , [ 33 , 35 , 28 , 4 , 0 , 0 ] , [ 33 , 28 , 46 , 5 , 0 , 0 ] , [ 33 , 31 , 6 , 4 , 0 , 0 ] , [ 26 , 54 , 38 , 4 , 0 , 0 ] , [ 33 , 207 , 167 , 3 , 0 , 0 ] , [ 30 , 43 , 2 , 4 , 0 , 0 ] ] ;
2568: LD_ADDR_VAR 0 4
2572: PUSH
2573: LD_INT 0
2575: PUSH
2576: LD_INT 208
2578: PUSH
2579: LD_INT 163
2581: PUSH
2582: LD_INT 4
2584: PUSH
2585: LD_INT 0
2587: PUSH
2588: LD_INT 0
2590: PUSH
2591: EMPTY
2592: LIST
2593: LIST
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: PUSH
2599: LD_INT 3
2601: PUSH
2602: LD_INT 194
2604: PUSH
2605: LD_INT 161
2607: PUSH
2608: LD_INT 1
2610: PUSH
2611: LD_INT 0
2613: PUSH
2614: LD_INT 0
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: PUSH
2625: LD_INT 17
2627: PUSH
2628: LD_INT 190
2630: PUSH
2631: LD_INT 161
2633: PUSH
2634: LD_INT 1
2636: PUSH
2637: LD_INT 0
2639: PUSH
2640: LD_INT 0
2642: PUSH
2643: EMPTY
2644: LIST
2645: LIST
2646: LIST
2647: LIST
2648: LIST
2649: LIST
2650: PUSH
2651: LD_INT 5
2653: PUSH
2654: LD_INT 200
2656: PUSH
2657: LD_INT 145
2659: PUSH
2660: LD_INT 3
2662: PUSH
2663: LD_INT 0
2665: PUSH
2666: LD_INT 0
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: LIST
2673: LIST
2674: LIST
2675: LIST
2676: PUSH
2677: LD_INT 32
2679: PUSH
2680: LD_INT 192
2682: PUSH
2683: LD_INT 144
2685: PUSH
2686: LD_INT 3
2688: PUSH
2689: LD_INT 0
2691: PUSH
2692: LD_INT 0
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: LIST
2699: LIST
2700: LIST
2701: LIST
2702: PUSH
2703: LD_INT 26
2705: PUSH
2706: LD_INT 216
2708: PUSH
2709: LD_INT 172
2711: PUSH
2712: LD_INT 3
2714: PUSH
2715: LD_INT 0
2717: PUSH
2718: LD_INT 0
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: PUSH
2729: LD_INT 26
2731: PUSH
2732: LD_INT 218
2734: PUSH
2735: LD_INT 176
2737: PUSH
2738: LD_INT 3
2740: PUSH
2741: LD_INT 0
2743: PUSH
2744: LD_INT 0
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: LIST
2751: LIST
2752: LIST
2753: LIST
2754: PUSH
2755: LD_INT 29
2757: PUSH
2758: LD_INT 182
2760: PUSH
2761: LD_INT 149
2763: PUSH
2764: LD_INT 3
2766: PUSH
2767: LD_INT 0
2769: PUSH
2770: LD_INT 0
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: LIST
2777: LIST
2778: LIST
2779: LIST
2780: PUSH
2781: LD_INT 8
2783: PUSH
2784: LD_INT 201
2786: PUSH
2787: LD_INT 171
2789: PUSH
2790: LD_INT 0
2792: PUSH
2793: LD_INT 10
2795: PUSH
2796: LD_INT 11
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: LIST
2803: LIST
2804: LIST
2805: LIST
2806: PUSH
2807: LD_INT 32
2809: PUSH
2810: LD_INT 188
2812: PUSH
2813: LD_INT 167
2815: PUSH
2816: LD_INT 0
2818: PUSH
2819: LD_INT 0
2821: PUSH
2822: LD_INT 0
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: LIST
2830: LIST
2831: LIST
2832: PUSH
2833: LD_INT 32
2835: PUSH
2836: LD_INT 202
2838: PUSH
2839: LD_INT 179
2841: PUSH
2842: LD_INT 0
2844: PUSH
2845: LD_INT 0
2847: PUSH
2848: LD_INT 0
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: LIST
2855: LIST
2856: LIST
2857: LIST
2858: PUSH
2859: LD_INT 32
2861: PUSH
2862: LD_INT 209
2864: PUSH
2865: LD_INT 182
2867: PUSH
2868: LD_INT 0
2870: PUSH
2871: LD_INT 0
2873: PUSH
2874: LD_INT 0
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: LIST
2881: LIST
2882: LIST
2883: LIST
2884: PUSH
2885: LD_INT 32
2887: PUSH
2888: LD_INT 220
2890: PUSH
2891: LD_INT 183
2893: PUSH
2894: LD_INT 5
2896: PUSH
2897: LD_INT 0
2899: PUSH
2900: LD_INT 0
2902: PUSH
2903: EMPTY
2904: LIST
2905: LIST
2906: LIST
2907: LIST
2908: LIST
2909: LIST
2910: PUSH
2911: LD_INT 32
2913: PUSH
2914: LD_INT 225
2916: PUSH
2917: LD_INT 181
2919: PUSH
2920: LD_INT 5
2922: PUSH
2923: LD_INT 0
2925: PUSH
2926: LD_INT 0
2928: PUSH
2929: EMPTY
2930: LIST
2931: LIST
2932: LIST
2933: LIST
2934: LIST
2935: LIST
2936: PUSH
2937: LD_INT 26
2939: PUSH
2940: LD_INT 220
2942: PUSH
2943: LD_INT 174
2945: PUSH
2946: LD_INT 5
2948: PUSH
2949: LD_INT 0
2951: PUSH
2952: LD_INT 0
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: LIST
2959: LIST
2960: LIST
2961: LIST
2962: PUSH
2963: LD_INT 1
2965: PUSH
2966: LD_INT 84
2968: PUSH
2969: LD_INT 128
2971: PUSH
2972: LD_INT 4
2974: PUSH
2975: LD_INT 0
2977: PUSH
2978: LD_INT 0
2980: PUSH
2981: EMPTY
2982: LIST
2983: LIST
2984: LIST
2985: LIST
2986: LIST
2987: LIST
2988: PUSH
2989: LD_INT 3
2991: PUSH
2992: LD_INT 68
2994: PUSH
2995: LD_INT 121
2997: PUSH
2998: LD_INT 1
3000: PUSH
3001: LD_INT 0
3003: PUSH
3004: LD_INT 0
3006: PUSH
3007: EMPTY
3008: LIST
3009: LIST
3010: LIST
3011: LIST
3012: LIST
3013: LIST
3014: PUSH
3015: LD_INT 19
3017: PUSH
3018: LD_INT 72
3020: PUSH
3021: LD_INT 125
3023: PUSH
3024: LD_INT 5
3026: PUSH
3027: LD_INT 0
3029: PUSH
3030: LD_INT 0
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: LIST
3037: LIST
3038: LIST
3039: LIST
3040: PUSH
3041: LD_INT 18
3043: PUSH
3044: LD_INT 68
3046: PUSH
3047: LD_INT 124
3049: PUSH
3050: LD_INT 0
3052: PUSH
3053: LD_INT 0
3055: PUSH
3056: LD_INT 0
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: PUSH
3067: LD_INT 24
3069: PUSH
3070: LD_INT 64
3072: PUSH
3073: LD_INT 121
3075: PUSH
3076: LD_INT 1
3078: PUSH
3079: LD_INT 0
3081: PUSH
3082: LD_INT 0
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: LIST
3089: LIST
3090: LIST
3091: LIST
3092: PUSH
3093: LD_INT 17
3095: PUSH
3096: LD_INT 65
3098: PUSH
3099: LD_INT 118
3101: PUSH
3102: LD_INT 2
3104: PUSH
3105: LD_INT 0
3107: PUSH
3108: LD_INT 0
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: LIST
3115: LIST
3116: LIST
3117: LIST
3118: PUSH
3119: LD_INT 21
3121: PUSH
3122: LD_INT 68
3124: PUSH
3125: LD_INT 117
3127: PUSH
3128: LD_INT 3
3130: PUSH
3131: LD_INT 0
3133: PUSH
3134: LD_INT 0
3136: PUSH
3137: EMPTY
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: PUSH
3145: LD_INT 8
3147: PUSH
3148: LD_INT 68
3150: PUSH
3151: LD_INT 130
3153: PUSH
3154: LD_INT 1
3156: PUSH
3157: LD_INT 14
3159: PUSH
3160: LD_INT 10
3162: PUSH
3163: EMPTY
3164: LIST
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: PUSH
3171: LD_INT 8
3173: PUSH
3174: LD_INT 67
3176: PUSH
3177: LD_INT 110
3179: PUSH
3180: LD_INT 2
3182: PUSH
3183: LD_INT 11
3185: PUSH
3186: LD_INT 12
3188: PUSH
3189: EMPTY
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: PUSH
3197: LD_INT 28
3199: PUSH
3200: LD_INT 85
3202: PUSH
3203: LD_INT 108
3205: PUSH
3206: LD_INT 2
3208: PUSH
3209: LD_INT 0
3211: PUSH
3212: LD_INT 0
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 28
3225: PUSH
3226: LD_INT 85
3228: PUSH
3229: LD_INT 124
3231: PUSH
3232: LD_INT 2
3234: PUSH
3235: LD_INT 0
3237: PUSH
3238: LD_INT 0
3240: PUSH
3241: EMPTY
3242: LIST
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: PUSH
3249: LD_INT 30
3251: PUSH
3252: LD_INT 97
3254: PUSH
3255: LD_INT 119
3257: PUSH
3258: LD_INT 2
3260: PUSH
3261: LD_INT 0
3263: PUSH
3264: LD_INT 0
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: LIST
3274: PUSH
3275: LD_INT 5
3277: PUSH
3278: LD_INT 111
3280: PUSH
3281: LD_INT 138
3283: PUSH
3284: LD_INT 4
3286: PUSH
3287: LD_INT 0
3289: PUSH
3290: LD_INT 0
3292: PUSH
3293: EMPTY
3294: LIST
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: PUSH
3301: LD_INT 33
3303: PUSH
3304: LD_INT 104
3306: PUSH
3307: LD_INT 130
3309: PUSH
3310: LD_INT 3
3312: PUSH
3313: LD_INT 0
3315: PUSH
3316: LD_INT 0
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: PUSH
3327: LD_INT 33
3329: PUSH
3330: LD_INT 110
3332: PUSH
3333: LD_INT 142
3335: PUSH
3336: LD_INT 5
3338: PUSH
3339: LD_INT 0
3341: PUSH
3342: LD_INT 0
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: PUSH
3353: LD_INT 33
3355: PUSH
3356: LD_INT 91
3358: PUSH
3359: LD_INT 131
3361: PUSH
3362: LD_INT 5
3364: PUSH
3365: LD_INT 0
3367: PUSH
3368: LD_INT 0
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: PUSH
3379: LD_INT 33
3381: PUSH
3382: LD_INT 107
3384: PUSH
3385: LD_INT 157
3387: PUSH
3388: LD_INT 5
3390: PUSH
3391: LD_INT 0
3393: PUSH
3394: LD_INT 0
3396: PUSH
3397: EMPTY
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: PUSH
3405: LD_INT 33
3407: PUSH
3408: LD_INT 104
3410: PUSH
3411: LD_INT 160
3413: PUSH
3414: LD_INT 5
3416: PUSH
3417: LD_INT 0
3419: PUSH
3420: LD_INT 0
3422: PUSH
3423: EMPTY
3424: LIST
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: PUSH
3431: LD_INT 33
3433: PUSH
3434: LD_INT 101
3436: PUSH
3437: LD_INT 162
3439: PUSH
3440: LD_INT 5
3442: PUSH
3443: LD_INT 0
3445: PUSH
3446: LD_INT 0
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: LIST
3456: PUSH
3457: LD_INT 32
3459: PUSH
3460: LD_INT 87
3462: PUSH
3463: LD_INT 157
3465: PUSH
3466: LD_INT 5
3468: PUSH
3469: LD_INT 0
3471: PUSH
3472: LD_INT 0
3474: PUSH
3475: EMPTY
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: LIST
3482: PUSH
3483: LD_INT 32
3485: PUSH
3486: LD_INT 105
3488: PUSH
3489: LD_INT 158
3491: PUSH
3492: LD_INT 5
3494: PUSH
3495: LD_INT 0
3497: PUSH
3498: LD_INT 0
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: PUSH
3509: LD_INT 33
3511: PUSH
3512: LD_INT 91
3514: PUSH
3515: LD_INT 118
3517: PUSH
3518: LD_INT 4
3520: PUSH
3521: LD_INT 0
3523: PUSH
3524: LD_INT 0
3526: PUSH
3527: EMPTY
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: PUSH
3535: LD_INT 33
3537: PUSH
3538: LD_INT 89
3540: PUSH
3541: LD_INT 107
3543: PUSH
3544: LD_INT 4
3546: PUSH
3547: LD_INT 0
3549: PUSH
3550: LD_INT 0
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: PUSH
3561: LD_INT 5
3563: PUSH
3564: LD_INT 86
3566: PUSH
3567: LD_INT 96
3569: PUSH
3570: LD_INT 3
3572: PUSH
3573: LD_INT 0
3575: PUSH
3576: LD_INT 0
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: PUSH
3587: LD_INT 33
3589: PUSH
3590: LD_INT 91
3592: PUSH
3593: LD_INT 102
3595: PUSH
3596: LD_INT 4
3598: PUSH
3599: LD_INT 0
3601: PUSH
3602: LD_INT 0
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: PUSH
3613: LD_INT 32
3615: PUSH
3616: LD_INT 80
3618: PUSH
3619: LD_INT 95
3621: PUSH
3622: LD_INT 3
3624: PUSH
3625: LD_INT 0
3627: PUSH
3628: LD_INT 0
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: PUSH
3639: LD_INT 28
3641: PUSH
3642: LD_INT 77
3644: PUSH
3645: LD_INT 105
3647: PUSH
3648: LD_INT 3
3650: PUSH
3651: LD_INT 0
3653: PUSH
3654: LD_INT 0
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: PUSH
3665: LD_INT 28
3667: PUSH
3668: LD_INT 85
3670: PUSH
3671: LD_INT 113
3673: PUSH
3674: LD_INT 3
3676: PUSH
3677: LD_INT 0
3679: PUSH
3680: LD_INT 0
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: PUSH
3691: LD_INT 28
3693: PUSH
3694: LD_INT 55
3696: PUSH
3697: LD_INT 97
3699: PUSH
3700: LD_INT 3
3702: PUSH
3703: LD_INT 0
3705: PUSH
3706: LD_INT 0
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: LIST
3715: LIST
3716: PUSH
3717: LD_INT 28
3719: PUSH
3720: LD_INT 88
3722: PUSH
3723: LD_INT 128
3725: PUSH
3726: LD_INT 3
3728: PUSH
3729: LD_INT 0
3731: PUSH
3732: LD_INT 0
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: PUSH
3743: LD_INT 32
3745: PUSH
3746: LD_INT 69
3748: PUSH
3749: LD_INT 101
3751: PUSH
3752: LD_INT 2
3754: PUSH
3755: LD_INT 0
3757: PUSH
3758: LD_INT 0
3760: PUSH
3761: EMPTY
3762: LIST
3763: LIST
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: PUSH
3769: LD_INT 1
3771: PUSH
3772: LD_INT 34
3774: PUSH
3775: LD_INT 23
3777: PUSH
3778: LD_INT 4
3780: PUSH
3781: LD_INT 0
3783: PUSH
3784: LD_INT 0
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: PUSH
3795: LD_INT 8
3797: PUSH
3798: LD_INT 25
3800: PUSH
3801: LD_INT 4
3803: PUSH
3804: LD_INT 3
3806: PUSH
3807: LD_INT 11
3809: PUSH
3810: LD_INT 10
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: PUSH
3821: LD_INT 8
3823: PUSH
3824: LD_INT 15
3826: PUSH
3827: LD_INT 4
3829: PUSH
3830: LD_INT 2
3832: PUSH
3833: LD_INT 14
3835: PUSH
3836: LD_INT 12
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: PUSH
3847: LD_INT 29
3849: PUSH
3850: LD_INT 55
3852: PUSH
3853: LD_INT 35
3855: PUSH
3856: LD_INT 2
3858: PUSH
3859: LD_INT 0
3861: PUSH
3862: LD_INT 0
3864: PUSH
3865: EMPTY
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: PUSH
3873: LD_INT 29
3875: PUSH
3876: LD_INT 24
3878: PUSH
3879: LD_INT 44
3881: PUSH
3882: LD_INT 2
3884: PUSH
3885: LD_INT 0
3887: PUSH
3888: LD_INT 0
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: PUSH
3899: LD_INT 34
3901: PUSH
3902: LD_INT 34
3904: PUSH
3905: LD_INT 32
3907: PUSH
3908: LD_INT 4
3910: PUSH
3911: LD_INT 0
3913: PUSH
3914: LD_INT 0
3916: PUSH
3917: EMPTY
3918: LIST
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: PUSH
3925: LD_INT 3
3927: PUSH
3928: LD_INT 14
3930: PUSH
3931: LD_INT 16
3933: PUSH
3934: LD_INT 1
3936: PUSH
3937: LD_INT 0
3939: PUSH
3940: LD_INT 0
3942: PUSH
3943: EMPTY
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: PUSH
3951: LD_INT 24
3953: PUSH
3954: LD_INT 10
3956: PUSH
3957: LD_INT 16
3959: PUSH
3960: LD_INT 1
3962: PUSH
3963: LD_INT 0
3965: PUSH
3966: LD_INT 0
3968: PUSH
3969: EMPTY
3970: LIST
3971: LIST
3972: LIST
3973: LIST
3974: LIST
3975: LIST
3976: PUSH
3977: LD_INT 21
3979: PUSH
3980: LD_INT 11
3982: PUSH
3983: LD_INT 13
3985: PUSH
3986: LD_INT 2
3988: PUSH
3989: LD_INT 0
3991: PUSH
3992: LD_INT 0
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: LIST
3999: LIST
4000: LIST
4001: LIST
4002: PUSH
4003: LD_INT 18
4005: PUSH
4006: LD_INT 14
4008: PUSH
4009: LD_INT 12
4011: PUSH
4012: LD_INT 3
4014: PUSH
4015: LD_INT 0
4017: PUSH
4018: LD_INT 0
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: PUSH
4029: LD_INT 16
4031: PUSH
4032: LD_INT 14
4034: PUSH
4035: LD_INT 19
4037: PUSH
4038: LD_INT 0
4040: PUSH
4041: LD_INT 0
4043: PUSH
4044: LD_INT 0
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 17
4057: PUSH
4058: LD_INT 18
4060: PUSH
4061: LD_INT 20
4063: PUSH
4064: LD_INT 5
4066: PUSH
4067: LD_INT 0
4069: PUSH
4070: LD_INT 0
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: PUSH
4081: LD_INT 28
4083: PUSH
4084: LD_INT 10
4086: PUSH
4087: LD_INT 5
4089: PUSH
4090: LD_INT 1
4092: PUSH
4093: LD_INT 0
4095: PUSH
4096: LD_INT 0
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: PUSH
4107: LD_INT 28
4109: PUSH
4110: LD_INT 8
4112: PUSH
4113: LD_INT 8
4115: PUSH
4116: LD_INT 1
4118: PUSH
4119: LD_INT 0
4121: PUSH
4122: LD_INT 0
4124: PUSH
4125: EMPTY
4126: LIST
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: PUSH
4133: LD_INT 26
4135: PUSH
4136: LD_INT 19
4138: PUSH
4139: LD_INT 2
4141: PUSH
4142: LD_INT 1
4144: PUSH
4145: LD_INT 0
4147: PUSH
4148: LD_INT 0
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: PUSH
4159: LD_INT 26
4161: PUSH
4162: LD_INT 30
4164: PUSH
4165: LD_INT 2
4167: PUSH
4168: LD_INT 1
4170: PUSH
4171: LD_INT 0
4173: PUSH
4174: LD_INT 0
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: PUSH
4185: LD_INT 5
4187: PUSH
4188: LD_INT 59
4190: PUSH
4191: LD_INT 20
4193: PUSH
4194: LD_INT 4
4196: PUSH
4197: LD_INT 0
4199: PUSH
4200: LD_INT 0
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: PUSH
4211: LD_INT 32
4213: PUSH
4214: LD_INT 60
4216: PUSH
4217: LD_INT 24
4219: PUSH
4220: LD_INT 4
4222: PUSH
4223: LD_INT 0
4225: PUSH
4226: LD_INT 0
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: PUSH
4237: LD_INT 32
4239: PUSH
4240: LD_INT 61
4242: PUSH
4243: LD_INT 45
4245: PUSH
4246: LD_INT 5
4248: PUSH
4249: LD_INT 0
4251: PUSH
4252: LD_INT 0
4254: PUSH
4255: EMPTY
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: LIST
4262: PUSH
4263: LD_INT 32
4265: PUSH
4266: LD_INT 52
4268: PUSH
4269: LD_INT 51
4271: PUSH
4272: LD_INT 5
4274: PUSH
4275: LD_INT 0
4277: PUSH
4278: LD_INT 0
4280: PUSH
4281: EMPTY
4282: LIST
4283: LIST
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: PUSH
4289: LD_INT 33
4291: PUSH
4292: LD_INT 56
4294: PUSH
4295: LD_INT 51
4297: PUSH
4298: LD_INT 5
4300: PUSH
4301: LD_INT 0
4303: PUSH
4304: LD_INT 0
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: LIST
4311: LIST
4312: LIST
4313: LIST
4314: PUSH
4315: LD_INT 33
4317: PUSH
4318: LD_INT 62
4320: PUSH
4321: LD_INT 49
4323: PUSH
4324: LD_INT 5
4326: PUSH
4327: LD_INT 0
4329: PUSH
4330: LD_INT 0
4332: PUSH
4333: EMPTY
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: PUSH
4341: LD_INT 33
4343: PUSH
4344: LD_INT 41
4346: PUSH
4347: LD_INT 47
4349: PUSH
4350: LD_INT 5
4352: PUSH
4353: LD_INT 0
4355: PUSH
4356: LD_INT 0
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: PUSH
4367: LD_INT 33
4369: PUSH
4370: LD_INT 33
4372: PUSH
4373: LD_INT 52
4375: PUSH
4376: LD_INT 5
4378: PUSH
4379: LD_INT 0
4381: PUSH
4382: LD_INT 0
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: PUSH
4393: LD_INT 5
4395: PUSH
4396: LD_INT 31
4398: PUSH
4399: LD_INT 40
4401: PUSH
4402: LD_INT 0
4404: PUSH
4405: LD_INT 0
4407: PUSH
4408: LD_INT 0
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: PUSH
4419: LD_INT 33
4421: PUSH
4422: LD_INT 65
4424: PUSH
4425: LD_INT 37
4427: PUSH
4428: LD_INT 5
4430: PUSH
4431: LD_INT 0
4433: PUSH
4434: LD_INT 0
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: PUSH
4445: LD_INT 33
4447: PUSH
4448: LD_INT 63
4450: PUSH
4451: LD_INT 29
4453: PUSH
4454: LD_INT 4
4456: PUSH
4457: LD_INT 0
4459: PUSH
4460: LD_INT 0
4462: PUSH
4463: EMPTY
4464: LIST
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: PUSH
4471: LD_INT 33
4473: PUSH
4474: LD_INT 54
4476: PUSH
4477: LD_INT 11
4479: PUSH
4480: LD_INT 4
4482: PUSH
4483: LD_INT 0
4485: PUSH
4486: LD_INT 0
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: PUSH
4497: LD_INT 33
4499: PUSH
4500: LD_INT 56
4502: PUSH
4503: LD_INT 15
4505: PUSH
4506: LD_INT 4
4508: PUSH
4509: LD_INT 0
4511: PUSH
4512: LD_INT 0
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: PUSH
4523: LD_INT 33
4525: PUSH
4526: LD_INT 51
4528: PUSH
4529: LD_INT 6
4531: PUSH
4532: LD_INT 4
4534: PUSH
4535: LD_INT 0
4537: PUSH
4538: LD_INT 0
4540: PUSH
4541: EMPTY
4542: LIST
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: PUSH
4549: LD_INT 26
4551: PUSH
4552: LD_INT 39
4554: PUSH
4555: LD_INT 25
4557: PUSH
4558: LD_INT 0
4560: PUSH
4561: LD_INT 0
4563: PUSH
4564: LD_INT 0
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: PUSH
4575: LD_INT 26
4577: PUSH
4578: LD_INT 37
4580: PUSH
4581: LD_INT 21
4583: PUSH
4584: LD_INT 0
4586: PUSH
4587: LD_INT 0
4589: PUSH
4590: LD_INT 0
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: PUSH
4601: LD_INT 32
4603: PUSH
4604: LD_INT 35
4606: PUSH
4607: LD_INT 17
4609: PUSH
4610: LD_INT 4
4612: PUSH
4613: LD_INT 0
4615: PUSH
4616: LD_INT 0
4618: PUSH
4619: EMPTY
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: PUSH
4627: LD_INT 33
4629: PUSH
4630: LD_INT 35
4632: PUSH
4633: LD_INT 28
4635: PUSH
4636: LD_INT 4
4638: PUSH
4639: LD_INT 0
4641: PUSH
4642: LD_INT 0
4644: PUSH
4645: EMPTY
4646: LIST
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: LIST
4652: PUSH
4653: LD_INT 33
4655: PUSH
4656: LD_INT 28
4658: PUSH
4659: LD_INT 46
4661: PUSH
4662: LD_INT 5
4664: PUSH
4665: LD_INT 0
4667: PUSH
4668: LD_INT 0
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: PUSH
4679: LD_INT 33
4681: PUSH
4682: LD_INT 31
4684: PUSH
4685: LD_INT 6
4687: PUSH
4688: LD_INT 4
4690: PUSH
4691: LD_INT 0
4693: PUSH
4694: LD_INT 0
4696: PUSH
4697: EMPTY
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: PUSH
4705: LD_INT 26
4707: PUSH
4708: LD_INT 54
4710: PUSH
4711: LD_INT 38
4713: PUSH
4714: LD_INT 4
4716: PUSH
4717: LD_INT 0
4719: PUSH
4720: LD_INT 0
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: PUSH
4731: LD_INT 33
4733: PUSH
4734: LD_INT 207
4736: PUSH
4737: LD_INT 167
4739: PUSH
4740: LD_INT 3
4742: PUSH
4743: LD_INT 0
4745: PUSH
4746: LD_INT 0
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: PUSH
4757: LD_INT 30
4759: PUSH
4760: LD_INT 43
4762: PUSH
4763: LD_INT 2
4765: PUSH
4766: LD_INT 4
4768: PUSH
4769: LD_INT 0
4771: PUSH
4772: LD_INT 0
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: ST_TO_ADDR
// for i in tmp do
4870: LD_ADDR_VAR 0 2
4874: PUSH
4875: LD_VAR 0 4
4879: PUSH
4880: FOR_IN
4881: IFFALSE 5112
// begin uc_side := side ;
4883: LD_ADDR_OWVAR 20
4887: PUSH
4888: LD_VAR 0 5
4892: ST_TO_ADDR
// uc_nation := nation_russian ;
4893: LD_ADDR_OWVAR 21
4897: PUSH
4898: LD_INT 3
4900: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4901: LD_ADDR_OWVAR 42
4905: PUSH
4906: LD_VAR 0 2
4910: PUSH
4911: LD_INT 1
4913: ARRAY
4914: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
4915: LD_ADDR_OWVAR 43
4919: PUSH
4920: LD_INT 5
4922: PPUSH
4923: LD_INT 6
4925: PPUSH
4926: CALL_OW 12
4930: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
4931: LD_ADDR_OWVAR 44
4935: PUSH
4936: LD_VAR 0 2
4940: PUSH
4941: LD_INT 5
4943: ARRAY
4944: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
4945: LD_ADDR_OWVAR 45
4949: PUSH
4950: LD_VAR 0 2
4954: PUSH
4955: LD_INT 6
4957: ARRAY
4958: ST_TO_ADDR
// sr := 0 ;
4959: LD_ADDR_VAR 0 6
4963: PUSH
4964: LD_INT 0
4966: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
4967: LD_VAR 0 2
4971: PUSH
4972: LD_INT 1
4974: ARRAY
4975: PUSH
4976: LD_INT 29
4978: EQUAL
4979: IFFALSE 4991
// sr := mat_oil else
4981: LD_ADDR_VAR 0 6
4985: PUSH
4986: LD_INT 2
4988: ST_TO_ADDR
4989: GO 5013
// if i [ 1 ] = b_siberite_mine then
4991: LD_VAR 0 2
4995: PUSH
4996: LD_INT 1
4998: ARRAY
4999: PUSH
5000: LD_INT 30
5002: EQUAL
5003: IFFALSE 5013
// sr := mat_siberit ;
5005: LD_ADDR_VAR 0 6
5009: PUSH
5010: LD_INT 3
5012: ST_TO_ADDR
// if sr then
5013: LD_VAR 0 6
5017: IFFALSE 5073
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
5019: LD_VAR 0 2
5023: PUSH
5024: LD_INT 2
5026: ARRAY
5027: PPUSH
5028: LD_VAR 0 2
5032: PUSH
5033: LD_INT 3
5035: ARRAY
5036: PPUSH
5037: LD_VAR 0 6
5041: PPUSH
5042: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
5046: LD_VAR 0 2
5050: PUSH
5051: LD_INT 2
5053: ARRAY
5054: PPUSH
5055: LD_VAR 0 2
5059: PUSH
5060: LD_INT 3
5062: ARRAY
5063: PPUSH
5064: LD_VAR 0 5
5068: PPUSH
5069: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
5073: LD_ADDR_VAR 0 3
5077: PUSH
5078: LD_VAR 0 2
5082: PUSH
5083: LD_INT 2
5085: ARRAY
5086: PPUSH
5087: LD_VAR 0 2
5091: PUSH
5092: LD_INT 3
5094: ARRAY
5095: PPUSH
5096: LD_VAR 0 2
5100: PUSH
5101: LD_INT 4
5103: ARRAY
5104: PPUSH
5105: CALL_OW 47
5109: ST_TO_ADDR
// end ;
5110: GO 4880
5112: POP
5113: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
5114: LD_ADDR_VAR 0 7
5118: PUSH
5119: LD_INT 22
5121: PUSH
5122: LD_VAR 0 5
5126: PUSH
5127: EMPTY
5128: LIST
5129: LIST
5130: PUSH
5131: LD_INT 30
5133: PUSH
5134: LD_INT 1
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: PUSH
5141: EMPTY
5142: LIST
5143: LIST
5144: PPUSH
5145: CALL_OW 69
5149: ST_TO_ADDR
// if not depot then
5150: LD_VAR 0 7
5154: NOT
5155: IFFALSE 5159
// exit ;
5157: GO 5503
// base := PrepareBase ( HexInfo ( 84 , 128 ) , rus1Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5159: LD_ADDR_VAR 0 8
5163: PUSH
5164: LD_INT 84
5166: PPUSH
5167: LD_INT 128
5169: PPUSH
5170: CALL_OW 428
5174: PPUSH
5175: LD_INT 15
5177: PPUSH
5178: LD_INT 0
5180: PPUSH
5181: LD_INT 6
5183: PUSH
5184: LD_INT 7
5186: PUSH
5187: LD_INT 8
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: LIST
5194: PUSH
5195: LD_OWVAR 67
5199: ARRAY
5200: PPUSH
5201: LD_INT 3000
5203: PUSH
5204: LD_INT 300
5206: PUSH
5207: LD_INT 100
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: LIST
5214: PPUSH
5215: LD_INT 12
5217: PUSH
5218: LD_INT 6
5220: PUSH
5221: LD_INT 6
5223: PUSH
5224: LD_INT 4
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: PPUSH
5233: CALL 27581 0 6
5237: ST_TO_ADDR
// if not base then
5238: LD_VAR 0 8
5242: NOT
5243: IFFALSE 5247
// exit ;
5245: GO 5503
// mc_bases := Replace ( mc_bases , mc_rus_1 , base ) ;
5247: LD_ADDR_EXP 45
5251: PUSH
5252: LD_EXP 45
5256: PPUSH
5257: LD_EXP 7
5261: PPUSH
5262: LD_VAR 0 8
5266: PPUSH
5267: CALL_OW 1
5271: ST_TO_ADDR
// base := PrepareBase ( HexInfo ( 34 , 23 ) , rus2Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 20000 , 3000 , 1000 ] , [ 12 , 6 , 6 , 4 ] ) ;
5272: LD_ADDR_VAR 0 8
5276: PUSH
5277: LD_INT 34
5279: PPUSH
5280: LD_INT 23
5282: PPUSH
5283: CALL_OW 428
5287: PPUSH
5288: LD_INT 11
5290: PPUSH
5291: LD_INT 0
5293: PPUSH
5294: LD_INT 6
5296: PUSH
5297: LD_INT 7
5299: PUSH
5300: LD_INT 8
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: LIST
5307: PUSH
5308: LD_OWVAR 67
5312: ARRAY
5313: PPUSH
5314: LD_INT 20000
5316: PUSH
5317: LD_INT 3000
5319: PUSH
5320: LD_INT 1000
5322: PUSH
5323: EMPTY
5324: LIST
5325: LIST
5326: LIST
5327: PPUSH
5328: LD_INT 12
5330: PUSH
5331: LD_INT 6
5333: PUSH
5334: LD_INT 6
5336: PUSH
5337: LD_INT 4
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: PPUSH
5346: CALL 27581 0 6
5350: ST_TO_ADDR
// if not base then
5351: LD_VAR 0 8
5355: NOT
5356: IFFALSE 5360
// exit ;
5358: GO 5503
// mc_bases := Replace ( mc_bases , mc_rus_2 , base ) ;
5360: LD_ADDR_EXP 45
5364: PUSH
5365: LD_EXP 45
5369: PPUSH
5370: LD_EXP 8
5374: PPUSH
5375: LD_VAR 0 8
5379: PPUSH
5380: CALL_OW 1
5384: ST_TO_ADDR
// ruOutpost := PrepareBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] , ruOutpostArea , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 500 , 100 , 10 ] , [ [ 6 , 7 , 8 ] [ Difficulty ] , 2 , 0 , 1 ] ) ;
5385: LD_ADDR_EXP 14
5389: PUSH
5390: LD_INT 22
5392: PUSH
5393: LD_INT 3
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: PUSH
5400: LD_INT 30
5402: PUSH
5403: LD_INT 0
5405: PUSH
5406: EMPTY
5407: LIST
5408: LIST
5409: PUSH
5410: EMPTY
5411: LIST
5412: LIST
5413: PPUSH
5414: CALL_OW 69
5418: PUSH
5419: LD_INT 1
5421: ARRAY
5422: PPUSH
5423: LD_INT 25
5425: PPUSH
5426: LD_INT 0
5428: PPUSH
5429: LD_INT 6
5431: PUSH
5432: LD_INT 7
5434: PUSH
5435: LD_INT 8
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: LIST
5442: PUSH
5443: LD_OWVAR 67
5447: ARRAY
5448: PPUSH
5449: LD_INT 500
5451: PUSH
5452: LD_INT 100
5454: PUSH
5455: LD_INT 10
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: LIST
5462: PPUSH
5463: LD_INT 6
5465: PUSH
5466: LD_INT 7
5468: PUSH
5469: LD_INT 8
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: LIST
5476: PUSH
5477: LD_OWVAR 67
5481: ARRAY
5482: PUSH
5483: LD_INT 2
5485: PUSH
5486: LD_INT 0
5488: PUSH
5489: LD_INT 1
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: LIST
5496: LIST
5497: PPUSH
5498: CALL 27581 0 6
5502: ST_TO_ADDR
// end ;
5503: LD_VAR 0 1
5507: RET
// export function PrepareLegion ; var i , b , veh , tmp , tmp2 , cameras , side , sr , depot , base ; begin
5508: LD_INT 0
5510: PPUSH
5511: PPUSH
5512: PPUSH
5513: PPUSH
5514: PPUSH
5515: PPUSH
5516: PPUSH
5517: PPUSH
5518: PPUSH
5519: PPUSH
5520: PPUSH
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 0 , 0 , legApe , 0 ) ;
5521: LD_INT 0
5523: PPUSH
5524: LD_INT 0
5526: PPUSH
5527: LD_INT 6
5529: PPUSH
5530: LD_INT 0
5532: PPUSH
5533: LD_INT 0
5535: PPUSH
5536: LD_INT 0
5538: PPUSH
5539: LD_INT 0
5541: PPUSH
5542: LD_INT 8
5544: PPUSH
5545: LD_INT 0
5547: PPUSH
5548: CALL 51963 0 9
// side := 8 ;
5552: LD_ADDR_VAR 0 8
5556: PUSH
5557: LD_INT 8
5559: ST_TO_ADDR
// tmp := AreaToList ( minesArea , 0 ) ;
5560: LD_ADDR_VAR 0 5
5564: PUSH
5565: LD_INT 20
5567: PPUSH
5568: LD_INT 0
5570: PPUSH
5571: CALL_OW 517
5575: ST_TO_ADDR
// if Difficulty > 2 then
5576: LD_OWVAR 67
5580: PUSH
5581: LD_INT 2
5583: GREATER
5584: IFFALSE 5728
// begin tmp2 := AreaToList ( minesArea2 , 0 ) ;
5586: LD_ADDR_VAR 0 6
5590: PUSH
5591: LD_INT 27
5593: PPUSH
5594: LD_INT 0
5596: PPUSH
5597: CALL_OW 517
5601: ST_TO_ADDR
// for i = 1 to tmp2 [ 1 ] do
5602: LD_ADDR_VAR 0 2
5606: PUSH
5607: DOUBLE
5608: LD_INT 1
5610: DEC
5611: ST_TO_ADDR
5612: LD_VAR 0 6
5616: PUSH
5617: LD_INT 1
5619: ARRAY
5620: PUSH
5621: FOR_TO
5622: IFFALSE 5726
// begin tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , tmp2 [ 1 ] [ i ] ) ;
5624: LD_ADDR_VAR 0 5
5628: PUSH
5629: LD_VAR 0 5
5633: PPUSH
5634: LD_INT 1
5636: PUSH
5637: LD_VAR 0 5
5641: PUSH
5642: LD_INT 1
5644: ARRAY
5645: PUSH
5646: LD_INT 1
5648: PLUS
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: PPUSH
5654: LD_VAR 0 6
5658: PUSH
5659: LD_INT 1
5661: ARRAY
5662: PUSH
5663: LD_VAR 0 2
5667: ARRAY
5668: PPUSH
5669: CALL 24294 0 3
5673: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , tmp2 [ 2 ] [ i ] ) ;
5674: LD_ADDR_VAR 0 5
5678: PUSH
5679: LD_VAR 0 5
5683: PPUSH
5684: LD_INT 2
5686: PUSH
5687: LD_VAR 0 5
5691: PUSH
5692: LD_INT 2
5694: ARRAY
5695: PUSH
5696: LD_INT 1
5698: PLUS
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: PPUSH
5704: LD_VAR 0 6
5708: PUSH
5709: LD_INT 2
5711: ARRAY
5712: PUSH
5713: LD_VAR 0 2
5717: ARRAY
5718: PPUSH
5719: CALL 24294 0 3
5723: ST_TO_ADDR
// end ;
5724: GO 5621
5726: POP
5727: POP
// end ; if tmp then
5728: LD_VAR 0 5
5732: IFFALSE 5860
// begin for i = 1 to tmp [ 1 ] do
5734: LD_ADDR_VAR 0 2
5738: PUSH
5739: DOUBLE
5740: LD_INT 1
5742: DEC
5743: ST_TO_ADDR
5744: LD_VAR 0 5
5748: PUSH
5749: LD_INT 1
5751: ARRAY
5752: PUSH
5753: FOR_TO
5754: IFFALSE 5858
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side , 0 ) ;
5756: LD_VAR 0 5
5760: PUSH
5761: LD_INT 1
5763: ARRAY
5764: PUSH
5765: LD_VAR 0 2
5769: ARRAY
5770: PPUSH
5771: LD_VAR 0 5
5775: PUSH
5776: LD_INT 2
5778: ARRAY
5779: PUSH
5780: LD_VAR 0 2
5784: ARRAY
5785: PPUSH
5786: LD_VAR 0 8
5790: PPUSH
5791: LD_INT 0
5793: PPUSH
5794: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
5798: LD_ADDR_EXP 16
5802: PUSH
5803: LD_EXP 16
5807: PPUSH
5808: LD_EXP 16
5812: PUSH
5813: LD_INT 1
5815: PLUS
5816: PPUSH
5817: LD_VAR 0 5
5821: PUSH
5822: LD_INT 1
5824: ARRAY
5825: PUSH
5826: LD_VAR 0 2
5830: ARRAY
5831: PUSH
5832: LD_VAR 0 5
5836: PUSH
5837: LD_INT 2
5839: ARRAY
5840: PUSH
5841: LD_VAR 0 2
5845: ARRAY
5846: PUSH
5847: EMPTY
5848: LIST
5849: LIST
5850: PPUSH
5851: CALL_OW 2
5855: ST_TO_ADDR
// end ;
5856: GO 5753
5858: POP
5859: POP
// end ; cameras := [ [ 165 , 156 ] , [ 143 , 145 ] , [ 152 , 165 ] , [ 123 , 153 ] , [ 161 , 215 ] , [ 172 , 100 ] , [ 148 , 83 ] , [ 122 , 68 ] , [ 105 , 74 ] , [ 113 , 97 ] ] ;
5860: LD_ADDR_VAR 0 7
5864: PUSH
5865: LD_INT 165
5867: PUSH
5868: LD_INT 156
5870: PUSH
5871: EMPTY
5872: LIST
5873: LIST
5874: PUSH
5875: LD_INT 143
5877: PUSH
5878: LD_INT 145
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: PUSH
5885: LD_INT 152
5887: PUSH
5888: LD_INT 165
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: PUSH
5895: LD_INT 123
5897: PUSH
5898: LD_INT 153
5900: PUSH
5901: EMPTY
5902: LIST
5903: LIST
5904: PUSH
5905: LD_INT 161
5907: PUSH
5908: LD_INT 215
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: PUSH
5915: LD_INT 172
5917: PUSH
5918: LD_INT 100
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: PUSH
5925: LD_INT 148
5927: PUSH
5928: LD_INT 83
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: PUSH
5935: LD_INT 122
5937: PUSH
5938: LD_INT 68
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: PUSH
5945: LD_INT 105
5947: PUSH
5948: LD_INT 74
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: PUSH
5955: LD_INT 113
5957: PUSH
5958: LD_INT 97
5960: PUSH
5961: EMPTY
5962: LIST
5963: LIST
5964: PUSH
5965: EMPTY
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: ST_TO_ADDR
// for i in cameras do
5977: LD_ADDR_VAR 0 2
5981: PUSH
5982: LD_VAR 0 7
5986: PUSH
5987: FOR_IN
5988: IFFALSE 6019
// HiddenCamera ( i [ 1 ] , i [ 2 ] , side ) ;
5990: LD_VAR 0 2
5994: PUSH
5995: LD_INT 1
5997: ARRAY
5998: PPUSH
5999: LD_VAR 0 2
6003: PUSH
6004: LD_INT 2
6006: ARRAY
6007: PPUSH
6008: LD_VAR 0 8
6012: PPUSH
6013: CALL_OW 244
6017: GO 5987
6019: POP
6020: POP
// tmp := [ [ 1 , 144 , 110 , 1 , 0 , 0 ] , [ 3 , 151 , 118 , 0 , 0 , 0 ] , [ 8 , 158 , 110 , 4 , 10 , 15 ] , [ 23 , 154 , 121 , 5 , 0 , 0 ] , [ 22 , 155 , 118 , 4 , 0 , 0 ] , [ 21 , 151 , 122 , 0 , 0 , 0 ] , [ 18 , 148 , 118 , 1 , 0 , 0 ] , [ 17 , 147 , 114 , 2 , 0 , 0 ] , [ 29 , 163 , 120 , 5 , 0 , 0 ] , [ 27 , 137 , 116 , 3 , 0 , 0 ] , [ 27 , 133 , 111 , 1 , 0 , 0 ] , [ 27 , 132 , 106 , 4 , 0 , 0 ] , [ 26 , 137 , 111 , 0 , 0 , 0 ] , [ 8 , 141 , 117 , 1 , 13 , 11 ] , [ 30 , 140 , 128 , 1 , 0 , 0 ] , [ 5 , 146 , 96 , 3 , 0 , 0 ] , [ 32 , 150 , 98 , 3 , 0 , 0 ] , [ 32 , 142 , 95 , 3 , 0 , 0 ] , [ 32 , 159 , 104 , 3 , 0 , 0 ] , [ 32 , 133 , 95 , 3 , 0 , 0 ] , [ 32 , 131 , 102 , 2 , 0 , 0 ] , [ 32 , 164 , 144 , 0 , 0 , 0 ] , [ 32 , 146 , 139 , 0 , 0 , 0 ] , [ 26 , 143 , 122 , 4 , 0 , 0 ] , [ 26 , 164 , 116 , 2 , 0 , 0 ] , ] ;
6021: LD_ADDR_VAR 0 5
6025: PUSH
6026: LD_INT 1
6028: PUSH
6029: LD_INT 144
6031: PUSH
6032: LD_INT 110
6034: PUSH
6035: LD_INT 1
6037: PUSH
6038: LD_INT 0
6040: PUSH
6041: LD_INT 0
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: PUSH
6052: LD_INT 3
6054: PUSH
6055: LD_INT 151
6057: PUSH
6058: LD_INT 118
6060: PUSH
6061: LD_INT 0
6063: PUSH
6064: LD_INT 0
6066: PUSH
6067: LD_INT 0
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: PUSH
6078: LD_INT 8
6080: PUSH
6081: LD_INT 158
6083: PUSH
6084: LD_INT 110
6086: PUSH
6087: LD_INT 4
6089: PUSH
6090: LD_INT 10
6092: PUSH
6093: LD_INT 15
6095: PUSH
6096: EMPTY
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: PUSH
6104: LD_INT 23
6106: PUSH
6107: LD_INT 154
6109: PUSH
6110: LD_INT 121
6112: PUSH
6113: LD_INT 5
6115: PUSH
6116: LD_INT 0
6118: PUSH
6119: LD_INT 0
6121: PUSH
6122: EMPTY
6123: LIST
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: PUSH
6130: LD_INT 22
6132: PUSH
6133: LD_INT 155
6135: PUSH
6136: LD_INT 118
6138: PUSH
6139: LD_INT 4
6141: PUSH
6142: LD_INT 0
6144: PUSH
6145: LD_INT 0
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: PUSH
6156: LD_INT 21
6158: PUSH
6159: LD_INT 151
6161: PUSH
6162: LD_INT 122
6164: PUSH
6165: LD_INT 0
6167: PUSH
6168: LD_INT 0
6170: PUSH
6171: LD_INT 0
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 18
6184: PUSH
6185: LD_INT 148
6187: PUSH
6188: LD_INT 118
6190: PUSH
6191: LD_INT 1
6193: PUSH
6194: LD_INT 0
6196: PUSH
6197: LD_INT 0
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 17
6210: PUSH
6211: LD_INT 147
6213: PUSH
6214: LD_INT 114
6216: PUSH
6217: LD_INT 2
6219: PUSH
6220: LD_INT 0
6222: PUSH
6223: LD_INT 0
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: PUSH
6234: LD_INT 29
6236: PUSH
6237: LD_INT 163
6239: PUSH
6240: LD_INT 120
6242: PUSH
6243: LD_INT 5
6245: PUSH
6246: LD_INT 0
6248: PUSH
6249: LD_INT 0
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: PUSH
6260: LD_INT 27
6262: PUSH
6263: LD_INT 137
6265: PUSH
6266: LD_INT 116
6268: PUSH
6269: LD_INT 3
6271: PUSH
6272: LD_INT 0
6274: PUSH
6275: LD_INT 0
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: PUSH
6286: LD_INT 27
6288: PUSH
6289: LD_INT 133
6291: PUSH
6292: LD_INT 111
6294: PUSH
6295: LD_INT 1
6297: PUSH
6298: LD_INT 0
6300: PUSH
6301: LD_INT 0
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: PUSH
6312: LD_INT 27
6314: PUSH
6315: LD_INT 132
6317: PUSH
6318: LD_INT 106
6320: PUSH
6321: LD_INT 4
6323: PUSH
6324: LD_INT 0
6326: PUSH
6327: LD_INT 0
6329: PUSH
6330: EMPTY
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: PUSH
6338: LD_INT 26
6340: PUSH
6341: LD_INT 137
6343: PUSH
6344: LD_INT 111
6346: PUSH
6347: LD_INT 0
6349: PUSH
6350: LD_INT 0
6352: PUSH
6353: LD_INT 0
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: PUSH
6364: LD_INT 8
6366: PUSH
6367: LD_INT 141
6369: PUSH
6370: LD_INT 117
6372: PUSH
6373: LD_INT 1
6375: PUSH
6376: LD_INT 13
6378: PUSH
6379: LD_INT 11
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: PUSH
6390: LD_INT 30
6392: PUSH
6393: LD_INT 140
6395: PUSH
6396: LD_INT 128
6398: PUSH
6399: LD_INT 1
6401: PUSH
6402: LD_INT 0
6404: PUSH
6405: LD_INT 0
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: PUSH
6416: LD_INT 5
6418: PUSH
6419: LD_INT 146
6421: PUSH
6422: LD_INT 96
6424: PUSH
6425: LD_INT 3
6427: PUSH
6428: LD_INT 0
6430: PUSH
6431: LD_INT 0
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: PUSH
6442: LD_INT 32
6444: PUSH
6445: LD_INT 150
6447: PUSH
6448: LD_INT 98
6450: PUSH
6451: LD_INT 3
6453: PUSH
6454: LD_INT 0
6456: PUSH
6457: LD_INT 0
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: PUSH
6468: LD_INT 32
6470: PUSH
6471: LD_INT 142
6473: PUSH
6474: LD_INT 95
6476: PUSH
6477: LD_INT 3
6479: PUSH
6480: LD_INT 0
6482: PUSH
6483: LD_INT 0
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: PUSH
6494: LD_INT 32
6496: PUSH
6497: LD_INT 159
6499: PUSH
6500: LD_INT 104
6502: PUSH
6503: LD_INT 3
6505: PUSH
6506: LD_INT 0
6508: PUSH
6509: LD_INT 0
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: PUSH
6520: LD_INT 32
6522: PUSH
6523: LD_INT 133
6525: PUSH
6526: LD_INT 95
6528: PUSH
6529: LD_INT 3
6531: PUSH
6532: LD_INT 0
6534: PUSH
6535: LD_INT 0
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: PUSH
6546: LD_INT 32
6548: PUSH
6549: LD_INT 131
6551: PUSH
6552: LD_INT 102
6554: PUSH
6555: LD_INT 2
6557: PUSH
6558: LD_INT 0
6560: PUSH
6561: LD_INT 0
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: PUSH
6572: LD_INT 32
6574: PUSH
6575: LD_INT 164
6577: PUSH
6578: LD_INT 144
6580: PUSH
6581: LD_INT 0
6583: PUSH
6584: LD_INT 0
6586: PUSH
6587: LD_INT 0
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: PUSH
6598: LD_INT 32
6600: PUSH
6601: LD_INT 146
6603: PUSH
6604: LD_INT 139
6606: PUSH
6607: LD_INT 0
6609: PUSH
6610: LD_INT 0
6612: PUSH
6613: LD_INT 0
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: PUSH
6624: LD_INT 26
6626: PUSH
6627: LD_INT 143
6629: PUSH
6630: LD_INT 122
6632: PUSH
6633: LD_INT 4
6635: PUSH
6636: LD_INT 0
6638: PUSH
6639: LD_INT 0
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: PUSH
6650: LD_INT 26
6652: PUSH
6653: LD_INT 164
6655: PUSH
6656: LD_INT 116
6658: PUSH
6659: LD_INT 2
6661: PUSH
6662: LD_INT 0
6664: PUSH
6665: LD_INT 0
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: ST_TO_ADDR
// for i in tmp do
6703: LD_ADDR_VAR 0 2
6707: PUSH
6708: LD_VAR 0 5
6712: PUSH
6713: FOR_IN
6714: IFFALSE 6945
// begin uc_side := side ;
6716: LD_ADDR_OWVAR 20
6720: PUSH
6721: LD_VAR 0 8
6725: ST_TO_ADDR
// uc_nation := nation_arabian ;
6726: LD_ADDR_OWVAR 21
6730: PUSH
6731: LD_INT 2
6733: ST_TO_ADDR
// bc_type := i [ 1 ] ;
6734: LD_ADDR_OWVAR 42
6738: PUSH
6739: LD_VAR 0 2
6743: PUSH
6744: LD_INT 1
6746: ARRAY
6747: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
6748: LD_ADDR_OWVAR 43
6752: PUSH
6753: LD_INT 5
6755: PPUSH
6756: LD_INT 6
6758: PPUSH
6759: CALL_OW 12
6763: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
6764: LD_ADDR_OWVAR 44
6768: PUSH
6769: LD_VAR 0 2
6773: PUSH
6774: LD_INT 5
6776: ARRAY
6777: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
6778: LD_ADDR_OWVAR 45
6782: PUSH
6783: LD_VAR 0 2
6787: PUSH
6788: LD_INT 6
6790: ARRAY
6791: ST_TO_ADDR
// sr := 0 ;
6792: LD_ADDR_VAR 0 9
6796: PUSH
6797: LD_INT 0
6799: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
6800: LD_VAR 0 2
6804: PUSH
6805: LD_INT 1
6807: ARRAY
6808: PUSH
6809: LD_INT 29
6811: EQUAL
6812: IFFALSE 6824
// sr := mat_oil else
6814: LD_ADDR_VAR 0 9
6818: PUSH
6819: LD_INT 2
6821: ST_TO_ADDR
6822: GO 6846
// if i [ 1 ] = b_siberite_mine then
6824: LD_VAR 0 2
6828: PUSH
6829: LD_INT 1
6831: ARRAY
6832: PUSH
6833: LD_INT 30
6835: EQUAL
6836: IFFALSE 6846
// sr := mat_siberit ;
6838: LD_ADDR_VAR 0 9
6842: PUSH
6843: LD_INT 3
6845: ST_TO_ADDR
// if sr then
6846: LD_VAR 0 9
6850: IFFALSE 6906
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
6852: LD_VAR 0 2
6856: PUSH
6857: LD_INT 2
6859: ARRAY
6860: PPUSH
6861: LD_VAR 0 2
6865: PUSH
6866: LD_INT 3
6868: ARRAY
6869: PPUSH
6870: LD_VAR 0 9
6874: PPUSH
6875: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
6879: LD_VAR 0 2
6883: PUSH
6884: LD_INT 2
6886: ARRAY
6887: PPUSH
6888: LD_VAR 0 2
6892: PUSH
6893: LD_INT 3
6895: ARRAY
6896: PPUSH
6897: LD_VAR 0 8
6901: PPUSH
6902: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
6906: LD_ADDR_VAR 0 3
6910: PUSH
6911: LD_VAR 0 2
6915: PUSH
6916: LD_INT 2
6918: ARRAY
6919: PPUSH
6920: LD_VAR 0 2
6924: PUSH
6925: LD_INT 3
6927: ARRAY
6928: PPUSH
6929: LD_VAR 0 2
6933: PUSH
6934: LD_INT 4
6936: ARRAY
6937: PPUSH
6938: CALL_OW 47
6942: ST_TO_ADDR
// end ;
6943: GO 6713
6945: POP
6946: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6947: LD_ADDR_VAR 0 10
6951: PUSH
6952: LD_INT 22
6954: PUSH
6955: LD_VAR 0 8
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: PUSH
6964: LD_INT 30
6966: PUSH
6967: LD_INT 1
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PPUSH
6978: CALL_OW 69
6982: ST_TO_ADDR
// if not depot then
6983: LD_VAR 0 10
6987: NOT
6988: IFFALSE 6992
// exit ;
6990: GO 7238
// base := PrepareBase ( depot [ 1 ] , legBase , 0 , [ 7 , 8 , 10 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 14 , 6 , 6 , 5 ] ) ;
6992: LD_ADDR_VAR 0 11
6996: PUSH
6997: LD_VAR 0 10
7001: PUSH
7002: LD_INT 1
7004: ARRAY
7005: PPUSH
7006: LD_INT 6
7008: PPUSH
7009: LD_INT 0
7011: PPUSH
7012: LD_INT 7
7014: PUSH
7015: LD_INT 8
7017: PUSH
7018: LD_INT 10
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: LIST
7025: PUSH
7026: LD_OWVAR 67
7030: ARRAY
7031: PPUSH
7032: LD_INT 3000
7034: PUSH
7035: LD_INT 300
7037: PUSH
7038: LD_INT 100
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: LIST
7045: PPUSH
7046: LD_INT 14
7048: PUSH
7049: LD_INT 6
7051: PUSH
7052: LD_INT 6
7054: PUSH
7055: LD_INT 5
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: PPUSH
7064: CALL 27581 0 6
7068: ST_TO_ADDR
// if not base then
7069: LD_VAR 0 11
7073: NOT
7074: IFFALSE 7078
// exit ;
7076: GO 7238
// if Difficulty > 1 then
7078: LD_OWVAR 67
7082: PUSH
7083: LD_INT 1
7085: GREATER
7086: IFFALSE 7159
// begin InitHc ;
7088: CALL_OW 19
// PrepareHuman ( sex_male , class_sniper , [ 5 , 8 ] [ Difficulty - 1 ] ) ;
7092: LD_INT 1
7094: PPUSH
7095: LD_INT 5
7097: PPUSH
7098: LD_INT 5
7100: PUSH
7101: LD_INT 8
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: PUSH
7108: LD_OWVAR 67
7112: PUSH
7113: LD_INT 1
7115: MINUS
7116: ARRAY
7117: PPUSH
7118: CALL_OW 380
// for i = 1 to Difficulty do
7122: LD_ADDR_VAR 0 2
7126: PUSH
7127: DOUBLE
7128: LD_INT 1
7130: DEC
7131: ST_TO_ADDR
7132: LD_OWVAR 67
7136: PUSH
7137: FOR_TO
7138: IFFALSE 7157
// PlaceUnitArea ( CreateHuman , sniperGuardArea , false ) ;
7140: CALL_OW 44
7144: PPUSH
7145: LD_INT 24
7147: PPUSH
7148: LD_INT 0
7150: PPUSH
7151: CALL_OW 49
7155: GO 7137
7157: POP
7158: POP
// end ; mc_bases := Replace ( mc_bases , mc_leg , base ) ;
7159: LD_ADDR_EXP 45
7163: PUSH
7164: LD_EXP 45
7168: PPUSH
7169: LD_EXP 6
7173: PPUSH
7174: LD_VAR 0 11
7178: PPUSH
7179: CALL_OW 1
7183: ST_TO_ADDR
// hc_gallery := ru ;
7184: LD_ADDR_OWVAR 33
7188: PUSH
7189: LD_STRING ru
7191: ST_TO_ADDR
// hc_face_number := 44 ;
7192: LD_ADDR_OWVAR 34
7196: PUSH
7197: LD_INT 44
7199: ST_TO_ADDR
// hc_name := Robert Farmer ;
7200: LD_ADDR_OWVAR 26
7204: PUSH
7205: LD_STRING Robert Farmer
7207: ST_TO_ADDR
// hc_sex := sex_male ;
7208: LD_ADDR_OWVAR 27
7212: PUSH
7213: LD_INT 1
7215: ST_TO_ADDR
// hc_class := 1 ;
7216: LD_ADDR_OWVAR 28
7220: PUSH
7221: LD_INT 1
7223: ST_TO_ADDR
// Farmer := CreateHuman ;
7224: LD_ADDR_EXP 13
7228: PUSH
7229: CALL_OW 44
7233: ST_TO_ADDR
// InitHc ;
7234: CALL_OW 19
// end ;
7238: LD_VAR 0 1
7242: RET
// export function PrepareAmericans ; var i , b , tmp , side , sr , base , depot ; begin
7243: LD_INT 0
7245: PPUSH
7246: PPUSH
7247: PPUSH
7248: PPUSH
7249: PPUSH
7250: PPUSH
7251: PPUSH
7252: PPUSH
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , amerApe , 0 ) ;
7253: LD_INT 0
7255: PPUSH
7256: LD_INT 0
7258: PPUSH
7259: LD_INT 4
7261: PPUSH
7262: LD_INT 0
7264: PPUSH
7265: LD_INT 0
7267: PPUSH
7268: LD_INT 0
7270: PPUSH
7271: LD_INT 0
7273: PPUSH
7274: LD_INT 10
7276: PPUSH
7277: LD_INT 0
7279: PPUSH
7280: CALL 51963 0 9
// side := 4 ;
7284: LD_ADDR_VAR 0 5
7288: PUSH
7289: LD_INT 4
7291: ST_TO_ADDR
// tmp := [ [ 1 , 144 , 18 , 4 , 0 , 0 ] , [ 3 , 137 , 8 , 4 , 0 , 0 ] , [ 22 , 141 , 8 , 4 , 0 , 0 ] , [ 25 , 137 , 5 , 3 , 0 , 0 ] , [ 18 , 137 , 12 , 0 , 0 , 0 ] , [ 17 , 133 , 4 , 2 , 0 , 0 ] , [ 16 , 140 , 11 , 5 , 0 , 0 ] , [ 8 , 149 , 26 , 4 , 10 , 15 ] , [ 8 , 142 , 26 , 1 , 11 , 12 ] , [ 27 , 153 , 32 , 5 , 0 , 0 ] , [ 27 , 145 , 32 , 3 , 0 , 0 ] , [ 27 , 138 , 2 , 4 , 0 , 0 ] , [ 27 , 144 , 13 , 0 , 0 , 0 ] , [ 26 , 124 , 2 , 4 , 0 , 0 ] , [ 26 , 121 , 2 , 2 , 0 , 0 ] , [ 26 , 118 , 2 , 1 , 0 , 0 ] , [ 29 , 159 , 47 , 2 , 0 , 0 ] , [ 32 , 146 , 41 , 0 , 0 , 0 ] , [ 33 , 136 , 37 , 0 , 0 , 0 ] , [ 33 , 132 , 34 , 0 , 0 , 0 ] , [ 36 , 124 , 7 , 1 , 0 , 0 ] , [ 5 , 124 , 19 , 0 , 0 , 0 ] , [ 32 , 127 , 23 , 0 , 0 , 0 ] ] ;
7292: LD_ADDR_VAR 0 4
7296: PUSH
7297: LD_INT 1
7299: PUSH
7300: LD_INT 144
7302: PUSH
7303: LD_INT 18
7305: PUSH
7306: LD_INT 4
7308: PUSH
7309: LD_INT 0
7311: PUSH
7312: LD_INT 0
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: PUSH
7323: LD_INT 3
7325: PUSH
7326: LD_INT 137
7328: PUSH
7329: LD_INT 8
7331: PUSH
7332: LD_INT 4
7334: PUSH
7335: LD_INT 0
7337: PUSH
7338: LD_INT 0
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: PUSH
7349: LD_INT 22
7351: PUSH
7352: LD_INT 141
7354: PUSH
7355: LD_INT 8
7357: PUSH
7358: LD_INT 4
7360: PUSH
7361: LD_INT 0
7363: PUSH
7364: LD_INT 0
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: PUSH
7375: LD_INT 25
7377: PUSH
7378: LD_INT 137
7380: PUSH
7381: LD_INT 5
7383: PUSH
7384: LD_INT 3
7386: PUSH
7387: LD_INT 0
7389: PUSH
7390: LD_INT 0
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: PUSH
7401: LD_INT 18
7403: PUSH
7404: LD_INT 137
7406: PUSH
7407: LD_INT 12
7409: PUSH
7410: LD_INT 0
7412: PUSH
7413: LD_INT 0
7415: PUSH
7416: LD_INT 0
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: PUSH
7427: LD_INT 17
7429: PUSH
7430: LD_INT 133
7432: PUSH
7433: LD_INT 4
7435: PUSH
7436: LD_INT 2
7438: PUSH
7439: LD_INT 0
7441: PUSH
7442: LD_INT 0
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: PUSH
7453: LD_INT 16
7455: PUSH
7456: LD_INT 140
7458: PUSH
7459: LD_INT 11
7461: PUSH
7462: LD_INT 5
7464: PUSH
7465: LD_INT 0
7467: PUSH
7468: LD_INT 0
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: PUSH
7479: LD_INT 8
7481: PUSH
7482: LD_INT 149
7484: PUSH
7485: LD_INT 26
7487: PUSH
7488: LD_INT 4
7490: PUSH
7491: LD_INT 10
7493: PUSH
7494: LD_INT 15
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: LIST
7504: PUSH
7505: LD_INT 8
7507: PUSH
7508: LD_INT 142
7510: PUSH
7511: LD_INT 26
7513: PUSH
7514: LD_INT 1
7516: PUSH
7517: LD_INT 11
7519: PUSH
7520: LD_INT 12
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: PUSH
7531: LD_INT 27
7533: PUSH
7534: LD_INT 153
7536: PUSH
7537: LD_INT 32
7539: PUSH
7540: LD_INT 5
7542: PUSH
7543: LD_INT 0
7545: PUSH
7546: LD_INT 0
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: PUSH
7557: LD_INT 27
7559: PUSH
7560: LD_INT 145
7562: PUSH
7563: LD_INT 32
7565: PUSH
7566: LD_INT 3
7568: PUSH
7569: LD_INT 0
7571: PUSH
7572: LD_INT 0
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: PUSH
7583: LD_INT 27
7585: PUSH
7586: LD_INT 138
7588: PUSH
7589: LD_INT 2
7591: PUSH
7592: LD_INT 4
7594: PUSH
7595: LD_INT 0
7597: PUSH
7598: LD_INT 0
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: PUSH
7609: LD_INT 27
7611: PUSH
7612: LD_INT 144
7614: PUSH
7615: LD_INT 13
7617: PUSH
7618: LD_INT 0
7620: PUSH
7621: LD_INT 0
7623: PUSH
7624: LD_INT 0
7626: PUSH
7627: EMPTY
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: PUSH
7635: LD_INT 26
7637: PUSH
7638: LD_INT 124
7640: PUSH
7641: LD_INT 2
7643: PUSH
7644: LD_INT 4
7646: PUSH
7647: LD_INT 0
7649: PUSH
7650: LD_INT 0
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: PUSH
7661: LD_INT 26
7663: PUSH
7664: LD_INT 121
7666: PUSH
7667: LD_INT 2
7669: PUSH
7670: LD_INT 2
7672: PUSH
7673: LD_INT 0
7675: PUSH
7676: LD_INT 0
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: PUSH
7687: LD_INT 26
7689: PUSH
7690: LD_INT 118
7692: PUSH
7693: LD_INT 2
7695: PUSH
7696: LD_INT 1
7698: PUSH
7699: LD_INT 0
7701: PUSH
7702: LD_INT 0
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: PUSH
7713: LD_INT 29
7715: PUSH
7716: LD_INT 159
7718: PUSH
7719: LD_INT 47
7721: PUSH
7722: LD_INT 2
7724: PUSH
7725: LD_INT 0
7727: PUSH
7728: LD_INT 0
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: PUSH
7739: LD_INT 32
7741: PUSH
7742: LD_INT 146
7744: PUSH
7745: LD_INT 41
7747: PUSH
7748: LD_INT 0
7750: PUSH
7751: LD_INT 0
7753: PUSH
7754: LD_INT 0
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: PUSH
7765: LD_INT 33
7767: PUSH
7768: LD_INT 136
7770: PUSH
7771: LD_INT 37
7773: PUSH
7774: LD_INT 0
7776: PUSH
7777: LD_INT 0
7779: PUSH
7780: LD_INT 0
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: PUSH
7791: LD_INT 33
7793: PUSH
7794: LD_INT 132
7796: PUSH
7797: LD_INT 34
7799: PUSH
7800: LD_INT 0
7802: PUSH
7803: LD_INT 0
7805: PUSH
7806: LD_INT 0
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: PUSH
7817: LD_INT 36
7819: PUSH
7820: LD_INT 124
7822: PUSH
7823: LD_INT 7
7825: PUSH
7826: LD_INT 1
7828: PUSH
7829: LD_INT 0
7831: PUSH
7832: LD_INT 0
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: PUSH
7843: LD_INT 5
7845: PUSH
7846: LD_INT 124
7848: PUSH
7849: LD_INT 19
7851: PUSH
7852: LD_INT 0
7854: PUSH
7855: LD_INT 0
7857: PUSH
7858: LD_INT 0
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: PUSH
7869: LD_INT 32
7871: PUSH
7872: LD_INT 127
7874: PUSH
7875: LD_INT 23
7877: PUSH
7878: LD_INT 0
7880: PUSH
7881: LD_INT 0
7883: PUSH
7884: LD_INT 0
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: ST_TO_ADDR
// for i in tmp do
7920: LD_ADDR_VAR 0 2
7924: PUSH
7925: LD_VAR 0 4
7929: PUSH
7930: FOR_IN
7931: IFFALSE 8162
// begin uc_side := side ;
7933: LD_ADDR_OWVAR 20
7937: PUSH
7938: LD_VAR 0 5
7942: ST_TO_ADDR
// uc_nation := nation_american ;
7943: LD_ADDR_OWVAR 21
7947: PUSH
7948: LD_INT 1
7950: ST_TO_ADDR
// bc_type := i [ 1 ] ;
7951: LD_ADDR_OWVAR 42
7955: PUSH
7956: LD_VAR 0 2
7960: PUSH
7961: LD_INT 1
7963: ARRAY
7964: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
7965: LD_ADDR_OWVAR 43
7969: PUSH
7970: LD_INT 5
7972: PPUSH
7973: LD_INT 6
7975: PPUSH
7976: CALL_OW 12
7980: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
7981: LD_ADDR_OWVAR 44
7985: PUSH
7986: LD_VAR 0 2
7990: PUSH
7991: LD_INT 5
7993: ARRAY
7994: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
7995: LD_ADDR_OWVAR 45
7999: PUSH
8000: LD_VAR 0 2
8004: PUSH
8005: LD_INT 6
8007: ARRAY
8008: ST_TO_ADDR
// sr := 0 ;
8009: LD_ADDR_VAR 0 6
8013: PUSH
8014: LD_INT 0
8016: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
8017: LD_VAR 0 2
8021: PUSH
8022: LD_INT 1
8024: ARRAY
8025: PUSH
8026: LD_INT 29
8028: EQUAL
8029: IFFALSE 8041
// sr := mat_oil else
8031: LD_ADDR_VAR 0 6
8035: PUSH
8036: LD_INT 2
8038: ST_TO_ADDR
8039: GO 8063
// if i [ 1 ] = b_siberite_mine then
8041: LD_VAR 0 2
8045: PUSH
8046: LD_INT 1
8048: ARRAY
8049: PUSH
8050: LD_INT 30
8052: EQUAL
8053: IFFALSE 8063
// sr := mat_siberit ;
8055: LD_ADDR_VAR 0 6
8059: PUSH
8060: LD_INT 3
8062: ST_TO_ADDR
// if sr then
8063: LD_VAR 0 6
8067: IFFALSE 8123
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
8069: LD_VAR 0 2
8073: PUSH
8074: LD_INT 2
8076: ARRAY
8077: PPUSH
8078: LD_VAR 0 2
8082: PUSH
8083: LD_INT 3
8085: ARRAY
8086: PPUSH
8087: LD_VAR 0 6
8091: PPUSH
8092: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
8096: LD_VAR 0 2
8100: PUSH
8101: LD_INT 2
8103: ARRAY
8104: PPUSH
8105: LD_VAR 0 2
8109: PUSH
8110: LD_INT 3
8112: ARRAY
8113: PPUSH
8114: LD_VAR 0 5
8118: PPUSH
8119: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
8123: LD_ADDR_VAR 0 3
8127: PUSH
8128: LD_VAR 0 2
8132: PUSH
8133: LD_INT 2
8135: ARRAY
8136: PPUSH
8137: LD_VAR 0 2
8141: PUSH
8142: LD_INT 3
8144: ARRAY
8145: PPUSH
8146: LD_VAR 0 2
8150: PUSH
8151: LD_INT 4
8153: ARRAY
8154: PPUSH
8155: CALL_OW 47
8159: ST_TO_ADDR
// end ;
8160: GO 7930
8162: POP
8163: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
8164: LD_ADDR_VAR 0 8
8168: PUSH
8169: LD_INT 22
8171: PUSH
8172: LD_VAR 0 5
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PUSH
8181: LD_INT 30
8183: PUSH
8184: LD_INT 1
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: PPUSH
8195: CALL_OW 69
8199: ST_TO_ADDR
// if not depot then
8200: LD_VAR 0 8
8204: NOT
8205: IFFALSE 8209
// exit ;
8207: GO 8481
// base := PrepareBase ( depot [ 1 ] , amerBase , theta3 , [ 8 , 7 , 6 ] [ Difficulty ] , [ [ 2500 , 2000 , 1750 ] [ Difficulty ] , [ 300 , 250 , 200 ] [ Difficulty ] , [ 80 , 60 , 50 ] [ Difficulty ] ] , [ 7 , 6 , 5 , 5 ] ) ;
8209: LD_ADDR_VAR 0 7
8213: PUSH
8214: LD_VAR 0 8
8218: PUSH
8219: LD_INT 1
8221: ARRAY
8222: PPUSH
8223: LD_INT 3
8225: PPUSH
8226: LD_STRING theta3
8228: PPUSH
8229: LD_INT 8
8231: PUSH
8232: LD_INT 7
8234: PUSH
8235: LD_INT 6
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: LIST
8242: PUSH
8243: LD_OWVAR 67
8247: ARRAY
8248: PPUSH
8249: LD_INT 2500
8251: PUSH
8252: LD_INT 2000
8254: PUSH
8255: LD_INT 1750
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: LIST
8262: PUSH
8263: LD_OWVAR 67
8267: ARRAY
8268: PUSH
8269: LD_INT 300
8271: PUSH
8272: LD_INT 250
8274: PUSH
8275: LD_INT 200
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: LIST
8282: PUSH
8283: LD_OWVAR 67
8287: ARRAY
8288: PUSH
8289: LD_INT 80
8291: PUSH
8292: LD_INT 60
8294: PUSH
8295: LD_INT 50
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: LIST
8302: PUSH
8303: LD_OWVAR 67
8307: ARRAY
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: LIST
8313: PPUSH
8314: LD_INT 7
8316: PUSH
8317: LD_INT 6
8319: PUSH
8320: LD_INT 5
8322: PUSH
8323: LD_INT 5
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: PPUSH
8332: CALL 27581 0 6
8336: ST_TO_ADDR
// if not base then
8337: LD_VAR 0 7
8341: NOT
8342: IFFALSE 8346
// exit ;
8344: GO 8481
// mc_bases := Replace ( mc_bases , mc_amer , base ) ;
8346: LD_ADDR_EXP 45
8350: PUSH
8351: LD_EXP 45
8355: PPUSH
8356: LD_EXP 5
8360: PPUSH
8361: LD_VAR 0 7
8365: PPUSH
8366: CALL_OW 1
8370: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
8371: LD_INT 1
8373: PPUSH
8374: LD_INT 1
8376: PPUSH
8377: LD_INT 7
8379: PPUSH
8380: CALL_OW 380
// allyCommander := CreateHuman ;
8384: LD_ADDR_EXP 11
8388: PUSH
8389: CALL_OW 44
8393: ST_TO_ADDR
// PlaceUnitXY ( allyCommander , 139 , 15 , false ) ;
8394: LD_EXP 11
8398: PPUSH
8399: LD_INT 139
8401: PPUSH
8402: LD_INT 15
8404: PPUSH
8405: LD_INT 0
8407: PPUSH
8408: CALL_OW 48
// ComTurnXY ( allyCommander , 137 , 15 ) ;
8412: LD_EXP 11
8416: PPUSH
8417: LD_INT 137
8419: PPUSH
8420: LD_INT 15
8422: PPUSH
8423: CALL_OW 118
// hc_gallery := us ;
8427: LD_ADDR_OWVAR 33
8431: PUSH
8432: LD_STRING us
8434: ST_TO_ADDR
// hc_face_number := 7 ;
8435: LD_ADDR_OWVAR 34
8439: PUSH
8440: LD_INT 7
8442: ST_TO_ADDR
// hc_name := Arthur Powell ;
8443: LD_ADDR_OWVAR 26
8447: PUSH
8448: LD_STRING Arthur Powell
8450: ST_TO_ADDR
// hc_sex := sex_male ;
8451: LD_ADDR_OWVAR 27
8455: PUSH
8456: LD_INT 1
8458: ST_TO_ADDR
// hc_class := 1 ;
8459: LD_ADDR_OWVAR 28
8463: PUSH
8464: LD_INT 1
8466: ST_TO_ADDR
// Powell := CreateHuman ;
8467: LD_ADDR_EXP 12
8471: PUSH
8472: CALL_OW 44
8476: ST_TO_ADDR
// InitHc ;
8477: CALL_OW 19
// end ;
8481: LD_VAR 0 1
8485: RET
// export function PreparePlayer ; var i , side , techs , tanks , cl , chassis , engines , weapons ; begin
8486: LD_INT 0
8488: PPUSH
8489: PPUSH
8490: PPUSH
8491: PPUSH
8492: PPUSH
8493: PPUSH
8494: PPUSH
8495: PPUSH
8496: PPUSH
// side := 1 ;
8497: LD_ADDR_VAR 0 3
8501: PUSH
8502: LD_INT 1
8504: ST_TO_ADDR
// result := [ [ ] , [ ] ] ;
8505: LD_ADDR_VAR 0 1
8509: PUSH
8510: EMPTY
8511: PUSH
8512: EMPTY
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: ST_TO_ADDR
// uc_side := side ;
8518: LD_ADDR_OWVAR 20
8522: PUSH
8523: LD_VAR 0 3
8527: ST_TO_ADDR
// uc_nation := nation_american ;
8528: LD_ADDR_OWVAR 21
8532: PUSH
8533: LD_INT 1
8535: ST_TO_ADDR
// InitHc ;
8536: CALL_OW 19
// InitVc ;
8540: CALL_OW 20
// hc_importance := 0 ;
8544: LD_ADDR_OWVAR 32
8548: PUSH
8549: LD_INT 0
8551: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked ] ;
8552: LD_ADDR_VAR 0 7
8556: PUSH
8557: LD_INT 2
8559: PUSH
8560: LD_INT 3
8562: PUSH
8563: LD_INT 3
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: LIST
8570: ST_TO_ADDR
// if commander = 2 then
8571: LD_EXP 25
8575: PUSH
8576: LD_INT 2
8578: EQUAL
8579: IFFALSE 8600
// chassis := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] ;
8581: LD_ADDR_VAR 0 7
8585: PUSH
8586: LD_INT 3
8588: PUSH
8589: LD_INT 4
8591: PUSH
8592: LD_INT 4
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: LIST
8599: ST_TO_ADDR
// if commander = 3 then
8600: LD_EXP 25
8604: PUSH
8605: LD_INT 3
8607: EQUAL
8608: IFFALSE 8629
// chassis := [ us_medium_wheeled , us_morphling , us_morphling ] ;
8610: LD_ADDR_VAR 0 7
8614: PUSH
8615: LD_INT 2
8617: PUSH
8618: LD_INT 5
8620: PUSH
8621: LD_INT 5
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: LIST
8628: ST_TO_ADDR
// engines := [ engine_solar , engine_solar , engine_combustion ] ;
8629: LD_ADDR_VAR 0 8
8633: PUSH
8634: LD_INT 2
8636: PUSH
8637: LD_INT 2
8639: PUSH
8640: LD_INT 1
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: LIST
8647: ST_TO_ADDR
// if commander = 2 then
8648: LD_EXP 25
8652: PUSH
8653: LD_INT 2
8655: EQUAL
8656: IFFALSE 8677
// engines := [ engine_combustion , engine_combustion , engine_siberite ] ;
8658: LD_ADDR_VAR 0 8
8662: PUSH
8663: LD_INT 1
8665: PUSH
8666: LD_INT 1
8668: PUSH
8669: LD_INT 3
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: LIST
8676: ST_TO_ADDR
// if commander = 3 then
8677: LD_EXP 25
8681: PUSH
8682: LD_INT 3
8684: EQUAL
8685: IFFALSE 8706
// engines := [ engine_siberite , engine_siberite , engine_combustion ] ;
8687: LD_ADDR_VAR 0 8
8691: PUSH
8692: LD_INT 3
8694: PUSH
8695: LD_INT 3
8697: PUSH
8698: LD_INT 1
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: LIST
8705: ST_TO_ADDR
// weapons := [ us_double_gun , us_light_gun , us_gatling_gun ] ;
8706: LD_ADDR_VAR 0 9
8710: PUSH
8711: LD_INT 5
8713: PUSH
8714: LD_INT 3
8716: PUSH
8717: LD_INT 4
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: LIST
8724: ST_TO_ADDR
// if commander = 2 then
8725: LD_EXP 25
8729: PUSH
8730: LD_INT 2
8732: EQUAL
8733: IFFALSE 8754
// weapons := [ us_rocket_launcher , us_double_gun , us_heavy_gun ] ;
8735: LD_ADDR_VAR 0 9
8739: PUSH
8740: LD_INT 7
8742: PUSH
8743: LD_INT 5
8745: PUSH
8746: LD_INT 6
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: LIST
8753: ST_TO_ADDR
// if commander = 3 then
8754: LD_EXP 25
8758: PUSH
8759: LD_INT 3
8761: EQUAL
8762: IFFALSE 8783
// weapons := [ us_laser , us_double_laser , us_rocket_launcher ] ;
8764: LD_ADDR_VAR 0 9
8768: PUSH
8769: LD_INT 9
8771: PUSH
8772: LD_INT 10
8774: PUSH
8775: LD_INT 7
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: LIST
8782: ST_TO_ADDR
// tanks := [ 5 , 5 , 4 ] [ Difficulty ] ;
8783: LD_ADDR_VAR 0 5
8787: PUSH
8788: LD_INT 5
8790: PUSH
8791: LD_INT 5
8793: PUSH
8794: LD_INT 4
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: LIST
8801: PUSH
8802: LD_OWVAR 67
8806: ARRAY
8807: ST_TO_ADDR
// if commander = 2 then
8808: LD_EXP 25
8812: PUSH
8813: LD_INT 2
8815: EQUAL
8816: IFFALSE 8832
// tanks := tanks + 3 ;
8818: LD_ADDR_VAR 0 5
8822: PUSH
8823: LD_VAR 0 5
8827: PUSH
8828: LD_INT 3
8830: PLUS
8831: ST_TO_ADDR
// for i = 1 to tanks do
8832: LD_ADDR_VAR 0 2
8836: PUSH
8837: DOUBLE
8838: LD_INT 1
8840: DEC
8841: ST_TO_ADDR
8842: LD_VAR 0 5
8846: PUSH
8847: FOR_TO
8848: IFFALSE 8958
// begin PrepareVehicle ( chassis [ i mod 3 + 1 ] , engines [ rand ( 1 , 3 ) ] , control_manual , weapons [ i mod 3 + 1 ] , rand ( 60 , 70 ) ) ;
8850: LD_VAR 0 7
8854: PUSH
8855: LD_VAR 0 2
8859: PUSH
8860: LD_INT 3
8862: MOD
8863: PUSH
8864: LD_INT 1
8866: PLUS
8867: ARRAY
8868: PPUSH
8869: LD_VAR 0 8
8873: PUSH
8874: LD_INT 1
8876: PPUSH
8877: LD_INT 3
8879: PPUSH
8880: CALL_OW 12
8884: ARRAY
8885: PPUSH
8886: LD_INT 1
8888: PPUSH
8889: LD_VAR 0 9
8893: PUSH
8894: LD_VAR 0 2
8898: PUSH
8899: LD_INT 3
8901: MOD
8902: PUSH
8903: LD_INT 1
8905: PLUS
8906: ARRAY
8907: PPUSH
8908: LD_INT 60
8910: PPUSH
8911: LD_INT 70
8913: PPUSH
8914: CALL_OW 12
8918: PPUSH
8919: CALL 24172 0 5
// result := Replace ( result , 1 , result [ 1 ] ^ CreateVehicle ) ;
8923: LD_ADDR_VAR 0 1
8927: PUSH
8928: LD_VAR 0 1
8932: PPUSH
8933: LD_INT 1
8935: PPUSH
8936: LD_VAR 0 1
8940: PUSH
8941: LD_INT 1
8943: ARRAY
8944: PUSH
8945: CALL_OW 45
8949: ADD
8950: PPUSH
8951: CALL_OW 1
8955: ST_TO_ADDR
// end ;
8956: GO 8847
8958: POP
8959: POP
// cl := 1 ;
8960: LD_ADDR_VAR 0 6
8964: PUSH
8965: LD_INT 1
8967: ST_TO_ADDR
// for i = 1 to 10 do
8968: LD_ADDR_VAR 0 2
8972: PUSH
8973: DOUBLE
8974: LD_INT 1
8976: DEC
8977: ST_TO_ADDR
8978: LD_INT 10
8980: PUSH
8981: FOR_TO
8982: IFFALSE 9097
// begin if i mod 4 = 0 then
8984: LD_VAR 0 2
8988: PUSH
8989: LD_INT 4
8991: MOD
8992: PUSH
8993: LD_INT 0
8995: EQUAL
8996: IFFALSE 9012
// cl := cl + 1 ;
8998: LD_ADDR_VAR 0 6
9002: PUSH
9003: LD_VAR 0 6
9007: PUSH
9008: LD_INT 1
9010: PLUS
9011: ST_TO_ADDR
// if cl = 2 then
9012: LD_VAR 0 6
9016: PUSH
9017: LD_INT 2
9019: EQUAL
9020: IFFALSE 9030
// cl := 3 ;
9022: LD_ADDR_VAR 0 6
9026: PUSH
9027: LD_INT 3
9029: ST_TO_ADDR
// PrepareHuman ( false , cl , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
9030: LD_INT 0
9032: PPUSH
9033: LD_VAR 0 6
9037: PPUSH
9038: LD_INT 6
9040: PUSH
9041: LD_INT 6
9043: PUSH
9044: LD_INT 5
9046: PUSH
9047: EMPTY
9048: LIST
9049: LIST
9050: LIST
9051: PUSH
9052: LD_OWVAR 67
9056: ARRAY
9057: PPUSH
9058: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9062: LD_ADDR_VAR 0 1
9066: PUSH
9067: LD_VAR 0 1
9071: PPUSH
9072: LD_INT 2
9074: PPUSH
9075: LD_VAR 0 1
9079: PUSH
9080: LD_INT 2
9082: ARRAY
9083: PUSH
9084: CALL_OW 44
9088: ADD
9089: PPUSH
9090: CALL_OW 1
9094: ST_TO_ADDR
// end ;
9095: GO 8981
9097: POP
9098: POP
// if commander = 1 then
9099: LD_EXP 25
9103: PUSH
9104: LD_INT 1
9106: EQUAL
9107: IFFALSE 9175
// for i = 1 to 4 do
9109: LD_ADDR_VAR 0 2
9113: PUSH
9114: DOUBLE
9115: LD_INT 1
9117: DEC
9118: ST_TO_ADDR
9119: LD_INT 4
9121: PUSH
9122: FOR_TO
9123: IFFALSE 9173
// begin PrepareHuman ( false , class_soldier , 8 ) ;
9125: LD_INT 0
9127: PPUSH
9128: LD_INT 1
9130: PPUSH
9131: LD_INT 8
9133: PPUSH
9134: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9138: LD_ADDR_VAR 0 1
9142: PUSH
9143: LD_VAR 0 1
9147: PPUSH
9148: LD_INT 2
9150: PPUSH
9151: LD_VAR 0 1
9155: PUSH
9156: LD_INT 2
9158: ARRAY
9159: PUSH
9160: CALL_OW 44
9164: ADD
9165: PPUSH
9166: CALL_OW 1
9170: ST_TO_ADDR
// end ;
9171: GO 9122
9173: POP
9174: POP
// techs := [ ] ;
9175: LD_ADDR_VAR 0 4
9179: PUSH
9180: EMPTY
9181: ST_TO_ADDR
// if commander = 1 then
9182: LD_EXP 25
9186: PUSH
9187: LD_INT 1
9189: EQUAL
9190: IFFALSE 9215
// techs := [ tech_weap1 , tech_weap2 , tech_weap3 , tech_lasSight ] ;
9192: LD_ADDR_VAR 0 4
9196: PUSH
9197: LD_INT 51
9199: PUSH
9200: LD_INT 52
9202: PUSH
9203: LD_INT 53
9205: PUSH
9206: LD_INT 12
9208: PUSH
9209: EMPTY
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: ST_TO_ADDR
// if commander = 2 then
9215: LD_EXP 25
9219: PUSH
9220: LD_INT 2
9222: EQUAL
9223: IFFALSE 9260
// techs := [ tech_tech1 , tech_oilEng , tech_oilPow , tech_solEng , tech_solPow , tech_opto1 , tech_radar ] ;
9225: LD_ADDR_VAR 0 4
9229: PUSH
9230: LD_INT 48
9232: PUSH
9233: LD_INT 47
9235: PUSH
9236: LD_INT 46
9238: PUSH
9239: LD_INT 45
9241: PUSH
9242: LD_INT 35
9244: PUSH
9245: LD_INT 60
9247: PUSH
9248: LD_INT 6
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: ST_TO_ADDR
// if commander = 3 then
9260: LD_EXP 25
9264: PUSH
9265: LD_INT 3
9267: EQUAL
9268: IFFALSE 9317
// techs := [ tech_advAI , tech_advchassis , tech_ai , tech_comp1 , tech_comp2 , tech_oilEng , tech_oilPow , tech_weap1 , tech_gatling , tech_gun ] ;
9270: LD_ADDR_VAR 0 4
9274: PUSH
9275: LD_INT 27
9277: PUSH
9278: LD_INT 36
9280: PUSH
9281: LD_INT 32
9283: PUSH
9284: LD_INT 57
9286: PUSH
9287: LD_INT 58
9289: PUSH
9290: LD_INT 47
9292: PUSH
9293: LD_INT 46
9295: PUSH
9296: LD_INT 51
9298: PUSH
9299: LD_INT 69
9301: PUSH
9302: LD_INT 39
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: ST_TO_ADDR
// if techs then
9317: LD_VAR 0 4
9321: IFFALSE 9355
// for i in techs do
9323: LD_ADDR_VAR 0 2
9327: PUSH
9328: LD_VAR 0 4
9332: PUSH
9333: FOR_IN
9334: IFFALSE 9353
// SetTech ( i , 1 , state_researched ) ;
9336: LD_VAR 0 2
9340: PPUSH
9341: LD_INT 1
9343: PPUSH
9344: LD_INT 2
9346: PPUSH
9347: CALL_OW 322
9351: GO 9333
9353: POP
9354: POP
// hc_gallery := skirmish ;
9355: LD_ADDR_OWVAR 33
9359: PUSH
9360: LD_STRING skirmish
9362: ST_TO_ADDR
// hc_face_number := commander ;
9363: LD_ADDR_OWVAR 34
9367: PUSH
9368: LD_EXP 25
9372: ST_TO_ADDR
// hc_importance := 100 ;
9373: LD_ADDR_OWVAR 32
9377: PUSH
9378: LD_INT 100
9380: ST_TO_ADDR
// case commander of 1 :
9381: LD_EXP 25
9385: PUSH
9386: LD_INT 1
9388: DOUBLE
9389: EQUAL
9390: IFTRUE 9394
9392: GO 9418
9394: POP
// begin hc_name := Jeff Ironside ;
9395: LD_ADDR_OWVAR 26
9399: PUSH
9400: LD_STRING Jeff Ironside
9402: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
9403: LD_INT 1
9405: PPUSH
9406: LD_INT 1
9408: PPUSH
9409: LD_INT 7
9411: PPUSH
9412: CALL_OW 380
// end ; 2 :
9416: GO 9483
9418: LD_INT 2
9420: DOUBLE
9421: EQUAL
9422: IFTRUE 9426
9424: GO 9450
9426: POP
// begin hc_name := Paul Johnson ;
9427: LD_ADDR_OWVAR 26
9431: PUSH
9432: LD_STRING Paul Johnson
9434: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 7 ) ;
9435: LD_INT 1
9437: PPUSH
9438: LD_INT 3
9440: PPUSH
9441: LD_INT 7
9443: PPUSH
9444: CALL_OW 380
// end ; 3 :
9448: GO 9483
9450: LD_INT 3
9452: DOUBLE
9453: EQUAL
9454: IFTRUE 9458
9456: GO 9482
9458: POP
// begin hc_name := Lisa Stuart ;
9459: LD_ADDR_OWVAR 26
9463: PUSH
9464: LD_STRING Lisa Stuart
9466: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 7 ) ;
9467: LD_INT 2
9469: PPUSH
9470: LD_INT 4
9472: PPUSH
9473: LD_INT 7
9475: PPUSH
9476: CALL_OW 380
// end ; end ;
9480: GO 9483
9482: POP
// playerCommander := CreateHuman ;
9483: LD_ADDR_EXP 9
9487: PUSH
9488: CALL_OW 44
9492: ST_TO_ADDR
// hc_importance := 0 ;
9493: LD_ADDR_OWVAR 32
9497: PUSH
9498: LD_INT 0
9500: ST_TO_ADDR
// hc_gallery :=  ;
9501: LD_ADDR_OWVAR 33
9505: PUSH
9506: LD_STRING 
9508: ST_TO_ADDR
// result := Replace ( result , 2 , result [ 2 ] ^ playerCommander ) ;
9509: LD_ADDR_VAR 0 1
9513: PUSH
9514: LD_VAR 0 1
9518: PPUSH
9519: LD_INT 2
9521: PPUSH
9522: LD_VAR 0 1
9526: PUSH
9527: LD_INT 2
9529: ARRAY
9530: PUSH
9531: LD_EXP 9
9535: ADD
9536: PPUSH
9537: CALL_OW 1
9541: ST_TO_ADDR
// end ;
9542: LD_VAR 0 1
9546: RET
// export function PrepareReinforcements ; var i , peopleAmount , tmp , un , veh ; begin
9547: LD_INT 0
9549: PPUSH
9550: PPUSH
9551: PPUSH
9552: PPUSH
9553: PPUSH
9554: PPUSH
// uc_side := 1 ;
9555: LD_ADDR_OWVAR 20
9559: PUSH
9560: LD_INT 1
9562: ST_TO_ADDR
// uc_nation := 1 ;
9563: LD_ADDR_OWVAR 21
9567: PUSH
9568: LD_INT 1
9570: ST_TO_ADDR
// InitHc ;
9571: CALL_OW 19
// peopleAmount := [ 3 , 3 , 2 ] [ Difficulty ] ;
9575: LD_ADDR_VAR 0 3
9579: PUSH
9580: LD_INT 3
9582: PUSH
9583: LD_INT 3
9585: PUSH
9586: LD_INT 2
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: LIST
9593: PUSH
9594: LD_OWVAR 67
9598: ARRAY
9599: ST_TO_ADDR
// for i = 1 to peopleAmount do
9600: LD_ADDR_VAR 0 2
9604: PUSH
9605: DOUBLE
9606: LD_INT 1
9608: DEC
9609: ST_TO_ADDR
9610: LD_VAR 0 3
9614: PUSH
9615: FOR_TO
9616: IFFALSE 9665
// begin PrepareHuman ( false , 2 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9618: LD_INT 0
9620: PPUSH
9621: LD_INT 2
9623: PPUSH
9624: LD_INT 7
9626: PUSH
9627: LD_INT 6
9629: PUSH
9630: LD_INT 5
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: LIST
9637: PUSH
9638: LD_OWVAR 67
9642: ARRAY
9643: PPUSH
9644: CALL_OW 380
// PlaceUnitInArea ( CreateHuman , startArea , false ) ;
9648: CALL_OW 44
9652: PPUSH
9653: LD_INT 19
9655: PPUSH
9656: LD_INT 0
9658: PPUSH
9659: CALL 54132 0 3
// end ;
9663: GO 9615
9665: POP
9666: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_crane , 58 ) ;
9667: LD_INT 2
9669: PPUSH
9670: LD_INT 1
9672: PPUSH
9673: LD_INT 3
9675: PPUSH
9676: LD_INT 13
9678: PPUSH
9679: LD_INT 58
9681: PPUSH
9682: CALL 24172 0 5
// PlaceUnitInArea ( CreateVehicle , startArea , false ) ;
9686: CALL_OW 45
9690: PPUSH
9691: LD_INT 19
9693: PPUSH
9694: LD_INT 0
9696: PPUSH
9697: CALL 54132 0 3
// if commander = 1 then
9701: LD_EXP 25
9705: PUSH
9706: LD_INT 1
9708: EQUAL
9709: IFFALSE 9720
// wait ( 6 6$00 ) else
9711: LD_INT 12600
9713: PPUSH
9714: CALL_OW 67
9718: GO 9727
// wait ( 8 8$00 ) ;
9720: LD_INT 16800
9722: PPUSH
9723: CALL_OW 67
// uc_side := 1 ;
9727: LD_ADDR_OWVAR 20
9731: PUSH
9732: LD_INT 1
9734: ST_TO_ADDR
// uc_nation := 1 ;
9735: LD_ADDR_OWVAR 21
9739: PUSH
9740: LD_INT 1
9742: ST_TO_ADDR
// InitVc ;
9743: CALL_OW 20
// InitHc ;
9747: CALL_OW 19
// for i = 1 to 5 do
9751: LD_ADDR_VAR 0 2
9755: PUSH
9756: DOUBLE
9757: LD_INT 1
9759: DEC
9760: ST_TO_ADDR
9761: LD_INT 5
9763: PUSH
9764: FOR_TO
9765: IFFALSE 10009
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_light_wheeled ] [ i mod 3 + 1 ] , engine_combustion , [ control_manual , control_computer , control_computer ] [ i mod 3 + 1 ] , [ us_heavy_gun , us_cargo_bay , us_radar ] [ i mod 3 + 1 ] , rand ( 40 , 55 ) ) ;
9767: LD_INT 4
9769: PUSH
9770: LD_INT 3
9772: PUSH
9773: LD_INT 1
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: LIST
9780: PUSH
9781: LD_VAR 0 2
9785: PUSH
9786: LD_INT 3
9788: MOD
9789: PUSH
9790: LD_INT 1
9792: PLUS
9793: ARRAY
9794: PPUSH
9795: LD_INT 1
9797: PPUSH
9798: LD_INT 1
9800: PUSH
9801: LD_INT 3
9803: PUSH
9804: LD_INT 3
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: LIST
9811: PUSH
9812: LD_VAR 0 2
9816: PUSH
9817: LD_INT 3
9819: MOD
9820: PUSH
9821: LD_INT 1
9823: PLUS
9824: ARRAY
9825: PPUSH
9826: LD_INT 6
9828: PUSH
9829: LD_INT 12
9831: PUSH
9832: LD_INT 11
9834: PUSH
9835: EMPTY
9836: LIST
9837: LIST
9838: LIST
9839: PUSH
9840: LD_VAR 0 2
9844: PUSH
9845: LD_INT 3
9847: MOD
9848: PUSH
9849: LD_INT 1
9851: PLUS
9852: ARRAY
9853: PPUSH
9854: LD_INT 40
9856: PPUSH
9857: LD_INT 55
9859: PPUSH
9860: CALL_OW 12
9864: PPUSH
9865: CALL 24172 0 5
// veh := CreateVehicle ;
9869: LD_ADDR_VAR 0 6
9873: PUSH
9874: CALL_OW 45
9878: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
9879: LD_VAR 0 6
9883: PPUSH
9884: LD_INT 19
9886: PPUSH
9887: LD_INT 0
9889: PPUSH
9890: CALL 54132 0 3
// if GetWeapon ( veh ) = us_cargo_bay then
9894: LD_VAR 0 6
9898: PPUSH
9899: CALL_OW 264
9903: PUSH
9904: LD_INT 12
9906: EQUAL
9907: IFFALSE 9939
// begin AddCargo ( veh , mat_cans , 70 ) ;
9909: LD_VAR 0 6
9913: PPUSH
9914: LD_INT 1
9916: PPUSH
9917: LD_INT 70
9919: PPUSH
9920: CALL_OW 291
// AddCargo ( veh , mat_siberit , 30 ) ;
9924: LD_VAR 0 6
9928: PPUSH
9929: LD_INT 3
9931: PPUSH
9932: LD_INT 30
9934: PPUSH
9935: CALL_OW 291
// end ; if GetControl ( veh ) = control_manual then
9939: LD_VAR 0 6
9943: PPUSH
9944: CALL_OW 263
9948: PUSH
9949: LD_INT 1
9951: EQUAL
9952: IFFALSE 10007
// begin PrepareHuman ( sex_male , 3 , 6 ) ;
9954: LD_INT 1
9956: PPUSH
9957: LD_INT 3
9959: PPUSH
9960: LD_INT 6
9962: PPUSH
9963: CALL_OW 380
// un := CreateHuman ;
9967: LD_ADDR_VAR 0 5
9971: PUSH
9972: CALL_OW 44
9976: ST_TO_ADDR
// tmp := tmp ^ un ;
9977: LD_ADDR_VAR 0 4
9981: PUSH
9982: LD_VAR 0 4
9986: PUSH
9987: LD_VAR 0 5
9991: ADD
9992: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9993: LD_VAR 0 5
9997: PPUSH
9998: LD_VAR 0 6
10002: PPUSH
10003: CALL_OW 52
// end ; end ;
10007: GO 9764
10009: POP
10010: POP
// if tmp then
10011: LD_VAR 0 4
10015: IFFALSE 10079
// begin CenterNowOnUnits ( tmp ) ;
10017: LD_VAR 0 4
10021: PPUSH
10022: CALL_OW 87
// Say ( tmp [ 1 ] , DAR-1 ) ;
10026: LD_VAR 0 4
10030: PUSH
10031: LD_INT 1
10033: ARRAY
10034: PPUSH
10035: LD_STRING DAR-1
10037: PPUSH
10038: CALL_OW 88
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-DAR ) ;
10042: LD_EXP 9
10046: PPUSH
10047: LD_STRING D
10049: PUSH
10050: LD_STRING I
10052: PUSH
10053: LD_STRING J
10055: PUSH
10056: LD_STRING S
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: LIST
10063: PUSH
10064: LD_EXP 25
10068: ARRAY
10069: STR
10070: PUSH
10071: LD_STRING -1-DAR
10073: STR
10074: PPUSH
10075: CALL_OW 88
// end ; if not reinforceAllowed then
10079: LD_EXP 24
10083: NOT
10084: IFFALSE 10088
// exit ;
10086: GO 10242
// wait ( 25 25$00 ) ;
10088: LD_INT 52500
10090: PPUSH
10091: CALL_OW 67
// uc_side := 1 ;
10095: LD_ADDR_OWVAR 20
10099: PUSH
10100: LD_INT 1
10102: ST_TO_ADDR
// uc_nation := 1 ;
10103: LD_ADDR_OWVAR 21
10107: PUSH
10108: LD_INT 1
10110: ST_TO_ADDR
// InitVc ;
10111: CALL_OW 20
// InitHc ;
10115: CALL_OW 19
// for i = 1 to 4 do
10119: LD_ADDR_VAR 0 2
10123: PUSH
10124: DOUBLE
10125: LD_INT 1
10127: DEC
10128: ST_TO_ADDR
10129: LD_INT 4
10131: PUSH
10132: FOR_TO
10133: IFFALSE 10240
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 1 ) ;
10135: LD_INT 5
10137: PPUSH
10138: LD_INT 3
10140: PPUSH
10141: LD_INT 1
10143: PPUSH
10144: LD_INT 6
10146: PPUSH
10147: LD_INT 1
10149: PPUSH
10150: CALL 24172 0 5
// veh := CreateVehicle ;
10154: LD_ADDR_VAR 0 6
10158: PUSH
10159: CALL_OW 45
10163: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
10164: LD_VAR 0 6
10168: PPUSH
10169: LD_INT 19
10171: PPUSH
10172: LD_INT 0
10174: PPUSH
10175: CALL 54132 0 3
// if GetControl ( veh ) = control_manual then
10179: LD_VAR 0 6
10183: PPUSH
10184: CALL_OW 263
10188: PUSH
10189: LD_INT 1
10191: EQUAL
10192: IFFALSE 10238
// begin PrepareHuman ( false , 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
10194: LD_INT 0
10196: PPUSH
10197: LD_INT 3
10199: PPUSH
10200: LD_INT 7
10202: PUSH
10203: LD_INT 6
10205: PUSH
10206: LD_INT 5
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: LIST
10213: PUSH
10214: LD_OWVAR 67
10218: ARRAY
10219: PPUSH
10220: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10224: CALL_OW 44
10228: PPUSH
10229: LD_VAR 0 6
10233: PPUSH
10234: CALL_OW 52
// end ; end ;
10238: GO 10132
10240: POP
10241: POP
// end ;
10242: LD_VAR 0 1
10246: RET
// export function PrepareLegionReinforcements ; var i , un , j , tmp ; begin
10247: LD_INT 0
10249: PPUSH
10250: PPUSH
10251: PPUSH
10252: PPUSH
10253: PPUSH
// uc_side := 8 ;
10254: LD_ADDR_OWVAR 20
10258: PUSH
10259: LD_INT 8
10261: ST_TO_ADDR
// uc_nation := nation_arabian ;
10262: LD_ADDR_OWVAR 21
10266: PUSH
10267: LD_INT 2
10269: ST_TO_ADDR
// for i = 1 to 2 do
10270: LD_ADDR_VAR 0 2
10274: PUSH
10275: DOUBLE
10276: LD_INT 1
10278: DEC
10279: ST_TO_ADDR
10280: LD_INT 2
10282: PUSH
10283: FOR_TO
10284: IFFALSE 10364
// for j = 1 to 4 do
10286: LD_ADDR_VAR 0 4
10290: PUSH
10291: DOUBLE
10292: LD_INT 1
10294: DEC
10295: ST_TO_ADDR
10296: LD_INT 4
10298: PUSH
10299: FOR_TO
10300: IFFALSE 10360
// begin PrepareHuman ( false , j , 8 ) ;
10302: LD_INT 0
10304: PPUSH
10305: LD_VAR 0 4
10309: PPUSH
10310: LD_INT 8
10312: PPUSH
10313: CALL_OW 380
// un := CreateHuman ;
10317: LD_ADDR_VAR 0 3
10321: PUSH
10322: CALL_OW 44
10326: ST_TO_ADDR
// PlaceUnitArea ( un , legionSpawn , false ) ;
10327: LD_VAR 0 3
10331: PPUSH
10332: LD_INT 23
10334: PPUSH
10335: LD_INT 0
10337: PPUSH
10338: CALL_OW 49
// tmp := tmp union un ;
10342: LD_ADDR_VAR 0 5
10346: PUSH
10347: LD_VAR 0 5
10351: PUSH
10352: LD_VAR 0 3
10356: UNION
10357: ST_TO_ADDR
// end ;
10358: GO 10299
10360: POP
10361: POP
10362: GO 10283
10364: POP
10365: POP
// for i in tmp do
10366: LD_ADDR_VAR 0 2
10370: PUSH
10371: LD_VAR 0 5
10375: PUSH
10376: FOR_IN
10377: IFFALSE 10396
// ComMoveXY ( i , 150 , 136 ) ;
10379: LD_VAR 0 2
10383: PPUSH
10384: LD_INT 150
10386: PPUSH
10387: LD_INT 136
10389: PPUSH
10390: CALL_OW 111
10394: GO 10376
10396: POP
10397: POP
// mc_bases := Replace ( mc_bases , mc_leg , mc_bases [ mc_leg ] union tmp ) ;
10398: LD_ADDR_EXP 45
10402: PUSH
10403: LD_EXP 45
10407: PPUSH
10408: LD_EXP 6
10412: PPUSH
10413: LD_EXP 45
10417: PUSH
10418: LD_EXP 6
10422: ARRAY
10423: PUSH
10424: LD_VAR 0 5
10428: UNION
10429: PPUSH
10430: CALL_OW 1
10434: ST_TO_ADDR
// end ;
10435: LD_VAR 0 1
10439: RET
// every 0 0$10 trigger Difficulty > 1 and GetTech ( tech_lapser , 3 ) = state_researched do
10440: LD_OWVAR 67
10444: PUSH
10445: LD_INT 1
10447: GREATER
10448: PUSH
10449: LD_INT 31
10451: PPUSH
10452: LD_INT 3
10454: PPUSH
10455: CALL_OW 321
10459: PUSH
10460: LD_INT 2
10462: EQUAL
10463: AND
10464: IFFALSE 10681
10466: GO 10468
10468: DISABLE
// begin MC_InsertBuildingList ( mc_rus_1 , [ [ b_turret , 101 , 159 , 5 ] , [ b_turret , 105 , 158 , 5 ] , [ b_turret , 96 , 136 , 5 ] , [ b_turret , 94 , 133 , 4 ] , [ b_turret , 84 , 102 , 4 ] ] ) ;
10469: LD_EXP 7
10473: PPUSH
10474: LD_INT 33
10476: PUSH
10477: LD_INT 101
10479: PUSH
10480: LD_INT 159
10482: PUSH
10483: LD_INT 5
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: PUSH
10492: LD_INT 33
10494: PUSH
10495: LD_INT 105
10497: PUSH
10498: LD_INT 158
10500: PUSH
10501: LD_INT 5
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: PUSH
10510: LD_INT 33
10512: PUSH
10513: LD_INT 96
10515: PUSH
10516: LD_INT 136
10518: PUSH
10519: LD_INT 5
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: PUSH
10528: LD_INT 33
10530: PUSH
10531: LD_INT 94
10533: PUSH
10534: LD_INT 133
10536: PUSH
10537: LD_INT 4
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: PUSH
10546: LD_INT 33
10548: PUSH
10549: LD_INT 84
10551: PUSH
10552: LD_INT 102
10554: PUSH
10555: LD_INT 4
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: PPUSH
10571: CALL 79395 0 2
// MC_InsertBuildingList ( mc_rus_2 , [ [ b_turret , 50 , 17 , 4 ] , [ b_turret , 52 , 20 , 4 ] , [ b_turret , 53 , 23 , 4 ] , [ b_turret , 45 , 32 , 4 ] , [ b_turret , 45 , 39 , 4 ] ] ) ;
10575: LD_EXP 8
10579: PPUSH
10580: LD_INT 33
10582: PUSH
10583: LD_INT 50
10585: PUSH
10586: LD_INT 17
10588: PUSH
10589: LD_INT 4
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: PUSH
10598: LD_INT 33
10600: PUSH
10601: LD_INT 52
10603: PUSH
10604: LD_INT 20
10606: PUSH
10607: LD_INT 4
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: PUSH
10616: LD_INT 33
10618: PUSH
10619: LD_INT 53
10621: PUSH
10622: LD_INT 23
10624: PUSH
10625: LD_INT 4
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: PUSH
10634: LD_INT 33
10636: PUSH
10637: LD_INT 45
10639: PUSH
10640: LD_INT 32
10642: PUSH
10643: LD_INT 4
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: PUSH
10652: LD_INT 33
10654: PUSH
10655: LD_INT 45
10657: PUSH
10658: LD_INT 39
10660: PUSH
10661: LD_INT 4
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: PPUSH
10677: CALL 79395 0 2
// end ; end_of_file
10681: END
// export function Action ; var i , tmp ; begin
10682: LD_INT 0
10684: PPUSH
10685: PPUSH
10686: PPUSH
// InGameOn ;
10687: CALL_OW 8
// CenterNowOnXY ( 225 , 217 ) ;
10691: LD_INT 225
10693: PPUSH
10694: LD_INT 217
10696: PPUSH
10697: CALL_OW 86
// for i in playerForces [ 2 ] do
10701: LD_ADDR_VAR 0 2
10705: PUSH
10706: LD_EXP 10
10710: PUSH
10711: LD_INT 2
10713: ARRAY
10714: PUSH
10715: FOR_IN
10716: IFFALSE 10849
// begin if playerForces [ 1 ] and GetClass ( i ) in [ 3 , 4 ] then
10718: LD_EXP 10
10722: PUSH
10723: LD_INT 1
10725: ARRAY
10726: PUSH
10727: LD_VAR 0 2
10731: PPUSH
10732: CALL_OW 257
10736: PUSH
10737: LD_INT 3
10739: PUSH
10740: LD_INT 4
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: IN
10747: AND
10748: IFFALSE 10832
// begin PlaceUnitInArea ( playerForces [ 1 ] [ 1 ] , startArea , false ) ;
10750: LD_EXP 10
10754: PUSH
10755: LD_INT 1
10757: ARRAY
10758: PUSH
10759: LD_INT 1
10761: ARRAY
10762: PPUSH
10763: LD_INT 19
10765: PPUSH
10766: LD_INT 0
10768: PPUSH
10769: CALL 54132 0 3
// PlaceHumanInUnit ( i , playerForces [ 1 ] [ 1 ] ) ;
10773: LD_VAR 0 2
10777: PPUSH
10778: LD_EXP 10
10782: PUSH
10783: LD_INT 1
10785: ARRAY
10786: PUSH
10787: LD_INT 1
10789: ARRAY
10790: PPUSH
10791: CALL_OW 52
// playerForces := Replace ( playerForces , 1 , Delete ( playerForces [ 1 ] , 1 ) ) ;
10795: LD_ADDR_EXP 10
10799: PUSH
10800: LD_EXP 10
10804: PPUSH
10805: LD_INT 1
10807: PPUSH
10808: LD_EXP 10
10812: PUSH
10813: LD_INT 1
10815: ARRAY
10816: PPUSH
10817: LD_INT 1
10819: PPUSH
10820: CALL_OW 3
10824: PPUSH
10825: CALL_OW 1
10829: ST_TO_ADDR
// end else
10830: GO 10847
// PlaceUnitInArea ( i , startArea , false ) ;
10832: LD_VAR 0 2
10836: PPUSH
10837: LD_INT 19
10839: PPUSH
10840: LD_INT 0
10842: PPUSH
10843: CALL 54132 0 3
// end ;
10847: GO 10715
10849: POP
10850: POP
// wait ( 0 0$2 ) ;
10851: LD_INT 70
10853: PPUSH
10854: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1 ) ;
10858: LD_EXP 9
10862: PPUSH
10863: LD_STRING D
10865: PUSH
10866: LD_STRING I
10868: PUSH
10869: LD_STRING J
10871: PUSH
10872: LD_STRING S
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: LIST
10879: PUSH
10880: LD_EXP 25
10884: ARRAY
10885: STR
10886: PUSH
10887: LD_STRING -1
10889: STR
10890: PPUSH
10891: CALL_OW 88
// SayRadio ( Powell , DP-1 ) ;
10895: LD_EXP 12
10899: PPUSH
10900: LD_STRING DP-1
10902: PPUSH
10903: CALL_OW 94
// SayRadio ( Powell , DP-2 ) ;
10907: LD_EXP 12
10911: PPUSH
10912: LD_STRING DP-2
10914: PPUSH
10915: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2 ) ;
10919: LD_EXP 9
10923: PPUSH
10924: LD_STRING D
10926: PUSH
10927: LD_STRING I
10929: PUSH
10930: LD_STRING J
10932: PUSH
10933: LD_STRING S
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: LIST
10940: PUSH
10941: LD_EXP 25
10945: ARRAY
10946: STR
10947: PUSH
10948: LD_STRING -2
10950: STR
10951: PPUSH
10952: CALL_OW 88
// InGameOff ;
10956: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
10960: LD_STRING O1
10962: PPUSH
10963: CALL_OW 337
// game := true ;
10967: LD_ADDR_EXP 3
10971: PUSH
10972: LD_INT 1
10974: ST_TO_ADDR
// SaveForQuickRestart ;
10975: CALL_OW 22
// wait ( 0 0$5 ) ;
10979: LD_INT 175
10981: PPUSH
10982: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3 ) ;
10986: LD_EXP 9
10990: PPUSH
10991: LD_STRING D
10993: PUSH
10994: LD_STRING I
10996: PUSH
10997: LD_STRING J
10999: PUSH
11000: LD_STRING S
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: LIST
11007: PUSH
11008: LD_EXP 25
11012: ARRAY
11013: STR
11014: PUSH
11015: LD_STRING -3
11017: STR
11018: PPUSH
11019: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11023: LD_INT 35
11025: PPUSH
11026: CALL_OW 67
// until ruEscape [ 1 ] >= ruEscape [ 2 ] ;
11030: LD_EXP 15
11034: PUSH
11035: LD_INT 1
11037: ARRAY
11038: PUSH
11039: LD_EXP 15
11043: PUSH
11044: LD_INT 2
11046: ARRAY
11047: GREATEREQUAL
11048: IFFALSE 11023
// outpostEscape := true ;
11050: LD_ADDR_EXP 27
11054: PUSH
11055: LD_INT 1
11057: ST_TO_ADDR
// tmp := UnitFilter ( ruOutpost , [ f_sex , sex_male ] ) ;
11058: LD_ADDR_VAR 0 3
11062: PUSH
11063: LD_EXP 14
11067: PPUSH
11068: LD_INT 26
11070: PUSH
11071: LD_INT 1
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PPUSH
11078: CALL_OW 72
11082: ST_TO_ADDR
// if tmp then
11083: LD_VAR 0 3
11087: IFFALSE 11105
// Say ( tmp [ 1 ] , DR-1-Escape ) ;
11089: LD_VAR 0 3
11093: PUSH
11094: LD_INT 1
11096: ARRAY
11097: PPUSH
11098: LD_STRING DR-1-Escape
11100: PPUSH
11101: CALL_OW 88
// wait ( 0 0$1 ) ;
11105: LD_INT 35
11107: PPUSH
11108: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Escape ) ;
11112: LD_EXP 9
11116: PPUSH
11117: LD_STRING D
11119: PUSH
11120: LD_STRING I
11122: PUSH
11123: LD_STRING J
11125: PUSH
11126: LD_STRING S
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: LIST
11133: PUSH
11134: LD_EXP 25
11138: ARRAY
11139: STR
11140: PUSH
11141: LD_STRING -1-Escape
11143: STR
11144: PPUSH
11145: CALL_OW 88
// for i in ruOutpost do
11149: LD_ADDR_VAR 0 2
11153: PUSH
11154: LD_EXP 14
11158: PUSH
11159: FOR_IN
11160: IFFALSE 11214
// begin if IsInUnit ( i ) then
11162: LD_VAR 0 2
11166: PPUSH
11167: CALL_OW 310
11171: IFFALSE 11182
// ComExitBuilding ( i ) ;
11173: LD_VAR 0 2
11177: PPUSH
11178: CALL_OW 122
// AddComMoveXY ( i , 179 , 102 ) ;
11182: LD_VAR 0 2
11186: PPUSH
11187: LD_INT 179
11189: PPUSH
11190: LD_INT 102
11192: PPUSH
11193: CALL_OW 171
// AddComMoveXY ( i , 28 , 20 ) ;
11197: LD_VAR 0 2
11201: PPUSH
11202: LD_INT 28
11204: PPUSH
11205: LD_INT 20
11207: PPUSH
11208: CALL_OW 171
// end ;
11212: GO 11159
11214: POP
11215: POP
// tmp := [ ] ;
11216: LD_ADDR_VAR 0 3
11220: PUSH
11221: EMPTY
11222: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11223: LD_INT 35
11225: PPUSH
11226: CALL_OW 67
// tmp := UnitFilter ( ruOutpost , [ f_inarea , rus2Base ] ) ;
11230: LD_ADDR_VAR 0 3
11234: PUSH
11235: LD_EXP 14
11239: PPUSH
11240: LD_INT 95
11242: PUSH
11243: LD_INT 11
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: PPUSH
11250: CALL_OW 72
11254: ST_TO_ADDR
// if tmp then
11255: LD_VAR 0 3
11259: IFFALSE 11338
// for i in tmp do
11261: LD_ADDR_VAR 0 2
11265: PUSH
11266: LD_VAR 0 3
11270: PUSH
11271: FOR_IN
11272: IFFALSE 11336
// begin ruOutpost := ruOutpost diff i ;
11274: LD_ADDR_EXP 14
11278: PUSH
11279: LD_EXP 14
11283: PUSH
11284: LD_VAR 0 2
11288: DIFF
11289: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ mc_rus_2 , mc_bases [ mc_rus_2 ] + 1 ] , i ) ;
11290: LD_ADDR_EXP 45
11294: PUSH
11295: LD_EXP 45
11299: PPUSH
11300: LD_EXP 8
11304: PUSH
11305: LD_EXP 45
11309: PUSH
11310: LD_EXP 8
11314: ARRAY
11315: PUSH
11316: LD_INT 1
11318: PLUS
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: PPUSH
11324: LD_VAR 0 2
11328: PPUSH
11329: CALL 24294 0 3
11333: ST_TO_ADDR
// end ;
11334: GO 11271
11336: POP
11337: POP
// until not UnitFilter ( ruOutpost , [ f_type , unit_human ] ) ;
11338: LD_EXP 14
11342: PPUSH
11343: LD_INT 21
11345: PUSH
11346: LD_INT 1
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: PPUSH
11353: CALL_OW 72
11357: NOT
11358: IFFALSE 11223
// ruOutpost := [ ] ;
11360: LD_ADDR_EXP 14
11364: PUSH
11365: EMPTY
11366: ST_TO_ADDR
// end ;
11367: LD_VAR 0 1
11371: RET
// every 0 0$1 trigger outpostEscape do var i , tmp ;
11372: LD_EXP 27
11376: IFFALSE 11565
11378: GO 11380
11380: DISABLE
11381: LD_INT 0
11383: PPUSH
11384: PPUSH
// begin wait ( rand ( 0 0$25 , 0 0$35 ) ) ;
11385: LD_INT 875
11387: PPUSH
11388: LD_INT 1225
11390: PPUSH
11391: CALL_OW 12
11395: PPUSH
11396: CALL_OW 67
// tmp := [ [ 208 , 166 ] , [ 218 , 174 ] , [ 201 , 173 ] , [ 189 , 167 ] , [ 191 , 160 ] , [ 209 , 181 ] , [ 192 , 162 ] , [ 197 , 166 ] ] ;
11400: LD_ADDR_VAR 0 2
11404: PUSH
11405: LD_INT 208
11407: PUSH
11408: LD_INT 166
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: PUSH
11415: LD_INT 218
11417: PUSH
11418: LD_INT 174
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 201
11427: PUSH
11428: LD_INT 173
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 189
11437: PUSH
11438: LD_INT 167
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: PUSH
11445: LD_INT 191
11447: PUSH
11448: LD_INT 160
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: PUSH
11455: LD_INT 209
11457: PUSH
11458: LD_INT 181
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PUSH
11465: LD_INT 192
11467: PUSH
11468: LD_INT 162
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PUSH
11475: LD_INT 197
11477: PUSH
11478: LD_INT 166
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: ST_TO_ADDR
// for i = 1 to 5 + Difficulty do
11495: LD_ADDR_VAR 0 1
11499: PUSH
11500: DOUBLE
11501: LD_INT 1
11503: DEC
11504: ST_TO_ADDR
11505: LD_INT 5
11507: PUSH
11508: LD_OWVAR 67
11512: PLUS
11513: PUSH
11514: FOR_TO
11515: IFFALSE 11563
// begin MineExplosion ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 1 ) ;
11517: LD_VAR 0 2
11521: PUSH
11522: LD_VAR 0 1
11526: ARRAY
11527: PUSH
11528: LD_INT 1
11530: ARRAY
11531: PPUSH
11532: LD_VAR 0 2
11536: PUSH
11537: LD_VAR 0 1
11541: ARRAY
11542: PUSH
11543: LD_INT 2
11545: ARRAY
11546: PPUSH
11547: LD_INT 1
11549: PPUSH
11550: CALL_OW 453
// wait ( 0 0$0.8 ) ;
11554: LD_INT 28
11556: PPUSH
11557: CALL_OW 67
// end ;
11561: GO 11514
11563: POP
11564: POP
// end ;
11565: PPOPN 2
11567: END
// every 0 0$3 trigger not outpostEscape do var tmp , engs , buildings , empty , i , j , k ;
11568: LD_EXP 27
11572: NOT
11573: IFFALSE 12227
11575: GO 11577
11577: DISABLE
11578: LD_INT 0
11580: PPUSH
11581: PPUSH
11582: PPUSH
11583: PPUSH
11584: PPUSH
11585: PPUSH
11586: PPUSH
// begin enable ;
11587: ENABLE
// tmp := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
11588: LD_ADDR_VAR 0 1
11592: PUSH
11593: LD_EXP 14
11597: PPUSH
11598: LD_INT 22
11600: PUSH
11601: LD_INT 3
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PUSH
11608: LD_INT 25
11610: PUSH
11611: LD_INT 1
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PPUSH
11622: CALL_OW 72
11626: ST_TO_ADDR
// engs := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11627: LD_ADDR_VAR 0 2
11631: PUSH
11632: LD_EXP 14
11636: PPUSH
11637: LD_INT 22
11639: PUSH
11640: LD_INT 3
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: PUSH
11647: LD_INT 25
11649: PUSH
11650: LD_INT 2
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PPUSH
11661: CALL_OW 72
11665: ST_TO_ADDR
// buildings := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11666: LD_ADDR_VAR 0 3
11670: PUSH
11671: LD_EXP 14
11675: PPUSH
11676: LD_INT 22
11678: PUSH
11679: LD_INT 3
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: PUSH
11686: LD_INT 21
11688: PUSH
11689: LD_INT 3
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: PUSH
11696: LD_INT 3
11698: PUSH
11699: LD_INT 24
11701: PUSH
11702: LD_INT 1000
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: LIST
11717: PPUSH
11718: CALL_OW 72
11722: ST_TO_ADDR
// if engs and buildings then
11723: LD_VAR 0 2
11727: PUSH
11728: LD_VAR 0 3
11732: AND
11733: IFFALSE 11806
// begin for i in engs do
11735: LD_ADDR_VAR 0 5
11739: PUSH
11740: LD_VAR 0 2
11744: PUSH
11745: FOR_IN
11746: IFFALSE 11802
// if IsInUnit ( i ) then
11748: LD_VAR 0 5
11752: PPUSH
11753: CALL_OW 310
11757: IFFALSE 11770
// ComExitBuilding ( i ) else
11759: LD_VAR 0 5
11763: PPUSH
11764: CALL_OW 122
11768: GO 11800
// if not HasTask ( i ) then
11770: LD_VAR 0 5
11774: PPUSH
11775: CALL_OW 314
11779: NOT
11780: IFFALSE 11800
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
11782: LD_VAR 0 5
11786: PPUSH
11787: LD_VAR 0 3
11791: PUSH
11792: LD_INT 1
11794: ARRAY
11795: PPUSH
11796: CALL_OW 130
11800: GO 11745
11802: POP
11803: POP
// end else
11804: GO 11909
// if not buildings and UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) and UnitFilter ( engs , [ f_not , [ f_inside ] ] ) then
11806: LD_VAR 0 3
11810: NOT
11811: PUSH
11812: LD_EXP 14
11816: PPUSH
11817: LD_INT 30
11819: PUSH
11820: LD_INT 0
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: PPUSH
11827: CALL_OW 72
11831: AND
11832: PUSH
11833: LD_VAR 0 2
11837: PPUSH
11838: LD_INT 3
11840: PUSH
11841: LD_INT 54
11843: PUSH
11844: EMPTY
11845: LIST
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PPUSH
11851: CALL_OW 72
11855: AND
11856: IFFALSE 11909
// ComEnterUnit ( UnitFilter ( engs , [ f_not , [ f_inside ] ] ) , UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) [ 1 ] ) ;
11858: LD_VAR 0 2
11862: PPUSH
11863: LD_INT 3
11865: PUSH
11866: LD_INT 54
11868: PUSH
11869: EMPTY
11870: LIST
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PPUSH
11876: CALL_OW 72
11880: PPUSH
11881: LD_EXP 14
11885: PPUSH
11886: LD_INT 30
11888: PUSH
11889: LD_INT 0
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PPUSH
11896: CALL_OW 72
11900: PUSH
11901: LD_INT 1
11903: ARRAY
11904: PPUSH
11905: CALL_OW 120
// if not tmp then
11909: LD_VAR 0 1
11913: NOT
11914: IFFALSE 11918
// exit ;
11916: GO 12227
// if FilterUnitsInArea ( ruOutpostCenterArea , [ f_enemy , 3 ] ) > 1 then
11918: LD_INT 26
11920: PPUSH
11921: LD_INT 81
11923: PUSH
11924: LD_INT 3
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PPUSH
11931: CALL_OW 70
11935: PUSH
11936: LD_INT 1
11938: GREATER
11939: IFFALSE 11995
// begin for i in tmp do
11941: LD_ADDR_VAR 0 5
11945: PUSH
11946: LD_VAR 0 1
11950: PUSH
11951: FOR_IN
11952: IFFALSE 11991
// begin if IsInUnit ( i ) then
11954: LD_VAR 0 5
11958: PPUSH
11959: CALL_OW 310
11963: IFFALSE 11974
// ComExitBuilding ( i ) ;
11965: LD_VAR 0 5
11969: PPUSH
11970: CALL_OW 122
// AddComAgressiveMove ( i , 204 , 164 ) ;
11974: LD_VAR 0 5
11978: PPUSH
11979: LD_INT 204
11981: PPUSH
11982: LD_INT 164
11984: PPUSH
11985: CALL_OW 174
// end ;
11989: GO 11951
11991: POP
11992: POP
// end else
11993: GO 12227
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
11995: LD_VAR 0 1
11999: PPUSH
12000: LD_INT 3
12002: PUSH
12003: LD_INT 54
12005: PUSH
12006: EMPTY
12007: LIST
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PPUSH
12013: CALL_OW 72
12017: IFFALSE 12227
// begin empty := UnitFilter ( ruOutpost , [ [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
12019: LD_ADDR_VAR 0 4
12023: PUSH
12024: LD_EXP 14
12028: PPUSH
12029: LD_INT 30
12031: PUSH
12032: LD_INT 32
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: PUSH
12039: LD_INT 58
12041: PUSH
12042: EMPTY
12043: LIST
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PPUSH
12049: CALL_OW 72
12053: ST_TO_ADDR
// if not empty and UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) then
12054: LD_VAR 0 4
12058: NOT
12059: PUSH
12060: LD_EXP 14
12064: PPUSH
12065: LD_INT 30
12067: PUSH
12068: LD_INT 5
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: PPUSH
12075: CALL_OW 72
12079: AND
12080: IFFALSE 12117
// begin ComEnterUnit ( tmp , UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) [ 1 ] ) ;
12082: LD_VAR 0 1
12086: PPUSH
12087: LD_EXP 14
12091: PPUSH
12092: LD_INT 30
12094: PUSH
12095: LD_INT 5
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PPUSH
12102: CALL_OW 72
12106: PUSH
12107: LD_INT 1
12109: ARRAY
12110: PPUSH
12111: CALL_OW 120
// exit ;
12115: GO 12227
// end ; j := UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) ;
12117: LD_ADDR_VAR 0 6
12121: PUSH
12122: LD_VAR 0 1
12126: PPUSH
12127: LD_INT 3
12129: PUSH
12130: LD_INT 54
12132: PUSH
12133: EMPTY
12134: LIST
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: PPUSH
12140: CALL_OW 72
12144: ST_TO_ADDR
// if j < empty then
12145: LD_VAR 0 6
12149: PUSH
12150: LD_VAR 0 4
12154: LESS
12155: IFFALSE 12169
// k := j else
12157: LD_ADDR_VAR 0 7
12161: PUSH
12162: LD_VAR 0 6
12166: ST_TO_ADDR
12167: GO 12179
// k := empty ;
12169: LD_ADDR_VAR 0 7
12173: PUSH
12174: LD_VAR 0 4
12178: ST_TO_ADDR
// for i = 1 to k do
12179: LD_ADDR_VAR 0 5
12183: PUSH
12184: DOUBLE
12185: LD_INT 1
12187: DEC
12188: ST_TO_ADDR
12189: LD_VAR 0 7
12193: PUSH
12194: FOR_TO
12195: IFFALSE 12225
// ComEnterUnit ( j [ i ] , empty [ i ] ) ;
12197: LD_VAR 0 6
12201: PUSH
12202: LD_VAR 0 5
12206: ARRAY
12207: PPUSH
12208: LD_VAR 0 4
12212: PUSH
12213: LD_VAR 0 5
12217: ARRAY
12218: PPUSH
12219: CALL_OW 120
12223: GO 12194
12225: POP
12226: POP
// end ; end ;
12227: PPOPN 7
12229: END
// every 0 0$2 trigger GameType = 1 and outpostEscape and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , 208 , 163 , 8 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 208 , 163 , 14 ] ] ) do var i ;
12230: LD_EXP 2
12234: PUSH
12235: LD_INT 1
12237: EQUAL
12238: PUSH
12239: LD_EXP 27
12243: AND
12244: PUSH
12245: LD_INT 22
12247: PUSH
12248: LD_INT 1
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PUSH
12255: LD_INT 92
12257: PUSH
12258: LD_INT 208
12260: PUSH
12261: LD_INT 163
12263: PUSH
12264: LD_INT 8
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PPUSH
12277: CALL_OW 69
12281: AND
12282: PUSH
12283: LD_INT 22
12285: PUSH
12286: LD_INT 3
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: PUSH
12293: LD_INT 21
12295: PUSH
12296: LD_INT 1
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: PUSH
12303: LD_INT 92
12305: PUSH
12306: LD_INT 208
12308: PUSH
12309: LD_INT 163
12311: PUSH
12312: LD_INT 14
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: LIST
12325: PPUSH
12326: CALL_OW 69
12330: NOT
12331: AND
12332: IFFALSE 12637
12334: GO 12336
12336: DISABLE
12337: LD_INT 0
12339: PPUSH
// begin InGameOn ;
12340: CALL_OW 8
// CenterNowOnUnits ( playerCommander ) ;
12344: LD_EXP 9
12348: PPUSH
12349: CALL_OW 87
// wait ( 0 0$1 ) ;
12353: LD_INT 35
12355: PPUSH
12356: CALL_OW 67
// DialogueOn ;
12360: CALL_OW 6
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-BaseCaptured ) ;
12364: LD_EXP 9
12368: PPUSH
12369: LD_STRING D
12371: PUSH
12372: LD_STRING I
12374: PUSH
12375: LD_STRING J
12377: PUSH
12378: LD_STRING S
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: LIST
12385: PUSH
12386: LD_EXP 25
12390: ARRAY
12391: STR
12392: PUSH
12393: LD_STRING -1-BaseCaptured
12395: STR
12396: PPUSH
12397: CALL_OW 88
// SayRadio ( Powell , DP-1-BaseCaptured ) ;
12401: LD_EXP 12
12405: PPUSH
12406: LD_STRING DP-1-BaseCaptured
12408: PPUSH
12409: CALL_OW 94
// if sibBombAllowed then
12413: LD_EXP 23
12417: IFFALSE 12559
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-BaseCaptured ) ;
12419: LD_EXP 9
12423: PPUSH
12424: LD_STRING D
12426: PUSH
12427: LD_STRING I
12429: PUSH
12430: LD_STRING J
12432: PUSH
12433: LD_STRING S
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: LIST
12440: PUSH
12441: LD_EXP 25
12445: ARRAY
12446: STR
12447: PUSH
12448: LD_STRING -2-BaseCaptured
12450: STR
12451: PPUSH
12452: CALL_OW 88
// if commander = 1 then
12456: LD_EXP 25
12460: PUSH
12461: LD_INT 1
12463: EQUAL
12464: IFFALSE 12478
// SayRadio ( Powell , DP-2b-BaseCaptured ) ;
12466: LD_EXP 12
12470: PPUSH
12471: LD_STRING DP-2b-BaseCaptured
12473: PPUSH
12474: CALL_OW 94
// if commander = 2 then
12478: LD_EXP 25
12482: PUSH
12483: LD_INT 2
12485: EQUAL
12486: IFFALSE 12500
// SayRadio ( Powell , DP-2-BaseCaptured ) ;
12488: LD_EXP 12
12492: PPUSH
12493: LD_STRING DP-2-BaseCaptured
12495: PPUSH
12496: CALL_OW 94
// if commander = 3 then
12500: LD_EXP 25
12504: PUSH
12505: LD_INT 3
12507: EQUAL
12508: IFFALSE 12522
// SayRadio ( Powell , DP-2a-BaseCaptured ) ;
12510: LD_EXP 12
12514: PPUSH
12515: LD_STRING DP-2a-BaseCaptured
12517: PPUSH
12518: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3-BaseCaptured ) ;
12522: LD_EXP 9
12526: PPUSH
12527: LD_STRING D
12529: PUSH
12530: LD_STRING I
12532: PUSH
12533: LD_STRING J
12535: PUSH
12536: LD_STRING S
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: LIST
12543: PUSH
12544: LD_EXP 25
12548: ARRAY
12549: STR
12550: PUSH
12551: LD_STRING -3-BaseCaptured
12553: STR
12554: PPUSH
12555: CALL_OW 88
// end ; DialogueOff ;
12559: CALL_OW 7
// InGameOff ;
12563: CALL_OW 9
// ChangeMissionObjectives ( O2 ) ;
12567: LD_STRING O2
12569: PPUSH
12570: CALL_OW 337
// for i in UnitFilter ( ruOutpost , [ f_type , unit_building ] ) do
12574: LD_ADDR_VAR 0 1
12578: PUSH
12579: LD_EXP 14
12583: PPUSH
12584: LD_INT 21
12586: PUSH
12587: LD_INT 3
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: PPUSH
12594: CALL_OW 72
12598: PUSH
12599: FOR_IN
12600: IFFALSE 12616
// SetSide ( i , 1 ) ;
12602: LD_VAR 0 1
12606: PPUSH
12607: LD_INT 1
12609: PPUSH
12610: CALL_OW 235
12614: GO 12599
12616: POP
12617: POP
// baseCaptured := true ;
12618: LD_ADDR_EXP 17
12622: PUSH
12623: LD_INT 1
12625: ST_TO_ADDR
// wait ( 0 0$35 ) ;
12626: LD_INT 1225
12628: PPUSH
12629: CALL_OW 67
// PrepareReinforcements ;
12633: CALL 9547 0 0
// end ;
12637: PPOPN 1
12639: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 167 , 197 , 20 ] ] ) > 3 do
12640: LD_INT 22
12642: PUSH
12643: LD_INT 3
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: LD_INT 92
12652: PUSH
12653: LD_INT 167
12655: PUSH
12656: LD_INT 197
12658: PUSH
12659: LD_INT 20
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: PPUSH
12672: CALL_OW 69
12676: PUSH
12677: LD_INT 3
12679: GREATER
12680: IFFALSE 12697
12682: GO 12684
12684: DISABLE
// SayRadio ( Powell , DP-RuAttack ) ;
12685: LD_EXP 12
12689: PPUSH
12690: LD_STRING DP-RuAttack
12692: PPUSH
12693: CALL_OW 94
12697: END
// every 0 0$2 trigger not debug and SeeXY ( 1 , 168 , 74 ) and GetEnvironmentType ( 168 , 72 ) do
12698: LD_EXP 1
12702: NOT
12703: PUSH
12704: LD_INT 1
12706: PPUSH
12707: LD_INT 168
12709: PPUSH
12710: LD_INT 74
12712: PPUSH
12713: CALL_OW 293
12717: AND
12718: PUSH
12719: LD_INT 168
12721: PPUSH
12722: LD_INT 72
12724: PPUSH
12725: CALL_OW 553
12729: AND
12730: IFFALSE 12782
12732: GO 12734
12734: DISABLE
// begin CenterOnXY ( 168 , 72 ) ;
12735: LD_INT 168
12737: PPUSH
12738: LD_INT 72
12740: PPUSH
12741: CALL_OW 84
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Blockade ) ;
12745: LD_EXP 9
12749: PPUSH
12750: LD_STRING D
12752: PUSH
12753: LD_STRING I
12755: PUSH
12756: LD_STRING J
12758: PUSH
12759: LD_STRING S
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: LIST
12766: PUSH
12767: LD_EXP 25
12771: ARRAY
12772: STR
12773: PUSH
12774: LD_STRING -1-Blockade
12776: STR
12777: PPUSH
12778: CALL_OW 88
// end ;
12782: END
// every 0 0$2 trigger GameType = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 4 ] ] ) do
12783: LD_EXP 2
12787: PUSH
12788: LD_INT 1
12790: EQUAL
12791: PUSH
12792: LD_INT 22
12794: PUSH
12795: LD_INT 1
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: PUSH
12802: LD_INT 101
12804: PUSH
12805: LD_INT 4
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: PPUSH
12816: CALL_OW 69
12820: AND
12821: IFFALSE 13353
12823: GO 12825
12825: DISABLE
// begin ChangeSideFog ( 4 , 1 ) ;
12826: LD_INT 4
12828: PPUSH
12829: LD_INT 1
12831: PPUSH
12832: CALL_OW 343
// DialogueOn ;
12836: CALL_OW 6
// CenterNowOnUnits ( allyCommander ) ;
12840: LD_EXP 11
12844: PPUSH
12845: CALL_OW 87
// SayRadio ( allyCommander , DM-1-Contact ) ;
12849: LD_EXP 11
12853: PPUSH
12854: LD_STRING DM-1-Contact
12856: PPUSH
12857: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Contact ) ;
12861: LD_EXP 9
12865: PPUSH
12866: LD_STRING D
12868: PUSH
12869: LD_STRING I
12871: PUSH
12872: LD_STRING J
12874: PUSH
12875: LD_STRING S
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: LIST
12882: PUSH
12883: LD_EXP 25
12887: ARRAY
12888: STR
12889: PUSH
12890: LD_STRING -1-Contact
12892: STR
12893: PPUSH
12894: CALL_OW 88
// if commander = 1 then
12898: LD_EXP 25
12902: PUSH
12903: LD_INT 1
12905: EQUAL
12906: IFFALSE 13038
// begin SayRadio ( allyCommander , DM-2-Contact ) ;
12908: LD_EXP 11
12912: PPUSH
12913: LD_STRING DM-2-Contact
12915: PPUSH
12916: CALL_OW 94
// Say ( playerCommander , DI-2-Contact ) ;
12920: LD_EXP 9
12924: PPUSH
12925: LD_STRING DI-2-Contact
12927: PPUSH
12928: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
12932: LD_INT 22
12934: PUSH
12935: LD_INT 8
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PUSH
12942: LD_INT 21
12944: PUSH
12945: LD_INT 1
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: PPUSH
12956: CALL_OW 69
12960: PUSH
12961: LD_INT 8
12963: PPUSH
12964: LD_INT 1
12966: PPUSH
12967: CALL_OW 81
12971: PUSH
12972: LD_INT 2
12974: EQUAL
12975: AND
12976: IFFALSE 13002
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
12978: LD_EXP 11
12982: PPUSH
12983: LD_STRING DM-3-Contact
12985: PPUSH
12986: CALL_OW 94
// Say ( playerCommander , DI-3-Contact ) ;
12990: LD_EXP 9
12994: PPUSH
12995: LD_STRING DI-3-Contact
12997: PPUSH
12998: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13002: LD_EXP 11
13006: PPUSH
13007: LD_STRING DM-4-Contact
13009: PPUSH
13010: CALL_OW 94
// Say ( playerCommander , DI-4-Contact ) ;
13014: LD_EXP 9
13018: PPUSH
13019: LD_STRING DI-4-Contact
13021: PPUSH
13022: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13026: LD_EXP 11
13030: PPUSH
13031: LD_STRING DM-5-Contact
13033: PPUSH
13034: CALL_OW 94
// end ; if commander = 2 then
13038: LD_EXP 25
13042: PUSH
13043: LD_INT 2
13045: EQUAL
13046: IFFALSE 13178
// begin SayRadio ( allyCommander , DM-2c-Contact ) ;
13048: LD_EXP 11
13052: PPUSH
13053: LD_STRING DM-2c-Contact
13055: PPUSH
13056: CALL_OW 94
// Say ( playerCommander , DJ-2-Contact ) ;
13060: LD_EXP 9
13064: PPUSH
13065: LD_STRING DJ-2-Contact
13067: PPUSH
13068: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13072: LD_INT 22
13074: PUSH
13075: LD_INT 8
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PUSH
13082: LD_INT 21
13084: PUSH
13085: LD_INT 1
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: PPUSH
13096: CALL_OW 69
13100: PUSH
13101: LD_INT 8
13103: PPUSH
13104: LD_INT 1
13106: PPUSH
13107: CALL_OW 81
13111: PUSH
13112: LD_INT 2
13114: EQUAL
13115: AND
13116: IFFALSE 13142
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13118: LD_EXP 11
13122: PPUSH
13123: LD_STRING DM-3-Contact
13125: PPUSH
13126: CALL_OW 94
// Say ( playerCommander , DJ-3-Contact ) ;
13130: LD_EXP 9
13134: PPUSH
13135: LD_STRING DJ-3-Contact
13137: PPUSH
13138: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13142: LD_EXP 11
13146: PPUSH
13147: LD_STRING DM-4-Contact
13149: PPUSH
13150: CALL_OW 94
// Say ( playerCommander , DJ-4-Contact ) ;
13154: LD_EXP 9
13158: PPUSH
13159: LD_STRING DJ-4-Contact
13161: PPUSH
13162: CALL_OW 88
// SayRadio ( allyCommander , DM-5a-Contact ) ;
13166: LD_EXP 11
13170: PPUSH
13171: LD_STRING DM-5a-Contact
13173: PPUSH
13174: CALL_OW 94
// end ; if commander = 3 then
13178: LD_EXP 25
13182: PUSH
13183: LD_INT 3
13185: EQUAL
13186: IFFALSE 13342
// begin SayRadio ( allyCommander , DM-2a-Contact ) ;
13188: LD_EXP 11
13192: PPUSH
13193: LD_STRING DM-2a-Contact
13195: PPUSH
13196: CALL_OW 94
// Say ( playerCommander , DS-2a-Contact ) ;
13200: LD_EXP 9
13204: PPUSH
13205: LD_STRING DS-2a-Contact
13207: PPUSH
13208: CALL_OW 88
// SayRadio ( allyCommander , DM-2b-Contact ) ;
13212: LD_EXP 11
13216: PPUSH
13217: LD_STRING DM-2b-Contact
13219: PPUSH
13220: CALL_OW 94
// Say ( playerCommander , DS-2b-Contact ) ;
13224: LD_EXP 9
13228: PPUSH
13229: LD_STRING DS-2b-Contact
13231: PPUSH
13232: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13236: LD_INT 22
13238: PUSH
13239: LD_INT 8
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: PUSH
13246: LD_INT 21
13248: PUSH
13249: LD_INT 1
13251: PUSH
13252: EMPTY
13253: LIST
13254: LIST
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: PPUSH
13260: CALL_OW 69
13264: PUSH
13265: LD_INT 8
13267: PPUSH
13268: LD_INT 1
13270: PPUSH
13271: CALL_OW 81
13275: PUSH
13276: LD_INT 2
13278: EQUAL
13279: AND
13280: IFFALSE 13306
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13282: LD_EXP 11
13286: PPUSH
13287: LD_STRING DM-3-Contact
13289: PPUSH
13290: CALL_OW 94
// Say ( playerCommander , DS-3-Contact ) ;
13294: LD_EXP 9
13298: PPUSH
13299: LD_STRING DS-3-Contact
13301: PPUSH
13302: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13306: LD_EXP 11
13310: PPUSH
13311: LD_STRING DM-4-Contact
13313: PPUSH
13314: CALL_OW 94
// Say ( playerCommander , DS-4-Contact ) ;
13318: LD_EXP 9
13322: PPUSH
13323: LD_STRING DS-4-Contact
13325: PPUSH
13326: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13330: LD_EXP 11
13334: PPUSH
13335: LD_STRING DM-5-Contact
13337: PPUSH
13338: CALL_OW 94
// end ; DialogueOff ;
13342: CALL_OW 7
// ChangeMissionObjectives ( O3 ) ;
13346: LD_STRING O3
13348: PPUSH
13349: CALL_OW 337
// end ;
13353: END
// every 0 0$10 trigger GameType = 1 and legDestCounter >= [ 15 , 20 , 25 ] [ Difficulty ] and FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) >= 5 do var time , sib , sources , i ;
13354: LD_EXP 2
13358: PUSH
13359: LD_INT 1
13361: EQUAL
13362: PUSH
13363: LD_EXP 18
13367: PUSH
13368: LD_INT 15
13370: PUSH
13371: LD_INT 20
13373: PUSH
13374: LD_INT 25
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: LIST
13381: PUSH
13382: LD_OWVAR 67
13386: ARRAY
13387: GREATEREQUAL
13388: AND
13389: PUSH
13390: LD_INT 22
13392: PUSH
13393: LD_INT 8
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PUSH
13400: LD_INT 30
13402: PUSH
13403: LD_INT 1
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: PPUSH
13414: CALL_OW 69
13418: AND
13419: PUSH
13420: LD_INT 22
13422: PUSH
13423: LD_INT 8
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PUSH
13430: LD_INT 21
13432: PUSH
13433: LD_INT 3
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PPUSH
13444: CALL_OW 69
13448: PUSH
13449: LD_INT 5
13451: GREATEREQUAL
13452: AND
13453: IFFALSE 13976
13455: GO 13457
13457: DISABLE
13458: LD_INT 0
13460: PPUSH
13461: PPUSH
13462: PPUSH
13463: PPUSH
// begin DialogueOn ;
13464: CALL_OW 6
// SayRadio ( Farmer , DF-1-Leg ) ;
13468: LD_EXP 13
13472: PPUSH
13473: LD_STRING DF-1-Leg
13475: PPUSH
13476: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Leg ) ;
13480: LD_EXP 9
13484: PPUSH
13485: LD_STRING D
13487: PUSH
13488: LD_STRING I
13490: PUSH
13491: LD_STRING J
13493: PUSH
13494: LD_STRING S
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: LIST
13501: PUSH
13502: LD_EXP 25
13506: ARRAY
13507: STR
13508: PUSH
13509: LD_STRING -1-Leg
13511: STR
13512: PPUSH
13513: CALL_OW 88
// SayRadio ( Farmer , DF-2-Leg ) ;
13517: LD_EXP 13
13521: PPUSH
13522: LD_STRING DF-2-Leg
13524: PPUSH
13525: CALL_OW 94
// DialogueOff ;
13529: CALL_OW 7
// case Query ( QLegionOffer ) of 1 :
13533: LD_STRING QLegionOffer
13535: PPUSH
13536: CALL_OW 97
13540: PUSH
13541: LD_INT 1
13543: DOUBLE
13544: EQUAL
13545: IFTRUE 13549
13547: GO 13552
13549: POP
// ; 2 :
13550: GO 13566
13552: LD_INT 2
13554: DOUBLE
13555: EQUAL
13556: IFTRUE 13560
13558: GO 13565
13560: POP
// exit ; end ;
13561: GO 13976
13563: GO 13566
13565: POP
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-Leg ) ;
13566: LD_EXP 9
13570: PPUSH
13571: LD_STRING D
13573: PUSH
13574: LD_STRING I
13576: PUSH
13577: LD_STRING J
13579: PUSH
13580: LD_STRING S
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: LIST
13587: PUSH
13588: LD_EXP 25
13592: ARRAY
13593: STR
13594: PUSH
13595: LD_STRING -2-Leg
13597: STR
13598: PPUSH
13599: CALL_OW 88
// legOfferAccepted := true ;
13603: LD_ADDR_EXP 20
13607: PUSH
13608: LD_INT 1
13610: ST_TO_ADDR
// SetAreaMapShow ( legOfferArea , 1 ) ;
13611: LD_INT 21
13613: PPUSH
13614: LD_INT 1
13616: PPUSH
13617: CALL_OW 424
// CenterOnXY ( 190 , 227 ) ;
13621: LD_INT 190
13623: PPUSH
13624: LD_INT 227
13626: PPUSH
13627: CALL_OW 84
// time := [ 8 8$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
13631: LD_ADDR_VAR 0 1
13635: PUSH
13636: LD_INT 16800
13638: PUSH
13639: LD_INT 14700
13641: PUSH
13642: LD_INT 12600
13644: PUSH
13645: EMPTY
13646: LIST
13647: LIST
13648: LIST
13649: PUSH
13650: LD_OWVAR 67
13654: ARRAY
13655: ST_TO_ADDR
// sib := 100 ;
13656: LD_ADDR_VAR 0 2
13660: PUSH
13661: LD_INT 100
13663: ST_TO_ADDR
// disableGlobalTimer := true ;
13664: LD_ADDR_EXP 4
13668: PUSH
13669: LD_INT 1
13671: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13672: LD_INT 35
13674: PPUSH
13675: CALL_OW 67
// time := time - 0 0$1 ;
13679: LD_ADDR_VAR 0 1
13683: PUSH
13684: LD_VAR 0 1
13688: PUSH
13689: LD_INT 35
13691: MINUS
13692: ST_TO_ADDR
// sources := GetResourceArea ( legOfferArea , mat_siberit ) ;
13693: LD_ADDR_VAR 0 3
13697: PUSH
13698: LD_INT 21
13700: PPUSH
13701: LD_INT 3
13703: PPUSH
13704: CALL_OW 287
13708: ST_TO_ADDR
// display_strings := [ #SkrTime , tick , #Skr-LegOffer , sib , time ] ;
13709: LD_ADDR_OWVAR 47
13713: PUSH
13714: LD_STRING #SkrTime
13716: PUSH
13717: LD_OWVAR 1
13721: PUSH
13722: LD_STRING #Skr-LegOffer
13724: PUSH
13725: LD_VAR 0 2
13729: PUSH
13730: LD_VAR 0 1
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: ST_TO_ADDR
// if sources then
13742: LD_VAR 0 3
13746: IFFALSE 13778
// begin sib := sib - sources * 10 ;
13748: LD_ADDR_VAR 0 2
13752: PUSH
13753: LD_VAR 0 2
13757: PUSH
13758: LD_VAR 0 3
13762: PUSH
13763: LD_INT 10
13765: MUL
13766: MINUS
13767: ST_TO_ADDR
// EraseResourceArea ( legOfferArea , mat_siberit ) ;
13768: LD_INT 21
13770: PPUSH
13771: LD_INT 3
13773: PPUSH
13774: CALL_OW 286
// end ; until time = 0 0$00 or sib <= 0 or not FilterAllUnits ( [ f_side , 8 ] ) ;
13778: LD_VAR 0 1
13782: PUSH
13783: LD_INT 0
13785: EQUAL
13786: PUSH
13787: LD_VAR 0 2
13791: PUSH
13792: LD_INT 0
13794: LESSEQUAL
13795: OR
13796: PUSH
13797: LD_INT 22
13799: PUSH
13800: LD_INT 8
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: PPUSH
13807: CALL_OW 69
13811: NOT
13812: OR
13813: IFFALSE 13672
// SetAreaMapShow ( legOfferArea , 0 ) ;
13815: LD_INT 21
13817: PPUSH
13818: LD_INT 0
13820: PPUSH
13821: CALL_OW 424
// disableGlobalTimer := false ;
13825: LD_ADDR_EXP 4
13829: PUSH
13830: LD_INT 0
13832: ST_TO_ADDR
// if sib <= 0 then
13833: LD_VAR 0 2
13837: PUSH
13838: LD_INT 0
13840: LESSEQUAL
13841: IFFALSE 13957
// begin legChangeSide := true ;
13843: LD_ADDR_EXP 21
13847: PUSH
13848: LD_INT 1
13850: ST_TO_ADDR
// SayRadio ( Farmer , DF-4y-Leg ) ;
13851: LD_EXP 13
13855: PPUSH
13856: LD_STRING DF-4y-Leg
13858: PPUSH
13859: CALL_OW 94
// ChangeMissionObjectives ( O3a ) ;
13863: LD_STRING O3a
13865: PPUSH
13866: CALL_OW 337
// ChangeSideFog ( 8 , 1 ) ;
13870: LD_INT 8
13872: PPUSH
13873: LD_INT 1
13875: PPUSH
13876: CALL_OW 343
// SetAttitude ( 8 , 1 , att_friend , true ) ;
13880: LD_INT 8
13882: PPUSH
13883: LD_INT 1
13885: PPUSH
13886: LD_INT 1
13888: PPUSH
13889: LD_INT 1
13891: PPUSH
13892: CALL_OW 80
// SetAttitude ( 8 , 4 , att_friend , true ) ;
13896: LD_INT 8
13898: PPUSH
13899: LD_INT 4
13901: PPUSH
13902: LD_INT 1
13904: PPUSH
13905: LD_INT 1
13907: PPUSH
13908: CALL_OW 80
// SetAttitude ( 8 , 6 , att_enemy , true ) ;
13912: LD_INT 8
13914: PPUSH
13915: LD_INT 6
13917: PPUSH
13918: LD_INT 2
13920: PPUSH
13921: LD_INT 1
13923: PPUSH
13924: CALL_OW 80
// SetAttitude ( 8 , 3 , att_enemy , true ) ;
13928: LD_INT 8
13930: PPUSH
13931: LD_INT 3
13933: PPUSH
13934: LD_INT 2
13936: PPUSH
13937: LD_INT 1
13939: PPUSH
13940: CALL_OW 80
// wait ( 0 0$30 ) ;
13944: LD_INT 1050
13946: PPUSH
13947: CALL_OW 67
// PrepareLegionReinforcements ;
13951: CALL 10247 0 0
// end else
13955: GO 13976
// begin ChangeMissionObjectives ( O3a ) ;
13957: LD_STRING O3a
13959: PPUSH
13960: CALL_OW 337
// SayRadio ( Farmer , DF-4n-Leg ) ;
13964: LD_EXP 13
13968: PPUSH
13969: LD_STRING DF-4n-Leg
13971: PPUSH
13972: CALL_OW 94
// end ; end ;
13976: PPOPN 4
13978: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 and GetAttitude ( 8 , 1 ) = att_enemy do
13979: LD_INT 22
13981: PUSH
13982: LD_INT 8
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: PUSH
13989: LD_INT 21
13991: PUSH
13992: LD_INT 1
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: PPUSH
14003: CALL_OW 69
14007: PUSH
14008: LD_INT 0
14010: EQUAL
14011: PUSH
14012: LD_INT 8
14014: PPUSH
14015: LD_INT 1
14017: PPUSH
14018: CALL_OW 81
14022: PUSH
14023: LD_INT 2
14025: EQUAL
14026: AND
14027: IFFALSE 14039
14029: GO 14031
14031: DISABLE
// ChangeMissionObjectives ( O3a ) ;
14032: LD_STRING O3a
14034: PPUSH
14035: CALL_OW 337
14039: END
// every 0 0$1 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) = 0 do
14040: LD_EXP 2
14044: PUSH
14045: LD_INT 1
14047: EQUAL
14048: PUSH
14049: LD_EXP 3
14053: AND
14054: PUSH
14055: LD_INT 22
14057: PUSH
14058: LD_INT 3
14060: PUSH
14061: EMPTY
14062: LIST
14063: LIST
14064: PUSH
14065: LD_INT 21
14067: PUSH
14068: LD_INT 1
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: PPUSH
14079: CALL_OW 69
14083: PUSH
14084: LD_INT 0
14086: EQUAL
14087: AND
14088: PUSH
14089: LD_INT 22
14091: PUSH
14092: LD_INT 3
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: PUSH
14099: LD_INT 30
14101: PUSH
14102: LD_INT 1
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PPUSH
14113: CALL_OW 69
14117: PUSH
14118: LD_INT 0
14120: EQUAL
14121: AND
14122: IFFALSE 14360
14124: GO 14126
14126: DISABLE
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Win ) ;
14127: LD_EXP 9
14131: PPUSH
14132: LD_STRING D
14134: PUSH
14135: LD_STRING I
14137: PUSH
14138: LD_STRING J
14140: PUSH
14141: LD_STRING S
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: LIST
14148: PUSH
14149: LD_EXP 25
14153: ARRAY
14154: STR
14155: PUSH
14156: LD_STRING -1-Win
14158: STR
14159: PPUSH
14160: CALL_OW 88
// if tick >= [ 150 150$0 , 130 130$0 , 110 110$0 ] [ Difficulty ] then
14164: LD_OWVAR 1
14168: PUSH
14169: LD_INT 315000
14171: PUSH
14172: LD_INT 273000
14174: PUSH
14175: LD_INT 231000
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: LIST
14182: PUSH
14183: LD_OWVAR 67
14187: ARRAY
14188: GREATEREQUAL
14189: IFFALSE 14204
// AddMedal ( med1 , - 1 ) else
14191: LD_STRING med1
14193: PPUSH
14194: LD_INT 1
14196: NEG
14197: PPUSH
14198: CALL_OW 101
14202: GO 14214
// AddMedal ( med1 , 1 ) ;
14204: LD_STRING med1
14206: PPUSH
14207: LD_INT 1
14209: PPUSH
14210: CALL_OW 101
// if allyDestCounter >= [ 20 , 15 , 10 ] [ Difficulty ] then
14214: LD_EXP 22
14218: PUSH
14219: LD_INT 20
14221: PUSH
14222: LD_INT 15
14224: PUSH
14225: LD_INT 10
14227: PUSH
14228: EMPTY
14229: LIST
14230: LIST
14231: LIST
14232: PUSH
14233: LD_OWVAR 67
14237: ARRAY
14238: GREATEREQUAL
14239: IFFALSE 14254
// AddMedal ( med2 , - 1 ) else
14241: LD_STRING med2
14243: PPUSH
14244: LD_INT 1
14246: NEG
14247: PPUSH
14248: CALL_OW 101
14252: GO 14264
// AddMedal ( med2 , 1 ) ;
14254: LD_STRING med2
14256: PPUSH
14257: LD_INT 1
14259: PPUSH
14260: CALL_OW 101
// if GetAttitude ( 8 , 1 ) = att_friend then
14264: LD_INT 8
14266: PPUSH
14267: LD_INT 1
14269: PPUSH
14270: CALL_OW 81
14274: PUSH
14275: LD_INT 1
14277: EQUAL
14278: IFFALSE 14292
// AddMedal ( med3 , 1 ) else
14280: LD_STRING med3
14282: PPUSH
14283: LD_INT 1
14285: PPUSH
14286: CALL_OW 101
14290: GO 14349
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 then
14292: LD_INT 22
14294: PUSH
14295: LD_INT 8
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PUSH
14302: LD_INT 21
14304: PUSH
14305: LD_INT 1
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PPUSH
14316: CALL_OW 69
14320: PUSH
14321: LD_INT 0
14323: EQUAL
14324: IFFALSE 14338
// AddMedal ( med3 , 2 ) else
14326: LD_STRING med3
14328: PPUSH
14329: LD_INT 2
14331: PPUSH
14332: CALL_OW 101
14336: GO 14349
// AddMedal ( med3 , - 1 ) ;
14338: LD_STRING med3
14340: PPUSH
14341: LD_INT 1
14343: NEG
14344: PPUSH
14345: CALL_OW 101
// GiveMedals ( MAIN ) ;
14349: LD_STRING MAIN
14351: PPUSH
14352: CALL_OW 102
// YouWin ;
14356: CALL_OW 103
// end ;
14360: END
// every 10 trigger GameType = 1 and staticMines and FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) do var i , j , tmp , x , y ;
14361: LD_EXP 2
14365: PUSH
14366: LD_INT 1
14368: EQUAL
14369: PUSH
14370: LD_EXP 16
14374: AND
14375: PUSH
14376: LD_INT 20
14378: PPUSH
14379: LD_INT 81
14381: PUSH
14382: LD_INT 8
14384: PUSH
14385: EMPTY
14386: LIST
14387: LIST
14388: PPUSH
14389: CALL_OW 70
14393: AND
14394: IFFALSE 14673
14396: GO 14398
14398: DISABLE
14399: LD_INT 0
14401: PPUSH
14402: PPUSH
14403: PPUSH
14404: PPUSH
14405: PPUSH
// begin enable ;
14406: ENABLE
// tmp := FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) ;
14407: LD_ADDR_VAR 0 3
14411: PUSH
14412: LD_INT 20
14414: PPUSH
14415: LD_INT 81
14417: PUSH
14418: LD_INT 8
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: PPUSH
14425: CALL_OW 70
14429: ST_TO_ADDR
// if not tmp then
14430: LD_VAR 0 3
14434: NOT
14435: IFFALSE 14439
// exit ;
14437: GO 14673
// for i in tmp do
14439: LD_ADDR_VAR 0 1
14443: PUSH
14444: LD_VAR 0 3
14448: PUSH
14449: FOR_IN
14450: IFFALSE 14671
// begin x := GetX ( i ) ;
14452: LD_ADDR_VAR 0 4
14456: PUSH
14457: LD_VAR 0 1
14461: PPUSH
14462: CALL_OW 250
14466: ST_TO_ADDR
// y := GetY ( i ) ;
14467: LD_ADDR_VAR 0 5
14471: PUSH
14472: LD_VAR 0 1
14476: PPUSH
14477: CALL_OW 251
14481: ST_TO_ADDR
// if MineAtPos ( x , y ) then
14482: LD_VAR 0 4
14486: PPUSH
14487: LD_VAR 0 5
14491: PPUSH
14492: CALL_OW 458
14496: IFFALSE 14669
// begin LaunchMineAtPos ( x , y , 8 ) ;
14498: LD_VAR 0 4
14502: PPUSH
14503: LD_VAR 0 5
14507: PPUSH
14508: LD_INT 8
14510: PPUSH
14511: CALL_OW 456
// if not dialogueMineDetected then
14515: LD_EXP 28
14519: NOT
14520: IFFALSE 14581
// begin CenterNowOnXY ( x , y ) ;
14522: LD_VAR 0 4
14526: PPUSH
14527: LD_VAR 0 5
14531: PPUSH
14532: CALL_OW 86
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Mine ) ;
14536: LD_EXP 9
14540: PPUSH
14541: LD_STRING D
14543: PUSH
14544: LD_STRING I
14546: PUSH
14547: LD_STRING J
14549: PUSH
14550: LD_STRING S
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: LIST
14557: PUSH
14558: LD_EXP 25
14562: ARRAY
14563: STR
14564: PUSH
14565: LD_STRING -1-Mine
14567: STR
14568: PPUSH
14569: CALL_OW 88
// dialogueMineDetected := true ;
14573: LD_ADDR_EXP 28
14577: PUSH
14578: LD_INT 1
14580: ST_TO_ADDR
// end ; for j = 1 to staticMines do
14581: LD_ADDR_VAR 0 2
14585: PUSH
14586: DOUBLE
14587: LD_INT 1
14589: DEC
14590: ST_TO_ADDR
14591: LD_EXP 16
14595: PUSH
14596: FOR_TO
14597: IFFALSE 14667
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
14599: LD_EXP 16
14603: PUSH
14604: LD_VAR 0 2
14608: ARRAY
14609: PUSH
14610: LD_INT 1
14612: ARRAY
14613: PUSH
14614: LD_VAR 0 4
14618: EQUAL
14619: PUSH
14620: LD_EXP 16
14624: PUSH
14625: LD_VAR 0 2
14629: ARRAY
14630: PUSH
14631: LD_INT 2
14633: ARRAY
14634: PUSH
14635: LD_VAR 0 5
14639: EQUAL
14640: AND
14641: IFFALSE 14665
// begin staticMines := Delete ( staticMines , j ) ;
14643: LD_ADDR_EXP 16
14647: PUSH
14648: LD_EXP 16
14652: PPUSH
14653: LD_VAR 0 2
14657: PPUSH
14658: CALL_OW 3
14662: ST_TO_ADDR
// break ;
14663: GO 14667
// end ;
14665: GO 14596
14667: POP
14668: POP
// end ; end ;
14669: GO 14449
14671: POP
14672: POP
// end ;
14673: PPOPN 5
14675: END
// every 30 30$00 + 50 50$00 trigger GameType = 1 and game and sibBombAllowed and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_btype , b_factory ] ) do var bomb , e ;
14676: LD_EXP 2
14680: PUSH
14681: LD_INT 1
14683: EQUAL
14684: PUSH
14685: LD_EXP 3
14689: AND
14690: PUSH
14691: LD_EXP 23
14695: AND
14696: PUSH
14697: LD_EXP 45
14701: PUSH
14702: LD_EXP 7
14706: ARRAY
14707: PPUSH
14708: LD_INT 30
14710: PUSH
14711: LD_INT 3
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PPUSH
14718: CALL_OW 72
14722: AND
14723: IFFALSE 14927
14725: GO 14727
14727: DISABLE
14728: LD_INT 0
14730: PPUSH
14731: PPUSH
// begin enable ;
14732: ENABLE
// MC_InsertProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
14733: LD_EXP 7
14737: PPUSH
14738: LD_INT 23
14740: PUSH
14741: LD_INT 3
14743: PUSH
14744: LD_INT 3
14746: PUSH
14747: LD_INT 48
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: PUSH
14756: EMPTY
14757: LIST
14758: PPUSH
14759: CALL 79503 0 2
// repeat wait ( 0 0$1 ) ;
14763: LD_INT 35
14765: PPUSH
14766: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14770: LD_INT 22
14772: PUSH
14773: LD_INT 3
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: PUSH
14780: LD_INT 34
14782: PUSH
14783: LD_INT 48
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: PPUSH
14794: CALL_OW 69
14798: IFFALSE 14763
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14800: LD_ADDR_VAR 0 1
14804: PUSH
14805: LD_INT 22
14807: PUSH
14808: LD_INT 3
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: PUSH
14815: LD_INT 34
14817: PUSH
14818: LD_INT 48
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PPUSH
14829: CALL_OW 69
14833: ST_TO_ADDR
// e := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) ;
14834: LD_ADDR_VAR 0 2
14838: PUSH
14839: LD_INT 81
14841: PUSH
14842: LD_INT 3
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: LD_INT 21
14851: PUSH
14852: LD_INT 3
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: PPUSH
14863: CALL_OW 69
14867: ST_TO_ADDR
// if e then
14868: LD_VAR 0 2
14872: IFFALSE 14898
// e := NearestUnitToUnit ( e , bomb [ 1 ] ) ;
14874: LD_ADDR_VAR 0 2
14878: PUSH
14879: LD_VAR 0 2
14883: PPUSH
14884: LD_VAR 0 1
14888: PUSH
14889: LD_INT 1
14891: ARRAY
14892: PPUSH
14893: CALL_OW 74
14897: ST_TO_ADDR
// ComAttackPlace ( bomb , GetX ( e ) , GetY ( e ) ) ;
14898: LD_VAR 0 1
14902: PPUSH
14903: LD_VAR 0 2
14907: PPUSH
14908: CALL_OW 250
14912: PPUSH
14913: LD_VAR 0 2
14917: PPUSH
14918: CALL_OW 251
14922: PPUSH
14923: CALL_OW 116
// end ;
14927: PPOPN 2
14929: END
// every 0 0$2 trigger Difficulty > 1 and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) and GameType = 1 and game and GetTech ( tech_Behemoth , 3 ) = state_researched do var tmp , i ;
14930: LD_OWVAR 67
14934: PUSH
14935: LD_INT 1
14937: GREATER
14938: PUSH
14939: LD_EXP 45
14943: PUSH
14944: LD_EXP 7
14948: ARRAY
14949: PPUSH
14950: LD_INT 25
14952: PUSH
14953: LD_INT 3
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: PPUSH
14960: CALL_OW 72
14964: AND
14965: PUSH
14966: LD_EXP 2
14970: PUSH
14971: LD_INT 1
14973: EQUAL
14974: AND
14975: PUSH
14976: LD_EXP 3
14980: AND
14981: PUSH
14982: LD_INT 23
14984: PPUSH
14985: LD_INT 3
14987: PPUSH
14988: CALL_OW 321
14992: PUSH
14993: LD_INT 2
14995: EQUAL
14996: AND
14997: IFFALSE 15124
14999: GO 15001
15001: DISABLE
15002: LD_INT 0
15004: PPUSH
15005: PPUSH
// begin tmp := UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) ;
15006: LD_ADDR_VAR 0 1
15010: PUSH
15011: LD_EXP 45
15015: PUSH
15016: LD_EXP 7
15020: ARRAY
15021: PPUSH
15022: LD_INT 25
15024: PUSH
15025: LD_INT 3
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PPUSH
15032: CALL_OW 72
15036: ST_TO_ADDR
// if not tmp then
15037: LD_VAR 0 1
15041: NOT
15042: IFFALSE 15046
// exit ;
15044: GO 15124
// for i in tmp do
15046: LD_ADDR_VAR 0 2
15050: PUSH
15051: LD_VAR 0 1
15055: PUSH
15056: FOR_IN
15057: IFFALSE 15103
// begin SetTag ( i , 29 ) ;
15059: LD_VAR 0 2
15063: PPUSH
15064: LD_INT 29
15066: PPUSH
15067: CALL_OW 109
// ComExitBuilding ( i ) ;
15071: LD_VAR 0 2
15075: PPUSH
15076: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , 97 , 133 , 0 ) ;
15080: LD_VAR 0 2
15084: PPUSH
15085: LD_INT 37
15087: PPUSH
15088: LD_INT 97
15090: PPUSH
15091: LD_INT 133
15093: PPUSH
15094: LD_INT 0
15096: PPUSH
15097: CALL_OW 230
// end ;
15101: GO 15056
15103: POP
15104: POP
// wait ( 1 1$00 ) ;
15105: LD_INT 2100
15107: PPUSH
15108: CALL_OW 67
// MC_Reset ( mc_rus_1 , 29 ) ;
15112: LD_EXP 7
15116: PPUSH
15117: LD_INT 29
15119: PPUSH
15120: CALL 59902 0 2
// end ;
15124: PPOPN 2
15126: END
// every 7 7$00 trigger GameType = 1 and GetBType ( HexInfo ( 84 , 128 ) ) = b_warehouse and GetSide ( HexInfo ( 84 , 128 ) ) = 3 do var veh , depot ;
15127: LD_EXP 2
15131: PUSH
15132: LD_INT 1
15134: EQUAL
15135: PUSH
15136: LD_INT 84
15138: PPUSH
15139: LD_INT 128
15141: PPUSH
15142: CALL_OW 428
15146: PPUSH
15147: CALL_OW 266
15151: PUSH
15152: LD_INT 1
15154: EQUAL
15155: AND
15156: PUSH
15157: LD_INT 84
15159: PPUSH
15160: LD_INT 128
15162: PPUSH
15163: CALL_OW 428
15167: PPUSH
15168: CALL_OW 255
15172: PUSH
15173: LD_INT 3
15175: EQUAL
15176: AND
15177: IFFALSE 15350
15179: GO 15181
15181: DISABLE
15182: LD_INT 0
15184: PPUSH
15185: PPUSH
// begin enable ;
15186: ENABLE
// depot := HexInfo ( 84 , 128 ) ;
15187: LD_ADDR_VAR 0 2
15191: PUSH
15192: LD_INT 84
15194: PPUSH
15195: LD_INT 128
15197: PPUSH
15198: CALL_OW 428
15202: ST_TO_ADDR
// uc_side := 3 ;
15203: LD_ADDR_OWVAR 20
15207: PUSH
15208: LD_INT 3
15210: ST_TO_ADDR
// uc_nation := 3 ;
15211: LD_ADDR_OWVAR 21
15215: PUSH
15216: LD_INT 3
15218: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay , 0 ) ;
15219: LD_INT 21
15221: PPUSH
15222: LD_INT 3
15224: PPUSH
15225: LD_INT 3
15227: PPUSH
15228: LD_INT 51
15230: PPUSH
15231: LD_INT 0
15233: PPUSH
15234: CALL 24172 0 5
// veh := CreateVehicle ;
15238: LD_ADDR_VAR 0 1
15242: PUSH
15243: CALL_OW 45
15247: ST_TO_ADDR
// PlaceUnitXY ( veh , 126 , 227 , false ) ;
15248: LD_VAR 0 1
15252: PPUSH
15253: LD_INT 126
15255: PPUSH
15256: LD_INT 227
15258: PPUSH
15259: LD_INT 0
15261: PPUSH
15262: CALL_OW 48
// SetCargo ( veh , mat_oil , 100 ) ;
15266: LD_VAR 0 1
15270: PPUSH
15271: LD_INT 2
15273: PPUSH
15274: LD_INT 100
15276: PPUSH
15277: CALL_OW 290
// ComGive ( veh , depot ) ;
15281: LD_VAR 0 1
15285: PPUSH
15286: LD_VAR 0 2
15290: PPUSH
15291: CALL_OW 161
// AddComMoveXY ( veh , 126 , 227 ) ;
15295: LD_VAR 0 1
15299: PPUSH
15300: LD_INT 126
15302: PPUSH
15303: LD_INT 227
15305: PPUSH
15306: CALL_OW 171
// wait ( 0 0$10 ) ;
15310: LD_INT 350
15312: PPUSH
15313: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15317: LD_INT 35
15319: PPUSH
15320: CALL_OW 67
// until IsAt ( veh , 126 , 227 ) ;
15324: LD_VAR 0 1
15328: PPUSH
15329: LD_INT 126
15331: PPUSH
15332: LD_INT 227
15334: PPUSH
15335: CALL_OW 307
15339: IFFALSE 15317
// RemoveUnit ( veh ) ;
15341: LD_VAR 0 1
15345: PPUSH
15346: CALL_OW 64
// end ;
15350: PPOPN 2
15352: END
// every 9 9$00 trigger GameType = 1 and outpostEscape and commander = 2 do var veh , depot ;
15353: LD_EXP 2
15357: PUSH
15358: LD_INT 1
15360: EQUAL
15361: PUSH
15362: LD_EXP 27
15366: AND
15367: PUSH
15368: LD_EXP 25
15372: PUSH
15373: LD_INT 2
15375: EQUAL
15376: AND
15377: IFFALSE 15569
15379: GO 15381
15381: DISABLE
15382: LD_INT 0
15384: PPUSH
15385: PPUSH
// begin enable ;
15386: ENABLE
// if tick >= [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] then
15387: LD_OWVAR 1
15391: PUSH
15392: LD_INT 105000
15394: PUSH
15395: LD_INT 84000
15397: PUSH
15398: LD_INT 63000
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: LIST
15405: PUSH
15406: LD_OWVAR 67
15410: ARRAY
15411: GREATEREQUAL
15412: IFFALSE 15415
// disable ;
15414: DISABLE
// uc_side := 4 ;
15415: LD_ADDR_OWVAR 20
15419: PUSH
15420: LD_INT 4
15422: ST_TO_ADDR
// uc_nation := 1 ;
15423: LD_ADDR_OWVAR 21
15427: PUSH
15428: LD_INT 1
15430: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 0 ) ;
15431: LD_INT 2
15433: PPUSH
15434: LD_INT 3
15436: PPUSH
15437: LD_INT 3
15439: PPUSH
15440: LD_INT 12
15442: PPUSH
15443: LD_INT 0
15445: PPUSH
15446: CALL 24172 0 5
// veh := CreateVehicle ;
15450: LD_ADDR_VAR 0 1
15454: PUSH
15455: CALL_OW 45
15459: ST_TO_ADDR
// PlaceUnitXY ( veh , 229 , 226 , false ) ;
15460: LD_VAR 0 1
15464: PPUSH
15465: LD_INT 229
15467: PPUSH
15468: LD_INT 226
15470: PPUSH
15471: LD_INT 0
15473: PPUSH
15474: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
15478: LD_VAR 0 1
15482: PPUSH
15483: LD_INT 1
15485: PPUSH
15486: LD_INT 100
15488: PPUSH
15489: CALL_OW 290
// AddComMoveToArea ( veh , ruOutpostArea ) ;
15493: LD_VAR 0 1
15497: PPUSH
15498: LD_INT 25
15500: PPUSH
15501: CALL_OW 173
// AddComUnload ( veh ) ;
15505: LD_VAR 0 1
15509: PPUSH
15510: CALL_OW 219
// AddComMoveXY ( veh , 229 , 226 ) ;
15514: LD_VAR 0 1
15518: PPUSH
15519: LD_INT 229
15521: PPUSH
15522: LD_INT 226
15524: PPUSH
15525: CALL_OW 171
// wait ( 0 0$10 ) ;
15529: LD_INT 350
15531: PPUSH
15532: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15536: LD_INT 35
15538: PPUSH
15539: CALL_OW 67
// until IsAt ( veh , 229 , 226 ) ;
15543: LD_VAR 0 1
15547: PPUSH
15548: LD_INT 229
15550: PPUSH
15551: LD_INT 226
15553: PPUSH
15554: CALL_OW 307
15558: IFFALSE 15536
// RemoveUnit ( veh ) ;
15560: LD_VAR 0 1
15564: PPUSH
15565: CALL_OW 64
// end ;
15569: PPOPN 2
15571: END
// every 15 15$00 trigger GameType = 1 and game and reinforceAllowed do var i , j , veh , tmp , amount ;
15572: LD_EXP 2
15576: PUSH
15577: LD_INT 1
15579: EQUAL
15580: PUSH
15581: LD_EXP 3
15585: AND
15586: PUSH
15587: LD_EXP 24
15591: AND
15592: IFFALSE 15925
15594: GO 15596
15596: DISABLE
15597: LD_INT 0
15599: PPUSH
15600: PPUSH
15601: PPUSH
15602: PPUSH
15603: PPUSH
// begin enable ;
15604: ENABLE
// tmp := [ ] ;
15605: LD_ADDR_VAR 0 4
15609: PUSH
15610: EMPTY
15611: ST_TO_ADDR
// if commander = 1 then
15612: LD_EXP 25
15616: PUSH
15617: LD_INT 1
15619: EQUAL
15620: IFFALSE 15632
// amount := 3 else
15622: LD_ADDR_VAR 0 5
15626: PUSH
15627: LD_INT 3
15629: ST_TO_ADDR
15630: GO 15640
// amount := 2 ;
15632: LD_ADDR_VAR 0 5
15636: PUSH
15637: LD_INT 2
15639: ST_TO_ADDR
// for i = 1 to amount do
15640: LD_ADDR_VAR 0 1
15644: PUSH
15645: DOUBLE
15646: LD_INT 1
15648: DEC
15649: ST_TO_ADDR
15650: LD_VAR 0 5
15654: PUSH
15655: FOR_TO
15656: IFFALSE 15820
// begin wait ( 0 0$5 ) ;
15658: LD_INT 175
15660: PPUSH
15661: CALL_OW 67
// for j = 1 to 3 do
15665: LD_ADDR_VAR 0 2
15669: PUSH
15670: DOUBLE
15671: LD_INT 1
15673: DEC
15674: ST_TO_ADDR
15675: LD_INT 3
15677: PUSH
15678: FOR_TO
15679: IFFALSE 15816
// begin uc_side := 4 ;
15681: LD_ADDR_OWVAR 20
15685: PUSH
15686: LD_INT 4
15688: ST_TO_ADDR
// uc_nation := 1 ;
15689: LD_ADDR_OWVAR 21
15693: PUSH
15694: LD_INT 1
15696: ST_TO_ADDR
// PrepareVehicle ( [ us_medium_tracked , us_morphling ] [ rand ( 1 , 2 ) ] , engine_siberite , control_computer , [ us_laser , us_double_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
15697: LD_INT 3
15699: PUSH
15700: LD_INT 5
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: LD_INT 1
15709: PPUSH
15710: LD_INT 2
15712: PPUSH
15713: CALL_OW 12
15717: ARRAY
15718: PPUSH
15719: LD_INT 3
15721: PPUSH
15722: LD_INT 3
15724: PPUSH
15725: LD_INT 9
15727: PUSH
15728: LD_INT 5
15730: PUSH
15731: LD_INT 7
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: LIST
15738: PUSH
15739: LD_INT 1
15741: PPUSH
15742: LD_INT 3
15744: PPUSH
15745: CALL_OW 12
15749: ARRAY
15750: PPUSH
15751: LD_INT 100
15753: PPUSH
15754: CALL 24172 0 5
// veh := CreateVehicle ;
15758: LD_ADDR_VAR 0 3
15762: PUSH
15763: CALL_OW 45
15767: ST_TO_ADDR
// tmp := tmp ^ veh ;
15768: LD_ADDR_VAR 0 4
15772: PUSH
15773: LD_VAR 0 4
15777: PUSH
15778: LD_VAR 0 3
15782: ADD
15783: ST_TO_ADDR
// PlaceUnitArea ( veh , westSpawn , false ) ;
15784: LD_VAR 0 3
15788: PPUSH
15789: LD_INT 22
15791: PPUSH
15792: LD_INT 0
15794: PPUSH
15795: CALL_OW 49
// ComMoveXY ( veh , 119 , 215 ) ;
15799: LD_VAR 0 3
15803: PPUSH
15804: LD_INT 119
15806: PPUSH
15807: LD_INT 215
15809: PPUSH
15810: CALL_OW 111
// end ;
15814: GO 15678
15816: POP
15817: POP
// end ;
15818: GO 15655
15820: POP
15821: POP
// wait ( 0 0$3 ) ;
15822: LD_INT 105
15824: PPUSH
15825: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15829: LD_INT 35
15831: PPUSH
15832: CALL_OW 67
// for i in tmp do
15836: LD_ADDR_VAR 0 1
15840: PUSH
15841: LD_VAR 0 4
15845: PUSH
15846: FOR_IN
15847: IFFALSE 15914
// if IsDead ( i ) then
15849: LD_VAR 0 1
15853: PPUSH
15854: CALL_OW 301
15858: IFFALSE 15878
// tmp := tmp diff i else
15860: LD_ADDR_VAR 0 4
15864: PUSH
15865: LD_VAR 0 4
15869: PUSH
15870: LD_VAR 0 1
15874: DIFF
15875: ST_TO_ADDR
15876: GO 15912
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) ;
15878: LD_VAR 0 1
15882: PPUSH
15883: LD_INT 81
15885: PUSH
15886: LD_INT 4
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: PPUSH
15893: CALL_OW 69
15897: PPUSH
15898: LD_VAR 0 1
15902: PPUSH
15903: CALL_OW 74
15907: PPUSH
15908: CALL_OW 115
15912: GO 15846
15914: POP
15915: POP
// until tmp = [ ] ;
15916: LD_VAR 0 4
15920: PUSH
15921: EMPTY
15922: EQUAL
15923: IFFALSE 15829
// end ;
15925: PPOPN 5
15927: END
// every 0 0$1 trigger GameType = 1 and game do var i , tmp ;
15928: LD_EXP 2
15932: PUSH
15933: LD_INT 1
15935: EQUAL
15936: PUSH
15937: LD_EXP 3
15941: AND
15942: IFFALSE 16043
15944: GO 15946
15946: DISABLE
15947: LD_INT 0
15949: PPUSH
15950: PPUSH
// begin enable ;
15951: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
15952: LD_ADDR_VAR 0 2
15956: PUSH
15957: LD_INT 3
15959: PUSH
15960: LD_INT 22
15962: PUSH
15963: LD_INT 1
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: LD_INT 32
15976: PUSH
15977: LD_INT 1
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PPUSH
15988: CALL_OW 69
15992: ST_TO_ADDR
// if tmp then
15993: LD_VAR 0 2
15997: IFFALSE 16043
// for i in tmp do
15999: LD_ADDR_VAR 0 1
16003: PUSH
16004: LD_VAR 0 2
16008: PUSH
16009: FOR_IN
16010: IFFALSE 16041
// if GetFuel ( i ) < 3 then
16012: LD_VAR 0 1
16016: PPUSH
16017: CALL_OW 261
16021: PUSH
16022: LD_INT 3
16024: LESS
16025: IFFALSE 16039
// SetFuel ( i , 3 ) ;
16027: LD_VAR 0 1
16031: PPUSH
16032: LD_INT 3
16034: PPUSH
16035: CALL_OW 240
16039: GO 16009
16041: POP
16042: POP
// end ;
16043: PPOPN 2
16045: END
// every 15 15$00 trigger game and GetAttitude ( 8 , 4 ) = att_enemy do var i , un , tmp ;
16046: LD_EXP 3
16050: PUSH
16051: LD_INT 8
16053: PPUSH
16054: LD_INT 4
16056: PPUSH
16057: CALL_OW 81
16061: PUSH
16062: LD_INT 2
16064: EQUAL
16065: AND
16066: IFFALSE 16276
16068: GO 16070
16070: DISABLE
16071: LD_INT 0
16073: PPUSH
16074: PPUSH
16075: PPUSH
// begin enable ;
16076: ENABLE
// tmp := [ ] ;
16077: LD_ADDR_VAR 0 3
16081: PUSH
16082: EMPTY
16083: ST_TO_ADDR
// for i = 1 to 4 do
16084: LD_ADDR_VAR 0 1
16088: PUSH
16089: DOUBLE
16090: LD_INT 1
16092: DEC
16093: ST_TO_ADDR
16094: LD_INT 4
16096: PUSH
16097: FOR_TO
16098: IFFALSE 16242
// begin uc_side := 8 ;
16100: LD_ADDR_OWVAR 20
16104: PUSH
16105: LD_INT 8
16107: ST_TO_ADDR
// uc_nation := nation_arabian ;
16108: LD_ADDR_OWVAR 21
16112: PUSH
16113: LD_INT 2
16115: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] , rand ( 60 , 80 ) ) ;
16116: LD_INT 11
16118: PPUSH
16119: LD_INT 1
16121: PPUSH
16122: LD_INT 5
16124: PPUSH
16125: LD_INT 24
16127: PUSH
16128: LD_INT 23
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: PUSH
16135: LD_INT 1
16137: PPUSH
16138: LD_INT 2
16140: PPUSH
16141: CALL_OW 12
16145: ARRAY
16146: PPUSH
16147: LD_INT 60
16149: PPUSH
16150: LD_INT 80
16152: PPUSH
16153: CALL_OW 12
16157: PPUSH
16158: CALL 24172 0 5
// un := CreateVehicle ;
16162: LD_ADDR_VAR 0 2
16166: PUSH
16167: CALL_OW 45
16171: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16172: LD_VAR 0 2
16176: PPUSH
16177: LD_INT 2
16179: PPUSH
16180: CALL_OW 233
// tmp := tmp ^ un ;
16184: LD_ADDR_VAR 0 3
16188: PUSH
16189: LD_VAR 0 3
16193: PUSH
16194: LD_VAR 0 2
16198: ADD
16199: ST_TO_ADDR
// PlaceUnitXY ( un , 88 , 2 , false ) ;
16200: LD_VAR 0 2
16204: PPUSH
16205: LD_INT 88
16207: PPUSH
16208: LD_INT 2
16210: PPUSH
16211: LD_INT 0
16213: PPUSH
16214: CALL_OW 48
// ComMoveXY ( un , 93 , 13 ) ;
16218: LD_VAR 0 2
16222: PPUSH
16223: LD_INT 93
16225: PPUSH
16226: LD_INT 13
16228: PPUSH
16229: CALL_OW 111
// wait ( 0 0$2 ) ;
16233: LD_INT 70
16235: PPUSH
16236: CALL_OW 67
// end ;
16240: GO 16097
16242: POP
16243: POP
// for i in tmp do
16244: LD_ADDR_VAR 0 1
16248: PUSH
16249: LD_VAR 0 3
16253: PUSH
16254: FOR_IN
16255: IFFALSE 16274
// AddComMoveXY ( i , 136 , 19 ) ;
16257: LD_VAR 0 1
16261: PPUSH
16262: LD_INT 136
16264: PPUSH
16265: LD_INT 19
16267: PPUSH
16268: CALL_OW 171
16272: GO 16254
16274: POP
16275: POP
// end ;
16276: PPOPN 3
16278: END
// every 7 7$30 + 7 7$30 trigger game do var i , base , tmp , target ;
16279: LD_EXP 3
16283: IFFALSE 17202
16285: GO 16287
16287: DISABLE
16288: LD_INT 0
16290: PPUSH
16291: PPUSH
16292: PPUSH
16293: PPUSH
// begin enable ;
16294: ENABLE
// base := mc_leg ;
16295: LD_ADDR_VAR 0 2
16299: PUSH
16300: LD_EXP 6
16304: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
16305: LD_INT 22
16307: PUSH
16308: LD_INT 8
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: PUSH
16315: LD_INT 23
16317: PUSH
16318: LD_INT 2
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: LD_INT 30
16327: PUSH
16328: LD_INT 3
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: LIST
16339: PPUSH
16340: CALL_OW 69
16344: NOT
16345: IFFALSE 16349
// exit ;
16347: GO 17202
// if Prob ( 40 ) then
16349: LD_INT 40
16351: PPUSH
16352: CALL_OW 13
16356: IFFALSE 16485
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16358: LD_VAR 0 2
16362: PPUSH
16363: LD_INT 13
16365: PUSH
16366: LD_INT 1
16368: PUSH
16369: LD_INT 2
16371: PUSH
16372: LD_INT 28
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: PUSH
16381: LD_INT 13
16383: PUSH
16384: LD_INT 1
16386: PUSH
16387: LD_INT 2
16389: PUSH
16390: LD_INT 28
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: PUSH
16399: LD_INT 13
16401: PUSH
16402: LD_INT 1
16404: PUSH
16405: LD_INT 2
16407: PUSH
16408: LD_INT 28
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: PUSH
16417: LD_INT 13
16419: PUSH
16420: LD_INT 1
16422: PUSH
16423: LD_INT 2
16425: PUSH
16426: LD_INT 28
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 13
16437: PUSH
16438: LD_INT 1
16440: PUSH
16441: LD_INT 2
16443: PUSH
16444: LD_INT 28
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: PUSH
16453: LD_INT 13
16455: PUSH
16456: LD_INT 1
16458: PUSH
16459: LD_INT 2
16461: PUSH
16462: LD_INT 26
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: PPUSH
16479: CALL 79503 0 2
// end else
16483: GO 16702
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16485: LD_VAR 0 2
16489: PPUSH
16490: LD_INT 13
16492: PUSH
16493: LD_INT 1
16495: PUSH
16496: LD_INT 2
16498: PUSH
16499: LD_INT 27
16501: PUSH
16502: LD_INT 26
16504: PUSH
16505: LD_INT 26
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: LIST
16512: PUSH
16513: LD_INT 1
16515: PPUSH
16516: LD_INT 3
16518: PPUSH
16519: CALL_OW 12
16523: ARRAY
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: PUSH
16531: LD_INT 13
16533: PUSH
16534: LD_INT 1
16536: PUSH
16537: LD_INT 2
16539: PUSH
16540: LD_INT 27
16542: PUSH
16543: LD_INT 26
16545: PUSH
16546: LD_INT 26
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: LIST
16553: PUSH
16554: LD_INT 1
16556: PPUSH
16557: LD_INT 3
16559: PPUSH
16560: CALL_OW 12
16564: ARRAY
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: PUSH
16572: LD_INT 13
16574: PUSH
16575: LD_INT 1
16577: PUSH
16578: LD_INT 2
16580: PUSH
16581: LD_INT 26
16583: PUSH
16584: LD_INT 26
16586: PUSH
16587: LD_INT 29
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: LIST
16594: PUSH
16595: LD_INT 1
16597: PPUSH
16598: LD_INT 3
16600: PPUSH
16601: CALL_OW 12
16605: ARRAY
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: PUSH
16613: LD_INT 13
16615: PUSH
16616: LD_INT 1
16618: PUSH
16619: LD_INT 2
16621: PUSH
16622: LD_INT 26
16624: PUSH
16625: LD_INT 29
16627: PUSH
16628: LD_INT 29
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: LIST
16635: PUSH
16636: LD_INT 1
16638: PPUSH
16639: LD_INT 3
16641: PPUSH
16642: CALL_OW 12
16646: ARRAY
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: PUSH
16654: LD_INT 13
16656: PUSH
16657: LD_INT 1
16659: PUSH
16660: LD_INT 2
16662: PUSH
16663: LD_INT 29
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: PUSH
16672: LD_INT 13
16674: PUSH
16675: LD_INT 1
16677: PUSH
16678: LD_INT 2
16680: PUSH
16681: LD_INT 26
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: PPUSH
16698: CALL 79503 0 2
// end ; repeat wait ( 0 0$1 ) ;
16702: LD_INT 35
16704: PPUSH
16705: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 6 or tick mod 10 10$00 = 0 ;
16709: LD_VAR 0 2
16713: PPUSH
16714: LD_INT 1
16716: PPUSH
16717: CALL 80921 0 2
16721: PUSH
16722: LD_INT 6
16724: GREATEREQUAL
16725: PUSH
16726: LD_OWVAR 1
16730: PUSH
16731: LD_INT 21000
16733: MOD
16734: PUSH
16735: LD_INT 0
16737: EQUAL
16738: OR
16739: IFFALSE 16702
// wait ( 0 0$30 ) ;
16741: LD_INT 1050
16743: PPUSH
16744: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
16748: LD_ADDR_VAR 0 3
16752: PUSH
16753: LD_VAR 0 2
16757: PPUSH
16758: LD_INT 1
16760: PPUSH
16761: CALL 80921 0 2
16765: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
16766: LD_ADDR_EXP 64
16770: PUSH
16771: LD_EXP 64
16775: PPUSH
16776: LD_VAR 0 2
16780: PPUSH
16781: LD_EXP 64
16785: PUSH
16786: LD_VAR 0 2
16790: ARRAY
16791: PUSH
16792: LD_VAR 0 3
16796: DIFF
16797: PPUSH
16798: CALL_OW 1
16802: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
16803: LD_ADDR_VAR 0 4
16807: PUSH
16808: LD_INT 0
16810: PPUSH
16811: LD_INT 2
16813: PPUSH
16814: CALL_OW 12
16818: ST_TO_ADDR
// if legChangeSide then
16819: LD_EXP 21
16823: IFFALSE 16833
// target := 2 ;
16825: LD_ADDR_VAR 0 4
16829: PUSH
16830: LD_INT 2
16832: ST_TO_ADDR
// if target = 2 then
16833: LD_VAR 0 4
16837: PUSH
16838: LD_INT 2
16840: EQUAL
16841: IFFALSE 16969
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16843: LD_ADDR_VAR 0 3
16847: PUSH
16848: LD_VAR 0 3
16852: PPUSH
16853: LD_INT 24
16855: PUSH
16856: LD_INT 250
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PPUSH
16863: CALL_OW 72
16867: ST_TO_ADDR
// for i in tmp do
16868: LD_ADDR_VAR 0 1
16872: PUSH
16873: LD_VAR 0 3
16877: PUSH
16878: FOR_IN
16879: IFFALSE 16919
// if GetDistUnitXY ( i , 112 , 64 ) > 9 then
16881: LD_VAR 0 1
16885: PPUSH
16886: LD_INT 112
16888: PPUSH
16889: LD_INT 64
16891: PPUSH
16892: CALL_OW 297
16896: PUSH
16897: LD_INT 9
16899: GREATER
16900: IFFALSE 16917
// ComMoveXY ( i , 112 , 64 ) ;
16902: LD_VAR 0 1
16906: PPUSH
16907: LD_INT 112
16909: PPUSH
16910: LD_INT 64
16912: PPUSH
16913: CALL_OW 111
16917: GO 16878
16919: POP
16920: POP
// wait ( 0 0$1 ) ;
16921: LD_INT 35
16923: PPUSH
16924: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 112 , 64 , 9 ] ) >= ( tmp - 1 ) ;
16928: LD_VAR 0 3
16932: PPUSH
16933: LD_INT 92
16935: PUSH
16936: LD_INT 112
16938: PUSH
16939: LD_INT 64
16941: PUSH
16942: LD_INT 9
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: PPUSH
16951: CALL_OW 72
16955: PUSH
16956: LD_VAR 0 3
16960: PUSH
16961: LD_INT 1
16963: MINUS
16964: GREATEREQUAL
16965: IFFALSE 16843
// end else
16967: GO 17093
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16969: LD_ADDR_VAR 0 3
16973: PUSH
16974: LD_VAR 0 3
16978: PPUSH
16979: LD_INT 24
16981: PUSH
16982: LD_INT 250
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PPUSH
16989: CALL_OW 72
16993: ST_TO_ADDR
// for i in tmp do
16994: LD_ADDR_VAR 0 1
16998: PUSH
16999: LD_VAR 0 3
17003: PUSH
17004: FOR_IN
17005: IFFALSE 17045
// if GetDistUnitXY ( i , 174 , 94 ) > 9 then
17007: LD_VAR 0 1
17011: PPUSH
17012: LD_INT 174
17014: PPUSH
17015: LD_INT 94
17017: PPUSH
17018: CALL_OW 297
17022: PUSH
17023: LD_INT 9
17025: GREATER
17026: IFFALSE 17043
// ComMoveXY ( i , 174 , 94 ) ;
17028: LD_VAR 0 1
17032: PPUSH
17033: LD_INT 174
17035: PPUSH
17036: LD_INT 94
17038: PPUSH
17039: CALL_OW 111
17043: GO 17004
17045: POP
17046: POP
// wait ( 0 0$1 ) ;
17047: LD_INT 35
17049: PPUSH
17050: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 174 , 94 , 9 ] ) >= ( tmp - 1 ) ;
17054: LD_VAR 0 3
17058: PPUSH
17059: LD_INT 92
17061: PUSH
17062: LD_INT 174
17064: PUSH
17065: LD_INT 94
17067: PUSH
17068: LD_INT 9
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: PPUSH
17077: CALL_OW 72
17081: PUSH
17082: LD_VAR 0 3
17086: PUSH
17087: LD_INT 1
17089: MINUS
17090: GREATEREQUAL
17091: IFFALSE 16969
// end ; repeat wait ( 0 0$1 ) ;
17093: LD_INT 35
17095: PPUSH
17096: CALL_OW 67
// for i in tmp do
17100: LD_ADDR_VAR 0 1
17104: PUSH
17105: LD_VAR 0 3
17109: PUSH
17110: FOR_IN
17111: IFFALSE 17193
// begin if GetLives ( i ) > 251 then
17113: LD_VAR 0 1
17117: PPUSH
17118: CALL_OW 256
17122: PUSH
17123: LD_INT 251
17125: GREATER
17126: IFFALSE 17164
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
17128: LD_VAR 0 1
17132: PPUSH
17133: LD_INT 81
17135: PUSH
17136: LD_INT 8
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PPUSH
17143: CALL_OW 69
17147: PPUSH
17148: LD_VAR 0 1
17152: PPUSH
17153: CALL_OW 74
17157: PPUSH
17158: CALL_OW 115
17162: GO 17191
// if IsDead ( i ) then
17164: LD_VAR 0 1
17168: PPUSH
17169: CALL_OW 301
17173: IFFALSE 17191
// tmp := tmp diff i ;
17175: LD_ADDR_VAR 0 3
17179: PUSH
17180: LD_VAR 0 3
17184: PUSH
17185: LD_VAR 0 1
17189: DIFF
17190: ST_TO_ADDR
// end ;
17191: GO 17110
17193: POP
17194: POP
// until not tmp ;
17195: LD_VAR 0 3
17199: NOT
17200: IFFALSE 17093
// end ;
17202: PPOPN 4
17204: END
// every 7 7$30 trigger game do var i , base , tmp , target , teleport ;
17205: LD_EXP 3
17209: IFFALSE 18197
17211: GO 17213
17213: DISABLE
17214: LD_INT 0
17216: PPUSH
17217: PPUSH
17218: PPUSH
17219: PPUSH
17220: PPUSH
// begin enable ;
17221: ENABLE
// if not UnitFilter ( mc_bases [ mc_rus_2 ] , [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
17222: LD_EXP 45
17226: PUSH
17227: LD_EXP 8
17231: ARRAY
17232: PPUSH
17233: LD_INT 22
17235: PUSH
17236: LD_INT 3
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: PUSH
17243: LD_INT 30
17245: PUSH
17246: LD_INT 3
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PPUSH
17257: CALL_OW 72
17261: NOT
17262: IFFALSE 17266
// exit ;
17264: GO 18197
// base := mc_rus_2 ;
17266: LD_ADDR_VAR 0 2
17270: PUSH
17271: LD_EXP 8
17275: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
17276: LD_ADDR_VAR 0 5
17280: PUSH
17281: LD_INT 22
17283: PUSH
17284: LD_INT 3
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PUSH
17291: LD_INT 30
17293: PUSH
17294: LD_INT 34
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: PPUSH
17305: CALL_OW 69
17309: ST_TO_ADDR
// if Prob ( 40 ) then
17310: LD_INT 40
17312: PPUSH
17313: CALL_OW 13
17317: IFFALSE 17446
// begin MC_InsertProduceList ( base , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17319: LD_VAR 0 2
17323: PPUSH
17324: LD_INT 22
17326: PUSH
17327: LD_INT 3
17329: PUSH
17330: LD_INT 3
17332: PUSH
17333: LD_INT 49
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: PUSH
17342: LD_INT 22
17344: PUSH
17345: LD_INT 3
17347: PUSH
17348: LD_INT 3
17350: PUSH
17351: LD_INT 49
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: PUSH
17360: LD_INT 22
17362: PUSH
17363: LD_INT 3
17365: PUSH
17366: LD_INT 3
17368: PUSH
17369: LD_INT 49
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 24
17380: PUSH
17381: LD_INT 3
17383: PUSH
17384: LD_INT 3
17386: PUSH
17387: LD_INT 46
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: PUSH
17396: LD_INT 24
17398: PUSH
17399: LD_INT 3
17401: PUSH
17402: LD_INT 3
17404: PUSH
17405: LD_INT 46
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: PUSH
17414: LD_INT 24
17416: PUSH
17417: LD_INT 3
17419: PUSH
17420: LD_INT 3
17422: PUSH
17423: LD_INT 46
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: PPUSH
17440: CALL 79503 0 2
// end else
17444: GO 17571
// begin MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17446: LD_VAR 0 2
17450: PPUSH
17451: LD_INT 24
17453: PUSH
17454: LD_INT 3
17456: PUSH
17457: LD_INT 3
17459: PUSH
17460: LD_INT 47
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: PUSH
17469: LD_INT 24
17471: PUSH
17472: LD_INT 3
17474: PUSH
17475: LD_INT 3
17477: PUSH
17478: LD_INT 47
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 24
17489: PUSH
17490: LD_INT 3
17492: PUSH
17493: LD_INT 3
17495: PUSH
17496: LD_INT 47
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: PUSH
17505: LD_INT 24
17507: PUSH
17508: LD_INT 3
17510: PUSH
17511: LD_INT 3
17513: PUSH
17514: LD_INT 46
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: PUSH
17523: LD_INT 24
17525: PUSH
17526: LD_INT 3
17528: PUSH
17529: LD_INT 3
17531: PUSH
17532: LD_INT 46
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: PUSH
17541: LD_INT 24
17543: PUSH
17544: LD_INT 3
17546: PUSH
17547: LD_INT 3
17549: PUSH
17550: LD_INT 46
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: PPUSH
17567: CALL 79503 0 2
// end ; if Difficulty > 1 then
17571: LD_OWVAR 67
17575: PUSH
17576: LD_INT 1
17578: GREATER
17579: IFFALSE 17611
// MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
17581: LD_VAR 0 2
17585: PPUSH
17586: LD_INT 24
17588: PUSH
17589: LD_INT 3
17591: PUSH
17592: LD_INT 3
17594: PUSH
17595: LD_INT 47
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: PUSH
17604: EMPTY
17605: LIST
17606: PPUSH
17607: CALL 79503 0 2
// repeat wait ( 0 0$1 ) ;
17611: LD_INT 35
17613: PPUSH
17614: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] or tick mod 10 10$00 = 0 ;
17618: LD_VAR 0 2
17622: PPUSH
17623: LD_INT 1
17625: PPUSH
17626: CALL 80921 0 2
17630: PUSH
17631: LD_INT 6
17633: PUSH
17634: LD_INT 7
17636: PUSH
17637: LD_INT 7
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: LIST
17644: PUSH
17645: LD_OWVAR 67
17649: ARRAY
17650: GREATEREQUAL
17651: PUSH
17652: LD_OWVAR 1
17656: PUSH
17657: LD_INT 21000
17659: MOD
17660: PUSH
17661: LD_INT 0
17663: EQUAL
17664: OR
17665: IFFALSE 17611
// wait ( 0 0$45 ) ;
17667: LD_INT 1575
17669: PPUSH
17670: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
17674: LD_ADDR_VAR 0 3
17678: PUSH
17679: LD_VAR 0 2
17683: PPUSH
17684: LD_INT 1
17686: PPUSH
17687: CALL 80921 0 2
17691: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
17692: LD_ADDR_EXP 64
17696: PUSH
17697: LD_EXP 64
17701: PPUSH
17702: LD_VAR 0 2
17706: PPUSH
17707: LD_EXP 64
17711: PUSH
17712: LD_VAR 0 2
17716: ARRAY
17717: PUSH
17718: LD_VAR 0 3
17722: DIFF
17723: PPUSH
17724: CALL_OW 1
17728: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
17729: LD_ADDR_VAR 0 4
17733: PUSH
17734: LD_INT 0
17736: PPUSH
17737: LD_INT 1
17739: PPUSH
17740: CALL_OW 12
17744: ST_TO_ADDR
// if target then
17745: LD_VAR 0 4
17749: IFFALSE 17877
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17751: LD_ADDR_VAR 0 3
17755: PUSH
17756: LD_VAR 0 3
17760: PPUSH
17761: LD_INT 24
17763: PUSH
17764: LD_INT 250
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PPUSH
17771: CALL_OW 72
17775: ST_TO_ADDR
// for i in tmp do
17776: LD_ADDR_VAR 0 1
17780: PUSH
17781: LD_VAR 0 3
17785: PUSH
17786: FOR_IN
17787: IFFALSE 17827
// if GetDistUnitXY ( i , 84 , 32 ) > 9 then
17789: LD_VAR 0 1
17793: PPUSH
17794: LD_INT 84
17796: PPUSH
17797: LD_INT 32
17799: PPUSH
17800: CALL_OW 297
17804: PUSH
17805: LD_INT 9
17807: GREATER
17808: IFFALSE 17825
// ComMoveXY ( i , 84 , 32 ) ;
17810: LD_VAR 0 1
17814: PPUSH
17815: LD_INT 84
17817: PPUSH
17818: LD_INT 32
17820: PPUSH
17821: CALL_OW 111
17825: GO 17786
17827: POP
17828: POP
// wait ( 0 0$1 ) ;
17829: LD_INT 35
17831: PPUSH
17832: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 84 , 32 , 9 ] ) >= ( tmp - 1 ) ;
17836: LD_VAR 0 3
17840: PPUSH
17841: LD_INT 92
17843: PUSH
17844: LD_INT 84
17846: PUSH
17847: LD_INT 32
17849: PUSH
17850: LD_INT 9
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: PPUSH
17859: CALL_OW 72
17863: PUSH
17864: LD_VAR 0 3
17868: PUSH
17869: LD_INT 1
17871: MINUS
17872: GREATEREQUAL
17873: IFFALSE 17751
// end else
17875: GO 18037
// begin if teleport then
17877: LD_VAR 0 5
17881: IFFALSE 17901
// ComEnterUnit ( tmp , teleport [ 1 ] ) ;
17883: LD_VAR 0 3
17887: PPUSH
17888: LD_VAR 0 5
17892: PUSH
17893: LD_INT 1
17895: ARRAY
17896: PPUSH
17897: CALL_OW 120
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17901: LD_ADDR_VAR 0 3
17905: PUSH
17906: LD_VAR 0 3
17910: PPUSH
17911: LD_INT 24
17913: PUSH
17914: LD_INT 250
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PPUSH
17921: CALL_OW 72
17925: ST_TO_ADDR
// for i in tmp do
17926: LD_ADDR_VAR 0 1
17930: PUSH
17931: LD_VAR 0 3
17935: PUSH
17936: FOR_IN
17937: IFFALSE 17989
// if GetDistUnitXY ( i , 140 , 219 ) > 9 and not HasTask ( i ) then
17939: LD_VAR 0 1
17943: PPUSH
17944: LD_INT 140
17946: PPUSH
17947: LD_INT 219
17949: PPUSH
17950: CALL_OW 297
17954: PUSH
17955: LD_INT 9
17957: GREATER
17958: PUSH
17959: LD_VAR 0 1
17963: PPUSH
17964: CALL_OW 314
17968: NOT
17969: AND
17970: IFFALSE 17987
// AddComMoveXY ( i , 140 , 219 ) ;
17972: LD_VAR 0 1
17976: PPUSH
17977: LD_INT 140
17979: PPUSH
17980: LD_INT 219
17982: PPUSH
17983: CALL_OW 171
17987: GO 17936
17989: POP
17990: POP
// wait ( 0 0$1 ) ;
17991: LD_INT 35
17993: PPUSH
17994: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 140 , 219 , 9 ] ) >= ( tmp - 1 ) ;
17998: LD_VAR 0 3
18002: PPUSH
18003: LD_INT 92
18005: PUSH
18006: LD_INT 140
18008: PUSH
18009: LD_INT 219
18011: PUSH
18012: LD_INT 9
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: PPUSH
18021: CALL_OW 72
18025: PUSH
18026: LD_VAR 0 3
18030: PUSH
18031: LD_INT 1
18033: MINUS
18034: GREATEREQUAL
18035: IFFALSE 17901
// end ; repeat wait ( 0 0$1 ) ;
18037: LD_INT 35
18039: PPUSH
18040: CALL_OW 67
// for i in tmp do
18044: LD_ADDR_VAR 0 1
18048: PUSH
18049: LD_VAR 0 3
18053: PUSH
18054: FOR_IN
18055: IFFALSE 18188
// begin if GetLives ( i ) > 251 then
18057: LD_VAR 0 1
18061: PPUSH
18062: CALL_OW 256
18066: PUSH
18067: LD_INT 251
18069: GREATER
18070: IFFALSE 18159
// begin if GetWeapon ( i ) = ru_time_lapser then
18072: LD_VAR 0 1
18076: PPUSH
18077: CALL_OW 264
18081: PUSH
18082: LD_INT 49
18084: EQUAL
18085: IFFALSE 18123
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) else
18087: LD_VAR 0 1
18091: PPUSH
18092: LD_INT 81
18094: PUSH
18095: LD_INT 3
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PPUSH
18102: CALL_OW 69
18106: PPUSH
18107: LD_VAR 0 1
18111: PPUSH
18112: CALL_OW 74
18116: PPUSH
18117: CALL_OW 112
18121: GO 18157
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18123: LD_VAR 0 1
18127: PPUSH
18128: LD_INT 81
18130: PUSH
18131: LD_INT 3
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PPUSH
18138: CALL_OW 69
18142: PPUSH
18143: LD_VAR 0 1
18147: PPUSH
18148: CALL_OW 74
18152: PPUSH
18153: CALL_OW 115
// end else
18157: GO 18186
// if IsDead ( i ) then
18159: LD_VAR 0 1
18163: PPUSH
18164: CALL_OW 301
18168: IFFALSE 18186
// tmp := tmp diff i ;
18170: LD_ADDR_VAR 0 3
18174: PUSH
18175: LD_VAR 0 3
18179: PUSH
18180: LD_VAR 0 1
18184: DIFF
18185: ST_TO_ADDR
// end ;
18186: GO 18054
18188: POP
18189: POP
// until not tmp ;
18190: LD_VAR 0 3
18194: NOT
18195: IFFALSE 18037
// end ;
18197: PPOPN 5
18199: END
// every 12 12$30 + 11 11$30 trigger game do var i , base , tmp , target ;
18200: LD_EXP 3
18204: IFFALSE 18586
18206: GO 18208
18208: DISABLE
18209: LD_INT 0
18211: PPUSH
18212: PPUSH
18213: PPUSH
18214: PPUSH
// begin enable ;
18215: ENABLE
// base := mc_amer ;
18216: LD_ADDR_VAR 0 2
18220: PUSH
18221: LD_EXP 5
18225: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_btype , b_factory ] ] ) then
18226: LD_INT 22
18228: PUSH
18229: LD_INT 4
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 23
18238: PUSH
18239: LD_INT 1
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: LD_INT 30
18248: PUSH
18249: LD_INT 3
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: LIST
18260: PPUSH
18261: CALL_OW 69
18265: NOT
18266: IFFALSE 18270
// exit ;
18268: GO 18586
// MC_InsertProduceList ( base , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_laser ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] ] ) ;
18270: LD_VAR 0 2
18274: PPUSH
18275: LD_INT 3
18277: PUSH
18278: LD_INT 1
18280: PUSH
18281: LD_INT 2
18283: PUSH
18284: LD_INT 5
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: PUSH
18293: LD_INT 3
18295: PUSH
18296: LD_INT 1
18298: PUSH
18299: LD_INT 2
18301: PUSH
18302: LD_INT 9
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: PUSH
18311: LD_INT 3
18313: PUSH
18314: LD_INT 1
18316: PUSH
18317: LD_INT 2
18319: PUSH
18320: LD_INT 7
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: PUSH
18329: LD_INT 3
18331: PUSH
18332: LD_INT 1
18334: PUSH
18335: LD_INT 2
18337: PUSH
18338: LD_INT 7
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: PUSH
18347: LD_INT 3
18349: PUSH
18350: LD_INT 1
18352: PUSH
18353: LD_INT 2
18355: PUSH
18356: LD_INT 7
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: PPUSH
18372: CALL 79503 0 2
// repeat wait ( 0 0$1 ) ;
18376: LD_INT 35
18378: PPUSH
18379: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 5 or tick mod 10 10$00 = 0 ;
18383: LD_VAR 0 2
18387: PPUSH
18388: LD_INT 1
18390: PPUSH
18391: CALL 80921 0 2
18395: PUSH
18396: LD_INT 5
18398: GREATEREQUAL
18399: PUSH
18400: LD_OWVAR 1
18404: PUSH
18405: LD_INT 21000
18407: MOD
18408: PUSH
18409: LD_INT 0
18411: EQUAL
18412: OR
18413: IFFALSE 18376
// wait ( 0 0$30 ) ;
18415: LD_INT 1050
18417: PPUSH
18418: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
18422: LD_ADDR_VAR 0 3
18426: PUSH
18427: LD_VAR 0 2
18431: PPUSH
18432: LD_INT 1
18434: PPUSH
18435: CALL 80921 0 2
18439: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
18440: LD_ADDR_EXP 64
18444: PUSH
18445: LD_EXP 64
18449: PPUSH
18450: LD_VAR 0 2
18454: PPUSH
18455: LD_EXP 64
18459: PUSH
18460: LD_VAR 0 2
18464: ARRAY
18465: PUSH
18466: LD_VAR 0 3
18470: DIFF
18471: PPUSH
18472: CALL_OW 1
18476: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18477: LD_INT 35
18479: PPUSH
18480: CALL_OW 67
// for i in tmp do
18484: LD_ADDR_VAR 0 1
18488: PUSH
18489: LD_VAR 0 3
18493: PUSH
18494: FOR_IN
18495: IFFALSE 18577
// begin if GetLives ( i ) > 251 then
18497: LD_VAR 0 1
18501: PPUSH
18502: CALL_OW 256
18506: PUSH
18507: LD_INT 251
18509: GREATER
18510: IFFALSE 18548
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) else
18512: LD_VAR 0 1
18516: PPUSH
18517: LD_INT 81
18519: PUSH
18520: LD_INT 4
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PPUSH
18527: CALL_OW 69
18531: PPUSH
18532: LD_VAR 0 1
18536: PPUSH
18537: CALL_OW 74
18541: PPUSH
18542: CALL_OW 115
18546: GO 18575
// if IsDead ( i ) then
18548: LD_VAR 0 1
18552: PPUSH
18553: CALL_OW 301
18557: IFFALSE 18575
// tmp := tmp diff i ;
18559: LD_ADDR_VAR 0 3
18563: PUSH
18564: LD_VAR 0 3
18568: PUSH
18569: LD_VAR 0 1
18573: DIFF
18574: ST_TO_ADDR
// end ;
18575: GO 18494
18577: POP
18578: POP
// until not tmp ;
18579: LD_VAR 0 3
18583: NOT
18584: IFFALSE 18477
// end ; end_of_file
18586: PPOPN 4
18588: END
// export function CustomEvent ( event ) ; begin
18589: LD_INT 0
18591: PPUSH
// end ;
18592: LD_VAR 0 2
18596: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 then
18597: LD_VAR 0 1
18601: PUSH
18602: LD_INT 1
18604: EQUAL
18605: PUSH
18606: LD_VAR 0 2
18610: PUSH
18611: LD_INT 4
18613: EQUAL
18614: AND
18615: IFFALSE 18643
// begin SayRadio ( Powell , DP-Lost ) ;
18617: LD_EXP 12
18621: PPUSH
18622: LD_STRING DP-Lost
18624: PPUSH
18625: CALL_OW 94
// wait ( 0 0$2 ) ;
18629: LD_INT 70
18631: PPUSH
18632: CALL_OW 67
// YouLost ( FriendlyFire ) ;
18636: LD_STRING FriendlyFire
18638: PPUSH
18639: CALL_OW 104
// end ; end ;
18643: PPOPN 2
18645: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18646: LD_VAR 0 1
18650: PPUSH
18651: CALL 96898 0 1
// if GameType = 1 then
18655: LD_EXP 2
18659: PUSH
18660: LD_INT 1
18662: EQUAL
18663: IFFALSE 18898
// begin if un = playerCommander then
18665: LD_VAR 0 1
18669: PUSH
18670: LD_EXP 9
18674: EQUAL
18675: IFFALSE 18684
// YouLost ( commanderDied ) ;
18677: LD_STRING commanderDied
18679: PPUSH
18680: CALL_OW 104
// if un = allyCommander then
18684: LD_VAR 0 1
18688: PUSH
18689: LD_EXP 11
18693: EQUAL
18694: IFFALSE 18703
// YouLost ( Theta ) ;
18696: LD_STRING Theta
18698: PPUSH
18699: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18703: LD_VAR 0 1
18707: PUSH
18708: LD_INT 22
18710: PUSH
18711: LD_INT 8
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PUSH
18718: LD_INT 2
18720: PUSH
18721: LD_INT 21
18723: PUSH
18724: LD_INT 1
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 21
18733: PUSH
18734: LD_INT 3
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: LIST
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PPUSH
18750: CALL_OW 69
18754: IN
18755: IFFALSE 18771
// legDestCounter := legDestCounter + 1 ;
18757: LD_ADDR_EXP 18
18761: PUSH
18762: LD_EXP 18
18766: PUSH
18767: LD_INT 1
18769: PLUS
18770: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18771: LD_VAR 0 1
18775: PUSH
18776: LD_INT 22
18778: PUSH
18779: LD_INT 4
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 2
18788: PUSH
18789: LD_INT 21
18791: PUSH
18792: LD_INT 1
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: LD_INT 21
18801: PUSH
18802: LD_INT 3
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: LIST
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PPUSH
18818: CALL_OW 69
18822: IN
18823: IFFALSE 18839
// allyDestCounter := allyDestCounter + 1 ;
18825: LD_ADDR_EXP 22
18829: PUSH
18830: LD_EXP 22
18834: PUSH
18835: LD_INT 1
18837: PLUS
18838: ST_TO_ADDR
// if un in ruOutpost then
18839: LD_VAR 0 1
18843: PUSH
18844: LD_EXP 14
18848: IN
18849: IFFALSE 18898
// begin ruOutpost := ruOutpost diff un ;
18851: LD_ADDR_EXP 14
18855: PUSH
18856: LD_EXP 14
18860: PUSH
18861: LD_VAR 0 1
18865: DIFF
18866: ST_TO_ADDR
// ruEscape := Replace ( ruEscape , 1 , ruEscape [ 1 ] + 1 ) ;
18867: LD_ADDR_EXP 15
18871: PUSH
18872: LD_EXP 15
18876: PPUSH
18877: LD_INT 1
18879: PPUSH
18880: LD_EXP 15
18884: PUSH
18885: LD_INT 1
18887: ARRAY
18888: PUSH
18889: LD_INT 1
18891: PLUS
18892: PPUSH
18893: CALL_OW 1
18897: ST_TO_ADDR
// end ; end ; MCE_UnitDestroyed ( un ) ;
18898: LD_VAR 0 1
18902: PPUSH
18903: CALL 82895 0 1
// end ;
18907: PPOPN 1
18909: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
18910: LD_VAR 0 1
18914: PPUSH
18915: LD_VAR 0 2
18919: PPUSH
18920: CALL 85229 0 2
// end ;
18924: PPOPN 2
18926: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
18927: LD_VAR 0 1
18931: PPUSH
18932: CALL 84297 0 1
// end ;
18936: PPOPN 1
18938: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
18939: LD_VAR 0 1
18943: PPUSH
18944: CALL 84538 0 1
// end ;
18948: PPOPN 1
18950: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_LasDouble and GetSide ( lab ) = 1 then
18951: LD_VAR 0 1
18955: PUSH
18956: LD_INT 14
18958: EQUAL
18959: PUSH
18960: LD_VAR 0 2
18964: PPUSH
18965: CALL_OW 255
18969: PUSH
18970: LD_INT 1
18972: EQUAL
18973: AND
18974: IFFALSE 19015
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Laser ) ;
18976: LD_EXP 9
18980: PPUSH
18981: LD_STRING D
18983: PUSH
18984: LD_STRING I
18986: PUSH
18987: LD_STRING J
18989: PUSH
18990: LD_STRING S
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: LIST
18997: PUSH
18998: LD_EXP 25
19002: ARRAY
19003: STR
19004: PUSH
19005: LD_STRING -1-Laser
19007: STR
19008: PPUSH
19009: CALL_OW 88
// exit ;
19013: GO 19157
// end ; if tech = tech_MatDet and GetSide ( lab ) = 1 then
19015: LD_VAR 0 1
19019: PUSH
19020: LD_INT 7
19022: EQUAL
19023: PUSH
19024: LD_VAR 0 2
19028: PPUSH
19029: CALL_OW 255
19033: PUSH
19034: LD_INT 1
19036: EQUAL
19037: AND
19038: IFFALSE 19079
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Materialization ) ;
19040: LD_EXP 9
19044: PPUSH
19045: LD_STRING D
19047: PUSH
19048: LD_STRING I
19050: PUSH
19051: LD_STRING J
19053: PUSH
19054: LD_STRING S
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: LIST
19061: PUSH
19062: LD_EXP 25
19066: ARRAY
19067: STR
19068: PUSH
19069: LD_STRING -1-Materialization
19071: STR
19072: PPUSH
19073: CALL_OW 88
// exit ;
19077: GO 19157
// end ; if tech = tech_SibFiss and GetSide ( lab ) = 1 then
19079: LD_VAR 0 1
19083: PUSH
19084: LD_INT 25
19086: EQUAL
19087: PUSH
19088: LD_VAR 0 2
19092: PPUSH
19093: CALL_OW 255
19097: PUSH
19098: LD_INT 1
19100: EQUAL
19101: AND
19102: IFFALSE 19143
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Rocket ) ;
19104: LD_EXP 9
19108: PPUSH
19109: LD_STRING D
19111: PUSH
19112: LD_STRING I
19114: PUSH
19115: LD_STRING J
19117: PUSH
19118: LD_STRING S
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: LIST
19125: PUSH
19126: LD_EXP 25
19130: ARRAY
19131: STR
19132: PUSH
19133: LD_STRING -1-Rocket
19135: STR
19136: PPUSH
19137: CALL_OW 88
// exit ;
19141: GO 19157
// end ; MCE_ResearchComplete ( tech , lab ) ;
19143: LD_VAR 0 1
19147: PPUSH
19148: LD_VAR 0 2
19152: PPUSH
19153: CALL 82591 0 2
// end ;
19157: PPOPN 2
19159: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
19160: LD_VAR 0 1
19164: PPUSH
19165: LD_VAR 0 2
19169: PPUSH
19170: LD_VAR 0 3
19174: PPUSH
19175: LD_VAR 0 4
19179: PPUSH
19180: LD_VAR 0 5
19184: PPUSH
19185: CALL 82211 0 5
// end ;
19189: PPOPN 5
19191: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
19192: LD_VAR 0 1
19196: PPUSH
19197: LD_VAR 0 2
19201: PPUSH
19202: CALL 81807 0 2
// end ;
19206: PPOPN 2
19208: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
19209: LD_VAR 0 1
19213: PPUSH
19214: LD_VAR 0 2
19218: PPUSH
19219: LD_VAR 0 3
19223: PPUSH
19224: LD_VAR 0 4
19228: PPUSH
19229: CALL 81645 0 4
// end ;
19233: PPOPN 4
19235: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
19236: LD_VAR 0 1
19240: PPUSH
19241: LD_VAR 0 2
19245: PPUSH
19246: LD_VAR 0 3
19250: PPUSH
19251: CALL 81420 0 3
// end ;
19255: PPOPN 3
19257: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
19258: LD_VAR 0 1
19262: PPUSH
19263: LD_VAR 0 2
19267: PPUSH
19268: CALL 81305 0 2
// end ;
19272: PPOPN 2
19274: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
19275: LD_VAR 0 1
19279: PPUSH
19280: LD_VAR 0 2
19284: PPUSH
19285: CALL 85490 0 2
// end ;
19289: PPOPN 2
19291: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
19292: LD_VAR 0 1
19296: PPUSH
19297: LD_VAR 0 2
19301: PPUSH
19302: LD_VAR 0 3
19306: PPUSH
19307: LD_VAR 0 4
19311: PPUSH
19312: CALL 85706 0 4
// end ;
19316: PPOPN 4
19318: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
19319: LD_VAR 0 1
19323: PPUSH
19324: LD_VAR 0 2
19328: PPUSH
19329: CALL 81114 0 2
// end ;
19333: PPOPN 2
19335: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
19336: LD_VAR 0 1
19340: PPUSH
19341: CALL 97004 0 1
// end ; end_of_file
19345: PPOPN 1
19347: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19348: LD_INT 0
19350: PPUSH
19351: PPUSH
// if exist_mode then
19352: LD_VAR 0 2
19356: IFFALSE 19381
// unit := CreateCharacter ( prefix & ident ) else
19358: LD_ADDR_VAR 0 5
19362: PUSH
19363: LD_VAR 0 3
19367: PUSH
19368: LD_VAR 0 1
19372: STR
19373: PPUSH
19374: CALL_OW 34
19378: ST_TO_ADDR
19379: GO 19396
// unit := NewCharacter ( ident ) ;
19381: LD_ADDR_VAR 0 5
19385: PUSH
19386: LD_VAR 0 1
19390: PPUSH
19391: CALL_OW 25
19395: ST_TO_ADDR
// result := unit ;
19396: LD_ADDR_VAR 0 4
19400: PUSH
19401: LD_VAR 0 5
19405: ST_TO_ADDR
// end ;
19406: LD_VAR 0 4
19410: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19411: LD_INT 0
19413: PPUSH
19414: PPUSH
// if not side or not nation then
19415: LD_VAR 0 1
19419: NOT
19420: PUSH
19421: LD_VAR 0 2
19425: NOT
19426: OR
19427: IFFALSE 19431
// exit ;
19429: GO 20195
// case nation of nation_american :
19431: LD_VAR 0 2
19435: PUSH
19436: LD_INT 1
19438: DOUBLE
19439: EQUAL
19440: IFTRUE 19444
19442: GO 19658
19444: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19445: LD_ADDR_VAR 0 4
19449: PUSH
19450: LD_INT 35
19452: PUSH
19453: LD_INT 45
19455: PUSH
19456: LD_INT 46
19458: PUSH
19459: LD_INT 47
19461: PUSH
19462: LD_INT 82
19464: PUSH
19465: LD_INT 83
19467: PUSH
19468: LD_INT 84
19470: PUSH
19471: LD_INT 85
19473: PUSH
19474: LD_INT 86
19476: PUSH
19477: LD_INT 1
19479: PUSH
19480: LD_INT 2
19482: PUSH
19483: LD_INT 6
19485: PUSH
19486: LD_INT 15
19488: PUSH
19489: LD_INT 16
19491: PUSH
19492: LD_INT 7
19494: PUSH
19495: LD_INT 12
19497: PUSH
19498: LD_INT 13
19500: PUSH
19501: LD_INT 10
19503: PUSH
19504: LD_INT 14
19506: PUSH
19507: LD_INT 20
19509: PUSH
19510: LD_INT 21
19512: PUSH
19513: LD_INT 22
19515: PUSH
19516: LD_INT 25
19518: PUSH
19519: LD_INT 32
19521: PUSH
19522: LD_INT 27
19524: PUSH
19525: LD_INT 36
19527: PUSH
19528: LD_INT 69
19530: PUSH
19531: LD_INT 39
19533: PUSH
19534: LD_INT 34
19536: PUSH
19537: LD_INT 40
19539: PUSH
19540: LD_INT 48
19542: PUSH
19543: LD_INT 49
19545: PUSH
19546: LD_INT 50
19548: PUSH
19549: LD_INT 51
19551: PUSH
19552: LD_INT 52
19554: PUSH
19555: LD_INT 53
19557: PUSH
19558: LD_INT 54
19560: PUSH
19561: LD_INT 55
19563: PUSH
19564: LD_INT 56
19566: PUSH
19567: LD_INT 57
19569: PUSH
19570: LD_INT 58
19572: PUSH
19573: LD_INT 59
19575: PUSH
19576: LD_INT 60
19578: PUSH
19579: LD_INT 61
19581: PUSH
19582: LD_INT 62
19584: PUSH
19585: LD_INT 80
19587: PUSH
19588: LD_INT 82
19590: PUSH
19591: LD_INT 83
19593: PUSH
19594: LD_INT 84
19596: PUSH
19597: LD_INT 85
19599: PUSH
19600: LD_INT 86
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: ST_TO_ADDR
19656: GO 20119
19658: LD_INT 2
19660: DOUBLE
19661: EQUAL
19662: IFTRUE 19666
19664: GO 19888
19666: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
19667: LD_ADDR_VAR 0 4
19671: PUSH
19672: LD_INT 35
19674: PUSH
19675: LD_INT 45
19677: PUSH
19678: LD_INT 46
19680: PUSH
19681: LD_INT 47
19683: PUSH
19684: LD_INT 82
19686: PUSH
19687: LD_INT 83
19689: PUSH
19690: LD_INT 84
19692: PUSH
19693: LD_INT 85
19695: PUSH
19696: LD_INT 87
19698: PUSH
19699: LD_INT 70
19701: PUSH
19702: LD_INT 1
19704: PUSH
19705: LD_INT 11
19707: PUSH
19708: LD_INT 3
19710: PUSH
19711: LD_INT 4
19713: PUSH
19714: LD_INT 5
19716: PUSH
19717: LD_INT 6
19719: PUSH
19720: LD_INT 15
19722: PUSH
19723: LD_INT 18
19725: PUSH
19726: LD_INT 7
19728: PUSH
19729: LD_INT 17
19731: PUSH
19732: LD_INT 8
19734: PUSH
19735: LD_INT 20
19737: PUSH
19738: LD_INT 21
19740: PUSH
19741: LD_INT 22
19743: PUSH
19744: LD_INT 72
19746: PUSH
19747: LD_INT 26
19749: PUSH
19750: LD_INT 69
19752: PUSH
19753: LD_INT 39
19755: PUSH
19756: LD_INT 40
19758: PUSH
19759: LD_INT 41
19761: PUSH
19762: LD_INT 42
19764: PUSH
19765: LD_INT 43
19767: PUSH
19768: LD_INT 48
19770: PUSH
19771: LD_INT 49
19773: PUSH
19774: LD_INT 50
19776: PUSH
19777: LD_INT 51
19779: PUSH
19780: LD_INT 52
19782: PUSH
19783: LD_INT 53
19785: PUSH
19786: LD_INT 54
19788: PUSH
19789: LD_INT 55
19791: PUSH
19792: LD_INT 56
19794: PUSH
19795: LD_INT 60
19797: PUSH
19798: LD_INT 61
19800: PUSH
19801: LD_INT 62
19803: PUSH
19804: LD_INT 66
19806: PUSH
19807: LD_INT 67
19809: PUSH
19810: LD_INT 68
19812: PUSH
19813: LD_INT 81
19815: PUSH
19816: LD_INT 82
19818: PUSH
19819: LD_INT 83
19821: PUSH
19822: LD_INT 84
19824: PUSH
19825: LD_INT 85
19827: PUSH
19828: LD_INT 87
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: ST_TO_ADDR
19886: GO 20119
19888: LD_INT 3
19890: DOUBLE
19891: EQUAL
19892: IFTRUE 19896
19894: GO 20118
19896: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
19897: LD_ADDR_VAR 0 4
19901: PUSH
19902: LD_INT 46
19904: PUSH
19905: LD_INT 47
19907: PUSH
19908: LD_INT 1
19910: PUSH
19911: LD_INT 2
19913: PUSH
19914: LD_INT 82
19916: PUSH
19917: LD_INT 83
19919: PUSH
19920: LD_INT 84
19922: PUSH
19923: LD_INT 85
19925: PUSH
19926: LD_INT 86
19928: PUSH
19929: LD_INT 11
19931: PUSH
19932: LD_INT 9
19934: PUSH
19935: LD_INT 20
19937: PUSH
19938: LD_INT 19
19940: PUSH
19941: LD_INT 21
19943: PUSH
19944: LD_INT 24
19946: PUSH
19947: LD_INT 22
19949: PUSH
19950: LD_INT 25
19952: PUSH
19953: LD_INT 28
19955: PUSH
19956: LD_INT 29
19958: PUSH
19959: LD_INT 30
19961: PUSH
19962: LD_INT 31
19964: PUSH
19965: LD_INT 37
19967: PUSH
19968: LD_INT 38
19970: PUSH
19971: LD_INT 32
19973: PUSH
19974: LD_INT 27
19976: PUSH
19977: LD_INT 33
19979: PUSH
19980: LD_INT 69
19982: PUSH
19983: LD_INT 39
19985: PUSH
19986: LD_INT 34
19988: PUSH
19989: LD_INT 40
19991: PUSH
19992: LD_INT 71
19994: PUSH
19995: LD_INT 23
19997: PUSH
19998: LD_INT 44
20000: PUSH
20001: LD_INT 48
20003: PUSH
20004: LD_INT 49
20006: PUSH
20007: LD_INT 50
20009: PUSH
20010: LD_INT 51
20012: PUSH
20013: LD_INT 52
20015: PUSH
20016: LD_INT 53
20018: PUSH
20019: LD_INT 54
20021: PUSH
20022: LD_INT 55
20024: PUSH
20025: LD_INT 56
20027: PUSH
20028: LD_INT 57
20030: PUSH
20031: LD_INT 58
20033: PUSH
20034: LD_INT 59
20036: PUSH
20037: LD_INT 63
20039: PUSH
20040: LD_INT 64
20042: PUSH
20043: LD_INT 65
20045: PUSH
20046: LD_INT 82
20048: PUSH
20049: LD_INT 83
20051: PUSH
20052: LD_INT 84
20054: PUSH
20055: LD_INT 85
20057: PUSH
20058: LD_INT 86
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: ST_TO_ADDR
20116: GO 20119
20118: POP
// if state > - 1 and state < 3 then
20119: LD_VAR 0 3
20123: PUSH
20124: LD_INT 1
20126: NEG
20127: GREATER
20128: PUSH
20129: LD_VAR 0 3
20133: PUSH
20134: LD_INT 3
20136: LESS
20137: AND
20138: IFFALSE 20195
// for i in result do
20140: LD_ADDR_VAR 0 5
20144: PUSH
20145: LD_VAR 0 4
20149: PUSH
20150: FOR_IN
20151: IFFALSE 20193
// if GetTech ( i , side ) <> state then
20153: LD_VAR 0 5
20157: PPUSH
20158: LD_VAR 0 1
20162: PPUSH
20163: CALL_OW 321
20167: PUSH
20168: LD_VAR 0 3
20172: NONEQUAL
20173: IFFALSE 20191
// result := result diff i ;
20175: LD_ADDR_VAR 0 4
20179: PUSH
20180: LD_VAR 0 4
20184: PUSH
20185: LD_VAR 0 5
20189: DIFF
20190: ST_TO_ADDR
20191: GO 20150
20193: POP
20194: POP
// end ;
20195: LD_VAR 0 4
20199: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20200: LD_INT 0
20202: PPUSH
20203: PPUSH
20204: PPUSH
// result := true ;
20205: LD_ADDR_VAR 0 3
20209: PUSH
20210: LD_INT 1
20212: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20213: LD_ADDR_VAR 0 5
20217: PUSH
20218: LD_VAR 0 2
20222: PPUSH
20223: CALL_OW 480
20227: ST_TO_ADDR
// if not tmp then
20228: LD_VAR 0 5
20232: NOT
20233: IFFALSE 20237
// exit ;
20235: GO 20286
// for i in tmp do
20237: LD_ADDR_VAR 0 4
20241: PUSH
20242: LD_VAR 0 5
20246: PUSH
20247: FOR_IN
20248: IFFALSE 20284
// if GetTech ( i , side ) <> state_researched then
20250: LD_VAR 0 4
20254: PPUSH
20255: LD_VAR 0 1
20259: PPUSH
20260: CALL_OW 321
20264: PUSH
20265: LD_INT 2
20267: NONEQUAL
20268: IFFALSE 20282
// begin result := false ;
20270: LD_ADDR_VAR 0 3
20274: PUSH
20275: LD_INT 0
20277: ST_TO_ADDR
// exit ;
20278: POP
20279: POP
20280: GO 20286
// end ;
20282: GO 20247
20284: POP
20285: POP
// end ;
20286: LD_VAR 0 3
20290: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20291: LD_INT 0
20293: PPUSH
20294: PPUSH
20295: PPUSH
20296: PPUSH
20297: PPUSH
20298: PPUSH
20299: PPUSH
20300: PPUSH
20301: PPUSH
20302: PPUSH
20303: PPUSH
20304: PPUSH
20305: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20306: LD_VAR 0 1
20310: NOT
20311: PUSH
20312: LD_VAR 0 1
20316: PPUSH
20317: CALL_OW 257
20321: PUSH
20322: LD_INT 9
20324: NONEQUAL
20325: OR
20326: IFFALSE 20330
// exit ;
20328: GO 20903
// side := GetSide ( unit ) ;
20330: LD_ADDR_VAR 0 9
20334: PUSH
20335: LD_VAR 0 1
20339: PPUSH
20340: CALL_OW 255
20344: ST_TO_ADDR
// tech_space := tech_spacanom ;
20345: LD_ADDR_VAR 0 12
20349: PUSH
20350: LD_INT 29
20352: ST_TO_ADDR
// tech_time := tech_taurad ;
20353: LD_ADDR_VAR 0 13
20357: PUSH
20358: LD_INT 28
20360: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20361: LD_ADDR_VAR 0 11
20365: PUSH
20366: LD_VAR 0 1
20370: PPUSH
20371: CALL_OW 310
20375: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20376: LD_VAR 0 11
20380: PPUSH
20381: CALL_OW 247
20385: PUSH
20386: LD_INT 2
20388: EQUAL
20389: IFFALSE 20393
// exit ;
20391: GO 20903
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20393: LD_ADDR_VAR 0 8
20397: PUSH
20398: LD_INT 81
20400: PUSH
20401: LD_VAR 0 9
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: LD_INT 3
20412: PUSH
20413: LD_INT 21
20415: PUSH
20416: LD_INT 3
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PPUSH
20431: CALL_OW 69
20435: ST_TO_ADDR
// if not tmp then
20436: LD_VAR 0 8
20440: NOT
20441: IFFALSE 20445
// exit ;
20443: GO 20903
// if in_unit then
20445: LD_VAR 0 11
20449: IFFALSE 20473
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20451: LD_ADDR_VAR 0 10
20455: PUSH
20456: LD_VAR 0 8
20460: PPUSH
20461: LD_VAR 0 11
20465: PPUSH
20466: CALL_OW 74
20470: ST_TO_ADDR
20471: GO 20493
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20473: LD_ADDR_VAR 0 10
20477: PUSH
20478: LD_VAR 0 8
20482: PPUSH
20483: LD_VAR 0 1
20487: PPUSH
20488: CALL_OW 74
20492: ST_TO_ADDR
// if not enemy then
20493: LD_VAR 0 10
20497: NOT
20498: IFFALSE 20502
// exit ;
20500: GO 20903
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20502: LD_VAR 0 11
20506: PUSH
20507: LD_VAR 0 11
20511: PPUSH
20512: LD_VAR 0 10
20516: PPUSH
20517: CALL_OW 296
20521: PUSH
20522: LD_INT 13
20524: GREATER
20525: AND
20526: PUSH
20527: LD_VAR 0 1
20531: PPUSH
20532: LD_VAR 0 10
20536: PPUSH
20537: CALL_OW 296
20541: PUSH
20542: LD_INT 12
20544: GREATER
20545: OR
20546: IFFALSE 20550
// exit ;
20548: GO 20903
// missile := [ 1 ] ;
20550: LD_ADDR_VAR 0 14
20554: PUSH
20555: LD_INT 1
20557: PUSH
20558: EMPTY
20559: LIST
20560: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20561: LD_VAR 0 9
20565: PPUSH
20566: LD_VAR 0 12
20570: PPUSH
20571: CALL_OW 325
20575: IFFALSE 20604
// missile := Insert ( missile , missile + 1 , 2 ) ;
20577: LD_ADDR_VAR 0 14
20581: PUSH
20582: LD_VAR 0 14
20586: PPUSH
20587: LD_VAR 0 14
20591: PUSH
20592: LD_INT 1
20594: PLUS
20595: PPUSH
20596: LD_INT 2
20598: PPUSH
20599: CALL_OW 2
20603: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20604: LD_VAR 0 9
20608: PPUSH
20609: LD_VAR 0 13
20613: PPUSH
20614: CALL_OW 325
20618: PUSH
20619: LD_VAR 0 10
20623: PPUSH
20624: CALL_OW 255
20628: PPUSH
20629: LD_VAR 0 13
20633: PPUSH
20634: CALL_OW 325
20638: NOT
20639: AND
20640: IFFALSE 20669
// missile := Insert ( missile , missile + 1 , 3 ) ;
20642: LD_ADDR_VAR 0 14
20646: PUSH
20647: LD_VAR 0 14
20651: PPUSH
20652: LD_VAR 0 14
20656: PUSH
20657: LD_INT 1
20659: PLUS
20660: PPUSH
20661: LD_INT 3
20663: PPUSH
20664: CALL_OW 2
20668: ST_TO_ADDR
// if missile < 2 then
20669: LD_VAR 0 14
20673: PUSH
20674: LD_INT 2
20676: LESS
20677: IFFALSE 20681
// exit ;
20679: GO 20903
// x := GetX ( enemy ) ;
20681: LD_ADDR_VAR 0 4
20685: PUSH
20686: LD_VAR 0 10
20690: PPUSH
20691: CALL_OW 250
20695: ST_TO_ADDR
// y := GetY ( enemy ) ;
20696: LD_ADDR_VAR 0 5
20700: PUSH
20701: LD_VAR 0 10
20705: PPUSH
20706: CALL_OW 251
20710: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20711: LD_ADDR_VAR 0 6
20715: PUSH
20716: LD_VAR 0 4
20720: PUSH
20721: LD_INT 1
20723: NEG
20724: PPUSH
20725: LD_INT 1
20727: PPUSH
20728: CALL_OW 12
20732: PLUS
20733: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20734: LD_ADDR_VAR 0 7
20738: PUSH
20739: LD_VAR 0 5
20743: PUSH
20744: LD_INT 1
20746: NEG
20747: PPUSH
20748: LD_INT 1
20750: PPUSH
20751: CALL_OW 12
20755: PLUS
20756: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20757: LD_VAR 0 6
20761: PPUSH
20762: LD_VAR 0 7
20766: PPUSH
20767: CALL_OW 488
20771: NOT
20772: IFFALSE 20794
// begin _x := x ;
20774: LD_ADDR_VAR 0 6
20778: PUSH
20779: LD_VAR 0 4
20783: ST_TO_ADDR
// _y := y ;
20784: LD_ADDR_VAR 0 7
20788: PUSH
20789: LD_VAR 0 5
20793: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20794: LD_ADDR_VAR 0 3
20798: PUSH
20799: LD_INT 1
20801: PPUSH
20802: LD_VAR 0 14
20806: PPUSH
20807: CALL_OW 12
20811: ST_TO_ADDR
// case i of 1 :
20812: LD_VAR 0 3
20816: PUSH
20817: LD_INT 1
20819: DOUBLE
20820: EQUAL
20821: IFTRUE 20825
20823: GO 20842
20825: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20826: LD_VAR 0 1
20830: PPUSH
20831: LD_VAR 0 10
20835: PPUSH
20836: CALL_OW 115
20840: GO 20903
20842: LD_INT 2
20844: DOUBLE
20845: EQUAL
20846: IFTRUE 20850
20848: GO 20872
20850: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20851: LD_VAR 0 1
20855: PPUSH
20856: LD_VAR 0 6
20860: PPUSH
20861: LD_VAR 0 7
20865: PPUSH
20866: CALL_OW 153
20870: GO 20903
20872: LD_INT 3
20874: DOUBLE
20875: EQUAL
20876: IFTRUE 20880
20878: GO 20902
20880: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20881: LD_VAR 0 1
20885: PPUSH
20886: LD_VAR 0 6
20890: PPUSH
20891: LD_VAR 0 7
20895: PPUSH
20896: CALL_OW 154
20900: GO 20903
20902: POP
// end ;
20903: LD_VAR 0 2
20907: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20908: LD_INT 0
20910: PPUSH
20911: PPUSH
20912: PPUSH
20913: PPUSH
20914: PPUSH
20915: PPUSH
// if not unit or not building then
20916: LD_VAR 0 1
20920: NOT
20921: PUSH
20922: LD_VAR 0 2
20926: NOT
20927: OR
20928: IFFALSE 20932
// exit ;
20930: GO 21090
// x := GetX ( building ) ;
20932: LD_ADDR_VAR 0 5
20936: PUSH
20937: LD_VAR 0 2
20941: PPUSH
20942: CALL_OW 250
20946: ST_TO_ADDR
// y := GetY ( building ) ;
20947: LD_ADDR_VAR 0 6
20951: PUSH
20952: LD_VAR 0 2
20956: PPUSH
20957: CALL_OW 251
20961: ST_TO_ADDR
// for i = 0 to 5 do
20962: LD_ADDR_VAR 0 4
20966: PUSH
20967: DOUBLE
20968: LD_INT 0
20970: DEC
20971: ST_TO_ADDR
20972: LD_INT 5
20974: PUSH
20975: FOR_TO
20976: IFFALSE 21088
// begin _x := ShiftX ( x , i , 3 ) ;
20978: LD_ADDR_VAR 0 7
20982: PUSH
20983: LD_VAR 0 5
20987: PPUSH
20988: LD_VAR 0 4
20992: PPUSH
20993: LD_INT 3
20995: PPUSH
20996: CALL_OW 272
21000: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21001: LD_ADDR_VAR 0 8
21005: PUSH
21006: LD_VAR 0 6
21010: PPUSH
21011: LD_VAR 0 4
21015: PPUSH
21016: LD_INT 3
21018: PPUSH
21019: CALL_OW 273
21023: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21024: LD_VAR 0 7
21028: PPUSH
21029: LD_VAR 0 8
21033: PPUSH
21034: CALL_OW 488
21038: NOT
21039: IFFALSE 21043
// continue ;
21041: GO 20975
// if HexInfo ( _x , _y ) = 0 then
21043: LD_VAR 0 7
21047: PPUSH
21048: LD_VAR 0 8
21052: PPUSH
21053: CALL_OW 428
21057: PUSH
21058: LD_INT 0
21060: EQUAL
21061: IFFALSE 21086
// begin ComMoveXY ( unit , _x , _y ) ;
21063: LD_VAR 0 1
21067: PPUSH
21068: LD_VAR 0 7
21072: PPUSH
21073: LD_VAR 0 8
21077: PPUSH
21078: CALL_OW 111
// exit ;
21082: POP
21083: POP
21084: GO 21090
// end ; end ;
21086: GO 20975
21088: POP
21089: POP
// end ;
21090: LD_VAR 0 3
21094: RET
// export function ScanBase ( side , base_area ) ; begin
21095: LD_INT 0
21097: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21098: LD_ADDR_VAR 0 3
21102: PUSH
21103: LD_VAR 0 2
21107: PPUSH
21108: LD_INT 81
21110: PUSH
21111: LD_VAR 0 1
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PPUSH
21120: CALL_OW 70
21124: ST_TO_ADDR
// end ;
21125: LD_VAR 0 3
21129: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21130: LD_INT 0
21132: PPUSH
21133: PPUSH
21134: PPUSH
21135: PPUSH
// result := false ;
21136: LD_ADDR_VAR 0 2
21140: PUSH
21141: LD_INT 0
21143: ST_TO_ADDR
// side := GetSide ( unit ) ;
21144: LD_ADDR_VAR 0 3
21148: PUSH
21149: LD_VAR 0 1
21153: PPUSH
21154: CALL_OW 255
21158: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21159: LD_ADDR_VAR 0 4
21163: PUSH
21164: LD_VAR 0 1
21168: PPUSH
21169: CALL_OW 248
21173: ST_TO_ADDR
// case nat of 1 :
21174: LD_VAR 0 4
21178: PUSH
21179: LD_INT 1
21181: DOUBLE
21182: EQUAL
21183: IFTRUE 21187
21185: GO 21198
21187: POP
// tech := tech_lassight ; 2 :
21188: LD_ADDR_VAR 0 5
21192: PUSH
21193: LD_INT 12
21195: ST_TO_ADDR
21196: GO 21237
21198: LD_INT 2
21200: DOUBLE
21201: EQUAL
21202: IFTRUE 21206
21204: GO 21217
21206: POP
// tech := tech_mortar ; 3 :
21207: LD_ADDR_VAR 0 5
21211: PUSH
21212: LD_INT 41
21214: ST_TO_ADDR
21215: GO 21237
21217: LD_INT 3
21219: DOUBLE
21220: EQUAL
21221: IFTRUE 21225
21223: GO 21236
21225: POP
// tech := tech_bazooka ; end ;
21226: LD_ADDR_VAR 0 5
21230: PUSH
21231: LD_INT 44
21233: ST_TO_ADDR
21234: GO 21237
21236: POP
// if Researched ( side , tech ) then
21237: LD_VAR 0 3
21241: PPUSH
21242: LD_VAR 0 5
21246: PPUSH
21247: CALL_OW 325
21251: IFFALSE 21278
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21253: LD_ADDR_VAR 0 2
21257: PUSH
21258: LD_INT 5
21260: PUSH
21261: LD_INT 8
21263: PUSH
21264: LD_INT 9
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: LIST
21271: PUSH
21272: LD_VAR 0 4
21276: ARRAY
21277: ST_TO_ADDR
// end ;
21278: LD_VAR 0 2
21282: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21283: LD_INT 0
21285: PPUSH
21286: PPUSH
21287: PPUSH
// if not mines then
21288: LD_VAR 0 2
21292: NOT
21293: IFFALSE 21297
// exit ;
21295: GO 21441
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21297: LD_ADDR_VAR 0 5
21301: PUSH
21302: LD_INT 81
21304: PUSH
21305: LD_VAR 0 1
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 3
21316: PUSH
21317: LD_INT 21
21319: PUSH
21320: LD_INT 3
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PPUSH
21335: CALL_OW 69
21339: ST_TO_ADDR
// for i in mines do
21340: LD_ADDR_VAR 0 4
21344: PUSH
21345: LD_VAR 0 2
21349: PUSH
21350: FOR_IN
21351: IFFALSE 21439
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21353: LD_VAR 0 4
21357: PUSH
21358: LD_INT 1
21360: ARRAY
21361: PPUSH
21362: LD_VAR 0 4
21366: PUSH
21367: LD_INT 2
21369: ARRAY
21370: PPUSH
21371: CALL_OW 458
21375: NOT
21376: IFFALSE 21380
// continue ;
21378: GO 21350
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21380: LD_VAR 0 4
21384: PUSH
21385: LD_INT 1
21387: ARRAY
21388: PPUSH
21389: LD_VAR 0 4
21393: PUSH
21394: LD_INT 2
21396: ARRAY
21397: PPUSH
21398: CALL_OW 428
21402: PUSH
21403: LD_VAR 0 5
21407: IN
21408: IFFALSE 21437
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21410: LD_VAR 0 4
21414: PUSH
21415: LD_INT 1
21417: ARRAY
21418: PPUSH
21419: LD_VAR 0 4
21423: PUSH
21424: LD_INT 2
21426: ARRAY
21427: PPUSH
21428: LD_VAR 0 1
21432: PPUSH
21433: CALL_OW 456
// end ;
21437: GO 21350
21439: POP
21440: POP
// end ;
21441: LD_VAR 0 3
21445: RET
// export function Count ( array ) ; var i ; begin
21446: LD_INT 0
21448: PPUSH
21449: PPUSH
// result := 0 ;
21450: LD_ADDR_VAR 0 2
21454: PUSH
21455: LD_INT 0
21457: ST_TO_ADDR
// for i in array do
21458: LD_ADDR_VAR 0 3
21462: PUSH
21463: LD_VAR 0 1
21467: PUSH
21468: FOR_IN
21469: IFFALSE 21493
// if i then
21471: LD_VAR 0 3
21475: IFFALSE 21491
// result := result + 1 ;
21477: LD_ADDR_VAR 0 2
21481: PUSH
21482: LD_VAR 0 2
21486: PUSH
21487: LD_INT 1
21489: PLUS
21490: ST_TO_ADDR
21491: GO 21468
21493: POP
21494: POP
// end ;
21495: LD_VAR 0 2
21499: RET
// export function IsEmpty ( building ) ; begin
21500: LD_INT 0
21502: PPUSH
// if not building then
21503: LD_VAR 0 1
21507: NOT
21508: IFFALSE 21512
// exit ;
21510: GO 21555
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
21512: LD_ADDR_VAR 0 2
21516: PUSH
21517: LD_VAR 0 1
21521: PUSH
21522: LD_INT 22
21524: PUSH
21525: LD_VAR 0 1
21529: PPUSH
21530: CALL_OW 255
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 58
21541: PUSH
21542: EMPTY
21543: LIST
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PPUSH
21549: CALL_OW 69
21553: IN
21554: ST_TO_ADDR
// end ;
21555: LD_VAR 0 2
21559: RET
// export function IsNotFull ( building ) ; begin
21560: LD_INT 0
21562: PPUSH
// if not building then
21563: LD_VAR 0 1
21567: NOT
21568: IFFALSE 21572
// exit ;
21570: GO 21591
// result := UnitsInside ( building ) < 6 ;
21572: LD_ADDR_VAR 0 2
21576: PUSH
21577: LD_VAR 0 1
21581: PPUSH
21582: CALL_OW 313
21586: PUSH
21587: LD_INT 6
21589: LESS
21590: ST_TO_ADDR
// end ;
21591: LD_VAR 0 2
21595: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
21596: LD_INT 0
21598: PPUSH
21599: PPUSH
21600: PPUSH
21601: PPUSH
// tmp := [ ] ;
21602: LD_ADDR_VAR 0 3
21606: PUSH
21607: EMPTY
21608: ST_TO_ADDR
// list := [ ] ;
21609: LD_ADDR_VAR 0 5
21613: PUSH
21614: EMPTY
21615: ST_TO_ADDR
// for i = 16 to 25 do
21616: LD_ADDR_VAR 0 4
21620: PUSH
21621: DOUBLE
21622: LD_INT 16
21624: DEC
21625: ST_TO_ADDR
21626: LD_INT 25
21628: PUSH
21629: FOR_TO
21630: IFFALSE 21703
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
21632: LD_ADDR_VAR 0 3
21636: PUSH
21637: LD_VAR 0 3
21641: PUSH
21642: LD_INT 22
21644: PUSH
21645: LD_VAR 0 1
21649: PPUSH
21650: CALL_OW 255
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 91
21661: PUSH
21662: LD_VAR 0 1
21666: PUSH
21667: LD_INT 6
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 30
21677: PUSH
21678: LD_VAR 0 4
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: LIST
21691: PUSH
21692: EMPTY
21693: LIST
21694: PPUSH
21695: CALL_OW 69
21699: ADD
21700: ST_TO_ADDR
21701: GO 21629
21703: POP
21704: POP
// for i = 1 to tmp do
21705: LD_ADDR_VAR 0 4
21709: PUSH
21710: DOUBLE
21711: LD_INT 1
21713: DEC
21714: ST_TO_ADDR
21715: LD_VAR 0 3
21719: PUSH
21720: FOR_TO
21721: IFFALSE 21809
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
21723: LD_ADDR_VAR 0 5
21727: PUSH
21728: LD_VAR 0 5
21732: PUSH
21733: LD_VAR 0 3
21737: PUSH
21738: LD_VAR 0 4
21742: ARRAY
21743: PPUSH
21744: CALL_OW 266
21748: PUSH
21749: LD_VAR 0 3
21753: PUSH
21754: LD_VAR 0 4
21758: ARRAY
21759: PPUSH
21760: CALL_OW 250
21764: PUSH
21765: LD_VAR 0 3
21769: PUSH
21770: LD_VAR 0 4
21774: ARRAY
21775: PPUSH
21776: CALL_OW 251
21780: PUSH
21781: LD_VAR 0 3
21785: PUSH
21786: LD_VAR 0 4
21790: ARRAY
21791: PPUSH
21792: CALL_OW 254
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: PUSH
21803: EMPTY
21804: LIST
21805: ADD
21806: ST_TO_ADDR
21807: GO 21720
21809: POP
21810: POP
// result := list ;
21811: LD_ADDR_VAR 0 2
21815: PUSH
21816: LD_VAR 0 5
21820: ST_TO_ADDR
// end ;
21821: LD_VAR 0 2
21825: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
21826: LD_INT 0
21828: PPUSH
21829: PPUSH
21830: PPUSH
21831: PPUSH
21832: PPUSH
21833: PPUSH
21834: PPUSH
// if not factory then
21835: LD_VAR 0 1
21839: NOT
21840: IFFALSE 21844
// exit ;
21842: GO 22437
// if control = control_apeman then
21844: LD_VAR 0 4
21848: PUSH
21849: LD_INT 5
21851: EQUAL
21852: IFFALSE 21961
// begin tmp := UnitsInside ( factory ) ;
21854: LD_ADDR_VAR 0 8
21858: PUSH
21859: LD_VAR 0 1
21863: PPUSH
21864: CALL_OW 313
21868: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
21869: LD_VAR 0 8
21873: PPUSH
21874: LD_INT 25
21876: PUSH
21877: LD_INT 12
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PPUSH
21884: CALL_OW 72
21888: NOT
21889: IFFALSE 21899
// control := control_manual ;
21891: LD_ADDR_VAR 0 4
21895: PUSH
21896: LD_INT 1
21898: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
21899: LD_ADDR_VAR 0 8
21903: PUSH
21904: LD_VAR 0 1
21908: PPUSH
21909: CALL 21596 0 1
21913: ST_TO_ADDR
// if tmp then
21914: LD_VAR 0 8
21918: IFFALSE 21961
// begin for i in tmp do
21920: LD_ADDR_VAR 0 7
21924: PUSH
21925: LD_VAR 0 8
21929: PUSH
21930: FOR_IN
21931: IFFALSE 21959
// if i [ 1 ] = b_ext_radio then
21933: LD_VAR 0 7
21937: PUSH
21938: LD_INT 1
21940: ARRAY
21941: PUSH
21942: LD_INT 22
21944: EQUAL
21945: IFFALSE 21957
// begin control := control_remote ;
21947: LD_ADDR_VAR 0 4
21951: PUSH
21952: LD_INT 2
21954: ST_TO_ADDR
// break ;
21955: GO 21959
// end ;
21957: GO 21930
21959: POP
21960: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
21961: LD_VAR 0 1
21965: PPUSH
21966: LD_VAR 0 2
21970: PPUSH
21971: LD_VAR 0 3
21975: PPUSH
21976: LD_VAR 0 4
21980: PPUSH
21981: LD_VAR 0 5
21985: PPUSH
21986: CALL_OW 448
21990: IFFALSE 22025
// begin result := [ chassis , engine , control , weapon ] ;
21992: LD_ADDR_VAR 0 6
21996: PUSH
21997: LD_VAR 0 2
22001: PUSH
22002: LD_VAR 0 3
22006: PUSH
22007: LD_VAR 0 4
22011: PUSH
22012: LD_VAR 0 5
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: ST_TO_ADDR
// exit ;
22023: GO 22437
// end ; _chassis := AvailableChassisList ( factory ) ;
22025: LD_ADDR_VAR 0 9
22029: PUSH
22030: LD_VAR 0 1
22034: PPUSH
22035: CALL_OW 475
22039: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22040: LD_ADDR_VAR 0 11
22044: PUSH
22045: LD_VAR 0 1
22049: PPUSH
22050: CALL_OW 476
22054: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22055: LD_ADDR_VAR 0 12
22059: PUSH
22060: LD_VAR 0 1
22064: PPUSH
22065: CALL_OW 477
22069: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22070: LD_ADDR_VAR 0 10
22074: PUSH
22075: LD_VAR 0 1
22079: PPUSH
22080: CALL_OW 478
22084: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22085: LD_VAR 0 9
22089: NOT
22090: PUSH
22091: LD_VAR 0 11
22095: NOT
22096: OR
22097: PUSH
22098: LD_VAR 0 12
22102: NOT
22103: OR
22104: PUSH
22105: LD_VAR 0 10
22109: NOT
22110: OR
22111: IFFALSE 22146
// begin result := [ chassis , engine , control , weapon ] ;
22113: LD_ADDR_VAR 0 6
22117: PUSH
22118: LD_VAR 0 2
22122: PUSH
22123: LD_VAR 0 3
22127: PUSH
22128: LD_VAR 0 4
22132: PUSH
22133: LD_VAR 0 5
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: ST_TO_ADDR
// exit ;
22144: GO 22437
// end ; if not chassis in _chassis then
22146: LD_VAR 0 2
22150: PUSH
22151: LD_VAR 0 9
22155: IN
22156: NOT
22157: IFFALSE 22183
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22159: LD_ADDR_VAR 0 2
22163: PUSH
22164: LD_VAR 0 9
22168: PUSH
22169: LD_INT 1
22171: PPUSH
22172: LD_VAR 0 9
22176: PPUSH
22177: CALL_OW 12
22181: ARRAY
22182: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22183: LD_VAR 0 2
22187: PPUSH
22188: LD_VAR 0 3
22192: PPUSH
22193: CALL 22442 0 2
22197: NOT
22198: IFFALSE 22257
// repeat engine := _engine [ 1 ] ;
22200: LD_ADDR_VAR 0 3
22204: PUSH
22205: LD_VAR 0 11
22209: PUSH
22210: LD_INT 1
22212: ARRAY
22213: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22214: LD_ADDR_VAR 0 11
22218: PUSH
22219: LD_VAR 0 11
22223: PPUSH
22224: LD_INT 1
22226: PPUSH
22227: CALL_OW 3
22231: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22232: LD_VAR 0 2
22236: PPUSH
22237: LD_VAR 0 3
22241: PPUSH
22242: CALL 22442 0 2
22246: PUSH
22247: LD_VAR 0 11
22251: PUSH
22252: EMPTY
22253: EQUAL
22254: OR
22255: IFFALSE 22200
// if not control in _control then
22257: LD_VAR 0 4
22261: PUSH
22262: LD_VAR 0 12
22266: IN
22267: NOT
22268: IFFALSE 22294
// control := _control [ rand ( 1 , _control ) ] ;
22270: LD_ADDR_VAR 0 4
22274: PUSH
22275: LD_VAR 0 12
22279: PUSH
22280: LD_INT 1
22282: PPUSH
22283: LD_VAR 0 12
22287: PPUSH
22288: CALL_OW 12
22292: ARRAY
22293: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22294: LD_VAR 0 2
22298: PPUSH
22299: LD_VAR 0 5
22303: PPUSH
22304: CALL 22662 0 2
22308: NOT
22309: IFFALSE 22368
// repeat weapon := _weapon [ 1 ] ;
22311: LD_ADDR_VAR 0 5
22315: PUSH
22316: LD_VAR 0 10
22320: PUSH
22321: LD_INT 1
22323: ARRAY
22324: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22325: LD_ADDR_VAR 0 10
22329: PUSH
22330: LD_VAR 0 10
22334: PPUSH
22335: LD_INT 1
22337: PPUSH
22338: CALL_OW 3
22342: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22343: LD_VAR 0 2
22347: PPUSH
22348: LD_VAR 0 5
22352: PPUSH
22353: CALL 22662 0 2
22357: PUSH
22358: LD_VAR 0 10
22362: PUSH
22363: EMPTY
22364: EQUAL
22365: OR
22366: IFFALSE 22311
// result := [ ] ;
22368: LD_ADDR_VAR 0 6
22372: PUSH
22373: EMPTY
22374: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22375: LD_VAR 0 1
22379: PPUSH
22380: LD_VAR 0 2
22384: PPUSH
22385: LD_VAR 0 3
22389: PPUSH
22390: LD_VAR 0 4
22394: PPUSH
22395: LD_VAR 0 5
22399: PPUSH
22400: CALL_OW 448
22404: IFFALSE 22437
// result := [ chassis , engine , control , weapon ] ;
22406: LD_ADDR_VAR 0 6
22410: PUSH
22411: LD_VAR 0 2
22415: PUSH
22416: LD_VAR 0 3
22420: PUSH
22421: LD_VAR 0 4
22425: PUSH
22426: LD_VAR 0 5
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: ST_TO_ADDR
// end ;
22437: LD_VAR 0 6
22441: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22442: LD_INT 0
22444: PPUSH
// if not chassis or not engine then
22445: LD_VAR 0 1
22449: NOT
22450: PUSH
22451: LD_VAR 0 2
22455: NOT
22456: OR
22457: IFFALSE 22461
// exit ;
22459: GO 22657
// case engine of engine_solar :
22461: LD_VAR 0 2
22465: PUSH
22466: LD_INT 2
22468: DOUBLE
22469: EQUAL
22470: IFTRUE 22474
22472: GO 22512
22474: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
22475: LD_ADDR_VAR 0 3
22479: PUSH
22480: LD_INT 11
22482: PUSH
22483: LD_INT 12
22485: PUSH
22486: LD_INT 13
22488: PUSH
22489: LD_INT 14
22491: PUSH
22492: LD_INT 1
22494: PUSH
22495: LD_INT 2
22497: PUSH
22498: LD_INT 3
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: ST_TO_ADDR
22510: GO 22641
22512: LD_INT 1
22514: DOUBLE
22515: EQUAL
22516: IFTRUE 22520
22518: GO 22582
22520: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
22521: LD_ADDR_VAR 0 3
22525: PUSH
22526: LD_INT 11
22528: PUSH
22529: LD_INT 12
22531: PUSH
22532: LD_INT 13
22534: PUSH
22535: LD_INT 14
22537: PUSH
22538: LD_INT 1
22540: PUSH
22541: LD_INT 2
22543: PUSH
22544: LD_INT 3
22546: PUSH
22547: LD_INT 4
22549: PUSH
22550: LD_INT 5
22552: PUSH
22553: LD_INT 21
22555: PUSH
22556: LD_INT 23
22558: PUSH
22559: LD_INT 22
22561: PUSH
22562: LD_INT 24
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: ST_TO_ADDR
22580: GO 22641
22582: LD_INT 3
22584: DOUBLE
22585: EQUAL
22586: IFTRUE 22590
22588: GO 22640
22590: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22591: LD_ADDR_VAR 0 3
22595: PUSH
22596: LD_INT 13
22598: PUSH
22599: LD_INT 14
22601: PUSH
22602: LD_INT 2
22604: PUSH
22605: LD_INT 3
22607: PUSH
22608: LD_INT 4
22610: PUSH
22611: LD_INT 5
22613: PUSH
22614: LD_INT 21
22616: PUSH
22617: LD_INT 22
22619: PUSH
22620: LD_INT 23
22622: PUSH
22623: LD_INT 24
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: ST_TO_ADDR
22638: GO 22641
22640: POP
// result := ( chassis in result ) ;
22641: LD_ADDR_VAR 0 3
22645: PUSH
22646: LD_VAR 0 1
22650: PUSH
22651: LD_VAR 0 3
22655: IN
22656: ST_TO_ADDR
// end ;
22657: LD_VAR 0 3
22661: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
22662: LD_INT 0
22664: PPUSH
// if not chassis or not weapon then
22665: LD_VAR 0 1
22669: NOT
22670: PUSH
22671: LD_VAR 0 2
22675: NOT
22676: OR
22677: IFFALSE 22681
// exit ;
22679: GO 23707
// case weapon of us_machine_gun :
22681: LD_VAR 0 2
22685: PUSH
22686: LD_INT 2
22688: DOUBLE
22689: EQUAL
22690: IFTRUE 22694
22692: GO 22724
22694: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
22695: LD_ADDR_VAR 0 3
22699: PUSH
22700: LD_INT 1
22702: PUSH
22703: LD_INT 2
22705: PUSH
22706: LD_INT 3
22708: PUSH
22709: LD_INT 4
22711: PUSH
22712: LD_INT 5
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: ST_TO_ADDR
22722: GO 23691
22724: LD_INT 3
22726: DOUBLE
22727: EQUAL
22728: IFTRUE 22732
22730: GO 22762
22732: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
22733: LD_ADDR_VAR 0 3
22737: PUSH
22738: LD_INT 1
22740: PUSH
22741: LD_INT 2
22743: PUSH
22744: LD_INT 3
22746: PUSH
22747: LD_INT 4
22749: PUSH
22750: LD_INT 5
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: ST_TO_ADDR
22760: GO 23691
22762: LD_INT 11
22764: DOUBLE
22765: EQUAL
22766: IFTRUE 22770
22768: GO 22800
22770: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
22771: LD_ADDR_VAR 0 3
22775: PUSH
22776: LD_INT 1
22778: PUSH
22779: LD_INT 2
22781: PUSH
22782: LD_INT 3
22784: PUSH
22785: LD_INT 4
22787: PUSH
22788: LD_INT 5
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: ST_TO_ADDR
22798: GO 23691
22800: LD_INT 4
22802: DOUBLE
22803: EQUAL
22804: IFTRUE 22808
22806: GO 22834
22808: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
22809: LD_ADDR_VAR 0 3
22813: PUSH
22814: LD_INT 2
22816: PUSH
22817: LD_INT 3
22819: PUSH
22820: LD_INT 4
22822: PUSH
22823: LD_INT 5
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: ST_TO_ADDR
22832: GO 23691
22834: LD_INT 5
22836: DOUBLE
22837: EQUAL
22838: IFTRUE 22842
22840: GO 22868
22842: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
22843: LD_ADDR_VAR 0 3
22847: PUSH
22848: LD_INT 2
22850: PUSH
22851: LD_INT 3
22853: PUSH
22854: LD_INT 4
22856: PUSH
22857: LD_INT 5
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: ST_TO_ADDR
22866: GO 23691
22868: LD_INT 9
22870: DOUBLE
22871: EQUAL
22872: IFTRUE 22876
22874: GO 22902
22876: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
22877: LD_ADDR_VAR 0 3
22881: PUSH
22882: LD_INT 2
22884: PUSH
22885: LD_INT 3
22887: PUSH
22888: LD_INT 4
22890: PUSH
22891: LD_INT 5
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: ST_TO_ADDR
22900: GO 23691
22902: LD_INT 7
22904: DOUBLE
22905: EQUAL
22906: IFTRUE 22910
22908: GO 22936
22910: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
22911: LD_ADDR_VAR 0 3
22915: PUSH
22916: LD_INT 2
22918: PUSH
22919: LD_INT 3
22921: PUSH
22922: LD_INT 4
22924: PUSH
22925: LD_INT 5
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: ST_TO_ADDR
22934: GO 23691
22936: LD_INT 12
22938: DOUBLE
22939: EQUAL
22940: IFTRUE 22944
22942: GO 22970
22944: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
22945: LD_ADDR_VAR 0 3
22949: PUSH
22950: LD_INT 2
22952: PUSH
22953: LD_INT 3
22955: PUSH
22956: LD_INT 4
22958: PUSH
22959: LD_INT 5
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: ST_TO_ADDR
22968: GO 23691
22970: LD_INT 13
22972: DOUBLE
22973: EQUAL
22974: IFTRUE 22978
22976: GO 23004
22978: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
22979: LD_ADDR_VAR 0 3
22983: PUSH
22984: LD_INT 2
22986: PUSH
22987: LD_INT 3
22989: PUSH
22990: LD_INT 4
22992: PUSH
22993: LD_INT 5
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: ST_TO_ADDR
23002: GO 23691
23004: LD_INT 14
23006: DOUBLE
23007: EQUAL
23008: IFTRUE 23012
23010: GO 23030
23012: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23013: LD_ADDR_VAR 0 3
23017: PUSH
23018: LD_INT 4
23020: PUSH
23021: LD_INT 5
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: ST_TO_ADDR
23028: GO 23691
23030: LD_INT 6
23032: DOUBLE
23033: EQUAL
23034: IFTRUE 23038
23036: GO 23056
23038: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23039: LD_ADDR_VAR 0 3
23043: PUSH
23044: LD_INT 4
23046: PUSH
23047: LD_INT 5
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: ST_TO_ADDR
23054: GO 23691
23056: LD_INT 10
23058: DOUBLE
23059: EQUAL
23060: IFTRUE 23064
23062: GO 23082
23064: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23065: LD_ADDR_VAR 0 3
23069: PUSH
23070: LD_INT 4
23072: PUSH
23073: LD_INT 5
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: ST_TO_ADDR
23080: GO 23691
23082: LD_INT 22
23084: DOUBLE
23085: EQUAL
23086: IFTRUE 23090
23088: GO 23116
23090: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23091: LD_ADDR_VAR 0 3
23095: PUSH
23096: LD_INT 11
23098: PUSH
23099: LD_INT 12
23101: PUSH
23102: LD_INT 13
23104: PUSH
23105: LD_INT 14
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: ST_TO_ADDR
23114: GO 23691
23116: LD_INT 23
23118: DOUBLE
23119: EQUAL
23120: IFTRUE 23124
23122: GO 23150
23124: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23125: LD_ADDR_VAR 0 3
23129: PUSH
23130: LD_INT 11
23132: PUSH
23133: LD_INT 12
23135: PUSH
23136: LD_INT 13
23138: PUSH
23139: LD_INT 14
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: ST_TO_ADDR
23148: GO 23691
23150: LD_INT 24
23152: DOUBLE
23153: EQUAL
23154: IFTRUE 23158
23156: GO 23184
23158: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23159: LD_ADDR_VAR 0 3
23163: PUSH
23164: LD_INT 11
23166: PUSH
23167: LD_INT 12
23169: PUSH
23170: LD_INT 13
23172: PUSH
23173: LD_INT 14
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: ST_TO_ADDR
23182: GO 23691
23184: LD_INT 30
23186: DOUBLE
23187: EQUAL
23188: IFTRUE 23192
23190: GO 23218
23192: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23193: LD_ADDR_VAR 0 3
23197: PUSH
23198: LD_INT 11
23200: PUSH
23201: LD_INT 12
23203: PUSH
23204: LD_INT 13
23206: PUSH
23207: LD_INT 14
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: ST_TO_ADDR
23216: GO 23691
23218: LD_INT 25
23220: DOUBLE
23221: EQUAL
23222: IFTRUE 23226
23224: GO 23244
23226: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23227: LD_ADDR_VAR 0 3
23231: PUSH
23232: LD_INT 13
23234: PUSH
23235: LD_INT 14
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: ST_TO_ADDR
23242: GO 23691
23244: LD_INT 27
23246: DOUBLE
23247: EQUAL
23248: IFTRUE 23252
23250: GO 23270
23252: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23253: LD_ADDR_VAR 0 3
23257: PUSH
23258: LD_INT 13
23260: PUSH
23261: LD_INT 14
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: ST_TO_ADDR
23268: GO 23691
23270: LD_INT 28
23272: DOUBLE
23273: EQUAL
23274: IFTRUE 23278
23276: GO 23296
23278: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23279: LD_ADDR_VAR 0 3
23283: PUSH
23284: LD_INT 13
23286: PUSH
23287: LD_INT 14
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: ST_TO_ADDR
23294: GO 23691
23296: LD_INT 29
23298: DOUBLE
23299: EQUAL
23300: IFTRUE 23304
23302: GO 23322
23304: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23305: LD_ADDR_VAR 0 3
23309: PUSH
23310: LD_INT 13
23312: PUSH
23313: LD_INT 14
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: ST_TO_ADDR
23320: GO 23691
23322: LD_INT 31
23324: DOUBLE
23325: EQUAL
23326: IFTRUE 23330
23328: GO 23348
23330: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23331: LD_ADDR_VAR 0 3
23335: PUSH
23336: LD_INT 13
23338: PUSH
23339: LD_INT 14
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: ST_TO_ADDR
23346: GO 23691
23348: LD_INT 26
23350: DOUBLE
23351: EQUAL
23352: IFTRUE 23356
23354: GO 23374
23356: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23357: LD_ADDR_VAR 0 3
23361: PUSH
23362: LD_INT 13
23364: PUSH
23365: LD_INT 14
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: ST_TO_ADDR
23372: GO 23691
23374: LD_INT 42
23376: DOUBLE
23377: EQUAL
23378: IFTRUE 23382
23380: GO 23408
23382: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23383: LD_ADDR_VAR 0 3
23387: PUSH
23388: LD_INT 21
23390: PUSH
23391: LD_INT 22
23393: PUSH
23394: LD_INT 23
23396: PUSH
23397: LD_INT 24
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: ST_TO_ADDR
23406: GO 23691
23408: LD_INT 43
23410: DOUBLE
23411: EQUAL
23412: IFTRUE 23416
23414: GO 23442
23416: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23417: LD_ADDR_VAR 0 3
23421: PUSH
23422: LD_INT 21
23424: PUSH
23425: LD_INT 22
23427: PUSH
23428: LD_INT 23
23430: PUSH
23431: LD_INT 24
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: ST_TO_ADDR
23440: GO 23691
23442: LD_INT 44
23444: DOUBLE
23445: EQUAL
23446: IFTRUE 23450
23448: GO 23476
23450: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
23451: LD_ADDR_VAR 0 3
23455: PUSH
23456: LD_INT 21
23458: PUSH
23459: LD_INT 22
23461: PUSH
23462: LD_INT 23
23464: PUSH
23465: LD_INT 24
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: ST_TO_ADDR
23474: GO 23691
23476: LD_INT 45
23478: DOUBLE
23479: EQUAL
23480: IFTRUE 23484
23482: GO 23510
23484: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
23485: LD_ADDR_VAR 0 3
23489: PUSH
23490: LD_INT 21
23492: PUSH
23493: LD_INT 22
23495: PUSH
23496: LD_INT 23
23498: PUSH
23499: LD_INT 24
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: ST_TO_ADDR
23508: GO 23691
23510: LD_INT 49
23512: DOUBLE
23513: EQUAL
23514: IFTRUE 23518
23516: GO 23544
23518: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
23519: LD_ADDR_VAR 0 3
23523: PUSH
23524: LD_INT 21
23526: PUSH
23527: LD_INT 22
23529: PUSH
23530: LD_INT 23
23532: PUSH
23533: LD_INT 24
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: ST_TO_ADDR
23542: GO 23691
23544: LD_INT 51
23546: DOUBLE
23547: EQUAL
23548: IFTRUE 23552
23550: GO 23578
23552: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
23553: LD_ADDR_VAR 0 3
23557: PUSH
23558: LD_INT 21
23560: PUSH
23561: LD_INT 22
23563: PUSH
23564: LD_INT 23
23566: PUSH
23567: LD_INT 24
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: ST_TO_ADDR
23576: GO 23691
23578: LD_INT 52
23580: DOUBLE
23581: EQUAL
23582: IFTRUE 23586
23584: GO 23612
23586: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
23587: LD_ADDR_VAR 0 3
23591: PUSH
23592: LD_INT 21
23594: PUSH
23595: LD_INT 22
23597: PUSH
23598: LD_INT 23
23600: PUSH
23601: LD_INT 24
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: ST_TO_ADDR
23610: GO 23691
23612: LD_INT 53
23614: DOUBLE
23615: EQUAL
23616: IFTRUE 23620
23618: GO 23638
23620: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
23621: LD_ADDR_VAR 0 3
23625: PUSH
23626: LD_INT 23
23628: PUSH
23629: LD_INT 24
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: ST_TO_ADDR
23636: GO 23691
23638: LD_INT 46
23640: DOUBLE
23641: EQUAL
23642: IFTRUE 23646
23644: GO 23664
23646: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
23647: LD_ADDR_VAR 0 3
23651: PUSH
23652: LD_INT 23
23654: PUSH
23655: LD_INT 24
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: ST_TO_ADDR
23662: GO 23691
23664: LD_INT 47
23666: DOUBLE
23667: EQUAL
23668: IFTRUE 23672
23670: GO 23690
23672: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23673: LD_ADDR_VAR 0 3
23677: PUSH
23678: LD_INT 23
23680: PUSH
23681: LD_INT 24
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: ST_TO_ADDR
23688: GO 23691
23690: POP
// result := ( chassis in result ) ;
23691: LD_ADDR_VAR 0 3
23695: PUSH
23696: LD_VAR 0 1
23700: PUSH
23701: LD_VAR 0 3
23705: IN
23706: ST_TO_ADDR
// end ;
23707: LD_VAR 0 3
23711: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
23712: LD_INT 0
23714: PPUSH
23715: PPUSH
23716: PPUSH
23717: PPUSH
23718: PPUSH
23719: PPUSH
23720: PPUSH
// result := array ;
23721: LD_ADDR_VAR 0 5
23725: PUSH
23726: LD_VAR 0 1
23730: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
23731: LD_VAR 0 1
23735: NOT
23736: PUSH
23737: LD_VAR 0 2
23741: NOT
23742: OR
23743: PUSH
23744: LD_VAR 0 3
23748: NOT
23749: OR
23750: PUSH
23751: LD_VAR 0 2
23755: PUSH
23756: LD_VAR 0 1
23760: GREATER
23761: OR
23762: PUSH
23763: LD_VAR 0 3
23767: PUSH
23768: LD_VAR 0 1
23772: GREATER
23773: OR
23774: IFFALSE 23778
// exit ;
23776: GO 24074
// if direction then
23778: LD_VAR 0 4
23782: IFFALSE 23846
// begin d := 1 ;
23784: LD_ADDR_VAR 0 9
23788: PUSH
23789: LD_INT 1
23791: ST_TO_ADDR
// if i_from > i_to then
23792: LD_VAR 0 2
23796: PUSH
23797: LD_VAR 0 3
23801: GREATER
23802: IFFALSE 23828
// length := ( array - i_from ) + i_to else
23804: LD_ADDR_VAR 0 11
23808: PUSH
23809: LD_VAR 0 1
23813: PUSH
23814: LD_VAR 0 2
23818: MINUS
23819: PUSH
23820: LD_VAR 0 3
23824: PLUS
23825: ST_TO_ADDR
23826: GO 23844
// length := i_to - i_from ;
23828: LD_ADDR_VAR 0 11
23832: PUSH
23833: LD_VAR 0 3
23837: PUSH
23838: LD_VAR 0 2
23842: MINUS
23843: ST_TO_ADDR
// end else
23844: GO 23907
// begin d := - 1 ;
23846: LD_ADDR_VAR 0 9
23850: PUSH
23851: LD_INT 1
23853: NEG
23854: ST_TO_ADDR
// if i_from > i_to then
23855: LD_VAR 0 2
23859: PUSH
23860: LD_VAR 0 3
23864: GREATER
23865: IFFALSE 23885
// length := i_from - i_to else
23867: LD_ADDR_VAR 0 11
23871: PUSH
23872: LD_VAR 0 2
23876: PUSH
23877: LD_VAR 0 3
23881: MINUS
23882: ST_TO_ADDR
23883: GO 23907
// length := ( array - i_to ) + i_from ;
23885: LD_ADDR_VAR 0 11
23889: PUSH
23890: LD_VAR 0 1
23894: PUSH
23895: LD_VAR 0 3
23899: MINUS
23900: PUSH
23901: LD_VAR 0 2
23905: PLUS
23906: ST_TO_ADDR
// end ; if not length then
23907: LD_VAR 0 11
23911: NOT
23912: IFFALSE 23916
// exit ;
23914: GO 24074
// tmp := array ;
23916: LD_ADDR_VAR 0 10
23920: PUSH
23921: LD_VAR 0 1
23925: ST_TO_ADDR
// for i = 1 to length do
23926: LD_ADDR_VAR 0 6
23930: PUSH
23931: DOUBLE
23932: LD_INT 1
23934: DEC
23935: ST_TO_ADDR
23936: LD_VAR 0 11
23940: PUSH
23941: FOR_TO
23942: IFFALSE 24062
// begin for j = 1 to array do
23944: LD_ADDR_VAR 0 7
23948: PUSH
23949: DOUBLE
23950: LD_INT 1
23952: DEC
23953: ST_TO_ADDR
23954: LD_VAR 0 1
23958: PUSH
23959: FOR_TO
23960: IFFALSE 24048
// begin k := j + d ;
23962: LD_ADDR_VAR 0 8
23966: PUSH
23967: LD_VAR 0 7
23971: PUSH
23972: LD_VAR 0 9
23976: PLUS
23977: ST_TO_ADDR
// if k > array then
23978: LD_VAR 0 8
23982: PUSH
23983: LD_VAR 0 1
23987: GREATER
23988: IFFALSE 23998
// k := 1 ;
23990: LD_ADDR_VAR 0 8
23994: PUSH
23995: LD_INT 1
23997: ST_TO_ADDR
// if not k then
23998: LD_VAR 0 8
24002: NOT
24003: IFFALSE 24015
// k := array ;
24005: LD_ADDR_VAR 0 8
24009: PUSH
24010: LD_VAR 0 1
24014: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24015: LD_ADDR_VAR 0 10
24019: PUSH
24020: LD_VAR 0 10
24024: PPUSH
24025: LD_VAR 0 8
24029: PPUSH
24030: LD_VAR 0 1
24034: PUSH
24035: LD_VAR 0 7
24039: ARRAY
24040: PPUSH
24041: CALL_OW 1
24045: ST_TO_ADDR
// end ;
24046: GO 23959
24048: POP
24049: POP
// array := tmp ;
24050: LD_ADDR_VAR 0 1
24054: PUSH
24055: LD_VAR 0 10
24059: ST_TO_ADDR
// end ;
24060: GO 23941
24062: POP
24063: POP
// result := array ;
24064: LD_ADDR_VAR 0 5
24068: PUSH
24069: LD_VAR 0 1
24073: ST_TO_ADDR
// end ;
24074: LD_VAR 0 5
24078: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24079: LD_INT 0
24081: PPUSH
24082: PPUSH
// result := 0 ;
24083: LD_ADDR_VAR 0 3
24087: PUSH
24088: LD_INT 0
24090: ST_TO_ADDR
// if not array or not value in array then
24091: LD_VAR 0 1
24095: NOT
24096: PUSH
24097: LD_VAR 0 2
24101: PUSH
24102: LD_VAR 0 1
24106: IN
24107: NOT
24108: OR
24109: IFFALSE 24113
// exit ;
24111: GO 24167
// for i = 1 to array do
24113: LD_ADDR_VAR 0 4
24117: PUSH
24118: DOUBLE
24119: LD_INT 1
24121: DEC
24122: ST_TO_ADDR
24123: LD_VAR 0 1
24127: PUSH
24128: FOR_TO
24129: IFFALSE 24165
// if value = array [ i ] then
24131: LD_VAR 0 2
24135: PUSH
24136: LD_VAR 0 1
24140: PUSH
24141: LD_VAR 0 4
24145: ARRAY
24146: EQUAL
24147: IFFALSE 24163
// begin result := i ;
24149: LD_ADDR_VAR 0 3
24153: PUSH
24154: LD_VAR 0 4
24158: ST_TO_ADDR
// exit ;
24159: POP
24160: POP
24161: GO 24167
// end ;
24163: GO 24128
24165: POP
24166: POP
// end ;
24167: LD_VAR 0 3
24171: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24172: LD_INT 0
24174: PPUSH
// vc_chassis := chassis ;
24175: LD_ADDR_OWVAR 37
24179: PUSH
24180: LD_VAR 0 1
24184: ST_TO_ADDR
// vc_engine := engine ;
24185: LD_ADDR_OWVAR 39
24189: PUSH
24190: LD_VAR 0 2
24194: ST_TO_ADDR
// vc_control := control ;
24195: LD_ADDR_OWVAR 38
24199: PUSH
24200: LD_VAR 0 3
24204: ST_TO_ADDR
// vc_weapon := weapon ;
24205: LD_ADDR_OWVAR 40
24209: PUSH
24210: LD_VAR 0 4
24214: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24215: LD_ADDR_OWVAR 41
24219: PUSH
24220: LD_VAR 0 5
24224: ST_TO_ADDR
// end ;
24225: LD_VAR 0 6
24229: RET
// export function WantPlant ( unit ) ; var task ; begin
24230: LD_INT 0
24232: PPUSH
24233: PPUSH
// result := false ;
24234: LD_ADDR_VAR 0 2
24238: PUSH
24239: LD_INT 0
24241: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24242: LD_ADDR_VAR 0 3
24246: PUSH
24247: LD_VAR 0 1
24251: PPUSH
24252: CALL_OW 437
24256: ST_TO_ADDR
// if task then
24257: LD_VAR 0 3
24261: IFFALSE 24289
// if task [ 1 ] [ 1 ] = p then
24263: LD_VAR 0 3
24267: PUSH
24268: LD_INT 1
24270: ARRAY
24271: PUSH
24272: LD_INT 1
24274: ARRAY
24275: PUSH
24276: LD_STRING p
24278: EQUAL
24279: IFFALSE 24289
// result := true ;
24281: LD_ADDR_VAR 0 2
24285: PUSH
24286: LD_INT 1
24288: ST_TO_ADDR
// end ;
24289: LD_VAR 0 2
24293: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24294: LD_INT 0
24296: PPUSH
24297: PPUSH
24298: PPUSH
24299: PPUSH
// if pos < 1 then
24300: LD_VAR 0 2
24304: PUSH
24305: LD_INT 1
24307: LESS
24308: IFFALSE 24312
// exit ;
24310: GO 24615
// if pos = 1 then
24312: LD_VAR 0 2
24316: PUSH
24317: LD_INT 1
24319: EQUAL
24320: IFFALSE 24353
// result := Replace ( arr , pos [ 1 ] , value ) else
24322: LD_ADDR_VAR 0 4
24326: PUSH
24327: LD_VAR 0 1
24331: PPUSH
24332: LD_VAR 0 2
24336: PUSH
24337: LD_INT 1
24339: ARRAY
24340: PPUSH
24341: LD_VAR 0 3
24345: PPUSH
24346: CALL_OW 1
24350: ST_TO_ADDR
24351: GO 24615
// begin tmp := arr ;
24353: LD_ADDR_VAR 0 6
24357: PUSH
24358: LD_VAR 0 1
24362: ST_TO_ADDR
// s_arr := [ tmp ] ;
24363: LD_ADDR_VAR 0 7
24367: PUSH
24368: LD_VAR 0 6
24372: PUSH
24373: EMPTY
24374: LIST
24375: ST_TO_ADDR
// for i = 1 to pos - 1 do
24376: LD_ADDR_VAR 0 5
24380: PUSH
24381: DOUBLE
24382: LD_INT 1
24384: DEC
24385: ST_TO_ADDR
24386: LD_VAR 0 2
24390: PUSH
24391: LD_INT 1
24393: MINUS
24394: PUSH
24395: FOR_TO
24396: IFFALSE 24441
// begin tmp := tmp [ pos [ i ] ] ;
24398: LD_ADDR_VAR 0 6
24402: PUSH
24403: LD_VAR 0 6
24407: PUSH
24408: LD_VAR 0 2
24412: PUSH
24413: LD_VAR 0 5
24417: ARRAY
24418: ARRAY
24419: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24420: LD_ADDR_VAR 0 7
24424: PUSH
24425: LD_VAR 0 7
24429: PUSH
24430: LD_VAR 0 6
24434: PUSH
24435: EMPTY
24436: LIST
24437: ADD
24438: ST_TO_ADDR
// end ;
24439: GO 24395
24441: POP
24442: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
24443: LD_ADDR_VAR 0 6
24447: PUSH
24448: LD_VAR 0 6
24452: PPUSH
24453: LD_VAR 0 2
24457: PUSH
24458: LD_VAR 0 2
24462: ARRAY
24463: PPUSH
24464: LD_VAR 0 3
24468: PPUSH
24469: CALL_OW 1
24473: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
24474: LD_ADDR_VAR 0 7
24478: PUSH
24479: LD_VAR 0 7
24483: PPUSH
24484: LD_VAR 0 7
24488: PPUSH
24489: LD_VAR 0 6
24493: PPUSH
24494: CALL_OW 1
24498: ST_TO_ADDR
// for i = s_arr downto 2 do
24499: LD_ADDR_VAR 0 5
24503: PUSH
24504: DOUBLE
24505: LD_VAR 0 7
24509: INC
24510: ST_TO_ADDR
24511: LD_INT 2
24513: PUSH
24514: FOR_DOWNTO
24515: IFFALSE 24599
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
24517: LD_ADDR_VAR 0 6
24521: PUSH
24522: LD_VAR 0 7
24526: PUSH
24527: LD_VAR 0 5
24531: PUSH
24532: LD_INT 1
24534: MINUS
24535: ARRAY
24536: PPUSH
24537: LD_VAR 0 2
24541: PUSH
24542: LD_VAR 0 5
24546: PUSH
24547: LD_INT 1
24549: MINUS
24550: ARRAY
24551: PPUSH
24552: LD_VAR 0 7
24556: PUSH
24557: LD_VAR 0 5
24561: ARRAY
24562: PPUSH
24563: CALL_OW 1
24567: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
24568: LD_ADDR_VAR 0 7
24572: PUSH
24573: LD_VAR 0 7
24577: PPUSH
24578: LD_VAR 0 5
24582: PUSH
24583: LD_INT 1
24585: MINUS
24586: PPUSH
24587: LD_VAR 0 6
24591: PPUSH
24592: CALL_OW 1
24596: ST_TO_ADDR
// end ;
24597: GO 24514
24599: POP
24600: POP
// result := s_arr [ 1 ] ;
24601: LD_ADDR_VAR 0 4
24605: PUSH
24606: LD_VAR 0 7
24610: PUSH
24611: LD_INT 1
24613: ARRAY
24614: ST_TO_ADDR
// end ; end ;
24615: LD_VAR 0 4
24619: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
24620: LD_INT 0
24622: PPUSH
24623: PPUSH
// if not list then
24624: LD_VAR 0 1
24628: NOT
24629: IFFALSE 24633
// exit ;
24631: GO 24724
// i := list [ pos1 ] ;
24633: LD_ADDR_VAR 0 5
24637: PUSH
24638: LD_VAR 0 1
24642: PUSH
24643: LD_VAR 0 2
24647: ARRAY
24648: ST_TO_ADDR
// if not i then
24649: LD_VAR 0 5
24653: NOT
24654: IFFALSE 24658
// exit ;
24656: GO 24724
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
24658: LD_ADDR_VAR 0 1
24662: PUSH
24663: LD_VAR 0 1
24667: PPUSH
24668: LD_VAR 0 2
24672: PPUSH
24673: LD_VAR 0 1
24677: PUSH
24678: LD_VAR 0 3
24682: ARRAY
24683: PPUSH
24684: CALL_OW 1
24688: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
24689: LD_ADDR_VAR 0 1
24693: PUSH
24694: LD_VAR 0 1
24698: PPUSH
24699: LD_VAR 0 3
24703: PPUSH
24704: LD_VAR 0 5
24708: PPUSH
24709: CALL_OW 1
24713: ST_TO_ADDR
// result := list ;
24714: LD_ADDR_VAR 0 4
24718: PUSH
24719: LD_VAR 0 1
24723: ST_TO_ADDR
// end ;
24724: LD_VAR 0 4
24728: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
24729: LD_INT 0
24731: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
24732: LD_ADDR_VAR 0 5
24736: PUSH
24737: LD_VAR 0 1
24741: PPUSH
24742: CALL_OW 250
24746: PPUSH
24747: LD_VAR 0 1
24751: PPUSH
24752: CALL_OW 251
24756: PPUSH
24757: LD_VAR 0 2
24761: PPUSH
24762: LD_VAR 0 3
24766: PPUSH
24767: LD_VAR 0 4
24771: PPUSH
24772: CALL 24782 0 5
24776: ST_TO_ADDR
// end ;
24777: LD_VAR 0 5
24781: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
24782: LD_INT 0
24784: PPUSH
24785: PPUSH
24786: PPUSH
24787: PPUSH
// if not list then
24788: LD_VAR 0 3
24792: NOT
24793: IFFALSE 24797
// exit ;
24795: GO 25185
// result := [ ] ;
24797: LD_ADDR_VAR 0 6
24801: PUSH
24802: EMPTY
24803: ST_TO_ADDR
// for i in list do
24804: LD_ADDR_VAR 0 7
24808: PUSH
24809: LD_VAR 0 3
24813: PUSH
24814: FOR_IN
24815: IFFALSE 25017
// begin tmp := GetDistUnitXY ( i , x , y ) ;
24817: LD_ADDR_VAR 0 9
24821: PUSH
24822: LD_VAR 0 7
24826: PPUSH
24827: LD_VAR 0 1
24831: PPUSH
24832: LD_VAR 0 2
24836: PPUSH
24837: CALL_OW 297
24841: ST_TO_ADDR
// if not result then
24842: LD_VAR 0 6
24846: NOT
24847: IFFALSE 24873
// result := [ [ i , tmp ] ] else
24849: LD_ADDR_VAR 0 6
24853: PUSH
24854: LD_VAR 0 7
24858: PUSH
24859: LD_VAR 0 9
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: EMPTY
24869: LIST
24870: ST_TO_ADDR
24871: GO 25015
// begin if result [ result ] [ 2 ] < tmp then
24873: LD_VAR 0 6
24877: PUSH
24878: LD_VAR 0 6
24882: ARRAY
24883: PUSH
24884: LD_INT 2
24886: ARRAY
24887: PUSH
24888: LD_VAR 0 9
24892: LESS
24893: IFFALSE 24935
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
24895: LD_ADDR_VAR 0 6
24899: PUSH
24900: LD_VAR 0 6
24904: PPUSH
24905: LD_VAR 0 6
24909: PUSH
24910: LD_INT 1
24912: PLUS
24913: PPUSH
24914: LD_VAR 0 7
24918: PUSH
24919: LD_VAR 0 9
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PPUSH
24928: CALL_OW 2
24932: ST_TO_ADDR
24933: GO 25015
// for j = 1 to result do
24935: LD_ADDR_VAR 0 8
24939: PUSH
24940: DOUBLE
24941: LD_INT 1
24943: DEC
24944: ST_TO_ADDR
24945: LD_VAR 0 6
24949: PUSH
24950: FOR_TO
24951: IFFALSE 25013
// begin if tmp < result [ j ] [ 2 ] then
24953: LD_VAR 0 9
24957: PUSH
24958: LD_VAR 0 6
24962: PUSH
24963: LD_VAR 0 8
24967: ARRAY
24968: PUSH
24969: LD_INT 2
24971: ARRAY
24972: LESS
24973: IFFALSE 25011
// begin result := Insert ( result , j , [ i , tmp ] ) ;
24975: LD_ADDR_VAR 0 6
24979: PUSH
24980: LD_VAR 0 6
24984: PPUSH
24985: LD_VAR 0 8
24989: PPUSH
24990: LD_VAR 0 7
24994: PUSH
24995: LD_VAR 0 9
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PPUSH
25004: CALL_OW 2
25008: ST_TO_ADDR
// break ;
25009: GO 25013
// end ; end ;
25011: GO 24950
25013: POP
25014: POP
// end ; end ;
25015: GO 24814
25017: POP
25018: POP
// if result and not asc then
25019: LD_VAR 0 6
25023: PUSH
25024: LD_VAR 0 4
25028: NOT
25029: AND
25030: IFFALSE 25105
// begin tmp := result ;
25032: LD_ADDR_VAR 0 9
25036: PUSH
25037: LD_VAR 0 6
25041: ST_TO_ADDR
// for i = tmp downto 1 do
25042: LD_ADDR_VAR 0 7
25046: PUSH
25047: DOUBLE
25048: LD_VAR 0 9
25052: INC
25053: ST_TO_ADDR
25054: LD_INT 1
25056: PUSH
25057: FOR_DOWNTO
25058: IFFALSE 25103
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25060: LD_ADDR_VAR 0 6
25064: PUSH
25065: LD_VAR 0 6
25069: PPUSH
25070: LD_VAR 0 9
25074: PUSH
25075: LD_VAR 0 7
25079: MINUS
25080: PUSH
25081: LD_INT 1
25083: PLUS
25084: PPUSH
25085: LD_VAR 0 9
25089: PUSH
25090: LD_VAR 0 7
25094: ARRAY
25095: PPUSH
25096: CALL_OW 1
25100: ST_TO_ADDR
25101: GO 25057
25103: POP
25104: POP
// end ; tmp := [ ] ;
25105: LD_ADDR_VAR 0 9
25109: PUSH
25110: EMPTY
25111: ST_TO_ADDR
// if mode then
25112: LD_VAR 0 5
25116: IFFALSE 25185
// begin for i = 1 to result do
25118: LD_ADDR_VAR 0 7
25122: PUSH
25123: DOUBLE
25124: LD_INT 1
25126: DEC
25127: ST_TO_ADDR
25128: LD_VAR 0 6
25132: PUSH
25133: FOR_TO
25134: IFFALSE 25173
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25136: LD_ADDR_VAR 0 9
25140: PUSH
25141: LD_VAR 0 9
25145: PPUSH
25146: LD_VAR 0 7
25150: PPUSH
25151: LD_VAR 0 6
25155: PUSH
25156: LD_VAR 0 7
25160: ARRAY
25161: PUSH
25162: LD_INT 1
25164: ARRAY
25165: PPUSH
25166: CALL_OW 1
25170: ST_TO_ADDR
25171: GO 25133
25173: POP
25174: POP
// result := tmp ;
25175: LD_ADDR_VAR 0 6
25179: PUSH
25180: LD_VAR 0 9
25184: ST_TO_ADDR
// end ; end ;
25185: LD_VAR 0 6
25189: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25190: LD_INT 0
25192: PPUSH
25193: PPUSH
25194: PPUSH
25195: PPUSH
25196: PPUSH
25197: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25198: LD_ADDR_VAR 0 5
25202: PUSH
25203: LD_INT 0
25205: PUSH
25206: LD_INT 0
25208: PUSH
25209: LD_INT 0
25211: PUSH
25212: EMPTY
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: ST_TO_ADDR
// if not x or not y then
25220: LD_VAR 0 2
25224: NOT
25225: PUSH
25226: LD_VAR 0 3
25230: NOT
25231: OR
25232: IFFALSE 25236
// exit ;
25234: GO 26882
// if not range then
25236: LD_VAR 0 4
25240: NOT
25241: IFFALSE 25251
// range := 10 ;
25243: LD_ADDR_VAR 0 4
25247: PUSH
25248: LD_INT 10
25250: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25251: LD_ADDR_VAR 0 8
25255: PUSH
25256: LD_INT 81
25258: PUSH
25259: LD_VAR 0 1
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 92
25270: PUSH
25271: LD_VAR 0 2
25275: PUSH
25276: LD_VAR 0 3
25280: PUSH
25281: LD_VAR 0 4
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: PUSH
25292: LD_INT 3
25294: PUSH
25295: LD_INT 21
25297: PUSH
25298: LD_INT 3
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: LIST
25313: PPUSH
25314: CALL_OW 69
25318: ST_TO_ADDR
// if not tmp then
25319: LD_VAR 0 8
25323: NOT
25324: IFFALSE 25328
// exit ;
25326: GO 26882
// for i in tmp do
25328: LD_ADDR_VAR 0 6
25332: PUSH
25333: LD_VAR 0 8
25337: PUSH
25338: FOR_IN
25339: IFFALSE 26857
// begin points := [ 0 , 0 , 0 ] ;
25341: LD_ADDR_VAR 0 9
25345: PUSH
25346: LD_INT 0
25348: PUSH
25349: LD_INT 0
25351: PUSH
25352: LD_INT 0
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: LIST
25359: ST_TO_ADDR
// bpoints := 1 ;
25360: LD_ADDR_VAR 0 10
25364: PUSH
25365: LD_INT 1
25367: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25368: LD_VAR 0 6
25372: PPUSH
25373: CALL_OW 247
25377: PUSH
25378: LD_INT 1
25380: DOUBLE
25381: EQUAL
25382: IFTRUE 25386
25384: GO 25964
25386: POP
// begin if GetClass ( i ) = 1 then
25387: LD_VAR 0 6
25391: PPUSH
25392: CALL_OW 257
25396: PUSH
25397: LD_INT 1
25399: EQUAL
25400: IFFALSE 25421
// points := [ 10 , 5 , 3 ] ;
25402: LD_ADDR_VAR 0 9
25406: PUSH
25407: LD_INT 10
25409: PUSH
25410: LD_INT 5
25412: PUSH
25413: LD_INT 3
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: LIST
25420: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25421: LD_VAR 0 6
25425: PPUSH
25426: CALL_OW 257
25430: PUSH
25431: LD_INT 2
25433: PUSH
25434: LD_INT 3
25436: PUSH
25437: LD_INT 4
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: LIST
25444: IN
25445: IFFALSE 25466
// points := [ 3 , 2 , 1 ] ;
25447: LD_ADDR_VAR 0 9
25451: PUSH
25452: LD_INT 3
25454: PUSH
25455: LD_INT 2
25457: PUSH
25458: LD_INT 1
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: LIST
25465: ST_TO_ADDR
// if GetClass ( i ) = 5 then
25466: LD_VAR 0 6
25470: PPUSH
25471: CALL_OW 257
25475: PUSH
25476: LD_INT 5
25478: EQUAL
25479: IFFALSE 25500
// points := [ 130 , 5 , 2 ] ;
25481: LD_ADDR_VAR 0 9
25485: PUSH
25486: LD_INT 130
25488: PUSH
25489: LD_INT 5
25491: PUSH
25492: LD_INT 2
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: LIST
25499: ST_TO_ADDR
// if GetClass ( i ) = 8 then
25500: LD_VAR 0 6
25504: PPUSH
25505: CALL_OW 257
25509: PUSH
25510: LD_INT 8
25512: EQUAL
25513: IFFALSE 25534
// points := [ 35 , 35 , 30 ] ;
25515: LD_ADDR_VAR 0 9
25519: PUSH
25520: LD_INT 35
25522: PUSH
25523: LD_INT 35
25525: PUSH
25526: LD_INT 30
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: LIST
25533: ST_TO_ADDR
// if GetClass ( i ) = 9 then
25534: LD_VAR 0 6
25538: PPUSH
25539: CALL_OW 257
25543: PUSH
25544: LD_INT 9
25546: EQUAL
25547: IFFALSE 25568
// points := [ 20 , 55 , 40 ] ;
25549: LD_ADDR_VAR 0 9
25553: PUSH
25554: LD_INT 20
25556: PUSH
25557: LD_INT 55
25559: PUSH
25560: LD_INT 40
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: LIST
25567: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
25568: LD_VAR 0 6
25572: PPUSH
25573: CALL_OW 257
25577: PUSH
25578: LD_INT 12
25580: PUSH
25581: LD_INT 16
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: IN
25588: IFFALSE 25609
// points := [ 5 , 3 , 2 ] ;
25590: LD_ADDR_VAR 0 9
25594: PUSH
25595: LD_INT 5
25597: PUSH
25598: LD_INT 3
25600: PUSH
25601: LD_INT 2
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: LIST
25608: ST_TO_ADDR
// if GetClass ( i ) = 17 then
25609: LD_VAR 0 6
25613: PPUSH
25614: CALL_OW 257
25618: PUSH
25619: LD_INT 17
25621: EQUAL
25622: IFFALSE 25643
// points := [ 100 , 50 , 75 ] ;
25624: LD_ADDR_VAR 0 9
25628: PUSH
25629: LD_INT 100
25631: PUSH
25632: LD_INT 50
25634: PUSH
25635: LD_INT 75
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: LIST
25642: ST_TO_ADDR
// if GetClass ( i ) = 15 then
25643: LD_VAR 0 6
25647: PPUSH
25648: CALL_OW 257
25652: PUSH
25653: LD_INT 15
25655: EQUAL
25656: IFFALSE 25677
// points := [ 10 , 5 , 3 ] ;
25658: LD_ADDR_VAR 0 9
25662: PUSH
25663: LD_INT 10
25665: PUSH
25666: LD_INT 5
25668: PUSH
25669: LD_INT 3
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: LIST
25676: ST_TO_ADDR
// if GetClass ( i ) = 14 then
25677: LD_VAR 0 6
25681: PPUSH
25682: CALL_OW 257
25686: PUSH
25687: LD_INT 14
25689: EQUAL
25690: IFFALSE 25711
// points := [ 10 , 0 , 0 ] ;
25692: LD_ADDR_VAR 0 9
25696: PUSH
25697: LD_INT 10
25699: PUSH
25700: LD_INT 0
25702: PUSH
25703: LD_INT 0
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: LIST
25710: ST_TO_ADDR
// if GetClass ( i ) = 11 then
25711: LD_VAR 0 6
25715: PPUSH
25716: CALL_OW 257
25720: PUSH
25721: LD_INT 11
25723: EQUAL
25724: IFFALSE 25745
// points := [ 30 , 10 , 5 ] ;
25726: LD_ADDR_VAR 0 9
25730: PUSH
25731: LD_INT 30
25733: PUSH
25734: LD_INT 10
25736: PUSH
25737: LD_INT 5
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: LIST
25744: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
25745: LD_VAR 0 1
25749: PPUSH
25750: LD_INT 5
25752: PPUSH
25753: CALL_OW 321
25757: PUSH
25758: LD_INT 2
25760: EQUAL
25761: IFFALSE 25778
// bpoints := bpoints * 1.8 ;
25763: LD_ADDR_VAR 0 10
25767: PUSH
25768: LD_VAR 0 10
25772: PUSH
25773: LD_REAL  1.80000000000000E+0000
25776: MUL
25777: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
25778: LD_VAR 0 6
25782: PPUSH
25783: CALL_OW 257
25787: PUSH
25788: LD_INT 1
25790: PUSH
25791: LD_INT 2
25793: PUSH
25794: LD_INT 3
25796: PUSH
25797: LD_INT 4
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: IN
25806: PUSH
25807: LD_VAR 0 1
25811: PPUSH
25812: LD_INT 51
25814: PPUSH
25815: CALL_OW 321
25819: PUSH
25820: LD_INT 2
25822: EQUAL
25823: AND
25824: IFFALSE 25841
// bpoints := bpoints * 1.2 ;
25826: LD_ADDR_VAR 0 10
25830: PUSH
25831: LD_VAR 0 10
25835: PUSH
25836: LD_REAL  1.20000000000000E+0000
25839: MUL
25840: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
25841: LD_VAR 0 6
25845: PPUSH
25846: CALL_OW 257
25850: PUSH
25851: LD_INT 5
25853: PUSH
25854: LD_INT 7
25856: PUSH
25857: LD_INT 9
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: LIST
25864: IN
25865: PUSH
25866: LD_VAR 0 1
25870: PPUSH
25871: LD_INT 52
25873: PPUSH
25874: CALL_OW 321
25878: PUSH
25879: LD_INT 2
25881: EQUAL
25882: AND
25883: IFFALSE 25900
// bpoints := bpoints * 1.5 ;
25885: LD_ADDR_VAR 0 10
25889: PUSH
25890: LD_VAR 0 10
25894: PUSH
25895: LD_REAL  1.50000000000000E+0000
25898: MUL
25899: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
25900: LD_VAR 0 1
25904: PPUSH
25905: LD_INT 66
25907: PPUSH
25908: CALL_OW 321
25912: PUSH
25913: LD_INT 2
25915: EQUAL
25916: IFFALSE 25933
// bpoints := bpoints * 1.1 ;
25918: LD_ADDR_VAR 0 10
25922: PUSH
25923: LD_VAR 0 10
25927: PUSH
25928: LD_REAL  1.10000000000000E+0000
25931: MUL
25932: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
25933: LD_ADDR_VAR 0 10
25937: PUSH
25938: LD_VAR 0 10
25942: PUSH
25943: LD_VAR 0 6
25947: PPUSH
25948: LD_INT 1
25950: PPUSH
25951: CALL_OW 259
25955: PUSH
25956: LD_REAL  1.15000000000000E+0000
25959: MUL
25960: MUL
25961: ST_TO_ADDR
// end ; unit_vehicle :
25962: GO 26786
25964: LD_INT 2
25966: DOUBLE
25967: EQUAL
25968: IFTRUE 25972
25970: GO 26774
25972: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
25973: LD_VAR 0 6
25977: PPUSH
25978: CALL_OW 264
25982: PUSH
25983: LD_INT 2
25985: PUSH
25986: LD_INT 42
25988: PUSH
25989: LD_INT 24
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: LIST
25996: IN
25997: IFFALSE 26018
// points := [ 25 , 5 , 3 ] ;
25999: LD_ADDR_VAR 0 9
26003: PUSH
26004: LD_INT 25
26006: PUSH
26007: LD_INT 5
26009: PUSH
26010: LD_INT 3
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: LIST
26017: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26018: LD_VAR 0 6
26022: PPUSH
26023: CALL_OW 264
26027: PUSH
26028: LD_INT 4
26030: PUSH
26031: LD_INT 43
26033: PUSH
26034: LD_INT 25
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: LIST
26041: IN
26042: IFFALSE 26063
// points := [ 40 , 15 , 5 ] ;
26044: LD_ADDR_VAR 0 9
26048: PUSH
26049: LD_INT 40
26051: PUSH
26052: LD_INT 15
26054: PUSH
26055: LD_INT 5
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: LIST
26062: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26063: LD_VAR 0 6
26067: PPUSH
26068: CALL_OW 264
26072: PUSH
26073: LD_INT 3
26075: PUSH
26076: LD_INT 23
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: IN
26083: IFFALSE 26104
// points := [ 7 , 25 , 8 ] ;
26085: LD_ADDR_VAR 0 9
26089: PUSH
26090: LD_INT 7
26092: PUSH
26093: LD_INT 25
26095: PUSH
26096: LD_INT 8
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: LIST
26103: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26104: LD_VAR 0 6
26108: PPUSH
26109: CALL_OW 264
26113: PUSH
26114: LD_INT 5
26116: PUSH
26117: LD_INT 27
26119: PUSH
26120: LD_INT 44
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: LIST
26127: IN
26128: IFFALSE 26149
// points := [ 14 , 50 , 16 ] ;
26130: LD_ADDR_VAR 0 9
26134: PUSH
26135: LD_INT 14
26137: PUSH
26138: LD_INT 50
26140: PUSH
26141: LD_INT 16
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: LIST
26148: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26149: LD_VAR 0 6
26153: PPUSH
26154: CALL_OW 264
26158: PUSH
26159: LD_INT 6
26161: PUSH
26162: LD_INT 46
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: IN
26169: IFFALSE 26190
// points := [ 32 , 120 , 70 ] ;
26171: LD_ADDR_VAR 0 9
26175: PUSH
26176: LD_INT 32
26178: PUSH
26179: LD_INT 120
26181: PUSH
26182: LD_INT 70
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: LIST
26189: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
26190: LD_VAR 0 6
26194: PPUSH
26195: CALL_OW 264
26199: PUSH
26200: LD_INT 7
26202: PUSH
26203: LD_INT 28
26205: PUSH
26206: LD_INT 45
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: LIST
26213: IN
26214: IFFALSE 26235
// points := [ 35 , 20 , 45 ] ;
26216: LD_ADDR_VAR 0 9
26220: PUSH
26221: LD_INT 35
26223: PUSH
26224: LD_INT 20
26226: PUSH
26227: LD_INT 45
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: LIST
26234: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26235: LD_VAR 0 6
26239: PPUSH
26240: CALL_OW 264
26244: PUSH
26245: LD_INT 47
26247: PUSH
26248: EMPTY
26249: LIST
26250: IN
26251: IFFALSE 26272
// points := [ 67 , 45 , 75 ] ;
26253: LD_ADDR_VAR 0 9
26257: PUSH
26258: LD_INT 67
26260: PUSH
26261: LD_INT 45
26263: PUSH
26264: LD_INT 75
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: LIST
26271: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26272: LD_VAR 0 6
26276: PPUSH
26277: CALL_OW 264
26281: PUSH
26282: LD_INT 26
26284: PUSH
26285: EMPTY
26286: LIST
26287: IN
26288: IFFALSE 26309
// points := [ 120 , 30 , 80 ] ;
26290: LD_ADDR_VAR 0 9
26294: PUSH
26295: LD_INT 120
26297: PUSH
26298: LD_INT 30
26300: PUSH
26301: LD_INT 80
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: LIST
26308: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26309: LD_VAR 0 6
26313: PPUSH
26314: CALL_OW 264
26318: PUSH
26319: LD_INT 22
26321: PUSH
26322: EMPTY
26323: LIST
26324: IN
26325: IFFALSE 26346
// points := [ 40 , 1 , 1 ] ;
26327: LD_ADDR_VAR 0 9
26331: PUSH
26332: LD_INT 40
26334: PUSH
26335: LD_INT 1
26337: PUSH
26338: LD_INT 1
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: LIST
26345: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26346: LD_VAR 0 6
26350: PPUSH
26351: CALL_OW 264
26355: PUSH
26356: LD_INT 29
26358: PUSH
26359: EMPTY
26360: LIST
26361: IN
26362: IFFALSE 26383
// points := [ 70 , 200 , 400 ] ;
26364: LD_ADDR_VAR 0 9
26368: PUSH
26369: LD_INT 70
26371: PUSH
26372: LD_INT 200
26374: PUSH
26375: LD_INT 400
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: LIST
26382: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26383: LD_VAR 0 6
26387: PPUSH
26388: CALL_OW 264
26392: PUSH
26393: LD_INT 14
26395: PUSH
26396: LD_INT 53
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: IN
26403: IFFALSE 26424
// points := [ 40 , 10 , 20 ] ;
26405: LD_ADDR_VAR 0 9
26409: PUSH
26410: LD_INT 40
26412: PUSH
26413: LD_INT 10
26415: PUSH
26416: LD_INT 20
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: LIST
26423: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26424: LD_VAR 0 6
26428: PPUSH
26429: CALL_OW 264
26433: PUSH
26434: LD_INT 9
26436: PUSH
26437: EMPTY
26438: LIST
26439: IN
26440: IFFALSE 26461
// points := [ 5 , 70 , 20 ] ;
26442: LD_ADDR_VAR 0 9
26446: PUSH
26447: LD_INT 5
26449: PUSH
26450: LD_INT 70
26452: PUSH
26453: LD_INT 20
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: LIST
26460: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
26461: LD_VAR 0 6
26465: PPUSH
26466: CALL_OW 264
26470: PUSH
26471: LD_INT 10
26473: PUSH
26474: EMPTY
26475: LIST
26476: IN
26477: IFFALSE 26498
// points := [ 35 , 110 , 70 ] ;
26479: LD_ADDR_VAR 0 9
26483: PUSH
26484: LD_INT 35
26486: PUSH
26487: LD_INT 110
26489: PUSH
26490: LD_INT 70
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: LIST
26497: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
26498: LD_VAR 0 6
26502: PPUSH
26503: CALL_OW 265
26507: PUSH
26508: LD_INT 25
26510: EQUAL
26511: IFFALSE 26532
// points := [ 80 , 65 , 100 ] ;
26513: LD_ADDR_VAR 0 9
26517: PUSH
26518: LD_INT 80
26520: PUSH
26521: LD_INT 65
26523: PUSH
26524: LD_INT 100
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: LIST
26531: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
26532: LD_VAR 0 6
26536: PPUSH
26537: CALL_OW 263
26541: PUSH
26542: LD_INT 1
26544: EQUAL
26545: IFFALSE 26580
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
26547: LD_ADDR_VAR 0 10
26551: PUSH
26552: LD_VAR 0 10
26556: PUSH
26557: LD_VAR 0 6
26561: PPUSH
26562: CALL_OW 311
26566: PPUSH
26567: LD_INT 3
26569: PPUSH
26570: CALL_OW 259
26574: PUSH
26575: LD_INT 4
26577: MUL
26578: MUL
26579: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
26580: LD_VAR 0 6
26584: PPUSH
26585: CALL_OW 263
26589: PUSH
26590: LD_INT 2
26592: EQUAL
26593: IFFALSE 26644
// begin j := IsControledBy ( i ) ;
26595: LD_ADDR_VAR 0 7
26599: PUSH
26600: LD_VAR 0 6
26604: PPUSH
26605: CALL_OW 312
26609: ST_TO_ADDR
// if j then
26610: LD_VAR 0 7
26614: IFFALSE 26644
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
26616: LD_ADDR_VAR 0 10
26620: PUSH
26621: LD_VAR 0 10
26625: PUSH
26626: LD_VAR 0 7
26630: PPUSH
26631: LD_INT 3
26633: PPUSH
26634: CALL_OW 259
26638: PUSH
26639: LD_INT 3
26641: MUL
26642: MUL
26643: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
26644: LD_VAR 0 6
26648: PPUSH
26649: CALL_OW 264
26653: PUSH
26654: LD_INT 5
26656: PUSH
26657: LD_INT 6
26659: PUSH
26660: LD_INT 46
26662: PUSH
26663: LD_INT 44
26665: PUSH
26666: LD_INT 47
26668: PUSH
26669: LD_INT 45
26671: PUSH
26672: LD_INT 28
26674: PUSH
26675: LD_INT 7
26677: PUSH
26678: LD_INT 27
26680: PUSH
26681: LD_INT 29
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: IN
26696: PUSH
26697: LD_VAR 0 1
26701: PPUSH
26702: LD_INT 52
26704: PPUSH
26705: CALL_OW 321
26709: PUSH
26710: LD_INT 2
26712: EQUAL
26713: AND
26714: IFFALSE 26731
// bpoints := bpoints * 1.2 ;
26716: LD_ADDR_VAR 0 10
26720: PUSH
26721: LD_VAR 0 10
26725: PUSH
26726: LD_REAL  1.20000000000000E+0000
26729: MUL
26730: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
26731: LD_VAR 0 6
26735: PPUSH
26736: CALL_OW 264
26740: PUSH
26741: LD_INT 6
26743: PUSH
26744: LD_INT 46
26746: PUSH
26747: LD_INT 47
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: LIST
26754: IN
26755: IFFALSE 26772
// bpoints := bpoints * 1.2 ;
26757: LD_ADDR_VAR 0 10
26761: PUSH
26762: LD_VAR 0 10
26766: PUSH
26767: LD_REAL  1.20000000000000E+0000
26770: MUL
26771: ST_TO_ADDR
// end ; unit_building :
26772: GO 26786
26774: LD_INT 3
26776: DOUBLE
26777: EQUAL
26778: IFTRUE 26782
26780: GO 26785
26782: POP
// ; end ;
26783: GO 26786
26785: POP
// for j = 1 to 3 do
26786: LD_ADDR_VAR 0 7
26790: PUSH
26791: DOUBLE
26792: LD_INT 1
26794: DEC
26795: ST_TO_ADDR
26796: LD_INT 3
26798: PUSH
26799: FOR_TO
26800: IFFALSE 26853
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
26802: LD_ADDR_VAR 0 5
26806: PUSH
26807: LD_VAR 0 5
26811: PPUSH
26812: LD_VAR 0 7
26816: PPUSH
26817: LD_VAR 0 5
26821: PUSH
26822: LD_VAR 0 7
26826: ARRAY
26827: PUSH
26828: LD_VAR 0 9
26832: PUSH
26833: LD_VAR 0 7
26837: ARRAY
26838: PUSH
26839: LD_VAR 0 10
26843: MUL
26844: PLUS
26845: PPUSH
26846: CALL_OW 1
26850: ST_TO_ADDR
26851: GO 26799
26853: POP
26854: POP
// end ;
26855: GO 25338
26857: POP
26858: POP
// result := Replace ( result , 4 , tmp ) ;
26859: LD_ADDR_VAR 0 5
26863: PUSH
26864: LD_VAR 0 5
26868: PPUSH
26869: LD_INT 4
26871: PPUSH
26872: LD_VAR 0 8
26876: PPUSH
26877: CALL_OW 1
26881: ST_TO_ADDR
// end ;
26882: LD_VAR 0 5
26886: RET
// export function DangerAtRange ( unit , range ) ; begin
26887: LD_INT 0
26889: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
26890: LD_ADDR_VAR 0 3
26894: PUSH
26895: LD_VAR 0 1
26899: PPUSH
26900: CALL_OW 255
26904: PPUSH
26905: LD_VAR 0 1
26909: PPUSH
26910: CALL_OW 250
26914: PPUSH
26915: LD_VAR 0 1
26919: PPUSH
26920: CALL_OW 251
26924: PPUSH
26925: LD_VAR 0 2
26929: PPUSH
26930: CALL 25190 0 4
26934: ST_TO_ADDR
// end ;
26935: LD_VAR 0 3
26939: RET
// export function DangerInArea ( side , area ) ; begin
26940: LD_INT 0
26942: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
26943: LD_ADDR_VAR 0 3
26947: PUSH
26948: LD_VAR 0 2
26952: PPUSH
26953: LD_INT 81
26955: PUSH
26956: LD_VAR 0 1
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PPUSH
26965: CALL_OW 70
26969: ST_TO_ADDR
// end ;
26970: LD_VAR 0 3
26974: RET
// export function IsExtension ( b ) ; begin
26975: LD_INT 0
26977: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
26978: LD_ADDR_VAR 0 2
26982: PUSH
26983: LD_VAR 0 1
26987: PUSH
26988: LD_INT 23
26990: PUSH
26991: LD_INT 20
26993: PUSH
26994: LD_INT 22
26996: PUSH
26997: LD_INT 17
26999: PUSH
27000: LD_INT 24
27002: PUSH
27003: LD_INT 21
27005: PUSH
27006: LD_INT 19
27008: PUSH
27009: LD_INT 16
27011: PUSH
27012: LD_INT 25
27014: PUSH
27015: LD_INT 18
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: IN
27030: ST_TO_ADDR
// end ;
27031: LD_VAR 0 2
27035: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
27036: LD_INT 0
27038: PPUSH
27039: PPUSH
27040: PPUSH
// result := [ ] ;
27041: LD_ADDR_VAR 0 3
27045: PUSH
27046: EMPTY
27047: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27048: LD_ADDR_VAR 0 4
27052: PUSH
27053: LD_VAR 0 2
27057: PPUSH
27058: LD_INT 21
27060: PUSH
27061: LD_INT 3
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PPUSH
27068: CALL_OW 70
27072: ST_TO_ADDR
// if not tmp then
27073: LD_VAR 0 4
27077: NOT
27078: IFFALSE 27082
// exit ;
27080: GO 27140
// for i in tmp do
27082: LD_ADDR_VAR 0 5
27086: PUSH
27087: LD_VAR 0 4
27091: PUSH
27092: FOR_IN
27093: IFFALSE 27128
// if GetBase ( i ) <> base then
27095: LD_VAR 0 5
27099: PPUSH
27100: CALL_OW 274
27104: PUSH
27105: LD_VAR 0 1
27109: NONEQUAL
27110: IFFALSE 27126
// ComLinkToBase ( base , i ) ;
27112: LD_VAR 0 1
27116: PPUSH
27117: LD_VAR 0 5
27121: PPUSH
27122: CALL_OW 169
27126: GO 27092
27128: POP
27129: POP
// result := tmp ;
27130: LD_ADDR_VAR 0 3
27134: PUSH
27135: LD_VAR 0 4
27139: ST_TO_ADDR
// end ;
27140: LD_VAR 0 3
27144: RET
// export function ComComplete ( unit , b ) ; var i ; begin
27145: LD_INT 0
27147: PPUSH
27148: PPUSH
// if BuildingStatus ( b ) = bs_build then
27149: LD_VAR 0 2
27153: PPUSH
27154: CALL_OW 461
27158: PUSH
27159: LD_INT 1
27161: EQUAL
27162: IFFALSE 27222
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27164: LD_VAR 0 1
27168: PPUSH
27169: LD_STRING h
27171: PUSH
27172: LD_VAR 0 2
27176: PPUSH
27177: CALL_OW 250
27181: PUSH
27182: LD_VAR 0 2
27186: PPUSH
27187: CALL_OW 251
27191: PUSH
27192: LD_VAR 0 2
27196: PUSH
27197: LD_INT 0
27199: PUSH
27200: LD_INT 0
27202: PUSH
27203: LD_INT 0
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: PUSH
27215: EMPTY
27216: LIST
27217: PPUSH
27218: CALL_OW 446
// end ;
27222: LD_VAR 0 3
27226: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27227: LD_INT 0
27229: PPUSH
27230: PPUSH
27231: PPUSH
27232: PPUSH
27233: PPUSH
27234: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
27235: LD_VAR 0 1
27239: NOT
27240: PUSH
27241: LD_VAR 0 1
27245: PPUSH
27246: CALL_OW 263
27250: PUSH
27251: LD_INT 2
27253: EQUAL
27254: NOT
27255: OR
27256: IFFALSE 27260
// exit ;
27258: GO 27576
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27260: LD_ADDR_VAR 0 6
27264: PUSH
27265: LD_INT 22
27267: PUSH
27268: LD_VAR 0 1
27272: PPUSH
27273: CALL_OW 255
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 2
27284: PUSH
27285: LD_INT 30
27287: PUSH
27288: LD_INT 36
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 34
27297: PUSH
27298: LD_INT 31
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: LIST
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PPUSH
27314: CALL_OW 69
27318: ST_TO_ADDR
// if not tmp then
27319: LD_VAR 0 6
27323: NOT
27324: IFFALSE 27328
// exit ;
27326: GO 27576
// result := [ ] ;
27328: LD_ADDR_VAR 0 2
27332: PUSH
27333: EMPTY
27334: ST_TO_ADDR
// for i in tmp do
27335: LD_ADDR_VAR 0 3
27339: PUSH
27340: LD_VAR 0 6
27344: PUSH
27345: FOR_IN
27346: IFFALSE 27417
// begin t := UnitsInside ( i ) ;
27348: LD_ADDR_VAR 0 4
27352: PUSH
27353: LD_VAR 0 3
27357: PPUSH
27358: CALL_OW 313
27362: ST_TO_ADDR
// if t then
27363: LD_VAR 0 4
27367: IFFALSE 27415
// for j in t do
27369: LD_ADDR_VAR 0 7
27373: PUSH
27374: LD_VAR 0 4
27378: PUSH
27379: FOR_IN
27380: IFFALSE 27413
// result := Insert ( result , result + 1 , j ) ;
27382: LD_ADDR_VAR 0 2
27386: PUSH
27387: LD_VAR 0 2
27391: PPUSH
27392: LD_VAR 0 2
27396: PUSH
27397: LD_INT 1
27399: PLUS
27400: PPUSH
27401: LD_VAR 0 7
27405: PPUSH
27406: CALL_OW 2
27410: ST_TO_ADDR
27411: GO 27379
27413: POP
27414: POP
// end ;
27415: GO 27345
27417: POP
27418: POP
// if not result then
27419: LD_VAR 0 2
27423: NOT
27424: IFFALSE 27428
// exit ;
27426: GO 27576
// mech := result [ 1 ] ;
27428: LD_ADDR_VAR 0 5
27432: PUSH
27433: LD_VAR 0 2
27437: PUSH
27438: LD_INT 1
27440: ARRAY
27441: ST_TO_ADDR
// if result > 1 then
27442: LD_VAR 0 2
27446: PUSH
27447: LD_INT 1
27449: GREATER
27450: IFFALSE 27562
// for i = 2 to result do
27452: LD_ADDR_VAR 0 3
27456: PUSH
27457: DOUBLE
27458: LD_INT 2
27460: DEC
27461: ST_TO_ADDR
27462: LD_VAR 0 2
27466: PUSH
27467: FOR_TO
27468: IFFALSE 27560
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
27470: LD_ADDR_VAR 0 4
27474: PUSH
27475: LD_VAR 0 2
27479: PUSH
27480: LD_VAR 0 3
27484: ARRAY
27485: PPUSH
27486: LD_INT 3
27488: PPUSH
27489: CALL_OW 259
27493: PUSH
27494: LD_VAR 0 2
27498: PUSH
27499: LD_VAR 0 3
27503: ARRAY
27504: PPUSH
27505: CALL_OW 432
27509: MINUS
27510: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
27511: LD_VAR 0 4
27515: PUSH
27516: LD_VAR 0 5
27520: PPUSH
27521: LD_INT 3
27523: PPUSH
27524: CALL_OW 259
27528: PUSH
27529: LD_VAR 0 5
27533: PPUSH
27534: CALL_OW 432
27538: MINUS
27539: GREATEREQUAL
27540: IFFALSE 27558
// mech := result [ i ] ;
27542: LD_ADDR_VAR 0 5
27546: PUSH
27547: LD_VAR 0 2
27551: PUSH
27552: LD_VAR 0 3
27556: ARRAY
27557: ST_TO_ADDR
// end ;
27558: GO 27467
27560: POP
27561: POP
// ComLinkTo ( vehicle , mech ) ;
27562: LD_VAR 0 1
27566: PPUSH
27567: LD_VAR 0 5
27571: PPUSH
27572: CALL_OW 135
// end ;
27576: LD_VAR 0 2
27580: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
27581: LD_INT 0
27583: PPUSH
27584: PPUSH
27585: PPUSH
27586: PPUSH
27587: PPUSH
27588: PPUSH
27589: PPUSH
27590: PPUSH
27591: PPUSH
27592: PPUSH
27593: PPUSH
27594: PPUSH
27595: PPUSH
// result := [ ] ;
27596: LD_ADDR_VAR 0 7
27600: PUSH
27601: EMPTY
27602: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
27603: LD_VAR 0 1
27607: PPUSH
27608: CALL_OW 266
27612: PUSH
27613: LD_INT 0
27615: PUSH
27616: LD_INT 1
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: IN
27623: NOT
27624: IFFALSE 27628
// exit ;
27626: GO 29259
// if name then
27628: LD_VAR 0 3
27632: IFFALSE 27648
// SetBName ( base_dep , name ) ;
27634: LD_VAR 0 1
27638: PPUSH
27639: LD_VAR 0 3
27643: PPUSH
27644: CALL_OW 500
// base := GetBase ( base_dep ) ;
27648: LD_ADDR_VAR 0 15
27652: PUSH
27653: LD_VAR 0 1
27657: PPUSH
27658: CALL_OW 274
27662: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
27663: LD_ADDR_VAR 0 16
27667: PUSH
27668: LD_VAR 0 1
27672: PPUSH
27673: CALL_OW 255
27677: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
27678: LD_ADDR_VAR 0 17
27682: PUSH
27683: LD_VAR 0 1
27687: PPUSH
27688: CALL_OW 248
27692: ST_TO_ADDR
// if sources then
27693: LD_VAR 0 5
27697: IFFALSE 27744
// for i = 1 to 3 do
27699: LD_ADDR_VAR 0 8
27703: PUSH
27704: DOUBLE
27705: LD_INT 1
27707: DEC
27708: ST_TO_ADDR
27709: LD_INT 3
27711: PUSH
27712: FOR_TO
27713: IFFALSE 27742
// AddResourceType ( base , i , sources [ i ] ) ;
27715: LD_VAR 0 15
27719: PPUSH
27720: LD_VAR 0 8
27724: PPUSH
27725: LD_VAR 0 5
27729: PUSH
27730: LD_VAR 0 8
27734: ARRAY
27735: PPUSH
27736: CALL_OW 276
27740: GO 27712
27742: POP
27743: POP
// buildings := GetBaseBuildings ( base , area ) ;
27744: LD_ADDR_VAR 0 18
27748: PUSH
27749: LD_VAR 0 15
27753: PPUSH
27754: LD_VAR 0 2
27758: PPUSH
27759: CALL 27036 0 2
27763: ST_TO_ADDR
// InitHc ;
27764: CALL_OW 19
// InitUc ;
27768: CALL_OW 18
// uc_side := side ;
27772: LD_ADDR_OWVAR 20
27776: PUSH
27777: LD_VAR 0 16
27781: ST_TO_ADDR
// uc_nation := nation ;
27782: LD_ADDR_OWVAR 21
27786: PUSH
27787: LD_VAR 0 17
27791: ST_TO_ADDR
// if buildings then
27792: LD_VAR 0 18
27796: IFFALSE 29118
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
27798: LD_ADDR_VAR 0 19
27802: PUSH
27803: LD_VAR 0 18
27807: PPUSH
27808: LD_INT 2
27810: PUSH
27811: LD_INT 30
27813: PUSH
27814: LD_INT 29
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 30
27823: PUSH
27824: LD_INT 30
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: LIST
27835: PPUSH
27836: CALL_OW 72
27840: ST_TO_ADDR
// if tmp then
27841: LD_VAR 0 19
27845: IFFALSE 27893
// for i in tmp do
27847: LD_ADDR_VAR 0 8
27851: PUSH
27852: LD_VAR 0 19
27856: PUSH
27857: FOR_IN
27858: IFFALSE 27891
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
27860: LD_VAR 0 8
27864: PPUSH
27865: CALL_OW 250
27869: PPUSH
27870: LD_VAR 0 8
27874: PPUSH
27875: CALL_OW 251
27879: PPUSH
27880: LD_VAR 0 16
27884: PPUSH
27885: CALL_OW 441
27889: GO 27857
27891: POP
27892: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
27893: LD_VAR 0 18
27897: PPUSH
27898: LD_INT 2
27900: PUSH
27901: LD_INT 30
27903: PUSH
27904: LD_INT 32
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 30
27913: PUSH
27914: LD_INT 33
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: LIST
27925: PPUSH
27926: CALL_OW 72
27930: IFFALSE 28018
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
27932: LD_ADDR_VAR 0 8
27936: PUSH
27937: LD_VAR 0 18
27941: PPUSH
27942: LD_INT 2
27944: PUSH
27945: LD_INT 30
27947: PUSH
27948: LD_INT 32
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 30
27957: PUSH
27958: LD_INT 33
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: LIST
27969: PPUSH
27970: CALL_OW 72
27974: PUSH
27975: FOR_IN
27976: IFFALSE 28016
// begin if not GetBWeapon ( i ) then
27978: LD_VAR 0 8
27982: PPUSH
27983: CALL_OW 269
27987: NOT
27988: IFFALSE 28014
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
27990: LD_VAR 0 8
27994: PPUSH
27995: LD_VAR 0 8
27999: PPUSH
28000: LD_VAR 0 2
28004: PPUSH
28005: CALL 29264 0 2
28009: PPUSH
28010: CALL_OW 431
// end ;
28014: GO 27975
28016: POP
28017: POP
// end ; for i = 1 to personel do
28018: LD_ADDR_VAR 0 8
28022: PUSH
28023: DOUBLE
28024: LD_INT 1
28026: DEC
28027: ST_TO_ADDR
28028: LD_VAR 0 6
28032: PUSH
28033: FOR_TO
28034: IFFALSE 29098
// begin if i > 4 then
28036: LD_VAR 0 8
28040: PUSH
28041: LD_INT 4
28043: GREATER
28044: IFFALSE 28048
// break ;
28046: GO 29098
// case i of 1 :
28048: LD_VAR 0 8
28052: PUSH
28053: LD_INT 1
28055: DOUBLE
28056: EQUAL
28057: IFTRUE 28061
28059: GO 28141
28061: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28062: LD_ADDR_VAR 0 12
28066: PUSH
28067: LD_VAR 0 18
28071: PPUSH
28072: LD_INT 22
28074: PUSH
28075: LD_VAR 0 16
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 58
28086: PUSH
28087: EMPTY
28088: LIST
28089: PUSH
28090: LD_INT 2
28092: PUSH
28093: LD_INT 30
28095: PUSH
28096: LD_INT 32
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 30
28105: PUSH
28106: LD_INT 4
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 30
28115: PUSH
28116: LD_INT 5
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: LIST
28133: PPUSH
28134: CALL_OW 72
28138: ST_TO_ADDR
28139: GO 28363
28141: LD_INT 2
28143: DOUBLE
28144: EQUAL
28145: IFTRUE 28149
28147: GO 28211
28149: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28150: LD_ADDR_VAR 0 12
28154: PUSH
28155: LD_VAR 0 18
28159: PPUSH
28160: LD_INT 22
28162: PUSH
28163: LD_VAR 0 16
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 2
28174: PUSH
28175: LD_INT 30
28177: PUSH
28178: LD_INT 0
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: LD_INT 30
28187: PUSH
28188: LD_INT 1
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: LIST
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PPUSH
28204: CALL_OW 72
28208: ST_TO_ADDR
28209: GO 28363
28211: LD_INT 3
28213: DOUBLE
28214: EQUAL
28215: IFTRUE 28219
28217: GO 28281
28219: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28220: LD_ADDR_VAR 0 12
28224: PUSH
28225: LD_VAR 0 18
28229: PPUSH
28230: LD_INT 22
28232: PUSH
28233: LD_VAR 0 16
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 2
28244: PUSH
28245: LD_INT 30
28247: PUSH
28248: LD_INT 2
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 30
28257: PUSH
28258: LD_INT 3
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: LIST
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PPUSH
28274: CALL_OW 72
28278: ST_TO_ADDR
28279: GO 28363
28281: LD_INT 4
28283: DOUBLE
28284: EQUAL
28285: IFTRUE 28289
28287: GO 28362
28289: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28290: LD_ADDR_VAR 0 12
28294: PUSH
28295: LD_VAR 0 18
28299: PPUSH
28300: LD_INT 22
28302: PUSH
28303: LD_VAR 0 16
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 2
28314: PUSH
28315: LD_INT 30
28317: PUSH
28318: LD_INT 6
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 30
28327: PUSH
28328: LD_INT 7
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 30
28337: PUSH
28338: LD_INT 8
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PPUSH
28355: CALL_OW 72
28359: ST_TO_ADDR
28360: GO 28363
28362: POP
// if i = 1 then
28363: LD_VAR 0 8
28367: PUSH
28368: LD_INT 1
28370: EQUAL
28371: IFFALSE 28482
// begin tmp := [ ] ;
28373: LD_ADDR_VAR 0 19
28377: PUSH
28378: EMPTY
28379: ST_TO_ADDR
// for j in f do
28380: LD_ADDR_VAR 0 9
28384: PUSH
28385: LD_VAR 0 12
28389: PUSH
28390: FOR_IN
28391: IFFALSE 28464
// if GetBType ( j ) = b_bunker then
28393: LD_VAR 0 9
28397: PPUSH
28398: CALL_OW 266
28402: PUSH
28403: LD_INT 32
28405: EQUAL
28406: IFFALSE 28433
// tmp := Insert ( tmp , 1 , j ) else
28408: LD_ADDR_VAR 0 19
28412: PUSH
28413: LD_VAR 0 19
28417: PPUSH
28418: LD_INT 1
28420: PPUSH
28421: LD_VAR 0 9
28425: PPUSH
28426: CALL_OW 2
28430: ST_TO_ADDR
28431: GO 28462
// tmp := Insert ( tmp , tmp + 1 , j ) ;
28433: LD_ADDR_VAR 0 19
28437: PUSH
28438: LD_VAR 0 19
28442: PPUSH
28443: LD_VAR 0 19
28447: PUSH
28448: LD_INT 1
28450: PLUS
28451: PPUSH
28452: LD_VAR 0 9
28456: PPUSH
28457: CALL_OW 2
28461: ST_TO_ADDR
28462: GO 28390
28464: POP
28465: POP
// if tmp then
28466: LD_VAR 0 19
28470: IFFALSE 28482
// f := tmp ;
28472: LD_ADDR_VAR 0 12
28476: PUSH
28477: LD_VAR 0 19
28481: ST_TO_ADDR
// end ; x := personel [ i ] ;
28482: LD_ADDR_VAR 0 13
28486: PUSH
28487: LD_VAR 0 6
28491: PUSH
28492: LD_VAR 0 8
28496: ARRAY
28497: ST_TO_ADDR
// if x = - 1 then
28498: LD_VAR 0 13
28502: PUSH
28503: LD_INT 1
28505: NEG
28506: EQUAL
28507: IFFALSE 28716
// begin for j in f do
28509: LD_ADDR_VAR 0 9
28513: PUSH
28514: LD_VAR 0 12
28518: PUSH
28519: FOR_IN
28520: IFFALSE 28712
// repeat InitHc ;
28522: CALL_OW 19
// if GetBType ( j ) = b_barracks then
28526: LD_VAR 0 9
28530: PPUSH
28531: CALL_OW 266
28535: PUSH
28536: LD_INT 5
28538: EQUAL
28539: IFFALSE 28609
// begin if UnitsInside ( j ) < 3 then
28541: LD_VAR 0 9
28545: PPUSH
28546: CALL_OW 313
28550: PUSH
28551: LD_INT 3
28553: LESS
28554: IFFALSE 28590
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28556: LD_INT 0
28558: PPUSH
28559: LD_INT 5
28561: PUSH
28562: LD_INT 8
28564: PUSH
28565: LD_INT 9
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: LIST
28572: PUSH
28573: LD_VAR 0 17
28577: ARRAY
28578: PPUSH
28579: LD_VAR 0 4
28583: PPUSH
28584: CALL_OW 380
28588: GO 28607
// PrepareHuman ( false , i , skill ) ;
28590: LD_INT 0
28592: PPUSH
28593: LD_VAR 0 8
28597: PPUSH
28598: LD_VAR 0 4
28602: PPUSH
28603: CALL_OW 380
// end else
28607: GO 28626
// PrepareHuman ( false , i , skill ) ;
28609: LD_INT 0
28611: PPUSH
28612: LD_VAR 0 8
28616: PPUSH
28617: LD_VAR 0 4
28621: PPUSH
28622: CALL_OW 380
// un := CreateHuman ;
28626: LD_ADDR_VAR 0 14
28630: PUSH
28631: CALL_OW 44
28635: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28636: LD_ADDR_VAR 0 7
28640: PUSH
28641: LD_VAR 0 7
28645: PPUSH
28646: LD_INT 1
28648: PPUSH
28649: LD_VAR 0 14
28653: PPUSH
28654: CALL_OW 2
28658: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
28659: LD_VAR 0 14
28663: PPUSH
28664: LD_VAR 0 9
28668: PPUSH
28669: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
28673: LD_VAR 0 9
28677: PPUSH
28678: CALL_OW 313
28682: PUSH
28683: LD_INT 6
28685: EQUAL
28686: PUSH
28687: LD_VAR 0 9
28691: PPUSH
28692: CALL_OW 266
28696: PUSH
28697: LD_INT 32
28699: PUSH
28700: LD_INT 31
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: IN
28707: OR
28708: IFFALSE 28522
28710: GO 28519
28712: POP
28713: POP
// end else
28714: GO 29096
// for j = 1 to x do
28716: LD_ADDR_VAR 0 9
28720: PUSH
28721: DOUBLE
28722: LD_INT 1
28724: DEC
28725: ST_TO_ADDR
28726: LD_VAR 0 13
28730: PUSH
28731: FOR_TO
28732: IFFALSE 29094
// begin InitHc ;
28734: CALL_OW 19
// if not f then
28738: LD_VAR 0 12
28742: NOT
28743: IFFALSE 28832
// begin PrepareHuman ( false , i , skill ) ;
28745: LD_INT 0
28747: PPUSH
28748: LD_VAR 0 8
28752: PPUSH
28753: LD_VAR 0 4
28757: PPUSH
28758: CALL_OW 380
// un := CreateHuman ;
28762: LD_ADDR_VAR 0 14
28766: PUSH
28767: CALL_OW 44
28771: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28772: LD_ADDR_VAR 0 7
28776: PUSH
28777: LD_VAR 0 7
28781: PPUSH
28782: LD_INT 1
28784: PPUSH
28785: LD_VAR 0 14
28789: PPUSH
28790: CALL_OW 2
28794: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
28795: LD_VAR 0 14
28799: PPUSH
28800: LD_VAR 0 1
28804: PPUSH
28805: CALL_OW 250
28809: PPUSH
28810: LD_VAR 0 1
28814: PPUSH
28815: CALL_OW 251
28819: PPUSH
28820: LD_INT 10
28822: PPUSH
28823: LD_INT 0
28825: PPUSH
28826: CALL_OW 50
// continue ;
28830: GO 28731
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
28832: LD_VAR 0 12
28836: PUSH
28837: LD_INT 1
28839: ARRAY
28840: PPUSH
28841: CALL_OW 313
28845: PUSH
28846: LD_VAR 0 12
28850: PUSH
28851: LD_INT 1
28853: ARRAY
28854: PPUSH
28855: CALL_OW 266
28859: PUSH
28860: LD_INT 32
28862: PUSH
28863: LD_INT 31
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: IN
28870: AND
28871: PUSH
28872: LD_VAR 0 12
28876: PUSH
28877: LD_INT 1
28879: ARRAY
28880: PPUSH
28881: CALL_OW 313
28885: PUSH
28886: LD_INT 6
28888: EQUAL
28889: OR
28890: IFFALSE 28910
// f := Delete ( f , 1 ) ;
28892: LD_ADDR_VAR 0 12
28896: PUSH
28897: LD_VAR 0 12
28901: PPUSH
28902: LD_INT 1
28904: PPUSH
28905: CALL_OW 3
28909: ST_TO_ADDR
// if not f then
28910: LD_VAR 0 12
28914: NOT
28915: IFFALSE 28933
// begin x := x + 2 ;
28917: LD_ADDR_VAR 0 13
28921: PUSH
28922: LD_VAR 0 13
28926: PUSH
28927: LD_INT 2
28929: PLUS
28930: ST_TO_ADDR
// continue ;
28931: GO 28731
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
28933: LD_VAR 0 12
28937: PUSH
28938: LD_INT 1
28940: ARRAY
28941: PPUSH
28942: CALL_OW 266
28946: PUSH
28947: LD_INT 5
28949: EQUAL
28950: IFFALSE 29024
// begin if UnitsInside ( f [ 1 ] ) < 3 then
28952: LD_VAR 0 12
28956: PUSH
28957: LD_INT 1
28959: ARRAY
28960: PPUSH
28961: CALL_OW 313
28965: PUSH
28966: LD_INT 3
28968: LESS
28969: IFFALSE 29005
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28971: LD_INT 0
28973: PPUSH
28974: LD_INT 5
28976: PUSH
28977: LD_INT 8
28979: PUSH
28980: LD_INT 9
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: LIST
28987: PUSH
28988: LD_VAR 0 17
28992: ARRAY
28993: PPUSH
28994: LD_VAR 0 4
28998: PPUSH
28999: CALL_OW 380
29003: GO 29022
// PrepareHuman ( false , i , skill ) ;
29005: LD_INT 0
29007: PPUSH
29008: LD_VAR 0 8
29012: PPUSH
29013: LD_VAR 0 4
29017: PPUSH
29018: CALL_OW 380
// end else
29022: GO 29041
// PrepareHuman ( false , i , skill ) ;
29024: LD_INT 0
29026: PPUSH
29027: LD_VAR 0 8
29031: PPUSH
29032: LD_VAR 0 4
29036: PPUSH
29037: CALL_OW 380
// un := CreateHuman ;
29041: LD_ADDR_VAR 0 14
29045: PUSH
29046: CALL_OW 44
29050: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29051: LD_ADDR_VAR 0 7
29055: PUSH
29056: LD_VAR 0 7
29060: PPUSH
29061: LD_INT 1
29063: PPUSH
29064: LD_VAR 0 14
29068: PPUSH
29069: CALL_OW 2
29073: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29074: LD_VAR 0 14
29078: PPUSH
29079: LD_VAR 0 12
29083: PUSH
29084: LD_INT 1
29086: ARRAY
29087: PPUSH
29088: CALL_OW 52
// end ;
29092: GO 28731
29094: POP
29095: POP
// end ;
29096: GO 28033
29098: POP
29099: POP
// result := result ^ buildings ;
29100: LD_ADDR_VAR 0 7
29104: PUSH
29105: LD_VAR 0 7
29109: PUSH
29110: LD_VAR 0 18
29114: ADD
29115: ST_TO_ADDR
// end else
29116: GO 29259
// begin for i = 1 to personel do
29118: LD_ADDR_VAR 0 8
29122: PUSH
29123: DOUBLE
29124: LD_INT 1
29126: DEC
29127: ST_TO_ADDR
29128: LD_VAR 0 6
29132: PUSH
29133: FOR_TO
29134: IFFALSE 29257
// begin if i > 4 then
29136: LD_VAR 0 8
29140: PUSH
29141: LD_INT 4
29143: GREATER
29144: IFFALSE 29148
// break ;
29146: GO 29257
// x := personel [ i ] ;
29148: LD_ADDR_VAR 0 13
29152: PUSH
29153: LD_VAR 0 6
29157: PUSH
29158: LD_VAR 0 8
29162: ARRAY
29163: ST_TO_ADDR
// if x = - 1 then
29164: LD_VAR 0 13
29168: PUSH
29169: LD_INT 1
29171: NEG
29172: EQUAL
29173: IFFALSE 29177
// continue ;
29175: GO 29133
// PrepareHuman ( false , i , skill ) ;
29177: LD_INT 0
29179: PPUSH
29180: LD_VAR 0 8
29184: PPUSH
29185: LD_VAR 0 4
29189: PPUSH
29190: CALL_OW 380
// un := CreateHuman ;
29194: LD_ADDR_VAR 0 14
29198: PUSH
29199: CALL_OW 44
29203: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29204: LD_VAR 0 14
29208: PPUSH
29209: LD_VAR 0 1
29213: PPUSH
29214: CALL_OW 250
29218: PPUSH
29219: LD_VAR 0 1
29223: PPUSH
29224: CALL_OW 251
29228: PPUSH
29229: LD_INT 10
29231: PPUSH
29232: LD_INT 0
29234: PPUSH
29235: CALL_OW 50
// result := result ^ un ;
29239: LD_ADDR_VAR 0 7
29243: PUSH
29244: LD_VAR 0 7
29248: PUSH
29249: LD_VAR 0 14
29253: ADD
29254: ST_TO_ADDR
// end ;
29255: GO 29133
29257: POP
29258: POP
// end ; end ;
29259: LD_VAR 0 7
29263: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29264: LD_INT 0
29266: PPUSH
29267: PPUSH
29268: PPUSH
29269: PPUSH
29270: PPUSH
29271: PPUSH
29272: PPUSH
29273: PPUSH
29274: PPUSH
29275: PPUSH
29276: PPUSH
29277: PPUSH
29278: PPUSH
29279: PPUSH
29280: PPUSH
29281: PPUSH
// result := false ;
29282: LD_ADDR_VAR 0 3
29286: PUSH
29287: LD_INT 0
29289: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29290: LD_VAR 0 1
29294: NOT
29295: PUSH
29296: LD_VAR 0 1
29300: PPUSH
29301: CALL_OW 266
29305: PUSH
29306: LD_INT 32
29308: PUSH
29309: LD_INT 33
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: IN
29316: NOT
29317: OR
29318: IFFALSE 29322
// exit ;
29320: GO 30458
// nat := GetNation ( tower ) ;
29322: LD_ADDR_VAR 0 12
29326: PUSH
29327: LD_VAR 0 1
29331: PPUSH
29332: CALL_OW 248
29336: ST_TO_ADDR
// side := GetSide ( tower ) ;
29337: LD_ADDR_VAR 0 16
29341: PUSH
29342: LD_VAR 0 1
29346: PPUSH
29347: CALL_OW 255
29351: ST_TO_ADDR
// x := GetX ( tower ) ;
29352: LD_ADDR_VAR 0 10
29356: PUSH
29357: LD_VAR 0 1
29361: PPUSH
29362: CALL_OW 250
29366: ST_TO_ADDR
// y := GetY ( tower ) ;
29367: LD_ADDR_VAR 0 11
29371: PUSH
29372: LD_VAR 0 1
29376: PPUSH
29377: CALL_OW 251
29381: ST_TO_ADDR
// if not x or not y then
29382: LD_VAR 0 10
29386: NOT
29387: PUSH
29388: LD_VAR 0 11
29392: NOT
29393: OR
29394: IFFALSE 29398
// exit ;
29396: GO 30458
// weapon := 0 ;
29398: LD_ADDR_VAR 0 18
29402: PUSH
29403: LD_INT 0
29405: ST_TO_ADDR
// fac_list := [ ] ;
29406: LD_ADDR_VAR 0 17
29410: PUSH
29411: EMPTY
29412: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
29413: LD_ADDR_VAR 0 6
29417: PUSH
29418: LD_VAR 0 1
29422: PPUSH
29423: CALL_OW 274
29427: PPUSH
29428: LD_VAR 0 2
29432: PPUSH
29433: CALL 27036 0 2
29437: PPUSH
29438: LD_INT 30
29440: PUSH
29441: LD_INT 3
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PPUSH
29448: CALL_OW 72
29452: ST_TO_ADDR
// if not factories then
29453: LD_VAR 0 6
29457: NOT
29458: IFFALSE 29462
// exit ;
29460: GO 30458
// for i in factories do
29462: LD_ADDR_VAR 0 8
29466: PUSH
29467: LD_VAR 0 6
29471: PUSH
29472: FOR_IN
29473: IFFALSE 29498
// fac_list := fac_list union AvailableWeaponList ( i ) ;
29475: LD_ADDR_VAR 0 17
29479: PUSH
29480: LD_VAR 0 17
29484: PUSH
29485: LD_VAR 0 8
29489: PPUSH
29490: CALL_OW 478
29494: UNION
29495: ST_TO_ADDR
29496: GO 29472
29498: POP
29499: POP
// if not fac_list then
29500: LD_VAR 0 17
29504: NOT
29505: IFFALSE 29509
// exit ;
29507: GO 30458
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
29509: LD_ADDR_VAR 0 5
29513: PUSH
29514: LD_INT 4
29516: PUSH
29517: LD_INT 5
29519: PUSH
29520: LD_INT 9
29522: PUSH
29523: LD_INT 10
29525: PUSH
29526: LD_INT 6
29528: PUSH
29529: LD_INT 7
29531: PUSH
29532: LD_INT 11
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 27
29546: PUSH
29547: LD_INT 28
29549: PUSH
29550: LD_INT 26
29552: PUSH
29553: LD_INT 30
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 43
29564: PUSH
29565: LD_INT 44
29567: PUSH
29568: LD_INT 46
29570: PUSH
29571: LD_INT 45
29573: PUSH
29574: LD_INT 47
29576: PUSH
29577: LD_INT 49
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: LIST
29592: PUSH
29593: LD_VAR 0 12
29597: ARRAY
29598: ST_TO_ADDR
// for i in list do
29599: LD_ADDR_VAR 0 8
29603: PUSH
29604: LD_VAR 0 5
29608: PUSH
29609: FOR_IN
29610: IFFALSE 29643
// if not i in fac_list then
29612: LD_VAR 0 8
29616: PUSH
29617: LD_VAR 0 17
29621: IN
29622: NOT
29623: IFFALSE 29641
// list := list diff i ;
29625: LD_ADDR_VAR 0 5
29629: PUSH
29630: LD_VAR 0 5
29634: PUSH
29635: LD_VAR 0 8
29639: DIFF
29640: ST_TO_ADDR
29641: GO 29609
29643: POP
29644: POP
// if not list then
29645: LD_VAR 0 5
29649: NOT
29650: IFFALSE 29654
// exit ;
29652: GO 30458
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
29654: LD_VAR 0 12
29658: PUSH
29659: LD_INT 3
29661: EQUAL
29662: PUSH
29663: LD_INT 49
29665: PUSH
29666: LD_VAR 0 5
29670: IN
29671: AND
29672: PUSH
29673: LD_INT 31
29675: PPUSH
29676: LD_VAR 0 16
29680: PPUSH
29681: CALL_OW 321
29685: PUSH
29686: LD_INT 2
29688: EQUAL
29689: AND
29690: IFFALSE 29750
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
29692: LD_INT 22
29694: PUSH
29695: LD_VAR 0 16
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: LD_INT 35
29706: PUSH
29707: LD_INT 49
29709: PUSH
29710: EMPTY
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 91
29716: PUSH
29717: LD_VAR 0 1
29721: PUSH
29722: LD_INT 10
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: LIST
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: LIST
29734: PPUSH
29735: CALL_OW 69
29739: NOT
29740: IFFALSE 29750
// weapon := ru_time_lapser ;
29742: LD_ADDR_VAR 0 18
29746: PUSH
29747: LD_INT 49
29749: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
29750: LD_VAR 0 12
29754: PUSH
29755: LD_INT 1
29757: PUSH
29758: LD_INT 2
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: IN
29765: PUSH
29766: LD_INT 11
29768: PUSH
29769: LD_VAR 0 5
29773: IN
29774: PUSH
29775: LD_INT 30
29777: PUSH
29778: LD_VAR 0 5
29782: IN
29783: OR
29784: AND
29785: PUSH
29786: LD_INT 6
29788: PPUSH
29789: LD_VAR 0 16
29793: PPUSH
29794: CALL_OW 321
29798: PUSH
29799: LD_INT 2
29801: EQUAL
29802: AND
29803: IFFALSE 29968
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
29805: LD_INT 22
29807: PUSH
29808: LD_VAR 0 16
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 2
29819: PUSH
29820: LD_INT 35
29822: PUSH
29823: LD_INT 11
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 35
29832: PUSH
29833: LD_INT 30
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 91
29847: PUSH
29848: LD_VAR 0 1
29852: PUSH
29853: LD_INT 18
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: LIST
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: LIST
29865: PPUSH
29866: CALL_OW 69
29870: NOT
29871: PUSH
29872: LD_INT 22
29874: PUSH
29875: LD_VAR 0 16
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 2
29886: PUSH
29887: LD_INT 30
29889: PUSH
29890: LD_INT 32
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 30
29899: PUSH
29900: LD_INT 33
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 91
29914: PUSH
29915: LD_VAR 0 1
29919: PUSH
29920: LD_INT 12
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: LIST
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: LIST
29932: PUSH
29933: EMPTY
29934: LIST
29935: PPUSH
29936: CALL_OW 69
29940: PUSH
29941: LD_INT 2
29943: GREATER
29944: AND
29945: IFFALSE 29968
// weapon := [ us_radar , ar_radar ] [ nat ] ;
29947: LD_ADDR_VAR 0 18
29951: PUSH
29952: LD_INT 11
29954: PUSH
29955: LD_INT 30
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_VAR 0 12
29966: ARRAY
29967: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
29968: LD_VAR 0 18
29972: NOT
29973: PUSH
29974: LD_INT 40
29976: PPUSH
29977: LD_VAR 0 16
29981: PPUSH
29982: CALL_OW 321
29986: PUSH
29987: LD_INT 2
29989: EQUAL
29990: AND
29991: PUSH
29992: LD_INT 7
29994: PUSH
29995: LD_VAR 0 5
29999: IN
30000: PUSH
30001: LD_INT 28
30003: PUSH
30004: LD_VAR 0 5
30008: IN
30009: OR
30010: PUSH
30011: LD_INT 45
30013: PUSH
30014: LD_VAR 0 5
30018: IN
30019: OR
30020: AND
30021: IFFALSE 30275
// begin hex := GetHexInfo ( x , y ) ;
30023: LD_ADDR_VAR 0 4
30027: PUSH
30028: LD_VAR 0 10
30032: PPUSH
30033: LD_VAR 0 11
30037: PPUSH
30038: CALL_OW 546
30042: ST_TO_ADDR
// if hex [ 1 ] then
30043: LD_VAR 0 4
30047: PUSH
30048: LD_INT 1
30050: ARRAY
30051: IFFALSE 30055
// exit ;
30053: GO 30458
// height := hex [ 2 ] ;
30055: LD_ADDR_VAR 0 15
30059: PUSH
30060: LD_VAR 0 4
30064: PUSH
30065: LD_INT 2
30067: ARRAY
30068: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30069: LD_ADDR_VAR 0 14
30073: PUSH
30074: LD_INT 0
30076: PUSH
30077: LD_INT 2
30079: PUSH
30080: LD_INT 3
30082: PUSH
30083: LD_INT 5
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: ST_TO_ADDR
// for i in tmp do
30092: LD_ADDR_VAR 0 8
30096: PUSH
30097: LD_VAR 0 14
30101: PUSH
30102: FOR_IN
30103: IFFALSE 30273
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30105: LD_ADDR_VAR 0 9
30109: PUSH
30110: LD_VAR 0 10
30114: PPUSH
30115: LD_VAR 0 8
30119: PPUSH
30120: LD_INT 5
30122: PPUSH
30123: CALL_OW 272
30127: PUSH
30128: LD_VAR 0 11
30132: PPUSH
30133: LD_VAR 0 8
30137: PPUSH
30138: LD_INT 5
30140: PPUSH
30141: CALL_OW 273
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30150: LD_VAR 0 9
30154: PUSH
30155: LD_INT 1
30157: ARRAY
30158: PPUSH
30159: LD_VAR 0 9
30163: PUSH
30164: LD_INT 2
30166: ARRAY
30167: PPUSH
30168: CALL_OW 488
30172: IFFALSE 30271
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30174: LD_ADDR_VAR 0 4
30178: PUSH
30179: LD_VAR 0 9
30183: PUSH
30184: LD_INT 1
30186: ARRAY
30187: PPUSH
30188: LD_VAR 0 9
30192: PUSH
30193: LD_INT 2
30195: ARRAY
30196: PPUSH
30197: CALL_OW 546
30201: ST_TO_ADDR
// if hex [ 1 ] then
30202: LD_VAR 0 4
30206: PUSH
30207: LD_INT 1
30209: ARRAY
30210: IFFALSE 30214
// continue ;
30212: GO 30102
// h := hex [ 2 ] ;
30214: LD_ADDR_VAR 0 13
30218: PUSH
30219: LD_VAR 0 4
30223: PUSH
30224: LD_INT 2
30226: ARRAY
30227: ST_TO_ADDR
// if h + 7 < height then
30228: LD_VAR 0 13
30232: PUSH
30233: LD_INT 7
30235: PLUS
30236: PUSH
30237: LD_VAR 0 15
30241: LESS
30242: IFFALSE 30271
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30244: LD_ADDR_VAR 0 18
30248: PUSH
30249: LD_INT 7
30251: PUSH
30252: LD_INT 28
30254: PUSH
30255: LD_INT 45
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: LIST
30262: PUSH
30263: LD_VAR 0 12
30267: ARRAY
30268: ST_TO_ADDR
// break ;
30269: GO 30273
// end ; end ; end ;
30271: GO 30102
30273: POP
30274: POP
// end ; if not weapon then
30275: LD_VAR 0 18
30279: NOT
30280: IFFALSE 30340
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30282: LD_ADDR_VAR 0 5
30286: PUSH
30287: LD_VAR 0 5
30291: PUSH
30292: LD_INT 11
30294: PUSH
30295: LD_INT 30
30297: PUSH
30298: LD_INT 49
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: LIST
30305: DIFF
30306: ST_TO_ADDR
// if not list then
30307: LD_VAR 0 5
30311: NOT
30312: IFFALSE 30316
// exit ;
30314: GO 30458
// weapon := list [ rand ( 1 , list ) ] ;
30316: LD_ADDR_VAR 0 18
30320: PUSH
30321: LD_VAR 0 5
30325: PUSH
30326: LD_INT 1
30328: PPUSH
30329: LD_VAR 0 5
30333: PPUSH
30334: CALL_OW 12
30338: ARRAY
30339: ST_TO_ADDR
// end ; if weapon then
30340: LD_VAR 0 18
30344: IFFALSE 30458
// begin tmp := CostOfWeapon ( weapon ) ;
30346: LD_ADDR_VAR 0 14
30350: PUSH
30351: LD_VAR 0 18
30355: PPUSH
30356: CALL_OW 451
30360: ST_TO_ADDR
// j := GetBase ( tower ) ;
30361: LD_ADDR_VAR 0 9
30365: PUSH
30366: LD_VAR 0 1
30370: PPUSH
30371: CALL_OW 274
30375: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30376: LD_VAR 0 9
30380: PPUSH
30381: LD_INT 1
30383: PPUSH
30384: CALL_OW 275
30388: PUSH
30389: LD_VAR 0 14
30393: PUSH
30394: LD_INT 1
30396: ARRAY
30397: GREATEREQUAL
30398: PUSH
30399: LD_VAR 0 9
30403: PPUSH
30404: LD_INT 2
30406: PPUSH
30407: CALL_OW 275
30411: PUSH
30412: LD_VAR 0 14
30416: PUSH
30417: LD_INT 2
30419: ARRAY
30420: GREATEREQUAL
30421: AND
30422: PUSH
30423: LD_VAR 0 9
30427: PPUSH
30428: LD_INT 3
30430: PPUSH
30431: CALL_OW 275
30435: PUSH
30436: LD_VAR 0 14
30440: PUSH
30441: LD_INT 3
30443: ARRAY
30444: GREATEREQUAL
30445: AND
30446: IFFALSE 30458
// result := weapon ;
30448: LD_ADDR_VAR 0 3
30452: PUSH
30453: LD_VAR 0 18
30457: ST_TO_ADDR
// end ; end ;
30458: LD_VAR 0 3
30462: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
30463: LD_INT 0
30465: PPUSH
30466: PPUSH
// result := true ;
30467: LD_ADDR_VAR 0 3
30471: PUSH
30472: LD_INT 1
30474: ST_TO_ADDR
// if array1 = array2 then
30475: LD_VAR 0 1
30479: PUSH
30480: LD_VAR 0 2
30484: EQUAL
30485: IFFALSE 30545
// begin for i = 1 to array1 do
30487: LD_ADDR_VAR 0 4
30491: PUSH
30492: DOUBLE
30493: LD_INT 1
30495: DEC
30496: ST_TO_ADDR
30497: LD_VAR 0 1
30501: PUSH
30502: FOR_TO
30503: IFFALSE 30541
// if array1 [ i ] <> array2 [ i ] then
30505: LD_VAR 0 1
30509: PUSH
30510: LD_VAR 0 4
30514: ARRAY
30515: PUSH
30516: LD_VAR 0 2
30520: PUSH
30521: LD_VAR 0 4
30525: ARRAY
30526: NONEQUAL
30527: IFFALSE 30539
// begin result := false ;
30529: LD_ADDR_VAR 0 3
30533: PUSH
30534: LD_INT 0
30536: ST_TO_ADDR
// break ;
30537: GO 30541
// end ;
30539: GO 30502
30541: POP
30542: POP
// end else
30543: GO 30553
// result := false ;
30545: LD_ADDR_VAR 0 3
30549: PUSH
30550: LD_INT 0
30552: ST_TO_ADDR
// end ;
30553: LD_VAR 0 3
30557: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
30558: LD_INT 0
30560: PPUSH
30561: PPUSH
30562: PPUSH
// pom := GetBase ( fac ) ;
30563: LD_ADDR_VAR 0 5
30567: PUSH
30568: LD_VAR 0 1
30572: PPUSH
30573: CALL_OW 274
30577: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
30578: LD_ADDR_VAR 0 4
30582: PUSH
30583: LD_VAR 0 2
30587: PUSH
30588: LD_INT 1
30590: ARRAY
30591: PPUSH
30592: LD_VAR 0 2
30596: PUSH
30597: LD_INT 2
30599: ARRAY
30600: PPUSH
30601: LD_VAR 0 2
30605: PUSH
30606: LD_INT 3
30608: ARRAY
30609: PPUSH
30610: LD_VAR 0 2
30614: PUSH
30615: LD_INT 4
30617: ARRAY
30618: PPUSH
30619: CALL_OW 449
30623: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30624: LD_ADDR_VAR 0 3
30628: PUSH
30629: LD_VAR 0 5
30633: PPUSH
30634: LD_INT 1
30636: PPUSH
30637: CALL_OW 275
30641: PUSH
30642: LD_VAR 0 4
30646: PUSH
30647: LD_INT 1
30649: ARRAY
30650: GREATEREQUAL
30651: PUSH
30652: LD_VAR 0 5
30656: PPUSH
30657: LD_INT 2
30659: PPUSH
30660: CALL_OW 275
30664: PUSH
30665: LD_VAR 0 4
30669: PUSH
30670: LD_INT 2
30672: ARRAY
30673: GREATEREQUAL
30674: AND
30675: PUSH
30676: LD_VAR 0 5
30680: PPUSH
30681: LD_INT 3
30683: PPUSH
30684: CALL_OW 275
30688: PUSH
30689: LD_VAR 0 4
30693: PUSH
30694: LD_INT 3
30696: ARRAY
30697: GREATEREQUAL
30698: AND
30699: ST_TO_ADDR
// end ;
30700: LD_VAR 0 3
30704: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
30705: LD_INT 0
30707: PPUSH
30708: PPUSH
30709: PPUSH
30710: PPUSH
// pom := GetBase ( building ) ;
30711: LD_ADDR_VAR 0 3
30715: PUSH
30716: LD_VAR 0 1
30720: PPUSH
30721: CALL_OW 274
30725: ST_TO_ADDR
// if not pom then
30726: LD_VAR 0 3
30730: NOT
30731: IFFALSE 30735
// exit ;
30733: GO 30905
// btype := GetBType ( building ) ;
30735: LD_ADDR_VAR 0 5
30739: PUSH
30740: LD_VAR 0 1
30744: PPUSH
30745: CALL_OW 266
30749: ST_TO_ADDR
// if btype = b_armoury then
30750: LD_VAR 0 5
30754: PUSH
30755: LD_INT 4
30757: EQUAL
30758: IFFALSE 30768
// btype := b_barracks ;
30760: LD_ADDR_VAR 0 5
30764: PUSH
30765: LD_INT 5
30767: ST_TO_ADDR
// if btype = b_depot then
30768: LD_VAR 0 5
30772: PUSH
30773: LD_INT 0
30775: EQUAL
30776: IFFALSE 30786
// btype := b_warehouse ;
30778: LD_ADDR_VAR 0 5
30782: PUSH
30783: LD_INT 1
30785: ST_TO_ADDR
// if btype = b_workshop then
30786: LD_VAR 0 5
30790: PUSH
30791: LD_INT 2
30793: EQUAL
30794: IFFALSE 30804
// btype := b_factory ;
30796: LD_ADDR_VAR 0 5
30800: PUSH
30801: LD_INT 3
30803: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30804: LD_ADDR_VAR 0 4
30808: PUSH
30809: LD_VAR 0 5
30813: PPUSH
30814: LD_VAR 0 1
30818: PPUSH
30819: CALL_OW 248
30823: PPUSH
30824: CALL_OW 450
30828: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30829: LD_ADDR_VAR 0 2
30833: PUSH
30834: LD_VAR 0 3
30838: PPUSH
30839: LD_INT 1
30841: PPUSH
30842: CALL_OW 275
30846: PUSH
30847: LD_VAR 0 4
30851: PUSH
30852: LD_INT 1
30854: ARRAY
30855: GREATEREQUAL
30856: PUSH
30857: LD_VAR 0 3
30861: PPUSH
30862: LD_INT 2
30864: PPUSH
30865: CALL_OW 275
30869: PUSH
30870: LD_VAR 0 4
30874: PUSH
30875: LD_INT 2
30877: ARRAY
30878: GREATEREQUAL
30879: AND
30880: PUSH
30881: LD_VAR 0 3
30885: PPUSH
30886: LD_INT 3
30888: PPUSH
30889: CALL_OW 275
30893: PUSH
30894: LD_VAR 0 4
30898: PUSH
30899: LD_INT 3
30901: ARRAY
30902: GREATEREQUAL
30903: AND
30904: ST_TO_ADDR
// end ;
30905: LD_VAR 0 2
30909: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
30910: LD_INT 0
30912: PPUSH
30913: PPUSH
30914: PPUSH
// pom := GetBase ( building ) ;
30915: LD_ADDR_VAR 0 4
30919: PUSH
30920: LD_VAR 0 1
30924: PPUSH
30925: CALL_OW 274
30929: ST_TO_ADDR
// if not pom then
30930: LD_VAR 0 4
30934: NOT
30935: IFFALSE 30939
// exit ;
30937: GO 31040
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30939: LD_ADDR_VAR 0 5
30943: PUSH
30944: LD_VAR 0 2
30948: PPUSH
30949: LD_VAR 0 1
30953: PPUSH
30954: CALL_OW 248
30958: PPUSH
30959: CALL_OW 450
30963: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30964: LD_ADDR_VAR 0 3
30968: PUSH
30969: LD_VAR 0 4
30973: PPUSH
30974: LD_INT 1
30976: PPUSH
30977: CALL_OW 275
30981: PUSH
30982: LD_VAR 0 5
30986: PUSH
30987: LD_INT 1
30989: ARRAY
30990: GREATEREQUAL
30991: PUSH
30992: LD_VAR 0 4
30996: PPUSH
30997: LD_INT 2
30999: PPUSH
31000: CALL_OW 275
31004: PUSH
31005: LD_VAR 0 5
31009: PUSH
31010: LD_INT 2
31012: ARRAY
31013: GREATEREQUAL
31014: AND
31015: PUSH
31016: LD_VAR 0 4
31020: PPUSH
31021: LD_INT 3
31023: PPUSH
31024: CALL_OW 275
31028: PUSH
31029: LD_VAR 0 5
31033: PUSH
31034: LD_INT 3
31036: ARRAY
31037: GREATEREQUAL
31038: AND
31039: ST_TO_ADDR
// end ;
31040: LD_VAR 0 3
31044: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
31045: LD_INT 0
31047: PPUSH
31048: PPUSH
31049: PPUSH
31050: PPUSH
31051: PPUSH
31052: PPUSH
31053: PPUSH
31054: PPUSH
31055: PPUSH
31056: PPUSH
// result := false ;
31057: LD_ADDR_VAR 0 6
31061: PUSH
31062: LD_INT 0
31064: ST_TO_ADDR
// if not base or not btype or not x or not y then
31065: LD_VAR 0 1
31069: NOT
31070: PUSH
31071: LD_VAR 0 2
31075: NOT
31076: OR
31077: PUSH
31078: LD_VAR 0 3
31082: NOT
31083: OR
31084: PUSH
31085: LD_VAR 0 4
31089: NOT
31090: OR
31091: IFFALSE 31095
// exit ;
31093: GO 31704
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
31095: LD_ADDR_VAR 0 12
31099: PUSH
31100: LD_VAR 0 2
31104: PPUSH
31105: LD_VAR 0 3
31109: PPUSH
31110: LD_VAR 0 4
31114: PPUSH
31115: LD_VAR 0 5
31119: PPUSH
31120: LD_VAR 0 1
31124: PUSH
31125: LD_INT 1
31127: ARRAY
31128: PPUSH
31129: CALL_OW 248
31133: PPUSH
31134: LD_INT 0
31136: PPUSH
31137: CALL 32541 0 6
31141: ST_TO_ADDR
// if not hexes then
31142: LD_VAR 0 12
31146: NOT
31147: IFFALSE 31151
// exit ;
31149: GO 31704
// for i = 1 to hexes do
31151: LD_ADDR_VAR 0 7
31155: PUSH
31156: DOUBLE
31157: LD_INT 1
31159: DEC
31160: ST_TO_ADDR
31161: LD_VAR 0 12
31165: PUSH
31166: FOR_TO
31167: IFFALSE 31702
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31169: LD_ADDR_VAR 0 11
31173: PUSH
31174: LD_VAR 0 12
31178: PUSH
31179: LD_VAR 0 7
31183: ARRAY
31184: PUSH
31185: LD_INT 1
31187: ARRAY
31188: PPUSH
31189: LD_VAR 0 12
31193: PUSH
31194: LD_VAR 0 7
31198: ARRAY
31199: PUSH
31200: LD_INT 2
31202: ARRAY
31203: PPUSH
31204: CALL_OW 428
31208: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31209: LD_VAR 0 12
31213: PUSH
31214: LD_VAR 0 7
31218: ARRAY
31219: PUSH
31220: LD_INT 1
31222: ARRAY
31223: PPUSH
31224: LD_VAR 0 12
31228: PUSH
31229: LD_VAR 0 7
31233: ARRAY
31234: PUSH
31235: LD_INT 2
31237: ARRAY
31238: PPUSH
31239: CALL_OW 351
31243: PUSH
31244: LD_VAR 0 12
31248: PUSH
31249: LD_VAR 0 7
31253: ARRAY
31254: PUSH
31255: LD_INT 1
31257: ARRAY
31258: PPUSH
31259: LD_VAR 0 12
31263: PUSH
31264: LD_VAR 0 7
31268: ARRAY
31269: PUSH
31270: LD_INT 2
31272: ARRAY
31273: PPUSH
31274: CALL_OW 488
31278: NOT
31279: OR
31280: PUSH
31281: LD_VAR 0 11
31285: PPUSH
31286: CALL_OW 247
31290: PUSH
31291: LD_INT 3
31293: EQUAL
31294: OR
31295: IFFALSE 31301
// exit ;
31297: POP
31298: POP
31299: GO 31704
// if not tmp or not tmp in base then
31301: LD_VAR 0 11
31305: NOT
31306: PUSH
31307: LD_VAR 0 11
31311: PUSH
31312: LD_VAR 0 1
31316: IN
31317: NOT
31318: OR
31319: IFFALSE 31323
// continue ;
31321: GO 31166
// result := true ;
31323: LD_ADDR_VAR 0 6
31327: PUSH
31328: LD_INT 1
31330: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31331: LD_ADDR_VAR 0 15
31335: PUSH
31336: LD_VAR 0 1
31340: PPUSH
31341: LD_INT 22
31343: PUSH
31344: LD_VAR 0 11
31348: PPUSH
31349: CALL_OW 255
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 2
31360: PUSH
31361: LD_INT 30
31363: PUSH
31364: LD_INT 0
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 30
31373: PUSH
31374: LD_INT 1
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: LIST
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PPUSH
31390: CALL_OW 72
31394: ST_TO_ADDR
// if dep then
31395: LD_VAR 0 15
31399: IFFALSE 31535
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
31401: LD_ADDR_VAR 0 14
31405: PUSH
31406: LD_VAR 0 15
31410: PUSH
31411: LD_INT 1
31413: ARRAY
31414: PPUSH
31415: CALL_OW 250
31419: PPUSH
31420: LD_VAR 0 15
31424: PUSH
31425: LD_INT 1
31427: ARRAY
31428: PPUSH
31429: CALL_OW 254
31433: PPUSH
31434: LD_INT 5
31436: PPUSH
31437: CALL_OW 272
31441: PUSH
31442: LD_VAR 0 15
31446: PUSH
31447: LD_INT 1
31449: ARRAY
31450: PPUSH
31451: CALL_OW 251
31455: PPUSH
31456: LD_VAR 0 15
31460: PUSH
31461: LD_INT 1
31463: ARRAY
31464: PPUSH
31465: CALL_OW 254
31469: PPUSH
31470: LD_INT 5
31472: PPUSH
31473: CALL_OW 273
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
31482: LD_VAR 0 14
31486: PUSH
31487: LD_INT 1
31489: ARRAY
31490: PPUSH
31491: LD_VAR 0 14
31495: PUSH
31496: LD_INT 2
31498: ARRAY
31499: PPUSH
31500: CALL_OW 488
31504: IFFALSE 31535
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
31506: LD_VAR 0 11
31510: PPUSH
31511: LD_VAR 0 14
31515: PUSH
31516: LD_INT 1
31518: ARRAY
31519: PPUSH
31520: LD_VAR 0 14
31524: PUSH
31525: LD_INT 2
31527: ARRAY
31528: PPUSH
31529: CALL_OW 111
// continue ;
31533: GO 31166
// end ; end ; r := GetDir ( tmp ) ;
31535: LD_ADDR_VAR 0 13
31539: PUSH
31540: LD_VAR 0 11
31544: PPUSH
31545: CALL_OW 254
31549: ST_TO_ADDR
// if r = 5 then
31550: LD_VAR 0 13
31554: PUSH
31555: LD_INT 5
31557: EQUAL
31558: IFFALSE 31568
// r := 0 ;
31560: LD_ADDR_VAR 0 13
31564: PUSH
31565: LD_INT 0
31567: ST_TO_ADDR
// for j = r to 5 do
31568: LD_ADDR_VAR 0 8
31572: PUSH
31573: DOUBLE
31574: LD_VAR 0 13
31578: DEC
31579: ST_TO_ADDR
31580: LD_INT 5
31582: PUSH
31583: FOR_TO
31584: IFFALSE 31698
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
31586: LD_ADDR_VAR 0 9
31590: PUSH
31591: LD_VAR 0 11
31595: PPUSH
31596: CALL_OW 250
31600: PPUSH
31601: LD_VAR 0 8
31605: PPUSH
31606: LD_INT 2
31608: PPUSH
31609: CALL_OW 272
31613: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
31614: LD_ADDR_VAR 0 10
31618: PUSH
31619: LD_VAR 0 11
31623: PPUSH
31624: CALL_OW 251
31628: PPUSH
31629: LD_VAR 0 8
31633: PPUSH
31634: LD_INT 2
31636: PPUSH
31637: CALL_OW 273
31641: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
31642: LD_VAR 0 9
31646: PPUSH
31647: LD_VAR 0 10
31651: PPUSH
31652: CALL_OW 488
31656: PUSH
31657: LD_VAR 0 9
31661: PPUSH
31662: LD_VAR 0 10
31666: PPUSH
31667: CALL_OW 428
31671: NOT
31672: AND
31673: IFFALSE 31696
// begin ComMoveXY ( tmp , _x , _y ) ;
31675: LD_VAR 0 11
31679: PPUSH
31680: LD_VAR 0 9
31684: PPUSH
31685: LD_VAR 0 10
31689: PPUSH
31690: CALL_OW 111
// break ;
31694: GO 31698
// end ; end ;
31696: GO 31583
31698: POP
31699: POP
// end ;
31700: GO 31166
31702: POP
31703: POP
// end ;
31704: LD_VAR 0 6
31708: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
31709: LD_INT 0
31711: PPUSH
31712: PPUSH
31713: PPUSH
31714: PPUSH
31715: PPUSH
31716: PPUSH
31717: PPUSH
31718: PPUSH
31719: PPUSH
31720: PPUSH
// result := false ;
31721: LD_ADDR_VAR 0 6
31725: PUSH
31726: LD_INT 0
31728: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
31729: LD_VAR 0 1
31733: NOT
31734: PUSH
31735: LD_VAR 0 1
31739: PPUSH
31740: CALL_OW 266
31744: PUSH
31745: LD_INT 0
31747: PUSH
31748: LD_INT 1
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: IN
31755: NOT
31756: OR
31757: PUSH
31758: LD_VAR 0 2
31762: NOT
31763: OR
31764: PUSH
31765: LD_VAR 0 5
31769: PUSH
31770: LD_INT 0
31772: PUSH
31773: LD_INT 1
31775: PUSH
31776: LD_INT 2
31778: PUSH
31779: LD_INT 3
31781: PUSH
31782: LD_INT 4
31784: PUSH
31785: LD_INT 5
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: IN
31796: NOT
31797: OR
31798: PUSH
31799: LD_VAR 0 3
31803: PPUSH
31804: LD_VAR 0 4
31808: PPUSH
31809: CALL_OW 488
31813: NOT
31814: OR
31815: IFFALSE 31819
// exit ;
31817: GO 32536
// pom := GetBase ( depot ) ;
31819: LD_ADDR_VAR 0 10
31823: PUSH
31824: LD_VAR 0 1
31828: PPUSH
31829: CALL_OW 274
31833: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
31834: LD_ADDR_VAR 0 11
31838: PUSH
31839: LD_VAR 0 2
31843: PPUSH
31844: LD_VAR 0 1
31848: PPUSH
31849: CALL_OW 248
31853: PPUSH
31854: CALL_OW 450
31858: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
31859: LD_VAR 0 10
31863: PPUSH
31864: LD_INT 1
31866: PPUSH
31867: CALL_OW 275
31871: PUSH
31872: LD_VAR 0 11
31876: PUSH
31877: LD_INT 1
31879: ARRAY
31880: GREATEREQUAL
31881: PUSH
31882: LD_VAR 0 10
31886: PPUSH
31887: LD_INT 2
31889: PPUSH
31890: CALL_OW 275
31894: PUSH
31895: LD_VAR 0 11
31899: PUSH
31900: LD_INT 2
31902: ARRAY
31903: GREATEREQUAL
31904: AND
31905: PUSH
31906: LD_VAR 0 10
31910: PPUSH
31911: LD_INT 3
31913: PPUSH
31914: CALL_OW 275
31918: PUSH
31919: LD_VAR 0 11
31923: PUSH
31924: LD_INT 3
31926: ARRAY
31927: GREATEREQUAL
31928: AND
31929: NOT
31930: IFFALSE 31934
// exit ;
31932: GO 32536
// if GetBType ( depot ) = b_depot then
31934: LD_VAR 0 1
31938: PPUSH
31939: CALL_OW 266
31943: PUSH
31944: LD_INT 0
31946: EQUAL
31947: IFFALSE 31959
// dist := 28 else
31949: LD_ADDR_VAR 0 14
31953: PUSH
31954: LD_INT 28
31956: ST_TO_ADDR
31957: GO 31967
// dist := 36 ;
31959: LD_ADDR_VAR 0 14
31963: PUSH
31964: LD_INT 36
31966: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
31967: LD_VAR 0 1
31971: PPUSH
31972: LD_VAR 0 3
31976: PPUSH
31977: LD_VAR 0 4
31981: PPUSH
31982: CALL_OW 297
31986: PUSH
31987: LD_VAR 0 14
31991: GREATER
31992: IFFALSE 31996
// exit ;
31994: GO 32536
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
31996: LD_ADDR_VAR 0 12
32000: PUSH
32001: LD_VAR 0 2
32005: PPUSH
32006: LD_VAR 0 3
32010: PPUSH
32011: LD_VAR 0 4
32015: PPUSH
32016: LD_VAR 0 5
32020: PPUSH
32021: LD_VAR 0 1
32025: PPUSH
32026: CALL_OW 248
32030: PPUSH
32031: LD_INT 0
32033: PPUSH
32034: CALL 32541 0 6
32038: ST_TO_ADDR
// if not hexes then
32039: LD_VAR 0 12
32043: NOT
32044: IFFALSE 32048
// exit ;
32046: GO 32536
// hex := GetHexInfo ( x , y ) ;
32048: LD_ADDR_VAR 0 15
32052: PUSH
32053: LD_VAR 0 3
32057: PPUSH
32058: LD_VAR 0 4
32062: PPUSH
32063: CALL_OW 546
32067: ST_TO_ADDR
// if hex [ 1 ] then
32068: LD_VAR 0 15
32072: PUSH
32073: LD_INT 1
32075: ARRAY
32076: IFFALSE 32080
// exit ;
32078: GO 32536
// height := hex [ 2 ] ;
32080: LD_ADDR_VAR 0 13
32084: PUSH
32085: LD_VAR 0 15
32089: PUSH
32090: LD_INT 2
32092: ARRAY
32093: ST_TO_ADDR
// for i = 1 to hexes do
32094: LD_ADDR_VAR 0 7
32098: PUSH
32099: DOUBLE
32100: LD_INT 1
32102: DEC
32103: ST_TO_ADDR
32104: LD_VAR 0 12
32108: PUSH
32109: FOR_TO
32110: IFFALSE 32440
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
32112: LD_VAR 0 12
32116: PUSH
32117: LD_VAR 0 7
32121: ARRAY
32122: PUSH
32123: LD_INT 1
32125: ARRAY
32126: PPUSH
32127: LD_VAR 0 12
32131: PUSH
32132: LD_VAR 0 7
32136: ARRAY
32137: PUSH
32138: LD_INT 2
32140: ARRAY
32141: PPUSH
32142: CALL_OW 488
32146: NOT
32147: PUSH
32148: LD_VAR 0 12
32152: PUSH
32153: LD_VAR 0 7
32157: ARRAY
32158: PUSH
32159: LD_INT 1
32161: ARRAY
32162: PPUSH
32163: LD_VAR 0 12
32167: PUSH
32168: LD_VAR 0 7
32172: ARRAY
32173: PUSH
32174: LD_INT 2
32176: ARRAY
32177: PPUSH
32178: CALL_OW 428
32182: PUSH
32183: LD_INT 0
32185: GREATER
32186: OR
32187: PUSH
32188: LD_VAR 0 12
32192: PUSH
32193: LD_VAR 0 7
32197: ARRAY
32198: PUSH
32199: LD_INT 1
32201: ARRAY
32202: PPUSH
32203: LD_VAR 0 12
32207: PUSH
32208: LD_VAR 0 7
32212: ARRAY
32213: PUSH
32214: LD_INT 2
32216: ARRAY
32217: PPUSH
32218: CALL_OW 351
32222: OR
32223: IFFALSE 32229
// exit ;
32225: POP
32226: POP
32227: GO 32536
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32229: LD_ADDR_VAR 0 8
32233: PUSH
32234: LD_VAR 0 12
32238: PUSH
32239: LD_VAR 0 7
32243: ARRAY
32244: PUSH
32245: LD_INT 1
32247: ARRAY
32248: PPUSH
32249: LD_VAR 0 12
32253: PUSH
32254: LD_VAR 0 7
32258: ARRAY
32259: PUSH
32260: LD_INT 2
32262: ARRAY
32263: PPUSH
32264: CALL_OW 546
32268: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
32269: LD_VAR 0 8
32273: PUSH
32274: LD_INT 1
32276: ARRAY
32277: PUSH
32278: LD_VAR 0 8
32282: PUSH
32283: LD_INT 2
32285: ARRAY
32286: PUSH
32287: LD_VAR 0 13
32291: PUSH
32292: LD_INT 2
32294: PLUS
32295: GREATER
32296: OR
32297: PUSH
32298: LD_VAR 0 8
32302: PUSH
32303: LD_INT 2
32305: ARRAY
32306: PUSH
32307: LD_VAR 0 13
32311: PUSH
32312: LD_INT 2
32314: MINUS
32315: LESS
32316: OR
32317: PUSH
32318: LD_VAR 0 8
32322: PUSH
32323: LD_INT 3
32325: ARRAY
32326: PUSH
32327: LD_INT 0
32329: PUSH
32330: LD_INT 8
32332: PUSH
32333: LD_INT 9
32335: PUSH
32336: LD_INT 10
32338: PUSH
32339: LD_INT 11
32341: PUSH
32342: LD_INT 12
32344: PUSH
32345: LD_INT 13
32347: PUSH
32348: LD_INT 16
32350: PUSH
32351: LD_INT 17
32353: PUSH
32354: LD_INT 18
32356: PUSH
32357: LD_INT 19
32359: PUSH
32360: LD_INT 20
32362: PUSH
32363: LD_INT 21
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: IN
32381: NOT
32382: OR
32383: PUSH
32384: LD_VAR 0 8
32388: PUSH
32389: LD_INT 5
32391: ARRAY
32392: NOT
32393: OR
32394: PUSH
32395: LD_VAR 0 8
32399: PUSH
32400: LD_INT 6
32402: ARRAY
32403: PUSH
32404: LD_INT 1
32406: PUSH
32407: LD_INT 2
32409: PUSH
32410: LD_INT 7
32412: PUSH
32413: LD_INT 9
32415: PUSH
32416: LD_INT 10
32418: PUSH
32419: LD_INT 11
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: IN
32430: NOT
32431: OR
32432: IFFALSE 32438
// exit ;
32434: POP
32435: POP
32436: GO 32536
// end ;
32438: GO 32109
32440: POP
32441: POP
// side := GetSide ( depot ) ;
32442: LD_ADDR_VAR 0 9
32446: PUSH
32447: LD_VAR 0 1
32451: PPUSH
32452: CALL_OW 255
32456: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
32457: LD_VAR 0 9
32461: PPUSH
32462: LD_VAR 0 3
32466: PPUSH
32467: LD_VAR 0 4
32471: PPUSH
32472: LD_INT 20
32474: PPUSH
32475: CALL 25190 0 4
32479: PUSH
32480: LD_INT 4
32482: ARRAY
32483: IFFALSE 32487
// exit ;
32485: GO 32536
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
32487: LD_VAR 0 2
32491: PUSH
32492: LD_INT 29
32494: PUSH
32495: LD_INT 30
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: IN
32502: PUSH
32503: LD_VAR 0 3
32507: PPUSH
32508: LD_VAR 0 4
32512: PPUSH
32513: LD_VAR 0 9
32517: PPUSH
32518: CALL_OW 440
32522: NOT
32523: AND
32524: IFFALSE 32528
// exit ;
32526: GO 32536
// result := true ;
32528: LD_ADDR_VAR 0 6
32532: PUSH
32533: LD_INT 1
32535: ST_TO_ADDR
// end ;
32536: LD_VAR 0 6
32540: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
32541: LD_INT 0
32543: PPUSH
32544: PPUSH
32545: PPUSH
32546: PPUSH
32547: PPUSH
32548: PPUSH
32549: PPUSH
32550: PPUSH
32551: PPUSH
32552: PPUSH
32553: PPUSH
32554: PPUSH
32555: PPUSH
32556: PPUSH
32557: PPUSH
32558: PPUSH
32559: PPUSH
32560: PPUSH
32561: PPUSH
32562: PPUSH
32563: PPUSH
32564: PPUSH
32565: PPUSH
32566: PPUSH
32567: PPUSH
32568: PPUSH
32569: PPUSH
32570: PPUSH
32571: PPUSH
32572: PPUSH
32573: PPUSH
32574: PPUSH
32575: PPUSH
32576: PPUSH
32577: PPUSH
32578: PPUSH
32579: PPUSH
32580: PPUSH
32581: PPUSH
32582: PPUSH
32583: PPUSH
32584: PPUSH
32585: PPUSH
32586: PPUSH
32587: PPUSH
32588: PPUSH
32589: PPUSH
32590: PPUSH
32591: PPUSH
32592: PPUSH
32593: PPUSH
32594: PPUSH
32595: PPUSH
32596: PPUSH
32597: PPUSH
32598: PPUSH
32599: PPUSH
32600: PPUSH
// result = [ ] ;
32601: LD_ADDR_VAR 0 7
32605: PUSH
32606: EMPTY
32607: ST_TO_ADDR
// temp_list = [ ] ;
32608: LD_ADDR_VAR 0 9
32612: PUSH
32613: EMPTY
32614: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
32615: LD_VAR 0 4
32619: PUSH
32620: LD_INT 0
32622: PUSH
32623: LD_INT 1
32625: PUSH
32626: LD_INT 2
32628: PUSH
32629: LD_INT 3
32631: PUSH
32632: LD_INT 4
32634: PUSH
32635: LD_INT 5
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: IN
32646: NOT
32647: PUSH
32648: LD_VAR 0 1
32652: PUSH
32653: LD_INT 0
32655: PUSH
32656: LD_INT 1
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: IN
32663: PUSH
32664: LD_VAR 0 5
32668: PUSH
32669: LD_INT 1
32671: PUSH
32672: LD_INT 2
32674: PUSH
32675: LD_INT 3
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: LIST
32682: IN
32683: NOT
32684: AND
32685: OR
32686: IFFALSE 32690
// exit ;
32688: GO 51081
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
32690: LD_VAR 0 1
32694: PUSH
32695: LD_INT 6
32697: PUSH
32698: LD_INT 7
32700: PUSH
32701: LD_INT 8
32703: PUSH
32704: LD_INT 13
32706: PUSH
32707: LD_INT 12
32709: PUSH
32710: LD_INT 15
32712: PUSH
32713: LD_INT 11
32715: PUSH
32716: LD_INT 14
32718: PUSH
32719: LD_INT 10
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: IN
32733: IFFALSE 32743
// btype = b_lab ;
32735: LD_ADDR_VAR 0 1
32739: PUSH
32740: LD_INT 6
32742: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
32743: LD_VAR 0 6
32747: PUSH
32748: LD_INT 0
32750: PUSH
32751: LD_INT 1
32753: PUSH
32754: LD_INT 2
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: LIST
32761: IN
32762: NOT
32763: PUSH
32764: LD_VAR 0 1
32768: PUSH
32769: LD_INT 0
32771: PUSH
32772: LD_INT 1
32774: PUSH
32775: LD_INT 2
32777: PUSH
32778: LD_INT 3
32780: PUSH
32781: LD_INT 6
32783: PUSH
32784: LD_INT 36
32786: PUSH
32787: LD_INT 4
32789: PUSH
32790: LD_INT 5
32792: PUSH
32793: LD_INT 31
32795: PUSH
32796: LD_INT 32
32798: PUSH
32799: LD_INT 33
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: IN
32815: NOT
32816: PUSH
32817: LD_VAR 0 6
32821: PUSH
32822: LD_INT 1
32824: EQUAL
32825: AND
32826: OR
32827: PUSH
32828: LD_VAR 0 1
32832: PUSH
32833: LD_INT 2
32835: PUSH
32836: LD_INT 3
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: IN
32843: NOT
32844: PUSH
32845: LD_VAR 0 6
32849: PUSH
32850: LD_INT 2
32852: EQUAL
32853: AND
32854: OR
32855: IFFALSE 32865
// mode = 0 ;
32857: LD_ADDR_VAR 0 6
32861: PUSH
32862: LD_INT 0
32864: ST_TO_ADDR
// case mode of 0 :
32865: LD_VAR 0 6
32869: PUSH
32870: LD_INT 0
32872: DOUBLE
32873: EQUAL
32874: IFTRUE 32878
32876: GO 44331
32878: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32879: LD_ADDR_VAR 0 11
32883: PUSH
32884: LD_INT 0
32886: PUSH
32887: LD_INT 0
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 0
32896: PUSH
32897: LD_INT 1
32899: NEG
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 1
32907: PUSH
32908: LD_INT 0
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 1
32917: PUSH
32918: LD_INT 1
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 0
32927: PUSH
32928: LD_INT 1
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 1
32937: NEG
32938: PUSH
32939: LD_INT 0
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 1
32948: NEG
32949: PUSH
32950: LD_INT 1
32952: NEG
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 1
32960: NEG
32961: PUSH
32962: LD_INT 2
32964: NEG
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 0
32972: PUSH
32973: LD_INT 2
32975: NEG
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 1
32983: PUSH
32984: LD_INT 1
32986: NEG
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 1
32994: PUSH
32995: LD_INT 2
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 0
33004: PUSH
33005: LD_INT 2
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 1
33014: NEG
33015: PUSH
33016: LD_INT 1
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 1
33025: PUSH
33026: LD_INT 3
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 0
33035: PUSH
33036: LD_INT 3
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 1
33045: NEG
33046: PUSH
33047: LD_INT 2
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33072: LD_ADDR_VAR 0 12
33076: PUSH
33077: LD_INT 0
33079: PUSH
33080: LD_INT 0
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 0
33089: PUSH
33090: LD_INT 1
33092: NEG
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 1
33100: PUSH
33101: LD_INT 0
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 1
33110: PUSH
33111: LD_INT 1
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: LD_INT 0
33120: PUSH
33121: LD_INT 1
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 1
33130: NEG
33131: PUSH
33132: LD_INT 0
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 1
33141: NEG
33142: PUSH
33143: LD_INT 1
33145: NEG
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 1
33153: PUSH
33154: LD_INT 1
33156: NEG
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 2
33164: PUSH
33165: LD_INT 0
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 2
33174: PUSH
33175: LD_INT 1
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 1
33184: NEG
33185: PUSH
33186: LD_INT 1
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 2
33195: NEG
33196: PUSH
33197: LD_INT 0
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 2
33206: NEG
33207: PUSH
33208: LD_INT 1
33210: NEG
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 2
33218: NEG
33219: PUSH
33220: LD_INT 1
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 3
33229: NEG
33230: PUSH
33231: LD_INT 0
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 3
33240: NEG
33241: PUSH
33242: LD_INT 1
33244: NEG
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33268: LD_ADDR_VAR 0 13
33272: PUSH
33273: LD_INT 0
33275: PUSH
33276: LD_INT 0
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 0
33285: PUSH
33286: LD_INT 1
33288: NEG
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 1
33296: PUSH
33297: LD_INT 0
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 1
33306: PUSH
33307: LD_INT 1
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 0
33316: PUSH
33317: LD_INT 1
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 1
33326: NEG
33327: PUSH
33328: LD_INT 0
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 1
33337: NEG
33338: PUSH
33339: LD_INT 1
33341: NEG
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 1
33349: NEG
33350: PUSH
33351: LD_INT 2
33353: NEG
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 2
33361: PUSH
33362: LD_INT 1
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 2
33371: PUSH
33372: LD_INT 2
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 1
33381: PUSH
33382: LD_INT 2
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 2
33391: NEG
33392: PUSH
33393: LD_INT 1
33395: NEG
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 2
33403: NEG
33404: PUSH
33405: LD_INT 2
33407: NEG
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 2
33415: NEG
33416: PUSH
33417: LD_INT 3
33419: NEG
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 3
33427: NEG
33428: PUSH
33429: LD_INT 2
33431: NEG
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 3
33439: NEG
33440: PUSH
33441: LD_INT 3
33443: NEG
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33467: LD_ADDR_VAR 0 14
33471: PUSH
33472: LD_INT 0
33474: PUSH
33475: LD_INT 0
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 0
33484: PUSH
33485: LD_INT 1
33487: NEG
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 1
33495: PUSH
33496: LD_INT 0
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 1
33505: PUSH
33506: LD_INT 1
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 0
33515: PUSH
33516: LD_INT 1
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 1
33525: NEG
33526: PUSH
33527: LD_INT 0
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 1
33536: NEG
33537: PUSH
33538: LD_INT 1
33540: NEG
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 1
33548: NEG
33549: PUSH
33550: LD_INT 2
33552: NEG
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 0
33560: PUSH
33561: LD_INT 2
33563: NEG
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 1
33571: PUSH
33572: LD_INT 1
33574: NEG
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 1
33582: PUSH
33583: LD_INT 2
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 0
33592: PUSH
33593: LD_INT 2
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PUSH
33600: LD_INT 1
33602: NEG
33603: PUSH
33604: LD_INT 1
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 1
33613: NEG
33614: PUSH
33615: LD_INT 3
33617: NEG
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 0
33625: PUSH
33626: LD_INT 3
33628: NEG
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 1
33636: PUSH
33637: LD_INT 2
33639: NEG
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33663: LD_ADDR_VAR 0 15
33667: PUSH
33668: LD_INT 0
33670: PUSH
33671: LD_INT 0
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 0
33680: PUSH
33681: LD_INT 1
33683: NEG
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 1
33691: PUSH
33692: LD_INT 0
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 1
33701: PUSH
33702: LD_INT 1
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 0
33711: PUSH
33712: LD_INT 1
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 1
33721: NEG
33722: PUSH
33723: LD_INT 0
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 1
33732: NEG
33733: PUSH
33734: LD_INT 1
33736: NEG
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 1
33744: PUSH
33745: LD_INT 1
33747: NEG
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PUSH
33753: LD_INT 2
33755: PUSH
33756: LD_INT 0
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 2
33765: PUSH
33766: LD_INT 1
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 1
33775: NEG
33776: PUSH
33777: LD_INT 1
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 2
33786: NEG
33787: PUSH
33788: LD_INT 0
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 2
33797: NEG
33798: PUSH
33799: LD_INT 1
33801: NEG
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 2
33809: PUSH
33810: LD_INT 1
33812: NEG
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 3
33820: PUSH
33821: LD_INT 0
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 3
33830: PUSH
33831: LD_INT 1
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33856: LD_ADDR_VAR 0 16
33860: PUSH
33861: LD_INT 0
33863: PUSH
33864: LD_INT 0
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: LD_INT 0
33873: PUSH
33874: LD_INT 1
33876: NEG
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 1
33884: PUSH
33885: LD_INT 0
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 1
33894: PUSH
33895: LD_INT 1
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 0
33904: PUSH
33905: LD_INT 1
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: PUSH
33912: LD_INT 1
33914: NEG
33915: PUSH
33916: LD_INT 0
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 1
33925: NEG
33926: PUSH
33927: LD_INT 1
33929: NEG
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 1
33937: NEG
33938: PUSH
33939: LD_INT 2
33941: NEG
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 2
33949: PUSH
33950: LD_INT 1
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PUSH
33957: LD_INT 2
33959: PUSH
33960: LD_INT 2
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 1
33969: PUSH
33970: LD_INT 2
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 2
33979: NEG
33980: PUSH
33981: LD_INT 1
33983: NEG
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 2
33991: NEG
33992: PUSH
33993: LD_INT 2
33995: NEG
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 3
34003: PUSH
34004: LD_INT 2
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 3
34013: PUSH
34014: LD_INT 3
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 2
34023: PUSH
34024: LD_INT 3
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34049: LD_ADDR_VAR 0 17
34053: PUSH
34054: LD_INT 0
34056: PUSH
34057: LD_INT 0
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: LD_INT 1
34069: NEG
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 1
34077: PUSH
34078: LD_INT 0
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 1
34087: PUSH
34088: LD_INT 1
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 0
34097: PUSH
34098: LD_INT 1
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 1
34107: NEG
34108: PUSH
34109: LD_INT 0
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 1
34118: NEG
34119: PUSH
34120: LD_INT 1
34122: NEG
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 1
34130: NEG
34131: PUSH
34132: LD_INT 2
34134: NEG
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 0
34142: PUSH
34143: LD_INT 2
34145: NEG
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 1
34153: PUSH
34154: LD_INT 1
34156: NEG
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 2
34164: PUSH
34165: LD_INT 0
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 2
34174: PUSH
34175: LD_INT 1
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 2
34184: PUSH
34185: LD_INT 2
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 1
34194: PUSH
34195: LD_INT 2
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 0
34204: PUSH
34205: LD_INT 2
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 1
34214: NEG
34215: PUSH
34216: LD_INT 1
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 2
34225: NEG
34226: PUSH
34227: LD_INT 0
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 2
34236: NEG
34237: PUSH
34238: LD_INT 1
34240: NEG
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 2
34248: NEG
34249: PUSH
34250: LD_INT 2
34252: NEG
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34279: LD_ADDR_VAR 0 18
34283: PUSH
34284: LD_INT 0
34286: PUSH
34287: LD_INT 0
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 0
34296: PUSH
34297: LD_INT 1
34299: NEG
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 1
34307: PUSH
34308: LD_INT 0
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 1
34317: PUSH
34318: LD_INT 1
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 0
34327: PUSH
34328: LD_INT 1
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 1
34337: NEG
34338: PUSH
34339: LD_INT 0
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 1
34348: NEG
34349: PUSH
34350: LD_INT 1
34352: NEG
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 1
34360: NEG
34361: PUSH
34362: LD_INT 2
34364: NEG
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 0
34372: PUSH
34373: LD_INT 2
34375: NEG
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 1
34383: PUSH
34384: LD_INT 1
34386: NEG
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 2
34394: PUSH
34395: LD_INT 0
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 2
34404: PUSH
34405: LD_INT 1
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 2
34414: PUSH
34415: LD_INT 2
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 1
34424: PUSH
34425: LD_INT 2
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: LD_INT 0
34434: PUSH
34435: LD_INT 2
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 1
34444: NEG
34445: PUSH
34446: LD_INT 1
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 2
34455: NEG
34456: PUSH
34457: LD_INT 0
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 2
34466: NEG
34467: PUSH
34468: LD_INT 1
34470: NEG
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 2
34478: NEG
34479: PUSH
34480: LD_INT 2
34482: NEG
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34509: LD_ADDR_VAR 0 19
34513: PUSH
34514: LD_INT 0
34516: PUSH
34517: LD_INT 0
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 0
34526: PUSH
34527: LD_INT 1
34529: NEG
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 1
34537: PUSH
34538: LD_INT 0
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 1
34547: PUSH
34548: LD_INT 1
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 0
34557: PUSH
34558: LD_INT 1
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 1
34567: NEG
34568: PUSH
34569: LD_INT 0
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 1
34578: NEG
34579: PUSH
34580: LD_INT 1
34582: NEG
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 1
34590: NEG
34591: PUSH
34592: LD_INT 2
34594: NEG
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 0
34602: PUSH
34603: LD_INT 2
34605: NEG
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 1
34613: PUSH
34614: LD_INT 1
34616: NEG
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 2
34624: PUSH
34625: LD_INT 0
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 2
34634: PUSH
34635: LD_INT 1
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 2
34644: PUSH
34645: LD_INT 2
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 1
34654: PUSH
34655: LD_INT 2
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 0
34664: PUSH
34665: LD_INT 2
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 1
34674: NEG
34675: PUSH
34676: LD_INT 1
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 2
34685: NEG
34686: PUSH
34687: LD_INT 0
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 2
34696: NEG
34697: PUSH
34698: LD_INT 1
34700: NEG
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 2
34708: NEG
34709: PUSH
34710: LD_INT 2
34712: NEG
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34739: LD_ADDR_VAR 0 20
34743: PUSH
34744: LD_INT 0
34746: PUSH
34747: LD_INT 0
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 0
34756: PUSH
34757: LD_INT 1
34759: NEG
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 1
34767: PUSH
34768: LD_INT 0
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 1
34777: PUSH
34778: LD_INT 1
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 0
34787: PUSH
34788: LD_INT 1
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 1
34797: NEG
34798: PUSH
34799: LD_INT 0
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 1
34808: NEG
34809: PUSH
34810: LD_INT 1
34812: NEG
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 1
34820: NEG
34821: PUSH
34822: LD_INT 2
34824: NEG
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: LD_INT 2
34835: NEG
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: LD_INT 1
34846: NEG
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 2
34854: PUSH
34855: LD_INT 0
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 2
34864: PUSH
34865: LD_INT 1
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 2
34874: PUSH
34875: LD_INT 2
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 1
34884: PUSH
34885: LD_INT 2
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 0
34894: PUSH
34895: LD_INT 2
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 1
34904: NEG
34905: PUSH
34906: LD_INT 1
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 2
34915: NEG
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 2
34926: NEG
34927: PUSH
34928: LD_INT 1
34930: NEG
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 2
34938: NEG
34939: PUSH
34940: LD_INT 2
34942: NEG
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34969: LD_ADDR_VAR 0 21
34973: PUSH
34974: LD_INT 0
34976: PUSH
34977: LD_INT 0
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 0
34986: PUSH
34987: LD_INT 1
34989: NEG
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 1
34997: PUSH
34998: LD_INT 0
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 1
35007: PUSH
35008: LD_INT 1
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 0
35017: PUSH
35018: LD_INT 1
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 1
35027: NEG
35028: PUSH
35029: LD_INT 0
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 1
35038: NEG
35039: PUSH
35040: LD_INT 1
35042: NEG
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 1
35050: NEG
35051: PUSH
35052: LD_INT 2
35054: NEG
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 0
35062: PUSH
35063: LD_INT 2
35065: NEG
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: LD_INT 1
35076: NEG
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 2
35084: PUSH
35085: LD_INT 0
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 2
35094: PUSH
35095: LD_INT 1
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 2
35104: PUSH
35105: LD_INT 2
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 1
35114: PUSH
35115: LD_INT 2
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 0
35124: PUSH
35125: LD_INT 2
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 1
35134: NEG
35135: PUSH
35136: LD_INT 1
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 2
35145: NEG
35146: PUSH
35147: LD_INT 0
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 2
35156: NEG
35157: PUSH
35158: LD_INT 1
35160: NEG
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 2
35168: NEG
35169: PUSH
35170: LD_INT 2
35172: NEG
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35199: LD_ADDR_VAR 0 22
35203: PUSH
35204: LD_INT 0
35206: PUSH
35207: LD_INT 0
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 0
35216: PUSH
35217: LD_INT 1
35219: NEG
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 1
35227: PUSH
35228: LD_INT 0
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 1
35237: PUSH
35238: LD_INT 1
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: LD_INT 0
35247: PUSH
35248: LD_INT 1
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: LD_INT 1
35257: NEG
35258: PUSH
35259: LD_INT 0
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 1
35268: NEG
35269: PUSH
35270: LD_INT 1
35272: NEG
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 1
35280: NEG
35281: PUSH
35282: LD_INT 2
35284: NEG
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 0
35292: PUSH
35293: LD_INT 2
35295: NEG
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 1
35303: PUSH
35304: LD_INT 1
35306: NEG
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 2
35314: PUSH
35315: LD_INT 0
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 2
35324: PUSH
35325: LD_INT 1
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 2
35334: PUSH
35335: LD_INT 2
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 1
35344: PUSH
35345: LD_INT 2
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 0
35354: PUSH
35355: LD_INT 2
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 1
35364: NEG
35365: PUSH
35366: LD_INT 1
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 2
35375: NEG
35376: PUSH
35377: LD_INT 0
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 2
35386: NEG
35387: PUSH
35388: LD_INT 1
35390: NEG
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 2
35398: NEG
35399: PUSH
35400: LD_INT 2
35402: NEG
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35429: LD_ADDR_VAR 0 23
35433: PUSH
35434: LD_INT 0
35436: PUSH
35437: LD_INT 0
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 0
35446: PUSH
35447: LD_INT 1
35449: NEG
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 1
35457: PUSH
35458: LD_INT 0
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 1
35467: PUSH
35468: LD_INT 1
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 0
35477: PUSH
35478: LD_INT 1
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 1
35487: NEG
35488: PUSH
35489: LD_INT 0
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 1
35498: NEG
35499: PUSH
35500: LD_INT 1
35502: NEG
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 1
35510: NEG
35511: PUSH
35512: LD_INT 2
35514: NEG
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 0
35522: PUSH
35523: LD_INT 2
35525: NEG
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 1
35533: PUSH
35534: LD_INT 1
35536: NEG
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 2
35544: PUSH
35545: LD_INT 0
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 2
35554: PUSH
35555: LD_INT 1
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 2
35564: PUSH
35565: LD_INT 2
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 1
35574: PUSH
35575: LD_INT 2
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 0
35584: PUSH
35585: LD_INT 2
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 1
35594: NEG
35595: PUSH
35596: LD_INT 1
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 2
35605: NEG
35606: PUSH
35607: LD_INT 0
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: LD_INT 2
35616: NEG
35617: PUSH
35618: LD_INT 1
35620: NEG
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 2
35628: NEG
35629: PUSH
35630: LD_INT 2
35632: NEG
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 2
35640: NEG
35641: PUSH
35642: LD_INT 3
35644: NEG
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 1
35652: NEG
35653: PUSH
35654: LD_INT 3
35656: NEG
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 1
35664: PUSH
35665: LD_INT 2
35667: NEG
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 2
35675: PUSH
35676: LD_INT 1
35678: NEG
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
35709: LD_ADDR_VAR 0 24
35713: PUSH
35714: LD_INT 0
35716: PUSH
35717: LD_INT 0
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 0
35726: PUSH
35727: LD_INT 1
35729: NEG
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 1
35737: PUSH
35738: LD_INT 0
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 1
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 0
35757: PUSH
35758: LD_INT 1
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 1
35767: NEG
35768: PUSH
35769: LD_INT 0
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 1
35778: NEG
35779: PUSH
35780: LD_INT 1
35782: NEG
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 1
35790: NEG
35791: PUSH
35792: LD_INT 2
35794: NEG
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 0
35802: PUSH
35803: LD_INT 2
35805: NEG
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 1
35813: PUSH
35814: LD_INT 1
35816: NEG
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 2
35824: PUSH
35825: LD_INT 0
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 2
35834: PUSH
35835: LD_INT 1
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 2
35844: PUSH
35845: LD_INT 2
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 1
35854: PUSH
35855: LD_INT 2
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 0
35864: PUSH
35865: LD_INT 2
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 1
35874: NEG
35875: PUSH
35876: LD_INT 1
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 2
35885: NEG
35886: PUSH
35887: LD_INT 0
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 2
35896: NEG
35897: PUSH
35898: LD_INT 1
35900: NEG
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 2
35908: NEG
35909: PUSH
35910: LD_INT 2
35912: NEG
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 1
35920: PUSH
35921: LD_INT 2
35923: NEG
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 2
35931: PUSH
35932: LD_INT 1
35934: NEG
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 3
35942: PUSH
35943: LD_INT 1
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 3
35952: PUSH
35953: LD_INT 2
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
35985: LD_ADDR_VAR 0 25
35989: PUSH
35990: LD_INT 0
35992: PUSH
35993: LD_INT 0
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: LD_INT 1
36005: NEG
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 1
36013: PUSH
36014: LD_INT 0
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 1
36023: PUSH
36024: LD_INT 1
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 0
36033: PUSH
36034: LD_INT 1
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 1
36043: NEG
36044: PUSH
36045: LD_INT 0
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 1
36054: NEG
36055: PUSH
36056: LD_INT 1
36058: NEG
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 1
36066: NEG
36067: PUSH
36068: LD_INT 2
36070: NEG
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 0
36078: PUSH
36079: LD_INT 2
36081: NEG
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 1
36089: PUSH
36090: LD_INT 1
36092: NEG
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 2
36100: PUSH
36101: LD_INT 0
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 2
36110: PUSH
36111: LD_INT 1
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 2
36120: PUSH
36121: LD_INT 2
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 1
36130: PUSH
36131: LD_INT 2
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 0
36140: PUSH
36141: LD_INT 2
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 1
36150: NEG
36151: PUSH
36152: LD_INT 1
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 2
36161: NEG
36162: PUSH
36163: LD_INT 0
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 2
36172: NEG
36173: PUSH
36174: LD_INT 1
36176: NEG
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 2
36184: NEG
36185: PUSH
36186: LD_INT 2
36188: NEG
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 3
36196: PUSH
36197: LD_INT 1
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 3
36206: PUSH
36207: LD_INT 2
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 2
36216: PUSH
36217: LD_INT 3
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 1
36226: PUSH
36227: LD_INT 3
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36259: LD_ADDR_VAR 0 26
36263: PUSH
36264: LD_INT 0
36266: PUSH
36267: LD_INT 0
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 0
36276: PUSH
36277: LD_INT 1
36279: NEG
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 1
36287: PUSH
36288: LD_INT 0
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 1
36297: PUSH
36298: LD_INT 1
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 0
36307: PUSH
36308: LD_INT 1
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 1
36317: NEG
36318: PUSH
36319: LD_INT 0
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 1
36328: NEG
36329: PUSH
36330: LD_INT 1
36332: NEG
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 1
36340: NEG
36341: PUSH
36342: LD_INT 2
36344: NEG
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 0
36352: PUSH
36353: LD_INT 2
36355: NEG
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: LD_INT 1
36363: PUSH
36364: LD_INT 1
36366: NEG
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PUSH
36372: LD_INT 2
36374: PUSH
36375: LD_INT 0
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: LD_INT 2
36384: PUSH
36385: LD_INT 1
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: LD_INT 2
36394: PUSH
36395: LD_INT 2
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: LD_INT 1
36404: PUSH
36405: LD_INT 2
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 0
36414: PUSH
36415: LD_INT 2
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 1
36424: NEG
36425: PUSH
36426: LD_INT 1
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 2
36435: NEG
36436: PUSH
36437: LD_INT 0
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 2
36446: NEG
36447: PUSH
36448: LD_INT 1
36450: NEG
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_INT 2
36458: NEG
36459: PUSH
36460: LD_INT 2
36462: NEG
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 2
36470: PUSH
36471: LD_INT 3
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: LD_INT 1
36480: PUSH
36481: LD_INT 3
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: LD_INT 1
36490: NEG
36491: PUSH
36492: LD_INT 2
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 2
36501: NEG
36502: PUSH
36503: LD_INT 1
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36535: LD_ADDR_VAR 0 27
36539: PUSH
36540: LD_INT 0
36542: PUSH
36543: LD_INT 0
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 0
36552: PUSH
36553: LD_INT 1
36555: NEG
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 1
36563: PUSH
36564: LD_INT 0
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 1
36573: PUSH
36574: LD_INT 1
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 0
36583: PUSH
36584: LD_INT 1
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 1
36593: NEG
36594: PUSH
36595: LD_INT 0
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 1
36604: NEG
36605: PUSH
36606: LD_INT 1
36608: NEG
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 1
36616: NEG
36617: PUSH
36618: LD_INT 2
36620: NEG
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 0
36628: PUSH
36629: LD_INT 2
36631: NEG
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 1
36639: PUSH
36640: LD_INT 1
36642: NEG
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 2
36650: PUSH
36651: LD_INT 0
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 2
36660: PUSH
36661: LD_INT 1
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 2
36670: PUSH
36671: LD_INT 2
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 1
36680: PUSH
36681: LD_INT 2
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 0
36690: PUSH
36691: LD_INT 2
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 1
36700: NEG
36701: PUSH
36702: LD_INT 1
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 2
36711: NEG
36712: PUSH
36713: LD_INT 0
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 2
36722: NEG
36723: PUSH
36724: LD_INT 1
36726: NEG
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 2
36734: NEG
36735: PUSH
36736: LD_INT 2
36738: NEG
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: LD_INT 1
36746: NEG
36747: PUSH
36748: LD_INT 2
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 2
36757: NEG
36758: PUSH
36759: LD_INT 1
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 3
36768: NEG
36769: PUSH
36770: LD_INT 1
36772: NEG
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_INT 3
36780: NEG
36781: PUSH
36782: LD_INT 2
36784: NEG
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36815: LD_ADDR_VAR 0 28
36819: PUSH
36820: LD_INT 0
36822: PUSH
36823: LD_INT 0
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 0
36832: PUSH
36833: LD_INT 1
36835: NEG
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 1
36843: PUSH
36844: LD_INT 0
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 1
36853: PUSH
36854: LD_INT 1
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 0
36863: PUSH
36864: LD_INT 1
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 1
36873: NEG
36874: PUSH
36875: LD_INT 0
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 1
36884: NEG
36885: PUSH
36886: LD_INT 1
36888: NEG
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 1
36896: NEG
36897: PUSH
36898: LD_INT 2
36900: NEG
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 0
36908: PUSH
36909: LD_INT 2
36911: NEG
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 1
36919: PUSH
36920: LD_INT 1
36922: NEG
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 2
36930: PUSH
36931: LD_INT 0
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 2
36940: PUSH
36941: LD_INT 1
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 2
36950: PUSH
36951: LD_INT 2
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 1
36960: PUSH
36961: LD_INT 2
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 0
36970: PUSH
36971: LD_INT 2
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 1
36980: NEG
36981: PUSH
36982: LD_INT 1
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 2
36991: NEG
36992: PUSH
36993: LD_INT 0
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 2
37002: NEG
37003: PUSH
37004: LD_INT 1
37006: NEG
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 2
37014: NEG
37015: PUSH
37016: LD_INT 2
37018: NEG
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 2
37026: NEG
37027: PUSH
37028: LD_INT 3
37030: NEG
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 1
37038: NEG
37039: PUSH
37040: LD_INT 3
37042: NEG
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 3
37050: NEG
37051: PUSH
37052: LD_INT 1
37054: NEG
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 3
37062: NEG
37063: PUSH
37064: LD_INT 2
37066: NEG
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37097: LD_ADDR_VAR 0 29
37101: PUSH
37102: LD_INT 0
37104: PUSH
37105: LD_INT 0
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 0
37114: PUSH
37115: LD_INT 1
37117: NEG
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 1
37125: PUSH
37126: LD_INT 0
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 1
37135: PUSH
37136: LD_INT 1
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 0
37145: PUSH
37146: LD_INT 1
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 1
37155: NEG
37156: PUSH
37157: LD_INT 0
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 1
37166: NEG
37167: PUSH
37168: LD_INT 1
37170: NEG
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 1
37178: NEG
37179: PUSH
37180: LD_INT 2
37182: NEG
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 0
37190: PUSH
37191: LD_INT 2
37193: NEG
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 1
37201: PUSH
37202: LD_INT 1
37204: NEG
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 2
37212: PUSH
37213: LD_INT 0
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 2
37222: PUSH
37223: LD_INT 1
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 1
37232: PUSH
37233: LD_INT 2
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 0
37242: PUSH
37243: LD_INT 2
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 1
37252: NEG
37253: PUSH
37254: LD_INT 1
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 2
37263: NEG
37264: PUSH
37265: LD_INT 1
37267: NEG
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: LD_INT 2
37275: NEG
37276: PUSH
37277: LD_INT 2
37279: NEG
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 2
37287: NEG
37288: PUSH
37289: LD_INT 3
37291: NEG
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 2
37299: PUSH
37300: LD_INT 1
37302: NEG
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 3
37310: PUSH
37311: LD_INT 1
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 1
37320: PUSH
37321: LD_INT 3
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 1
37330: NEG
37331: PUSH
37332: LD_INT 2
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 3
37341: NEG
37342: PUSH
37343: LD_INT 2
37345: NEG
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37376: LD_ADDR_VAR 0 30
37380: PUSH
37381: LD_INT 0
37383: PUSH
37384: LD_INT 0
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 0
37393: PUSH
37394: LD_INT 1
37396: NEG
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 1
37404: PUSH
37405: LD_INT 0
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 1
37414: PUSH
37415: LD_INT 1
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 0
37424: PUSH
37425: LD_INT 1
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 1
37434: NEG
37435: PUSH
37436: LD_INT 0
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 1
37445: NEG
37446: PUSH
37447: LD_INT 1
37449: NEG
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 1
37457: NEG
37458: PUSH
37459: LD_INT 2
37461: NEG
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: LD_INT 0
37469: PUSH
37470: LD_INT 2
37472: NEG
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 1
37480: PUSH
37481: LD_INT 1
37483: NEG
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: LD_INT 2
37491: PUSH
37492: LD_INT 0
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 2
37501: PUSH
37502: LD_INT 1
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 2
37511: PUSH
37512: LD_INT 2
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 1
37521: PUSH
37522: LD_INT 2
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 1
37531: NEG
37532: PUSH
37533: LD_INT 1
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 2
37542: NEG
37543: PUSH
37544: LD_INT 0
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 2
37553: NEG
37554: PUSH
37555: LD_INT 1
37557: NEG
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 1
37565: NEG
37566: PUSH
37567: LD_INT 3
37569: NEG
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 1
37577: PUSH
37578: LD_INT 2
37580: NEG
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 3
37588: PUSH
37589: LD_INT 2
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 2
37598: PUSH
37599: LD_INT 3
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 2
37608: NEG
37609: PUSH
37610: LD_INT 1
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 3
37619: NEG
37620: PUSH
37621: LD_INT 1
37623: NEG
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37654: LD_ADDR_VAR 0 31
37658: PUSH
37659: LD_INT 0
37661: PUSH
37662: LD_INT 0
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 0
37671: PUSH
37672: LD_INT 1
37674: NEG
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 1
37682: PUSH
37683: LD_INT 0
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 1
37692: PUSH
37693: LD_INT 1
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 0
37702: PUSH
37703: LD_INT 1
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 1
37712: NEG
37713: PUSH
37714: LD_INT 0
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 1
37723: NEG
37724: PUSH
37725: LD_INT 1
37727: NEG
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 1
37735: NEG
37736: PUSH
37737: LD_INT 2
37739: NEG
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 1
37747: PUSH
37748: LD_INT 1
37750: NEG
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 2
37758: PUSH
37759: LD_INT 0
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 2
37768: PUSH
37769: LD_INT 1
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 2
37778: PUSH
37779: LD_INT 2
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 1
37788: PUSH
37789: LD_INT 2
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 0
37798: PUSH
37799: LD_INT 2
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 1
37808: NEG
37809: PUSH
37810: LD_INT 1
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 2
37819: NEG
37820: PUSH
37821: LD_INT 1
37823: NEG
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 2
37831: NEG
37832: PUSH
37833: LD_INT 2
37835: NEG
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 2
37843: NEG
37844: PUSH
37845: LD_INT 3
37847: NEG
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 2
37855: PUSH
37856: LD_INT 1
37858: NEG
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 3
37866: PUSH
37867: LD_INT 1
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 1
37876: PUSH
37877: LD_INT 3
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 1
37886: NEG
37887: PUSH
37888: LD_INT 2
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 3
37897: NEG
37898: PUSH
37899: LD_INT 2
37901: NEG
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37932: LD_ADDR_VAR 0 32
37936: PUSH
37937: LD_INT 0
37939: PUSH
37940: LD_INT 0
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 0
37949: PUSH
37950: LD_INT 1
37952: NEG
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 1
37960: PUSH
37961: LD_INT 0
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 1
37970: PUSH
37971: LD_INT 1
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 0
37980: PUSH
37981: LD_INT 1
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: LD_INT 1
37990: NEG
37991: PUSH
37992: LD_INT 0
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 1
38001: NEG
38002: PUSH
38003: LD_INT 1
38005: NEG
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 1
38013: NEG
38014: PUSH
38015: LD_INT 2
38017: NEG
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 0
38025: PUSH
38026: LD_INT 2
38028: NEG
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PUSH
38034: LD_INT 1
38036: PUSH
38037: LD_INT 1
38039: NEG
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 2
38047: PUSH
38048: LD_INT 1
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 2
38057: PUSH
38058: LD_INT 2
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 1
38067: PUSH
38068: LD_INT 2
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 0
38077: PUSH
38078: LD_INT 2
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 1
38087: NEG
38088: PUSH
38089: LD_INT 1
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 2
38098: NEG
38099: PUSH
38100: LD_INT 0
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 2
38109: NEG
38110: PUSH
38111: LD_INT 1
38113: NEG
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 1
38121: NEG
38122: PUSH
38123: LD_INT 3
38125: NEG
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 1
38133: PUSH
38134: LD_INT 2
38136: NEG
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 3
38144: PUSH
38145: LD_INT 2
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: LD_INT 2
38154: PUSH
38155: LD_INT 3
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 2
38164: NEG
38165: PUSH
38166: LD_INT 1
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 3
38175: NEG
38176: PUSH
38177: LD_INT 1
38179: NEG
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38210: LD_ADDR_VAR 0 33
38214: PUSH
38215: LD_INT 0
38217: PUSH
38218: LD_INT 0
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 0
38227: PUSH
38228: LD_INT 1
38230: NEG
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 1
38238: PUSH
38239: LD_INT 0
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 1
38248: PUSH
38249: LD_INT 1
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 0
38258: PUSH
38259: LD_INT 1
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 1
38268: NEG
38269: PUSH
38270: LD_INT 0
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 1
38279: NEG
38280: PUSH
38281: LD_INT 1
38283: NEG
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 1
38291: NEG
38292: PUSH
38293: LD_INT 2
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 1
38303: PUSH
38304: LD_INT 1
38306: NEG
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 2
38314: PUSH
38315: LD_INT 0
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 2
38324: PUSH
38325: LD_INT 1
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 1
38334: PUSH
38335: LD_INT 2
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 0
38344: PUSH
38345: LD_INT 2
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 1
38354: NEG
38355: PUSH
38356: LD_INT 1
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 2
38365: NEG
38366: PUSH
38367: LD_INT 0
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 2
38376: NEG
38377: PUSH
38378: LD_INT 1
38380: NEG
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 2
38388: NEG
38389: PUSH
38390: LD_INT 2
38392: NEG
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 2
38400: NEG
38401: PUSH
38402: LD_INT 3
38404: NEG
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 2
38412: PUSH
38413: LD_INT 1
38415: NEG
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 3
38423: PUSH
38424: LD_INT 1
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 1
38433: PUSH
38434: LD_INT 3
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 1
38443: NEG
38444: PUSH
38445: LD_INT 2
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 3
38454: NEG
38455: PUSH
38456: LD_INT 2
38458: NEG
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38489: LD_ADDR_VAR 0 34
38493: PUSH
38494: LD_INT 0
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 0
38506: PUSH
38507: LD_INT 1
38509: NEG
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 1
38517: PUSH
38518: LD_INT 0
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 1
38527: PUSH
38528: LD_INT 1
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 0
38537: PUSH
38538: LD_INT 1
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 1
38547: NEG
38548: PUSH
38549: LD_INT 0
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 1
38558: NEG
38559: PUSH
38560: LD_INT 1
38562: NEG
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: LD_INT 1
38570: NEG
38571: PUSH
38572: LD_INT 2
38574: NEG
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 0
38582: PUSH
38583: LD_INT 2
38585: NEG
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 1
38593: PUSH
38594: LD_INT 1
38596: NEG
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 2
38604: PUSH
38605: LD_INT 1
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 2
38614: PUSH
38615: LD_INT 2
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 1
38624: PUSH
38625: LD_INT 2
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 1
38634: NEG
38635: PUSH
38636: LD_INT 1
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 2
38645: NEG
38646: PUSH
38647: LD_INT 0
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 2
38656: NEG
38657: PUSH
38658: LD_INT 1
38660: NEG
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 2
38668: NEG
38669: PUSH
38670: LD_INT 2
38672: NEG
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 1
38680: NEG
38681: PUSH
38682: LD_INT 3
38684: NEG
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 1
38692: PUSH
38693: LD_INT 2
38695: NEG
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 3
38703: PUSH
38704: LD_INT 2
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 2
38713: PUSH
38714: LD_INT 3
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 2
38723: NEG
38724: PUSH
38725: LD_INT 1
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 3
38734: NEG
38735: PUSH
38736: LD_INT 1
38738: NEG
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38769: LD_ADDR_VAR 0 35
38773: PUSH
38774: LD_INT 0
38776: PUSH
38777: LD_INT 0
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 0
38786: PUSH
38787: LD_INT 1
38789: NEG
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 1
38797: PUSH
38798: LD_INT 0
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 1
38807: PUSH
38808: LD_INT 1
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 0
38817: PUSH
38818: LD_INT 1
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 1
38827: NEG
38828: PUSH
38829: LD_INT 0
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 1
38838: NEG
38839: PUSH
38840: LD_INT 1
38842: NEG
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 2
38850: PUSH
38851: LD_INT 1
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 2
38860: NEG
38861: PUSH
38862: LD_INT 1
38864: NEG
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38881: LD_ADDR_VAR 0 36
38885: PUSH
38886: LD_INT 0
38888: PUSH
38889: LD_INT 0
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 0
38898: PUSH
38899: LD_INT 1
38901: NEG
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 1
38909: PUSH
38910: LD_INT 0
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 1
38919: PUSH
38920: LD_INT 1
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 0
38929: PUSH
38930: LD_INT 1
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 1
38939: NEG
38940: PUSH
38941: LD_INT 0
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 1
38950: NEG
38951: PUSH
38952: LD_INT 1
38954: NEG
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 1
38962: NEG
38963: PUSH
38964: LD_INT 2
38966: NEG
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 1
38974: PUSH
38975: LD_INT 2
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38993: LD_ADDR_VAR 0 37
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: LD_INT 0
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 0
39010: PUSH
39011: LD_INT 1
39013: NEG
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 1
39021: PUSH
39022: LD_INT 0
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 1
39031: PUSH
39032: LD_INT 1
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 0
39041: PUSH
39042: LD_INT 1
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 1
39051: NEG
39052: PUSH
39053: LD_INT 0
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 1
39062: NEG
39063: PUSH
39064: LD_INT 1
39066: NEG
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 1
39074: PUSH
39075: LD_INT 1
39077: NEG
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 1
39085: NEG
39086: PUSH
39087: LD_INT 1
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39105: LD_ADDR_VAR 0 38
39109: PUSH
39110: LD_INT 0
39112: PUSH
39113: LD_INT 0
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 0
39122: PUSH
39123: LD_INT 1
39125: NEG
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 1
39133: PUSH
39134: LD_INT 0
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 1
39143: PUSH
39144: LD_INT 1
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 0
39153: PUSH
39154: LD_INT 1
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 1
39163: NEG
39164: PUSH
39165: LD_INT 0
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 1
39174: NEG
39175: PUSH
39176: LD_INT 1
39178: NEG
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 2
39186: PUSH
39187: LD_INT 1
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 2
39196: NEG
39197: PUSH
39198: LD_INT 1
39200: NEG
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39217: LD_ADDR_VAR 0 39
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: LD_INT 0
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 0
39234: PUSH
39235: LD_INT 1
39237: NEG
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 1
39245: PUSH
39246: LD_INT 0
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 1
39255: PUSH
39256: LD_INT 1
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: LD_INT 1
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: LD_INT 0
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 1
39286: NEG
39287: PUSH
39288: LD_INT 1
39290: NEG
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 1
39298: NEG
39299: PUSH
39300: LD_INT 2
39302: NEG
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 1
39310: PUSH
39311: LD_INT 2
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39329: LD_ADDR_VAR 0 40
39333: PUSH
39334: LD_INT 0
39336: PUSH
39337: LD_INT 0
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 0
39346: PUSH
39347: LD_INT 1
39349: NEG
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 1
39357: PUSH
39358: LD_INT 0
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 1
39367: PUSH
39368: LD_INT 1
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 0
39377: PUSH
39378: LD_INT 1
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 1
39387: NEG
39388: PUSH
39389: LD_INT 0
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 1
39398: NEG
39399: PUSH
39400: LD_INT 1
39402: NEG
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 1
39410: PUSH
39411: LD_INT 1
39413: NEG
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 1
39421: NEG
39422: PUSH
39423: LD_INT 1
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39441: LD_ADDR_VAR 0 41
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: LD_INT 0
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 0
39458: PUSH
39459: LD_INT 1
39461: NEG
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 1
39469: PUSH
39470: LD_INT 0
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 1
39479: PUSH
39480: LD_INT 1
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 0
39489: PUSH
39490: LD_INT 1
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 1
39499: NEG
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 1
39510: NEG
39511: PUSH
39512: LD_INT 1
39514: NEG
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 1
39522: NEG
39523: PUSH
39524: LD_INT 2
39526: NEG
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 1
39534: PUSH
39535: LD_INT 1
39537: NEG
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 2
39545: PUSH
39546: LD_INT 0
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 2
39555: PUSH
39556: LD_INT 1
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 2
39565: PUSH
39566: LD_INT 2
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 1
39575: PUSH
39576: LD_INT 2
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 1
39585: NEG
39586: PUSH
39587: LD_INT 1
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 2
39596: NEG
39597: PUSH
39598: LD_INT 0
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 2
39607: NEG
39608: PUSH
39609: LD_INT 1
39611: NEG
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 2
39619: NEG
39620: PUSH
39621: LD_INT 2
39623: NEG
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 2
39631: NEG
39632: PUSH
39633: LD_INT 3
39635: NEG
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 2
39643: PUSH
39644: LD_INT 1
39646: NEG
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 3
39654: PUSH
39655: LD_INT 0
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 3
39664: PUSH
39665: LD_INT 1
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 3
39674: PUSH
39675: LD_INT 2
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 3
39684: PUSH
39685: LD_INT 3
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 2
39694: PUSH
39695: LD_INT 3
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 2
39704: NEG
39705: PUSH
39706: LD_INT 1
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 3
39715: NEG
39716: PUSH
39717: LD_INT 0
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 3
39726: NEG
39727: PUSH
39728: LD_INT 1
39730: NEG
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 3
39738: NEG
39739: PUSH
39740: LD_INT 2
39742: NEG
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 3
39750: NEG
39751: PUSH
39752: LD_INT 3
39754: NEG
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39791: LD_ADDR_VAR 0 42
39795: PUSH
39796: LD_INT 0
39798: PUSH
39799: LD_INT 0
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 0
39808: PUSH
39809: LD_INT 1
39811: NEG
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 1
39819: PUSH
39820: LD_INT 0
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 1
39829: PUSH
39830: LD_INT 1
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 0
39839: PUSH
39840: LD_INT 1
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 1
39849: NEG
39850: PUSH
39851: LD_INT 0
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 1
39860: NEG
39861: PUSH
39862: LD_INT 1
39864: NEG
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 1
39872: NEG
39873: PUSH
39874: LD_INT 2
39876: NEG
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 0
39884: PUSH
39885: LD_INT 2
39887: NEG
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 1
39895: PUSH
39896: LD_INT 1
39898: NEG
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 2
39906: PUSH
39907: LD_INT 1
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 2
39916: PUSH
39917: LD_INT 2
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 1
39926: PUSH
39927: LD_INT 2
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 0
39936: PUSH
39937: LD_INT 2
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 1
39946: NEG
39947: PUSH
39948: LD_INT 1
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 2
39957: NEG
39958: PUSH
39959: LD_INT 1
39961: NEG
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 2
39969: NEG
39970: PUSH
39971: LD_INT 2
39973: NEG
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 2
39981: NEG
39982: PUSH
39983: LD_INT 3
39985: NEG
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 1
39993: NEG
39994: PUSH
39995: LD_INT 3
39997: NEG
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: LD_INT 3
40008: NEG
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 1
40016: PUSH
40017: LD_INT 2
40019: NEG
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 3
40027: PUSH
40028: LD_INT 2
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 3
40037: PUSH
40038: LD_INT 3
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 2
40047: PUSH
40048: LD_INT 3
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 1
40057: PUSH
40058: LD_INT 3
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 0
40067: PUSH
40068: LD_INT 3
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 1
40077: NEG
40078: PUSH
40079: LD_INT 2
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 3
40088: NEG
40089: PUSH
40090: LD_INT 2
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 3
40100: NEG
40101: PUSH
40102: LD_INT 3
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40141: LD_ADDR_VAR 0 43
40145: PUSH
40146: LD_INT 0
40148: PUSH
40149: LD_INT 0
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 0
40158: PUSH
40159: LD_INT 1
40161: NEG
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 1
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 1
40179: PUSH
40180: LD_INT 1
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 0
40189: PUSH
40190: LD_INT 1
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 1
40199: NEG
40200: PUSH
40201: LD_INT 0
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 1
40210: NEG
40211: PUSH
40212: LD_INT 1
40214: NEG
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 1
40222: NEG
40223: PUSH
40224: LD_INT 2
40226: NEG
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 0
40234: PUSH
40235: LD_INT 2
40237: NEG
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 1
40245: PUSH
40246: LD_INT 1
40248: NEG
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 2
40256: PUSH
40257: LD_INT 0
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 2
40266: PUSH
40267: LD_INT 1
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: PUSH
40277: LD_INT 2
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 0
40286: PUSH
40287: LD_INT 2
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 1
40296: NEG
40297: PUSH
40298: LD_INT 1
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 2
40307: NEG
40308: PUSH
40309: LD_INT 0
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 2
40318: NEG
40319: PUSH
40320: LD_INT 1
40322: NEG
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 1
40330: NEG
40331: PUSH
40332: LD_INT 3
40334: NEG
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 0
40342: PUSH
40343: LD_INT 3
40345: NEG
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 1
40353: PUSH
40354: LD_INT 2
40356: NEG
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 2
40364: PUSH
40365: LD_INT 1
40367: NEG
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 3
40375: PUSH
40376: LD_INT 0
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 3
40385: PUSH
40386: LD_INT 1
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 1
40395: PUSH
40396: LD_INT 3
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 0
40405: PUSH
40406: LD_INT 3
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: NEG
40416: PUSH
40417: LD_INT 2
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 2
40426: NEG
40427: PUSH
40428: LD_INT 1
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 3
40437: NEG
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 3
40448: NEG
40449: PUSH
40450: LD_INT 1
40452: NEG
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40489: LD_ADDR_VAR 0 44
40493: PUSH
40494: LD_INT 0
40496: PUSH
40497: LD_INT 0
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 1
40517: PUSH
40518: LD_INT 0
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 1
40527: PUSH
40528: LD_INT 1
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 0
40537: PUSH
40538: LD_INT 1
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 1
40547: NEG
40548: PUSH
40549: LD_INT 0
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 1
40558: NEG
40559: PUSH
40560: LD_INT 1
40562: NEG
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 1
40570: NEG
40571: PUSH
40572: LD_INT 2
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 1
40582: PUSH
40583: LD_INT 1
40585: NEG
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 2
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 2
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 2
40613: PUSH
40614: LD_INT 2
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 1
40623: PUSH
40624: LD_INT 2
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 1
40633: NEG
40634: PUSH
40635: LD_INT 1
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 2
40644: NEG
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 2
40655: NEG
40656: PUSH
40657: LD_INT 1
40659: NEG
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 2
40667: NEG
40668: PUSH
40669: LD_INT 2
40671: NEG
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 2
40679: NEG
40680: PUSH
40681: LD_INT 3
40683: NEG
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 2
40691: PUSH
40692: LD_INT 1
40694: NEG
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 3
40702: PUSH
40703: LD_INT 0
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 3
40712: PUSH
40713: LD_INT 1
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 3
40722: PUSH
40723: LD_INT 2
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 3
40732: PUSH
40733: LD_INT 3
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 2
40742: PUSH
40743: LD_INT 3
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 2
40752: NEG
40753: PUSH
40754: LD_INT 1
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 3
40763: NEG
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 3
40774: NEG
40775: PUSH
40776: LD_INT 1
40778: NEG
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 3
40786: NEG
40787: PUSH
40788: LD_INT 2
40790: NEG
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 3
40798: NEG
40799: PUSH
40800: LD_INT 3
40802: NEG
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40839: LD_ADDR_VAR 0 45
40843: PUSH
40844: LD_INT 0
40846: PUSH
40847: LD_INT 0
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 0
40856: PUSH
40857: LD_INT 1
40859: NEG
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 1
40867: PUSH
40868: LD_INT 0
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 1
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: LD_INT 1
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 1
40897: NEG
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 1
40908: NEG
40909: PUSH
40910: LD_INT 1
40912: NEG
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 1
40920: NEG
40921: PUSH
40922: LD_INT 2
40924: NEG
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: LD_INT 2
40935: NEG
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: LD_INT 1
40946: NEG
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 2
40954: PUSH
40955: LD_INT 1
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 2
40964: PUSH
40965: LD_INT 2
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 1
40974: PUSH
40975: LD_INT 2
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: LD_INT 2
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 1
40994: NEG
40995: PUSH
40996: LD_INT 1
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 2
41005: NEG
41006: PUSH
41007: LD_INT 1
41009: NEG
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 2
41017: NEG
41018: PUSH
41019: LD_INT 2
41021: NEG
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 2
41029: NEG
41030: PUSH
41031: LD_INT 3
41033: NEG
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 1
41041: NEG
41042: PUSH
41043: LD_INT 3
41045: NEG
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 0
41053: PUSH
41054: LD_INT 3
41056: NEG
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 1
41064: PUSH
41065: LD_INT 2
41067: NEG
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 3
41075: PUSH
41076: LD_INT 2
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 3
41085: PUSH
41086: LD_INT 3
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 2
41095: PUSH
41096: LD_INT 3
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 1
41105: PUSH
41106: LD_INT 3
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 0
41115: PUSH
41116: LD_INT 3
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 1
41125: NEG
41126: PUSH
41127: LD_INT 2
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 3
41136: NEG
41137: PUSH
41138: LD_INT 2
41140: NEG
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 3
41148: NEG
41149: PUSH
41150: LD_INT 3
41152: NEG
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41189: LD_ADDR_VAR 0 46
41193: PUSH
41194: LD_INT 0
41196: PUSH
41197: LD_INT 0
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 0
41206: PUSH
41207: LD_INT 1
41209: NEG
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 1
41217: PUSH
41218: LD_INT 0
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 1
41227: PUSH
41228: LD_INT 1
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 0
41237: PUSH
41238: LD_INT 1
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 1
41247: NEG
41248: PUSH
41249: LD_INT 0
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 1
41258: NEG
41259: PUSH
41260: LD_INT 1
41262: NEG
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 1
41270: NEG
41271: PUSH
41272: LD_INT 2
41274: NEG
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 0
41282: PUSH
41283: LD_INT 2
41285: NEG
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 1
41293: PUSH
41294: LD_INT 1
41296: NEG
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 2
41304: PUSH
41305: LD_INT 0
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 2
41314: PUSH
41315: LD_INT 1
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: LD_INT 2
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 0
41334: PUSH
41335: LD_INT 2
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: LD_INT 1
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 2
41355: NEG
41356: PUSH
41357: LD_INT 0
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 2
41366: NEG
41367: PUSH
41368: LD_INT 1
41370: NEG
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 1
41378: NEG
41379: PUSH
41380: LD_INT 3
41382: NEG
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 0
41390: PUSH
41391: LD_INT 3
41393: NEG
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 1
41401: PUSH
41402: LD_INT 2
41404: NEG
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 2
41412: PUSH
41413: LD_INT 1
41415: NEG
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 3
41423: PUSH
41424: LD_INT 0
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 3
41433: PUSH
41434: LD_INT 1
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 1
41443: PUSH
41444: LD_INT 3
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 0
41453: PUSH
41454: LD_INT 3
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 1
41463: NEG
41464: PUSH
41465: LD_INT 2
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 2
41474: NEG
41475: PUSH
41476: LD_INT 1
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 3
41485: NEG
41486: PUSH
41487: LD_INT 0
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 3
41496: NEG
41497: PUSH
41498: LD_INT 1
41500: NEG
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41537: LD_ADDR_VAR 0 47
41541: PUSH
41542: LD_INT 0
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: LD_INT 1
41557: NEG
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 1
41565: PUSH
41566: LD_INT 0
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 1
41575: PUSH
41576: LD_INT 1
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: LD_INT 1
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 1
41595: NEG
41596: PUSH
41597: LD_INT 0
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 1
41606: NEG
41607: PUSH
41608: LD_INT 1
41610: NEG
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 1
41618: NEG
41619: PUSH
41620: LD_INT 2
41622: NEG
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 0
41630: PUSH
41631: LD_INT 2
41633: NEG
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 1
41641: PUSH
41642: LD_INT 1
41644: NEG
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 2
41652: NEG
41653: PUSH
41654: LD_INT 1
41656: NEG
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 2
41664: NEG
41665: PUSH
41666: LD_INT 2
41668: NEG
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41688: LD_ADDR_VAR 0 48
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: LD_INT 0
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 0
41705: PUSH
41706: LD_INT 1
41708: NEG
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 1
41716: PUSH
41717: LD_INT 0
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 0
41736: PUSH
41737: LD_INT 1
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 1
41746: NEG
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 1
41757: NEG
41758: PUSH
41759: LD_INT 1
41761: NEG
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 1
41769: NEG
41770: PUSH
41771: LD_INT 2
41773: NEG
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 0
41781: PUSH
41782: LD_INT 2
41784: NEG
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 1
41792: PUSH
41793: LD_INT 1
41795: NEG
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 2
41803: PUSH
41804: LD_INT 0
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 2
41813: PUSH
41814: LD_INT 1
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41835: LD_ADDR_VAR 0 49
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: LD_INT 0
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: LD_INT 1
41855: NEG
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 1
41863: PUSH
41864: LD_INT 0
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 1
41873: PUSH
41874: LD_INT 1
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: LD_INT 1
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: LD_INT 0
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 1
41904: NEG
41905: PUSH
41906: LD_INT 1
41908: NEG
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: PUSH
41917: LD_INT 1
41919: NEG
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 2
41927: PUSH
41928: LD_INT 0
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 2
41937: PUSH
41938: LD_INT 1
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 2
41947: PUSH
41948: LD_INT 2
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 1
41957: PUSH
41958: LD_INT 2
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41979: LD_ADDR_VAR 0 50
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: LD_INT 0
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 0
41996: PUSH
41997: LD_INT 1
41999: NEG
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 1
42007: PUSH
42008: LD_INT 0
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 1
42017: PUSH
42018: LD_INT 1
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: LD_INT 1
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 1
42037: NEG
42038: PUSH
42039: LD_INT 0
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 1
42048: NEG
42049: PUSH
42050: LD_INT 1
42052: NEG
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 2
42060: PUSH
42061: LD_INT 1
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 2
42070: PUSH
42071: LD_INT 2
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 1
42080: PUSH
42081: LD_INT 2
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: LD_INT 2
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 1
42100: NEG
42101: PUSH
42102: LD_INT 1
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42123: LD_ADDR_VAR 0 51
42127: PUSH
42128: LD_INT 0
42130: PUSH
42131: LD_INT 0
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 0
42140: PUSH
42141: LD_INT 1
42143: NEG
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 1
42151: PUSH
42152: LD_INT 0
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 1
42161: PUSH
42162: LD_INT 1
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 0
42171: PUSH
42172: LD_INT 1
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 1
42181: NEG
42182: PUSH
42183: LD_INT 0
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: LD_INT 1
42196: NEG
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 1
42204: PUSH
42205: LD_INT 2
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 0
42214: PUSH
42215: LD_INT 2
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 1
42224: NEG
42225: PUSH
42226: LD_INT 1
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 2
42235: NEG
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 2
42246: NEG
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42270: LD_ADDR_VAR 0 52
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: LD_INT 0
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 0
42287: PUSH
42288: LD_INT 1
42290: NEG
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 1
42298: PUSH
42299: LD_INT 0
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 1
42308: PUSH
42309: LD_INT 1
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 0
42318: PUSH
42319: LD_INT 1
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 1
42328: NEG
42329: PUSH
42330: LD_INT 0
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: LD_INT 1
42343: NEG
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 1
42351: NEG
42352: PUSH
42353: LD_INT 2
42355: NEG
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 1
42363: NEG
42364: PUSH
42365: LD_INT 1
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 2
42374: NEG
42375: PUSH
42376: LD_INT 0
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 2
42385: NEG
42386: PUSH
42387: LD_INT 1
42389: NEG
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 2
42397: NEG
42398: PUSH
42399: LD_INT 2
42401: NEG
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42421: LD_ADDR_VAR 0 53
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 1
42449: PUSH
42450: LD_INT 0
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 1
42459: PUSH
42460: LD_INT 1
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: LD_INT 1
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 1
42490: NEG
42491: PUSH
42492: LD_INT 1
42494: NEG
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 1
42502: NEG
42503: PUSH
42504: LD_INT 2
42506: NEG
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: LD_INT 2
42517: NEG
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 1
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 2
42536: PUSH
42537: LD_INT 0
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 2
42546: PUSH
42547: LD_INT 1
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 2
42556: PUSH
42557: LD_INT 2
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 1
42566: PUSH
42567: LD_INT 2
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 0
42576: PUSH
42577: LD_INT 2
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 1
42586: NEG
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 2
42597: NEG
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 2
42608: NEG
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 2
42620: NEG
42621: PUSH
42622: LD_INT 2
42624: NEG
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42651: LD_ADDR_VAR 0 54
42655: PUSH
42656: LD_INT 0
42658: PUSH
42659: LD_INT 0
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 0
42668: PUSH
42669: LD_INT 1
42671: NEG
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 1
42679: PUSH
42680: LD_INT 0
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 1
42689: PUSH
42690: LD_INT 1
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 0
42699: PUSH
42700: LD_INT 1
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 1
42709: NEG
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 1
42720: NEG
42721: PUSH
42722: LD_INT 1
42724: NEG
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 1
42732: NEG
42733: PUSH
42734: LD_INT 2
42736: NEG
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: LD_INT 2
42747: NEG
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 1
42755: PUSH
42756: LD_INT 1
42758: NEG
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 2
42766: PUSH
42767: LD_INT 0
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 2
42776: PUSH
42777: LD_INT 1
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 2
42786: PUSH
42787: LD_INT 2
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 1
42796: PUSH
42797: LD_INT 2
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: LD_INT 2
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 1
42816: NEG
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 2
42827: NEG
42828: PUSH
42829: LD_INT 0
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 2
42838: NEG
42839: PUSH
42840: LD_INT 1
42842: NEG
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 2
42850: NEG
42851: PUSH
42852: LD_INT 2
42854: NEG
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42881: LD_ADDR_VAR 0 55
42885: PUSH
42886: LD_INT 0
42888: PUSH
42889: LD_INT 0
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 0
42898: PUSH
42899: LD_INT 1
42901: NEG
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 1
42909: PUSH
42910: LD_INT 0
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 1
42919: PUSH
42920: LD_INT 1
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: LD_INT 1
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 1
42939: NEG
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: NEG
42951: PUSH
42952: LD_INT 1
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 1
42962: NEG
42963: PUSH
42964: LD_INT 2
42966: NEG
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: LD_INT 2
42977: NEG
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 1
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 2
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 2
43006: PUSH
43007: LD_INT 1
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 2
43016: PUSH
43017: LD_INT 2
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 1
43026: PUSH
43027: LD_INT 2
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 0
43036: PUSH
43037: LD_INT 2
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 1
43046: NEG
43047: PUSH
43048: LD_INT 1
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 2
43057: NEG
43058: PUSH
43059: LD_INT 0
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 2
43068: NEG
43069: PUSH
43070: LD_INT 1
43072: NEG
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 2
43080: NEG
43081: PUSH
43082: LD_INT 2
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43111: LD_ADDR_VAR 0 56
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: LD_INT 0
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: LD_INT 1
43131: NEG
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 1
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 1
43149: PUSH
43150: LD_INT 1
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: LD_INT 1
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 1
43169: NEG
43170: PUSH
43171: LD_INT 0
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 1
43180: NEG
43181: PUSH
43182: LD_INT 1
43184: NEG
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 1
43192: NEG
43193: PUSH
43194: LD_INT 2
43196: NEG
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 0
43204: PUSH
43205: LD_INT 2
43207: NEG
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: LD_INT 1
43218: NEG
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 2
43226: PUSH
43227: LD_INT 0
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 2
43236: PUSH
43237: LD_INT 1
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 2
43246: PUSH
43247: LD_INT 2
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: PUSH
43257: LD_INT 2
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 0
43266: PUSH
43267: LD_INT 2
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 1
43276: NEG
43277: PUSH
43278: LD_INT 1
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 2
43287: NEG
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 2
43298: NEG
43299: PUSH
43300: LD_INT 1
43302: NEG
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 2
43310: NEG
43311: PUSH
43312: LD_INT 2
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43341: LD_ADDR_VAR 0 57
43345: PUSH
43346: LD_INT 0
43348: PUSH
43349: LD_INT 0
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 0
43358: PUSH
43359: LD_INT 1
43361: NEG
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 1
43369: PUSH
43370: LD_INT 0
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 1
43379: PUSH
43380: LD_INT 1
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 0
43389: PUSH
43390: LD_INT 1
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 1
43399: NEG
43400: PUSH
43401: LD_INT 0
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 1
43410: NEG
43411: PUSH
43412: LD_INT 1
43414: NEG
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 1
43422: NEG
43423: PUSH
43424: LD_INT 2
43426: NEG
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 0
43434: PUSH
43435: LD_INT 2
43437: NEG
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 1
43445: PUSH
43446: LD_INT 1
43448: NEG
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 2
43456: PUSH
43457: LD_INT 0
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 2
43466: PUSH
43467: LD_INT 1
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 2
43476: PUSH
43477: LD_INT 2
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 1
43486: PUSH
43487: LD_INT 2
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: LD_INT 2
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: NEG
43507: PUSH
43508: LD_INT 1
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 2
43517: NEG
43518: PUSH
43519: LD_INT 0
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 2
43528: NEG
43529: PUSH
43530: LD_INT 1
43532: NEG
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 2
43540: NEG
43541: PUSH
43542: LD_INT 2
43544: NEG
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43571: LD_ADDR_VAR 0 58
43575: PUSH
43576: LD_INT 0
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 0
43588: PUSH
43589: LD_INT 1
43591: NEG
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 1
43599: PUSH
43600: LD_INT 0
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 1
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 0
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: NEG
43630: PUSH
43631: LD_INT 0
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 1
43640: NEG
43641: PUSH
43642: LD_INT 1
43644: NEG
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 1
43652: NEG
43653: PUSH
43654: LD_INT 2
43656: NEG
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: LD_INT 2
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: LD_INT 1
43678: NEG
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 2
43686: PUSH
43687: LD_INT 0
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 2
43696: PUSH
43697: LD_INT 1
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 2
43706: PUSH
43707: LD_INT 2
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 1
43716: PUSH
43717: LD_INT 2
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 0
43726: PUSH
43727: LD_INT 2
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 1
43736: NEG
43737: PUSH
43738: LD_INT 1
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 2
43747: NEG
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 2
43758: NEG
43759: PUSH
43760: LD_INT 1
43762: NEG
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 2
43770: NEG
43771: PUSH
43772: LD_INT 2
43774: NEG
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43801: LD_ADDR_VAR 0 59
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: LD_INT 0
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 0
43818: PUSH
43819: LD_INT 1
43821: NEG
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 1
43829: PUSH
43830: LD_INT 0
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 1
43839: PUSH
43840: LD_INT 1
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 0
43849: PUSH
43850: LD_INT 1
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 1
43859: NEG
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 1
43870: NEG
43871: PUSH
43872: LD_INT 1
43874: NEG
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43889: LD_ADDR_VAR 0 60
43893: PUSH
43894: LD_INT 0
43896: PUSH
43897: LD_INT 0
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: LD_INT 1
43909: NEG
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 1
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 1
43927: PUSH
43928: LD_INT 1
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 0
43937: PUSH
43938: LD_INT 1
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 1
43947: NEG
43948: PUSH
43949: LD_INT 0
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 1
43958: NEG
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43977: LD_ADDR_VAR 0 61
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: LD_INT 0
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 0
43994: PUSH
43995: LD_INT 1
43997: NEG
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: LD_INT 0
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 0
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 1
44046: NEG
44047: PUSH
44048: LD_INT 1
44050: NEG
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44065: LD_ADDR_VAR 0 62
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: LD_INT 1
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 0
44113: PUSH
44114: LD_INT 1
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 1
44123: NEG
44124: PUSH
44125: LD_INT 0
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 1
44134: NEG
44135: PUSH
44136: LD_INT 1
44138: NEG
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44153: LD_ADDR_VAR 0 63
44157: PUSH
44158: LD_INT 0
44160: PUSH
44161: LD_INT 0
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: LD_INT 1
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: PUSH
44192: LD_INT 1
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 0
44201: PUSH
44202: LD_INT 1
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: LD_INT 1
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44241: LD_ADDR_VAR 0 64
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: LD_INT 0
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: LD_INT 1
44261: NEG
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 1
44269: PUSH
44270: LD_INT 0
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 1
44279: PUSH
44280: LD_INT 1
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 0
44289: PUSH
44290: LD_INT 1
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 1
44299: NEG
44300: PUSH
44301: LD_INT 0
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 1
44310: NEG
44311: PUSH
44312: LD_INT 1
44314: NEG
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: ST_TO_ADDR
// end ; 1 :
44329: GO 50226
44331: LD_INT 1
44333: DOUBLE
44334: EQUAL
44335: IFTRUE 44339
44337: GO 46962
44339: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44340: LD_ADDR_VAR 0 11
44344: PUSH
44345: LD_INT 1
44347: NEG
44348: PUSH
44349: LD_INT 3
44351: NEG
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 0
44359: PUSH
44360: LD_INT 3
44362: NEG
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 1
44370: PUSH
44371: LD_INT 2
44373: NEG
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: LIST
44383: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44384: LD_ADDR_VAR 0 12
44388: PUSH
44389: LD_INT 2
44391: PUSH
44392: LD_INT 1
44394: NEG
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 3
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 3
44412: PUSH
44413: LD_INT 1
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: LIST
44424: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44425: LD_ADDR_VAR 0 13
44429: PUSH
44430: LD_INT 3
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 3
44442: PUSH
44443: LD_INT 3
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 2
44452: PUSH
44453: LD_INT 3
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: LIST
44464: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44465: LD_ADDR_VAR 0 14
44469: PUSH
44470: LD_INT 1
44472: PUSH
44473: LD_INT 3
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 0
44482: PUSH
44483: LD_INT 3
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: LD_INT 2
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: LIST
44505: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44506: LD_ADDR_VAR 0 15
44510: PUSH
44511: LD_INT 2
44513: NEG
44514: PUSH
44515: LD_INT 1
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 3
44524: NEG
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 3
44535: NEG
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: LIST
44549: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44550: LD_ADDR_VAR 0 16
44554: PUSH
44555: LD_INT 2
44557: NEG
44558: PUSH
44559: LD_INT 3
44561: NEG
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 3
44569: NEG
44570: PUSH
44571: LD_INT 2
44573: NEG
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 3
44581: NEG
44582: PUSH
44583: LD_INT 3
44585: NEG
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: LIST
44595: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44596: LD_ADDR_VAR 0 17
44600: PUSH
44601: LD_INT 1
44603: NEG
44604: PUSH
44605: LD_INT 3
44607: NEG
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 0
44615: PUSH
44616: LD_INT 3
44618: NEG
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: LD_INT 2
44629: NEG
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: LIST
44639: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44640: LD_ADDR_VAR 0 18
44644: PUSH
44645: LD_INT 2
44647: PUSH
44648: LD_INT 1
44650: NEG
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 3
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 3
44668: PUSH
44669: LD_INT 1
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: LIST
44680: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44681: LD_ADDR_VAR 0 19
44685: PUSH
44686: LD_INT 3
44688: PUSH
44689: LD_INT 2
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 3
44698: PUSH
44699: LD_INT 3
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 2
44708: PUSH
44709: LD_INT 3
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: LIST
44720: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44721: LD_ADDR_VAR 0 20
44725: PUSH
44726: LD_INT 1
44728: PUSH
44729: LD_INT 3
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 0
44738: PUSH
44739: LD_INT 3
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 1
44748: NEG
44749: PUSH
44750: LD_INT 2
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: LIST
44761: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44762: LD_ADDR_VAR 0 21
44766: PUSH
44767: LD_INT 2
44769: NEG
44770: PUSH
44771: LD_INT 1
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 3
44780: NEG
44781: PUSH
44782: LD_INT 0
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 3
44791: NEG
44792: PUSH
44793: LD_INT 1
44795: NEG
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: LIST
44805: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44806: LD_ADDR_VAR 0 22
44810: PUSH
44811: LD_INT 2
44813: NEG
44814: PUSH
44815: LD_INT 3
44817: NEG
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 3
44825: NEG
44826: PUSH
44827: LD_INT 2
44829: NEG
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 3
44837: NEG
44838: PUSH
44839: LD_INT 3
44841: NEG
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: LIST
44851: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
44852: LD_ADDR_VAR 0 23
44856: PUSH
44857: LD_INT 0
44859: PUSH
44860: LD_INT 3
44862: NEG
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 1
44870: NEG
44871: PUSH
44872: LD_INT 4
44874: NEG
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: LD_INT 3
44885: NEG
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: LIST
44895: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
44896: LD_ADDR_VAR 0 24
44900: PUSH
44901: LD_INT 3
44903: PUSH
44904: LD_INT 0
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 3
44913: PUSH
44914: LD_INT 1
44916: NEG
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 4
44924: PUSH
44925: LD_INT 1
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: LIST
44936: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
44937: LD_ADDR_VAR 0 25
44941: PUSH
44942: LD_INT 3
44944: PUSH
44945: LD_INT 3
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 4
44954: PUSH
44955: LD_INT 3
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 3
44964: PUSH
44965: LD_INT 4
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: LIST
44976: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
44977: LD_ADDR_VAR 0 26
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: LD_INT 3
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 1
44994: PUSH
44995: LD_INT 4
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: LD_INT 3
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: LIST
45017: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
45018: LD_ADDR_VAR 0 27
45022: PUSH
45023: LD_INT 3
45025: NEG
45026: PUSH
45027: LD_INT 0
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 3
45036: NEG
45037: PUSH
45038: LD_INT 1
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 4
45047: NEG
45048: PUSH
45049: LD_INT 1
45051: NEG
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: LIST
45061: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
45062: LD_ADDR_VAR 0 28
45066: PUSH
45067: LD_INT 3
45069: NEG
45070: PUSH
45071: LD_INT 3
45073: NEG
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 3
45081: NEG
45082: PUSH
45083: LD_INT 4
45085: NEG
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 4
45093: NEG
45094: PUSH
45095: LD_INT 3
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: LIST
45107: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
45108: LD_ADDR_VAR 0 29
45112: PUSH
45113: LD_INT 1
45115: NEG
45116: PUSH
45117: LD_INT 3
45119: NEG
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: LD_INT 3
45130: NEG
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: LD_INT 2
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: LD_INT 4
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: LD_INT 4
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: LD_INT 3
45175: NEG
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 1
45183: NEG
45184: PUSH
45185: LD_INT 5
45187: NEG
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: LD_INT 5
45198: NEG
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 1
45206: PUSH
45207: LD_INT 4
45209: NEG
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: LD_INT 6
45221: NEG
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 0
45229: PUSH
45230: LD_INT 6
45232: NEG
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: PUSH
45241: LD_INT 5
45243: NEG
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
45263: LD_ADDR_VAR 0 30
45267: PUSH
45268: LD_INT 2
45270: PUSH
45271: LD_INT 1
45273: NEG
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 3
45281: PUSH
45282: LD_INT 0
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 3
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 3
45301: PUSH
45302: LD_INT 1
45304: NEG
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 4
45312: PUSH
45313: LD_INT 0
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 4
45322: PUSH
45323: LD_INT 1
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 4
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 5
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 5
45353: PUSH
45354: LD_INT 1
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 5
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 6
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 6
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
45406: LD_ADDR_VAR 0 31
45410: PUSH
45411: LD_INT 3
45413: PUSH
45414: LD_INT 2
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 3
45423: PUSH
45424: LD_INT 3
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 2
45433: PUSH
45434: LD_INT 3
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 4
45443: PUSH
45444: LD_INT 3
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 4
45453: PUSH
45454: LD_INT 4
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 3
45463: PUSH
45464: LD_INT 4
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 5
45473: PUSH
45474: LD_INT 4
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 5
45483: PUSH
45484: LD_INT 5
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 4
45493: PUSH
45494: LD_INT 5
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 6
45503: PUSH
45504: LD_INT 5
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 6
45513: PUSH
45514: LD_INT 6
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 5
45523: PUSH
45524: LD_INT 6
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
45545: LD_ADDR_VAR 0 32
45549: PUSH
45550: LD_INT 1
45552: PUSH
45553: LD_INT 3
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: LD_INT 3
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: LD_INT 2
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: LD_INT 4
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 0
45593: PUSH
45594: LD_INT 4
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: LD_INT 3
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: LD_INT 5
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: LD_INT 5
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 1
45634: NEG
45635: PUSH
45636: LD_INT 4
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: LD_INT 6
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: LD_INT 6
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 1
45665: NEG
45666: PUSH
45667: LD_INT 5
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
45688: LD_ADDR_VAR 0 33
45692: PUSH
45693: LD_INT 2
45695: NEG
45696: PUSH
45697: LD_INT 1
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 3
45706: NEG
45707: PUSH
45708: LD_INT 0
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 3
45717: NEG
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 3
45729: NEG
45730: PUSH
45731: LD_INT 1
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 4
45740: NEG
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 4
45751: NEG
45752: PUSH
45753: LD_INT 1
45755: NEG
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 4
45763: NEG
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 5
45774: NEG
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 5
45785: NEG
45786: PUSH
45787: LD_INT 1
45789: NEG
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 5
45797: NEG
45798: PUSH
45799: LD_INT 1
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 6
45808: NEG
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 6
45819: NEG
45820: PUSH
45821: LD_INT 1
45823: NEG
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
45843: LD_ADDR_VAR 0 34
45847: PUSH
45848: LD_INT 2
45850: NEG
45851: PUSH
45852: LD_INT 3
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 3
45862: NEG
45863: PUSH
45864: LD_INT 2
45866: NEG
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 3
45874: NEG
45875: PUSH
45876: LD_INT 3
45878: NEG
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 3
45886: NEG
45887: PUSH
45888: LD_INT 4
45890: NEG
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 4
45898: NEG
45899: PUSH
45900: LD_INT 3
45902: NEG
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 4
45910: NEG
45911: PUSH
45912: LD_INT 4
45914: NEG
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 4
45922: NEG
45923: PUSH
45924: LD_INT 5
45926: NEG
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 5
45934: NEG
45935: PUSH
45936: LD_INT 4
45938: NEG
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 5
45946: NEG
45947: PUSH
45948: LD_INT 5
45950: NEG
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 5
45958: NEG
45959: PUSH
45960: LD_INT 6
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 6
45970: NEG
45971: PUSH
45972: LD_INT 5
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 6
45982: NEG
45983: PUSH
45984: LD_INT 6
45986: NEG
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
46006: LD_ADDR_VAR 0 41
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: LD_INT 2
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 1
46024: NEG
46025: PUSH
46026: LD_INT 3
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: LD_INT 2
46039: NEG
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: LIST
46049: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
46050: LD_ADDR_VAR 0 42
46054: PUSH
46055: LD_INT 2
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 2
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 3
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: LIST
46090: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
46091: LD_ADDR_VAR 0 43
46095: PUSH
46096: LD_INT 2
46098: PUSH
46099: LD_INT 2
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 3
46108: PUSH
46109: LD_INT 2
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 2
46118: PUSH
46119: LD_INT 3
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: LIST
46130: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
46131: LD_ADDR_VAR 0 44
46135: PUSH
46136: LD_INT 0
46138: PUSH
46139: LD_INT 2
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 1
46148: PUSH
46149: LD_INT 3
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: LD_INT 2
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: LIST
46171: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46172: LD_ADDR_VAR 0 45
46176: PUSH
46177: LD_INT 2
46179: NEG
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 2
46190: NEG
46191: PUSH
46192: LD_INT 1
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 3
46201: NEG
46202: PUSH
46203: LD_INT 1
46205: NEG
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: LIST
46215: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
46216: LD_ADDR_VAR 0 46
46220: PUSH
46221: LD_INT 2
46223: NEG
46224: PUSH
46225: LD_INT 2
46227: NEG
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 2
46235: NEG
46236: PUSH
46237: LD_INT 3
46239: NEG
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 3
46247: NEG
46248: PUSH
46249: LD_INT 2
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: LIST
46261: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
46262: LD_ADDR_VAR 0 47
46266: PUSH
46267: LD_INT 2
46269: NEG
46270: PUSH
46271: LD_INT 3
46273: NEG
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: LD_INT 3
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46295: LD_ADDR_VAR 0 48
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: LD_INT 2
46305: NEG
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 2
46313: PUSH
46314: LD_INT 1
46316: NEG
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
46326: LD_ADDR_VAR 0 49
46330: PUSH
46331: LD_INT 3
46333: PUSH
46334: LD_INT 1
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 3
46343: PUSH
46344: LD_INT 2
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
46355: LD_ADDR_VAR 0 50
46359: PUSH
46360: LD_INT 2
46362: PUSH
46363: LD_INT 3
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 1
46372: PUSH
46373: LD_INT 3
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46384: LD_ADDR_VAR 0 51
46388: PUSH
46389: LD_INT 1
46391: NEG
46392: PUSH
46393: LD_INT 2
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 2
46402: NEG
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46415: LD_ADDR_VAR 0 52
46419: PUSH
46420: LD_INT 3
46422: NEG
46423: PUSH
46424: LD_INT 1
46426: NEG
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 3
46434: NEG
46435: PUSH
46436: LD_INT 2
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46448: LD_ADDR_VAR 0 53
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: LD_INT 3
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 0
46467: PUSH
46468: LD_INT 3
46470: NEG
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 1
46478: PUSH
46479: LD_INT 2
46481: NEG
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: LIST
46491: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46492: LD_ADDR_VAR 0 54
46496: PUSH
46497: LD_INT 2
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 3
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 3
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: LIST
46532: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46533: LD_ADDR_VAR 0 55
46537: PUSH
46538: LD_INT 3
46540: PUSH
46541: LD_INT 2
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 3
46550: PUSH
46551: LD_INT 3
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 2
46560: PUSH
46561: LD_INT 3
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: LIST
46572: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46573: LD_ADDR_VAR 0 56
46577: PUSH
46578: LD_INT 1
46580: PUSH
46581: LD_INT 3
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 0
46590: PUSH
46591: LD_INT 3
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 1
46600: NEG
46601: PUSH
46602: LD_INT 2
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: LIST
46613: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46614: LD_ADDR_VAR 0 57
46618: PUSH
46619: LD_INT 2
46621: NEG
46622: PUSH
46623: LD_INT 1
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 3
46632: NEG
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 3
46643: NEG
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: LIST
46657: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46658: LD_ADDR_VAR 0 58
46662: PUSH
46663: LD_INT 2
46665: NEG
46666: PUSH
46667: LD_INT 3
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 3
46677: NEG
46678: PUSH
46679: LD_INT 2
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 3
46689: NEG
46690: PUSH
46691: LD_INT 3
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: LIST
46703: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
46704: LD_ADDR_VAR 0 59
46708: PUSH
46709: LD_INT 1
46711: NEG
46712: PUSH
46713: LD_INT 2
46715: NEG
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: LD_INT 2
46726: NEG
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: LD_INT 1
46737: NEG
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: LIST
46747: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46748: LD_ADDR_VAR 0 60
46752: PUSH
46753: LD_INT 1
46755: PUSH
46756: LD_INT 1
46758: NEG
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 2
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 2
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: LIST
46788: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46789: LD_ADDR_VAR 0 61
46793: PUSH
46794: LD_INT 2
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 2
46806: PUSH
46807: LD_INT 2
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: LD_INT 2
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: LIST
46828: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46829: LD_ADDR_VAR 0 62
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: LD_INT 2
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: LD_INT 2
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 1
46856: NEG
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: LIST
46869: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46870: LD_ADDR_VAR 0 63
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 2
46888: NEG
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 2
46899: NEG
46900: PUSH
46901: LD_INT 1
46903: NEG
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: LIST
46913: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46914: LD_ADDR_VAR 0 64
46918: PUSH
46919: LD_INT 1
46921: NEG
46922: PUSH
46923: LD_INT 2
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: NEG
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 2
46945: NEG
46946: PUSH
46947: LD_INT 2
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: LIST
46959: ST_TO_ADDR
// end ; 2 :
46960: GO 50226
46962: LD_INT 2
46964: DOUBLE
46965: EQUAL
46966: IFTRUE 46970
46968: GO 50225
46970: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
46971: LD_ADDR_VAR 0 29
46975: PUSH
46976: LD_INT 4
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 4
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 5
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 5
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 4
47019: PUSH
47020: LD_INT 1
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 3
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 3
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 3
47050: PUSH
47051: LD_INT 2
47053: NEG
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 5
47061: PUSH
47062: LD_INT 2
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 3
47071: PUSH
47072: LD_INT 3
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 3
47081: PUSH
47082: LD_INT 2
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 4
47091: PUSH
47092: LD_INT 3
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 4
47101: PUSH
47102: LD_INT 4
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 3
47111: PUSH
47112: LD_INT 4
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 2
47121: PUSH
47122: LD_INT 3
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 2
47131: PUSH
47132: LD_INT 2
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 4
47141: PUSH
47142: LD_INT 2
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 2
47151: PUSH
47152: LD_INT 4
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: LD_INT 4
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: LD_INT 3
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: PUSH
47182: LD_INT 4
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 1
47191: PUSH
47192: LD_INT 5
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: LD_INT 5
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 1
47211: NEG
47212: PUSH
47213: LD_INT 4
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 1
47222: NEG
47223: PUSH
47224: LD_INT 3
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 2
47233: PUSH
47234: LD_INT 5
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 2
47243: NEG
47244: PUSH
47245: LD_INT 3
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 3
47254: NEG
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 3
47265: NEG
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 2
47277: NEG
47278: PUSH
47279: LD_INT 0
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 2
47288: NEG
47289: PUSH
47290: LD_INT 1
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 3
47299: NEG
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 4
47310: NEG
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 4
47321: NEG
47322: PUSH
47323: LD_INT 1
47325: NEG
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 4
47333: NEG
47334: PUSH
47335: LD_INT 2
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 2
47345: NEG
47346: PUSH
47347: LD_INT 2
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 4
47356: NEG
47357: PUSH
47358: LD_INT 4
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 4
47368: NEG
47369: PUSH
47370: LD_INT 5
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 3
47380: NEG
47381: PUSH
47382: LD_INT 4
47384: NEG
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 3
47392: NEG
47393: PUSH
47394: LD_INT 3
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 4
47404: NEG
47405: PUSH
47406: LD_INT 3
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 5
47416: NEG
47417: PUSH
47418: LD_INT 4
47420: NEG
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 5
47428: NEG
47429: PUSH
47430: LD_INT 5
47432: NEG
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 3
47440: NEG
47441: PUSH
47442: LD_INT 5
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 5
47452: NEG
47453: PUSH
47454: LD_INT 3
47456: NEG
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
47509: LD_ADDR_VAR 0 30
47513: PUSH
47514: LD_INT 4
47516: PUSH
47517: LD_INT 4
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 4
47526: PUSH
47527: LD_INT 3
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 5
47536: PUSH
47537: LD_INT 4
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 5
47546: PUSH
47547: LD_INT 5
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 4
47556: PUSH
47557: LD_INT 5
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 3
47566: PUSH
47567: LD_INT 4
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 3
47576: PUSH
47577: LD_INT 3
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 5
47586: PUSH
47587: LD_INT 3
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 3
47596: PUSH
47597: LD_INT 5
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 0
47606: PUSH
47607: LD_INT 3
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: LD_INT 2
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: PUSH
47627: LD_INT 3
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 1
47636: PUSH
47637: LD_INT 4
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: LD_INT 4
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 1
47656: NEG
47657: PUSH
47658: LD_INT 3
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: LD_INT 2
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 2
47678: PUSH
47679: LD_INT 4
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 2
47688: NEG
47689: PUSH
47690: LD_INT 2
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 4
47699: NEG
47700: PUSH
47701: LD_INT 0
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 4
47710: NEG
47711: PUSH
47712: LD_INT 1
47714: NEG
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 3
47722: NEG
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 3
47733: NEG
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 4
47744: NEG
47745: PUSH
47746: LD_INT 1
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 5
47755: NEG
47756: PUSH
47757: LD_INT 0
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 5
47766: NEG
47767: PUSH
47768: LD_INT 1
47770: NEG
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 5
47778: NEG
47779: PUSH
47780: LD_INT 2
47782: NEG
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 3
47790: NEG
47791: PUSH
47792: LD_INT 2
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 3
47801: NEG
47802: PUSH
47803: LD_INT 3
47805: NEG
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 3
47813: NEG
47814: PUSH
47815: LD_INT 4
47817: NEG
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 2
47825: NEG
47826: PUSH
47827: LD_INT 3
47829: NEG
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 2
47837: NEG
47838: PUSH
47839: LD_INT 2
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 3
47849: NEG
47850: PUSH
47851: LD_INT 2
47853: NEG
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 4
47861: NEG
47862: PUSH
47863: LD_INT 3
47865: NEG
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 4
47873: NEG
47874: PUSH
47875: LD_INT 4
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 2
47885: NEG
47886: PUSH
47887: LD_INT 4
47889: NEG
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 4
47897: NEG
47898: PUSH
47899: LD_INT 2
47901: NEG
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: LD_INT 4
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: LD_INT 5
47923: NEG
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: PUSH
47932: LD_INT 4
47934: NEG
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: PUSH
47943: LD_INT 3
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: LD_INT 3
47956: NEG
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: LD_INT 4
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: NEG
47977: PUSH
47978: LD_INT 5
47980: NEG
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 2
47988: PUSH
47989: LD_INT 3
47991: NEG
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 2
47999: NEG
48000: PUSH
48001: LD_INT 5
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
48056: LD_ADDR_VAR 0 31
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: LD_INT 4
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: LD_INT 3
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 1
48083: PUSH
48084: LD_INT 4
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: LD_INT 5
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: LD_INT 5
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: LD_INT 4
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 1
48124: NEG
48125: PUSH
48126: LD_INT 3
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 2
48135: PUSH
48136: LD_INT 5
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 2
48145: NEG
48146: PUSH
48147: LD_INT 3
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 3
48156: NEG
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 3
48167: NEG
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 2
48179: NEG
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 2
48190: NEG
48191: PUSH
48192: LD_INT 1
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 3
48201: NEG
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 4
48212: NEG
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 4
48223: NEG
48224: PUSH
48225: LD_INT 1
48227: NEG
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 4
48235: NEG
48236: PUSH
48237: LD_INT 2
48239: NEG
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 2
48247: NEG
48248: PUSH
48249: LD_INT 2
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 4
48258: NEG
48259: PUSH
48260: LD_INT 4
48262: NEG
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 4
48270: NEG
48271: PUSH
48272: LD_INT 5
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 3
48282: NEG
48283: PUSH
48284: LD_INT 4
48286: NEG
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 3
48294: NEG
48295: PUSH
48296: LD_INT 3
48298: NEG
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 4
48306: NEG
48307: PUSH
48308: LD_INT 3
48310: NEG
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 5
48318: NEG
48319: PUSH
48320: LD_INT 4
48322: NEG
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 5
48330: NEG
48331: PUSH
48332: LD_INT 5
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 3
48342: NEG
48343: PUSH
48344: LD_INT 5
48346: NEG
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 5
48354: NEG
48355: PUSH
48356: LD_INT 3
48358: NEG
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: LD_INT 3
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 0
48377: PUSH
48378: LD_INT 4
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: LD_INT 3
48391: NEG
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 1
48399: PUSH
48400: LD_INT 2
48402: NEG
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 0
48410: PUSH
48411: LD_INT 2
48413: NEG
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 1
48421: NEG
48422: PUSH
48423: LD_INT 3
48425: NEG
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: NEG
48434: PUSH
48435: LD_INT 4
48437: NEG
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 2
48445: PUSH
48446: LD_INT 2
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 2
48456: NEG
48457: PUSH
48458: LD_INT 4
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 4
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 4
48478: PUSH
48479: LD_INT 1
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 5
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 5
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 4
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 3
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 3
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 3
48540: PUSH
48541: LD_INT 2
48543: NEG
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 5
48551: PUSH
48552: LD_INT 2
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
48606: LD_ADDR_VAR 0 32
48610: PUSH
48611: LD_INT 4
48613: NEG
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 4
48624: NEG
48625: PUSH
48626: LD_INT 1
48628: NEG
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 3
48636: NEG
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 3
48647: NEG
48648: PUSH
48649: LD_INT 1
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 4
48658: NEG
48659: PUSH
48660: LD_INT 1
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 5
48669: NEG
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 5
48680: NEG
48681: PUSH
48682: LD_INT 1
48684: NEG
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 5
48692: NEG
48693: PUSH
48694: LD_INT 2
48696: NEG
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 3
48704: NEG
48705: PUSH
48706: LD_INT 2
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 3
48715: NEG
48716: PUSH
48717: LD_INT 3
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 3
48727: NEG
48728: PUSH
48729: LD_INT 4
48731: NEG
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 2
48739: NEG
48740: PUSH
48741: LD_INT 3
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 2
48751: NEG
48752: PUSH
48753: LD_INT 2
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 3
48763: NEG
48764: PUSH
48765: LD_INT 2
48767: NEG
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 4
48775: NEG
48776: PUSH
48777: LD_INT 3
48779: NEG
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 4
48787: NEG
48788: PUSH
48789: LD_INT 4
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 2
48799: NEG
48800: PUSH
48801: LD_INT 4
48803: NEG
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 4
48811: NEG
48812: PUSH
48813: LD_INT 2
48815: NEG
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 0
48823: PUSH
48824: LD_INT 4
48826: NEG
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: LD_INT 5
48837: NEG
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: LD_INT 4
48848: NEG
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 1
48856: PUSH
48857: LD_INT 3
48859: NEG
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: LD_INT 3
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: LD_INT 4
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: NEG
48891: PUSH
48892: LD_INT 5
48894: NEG
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 2
48902: PUSH
48903: LD_INT 3
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 2
48913: NEG
48914: PUSH
48915: LD_INT 5
48917: NEG
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 3
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 3
48935: PUSH
48936: LD_INT 1
48938: NEG
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 4
48946: PUSH
48947: LD_INT 0
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 4
48956: PUSH
48957: LD_INT 1
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 3
48966: PUSH
48967: LD_INT 1
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 2
48976: PUSH
48977: LD_INT 0
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 2
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 2
48997: PUSH
48998: LD_INT 2
49000: NEG
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 4
49008: PUSH
49009: LD_INT 2
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 4
49018: PUSH
49019: LD_INT 4
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 4
49028: PUSH
49029: LD_INT 3
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 5
49038: PUSH
49039: LD_INT 4
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 5
49048: PUSH
49049: LD_INT 5
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 4
49058: PUSH
49059: LD_INT 5
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 3
49068: PUSH
49069: LD_INT 4
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 3
49078: PUSH
49079: LD_INT 3
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 5
49088: PUSH
49089: LD_INT 3
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 3
49098: PUSH
49099: LD_INT 5
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
49153: LD_ADDR_VAR 0 33
49157: PUSH
49158: LD_INT 4
49160: NEG
49161: PUSH
49162: LD_INT 4
49164: NEG
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 4
49172: NEG
49173: PUSH
49174: LD_INT 5
49176: NEG
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 3
49184: NEG
49185: PUSH
49186: LD_INT 4
49188: NEG
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 3
49196: NEG
49197: PUSH
49198: LD_INT 3
49200: NEG
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 4
49208: NEG
49209: PUSH
49210: LD_INT 3
49212: NEG
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 5
49220: NEG
49221: PUSH
49222: LD_INT 4
49224: NEG
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 5
49232: NEG
49233: PUSH
49234: LD_INT 5
49236: NEG
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 3
49244: NEG
49245: PUSH
49246: LD_INT 5
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 5
49256: NEG
49257: PUSH
49258: LD_INT 3
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: LD_INT 3
49271: NEG
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: LD_INT 4
49282: NEG
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 1
49290: PUSH
49291: LD_INT 3
49293: NEG
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: LD_INT 2
49304: NEG
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: LD_INT 2
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: LD_INT 3
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 1
49335: NEG
49336: PUSH
49337: LD_INT 4
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 2
49347: PUSH
49348: LD_INT 2
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 2
49358: NEG
49359: PUSH
49360: LD_INT 4
49362: NEG
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 4
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 4
49380: PUSH
49381: LD_INT 1
49383: NEG
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 5
49391: PUSH
49392: LD_INT 0
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 5
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 4
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 3
49421: PUSH
49422: LD_INT 0
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 3
49431: PUSH
49432: LD_INT 1
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 3
49442: PUSH
49443: LD_INT 2
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 5
49453: PUSH
49454: LD_INT 2
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 3
49463: PUSH
49464: LD_INT 3
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 3
49473: PUSH
49474: LD_INT 2
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 4
49483: PUSH
49484: LD_INT 3
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 4
49493: PUSH
49494: LD_INT 4
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 3
49503: PUSH
49504: LD_INT 4
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 2
49513: PUSH
49514: LD_INT 3
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 2
49523: PUSH
49524: LD_INT 2
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 4
49533: PUSH
49534: LD_INT 2
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 2
49543: PUSH
49544: LD_INT 4
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 0
49553: PUSH
49554: LD_INT 4
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: LD_INT 3
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 1
49573: PUSH
49574: LD_INT 4
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: LD_INT 5
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 0
49593: PUSH
49594: LD_INT 5
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 1
49603: NEG
49604: PUSH
49605: LD_INT 4
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: LD_INT 3
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 2
49625: PUSH
49626: LD_INT 5
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 2
49635: NEG
49636: PUSH
49637: LD_INT 3
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
49691: LD_ADDR_VAR 0 34
49695: PUSH
49696: LD_INT 0
49698: PUSH
49699: LD_INT 4
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: LD_INT 5
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: LD_INT 4
49723: NEG
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: LD_INT 3
49734: NEG
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 0
49742: PUSH
49743: LD_INT 3
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: LD_INT 4
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: LD_INT 5
49769: NEG
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 2
49777: PUSH
49778: LD_INT 3
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 2
49788: NEG
49789: PUSH
49790: LD_INT 5
49792: NEG
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 3
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 3
49810: PUSH
49811: LD_INT 1
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 4
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 4
49831: PUSH
49832: LD_INT 1
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 3
49841: PUSH
49842: LD_INT 1
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 2
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 2
49861: PUSH
49862: LD_INT 1
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 2
49872: PUSH
49873: LD_INT 2
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 4
49883: PUSH
49884: LD_INT 2
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 4
49893: PUSH
49894: LD_INT 4
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 4
49903: PUSH
49904: LD_INT 3
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 5
49913: PUSH
49914: LD_INT 4
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 5
49923: PUSH
49924: LD_INT 5
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 4
49933: PUSH
49934: LD_INT 5
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 3
49943: PUSH
49944: LD_INT 4
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 3
49953: PUSH
49954: LD_INT 3
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 5
49963: PUSH
49964: LD_INT 3
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 3
49973: PUSH
49974: LD_INT 5
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: LD_INT 3
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: LD_INT 2
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: PUSH
50004: LD_INT 3
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: PUSH
50014: LD_INT 4
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: LD_INT 4
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: NEG
50034: PUSH
50035: LD_INT 3
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: LD_INT 2
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 2
50055: PUSH
50056: LD_INT 4
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 2
50065: NEG
50066: PUSH
50067: LD_INT 2
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 4
50076: NEG
50077: PUSH
50078: LD_INT 0
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 4
50087: NEG
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 3
50099: NEG
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 3
50110: NEG
50111: PUSH
50112: LD_INT 1
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 4
50121: NEG
50122: PUSH
50123: LD_INT 1
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 5
50132: NEG
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 5
50143: NEG
50144: PUSH
50145: LD_INT 1
50147: NEG
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 5
50155: NEG
50156: PUSH
50157: LD_INT 2
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 3
50167: NEG
50168: PUSH
50169: LD_INT 2
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: ST_TO_ADDR
// end ; end ;
50223: GO 50226
50225: POP
// case btype of b_depot , b_warehouse :
50226: LD_VAR 0 1
50230: PUSH
50231: LD_INT 0
50233: DOUBLE
50234: EQUAL
50235: IFTRUE 50245
50237: LD_INT 1
50239: DOUBLE
50240: EQUAL
50241: IFTRUE 50245
50243: GO 50446
50245: POP
// case nation of nation_american :
50246: LD_VAR 0 5
50250: PUSH
50251: LD_INT 1
50253: DOUBLE
50254: EQUAL
50255: IFTRUE 50259
50257: GO 50315
50259: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
50260: LD_ADDR_VAR 0 9
50264: PUSH
50265: LD_VAR 0 11
50269: PUSH
50270: LD_VAR 0 12
50274: PUSH
50275: LD_VAR 0 13
50279: PUSH
50280: LD_VAR 0 14
50284: PUSH
50285: LD_VAR 0 15
50289: PUSH
50290: LD_VAR 0 16
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: PUSH
50303: LD_VAR 0 4
50307: PUSH
50308: LD_INT 1
50310: PLUS
50311: ARRAY
50312: ST_TO_ADDR
50313: GO 50444
50315: LD_INT 2
50317: DOUBLE
50318: EQUAL
50319: IFTRUE 50323
50321: GO 50379
50323: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
50324: LD_ADDR_VAR 0 9
50328: PUSH
50329: LD_VAR 0 17
50333: PUSH
50334: LD_VAR 0 18
50338: PUSH
50339: LD_VAR 0 19
50343: PUSH
50344: LD_VAR 0 20
50348: PUSH
50349: LD_VAR 0 21
50353: PUSH
50354: LD_VAR 0 22
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: PUSH
50367: LD_VAR 0 4
50371: PUSH
50372: LD_INT 1
50374: PLUS
50375: ARRAY
50376: ST_TO_ADDR
50377: GO 50444
50379: LD_INT 3
50381: DOUBLE
50382: EQUAL
50383: IFTRUE 50387
50385: GO 50443
50387: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
50388: LD_ADDR_VAR 0 9
50392: PUSH
50393: LD_VAR 0 23
50397: PUSH
50398: LD_VAR 0 24
50402: PUSH
50403: LD_VAR 0 25
50407: PUSH
50408: LD_VAR 0 26
50412: PUSH
50413: LD_VAR 0 27
50417: PUSH
50418: LD_VAR 0 28
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: PUSH
50431: LD_VAR 0 4
50435: PUSH
50436: LD_INT 1
50438: PLUS
50439: ARRAY
50440: ST_TO_ADDR
50441: GO 50444
50443: POP
50444: GO 50999
50446: LD_INT 2
50448: DOUBLE
50449: EQUAL
50450: IFTRUE 50460
50452: LD_INT 3
50454: DOUBLE
50455: EQUAL
50456: IFTRUE 50460
50458: GO 50516
50460: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
50461: LD_ADDR_VAR 0 9
50465: PUSH
50466: LD_VAR 0 29
50470: PUSH
50471: LD_VAR 0 30
50475: PUSH
50476: LD_VAR 0 31
50480: PUSH
50481: LD_VAR 0 32
50485: PUSH
50486: LD_VAR 0 33
50490: PUSH
50491: LD_VAR 0 34
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: PUSH
50504: LD_VAR 0 4
50508: PUSH
50509: LD_INT 1
50511: PLUS
50512: ARRAY
50513: ST_TO_ADDR
50514: GO 50999
50516: LD_INT 16
50518: DOUBLE
50519: EQUAL
50520: IFTRUE 50578
50522: LD_INT 17
50524: DOUBLE
50525: EQUAL
50526: IFTRUE 50578
50528: LD_INT 18
50530: DOUBLE
50531: EQUAL
50532: IFTRUE 50578
50534: LD_INT 19
50536: DOUBLE
50537: EQUAL
50538: IFTRUE 50578
50540: LD_INT 22
50542: DOUBLE
50543: EQUAL
50544: IFTRUE 50578
50546: LD_INT 20
50548: DOUBLE
50549: EQUAL
50550: IFTRUE 50578
50552: LD_INT 21
50554: DOUBLE
50555: EQUAL
50556: IFTRUE 50578
50558: LD_INT 23
50560: DOUBLE
50561: EQUAL
50562: IFTRUE 50578
50564: LD_INT 24
50566: DOUBLE
50567: EQUAL
50568: IFTRUE 50578
50570: LD_INT 25
50572: DOUBLE
50573: EQUAL
50574: IFTRUE 50578
50576: GO 50634
50578: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
50579: LD_ADDR_VAR 0 9
50583: PUSH
50584: LD_VAR 0 35
50588: PUSH
50589: LD_VAR 0 36
50593: PUSH
50594: LD_VAR 0 37
50598: PUSH
50599: LD_VAR 0 38
50603: PUSH
50604: LD_VAR 0 39
50608: PUSH
50609: LD_VAR 0 40
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: PUSH
50622: LD_VAR 0 4
50626: PUSH
50627: LD_INT 1
50629: PLUS
50630: ARRAY
50631: ST_TO_ADDR
50632: GO 50999
50634: LD_INT 6
50636: DOUBLE
50637: EQUAL
50638: IFTRUE 50690
50640: LD_INT 7
50642: DOUBLE
50643: EQUAL
50644: IFTRUE 50690
50646: LD_INT 8
50648: DOUBLE
50649: EQUAL
50650: IFTRUE 50690
50652: LD_INT 13
50654: DOUBLE
50655: EQUAL
50656: IFTRUE 50690
50658: LD_INT 12
50660: DOUBLE
50661: EQUAL
50662: IFTRUE 50690
50664: LD_INT 15
50666: DOUBLE
50667: EQUAL
50668: IFTRUE 50690
50670: LD_INT 11
50672: DOUBLE
50673: EQUAL
50674: IFTRUE 50690
50676: LD_INT 14
50678: DOUBLE
50679: EQUAL
50680: IFTRUE 50690
50682: LD_INT 10
50684: DOUBLE
50685: EQUAL
50686: IFTRUE 50690
50688: GO 50746
50690: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
50691: LD_ADDR_VAR 0 9
50695: PUSH
50696: LD_VAR 0 41
50700: PUSH
50701: LD_VAR 0 42
50705: PUSH
50706: LD_VAR 0 43
50710: PUSH
50711: LD_VAR 0 44
50715: PUSH
50716: LD_VAR 0 45
50720: PUSH
50721: LD_VAR 0 46
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: PUSH
50734: LD_VAR 0 4
50738: PUSH
50739: LD_INT 1
50741: PLUS
50742: ARRAY
50743: ST_TO_ADDR
50744: GO 50999
50746: LD_INT 36
50748: DOUBLE
50749: EQUAL
50750: IFTRUE 50754
50752: GO 50810
50754: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
50755: LD_ADDR_VAR 0 9
50759: PUSH
50760: LD_VAR 0 47
50764: PUSH
50765: LD_VAR 0 48
50769: PUSH
50770: LD_VAR 0 49
50774: PUSH
50775: LD_VAR 0 50
50779: PUSH
50780: LD_VAR 0 51
50784: PUSH
50785: LD_VAR 0 52
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: PUSH
50798: LD_VAR 0 4
50802: PUSH
50803: LD_INT 1
50805: PLUS
50806: ARRAY
50807: ST_TO_ADDR
50808: GO 50999
50810: LD_INT 4
50812: DOUBLE
50813: EQUAL
50814: IFTRUE 50836
50816: LD_INT 5
50818: DOUBLE
50819: EQUAL
50820: IFTRUE 50836
50822: LD_INT 34
50824: DOUBLE
50825: EQUAL
50826: IFTRUE 50836
50828: LD_INT 37
50830: DOUBLE
50831: EQUAL
50832: IFTRUE 50836
50834: GO 50892
50836: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
50837: LD_ADDR_VAR 0 9
50841: PUSH
50842: LD_VAR 0 53
50846: PUSH
50847: LD_VAR 0 54
50851: PUSH
50852: LD_VAR 0 55
50856: PUSH
50857: LD_VAR 0 56
50861: PUSH
50862: LD_VAR 0 57
50866: PUSH
50867: LD_VAR 0 58
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: PUSH
50880: LD_VAR 0 4
50884: PUSH
50885: LD_INT 1
50887: PLUS
50888: ARRAY
50889: ST_TO_ADDR
50890: GO 50999
50892: LD_INT 31
50894: DOUBLE
50895: EQUAL
50896: IFTRUE 50942
50898: LD_INT 32
50900: DOUBLE
50901: EQUAL
50902: IFTRUE 50942
50904: LD_INT 33
50906: DOUBLE
50907: EQUAL
50908: IFTRUE 50942
50910: LD_INT 27
50912: DOUBLE
50913: EQUAL
50914: IFTRUE 50942
50916: LD_INT 26
50918: DOUBLE
50919: EQUAL
50920: IFTRUE 50942
50922: LD_INT 28
50924: DOUBLE
50925: EQUAL
50926: IFTRUE 50942
50928: LD_INT 29
50930: DOUBLE
50931: EQUAL
50932: IFTRUE 50942
50934: LD_INT 30
50936: DOUBLE
50937: EQUAL
50938: IFTRUE 50942
50940: GO 50998
50942: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
50943: LD_ADDR_VAR 0 9
50947: PUSH
50948: LD_VAR 0 59
50952: PUSH
50953: LD_VAR 0 60
50957: PUSH
50958: LD_VAR 0 61
50962: PUSH
50963: LD_VAR 0 62
50967: PUSH
50968: LD_VAR 0 63
50972: PUSH
50973: LD_VAR 0 64
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: PUSH
50986: LD_VAR 0 4
50990: PUSH
50991: LD_INT 1
50993: PLUS
50994: ARRAY
50995: ST_TO_ADDR
50996: GO 50999
50998: POP
// temp_list2 = [ ] ;
50999: LD_ADDR_VAR 0 10
51003: PUSH
51004: EMPTY
51005: ST_TO_ADDR
// for i in temp_list do
51006: LD_ADDR_VAR 0 8
51010: PUSH
51011: LD_VAR 0 9
51015: PUSH
51016: FOR_IN
51017: IFFALSE 51069
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
51019: LD_ADDR_VAR 0 10
51023: PUSH
51024: LD_VAR 0 10
51028: PUSH
51029: LD_VAR 0 8
51033: PUSH
51034: LD_INT 1
51036: ARRAY
51037: PUSH
51038: LD_VAR 0 2
51042: PLUS
51043: PUSH
51044: LD_VAR 0 8
51048: PUSH
51049: LD_INT 2
51051: ARRAY
51052: PUSH
51053: LD_VAR 0 3
51057: PLUS
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: EMPTY
51064: LIST
51065: ADD
51066: ST_TO_ADDR
51067: GO 51016
51069: POP
51070: POP
// result = temp_list2 ;
51071: LD_ADDR_VAR 0 7
51075: PUSH
51076: LD_VAR 0 10
51080: ST_TO_ADDR
// end ;
51081: LD_VAR 0 7
51085: RET
// export function EnemyInRange ( unit , dist ) ; begin
51086: LD_INT 0
51088: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
51089: LD_ADDR_VAR 0 3
51093: PUSH
51094: LD_VAR 0 1
51098: PPUSH
51099: CALL_OW 255
51103: PPUSH
51104: LD_VAR 0 1
51108: PPUSH
51109: CALL_OW 250
51113: PPUSH
51114: LD_VAR 0 1
51118: PPUSH
51119: CALL_OW 251
51123: PPUSH
51124: LD_VAR 0 2
51128: PPUSH
51129: CALL 25190 0 4
51133: PUSH
51134: LD_INT 4
51136: ARRAY
51137: ST_TO_ADDR
// end ;
51138: LD_VAR 0 3
51142: RET
// export function PlayerSeeMe ( unit ) ; begin
51143: LD_INT 0
51145: PPUSH
// result := See ( your_side , unit ) ;
51146: LD_ADDR_VAR 0 2
51150: PUSH
51151: LD_OWVAR 2
51155: PPUSH
51156: LD_VAR 0 1
51160: PPUSH
51161: CALL_OW 292
51165: ST_TO_ADDR
// end ;
51166: LD_VAR 0 2
51170: RET
// export function ReverseDir ( unit ) ; begin
51171: LD_INT 0
51173: PPUSH
// if not unit then
51174: LD_VAR 0 1
51178: NOT
51179: IFFALSE 51183
// exit ;
51181: GO 51206
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
51183: LD_ADDR_VAR 0 2
51187: PUSH
51188: LD_VAR 0 1
51192: PPUSH
51193: CALL_OW 254
51197: PUSH
51198: LD_INT 3
51200: PLUS
51201: PUSH
51202: LD_INT 6
51204: MOD
51205: ST_TO_ADDR
// end ;
51206: LD_VAR 0 2
51210: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
51211: LD_INT 0
51213: PPUSH
51214: PPUSH
51215: PPUSH
51216: PPUSH
51217: PPUSH
// if not hexes then
51218: LD_VAR 0 2
51222: NOT
51223: IFFALSE 51227
// exit ;
51225: GO 51375
// dist := 9999 ;
51227: LD_ADDR_VAR 0 5
51231: PUSH
51232: LD_INT 9999
51234: ST_TO_ADDR
// for i = 1 to hexes do
51235: LD_ADDR_VAR 0 4
51239: PUSH
51240: DOUBLE
51241: LD_INT 1
51243: DEC
51244: ST_TO_ADDR
51245: LD_VAR 0 2
51249: PUSH
51250: FOR_TO
51251: IFFALSE 51363
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
51253: LD_VAR 0 1
51257: PPUSH
51258: LD_VAR 0 2
51262: PUSH
51263: LD_VAR 0 4
51267: ARRAY
51268: PUSH
51269: LD_INT 1
51271: ARRAY
51272: PPUSH
51273: LD_VAR 0 2
51277: PUSH
51278: LD_VAR 0 4
51282: ARRAY
51283: PUSH
51284: LD_INT 2
51286: ARRAY
51287: PPUSH
51288: CALL_OW 297
51292: PUSH
51293: LD_VAR 0 5
51297: LESS
51298: IFFALSE 51361
// begin hex := hexes [ i ] ;
51300: LD_ADDR_VAR 0 7
51304: PUSH
51305: LD_VAR 0 2
51309: PUSH
51310: LD_VAR 0 4
51314: ARRAY
51315: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51316: LD_ADDR_VAR 0 5
51320: PUSH
51321: LD_VAR 0 1
51325: PPUSH
51326: LD_VAR 0 2
51330: PUSH
51331: LD_VAR 0 4
51335: ARRAY
51336: PUSH
51337: LD_INT 1
51339: ARRAY
51340: PPUSH
51341: LD_VAR 0 2
51345: PUSH
51346: LD_VAR 0 4
51350: ARRAY
51351: PUSH
51352: LD_INT 2
51354: ARRAY
51355: PPUSH
51356: CALL_OW 297
51360: ST_TO_ADDR
// end ; end ;
51361: GO 51250
51363: POP
51364: POP
// result := hex ;
51365: LD_ADDR_VAR 0 3
51369: PUSH
51370: LD_VAR 0 7
51374: ST_TO_ADDR
// end ;
51375: LD_VAR 0 3
51379: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
51380: LD_INT 0
51382: PPUSH
51383: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
51384: LD_VAR 0 1
51388: NOT
51389: PUSH
51390: LD_VAR 0 1
51394: PUSH
51395: LD_INT 21
51397: PUSH
51398: LD_INT 2
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 23
51407: PUSH
51408: LD_INT 2
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PPUSH
51419: CALL_OW 69
51423: IN
51424: NOT
51425: OR
51426: IFFALSE 51430
// exit ;
51428: GO 51477
// for i = 1 to 3 do
51430: LD_ADDR_VAR 0 3
51434: PUSH
51435: DOUBLE
51436: LD_INT 1
51438: DEC
51439: ST_TO_ADDR
51440: LD_INT 3
51442: PUSH
51443: FOR_TO
51444: IFFALSE 51475
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
51446: LD_VAR 0 1
51450: PPUSH
51451: CALL_OW 250
51455: PPUSH
51456: LD_VAR 0 1
51460: PPUSH
51461: CALL_OW 251
51465: PPUSH
51466: LD_INT 1
51468: PPUSH
51469: CALL_OW 453
51473: GO 51443
51475: POP
51476: POP
// end ;
51477: LD_VAR 0 2
51481: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
51482: LD_INT 0
51484: PPUSH
51485: PPUSH
51486: PPUSH
51487: PPUSH
51488: PPUSH
51489: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
51490: LD_VAR 0 1
51494: NOT
51495: PUSH
51496: LD_VAR 0 2
51500: NOT
51501: OR
51502: PUSH
51503: LD_VAR 0 1
51507: PPUSH
51508: CALL_OW 314
51512: OR
51513: IFFALSE 51517
// exit ;
51515: GO 51958
// x := GetX ( enemy_unit ) ;
51517: LD_ADDR_VAR 0 7
51521: PUSH
51522: LD_VAR 0 2
51526: PPUSH
51527: CALL_OW 250
51531: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
51532: LD_ADDR_VAR 0 8
51536: PUSH
51537: LD_VAR 0 2
51541: PPUSH
51542: CALL_OW 251
51546: ST_TO_ADDR
// if not x or not y then
51547: LD_VAR 0 7
51551: NOT
51552: PUSH
51553: LD_VAR 0 8
51557: NOT
51558: OR
51559: IFFALSE 51563
// exit ;
51561: GO 51958
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
51563: LD_ADDR_VAR 0 6
51567: PUSH
51568: LD_VAR 0 7
51572: PPUSH
51573: LD_INT 0
51575: PPUSH
51576: LD_INT 4
51578: PPUSH
51579: CALL_OW 272
51583: PUSH
51584: LD_VAR 0 8
51588: PPUSH
51589: LD_INT 0
51591: PPUSH
51592: LD_INT 4
51594: PPUSH
51595: CALL_OW 273
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_VAR 0 7
51608: PPUSH
51609: LD_INT 1
51611: PPUSH
51612: LD_INT 4
51614: PPUSH
51615: CALL_OW 272
51619: PUSH
51620: LD_VAR 0 8
51624: PPUSH
51625: LD_INT 1
51627: PPUSH
51628: LD_INT 4
51630: PPUSH
51631: CALL_OW 273
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_VAR 0 7
51644: PPUSH
51645: LD_INT 2
51647: PPUSH
51648: LD_INT 4
51650: PPUSH
51651: CALL_OW 272
51655: PUSH
51656: LD_VAR 0 8
51660: PPUSH
51661: LD_INT 2
51663: PPUSH
51664: LD_INT 4
51666: PPUSH
51667: CALL_OW 273
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_VAR 0 7
51680: PPUSH
51681: LD_INT 3
51683: PPUSH
51684: LD_INT 4
51686: PPUSH
51687: CALL_OW 272
51691: PUSH
51692: LD_VAR 0 8
51696: PPUSH
51697: LD_INT 3
51699: PPUSH
51700: LD_INT 4
51702: PPUSH
51703: CALL_OW 273
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_VAR 0 7
51716: PPUSH
51717: LD_INT 4
51719: PPUSH
51720: LD_INT 4
51722: PPUSH
51723: CALL_OW 272
51727: PUSH
51728: LD_VAR 0 8
51732: PPUSH
51733: LD_INT 4
51735: PPUSH
51736: LD_INT 4
51738: PPUSH
51739: CALL_OW 273
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_VAR 0 7
51752: PPUSH
51753: LD_INT 5
51755: PPUSH
51756: LD_INT 4
51758: PPUSH
51759: CALL_OW 272
51763: PUSH
51764: LD_VAR 0 8
51768: PPUSH
51769: LD_INT 5
51771: PPUSH
51772: LD_INT 4
51774: PPUSH
51775: CALL_OW 273
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: ST_TO_ADDR
// for i = tmp downto 1 do
51792: LD_ADDR_VAR 0 4
51796: PUSH
51797: DOUBLE
51798: LD_VAR 0 6
51802: INC
51803: ST_TO_ADDR
51804: LD_INT 1
51806: PUSH
51807: FOR_DOWNTO
51808: IFFALSE 51909
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
51810: LD_VAR 0 6
51814: PUSH
51815: LD_VAR 0 4
51819: ARRAY
51820: PUSH
51821: LD_INT 1
51823: ARRAY
51824: PPUSH
51825: LD_VAR 0 6
51829: PUSH
51830: LD_VAR 0 4
51834: ARRAY
51835: PUSH
51836: LD_INT 2
51838: ARRAY
51839: PPUSH
51840: CALL_OW 488
51844: NOT
51845: PUSH
51846: LD_VAR 0 6
51850: PUSH
51851: LD_VAR 0 4
51855: ARRAY
51856: PUSH
51857: LD_INT 1
51859: ARRAY
51860: PPUSH
51861: LD_VAR 0 6
51865: PUSH
51866: LD_VAR 0 4
51870: ARRAY
51871: PUSH
51872: LD_INT 2
51874: ARRAY
51875: PPUSH
51876: CALL_OW 428
51880: PUSH
51881: LD_INT 0
51883: NONEQUAL
51884: OR
51885: IFFALSE 51907
// tmp := Delete ( tmp , i ) ;
51887: LD_ADDR_VAR 0 6
51891: PUSH
51892: LD_VAR 0 6
51896: PPUSH
51897: LD_VAR 0 4
51901: PPUSH
51902: CALL_OW 3
51906: ST_TO_ADDR
51907: GO 51807
51909: POP
51910: POP
// j := GetClosestHex ( unit , tmp ) ;
51911: LD_ADDR_VAR 0 5
51915: PUSH
51916: LD_VAR 0 1
51920: PPUSH
51921: LD_VAR 0 6
51925: PPUSH
51926: CALL 51211 0 2
51930: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
51931: LD_VAR 0 1
51935: PPUSH
51936: LD_VAR 0 5
51940: PUSH
51941: LD_INT 1
51943: ARRAY
51944: PPUSH
51945: LD_VAR 0 5
51949: PUSH
51950: LD_INT 2
51952: ARRAY
51953: PPUSH
51954: CALL_OW 111
// end ;
51958: LD_VAR 0 3
51962: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51963: LD_INT 0
51965: PPUSH
51966: PPUSH
51967: PPUSH
// uc_side = 0 ;
51968: LD_ADDR_OWVAR 20
51972: PUSH
51973: LD_INT 0
51975: ST_TO_ADDR
// uc_nation = 0 ;
51976: LD_ADDR_OWVAR 21
51980: PUSH
51981: LD_INT 0
51983: ST_TO_ADDR
// InitHc ;
51984: CALL_OW 19
// InitVc ;
51988: CALL_OW 20
// if mastodonts then
51992: LD_VAR 0 6
51996: IFFALSE 52063
// for i = 1 to mastodonts do
51998: LD_ADDR_VAR 0 11
52002: PUSH
52003: DOUBLE
52004: LD_INT 1
52006: DEC
52007: ST_TO_ADDR
52008: LD_VAR 0 6
52012: PUSH
52013: FOR_TO
52014: IFFALSE 52061
// begin vc_chassis := 31 ;
52016: LD_ADDR_OWVAR 37
52020: PUSH
52021: LD_INT 31
52023: ST_TO_ADDR
// vc_control := control_rider ;
52024: LD_ADDR_OWVAR 38
52028: PUSH
52029: LD_INT 4
52031: ST_TO_ADDR
// animal := CreateVehicle ;
52032: LD_ADDR_VAR 0 12
52036: PUSH
52037: CALL_OW 45
52041: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52042: LD_VAR 0 12
52046: PPUSH
52047: LD_VAR 0 8
52051: PPUSH
52052: LD_INT 0
52054: PPUSH
52055: CALL 54132 0 3
// end ;
52059: GO 52013
52061: POP
52062: POP
// if horses then
52063: LD_VAR 0 5
52067: IFFALSE 52134
// for i = 1 to horses do
52069: LD_ADDR_VAR 0 11
52073: PUSH
52074: DOUBLE
52075: LD_INT 1
52077: DEC
52078: ST_TO_ADDR
52079: LD_VAR 0 5
52083: PUSH
52084: FOR_TO
52085: IFFALSE 52132
// begin hc_class := 21 ;
52087: LD_ADDR_OWVAR 28
52091: PUSH
52092: LD_INT 21
52094: ST_TO_ADDR
// hc_gallery :=  ;
52095: LD_ADDR_OWVAR 33
52099: PUSH
52100: LD_STRING 
52102: ST_TO_ADDR
// animal := CreateHuman ;
52103: LD_ADDR_VAR 0 12
52107: PUSH
52108: CALL_OW 44
52112: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52113: LD_VAR 0 12
52117: PPUSH
52118: LD_VAR 0 8
52122: PPUSH
52123: LD_INT 0
52125: PPUSH
52126: CALL 54132 0 3
// end ;
52130: GO 52084
52132: POP
52133: POP
// if birds then
52134: LD_VAR 0 1
52138: IFFALSE 52205
// for i = 1 to birds do
52140: LD_ADDR_VAR 0 11
52144: PUSH
52145: DOUBLE
52146: LD_INT 1
52148: DEC
52149: ST_TO_ADDR
52150: LD_VAR 0 1
52154: PUSH
52155: FOR_TO
52156: IFFALSE 52203
// begin hc_class = 18 ;
52158: LD_ADDR_OWVAR 28
52162: PUSH
52163: LD_INT 18
52165: ST_TO_ADDR
// hc_gallery =  ;
52166: LD_ADDR_OWVAR 33
52170: PUSH
52171: LD_STRING 
52173: ST_TO_ADDR
// animal := CreateHuman ;
52174: LD_ADDR_VAR 0 12
52178: PUSH
52179: CALL_OW 44
52183: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52184: LD_VAR 0 12
52188: PPUSH
52189: LD_VAR 0 8
52193: PPUSH
52194: LD_INT 0
52196: PPUSH
52197: CALL 54132 0 3
// end ;
52201: GO 52155
52203: POP
52204: POP
// if tigers then
52205: LD_VAR 0 2
52209: IFFALSE 52293
// for i = 1 to tigers do
52211: LD_ADDR_VAR 0 11
52215: PUSH
52216: DOUBLE
52217: LD_INT 1
52219: DEC
52220: ST_TO_ADDR
52221: LD_VAR 0 2
52225: PUSH
52226: FOR_TO
52227: IFFALSE 52291
// begin hc_class = class_tiger ;
52229: LD_ADDR_OWVAR 28
52233: PUSH
52234: LD_INT 14
52236: ST_TO_ADDR
// hc_gallery =  ;
52237: LD_ADDR_OWVAR 33
52241: PUSH
52242: LD_STRING 
52244: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52245: LD_ADDR_OWVAR 35
52249: PUSH
52250: LD_INT 7
52252: NEG
52253: PPUSH
52254: LD_INT 7
52256: PPUSH
52257: CALL_OW 12
52261: ST_TO_ADDR
// animal := CreateHuman ;
52262: LD_ADDR_VAR 0 12
52266: PUSH
52267: CALL_OW 44
52271: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52272: LD_VAR 0 12
52276: PPUSH
52277: LD_VAR 0 8
52281: PPUSH
52282: LD_INT 0
52284: PPUSH
52285: CALL 54132 0 3
// end ;
52289: GO 52226
52291: POP
52292: POP
// if apemans then
52293: LD_VAR 0 3
52297: IFFALSE 52420
// for i = 1 to apemans do
52299: LD_ADDR_VAR 0 11
52303: PUSH
52304: DOUBLE
52305: LD_INT 1
52307: DEC
52308: ST_TO_ADDR
52309: LD_VAR 0 3
52313: PUSH
52314: FOR_TO
52315: IFFALSE 52418
// begin hc_class = class_apeman ;
52317: LD_ADDR_OWVAR 28
52321: PUSH
52322: LD_INT 12
52324: ST_TO_ADDR
// hc_gallery =  ;
52325: LD_ADDR_OWVAR 33
52329: PUSH
52330: LD_STRING 
52332: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
52333: LD_ADDR_OWVAR 35
52337: PUSH
52338: LD_INT 5
52340: NEG
52341: PPUSH
52342: LD_INT 5
52344: PPUSH
52345: CALL_OW 12
52349: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52350: LD_ADDR_OWVAR 31
52354: PUSH
52355: LD_INT 1
52357: PPUSH
52358: LD_INT 3
52360: PPUSH
52361: CALL_OW 12
52365: PUSH
52366: LD_INT 1
52368: PPUSH
52369: LD_INT 3
52371: PPUSH
52372: CALL_OW 12
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: ST_TO_ADDR
// animal := CreateHuman ;
52389: LD_ADDR_VAR 0 12
52393: PUSH
52394: CALL_OW 44
52398: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52399: LD_VAR 0 12
52403: PPUSH
52404: LD_VAR 0 8
52408: PPUSH
52409: LD_INT 0
52411: PPUSH
52412: CALL 54132 0 3
// end ;
52416: GO 52314
52418: POP
52419: POP
// if enchidnas then
52420: LD_VAR 0 4
52424: IFFALSE 52491
// for i = 1 to enchidnas do
52426: LD_ADDR_VAR 0 11
52430: PUSH
52431: DOUBLE
52432: LD_INT 1
52434: DEC
52435: ST_TO_ADDR
52436: LD_VAR 0 4
52440: PUSH
52441: FOR_TO
52442: IFFALSE 52489
// begin hc_class = 13 ;
52444: LD_ADDR_OWVAR 28
52448: PUSH
52449: LD_INT 13
52451: ST_TO_ADDR
// hc_gallery =  ;
52452: LD_ADDR_OWVAR 33
52456: PUSH
52457: LD_STRING 
52459: ST_TO_ADDR
// animal := CreateHuman ;
52460: LD_ADDR_VAR 0 12
52464: PUSH
52465: CALL_OW 44
52469: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52470: LD_VAR 0 12
52474: PPUSH
52475: LD_VAR 0 8
52479: PPUSH
52480: LD_INT 0
52482: PPUSH
52483: CALL 54132 0 3
// end ;
52487: GO 52441
52489: POP
52490: POP
// if fishes then
52491: LD_VAR 0 7
52495: IFFALSE 52562
// for i = 1 to fishes do
52497: LD_ADDR_VAR 0 11
52501: PUSH
52502: DOUBLE
52503: LD_INT 1
52505: DEC
52506: ST_TO_ADDR
52507: LD_VAR 0 7
52511: PUSH
52512: FOR_TO
52513: IFFALSE 52560
// begin hc_class = 20 ;
52515: LD_ADDR_OWVAR 28
52519: PUSH
52520: LD_INT 20
52522: ST_TO_ADDR
// hc_gallery =  ;
52523: LD_ADDR_OWVAR 33
52527: PUSH
52528: LD_STRING 
52530: ST_TO_ADDR
// animal := CreateHuman ;
52531: LD_ADDR_VAR 0 12
52535: PUSH
52536: CALL_OW 44
52540: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
52541: LD_VAR 0 12
52545: PPUSH
52546: LD_VAR 0 9
52550: PPUSH
52551: LD_INT 0
52553: PPUSH
52554: CALL 54132 0 3
// end ;
52558: GO 52512
52560: POP
52561: POP
// end ;
52562: LD_VAR 0 10
52566: RET
// export function WantHeal ( sci , unit ) ; begin
52567: LD_INT 0
52569: PPUSH
// if GetTaskList ( sci ) > 0 then
52570: LD_VAR 0 1
52574: PPUSH
52575: CALL_OW 437
52579: PUSH
52580: LD_INT 0
52582: GREATER
52583: IFFALSE 52653
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52585: LD_VAR 0 1
52589: PPUSH
52590: CALL_OW 437
52594: PUSH
52595: LD_INT 1
52597: ARRAY
52598: PUSH
52599: LD_INT 1
52601: ARRAY
52602: PUSH
52603: LD_STRING l
52605: EQUAL
52606: PUSH
52607: LD_VAR 0 1
52611: PPUSH
52612: CALL_OW 437
52616: PUSH
52617: LD_INT 1
52619: ARRAY
52620: PUSH
52621: LD_INT 4
52623: ARRAY
52624: PUSH
52625: LD_VAR 0 2
52629: EQUAL
52630: AND
52631: IFFALSE 52643
// result := true else
52633: LD_ADDR_VAR 0 3
52637: PUSH
52638: LD_INT 1
52640: ST_TO_ADDR
52641: GO 52651
// result := false ;
52643: LD_ADDR_VAR 0 3
52647: PUSH
52648: LD_INT 0
52650: ST_TO_ADDR
// end else
52651: GO 52661
// result := false ;
52653: LD_ADDR_VAR 0 3
52657: PUSH
52658: LD_INT 0
52660: ST_TO_ADDR
// end ;
52661: LD_VAR 0 3
52665: RET
// export function HealTarget ( sci ) ; begin
52666: LD_INT 0
52668: PPUSH
// if not sci then
52669: LD_VAR 0 1
52673: NOT
52674: IFFALSE 52678
// exit ;
52676: GO 52743
// result := 0 ;
52678: LD_ADDR_VAR 0 2
52682: PUSH
52683: LD_INT 0
52685: ST_TO_ADDR
// if GetTaskList ( sci ) then
52686: LD_VAR 0 1
52690: PPUSH
52691: CALL_OW 437
52695: IFFALSE 52743
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52697: LD_VAR 0 1
52701: PPUSH
52702: CALL_OW 437
52706: PUSH
52707: LD_INT 1
52709: ARRAY
52710: PUSH
52711: LD_INT 1
52713: ARRAY
52714: PUSH
52715: LD_STRING l
52717: EQUAL
52718: IFFALSE 52743
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52720: LD_ADDR_VAR 0 2
52724: PUSH
52725: LD_VAR 0 1
52729: PPUSH
52730: CALL_OW 437
52734: PUSH
52735: LD_INT 1
52737: ARRAY
52738: PUSH
52739: LD_INT 4
52741: ARRAY
52742: ST_TO_ADDR
// end ;
52743: LD_VAR 0 2
52747: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52748: LD_INT 0
52750: PPUSH
52751: PPUSH
52752: PPUSH
52753: PPUSH
// if not base_units then
52754: LD_VAR 0 1
52758: NOT
52759: IFFALSE 52763
// exit ;
52761: GO 52850
// result := false ;
52763: LD_ADDR_VAR 0 2
52767: PUSH
52768: LD_INT 0
52770: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
52771: LD_ADDR_VAR 0 5
52775: PUSH
52776: LD_VAR 0 1
52780: PPUSH
52781: LD_INT 21
52783: PUSH
52784: LD_INT 3
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PPUSH
52791: CALL_OW 72
52795: ST_TO_ADDR
// if not tmp then
52796: LD_VAR 0 5
52800: NOT
52801: IFFALSE 52805
// exit ;
52803: GO 52850
// for i in tmp do
52805: LD_ADDR_VAR 0 3
52809: PUSH
52810: LD_VAR 0 5
52814: PUSH
52815: FOR_IN
52816: IFFALSE 52848
// begin result := EnemyInRange ( i , 22 ) ;
52818: LD_ADDR_VAR 0 2
52822: PUSH
52823: LD_VAR 0 3
52827: PPUSH
52828: LD_INT 22
52830: PPUSH
52831: CALL 51086 0 2
52835: ST_TO_ADDR
// if result then
52836: LD_VAR 0 2
52840: IFFALSE 52846
// exit ;
52842: POP
52843: POP
52844: GO 52850
// end ;
52846: GO 52815
52848: POP
52849: POP
// end ;
52850: LD_VAR 0 2
52854: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
52855: LD_INT 0
52857: PPUSH
52858: PPUSH
// if not units then
52859: LD_VAR 0 1
52863: NOT
52864: IFFALSE 52868
// exit ;
52866: GO 52938
// result := [ ] ;
52868: LD_ADDR_VAR 0 3
52872: PUSH
52873: EMPTY
52874: ST_TO_ADDR
// for i in units do
52875: LD_ADDR_VAR 0 4
52879: PUSH
52880: LD_VAR 0 1
52884: PUSH
52885: FOR_IN
52886: IFFALSE 52936
// if GetTag ( i ) = tag then
52888: LD_VAR 0 4
52892: PPUSH
52893: CALL_OW 110
52897: PUSH
52898: LD_VAR 0 2
52902: EQUAL
52903: IFFALSE 52934
// result := Insert ( result , result + 1 , i ) ;
52905: LD_ADDR_VAR 0 3
52909: PUSH
52910: LD_VAR 0 3
52914: PPUSH
52915: LD_VAR 0 3
52919: PUSH
52920: LD_INT 1
52922: PLUS
52923: PPUSH
52924: LD_VAR 0 4
52928: PPUSH
52929: CALL_OW 2
52933: ST_TO_ADDR
52934: GO 52885
52936: POP
52937: POP
// end ;
52938: LD_VAR 0 3
52942: RET
// export function IsDriver ( un ) ; begin
52943: LD_INT 0
52945: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52946: LD_ADDR_VAR 0 2
52950: PUSH
52951: LD_VAR 0 1
52955: PUSH
52956: LD_INT 55
52958: PUSH
52959: EMPTY
52960: LIST
52961: PPUSH
52962: CALL_OW 69
52966: IN
52967: ST_TO_ADDR
// end ;
52968: LD_VAR 0 2
52972: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52973: LD_INT 0
52975: PPUSH
52976: PPUSH
// list := [ ] ;
52977: LD_ADDR_VAR 0 5
52981: PUSH
52982: EMPTY
52983: ST_TO_ADDR
// case d of 0 :
52984: LD_VAR 0 3
52988: PUSH
52989: LD_INT 0
52991: DOUBLE
52992: EQUAL
52993: IFTRUE 52997
52995: GO 53130
52997: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52998: LD_ADDR_VAR 0 5
53002: PUSH
53003: LD_VAR 0 1
53007: PUSH
53008: LD_INT 4
53010: MINUS
53011: PUSH
53012: LD_VAR 0 2
53016: PUSH
53017: LD_INT 4
53019: MINUS
53020: PUSH
53021: LD_INT 2
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: LIST
53028: PUSH
53029: LD_VAR 0 1
53033: PUSH
53034: LD_INT 3
53036: MINUS
53037: PUSH
53038: LD_VAR 0 2
53042: PUSH
53043: LD_INT 1
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: LIST
53050: PUSH
53051: LD_VAR 0 1
53055: PUSH
53056: LD_INT 4
53058: PLUS
53059: PUSH
53060: LD_VAR 0 2
53064: PUSH
53065: LD_INT 4
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: LIST
53072: PUSH
53073: LD_VAR 0 1
53077: PUSH
53078: LD_INT 3
53080: PLUS
53081: PUSH
53082: LD_VAR 0 2
53086: PUSH
53087: LD_INT 3
53089: PLUS
53090: PUSH
53091: LD_INT 5
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: LIST
53098: PUSH
53099: LD_VAR 0 1
53103: PUSH
53104: LD_VAR 0 2
53108: PUSH
53109: LD_INT 4
53111: PLUS
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: LIST
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: ST_TO_ADDR
// end ; 1 :
53128: GO 53828
53130: LD_INT 1
53132: DOUBLE
53133: EQUAL
53134: IFTRUE 53138
53136: GO 53271
53138: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53139: LD_ADDR_VAR 0 5
53143: PUSH
53144: LD_VAR 0 1
53148: PUSH
53149: LD_VAR 0 2
53153: PUSH
53154: LD_INT 4
53156: MINUS
53157: PUSH
53158: LD_INT 3
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: LIST
53165: PUSH
53166: LD_VAR 0 1
53170: PUSH
53171: LD_INT 3
53173: MINUS
53174: PUSH
53175: LD_VAR 0 2
53179: PUSH
53180: LD_INT 3
53182: MINUS
53183: PUSH
53184: LD_INT 2
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: LIST
53191: PUSH
53192: LD_VAR 0 1
53196: PUSH
53197: LD_INT 4
53199: MINUS
53200: PUSH
53201: LD_VAR 0 2
53205: PUSH
53206: LD_INT 1
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: LIST
53213: PUSH
53214: LD_VAR 0 1
53218: PUSH
53219: LD_VAR 0 2
53223: PUSH
53224: LD_INT 3
53226: PLUS
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: LIST
53235: PUSH
53236: LD_VAR 0 1
53240: PUSH
53241: LD_INT 4
53243: PLUS
53244: PUSH
53245: LD_VAR 0 2
53249: PUSH
53250: LD_INT 4
53252: PLUS
53253: PUSH
53254: LD_INT 5
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: LIST
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: ST_TO_ADDR
// end ; 2 :
53269: GO 53828
53271: LD_INT 2
53273: DOUBLE
53274: EQUAL
53275: IFTRUE 53279
53277: GO 53408
53279: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53280: LD_ADDR_VAR 0 5
53284: PUSH
53285: LD_VAR 0 1
53289: PUSH
53290: LD_VAR 0 2
53294: PUSH
53295: LD_INT 3
53297: MINUS
53298: PUSH
53299: LD_INT 3
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: LIST
53306: PUSH
53307: LD_VAR 0 1
53311: PUSH
53312: LD_INT 4
53314: PLUS
53315: PUSH
53316: LD_VAR 0 2
53320: PUSH
53321: LD_INT 4
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: LIST
53328: PUSH
53329: LD_VAR 0 1
53333: PUSH
53334: LD_VAR 0 2
53338: PUSH
53339: LD_INT 4
53341: PLUS
53342: PUSH
53343: LD_INT 0
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: LIST
53350: PUSH
53351: LD_VAR 0 1
53355: PUSH
53356: LD_INT 3
53358: MINUS
53359: PUSH
53360: LD_VAR 0 2
53364: PUSH
53365: LD_INT 1
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: LIST
53372: PUSH
53373: LD_VAR 0 1
53377: PUSH
53378: LD_INT 4
53380: MINUS
53381: PUSH
53382: LD_VAR 0 2
53386: PUSH
53387: LD_INT 4
53389: MINUS
53390: PUSH
53391: LD_INT 2
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: LIST
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: ST_TO_ADDR
// end ; 3 :
53406: GO 53828
53408: LD_INT 3
53410: DOUBLE
53411: EQUAL
53412: IFTRUE 53416
53414: GO 53549
53416: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53417: LD_ADDR_VAR 0 5
53421: PUSH
53422: LD_VAR 0 1
53426: PUSH
53427: LD_INT 3
53429: PLUS
53430: PUSH
53431: LD_VAR 0 2
53435: PUSH
53436: LD_INT 4
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: LIST
53443: PUSH
53444: LD_VAR 0 1
53448: PUSH
53449: LD_INT 4
53451: PLUS
53452: PUSH
53453: LD_VAR 0 2
53457: PUSH
53458: LD_INT 4
53460: PLUS
53461: PUSH
53462: LD_INT 5
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: LIST
53469: PUSH
53470: LD_VAR 0 1
53474: PUSH
53475: LD_INT 4
53477: MINUS
53478: PUSH
53479: LD_VAR 0 2
53483: PUSH
53484: LD_INT 1
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: LIST
53491: PUSH
53492: LD_VAR 0 1
53496: PUSH
53497: LD_VAR 0 2
53501: PUSH
53502: LD_INT 4
53504: MINUS
53505: PUSH
53506: LD_INT 3
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: LIST
53513: PUSH
53514: LD_VAR 0 1
53518: PUSH
53519: LD_INT 3
53521: MINUS
53522: PUSH
53523: LD_VAR 0 2
53527: PUSH
53528: LD_INT 3
53530: MINUS
53531: PUSH
53532: LD_INT 2
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: LIST
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: ST_TO_ADDR
// end ; 4 :
53547: GO 53828
53549: LD_INT 4
53551: DOUBLE
53552: EQUAL
53553: IFTRUE 53557
53555: GO 53690
53557: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
53558: LD_ADDR_VAR 0 5
53562: PUSH
53563: LD_VAR 0 1
53567: PUSH
53568: LD_VAR 0 2
53572: PUSH
53573: LD_INT 4
53575: PLUS
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: LIST
53584: PUSH
53585: LD_VAR 0 1
53589: PUSH
53590: LD_INT 3
53592: PLUS
53593: PUSH
53594: LD_VAR 0 2
53598: PUSH
53599: LD_INT 3
53601: PLUS
53602: PUSH
53603: LD_INT 5
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: LIST
53610: PUSH
53611: LD_VAR 0 1
53615: PUSH
53616: LD_INT 4
53618: PLUS
53619: PUSH
53620: LD_VAR 0 2
53624: PUSH
53625: LD_INT 4
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: LIST
53632: PUSH
53633: LD_VAR 0 1
53637: PUSH
53638: LD_VAR 0 2
53642: PUSH
53643: LD_INT 3
53645: MINUS
53646: PUSH
53647: LD_INT 3
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: LIST
53654: PUSH
53655: LD_VAR 0 1
53659: PUSH
53660: LD_INT 4
53662: MINUS
53663: PUSH
53664: LD_VAR 0 2
53668: PUSH
53669: LD_INT 4
53671: MINUS
53672: PUSH
53673: LD_INT 2
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: LIST
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: ST_TO_ADDR
// end ; 5 :
53688: GO 53828
53690: LD_INT 5
53692: DOUBLE
53693: EQUAL
53694: IFTRUE 53698
53696: GO 53827
53698: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53699: LD_ADDR_VAR 0 5
53703: PUSH
53704: LD_VAR 0 1
53708: PUSH
53709: LD_INT 4
53711: MINUS
53712: PUSH
53713: LD_VAR 0 2
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: LIST
53725: PUSH
53726: LD_VAR 0 1
53730: PUSH
53731: LD_VAR 0 2
53735: PUSH
53736: LD_INT 4
53738: MINUS
53739: PUSH
53740: LD_INT 3
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: LIST
53747: PUSH
53748: LD_VAR 0 1
53752: PUSH
53753: LD_INT 4
53755: PLUS
53756: PUSH
53757: LD_VAR 0 2
53761: PUSH
53762: LD_INT 4
53764: PLUS
53765: PUSH
53766: LD_INT 5
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: LIST
53773: PUSH
53774: LD_VAR 0 1
53778: PUSH
53779: LD_INT 3
53781: PLUS
53782: PUSH
53783: LD_VAR 0 2
53787: PUSH
53788: LD_INT 4
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: LIST
53795: PUSH
53796: LD_VAR 0 1
53800: PUSH
53801: LD_VAR 0 2
53805: PUSH
53806: LD_INT 3
53808: PLUS
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: LIST
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: ST_TO_ADDR
// end ; end ;
53825: GO 53828
53827: POP
// result := list ;
53828: LD_ADDR_VAR 0 4
53832: PUSH
53833: LD_VAR 0 5
53837: ST_TO_ADDR
// end ;
53838: LD_VAR 0 4
53842: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
53843: LD_INT 0
53845: PPUSH
53846: PPUSH
53847: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
53848: LD_VAR 0 1
53852: NOT
53853: PUSH
53854: LD_VAR 0 2
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: LD_INT 2
53864: PUSH
53865: LD_INT 3
53867: PUSH
53868: LD_INT 4
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: IN
53877: NOT
53878: OR
53879: IFFALSE 53883
// exit ;
53881: GO 53975
// tmp := [ ] ;
53883: LD_ADDR_VAR 0 5
53887: PUSH
53888: EMPTY
53889: ST_TO_ADDR
// for i in units do
53890: LD_ADDR_VAR 0 4
53894: PUSH
53895: LD_VAR 0 1
53899: PUSH
53900: FOR_IN
53901: IFFALSE 53944
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
53903: LD_ADDR_VAR 0 5
53907: PUSH
53908: LD_VAR 0 5
53912: PPUSH
53913: LD_VAR 0 5
53917: PUSH
53918: LD_INT 1
53920: PLUS
53921: PPUSH
53922: LD_VAR 0 4
53926: PPUSH
53927: LD_VAR 0 2
53931: PPUSH
53932: CALL_OW 259
53936: PPUSH
53937: CALL_OW 2
53941: ST_TO_ADDR
53942: GO 53900
53944: POP
53945: POP
// if not tmp then
53946: LD_VAR 0 5
53950: NOT
53951: IFFALSE 53955
// exit ;
53953: GO 53975
// result := SortListByListDesc ( units , tmp ) ;
53955: LD_ADDR_VAR 0 3
53959: PUSH
53960: LD_VAR 0 1
53964: PPUSH
53965: LD_VAR 0 5
53969: PPUSH
53970: CALL_OW 77
53974: ST_TO_ADDR
// end ;
53975: LD_VAR 0 3
53979: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53980: LD_INT 0
53982: PPUSH
53983: PPUSH
53984: PPUSH
// x := GetX ( building ) ;
53985: LD_ADDR_VAR 0 4
53989: PUSH
53990: LD_VAR 0 2
53994: PPUSH
53995: CALL_OW 250
53999: ST_TO_ADDR
// y := GetY ( building ) ;
54000: LD_ADDR_VAR 0 5
54004: PUSH
54005: LD_VAR 0 2
54009: PPUSH
54010: CALL_OW 251
54014: ST_TO_ADDR
// if GetTaskList ( unit ) then
54015: LD_VAR 0 1
54019: PPUSH
54020: CALL_OW 437
54024: IFFALSE 54119
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54026: LD_STRING e
54028: PUSH
54029: LD_VAR 0 1
54033: PPUSH
54034: CALL_OW 437
54038: PUSH
54039: LD_INT 1
54041: ARRAY
54042: PUSH
54043: LD_INT 1
54045: ARRAY
54046: EQUAL
54047: PUSH
54048: LD_VAR 0 4
54052: PUSH
54053: LD_VAR 0 1
54057: PPUSH
54058: CALL_OW 437
54062: PUSH
54063: LD_INT 1
54065: ARRAY
54066: PUSH
54067: LD_INT 2
54069: ARRAY
54070: EQUAL
54071: AND
54072: PUSH
54073: LD_VAR 0 5
54077: PUSH
54078: LD_VAR 0 1
54082: PPUSH
54083: CALL_OW 437
54087: PUSH
54088: LD_INT 1
54090: ARRAY
54091: PUSH
54092: LD_INT 3
54094: ARRAY
54095: EQUAL
54096: AND
54097: IFFALSE 54109
// result := true else
54099: LD_ADDR_VAR 0 3
54103: PUSH
54104: LD_INT 1
54106: ST_TO_ADDR
54107: GO 54117
// result := false ;
54109: LD_ADDR_VAR 0 3
54113: PUSH
54114: LD_INT 0
54116: ST_TO_ADDR
// end else
54117: GO 54127
// result := false ;
54119: LD_ADDR_VAR 0 3
54123: PUSH
54124: LD_INT 0
54126: ST_TO_ADDR
// end ;
54127: LD_VAR 0 3
54131: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54132: LD_INT 0
54134: PPUSH
54135: PPUSH
54136: PPUSH
54137: PPUSH
// if not unit or not area then
54138: LD_VAR 0 1
54142: NOT
54143: PUSH
54144: LD_VAR 0 2
54148: NOT
54149: OR
54150: IFFALSE 54154
// exit ;
54152: GO 54318
// tmp := AreaToList ( area , i ) ;
54154: LD_ADDR_VAR 0 6
54158: PUSH
54159: LD_VAR 0 2
54163: PPUSH
54164: LD_VAR 0 5
54168: PPUSH
54169: CALL_OW 517
54173: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54174: LD_ADDR_VAR 0 5
54178: PUSH
54179: DOUBLE
54180: LD_INT 1
54182: DEC
54183: ST_TO_ADDR
54184: LD_VAR 0 6
54188: PUSH
54189: LD_INT 1
54191: ARRAY
54192: PUSH
54193: FOR_TO
54194: IFFALSE 54316
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54196: LD_ADDR_VAR 0 7
54200: PUSH
54201: LD_VAR 0 6
54205: PUSH
54206: LD_INT 1
54208: ARRAY
54209: PUSH
54210: LD_VAR 0 5
54214: ARRAY
54215: PUSH
54216: LD_VAR 0 6
54220: PUSH
54221: LD_INT 2
54223: ARRAY
54224: PUSH
54225: LD_VAR 0 5
54229: ARRAY
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
54235: LD_VAR 0 7
54239: PUSH
54240: LD_INT 1
54242: ARRAY
54243: PPUSH
54244: LD_VAR 0 7
54248: PUSH
54249: LD_INT 2
54251: ARRAY
54252: PPUSH
54253: CALL_OW 428
54257: PUSH
54258: LD_INT 0
54260: EQUAL
54261: IFFALSE 54314
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54263: LD_VAR 0 1
54267: PPUSH
54268: LD_VAR 0 7
54272: PUSH
54273: LD_INT 1
54275: ARRAY
54276: PPUSH
54277: LD_VAR 0 7
54281: PUSH
54282: LD_INT 2
54284: ARRAY
54285: PPUSH
54286: LD_VAR 0 3
54290: PPUSH
54291: CALL_OW 48
// result := IsPlaced ( unit ) ;
54295: LD_ADDR_VAR 0 4
54299: PUSH
54300: LD_VAR 0 1
54304: PPUSH
54305: CALL_OW 305
54309: ST_TO_ADDR
// exit ;
54310: POP
54311: POP
54312: GO 54318
// end ; end ;
54314: GO 54193
54316: POP
54317: POP
// end ;
54318: LD_VAR 0 4
54322: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54323: LD_INT 0
54325: PPUSH
54326: PPUSH
54327: PPUSH
// if not side or side > 8 then
54328: LD_VAR 0 1
54332: NOT
54333: PUSH
54334: LD_VAR 0 1
54338: PUSH
54339: LD_INT 8
54341: GREATER
54342: OR
54343: IFFALSE 54347
// exit ;
54345: GO 54534
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
54347: LD_ADDR_VAR 0 4
54351: PUSH
54352: LD_INT 22
54354: PUSH
54355: LD_VAR 0 1
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 21
54366: PUSH
54367: LD_INT 3
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PPUSH
54378: CALL_OW 69
54382: ST_TO_ADDR
// if not tmp then
54383: LD_VAR 0 4
54387: NOT
54388: IFFALSE 54392
// exit ;
54390: GO 54534
// enable_addtolog := true ;
54392: LD_ADDR_OWVAR 81
54396: PUSH
54397: LD_INT 1
54399: ST_TO_ADDR
// AddToLog ( [ ) ;
54400: LD_STRING [
54402: PPUSH
54403: CALL_OW 561
// for i in tmp do
54407: LD_ADDR_VAR 0 3
54411: PUSH
54412: LD_VAR 0 4
54416: PUSH
54417: FOR_IN
54418: IFFALSE 54525
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
54420: LD_STRING [
54422: PUSH
54423: LD_VAR 0 3
54427: PPUSH
54428: CALL_OW 266
54432: STR
54433: PUSH
54434: LD_STRING , 
54436: STR
54437: PUSH
54438: LD_VAR 0 3
54442: PPUSH
54443: CALL_OW 250
54447: STR
54448: PUSH
54449: LD_STRING , 
54451: STR
54452: PUSH
54453: LD_VAR 0 3
54457: PPUSH
54458: CALL_OW 251
54462: STR
54463: PUSH
54464: LD_STRING , 
54466: STR
54467: PUSH
54468: LD_VAR 0 3
54472: PPUSH
54473: CALL_OW 254
54477: STR
54478: PUSH
54479: LD_STRING , 
54481: STR
54482: PUSH
54483: LD_VAR 0 3
54487: PPUSH
54488: LD_INT 1
54490: PPUSH
54491: CALL_OW 268
54495: STR
54496: PUSH
54497: LD_STRING , 
54499: STR
54500: PUSH
54501: LD_VAR 0 3
54505: PPUSH
54506: LD_INT 2
54508: PPUSH
54509: CALL_OW 268
54513: STR
54514: PUSH
54515: LD_STRING ],
54517: STR
54518: PPUSH
54519: CALL_OW 561
// end ;
54523: GO 54417
54525: POP
54526: POP
// AddToLog ( ]; ) ;
54527: LD_STRING ];
54529: PPUSH
54530: CALL_OW 561
// end ;
54534: LD_VAR 0 2
54538: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54539: LD_INT 0
54541: PPUSH
54542: PPUSH
54543: PPUSH
54544: PPUSH
54545: PPUSH
// if not area or not rate or not max then
54546: LD_VAR 0 1
54550: NOT
54551: PUSH
54552: LD_VAR 0 2
54556: NOT
54557: OR
54558: PUSH
54559: LD_VAR 0 4
54563: NOT
54564: OR
54565: IFFALSE 54569
// exit ;
54567: GO 54761
// while 1 do
54569: LD_INT 1
54571: IFFALSE 54761
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54573: LD_ADDR_VAR 0 9
54577: PUSH
54578: LD_VAR 0 1
54582: PPUSH
54583: LD_INT 1
54585: PPUSH
54586: CALL_OW 287
54590: PUSH
54591: LD_INT 10
54593: MUL
54594: ST_TO_ADDR
// r := rate / 10 ;
54595: LD_ADDR_VAR 0 7
54599: PUSH
54600: LD_VAR 0 2
54604: PUSH
54605: LD_INT 10
54607: DIVREAL
54608: ST_TO_ADDR
// time := 1 1$00 ;
54609: LD_ADDR_VAR 0 8
54613: PUSH
54614: LD_INT 2100
54616: ST_TO_ADDR
// if amount < min then
54617: LD_VAR 0 9
54621: PUSH
54622: LD_VAR 0 3
54626: LESS
54627: IFFALSE 54645
// r := r * 2 else
54629: LD_ADDR_VAR 0 7
54633: PUSH
54634: LD_VAR 0 7
54638: PUSH
54639: LD_INT 2
54641: MUL
54642: ST_TO_ADDR
54643: GO 54671
// if amount > max then
54645: LD_VAR 0 9
54649: PUSH
54650: LD_VAR 0 4
54654: GREATER
54655: IFFALSE 54671
// r := r / 2 ;
54657: LD_ADDR_VAR 0 7
54661: PUSH
54662: LD_VAR 0 7
54666: PUSH
54667: LD_INT 2
54669: DIVREAL
54670: ST_TO_ADDR
// time := time / r ;
54671: LD_ADDR_VAR 0 8
54675: PUSH
54676: LD_VAR 0 8
54680: PUSH
54681: LD_VAR 0 7
54685: DIVREAL
54686: ST_TO_ADDR
// if time < 0 then
54687: LD_VAR 0 8
54691: PUSH
54692: LD_INT 0
54694: LESS
54695: IFFALSE 54712
// time := time * - 1 ;
54697: LD_ADDR_VAR 0 8
54701: PUSH
54702: LD_VAR 0 8
54706: PUSH
54707: LD_INT 1
54709: NEG
54710: MUL
54711: ST_TO_ADDR
// wait ( time ) ;
54712: LD_VAR 0 8
54716: PPUSH
54717: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
54721: LD_INT 35
54723: PPUSH
54724: LD_INT 875
54726: PPUSH
54727: CALL_OW 12
54731: PPUSH
54732: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54736: LD_INT 1
54738: PPUSH
54739: LD_INT 5
54741: PPUSH
54742: CALL_OW 12
54746: PPUSH
54747: LD_VAR 0 1
54751: PPUSH
54752: LD_INT 1
54754: PPUSH
54755: CALL_OW 55
// end ;
54759: GO 54569
// end ;
54761: LD_VAR 0 5
54765: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54766: LD_INT 0
54768: PPUSH
54769: PPUSH
54770: PPUSH
54771: PPUSH
54772: PPUSH
54773: PPUSH
54774: PPUSH
54775: PPUSH
// if not turrets or not factories then
54776: LD_VAR 0 1
54780: NOT
54781: PUSH
54782: LD_VAR 0 2
54786: NOT
54787: OR
54788: IFFALSE 54792
// exit ;
54790: GO 55099
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54792: LD_ADDR_VAR 0 10
54796: PUSH
54797: LD_INT 5
54799: PUSH
54800: LD_INT 6
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 2
54809: PUSH
54810: LD_INT 4
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 3
54819: PUSH
54820: LD_INT 5
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 24
54834: PUSH
54835: LD_INT 25
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 23
54844: PUSH
54845: LD_INT 27
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 42
54858: PUSH
54859: LD_INT 43
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 44
54868: PUSH
54869: LD_INT 46
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 45
54878: PUSH
54879: LD_INT 47
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: LIST
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: LIST
54895: ST_TO_ADDR
// result := [ ] ;
54896: LD_ADDR_VAR 0 3
54900: PUSH
54901: EMPTY
54902: ST_TO_ADDR
// for i in turrets do
54903: LD_ADDR_VAR 0 4
54907: PUSH
54908: LD_VAR 0 1
54912: PUSH
54913: FOR_IN
54914: IFFALSE 55097
// begin nat := GetNation ( i ) ;
54916: LD_ADDR_VAR 0 7
54920: PUSH
54921: LD_VAR 0 4
54925: PPUSH
54926: CALL_OW 248
54930: ST_TO_ADDR
// weapon := 0 ;
54931: LD_ADDR_VAR 0 8
54935: PUSH
54936: LD_INT 0
54938: ST_TO_ADDR
// if not nat then
54939: LD_VAR 0 7
54943: NOT
54944: IFFALSE 54948
// continue ;
54946: GO 54913
// for j in list [ nat ] do
54948: LD_ADDR_VAR 0 5
54952: PUSH
54953: LD_VAR 0 10
54957: PUSH
54958: LD_VAR 0 7
54962: ARRAY
54963: PUSH
54964: FOR_IN
54965: IFFALSE 55006
// if GetBWeapon ( i ) = j [ 1 ] then
54967: LD_VAR 0 4
54971: PPUSH
54972: CALL_OW 269
54976: PUSH
54977: LD_VAR 0 5
54981: PUSH
54982: LD_INT 1
54984: ARRAY
54985: EQUAL
54986: IFFALSE 55004
// begin weapon := j [ 2 ] ;
54988: LD_ADDR_VAR 0 8
54992: PUSH
54993: LD_VAR 0 5
54997: PUSH
54998: LD_INT 2
55000: ARRAY
55001: ST_TO_ADDR
// break ;
55002: GO 55006
// end ;
55004: GO 54964
55006: POP
55007: POP
// if not weapon then
55008: LD_VAR 0 8
55012: NOT
55013: IFFALSE 55017
// continue ;
55015: GO 54913
// for k in factories do
55017: LD_ADDR_VAR 0 6
55021: PUSH
55022: LD_VAR 0 2
55026: PUSH
55027: FOR_IN
55028: IFFALSE 55093
// begin weapons := AvailableWeaponList ( k ) ;
55030: LD_ADDR_VAR 0 9
55034: PUSH
55035: LD_VAR 0 6
55039: PPUSH
55040: CALL_OW 478
55044: ST_TO_ADDR
// if not weapons then
55045: LD_VAR 0 9
55049: NOT
55050: IFFALSE 55054
// continue ;
55052: GO 55027
// if weapon in weapons then
55054: LD_VAR 0 8
55058: PUSH
55059: LD_VAR 0 9
55063: IN
55064: IFFALSE 55091
// begin result := [ i , weapon ] ;
55066: LD_ADDR_VAR 0 3
55070: PUSH
55071: LD_VAR 0 4
55075: PUSH
55076: LD_VAR 0 8
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: ST_TO_ADDR
// exit ;
55085: POP
55086: POP
55087: POP
55088: POP
55089: GO 55099
// end ; end ;
55091: GO 55027
55093: POP
55094: POP
// end ;
55095: GO 54913
55097: POP
55098: POP
// end ;
55099: LD_VAR 0 3
55103: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55104: LD_INT 0
55106: PPUSH
// if not side or side > 8 then
55107: LD_VAR 0 3
55111: NOT
55112: PUSH
55113: LD_VAR 0 3
55117: PUSH
55118: LD_INT 8
55120: GREATER
55121: OR
55122: IFFALSE 55126
// exit ;
55124: GO 55185
// if not range then
55126: LD_VAR 0 4
55130: NOT
55131: IFFALSE 55142
// range := - 12 ;
55133: LD_ADDR_VAR 0 4
55137: PUSH
55138: LD_INT 12
55140: NEG
55141: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55142: LD_VAR 0 1
55146: PPUSH
55147: LD_VAR 0 2
55151: PPUSH
55152: LD_VAR 0 3
55156: PPUSH
55157: LD_VAR 0 4
55161: PPUSH
55162: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55166: LD_VAR 0 1
55170: PPUSH
55171: LD_VAR 0 2
55175: PPUSH
55176: LD_VAR 0 3
55180: PPUSH
55181: CALL_OW 331
// end ;
55185: LD_VAR 0 5
55189: RET
// export function Video ( mode ) ; begin
55190: LD_INT 0
55192: PPUSH
// ingame_video = mode ;
55193: LD_ADDR_OWVAR 52
55197: PUSH
55198: LD_VAR 0 1
55202: ST_TO_ADDR
// interface_hidden = mode ;
55203: LD_ADDR_OWVAR 54
55207: PUSH
55208: LD_VAR 0 1
55212: ST_TO_ADDR
// end ;
55213: LD_VAR 0 2
55217: RET
// export function Join ( array , element ) ; begin
55218: LD_INT 0
55220: PPUSH
// result := array ^ element ;
55221: LD_ADDR_VAR 0 3
55225: PUSH
55226: LD_VAR 0 1
55230: PUSH
55231: LD_VAR 0 2
55235: ADD
55236: ST_TO_ADDR
// end ;
55237: LD_VAR 0 3
55241: RET
// export function JoinUnion ( array , element ) ; begin
55242: LD_INT 0
55244: PPUSH
// result := array union element ;
55245: LD_ADDR_VAR 0 3
55249: PUSH
55250: LD_VAR 0 1
55254: PUSH
55255: LD_VAR 0 2
55259: UNION
55260: ST_TO_ADDR
// end ;
55261: LD_VAR 0 3
55265: RET
// export function GetBehemoths ( side ) ; begin
55266: LD_INT 0
55268: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
55269: LD_ADDR_VAR 0 2
55273: PUSH
55274: LD_INT 22
55276: PUSH
55277: LD_VAR 0 1
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 31
55288: PUSH
55289: LD_INT 25
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PPUSH
55300: CALL_OW 69
55304: ST_TO_ADDR
// end ;
55305: LD_VAR 0 2
55309: RET
// export function Shuffle ( array ) ; var i , index ; begin
55310: LD_INT 0
55312: PPUSH
55313: PPUSH
55314: PPUSH
// result := [ ] ;
55315: LD_ADDR_VAR 0 2
55319: PUSH
55320: EMPTY
55321: ST_TO_ADDR
// if not array then
55322: LD_VAR 0 1
55326: NOT
55327: IFFALSE 55331
// exit ;
55329: GO 55430
// Randomize ;
55331: CALL_OW 10
// for i = array downto 1 do
55335: LD_ADDR_VAR 0 3
55339: PUSH
55340: DOUBLE
55341: LD_VAR 0 1
55345: INC
55346: ST_TO_ADDR
55347: LD_INT 1
55349: PUSH
55350: FOR_DOWNTO
55351: IFFALSE 55428
// begin index := rand ( 1 , array ) ;
55353: LD_ADDR_VAR 0 4
55357: PUSH
55358: LD_INT 1
55360: PPUSH
55361: LD_VAR 0 1
55365: PPUSH
55366: CALL_OW 12
55370: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55371: LD_ADDR_VAR 0 2
55375: PUSH
55376: LD_VAR 0 2
55380: PPUSH
55381: LD_VAR 0 2
55385: PUSH
55386: LD_INT 1
55388: PLUS
55389: PPUSH
55390: LD_VAR 0 1
55394: PUSH
55395: LD_VAR 0 4
55399: ARRAY
55400: PPUSH
55401: CALL_OW 2
55405: ST_TO_ADDR
// array := Delete ( array , index ) ;
55406: LD_ADDR_VAR 0 1
55410: PUSH
55411: LD_VAR 0 1
55415: PPUSH
55416: LD_VAR 0 4
55420: PPUSH
55421: CALL_OW 3
55425: ST_TO_ADDR
// end ;
55426: GO 55350
55428: POP
55429: POP
// end ;
55430: LD_VAR 0 2
55434: RET
// export function GetBaseMaterials ( base ) ; begin
55435: LD_INT 0
55437: PPUSH
// result := [ 0 , 0 , 0 ] ;
55438: LD_ADDR_VAR 0 2
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: LD_INT 0
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: LIST
55456: ST_TO_ADDR
// if not base then
55457: LD_VAR 0 1
55461: NOT
55462: IFFALSE 55466
// exit ;
55464: GO 55515
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55466: LD_ADDR_VAR 0 2
55470: PUSH
55471: LD_VAR 0 1
55475: PPUSH
55476: LD_INT 1
55478: PPUSH
55479: CALL_OW 275
55483: PUSH
55484: LD_VAR 0 1
55488: PPUSH
55489: LD_INT 2
55491: PPUSH
55492: CALL_OW 275
55496: PUSH
55497: LD_VAR 0 1
55501: PPUSH
55502: LD_INT 3
55504: PPUSH
55505: CALL_OW 275
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: LIST
55514: ST_TO_ADDR
// end ;
55515: LD_VAR 0 2
55519: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55520: LD_INT 0
55522: PPUSH
55523: PPUSH
// result := array ;
55524: LD_ADDR_VAR 0 3
55528: PUSH
55529: LD_VAR 0 1
55533: ST_TO_ADDR
// if size > 0 then
55534: LD_VAR 0 2
55538: PUSH
55539: LD_INT 0
55541: GREATER
55542: IFFALSE 55588
// for i := array downto size do
55544: LD_ADDR_VAR 0 4
55548: PUSH
55549: DOUBLE
55550: LD_VAR 0 1
55554: INC
55555: ST_TO_ADDR
55556: LD_VAR 0 2
55560: PUSH
55561: FOR_DOWNTO
55562: IFFALSE 55586
// result := Delete ( result , result ) ;
55564: LD_ADDR_VAR 0 3
55568: PUSH
55569: LD_VAR 0 3
55573: PPUSH
55574: LD_VAR 0 3
55578: PPUSH
55579: CALL_OW 3
55583: ST_TO_ADDR
55584: GO 55561
55586: POP
55587: POP
// end ;
55588: LD_VAR 0 3
55592: RET
// export function ComExit ( unit ) ; var tmp ; begin
55593: LD_INT 0
55595: PPUSH
55596: PPUSH
// if not IsInUnit ( unit ) then
55597: LD_VAR 0 1
55601: PPUSH
55602: CALL_OW 310
55606: NOT
55607: IFFALSE 55611
// exit ;
55609: GO 55671
// tmp := IsInUnit ( unit ) ;
55611: LD_ADDR_VAR 0 3
55615: PUSH
55616: LD_VAR 0 1
55620: PPUSH
55621: CALL_OW 310
55625: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
55626: LD_VAR 0 3
55630: PPUSH
55631: CALL_OW 247
55635: PUSH
55636: LD_INT 2
55638: EQUAL
55639: IFFALSE 55652
// ComExitVehicle ( unit ) else
55641: LD_VAR 0 1
55645: PPUSH
55646: CALL_OW 121
55650: GO 55661
// ComExitBuilding ( unit ) ;
55652: LD_VAR 0 1
55656: PPUSH
55657: CALL_OW 122
// result := tmp ;
55661: LD_ADDR_VAR 0 2
55665: PUSH
55666: LD_VAR 0 3
55670: ST_TO_ADDR
// end ;
55671: LD_VAR 0 2
55675: RET
// export function ResetHc ; begin
55676: LD_INT 0
55678: PPUSH
// InitHc ;
55679: CALL_OW 19
// hc_importance := 0 ;
55683: LD_ADDR_OWVAR 32
55687: PUSH
55688: LD_INT 0
55690: ST_TO_ADDR
// end ; end_of_file
55691: LD_VAR 0 1
55695: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
55696: LD_INT 0
55698: PPUSH
// ru_radar := 98 ;
55699: LD_ADDR_EXP 29
55703: PUSH
55704: LD_INT 98
55706: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
55707: LD_ADDR_EXP 30
55711: PUSH
55712: LD_INT 89
55714: ST_TO_ADDR
// us_hack := 99 ;
55715: LD_ADDR_EXP 31
55719: PUSH
55720: LD_INT 99
55722: ST_TO_ADDR
// us_artillery := 97 ;
55723: LD_ADDR_EXP 32
55727: PUSH
55728: LD_INT 97
55730: ST_TO_ADDR
// ar_bio_bomb := 91 ;
55731: LD_ADDR_EXP 33
55735: PUSH
55736: LD_INT 91
55738: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
55739: LD_ADDR_EXP 34
55743: PUSH
55744: LD_INT 92
55746: ST_TO_ADDR
// tech_Artillery := 80 ;
55747: LD_ADDR_EXP 35
55751: PUSH
55752: LD_INT 80
55754: ST_TO_ADDR
// tech_RadMat := 81 ;
55755: LD_ADDR_EXP 36
55759: PUSH
55760: LD_INT 81
55762: ST_TO_ADDR
// tech_BasicTools := 82 ;
55763: LD_ADDR_EXP 37
55767: PUSH
55768: LD_INT 82
55770: ST_TO_ADDR
// tech_Cargo := 83 ;
55771: LD_ADDR_EXP 38
55775: PUSH
55776: LD_INT 83
55778: ST_TO_ADDR
// tech_Track := 84 ;
55779: LD_ADDR_EXP 39
55783: PUSH
55784: LD_INT 84
55786: ST_TO_ADDR
// tech_Crane := 85 ;
55787: LD_ADDR_EXP 40
55791: PUSH
55792: LD_INT 85
55794: ST_TO_ADDR
// tech_Bulldozer := 86 ;
55795: LD_ADDR_EXP 41
55799: PUSH
55800: LD_INT 86
55802: ST_TO_ADDR
// tech_Hovercraft := 87 ;
55803: LD_ADDR_EXP 42
55807: PUSH
55808: LD_INT 87
55810: ST_TO_ADDR
// end ;
55811: LD_VAR 0 1
55815: RET
// every 1 do
55816: GO 55818
55818: DISABLE
// InitGlobalVariables ; end_of_file
55819: CALL 55696 0 0
55823: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
55824: LD_INT 0
55826: PPUSH
55827: PPUSH
// skirmish := false ;
55828: LD_ADDR_EXP 43
55832: PUSH
55833: LD_INT 0
55835: ST_TO_ADDR
// debug_mc := false ;
55836: LD_ADDR_EXP 44
55840: PUSH
55841: LD_INT 0
55843: ST_TO_ADDR
// mc_bases := [ ] ;
55844: LD_ADDR_EXP 45
55848: PUSH
55849: EMPTY
55850: ST_TO_ADDR
// mc_sides := [ ] ;
55851: LD_ADDR_EXP 71
55855: PUSH
55856: EMPTY
55857: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
55858: LD_ADDR_EXP 46
55862: PUSH
55863: EMPTY
55864: ST_TO_ADDR
// mc_building_repairs := [ ] ;
55865: LD_ADDR_EXP 47
55869: PUSH
55870: EMPTY
55871: ST_TO_ADDR
// mc_need_heal := [ ] ;
55872: LD_ADDR_EXP 48
55876: PUSH
55877: EMPTY
55878: ST_TO_ADDR
// mc_healers := [ ] ;
55879: LD_ADDR_EXP 49
55883: PUSH
55884: EMPTY
55885: ST_TO_ADDR
// mc_build_list := [ ] ;
55886: LD_ADDR_EXP 50
55890: PUSH
55891: EMPTY
55892: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
55893: LD_ADDR_EXP 77
55897: PUSH
55898: EMPTY
55899: ST_TO_ADDR
// mc_builders := [ ] ;
55900: LD_ADDR_EXP 51
55904: PUSH
55905: EMPTY
55906: ST_TO_ADDR
// mc_construct_list := [ ] ;
55907: LD_ADDR_EXP 52
55911: PUSH
55912: EMPTY
55913: ST_TO_ADDR
// mc_turret_list := [ ] ;
55914: LD_ADDR_EXP 53
55918: PUSH
55919: EMPTY
55920: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
55921: LD_ADDR_EXP 54
55925: PUSH
55926: EMPTY
55927: ST_TO_ADDR
// mc_miners := [ ] ;
55928: LD_ADDR_EXP 59
55932: PUSH
55933: EMPTY
55934: ST_TO_ADDR
// mc_mines := [ ] ;
55935: LD_ADDR_EXP 58
55939: PUSH
55940: EMPTY
55941: ST_TO_ADDR
// mc_minefields := [ ] ;
55942: LD_ADDR_EXP 60
55946: PUSH
55947: EMPTY
55948: ST_TO_ADDR
// mc_crates := [ ] ;
55949: LD_ADDR_EXP 61
55953: PUSH
55954: EMPTY
55955: ST_TO_ADDR
// mc_crates_collector := [ ] ;
55956: LD_ADDR_EXP 62
55960: PUSH
55961: EMPTY
55962: ST_TO_ADDR
// mc_crates_area := [ ] ;
55963: LD_ADDR_EXP 63
55967: PUSH
55968: EMPTY
55969: ST_TO_ADDR
// mc_vehicles := [ ] ;
55970: LD_ADDR_EXP 64
55974: PUSH
55975: EMPTY
55976: ST_TO_ADDR
// mc_attack := [ ] ;
55977: LD_ADDR_EXP 65
55981: PUSH
55982: EMPTY
55983: ST_TO_ADDR
// mc_produce := [ ] ;
55984: LD_ADDR_EXP 66
55988: PUSH
55989: EMPTY
55990: ST_TO_ADDR
// mc_defender := [ ] ;
55991: LD_ADDR_EXP 67
55995: PUSH
55996: EMPTY
55997: ST_TO_ADDR
// mc_parking := [ ] ;
55998: LD_ADDR_EXP 69
56002: PUSH
56003: EMPTY
56004: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
56005: LD_ADDR_EXP 55
56009: PUSH
56010: EMPTY
56011: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
56012: LD_ADDR_EXP 57
56016: PUSH
56017: EMPTY
56018: ST_TO_ADDR
// mc_scan := [ ] ;
56019: LD_ADDR_EXP 68
56023: PUSH
56024: EMPTY
56025: ST_TO_ADDR
// mc_scan_area := [ ] ;
56026: LD_ADDR_EXP 70
56030: PUSH
56031: EMPTY
56032: ST_TO_ADDR
// mc_tech := [ ] ;
56033: LD_ADDR_EXP 72
56037: PUSH
56038: EMPTY
56039: ST_TO_ADDR
// mc_class := [ ] ;
56040: LD_ADDR_EXP 86
56044: PUSH
56045: EMPTY
56046: ST_TO_ADDR
// mc_class_case_use := [ ] ;
56047: LD_ADDR_EXP 87
56051: PUSH
56052: EMPTY
56053: ST_TO_ADDR
// end ;
56054: LD_VAR 0 1
56058: RET
// export function MC_Kill ( base ) ; begin
56059: LD_INT 0
56061: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
56062: LD_ADDR_EXP 45
56066: PUSH
56067: LD_EXP 45
56071: PPUSH
56072: LD_VAR 0 1
56076: PPUSH
56077: EMPTY
56078: PPUSH
56079: CALL_OW 1
56083: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
56084: LD_ADDR_EXP 46
56088: PUSH
56089: LD_EXP 46
56093: PPUSH
56094: LD_VAR 0 1
56098: PPUSH
56099: EMPTY
56100: PPUSH
56101: CALL_OW 1
56105: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
56106: LD_ADDR_EXP 47
56110: PUSH
56111: LD_EXP 47
56115: PPUSH
56116: LD_VAR 0 1
56120: PPUSH
56121: EMPTY
56122: PPUSH
56123: CALL_OW 1
56127: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
56128: LD_ADDR_EXP 48
56132: PUSH
56133: LD_EXP 48
56137: PPUSH
56138: LD_VAR 0 1
56142: PPUSH
56143: EMPTY
56144: PPUSH
56145: CALL_OW 1
56149: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
56150: LD_ADDR_EXP 49
56154: PUSH
56155: LD_EXP 49
56159: PPUSH
56160: LD_VAR 0 1
56164: PPUSH
56165: EMPTY
56166: PPUSH
56167: CALL_OW 1
56171: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
56172: LD_ADDR_EXP 50
56176: PUSH
56177: LD_EXP 50
56181: PPUSH
56182: LD_VAR 0 1
56186: PPUSH
56187: EMPTY
56188: PPUSH
56189: CALL_OW 1
56193: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
56194: LD_ADDR_EXP 51
56198: PUSH
56199: LD_EXP 51
56203: PPUSH
56204: LD_VAR 0 1
56208: PPUSH
56209: EMPTY
56210: PPUSH
56211: CALL_OW 1
56215: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
56216: LD_ADDR_EXP 52
56220: PUSH
56221: LD_EXP 52
56225: PPUSH
56226: LD_VAR 0 1
56230: PPUSH
56231: EMPTY
56232: PPUSH
56233: CALL_OW 1
56237: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
56238: LD_ADDR_EXP 53
56242: PUSH
56243: LD_EXP 53
56247: PPUSH
56248: LD_VAR 0 1
56252: PPUSH
56253: EMPTY
56254: PPUSH
56255: CALL_OW 1
56259: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
56260: LD_ADDR_EXP 54
56264: PUSH
56265: LD_EXP 54
56269: PPUSH
56270: LD_VAR 0 1
56274: PPUSH
56275: EMPTY
56276: PPUSH
56277: CALL_OW 1
56281: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
56282: LD_ADDR_EXP 55
56286: PUSH
56287: LD_EXP 55
56291: PPUSH
56292: LD_VAR 0 1
56296: PPUSH
56297: EMPTY
56298: PPUSH
56299: CALL_OW 1
56303: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
56304: LD_ADDR_EXP 56
56308: PUSH
56309: LD_EXP 56
56313: PPUSH
56314: LD_VAR 0 1
56318: PPUSH
56319: LD_INT 0
56321: PPUSH
56322: CALL_OW 1
56326: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
56327: LD_ADDR_EXP 57
56331: PUSH
56332: LD_EXP 57
56336: PPUSH
56337: LD_VAR 0 1
56341: PPUSH
56342: EMPTY
56343: PPUSH
56344: CALL_OW 1
56348: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
56349: LD_ADDR_EXP 58
56353: PUSH
56354: LD_EXP 58
56358: PPUSH
56359: LD_VAR 0 1
56363: PPUSH
56364: EMPTY
56365: PPUSH
56366: CALL_OW 1
56370: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
56371: LD_ADDR_EXP 59
56375: PUSH
56376: LD_EXP 59
56380: PPUSH
56381: LD_VAR 0 1
56385: PPUSH
56386: EMPTY
56387: PPUSH
56388: CALL_OW 1
56392: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
56393: LD_ADDR_EXP 60
56397: PUSH
56398: LD_EXP 60
56402: PPUSH
56403: LD_VAR 0 1
56407: PPUSH
56408: EMPTY
56409: PPUSH
56410: CALL_OW 1
56414: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
56415: LD_ADDR_EXP 61
56419: PUSH
56420: LD_EXP 61
56424: PPUSH
56425: LD_VAR 0 1
56429: PPUSH
56430: EMPTY
56431: PPUSH
56432: CALL_OW 1
56436: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
56437: LD_ADDR_EXP 62
56441: PUSH
56442: LD_EXP 62
56446: PPUSH
56447: LD_VAR 0 1
56451: PPUSH
56452: EMPTY
56453: PPUSH
56454: CALL_OW 1
56458: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
56459: LD_ADDR_EXP 63
56463: PUSH
56464: LD_EXP 63
56468: PPUSH
56469: LD_VAR 0 1
56473: PPUSH
56474: EMPTY
56475: PPUSH
56476: CALL_OW 1
56480: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
56481: LD_ADDR_EXP 64
56485: PUSH
56486: LD_EXP 64
56490: PPUSH
56491: LD_VAR 0 1
56495: PPUSH
56496: EMPTY
56497: PPUSH
56498: CALL_OW 1
56502: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
56503: LD_ADDR_EXP 65
56507: PUSH
56508: LD_EXP 65
56512: PPUSH
56513: LD_VAR 0 1
56517: PPUSH
56518: EMPTY
56519: PPUSH
56520: CALL_OW 1
56524: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
56525: LD_ADDR_EXP 66
56529: PUSH
56530: LD_EXP 66
56534: PPUSH
56535: LD_VAR 0 1
56539: PPUSH
56540: EMPTY
56541: PPUSH
56542: CALL_OW 1
56546: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
56547: LD_ADDR_EXP 67
56551: PUSH
56552: LD_EXP 67
56556: PPUSH
56557: LD_VAR 0 1
56561: PPUSH
56562: EMPTY
56563: PPUSH
56564: CALL_OW 1
56568: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
56569: LD_ADDR_EXP 68
56573: PUSH
56574: LD_EXP 68
56578: PPUSH
56579: LD_VAR 0 1
56583: PPUSH
56584: EMPTY
56585: PPUSH
56586: CALL_OW 1
56590: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
56591: LD_ADDR_EXP 69
56595: PUSH
56596: LD_EXP 69
56600: PPUSH
56601: LD_VAR 0 1
56605: PPUSH
56606: EMPTY
56607: PPUSH
56608: CALL_OW 1
56612: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
56613: LD_ADDR_EXP 70
56617: PUSH
56618: LD_EXP 70
56622: PPUSH
56623: LD_VAR 0 1
56627: PPUSH
56628: EMPTY
56629: PPUSH
56630: CALL_OW 1
56634: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
56635: LD_ADDR_EXP 72
56639: PUSH
56640: LD_EXP 72
56644: PPUSH
56645: LD_VAR 0 1
56649: PPUSH
56650: EMPTY
56651: PPUSH
56652: CALL_OW 1
56656: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
56657: LD_ADDR_EXP 74
56661: PUSH
56662: LD_EXP 74
56666: PPUSH
56667: LD_VAR 0 1
56671: PPUSH
56672: EMPTY
56673: PPUSH
56674: CALL_OW 1
56678: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
56679: LD_ADDR_EXP 75
56683: PUSH
56684: LD_EXP 75
56688: PPUSH
56689: LD_VAR 0 1
56693: PPUSH
56694: EMPTY
56695: PPUSH
56696: CALL_OW 1
56700: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
56701: LD_ADDR_EXP 76
56705: PUSH
56706: LD_EXP 76
56710: PPUSH
56711: LD_VAR 0 1
56715: PPUSH
56716: EMPTY
56717: PPUSH
56718: CALL_OW 1
56722: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
56723: LD_ADDR_EXP 77
56727: PUSH
56728: LD_EXP 77
56732: PPUSH
56733: LD_VAR 0 1
56737: PPUSH
56738: EMPTY
56739: PPUSH
56740: CALL_OW 1
56744: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
56745: LD_ADDR_EXP 78
56749: PUSH
56750: LD_EXP 78
56754: PPUSH
56755: LD_VAR 0 1
56759: PPUSH
56760: EMPTY
56761: PPUSH
56762: CALL_OW 1
56766: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
56767: LD_ADDR_EXP 79
56771: PUSH
56772: LD_EXP 79
56776: PPUSH
56777: LD_VAR 0 1
56781: PPUSH
56782: EMPTY
56783: PPUSH
56784: CALL_OW 1
56788: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
56789: LD_ADDR_EXP 80
56793: PUSH
56794: LD_EXP 80
56798: PPUSH
56799: LD_VAR 0 1
56803: PPUSH
56804: EMPTY
56805: PPUSH
56806: CALL_OW 1
56810: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
56811: LD_ADDR_EXP 81
56815: PUSH
56816: LD_EXP 81
56820: PPUSH
56821: LD_VAR 0 1
56825: PPUSH
56826: EMPTY
56827: PPUSH
56828: CALL_OW 1
56832: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
56833: LD_ADDR_EXP 82
56837: PUSH
56838: LD_EXP 82
56842: PPUSH
56843: LD_VAR 0 1
56847: PPUSH
56848: EMPTY
56849: PPUSH
56850: CALL_OW 1
56854: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
56855: LD_ADDR_EXP 83
56859: PUSH
56860: LD_EXP 83
56864: PPUSH
56865: LD_VAR 0 1
56869: PPUSH
56870: EMPTY
56871: PPUSH
56872: CALL_OW 1
56876: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
56877: LD_ADDR_EXP 84
56881: PUSH
56882: LD_EXP 84
56886: PPUSH
56887: LD_VAR 0 1
56891: PPUSH
56892: EMPTY
56893: PPUSH
56894: CALL_OW 1
56898: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
56899: LD_ADDR_EXP 85
56903: PUSH
56904: LD_EXP 85
56908: PPUSH
56909: LD_VAR 0 1
56913: PPUSH
56914: EMPTY
56915: PPUSH
56916: CALL_OW 1
56920: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
56921: LD_ADDR_EXP 86
56925: PUSH
56926: LD_EXP 86
56930: PPUSH
56931: LD_VAR 0 1
56935: PPUSH
56936: EMPTY
56937: PPUSH
56938: CALL_OW 1
56942: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
56943: LD_ADDR_EXP 87
56947: PUSH
56948: LD_EXP 87
56952: PPUSH
56953: LD_VAR 0 1
56957: PPUSH
56958: LD_INT 0
56960: PPUSH
56961: CALL_OW 1
56965: ST_TO_ADDR
// end ;
56966: LD_VAR 0 2
56970: RET
// export function MC_Add ( side , units ) ; var base ; begin
56971: LD_INT 0
56973: PPUSH
56974: PPUSH
// base := mc_bases + 1 ;
56975: LD_ADDR_VAR 0 4
56979: PUSH
56980: LD_EXP 45
56984: PUSH
56985: LD_INT 1
56987: PLUS
56988: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
56989: LD_ADDR_EXP 71
56993: PUSH
56994: LD_EXP 71
56998: PPUSH
56999: LD_VAR 0 4
57003: PPUSH
57004: LD_VAR 0 1
57008: PPUSH
57009: CALL_OW 1
57013: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
57014: LD_ADDR_EXP 45
57018: PUSH
57019: LD_EXP 45
57023: PPUSH
57024: LD_VAR 0 4
57028: PPUSH
57029: LD_VAR 0 2
57033: PPUSH
57034: CALL_OW 1
57038: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
57039: LD_ADDR_EXP 46
57043: PUSH
57044: LD_EXP 46
57048: PPUSH
57049: LD_VAR 0 4
57053: PPUSH
57054: EMPTY
57055: PPUSH
57056: CALL_OW 1
57060: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
57061: LD_ADDR_EXP 47
57065: PUSH
57066: LD_EXP 47
57070: PPUSH
57071: LD_VAR 0 4
57075: PPUSH
57076: EMPTY
57077: PPUSH
57078: CALL_OW 1
57082: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
57083: LD_ADDR_EXP 48
57087: PUSH
57088: LD_EXP 48
57092: PPUSH
57093: LD_VAR 0 4
57097: PPUSH
57098: EMPTY
57099: PPUSH
57100: CALL_OW 1
57104: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
57105: LD_ADDR_EXP 49
57109: PUSH
57110: LD_EXP 49
57114: PPUSH
57115: LD_VAR 0 4
57119: PPUSH
57120: EMPTY
57121: PPUSH
57122: CALL_OW 1
57126: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
57127: LD_ADDR_EXP 50
57131: PUSH
57132: LD_EXP 50
57136: PPUSH
57137: LD_VAR 0 4
57141: PPUSH
57142: EMPTY
57143: PPUSH
57144: CALL_OW 1
57148: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
57149: LD_ADDR_EXP 51
57153: PUSH
57154: LD_EXP 51
57158: PPUSH
57159: LD_VAR 0 4
57163: PPUSH
57164: EMPTY
57165: PPUSH
57166: CALL_OW 1
57170: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
57171: LD_ADDR_EXP 52
57175: PUSH
57176: LD_EXP 52
57180: PPUSH
57181: LD_VAR 0 4
57185: PPUSH
57186: EMPTY
57187: PPUSH
57188: CALL_OW 1
57192: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
57193: LD_ADDR_EXP 53
57197: PUSH
57198: LD_EXP 53
57202: PPUSH
57203: LD_VAR 0 4
57207: PPUSH
57208: EMPTY
57209: PPUSH
57210: CALL_OW 1
57214: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
57215: LD_ADDR_EXP 54
57219: PUSH
57220: LD_EXP 54
57224: PPUSH
57225: LD_VAR 0 4
57229: PPUSH
57230: EMPTY
57231: PPUSH
57232: CALL_OW 1
57236: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
57237: LD_ADDR_EXP 55
57241: PUSH
57242: LD_EXP 55
57246: PPUSH
57247: LD_VAR 0 4
57251: PPUSH
57252: EMPTY
57253: PPUSH
57254: CALL_OW 1
57258: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
57259: LD_ADDR_EXP 56
57263: PUSH
57264: LD_EXP 56
57268: PPUSH
57269: LD_VAR 0 4
57273: PPUSH
57274: LD_INT 0
57276: PPUSH
57277: CALL_OW 1
57281: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
57282: LD_ADDR_EXP 57
57286: PUSH
57287: LD_EXP 57
57291: PPUSH
57292: LD_VAR 0 4
57296: PPUSH
57297: EMPTY
57298: PPUSH
57299: CALL_OW 1
57303: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
57304: LD_ADDR_EXP 58
57308: PUSH
57309: LD_EXP 58
57313: PPUSH
57314: LD_VAR 0 4
57318: PPUSH
57319: EMPTY
57320: PPUSH
57321: CALL_OW 1
57325: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
57326: LD_ADDR_EXP 59
57330: PUSH
57331: LD_EXP 59
57335: PPUSH
57336: LD_VAR 0 4
57340: PPUSH
57341: EMPTY
57342: PPUSH
57343: CALL_OW 1
57347: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
57348: LD_ADDR_EXP 60
57352: PUSH
57353: LD_EXP 60
57357: PPUSH
57358: LD_VAR 0 4
57362: PPUSH
57363: EMPTY
57364: PPUSH
57365: CALL_OW 1
57369: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
57370: LD_ADDR_EXP 61
57374: PUSH
57375: LD_EXP 61
57379: PPUSH
57380: LD_VAR 0 4
57384: PPUSH
57385: EMPTY
57386: PPUSH
57387: CALL_OW 1
57391: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
57392: LD_ADDR_EXP 62
57396: PUSH
57397: LD_EXP 62
57401: PPUSH
57402: LD_VAR 0 4
57406: PPUSH
57407: EMPTY
57408: PPUSH
57409: CALL_OW 1
57413: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
57414: LD_ADDR_EXP 63
57418: PUSH
57419: LD_EXP 63
57423: PPUSH
57424: LD_VAR 0 4
57428: PPUSH
57429: EMPTY
57430: PPUSH
57431: CALL_OW 1
57435: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
57436: LD_ADDR_EXP 64
57440: PUSH
57441: LD_EXP 64
57445: PPUSH
57446: LD_VAR 0 4
57450: PPUSH
57451: EMPTY
57452: PPUSH
57453: CALL_OW 1
57457: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
57458: LD_ADDR_EXP 65
57462: PUSH
57463: LD_EXP 65
57467: PPUSH
57468: LD_VAR 0 4
57472: PPUSH
57473: EMPTY
57474: PPUSH
57475: CALL_OW 1
57479: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
57480: LD_ADDR_EXP 66
57484: PUSH
57485: LD_EXP 66
57489: PPUSH
57490: LD_VAR 0 4
57494: PPUSH
57495: EMPTY
57496: PPUSH
57497: CALL_OW 1
57501: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
57502: LD_ADDR_EXP 67
57506: PUSH
57507: LD_EXP 67
57511: PPUSH
57512: LD_VAR 0 4
57516: PPUSH
57517: EMPTY
57518: PPUSH
57519: CALL_OW 1
57523: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
57524: LD_ADDR_EXP 68
57528: PUSH
57529: LD_EXP 68
57533: PPUSH
57534: LD_VAR 0 4
57538: PPUSH
57539: EMPTY
57540: PPUSH
57541: CALL_OW 1
57545: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
57546: LD_ADDR_EXP 69
57550: PUSH
57551: LD_EXP 69
57555: PPUSH
57556: LD_VAR 0 4
57560: PPUSH
57561: EMPTY
57562: PPUSH
57563: CALL_OW 1
57567: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
57568: LD_ADDR_EXP 70
57572: PUSH
57573: LD_EXP 70
57577: PPUSH
57578: LD_VAR 0 4
57582: PPUSH
57583: EMPTY
57584: PPUSH
57585: CALL_OW 1
57589: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
57590: LD_ADDR_EXP 72
57594: PUSH
57595: LD_EXP 72
57599: PPUSH
57600: LD_VAR 0 4
57604: PPUSH
57605: EMPTY
57606: PPUSH
57607: CALL_OW 1
57611: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
57612: LD_ADDR_EXP 74
57616: PUSH
57617: LD_EXP 74
57621: PPUSH
57622: LD_VAR 0 4
57626: PPUSH
57627: EMPTY
57628: PPUSH
57629: CALL_OW 1
57633: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
57634: LD_ADDR_EXP 75
57638: PUSH
57639: LD_EXP 75
57643: PPUSH
57644: LD_VAR 0 4
57648: PPUSH
57649: EMPTY
57650: PPUSH
57651: CALL_OW 1
57655: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
57656: LD_ADDR_EXP 76
57660: PUSH
57661: LD_EXP 76
57665: PPUSH
57666: LD_VAR 0 4
57670: PPUSH
57671: EMPTY
57672: PPUSH
57673: CALL_OW 1
57677: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
57678: LD_ADDR_EXP 77
57682: PUSH
57683: LD_EXP 77
57687: PPUSH
57688: LD_VAR 0 4
57692: PPUSH
57693: EMPTY
57694: PPUSH
57695: CALL_OW 1
57699: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
57700: LD_ADDR_EXP 78
57704: PUSH
57705: LD_EXP 78
57709: PPUSH
57710: LD_VAR 0 4
57714: PPUSH
57715: EMPTY
57716: PPUSH
57717: CALL_OW 1
57721: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
57722: LD_ADDR_EXP 79
57726: PUSH
57727: LD_EXP 79
57731: PPUSH
57732: LD_VAR 0 4
57736: PPUSH
57737: EMPTY
57738: PPUSH
57739: CALL_OW 1
57743: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
57744: LD_ADDR_EXP 80
57748: PUSH
57749: LD_EXP 80
57753: PPUSH
57754: LD_VAR 0 4
57758: PPUSH
57759: EMPTY
57760: PPUSH
57761: CALL_OW 1
57765: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
57766: LD_ADDR_EXP 81
57770: PUSH
57771: LD_EXP 81
57775: PPUSH
57776: LD_VAR 0 4
57780: PPUSH
57781: EMPTY
57782: PPUSH
57783: CALL_OW 1
57787: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
57788: LD_ADDR_EXP 82
57792: PUSH
57793: LD_EXP 82
57797: PPUSH
57798: LD_VAR 0 4
57802: PPUSH
57803: EMPTY
57804: PPUSH
57805: CALL_OW 1
57809: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
57810: LD_ADDR_EXP 83
57814: PUSH
57815: LD_EXP 83
57819: PPUSH
57820: LD_VAR 0 4
57824: PPUSH
57825: EMPTY
57826: PPUSH
57827: CALL_OW 1
57831: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
57832: LD_ADDR_EXP 84
57836: PUSH
57837: LD_EXP 84
57841: PPUSH
57842: LD_VAR 0 4
57846: PPUSH
57847: EMPTY
57848: PPUSH
57849: CALL_OW 1
57853: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
57854: LD_ADDR_EXP 85
57858: PUSH
57859: LD_EXP 85
57863: PPUSH
57864: LD_VAR 0 4
57868: PPUSH
57869: EMPTY
57870: PPUSH
57871: CALL_OW 1
57875: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
57876: LD_ADDR_EXP 86
57880: PUSH
57881: LD_EXP 86
57885: PPUSH
57886: LD_VAR 0 4
57890: PPUSH
57891: EMPTY
57892: PPUSH
57893: CALL_OW 1
57897: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
57898: LD_ADDR_EXP 87
57902: PUSH
57903: LD_EXP 87
57907: PPUSH
57908: LD_VAR 0 4
57912: PPUSH
57913: LD_INT 0
57915: PPUSH
57916: CALL_OW 1
57920: ST_TO_ADDR
// result := base ;
57921: LD_ADDR_VAR 0 3
57925: PUSH
57926: LD_VAR 0 4
57930: ST_TO_ADDR
// end ;
57931: LD_VAR 0 3
57935: RET
// export function MC_Start ( ) ; var i ; begin
57936: LD_INT 0
57938: PPUSH
57939: PPUSH
// for i = 1 to mc_bases do
57940: LD_ADDR_VAR 0 2
57944: PUSH
57945: DOUBLE
57946: LD_INT 1
57948: DEC
57949: ST_TO_ADDR
57950: LD_EXP 45
57954: PUSH
57955: FOR_TO
57956: IFFALSE 59033
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
57958: LD_ADDR_EXP 45
57962: PUSH
57963: LD_EXP 45
57967: PPUSH
57968: LD_VAR 0 2
57972: PPUSH
57973: LD_EXP 45
57977: PUSH
57978: LD_VAR 0 2
57982: ARRAY
57983: PUSH
57984: LD_INT 0
57986: DIFF
57987: PPUSH
57988: CALL_OW 1
57992: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
57993: LD_ADDR_EXP 46
57997: PUSH
57998: LD_EXP 46
58002: PPUSH
58003: LD_VAR 0 2
58007: PPUSH
58008: EMPTY
58009: PPUSH
58010: CALL_OW 1
58014: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
58015: LD_ADDR_EXP 47
58019: PUSH
58020: LD_EXP 47
58024: PPUSH
58025: LD_VAR 0 2
58029: PPUSH
58030: EMPTY
58031: PPUSH
58032: CALL_OW 1
58036: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
58037: LD_ADDR_EXP 48
58041: PUSH
58042: LD_EXP 48
58046: PPUSH
58047: LD_VAR 0 2
58051: PPUSH
58052: EMPTY
58053: PPUSH
58054: CALL_OW 1
58058: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
58059: LD_ADDR_EXP 49
58063: PUSH
58064: LD_EXP 49
58068: PPUSH
58069: LD_VAR 0 2
58073: PPUSH
58074: EMPTY
58075: PUSH
58076: EMPTY
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PPUSH
58082: CALL_OW 1
58086: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
58087: LD_ADDR_EXP 50
58091: PUSH
58092: LD_EXP 50
58096: PPUSH
58097: LD_VAR 0 2
58101: PPUSH
58102: EMPTY
58103: PPUSH
58104: CALL_OW 1
58108: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
58109: LD_ADDR_EXP 77
58113: PUSH
58114: LD_EXP 77
58118: PPUSH
58119: LD_VAR 0 2
58123: PPUSH
58124: EMPTY
58125: PPUSH
58126: CALL_OW 1
58130: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
58131: LD_ADDR_EXP 51
58135: PUSH
58136: LD_EXP 51
58140: PPUSH
58141: LD_VAR 0 2
58145: PPUSH
58146: EMPTY
58147: PPUSH
58148: CALL_OW 1
58152: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
58153: LD_ADDR_EXP 52
58157: PUSH
58158: LD_EXP 52
58162: PPUSH
58163: LD_VAR 0 2
58167: PPUSH
58168: EMPTY
58169: PPUSH
58170: CALL_OW 1
58174: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
58175: LD_ADDR_EXP 53
58179: PUSH
58180: LD_EXP 53
58184: PPUSH
58185: LD_VAR 0 2
58189: PPUSH
58190: LD_EXP 45
58194: PUSH
58195: LD_VAR 0 2
58199: ARRAY
58200: PPUSH
58201: LD_INT 2
58203: PUSH
58204: LD_INT 30
58206: PUSH
58207: LD_INT 32
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 30
58216: PUSH
58217: LD_INT 33
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: LIST
58228: PPUSH
58229: CALL_OW 72
58233: PPUSH
58234: CALL_OW 1
58238: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
58239: LD_ADDR_EXP 54
58243: PUSH
58244: LD_EXP 54
58248: PPUSH
58249: LD_VAR 0 2
58253: PPUSH
58254: LD_EXP 45
58258: PUSH
58259: LD_VAR 0 2
58263: ARRAY
58264: PPUSH
58265: LD_INT 2
58267: PUSH
58268: LD_INT 30
58270: PUSH
58271: LD_INT 32
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 30
58280: PUSH
58281: LD_INT 31
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 58
58295: PUSH
58296: EMPTY
58297: LIST
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PPUSH
58303: CALL_OW 72
58307: PPUSH
58308: CALL_OW 1
58312: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
58313: LD_ADDR_EXP 55
58317: PUSH
58318: LD_EXP 55
58322: PPUSH
58323: LD_VAR 0 2
58327: PPUSH
58328: EMPTY
58329: PPUSH
58330: CALL_OW 1
58334: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
58335: LD_ADDR_EXP 59
58339: PUSH
58340: LD_EXP 59
58344: PPUSH
58345: LD_VAR 0 2
58349: PPUSH
58350: EMPTY
58351: PPUSH
58352: CALL_OW 1
58356: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
58357: LD_ADDR_EXP 58
58361: PUSH
58362: LD_EXP 58
58366: PPUSH
58367: LD_VAR 0 2
58371: PPUSH
58372: EMPTY
58373: PPUSH
58374: CALL_OW 1
58378: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
58379: LD_ADDR_EXP 60
58383: PUSH
58384: LD_EXP 60
58388: PPUSH
58389: LD_VAR 0 2
58393: PPUSH
58394: EMPTY
58395: PPUSH
58396: CALL_OW 1
58400: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
58401: LD_ADDR_EXP 61
58405: PUSH
58406: LD_EXP 61
58410: PPUSH
58411: LD_VAR 0 2
58415: PPUSH
58416: EMPTY
58417: PPUSH
58418: CALL_OW 1
58422: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
58423: LD_ADDR_EXP 62
58427: PUSH
58428: LD_EXP 62
58432: PPUSH
58433: LD_VAR 0 2
58437: PPUSH
58438: EMPTY
58439: PPUSH
58440: CALL_OW 1
58444: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
58445: LD_ADDR_EXP 63
58449: PUSH
58450: LD_EXP 63
58454: PPUSH
58455: LD_VAR 0 2
58459: PPUSH
58460: EMPTY
58461: PPUSH
58462: CALL_OW 1
58466: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
58467: LD_ADDR_EXP 64
58471: PUSH
58472: LD_EXP 64
58476: PPUSH
58477: LD_VAR 0 2
58481: PPUSH
58482: EMPTY
58483: PPUSH
58484: CALL_OW 1
58488: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
58489: LD_ADDR_EXP 65
58493: PUSH
58494: LD_EXP 65
58498: PPUSH
58499: LD_VAR 0 2
58503: PPUSH
58504: EMPTY
58505: PPUSH
58506: CALL_OW 1
58510: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
58511: LD_ADDR_EXP 66
58515: PUSH
58516: LD_EXP 66
58520: PPUSH
58521: LD_VAR 0 2
58525: PPUSH
58526: EMPTY
58527: PPUSH
58528: CALL_OW 1
58532: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
58533: LD_ADDR_EXP 67
58537: PUSH
58538: LD_EXP 67
58542: PPUSH
58543: LD_VAR 0 2
58547: PPUSH
58548: EMPTY
58549: PPUSH
58550: CALL_OW 1
58554: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
58555: LD_ADDR_EXP 56
58559: PUSH
58560: LD_EXP 56
58564: PPUSH
58565: LD_VAR 0 2
58569: PPUSH
58570: LD_INT 0
58572: PPUSH
58573: CALL_OW 1
58577: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
58578: LD_ADDR_EXP 69
58582: PUSH
58583: LD_EXP 69
58587: PPUSH
58588: LD_VAR 0 2
58592: PPUSH
58593: LD_INT 0
58595: PPUSH
58596: CALL_OW 1
58600: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
58601: LD_ADDR_EXP 57
58605: PUSH
58606: LD_EXP 57
58610: PPUSH
58611: LD_VAR 0 2
58615: PPUSH
58616: EMPTY
58617: PPUSH
58618: CALL_OW 1
58622: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
58623: LD_ADDR_EXP 68
58627: PUSH
58628: LD_EXP 68
58632: PPUSH
58633: LD_VAR 0 2
58637: PPUSH
58638: LD_INT 0
58640: PPUSH
58641: CALL_OW 1
58645: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
58646: LD_ADDR_EXP 70
58650: PUSH
58651: LD_EXP 70
58655: PPUSH
58656: LD_VAR 0 2
58660: PPUSH
58661: EMPTY
58662: PPUSH
58663: CALL_OW 1
58667: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
58668: LD_ADDR_EXP 73
58672: PUSH
58673: LD_EXP 73
58677: PPUSH
58678: LD_VAR 0 2
58682: PPUSH
58683: LD_INT 0
58685: PPUSH
58686: CALL_OW 1
58690: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
58691: LD_ADDR_EXP 74
58695: PUSH
58696: LD_EXP 74
58700: PPUSH
58701: LD_VAR 0 2
58705: PPUSH
58706: EMPTY
58707: PPUSH
58708: CALL_OW 1
58712: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
58713: LD_ADDR_EXP 75
58717: PUSH
58718: LD_EXP 75
58722: PPUSH
58723: LD_VAR 0 2
58727: PPUSH
58728: EMPTY
58729: PPUSH
58730: CALL_OW 1
58734: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
58735: LD_ADDR_EXP 76
58739: PUSH
58740: LD_EXP 76
58744: PPUSH
58745: LD_VAR 0 2
58749: PPUSH
58750: EMPTY
58751: PPUSH
58752: CALL_OW 1
58756: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
58757: LD_ADDR_EXP 78
58761: PUSH
58762: LD_EXP 78
58766: PPUSH
58767: LD_VAR 0 2
58771: PPUSH
58772: LD_EXP 45
58776: PUSH
58777: LD_VAR 0 2
58781: ARRAY
58782: PPUSH
58783: LD_INT 2
58785: PUSH
58786: LD_INT 30
58788: PUSH
58789: LD_INT 6
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 30
58798: PUSH
58799: LD_INT 7
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 30
58808: PUSH
58809: LD_INT 8
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: PPUSH
58822: CALL_OW 72
58826: PPUSH
58827: CALL_OW 1
58831: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
58832: LD_ADDR_EXP 79
58836: PUSH
58837: LD_EXP 79
58841: PPUSH
58842: LD_VAR 0 2
58846: PPUSH
58847: EMPTY
58848: PPUSH
58849: CALL_OW 1
58853: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
58854: LD_ADDR_EXP 80
58858: PUSH
58859: LD_EXP 80
58863: PPUSH
58864: LD_VAR 0 2
58868: PPUSH
58869: EMPTY
58870: PPUSH
58871: CALL_OW 1
58875: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
58876: LD_ADDR_EXP 81
58880: PUSH
58881: LD_EXP 81
58885: PPUSH
58886: LD_VAR 0 2
58890: PPUSH
58891: EMPTY
58892: PPUSH
58893: CALL_OW 1
58897: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
58898: LD_ADDR_EXP 82
58902: PUSH
58903: LD_EXP 82
58907: PPUSH
58908: LD_VAR 0 2
58912: PPUSH
58913: EMPTY
58914: PPUSH
58915: CALL_OW 1
58919: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
58920: LD_ADDR_EXP 83
58924: PUSH
58925: LD_EXP 83
58929: PPUSH
58930: LD_VAR 0 2
58934: PPUSH
58935: EMPTY
58936: PPUSH
58937: CALL_OW 1
58941: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
58942: LD_ADDR_EXP 84
58946: PUSH
58947: LD_EXP 84
58951: PPUSH
58952: LD_VAR 0 2
58956: PPUSH
58957: EMPTY
58958: PPUSH
58959: CALL_OW 1
58963: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
58964: LD_ADDR_EXP 85
58968: PUSH
58969: LD_EXP 85
58973: PPUSH
58974: LD_VAR 0 2
58978: PPUSH
58979: EMPTY
58980: PPUSH
58981: CALL_OW 1
58985: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
58986: LD_ADDR_EXP 86
58990: PUSH
58991: LD_EXP 86
58995: PPUSH
58996: LD_VAR 0 2
59000: PPUSH
59001: EMPTY
59002: PPUSH
59003: CALL_OW 1
59007: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
59008: LD_ADDR_EXP 87
59012: PUSH
59013: LD_EXP 87
59017: PPUSH
59018: LD_VAR 0 2
59022: PPUSH
59023: LD_INT 0
59025: PPUSH
59026: CALL_OW 1
59030: ST_TO_ADDR
// end ;
59031: GO 57955
59033: POP
59034: POP
// MC_InitSides ( ) ;
59035: CALL 59321 0 0
// MC_InitResearch ( ) ;
59039: CALL 59060 0 0
// CustomInitMacro ( ) ;
59043: CALL 1400 0 0
// skirmish := true ;
59047: LD_ADDR_EXP 43
59051: PUSH
59052: LD_INT 1
59054: ST_TO_ADDR
// end ;
59055: LD_VAR 0 1
59059: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
59060: LD_INT 0
59062: PPUSH
59063: PPUSH
59064: PPUSH
59065: PPUSH
59066: PPUSH
59067: PPUSH
// if not mc_bases then
59068: LD_EXP 45
59072: NOT
59073: IFFALSE 59077
// exit ;
59075: GO 59316
// for i = 1 to 8 do
59077: LD_ADDR_VAR 0 2
59081: PUSH
59082: DOUBLE
59083: LD_INT 1
59085: DEC
59086: ST_TO_ADDR
59087: LD_INT 8
59089: PUSH
59090: FOR_TO
59091: IFFALSE 59117
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
59093: LD_ADDR_EXP 72
59097: PUSH
59098: LD_EXP 72
59102: PPUSH
59103: LD_VAR 0 2
59107: PPUSH
59108: EMPTY
59109: PPUSH
59110: CALL_OW 1
59114: ST_TO_ADDR
59115: GO 59090
59117: POP
59118: POP
// tmp := [ ] ;
59119: LD_ADDR_VAR 0 5
59123: PUSH
59124: EMPTY
59125: ST_TO_ADDR
// for i = 1 to mc_sides do
59126: LD_ADDR_VAR 0 2
59130: PUSH
59131: DOUBLE
59132: LD_INT 1
59134: DEC
59135: ST_TO_ADDR
59136: LD_EXP 71
59140: PUSH
59141: FOR_TO
59142: IFFALSE 59200
// if not mc_sides [ i ] in tmp then
59144: LD_EXP 71
59148: PUSH
59149: LD_VAR 0 2
59153: ARRAY
59154: PUSH
59155: LD_VAR 0 5
59159: IN
59160: NOT
59161: IFFALSE 59198
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
59163: LD_ADDR_VAR 0 5
59167: PUSH
59168: LD_VAR 0 5
59172: PPUSH
59173: LD_VAR 0 5
59177: PUSH
59178: LD_INT 1
59180: PLUS
59181: PPUSH
59182: LD_EXP 71
59186: PUSH
59187: LD_VAR 0 2
59191: ARRAY
59192: PPUSH
59193: CALL_OW 2
59197: ST_TO_ADDR
59198: GO 59141
59200: POP
59201: POP
// if not tmp then
59202: LD_VAR 0 5
59206: NOT
59207: IFFALSE 59211
// exit ;
59209: GO 59316
// for j in tmp do
59211: LD_ADDR_VAR 0 3
59215: PUSH
59216: LD_VAR 0 5
59220: PUSH
59221: FOR_IN
59222: IFFALSE 59314
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
59224: LD_ADDR_VAR 0 6
59228: PUSH
59229: LD_INT 22
59231: PUSH
59232: LD_VAR 0 3
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PPUSH
59241: CALL_OW 69
59245: ST_TO_ADDR
// if not un then
59246: LD_VAR 0 6
59250: NOT
59251: IFFALSE 59255
// continue ;
59253: GO 59221
// nation := GetNation ( un [ 1 ] ) ;
59255: LD_ADDR_VAR 0 4
59259: PUSH
59260: LD_VAR 0 6
59264: PUSH
59265: LD_INT 1
59267: ARRAY
59268: PPUSH
59269: CALL_OW 248
59273: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
59274: LD_ADDR_EXP 72
59278: PUSH
59279: LD_EXP 72
59283: PPUSH
59284: LD_VAR 0 3
59288: PPUSH
59289: LD_VAR 0 3
59293: PPUSH
59294: LD_VAR 0 4
59298: PPUSH
59299: LD_INT 1
59301: PPUSH
59302: CALL 19411 0 3
59306: PPUSH
59307: CALL_OW 1
59311: ST_TO_ADDR
// end ;
59312: GO 59221
59314: POP
59315: POP
// end ;
59316: LD_VAR 0 1
59320: RET
// export function MC_InitSides ( ) ; var i ; begin
59321: LD_INT 0
59323: PPUSH
59324: PPUSH
// if not mc_bases then
59325: LD_EXP 45
59329: NOT
59330: IFFALSE 59334
// exit ;
59332: GO 59408
// for i = 1 to mc_bases do
59334: LD_ADDR_VAR 0 2
59338: PUSH
59339: DOUBLE
59340: LD_INT 1
59342: DEC
59343: ST_TO_ADDR
59344: LD_EXP 45
59348: PUSH
59349: FOR_TO
59350: IFFALSE 59406
// if mc_bases [ i ] then
59352: LD_EXP 45
59356: PUSH
59357: LD_VAR 0 2
59361: ARRAY
59362: IFFALSE 59404
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
59364: LD_ADDR_EXP 71
59368: PUSH
59369: LD_EXP 71
59373: PPUSH
59374: LD_VAR 0 2
59378: PPUSH
59379: LD_EXP 45
59383: PUSH
59384: LD_VAR 0 2
59388: ARRAY
59389: PUSH
59390: LD_INT 1
59392: ARRAY
59393: PPUSH
59394: CALL_OW 255
59398: PPUSH
59399: CALL_OW 1
59403: ST_TO_ADDR
59404: GO 59349
59406: POP
59407: POP
// end ;
59408: LD_VAR 0 1
59412: RET
// every 0 0$01 trigger skirmish do
59413: LD_EXP 43
59417: IFFALSE 59571
59419: GO 59421
59421: DISABLE
// begin enable ;
59422: ENABLE
// MC_CheckBuildings ( ) ;
59423: CALL 64069 0 0
// MC_CheckPeopleLife ( ) ;
59427: CALL 64194 0 0
// RaiseSailEvent ( 100 ) ;
59431: LD_INT 100
59433: PPUSH
59434: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
59438: LD_INT 103
59440: PPUSH
59441: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
59445: LD_INT 104
59447: PPUSH
59448: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
59452: LD_INT 105
59454: PPUSH
59455: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
59459: LD_INT 106
59461: PPUSH
59462: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
59466: LD_INT 107
59468: PPUSH
59469: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
59473: LD_INT 108
59475: PPUSH
59476: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
59480: LD_INT 109
59482: PPUSH
59483: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
59487: LD_INT 110
59489: PPUSH
59490: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
59494: LD_INT 111
59496: PPUSH
59497: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
59501: LD_INT 112
59503: PPUSH
59504: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
59508: LD_INT 113
59510: PPUSH
59511: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
59515: LD_INT 120
59517: PPUSH
59518: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
59522: LD_INT 121
59524: PPUSH
59525: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
59529: LD_INT 122
59531: PPUSH
59532: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
59536: LD_INT 123
59538: PPUSH
59539: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
59543: LD_INT 124
59545: PPUSH
59546: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
59550: LD_INT 125
59552: PPUSH
59553: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
59557: LD_INT 126
59559: PPUSH
59560: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
59564: LD_INT 200
59566: PPUSH
59567: CALL_OW 427
// end ;
59571: END
// on SailEvent ( event ) do begin if event < 100 then
59572: LD_VAR 0 1
59576: PUSH
59577: LD_INT 100
59579: LESS
59580: IFFALSE 59591
// CustomEvent ( event ) ;
59582: LD_VAR 0 1
59586: PPUSH
59587: CALL 18589 0 1
// if event = 100 then
59591: LD_VAR 0 1
59595: PUSH
59596: LD_INT 100
59598: EQUAL
59599: IFFALSE 59605
// MC_ClassManager ( ) ;
59601: CALL 59997 0 0
// if event = 101 then
59605: LD_VAR 0 1
59609: PUSH
59610: LD_INT 101
59612: EQUAL
59613: IFFALSE 59619
// MC_RepairBuildings ( ) ;
59615: CALL 64779 0 0
// if event = 102 then
59619: LD_VAR 0 1
59623: PUSH
59624: LD_INT 102
59626: EQUAL
59627: IFFALSE 59633
// MC_Heal ( ) ;
59629: CALL 65638 0 0
// if event = 103 then
59633: LD_VAR 0 1
59637: PUSH
59638: LD_INT 103
59640: EQUAL
59641: IFFALSE 59647
// MC_Build ( ) ;
59643: CALL 66060 0 0
// if event = 104 then
59647: LD_VAR 0 1
59651: PUSH
59652: LD_INT 104
59654: EQUAL
59655: IFFALSE 59661
// MC_TurretWeapon ( ) ;
59657: CALL 67673 0 0
// if event = 105 then
59661: LD_VAR 0 1
59665: PUSH
59666: LD_INT 105
59668: EQUAL
59669: IFFALSE 59675
// MC_BuildUpgrade ( ) ;
59671: CALL 67224 0 0
// if event = 106 then
59675: LD_VAR 0 1
59679: PUSH
59680: LD_INT 106
59682: EQUAL
59683: IFFALSE 59689
// MC_PlantMines ( ) ;
59685: CALL 68103 0 0
// if event = 107 then
59689: LD_VAR 0 1
59693: PUSH
59694: LD_INT 107
59696: EQUAL
59697: IFFALSE 59703
// MC_CollectCrates ( ) ;
59699: CALL 68901 0 0
// if event = 108 then
59703: LD_VAR 0 1
59707: PUSH
59708: LD_INT 108
59710: EQUAL
59711: IFFALSE 59717
// MC_LinkRemoteControl ( ) ;
59713: CALL 70677 0 0
// if event = 109 then
59717: LD_VAR 0 1
59721: PUSH
59722: LD_INT 109
59724: EQUAL
59725: IFFALSE 59731
// MC_ProduceVehicle ( ) ;
59727: CALL 70858 0 0
// if event = 110 then
59731: LD_VAR 0 1
59735: PUSH
59736: LD_INT 110
59738: EQUAL
59739: IFFALSE 59745
// MC_SendAttack ( ) ;
59741: CALL 71324 0 0
// if event = 111 then
59745: LD_VAR 0 1
59749: PUSH
59750: LD_INT 111
59752: EQUAL
59753: IFFALSE 59759
// MC_Defend ( ) ;
59755: CALL 71432 0 0
// if event = 112 then
59759: LD_VAR 0 1
59763: PUSH
59764: LD_INT 112
59766: EQUAL
59767: IFFALSE 59773
// MC_Research ( ) ;
59769: CALL 72037 0 0
// if event = 113 then
59773: LD_VAR 0 1
59777: PUSH
59778: LD_INT 113
59780: EQUAL
59781: IFFALSE 59787
// MC_MinesTrigger ( ) ;
59783: CALL 73151 0 0
// if event = 120 then
59787: LD_VAR 0 1
59791: PUSH
59792: LD_INT 120
59794: EQUAL
59795: IFFALSE 59801
// MC_RepairVehicle ( ) ;
59797: CALL 73250 0 0
// if event = 121 then
59801: LD_VAR 0 1
59805: PUSH
59806: LD_INT 121
59808: EQUAL
59809: IFFALSE 59815
// MC_TameApe ( ) ;
59811: CALL 73980 0 0
// if event = 122 then
59815: LD_VAR 0 1
59819: PUSH
59820: LD_INT 122
59822: EQUAL
59823: IFFALSE 59829
// MC_ChangeApeClass ( ) ;
59825: CALL 74809 0 0
// if event = 123 then
59829: LD_VAR 0 1
59833: PUSH
59834: LD_INT 123
59836: EQUAL
59837: IFFALSE 59843
// MC_Bazooka ( ) ;
59839: CALL 75459 0 0
// if event = 124 then
59843: LD_VAR 0 1
59847: PUSH
59848: LD_INT 124
59850: EQUAL
59851: IFFALSE 59857
// MC_TeleportExit ( ) ;
59853: CALL 75657 0 0
// if event = 125 then
59857: LD_VAR 0 1
59861: PUSH
59862: LD_INT 125
59864: EQUAL
59865: IFFALSE 59871
// MC_Deposits ( ) ;
59867: CALL 76304 0 0
// if event = 126 then
59871: LD_VAR 0 1
59875: PUSH
59876: LD_INT 126
59878: EQUAL
59879: IFFALSE 59885
// MC_RemoteDriver ( ) ;
59881: CALL 76929 0 0
// if event = 200 then
59885: LD_VAR 0 1
59889: PUSH
59890: LD_INT 200
59892: EQUAL
59893: IFFALSE 59899
// MC_Idle ( ) ;
59895: CALL 78878 0 0
// end ;
59899: PPOPN 1
59901: END
// export function MC_Reset ( base , tag ) ; var i ; begin
59902: LD_INT 0
59904: PPUSH
59905: PPUSH
// if not mc_bases [ base ] or not tag then
59906: LD_EXP 45
59910: PUSH
59911: LD_VAR 0 1
59915: ARRAY
59916: NOT
59917: PUSH
59918: LD_VAR 0 2
59922: NOT
59923: OR
59924: IFFALSE 59928
// exit ;
59926: GO 59992
// for i in mc_bases [ base ] union mc_ape [ base ] do
59928: LD_ADDR_VAR 0 4
59932: PUSH
59933: LD_EXP 45
59937: PUSH
59938: LD_VAR 0 1
59942: ARRAY
59943: PUSH
59944: LD_EXP 74
59948: PUSH
59949: LD_VAR 0 1
59953: ARRAY
59954: UNION
59955: PUSH
59956: FOR_IN
59957: IFFALSE 59990
// if GetTag ( i ) = tag then
59959: LD_VAR 0 4
59963: PPUSH
59964: CALL_OW 110
59968: PUSH
59969: LD_VAR 0 2
59973: EQUAL
59974: IFFALSE 59988
// SetTag ( i , 0 ) ;
59976: LD_VAR 0 4
59980: PPUSH
59981: LD_INT 0
59983: PPUSH
59984: CALL_OW 109
59988: GO 59956
59990: POP
59991: POP
// end ;
59992: LD_VAR 0 3
59996: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
59997: LD_INT 0
59999: PPUSH
60000: PPUSH
60001: PPUSH
60002: PPUSH
60003: PPUSH
60004: PPUSH
60005: PPUSH
60006: PPUSH
// if not mc_bases then
60007: LD_EXP 45
60011: NOT
60012: IFFALSE 60016
// exit ;
60014: GO 60474
// for i = 1 to mc_bases do
60016: LD_ADDR_VAR 0 2
60020: PUSH
60021: DOUBLE
60022: LD_INT 1
60024: DEC
60025: ST_TO_ADDR
60026: LD_EXP 45
60030: PUSH
60031: FOR_TO
60032: IFFALSE 60472
// begin tmp := MC_ClassCheckReq ( i ) ;
60034: LD_ADDR_VAR 0 4
60038: PUSH
60039: LD_VAR 0 2
60043: PPUSH
60044: CALL 60479 0 1
60048: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
60049: LD_ADDR_EXP 86
60053: PUSH
60054: LD_EXP 86
60058: PPUSH
60059: LD_VAR 0 2
60063: PPUSH
60064: LD_VAR 0 4
60068: PPUSH
60069: CALL_OW 1
60073: ST_TO_ADDR
// if not tmp then
60074: LD_VAR 0 4
60078: NOT
60079: IFFALSE 60083
// continue ;
60081: GO 60031
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
60083: LD_ADDR_VAR 0 6
60087: PUSH
60088: LD_EXP 45
60092: PUSH
60093: LD_VAR 0 2
60097: ARRAY
60098: PPUSH
60099: LD_INT 2
60101: PUSH
60102: LD_INT 30
60104: PUSH
60105: LD_INT 4
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 30
60114: PUSH
60115: LD_INT 5
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: LIST
60126: PPUSH
60127: CALL_OW 72
60131: PUSH
60132: LD_EXP 45
60136: PUSH
60137: LD_VAR 0 2
60141: ARRAY
60142: PPUSH
60143: LD_INT 2
60145: PUSH
60146: LD_INT 30
60148: PUSH
60149: LD_INT 0
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 30
60158: PUSH
60159: LD_INT 1
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: LIST
60170: PPUSH
60171: CALL_OW 72
60175: PUSH
60176: LD_EXP 45
60180: PUSH
60181: LD_VAR 0 2
60185: ARRAY
60186: PPUSH
60187: LD_INT 30
60189: PUSH
60190: LD_INT 3
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PPUSH
60197: CALL_OW 72
60201: PUSH
60202: LD_EXP 45
60206: PUSH
60207: LD_VAR 0 2
60211: ARRAY
60212: PPUSH
60213: LD_INT 2
60215: PUSH
60216: LD_INT 30
60218: PUSH
60219: LD_INT 6
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 30
60228: PUSH
60229: LD_INT 7
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 30
60238: PUSH
60239: LD_INT 8
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: PPUSH
60252: CALL_OW 72
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: ST_TO_ADDR
// for j = 1 to 4 do
60263: LD_ADDR_VAR 0 3
60267: PUSH
60268: DOUBLE
60269: LD_INT 1
60271: DEC
60272: ST_TO_ADDR
60273: LD_INT 4
60275: PUSH
60276: FOR_TO
60277: IFFALSE 60468
// begin if not tmp [ j ] then
60279: LD_VAR 0 4
60283: PUSH
60284: LD_VAR 0 3
60288: ARRAY
60289: NOT
60290: IFFALSE 60294
// continue ;
60292: GO 60276
// for p in tmp [ j ] do
60294: LD_ADDR_VAR 0 5
60298: PUSH
60299: LD_VAR 0 4
60303: PUSH
60304: LD_VAR 0 3
60308: ARRAY
60309: PUSH
60310: FOR_IN
60311: IFFALSE 60464
// begin if not b [ j ] then
60313: LD_VAR 0 6
60317: PUSH
60318: LD_VAR 0 3
60322: ARRAY
60323: NOT
60324: IFFALSE 60328
// break ;
60326: GO 60464
// e := 0 ;
60328: LD_ADDR_VAR 0 7
60332: PUSH
60333: LD_INT 0
60335: ST_TO_ADDR
// for k in b [ j ] do
60336: LD_ADDR_VAR 0 8
60340: PUSH
60341: LD_VAR 0 6
60345: PUSH
60346: LD_VAR 0 3
60350: ARRAY
60351: PUSH
60352: FOR_IN
60353: IFFALSE 60380
// if IsNotFull ( k ) then
60355: LD_VAR 0 8
60359: PPUSH
60360: CALL 21560 0 1
60364: IFFALSE 60378
// begin e := k ;
60366: LD_ADDR_VAR 0 7
60370: PUSH
60371: LD_VAR 0 8
60375: ST_TO_ADDR
// break ;
60376: GO 60380
// end ;
60378: GO 60352
60380: POP
60381: POP
// if e and not UnitGoingToBuilding ( p , e ) then
60382: LD_VAR 0 7
60386: PUSH
60387: LD_VAR 0 5
60391: PPUSH
60392: LD_VAR 0 7
60396: PPUSH
60397: CALL 53980 0 2
60401: NOT
60402: AND
60403: IFFALSE 60462
// begin if IsInUnit ( p ) then
60405: LD_VAR 0 5
60409: PPUSH
60410: CALL_OW 310
60414: IFFALSE 60425
// ComExitBuilding ( p ) ;
60416: LD_VAR 0 5
60420: PPUSH
60421: CALL_OW 122
// ComEnterUnit ( p , e ) ;
60425: LD_VAR 0 5
60429: PPUSH
60430: LD_VAR 0 7
60434: PPUSH
60435: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
60439: LD_VAR 0 5
60443: PPUSH
60444: LD_VAR 0 3
60448: PPUSH
60449: CALL_OW 183
// AddComExitBuilding ( p ) ;
60453: LD_VAR 0 5
60457: PPUSH
60458: CALL_OW 182
// end ; end ;
60462: GO 60310
60464: POP
60465: POP
// end ;
60466: GO 60276
60468: POP
60469: POP
// end ;
60470: GO 60031
60472: POP
60473: POP
// end ;
60474: LD_VAR 0 1
60478: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
60479: LD_INT 0
60481: PPUSH
60482: PPUSH
60483: PPUSH
60484: PPUSH
60485: PPUSH
60486: PPUSH
60487: PPUSH
60488: PPUSH
60489: PPUSH
60490: PPUSH
60491: PPUSH
60492: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
60493: LD_VAR 0 1
60497: NOT
60498: PUSH
60499: LD_EXP 45
60503: PUSH
60504: LD_VAR 0 1
60508: ARRAY
60509: NOT
60510: OR
60511: PUSH
60512: LD_EXP 45
60516: PUSH
60517: LD_VAR 0 1
60521: ARRAY
60522: PPUSH
60523: LD_INT 2
60525: PUSH
60526: LD_INT 30
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 30
60538: PUSH
60539: LD_INT 1
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: LIST
60550: PPUSH
60551: CALL_OW 72
60555: NOT
60556: OR
60557: IFFALSE 60561
// exit ;
60559: GO 64064
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
60561: LD_ADDR_VAR 0 4
60565: PUSH
60566: LD_EXP 45
60570: PUSH
60571: LD_VAR 0 1
60575: ARRAY
60576: PPUSH
60577: LD_INT 2
60579: PUSH
60580: LD_INT 25
60582: PUSH
60583: LD_INT 1
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 25
60592: PUSH
60593: LD_INT 2
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 25
60602: PUSH
60603: LD_INT 3
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 25
60612: PUSH
60613: LD_INT 4
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 25
60622: PUSH
60623: LD_INT 5
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 25
60632: PUSH
60633: LD_INT 8
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 25
60642: PUSH
60643: LD_INT 9
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: PPUSH
60660: CALL_OW 72
60664: ST_TO_ADDR
// if not tmp then
60665: LD_VAR 0 4
60669: NOT
60670: IFFALSE 60674
// exit ;
60672: GO 64064
// for i in tmp do
60674: LD_ADDR_VAR 0 3
60678: PUSH
60679: LD_VAR 0 4
60683: PUSH
60684: FOR_IN
60685: IFFALSE 60716
// if GetTag ( i ) then
60687: LD_VAR 0 3
60691: PPUSH
60692: CALL_OW 110
60696: IFFALSE 60714
// tmp := tmp diff i ;
60698: LD_ADDR_VAR 0 4
60702: PUSH
60703: LD_VAR 0 4
60707: PUSH
60708: LD_VAR 0 3
60712: DIFF
60713: ST_TO_ADDR
60714: GO 60684
60716: POP
60717: POP
// if not tmp then
60718: LD_VAR 0 4
60722: NOT
60723: IFFALSE 60727
// exit ;
60725: GO 64064
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
60727: LD_ADDR_VAR 0 5
60731: PUSH
60732: LD_EXP 45
60736: PUSH
60737: LD_VAR 0 1
60741: ARRAY
60742: PPUSH
60743: LD_INT 2
60745: PUSH
60746: LD_INT 25
60748: PUSH
60749: LD_INT 1
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 25
60758: PUSH
60759: LD_INT 5
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 25
60768: PUSH
60769: LD_INT 8
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 25
60778: PUSH
60779: LD_INT 9
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: PPUSH
60793: CALL_OW 72
60797: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
60798: LD_ADDR_VAR 0 6
60802: PUSH
60803: LD_EXP 45
60807: PUSH
60808: LD_VAR 0 1
60812: ARRAY
60813: PPUSH
60814: LD_INT 25
60816: PUSH
60817: LD_INT 2
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PPUSH
60824: CALL_OW 72
60828: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
60829: LD_ADDR_VAR 0 7
60833: PUSH
60834: LD_EXP 45
60838: PUSH
60839: LD_VAR 0 1
60843: ARRAY
60844: PPUSH
60845: LD_INT 25
60847: PUSH
60848: LD_INT 3
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PPUSH
60855: CALL_OW 72
60859: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
60860: LD_ADDR_VAR 0 8
60864: PUSH
60865: LD_EXP 45
60869: PUSH
60870: LD_VAR 0 1
60874: ARRAY
60875: PPUSH
60876: LD_INT 25
60878: PUSH
60879: LD_INT 4
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 24
60888: PUSH
60889: LD_INT 251
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PPUSH
60900: CALL_OW 72
60904: ST_TO_ADDR
// if mc_scan [ base ] then
60905: LD_EXP 68
60909: PUSH
60910: LD_VAR 0 1
60914: ARRAY
60915: IFFALSE 61376
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
60917: LD_ADDR_EXP 87
60921: PUSH
60922: LD_EXP 87
60926: PPUSH
60927: LD_VAR 0 1
60931: PPUSH
60932: LD_INT 4
60934: PPUSH
60935: CALL_OW 1
60939: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
60940: LD_ADDR_VAR 0 12
60944: PUSH
60945: LD_EXP 45
60949: PUSH
60950: LD_VAR 0 1
60954: ARRAY
60955: PPUSH
60956: LD_INT 2
60958: PUSH
60959: LD_INT 30
60961: PUSH
60962: LD_INT 4
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 30
60971: PUSH
60972: LD_INT 5
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: LIST
60983: PPUSH
60984: CALL_OW 72
60988: ST_TO_ADDR
// if not b then
60989: LD_VAR 0 12
60993: NOT
60994: IFFALSE 60998
// exit ;
60996: GO 64064
// p := [ ] ;
60998: LD_ADDR_VAR 0 11
61002: PUSH
61003: EMPTY
61004: ST_TO_ADDR
// if sci >= 2 then
61005: LD_VAR 0 8
61009: PUSH
61010: LD_INT 2
61012: GREATEREQUAL
61013: IFFALSE 61044
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
61015: LD_ADDR_VAR 0 8
61019: PUSH
61020: LD_VAR 0 8
61024: PUSH
61025: LD_INT 1
61027: ARRAY
61028: PUSH
61029: LD_VAR 0 8
61033: PUSH
61034: LD_INT 2
61036: ARRAY
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: ST_TO_ADDR
61042: GO 61105
// if sci = 1 then
61044: LD_VAR 0 8
61048: PUSH
61049: LD_INT 1
61051: EQUAL
61052: IFFALSE 61073
// sci := [ sci [ 1 ] ] else
61054: LD_ADDR_VAR 0 8
61058: PUSH
61059: LD_VAR 0 8
61063: PUSH
61064: LD_INT 1
61066: ARRAY
61067: PUSH
61068: EMPTY
61069: LIST
61070: ST_TO_ADDR
61071: GO 61105
// if sci = 0 then
61073: LD_VAR 0 8
61077: PUSH
61078: LD_INT 0
61080: EQUAL
61081: IFFALSE 61105
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
61083: LD_ADDR_VAR 0 11
61087: PUSH
61088: LD_VAR 0 4
61092: PPUSH
61093: LD_INT 4
61095: PPUSH
61096: CALL 53843 0 2
61100: PUSH
61101: LD_INT 1
61103: ARRAY
61104: ST_TO_ADDR
// if eng > 4 then
61105: LD_VAR 0 6
61109: PUSH
61110: LD_INT 4
61112: GREATER
61113: IFFALSE 61159
// for i = eng downto 4 do
61115: LD_ADDR_VAR 0 3
61119: PUSH
61120: DOUBLE
61121: LD_VAR 0 6
61125: INC
61126: ST_TO_ADDR
61127: LD_INT 4
61129: PUSH
61130: FOR_DOWNTO
61131: IFFALSE 61157
// eng := eng diff eng [ i ] ;
61133: LD_ADDR_VAR 0 6
61137: PUSH
61138: LD_VAR 0 6
61142: PUSH
61143: LD_VAR 0 6
61147: PUSH
61148: LD_VAR 0 3
61152: ARRAY
61153: DIFF
61154: ST_TO_ADDR
61155: GO 61130
61157: POP
61158: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
61159: LD_ADDR_VAR 0 4
61163: PUSH
61164: LD_VAR 0 4
61168: PUSH
61169: LD_VAR 0 5
61173: PUSH
61174: LD_VAR 0 6
61178: UNION
61179: PUSH
61180: LD_VAR 0 7
61184: UNION
61185: PUSH
61186: LD_VAR 0 8
61190: UNION
61191: DIFF
61192: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
61193: LD_ADDR_VAR 0 13
61197: PUSH
61198: LD_EXP 45
61202: PUSH
61203: LD_VAR 0 1
61207: ARRAY
61208: PPUSH
61209: LD_INT 2
61211: PUSH
61212: LD_INT 30
61214: PUSH
61215: LD_INT 32
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 30
61224: PUSH
61225: LD_INT 31
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: LIST
61236: PPUSH
61237: CALL_OW 72
61241: PUSH
61242: LD_EXP 45
61246: PUSH
61247: LD_VAR 0 1
61251: ARRAY
61252: PPUSH
61253: LD_INT 2
61255: PUSH
61256: LD_INT 30
61258: PUSH
61259: LD_INT 4
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 30
61268: PUSH
61269: LD_INT 5
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: LIST
61280: PPUSH
61281: CALL_OW 72
61285: PUSH
61286: LD_INT 6
61288: MUL
61289: PLUS
61290: ST_TO_ADDR
// if bcount < tmp then
61291: LD_VAR 0 13
61295: PUSH
61296: LD_VAR 0 4
61300: LESS
61301: IFFALSE 61347
// for i = tmp downto bcount do
61303: LD_ADDR_VAR 0 3
61307: PUSH
61308: DOUBLE
61309: LD_VAR 0 4
61313: INC
61314: ST_TO_ADDR
61315: LD_VAR 0 13
61319: PUSH
61320: FOR_DOWNTO
61321: IFFALSE 61345
// tmp := Delete ( tmp , tmp ) ;
61323: LD_ADDR_VAR 0 4
61327: PUSH
61328: LD_VAR 0 4
61332: PPUSH
61333: LD_VAR 0 4
61337: PPUSH
61338: CALL_OW 3
61342: ST_TO_ADDR
61343: GO 61320
61345: POP
61346: POP
// result := [ tmp , 0 , 0 , p ] ;
61347: LD_ADDR_VAR 0 2
61351: PUSH
61352: LD_VAR 0 4
61356: PUSH
61357: LD_INT 0
61359: PUSH
61360: LD_INT 0
61362: PUSH
61363: LD_VAR 0 11
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: ST_TO_ADDR
// exit ;
61374: GO 64064
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
61376: LD_EXP 45
61380: PUSH
61381: LD_VAR 0 1
61385: ARRAY
61386: PPUSH
61387: LD_INT 2
61389: PUSH
61390: LD_INT 30
61392: PUSH
61393: LD_INT 6
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 30
61402: PUSH
61403: LD_INT 7
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 30
61412: PUSH
61413: LD_INT 8
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: PPUSH
61426: CALL_OW 72
61430: NOT
61431: PUSH
61432: LD_EXP 45
61436: PUSH
61437: LD_VAR 0 1
61441: ARRAY
61442: PPUSH
61443: LD_INT 30
61445: PUSH
61446: LD_INT 3
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PPUSH
61453: CALL_OW 72
61457: NOT
61458: AND
61459: IFFALSE 61531
// begin if eng = tmp then
61461: LD_VAR 0 6
61465: PUSH
61466: LD_VAR 0 4
61470: EQUAL
61471: IFFALSE 61475
// exit ;
61473: GO 64064
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
61475: LD_ADDR_EXP 87
61479: PUSH
61480: LD_EXP 87
61484: PPUSH
61485: LD_VAR 0 1
61489: PPUSH
61490: LD_INT 1
61492: PPUSH
61493: CALL_OW 1
61497: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
61498: LD_ADDR_VAR 0 2
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: LD_VAR 0 4
61510: PUSH
61511: LD_VAR 0 6
61515: DIFF
61516: PUSH
61517: LD_INT 0
61519: PUSH
61520: LD_INT 0
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: ST_TO_ADDR
// exit ;
61529: GO 64064
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
61531: LD_EXP 72
61535: PUSH
61536: LD_EXP 71
61540: PUSH
61541: LD_VAR 0 1
61545: ARRAY
61546: ARRAY
61547: PUSH
61548: LD_EXP 45
61552: PUSH
61553: LD_VAR 0 1
61557: ARRAY
61558: PPUSH
61559: LD_INT 2
61561: PUSH
61562: LD_INT 30
61564: PUSH
61565: LD_INT 6
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 30
61574: PUSH
61575: LD_INT 7
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 30
61584: PUSH
61585: LD_INT 8
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: PPUSH
61598: CALL_OW 72
61602: AND
61603: PUSH
61604: LD_EXP 45
61608: PUSH
61609: LD_VAR 0 1
61613: ARRAY
61614: PPUSH
61615: LD_INT 30
61617: PUSH
61618: LD_INT 3
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PPUSH
61625: CALL_OW 72
61629: NOT
61630: AND
61631: IFFALSE 61845
// begin if sci >= 6 then
61633: LD_VAR 0 8
61637: PUSH
61638: LD_INT 6
61640: GREATEREQUAL
61641: IFFALSE 61645
// exit ;
61643: GO 64064
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
61645: LD_ADDR_EXP 87
61649: PUSH
61650: LD_EXP 87
61654: PPUSH
61655: LD_VAR 0 1
61659: PPUSH
61660: LD_INT 2
61662: PPUSH
61663: CALL_OW 1
61667: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
61668: LD_ADDR_VAR 0 9
61672: PUSH
61673: LD_VAR 0 4
61677: PUSH
61678: LD_VAR 0 8
61682: DIFF
61683: PPUSH
61684: LD_INT 4
61686: PPUSH
61687: CALL 53843 0 2
61691: ST_TO_ADDR
// p := [ ] ;
61692: LD_ADDR_VAR 0 11
61696: PUSH
61697: EMPTY
61698: ST_TO_ADDR
// if sci < 6 and sort > 6 then
61699: LD_VAR 0 8
61703: PUSH
61704: LD_INT 6
61706: LESS
61707: PUSH
61708: LD_VAR 0 9
61712: PUSH
61713: LD_INT 6
61715: GREATER
61716: AND
61717: IFFALSE 61798
// begin for i = 1 to 6 - sci do
61719: LD_ADDR_VAR 0 3
61723: PUSH
61724: DOUBLE
61725: LD_INT 1
61727: DEC
61728: ST_TO_ADDR
61729: LD_INT 6
61731: PUSH
61732: LD_VAR 0 8
61736: MINUS
61737: PUSH
61738: FOR_TO
61739: IFFALSE 61794
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
61741: LD_ADDR_VAR 0 11
61745: PUSH
61746: LD_VAR 0 11
61750: PPUSH
61751: LD_VAR 0 11
61755: PUSH
61756: LD_INT 1
61758: PLUS
61759: PPUSH
61760: LD_VAR 0 9
61764: PUSH
61765: LD_INT 1
61767: ARRAY
61768: PPUSH
61769: CALL_OW 2
61773: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
61774: LD_ADDR_VAR 0 9
61778: PUSH
61779: LD_VAR 0 9
61783: PPUSH
61784: LD_INT 1
61786: PPUSH
61787: CALL_OW 3
61791: ST_TO_ADDR
// end ;
61792: GO 61738
61794: POP
61795: POP
// end else
61796: GO 61818
// if sort then
61798: LD_VAR 0 9
61802: IFFALSE 61818
// p := sort [ 1 ] ;
61804: LD_ADDR_VAR 0 11
61808: PUSH
61809: LD_VAR 0 9
61813: PUSH
61814: LD_INT 1
61816: ARRAY
61817: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
61818: LD_ADDR_VAR 0 2
61822: PUSH
61823: LD_INT 0
61825: PUSH
61826: LD_INT 0
61828: PUSH
61829: LD_INT 0
61831: PUSH
61832: LD_VAR 0 11
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: ST_TO_ADDR
// exit ;
61843: GO 64064
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
61845: LD_EXP 72
61849: PUSH
61850: LD_EXP 71
61854: PUSH
61855: LD_VAR 0 1
61859: ARRAY
61860: ARRAY
61861: PUSH
61862: LD_EXP 45
61866: PUSH
61867: LD_VAR 0 1
61871: ARRAY
61872: PPUSH
61873: LD_INT 2
61875: PUSH
61876: LD_INT 30
61878: PUSH
61879: LD_INT 6
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 30
61888: PUSH
61889: LD_INT 7
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 30
61898: PUSH
61899: LD_INT 8
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: PPUSH
61912: CALL_OW 72
61916: AND
61917: PUSH
61918: LD_EXP 45
61922: PUSH
61923: LD_VAR 0 1
61927: ARRAY
61928: PPUSH
61929: LD_INT 30
61931: PUSH
61932: LD_INT 3
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PPUSH
61939: CALL_OW 72
61943: AND
61944: IFFALSE 62678
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
61946: LD_ADDR_EXP 87
61950: PUSH
61951: LD_EXP 87
61955: PPUSH
61956: LD_VAR 0 1
61960: PPUSH
61961: LD_INT 3
61963: PPUSH
61964: CALL_OW 1
61968: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
61969: LD_ADDR_VAR 0 2
61973: PUSH
61974: LD_INT 0
61976: PUSH
61977: LD_INT 0
61979: PUSH
61980: LD_INT 0
61982: PUSH
61983: LD_INT 0
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: ST_TO_ADDR
// if not eng then
61992: LD_VAR 0 6
61996: NOT
61997: IFFALSE 62060
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
61999: LD_ADDR_VAR 0 11
62003: PUSH
62004: LD_VAR 0 4
62008: PPUSH
62009: LD_INT 2
62011: PPUSH
62012: CALL 53843 0 2
62016: PUSH
62017: LD_INT 1
62019: ARRAY
62020: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
62021: LD_ADDR_VAR 0 2
62025: PUSH
62026: LD_VAR 0 2
62030: PPUSH
62031: LD_INT 2
62033: PPUSH
62034: LD_VAR 0 11
62038: PPUSH
62039: CALL_OW 1
62043: ST_TO_ADDR
// tmp := tmp diff p ;
62044: LD_ADDR_VAR 0 4
62048: PUSH
62049: LD_VAR 0 4
62053: PUSH
62054: LD_VAR 0 11
62058: DIFF
62059: ST_TO_ADDR
// end ; if tmp and sci < 6 then
62060: LD_VAR 0 4
62064: PUSH
62065: LD_VAR 0 8
62069: PUSH
62070: LD_INT 6
62072: LESS
62073: AND
62074: IFFALSE 62262
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
62076: LD_ADDR_VAR 0 9
62080: PUSH
62081: LD_VAR 0 4
62085: PUSH
62086: LD_VAR 0 8
62090: PUSH
62091: LD_VAR 0 7
62095: UNION
62096: DIFF
62097: PPUSH
62098: LD_INT 4
62100: PPUSH
62101: CALL 53843 0 2
62105: ST_TO_ADDR
// p := [ ] ;
62106: LD_ADDR_VAR 0 11
62110: PUSH
62111: EMPTY
62112: ST_TO_ADDR
// if sort then
62113: LD_VAR 0 9
62117: IFFALSE 62233
// for i = 1 to 6 - sci do
62119: LD_ADDR_VAR 0 3
62123: PUSH
62124: DOUBLE
62125: LD_INT 1
62127: DEC
62128: ST_TO_ADDR
62129: LD_INT 6
62131: PUSH
62132: LD_VAR 0 8
62136: MINUS
62137: PUSH
62138: FOR_TO
62139: IFFALSE 62231
// begin if i = sort then
62141: LD_VAR 0 3
62145: PUSH
62146: LD_VAR 0 9
62150: EQUAL
62151: IFFALSE 62155
// break ;
62153: GO 62231
// if GetClass ( i ) = 4 then
62155: LD_VAR 0 3
62159: PPUSH
62160: CALL_OW 257
62164: PUSH
62165: LD_INT 4
62167: EQUAL
62168: IFFALSE 62172
// continue ;
62170: GO 62138
// p := Insert ( p , p + 1 , sort [ i ] ) ;
62172: LD_ADDR_VAR 0 11
62176: PUSH
62177: LD_VAR 0 11
62181: PPUSH
62182: LD_VAR 0 11
62186: PUSH
62187: LD_INT 1
62189: PLUS
62190: PPUSH
62191: LD_VAR 0 9
62195: PUSH
62196: LD_VAR 0 3
62200: ARRAY
62201: PPUSH
62202: CALL_OW 2
62206: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
62207: LD_ADDR_VAR 0 4
62211: PUSH
62212: LD_VAR 0 4
62216: PUSH
62217: LD_VAR 0 9
62221: PUSH
62222: LD_VAR 0 3
62226: ARRAY
62227: DIFF
62228: ST_TO_ADDR
// end ;
62229: GO 62138
62231: POP
62232: POP
// if p then
62233: LD_VAR 0 11
62237: IFFALSE 62262
// result := Replace ( result , 4 , p ) ;
62239: LD_ADDR_VAR 0 2
62243: PUSH
62244: LD_VAR 0 2
62248: PPUSH
62249: LD_INT 4
62251: PPUSH
62252: LD_VAR 0 11
62256: PPUSH
62257: CALL_OW 1
62261: ST_TO_ADDR
// end ; if tmp and mech < 6 then
62262: LD_VAR 0 4
62266: PUSH
62267: LD_VAR 0 7
62271: PUSH
62272: LD_INT 6
62274: LESS
62275: AND
62276: IFFALSE 62464
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
62278: LD_ADDR_VAR 0 9
62282: PUSH
62283: LD_VAR 0 4
62287: PUSH
62288: LD_VAR 0 8
62292: PUSH
62293: LD_VAR 0 7
62297: UNION
62298: DIFF
62299: PPUSH
62300: LD_INT 3
62302: PPUSH
62303: CALL 53843 0 2
62307: ST_TO_ADDR
// p := [ ] ;
62308: LD_ADDR_VAR 0 11
62312: PUSH
62313: EMPTY
62314: ST_TO_ADDR
// if sort then
62315: LD_VAR 0 9
62319: IFFALSE 62435
// for i = 1 to 6 - mech do
62321: LD_ADDR_VAR 0 3
62325: PUSH
62326: DOUBLE
62327: LD_INT 1
62329: DEC
62330: ST_TO_ADDR
62331: LD_INT 6
62333: PUSH
62334: LD_VAR 0 7
62338: MINUS
62339: PUSH
62340: FOR_TO
62341: IFFALSE 62433
// begin if i = sort then
62343: LD_VAR 0 3
62347: PUSH
62348: LD_VAR 0 9
62352: EQUAL
62353: IFFALSE 62357
// break ;
62355: GO 62433
// if GetClass ( i ) = 3 then
62357: LD_VAR 0 3
62361: PPUSH
62362: CALL_OW 257
62366: PUSH
62367: LD_INT 3
62369: EQUAL
62370: IFFALSE 62374
// continue ;
62372: GO 62340
// p := Insert ( p , p + 1 , sort [ i ] ) ;
62374: LD_ADDR_VAR 0 11
62378: PUSH
62379: LD_VAR 0 11
62383: PPUSH
62384: LD_VAR 0 11
62388: PUSH
62389: LD_INT 1
62391: PLUS
62392: PPUSH
62393: LD_VAR 0 9
62397: PUSH
62398: LD_VAR 0 3
62402: ARRAY
62403: PPUSH
62404: CALL_OW 2
62408: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
62409: LD_ADDR_VAR 0 4
62413: PUSH
62414: LD_VAR 0 4
62418: PUSH
62419: LD_VAR 0 9
62423: PUSH
62424: LD_VAR 0 3
62428: ARRAY
62429: DIFF
62430: ST_TO_ADDR
// end ;
62431: GO 62340
62433: POP
62434: POP
// if p then
62435: LD_VAR 0 11
62439: IFFALSE 62464
// result := Replace ( result , 3 , p ) ;
62441: LD_ADDR_VAR 0 2
62445: PUSH
62446: LD_VAR 0 2
62450: PPUSH
62451: LD_INT 3
62453: PPUSH
62454: LD_VAR 0 11
62458: PPUSH
62459: CALL_OW 1
62463: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
62464: LD_VAR 0 4
62468: PUSH
62469: LD_INT 6
62471: GREATER
62472: PUSH
62473: LD_VAR 0 6
62477: PUSH
62478: LD_INT 6
62480: LESS
62481: AND
62482: IFFALSE 62676
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
62484: LD_ADDR_VAR 0 9
62488: PUSH
62489: LD_VAR 0 4
62493: PUSH
62494: LD_VAR 0 8
62498: PUSH
62499: LD_VAR 0 7
62503: UNION
62504: PUSH
62505: LD_VAR 0 6
62509: UNION
62510: DIFF
62511: PPUSH
62512: LD_INT 2
62514: PPUSH
62515: CALL 53843 0 2
62519: ST_TO_ADDR
// p := [ ] ;
62520: LD_ADDR_VAR 0 11
62524: PUSH
62525: EMPTY
62526: ST_TO_ADDR
// if sort then
62527: LD_VAR 0 9
62531: IFFALSE 62647
// for i = 1 to 6 - eng do
62533: LD_ADDR_VAR 0 3
62537: PUSH
62538: DOUBLE
62539: LD_INT 1
62541: DEC
62542: ST_TO_ADDR
62543: LD_INT 6
62545: PUSH
62546: LD_VAR 0 6
62550: MINUS
62551: PUSH
62552: FOR_TO
62553: IFFALSE 62645
// begin if i = sort then
62555: LD_VAR 0 3
62559: PUSH
62560: LD_VAR 0 9
62564: EQUAL
62565: IFFALSE 62569
// break ;
62567: GO 62645
// if GetClass ( i ) = 2 then
62569: LD_VAR 0 3
62573: PPUSH
62574: CALL_OW 257
62578: PUSH
62579: LD_INT 2
62581: EQUAL
62582: IFFALSE 62586
// continue ;
62584: GO 62552
// p := Insert ( p , p + 1 , sort [ i ] ) ;
62586: LD_ADDR_VAR 0 11
62590: PUSH
62591: LD_VAR 0 11
62595: PPUSH
62596: LD_VAR 0 11
62600: PUSH
62601: LD_INT 1
62603: PLUS
62604: PPUSH
62605: LD_VAR 0 9
62609: PUSH
62610: LD_VAR 0 3
62614: ARRAY
62615: PPUSH
62616: CALL_OW 2
62620: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
62621: LD_ADDR_VAR 0 4
62625: PUSH
62626: LD_VAR 0 4
62630: PUSH
62631: LD_VAR 0 9
62635: PUSH
62636: LD_VAR 0 3
62640: ARRAY
62641: DIFF
62642: ST_TO_ADDR
// end ;
62643: GO 62552
62645: POP
62646: POP
// if p then
62647: LD_VAR 0 11
62651: IFFALSE 62676
// result := Replace ( result , 2 , p ) ;
62653: LD_ADDR_VAR 0 2
62657: PUSH
62658: LD_VAR 0 2
62662: PPUSH
62663: LD_INT 2
62665: PPUSH
62666: LD_VAR 0 11
62670: PPUSH
62671: CALL_OW 1
62675: ST_TO_ADDR
// end ; exit ;
62676: GO 64064
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
62678: LD_EXP 72
62682: PUSH
62683: LD_EXP 71
62687: PUSH
62688: LD_VAR 0 1
62692: ARRAY
62693: ARRAY
62694: NOT
62695: PUSH
62696: LD_EXP 45
62700: PUSH
62701: LD_VAR 0 1
62705: ARRAY
62706: PPUSH
62707: LD_INT 30
62709: PUSH
62710: LD_INT 3
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PPUSH
62717: CALL_OW 72
62721: AND
62722: PUSH
62723: LD_EXP 50
62727: PUSH
62728: LD_VAR 0 1
62732: ARRAY
62733: AND
62734: IFFALSE 63342
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
62736: LD_ADDR_EXP 87
62740: PUSH
62741: LD_EXP 87
62745: PPUSH
62746: LD_VAR 0 1
62750: PPUSH
62751: LD_INT 5
62753: PPUSH
62754: CALL_OW 1
62758: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
62759: LD_ADDR_VAR 0 2
62763: PUSH
62764: LD_INT 0
62766: PUSH
62767: LD_INT 0
62769: PUSH
62770: LD_INT 0
62772: PUSH
62773: LD_INT 0
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: ST_TO_ADDR
// if sci > 1 then
62782: LD_VAR 0 8
62786: PUSH
62787: LD_INT 1
62789: GREATER
62790: IFFALSE 62818
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
62792: LD_ADDR_VAR 0 4
62796: PUSH
62797: LD_VAR 0 4
62801: PUSH
62802: LD_VAR 0 8
62806: PUSH
62807: LD_VAR 0 8
62811: PUSH
62812: LD_INT 1
62814: ARRAY
62815: DIFF
62816: DIFF
62817: ST_TO_ADDR
// if tmp and not sci then
62818: LD_VAR 0 4
62822: PUSH
62823: LD_VAR 0 8
62827: NOT
62828: AND
62829: IFFALSE 62898
// begin sort := SortBySkill ( tmp , 4 ) ;
62831: LD_ADDR_VAR 0 9
62835: PUSH
62836: LD_VAR 0 4
62840: PPUSH
62841: LD_INT 4
62843: PPUSH
62844: CALL 53843 0 2
62848: ST_TO_ADDR
// if sort then
62849: LD_VAR 0 9
62853: IFFALSE 62869
// p := sort [ 1 ] ;
62855: LD_ADDR_VAR 0 11
62859: PUSH
62860: LD_VAR 0 9
62864: PUSH
62865: LD_INT 1
62867: ARRAY
62868: ST_TO_ADDR
// if p then
62869: LD_VAR 0 11
62873: IFFALSE 62898
// result := Replace ( result , 4 , p ) ;
62875: LD_ADDR_VAR 0 2
62879: PUSH
62880: LD_VAR 0 2
62884: PPUSH
62885: LD_INT 4
62887: PPUSH
62888: LD_VAR 0 11
62892: PPUSH
62893: CALL_OW 1
62897: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
62898: LD_ADDR_VAR 0 4
62902: PUSH
62903: LD_VAR 0 4
62907: PUSH
62908: LD_VAR 0 7
62912: DIFF
62913: ST_TO_ADDR
// if tmp and mech < 6 then
62914: LD_VAR 0 4
62918: PUSH
62919: LD_VAR 0 7
62923: PUSH
62924: LD_INT 6
62926: LESS
62927: AND
62928: IFFALSE 63116
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
62930: LD_ADDR_VAR 0 9
62934: PUSH
62935: LD_VAR 0 4
62939: PUSH
62940: LD_VAR 0 8
62944: PUSH
62945: LD_VAR 0 7
62949: UNION
62950: DIFF
62951: PPUSH
62952: LD_INT 3
62954: PPUSH
62955: CALL 53843 0 2
62959: ST_TO_ADDR
// p := [ ] ;
62960: LD_ADDR_VAR 0 11
62964: PUSH
62965: EMPTY
62966: ST_TO_ADDR
// if sort then
62967: LD_VAR 0 9
62971: IFFALSE 63087
// for i = 1 to 6 - mech do
62973: LD_ADDR_VAR 0 3
62977: PUSH
62978: DOUBLE
62979: LD_INT 1
62981: DEC
62982: ST_TO_ADDR
62983: LD_INT 6
62985: PUSH
62986: LD_VAR 0 7
62990: MINUS
62991: PUSH
62992: FOR_TO
62993: IFFALSE 63085
// begin if i = sort then
62995: LD_VAR 0 3
62999: PUSH
63000: LD_VAR 0 9
63004: EQUAL
63005: IFFALSE 63009
// break ;
63007: GO 63085
// if GetClass ( i ) = 3 then
63009: LD_VAR 0 3
63013: PPUSH
63014: CALL_OW 257
63018: PUSH
63019: LD_INT 3
63021: EQUAL
63022: IFFALSE 63026
// continue ;
63024: GO 62992
// p := Insert ( p , p + 1 , sort [ i ] ) ;
63026: LD_ADDR_VAR 0 11
63030: PUSH
63031: LD_VAR 0 11
63035: PPUSH
63036: LD_VAR 0 11
63040: PUSH
63041: LD_INT 1
63043: PLUS
63044: PPUSH
63045: LD_VAR 0 9
63049: PUSH
63050: LD_VAR 0 3
63054: ARRAY
63055: PPUSH
63056: CALL_OW 2
63060: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
63061: LD_ADDR_VAR 0 4
63065: PUSH
63066: LD_VAR 0 4
63070: PUSH
63071: LD_VAR 0 9
63075: PUSH
63076: LD_VAR 0 3
63080: ARRAY
63081: DIFF
63082: ST_TO_ADDR
// end ;
63083: GO 62992
63085: POP
63086: POP
// if p then
63087: LD_VAR 0 11
63091: IFFALSE 63116
// result := Replace ( result , 3 , p ) ;
63093: LD_ADDR_VAR 0 2
63097: PUSH
63098: LD_VAR 0 2
63102: PPUSH
63103: LD_INT 3
63105: PPUSH
63106: LD_VAR 0 11
63110: PPUSH
63111: CALL_OW 1
63115: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
63116: LD_ADDR_VAR 0 4
63120: PUSH
63121: LD_VAR 0 4
63125: PUSH
63126: LD_VAR 0 6
63130: DIFF
63131: ST_TO_ADDR
// if tmp and eng < 6 then
63132: LD_VAR 0 4
63136: PUSH
63137: LD_VAR 0 6
63141: PUSH
63142: LD_INT 6
63144: LESS
63145: AND
63146: IFFALSE 63340
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
63148: LD_ADDR_VAR 0 9
63152: PUSH
63153: LD_VAR 0 4
63157: PUSH
63158: LD_VAR 0 8
63162: PUSH
63163: LD_VAR 0 7
63167: UNION
63168: PUSH
63169: LD_VAR 0 6
63173: UNION
63174: DIFF
63175: PPUSH
63176: LD_INT 2
63178: PPUSH
63179: CALL 53843 0 2
63183: ST_TO_ADDR
// p := [ ] ;
63184: LD_ADDR_VAR 0 11
63188: PUSH
63189: EMPTY
63190: ST_TO_ADDR
// if sort then
63191: LD_VAR 0 9
63195: IFFALSE 63311
// for i = 1 to 6 - eng do
63197: LD_ADDR_VAR 0 3
63201: PUSH
63202: DOUBLE
63203: LD_INT 1
63205: DEC
63206: ST_TO_ADDR
63207: LD_INT 6
63209: PUSH
63210: LD_VAR 0 6
63214: MINUS
63215: PUSH
63216: FOR_TO
63217: IFFALSE 63309
// begin if i = sort then
63219: LD_VAR 0 3
63223: PUSH
63224: LD_VAR 0 9
63228: EQUAL
63229: IFFALSE 63233
// break ;
63231: GO 63309
// if GetClass ( i ) = 2 then
63233: LD_VAR 0 3
63237: PPUSH
63238: CALL_OW 257
63242: PUSH
63243: LD_INT 2
63245: EQUAL
63246: IFFALSE 63250
// continue ;
63248: GO 63216
// p := Insert ( p , p + 1 , sort [ i ] ) ;
63250: LD_ADDR_VAR 0 11
63254: PUSH
63255: LD_VAR 0 11
63259: PPUSH
63260: LD_VAR 0 11
63264: PUSH
63265: LD_INT 1
63267: PLUS
63268: PPUSH
63269: LD_VAR 0 9
63273: PUSH
63274: LD_VAR 0 3
63278: ARRAY
63279: PPUSH
63280: CALL_OW 2
63284: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
63285: LD_ADDR_VAR 0 4
63289: PUSH
63290: LD_VAR 0 4
63294: PUSH
63295: LD_VAR 0 9
63299: PUSH
63300: LD_VAR 0 3
63304: ARRAY
63305: DIFF
63306: ST_TO_ADDR
// end ;
63307: GO 63216
63309: POP
63310: POP
// if p then
63311: LD_VAR 0 11
63315: IFFALSE 63340
// result := Replace ( result , 2 , p ) ;
63317: LD_ADDR_VAR 0 2
63321: PUSH
63322: LD_VAR 0 2
63326: PPUSH
63327: LD_INT 2
63329: PPUSH
63330: LD_VAR 0 11
63334: PPUSH
63335: CALL_OW 1
63339: ST_TO_ADDR
// end ; exit ;
63340: GO 64064
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
63342: LD_EXP 72
63346: PUSH
63347: LD_EXP 71
63351: PUSH
63352: LD_VAR 0 1
63356: ARRAY
63357: ARRAY
63358: NOT
63359: PUSH
63360: LD_EXP 45
63364: PUSH
63365: LD_VAR 0 1
63369: ARRAY
63370: PPUSH
63371: LD_INT 30
63373: PUSH
63374: LD_INT 3
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PPUSH
63381: CALL_OW 72
63385: AND
63386: PUSH
63387: LD_EXP 50
63391: PUSH
63392: LD_VAR 0 1
63396: ARRAY
63397: NOT
63398: AND
63399: IFFALSE 64064
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
63401: LD_ADDR_EXP 87
63405: PUSH
63406: LD_EXP 87
63410: PPUSH
63411: LD_VAR 0 1
63415: PPUSH
63416: LD_INT 6
63418: PPUSH
63419: CALL_OW 1
63423: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
63424: LD_ADDR_VAR 0 2
63428: PUSH
63429: LD_INT 0
63431: PUSH
63432: LD_INT 0
63434: PUSH
63435: LD_INT 0
63437: PUSH
63438: LD_INT 0
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: ST_TO_ADDR
// if sci >= 1 then
63447: LD_VAR 0 8
63451: PUSH
63452: LD_INT 1
63454: GREATEREQUAL
63455: IFFALSE 63477
// tmp := tmp diff sci [ 1 ] ;
63457: LD_ADDR_VAR 0 4
63461: PUSH
63462: LD_VAR 0 4
63466: PUSH
63467: LD_VAR 0 8
63471: PUSH
63472: LD_INT 1
63474: ARRAY
63475: DIFF
63476: ST_TO_ADDR
// if tmp and not sci then
63477: LD_VAR 0 4
63481: PUSH
63482: LD_VAR 0 8
63486: NOT
63487: AND
63488: IFFALSE 63557
// begin sort := SortBySkill ( tmp , 4 ) ;
63490: LD_ADDR_VAR 0 9
63494: PUSH
63495: LD_VAR 0 4
63499: PPUSH
63500: LD_INT 4
63502: PPUSH
63503: CALL 53843 0 2
63507: ST_TO_ADDR
// if sort then
63508: LD_VAR 0 9
63512: IFFALSE 63528
// p := sort [ 1 ] ;
63514: LD_ADDR_VAR 0 11
63518: PUSH
63519: LD_VAR 0 9
63523: PUSH
63524: LD_INT 1
63526: ARRAY
63527: ST_TO_ADDR
// if p then
63528: LD_VAR 0 11
63532: IFFALSE 63557
// result := Replace ( result , 4 , p ) ;
63534: LD_ADDR_VAR 0 2
63538: PUSH
63539: LD_VAR 0 2
63543: PPUSH
63544: LD_INT 4
63546: PPUSH
63547: LD_VAR 0 11
63551: PPUSH
63552: CALL_OW 1
63556: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
63557: LD_ADDR_VAR 0 4
63561: PUSH
63562: LD_VAR 0 4
63566: PUSH
63567: LD_VAR 0 7
63571: DIFF
63572: ST_TO_ADDR
// if tmp and mech < 6 then
63573: LD_VAR 0 4
63577: PUSH
63578: LD_VAR 0 7
63582: PUSH
63583: LD_INT 6
63585: LESS
63586: AND
63587: IFFALSE 63769
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
63589: LD_ADDR_VAR 0 9
63593: PUSH
63594: LD_VAR 0 4
63598: PUSH
63599: LD_VAR 0 7
63603: DIFF
63604: PPUSH
63605: LD_INT 3
63607: PPUSH
63608: CALL 53843 0 2
63612: ST_TO_ADDR
// p := [ ] ;
63613: LD_ADDR_VAR 0 11
63617: PUSH
63618: EMPTY
63619: ST_TO_ADDR
// if sort then
63620: LD_VAR 0 9
63624: IFFALSE 63740
// for i = 1 to 6 - mech do
63626: LD_ADDR_VAR 0 3
63630: PUSH
63631: DOUBLE
63632: LD_INT 1
63634: DEC
63635: ST_TO_ADDR
63636: LD_INT 6
63638: PUSH
63639: LD_VAR 0 7
63643: MINUS
63644: PUSH
63645: FOR_TO
63646: IFFALSE 63738
// begin if i = sort then
63648: LD_VAR 0 3
63652: PUSH
63653: LD_VAR 0 9
63657: EQUAL
63658: IFFALSE 63662
// break ;
63660: GO 63738
// if GetClass ( i ) = 3 then
63662: LD_VAR 0 3
63666: PPUSH
63667: CALL_OW 257
63671: PUSH
63672: LD_INT 3
63674: EQUAL
63675: IFFALSE 63679
// continue ;
63677: GO 63645
// p := Insert ( p , p + 1 , sort [ i ] ) ;
63679: LD_ADDR_VAR 0 11
63683: PUSH
63684: LD_VAR 0 11
63688: PPUSH
63689: LD_VAR 0 11
63693: PUSH
63694: LD_INT 1
63696: PLUS
63697: PPUSH
63698: LD_VAR 0 9
63702: PUSH
63703: LD_VAR 0 3
63707: ARRAY
63708: PPUSH
63709: CALL_OW 2
63713: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
63714: LD_ADDR_VAR 0 4
63718: PUSH
63719: LD_VAR 0 4
63723: PUSH
63724: LD_VAR 0 9
63728: PUSH
63729: LD_VAR 0 3
63733: ARRAY
63734: DIFF
63735: ST_TO_ADDR
// end ;
63736: GO 63645
63738: POP
63739: POP
// if p then
63740: LD_VAR 0 11
63744: IFFALSE 63769
// result := Replace ( result , 3 , p ) ;
63746: LD_ADDR_VAR 0 2
63750: PUSH
63751: LD_VAR 0 2
63755: PPUSH
63756: LD_INT 3
63758: PPUSH
63759: LD_VAR 0 11
63763: PPUSH
63764: CALL_OW 1
63768: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
63769: LD_ADDR_VAR 0 4
63773: PUSH
63774: LD_VAR 0 4
63778: PUSH
63779: LD_VAR 0 6
63783: DIFF
63784: ST_TO_ADDR
// if tmp and eng < 4 then
63785: LD_VAR 0 4
63789: PUSH
63790: LD_VAR 0 6
63794: PUSH
63795: LD_INT 4
63797: LESS
63798: AND
63799: IFFALSE 63989
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
63801: LD_ADDR_VAR 0 9
63805: PUSH
63806: LD_VAR 0 4
63810: PUSH
63811: LD_VAR 0 7
63815: PUSH
63816: LD_VAR 0 6
63820: UNION
63821: DIFF
63822: PPUSH
63823: LD_INT 2
63825: PPUSH
63826: CALL 53843 0 2
63830: ST_TO_ADDR
// p := [ ] ;
63831: LD_ADDR_VAR 0 11
63835: PUSH
63836: EMPTY
63837: ST_TO_ADDR
// if sort then
63838: LD_VAR 0 9
63842: IFFALSE 63958
// for i = 1 to 4 - eng do
63844: LD_ADDR_VAR 0 3
63848: PUSH
63849: DOUBLE
63850: LD_INT 1
63852: DEC
63853: ST_TO_ADDR
63854: LD_INT 4
63856: PUSH
63857: LD_VAR 0 6
63861: MINUS
63862: PUSH
63863: FOR_TO
63864: IFFALSE 63956
// begin if i = sort then
63866: LD_VAR 0 3
63870: PUSH
63871: LD_VAR 0 9
63875: EQUAL
63876: IFFALSE 63880
// break ;
63878: GO 63956
// if GetClass ( i ) = 2 then
63880: LD_VAR 0 3
63884: PPUSH
63885: CALL_OW 257
63889: PUSH
63890: LD_INT 2
63892: EQUAL
63893: IFFALSE 63897
// continue ;
63895: GO 63863
// p := Insert ( p , p + 1 , sort [ i ] ) ;
63897: LD_ADDR_VAR 0 11
63901: PUSH
63902: LD_VAR 0 11
63906: PPUSH
63907: LD_VAR 0 11
63911: PUSH
63912: LD_INT 1
63914: PLUS
63915: PPUSH
63916: LD_VAR 0 9
63920: PUSH
63921: LD_VAR 0 3
63925: ARRAY
63926: PPUSH
63927: CALL_OW 2
63931: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
63932: LD_ADDR_VAR 0 4
63936: PUSH
63937: LD_VAR 0 4
63941: PUSH
63942: LD_VAR 0 9
63946: PUSH
63947: LD_VAR 0 3
63951: ARRAY
63952: DIFF
63953: ST_TO_ADDR
// end ;
63954: GO 63863
63956: POP
63957: POP
// if p then
63958: LD_VAR 0 11
63962: IFFALSE 63987
// result := Replace ( result , 2 , p ) ;
63964: LD_ADDR_VAR 0 2
63968: PUSH
63969: LD_VAR 0 2
63973: PPUSH
63974: LD_INT 2
63976: PPUSH
63977: LD_VAR 0 11
63981: PPUSH
63982: CALL_OW 1
63986: ST_TO_ADDR
// end else
63987: GO 64033
// for i = eng downto 5 do
63989: LD_ADDR_VAR 0 3
63993: PUSH
63994: DOUBLE
63995: LD_VAR 0 6
63999: INC
64000: ST_TO_ADDR
64001: LD_INT 5
64003: PUSH
64004: FOR_DOWNTO
64005: IFFALSE 64031
// tmp := tmp union eng [ i ] ;
64007: LD_ADDR_VAR 0 4
64011: PUSH
64012: LD_VAR 0 4
64016: PUSH
64017: LD_VAR 0 6
64021: PUSH
64022: LD_VAR 0 3
64026: ARRAY
64027: UNION
64028: ST_TO_ADDR
64029: GO 64004
64031: POP
64032: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
64033: LD_ADDR_VAR 0 2
64037: PUSH
64038: LD_VAR 0 2
64042: PPUSH
64043: LD_INT 1
64045: PPUSH
64046: LD_VAR 0 4
64050: PUSH
64051: LD_VAR 0 5
64055: DIFF
64056: PPUSH
64057: CALL_OW 1
64061: ST_TO_ADDR
// exit ;
64062: GO 64064
// end ; end ;
64064: LD_VAR 0 2
64068: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
64069: LD_INT 0
64071: PPUSH
64072: PPUSH
64073: PPUSH
// if not mc_bases then
64074: LD_EXP 45
64078: NOT
64079: IFFALSE 64083
// exit ;
64081: GO 64189
// for i = 1 to mc_bases do
64083: LD_ADDR_VAR 0 2
64087: PUSH
64088: DOUBLE
64089: LD_INT 1
64091: DEC
64092: ST_TO_ADDR
64093: LD_EXP 45
64097: PUSH
64098: FOR_TO
64099: IFFALSE 64180
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
64101: LD_ADDR_VAR 0 3
64105: PUSH
64106: LD_EXP 45
64110: PUSH
64111: LD_VAR 0 2
64115: ARRAY
64116: PPUSH
64117: LD_INT 21
64119: PUSH
64120: LD_INT 3
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: LD_INT 3
64129: PUSH
64130: LD_INT 24
64132: PUSH
64133: LD_INT 1000
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PPUSH
64148: CALL_OW 72
64152: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
64153: LD_ADDR_EXP 46
64157: PUSH
64158: LD_EXP 46
64162: PPUSH
64163: LD_VAR 0 2
64167: PPUSH
64168: LD_VAR 0 3
64172: PPUSH
64173: CALL_OW 1
64177: ST_TO_ADDR
// end ;
64178: GO 64098
64180: POP
64181: POP
// RaiseSailEvent ( 101 ) ;
64182: LD_INT 101
64184: PPUSH
64185: CALL_OW 427
// end ;
64189: LD_VAR 0 1
64193: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
64194: LD_INT 0
64196: PPUSH
64197: PPUSH
64198: PPUSH
64199: PPUSH
64200: PPUSH
64201: PPUSH
64202: PPUSH
// if not mc_bases then
64203: LD_EXP 45
64207: NOT
64208: IFFALSE 64212
// exit ;
64210: GO 64774
// for i = 1 to mc_bases do
64212: LD_ADDR_VAR 0 2
64216: PUSH
64217: DOUBLE
64218: LD_INT 1
64220: DEC
64221: ST_TO_ADDR
64222: LD_EXP 45
64226: PUSH
64227: FOR_TO
64228: IFFALSE 64765
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
64230: LD_ADDR_VAR 0 5
64234: PUSH
64235: LD_EXP 45
64239: PUSH
64240: LD_VAR 0 2
64244: ARRAY
64245: PUSH
64246: LD_EXP 74
64250: PUSH
64251: LD_VAR 0 2
64255: ARRAY
64256: UNION
64257: PPUSH
64258: LD_INT 21
64260: PUSH
64261: LD_INT 1
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 1
64270: PUSH
64271: LD_INT 3
64273: PUSH
64274: LD_INT 54
64276: PUSH
64277: EMPTY
64278: LIST
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 3
64286: PUSH
64287: LD_INT 24
64289: PUSH
64290: LD_INT 800
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: LIST
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PPUSH
64310: CALL_OW 72
64314: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
64315: LD_ADDR_VAR 0 6
64319: PUSH
64320: LD_EXP 45
64324: PUSH
64325: LD_VAR 0 2
64329: ARRAY
64330: PPUSH
64331: LD_INT 21
64333: PUSH
64334: LD_INT 1
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 1
64343: PUSH
64344: LD_INT 3
64346: PUSH
64347: LD_INT 54
64349: PUSH
64350: EMPTY
64351: LIST
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_INT 3
64359: PUSH
64360: LD_INT 24
64362: PUSH
64363: LD_INT 250
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: LIST
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PPUSH
64383: CALL_OW 72
64387: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
64388: LD_ADDR_VAR 0 7
64392: PUSH
64393: LD_VAR 0 5
64397: PUSH
64398: LD_VAR 0 6
64402: DIFF
64403: ST_TO_ADDR
// if not need_heal_1 then
64404: LD_VAR 0 6
64408: NOT
64409: IFFALSE 64442
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
64411: LD_ADDR_EXP 48
64415: PUSH
64416: LD_EXP 48
64420: PPUSH
64421: LD_VAR 0 2
64425: PUSH
64426: LD_INT 1
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PPUSH
64433: EMPTY
64434: PPUSH
64435: CALL 24294 0 3
64439: ST_TO_ADDR
64440: GO 64512
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
64442: LD_ADDR_EXP 48
64446: PUSH
64447: LD_EXP 48
64451: PPUSH
64452: LD_VAR 0 2
64456: PUSH
64457: LD_INT 1
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PPUSH
64464: LD_EXP 48
64468: PUSH
64469: LD_VAR 0 2
64473: ARRAY
64474: PUSH
64475: LD_INT 1
64477: ARRAY
64478: PPUSH
64479: LD_INT 3
64481: PUSH
64482: LD_INT 24
64484: PUSH
64485: LD_INT 1000
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PPUSH
64496: CALL_OW 72
64500: PUSH
64501: LD_VAR 0 6
64505: UNION
64506: PPUSH
64507: CALL 24294 0 3
64511: ST_TO_ADDR
// if not need_heal_2 then
64512: LD_VAR 0 7
64516: NOT
64517: IFFALSE 64550
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
64519: LD_ADDR_EXP 48
64523: PUSH
64524: LD_EXP 48
64528: PPUSH
64529: LD_VAR 0 2
64533: PUSH
64534: LD_INT 2
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PPUSH
64541: EMPTY
64542: PPUSH
64543: CALL 24294 0 3
64547: ST_TO_ADDR
64548: GO 64582
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
64550: LD_ADDR_EXP 48
64554: PUSH
64555: LD_EXP 48
64559: PPUSH
64560: LD_VAR 0 2
64564: PUSH
64565: LD_INT 2
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PPUSH
64572: LD_VAR 0 7
64576: PPUSH
64577: CALL 24294 0 3
64581: ST_TO_ADDR
// if need_heal_2 then
64582: LD_VAR 0 7
64586: IFFALSE 64747
// for j in need_heal_2 do
64588: LD_ADDR_VAR 0 3
64592: PUSH
64593: LD_VAR 0 7
64597: PUSH
64598: FOR_IN
64599: IFFALSE 64745
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
64601: LD_ADDR_VAR 0 5
64605: PUSH
64606: LD_EXP 45
64610: PUSH
64611: LD_VAR 0 2
64615: ARRAY
64616: PPUSH
64617: LD_INT 2
64619: PUSH
64620: LD_INT 30
64622: PUSH
64623: LD_INT 6
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 30
64632: PUSH
64633: LD_INT 7
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 30
64642: PUSH
64643: LD_INT 8
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 30
64652: PUSH
64653: LD_INT 0
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 30
64662: PUSH
64663: LD_INT 1
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: PPUSH
64678: CALL_OW 72
64682: ST_TO_ADDR
// if tmp then
64683: LD_VAR 0 5
64687: IFFALSE 64743
// begin k := NearestUnitToUnit ( tmp , j ) ;
64689: LD_ADDR_VAR 0 4
64693: PUSH
64694: LD_VAR 0 5
64698: PPUSH
64699: LD_VAR 0 3
64703: PPUSH
64704: CALL_OW 74
64708: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
64709: LD_VAR 0 3
64713: PPUSH
64714: LD_VAR 0 4
64718: PPUSH
64719: CALL_OW 296
64723: PUSH
64724: LD_INT 5
64726: GREATER
64727: IFFALSE 64743
// ComMoveUnit ( j , k ) ;
64729: LD_VAR 0 3
64733: PPUSH
64734: LD_VAR 0 4
64738: PPUSH
64739: CALL_OW 112
// end ; end ;
64743: GO 64598
64745: POP
64746: POP
// if not need_heal_1 and not need_heal_2 then
64747: LD_VAR 0 6
64751: NOT
64752: PUSH
64753: LD_VAR 0 7
64757: NOT
64758: AND
64759: IFFALSE 64763
// continue ;
64761: GO 64227
// end ;
64763: GO 64227
64765: POP
64766: POP
// RaiseSailEvent ( 102 ) ;
64767: LD_INT 102
64769: PPUSH
64770: CALL_OW 427
// end ;
64774: LD_VAR 0 1
64778: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
64779: LD_INT 0
64781: PPUSH
64782: PPUSH
64783: PPUSH
64784: PPUSH
64785: PPUSH
64786: PPUSH
64787: PPUSH
64788: PPUSH
// if not mc_bases then
64789: LD_EXP 45
64793: NOT
64794: IFFALSE 64798
// exit ;
64796: GO 65633
// for i = 1 to mc_bases do
64798: LD_ADDR_VAR 0 2
64802: PUSH
64803: DOUBLE
64804: LD_INT 1
64806: DEC
64807: ST_TO_ADDR
64808: LD_EXP 45
64812: PUSH
64813: FOR_TO
64814: IFFALSE 65631
// begin if not mc_building_need_repair [ i ] then
64816: LD_EXP 46
64820: PUSH
64821: LD_VAR 0 2
64825: ARRAY
64826: NOT
64827: IFFALSE 65001
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
64829: LD_ADDR_VAR 0 6
64833: PUSH
64834: LD_EXP 64
64838: PUSH
64839: LD_VAR 0 2
64843: ARRAY
64844: PPUSH
64845: LD_INT 3
64847: PUSH
64848: LD_INT 24
64850: PUSH
64851: LD_INT 1000
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 2
64864: PUSH
64865: LD_INT 34
64867: PUSH
64868: LD_INT 13
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 34
64877: PUSH
64878: LD_INT 52
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: LIST
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PPUSH
64894: CALL_OW 72
64898: ST_TO_ADDR
// if cranes then
64899: LD_VAR 0 6
64903: IFFALSE 64965
// for j in cranes do
64905: LD_ADDR_VAR 0 3
64909: PUSH
64910: LD_VAR 0 6
64914: PUSH
64915: FOR_IN
64916: IFFALSE 64963
// if not IsInArea ( j , mc_parking [ i ] ) then
64918: LD_VAR 0 3
64922: PPUSH
64923: LD_EXP 69
64927: PUSH
64928: LD_VAR 0 2
64932: ARRAY
64933: PPUSH
64934: CALL_OW 308
64938: NOT
64939: IFFALSE 64961
// ComMoveToArea ( j , mc_parking [ i ] ) ;
64941: LD_VAR 0 3
64945: PPUSH
64946: LD_EXP 69
64950: PUSH
64951: LD_VAR 0 2
64955: ARRAY
64956: PPUSH
64957: CALL_OW 113
64961: GO 64915
64963: POP
64964: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
64965: LD_ADDR_EXP 47
64969: PUSH
64970: LD_EXP 47
64974: PPUSH
64975: LD_VAR 0 2
64979: PPUSH
64980: EMPTY
64981: PPUSH
64982: CALL_OW 1
64986: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
64987: LD_VAR 0 2
64991: PPUSH
64992: LD_INT 101
64994: PPUSH
64995: CALL 59902 0 2
// continue ;
64999: GO 64813
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
65001: LD_ADDR_EXP 51
65005: PUSH
65006: LD_EXP 51
65010: PPUSH
65011: LD_VAR 0 2
65015: PPUSH
65016: EMPTY
65017: PPUSH
65018: CALL_OW 1
65022: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
65023: LD_VAR 0 2
65027: PPUSH
65028: LD_INT 103
65030: PPUSH
65031: CALL 59902 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
65035: LD_ADDR_VAR 0 5
65039: PUSH
65040: LD_EXP 45
65044: PUSH
65045: LD_VAR 0 2
65049: ARRAY
65050: PUSH
65051: LD_EXP 74
65055: PUSH
65056: LD_VAR 0 2
65060: ARRAY
65061: UNION
65062: PPUSH
65063: LD_INT 2
65065: PUSH
65066: LD_INT 25
65068: PUSH
65069: LD_INT 2
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 25
65078: PUSH
65079: LD_INT 16
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: LIST
65090: PUSH
65091: EMPTY
65092: LIST
65093: PPUSH
65094: CALL_OW 72
65098: PUSH
65099: LD_EXP 48
65103: PUSH
65104: LD_VAR 0 2
65108: ARRAY
65109: PUSH
65110: LD_INT 1
65112: ARRAY
65113: PUSH
65114: LD_EXP 48
65118: PUSH
65119: LD_VAR 0 2
65123: ARRAY
65124: PUSH
65125: LD_INT 2
65127: ARRAY
65128: UNION
65129: DIFF
65130: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
65131: LD_ADDR_VAR 0 6
65135: PUSH
65136: LD_EXP 64
65140: PUSH
65141: LD_VAR 0 2
65145: ARRAY
65146: PPUSH
65147: LD_INT 2
65149: PUSH
65150: LD_INT 34
65152: PUSH
65153: LD_INT 13
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 34
65162: PUSH
65163: LD_INT 52
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: LIST
65174: PPUSH
65175: CALL_OW 72
65179: ST_TO_ADDR
// if cranes then
65180: LD_VAR 0 6
65184: IFFALSE 65320
// begin for j in cranes do
65186: LD_ADDR_VAR 0 3
65190: PUSH
65191: LD_VAR 0 6
65195: PUSH
65196: FOR_IN
65197: IFFALSE 65318
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
65199: LD_VAR 0 3
65203: PPUSH
65204: CALL_OW 256
65208: PUSH
65209: LD_INT 500
65211: GREATEREQUAL
65212: PUSH
65213: LD_VAR 0 3
65217: PPUSH
65218: CALL_OW 314
65222: NOT
65223: AND
65224: IFFALSE 65258
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
65226: LD_VAR 0 3
65230: PPUSH
65231: LD_EXP 46
65235: PUSH
65236: LD_VAR 0 2
65240: ARRAY
65241: PPUSH
65242: LD_VAR 0 3
65246: PPUSH
65247: CALL_OW 74
65251: PPUSH
65252: CALL_OW 130
65256: GO 65316
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
65258: LD_VAR 0 3
65262: PPUSH
65263: CALL_OW 256
65267: PUSH
65268: LD_INT 500
65270: LESS
65271: PUSH
65272: LD_VAR 0 3
65276: PPUSH
65277: LD_EXP 69
65281: PUSH
65282: LD_VAR 0 2
65286: ARRAY
65287: PPUSH
65288: CALL_OW 308
65292: NOT
65293: AND
65294: IFFALSE 65316
// ComMoveToArea ( j , mc_parking [ i ] ) ;
65296: LD_VAR 0 3
65300: PPUSH
65301: LD_EXP 69
65305: PUSH
65306: LD_VAR 0 2
65310: ARRAY
65311: PPUSH
65312: CALL_OW 113
65316: GO 65196
65318: POP
65319: POP
// end ; if tmp > 3 then
65320: LD_VAR 0 5
65324: PUSH
65325: LD_INT 3
65327: GREATER
65328: IFFALSE 65348
// tmp := ShrinkArray ( tmp , 4 ) ;
65330: LD_ADDR_VAR 0 5
65334: PUSH
65335: LD_VAR 0 5
65339: PPUSH
65340: LD_INT 4
65342: PPUSH
65343: CALL 55520 0 2
65347: ST_TO_ADDR
// if not tmp then
65348: LD_VAR 0 5
65352: NOT
65353: IFFALSE 65357
// continue ;
65355: GO 64813
// for j in tmp do
65357: LD_ADDR_VAR 0 3
65361: PUSH
65362: LD_VAR 0 5
65366: PUSH
65367: FOR_IN
65368: IFFALSE 65627
// begin if IsInUnit ( j ) then
65370: LD_VAR 0 3
65374: PPUSH
65375: CALL_OW 310
65379: IFFALSE 65390
// ComExitBuilding ( j ) ;
65381: LD_VAR 0 3
65385: PPUSH
65386: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
65390: LD_VAR 0 3
65394: PUSH
65395: LD_EXP 47
65399: PUSH
65400: LD_VAR 0 2
65404: ARRAY
65405: IN
65406: NOT
65407: IFFALSE 65465
// begin SetTag ( j , 101 ) ;
65409: LD_VAR 0 3
65413: PPUSH
65414: LD_INT 101
65416: PPUSH
65417: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
65421: LD_ADDR_EXP 47
65425: PUSH
65426: LD_EXP 47
65430: PPUSH
65431: LD_VAR 0 2
65435: PUSH
65436: LD_EXP 47
65440: PUSH
65441: LD_VAR 0 2
65445: ARRAY
65446: PUSH
65447: LD_INT 1
65449: PLUS
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PPUSH
65455: LD_VAR 0 3
65459: PPUSH
65460: CALL 24294 0 3
65464: ST_TO_ADDR
// end ; wait ( 1 ) ;
65465: LD_INT 1
65467: PPUSH
65468: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
65472: LD_ADDR_VAR 0 7
65476: PUSH
65477: LD_EXP 46
65481: PUSH
65482: LD_VAR 0 2
65486: ARRAY
65487: ST_TO_ADDR
// if mc_scan [ i ] then
65488: LD_EXP 68
65492: PUSH
65493: LD_VAR 0 2
65497: ARRAY
65498: IFFALSE 65560
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
65500: LD_ADDR_VAR 0 7
65504: PUSH
65505: LD_EXP 46
65509: PUSH
65510: LD_VAR 0 2
65514: ARRAY
65515: PPUSH
65516: LD_INT 3
65518: PUSH
65519: LD_INT 30
65521: PUSH
65522: LD_INT 32
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 30
65531: PUSH
65532: LD_INT 33
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 30
65541: PUSH
65542: LD_INT 31
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: PPUSH
65555: CALL_OW 72
65559: ST_TO_ADDR
// if not to_repair_tmp then
65560: LD_VAR 0 7
65564: NOT
65565: IFFALSE 65569
// continue ;
65567: GO 65367
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
65569: LD_ADDR_VAR 0 8
65573: PUSH
65574: LD_VAR 0 7
65578: PPUSH
65579: LD_VAR 0 3
65583: PPUSH
65584: CALL_OW 74
65588: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 5 then
65589: LD_VAR 0 8
65593: PPUSH
65594: LD_INT 16
65596: PPUSH
65597: CALL 26887 0 2
65601: PUSH
65602: LD_INT 4
65604: ARRAY
65605: PUSH
65606: LD_INT 5
65608: LESS
65609: IFFALSE 65625
// ComRepairBuilding ( j , to_repair ) ;
65611: LD_VAR 0 3
65615: PPUSH
65616: LD_VAR 0 8
65620: PPUSH
65621: CALL_OW 130
// end ;
65625: GO 65367
65627: POP
65628: POP
// end ;
65629: GO 64813
65631: POP
65632: POP
// end ;
65633: LD_VAR 0 1
65637: RET
// export function MC_Heal ; var i , j , tmp ; begin
65638: LD_INT 0
65640: PPUSH
65641: PPUSH
65642: PPUSH
65643: PPUSH
// if not mc_bases then
65644: LD_EXP 45
65648: NOT
65649: IFFALSE 65653
// exit ;
65651: GO 66055
// for i = 1 to mc_bases do
65653: LD_ADDR_VAR 0 2
65657: PUSH
65658: DOUBLE
65659: LD_INT 1
65661: DEC
65662: ST_TO_ADDR
65663: LD_EXP 45
65667: PUSH
65668: FOR_TO
65669: IFFALSE 66053
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
65671: LD_EXP 48
65675: PUSH
65676: LD_VAR 0 2
65680: ARRAY
65681: PUSH
65682: LD_INT 1
65684: ARRAY
65685: NOT
65686: PUSH
65687: LD_EXP 48
65691: PUSH
65692: LD_VAR 0 2
65696: ARRAY
65697: PUSH
65698: LD_INT 2
65700: ARRAY
65701: NOT
65702: AND
65703: IFFALSE 65741
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
65705: LD_ADDR_EXP 49
65709: PUSH
65710: LD_EXP 49
65714: PPUSH
65715: LD_VAR 0 2
65719: PPUSH
65720: EMPTY
65721: PPUSH
65722: CALL_OW 1
65726: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
65727: LD_VAR 0 2
65731: PPUSH
65732: LD_INT 102
65734: PPUSH
65735: CALL 59902 0 2
// continue ;
65739: GO 65668
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
65741: LD_ADDR_VAR 0 4
65745: PUSH
65746: LD_EXP 45
65750: PUSH
65751: LD_VAR 0 2
65755: ARRAY
65756: PPUSH
65757: LD_INT 25
65759: PUSH
65760: LD_INT 4
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: PPUSH
65767: CALL_OW 72
65771: ST_TO_ADDR
// if not tmp then
65772: LD_VAR 0 4
65776: NOT
65777: IFFALSE 65781
// continue ;
65779: GO 65668
// if mc_taming [ i ] then
65781: LD_EXP 76
65785: PUSH
65786: LD_VAR 0 2
65790: ARRAY
65791: IFFALSE 65815
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
65793: LD_ADDR_EXP 76
65797: PUSH
65798: LD_EXP 76
65802: PPUSH
65803: LD_VAR 0 2
65807: PPUSH
65808: EMPTY
65809: PPUSH
65810: CALL_OW 1
65814: ST_TO_ADDR
// for j in tmp do
65815: LD_ADDR_VAR 0 3
65819: PUSH
65820: LD_VAR 0 4
65824: PUSH
65825: FOR_IN
65826: IFFALSE 66049
// begin if IsInUnit ( j ) then
65828: LD_VAR 0 3
65832: PPUSH
65833: CALL_OW 310
65837: IFFALSE 65848
// ComExitBuilding ( j ) ;
65839: LD_VAR 0 3
65843: PPUSH
65844: CALL_OW 122
// if not j in mc_healers [ i ] then
65848: LD_VAR 0 3
65852: PUSH
65853: LD_EXP 49
65857: PUSH
65858: LD_VAR 0 2
65862: ARRAY
65863: IN
65864: NOT
65865: IFFALSE 65911
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
65867: LD_ADDR_EXP 49
65871: PUSH
65872: LD_EXP 49
65876: PPUSH
65877: LD_VAR 0 2
65881: PUSH
65882: LD_EXP 49
65886: PUSH
65887: LD_VAR 0 2
65891: ARRAY
65892: PUSH
65893: LD_INT 1
65895: PLUS
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PPUSH
65901: LD_VAR 0 3
65905: PPUSH
65906: CALL 24294 0 3
65910: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
65911: LD_VAR 0 3
65915: PPUSH
65916: CALL_OW 110
65920: PUSH
65921: LD_INT 102
65923: NONEQUAL
65924: IFFALSE 65938
// SetTag ( j , 102 ) ;
65926: LD_VAR 0 3
65930: PPUSH
65931: LD_INT 102
65933: PPUSH
65934: CALL_OW 109
// Wait ( 3 ) ;
65938: LD_INT 3
65940: PPUSH
65941: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
65945: LD_EXP 48
65949: PUSH
65950: LD_VAR 0 2
65954: ARRAY
65955: PUSH
65956: LD_INT 1
65958: ARRAY
65959: IFFALSE 65991
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
65961: LD_VAR 0 3
65965: PPUSH
65966: LD_EXP 48
65970: PUSH
65971: LD_VAR 0 2
65975: ARRAY
65976: PUSH
65977: LD_INT 1
65979: ARRAY
65980: PUSH
65981: LD_INT 1
65983: ARRAY
65984: PPUSH
65985: CALL_OW 128
65989: GO 66047
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
65991: LD_VAR 0 3
65995: PPUSH
65996: CALL_OW 314
66000: NOT
66001: PUSH
66002: LD_EXP 48
66006: PUSH
66007: LD_VAR 0 2
66011: ARRAY
66012: PUSH
66013: LD_INT 2
66015: ARRAY
66016: AND
66017: IFFALSE 66047
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
66019: LD_VAR 0 3
66023: PPUSH
66024: LD_EXP 48
66028: PUSH
66029: LD_VAR 0 2
66033: ARRAY
66034: PUSH
66035: LD_INT 2
66037: ARRAY
66038: PUSH
66039: LD_INT 1
66041: ARRAY
66042: PPUSH
66043: CALL_OW 128
// end ;
66047: GO 65825
66049: POP
66050: POP
// end ;
66051: GO 65668
66053: POP
66054: POP
// end ;
66055: LD_VAR 0 1
66059: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
66060: LD_INT 0
66062: PPUSH
66063: PPUSH
66064: PPUSH
66065: PPUSH
66066: PPUSH
// if not mc_bases then
66067: LD_EXP 45
66071: NOT
66072: IFFALSE 66076
// exit ;
66074: GO 67219
// for i = 1 to mc_bases do
66076: LD_ADDR_VAR 0 2
66080: PUSH
66081: DOUBLE
66082: LD_INT 1
66084: DEC
66085: ST_TO_ADDR
66086: LD_EXP 45
66090: PUSH
66091: FOR_TO
66092: IFFALSE 67217
// begin if mc_scan [ i ] then
66094: LD_EXP 68
66098: PUSH
66099: LD_VAR 0 2
66103: ARRAY
66104: IFFALSE 66108
// continue ;
66106: GO 66091
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
66108: LD_EXP 50
66112: PUSH
66113: LD_VAR 0 2
66117: ARRAY
66118: NOT
66119: PUSH
66120: LD_EXP 52
66124: PUSH
66125: LD_VAR 0 2
66129: ARRAY
66130: NOT
66131: AND
66132: PUSH
66133: LD_EXP 51
66137: PUSH
66138: LD_VAR 0 2
66142: ARRAY
66143: AND
66144: IFFALSE 66182
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
66146: LD_ADDR_EXP 51
66150: PUSH
66151: LD_EXP 51
66155: PPUSH
66156: LD_VAR 0 2
66160: PPUSH
66161: EMPTY
66162: PPUSH
66163: CALL_OW 1
66167: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
66168: LD_VAR 0 2
66172: PPUSH
66173: LD_INT 103
66175: PPUSH
66176: CALL 59902 0 2
// continue ;
66180: GO 66091
// end ; if mc_construct_list [ i ] then
66182: LD_EXP 52
66186: PUSH
66187: LD_VAR 0 2
66191: ARRAY
66192: IFFALSE 66412
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
66194: LD_ADDR_VAR 0 4
66198: PUSH
66199: LD_EXP 45
66203: PUSH
66204: LD_VAR 0 2
66208: ARRAY
66209: PPUSH
66210: LD_INT 25
66212: PUSH
66213: LD_INT 2
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PPUSH
66220: CALL_OW 72
66224: PUSH
66225: LD_EXP 47
66229: PUSH
66230: LD_VAR 0 2
66234: ARRAY
66235: DIFF
66236: ST_TO_ADDR
// if not tmp then
66237: LD_VAR 0 4
66241: NOT
66242: IFFALSE 66246
// continue ;
66244: GO 66091
// for j in tmp do
66246: LD_ADDR_VAR 0 3
66250: PUSH
66251: LD_VAR 0 4
66255: PUSH
66256: FOR_IN
66257: IFFALSE 66408
// begin if not mc_builders [ i ] then
66259: LD_EXP 51
66263: PUSH
66264: LD_VAR 0 2
66268: ARRAY
66269: NOT
66270: IFFALSE 66328
// begin SetTag ( j , 103 ) ;
66272: LD_VAR 0 3
66276: PPUSH
66277: LD_INT 103
66279: PPUSH
66280: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
66284: LD_ADDR_EXP 51
66288: PUSH
66289: LD_EXP 51
66293: PPUSH
66294: LD_VAR 0 2
66298: PUSH
66299: LD_EXP 51
66303: PUSH
66304: LD_VAR 0 2
66308: ARRAY
66309: PUSH
66310: LD_INT 1
66312: PLUS
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PPUSH
66318: LD_VAR 0 3
66322: PPUSH
66323: CALL 24294 0 3
66327: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
66328: LD_VAR 0 3
66332: PPUSH
66333: CALL_OW 310
66337: IFFALSE 66348
// ComExitBuilding ( j ) ;
66339: LD_VAR 0 3
66343: PPUSH
66344: CALL_OW 122
// wait ( 3 ) ;
66348: LD_INT 3
66350: PPUSH
66351: CALL_OW 67
// if not mc_construct_list [ i ] then
66355: LD_EXP 52
66359: PUSH
66360: LD_VAR 0 2
66364: ARRAY
66365: NOT
66366: IFFALSE 66370
// break ;
66368: GO 66408
// if not HasTask ( j ) then
66370: LD_VAR 0 3
66374: PPUSH
66375: CALL_OW 314
66379: NOT
66380: IFFALSE 66406
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
66382: LD_VAR 0 3
66386: PPUSH
66387: LD_EXP 52
66391: PUSH
66392: LD_VAR 0 2
66396: ARRAY
66397: PUSH
66398: LD_INT 1
66400: ARRAY
66401: PPUSH
66402: CALL 27145 0 2
// end ;
66406: GO 66256
66408: POP
66409: POP
// end else
66410: GO 67215
// if mc_build_list [ i ] then
66412: LD_EXP 50
66416: PUSH
66417: LD_VAR 0 2
66421: ARRAY
66422: IFFALSE 67215
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
66424: LD_ADDR_VAR 0 5
66428: PUSH
66429: LD_EXP 45
66433: PUSH
66434: LD_VAR 0 2
66438: ARRAY
66439: PPUSH
66440: LD_INT 2
66442: PUSH
66443: LD_INT 30
66445: PUSH
66446: LD_INT 0
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 30
66455: PUSH
66456: LD_INT 1
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: LIST
66467: PPUSH
66468: CALL_OW 72
66472: ST_TO_ADDR
// if depot then
66473: LD_VAR 0 5
66477: IFFALSE 66495
// depot := depot [ 1 ] else
66479: LD_ADDR_VAR 0 5
66483: PUSH
66484: LD_VAR 0 5
66488: PUSH
66489: LD_INT 1
66491: ARRAY
66492: ST_TO_ADDR
66493: GO 66503
// depot := 0 ;
66495: LD_ADDR_VAR 0 5
66499: PUSH
66500: LD_INT 0
66502: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
66503: LD_EXP 50
66507: PUSH
66508: LD_VAR 0 2
66512: ARRAY
66513: PUSH
66514: LD_INT 1
66516: ARRAY
66517: PUSH
66518: LD_INT 1
66520: ARRAY
66521: PPUSH
66522: CALL 26975 0 1
66526: PUSH
66527: LD_EXP 45
66531: PUSH
66532: LD_VAR 0 2
66536: ARRAY
66537: PPUSH
66538: LD_INT 2
66540: PUSH
66541: LD_INT 30
66543: PUSH
66544: LD_INT 2
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: LD_INT 30
66553: PUSH
66554: LD_INT 3
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: LIST
66565: PPUSH
66566: CALL_OW 72
66570: NOT
66571: AND
66572: IFFALSE 66677
// begin for j = 1 to mc_build_list [ i ] do
66574: LD_ADDR_VAR 0 3
66578: PUSH
66579: DOUBLE
66580: LD_INT 1
66582: DEC
66583: ST_TO_ADDR
66584: LD_EXP 50
66588: PUSH
66589: LD_VAR 0 2
66593: ARRAY
66594: PUSH
66595: FOR_TO
66596: IFFALSE 66675
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
66598: LD_EXP 50
66602: PUSH
66603: LD_VAR 0 2
66607: ARRAY
66608: PUSH
66609: LD_VAR 0 3
66613: ARRAY
66614: PUSH
66615: LD_INT 1
66617: ARRAY
66618: PUSH
66619: LD_INT 2
66621: EQUAL
66622: IFFALSE 66673
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
66624: LD_ADDR_EXP 50
66628: PUSH
66629: LD_EXP 50
66633: PPUSH
66634: LD_VAR 0 2
66638: PPUSH
66639: LD_EXP 50
66643: PUSH
66644: LD_VAR 0 2
66648: ARRAY
66649: PPUSH
66650: LD_VAR 0 3
66654: PPUSH
66655: LD_INT 1
66657: PPUSH
66658: LD_INT 0
66660: PPUSH
66661: CALL 23712 0 4
66665: PPUSH
66666: CALL_OW 1
66670: ST_TO_ADDR
// break ;
66671: GO 66675
// end ;
66673: GO 66595
66675: POP
66676: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
66677: LD_EXP 50
66681: PUSH
66682: LD_VAR 0 2
66686: ARRAY
66687: PUSH
66688: LD_INT 1
66690: ARRAY
66691: PUSH
66692: LD_INT 1
66694: ARRAY
66695: PUSH
66696: LD_INT 0
66698: EQUAL
66699: PUSH
66700: LD_VAR 0 5
66704: PUSH
66705: LD_VAR 0 5
66709: PPUSH
66710: LD_EXP 50
66714: PUSH
66715: LD_VAR 0 2
66719: ARRAY
66720: PUSH
66721: LD_INT 1
66723: ARRAY
66724: PUSH
66725: LD_INT 1
66727: ARRAY
66728: PPUSH
66729: LD_EXP 50
66733: PUSH
66734: LD_VAR 0 2
66738: ARRAY
66739: PUSH
66740: LD_INT 1
66742: ARRAY
66743: PUSH
66744: LD_INT 2
66746: ARRAY
66747: PPUSH
66748: LD_EXP 50
66752: PUSH
66753: LD_VAR 0 2
66757: ARRAY
66758: PUSH
66759: LD_INT 1
66761: ARRAY
66762: PUSH
66763: LD_INT 3
66765: ARRAY
66766: PPUSH
66767: LD_EXP 50
66771: PUSH
66772: LD_VAR 0 2
66776: ARRAY
66777: PUSH
66778: LD_INT 1
66780: ARRAY
66781: PUSH
66782: LD_INT 4
66784: ARRAY
66785: PPUSH
66786: CALL 31709 0 5
66790: AND
66791: OR
66792: IFFALSE 67073
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
66794: LD_ADDR_VAR 0 4
66798: PUSH
66799: LD_EXP 45
66803: PUSH
66804: LD_VAR 0 2
66808: ARRAY
66809: PPUSH
66810: LD_INT 25
66812: PUSH
66813: LD_INT 2
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PPUSH
66820: CALL_OW 72
66824: PUSH
66825: LD_EXP 47
66829: PUSH
66830: LD_VAR 0 2
66834: ARRAY
66835: DIFF
66836: ST_TO_ADDR
// if not tmp then
66837: LD_VAR 0 4
66841: NOT
66842: IFFALSE 66846
// continue ;
66844: GO 66091
// for j in tmp do
66846: LD_ADDR_VAR 0 3
66850: PUSH
66851: LD_VAR 0 4
66855: PUSH
66856: FOR_IN
66857: IFFALSE 67069
// begin if not mc_builders [ i ] then
66859: LD_EXP 51
66863: PUSH
66864: LD_VAR 0 2
66868: ARRAY
66869: NOT
66870: IFFALSE 66928
// begin SetTag ( j , 103 ) ;
66872: LD_VAR 0 3
66876: PPUSH
66877: LD_INT 103
66879: PPUSH
66880: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
66884: LD_ADDR_EXP 51
66888: PUSH
66889: LD_EXP 51
66893: PPUSH
66894: LD_VAR 0 2
66898: PUSH
66899: LD_EXP 51
66903: PUSH
66904: LD_VAR 0 2
66908: ARRAY
66909: PUSH
66910: LD_INT 1
66912: PLUS
66913: PUSH
66914: EMPTY
66915: LIST
66916: LIST
66917: PPUSH
66918: LD_VAR 0 3
66922: PPUSH
66923: CALL 24294 0 3
66927: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
66928: LD_VAR 0 3
66932: PPUSH
66933: CALL_OW 310
66937: IFFALSE 66948
// ComExitBuilding ( j ) ;
66939: LD_VAR 0 3
66943: PPUSH
66944: CALL_OW 122
// wait ( 3 ) ;
66948: LD_INT 3
66950: PPUSH
66951: CALL_OW 67
// if not mc_build_list [ i ] then
66955: LD_EXP 50
66959: PUSH
66960: LD_VAR 0 2
66964: ARRAY
66965: NOT
66966: IFFALSE 66970
// break ;
66968: GO 67069
// if not HasTask ( j ) then
66970: LD_VAR 0 3
66974: PPUSH
66975: CALL_OW 314
66979: NOT
66980: IFFALSE 67067
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
66982: LD_VAR 0 3
66986: PPUSH
66987: LD_EXP 50
66991: PUSH
66992: LD_VAR 0 2
66996: ARRAY
66997: PUSH
66998: LD_INT 1
67000: ARRAY
67001: PUSH
67002: LD_INT 1
67004: ARRAY
67005: PPUSH
67006: LD_EXP 50
67010: PUSH
67011: LD_VAR 0 2
67015: ARRAY
67016: PUSH
67017: LD_INT 1
67019: ARRAY
67020: PUSH
67021: LD_INT 2
67023: ARRAY
67024: PPUSH
67025: LD_EXP 50
67029: PUSH
67030: LD_VAR 0 2
67034: ARRAY
67035: PUSH
67036: LD_INT 1
67038: ARRAY
67039: PUSH
67040: LD_INT 3
67042: ARRAY
67043: PPUSH
67044: LD_EXP 50
67048: PUSH
67049: LD_VAR 0 2
67053: ARRAY
67054: PUSH
67055: LD_INT 1
67057: ARRAY
67058: PUSH
67059: LD_INT 4
67061: ARRAY
67062: PPUSH
67063: CALL_OW 145
// end ;
67067: GO 66856
67069: POP
67070: POP
// end else
67071: GO 67215
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
67073: LD_EXP 45
67077: PUSH
67078: LD_VAR 0 2
67082: ARRAY
67083: PPUSH
67084: LD_EXP 50
67088: PUSH
67089: LD_VAR 0 2
67093: ARRAY
67094: PUSH
67095: LD_INT 1
67097: ARRAY
67098: PUSH
67099: LD_INT 1
67101: ARRAY
67102: PPUSH
67103: LD_EXP 50
67107: PUSH
67108: LD_VAR 0 2
67112: ARRAY
67113: PUSH
67114: LD_INT 1
67116: ARRAY
67117: PUSH
67118: LD_INT 2
67120: ARRAY
67121: PPUSH
67122: LD_EXP 50
67126: PUSH
67127: LD_VAR 0 2
67131: ARRAY
67132: PUSH
67133: LD_INT 1
67135: ARRAY
67136: PUSH
67137: LD_INT 3
67139: ARRAY
67140: PPUSH
67141: LD_EXP 50
67145: PUSH
67146: LD_VAR 0 2
67150: ARRAY
67151: PUSH
67152: LD_INT 1
67154: ARRAY
67155: PUSH
67156: LD_INT 4
67158: ARRAY
67159: PPUSH
67160: CALL 31045 0 5
67164: NOT
67165: IFFALSE 67215
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
67167: LD_ADDR_EXP 50
67171: PUSH
67172: LD_EXP 50
67176: PPUSH
67177: LD_VAR 0 2
67181: PPUSH
67182: LD_EXP 50
67186: PUSH
67187: LD_VAR 0 2
67191: ARRAY
67192: PPUSH
67193: LD_INT 1
67195: PPUSH
67196: LD_INT 1
67198: NEG
67199: PPUSH
67200: LD_INT 0
67202: PPUSH
67203: CALL 23712 0 4
67207: PPUSH
67208: CALL_OW 1
67212: ST_TO_ADDR
// continue ;
67213: GO 66091
// end ; end ; end ;
67215: GO 66091
67217: POP
67218: POP
// end ;
67219: LD_VAR 0 1
67223: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
67224: LD_INT 0
67226: PPUSH
67227: PPUSH
67228: PPUSH
67229: PPUSH
67230: PPUSH
67231: PPUSH
// if not mc_bases then
67232: LD_EXP 45
67236: NOT
67237: IFFALSE 67241
// exit ;
67239: GO 67668
// for i = 1 to mc_bases do
67241: LD_ADDR_VAR 0 2
67245: PUSH
67246: DOUBLE
67247: LD_INT 1
67249: DEC
67250: ST_TO_ADDR
67251: LD_EXP 45
67255: PUSH
67256: FOR_TO
67257: IFFALSE 67666
// begin tmp := mc_build_upgrade [ i ] ;
67259: LD_ADDR_VAR 0 4
67263: PUSH
67264: LD_EXP 77
67268: PUSH
67269: LD_VAR 0 2
67273: ARRAY
67274: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
67275: LD_ADDR_VAR 0 6
67279: PUSH
67280: LD_EXP 78
67284: PUSH
67285: LD_VAR 0 2
67289: ARRAY
67290: PPUSH
67291: LD_INT 2
67293: PUSH
67294: LD_INT 30
67296: PUSH
67297: LD_INT 6
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: LD_INT 30
67306: PUSH
67307: LD_INT 7
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: LIST
67318: PPUSH
67319: CALL_OW 72
67323: ST_TO_ADDR
// if not tmp and not lab then
67324: LD_VAR 0 4
67328: NOT
67329: PUSH
67330: LD_VAR 0 6
67334: NOT
67335: AND
67336: IFFALSE 67340
// continue ;
67338: GO 67256
// if tmp then
67340: LD_VAR 0 4
67344: IFFALSE 67464
// for j in tmp do
67346: LD_ADDR_VAR 0 3
67350: PUSH
67351: LD_VAR 0 4
67355: PUSH
67356: FOR_IN
67357: IFFALSE 67462
// begin if UpgradeCost ( j ) then
67359: LD_VAR 0 3
67363: PPUSH
67364: CALL 30705 0 1
67368: IFFALSE 67460
// begin ComUpgrade ( j ) ;
67370: LD_VAR 0 3
67374: PPUSH
67375: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
67379: LD_ADDR_EXP 77
67383: PUSH
67384: LD_EXP 77
67388: PPUSH
67389: LD_VAR 0 2
67393: PPUSH
67394: LD_EXP 77
67398: PUSH
67399: LD_VAR 0 2
67403: ARRAY
67404: PUSH
67405: LD_VAR 0 3
67409: DIFF
67410: PPUSH
67411: CALL_OW 1
67415: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
67416: LD_ADDR_EXP 52
67420: PUSH
67421: LD_EXP 52
67425: PPUSH
67426: LD_VAR 0 2
67430: PUSH
67431: LD_EXP 52
67435: PUSH
67436: LD_VAR 0 2
67440: ARRAY
67441: PUSH
67442: LD_INT 1
67444: PLUS
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PPUSH
67450: LD_VAR 0 3
67454: PPUSH
67455: CALL 24294 0 3
67459: ST_TO_ADDR
// end ; end ;
67460: GO 67356
67462: POP
67463: POP
// if not lab or not mc_lab_upgrade [ i ] then
67464: LD_VAR 0 6
67468: NOT
67469: PUSH
67470: LD_EXP 79
67474: PUSH
67475: LD_VAR 0 2
67479: ARRAY
67480: NOT
67481: OR
67482: IFFALSE 67486
// continue ;
67484: GO 67256
// for j in lab do
67486: LD_ADDR_VAR 0 3
67490: PUSH
67491: LD_VAR 0 6
67495: PUSH
67496: FOR_IN
67497: IFFALSE 67662
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
67499: LD_VAR 0 3
67503: PPUSH
67504: CALL_OW 266
67508: PUSH
67509: LD_INT 6
67511: PUSH
67512: LD_INT 7
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: IN
67519: PUSH
67520: LD_VAR 0 3
67524: PPUSH
67525: CALL_OW 461
67529: PUSH
67530: LD_INT 1
67532: NONEQUAL
67533: AND
67534: IFFALSE 67660
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
67536: LD_VAR 0 3
67540: PPUSH
67541: LD_EXP 79
67545: PUSH
67546: LD_VAR 0 2
67550: ARRAY
67551: PUSH
67552: LD_INT 1
67554: ARRAY
67555: PPUSH
67556: CALL 30910 0 2
67560: IFFALSE 67660
// begin ComCancel ( j ) ;
67562: LD_VAR 0 3
67566: PPUSH
67567: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
67571: LD_VAR 0 3
67575: PPUSH
67576: LD_EXP 79
67580: PUSH
67581: LD_VAR 0 2
67585: ARRAY
67586: PUSH
67587: LD_INT 1
67589: ARRAY
67590: PPUSH
67591: CALL_OW 207
// if not j in mc_construct_list [ i ] then
67595: LD_VAR 0 3
67599: PUSH
67600: LD_EXP 52
67604: PUSH
67605: LD_VAR 0 2
67609: ARRAY
67610: IN
67611: NOT
67612: IFFALSE 67658
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
67614: LD_ADDR_EXP 52
67618: PUSH
67619: LD_EXP 52
67623: PPUSH
67624: LD_VAR 0 2
67628: PUSH
67629: LD_EXP 52
67633: PUSH
67634: LD_VAR 0 2
67638: ARRAY
67639: PUSH
67640: LD_INT 1
67642: PLUS
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PPUSH
67648: LD_VAR 0 3
67652: PPUSH
67653: CALL 24294 0 3
67657: ST_TO_ADDR
// break ;
67658: GO 67662
// end ; end ; end ;
67660: GO 67496
67662: POP
67663: POP
// end ;
67664: GO 67256
67666: POP
67667: POP
// end ;
67668: LD_VAR 0 1
67672: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
67673: LD_INT 0
67675: PPUSH
67676: PPUSH
67677: PPUSH
67678: PPUSH
67679: PPUSH
67680: PPUSH
67681: PPUSH
67682: PPUSH
67683: PPUSH
// if not mc_bases then
67684: LD_EXP 45
67688: NOT
67689: IFFALSE 67693
// exit ;
67691: GO 68098
// for i = 1 to mc_bases do
67693: LD_ADDR_VAR 0 2
67697: PUSH
67698: DOUBLE
67699: LD_INT 1
67701: DEC
67702: ST_TO_ADDR
67703: LD_EXP 45
67707: PUSH
67708: FOR_TO
67709: IFFALSE 68096
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
67711: LD_EXP 53
67715: PUSH
67716: LD_VAR 0 2
67720: ARRAY
67721: NOT
67722: PUSH
67723: LD_EXP 45
67727: PUSH
67728: LD_VAR 0 2
67732: ARRAY
67733: PPUSH
67734: LD_INT 30
67736: PUSH
67737: LD_INT 3
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: PPUSH
67744: CALL_OW 72
67748: NOT
67749: OR
67750: IFFALSE 67754
// continue ;
67752: GO 67708
// busy := false ;
67754: LD_ADDR_VAR 0 8
67758: PUSH
67759: LD_INT 0
67761: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
67762: LD_ADDR_VAR 0 4
67766: PUSH
67767: LD_EXP 45
67771: PUSH
67772: LD_VAR 0 2
67776: ARRAY
67777: PPUSH
67778: LD_INT 30
67780: PUSH
67781: LD_INT 3
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: PPUSH
67788: CALL_OW 72
67792: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
67793: LD_ADDR_VAR 0 6
67797: PUSH
67798: LD_EXP 53
67802: PUSH
67803: LD_VAR 0 2
67807: ARRAY
67808: PPUSH
67809: LD_INT 2
67811: PUSH
67812: LD_INT 30
67814: PUSH
67815: LD_INT 32
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: PUSH
67822: LD_INT 30
67824: PUSH
67825: LD_INT 33
67827: PUSH
67828: EMPTY
67829: LIST
67830: LIST
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: LIST
67836: PPUSH
67837: CALL_OW 72
67841: ST_TO_ADDR
// if not t then
67842: LD_VAR 0 6
67846: NOT
67847: IFFALSE 67851
// continue ;
67849: GO 67708
// for j in tmp do
67851: LD_ADDR_VAR 0 3
67855: PUSH
67856: LD_VAR 0 4
67860: PUSH
67861: FOR_IN
67862: IFFALSE 67892
// if not BuildingStatus ( j ) = bs_idle then
67864: LD_VAR 0 3
67868: PPUSH
67869: CALL_OW 461
67873: PUSH
67874: LD_INT 2
67876: EQUAL
67877: NOT
67878: IFFALSE 67890
// begin busy := true ;
67880: LD_ADDR_VAR 0 8
67884: PUSH
67885: LD_INT 1
67887: ST_TO_ADDR
// break ;
67888: GO 67892
// end ;
67890: GO 67861
67892: POP
67893: POP
// if busy then
67894: LD_VAR 0 8
67898: IFFALSE 67902
// continue ;
67900: GO 67708
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
67902: LD_ADDR_VAR 0 7
67906: PUSH
67907: LD_VAR 0 6
67911: PPUSH
67912: LD_INT 35
67914: PUSH
67915: LD_INT 0
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PPUSH
67922: CALL_OW 72
67926: ST_TO_ADDR
// if tw then
67927: LD_VAR 0 7
67931: IFFALSE 68008
// begin tw := tw [ 1 ] ;
67933: LD_ADDR_VAR 0 7
67937: PUSH
67938: LD_VAR 0 7
67942: PUSH
67943: LD_INT 1
67945: ARRAY
67946: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
67947: LD_ADDR_VAR 0 9
67951: PUSH
67952: LD_VAR 0 7
67956: PPUSH
67957: LD_EXP 70
67961: PUSH
67962: LD_VAR 0 2
67966: ARRAY
67967: PPUSH
67968: CALL 29264 0 2
67972: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
67973: LD_EXP 84
67977: PUSH
67978: LD_VAR 0 2
67982: ARRAY
67983: IFFALSE 68006
// if not weapon in mc_allowed_tower_weapons [ i ] then
67985: LD_VAR 0 9
67989: PUSH
67990: LD_EXP 84
67994: PUSH
67995: LD_VAR 0 2
67999: ARRAY
68000: IN
68001: NOT
68002: IFFALSE 68006
// continue ;
68004: GO 67708
// end else
68006: GO 68071
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
68008: LD_ADDR_VAR 0 5
68012: PUSH
68013: LD_EXP 53
68017: PUSH
68018: LD_VAR 0 2
68022: ARRAY
68023: PPUSH
68024: LD_VAR 0 4
68028: PPUSH
68029: CALL 54766 0 2
68033: ST_TO_ADDR
// if not tmp2 then
68034: LD_VAR 0 5
68038: NOT
68039: IFFALSE 68043
// continue ;
68041: GO 67708
// tw := tmp2 [ 1 ] ;
68043: LD_ADDR_VAR 0 7
68047: PUSH
68048: LD_VAR 0 5
68052: PUSH
68053: LD_INT 1
68055: ARRAY
68056: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
68057: LD_ADDR_VAR 0 9
68061: PUSH
68062: LD_VAR 0 5
68066: PUSH
68067: LD_INT 2
68069: ARRAY
68070: ST_TO_ADDR
// end ; if not weapon then
68071: LD_VAR 0 9
68075: NOT
68076: IFFALSE 68080
// continue ;
68078: GO 67708
// ComPlaceWeapon ( tw , weapon ) ;
68080: LD_VAR 0 7
68084: PPUSH
68085: LD_VAR 0 9
68089: PPUSH
68090: CALL_OW 148
// end ;
68094: GO 67708
68096: POP
68097: POP
// end ;
68098: LD_VAR 0 1
68102: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
68103: LD_INT 0
68105: PPUSH
68106: PPUSH
68107: PPUSH
68108: PPUSH
68109: PPUSH
68110: PPUSH
// if not mc_bases then
68111: LD_EXP 45
68115: NOT
68116: IFFALSE 68120
// exit ;
68118: GO 68896
// for i = 1 to mc_bases do
68120: LD_ADDR_VAR 0 2
68124: PUSH
68125: DOUBLE
68126: LD_INT 1
68128: DEC
68129: ST_TO_ADDR
68130: LD_EXP 45
68134: PUSH
68135: FOR_TO
68136: IFFALSE 68894
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
68138: LD_EXP 58
68142: PUSH
68143: LD_VAR 0 2
68147: ARRAY
68148: NOT
68149: PUSH
68150: LD_EXP 58
68154: PUSH
68155: LD_VAR 0 2
68159: ARRAY
68160: PUSH
68161: LD_EXP 59
68165: PUSH
68166: LD_VAR 0 2
68170: ARRAY
68171: EQUAL
68172: OR
68173: PUSH
68174: LD_EXP 68
68178: PUSH
68179: LD_VAR 0 2
68183: ARRAY
68184: OR
68185: IFFALSE 68189
// continue ;
68187: GO 68135
// if mc_miners [ i ] then
68189: LD_EXP 59
68193: PUSH
68194: LD_VAR 0 2
68198: ARRAY
68199: IFFALSE 68581
// begin for j = mc_miners [ i ] downto 1 do
68201: LD_ADDR_VAR 0 3
68205: PUSH
68206: DOUBLE
68207: LD_EXP 59
68211: PUSH
68212: LD_VAR 0 2
68216: ARRAY
68217: INC
68218: ST_TO_ADDR
68219: LD_INT 1
68221: PUSH
68222: FOR_DOWNTO
68223: IFFALSE 68579
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
68225: LD_EXP 59
68229: PUSH
68230: LD_VAR 0 2
68234: ARRAY
68235: PUSH
68236: LD_VAR 0 3
68240: ARRAY
68241: PPUSH
68242: CALL_OW 301
68246: PUSH
68247: LD_EXP 59
68251: PUSH
68252: LD_VAR 0 2
68256: ARRAY
68257: PUSH
68258: LD_VAR 0 3
68262: ARRAY
68263: PPUSH
68264: CALL_OW 257
68268: PUSH
68269: LD_INT 1
68271: NONEQUAL
68272: OR
68273: IFFALSE 68336
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
68275: LD_ADDR_VAR 0 5
68279: PUSH
68280: LD_EXP 59
68284: PUSH
68285: LD_VAR 0 2
68289: ARRAY
68290: PUSH
68291: LD_EXP 59
68295: PUSH
68296: LD_VAR 0 2
68300: ARRAY
68301: PUSH
68302: LD_VAR 0 3
68306: ARRAY
68307: DIFF
68308: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
68309: LD_ADDR_EXP 59
68313: PUSH
68314: LD_EXP 59
68318: PPUSH
68319: LD_VAR 0 2
68323: PPUSH
68324: LD_VAR 0 5
68328: PPUSH
68329: CALL_OW 1
68333: ST_TO_ADDR
// continue ;
68334: GO 68222
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
68336: LD_EXP 59
68340: PUSH
68341: LD_VAR 0 2
68345: ARRAY
68346: PUSH
68347: LD_VAR 0 3
68351: ARRAY
68352: PPUSH
68353: CALL_OW 257
68357: PUSH
68358: LD_INT 1
68360: EQUAL
68361: PUSH
68362: LD_EXP 59
68366: PUSH
68367: LD_VAR 0 2
68371: ARRAY
68372: PUSH
68373: LD_VAR 0 3
68377: ARRAY
68378: PPUSH
68379: CALL_OW 459
68383: NOT
68384: AND
68385: PUSH
68386: LD_EXP 59
68390: PUSH
68391: LD_VAR 0 2
68395: ARRAY
68396: PUSH
68397: LD_VAR 0 3
68401: ARRAY
68402: PPUSH
68403: CALL_OW 314
68407: NOT
68408: AND
68409: IFFALSE 68577
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
68411: LD_EXP 59
68415: PUSH
68416: LD_VAR 0 2
68420: ARRAY
68421: PUSH
68422: LD_VAR 0 3
68426: ARRAY
68427: PPUSH
68428: CALL_OW 310
68432: IFFALSE 68455
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
68434: LD_EXP 59
68438: PUSH
68439: LD_VAR 0 2
68443: ARRAY
68444: PUSH
68445: LD_VAR 0 3
68449: ARRAY
68450: PPUSH
68451: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
68455: LD_EXP 59
68459: PUSH
68460: LD_VAR 0 2
68464: ARRAY
68465: PUSH
68466: LD_VAR 0 3
68470: ARRAY
68471: PPUSH
68472: CALL_OW 314
68476: NOT
68477: IFFALSE 68577
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
68479: LD_EXP 59
68483: PUSH
68484: LD_VAR 0 2
68488: ARRAY
68489: PUSH
68490: LD_VAR 0 3
68494: ARRAY
68495: PPUSH
68496: LD_EXP 58
68500: PUSH
68501: LD_VAR 0 2
68505: ARRAY
68506: PUSH
68507: LD_VAR 0 3
68511: PUSH
68512: LD_EXP 58
68516: PUSH
68517: LD_VAR 0 2
68521: ARRAY
68522: MOD
68523: PUSH
68524: LD_INT 1
68526: PLUS
68527: ARRAY
68528: PUSH
68529: LD_INT 1
68531: ARRAY
68532: PPUSH
68533: LD_EXP 58
68537: PUSH
68538: LD_VAR 0 2
68542: ARRAY
68543: PUSH
68544: LD_VAR 0 3
68548: PUSH
68549: LD_EXP 58
68553: PUSH
68554: LD_VAR 0 2
68558: ARRAY
68559: MOD
68560: PUSH
68561: LD_INT 1
68563: PLUS
68564: ARRAY
68565: PUSH
68566: LD_INT 2
68568: ARRAY
68569: PPUSH
68570: LD_INT 0
68572: PPUSH
68573: CALL_OW 193
// end ; end ;
68577: GO 68222
68579: POP
68580: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
68581: LD_ADDR_VAR 0 5
68585: PUSH
68586: LD_EXP 45
68590: PUSH
68591: LD_VAR 0 2
68595: ARRAY
68596: PPUSH
68597: LD_INT 2
68599: PUSH
68600: LD_INT 30
68602: PUSH
68603: LD_INT 4
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: PUSH
68610: LD_INT 30
68612: PUSH
68613: LD_INT 5
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 30
68622: PUSH
68623: LD_INT 32
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: LIST
68634: LIST
68635: PPUSH
68636: CALL_OW 72
68640: ST_TO_ADDR
// if not tmp then
68641: LD_VAR 0 5
68645: NOT
68646: IFFALSE 68650
// continue ;
68648: GO 68135
// list := [ ] ;
68650: LD_ADDR_VAR 0 6
68654: PUSH
68655: EMPTY
68656: ST_TO_ADDR
// for j in tmp do
68657: LD_ADDR_VAR 0 3
68661: PUSH
68662: LD_VAR 0 5
68666: PUSH
68667: FOR_IN
68668: IFFALSE 68737
// begin for k in UnitsInside ( j ) do
68670: LD_ADDR_VAR 0 4
68674: PUSH
68675: LD_VAR 0 3
68679: PPUSH
68680: CALL_OW 313
68684: PUSH
68685: FOR_IN
68686: IFFALSE 68733
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
68688: LD_VAR 0 4
68692: PPUSH
68693: CALL_OW 257
68697: PUSH
68698: LD_INT 1
68700: EQUAL
68701: PUSH
68702: LD_VAR 0 4
68706: PPUSH
68707: CALL_OW 459
68711: NOT
68712: AND
68713: IFFALSE 68731
// list := list ^ k ;
68715: LD_ADDR_VAR 0 6
68719: PUSH
68720: LD_VAR 0 6
68724: PUSH
68725: LD_VAR 0 4
68729: ADD
68730: ST_TO_ADDR
68731: GO 68685
68733: POP
68734: POP
// end ;
68735: GO 68667
68737: POP
68738: POP
// list := list diff mc_miners [ i ] ;
68739: LD_ADDR_VAR 0 6
68743: PUSH
68744: LD_VAR 0 6
68748: PUSH
68749: LD_EXP 59
68753: PUSH
68754: LD_VAR 0 2
68758: ARRAY
68759: DIFF
68760: ST_TO_ADDR
// if not list then
68761: LD_VAR 0 6
68765: NOT
68766: IFFALSE 68770
// continue ;
68768: GO 68135
// k := mc_mines [ i ] - mc_miners [ i ] ;
68770: LD_ADDR_VAR 0 4
68774: PUSH
68775: LD_EXP 58
68779: PUSH
68780: LD_VAR 0 2
68784: ARRAY
68785: PUSH
68786: LD_EXP 59
68790: PUSH
68791: LD_VAR 0 2
68795: ARRAY
68796: MINUS
68797: ST_TO_ADDR
// if k > list then
68798: LD_VAR 0 4
68802: PUSH
68803: LD_VAR 0 6
68807: GREATER
68808: IFFALSE 68820
// k := list ;
68810: LD_ADDR_VAR 0 4
68814: PUSH
68815: LD_VAR 0 6
68819: ST_TO_ADDR
// for j = 1 to k do
68820: LD_ADDR_VAR 0 3
68824: PUSH
68825: DOUBLE
68826: LD_INT 1
68828: DEC
68829: ST_TO_ADDR
68830: LD_VAR 0 4
68834: PUSH
68835: FOR_TO
68836: IFFALSE 68890
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
68838: LD_ADDR_EXP 59
68842: PUSH
68843: LD_EXP 59
68847: PPUSH
68848: LD_VAR 0 2
68852: PUSH
68853: LD_EXP 59
68857: PUSH
68858: LD_VAR 0 2
68862: ARRAY
68863: PUSH
68864: LD_INT 1
68866: PLUS
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PPUSH
68872: LD_VAR 0 6
68876: PUSH
68877: LD_VAR 0 3
68881: ARRAY
68882: PPUSH
68883: CALL 24294 0 3
68887: ST_TO_ADDR
68888: GO 68835
68890: POP
68891: POP
// end ;
68892: GO 68135
68894: POP
68895: POP
// end ;
68896: LD_VAR 0 1
68900: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
68901: LD_INT 0
68903: PPUSH
68904: PPUSH
68905: PPUSH
68906: PPUSH
68907: PPUSH
68908: PPUSH
68909: PPUSH
68910: PPUSH
68911: PPUSH
68912: PPUSH
// if not mc_bases then
68913: LD_EXP 45
68917: NOT
68918: IFFALSE 68922
// exit ;
68920: GO 70672
// for i = 1 to mc_bases do
68922: LD_ADDR_VAR 0 2
68926: PUSH
68927: DOUBLE
68928: LD_INT 1
68930: DEC
68931: ST_TO_ADDR
68932: LD_EXP 45
68936: PUSH
68937: FOR_TO
68938: IFFALSE 70670
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
68940: LD_EXP 45
68944: PUSH
68945: LD_VAR 0 2
68949: ARRAY
68950: NOT
68951: PUSH
68952: LD_EXP 52
68956: PUSH
68957: LD_VAR 0 2
68961: ARRAY
68962: OR
68963: IFFALSE 68967
// continue ;
68965: GO 68937
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
68967: LD_EXP 61
68971: PUSH
68972: LD_VAR 0 2
68976: ARRAY
68977: NOT
68978: PUSH
68979: LD_EXP 62
68983: PUSH
68984: LD_VAR 0 2
68988: ARRAY
68989: AND
68990: IFFALSE 69028
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
68992: LD_ADDR_EXP 62
68996: PUSH
68997: LD_EXP 62
69001: PPUSH
69002: LD_VAR 0 2
69006: PPUSH
69007: EMPTY
69008: PPUSH
69009: CALL_OW 1
69013: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
69014: LD_VAR 0 2
69018: PPUSH
69019: LD_INT 107
69021: PPUSH
69022: CALL 59902 0 2
// continue ;
69026: GO 68937
// end ; target := [ ] ;
69028: LD_ADDR_VAR 0 6
69032: PUSH
69033: EMPTY
69034: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
69035: LD_ADDR_VAR 0 3
69039: PUSH
69040: DOUBLE
69041: LD_EXP 61
69045: PUSH
69046: LD_VAR 0 2
69050: ARRAY
69051: INC
69052: ST_TO_ADDR
69053: LD_INT 1
69055: PUSH
69056: FOR_DOWNTO
69057: IFFALSE 69317
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
69059: LD_EXP 61
69063: PUSH
69064: LD_VAR 0 2
69068: ARRAY
69069: PUSH
69070: LD_VAR 0 3
69074: ARRAY
69075: PUSH
69076: LD_INT 2
69078: ARRAY
69079: PPUSH
69080: LD_EXP 61
69084: PUSH
69085: LD_VAR 0 2
69089: ARRAY
69090: PUSH
69091: LD_VAR 0 3
69095: ARRAY
69096: PUSH
69097: LD_INT 3
69099: ARRAY
69100: PPUSH
69101: CALL_OW 488
69105: PUSH
69106: LD_EXP 61
69110: PUSH
69111: LD_VAR 0 2
69115: ARRAY
69116: PUSH
69117: LD_VAR 0 3
69121: ARRAY
69122: PUSH
69123: LD_INT 2
69125: ARRAY
69126: PPUSH
69127: LD_EXP 61
69131: PUSH
69132: LD_VAR 0 2
69136: ARRAY
69137: PUSH
69138: LD_VAR 0 3
69142: ARRAY
69143: PUSH
69144: LD_INT 3
69146: ARRAY
69147: PPUSH
69148: CALL_OW 284
69152: PUSH
69153: LD_INT 0
69155: EQUAL
69156: AND
69157: IFFALSE 69212
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
69159: LD_ADDR_VAR 0 5
69163: PUSH
69164: LD_EXP 61
69168: PUSH
69169: LD_VAR 0 2
69173: ARRAY
69174: PPUSH
69175: LD_VAR 0 3
69179: PPUSH
69180: CALL_OW 3
69184: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
69185: LD_ADDR_EXP 61
69189: PUSH
69190: LD_EXP 61
69194: PPUSH
69195: LD_VAR 0 2
69199: PPUSH
69200: LD_VAR 0 5
69204: PPUSH
69205: CALL_OW 1
69209: ST_TO_ADDR
// continue ;
69210: GO 69056
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
69212: LD_EXP 45
69216: PUSH
69217: LD_VAR 0 2
69221: ARRAY
69222: PUSH
69223: LD_INT 1
69225: ARRAY
69226: PPUSH
69227: CALL_OW 255
69231: PPUSH
69232: LD_EXP 61
69236: PUSH
69237: LD_VAR 0 2
69241: ARRAY
69242: PUSH
69243: LD_VAR 0 3
69247: ARRAY
69248: PUSH
69249: LD_INT 2
69251: ARRAY
69252: PPUSH
69253: LD_EXP 61
69257: PUSH
69258: LD_VAR 0 2
69262: ARRAY
69263: PUSH
69264: LD_VAR 0 3
69268: ARRAY
69269: PUSH
69270: LD_INT 3
69272: ARRAY
69273: PPUSH
69274: LD_INT 30
69276: PPUSH
69277: CALL 25190 0 4
69281: PUSH
69282: LD_INT 4
69284: ARRAY
69285: PUSH
69286: LD_INT 0
69288: EQUAL
69289: IFFALSE 69315
// begin target := mc_crates [ i ] [ j ] ;
69291: LD_ADDR_VAR 0 6
69295: PUSH
69296: LD_EXP 61
69300: PUSH
69301: LD_VAR 0 2
69305: ARRAY
69306: PUSH
69307: LD_VAR 0 3
69311: ARRAY
69312: ST_TO_ADDR
// break ;
69313: GO 69317
// end ; end ;
69315: GO 69056
69317: POP
69318: POP
// if not target then
69319: LD_VAR 0 6
69323: NOT
69324: IFFALSE 69328
// continue ;
69326: GO 68937
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
69328: LD_ADDR_VAR 0 7
69332: PUSH
69333: LD_EXP 64
69337: PUSH
69338: LD_VAR 0 2
69342: ARRAY
69343: PPUSH
69344: LD_INT 2
69346: PUSH
69347: LD_INT 3
69349: PUSH
69350: LD_INT 58
69352: PUSH
69353: EMPTY
69354: LIST
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 61
69362: PUSH
69363: EMPTY
69364: LIST
69365: PUSH
69366: LD_INT 33
69368: PUSH
69369: LD_INT 5
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: PUSH
69376: LD_INT 33
69378: PUSH
69379: LD_INT 3
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: LIST
69390: LIST
69391: LIST
69392: PUSH
69393: LD_INT 2
69395: PUSH
69396: LD_INT 34
69398: PUSH
69399: LD_INT 32
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 34
69408: PUSH
69409: LD_INT 51
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: LD_INT 34
69418: PUSH
69419: LD_INT 12
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: LIST
69430: LIST
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PPUSH
69436: CALL_OW 72
69440: ST_TO_ADDR
// if not cargo then
69441: LD_VAR 0 7
69445: NOT
69446: IFFALSE 70089
// begin if mc_crates_collector [ i ] < 5 then
69448: LD_EXP 62
69452: PUSH
69453: LD_VAR 0 2
69457: ARRAY
69458: PUSH
69459: LD_INT 5
69461: LESS
69462: IFFALSE 69828
// begin if mc_ape [ i ] then
69464: LD_EXP 74
69468: PUSH
69469: LD_VAR 0 2
69473: ARRAY
69474: IFFALSE 69521
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
69476: LD_ADDR_VAR 0 5
69480: PUSH
69481: LD_EXP 74
69485: PUSH
69486: LD_VAR 0 2
69490: ARRAY
69491: PPUSH
69492: LD_INT 25
69494: PUSH
69495: LD_INT 16
69497: PUSH
69498: EMPTY
69499: LIST
69500: LIST
69501: PUSH
69502: LD_INT 24
69504: PUSH
69505: LD_INT 750
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PPUSH
69516: CALL_OW 72
69520: ST_TO_ADDR
// if not tmp then
69521: LD_VAR 0 5
69525: NOT
69526: IFFALSE 69573
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
69528: LD_ADDR_VAR 0 5
69532: PUSH
69533: LD_EXP 45
69537: PUSH
69538: LD_VAR 0 2
69542: ARRAY
69543: PPUSH
69544: LD_INT 25
69546: PUSH
69547: LD_INT 2
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 24
69556: PUSH
69557: LD_INT 750
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: PPUSH
69568: CALL_OW 72
69572: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
69573: LD_EXP 74
69577: PUSH
69578: LD_VAR 0 2
69582: ARRAY
69583: PUSH
69584: LD_EXP 45
69588: PUSH
69589: LD_VAR 0 2
69593: ARRAY
69594: PPUSH
69595: LD_INT 25
69597: PUSH
69598: LD_INT 2
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: PUSH
69605: LD_INT 24
69607: PUSH
69608: LD_INT 750
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: PPUSH
69619: CALL_OW 72
69623: AND
69624: PUSH
69625: LD_VAR 0 5
69629: PUSH
69630: LD_INT 5
69632: LESS
69633: AND
69634: IFFALSE 69716
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
69636: LD_ADDR_VAR 0 3
69640: PUSH
69641: LD_EXP 45
69645: PUSH
69646: LD_VAR 0 2
69650: ARRAY
69651: PPUSH
69652: LD_INT 25
69654: PUSH
69655: LD_INT 2
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 24
69664: PUSH
69665: LD_INT 750
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PUSH
69672: EMPTY
69673: LIST
69674: LIST
69675: PPUSH
69676: CALL_OW 72
69680: PUSH
69681: FOR_IN
69682: IFFALSE 69714
// begin tmp := tmp union j ;
69684: LD_ADDR_VAR 0 5
69688: PUSH
69689: LD_VAR 0 5
69693: PUSH
69694: LD_VAR 0 3
69698: UNION
69699: ST_TO_ADDR
// if tmp >= 5 then
69700: LD_VAR 0 5
69704: PUSH
69705: LD_INT 5
69707: GREATEREQUAL
69708: IFFALSE 69712
// break ;
69710: GO 69714
// end ;
69712: GO 69681
69714: POP
69715: POP
// end ; if not tmp then
69716: LD_VAR 0 5
69720: NOT
69721: IFFALSE 69725
// continue ;
69723: GO 68937
// for j in tmp do
69725: LD_ADDR_VAR 0 3
69729: PUSH
69730: LD_VAR 0 5
69734: PUSH
69735: FOR_IN
69736: IFFALSE 69826
// if not GetTag ( j ) then
69738: LD_VAR 0 3
69742: PPUSH
69743: CALL_OW 110
69747: NOT
69748: IFFALSE 69824
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
69750: LD_ADDR_EXP 62
69754: PUSH
69755: LD_EXP 62
69759: PPUSH
69760: LD_VAR 0 2
69764: PUSH
69765: LD_EXP 62
69769: PUSH
69770: LD_VAR 0 2
69774: ARRAY
69775: PUSH
69776: LD_INT 1
69778: PLUS
69779: PUSH
69780: EMPTY
69781: LIST
69782: LIST
69783: PPUSH
69784: LD_VAR 0 3
69788: PPUSH
69789: CALL 24294 0 3
69793: ST_TO_ADDR
// SetTag ( j , 107 ) ;
69794: LD_VAR 0 3
69798: PPUSH
69799: LD_INT 107
69801: PPUSH
69802: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
69806: LD_EXP 62
69810: PUSH
69811: LD_VAR 0 2
69815: ARRAY
69816: PUSH
69817: LD_INT 5
69819: GREATEREQUAL
69820: IFFALSE 69824
// break ;
69822: GO 69826
// end ;
69824: GO 69735
69826: POP
69827: POP
// end ; if mc_crates_collector [ i ] and target then
69828: LD_EXP 62
69832: PUSH
69833: LD_VAR 0 2
69837: ARRAY
69838: PUSH
69839: LD_VAR 0 6
69843: AND
69844: IFFALSE 70087
// begin if mc_crates_collector [ i ] < target [ 1 ] then
69846: LD_EXP 62
69850: PUSH
69851: LD_VAR 0 2
69855: ARRAY
69856: PUSH
69857: LD_VAR 0 6
69861: PUSH
69862: LD_INT 1
69864: ARRAY
69865: LESS
69866: IFFALSE 69886
// tmp := mc_crates_collector [ i ] else
69868: LD_ADDR_VAR 0 5
69872: PUSH
69873: LD_EXP 62
69877: PUSH
69878: LD_VAR 0 2
69882: ARRAY
69883: ST_TO_ADDR
69884: GO 69900
// tmp := target [ 1 ] ;
69886: LD_ADDR_VAR 0 5
69890: PUSH
69891: LD_VAR 0 6
69895: PUSH
69896: LD_INT 1
69898: ARRAY
69899: ST_TO_ADDR
// k := 0 ;
69900: LD_ADDR_VAR 0 4
69904: PUSH
69905: LD_INT 0
69907: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
69908: LD_ADDR_VAR 0 3
69912: PUSH
69913: LD_EXP 62
69917: PUSH
69918: LD_VAR 0 2
69922: ARRAY
69923: PUSH
69924: FOR_IN
69925: IFFALSE 70085
// begin k := k + 1 ;
69927: LD_ADDR_VAR 0 4
69931: PUSH
69932: LD_VAR 0 4
69936: PUSH
69937: LD_INT 1
69939: PLUS
69940: ST_TO_ADDR
// if k > tmp then
69941: LD_VAR 0 4
69945: PUSH
69946: LD_VAR 0 5
69950: GREATER
69951: IFFALSE 69955
// break ;
69953: GO 70085
// if not GetClass ( j ) in [ 2 , 16 ] then
69955: LD_VAR 0 3
69959: PPUSH
69960: CALL_OW 257
69964: PUSH
69965: LD_INT 2
69967: PUSH
69968: LD_INT 16
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: IN
69975: NOT
69976: IFFALSE 70029
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
69978: LD_ADDR_EXP 62
69982: PUSH
69983: LD_EXP 62
69987: PPUSH
69988: LD_VAR 0 2
69992: PPUSH
69993: LD_EXP 62
69997: PUSH
69998: LD_VAR 0 2
70002: ARRAY
70003: PUSH
70004: LD_VAR 0 3
70008: DIFF
70009: PPUSH
70010: CALL_OW 1
70014: ST_TO_ADDR
// SetTag ( j , 0 ) ;
70015: LD_VAR 0 3
70019: PPUSH
70020: LD_INT 0
70022: PPUSH
70023: CALL_OW 109
// continue ;
70027: GO 69924
// end ; if IsInUnit ( j ) then
70029: LD_VAR 0 3
70033: PPUSH
70034: CALL_OW 310
70038: IFFALSE 70049
// ComExitBuilding ( j ) ;
70040: LD_VAR 0 3
70044: PPUSH
70045: CALL_OW 122
// wait ( 3 ) ;
70049: LD_INT 3
70051: PPUSH
70052: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
70056: LD_VAR 0 3
70060: PPUSH
70061: LD_VAR 0 6
70065: PUSH
70066: LD_INT 2
70068: ARRAY
70069: PPUSH
70070: LD_VAR 0 6
70074: PUSH
70075: LD_INT 3
70077: ARRAY
70078: PPUSH
70079: CALL_OW 117
// end ;
70083: GO 69924
70085: POP
70086: POP
// end ; end else
70087: GO 70668
// begin for j in cargo do
70089: LD_ADDR_VAR 0 3
70093: PUSH
70094: LD_VAR 0 7
70098: PUSH
70099: FOR_IN
70100: IFFALSE 70666
// begin if GetTag ( j ) <> 0 then
70102: LD_VAR 0 3
70106: PPUSH
70107: CALL_OW 110
70111: PUSH
70112: LD_INT 0
70114: NONEQUAL
70115: IFFALSE 70119
// continue ;
70117: GO 70099
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
70119: LD_VAR 0 3
70123: PPUSH
70124: CALL_OW 256
70128: PUSH
70129: LD_INT 1000
70131: LESS
70132: PUSH
70133: LD_VAR 0 3
70137: PPUSH
70138: LD_EXP 69
70142: PUSH
70143: LD_VAR 0 2
70147: ARRAY
70148: PPUSH
70149: CALL_OW 308
70153: NOT
70154: AND
70155: IFFALSE 70177
// ComMoveToArea ( j , mc_parking [ i ] ) ;
70157: LD_VAR 0 3
70161: PPUSH
70162: LD_EXP 69
70166: PUSH
70167: LD_VAR 0 2
70171: ARRAY
70172: PPUSH
70173: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
70177: LD_VAR 0 3
70181: PPUSH
70182: CALL_OW 256
70186: PUSH
70187: LD_INT 1000
70189: LESS
70190: PUSH
70191: LD_VAR 0 3
70195: PPUSH
70196: LD_EXP 69
70200: PUSH
70201: LD_VAR 0 2
70205: ARRAY
70206: PPUSH
70207: CALL_OW 308
70211: AND
70212: IFFALSE 70216
// continue ;
70214: GO 70099
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
70216: LD_VAR 0 3
70220: PPUSH
70221: CALL_OW 262
70225: PUSH
70226: LD_INT 2
70228: EQUAL
70229: PUSH
70230: LD_VAR 0 3
70234: PPUSH
70235: CALL_OW 261
70239: PUSH
70240: LD_INT 15
70242: LESS
70243: AND
70244: IFFALSE 70248
// continue ;
70246: GO 70099
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
70248: LD_VAR 0 3
70252: PPUSH
70253: CALL_OW 262
70257: PUSH
70258: LD_INT 1
70260: EQUAL
70261: PUSH
70262: LD_VAR 0 3
70266: PPUSH
70267: CALL_OW 261
70271: PUSH
70272: LD_INT 10
70274: LESS
70275: AND
70276: IFFALSE 70605
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
70278: LD_ADDR_VAR 0 8
70282: PUSH
70283: LD_EXP 45
70287: PUSH
70288: LD_VAR 0 2
70292: ARRAY
70293: PPUSH
70294: LD_INT 2
70296: PUSH
70297: LD_INT 30
70299: PUSH
70300: LD_INT 0
70302: PUSH
70303: EMPTY
70304: LIST
70305: LIST
70306: PUSH
70307: LD_INT 30
70309: PUSH
70310: LD_INT 1
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: LIST
70321: PPUSH
70322: CALL_OW 72
70326: ST_TO_ADDR
// if not depot then
70327: LD_VAR 0 8
70331: NOT
70332: IFFALSE 70336
// continue ;
70334: GO 70099
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
70336: LD_VAR 0 3
70340: PPUSH
70341: LD_VAR 0 8
70345: PPUSH
70346: LD_VAR 0 3
70350: PPUSH
70351: CALL_OW 74
70355: PPUSH
70356: CALL_OW 296
70360: PUSH
70361: LD_INT 6
70363: LESS
70364: IFFALSE 70380
// SetFuel ( j , 100 ) else
70366: LD_VAR 0 3
70370: PPUSH
70371: LD_INT 100
70373: PPUSH
70374: CALL_OW 240
70378: GO 70605
// if GetFuel ( j ) = 0 then
70380: LD_VAR 0 3
70384: PPUSH
70385: CALL_OW 261
70389: PUSH
70390: LD_INT 0
70392: EQUAL
70393: IFFALSE 70605
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
70395: LD_ADDR_EXP 64
70399: PUSH
70400: LD_EXP 64
70404: PPUSH
70405: LD_VAR 0 2
70409: PPUSH
70410: LD_EXP 64
70414: PUSH
70415: LD_VAR 0 2
70419: ARRAY
70420: PUSH
70421: LD_VAR 0 3
70425: DIFF
70426: PPUSH
70427: CALL_OW 1
70431: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
70432: LD_VAR 0 3
70436: PPUSH
70437: CALL_OW 263
70441: PUSH
70442: LD_INT 1
70444: EQUAL
70445: IFFALSE 70461
// ComExitVehicle ( IsInUnit ( j ) ) ;
70447: LD_VAR 0 3
70451: PPUSH
70452: CALL_OW 310
70456: PPUSH
70457: CALL_OW 121
// if GetControl ( j ) = control_remote then
70461: LD_VAR 0 3
70465: PPUSH
70466: CALL_OW 263
70470: PUSH
70471: LD_INT 2
70473: EQUAL
70474: IFFALSE 70485
// ComUnlink ( j ) ;
70476: LD_VAR 0 3
70480: PPUSH
70481: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
70485: LD_ADDR_VAR 0 9
70489: PUSH
70490: LD_VAR 0 2
70494: PPUSH
70495: LD_INT 3
70497: PPUSH
70498: CALL 79958 0 2
70502: ST_TO_ADDR
// if fac then
70503: LD_VAR 0 9
70507: IFFALSE 70603
// begin for k in fac do
70509: LD_ADDR_VAR 0 4
70513: PUSH
70514: LD_VAR 0 9
70518: PUSH
70519: FOR_IN
70520: IFFALSE 70601
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
70522: LD_ADDR_VAR 0 10
70526: PUSH
70527: LD_VAR 0 9
70531: PPUSH
70532: LD_VAR 0 3
70536: PPUSH
70537: CALL_OW 265
70541: PPUSH
70542: LD_VAR 0 3
70546: PPUSH
70547: CALL_OW 262
70551: PPUSH
70552: LD_VAR 0 3
70556: PPUSH
70557: CALL_OW 263
70561: PPUSH
70562: LD_VAR 0 3
70566: PPUSH
70567: CALL_OW 264
70571: PPUSH
70572: CALL 21826 0 5
70576: ST_TO_ADDR
// if components then
70577: LD_VAR 0 10
70581: IFFALSE 70599
// begin MC_InsertProduceList ( i , components ) ;
70583: LD_VAR 0 2
70587: PPUSH
70588: LD_VAR 0 10
70592: PPUSH
70593: CALL 79503 0 2
// break ;
70597: GO 70601
// end ; end ;
70599: GO 70519
70601: POP
70602: POP
// end ; continue ;
70603: GO 70099
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
70605: LD_VAR 0 3
70609: PPUSH
70610: LD_INT 1
70612: PPUSH
70613: CALL_OW 289
70617: PUSH
70618: LD_INT 100
70620: LESS
70621: PUSH
70622: LD_VAR 0 3
70626: PPUSH
70627: CALL_OW 314
70631: NOT
70632: AND
70633: IFFALSE 70662
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
70635: LD_VAR 0 3
70639: PPUSH
70640: LD_VAR 0 6
70644: PUSH
70645: LD_INT 2
70647: ARRAY
70648: PPUSH
70649: LD_VAR 0 6
70653: PUSH
70654: LD_INT 3
70656: ARRAY
70657: PPUSH
70658: CALL_OW 117
// break ;
70662: GO 70666
// end ;
70664: GO 70099
70666: POP
70667: POP
// end ; end ;
70668: GO 68937
70670: POP
70671: POP
// end ;
70672: LD_VAR 0 1
70676: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
70677: LD_INT 0
70679: PPUSH
70680: PPUSH
70681: PPUSH
70682: PPUSH
// if not mc_bases then
70683: LD_EXP 45
70687: NOT
70688: IFFALSE 70692
// exit ;
70690: GO 70853
// for i = 1 to mc_bases do
70692: LD_ADDR_VAR 0 2
70696: PUSH
70697: DOUBLE
70698: LD_INT 1
70700: DEC
70701: ST_TO_ADDR
70702: LD_EXP 45
70706: PUSH
70707: FOR_TO
70708: IFFALSE 70851
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
70710: LD_ADDR_VAR 0 4
70714: PUSH
70715: LD_EXP 64
70719: PUSH
70720: LD_VAR 0 2
70724: ARRAY
70725: PUSH
70726: LD_EXP 67
70730: PUSH
70731: LD_VAR 0 2
70735: ARRAY
70736: UNION
70737: PPUSH
70738: LD_INT 33
70740: PUSH
70741: LD_INT 2
70743: PUSH
70744: EMPTY
70745: LIST
70746: LIST
70747: PPUSH
70748: CALL_OW 72
70752: ST_TO_ADDR
// if tmp then
70753: LD_VAR 0 4
70757: IFFALSE 70849
// for j in tmp do
70759: LD_ADDR_VAR 0 3
70763: PUSH
70764: LD_VAR 0 4
70768: PUSH
70769: FOR_IN
70770: IFFALSE 70847
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
70772: LD_VAR 0 3
70776: PPUSH
70777: CALL_OW 312
70781: NOT
70782: PUSH
70783: LD_VAR 0 3
70787: PPUSH
70788: CALL_OW 256
70792: PUSH
70793: LD_INT 250
70795: GREATEREQUAL
70796: AND
70797: IFFALSE 70810
// Connect ( j ) else
70799: LD_VAR 0 3
70803: PPUSH
70804: CALL 27227 0 1
70808: GO 70845
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
70810: LD_VAR 0 3
70814: PPUSH
70815: CALL_OW 256
70819: PUSH
70820: LD_INT 250
70822: LESS
70823: PUSH
70824: LD_VAR 0 3
70828: PPUSH
70829: CALL_OW 312
70833: AND
70834: IFFALSE 70845
// ComUnlink ( j ) ;
70836: LD_VAR 0 3
70840: PPUSH
70841: CALL_OW 136
70845: GO 70769
70847: POP
70848: POP
// end ;
70849: GO 70707
70851: POP
70852: POP
// end ;
70853: LD_VAR 0 1
70857: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
70858: LD_INT 0
70860: PPUSH
70861: PPUSH
70862: PPUSH
70863: PPUSH
70864: PPUSH
// if not mc_bases then
70865: LD_EXP 45
70869: NOT
70870: IFFALSE 70874
// exit ;
70872: GO 71319
// for i = 1 to mc_bases do
70874: LD_ADDR_VAR 0 2
70878: PUSH
70879: DOUBLE
70880: LD_INT 1
70882: DEC
70883: ST_TO_ADDR
70884: LD_EXP 45
70888: PUSH
70889: FOR_TO
70890: IFFALSE 71317
// begin if not mc_produce [ i ] then
70892: LD_EXP 66
70896: PUSH
70897: LD_VAR 0 2
70901: ARRAY
70902: NOT
70903: IFFALSE 70907
// continue ;
70905: GO 70889
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
70907: LD_ADDR_VAR 0 5
70911: PUSH
70912: LD_EXP 45
70916: PUSH
70917: LD_VAR 0 2
70921: ARRAY
70922: PPUSH
70923: LD_INT 30
70925: PUSH
70926: LD_INT 3
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: PPUSH
70933: CALL_OW 72
70937: ST_TO_ADDR
// if not fac then
70938: LD_VAR 0 5
70942: NOT
70943: IFFALSE 70947
// continue ;
70945: GO 70889
// for j in fac do
70947: LD_ADDR_VAR 0 3
70951: PUSH
70952: LD_VAR 0 5
70956: PUSH
70957: FOR_IN
70958: IFFALSE 71313
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
70960: LD_VAR 0 3
70964: PPUSH
70965: CALL_OW 461
70969: PUSH
70970: LD_INT 2
70972: NONEQUAL
70973: PUSH
70974: LD_VAR 0 3
70978: PPUSH
70979: LD_INT 15
70981: PPUSH
70982: CALL 26887 0 2
70986: PUSH
70987: LD_INT 4
70989: ARRAY
70990: OR
70991: IFFALSE 70995
// continue ;
70993: GO 70957
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
70995: LD_VAR 0 3
70999: PPUSH
71000: LD_EXP 66
71004: PUSH
71005: LD_VAR 0 2
71009: ARRAY
71010: PUSH
71011: LD_INT 1
71013: ARRAY
71014: PUSH
71015: LD_INT 1
71017: ARRAY
71018: PPUSH
71019: LD_EXP 66
71023: PUSH
71024: LD_VAR 0 2
71028: ARRAY
71029: PUSH
71030: LD_INT 1
71032: ARRAY
71033: PUSH
71034: LD_INT 2
71036: ARRAY
71037: PPUSH
71038: LD_EXP 66
71042: PUSH
71043: LD_VAR 0 2
71047: ARRAY
71048: PUSH
71049: LD_INT 1
71051: ARRAY
71052: PUSH
71053: LD_INT 3
71055: ARRAY
71056: PPUSH
71057: LD_EXP 66
71061: PUSH
71062: LD_VAR 0 2
71066: ARRAY
71067: PUSH
71068: LD_INT 1
71070: ARRAY
71071: PUSH
71072: LD_INT 4
71074: ARRAY
71075: PPUSH
71076: CALL_OW 448
71080: PUSH
71081: LD_VAR 0 3
71085: PPUSH
71086: LD_EXP 66
71090: PUSH
71091: LD_VAR 0 2
71095: ARRAY
71096: PUSH
71097: LD_INT 1
71099: ARRAY
71100: PUSH
71101: LD_INT 1
71103: ARRAY
71104: PUSH
71105: LD_EXP 66
71109: PUSH
71110: LD_VAR 0 2
71114: ARRAY
71115: PUSH
71116: LD_INT 1
71118: ARRAY
71119: PUSH
71120: LD_INT 2
71122: ARRAY
71123: PUSH
71124: LD_EXP 66
71128: PUSH
71129: LD_VAR 0 2
71133: ARRAY
71134: PUSH
71135: LD_INT 1
71137: ARRAY
71138: PUSH
71139: LD_INT 3
71141: ARRAY
71142: PUSH
71143: LD_EXP 66
71147: PUSH
71148: LD_VAR 0 2
71152: ARRAY
71153: PUSH
71154: LD_INT 1
71156: ARRAY
71157: PUSH
71158: LD_INT 4
71160: ARRAY
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: LIST
71166: LIST
71167: PPUSH
71168: CALL 30558 0 2
71172: AND
71173: IFFALSE 71311
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
71175: LD_VAR 0 3
71179: PPUSH
71180: LD_EXP 66
71184: PUSH
71185: LD_VAR 0 2
71189: ARRAY
71190: PUSH
71191: LD_INT 1
71193: ARRAY
71194: PUSH
71195: LD_INT 1
71197: ARRAY
71198: PPUSH
71199: LD_EXP 66
71203: PUSH
71204: LD_VAR 0 2
71208: ARRAY
71209: PUSH
71210: LD_INT 1
71212: ARRAY
71213: PUSH
71214: LD_INT 2
71216: ARRAY
71217: PPUSH
71218: LD_EXP 66
71222: PUSH
71223: LD_VAR 0 2
71227: ARRAY
71228: PUSH
71229: LD_INT 1
71231: ARRAY
71232: PUSH
71233: LD_INT 3
71235: ARRAY
71236: PPUSH
71237: LD_EXP 66
71241: PUSH
71242: LD_VAR 0 2
71246: ARRAY
71247: PUSH
71248: LD_INT 1
71250: ARRAY
71251: PUSH
71252: LD_INT 4
71254: ARRAY
71255: PPUSH
71256: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
71260: LD_ADDR_VAR 0 4
71264: PUSH
71265: LD_EXP 66
71269: PUSH
71270: LD_VAR 0 2
71274: ARRAY
71275: PPUSH
71276: LD_INT 1
71278: PPUSH
71279: CALL_OW 3
71283: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
71284: LD_ADDR_EXP 66
71288: PUSH
71289: LD_EXP 66
71293: PPUSH
71294: LD_VAR 0 2
71298: PPUSH
71299: LD_VAR 0 4
71303: PPUSH
71304: CALL_OW 1
71308: ST_TO_ADDR
// break ;
71309: GO 71313
// end ; end ;
71311: GO 70957
71313: POP
71314: POP
// end ;
71315: GO 70889
71317: POP
71318: POP
// end ;
71319: LD_VAR 0 1
71323: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
71324: LD_INT 0
71326: PPUSH
71327: PPUSH
71328: PPUSH
// if not mc_bases then
71329: LD_EXP 45
71333: NOT
71334: IFFALSE 71338
// exit ;
71336: GO 71427
// for i = 1 to mc_bases do
71338: LD_ADDR_VAR 0 2
71342: PUSH
71343: DOUBLE
71344: LD_INT 1
71346: DEC
71347: ST_TO_ADDR
71348: LD_EXP 45
71352: PUSH
71353: FOR_TO
71354: IFFALSE 71425
// begin if mc_attack [ i ] then
71356: LD_EXP 65
71360: PUSH
71361: LD_VAR 0 2
71365: ARRAY
71366: IFFALSE 71423
// begin tmp := mc_attack [ i ] [ 1 ] ;
71368: LD_ADDR_VAR 0 3
71372: PUSH
71373: LD_EXP 65
71377: PUSH
71378: LD_VAR 0 2
71382: ARRAY
71383: PUSH
71384: LD_INT 1
71386: ARRAY
71387: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
71388: LD_ADDR_EXP 65
71392: PUSH
71393: LD_EXP 65
71397: PPUSH
71398: LD_VAR 0 2
71402: PPUSH
71403: EMPTY
71404: PPUSH
71405: CALL_OW 1
71409: ST_TO_ADDR
// Attack ( tmp ) ;
71410: LD_VAR 0 3
71414: PPUSH
71415: CALL 98512 0 1
// exit ;
71419: POP
71420: POP
71421: GO 71427
// end ; end ;
71423: GO 71353
71425: POP
71426: POP
// end ;
71427: LD_VAR 0 1
71431: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
71432: LD_INT 0
71434: PPUSH
71435: PPUSH
71436: PPUSH
71437: PPUSH
71438: PPUSH
71439: PPUSH
71440: PPUSH
// if not mc_bases then
71441: LD_EXP 45
71445: NOT
71446: IFFALSE 71450
// exit ;
71448: GO 72032
// for i = 1 to mc_bases do
71450: LD_ADDR_VAR 0 2
71454: PUSH
71455: DOUBLE
71456: LD_INT 1
71458: DEC
71459: ST_TO_ADDR
71460: LD_EXP 45
71464: PUSH
71465: FOR_TO
71466: IFFALSE 72030
// begin if not mc_bases [ i ] then
71468: LD_EXP 45
71472: PUSH
71473: LD_VAR 0 2
71477: ARRAY
71478: NOT
71479: IFFALSE 71483
// continue ;
71481: GO 71465
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
71483: LD_ADDR_VAR 0 7
71487: PUSH
71488: LD_EXP 45
71492: PUSH
71493: LD_VAR 0 2
71497: ARRAY
71498: PUSH
71499: LD_INT 1
71501: ARRAY
71502: PPUSH
71503: CALL 21130 0 1
71507: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
71508: LD_ADDR_EXP 68
71512: PUSH
71513: LD_EXP 68
71517: PPUSH
71518: LD_VAR 0 2
71522: PPUSH
71523: LD_EXP 45
71527: PUSH
71528: LD_VAR 0 2
71532: ARRAY
71533: PUSH
71534: LD_INT 1
71536: ARRAY
71537: PPUSH
71538: CALL_OW 255
71542: PPUSH
71543: LD_EXP 70
71547: PUSH
71548: LD_VAR 0 2
71552: ARRAY
71553: PPUSH
71554: CALL 21095 0 2
71558: PPUSH
71559: CALL_OW 1
71563: ST_TO_ADDR
// if not mc_scan [ i ] then
71564: LD_EXP 68
71568: PUSH
71569: LD_VAR 0 2
71573: ARRAY
71574: NOT
71575: IFFALSE 71730
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
71577: LD_ADDR_VAR 0 4
71581: PUSH
71582: LD_EXP 45
71586: PUSH
71587: LD_VAR 0 2
71591: ARRAY
71592: PPUSH
71593: LD_INT 2
71595: PUSH
71596: LD_INT 25
71598: PUSH
71599: LD_INT 5
71601: PUSH
71602: EMPTY
71603: LIST
71604: LIST
71605: PUSH
71606: LD_INT 25
71608: PUSH
71609: LD_INT 8
71611: PUSH
71612: EMPTY
71613: LIST
71614: LIST
71615: PUSH
71616: LD_INT 25
71618: PUSH
71619: LD_INT 9
71621: PUSH
71622: EMPTY
71623: LIST
71624: LIST
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: LIST
71630: LIST
71631: PPUSH
71632: CALL_OW 72
71636: ST_TO_ADDR
// if not tmp then
71637: LD_VAR 0 4
71641: NOT
71642: IFFALSE 71646
// continue ;
71644: GO 71465
// for j in tmp do
71646: LD_ADDR_VAR 0 3
71650: PUSH
71651: LD_VAR 0 4
71655: PUSH
71656: FOR_IN
71657: IFFALSE 71728
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
71659: LD_VAR 0 3
71663: PPUSH
71664: CALL_OW 310
71668: PPUSH
71669: CALL_OW 266
71673: PUSH
71674: LD_INT 5
71676: EQUAL
71677: PUSH
71678: LD_VAR 0 3
71682: PPUSH
71683: CALL_OW 257
71687: PUSH
71688: LD_INT 1
71690: EQUAL
71691: AND
71692: PUSH
71693: LD_VAR 0 3
71697: PPUSH
71698: CALL_OW 459
71702: NOT
71703: AND
71704: PUSH
71705: LD_VAR 0 7
71709: AND
71710: IFFALSE 71726
// ComChangeProfession ( j , class ) ;
71712: LD_VAR 0 3
71716: PPUSH
71717: LD_VAR 0 7
71721: PPUSH
71722: CALL_OW 123
71726: GO 71656
71728: POP
71729: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
71730: LD_EXP 68
71734: PUSH
71735: LD_VAR 0 2
71739: ARRAY
71740: PUSH
71741: LD_EXP 67
71745: PUSH
71746: LD_VAR 0 2
71750: ARRAY
71751: NOT
71752: AND
71753: PUSH
71754: LD_EXP 45
71758: PUSH
71759: LD_VAR 0 2
71763: ARRAY
71764: PPUSH
71765: LD_INT 30
71767: PUSH
71768: LD_INT 32
71770: PUSH
71771: EMPTY
71772: LIST
71773: LIST
71774: PPUSH
71775: CALL_OW 72
71779: NOT
71780: AND
71781: PUSH
71782: LD_EXP 45
71786: PUSH
71787: LD_VAR 0 2
71791: ARRAY
71792: PPUSH
71793: LD_INT 2
71795: PUSH
71796: LD_INT 30
71798: PUSH
71799: LD_INT 4
71801: PUSH
71802: EMPTY
71803: LIST
71804: LIST
71805: PUSH
71806: LD_INT 30
71808: PUSH
71809: LD_INT 5
71811: PUSH
71812: EMPTY
71813: LIST
71814: LIST
71815: PUSH
71816: EMPTY
71817: LIST
71818: LIST
71819: LIST
71820: PPUSH
71821: CALL_OW 72
71825: NOT
71826: AND
71827: IFFALSE 71959
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
71829: LD_ADDR_VAR 0 4
71833: PUSH
71834: LD_EXP 45
71838: PUSH
71839: LD_VAR 0 2
71843: ARRAY
71844: PPUSH
71845: LD_INT 2
71847: PUSH
71848: LD_INT 25
71850: PUSH
71851: LD_INT 1
71853: PUSH
71854: EMPTY
71855: LIST
71856: LIST
71857: PUSH
71858: LD_INT 25
71860: PUSH
71861: LD_INT 5
71863: PUSH
71864: EMPTY
71865: LIST
71866: LIST
71867: PUSH
71868: LD_INT 25
71870: PUSH
71871: LD_INT 8
71873: PUSH
71874: EMPTY
71875: LIST
71876: LIST
71877: PUSH
71878: LD_INT 25
71880: PUSH
71881: LD_INT 9
71883: PUSH
71884: EMPTY
71885: LIST
71886: LIST
71887: PUSH
71888: EMPTY
71889: LIST
71890: LIST
71891: LIST
71892: LIST
71893: LIST
71894: PPUSH
71895: CALL_OW 72
71899: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
71900: LD_ADDR_VAR 0 4
71904: PUSH
71905: LD_VAR 0 4
71909: PUSH
71910: LD_VAR 0 4
71914: PPUSH
71915: LD_INT 18
71917: PPUSH
71918: CALL 52855 0 2
71922: DIFF
71923: ST_TO_ADDR
// if tmp then
71924: LD_VAR 0 4
71928: IFFALSE 71959
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
71930: LD_VAR 0 2
71934: PPUSH
71935: LD_VAR 0 4
71939: PPUSH
71940: LD_EXP 70
71944: PUSH
71945: LD_VAR 0 2
71949: ARRAY
71950: PPUSH
71951: CALL 103221 0 3
// exit ;
71955: POP
71956: POP
71957: GO 72032
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
71959: LD_EXP 68
71963: PUSH
71964: LD_VAR 0 2
71968: ARRAY
71969: PUSH
71970: LD_EXP 67
71974: PUSH
71975: LD_VAR 0 2
71979: ARRAY
71980: AND
71981: IFFALSE 72028
// begin tmp := mc_defender [ i ] ;
71983: LD_ADDR_VAR 0 4
71987: PUSH
71988: LD_EXP 67
71992: PUSH
71993: LD_VAR 0 2
71997: ARRAY
71998: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
71999: LD_VAR 0 2
72003: PPUSH
72004: LD_VAR 0 4
72008: PPUSH
72009: LD_EXP 68
72013: PUSH
72014: LD_VAR 0 2
72018: ARRAY
72019: PPUSH
72020: CALL 103782 0 3
// exit ;
72024: POP
72025: POP
72026: GO 72032
// end ; end ;
72028: GO 71465
72030: POP
72031: POP
// end ;
72032: LD_VAR 0 1
72036: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
72037: LD_INT 0
72039: PPUSH
72040: PPUSH
72041: PPUSH
72042: PPUSH
72043: PPUSH
72044: PPUSH
72045: PPUSH
72046: PPUSH
72047: PPUSH
72048: PPUSH
72049: PPUSH
// if not mc_bases then
72050: LD_EXP 45
72054: NOT
72055: IFFALSE 72059
// exit ;
72057: GO 73146
// for i = 1 to mc_bases do
72059: LD_ADDR_VAR 0 2
72063: PUSH
72064: DOUBLE
72065: LD_INT 1
72067: DEC
72068: ST_TO_ADDR
72069: LD_EXP 45
72073: PUSH
72074: FOR_TO
72075: IFFALSE 73144
// begin tmp := mc_lab [ i ] ;
72077: LD_ADDR_VAR 0 6
72081: PUSH
72082: LD_EXP 78
72086: PUSH
72087: LD_VAR 0 2
72091: ARRAY
72092: ST_TO_ADDR
// if not tmp then
72093: LD_VAR 0 6
72097: NOT
72098: IFFALSE 72102
// continue ;
72100: GO 72074
// idle_lab := 0 ;
72102: LD_ADDR_VAR 0 11
72106: PUSH
72107: LD_INT 0
72109: ST_TO_ADDR
// for j in tmp do
72110: LD_ADDR_VAR 0 3
72114: PUSH
72115: LD_VAR 0 6
72119: PUSH
72120: FOR_IN
72121: IFFALSE 73140
// begin researching := false ;
72123: LD_ADDR_VAR 0 10
72127: PUSH
72128: LD_INT 0
72130: ST_TO_ADDR
// side := GetSide ( j ) ;
72131: LD_ADDR_VAR 0 4
72135: PUSH
72136: LD_VAR 0 3
72140: PPUSH
72141: CALL_OW 255
72145: ST_TO_ADDR
// if not mc_tech [ side ] then
72146: LD_EXP 72
72150: PUSH
72151: LD_VAR 0 4
72155: ARRAY
72156: NOT
72157: IFFALSE 72161
// continue ;
72159: GO 72120
// if BuildingStatus ( j ) = bs_idle then
72161: LD_VAR 0 3
72165: PPUSH
72166: CALL_OW 461
72170: PUSH
72171: LD_INT 2
72173: EQUAL
72174: IFFALSE 72362
// begin if idle_lab and UnitsInside ( j ) < 6 then
72176: LD_VAR 0 11
72180: PUSH
72181: LD_VAR 0 3
72185: PPUSH
72186: CALL_OW 313
72190: PUSH
72191: LD_INT 6
72193: LESS
72194: AND
72195: IFFALSE 72266
// begin tmp2 := UnitsInside ( idle_lab ) ;
72197: LD_ADDR_VAR 0 9
72201: PUSH
72202: LD_VAR 0 11
72206: PPUSH
72207: CALL_OW 313
72211: ST_TO_ADDR
// if tmp2 then
72212: LD_VAR 0 9
72216: IFFALSE 72258
// for x in tmp2 do
72218: LD_ADDR_VAR 0 7
72222: PUSH
72223: LD_VAR 0 9
72227: PUSH
72228: FOR_IN
72229: IFFALSE 72256
// begin ComExitBuilding ( x ) ;
72231: LD_VAR 0 7
72235: PPUSH
72236: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
72240: LD_VAR 0 7
72244: PPUSH
72245: LD_VAR 0 3
72249: PPUSH
72250: CALL_OW 180
// end ;
72254: GO 72228
72256: POP
72257: POP
// idle_lab := 0 ;
72258: LD_ADDR_VAR 0 11
72262: PUSH
72263: LD_INT 0
72265: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
72266: LD_ADDR_VAR 0 5
72270: PUSH
72271: LD_EXP 72
72275: PUSH
72276: LD_VAR 0 4
72280: ARRAY
72281: PUSH
72282: FOR_IN
72283: IFFALSE 72343
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
72285: LD_VAR 0 3
72289: PPUSH
72290: LD_VAR 0 5
72294: PPUSH
72295: CALL_OW 430
72299: PUSH
72300: LD_VAR 0 4
72304: PPUSH
72305: LD_VAR 0 5
72309: PPUSH
72310: CALL 20200 0 2
72314: AND
72315: IFFALSE 72341
// begin researching := true ;
72317: LD_ADDR_VAR 0 10
72321: PUSH
72322: LD_INT 1
72324: ST_TO_ADDR
// ComResearch ( j , t ) ;
72325: LD_VAR 0 3
72329: PPUSH
72330: LD_VAR 0 5
72334: PPUSH
72335: CALL_OW 124
// break ;
72339: GO 72343
// end ;
72341: GO 72282
72343: POP
72344: POP
// if not researching then
72345: LD_VAR 0 10
72349: NOT
72350: IFFALSE 72362
// idle_lab := j ;
72352: LD_ADDR_VAR 0 11
72356: PUSH
72357: LD_VAR 0 3
72361: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
72362: LD_VAR 0 3
72366: PPUSH
72367: CALL_OW 461
72371: PUSH
72372: LD_INT 10
72374: EQUAL
72375: IFFALSE 72963
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
72377: LD_EXP 74
72381: PUSH
72382: LD_VAR 0 2
72386: ARRAY
72387: NOT
72388: PUSH
72389: LD_EXP 75
72393: PUSH
72394: LD_VAR 0 2
72398: ARRAY
72399: NOT
72400: AND
72401: PUSH
72402: LD_EXP 72
72406: PUSH
72407: LD_VAR 0 4
72411: ARRAY
72412: PUSH
72413: LD_INT 1
72415: GREATER
72416: AND
72417: IFFALSE 72548
// begin ComCancel ( j ) ;
72419: LD_VAR 0 3
72423: PPUSH
72424: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
72428: LD_ADDR_EXP 72
72432: PUSH
72433: LD_EXP 72
72437: PPUSH
72438: LD_VAR 0 4
72442: PPUSH
72443: LD_EXP 72
72447: PUSH
72448: LD_VAR 0 4
72452: ARRAY
72453: PPUSH
72454: LD_EXP 72
72458: PUSH
72459: LD_VAR 0 4
72463: ARRAY
72464: PUSH
72465: LD_INT 1
72467: MINUS
72468: PPUSH
72469: LD_EXP 72
72473: PUSH
72474: LD_VAR 0 4
72478: ARRAY
72479: PPUSH
72480: LD_INT 0
72482: PPUSH
72483: CALL 23712 0 4
72487: PPUSH
72488: CALL_OW 1
72492: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
72493: LD_ADDR_EXP 72
72497: PUSH
72498: LD_EXP 72
72502: PPUSH
72503: LD_VAR 0 4
72507: PPUSH
72508: LD_EXP 72
72512: PUSH
72513: LD_VAR 0 4
72517: ARRAY
72518: PPUSH
72519: LD_EXP 72
72523: PUSH
72524: LD_VAR 0 4
72528: ARRAY
72529: PPUSH
72530: LD_INT 1
72532: PPUSH
72533: LD_INT 0
72535: PPUSH
72536: CALL 23712 0 4
72540: PPUSH
72541: CALL_OW 1
72545: ST_TO_ADDR
// continue ;
72546: GO 72120
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
72548: LD_EXP 74
72552: PUSH
72553: LD_VAR 0 2
72557: ARRAY
72558: PUSH
72559: LD_EXP 75
72563: PUSH
72564: LD_VAR 0 2
72568: ARRAY
72569: NOT
72570: AND
72571: IFFALSE 72698
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
72573: LD_ADDR_EXP 75
72577: PUSH
72578: LD_EXP 75
72582: PPUSH
72583: LD_VAR 0 2
72587: PUSH
72588: LD_EXP 75
72592: PUSH
72593: LD_VAR 0 2
72597: ARRAY
72598: PUSH
72599: LD_INT 1
72601: PLUS
72602: PUSH
72603: EMPTY
72604: LIST
72605: LIST
72606: PPUSH
72607: LD_EXP 74
72611: PUSH
72612: LD_VAR 0 2
72616: ARRAY
72617: PUSH
72618: LD_INT 1
72620: ARRAY
72621: PPUSH
72622: CALL 24294 0 3
72626: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
72627: LD_EXP 74
72631: PUSH
72632: LD_VAR 0 2
72636: ARRAY
72637: PUSH
72638: LD_INT 1
72640: ARRAY
72641: PPUSH
72642: LD_INT 112
72644: PPUSH
72645: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
72649: LD_ADDR_VAR 0 9
72653: PUSH
72654: LD_EXP 74
72658: PUSH
72659: LD_VAR 0 2
72663: ARRAY
72664: PPUSH
72665: LD_INT 1
72667: PPUSH
72668: CALL_OW 3
72672: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
72673: LD_ADDR_EXP 74
72677: PUSH
72678: LD_EXP 74
72682: PPUSH
72683: LD_VAR 0 2
72687: PPUSH
72688: LD_VAR 0 9
72692: PPUSH
72693: CALL_OW 1
72697: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
72698: LD_EXP 74
72702: PUSH
72703: LD_VAR 0 2
72707: ARRAY
72708: PUSH
72709: LD_EXP 75
72713: PUSH
72714: LD_VAR 0 2
72718: ARRAY
72719: AND
72720: PUSH
72721: LD_EXP 75
72725: PUSH
72726: LD_VAR 0 2
72730: ARRAY
72731: PUSH
72732: LD_INT 1
72734: ARRAY
72735: PPUSH
72736: CALL_OW 310
72740: NOT
72741: AND
72742: PUSH
72743: LD_VAR 0 3
72747: PPUSH
72748: CALL_OW 313
72752: PUSH
72753: LD_INT 6
72755: EQUAL
72756: AND
72757: IFFALSE 72813
// begin tmp2 := UnitsInside ( j ) ;
72759: LD_ADDR_VAR 0 9
72763: PUSH
72764: LD_VAR 0 3
72768: PPUSH
72769: CALL_OW 313
72773: ST_TO_ADDR
// if tmp2 = 6 then
72774: LD_VAR 0 9
72778: PUSH
72779: LD_INT 6
72781: EQUAL
72782: IFFALSE 72813
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
72784: LD_VAR 0 9
72788: PUSH
72789: LD_INT 1
72791: ARRAY
72792: PPUSH
72793: LD_INT 112
72795: PPUSH
72796: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
72800: LD_VAR 0 9
72804: PUSH
72805: LD_INT 1
72807: ARRAY
72808: PPUSH
72809: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
72813: LD_EXP 75
72817: PUSH
72818: LD_VAR 0 2
72822: ARRAY
72823: PUSH
72824: LD_EXP 75
72828: PUSH
72829: LD_VAR 0 2
72833: ARRAY
72834: PUSH
72835: LD_INT 1
72837: ARRAY
72838: PPUSH
72839: CALL_OW 314
72843: NOT
72844: AND
72845: PUSH
72846: LD_EXP 75
72850: PUSH
72851: LD_VAR 0 2
72855: ARRAY
72856: PUSH
72857: LD_INT 1
72859: ARRAY
72860: PPUSH
72861: CALL_OW 310
72865: NOT
72866: AND
72867: IFFALSE 72893
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
72869: LD_EXP 75
72873: PUSH
72874: LD_VAR 0 2
72878: ARRAY
72879: PUSH
72880: LD_INT 1
72882: ARRAY
72883: PPUSH
72884: LD_VAR 0 3
72888: PPUSH
72889: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
72893: LD_EXP 75
72897: PUSH
72898: LD_VAR 0 2
72902: ARRAY
72903: PUSH
72904: LD_INT 1
72906: ARRAY
72907: PPUSH
72908: CALL_OW 310
72912: PUSH
72913: LD_EXP 75
72917: PUSH
72918: LD_VAR 0 2
72922: ARRAY
72923: PUSH
72924: LD_INT 1
72926: ARRAY
72927: PPUSH
72928: CALL_OW 310
72932: PPUSH
72933: CALL_OW 461
72937: PUSH
72938: LD_INT 3
72940: NONEQUAL
72941: AND
72942: IFFALSE 72963
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
72944: LD_EXP 75
72948: PUSH
72949: LD_VAR 0 2
72953: ARRAY
72954: PUSH
72955: LD_INT 1
72957: ARRAY
72958: PPUSH
72959: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
72963: LD_VAR 0 3
72967: PPUSH
72968: CALL_OW 461
72972: PUSH
72973: LD_INT 6
72975: EQUAL
72976: PUSH
72977: LD_VAR 0 6
72981: PUSH
72982: LD_INT 1
72984: GREATER
72985: AND
72986: IFFALSE 73138
// begin sci := [ ] ;
72988: LD_ADDR_VAR 0 8
72992: PUSH
72993: EMPTY
72994: ST_TO_ADDR
// for x in ( tmp diff j ) do
72995: LD_ADDR_VAR 0 7
72999: PUSH
73000: LD_VAR 0 6
73004: PUSH
73005: LD_VAR 0 3
73009: DIFF
73010: PUSH
73011: FOR_IN
73012: IFFALSE 73064
// begin if sci = 6 then
73014: LD_VAR 0 8
73018: PUSH
73019: LD_INT 6
73021: EQUAL
73022: IFFALSE 73026
// break ;
73024: GO 73064
// if BuildingStatus ( x ) = bs_idle then
73026: LD_VAR 0 7
73030: PPUSH
73031: CALL_OW 461
73035: PUSH
73036: LD_INT 2
73038: EQUAL
73039: IFFALSE 73062
// sci := sci ^ UnitsInside ( x ) ;
73041: LD_ADDR_VAR 0 8
73045: PUSH
73046: LD_VAR 0 8
73050: PUSH
73051: LD_VAR 0 7
73055: PPUSH
73056: CALL_OW 313
73060: ADD
73061: ST_TO_ADDR
// end ;
73062: GO 73011
73064: POP
73065: POP
// if not sci then
73066: LD_VAR 0 8
73070: NOT
73071: IFFALSE 73075
// continue ;
73073: GO 72120
// for x in sci do
73075: LD_ADDR_VAR 0 7
73079: PUSH
73080: LD_VAR 0 8
73084: PUSH
73085: FOR_IN
73086: IFFALSE 73136
// if IsInUnit ( x ) and not HasTask ( x ) then
73088: LD_VAR 0 7
73092: PPUSH
73093: CALL_OW 310
73097: PUSH
73098: LD_VAR 0 7
73102: PPUSH
73103: CALL_OW 314
73107: NOT
73108: AND
73109: IFFALSE 73134
// begin ComExitBuilding ( x ) ;
73111: LD_VAR 0 7
73115: PPUSH
73116: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
73120: LD_VAR 0 7
73124: PPUSH
73125: LD_VAR 0 3
73129: PPUSH
73130: CALL_OW 180
// end ;
73134: GO 73085
73136: POP
73137: POP
// end ; end ;
73138: GO 72120
73140: POP
73141: POP
// end ;
73142: GO 72074
73144: POP
73145: POP
// end ;
73146: LD_VAR 0 1
73150: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
73151: LD_INT 0
73153: PPUSH
73154: PPUSH
// if not mc_bases then
73155: LD_EXP 45
73159: NOT
73160: IFFALSE 73164
// exit ;
73162: GO 73245
// for i = 1 to mc_bases do
73164: LD_ADDR_VAR 0 2
73168: PUSH
73169: DOUBLE
73170: LD_INT 1
73172: DEC
73173: ST_TO_ADDR
73174: LD_EXP 45
73178: PUSH
73179: FOR_TO
73180: IFFALSE 73243
// if mc_mines [ i ] and mc_miners [ i ] then
73182: LD_EXP 58
73186: PUSH
73187: LD_VAR 0 2
73191: ARRAY
73192: PUSH
73193: LD_EXP 59
73197: PUSH
73198: LD_VAR 0 2
73202: ARRAY
73203: AND
73204: IFFALSE 73241
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
73206: LD_EXP 59
73210: PUSH
73211: LD_VAR 0 2
73215: ARRAY
73216: PUSH
73217: LD_INT 1
73219: ARRAY
73220: PPUSH
73221: CALL_OW 255
73225: PPUSH
73226: LD_EXP 58
73230: PUSH
73231: LD_VAR 0 2
73235: ARRAY
73236: PPUSH
73237: CALL 21283 0 2
73241: GO 73179
73243: POP
73244: POP
// end ;
73245: LD_VAR 0 1
73249: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
73250: LD_INT 0
73252: PPUSH
73253: PPUSH
73254: PPUSH
73255: PPUSH
73256: PPUSH
73257: PPUSH
73258: PPUSH
73259: PPUSH
// if not mc_bases or not mc_parking then
73260: LD_EXP 45
73264: NOT
73265: PUSH
73266: LD_EXP 69
73270: NOT
73271: OR
73272: IFFALSE 73276
// exit ;
73274: GO 73975
// for i = 1 to mc_bases do
73276: LD_ADDR_VAR 0 2
73280: PUSH
73281: DOUBLE
73282: LD_INT 1
73284: DEC
73285: ST_TO_ADDR
73286: LD_EXP 45
73290: PUSH
73291: FOR_TO
73292: IFFALSE 73973
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
73294: LD_EXP 45
73298: PUSH
73299: LD_VAR 0 2
73303: ARRAY
73304: NOT
73305: PUSH
73306: LD_EXP 69
73310: PUSH
73311: LD_VAR 0 2
73315: ARRAY
73316: NOT
73317: OR
73318: IFFALSE 73322
// continue ;
73320: GO 73291
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
73322: LD_ADDR_VAR 0 5
73326: PUSH
73327: LD_EXP 45
73331: PUSH
73332: LD_VAR 0 2
73336: ARRAY
73337: PUSH
73338: LD_INT 1
73340: ARRAY
73341: PPUSH
73342: CALL_OW 255
73346: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
73347: LD_ADDR_VAR 0 6
73351: PUSH
73352: LD_EXP 45
73356: PUSH
73357: LD_VAR 0 2
73361: ARRAY
73362: PPUSH
73363: LD_INT 30
73365: PUSH
73366: LD_INT 3
73368: PUSH
73369: EMPTY
73370: LIST
73371: LIST
73372: PPUSH
73373: CALL_OW 72
73377: ST_TO_ADDR
// if not fac then
73378: LD_VAR 0 6
73382: NOT
73383: IFFALSE 73434
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
73385: LD_ADDR_VAR 0 6
73389: PUSH
73390: LD_EXP 45
73394: PUSH
73395: LD_VAR 0 2
73399: ARRAY
73400: PPUSH
73401: LD_INT 2
73403: PUSH
73404: LD_INT 30
73406: PUSH
73407: LD_INT 0
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: PUSH
73414: LD_INT 30
73416: PUSH
73417: LD_INT 1
73419: PUSH
73420: EMPTY
73421: LIST
73422: LIST
73423: PUSH
73424: EMPTY
73425: LIST
73426: LIST
73427: LIST
73428: PPUSH
73429: CALL_OW 72
73433: ST_TO_ADDR
// if not fac then
73434: LD_VAR 0 6
73438: NOT
73439: IFFALSE 73443
// continue ;
73441: GO 73291
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
73443: LD_ADDR_VAR 0 7
73447: PUSH
73448: LD_EXP 69
73452: PUSH
73453: LD_VAR 0 2
73457: ARRAY
73458: PPUSH
73459: LD_INT 22
73461: PUSH
73462: LD_VAR 0 5
73466: PUSH
73467: EMPTY
73468: LIST
73469: LIST
73470: PUSH
73471: LD_INT 21
73473: PUSH
73474: LD_INT 2
73476: PUSH
73477: EMPTY
73478: LIST
73479: LIST
73480: PUSH
73481: LD_INT 3
73483: PUSH
73484: LD_INT 24
73486: PUSH
73487: LD_INT 1000
73489: PUSH
73490: EMPTY
73491: LIST
73492: LIST
73493: PUSH
73494: EMPTY
73495: LIST
73496: LIST
73497: PUSH
73498: EMPTY
73499: LIST
73500: LIST
73501: LIST
73502: PPUSH
73503: CALL_OW 70
73507: ST_TO_ADDR
// for j in fac do
73508: LD_ADDR_VAR 0 3
73512: PUSH
73513: LD_VAR 0 6
73517: PUSH
73518: FOR_IN
73519: IFFALSE 73600
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
73521: LD_ADDR_VAR 0 7
73525: PUSH
73526: LD_VAR 0 7
73530: PUSH
73531: LD_INT 22
73533: PUSH
73534: LD_VAR 0 5
73538: PUSH
73539: EMPTY
73540: LIST
73541: LIST
73542: PUSH
73543: LD_INT 91
73545: PUSH
73546: LD_VAR 0 3
73550: PUSH
73551: LD_INT 15
73553: PUSH
73554: EMPTY
73555: LIST
73556: LIST
73557: LIST
73558: PUSH
73559: LD_INT 21
73561: PUSH
73562: LD_INT 2
73564: PUSH
73565: EMPTY
73566: LIST
73567: LIST
73568: PUSH
73569: LD_INT 3
73571: PUSH
73572: LD_INT 24
73574: PUSH
73575: LD_INT 1000
73577: PUSH
73578: EMPTY
73579: LIST
73580: LIST
73581: PUSH
73582: EMPTY
73583: LIST
73584: LIST
73585: PUSH
73586: EMPTY
73587: LIST
73588: LIST
73589: LIST
73590: LIST
73591: PPUSH
73592: CALL_OW 69
73596: UNION
73597: ST_TO_ADDR
73598: GO 73518
73600: POP
73601: POP
// if not vehs then
73602: LD_VAR 0 7
73606: NOT
73607: IFFALSE 73633
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
73609: LD_ADDR_EXP 57
73613: PUSH
73614: LD_EXP 57
73618: PPUSH
73619: LD_VAR 0 2
73623: PPUSH
73624: EMPTY
73625: PPUSH
73626: CALL_OW 1
73630: ST_TO_ADDR
// continue ;
73631: GO 73291
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
73633: LD_ADDR_VAR 0 8
73637: PUSH
73638: LD_EXP 45
73642: PUSH
73643: LD_VAR 0 2
73647: ARRAY
73648: PPUSH
73649: LD_INT 30
73651: PUSH
73652: LD_INT 3
73654: PUSH
73655: EMPTY
73656: LIST
73657: LIST
73658: PPUSH
73659: CALL_OW 72
73663: ST_TO_ADDR
// if tmp then
73664: LD_VAR 0 8
73668: IFFALSE 73771
// begin for j in tmp do
73670: LD_ADDR_VAR 0 3
73674: PUSH
73675: LD_VAR 0 8
73679: PUSH
73680: FOR_IN
73681: IFFALSE 73769
// for k in UnitsInside ( j ) do
73683: LD_ADDR_VAR 0 4
73687: PUSH
73688: LD_VAR 0 3
73692: PPUSH
73693: CALL_OW 313
73697: PUSH
73698: FOR_IN
73699: IFFALSE 73765
// if k then
73701: LD_VAR 0 4
73705: IFFALSE 73763
// if not k in mc_repair_vehicle [ i ] then
73707: LD_VAR 0 4
73711: PUSH
73712: LD_EXP 57
73716: PUSH
73717: LD_VAR 0 2
73721: ARRAY
73722: IN
73723: NOT
73724: IFFALSE 73763
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
73726: LD_ADDR_EXP 57
73730: PUSH
73731: LD_EXP 57
73735: PPUSH
73736: LD_VAR 0 2
73740: PPUSH
73741: LD_EXP 57
73745: PUSH
73746: LD_VAR 0 2
73750: ARRAY
73751: PUSH
73752: LD_VAR 0 4
73756: UNION
73757: PPUSH
73758: CALL_OW 1
73762: ST_TO_ADDR
73763: GO 73698
73765: POP
73766: POP
73767: GO 73680
73769: POP
73770: POP
// end ; if not mc_repair_vehicle [ i ] then
73771: LD_EXP 57
73775: PUSH
73776: LD_VAR 0 2
73780: ARRAY
73781: NOT
73782: IFFALSE 73786
// continue ;
73784: GO 73291
// for j in mc_repair_vehicle [ i ] do
73786: LD_ADDR_VAR 0 3
73790: PUSH
73791: LD_EXP 57
73795: PUSH
73796: LD_VAR 0 2
73800: ARRAY
73801: PUSH
73802: FOR_IN
73803: IFFALSE 73969
// begin if GetClass ( j ) <> 3 then
73805: LD_VAR 0 3
73809: PPUSH
73810: CALL_OW 257
73814: PUSH
73815: LD_INT 3
73817: NONEQUAL
73818: IFFALSE 73859
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
73820: LD_ADDR_EXP 57
73824: PUSH
73825: LD_EXP 57
73829: PPUSH
73830: LD_VAR 0 2
73834: PPUSH
73835: LD_EXP 57
73839: PUSH
73840: LD_VAR 0 2
73844: ARRAY
73845: PUSH
73846: LD_VAR 0 3
73850: DIFF
73851: PPUSH
73852: CALL_OW 1
73856: ST_TO_ADDR
// continue ;
73857: GO 73802
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
73859: LD_VAR 0 3
73863: PPUSH
73864: CALL_OW 311
73868: NOT
73869: PUSH
73870: LD_VAR 0 3
73874: PUSH
73875: LD_EXP 48
73879: PUSH
73880: LD_VAR 0 2
73884: ARRAY
73885: PUSH
73886: LD_INT 1
73888: ARRAY
73889: IN
73890: NOT
73891: AND
73892: PUSH
73893: LD_VAR 0 3
73897: PUSH
73898: LD_EXP 48
73902: PUSH
73903: LD_VAR 0 2
73907: ARRAY
73908: PUSH
73909: LD_INT 2
73911: ARRAY
73912: IN
73913: NOT
73914: AND
73915: IFFALSE 73967
// begin if IsInUnit ( j ) then
73917: LD_VAR 0 3
73921: PPUSH
73922: CALL_OW 310
73926: IFFALSE 73937
// ComExitBuilding ( j ) ;
73928: LD_VAR 0 3
73932: PPUSH
73933: CALL_OW 122
// if not HasTask ( j ) then
73937: LD_VAR 0 3
73941: PPUSH
73942: CALL_OW 314
73946: NOT
73947: IFFALSE 73967
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
73949: LD_VAR 0 3
73953: PPUSH
73954: LD_VAR 0 7
73958: PUSH
73959: LD_INT 1
73961: ARRAY
73962: PPUSH
73963: CALL_OW 189
// end ; end ;
73967: GO 73802
73969: POP
73970: POP
// end ;
73971: GO 73291
73973: POP
73974: POP
// end ;
73975: LD_VAR 0 1
73979: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
73980: LD_INT 0
73982: PPUSH
73983: PPUSH
73984: PPUSH
73985: PPUSH
73986: PPUSH
73987: PPUSH
73988: PPUSH
73989: PPUSH
73990: PPUSH
73991: PPUSH
73992: PPUSH
// if not mc_bases then
73993: LD_EXP 45
73997: NOT
73998: IFFALSE 74002
// exit ;
74000: GO 74804
// for i = 1 to mc_bases do
74002: LD_ADDR_VAR 0 2
74006: PUSH
74007: DOUBLE
74008: LD_INT 1
74010: DEC
74011: ST_TO_ADDR
74012: LD_EXP 45
74016: PUSH
74017: FOR_TO
74018: IFFALSE 74802
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
74020: LD_EXP 73
74024: PUSH
74025: LD_VAR 0 2
74029: ARRAY
74030: NOT
74031: PUSH
74032: LD_EXP 48
74036: PUSH
74037: LD_VAR 0 2
74041: ARRAY
74042: PUSH
74043: LD_INT 1
74045: ARRAY
74046: OR
74047: PUSH
74048: LD_EXP 48
74052: PUSH
74053: LD_VAR 0 2
74057: ARRAY
74058: PUSH
74059: LD_INT 2
74061: ARRAY
74062: OR
74063: PUSH
74064: LD_EXP 71
74068: PUSH
74069: LD_VAR 0 2
74073: ARRAY
74074: PPUSH
74075: LD_INT 1
74077: PPUSH
74078: CALL_OW 325
74082: NOT
74083: OR
74084: PUSH
74085: LD_EXP 68
74089: PUSH
74090: LD_VAR 0 2
74094: ARRAY
74095: OR
74096: IFFALSE 74100
// continue ;
74098: GO 74017
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
74100: LD_ADDR_VAR 0 8
74104: PUSH
74105: LD_EXP 45
74109: PUSH
74110: LD_VAR 0 2
74114: ARRAY
74115: PPUSH
74116: LD_INT 25
74118: PUSH
74119: LD_INT 4
74121: PUSH
74122: EMPTY
74123: LIST
74124: LIST
74125: PUSH
74126: LD_INT 50
74128: PUSH
74129: EMPTY
74130: LIST
74131: PUSH
74132: LD_INT 3
74134: PUSH
74135: LD_INT 60
74137: PUSH
74138: EMPTY
74139: LIST
74140: PUSH
74141: EMPTY
74142: LIST
74143: LIST
74144: PUSH
74145: EMPTY
74146: LIST
74147: LIST
74148: LIST
74149: PPUSH
74150: CALL_OW 72
74154: PUSH
74155: LD_EXP 49
74159: PUSH
74160: LD_VAR 0 2
74164: ARRAY
74165: DIFF
74166: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
74167: LD_ADDR_VAR 0 9
74171: PUSH
74172: LD_EXP 45
74176: PUSH
74177: LD_VAR 0 2
74181: ARRAY
74182: PPUSH
74183: LD_INT 2
74185: PUSH
74186: LD_INT 30
74188: PUSH
74189: LD_INT 0
74191: PUSH
74192: EMPTY
74193: LIST
74194: LIST
74195: PUSH
74196: LD_INT 30
74198: PUSH
74199: LD_INT 1
74201: PUSH
74202: EMPTY
74203: LIST
74204: LIST
74205: PUSH
74206: EMPTY
74207: LIST
74208: LIST
74209: LIST
74210: PPUSH
74211: CALL_OW 72
74215: ST_TO_ADDR
// if not tmp or not dep then
74216: LD_VAR 0 8
74220: NOT
74221: PUSH
74222: LD_VAR 0 9
74226: NOT
74227: OR
74228: IFFALSE 74232
// continue ;
74230: GO 74017
// side := GetSide ( tmp [ 1 ] ) ;
74232: LD_ADDR_VAR 0 11
74236: PUSH
74237: LD_VAR 0 8
74241: PUSH
74242: LD_INT 1
74244: ARRAY
74245: PPUSH
74246: CALL_OW 255
74250: ST_TO_ADDR
// dep := dep [ 1 ] ;
74251: LD_ADDR_VAR 0 9
74255: PUSH
74256: LD_VAR 0 9
74260: PUSH
74261: LD_INT 1
74263: ARRAY
74264: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
74265: LD_ADDR_VAR 0 7
74269: PUSH
74270: LD_EXP 73
74274: PUSH
74275: LD_VAR 0 2
74279: ARRAY
74280: PPUSH
74281: LD_INT 22
74283: PUSH
74284: LD_INT 0
74286: PUSH
74287: EMPTY
74288: LIST
74289: LIST
74290: PUSH
74291: LD_INT 25
74293: PUSH
74294: LD_INT 12
74296: PUSH
74297: EMPTY
74298: LIST
74299: LIST
74300: PUSH
74301: EMPTY
74302: LIST
74303: LIST
74304: PPUSH
74305: CALL_OW 70
74309: PUSH
74310: LD_INT 22
74312: PUSH
74313: LD_INT 0
74315: PUSH
74316: EMPTY
74317: LIST
74318: LIST
74319: PUSH
74320: LD_INT 25
74322: PUSH
74323: LD_INT 12
74325: PUSH
74326: EMPTY
74327: LIST
74328: LIST
74329: PUSH
74330: LD_INT 91
74332: PUSH
74333: LD_VAR 0 9
74337: PUSH
74338: LD_INT 20
74340: PUSH
74341: EMPTY
74342: LIST
74343: LIST
74344: LIST
74345: PUSH
74346: EMPTY
74347: LIST
74348: LIST
74349: LIST
74350: PPUSH
74351: CALL_OW 69
74355: UNION
74356: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
74357: LD_ADDR_VAR 0 10
74361: PUSH
74362: LD_EXP 73
74366: PUSH
74367: LD_VAR 0 2
74371: ARRAY
74372: PPUSH
74373: LD_INT 81
74375: PUSH
74376: LD_VAR 0 11
74380: PUSH
74381: EMPTY
74382: LIST
74383: LIST
74384: PPUSH
74385: CALL_OW 70
74389: ST_TO_ADDR
// if not apes or danger_at_area then
74390: LD_VAR 0 7
74394: NOT
74395: PUSH
74396: LD_VAR 0 10
74400: OR
74401: IFFALSE 74451
// begin if mc_taming [ i ] then
74403: LD_EXP 76
74407: PUSH
74408: LD_VAR 0 2
74412: ARRAY
74413: IFFALSE 74449
// begin MC_Reset ( i , 121 ) ;
74415: LD_VAR 0 2
74419: PPUSH
74420: LD_INT 121
74422: PPUSH
74423: CALL 59902 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
74427: LD_ADDR_EXP 76
74431: PUSH
74432: LD_EXP 76
74436: PPUSH
74437: LD_VAR 0 2
74441: PPUSH
74442: EMPTY
74443: PPUSH
74444: CALL_OW 1
74448: ST_TO_ADDR
// end ; continue ;
74449: GO 74017
// end ; for j in tmp do
74451: LD_ADDR_VAR 0 3
74455: PUSH
74456: LD_VAR 0 8
74460: PUSH
74461: FOR_IN
74462: IFFALSE 74798
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
74464: LD_VAR 0 3
74468: PUSH
74469: LD_EXP 76
74473: PUSH
74474: LD_VAR 0 2
74478: ARRAY
74479: IN
74480: NOT
74481: PUSH
74482: LD_EXP 76
74486: PUSH
74487: LD_VAR 0 2
74491: ARRAY
74492: PUSH
74493: LD_INT 3
74495: LESS
74496: AND
74497: IFFALSE 74555
// begin SetTag ( j , 121 ) ;
74499: LD_VAR 0 3
74503: PPUSH
74504: LD_INT 121
74506: PPUSH
74507: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
74511: LD_ADDR_EXP 76
74515: PUSH
74516: LD_EXP 76
74520: PPUSH
74521: LD_VAR 0 2
74525: PUSH
74526: LD_EXP 76
74530: PUSH
74531: LD_VAR 0 2
74535: ARRAY
74536: PUSH
74537: LD_INT 1
74539: PLUS
74540: PUSH
74541: EMPTY
74542: LIST
74543: LIST
74544: PPUSH
74545: LD_VAR 0 3
74549: PPUSH
74550: CALL 24294 0 3
74554: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
74555: LD_VAR 0 3
74559: PUSH
74560: LD_EXP 76
74564: PUSH
74565: LD_VAR 0 2
74569: ARRAY
74570: IN
74571: IFFALSE 74796
// begin if GetClass ( j ) <> 4 then
74573: LD_VAR 0 3
74577: PPUSH
74578: CALL_OW 257
74582: PUSH
74583: LD_INT 4
74585: NONEQUAL
74586: IFFALSE 74639
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
74588: LD_ADDR_EXP 76
74592: PUSH
74593: LD_EXP 76
74597: PPUSH
74598: LD_VAR 0 2
74602: PPUSH
74603: LD_EXP 76
74607: PUSH
74608: LD_VAR 0 2
74612: ARRAY
74613: PUSH
74614: LD_VAR 0 3
74618: DIFF
74619: PPUSH
74620: CALL_OW 1
74624: ST_TO_ADDR
// SetTag ( j , 0 ) ;
74625: LD_VAR 0 3
74629: PPUSH
74630: LD_INT 0
74632: PPUSH
74633: CALL_OW 109
// continue ;
74637: GO 74461
// end ; if IsInUnit ( j ) then
74639: LD_VAR 0 3
74643: PPUSH
74644: CALL_OW 310
74648: IFFALSE 74659
// ComExitBuilding ( j ) ;
74650: LD_VAR 0 3
74654: PPUSH
74655: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
74659: LD_ADDR_VAR 0 6
74663: PUSH
74664: LD_VAR 0 7
74668: PPUSH
74669: LD_VAR 0 3
74673: PPUSH
74674: CALL_OW 74
74678: ST_TO_ADDR
// if not ape then
74679: LD_VAR 0 6
74683: NOT
74684: IFFALSE 74688
// break ;
74686: GO 74798
// x := GetX ( ape ) ;
74688: LD_ADDR_VAR 0 4
74692: PUSH
74693: LD_VAR 0 6
74697: PPUSH
74698: CALL_OW 250
74702: ST_TO_ADDR
// y := GetY ( ape ) ;
74703: LD_ADDR_VAR 0 5
74707: PUSH
74708: LD_VAR 0 6
74712: PPUSH
74713: CALL_OW 251
74717: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
74718: LD_VAR 0 4
74722: PPUSH
74723: LD_VAR 0 5
74727: PPUSH
74728: CALL_OW 488
74732: NOT
74733: PUSH
74734: LD_VAR 0 11
74738: PPUSH
74739: LD_VAR 0 4
74743: PPUSH
74744: LD_VAR 0 5
74748: PPUSH
74749: LD_INT 20
74751: PPUSH
74752: CALL 25190 0 4
74756: PUSH
74757: LD_INT 4
74759: ARRAY
74760: OR
74761: IFFALSE 74765
// break ;
74763: GO 74798
// if not HasTask ( j ) then
74765: LD_VAR 0 3
74769: PPUSH
74770: CALL_OW 314
74774: NOT
74775: IFFALSE 74796
// ComTameXY ( j , x , y ) ;
74777: LD_VAR 0 3
74781: PPUSH
74782: LD_VAR 0 4
74786: PPUSH
74787: LD_VAR 0 5
74791: PPUSH
74792: CALL_OW 131
// end ; end ;
74796: GO 74461
74798: POP
74799: POP
// end ;
74800: GO 74017
74802: POP
74803: POP
// end ;
74804: LD_VAR 0 1
74808: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
74809: LD_INT 0
74811: PPUSH
74812: PPUSH
74813: PPUSH
74814: PPUSH
74815: PPUSH
74816: PPUSH
74817: PPUSH
74818: PPUSH
// if not mc_bases then
74819: LD_EXP 45
74823: NOT
74824: IFFALSE 74828
// exit ;
74826: GO 75454
// for i = 1 to mc_bases do
74828: LD_ADDR_VAR 0 2
74832: PUSH
74833: DOUBLE
74834: LD_INT 1
74836: DEC
74837: ST_TO_ADDR
74838: LD_EXP 45
74842: PUSH
74843: FOR_TO
74844: IFFALSE 75452
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
74846: LD_EXP 74
74850: PUSH
74851: LD_VAR 0 2
74855: ARRAY
74856: NOT
74857: PUSH
74858: LD_EXP 74
74862: PUSH
74863: LD_VAR 0 2
74867: ARRAY
74868: PPUSH
74869: LD_INT 25
74871: PUSH
74872: LD_INT 12
74874: PUSH
74875: EMPTY
74876: LIST
74877: LIST
74878: PPUSH
74879: CALL_OW 72
74883: NOT
74884: OR
74885: IFFALSE 74889
// continue ;
74887: GO 74843
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
74889: LD_ADDR_VAR 0 5
74893: PUSH
74894: LD_EXP 74
74898: PUSH
74899: LD_VAR 0 2
74903: ARRAY
74904: PUSH
74905: LD_INT 1
74907: ARRAY
74908: PPUSH
74909: CALL_OW 255
74913: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
74914: LD_VAR 0 5
74918: PPUSH
74919: LD_INT 2
74921: PPUSH
74922: CALL_OW 325
74926: IFFALSE 75179
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
74928: LD_ADDR_VAR 0 4
74932: PUSH
74933: LD_EXP 74
74937: PUSH
74938: LD_VAR 0 2
74942: ARRAY
74943: PPUSH
74944: LD_INT 25
74946: PUSH
74947: LD_INT 16
74949: PUSH
74950: EMPTY
74951: LIST
74952: LIST
74953: PPUSH
74954: CALL_OW 72
74958: ST_TO_ADDR
// if tmp < 6 then
74959: LD_VAR 0 4
74963: PUSH
74964: LD_INT 6
74966: LESS
74967: IFFALSE 75179
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
74969: LD_ADDR_VAR 0 6
74973: PUSH
74974: LD_EXP 45
74978: PUSH
74979: LD_VAR 0 2
74983: ARRAY
74984: PPUSH
74985: LD_INT 2
74987: PUSH
74988: LD_INT 30
74990: PUSH
74991: LD_INT 0
74993: PUSH
74994: EMPTY
74995: LIST
74996: LIST
74997: PUSH
74998: LD_INT 30
75000: PUSH
75001: LD_INT 1
75003: PUSH
75004: EMPTY
75005: LIST
75006: LIST
75007: PUSH
75008: EMPTY
75009: LIST
75010: LIST
75011: LIST
75012: PPUSH
75013: CALL_OW 72
75017: ST_TO_ADDR
// if depot then
75018: LD_VAR 0 6
75022: IFFALSE 75179
// begin selected := 0 ;
75024: LD_ADDR_VAR 0 7
75028: PUSH
75029: LD_INT 0
75031: ST_TO_ADDR
// for j in depot do
75032: LD_ADDR_VAR 0 3
75036: PUSH
75037: LD_VAR 0 6
75041: PUSH
75042: FOR_IN
75043: IFFALSE 75074
// begin if UnitsInside ( j ) < 6 then
75045: LD_VAR 0 3
75049: PPUSH
75050: CALL_OW 313
75054: PUSH
75055: LD_INT 6
75057: LESS
75058: IFFALSE 75072
// begin selected := j ;
75060: LD_ADDR_VAR 0 7
75064: PUSH
75065: LD_VAR 0 3
75069: ST_TO_ADDR
// break ;
75070: GO 75074
// end ; end ;
75072: GO 75042
75074: POP
75075: POP
// if selected then
75076: LD_VAR 0 7
75080: IFFALSE 75179
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
75082: LD_ADDR_VAR 0 3
75086: PUSH
75087: LD_EXP 74
75091: PUSH
75092: LD_VAR 0 2
75096: ARRAY
75097: PPUSH
75098: LD_INT 25
75100: PUSH
75101: LD_INT 12
75103: PUSH
75104: EMPTY
75105: LIST
75106: LIST
75107: PPUSH
75108: CALL_OW 72
75112: PUSH
75113: FOR_IN
75114: IFFALSE 75177
// if not HasTask ( j ) then
75116: LD_VAR 0 3
75120: PPUSH
75121: CALL_OW 314
75125: NOT
75126: IFFALSE 75175
// begin if not IsInUnit ( j ) then
75128: LD_VAR 0 3
75132: PPUSH
75133: CALL_OW 310
75137: NOT
75138: IFFALSE 75154
// ComEnterUnit ( j , selected ) ;
75140: LD_VAR 0 3
75144: PPUSH
75145: LD_VAR 0 7
75149: PPUSH
75150: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
75154: LD_VAR 0 3
75158: PPUSH
75159: LD_INT 16
75161: PPUSH
75162: CALL_OW 183
// AddComExitBuilding ( j ) ;
75166: LD_VAR 0 3
75170: PPUSH
75171: CALL_OW 182
// end ;
75175: GO 75113
75177: POP
75178: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
75179: LD_VAR 0 5
75183: PPUSH
75184: LD_INT 11
75186: PPUSH
75187: CALL_OW 325
75191: IFFALSE 75450
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
75193: LD_ADDR_VAR 0 4
75197: PUSH
75198: LD_EXP 74
75202: PUSH
75203: LD_VAR 0 2
75207: ARRAY
75208: PPUSH
75209: LD_INT 25
75211: PUSH
75212: LD_INT 16
75214: PUSH
75215: EMPTY
75216: LIST
75217: LIST
75218: PPUSH
75219: CALL_OW 72
75223: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
75224: LD_VAR 0 4
75228: PUSH
75229: LD_INT 6
75231: GREATEREQUAL
75232: PUSH
75233: LD_VAR 0 5
75237: PPUSH
75238: LD_INT 2
75240: PPUSH
75241: CALL_OW 325
75245: NOT
75246: OR
75247: IFFALSE 75450
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
75249: LD_ADDR_VAR 0 8
75253: PUSH
75254: LD_EXP 45
75258: PUSH
75259: LD_VAR 0 2
75263: ARRAY
75264: PPUSH
75265: LD_INT 2
75267: PUSH
75268: LD_INT 30
75270: PUSH
75271: LD_INT 4
75273: PUSH
75274: EMPTY
75275: LIST
75276: LIST
75277: PUSH
75278: LD_INT 30
75280: PUSH
75281: LD_INT 5
75283: PUSH
75284: EMPTY
75285: LIST
75286: LIST
75287: PUSH
75288: EMPTY
75289: LIST
75290: LIST
75291: LIST
75292: PPUSH
75293: CALL_OW 72
75297: ST_TO_ADDR
// if barracks then
75298: LD_VAR 0 8
75302: IFFALSE 75450
// begin selected := 0 ;
75304: LD_ADDR_VAR 0 7
75308: PUSH
75309: LD_INT 0
75311: ST_TO_ADDR
// for j in barracks do
75312: LD_ADDR_VAR 0 3
75316: PUSH
75317: LD_VAR 0 8
75321: PUSH
75322: FOR_IN
75323: IFFALSE 75354
// begin if UnitsInside ( j ) < 6 then
75325: LD_VAR 0 3
75329: PPUSH
75330: CALL_OW 313
75334: PUSH
75335: LD_INT 6
75337: LESS
75338: IFFALSE 75352
// begin selected := j ;
75340: LD_ADDR_VAR 0 7
75344: PUSH
75345: LD_VAR 0 3
75349: ST_TO_ADDR
// break ;
75350: GO 75354
// end ; end ;
75352: GO 75322
75354: POP
75355: POP
// if selected then
75356: LD_VAR 0 7
75360: IFFALSE 75450
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
75362: LD_ADDR_VAR 0 3
75366: PUSH
75367: LD_EXP 74
75371: PUSH
75372: LD_VAR 0 2
75376: ARRAY
75377: PPUSH
75378: LD_INT 25
75380: PUSH
75381: LD_INT 12
75383: PUSH
75384: EMPTY
75385: LIST
75386: LIST
75387: PPUSH
75388: CALL_OW 72
75392: PUSH
75393: FOR_IN
75394: IFFALSE 75448
// if not IsInUnit ( j ) and not HasTask ( j ) then
75396: LD_VAR 0 3
75400: PPUSH
75401: CALL_OW 310
75405: NOT
75406: PUSH
75407: LD_VAR 0 3
75411: PPUSH
75412: CALL_OW 314
75416: NOT
75417: AND
75418: IFFALSE 75446
// begin ComEnterUnit ( j , selected ) ;
75420: LD_VAR 0 3
75424: PPUSH
75425: LD_VAR 0 7
75429: PPUSH
75430: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
75434: LD_VAR 0 3
75438: PPUSH
75439: LD_INT 15
75441: PPUSH
75442: CALL_OW 183
// end ;
75446: GO 75393
75448: POP
75449: POP
// end ; end ; end ; end ; end ;
75450: GO 74843
75452: POP
75453: POP
// end ;
75454: LD_VAR 0 1
75458: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
75459: LD_INT 0
75461: PPUSH
75462: PPUSH
75463: PPUSH
75464: PPUSH
// if not mc_bases then
75465: LD_EXP 45
75469: NOT
75470: IFFALSE 75474
// exit ;
75472: GO 75652
// for i = 1 to mc_bases do
75474: LD_ADDR_VAR 0 2
75478: PUSH
75479: DOUBLE
75480: LD_INT 1
75482: DEC
75483: ST_TO_ADDR
75484: LD_EXP 45
75488: PUSH
75489: FOR_TO
75490: IFFALSE 75650
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
75492: LD_ADDR_VAR 0 4
75496: PUSH
75497: LD_EXP 45
75501: PUSH
75502: LD_VAR 0 2
75506: ARRAY
75507: PPUSH
75508: LD_INT 25
75510: PUSH
75511: LD_INT 9
75513: PUSH
75514: EMPTY
75515: LIST
75516: LIST
75517: PPUSH
75518: CALL_OW 72
75522: ST_TO_ADDR
// if not tmp then
75523: LD_VAR 0 4
75527: NOT
75528: IFFALSE 75532
// continue ;
75530: GO 75489
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
75532: LD_EXP 71
75536: PUSH
75537: LD_VAR 0 2
75541: ARRAY
75542: PPUSH
75543: LD_INT 29
75545: PPUSH
75546: CALL_OW 325
75550: NOT
75551: PUSH
75552: LD_EXP 71
75556: PUSH
75557: LD_VAR 0 2
75561: ARRAY
75562: PPUSH
75563: LD_INT 28
75565: PPUSH
75566: CALL_OW 325
75570: NOT
75571: AND
75572: IFFALSE 75576
// continue ;
75574: GO 75489
// for j in tmp do
75576: LD_ADDR_VAR 0 3
75580: PUSH
75581: LD_VAR 0 4
75585: PUSH
75586: FOR_IN
75587: IFFALSE 75646
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
75589: LD_VAR 0 3
75593: PUSH
75594: LD_EXP 48
75598: PUSH
75599: LD_VAR 0 2
75603: ARRAY
75604: PUSH
75605: LD_INT 1
75607: ARRAY
75608: IN
75609: NOT
75610: PUSH
75611: LD_VAR 0 3
75615: PUSH
75616: LD_EXP 48
75620: PUSH
75621: LD_VAR 0 2
75625: ARRAY
75626: PUSH
75627: LD_INT 2
75629: ARRAY
75630: IN
75631: NOT
75632: AND
75633: IFFALSE 75644
// ComSpaceTimeShoot ( j ) ;
75635: LD_VAR 0 3
75639: PPUSH
75640: CALL 20291 0 1
75644: GO 75586
75646: POP
75647: POP
// end ;
75648: GO 75489
75650: POP
75651: POP
// end ;
75652: LD_VAR 0 1
75656: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
75657: LD_INT 0
75659: PPUSH
75660: PPUSH
75661: PPUSH
75662: PPUSH
75663: PPUSH
75664: PPUSH
75665: PPUSH
75666: PPUSH
75667: PPUSH
// if not mc_bases then
75668: LD_EXP 45
75672: NOT
75673: IFFALSE 75677
// exit ;
75675: GO 76299
// for i = 1 to mc_bases do
75677: LD_ADDR_VAR 0 2
75681: PUSH
75682: DOUBLE
75683: LD_INT 1
75685: DEC
75686: ST_TO_ADDR
75687: LD_EXP 45
75691: PUSH
75692: FOR_TO
75693: IFFALSE 76297
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
75695: LD_EXP 80
75699: PUSH
75700: LD_VAR 0 2
75704: ARRAY
75705: NOT
75706: PUSH
75707: LD_INT 38
75709: PPUSH
75710: LD_EXP 71
75714: PUSH
75715: LD_VAR 0 2
75719: ARRAY
75720: PPUSH
75721: CALL_OW 321
75725: PUSH
75726: LD_INT 2
75728: NONEQUAL
75729: OR
75730: IFFALSE 75734
// continue ;
75732: GO 75692
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
75734: LD_ADDR_VAR 0 8
75738: PUSH
75739: LD_EXP 45
75743: PUSH
75744: LD_VAR 0 2
75748: ARRAY
75749: PPUSH
75750: LD_INT 30
75752: PUSH
75753: LD_INT 34
75755: PUSH
75756: EMPTY
75757: LIST
75758: LIST
75759: PPUSH
75760: CALL_OW 72
75764: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
75765: LD_ADDR_VAR 0 9
75769: PUSH
75770: LD_EXP 45
75774: PUSH
75775: LD_VAR 0 2
75779: ARRAY
75780: PPUSH
75781: LD_INT 25
75783: PUSH
75784: LD_INT 4
75786: PUSH
75787: EMPTY
75788: LIST
75789: LIST
75790: PPUSH
75791: CALL_OW 72
75795: PPUSH
75796: LD_INT 0
75798: PPUSH
75799: CALL 52855 0 2
75803: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
75804: LD_VAR 0 9
75808: NOT
75809: PUSH
75810: LD_VAR 0 8
75814: NOT
75815: OR
75816: PUSH
75817: LD_EXP 45
75821: PUSH
75822: LD_VAR 0 2
75826: ARRAY
75827: PPUSH
75828: LD_INT 124
75830: PPUSH
75831: CALL 52855 0 2
75835: OR
75836: IFFALSE 75840
// continue ;
75838: GO 75692
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
75840: LD_EXP 81
75844: PUSH
75845: LD_VAR 0 2
75849: ARRAY
75850: PUSH
75851: LD_EXP 80
75855: PUSH
75856: LD_VAR 0 2
75860: ARRAY
75861: LESS
75862: PUSH
75863: LD_EXP 81
75867: PUSH
75868: LD_VAR 0 2
75872: ARRAY
75873: PUSH
75874: LD_VAR 0 8
75878: LESS
75879: AND
75880: IFFALSE 76295
// begin tmp := sci [ 1 ] ;
75882: LD_ADDR_VAR 0 7
75886: PUSH
75887: LD_VAR 0 9
75891: PUSH
75892: LD_INT 1
75894: ARRAY
75895: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
75896: LD_VAR 0 7
75900: PPUSH
75901: LD_INT 124
75903: PPUSH
75904: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
75908: LD_ADDR_VAR 0 3
75912: PUSH
75913: DOUBLE
75914: LD_EXP 80
75918: PUSH
75919: LD_VAR 0 2
75923: ARRAY
75924: INC
75925: ST_TO_ADDR
75926: LD_EXP 80
75930: PUSH
75931: LD_VAR 0 2
75935: ARRAY
75936: PUSH
75937: FOR_DOWNTO
75938: IFFALSE 76281
// begin if IsInUnit ( tmp ) then
75940: LD_VAR 0 7
75944: PPUSH
75945: CALL_OW 310
75949: IFFALSE 75960
// ComExitBuilding ( tmp ) ;
75951: LD_VAR 0 7
75955: PPUSH
75956: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
75960: LD_INT 35
75962: PPUSH
75963: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
75967: LD_VAR 0 7
75971: PPUSH
75972: CALL_OW 310
75976: NOT
75977: PUSH
75978: LD_VAR 0 7
75982: PPUSH
75983: CALL_OW 314
75987: NOT
75988: AND
75989: IFFALSE 75960
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
75991: LD_ADDR_VAR 0 6
75995: PUSH
75996: LD_VAR 0 7
76000: PPUSH
76001: CALL_OW 250
76005: PUSH
76006: LD_VAR 0 7
76010: PPUSH
76011: CALL_OW 251
76015: PUSH
76016: EMPTY
76017: LIST
76018: LIST
76019: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
76020: LD_INT 35
76022: PPUSH
76023: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
76027: LD_ADDR_VAR 0 4
76031: PUSH
76032: LD_EXP 80
76036: PUSH
76037: LD_VAR 0 2
76041: ARRAY
76042: PUSH
76043: LD_VAR 0 3
76047: ARRAY
76048: PUSH
76049: LD_INT 1
76051: ARRAY
76052: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
76053: LD_ADDR_VAR 0 5
76057: PUSH
76058: LD_EXP 80
76062: PUSH
76063: LD_VAR 0 2
76067: ARRAY
76068: PUSH
76069: LD_VAR 0 3
76073: ARRAY
76074: PUSH
76075: LD_INT 2
76077: ARRAY
76078: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
76079: LD_VAR 0 7
76083: PPUSH
76084: LD_INT 10
76086: PPUSH
76087: CALL 26887 0 2
76091: PUSH
76092: LD_INT 4
76094: ARRAY
76095: IFFALSE 76133
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
76097: LD_VAR 0 7
76101: PPUSH
76102: LD_VAR 0 6
76106: PUSH
76107: LD_INT 1
76109: ARRAY
76110: PPUSH
76111: LD_VAR 0 6
76115: PUSH
76116: LD_INT 2
76118: ARRAY
76119: PPUSH
76120: CALL_OW 111
// wait ( 0 0$10 ) ;
76124: LD_INT 350
76126: PPUSH
76127: CALL_OW 67
// end else
76131: GO 76159
// begin ComMoveXY ( tmp , x , y ) ;
76133: LD_VAR 0 7
76137: PPUSH
76138: LD_VAR 0 4
76142: PPUSH
76143: LD_VAR 0 5
76147: PPUSH
76148: CALL_OW 111
// wait ( 0 0$3 ) ;
76152: LD_INT 105
76154: PPUSH
76155: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
76159: LD_VAR 0 7
76163: PPUSH
76164: LD_VAR 0 4
76168: PPUSH
76169: LD_VAR 0 5
76173: PPUSH
76174: CALL_OW 307
76178: IFFALSE 76020
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
76180: LD_VAR 0 7
76184: PPUSH
76185: LD_VAR 0 4
76189: PPUSH
76190: LD_VAR 0 5
76194: PPUSH
76195: LD_VAR 0 8
76199: PUSH
76200: LD_VAR 0 3
76204: ARRAY
76205: PPUSH
76206: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
76210: LD_INT 35
76212: PPUSH
76213: CALL_OW 67
// until not HasTask ( tmp ) ;
76217: LD_VAR 0 7
76221: PPUSH
76222: CALL_OW 314
76226: NOT
76227: IFFALSE 76210
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
76229: LD_ADDR_EXP 81
76233: PUSH
76234: LD_EXP 81
76238: PPUSH
76239: LD_VAR 0 2
76243: PUSH
76244: LD_EXP 81
76248: PUSH
76249: LD_VAR 0 2
76253: ARRAY
76254: PUSH
76255: LD_INT 1
76257: PLUS
76258: PUSH
76259: EMPTY
76260: LIST
76261: LIST
76262: PPUSH
76263: LD_VAR 0 8
76267: PUSH
76268: LD_VAR 0 3
76272: ARRAY
76273: PPUSH
76274: CALL 24294 0 3
76278: ST_TO_ADDR
// end ;
76279: GO 75937
76281: POP
76282: POP
// MC_Reset ( i , 124 ) ;
76283: LD_VAR 0 2
76287: PPUSH
76288: LD_INT 124
76290: PPUSH
76291: CALL 59902 0 2
// end ; end ;
76295: GO 75692
76297: POP
76298: POP
// end ;
76299: LD_VAR 0 1
76303: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
76304: LD_INT 0
76306: PPUSH
76307: PPUSH
76308: PPUSH
// if not mc_bases then
76309: LD_EXP 45
76313: NOT
76314: IFFALSE 76318
// exit ;
76316: GO 76924
// for i = 1 to mc_bases do
76318: LD_ADDR_VAR 0 2
76322: PUSH
76323: DOUBLE
76324: LD_INT 1
76326: DEC
76327: ST_TO_ADDR
76328: LD_EXP 45
76332: PUSH
76333: FOR_TO
76334: IFFALSE 76922
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
76336: LD_ADDR_VAR 0 3
76340: PUSH
76341: LD_EXP 45
76345: PUSH
76346: LD_VAR 0 2
76350: ARRAY
76351: PPUSH
76352: LD_INT 25
76354: PUSH
76355: LD_INT 4
76357: PUSH
76358: EMPTY
76359: LIST
76360: LIST
76361: PPUSH
76362: CALL_OW 72
76366: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
76367: LD_VAR 0 3
76371: NOT
76372: PUSH
76373: LD_EXP 82
76377: PUSH
76378: LD_VAR 0 2
76382: ARRAY
76383: NOT
76384: OR
76385: PUSH
76386: LD_EXP 45
76390: PUSH
76391: LD_VAR 0 2
76395: ARRAY
76396: PPUSH
76397: LD_INT 2
76399: PUSH
76400: LD_INT 30
76402: PUSH
76403: LD_INT 0
76405: PUSH
76406: EMPTY
76407: LIST
76408: LIST
76409: PUSH
76410: LD_INT 30
76412: PUSH
76413: LD_INT 1
76415: PUSH
76416: EMPTY
76417: LIST
76418: LIST
76419: PUSH
76420: EMPTY
76421: LIST
76422: LIST
76423: LIST
76424: PPUSH
76425: CALL_OW 72
76429: NOT
76430: OR
76431: IFFALSE 76481
// begin if mc_deposits_finder [ i ] then
76433: LD_EXP 83
76437: PUSH
76438: LD_VAR 0 2
76442: ARRAY
76443: IFFALSE 76479
// begin MC_Reset ( i , 125 ) ;
76445: LD_VAR 0 2
76449: PPUSH
76450: LD_INT 125
76452: PPUSH
76453: CALL 59902 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
76457: LD_ADDR_EXP 83
76461: PUSH
76462: LD_EXP 83
76466: PPUSH
76467: LD_VAR 0 2
76471: PPUSH
76472: EMPTY
76473: PPUSH
76474: CALL_OW 1
76478: ST_TO_ADDR
// end ; continue ;
76479: GO 76333
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
76481: LD_EXP 82
76485: PUSH
76486: LD_VAR 0 2
76490: ARRAY
76491: PUSH
76492: LD_INT 1
76494: ARRAY
76495: PUSH
76496: LD_INT 3
76498: ARRAY
76499: PUSH
76500: LD_INT 1
76502: EQUAL
76503: PUSH
76504: LD_INT 20
76506: PPUSH
76507: LD_EXP 71
76511: PUSH
76512: LD_VAR 0 2
76516: ARRAY
76517: PPUSH
76518: CALL_OW 321
76522: PUSH
76523: LD_INT 2
76525: NONEQUAL
76526: AND
76527: IFFALSE 76577
// begin if mc_deposits_finder [ i ] then
76529: LD_EXP 83
76533: PUSH
76534: LD_VAR 0 2
76538: ARRAY
76539: IFFALSE 76575
// begin MC_Reset ( i , 125 ) ;
76541: LD_VAR 0 2
76545: PPUSH
76546: LD_INT 125
76548: PPUSH
76549: CALL 59902 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
76553: LD_ADDR_EXP 83
76557: PUSH
76558: LD_EXP 83
76562: PPUSH
76563: LD_VAR 0 2
76567: PPUSH
76568: EMPTY
76569: PPUSH
76570: CALL_OW 1
76574: ST_TO_ADDR
// end ; continue ;
76575: GO 76333
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
76577: LD_EXP 82
76581: PUSH
76582: LD_VAR 0 2
76586: ARRAY
76587: PUSH
76588: LD_INT 1
76590: ARRAY
76591: PUSH
76592: LD_INT 1
76594: ARRAY
76595: PPUSH
76596: LD_EXP 82
76600: PUSH
76601: LD_VAR 0 2
76605: ARRAY
76606: PUSH
76607: LD_INT 1
76609: ARRAY
76610: PUSH
76611: LD_INT 2
76613: ARRAY
76614: PPUSH
76615: LD_EXP 71
76619: PUSH
76620: LD_VAR 0 2
76624: ARRAY
76625: PPUSH
76626: CALL_OW 440
76630: IFFALSE 76673
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
76632: LD_ADDR_EXP 82
76636: PUSH
76637: LD_EXP 82
76641: PPUSH
76642: LD_VAR 0 2
76646: PPUSH
76647: LD_EXP 82
76651: PUSH
76652: LD_VAR 0 2
76656: ARRAY
76657: PPUSH
76658: LD_INT 1
76660: PPUSH
76661: CALL_OW 3
76665: PPUSH
76666: CALL_OW 1
76670: ST_TO_ADDR
76671: GO 76920
// begin if not mc_deposits_finder [ i ] then
76673: LD_EXP 83
76677: PUSH
76678: LD_VAR 0 2
76682: ARRAY
76683: NOT
76684: IFFALSE 76736
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
76686: LD_ADDR_EXP 83
76690: PUSH
76691: LD_EXP 83
76695: PPUSH
76696: LD_VAR 0 2
76700: PPUSH
76701: LD_VAR 0 3
76705: PUSH
76706: LD_INT 1
76708: ARRAY
76709: PUSH
76710: EMPTY
76711: LIST
76712: PPUSH
76713: CALL_OW 1
76717: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
76718: LD_VAR 0 3
76722: PUSH
76723: LD_INT 1
76725: ARRAY
76726: PPUSH
76727: LD_INT 125
76729: PPUSH
76730: CALL_OW 109
// end else
76734: GO 76920
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
76736: LD_EXP 83
76740: PUSH
76741: LD_VAR 0 2
76745: ARRAY
76746: PUSH
76747: LD_INT 1
76749: ARRAY
76750: PPUSH
76751: CALL_OW 310
76755: IFFALSE 76778
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
76757: LD_EXP 83
76761: PUSH
76762: LD_VAR 0 2
76766: ARRAY
76767: PUSH
76768: LD_INT 1
76770: ARRAY
76771: PPUSH
76772: CALL_OW 122
76776: GO 76920
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
76778: LD_EXP 83
76782: PUSH
76783: LD_VAR 0 2
76787: ARRAY
76788: PUSH
76789: LD_INT 1
76791: ARRAY
76792: PPUSH
76793: CALL_OW 314
76797: NOT
76798: PUSH
76799: LD_EXP 83
76803: PUSH
76804: LD_VAR 0 2
76808: ARRAY
76809: PUSH
76810: LD_INT 1
76812: ARRAY
76813: PPUSH
76814: LD_EXP 82
76818: PUSH
76819: LD_VAR 0 2
76823: ARRAY
76824: PUSH
76825: LD_INT 1
76827: ARRAY
76828: PUSH
76829: LD_INT 1
76831: ARRAY
76832: PPUSH
76833: LD_EXP 82
76837: PUSH
76838: LD_VAR 0 2
76842: ARRAY
76843: PUSH
76844: LD_INT 1
76846: ARRAY
76847: PUSH
76848: LD_INT 2
76850: ARRAY
76851: PPUSH
76852: CALL_OW 297
76856: PUSH
76857: LD_INT 6
76859: GREATER
76860: AND
76861: IFFALSE 76920
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
76863: LD_EXP 83
76867: PUSH
76868: LD_VAR 0 2
76872: ARRAY
76873: PUSH
76874: LD_INT 1
76876: ARRAY
76877: PPUSH
76878: LD_EXP 82
76882: PUSH
76883: LD_VAR 0 2
76887: ARRAY
76888: PUSH
76889: LD_INT 1
76891: ARRAY
76892: PUSH
76893: LD_INT 1
76895: ARRAY
76896: PPUSH
76897: LD_EXP 82
76901: PUSH
76902: LD_VAR 0 2
76906: ARRAY
76907: PUSH
76908: LD_INT 1
76910: ARRAY
76911: PUSH
76912: LD_INT 2
76914: ARRAY
76915: PPUSH
76916: CALL_OW 111
// end ; end ; end ;
76920: GO 76333
76922: POP
76923: POP
// end ;
76924: LD_VAR 0 1
76928: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
76929: LD_INT 0
76931: PPUSH
76932: PPUSH
76933: PPUSH
76934: PPUSH
76935: PPUSH
76936: PPUSH
76937: PPUSH
76938: PPUSH
76939: PPUSH
76940: PPUSH
76941: PPUSH
// if not mc_bases then
76942: LD_EXP 45
76946: NOT
76947: IFFALSE 76951
// exit ;
76949: GO 77891
// for i = 1 to mc_bases do
76951: LD_ADDR_VAR 0 2
76955: PUSH
76956: DOUBLE
76957: LD_INT 1
76959: DEC
76960: ST_TO_ADDR
76961: LD_EXP 45
76965: PUSH
76966: FOR_TO
76967: IFFALSE 77889
// begin if not mc_bases [ i ] or mc_scan [ i ] then
76969: LD_EXP 45
76973: PUSH
76974: LD_VAR 0 2
76978: ARRAY
76979: NOT
76980: PUSH
76981: LD_EXP 68
76985: PUSH
76986: LD_VAR 0 2
76990: ARRAY
76991: OR
76992: IFFALSE 76996
// continue ;
76994: GO 76966
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
76996: LD_ADDR_VAR 0 7
77000: PUSH
77001: LD_EXP 45
77005: PUSH
77006: LD_VAR 0 2
77010: ARRAY
77011: PUSH
77012: LD_INT 1
77014: ARRAY
77015: PPUSH
77016: CALL_OW 248
77020: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
77021: LD_VAR 0 7
77025: PUSH
77026: LD_INT 3
77028: EQUAL
77029: PUSH
77030: LD_EXP 64
77034: PUSH
77035: LD_VAR 0 2
77039: ARRAY
77040: PUSH
77041: LD_EXP 67
77045: PUSH
77046: LD_VAR 0 2
77050: ARRAY
77051: UNION
77052: PPUSH
77053: LD_INT 33
77055: PUSH
77056: LD_INT 2
77058: PUSH
77059: EMPTY
77060: LIST
77061: LIST
77062: PPUSH
77063: CALL_OW 72
77067: NOT
77068: OR
77069: IFFALSE 77073
// continue ;
77071: GO 76966
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
77073: LD_ADDR_VAR 0 9
77077: PUSH
77078: LD_EXP 45
77082: PUSH
77083: LD_VAR 0 2
77087: ARRAY
77088: PPUSH
77089: LD_INT 30
77091: PUSH
77092: LD_INT 36
77094: PUSH
77095: EMPTY
77096: LIST
77097: LIST
77098: PPUSH
77099: CALL_OW 72
77103: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
77104: LD_ADDR_VAR 0 10
77108: PUSH
77109: LD_EXP 64
77113: PUSH
77114: LD_VAR 0 2
77118: ARRAY
77119: PPUSH
77120: LD_INT 34
77122: PUSH
77123: LD_INT 31
77125: PUSH
77126: EMPTY
77127: LIST
77128: LIST
77129: PPUSH
77130: CALL_OW 72
77134: ST_TO_ADDR
// if not cts and not mcts then
77135: LD_VAR 0 9
77139: NOT
77140: PUSH
77141: LD_VAR 0 10
77145: NOT
77146: AND
77147: IFFALSE 77151
// continue ;
77149: GO 76966
// x := cts ;
77151: LD_ADDR_VAR 0 11
77155: PUSH
77156: LD_VAR 0 9
77160: ST_TO_ADDR
// if not x then
77161: LD_VAR 0 11
77165: NOT
77166: IFFALSE 77178
// x := mcts ;
77168: LD_ADDR_VAR 0 11
77172: PUSH
77173: LD_VAR 0 10
77177: ST_TO_ADDR
// if not x then
77178: LD_VAR 0 11
77182: NOT
77183: IFFALSE 77187
// continue ;
77185: GO 76966
// if mc_remote_driver [ i ] then
77187: LD_EXP 85
77191: PUSH
77192: LD_VAR 0 2
77196: ARRAY
77197: IFFALSE 77584
// for j in mc_remote_driver [ i ] do
77199: LD_ADDR_VAR 0 3
77203: PUSH
77204: LD_EXP 85
77208: PUSH
77209: LD_VAR 0 2
77213: ARRAY
77214: PUSH
77215: FOR_IN
77216: IFFALSE 77582
// begin if GetClass ( j ) <> 3 then
77218: LD_VAR 0 3
77222: PPUSH
77223: CALL_OW 257
77227: PUSH
77228: LD_INT 3
77230: NONEQUAL
77231: IFFALSE 77284
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
77233: LD_ADDR_EXP 85
77237: PUSH
77238: LD_EXP 85
77242: PPUSH
77243: LD_VAR 0 2
77247: PPUSH
77248: LD_EXP 85
77252: PUSH
77253: LD_VAR 0 2
77257: ARRAY
77258: PUSH
77259: LD_VAR 0 3
77263: DIFF
77264: PPUSH
77265: CALL_OW 1
77269: ST_TO_ADDR
// SetTag ( j , 0 ) ;
77270: LD_VAR 0 3
77274: PPUSH
77275: LD_INT 0
77277: PPUSH
77278: CALL_OW 109
// continue ;
77282: GO 77215
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
77284: LD_EXP 64
77288: PUSH
77289: LD_VAR 0 2
77293: ARRAY
77294: PPUSH
77295: LD_INT 34
77297: PUSH
77298: LD_INT 31
77300: PUSH
77301: EMPTY
77302: LIST
77303: LIST
77304: PUSH
77305: LD_INT 58
77307: PUSH
77308: EMPTY
77309: LIST
77310: PUSH
77311: EMPTY
77312: LIST
77313: LIST
77314: PPUSH
77315: CALL_OW 72
77319: PUSH
77320: LD_VAR 0 3
77324: PPUSH
77325: CALL 52943 0 1
77329: NOT
77330: AND
77331: IFFALSE 77402
// begin if IsInUnit ( j ) then
77333: LD_VAR 0 3
77337: PPUSH
77338: CALL_OW 310
77342: IFFALSE 77353
// ComExitBuilding ( j ) ;
77344: LD_VAR 0 3
77348: PPUSH
77349: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
77353: LD_VAR 0 3
77357: PPUSH
77358: LD_EXP 64
77362: PUSH
77363: LD_VAR 0 2
77367: ARRAY
77368: PPUSH
77369: LD_INT 34
77371: PUSH
77372: LD_INT 31
77374: PUSH
77375: EMPTY
77376: LIST
77377: LIST
77378: PUSH
77379: LD_INT 58
77381: PUSH
77382: EMPTY
77383: LIST
77384: PUSH
77385: EMPTY
77386: LIST
77387: LIST
77388: PPUSH
77389: CALL_OW 72
77393: PUSH
77394: LD_INT 1
77396: ARRAY
77397: PPUSH
77398: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
77402: LD_VAR 0 3
77406: PPUSH
77407: CALL_OW 310
77411: NOT
77412: PUSH
77413: LD_VAR 0 3
77417: PPUSH
77418: CALL_OW 310
77422: PPUSH
77423: CALL_OW 266
77427: PUSH
77428: LD_INT 36
77430: NONEQUAL
77431: PUSH
77432: LD_VAR 0 3
77436: PPUSH
77437: CALL 52943 0 1
77441: NOT
77442: AND
77443: OR
77444: IFFALSE 77580
// begin if IsInUnit ( j ) then
77446: LD_VAR 0 3
77450: PPUSH
77451: CALL_OW 310
77455: IFFALSE 77466
// ComExitBuilding ( j ) ;
77457: LD_VAR 0 3
77461: PPUSH
77462: CALL_OW 122
// ct := 0 ;
77466: LD_ADDR_VAR 0 8
77470: PUSH
77471: LD_INT 0
77473: ST_TO_ADDR
// for k in x do
77474: LD_ADDR_VAR 0 4
77478: PUSH
77479: LD_VAR 0 11
77483: PUSH
77484: FOR_IN
77485: IFFALSE 77558
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
77487: LD_VAR 0 4
77491: PPUSH
77492: CALL_OW 264
77496: PUSH
77497: LD_INT 31
77499: EQUAL
77500: PUSH
77501: LD_VAR 0 4
77505: PPUSH
77506: CALL_OW 311
77510: NOT
77511: AND
77512: PUSH
77513: LD_VAR 0 4
77517: PPUSH
77518: CALL_OW 266
77522: PUSH
77523: LD_INT 36
77525: EQUAL
77526: PUSH
77527: LD_VAR 0 4
77531: PPUSH
77532: CALL_OW 313
77536: PUSH
77537: LD_INT 3
77539: LESS
77540: AND
77541: OR
77542: IFFALSE 77556
// begin ct := k ;
77544: LD_ADDR_VAR 0 8
77548: PUSH
77549: LD_VAR 0 4
77553: ST_TO_ADDR
// break ;
77554: GO 77558
// end ;
77556: GO 77484
77558: POP
77559: POP
// if ct then
77560: LD_VAR 0 8
77564: IFFALSE 77580
// ComEnterUnit ( j , ct ) ;
77566: LD_VAR 0 3
77570: PPUSH
77571: LD_VAR 0 8
77575: PPUSH
77576: CALL_OW 120
// end ; end ;
77580: GO 77215
77582: POP
77583: POP
// places := 0 ;
77584: LD_ADDR_VAR 0 5
77588: PUSH
77589: LD_INT 0
77591: ST_TO_ADDR
// for j = 1 to x do
77592: LD_ADDR_VAR 0 3
77596: PUSH
77597: DOUBLE
77598: LD_INT 1
77600: DEC
77601: ST_TO_ADDR
77602: LD_VAR 0 11
77606: PUSH
77607: FOR_TO
77608: IFFALSE 77684
// if GetWeapon ( x [ j ] ) = ar_control_tower then
77610: LD_VAR 0 11
77614: PUSH
77615: LD_VAR 0 3
77619: ARRAY
77620: PPUSH
77621: CALL_OW 264
77625: PUSH
77626: LD_INT 31
77628: EQUAL
77629: IFFALSE 77647
// places := places + 1 else
77631: LD_ADDR_VAR 0 5
77635: PUSH
77636: LD_VAR 0 5
77640: PUSH
77641: LD_INT 1
77643: PLUS
77644: ST_TO_ADDR
77645: GO 77682
// if GetBType ( x [ j ] ) = b_control_tower then
77647: LD_VAR 0 11
77651: PUSH
77652: LD_VAR 0 3
77656: ARRAY
77657: PPUSH
77658: CALL_OW 266
77662: PUSH
77663: LD_INT 36
77665: EQUAL
77666: IFFALSE 77682
// places := places + 3 ;
77668: LD_ADDR_VAR 0 5
77672: PUSH
77673: LD_VAR 0 5
77677: PUSH
77678: LD_INT 3
77680: PLUS
77681: ST_TO_ADDR
77682: GO 77607
77684: POP
77685: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
77686: LD_VAR 0 5
77690: PUSH
77691: LD_INT 0
77693: EQUAL
77694: PUSH
77695: LD_VAR 0 5
77699: PUSH
77700: LD_EXP 85
77704: PUSH
77705: LD_VAR 0 2
77709: ARRAY
77710: LESSEQUAL
77711: OR
77712: IFFALSE 77716
// continue ;
77714: GO 76966
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
77716: LD_ADDR_VAR 0 6
77720: PUSH
77721: LD_EXP 45
77725: PUSH
77726: LD_VAR 0 2
77730: ARRAY
77731: PPUSH
77732: LD_INT 25
77734: PUSH
77735: LD_INT 3
77737: PUSH
77738: EMPTY
77739: LIST
77740: LIST
77741: PPUSH
77742: CALL_OW 72
77746: PUSH
77747: LD_EXP 85
77751: PUSH
77752: LD_VAR 0 2
77756: ARRAY
77757: DIFF
77758: PPUSH
77759: LD_INT 3
77761: PPUSH
77762: CALL 53843 0 2
77766: ST_TO_ADDR
// for j in tmp do
77767: LD_ADDR_VAR 0 3
77771: PUSH
77772: LD_VAR 0 6
77776: PUSH
77777: FOR_IN
77778: IFFALSE 77813
// if GetTag ( j ) > 0 then
77780: LD_VAR 0 3
77784: PPUSH
77785: CALL_OW 110
77789: PUSH
77790: LD_INT 0
77792: GREATER
77793: IFFALSE 77811
// tmp := tmp diff j ;
77795: LD_ADDR_VAR 0 6
77799: PUSH
77800: LD_VAR 0 6
77804: PUSH
77805: LD_VAR 0 3
77809: DIFF
77810: ST_TO_ADDR
77811: GO 77777
77813: POP
77814: POP
// if not tmp then
77815: LD_VAR 0 6
77819: NOT
77820: IFFALSE 77824
// continue ;
77822: GO 76966
// if places then
77824: LD_VAR 0 5
77828: IFFALSE 77887
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
77830: LD_ADDR_EXP 85
77834: PUSH
77835: LD_EXP 85
77839: PPUSH
77840: LD_VAR 0 2
77844: PPUSH
77845: LD_EXP 85
77849: PUSH
77850: LD_VAR 0 2
77854: ARRAY
77855: PUSH
77856: LD_VAR 0 6
77860: PUSH
77861: LD_INT 1
77863: ARRAY
77864: UNION
77865: PPUSH
77866: CALL_OW 1
77870: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
77871: LD_VAR 0 6
77875: PUSH
77876: LD_INT 1
77878: ARRAY
77879: PPUSH
77880: LD_INT 126
77882: PPUSH
77883: CALL_OW 109
// end ; end ;
77887: GO 76966
77889: POP
77890: POP
// end ;
77891: LD_VAR 0 1
77895: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
77896: LD_INT 0
77898: PPUSH
77899: PPUSH
77900: PPUSH
77901: PPUSH
77902: PPUSH
77903: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
77904: LD_VAR 0 1
77908: NOT
77909: PUSH
77910: LD_VAR 0 2
77914: NOT
77915: OR
77916: PUSH
77917: LD_VAR 0 3
77921: NOT
77922: OR
77923: PUSH
77924: LD_VAR 0 4
77928: PUSH
77929: LD_INT 1
77931: PUSH
77932: LD_INT 2
77934: PUSH
77935: LD_INT 3
77937: PUSH
77938: LD_INT 4
77940: PUSH
77941: LD_INT 5
77943: PUSH
77944: LD_INT 8
77946: PUSH
77947: LD_INT 9
77949: PUSH
77950: LD_INT 15
77952: PUSH
77953: LD_INT 16
77955: PUSH
77956: EMPTY
77957: LIST
77958: LIST
77959: LIST
77960: LIST
77961: LIST
77962: LIST
77963: LIST
77964: LIST
77965: LIST
77966: IN
77967: NOT
77968: OR
77969: IFFALSE 77973
// exit ;
77971: GO 78873
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
77973: LD_ADDR_VAR 0 2
77977: PUSH
77978: LD_VAR 0 2
77982: PPUSH
77983: LD_INT 21
77985: PUSH
77986: LD_INT 3
77988: PUSH
77989: EMPTY
77990: LIST
77991: LIST
77992: PUSH
77993: LD_INT 24
77995: PUSH
77996: LD_INT 250
77998: PUSH
77999: EMPTY
78000: LIST
78001: LIST
78002: PUSH
78003: EMPTY
78004: LIST
78005: LIST
78006: PPUSH
78007: CALL_OW 72
78011: ST_TO_ADDR
// case class of 1 , 15 :
78012: LD_VAR 0 4
78016: PUSH
78017: LD_INT 1
78019: DOUBLE
78020: EQUAL
78021: IFTRUE 78031
78023: LD_INT 15
78025: DOUBLE
78026: EQUAL
78027: IFTRUE 78031
78029: GO 78116
78031: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
78032: LD_ADDR_VAR 0 8
78036: PUSH
78037: LD_VAR 0 2
78041: PPUSH
78042: LD_INT 2
78044: PUSH
78045: LD_INT 30
78047: PUSH
78048: LD_INT 32
78050: PUSH
78051: EMPTY
78052: LIST
78053: LIST
78054: PUSH
78055: LD_INT 30
78057: PUSH
78058: LD_INT 31
78060: PUSH
78061: EMPTY
78062: LIST
78063: LIST
78064: PUSH
78065: EMPTY
78066: LIST
78067: LIST
78068: LIST
78069: PPUSH
78070: CALL_OW 72
78074: PUSH
78075: LD_VAR 0 2
78079: PPUSH
78080: LD_INT 2
78082: PUSH
78083: LD_INT 30
78085: PUSH
78086: LD_INT 4
78088: PUSH
78089: EMPTY
78090: LIST
78091: LIST
78092: PUSH
78093: LD_INT 30
78095: PUSH
78096: LD_INT 5
78098: PUSH
78099: EMPTY
78100: LIST
78101: LIST
78102: PUSH
78103: EMPTY
78104: LIST
78105: LIST
78106: LIST
78107: PPUSH
78108: CALL_OW 72
78112: ADD
78113: ST_TO_ADDR
78114: GO 78362
78116: LD_INT 2
78118: DOUBLE
78119: EQUAL
78120: IFTRUE 78130
78122: LD_INT 16
78124: DOUBLE
78125: EQUAL
78126: IFTRUE 78130
78128: GO 78176
78130: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
78131: LD_ADDR_VAR 0 8
78135: PUSH
78136: LD_VAR 0 2
78140: PPUSH
78141: LD_INT 2
78143: PUSH
78144: LD_INT 30
78146: PUSH
78147: LD_INT 0
78149: PUSH
78150: EMPTY
78151: LIST
78152: LIST
78153: PUSH
78154: LD_INT 30
78156: PUSH
78157: LD_INT 1
78159: PUSH
78160: EMPTY
78161: LIST
78162: LIST
78163: PUSH
78164: EMPTY
78165: LIST
78166: LIST
78167: LIST
78168: PPUSH
78169: CALL_OW 72
78173: ST_TO_ADDR
78174: GO 78362
78176: LD_INT 3
78178: DOUBLE
78179: EQUAL
78180: IFTRUE 78184
78182: GO 78230
78184: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
78185: LD_ADDR_VAR 0 8
78189: PUSH
78190: LD_VAR 0 2
78194: PPUSH
78195: LD_INT 2
78197: PUSH
78198: LD_INT 30
78200: PUSH
78201: LD_INT 2
78203: PUSH
78204: EMPTY
78205: LIST
78206: LIST
78207: PUSH
78208: LD_INT 30
78210: PUSH
78211: LD_INT 3
78213: PUSH
78214: EMPTY
78215: LIST
78216: LIST
78217: PUSH
78218: EMPTY
78219: LIST
78220: LIST
78221: LIST
78222: PPUSH
78223: CALL_OW 72
78227: ST_TO_ADDR
78228: GO 78362
78230: LD_INT 4
78232: DOUBLE
78233: EQUAL
78234: IFTRUE 78238
78236: GO 78295
78238: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
78239: LD_ADDR_VAR 0 8
78243: PUSH
78244: LD_VAR 0 2
78248: PPUSH
78249: LD_INT 2
78251: PUSH
78252: LD_INT 30
78254: PUSH
78255: LD_INT 6
78257: PUSH
78258: EMPTY
78259: LIST
78260: LIST
78261: PUSH
78262: LD_INT 30
78264: PUSH
78265: LD_INT 7
78267: PUSH
78268: EMPTY
78269: LIST
78270: LIST
78271: PUSH
78272: LD_INT 30
78274: PUSH
78275: LD_INT 8
78277: PUSH
78278: EMPTY
78279: LIST
78280: LIST
78281: PUSH
78282: EMPTY
78283: LIST
78284: LIST
78285: LIST
78286: LIST
78287: PPUSH
78288: CALL_OW 72
78292: ST_TO_ADDR
78293: GO 78362
78295: LD_INT 5
78297: DOUBLE
78298: EQUAL
78299: IFTRUE 78315
78301: LD_INT 8
78303: DOUBLE
78304: EQUAL
78305: IFTRUE 78315
78307: LD_INT 9
78309: DOUBLE
78310: EQUAL
78311: IFTRUE 78315
78313: GO 78361
78315: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
78316: LD_ADDR_VAR 0 8
78320: PUSH
78321: LD_VAR 0 2
78325: PPUSH
78326: LD_INT 2
78328: PUSH
78329: LD_INT 30
78331: PUSH
78332: LD_INT 4
78334: PUSH
78335: EMPTY
78336: LIST
78337: LIST
78338: PUSH
78339: LD_INT 30
78341: PUSH
78342: LD_INT 5
78344: PUSH
78345: EMPTY
78346: LIST
78347: LIST
78348: PUSH
78349: EMPTY
78350: LIST
78351: LIST
78352: LIST
78353: PPUSH
78354: CALL_OW 72
78358: ST_TO_ADDR
78359: GO 78362
78361: POP
// if not tmp then
78362: LD_VAR 0 8
78366: NOT
78367: IFFALSE 78371
// exit ;
78369: GO 78873
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
78371: LD_VAR 0 4
78375: PUSH
78376: LD_INT 1
78378: PUSH
78379: LD_INT 15
78381: PUSH
78382: EMPTY
78383: LIST
78384: LIST
78385: IN
78386: PUSH
78387: LD_EXP 54
78391: PUSH
78392: LD_VAR 0 1
78396: ARRAY
78397: AND
78398: IFFALSE 78554
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
78400: LD_ADDR_VAR 0 9
78404: PUSH
78405: LD_EXP 54
78409: PUSH
78410: LD_VAR 0 1
78414: ARRAY
78415: PUSH
78416: LD_INT 1
78418: ARRAY
78419: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
78420: LD_VAR 0 9
78424: PUSH
78425: LD_EXP 55
78429: PUSH
78430: LD_VAR 0 1
78434: ARRAY
78435: IN
78436: NOT
78437: IFFALSE 78552
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
78439: LD_ADDR_EXP 55
78443: PUSH
78444: LD_EXP 55
78448: PPUSH
78449: LD_VAR 0 1
78453: PUSH
78454: LD_EXP 55
78458: PUSH
78459: LD_VAR 0 1
78463: ARRAY
78464: PUSH
78465: LD_INT 1
78467: PLUS
78468: PUSH
78469: EMPTY
78470: LIST
78471: LIST
78472: PPUSH
78473: LD_VAR 0 9
78477: PPUSH
78478: CALL 24294 0 3
78482: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
78483: LD_ADDR_EXP 54
78487: PUSH
78488: LD_EXP 54
78492: PPUSH
78493: LD_VAR 0 1
78497: PPUSH
78498: LD_EXP 54
78502: PUSH
78503: LD_VAR 0 1
78507: ARRAY
78508: PUSH
78509: LD_VAR 0 9
78513: DIFF
78514: PPUSH
78515: CALL_OW 1
78519: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
78520: LD_VAR 0 3
78524: PPUSH
78525: LD_EXP 55
78529: PUSH
78530: LD_VAR 0 1
78534: ARRAY
78535: PUSH
78536: LD_EXP 55
78540: PUSH
78541: LD_VAR 0 1
78545: ARRAY
78546: ARRAY
78547: PPUSH
78548: CALL_OW 120
// end ; exit ;
78552: GO 78873
// end ; if tmp > 1 then
78554: LD_VAR 0 8
78558: PUSH
78559: LD_INT 1
78561: GREATER
78562: IFFALSE 78666
// for i = 2 to tmp do
78564: LD_ADDR_VAR 0 6
78568: PUSH
78569: DOUBLE
78570: LD_INT 2
78572: DEC
78573: ST_TO_ADDR
78574: LD_VAR 0 8
78578: PUSH
78579: FOR_TO
78580: IFFALSE 78664
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
78582: LD_VAR 0 8
78586: PUSH
78587: LD_VAR 0 6
78591: ARRAY
78592: PPUSH
78593: CALL_OW 461
78597: PUSH
78598: LD_INT 6
78600: EQUAL
78601: IFFALSE 78662
// begin x := tmp [ i ] ;
78603: LD_ADDR_VAR 0 9
78607: PUSH
78608: LD_VAR 0 8
78612: PUSH
78613: LD_VAR 0 6
78617: ARRAY
78618: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
78619: LD_ADDR_VAR 0 8
78623: PUSH
78624: LD_VAR 0 8
78628: PPUSH
78629: LD_VAR 0 6
78633: PPUSH
78634: CALL_OW 3
78638: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
78639: LD_ADDR_VAR 0 8
78643: PUSH
78644: LD_VAR 0 8
78648: PPUSH
78649: LD_INT 1
78651: PPUSH
78652: LD_VAR 0 9
78656: PPUSH
78657: CALL_OW 2
78661: ST_TO_ADDR
// end ;
78662: GO 78579
78664: POP
78665: POP
// for i in tmp do
78666: LD_ADDR_VAR 0 6
78670: PUSH
78671: LD_VAR 0 8
78675: PUSH
78676: FOR_IN
78677: IFFALSE 78746
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
78679: LD_VAR 0 6
78683: PPUSH
78684: CALL_OW 313
78688: PUSH
78689: LD_INT 6
78691: LESS
78692: PUSH
78693: LD_VAR 0 6
78697: PPUSH
78698: CALL_OW 266
78702: PUSH
78703: LD_INT 31
78705: PUSH
78706: LD_INT 32
78708: PUSH
78709: EMPTY
78710: LIST
78711: LIST
78712: IN
78713: NOT
78714: AND
78715: PUSH
78716: LD_VAR 0 6
78720: PPUSH
78721: CALL_OW 313
78725: PUSH
78726: LD_INT 0
78728: EQUAL
78729: OR
78730: IFFALSE 78744
// begin j := i ;
78732: LD_ADDR_VAR 0 7
78736: PUSH
78737: LD_VAR 0 6
78741: ST_TO_ADDR
// break ;
78742: GO 78746
// end ; end ;
78744: GO 78676
78746: POP
78747: POP
// if j then
78748: LD_VAR 0 7
78752: IFFALSE 78770
// ComEnterUnit ( unit , j ) else
78754: LD_VAR 0 3
78758: PPUSH
78759: LD_VAR 0 7
78763: PPUSH
78764: CALL_OW 120
78768: GO 78873
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
78770: LD_ADDR_VAR 0 10
78774: PUSH
78775: LD_VAR 0 2
78779: PPUSH
78780: LD_INT 2
78782: PUSH
78783: LD_INT 30
78785: PUSH
78786: LD_INT 0
78788: PUSH
78789: EMPTY
78790: LIST
78791: LIST
78792: PUSH
78793: LD_INT 30
78795: PUSH
78796: LD_INT 1
78798: PUSH
78799: EMPTY
78800: LIST
78801: LIST
78802: PUSH
78803: EMPTY
78804: LIST
78805: LIST
78806: LIST
78807: PPUSH
78808: CALL_OW 72
78812: ST_TO_ADDR
// if depot then
78813: LD_VAR 0 10
78817: IFFALSE 78873
// begin depot := NearestUnitToUnit ( depot , unit ) ;
78819: LD_ADDR_VAR 0 10
78823: PUSH
78824: LD_VAR 0 10
78828: PPUSH
78829: LD_VAR 0 3
78833: PPUSH
78834: CALL_OW 74
78838: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
78839: LD_VAR 0 3
78843: PPUSH
78844: LD_VAR 0 10
78848: PPUSH
78849: CALL_OW 296
78853: PUSH
78854: LD_INT 10
78856: GREATER
78857: IFFALSE 78873
// ComStandNearbyBuilding ( unit , depot ) ;
78859: LD_VAR 0 3
78863: PPUSH
78864: LD_VAR 0 10
78868: PPUSH
78869: CALL 20908 0 2
// end ; end ; end ;
78873: LD_VAR 0 5
78877: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
78878: LD_INT 0
78880: PPUSH
78881: PPUSH
78882: PPUSH
78883: PPUSH
// if not mc_bases then
78884: LD_EXP 45
78888: NOT
78889: IFFALSE 78893
// exit ;
78891: GO 79132
// for i = 1 to mc_bases do
78893: LD_ADDR_VAR 0 2
78897: PUSH
78898: DOUBLE
78899: LD_INT 1
78901: DEC
78902: ST_TO_ADDR
78903: LD_EXP 45
78907: PUSH
78908: FOR_TO
78909: IFFALSE 79130
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
78911: LD_ADDR_VAR 0 4
78915: PUSH
78916: LD_EXP 45
78920: PUSH
78921: LD_VAR 0 2
78925: ARRAY
78926: PPUSH
78927: LD_INT 21
78929: PUSH
78930: LD_INT 1
78932: PUSH
78933: EMPTY
78934: LIST
78935: LIST
78936: PPUSH
78937: CALL_OW 72
78941: PUSH
78942: LD_EXP 74
78946: PUSH
78947: LD_VAR 0 2
78951: ARRAY
78952: UNION
78953: ST_TO_ADDR
// if not tmp then
78954: LD_VAR 0 4
78958: NOT
78959: IFFALSE 78963
// continue ;
78961: GO 78908
// for j in tmp do
78963: LD_ADDR_VAR 0 3
78967: PUSH
78968: LD_VAR 0 4
78972: PUSH
78973: FOR_IN
78974: IFFALSE 79126
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
78976: LD_VAR 0 3
78980: PPUSH
78981: CALL_OW 110
78985: NOT
78986: PUSH
78987: LD_VAR 0 3
78991: PPUSH
78992: CALL_OW 314
78996: NOT
78997: AND
78998: PUSH
78999: LD_VAR 0 3
79003: PPUSH
79004: CALL_OW 311
79008: NOT
79009: AND
79010: PUSH
79011: LD_VAR 0 3
79015: PPUSH
79016: CALL_OW 310
79020: NOT
79021: AND
79022: PUSH
79023: LD_VAR 0 3
79027: PUSH
79028: LD_EXP 48
79032: PUSH
79033: LD_VAR 0 2
79037: ARRAY
79038: PUSH
79039: LD_INT 1
79041: ARRAY
79042: IN
79043: NOT
79044: AND
79045: PUSH
79046: LD_VAR 0 3
79050: PUSH
79051: LD_EXP 48
79055: PUSH
79056: LD_VAR 0 2
79060: ARRAY
79061: PUSH
79062: LD_INT 2
79064: ARRAY
79065: IN
79066: NOT
79067: AND
79068: PUSH
79069: LD_VAR 0 3
79073: PUSH
79074: LD_EXP 57
79078: PUSH
79079: LD_VAR 0 2
79083: ARRAY
79084: IN
79085: NOT
79086: AND
79087: IFFALSE 79124
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
79089: LD_VAR 0 2
79093: PPUSH
79094: LD_EXP 45
79098: PUSH
79099: LD_VAR 0 2
79103: ARRAY
79104: PPUSH
79105: LD_VAR 0 3
79109: PPUSH
79110: LD_VAR 0 3
79114: PPUSH
79115: CALL_OW 257
79119: PPUSH
79120: CALL 77896 0 4
// end ;
79124: GO 78973
79126: POP
79127: POP
// end ;
79128: GO 78908
79130: POP
79131: POP
// end ;
79132: LD_VAR 0 1
79136: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
79137: LD_INT 0
79139: PPUSH
79140: PPUSH
79141: PPUSH
79142: PPUSH
79143: PPUSH
79144: PPUSH
// if not mc_bases [ base ] then
79145: LD_EXP 45
79149: PUSH
79150: LD_VAR 0 1
79154: ARRAY
79155: NOT
79156: IFFALSE 79160
// exit ;
79158: GO 79342
// tmp := [ ] ;
79160: LD_ADDR_VAR 0 6
79164: PUSH
79165: EMPTY
79166: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
79167: LD_ADDR_VAR 0 7
79171: PUSH
79172: LD_VAR 0 3
79176: PPUSH
79177: LD_INT 0
79179: PPUSH
79180: CALL_OW 517
79184: ST_TO_ADDR
// if not list then
79185: LD_VAR 0 7
79189: NOT
79190: IFFALSE 79194
// exit ;
79192: GO 79342
// for i = 1 to amount do
79194: LD_ADDR_VAR 0 5
79198: PUSH
79199: DOUBLE
79200: LD_INT 1
79202: DEC
79203: ST_TO_ADDR
79204: LD_VAR 0 2
79208: PUSH
79209: FOR_TO
79210: IFFALSE 79290
// begin x := rand ( 1 , list [ 1 ] ) ;
79212: LD_ADDR_VAR 0 8
79216: PUSH
79217: LD_INT 1
79219: PPUSH
79220: LD_VAR 0 7
79224: PUSH
79225: LD_INT 1
79227: ARRAY
79228: PPUSH
79229: CALL_OW 12
79233: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
79234: LD_ADDR_VAR 0 6
79238: PUSH
79239: LD_VAR 0 6
79243: PPUSH
79244: LD_VAR 0 5
79248: PPUSH
79249: LD_VAR 0 7
79253: PUSH
79254: LD_INT 1
79256: ARRAY
79257: PUSH
79258: LD_VAR 0 8
79262: ARRAY
79263: PUSH
79264: LD_VAR 0 7
79268: PUSH
79269: LD_INT 2
79271: ARRAY
79272: PUSH
79273: LD_VAR 0 8
79277: ARRAY
79278: PUSH
79279: EMPTY
79280: LIST
79281: LIST
79282: PPUSH
79283: CALL_OW 1
79287: ST_TO_ADDR
// end ;
79288: GO 79209
79290: POP
79291: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
79292: LD_ADDR_EXP 58
79296: PUSH
79297: LD_EXP 58
79301: PPUSH
79302: LD_VAR 0 1
79306: PPUSH
79307: LD_VAR 0 6
79311: PPUSH
79312: CALL_OW 1
79316: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
79317: LD_ADDR_EXP 60
79321: PUSH
79322: LD_EXP 60
79326: PPUSH
79327: LD_VAR 0 1
79331: PPUSH
79332: LD_VAR 0 3
79336: PPUSH
79337: CALL_OW 1
79341: ST_TO_ADDR
// end ;
79342: LD_VAR 0 4
79346: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
79347: LD_INT 0
79349: PPUSH
// if not mc_bases [ base ] then
79350: LD_EXP 45
79354: PUSH
79355: LD_VAR 0 1
79359: ARRAY
79360: NOT
79361: IFFALSE 79365
// exit ;
79363: GO 79390
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
79365: LD_ADDR_EXP 50
79369: PUSH
79370: LD_EXP 50
79374: PPUSH
79375: LD_VAR 0 1
79379: PPUSH
79380: LD_VAR 0 2
79384: PPUSH
79385: CALL_OW 1
79389: ST_TO_ADDR
// end ;
79390: LD_VAR 0 3
79394: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
79395: LD_INT 0
79397: PPUSH
// if not mc_bases [ base ] then
79398: LD_EXP 45
79402: PUSH
79403: LD_VAR 0 1
79407: ARRAY
79408: NOT
79409: IFFALSE 79413
// exit ;
79411: GO 79450
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
79413: LD_ADDR_EXP 50
79417: PUSH
79418: LD_EXP 50
79422: PPUSH
79423: LD_VAR 0 1
79427: PPUSH
79428: LD_EXP 50
79432: PUSH
79433: LD_VAR 0 1
79437: ARRAY
79438: PUSH
79439: LD_VAR 0 2
79443: UNION
79444: PPUSH
79445: CALL_OW 1
79449: ST_TO_ADDR
// end ;
79450: LD_VAR 0 3
79454: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
79455: LD_INT 0
79457: PPUSH
// if not mc_bases [ base ] then
79458: LD_EXP 45
79462: PUSH
79463: LD_VAR 0 1
79467: ARRAY
79468: NOT
79469: IFFALSE 79473
// exit ;
79471: GO 79498
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
79473: LD_ADDR_EXP 66
79477: PUSH
79478: LD_EXP 66
79482: PPUSH
79483: LD_VAR 0 1
79487: PPUSH
79488: LD_VAR 0 2
79492: PPUSH
79493: CALL_OW 1
79497: ST_TO_ADDR
// end ;
79498: LD_VAR 0 3
79502: RET
// export function MC_InsertProduceList ( base , components ) ; begin
79503: LD_INT 0
79505: PPUSH
// if not mc_bases [ base ] then
79506: LD_EXP 45
79510: PUSH
79511: LD_VAR 0 1
79515: ARRAY
79516: NOT
79517: IFFALSE 79521
// exit ;
79519: GO 79558
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
79521: LD_ADDR_EXP 66
79525: PUSH
79526: LD_EXP 66
79530: PPUSH
79531: LD_VAR 0 1
79535: PPUSH
79536: LD_EXP 66
79540: PUSH
79541: LD_VAR 0 1
79545: ARRAY
79546: PUSH
79547: LD_VAR 0 2
79551: ADD
79552: PPUSH
79553: CALL_OW 1
79557: ST_TO_ADDR
// end ;
79558: LD_VAR 0 3
79562: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
79563: LD_INT 0
79565: PPUSH
// if not mc_bases [ base ] then
79566: LD_EXP 45
79570: PUSH
79571: LD_VAR 0 1
79575: ARRAY
79576: NOT
79577: IFFALSE 79581
// exit ;
79579: GO 79635
// mc_defender := Replace ( mc_defender , base , deflist ) ;
79581: LD_ADDR_EXP 67
79585: PUSH
79586: LD_EXP 67
79590: PPUSH
79591: LD_VAR 0 1
79595: PPUSH
79596: LD_VAR 0 2
79600: PPUSH
79601: CALL_OW 1
79605: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
79606: LD_ADDR_EXP 56
79610: PUSH
79611: LD_EXP 56
79615: PPUSH
79616: LD_VAR 0 1
79620: PPUSH
79621: LD_VAR 0 2
79625: PUSH
79626: LD_INT 0
79628: PLUS
79629: PPUSH
79630: CALL_OW 1
79634: ST_TO_ADDR
// end ;
79635: LD_VAR 0 3
79639: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
79640: LD_INT 0
79642: PPUSH
// if not mc_bases [ base ] then
79643: LD_EXP 45
79647: PUSH
79648: LD_VAR 0 1
79652: ARRAY
79653: NOT
79654: IFFALSE 79658
// exit ;
79656: GO 79683
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
79658: LD_ADDR_EXP 56
79662: PUSH
79663: LD_EXP 56
79667: PPUSH
79668: LD_VAR 0 1
79672: PPUSH
79673: LD_VAR 0 2
79677: PPUSH
79678: CALL_OW 1
79682: ST_TO_ADDR
// end ;
79683: LD_VAR 0 3
79687: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
79688: LD_INT 0
79690: PPUSH
79691: PPUSH
79692: PPUSH
79693: PPUSH
// if not mc_bases [ base ] then
79694: LD_EXP 45
79698: PUSH
79699: LD_VAR 0 1
79703: ARRAY
79704: NOT
79705: IFFALSE 79709
// exit ;
79707: GO 79774
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
79709: LD_ADDR_EXP 65
79713: PUSH
79714: LD_EXP 65
79718: PPUSH
79719: LD_VAR 0 1
79723: PUSH
79724: LD_EXP 65
79728: PUSH
79729: LD_VAR 0 1
79733: ARRAY
79734: PUSH
79735: LD_INT 1
79737: PLUS
79738: PUSH
79739: EMPTY
79740: LIST
79741: LIST
79742: PPUSH
79743: LD_VAR 0 1
79747: PUSH
79748: LD_VAR 0 2
79752: PUSH
79753: LD_VAR 0 3
79757: PUSH
79758: LD_VAR 0 4
79762: PUSH
79763: EMPTY
79764: LIST
79765: LIST
79766: LIST
79767: LIST
79768: PPUSH
79769: CALL 24294 0 3
79773: ST_TO_ADDR
// end ;
79774: LD_VAR 0 5
79778: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
79779: LD_INT 0
79781: PPUSH
// if not mc_bases [ base ] then
79782: LD_EXP 45
79786: PUSH
79787: LD_VAR 0 1
79791: ARRAY
79792: NOT
79793: IFFALSE 79797
// exit ;
79795: GO 79822
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
79797: LD_ADDR_EXP 82
79801: PUSH
79802: LD_EXP 82
79806: PPUSH
79807: LD_VAR 0 1
79811: PPUSH
79812: LD_VAR 0 2
79816: PPUSH
79817: CALL_OW 1
79821: ST_TO_ADDR
// end ;
79822: LD_VAR 0 3
79826: RET
// export function MC_GetMinesField ( base ) ; begin
79827: LD_INT 0
79829: PPUSH
// result := mc_mines [ base ] ;
79830: LD_ADDR_VAR 0 2
79834: PUSH
79835: LD_EXP 58
79839: PUSH
79840: LD_VAR 0 1
79844: ARRAY
79845: ST_TO_ADDR
// end ;
79846: LD_VAR 0 2
79850: RET
// export function MC_GetProduceList ( base ) ; begin
79851: LD_INT 0
79853: PPUSH
// result := mc_produce [ base ] ;
79854: LD_ADDR_VAR 0 2
79858: PUSH
79859: LD_EXP 66
79863: PUSH
79864: LD_VAR 0 1
79868: ARRAY
79869: ST_TO_ADDR
// end ;
79870: LD_VAR 0 2
79874: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
79875: LD_INT 0
79877: PPUSH
79878: PPUSH
// if not mc_bases then
79879: LD_EXP 45
79883: NOT
79884: IFFALSE 79888
// exit ;
79886: GO 79953
// if mc_bases [ base ] then
79888: LD_EXP 45
79892: PUSH
79893: LD_VAR 0 1
79897: ARRAY
79898: IFFALSE 79953
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
79900: LD_ADDR_VAR 0 3
79904: PUSH
79905: LD_EXP 45
79909: PUSH
79910: LD_VAR 0 1
79914: ARRAY
79915: PPUSH
79916: LD_INT 30
79918: PUSH
79919: LD_VAR 0 2
79923: PUSH
79924: EMPTY
79925: LIST
79926: LIST
79927: PPUSH
79928: CALL_OW 72
79932: ST_TO_ADDR
// if result then
79933: LD_VAR 0 3
79937: IFFALSE 79953
// result := result [ 1 ] ;
79939: LD_ADDR_VAR 0 3
79943: PUSH
79944: LD_VAR 0 3
79948: PUSH
79949: LD_INT 1
79951: ARRAY
79952: ST_TO_ADDR
// end ; end ;
79953: LD_VAR 0 3
79957: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
79958: LD_INT 0
79960: PPUSH
79961: PPUSH
// if not mc_bases then
79962: LD_EXP 45
79966: NOT
79967: IFFALSE 79971
// exit ;
79969: GO 80016
// if mc_bases [ base ] then
79971: LD_EXP 45
79975: PUSH
79976: LD_VAR 0 1
79980: ARRAY
79981: IFFALSE 80016
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
79983: LD_ADDR_VAR 0 3
79987: PUSH
79988: LD_EXP 45
79992: PUSH
79993: LD_VAR 0 1
79997: ARRAY
79998: PPUSH
79999: LD_INT 30
80001: PUSH
80002: LD_VAR 0 2
80006: PUSH
80007: EMPTY
80008: LIST
80009: LIST
80010: PPUSH
80011: CALL_OW 72
80015: ST_TO_ADDR
// end ;
80016: LD_VAR 0 3
80020: RET
// export function MC_SetTame ( base , area ) ; begin
80021: LD_INT 0
80023: PPUSH
// if not mc_bases or not base then
80024: LD_EXP 45
80028: NOT
80029: PUSH
80030: LD_VAR 0 1
80034: NOT
80035: OR
80036: IFFALSE 80040
// exit ;
80038: GO 80065
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
80040: LD_ADDR_EXP 73
80044: PUSH
80045: LD_EXP 73
80049: PPUSH
80050: LD_VAR 0 1
80054: PPUSH
80055: LD_VAR 0 2
80059: PPUSH
80060: CALL_OW 1
80064: ST_TO_ADDR
// end ;
80065: LD_VAR 0 3
80069: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
80070: LD_INT 0
80072: PPUSH
80073: PPUSH
// if not mc_bases or not base then
80074: LD_EXP 45
80078: NOT
80079: PUSH
80080: LD_VAR 0 1
80084: NOT
80085: OR
80086: IFFALSE 80090
// exit ;
80088: GO 80192
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
80090: LD_ADDR_VAR 0 4
80094: PUSH
80095: LD_EXP 45
80099: PUSH
80100: LD_VAR 0 1
80104: ARRAY
80105: PPUSH
80106: LD_INT 30
80108: PUSH
80109: LD_VAR 0 2
80113: PUSH
80114: EMPTY
80115: LIST
80116: LIST
80117: PPUSH
80118: CALL_OW 72
80122: ST_TO_ADDR
// if not tmp then
80123: LD_VAR 0 4
80127: NOT
80128: IFFALSE 80132
// exit ;
80130: GO 80192
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
80132: LD_ADDR_EXP 77
80136: PUSH
80137: LD_EXP 77
80141: PPUSH
80142: LD_VAR 0 1
80146: PPUSH
80147: LD_EXP 77
80151: PUSH
80152: LD_VAR 0 1
80156: ARRAY
80157: PPUSH
80158: LD_EXP 77
80162: PUSH
80163: LD_VAR 0 1
80167: ARRAY
80168: PUSH
80169: LD_INT 1
80171: PLUS
80172: PPUSH
80173: LD_VAR 0 4
80177: PUSH
80178: LD_INT 1
80180: ARRAY
80181: PPUSH
80182: CALL_OW 2
80186: PPUSH
80187: CALL_OW 1
80191: ST_TO_ADDR
// end ;
80192: LD_VAR 0 3
80196: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
80197: LD_INT 0
80199: PPUSH
80200: PPUSH
// if not mc_bases or not base or not kinds then
80201: LD_EXP 45
80205: NOT
80206: PUSH
80207: LD_VAR 0 1
80211: NOT
80212: OR
80213: PUSH
80214: LD_VAR 0 2
80218: NOT
80219: OR
80220: IFFALSE 80224
// exit ;
80222: GO 80285
// for i in kinds do
80224: LD_ADDR_VAR 0 4
80228: PUSH
80229: LD_VAR 0 2
80233: PUSH
80234: FOR_IN
80235: IFFALSE 80283
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
80237: LD_ADDR_EXP 79
80241: PUSH
80242: LD_EXP 79
80246: PPUSH
80247: LD_VAR 0 1
80251: PUSH
80252: LD_EXP 79
80256: PUSH
80257: LD_VAR 0 1
80261: ARRAY
80262: PUSH
80263: LD_INT 1
80265: PLUS
80266: PUSH
80267: EMPTY
80268: LIST
80269: LIST
80270: PPUSH
80271: LD_VAR 0 4
80275: PPUSH
80276: CALL 24294 0 3
80280: ST_TO_ADDR
80281: GO 80234
80283: POP
80284: POP
// end ;
80285: LD_VAR 0 3
80289: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
80290: LD_INT 0
80292: PPUSH
// if not mc_bases or not base or not areas then
80293: LD_EXP 45
80297: NOT
80298: PUSH
80299: LD_VAR 0 1
80303: NOT
80304: OR
80305: PUSH
80306: LD_VAR 0 2
80310: NOT
80311: OR
80312: IFFALSE 80316
// exit ;
80314: GO 80341
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
80316: LD_ADDR_EXP 63
80320: PUSH
80321: LD_EXP 63
80325: PPUSH
80326: LD_VAR 0 1
80330: PPUSH
80331: LD_VAR 0 2
80335: PPUSH
80336: CALL_OW 1
80340: ST_TO_ADDR
// end ;
80341: LD_VAR 0 3
80345: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
80346: LD_INT 0
80348: PPUSH
// if not mc_bases or not base or not teleports_exit then
80349: LD_EXP 45
80353: NOT
80354: PUSH
80355: LD_VAR 0 1
80359: NOT
80360: OR
80361: PUSH
80362: LD_VAR 0 2
80366: NOT
80367: OR
80368: IFFALSE 80372
// exit ;
80370: GO 80397
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
80372: LD_ADDR_EXP 80
80376: PUSH
80377: LD_EXP 80
80381: PPUSH
80382: LD_VAR 0 1
80386: PPUSH
80387: LD_VAR 0 2
80391: PPUSH
80392: CALL_OW 1
80396: ST_TO_ADDR
// end ;
80397: LD_VAR 0 3
80401: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
80402: LD_INT 0
80404: PPUSH
80405: PPUSH
80406: PPUSH
// if not mc_bases or not base or not ext_list then
80407: LD_EXP 45
80411: NOT
80412: PUSH
80413: LD_VAR 0 1
80417: NOT
80418: OR
80419: PUSH
80420: LD_VAR 0 5
80424: NOT
80425: OR
80426: IFFALSE 80430
// exit ;
80428: GO 80603
// tmp := GetFacExtXYD ( x , y , d ) ;
80430: LD_ADDR_VAR 0 8
80434: PUSH
80435: LD_VAR 0 2
80439: PPUSH
80440: LD_VAR 0 3
80444: PPUSH
80445: LD_VAR 0 4
80449: PPUSH
80450: CALL 52973 0 3
80454: ST_TO_ADDR
// if not tmp then
80455: LD_VAR 0 8
80459: NOT
80460: IFFALSE 80464
// exit ;
80462: GO 80603
// for i in tmp do
80464: LD_ADDR_VAR 0 7
80468: PUSH
80469: LD_VAR 0 8
80473: PUSH
80474: FOR_IN
80475: IFFALSE 80601
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
80477: LD_ADDR_EXP 50
80481: PUSH
80482: LD_EXP 50
80486: PPUSH
80487: LD_VAR 0 1
80491: PPUSH
80492: LD_EXP 50
80496: PUSH
80497: LD_VAR 0 1
80501: ARRAY
80502: PPUSH
80503: LD_EXP 50
80507: PUSH
80508: LD_VAR 0 1
80512: ARRAY
80513: PUSH
80514: LD_INT 1
80516: PLUS
80517: PPUSH
80518: LD_VAR 0 5
80522: PUSH
80523: LD_INT 1
80525: ARRAY
80526: PUSH
80527: LD_VAR 0 7
80531: PUSH
80532: LD_INT 1
80534: ARRAY
80535: PUSH
80536: LD_VAR 0 7
80540: PUSH
80541: LD_INT 2
80543: ARRAY
80544: PUSH
80545: LD_VAR 0 7
80549: PUSH
80550: LD_INT 3
80552: ARRAY
80553: PUSH
80554: EMPTY
80555: LIST
80556: LIST
80557: LIST
80558: LIST
80559: PPUSH
80560: CALL_OW 2
80564: PPUSH
80565: CALL_OW 1
80569: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
80570: LD_ADDR_VAR 0 5
80574: PUSH
80575: LD_VAR 0 5
80579: PPUSH
80580: LD_INT 1
80582: PPUSH
80583: CALL_OW 3
80587: ST_TO_ADDR
// if not ext_list then
80588: LD_VAR 0 5
80592: NOT
80593: IFFALSE 80599
// exit ;
80595: POP
80596: POP
80597: GO 80603
// end ;
80599: GO 80474
80601: POP
80602: POP
// end ;
80603: LD_VAR 0 6
80607: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
80608: LD_INT 0
80610: PPUSH
// if not mc_bases or not base or not weapon_list then
80611: LD_EXP 45
80615: NOT
80616: PUSH
80617: LD_VAR 0 1
80621: NOT
80622: OR
80623: PUSH
80624: LD_VAR 0 2
80628: NOT
80629: OR
80630: IFFALSE 80634
// exit ;
80632: GO 80659
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
80634: LD_ADDR_EXP 84
80638: PUSH
80639: LD_EXP 84
80643: PPUSH
80644: LD_VAR 0 1
80648: PPUSH
80649: LD_VAR 0 2
80653: PPUSH
80654: CALL_OW 1
80658: ST_TO_ADDR
// end ;
80659: LD_VAR 0 3
80663: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
80664: LD_INT 0
80666: PPUSH
// if not mc_bases or not base or not tech_list then
80667: LD_EXP 45
80671: NOT
80672: PUSH
80673: LD_VAR 0 1
80677: NOT
80678: OR
80679: PUSH
80680: LD_VAR 0 2
80684: NOT
80685: OR
80686: IFFALSE 80690
// exit ;
80688: GO 80715
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
80690: LD_ADDR_EXP 72
80694: PUSH
80695: LD_EXP 72
80699: PPUSH
80700: LD_VAR 0 1
80704: PPUSH
80705: LD_VAR 0 2
80709: PPUSH
80710: CALL_OW 1
80714: ST_TO_ADDR
// end ;
80715: LD_VAR 0 3
80719: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
80720: LD_INT 0
80722: PPUSH
// if not mc_bases or not parking_area or not base then
80723: LD_EXP 45
80727: NOT
80728: PUSH
80729: LD_VAR 0 2
80733: NOT
80734: OR
80735: PUSH
80736: LD_VAR 0 1
80740: NOT
80741: OR
80742: IFFALSE 80746
// exit ;
80744: GO 80771
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
80746: LD_ADDR_EXP 69
80750: PUSH
80751: LD_EXP 69
80755: PPUSH
80756: LD_VAR 0 1
80760: PPUSH
80761: LD_VAR 0 2
80765: PPUSH
80766: CALL_OW 1
80770: ST_TO_ADDR
// end ;
80771: LD_VAR 0 3
80775: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
80776: LD_INT 0
80778: PPUSH
// if not mc_bases or not base or not scan_area then
80779: LD_EXP 45
80783: NOT
80784: PUSH
80785: LD_VAR 0 1
80789: NOT
80790: OR
80791: PUSH
80792: LD_VAR 0 2
80796: NOT
80797: OR
80798: IFFALSE 80802
// exit ;
80800: GO 80827
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
80802: LD_ADDR_EXP 70
80806: PUSH
80807: LD_EXP 70
80811: PPUSH
80812: LD_VAR 0 1
80816: PPUSH
80817: LD_VAR 0 2
80821: PPUSH
80822: CALL_OW 1
80826: ST_TO_ADDR
// end ;
80827: LD_VAR 0 3
80831: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
80832: LD_INT 0
80834: PPUSH
80835: PPUSH
// if not mc_bases or not base then
80836: LD_EXP 45
80840: NOT
80841: PUSH
80842: LD_VAR 0 1
80846: NOT
80847: OR
80848: IFFALSE 80852
// exit ;
80850: GO 80916
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
80852: LD_ADDR_VAR 0 3
80856: PUSH
80857: LD_INT 1
80859: PUSH
80860: LD_INT 2
80862: PUSH
80863: LD_INT 3
80865: PUSH
80866: LD_INT 4
80868: PUSH
80869: LD_INT 11
80871: PUSH
80872: EMPTY
80873: LIST
80874: LIST
80875: LIST
80876: LIST
80877: LIST
80878: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
80879: LD_ADDR_EXP 72
80883: PUSH
80884: LD_EXP 72
80888: PPUSH
80889: LD_VAR 0 1
80893: PPUSH
80894: LD_EXP 72
80898: PUSH
80899: LD_VAR 0 1
80903: ARRAY
80904: PUSH
80905: LD_VAR 0 3
80909: DIFF
80910: PPUSH
80911: CALL_OW 1
80915: ST_TO_ADDR
// end ;
80916: LD_VAR 0 2
80920: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
80921: LD_INT 0
80923: PPUSH
// result := mc_vehicles [ base ] ;
80924: LD_ADDR_VAR 0 3
80928: PUSH
80929: LD_EXP 64
80933: PUSH
80934: LD_VAR 0 1
80938: ARRAY
80939: ST_TO_ADDR
// if onlyCombat then
80940: LD_VAR 0 2
80944: IFFALSE 81109
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
80946: LD_ADDR_VAR 0 3
80950: PUSH
80951: LD_VAR 0 3
80955: PUSH
80956: LD_VAR 0 3
80960: PPUSH
80961: LD_INT 2
80963: PUSH
80964: LD_INT 34
80966: PUSH
80967: LD_INT 12
80969: PUSH
80970: EMPTY
80971: LIST
80972: LIST
80973: PUSH
80974: LD_INT 34
80976: PUSH
80977: LD_INT 51
80979: PUSH
80980: EMPTY
80981: LIST
80982: LIST
80983: PUSH
80984: LD_INT 34
80986: PUSH
80987: LD_EXP 30
80991: PUSH
80992: EMPTY
80993: LIST
80994: LIST
80995: PUSH
80996: LD_INT 34
80998: PUSH
80999: LD_INT 32
81001: PUSH
81002: EMPTY
81003: LIST
81004: LIST
81005: PUSH
81006: LD_INT 34
81008: PUSH
81009: LD_INT 13
81011: PUSH
81012: EMPTY
81013: LIST
81014: LIST
81015: PUSH
81016: LD_INT 34
81018: PUSH
81019: LD_INT 52
81021: PUSH
81022: EMPTY
81023: LIST
81024: LIST
81025: PUSH
81026: LD_INT 34
81028: PUSH
81029: LD_INT 14
81031: PUSH
81032: EMPTY
81033: LIST
81034: LIST
81035: PUSH
81036: LD_INT 34
81038: PUSH
81039: LD_INT 53
81041: PUSH
81042: EMPTY
81043: LIST
81044: LIST
81045: PUSH
81046: LD_INT 34
81048: PUSH
81049: LD_EXP 29
81053: PUSH
81054: EMPTY
81055: LIST
81056: LIST
81057: PUSH
81058: LD_INT 34
81060: PUSH
81061: LD_INT 31
81063: PUSH
81064: EMPTY
81065: LIST
81066: LIST
81067: PUSH
81068: LD_INT 34
81070: PUSH
81071: LD_INT 48
81073: PUSH
81074: EMPTY
81075: LIST
81076: LIST
81077: PUSH
81078: LD_INT 34
81080: PUSH
81081: LD_INT 8
81083: PUSH
81084: EMPTY
81085: LIST
81086: LIST
81087: PUSH
81088: EMPTY
81089: LIST
81090: LIST
81091: LIST
81092: LIST
81093: LIST
81094: LIST
81095: LIST
81096: LIST
81097: LIST
81098: LIST
81099: LIST
81100: LIST
81101: LIST
81102: PPUSH
81103: CALL_OW 72
81107: DIFF
81108: ST_TO_ADDR
// end ; end_of_file
81109: LD_VAR 0 3
81113: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
81114: LD_INT 0
81116: PPUSH
81117: PPUSH
81118: PPUSH
// if not mc_bases or not skirmish then
81119: LD_EXP 45
81123: NOT
81124: PUSH
81125: LD_EXP 43
81129: NOT
81130: OR
81131: IFFALSE 81135
// exit ;
81133: GO 81300
// for i = 1 to mc_bases do
81135: LD_ADDR_VAR 0 4
81139: PUSH
81140: DOUBLE
81141: LD_INT 1
81143: DEC
81144: ST_TO_ADDR
81145: LD_EXP 45
81149: PUSH
81150: FOR_TO
81151: IFFALSE 81298
// begin if sci in mc_bases [ i ] then
81153: LD_VAR 0 2
81157: PUSH
81158: LD_EXP 45
81162: PUSH
81163: LD_VAR 0 4
81167: ARRAY
81168: IN
81169: IFFALSE 81296
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
81171: LD_ADDR_EXP 74
81175: PUSH
81176: LD_EXP 74
81180: PPUSH
81181: LD_VAR 0 4
81185: PUSH
81186: LD_EXP 74
81190: PUSH
81191: LD_VAR 0 4
81195: ARRAY
81196: PUSH
81197: LD_INT 1
81199: PLUS
81200: PUSH
81201: EMPTY
81202: LIST
81203: LIST
81204: PPUSH
81205: LD_VAR 0 1
81209: PPUSH
81210: CALL 24294 0 3
81214: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
81215: LD_ADDR_VAR 0 5
81219: PUSH
81220: LD_EXP 45
81224: PUSH
81225: LD_VAR 0 4
81229: ARRAY
81230: PPUSH
81231: LD_INT 2
81233: PUSH
81234: LD_INT 30
81236: PUSH
81237: LD_INT 0
81239: PUSH
81240: EMPTY
81241: LIST
81242: LIST
81243: PUSH
81244: LD_INT 30
81246: PUSH
81247: LD_INT 1
81249: PUSH
81250: EMPTY
81251: LIST
81252: LIST
81253: PUSH
81254: EMPTY
81255: LIST
81256: LIST
81257: LIST
81258: PPUSH
81259: CALL_OW 72
81263: PPUSH
81264: LD_VAR 0 1
81268: PPUSH
81269: CALL_OW 74
81273: ST_TO_ADDR
// if tmp then
81274: LD_VAR 0 5
81278: IFFALSE 81294
// ComStandNearbyBuilding ( ape , tmp ) ;
81280: LD_VAR 0 1
81284: PPUSH
81285: LD_VAR 0 5
81289: PPUSH
81290: CALL 20908 0 2
// break ;
81294: GO 81298
// end ; end ;
81296: GO 81150
81298: POP
81299: POP
// end ;
81300: LD_VAR 0 3
81304: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
81305: LD_INT 0
81307: PPUSH
81308: PPUSH
81309: PPUSH
// if not mc_bases or not skirmish then
81310: LD_EXP 45
81314: NOT
81315: PUSH
81316: LD_EXP 43
81320: NOT
81321: OR
81322: IFFALSE 81326
// exit ;
81324: GO 81415
// for i = 1 to mc_bases do
81326: LD_ADDR_VAR 0 4
81330: PUSH
81331: DOUBLE
81332: LD_INT 1
81334: DEC
81335: ST_TO_ADDR
81336: LD_EXP 45
81340: PUSH
81341: FOR_TO
81342: IFFALSE 81413
// begin if building in mc_busy_turret_list [ i ] then
81344: LD_VAR 0 1
81348: PUSH
81349: LD_EXP 55
81353: PUSH
81354: LD_VAR 0 4
81358: ARRAY
81359: IN
81360: IFFALSE 81411
// begin tmp := mc_busy_turret_list [ i ] diff building ;
81362: LD_ADDR_VAR 0 5
81366: PUSH
81367: LD_EXP 55
81371: PUSH
81372: LD_VAR 0 4
81376: ARRAY
81377: PUSH
81378: LD_VAR 0 1
81382: DIFF
81383: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
81384: LD_ADDR_EXP 55
81388: PUSH
81389: LD_EXP 55
81393: PPUSH
81394: LD_VAR 0 4
81398: PPUSH
81399: LD_VAR 0 5
81403: PPUSH
81404: CALL_OW 1
81408: ST_TO_ADDR
// break ;
81409: GO 81413
// end ; end ;
81411: GO 81341
81413: POP
81414: POP
// end ;
81415: LD_VAR 0 3
81419: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
81420: LD_INT 0
81422: PPUSH
81423: PPUSH
81424: PPUSH
// if not mc_bases or not skirmish then
81425: LD_EXP 45
81429: NOT
81430: PUSH
81431: LD_EXP 43
81435: NOT
81436: OR
81437: IFFALSE 81441
// exit ;
81439: GO 81640
// for i = 1 to mc_bases do
81441: LD_ADDR_VAR 0 5
81445: PUSH
81446: DOUBLE
81447: LD_INT 1
81449: DEC
81450: ST_TO_ADDR
81451: LD_EXP 45
81455: PUSH
81456: FOR_TO
81457: IFFALSE 81638
// if building in mc_bases [ i ] then
81459: LD_VAR 0 1
81463: PUSH
81464: LD_EXP 45
81468: PUSH
81469: LD_VAR 0 5
81473: ARRAY
81474: IN
81475: IFFALSE 81636
// begin tmp := mc_bases [ i ] diff building ;
81477: LD_ADDR_VAR 0 6
81481: PUSH
81482: LD_EXP 45
81486: PUSH
81487: LD_VAR 0 5
81491: ARRAY
81492: PUSH
81493: LD_VAR 0 1
81497: DIFF
81498: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
81499: LD_ADDR_EXP 45
81503: PUSH
81504: LD_EXP 45
81508: PPUSH
81509: LD_VAR 0 5
81513: PPUSH
81514: LD_VAR 0 6
81518: PPUSH
81519: CALL_OW 1
81523: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
81524: LD_VAR 0 1
81528: PUSH
81529: LD_EXP 53
81533: PUSH
81534: LD_VAR 0 5
81538: ARRAY
81539: IN
81540: IFFALSE 81579
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
81542: LD_ADDR_EXP 53
81546: PUSH
81547: LD_EXP 53
81551: PPUSH
81552: LD_VAR 0 5
81556: PPUSH
81557: LD_EXP 53
81561: PUSH
81562: LD_VAR 0 5
81566: ARRAY
81567: PUSH
81568: LD_VAR 0 1
81572: DIFF
81573: PPUSH
81574: CALL_OW 1
81578: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
81579: LD_VAR 0 1
81583: PUSH
81584: LD_EXP 54
81588: PUSH
81589: LD_VAR 0 5
81593: ARRAY
81594: IN
81595: IFFALSE 81634
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
81597: LD_ADDR_EXP 54
81601: PUSH
81602: LD_EXP 54
81606: PPUSH
81607: LD_VAR 0 5
81611: PPUSH
81612: LD_EXP 54
81616: PUSH
81617: LD_VAR 0 5
81621: ARRAY
81622: PUSH
81623: LD_VAR 0 1
81627: DIFF
81628: PPUSH
81629: CALL_OW 1
81633: ST_TO_ADDR
// break ;
81634: GO 81638
// end ;
81636: GO 81456
81638: POP
81639: POP
// end ;
81640: LD_VAR 0 4
81644: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
81645: LD_INT 0
81647: PPUSH
81648: PPUSH
81649: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
81650: LD_EXP 45
81654: NOT
81655: PUSH
81656: LD_EXP 43
81660: NOT
81661: OR
81662: PUSH
81663: LD_VAR 0 3
81667: PUSH
81668: LD_EXP 71
81672: IN
81673: NOT
81674: OR
81675: IFFALSE 81679
// exit ;
81677: GO 81802
// for i = 1 to mc_vehicles do
81679: LD_ADDR_VAR 0 6
81683: PUSH
81684: DOUBLE
81685: LD_INT 1
81687: DEC
81688: ST_TO_ADDR
81689: LD_EXP 64
81693: PUSH
81694: FOR_TO
81695: IFFALSE 81800
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
81697: LD_VAR 0 2
81701: PUSH
81702: LD_EXP 64
81706: PUSH
81707: LD_VAR 0 6
81711: ARRAY
81712: IN
81713: PUSH
81714: LD_VAR 0 1
81718: PUSH
81719: LD_EXP 64
81723: PUSH
81724: LD_VAR 0 6
81728: ARRAY
81729: IN
81730: OR
81731: IFFALSE 81798
// begin tmp := mc_vehicles [ i ] diff old ;
81733: LD_ADDR_VAR 0 7
81737: PUSH
81738: LD_EXP 64
81742: PUSH
81743: LD_VAR 0 6
81747: ARRAY
81748: PUSH
81749: LD_VAR 0 2
81753: DIFF
81754: ST_TO_ADDR
// tmp := tmp diff new ;
81755: LD_ADDR_VAR 0 7
81759: PUSH
81760: LD_VAR 0 7
81764: PUSH
81765: LD_VAR 0 1
81769: DIFF
81770: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
81771: LD_ADDR_EXP 64
81775: PUSH
81776: LD_EXP 64
81780: PPUSH
81781: LD_VAR 0 6
81785: PPUSH
81786: LD_VAR 0 7
81790: PPUSH
81791: CALL_OW 1
81795: ST_TO_ADDR
// break ;
81796: GO 81800
// end ;
81798: GO 81694
81800: POP
81801: POP
// end ;
81802: LD_VAR 0 5
81806: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
81807: LD_INT 0
81809: PPUSH
81810: PPUSH
81811: PPUSH
81812: PPUSH
// if not mc_bases or not skirmish then
81813: LD_EXP 45
81817: NOT
81818: PUSH
81819: LD_EXP 43
81823: NOT
81824: OR
81825: IFFALSE 81829
// exit ;
81827: GO 82206
// side := GetSide ( vehicle ) ;
81829: LD_ADDR_VAR 0 5
81833: PUSH
81834: LD_VAR 0 1
81838: PPUSH
81839: CALL_OW 255
81843: ST_TO_ADDR
// for i = 1 to mc_bases do
81844: LD_ADDR_VAR 0 4
81848: PUSH
81849: DOUBLE
81850: LD_INT 1
81852: DEC
81853: ST_TO_ADDR
81854: LD_EXP 45
81858: PUSH
81859: FOR_TO
81860: IFFALSE 82204
// begin if factory in mc_bases [ i ] then
81862: LD_VAR 0 2
81866: PUSH
81867: LD_EXP 45
81871: PUSH
81872: LD_VAR 0 4
81876: ARRAY
81877: IN
81878: IFFALSE 82202
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
81880: LD_EXP 67
81884: PUSH
81885: LD_VAR 0 4
81889: ARRAY
81890: PUSH
81891: LD_EXP 56
81895: PUSH
81896: LD_VAR 0 4
81900: ARRAY
81901: LESS
81902: PUSH
81903: LD_VAR 0 1
81907: PPUSH
81908: CALL_OW 264
81912: PUSH
81913: LD_INT 31
81915: PUSH
81916: LD_INT 32
81918: PUSH
81919: LD_INT 51
81921: PUSH
81922: LD_EXP 30
81926: PUSH
81927: LD_INT 12
81929: PUSH
81930: LD_INT 30
81932: PUSH
81933: LD_EXP 29
81937: PUSH
81938: LD_INT 11
81940: PUSH
81941: LD_INT 53
81943: PUSH
81944: LD_INT 14
81946: PUSH
81947: LD_EXP 33
81951: PUSH
81952: LD_INT 29
81954: PUSH
81955: LD_EXP 31
81959: PUSH
81960: LD_INT 13
81962: PUSH
81963: LD_INT 52
81965: PUSH
81966: LD_INT 48
81968: PUSH
81969: LD_INT 8
81971: PUSH
81972: EMPTY
81973: LIST
81974: LIST
81975: LIST
81976: LIST
81977: LIST
81978: LIST
81979: LIST
81980: LIST
81981: LIST
81982: LIST
81983: LIST
81984: LIST
81985: LIST
81986: LIST
81987: LIST
81988: LIST
81989: LIST
81990: IN
81991: NOT
81992: AND
81993: IFFALSE 82041
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
81995: LD_ADDR_EXP 67
81999: PUSH
82000: LD_EXP 67
82004: PPUSH
82005: LD_VAR 0 4
82009: PUSH
82010: LD_EXP 67
82014: PUSH
82015: LD_VAR 0 4
82019: ARRAY
82020: PUSH
82021: LD_INT 1
82023: PLUS
82024: PUSH
82025: EMPTY
82026: LIST
82027: LIST
82028: PPUSH
82029: LD_VAR 0 1
82033: PPUSH
82034: CALL 24294 0 3
82038: ST_TO_ADDR
82039: GO 82085
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
82041: LD_ADDR_EXP 64
82045: PUSH
82046: LD_EXP 64
82050: PPUSH
82051: LD_VAR 0 4
82055: PUSH
82056: LD_EXP 64
82060: PUSH
82061: LD_VAR 0 4
82065: ARRAY
82066: PUSH
82067: LD_INT 1
82069: PLUS
82070: PUSH
82071: EMPTY
82072: LIST
82073: LIST
82074: PPUSH
82075: LD_VAR 0 1
82079: PPUSH
82080: CALL 24294 0 3
82084: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
82085: LD_VAR 0 1
82089: PPUSH
82090: CALL_OW 263
82094: PUSH
82095: LD_INT 2
82097: EQUAL
82098: IFFALSE 82118
// begin repeat wait ( 0 0$1 ) ;
82100: LD_INT 35
82102: PPUSH
82103: CALL_OW 67
// until IsControledBy ( vehicle ) ;
82107: LD_VAR 0 1
82111: PPUSH
82112: CALL_OW 312
82116: IFFALSE 82100
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
82118: LD_VAR 0 1
82122: PPUSH
82123: LD_EXP 69
82127: PUSH
82128: LD_VAR 0 4
82132: ARRAY
82133: PPUSH
82134: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
82138: LD_VAR 0 1
82142: PPUSH
82143: CALL_OW 263
82147: PUSH
82148: LD_INT 1
82150: NONEQUAL
82151: IFFALSE 82155
// break ;
82153: GO 82204
// repeat wait ( 0 0$1 ) ;
82155: LD_INT 35
82157: PPUSH
82158: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
82162: LD_VAR 0 1
82166: PPUSH
82167: LD_EXP 69
82171: PUSH
82172: LD_VAR 0 4
82176: ARRAY
82177: PPUSH
82178: CALL_OW 308
82182: IFFALSE 82155
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
82184: LD_VAR 0 1
82188: PPUSH
82189: CALL_OW 311
82193: PPUSH
82194: CALL_OW 121
// exit ;
82198: POP
82199: POP
82200: GO 82206
// end ; end ;
82202: GO 81859
82204: POP
82205: POP
// end ;
82206: LD_VAR 0 3
82210: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
82211: LD_INT 0
82213: PPUSH
82214: PPUSH
82215: PPUSH
82216: PPUSH
// if not mc_bases or not skirmish then
82217: LD_EXP 45
82221: NOT
82222: PUSH
82223: LD_EXP 43
82227: NOT
82228: OR
82229: IFFALSE 82233
// exit ;
82231: GO 82586
// repeat wait ( 0 0$1 ) ;
82233: LD_INT 35
82235: PPUSH
82236: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
82240: LD_VAR 0 2
82244: PPUSH
82245: LD_VAR 0 3
82249: PPUSH
82250: CALL_OW 284
82254: IFFALSE 82233
// if GetResourceTypeXY ( x , y ) = mat_artefact then
82256: LD_VAR 0 2
82260: PPUSH
82261: LD_VAR 0 3
82265: PPUSH
82266: CALL_OW 283
82270: PUSH
82271: LD_INT 4
82273: EQUAL
82274: IFFALSE 82278
// exit ;
82276: GO 82586
// for i = 1 to mc_bases do
82278: LD_ADDR_VAR 0 7
82282: PUSH
82283: DOUBLE
82284: LD_INT 1
82286: DEC
82287: ST_TO_ADDR
82288: LD_EXP 45
82292: PUSH
82293: FOR_TO
82294: IFFALSE 82584
// begin if mc_crates_area [ i ] then
82296: LD_EXP 63
82300: PUSH
82301: LD_VAR 0 7
82305: ARRAY
82306: IFFALSE 82417
// for j in mc_crates_area [ i ] do
82308: LD_ADDR_VAR 0 8
82312: PUSH
82313: LD_EXP 63
82317: PUSH
82318: LD_VAR 0 7
82322: ARRAY
82323: PUSH
82324: FOR_IN
82325: IFFALSE 82415
// if InArea ( x , y , j ) then
82327: LD_VAR 0 2
82331: PPUSH
82332: LD_VAR 0 3
82336: PPUSH
82337: LD_VAR 0 8
82341: PPUSH
82342: CALL_OW 309
82346: IFFALSE 82413
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
82348: LD_ADDR_EXP 61
82352: PUSH
82353: LD_EXP 61
82357: PPUSH
82358: LD_VAR 0 7
82362: PUSH
82363: LD_EXP 61
82367: PUSH
82368: LD_VAR 0 7
82372: ARRAY
82373: PUSH
82374: LD_INT 1
82376: PLUS
82377: PUSH
82378: EMPTY
82379: LIST
82380: LIST
82381: PPUSH
82382: LD_VAR 0 4
82386: PUSH
82387: LD_VAR 0 2
82391: PUSH
82392: LD_VAR 0 3
82396: PUSH
82397: EMPTY
82398: LIST
82399: LIST
82400: LIST
82401: PPUSH
82402: CALL 24294 0 3
82406: ST_TO_ADDR
// exit ;
82407: POP
82408: POP
82409: POP
82410: POP
82411: GO 82586
// end ;
82413: GO 82324
82415: POP
82416: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
82417: LD_ADDR_VAR 0 9
82421: PUSH
82422: LD_EXP 45
82426: PUSH
82427: LD_VAR 0 7
82431: ARRAY
82432: PPUSH
82433: LD_INT 2
82435: PUSH
82436: LD_INT 30
82438: PUSH
82439: LD_INT 0
82441: PUSH
82442: EMPTY
82443: LIST
82444: LIST
82445: PUSH
82446: LD_INT 30
82448: PUSH
82449: LD_INT 1
82451: PUSH
82452: EMPTY
82453: LIST
82454: LIST
82455: PUSH
82456: EMPTY
82457: LIST
82458: LIST
82459: LIST
82460: PPUSH
82461: CALL_OW 72
82465: ST_TO_ADDR
// if not depot then
82466: LD_VAR 0 9
82470: NOT
82471: IFFALSE 82475
// continue ;
82473: GO 82293
// for j in depot do
82475: LD_ADDR_VAR 0 8
82479: PUSH
82480: LD_VAR 0 9
82484: PUSH
82485: FOR_IN
82486: IFFALSE 82580
// if GetDistUnitXY ( j , x , y ) < 30 then
82488: LD_VAR 0 8
82492: PPUSH
82493: LD_VAR 0 2
82497: PPUSH
82498: LD_VAR 0 3
82502: PPUSH
82503: CALL_OW 297
82507: PUSH
82508: LD_INT 30
82510: LESS
82511: IFFALSE 82578
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
82513: LD_ADDR_EXP 61
82517: PUSH
82518: LD_EXP 61
82522: PPUSH
82523: LD_VAR 0 7
82527: PUSH
82528: LD_EXP 61
82532: PUSH
82533: LD_VAR 0 7
82537: ARRAY
82538: PUSH
82539: LD_INT 1
82541: PLUS
82542: PUSH
82543: EMPTY
82544: LIST
82545: LIST
82546: PPUSH
82547: LD_VAR 0 4
82551: PUSH
82552: LD_VAR 0 2
82556: PUSH
82557: LD_VAR 0 3
82561: PUSH
82562: EMPTY
82563: LIST
82564: LIST
82565: LIST
82566: PPUSH
82567: CALL 24294 0 3
82571: ST_TO_ADDR
// exit ;
82572: POP
82573: POP
82574: POP
82575: POP
82576: GO 82586
// end ;
82578: GO 82485
82580: POP
82581: POP
// end ;
82582: GO 82293
82584: POP
82585: POP
// end ;
82586: LD_VAR 0 6
82590: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
82591: LD_INT 0
82593: PPUSH
82594: PPUSH
82595: PPUSH
82596: PPUSH
// if not mc_bases or not skirmish then
82597: LD_EXP 45
82601: NOT
82602: PUSH
82603: LD_EXP 43
82607: NOT
82608: OR
82609: IFFALSE 82613
// exit ;
82611: GO 82890
// side := GetSide ( lab ) ;
82613: LD_ADDR_VAR 0 4
82617: PUSH
82618: LD_VAR 0 2
82622: PPUSH
82623: CALL_OW 255
82627: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
82628: LD_VAR 0 4
82632: PUSH
82633: LD_EXP 71
82637: IN
82638: NOT
82639: PUSH
82640: LD_EXP 72
82644: NOT
82645: OR
82646: PUSH
82647: LD_EXP 45
82651: NOT
82652: OR
82653: IFFALSE 82657
// exit ;
82655: GO 82890
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
82657: LD_ADDR_EXP 72
82661: PUSH
82662: LD_EXP 72
82666: PPUSH
82667: LD_VAR 0 4
82671: PPUSH
82672: LD_EXP 72
82676: PUSH
82677: LD_VAR 0 4
82681: ARRAY
82682: PUSH
82683: LD_VAR 0 1
82687: DIFF
82688: PPUSH
82689: CALL_OW 1
82693: ST_TO_ADDR
// for i = 1 to mc_bases do
82694: LD_ADDR_VAR 0 5
82698: PUSH
82699: DOUBLE
82700: LD_INT 1
82702: DEC
82703: ST_TO_ADDR
82704: LD_EXP 45
82708: PUSH
82709: FOR_TO
82710: IFFALSE 82888
// begin if lab in mc_bases [ i ] then
82712: LD_VAR 0 2
82716: PUSH
82717: LD_EXP 45
82721: PUSH
82722: LD_VAR 0 5
82726: ARRAY
82727: IN
82728: IFFALSE 82886
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
82730: LD_VAR 0 1
82734: PUSH
82735: LD_INT 11
82737: PUSH
82738: LD_INT 4
82740: PUSH
82741: LD_INT 3
82743: PUSH
82744: LD_INT 2
82746: PUSH
82747: EMPTY
82748: LIST
82749: LIST
82750: LIST
82751: LIST
82752: IN
82753: PUSH
82754: LD_EXP 75
82758: PUSH
82759: LD_VAR 0 5
82763: ARRAY
82764: AND
82765: IFFALSE 82886
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
82767: LD_ADDR_VAR 0 6
82771: PUSH
82772: LD_EXP 75
82776: PUSH
82777: LD_VAR 0 5
82781: ARRAY
82782: PUSH
82783: LD_INT 1
82785: ARRAY
82786: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
82787: LD_ADDR_EXP 75
82791: PUSH
82792: LD_EXP 75
82796: PPUSH
82797: LD_VAR 0 5
82801: PPUSH
82802: EMPTY
82803: PPUSH
82804: CALL_OW 1
82808: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
82809: LD_VAR 0 6
82813: PPUSH
82814: LD_INT 0
82816: PPUSH
82817: CALL_OW 109
// ComExitBuilding ( tmp ) ;
82821: LD_VAR 0 6
82825: PPUSH
82826: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
82830: LD_ADDR_EXP 74
82834: PUSH
82835: LD_EXP 74
82839: PPUSH
82840: LD_VAR 0 5
82844: PPUSH
82845: LD_EXP 74
82849: PUSH
82850: LD_VAR 0 5
82854: ARRAY
82855: PPUSH
82856: LD_INT 1
82858: PPUSH
82859: LD_VAR 0 6
82863: PPUSH
82864: CALL_OW 2
82868: PPUSH
82869: CALL_OW 1
82873: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
82874: LD_VAR 0 5
82878: PPUSH
82879: LD_INT 112
82881: PPUSH
82882: CALL 59902 0 2
// end ; end ; end ;
82886: GO 82709
82888: POP
82889: POP
// end ;
82890: LD_VAR 0 3
82894: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
82895: LD_INT 0
82897: PPUSH
82898: PPUSH
82899: PPUSH
82900: PPUSH
82901: PPUSH
82902: PPUSH
82903: PPUSH
82904: PPUSH
// if not mc_bases or not skirmish then
82905: LD_EXP 45
82909: NOT
82910: PUSH
82911: LD_EXP 43
82915: NOT
82916: OR
82917: IFFALSE 82921
// exit ;
82919: GO 84292
// for i = 1 to mc_bases do
82921: LD_ADDR_VAR 0 3
82925: PUSH
82926: DOUBLE
82927: LD_INT 1
82929: DEC
82930: ST_TO_ADDR
82931: LD_EXP 45
82935: PUSH
82936: FOR_TO
82937: IFFALSE 84290
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
82939: LD_VAR 0 1
82943: PUSH
82944: LD_EXP 45
82948: PUSH
82949: LD_VAR 0 3
82953: ARRAY
82954: IN
82955: PUSH
82956: LD_VAR 0 1
82960: PUSH
82961: LD_EXP 52
82965: PUSH
82966: LD_VAR 0 3
82970: ARRAY
82971: IN
82972: OR
82973: PUSH
82974: LD_VAR 0 1
82978: PUSH
82979: LD_EXP 67
82983: PUSH
82984: LD_VAR 0 3
82988: ARRAY
82989: IN
82990: OR
82991: PUSH
82992: LD_VAR 0 1
82996: PUSH
82997: LD_EXP 64
83001: PUSH
83002: LD_VAR 0 3
83006: ARRAY
83007: IN
83008: OR
83009: PUSH
83010: LD_VAR 0 1
83014: PUSH
83015: LD_EXP 74
83019: PUSH
83020: LD_VAR 0 3
83024: ARRAY
83025: IN
83026: OR
83027: PUSH
83028: LD_VAR 0 1
83032: PUSH
83033: LD_EXP 75
83037: PUSH
83038: LD_VAR 0 3
83042: ARRAY
83043: IN
83044: OR
83045: IFFALSE 84288
// begin if un in mc_ape [ i ] then
83047: LD_VAR 0 1
83051: PUSH
83052: LD_EXP 74
83056: PUSH
83057: LD_VAR 0 3
83061: ARRAY
83062: IN
83063: IFFALSE 83102
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
83065: LD_ADDR_EXP 74
83069: PUSH
83070: LD_EXP 74
83074: PPUSH
83075: LD_VAR 0 3
83079: PPUSH
83080: LD_EXP 74
83084: PUSH
83085: LD_VAR 0 3
83089: ARRAY
83090: PUSH
83091: LD_VAR 0 1
83095: DIFF
83096: PPUSH
83097: CALL_OW 1
83101: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
83102: LD_VAR 0 1
83106: PUSH
83107: LD_EXP 75
83111: PUSH
83112: LD_VAR 0 3
83116: ARRAY
83117: IN
83118: IFFALSE 83142
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
83120: LD_ADDR_EXP 75
83124: PUSH
83125: LD_EXP 75
83129: PPUSH
83130: LD_VAR 0 3
83134: PPUSH
83135: EMPTY
83136: PPUSH
83137: CALL_OW 1
83141: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
83142: LD_VAR 0 1
83146: PPUSH
83147: CALL_OW 247
83151: PUSH
83152: LD_INT 2
83154: EQUAL
83155: PUSH
83156: LD_VAR 0 1
83160: PPUSH
83161: CALL_OW 110
83165: PUSH
83166: LD_INT 20
83168: EQUAL
83169: PUSH
83170: LD_VAR 0 1
83174: PUSH
83175: LD_EXP 67
83179: PUSH
83180: LD_VAR 0 3
83184: ARRAY
83185: IN
83186: OR
83187: PUSH
83188: LD_VAR 0 1
83192: PPUSH
83193: CALL_OW 264
83197: PUSH
83198: LD_INT 12
83200: PUSH
83201: LD_INT 51
83203: PUSH
83204: LD_EXP 30
83208: PUSH
83209: LD_INT 32
83211: PUSH
83212: LD_INT 13
83214: PUSH
83215: LD_INT 52
83217: PUSH
83218: LD_INT 31
83220: PUSH
83221: EMPTY
83222: LIST
83223: LIST
83224: LIST
83225: LIST
83226: LIST
83227: LIST
83228: LIST
83229: IN
83230: OR
83231: AND
83232: IFFALSE 83540
// begin if un in mc_defender [ i ] then
83234: LD_VAR 0 1
83238: PUSH
83239: LD_EXP 67
83243: PUSH
83244: LD_VAR 0 3
83248: ARRAY
83249: IN
83250: IFFALSE 83289
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
83252: LD_ADDR_EXP 67
83256: PUSH
83257: LD_EXP 67
83261: PPUSH
83262: LD_VAR 0 3
83266: PPUSH
83267: LD_EXP 67
83271: PUSH
83272: LD_VAR 0 3
83276: ARRAY
83277: PUSH
83278: LD_VAR 0 1
83282: DIFF
83283: PPUSH
83284: CALL_OW 1
83288: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
83289: LD_ADDR_VAR 0 8
83293: PUSH
83294: LD_VAR 0 3
83298: PPUSH
83299: LD_INT 3
83301: PPUSH
83302: CALL 79958 0 2
83306: ST_TO_ADDR
// if fac then
83307: LD_VAR 0 8
83311: IFFALSE 83540
// begin for j in fac do
83313: LD_ADDR_VAR 0 4
83317: PUSH
83318: LD_VAR 0 8
83322: PUSH
83323: FOR_IN
83324: IFFALSE 83538
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
83326: LD_ADDR_VAR 0 9
83330: PUSH
83331: LD_VAR 0 8
83335: PPUSH
83336: LD_VAR 0 1
83340: PPUSH
83341: CALL_OW 265
83345: PPUSH
83346: LD_VAR 0 1
83350: PPUSH
83351: CALL_OW 262
83355: PPUSH
83356: LD_VAR 0 1
83360: PPUSH
83361: CALL_OW 263
83365: PPUSH
83366: LD_VAR 0 1
83370: PPUSH
83371: CALL_OW 264
83375: PPUSH
83376: CALL 21826 0 5
83380: ST_TO_ADDR
// if components then
83381: LD_VAR 0 9
83385: IFFALSE 83536
// begin if GetWeapon ( un ) = ar_control_tower then
83387: LD_VAR 0 1
83391: PPUSH
83392: CALL_OW 264
83396: PUSH
83397: LD_INT 31
83399: EQUAL
83400: IFFALSE 83517
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
83402: LD_VAR 0 1
83406: PPUSH
83407: CALL_OW 311
83411: PPUSH
83412: LD_INT 0
83414: PPUSH
83415: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
83419: LD_ADDR_EXP 85
83423: PUSH
83424: LD_EXP 85
83428: PPUSH
83429: LD_VAR 0 3
83433: PPUSH
83434: LD_EXP 85
83438: PUSH
83439: LD_VAR 0 3
83443: ARRAY
83444: PUSH
83445: LD_VAR 0 1
83449: PPUSH
83450: CALL_OW 311
83454: DIFF
83455: PPUSH
83456: CALL_OW 1
83460: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
83461: LD_ADDR_VAR 0 7
83465: PUSH
83466: LD_EXP 66
83470: PUSH
83471: LD_VAR 0 3
83475: ARRAY
83476: PPUSH
83477: LD_INT 1
83479: PPUSH
83480: LD_VAR 0 9
83484: PPUSH
83485: CALL_OW 2
83489: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
83490: LD_ADDR_EXP 66
83494: PUSH
83495: LD_EXP 66
83499: PPUSH
83500: LD_VAR 0 3
83504: PPUSH
83505: LD_VAR 0 7
83509: PPUSH
83510: CALL_OW 1
83514: ST_TO_ADDR
// end else
83515: GO 83534
// MC_InsertProduceList ( i , [ components ] ) ;
83517: LD_VAR 0 3
83521: PPUSH
83522: LD_VAR 0 9
83526: PUSH
83527: EMPTY
83528: LIST
83529: PPUSH
83530: CALL 79503 0 2
// break ;
83534: GO 83538
// end ; end ;
83536: GO 83323
83538: POP
83539: POP
// end ; end ; if GetType ( un ) = unit_building then
83540: LD_VAR 0 1
83544: PPUSH
83545: CALL_OW 247
83549: PUSH
83550: LD_INT 3
83552: EQUAL
83553: IFFALSE 83956
// begin btype := GetBType ( un ) ;
83555: LD_ADDR_VAR 0 5
83559: PUSH
83560: LD_VAR 0 1
83564: PPUSH
83565: CALL_OW 266
83569: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
83570: LD_VAR 0 5
83574: PUSH
83575: LD_INT 29
83577: PUSH
83578: LD_INT 30
83580: PUSH
83581: EMPTY
83582: LIST
83583: LIST
83584: IN
83585: IFFALSE 83658
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
83587: LD_VAR 0 1
83591: PPUSH
83592: CALL_OW 250
83596: PPUSH
83597: LD_VAR 0 1
83601: PPUSH
83602: CALL_OW 251
83606: PPUSH
83607: LD_VAR 0 1
83611: PPUSH
83612: CALL_OW 255
83616: PPUSH
83617: CALL_OW 440
83621: NOT
83622: IFFALSE 83658
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
83624: LD_VAR 0 1
83628: PPUSH
83629: CALL_OW 250
83633: PPUSH
83634: LD_VAR 0 1
83638: PPUSH
83639: CALL_OW 251
83643: PPUSH
83644: LD_VAR 0 1
83648: PPUSH
83649: CALL_OW 255
83653: PPUSH
83654: CALL_OW 441
// end ; if btype = b_warehouse then
83658: LD_VAR 0 5
83662: PUSH
83663: LD_INT 1
83665: EQUAL
83666: IFFALSE 83684
// begin btype := b_depot ;
83668: LD_ADDR_VAR 0 5
83672: PUSH
83673: LD_INT 0
83675: ST_TO_ADDR
// pos := 1 ;
83676: LD_ADDR_VAR 0 6
83680: PUSH
83681: LD_INT 1
83683: ST_TO_ADDR
// end ; if btype = b_factory then
83684: LD_VAR 0 5
83688: PUSH
83689: LD_INT 3
83691: EQUAL
83692: IFFALSE 83710
// begin btype := b_workshop ;
83694: LD_ADDR_VAR 0 5
83698: PUSH
83699: LD_INT 2
83701: ST_TO_ADDR
// pos := 1 ;
83702: LD_ADDR_VAR 0 6
83706: PUSH
83707: LD_INT 1
83709: ST_TO_ADDR
// end ; if btype = b_barracks then
83710: LD_VAR 0 5
83714: PUSH
83715: LD_INT 5
83717: EQUAL
83718: IFFALSE 83728
// btype := b_armoury ;
83720: LD_ADDR_VAR 0 5
83724: PUSH
83725: LD_INT 4
83727: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
83728: LD_VAR 0 5
83732: PUSH
83733: LD_INT 7
83735: PUSH
83736: LD_INT 8
83738: PUSH
83739: EMPTY
83740: LIST
83741: LIST
83742: IN
83743: IFFALSE 83753
// btype := b_lab ;
83745: LD_ADDR_VAR 0 5
83749: PUSH
83750: LD_INT 6
83752: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
83753: LD_ADDR_EXP 50
83757: PUSH
83758: LD_EXP 50
83762: PPUSH
83763: LD_VAR 0 3
83767: PUSH
83768: LD_EXP 50
83772: PUSH
83773: LD_VAR 0 3
83777: ARRAY
83778: PUSH
83779: LD_INT 1
83781: PLUS
83782: PUSH
83783: EMPTY
83784: LIST
83785: LIST
83786: PPUSH
83787: LD_VAR 0 5
83791: PUSH
83792: LD_VAR 0 1
83796: PPUSH
83797: CALL_OW 250
83801: PUSH
83802: LD_VAR 0 1
83806: PPUSH
83807: CALL_OW 251
83811: PUSH
83812: LD_VAR 0 1
83816: PPUSH
83817: CALL_OW 254
83821: PUSH
83822: EMPTY
83823: LIST
83824: LIST
83825: LIST
83826: LIST
83827: PPUSH
83828: CALL 24294 0 3
83832: ST_TO_ADDR
// if pos = 1 then
83833: LD_VAR 0 6
83837: PUSH
83838: LD_INT 1
83840: EQUAL
83841: IFFALSE 83956
// begin tmp := mc_build_list [ i ] ;
83843: LD_ADDR_VAR 0 7
83847: PUSH
83848: LD_EXP 50
83852: PUSH
83853: LD_VAR 0 3
83857: ARRAY
83858: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
83859: LD_VAR 0 7
83863: PPUSH
83864: LD_INT 2
83866: PUSH
83867: LD_INT 30
83869: PUSH
83870: LD_INT 0
83872: PUSH
83873: EMPTY
83874: LIST
83875: LIST
83876: PUSH
83877: LD_INT 30
83879: PUSH
83880: LD_INT 1
83882: PUSH
83883: EMPTY
83884: LIST
83885: LIST
83886: PUSH
83887: EMPTY
83888: LIST
83889: LIST
83890: LIST
83891: PPUSH
83892: CALL_OW 72
83896: IFFALSE 83906
// pos := 2 ;
83898: LD_ADDR_VAR 0 6
83902: PUSH
83903: LD_INT 2
83905: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
83906: LD_ADDR_VAR 0 7
83910: PUSH
83911: LD_VAR 0 7
83915: PPUSH
83916: LD_VAR 0 6
83920: PPUSH
83921: LD_VAR 0 7
83925: PPUSH
83926: CALL 24620 0 3
83930: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
83931: LD_ADDR_EXP 50
83935: PUSH
83936: LD_EXP 50
83940: PPUSH
83941: LD_VAR 0 3
83945: PPUSH
83946: LD_VAR 0 7
83950: PPUSH
83951: CALL_OW 1
83955: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
83956: LD_VAR 0 1
83960: PUSH
83961: LD_EXP 45
83965: PUSH
83966: LD_VAR 0 3
83970: ARRAY
83971: IN
83972: IFFALSE 84011
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
83974: LD_ADDR_EXP 45
83978: PUSH
83979: LD_EXP 45
83983: PPUSH
83984: LD_VAR 0 3
83988: PPUSH
83989: LD_EXP 45
83993: PUSH
83994: LD_VAR 0 3
83998: ARRAY
83999: PUSH
84000: LD_VAR 0 1
84004: DIFF
84005: PPUSH
84006: CALL_OW 1
84010: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
84011: LD_VAR 0 1
84015: PUSH
84016: LD_EXP 52
84020: PUSH
84021: LD_VAR 0 3
84025: ARRAY
84026: IN
84027: IFFALSE 84066
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
84029: LD_ADDR_EXP 52
84033: PUSH
84034: LD_EXP 52
84038: PPUSH
84039: LD_VAR 0 3
84043: PPUSH
84044: LD_EXP 52
84048: PUSH
84049: LD_VAR 0 3
84053: ARRAY
84054: PUSH
84055: LD_VAR 0 1
84059: DIFF
84060: PPUSH
84061: CALL_OW 1
84065: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
84066: LD_VAR 0 1
84070: PUSH
84071: LD_EXP 64
84075: PUSH
84076: LD_VAR 0 3
84080: ARRAY
84081: IN
84082: IFFALSE 84121
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
84084: LD_ADDR_EXP 64
84088: PUSH
84089: LD_EXP 64
84093: PPUSH
84094: LD_VAR 0 3
84098: PPUSH
84099: LD_EXP 64
84103: PUSH
84104: LD_VAR 0 3
84108: ARRAY
84109: PUSH
84110: LD_VAR 0 1
84114: DIFF
84115: PPUSH
84116: CALL_OW 1
84120: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
84121: LD_VAR 0 1
84125: PUSH
84126: LD_EXP 67
84130: PUSH
84131: LD_VAR 0 3
84135: ARRAY
84136: IN
84137: IFFALSE 84176
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
84139: LD_ADDR_EXP 67
84143: PUSH
84144: LD_EXP 67
84148: PPUSH
84149: LD_VAR 0 3
84153: PPUSH
84154: LD_EXP 67
84158: PUSH
84159: LD_VAR 0 3
84163: ARRAY
84164: PUSH
84165: LD_VAR 0 1
84169: DIFF
84170: PPUSH
84171: CALL_OW 1
84175: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
84176: LD_VAR 0 1
84180: PUSH
84181: LD_EXP 54
84185: PUSH
84186: LD_VAR 0 3
84190: ARRAY
84191: IN
84192: IFFALSE 84231
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
84194: LD_ADDR_EXP 54
84198: PUSH
84199: LD_EXP 54
84203: PPUSH
84204: LD_VAR 0 3
84208: PPUSH
84209: LD_EXP 54
84213: PUSH
84214: LD_VAR 0 3
84218: ARRAY
84219: PUSH
84220: LD_VAR 0 1
84224: DIFF
84225: PPUSH
84226: CALL_OW 1
84230: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
84231: LD_VAR 0 1
84235: PUSH
84236: LD_EXP 53
84240: PUSH
84241: LD_VAR 0 3
84245: ARRAY
84246: IN
84247: IFFALSE 84286
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
84249: LD_ADDR_EXP 53
84253: PUSH
84254: LD_EXP 53
84258: PPUSH
84259: LD_VAR 0 3
84263: PPUSH
84264: LD_EXP 53
84268: PUSH
84269: LD_VAR 0 3
84273: ARRAY
84274: PUSH
84275: LD_VAR 0 1
84279: DIFF
84280: PPUSH
84281: CALL_OW 1
84285: ST_TO_ADDR
// end ; break ;
84286: GO 84290
// end ;
84288: GO 82936
84290: POP
84291: POP
// end ;
84292: LD_VAR 0 2
84296: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
84297: LD_INT 0
84299: PPUSH
84300: PPUSH
84301: PPUSH
// if not mc_bases or not skirmish then
84302: LD_EXP 45
84306: NOT
84307: PUSH
84308: LD_EXP 43
84312: NOT
84313: OR
84314: IFFALSE 84318
// exit ;
84316: GO 84533
// for i = 1 to mc_bases do
84318: LD_ADDR_VAR 0 3
84322: PUSH
84323: DOUBLE
84324: LD_INT 1
84326: DEC
84327: ST_TO_ADDR
84328: LD_EXP 45
84332: PUSH
84333: FOR_TO
84334: IFFALSE 84531
// begin if building in mc_construct_list [ i ] then
84336: LD_VAR 0 1
84340: PUSH
84341: LD_EXP 52
84345: PUSH
84346: LD_VAR 0 3
84350: ARRAY
84351: IN
84352: IFFALSE 84529
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
84354: LD_ADDR_EXP 52
84358: PUSH
84359: LD_EXP 52
84363: PPUSH
84364: LD_VAR 0 3
84368: PPUSH
84369: LD_EXP 52
84373: PUSH
84374: LD_VAR 0 3
84378: ARRAY
84379: PUSH
84380: LD_VAR 0 1
84384: DIFF
84385: PPUSH
84386: CALL_OW 1
84390: ST_TO_ADDR
// if building in mc_lab [ i ] then
84391: LD_VAR 0 1
84395: PUSH
84396: LD_EXP 78
84400: PUSH
84401: LD_VAR 0 3
84405: ARRAY
84406: IN
84407: IFFALSE 84462
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
84409: LD_ADDR_EXP 79
84413: PUSH
84414: LD_EXP 79
84418: PPUSH
84419: LD_VAR 0 3
84423: PPUSH
84424: LD_EXP 79
84428: PUSH
84429: LD_VAR 0 3
84433: ARRAY
84434: PPUSH
84435: LD_INT 1
84437: PPUSH
84438: LD_EXP 79
84442: PUSH
84443: LD_VAR 0 3
84447: ARRAY
84448: PPUSH
84449: LD_INT 0
84451: PPUSH
84452: CALL 23712 0 4
84456: PPUSH
84457: CALL_OW 1
84461: ST_TO_ADDR
// if not building in mc_bases [ i ] then
84462: LD_VAR 0 1
84466: PUSH
84467: LD_EXP 45
84471: PUSH
84472: LD_VAR 0 3
84476: ARRAY
84477: IN
84478: NOT
84479: IFFALSE 84525
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
84481: LD_ADDR_EXP 45
84485: PUSH
84486: LD_EXP 45
84490: PPUSH
84491: LD_VAR 0 3
84495: PUSH
84496: LD_EXP 45
84500: PUSH
84501: LD_VAR 0 3
84505: ARRAY
84506: PUSH
84507: LD_INT 1
84509: PLUS
84510: PUSH
84511: EMPTY
84512: LIST
84513: LIST
84514: PPUSH
84515: LD_VAR 0 1
84519: PPUSH
84520: CALL 24294 0 3
84524: ST_TO_ADDR
// exit ;
84525: POP
84526: POP
84527: GO 84533
// end ; end ;
84529: GO 84333
84531: POP
84532: POP
// end ;
84533: LD_VAR 0 2
84537: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
84538: LD_INT 0
84540: PPUSH
84541: PPUSH
84542: PPUSH
84543: PPUSH
84544: PPUSH
84545: PPUSH
84546: PPUSH
// if not mc_bases or not skirmish then
84547: LD_EXP 45
84551: NOT
84552: PUSH
84553: LD_EXP 43
84557: NOT
84558: OR
84559: IFFALSE 84563
// exit ;
84561: GO 85224
// for i = 1 to mc_bases do
84563: LD_ADDR_VAR 0 3
84567: PUSH
84568: DOUBLE
84569: LD_INT 1
84571: DEC
84572: ST_TO_ADDR
84573: LD_EXP 45
84577: PUSH
84578: FOR_TO
84579: IFFALSE 85222
// begin if building in mc_construct_list [ i ] then
84581: LD_VAR 0 1
84585: PUSH
84586: LD_EXP 52
84590: PUSH
84591: LD_VAR 0 3
84595: ARRAY
84596: IN
84597: IFFALSE 85220
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
84599: LD_ADDR_EXP 52
84603: PUSH
84604: LD_EXP 52
84608: PPUSH
84609: LD_VAR 0 3
84613: PPUSH
84614: LD_EXP 52
84618: PUSH
84619: LD_VAR 0 3
84623: ARRAY
84624: PUSH
84625: LD_VAR 0 1
84629: DIFF
84630: PPUSH
84631: CALL_OW 1
84635: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
84636: LD_ADDR_EXP 45
84640: PUSH
84641: LD_EXP 45
84645: PPUSH
84646: LD_VAR 0 3
84650: PUSH
84651: LD_EXP 45
84655: PUSH
84656: LD_VAR 0 3
84660: ARRAY
84661: PUSH
84662: LD_INT 1
84664: PLUS
84665: PUSH
84666: EMPTY
84667: LIST
84668: LIST
84669: PPUSH
84670: LD_VAR 0 1
84674: PPUSH
84675: CALL 24294 0 3
84679: ST_TO_ADDR
// btype := GetBType ( building ) ;
84680: LD_ADDR_VAR 0 5
84684: PUSH
84685: LD_VAR 0 1
84689: PPUSH
84690: CALL_OW 266
84694: ST_TO_ADDR
// side := GetSide ( building ) ;
84695: LD_ADDR_VAR 0 8
84699: PUSH
84700: LD_VAR 0 1
84704: PPUSH
84705: CALL_OW 255
84709: ST_TO_ADDR
// if btype = b_lab then
84710: LD_VAR 0 5
84714: PUSH
84715: LD_INT 6
84717: EQUAL
84718: IFFALSE 84768
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
84720: LD_ADDR_EXP 78
84724: PUSH
84725: LD_EXP 78
84729: PPUSH
84730: LD_VAR 0 3
84734: PUSH
84735: LD_EXP 78
84739: PUSH
84740: LD_VAR 0 3
84744: ARRAY
84745: PUSH
84746: LD_INT 1
84748: PLUS
84749: PUSH
84750: EMPTY
84751: LIST
84752: LIST
84753: PPUSH
84754: LD_VAR 0 1
84758: PPUSH
84759: CALL 24294 0 3
84763: ST_TO_ADDR
// exit ;
84764: POP
84765: POP
84766: GO 85224
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
84768: LD_VAR 0 5
84772: PUSH
84773: LD_INT 0
84775: PUSH
84776: LD_INT 2
84778: PUSH
84779: LD_INT 4
84781: PUSH
84782: EMPTY
84783: LIST
84784: LIST
84785: LIST
84786: IN
84787: IFFALSE 84911
// begin if btype = b_armoury then
84789: LD_VAR 0 5
84793: PUSH
84794: LD_INT 4
84796: EQUAL
84797: IFFALSE 84807
// btype := b_barracks ;
84799: LD_ADDR_VAR 0 5
84803: PUSH
84804: LD_INT 5
84806: ST_TO_ADDR
// if btype = b_depot then
84807: LD_VAR 0 5
84811: PUSH
84812: LD_INT 0
84814: EQUAL
84815: IFFALSE 84825
// btype := b_warehouse ;
84817: LD_ADDR_VAR 0 5
84821: PUSH
84822: LD_INT 1
84824: ST_TO_ADDR
// if btype = b_workshop then
84825: LD_VAR 0 5
84829: PUSH
84830: LD_INT 2
84832: EQUAL
84833: IFFALSE 84843
// btype := b_factory ;
84835: LD_ADDR_VAR 0 5
84839: PUSH
84840: LD_INT 3
84842: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
84843: LD_VAR 0 5
84847: PPUSH
84848: LD_VAR 0 8
84852: PPUSH
84853: CALL_OW 323
84857: PUSH
84858: LD_INT 1
84860: EQUAL
84861: IFFALSE 84907
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
84863: LD_ADDR_EXP 77
84867: PUSH
84868: LD_EXP 77
84872: PPUSH
84873: LD_VAR 0 3
84877: PUSH
84878: LD_EXP 77
84882: PUSH
84883: LD_VAR 0 3
84887: ARRAY
84888: PUSH
84889: LD_INT 1
84891: PLUS
84892: PUSH
84893: EMPTY
84894: LIST
84895: LIST
84896: PPUSH
84897: LD_VAR 0 1
84901: PPUSH
84902: CALL 24294 0 3
84906: ST_TO_ADDR
// exit ;
84907: POP
84908: POP
84909: GO 85224
// end ; if btype in [ b_bunker , b_turret ] then
84911: LD_VAR 0 5
84915: PUSH
84916: LD_INT 32
84918: PUSH
84919: LD_INT 33
84921: PUSH
84922: EMPTY
84923: LIST
84924: LIST
84925: IN
84926: IFFALSE 85216
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
84928: LD_ADDR_EXP 53
84932: PUSH
84933: LD_EXP 53
84937: PPUSH
84938: LD_VAR 0 3
84942: PUSH
84943: LD_EXP 53
84947: PUSH
84948: LD_VAR 0 3
84952: ARRAY
84953: PUSH
84954: LD_INT 1
84956: PLUS
84957: PUSH
84958: EMPTY
84959: LIST
84960: LIST
84961: PPUSH
84962: LD_VAR 0 1
84966: PPUSH
84967: CALL 24294 0 3
84971: ST_TO_ADDR
// if btype = b_bunker then
84972: LD_VAR 0 5
84976: PUSH
84977: LD_INT 32
84979: EQUAL
84980: IFFALSE 85216
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
84982: LD_ADDR_EXP 54
84986: PUSH
84987: LD_EXP 54
84991: PPUSH
84992: LD_VAR 0 3
84996: PUSH
84997: LD_EXP 54
85001: PUSH
85002: LD_VAR 0 3
85006: ARRAY
85007: PUSH
85008: LD_INT 1
85010: PLUS
85011: PUSH
85012: EMPTY
85013: LIST
85014: LIST
85015: PPUSH
85016: LD_VAR 0 1
85020: PPUSH
85021: CALL 24294 0 3
85025: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
85026: LD_ADDR_VAR 0 6
85030: PUSH
85031: LD_EXP 45
85035: PUSH
85036: LD_VAR 0 3
85040: ARRAY
85041: PPUSH
85042: LD_INT 25
85044: PUSH
85045: LD_INT 1
85047: PUSH
85048: EMPTY
85049: LIST
85050: LIST
85051: PUSH
85052: LD_INT 3
85054: PUSH
85055: LD_INT 54
85057: PUSH
85058: EMPTY
85059: LIST
85060: PUSH
85061: EMPTY
85062: LIST
85063: LIST
85064: PUSH
85065: EMPTY
85066: LIST
85067: LIST
85068: PPUSH
85069: CALL_OW 72
85073: ST_TO_ADDR
// if tmp then
85074: LD_VAR 0 6
85078: IFFALSE 85084
// exit ;
85080: POP
85081: POP
85082: GO 85224
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
85084: LD_ADDR_VAR 0 6
85088: PUSH
85089: LD_EXP 45
85093: PUSH
85094: LD_VAR 0 3
85098: ARRAY
85099: PPUSH
85100: LD_INT 2
85102: PUSH
85103: LD_INT 30
85105: PUSH
85106: LD_INT 4
85108: PUSH
85109: EMPTY
85110: LIST
85111: LIST
85112: PUSH
85113: LD_INT 30
85115: PUSH
85116: LD_INT 5
85118: PUSH
85119: EMPTY
85120: LIST
85121: LIST
85122: PUSH
85123: EMPTY
85124: LIST
85125: LIST
85126: LIST
85127: PPUSH
85128: CALL_OW 72
85132: ST_TO_ADDR
// if not tmp then
85133: LD_VAR 0 6
85137: NOT
85138: IFFALSE 85144
// exit ;
85140: POP
85141: POP
85142: GO 85224
// for j in tmp do
85144: LD_ADDR_VAR 0 4
85148: PUSH
85149: LD_VAR 0 6
85153: PUSH
85154: FOR_IN
85155: IFFALSE 85214
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
85157: LD_ADDR_VAR 0 7
85161: PUSH
85162: LD_VAR 0 4
85166: PPUSH
85167: CALL_OW 313
85171: PPUSH
85172: LD_INT 25
85174: PUSH
85175: LD_INT 1
85177: PUSH
85178: EMPTY
85179: LIST
85180: LIST
85181: PPUSH
85182: CALL_OW 72
85186: ST_TO_ADDR
// if units then
85187: LD_VAR 0 7
85191: IFFALSE 85212
// begin ComExitBuilding ( units [ 1 ] ) ;
85193: LD_VAR 0 7
85197: PUSH
85198: LD_INT 1
85200: ARRAY
85201: PPUSH
85202: CALL_OW 122
// exit ;
85206: POP
85207: POP
85208: POP
85209: POP
85210: GO 85224
// end ; end ;
85212: GO 85154
85214: POP
85215: POP
// end ; end ; exit ;
85216: POP
85217: POP
85218: GO 85224
// end ; end ;
85220: GO 84578
85222: POP
85223: POP
// end ;
85224: LD_VAR 0 2
85228: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
85229: LD_INT 0
85231: PPUSH
85232: PPUSH
85233: PPUSH
85234: PPUSH
85235: PPUSH
85236: PPUSH
85237: PPUSH
// if not mc_bases or not skirmish then
85238: LD_EXP 45
85242: NOT
85243: PUSH
85244: LD_EXP 43
85248: NOT
85249: OR
85250: IFFALSE 85254
// exit ;
85252: GO 85485
// btype := GetBType ( building ) ;
85254: LD_ADDR_VAR 0 6
85258: PUSH
85259: LD_VAR 0 1
85263: PPUSH
85264: CALL_OW 266
85268: ST_TO_ADDR
// x := GetX ( building ) ;
85269: LD_ADDR_VAR 0 7
85273: PUSH
85274: LD_VAR 0 1
85278: PPUSH
85279: CALL_OW 250
85283: ST_TO_ADDR
// y := GetY ( building ) ;
85284: LD_ADDR_VAR 0 8
85288: PUSH
85289: LD_VAR 0 1
85293: PPUSH
85294: CALL_OW 251
85298: ST_TO_ADDR
// d := GetDir ( building ) ;
85299: LD_ADDR_VAR 0 9
85303: PUSH
85304: LD_VAR 0 1
85308: PPUSH
85309: CALL_OW 254
85313: ST_TO_ADDR
// for i = 1 to mc_bases do
85314: LD_ADDR_VAR 0 4
85318: PUSH
85319: DOUBLE
85320: LD_INT 1
85322: DEC
85323: ST_TO_ADDR
85324: LD_EXP 45
85328: PUSH
85329: FOR_TO
85330: IFFALSE 85483
// begin if not mc_build_list [ i ] then
85332: LD_EXP 50
85336: PUSH
85337: LD_VAR 0 4
85341: ARRAY
85342: NOT
85343: IFFALSE 85347
// continue ;
85345: GO 85329
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
85347: LD_VAR 0 6
85351: PUSH
85352: LD_VAR 0 7
85356: PUSH
85357: LD_VAR 0 8
85361: PUSH
85362: LD_VAR 0 9
85366: PUSH
85367: EMPTY
85368: LIST
85369: LIST
85370: LIST
85371: LIST
85372: PPUSH
85373: LD_EXP 50
85377: PUSH
85378: LD_VAR 0 4
85382: ARRAY
85383: PUSH
85384: LD_INT 1
85386: ARRAY
85387: PPUSH
85388: CALL 30463 0 2
85392: IFFALSE 85481
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
85394: LD_ADDR_EXP 50
85398: PUSH
85399: LD_EXP 50
85403: PPUSH
85404: LD_VAR 0 4
85408: PPUSH
85409: LD_EXP 50
85413: PUSH
85414: LD_VAR 0 4
85418: ARRAY
85419: PPUSH
85420: LD_INT 1
85422: PPUSH
85423: CALL_OW 3
85427: PPUSH
85428: CALL_OW 1
85432: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
85433: LD_ADDR_EXP 52
85437: PUSH
85438: LD_EXP 52
85442: PPUSH
85443: LD_VAR 0 4
85447: PUSH
85448: LD_EXP 52
85452: PUSH
85453: LD_VAR 0 4
85457: ARRAY
85458: PUSH
85459: LD_INT 1
85461: PLUS
85462: PUSH
85463: EMPTY
85464: LIST
85465: LIST
85466: PPUSH
85467: LD_VAR 0 1
85471: PPUSH
85472: CALL 24294 0 3
85476: ST_TO_ADDR
// exit ;
85477: POP
85478: POP
85479: GO 85485
// end ; end ;
85481: GO 85329
85483: POP
85484: POP
// end ;
85485: LD_VAR 0 3
85489: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
85490: LD_INT 0
85492: PPUSH
85493: PPUSH
85494: PPUSH
// if not mc_bases or not skirmish then
85495: LD_EXP 45
85499: NOT
85500: PUSH
85501: LD_EXP 43
85505: NOT
85506: OR
85507: IFFALSE 85511
// exit ;
85509: GO 85701
// for i = 1 to mc_bases do
85511: LD_ADDR_VAR 0 4
85515: PUSH
85516: DOUBLE
85517: LD_INT 1
85519: DEC
85520: ST_TO_ADDR
85521: LD_EXP 45
85525: PUSH
85526: FOR_TO
85527: IFFALSE 85614
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
85529: LD_VAR 0 1
85533: PUSH
85534: LD_EXP 53
85538: PUSH
85539: LD_VAR 0 4
85543: ARRAY
85544: IN
85545: PUSH
85546: LD_VAR 0 1
85550: PUSH
85551: LD_EXP 54
85555: PUSH
85556: LD_VAR 0 4
85560: ARRAY
85561: IN
85562: NOT
85563: AND
85564: IFFALSE 85612
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
85566: LD_ADDR_EXP 54
85570: PUSH
85571: LD_EXP 54
85575: PPUSH
85576: LD_VAR 0 4
85580: PUSH
85581: LD_EXP 54
85585: PUSH
85586: LD_VAR 0 4
85590: ARRAY
85591: PUSH
85592: LD_INT 1
85594: PLUS
85595: PUSH
85596: EMPTY
85597: LIST
85598: LIST
85599: PPUSH
85600: LD_VAR 0 1
85604: PPUSH
85605: CALL 24294 0 3
85609: ST_TO_ADDR
// break ;
85610: GO 85614
// end ; end ;
85612: GO 85526
85614: POP
85615: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
85616: LD_VAR 0 1
85620: PPUSH
85621: CALL_OW 257
85625: PUSH
85626: LD_EXP 71
85630: IN
85631: PUSH
85632: LD_VAR 0 1
85636: PPUSH
85637: CALL_OW 266
85641: PUSH
85642: LD_INT 5
85644: EQUAL
85645: AND
85646: PUSH
85647: LD_VAR 0 2
85651: PPUSH
85652: CALL_OW 110
85656: PUSH
85657: LD_INT 18
85659: NONEQUAL
85660: AND
85661: IFFALSE 85701
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
85663: LD_VAR 0 2
85667: PPUSH
85668: CALL_OW 257
85672: PUSH
85673: LD_INT 5
85675: PUSH
85676: LD_INT 8
85678: PUSH
85679: LD_INT 9
85681: PUSH
85682: EMPTY
85683: LIST
85684: LIST
85685: LIST
85686: IN
85687: IFFALSE 85701
// SetClass ( unit , 1 ) ;
85689: LD_VAR 0 2
85693: PPUSH
85694: LD_INT 1
85696: PPUSH
85697: CALL_OW 336
// end ;
85701: LD_VAR 0 3
85705: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
85706: LD_INT 0
85708: PPUSH
85709: PPUSH
// if not mc_bases or not skirmish then
85710: LD_EXP 45
85714: NOT
85715: PUSH
85716: LD_EXP 43
85720: NOT
85721: OR
85722: IFFALSE 85726
// exit ;
85724: GO 85842
// if GetLives ( abandoned_vehicle ) > 250 then
85726: LD_VAR 0 2
85730: PPUSH
85731: CALL_OW 256
85735: PUSH
85736: LD_INT 250
85738: GREATER
85739: IFFALSE 85743
// exit ;
85741: GO 85842
// for i = 1 to mc_bases do
85743: LD_ADDR_VAR 0 6
85747: PUSH
85748: DOUBLE
85749: LD_INT 1
85751: DEC
85752: ST_TO_ADDR
85753: LD_EXP 45
85757: PUSH
85758: FOR_TO
85759: IFFALSE 85840
// begin if driver in mc_bases [ i ] then
85761: LD_VAR 0 1
85765: PUSH
85766: LD_EXP 45
85770: PUSH
85771: LD_VAR 0 6
85775: ARRAY
85776: IN
85777: IFFALSE 85838
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
85779: LD_VAR 0 1
85783: PPUSH
85784: LD_EXP 45
85788: PUSH
85789: LD_VAR 0 6
85793: ARRAY
85794: PPUSH
85795: LD_INT 2
85797: PUSH
85798: LD_INT 30
85800: PUSH
85801: LD_INT 0
85803: PUSH
85804: EMPTY
85805: LIST
85806: LIST
85807: PUSH
85808: LD_INT 30
85810: PUSH
85811: LD_INT 1
85813: PUSH
85814: EMPTY
85815: LIST
85816: LIST
85817: PUSH
85818: EMPTY
85819: LIST
85820: LIST
85821: LIST
85822: PPUSH
85823: CALL_OW 72
85827: PUSH
85828: LD_INT 1
85830: ARRAY
85831: PPUSH
85832: CALL_OW 112
// break ;
85836: GO 85840
// end ; end ;
85838: GO 85758
85840: POP
85841: POP
// end ; end_of_file end_of_file
85842: LD_VAR 0 5
85846: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
85847: GO 85849
85849: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
85850: LD_STRING initStreamRollete();
85852: PPUSH
85853: CALL_OW 559
// InitStreamMode ;
85857: CALL 85866 0 0
// DefineStreamItems ( ) ;
85861: CALL 86306 0 0
// end ;
85865: END
// function InitStreamMode ; begin
85866: LD_INT 0
85868: PPUSH
// streamModeActive := false ;
85869: LD_ADDR_EXP 88
85873: PUSH
85874: LD_INT 0
85876: ST_TO_ADDR
// normalCounter := 36 ;
85877: LD_ADDR_EXP 89
85881: PUSH
85882: LD_INT 36
85884: ST_TO_ADDR
// hardcoreCounter := 16 ;
85885: LD_ADDR_EXP 90
85889: PUSH
85890: LD_INT 16
85892: ST_TO_ADDR
// sRocket := false ;
85893: LD_ADDR_EXP 93
85897: PUSH
85898: LD_INT 0
85900: ST_TO_ADDR
// sSpeed := false ;
85901: LD_ADDR_EXP 92
85905: PUSH
85906: LD_INT 0
85908: ST_TO_ADDR
// sEngine := false ;
85909: LD_ADDR_EXP 94
85913: PUSH
85914: LD_INT 0
85916: ST_TO_ADDR
// sSpec := false ;
85917: LD_ADDR_EXP 91
85921: PUSH
85922: LD_INT 0
85924: ST_TO_ADDR
// sLevel := false ;
85925: LD_ADDR_EXP 95
85929: PUSH
85930: LD_INT 0
85932: ST_TO_ADDR
// sArmoury := false ;
85933: LD_ADDR_EXP 96
85937: PUSH
85938: LD_INT 0
85940: ST_TO_ADDR
// sRadar := false ;
85941: LD_ADDR_EXP 97
85945: PUSH
85946: LD_INT 0
85948: ST_TO_ADDR
// sBunker := false ;
85949: LD_ADDR_EXP 98
85953: PUSH
85954: LD_INT 0
85956: ST_TO_ADDR
// sHack := false ;
85957: LD_ADDR_EXP 99
85961: PUSH
85962: LD_INT 0
85964: ST_TO_ADDR
// sFire := false ;
85965: LD_ADDR_EXP 100
85969: PUSH
85970: LD_INT 0
85972: ST_TO_ADDR
// sRefresh := false ;
85973: LD_ADDR_EXP 101
85977: PUSH
85978: LD_INT 0
85980: ST_TO_ADDR
// sExp := false ;
85981: LD_ADDR_EXP 102
85985: PUSH
85986: LD_INT 0
85988: ST_TO_ADDR
// sDepot := false ;
85989: LD_ADDR_EXP 103
85993: PUSH
85994: LD_INT 0
85996: ST_TO_ADDR
// sFlag := false ;
85997: LD_ADDR_EXP 104
86001: PUSH
86002: LD_INT 0
86004: ST_TO_ADDR
// sKamikadze := false ;
86005: LD_ADDR_EXP 112
86009: PUSH
86010: LD_INT 0
86012: ST_TO_ADDR
// sTroll := false ;
86013: LD_ADDR_EXP 113
86017: PUSH
86018: LD_INT 0
86020: ST_TO_ADDR
// sSlow := false ;
86021: LD_ADDR_EXP 114
86025: PUSH
86026: LD_INT 0
86028: ST_TO_ADDR
// sLack := false ;
86029: LD_ADDR_EXP 115
86033: PUSH
86034: LD_INT 0
86036: ST_TO_ADDR
// sTank := false ;
86037: LD_ADDR_EXP 117
86041: PUSH
86042: LD_INT 0
86044: ST_TO_ADDR
// sRemote := false ;
86045: LD_ADDR_EXP 118
86049: PUSH
86050: LD_INT 0
86052: ST_TO_ADDR
// sPowell := false ;
86053: LD_ADDR_EXP 119
86057: PUSH
86058: LD_INT 0
86060: ST_TO_ADDR
// sTeleport := false ;
86061: LD_ADDR_EXP 122
86065: PUSH
86066: LD_INT 0
86068: ST_TO_ADDR
// sOilTower := false ;
86069: LD_ADDR_EXP 124
86073: PUSH
86074: LD_INT 0
86076: ST_TO_ADDR
// sShovel := false ;
86077: LD_ADDR_EXP 125
86081: PUSH
86082: LD_INT 0
86084: ST_TO_ADDR
// sSheik := false ;
86085: LD_ADDR_EXP 126
86089: PUSH
86090: LD_INT 0
86092: ST_TO_ADDR
// sEarthquake := false ;
86093: LD_ADDR_EXP 128
86097: PUSH
86098: LD_INT 0
86100: ST_TO_ADDR
// sAI := false ;
86101: LD_ADDR_EXP 129
86105: PUSH
86106: LD_INT 0
86108: ST_TO_ADDR
// sCargo := false ;
86109: LD_ADDR_EXP 132
86113: PUSH
86114: LD_INT 0
86116: ST_TO_ADDR
// sDLaser := false ;
86117: LD_ADDR_EXP 133
86121: PUSH
86122: LD_INT 0
86124: ST_TO_ADDR
// sExchange := false ;
86125: LD_ADDR_EXP 134
86129: PUSH
86130: LD_INT 0
86132: ST_TO_ADDR
// sFac := false ;
86133: LD_ADDR_EXP 135
86137: PUSH
86138: LD_INT 0
86140: ST_TO_ADDR
// sPower := false ;
86141: LD_ADDR_EXP 136
86145: PUSH
86146: LD_INT 0
86148: ST_TO_ADDR
// sRandom := false ;
86149: LD_ADDR_EXP 137
86153: PUSH
86154: LD_INT 0
86156: ST_TO_ADDR
// sShield := false ;
86157: LD_ADDR_EXP 138
86161: PUSH
86162: LD_INT 0
86164: ST_TO_ADDR
// sTime := false ;
86165: LD_ADDR_EXP 139
86169: PUSH
86170: LD_INT 0
86172: ST_TO_ADDR
// sTools := false ;
86173: LD_ADDR_EXP 140
86177: PUSH
86178: LD_INT 0
86180: ST_TO_ADDR
// sSold := false ;
86181: LD_ADDR_EXP 105
86185: PUSH
86186: LD_INT 0
86188: ST_TO_ADDR
// sDiff := false ;
86189: LD_ADDR_EXP 106
86193: PUSH
86194: LD_INT 0
86196: ST_TO_ADDR
// sFog := false ;
86197: LD_ADDR_EXP 109
86201: PUSH
86202: LD_INT 0
86204: ST_TO_ADDR
// sReset := false ;
86205: LD_ADDR_EXP 110
86209: PUSH
86210: LD_INT 0
86212: ST_TO_ADDR
// sSun := false ;
86213: LD_ADDR_EXP 111
86217: PUSH
86218: LD_INT 0
86220: ST_TO_ADDR
// sTiger := false ;
86221: LD_ADDR_EXP 107
86225: PUSH
86226: LD_INT 0
86228: ST_TO_ADDR
// sBomb := false ;
86229: LD_ADDR_EXP 108
86233: PUSH
86234: LD_INT 0
86236: ST_TO_ADDR
// sWound := false ;
86237: LD_ADDR_EXP 116
86241: PUSH
86242: LD_INT 0
86244: ST_TO_ADDR
// sBetray := false ;
86245: LD_ADDR_EXP 120
86249: PUSH
86250: LD_INT 0
86252: ST_TO_ADDR
// sContamin := false ;
86253: LD_ADDR_EXP 121
86257: PUSH
86258: LD_INT 0
86260: ST_TO_ADDR
// sOil := false ;
86261: LD_ADDR_EXP 123
86265: PUSH
86266: LD_INT 0
86268: ST_TO_ADDR
// sStu := false ;
86269: LD_ADDR_EXP 127
86273: PUSH
86274: LD_INT 0
86276: ST_TO_ADDR
// sBazooka := false ;
86277: LD_ADDR_EXP 130
86281: PUSH
86282: LD_INT 0
86284: ST_TO_ADDR
// sMortar := false ;
86285: LD_ADDR_EXP 131
86289: PUSH
86290: LD_INT 0
86292: ST_TO_ADDR
// sRanger := false ;
86293: LD_ADDR_EXP 141
86297: PUSH
86298: LD_INT 0
86300: ST_TO_ADDR
// end ;
86301: LD_VAR 0 1
86305: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
86306: LD_INT 0
86308: PPUSH
86309: PPUSH
86310: PPUSH
86311: PPUSH
86312: PPUSH
// result := [ ] ;
86313: LD_ADDR_VAR 0 1
86317: PUSH
86318: EMPTY
86319: ST_TO_ADDR
// if campaign_id = 1 then
86320: LD_OWVAR 69
86324: PUSH
86325: LD_INT 1
86327: EQUAL
86328: IFFALSE 89266
// begin case mission_number of 1 :
86330: LD_OWVAR 70
86334: PUSH
86335: LD_INT 1
86337: DOUBLE
86338: EQUAL
86339: IFTRUE 86343
86341: GO 86407
86343: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
86344: LD_ADDR_VAR 0 1
86348: PUSH
86349: LD_INT 2
86351: PUSH
86352: LD_INT 4
86354: PUSH
86355: LD_INT 11
86357: PUSH
86358: LD_INT 12
86360: PUSH
86361: LD_INT 15
86363: PUSH
86364: LD_INT 16
86366: PUSH
86367: LD_INT 22
86369: PUSH
86370: LD_INT 23
86372: PUSH
86373: LD_INT 26
86375: PUSH
86376: EMPTY
86377: LIST
86378: LIST
86379: LIST
86380: LIST
86381: LIST
86382: LIST
86383: LIST
86384: LIST
86385: LIST
86386: PUSH
86387: LD_INT 101
86389: PUSH
86390: LD_INT 102
86392: PUSH
86393: LD_INT 106
86395: PUSH
86396: EMPTY
86397: LIST
86398: LIST
86399: LIST
86400: PUSH
86401: EMPTY
86402: LIST
86403: LIST
86404: ST_TO_ADDR
86405: GO 89264
86407: LD_INT 2
86409: DOUBLE
86410: EQUAL
86411: IFTRUE 86415
86413: GO 86487
86415: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
86416: LD_ADDR_VAR 0 1
86420: PUSH
86421: LD_INT 2
86423: PUSH
86424: LD_INT 4
86426: PUSH
86427: LD_INT 11
86429: PUSH
86430: LD_INT 12
86432: PUSH
86433: LD_INT 15
86435: PUSH
86436: LD_INT 16
86438: PUSH
86439: LD_INT 22
86441: PUSH
86442: LD_INT 23
86444: PUSH
86445: LD_INT 26
86447: PUSH
86448: EMPTY
86449: LIST
86450: LIST
86451: LIST
86452: LIST
86453: LIST
86454: LIST
86455: LIST
86456: LIST
86457: LIST
86458: PUSH
86459: LD_INT 101
86461: PUSH
86462: LD_INT 102
86464: PUSH
86465: LD_INT 105
86467: PUSH
86468: LD_INT 106
86470: PUSH
86471: LD_INT 108
86473: PUSH
86474: EMPTY
86475: LIST
86476: LIST
86477: LIST
86478: LIST
86479: LIST
86480: PUSH
86481: EMPTY
86482: LIST
86483: LIST
86484: ST_TO_ADDR
86485: GO 89264
86487: LD_INT 3
86489: DOUBLE
86490: EQUAL
86491: IFTRUE 86495
86493: GO 86571
86495: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
86496: LD_ADDR_VAR 0 1
86500: PUSH
86501: LD_INT 2
86503: PUSH
86504: LD_INT 4
86506: PUSH
86507: LD_INT 5
86509: PUSH
86510: LD_INT 11
86512: PUSH
86513: LD_INT 12
86515: PUSH
86516: LD_INT 15
86518: PUSH
86519: LD_INT 16
86521: PUSH
86522: LD_INT 22
86524: PUSH
86525: LD_INT 26
86527: PUSH
86528: LD_INT 36
86530: PUSH
86531: EMPTY
86532: LIST
86533: LIST
86534: LIST
86535: LIST
86536: LIST
86537: LIST
86538: LIST
86539: LIST
86540: LIST
86541: LIST
86542: PUSH
86543: LD_INT 101
86545: PUSH
86546: LD_INT 102
86548: PUSH
86549: LD_INT 105
86551: PUSH
86552: LD_INT 106
86554: PUSH
86555: LD_INT 108
86557: PUSH
86558: EMPTY
86559: LIST
86560: LIST
86561: LIST
86562: LIST
86563: LIST
86564: PUSH
86565: EMPTY
86566: LIST
86567: LIST
86568: ST_TO_ADDR
86569: GO 89264
86571: LD_INT 4
86573: DOUBLE
86574: EQUAL
86575: IFTRUE 86579
86577: GO 86663
86579: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
86580: LD_ADDR_VAR 0 1
86584: PUSH
86585: LD_INT 2
86587: PUSH
86588: LD_INT 4
86590: PUSH
86591: LD_INT 5
86593: PUSH
86594: LD_INT 8
86596: PUSH
86597: LD_INT 11
86599: PUSH
86600: LD_INT 12
86602: PUSH
86603: LD_INT 15
86605: PUSH
86606: LD_INT 16
86608: PUSH
86609: LD_INT 22
86611: PUSH
86612: LD_INT 23
86614: PUSH
86615: LD_INT 26
86617: PUSH
86618: LD_INT 36
86620: PUSH
86621: EMPTY
86622: LIST
86623: LIST
86624: LIST
86625: LIST
86626: LIST
86627: LIST
86628: LIST
86629: LIST
86630: LIST
86631: LIST
86632: LIST
86633: LIST
86634: PUSH
86635: LD_INT 101
86637: PUSH
86638: LD_INT 102
86640: PUSH
86641: LD_INT 105
86643: PUSH
86644: LD_INT 106
86646: PUSH
86647: LD_INT 108
86649: PUSH
86650: EMPTY
86651: LIST
86652: LIST
86653: LIST
86654: LIST
86655: LIST
86656: PUSH
86657: EMPTY
86658: LIST
86659: LIST
86660: ST_TO_ADDR
86661: GO 89264
86663: LD_INT 5
86665: DOUBLE
86666: EQUAL
86667: IFTRUE 86671
86669: GO 86771
86671: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
86672: LD_ADDR_VAR 0 1
86676: PUSH
86677: LD_INT 2
86679: PUSH
86680: LD_INT 4
86682: PUSH
86683: LD_INT 5
86685: PUSH
86686: LD_INT 6
86688: PUSH
86689: LD_INT 8
86691: PUSH
86692: LD_INT 11
86694: PUSH
86695: LD_INT 12
86697: PUSH
86698: LD_INT 15
86700: PUSH
86701: LD_INT 16
86703: PUSH
86704: LD_INT 22
86706: PUSH
86707: LD_INT 23
86709: PUSH
86710: LD_INT 25
86712: PUSH
86713: LD_INT 26
86715: PUSH
86716: LD_INT 36
86718: PUSH
86719: EMPTY
86720: LIST
86721: LIST
86722: LIST
86723: LIST
86724: LIST
86725: LIST
86726: LIST
86727: LIST
86728: LIST
86729: LIST
86730: LIST
86731: LIST
86732: LIST
86733: LIST
86734: PUSH
86735: LD_INT 101
86737: PUSH
86738: LD_INT 102
86740: PUSH
86741: LD_INT 105
86743: PUSH
86744: LD_INT 106
86746: PUSH
86747: LD_INT 108
86749: PUSH
86750: LD_INT 109
86752: PUSH
86753: LD_INT 112
86755: PUSH
86756: EMPTY
86757: LIST
86758: LIST
86759: LIST
86760: LIST
86761: LIST
86762: LIST
86763: LIST
86764: PUSH
86765: EMPTY
86766: LIST
86767: LIST
86768: ST_TO_ADDR
86769: GO 89264
86771: LD_INT 6
86773: DOUBLE
86774: EQUAL
86775: IFTRUE 86779
86777: GO 86899
86779: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
86780: LD_ADDR_VAR 0 1
86784: PUSH
86785: LD_INT 2
86787: PUSH
86788: LD_INT 4
86790: PUSH
86791: LD_INT 5
86793: PUSH
86794: LD_INT 6
86796: PUSH
86797: LD_INT 8
86799: PUSH
86800: LD_INT 11
86802: PUSH
86803: LD_INT 12
86805: PUSH
86806: LD_INT 15
86808: PUSH
86809: LD_INT 16
86811: PUSH
86812: LD_INT 20
86814: PUSH
86815: LD_INT 21
86817: PUSH
86818: LD_INT 22
86820: PUSH
86821: LD_INT 23
86823: PUSH
86824: LD_INT 25
86826: PUSH
86827: LD_INT 26
86829: PUSH
86830: LD_INT 30
86832: PUSH
86833: LD_INT 31
86835: PUSH
86836: LD_INT 32
86838: PUSH
86839: LD_INT 36
86841: PUSH
86842: EMPTY
86843: LIST
86844: LIST
86845: LIST
86846: LIST
86847: LIST
86848: LIST
86849: LIST
86850: LIST
86851: LIST
86852: LIST
86853: LIST
86854: LIST
86855: LIST
86856: LIST
86857: LIST
86858: LIST
86859: LIST
86860: LIST
86861: LIST
86862: PUSH
86863: LD_INT 101
86865: PUSH
86866: LD_INT 102
86868: PUSH
86869: LD_INT 105
86871: PUSH
86872: LD_INT 106
86874: PUSH
86875: LD_INT 108
86877: PUSH
86878: LD_INT 109
86880: PUSH
86881: LD_INT 112
86883: PUSH
86884: EMPTY
86885: LIST
86886: LIST
86887: LIST
86888: LIST
86889: LIST
86890: LIST
86891: LIST
86892: PUSH
86893: EMPTY
86894: LIST
86895: LIST
86896: ST_TO_ADDR
86897: GO 89264
86899: LD_INT 7
86901: DOUBLE
86902: EQUAL
86903: IFTRUE 86907
86905: GO 87007
86907: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
86908: LD_ADDR_VAR 0 1
86912: PUSH
86913: LD_INT 2
86915: PUSH
86916: LD_INT 4
86918: PUSH
86919: LD_INT 5
86921: PUSH
86922: LD_INT 7
86924: PUSH
86925: LD_INT 11
86927: PUSH
86928: LD_INT 12
86930: PUSH
86931: LD_INT 15
86933: PUSH
86934: LD_INT 16
86936: PUSH
86937: LD_INT 20
86939: PUSH
86940: LD_INT 21
86942: PUSH
86943: LD_INT 22
86945: PUSH
86946: LD_INT 23
86948: PUSH
86949: LD_INT 25
86951: PUSH
86952: LD_INT 26
86954: PUSH
86955: EMPTY
86956: LIST
86957: LIST
86958: LIST
86959: LIST
86960: LIST
86961: LIST
86962: LIST
86963: LIST
86964: LIST
86965: LIST
86966: LIST
86967: LIST
86968: LIST
86969: LIST
86970: PUSH
86971: LD_INT 101
86973: PUSH
86974: LD_INT 102
86976: PUSH
86977: LD_INT 103
86979: PUSH
86980: LD_INT 105
86982: PUSH
86983: LD_INT 106
86985: PUSH
86986: LD_INT 108
86988: PUSH
86989: LD_INT 112
86991: PUSH
86992: EMPTY
86993: LIST
86994: LIST
86995: LIST
86996: LIST
86997: LIST
86998: LIST
86999: LIST
87000: PUSH
87001: EMPTY
87002: LIST
87003: LIST
87004: ST_TO_ADDR
87005: GO 89264
87007: LD_INT 8
87009: DOUBLE
87010: EQUAL
87011: IFTRUE 87015
87013: GO 87143
87015: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
87016: LD_ADDR_VAR 0 1
87020: PUSH
87021: LD_INT 2
87023: PUSH
87024: LD_INT 4
87026: PUSH
87027: LD_INT 5
87029: PUSH
87030: LD_INT 6
87032: PUSH
87033: LD_INT 7
87035: PUSH
87036: LD_INT 8
87038: PUSH
87039: LD_INT 11
87041: PUSH
87042: LD_INT 12
87044: PUSH
87045: LD_INT 15
87047: PUSH
87048: LD_INT 16
87050: PUSH
87051: LD_INT 20
87053: PUSH
87054: LD_INT 21
87056: PUSH
87057: LD_INT 22
87059: PUSH
87060: LD_INT 23
87062: PUSH
87063: LD_INT 25
87065: PUSH
87066: LD_INT 26
87068: PUSH
87069: LD_INT 30
87071: PUSH
87072: LD_INT 31
87074: PUSH
87075: LD_INT 32
87077: PUSH
87078: LD_INT 36
87080: PUSH
87081: EMPTY
87082: LIST
87083: LIST
87084: LIST
87085: LIST
87086: LIST
87087: LIST
87088: LIST
87089: LIST
87090: LIST
87091: LIST
87092: LIST
87093: LIST
87094: LIST
87095: LIST
87096: LIST
87097: LIST
87098: LIST
87099: LIST
87100: LIST
87101: LIST
87102: PUSH
87103: LD_INT 101
87105: PUSH
87106: LD_INT 102
87108: PUSH
87109: LD_INT 103
87111: PUSH
87112: LD_INT 105
87114: PUSH
87115: LD_INT 106
87117: PUSH
87118: LD_INT 108
87120: PUSH
87121: LD_INT 109
87123: PUSH
87124: LD_INT 112
87126: PUSH
87127: EMPTY
87128: LIST
87129: LIST
87130: LIST
87131: LIST
87132: LIST
87133: LIST
87134: LIST
87135: LIST
87136: PUSH
87137: EMPTY
87138: LIST
87139: LIST
87140: ST_TO_ADDR
87141: GO 89264
87143: LD_INT 9
87145: DOUBLE
87146: EQUAL
87147: IFTRUE 87151
87149: GO 87287
87151: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
87152: LD_ADDR_VAR 0 1
87156: PUSH
87157: LD_INT 2
87159: PUSH
87160: LD_INT 4
87162: PUSH
87163: LD_INT 5
87165: PUSH
87166: LD_INT 6
87168: PUSH
87169: LD_INT 7
87171: PUSH
87172: LD_INT 8
87174: PUSH
87175: LD_INT 11
87177: PUSH
87178: LD_INT 12
87180: PUSH
87181: LD_INT 15
87183: PUSH
87184: LD_INT 16
87186: PUSH
87187: LD_INT 20
87189: PUSH
87190: LD_INT 21
87192: PUSH
87193: LD_INT 22
87195: PUSH
87196: LD_INT 23
87198: PUSH
87199: LD_INT 25
87201: PUSH
87202: LD_INT 26
87204: PUSH
87205: LD_INT 28
87207: PUSH
87208: LD_INT 30
87210: PUSH
87211: LD_INT 31
87213: PUSH
87214: LD_INT 32
87216: PUSH
87217: LD_INT 36
87219: PUSH
87220: EMPTY
87221: LIST
87222: LIST
87223: LIST
87224: LIST
87225: LIST
87226: LIST
87227: LIST
87228: LIST
87229: LIST
87230: LIST
87231: LIST
87232: LIST
87233: LIST
87234: LIST
87235: LIST
87236: LIST
87237: LIST
87238: LIST
87239: LIST
87240: LIST
87241: LIST
87242: PUSH
87243: LD_INT 101
87245: PUSH
87246: LD_INT 102
87248: PUSH
87249: LD_INT 103
87251: PUSH
87252: LD_INT 105
87254: PUSH
87255: LD_INT 106
87257: PUSH
87258: LD_INT 108
87260: PUSH
87261: LD_INT 109
87263: PUSH
87264: LD_INT 112
87266: PUSH
87267: LD_INT 114
87269: PUSH
87270: EMPTY
87271: LIST
87272: LIST
87273: LIST
87274: LIST
87275: LIST
87276: LIST
87277: LIST
87278: LIST
87279: LIST
87280: PUSH
87281: EMPTY
87282: LIST
87283: LIST
87284: ST_TO_ADDR
87285: GO 89264
87287: LD_INT 10
87289: DOUBLE
87290: EQUAL
87291: IFTRUE 87295
87293: GO 87479
87295: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
87296: LD_ADDR_VAR 0 1
87300: PUSH
87301: LD_INT 2
87303: PUSH
87304: LD_INT 4
87306: PUSH
87307: LD_INT 5
87309: PUSH
87310: LD_INT 6
87312: PUSH
87313: LD_INT 7
87315: PUSH
87316: LD_INT 8
87318: PUSH
87319: LD_INT 9
87321: PUSH
87322: LD_INT 10
87324: PUSH
87325: LD_INT 11
87327: PUSH
87328: LD_INT 12
87330: PUSH
87331: LD_INT 13
87333: PUSH
87334: LD_INT 14
87336: PUSH
87337: LD_INT 15
87339: PUSH
87340: LD_INT 16
87342: PUSH
87343: LD_INT 17
87345: PUSH
87346: LD_INT 18
87348: PUSH
87349: LD_INT 19
87351: PUSH
87352: LD_INT 20
87354: PUSH
87355: LD_INT 21
87357: PUSH
87358: LD_INT 22
87360: PUSH
87361: LD_INT 23
87363: PUSH
87364: LD_INT 24
87366: PUSH
87367: LD_INT 25
87369: PUSH
87370: LD_INT 26
87372: PUSH
87373: LD_INT 28
87375: PUSH
87376: LD_INT 30
87378: PUSH
87379: LD_INT 31
87381: PUSH
87382: LD_INT 32
87384: PUSH
87385: LD_INT 36
87387: PUSH
87388: EMPTY
87389: LIST
87390: LIST
87391: LIST
87392: LIST
87393: LIST
87394: LIST
87395: LIST
87396: LIST
87397: LIST
87398: LIST
87399: LIST
87400: LIST
87401: LIST
87402: LIST
87403: LIST
87404: LIST
87405: LIST
87406: LIST
87407: LIST
87408: LIST
87409: LIST
87410: LIST
87411: LIST
87412: LIST
87413: LIST
87414: LIST
87415: LIST
87416: LIST
87417: LIST
87418: PUSH
87419: LD_INT 101
87421: PUSH
87422: LD_INT 102
87424: PUSH
87425: LD_INT 103
87427: PUSH
87428: LD_INT 104
87430: PUSH
87431: LD_INT 105
87433: PUSH
87434: LD_INT 106
87436: PUSH
87437: LD_INT 107
87439: PUSH
87440: LD_INT 108
87442: PUSH
87443: LD_INT 109
87445: PUSH
87446: LD_INT 110
87448: PUSH
87449: LD_INT 111
87451: PUSH
87452: LD_INT 112
87454: PUSH
87455: LD_INT 114
87457: PUSH
87458: EMPTY
87459: LIST
87460: LIST
87461: LIST
87462: LIST
87463: LIST
87464: LIST
87465: LIST
87466: LIST
87467: LIST
87468: LIST
87469: LIST
87470: LIST
87471: LIST
87472: PUSH
87473: EMPTY
87474: LIST
87475: LIST
87476: ST_TO_ADDR
87477: GO 89264
87479: LD_INT 11
87481: DOUBLE
87482: EQUAL
87483: IFTRUE 87487
87485: GO 87679
87487: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
87488: LD_ADDR_VAR 0 1
87492: PUSH
87493: LD_INT 2
87495: PUSH
87496: LD_INT 3
87498: PUSH
87499: LD_INT 4
87501: PUSH
87502: LD_INT 5
87504: PUSH
87505: LD_INT 6
87507: PUSH
87508: LD_INT 7
87510: PUSH
87511: LD_INT 8
87513: PUSH
87514: LD_INT 9
87516: PUSH
87517: LD_INT 10
87519: PUSH
87520: LD_INT 11
87522: PUSH
87523: LD_INT 12
87525: PUSH
87526: LD_INT 13
87528: PUSH
87529: LD_INT 14
87531: PUSH
87532: LD_INT 15
87534: PUSH
87535: LD_INT 16
87537: PUSH
87538: LD_INT 17
87540: PUSH
87541: LD_INT 18
87543: PUSH
87544: LD_INT 19
87546: PUSH
87547: LD_INT 20
87549: PUSH
87550: LD_INT 21
87552: PUSH
87553: LD_INT 22
87555: PUSH
87556: LD_INT 23
87558: PUSH
87559: LD_INT 24
87561: PUSH
87562: LD_INT 25
87564: PUSH
87565: LD_INT 26
87567: PUSH
87568: LD_INT 28
87570: PUSH
87571: LD_INT 30
87573: PUSH
87574: LD_INT 31
87576: PUSH
87577: LD_INT 32
87579: PUSH
87580: LD_INT 34
87582: PUSH
87583: LD_INT 36
87585: PUSH
87586: EMPTY
87587: LIST
87588: LIST
87589: LIST
87590: LIST
87591: LIST
87592: LIST
87593: LIST
87594: LIST
87595: LIST
87596: LIST
87597: LIST
87598: LIST
87599: LIST
87600: LIST
87601: LIST
87602: LIST
87603: LIST
87604: LIST
87605: LIST
87606: LIST
87607: LIST
87608: LIST
87609: LIST
87610: LIST
87611: LIST
87612: LIST
87613: LIST
87614: LIST
87615: LIST
87616: LIST
87617: LIST
87618: PUSH
87619: LD_INT 101
87621: PUSH
87622: LD_INT 102
87624: PUSH
87625: LD_INT 103
87627: PUSH
87628: LD_INT 104
87630: PUSH
87631: LD_INT 105
87633: PUSH
87634: LD_INT 106
87636: PUSH
87637: LD_INT 107
87639: PUSH
87640: LD_INT 108
87642: PUSH
87643: LD_INT 109
87645: PUSH
87646: LD_INT 110
87648: PUSH
87649: LD_INT 111
87651: PUSH
87652: LD_INT 112
87654: PUSH
87655: LD_INT 114
87657: PUSH
87658: EMPTY
87659: LIST
87660: LIST
87661: LIST
87662: LIST
87663: LIST
87664: LIST
87665: LIST
87666: LIST
87667: LIST
87668: LIST
87669: LIST
87670: LIST
87671: LIST
87672: PUSH
87673: EMPTY
87674: LIST
87675: LIST
87676: ST_TO_ADDR
87677: GO 89264
87679: LD_INT 12
87681: DOUBLE
87682: EQUAL
87683: IFTRUE 87687
87685: GO 87895
87687: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
87688: LD_ADDR_VAR 0 1
87692: PUSH
87693: LD_INT 1
87695: PUSH
87696: LD_INT 2
87698: PUSH
87699: LD_INT 3
87701: PUSH
87702: LD_INT 4
87704: PUSH
87705: LD_INT 5
87707: PUSH
87708: LD_INT 6
87710: PUSH
87711: LD_INT 7
87713: PUSH
87714: LD_INT 8
87716: PUSH
87717: LD_INT 9
87719: PUSH
87720: LD_INT 10
87722: PUSH
87723: LD_INT 11
87725: PUSH
87726: LD_INT 12
87728: PUSH
87729: LD_INT 13
87731: PUSH
87732: LD_INT 14
87734: PUSH
87735: LD_INT 15
87737: PUSH
87738: LD_INT 16
87740: PUSH
87741: LD_INT 17
87743: PUSH
87744: LD_INT 18
87746: PUSH
87747: LD_INT 19
87749: PUSH
87750: LD_INT 20
87752: PUSH
87753: LD_INT 21
87755: PUSH
87756: LD_INT 22
87758: PUSH
87759: LD_INT 23
87761: PUSH
87762: LD_INT 24
87764: PUSH
87765: LD_INT 25
87767: PUSH
87768: LD_INT 26
87770: PUSH
87771: LD_INT 27
87773: PUSH
87774: LD_INT 28
87776: PUSH
87777: LD_INT 30
87779: PUSH
87780: LD_INT 31
87782: PUSH
87783: LD_INT 32
87785: PUSH
87786: LD_INT 33
87788: PUSH
87789: LD_INT 34
87791: PUSH
87792: LD_INT 36
87794: PUSH
87795: EMPTY
87796: LIST
87797: LIST
87798: LIST
87799: LIST
87800: LIST
87801: LIST
87802: LIST
87803: LIST
87804: LIST
87805: LIST
87806: LIST
87807: LIST
87808: LIST
87809: LIST
87810: LIST
87811: LIST
87812: LIST
87813: LIST
87814: LIST
87815: LIST
87816: LIST
87817: LIST
87818: LIST
87819: LIST
87820: LIST
87821: LIST
87822: LIST
87823: LIST
87824: LIST
87825: LIST
87826: LIST
87827: LIST
87828: LIST
87829: LIST
87830: PUSH
87831: LD_INT 101
87833: PUSH
87834: LD_INT 102
87836: PUSH
87837: LD_INT 103
87839: PUSH
87840: LD_INT 104
87842: PUSH
87843: LD_INT 105
87845: PUSH
87846: LD_INT 106
87848: PUSH
87849: LD_INT 107
87851: PUSH
87852: LD_INT 108
87854: PUSH
87855: LD_INT 109
87857: PUSH
87858: LD_INT 110
87860: PUSH
87861: LD_INT 111
87863: PUSH
87864: LD_INT 112
87866: PUSH
87867: LD_INT 113
87869: PUSH
87870: LD_INT 114
87872: PUSH
87873: EMPTY
87874: LIST
87875: LIST
87876: LIST
87877: LIST
87878: LIST
87879: LIST
87880: LIST
87881: LIST
87882: LIST
87883: LIST
87884: LIST
87885: LIST
87886: LIST
87887: LIST
87888: PUSH
87889: EMPTY
87890: LIST
87891: LIST
87892: ST_TO_ADDR
87893: GO 89264
87895: LD_INT 13
87897: DOUBLE
87898: EQUAL
87899: IFTRUE 87903
87901: GO 88099
87903: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
87904: LD_ADDR_VAR 0 1
87908: PUSH
87909: LD_INT 1
87911: PUSH
87912: LD_INT 2
87914: PUSH
87915: LD_INT 3
87917: PUSH
87918: LD_INT 4
87920: PUSH
87921: LD_INT 5
87923: PUSH
87924: LD_INT 8
87926: PUSH
87927: LD_INT 9
87929: PUSH
87930: LD_INT 10
87932: PUSH
87933: LD_INT 11
87935: PUSH
87936: LD_INT 12
87938: PUSH
87939: LD_INT 14
87941: PUSH
87942: LD_INT 15
87944: PUSH
87945: LD_INT 16
87947: PUSH
87948: LD_INT 17
87950: PUSH
87951: LD_INT 18
87953: PUSH
87954: LD_INT 19
87956: PUSH
87957: LD_INT 20
87959: PUSH
87960: LD_INT 21
87962: PUSH
87963: LD_INT 22
87965: PUSH
87966: LD_INT 23
87968: PUSH
87969: LD_INT 24
87971: PUSH
87972: LD_INT 25
87974: PUSH
87975: LD_INT 26
87977: PUSH
87978: LD_INT 27
87980: PUSH
87981: LD_INT 28
87983: PUSH
87984: LD_INT 30
87986: PUSH
87987: LD_INT 31
87989: PUSH
87990: LD_INT 32
87992: PUSH
87993: LD_INT 33
87995: PUSH
87996: LD_INT 34
87998: PUSH
87999: LD_INT 36
88001: PUSH
88002: EMPTY
88003: LIST
88004: LIST
88005: LIST
88006: LIST
88007: LIST
88008: LIST
88009: LIST
88010: LIST
88011: LIST
88012: LIST
88013: LIST
88014: LIST
88015: LIST
88016: LIST
88017: LIST
88018: LIST
88019: LIST
88020: LIST
88021: LIST
88022: LIST
88023: LIST
88024: LIST
88025: LIST
88026: LIST
88027: LIST
88028: LIST
88029: LIST
88030: LIST
88031: LIST
88032: LIST
88033: LIST
88034: PUSH
88035: LD_INT 101
88037: PUSH
88038: LD_INT 102
88040: PUSH
88041: LD_INT 103
88043: PUSH
88044: LD_INT 104
88046: PUSH
88047: LD_INT 105
88049: PUSH
88050: LD_INT 106
88052: PUSH
88053: LD_INT 107
88055: PUSH
88056: LD_INT 108
88058: PUSH
88059: LD_INT 109
88061: PUSH
88062: LD_INT 110
88064: PUSH
88065: LD_INT 111
88067: PUSH
88068: LD_INT 112
88070: PUSH
88071: LD_INT 113
88073: PUSH
88074: LD_INT 114
88076: PUSH
88077: EMPTY
88078: LIST
88079: LIST
88080: LIST
88081: LIST
88082: LIST
88083: LIST
88084: LIST
88085: LIST
88086: LIST
88087: LIST
88088: LIST
88089: LIST
88090: LIST
88091: LIST
88092: PUSH
88093: EMPTY
88094: LIST
88095: LIST
88096: ST_TO_ADDR
88097: GO 89264
88099: LD_INT 14
88101: DOUBLE
88102: EQUAL
88103: IFTRUE 88107
88105: GO 88319
88107: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
88108: LD_ADDR_VAR 0 1
88112: PUSH
88113: LD_INT 1
88115: PUSH
88116: LD_INT 2
88118: PUSH
88119: LD_INT 3
88121: PUSH
88122: LD_INT 4
88124: PUSH
88125: LD_INT 5
88127: PUSH
88128: LD_INT 6
88130: PUSH
88131: LD_INT 7
88133: PUSH
88134: LD_INT 8
88136: PUSH
88137: LD_INT 9
88139: PUSH
88140: LD_INT 10
88142: PUSH
88143: LD_INT 11
88145: PUSH
88146: LD_INT 12
88148: PUSH
88149: LD_INT 13
88151: PUSH
88152: LD_INT 14
88154: PUSH
88155: LD_INT 15
88157: PUSH
88158: LD_INT 16
88160: PUSH
88161: LD_INT 17
88163: PUSH
88164: LD_INT 18
88166: PUSH
88167: LD_INT 19
88169: PUSH
88170: LD_INT 20
88172: PUSH
88173: LD_INT 21
88175: PUSH
88176: LD_INT 22
88178: PUSH
88179: LD_INT 23
88181: PUSH
88182: LD_INT 24
88184: PUSH
88185: LD_INT 25
88187: PUSH
88188: LD_INT 26
88190: PUSH
88191: LD_INT 27
88193: PUSH
88194: LD_INT 28
88196: PUSH
88197: LD_INT 29
88199: PUSH
88200: LD_INT 30
88202: PUSH
88203: LD_INT 31
88205: PUSH
88206: LD_INT 32
88208: PUSH
88209: LD_INT 33
88211: PUSH
88212: LD_INT 34
88214: PUSH
88215: LD_INT 36
88217: PUSH
88218: EMPTY
88219: LIST
88220: LIST
88221: LIST
88222: LIST
88223: LIST
88224: LIST
88225: LIST
88226: LIST
88227: LIST
88228: LIST
88229: LIST
88230: LIST
88231: LIST
88232: LIST
88233: LIST
88234: LIST
88235: LIST
88236: LIST
88237: LIST
88238: LIST
88239: LIST
88240: LIST
88241: LIST
88242: LIST
88243: LIST
88244: LIST
88245: LIST
88246: LIST
88247: LIST
88248: LIST
88249: LIST
88250: LIST
88251: LIST
88252: LIST
88253: LIST
88254: PUSH
88255: LD_INT 101
88257: PUSH
88258: LD_INT 102
88260: PUSH
88261: LD_INT 103
88263: PUSH
88264: LD_INT 104
88266: PUSH
88267: LD_INT 105
88269: PUSH
88270: LD_INT 106
88272: PUSH
88273: LD_INT 107
88275: PUSH
88276: LD_INT 108
88278: PUSH
88279: LD_INT 109
88281: PUSH
88282: LD_INT 110
88284: PUSH
88285: LD_INT 111
88287: PUSH
88288: LD_INT 112
88290: PUSH
88291: LD_INT 113
88293: PUSH
88294: LD_INT 114
88296: PUSH
88297: EMPTY
88298: LIST
88299: LIST
88300: LIST
88301: LIST
88302: LIST
88303: LIST
88304: LIST
88305: LIST
88306: LIST
88307: LIST
88308: LIST
88309: LIST
88310: LIST
88311: LIST
88312: PUSH
88313: EMPTY
88314: LIST
88315: LIST
88316: ST_TO_ADDR
88317: GO 89264
88319: LD_INT 15
88321: DOUBLE
88322: EQUAL
88323: IFTRUE 88327
88325: GO 88539
88327: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
88328: LD_ADDR_VAR 0 1
88332: PUSH
88333: LD_INT 1
88335: PUSH
88336: LD_INT 2
88338: PUSH
88339: LD_INT 3
88341: PUSH
88342: LD_INT 4
88344: PUSH
88345: LD_INT 5
88347: PUSH
88348: LD_INT 6
88350: PUSH
88351: LD_INT 7
88353: PUSH
88354: LD_INT 8
88356: PUSH
88357: LD_INT 9
88359: PUSH
88360: LD_INT 10
88362: PUSH
88363: LD_INT 11
88365: PUSH
88366: LD_INT 12
88368: PUSH
88369: LD_INT 13
88371: PUSH
88372: LD_INT 14
88374: PUSH
88375: LD_INT 15
88377: PUSH
88378: LD_INT 16
88380: PUSH
88381: LD_INT 17
88383: PUSH
88384: LD_INT 18
88386: PUSH
88387: LD_INT 19
88389: PUSH
88390: LD_INT 20
88392: PUSH
88393: LD_INT 21
88395: PUSH
88396: LD_INT 22
88398: PUSH
88399: LD_INT 23
88401: PUSH
88402: LD_INT 24
88404: PUSH
88405: LD_INT 25
88407: PUSH
88408: LD_INT 26
88410: PUSH
88411: LD_INT 27
88413: PUSH
88414: LD_INT 28
88416: PUSH
88417: LD_INT 29
88419: PUSH
88420: LD_INT 30
88422: PUSH
88423: LD_INT 31
88425: PUSH
88426: LD_INT 32
88428: PUSH
88429: LD_INT 33
88431: PUSH
88432: LD_INT 34
88434: PUSH
88435: LD_INT 36
88437: PUSH
88438: EMPTY
88439: LIST
88440: LIST
88441: LIST
88442: LIST
88443: LIST
88444: LIST
88445: LIST
88446: LIST
88447: LIST
88448: LIST
88449: LIST
88450: LIST
88451: LIST
88452: LIST
88453: LIST
88454: LIST
88455: LIST
88456: LIST
88457: LIST
88458: LIST
88459: LIST
88460: LIST
88461: LIST
88462: LIST
88463: LIST
88464: LIST
88465: LIST
88466: LIST
88467: LIST
88468: LIST
88469: LIST
88470: LIST
88471: LIST
88472: LIST
88473: LIST
88474: PUSH
88475: LD_INT 101
88477: PUSH
88478: LD_INT 102
88480: PUSH
88481: LD_INT 103
88483: PUSH
88484: LD_INT 104
88486: PUSH
88487: LD_INT 105
88489: PUSH
88490: LD_INT 106
88492: PUSH
88493: LD_INT 107
88495: PUSH
88496: LD_INT 108
88498: PUSH
88499: LD_INT 109
88501: PUSH
88502: LD_INT 110
88504: PUSH
88505: LD_INT 111
88507: PUSH
88508: LD_INT 112
88510: PUSH
88511: LD_INT 113
88513: PUSH
88514: LD_INT 114
88516: PUSH
88517: EMPTY
88518: LIST
88519: LIST
88520: LIST
88521: LIST
88522: LIST
88523: LIST
88524: LIST
88525: LIST
88526: LIST
88527: LIST
88528: LIST
88529: LIST
88530: LIST
88531: LIST
88532: PUSH
88533: EMPTY
88534: LIST
88535: LIST
88536: ST_TO_ADDR
88537: GO 89264
88539: LD_INT 16
88541: DOUBLE
88542: EQUAL
88543: IFTRUE 88547
88545: GO 88671
88547: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
88548: LD_ADDR_VAR 0 1
88552: PUSH
88553: LD_INT 2
88555: PUSH
88556: LD_INT 4
88558: PUSH
88559: LD_INT 5
88561: PUSH
88562: LD_INT 7
88564: PUSH
88565: LD_INT 11
88567: PUSH
88568: LD_INT 12
88570: PUSH
88571: LD_INT 15
88573: PUSH
88574: LD_INT 16
88576: PUSH
88577: LD_INT 20
88579: PUSH
88580: LD_INT 21
88582: PUSH
88583: LD_INT 22
88585: PUSH
88586: LD_INT 23
88588: PUSH
88589: LD_INT 25
88591: PUSH
88592: LD_INT 26
88594: PUSH
88595: LD_INT 30
88597: PUSH
88598: LD_INT 31
88600: PUSH
88601: LD_INT 32
88603: PUSH
88604: LD_INT 33
88606: PUSH
88607: LD_INT 34
88609: PUSH
88610: EMPTY
88611: LIST
88612: LIST
88613: LIST
88614: LIST
88615: LIST
88616: LIST
88617: LIST
88618: LIST
88619: LIST
88620: LIST
88621: LIST
88622: LIST
88623: LIST
88624: LIST
88625: LIST
88626: LIST
88627: LIST
88628: LIST
88629: LIST
88630: PUSH
88631: LD_INT 101
88633: PUSH
88634: LD_INT 102
88636: PUSH
88637: LD_INT 103
88639: PUSH
88640: LD_INT 106
88642: PUSH
88643: LD_INT 108
88645: PUSH
88646: LD_INT 112
88648: PUSH
88649: LD_INT 113
88651: PUSH
88652: LD_INT 114
88654: PUSH
88655: EMPTY
88656: LIST
88657: LIST
88658: LIST
88659: LIST
88660: LIST
88661: LIST
88662: LIST
88663: LIST
88664: PUSH
88665: EMPTY
88666: LIST
88667: LIST
88668: ST_TO_ADDR
88669: GO 89264
88671: LD_INT 17
88673: DOUBLE
88674: EQUAL
88675: IFTRUE 88679
88677: GO 88891
88679: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
88680: LD_ADDR_VAR 0 1
88684: PUSH
88685: LD_INT 1
88687: PUSH
88688: LD_INT 2
88690: PUSH
88691: LD_INT 3
88693: PUSH
88694: LD_INT 4
88696: PUSH
88697: LD_INT 5
88699: PUSH
88700: LD_INT 6
88702: PUSH
88703: LD_INT 7
88705: PUSH
88706: LD_INT 8
88708: PUSH
88709: LD_INT 9
88711: PUSH
88712: LD_INT 10
88714: PUSH
88715: LD_INT 11
88717: PUSH
88718: LD_INT 12
88720: PUSH
88721: LD_INT 13
88723: PUSH
88724: LD_INT 14
88726: PUSH
88727: LD_INT 15
88729: PUSH
88730: LD_INT 16
88732: PUSH
88733: LD_INT 17
88735: PUSH
88736: LD_INT 18
88738: PUSH
88739: LD_INT 19
88741: PUSH
88742: LD_INT 20
88744: PUSH
88745: LD_INT 21
88747: PUSH
88748: LD_INT 22
88750: PUSH
88751: LD_INT 23
88753: PUSH
88754: LD_INT 24
88756: PUSH
88757: LD_INT 25
88759: PUSH
88760: LD_INT 26
88762: PUSH
88763: LD_INT 27
88765: PUSH
88766: LD_INT 28
88768: PUSH
88769: LD_INT 29
88771: PUSH
88772: LD_INT 30
88774: PUSH
88775: LD_INT 31
88777: PUSH
88778: LD_INT 32
88780: PUSH
88781: LD_INT 33
88783: PUSH
88784: LD_INT 34
88786: PUSH
88787: LD_INT 36
88789: PUSH
88790: EMPTY
88791: LIST
88792: LIST
88793: LIST
88794: LIST
88795: LIST
88796: LIST
88797: LIST
88798: LIST
88799: LIST
88800: LIST
88801: LIST
88802: LIST
88803: LIST
88804: LIST
88805: LIST
88806: LIST
88807: LIST
88808: LIST
88809: LIST
88810: LIST
88811: LIST
88812: LIST
88813: LIST
88814: LIST
88815: LIST
88816: LIST
88817: LIST
88818: LIST
88819: LIST
88820: LIST
88821: LIST
88822: LIST
88823: LIST
88824: LIST
88825: LIST
88826: PUSH
88827: LD_INT 101
88829: PUSH
88830: LD_INT 102
88832: PUSH
88833: LD_INT 103
88835: PUSH
88836: LD_INT 104
88838: PUSH
88839: LD_INT 105
88841: PUSH
88842: LD_INT 106
88844: PUSH
88845: LD_INT 107
88847: PUSH
88848: LD_INT 108
88850: PUSH
88851: LD_INT 109
88853: PUSH
88854: LD_INT 110
88856: PUSH
88857: LD_INT 111
88859: PUSH
88860: LD_INT 112
88862: PUSH
88863: LD_INT 113
88865: PUSH
88866: LD_INT 114
88868: PUSH
88869: EMPTY
88870: LIST
88871: LIST
88872: LIST
88873: LIST
88874: LIST
88875: LIST
88876: LIST
88877: LIST
88878: LIST
88879: LIST
88880: LIST
88881: LIST
88882: LIST
88883: LIST
88884: PUSH
88885: EMPTY
88886: LIST
88887: LIST
88888: ST_TO_ADDR
88889: GO 89264
88891: LD_INT 18
88893: DOUBLE
88894: EQUAL
88895: IFTRUE 88899
88897: GO 89035
88899: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
88900: LD_ADDR_VAR 0 1
88904: PUSH
88905: LD_INT 2
88907: PUSH
88908: LD_INT 4
88910: PUSH
88911: LD_INT 5
88913: PUSH
88914: LD_INT 7
88916: PUSH
88917: LD_INT 11
88919: PUSH
88920: LD_INT 12
88922: PUSH
88923: LD_INT 15
88925: PUSH
88926: LD_INT 16
88928: PUSH
88929: LD_INT 20
88931: PUSH
88932: LD_INT 21
88934: PUSH
88935: LD_INT 22
88937: PUSH
88938: LD_INT 23
88940: PUSH
88941: LD_INT 25
88943: PUSH
88944: LD_INT 26
88946: PUSH
88947: LD_INT 30
88949: PUSH
88950: LD_INT 31
88952: PUSH
88953: LD_INT 32
88955: PUSH
88956: LD_INT 33
88958: PUSH
88959: LD_INT 34
88961: PUSH
88962: LD_INT 35
88964: PUSH
88965: LD_INT 36
88967: PUSH
88968: EMPTY
88969: LIST
88970: LIST
88971: LIST
88972: LIST
88973: LIST
88974: LIST
88975: LIST
88976: LIST
88977: LIST
88978: LIST
88979: LIST
88980: LIST
88981: LIST
88982: LIST
88983: LIST
88984: LIST
88985: LIST
88986: LIST
88987: LIST
88988: LIST
88989: LIST
88990: PUSH
88991: LD_INT 101
88993: PUSH
88994: LD_INT 102
88996: PUSH
88997: LD_INT 103
88999: PUSH
89000: LD_INT 106
89002: PUSH
89003: LD_INT 108
89005: PUSH
89006: LD_INT 112
89008: PUSH
89009: LD_INT 113
89011: PUSH
89012: LD_INT 114
89014: PUSH
89015: LD_INT 115
89017: PUSH
89018: EMPTY
89019: LIST
89020: LIST
89021: LIST
89022: LIST
89023: LIST
89024: LIST
89025: LIST
89026: LIST
89027: LIST
89028: PUSH
89029: EMPTY
89030: LIST
89031: LIST
89032: ST_TO_ADDR
89033: GO 89264
89035: LD_INT 19
89037: DOUBLE
89038: EQUAL
89039: IFTRUE 89043
89041: GO 89263
89043: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
89044: LD_ADDR_VAR 0 1
89048: PUSH
89049: LD_INT 1
89051: PUSH
89052: LD_INT 2
89054: PUSH
89055: LD_INT 3
89057: PUSH
89058: LD_INT 4
89060: PUSH
89061: LD_INT 5
89063: PUSH
89064: LD_INT 6
89066: PUSH
89067: LD_INT 7
89069: PUSH
89070: LD_INT 8
89072: PUSH
89073: LD_INT 9
89075: PUSH
89076: LD_INT 10
89078: PUSH
89079: LD_INT 11
89081: PUSH
89082: LD_INT 12
89084: PUSH
89085: LD_INT 13
89087: PUSH
89088: LD_INT 14
89090: PUSH
89091: LD_INT 15
89093: PUSH
89094: LD_INT 16
89096: PUSH
89097: LD_INT 17
89099: PUSH
89100: LD_INT 18
89102: PUSH
89103: LD_INT 19
89105: PUSH
89106: LD_INT 20
89108: PUSH
89109: LD_INT 21
89111: PUSH
89112: LD_INT 22
89114: PUSH
89115: LD_INT 23
89117: PUSH
89118: LD_INT 24
89120: PUSH
89121: LD_INT 25
89123: PUSH
89124: LD_INT 26
89126: PUSH
89127: LD_INT 27
89129: PUSH
89130: LD_INT 28
89132: PUSH
89133: LD_INT 29
89135: PUSH
89136: LD_INT 30
89138: PUSH
89139: LD_INT 31
89141: PUSH
89142: LD_INT 32
89144: PUSH
89145: LD_INT 33
89147: PUSH
89148: LD_INT 34
89150: PUSH
89151: LD_INT 35
89153: PUSH
89154: LD_INT 36
89156: PUSH
89157: EMPTY
89158: LIST
89159: LIST
89160: LIST
89161: LIST
89162: LIST
89163: LIST
89164: LIST
89165: LIST
89166: LIST
89167: LIST
89168: LIST
89169: LIST
89170: LIST
89171: LIST
89172: LIST
89173: LIST
89174: LIST
89175: LIST
89176: LIST
89177: LIST
89178: LIST
89179: LIST
89180: LIST
89181: LIST
89182: LIST
89183: LIST
89184: LIST
89185: LIST
89186: LIST
89187: LIST
89188: LIST
89189: LIST
89190: LIST
89191: LIST
89192: LIST
89193: LIST
89194: PUSH
89195: LD_INT 101
89197: PUSH
89198: LD_INT 102
89200: PUSH
89201: LD_INT 103
89203: PUSH
89204: LD_INT 104
89206: PUSH
89207: LD_INT 105
89209: PUSH
89210: LD_INT 106
89212: PUSH
89213: LD_INT 107
89215: PUSH
89216: LD_INT 108
89218: PUSH
89219: LD_INT 109
89221: PUSH
89222: LD_INT 110
89224: PUSH
89225: LD_INT 111
89227: PUSH
89228: LD_INT 112
89230: PUSH
89231: LD_INT 113
89233: PUSH
89234: LD_INT 114
89236: PUSH
89237: LD_INT 115
89239: PUSH
89240: EMPTY
89241: LIST
89242: LIST
89243: LIST
89244: LIST
89245: LIST
89246: LIST
89247: LIST
89248: LIST
89249: LIST
89250: LIST
89251: LIST
89252: LIST
89253: LIST
89254: LIST
89255: LIST
89256: PUSH
89257: EMPTY
89258: LIST
89259: LIST
89260: ST_TO_ADDR
89261: GO 89264
89263: POP
// end else
89264: GO 89483
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
89266: LD_ADDR_VAR 0 1
89270: PUSH
89271: LD_INT 1
89273: PUSH
89274: LD_INT 2
89276: PUSH
89277: LD_INT 3
89279: PUSH
89280: LD_INT 4
89282: PUSH
89283: LD_INT 5
89285: PUSH
89286: LD_INT 6
89288: PUSH
89289: LD_INT 7
89291: PUSH
89292: LD_INT 8
89294: PUSH
89295: LD_INT 9
89297: PUSH
89298: LD_INT 10
89300: PUSH
89301: LD_INT 11
89303: PUSH
89304: LD_INT 12
89306: PUSH
89307: LD_INT 13
89309: PUSH
89310: LD_INT 14
89312: PUSH
89313: LD_INT 15
89315: PUSH
89316: LD_INT 16
89318: PUSH
89319: LD_INT 17
89321: PUSH
89322: LD_INT 18
89324: PUSH
89325: LD_INT 19
89327: PUSH
89328: LD_INT 20
89330: PUSH
89331: LD_INT 21
89333: PUSH
89334: LD_INT 22
89336: PUSH
89337: LD_INT 23
89339: PUSH
89340: LD_INT 24
89342: PUSH
89343: LD_INT 25
89345: PUSH
89346: LD_INT 26
89348: PUSH
89349: LD_INT 27
89351: PUSH
89352: LD_INT 28
89354: PUSH
89355: LD_INT 29
89357: PUSH
89358: LD_INT 30
89360: PUSH
89361: LD_INT 31
89363: PUSH
89364: LD_INT 32
89366: PUSH
89367: LD_INT 33
89369: PUSH
89370: LD_INT 34
89372: PUSH
89373: LD_INT 35
89375: PUSH
89376: LD_INT 36
89378: PUSH
89379: EMPTY
89380: LIST
89381: LIST
89382: LIST
89383: LIST
89384: LIST
89385: LIST
89386: LIST
89387: LIST
89388: LIST
89389: LIST
89390: LIST
89391: LIST
89392: LIST
89393: LIST
89394: LIST
89395: LIST
89396: LIST
89397: LIST
89398: LIST
89399: LIST
89400: LIST
89401: LIST
89402: LIST
89403: LIST
89404: LIST
89405: LIST
89406: LIST
89407: LIST
89408: LIST
89409: LIST
89410: LIST
89411: LIST
89412: LIST
89413: LIST
89414: LIST
89415: LIST
89416: PUSH
89417: LD_INT 101
89419: PUSH
89420: LD_INT 102
89422: PUSH
89423: LD_INT 103
89425: PUSH
89426: LD_INT 104
89428: PUSH
89429: LD_INT 105
89431: PUSH
89432: LD_INT 106
89434: PUSH
89435: LD_INT 107
89437: PUSH
89438: LD_INT 108
89440: PUSH
89441: LD_INT 109
89443: PUSH
89444: LD_INT 110
89446: PUSH
89447: LD_INT 111
89449: PUSH
89450: LD_INT 112
89452: PUSH
89453: LD_INT 113
89455: PUSH
89456: LD_INT 114
89458: PUSH
89459: LD_INT 115
89461: PUSH
89462: EMPTY
89463: LIST
89464: LIST
89465: LIST
89466: LIST
89467: LIST
89468: LIST
89469: LIST
89470: LIST
89471: LIST
89472: LIST
89473: LIST
89474: LIST
89475: LIST
89476: LIST
89477: LIST
89478: PUSH
89479: EMPTY
89480: LIST
89481: LIST
89482: ST_TO_ADDR
// if result then
89483: LD_VAR 0 1
89487: IFFALSE 89776
// begin normal :=  ;
89489: LD_ADDR_VAR 0 3
89493: PUSH
89494: LD_STRING 
89496: ST_TO_ADDR
// hardcore :=  ;
89497: LD_ADDR_VAR 0 4
89501: PUSH
89502: LD_STRING 
89504: ST_TO_ADDR
// for i = 1 to normalCounter do
89505: LD_ADDR_VAR 0 5
89509: PUSH
89510: DOUBLE
89511: LD_INT 1
89513: DEC
89514: ST_TO_ADDR
89515: LD_EXP 89
89519: PUSH
89520: FOR_TO
89521: IFFALSE 89622
// begin tmp := 0 ;
89523: LD_ADDR_VAR 0 2
89527: PUSH
89528: LD_STRING 0
89530: ST_TO_ADDR
// if result [ 1 ] then
89531: LD_VAR 0 1
89535: PUSH
89536: LD_INT 1
89538: ARRAY
89539: IFFALSE 89604
// if result [ 1 ] [ 1 ] = i then
89541: LD_VAR 0 1
89545: PUSH
89546: LD_INT 1
89548: ARRAY
89549: PUSH
89550: LD_INT 1
89552: ARRAY
89553: PUSH
89554: LD_VAR 0 5
89558: EQUAL
89559: IFFALSE 89604
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
89561: LD_ADDR_VAR 0 1
89565: PUSH
89566: LD_VAR 0 1
89570: PPUSH
89571: LD_INT 1
89573: PPUSH
89574: LD_VAR 0 1
89578: PUSH
89579: LD_INT 1
89581: ARRAY
89582: PPUSH
89583: LD_INT 1
89585: PPUSH
89586: CALL_OW 3
89590: PPUSH
89591: CALL_OW 1
89595: ST_TO_ADDR
// tmp := 1 ;
89596: LD_ADDR_VAR 0 2
89600: PUSH
89601: LD_STRING 1
89603: ST_TO_ADDR
// end ; normal := normal & tmp ;
89604: LD_ADDR_VAR 0 3
89608: PUSH
89609: LD_VAR 0 3
89613: PUSH
89614: LD_VAR 0 2
89618: STR
89619: ST_TO_ADDR
// end ;
89620: GO 89520
89622: POP
89623: POP
// for i = 1 to hardcoreCounter do
89624: LD_ADDR_VAR 0 5
89628: PUSH
89629: DOUBLE
89630: LD_INT 1
89632: DEC
89633: ST_TO_ADDR
89634: LD_EXP 90
89638: PUSH
89639: FOR_TO
89640: IFFALSE 89745
// begin tmp := 0 ;
89642: LD_ADDR_VAR 0 2
89646: PUSH
89647: LD_STRING 0
89649: ST_TO_ADDR
// if result [ 2 ] then
89650: LD_VAR 0 1
89654: PUSH
89655: LD_INT 2
89657: ARRAY
89658: IFFALSE 89727
// if result [ 2 ] [ 1 ] = 100 + i then
89660: LD_VAR 0 1
89664: PUSH
89665: LD_INT 2
89667: ARRAY
89668: PUSH
89669: LD_INT 1
89671: ARRAY
89672: PUSH
89673: LD_INT 100
89675: PUSH
89676: LD_VAR 0 5
89680: PLUS
89681: EQUAL
89682: IFFALSE 89727
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
89684: LD_ADDR_VAR 0 1
89688: PUSH
89689: LD_VAR 0 1
89693: PPUSH
89694: LD_INT 2
89696: PPUSH
89697: LD_VAR 0 1
89701: PUSH
89702: LD_INT 2
89704: ARRAY
89705: PPUSH
89706: LD_INT 1
89708: PPUSH
89709: CALL_OW 3
89713: PPUSH
89714: CALL_OW 1
89718: ST_TO_ADDR
// tmp := 1 ;
89719: LD_ADDR_VAR 0 2
89723: PUSH
89724: LD_STRING 1
89726: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
89727: LD_ADDR_VAR 0 4
89731: PUSH
89732: LD_VAR 0 4
89736: PUSH
89737: LD_VAR 0 2
89741: STR
89742: ST_TO_ADDR
// end ;
89743: GO 89639
89745: POP
89746: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
89747: LD_STRING getStreamItemsFromMission("
89749: PUSH
89750: LD_VAR 0 3
89754: STR
89755: PUSH
89756: LD_STRING ","
89758: STR
89759: PUSH
89760: LD_VAR 0 4
89764: STR
89765: PUSH
89766: LD_STRING ")
89768: STR
89769: PPUSH
89770: CALL_OW 559
// end else
89774: GO 89783
// ToLua ( getStreamItemsFromMission("","") ) ;
89776: LD_STRING getStreamItemsFromMission("","")
89778: PPUSH
89779: CALL_OW 559
// end ;
89783: LD_VAR 0 1
89787: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
89788: LD_VAR 0 2
89792: PUSH
89793: LD_INT 100
89795: EQUAL
89796: IFFALSE 90745
// begin if not StreamModeActive then
89798: LD_EXP 88
89802: NOT
89803: IFFALSE 89813
// StreamModeActive := true ;
89805: LD_ADDR_EXP 88
89809: PUSH
89810: LD_INT 1
89812: ST_TO_ADDR
// if p3 = 0 then
89813: LD_VAR 0 3
89817: PUSH
89818: LD_INT 0
89820: EQUAL
89821: IFFALSE 89827
// InitStreamMode ;
89823: CALL 85866 0 0
// if p3 = 1 then
89827: LD_VAR 0 3
89831: PUSH
89832: LD_INT 1
89834: EQUAL
89835: IFFALSE 89845
// sRocket := true ;
89837: LD_ADDR_EXP 93
89841: PUSH
89842: LD_INT 1
89844: ST_TO_ADDR
// if p3 = 2 then
89845: LD_VAR 0 3
89849: PUSH
89850: LD_INT 2
89852: EQUAL
89853: IFFALSE 89863
// sSpeed := true ;
89855: LD_ADDR_EXP 92
89859: PUSH
89860: LD_INT 1
89862: ST_TO_ADDR
// if p3 = 3 then
89863: LD_VAR 0 3
89867: PUSH
89868: LD_INT 3
89870: EQUAL
89871: IFFALSE 89881
// sEngine := true ;
89873: LD_ADDR_EXP 94
89877: PUSH
89878: LD_INT 1
89880: ST_TO_ADDR
// if p3 = 4 then
89881: LD_VAR 0 3
89885: PUSH
89886: LD_INT 4
89888: EQUAL
89889: IFFALSE 89899
// sSpec := true ;
89891: LD_ADDR_EXP 91
89895: PUSH
89896: LD_INT 1
89898: ST_TO_ADDR
// if p3 = 5 then
89899: LD_VAR 0 3
89903: PUSH
89904: LD_INT 5
89906: EQUAL
89907: IFFALSE 89917
// sLevel := true ;
89909: LD_ADDR_EXP 95
89913: PUSH
89914: LD_INT 1
89916: ST_TO_ADDR
// if p3 = 6 then
89917: LD_VAR 0 3
89921: PUSH
89922: LD_INT 6
89924: EQUAL
89925: IFFALSE 89935
// sArmoury := true ;
89927: LD_ADDR_EXP 96
89931: PUSH
89932: LD_INT 1
89934: ST_TO_ADDR
// if p3 = 7 then
89935: LD_VAR 0 3
89939: PUSH
89940: LD_INT 7
89942: EQUAL
89943: IFFALSE 89953
// sRadar := true ;
89945: LD_ADDR_EXP 97
89949: PUSH
89950: LD_INT 1
89952: ST_TO_ADDR
// if p3 = 8 then
89953: LD_VAR 0 3
89957: PUSH
89958: LD_INT 8
89960: EQUAL
89961: IFFALSE 89971
// sBunker := true ;
89963: LD_ADDR_EXP 98
89967: PUSH
89968: LD_INT 1
89970: ST_TO_ADDR
// if p3 = 9 then
89971: LD_VAR 0 3
89975: PUSH
89976: LD_INT 9
89978: EQUAL
89979: IFFALSE 89989
// sHack := true ;
89981: LD_ADDR_EXP 99
89985: PUSH
89986: LD_INT 1
89988: ST_TO_ADDR
// if p3 = 10 then
89989: LD_VAR 0 3
89993: PUSH
89994: LD_INT 10
89996: EQUAL
89997: IFFALSE 90007
// sFire := true ;
89999: LD_ADDR_EXP 100
90003: PUSH
90004: LD_INT 1
90006: ST_TO_ADDR
// if p3 = 11 then
90007: LD_VAR 0 3
90011: PUSH
90012: LD_INT 11
90014: EQUAL
90015: IFFALSE 90025
// sRefresh := true ;
90017: LD_ADDR_EXP 101
90021: PUSH
90022: LD_INT 1
90024: ST_TO_ADDR
// if p3 = 12 then
90025: LD_VAR 0 3
90029: PUSH
90030: LD_INT 12
90032: EQUAL
90033: IFFALSE 90043
// sExp := true ;
90035: LD_ADDR_EXP 102
90039: PUSH
90040: LD_INT 1
90042: ST_TO_ADDR
// if p3 = 13 then
90043: LD_VAR 0 3
90047: PUSH
90048: LD_INT 13
90050: EQUAL
90051: IFFALSE 90061
// sDepot := true ;
90053: LD_ADDR_EXP 103
90057: PUSH
90058: LD_INT 1
90060: ST_TO_ADDR
// if p3 = 14 then
90061: LD_VAR 0 3
90065: PUSH
90066: LD_INT 14
90068: EQUAL
90069: IFFALSE 90079
// sFlag := true ;
90071: LD_ADDR_EXP 104
90075: PUSH
90076: LD_INT 1
90078: ST_TO_ADDR
// if p3 = 15 then
90079: LD_VAR 0 3
90083: PUSH
90084: LD_INT 15
90086: EQUAL
90087: IFFALSE 90097
// sKamikadze := true ;
90089: LD_ADDR_EXP 112
90093: PUSH
90094: LD_INT 1
90096: ST_TO_ADDR
// if p3 = 16 then
90097: LD_VAR 0 3
90101: PUSH
90102: LD_INT 16
90104: EQUAL
90105: IFFALSE 90115
// sTroll := true ;
90107: LD_ADDR_EXP 113
90111: PUSH
90112: LD_INT 1
90114: ST_TO_ADDR
// if p3 = 17 then
90115: LD_VAR 0 3
90119: PUSH
90120: LD_INT 17
90122: EQUAL
90123: IFFALSE 90133
// sSlow := true ;
90125: LD_ADDR_EXP 114
90129: PUSH
90130: LD_INT 1
90132: ST_TO_ADDR
// if p3 = 18 then
90133: LD_VAR 0 3
90137: PUSH
90138: LD_INT 18
90140: EQUAL
90141: IFFALSE 90151
// sLack := true ;
90143: LD_ADDR_EXP 115
90147: PUSH
90148: LD_INT 1
90150: ST_TO_ADDR
// if p3 = 19 then
90151: LD_VAR 0 3
90155: PUSH
90156: LD_INT 19
90158: EQUAL
90159: IFFALSE 90169
// sTank := true ;
90161: LD_ADDR_EXP 117
90165: PUSH
90166: LD_INT 1
90168: ST_TO_ADDR
// if p3 = 20 then
90169: LD_VAR 0 3
90173: PUSH
90174: LD_INT 20
90176: EQUAL
90177: IFFALSE 90187
// sRemote := true ;
90179: LD_ADDR_EXP 118
90183: PUSH
90184: LD_INT 1
90186: ST_TO_ADDR
// if p3 = 21 then
90187: LD_VAR 0 3
90191: PUSH
90192: LD_INT 21
90194: EQUAL
90195: IFFALSE 90205
// sPowell := true ;
90197: LD_ADDR_EXP 119
90201: PUSH
90202: LD_INT 1
90204: ST_TO_ADDR
// if p3 = 22 then
90205: LD_VAR 0 3
90209: PUSH
90210: LD_INT 22
90212: EQUAL
90213: IFFALSE 90223
// sTeleport := true ;
90215: LD_ADDR_EXP 122
90219: PUSH
90220: LD_INT 1
90222: ST_TO_ADDR
// if p3 = 23 then
90223: LD_VAR 0 3
90227: PUSH
90228: LD_INT 23
90230: EQUAL
90231: IFFALSE 90241
// sOilTower := true ;
90233: LD_ADDR_EXP 124
90237: PUSH
90238: LD_INT 1
90240: ST_TO_ADDR
// if p3 = 24 then
90241: LD_VAR 0 3
90245: PUSH
90246: LD_INT 24
90248: EQUAL
90249: IFFALSE 90259
// sShovel := true ;
90251: LD_ADDR_EXP 125
90255: PUSH
90256: LD_INT 1
90258: ST_TO_ADDR
// if p3 = 25 then
90259: LD_VAR 0 3
90263: PUSH
90264: LD_INT 25
90266: EQUAL
90267: IFFALSE 90277
// sSheik := true ;
90269: LD_ADDR_EXP 126
90273: PUSH
90274: LD_INT 1
90276: ST_TO_ADDR
// if p3 = 26 then
90277: LD_VAR 0 3
90281: PUSH
90282: LD_INT 26
90284: EQUAL
90285: IFFALSE 90295
// sEarthquake := true ;
90287: LD_ADDR_EXP 128
90291: PUSH
90292: LD_INT 1
90294: ST_TO_ADDR
// if p3 = 27 then
90295: LD_VAR 0 3
90299: PUSH
90300: LD_INT 27
90302: EQUAL
90303: IFFALSE 90313
// sAI := true ;
90305: LD_ADDR_EXP 129
90309: PUSH
90310: LD_INT 1
90312: ST_TO_ADDR
// if p3 = 28 then
90313: LD_VAR 0 3
90317: PUSH
90318: LD_INT 28
90320: EQUAL
90321: IFFALSE 90331
// sCargo := true ;
90323: LD_ADDR_EXP 132
90327: PUSH
90328: LD_INT 1
90330: ST_TO_ADDR
// if p3 = 29 then
90331: LD_VAR 0 3
90335: PUSH
90336: LD_INT 29
90338: EQUAL
90339: IFFALSE 90349
// sDLaser := true ;
90341: LD_ADDR_EXP 133
90345: PUSH
90346: LD_INT 1
90348: ST_TO_ADDR
// if p3 = 30 then
90349: LD_VAR 0 3
90353: PUSH
90354: LD_INT 30
90356: EQUAL
90357: IFFALSE 90367
// sExchange := true ;
90359: LD_ADDR_EXP 134
90363: PUSH
90364: LD_INT 1
90366: ST_TO_ADDR
// if p3 = 31 then
90367: LD_VAR 0 3
90371: PUSH
90372: LD_INT 31
90374: EQUAL
90375: IFFALSE 90385
// sFac := true ;
90377: LD_ADDR_EXP 135
90381: PUSH
90382: LD_INT 1
90384: ST_TO_ADDR
// if p3 = 32 then
90385: LD_VAR 0 3
90389: PUSH
90390: LD_INT 32
90392: EQUAL
90393: IFFALSE 90403
// sPower := true ;
90395: LD_ADDR_EXP 136
90399: PUSH
90400: LD_INT 1
90402: ST_TO_ADDR
// if p3 = 33 then
90403: LD_VAR 0 3
90407: PUSH
90408: LD_INT 33
90410: EQUAL
90411: IFFALSE 90421
// sRandom := true ;
90413: LD_ADDR_EXP 137
90417: PUSH
90418: LD_INT 1
90420: ST_TO_ADDR
// if p3 = 34 then
90421: LD_VAR 0 3
90425: PUSH
90426: LD_INT 34
90428: EQUAL
90429: IFFALSE 90439
// sShield := true ;
90431: LD_ADDR_EXP 138
90435: PUSH
90436: LD_INT 1
90438: ST_TO_ADDR
// if p3 = 35 then
90439: LD_VAR 0 3
90443: PUSH
90444: LD_INT 35
90446: EQUAL
90447: IFFALSE 90457
// sTime := true ;
90449: LD_ADDR_EXP 139
90453: PUSH
90454: LD_INT 1
90456: ST_TO_ADDR
// if p3 = 36 then
90457: LD_VAR 0 3
90461: PUSH
90462: LD_INT 36
90464: EQUAL
90465: IFFALSE 90475
// sTools := true ;
90467: LD_ADDR_EXP 140
90471: PUSH
90472: LD_INT 1
90474: ST_TO_ADDR
// if p3 = 101 then
90475: LD_VAR 0 3
90479: PUSH
90480: LD_INT 101
90482: EQUAL
90483: IFFALSE 90493
// sSold := true ;
90485: LD_ADDR_EXP 105
90489: PUSH
90490: LD_INT 1
90492: ST_TO_ADDR
// if p3 = 102 then
90493: LD_VAR 0 3
90497: PUSH
90498: LD_INT 102
90500: EQUAL
90501: IFFALSE 90511
// sDiff := true ;
90503: LD_ADDR_EXP 106
90507: PUSH
90508: LD_INT 1
90510: ST_TO_ADDR
// if p3 = 103 then
90511: LD_VAR 0 3
90515: PUSH
90516: LD_INT 103
90518: EQUAL
90519: IFFALSE 90529
// sFog := true ;
90521: LD_ADDR_EXP 109
90525: PUSH
90526: LD_INT 1
90528: ST_TO_ADDR
// if p3 = 104 then
90529: LD_VAR 0 3
90533: PUSH
90534: LD_INT 104
90536: EQUAL
90537: IFFALSE 90547
// sReset := true ;
90539: LD_ADDR_EXP 110
90543: PUSH
90544: LD_INT 1
90546: ST_TO_ADDR
// if p3 = 105 then
90547: LD_VAR 0 3
90551: PUSH
90552: LD_INT 105
90554: EQUAL
90555: IFFALSE 90565
// sSun := true ;
90557: LD_ADDR_EXP 111
90561: PUSH
90562: LD_INT 1
90564: ST_TO_ADDR
// if p3 = 106 then
90565: LD_VAR 0 3
90569: PUSH
90570: LD_INT 106
90572: EQUAL
90573: IFFALSE 90583
// sTiger := true ;
90575: LD_ADDR_EXP 107
90579: PUSH
90580: LD_INT 1
90582: ST_TO_ADDR
// if p3 = 107 then
90583: LD_VAR 0 3
90587: PUSH
90588: LD_INT 107
90590: EQUAL
90591: IFFALSE 90601
// sBomb := true ;
90593: LD_ADDR_EXP 108
90597: PUSH
90598: LD_INT 1
90600: ST_TO_ADDR
// if p3 = 108 then
90601: LD_VAR 0 3
90605: PUSH
90606: LD_INT 108
90608: EQUAL
90609: IFFALSE 90619
// sWound := true ;
90611: LD_ADDR_EXP 116
90615: PUSH
90616: LD_INT 1
90618: ST_TO_ADDR
// if p3 = 109 then
90619: LD_VAR 0 3
90623: PUSH
90624: LD_INT 109
90626: EQUAL
90627: IFFALSE 90637
// sBetray := true ;
90629: LD_ADDR_EXP 120
90633: PUSH
90634: LD_INT 1
90636: ST_TO_ADDR
// if p3 = 110 then
90637: LD_VAR 0 3
90641: PUSH
90642: LD_INT 110
90644: EQUAL
90645: IFFALSE 90655
// sContamin := true ;
90647: LD_ADDR_EXP 121
90651: PUSH
90652: LD_INT 1
90654: ST_TO_ADDR
// if p3 = 111 then
90655: LD_VAR 0 3
90659: PUSH
90660: LD_INT 111
90662: EQUAL
90663: IFFALSE 90673
// sOil := true ;
90665: LD_ADDR_EXP 123
90669: PUSH
90670: LD_INT 1
90672: ST_TO_ADDR
// if p3 = 112 then
90673: LD_VAR 0 3
90677: PUSH
90678: LD_INT 112
90680: EQUAL
90681: IFFALSE 90691
// sStu := true ;
90683: LD_ADDR_EXP 127
90687: PUSH
90688: LD_INT 1
90690: ST_TO_ADDR
// if p3 = 113 then
90691: LD_VAR 0 3
90695: PUSH
90696: LD_INT 113
90698: EQUAL
90699: IFFALSE 90709
// sBazooka := true ;
90701: LD_ADDR_EXP 130
90705: PUSH
90706: LD_INT 1
90708: ST_TO_ADDR
// if p3 = 114 then
90709: LD_VAR 0 3
90713: PUSH
90714: LD_INT 114
90716: EQUAL
90717: IFFALSE 90727
// sMortar := true ;
90719: LD_ADDR_EXP 131
90723: PUSH
90724: LD_INT 1
90726: ST_TO_ADDR
// if p3 = 115 then
90727: LD_VAR 0 3
90731: PUSH
90732: LD_INT 115
90734: EQUAL
90735: IFFALSE 90745
// sRanger := true ;
90737: LD_ADDR_EXP 141
90741: PUSH
90742: LD_INT 1
90744: ST_TO_ADDR
// end ; end ;
90745: PPOPN 6
90747: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
90748: LD_EXP 88
90752: PUSH
90753: LD_EXP 93
90757: AND
90758: IFFALSE 90882
90760: GO 90762
90762: DISABLE
90763: LD_INT 0
90765: PPUSH
90766: PPUSH
// begin enable ;
90767: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
90768: LD_ADDR_VAR 0 2
90772: PUSH
90773: LD_INT 22
90775: PUSH
90776: LD_OWVAR 2
90780: PUSH
90781: EMPTY
90782: LIST
90783: LIST
90784: PUSH
90785: LD_INT 2
90787: PUSH
90788: LD_INT 34
90790: PUSH
90791: LD_INT 7
90793: PUSH
90794: EMPTY
90795: LIST
90796: LIST
90797: PUSH
90798: LD_INT 34
90800: PUSH
90801: LD_INT 45
90803: PUSH
90804: EMPTY
90805: LIST
90806: LIST
90807: PUSH
90808: LD_INT 34
90810: PUSH
90811: LD_INT 28
90813: PUSH
90814: EMPTY
90815: LIST
90816: LIST
90817: PUSH
90818: LD_INT 34
90820: PUSH
90821: LD_INT 47
90823: PUSH
90824: EMPTY
90825: LIST
90826: LIST
90827: PUSH
90828: EMPTY
90829: LIST
90830: LIST
90831: LIST
90832: LIST
90833: LIST
90834: PUSH
90835: EMPTY
90836: LIST
90837: LIST
90838: PPUSH
90839: CALL_OW 69
90843: ST_TO_ADDR
// if not tmp then
90844: LD_VAR 0 2
90848: NOT
90849: IFFALSE 90853
// exit ;
90851: GO 90882
// for i in tmp do
90853: LD_ADDR_VAR 0 1
90857: PUSH
90858: LD_VAR 0 2
90862: PUSH
90863: FOR_IN
90864: IFFALSE 90880
// begin SetLives ( i , 0 ) ;
90866: LD_VAR 0 1
90870: PPUSH
90871: LD_INT 0
90873: PPUSH
90874: CALL_OW 234
// end ;
90878: GO 90863
90880: POP
90881: POP
// end ;
90882: PPOPN 2
90884: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
90885: LD_EXP 88
90889: PUSH
90890: LD_EXP 94
90894: AND
90895: IFFALSE 90979
90897: GO 90899
90899: DISABLE
90900: LD_INT 0
90902: PPUSH
90903: PPUSH
// begin enable ;
90904: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
90905: LD_ADDR_VAR 0 2
90909: PUSH
90910: LD_INT 22
90912: PUSH
90913: LD_OWVAR 2
90917: PUSH
90918: EMPTY
90919: LIST
90920: LIST
90921: PUSH
90922: LD_INT 32
90924: PUSH
90925: LD_INT 3
90927: PUSH
90928: EMPTY
90929: LIST
90930: LIST
90931: PUSH
90932: EMPTY
90933: LIST
90934: LIST
90935: PPUSH
90936: CALL_OW 69
90940: ST_TO_ADDR
// if not tmp then
90941: LD_VAR 0 2
90945: NOT
90946: IFFALSE 90950
// exit ;
90948: GO 90979
// for i in tmp do
90950: LD_ADDR_VAR 0 1
90954: PUSH
90955: LD_VAR 0 2
90959: PUSH
90960: FOR_IN
90961: IFFALSE 90977
// begin SetLives ( i , 0 ) ;
90963: LD_VAR 0 1
90967: PPUSH
90968: LD_INT 0
90970: PPUSH
90971: CALL_OW 234
// end ;
90975: GO 90960
90977: POP
90978: POP
// end ;
90979: PPOPN 2
90981: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
90982: LD_EXP 88
90986: PUSH
90987: LD_EXP 91
90991: AND
90992: IFFALSE 91085
90994: GO 90996
90996: DISABLE
90997: LD_INT 0
90999: PPUSH
// begin enable ;
91000: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
91001: LD_ADDR_VAR 0 1
91005: PUSH
91006: LD_INT 22
91008: PUSH
91009: LD_OWVAR 2
91013: PUSH
91014: EMPTY
91015: LIST
91016: LIST
91017: PUSH
91018: LD_INT 2
91020: PUSH
91021: LD_INT 25
91023: PUSH
91024: LD_INT 5
91026: PUSH
91027: EMPTY
91028: LIST
91029: LIST
91030: PUSH
91031: LD_INT 25
91033: PUSH
91034: LD_INT 9
91036: PUSH
91037: EMPTY
91038: LIST
91039: LIST
91040: PUSH
91041: LD_INT 25
91043: PUSH
91044: LD_INT 8
91046: PUSH
91047: EMPTY
91048: LIST
91049: LIST
91050: PUSH
91051: EMPTY
91052: LIST
91053: LIST
91054: LIST
91055: LIST
91056: PUSH
91057: EMPTY
91058: LIST
91059: LIST
91060: PPUSH
91061: CALL_OW 69
91065: PUSH
91066: FOR_IN
91067: IFFALSE 91083
// begin SetClass ( i , 1 ) ;
91069: LD_VAR 0 1
91073: PPUSH
91074: LD_INT 1
91076: PPUSH
91077: CALL_OW 336
// end ;
91081: GO 91066
91083: POP
91084: POP
// end ;
91085: PPOPN 1
91087: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
91088: LD_EXP 88
91092: PUSH
91093: LD_EXP 92
91097: AND
91098: PUSH
91099: LD_OWVAR 65
91103: PUSH
91104: LD_INT 7
91106: LESS
91107: AND
91108: IFFALSE 91122
91110: GO 91112
91112: DISABLE
// begin enable ;
91113: ENABLE
// game_speed := 7 ;
91114: LD_ADDR_OWVAR 65
91118: PUSH
91119: LD_INT 7
91121: ST_TO_ADDR
// end ;
91122: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
91123: LD_EXP 88
91127: PUSH
91128: LD_EXP 95
91132: AND
91133: IFFALSE 91335
91135: GO 91137
91137: DISABLE
91138: LD_INT 0
91140: PPUSH
91141: PPUSH
91142: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
91143: LD_ADDR_VAR 0 3
91147: PUSH
91148: LD_INT 81
91150: PUSH
91151: LD_OWVAR 2
91155: PUSH
91156: EMPTY
91157: LIST
91158: LIST
91159: PUSH
91160: LD_INT 21
91162: PUSH
91163: LD_INT 1
91165: PUSH
91166: EMPTY
91167: LIST
91168: LIST
91169: PUSH
91170: EMPTY
91171: LIST
91172: LIST
91173: PPUSH
91174: CALL_OW 69
91178: ST_TO_ADDR
// if not tmp then
91179: LD_VAR 0 3
91183: NOT
91184: IFFALSE 91188
// exit ;
91186: GO 91335
// if tmp > 5 then
91188: LD_VAR 0 3
91192: PUSH
91193: LD_INT 5
91195: GREATER
91196: IFFALSE 91208
// k := 5 else
91198: LD_ADDR_VAR 0 2
91202: PUSH
91203: LD_INT 5
91205: ST_TO_ADDR
91206: GO 91218
// k := tmp ;
91208: LD_ADDR_VAR 0 2
91212: PUSH
91213: LD_VAR 0 3
91217: ST_TO_ADDR
// for i := 1 to k do
91218: LD_ADDR_VAR 0 1
91222: PUSH
91223: DOUBLE
91224: LD_INT 1
91226: DEC
91227: ST_TO_ADDR
91228: LD_VAR 0 2
91232: PUSH
91233: FOR_TO
91234: IFFALSE 91333
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
91236: LD_VAR 0 3
91240: PUSH
91241: LD_VAR 0 1
91245: ARRAY
91246: PPUSH
91247: LD_VAR 0 1
91251: PUSH
91252: LD_INT 4
91254: MOD
91255: PUSH
91256: LD_INT 1
91258: PLUS
91259: PPUSH
91260: CALL_OW 259
91264: PUSH
91265: LD_INT 10
91267: LESS
91268: IFFALSE 91331
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
91270: LD_VAR 0 3
91274: PUSH
91275: LD_VAR 0 1
91279: ARRAY
91280: PPUSH
91281: LD_VAR 0 1
91285: PUSH
91286: LD_INT 4
91288: MOD
91289: PUSH
91290: LD_INT 1
91292: PLUS
91293: PPUSH
91294: LD_VAR 0 3
91298: PUSH
91299: LD_VAR 0 1
91303: ARRAY
91304: PPUSH
91305: LD_VAR 0 1
91309: PUSH
91310: LD_INT 4
91312: MOD
91313: PUSH
91314: LD_INT 1
91316: PLUS
91317: PPUSH
91318: CALL_OW 259
91322: PUSH
91323: LD_INT 1
91325: PLUS
91326: PPUSH
91327: CALL_OW 237
91331: GO 91233
91333: POP
91334: POP
// end ;
91335: PPOPN 3
91337: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
91338: LD_EXP 88
91342: PUSH
91343: LD_EXP 96
91347: AND
91348: IFFALSE 91368
91350: GO 91352
91352: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
91353: LD_INT 4
91355: PPUSH
91356: LD_OWVAR 2
91360: PPUSH
91361: LD_INT 0
91363: PPUSH
91364: CALL_OW 324
91368: END
// every 0 0$1 trigger StreamModeActive and sShovel do
91369: LD_EXP 88
91373: PUSH
91374: LD_EXP 125
91378: AND
91379: IFFALSE 91399
91381: GO 91383
91383: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
91384: LD_INT 19
91386: PPUSH
91387: LD_OWVAR 2
91391: PPUSH
91392: LD_INT 0
91394: PPUSH
91395: CALL_OW 324
91399: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
91400: LD_EXP 88
91404: PUSH
91405: LD_EXP 97
91409: AND
91410: IFFALSE 91512
91412: GO 91414
91414: DISABLE
91415: LD_INT 0
91417: PPUSH
91418: PPUSH
// begin enable ;
91419: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
91420: LD_ADDR_VAR 0 2
91424: PUSH
91425: LD_INT 22
91427: PUSH
91428: LD_OWVAR 2
91432: PUSH
91433: EMPTY
91434: LIST
91435: LIST
91436: PUSH
91437: LD_INT 2
91439: PUSH
91440: LD_INT 34
91442: PUSH
91443: LD_INT 11
91445: PUSH
91446: EMPTY
91447: LIST
91448: LIST
91449: PUSH
91450: LD_INT 34
91452: PUSH
91453: LD_INT 30
91455: PUSH
91456: EMPTY
91457: LIST
91458: LIST
91459: PUSH
91460: EMPTY
91461: LIST
91462: LIST
91463: LIST
91464: PUSH
91465: EMPTY
91466: LIST
91467: LIST
91468: PPUSH
91469: CALL_OW 69
91473: ST_TO_ADDR
// if not tmp then
91474: LD_VAR 0 2
91478: NOT
91479: IFFALSE 91483
// exit ;
91481: GO 91512
// for i in tmp do
91483: LD_ADDR_VAR 0 1
91487: PUSH
91488: LD_VAR 0 2
91492: PUSH
91493: FOR_IN
91494: IFFALSE 91510
// begin SetLives ( i , 0 ) ;
91496: LD_VAR 0 1
91500: PPUSH
91501: LD_INT 0
91503: PPUSH
91504: CALL_OW 234
// end ;
91508: GO 91493
91510: POP
91511: POP
// end ;
91512: PPOPN 2
91514: END
// every 0 0$1 trigger StreamModeActive and sBunker do
91515: LD_EXP 88
91519: PUSH
91520: LD_EXP 98
91524: AND
91525: IFFALSE 91545
91527: GO 91529
91529: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
91530: LD_INT 32
91532: PPUSH
91533: LD_OWVAR 2
91537: PPUSH
91538: LD_INT 0
91540: PPUSH
91541: CALL_OW 324
91545: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
91546: LD_EXP 88
91550: PUSH
91551: LD_EXP 99
91555: AND
91556: IFFALSE 91737
91558: GO 91560
91560: DISABLE
91561: LD_INT 0
91563: PPUSH
91564: PPUSH
91565: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
91566: LD_ADDR_VAR 0 2
91570: PUSH
91571: LD_INT 22
91573: PUSH
91574: LD_OWVAR 2
91578: PUSH
91579: EMPTY
91580: LIST
91581: LIST
91582: PUSH
91583: LD_INT 33
91585: PUSH
91586: LD_INT 3
91588: PUSH
91589: EMPTY
91590: LIST
91591: LIST
91592: PUSH
91593: EMPTY
91594: LIST
91595: LIST
91596: PPUSH
91597: CALL_OW 69
91601: ST_TO_ADDR
// if not tmp then
91602: LD_VAR 0 2
91606: NOT
91607: IFFALSE 91611
// exit ;
91609: GO 91737
// side := 0 ;
91611: LD_ADDR_VAR 0 3
91615: PUSH
91616: LD_INT 0
91618: ST_TO_ADDR
// for i := 1 to 8 do
91619: LD_ADDR_VAR 0 1
91623: PUSH
91624: DOUBLE
91625: LD_INT 1
91627: DEC
91628: ST_TO_ADDR
91629: LD_INT 8
91631: PUSH
91632: FOR_TO
91633: IFFALSE 91681
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
91635: LD_OWVAR 2
91639: PUSH
91640: LD_VAR 0 1
91644: NONEQUAL
91645: PUSH
91646: LD_OWVAR 2
91650: PPUSH
91651: LD_VAR 0 1
91655: PPUSH
91656: CALL_OW 81
91660: PUSH
91661: LD_INT 2
91663: EQUAL
91664: AND
91665: IFFALSE 91679
// begin side := i ;
91667: LD_ADDR_VAR 0 3
91671: PUSH
91672: LD_VAR 0 1
91676: ST_TO_ADDR
// break ;
91677: GO 91681
// end ;
91679: GO 91632
91681: POP
91682: POP
// if not side then
91683: LD_VAR 0 3
91687: NOT
91688: IFFALSE 91692
// exit ;
91690: GO 91737
// for i := 1 to tmp do
91692: LD_ADDR_VAR 0 1
91696: PUSH
91697: DOUBLE
91698: LD_INT 1
91700: DEC
91701: ST_TO_ADDR
91702: LD_VAR 0 2
91706: PUSH
91707: FOR_TO
91708: IFFALSE 91735
// if Prob ( 60 ) then
91710: LD_INT 60
91712: PPUSH
91713: CALL_OW 13
91717: IFFALSE 91733
// SetSide ( i , side ) ;
91719: LD_VAR 0 1
91723: PPUSH
91724: LD_VAR 0 3
91728: PPUSH
91729: CALL_OW 235
91733: GO 91707
91735: POP
91736: POP
// end ;
91737: PPOPN 3
91739: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
91740: LD_EXP 88
91744: PUSH
91745: LD_EXP 101
91749: AND
91750: IFFALSE 91869
91752: GO 91754
91754: DISABLE
91755: LD_INT 0
91757: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
91758: LD_ADDR_VAR 0 1
91762: PUSH
91763: LD_INT 22
91765: PUSH
91766: LD_OWVAR 2
91770: PUSH
91771: EMPTY
91772: LIST
91773: LIST
91774: PUSH
91775: LD_INT 21
91777: PUSH
91778: LD_INT 1
91780: PUSH
91781: EMPTY
91782: LIST
91783: LIST
91784: PUSH
91785: LD_INT 3
91787: PUSH
91788: LD_INT 23
91790: PUSH
91791: LD_INT 0
91793: PUSH
91794: EMPTY
91795: LIST
91796: LIST
91797: PUSH
91798: EMPTY
91799: LIST
91800: LIST
91801: PUSH
91802: EMPTY
91803: LIST
91804: LIST
91805: LIST
91806: PPUSH
91807: CALL_OW 69
91811: PUSH
91812: FOR_IN
91813: IFFALSE 91867
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
91815: LD_VAR 0 1
91819: PPUSH
91820: CALL_OW 257
91824: PUSH
91825: LD_INT 1
91827: PUSH
91828: LD_INT 2
91830: PUSH
91831: LD_INT 3
91833: PUSH
91834: LD_INT 4
91836: PUSH
91837: EMPTY
91838: LIST
91839: LIST
91840: LIST
91841: LIST
91842: IN
91843: IFFALSE 91865
// SetClass ( un , rand ( 1 , 4 ) ) ;
91845: LD_VAR 0 1
91849: PPUSH
91850: LD_INT 1
91852: PPUSH
91853: LD_INT 4
91855: PPUSH
91856: CALL_OW 12
91860: PPUSH
91861: CALL_OW 336
91865: GO 91812
91867: POP
91868: POP
// end ;
91869: PPOPN 1
91871: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
91872: LD_EXP 88
91876: PUSH
91877: LD_EXP 100
91881: AND
91882: IFFALSE 91961
91884: GO 91886
91886: DISABLE
91887: LD_INT 0
91889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
91890: LD_ADDR_VAR 0 1
91894: PUSH
91895: LD_INT 22
91897: PUSH
91898: LD_OWVAR 2
91902: PUSH
91903: EMPTY
91904: LIST
91905: LIST
91906: PUSH
91907: LD_INT 21
91909: PUSH
91910: LD_INT 3
91912: PUSH
91913: EMPTY
91914: LIST
91915: LIST
91916: PUSH
91917: EMPTY
91918: LIST
91919: LIST
91920: PPUSH
91921: CALL_OW 69
91925: ST_TO_ADDR
// if not tmp then
91926: LD_VAR 0 1
91930: NOT
91931: IFFALSE 91935
// exit ;
91933: GO 91961
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
91935: LD_VAR 0 1
91939: PUSH
91940: LD_INT 1
91942: PPUSH
91943: LD_VAR 0 1
91947: PPUSH
91948: CALL_OW 12
91952: ARRAY
91953: PPUSH
91954: LD_INT 100
91956: PPUSH
91957: CALL_OW 234
// end ;
91961: PPOPN 1
91963: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
91964: LD_EXP 88
91968: PUSH
91969: LD_EXP 102
91973: AND
91974: IFFALSE 92072
91976: GO 91978
91978: DISABLE
91979: LD_INT 0
91981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
91982: LD_ADDR_VAR 0 1
91986: PUSH
91987: LD_INT 22
91989: PUSH
91990: LD_OWVAR 2
91994: PUSH
91995: EMPTY
91996: LIST
91997: LIST
91998: PUSH
91999: LD_INT 21
92001: PUSH
92002: LD_INT 1
92004: PUSH
92005: EMPTY
92006: LIST
92007: LIST
92008: PUSH
92009: EMPTY
92010: LIST
92011: LIST
92012: PPUSH
92013: CALL_OW 69
92017: ST_TO_ADDR
// if not tmp then
92018: LD_VAR 0 1
92022: NOT
92023: IFFALSE 92027
// exit ;
92025: GO 92072
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
92027: LD_VAR 0 1
92031: PUSH
92032: LD_INT 1
92034: PPUSH
92035: LD_VAR 0 1
92039: PPUSH
92040: CALL_OW 12
92044: ARRAY
92045: PPUSH
92046: LD_INT 1
92048: PPUSH
92049: LD_INT 4
92051: PPUSH
92052: CALL_OW 12
92056: PPUSH
92057: LD_INT 3000
92059: PPUSH
92060: LD_INT 9000
92062: PPUSH
92063: CALL_OW 12
92067: PPUSH
92068: CALL_OW 492
// end ;
92072: PPOPN 1
92074: END
// every 0 0$1 trigger StreamModeActive and sDepot do
92075: LD_EXP 88
92079: PUSH
92080: LD_EXP 103
92084: AND
92085: IFFALSE 92105
92087: GO 92089
92089: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
92090: LD_INT 1
92092: PPUSH
92093: LD_OWVAR 2
92097: PPUSH
92098: LD_INT 0
92100: PPUSH
92101: CALL_OW 324
92105: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
92106: LD_EXP 88
92110: PUSH
92111: LD_EXP 104
92115: AND
92116: IFFALSE 92199
92118: GO 92120
92120: DISABLE
92121: LD_INT 0
92123: PPUSH
92124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
92125: LD_ADDR_VAR 0 2
92129: PUSH
92130: LD_INT 22
92132: PUSH
92133: LD_OWVAR 2
92137: PUSH
92138: EMPTY
92139: LIST
92140: LIST
92141: PUSH
92142: LD_INT 21
92144: PUSH
92145: LD_INT 3
92147: PUSH
92148: EMPTY
92149: LIST
92150: LIST
92151: PUSH
92152: EMPTY
92153: LIST
92154: LIST
92155: PPUSH
92156: CALL_OW 69
92160: ST_TO_ADDR
// if not tmp then
92161: LD_VAR 0 2
92165: NOT
92166: IFFALSE 92170
// exit ;
92168: GO 92199
// for i in tmp do
92170: LD_ADDR_VAR 0 1
92174: PUSH
92175: LD_VAR 0 2
92179: PUSH
92180: FOR_IN
92181: IFFALSE 92197
// SetBLevel ( i , 10 ) ;
92183: LD_VAR 0 1
92187: PPUSH
92188: LD_INT 10
92190: PPUSH
92191: CALL_OW 241
92195: GO 92180
92197: POP
92198: POP
// end ;
92199: PPOPN 2
92201: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
92202: LD_EXP 88
92206: PUSH
92207: LD_EXP 105
92211: AND
92212: IFFALSE 92323
92214: GO 92216
92216: DISABLE
92217: LD_INT 0
92219: PPUSH
92220: PPUSH
92221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
92222: LD_ADDR_VAR 0 3
92226: PUSH
92227: LD_INT 22
92229: PUSH
92230: LD_OWVAR 2
92234: PUSH
92235: EMPTY
92236: LIST
92237: LIST
92238: PUSH
92239: LD_INT 25
92241: PUSH
92242: LD_INT 1
92244: PUSH
92245: EMPTY
92246: LIST
92247: LIST
92248: PUSH
92249: EMPTY
92250: LIST
92251: LIST
92252: PPUSH
92253: CALL_OW 69
92257: ST_TO_ADDR
// if not tmp then
92258: LD_VAR 0 3
92262: NOT
92263: IFFALSE 92267
// exit ;
92265: GO 92323
// un := tmp [ rand ( 1 , tmp ) ] ;
92267: LD_ADDR_VAR 0 2
92271: PUSH
92272: LD_VAR 0 3
92276: PUSH
92277: LD_INT 1
92279: PPUSH
92280: LD_VAR 0 3
92284: PPUSH
92285: CALL_OW 12
92289: ARRAY
92290: ST_TO_ADDR
// if Crawls ( un ) then
92291: LD_VAR 0 2
92295: PPUSH
92296: CALL_OW 318
92300: IFFALSE 92311
// ComWalk ( un ) ;
92302: LD_VAR 0 2
92306: PPUSH
92307: CALL_OW 138
// SetClass ( un , class_sniper ) ;
92311: LD_VAR 0 2
92315: PPUSH
92316: LD_INT 5
92318: PPUSH
92319: CALL_OW 336
// end ;
92323: PPOPN 3
92325: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
92326: LD_EXP 88
92330: PUSH
92331: LD_EXP 106
92335: AND
92336: PUSH
92337: LD_OWVAR 67
92341: PUSH
92342: LD_INT 3
92344: LESS
92345: AND
92346: IFFALSE 92365
92348: GO 92350
92350: DISABLE
// Difficulty := Difficulty + 1 ;
92351: LD_ADDR_OWVAR 67
92355: PUSH
92356: LD_OWVAR 67
92360: PUSH
92361: LD_INT 1
92363: PLUS
92364: ST_TO_ADDR
92365: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
92366: LD_EXP 88
92370: PUSH
92371: LD_EXP 107
92375: AND
92376: IFFALSE 92479
92378: GO 92380
92380: DISABLE
92381: LD_INT 0
92383: PPUSH
// begin for i := 1 to 5 do
92384: LD_ADDR_VAR 0 1
92388: PUSH
92389: DOUBLE
92390: LD_INT 1
92392: DEC
92393: ST_TO_ADDR
92394: LD_INT 5
92396: PUSH
92397: FOR_TO
92398: IFFALSE 92477
// begin uc_nation := nation_nature ;
92400: LD_ADDR_OWVAR 21
92404: PUSH
92405: LD_INT 0
92407: ST_TO_ADDR
// uc_side := 0 ;
92408: LD_ADDR_OWVAR 20
92412: PUSH
92413: LD_INT 0
92415: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
92416: LD_ADDR_OWVAR 29
92420: PUSH
92421: LD_INT 12
92423: PUSH
92424: LD_INT 12
92426: PUSH
92427: EMPTY
92428: LIST
92429: LIST
92430: ST_TO_ADDR
// hc_agressivity := 20 ;
92431: LD_ADDR_OWVAR 35
92435: PUSH
92436: LD_INT 20
92438: ST_TO_ADDR
// hc_class := class_tiger ;
92439: LD_ADDR_OWVAR 28
92443: PUSH
92444: LD_INT 14
92446: ST_TO_ADDR
// hc_gallery :=  ;
92447: LD_ADDR_OWVAR 33
92451: PUSH
92452: LD_STRING 
92454: ST_TO_ADDR
// hc_name :=  ;
92455: LD_ADDR_OWVAR 26
92459: PUSH
92460: LD_STRING 
92462: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
92463: CALL_OW 44
92467: PPUSH
92468: LD_INT 0
92470: PPUSH
92471: CALL_OW 51
// end ;
92475: GO 92397
92477: POP
92478: POP
// end ;
92479: PPOPN 1
92481: END
// every 0 0$1 trigger StreamModeActive and sBomb do
92482: LD_EXP 88
92486: PUSH
92487: LD_EXP 108
92491: AND
92492: IFFALSE 92501
92494: GO 92496
92496: DISABLE
// StreamSibBomb ;
92497: CALL 92502 0 0
92501: END
// export function StreamSibBomb ; var i , x , y ; begin
92502: LD_INT 0
92504: PPUSH
92505: PPUSH
92506: PPUSH
92507: PPUSH
// result := false ;
92508: LD_ADDR_VAR 0 1
92512: PUSH
92513: LD_INT 0
92515: ST_TO_ADDR
// for i := 1 to 16 do
92516: LD_ADDR_VAR 0 2
92520: PUSH
92521: DOUBLE
92522: LD_INT 1
92524: DEC
92525: ST_TO_ADDR
92526: LD_INT 16
92528: PUSH
92529: FOR_TO
92530: IFFALSE 92729
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
92532: LD_ADDR_VAR 0 3
92536: PUSH
92537: LD_INT 10
92539: PUSH
92540: LD_INT 20
92542: PUSH
92543: LD_INT 30
92545: PUSH
92546: LD_INT 40
92548: PUSH
92549: LD_INT 50
92551: PUSH
92552: LD_INT 60
92554: PUSH
92555: LD_INT 70
92557: PUSH
92558: LD_INT 80
92560: PUSH
92561: LD_INT 90
92563: PUSH
92564: LD_INT 100
92566: PUSH
92567: LD_INT 110
92569: PUSH
92570: LD_INT 120
92572: PUSH
92573: LD_INT 130
92575: PUSH
92576: LD_INT 140
92578: PUSH
92579: LD_INT 150
92581: PUSH
92582: EMPTY
92583: LIST
92584: LIST
92585: LIST
92586: LIST
92587: LIST
92588: LIST
92589: LIST
92590: LIST
92591: LIST
92592: LIST
92593: LIST
92594: LIST
92595: LIST
92596: LIST
92597: LIST
92598: PUSH
92599: LD_INT 1
92601: PPUSH
92602: LD_INT 15
92604: PPUSH
92605: CALL_OW 12
92609: ARRAY
92610: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
92611: LD_ADDR_VAR 0 4
92615: PUSH
92616: LD_INT 10
92618: PUSH
92619: LD_INT 20
92621: PUSH
92622: LD_INT 30
92624: PUSH
92625: LD_INT 40
92627: PUSH
92628: LD_INT 50
92630: PUSH
92631: LD_INT 60
92633: PUSH
92634: LD_INT 70
92636: PUSH
92637: LD_INT 80
92639: PUSH
92640: LD_INT 90
92642: PUSH
92643: LD_INT 100
92645: PUSH
92646: LD_INT 110
92648: PUSH
92649: LD_INT 120
92651: PUSH
92652: LD_INT 130
92654: PUSH
92655: LD_INT 140
92657: PUSH
92658: LD_INT 150
92660: PUSH
92661: EMPTY
92662: LIST
92663: LIST
92664: LIST
92665: LIST
92666: LIST
92667: LIST
92668: LIST
92669: LIST
92670: LIST
92671: LIST
92672: LIST
92673: LIST
92674: LIST
92675: LIST
92676: LIST
92677: PUSH
92678: LD_INT 1
92680: PPUSH
92681: LD_INT 15
92683: PPUSH
92684: CALL_OW 12
92688: ARRAY
92689: ST_TO_ADDR
// if ValidHex ( x , y ) then
92690: LD_VAR 0 3
92694: PPUSH
92695: LD_VAR 0 4
92699: PPUSH
92700: CALL_OW 488
92704: IFFALSE 92727
// begin result := [ x , y ] ;
92706: LD_ADDR_VAR 0 1
92710: PUSH
92711: LD_VAR 0 3
92715: PUSH
92716: LD_VAR 0 4
92720: PUSH
92721: EMPTY
92722: LIST
92723: LIST
92724: ST_TO_ADDR
// break ;
92725: GO 92729
// end ; end ;
92727: GO 92529
92729: POP
92730: POP
// if result then
92731: LD_VAR 0 1
92735: IFFALSE 92795
// begin ToLua ( playSibBomb() ) ;
92737: LD_STRING playSibBomb()
92739: PPUSH
92740: CALL_OW 559
// wait ( 0 0$14 ) ;
92744: LD_INT 490
92746: PPUSH
92747: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
92751: LD_VAR 0 1
92755: PUSH
92756: LD_INT 1
92758: ARRAY
92759: PPUSH
92760: LD_VAR 0 1
92764: PUSH
92765: LD_INT 2
92767: ARRAY
92768: PPUSH
92769: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
92773: LD_VAR 0 1
92777: PUSH
92778: LD_INT 1
92780: ARRAY
92781: PPUSH
92782: LD_VAR 0 1
92786: PUSH
92787: LD_INT 2
92789: ARRAY
92790: PPUSH
92791: CALL_OW 429
// end ; end ;
92795: LD_VAR 0 1
92799: RET
// every 0 0$1 trigger StreamModeActive and sReset do
92800: LD_EXP 88
92804: PUSH
92805: LD_EXP 110
92809: AND
92810: IFFALSE 92822
92812: GO 92814
92814: DISABLE
// YouLost (  ) ;
92815: LD_STRING 
92817: PPUSH
92818: CALL_OW 104
92822: END
// every 0 0$1 trigger StreamModeActive and sFog do
92823: LD_EXP 88
92827: PUSH
92828: LD_EXP 109
92832: AND
92833: IFFALSE 92847
92835: GO 92837
92837: DISABLE
// FogOff ( your_side ) ;
92838: LD_OWVAR 2
92842: PPUSH
92843: CALL_OW 344
92847: END
// every 0 0$1 trigger StreamModeActive and sSun do
92848: LD_EXP 88
92852: PUSH
92853: LD_EXP 111
92857: AND
92858: IFFALSE 92886
92860: GO 92862
92862: DISABLE
// begin solar_recharge_percent := 0 ;
92863: LD_ADDR_OWVAR 79
92867: PUSH
92868: LD_INT 0
92870: ST_TO_ADDR
// wait ( 5 5$00 ) ;
92871: LD_INT 10500
92873: PPUSH
92874: CALL_OW 67
// solar_recharge_percent := 100 ;
92878: LD_ADDR_OWVAR 79
92882: PUSH
92883: LD_INT 100
92885: ST_TO_ADDR
// end ;
92886: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
92887: LD_EXP 88
92891: PUSH
92892: LD_EXP 112
92896: AND
92897: IFFALSE 93136
92899: GO 92901
92901: DISABLE
92902: LD_INT 0
92904: PPUSH
92905: PPUSH
92906: PPUSH
// begin tmp := [ ] ;
92907: LD_ADDR_VAR 0 3
92911: PUSH
92912: EMPTY
92913: ST_TO_ADDR
// for i := 1 to 6 do
92914: LD_ADDR_VAR 0 1
92918: PUSH
92919: DOUBLE
92920: LD_INT 1
92922: DEC
92923: ST_TO_ADDR
92924: LD_INT 6
92926: PUSH
92927: FOR_TO
92928: IFFALSE 93033
// begin uc_nation := nation_nature ;
92930: LD_ADDR_OWVAR 21
92934: PUSH
92935: LD_INT 0
92937: ST_TO_ADDR
// uc_side := 0 ;
92938: LD_ADDR_OWVAR 20
92942: PUSH
92943: LD_INT 0
92945: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
92946: LD_ADDR_OWVAR 29
92950: PUSH
92951: LD_INT 12
92953: PUSH
92954: LD_INT 12
92956: PUSH
92957: EMPTY
92958: LIST
92959: LIST
92960: ST_TO_ADDR
// hc_agressivity := 20 ;
92961: LD_ADDR_OWVAR 35
92965: PUSH
92966: LD_INT 20
92968: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
92969: LD_ADDR_OWVAR 28
92973: PUSH
92974: LD_INT 17
92976: ST_TO_ADDR
// hc_gallery :=  ;
92977: LD_ADDR_OWVAR 33
92981: PUSH
92982: LD_STRING 
92984: ST_TO_ADDR
// hc_name :=  ;
92985: LD_ADDR_OWVAR 26
92989: PUSH
92990: LD_STRING 
92992: ST_TO_ADDR
// un := CreateHuman ;
92993: LD_ADDR_VAR 0 2
92997: PUSH
92998: CALL_OW 44
93002: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
93003: LD_VAR 0 2
93007: PPUSH
93008: LD_INT 1
93010: PPUSH
93011: CALL_OW 51
// tmp := tmp ^ un ;
93015: LD_ADDR_VAR 0 3
93019: PUSH
93020: LD_VAR 0 3
93024: PUSH
93025: LD_VAR 0 2
93029: ADD
93030: ST_TO_ADDR
// end ;
93031: GO 92927
93033: POP
93034: POP
// repeat wait ( 0 0$1 ) ;
93035: LD_INT 35
93037: PPUSH
93038: CALL_OW 67
// for un in tmp do
93042: LD_ADDR_VAR 0 2
93046: PUSH
93047: LD_VAR 0 3
93051: PUSH
93052: FOR_IN
93053: IFFALSE 93127
// begin if IsDead ( un ) then
93055: LD_VAR 0 2
93059: PPUSH
93060: CALL_OW 301
93064: IFFALSE 93084
// begin tmp := tmp diff un ;
93066: LD_ADDR_VAR 0 3
93070: PUSH
93071: LD_VAR 0 3
93075: PUSH
93076: LD_VAR 0 2
93080: DIFF
93081: ST_TO_ADDR
// continue ;
93082: GO 93052
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
93084: LD_VAR 0 2
93088: PPUSH
93089: LD_INT 3
93091: PUSH
93092: LD_INT 22
93094: PUSH
93095: LD_INT 0
93097: PUSH
93098: EMPTY
93099: LIST
93100: LIST
93101: PUSH
93102: EMPTY
93103: LIST
93104: LIST
93105: PPUSH
93106: CALL_OW 69
93110: PPUSH
93111: LD_VAR 0 2
93115: PPUSH
93116: CALL_OW 74
93120: PPUSH
93121: CALL_OW 115
// end ;
93125: GO 93052
93127: POP
93128: POP
// until not tmp ;
93129: LD_VAR 0 3
93133: NOT
93134: IFFALSE 93035
// end ;
93136: PPOPN 3
93138: END
// every 0 0$1 trigger StreamModeActive and sTroll do
93139: LD_EXP 88
93143: PUSH
93144: LD_EXP 113
93148: AND
93149: IFFALSE 93203
93151: GO 93153
93153: DISABLE
// begin ToLua ( displayTroll(); ) ;
93154: LD_STRING displayTroll();
93156: PPUSH
93157: CALL_OW 559
// wait ( 3 3$00 ) ;
93161: LD_INT 6300
93163: PPUSH
93164: CALL_OW 67
// ToLua ( hideTroll(); ) ;
93168: LD_STRING hideTroll();
93170: PPUSH
93171: CALL_OW 559
// wait ( 1 1$00 ) ;
93175: LD_INT 2100
93177: PPUSH
93178: CALL_OW 67
// ToLua ( displayTroll(); ) ;
93182: LD_STRING displayTroll();
93184: PPUSH
93185: CALL_OW 559
// wait ( 1 1$00 ) ;
93189: LD_INT 2100
93191: PPUSH
93192: CALL_OW 67
// ToLua ( hideTroll(); ) ;
93196: LD_STRING hideTroll();
93198: PPUSH
93199: CALL_OW 559
// end ;
93203: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
93204: LD_EXP 88
93208: PUSH
93209: LD_EXP 114
93213: AND
93214: IFFALSE 93277
93216: GO 93218
93218: DISABLE
93219: LD_INT 0
93221: PPUSH
// begin p := 0 ;
93222: LD_ADDR_VAR 0 1
93226: PUSH
93227: LD_INT 0
93229: ST_TO_ADDR
// repeat game_speed := 1 ;
93230: LD_ADDR_OWVAR 65
93234: PUSH
93235: LD_INT 1
93237: ST_TO_ADDR
// wait ( 0 0$1 ) ;
93238: LD_INT 35
93240: PPUSH
93241: CALL_OW 67
// p := p + 1 ;
93245: LD_ADDR_VAR 0 1
93249: PUSH
93250: LD_VAR 0 1
93254: PUSH
93255: LD_INT 1
93257: PLUS
93258: ST_TO_ADDR
// until p >= 60 ;
93259: LD_VAR 0 1
93263: PUSH
93264: LD_INT 60
93266: GREATEREQUAL
93267: IFFALSE 93230
// game_speed := 4 ;
93269: LD_ADDR_OWVAR 65
93273: PUSH
93274: LD_INT 4
93276: ST_TO_ADDR
// end ;
93277: PPOPN 1
93279: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
93280: LD_EXP 88
93284: PUSH
93285: LD_EXP 115
93289: AND
93290: IFFALSE 93436
93292: GO 93294
93294: DISABLE
93295: LD_INT 0
93297: PPUSH
93298: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
93299: LD_ADDR_VAR 0 1
93303: PUSH
93304: LD_INT 22
93306: PUSH
93307: LD_OWVAR 2
93311: PUSH
93312: EMPTY
93313: LIST
93314: LIST
93315: PUSH
93316: LD_INT 2
93318: PUSH
93319: LD_INT 30
93321: PUSH
93322: LD_INT 0
93324: PUSH
93325: EMPTY
93326: LIST
93327: LIST
93328: PUSH
93329: LD_INT 30
93331: PUSH
93332: LD_INT 1
93334: PUSH
93335: EMPTY
93336: LIST
93337: LIST
93338: PUSH
93339: EMPTY
93340: LIST
93341: LIST
93342: LIST
93343: PUSH
93344: EMPTY
93345: LIST
93346: LIST
93347: PPUSH
93348: CALL_OW 69
93352: ST_TO_ADDR
// if not depot then
93353: LD_VAR 0 1
93357: NOT
93358: IFFALSE 93362
// exit ;
93360: GO 93436
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
93362: LD_ADDR_VAR 0 2
93366: PUSH
93367: LD_VAR 0 1
93371: PUSH
93372: LD_INT 1
93374: PPUSH
93375: LD_VAR 0 1
93379: PPUSH
93380: CALL_OW 12
93384: ARRAY
93385: PPUSH
93386: CALL_OW 274
93390: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
93391: LD_VAR 0 2
93395: PPUSH
93396: LD_INT 1
93398: PPUSH
93399: LD_INT 0
93401: PPUSH
93402: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
93406: LD_VAR 0 2
93410: PPUSH
93411: LD_INT 2
93413: PPUSH
93414: LD_INT 0
93416: PPUSH
93417: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
93421: LD_VAR 0 2
93425: PPUSH
93426: LD_INT 3
93428: PPUSH
93429: LD_INT 0
93431: PPUSH
93432: CALL_OW 277
// end ;
93436: PPOPN 2
93438: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
93439: LD_EXP 88
93443: PUSH
93444: LD_EXP 116
93448: AND
93449: IFFALSE 93546
93451: GO 93453
93453: DISABLE
93454: LD_INT 0
93456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
93457: LD_ADDR_VAR 0 1
93461: PUSH
93462: LD_INT 22
93464: PUSH
93465: LD_OWVAR 2
93469: PUSH
93470: EMPTY
93471: LIST
93472: LIST
93473: PUSH
93474: LD_INT 21
93476: PUSH
93477: LD_INT 1
93479: PUSH
93480: EMPTY
93481: LIST
93482: LIST
93483: PUSH
93484: LD_INT 3
93486: PUSH
93487: LD_INT 23
93489: PUSH
93490: LD_INT 0
93492: PUSH
93493: EMPTY
93494: LIST
93495: LIST
93496: PUSH
93497: EMPTY
93498: LIST
93499: LIST
93500: PUSH
93501: EMPTY
93502: LIST
93503: LIST
93504: LIST
93505: PPUSH
93506: CALL_OW 69
93510: ST_TO_ADDR
// if not tmp then
93511: LD_VAR 0 1
93515: NOT
93516: IFFALSE 93520
// exit ;
93518: GO 93546
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
93520: LD_VAR 0 1
93524: PUSH
93525: LD_INT 1
93527: PPUSH
93528: LD_VAR 0 1
93532: PPUSH
93533: CALL_OW 12
93537: ARRAY
93538: PPUSH
93539: LD_INT 200
93541: PPUSH
93542: CALL_OW 234
// end ;
93546: PPOPN 1
93548: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
93549: LD_EXP 88
93553: PUSH
93554: LD_EXP 117
93558: AND
93559: IFFALSE 93638
93561: GO 93563
93563: DISABLE
93564: LD_INT 0
93566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
93567: LD_ADDR_VAR 0 1
93571: PUSH
93572: LD_INT 22
93574: PUSH
93575: LD_OWVAR 2
93579: PUSH
93580: EMPTY
93581: LIST
93582: LIST
93583: PUSH
93584: LD_INT 21
93586: PUSH
93587: LD_INT 2
93589: PUSH
93590: EMPTY
93591: LIST
93592: LIST
93593: PUSH
93594: EMPTY
93595: LIST
93596: LIST
93597: PPUSH
93598: CALL_OW 69
93602: ST_TO_ADDR
// if not tmp then
93603: LD_VAR 0 1
93607: NOT
93608: IFFALSE 93612
// exit ;
93610: GO 93638
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
93612: LD_VAR 0 1
93616: PUSH
93617: LD_INT 1
93619: PPUSH
93620: LD_VAR 0 1
93624: PPUSH
93625: CALL_OW 12
93629: ARRAY
93630: PPUSH
93631: LD_INT 60
93633: PPUSH
93634: CALL_OW 234
// end ;
93638: PPOPN 1
93640: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
93641: LD_EXP 88
93645: PUSH
93646: LD_EXP 118
93650: AND
93651: IFFALSE 93750
93653: GO 93655
93655: DISABLE
93656: LD_INT 0
93658: PPUSH
93659: PPUSH
// begin enable ;
93660: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
93661: LD_ADDR_VAR 0 1
93665: PUSH
93666: LD_INT 22
93668: PUSH
93669: LD_OWVAR 2
93673: PUSH
93674: EMPTY
93675: LIST
93676: LIST
93677: PUSH
93678: LD_INT 61
93680: PUSH
93681: EMPTY
93682: LIST
93683: PUSH
93684: LD_INT 33
93686: PUSH
93687: LD_INT 2
93689: PUSH
93690: EMPTY
93691: LIST
93692: LIST
93693: PUSH
93694: EMPTY
93695: LIST
93696: LIST
93697: LIST
93698: PPUSH
93699: CALL_OW 69
93703: ST_TO_ADDR
// if not tmp then
93704: LD_VAR 0 1
93708: NOT
93709: IFFALSE 93713
// exit ;
93711: GO 93750
// for i in tmp do
93713: LD_ADDR_VAR 0 2
93717: PUSH
93718: LD_VAR 0 1
93722: PUSH
93723: FOR_IN
93724: IFFALSE 93748
// if IsControledBy ( i ) then
93726: LD_VAR 0 2
93730: PPUSH
93731: CALL_OW 312
93735: IFFALSE 93746
// ComUnlink ( i ) ;
93737: LD_VAR 0 2
93741: PPUSH
93742: CALL_OW 136
93746: GO 93723
93748: POP
93749: POP
// end ;
93750: PPOPN 2
93752: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
93753: LD_EXP 88
93757: PUSH
93758: LD_EXP 119
93762: AND
93763: IFFALSE 93903
93765: GO 93767
93767: DISABLE
93768: LD_INT 0
93770: PPUSH
93771: PPUSH
// begin ToLua ( displayPowell(); ) ;
93772: LD_STRING displayPowell();
93774: PPUSH
93775: CALL_OW 559
// uc_side := 0 ;
93779: LD_ADDR_OWVAR 20
93783: PUSH
93784: LD_INT 0
93786: ST_TO_ADDR
// uc_nation := 2 ;
93787: LD_ADDR_OWVAR 21
93791: PUSH
93792: LD_INT 2
93794: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
93795: LD_ADDR_OWVAR 37
93799: PUSH
93800: LD_INT 14
93802: ST_TO_ADDR
// vc_engine := engine_siberite ;
93803: LD_ADDR_OWVAR 39
93807: PUSH
93808: LD_INT 3
93810: ST_TO_ADDR
// vc_control := control_apeman ;
93811: LD_ADDR_OWVAR 38
93815: PUSH
93816: LD_INT 5
93818: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
93819: LD_ADDR_OWVAR 40
93823: PUSH
93824: LD_INT 29
93826: ST_TO_ADDR
// un := CreateVehicle ;
93827: LD_ADDR_VAR 0 2
93831: PUSH
93832: CALL_OW 45
93836: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
93837: LD_VAR 0 2
93841: PPUSH
93842: LD_INT 1
93844: PPUSH
93845: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
93849: LD_INT 35
93851: PPUSH
93852: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
93856: LD_VAR 0 2
93860: PPUSH
93861: LD_INT 22
93863: PUSH
93864: LD_OWVAR 2
93868: PUSH
93869: EMPTY
93870: LIST
93871: LIST
93872: PPUSH
93873: CALL_OW 69
93877: PPUSH
93878: LD_VAR 0 2
93882: PPUSH
93883: CALL_OW 74
93887: PPUSH
93888: CALL_OW 115
// until IsDead ( un ) ;
93892: LD_VAR 0 2
93896: PPUSH
93897: CALL_OW 301
93901: IFFALSE 93849
// end ;
93903: PPOPN 2
93905: END
// every 0 0$1 trigger StreamModeActive and sStu do
93906: LD_EXP 88
93910: PUSH
93911: LD_EXP 127
93915: AND
93916: IFFALSE 93932
93918: GO 93920
93920: DISABLE
// begin ToLua ( displayStucuk(); ) ;
93921: LD_STRING displayStucuk();
93923: PPUSH
93924: CALL_OW 559
// ResetFog ;
93928: CALL_OW 335
// end ;
93932: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
93933: LD_EXP 88
93937: PUSH
93938: LD_EXP 120
93942: AND
93943: IFFALSE 94084
93945: GO 93947
93947: DISABLE
93948: LD_INT 0
93950: PPUSH
93951: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
93952: LD_ADDR_VAR 0 2
93956: PUSH
93957: LD_INT 22
93959: PUSH
93960: LD_OWVAR 2
93964: PUSH
93965: EMPTY
93966: LIST
93967: LIST
93968: PUSH
93969: LD_INT 21
93971: PUSH
93972: LD_INT 1
93974: PUSH
93975: EMPTY
93976: LIST
93977: LIST
93978: PUSH
93979: EMPTY
93980: LIST
93981: LIST
93982: PPUSH
93983: CALL_OW 69
93987: ST_TO_ADDR
// if not tmp then
93988: LD_VAR 0 2
93992: NOT
93993: IFFALSE 93997
// exit ;
93995: GO 94084
// un := tmp [ rand ( 1 , tmp ) ] ;
93997: LD_ADDR_VAR 0 1
94001: PUSH
94002: LD_VAR 0 2
94006: PUSH
94007: LD_INT 1
94009: PPUSH
94010: LD_VAR 0 2
94014: PPUSH
94015: CALL_OW 12
94019: ARRAY
94020: ST_TO_ADDR
// SetSide ( un , 0 ) ;
94021: LD_VAR 0 1
94025: PPUSH
94026: LD_INT 0
94028: PPUSH
94029: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
94033: LD_VAR 0 1
94037: PPUSH
94038: LD_OWVAR 3
94042: PUSH
94043: LD_VAR 0 1
94047: DIFF
94048: PPUSH
94049: LD_VAR 0 1
94053: PPUSH
94054: CALL_OW 74
94058: PPUSH
94059: CALL_OW 115
// wait ( 0 0$20 ) ;
94063: LD_INT 700
94065: PPUSH
94066: CALL_OW 67
// SetSide ( un , your_side ) ;
94070: LD_VAR 0 1
94074: PPUSH
94075: LD_OWVAR 2
94079: PPUSH
94080: CALL_OW 235
// end ;
94084: PPOPN 2
94086: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
94087: LD_EXP 88
94091: PUSH
94092: LD_EXP 121
94096: AND
94097: IFFALSE 94203
94099: GO 94101
94101: DISABLE
94102: LD_INT 0
94104: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
94105: LD_ADDR_VAR 0 1
94109: PUSH
94110: LD_INT 22
94112: PUSH
94113: LD_OWVAR 2
94117: PUSH
94118: EMPTY
94119: LIST
94120: LIST
94121: PUSH
94122: LD_INT 2
94124: PUSH
94125: LD_INT 30
94127: PUSH
94128: LD_INT 0
94130: PUSH
94131: EMPTY
94132: LIST
94133: LIST
94134: PUSH
94135: LD_INT 30
94137: PUSH
94138: LD_INT 1
94140: PUSH
94141: EMPTY
94142: LIST
94143: LIST
94144: PUSH
94145: EMPTY
94146: LIST
94147: LIST
94148: LIST
94149: PUSH
94150: EMPTY
94151: LIST
94152: LIST
94153: PPUSH
94154: CALL_OW 69
94158: ST_TO_ADDR
// if not depot then
94159: LD_VAR 0 1
94163: NOT
94164: IFFALSE 94168
// exit ;
94166: GO 94203
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
94168: LD_VAR 0 1
94172: PUSH
94173: LD_INT 1
94175: ARRAY
94176: PPUSH
94177: CALL_OW 250
94181: PPUSH
94182: LD_VAR 0 1
94186: PUSH
94187: LD_INT 1
94189: ARRAY
94190: PPUSH
94191: CALL_OW 251
94195: PPUSH
94196: LD_INT 70
94198: PPUSH
94199: CALL_OW 495
// end ;
94203: PPOPN 1
94205: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
94206: LD_EXP 88
94210: PUSH
94211: LD_EXP 122
94215: AND
94216: IFFALSE 94427
94218: GO 94220
94220: DISABLE
94221: LD_INT 0
94223: PPUSH
94224: PPUSH
94225: PPUSH
94226: PPUSH
94227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
94228: LD_ADDR_VAR 0 5
94232: PUSH
94233: LD_INT 22
94235: PUSH
94236: LD_OWVAR 2
94240: PUSH
94241: EMPTY
94242: LIST
94243: LIST
94244: PUSH
94245: LD_INT 21
94247: PUSH
94248: LD_INT 1
94250: PUSH
94251: EMPTY
94252: LIST
94253: LIST
94254: PUSH
94255: EMPTY
94256: LIST
94257: LIST
94258: PPUSH
94259: CALL_OW 69
94263: ST_TO_ADDR
// if not tmp then
94264: LD_VAR 0 5
94268: NOT
94269: IFFALSE 94273
// exit ;
94271: GO 94427
// for i in tmp do
94273: LD_ADDR_VAR 0 1
94277: PUSH
94278: LD_VAR 0 5
94282: PUSH
94283: FOR_IN
94284: IFFALSE 94425
// begin d := rand ( 0 , 5 ) ;
94286: LD_ADDR_VAR 0 4
94290: PUSH
94291: LD_INT 0
94293: PPUSH
94294: LD_INT 5
94296: PPUSH
94297: CALL_OW 12
94301: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
94302: LD_ADDR_VAR 0 2
94306: PUSH
94307: LD_VAR 0 1
94311: PPUSH
94312: CALL_OW 250
94316: PPUSH
94317: LD_VAR 0 4
94321: PPUSH
94322: LD_INT 3
94324: PPUSH
94325: LD_INT 12
94327: PPUSH
94328: CALL_OW 12
94332: PPUSH
94333: CALL_OW 272
94337: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
94338: LD_ADDR_VAR 0 3
94342: PUSH
94343: LD_VAR 0 1
94347: PPUSH
94348: CALL_OW 251
94352: PPUSH
94353: LD_VAR 0 4
94357: PPUSH
94358: LD_INT 3
94360: PPUSH
94361: LD_INT 12
94363: PPUSH
94364: CALL_OW 12
94368: PPUSH
94369: CALL_OW 273
94373: ST_TO_ADDR
// if ValidHex ( x , y ) then
94374: LD_VAR 0 2
94378: PPUSH
94379: LD_VAR 0 3
94383: PPUSH
94384: CALL_OW 488
94388: IFFALSE 94423
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
94390: LD_VAR 0 1
94394: PPUSH
94395: LD_VAR 0 2
94399: PPUSH
94400: LD_VAR 0 3
94404: PPUSH
94405: LD_INT 3
94407: PPUSH
94408: LD_INT 6
94410: PPUSH
94411: CALL_OW 12
94415: PPUSH
94416: LD_INT 1
94418: PPUSH
94419: CALL_OW 483
// end ;
94423: GO 94283
94425: POP
94426: POP
// end ;
94427: PPOPN 5
94429: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
94430: LD_EXP 88
94434: PUSH
94435: LD_EXP 123
94439: AND
94440: IFFALSE 94534
94442: GO 94444
94444: DISABLE
94445: LD_INT 0
94447: PPUSH
94448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
94449: LD_ADDR_VAR 0 2
94453: PUSH
94454: LD_INT 22
94456: PUSH
94457: LD_OWVAR 2
94461: PUSH
94462: EMPTY
94463: LIST
94464: LIST
94465: PUSH
94466: LD_INT 32
94468: PUSH
94469: LD_INT 1
94471: PUSH
94472: EMPTY
94473: LIST
94474: LIST
94475: PUSH
94476: LD_INT 21
94478: PUSH
94479: LD_INT 2
94481: PUSH
94482: EMPTY
94483: LIST
94484: LIST
94485: PUSH
94486: EMPTY
94487: LIST
94488: LIST
94489: LIST
94490: PPUSH
94491: CALL_OW 69
94495: ST_TO_ADDR
// if not tmp then
94496: LD_VAR 0 2
94500: NOT
94501: IFFALSE 94505
// exit ;
94503: GO 94534
// for i in tmp do
94505: LD_ADDR_VAR 0 1
94509: PUSH
94510: LD_VAR 0 2
94514: PUSH
94515: FOR_IN
94516: IFFALSE 94532
// SetFuel ( i , 0 ) ;
94518: LD_VAR 0 1
94522: PPUSH
94523: LD_INT 0
94525: PPUSH
94526: CALL_OW 240
94530: GO 94515
94532: POP
94533: POP
// end ;
94534: PPOPN 2
94536: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
94537: LD_EXP 88
94541: PUSH
94542: LD_EXP 124
94546: AND
94547: IFFALSE 94613
94549: GO 94551
94551: DISABLE
94552: LD_INT 0
94554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
94555: LD_ADDR_VAR 0 1
94559: PUSH
94560: LD_INT 22
94562: PUSH
94563: LD_OWVAR 2
94567: PUSH
94568: EMPTY
94569: LIST
94570: LIST
94571: PUSH
94572: LD_INT 30
94574: PUSH
94575: LD_INT 29
94577: PUSH
94578: EMPTY
94579: LIST
94580: LIST
94581: PUSH
94582: EMPTY
94583: LIST
94584: LIST
94585: PPUSH
94586: CALL_OW 69
94590: ST_TO_ADDR
// if not tmp then
94591: LD_VAR 0 1
94595: NOT
94596: IFFALSE 94600
// exit ;
94598: GO 94613
// DestroyUnit ( tmp [ 1 ] ) ;
94600: LD_VAR 0 1
94604: PUSH
94605: LD_INT 1
94607: ARRAY
94608: PPUSH
94609: CALL_OW 65
// end ;
94613: PPOPN 1
94615: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
94616: LD_EXP 88
94620: PUSH
94621: LD_EXP 126
94625: AND
94626: IFFALSE 94755
94628: GO 94630
94630: DISABLE
94631: LD_INT 0
94633: PPUSH
// begin uc_side := 0 ;
94634: LD_ADDR_OWVAR 20
94638: PUSH
94639: LD_INT 0
94641: ST_TO_ADDR
// uc_nation := nation_arabian ;
94642: LD_ADDR_OWVAR 21
94646: PUSH
94647: LD_INT 2
94649: ST_TO_ADDR
// hc_gallery :=  ;
94650: LD_ADDR_OWVAR 33
94654: PUSH
94655: LD_STRING 
94657: ST_TO_ADDR
// hc_name :=  ;
94658: LD_ADDR_OWVAR 26
94662: PUSH
94663: LD_STRING 
94665: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
94666: LD_INT 1
94668: PPUSH
94669: LD_INT 11
94671: PPUSH
94672: LD_INT 10
94674: PPUSH
94675: CALL_OW 380
// un := CreateHuman ;
94679: LD_ADDR_VAR 0 1
94683: PUSH
94684: CALL_OW 44
94688: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
94689: LD_VAR 0 1
94693: PPUSH
94694: LD_INT 1
94696: PPUSH
94697: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
94701: LD_INT 35
94703: PPUSH
94704: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
94708: LD_VAR 0 1
94712: PPUSH
94713: LD_INT 22
94715: PUSH
94716: LD_OWVAR 2
94720: PUSH
94721: EMPTY
94722: LIST
94723: LIST
94724: PPUSH
94725: CALL_OW 69
94729: PPUSH
94730: LD_VAR 0 1
94734: PPUSH
94735: CALL_OW 74
94739: PPUSH
94740: CALL_OW 115
// until IsDead ( un ) ;
94744: LD_VAR 0 1
94748: PPUSH
94749: CALL_OW 301
94753: IFFALSE 94701
// end ;
94755: PPOPN 1
94757: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
94758: LD_EXP 88
94762: PUSH
94763: LD_EXP 128
94767: AND
94768: IFFALSE 94780
94770: GO 94772
94772: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
94773: LD_STRING earthquake(getX(game), 0, 32)
94775: PPUSH
94776: CALL_OW 559
94780: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
94781: LD_EXP 88
94785: PUSH
94786: LD_EXP 129
94790: AND
94791: IFFALSE 94882
94793: GO 94795
94795: DISABLE
94796: LD_INT 0
94798: PPUSH
// begin enable ;
94799: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
94800: LD_ADDR_VAR 0 1
94804: PUSH
94805: LD_INT 22
94807: PUSH
94808: LD_OWVAR 2
94812: PUSH
94813: EMPTY
94814: LIST
94815: LIST
94816: PUSH
94817: LD_INT 21
94819: PUSH
94820: LD_INT 2
94822: PUSH
94823: EMPTY
94824: LIST
94825: LIST
94826: PUSH
94827: LD_INT 33
94829: PUSH
94830: LD_INT 3
94832: PUSH
94833: EMPTY
94834: LIST
94835: LIST
94836: PUSH
94837: EMPTY
94838: LIST
94839: LIST
94840: LIST
94841: PPUSH
94842: CALL_OW 69
94846: ST_TO_ADDR
// if not tmp then
94847: LD_VAR 0 1
94851: NOT
94852: IFFALSE 94856
// exit ;
94854: GO 94882
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
94856: LD_VAR 0 1
94860: PUSH
94861: LD_INT 1
94863: PPUSH
94864: LD_VAR 0 1
94868: PPUSH
94869: CALL_OW 12
94873: ARRAY
94874: PPUSH
94875: LD_INT 1
94877: PPUSH
94878: CALL_OW 234
// end ;
94882: PPOPN 1
94884: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
94885: LD_EXP 88
94889: PUSH
94890: LD_EXP 130
94894: AND
94895: IFFALSE 95036
94897: GO 94899
94899: DISABLE
94900: LD_INT 0
94902: PPUSH
94903: PPUSH
94904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
94905: LD_ADDR_VAR 0 3
94909: PUSH
94910: LD_INT 22
94912: PUSH
94913: LD_OWVAR 2
94917: PUSH
94918: EMPTY
94919: LIST
94920: LIST
94921: PUSH
94922: LD_INT 25
94924: PUSH
94925: LD_INT 1
94927: PUSH
94928: EMPTY
94929: LIST
94930: LIST
94931: PUSH
94932: EMPTY
94933: LIST
94934: LIST
94935: PPUSH
94936: CALL_OW 69
94940: ST_TO_ADDR
// if not tmp then
94941: LD_VAR 0 3
94945: NOT
94946: IFFALSE 94950
// exit ;
94948: GO 95036
// un := tmp [ rand ( 1 , tmp ) ] ;
94950: LD_ADDR_VAR 0 2
94954: PUSH
94955: LD_VAR 0 3
94959: PUSH
94960: LD_INT 1
94962: PPUSH
94963: LD_VAR 0 3
94967: PPUSH
94968: CALL_OW 12
94972: ARRAY
94973: ST_TO_ADDR
// if Crawls ( un ) then
94974: LD_VAR 0 2
94978: PPUSH
94979: CALL_OW 318
94983: IFFALSE 94994
// ComWalk ( un ) ;
94985: LD_VAR 0 2
94989: PPUSH
94990: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
94994: LD_VAR 0 2
94998: PPUSH
94999: LD_INT 9
95001: PPUSH
95002: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
95006: LD_INT 28
95008: PPUSH
95009: LD_OWVAR 2
95013: PPUSH
95014: LD_INT 2
95016: PPUSH
95017: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
95021: LD_INT 29
95023: PPUSH
95024: LD_OWVAR 2
95028: PPUSH
95029: LD_INT 2
95031: PPUSH
95032: CALL_OW 322
// end ;
95036: PPOPN 3
95038: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
95039: LD_EXP 88
95043: PUSH
95044: LD_EXP 131
95048: AND
95049: IFFALSE 95160
95051: GO 95053
95053: DISABLE
95054: LD_INT 0
95056: PPUSH
95057: PPUSH
95058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
95059: LD_ADDR_VAR 0 3
95063: PUSH
95064: LD_INT 22
95066: PUSH
95067: LD_OWVAR 2
95071: PUSH
95072: EMPTY
95073: LIST
95074: LIST
95075: PUSH
95076: LD_INT 25
95078: PUSH
95079: LD_INT 1
95081: PUSH
95082: EMPTY
95083: LIST
95084: LIST
95085: PUSH
95086: EMPTY
95087: LIST
95088: LIST
95089: PPUSH
95090: CALL_OW 69
95094: ST_TO_ADDR
// if not tmp then
95095: LD_VAR 0 3
95099: NOT
95100: IFFALSE 95104
// exit ;
95102: GO 95160
// un := tmp [ rand ( 1 , tmp ) ] ;
95104: LD_ADDR_VAR 0 2
95108: PUSH
95109: LD_VAR 0 3
95113: PUSH
95114: LD_INT 1
95116: PPUSH
95117: LD_VAR 0 3
95121: PPUSH
95122: CALL_OW 12
95126: ARRAY
95127: ST_TO_ADDR
// if Crawls ( un ) then
95128: LD_VAR 0 2
95132: PPUSH
95133: CALL_OW 318
95137: IFFALSE 95148
// ComWalk ( un ) ;
95139: LD_VAR 0 2
95143: PPUSH
95144: CALL_OW 138
// SetClass ( un , class_mortar ) ;
95148: LD_VAR 0 2
95152: PPUSH
95153: LD_INT 8
95155: PPUSH
95156: CALL_OW 336
// end ;
95160: PPOPN 3
95162: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
95163: LD_EXP 88
95167: PUSH
95168: LD_EXP 132
95172: AND
95173: IFFALSE 95317
95175: GO 95177
95177: DISABLE
95178: LD_INT 0
95180: PPUSH
95181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
95182: LD_ADDR_VAR 0 2
95186: PUSH
95187: LD_INT 22
95189: PUSH
95190: LD_OWVAR 2
95194: PUSH
95195: EMPTY
95196: LIST
95197: LIST
95198: PUSH
95199: LD_INT 21
95201: PUSH
95202: LD_INT 2
95204: PUSH
95205: EMPTY
95206: LIST
95207: LIST
95208: PUSH
95209: LD_INT 2
95211: PUSH
95212: LD_INT 34
95214: PUSH
95215: LD_INT 12
95217: PUSH
95218: EMPTY
95219: LIST
95220: LIST
95221: PUSH
95222: LD_INT 34
95224: PUSH
95225: LD_INT 51
95227: PUSH
95228: EMPTY
95229: LIST
95230: LIST
95231: PUSH
95232: LD_INT 34
95234: PUSH
95235: LD_INT 32
95237: PUSH
95238: EMPTY
95239: LIST
95240: LIST
95241: PUSH
95242: EMPTY
95243: LIST
95244: LIST
95245: LIST
95246: LIST
95247: PUSH
95248: EMPTY
95249: LIST
95250: LIST
95251: LIST
95252: PPUSH
95253: CALL_OW 69
95257: ST_TO_ADDR
// if not tmp then
95258: LD_VAR 0 2
95262: NOT
95263: IFFALSE 95267
// exit ;
95265: GO 95317
// for i in tmp do
95267: LD_ADDR_VAR 0 1
95271: PUSH
95272: LD_VAR 0 2
95276: PUSH
95277: FOR_IN
95278: IFFALSE 95315
// if GetCargo ( i , mat_artifact ) = 0 then
95280: LD_VAR 0 1
95284: PPUSH
95285: LD_INT 4
95287: PPUSH
95288: CALL_OW 289
95292: PUSH
95293: LD_INT 0
95295: EQUAL
95296: IFFALSE 95313
// SetCargo ( i , mat_siberit , 100 ) ;
95298: LD_VAR 0 1
95302: PPUSH
95303: LD_INT 3
95305: PPUSH
95306: LD_INT 100
95308: PPUSH
95309: CALL_OW 290
95313: GO 95277
95315: POP
95316: POP
// end ;
95317: PPOPN 2
95319: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
95320: LD_EXP 88
95324: PUSH
95325: LD_EXP 133
95329: AND
95330: IFFALSE 95513
95332: GO 95334
95334: DISABLE
95335: LD_INT 0
95337: PPUSH
95338: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
95339: LD_ADDR_VAR 0 2
95343: PUSH
95344: LD_INT 22
95346: PUSH
95347: LD_OWVAR 2
95351: PUSH
95352: EMPTY
95353: LIST
95354: LIST
95355: PPUSH
95356: CALL_OW 69
95360: ST_TO_ADDR
// if not tmp then
95361: LD_VAR 0 2
95365: NOT
95366: IFFALSE 95370
// exit ;
95368: GO 95513
// for i := 1 to 2 do
95370: LD_ADDR_VAR 0 1
95374: PUSH
95375: DOUBLE
95376: LD_INT 1
95378: DEC
95379: ST_TO_ADDR
95380: LD_INT 2
95382: PUSH
95383: FOR_TO
95384: IFFALSE 95511
// begin uc_side := your_side ;
95386: LD_ADDR_OWVAR 20
95390: PUSH
95391: LD_OWVAR 2
95395: ST_TO_ADDR
// uc_nation := nation_american ;
95396: LD_ADDR_OWVAR 21
95400: PUSH
95401: LD_INT 1
95403: ST_TO_ADDR
// vc_chassis := us_morphling ;
95404: LD_ADDR_OWVAR 37
95408: PUSH
95409: LD_INT 5
95411: ST_TO_ADDR
// vc_engine := engine_siberite ;
95412: LD_ADDR_OWVAR 39
95416: PUSH
95417: LD_INT 3
95419: ST_TO_ADDR
// vc_control := control_computer ;
95420: LD_ADDR_OWVAR 38
95424: PUSH
95425: LD_INT 3
95427: ST_TO_ADDR
// vc_weapon := us_double_laser ;
95428: LD_ADDR_OWVAR 40
95432: PUSH
95433: LD_INT 10
95435: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
95436: LD_VAR 0 2
95440: PUSH
95441: LD_INT 1
95443: ARRAY
95444: PPUSH
95445: CALL_OW 310
95449: NOT
95450: IFFALSE 95497
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
95452: CALL_OW 45
95456: PPUSH
95457: LD_VAR 0 2
95461: PUSH
95462: LD_INT 1
95464: ARRAY
95465: PPUSH
95466: CALL_OW 250
95470: PPUSH
95471: LD_VAR 0 2
95475: PUSH
95476: LD_INT 1
95478: ARRAY
95479: PPUSH
95480: CALL_OW 251
95484: PPUSH
95485: LD_INT 12
95487: PPUSH
95488: LD_INT 1
95490: PPUSH
95491: CALL_OW 50
95495: GO 95509
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
95497: CALL_OW 45
95501: PPUSH
95502: LD_INT 1
95504: PPUSH
95505: CALL_OW 51
// end ;
95509: GO 95383
95511: POP
95512: POP
// end ;
95513: PPOPN 2
95515: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
95516: LD_EXP 88
95520: PUSH
95521: LD_EXP 134
95525: AND
95526: IFFALSE 95748
95528: GO 95530
95530: DISABLE
95531: LD_INT 0
95533: PPUSH
95534: PPUSH
95535: PPUSH
95536: PPUSH
95537: PPUSH
95538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
95539: LD_ADDR_VAR 0 6
95543: PUSH
95544: LD_INT 22
95546: PUSH
95547: LD_OWVAR 2
95551: PUSH
95552: EMPTY
95553: LIST
95554: LIST
95555: PUSH
95556: LD_INT 21
95558: PUSH
95559: LD_INT 1
95561: PUSH
95562: EMPTY
95563: LIST
95564: LIST
95565: PUSH
95566: LD_INT 3
95568: PUSH
95569: LD_INT 23
95571: PUSH
95572: LD_INT 0
95574: PUSH
95575: EMPTY
95576: LIST
95577: LIST
95578: PUSH
95579: EMPTY
95580: LIST
95581: LIST
95582: PUSH
95583: EMPTY
95584: LIST
95585: LIST
95586: LIST
95587: PPUSH
95588: CALL_OW 69
95592: ST_TO_ADDR
// if not tmp then
95593: LD_VAR 0 6
95597: NOT
95598: IFFALSE 95602
// exit ;
95600: GO 95748
// s1 := rand ( 1 , 4 ) ;
95602: LD_ADDR_VAR 0 2
95606: PUSH
95607: LD_INT 1
95609: PPUSH
95610: LD_INT 4
95612: PPUSH
95613: CALL_OW 12
95617: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
95618: LD_ADDR_VAR 0 4
95622: PUSH
95623: LD_VAR 0 6
95627: PUSH
95628: LD_INT 1
95630: ARRAY
95631: PPUSH
95632: LD_VAR 0 2
95636: PPUSH
95637: CALL_OW 259
95641: ST_TO_ADDR
// if s1 = 1 then
95642: LD_VAR 0 2
95646: PUSH
95647: LD_INT 1
95649: EQUAL
95650: IFFALSE 95670
// s2 := rand ( 2 , 4 ) else
95652: LD_ADDR_VAR 0 3
95656: PUSH
95657: LD_INT 2
95659: PPUSH
95660: LD_INT 4
95662: PPUSH
95663: CALL_OW 12
95667: ST_TO_ADDR
95668: GO 95678
// s2 := 1 ;
95670: LD_ADDR_VAR 0 3
95674: PUSH
95675: LD_INT 1
95677: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
95678: LD_ADDR_VAR 0 5
95682: PUSH
95683: LD_VAR 0 6
95687: PUSH
95688: LD_INT 1
95690: ARRAY
95691: PPUSH
95692: LD_VAR 0 3
95696: PPUSH
95697: CALL_OW 259
95701: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
95702: LD_VAR 0 6
95706: PUSH
95707: LD_INT 1
95709: ARRAY
95710: PPUSH
95711: LD_VAR 0 2
95715: PPUSH
95716: LD_VAR 0 5
95720: PPUSH
95721: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
95725: LD_VAR 0 6
95729: PUSH
95730: LD_INT 1
95732: ARRAY
95733: PPUSH
95734: LD_VAR 0 3
95738: PPUSH
95739: LD_VAR 0 4
95743: PPUSH
95744: CALL_OW 237
// end ;
95748: PPOPN 6
95750: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
95751: LD_EXP 88
95755: PUSH
95756: LD_EXP 135
95760: AND
95761: IFFALSE 95840
95763: GO 95765
95765: DISABLE
95766: LD_INT 0
95768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
95769: LD_ADDR_VAR 0 1
95773: PUSH
95774: LD_INT 22
95776: PUSH
95777: LD_OWVAR 2
95781: PUSH
95782: EMPTY
95783: LIST
95784: LIST
95785: PUSH
95786: LD_INT 30
95788: PUSH
95789: LD_INT 3
95791: PUSH
95792: EMPTY
95793: LIST
95794: LIST
95795: PUSH
95796: EMPTY
95797: LIST
95798: LIST
95799: PPUSH
95800: CALL_OW 69
95804: ST_TO_ADDR
// if not tmp then
95805: LD_VAR 0 1
95809: NOT
95810: IFFALSE 95814
// exit ;
95812: GO 95840
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
95814: LD_VAR 0 1
95818: PUSH
95819: LD_INT 1
95821: PPUSH
95822: LD_VAR 0 1
95826: PPUSH
95827: CALL_OW 12
95831: ARRAY
95832: PPUSH
95833: LD_INT 1
95835: PPUSH
95836: CALL_OW 234
// end ;
95840: PPOPN 1
95842: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
95843: LD_EXP 88
95847: PUSH
95848: LD_EXP 136
95852: AND
95853: IFFALSE 95965
95855: GO 95857
95857: DISABLE
95858: LD_INT 0
95860: PPUSH
95861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
95862: LD_ADDR_VAR 0 2
95866: PUSH
95867: LD_INT 22
95869: PUSH
95870: LD_OWVAR 2
95874: PUSH
95875: EMPTY
95876: LIST
95877: LIST
95878: PUSH
95879: LD_INT 2
95881: PUSH
95882: LD_INT 30
95884: PUSH
95885: LD_INT 27
95887: PUSH
95888: EMPTY
95889: LIST
95890: LIST
95891: PUSH
95892: LD_INT 30
95894: PUSH
95895: LD_INT 26
95897: PUSH
95898: EMPTY
95899: LIST
95900: LIST
95901: PUSH
95902: LD_INT 30
95904: PUSH
95905: LD_INT 28
95907: PUSH
95908: EMPTY
95909: LIST
95910: LIST
95911: PUSH
95912: EMPTY
95913: LIST
95914: LIST
95915: LIST
95916: LIST
95917: PUSH
95918: EMPTY
95919: LIST
95920: LIST
95921: PPUSH
95922: CALL_OW 69
95926: ST_TO_ADDR
// if not tmp then
95927: LD_VAR 0 2
95931: NOT
95932: IFFALSE 95936
// exit ;
95934: GO 95965
// for i in tmp do
95936: LD_ADDR_VAR 0 1
95940: PUSH
95941: LD_VAR 0 2
95945: PUSH
95946: FOR_IN
95947: IFFALSE 95963
// SetLives ( i , 1 ) ;
95949: LD_VAR 0 1
95953: PPUSH
95954: LD_INT 1
95956: PPUSH
95957: CALL_OW 234
95961: GO 95946
95963: POP
95964: POP
// end ;
95965: PPOPN 2
95967: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
95968: LD_EXP 88
95972: PUSH
95973: LD_EXP 137
95977: AND
95978: IFFALSE 96252
95980: GO 95982
95982: DISABLE
95983: LD_INT 0
95985: PPUSH
95986: PPUSH
95987: PPUSH
// begin i := rand ( 1 , 7 ) ;
95988: LD_ADDR_VAR 0 1
95992: PUSH
95993: LD_INT 1
95995: PPUSH
95996: LD_INT 7
95998: PPUSH
95999: CALL_OW 12
96003: ST_TO_ADDR
// case i of 1 :
96004: LD_VAR 0 1
96008: PUSH
96009: LD_INT 1
96011: DOUBLE
96012: EQUAL
96013: IFTRUE 96017
96015: GO 96027
96017: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
96018: LD_STRING earthquake(getX(game), 0, 32)
96020: PPUSH
96021: CALL_OW 559
96025: GO 96252
96027: LD_INT 2
96029: DOUBLE
96030: EQUAL
96031: IFTRUE 96035
96033: GO 96049
96035: POP
// begin ToLua ( displayStucuk(); ) ;
96036: LD_STRING displayStucuk();
96038: PPUSH
96039: CALL_OW 559
// ResetFog ;
96043: CALL_OW 335
// end ; 3 :
96047: GO 96252
96049: LD_INT 3
96051: DOUBLE
96052: EQUAL
96053: IFTRUE 96057
96055: GO 96161
96057: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
96058: LD_ADDR_VAR 0 2
96062: PUSH
96063: LD_INT 22
96065: PUSH
96066: LD_OWVAR 2
96070: PUSH
96071: EMPTY
96072: LIST
96073: LIST
96074: PUSH
96075: LD_INT 25
96077: PUSH
96078: LD_INT 1
96080: PUSH
96081: EMPTY
96082: LIST
96083: LIST
96084: PUSH
96085: EMPTY
96086: LIST
96087: LIST
96088: PPUSH
96089: CALL_OW 69
96093: ST_TO_ADDR
// if not tmp then
96094: LD_VAR 0 2
96098: NOT
96099: IFFALSE 96103
// exit ;
96101: GO 96252
// un := tmp [ rand ( 1 , tmp ) ] ;
96103: LD_ADDR_VAR 0 3
96107: PUSH
96108: LD_VAR 0 2
96112: PUSH
96113: LD_INT 1
96115: PPUSH
96116: LD_VAR 0 2
96120: PPUSH
96121: CALL_OW 12
96125: ARRAY
96126: ST_TO_ADDR
// if Crawls ( un ) then
96127: LD_VAR 0 3
96131: PPUSH
96132: CALL_OW 318
96136: IFFALSE 96147
// ComWalk ( un ) ;
96138: LD_VAR 0 3
96142: PPUSH
96143: CALL_OW 138
// SetClass ( un , class_mortar ) ;
96147: LD_VAR 0 3
96151: PPUSH
96152: LD_INT 8
96154: PPUSH
96155: CALL_OW 336
// end ; 4 :
96159: GO 96252
96161: LD_INT 4
96163: DOUBLE
96164: EQUAL
96165: IFTRUE 96169
96167: GO 96230
96169: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
96170: LD_ADDR_VAR 0 2
96174: PUSH
96175: LD_INT 22
96177: PUSH
96178: LD_OWVAR 2
96182: PUSH
96183: EMPTY
96184: LIST
96185: LIST
96186: PUSH
96187: LD_INT 30
96189: PUSH
96190: LD_INT 29
96192: PUSH
96193: EMPTY
96194: LIST
96195: LIST
96196: PUSH
96197: EMPTY
96198: LIST
96199: LIST
96200: PPUSH
96201: CALL_OW 69
96205: ST_TO_ADDR
// if not tmp then
96206: LD_VAR 0 2
96210: NOT
96211: IFFALSE 96215
// exit ;
96213: GO 96252
// DestroyUnit ( tmp [ 1 ] ) ;
96215: LD_VAR 0 2
96219: PUSH
96220: LD_INT 1
96222: ARRAY
96223: PPUSH
96224: CALL_OW 65
// end ; 5 .. 7 :
96228: GO 96252
96230: LD_INT 5
96232: DOUBLE
96233: GREATEREQUAL
96234: IFFALSE 96242
96236: LD_INT 7
96238: DOUBLE
96239: LESSEQUAL
96240: IFTRUE 96244
96242: GO 96251
96244: POP
// StreamSibBomb ; end ;
96245: CALL 92502 0 0
96249: GO 96252
96251: POP
// end ;
96252: PPOPN 3
96254: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
96255: LD_EXP 88
96259: PUSH
96260: LD_EXP 138
96264: AND
96265: IFFALSE 96421
96267: GO 96269
96269: DISABLE
96270: LD_INT 0
96272: PPUSH
96273: PPUSH
96274: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
96275: LD_ADDR_VAR 0 2
96279: PUSH
96280: LD_INT 81
96282: PUSH
96283: LD_OWVAR 2
96287: PUSH
96288: EMPTY
96289: LIST
96290: LIST
96291: PUSH
96292: LD_INT 2
96294: PUSH
96295: LD_INT 21
96297: PUSH
96298: LD_INT 1
96300: PUSH
96301: EMPTY
96302: LIST
96303: LIST
96304: PUSH
96305: LD_INT 21
96307: PUSH
96308: LD_INT 2
96310: PUSH
96311: EMPTY
96312: LIST
96313: LIST
96314: PUSH
96315: EMPTY
96316: LIST
96317: LIST
96318: LIST
96319: PUSH
96320: EMPTY
96321: LIST
96322: LIST
96323: PPUSH
96324: CALL_OW 69
96328: ST_TO_ADDR
// if not tmp then
96329: LD_VAR 0 2
96333: NOT
96334: IFFALSE 96338
// exit ;
96336: GO 96421
// p := 0 ;
96338: LD_ADDR_VAR 0 3
96342: PUSH
96343: LD_INT 0
96345: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
96346: LD_INT 35
96348: PPUSH
96349: CALL_OW 67
// p := p + 1 ;
96353: LD_ADDR_VAR 0 3
96357: PUSH
96358: LD_VAR 0 3
96362: PUSH
96363: LD_INT 1
96365: PLUS
96366: ST_TO_ADDR
// for i in tmp do
96367: LD_ADDR_VAR 0 1
96371: PUSH
96372: LD_VAR 0 2
96376: PUSH
96377: FOR_IN
96378: IFFALSE 96409
// if GetLives ( i ) < 1000 then
96380: LD_VAR 0 1
96384: PPUSH
96385: CALL_OW 256
96389: PUSH
96390: LD_INT 1000
96392: LESS
96393: IFFALSE 96407
// SetLives ( i , 1000 ) ;
96395: LD_VAR 0 1
96399: PPUSH
96400: LD_INT 1000
96402: PPUSH
96403: CALL_OW 234
96407: GO 96377
96409: POP
96410: POP
// until p > 20 ;
96411: LD_VAR 0 3
96415: PUSH
96416: LD_INT 20
96418: GREATER
96419: IFFALSE 96346
// end ;
96421: PPOPN 3
96423: END
// every 0 0$1 trigger StreamModeActive and sTime do
96424: LD_EXP 88
96428: PUSH
96429: LD_EXP 139
96433: AND
96434: IFFALSE 96469
96436: GO 96438
96438: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
96439: LD_INT 28
96441: PPUSH
96442: LD_OWVAR 2
96446: PPUSH
96447: LD_INT 2
96449: PPUSH
96450: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
96454: LD_INT 30
96456: PPUSH
96457: LD_OWVAR 2
96461: PPUSH
96462: LD_INT 2
96464: PPUSH
96465: CALL_OW 322
// end ;
96469: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
96470: LD_EXP 88
96474: PUSH
96475: LD_EXP 140
96479: AND
96480: IFFALSE 96601
96482: GO 96484
96484: DISABLE
96485: LD_INT 0
96487: PPUSH
96488: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
96489: LD_ADDR_VAR 0 2
96493: PUSH
96494: LD_INT 22
96496: PUSH
96497: LD_OWVAR 2
96501: PUSH
96502: EMPTY
96503: LIST
96504: LIST
96505: PUSH
96506: LD_INT 21
96508: PUSH
96509: LD_INT 1
96511: PUSH
96512: EMPTY
96513: LIST
96514: LIST
96515: PUSH
96516: LD_INT 3
96518: PUSH
96519: LD_INT 23
96521: PUSH
96522: LD_INT 0
96524: PUSH
96525: EMPTY
96526: LIST
96527: LIST
96528: PUSH
96529: EMPTY
96530: LIST
96531: LIST
96532: PUSH
96533: EMPTY
96534: LIST
96535: LIST
96536: LIST
96537: PPUSH
96538: CALL_OW 69
96542: ST_TO_ADDR
// if not tmp then
96543: LD_VAR 0 2
96547: NOT
96548: IFFALSE 96552
// exit ;
96550: GO 96601
// for i in tmp do
96552: LD_ADDR_VAR 0 1
96556: PUSH
96557: LD_VAR 0 2
96561: PUSH
96562: FOR_IN
96563: IFFALSE 96599
// begin if Crawls ( i ) then
96565: LD_VAR 0 1
96569: PPUSH
96570: CALL_OW 318
96574: IFFALSE 96585
// ComWalk ( i ) ;
96576: LD_VAR 0 1
96580: PPUSH
96581: CALL_OW 138
// SetClass ( i , 2 ) ;
96585: LD_VAR 0 1
96589: PPUSH
96590: LD_INT 2
96592: PPUSH
96593: CALL_OW 336
// end ;
96597: GO 96562
96599: POP
96600: POP
// end ;
96601: PPOPN 2
96603: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
96604: LD_EXP 88
96608: PUSH
96609: LD_EXP 141
96613: AND
96614: IFFALSE 96895
96616: GO 96618
96618: DISABLE
96619: LD_INT 0
96621: PPUSH
96622: PPUSH
96623: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
96624: LD_OWVAR 2
96628: PPUSH
96629: LD_INT 9
96631: PPUSH
96632: LD_INT 1
96634: PPUSH
96635: LD_INT 1
96637: PPUSH
96638: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
96642: LD_INT 9
96644: PPUSH
96645: LD_OWVAR 2
96649: PPUSH
96650: CALL_OW 343
// uc_side := 9 ;
96654: LD_ADDR_OWVAR 20
96658: PUSH
96659: LD_INT 9
96661: ST_TO_ADDR
// uc_nation := 2 ;
96662: LD_ADDR_OWVAR 21
96666: PUSH
96667: LD_INT 2
96669: ST_TO_ADDR
// hc_name := Dark Warrior ;
96670: LD_ADDR_OWVAR 26
96674: PUSH
96675: LD_STRING Dark Warrior
96677: ST_TO_ADDR
// hc_gallery :=  ;
96678: LD_ADDR_OWVAR 33
96682: PUSH
96683: LD_STRING 
96685: ST_TO_ADDR
// hc_noskilllimit := true ;
96686: LD_ADDR_OWVAR 76
96690: PUSH
96691: LD_INT 1
96693: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
96694: LD_ADDR_OWVAR 31
96698: PUSH
96699: LD_INT 30
96701: PUSH
96702: LD_INT 30
96704: PUSH
96705: LD_INT 30
96707: PUSH
96708: LD_INT 30
96710: PUSH
96711: EMPTY
96712: LIST
96713: LIST
96714: LIST
96715: LIST
96716: ST_TO_ADDR
// un := CreateHuman ;
96717: LD_ADDR_VAR 0 3
96721: PUSH
96722: CALL_OW 44
96726: ST_TO_ADDR
// hc_noskilllimit := false ;
96727: LD_ADDR_OWVAR 76
96731: PUSH
96732: LD_INT 0
96734: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
96735: LD_VAR 0 3
96739: PPUSH
96740: LD_INT 1
96742: PPUSH
96743: CALL_OW 51
// p := 0 ;
96747: LD_ADDR_VAR 0 2
96751: PUSH
96752: LD_INT 0
96754: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
96755: LD_INT 35
96757: PPUSH
96758: CALL_OW 67
// p := p + 1 ;
96762: LD_ADDR_VAR 0 2
96766: PUSH
96767: LD_VAR 0 2
96771: PUSH
96772: LD_INT 1
96774: PLUS
96775: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
96776: LD_VAR 0 3
96780: PPUSH
96781: CALL_OW 256
96785: PUSH
96786: LD_INT 1000
96788: LESS
96789: IFFALSE 96803
// SetLives ( un , 1000 ) ;
96791: LD_VAR 0 3
96795: PPUSH
96796: LD_INT 1000
96798: PPUSH
96799: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
96803: LD_VAR 0 3
96807: PPUSH
96808: LD_INT 81
96810: PUSH
96811: LD_OWVAR 2
96815: PUSH
96816: EMPTY
96817: LIST
96818: LIST
96819: PUSH
96820: LD_INT 91
96822: PUSH
96823: LD_VAR 0 3
96827: PUSH
96828: LD_INT 30
96830: PUSH
96831: EMPTY
96832: LIST
96833: LIST
96834: LIST
96835: PUSH
96836: EMPTY
96837: LIST
96838: LIST
96839: PPUSH
96840: CALL_OW 69
96844: PPUSH
96845: LD_VAR 0 3
96849: PPUSH
96850: CALL_OW 74
96854: PPUSH
96855: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
96859: LD_VAR 0 2
96863: PUSH
96864: LD_INT 60
96866: GREATER
96867: PUSH
96868: LD_VAR 0 3
96872: PPUSH
96873: CALL_OW 301
96877: OR
96878: IFFALSE 96755
// if un then
96880: LD_VAR 0 3
96884: IFFALSE 96895
// RemoveUnit ( un ) ;
96886: LD_VAR 0 3
96890: PPUSH
96891: CALL_OW 64
// end ; end_of_file
96895: PPOPN 3
96897: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
96898: LD_INT 0
96900: PPUSH
96901: PPUSH
96902: PPUSH
96903: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
96904: LD_VAR 0 1
96908: PPUSH
96909: CALL_OW 264
96913: PUSH
96914: LD_EXP 33
96918: EQUAL
96919: IFFALSE 96991
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
96921: LD_INT 68
96923: PPUSH
96924: LD_VAR 0 1
96928: PPUSH
96929: CALL_OW 255
96933: PPUSH
96934: CALL_OW 321
96938: PUSH
96939: LD_INT 2
96941: EQUAL
96942: IFFALSE 96954
// eff := 70 else
96944: LD_ADDR_VAR 0 4
96948: PUSH
96949: LD_INT 70
96951: ST_TO_ADDR
96952: GO 96962
// eff := 30 ;
96954: LD_ADDR_VAR 0 4
96958: PUSH
96959: LD_INT 30
96961: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
96962: LD_VAR 0 1
96966: PPUSH
96967: CALL_OW 250
96971: PPUSH
96972: LD_VAR 0 1
96976: PPUSH
96977: CALL_OW 251
96981: PPUSH
96982: LD_VAR 0 4
96986: PPUSH
96987: CALL_OW 495
// end ; end ;
96991: LD_VAR 0 2
96995: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
96996: LD_INT 0
96998: PPUSH
// end ;
96999: LD_VAR 0 4
97003: RET
// export function SOS_Command ( cmd ) ; begin
97004: LD_INT 0
97006: PPUSH
// end ;
97007: LD_VAR 0 2
97011: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
97012: LD_VAR 0 1
97016: PUSH
97017: LD_INT 254
97019: EQUAL
97020: PUSH
97021: LD_VAR 0 2
97025: PPUSH
97026: CALL_OW 264
97030: PUSH
97031: LD_EXP 31
97035: EQUAL
97036: AND
97037: PUSH
97038: LD_VAR 0 3
97042: PPUSH
97043: CALL_OW 263
97047: PUSH
97048: LD_INT 3
97050: EQUAL
97051: AND
97052: IFFALSE 97063
// DestroyUnit ( selectedUnit ) ;
97054: LD_VAR 0 3
97058: PPUSH
97059: CALL_OW 65
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
97063: LD_VAR 0 1
97067: PUSH
97068: LD_INT 255
97070: EQUAL
97071: PUSH
97072: LD_VAR 0 2
97076: PPUSH
97077: CALL_OW 264
97081: PUSH
97082: LD_INT 14
97084: PUSH
97085: LD_INT 53
97087: PUSH
97088: EMPTY
97089: LIST
97090: LIST
97091: IN
97092: AND
97093: PUSH
97094: LD_VAR 0 4
97098: PPUSH
97099: LD_VAR 0 5
97103: PPUSH
97104: CALL_OW 488
97108: AND
97109: IFFALSE 97133
// CutTreeXYR ( unit , x , y , 12 ) ;
97111: LD_VAR 0 2
97115: PPUSH
97116: LD_VAR 0 4
97120: PPUSH
97121: LD_VAR 0 5
97125: PPUSH
97126: LD_INT 12
97128: PPUSH
97129: CALL 97136 0 4
// end ;
97133: PPOPN 5
97135: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
97136: LD_INT 0
97138: PPUSH
97139: PPUSH
97140: PPUSH
97141: PPUSH
97142: PPUSH
97143: PPUSH
97144: PPUSH
97145: PPUSH
97146: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
97147: LD_VAR 0 1
97151: NOT
97152: PUSH
97153: LD_VAR 0 2
97157: PPUSH
97158: LD_VAR 0 3
97162: PPUSH
97163: CALL_OW 488
97167: NOT
97168: OR
97169: PUSH
97170: LD_VAR 0 4
97174: NOT
97175: OR
97176: IFFALSE 97180
// exit ;
97178: GO 97520
// list := [ ] ;
97180: LD_ADDR_VAR 0 13
97184: PUSH
97185: EMPTY
97186: ST_TO_ADDR
// if x - r < 0 then
97187: LD_VAR 0 2
97191: PUSH
97192: LD_VAR 0 4
97196: MINUS
97197: PUSH
97198: LD_INT 0
97200: LESS
97201: IFFALSE 97213
// min_x := 0 else
97203: LD_ADDR_VAR 0 7
97207: PUSH
97208: LD_INT 0
97210: ST_TO_ADDR
97211: GO 97229
// min_x := x - r ;
97213: LD_ADDR_VAR 0 7
97217: PUSH
97218: LD_VAR 0 2
97222: PUSH
97223: LD_VAR 0 4
97227: MINUS
97228: ST_TO_ADDR
// if y - r < 0 then
97229: LD_VAR 0 3
97233: PUSH
97234: LD_VAR 0 4
97238: MINUS
97239: PUSH
97240: LD_INT 0
97242: LESS
97243: IFFALSE 97255
// min_y := 0 else
97245: LD_ADDR_VAR 0 8
97249: PUSH
97250: LD_INT 0
97252: ST_TO_ADDR
97253: GO 97271
// min_y := y - r ;
97255: LD_ADDR_VAR 0 8
97259: PUSH
97260: LD_VAR 0 3
97264: PUSH
97265: LD_VAR 0 4
97269: MINUS
97270: ST_TO_ADDR
// max_x := x + r ;
97271: LD_ADDR_VAR 0 9
97275: PUSH
97276: LD_VAR 0 2
97280: PUSH
97281: LD_VAR 0 4
97285: PLUS
97286: ST_TO_ADDR
// max_y := y + r ;
97287: LD_ADDR_VAR 0 10
97291: PUSH
97292: LD_VAR 0 3
97296: PUSH
97297: LD_VAR 0 4
97301: PLUS
97302: ST_TO_ADDR
// for _x = min_x to max_x do
97303: LD_ADDR_VAR 0 11
97307: PUSH
97308: DOUBLE
97309: LD_VAR 0 7
97313: DEC
97314: ST_TO_ADDR
97315: LD_VAR 0 9
97319: PUSH
97320: FOR_TO
97321: IFFALSE 97438
// for _y = min_y to max_y do
97323: LD_ADDR_VAR 0 12
97327: PUSH
97328: DOUBLE
97329: LD_VAR 0 8
97333: DEC
97334: ST_TO_ADDR
97335: LD_VAR 0 10
97339: PUSH
97340: FOR_TO
97341: IFFALSE 97434
// begin if not ValidHex ( _x , _y ) then
97343: LD_VAR 0 11
97347: PPUSH
97348: LD_VAR 0 12
97352: PPUSH
97353: CALL_OW 488
97357: NOT
97358: IFFALSE 97362
// continue ;
97360: GO 97340
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
97362: LD_VAR 0 11
97366: PPUSH
97367: LD_VAR 0 12
97371: PPUSH
97372: CALL_OW 351
97376: PUSH
97377: LD_VAR 0 11
97381: PPUSH
97382: LD_VAR 0 12
97386: PPUSH
97387: CALL_OW 554
97391: AND
97392: IFFALSE 97432
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
97394: LD_ADDR_VAR 0 13
97398: PUSH
97399: LD_VAR 0 13
97403: PPUSH
97404: LD_VAR 0 13
97408: PUSH
97409: LD_INT 1
97411: PLUS
97412: PPUSH
97413: LD_VAR 0 11
97417: PUSH
97418: LD_VAR 0 12
97422: PUSH
97423: EMPTY
97424: LIST
97425: LIST
97426: PPUSH
97427: CALL_OW 2
97431: ST_TO_ADDR
// end ;
97432: GO 97340
97434: POP
97435: POP
97436: GO 97320
97438: POP
97439: POP
// if not list then
97440: LD_VAR 0 13
97444: NOT
97445: IFFALSE 97449
// exit ;
97447: GO 97520
// for i in list do
97449: LD_ADDR_VAR 0 6
97453: PUSH
97454: LD_VAR 0 13
97458: PUSH
97459: FOR_IN
97460: IFFALSE 97518
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
97462: LD_VAR 0 1
97466: PPUSH
97467: LD_STRING M
97469: PUSH
97470: LD_VAR 0 6
97474: PUSH
97475: LD_INT 1
97477: ARRAY
97478: PUSH
97479: LD_VAR 0 6
97483: PUSH
97484: LD_INT 2
97486: ARRAY
97487: PUSH
97488: LD_INT 0
97490: PUSH
97491: LD_INT 0
97493: PUSH
97494: LD_INT 0
97496: PUSH
97497: LD_INT 0
97499: PUSH
97500: EMPTY
97501: LIST
97502: LIST
97503: LIST
97504: LIST
97505: LIST
97506: LIST
97507: LIST
97508: PUSH
97509: EMPTY
97510: LIST
97511: PPUSH
97512: CALL_OW 447
97516: GO 97459
97518: POP
97519: POP
// end ;
97520: LD_VAR 0 5
97524: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist ; every 0 0$1 trigger not initHack do
97525: LD_EXP 142
97529: NOT
97530: IFFALSE 97573
97532: GO 97534
97534: DISABLE
// begin initHack := true ;
97535: LD_ADDR_EXP 142
97539: PUSH
97540: LD_INT 1
97542: ST_TO_ADDR
// hackTanks := [ ] ;
97543: LD_ADDR_EXP 143
97547: PUSH
97548: EMPTY
97549: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
97550: LD_ADDR_EXP 144
97554: PUSH
97555: EMPTY
97556: ST_TO_ADDR
// hackLimit := 3 ;
97557: LD_ADDR_EXP 145
97561: PUSH
97562: LD_INT 3
97564: ST_TO_ADDR
// hackDist := 12 ;
97565: LD_ADDR_EXP 146
97569: PUSH
97570: LD_INT 12
97572: ST_TO_ADDR
// end ;
97573: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
97574: LD_EXP 142
97578: PUSH
97579: LD_INT 34
97581: PUSH
97582: LD_EXP 31
97586: PUSH
97587: EMPTY
97588: LIST
97589: LIST
97590: PPUSH
97591: CALL_OW 69
97595: AND
97596: IFFALSE 97825
97598: GO 97600
97600: DISABLE
97601: LD_INT 0
97603: PPUSH
97604: PPUSH
// begin enable ;
97605: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
97606: LD_ADDR_VAR 0 1
97610: PUSH
97611: LD_INT 34
97613: PUSH
97614: LD_EXP 31
97618: PUSH
97619: EMPTY
97620: LIST
97621: LIST
97622: PPUSH
97623: CALL_OW 69
97627: PUSH
97628: FOR_IN
97629: IFFALSE 97823
// begin if not i in hackTanks then
97631: LD_VAR 0 1
97635: PUSH
97636: LD_EXP 143
97640: IN
97641: NOT
97642: IFFALSE 97699
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
97644: LD_ADDR_EXP 143
97648: PUSH
97649: LD_EXP 143
97653: PPUSH
97654: LD_EXP 143
97658: PUSH
97659: LD_INT 1
97661: PLUS
97662: PPUSH
97663: LD_VAR 0 1
97667: PPUSH
97668: CALL_OW 1
97672: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
97673: LD_ADDR_EXP 144
97677: PUSH
97678: LD_EXP 144
97682: PPUSH
97683: LD_EXP 144
97687: PUSH
97688: LD_INT 1
97690: PLUS
97691: PPUSH
97692: EMPTY
97693: PPUSH
97694: CALL_OW 1
97698: ST_TO_ADDR
// end ; if not IsOk ( i ) then
97699: LD_VAR 0 1
97703: PPUSH
97704: CALL_OW 302
97708: NOT
97709: IFFALSE 97722
// begin HackUnlinkAll ( i ) ;
97711: LD_VAR 0 1
97715: PPUSH
97716: CALL 97828 0 1
// continue ;
97720: GO 97628
// end ; HackCheckCapturedStatus ( i ) ;
97722: LD_VAR 0 1
97726: PPUSH
97727: CALL 98246 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
97731: LD_ADDR_VAR 0 2
97735: PUSH
97736: LD_INT 81
97738: PUSH
97739: LD_VAR 0 1
97743: PPUSH
97744: CALL_OW 255
97748: PUSH
97749: EMPTY
97750: LIST
97751: LIST
97752: PUSH
97753: LD_INT 33
97755: PUSH
97756: LD_INT 3
97758: PUSH
97759: EMPTY
97760: LIST
97761: LIST
97762: PUSH
97763: LD_INT 91
97765: PUSH
97766: LD_VAR 0 1
97770: PUSH
97771: LD_EXP 146
97775: PUSH
97776: EMPTY
97777: LIST
97778: LIST
97779: LIST
97780: PUSH
97781: LD_INT 50
97783: PUSH
97784: EMPTY
97785: LIST
97786: PUSH
97787: EMPTY
97788: LIST
97789: LIST
97790: LIST
97791: LIST
97792: PPUSH
97793: CALL_OW 69
97797: ST_TO_ADDR
// if not tmp then
97798: LD_VAR 0 2
97802: NOT
97803: IFFALSE 97807
// continue ;
97805: GO 97628
// HackLink ( i , tmp ) ;
97807: LD_VAR 0 1
97811: PPUSH
97812: LD_VAR 0 2
97816: PPUSH
97817: CALL 97964 0 2
// end ;
97821: GO 97628
97823: POP
97824: POP
// end ;
97825: PPOPN 2
97827: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
97828: LD_INT 0
97830: PPUSH
97831: PPUSH
97832: PPUSH
// if not hack in hackTanks then
97833: LD_VAR 0 1
97837: PUSH
97838: LD_EXP 143
97842: IN
97843: NOT
97844: IFFALSE 97848
// exit ;
97846: GO 97959
// index := GetElementIndex ( hackTanks , hack ) ;
97848: LD_ADDR_VAR 0 4
97852: PUSH
97853: LD_EXP 143
97857: PPUSH
97858: LD_VAR 0 1
97862: PPUSH
97863: CALL 24079 0 2
97867: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
97868: LD_EXP 144
97872: PUSH
97873: LD_VAR 0 4
97877: ARRAY
97878: IFFALSE 97959
// begin for i in hackTanksCaptured [ index ] do
97880: LD_ADDR_VAR 0 3
97884: PUSH
97885: LD_EXP 144
97889: PUSH
97890: LD_VAR 0 4
97894: ARRAY
97895: PUSH
97896: FOR_IN
97897: IFFALSE 97923
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
97899: LD_VAR 0 3
97903: PUSH
97904: LD_INT 1
97906: ARRAY
97907: PPUSH
97908: LD_VAR 0 3
97912: PUSH
97913: LD_INT 2
97915: ARRAY
97916: PPUSH
97917: CALL_OW 235
97921: GO 97896
97923: POP
97924: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
97925: LD_ADDR_EXP 144
97929: PUSH
97930: LD_EXP 144
97934: PPUSH
97935: LD_VAR 0 4
97939: PPUSH
97940: EMPTY
97941: PPUSH
97942: CALL_OW 1
97946: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
97947: LD_VAR 0 1
97951: PPUSH
97952: LD_INT 0
97954: PPUSH
97955: CALL_OW 505
// end ; end ;
97959: LD_VAR 0 2
97963: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
97964: LD_INT 0
97966: PPUSH
97967: PPUSH
97968: PPUSH
// if not hack in hackTanks or not vehicles then
97969: LD_VAR 0 1
97973: PUSH
97974: LD_EXP 143
97978: IN
97979: NOT
97980: PUSH
97981: LD_VAR 0 2
97985: NOT
97986: OR
97987: IFFALSE 97991
// exit ;
97989: GO 98241
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
97991: LD_ADDR_VAR 0 2
97995: PUSH
97996: LD_VAR 0 1
98000: PPUSH
98001: LD_VAR 0 2
98005: PPUSH
98006: LD_INT 1
98008: PPUSH
98009: LD_INT 1
98011: PPUSH
98012: CALL 24729 0 4
98016: ST_TO_ADDR
// display_strings := vehicles ;
98017: LD_ADDR_OWVAR 47
98021: PUSH
98022: LD_VAR 0 2
98026: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
98027: LD_ADDR_VAR 0 5
98031: PUSH
98032: LD_EXP 143
98036: PPUSH
98037: LD_VAR 0 1
98041: PPUSH
98042: CALL 24079 0 2
98046: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
98047: LD_EXP 144
98051: PUSH
98052: LD_VAR 0 5
98056: ARRAY
98057: PUSH
98058: LD_EXP 145
98062: LESS
98063: IFFALSE 98217
// begin for i := 1 to vehicles do
98065: LD_ADDR_VAR 0 4
98069: PUSH
98070: DOUBLE
98071: LD_INT 1
98073: DEC
98074: ST_TO_ADDR
98075: LD_VAR 0 2
98079: PUSH
98080: FOR_TO
98081: IFFALSE 98215
// begin if hackTanksCaptured [ index ] = hackLimit then
98083: LD_EXP 144
98087: PUSH
98088: LD_VAR 0 5
98092: ARRAY
98093: PUSH
98094: LD_EXP 145
98098: EQUAL
98099: IFFALSE 98103
// break ;
98101: GO 98215
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
98103: LD_ADDR_EXP 144
98107: PUSH
98108: LD_EXP 144
98112: PPUSH
98113: LD_VAR 0 5
98117: PUSH
98118: LD_EXP 144
98122: PUSH
98123: LD_VAR 0 5
98127: ARRAY
98128: PUSH
98129: LD_INT 1
98131: PLUS
98132: PUSH
98133: EMPTY
98134: LIST
98135: LIST
98136: PPUSH
98137: LD_VAR 0 2
98141: PUSH
98142: LD_VAR 0 4
98146: ARRAY
98147: PUSH
98148: LD_VAR 0 2
98152: PUSH
98153: LD_VAR 0 4
98157: ARRAY
98158: PPUSH
98159: CALL_OW 255
98163: PUSH
98164: EMPTY
98165: LIST
98166: LIST
98167: PPUSH
98168: CALL 24294 0 3
98172: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
98173: LD_VAR 0 2
98177: PUSH
98178: LD_VAR 0 4
98182: ARRAY
98183: PPUSH
98184: LD_VAR 0 1
98188: PPUSH
98189: CALL_OW 255
98193: PPUSH
98194: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
98198: LD_VAR 0 2
98202: PUSH
98203: LD_VAR 0 4
98207: ARRAY
98208: PPUSH
98209: CALL_OW 141
// end ;
98213: GO 98080
98215: POP
98216: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
98217: LD_VAR 0 1
98221: PPUSH
98222: LD_EXP 144
98226: PUSH
98227: LD_VAR 0 5
98231: ARRAY
98232: PUSH
98233: LD_INT 0
98235: PLUS
98236: PPUSH
98237: CALL_OW 505
// end ;
98241: LD_VAR 0 3
98245: RET
// export function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
98246: LD_INT 0
98248: PPUSH
98249: PPUSH
98250: PPUSH
98251: PPUSH
// if not hack in hackTanks then
98252: LD_VAR 0 1
98256: PUSH
98257: LD_EXP 143
98261: IN
98262: NOT
98263: IFFALSE 98267
// exit ;
98265: GO 98507
// index := GetElementIndex ( hackTanks , hack ) ;
98267: LD_ADDR_VAR 0 4
98271: PUSH
98272: LD_EXP 143
98276: PPUSH
98277: LD_VAR 0 1
98281: PPUSH
98282: CALL 24079 0 2
98286: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
98287: LD_ADDR_VAR 0 3
98291: PUSH
98292: DOUBLE
98293: LD_EXP 144
98297: PUSH
98298: LD_VAR 0 4
98302: ARRAY
98303: INC
98304: ST_TO_ADDR
98305: LD_INT 1
98307: PUSH
98308: FOR_DOWNTO
98309: IFFALSE 98481
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
98311: LD_ADDR_VAR 0 5
98315: PUSH
98316: LD_EXP 144
98320: PUSH
98321: LD_VAR 0 4
98325: ARRAY
98326: PUSH
98327: LD_VAR 0 3
98331: ARRAY
98332: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
98333: LD_VAR 0 5
98337: PUSH
98338: LD_INT 1
98340: ARRAY
98341: PPUSH
98342: CALL_OW 302
98346: NOT
98347: PUSH
98348: LD_VAR 0 5
98352: PUSH
98353: LD_INT 1
98355: ARRAY
98356: PPUSH
98357: CALL_OW 255
98361: PUSH
98362: LD_VAR 0 1
98366: PPUSH
98367: CALL_OW 255
98371: NONEQUAL
98372: OR
98373: IFFALSE 98479
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
98375: LD_VAR 0 5
98379: PUSH
98380: LD_INT 1
98382: ARRAY
98383: PPUSH
98384: CALL_OW 305
98388: PUSH
98389: LD_VAR 0 5
98393: PUSH
98394: LD_INT 1
98396: ARRAY
98397: PPUSH
98398: CALL_OW 255
98402: PUSH
98403: LD_VAR 0 1
98407: PPUSH
98408: CALL_OW 255
98412: EQUAL
98413: AND
98414: IFFALSE 98438
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
98416: LD_VAR 0 5
98420: PUSH
98421: LD_INT 1
98423: ARRAY
98424: PPUSH
98425: LD_VAR 0 5
98429: PUSH
98430: LD_INT 2
98432: ARRAY
98433: PPUSH
98434: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
98438: LD_ADDR_EXP 144
98442: PUSH
98443: LD_EXP 144
98447: PPUSH
98448: LD_VAR 0 4
98452: PPUSH
98453: LD_EXP 144
98457: PUSH
98458: LD_VAR 0 4
98462: ARRAY
98463: PPUSH
98464: LD_VAR 0 3
98468: PPUSH
98469: CALL_OW 3
98473: PPUSH
98474: CALL_OW 1
98478: ST_TO_ADDR
// end ; end ;
98479: GO 98308
98481: POP
98482: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
98483: LD_VAR 0 1
98487: PPUSH
98488: LD_EXP 144
98492: PUSH
98493: LD_VAR 0 4
98497: ARRAY
98498: PUSH
98499: LD_INT 0
98501: PLUS
98502: PPUSH
98503: CALL_OW 505
// end ; end_of_file
98507: LD_VAR 0 2
98511: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
98512: LD_INT 0
98514: PPUSH
98515: PPUSH
98516: PPUSH
98517: PPUSH
98518: PPUSH
98519: PPUSH
98520: PPUSH
98521: PPUSH
98522: PPUSH
98523: PPUSH
98524: PPUSH
98525: PPUSH
98526: PPUSH
98527: PPUSH
98528: PPUSH
98529: PPUSH
98530: PPUSH
98531: PPUSH
98532: PPUSH
98533: PPUSH
98534: PPUSH
98535: PPUSH
98536: PPUSH
98537: PPUSH
98538: PPUSH
98539: PPUSH
98540: PPUSH
98541: PPUSH
98542: PPUSH
98543: PPUSH
98544: PPUSH
98545: PPUSH
98546: PPUSH
98547: PPUSH
// if not list then
98548: LD_VAR 0 1
98552: NOT
98553: IFFALSE 98557
// exit ;
98555: GO 103216
// base := list [ 1 ] ;
98557: LD_ADDR_VAR 0 3
98561: PUSH
98562: LD_VAR 0 1
98566: PUSH
98567: LD_INT 1
98569: ARRAY
98570: ST_TO_ADDR
// group := list [ 2 ] ;
98571: LD_ADDR_VAR 0 4
98575: PUSH
98576: LD_VAR 0 1
98580: PUSH
98581: LD_INT 2
98583: ARRAY
98584: ST_TO_ADDR
// path := list [ 3 ] ;
98585: LD_ADDR_VAR 0 5
98589: PUSH
98590: LD_VAR 0 1
98594: PUSH
98595: LD_INT 3
98597: ARRAY
98598: ST_TO_ADDR
// flags := list [ 4 ] ;
98599: LD_ADDR_VAR 0 6
98603: PUSH
98604: LD_VAR 0 1
98608: PUSH
98609: LD_INT 4
98611: ARRAY
98612: ST_TO_ADDR
// mined := [ ] ;
98613: LD_ADDR_VAR 0 27
98617: PUSH
98618: EMPTY
98619: ST_TO_ADDR
// bombed := [ ] ;
98620: LD_ADDR_VAR 0 28
98624: PUSH
98625: EMPTY
98626: ST_TO_ADDR
// healers := [ ] ;
98627: LD_ADDR_VAR 0 31
98631: PUSH
98632: EMPTY
98633: ST_TO_ADDR
// to_heal := [ ] ;
98634: LD_ADDR_VAR 0 30
98638: PUSH
98639: EMPTY
98640: ST_TO_ADDR
// repairs := [ ] ;
98641: LD_ADDR_VAR 0 33
98645: PUSH
98646: EMPTY
98647: ST_TO_ADDR
// to_repair := [ ] ;
98648: LD_ADDR_VAR 0 32
98652: PUSH
98653: EMPTY
98654: ST_TO_ADDR
// if not group or not path then
98655: LD_VAR 0 4
98659: NOT
98660: PUSH
98661: LD_VAR 0 5
98665: NOT
98666: OR
98667: IFFALSE 98671
// exit ;
98669: GO 103216
// side := GetSide ( group [ 1 ] ) ;
98671: LD_ADDR_VAR 0 35
98675: PUSH
98676: LD_VAR 0 4
98680: PUSH
98681: LD_INT 1
98683: ARRAY
98684: PPUSH
98685: CALL_OW 255
98689: ST_TO_ADDR
// if flags then
98690: LD_VAR 0 6
98694: IFFALSE 98838
// begin f_ignore_area := flags [ 1 ] ;
98696: LD_ADDR_VAR 0 17
98700: PUSH
98701: LD_VAR 0 6
98705: PUSH
98706: LD_INT 1
98708: ARRAY
98709: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
98710: LD_ADDR_VAR 0 18
98714: PUSH
98715: LD_VAR 0 6
98719: PUSH
98720: LD_INT 2
98722: ARRAY
98723: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
98724: LD_ADDR_VAR 0 19
98728: PUSH
98729: LD_VAR 0 6
98733: PUSH
98734: LD_INT 3
98736: ARRAY
98737: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
98738: LD_ADDR_VAR 0 20
98742: PUSH
98743: LD_VAR 0 6
98747: PUSH
98748: LD_INT 4
98750: ARRAY
98751: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
98752: LD_ADDR_VAR 0 21
98756: PUSH
98757: LD_VAR 0 6
98761: PUSH
98762: LD_INT 5
98764: ARRAY
98765: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
98766: LD_ADDR_VAR 0 22
98770: PUSH
98771: LD_VAR 0 6
98775: PUSH
98776: LD_INT 6
98778: ARRAY
98779: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
98780: LD_ADDR_VAR 0 23
98784: PUSH
98785: LD_VAR 0 6
98789: PUSH
98790: LD_INT 7
98792: ARRAY
98793: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
98794: LD_ADDR_VAR 0 24
98798: PUSH
98799: LD_VAR 0 6
98803: PUSH
98804: LD_INT 8
98806: ARRAY
98807: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
98808: LD_ADDR_VAR 0 25
98812: PUSH
98813: LD_VAR 0 6
98817: PUSH
98818: LD_INT 9
98820: ARRAY
98821: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
98822: LD_ADDR_VAR 0 26
98826: PUSH
98827: LD_VAR 0 6
98831: PUSH
98832: LD_INT 10
98834: ARRAY
98835: ST_TO_ADDR
// end else
98836: GO 98918
// begin f_ignore_area := false ;
98838: LD_ADDR_VAR 0 17
98842: PUSH
98843: LD_INT 0
98845: ST_TO_ADDR
// f_capture := false ;
98846: LD_ADDR_VAR 0 18
98850: PUSH
98851: LD_INT 0
98853: ST_TO_ADDR
// f_ignore_civ := false ;
98854: LD_ADDR_VAR 0 19
98858: PUSH
98859: LD_INT 0
98861: ST_TO_ADDR
// f_murder := false ;
98862: LD_ADDR_VAR 0 20
98866: PUSH
98867: LD_INT 0
98869: ST_TO_ADDR
// f_mines := false ;
98870: LD_ADDR_VAR 0 21
98874: PUSH
98875: LD_INT 0
98877: ST_TO_ADDR
// f_repair := false ;
98878: LD_ADDR_VAR 0 22
98882: PUSH
98883: LD_INT 0
98885: ST_TO_ADDR
// f_heal := false ;
98886: LD_ADDR_VAR 0 23
98890: PUSH
98891: LD_INT 0
98893: ST_TO_ADDR
// f_spacetime := false ;
98894: LD_ADDR_VAR 0 24
98898: PUSH
98899: LD_INT 0
98901: ST_TO_ADDR
// f_attack_depot := false ;
98902: LD_ADDR_VAR 0 25
98906: PUSH
98907: LD_INT 0
98909: ST_TO_ADDR
// f_crawl := false ;
98910: LD_ADDR_VAR 0 26
98914: PUSH
98915: LD_INT 0
98917: ST_TO_ADDR
// end ; if f_heal then
98918: LD_VAR 0 23
98922: IFFALSE 98949
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
98924: LD_ADDR_VAR 0 31
98928: PUSH
98929: LD_VAR 0 4
98933: PPUSH
98934: LD_INT 25
98936: PUSH
98937: LD_INT 4
98939: PUSH
98940: EMPTY
98941: LIST
98942: LIST
98943: PPUSH
98944: CALL_OW 72
98948: ST_TO_ADDR
// if f_repair then
98949: LD_VAR 0 22
98953: IFFALSE 98980
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
98955: LD_ADDR_VAR 0 33
98959: PUSH
98960: LD_VAR 0 4
98964: PPUSH
98965: LD_INT 25
98967: PUSH
98968: LD_INT 3
98970: PUSH
98971: EMPTY
98972: LIST
98973: LIST
98974: PPUSH
98975: CALL_OW 72
98979: ST_TO_ADDR
// units_path := [ ] ;
98980: LD_ADDR_VAR 0 16
98984: PUSH
98985: EMPTY
98986: ST_TO_ADDR
// for i = 1 to group do
98987: LD_ADDR_VAR 0 7
98991: PUSH
98992: DOUBLE
98993: LD_INT 1
98995: DEC
98996: ST_TO_ADDR
98997: LD_VAR 0 4
99001: PUSH
99002: FOR_TO
99003: IFFALSE 99032
// units_path := Replace ( units_path , i , path ) ;
99005: LD_ADDR_VAR 0 16
99009: PUSH
99010: LD_VAR 0 16
99014: PPUSH
99015: LD_VAR 0 7
99019: PPUSH
99020: LD_VAR 0 5
99024: PPUSH
99025: CALL_OW 1
99029: ST_TO_ADDR
99030: GO 99002
99032: POP
99033: POP
// repeat for i = group downto 1 do
99034: LD_ADDR_VAR 0 7
99038: PUSH
99039: DOUBLE
99040: LD_VAR 0 4
99044: INC
99045: ST_TO_ADDR
99046: LD_INT 1
99048: PUSH
99049: FOR_DOWNTO
99050: IFFALSE 103172
// begin wait ( 5 ) ;
99052: LD_INT 5
99054: PPUSH
99055: CALL_OW 67
// tmp := [ ] ;
99059: LD_ADDR_VAR 0 14
99063: PUSH
99064: EMPTY
99065: ST_TO_ADDR
// attacking := false ;
99066: LD_ADDR_VAR 0 29
99070: PUSH
99071: LD_INT 0
99073: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
99074: LD_VAR 0 4
99078: PUSH
99079: LD_VAR 0 7
99083: ARRAY
99084: PPUSH
99085: CALL_OW 301
99089: PUSH
99090: LD_VAR 0 4
99094: PUSH
99095: LD_VAR 0 7
99099: ARRAY
99100: NOT
99101: OR
99102: IFFALSE 99211
// begin if GetType ( group [ i ] ) = unit_human then
99104: LD_VAR 0 4
99108: PUSH
99109: LD_VAR 0 7
99113: ARRAY
99114: PPUSH
99115: CALL_OW 247
99119: PUSH
99120: LD_INT 1
99122: EQUAL
99123: IFFALSE 99169
// begin to_heal := to_heal diff group [ i ] ;
99125: LD_ADDR_VAR 0 30
99129: PUSH
99130: LD_VAR 0 30
99134: PUSH
99135: LD_VAR 0 4
99139: PUSH
99140: LD_VAR 0 7
99144: ARRAY
99145: DIFF
99146: ST_TO_ADDR
// healers := healers diff group [ i ] ;
99147: LD_ADDR_VAR 0 31
99151: PUSH
99152: LD_VAR 0 31
99156: PUSH
99157: LD_VAR 0 4
99161: PUSH
99162: LD_VAR 0 7
99166: ARRAY
99167: DIFF
99168: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
99169: LD_ADDR_VAR 0 4
99173: PUSH
99174: LD_VAR 0 4
99178: PPUSH
99179: LD_VAR 0 7
99183: PPUSH
99184: CALL_OW 3
99188: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
99189: LD_ADDR_VAR 0 16
99193: PUSH
99194: LD_VAR 0 16
99198: PPUSH
99199: LD_VAR 0 7
99203: PPUSH
99204: CALL_OW 3
99208: ST_TO_ADDR
// continue ;
99209: GO 99049
// end ; if f_repair then
99211: LD_VAR 0 22
99215: IFFALSE 99704
// begin if GetType ( group [ i ] ) = unit_vehicle then
99217: LD_VAR 0 4
99221: PUSH
99222: LD_VAR 0 7
99226: ARRAY
99227: PPUSH
99228: CALL_OW 247
99232: PUSH
99233: LD_INT 2
99235: EQUAL
99236: IFFALSE 99426
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
99238: LD_VAR 0 4
99242: PUSH
99243: LD_VAR 0 7
99247: ARRAY
99248: PPUSH
99249: CALL_OW 256
99253: PUSH
99254: LD_INT 700
99256: LESS
99257: PUSH
99258: LD_VAR 0 4
99262: PUSH
99263: LD_VAR 0 7
99267: ARRAY
99268: PUSH
99269: LD_VAR 0 32
99273: IN
99274: NOT
99275: AND
99276: IFFALSE 99300
// to_repair := to_repair union group [ i ] ;
99278: LD_ADDR_VAR 0 32
99282: PUSH
99283: LD_VAR 0 32
99287: PUSH
99288: LD_VAR 0 4
99292: PUSH
99293: LD_VAR 0 7
99297: ARRAY
99298: UNION
99299: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
99300: LD_VAR 0 4
99304: PUSH
99305: LD_VAR 0 7
99309: ARRAY
99310: PPUSH
99311: CALL_OW 256
99315: PUSH
99316: LD_INT 1000
99318: EQUAL
99319: PUSH
99320: LD_VAR 0 4
99324: PUSH
99325: LD_VAR 0 7
99329: ARRAY
99330: PUSH
99331: LD_VAR 0 32
99335: IN
99336: AND
99337: IFFALSE 99361
// to_repair := to_repair diff group [ i ] ;
99339: LD_ADDR_VAR 0 32
99343: PUSH
99344: LD_VAR 0 32
99348: PUSH
99349: LD_VAR 0 4
99353: PUSH
99354: LD_VAR 0 7
99358: ARRAY
99359: DIFF
99360: ST_TO_ADDR
// if group [ i ] in to_repair then
99361: LD_VAR 0 4
99365: PUSH
99366: LD_VAR 0 7
99370: ARRAY
99371: PUSH
99372: LD_VAR 0 32
99376: IN
99377: IFFALSE 99424
// begin if not IsInArea ( group [ i ] , f_repair ) then
99379: LD_VAR 0 4
99383: PUSH
99384: LD_VAR 0 7
99388: ARRAY
99389: PPUSH
99390: LD_VAR 0 22
99394: PPUSH
99395: CALL_OW 308
99399: NOT
99400: IFFALSE 99422
// ComMoveToArea ( group [ i ] , f_repair ) ;
99402: LD_VAR 0 4
99406: PUSH
99407: LD_VAR 0 7
99411: ARRAY
99412: PPUSH
99413: LD_VAR 0 22
99417: PPUSH
99418: CALL_OW 113
// continue ;
99422: GO 99049
// end ; end else
99424: GO 99704
// if group [ i ] in repairs then
99426: LD_VAR 0 4
99430: PUSH
99431: LD_VAR 0 7
99435: ARRAY
99436: PUSH
99437: LD_VAR 0 33
99441: IN
99442: IFFALSE 99704
// begin if IsInUnit ( group [ i ] ) then
99444: LD_VAR 0 4
99448: PUSH
99449: LD_VAR 0 7
99453: ARRAY
99454: PPUSH
99455: CALL_OW 310
99459: IFFALSE 99527
// begin z := IsInUnit ( group [ i ] ) ;
99461: LD_ADDR_VAR 0 13
99465: PUSH
99466: LD_VAR 0 4
99470: PUSH
99471: LD_VAR 0 7
99475: ARRAY
99476: PPUSH
99477: CALL_OW 310
99481: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
99482: LD_VAR 0 13
99486: PUSH
99487: LD_VAR 0 32
99491: IN
99492: PUSH
99493: LD_VAR 0 13
99497: PPUSH
99498: LD_VAR 0 22
99502: PPUSH
99503: CALL_OW 308
99507: AND
99508: IFFALSE 99525
// ComExitVehicle ( group [ i ] ) ;
99510: LD_VAR 0 4
99514: PUSH
99515: LD_VAR 0 7
99519: ARRAY
99520: PPUSH
99521: CALL_OW 121
// end else
99525: GO 99704
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
99527: LD_ADDR_VAR 0 13
99531: PUSH
99532: LD_VAR 0 4
99536: PPUSH
99537: LD_INT 95
99539: PUSH
99540: LD_VAR 0 22
99544: PUSH
99545: EMPTY
99546: LIST
99547: LIST
99548: PUSH
99549: LD_INT 58
99551: PUSH
99552: EMPTY
99553: LIST
99554: PUSH
99555: EMPTY
99556: LIST
99557: LIST
99558: PPUSH
99559: CALL_OW 72
99563: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
99564: LD_VAR 0 4
99568: PUSH
99569: LD_VAR 0 7
99573: ARRAY
99574: PPUSH
99575: CALL_OW 314
99579: NOT
99580: IFFALSE 99702
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
99582: LD_ADDR_VAR 0 10
99586: PUSH
99587: LD_VAR 0 13
99591: PPUSH
99592: LD_VAR 0 4
99596: PUSH
99597: LD_VAR 0 7
99601: ARRAY
99602: PPUSH
99603: CALL_OW 74
99607: ST_TO_ADDR
// if not x then
99608: LD_VAR 0 10
99612: NOT
99613: IFFALSE 99617
// continue ;
99615: GO 99049
// if GetLives ( x ) < 1000 then
99617: LD_VAR 0 10
99621: PPUSH
99622: CALL_OW 256
99626: PUSH
99627: LD_INT 1000
99629: LESS
99630: IFFALSE 99654
// ComRepairVehicle ( group [ i ] , x ) else
99632: LD_VAR 0 4
99636: PUSH
99637: LD_VAR 0 7
99641: ARRAY
99642: PPUSH
99643: LD_VAR 0 10
99647: PPUSH
99648: CALL_OW 129
99652: GO 99702
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
99654: LD_VAR 0 23
99658: PUSH
99659: LD_VAR 0 4
99663: PUSH
99664: LD_VAR 0 7
99668: ARRAY
99669: PPUSH
99670: CALL_OW 256
99674: PUSH
99675: LD_INT 1000
99677: LESS
99678: AND
99679: NOT
99680: IFFALSE 99702
// ComEnterUnit ( group [ i ] , x ) ;
99682: LD_VAR 0 4
99686: PUSH
99687: LD_VAR 0 7
99691: ARRAY
99692: PPUSH
99693: LD_VAR 0 10
99697: PPUSH
99698: CALL_OW 120
// end ; continue ;
99702: GO 99049
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
99704: LD_VAR 0 23
99708: PUSH
99709: LD_VAR 0 4
99713: PUSH
99714: LD_VAR 0 7
99718: ARRAY
99719: PPUSH
99720: CALL_OW 247
99724: PUSH
99725: LD_INT 1
99727: EQUAL
99728: AND
99729: IFFALSE 100207
// begin if group [ i ] in healers then
99731: LD_VAR 0 4
99735: PUSH
99736: LD_VAR 0 7
99740: ARRAY
99741: PUSH
99742: LD_VAR 0 31
99746: IN
99747: IFFALSE 100020
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
99749: LD_VAR 0 4
99753: PUSH
99754: LD_VAR 0 7
99758: ARRAY
99759: PPUSH
99760: LD_VAR 0 23
99764: PPUSH
99765: CALL_OW 308
99769: NOT
99770: PUSH
99771: LD_VAR 0 4
99775: PUSH
99776: LD_VAR 0 7
99780: ARRAY
99781: PPUSH
99782: CALL_OW 314
99786: NOT
99787: AND
99788: IFFALSE 99812
// ComMoveToArea ( group [ i ] , f_heal ) else
99790: LD_VAR 0 4
99794: PUSH
99795: LD_VAR 0 7
99799: ARRAY
99800: PPUSH
99801: LD_VAR 0 23
99805: PPUSH
99806: CALL_OW 113
99810: GO 100018
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
99812: LD_VAR 0 4
99816: PUSH
99817: LD_VAR 0 7
99821: ARRAY
99822: PPUSH
99823: CALL 52666 0 1
99827: PPUSH
99828: CALL_OW 256
99832: PUSH
99833: LD_INT 1000
99835: EQUAL
99836: IFFALSE 99855
// ComStop ( group [ i ] ) else
99838: LD_VAR 0 4
99842: PUSH
99843: LD_VAR 0 7
99847: ARRAY
99848: PPUSH
99849: CALL_OW 141
99853: GO 100018
// if not HasTask ( group [ i ] ) and to_heal then
99855: LD_VAR 0 4
99859: PUSH
99860: LD_VAR 0 7
99864: ARRAY
99865: PPUSH
99866: CALL_OW 314
99870: NOT
99871: PUSH
99872: LD_VAR 0 30
99876: AND
99877: IFFALSE 100018
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
99879: LD_ADDR_VAR 0 13
99883: PUSH
99884: LD_VAR 0 30
99888: PPUSH
99889: LD_INT 3
99891: PUSH
99892: LD_INT 54
99894: PUSH
99895: EMPTY
99896: LIST
99897: PUSH
99898: EMPTY
99899: LIST
99900: LIST
99901: PPUSH
99902: CALL_OW 72
99906: PPUSH
99907: LD_VAR 0 4
99911: PUSH
99912: LD_VAR 0 7
99916: ARRAY
99917: PPUSH
99918: CALL_OW 74
99922: ST_TO_ADDR
// if z then
99923: LD_VAR 0 13
99927: IFFALSE 100018
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
99929: LD_INT 91
99931: PUSH
99932: LD_VAR 0 13
99936: PUSH
99937: LD_INT 10
99939: PUSH
99940: EMPTY
99941: LIST
99942: LIST
99943: LIST
99944: PUSH
99945: LD_INT 81
99947: PUSH
99948: LD_VAR 0 13
99952: PPUSH
99953: CALL_OW 255
99957: PUSH
99958: EMPTY
99959: LIST
99960: LIST
99961: PUSH
99962: EMPTY
99963: LIST
99964: LIST
99965: PPUSH
99966: CALL_OW 69
99970: PUSH
99971: LD_INT 0
99973: EQUAL
99974: IFFALSE 99998
// ComHeal ( group [ i ] , z ) else
99976: LD_VAR 0 4
99980: PUSH
99981: LD_VAR 0 7
99985: ARRAY
99986: PPUSH
99987: LD_VAR 0 13
99991: PPUSH
99992: CALL_OW 128
99996: GO 100018
// ComMoveToArea ( group [ i ] , f_heal ) ;
99998: LD_VAR 0 4
100002: PUSH
100003: LD_VAR 0 7
100007: ARRAY
100008: PPUSH
100009: LD_VAR 0 23
100013: PPUSH
100014: CALL_OW 113
// end ; continue ;
100018: GO 99049
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
100020: LD_VAR 0 4
100024: PUSH
100025: LD_VAR 0 7
100029: ARRAY
100030: PPUSH
100031: CALL_OW 256
100035: PUSH
100036: LD_INT 700
100038: LESS
100039: PUSH
100040: LD_VAR 0 4
100044: PUSH
100045: LD_VAR 0 7
100049: ARRAY
100050: PUSH
100051: LD_VAR 0 30
100055: IN
100056: NOT
100057: AND
100058: IFFALSE 100082
// to_heal := to_heal union group [ i ] ;
100060: LD_ADDR_VAR 0 30
100064: PUSH
100065: LD_VAR 0 30
100069: PUSH
100070: LD_VAR 0 4
100074: PUSH
100075: LD_VAR 0 7
100079: ARRAY
100080: UNION
100081: ST_TO_ADDR
// if group [ i ] in to_heal then
100082: LD_VAR 0 4
100086: PUSH
100087: LD_VAR 0 7
100091: ARRAY
100092: PUSH
100093: LD_VAR 0 30
100097: IN
100098: IFFALSE 100207
// begin if GetLives ( group [ i ] ) = 1000 then
100100: LD_VAR 0 4
100104: PUSH
100105: LD_VAR 0 7
100109: ARRAY
100110: PPUSH
100111: CALL_OW 256
100115: PUSH
100116: LD_INT 1000
100118: EQUAL
100119: IFFALSE 100145
// to_heal := to_heal diff group [ i ] else
100121: LD_ADDR_VAR 0 30
100125: PUSH
100126: LD_VAR 0 30
100130: PUSH
100131: LD_VAR 0 4
100135: PUSH
100136: LD_VAR 0 7
100140: ARRAY
100141: DIFF
100142: ST_TO_ADDR
100143: GO 100207
// begin if not IsInArea ( group [ i ] , to_heal ) then
100145: LD_VAR 0 4
100149: PUSH
100150: LD_VAR 0 7
100154: ARRAY
100155: PPUSH
100156: LD_VAR 0 30
100160: PPUSH
100161: CALL_OW 308
100165: NOT
100166: IFFALSE 100190
// ComMoveToArea ( group [ i ] , f_heal ) else
100168: LD_VAR 0 4
100172: PUSH
100173: LD_VAR 0 7
100177: ARRAY
100178: PPUSH
100179: LD_VAR 0 23
100183: PPUSH
100184: CALL_OW 113
100188: GO 100205
// ComHold ( group [ i ] ) ;
100190: LD_VAR 0 4
100194: PUSH
100195: LD_VAR 0 7
100199: ARRAY
100200: PPUSH
100201: CALL_OW 140
// continue ;
100205: GO 99049
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
100207: LD_VAR 0 4
100211: PUSH
100212: LD_VAR 0 7
100216: ARRAY
100217: PPUSH
100218: LD_INT 10
100220: PPUSH
100221: CALL 51086 0 2
100225: NOT
100226: PUSH
100227: LD_VAR 0 16
100231: PUSH
100232: LD_VAR 0 7
100236: ARRAY
100237: PUSH
100238: EMPTY
100239: EQUAL
100240: NOT
100241: AND
100242: IFFALSE 100508
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
100244: LD_VAR 0 4
100248: PUSH
100249: LD_VAR 0 7
100253: ARRAY
100254: PPUSH
100255: CALL_OW 262
100259: PUSH
100260: LD_INT 1
100262: PUSH
100263: LD_INT 2
100265: PUSH
100266: EMPTY
100267: LIST
100268: LIST
100269: IN
100270: IFFALSE 100311
// if GetFuel ( group [ i ] ) < 10 then
100272: LD_VAR 0 4
100276: PUSH
100277: LD_VAR 0 7
100281: ARRAY
100282: PPUSH
100283: CALL_OW 261
100287: PUSH
100288: LD_INT 10
100290: LESS
100291: IFFALSE 100311
// SetFuel ( group [ i ] , 12 ) ;
100293: LD_VAR 0 4
100297: PUSH
100298: LD_VAR 0 7
100302: ARRAY
100303: PPUSH
100304: LD_INT 12
100306: PPUSH
100307: CALL_OW 240
// if units_path [ i ] then
100311: LD_VAR 0 16
100315: PUSH
100316: LD_VAR 0 7
100320: ARRAY
100321: IFFALSE 100506
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
100323: LD_VAR 0 4
100327: PUSH
100328: LD_VAR 0 7
100332: ARRAY
100333: PPUSH
100334: LD_VAR 0 16
100338: PUSH
100339: LD_VAR 0 7
100343: ARRAY
100344: PUSH
100345: LD_INT 1
100347: ARRAY
100348: PUSH
100349: LD_INT 1
100351: ARRAY
100352: PPUSH
100353: LD_VAR 0 16
100357: PUSH
100358: LD_VAR 0 7
100362: ARRAY
100363: PUSH
100364: LD_INT 1
100366: ARRAY
100367: PUSH
100368: LD_INT 2
100370: ARRAY
100371: PPUSH
100372: CALL_OW 297
100376: PUSH
100377: LD_INT 6
100379: GREATER
100380: IFFALSE 100455
// begin if not HasTask ( group [ i ] ) then
100382: LD_VAR 0 4
100386: PUSH
100387: LD_VAR 0 7
100391: ARRAY
100392: PPUSH
100393: CALL_OW 314
100397: NOT
100398: IFFALSE 100453
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
100400: LD_VAR 0 4
100404: PUSH
100405: LD_VAR 0 7
100409: ARRAY
100410: PPUSH
100411: LD_VAR 0 16
100415: PUSH
100416: LD_VAR 0 7
100420: ARRAY
100421: PUSH
100422: LD_INT 1
100424: ARRAY
100425: PUSH
100426: LD_INT 1
100428: ARRAY
100429: PPUSH
100430: LD_VAR 0 16
100434: PUSH
100435: LD_VAR 0 7
100439: ARRAY
100440: PUSH
100441: LD_INT 1
100443: ARRAY
100444: PUSH
100445: LD_INT 2
100447: ARRAY
100448: PPUSH
100449: CALL_OW 114
// end else
100453: GO 100506
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
100455: LD_ADDR_VAR 0 15
100459: PUSH
100460: LD_VAR 0 16
100464: PUSH
100465: LD_VAR 0 7
100469: ARRAY
100470: PPUSH
100471: LD_INT 1
100473: PPUSH
100474: CALL_OW 3
100478: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
100479: LD_ADDR_VAR 0 16
100483: PUSH
100484: LD_VAR 0 16
100488: PPUSH
100489: LD_VAR 0 7
100493: PPUSH
100494: LD_VAR 0 15
100498: PPUSH
100499: CALL_OW 1
100503: ST_TO_ADDR
// continue ;
100504: GO 99049
// end ; end ; end else
100506: GO 103170
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
100508: LD_ADDR_VAR 0 14
100512: PUSH
100513: LD_INT 81
100515: PUSH
100516: LD_VAR 0 4
100520: PUSH
100521: LD_VAR 0 7
100525: ARRAY
100526: PPUSH
100527: CALL_OW 255
100531: PUSH
100532: EMPTY
100533: LIST
100534: LIST
100535: PPUSH
100536: CALL_OW 69
100540: ST_TO_ADDR
// if not tmp then
100541: LD_VAR 0 14
100545: NOT
100546: IFFALSE 100550
// continue ;
100548: GO 99049
// if f_ignore_area then
100550: LD_VAR 0 17
100554: IFFALSE 100642
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
100556: LD_ADDR_VAR 0 15
100560: PUSH
100561: LD_VAR 0 14
100565: PPUSH
100566: LD_INT 3
100568: PUSH
100569: LD_INT 92
100571: PUSH
100572: LD_VAR 0 17
100576: PUSH
100577: LD_INT 1
100579: ARRAY
100580: PUSH
100581: LD_VAR 0 17
100585: PUSH
100586: LD_INT 2
100588: ARRAY
100589: PUSH
100590: LD_VAR 0 17
100594: PUSH
100595: LD_INT 3
100597: ARRAY
100598: PUSH
100599: EMPTY
100600: LIST
100601: LIST
100602: LIST
100603: LIST
100604: PUSH
100605: EMPTY
100606: LIST
100607: LIST
100608: PPUSH
100609: CALL_OW 72
100613: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
100614: LD_VAR 0 14
100618: PUSH
100619: LD_VAR 0 15
100623: DIFF
100624: IFFALSE 100642
// tmp := tmp diff tmp2 ;
100626: LD_ADDR_VAR 0 14
100630: PUSH
100631: LD_VAR 0 14
100635: PUSH
100636: LD_VAR 0 15
100640: DIFF
100641: ST_TO_ADDR
// end ; if not f_murder then
100642: LD_VAR 0 20
100646: NOT
100647: IFFALSE 100705
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
100649: LD_ADDR_VAR 0 15
100653: PUSH
100654: LD_VAR 0 14
100658: PPUSH
100659: LD_INT 3
100661: PUSH
100662: LD_INT 50
100664: PUSH
100665: EMPTY
100666: LIST
100667: PUSH
100668: EMPTY
100669: LIST
100670: LIST
100671: PPUSH
100672: CALL_OW 72
100676: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
100677: LD_VAR 0 14
100681: PUSH
100682: LD_VAR 0 15
100686: DIFF
100687: IFFALSE 100705
// tmp := tmp diff tmp2 ;
100689: LD_ADDR_VAR 0 14
100693: PUSH
100694: LD_VAR 0 14
100698: PUSH
100699: LD_VAR 0 15
100703: DIFF
100704: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
100705: LD_ADDR_VAR 0 14
100709: PUSH
100710: LD_VAR 0 4
100714: PUSH
100715: LD_VAR 0 7
100719: ARRAY
100720: PPUSH
100721: LD_VAR 0 14
100725: PPUSH
100726: LD_INT 1
100728: PPUSH
100729: LD_INT 1
100731: PPUSH
100732: CALL 24729 0 4
100736: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
100737: LD_VAR 0 4
100741: PUSH
100742: LD_VAR 0 7
100746: ARRAY
100747: PPUSH
100748: CALL_OW 257
100752: PUSH
100753: LD_INT 1
100755: EQUAL
100756: IFFALSE 101204
// begin if WantPlant ( group [ i ] ) then
100758: LD_VAR 0 4
100762: PUSH
100763: LD_VAR 0 7
100767: ARRAY
100768: PPUSH
100769: CALL 24230 0 1
100773: IFFALSE 100777
// continue ;
100775: GO 99049
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
100777: LD_VAR 0 18
100781: PUSH
100782: LD_VAR 0 4
100786: PUSH
100787: LD_VAR 0 7
100791: ARRAY
100792: PPUSH
100793: CALL_OW 310
100797: NOT
100798: AND
100799: PUSH
100800: LD_VAR 0 14
100804: PUSH
100805: LD_INT 1
100807: ARRAY
100808: PUSH
100809: LD_VAR 0 14
100813: PPUSH
100814: LD_INT 21
100816: PUSH
100817: LD_INT 2
100819: PUSH
100820: EMPTY
100821: LIST
100822: LIST
100823: PUSH
100824: LD_INT 58
100826: PUSH
100827: EMPTY
100828: LIST
100829: PUSH
100830: EMPTY
100831: LIST
100832: LIST
100833: PPUSH
100834: CALL_OW 72
100838: IN
100839: AND
100840: IFFALSE 100876
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
100842: LD_VAR 0 4
100846: PUSH
100847: LD_VAR 0 7
100851: ARRAY
100852: PPUSH
100853: LD_VAR 0 14
100857: PUSH
100858: LD_INT 1
100860: ARRAY
100861: PPUSH
100862: CALL_OW 120
// attacking := true ;
100866: LD_ADDR_VAR 0 29
100870: PUSH
100871: LD_INT 1
100873: ST_TO_ADDR
// continue ;
100874: GO 99049
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
100876: LD_VAR 0 26
100880: PUSH
100881: LD_VAR 0 4
100885: PUSH
100886: LD_VAR 0 7
100890: ARRAY
100891: PPUSH
100892: CALL_OW 257
100896: PUSH
100897: LD_INT 1
100899: EQUAL
100900: AND
100901: PUSH
100902: LD_VAR 0 4
100906: PUSH
100907: LD_VAR 0 7
100911: ARRAY
100912: PPUSH
100913: CALL_OW 256
100917: PUSH
100918: LD_INT 800
100920: LESS
100921: AND
100922: PUSH
100923: LD_VAR 0 4
100927: PUSH
100928: LD_VAR 0 7
100932: ARRAY
100933: PPUSH
100934: CALL_OW 318
100938: NOT
100939: AND
100940: IFFALSE 100957
// ComCrawl ( group [ i ] ) ;
100942: LD_VAR 0 4
100946: PUSH
100947: LD_VAR 0 7
100951: ARRAY
100952: PPUSH
100953: CALL_OW 137
// if f_mines then
100957: LD_VAR 0 21
100961: IFFALSE 101204
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
100963: LD_VAR 0 14
100967: PUSH
100968: LD_INT 1
100970: ARRAY
100971: PPUSH
100972: CALL_OW 247
100976: PUSH
100977: LD_INT 3
100979: EQUAL
100980: PUSH
100981: LD_VAR 0 14
100985: PUSH
100986: LD_INT 1
100988: ARRAY
100989: PUSH
100990: LD_VAR 0 27
100994: IN
100995: NOT
100996: AND
100997: IFFALSE 101204
// begin x := GetX ( tmp [ 1 ] ) ;
100999: LD_ADDR_VAR 0 10
101003: PUSH
101004: LD_VAR 0 14
101008: PUSH
101009: LD_INT 1
101011: ARRAY
101012: PPUSH
101013: CALL_OW 250
101017: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
101018: LD_ADDR_VAR 0 11
101022: PUSH
101023: LD_VAR 0 14
101027: PUSH
101028: LD_INT 1
101030: ARRAY
101031: PPUSH
101032: CALL_OW 251
101036: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
101037: LD_ADDR_VAR 0 12
101041: PUSH
101042: LD_VAR 0 4
101046: PUSH
101047: LD_VAR 0 7
101051: ARRAY
101052: PPUSH
101053: CALL 51171 0 1
101057: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
101058: LD_VAR 0 4
101062: PUSH
101063: LD_VAR 0 7
101067: ARRAY
101068: PPUSH
101069: LD_VAR 0 10
101073: PPUSH
101074: LD_VAR 0 11
101078: PPUSH
101079: LD_VAR 0 14
101083: PUSH
101084: LD_INT 1
101086: ARRAY
101087: PPUSH
101088: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
101092: LD_VAR 0 4
101096: PUSH
101097: LD_VAR 0 7
101101: ARRAY
101102: PPUSH
101103: LD_VAR 0 10
101107: PPUSH
101108: LD_VAR 0 12
101112: PPUSH
101113: LD_INT 7
101115: PPUSH
101116: CALL_OW 272
101120: PPUSH
101121: LD_VAR 0 11
101125: PPUSH
101126: LD_VAR 0 12
101130: PPUSH
101131: LD_INT 7
101133: PPUSH
101134: CALL_OW 273
101138: PPUSH
101139: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
101143: LD_VAR 0 4
101147: PUSH
101148: LD_VAR 0 7
101152: ARRAY
101153: PPUSH
101154: LD_INT 71
101156: PPUSH
101157: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
101161: LD_ADDR_VAR 0 27
101165: PUSH
101166: LD_VAR 0 27
101170: PPUSH
101171: LD_VAR 0 27
101175: PUSH
101176: LD_INT 1
101178: PLUS
101179: PPUSH
101180: LD_VAR 0 14
101184: PUSH
101185: LD_INT 1
101187: ARRAY
101188: PPUSH
101189: CALL_OW 1
101193: ST_TO_ADDR
// attacking := true ;
101194: LD_ADDR_VAR 0 29
101198: PUSH
101199: LD_INT 1
101201: ST_TO_ADDR
// continue ;
101202: GO 99049
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
101204: LD_VAR 0 4
101208: PUSH
101209: LD_VAR 0 7
101213: ARRAY
101214: PPUSH
101215: CALL_OW 257
101219: PUSH
101220: LD_INT 17
101222: EQUAL
101223: PUSH
101224: LD_VAR 0 4
101228: PUSH
101229: LD_VAR 0 7
101233: ARRAY
101234: PPUSH
101235: CALL_OW 110
101239: PUSH
101240: LD_INT 71
101242: EQUAL
101243: NOT
101244: AND
101245: IFFALSE 101391
// begin attacking := false ;
101247: LD_ADDR_VAR 0 29
101251: PUSH
101252: LD_INT 0
101254: ST_TO_ADDR
// k := 5 ;
101255: LD_ADDR_VAR 0 9
101259: PUSH
101260: LD_INT 5
101262: ST_TO_ADDR
// if tmp < k then
101263: LD_VAR 0 14
101267: PUSH
101268: LD_VAR 0 9
101272: LESS
101273: IFFALSE 101285
// k := tmp ;
101275: LD_ADDR_VAR 0 9
101279: PUSH
101280: LD_VAR 0 14
101284: ST_TO_ADDR
// for j = 1 to k do
101285: LD_ADDR_VAR 0 8
101289: PUSH
101290: DOUBLE
101291: LD_INT 1
101293: DEC
101294: ST_TO_ADDR
101295: LD_VAR 0 9
101299: PUSH
101300: FOR_TO
101301: IFFALSE 101389
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
101303: LD_VAR 0 14
101307: PUSH
101308: LD_VAR 0 8
101312: ARRAY
101313: PUSH
101314: LD_VAR 0 14
101318: PPUSH
101319: LD_INT 58
101321: PUSH
101322: EMPTY
101323: LIST
101324: PPUSH
101325: CALL_OW 72
101329: IN
101330: NOT
101331: IFFALSE 101387
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
101333: LD_VAR 0 4
101337: PUSH
101338: LD_VAR 0 7
101342: ARRAY
101343: PPUSH
101344: LD_VAR 0 14
101348: PUSH
101349: LD_VAR 0 8
101353: ARRAY
101354: PPUSH
101355: CALL_OW 115
// attacking := true ;
101359: LD_ADDR_VAR 0 29
101363: PUSH
101364: LD_INT 1
101366: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
101367: LD_VAR 0 4
101371: PUSH
101372: LD_VAR 0 7
101376: ARRAY
101377: PPUSH
101378: LD_INT 71
101380: PPUSH
101381: CALL_OW 109
// continue ;
101385: GO 101300
// end ; end ;
101387: GO 101300
101389: POP
101390: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
101391: LD_VAR 0 4
101395: PUSH
101396: LD_VAR 0 7
101400: ARRAY
101401: PPUSH
101402: CALL_OW 257
101406: PUSH
101407: LD_INT 8
101409: EQUAL
101410: PUSH
101411: LD_VAR 0 4
101415: PUSH
101416: LD_VAR 0 7
101420: ARRAY
101421: PPUSH
101422: CALL_OW 264
101426: PUSH
101427: LD_INT 28
101429: PUSH
101430: LD_INT 45
101432: PUSH
101433: LD_INT 7
101435: PUSH
101436: LD_INT 47
101438: PUSH
101439: EMPTY
101440: LIST
101441: LIST
101442: LIST
101443: LIST
101444: IN
101445: OR
101446: IFFALSE 101702
// begin attacking := false ;
101448: LD_ADDR_VAR 0 29
101452: PUSH
101453: LD_INT 0
101455: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
101456: LD_VAR 0 14
101460: PUSH
101461: LD_INT 1
101463: ARRAY
101464: PPUSH
101465: CALL_OW 266
101469: PUSH
101470: LD_INT 32
101472: PUSH
101473: LD_INT 31
101475: PUSH
101476: LD_INT 33
101478: PUSH
101479: LD_INT 4
101481: PUSH
101482: LD_INT 5
101484: PUSH
101485: EMPTY
101486: LIST
101487: LIST
101488: LIST
101489: LIST
101490: LIST
101491: IN
101492: IFFALSE 101678
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
101494: LD_ADDR_VAR 0 9
101498: PUSH
101499: LD_VAR 0 14
101503: PUSH
101504: LD_INT 1
101506: ARRAY
101507: PPUSH
101508: CALL_OW 266
101512: PPUSH
101513: LD_VAR 0 14
101517: PUSH
101518: LD_INT 1
101520: ARRAY
101521: PPUSH
101522: CALL_OW 250
101526: PPUSH
101527: LD_VAR 0 14
101531: PUSH
101532: LD_INT 1
101534: ARRAY
101535: PPUSH
101536: CALL_OW 251
101540: PPUSH
101541: LD_VAR 0 14
101545: PUSH
101546: LD_INT 1
101548: ARRAY
101549: PPUSH
101550: CALL_OW 254
101554: PPUSH
101555: LD_VAR 0 14
101559: PUSH
101560: LD_INT 1
101562: ARRAY
101563: PPUSH
101564: CALL_OW 248
101568: PPUSH
101569: LD_INT 0
101571: PPUSH
101572: CALL 32541 0 6
101576: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
101577: LD_ADDR_VAR 0 8
101581: PUSH
101582: LD_VAR 0 4
101586: PUSH
101587: LD_VAR 0 7
101591: ARRAY
101592: PPUSH
101593: LD_VAR 0 9
101597: PPUSH
101598: CALL 51211 0 2
101602: ST_TO_ADDR
// if j then
101603: LD_VAR 0 8
101607: IFFALSE 101676
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
101609: LD_VAR 0 8
101613: PUSH
101614: LD_INT 1
101616: ARRAY
101617: PPUSH
101618: LD_VAR 0 8
101622: PUSH
101623: LD_INT 2
101625: ARRAY
101626: PPUSH
101627: CALL_OW 488
101631: IFFALSE 101676
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
101633: LD_VAR 0 4
101637: PUSH
101638: LD_VAR 0 7
101642: ARRAY
101643: PPUSH
101644: LD_VAR 0 8
101648: PUSH
101649: LD_INT 1
101651: ARRAY
101652: PPUSH
101653: LD_VAR 0 8
101657: PUSH
101658: LD_INT 2
101660: ARRAY
101661: PPUSH
101662: CALL_OW 116
// attacking := true ;
101666: LD_ADDR_VAR 0 29
101670: PUSH
101671: LD_INT 1
101673: ST_TO_ADDR
// continue ;
101674: GO 99049
// end ; end else
101676: GO 101702
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
101678: LD_VAR 0 4
101682: PUSH
101683: LD_VAR 0 7
101687: ARRAY
101688: PPUSH
101689: LD_VAR 0 14
101693: PUSH
101694: LD_INT 1
101696: ARRAY
101697: PPUSH
101698: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
101702: LD_VAR 0 4
101706: PUSH
101707: LD_VAR 0 7
101711: ARRAY
101712: PPUSH
101713: CALL_OW 265
101717: PUSH
101718: LD_INT 11
101720: EQUAL
101721: IFFALSE 101999
// begin k := 10 ;
101723: LD_ADDR_VAR 0 9
101727: PUSH
101728: LD_INT 10
101730: ST_TO_ADDR
// x := 0 ;
101731: LD_ADDR_VAR 0 10
101735: PUSH
101736: LD_INT 0
101738: ST_TO_ADDR
// if tmp < k then
101739: LD_VAR 0 14
101743: PUSH
101744: LD_VAR 0 9
101748: LESS
101749: IFFALSE 101761
// k := tmp ;
101751: LD_ADDR_VAR 0 9
101755: PUSH
101756: LD_VAR 0 14
101760: ST_TO_ADDR
// for j = k downto 1 do
101761: LD_ADDR_VAR 0 8
101765: PUSH
101766: DOUBLE
101767: LD_VAR 0 9
101771: INC
101772: ST_TO_ADDR
101773: LD_INT 1
101775: PUSH
101776: FOR_DOWNTO
101777: IFFALSE 101852
// begin if GetType ( tmp [ j ] ) = unit_human then
101779: LD_VAR 0 14
101783: PUSH
101784: LD_VAR 0 8
101788: ARRAY
101789: PPUSH
101790: CALL_OW 247
101794: PUSH
101795: LD_INT 1
101797: EQUAL
101798: IFFALSE 101850
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
101800: LD_VAR 0 4
101804: PUSH
101805: LD_VAR 0 7
101809: ARRAY
101810: PPUSH
101811: LD_VAR 0 14
101815: PUSH
101816: LD_VAR 0 8
101820: ARRAY
101821: PPUSH
101822: CALL 51482 0 2
// x := tmp [ j ] ;
101826: LD_ADDR_VAR 0 10
101830: PUSH
101831: LD_VAR 0 14
101835: PUSH
101836: LD_VAR 0 8
101840: ARRAY
101841: ST_TO_ADDR
// attacking := true ;
101842: LD_ADDR_VAR 0 29
101846: PUSH
101847: LD_INT 1
101849: ST_TO_ADDR
// end ; end ;
101850: GO 101776
101852: POP
101853: POP
// if not x then
101854: LD_VAR 0 10
101858: NOT
101859: IFFALSE 101999
// begin attacking := true ;
101861: LD_ADDR_VAR 0 29
101865: PUSH
101866: LD_INT 1
101868: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
101869: LD_VAR 0 4
101873: PUSH
101874: LD_VAR 0 7
101878: ARRAY
101879: PPUSH
101880: CALL_OW 250
101884: PPUSH
101885: LD_VAR 0 4
101889: PUSH
101890: LD_VAR 0 7
101894: ARRAY
101895: PPUSH
101896: CALL_OW 251
101900: PPUSH
101901: CALL_OW 546
101905: PUSH
101906: LD_INT 2
101908: ARRAY
101909: PUSH
101910: LD_VAR 0 14
101914: PUSH
101915: LD_INT 1
101917: ARRAY
101918: PPUSH
101919: CALL_OW 250
101923: PPUSH
101924: LD_VAR 0 14
101928: PUSH
101929: LD_INT 1
101931: ARRAY
101932: PPUSH
101933: CALL_OW 251
101937: PPUSH
101938: CALL_OW 546
101942: PUSH
101943: LD_INT 2
101945: ARRAY
101946: EQUAL
101947: IFFALSE 101975
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
101949: LD_VAR 0 4
101953: PUSH
101954: LD_VAR 0 7
101958: ARRAY
101959: PPUSH
101960: LD_VAR 0 14
101964: PUSH
101965: LD_INT 1
101967: ARRAY
101968: PPUSH
101969: CALL 51482 0 2
101973: GO 101999
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
101975: LD_VAR 0 4
101979: PUSH
101980: LD_VAR 0 7
101984: ARRAY
101985: PPUSH
101986: LD_VAR 0 14
101990: PUSH
101991: LD_INT 1
101993: ARRAY
101994: PPUSH
101995: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
101999: LD_VAR 0 4
102003: PUSH
102004: LD_VAR 0 7
102008: ARRAY
102009: PPUSH
102010: CALL_OW 264
102014: PUSH
102015: LD_INT 29
102017: EQUAL
102018: IFFALSE 102384
// begin if WantsToAttack ( group [ i ] ) in bombed then
102020: LD_VAR 0 4
102024: PUSH
102025: LD_VAR 0 7
102029: ARRAY
102030: PPUSH
102031: CALL_OW 319
102035: PUSH
102036: LD_VAR 0 28
102040: IN
102041: IFFALSE 102045
// continue ;
102043: GO 99049
// k := 8 ;
102045: LD_ADDR_VAR 0 9
102049: PUSH
102050: LD_INT 8
102052: ST_TO_ADDR
// x := 0 ;
102053: LD_ADDR_VAR 0 10
102057: PUSH
102058: LD_INT 0
102060: ST_TO_ADDR
// if tmp < k then
102061: LD_VAR 0 14
102065: PUSH
102066: LD_VAR 0 9
102070: LESS
102071: IFFALSE 102083
// k := tmp ;
102073: LD_ADDR_VAR 0 9
102077: PUSH
102078: LD_VAR 0 14
102082: ST_TO_ADDR
// for j = 1 to k do
102083: LD_ADDR_VAR 0 8
102087: PUSH
102088: DOUBLE
102089: LD_INT 1
102091: DEC
102092: ST_TO_ADDR
102093: LD_VAR 0 9
102097: PUSH
102098: FOR_TO
102099: IFFALSE 102231
// begin if GetType ( tmp [ j ] ) = unit_building then
102101: LD_VAR 0 14
102105: PUSH
102106: LD_VAR 0 8
102110: ARRAY
102111: PPUSH
102112: CALL_OW 247
102116: PUSH
102117: LD_INT 3
102119: EQUAL
102120: IFFALSE 102229
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
102122: LD_VAR 0 14
102126: PUSH
102127: LD_VAR 0 8
102131: ARRAY
102132: PUSH
102133: LD_VAR 0 28
102137: IN
102138: NOT
102139: PUSH
102140: LD_VAR 0 14
102144: PUSH
102145: LD_VAR 0 8
102149: ARRAY
102150: PPUSH
102151: CALL_OW 313
102155: AND
102156: IFFALSE 102229
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
102158: LD_VAR 0 4
102162: PUSH
102163: LD_VAR 0 7
102167: ARRAY
102168: PPUSH
102169: LD_VAR 0 14
102173: PUSH
102174: LD_VAR 0 8
102178: ARRAY
102179: PPUSH
102180: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
102184: LD_ADDR_VAR 0 28
102188: PUSH
102189: LD_VAR 0 28
102193: PPUSH
102194: LD_VAR 0 28
102198: PUSH
102199: LD_INT 1
102201: PLUS
102202: PPUSH
102203: LD_VAR 0 14
102207: PUSH
102208: LD_VAR 0 8
102212: ARRAY
102213: PPUSH
102214: CALL_OW 1
102218: ST_TO_ADDR
// attacking := true ;
102219: LD_ADDR_VAR 0 29
102223: PUSH
102224: LD_INT 1
102226: ST_TO_ADDR
// break ;
102227: GO 102231
// end ; end ;
102229: GO 102098
102231: POP
102232: POP
// if not attacking and f_attack_depot then
102233: LD_VAR 0 29
102237: NOT
102238: PUSH
102239: LD_VAR 0 25
102243: AND
102244: IFFALSE 102339
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
102246: LD_ADDR_VAR 0 13
102250: PUSH
102251: LD_VAR 0 14
102255: PPUSH
102256: LD_INT 2
102258: PUSH
102259: LD_INT 30
102261: PUSH
102262: LD_INT 0
102264: PUSH
102265: EMPTY
102266: LIST
102267: LIST
102268: PUSH
102269: LD_INT 30
102271: PUSH
102272: LD_INT 1
102274: PUSH
102275: EMPTY
102276: LIST
102277: LIST
102278: PUSH
102279: EMPTY
102280: LIST
102281: LIST
102282: LIST
102283: PPUSH
102284: CALL_OW 72
102288: ST_TO_ADDR
// if z then
102289: LD_VAR 0 13
102293: IFFALSE 102339
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
102295: LD_VAR 0 4
102299: PUSH
102300: LD_VAR 0 7
102304: ARRAY
102305: PPUSH
102306: LD_VAR 0 13
102310: PPUSH
102311: LD_VAR 0 4
102315: PUSH
102316: LD_VAR 0 7
102320: ARRAY
102321: PPUSH
102322: CALL_OW 74
102326: PPUSH
102327: CALL_OW 115
// attacking := true ;
102331: LD_ADDR_VAR 0 29
102335: PUSH
102336: LD_INT 1
102338: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
102339: LD_VAR 0 4
102343: PUSH
102344: LD_VAR 0 7
102348: ARRAY
102349: PPUSH
102350: CALL_OW 256
102354: PUSH
102355: LD_INT 500
102357: LESS
102358: IFFALSE 102384
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
102360: LD_VAR 0 4
102364: PUSH
102365: LD_VAR 0 7
102369: ARRAY
102370: PPUSH
102371: LD_VAR 0 14
102375: PUSH
102376: LD_INT 1
102378: ARRAY
102379: PPUSH
102380: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
102384: LD_VAR 0 4
102388: PUSH
102389: LD_VAR 0 7
102393: ARRAY
102394: PPUSH
102395: CALL_OW 264
102399: PUSH
102400: LD_INT 49
102402: EQUAL
102403: IFFALSE 102524
// begin if not HasTask ( group [ i ] ) then
102405: LD_VAR 0 4
102409: PUSH
102410: LD_VAR 0 7
102414: ARRAY
102415: PPUSH
102416: CALL_OW 314
102420: NOT
102421: IFFALSE 102524
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
102423: LD_ADDR_VAR 0 9
102427: PUSH
102428: LD_INT 81
102430: PUSH
102431: LD_VAR 0 4
102435: PUSH
102436: LD_VAR 0 7
102440: ARRAY
102441: PPUSH
102442: CALL_OW 255
102446: PUSH
102447: EMPTY
102448: LIST
102449: LIST
102450: PPUSH
102451: CALL_OW 69
102455: PPUSH
102456: LD_VAR 0 4
102460: PUSH
102461: LD_VAR 0 7
102465: ARRAY
102466: PPUSH
102467: CALL_OW 74
102471: ST_TO_ADDR
// if k then
102472: LD_VAR 0 9
102476: IFFALSE 102524
// if GetDistUnits ( group [ i ] , k ) > 10 then
102478: LD_VAR 0 4
102482: PUSH
102483: LD_VAR 0 7
102487: ARRAY
102488: PPUSH
102489: LD_VAR 0 9
102493: PPUSH
102494: CALL_OW 296
102498: PUSH
102499: LD_INT 10
102501: GREATER
102502: IFFALSE 102524
// ComMoveUnit ( group [ i ] , k ) ;
102504: LD_VAR 0 4
102508: PUSH
102509: LD_VAR 0 7
102513: ARRAY
102514: PPUSH
102515: LD_VAR 0 9
102519: PPUSH
102520: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
102524: LD_VAR 0 4
102528: PUSH
102529: LD_VAR 0 7
102533: ARRAY
102534: PPUSH
102535: CALL_OW 256
102539: PUSH
102540: LD_INT 250
102542: LESS
102543: PUSH
102544: LD_VAR 0 4
102548: PUSH
102549: LD_VAR 0 7
102553: ARRAY
102554: PUSH
102555: LD_INT 21
102557: PUSH
102558: LD_INT 2
102560: PUSH
102561: EMPTY
102562: LIST
102563: LIST
102564: PUSH
102565: LD_INT 23
102567: PUSH
102568: LD_INT 2
102570: PUSH
102571: EMPTY
102572: LIST
102573: LIST
102574: PUSH
102575: EMPTY
102576: LIST
102577: LIST
102578: PPUSH
102579: CALL_OW 69
102583: IN
102584: AND
102585: IFFALSE 102710
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
102587: LD_ADDR_VAR 0 9
102591: PUSH
102592: LD_OWVAR 3
102596: PUSH
102597: LD_VAR 0 4
102601: PUSH
102602: LD_VAR 0 7
102606: ARRAY
102607: DIFF
102608: PPUSH
102609: LD_VAR 0 4
102613: PUSH
102614: LD_VAR 0 7
102618: ARRAY
102619: PPUSH
102620: CALL_OW 74
102624: ST_TO_ADDR
// if not k then
102625: LD_VAR 0 9
102629: NOT
102630: IFFALSE 102634
// continue ;
102632: GO 99049
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
102634: LD_VAR 0 9
102638: PUSH
102639: LD_INT 81
102641: PUSH
102642: LD_VAR 0 4
102646: PUSH
102647: LD_VAR 0 7
102651: ARRAY
102652: PPUSH
102653: CALL_OW 255
102657: PUSH
102658: EMPTY
102659: LIST
102660: LIST
102661: PPUSH
102662: CALL_OW 69
102666: IN
102667: PUSH
102668: LD_VAR 0 9
102672: PPUSH
102673: LD_VAR 0 4
102677: PUSH
102678: LD_VAR 0 7
102682: ARRAY
102683: PPUSH
102684: CALL_OW 296
102688: PUSH
102689: LD_INT 5
102691: LESS
102692: AND
102693: IFFALSE 102710
// ComAutodestruct ( group [ i ] ) ;
102695: LD_VAR 0 4
102699: PUSH
102700: LD_VAR 0 7
102704: ARRAY
102705: PPUSH
102706: CALL 51380 0 1
// end ; if f_attack_depot then
102710: LD_VAR 0 25
102714: IFFALSE 102826
// begin k := 6 ;
102716: LD_ADDR_VAR 0 9
102720: PUSH
102721: LD_INT 6
102723: ST_TO_ADDR
// if tmp < k then
102724: LD_VAR 0 14
102728: PUSH
102729: LD_VAR 0 9
102733: LESS
102734: IFFALSE 102746
// k := tmp ;
102736: LD_ADDR_VAR 0 9
102740: PUSH
102741: LD_VAR 0 14
102745: ST_TO_ADDR
// for j = 1 to k do
102746: LD_ADDR_VAR 0 8
102750: PUSH
102751: DOUBLE
102752: LD_INT 1
102754: DEC
102755: ST_TO_ADDR
102756: LD_VAR 0 9
102760: PUSH
102761: FOR_TO
102762: IFFALSE 102824
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
102764: LD_VAR 0 8
102768: PPUSH
102769: CALL_OW 266
102773: PUSH
102774: LD_INT 0
102776: PUSH
102777: LD_INT 1
102779: PUSH
102780: EMPTY
102781: LIST
102782: LIST
102783: IN
102784: IFFALSE 102822
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
102786: LD_VAR 0 4
102790: PUSH
102791: LD_VAR 0 7
102795: ARRAY
102796: PPUSH
102797: LD_VAR 0 14
102801: PUSH
102802: LD_VAR 0 8
102806: ARRAY
102807: PPUSH
102808: CALL_OW 115
// attacking := true ;
102812: LD_ADDR_VAR 0 29
102816: PUSH
102817: LD_INT 1
102819: ST_TO_ADDR
// break ;
102820: GO 102824
// end ;
102822: GO 102761
102824: POP
102825: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
102826: LD_VAR 0 4
102830: PUSH
102831: LD_VAR 0 7
102835: ARRAY
102836: PPUSH
102837: CALL_OW 302
102841: PUSH
102842: LD_VAR 0 29
102846: NOT
102847: AND
102848: IFFALSE 103170
// begin if GetTag ( group [ i ] ) = 71 then
102850: LD_VAR 0 4
102854: PUSH
102855: LD_VAR 0 7
102859: ARRAY
102860: PPUSH
102861: CALL_OW 110
102865: PUSH
102866: LD_INT 71
102868: EQUAL
102869: IFFALSE 102910
// begin if HasTask ( group [ i ] ) then
102871: LD_VAR 0 4
102875: PUSH
102876: LD_VAR 0 7
102880: ARRAY
102881: PPUSH
102882: CALL_OW 314
102886: IFFALSE 102892
// continue else
102888: GO 99049
102890: GO 102910
// SetTag ( group [ i ] , 0 ) ;
102892: LD_VAR 0 4
102896: PUSH
102897: LD_VAR 0 7
102901: ARRAY
102902: PPUSH
102903: LD_INT 0
102905: PPUSH
102906: CALL_OW 109
// end ; k := 8 ;
102910: LD_ADDR_VAR 0 9
102914: PUSH
102915: LD_INT 8
102917: ST_TO_ADDR
// x := 0 ;
102918: LD_ADDR_VAR 0 10
102922: PUSH
102923: LD_INT 0
102925: ST_TO_ADDR
// if tmp < k then
102926: LD_VAR 0 14
102930: PUSH
102931: LD_VAR 0 9
102935: LESS
102936: IFFALSE 102948
// k := tmp ;
102938: LD_ADDR_VAR 0 9
102942: PUSH
102943: LD_VAR 0 14
102947: ST_TO_ADDR
// for j = 1 to k do
102948: LD_ADDR_VAR 0 8
102952: PUSH
102953: DOUBLE
102954: LD_INT 1
102956: DEC
102957: ST_TO_ADDR
102958: LD_VAR 0 9
102962: PUSH
102963: FOR_TO
102964: IFFALSE 103062
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
102966: LD_VAR 0 14
102970: PUSH
102971: LD_VAR 0 8
102975: ARRAY
102976: PPUSH
102977: CALL_OW 247
102981: PUSH
102982: LD_INT 1
102984: EQUAL
102985: PUSH
102986: LD_VAR 0 14
102990: PUSH
102991: LD_VAR 0 8
102995: ARRAY
102996: PPUSH
102997: CALL_OW 256
103001: PUSH
103002: LD_INT 250
103004: LESS
103005: PUSH
103006: LD_VAR 0 20
103010: AND
103011: PUSH
103012: LD_VAR 0 20
103016: NOT
103017: PUSH
103018: LD_VAR 0 14
103022: PUSH
103023: LD_VAR 0 8
103027: ARRAY
103028: PPUSH
103029: CALL_OW 256
103033: PUSH
103034: LD_INT 250
103036: GREATEREQUAL
103037: AND
103038: OR
103039: AND
103040: IFFALSE 103060
// begin x := tmp [ j ] ;
103042: LD_ADDR_VAR 0 10
103046: PUSH
103047: LD_VAR 0 14
103051: PUSH
103052: LD_VAR 0 8
103056: ARRAY
103057: ST_TO_ADDR
// break ;
103058: GO 103062
// end ;
103060: GO 102963
103062: POP
103063: POP
// if x then
103064: LD_VAR 0 10
103068: IFFALSE 103092
// ComAttackUnit ( group [ i ] , x ) else
103070: LD_VAR 0 4
103074: PUSH
103075: LD_VAR 0 7
103079: ARRAY
103080: PPUSH
103081: LD_VAR 0 10
103085: PPUSH
103086: CALL_OW 115
103090: GO 103116
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
103092: LD_VAR 0 4
103096: PUSH
103097: LD_VAR 0 7
103101: ARRAY
103102: PPUSH
103103: LD_VAR 0 14
103107: PUSH
103108: LD_INT 1
103110: ARRAY
103111: PPUSH
103112: CALL_OW 115
// if not HasTask ( group [ i ] ) then
103116: LD_VAR 0 4
103120: PUSH
103121: LD_VAR 0 7
103125: ARRAY
103126: PPUSH
103127: CALL_OW 314
103131: NOT
103132: IFFALSE 103170
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
103134: LD_VAR 0 4
103138: PUSH
103139: LD_VAR 0 7
103143: ARRAY
103144: PPUSH
103145: LD_VAR 0 14
103149: PPUSH
103150: LD_VAR 0 4
103154: PUSH
103155: LD_VAR 0 7
103159: ARRAY
103160: PPUSH
103161: CALL_OW 74
103165: PPUSH
103166: CALL_OW 115
// end ; end ; end ;
103170: GO 99049
103172: POP
103173: POP
// wait ( 0 0$2 ) ;
103174: LD_INT 70
103176: PPUSH
103177: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
103181: LD_VAR 0 4
103185: NOT
103186: PUSH
103187: LD_VAR 0 4
103191: PUSH
103192: EMPTY
103193: EQUAL
103194: OR
103195: PUSH
103196: LD_INT 81
103198: PUSH
103199: LD_VAR 0 35
103203: PUSH
103204: EMPTY
103205: LIST
103206: LIST
103207: PPUSH
103208: CALL_OW 69
103212: NOT
103213: OR
103214: IFFALSE 99034
// end ;
103216: LD_VAR 0 2
103220: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
103221: LD_INT 0
103223: PPUSH
103224: PPUSH
103225: PPUSH
103226: PPUSH
103227: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
103228: LD_VAR 0 1
103232: NOT
103233: PUSH
103234: LD_EXP 45
103238: PUSH
103239: LD_VAR 0 1
103243: ARRAY
103244: NOT
103245: OR
103246: PUSH
103247: LD_VAR 0 2
103251: NOT
103252: OR
103253: PUSH
103254: LD_VAR 0 3
103258: NOT
103259: OR
103260: IFFALSE 103264
// exit ;
103262: GO 103777
// side := mc_sides [ base ] ;
103264: LD_ADDR_VAR 0 6
103268: PUSH
103269: LD_EXP 71
103273: PUSH
103274: LD_VAR 0 1
103278: ARRAY
103279: ST_TO_ADDR
// if not side then
103280: LD_VAR 0 6
103284: NOT
103285: IFFALSE 103289
// exit ;
103287: GO 103777
// for i in solds do
103289: LD_ADDR_VAR 0 7
103293: PUSH
103294: LD_VAR 0 2
103298: PUSH
103299: FOR_IN
103300: IFFALSE 103361
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
103302: LD_VAR 0 7
103306: PPUSH
103307: CALL_OW 310
103311: PPUSH
103312: CALL_OW 266
103316: PUSH
103317: LD_INT 32
103319: PUSH
103320: LD_INT 31
103322: PUSH
103323: EMPTY
103324: LIST
103325: LIST
103326: IN
103327: IFFALSE 103347
// solds := solds diff i else
103329: LD_ADDR_VAR 0 2
103333: PUSH
103334: LD_VAR 0 2
103338: PUSH
103339: LD_VAR 0 7
103343: DIFF
103344: ST_TO_ADDR
103345: GO 103359
// SetTag ( i , 18 ) ;
103347: LD_VAR 0 7
103351: PPUSH
103352: LD_INT 18
103354: PPUSH
103355: CALL_OW 109
103359: GO 103299
103361: POP
103362: POP
// if not solds then
103363: LD_VAR 0 2
103367: NOT
103368: IFFALSE 103372
// exit ;
103370: GO 103777
// repeat wait ( 0 0$1 ) ;
103372: LD_INT 35
103374: PPUSH
103375: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
103379: LD_ADDR_VAR 0 5
103383: PUSH
103384: LD_VAR 0 6
103388: PPUSH
103389: LD_VAR 0 3
103393: PPUSH
103394: CALL 21095 0 2
103398: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
103399: LD_EXP 45
103403: PUSH
103404: LD_VAR 0 1
103408: ARRAY
103409: NOT
103410: PUSH
103411: LD_EXP 45
103415: PUSH
103416: LD_VAR 0 1
103420: ARRAY
103421: PUSH
103422: EMPTY
103423: EQUAL
103424: OR
103425: IFFALSE 103462
// begin for i in solds do
103427: LD_ADDR_VAR 0 7
103431: PUSH
103432: LD_VAR 0 2
103436: PUSH
103437: FOR_IN
103438: IFFALSE 103451
// ComStop ( i ) ;
103440: LD_VAR 0 7
103444: PPUSH
103445: CALL_OW 141
103449: GO 103437
103451: POP
103452: POP
// solds := [ ] ;
103453: LD_ADDR_VAR 0 2
103457: PUSH
103458: EMPTY
103459: ST_TO_ADDR
// exit ;
103460: GO 103777
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
103462: LD_VAR 0 5
103466: NOT
103467: PUSH
103468: LD_VAR 0 5
103472: PUSH
103473: LD_INT 3
103475: GREATER
103476: OR
103477: PUSH
103478: LD_EXP 67
103482: PUSH
103483: LD_VAR 0 1
103487: ARRAY
103488: OR
103489: IFFALSE 103530
// begin for i in solds do
103491: LD_ADDR_VAR 0 7
103495: PUSH
103496: LD_VAR 0 2
103500: PUSH
103501: FOR_IN
103502: IFFALSE 103526
// if HasTask ( i ) then
103504: LD_VAR 0 7
103508: PPUSH
103509: CALL_OW 314
103513: IFFALSE 103524
// ComStop ( i ) ;
103515: LD_VAR 0 7
103519: PPUSH
103520: CALL_OW 141
103524: GO 103501
103526: POP
103527: POP
// break ;
103528: GO 103765
// end ; for i in solds do
103530: LD_ADDR_VAR 0 7
103534: PUSH
103535: LD_VAR 0 2
103539: PUSH
103540: FOR_IN
103541: IFFALSE 103757
// begin if IsInUnit ( i ) then
103543: LD_VAR 0 7
103547: PPUSH
103548: CALL_OW 310
103552: IFFALSE 103563
// ComExitBuilding ( i ) ;
103554: LD_VAR 0 7
103558: PPUSH
103559: CALL_OW 122
// if GetLives ( i ) > 333 then
103563: LD_VAR 0 7
103567: PPUSH
103568: CALL_OW 256
103572: PUSH
103573: LD_INT 333
103575: GREATER
103576: IFFALSE 103604
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
103578: LD_VAR 0 7
103582: PPUSH
103583: LD_VAR 0 5
103587: PPUSH
103588: LD_VAR 0 7
103592: PPUSH
103593: CALL_OW 74
103597: PPUSH
103598: CALL_OW 115
103602: GO 103755
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
103604: LD_ADDR_VAR 0 8
103608: PUSH
103609: LD_EXP 45
103613: PUSH
103614: LD_VAR 0 1
103618: ARRAY
103619: PPUSH
103620: LD_INT 2
103622: PUSH
103623: LD_INT 30
103625: PUSH
103626: LD_INT 0
103628: PUSH
103629: EMPTY
103630: LIST
103631: LIST
103632: PUSH
103633: LD_INT 30
103635: PUSH
103636: LD_INT 1
103638: PUSH
103639: EMPTY
103640: LIST
103641: LIST
103642: PUSH
103643: LD_INT 30
103645: PUSH
103646: LD_INT 6
103648: PUSH
103649: EMPTY
103650: LIST
103651: LIST
103652: PUSH
103653: EMPTY
103654: LIST
103655: LIST
103656: LIST
103657: LIST
103658: PPUSH
103659: CALL_OW 72
103663: PPUSH
103664: LD_VAR 0 7
103668: PPUSH
103669: CALL_OW 74
103673: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
103674: LD_VAR 0 7
103678: PPUSH
103679: LD_VAR 0 8
103683: PPUSH
103684: CALL_OW 250
103688: PPUSH
103689: LD_INT 3
103691: PPUSH
103692: LD_INT 5
103694: PPUSH
103695: CALL_OW 272
103699: PPUSH
103700: LD_VAR 0 8
103704: PPUSH
103705: CALL_OW 251
103709: PPUSH
103710: LD_INT 3
103712: PPUSH
103713: LD_INT 5
103715: PPUSH
103716: CALL_OW 273
103720: PPUSH
103721: CALL_OW 111
// SetTag ( i , 0 ) ;
103725: LD_VAR 0 7
103729: PPUSH
103730: LD_INT 0
103732: PPUSH
103733: CALL_OW 109
// solds := solds diff i ;
103737: LD_ADDR_VAR 0 2
103741: PUSH
103742: LD_VAR 0 2
103746: PUSH
103747: LD_VAR 0 7
103751: DIFF
103752: ST_TO_ADDR
// continue ;
103753: GO 103540
// end ; end ;
103755: GO 103540
103757: POP
103758: POP
// until solds ;
103759: LD_VAR 0 2
103763: IFFALSE 103372
// MC_Reset ( base , 18 ) ;
103765: LD_VAR 0 1
103769: PPUSH
103770: LD_INT 18
103772: PPUSH
103773: CALL 59902 0 2
// end ;
103777: LD_VAR 0 4
103781: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
103782: LD_INT 0
103784: PPUSH
103785: PPUSH
103786: PPUSH
103787: PPUSH
103788: PPUSH
103789: PPUSH
103790: PPUSH
103791: PPUSH
103792: PPUSH
103793: PPUSH
103794: PPUSH
103795: PPUSH
103796: PPUSH
103797: PPUSH
103798: PPUSH
103799: PPUSH
103800: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
103801: LD_ADDR_VAR 0 13
103805: PUSH
103806: LD_EXP 45
103810: PUSH
103811: LD_VAR 0 1
103815: ARRAY
103816: PPUSH
103817: LD_INT 25
103819: PUSH
103820: LD_INT 3
103822: PUSH
103823: EMPTY
103824: LIST
103825: LIST
103826: PPUSH
103827: CALL_OW 72
103831: ST_TO_ADDR
// if mc_remote_driver [ base ] then
103832: LD_EXP 85
103836: PUSH
103837: LD_VAR 0 1
103841: ARRAY
103842: IFFALSE 103866
// mechs := mechs diff mc_remote_driver [ base ] ;
103844: LD_ADDR_VAR 0 13
103848: PUSH
103849: LD_VAR 0 13
103853: PUSH
103854: LD_EXP 85
103858: PUSH
103859: LD_VAR 0 1
103863: ARRAY
103864: DIFF
103865: ST_TO_ADDR
// for i in mechs do
103866: LD_ADDR_VAR 0 5
103870: PUSH
103871: LD_VAR 0 13
103875: PUSH
103876: FOR_IN
103877: IFFALSE 103912
// if GetTag ( i ) > 0 then
103879: LD_VAR 0 5
103883: PPUSH
103884: CALL_OW 110
103888: PUSH
103889: LD_INT 0
103891: GREATER
103892: IFFALSE 103910
// mechs := mechs diff i ;
103894: LD_ADDR_VAR 0 13
103898: PUSH
103899: LD_VAR 0 13
103903: PUSH
103904: LD_VAR 0 5
103908: DIFF
103909: ST_TO_ADDR
103910: GO 103876
103912: POP
103913: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
103914: LD_ADDR_VAR 0 9
103918: PUSH
103919: LD_EXP 45
103923: PUSH
103924: LD_VAR 0 1
103928: ARRAY
103929: PPUSH
103930: LD_INT 2
103932: PUSH
103933: LD_INT 25
103935: PUSH
103936: LD_INT 1
103938: PUSH
103939: EMPTY
103940: LIST
103941: LIST
103942: PUSH
103943: LD_INT 25
103945: PUSH
103946: LD_INT 5
103948: PUSH
103949: EMPTY
103950: LIST
103951: LIST
103952: PUSH
103953: LD_INT 25
103955: PUSH
103956: LD_INT 8
103958: PUSH
103959: EMPTY
103960: LIST
103961: LIST
103962: PUSH
103963: LD_INT 25
103965: PUSH
103966: LD_INT 9
103968: PUSH
103969: EMPTY
103970: LIST
103971: LIST
103972: PUSH
103973: EMPTY
103974: LIST
103975: LIST
103976: LIST
103977: LIST
103978: LIST
103979: PPUSH
103980: CALL_OW 72
103984: ST_TO_ADDR
// if not defenders and not solds then
103985: LD_VAR 0 2
103989: NOT
103990: PUSH
103991: LD_VAR 0 9
103995: NOT
103996: AND
103997: IFFALSE 104001
// exit ;
103999: GO 105627
// depot_under_attack := false ;
104001: LD_ADDR_VAR 0 17
104005: PUSH
104006: LD_INT 0
104008: ST_TO_ADDR
// sold_defenders := [ ] ;
104009: LD_ADDR_VAR 0 18
104013: PUSH
104014: EMPTY
104015: ST_TO_ADDR
// if mechs then
104016: LD_VAR 0 13
104020: IFFALSE 104149
// for i in defenders do
104022: LD_ADDR_VAR 0 5
104026: PUSH
104027: LD_VAR 0 2
104031: PUSH
104032: FOR_IN
104033: IFFALSE 104147
// begin SetTag ( i , 20 ) ;
104035: LD_VAR 0 5
104039: PPUSH
104040: LD_INT 20
104042: PPUSH
104043: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
104047: LD_VAR 0 5
104051: PPUSH
104052: CALL_OW 263
104056: PUSH
104057: LD_INT 1
104059: EQUAL
104060: PUSH
104061: LD_VAR 0 5
104065: PPUSH
104066: CALL_OW 311
104070: NOT
104071: AND
104072: PUSH
104073: LD_VAR 0 13
104077: AND
104078: IFFALSE 104145
// begin un := mechs [ 1 ] ;
104080: LD_ADDR_VAR 0 11
104084: PUSH
104085: LD_VAR 0 13
104089: PUSH
104090: LD_INT 1
104092: ARRAY
104093: ST_TO_ADDR
// ComExitBuilding ( un ) ;
104094: LD_VAR 0 11
104098: PPUSH
104099: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
104103: LD_VAR 0 11
104107: PPUSH
104108: LD_VAR 0 5
104112: PPUSH
104113: CALL_OW 180
// SetTag ( un , 19 ) ;
104117: LD_VAR 0 11
104121: PPUSH
104122: LD_INT 19
104124: PPUSH
104125: CALL_OW 109
// mechs := mechs diff un ;
104129: LD_ADDR_VAR 0 13
104133: PUSH
104134: LD_VAR 0 13
104138: PUSH
104139: LD_VAR 0 11
104143: DIFF
104144: ST_TO_ADDR
// end ; end ;
104145: GO 104032
104147: POP
104148: POP
// if solds then
104149: LD_VAR 0 9
104153: IFFALSE 104212
// for i in solds do
104155: LD_ADDR_VAR 0 5
104159: PUSH
104160: LD_VAR 0 9
104164: PUSH
104165: FOR_IN
104166: IFFALSE 104210
// if not GetTag ( i ) then
104168: LD_VAR 0 5
104172: PPUSH
104173: CALL_OW 110
104177: NOT
104178: IFFALSE 104208
// begin defenders := defenders union i ;
104180: LD_ADDR_VAR 0 2
104184: PUSH
104185: LD_VAR 0 2
104189: PUSH
104190: LD_VAR 0 5
104194: UNION
104195: ST_TO_ADDR
// SetTag ( i , 18 ) ;
104196: LD_VAR 0 5
104200: PPUSH
104201: LD_INT 18
104203: PPUSH
104204: CALL_OW 109
// end ;
104208: GO 104165
104210: POP
104211: POP
// repeat wait ( 0 0$1 ) ;
104212: LD_INT 35
104214: PPUSH
104215: CALL_OW 67
// enemy := mc_scan [ base ] ;
104219: LD_ADDR_VAR 0 3
104223: PUSH
104224: LD_EXP 68
104228: PUSH
104229: LD_VAR 0 1
104233: ARRAY
104234: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
104235: LD_EXP 45
104239: PUSH
104240: LD_VAR 0 1
104244: ARRAY
104245: NOT
104246: PUSH
104247: LD_EXP 45
104251: PUSH
104252: LD_VAR 0 1
104256: ARRAY
104257: PUSH
104258: EMPTY
104259: EQUAL
104260: OR
104261: IFFALSE 104298
// begin for i in defenders do
104263: LD_ADDR_VAR 0 5
104267: PUSH
104268: LD_VAR 0 2
104272: PUSH
104273: FOR_IN
104274: IFFALSE 104287
// ComStop ( i ) ;
104276: LD_VAR 0 5
104280: PPUSH
104281: CALL_OW 141
104285: GO 104273
104287: POP
104288: POP
// defenders := [ ] ;
104289: LD_ADDR_VAR 0 2
104293: PUSH
104294: EMPTY
104295: ST_TO_ADDR
// exit ;
104296: GO 105627
// end ; for i in defenders do
104298: LD_ADDR_VAR 0 5
104302: PUSH
104303: LD_VAR 0 2
104307: PUSH
104308: FOR_IN
104309: IFFALSE 105127
// begin e := NearestUnitToUnit ( enemy , i ) ;
104311: LD_ADDR_VAR 0 14
104315: PUSH
104316: LD_VAR 0 3
104320: PPUSH
104321: LD_VAR 0 5
104325: PPUSH
104326: CALL_OW 74
104330: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
104331: LD_ADDR_VAR 0 8
104335: PUSH
104336: LD_EXP 45
104340: PUSH
104341: LD_VAR 0 1
104345: ARRAY
104346: PPUSH
104347: LD_INT 2
104349: PUSH
104350: LD_INT 30
104352: PUSH
104353: LD_INT 0
104355: PUSH
104356: EMPTY
104357: LIST
104358: LIST
104359: PUSH
104360: LD_INT 30
104362: PUSH
104363: LD_INT 1
104365: PUSH
104366: EMPTY
104367: LIST
104368: LIST
104369: PUSH
104370: EMPTY
104371: LIST
104372: LIST
104373: LIST
104374: PPUSH
104375: CALL_OW 72
104379: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
104380: LD_ADDR_VAR 0 17
104384: PUSH
104385: LD_VAR 0 8
104389: NOT
104390: PUSH
104391: LD_VAR 0 8
104395: PPUSH
104396: LD_INT 3
104398: PUSH
104399: LD_INT 24
104401: PUSH
104402: LD_INT 600
104404: PUSH
104405: EMPTY
104406: LIST
104407: LIST
104408: PUSH
104409: EMPTY
104410: LIST
104411: LIST
104412: PPUSH
104413: CALL_OW 72
104417: OR
104418: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
104419: LD_VAR 0 5
104423: PPUSH
104424: CALL_OW 247
104428: PUSH
104429: LD_INT 2
104431: DOUBLE
104432: EQUAL
104433: IFTRUE 104437
104435: GO 104833
104437: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
104438: LD_VAR 0 5
104442: PPUSH
104443: CALL_OW 256
104447: PUSH
104448: LD_INT 650
104450: GREATER
104451: PUSH
104452: LD_VAR 0 5
104456: PPUSH
104457: LD_VAR 0 14
104461: PPUSH
104462: CALL_OW 296
104466: PUSH
104467: LD_INT 40
104469: LESS
104470: PUSH
104471: LD_VAR 0 14
104475: PPUSH
104476: LD_EXP 70
104480: PUSH
104481: LD_VAR 0 1
104485: ARRAY
104486: PPUSH
104487: CALL_OW 308
104491: OR
104492: AND
104493: IFFALSE 104615
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
104495: LD_VAR 0 5
104499: PPUSH
104500: CALL_OW 262
104504: PUSH
104505: LD_INT 1
104507: EQUAL
104508: PUSH
104509: LD_VAR 0 5
104513: PPUSH
104514: CALL_OW 261
104518: PUSH
104519: LD_INT 30
104521: LESS
104522: AND
104523: PUSH
104524: LD_VAR 0 8
104528: AND
104529: IFFALSE 104599
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
104531: LD_VAR 0 5
104535: PPUSH
104536: LD_VAR 0 8
104540: PPUSH
104541: LD_VAR 0 5
104545: PPUSH
104546: CALL_OW 74
104550: PPUSH
104551: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
104555: LD_VAR 0 5
104559: PPUSH
104560: LD_VAR 0 8
104564: PPUSH
104565: LD_VAR 0 5
104569: PPUSH
104570: CALL_OW 74
104574: PPUSH
104575: CALL_OW 296
104579: PUSH
104580: LD_INT 6
104582: LESS
104583: IFFALSE 104597
// SetFuel ( i , 100 ) ;
104585: LD_VAR 0 5
104589: PPUSH
104590: LD_INT 100
104592: PPUSH
104593: CALL_OW 240
// end else
104597: GO 104613
// ComAttackUnit ( i , e ) ;
104599: LD_VAR 0 5
104603: PPUSH
104604: LD_VAR 0 14
104608: PPUSH
104609: CALL_OW 115
// end else
104613: GO 104716
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
104615: LD_VAR 0 14
104619: PPUSH
104620: LD_EXP 70
104624: PUSH
104625: LD_VAR 0 1
104629: ARRAY
104630: PPUSH
104631: CALL_OW 308
104635: NOT
104636: PUSH
104637: LD_VAR 0 5
104641: PPUSH
104642: LD_VAR 0 14
104646: PPUSH
104647: CALL_OW 296
104651: PUSH
104652: LD_INT 40
104654: GREATEREQUAL
104655: AND
104656: PUSH
104657: LD_VAR 0 5
104661: PPUSH
104662: CALL_OW 256
104666: PUSH
104667: LD_INT 650
104669: LESSEQUAL
104670: OR
104671: PUSH
104672: LD_VAR 0 5
104676: PPUSH
104677: LD_EXP 69
104681: PUSH
104682: LD_VAR 0 1
104686: ARRAY
104687: PPUSH
104688: CALL_OW 308
104692: NOT
104693: AND
104694: IFFALSE 104716
// ComMoveToArea ( i , mc_parking [ base ] ) ;
104696: LD_VAR 0 5
104700: PPUSH
104701: LD_EXP 69
104705: PUSH
104706: LD_VAR 0 1
104710: ARRAY
104711: PPUSH
104712: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
104716: LD_VAR 0 5
104720: PPUSH
104721: CALL_OW 256
104725: PUSH
104726: LD_INT 998
104728: LESS
104729: PUSH
104730: LD_VAR 0 5
104734: PPUSH
104735: CALL_OW 263
104739: PUSH
104740: LD_INT 1
104742: EQUAL
104743: AND
104744: PUSH
104745: LD_VAR 0 5
104749: PPUSH
104750: CALL_OW 311
104754: AND
104755: PUSH
104756: LD_VAR 0 5
104760: PPUSH
104761: LD_EXP 69
104765: PUSH
104766: LD_VAR 0 1
104770: ARRAY
104771: PPUSH
104772: CALL_OW 308
104776: AND
104777: IFFALSE 104831
// begin mech := IsDrivenBy ( i ) ;
104779: LD_ADDR_VAR 0 10
104783: PUSH
104784: LD_VAR 0 5
104788: PPUSH
104789: CALL_OW 311
104793: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
104794: LD_VAR 0 10
104798: PPUSH
104799: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
104803: LD_VAR 0 10
104807: PPUSH
104808: LD_VAR 0 5
104812: PPUSH
104813: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
104817: LD_VAR 0 10
104821: PPUSH
104822: LD_VAR 0 5
104826: PPUSH
104827: CALL_OW 180
// end ; end ; unit_human :
104831: GO 105098
104833: LD_INT 1
104835: DOUBLE
104836: EQUAL
104837: IFTRUE 104841
104839: GO 105097
104841: POP
// begin b := IsInUnit ( i ) ;
104842: LD_ADDR_VAR 0 19
104846: PUSH
104847: LD_VAR 0 5
104851: PPUSH
104852: CALL_OW 310
104856: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
104857: LD_ADDR_VAR 0 20
104861: PUSH
104862: LD_VAR 0 19
104866: NOT
104867: PUSH
104868: LD_VAR 0 19
104872: PPUSH
104873: CALL_OW 266
104877: PUSH
104878: LD_INT 32
104880: PUSH
104881: LD_INT 31
104883: PUSH
104884: EMPTY
104885: LIST
104886: LIST
104887: IN
104888: OR
104889: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
104890: LD_VAR 0 17
104894: PUSH
104895: LD_VAR 0 2
104899: PPUSH
104900: LD_INT 21
104902: PUSH
104903: LD_INT 2
104905: PUSH
104906: EMPTY
104907: LIST
104908: LIST
104909: PPUSH
104910: CALL_OW 72
104914: PUSH
104915: LD_INT 1
104917: LESSEQUAL
104918: OR
104919: PUSH
104920: LD_VAR 0 20
104924: AND
104925: PUSH
104926: LD_VAR 0 5
104930: PUSH
104931: LD_VAR 0 18
104935: IN
104936: NOT
104937: AND
104938: IFFALSE 105031
// begin if b then
104940: LD_VAR 0 19
104944: IFFALSE 104993
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
104946: LD_VAR 0 19
104950: PPUSH
104951: LD_VAR 0 3
104955: PPUSH
104956: LD_VAR 0 19
104960: PPUSH
104961: CALL_OW 74
104965: PPUSH
104966: CALL_OW 296
104970: PUSH
104971: LD_INT 10
104973: LESS
104974: PUSH
104975: LD_VAR 0 19
104979: PPUSH
104980: CALL_OW 461
104984: PUSH
104985: LD_INT 7
104987: NONEQUAL
104988: AND
104989: IFFALSE 104993
// continue ;
104991: GO 104308
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
104993: LD_ADDR_VAR 0 18
104997: PUSH
104998: LD_VAR 0 18
105002: PPUSH
105003: LD_VAR 0 18
105007: PUSH
105008: LD_INT 1
105010: PLUS
105011: PPUSH
105012: LD_VAR 0 5
105016: PPUSH
105017: CALL_OW 1
105021: ST_TO_ADDR
// ComExitBuilding ( i ) ;
105022: LD_VAR 0 5
105026: PPUSH
105027: CALL_OW 122
// end ; if sold_defenders then
105031: LD_VAR 0 18
105035: IFFALSE 105095
// if i in sold_defenders then
105037: LD_VAR 0 5
105041: PUSH
105042: LD_VAR 0 18
105046: IN
105047: IFFALSE 105095
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
105049: LD_VAR 0 5
105053: PPUSH
105054: CALL_OW 314
105058: NOT
105059: PUSH
105060: LD_VAR 0 5
105064: PPUSH
105065: LD_VAR 0 14
105069: PPUSH
105070: CALL_OW 296
105074: PUSH
105075: LD_INT 30
105077: LESS
105078: AND
105079: IFFALSE 105095
// ComAttackUnit ( i , e ) ;
105081: LD_VAR 0 5
105085: PPUSH
105086: LD_VAR 0 14
105090: PPUSH
105091: CALL_OW 115
// end ; end ; end ;
105095: GO 105098
105097: POP
// if IsDead ( i ) then
105098: LD_VAR 0 5
105102: PPUSH
105103: CALL_OW 301
105107: IFFALSE 105125
// defenders := defenders diff i ;
105109: LD_ADDR_VAR 0 2
105113: PUSH
105114: LD_VAR 0 2
105118: PUSH
105119: LD_VAR 0 5
105123: DIFF
105124: ST_TO_ADDR
// end ;
105125: GO 104308
105127: POP
105128: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
105129: LD_VAR 0 3
105133: NOT
105134: PUSH
105135: LD_VAR 0 2
105139: NOT
105140: OR
105141: PUSH
105142: LD_EXP 45
105146: PUSH
105147: LD_VAR 0 1
105151: ARRAY
105152: NOT
105153: OR
105154: IFFALSE 104212
// MC_Reset ( base , 18 ) ;
105156: LD_VAR 0 1
105160: PPUSH
105161: LD_INT 18
105163: PPUSH
105164: CALL 59902 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
105168: LD_ADDR_VAR 0 2
105172: PUSH
105173: LD_VAR 0 2
105177: PUSH
105178: LD_VAR 0 2
105182: PPUSH
105183: LD_INT 2
105185: PUSH
105186: LD_INT 25
105188: PUSH
105189: LD_INT 1
105191: PUSH
105192: EMPTY
105193: LIST
105194: LIST
105195: PUSH
105196: LD_INT 25
105198: PUSH
105199: LD_INT 5
105201: PUSH
105202: EMPTY
105203: LIST
105204: LIST
105205: PUSH
105206: LD_INT 25
105208: PUSH
105209: LD_INT 8
105211: PUSH
105212: EMPTY
105213: LIST
105214: LIST
105215: PUSH
105216: LD_INT 25
105218: PUSH
105219: LD_INT 9
105221: PUSH
105222: EMPTY
105223: LIST
105224: LIST
105225: PUSH
105226: EMPTY
105227: LIST
105228: LIST
105229: LIST
105230: LIST
105231: LIST
105232: PPUSH
105233: CALL_OW 72
105237: DIFF
105238: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
105239: LD_VAR 0 3
105243: NOT
105244: PUSH
105245: LD_VAR 0 2
105249: PPUSH
105250: LD_INT 21
105252: PUSH
105253: LD_INT 2
105255: PUSH
105256: EMPTY
105257: LIST
105258: LIST
105259: PPUSH
105260: CALL_OW 72
105264: AND
105265: IFFALSE 105603
// begin tmp := FilterByTag ( defenders , 19 ) ;
105267: LD_ADDR_VAR 0 12
105271: PUSH
105272: LD_VAR 0 2
105276: PPUSH
105277: LD_INT 19
105279: PPUSH
105280: CALL 52855 0 2
105284: ST_TO_ADDR
// if tmp then
105285: LD_VAR 0 12
105289: IFFALSE 105359
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
105291: LD_ADDR_VAR 0 12
105295: PUSH
105296: LD_VAR 0 12
105300: PPUSH
105301: LD_INT 25
105303: PUSH
105304: LD_INT 3
105306: PUSH
105307: EMPTY
105308: LIST
105309: LIST
105310: PPUSH
105311: CALL_OW 72
105315: ST_TO_ADDR
// if tmp then
105316: LD_VAR 0 12
105320: IFFALSE 105359
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
105322: LD_ADDR_EXP 57
105326: PUSH
105327: LD_EXP 57
105331: PPUSH
105332: LD_VAR 0 1
105336: PPUSH
105337: LD_EXP 57
105341: PUSH
105342: LD_VAR 0 1
105346: ARRAY
105347: PUSH
105348: LD_VAR 0 12
105352: UNION
105353: PPUSH
105354: CALL_OW 1
105358: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
105359: LD_VAR 0 1
105363: PPUSH
105364: LD_INT 19
105366: PPUSH
105367: CALL 59902 0 2
// repeat wait ( 0 0$1 ) ;
105371: LD_INT 35
105373: PPUSH
105374: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
105378: LD_EXP 45
105382: PUSH
105383: LD_VAR 0 1
105387: ARRAY
105388: NOT
105389: PUSH
105390: LD_EXP 45
105394: PUSH
105395: LD_VAR 0 1
105399: ARRAY
105400: PUSH
105401: EMPTY
105402: EQUAL
105403: OR
105404: IFFALSE 105441
// begin for i in defenders do
105406: LD_ADDR_VAR 0 5
105410: PUSH
105411: LD_VAR 0 2
105415: PUSH
105416: FOR_IN
105417: IFFALSE 105430
// ComStop ( i ) ;
105419: LD_VAR 0 5
105423: PPUSH
105424: CALL_OW 141
105428: GO 105416
105430: POP
105431: POP
// defenders := [ ] ;
105432: LD_ADDR_VAR 0 2
105436: PUSH
105437: EMPTY
105438: ST_TO_ADDR
// exit ;
105439: GO 105627
// end ; for i in defenders do
105441: LD_ADDR_VAR 0 5
105445: PUSH
105446: LD_VAR 0 2
105450: PUSH
105451: FOR_IN
105452: IFFALSE 105541
// begin if not IsInArea ( i , mc_parking [ base ] ) then
105454: LD_VAR 0 5
105458: PPUSH
105459: LD_EXP 69
105463: PUSH
105464: LD_VAR 0 1
105468: ARRAY
105469: PPUSH
105470: CALL_OW 308
105474: NOT
105475: IFFALSE 105499
// ComMoveToArea ( i , mc_parking [ base ] ) else
105477: LD_VAR 0 5
105481: PPUSH
105482: LD_EXP 69
105486: PUSH
105487: LD_VAR 0 1
105491: ARRAY
105492: PPUSH
105493: CALL_OW 113
105497: GO 105539
// if GetControl ( i ) = control_manual then
105499: LD_VAR 0 5
105503: PPUSH
105504: CALL_OW 263
105508: PUSH
105509: LD_INT 1
105511: EQUAL
105512: IFFALSE 105539
// if IsDrivenBy ( i ) then
105514: LD_VAR 0 5
105518: PPUSH
105519: CALL_OW 311
105523: IFFALSE 105539
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
105525: LD_VAR 0 5
105529: PPUSH
105530: CALL_OW 311
105534: PPUSH
105535: CALL_OW 121
// end ;
105539: GO 105451
105541: POP
105542: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
105543: LD_VAR 0 2
105547: PPUSH
105548: LD_INT 95
105550: PUSH
105551: LD_EXP 69
105555: PUSH
105556: LD_VAR 0 1
105560: ARRAY
105561: PUSH
105562: EMPTY
105563: LIST
105564: LIST
105565: PPUSH
105566: CALL_OW 72
105570: PUSH
105571: LD_VAR 0 2
105575: EQUAL
105576: PUSH
105577: LD_EXP 68
105581: PUSH
105582: LD_VAR 0 1
105586: ARRAY
105587: OR
105588: PUSH
105589: LD_EXP 45
105593: PUSH
105594: LD_VAR 0 1
105598: ARRAY
105599: NOT
105600: OR
105601: IFFALSE 105371
// end ; MC_Reset ( base , 19 ) ;
105603: LD_VAR 0 1
105607: PPUSH
105608: LD_INT 19
105610: PPUSH
105611: CALL 59902 0 2
// MC_Reset ( base , 20 ) ;
105615: LD_VAR 0 1
105619: PPUSH
105620: LD_INT 20
105622: PPUSH
105623: CALL 59902 0 2
// end ;
105627: LD_VAR 0 4
105631: RET
