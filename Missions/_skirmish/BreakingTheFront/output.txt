// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitSettings ;
  11: CALL 51 0 0
// if debug then
  15: LD_EXP 1
  19: IFFALSE 38
// begin PlaceSeeing ( 1 , 1 , 1 , - 372963 ) ;
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 372963
  32: NEG
  33: PPUSH
  34: CALL_OW 330
// end ; SetTechnologies ;
  38: CALL 602 0 0
// SetDiplomacy ;
  42: CALL 814 0 0
// PrepareGame ;
  46: CALL 896 0 0
// end ;
  50: END
// export debug , GameType , game , disableGlobalTimer ; export mc_amer , mc_leg , mc_rus_1 , mc_rus_2 ; export playerCommander , playerForces , allyCommander , Powell , Farmer , ruOutpost , ruEscape , staticMines , baseCaptured , legDestCounter , cratesSpawns , legOfferAccepted , legChangeSide , allyDestCounter , sibBombAllowed , reinforceAllowed , commander , cratesSpawn , outpostEscape , dialogueMineDetected ; end_of_file export function InitSettings ; begin
  51: LD_INT 0
  53: PPUSH
// debug := 0 ;
  54: LD_ADDR_EXP 1
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// GameType := 1 ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 1
  69: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  70: LD_ADDR_OWVAR 67
  74: PUSH
  75: LD_INT 0
  77: PPUSH
  78: CALL_OW 426
  82: ST_TO_ADDR
// sibBombAllowed := GetMultiPlayerSetting ( 1 ) - 1 ;
  83: LD_ADDR_EXP 23
  87: PUSH
  88: LD_INT 1
  90: PPUSH
  91: CALL_OW 426
  95: PUSH
  96: LD_INT 1
  98: MINUS
  99: ST_TO_ADDR
// reinforceAllowed := GetMultiPlayerSetting ( 2 ) - 1 ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: LD_INT 2
 107: PPUSH
 108: CALL_OW 426
 112: PUSH
 113: LD_INT 1
 115: MINUS
 116: ST_TO_ADDR
// cratesSpawn := GetMultiPlayerSetting ( 3 ) ;
 117: LD_ADDR_EXP 26
 121: PUSH
 122: LD_INT 3
 124: PPUSH
 125: CALL_OW 426
 129: ST_TO_ADDR
// commander := GetMultiPlayerSetting ( 4 ) ;
 130: LD_ADDR_EXP 25
 134: PUSH
 135: LD_INT 4
 137: PPUSH
 138: CALL_OW 426
 142: ST_TO_ADDR
// if not commander then
 143: LD_EXP 25
 147: NOT
 148: IFFALSE 158
// commander := 3 ;
 150: LD_ADDR_EXP 25
 154: PUSH
 155: LD_INT 3
 157: ST_TO_ADDR
// if not debug then
 158: LD_EXP 1
 162: NOT
 163: IFFALSE 167
// exit ;
 165: GO 224
// display_strings := [ Difficulty:  & Difficulty , sibBomb:  & sibBombAllowed , reinforceAllowed:  & reinforceAllowed , cratesSpawn:  & cratesSpawn , commander:  & commander ] ;
 167: LD_ADDR_OWVAR 47
 171: PUSH
 172: LD_STRING Difficulty: 
 174: PUSH
 175: LD_OWVAR 67
 179: STR
 180: PUSH
 181: LD_STRING sibBomb: 
 183: PUSH
 184: LD_EXP 23
 188: STR
 189: PUSH
 190: LD_STRING reinforceAllowed: 
 192: PUSH
 193: LD_EXP 24
 197: STR
 198: PUSH
 199: LD_STRING cratesSpawn: 
 201: PUSH
 202: LD_EXP 26
 206: STR
 207: PUSH
 208: LD_STRING commander: 
 210: PUSH
 211: LD_EXP 25
 215: STR
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// every 0 0$1 trigger game and GameType = 1 and not disableGlobalTimer do
 229: LD_EXP 3
 233: PUSH
 234: LD_EXP 2
 238: PUSH
 239: LD_INT 1
 241: EQUAL
 242: AND
 243: PUSH
 244: LD_EXP 4
 248: NOT
 249: AND
 250: IFFALSE 273
 252: GO 254
 254: DISABLE
// begin enable ;
 255: ENABLE
// display_strings := [ #SkrTime , tick ] ;
 256: LD_ADDR_OWVAR 47
 260: PUSH
 261: LD_STRING #SkrTime
 263: PUSH
 264: LD_OWVAR 1
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// end ;
 273: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 274: LD_EXP 19
 278: PUSH
 279: LD_EXP 3
 283: AND
 284: PUSH
 285: LD_EXP 2
 289: PUSH
 290: LD_INT 1
 292: EQUAL
 293: AND
 294: IFFALSE 355
 296: GO 298
 298: DISABLE
// Crates ( cratesSpawns [ 1 ] [ 1 ] , cratesSpawns [ 1 ] [ 2 ] , cratesSpawns [ 1 ] [ 3 ] , cratesSpawns [ 1 ] [ 4 ] ) ;
 299: LD_EXP 19
 303: PUSH
 304: LD_INT 1
 306: ARRAY
 307: PUSH
 308: LD_INT 1
 310: ARRAY
 311: PPUSH
 312: LD_EXP 19
 316: PUSH
 317: LD_INT 1
 319: ARRAY
 320: PUSH
 321: LD_INT 2
 323: ARRAY
 324: PPUSH
 325: LD_EXP 19
 329: PUSH
 330: LD_INT 1
 332: ARRAY
 333: PUSH
 334: LD_INT 3
 336: ARRAY
 337: PPUSH
 338: LD_EXP 19
 342: PUSH
 343: LD_INT 1
 345: ARRAY
 346: PUSH
 347: LD_INT 4
 349: ARRAY
 350: PPUSH
 351: CALL 61606 0 4
 355: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 356: LD_EXP 19
 360: PUSH
 361: LD_EXP 3
 365: AND
 366: PUSH
 367: LD_EXP 2
 371: PUSH
 372: LD_INT 1
 374: EQUAL
 375: AND
 376: IFFALSE 437
 378: GO 380
 380: DISABLE
// Crates ( cratesSpawns [ 2 ] [ 1 ] , cratesSpawns [ 2 ] [ 2 ] , cratesSpawns [ 2 ] [ 3 ] , cratesSpawns [ 2 ] [ 4 ] ) ;
 381: LD_EXP 19
 385: PUSH
 386: LD_INT 2
 388: ARRAY
 389: PUSH
 390: LD_INT 1
 392: ARRAY
 393: PPUSH
 394: LD_EXP 19
 398: PUSH
 399: LD_INT 2
 401: ARRAY
 402: PUSH
 403: LD_INT 2
 405: ARRAY
 406: PPUSH
 407: LD_EXP 19
 411: PUSH
 412: LD_INT 2
 414: ARRAY
 415: PUSH
 416: LD_INT 3
 418: ARRAY
 419: PPUSH
 420: LD_EXP 19
 424: PUSH
 425: LD_INT 2
 427: ARRAY
 428: PUSH
 429: LD_INT 4
 431: ARRAY
 432: PPUSH
 433: CALL 61606 0 4
 437: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 438: LD_EXP 19
 442: PUSH
 443: LD_EXP 3
 447: AND
 448: PUSH
 449: LD_EXP 2
 453: PUSH
 454: LD_INT 1
 456: EQUAL
 457: AND
 458: IFFALSE 519
 460: GO 462
 462: DISABLE
// Crates ( cratesSpawns [ 3 ] [ 1 ] , cratesSpawns [ 3 ] [ 2 ] , cratesSpawns [ 3 ] [ 3 ] , cratesSpawns [ 3 ] [ 4 ] ) ;
 463: LD_EXP 19
 467: PUSH
 468: LD_INT 3
 470: ARRAY
 471: PUSH
 472: LD_INT 1
 474: ARRAY
 475: PPUSH
 476: LD_EXP 19
 480: PUSH
 481: LD_INT 3
 483: ARRAY
 484: PUSH
 485: LD_INT 2
 487: ARRAY
 488: PPUSH
 489: LD_EXP 19
 493: PUSH
 494: LD_INT 3
 496: ARRAY
 497: PUSH
 498: LD_INT 3
 500: ARRAY
 501: PPUSH
 502: LD_EXP 19
 506: PUSH
 507: LD_INT 3
 509: ARRAY
 510: PUSH
 511: LD_INT 4
 513: ARRAY
 514: PPUSH
 515: CALL 61606 0 4
 519: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 520: LD_EXP 19
 524: PUSH
 525: LD_EXP 3
 529: AND
 530: PUSH
 531: LD_EXP 2
 535: PUSH
 536: LD_INT 1
 538: EQUAL
 539: AND
 540: IFFALSE 601
 542: GO 544
 544: DISABLE
// Crates ( cratesSpawns [ 4 ] [ 1 ] , cratesSpawns [ 4 ] [ 2 ] , cratesSpawns [ 4 ] [ 3 ] , cratesSpawns [ 4 ] [ 4 ] ) ;
 545: LD_EXP 19
 549: PUSH
 550: LD_INT 4
 552: ARRAY
 553: PUSH
 554: LD_INT 1
 556: ARRAY
 557: PPUSH
 558: LD_EXP 19
 562: PUSH
 563: LD_INT 4
 565: ARRAY
 566: PUSH
 567: LD_INT 2
 569: ARRAY
 570: PPUSH
 571: LD_EXP 19
 575: PUSH
 576: LD_INT 4
 578: ARRAY
 579: PUSH
 580: LD_INT 3
 582: ARRAY
 583: PPUSH
 584: LD_EXP 19
 588: PUSH
 589: LD_INT 4
 591: ARRAY
 592: PUSH
 593: LD_INT 4
 595: ARRAY
 596: PPUSH
 597: CALL 61606 0 4
 601: END
// export function SetTechnologies ; var i , j , ban_techs , res_techs ; begin
 602: LD_INT 0
 604: PPUSH
 605: PPUSH
 606: PPUSH
 607: PPUSH
 608: PPUSH
// if GameType = 1 then
 609: LD_EXP 2
 613: PUSH
 614: LD_INT 1
 616: EQUAL
 617: IFFALSE 686
// begin ban_techs := [ ] ;
 619: LD_ADDR_VAR 0 4
 623: PUSH
 624: EMPTY
 625: ST_TO_ADDR
// if sibBombAllowed < 2 then
 626: LD_EXP 23
 630: PUSH
 631: LD_INT 2
 633: LESS
 634: IFFALSE 647
// ban_techs := [ tech_sibFiss ] ;
 636: LD_ADDR_VAR 0 4
 640: PUSH
 641: LD_INT 25
 643: PUSH
 644: EMPTY
 645: LIST
 646: ST_TO_ADDR
// res_techs := [ tech_oilPow , tech_oilEng , tech_tech1 , tech_tech2 , tech_tech3 , tech_gun , tech_gatling , tech_rocket ] ;
 647: LD_ADDR_VAR 0 5
 651: PUSH
 652: LD_INT 46
 654: PUSH
 655: LD_INT 47
 657: PUSH
 658: LD_INT 48
 660: PUSH
 661: LD_INT 49
 663: PUSH
 664: LD_INT 50
 666: PUSH
 667: LD_INT 39
 669: PUSH
 670: LD_INT 69
 672: PUSH
 673: LD_INT 40
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: ST_TO_ADDR
// end ; for i = 1 to 8 do
 686: LD_ADDR_VAR 0 2
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 8
 698: PUSH
 699: FOR_TO
 700: IFFALSE 784
// begin if res_techs then
 702: LD_VAR 0 5
 706: IFFALSE 742
// for j in res_techs do
 708: LD_ADDR_VAR 0 3
 712: PUSH
 713: LD_VAR 0 5
 717: PUSH
 718: FOR_IN
 719: IFFALSE 740
// SetTech ( j , i , state_researched ) ;
 721: LD_VAR 0 3
 725: PPUSH
 726: LD_VAR 0 2
 730: PPUSH
 731: LD_INT 2
 733: PPUSH
 734: CALL_OW 322
 738: GO 718
 740: POP
 741: POP
// if ban_techs then
 742: LD_VAR 0 4
 746: IFFALSE 782
// for j in ban_techs do
 748: LD_ADDR_VAR 0 3
 752: PUSH
 753: LD_VAR 0 4
 757: PUSH
 758: FOR_IN
 759: IFFALSE 780
// SetTech ( j , i , state_disabled ) ;
 761: LD_VAR 0 3
 765: PPUSH
 766: LD_VAR 0 2
 770: PPUSH
 771: LD_INT 0
 773: PPUSH
 774: CALL_OW 322
 778: GO 758
 780: POP
 781: POP
// end ;
 782: GO 699
 784: POP
 785: POP
// if sibBombAllowed = 1 then
 786: LD_EXP 23
 790: PUSH
 791: LD_INT 1
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_sibFiss , 3 , state_enabled ) ;
 796: LD_INT 25
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 1
 804: PPUSH
 805: CALL_OW 322
// end ;
 809: LD_VAR 0 1
 813: RET
// export function SetDiplomacy ; begin
 814: LD_INT 0
 816: PPUSH
// if GameType = 1 then
 817: LD_EXP 2
 821: PUSH
 822: LD_INT 1
 824: EQUAL
 825: IFFALSE 891
// begin SetAttitude ( 1 , 4 , att_friend , true ) ;
 827: LD_INT 1
 829: PPUSH
 830: LD_INT 4
 832: PPUSH
 833: LD_INT 1
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 843: LD_INT 3
 845: PPUSH
 846: LD_INT 6
 848: PPUSH
 849: LD_INT 1
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL_OW 80
// SetAttitude ( 3 , 8 , att_friend , true ) ;
 859: LD_INT 3
 861: PPUSH
 862: LD_INT 8
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: CALL_OW 80
// SetAttitude ( 6 , 8 , att_friend , true ) ;
 875: LD_INT 6
 877: PPUSH
 878: LD_INT 8
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 80
// end ; end ;
 891: LD_VAR 0 1
 895: RET
// export function PrepareGame ; var i , tmp , sources ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
// if GameType = 1 then
 902: LD_EXP 2
 906: PUSH
 907: LD_INT 1
 909: EQUAL
 910: IFFALSE 1402
// begin game := false ;
 912: LD_ADDR_EXP 3
 916: PUSH
 917: LD_INT 0
 919: ST_TO_ADDR
// your_side := 1 ;
 920: LD_ADDR_OWVAR 2
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// mc_amer := 1 ;
 928: LD_ADDR_EXP 5
 932: PUSH
 933: LD_INT 1
 935: ST_TO_ADDR
// mc_leg := 2 ;
 936: LD_ADDR_EXP 6
 940: PUSH
 941: LD_INT 2
 943: ST_TO_ADDR
// mc_rus_1 := 3 ;
 944: LD_ADDR_EXP 7
 948: PUSH
 949: LD_INT 3
 951: ST_TO_ADDR
// mc_rus_2 := 4 ;
 952: LD_ADDR_EXP 8
 956: PUSH
 957: LD_INT 4
 959: ST_TO_ADDR
// cratesSpawns := [ [ amerCrates , 1 , 0 , [ 200 , 250 , 300 ] [ cratesSpawn ] ] , [ rusCrates , 8 , 50 , 500 ] , [ legCrates , 5 , 50 , 300 ] , [ playerCrates , [ 4 , 5 , 6 ] [ cratesSpawn ] , 30 , [ 300 , 450 , 500 ] [ cratesSpawn ] ] ] ;
 960: LD_ADDR_EXP 19
 964: PUSH
 965: LD_INT 5
 967: PUSH
 968: LD_INT 1
 970: PUSH
 971: LD_INT 0
 973: PUSH
 974: LD_INT 200
 976: PUSH
 977: LD_INT 250
 979: PUSH
 980: LD_INT 300
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: LIST
 987: PUSH
 988: LD_EXP 26
 992: ARRAY
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 13
1002: PUSH
1003: LD_INT 8
1005: PUSH
1006: LD_INT 50
1008: PUSH
1009: LD_INT 500
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 17
1020: PUSH
1021: LD_INT 5
1023: PUSH
1024: LD_INT 50
1026: PUSH
1027: LD_INT 300
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: LD_INT 18
1038: PUSH
1039: LD_INT 4
1041: PUSH
1042: LD_INT 5
1044: PUSH
1045: LD_INT 6
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_EXP 26
1057: ARRAY
1058: PUSH
1059: LD_INT 30
1061: PUSH
1062: LD_INT 300
1064: PUSH
1065: LD_INT 450
1067: PUSH
1068: LD_INT 500
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_EXP 26
1080: ARRAY
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: ST_TO_ADDR
// sources := [ [ 190 , 193 , mat_siberit ] , [ 182 , 117 , mat_siberit ] , [ 43 , 2 , mat_siberit ] , [ 114 , 152 , mat_oil ] , [ 85 , 38 , mat_oil ] ] ;
1094: LD_ADDR_VAR 0 4
1098: PUSH
1099: LD_INT 190
1101: PUSH
1102: LD_INT 193
1104: PUSH
1105: LD_INT 3
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_INT 182
1115: PUSH
1116: LD_INT 117
1118: PUSH
1119: LD_INT 3
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_INT 43
1129: PUSH
1130: LD_INT 2
1132: PUSH
1133: LD_INT 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_INT 114
1143: PUSH
1144: LD_INT 152
1146: PUSH
1147: LD_INT 2
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: PUSH
1155: LD_INT 85
1157: PUSH
1158: LD_INT 38
1160: PUSH
1161: LD_INT 2
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: ST_TO_ADDR
// for i in sources do
1176: LD_ADDR_VAR 0 2
1180: PUSH
1181: LD_VAR 0 4
1185: PUSH
1186: FOR_IN
1187: IFFALSE 1222
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
1189: LD_VAR 0 2
1193: PUSH
1194: LD_INT 1
1196: ARRAY
1197: PPUSH
1198: LD_VAR 0 2
1202: PUSH
1203: LD_INT 2
1205: ARRAY
1206: PPUSH
1207: LD_VAR 0 2
1211: PUSH
1212: LD_INT 3
1214: ARRAY
1215: PPUSH
1216: CALL_OW 62
1220: GO 1186
1222: POP
1223: POP
// disableGlobalTimer := false ;
1224: LD_ADDR_EXP 4
1228: PUSH
1229: LD_INT 0
1231: ST_TO_ADDR
// ruEscape := [ 0 , [ 5 , 6 , 7 ] [ Difficulty ] ] ;
1232: LD_ADDR_EXP 15
1236: PUSH
1237: LD_INT 0
1239: PUSH
1240: LD_INT 5
1242: PUSH
1243: LD_INT 6
1245: PUSH
1246: LD_INT 7
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: PUSH
1254: LD_OWVAR 67
1258: ARRAY
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: ST_TO_ADDR
// ruOutpost := [ ] ;
1264: LD_ADDR_EXP 14
1268: PUSH
1269: EMPTY
1270: ST_TO_ADDR
// staticMines := [ ] ;
1271: LD_ADDR_EXP 16
1275: PUSH
1276: EMPTY
1277: ST_TO_ADDR
// baseCaptured := false ;
1278: LD_ADDR_EXP 17
1282: PUSH
1283: LD_INT 0
1285: ST_TO_ADDR
// legDestCounter := 0 ;
1286: LD_ADDR_EXP 18
1290: PUSH
1291: LD_INT 0
1293: ST_TO_ADDR
// legOfferAccepted := false ;
1294: LD_ADDR_EXP 20
1298: PUSH
1299: LD_INT 0
1301: ST_TO_ADDR
// legChangeSide := false ;
1302: LD_ADDR_EXP 21
1306: PUSH
1307: LD_INT 0
1309: ST_TO_ADDR
// allyDestCounter := 0 ;
1310: LD_ADDR_EXP 22
1314: PUSH
1315: LD_INT 0
1317: ST_TO_ADDR
// outpostEscape := false ;
1318: LD_ADDR_EXP 27
1322: PUSH
1323: LD_INT 0
1325: ST_TO_ADDR
// dialogueMineDetected := false ;
1326: LD_ADDR_EXP 28
1330: PUSH
1331: LD_INT 0
1333: ST_TO_ADDR
// PrepareAmericans ;
1334: CALL 7250 0 0
// PrepareLegion ;
1338: CALL 5515 0 0
// PrepareRussians ;
1342: CALL 2481 0 0
// playerForces := PreparePlayer ;
1346: LD_ADDR_EXP 10
1350: PUSH
1351: CALL 8493 0 0
1355: ST_TO_ADDR
// AnimateTrees ( true ) ;
1356: LD_INT 1
1358: PPUSH
1359: CALL_OW 573
// PrepareNature ( 4 , 3 , 8 , 5 , 3 , 1 , 8 , natureGroundArea , natureWaterArea ) ;
1363: LD_INT 4
1365: PPUSH
1366: LD_INT 3
1368: PPUSH
1369: LD_INT 8
1371: PPUSH
1372: LD_INT 5
1374: PPUSH
1375: LD_INT 3
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 8
1383: PPUSH
1384: LD_INT 2
1386: PPUSH
1387: LD_INT 1
1389: PPUSH
1390: CALL 54321 0 9
// MC_Start ;
1394: CALL 64743 0 0
// Action ;
1398: CALL 10689 0 0
// end ; end ;
1402: LD_VAR 0 1
1406: RET
// export function CustomInitMacro ; begin
1407: LD_INT 0
1409: PPUSH
// if GameType <> 1 then
1410: LD_EXP 2
1414: PUSH
1415: LD_INT 1
1417: NONEQUAL
1418: IFFALSE 1422
// exit ;
1420: GO 2476
// MC_SetScanArea ( mc_amer , amerBase ) ;
1422: LD_EXP 5
1426: PPUSH
1427: LD_INT 3
1429: PPUSH
1430: CALL 87599 0 2
// MC_SetParkingArea ( mc_amer , amerParking ) ;
1434: LD_EXP 5
1438: PPUSH
1439: LD_INT 4
1441: PPUSH
1442: CALL 87543 0 2
// MC_SetAllowedTurretWeapons ( mc_amer , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1446: LD_EXP 5
1450: PPUSH
1451: LD_INT 11
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 7
1459: PUSH
1460: LD_INT 9
1462: PUSH
1463: LD_INT 10
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: PPUSH
1473: CALL 87431 0 2
// MC_SetCratesArea ( mc_amer , amerCrates ) ;
1477: LD_EXP 5
1481: PPUSH
1482: LD_INT 5
1484: PPUSH
1485: CALL 87113 0 2
// MC_SetTame ( mc_amer , amerBase ) ;
1489: LD_EXP 5
1493: PPUSH
1494: LD_INT 3
1496: PPUSH
1497: CALL 86844 0 2
// MC_SetDefenderLimit ( mc_amer , 4 ) ;
1501: LD_EXP 5
1505: PPUSH
1506: LD_INT 4
1508: PPUSH
1509: CALL 86463 0 2
// MC_SetProduceList ( mc_amer , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_solar , control_remote , us_laser ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , ] ) ;
1513: LD_EXP 5
1517: PPUSH
1518: LD_INT 3
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: LD_INT 2
1526: PUSH
1527: LD_INT 5
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: PUSH
1536: LD_INT 3
1538: PUSH
1539: LD_INT 2
1541: PUSH
1542: LD_INT 2
1544: PUSH
1545: LD_INT 9
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: PUSH
1554: LD_INT 4
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: LD_INT 2
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 4
1574: PUSH
1575: LD_INT 1
1577: PUSH
1578: LD_INT 2
1580: PUSH
1581: LD_INT 6
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: PPUSH
1596: CALL 86278 0 2
// MC_SetBuildingList ( mc_amer , [ [ b_turret , 114 , 16 , 0 ] , [ b_bunker , 110 , 12 , 0 ] ] ) ;
1600: LD_EXP 5
1604: PPUSH
1605: LD_INT 33
1607: PUSH
1608: LD_INT 114
1610: PUSH
1611: LD_INT 16
1613: PUSH
1614: LD_INT 0
1616: PUSH
1617: EMPTY
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: PUSH
1623: LD_INT 32
1625: PUSH
1626: LD_INT 110
1628: PUSH
1629: LD_INT 12
1631: PUSH
1632: LD_INT 0
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PPUSH
1645: CALL 86170 0 2
// MC_SetLabKind ( mc_amer , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1649: LD_EXP 5
1653: PPUSH
1654: LD_INT 10
1656: PUSH
1657: LD_INT 15
1659: PUSH
1660: LD_INT 12
1662: PUSH
1663: LD_INT 11
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: PPUSH
1672: CALL 87020 0 2
// MC_SetScanArea ( mc_leg , legBase ) ;
1676: LD_EXP 6
1680: PPUSH
1681: LD_INT 6
1683: PPUSH
1684: CALL 87599 0 2
// MC_SetParkingArea ( mc_leg , legParking ) ;
1688: LD_EXP 6
1692: PPUSH
1693: LD_INT 7
1695: PPUSH
1696: CALL 87543 0 2
// MC_SetAllowedTurretWeapons ( mc_leg , [ ar_radar , ar_gun , ar_rocket_launcher , ar_gatling_gun ] ) ;
1700: LD_EXP 6
1704: PPUSH
1705: LD_INT 30
1707: PUSH
1708: LD_INT 27
1710: PUSH
1711: LD_INT 28
1713: PUSH
1714: LD_INT 25
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: PPUSH
1723: CALL 87431 0 2
// MC_SetCratesArea ( mc_leg , legCrates ) ;
1727: LD_EXP 6
1731: PPUSH
1732: LD_INT 17
1734: PPUSH
1735: CALL 87113 0 2
// MC_SetTame ( mc_leg , legBase ) ;
1739: LD_EXP 6
1743: PPUSH
1744: LD_INT 6
1746: PPUSH
1747: CALL 86844 0 2
// MC_SetDefenderLimit ( mc_leg , 5 ) ;
1751: LD_EXP 6
1755: PPUSH
1756: LD_INT 5
1758: PPUSH
1759: CALL 86463 0 2
// MC_SetMinesField ( mc_leg , 10 , legMines ) ;
1763: LD_EXP 6
1767: PPUSH
1768: LD_INT 10
1770: PPUSH
1771: LD_INT 9
1773: PPUSH
1774: CALL 85960 0 3
// MC_SetBuildingList ( mc_leg , [ [ b_armoury , 157 , 144 , 0 ] , [ b_bunker , 151 , 142 , 0 ] , [ b_bunker , 161 , 144 , 0 ] , [ b_bunker , 140 , 133 , 0 ] ] ) ;
1778: LD_EXP 6
1782: PPUSH
1783: LD_INT 4
1785: PUSH
1786: LD_INT 157
1788: PUSH
1789: LD_INT 144
1791: PUSH
1792: LD_INT 0
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: PUSH
1801: LD_INT 32
1803: PUSH
1804: LD_INT 151
1806: PUSH
1807: LD_INT 142
1809: PUSH
1810: LD_INT 0
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_INT 32
1821: PUSH
1822: LD_INT 161
1824: PUSH
1825: LD_INT 144
1827: PUSH
1828: LD_INT 0
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: PUSH
1837: LD_INT 32
1839: PUSH
1840: LD_INT 140
1842: PUSH
1843: LD_INT 133
1845: PUSH
1846: LD_INT 0
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: LIST
1853: LIST
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: LIST
1859: LIST
1860: PPUSH
1861: CALL 86170 0 2
// MC_SetProduceList ( mc_leg , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ) ;
1865: LD_EXP 6
1869: PPUSH
1870: LD_INT 13
1872: PUSH
1873: LD_INT 2
1875: PUSH
1876: LD_INT 1
1878: PUSH
1879: LD_INT 31
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 13
1890: PUSH
1891: LD_INT 2
1893: PUSH
1894: LD_INT 1
1896: PUSH
1897: LD_INT 31
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 13
1908: PUSH
1909: LD_INT 1
1911: PUSH
1912: LD_INT 1
1914: PUSH
1915: LD_INT 27
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 13
1926: PUSH
1927: LD_INT 1
1929: PUSH
1930: LD_INT 2
1932: PUSH
1933: LD_INT 27
1935: PUSH
1936: EMPTY
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 13
1944: PUSH
1945: LD_INT 1
1947: PUSH
1948: LD_INT 2
1950: PUSH
1951: LD_INT 27
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: PUSH
1960: LD_INT 13
1962: PUSH
1963: LD_INT 1
1965: PUSH
1966: LD_INT 2
1968: PUSH
1969: LD_INT 28
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: PUSH
1978: LD_INT 13
1980: PUSH
1981: LD_INT 1
1983: PUSH
1984: LD_INT 2
1986: PUSH
1987: LD_INT 28
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: PUSH
1996: LD_INT 13
1998: PUSH
1999: LD_INT 1
2001: PUSH
2002: LD_INT 2
2004: PUSH
2005: LD_INT 32
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: PPUSH
2024: CALL 86278 0 2
// HiddenCamera ( 165 , 156 , 8 ) ;
2028: LD_INT 165
2030: PPUSH
2031: LD_INT 156
2033: PPUSH
2034: LD_INT 8
2036: PPUSH
2037: CALL_OW 244
// MC_SetScanArea ( mc_rus_1 , rus1Base ) ;
2041: LD_EXP 7
2045: PPUSH
2046: LD_INT 15
2048: PPUSH
2049: CALL 87599 0 2
// MC_SetParkingArea ( mc_rus_1 , rus1Parking ) ;
2053: LD_EXP 7
2057: PPUSH
2058: LD_INT 16
2060: PPUSH
2061: CALL 87543 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_1 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2065: LD_EXP 7
2069: PPUSH
2070: LD_INT 43
2072: PUSH
2073: LD_INT 47
2075: PUSH
2076: LD_INT 45
2078: PUSH
2079: LD_INT 49
2081: PUSH
2082: LD_INT 46
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: PPUSH
2092: CALL 87431 0 2
// MC_SetCratesArea ( mc_rus_1 , rusCrates ) ;
2096: LD_EXP 7
2100: PPUSH
2101: LD_INT 13
2103: PPUSH
2104: CALL 87113 0 2
// MC_SetTame ( mc_rus_1 , rus1Base ) ;
2108: LD_EXP 7
2112: PPUSH
2113: LD_INT 15
2115: PPUSH
2116: CALL 86844 0 2
// MC_SetDefenderLimit ( mc_rus_1 , 5 ) ;
2120: LD_EXP 7
2124: PPUSH
2125: LD_INT 5
2127: PPUSH
2128: CALL 86463 0 2
// MC_SetProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_rocket ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_crane ] , ] ) ;
2132: LD_EXP 7
2136: PPUSH
2137: LD_INT 23
2139: PUSH
2140: LD_INT 1
2142: PUSH
2143: LD_INT 3
2145: PUSH
2146: LD_INT 46
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: PUSH
2155: LD_INT 23
2157: PUSH
2158: LD_INT 1
2160: PUSH
2161: LD_INT 1
2163: PUSH
2164: LD_INT 46
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: PUSH
2173: LD_INT 23
2175: PUSH
2176: LD_INT 1
2178: PUSH
2179: LD_INT 3
2181: PUSH
2182: LD_INT 45
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: LIST
2189: LIST
2190: PUSH
2191: LD_INT 23
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: LD_INT 47
2202: PUSH
2203: EMPTY
2204: LIST
2205: LIST
2206: LIST
2207: LIST
2208: PUSH
2209: LD_INT 23
2211: PUSH
2212: LD_INT 1
2214: PUSH
2215: LD_INT 3
2217: PUSH
2218: LD_INT 46
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: LIST
2225: LIST
2226: PUSH
2227: LD_INT 21
2229: PUSH
2230: LD_INT 1
2232: PUSH
2233: LD_INT 3
2235: PUSH
2236: LD_INT 51
2238: PUSH
2239: EMPTY
2240: LIST
2241: LIST
2242: LIST
2243: LIST
2244: PUSH
2245: LD_INT 21
2247: PUSH
2248: LD_INT 1
2250: PUSH
2251: LD_INT 3
2253: PUSH
2254: LD_INT 52
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: PPUSH
2272: CALL 86278 0 2
// MC_SetScanArea ( mc_rus_2 , rus2Base ) ;
2276: LD_EXP 8
2280: PPUSH
2281: LD_INT 11
2283: PPUSH
2284: CALL 87599 0 2
// MC_SetParkingArea ( mc_rus_2 , rus2Parking ) ;
2288: LD_EXP 8
2292: PPUSH
2293: LD_INT 12
2295: PPUSH
2296: CALL 87543 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_2 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2300: LD_EXP 8
2304: PPUSH
2305: LD_INT 43
2307: PUSH
2308: LD_INT 47
2310: PUSH
2311: LD_INT 45
2313: PUSH
2314: LD_INT 49
2316: PUSH
2317: LD_INT 46
2319: PUSH
2320: EMPTY
2321: LIST
2322: LIST
2323: LIST
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL 87431 0 2
// MC_SetCratesArea ( mc_rus_2 , rusCrates ) ;
2331: LD_EXP 8
2335: PPUSH
2336: LD_INT 13
2338: PPUSH
2339: CALL 87113 0 2
// MC_SetTame ( mc_rus_2 , rus2Base ) ;
2343: LD_EXP 8
2347: PPUSH
2348: LD_INT 11
2350: PPUSH
2351: CALL 86844 0 2
// MC_SetDefenderLimit ( mc_rus_2 , 4 ) ;
2355: LD_EXP 8
2359: PPUSH
2360: LD_INT 4
2362: PPUSH
2363: CALL 86463 0 2
// MC_SetTeleportExit ( mc_rus_2 , [ [ 115 , 201 ] ] ) ;
2367: LD_EXP 8
2371: PPUSH
2372: LD_INT 115
2374: PUSH
2375: LD_INT 201
2377: PUSH
2378: EMPTY
2379: LIST
2380: LIST
2381: PUSH
2382: EMPTY
2383: LIST
2384: PPUSH
2385: CALL 87169 0 2
// MC_SetProduceList ( mc_rus_2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
2389: LD_EXP 8
2393: PPUSH
2394: LD_INT 24
2396: PUSH
2397: LD_INT 3
2399: PUSH
2400: LD_INT 3
2402: PUSH
2403: LD_INT 46
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: LIST
2411: PUSH
2412: LD_INT 24
2414: PUSH
2415: LD_INT 3
2417: PUSH
2418: LD_INT 3
2420: PUSH
2421: LD_INT 46
2423: PUSH
2424: EMPTY
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: PUSH
2430: LD_INT 24
2432: PUSH
2433: LD_INT 3
2435: PUSH
2436: LD_INT 3
2438: PUSH
2439: LD_INT 46
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: LIST
2446: LIST
2447: PUSH
2448: LD_INT 24
2450: PUSH
2451: LD_INT 3
2453: PUSH
2454: LD_INT 3
2456: PUSH
2457: LD_INT 46
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: LIST
2464: LIST
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: LIST
2470: LIST
2471: PPUSH
2472: CALL 86278 0 2
// end ;
2476: LD_VAR 0 1
2480: RET
// export function PrepareRussians ; var i , b , tmp , side , sr , depot , base ; begin
2481: LD_INT 0
2483: PPUSH
2484: PPUSH
2485: PPUSH
2486: PPUSH
2487: PPUSH
2488: PPUSH
2489: PPUSH
2490: PPUSH
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , rusApe , 0 ) ;
2491: LD_INT 0
2493: PPUSH
2494: LD_INT 0
2496: PPUSH
2497: LD_INT 3
2499: PPUSH
2500: LD_INT 0
2502: PPUSH
2503: LD_INT 0
2505: PPUSH
2506: LD_INT 0
2508: PPUSH
2509: LD_INT 0
2511: PPUSH
2512: LD_INT 14
2514: PPUSH
2515: LD_INT 0
2517: PPUSH
2518: CALL 54321 0 9
// side := 3 ;
2522: LD_ADDR_VAR 0 5
2526: PUSH
2527: LD_INT 3
2529: ST_TO_ADDR
// SetTech ( tech_targTeleport , side , state_researched ) ;
2530: LD_INT 38
2532: PPUSH
2533: LD_VAR 0 5
2537: PPUSH
2538: LD_INT 2
2540: PPUSH
2541: CALL_OW 322
// SetTech ( tech_gun , side , state_researched ) ;
2545: LD_INT 39
2547: PPUSH
2548: LD_VAR 0 5
2552: PPUSH
2553: LD_INT 2
2555: PPUSH
2556: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
2560: LD_INT 34
2562: PPUSH
2563: LD_VAR 0 5
2567: PPUSH
2568: LD_INT 2
2570: PPUSH
2571: CALL_OW 322
// tmp := [ [ 0 , 208 , 163 , 4 , 0 , 0 ] , [ 3 , 194 , 161 , 1 , 0 , 0 ] , [ 17 , 190 , 161 , 1 , 0 , 0 ] , [ 5 , 200 , 145 , 3 , 0 , 0 ] , [ 32 , 192 , 144 , 3 , 0 , 0 ] , [ 26 , 216 , 172 , 3 , 0 , 0 ] , [ 26 , 218 , 176 , 3 , 0 , 0 ] , [ 29 , 182 , 149 , 3 , 0 , 0 ] , [ 8 , 201 , 171 , 0 , 10 , 11 ] , [ 32 , 188 , 167 , 0 , 0 , 0 ] , [ 32 , 202 , 179 , 0 , 0 , 0 ] , [ 32 , 209 , 182 , 0 , 0 , 0 ] , [ 32 , 220 , 183 , 5 , 0 , 0 ] , [ 32 , 225 , 181 , 5 , 0 , 0 ] , [ 26 , 220 , 174 , 5 , 0 , 0 ] , [ 1 , 84 , 128 , 4 , 0 , 0 ] , [ 3 , 68 , 121 , 1 , 0 , 0 ] , [ 19 , 72 , 125 , 5 , 0 , 0 ] , [ 18 , 68 , 124 , 0 , 0 , 0 ] , [ 24 , 64 , 121 , 1 , 0 , 0 ] , [ 17 , 65 , 118 , 2 , 0 , 0 ] , [ 21 , 68 , 117 , 3 , 0 , 0 ] , [ 8 , 68 , 130 , 1 , 14 , 10 ] , [ 8 , 67 , 110 , 2 , 11 , 12 ] , [ 28 , 85 , 108 , 2 , 0 , 0 ] , [ 28 , 85 , 124 , 2 , 0 , 0 ] , [ 30 , 97 , 119 , 2 , 0 , 0 ] , [ 5 , 111 , 138 , 4 , 0 , 0 ] , [ 33 , 104 , 130 , 3 , 0 , 0 ] , [ 33 , 110 , 142 , 5 , 0 , 0 ] , [ 33 , 91 , 131 , 5 , 0 , 0 ] , [ 33 , 107 , 157 , 5 , 0 , 0 ] , [ 33 , 104 , 160 , 5 , 0 , 0 ] , [ 33 , 101 , 162 , 5 , 0 , 0 ] , [ 32 , 87 , 157 , 5 , 0 , 0 ] , [ 32 , 105 , 158 , 5 , 0 , 0 ] , [ 33 , 91 , 118 , 4 , 0 , 0 ] , [ 33 , 89 , 107 , 4 , 0 , 0 ] , [ 5 , 86 , 96 , 3 , 0 , 0 ] , [ 33 , 91 , 102 , 4 , 0 , 0 ] , [ 32 , 80 , 95 , 3 , 0 , 0 ] , [ 28 , 77 , 105 , 3 , 0 , 0 ] , [ 28 , 85 , 113 , 3 , 0 , 0 ] , [ 28 , 55 , 97 , 3 , 0 , 0 ] , [ 28 , 88 , 128 , 3 , 0 , 0 ] , [ 32 , 69 , 101 , 2 , 0 , 0 ] , [ 1 , 34 , 23 , 4 , 0 , 0 ] , [ 8 , 25 , 4 , 3 , 11 , 10 ] , [ 8 , 15 , 4 , 2 , 14 , 12 ] , [ 29 , 55 , 35 , 2 , 0 , 0 ] , [ 29 , 24 , 44 , 2 , 0 , 0 ] , [ 34 , 34 , 32 , 4 , 0 , 0 ] , [ 3 , 14 , 16 , 1 , 0 , 0 ] , [ 24 , 10 , 16 , 1 , 0 , 0 ] , [ 21 , 11 , 13 , 2 , 0 , 0 ] , [ 18 , 14 , 12 , 3 , 0 , 0 ] , [ 16 , 14 , 19 , 0 , 0 , 0 ] , [ 17 , 18 , 20 , 5 , 0 , 0 ] , [ 28 , 10 , 5 , 1 , 0 , 0 ] , [ 28 , 8 , 8 , 1 , 0 , 0 ] , [ 26 , 19 , 2 , 1 , 0 , 0 ] , [ 26 , 30 , 2 , 1 , 0 , 0 ] , [ 5 , 59 , 20 , 4 , 0 , 0 ] , [ 32 , 60 , 24 , 4 , 0 , 0 ] , [ 32 , 61 , 45 , 5 , 0 , 0 ] , [ 32 , 52 , 51 , 5 , 0 , 0 ] , [ 33 , 56 , 51 , 5 , 0 , 0 ] , [ 33 , 62 , 49 , 5 , 0 , 0 ] , [ 33 , 41 , 47 , 5 , 0 , 0 ] , [ 33 , 33 , 52 , 5 , 0 , 0 ] , [ 5 , 31 , 40 , 0 , 0 , 0 ] , [ 33 , 65 , 37 , 5 , 0 , 0 ] , [ 33 , 63 , 29 , 4 , 0 , 0 ] , [ 33 , 54 , 11 , 4 , 0 , 0 ] , [ 33 , 56 , 15 , 4 , 0 , 0 ] , [ 33 , 51 , 6 , 4 , 0 , 0 ] , [ 26 , 39 , 25 , 0 , 0 , 0 ] , [ 26 , 37 , 21 , 0 , 0 , 0 ] , [ 32 , 35 , 17 , 4 , 0 , 0 ] , [ 33 , 35 , 28 , 4 , 0 , 0 ] , [ 33 , 28 , 46 , 5 , 0 , 0 ] , [ 33 , 31 , 6 , 4 , 0 , 0 ] , [ 26 , 54 , 38 , 4 , 0 , 0 ] , [ 33 , 207 , 167 , 3 , 0 , 0 ] , [ 30 , 43 , 2 , 4 , 0 , 0 ] ] ;
2575: LD_ADDR_VAR 0 4
2579: PUSH
2580: LD_INT 0
2582: PUSH
2583: LD_INT 208
2585: PUSH
2586: LD_INT 163
2588: PUSH
2589: LD_INT 4
2591: PUSH
2592: LD_INT 0
2594: PUSH
2595: LD_INT 0
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: PUSH
2606: LD_INT 3
2608: PUSH
2609: LD_INT 194
2611: PUSH
2612: LD_INT 161
2614: PUSH
2615: LD_INT 1
2617: PUSH
2618: LD_INT 0
2620: PUSH
2621: LD_INT 0
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: PUSH
2632: LD_INT 17
2634: PUSH
2635: LD_INT 190
2637: PUSH
2638: LD_INT 161
2640: PUSH
2641: LD_INT 1
2643: PUSH
2644: LD_INT 0
2646: PUSH
2647: LD_INT 0
2649: PUSH
2650: EMPTY
2651: LIST
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: LIST
2657: PUSH
2658: LD_INT 5
2660: PUSH
2661: LD_INT 200
2663: PUSH
2664: LD_INT 145
2666: PUSH
2667: LD_INT 3
2669: PUSH
2670: LD_INT 0
2672: PUSH
2673: LD_INT 0
2675: PUSH
2676: EMPTY
2677: LIST
2678: LIST
2679: LIST
2680: LIST
2681: LIST
2682: LIST
2683: PUSH
2684: LD_INT 32
2686: PUSH
2687: LD_INT 192
2689: PUSH
2690: LD_INT 144
2692: PUSH
2693: LD_INT 3
2695: PUSH
2696: LD_INT 0
2698: PUSH
2699: LD_INT 0
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: LIST
2709: PUSH
2710: LD_INT 26
2712: PUSH
2713: LD_INT 216
2715: PUSH
2716: LD_INT 172
2718: PUSH
2719: LD_INT 3
2721: PUSH
2722: LD_INT 0
2724: PUSH
2725: LD_INT 0
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: LIST
2732: LIST
2733: LIST
2734: LIST
2735: PUSH
2736: LD_INT 26
2738: PUSH
2739: LD_INT 218
2741: PUSH
2742: LD_INT 176
2744: PUSH
2745: LD_INT 3
2747: PUSH
2748: LD_INT 0
2750: PUSH
2751: LD_INT 0
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: LIST
2758: LIST
2759: LIST
2760: LIST
2761: PUSH
2762: LD_INT 29
2764: PUSH
2765: LD_INT 182
2767: PUSH
2768: LD_INT 149
2770: PUSH
2771: LD_INT 3
2773: PUSH
2774: LD_INT 0
2776: PUSH
2777: LD_INT 0
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: LIST
2784: LIST
2785: LIST
2786: LIST
2787: PUSH
2788: LD_INT 8
2790: PUSH
2791: LD_INT 201
2793: PUSH
2794: LD_INT 171
2796: PUSH
2797: LD_INT 0
2799: PUSH
2800: LD_INT 10
2802: PUSH
2803: LD_INT 11
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: LIST
2810: LIST
2811: LIST
2812: LIST
2813: PUSH
2814: LD_INT 32
2816: PUSH
2817: LD_INT 188
2819: PUSH
2820: LD_INT 167
2822: PUSH
2823: LD_INT 0
2825: PUSH
2826: LD_INT 0
2828: PUSH
2829: LD_INT 0
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_INT 32
2842: PUSH
2843: LD_INT 202
2845: PUSH
2846: LD_INT 179
2848: PUSH
2849: LD_INT 0
2851: PUSH
2852: LD_INT 0
2854: PUSH
2855: LD_INT 0
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: PUSH
2866: LD_INT 32
2868: PUSH
2869: LD_INT 209
2871: PUSH
2872: LD_INT 182
2874: PUSH
2875: LD_INT 0
2877: PUSH
2878: LD_INT 0
2880: PUSH
2881: LD_INT 0
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: LIST
2888: LIST
2889: LIST
2890: LIST
2891: PUSH
2892: LD_INT 32
2894: PUSH
2895: LD_INT 220
2897: PUSH
2898: LD_INT 183
2900: PUSH
2901: LD_INT 5
2903: PUSH
2904: LD_INT 0
2906: PUSH
2907: LD_INT 0
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: LIST
2914: LIST
2915: LIST
2916: LIST
2917: PUSH
2918: LD_INT 32
2920: PUSH
2921: LD_INT 225
2923: PUSH
2924: LD_INT 181
2926: PUSH
2927: LD_INT 5
2929: PUSH
2930: LD_INT 0
2932: PUSH
2933: LD_INT 0
2935: PUSH
2936: EMPTY
2937: LIST
2938: LIST
2939: LIST
2940: LIST
2941: LIST
2942: LIST
2943: PUSH
2944: LD_INT 26
2946: PUSH
2947: LD_INT 220
2949: PUSH
2950: LD_INT 174
2952: PUSH
2953: LD_INT 5
2955: PUSH
2956: LD_INT 0
2958: PUSH
2959: LD_INT 0
2961: PUSH
2962: EMPTY
2963: LIST
2964: LIST
2965: LIST
2966: LIST
2967: LIST
2968: LIST
2969: PUSH
2970: LD_INT 1
2972: PUSH
2973: LD_INT 84
2975: PUSH
2976: LD_INT 128
2978: PUSH
2979: LD_INT 4
2981: PUSH
2982: LD_INT 0
2984: PUSH
2985: LD_INT 0
2987: PUSH
2988: EMPTY
2989: LIST
2990: LIST
2991: LIST
2992: LIST
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 3
2998: PUSH
2999: LD_INT 68
3001: PUSH
3002: LD_INT 121
3004: PUSH
3005: LD_INT 1
3007: PUSH
3008: LD_INT 0
3010: PUSH
3011: LD_INT 0
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: LIST
3018: LIST
3019: LIST
3020: LIST
3021: PUSH
3022: LD_INT 19
3024: PUSH
3025: LD_INT 72
3027: PUSH
3028: LD_INT 125
3030: PUSH
3031: LD_INT 5
3033: PUSH
3034: LD_INT 0
3036: PUSH
3037: LD_INT 0
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: LIST
3044: LIST
3045: LIST
3046: LIST
3047: PUSH
3048: LD_INT 18
3050: PUSH
3051: LD_INT 68
3053: PUSH
3054: LD_INT 124
3056: PUSH
3057: LD_INT 0
3059: PUSH
3060: LD_INT 0
3062: PUSH
3063: LD_INT 0
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: PUSH
3074: LD_INT 24
3076: PUSH
3077: LD_INT 64
3079: PUSH
3080: LD_INT 121
3082: PUSH
3083: LD_INT 1
3085: PUSH
3086: LD_INT 0
3088: PUSH
3089: LD_INT 0
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: LIST
3099: PUSH
3100: LD_INT 17
3102: PUSH
3103: LD_INT 65
3105: PUSH
3106: LD_INT 118
3108: PUSH
3109: LD_INT 2
3111: PUSH
3112: LD_INT 0
3114: PUSH
3115: LD_INT 0
3117: PUSH
3118: EMPTY
3119: LIST
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 21
3128: PUSH
3129: LD_INT 68
3131: PUSH
3132: LD_INT 117
3134: PUSH
3135: LD_INT 3
3137: PUSH
3138: LD_INT 0
3140: PUSH
3141: LD_INT 0
3143: PUSH
3144: EMPTY
3145: LIST
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: LIST
3151: PUSH
3152: LD_INT 8
3154: PUSH
3155: LD_INT 68
3157: PUSH
3158: LD_INT 130
3160: PUSH
3161: LD_INT 1
3163: PUSH
3164: LD_INT 14
3166: PUSH
3167: LD_INT 10
3169: PUSH
3170: EMPTY
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: PUSH
3178: LD_INT 8
3180: PUSH
3181: LD_INT 67
3183: PUSH
3184: LD_INT 110
3186: PUSH
3187: LD_INT 2
3189: PUSH
3190: LD_INT 11
3192: PUSH
3193: LD_INT 12
3195: PUSH
3196: EMPTY
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: PUSH
3204: LD_INT 28
3206: PUSH
3207: LD_INT 85
3209: PUSH
3210: LD_INT 108
3212: PUSH
3213: LD_INT 2
3215: PUSH
3216: LD_INT 0
3218: PUSH
3219: LD_INT 0
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: LIST
3229: PUSH
3230: LD_INT 28
3232: PUSH
3233: LD_INT 85
3235: PUSH
3236: LD_INT 124
3238: PUSH
3239: LD_INT 2
3241: PUSH
3242: LD_INT 0
3244: PUSH
3245: LD_INT 0
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: PUSH
3256: LD_INT 30
3258: PUSH
3259: LD_INT 97
3261: PUSH
3262: LD_INT 119
3264: PUSH
3265: LD_INT 2
3267: PUSH
3268: LD_INT 0
3270: PUSH
3271: LD_INT 0
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: PUSH
3282: LD_INT 5
3284: PUSH
3285: LD_INT 111
3287: PUSH
3288: LD_INT 138
3290: PUSH
3291: LD_INT 4
3293: PUSH
3294: LD_INT 0
3296: PUSH
3297: LD_INT 0
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: PUSH
3308: LD_INT 33
3310: PUSH
3311: LD_INT 104
3313: PUSH
3314: LD_INT 130
3316: PUSH
3317: LD_INT 3
3319: PUSH
3320: LD_INT 0
3322: PUSH
3323: LD_INT 0
3325: PUSH
3326: EMPTY
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: PUSH
3334: LD_INT 33
3336: PUSH
3337: LD_INT 110
3339: PUSH
3340: LD_INT 142
3342: PUSH
3343: LD_INT 5
3345: PUSH
3346: LD_INT 0
3348: PUSH
3349: LD_INT 0
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: PUSH
3360: LD_INT 33
3362: PUSH
3363: LD_INT 91
3365: PUSH
3366: LD_INT 131
3368: PUSH
3369: LD_INT 5
3371: PUSH
3372: LD_INT 0
3374: PUSH
3375: LD_INT 0
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: PUSH
3386: LD_INT 33
3388: PUSH
3389: LD_INT 107
3391: PUSH
3392: LD_INT 157
3394: PUSH
3395: LD_INT 5
3397: PUSH
3398: LD_INT 0
3400: PUSH
3401: LD_INT 0
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: PUSH
3412: LD_INT 33
3414: PUSH
3415: LD_INT 104
3417: PUSH
3418: LD_INT 160
3420: PUSH
3421: LD_INT 5
3423: PUSH
3424: LD_INT 0
3426: PUSH
3427: LD_INT 0
3429: PUSH
3430: EMPTY
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: PUSH
3438: LD_INT 33
3440: PUSH
3441: LD_INT 101
3443: PUSH
3444: LD_INT 162
3446: PUSH
3447: LD_INT 5
3449: PUSH
3450: LD_INT 0
3452: PUSH
3453: LD_INT 0
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: PUSH
3464: LD_INT 32
3466: PUSH
3467: LD_INT 87
3469: PUSH
3470: LD_INT 157
3472: PUSH
3473: LD_INT 5
3475: PUSH
3476: LD_INT 0
3478: PUSH
3479: LD_INT 0
3481: PUSH
3482: EMPTY
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: PUSH
3490: LD_INT 32
3492: PUSH
3493: LD_INT 105
3495: PUSH
3496: LD_INT 158
3498: PUSH
3499: LD_INT 5
3501: PUSH
3502: LD_INT 0
3504: PUSH
3505: LD_INT 0
3507: PUSH
3508: EMPTY
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: PUSH
3516: LD_INT 33
3518: PUSH
3519: LD_INT 91
3521: PUSH
3522: LD_INT 118
3524: PUSH
3525: LD_INT 4
3527: PUSH
3528: LD_INT 0
3530: PUSH
3531: LD_INT 0
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: PUSH
3542: LD_INT 33
3544: PUSH
3545: LD_INT 89
3547: PUSH
3548: LD_INT 107
3550: PUSH
3551: LD_INT 4
3553: PUSH
3554: LD_INT 0
3556: PUSH
3557: LD_INT 0
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: PUSH
3568: LD_INT 5
3570: PUSH
3571: LD_INT 86
3573: PUSH
3574: LD_INT 96
3576: PUSH
3577: LD_INT 3
3579: PUSH
3580: LD_INT 0
3582: PUSH
3583: LD_INT 0
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: PUSH
3594: LD_INT 33
3596: PUSH
3597: LD_INT 91
3599: PUSH
3600: LD_INT 102
3602: PUSH
3603: LD_INT 4
3605: PUSH
3606: LD_INT 0
3608: PUSH
3609: LD_INT 0
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: PUSH
3620: LD_INT 32
3622: PUSH
3623: LD_INT 80
3625: PUSH
3626: LD_INT 95
3628: PUSH
3629: LD_INT 3
3631: PUSH
3632: LD_INT 0
3634: PUSH
3635: LD_INT 0
3637: PUSH
3638: EMPTY
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: PUSH
3646: LD_INT 28
3648: PUSH
3649: LD_INT 77
3651: PUSH
3652: LD_INT 105
3654: PUSH
3655: LD_INT 3
3657: PUSH
3658: LD_INT 0
3660: PUSH
3661: LD_INT 0
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: PUSH
3672: LD_INT 28
3674: PUSH
3675: LD_INT 85
3677: PUSH
3678: LD_INT 113
3680: PUSH
3681: LD_INT 3
3683: PUSH
3684: LD_INT 0
3686: PUSH
3687: LD_INT 0
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: PUSH
3698: LD_INT 28
3700: PUSH
3701: LD_INT 55
3703: PUSH
3704: LD_INT 97
3706: PUSH
3707: LD_INT 3
3709: PUSH
3710: LD_INT 0
3712: PUSH
3713: LD_INT 0
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: PUSH
3724: LD_INT 28
3726: PUSH
3727: LD_INT 88
3729: PUSH
3730: LD_INT 128
3732: PUSH
3733: LD_INT 3
3735: PUSH
3736: LD_INT 0
3738: PUSH
3739: LD_INT 0
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: LIST
3748: LIST
3749: PUSH
3750: LD_INT 32
3752: PUSH
3753: LD_INT 69
3755: PUSH
3756: LD_INT 101
3758: PUSH
3759: LD_INT 2
3761: PUSH
3762: LD_INT 0
3764: PUSH
3765: LD_INT 0
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: PUSH
3776: LD_INT 1
3778: PUSH
3779: LD_INT 34
3781: PUSH
3782: LD_INT 23
3784: PUSH
3785: LD_INT 4
3787: PUSH
3788: LD_INT 0
3790: PUSH
3791: LD_INT 0
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: PUSH
3802: LD_INT 8
3804: PUSH
3805: LD_INT 25
3807: PUSH
3808: LD_INT 4
3810: PUSH
3811: LD_INT 3
3813: PUSH
3814: LD_INT 11
3816: PUSH
3817: LD_INT 10
3819: PUSH
3820: EMPTY
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: PUSH
3828: LD_INT 8
3830: PUSH
3831: LD_INT 15
3833: PUSH
3834: LD_INT 4
3836: PUSH
3837: LD_INT 2
3839: PUSH
3840: LD_INT 14
3842: PUSH
3843: LD_INT 12
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: PUSH
3854: LD_INT 29
3856: PUSH
3857: LD_INT 55
3859: PUSH
3860: LD_INT 35
3862: PUSH
3863: LD_INT 2
3865: PUSH
3866: LD_INT 0
3868: PUSH
3869: LD_INT 0
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: PUSH
3880: LD_INT 29
3882: PUSH
3883: LD_INT 24
3885: PUSH
3886: LD_INT 44
3888: PUSH
3889: LD_INT 2
3891: PUSH
3892: LD_INT 0
3894: PUSH
3895: LD_INT 0
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: PUSH
3906: LD_INT 34
3908: PUSH
3909: LD_INT 34
3911: PUSH
3912: LD_INT 32
3914: PUSH
3915: LD_INT 4
3917: PUSH
3918: LD_INT 0
3920: PUSH
3921: LD_INT 0
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: PUSH
3932: LD_INT 3
3934: PUSH
3935: LD_INT 14
3937: PUSH
3938: LD_INT 16
3940: PUSH
3941: LD_INT 1
3943: PUSH
3944: LD_INT 0
3946: PUSH
3947: LD_INT 0
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: PUSH
3958: LD_INT 24
3960: PUSH
3961: LD_INT 10
3963: PUSH
3964: LD_INT 16
3966: PUSH
3967: LD_INT 1
3969: PUSH
3970: LD_INT 0
3972: PUSH
3973: LD_INT 0
3975: PUSH
3976: EMPTY
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: PUSH
3984: LD_INT 21
3986: PUSH
3987: LD_INT 11
3989: PUSH
3990: LD_INT 13
3992: PUSH
3993: LD_INT 2
3995: PUSH
3996: LD_INT 0
3998: PUSH
3999: LD_INT 0
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: PUSH
4010: LD_INT 18
4012: PUSH
4013: LD_INT 14
4015: PUSH
4016: LD_INT 12
4018: PUSH
4019: LD_INT 3
4021: PUSH
4022: LD_INT 0
4024: PUSH
4025: LD_INT 0
4027: PUSH
4028: EMPTY
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: PUSH
4036: LD_INT 16
4038: PUSH
4039: LD_INT 14
4041: PUSH
4042: LD_INT 19
4044: PUSH
4045: LD_INT 0
4047: PUSH
4048: LD_INT 0
4050: PUSH
4051: LD_INT 0
4053: PUSH
4054: EMPTY
4055: LIST
4056: LIST
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: PUSH
4062: LD_INT 17
4064: PUSH
4065: LD_INT 18
4067: PUSH
4068: LD_INT 20
4070: PUSH
4071: LD_INT 5
4073: PUSH
4074: LD_INT 0
4076: PUSH
4077: LD_INT 0
4079: PUSH
4080: EMPTY
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 28
4090: PUSH
4091: LD_INT 10
4093: PUSH
4094: LD_INT 5
4096: PUSH
4097: LD_INT 1
4099: PUSH
4100: LD_INT 0
4102: PUSH
4103: LD_INT 0
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 28
4116: PUSH
4117: LD_INT 8
4119: PUSH
4120: LD_INT 8
4122: PUSH
4123: LD_INT 1
4125: PUSH
4126: LD_INT 0
4128: PUSH
4129: LD_INT 0
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: PUSH
4140: LD_INT 26
4142: PUSH
4143: LD_INT 19
4145: PUSH
4146: LD_INT 2
4148: PUSH
4149: LD_INT 1
4151: PUSH
4152: LD_INT 0
4154: PUSH
4155: LD_INT 0
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: PUSH
4166: LD_INT 26
4168: PUSH
4169: LD_INT 30
4171: PUSH
4172: LD_INT 2
4174: PUSH
4175: LD_INT 1
4177: PUSH
4178: LD_INT 0
4180: PUSH
4181: LD_INT 0
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: PUSH
4192: LD_INT 5
4194: PUSH
4195: LD_INT 59
4197: PUSH
4198: LD_INT 20
4200: PUSH
4201: LD_INT 4
4203: PUSH
4204: LD_INT 0
4206: PUSH
4207: LD_INT 0
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: PUSH
4218: LD_INT 32
4220: PUSH
4221: LD_INT 60
4223: PUSH
4224: LD_INT 24
4226: PUSH
4227: LD_INT 4
4229: PUSH
4230: LD_INT 0
4232: PUSH
4233: LD_INT 0
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: PUSH
4244: LD_INT 32
4246: PUSH
4247: LD_INT 61
4249: PUSH
4250: LD_INT 45
4252: PUSH
4253: LD_INT 5
4255: PUSH
4256: LD_INT 0
4258: PUSH
4259: LD_INT 0
4261: PUSH
4262: EMPTY
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: PUSH
4270: LD_INT 32
4272: PUSH
4273: LD_INT 52
4275: PUSH
4276: LD_INT 51
4278: PUSH
4279: LD_INT 5
4281: PUSH
4282: LD_INT 0
4284: PUSH
4285: LD_INT 0
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: PUSH
4296: LD_INT 33
4298: PUSH
4299: LD_INT 56
4301: PUSH
4302: LD_INT 51
4304: PUSH
4305: LD_INT 5
4307: PUSH
4308: LD_INT 0
4310: PUSH
4311: LD_INT 0
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: PUSH
4322: LD_INT 33
4324: PUSH
4325: LD_INT 62
4327: PUSH
4328: LD_INT 49
4330: PUSH
4331: LD_INT 5
4333: PUSH
4334: LD_INT 0
4336: PUSH
4337: LD_INT 0
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: PUSH
4348: LD_INT 33
4350: PUSH
4351: LD_INT 41
4353: PUSH
4354: LD_INT 47
4356: PUSH
4357: LD_INT 5
4359: PUSH
4360: LD_INT 0
4362: PUSH
4363: LD_INT 0
4365: PUSH
4366: EMPTY
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: PUSH
4374: LD_INT 33
4376: PUSH
4377: LD_INT 33
4379: PUSH
4380: LD_INT 52
4382: PUSH
4383: LD_INT 5
4385: PUSH
4386: LD_INT 0
4388: PUSH
4389: LD_INT 0
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: PUSH
4400: LD_INT 5
4402: PUSH
4403: LD_INT 31
4405: PUSH
4406: LD_INT 40
4408: PUSH
4409: LD_INT 0
4411: PUSH
4412: LD_INT 0
4414: PUSH
4415: LD_INT 0
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: PUSH
4426: LD_INT 33
4428: PUSH
4429: LD_INT 65
4431: PUSH
4432: LD_INT 37
4434: PUSH
4435: LD_INT 5
4437: PUSH
4438: LD_INT 0
4440: PUSH
4441: LD_INT 0
4443: PUSH
4444: EMPTY
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: PUSH
4452: LD_INT 33
4454: PUSH
4455: LD_INT 63
4457: PUSH
4458: LD_INT 29
4460: PUSH
4461: LD_INT 4
4463: PUSH
4464: LD_INT 0
4466: PUSH
4467: LD_INT 0
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: PUSH
4478: LD_INT 33
4480: PUSH
4481: LD_INT 54
4483: PUSH
4484: LD_INT 11
4486: PUSH
4487: LD_INT 4
4489: PUSH
4490: LD_INT 0
4492: PUSH
4493: LD_INT 0
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: PUSH
4504: LD_INT 33
4506: PUSH
4507: LD_INT 56
4509: PUSH
4510: LD_INT 15
4512: PUSH
4513: LD_INT 4
4515: PUSH
4516: LD_INT 0
4518: PUSH
4519: LD_INT 0
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: PUSH
4530: LD_INT 33
4532: PUSH
4533: LD_INT 51
4535: PUSH
4536: LD_INT 6
4538: PUSH
4539: LD_INT 4
4541: PUSH
4542: LD_INT 0
4544: PUSH
4545: LD_INT 0
4547: PUSH
4548: EMPTY
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: LIST
4555: PUSH
4556: LD_INT 26
4558: PUSH
4559: LD_INT 39
4561: PUSH
4562: LD_INT 25
4564: PUSH
4565: LD_INT 0
4567: PUSH
4568: LD_INT 0
4570: PUSH
4571: LD_INT 0
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: PUSH
4582: LD_INT 26
4584: PUSH
4585: LD_INT 37
4587: PUSH
4588: LD_INT 21
4590: PUSH
4591: LD_INT 0
4593: PUSH
4594: LD_INT 0
4596: PUSH
4597: LD_INT 0
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: PUSH
4608: LD_INT 32
4610: PUSH
4611: LD_INT 35
4613: PUSH
4614: LD_INT 17
4616: PUSH
4617: LD_INT 4
4619: PUSH
4620: LD_INT 0
4622: PUSH
4623: LD_INT 0
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: PUSH
4634: LD_INT 33
4636: PUSH
4637: LD_INT 35
4639: PUSH
4640: LD_INT 28
4642: PUSH
4643: LD_INT 4
4645: PUSH
4646: LD_INT 0
4648: PUSH
4649: LD_INT 0
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: LIST
4658: LIST
4659: PUSH
4660: LD_INT 33
4662: PUSH
4663: LD_INT 28
4665: PUSH
4666: LD_INT 46
4668: PUSH
4669: LD_INT 5
4671: PUSH
4672: LD_INT 0
4674: PUSH
4675: LD_INT 0
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: PUSH
4686: LD_INT 33
4688: PUSH
4689: LD_INT 31
4691: PUSH
4692: LD_INT 6
4694: PUSH
4695: LD_INT 4
4697: PUSH
4698: LD_INT 0
4700: PUSH
4701: LD_INT 0
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: PUSH
4712: LD_INT 26
4714: PUSH
4715: LD_INT 54
4717: PUSH
4718: LD_INT 38
4720: PUSH
4721: LD_INT 4
4723: PUSH
4724: LD_INT 0
4726: PUSH
4727: LD_INT 0
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: PUSH
4738: LD_INT 33
4740: PUSH
4741: LD_INT 207
4743: PUSH
4744: LD_INT 167
4746: PUSH
4747: LD_INT 3
4749: PUSH
4750: LD_INT 0
4752: PUSH
4753: LD_INT 0
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: PUSH
4764: LD_INT 30
4766: PUSH
4767: LD_INT 43
4769: PUSH
4770: LD_INT 2
4772: PUSH
4773: LD_INT 4
4775: PUSH
4776: LD_INT 0
4778: PUSH
4779: LD_INT 0
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: ST_TO_ADDR
// for i in tmp do
4877: LD_ADDR_VAR 0 2
4881: PUSH
4882: LD_VAR 0 4
4886: PUSH
4887: FOR_IN
4888: IFFALSE 5119
// begin uc_side := side ;
4890: LD_ADDR_OWVAR 20
4894: PUSH
4895: LD_VAR 0 5
4899: ST_TO_ADDR
// uc_nation := nation_russian ;
4900: LD_ADDR_OWVAR 21
4904: PUSH
4905: LD_INT 3
4907: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4908: LD_ADDR_OWVAR 42
4912: PUSH
4913: LD_VAR 0 2
4917: PUSH
4918: LD_INT 1
4920: ARRAY
4921: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
4922: LD_ADDR_OWVAR 43
4926: PUSH
4927: LD_INT 5
4929: PPUSH
4930: LD_INT 6
4932: PPUSH
4933: CALL_OW 12
4937: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
4938: LD_ADDR_OWVAR 44
4942: PUSH
4943: LD_VAR 0 2
4947: PUSH
4948: LD_INT 5
4950: ARRAY
4951: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
4952: LD_ADDR_OWVAR 45
4956: PUSH
4957: LD_VAR 0 2
4961: PUSH
4962: LD_INT 6
4964: ARRAY
4965: ST_TO_ADDR
// sr := 0 ;
4966: LD_ADDR_VAR 0 6
4970: PUSH
4971: LD_INT 0
4973: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
4974: LD_VAR 0 2
4978: PUSH
4979: LD_INT 1
4981: ARRAY
4982: PUSH
4983: LD_INT 29
4985: EQUAL
4986: IFFALSE 4998
// sr := mat_oil else
4988: LD_ADDR_VAR 0 6
4992: PUSH
4993: LD_INT 2
4995: ST_TO_ADDR
4996: GO 5020
// if i [ 1 ] = b_siberite_mine then
4998: LD_VAR 0 2
5002: PUSH
5003: LD_INT 1
5005: ARRAY
5006: PUSH
5007: LD_INT 30
5009: EQUAL
5010: IFFALSE 5020
// sr := mat_siberit ;
5012: LD_ADDR_VAR 0 6
5016: PUSH
5017: LD_INT 3
5019: ST_TO_ADDR
// if sr then
5020: LD_VAR 0 6
5024: IFFALSE 5080
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
5026: LD_VAR 0 2
5030: PUSH
5031: LD_INT 2
5033: ARRAY
5034: PPUSH
5035: LD_VAR 0 2
5039: PUSH
5040: LD_INT 3
5042: ARRAY
5043: PPUSH
5044: LD_VAR 0 6
5048: PPUSH
5049: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
5053: LD_VAR 0 2
5057: PUSH
5058: LD_INT 2
5060: ARRAY
5061: PPUSH
5062: LD_VAR 0 2
5066: PUSH
5067: LD_INT 3
5069: ARRAY
5070: PPUSH
5071: LD_VAR 0 5
5075: PPUSH
5076: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
5080: LD_ADDR_VAR 0 3
5084: PUSH
5085: LD_VAR 0 2
5089: PUSH
5090: LD_INT 2
5092: ARRAY
5093: PPUSH
5094: LD_VAR 0 2
5098: PUSH
5099: LD_INT 3
5101: ARRAY
5102: PPUSH
5103: LD_VAR 0 2
5107: PUSH
5108: LD_INT 4
5110: ARRAY
5111: PPUSH
5112: CALL_OW 47
5116: ST_TO_ADDR
// end ;
5117: GO 4887
5119: POP
5120: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
5121: LD_ADDR_VAR 0 7
5125: PUSH
5126: LD_INT 22
5128: PUSH
5129: LD_VAR 0 5
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: PUSH
5138: LD_INT 30
5140: PUSH
5141: LD_INT 1
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: PPUSH
5152: CALL_OW 69
5156: ST_TO_ADDR
// if not depot then
5157: LD_VAR 0 7
5161: NOT
5162: IFFALSE 5166
// exit ;
5164: GO 5510
// base := PrepareBase ( HexInfo ( 84 , 128 ) , rus1Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5166: LD_ADDR_VAR 0 8
5170: PUSH
5171: LD_INT 84
5173: PPUSH
5174: LD_INT 128
5176: PPUSH
5177: CALL_OW 428
5181: PPUSH
5182: LD_INT 15
5184: PPUSH
5185: LD_INT 0
5187: PPUSH
5188: LD_INT 6
5190: PUSH
5191: LD_INT 7
5193: PUSH
5194: LD_INT 8
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: LIST
5201: PUSH
5202: LD_OWVAR 67
5206: ARRAY
5207: PPUSH
5208: LD_INT 3000
5210: PUSH
5211: LD_INT 300
5213: PUSH
5214: LD_INT 100
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: LIST
5221: PPUSH
5222: LD_INT 12
5224: PUSH
5225: LD_INT 6
5227: PUSH
5228: LD_INT 6
5230: PUSH
5231: LD_INT 4
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: PPUSH
5240: CALL 29939 0 6
5244: ST_TO_ADDR
// if not base then
5245: LD_VAR 0 8
5249: NOT
5250: IFFALSE 5254
// exit ;
5252: GO 5510
// mc_bases := Replace ( mc_bases , mc_rus_1 , base ) ;
5254: LD_ADDR_EXP 36
5258: PUSH
5259: LD_EXP 36
5263: PPUSH
5264: LD_EXP 7
5268: PPUSH
5269: LD_VAR 0 8
5273: PPUSH
5274: CALL_OW 1
5278: ST_TO_ADDR
// base := PrepareBase ( HexInfo ( 34 , 23 ) , rus2Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 20000 , 3000 , 1000 ] , [ 12 , 6 , 6 , 4 ] ) ;
5279: LD_ADDR_VAR 0 8
5283: PUSH
5284: LD_INT 34
5286: PPUSH
5287: LD_INT 23
5289: PPUSH
5290: CALL_OW 428
5294: PPUSH
5295: LD_INT 11
5297: PPUSH
5298: LD_INT 0
5300: PPUSH
5301: LD_INT 6
5303: PUSH
5304: LD_INT 7
5306: PUSH
5307: LD_INT 8
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: PUSH
5315: LD_OWVAR 67
5319: ARRAY
5320: PPUSH
5321: LD_INT 20000
5323: PUSH
5324: LD_INT 3000
5326: PUSH
5327: LD_INT 1000
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: LIST
5334: PPUSH
5335: LD_INT 12
5337: PUSH
5338: LD_INT 6
5340: PUSH
5341: LD_INT 6
5343: PUSH
5344: LD_INT 4
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: LIST
5351: LIST
5352: PPUSH
5353: CALL 29939 0 6
5357: ST_TO_ADDR
// if not base then
5358: LD_VAR 0 8
5362: NOT
5363: IFFALSE 5367
// exit ;
5365: GO 5510
// mc_bases := Replace ( mc_bases , mc_rus_2 , base ) ;
5367: LD_ADDR_EXP 36
5371: PUSH
5372: LD_EXP 36
5376: PPUSH
5377: LD_EXP 8
5381: PPUSH
5382: LD_VAR 0 8
5386: PPUSH
5387: CALL_OW 1
5391: ST_TO_ADDR
// ruOutpost := PrepareBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] , ruOutpostArea , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 500 , 100 , 10 ] , [ [ 6 , 7 , 8 ] [ Difficulty ] , 2 , 0 , 1 ] ) ;
5392: LD_ADDR_EXP 14
5396: PUSH
5397: LD_INT 22
5399: PUSH
5400: LD_INT 3
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: PUSH
5407: LD_INT 30
5409: PUSH
5410: LD_INT 0
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: PPUSH
5421: CALL_OW 69
5425: PUSH
5426: LD_INT 1
5428: ARRAY
5429: PPUSH
5430: LD_INT 25
5432: PPUSH
5433: LD_INT 0
5435: PPUSH
5436: LD_INT 6
5438: PUSH
5439: LD_INT 7
5441: PUSH
5442: LD_INT 8
5444: PUSH
5445: EMPTY
5446: LIST
5447: LIST
5448: LIST
5449: PUSH
5450: LD_OWVAR 67
5454: ARRAY
5455: PPUSH
5456: LD_INT 500
5458: PUSH
5459: LD_INT 100
5461: PUSH
5462: LD_INT 10
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: LIST
5469: PPUSH
5470: LD_INT 6
5472: PUSH
5473: LD_INT 7
5475: PUSH
5476: LD_INT 8
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: LIST
5483: PUSH
5484: LD_OWVAR 67
5488: ARRAY
5489: PUSH
5490: LD_INT 2
5492: PUSH
5493: LD_INT 0
5495: PUSH
5496: LD_INT 1
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: LIST
5503: LIST
5504: PPUSH
5505: CALL 29939 0 6
5509: ST_TO_ADDR
// end ;
5510: LD_VAR 0 1
5514: RET
// export function PrepareLegion ; var i , b , veh , tmp , tmp2 , cameras , side , sr , depot , base ; begin
5515: LD_INT 0
5517: PPUSH
5518: PPUSH
5519: PPUSH
5520: PPUSH
5521: PPUSH
5522: PPUSH
5523: PPUSH
5524: PPUSH
5525: PPUSH
5526: PPUSH
5527: PPUSH
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 0 , 0 , legApe , 0 ) ;
5528: LD_INT 0
5530: PPUSH
5531: LD_INT 0
5533: PPUSH
5534: LD_INT 6
5536: PPUSH
5537: LD_INT 0
5539: PPUSH
5540: LD_INT 0
5542: PPUSH
5543: LD_INT 0
5545: PPUSH
5546: LD_INT 0
5548: PPUSH
5549: LD_INT 8
5551: PPUSH
5552: LD_INT 0
5554: PPUSH
5555: CALL 54321 0 9
// side := 8 ;
5559: LD_ADDR_VAR 0 8
5563: PUSH
5564: LD_INT 8
5566: ST_TO_ADDR
// tmp := AreaToList ( minesArea , 0 ) ;
5567: LD_ADDR_VAR 0 5
5571: PUSH
5572: LD_INT 20
5574: PPUSH
5575: LD_INT 0
5577: PPUSH
5578: CALL_OW 517
5582: ST_TO_ADDR
// if Difficulty > 2 then
5583: LD_OWVAR 67
5587: PUSH
5588: LD_INT 2
5590: GREATER
5591: IFFALSE 5735
// begin tmp2 := AreaToList ( minesArea2 , 0 ) ;
5593: LD_ADDR_VAR 0 6
5597: PUSH
5598: LD_INT 27
5600: PPUSH
5601: LD_INT 0
5603: PPUSH
5604: CALL_OW 517
5608: ST_TO_ADDR
// for i = 1 to tmp2 [ 1 ] do
5609: LD_ADDR_VAR 0 2
5613: PUSH
5614: DOUBLE
5615: LD_INT 1
5617: DEC
5618: ST_TO_ADDR
5619: LD_VAR 0 6
5623: PUSH
5624: LD_INT 1
5626: ARRAY
5627: PUSH
5628: FOR_TO
5629: IFFALSE 5733
// begin tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , tmp2 [ 1 ] [ i ] ) ;
5631: LD_ADDR_VAR 0 5
5635: PUSH
5636: LD_VAR 0 5
5640: PPUSH
5641: LD_INT 1
5643: PUSH
5644: LD_VAR 0 5
5648: PUSH
5649: LD_INT 1
5651: ARRAY
5652: PUSH
5653: LD_INT 1
5655: PLUS
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PPUSH
5661: LD_VAR 0 6
5665: PUSH
5666: LD_INT 1
5668: ARRAY
5669: PUSH
5670: LD_VAR 0 2
5674: ARRAY
5675: PPUSH
5676: CALL 26652 0 3
5680: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , tmp2 [ 2 ] [ i ] ) ;
5681: LD_ADDR_VAR 0 5
5685: PUSH
5686: LD_VAR 0 5
5690: PPUSH
5691: LD_INT 2
5693: PUSH
5694: LD_VAR 0 5
5698: PUSH
5699: LD_INT 2
5701: ARRAY
5702: PUSH
5703: LD_INT 1
5705: PLUS
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: PPUSH
5711: LD_VAR 0 6
5715: PUSH
5716: LD_INT 2
5718: ARRAY
5719: PUSH
5720: LD_VAR 0 2
5724: ARRAY
5725: PPUSH
5726: CALL 26652 0 3
5730: ST_TO_ADDR
// end ;
5731: GO 5628
5733: POP
5734: POP
// end ; if tmp then
5735: LD_VAR 0 5
5739: IFFALSE 5867
// begin for i = 1 to tmp [ 1 ] do
5741: LD_ADDR_VAR 0 2
5745: PUSH
5746: DOUBLE
5747: LD_INT 1
5749: DEC
5750: ST_TO_ADDR
5751: LD_VAR 0 5
5755: PUSH
5756: LD_INT 1
5758: ARRAY
5759: PUSH
5760: FOR_TO
5761: IFFALSE 5865
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side , 0 ) ;
5763: LD_VAR 0 5
5767: PUSH
5768: LD_INT 1
5770: ARRAY
5771: PUSH
5772: LD_VAR 0 2
5776: ARRAY
5777: PPUSH
5778: LD_VAR 0 5
5782: PUSH
5783: LD_INT 2
5785: ARRAY
5786: PUSH
5787: LD_VAR 0 2
5791: ARRAY
5792: PPUSH
5793: LD_VAR 0 8
5797: PPUSH
5798: LD_INT 0
5800: PPUSH
5801: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
5805: LD_ADDR_EXP 16
5809: PUSH
5810: LD_EXP 16
5814: PPUSH
5815: LD_EXP 16
5819: PUSH
5820: LD_INT 1
5822: PLUS
5823: PPUSH
5824: LD_VAR 0 5
5828: PUSH
5829: LD_INT 1
5831: ARRAY
5832: PUSH
5833: LD_VAR 0 2
5837: ARRAY
5838: PUSH
5839: LD_VAR 0 5
5843: PUSH
5844: LD_INT 2
5846: ARRAY
5847: PUSH
5848: LD_VAR 0 2
5852: ARRAY
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: PPUSH
5858: CALL_OW 2
5862: ST_TO_ADDR
// end ;
5863: GO 5760
5865: POP
5866: POP
// end ; cameras := [ [ 165 , 156 ] , [ 143 , 145 ] , [ 152 , 165 ] , [ 123 , 153 ] , [ 161 , 215 ] , [ 172 , 100 ] , [ 148 , 83 ] , [ 122 , 68 ] , [ 105 , 74 ] , [ 113 , 97 ] ] ;
5867: LD_ADDR_VAR 0 7
5871: PUSH
5872: LD_INT 165
5874: PUSH
5875: LD_INT 156
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: PUSH
5882: LD_INT 143
5884: PUSH
5885: LD_INT 145
5887: PUSH
5888: EMPTY
5889: LIST
5890: LIST
5891: PUSH
5892: LD_INT 152
5894: PUSH
5895: LD_INT 165
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: PUSH
5902: LD_INT 123
5904: PUSH
5905: LD_INT 153
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: LD_INT 161
5914: PUSH
5915: LD_INT 215
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: PUSH
5922: LD_INT 172
5924: PUSH
5925: LD_INT 100
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: PUSH
5932: LD_INT 148
5934: PUSH
5935: LD_INT 83
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: PUSH
5942: LD_INT 122
5944: PUSH
5945: LD_INT 68
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: PUSH
5952: LD_INT 105
5954: PUSH
5955: LD_INT 74
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: PUSH
5962: LD_INT 113
5964: PUSH
5965: LD_INT 97
5967: PUSH
5968: EMPTY
5969: LIST
5970: LIST
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: ST_TO_ADDR
// for i in cameras do
5984: LD_ADDR_VAR 0 2
5988: PUSH
5989: LD_VAR 0 7
5993: PUSH
5994: FOR_IN
5995: IFFALSE 6026
// HiddenCamera ( i [ 1 ] , i [ 2 ] , side ) ;
5997: LD_VAR 0 2
6001: PUSH
6002: LD_INT 1
6004: ARRAY
6005: PPUSH
6006: LD_VAR 0 2
6010: PUSH
6011: LD_INT 2
6013: ARRAY
6014: PPUSH
6015: LD_VAR 0 8
6019: PPUSH
6020: CALL_OW 244
6024: GO 5994
6026: POP
6027: POP
// tmp := [ [ 1 , 144 , 110 , 1 , 0 , 0 ] , [ 3 , 151 , 118 , 0 , 0 , 0 ] , [ 8 , 158 , 110 , 4 , 10 , 15 ] , [ 23 , 154 , 121 , 5 , 0 , 0 ] , [ 22 , 155 , 118 , 4 , 0 , 0 ] , [ 21 , 151 , 122 , 0 , 0 , 0 ] , [ 18 , 148 , 118 , 1 , 0 , 0 ] , [ 17 , 147 , 114 , 2 , 0 , 0 ] , [ 29 , 163 , 120 , 5 , 0 , 0 ] , [ 27 , 137 , 116 , 3 , 0 , 0 ] , [ 27 , 133 , 111 , 1 , 0 , 0 ] , [ 27 , 132 , 106 , 4 , 0 , 0 ] , [ 26 , 137 , 111 , 0 , 0 , 0 ] , [ 8 , 141 , 117 , 1 , 13 , 11 ] , [ 30 , 140 , 128 , 1 , 0 , 0 ] , [ 5 , 146 , 96 , 3 , 0 , 0 ] , [ 32 , 150 , 98 , 3 , 0 , 0 ] , [ 32 , 142 , 95 , 3 , 0 , 0 ] , [ 32 , 159 , 104 , 3 , 0 , 0 ] , [ 32 , 133 , 95 , 3 , 0 , 0 ] , [ 32 , 131 , 102 , 2 , 0 , 0 ] , [ 32 , 164 , 144 , 0 , 0 , 0 ] , [ 32 , 146 , 139 , 0 , 0 , 0 ] , [ 26 , 143 , 122 , 4 , 0 , 0 ] , [ 26 , 164 , 116 , 2 , 0 , 0 ] , ] ;
6028: LD_ADDR_VAR 0 5
6032: PUSH
6033: LD_INT 1
6035: PUSH
6036: LD_INT 144
6038: PUSH
6039: LD_INT 110
6041: PUSH
6042: LD_INT 1
6044: PUSH
6045: LD_INT 0
6047: PUSH
6048: LD_INT 0
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: PUSH
6059: LD_INT 3
6061: PUSH
6062: LD_INT 151
6064: PUSH
6065: LD_INT 118
6067: PUSH
6068: LD_INT 0
6070: PUSH
6071: LD_INT 0
6073: PUSH
6074: LD_INT 0
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: LIST
6084: PUSH
6085: LD_INT 8
6087: PUSH
6088: LD_INT 158
6090: PUSH
6091: LD_INT 110
6093: PUSH
6094: LD_INT 4
6096: PUSH
6097: LD_INT 10
6099: PUSH
6100: LD_INT 15
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: PUSH
6111: LD_INT 23
6113: PUSH
6114: LD_INT 154
6116: PUSH
6117: LD_INT 121
6119: PUSH
6120: LD_INT 5
6122: PUSH
6123: LD_INT 0
6125: PUSH
6126: LD_INT 0
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: PUSH
6137: LD_INT 22
6139: PUSH
6140: LD_INT 155
6142: PUSH
6143: LD_INT 118
6145: PUSH
6146: LD_INT 4
6148: PUSH
6149: LD_INT 0
6151: PUSH
6152: LD_INT 0
6154: PUSH
6155: EMPTY
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: PUSH
6163: LD_INT 21
6165: PUSH
6166: LD_INT 151
6168: PUSH
6169: LD_INT 122
6171: PUSH
6172: LD_INT 0
6174: PUSH
6175: LD_INT 0
6177: PUSH
6178: LD_INT 0
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: PUSH
6189: LD_INT 18
6191: PUSH
6192: LD_INT 148
6194: PUSH
6195: LD_INT 118
6197: PUSH
6198: LD_INT 1
6200: PUSH
6201: LD_INT 0
6203: PUSH
6204: LD_INT 0
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: PUSH
6215: LD_INT 17
6217: PUSH
6218: LD_INT 147
6220: PUSH
6221: LD_INT 114
6223: PUSH
6224: LD_INT 2
6226: PUSH
6227: LD_INT 0
6229: PUSH
6230: LD_INT 0
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: PUSH
6241: LD_INT 29
6243: PUSH
6244: LD_INT 163
6246: PUSH
6247: LD_INT 120
6249: PUSH
6250: LD_INT 5
6252: PUSH
6253: LD_INT 0
6255: PUSH
6256: LD_INT 0
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 27
6269: PUSH
6270: LD_INT 137
6272: PUSH
6273: LD_INT 116
6275: PUSH
6276: LD_INT 3
6278: PUSH
6279: LD_INT 0
6281: PUSH
6282: LD_INT 0
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: PUSH
6293: LD_INT 27
6295: PUSH
6296: LD_INT 133
6298: PUSH
6299: LD_INT 111
6301: PUSH
6302: LD_INT 1
6304: PUSH
6305: LD_INT 0
6307: PUSH
6308: LD_INT 0
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_INT 27
6321: PUSH
6322: LD_INT 132
6324: PUSH
6325: LD_INT 106
6327: PUSH
6328: LD_INT 4
6330: PUSH
6331: LD_INT 0
6333: PUSH
6334: LD_INT 0
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: PUSH
6345: LD_INT 26
6347: PUSH
6348: LD_INT 137
6350: PUSH
6351: LD_INT 111
6353: PUSH
6354: LD_INT 0
6356: PUSH
6357: LD_INT 0
6359: PUSH
6360: LD_INT 0
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: PUSH
6371: LD_INT 8
6373: PUSH
6374: LD_INT 141
6376: PUSH
6377: LD_INT 117
6379: PUSH
6380: LD_INT 1
6382: PUSH
6383: LD_INT 13
6385: PUSH
6386: LD_INT 11
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: PUSH
6397: LD_INT 30
6399: PUSH
6400: LD_INT 140
6402: PUSH
6403: LD_INT 128
6405: PUSH
6406: LD_INT 1
6408: PUSH
6409: LD_INT 0
6411: PUSH
6412: LD_INT 0
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: PUSH
6423: LD_INT 5
6425: PUSH
6426: LD_INT 146
6428: PUSH
6429: LD_INT 96
6431: PUSH
6432: LD_INT 3
6434: PUSH
6435: LD_INT 0
6437: PUSH
6438: LD_INT 0
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: PUSH
6449: LD_INT 32
6451: PUSH
6452: LD_INT 150
6454: PUSH
6455: LD_INT 98
6457: PUSH
6458: LD_INT 3
6460: PUSH
6461: LD_INT 0
6463: PUSH
6464: LD_INT 0
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: PUSH
6475: LD_INT 32
6477: PUSH
6478: LD_INT 142
6480: PUSH
6481: LD_INT 95
6483: PUSH
6484: LD_INT 3
6486: PUSH
6487: LD_INT 0
6489: PUSH
6490: LD_INT 0
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: PUSH
6501: LD_INT 32
6503: PUSH
6504: LD_INT 159
6506: PUSH
6507: LD_INT 104
6509: PUSH
6510: LD_INT 3
6512: PUSH
6513: LD_INT 0
6515: PUSH
6516: LD_INT 0
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: PUSH
6527: LD_INT 32
6529: PUSH
6530: LD_INT 133
6532: PUSH
6533: LD_INT 95
6535: PUSH
6536: LD_INT 3
6538: PUSH
6539: LD_INT 0
6541: PUSH
6542: LD_INT 0
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: PUSH
6553: LD_INT 32
6555: PUSH
6556: LD_INT 131
6558: PUSH
6559: LD_INT 102
6561: PUSH
6562: LD_INT 2
6564: PUSH
6565: LD_INT 0
6567: PUSH
6568: LD_INT 0
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: PUSH
6579: LD_INT 32
6581: PUSH
6582: LD_INT 164
6584: PUSH
6585: LD_INT 144
6587: PUSH
6588: LD_INT 0
6590: PUSH
6591: LD_INT 0
6593: PUSH
6594: LD_INT 0
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: PUSH
6605: LD_INT 32
6607: PUSH
6608: LD_INT 146
6610: PUSH
6611: LD_INT 139
6613: PUSH
6614: LD_INT 0
6616: PUSH
6617: LD_INT 0
6619: PUSH
6620: LD_INT 0
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: PUSH
6631: LD_INT 26
6633: PUSH
6634: LD_INT 143
6636: PUSH
6637: LD_INT 122
6639: PUSH
6640: LD_INT 4
6642: PUSH
6643: LD_INT 0
6645: PUSH
6646: LD_INT 0
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: PUSH
6657: LD_INT 26
6659: PUSH
6660: LD_INT 164
6662: PUSH
6663: LD_INT 116
6665: PUSH
6666: LD_INT 2
6668: PUSH
6669: LD_INT 0
6671: PUSH
6672: LD_INT 0
6674: PUSH
6675: EMPTY
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: ST_TO_ADDR
// for i in tmp do
6710: LD_ADDR_VAR 0 2
6714: PUSH
6715: LD_VAR 0 5
6719: PUSH
6720: FOR_IN
6721: IFFALSE 6952
// begin uc_side := side ;
6723: LD_ADDR_OWVAR 20
6727: PUSH
6728: LD_VAR 0 8
6732: ST_TO_ADDR
// uc_nation := nation_arabian ;
6733: LD_ADDR_OWVAR 21
6737: PUSH
6738: LD_INT 2
6740: ST_TO_ADDR
// bc_type := i [ 1 ] ;
6741: LD_ADDR_OWVAR 42
6745: PUSH
6746: LD_VAR 0 2
6750: PUSH
6751: LD_INT 1
6753: ARRAY
6754: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
6755: LD_ADDR_OWVAR 43
6759: PUSH
6760: LD_INT 5
6762: PPUSH
6763: LD_INT 6
6765: PPUSH
6766: CALL_OW 12
6770: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
6771: LD_ADDR_OWVAR 44
6775: PUSH
6776: LD_VAR 0 2
6780: PUSH
6781: LD_INT 5
6783: ARRAY
6784: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
6785: LD_ADDR_OWVAR 45
6789: PUSH
6790: LD_VAR 0 2
6794: PUSH
6795: LD_INT 6
6797: ARRAY
6798: ST_TO_ADDR
// sr := 0 ;
6799: LD_ADDR_VAR 0 9
6803: PUSH
6804: LD_INT 0
6806: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
6807: LD_VAR 0 2
6811: PUSH
6812: LD_INT 1
6814: ARRAY
6815: PUSH
6816: LD_INT 29
6818: EQUAL
6819: IFFALSE 6831
// sr := mat_oil else
6821: LD_ADDR_VAR 0 9
6825: PUSH
6826: LD_INT 2
6828: ST_TO_ADDR
6829: GO 6853
// if i [ 1 ] = b_siberite_mine then
6831: LD_VAR 0 2
6835: PUSH
6836: LD_INT 1
6838: ARRAY
6839: PUSH
6840: LD_INT 30
6842: EQUAL
6843: IFFALSE 6853
// sr := mat_siberit ;
6845: LD_ADDR_VAR 0 9
6849: PUSH
6850: LD_INT 3
6852: ST_TO_ADDR
// if sr then
6853: LD_VAR 0 9
6857: IFFALSE 6913
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
6859: LD_VAR 0 2
6863: PUSH
6864: LD_INT 2
6866: ARRAY
6867: PPUSH
6868: LD_VAR 0 2
6872: PUSH
6873: LD_INT 3
6875: ARRAY
6876: PPUSH
6877: LD_VAR 0 9
6881: PPUSH
6882: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
6886: LD_VAR 0 2
6890: PUSH
6891: LD_INT 2
6893: ARRAY
6894: PPUSH
6895: LD_VAR 0 2
6899: PUSH
6900: LD_INT 3
6902: ARRAY
6903: PPUSH
6904: LD_VAR 0 8
6908: PPUSH
6909: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
6913: LD_ADDR_VAR 0 3
6917: PUSH
6918: LD_VAR 0 2
6922: PUSH
6923: LD_INT 2
6925: ARRAY
6926: PPUSH
6927: LD_VAR 0 2
6931: PUSH
6932: LD_INT 3
6934: ARRAY
6935: PPUSH
6936: LD_VAR 0 2
6940: PUSH
6941: LD_INT 4
6943: ARRAY
6944: PPUSH
6945: CALL_OW 47
6949: ST_TO_ADDR
// end ;
6950: GO 6720
6952: POP
6953: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6954: LD_ADDR_VAR 0 10
6958: PUSH
6959: LD_INT 22
6961: PUSH
6962: LD_VAR 0 8
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: PUSH
6971: LD_INT 30
6973: PUSH
6974: LD_INT 1
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: PPUSH
6985: CALL_OW 69
6989: ST_TO_ADDR
// if not depot then
6990: LD_VAR 0 10
6994: NOT
6995: IFFALSE 6999
// exit ;
6997: GO 7245
// base := PrepareBase ( depot [ 1 ] , legBase , 0 , [ 7 , 8 , 10 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 14 , 6 , 6 , 5 ] ) ;
6999: LD_ADDR_VAR 0 11
7003: PUSH
7004: LD_VAR 0 10
7008: PUSH
7009: LD_INT 1
7011: ARRAY
7012: PPUSH
7013: LD_INT 6
7015: PPUSH
7016: LD_INT 0
7018: PPUSH
7019: LD_INT 7
7021: PUSH
7022: LD_INT 8
7024: PUSH
7025: LD_INT 10
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: LIST
7032: PUSH
7033: LD_OWVAR 67
7037: ARRAY
7038: PPUSH
7039: LD_INT 3000
7041: PUSH
7042: LD_INT 300
7044: PUSH
7045: LD_INT 100
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: LIST
7052: PPUSH
7053: LD_INT 14
7055: PUSH
7056: LD_INT 6
7058: PUSH
7059: LD_INT 6
7061: PUSH
7062: LD_INT 5
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: PPUSH
7071: CALL 29939 0 6
7075: ST_TO_ADDR
// if not base then
7076: LD_VAR 0 11
7080: NOT
7081: IFFALSE 7085
// exit ;
7083: GO 7245
// if Difficulty > 1 then
7085: LD_OWVAR 67
7089: PUSH
7090: LD_INT 1
7092: GREATER
7093: IFFALSE 7166
// begin InitHc ;
7095: CALL_OW 19
// PrepareHuman ( sex_male , class_sniper , [ 5 , 8 ] [ Difficulty - 1 ] ) ;
7099: LD_INT 1
7101: PPUSH
7102: LD_INT 5
7104: PPUSH
7105: LD_INT 5
7107: PUSH
7108: LD_INT 8
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: LD_OWVAR 67
7119: PUSH
7120: LD_INT 1
7122: MINUS
7123: ARRAY
7124: PPUSH
7125: CALL_OW 380
// for i = 1 to Difficulty do
7129: LD_ADDR_VAR 0 2
7133: PUSH
7134: DOUBLE
7135: LD_INT 1
7137: DEC
7138: ST_TO_ADDR
7139: LD_OWVAR 67
7143: PUSH
7144: FOR_TO
7145: IFFALSE 7164
// PlaceUnitArea ( CreateHuman , sniperGuardArea , false ) ;
7147: CALL_OW 44
7151: PPUSH
7152: LD_INT 24
7154: PPUSH
7155: LD_INT 0
7157: PPUSH
7158: CALL_OW 49
7162: GO 7144
7164: POP
7165: POP
// end ; mc_bases := Replace ( mc_bases , mc_leg , base ) ;
7166: LD_ADDR_EXP 36
7170: PUSH
7171: LD_EXP 36
7175: PPUSH
7176: LD_EXP 6
7180: PPUSH
7181: LD_VAR 0 11
7185: PPUSH
7186: CALL_OW 1
7190: ST_TO_ADDR
// hc_gallery := ru ;
7191: LD_ADDR_OWVAR 33
7195: PUSH
7196: LD_STRING ru
7198: ST_TO_ADDR
// hc_face_number := 44 ;
7199: LD_ADDR_OWVAR 34
7203: PUSH
7204: LD_INT 44
7206: ST_TO_ADDR
// hc_name := Robert Farmer ;
7207: LD_ADDR_OWVAR 26
7211: PUSH
7212: LD_STRING Robert Farmer
7214: ST_TO_ADDR
// hc_sex := sex_male ;
7215: LD_ADDR_OWVAR 27
7219: PUSH
7220: LD_INT 1
7222: ST_TO_ADDR
// hc_class := 1 ;
7223: LD_ADDR_OWVAR 28
7227: PUSH
7228: LD_INT 1
7230: ST_TO_ADDR
// Farmer := CreateHuman ;
7231: LD_ADDR_EXP 13
7235: PUSH
7236: CALL_OW 44
7240: ST_TO_ADDR
// InitHc ;
7241: CALL_OW 19
// end ;
7245: LD_VAR 0 1
7249: RET
// export function PrepareAmericans ; var i , b , tmp , side , sr , base , depot ; begin
7250: LD_INT 0
7252: PPUSH
7253: PPUSH
7254: PPUSH
7255: PPUSH
7256: PPUSH
7257: PPUSH
7258: PPUSH
7259: PPUSH
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , amerApe , 0 ) ;
7260: LD_INT 0
7262: PPUSH
7263: LD_INT 0
7265: PPUSH
7266: LD_INT 4
7268: PPUSH
7269: LD_INT 0
7271: PPUSH
7272: LD_INT 0
7274: PPUSH
7275: LD_INT 0
7277: PPUSH
7278: LD_INT 0
7280: PPUSH
7281: LD_INT 10
7283: PPUSH
7284: LD_INT 0
7286: PPUSH
7287: CALL 54321 0 9
// side := 4 ;
7291: LD_ADDR_VAR 0 5
7295: PUSH
7296: LD_INT 4
7298: ST_TO_ADDR
// tmp := [ [ 1 , 144 , 18 , 4 , 0 , 0 ] , [ 3 , 137 , 8 , 4 , 0 , 0 ] , [ 22 , 141 , 8 , 4 , 0 , 0 ] , [ 25 , 137 , 5 , 3 , 0 , 0 ] , [ 18 , 137 , 12 , 0 , 0 , 0 ] , [ 17 , 133 , 4 , 2 , 0 , 0 ] , [ 16 , 140 , 11 , 5 , 0 , 0 ] , [ 8 , 149 , 26 , 4 , 10 , 15 ] , [ 8 , 142 , 26 , 1 , 11 , 12 ] , [ 27 , 153 , 32 , 5 , 0 , 0 ] , [ 27 , 145 , 32 , 3 , 0 , 0 ] , [ 27 , 138 , 2 , 4 , 0 , 0 ] , [ 27 , 144 , 13 , 0 , 0 , 0 ] , [ 26 , 124 , 2 , 4 , 0 , 0 ] , [ 26 , 121 , 2 , 2 , 0 , 0 ] , [ 26 , 118 , 2 , 1 , 0 , 0 ] , [ 29 , 159 , 47 , 2 , 0 , 0 ] , [ 32 , 146 , 41 , 0 , 0 , 0 ] , [ 33 , 136 , 37 , 0 , 0 , 0 ] , [ 33 , 132 , 34 , 0 , 0 , 0 ] , [ 36 , 124 , 7 , 1 , 0 , 0 ] , [ 5 , 124 , 19 , 0 , 0 , 0 ] , [ 32 , 127 , 23 , 0 , 0 , 0 ] ] ;
7299: LD_ADDR_VAR 0 4
7303: PUSH
7304: LD_INT 1
7306: PUSH
7307: LD_INT 144
7309: PUSH
7310: LD_INT 18
7312: PUSH
7313: LD_INT 4
7315: PUSH
7316: LD_INT 0
7318: PUSH
7319: LD_INT 0
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: PUSH
7330: LD_INT 3
7332: PUSH
7333: LD_INT 137
7335: PUSH
7336: LD_INT 8
7338: PUSH
7339: LD_INT 4
7341: PUSH
7342: LD_INT 0
7344: PUSH
7345: LD_INT 0
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: PUSH
7356: LD_INT 22
7358: PUSH
7359: LD_INT 141
7361: PUSH
7362: LD_INT 8
7364: PUSH
7365: LD_INT 4
7367: PUSH
7368: LD_INT 0
7370: PUSH
7371: LD_INT 0
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: PUSH
7382: LD_INT 25
7384: PUSH
7385: LD_INT 137
7387: PUSH
7388: LD_INT 5
7390: PUSH
7391: LD_INT 3
7393: PUSH
7394: LD_INT 0
7396: PUSH
7397: LD_INT 0
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: PUSH
7408: LD_INT 18
7410: PUSH
7411: LD_INT 137
7413: PUSH
7414: LD_INT 12
7416: PUSH
7417: LD_INT 0
7419: PUSH
7420: LD_INT 0
7422: PUSH
7423: LD_INT 0
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: PUSH
7434: LD_INT 17
7436: PUSH
7437: LD_INT 133
7439: PUSH
7440: LD_INT 4
7442: PUSH
7443: LD_INT 2
7445: PUSH
7446: LD_INT 0
7448: PUSH
7449: LD_INT 0
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: PUSH
7460: LD_INT 16
7462: PUSH
7463: LD_INT 140
7465: PUSH
7466: LD_INT 11
7468: PUSH
7469: LD_INT 5
7471: PUSH
7472: LD_INT 0
7474: PUSH
7475: LD_INT 0
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: PUSH
7486: LD_INT 8
7488: PUSH
7489: LD_INT 149
7491: PUSH
7492: LD_INT 26
7494: PUSH
7495: LD_INT 4
7497: PUSH
7498: LD_INT 10
7500: PUSH
7501: LD_INT 15
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: PUSH
7512: LD_INT 8
7514: PUSH
7515: LD_INT 142
7517: PUSH
7518: LD_INT 26
7520: PUSH
7521: LD_INT 1
7523: PUSH
7524: LD_INT 11
7526: PUSH
7527: LD_INT 12
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: PUSH
7538: LD_INT 27
7540: PUSH
7541: LD_INT 153
7543: PUSH
7544: LD_INT 32
7546: PUSH
7547: LD_INT 5
7549: PUSH
7550: LD_INT 0
7552: PUSH
7553: LD_INT 0
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 27
7566: PUSH
7567: LD_INT 145
7569: PUSH
7570: LD_INT 32
7572: PUSH
7573: LD_INT 3
7575: PUSH
7576: LD_INT 0
7578: PUSH
7579: LD_INT 0
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 27
7592: PUSH
7593: LD_INT 138
7595: PUSH
7596: LD_INT 2
7598: PUSH
7599: LD_INT 4
7601: PUSH
7602: LD_INT 0
7604: PUSH
7605: LD_INT 0
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: PUSH
7616: LD_INT 27
7618: PUSH
7619: LD_INT 144
7621: PUSH
7622: LD_INT 13
7624: PUSH
7625: LD_INT 0
7627: PUSH
7628: LD_INT 0
7630: PUSH
7631: LD_INT 0
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: PUSH
7642: LD_INT 26
7644: PUSH
7645: LD_INT 124
7647: PUSH
7648: LD_INT 2
7650: PUSH
7651: LD_INT 4
7653: PUSH
7654: LD_INT 0
7656: PUSH
7657: LD_INT 0
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: PUSH
7668: LD_INT 26
7670: PUSH
7671: LD_INT 121
7673: PUSH
7674: LD_INT 2
7676: PUSH
7677: LD_INT 2
7679: PUSH
7680: LD_INT 0
7682: PUSH
7683: LD_INT 0
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: PUSH
7694: LD_INT 26
7696: PUSH
7697: LD_INT 118
7699: PUSH
7700: LD_INT 2
7702: PUSH
7703: LD_INT 1
7705: PUSH
7706: LD_INT 0
7708: PUSH
7709: LD_INT 0
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: PUSH
7720: LD_INT 29
7722: PUSH
7723: LD_INT 159
7725: PUSH
7726: LD_INT 47
7728: PUSH
7729: LD_INT 2
7731: PUSH
7732: LD_INT 0
7734: PUSH
7735: LD_INT 0
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: PUSH
7746: LD_INT 32
7748: PUSH
7749: LD_INT 146
7751: PUSH
7752: LD_INT 41
7754: PUSH
7755: LD_INT 0
7757: PUSH
7758: LD_INT 0
7760: PUSH
7761: LD_INT 0
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: PUSH
7772: LD_INT 33
7774: PUSH
7775: LD_INT 136
7777: PUSH
7778: LD_INT 37
7780: PUSH
7781: LD_INT 0
7783: PUSH
7784: LD_INT 0
7786: PUSH
7787: LD_INT 0
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: PUSH
7798: LD_INT 33
7800: PUSH
7801: LD_INT 132
7803: PUSH
7804: LD_INT 34
7806: PUSH
7807: LD_INT 0
7809: PUSH
7810: LD_INT 0
7812: PUSH
7813: LD_INT 0
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: PUSH
7824: LD_INT 36
7826: PUSH
7827: LD_INT 124
7829: PUSH
7830: LD_INT 7
7832: PUSH
7833: LD_INT 1
7835: PUSH
7836: LD_INT 0
7838: PUSH
7839: LD_INT 0
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: PUSH
7850: LD_INT 5
7852: PUSH
7853: LD_INT 124
7855: PUSH
7856: LD_INT 19
7858: PUSH
7859: LD_INT 0
7861: PUSH
7862: LD_INT 0
7864: PUSH
7865: LD_INT 0
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: PUSH
7876: LD_INT 32
7878: PUSH
7879: LD_INT 127
7881: PUSH
7882: LD_INT 23
7884: PUSH
7885: LD_INT 0
7887: PUSH
7888: LD_INT 0
7890: PUSH
7891: LD_INT 0
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: ST_TO_ADDR
// for i in tmp do
7927: LD_ADDR_VAR 0 2
7931: PUSH
7932: LD_VAR 0 4
7936: PUSH
7937: FOR_IN
7938: IFFALSE 8169
// begin uc_side := side ;
7940: LD_ADDR_OWVAR 20
7944: PUSH
7945: LD_VAR 0 5
7949: ST_TO_ADDR
// uc_nation := nation_american ;
7950: LD_ADDR_OWVAR 21
7954: PUSH
7955: LD_INT 1
7957: ST_TO_ADDR
// bc_type := i [ 1 ] ;
7958: LD_ADDR_OWVAR 42
7962: PUSH
7963: LD_VAR 0 2
7967: PUSH
7968: LD_INT 1
7970: ARRAY
7971: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
7972: LD_ADDR_OWVAR 43
7976: PUSH
7977: LD_INT 5
7979: PPUSH
7980: LD_INT 6
7982: PPUSH
7983: CALL_OW 12
7987: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
7988: LD_ADDR_OWVAR 44
7992: PUSH
7993: LD_VAR 0 2
7997: PUSH
7998: LD_INT 5
8000: ARRAY
8001: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
8002: LD_ADDR_OWVAR 45
8006: PUSH
8007: LD_VAR 0 2
8011: PUSH
8012: LD_INT 6
8014: ARRAY
8015: ST_TO_ADDR
// sr := 0 ;
8016: LD_ADDR_VAR 0 6
8020: PUSH
8021: LD_INT 0
8023: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
8024: LD_VAR 0 2
8028: PUSH
8029: LD_INT 1
8031: ARRAY
8032: PUSH
8033: LD_INT 29
8035: EQUAL
8036: IFFALSE 8048
// sr := mat_oil else
8038: LD_ADDR_VAR 0 6
8042: PUSH
8043: LD_INT 2
8045: ST_TO_ADDR
8046: GO 8070
// if i [ 1 ] = b_siberite_mine then
8048: LD_VAR 0 2
8052: PUSH
8053: LD_INT 1
8055: ARRAY
8056: PUSH
8057: LD_INT 30
8059: EQUAL
8060: IFFALSE 8070
// sr := mat_siberit ;
8062: LD_ADDR_VAR 0 6
8066: PUSH
8067: LD_INT 3
8069: ST_TO_ADDR
// if sr then
8070: LD_VAR 0 6
8074: IFFALSE 8130
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
8076: LD_VAR 0 2
8080: PUSH
8081: LD_INT 2
8083: ARRAY
8084: PPUSH
8085: LD_VAR 0 2
8089: PUSH
8090: LD_INT 3
8092: ARRAY
8093: PPUSH
8094: LD_VAR 0 6
8098: PPUSH
8099: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
8103: LD_VAR 0 2
8107: PUSH
8108: LD_INT 2
8110: ARRAY
8111: PPUSH
8112: LD_VAR 0 2
8116: PUSH
8117: LD_INT 3
8119: ARRAY
8120: PPUSH
8121: LD_VAR 0 5
8125: PPUSH
8126: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
8130: LD_ADDR_VAR 0 3
8134: PUSH
8135: LD_VAR 0 2
8139: PUSH
8140: LD_INT 2
8142: ARRAY
8143: PPUSH
8144: LD_VAR 0 2
8148: PUSH
8149: LD_INT 3
8151: ARRAY
8152: PPUSH
8153: LD_VAR 0 2
8157: PUSH
8158: LD_INT 4
8160: ARRAY
8161: PPUSH
8162: CALL_OW 47
8166: ST_TO_ADDR
// end ;
8167: GO 7937
8169: POP
8170: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
8171: LD_ADDR_VAR 0 8
8175: PUSH
8176: LD_INT 22
8178: PUSH
8179: LD_VAR 0 5
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: PUSH
8188: LD_INT 30
8190: PUSH
8191: LD_INT 1
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: PPUSH
8202: CALL_OW 69
8206: ST_TO_ADDR
// if not depot then
8207: LD_VAR 0 8
8211: NOT
8212: IFFALSE 8216
// exit ;
8214: GO 8488
// base := PrepareBase ( depot [ 1 ] , amerBase , theta3 , [ 8 , 7 , 6 ] [ Difficulty ] , [ [ 2500 , 2000 , 1750 ] [ Difficulty ] , [ 300 , 250 , 200 ] [ Difficulty ] , [ 80 , 60 , 50 ] [ Difficulty ] ] , [ 7 , 6 , 5 , 5 ] ) ;
8216: LD_ADDR_VAR 0 7
8220: PUSH
8221: LD_VAR 0 8
8225: PUSH
8226: LD_INT 1
8228: ARRAY
8229: PPUSH
8230: LD_INT 3
8232: PPUSH
8233: LD_STRING theta3
8235: PPUSH
8236: LD_INT 8
8238: PUSH
8239: LD_INT 7
8241: PUSH
8242: LD_INT 6
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: LIST
8249: PUSH
8250: LD_OWVAR 67
8254: ARRAY
8255: PPUSH
8256: LD_INT 2500
8258: PUSH
8259: LD_INT 2000
8261: PUSH
8262: LD_INT 1750
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: LIST
8269: PUSH
8270: LD_OWVAR 67
8274: ARRAY
8275: PUSH
8276: LD_INT 300
8278: PUSH
8279: LD_INT 250
8281: PUSH
8282: LD_INT 200
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: LIST
8289: PUSH
8290: LD_OWVAR 67
8294: ARRAY
8295: PUSH
8296: LD_INT 80
8298: PUSH
8299: LD_INT 60
8301: PUSH
8302: LD_INT 50
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: LIST
8309: PUSH
8310: LD_OWVAR 67
8314: ARRAY
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: PPUSH
8321: LD_INT 7
8323: PUSH
8324: LD_INT 6
8326: PUSH
8327: LD_INT 5
8329: PUSH
8330: LD_INT 5
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL 29939 0 6
8343: ST_TO_ADDR
// if not base then
8344: LD_VAR 0 7
8348: NOT
8349: IFFALSE 8353
// exit ;
8351: GO 8488
// mc_bases := Replace ( mc_bases , mc_amer , base ) ;
8353: LD_ADDR_EXP 36
8357: PUSH
8358: LD_EXP 36
8362: PPUSH
8363: LD_EXP 5
8367: PPUSH
8368: LD_VAR 0 7
8372: PPUSH
8373: CALL_OW 1
8377: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
8378: LD_INT 1
8380: PPUSH
8381: LD_INT 1
8383: PPUSH
8384: LD_INT 7
8386: PPUSH
8387: CALL_OW 380
// allyCommander := CreateHuman ;
8391: LD_ADDR_EXP 11
8395: PUSH
8396: CALL_OW 44
8400: ST_TO_ADDR
// PlaceUnitXY ( allyCommander , 139 , 15 , false ) ;
8401: LD_EXP 11
8405: PPUSH
8406: LD_INT 139
8408: PPUSH
8409: LD_INT 15
8411: PPUSH
8412: LD_INT 0
8414: PPUSH
8415: CALL_OW 48
// ComTurnXY ( allyCommander , 137 , 15 ) ;
8419: LD_EXP 11
8423: PPUSH
8424: LD_INT 137
8426: PPUSH
8427: LD_INT 15
8429: PPUSH
8430: CALL_OW 118
// hc_gallery := us ;
8434: LD_ADDR_OWVAR 33
8438: PUSH
8439: LD_STRING us
8441: ST_TO_ADDR
// hc_face_number := 7 ;
8442: LD_ADDR_OWVAR 34
8446: PUSH
8447: LD_INT 7
8449: ST_TO_ADDR
// hc_name := Arthur Powell ;
8450: LD_ADDR_OWVAR 26
8454: PUSH
8455: LD_STRING Arthur Powell
8457: ST_TO_ADDR
// hc_sex := sex_male ;
8458: LD_ADDR_OWVAR 27
8462: PUSH
8463: LD_INT 1
8465: ST_TO_ADDR
// hc_class := 1 ;
8466: LD_ADDR_OWVAR 28
8470: PUSH
8471: LD_INT 1
8473: ST_TO_ADDR
// Powell := CreateHuman ;
8474: LD_ADDR_EXP 12
8478: PUSH
8479: CALL_OW 44
8483: ST_TO_ADDR
// InitHc ;
8484: CALL_OW 19
// end ;
8488: LD_VAR 0 1
8492: RET
// export function PreparePlayer ; var i , side , techs , tanks , cl , chassis , engines , weapons ; begin
8493: LD_INT 0
8495: PPUSH
8496: PPUSH
8497: PPUSH
8498: PPUSH
8499: PPUSH
8500: PPUSH
8501: PPUSH
8502: PPUSH
8503: PPUSH
// side := 1 ;
8504: LD_ADDR_VAR 0 3
8508: PUSH
8509: LD_INT 1
8511: ST_TO_ADDR
// result := [ [ ] , [ ] ] ;
8512: LD_ADDR_VAR 0 1
8516: PUSH
8517: EMPTY
8518: PUSH
8519: EMPTY
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: ST_TO_ADDR
// uc_side := side ;
8525: LD_ADDR_OWVAR 20
8529: PUSH
8530: LD_VAR 0 3
8534: ST_TO_ADDR
// uc_nation := nation_american ;
8535: LD_ADDR_OWVAR 21
8539: PUSH
8540: LD_INT 1
8542: ST_TO_ADDR
// InitHc ;
8543: CALL_OW 19
// InitVc ;
8547: CALL_OW 20
// hc_importance := 0 ;
8551: LD_ADDR_OWVAR 32
8555: PUSH
8556: LD_INT 0
8558: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked ] ;
8559: LD_ADDR_VAR 0 7
8563: PUSH
8564: LD_INT 2
8566: PUSH
8567: LD_INT 3
8569: PUSH
8570: LD_INT 3
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: LIST
8577: ST_TO_ADDR
// if commander = 2 then
8578: LD_EXP 25
8582: PUSH
8583: LD_INT 2
8585: EQUAL
8586: IFFALSE 8607
// chassis := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] ;
8588: LD_ADDR_VAR 0 7
8592: PUSH
8593: LD_INT 3
8595: PUSH
8596: LD_INT 4
8598: PUSH
8599: LD_INT 4
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: LIST
8606: ST_TO_ADDR
// if commander = 3 then
8607: LD_EXP 25
8611: PUSH
8612: LD_INT 3
8614: EQUAL
8615: IFFALSE 8636
// chassis := [ us_medium_wheeled , us_morphling , us_morphling ] ;
8617: LD_ADDR_VAR 0 7
8621: PUSH
8622: LD_INT 2
8624: PUSH
8625: LD_INT 5
8627: PUSH
8628: LD_INT 5
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: LIST
8635: ST_TO_ADDR
// engines := [ engine_solar , engine_solar , engine_combustion ] ;
8636: LD_ADDR_VAR 0 8
8640: PUSH
8641: LD_INT 2
8643: PUSH
8644: LD_INT 2
8646: PUSH
8647: LD_INT 1
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: LIST
8654: ST_TO_ADDR
// if commander = 2 then
8655: LD_EXP 25
8659: PUSH
8660: LD_INT 2
8662: EQUAL
8663: IFFALSE 8684
// engines := [ engine_combustion , engine_combustion , engine_siberite ] ;
8665: LD_ADDR_VAR 0 8
8669: PUSH
8670: LD_INT 1
8672: PUSH
8673: LD_INT 1
8675: PUSH
8676: LD_INT 3
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: LIST
8683: ST_TO_ADDR
// if commander = 3 then
8684: LD_EXP 25
8688: PUSH
8689: LD_INT 3
8691: EQUAL
8692: IFFALSE 8713
// engines := [ engine_siberite , engine_siberite , engine_combustion ] ;
8694: LD_ADDR_VAR 0 8
8698: PUSH
8699: LD_INT 3
8701: PUSH
8702: LD_INT 3
8704: PUSH
8705: LD_INT 1
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: LIST
8712: ST_TO_ADDR
// weapons := [ us_double_gun , us_light_gun , us_gatling_gun ] ;
8713: LD_ADDR_VAR 0 9
8717: PUSH
8718: LD_INT 5
8720: PUSH
8721: LD_INT 3
8723: PUSH
8724: LD_INT 4
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: LIST
8731: ST_TO_ADDR
// if commander = 2 then
8732: LD_EXP 25
8736: PUSH
8737: LD_INT 2
8739: EQUAL
8740: IFFALSE 8761
// weapons := [ us_rocket_launcher , us_double_gun , us_heavy_gun ] ;
8742: LD_ADDR_VAR 0 9
8746: PUSH
8747: LD_INT 7
8749: PUSH
8750: LD_INT 5
8752: PUSH
8753: LD_INT 6
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: LIST
8760: ST_TO_ADDR
// if commander = 3 then
8761: LD_EXP 25
8765: PUSH
8766: LD_INT 3
8768: EQUAL
8769: IFFALSE 8790
// weapons := [ us_laser , us_double_laser , us_rocket_launcher ] ;
8771: LD_ADDR_VAR 0 9
8775: PUSH
8776: LD_INT 9
8778: PUSH
8779: LD_INT 10
8781: PUSH
8782: LD_INT 7
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: LIST
8789: ST_TO_ADDR
// tanks := [ 5 , 5 , 4 ] [ Difficulty ] ;
8790: LD_ADDR_VAR 0 5
8794: PUSH
8795: LD_INT 5
8797: PUSH
8798: LD_INT 5
8800: PUSH
8801: LD_INT 4
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: LIST
8808: PUSH
8809: LD_OWVAR 67
8813: ARRAY
8814: ST_TO_ADDR
// if commander = 2 then
8815: LD_EXP 25
8819: PUSH
8820: LD_INT 2
8822: EQUAL
8823: IFFALSE 8839
// tanks := tanks + 3 ;
8825: LD_ADDR_VAR 0 5
8829: PUSH
8830: LD_VAR 0 5
8834: PUSH
8835: LD_INT 3
8837: PLUS
8838: ST_TO_ADDR
// for i = 1 to tanks do
8839: LD_ADDR_VAR 0 2
8843: PUSH
8844: DOUBLE
8845: LD_INT 1
8847: DEC
8848: ST_TO_ADDR
8849: LD_VAR 0 5
8853: PUSH
8854: FOR_TO
8855: IFFALSE 8965
// begin PrepareVehicle ( chassis [ i mod 3 + 1 ] , engines [ rand ( 1 , 3 ) ] , control_manual , weapons [ i mod 3 + 1 ] , rand ( 60 , 70 ) ) ;
8857: LD_VAR 0 7
8861: PUSH
8862: LD_VAR 0 2
8866: PUSH
8867: LD_INT 3
8869: MOD
8870: PUSH
8871: LD_INT 1
8873: PLUS
8874: ARRAY
8875: PPUSH
8876: LD_VAR 0 8
8880: PUSH
8881: LD_INT 1
8883: PPUSH
8884: LD_INT 3
8886: PPUSH
8887: CALL_OW 12
8891: ARRAY
8892: PPUSH
8893: LD_INT 1
8895: PPUSH
8896: LD_VAR 0 9
8900: PUSH
8901: LD_VAR 0 2
8905: PUSH
8906: LD_INT 3
8908: MOD
8909: PUSH
8910: LD_INT 1
8912: PLUS
8913: ARRAY
8914: PPUSH
8915: LD_INT 60
8917: PPUSH
8918: LD_INT 70
8920: PPUSH
8921: CALL_OW 12
8925: PPUSH
8926: CALL 26530 0 5
// result := Replace ( result , 1 , result [ 1 ] ^ CreateVehicle ) ;
8930: LD_ADDR_VAR 0 1
8934: PUSH
8935: LD_VAR 0 1
8939: PPUSH
8940: LD_INT 1
8942: PPUSH
8943: LD_VAR 0 1
8947: PUSH
8948: LD_INT 1
8950: ARRAY
8951: PUSH
8952: CALL_OW 45
8956: ADD
8957: PPUSH
8958: CALL_OW 1
8962: ST_TO_ADDR
// end ;
8963: GO 8854
8965: POP
8966: POP
// cl := 1 ;
8967: LD_ADDR_VAR 0 6
8971: PUSH
8972: LD_INT 1
8974: ST_TO_ADDR
// for i = 1 to 10 do
8975: LD_ADDR_VAR 0 2
8979: PUSH
8980: DOUBLE
8981: LD_INT 1
8983: DEC
8984: ST_TO_ADDR
8985: LD_INT 10
8987: PUSH
8988: FOR_TO
8989: IFFALSE 9104
// begin if i mod 4 = 0 then
8991: LD_VAR 0 2
8995: PUSH
8996: LD_INT 4
8998: MOD
8999: PUSH
9000: LD_INT 0
9002: EQUAL
9003: IFFALSE 9019
// cl := cl + 1 ;
9005: LD_ADDR_VAR 0 6
9009: PUSH
9010: LD_VAR 0 6
9014: PUSH
9015: LD_INT 1
9017: PLUS
9018: ST_TO_ADDR
// if cl = 2 then
9019: LD_VAR 0 6
9023: PUSH
9024: LD_INT 2
9026: EQUAL
9027: IFFALSE 9037
// cl := 3 ;
9029: LD_ADDR_VAR 0 6
9033: PUSH
9034: LD_INT 3
9036: ST_TO_ADDR
// PrepareHuman ( false , cl , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
9037: LD_INT 0
9039: PPUSH
9040: LD_VAR 0 6
9044: PPUSH
9045: LD_INT 6
9047: PUSH
9048: LD_INT 6
9050: PUSH
9051: LD_INT 5
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: LIST
9058: PUSH
9059: LD_OWVAR 67
9063: ARRAY
9064: PPUSH
9065: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9069: LD_ADDR_VAR 0 1
9073: PUSH
9074: LD_VAR 0 1
9078: PPUSH
9079: LD_INT 2
9081: PPUSH
9082: LD_VAR 0 1
9086: PUSH
9087: LD_INT 2
9089: ARRAY
9090: PUSH
9091: CALL_OW 44
9095: ADD
9096: PPUSH
9097: CALL_OW 1
9101: ST_TO_ADDR
// end ;
9102: GO 8988
9104: POP
9105: POP
// if commander = 1 then
9106: LD_EXP 25
9110: PUSH
9111: LD_INT 1
9113: EQUAL
9114: IFFALSE 9182
// for i = 1 to 4 do
9116: LD_ADDR_VAR 0 2
9120: PUSH
9121: DOUBLE
9122: LD_INT 1
9124: DEC
9125: ST_TO_ADDR
9126: LD_INT 4
9128: PUSH
9129: FOR_TO
9130: IFFALSE 9180
// begin PrepareHuman ( false , class_soldier , 8 ) ;
9132: LD_INT 0
9134: PPUSH
9135: LD_INT 1
9137: PPUSH
9138: LD_INT 8
9140: PPUSH
9141: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9145: LD_ADDR_VAR 0 1
9149: PUSH
9150: LD_VAR 0 1
9154: PPUSH
9155: LD_INT 2
9157: PPUSH
9158: LD_VAR 0 1
9162: PUSH
9163: LD_INT 2
9165: ARRAY
9166: PUSH
9167: CALL_OW 44
9171: ADD
9172: PPUSH
9173: CALL_OW 1
9177: ST_TO_ADDR
// end ;
9178: GO 9129
9180: POP
9181: POP
// techs := [ ] ;
9182: LD_ADDR_VAR 0 4
9186: PUSH
9187: EMPTY
9188: ST_TO_ADDR
// if commander = 1 then
9189: LD_EXP 25
9193: PUSH
9194: LD_INT 1
9196: EQUAL
9197: IFFALSE 9222
// techs := [ tech_weap1 , tech_weap2 , tech_weap3 , tech_lasSight ] ;
9199: LD_ADDR_VAR 0 4
9203: PUSH
9204: LD_INT 51
9206: PUSH
9207: LD_INT 52
9209: PUSH
9210: LD_INT 53
9212: PUSH
9213: LD_INT 12
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: ST_TO_ADDR
// if commander = 2 then
9222: LD_EXP 25
9226: PUSH
9227: LD_INT 2
9229: EQUAL
9230: IFFALSE 9267
// techs := [ tech_tech1 , tech_oilEng , tech_oilPow , tech_solEng , tech_solPow , tech_opto1 , tech_radar ] ;
9232: LD_ADDR_VAR 0 4
9236: PUSH
9237: LD_INT 48
9239: PUSH
9240: LD_INT 47
9242: PUSH
9243: LD_INT 46
9245: PUSH
9246: LD_INT 45
9248: PUSH
9249: LD_INT 35
9251: PUSH
9252: LD_INT 60
9254: PUSH
9255: LD_INT 6
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: ST_TO_ADDR
// if commander = 3 then
9267: LD_EXP 25
9271: PUSH
9272: LD_INT 3
9274: EQUAL
9275: IFFALSE 9324
// techs := [ tech_advAI , tech_advchassis , tech_ai , tech_comp1 , tech_comp2 , tech_oilEng , tech_oilPow , tech_weap1 , tech_gatling , tech_gun ] ;
9277: LD_ADDR_VAR 0 4
9281: PUSH
9282: LD_INT 27
9284: PUSH
9285: LD_INT 36
9287: PUSH
9288: LD_INT 32
9290: PUSH
9291: LD_INT 57
9293: PUSH
9294: LD_INT 58
9296: PUSH
9297: LD_INT 47
9299: PUSH
9300: LD_INT 46
9302: PUSH
9303: LD_INT 51
9305: PUSH
9306: LD_INT 69
9308: PUSH
9309: LD_INT 39
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: ST_TO_ADDR
// if techs then
9324: LD_VAR 0 4
9328: IFFALSE 9362
// for i in techs do
9330: LD_ADDR_VAR 0 2
9334: PUSH
9335: LD_VAR 0 4
9339: PUSH
9340: FOR_IN
9341: IFFALSE 9360
// SetTech ( i , 1 , state_researched ) ;
9343: LD_VAR 0 2
9347: PPUSH
9348: LD_INT 1
9350: PPUSH
9351: LD_INT 2
9353: PPUSH
9354: CALL_OW 322
9358: GO 9340
9360: POP
9361: POP
// hc_gallery := skirmish ;
9362: LD_ADDR_OWVAR 33
9366: PUSH
9367: LD_STRING skirmish
9369: ST_TO_ADDR
// hc_face_number := commander ;
9370: LD_ADDR_OWVAR 34
9374: PUSH
9375: LD_EXP 25
9379: ST_TO_ADDR
// hc_importance := 100 ;
9380: LD_ADDR_OWVAR 32
9384: PUSH
9385: LD_INT 100
9387: ST_TO_ADDR
// case commander of 1 :
9388: LD_EXP 25
9392: PUSH
9393: LD_INT 1
9395: DOUBLE
9396: EQUAL
9397: IFTRUE 9401
9399: GO 9425
9401: POP
// begin hc_name := Jeff Ironside ;
9402: LD_ADDR_OWVAR 26
9406: PUSH
9407: LD_STRING Jeff Ironside
9409: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
9410: LD_INT 1
9412: PPUSH
9413: LD_INT 1
9415: PPUSH
9416: LD_INT 7
9418: PPUSH
9419: CALL_OW 380
// end ; 2 :
9423: GO 9490
9425: LD_INT 2
9427: DOUBLE
9428: EQUAL
9429: IFTRUE 9433
9431: GO 9457
9433: POP
// begin hc_name := Paul Johnson ;
9434: LD_ADDR_OWVAR 26
9438: PUSH
9439: LD_STRING Paul Johnson
9441: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 7 ) ;
9442: LD_INT 1
9444: PPUSH
9445: LD_INT 3
9447: PPUSH
9448: LD_INT 7
9450: PPUSH
9451: CALL_OW 380
// end ; 3 :
9455: GO 9490
9457: LD_INT 3
9459: DOUBLE
9460: EQUAL
9461: IFTRUE 9465
9463: GO 9489
9465: POP
// begin hc_name := Lisa Stuart ;
9466: LD_ADDR_OWVAR 26
9470: PUSH
9471: LD_STRING Lisa Stuart
9473: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 7 ) ;
9474: LD_INT 2
9476: PPUSH
9477: LD_INT 4
9479: PPUSH
9480: LD_INT 7
9482: PPUSH
9483: CALL_OW 380
// end ; end ;
9487: GO 9490
9489: POP
// playerCommander := CreateHuman ;
9490: LD_ADDR_EXP 9
9494: PUSH
9495: CALL_OW 44
9499: ST_TO_ADDR
// hc_importance := 0 ;
9500: LD_ADDR_OWVAR 32
9504: PUSH
9505: LD_INT 0
9507: ST_TO_ADDR
// hc_gallery :=  ;
9508: LD_ADDR_OWVAR 33
9512: PUSH
9513: LD_STRING 
9515: ST_TO_ADDR
// result := Replace ( result , 2 , result [ 2 ] ^ playerCommander ) ;
9516: LD_ADDR_VAR 0 1
9520: PUSH
9521: LD_VAR 0 1
9525: PPUSH
9526: LD_INT 2
9528: PPUSH
9529: LD_VAR 0 1
9533: PUSH
9534: LD_INT 2
9536: ARRAY
9537: PUSH
9538: LD_EXP 9
9542: ADD
9543: PPUSH
9544: CALL_OW 1
9548: ST_TO_ADDR
// end ;
9549: LD_VAR 0 1
9553: RET
// export function PrepareReinforcements ; var i , peopleAmount , tmp , un , veh ; begin
9554: LD_INT 0
9556: PPUSH
9557: PPUSH
9558: PPUSH
9559: PPUSH
9560: PPUSH
9561: PPUSH
// uc_side := 1 ;
9562: LD_ADDR_OWVAR 20
9566: PUSH
9567: LD_INT 1
9569: ST_TO_ADDR
// uc_nation := 1 ;
9570: LD_ADDR_OWVAR 21
9574: PUSH
9575: LD_INT 1
9577: ST_TO_ADDR
// InitHc ;
9578: CALL_OW 19
// peopleAmount := [ 3 , 3 , 2 ] [ Difficulty ] ;
9582: LD_ADDR_VAR 0 3
9586: PUSH
9587: LD_INT 3
9589: PUSH
9590: LD_INT 3
9592: PUSH
9593: LD_INT 2
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: LIST
9600: PUSH
9601: LD_OWVAR 67
9605: ARRAY
9606: ST_TO_ADDR
// for i = 1 to peopleAmount do
9607: LD_ADDR_VAR 0 2
9611: PUSH
9612: DOUBLE
9613: LD_INT 1
9615: DEC
9616: ST_TO_ADDR
9617: LD_VAR 0 3
9621: PUSH
9622: FOR_TO
9623: IFFALSE 9672
// begin PrepareHuman ( false , 2 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9625: LD_INT 0
9627: PPUSH
9628: LD_INT 2
9630: PPUSH
9631: LD_INT 7
9633: PUSH
9634: LD_INT 6
9636: PUSH
9637: LD_INT 5
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: LIST
9644: PUSH
9645: LD_OWVAR 67
9649: ARRAY
9650: PPUSH
9651: CALL_OW 380
// PlaceUnitInArea ( CreateHuman , startArea , false ) ;
9655: CALL_OW 44
9659: PPUSH
9660: LD_INT 19
9662: PPUSH
9663: LD_INT 0
9665: PPUSH
9666: CALL 61199 0 3
// end ;
9670: GO 9622
9672: POP
9673: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_crane , 58 ) ;
9674: LD_INT 2
9676: PPUSH
9677: LD_INT 1
9679: PPUSH
9680: LD_INT 3
9682: PPUSH
9683: LD_INT 13
9685: PPUSH
9686: LD_INT 58
9688: PPUSH
9689: CALL 26530 0 5
// PlaceUnitInArea ( CreateVehicle , startArea , false ) ;
9693: CALL_OW 45
9697: PPUSH
9698: LD_INT 19
9700: PPUSH
9701: LD_INT 0
9703: PPUSH
9704: CALL 61199 0 3
// if commander = 1 then
9708: LD_EXP 25
9712: PUSH
9713: LD_INT 1
9715: EQUAL
9716: IFFALSE 9727
// wait ( 6 6$00 ) else
9718: LD_INT 12600
9720: PPUSH
9721: CALL_OW 67
9725: GO 9734
// wait ( 8 8$00 ) ;
9727: LD_INT 16800
9729: PPUSH
9730: CALL_OW 67
// uc_side := 1 ;
9734: LD_ADDR_OWVAR 20
9738: PUSH
9739: LD_INT 1
9741: ST_TO_ADDR
// uc_nation := 1 ;
9742: LD_ADDR_OWVAR 21
9746: PUSH
9747: LD_INT 1
9749: ST_TO_ADDR
// InitVc ;
9750: CALL_OW 20
// InitHc ;
9754: CALL_OW 19
// for i = 1 to 5 do
9758: LD_ADDR_VAR 0 2
9762: PUSH
9763: DOUBLE
9764: LD_INT 1
9766: DEC
9767: ST_TO_ADDR
9768: LD_INT 5
9770: PUSH
9771: FOR_TO
9772: IFFALSE 10016
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_light_wheeled ] [ i mod 3 + 1 ] , engine_combustion , [ control_manual , control_computer , control_computer ] [ i mod 3 + 1 ] , [ us_heavy_gun , us_cargo_bay , us_radar ] [ i mod 3 + 1 ] , rand ( 40 , 55 ) ) ;
9774: LD_INT 4
9776: PUSH
9777: LD_INT 3
9779: PUSH
9780: LD_INT 1
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: LIST
9787: PUSH
9788: LD_VAR 0 2
9792: PUSH
9793: LD_INT 3
9795: MOD
9796: PUSH
9797: LD_INT 1
9799: PLUS
9800: ARRAY
9801: PPUSH
9802: LD_INT 1
9804: PPUSH
9805: LD_INT 1
9807: PUSH
9808: LD_INT 3
9810: PUSH
9811: LD_INT 3
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: LIST
9818: PUSH
9819: LD_VAR 0 2
9823: PUSH
9824: LD_INT 3
9826: MOD
9827: PUSH
9828: LD_INT 1
9830: PLUS
9831: ARRAY
9832: PPUSH
9833: LD_INT 6
9835: PUSH
9836: LD_INT 12
9838: PUSH
9839: LD_INT 11
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: LIST
9846: PUSH
9847: LD_VAR 0 2
9851: PUSH
9852: LD_INT 3
9854: MOD
9855: PUSH
9856: LD_INT 1
9858: PLUS
9859: ARRAY
9860: PPUSH
9861: LD_INT 40
9863: PPUSH
9864: LD_INT 55
9866: PPUSH
9867: CALL_OW 12
9871: PPUSH
9872: CALL 26530 0 5
// veh := CreateVehicle ;
9876: LD_ADDR_VAR 0 6
9880: PUSH
9881: CALL_OW 45
9885: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
9886: LD_VAR 0 6
9890: PPUSH
9891: LD_INT 19
9893: PPUSH
9894: LD_INT 0
9896: PPUSH
9897: CALL 61199 0 3
// if GetWeapon ( veh ) = us_cargo_bay then
9901: LD_VAR 0 6
9905: PPUSH
9906: CALL_OW 264
9910: PUSH
9911: LD_INT 12
9913: EQUAL
9914: IFFALSE 9946
// begin AddCargo ( veh , mat_cans , 70 ) ;
9916: LD_VAR 0 6
9920: PPUSH
9921: LD_INT 1
9923: PPUSH
9924: LD_INT 70
9926: PPUSH
9927: CALL_OW 291
// AddCargo ( veh , mat_siberit , 30 ) ;
9931: LD_VAR 0 6
9935: PPUSH
9936: LD_INT 3
9938: PPUSH
9939: LD_INT 30
9941: PPUSH
9942: CALL_OW 291
// end ; if GetControl ( veh ) = control_manual then
9946: LD_VAR 0 6
9950: PPUSH
9951: CALL_OW 263
9955: PUSH
9956: LD_INT 1
9958: EQUAL
9959: IFFALSE 10014
// begin PrepareHuman ( sex_male , 3 , 6 ) ;
9961: LD_INT 1
9963: PPUSH
9964: LD_INT 3
9966: PPUSH
9967: LD_INT 6
9969: PPUSH
9970: CALL_OW 380
// un := CreateHuman ;
9974: LD_ADDR_VAR 0 5
9978: PUSH
9979: CALL_OW 44
9983: ST_TO_ADDR
// tmp := tmp ^ un ;
9984: LD_ADDR_VAR 0 4
9988: PUSH
9989: LD_VAR 0 4
9993: PUSH
9994: LD_VAR 0 5
9998: ADD
9999: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10000: LD_VAR 0 5
10004: PPUSH
10005: LD_VAR 0 6
10009: PPUSH
10010: CALL_OW 52
// end ; end ;
10014: GO 9771
10016: POP
10017: POP
// if tmp then
10018: LD_VAR 0 4
10022: IFFALSE 10086
// begin CenterNowOnUnits ( tmp ) ;
10024: LD_VAR 0 4
10028: PPUSH
10029: CALL_OW 87
// Say ( tmp [ 1 ] , DAR-1 ) ;
10033: LD_VAR 0 4
10037: PUSH
10038: LD_INT 1
10040: ARRAY
10041: PPUSH
10042: LD_STRING DAR-1
10044: PPUSH
10045: CALL_OW 88
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-DAR ) ;
10049: LD_EXP 9
10053: PPUSH
10054: LD_STRING D
10056: PUSH
10057: LD_STRING I
10059: PUSH
10060: LD_STRING J
10062: PUSH
10063: LD_STRING S
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: LIST
10070: PUSH
10071: LD_EXP 25
10075: ARRAY
10076: STR
10077: PUSH
10078: LD_STRING -1-DAR
10080: STR
10081: PPUSH
10082: CALL_OW 88
// end ; if not reinforceAllowed then
10086: LD_EXP 24
10090: NOT
10091: IFFALSE 10095
// exit ;
10093: GO 10249
// wait ( 25 25$00 ) ;
10095: LD_INT 52500
10097: PPUSH
10098: CALL_OW 67
// uc_side := 1 ;
10102: LD_ADDR_OWVAR 20
10106: PUSH
10107: LD_INT 1
10109: ST_TO_ADDR
// uc_nation := 1 ;
10110: LD_ADDR_OWVAR 21
10114: PUSH
10115: LD_INT 1
10117: ST_TO_ADDR
// InitVc ;
10118: CALL_OW 20
// InitHc ;
10122: CALL_OW 19
// for i = 1 to 4 do
10126: LD_ADDR_VAR 0 2
10130: PUSH
10131: DOUBLE
10132: LD_INT 1
10134: DEC
10135: ST_TO_ADDR
10136: LD_INT 4
10138: PUSH
10139: FOR_TO
10140: IFFALSE 10247
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 1 ) ;
10142: LD_INT 5
10144: PPUSH
10145: LD_INT 3
10147: PPUSH
10148: LD_INT 1
10150: PPUSH
10151: LD_INT 6
10153: PPUSH
10154: LD_INT 1
10156: PPUSH
10157: CALL 26530 0 5
// veh := CreateVehicle ;
10161: LD_ADDR_VAR 0 6
10165: PUSH
10166: CALL_OW 45
10170: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
10171: LD_VAR 0 6
10175: PPUSH
10176: LD_INT 19
10178: PPUSH
10179: LD_INT 0
10181: PPUSH
10182: CALL 61199 0 3
// if GetControl ( veh ) = control_manual then
10186: LD_VAR 0 6
10190: PPUSH
10191: CALL_OW 263
10195: PUSH
10196: LD_INT 1
10198: EQUAL
10199: IFFALSE 10245
// begin PrepareHuman ( false , 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
10201: LD_INT 0
10203: PPUSH
10204: LD_INT 3
10206: PPUSH
10207: LD_INT 7
10209: PUSH
10210: LD_INT 6
10212: PUSH
10213: LD_INT 5
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: LIST
10220: PUSH
10221: LD_OWVAR 67
10225: ARRAY
10226: PPUSH
10227: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10231: CALL_OW 44
10235: PPUSH
10236: LD_VAR 0 6
10240: PPUSH
10241: CALL_OW 52
// end ; end ;
10245: GO 10139
10247: POP
10248: POP
// end ;
10249: LD_VAR 0 1
10253: RET
// export function PrepareLegionReinforcements ; var i , un , j , tmp ; begin
10254: LD_INT 0
10256: PPUSH
10257: PPUSH
10258: PPUSH
10259: PPUSH
10260: PPUSH
// uc_side := 8 ;
10261: LD_ADDR_OWVAR 20
10265: PUSH
10266: LD_INT 8
10268: ST_TO_ADDR
// uc_nation := nation_arabian ;
10269: LD_ADDR_OWVAR 21
10273: PUSH
10274: LD_INT 2
10276: ST_TO_ADDR
// for i = 1 to 2 do
10277: LD_ADDR_VAR 0 2
10281: PUSH
10282: DOUBLE
10283: LD_INT 1
10285: DEC
10286: ST_TO_ADDR
10287: LD_INT 2
10289: PUSH
10290: FOR_TO
10291: IFFALSE 10371
// for j = 1 to 4 do
10293: LD_ADDR_VAR 0 4
10297: PUSH
10298: DOUBLE
10299: LD_INT 1
10301: DEC
10302: ST_TO_ADDR
10303: LD_INT 4
10305: PUSH
10306: FOR_TO
10307: IFFALSE 10367
// begin PrepareHuman ( false , j , 8 ) ;
10309: LD_INT 0
10311: PPUSH
10312: LD_VAR 0 4
10316: PPUSH
10317: LD_INT 8
10319: PPUSH
10320: CALL_OW 380
// un := CreateHuman ;
10324: LD_ADDR_VAR 0 3
10328: PUSH
10329: CALL_OW 44
10333: ST_TO_ADDR
// PlaceUnitArea ( un , legionSpawn , false ) ;
10334: LD_VAR 0 3
10338: PPUSH
10339: LD_INT 23
10341: PPUSH
10342: LD_INT 0
10344: PPUSH
10345: CALL_OW 49
// tmp := tmp union un ;
10349: LD_ADDR_VAR 0 5
10353: PUSH
10354: LD_VAR 0 5
10358: PUSH
10359: LD_VAR 0 3
10363: UNION
10364: ST_TO_ADDR
// end ;
10365: GO 10306
10367: POP
10368: POP
10369: GO 10290
10371: POP
10372: POP
// for i in tmp do
10373: LD_ADDR_VAR 0 2
10377: PUSH
10378: LD_VAR 0 5
10382: PUSH
10383: FOR_IN
10384: IFFALSE 10403
// ComMoveXY ( i , 150 , 136 ) ;
10386: LD_VAR 0 2
10390: PPUSH
10391: LD_INT 150
10393: PPUSH
10394: LD_INT 136
10396: PPUSH
10397: CALL_OW 111
10401: GO 10383
10403: POP
10404: POP
// mc_bases := Replace ( mc_bases , mc_leg , mc_bases [ mc_leg ] union tmp ) ;
10405: LD_ADDR_EXP 36
10409: PUSH
10410: LD_EXP 36
10414: PPUSH
10415: LD_EXP 6
10419: PPUSH
10420: LD_EXP 36
10424: PUSH
10425: LD_EXP 6
10429: ARRAY
10430: PUSH
10431: LD_VAR 0 5
10435: UNION
10436: PPUSH
10437: CALL_OW 1
10441: ST_TO_ADDR
// end ;
10442: LD_VAR 0 1
10446: RET
// every 0 0$10 trigger Difficulty > 1 and GetTech ( tech_lapser , 3 ) = state_researched do
10447: LD_OWVAR 67
10451: PUSH
10452: LD_INT 1
10454: GREATER
10455: PUSH
10456: LD_INT 31
10458: PPUSH
10459: LD_INT 3
10461: PPUSH
10462: CALL_OW 321
10466: PUSH
10467: LD_INT 2
10469: EQUAL
10470: AND
10471: IFFALSE 10688
10473: GO 10475
10475: DISABLE
// begin MC_InsertBuildingList ( mc_rus_1 , [ [ b_turret , 101 , 159 , 5 ] , [ b_turret , 105 , 158 , 5 ] , [ b_turret , 96 , 136 , 5 ] , [ b_turret , 94 , 133 , 4 ] , [ b_turret , 84 , 102 , 4 ] ] ) ;
10476: LD_EXP 7
10480: PPUSH
10481: LD_INT 33
10483: PUSH
10484: LD_INT 101
10486: PUSH
10487: LD_INT 159
10489: PUSH
10490: LD_INT 5
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: PUSH
10499: LD_INT 33
10501: PUSH
10502: LD_INT 105
10504: PUSH
10505: LD_INT 158
10507: PUSH
10508: LD_INT 5
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: PUSH
10517: LD_INT 33
10519: PUSH
10520: LD_INT 96
10522: PUSH
10523: LD_INT 136
10525: PUSH
10526: LD_INT 5
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: PUSH
10535: LD_INT 33
10537: PUSH
10538: LD_INT 94
10540: PUSH
10541: LD_INT 133
10543: PUSH
10544: LD_INT 4
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 33
10555: PUSH
10556: LD_INT 84
10558: PUSH
10559: LD_INT 102
10561: PUSH
10562: LD_INT 4
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: PPUSH
10578: CALL 86218 0 2
// MC_InsertBuildingList ( mc_rus_2 , [ [ b_turret , 50 , 17 , 4 ] , [ b_turret , 52 , 20 , 4 ] , [ b_turret , 53 , 23 , 4 ] , [ b_turret , 45 , 32 , 4 ] , [ b_turret , 45 , 39 , 4 ] ] ) ;
10582: LD_EXP 8
10586: PPUSH
10587: LD_INT 33
10589: PUSH
10590: LD_INT 50
10592: PUSH
10593: LD_INT 17
10595: PUSH
10596: LD_INT 4
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: PUSH
10605: LD_INT 33
10607: PUSH
10608: LD_INT 52
10610: PUSH
10611: LD_INT 20
10613: PUSH
10614: LD_INT 4
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: PUSH
10623: LD_INT 33
10625: PUSH
10626: LD_INT 53
10628: PUSH
10629: LD_INT 23
10631: PUSH
10632: LD_INT 4
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: PUSH
10641: LD_INT 33
10643: PUSH
10644: LD_INT 45
10646: PUSH
10647: LD_INT 32
10649: PUSH
10650: LD_INT 4
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: PUSH
10659: LD_INT 33
10661: PUSH
10662: LD_INT 45
10664: PUSH
10665: LD_INT 39
10667: PUSH
10668: LD_INT 4
10670: PUSH
10671: EMPTY
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: PPUSH
10684: CALL 86218 0 2
// end ; end_of_file
10688: END
// export function Action ; var i , tmp ; begin
10689: LD_INT 0
10691: PPUSH
10692: PPUSH
10693: PPUSH
// InGameOn ;
10694: CALL_OW 8
// CenterNowOnXY ( 225 , 217 ) ;
10698: LD_INT 225
10700: PPUSH
10701: LD_INT 217
10703: PPUSH
10704: CALL_OW 86
// for i in playerForces [ 2 ] do
10708: LD_ADDR_VAR 0 2
10712: PUSH
10713: LD_EXP 10
10717: PUSH
10718: LD_INT 2
10720: ARRAY
10721: PUSH
10722: FOR_IN
10723: IFFALSE 10856
// begin if playerForces [ 1 ] and GetClass ( i ) in [ 3 , 4 ] then
10725: LD_EXP 10
10729: PUSH
10730: LD_INT 1
10732: ARRAY
10733: PUSH
10734: LD_VAR 0 2
10738: PPUSH
10739: CALL_OW 257
10743: PUSH
10744: LD_INT 3
10746: PUSH
10747: LD_INT 4
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: IN
10754: AND
10755: IFFALSE 10839
// begin PlaceUnitInArea ( playerForces [ 1 ] [ 1 ] , startArea , false ) ;
10757: LD_EXP 10
10761: PUSH
10762: LD_INT 1
10764: ARRAY
10765: PUSH
10766: LD_INT 1
10768: ARRAY
10769: PPUSH
10770: LD_INT 19
10772: PPUSH
10773: LD_INT 0
10775: PPUSH
10776: CALL 61199 0 3
// PlaceHumanInUnit ( i , playerForces [ 1 ] [ 1 ] ) ;
10780: LD_VAR 0 2
10784: PPUSH
10785: LD_EXP 10
10789: PUSH
10790: LD_INT 1
10792: ARRAY
10793: PUSH
10794: LD_INT 1
10796: ARRAY
10797: PPUSH
10798: CALL_OW 52
// playerForces := Replace ( playerForces , 1 , Delete ( playerForces [ 1 ] , 1 ) ) ;
10802: LD_ADDR_EXP 10
10806: PUSH
10807: LD_EXP 10
10811: PPUSH
10812: LD_INT 1
10814: PPUSH
10815: LD_EXP 10
10819: PUSH
10820: LD_INT 1
10822: ARRAY
10823: PPUSH
10824: LD_INT 1
10826: PPUSH
10827: CALL_OW 3
10831: PPUSH
10832: CALL_OW 1
10836: ST_TO_ADDR
// end else
10837: GO 10854
// PlaceUnitInArea ( i , startArea , false ) ;
10839: LD_VAR 0 2
10843: PPUSH
10844: LD_INT 19
10846: PPUSH
10847: LD_INT 0
10849: PPUSH
10850: CALL 61199 0 3
// end ;
10854: GO 10722
10856: POP
10857: POP
// wait ( 0 0$2 ) ;
10858: LD_INT 70
10860: PPUSH
10861: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1 ) ;
10865: LD_EXP 9
10869: PPUSH
10870: LD_STRING D
10872: PUSH
10873: LD_STRING I
10875: PUSH
10876: LD_STRING J
10878: PUSH
10879: LD_STRING S
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: LIST
10886: PUSH
10887: LD_EXP 25
10891: ARRAY
10892: STR
10893: PUSH
10894: LD_STRING -1
10896: STR
10897: PPUSH
10898: CALL_OW 88
// SayRadio ( Powell , DP-1 ) ;
10902: LD_EXP 12
10906: PPUSH
10907: LD_STRING DP-1
10909: PPUSH
10910: CALL_OW 94
// SayRadio ( Powell , DP-2 ) ;
10914: LD_EXP 12
10918: PPUSH
10919: LD_STRING DP-2
10921: PPUSH
10922: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2 ) ;
10926: LD_EXP 9
10930: PPUSH
10931: LD_STRING D
10933: PUSH
10934: LD_STRING I
10936: PUSH
10937: LD_STRING J
10939: PUSH
10940: LD_STRING S
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: LIST
10947: PUSH
10948: LD_EXP 25
10952: ARRAY
10953: STR
10954: PUSH
10955: LD_STRING -2
10957: STR
10958: PPUSH
10959: CALL_OW 88
// InGameOff ;
10963: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
10967: LD_STRING O1
10969: PPUSH
10970: CALL_OW 337
// game := true ;
10974: LD_ADDR_EXP 3
10978: PUSH
10979: LD_INT 1
10981: ST_TO_ADDR
// SaveForQuickRestart ;
10982: CALL_OW 22
// wait ( 0 0$5 ) ;
10986: LD_INT 175
10988: PPUSH
10989: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3 ) ;
10993: LD_EXP 9
10997: PPUSH
10998: LD_STRING D
11000: PUSH
11001: LD_STRING I
11003: PUSH
11004: LD_STRING J
11006: PUSH
11007: LD_STRING S
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: LIST
11014: PUSH
11015: LD_EXP 25
11019: ARRAY
11020: STR
11021: PUSH
11022: LD_STRING -3
11024: STR
11025: PPUSH
11026: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11030: LD_INT 35
11032: PPUSH
11033: CALL_OW 67
// until ruEscape [ 1 ] >= ruEscape [ 2 ] ;
11037: LD_EXP 15
11041: PUSH
11042: LD_INT 1
11044: ARRAY
11045: PUSH
11046: LD_EXP 15
11050: PUSH
11051: LD_INT 2
11053: ARRAY
11054: GREATEREQUAL
11055: IFFALSE 11030
// outpostEscape := true ;
11057: LD_ADDR_EXP 27
11061: PUSH
11062: LD_INT 1
11064: ST_TO_ADDR
// tmp := UnitFilter ( ruOutpost , [ f_sex , sex_male ] ) ;
11065: LD_ADDR_VAR 0 3
11069: PUSH
11070: LD_EXP 14
11074: PPUSH
11075: LD_INT 26
11077: PUSH
11078: LD_INT 1
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: PPUSH
11085: CALL_OW 72
11089: ST_TO_ADDR
// if tmp then
11090: LD_VAR 0 3
11094: IFFALSE 11112
// Say ( tmp [ 1 ] , DR-1-Escape ) ;
11096: LD_VAR 0 3
11100: PUSH
11101: LD_INT 1
11103: ARRAY
11104: PPUSH
11105: LD_STRING DR-1-Escape
11107: PPUSH
11108: CALL_OW 88
// wait ( 0 0$1 ) ;
11112: LD_INT 35
11114: PPUSH
11115: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Escape ) ;
11119: LD_EXP 9
11123: PPUSH
11124: LD_STRING D
11126: PUSH
11127: LD_STRING I
11129: PUSH
11130: LD_STRING J
11132: PUSH
11133: LD_STRING S
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: LIST
11140: PUSH
11141: LD_EXP 25
11145: ARRAY
11146: STR
11147: PUSH
11148: LD_STRING -1-Escape
11150: STR
11151: PPUSH
11152: CALL_OW 88
// for i in ruOutpost do
11156: LD_ADDR_VAR 0 2
11160: PUSH
11161: LD_EXP 14
11165: PUSH
11166: FOR_IN
11167: IFFALSE 11221
// begin if IsInUnit ( i ) then
11169: LD_VAR 0 2
11173: PPUSH
11174: CALL_OW 310
11178: IFFALSE 11189
// ComExitBuilding ( i ) ;
11180: LD_VAR 0 2
11184: PPUSH
11185: CALL_OW 122
// AddComMoveXY ( i , 179 , 102 ) ;
11189: LD_VAR 0 2
11193: PPUSH
11194: LD_INT 179
11196: PPUSH
11197: LD_INT 102
11199: PPUSH
11200: CALL_OW 171
// AddComMoveXY ( i , 28 , 20 ) ;
11204: LD_VAR 0 2
11208: PPUSH
11209: LD_INT 28
11211: PPUSH
11212: LD_INT 20
11214: PPUSH
11215: CALL_OW 171
// end ;
11219: GO 11166
11221: POP
11222: POP
// tmp := [ ] ;
11223: LD_ADDR_VAR 0 3
11227: PUSH
11228: EMPTY
11229: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11230: LD_INT 35
11232: PPUSH
11233: CALL_OW 67
// tmp := UnitFilter ( ruOutpost , [ f_inarea , rus2Base ] ) ;
11237: LD_ADDR_VAR 0 3
11241: PUSH
11242: LD_EXP 14
11246: PPUSH
11247: LD_INT 95
11249: PUSH
11250: LD_INT 11
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PPUSH
11257: CALL_OW 72
11261: ST_TO_ADDR
// if tmp then
11262: LD_VAR 0 3
11266: IFFALSE 11345
// for i in tmp do
11268: LD_ADDR_VAR 0 2
11272: PUSH
11273: LD_VAR 0 3
11277: PUSH
11278: FOR_IN
11279: IFFALSE 11343
// begin ruOutpost := ruOutpost diff i ;
11281: LD_ADDR_EXP 14
11285: PUSH
11286: LD_EXP 14
11290: PUSH
11291: LD_VAR 0 2
11295: DIFF
11296: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ mc_rus_2 , mc_bases [ mc_rus_2 ] + 1 ] , i ) ;
11297: LD_ADDR_EXP 36
11301: PUSH
11302: LD_EXP 36
11306: PPUSH
11307: LD_EXP 8
11311: PUSH
11312: LD_EXP 36
11316: PUSH
11317: LD_EXP 8
11321: ARRAY
11322: PUSH
11323: LD_INT 1
11325: PLUS
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: PPUSH
11331: LD_VAR 0 2
11335: PPUSH
11336: CALL 26652 0 3
11340: ST_TO_ADDR
// end ;
11341: GO 11278
11343: POP
11344: POP
// until not UnitFilter ( ruOutpost , [ f_type , unit_human ] ) ;
11345: LD_EXP 14
11349: PPUSH
11350: LD_INT 21
11352: PUSH
11353: LD_INT 1
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PPUSH
11360: CALL_OW 72
11364: NOT
11365: IFFALSE 11230
// ruOutpost := [ ] ;
11367: LD_ADDR_EXP 14
11371: PUSH
11372: EMPTY
11373: ST_TO_ADDR
// end ;
11374: LD_VAR 0 1
11378: RET
// every 0 0$1 trigger outpostEscape do var i , tmp ;
11379: LD_EXP 27
11383: IFFALSE 11572
11385: GO 11387
11387: DISABLE
11388: LD_INT 0
11390: PPUSH
11391: PPUSH
// begin wait ( rand ( 0 0$25 , 0 0$35 ) ) ;
11392: LD_INT 875
11394: PPUSH
11395: LD_INT 1225
11397: PPUSH
11398: CALL_OW 12
11402: PPUSH
11403: CALL_OW 67
// tmp := [ [ 208 , 166 ] , [ 218 , 174 ] , [ 201 , 173 ] , [ 189 , 167 ] , [ 191 , 160 ] , [ 209 , 181 ] , [ 192 , 162 ] , [ 197 , 166 ] ] ;
11407: LD_ADDR_VAR 0 2
11411: PUSH
11412: LD_INT 208
11414: PUSH
11415: LD_INT 166
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: PUSH
11422: LD_INT 218
11424: PUSH
11425: LD_INT 174
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: PUSH
11432: LD_INT 201
11434: PUSH
11435: LD_INT 173
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: PUSH
11442: LD_INT 189
11444: PUSH
11445: LD_INT 167
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: PUSH
11452: LD_INT 191
11454: PUSH
11455: LD_INT 160
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: PUSH
11462: LD_INT 209
11464: PUSH
11465: LD_INT 181
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PUSH
11472: LD_INT 192
11474: PUSH
11475: LD_INT 162
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: LD_INT 197
11484: PUSH
11485: LD_INT 166
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: ST_TO_ADDR
// for i = 1 to 5 + Difficulty do
11502: LD_ADDR_VAR 0 1
11506: PUSH
11507: DOUBLE
11508: LD_INT 1
11510: DEC
11511: ST_TO_ADDR
11512: LD_INT 5
11514: PUSH
11515: LD_OWVAR 67
11519: PLUS
11520: PUSH
11521: FOR_TO
11522: IFFALSE 11570
// begin MineExplosion ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 1 ) ;
11524: LD_VAR 0 2
11528: PUSH
11529: LD_VAR 0 1
11533: ARRAY
11534: PUSH
11535: LD_INT 1
11537: ARRAY
11538: PPUSH
11539: LD_VAR 0 2
11543: PUSH
11544: LD_VAR 0 1
11548: ARRAY
11549: PUSH
11550: LD_INT 2
11552: ARRAY
11553: PPUSH
11554: LD_INT 1
11556: PPUSH
11557: CALL_OW 453
// wait ( 0 0$0.8 ) ;
11561: LD_INT 28
11563: PPUSH
11564: CALL_OW 67
// end ;
11568: GO 11521
11570: POP
11571: POP
// end ;
11572: PPOPN 2
11574: END
// every 0 0$3 trigger not outpostEscape do var tmp , engs , buildings , empty , i , j , k ;
11575: LD_EXP 27
11579: NOT
11580: IFFALSE 12234
11582: GO 11584
11584: DISABLE
11585: LD_INT 0
11587: PPUSH
11588: PPUSH
11589: PPUSH
11590: PPUSH
11591: PPUSH
11592: PPUSH
11593: PPUSH
// begin enable ;
11594: ENABLE
// tmp := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
11595: LD_ADDR_VAR 0 1
11599: PUSH
11600: LD_EXP 14
11604: PPUSH
11605: LD_INT 22
11607: PUSH
11608: LD_INT 3
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 25
11617: PUSH
11618: LD_INT 1
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PPUSH
11629: CALL_OW 72
11633: ST_TO_ADDR
// engs := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11634: LD_ADDR_VAR 0 2
11638: PUSH
11639: LD_EXP 14
11643: PPUSH
11644: LD_INT 22
11646: PUSH
11647: LD_INT 3
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: LD_INT 25
11656: PUSH
11657: LD_INT 2
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PPUSH
11668: CALL_OW 72
11672: ST_TO_ADDR
// buildings := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11673: LD_ADDR_VAR 0 3
11677: PUSH
11678: LD_EXP 14
11682: PPUSH
11683: LD_INT 22
11685: PUSH
11686: LD_INT 3
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: PUSH
11693: LD_INT 21
11695: PUSH
11696: LD_INT 3
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: LD_INT 3
11705: PUSH
11706: LD_INT 24
11708: PUSH
11709: LD_INT 1000
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: LIST
11724: PPUSH
11725: CALL_OW 72
11729: ST_TO_ADDR
// if engs and buildings then
11730: LD_VAR 0 2
11734: PUSH
11735: LD_VAR 0 3
11739: AND
11740: IFFALSE 11813
// begin for i in engs do
11742: LD_ADDR_VAR 0 5
11746: PUSH
11747: LD_VAR 0 2
11751: PUSH
11752: FOR_IN
11753: IFFALSE 11809
// if IsInUnit ( i ) then
11755: LD_VAR 0 5
11759: PPUSH
11760: CALL_OW 310
11764: IFFALSE 11777
// ComExitBuilding ( i ) else
11766: LD_VAR 0 5
11770: PPUSH
11771: CALL_OW 122
11775: GO 11807
// if not HasTask ( i ) then
11777: LD_VAR 0 5
11781: PPUSH
11782: CALL_OW 314
11786: NOT
11787: IFFALSE 11807
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
11789: LD_VAR 0 5
11793: PPUSH
11794: LD_VAR 0 3
11798: PUSH
11799: LD_INT 1
11801: ARRAY
11802: PPUSH
11803: CALL_OW 130
11807: GO 11752
11809: POP
11810: POP
// end else
11811: GO 11916
// if not buildings and UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) and UnitFilter ( engs , [ f_not , [ f_inside ] ] ) then
11813: LD_VAR 0 3
11817: NOT
11818: PUSH
11819: LD_EXP 14
11823: PPUSH
11824: LD_INT 30
11826: PUSH
11827: LD_INT 0
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PPUSH
11834: CALL_OW 72
11838: AND
11839: PUSH
11840: LD_VAR 0 2
11844: PPUSH
11845: LD_INT 3
11847: PUSH
11848: LD_INT 54
11850: PUSH
11851: EMPTY
11852: LIST
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PPUSH
11858: CALL_OW 72
11862: AND
11863: IFFALSE 11916
// ComEnterUnit ( UnitFilter ( engs , [ f_not , [ f_inside ] ] ) , UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) [ 1 ] ) ;
11865: LD_VAR 0 2
11869: PPUSH
11870: LD_INT 3
11872: PUSH
11873: LD_INT 54
11875: PUSH
11876: EMPTY
11877: LIST
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PPUSH
11883: CALL_OW 72
11887: PPUSH
11888: LD_EXP 14
11892: PPUSH
11893: LD_INT 30
11895: PUSH
11896: LD_INT 0
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PPUSH
11903: CALL_OW 72
11907: PUSH
11908: LD_INT 1
11910: ARRAY
11911: PPUSH
11912: CALL_OW 120
// if not tmp then
11916: LD_VAR 0 1
11920: NOT
11921: IFFALSE 11925
// exit ;
11923: GO 12234
// if FilterUnitsInArea ( ruOutpostCenterArea , [ f_enemy , 3 ] ) > 1 then
11925: LD_INT 26
11927: PPUSH
11928: LD_INT 81
11930: PUSH
11931: LD_INT 3
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PPUSH
11938: CALL_OW 70
11942: PUSH
11943: LD_INT 1
11945: GREATER
11946: IFFALSE 12002
// begin for i in tmp do
11948: LD_ADDR_VAR 0 5
11952: PUSH
11953: LD_VAR 0 1
11957: PUSH
11958: FOR_IN
11959: IFFALSE 11998
// begin if IsInUnit ( i ) then
11961: LD_VAR 0 5
11965: PPUSH
11966: CALL_OW 310
11970: IFFALSE 11981
// ComExitBuilding ( i ) ;
11972: LD_VAR 0 5
11976: PPUSH
11977: CALL_OW 122
// AddComAgressiveMove ( i , 204 , 164 ) ;
11981: LD_VAR 0 5
11985: PPUSH
11986: LD_INT 204
11988: PPUSH
11989: LD_INT 164
11991: PPUSH
11992: CALL_OW 174
// end ;
11996: GO 11958
11998: POP
11999: POP
// end else
12000: GO 12234
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
12002: LD_VAR 0 1
12006: PPUSH
12007: LD_INT 3
12009: PUSH
12010: LD_INT 54
12012: PUSH
12013: EMPTY
12014: LIST
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PPUSH
12020: CALL_OW 72
12024: IFFALSE 12234
// begin empty := UnitFilter ( ruOutpost , [ [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
12026: LD_ADDR_VAR 0 4
12030: PUSH
12031: LD_EXP 14
12035: PPUSH
12036: LD_INT 30
12038: PUSH
12039: LD_INT 32
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PUSH
12046: LD_INT 58
12048: PUSH
12049: EMPTY
12050: LIST
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: PPUSH
12056: CALL_OW 72
12060: ST_TO_ADDR
// if not empty and UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) then
12061: LD_VAR 0 4
12065: NOT
12066: PUSH
12067: LD_EXP 14
12071: PPUSH
12072: LD_INT 30
12074: PUSH
12075: LD_INT 5
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PPUSH
12082: CALL_OW 72
12086: AND
12087: IFFALSE 12124
// begin ComEnterUnit ( tmp , UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) [ 1 ] ) ;
12089: LD_VAR 0 1
12093: PPUSH
12094: LD_EXP 14
12098: PPUSH
12099: LD_INT 30
12101: PUSH
12102: LD_INT 5
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PPUSH
12109: CALL_OW 72
12113: PUSH
12114: LD_INT 1
12116: ARRAY
12117: PPUSH
12118: CALL_OW 120
// exit ;
12122: GO 12234
// end ; j := UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) ;
12124: LD_ADDR_VAR 0 6
12128: PUSH
12129: LD_VAR 0 1
12133: PPUSH
12134: LD_INT 3
12136: PUSH
12137: LD_INT 54
12139: PUSH
12140: EMPTY
12141: LIST
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: PPUSH
12147: CALL_OW 72
12151: ST_TO_ADDR
// if j < empty then
12152: LD_VAR 0 6
12156: PUSH
12157: LD_VAR 0 4
12161: LESS
12162: IFFALSE 12176
// k := j else
12164: LD_ADDR_VAR 0 7
12168: PUSH
12169: LD_VAR 0 6
12173: ST_TO_ADDR
12174: GO 12186
// k := empty ;
12176: LD_ADDR_VAR 0 7
12180: PUSH
12181: LD_VAR 0 4
12185: ST_TO_ADDR
// for i = 1 to k do
12186: LD_ADDR_VAR 0 5
12190: PUSH
12191: DOUBLE
12192: LD_INT 1
12194: DEC
12195: ST_TO_ADDR
12196: LD_VAR 0 7
12200: PUSH
12201: FOR_TO
12202: IFFALSE 12232
// ComEnterUnit ( j [ i ] , empty [ i ] ) ;
12204: LD_VAR 0 6
12208: PUSH
12209: LD_VAR 0 5
12213: ARRAY
12214: PPUSH
12215: LD_VAR 0 4
12219: PUSH
12220: LD_VAR 0 5
12224: ARRAY
12225: PPUSH
12226: CALL_OW 120
12230: GO 12201
12232: POP
12233: POP
// end ; end ;
12234: PPOPN 7
12236: END
// every 0 0$2 trigger GameType = 1 and outpostEscape and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , 208 , 163 , 8 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 208 , 163 , 14 ] ] ) do var i ;
12237: LD_EXP 2
12241: PUSH
12242: LD_INT 1
12244: EQUAL
12245: PUSH
12246: LD_EXP 27
12250: AND
12251: PUSH
12252: LD_INT 22
12254: PUSH
12255: LD_INT 1
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PUSH
12262: LD_INT 92
12264: PUSH
12265: LD_INT 208
12267: PUSH
12268: LD_INT 163
12270: PUSH
12271: LD_INT 8
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: PPUSH
12284: CALL_OW 69
12288: AND
12289: PUSH
12290: LD_INT 22
12292: PUSH
12293: LD_INT 3
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 21
12302: PUSH
12303: LD_INT 1
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PUSH
12310: LD_INT 92
12312: PUSH
12313: LD_INT 208
12315: PUSH
12316: LD_INT 163
12318: PUSH
12319: LD_INT 14
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: LIST
12332: PPUSH
12333: CALL_OW 69
12337: NOT
12338: AND
12339: IFFALSE 12644
12341: GO 12343
12343: DISABLE
12344: LD_INT 0
12346: PPUSH
// begin InGameOn ;
12347: CALL_OW 8
// CenterNowOnUnits ( playerCommander ) ;
12351: LD_EXP 9
12355: PPUSH
12356: CALL_OW 87
// wait ( 0 0$1 ) ;
12360: LD_INT 35
12362: PPUSH
12363: CALL_OW 67
// DialogueOn ;
12367: CALL_OW 6
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-BaseCaptured ) ;
12371: LD_EXP 9
12375: PPUSH
12376: LD_STRING D
12378: PUSH
12379: LD_STRING I
12381: PUSH
12382: LD_STRING J
12384: PUSH
12385: LD_STRING S
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: LIST
12392: PUSH
12393: LD_EXP 25
12397: ARRAY
12398: STR
12399: PUSH
12400: LD_STRING -1-BaseCaptured
12402: STR
12403: PPUSH
12404: CALL_OW 88
// SayRadio ( Powell , DP-1-BaseCaptured ) ;
12408: LD_EXP 12
12412: PPUSH
12413: LD_STRING DP-1-BaseCaptured
12415: PPUSH
12416: CALL_OW 94
// if sibBombAllowed then
12420: LD_EXP 23
12424: IFFALSE 12566
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-BaseCaptured ) ;
12426: LD_EXP 9
12430: PPUSH
12431: LD_STRING D
12433: PUSH
12434: LD_STRING I
12436: PUSH
12437: LD_STRING J
12439: PUSH
12440: LD_STRING S
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: LIST
12447: PUSH
12448: LD_EXP 25
12452: ARRAY
12453: STR
12454: PUSH
12455: LD_STRING -2-BaseCaptured
12457: STR
12458: PPUSH
12459: CALL_OW 88
// if commander = 1 then
12463: LD_EXP 25
12467: PUSH
12468: LD_INT 1
12470: EQUAL
12471: IFFALSE 12485
// SayRadio ( Powell , DP-2b-BaseCaptured ) ;
12473: LD_EXP 12
12477: PPUSH
12478: LD_STRING DP-2b-BaseCaptured
12480: PPUSH
12481: CALL_OW 94
// if commander = 2 then
12485: LD_EXP 25
12489: PUSH
12490: LD_INT 2
12492: EQUAL
12493: IFFALSE 12507
// SayRadio ( Powell , DP-2-BaseCaptured ) ;
12495: LD_EXP 12
12499: PPUSH
12500: LD_STRING DP-2-BaseCaptured
12502: PPUSH
12503: CALL_OW 94
// if commander = 3 then
12507: LD_EXP 25
12511: PUSH
12512: LD_INT 3
12514: EQUAL
12515: IFFALSE 12529
// SayRadio ( Powell , DP-2a-BaseCaptured ) ;
12517: LD_EXP 12
12521: PPUSH
12522: LD_STRING DP-2a-BaseCaptured
12524: PPUSH
12525: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3-BaseCaptured ) ;
12529: LD_EXP 9
12533: PPUSH
12534: LD_STRING D
12536: PUSH
12537: LD_STRING I
12539: PUSH
12540: LD_STRING J
12542: PUSH
12543: LD_STRING S
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: PUSH
12551: LD_EXP 25
12555: ARRAY
12556: STR
12557: PUSH
12558: LD_STRING -3-BaseCaptured
12560: STR
12561: PPUSH
12562: CALL_OW 88
// end ; DialogueOff ;
12566: CALL_OW 7
// InGameOff ;
12570: CALL_OW 9
// ChangeMissionObjectives ( O2 ) ;
12574: LD_STRING O2
12576: PPUSH
12577: CALL_OW 337
// for i in UnitFilter ( ruOutpost , [ f_type , unit_building ] ) do
12581: LD_ADDR_VAR 0 1
12585: PUSH
12586: LD_EXP 14
12590: PPUSH
12591: LD_INT 21
12593: PUSH
12594: LD_INT 3
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: PPUSH
12601: CALL_OW 72
12605: PUSH
12606: FOR_IN
12607: IFFALSE 12623
// SetSide ( i , 1 ) ;
12609: LD_VAR 0 1
12613: PPUSH
12614: LD_INT 1
12616: PPUSH
12617: CALL_OW 235
12621: GO 12606
12623: POP
12624: POP
// baseCaptured := true ;
12625: LD_ADDR_EXP 17
12629: PUSH
12630: LD_INT 1
12632: ST_TO_ADDR
// wait ( 0 0$35 ) ;
12633: LD_INT 1225
12635: PPUSH
12636: CALL_OW 67
// PrepareReinforcements ;
12640: CALL 9554 0 0
// end ;
12644: PPOPN 1
12646: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 167 , 197 , 20 ] ] ) > 3 do
12647: LD_INT 22
12649: PUSH
12650: LD_INT 3
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: LD_INT 92
12659: PUSH
12660: LD_INT 167
12662: PUSH
12663: LD_INT 197
12665: PUSH
12666: LD_INT 20
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PPUSH
12679: CALL_OW 69
12683: PUSH
12684: LD_INT 3
12686: GREATER
12687: IFFALSE 12704
12689: GO 12691
12691: DISABLE
// SayRadio ( Powell , DP-RuAttack ) ;
12692: LD_EXP 12
12696: PPUSH
12697: LD_STRING DP-RuAttack
12699: PPUSH
12700: CALL_OW 94
12704: END
// every 0 0$2 trigger not debug and SeeXY ( 1 , 168 , 74 ) and GetEnvironmentType ( 168 , 72 ) do
12705: LD_EXP 1
12709: NOT
12710: PUSH
12711: LD_INT 1
12713: PPUSH
12714: LD_INT 168
12716: PPUSH
12717: LD_INT 74
12719: PPUSH
12720: CALL_OW 293
12724: AND
12725: PUSH
12726: LD_INT 168
12728: PPUSH
12729: LD_INT 72
12731: PPUSH
12732: CALL_OW 553
12736: AND
12737: IFFALSE 12789
12739: GO 12741
12741: DISABLE
// begin CenterOnXY ( 168 , 72 ) ;
12742: LD_INT 168
12744: PPUSH
12745: LD_INT 72
12747: PPUSH
12748: CALL_OW 84
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Blockade ) ;
12752: LD_EXP 9
12756: PPUSH
12757: LD_STRING D
12759: PUSH
12760: LD_STRING I
12762: PUSH
12763: LD_STRING J
12765: PUSH
12766: LD_STRING S
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: LIST
12773: PUSH
12774: LD_EXP 25
12778: ARRAY
12779: STR
12780: PUSH
12781: LD_STRING -1-Blockade
12783: STR
12784: PPUSH
12785: CALL_OW 88
// end ;
12789: END
// every 0 0$2 trigger GameType = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 4 ] ] ) do
12790: LD_EXP 2
12794: PUSH
12795: LD_INT 1
12797: EQUAL
12798: PUSH
12799: LD_INT 22
12801: PUSH
12802: LD_INT 1
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: PUSH
12809: LD_INT 101
12811: PUSH
12812: LD_INT 4
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: PPUSH
12823: CALL_OW 69
12827: AND
12828: IFFALSE 13360
12830: GO 12832
12832: DISABLE
// begin ChangeSideFog ( 4 , 1 ) ;
12833: LD_INT 4
12835: PPUSH
12836: LD_INT 1
12838: PPUSH
12839: CALL_OW 343
// DialogueOn ;
12843: CALL_OW 6
// CenterNowOnUnits ( allyCommander ) ;
12847: LD_EXP 11
12851: PPUSH
12852: CALL_OW 87
// SayRadio ( allyCommander , DM-1-Contact ) ;
12856: LD_EXP 11
12860: PPUSH
12861: LD_STRING DM-1-Contact
12863: PPUSH
12864: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Contact ) ;
12868: LD_EXP 9
12872: PPUSH
12873: LD_STRING D
12875: PUSH
12876: LD_STRING I
12878: PUSH
12879: LD_STRING J
12881: PUSH
12882: LD_STRING S
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: LIST
12889: PUSH
12890: LD_EXP 25
12894: ARRAY
12895: STR
12896: PUSH
12897: LD_STRING -1-Contact
12899: STR
12900: PPUSH
12901: CALL_OW 88
// if commander = 1 then
12905: LD_EXP 25
12909: PUSH
12910: LD_INT 1
12912: EQUAL
12913: IFFALSE 13045
// begin SayRadio ( allyCommander , DM-2-Contact ) ;
12915: LD_EXP 11
12919: PPUSH
12920: LD_STRING DM-2-Contact
12922: PPUSH
12923: CALL_OW 94
// Say ( playerCommander , DI-2-Contact ) ;
12927: LD_EXP 9
12931: PPUSH
12932: LD_STRING DI-2-Contact
12934: PPUSH
12935: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
12939: LD_INT 22
12941: PUSH
12942: LD_INT 8
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PUSH
12949: LD_INT 21
12951: PUSH
12952: LD_INT 1
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PPUSH
12963: CALL_OW 69
12967: PUSH
12968: LD_INT 8
12970: PPUSH
12971: LD_INT 1
12973: PPUSH
12974: CALL_OW 81
12978: PUSH
12979: LD_INT 2
12981: EQUAL
12982: AND
12983: IFFALSE 13009
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
12985: LD_EXP 11
12989: PPUSH
12990: LD_STRING DM-3-Contact
12992: PPUSH
12993: CALL_OW 94
// Say ( playerCommander , DI-3-Contact ) ;
12997: LD_EXP 9
13001: PPUSH
13002: LD_STRING DI-3-Contact
13004: PPUSH
13005: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13009: LD_EXP 11
13013: PPUSH
13014: LD_STRING DM-4-Contact
13016: PPUSH
13017: CALL_OW 94
// Say ( playerCommander , DI-4-Contact ) ;
13021: LD_EXP 9
13025: PPUSH
13026: LD_STRING DI-4-Contact
13028: PPUSH
13029: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13033: LD_EXP 11
13037: PPUSH
13038: LD_STRING DM-5-Contact
13040: PPUSH
13041: CALL_OW 94
// end ; if commander = 2 then
13045: LD_EXP 25
13049: PUSH
13050: LD_INT 2
13052: EQUAL
13053: IFFALSE 13185
// begin SayRadio ( allyCommander , DM-2c-Contact ) ;
13055: LD_EXP 11
13059: PPUSH
13060: LD_STRING DM-2c-Contact
13062: PPUSH
13063: CALL_OW 94
// Say ( playerCommander , DJ-2-Contact ) ;
13067: LD_EXP 9
13071: PPUSH
13072: LD_STRING DJ-2-Contact
13074: PPUSH
13075: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13079: LD_INT 22
13081: PUSH
13082: LD_INT 8
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PUSH
13089: LD_INT 21
13091: PUSH
13092: LD_INT 1
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: PPUSH
13103: CALL_OW 69
13107: PUSH
13108: LD_INT 8
13110: PPUSH
13111: LD_INT 1
13113: PPUSH
13114: CALL_OW 81
13118: PUSH
13119: LD_INT 2
13121: EQUAL
13122: AND
13123: IFFALSE 13149
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13125: LD_EXP 11
13129: PPUSH
13130: LD_STRING DM-3-Contact
13132: PPUSH
13133: CALL_OW 94
// Say ( playerCommander , DJ-3-Contact ) ;
13137: LD_EXP 9
13141: PPUSH
13142: LD_STRING DJ-3-Contact
13144: PPUSH
13145: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13149: LD_EXP 11
13153: PPUSH
13154: LD_STRING DM-4-Contact
13156: PPUSH
13157: CALL_OW 94
// Say ( playerCommander , DJ-4-Contact ) ;
13161: LD_EXP 9
13165: PPUSH
13166: LD_STRING DJ-4-Contact
13168: PPUSH
13169: CALL_OW 88
// SayRadio ( allyCommander , DM-5a-Contact ) ;
13173: LD_EXP 11
13177: PPUSH
13178: LD_STRING DM-5a-Contact
13180: PPUSH
13181: CALL_OW 94
// end ; if commander = 3 then
13185: LD_EXP 25
13189: PUSH
13190: LD_INT 3
13192: EQUAL
13193: IFFALSE 13349
// begin SayRadio ( allyCommander , DM-2a-Contact ) ;
13195: LD_EXP 11
13199: PPUSH
13200: LD_STRING DM-2a-Contact
13202: PPUSH
13203: CALL_OW 94
// Say ( playerCommander , DS-2a-Contact ) ;
13207: LD_EXP 9
13211: PPUSH
13212: LD_STRING DS-2a-Contact
13214: PPUSH
13215: CALL_OW 88
// SayRadio ( allyCommander , DM-2b-Contact ) ;
13219: LD_EXP 11
13223: PPUSH
13224: LD_STRING DM-2b-Contact
13226: PPUSH
13227: CALL_OW 94
// Say ( playerCommander , DS-2b-Contact ) ;
13231: LD_EXP 9
13235: PPUSH
13236: LD_STRING DS-2b-Contact
13238: PPUSH
13239: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13243: LD_INT 22
13245: PUSH
13246: LD_INT 8
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: PUSH
13253: LD_INT 21
13255: PUSH
13256: LD_INT 1
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PPUSH
13267: CALL_OW 69
13271: PUSH
13272: LD_INT 8
13274: PPUSH
13275: LD_INT 1
13277: PPUSH
13278: CALL_OW 81
13282: PUSH
13283: LD_INT 2
13285: EQUAL
13286: AND
13287: IFFALSE 13313
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13289: LD_EXP 11
13293: PPUSH
13294: LD_STRING DM-3-Contact
13296: PPUSH
13297: CALL_OW 94
// Say ( playerCommander , DS-3-Contact ) ;
13301: LD_EXP 9
13305: PPUSH
13306: LD_STRING DS-3-Contact
13308: PPUSH
13309: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13313: LD_EXP 11
13317: PPUSH
13318: LD_STRING DM-4-Contact
13320: PPUSH
13321: CALL_OW 94
// Say ( playerCommander , DS-4-Contact ) ;
13325: LD_EXP 9
13329: PPUSH
13330: LD_STRING DS-4-Contact
13332: PPUSH
13333: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13337: LD_EXP 11
13341: PPUSH
13342: LD_STRING DM-5-Contact
13344: PPUSH
13345: CALL_OW 94
// end ; DialogueOff ;
13349: CALL_OW 7
// ChangeMissionObjectives ( O3 ) ;
13353: LD_STRING O3
13355: PPUSH
13356: CALL_OW 337
// end ;
13360: END
// every 0 0$10 trigger GameType = 1 and legDestCounter >= [ 15 , 20 , 25 ] [ Difficulty ] and FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) >= 5 do var time , sib , sources , i ;
13361: LD_EXP 2
13365: PUSH
13366: LD_INT 1
13368: EQUAL
13369: PUSH
13370: LD_EXP 18
13374: PUSH
13375: LD_INT 15
13377: PUSH
13378: LD_INT 20
13380: PUSH
13381: LD_INT 25
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: LIST
13388: PUSH
13389: LD_OWVAR 67
13393: ARRAY
13394: GREATEREQUAL
13395: AND
13396: PUSH
13397: LD_INT 22
13399: PUSH
13400: LD_INT 8
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: PUSH
13407: LD_INT 30
13409: PUSH
13410: LD_INT 1
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: PPUSH
13421: CALL_OW 69
13425: AND
13426: PUSH
13427: LD_INT 22
13429: PUSH
13430: LD_INT 8
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PUSH
13437: LD_INT 21
13439: PUSH
13440: LD_INT 3
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PPUSH
13451: CALL_OW 69
13455: PUSH
13456: LD_INT 5
13458: GREATEREQUAL
13459: AND
13460: IFFALSE 13983
13462: GO 13464
13464: DISABLE
13465: LD_INT 0
13467: PPUSH
13468: PPUSH
13469: PPUSH
13470: PPUSH
// begin DialogueOn ;
13471: CALL_OW 6
// SayRadio ( Farmer , DF-1-Leg ) ;
13475: LD_EXP 13
13479: PPUSH
13480: LD_STRING DF-1-Leg
13482: PPUSH
13483: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Leg ) ;
13487: LD_EXP 9
13491: PPUSH
13492: LD_STRING D
13494: PUSH
13495: LD_STRING I
13497: PUSH
13498: LD_STRING J
13500: PUSH
13501: LD_STRING S
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: LIST
13508: PUSH
13509: LD_EXP 25
13513: ARRAY
13514: STR
13515: PUSH
13516: LD_STRING -1-Leg
13518: STR
13519: PPUSH
13520: CALL_OW 88
// SayRadio ( Farmer , DF-2-Leg ) ;
13524: LD_EXP 13
13528: PPUSH
13529: LD_STRING DF-2-Leg
13531: PPUSH
13532: CALL_OW 94
// DialogueOff ;
13536: CALL_OW 7
// case Query ( QLegionOffer ) of 1 :
13540: LD_STRING QLegionOffer
13542: PPUSH
13543: CALL_OW 97
13547: PUSH
13548: LD_INT 1
13550: DOUBLE
13551: EQUAL
13552: IFTRUE 13556
13554: GO 13559
13556: POP
// ; 2 :
13557: GO 13573
13559: LD_INT 2
13561: DOUBLE
13562: EQUAL
13563: IFTRUE 13567
13565: GO 13572
13567: POP
// exit ; end ;
13568: GO 13983
13570: GO 13573
13572: POP
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-Leg ) ;
13573: LD_EXP 9
13577: PPUSH
13578: LD_STRING D
13580: PUSH
13581: LD_STRING I
13583: PUSH
13584: LD_STRING J
13586: PUSH
13587: LD_STRING S
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: LIST
13594: PUSH
13595: LD_EXP 25
13599: ARRAY
13600: STR
13601: PUSH
13602: LD_STRING -2-Leg
13604: STR
13605: PPUSH
13606: CALL_OW 88
// legOfferAccepted := true ;
13610: LD_ADDR_EXP 20
13614: PUSH
13615: LD_INT 1
13617: ST_TO_ADDR
// SetAreaMapShow ( legOfferArea , 1 ) ;
13618: LD_INT 21
13620: PPUSH
13621: LD_INT 1
13623: PPUSH
13624: CALL_OW 424
// CenterOnXY ( 190 , 227 ) ;
13628: LD_INT 190
13630: PPUSH
13631: LD_INT 227
13633: PPUSH
13634: CALL_OW 84
// time := [ 8 8$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
13638: LD_ADDR_VAR 0 1
13642: PUSH
13643: LD_INT 16800
13645: PUSH
13646: LD_INT 14700
13648: PUSH
13649: LD_INT 12600
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: LIST
13656: PUSH
13657: LD_OWVAR 67
13661: ARRAY
13662: ST_TO_ADDR
// sib := 100 ;
13663: LD_ADDR_VAR 0 2
13667: PUSH
13668: LD_INT 100
13670: ST_TO_ADDR
// disableGlobalTimer := true ;
13671: LD_ADDR_EXP 4
13675: PUSH
13676: LD_INT 1
13678: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13679: LD_INT 35
13681: PPUSH
13682: CALL_OW 67
// time := time - 0 0$1 ;
13686: LD_ADDR_VAR 0 1
13690: PUSH
13691: LD_VAR 0 1
13695: PUSH
13696: LD_INT 35
13698: MINUS
13699: ST_TO_ADDR
// sources := GetResourceArea ( legOfferArea , mat_siberit ) ;
13700: LD_ADDR_VAR 0 3
13704: PUSH
13705: LD_INT 21
13707: PPUSH
13708: LD_INT 3
13710: PPUSH
13711: CALL_OW 287
13715: ST_TO_ADDR
// display_strings := [ #SkrTime , tick , #Skr-LegOffer , sib , time ] ;
13716: LD_ADDR_OWVAR 47
13720: PUSH
13721: LD_STRING #SkrTime
13723: PUSH
13724: LD_OWVAR 1
13728: PUSH
13729: LD_STRING #Skr-LegOffer
13731: PUSH
13732: LD_VAR 0 2
13736: PUSH
13737: LD_VAR 0 1
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: ST_TO_ADDR
// if sources then
13749: LD_VAR 0 3
13753: IFFALSE 13785
// begin sib := sib - sources * 10 ;
13755: LD_ADDR_VAR 0 2
13759: PUSH
13760: LD_VAR 0 2
13764: PUSH
13765: LD_VAR 0 3
13769: PUSH
13770: LD_INT 10
13772: MUL
13773: MINUS
13774: ST_TO_ADDR
// EraseResourceArea ( legOfferArea , mat_siberit ) ;
13775: LD_INT 21
13777: PPUSH
13778: LD_INT 3
13780: PPUSH
13781: CALL_OW 286
// end ; until time = 0 0$00 or sib <= 0 or not FilterAllUnits ( [ f_side , 8 ] ) ;
13785: LD_VAR 0 1
13789: PUSH
13790: LD_INT 0
13792: EQUAL
13793: PUSH
13794: LD_VAR 0 2
13798: PUSH
13799: LD_INT 0
13801: LESSEQUAL
13802: OR
13803: PUSH
13804: LD_INT 22
13806: PUSH
13807: LD_INT 8
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: PPUSH
13814: CALL_OW 69
13818: NOT
13819: OR
13820: IFFALSE 13679
// SetAreaMapShow ( legOfferArea , 0 ) ;
13822: LD_INT 21
13824: PPUSH
13825: LD_INT 0
13827: PPUSH
13828: CALL_OW 424
// disableGlobalTimer := false ;
13832: LD_ADDR_EXP 4
13836: PUSH
13837: LD_INT 0
13839: ST_TO_ADDR
// if sib <= 0 then
13840: LD_VAR 0 2
13844: PUSH
13845: LD_INT 0
13847: LESSEQUAL
13848: IFFALSE 13964
// begin legChangeSide := true ;
13850: LD_ADDR_EXP 21
13854: PUSH
13855: LD_INT 1
13857: ST_TO_ADDR
// SayRadio ( Farmer , DF-4y-Leg ) ;
13858: LD_EXP 13
13862: PPUSH
13863: LD_STRING DF-4y-Leg
13865: PPUSH
13866: CALL_OW 94
// ChangeMissionObjectives ( O3a ) ;
13870: LD_STRING O3a
13872: PPUSH
13873: CALL_OW 337
// ChangeSideFog ( 8 , 1 ) ;
13877: LD_INT 8
13879: PPUSH
13880: LD_INT 1
13882: PPUSH
13883: CALL_OW 343
// SetAttitude ( 8 , 1 , att_friend , true ) ;
13887: LD_INT 8
13889: PPUSH
13890: LD_INT 1
13892: PPUSH
13893: LD_INT 1
13895: PPUSH
13896: LD_INT 1
13898: PPUSH
13899: CALL_OW 80
// SetAttitude ( 8 , 4 , att_friend , true ) ;
13903: LD_INT 8
13905: PPUSH
13906: LD_INT 4
13908: PPUSH
13909: LD_INT 1
13911: PPUSH
13912: LD_INT 1
13914: PPUSH
13915: CALL_OW 80
// SetAttitude ( 8 , 6 , att_enemy , true ) ;
13919: LD_INT 8
13921: PPUSH
13922: LD_INT 6
13924: PPUSH
13925: LD_INT 2
13927: PPUSH
13928: LD_INT 1
13930: PPUSH
13931: CALL_OW 80
// SetAttitude ( 8 , 3 , att_enemy , true ) ;
13935: LD_INT 8
13937: PPUSH
13938: LD_INT 3
13940: PPUSH
13941: LD_INT 2
13943: PPUSH
13944: LD_INT 1
13946: PPUSH
13947: CALL_OW 80
// wait ( 0 0$30 ) ;
13951: LD_INT 1050
13953: PPUSH
13954: CALL_OW 67
// PrepareLegionReinforcements ;
13958: CALL 10254 0 0
// end else
13962: GO 13983
// begin ChangeMissionObjectives ( O3a ) ;
13964: LD_STRING O3a
13966: PPUSH
13967: CALL_OW 337
// SayRadio ( Farmer , DF-4n-Leg ) ;
13971: LD_EXP 13
13975: PPUSH
13976: LD_STRING DF-4n-Leg
13978: PPUSH
13979: CALL_OW 94
// end ; end ;
13983: PPOPN 4
13985: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 and GetAttitude ( 8 , 1 ) = att_enemy do
13986: LD_INT 22
13988: PUSH
13989: LD_INT 8
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PUSH
13996: LD_INT 21
13998: PUSH
13999: LD_INT 1
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PPUSH
14010: CALL_OW 69
14014: PUSH
14015: LD_INT 0
14017: EQUAL
14018: PUSH
14019: LD_INT 8
14021: PPUSH
14022: LD_INT 1
14024: PPUSH
14025: CALL_OW 81
14029: PUSH
14030: LD_INT 2
14032: EQUAL
14033: AND
14034: IFFALSE 14046
14036: GO 14038
14038: DISABLE
// ChangeMissionObjectives ( O3a ) ;
14039: LD_STRING O3a
14041: PPUSH
14042: CALL_OW 337
14046: END
// every 0 0$1 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) = 0 do
14047: LD_EXP 2
14051: PUSH
14052: LD_INT 1
14054: EQUAL
14055: PUSH
14056: LD_EXP 3
14060: AND
14061: PUSH
14062: LD_INT 22
14064: PUSH
14065: LD_INT 3
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: PUSH
14072: LD_INT 21
14074: PUSH
14075: LD_INT 1
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: PPUSH
14086: CALL_OW 69
14090: PUSH
14091: LD_INT 0
14093: EQUAL
14094: AND
14095: PUSH
14096: LD_INT 22
14098: PUSH
14099: LD_INT 3
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: LD_INT 30
14108: PUSH
14109: LD_INT 1
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PPUSH
14120: CALL_OW 69
14124: PUSH
14125: LD_INT 0
14127: EQUAL
14128: AND
14129: IFFALSE 14367
14131: GO 14133
14133: DISABLE
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Win ) ;
14134: LD_EXP 9
14138: PPUSH
14139: LD_STRING D
14141: PUSH
14142: LD_STRING I
14144: PUSH
14145: LD_STRING J
14147: PUSH
14148: LD_STRING S
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: LIST
14155: PUSH
14156: LD_EXP 25
14160: ARRAY
14161: STR
14162: PUSH
14163: LD_STRING -1-Win
14165: STR
14166: PPUSH
14167: CALL_OW 88
// if tick >= [ 150 150$0 , 130 130$0 , 110 110$0 ] [ Difficulty ] then
14171: LD_OWVAR 1
14175: PUSH
14176: LD_INT 315000
14178: PUSH
14179: LD_INT 273000
14181: PUSH
14182: LD_INT 231000
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: LIST
14189: PUSH
14190: LD_OWVAR 67
14194: ARRAY
14195: GREATEREQUAL
14196: IFFALSE 14211
// AddMedal ( med1 , - 1 ) else
14198: LD_STRING med1
14200: PPUSH
14201: LD_INT 1
14203: NEG
14204: PPUSH
14205: CALL_OW 101
14209: GO 14221
// AddMedal ( med1 , 1 ) ;
14211: LD_STRING med1
14213: PPUSH
14214: LD_INT 1
14216: PPUSH
14217: CALL_OW 101
// if allyDestCounter >= [ 20 , 15 , 10 ] [ Difficulty ] then
14221: LD_EXP 22
14225: PUSH
14226: LD_INT 20
14228: PUSH
14229: LD_INT 15
14231: PUSH
14232: LD_INT 10
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: LIST
14239: PUSH
14240: LD_OWVAR 67
14244: ARRAY
14245: GREATEREQUAL
14246: IFFALSE 14261
// AddMedal ( med2 , - 1 ) else
14248: LD_STRING med2
14250: PPUSH
14251: LD_INT 1
14253: NEG
14254: PPUSH
14255: CALL_OW 101
14259: GO 14271
// AddMedal ( med2 , 1 ) ;
14261: LD_STRING med2
14263: PPUSH
14264: LD_INT 1
14266: PPUSH
14267: CALL_OW 101
// if GetAttitude ( 8 , 1 ) = att_friend then
14271: LD_INT 8
14273: PPUSH
14274: LD_INT 1
14276: PPUSH
14277: CALL_OW 81
14281: PUSH
14282: LD_INT 1
14284: EQUAL
14285: IFFALSE 14299
// AddMedal ( med3 , 1 ) else
14287: LD_STRING med3
14289: PPUSH
14290: LD_INT 1
14292: PPUSH
14293: CALL_OW 101
14297: GO 14356
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 then
14299: LD_INT 22
14301: PUSH
14302: LD_INT 8
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: LD_INT 21
14311: PUSH
14312: LD_INT 1
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: PPUSH
14323: CALL_OW 69
14327: PUSH
14328: LD_INT 0
14330: EQUAL
14331: IFFALSE 14345
// AddMedal ( med3 , 2 ) else
14333: LD_STRING med3
14335: PPUSH
14336: LD_INT 2
14338: PPUSH
14339: CALL_OW 101
14343: GO 14356
// AddMedal ( med3 , - 1 ) ;
14345: LD_STRING med3
14347: PPUSH
14348: LD_INT 1
14350: NEG
14351: PPUSH
14352: CALL_OW 101
// GiveMedals ( MAIN ) ;
14356: LD_STRING MAIN
14358: PPUSH
14359: CALL_OW 102
// YouWin ;
14363: CALL_OW 103
// end ;
14367: END
// every 10 trigger GameType = 1 and staticMines and FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) do var i , j , tmp , x , y ;
14368: LD_EXP 2
14372: PUSH
14373: LD_INT 1
14375: EQUAL
14376: PUSH
14377: LD_EXP 16
14381: AND
14382: PUSH
14383: LD_INT 20
14385: PPUSH
14386: LD_INT 81
14388: PUSH
14389: LD_INT 8
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: PPUSH
14396: CALL_OW 70
14400: AND
14401: IFFALSE 14680
14403: GO 14405
14405: DISABLE
14406: LD_INT 0
14408: PPUSH
14409: PPUSH
14410: PPUSH
14411: PPUSH
14412: PPUSH
// begin enable ;
14413: ENABLE
// tmp := FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) ;
14414: LD_ADDR_VAR 0 3
14418: PUSH
14419: LD_INT 20
14421: PPUSH
14422: LD_INT 81
14424: PUSH
14425: LD_INT 8
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PPUSH
14432: CALL_OW 70
14436: ST_TO_ADDR
// if not tmp then
14437: LD_VAR 0 3
14441: NOT
14442: IFFALSE 14446
// exit ;
14444: GO 14680
// for i in tmp do
14446: LD_ADDR_VAR 0 1
14450: PUSH
14451: LD_VAR 0 3
14455: PUSH
14456: FOR_IN
14457: IFFALSE 14678
// begin x := GetX ( i ) ;
14459: LD_ADDR_VAR 0 4
14463: PUSH
14464: LD_VAR 0 1
14468: PPUSH
14469: CALL_OW 250
14473: ST_TO_ADDR
// y := GetY ( i ) ;
14474: LD_ADDR_VAR 0 5
14478: PUSH
14479: LD_VAR 0 1
14483: PPUSH
14484: CALL_OW 251
14488: ST_TO_ADDR
// if MineAtPos ( x , y ) then
14489: LD_VAR 0 4
14493: PPUSH
14494: LD_VAR 0 5
14498: PPUSH
14499: CALL_OW 458
14503: IFFALSE 14676
// begin LaunchMineAtPos ( x , y , 8 ) ;
14505: LD_VAR 0 4
14509: PPUSH
14510: LD_VAR 0 5
14514: PPUSH
14515: LD_INT 8
14517: PPUSH
14518: CALL_OW 456
// if not dialogueMineDetected then
14522: LD_EXP 28
14526: NOT
14527: IFFALSE 14588
// begin CenterNowOnXY ( x , y ) ;
14529: LD_VAR 0 4
14533: PPUSH
14534: LD_VAR 0 5
14538: PPUSH
14539: CALL_OW 86
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Mine ) ;
14543: LD_EXP 9
14547: PPUSH
14548: LD_STRING D
14550: PUSH
14551: LD_STRING I
14553: PUSH
14554: LD_STRING J
14556: PUSH
14557: LD_STRING S
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: LIST
14564: PUSH
14565: LD_EXP 25
14569: ARRAY
14570: STR
14571: PUSH
14572: LD_STRING -1-Mine
14574: STR
14575: PPUSH
14576: CALL_OW 88
// dialogueMineDetected := true ;
14580: LD_ADDR_EXP 28
14584: PUSH
14585: LD_INT 1
14587: ST_TO_ADDR
// end ; for j = 1 to staticMines do
14588: LD_ADDR_VAR 0 2
14592: PUSH
14593: DOUBLE
14594: LD_INT 1
14596: DEC
14597: ST_TO_ADDR
14598: LD_EXP 16
14602: PUSH
14603: FOR_TO
14604: IFFALSE 14674
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
14606: LD_EXP 16
14610: PUSH
14611: LD_VAR 0 2
14615: ARRAY
14616: PUSH
14617: LD_INT 1
14619: ARRAY
14620: PUSH
14621: LD_VAR 0 4
14625: EQUAL
14626: PUSH
14627: LD_EXP 16
14631: PUSH
14632: LD_VAR 0 2
14636: ARRAY
14637: PUSH
14638: LD_INT 2
14640: ARRAY
14641: PUSH
14642: LD_VAR 0 5
14646: EQUAL
14647: AND
14648: IFFALSE 14672
// begin staticMines := Delete ( staticMines , j ) ;
14650: LD_ADDR_EXP 16
14654: PUSH
14655: LD_EXP 16
14659: PPUSH
14660: LD_VAR 0 2
14664: PPUSH
14665: CALL_OW 3
14669: ST_TO_ADDR
// break ;
14670: GO 14674
// end ;
14672: GO 14603
14674: POP
14675: POP
// end ; end ;
14676: GO 14456
14678: POP
14679: POP
// end ;
14680: PPOPN 5
14682: END
// every 30 30$00 + 50 50$00 trigger GameType = 1 and game and sibBombAllowed and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_btype , b_factory ] ) do var bomb , e ;
14683: LD_EXP 2
14687: PUSH
14688: LD_INT 1
14690: EQUAL
14691: PUSH
14692: LD_EXP 3
14696: AND
14697: PUSH
14698: LD_EXP 23
14702: AND
14703: PUSH
14704: LD_EXP 36
14708: PUSH
14709: LD_EXP 7
14713: ARRAY
14714: PPUSH
14715: LD_INT 30
14717: PUSH
14718: LD_INT 3
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PPUSH
14725: CALL_OW 72
14729: AND
14730: IFFALSE 14934
14732: GO 14734
14734: DISABLE
14735: LD_INT 0
14737: PPUSH
14738: PPUSH
// begin enable ;
14739: ENABLE
// MC_InsertProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
14740: LD_EXP 7
14744: PPUSH
14745: LD_INT 23
14747: PUSH
14748: LD_INT 3
14750: PUSH
14751: LD_INT 3
14753: PUSH
14754: LD_INT 48
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: PUSH
14763: EMPTY
14764: LIST
14765: PPUSH
14766: CALL 86326 0 2
// repeat wait ( 0 0$1 ) ;
14770: LD_INT 35
14772: PPUSH
14773: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14777: LD_INT 22
14779: PUSH
14780: LD_INT 3
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PUSH
14787: LD_INT 34
14789: PUSH
14790: LD_INT 48
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PPUSH
14801: CALL_OW 69
14805: IFFALSE 14770
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14807: LD_ADDR_VAR 0 1
14811: PUSH
14812: LD_INT 22
14814: PUSH
14815: LD_INT 3
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: LD_INT 34
14824: PUSH
14825: LD_INT 48
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PPUSH
14836: CALL_OW 69
14840: ST_TO_ADDR
// e := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) ;
14841: LD_ADDR_VAR 0 2
14845: PUSH
14846: LD_INT 81
14848: PUSH
14849: LD_INT 3
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: LD_INT 21
14858: PUSH
14859: LD_INT 3
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PPUSH
14870: CALL_OW 69
14874: ST_TO_ADDR
// if e then
14875: LD_VAR 0 2
14879: IFFALSE 14905
// e := NearestUnitToUnit ( e , bomb [ 1 ] ) ;
14881: LD_ADDR_VAR 0 2
14885: PUSH
14886: LD_VAR 0 2
14890: PPUSH
14891: LD_VAR 0 1
14895: PUSH
14896: LD_INT 1
14898: ARRAY
14899: PPUSH
14900: CALL_OW 74
14904: ST_TO_ADDR
// ComAttackPlace ( bomb , GetX ( e ) , GetY ( e ) ) ;
14905: LD_VAR 0 1
14909: PPUSH
14910: LD_VAR 0 2
14914: PPUSH
14915: CALL_OW 250
14919: PPUSH
14920: LD_VAR 0 2
14924: PPUSH
14925: CALL_OW 251
14929: PPUSH
14930: CALL_OW 116
// end ;
14934: PPOPN 2
14936: END
// every 0 0$2 trigger Difficulty > 1 and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) and GameType = 1 and game and GetTech ( tech_Behemoth , 3 ) = state_researched do var tmp , i ;
14937: LD_OWVAR 67
14941: PUSH
14942: LD_INT 1
14944: GREATER
14945: PUSH
14946: LD_EXP 36
14950: PUSH
14951: LD_EXP 7
14955: ARRAY
14956: PPUSH
14957: LD_INT 25
14959: PUSH
14960: LD_INT 3
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PPUSH
14967: CALL_OW 72
14971: AND
14972: PUSH
14973: LD_EXP 2
14977: PUSH
14978: LD_INT 1
14980: EQUAL
14981: AND
14982: PUSH
14983: LD_EXP 3
14987: AND
14988: PUSH
14989: LD_INT 23
14991: PPUSH
14992: LD_INT 3
14994: PPUSH
14995: CALL_OW 321
14999: PUSH
15000: LD_INT 2
15002: EQUAL
15003: AND
15004: IFFALSE 15131
15006: GO 15008
15008: DISABLE
15009: LD_INT 0
15011: PPUSH
15012: PPUSH
// begin tmp := UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) ;
15013: LD_ADDR_VAR 0 1
15017: PUSH
15018: LD_EXP 36
15022: PUSH
15023: LD_EXP 7
15027: ARRAY
15028: PPUSH
15029: LD_INT 25
15031: PUSH
15032: LD_INT 3
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: PPUSH
15039: CALL_OW 72
15043: ST_TO_ADDR
// if not tmp then
15044: LD_VAR 0 1
15048: NOT
15049: IFFALSE 15053
// exit ;
15051: GO 15131
// for i in tmp do
15053: LD_ADDR_VAR 0 2
15057: PUSH
15058: LD_VAR 0 1
15062: PUSH
15063: FOR_IN
15064: IFFALSE 15110
// begin SetTag ( i , 29 ) ;
15066: LD_VAR 0 2
15070: PPUSH
15071: LD_INT 29
15073: PPUSH
15074: CALL_OW 109
// ComExitBuilding ( i ) ;
15078: LD_VAR 0 2
15082: PPUSH
15083: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , 97 , 133 , 0 ) ;
15087: LD_VAR 0 2
15091: PPUSH
15092: LD_INT 37
15094: PPUSH
15095: LD_INT 97
15097: PPUSH
15098: LD_INT 133
15100: PPUSH
15101: LD_INT 0
15103: PPUSH
15104: CALL_OW 230
// end ;
15108: GO 15063
15110: POP
15111: POP
// wait ( 1 1$00 ) ;
15112: LD_INT 2100
15114: PPUSH
15115: CALL_OW 67
// MC_Reset ( mc_rus_1 , 29 ) ;
15119: LD_EXP 7
15123: PPUSH
15124: LD_INT 29
15126: PPUSH
15127: CALL 66709 0 2
// end ;
15131: PPOPN 2
15133: END
// every 7 7$00 trigger GameType = 1 and GetBType ( HexInfo ( 84 , 128 ) ) = b_warehouse and GetSide ( HexInfo ( 84 , 128 ) ) = 3 do var veh , depot ;
15134: LD_EXP 2
15138: PUSH
15139: LD_INT 1
15141: EQUAL
15142: PUSH
15143: LD_INT 84
15145: PPUSH
15146: LD_INT 128
15148: PPUSH
15149: CALL_OW 428
15153: PPUSH
15154: CALL_OW 266
15158: PUSH
15159: LD_INT 1
15161: EQUAL
15162: AND
15163: PUSH
15164: LD_INT 84
15166: PPUSH
15167: LD_INT 128
15169: PPUSH
15170: CALL_OW 428
15174: PPUSH
15175: CALL_OW 255
15179: PUSH
15180: LD_INT 3
15182: EQUAL
15183: AND
15184: IFFALSE 15357
15186: GO 15188
15188: DISABLE
15189: LD_INT 0
15191: PPUSH
15192: PPUSH
// begin enable ;
15193: ENABLE
// depot := HexInfo ( 84 , 128 ) ;
15194: LD_ADDR_VAR 0 2
15198: PUSH
15199: LD_INT 84
15201: PPUSH
15202: LD_INT 128
15204: PPUSH
15205: CALL_OW 428
15209: ST_TO_ADDR
// uc_side := 3 ;
15210: LD_ADDR_OWVAR 20
15214: PUSH
15215: LD_INT 3
15217: ST_TO_ADDR
// uc_nation := 3 ;
15218: LD_ADDR_OWVAR 21
15222: PUSH
15223: LD_INT 3
15225: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay , 0 ) ;
15226: LD_INT 21
15228: PPUSH
15229: LD_INT 3
15231: PPUSH
15232: LD_INT 3
15234: PPUSH
15235: LD_INT 51
15237: PPUSH
15238: LD_INT 0
15240: PPUSH
15241: CALL 26530 0 5
// veh := CreateVehicle ;
15245: LD_ADDR_VAR 0 1
15249: PUSH
15250: CALL_OW 45
15254: ST_TO_ADDR
// PlaceUnitXY ( veh , 126 , 227 , false ) ;
15255: LD_VAR 0 1
15259: PPUSH
15260: LD_INT 126
15262: PPUSH
15263: LD_INT 227
15265: PPUSH
15266: LD_INT 0
15268: PPUSH
15269: CALL_OW 48
// SetCargo ( veh , mat_oil , 100 ) ;
15273: LD_VAR 0 1
15277: PPUSH
15278: LD_INT 2
15280: PPUSH
15281: LD_INT 100
15283: PPUSH
15284: CALL_OW 290
// ComGive ( veh , depot ) ;
15288: LD_VAR 0 1
15292: PPUSH
15293: LD_VAR 0 2
15297: PPUSH
15298: CALL_OW 161
// AddComMoveXY ( veh , 126 , 227 ) ;
15302: LD_VAR 0 1
15306: PPUSH
15307: LD_INT 126
15309: PPUSH
15310: LD_INT 227
15312: PPUSH
15313: CALL_OW 171
// wait ( 0 0$10 ) ;
15317: LD_INT 350
15319: PPUSH
15320: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15324: LD_INT 35
15326: PPUSH
15327: CALL_OW 67
// until IsAt ( veh , 126 , 227 ) ;
15331: LD_VAR 0 1
15335: PPUSH
15336: LD_INT 126
15338: PPUSH
15339: LD_INT 227
15341: PPUSH
15342: CALL_OW 307
15346: IFFALSE 15324
// RemoveUnit ( veh ) ;
15348: LD_VAR 0 1
15352: PPUSH
15353: CALL_OW 64
// end ;
15357: PPOPN 2
15359: END
// every 9 9$00 trigger GameType = 1 and outpostEscape and commander = 2 do var veh , depot ;
15360: LD_EXP 2
15364: PUSH
15365: LD_INT 1
15367: EQUAL
15368: PUSH
15369: LD_EXP 27
15373: AND
15374: PUSH
15375: LD_EXP 25
15379: PUSH
15380: LD_INT 2
15382: EQUAL
15383: AND
15384: IFFALSE 15576
15386: GO 15388
15388: DISABLE
15389: LD_INT 0
15391: PPUSH
15392: PPUSH
// begin enable ;
15393: ENABLE
// if tick >= [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] then
15394: LD_OWVAR 1
15398: PUSH
15399: LD_INT 105000
15401: PUSH
15402: LD_INT 84000
15404: PUSH
15405: LD_INT 63000
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: LIST
15412: PUSH
15413: LD_OWVAR 67
15417: ARRAY
15418: GREATEREQUAL
15419: IFFALSE 15422
// disable ;
15421: DISABLE
// uc_side := 4 ;
15422: LD_ADDR_OWVAR 20
15426: PUSH
15427: LD_INT 4
15429: ST_TO_ADDR
// uc_nation := 1 ;
15430: LD_ADDR_OWVAR 21
15434: PUSH
15435: LD_INT 1
15437: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 0 ) ;
15438: LD_INT 2
15440: PPUSH
15441: LD_INT 3
15443: PPUSH
15444: LD_INT 3
15446: PPUSH
15447: LD_INT 12
15449: PPUSH
15450: LD_INT 0
15452: PPUSH
15453: CALL 26530 0 5
// veh := CreateVehicle ;
15457: LD_ADDR_VAR 0 1
15461: PUSH
15462: CALL_OW 45
15466: ST_TO_ADDR
// PlaceUnitXY ( veh , 229 , 226 , false ) ;
15467: LD_VAR 0 1
15471: PPUSH
15472: LD_INT 229
15474: PPUSH
15475: LD_INT 226
15477: PPUSH
15478: LD_INT 0
15480: PPUSH
15481: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
15485: LD_VAR 0 1
15489: PPUSH
15490: LD_INT 1
15492: PPUSH
15493: LD_INT 100
15495: PPUSH
15496: CALL_OW 290
// AddComMoveToArea ( veh , ruOutpostArea ) ;
15500: LD_VAR 0 1
15504: PPUSH
15505: LD_INT 25
15507: PPUSH
15508: CALL_OW 173
// AddComUnload ( veh ) ;
15512: LD_VAR 0 1
15516: PPUSH
15517: CALL_OW 219
// AddComMoveXY ( veh , 229 , 226 ) ;
15521: LD_VAR 0 1
15525: PPUSH
15526: LD_INT 229
15528: PPUSH
15529: LD_INT 226
15531: PPUSH
15532: CALL_OW 171
// wait ( 0 0$10 ) ;
15536: LD_INT 350
15538: PPUSH
15539: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15543: LD_INT 35
15545: PPUSH
15546: CALL_OW 67
// until IsAt ( veh , 229 , 226 ) ;
15550: LD_VAR 0 1
15554: PPUSH
15555: LD_INT 229
15557: PPUSH
15558: LD_INT 226
15560: PPUSH
15561: CALL_OW 307
15565: IFFALSE 15543
// RemoveUnit ( veh ) ;
15567: LD_VAR 0 1
15571: PPUSH
15572: CALL_OW 64
// end ;
15576: PPOPN 2
15578: END
// every 15 15$00 trigger GameType = 1 and game and reinforceAllowed do var i , j , veh , tmp , amount ;
15579: LD_EXP 2
15583: PUSH
15584: LD_INT 1
15586: EQUAL
15587: PUSH
15588: LD_EXP 3
15592: AND
15593: PUSH
15594: LD_EXP 24
15598: AND
15599: IFFALSE 15932
15601: GO 15603
15603: DISABLE
15604: LD_INT 0
15606: PPUSH
15607: PPUSH
15608: PPUSH
15609: PPUSH
15610: PPUSH
// begin enable ;
15611: ENABLE
// tmp := [ ] ;
15612: LD_ADDR_VAR 0 4
15616: PUSH
15617: EMPTY
15618: ST_TO_ADDR
// if commander = 1 then
15619: LD_EXP 25
15623: PUSH
15624: LD_INT 1
15626: EQUAL
15627: IFFALSE 15639
// amount := 3 else
15629: LD_ADDR_VAR 0 5
15633: PUSH
15634: LD_INT 3
15636: ST_TO_ADDR
15637: GO 15647
// amount := 2 ;
15639: LD_ADDR_VAR 0 5
15643: PUSH
15644: LD_INT 2
15646: ST_TO_ADDR
// for i = 1 to amount do
15647: LD_ADDR_VAR 0 1
15651: PUSH
15652: DOUBLE
15653: LD_INT 1
15655: DEC
15656: ST_TO_ADDR
15657: LD_VAR 0 5
15661: PUSH
15662: FOR_TO
15663: IFFALSE 15827
// begin wait ( 0 0$5 ) ;
15665: LD_INT 175
15667: PPUSH
15668: CALL_OW 67
// for j = 1 to 3 do
15672: LD_ADDR_VAR 0 2
15676: PUSH
15677: DOUBLE
15678: LD_INT 1
15680: DEC
15681: ST_TO_ADDR
15682: LD_INT 3
15684: PUSH
15685: FOR_TO
15686: IFFALSE 15823
// begin uc_side := 4 ;
15688: LD_ADDR_OWVAR 20
15692: PUSH
15693: LD_INT 4
15695: ST_TO_ADDR
// uc_nation := 1 ;
15696: LD_ADDR_OWVAR 21
15700: PUSH
15701: LD_INT 1
15703: ST_TO_ADDR
// PrepareVehicle ( [ us_medium_tracked , us_morphling ] [ rand ( 1 , 2 ) ] , engine_siberite , control_computer , [ us_laser , us_double_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
15704: LD_INT 3
15706: PUSH
15707: LD_INT 5
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: LD_INT 1
15716: PPUSH
15717: LD_INT 2
15719: PPUSH
15720: CALL_OW 12
15724: ARRAY
15725: PPUSH
15726: LD_INT 3
15728: PPUSH
15729: LD_INT 3
15731: PPUSH
15732: LD_INT 9
15734: PUSH
15735: LD_INT 5
15737: PUSH
15738: LD_INT 7
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: LIST
15745: PUSH
15746: LD_INT 1
15748: PPUSH
15749: LD_INT 3
15751: PPUSH
15752: CALL_OW 12
15756: ARRAY
15757: PPUSH
15758: LD_INT 100
15760: PPUSH
15761: CALL 26530 0 5
// veh := CreateVehicle ;
15765: LD_ADDR_VAR 0 3
15769: PUSH
15770: CALL_OW 45
15774: ST_TO_ADDR
// tmp := tmp ^ veh ;
15775: LD_ADDR_VAR 0 4
15779: PUSH
15780: LD_VAR 0 4
15784: PUSH
15785: LD_VAR 0 3
15789: ADD
15790: ST_TO_ADDR
// PlaceUnitArea ( veh , westSpawn , false ) ;
15791: LD_VAR 0 3
15795: PPUSH
15796: LD_INT 22
15798: PPUSH
15799: LD_INT 0
15801: PPUSH
15802: CALL_OW 49
// ComMoveXY ( veh , 119 , 215 ) ;
15806: LD_VAR 0 3
15810: PPUSH
15811: LD_INT 119
15813: PPUSH
15814: LD_INT 215
15816: PPUSH
15817: CALL_OW 111
// end ;
15821: GO 15685
15823: POP
15824: POP
// end ;
15825: GO 15662
15827: POP
15828: POP
// wait ( 0 0$3 ) ;
15829: LD_INT 105
15831: PPUSH
15832: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15836: LD_INT 35
15838: PPUSH
15839: CALL_OW 67
// for i in tmp do
15843: LD_ADDR_VAR 0 1
15847: PUSH
15848: LD_VAR 0 4
15852: PUSH
15853: FOR_IN
15854: IFFALSE 15921
// if IsDead ( i ) then
15856: LD_VAR 0 1
15860: PPUSH
15861: CALL_OW 301
15865: IFFALSE 15885
// tmp := tmp diff i else
15867: LD_ADDR_VAR 0 4
15871: PUSH
15872: LD_VAR 0 4
15876: PUSH
15877: LD_VAR 0 1
15881: DIFF
15882: ST_TO_ADDR
15883: GO 15919
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) ;
15885: LD_VAR 0 1
15889: PPUSH
15890: LD_INT 81
15892: PUSH
15893: LD_INT 4
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: PPUSH
15900: CALL_OW 69
15904: PPUSH
15905: LD_VAR 0 1
15909: PPUSH
15910: CALL_OW 74
15914: PPUSH
15915: CALL_OW 115
15919: GO 15853
15921: POP
15922: POP
// until tmp = [ ] ;
15923: LD_VAR 0 4
15927: PUSH
15928: EMPTY
15929: EQUAL
15930: IFFALSE 15836
// end ;
15932: PPOPN 5
15934: END
// every 0 0$1 trigger GameType = 1 and game do var i , tmp ;
15935: LD_EXP 2
15939: PUSH
15940: LD_INT 1
15942: EQUAL
15943: PUSH
15944: LD_EXP 3
15948: AND
15949: IFFALSE 16050
15951: GO 15953
15953: DISABLE
15954: LD_INT 0
15956: PPUSH
15957: PPUSH
// begin enable ;
15958: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
15959: LD_ADDR_VAR 0 2
15963: PUSH
15964: LD_INT 3
15966: PUSH
15967: LD_INT 22
15969: PUSH
15970: LD_INT 1
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PUSH
15981: LD_INT 32
15983: PUSH
15984: LD_INT 1
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PPUSH
15995: CALL_OW 69
15999: ST_TO_ADDR
// if tmp then
16000: LD_VAR 0 2
16004: IFFALSE 16050
// for i in tmp do
16006: LD_ADDR_VAR 0 1
16010: PUSH
16011: LD_VAR 0 2
16015: PUSH
16016: FOR_IN
16017: IFFALSE 16048
// if GetFuel ( i ) < 3 then
16019: LD_VAR 0 1
16023: PPUSH
16024: CALL_OW 261
16028: PUSH
16029: LD_INT 3
16031: LESS
16032: IFFALSE 16046
// SetFuel ( i , 3 ) ;
16034: LD_VAR 0 1
16038: PPUSH
16039: LD_INT 3
16041: PPUSH
16042: CALL_OW 240
16046: GO 16016
16048: POP
16049: POP
// end ;
16050: PPOPN 2
16052: END
// every 15 15$00 trigger game and GetAttitude ( 8 , 4 ) = att_enemy do var i , un , tmp ;
16053: LD_EXP 3
16057: PUSH
16058: LD_INT 8
16060: PPUSH
16061: LD_INT 4
16063: PPUSH
16064: CALL_OW 81
16068: PUSH
16069: LD_INT 2
16071: EQUAL
16072: AND
16073: IFFALSE 16283
16075: GO 16077
16077: DISABLE
16078: LD_INT 0
16080: PPUSH
16081: PPUSH
16082: PPUSH
// begin enable ;
16083: ENABLE
// tmp := [ ] ;
16084: LD_ADDR_VAR 0 3
16088: PUSH
16089: EMPTY
16090: ST_TO_ADDR
// for i = 1 to 4 do
16091: LD_ADDR_VAR 0 1
16095: PUSH
16096: DOUBLE
16097: LD_INT 1
16099: DEC
16100: ST_TO_ADDR
16101: LD_INT 4
16103: PUSH
16104: FOR_TO
16105: IFFALSE 16249
// begin uc_side := 8 ;
16107: LD_ADDR_OWVAR 20
16111: PUSH
16112: LD_INT 8
16114: ST_TO_ADDR
// uc_nation := nation_arabian ;
16115: LD_ADDR_OWVAR 21
16119: PUSH
16120: LD_INT 2
16122: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] , rand ( 60 , 80 ) ) ;
16123: LD_INT 11
16125: PPUSH
16126: LD_INT 1
16128: PPUSH
16129: LD_INT 5
16131: PPUSH
16132: LD_INT 24
16134: PUSH
16135: LD_INT 23
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: PUSH
16142: LD_INT 1
16144: PPUSH
16145: LD_INT 2
16147: PPUSH
16148: CALL_OW 12
16152: ARRAY
16153: PPUSH
16154: LD_INT 60
16156: PPUSH
16157: LD_INT 80
16159: PPUSH
16160: CALL_OW 12
16164: PPUSH
16165: CALL 26530 0 5
// un := CreateVehicle ;
16169: LD_ADDR_VAR 0 2
16173: PUSH
16174: CALL_OW 45
16178: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16179: LD_VAR 0 2
16183: PPUSH
16184: LD_INT 2
16186: PPUSH
16187: CALL_OW 233
// tmp := tmp ^ un ;
16191: LD_ADDR_VAR 0 3
16195: PUSH
16196: LD_VAR 0 3
16200: PUSH
16201: LD_VAR 0 2
16205: ADD
16206: ST_TO_ADDR
// PlaceUnitXY ( un , 88 , 2 , false ) ;
16207: LD_VAR 0 2
16211: PPUSH
16212: LD_INT 88
16214: PPUSH
16215: LD_INT 2
16217: PPUSH
16218: LD_INT 0
16220: PPUSH
16221: CALL_OW 48
// ComMoveXY ( un , 93 , 13 ) ;
16225: LD_VAR 0 2
16229: PPUSH
16230: LD_INT 93
16232: PPUSH
16233: LD_INT 13
16235: PPUSH
16236: CALL_OW 111
// wait ( 0 0$2 ) ;
16240: LD_INT 70
16242: PPUSH
16243: CALL_OW 67
// end ;
16247: GO 16104
16249: POP
16250: POP
// for i in tmp do
16251: LD_ADDR_VAR 0 1
16255: PUSH
16256: LD_VAR 0 3
16260: PUSH
16261: FOR_IN
16262: IFFALSE 16281
// AddComMoveXY ( i , 136 , 19 ) ;
16264: LD_VAR 0 1
16268: PPUSH
16269: LD_INT 136
16271: PPUSH
16272: LD_INT 19
16274: PPUSH
16275: CALL_OW 171
16279: GO 16261
16281: POP
16282: POP
// end ;
16283: PPOPN 3
16285: END
// every 7 7$30 + 7 7$30 trigger game do var i , base , tmp , target ;
16286: LD_EXP 3
16290: IFFALSE 17209
16292: GO 16294
16294: DISABLE
16295: LD_INT 0
16297: PPUSH
16298: PPUSH
16299: PPUSH
16300: PPUSH
// begin enable ;
16301: ENABLE
// base := mc_leg ;
16302: LD_ADDR_VAR 0 2
16306: PUSH
16307: LD_EXP 6
16311: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
16312: LD_INT 22
16314: PUSH
16315: LD_INT 8
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: PUSH
16322: LD_INT 23
16324: PUSH
16325: LD_INT 2
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: PUSH
16332: LD_INT 30
16334: PUSH
16335: LD_INT 3
16337: PUSH
16338: EMPTY
16339: LIST
16340: LIST
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: LIST
16346: PPUSH
16347: CALL_OW 69
16351: NOT
16352: IFFALSE 16356
// exit ;
16354: GO 17209
// if Prob ( 40 ) then
16356: LD_INT 40
16358: PPUSH
16359: CALL_OW 13
16363: IFFALSE 16492
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16365: LD_VAR 0 2
16369: PPUSH
16370: LD_INT 13
16372: PUSH
16373: LD_INT 1
16375: PUSH
16376: LD_INT 2
16378: PUSH
16379: LD_INT 28
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: PUSH
16388: LD_INT 13
16390: PUSH
16391: LD_INT 1
16393: PUSH
16394: LD_INT 2
16396: PUSH
16397: LD_INT 28
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: PUSH
16406: LD_INT 13
16408: PUSH
16409: LD_INT 1
16411: PUSH
16412: LD_INT 2
16414: PUSH
16415: LD_INT 28
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: PUSH
16424: LD_INT 13
16426: PUSH
16427: LD_INT 1
16429: PUSH
16430: LD_INT 2
16432: PUSH
16433: LD_INT 28
16435: PUSH
16436: EMPTY
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 13
16444: PUSH
16445: LD_INT 1
16447: PUSH
16448: LD_INT 2
16450: PUSH
16451: LD_INT 28
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: PUSH
16460: LD_INT 13
16462: PUSH
16463: LD_INT 1
16465: PUSH
16466: LD_INT 2
16468: PUSH
16469: LD_INT 26
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: PPUSH
16486: CALL 86326 0 2
// end else
16490: GO 16709
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16492: LD_VAR 0 2
16496: PPUSH
16497: LD_INT 13
16499: PUSH
16500: LD_INT 1
16502: PUSH
16503: LD_INT 2
16505: PUSH
16506: LD_INT 27
16508: PUSH
16509: LD_INT 26
16511: PUSH
16512: LD_INT 26
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: LIST
16519: PUSH
16520: LD_INT 1
16522: PPUSH
16523: LD_INT 3
16525: PPUSH
16526: CALL_OW 12
16530: ARRAY
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: PUSH
16538: LD_INT 13
16540: PUSH
16541: LD_INT 1
16543: PUSH
16544: LD_INT 2
16546: PUSH
16547: LD_INT 27
16549: PUSH
16550: LD_INT 26
16552: PUSH
16553: LD_INT 26
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: LIST
16560: PUSH
16561: LD_INT 1
16563: PPUSH
16564: LD_INT 3
16566: PPUSH
16567: CALL_OW 12
16571: ARRAY
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: PUSH
16579: LD_INT 13
16581: PUSH
16582: LD_INT 1
16584: PUSH
16585: LD_INT 2
16587: PUSH
16588: LD_INT 26
16590: PUSH
16591: LD_INT 26
16593: PUSH
16594: LD_INT 29
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: LIST
16601: PUSH
16602: LD_INT 1
16604: PPUSH
16605: LD_INT 3
16607: PPUSH
16608: CALL_OW 12
16612: ARRAY
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 13
16622: PUSH
16623: LD_INT 1
16625: PUSH
16626: LD_INT 2
16628: PUSH
16629: LD_INT 26
16631: PUSH
16632: LD_INT 29
16634: PUSH
16635: LD_INT 29
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: LIST
16642: PUSH
16643: LD_INT 1
16645: PPUSH
16646: LD_INT 3
16648: PPUSH
16649: CALL_OW 12
16653: ARRAY
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: PUSH
16661: LD_INT 13
16663: PUSH
16664: LD_INT 1
16666: PUSH
16667: LD_INT 2
16669: PUSH
16670: LD_INT 29
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: PUSH
16679: LD_INT 13
16681: PUSH
16682: LD_INT 1
16684: PUSH
16685: LD_INT 2
16687: PUSH
16688: LD_INT 26
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: PPUSH
16705: CALL 86326 0 2
// end ; repeat wait ( 0 0$1 ) ;
16709: LD_INT 35
16711: PPUSH
16712: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 6 or tick mod 10 10$00 = 0 ;
16716: LD_VAR 0 2
16720: PPUSH
16721: LD_INT 1
16723: PPUSH
16724: CALL 87744 0 2
16728: PUSH
16729: LD_INT 6
16731: GREATEREQUAL
16732: PUSH
16733: LD_OWVAR 1
16737: PUSH
16738: LD_INT 21000
16740: MOD
16741: PUSH
16742: LD_INT 0
16744: EQUAL
16745: OR
16746: IFFALSE 16709
// wait ( 0 0$30 ) ;
16748: LD_INT 1050
16750: PPUSH
16751: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
16755: LD_ADDR_VAR 0 3
16759: PUSH
16760: LD_VAR 0 2
16764: PPUSH
16765: LD_INT 1
16767: PPUSH
16768: CALL 87744 0 2
16772: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
16773: LD_ADDR_EXP 55
16777: PUSH
16778: LD_EXP 55
16782: PPUSH
16783: LD_VAR 0 2
16787: PPUSH
16788: LD_EXP 55
16792: PUSH
16793: LD_VAR 0 2
16797: ARRAY
16798: PUSH
16799: LD_VAR 0 3
16803: DIFF
16804: PPUSH
16805: CALL_OW 1
16809: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
16810: LD_ADDR_VAR 0 4
16814: PUSH
16815: LD_INT 0
16817: PPUSH
16818: LD_INT 2
16820: PPUSH
16821: CALL_OW 12
16825: ST_TO_ADDR
// if legChangeSide then
16826: LD_EXP 21
16830: IFFALSE 16840
// target := 2 ;
16832: LD_ADDR_VAR 0 4
16836: PUSH
16837: LD_INT 2
16839: ST_TO_ADDR
// if target = 2 then
16840: LD_VAR 0 4
16844: PUSH
16845: LD_INT 2
16847: EQUAL
16848: IFFALSE 16976
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16850: LD_ADDR_VAR 0 3
16854: PUSH
16855: LD_VAR 0 3
16859: PPUSH
16860: LD_INT 24
16862: PUSH
16863: LD_INT 250
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: PPUSH
16870: CALL_OW 72
16874: ST_TO_ADDR
// for i in tmp do
16875: LD_ADDR_VAR 0 1
16879: PUSH
16880: LD_VAR 0 3
16884: PUSH
16885: FOR_IN
16886: IFFALSE 16926
// if GetDistUnitXY ( i , 112 , 64 ) > 9 then
16888: LD_VAR 0 1
16892: PPUSH
16893: LD_INT 112
16895: PPUSH
16896: LD_INT 64
16898: PPUSH
16899: CALL_OW 297
16903: PUSH
16904: LD_INT 9
16906: GREATER
16907: IFFALSE 16924
// ComMoveXY ( i , 112 , 64 ) ;
16909: LD_VAR 0 1
16913: PPUSH
16914: LD_INT 112
16916: PPUSH
16917: LD_INT 64
16919: PPUSH
16920: CALL_OW 111
16924: GO 16885
16926: POP
16927: POP
// wait ( 0 0$1 ) ;
16928: LD_INT 35
16930: PPUSH
16931: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 112 , 64 , 9 ] ) >= ( tmp - 1 ) ;
16935: LD_VAR 0 3
16939: PPUSH
16940: LD_INT 92
16942: PUSH
16943: LD_INT 112
16945: PUSH
16946: LD_INT 64
16948: PUSH
16949: LD_INT 9
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: PPUSH
16958: CALL_OW 72
16962: PUSH
16963: LD_VAR 0 3
16967: PUSH
16968: LD_INT 1
16970: MINUS
16971: GREATEREQUAL
16972: IFFALSE 16850
// end else
16974: GO 17100
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16976: LD_ADDR_VAR 0 3
16980: PUSH
16981: LD_VAR 0 3
16985: PPUSH
16986: LD_INT 24
16988: PUSH
16989: LD_INT 250
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PPUSH
16996: CALL_OW 72
17000: ST_TO_ADDR
// for i in tmp do
17001: LD_ADDR_VAR 0 1
17005: PUSH
17006: LD_VAR 0 3
17010: PUSH
17011: FOR_IN
17012: IFFALSE 17052
// if GetDistUnitXY ( i , 174 , 94 ) > 9 then
17014: LD_VAR 0 1
17018: PPUSH
17019: LD_INT 174
17021: PPUSH
17022: LD_INT 94
17024: PPUSH
17025: CALL_OW 297
17029: PUSH
17030: LD_INT 9
17032: GREATER
17033: IFFALSE 17050
// ComMoveXY ( i , 174 , 94 ) ;
17035: LD_VAR 0 1
17039: PPUSH
17040: LD_INT 174
17042: PPUSH
17043: LD_INT 94
17045: PPUSH
17046: CALL_OW 111
17050: GO 17011
17052: POP
17053: POP
// wait ( 0 0$1 ) ;
17054: LD_INT 35
17056: PPUSH
17057: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 174 , 94 , 9 ] ) >= ( tmp - 1 ) ;
17061: LD_VAR 0 3
17065: PPUSH
17066: LD_INT 92
17068: PUSH
17069: LD_INT 174
17071: PUSH
17072: LD_INT 94
17074: PUSH
17075: LD_INT 9
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: PPUSH
17084: CALL_OW 72
17088: PUSH
17089: LD_VAR 0 3
17093: PUSH
17094: LD_INT 1
17096: MINUS
17097: GREATEREQUAL
17098: IFFALSE 16976
// end ; repeat wait ( 0 0$1 ) ;
17100: LD_INT 35
17102: PPUSH
17103: CALL_OW 67
// for i in tmp do
17107: LD_ADDR_VAR 0 1
17111: PUSH
17112: LD_VAR 0 3
17116: PUSH
17117: FOR_IN
17118: IFFALSE 17200
// begin if GetLives ( i ) > 251 then
17120: LD_VAR 0 1
17124: PPUSH
17125: CALL_OW 256
17129: PUSH
17130: LD_INT 251
17132: GREATER
17133: IFFALSE 17171
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
17135: LD_VAR 0 1
17139: PPUSH
17140: LD_INT 81
17142: PUSH
17143: LD_INT 8
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PPUSH
17150: CALL_OW 69
17154: PPUSH
17155: LD_VAR 0 1
17159: PPUSH
17160: CALL_OW 74
17164: PPUSH
17165: CALL_OW 115
17169: GO 17198
// if IsDead ( i ) then
17171: LD_VAR 0 1
17175: PPUSH
17176: CALL_OW 301
17180: IFFALSE 17198
// tmp := tmp diff i ;
17182: LD_ADDR_VAR 0 3
17186: PUSH
17187: LD_VAR 0 3
17191: PUSH
17192: LD_VAR 0 1
17196: DIFF
17197: ST_TO_ADDR
// end ;
17198: GO 17117
17200: POP
17201: POP
// until not tmp ;
17202: LD_VAR 0 3
17206: NOT
17207: IFFALSE 17100
// end ;
17209: PPOPN 4
17211: END
// every 7 7$30 trigger game do var i , base , tmp , target , teleport ;
17212: LD_EXP 3
17216: IFFALSE 18204
17218: GO 17220
17220: DISABLE
17221: LD_INT 0
17223: PPUSH
17224: PPUSH
17225: PPUSH
17226: PPUSH
17227: PPUSH
// begin enable ;
17228: ENABLE
// if not UnitFilter ( mc_bases [ mc_rus_2 ] , [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
17229: LD_EXP 36
17233: PUSH
17234: LD_EXP 8
17238: ARRAY
17239: PPUSH
17240: LD_INT 22
17242: PUSH
17243: LD_INT 3
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PUSH
17250: LD_INT 30
17252: PUSH
17253: LD_INT 3
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PPUSH
17264: CALL_OW 72
17268: NOT
17269: IFFALSE 17273
// exit ;
17271: GO 18204
// base := mc_rus_2 ;
17273: LD_ADDR_VAR 0 2
17277: PUSH
17278: LD_EXP 8
17282: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
17283: LD_ADDR_VAR 0 5
17287: PUSH
17288: LD_INT 22
17290: PUSH
17291: LD_INT 3
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 30
17300: PUSH
17301: LD_INT 34
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PPUSH
17312: CALL_OW 69
17316: ST_TO_ADDR
// if Prob ( 40 ) then
17317: LD_INT 40
17319: PPUSH
17320: CALL_OW 13
17324: IFFALSE 17453
// begin MC_InsertProduceList ( base , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17326: LD_VAR 0 2
17330: PPUSH
17331: LD_INT 22
17333: PUSH
17334: LD_INT 3
17336: PUSH
17337: LD_INT 3
17339: PUSH
17340: LD_INT 49
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: PUSH
17349: LD_INT 22
17351: PUSH
17352: LD_INT 3
17354: PUSH
17355: LD_INT 3
17357: PUSH
17358: LD_INT 49
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 22
17369: PUSH
17370: LD_INT 3
17372: PUSH
17373: LD_INT 3
17375: PUSH
17376: LD_INT 49
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 24
17387: PUSH
17388: LD_INT 3
17390: PUSH
17391: LD_INT 3
17393: PUSH
17394: LD_INT 46
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: PUSH
17403: LD_INT 24
17405: PUSH
17406: LD_INT 3
17408: PUSH
17409: LD_INT 3
17411: PUSH
17412: LD_INT 46
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 24
17423: PUSH
17424: LD_INT 3
17426: PUSH
17427: LD_INT 3
17429: PUSH
17430: LD_INT 46
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: PPUSH
17447: CALL 86326 0 2
// end else
17451: GO 17578
// begin MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17453: LD_VAR 0 2
17457: PPUSH
17458: LD_INT 24
17460: PUSH
17461: LD_INT 3
17463: PUSH
17464: LD_INT 3
17466: PUSH
17467: LD_INT 47
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 24
17478: PUSH
17479: LD_INT 3
17481: PUSH
17482: LD_INT 3
17484: PUSH
17485: LD_INT 47
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: PUSH
17494: LD_INT 24
17496: PUSH
17497: LD_INT 3
17499: PUSH
17500: LD_INT 3
17502: PUSH
17503: LD_INT 47
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 24
17514: PUSH
17515: LD_INT 3
17517: PUSH
17518: LD_INT 3
17520: PUSH
17521: LD_INT 46
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: PUSH
17530: LD_INT 24
17532: PUSH
17533: LD_INT 3
17535: PUSH
17536: LD_INT 3
17538: PUSH
17539: LD_INT 46
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 24
17550: PUSH
17551: LD_INT 3
17553: PUSH
17554: LD_INT 3
17556: PUSH
17557: LD_INT 46
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: PPUSH
17574: CALL 86326 0 2
// end ; if Difficulty > 1 then
17578: LD_OWVAR 67
17582: PUSH
17583: LD_INT 1
17585: GREATER
17586: IFFALSE 17618
// MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
17588: LD_VAR 0 2
17592: PPUSH
17593: LD_INT 24
17595: PUSH
17596: LD_INT 3
17598: PUSH
17599: LD_INT 3
17601: PUSH
17602: LD_INT 47
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: PUSH
17611: EMPTY
17612: LIST
17613: PPUSH
17614: CALL 86326 0 2
// repeat wait ( 0 0$1 ) ;
17618: LD_INT 35
17620: PPUSH
17621: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] or tick mod 10 10$00 = 0 ;
17625: LD_VAR 0 2
17629: PPUSH
17630: LD_INT 1
17632: PPUSH
17633: CALL 87744 0 2
17637: PUSH
17638: LD_INT 6
17640: PUSH
17641: LD_INT 7
17643: PUSH
17644: LD_INT 7
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: LIST
17651: PUSH
17652: LD_OWVAR 67
17656: ARRAY
17657: GREATEREQUAL
17658: PUSH
17659: LD_OWVAR 1
17663: PUSH
17664: LD_INT 21000
17666: MOD
17667: PUSH
17668: LD_INT 0
17670: EQUAL
17671: OR
17672: IFFALSE 17618
// wait ( 0 0$45 ) ;
17674: LD_INT 1575
17676: PPUSH
17677: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
17681: LD_ADDR_VAR 0 3
17685: PUSH
17686: LD_VAR 0 2
17690: PPUSH
17691: LD_INT 1
17693: PPUSH
17694: CALL 87744 0 2
17698: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
17699: LD_ADDR_EXP 55
17703: PUSH
17704: LD_EXP 55
17708: PPUSH
17709: LD_VAR 0 2
17713: PPUSH
17714: LD_EXP 55
17718: PUSH
17719: LD_VAR 0 2
17723: ARRAY
17724: PUSH
17725: LD_VAR 0 3
17729: DIFF
17730: PPUSH
17731: CALL_OW 1
17735: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
17736: LD_ADDR_VAR 0 4
17740: PUSH
17741: LD_INT 0
17743: PPUSH
17744: LD_INT 1
17746: PPUSH
17747: CALL_OW 12
17751: ST_TO_ADDR
// if target then
17752: LD_VAR 0 4
17756: IFFALSE 17884
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17758: LD_ADDR_VAR 0 3
17762: PUSH
17763: LD_VAR 0 3
17767: PPUSH
17768: LD_INT 24
17770: PUSH
17771: LD_INT 250
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PPUSH
17778: CALL_OW 72
17782: ST_TO_ADDR
// for i in tmp do
17783: LD_ADDR_VAR 0 1
17787: PUSH
17788: LD_VAR 0 3
17792: PUSH
17793: FOR_IN
17794: IFFALSE 17834
// if GetDistUnitXY ( i , 84 , 32 ) > 9 then
17796: LD_VAR 0 1
17800: PPUSH
17801: LD_INT 84
17803: PPUSH
17804: LD_INT 32
17806: PPUSH
17807: CALL_OW 297
17811: PUSH
17812: LD_INT 9
17814: GREATER
17815: IFFALSE 17832
// ComMoveXY ( i , 84 , 32 ) ;
17817: LD_VAR 0 1
17821: PPUSH
17822: LD_INT 84
17824: PPUSH
17825: LD_INT 32
17827: PPUSH
17828: CALL_OW 111
17832: GO 17793
17834: POP
17835: POP
// wait ( 0 0$1 ) ;
17836: LD_INT 35
17838: PPUSH
17839: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 84 , 32 , 9 ] ) >= ( tmp - 1 ) ;
17843: LD_VAR 0 3
17847: PPUSH
17848: LD_INT 92
17850: PUSH
17851: LD_INT 84
17853: PUSH
17854: LD_INT 32
17856: PUSH
17857: LD_INT 9
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: PPUSH
17866: CALL_OW 72
17870: PUSH
17871: LD_VAR 0 3
17875: PUSH
17876: LD_INT 1
17878: MINUS
17879: GREATEREQUAL
17880: IFFALSE 17758
// end else
17882: GO 18044
// begin if teleport then
17884: LD_VAR 0 5
17888: IFFALSE 17908
// ComEnterUnit ( tmp , teleport [ 1 ] ) ;
17890: LD_VAR 0 3
17894: PPUSH
17895: LD_VAR 0 5
17899: PUSH
17900: LD_INT 1
17902: ARRAY
17903: PPUSH
17904: CALL_OW 120
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17908: LD_ADDR_VAR 0 3
17912: PUSH
17913: LD_VAR 0 3
17917: PPUSH
17918: LD_INT 24
17920: PUSH
17921: LD_INT 250
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PPUSH
17928: CALL_OW 72
17932: ST_TO_ADDR
// for i in tmp do
17933: LD_ADDR_VAR 0 1
17937: PUSH
17938: LD_VAR 0 3
17942: PUSH
17943: FOR_IN
17944: IFFALSE 17996
// if GetDistUnitXY ( i , 140 , 219 ) > 9 and not HasTask ( i ) then
17946: LD_VAR 0 1
17950: PPUSH
17951: LD_INT 140
17953: PPUSH
17954: LD_INT 219
17956: PPUSH
17957: CALL_OW 297
17961: PUSH
17962: LD_INT 9
17964: GREATER
17965: PUSH
17966: LD_VAR 0 1
17970: PPUSH
17971: CALL_OW 314
17975: NOT
17976: AND
17977: IFFALSE 17994
// AddComMoveXY ( i , 140 , 219 ) ;
17979: LD_VAR 0 1
17983: PPUSH
17984: LD_INT 140
17986: PPUSH
17987: LD_INT 219
17989: PPUSH
17990: CALL_OW 171
17994: GO 17943
17996: POP
17997: POP
// wait ( 0 0$1 ) ;
17998: LD_INT 35
18000: PPUSH
18001: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 140 , 219 , 9 ] ) >= ( tmp - 1 ) ;
18005: LD_VAR 0 3
18009: PPUSH
18010: LD_INT 92
18012: PUSH
18013: LD_INT 140
18015: PUSH
18016: LD_INT 219
18018: PUSH
18019: LD_INT 9
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: PPUSH
18028: CALL_OW 72
18032: PUSH
18033: LD_VAR 0 3
18037: PUSH
18038: LD_INT 1
18040: MINUS
18041: GREATEREQUAL
18042: IFFALSE 17908
// end ; repeat wait ( 0 0$1 ) ;
18044: LD_INT 35
18046: PPUSH
18047: CALL_OW 67
// for i in tmp do
18051: LD_ADDR_VAR 0 1
18055: PUSH
18056: LD_VAR 0 3
18060: PUSH
18061: FOR_IN
18062: IFFALSE 18195
// begin if GetLives ( i ) > 251 then
18064: LD_VAR 0 1
18068: PPUSH
18069: CALL_OW 256
18073: PUSH
18074: LD_INT 251
18076: GREATER
18077: IFFALSE 18166
// begin if GetWeapon ( i ) = ru_time_lapser then
18079: LD_VAR 0 1
18083: PPUSH
18084: CALL_OW 264
18088: PUSH
18089: LD_INT 49
18091: EQUAL
18092: IFFALSE 18130
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) else
18094: LD_VAR 0 1
18098: PPUSH
18099: LD_INT 81
18101: PUSH
18102: LD_INT 3
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PPUSH
18109: CALL_OW 69
18113: PPUSH
18114: LD_VAR 0 1
18118: PPUSH
18119: CALL_OW 74
18123: PPUSH
18124: CALL_OW 112
18128: GO 18164
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18130: LD_VAR 0 1
18134: PPUSH
18135: LD_INT 81
18137: PUSH
18138: LD_INT 3
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PPUSH
18145: CALL_OW 69
18149: PPUSH
18150: LD_VAR 0 1
18154: PPUSH
18155: CALL_OW 74
18159: PPUSH
18160: CALL_OW 115
// end else
18164: GO 18193
// if IsDead ( i ) then
18166: LD_VAR 0 1
18170: PPUSH
18171: CALL_OW 301
18175: IFFALSE 18193
// tmp := tmp diff i ;
18177: LD_ADDR_VAR 0 3
18181: PUSH
18182: LD_VAR 0 3
18186: PUSH
18187: LD_VAR 0 1
18191: DIFF
18192: ST_TO_ADDR
// end ;
18193: GO 18061
18195: POP
18196: POP
// until not tmp ;
18197: LD_VAR 0 3
18201: NOT
18202: IFFALSE 18044
// end ;
18204: PPOPN 5
18206: END
// every 12 12$30 + 11 11$30 trigger game do var i , base , tmp , target ;
18207: LD_EXP 3
18211: IFFALSE 18593
18213: GO 18215
18215: DISABLE
18216: LD_INT 0
18218: PPUSH
18219: PPUSH
18220: PPUSH
18221: PPUSH
// begin enable ;
18222: ENABLE
// base := mc_amer ;
18223: LD_ADDR_VAR 0 2
18227: PUSH
18228: LD_EXP 5
18232: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_btype , b_factory ] ] ) then
18233: LD_INT 22
18235: PUSH
18236: LD_INT 4
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 23
18245: PUSH
18246: LD_INT 1
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 30
18255: PUSH
18256: LD_INT 3
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: LIST
18267: PPUSH
18268: CALL_OW 69
18272: NOT
18273: IFFALSE 18277
// exit ;
18275: GO 18593
// MC_InsertProduceList ( base , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_laser ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] ] ) ;
18277: LD_VAR 0 2
18281: PPUSH
18282: LD_INT 3
18284: PUSH
18285: LD_INT 1
18287: PUSH
18288: LD_INT 2
18290: PUSH
18291: LD_INT 5
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 3
18302: PUSH
18303: LD_INT 1
18305: PUSH
18306: LD_INT 2
18308: PUSH
18309: LD_INT 9
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 3
18320: PUSH
18321: LD_INT 1
18323: PUSH
18324: LD_INT 2
18326: PUSH
18327: LD_INT 7
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: PUSH
18336: LD_INT 3
18338: PUSH
18339: LD_INT 1
18341: PUSH
18342: LD_INT 2
18344: PUSH
18345: LD_INT 7
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 3
18356: PUSH
18357: LD_INT 1
18359: PUSH
18360: LD_INT 2
18362: PUSH
18363: LD_INT 7
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: PPUSH
18379: CALL 86326 0 2
// repeat wait ( 0 0$1 ) ;
18383: LD_INT 35
18385: PPUSH
18386: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 5 or tick mod 10 10$00 = 0 ;
18390: LD_VAR 0 2
18394: PPUSH
18395: LD_INT 1
18397: PPUSH
18398: CALL 87744 0 2
18402: PUSH
18403: LD_INT 5
18405: GREATEREQUAL
18406: PUSH
18407: LD_OWVAR 1
18411: PUSH
18412: LD_INT 21000
18414: MOD
18415: PUSH
18416: LD_INT 0
18418: EQUAL
18419: OR
18420: IFFALSE 18383
// wait ( 0 0$30 ) ;
18422: LD_INT 1050
18424: PPUSH
18425: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
18429: LD_ADDR_VAR 0 3
18433: PUSH
18434: LD_VAR 0 2
18438: PPUSH
18439: LD_INT 1
18441: PPUSH
18442: CALL 87744 0 2
18446: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
18447: LD_ADDR_EXP 55
18451: PUSH
18452: LD_EXP 55
18456: PPUSH
18457: LD_VAR 0 2
18461: PPUSH
18462: LD_EXP 55
18466: PUSH
18467: LD_VAR 0 2
18471: ARRAY
18472: PUSH
18473: LD_VAR 0 3
18477: DIFF
18478: PPUSH
18479: CALL_OW 1
18483: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18484: LD_INT 35
18486: PPUSH
18487: CALL_OW 67
// for i in tmp do
18491: LD_ADDR_VAR 0 1
18495: PUSH
18496: LD_VAR 0 3
18500: PUSH
18501: FOR_IN
18502: IFFALSE 18584
// begin if GetLives ( i ) > 251 then
18504: LD_VAR 0 1
18508: PPUSH
18509: CALL_OW 256
18513: PUSH
18514: LD_INT 251
18516: GREATER
18517: IFFALSE 18555
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) else
18519: LD_VAR 0 1
18523: PPUSH
18524: LD_INT 81
18526: PUSH
18527: LD_INT 4
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PPUSH
18534: CALL_OW 69
18538: PPUSH
18539: LD_VAR 0 1
18543: PPUSH
18544: CALL_OW 74
18548: PPUSH
18549: CALL_OW 115
18553: GO 18582
// if IsDead ( i ) then
18555: LD_VAR 0 1
18559: PPUSH
18560: CALL_OW 301
18564: IFFALSE 18582
// tmp := tmp diff i ;
18566: LD_ADDR_VAR 0 3
18570: PUSH
18571: LD_VAR 0 3
18575: PUSH
18576: LD_VAR 0 1
18580: DIFF
18581: ST_TO_ADDR
// end ;
18582: GO 18501
18584: POP
18585: POP
// until not tmp ;
18586: LD_VAR 0 3
18590: NOT
18591: IFFALSE 18484
// end ; end_of_file
18593: PPOPN 4
18595: END
// export function CustomEvent ( event ) ; begin
18596: LD_INT 0
18598: PPUSH
// end ;
18599: LD_VAR 0 2
18603: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 then
18604: LD_VAR 0 1
18608: PUSH
18609: LD_INT 1
18611: EQUAL
18612: PUSH
18613: LD_VAR 0 2
18617: PUSH
18618: LD_INT 4
18620: EQUAL
18621: AND
18622: IFFALSE 18650
// begin SayRadio ( Powell , DP-Lost ) ;
18624: LD_EXP 12
18628: PPUSH
18629: LD_STRING DP-Lost
18631: PPUSH
18632: CALL_OW 94
// wait ( 0 0$2 ) ;
18636: LD_INT 70
18638: PPUSH
18639: CALL_OW 67
// YouLost ( FriendlyFire ) ;
18643: LD_STRING FriendlyFire
18645: PPUSH
18646: CALL_OW 104
// end ; end ;
18650: PPOPN 2
18652: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18653: LD_VAR 0 1
18657: PPUSH
18658: CALL 103509 0 1
// if GameType = 1 then
18662: LD_EXP 2
18666: PUSH
18667: LD_INT 1
18669: EQUAL
18670: IFFALSE 18905
// begin if un = playerCommander then
18672: LD_VAR 0 1
18676: PUSH
18677: LD_EXP 9
18681: EQUAL
18682: IFFALSE 18691
// YouLost ( commanderDied ) ;
18684: LD_STRING commanderDied
18686: PPUSH
18687: CALL_OW 104
// if un = allyCommander then
18691: LD_VAR 0 1
18695: PUSH
18696: LD_EXP 11
18700: EQUAL
18701: IFFALSE 18710
// YouLost ( Theta ) ;
18703: LD_STRING Theta
18705: PPUSH
18706: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18710: LD_VAR 0 1
18714: PUSH
18715: LD_INT 22
18717: PUSH
18718: LD_INT 8
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PUSH
18725: LD_INT 2
18727: PUSH
18728: LD_INT 21
18730: PUSH
18731: LD_INT 1
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: LD_INT 21
18740: PUSH
18741: LD_INT 3
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: LIST
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PPUSH
18757: CALL_OW 69
18761: IN
18762: IFFALSE 18778
// legDestCounter := legDestCounter + 1 ;
18764: LD_ADDR_EXP 18
18768: PUSH
18769: LD_EXP 18
18773: PUSH
18774: LD_INT 1
18776: PLUS
18777: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18778: LD_VAR 0 1
18782: PUSH
18783: LD_INT 22
18785: PUSH
18786: LD_INT 4
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 2
18795: PUSH
18796: LD_INT 21
18798: PUSH
18799: LD_INT 1
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 21
18808: PUSH
18809: LD_INT 3
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: LIST
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PPUSH
18825: CALL_OW 69
18829: IN
18830: IFFALSE 18846
// allyDestCounter := allyDestCounter + 1 ;
18832: LD_ADDR_EXP 22
18836: PUSH
18837: LD_EXP 22
18841: PUSH
18842: LD_INT 1
18844: PLUS
18845: ST_TO_ADDR
// if un in ruOutpost then
18846: LD_VAR 0 1
18850: PUSH
18851: LD_EXP 14
18855: IN
18856: IFFALSE 18905
// begin ruOutpost := ruOutpost diff un ;
18858: LD_ADDR_EXP 14
18862: PUSH
18863: LD_EXP 14
18867: PUSH
18868: LD_VAR 0 1
18872: DIFF
18873: ST_TO_ADDR
// ruEscape := Replace ( ruEscape , 1 , ruEscape [ 1 ] + 1 ) ;
18874: LD_ADDR_EXP 15
18878: PUSH
18879: LD_EXP 15
18883: PPUSH
18884: LD_INT 1
18886: PPUSH
18887: LD_EXP 15
18891: PUSH
18892: LD_INT 1
18894: ARRAY
18895: PUSH
18896: LD_INT 1
18898: PLUS
18899: PPUSH
18900: CALL_OW 1
18904: ST_TO_ADDR
// end ; end ; MCE_UnitDestroyed ( un ) ;
18905: LD_VAR 0 1
18909: PPUSH
18910: CALL 89718 0 1
// end ;
18914: PPOPN 1
18916: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
18917: LD_VAR 0 1
18921: PPUSH
18922: LD_VAR 0 2
18926: PPUSH
18927: CALL 92052 0 2
// end ;
18931: PPOPN 2
18933: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
18934: LD_VAR 0 1
18938: PPUSH
18939: CALL 91120 0 1
// end ;
18943: PPOPN 1
18945: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
18946: LD_VAR 0 1
18950: PPUSH
18951: CALL 91361 0 1
// end ;
18955: PPOPN 1
18957: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_LasDouble and GetSide ( lab ) = 1 then
18958: LD_VAR 0 1
18962: PUSH
18963: LD_INT 14
18965: EQUAL
18966: PUSH
18967: LD_VAR 0 2
18971: PPUSH
18972: CALL_OW 255
18976: PUSH
18977: LD_INT 1
18979: EQUAL
18980: AND
18981: IFFALSE 19022
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Laser ) ;
18983: LD_EXP 9
18987: PPUSH
18988: LD_STRING D
18990: PUSH
18991: LD_STRING I
18993: PUSH
18994: LD_STRING J
18996: PUSH
18997: LD_STRING S
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: LIST
19004: PUSH
19005: LD_EXP 25
19009: ARRAY
19010: STR
19011: PUSH
19012: LD_STRING -1-Laser
19014: STR
19015: PPUSH
19016: CALL_OW 88
// exit ;
19020: GO 19164
// end ; if tech = tech_MatDet and GetSide ( lab ) = 1 then
19022: LD_VAR 0 1
19026: PUSH
19027: LD_INT 7
19029: EQUAL
19030: PUSH
19031: LD_VAR 0 2
19035: PPUSH
19036: CALL_OW 255
19040: PUSH
19041: LD_INT 1
19043: EQUAL
19044: AND
19045: IFFALSE 19086
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Materialization ) ;
19047: LD_EXP 9
19051: PPUSH
19052: LD_STRING D
19054: PUSH
19055: LD_STRING I
19057: PUSH
19058: LD_STRING J
19060: PUSH
19061: LD_STRING S
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: LIST
19068: PUSH
19069: LD_EXP 25
19073: ARRAY
19074: STR
19075: PUSH
19076: LD_STRING -1-Materialization
19078: STR
19079: PPUSH
19080: CALL_OW 88
// exit ;
19084: GO 19164
// end ; if tech = tech_SibFiss and GetSide ( lab ) = 1 then
19086: LD_VAR 0 1
19090: PUSH
19091: LD_INT 25
19093: EQUAL
19094: PUSH
19095: LD_VAR 0 2
19099: PPUSH
19100: CALL_OW 255
19104: PUSH
19105: LD_INT 1
19107: EQUAL
19108: AND
19109: IFFALSE 19150
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Rocket ) ;
19111: LD_EXP 9
19115: PPUSH
19116: LD_STRING D
19118: PUSH
19119: LD_STRING I
19121: PUSH
19122: LD_STRING J
19124: PUSH
19125: LD_STRING S
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: LIST
19132: PUSH
19133: LD_EXP 25
19137: ARRAY
19138: STR
19139: PUSH
19140: LD_STRING -1-Rocket
19142: STR
19143: PPUSH
19144: CALL_OW 88
// exit ;
19148: GO 19164
// end ; MCE_ResearchComplete ( tech , lab ) ;
19150: LD_VAR 0 1
19154: PPUSH
19155: LD_VAR 0 2
19159: PPUSH
19160: CALL 89414 0 2
// end ;
19164: PPOPN 2
19166: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
19167: LD_VAR 0 1
19171: PPUSH
19172: LD_VAR 0 2
19176: PPUSH
19177: LD_VAR 0 3
19181: PPUSH
19182: LD_VAR 0 4
19186: PPUSH
19187: LD_VAR 0 5
19191: PPUSH
19192: CALL 89034 0 5
// end ;
19196: PPOPN 5
19198: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
19199: LD_VAR 0 1
19203: PPUSH
19204: LD_VAR 0 2
19208: PPUSH
19209: CALL 88630 0 2
// end ;
19213: PPOPN 2
19215: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
19216: LD_VAR 0 1
19220: PPUSH
19221: LD_VAR 0 2
19225: PPUSH
19226: LD_VAR 0 3
19230: PPUSH
19231: LD_VAR 0 4
19235: PPUSH
19236: CALL 88468 0 4
// end ;
19240: PPOPN 4
19242: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
19243: LD_VAR 0 1
19247: PPUSH
19248: LD_VAR 0 2
19252: PPUSH
19253: LD_VAR 0 3
19257: PPUSH
19258: CALL 88243 0 3
// end ;
19262: PPOPN 3
19264: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
19265: LD_VAR 0 1
19269: PPUSH
19270: LD_VAR 0 2
19274: PPUSH
19275: CALL 88128 0 2
// end ;
19279: PPOPN 2
19281: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
19282: LD_VAR 0 1
19286: PPUSH
19287: LD_VAR 0 2
19291: PPUSH
19292: CALL 92313 0 2
// end ;
19296: PPOPN 2
19298: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
19299: LD_VAR 0 1
19303: PPUSH
19304: LD_VAR 0 2
19308: PPUSH
19309: LD_VAR 0 3
19313: PPUSH
19314: LD_VAR 0 4
19318: PPUSH
19319: CALL 92529 0 4
// end ;
19323: PPOPN 4
19325: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
19326: LD_VAR 0 1
19330: PPUSH
19331: LD_VAR 0 2
19335: PPUSH
19336: CALL 87937 0 2
// end ;
19340: PPOPN 2
19342: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
19343: LD_VAR 0 1
19347: PPUSH
19348: CALL 103615 0 1
// end ; end_of_file
19352: PPOPN 1
19354: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19355: LD_INT 0
19357: PPUSH
19358: PPUSH
// if exist_mode then
19359: LD_VAR 0 2
19363: IFFALSE 19388
// unit := CreateCharacter ( prefix & ident ) else
19365: LD_ADDR_VAR 0 5
19369: PUSH
19370: LD_VAR 0 3
19374: PUSH
19375: LD_VAR 0 1
19379: STR
19380: PPUSH
19381: CALL_OW 34
19385: ST_TO_ADDR
19386: GO 19403
// unit := NewCharacter ( ident ) ;
19388: LD_ADDR_VAR 0 5
19392: PUSH
19393: LD_VAR 0 1
19397: PPUSH
19398: CALL_OW 25
19402: ST_TO_ADDR
// result := unit ;
19403: LD_ADDR_VAR 0 4
19407: PUSH
19408: LD_VAR 0 5
19412: ST_TO_ADDR
// end ;
19413: LD_VAR 0 4
19417: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19418: LD_INT 0
19420: PPUSH
19421: PPUSH
// if not side or not nation then
19422: LD_VAR 0 1
19426: NOT
19427: PUSH
19428: LD_VAR 0 2
19432: NOT
19433: OR
19434: IFFALSE 19438
// exit ;
19436: GO 20142
// case nation of nation_american :
19438: LD_VAR 0 2
19442: PUSH
19443: LD_INT 1
19445: DOUBLE
19446: EQUAL
19447: IFTRUE 19451
19449: GO 19645
19451: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
19452: LD_ADDR_VAR 0 4
19456: PUSH
19457: LD_INT 35
19459: PUSH
19460: LD_INT 45
19462: PUSH
19463: LD_INT 46
19465: PUSH
19466: LD_INT 47
19468: PUSH
19469: LD_INT 82
19471: PUSH
19472: LD_INT 83
19474: PUSH
19475: LD_INT 84
19477: PUSH
19478: LD_INT 85
19480: PUSH
19481: LD_INT 86
19483: PUSH
19484: LD_INT 1
19486: PUSH
19487: LD_INT 2
19489: PUSH
19490: LD_INT 6
19492: PUSH
19493: LD_INT 15
19495: PUSH
19496: LD_INT 16
19498: PUSH
19499: LD_INT 7
19501: PUSH
19502: LD_INT 12
19504: PUSH
19505: LD_INT 13
19507: PUSH
19508: LD_INT 10
19510: PUSH
19511: LD_INT 14
19513: PUSH
19514: LD_INT 20
19516: PUSH
19517: LD_INT 21
19519: PUSH
19520: LD_INT 22
19522: PUSH
19523: LD_INT 25
19525: PUSH
19526: LD_INT 32
19528: PUSH
19529: LD_INT 27
19531: PUSH
19532: LD_INT 36
19534: PUSH
19535: LD_INT 69
19537: PUSH
19538: LD_INT 39
19540: PUSH
19541: LD_INT 34
19543: PUSH
19544: LD_INT 40
19546: PUSH
19547: LD_INT 48
19549: PUSH
19550: LD_INT 49
19552: PUSH
19553: LD_INT 50
19555: PUSH
19556: LD_INT 51
19558: PUSH
19559: LD_INT 52
19561: PUSH
19562: LD_INT 53
19564: PUSH
19565: LD_INT 54
19567: PUSH
19568: LD_INT 55
19570: PUSH
19571: LD_INT 56
19573: PUSH
19574: LD_INT 57
19576: PUSH
19577: LD_INT 58
19579: PUSH
19580: LD_INT 59
19582: PUSH
19583: LD_INT 60
19585: PUSH
19586: LD_INT 61
19588: PUSH
19589: LD_INT 62
19591: PUSH
19592: LD_INT 80
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: ST_TO_ADDR
19643: GO 20066
19645: LD_INT 2
19647: DOUBLE
19648: EQUAL
19649: IFTRUE 19653
19651: GO 19855
19653: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 ] ; nation_russian :
19654: LD_ADDR_VAR 0 4
19658: PUSH
19659: LD_INT 35
19661: PUSH
19662: LD_INT 45
19664: PUSH
19665: LD_INT 46
19667: PUSH
19668: LD_INT 47
19670: PUSH
19671: LD_INT 82
19673: PUSH
19674: LD_INT 83
19676: PUSH
19677: LD_INT 84
19679: PUSH
19680: LD_INT 85
19682: PUSH
19683: LD_INT 87
19685: PUSH
19686: LD_INT 70
19688: PUSH
19689: LD_INT 1
19691: PUSH
19692: LD_INT 11
19694: PUSH
19695: LD_INT 3
19697: PUSH
19698: LD_INT 4
19700: PUSH
19701: LD_INT 5
19703: PUSH
19704: LD_INT 6
19706: PUSH
19707: LD_INT 15
19709: PUSH
19710: LD_INT 18
19712: PUSH
19713: LD_INT 7
19715: PUSH
19716: LD_INT 17
19718: PUSH
19719: LD_INT 8
19721: PUSH
19722: LD_INT 20
19724: PUSH
19725: LD_INT 21
19727: PUSH
19728: LD_INT 22
19730: PUSH
19731: LD_INT 72
19733: PUSH
19734: LD_INT 26
19736: PUSH
19737: LD_INT 69
19739: PUSH
19740: LD_INT 39
19742: PUSH
19743: LD_INT 40
19745: PUSH
19746: LD_INT 41
19748: PUSH
19749: LD_INT 42
19751: PUSH
19752: LD_INT 43
19754: PUSH
19755: LD_INT 48
19757: PUSH
19758: LD_INT 49
19760: PUSH
19761: LD_INT 50
19763: PUSH
19764: LD_INT 51
19766: PUSH
19767: LD_INT 52
19769: PUSH
19770: LD_INT 53
19772: PUSH
19773: LD_INT 54
19775: PUSH
19776: LD_INT 55
19778: PUSH
19779: LD_INT 56
19781: PUSH
19782: LD_INT 60
19784: PUSH
19785: LD_INT 61
19787: PUSH
19788: LD_INT 62
19790: PUSH
19791: LD_INT 66
19793: PUSH
19794: LD_INT 67
19796: PUSH
19797: LD_INT 68
19799: PUSH
19800: LD_INT 81
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: ST_TO_ADDR
19853: GO 20066
19855: LD_INT 3
19857: DOUBLE
19858: EQUAL
19859: IFTRUE 19863
19861: GO 20065
19863: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
19864: LD_ADDR_VAR 0 4
19868: PUSH
19869: LD_INT 46
19871: PUSH
19872: LD_INT 47
19874: PUSH
19875: LD_INT 1
19877: PUSH
19878: LD_INT 2
19880: PUSH
19881: LD_INT 82
19883: PUSH
19884: LD_INT 83
19886: PUSH
19887: LD_INT 84
19889: PUSH
19890: LD_INT 85
19892: PUSH
19893: LD_INT 86
19895: PUSH
19896: LD_INT 11
19898: PUSH
19899: LD_INT 9
19901: PUSH
19902: LD_INT 20
19904: PUSH
19905: LD_INT 19
19907: PUSH
19908: LD_INT 21
19910: PUSH
19911: LD_INT 24
19913: PUSH
19914: LD_INT 22
19916: PUSH
19917: LD_INT 25
19919: PUSH
19920: LD_INT 28
19922: PUSH
19923: LD_INT 29
19925: PUSH
19926: LD_INT 30
19928: PUSH
19929: LD_INT 31
19931: PUSH
19932: LD_INT 37
19934: PUSH
19935: LD_INT 38
19937: PUSH
19938: LD_INT 32
19940: PUSH
19941: LD_INT 27
19943: PUSH
19944: LD_INT 33
19946: PUSH
19947: LD_INT 69
19949: PUSH
19950: LD_INT 39
19952: PUSH
19953: LD_INT 34
19955: PUSH
19956: LD_INT 40
19958: PUSH
19959: LD_INT 71
19961: PUSH
19962: LD_INT 23
19964: PUSH
19965: LD_INT 44
19967: PUSH
19968: LD_INT 48
19970: PUSH
19971: LD_INT 49
19973: PUSH
19974: LD_INT 50
19976: PUSH
19977: LD_INT 51
19979: PUSH
19980: LD_INT 52
19982: PUSH
19983: LD_INT 53
19985: PUSH
19986: LD_INT 54
19988: PUSH
19989: LD_INT 55
19991: PUSH
19992: LD_INT 56
19994: PUSH
19995: LD_INT 57
19997: PUSH
19998: LD_INT 58
20000: PUSH
20001: LD_INT 59
20003: PUSH
20004: LD_INT 63
20006: PUSH
20007: LD_INT 64
20009: PUSH
20010: LD_INT 65
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: ST_TO_ADDR
20063: GO 20066
20065: POP
// if state > - 1 and state < 3 then
20066: LD_VAR 0 3
20070: PUSH
20071: LD_INT 1
20073: NEG
20074: GREATER
20075: PUSH
20076: LD_VAR 0 3
20080: PUSH
20081: LD_INT 3
20083: LESS
20084: AND
20085: IFFALSE 20142
// for i in result do
20087: LD_ADDR_VAR 0 5
20091: PUSH
20092: LD_VAR 0 4
20096: PUSH
20097: FOR_IN
20098: IFFALSE 20140
// if GetTech ( i , side ) <> state then
20100: LD_VAR 0 5
20104: PPUSH
20105: LD_VAR 0 1
20109: PPUSH
20110: CALL_OW 321
20114: PUSH
20115: LD_VAR 0 3
20119: NONEQUAL
20120: IFFALSE 20138
// result := result diff i ;
20122: LD_ADDR_VAR 0 4
20126: PUSH
20127: LD_VAR 0 4
20131: PUSH
20132: LD_VAR 0 5
20136: DIFF
20137: ST_TO_ADDR
20138: GO 20097
20140: POP
20141: POP
// end ;
20142: LD_VAR 0 4
20146: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20147: LD_INT 0
20149: PPUSH
20150: PPUSH
20151: PPUSH
// result := true ;
20152: LD_ADDR_VAR 0 3
20156: PUSH
20157: LD_INT 1
20159: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20160: LD_ADDR_VAR 0 5
20164: PUSH
20165: LD_VAR 0 2
20169: PPUSH
20170: CALL_OW 480
20174: ST_TO_ADDR
// if not tmp then
20175: LD_VAR 0 5
20179: NOT
20180: IFFALSE 20184
// exit ;
20182: GO 20233
// for i in tmp do
20184: LD_ADDR_VAR 0 4
20188: PUSH
20189: LD_VAR 0 5
20193: PUSH
20194: FOR_IN
20195: IFFALSE 20231
// if GetTech ( i , side ) <> state_researched then
20197: LD_VAR 0 4
20201: PPUSH
20202: LD_VAR 0 1
20206: PPUSH
20207: CALL_OW 321
20211: PUSH
20212: LD_INT 2
20214: NONEQUAL
20215: IFFALSE 20229
// begin result := false ;
20217: LD_ADDR_VAR 0 3
20221: PUSH
20222: LD_INT 0
20224: ST_TO_ADDR
// exit ;
20225: POP
20226: POP
20227: GO 20233
// end ;
20229: GO 20194
20231: POP
20232: POP
// end ;
20233: LD_VAR 0 3
20237: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20238: LD_INT 0
20240: PPUSH
20241: PPUSH
20242: PPUSH
20243: PPUSH
20244: PPUSH
20245: PPUSH
20246: PPUSH
20247: PPUSH
20248: PPUSH
20249: PPUSH
20250: PPUSH
20251: PPUSH
20252: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20253: LD_VAR 0 1
20257: NOT
20258: PUSH
20259: LD_VAR 0 1
20263: PPUSH
20264: CALL_OW 257
20268: PUSH
20269: LD_INT 9
20271: NONEQUAL
20272: OR
20273: IFFALSE 20277
// exit ;
20275: GO 20850
// side := GetSide ( unit ) ;
20277: LD_ADDR_VAR 0 9
20281: PUSH
20282: LD_VAR 0 1
20286: PPUSH
20287: CALL_OW 255
20291: ST_TO_ADDR
// tech_space := tech_spacanom ;
20292: LD_ADDR_VAR 0 12
20296: PUSH
20297: LD_INT 29
20299: ST_TO_ADDR
// tech_time := tech_taurad ;
20300: LD_ADDR_VAR 0 13
20304: PUSH
20305: LD_INT 28
20307: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20308: LD_ADDR_VAR 0 11
20312: PUSH
20313: LD_VAR 0 1
20317: PPUSH
20318: CALL_OW 310
20322: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20323: LD_VAR 0 11
20327: PPUSH
20328: CALL_OW 247
20332: PUSH
20333: LD_INT 2
20335: EQUAL
20336: IFFALSE 20340
// exit ;
20338: GO 20850
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20340: LD_ADDR_VAR 0 8
20344: PUSH
20345: LD_INT 81
20347: PUSH
20348: LD_VAR 0 9
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 3
20359: PUSH
20360: LD_INT 21
20362: PUSH
20363: LD_INT 3
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PPUSH
20378: CALL_OW 69
20382: ST_TO_ADDR
// if not tmp then
20383: LD_VAR 0 8
20387: NOT
20388: IFFALSE 20392
// exit ;
20390: GO 20850
// if in_unit then
20392: LD_VAR 0 11
20396: IFFALSE 20420
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20398: LD_ADDR_VAR 0 10
20402: PUSH
20403: LD_VAR 0 8
20407: PPUSH
20408: LD_VAR 0 11
20412: PPUSH
20413: CALL_OW 74
20417: ST_TO_ADDR
20418: GO 20440
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20420: LD_ADDR_VAR 0 10
20424: PUSH
20425: LD_VAR 0 8
20429: PPUSH
20430: LD_VAR 0 1
20434: PPUSH
20435: CALL_OW 74
20439: ST_TO_ADDR
// if not enemy then
20440: LD_VAR 0 10
20444: NOT
20445: IFFALSE 20449
// exit ;
20447: GO 20850
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20449: LD_VAR 0 11
20453: PUSH
20454: LD_VAR 0 11
20458: PPUSH
20459: LD_VAR 0 10
20463: PPUSH
20464: CALL_OW 296
20468: PUSH
20469: LD_INT 13
20471: GREATER
20472: AND
20473: PUSH
20474: LD_VAR 0 1
20478: PPUSH
20479: LD_VAR 0 10
20483: PPUSH
20484: CALL_OW 296
20488: PUSH
20489: LD_INT 12
20491: GREATER
20492: OR
20493: IFFALSE 20497
// exit ;
20495: GO 20850
// missile := [ 1 ] ;
20497: LD_ADDR_VAR 0 14
20501: PUSH
20502: LD_INT 1
20504: PUSH
20505: EMPTY
20506: LIST
20507: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20508: LD_VAR 0 9
20512: PPUSH
20513: LD_VAR 0 12
20517: PPUSH
20518: CALL_OW 325
20522: IFFALSE 20551
// missile := Insert ( missile , missile + 1 , 2 ) ;
20524: LD_ADDR_VAR 0 14
20528: PUSH
20529: LD_VAR 0 14
20533: PPUSH
20534: LD_VAR 0 14
20538: PUSH
20539: LD_INT 1
20541: PLUS
20542: PPUSH
20543: LD_INT 2
20545: PPUSH
20546: CALL_OW 2
20550: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20551: LD_VAR 0 9
20555: PPUSH
20556: LD_VAR 0 13
20560: PPUSH
20561: CALL_OW 325
20565: PUSH
20566: LD_VAR 0 10
20570: PPUSH
20571: CALL_OW 255
20575: PPUSH
20576: LD_VAR 0 13
20580: PPUSH
20581: CALL_OW 325
20585: NOT
20586: AND
20587: IFFALSE 20616
// missile := Insert ( missile , missile + 1 , 3 ) ;
20589: LD_ADDR_VAR 0 14
20593: PUSH
20594: LD_VAR 0 14
20598: PPUSH
20599: LD_VAR 0 14
20603: PUSH
20604: LD_INT 1
20606: PLUS
20607: PPUSH
20608: LD_INT 3
20610: PPUSH
20611: CALL_OW 2
20615: ST_TO_ADDR
// if missile < 2 then
20616: LD_VAR 0 14
20620: PUSH
20621: LD_INT 2
20623: LESS
20624: IFFALSE 20628
// exit ;
20626: GO 20850
// x := GetX ( enemy ) ;
20628: LD_ADDR_VAR 0 4
20632: PUSH
20633: LD_VAR 0 10
20637: PPUSH
20638: CALL_OW 250
20642: ST_TO_ADDR
// y := GetY ( enemy ) ;
20643: LD_ADDR_VAR 0 5
20647: PUSH
20648: LD_VAR 0 10
20652: PPUSH
20653: CALL_OW 251
20657: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20658: LD_ADDR_VAR 0 6
20662: PUSH
20663: LD_VAR 0 4
20667: PUSH
20668: LD_INT 1
20670: NEG
20671: PPUSH
20672: LD_INT 1
20674: PPUSH
20675: CALL_OW 12
20679: PLUS
20680: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20681: LD_ADDR_VAR 0 7
20685: PUSH
20686: LD_VAR 0 5
20690: PUSH
20691: LD_INT 1
20693: NEG
20694: PPUSH
20695: LD_INT 1
20697: PPUSH
20698: CALL_OW 12
20702: PLUS
20703: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20704: LD_VAR 0 6
20708: PPUSH
20709: LD_VAR 0 7
20713: PPUSH
20714: CALL_OW 488
20718: NOT
20719: IFFALSE 20741
// begin _x := x ;
20721: LD_ADDR_VAR 0 6
20725: PUSH
20726: LD_VAR 0 4
20730: ST_TO_ADDR
// _y := y ;
20731: LD_ADDR_VAR 0 7
20735: PUSH
20736: LD_VAR 0 5
20740: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20741: LD_ADDR_VAR 0 3
20745: PUSH
20746: LD_INT 1
20748: PPUSH
20749: LD_VAR 0 14
20753: PPUSH
20754: CALL_OW 12
20758: ST_TO_ADDR
// case i of 1 :
20759: LD_VAR 0 3
20763: PUSH
20764: LD_INT 1
20766: DOUBLE
20767: EQUAL
20768: IFTRUE 20772
20770: GO 20789
20772: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20773: LD_VAR 0 1
20777: PPUSH
20778: LD_VAR 0 10
20782: PPUSH
20783: CALL_OW 115
20787: GO 20850
20789: LD_INT 2
20791: DOUBLE
20792: EQUAL
20793: IFTRUE 20797
20795: GO 20819
20797: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20798: LD_VAR 0 1
20802: PPUSH
20803: LD_VAR 0 6
20807: PPUSH
20808: LD_VAR 0 7
20812: PPUSH
20813: CALL_OW 153
20817: GO 20850
20819: LD_INT 3
20821: DOUBLE
20822: EQUAL
20823: IFTRUE 20827
20825: GO 20849
20827: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20828: LD_VAR 0 1
20832: PPUSH
20833: LD_VAR 0 6
20837: PPUSH
20838: LD_VAR 0 7
20842: PPUSH
20843: CALL_OW 154
20847: GO 20850
20849: POP
// end ;
20850: LD_VAR 0 2
20854: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20855: LD_INT 0
20857: PPUSH
20858: PPUSH
20859: PPUSH
20860: PPUSH
20861: PPUSH
20862: PPUSH
// if not unit or not building then
20863: LD_VAR 0 1
20867: NOT
20868: PUSH
20869: LD_VAR 0 2
20873: NOT
20874: OR
20875: IFFALSE 20879
// exit ;
20877: GO 21037
// x := GetX ( building ) ;
20879: LD_ADDR_VAR 0 5
20883: PUSH
20884: LD_VAR 0 2
20888: PPUSH
20889: CALL_OW 250
20893: ST_TO_ADDR
// y := GetY ( building ) ;
20894: LD_ADDR_VAR 0 6
20898: PUSH
20899: LD_VAR 0 2
20903: PPUSH
20904: CALL_OW 251
20908: ST_TO_ADDR
// for i = 0 to 5 do
20909: LD_ADDR_VAR 0 4
20913: PUSH
20914: DOUBLE
20915: LD_INT 0
20917: DEC
20918: ST_TO_ADDR
20919: LD_INT 5
20921: PUSH
20922: FOR_TO
20923: IFFALSE 21035
// begin _x := ShiftX ( x , i , 3 ) ;
20925: LD_ADDR_VAR 0 7
20929: PUSH
20930: LD_VAR 0 5
20934: PPUSH
20935: LD_VAR 0 4
20939: PPUSH
20940: LD_INT 3
20942: PPUSH
20943: CALL_OW 272
20947: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
20948: LD_ADDR_VAR 0 8
20952: PUSH
20953: LD_VAR 0 6
20957: PPUSH
20958: LD_VAR 0 4
20962: PPUSH
20963: LD_INT 3
20965: PPUSH
20966: CALL_OW 273
20970: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20971: LD_VAR 0 7
20975: PPUSH
20976: LD_VAR 0 8
20980: PPUSH
20981: CALL_OW 488
20985: NOT
20986: IFFALSE 20990
// continue ;
20988: GO 20922
// if HexInfo ( _x , _y ) = 0 then
20990: LD_VAR 0 7
20994: PPUSH
20995: LD_VAR 0 8
20999: PPUSH
21000: CALL_OW 428
21004: PUSH
21005: LD_INT 0
21007: EQUAL
21008: IFFALSE 21033
// begin ComMoveXY ( unit , _x , _y ) ;
21010: LD_VAR 0 1
21014: PPUSH
21015: LD_VAR 0 7
21019: PPUSH
21020: LD_VAR 0 8
21024: PPUSH
21025: CALL_OW 111
// exit ;
21029: POP
21030: POP
21031: GO 21037
// end ; end ;
21033: GO 20922
21035: POP
21036: POP
// end ;
21037: LD_VAR 0 3
21041: RET
// export function ScanBase ( side , base_area ) ; begin
21042: LD_INT 0
21044: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21045: LD_ADDR_VAR 0 3
21049: PUSH
21050: LD_VAR 0 2
21054: PPUSH
21055: LD_INT 81
21057: PUSH
21058: LD_VAR 0 1
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: PPUSH
21067: CALL_OW 70
21071: ST_TO_ADDR
// end ;
21072: LD_VAR 0 3
21076: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
21077: LD_INT 0
21079: PPUSH
21080: PPUSH
21081: PPUSH
21082: PPUSH
21083: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
21084: LD_VAR 0 1
21088: NOT
21089: PUSH
21090: LD_EXP 36
21094: PUSH
21095: LD_VAR 0 1
21099: ARRAY
21100: NOT
21101: OR
21102: PUSH
21103: LD_VAR 0 2
21107: NOT
21108: OR
21109: PUSH
21110: LD_VAR 0 3
21114: NOT
21115: OR
21116: IFFALSE 21120
// exit ;
21118: GO 21633
// side := mc_sides [ base ] ;
21120: LD_ADDR_VAR 0 6
21124: PUSH
21125: LD_EXP 62
21129: PUSH
21130: LD_VAR 0 1
21134: ARRAY
21135: ST_TO_ADDR
// if not side then
21136: LD_VAR 0 6
21140: NOT
21141: IFFALSE 21145
// exit ;
21143: GO 21633
// for i in solds do
21145: LD_ADDR_VAR 0 7
21149: PUSH
21150: LD_VAR 0 2
21154: PUSH
21155: FOR_IN
21156: IFFALSE 21217
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
21158: LD_VAR 0 7
21162: PPUSH
21163: CALL_OW 310
21167: PPUSH
21168: CALL_OW 266
21172: PUSH
21173: LD_INT 32
21175: PUSH
21176: LD_INT 31
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: IN
21183: IFFALSE 21203
// solds := solds diff i else
21185: LD_ADDR_VAR 0 2
21189: PUSH
21190: LD_VAR 0 2
21194: PUSH
21195: LD_VAR 0 7
21199: DIFF
21200: ST_TO_ADDR
21201: GO 21215
// SetTag ( i , 18 ) ;
21203: LD_VAR 0 7
21207: PPUSH
21208: LD_INT 18
21210: PPUSH
21211: CALL_OW 109
21215: GO 21155
21217: POP
21218: POP
// if not solds then
21219: LD_VAR 0 2
21223: NOT
21224: IFFALSE 21228
// exit ;
21226: GO 21633
// repeat wait ( 0 0$1 ) ;
21228: LD_INT 35
21230: PPUSH
21231: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
21235: LD_ADDR_VAR 0 5
21239: PUSH
21240: LD_VAR 0 6
21244: PPUSH
21245: LD_VAR 0 3
21249: PPUSH
21250: CALL 21042 0 2
21254: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
21255: LD_EXP 36
21259: PUSH
21260: LD_VAR 0 1
21264: ARRAY
21265: NOT
21266: PUSH
21267: LD_EXP 36
21271: PUSH
21272: LD_VAR 0 1
21276: ARRAY
21277: PUSH
21278: EMPTY
21279: EQUAL
21280: OR
21281: IFFALSE 21318
// begin for i in solds do
21283: LD_ADDR_VAR 0 7
21287: PUSH
21288: LD_VAR 0 2
21292: PUSH
21293: FOR_IN
21294: IFFALSE 21307
// ComStop ( i ) ;
21296: LD_VAR 0 7
21300: PPUSH
21301: CALL_OW 141
21305: GO 21293
21307: POP
21308: POP
// solds := [ ] ;
21309: LD_ADDR_VAR 0 2
21313: PUSH
21314: EMPTY
21315: ST_TO_ADDR
// exit ;
21316: GO 21633
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
21318: LD_VAR 0 5
21322: NOT
21323: PUSH
21324: LD_VAR 0 5
21328: PUSH
21329: LD_INT 3
21331: GREATER
21332: OR
21333: PUSH
21334: LD_EXP 58
21338: PUSH
21339: LD_VAR 0 1
21343: ARRAY
21344: OR
21345: IFFALSE 21386
// begin for i in solds do
21347: LD_ADDR_VAR 0 7
21351: PUSH
21352: LD_VAR 0 2
21356: PUSH
21357: FOR_IN
21358: IFFALSE 21382
// if HasTask ( i ) then
21360: LD_VAR 0 7
21364: PPUSH
21365: CALL_OW 314
21369: IFFALSE 21380
// ComStop ( i ) ;
21371: LD_VAR 0 7
21375: PPUSH
21376: CALL_OW 141
21380: GO 21357
21382: POP
21383: POP
// break ;
21384: GO 21621
// end ; for i in solds do
21386: LD_ADDR_VAR 0 7
21390: PUSH
21391: LD_VAR 0 2
21395: PUSH
21396: FOR_IN
21397: IFFALSE 21613
// begin if IsInUnit ( i ) then
21399: LD_VAR 0 7
21403: PPUSH
21404: CALL_OW 310
21408: IFFALSE 21419
// ComExitBuilding ( i ) ;
21410: LD_VAR 0 7
21414: PPUSH
21415: CALL_OW 122
// if GetLives ( i ) > 333 then
21419: LD_VAR 0 7
21423: PPUSH
21424: CALL_OW 256
21428: PUSH
21429: LD_INT 333
21431: GREATER
21432: IFFALSE 21460
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
21434: LD_VAR 0 7
21438: PPUSH
21439: LD_VAR 0 5
21443: PPUSH
21444: LD_VAR 0 7
21448: PPUSH
21449: CALL_OW 74
21453: PPUSH
21454: CALL_OW 115
21458: GO 21611
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
21460: LD_ADDR_VAR 0 8
21464: PUSH
21465: LD_EXP 36
21469: PUSH
21470: LD_VAR 0 1
21474: ARRAY
21475: PPUSH
21476: LD_INT 2
21478: PUSH
21479: LD_INT 30
21481: PUSH
21482: LD_INT 0
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: LD_INT 30
21491: PUSH
21492: LD_INT 1
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 30
21501: PUSH
21502: LD_INT 6
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: PPUSH
21515: CALL_OW 72
21519: PPUSH
21520: LD_VAR 0 7
21524: PPUSH
21525: CALL_OW 74
21529: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
21530: LD_VAR 0 7
21534: PPUSH
21535: LD_VAR 0 8
21539: PPUSH
21540: CALL_OW 250
21544: PPUSH
21545: LD_INT 3
21547: PPUSH
21548: LD_INT 5
21550: PPUSH
21551: CALL_OW 272
21555: PPUSH
21556: LD_VAR 0 8
21560: PPUSH
21561: CALL_OW 251
21565: PPUSH
21566: LD_INT 3
21568: PPUSH
21569: LD_INT 5
21571: PPUSH
21572: CALL_OW 273
21576: PPUSH
21577: CALL_OW 111
// SetTag ( i , 0 ) ;
21581: LD_VAR 0 7
21585: PPUSH
21586: LD_INT 0
21588: PPUSH
21589: CALL_OW 109
// solds := solds diff i ;
21593: LD_ADDR_VAR 0 2
21597: PUSH
21598: LD_VAR 0 2
21602: PUSH
21603: LD_VAR 0 7
21607: DIFF
21608: ST_TO_ADDR
// continue ;
21609: GO 21396
// end ; end ;
21611: GO 21396
21613: POP
21614: POP
// until solds ;
21615: LD_VAR 0 2
21619: IFFALSE 21228
// MC_Reset ( base , 18 ) ;
21621: LD_VAR 0 1
21625: PPUSH
21626: LD_INT 18
21628: PPUSH
21629: CALL 66709 0 2
// end ;
21633: LD_VAR 0 4
21637: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
21638: LD_INT 0
21640: PPUSH
21641: PPUSH
21642: PPUSH
21643: PPUSH
21644: PPUSH
21645: PPUSH
21646: PPUSH
21647: PPUSH
21648: PPUSH
21649: PPUSH
21650: PPUSH
21651: PPUSH
21652: PPUSH
21653: PPUSH
21654: PPUSH
21655: PPUSH
21656: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
21657: LD_ADDR_VAR 0 13
21661: PUSH
21662: LD_EXP 36
21666: PUSH
21667: LD_VAR 0 1
21671: ARRAY
21672: PPUSH
21673: LD_INT 25
21675: PUSH
21676: LD_INT 3
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PPUSH
21683: CALL_OW 72
21687: ST_TO_ADDR
// if mc_remote_driver [ base ] then
21688: LD_EXP 76
21692: PUSH
21693: LD_VAR 0 1
21697: ARRAY
21698: IFFALSE 21722
// mechs := mechs diff mc_remote_driver [ base ] ;
21700: LD_ADDR_VAR 0 13
21704: PUSH
21705: LD_VAR 0 13
21709: PUSH
21710: LD_EXP 76
21714: PUSH
21715: LD_VAR 0 1
21719: ARRAY
21720: DIFF
21721: ST_TO_ADDR
// for i in mechs do
21722: LD_ADDR_VAR 0 5
21726: PUSH
21727: LD_VAR 0 13
21731: PUSH
21732: FOR_IN
21733: IFFALSE 21768
// if GetTag ( i ) > 0 then
21735: LD_VAR 0 5
21739: PPUSH
21740: CALL_OW 110
21744: PUSH
21745: LD_INT 0
21747: GREATER
21748: IFFALSE 21766
// mechs := mechs diff i ;
21750: LD_ADDR_VAR 0 13
21754: PUSH
21755: LD_VAR 0 13
21759: PUSH
21760: LD_VAR 0 5
21764: DIFF
21765: ST_TO_ADDR
21766: GO 21732
21768: POP
21769: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
21770: LD_ADDR_VAR 0 9
21774: PUSH
21775: LD_EXP 36
21779: PUSH
21780: LD_VAR 0 1
21784: ARRAY
21785: PPUSH
21786: LD_INT 2
21788: PUSH
21789: LD_INT 25
21791: PUSH
21792: LD_INT 1
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 25
21801: PUSH
21802: LD_INT 5
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: LD_INT 25
21811: PUSH
21812: LD_INT 8
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: LD_INT 25
21821: PUSH
21822: LD_INT 9
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: PPUSH
21836: CALL_OW 72
21840: ST_TO_ADDR
// if not defenders and not solds then
21841: LD_VAR 0 2
21845: NOT
21846: PUSH
21847: LD_VAR 0 9
21851: NOT
21852: AND
21853: IFFALSE 21857
// exit ;
21855: GO 23483
// depot_under_attack := false ;
21857: LD_ADDR_VAR 0 17
21861: PUSH
21862: LD_INT 0
21864: ST_TO_ADDR
// sold_defenders := [ ] ;
21865: LD_ADDR_VAR 0 18
21869: PUSH
21870: EMPTY
21871: ST_TO_ADDR
// if mechs then
21872: LD_VAR 0 13
21876: IFFALSE 22005
// for i in defenders do
21878: LD_ADDR_VAR 0 5
21882: PUSH
21883: LD_VAR 0 2
21887: PUSH
21888: FOR_IN
21889: IFFALSE 22003
// begin SetTag ( i , 20 ) ;
21891: LD_VAR 0 5
21895: PPUSH
21896: LD_INT 20
21898: PPUSH
21899: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
21903: LD_VAR 0 5
21907: PPUSH
21908: CALL_OW 263
21912: PUSH
21913: LD_INT 1
21915: EQUAL
21916: PUSH
21917: LD_VAR 0 5
21921: PPUSH
21922: CALL_OW 311
21926: NOT
21927: AND
21928: PUSH
21929: LD_VAR 0 13
21933: AND
21934: IFFALSE 22001
// begin un := mechs [ 1 ] ;
21936: LD_ADDR_VAR 0 11
21940: PUSH
21941: LD_VAR 0 13
21945: PUSH
21946: LD_INT 1
21948: ARRAY
21949: ST_TO_ADDR
// ComExitBuilding ( un ) ;
21950: LD_VAR 0 11
21954: PPUSH
21955: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
21959: LD_VAR 0 11
21963: PPUSH
21964: LD_VAR 0 5
21968: PPUSH
21969: CALL_OW 180
// SetTag ( un , 19 ) ;
21973: LD_VAR 0 11
21977: PPUSH
21978: LD_INT 19
21980: PPUSH
21981: CALL_OW 109
// mechs := mechs diff un ;
21985: LD_ADDR_VAR 0 13
21989: PUSH
21990: LD_VAR 0 13
21994: PUSH
21995: LD_VAR 0 11
21999: DIFF
22000: ST_TO_ADDR
// end ; end ;
22001: GO 21888
22003: POP
22004: POP
// if solds then
22005: LD_VAR 0 9
22009: IFFALSE 22068
// for i in solds do
22011: LD_ADDR_VAR 0 5
22015: PUSH
22016: LD_VAR 0 9
22020: PUSH
22021: FOR_IN
22022: IFFALSE 22066
// if not GetTag ( i ) then
22024: LD_VAR 0 5
22028: PPUSH
22029: CALL_OW 110
22033: NOT
22034: IFFALSE 22064
// begin defenders := defenders union i ;
22036: LD_ADDR_VAR 0 2
22040: PUSH
22041: LD_VAR 0 2
22045: PUSH
22046: LD_VAR 0 5
22050: UNION
22051: ST_TO_ADDR
// SetTag ( i , 18 ) ;
22052: LD_VAR 0 5
22056: PPUSH
22057: LD_INT 18
22059: PPUSH
22060: CALL_OW 109
// end ;
22064: GO 22021
22066: POP
22067: POP
// repeat wait ( 0 0$1 ) ;
22068: LD_INT 35
22070: PPUSH
22071: CALL_OW 67
// enemy := mc_scan [ base ] ;
22075: LD_ADDR_VAR 0 3
22079: PUSH
22080: LD_EXP 59
22084: PUSH
22085: LD_VAR 0 1
22089: ARRAY
22090: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
22091: LD_EXP 36
22095: PUSH
22096: LD_VAR 0 1
22100: ARRAY
22101: NOT
22102: PUSH
22103: LD_EXP 36
22107: PUSH
22108: LD_VAR 0 1
22112: ARRAY
22113: PUSH
22114: EMPTY
22115: EQUAL
22116: OR
22117: IFFALSE 22154
// begin for i in defenders do
22119: LD_ADDR_VAR 0 5
22123: PUSH
22124: LD_VAR 0 2
22128: PUSH
22129: FOR_IN
22130: IFFALSE 22143
// ComStop ( i ) ;
22132: LD_VAR 0 5
22136: PPUSH
22137: CALL_OW 141
22141: GO 22129
22143: POP
22144: POP
// defenders := [ ] ;
22145: LD_ADDR_VAR 0 2
22149: PUSH
22150: EMPTY
22151: ST_TO_ADDR
// exit ;
22152: GO 23483
// end ; for i in defenders do
22154: LD_ADDR_VAR 0 5
22158: PUSH
22159: LD_VAR 0 2
22163: PUSH
22164: FOR_IN
22165: IFFALSE 22983
// begin e := NearestUnitToUnit ( enemy , i ) ;
22167: LD_ADDR_VAR 0 14
22171: PUSH
22172: LD_VAR 0 3
22176: PPUSH
22177: LD_VAR 0 5
22181: PPUSH
22182: CALL_OW 74
22186: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
22187: LD_ADDR_VAR 0 8
22191: PUSH
22192: LD_EXP 36
22196: PUSH
22197: LD_VAR 0 1
22201: ARRAY
22202: PPUSH
22203: LD_INT 2
22205: PUSH
22206: LD_INT 30
22208: PUSH
22209: LD_INT 0
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 30
22218: PUSH
22219: LD_INT 1
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: LIST
22230: PPUSH
22231: CALL_OW 72
22235: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
22236: LD_ADDR_VAR 0 17
22240: PUSH
22241: LD_VAR 0 8
22245: NOT
22246: PUSH
22247: LD_VAR 0 8
22251: PPUSH
22252: LD_INT 3
22254: PUSH
22255: LD_INT 24
22257: PUSH
22258: LD_INT 600
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PPUSH
22269: CALL_OW 72
22273: OR
22274: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
22275: LD_VAR 0 5
22279: PPUSH
22280: CALL_OW 247
22284: PUSH
22285: LD_INT 2
22287: DOUBLE
22288: EQUAL
22289: IFTRUE 22293
22291: GO 22689
22293: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
22294: LD_VAR 0 5
22298: PPUSH
22299: CALL_OW 256
22303: PUSH
22304: LD_INT 650
22306: GREATER
22307: PUSH
22308: LD_VAR 0 5
22312: PPUSH
22313: LD_VAR 0 14
22317: PPUSH
22318: CALL_OW 296
22322: PUSH
22323: LD_INT 40
22325: LESS
22326: PUSH
22327: LD_VAR 0 14
22331: PPUSH
22332: LD_EXP 61
22336: PUSH
22337: LD_VAR 0 1
22341: ARRAY
22342: PPUSH
22343: CALL_OW 308
22347: OR
22348: AND
22349: IFFALSE 22471
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
22351: LD_VAR 0 5
22355: PPUSH
22356: CALL_OW 262
22360: PUSH
22361: LD_INT 1
22363: EQUAL
22364: PUSH
22365: LD_VAR 0 5
22369: PPUSH
22370: CALL_OW 261
22374: PUSH
22375: LD_INT 30
22377: LESS
22378: AND
22379: PUSH
22380: LD_VAR 0 8
22384: AND
22385: IFFALSE 22455
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
22387: LD_VAR 0 5
22391: PPUSH
22392: LD_VAR 0 8
22396: PPUSH
22397: LD_VAR 0 5
22401: PPUSH
22402: CALL_OW 74
22406: PPUSH
22407: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
22411: LD_VAR 0 5
22415: PPUSH
22416: LD_VAR 0 8
22420: PPUSH
22421: LD_VAR 0 5
22425: PPUSH
22426: CALL_OW 74
22430: PPUSH
22431: CALL_OW 296
22435: PUSH
22436: LD_INT 6
22438: LESS
22439: IFFALSE 22453
// SetFuel ( i , 100 ) ;
22441: LD_VAR 0 5
22445: PPUSH
22446: LD_INT 100
22448: PPUSH
22449: CALL_OW 240
// end else
22453: GO 22469
// ComAttackUnit ( i , e ) ;
22455: LD_VAR 0 5
22459: PPUSH
22460: LD_VAR 0 14
22464: PPUSH
22465: CALL_OW 115
// end else
22469: GO 22572
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
22471: LD_VAR 0 14
22475: PPUSH
22476: LD_EXP 61
22480: PUSH
22481: LD_VAR 0 1
22485: ARRAY
22486: PPUSH
22487: CALL_OW 308
22491: NOT
22492: PUSH
22493: LD_VAR 0 5
22497: PPUSH
22498: LD_VAR 0 14
22502: PPUSH
22503: CALL_OW 296
22507: PUSH
22508: LD_INT 40
22510: GREATEREQUAL
22511: AND
22512: PUSH
22513: LD_VAR 0 5
22517: PPUSH
22518: CALL_OW 256
22522: PUSH
22523: LD_INT 650
22525: LESSEQUAL
22526: OR
22527: PUSH
22528: LD_VAR 0 5
22532: PPUSH
22533: LD_EXP 60
22537: PUSH
22538: LD_VAR 0 1
22542: ARRAY
22543: PPUSH
22544: CALL_OW 308
22548: NOT
22549: AND
22550: IFFALSE 22572
// ComMoveToArea ( i , mc_parking [ base ] ) ;
22552: LD_VAR 0 5
22556: PPUSH
22557: LD_EXP 60
22561: PUSH
22562: LD_VAR 0 1
22566: ARRAY
22567: PPUSH
22568: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
22572: LD_VAR 0 5
22576: PPUSH
22577: CALL_OW 256
22581: PUSH
22582: LD_INT 998
22584: LESS
22585: PUSH
22586: LD_VAR 0 5
22590: PPUSH
22591: CALL_OW 263
22595: PUSH
22596: LD_INT 1
22598: EQUAL
22599: AND
22600: PUSH
22601: LD_VAR 0 5
22605: PPUSH
22606: CALL_OW 311
22610: AND
22611: PUSH
22612: LD_VAR 0 5
22616: PPUSH
22617: LD_EXP 60
22621: PUSH
22622: LD_VAR 0 1
22626: ARRAY
22627: PPUSH
22628: CALL_OW 308
22632: AND
22633: IFFALSE 22687
// begin mech := IsDrivenBy ( i ) ;
22635: LD_ADDR_VAR 0 10
22639: PUSH
22640: LD_VAR 0 5
22644: PPUSH
22645: CALL_OW 311
22649: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
22650: LD_VAR 0 10
22654: PPUSH
22655: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
22659: LD_VAR 0 10
22663: PPUSH
22664: LD_VAR 0 5
22668: PPUSH
22669: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
22673: LD_VAR 0 10
22677: PPUSH
22678: LD_VAR 0 5
22682: PPUSH
22683: CALL_OW 180
// end ; end ; unit_human :
22687: GO 22954
22689: LD_INT 1
22691: DOUBLE
22692: EQUAL
22693: IFTRUE 22697
22695: GO 22953
22697: POP
// begin b := IsInUnit ( i ) ;
22698: LD_ADDR_VAR 0 19
22702: PUSH
22703: LD_VAR 0 5
22707: PPUSH
22708: CALL_OW 310
22712: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
22713: LD_ADDR_VAR 0 20
22717: PUSH
22718: LD_VAR 0 19
22722: NOT
22723: PUSH
22724: LD_VAR 0 19
22728: PPUSH
22729: CALL_OW 266
22733: PUSH
22734: LD_INT 32
22736: PUSH
22737: LD_INT 31
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: IN
22744: OR
22745: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
22746: LD_VAR 0 17
22750: PUSH
22751: LD_VAR 0 2
22755: PPUSH
22756: LD_INT 21
22758: PUSH
22759: LD_INT 2
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PPUSH
22766: CALL_OW 72
22770: PUSH
22771: LD_INT 1
22773: LESSEQUAL
22774: OR
22775: PUSH
22776: LD_VAR 0 20
22780: AND
22781: PUSH
22782: LD_VAR 0 5
22786: PUSH
22787: LD_VAR 0 18
22791: IN
22792: NOT
22793: AND
22794: IFFALSE 22887
// begin if b then
22796: LD_VAR 0 19
22800: IFFALSE 22849
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
22802: LD_VAR 0 19
22806: PPUSH
22807: LD_VAR 0 3
22811: PPUSH
22812: LD_VAR 0 19
22816: PPUSH
22817: CALL_OW 74
22821: PPUSH
22822: CALL_OW 296
22826: PUSH
22827: LD_INT 10
22829: LESS
22830: PUSH
22831: LD_VAR 0 19
22835: PPUSH
22836: CALL_OW 461
22840: PUSH
22841: LD_INT 7
22843: NONEQUAL
22844: AND
22845: IFFALSE 22849
// continue ;
22847: GO 22164
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
22849: LD_ADDR_VAR 0 18
22853: PUSH
22854: LD_VAR 0 18
22858: PPUSH
22859: LD_VAR 0 18
22863: PUSH
22864: LD_INT 1
22866: PLUS
22867: PPUSH
22868: LD_VAR 0 5
22872: PPUSH
22873: CALL_OW 1
22877: ST_TO_ADDR
// ComExitBuilding ( i ) ;
22878: LD_VAR 0 5
22882: PPUSH
22883: CALL_OW 122
// end ; if sold_defenders then
22887: LD_VAR 0 18
22891: IFFALSE 22951
// if i in sold_defenders then
22893: LD_VAR 0 5
22897: PUSH
22898: LD_VAR 0 18
22902: IN
22903: IFFALSE 22951
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
22905: LD_VAR 0 5
22909: PPUSH
22910: CALL_OW 314
22914: NOT
22915: PUSH
22916: LD_VAR 0 5
22920: PPUSH
22921: LD_VAR 0 14
22925: PPUSH
22926: CALL_OW 296
22930: PUSH
22931: LD_INT 30
22933: LESS
22934: AND
22935: IFFALSE 22951
// ComAttackUnit ( i , e ) ;
22937: LD_VAR 0 5
22941: PPUSH
22942: LD_VAR 0 14
22946: PPUSH
22947: CALL_OW 115
// end ; end ; end ;
22951: GO 22954
22953: POP
// if IsDead ( i ) then
22954: LD_VAR 0 5
22958: PPUSH
22959: CALL_OW 301
22963: IFFALSE 22981
// defenders := defenders diff i ;
22965: LD_ADDR_VAR 0 2
22969: PUSH
22970: LD_VAR 0 2
22974: PUSH
22975: LD_VAR 0 5
22979: DIFF
22980: ST_TO_ADDR
// end ;
22981: GO 22164
22983: POP
22984: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
22985: LD_VAR 0 3
22989: NOT
22990: PUSH
22991: LD_VAR 0 2
22995: NOT
22996: OR
22997: PUSH
22998: LD_EXP 36
23002: PUSH
23003: LD_VAR 0 1
23007: ARRAY
23008: NOT
23009: OR
23010: IFFALSE 22068
// MC_Reset ( base , 18 ) ;
23012: LD_VAR 0 1
23016: PPUSH
23017: LD_INT 18
23019: PPUSH
23020: CALL 66709 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
23024: LD_ADDR_VAR 0 2
23028: PUSH
23029: LD_VAR 0 2
23033: PUSH
23034: LD_VAR 0 2
23038: PPUSH
23039: LD_INT 2
23041: PUSH
23042: LD_INT 25
23044: PUSH
23045: LD_INT 1
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 25
23054: PUSH
23055: LD_INT 5
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: LD_INT 25
23064: PUSH
23065: LD_INT 8
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 25
23074: PUSH
23075: LD_INT 9
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: PPUSH
23089: CALL_OW 72
23093: DIFF
23094: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
23095: LD_VAR 0 3
23099: NOT
23100: PUSH
23101: LD_VAR 0 2
23105: PPUSH
23106: LD_INT 21
23108: PUSH
23109: LD_INT 2
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PPUSH
23116: CALL_OW 72
23120: AND
23121: IFFALSE 23459
// begin tmp := FilterByTag ( defenders , 19 ) ;
23123: LD_ADDR_VAR 0 12
23127: PUSH
23128: LD_VAR 0 2
23132: PPUSH
23133: LD_INT 19
23135: PPUSH
23136: CALL 59922 0 2
23140: ST_TO_ADDR
// if tmp then
23141: LD_VAR 0 12
23145: IFFALSE 23215
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
23147: LD_ADDR_VAR 0 12
23151: PUSH
23152: LD_VAR 0 12
23156: PPUSH
23157: LD_INT 25
23159: PUSH
23160: LD_INT 3
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PPUSH
23167: CALL_OW 72
23171: ST_TO_ADDR
// if tmp then
23172: LD_VAR 0 12
23176: IFFALSE 23215
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
23178: LD_ADDR_EXP 48
23182: PUSH
23183: LD_EXP 48
23187: PPUSH
23188: LD_VAR 0 1
23192: PPUSH
23193: LD_EXP 48
23197: PUSH
23198: LD_VAR 0 1
23202: ARRAY
23203: PUSH
23204: LD_VAR 0 12
23208: UNION
23209: PPUSH
23210: CALL_OW 1
23214: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
23215: LD_VAR 0 1
23219: PPUSH
23220: LD_INT 19
23222: PPUSH
23223: CALL 66709 0 2
// repeat wait ( 0 0$1 ) ;
23227: LD_INT 35
23229: PPUSH
23230: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
23234: LD_EXP 36
23238: PUSH
23239: LD_VAR 0 1
23243: ARRAY
23244: NOT
23245: PUSH
23246: LD_EXP 36
23250: PUSH
23251: LD_VAR 0 1
23255: ARRAY
23256: PUSH
23257: EMPTY
23258: EQUAL
23259: OR
23260: IFFALSE 23297
// begin for i in defenders do
23262: LD_ADDR_VAR 0 5
23266: PUSH
23267: LD_VAR 0 2
23271: PUSH
23272: FOR_IN
23273: IFFALSE 23286
// ComStop ( i ) ;
23275: LD_VAR 0 5
23279: PPUSH
23280: CALL_OW 141
23284: GO 23272
23286: POP
23287: POP
// defenders := [ ] ;
23288: LD_ADDR_VAR 0 2
23292: PUSH
23293: EMPTY
23294: ST_TO_ADDR
// exit ;
23295: GO 23483
// end ; for i in defenders do
23297: LD_ADDR_VAR 0 5
23301: PUSH
23302: LD_VAR 0 2
23306: PUSH
23307: FOR_IN
23308: IFFALSE 23397
// begin if not IsInArea ( i , mc_parking [ base ] ) then
23310: LD_VAR 0 5
23314: PPUSH
23315: LD_EXP 60
23319: PUSH
23320: LD_VAR 0 1
23324: ARRAY
23325: PPUSH
23326: CALL_OW 308
23330: NOT
23331: IFFALSE 23355
// ComMoveToArea ( i , mc_parking [ base ] ) else
23333: LD_VAR 0 5
23337: PPUSH
23338: LD_EXP 60
23342: PUSH
23343: LD_VAR 0 1
23347: ARRAY
23348: PPUSH
23349: CALL_OW 113
23353: GO 23395
// if GetControl ( i ) = control_manual then
23355: LD_VAR 0 5
23359: PPUSH
23360: CALL_OW 263
23364: PUSH
23365: LD_INT 1
23367: EQUAL
23368: IFFALSE 23395
// if IsDrivenBy ( i ) then
23370: LD_VAR 0 5
23374: PPUSH
23375: CALL_OW 311
23379: IFFALSE 23395
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
23381: LD_VAR 0 5
23385: PPUSH
23386: CALL_OW 311
23390: PPUSH
23391: CALL_OW 121
// end ;
23395: GO 23307
23397: POP
23398: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
23399: LD_VAR 0 2
23403: PPUSH
23404: LD_INT 95
23406: PUSH
23407: LD_EXP 60
23411: PUSH
23412: LD_VAR 0 1
23416: ARRAY
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PPUSH
23422: CALL_OW 72
23426: PUSH
23427: LD_VAR 0 2
23431: EQUAL
23432: PUSH
23433: LD_EXP 59
23437: PUSH
23438: LD_VAR 0 1
23442: ARRAY
23443: OR
23444: PUSH
23445: LD_EXP 36
23449: PUSH
23450: LD_VAR 0 1
23454: ARRAY
23455: NOT
23456: OR
23457: IFFALSE 23227
// end ; MC_Reset ( base , 19 ) ;
23459: LD_VAR 0 1
23463: PPUSH
23464: LD_INT 19
23466: PPUSH
23467: CALL 66709 0 2
// MC_Reset ( base , 20 ) ;
23471: LD_VAR 0 1
23475: PPUSH
23476: LD_INT 20
23478: PPUSH
23479: CALL 66709 0 2
// end ;
23483: LD_VAR 0 4
23487: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23488: LD_INT 0
23490: PPUSH
23491: PPUSH
23492: PPUSH
23493: PPUSH
// result := false ;
23494: LD_ADDR_VAR 0 2
23498: PUSH
23499: LD_INT 0
23501: ST_TO_ADDR
// side := GetSide ( unit ) ;
23502: LD_ADDR_VAR 0 3
23506: PUSH
23507: LD_VAR 0 1
23511: PPUSH
23512: CALL_OW 255
23516: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23517: LD_ADDR_VAR 0 4
23521: PUSH
23522: LD_VAR 0 1
23526: PPUSH
23527: CALL_OW 248
23531: ST_TO_ADDR
// case nat of 1 :
23532: LD_VAR 0 4
23536: PUSH
23537: LD_INT 1
23539: DOUBLE
23540: EQUAL
23541: IFTRUE 23545
23543: GO 23556
23545: POP
// tech := tech_lassight ; 2 :
23546: LD_ADDR_VAR 0 5
23550: PUSH
23551: LD_INT 12
23553: ST_TO_ADDR
23554: GO 23595
23556: LD_INT 2
23558: DOUBLE
23559: EQUAL
23560: IFTRUE 23564
23562: GO 23575
23564: POP
// tech := tech_mortar ; 3 :
23565: LD_ADDR_VAR 0 5
23569: PUSH
23570: LD_INT 41
23572: ST_TO_ADDR
23573: GO 23595
23575: LD_INT 3
23577: DOUBLE
23578: EQUAL
23579: IFTRUE 23583
23581: GO 23594
23583: POP
// tech := tech_bazooka ; end ;
23584: LD_ADDR_VAR 0 5
23588: PUSH
23589: LD_INT 44
23591: ST_TO_ADDR
23592: GO 23595
23594: POP
// if Researched ( side , tech ) then
23595: LD_VAR 0 3
23599: PPUSH
23600: LD_VAR 0 5
23604: PPUSH
23605: CALL_OW 325
23609: IFFALSE 23636
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23611: LD_ADDR_VAR 0 2
23615: PUSH
23616: LD_INT 5
23618: PUSH
23619: LD_INT 8
23621: PUSH
23622: LD_INT 9
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: LIST
23629: PUSH
23630: LD_VAR 0 4
23634: ARRAY
23635: ST_TO_ADDR
// end ;
23636: LD_VAR 0 2
23640: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23641: LD_INT 0
23643: PPUSH
23644: PPUSH
23645: PPUSH
// if not mines then
23646: LD_VAR 0 2
23650: NOT
23651: IFFALSE 23655
// exit ;
23653: GO 23799
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23655: LD_ADDR_VAR 0 5
23659: PUSH
23660: LD_INT 81
23662: PUSH
23663: LD_VAR 0 1
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PUSH
23672: LD_INT 3
23674: PUSH
23675: LD_INT 21
23677: PUSH
23678: LD_INT 3
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PPUSH
23693: CALL_OW 69
23697: ST_TO_ADDR
// for i in mines do
23698: LD_ADDR_VAR 0 4
23702: PUSH
23703: LD_VAR 0 2
23707: PUSH
23708: FOR_IN
23709: IFFALSE 23797
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23711: LD_VAR 0 4
23715: PUSH
23716: LD_INT 1
23718: ARRAY
23719: PPUSH
23720: LD_VAR 0 4
23724: PUSH
23725: LD_INT 2
23727: ARRAY
23728: PPUSH
23729: CALL_OW 458
23733: NOT
23734: IFFALSE 23738
// continue ;
23736: GO 23708
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23738: LD_VAR 0 4
23742: PUSH
23743: LD_INT 1
23745: ARRAY
23746: PPUSH
23747: LD_VAR 0 4
23751: PUSH
23752: LD_INT 2
23754: ARRAY
23755: PPUSH
23756: CALL_OW 428
23760: PUSH
23761: LD_VAR 0 5
23765: IN
23766: IFFALSE 23795
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23768: LD_VAR 0 4
23772: PUSH
23773: LD_INT 1
23775: ARRAY
23776: PPUSH
23777: LD_VAR 0 4
23781: PUSH
23782: LD_INT 2
23784: ARRAY
23785: PPUSH
23786: LD_VAR 0 1
23790: PPUSH
23791: CALL_OW 456
// end ;
23795: GO 23708
23797: POP
23798: POP
// end ;
23799: LD_VAR 0 3
23803: RET
// export function Count ( array ) ; var i ; begin
23804: LD_INT 0
23806: PPUSH
23807: PPUSH
// result := 0 ;
23808: LD_ADDR_VAR 0 2
23812: PUSH
23813: LD_INT 0
23815: ST_TO_ADDR
// for i in array do
23816: LD_ADDR_VAR 0 3
23820: PUSH
23821: LD_VAR 0 1
23825: PUSH
23826: FOR_IN
23827: IFFALSE 23851
// if i then
23829: LD_VAR 0 3
23833: IFFALSE 23849
// result := result + 1 ;
23835: LD_ADDR_VAR 0 2
23839: PUSH
23840: LD_VAR 0 2
23844: PUSH
23845: LD_INT 1
23847: PLUS
23848: ST_TO_ADDR
23849: GO 23826
23851: POP
23852: POP
// end ;
23853: LD_VAR 0 2
23857: RET
// export function IsEmpty ( building ) ; begin
23858: LD_INT 0
23860: PPUSH
// if not building then
23861: LD_VAR 0 1
23865: NOT
23866: IFFALSE 23870
// exit ;
23868: GO 23913
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23870: LD_ADDR_VAR 0 2
23874: PUSH
23875: LD_VAR 0 1
23879: PUSH
23880: LD_INT 22
23882: PUSH
23883: LD_VAR 0 1
23887: PPUSH
23888: CALL_OW 255
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: LD_INT 58
23899: PUSH
23900: EMPTY
23901: LIST
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PPUSH
23907: CALL_OW 69
23911: IN
23912: ST_TO_ADDR
// end ;
23913: LD_VAR 0 2
23917: RET
// export function IsNotFull ( building ) ; begin
23918: LD_INT 0
23920: PPUSH
// if not building then
23921: LD_VAR 0 1
23925: NOT
23926: IFFALSE 23930
// exit ;
23928: GO 23949
// result := UnitsInside ( building ) < 6 ;
23930: LD_ADDR_VAR 0 2
23934: PUSH
23935: LD_VAR 0 1
23939: PPUSH
23940: CALL_OW 313
23944: PUSH
23945: LD_INT 6
23947: LESS
23948: ST_TO_ADDR
// end ;
23949: LD_VAR 0 2
23953: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23954: LD_INT 0
23956: PPUSH
23957: PPUSH
23958: PPUSH
23959: PPUSH
// tmp := [ ] ;
23960: LD_ADDR_VAR 0 3
23964: PUSH
23965: EMPTY
23966: ST_TO_ADDR
// list := [ ] ;
23967: LD_ADDR_VAR 0 5
23971: PUSH
23972: EMPTY
23973: ST_TO_ADDR
// for i = 16 to 25 do
23974: LD_ADDR_VAR 0 4
23978: PUSH
23979: DOUBLE
23980: LD_INT 16
23982: DEC
23983: ST_TO_ADDR
23984: LD_INT 25
23986: PUSH
23987: FOR_TO
23988: IFFALSE 24061
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23990: LD_ADDR_VAR 0 3
23994: PUSH
23995: LD_VAR 0 3
23999: PUSH
24000: LD_INT 22
24002: PUSH
24003: LD_VAR 0 1
24007: PPUSH
24008: CALL_OW 255
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 91
24019: PUSH
24020: LD_VAR 0 1
24024: PUSH
24025: LD_INT 6
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 30
24035: PUSH
24036: LD_VAR 0 4
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: LIST
24049: PUSH
24050: EMPTY
24051: LIST
24052: PPUSH
24053: CALL_OW 69
24057: ADD
24058: ST_TO_ADDR
24059: GO 23987
24061: POP
24062: POP
// for i = 1 to tmp do
24063: LD_ADDR_VAR 0 4
24067: PUSH
24068: DOUBLE
24069: LD_INT 1
24071: DEC
24072: ST_TO_ADDR
24073: LD_VAR 0 3
24077: PUSH
24078: FOR_TO
24079: IFFALSE 24167
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24081: LD_ADDR_VAR 0 5
24085: PUSH
24086: LD_VAR 0 5
24090: PUSH
24091: LD_VAR 0 3
24095: PUSH
24096: LD_VAR 0 4
24100: ARRAY
24101: PPUSH
24102: CALL_OW 266
24106: PUSH
24107: LD_VAR 0 3
24111: PUSH
24112: LD_VAR 0 4
24116: ARRAY
24117: PPUSH
24118: CALL_OW 250
24122: PUSH
24123: LD_VAR 0 3
24127: PUSH
24128: LD_VAR 0 4
24132: ARRAY
24133: PPUSH
24134: CALL_OW 251
24138: PUSH
24139: LD_VAR 0 3
24143: PUSH
24144: LD_VAR 0 4
24148: ARRAY
24149: PPUSH
24150: CALL_OW 254
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: PUSH
24161: EMPTY
24162: LIST
24163: ADD
24164: ST_TO_ADDR
24165: GO 24078
24167: POP
24168: POP
// result := list ;
24169: LD_ADDR_VAR 0 2
24173: PUSH
24174: LD_VAR 0 5
24178: ST_TO_ADDR
// end ;
24179: LD_VAR 0 2
24183: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24184: LD_INT 0
24186: PPUSH
24187: PPUSH
24188: PPUSH
24189: PPUSH
24190: PPUSH
24191: PPUSH
24192: PPUSH
// if not factory then
24193: LD_VAR 0 1
24197: NOT
24198: IFFALSE 24202
// exit ;
24200: GO 24795
// if control = control_apeman then
24202: LD_VAR 0 4
24206: PUSH
24207: LD_INT 5
24209: EQUAL
24210: IFFALSE 24319
// begin tmp := UnitsInside ( factory ) ;
24212: LD_ADDR_VAR 0 8
24216: PUSH
24217: LD_VAR 0 1
24221: PPUSH
24222: CALL_OW 313
24226: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24227: LD_VAR 0 8
24231: PPUSH
24232: LD_INT 25
24234: PUSH
24235: LD_INT 12
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PPUSH
24242: CALL_OW 72
24246: NOT
24247: IFFALSE 24257
// control := control_manual ;
24249: LD_ADDR_VAR 0 4
24253: PUSH
24254: LD_INT 1
24256: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24257: LD_ADDR_VAR 0 8
24261: PUSH
24262: LD_VAR 0 1
24266: PPUSH
24267: CALL 23954 0 1
24271: ST_TO_ADDR
// if tmp then
24272: LD_VAR 0 8
24276: IFFALSE 24319
// begin for i in tmp do
24278: LD_ADDR_VAR 0 7
24282: PUSH
24283: LD_VAR 0 8
24287: PUSH
24288: FOR_IN
24289: IFFALSE 24317
// if i [ 1 ] = b_ext_radio then
24291: LD_VAR 0 7
24295: PUSH
24296: LD_INT 1
24298: ARRAY
24299: PUSH
24300: LD_INT 22
24302: EQUAL
24303: IFFALSE 24315
// begin control := control_remote ;
24305: LD_ADDR_VAR 0 4
24309: PUSH
24310: LD_INT 2
24312: ST_TO_ADDR
// break ;
24313: GO 24317
// end ;
24315: GO 24288
24317: POP
24318: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24319: LD_VAR 0 1
24323: PPUSH
24324: LD_VAR 0 2
24328: PPUSH
24329: LD_VAR 0 3
24333: PPUSH
24334: LD_VAR 0 4
24338: PPUSH
24339: LD_VAR 0 5
24343: PPUSH
24344: CALL_OW 448
24348: IFFALSE 24383
// begin result := [ chassis , engine , control , weapon ] ;
24350: LD_ADDR_VAR 0 6
24354: PUSH
24355: LD_VAR 0 2
24359: PUSH
24360: LD_VAR 0 3
24364: PUSH
24365: LD_VAR 0 4
24369: PUSH
24370: LD_VAR 0 5
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: ST_TO_ADDR
// exit ;
24381: GO 24795
// end ; _chassis := AvailableChassisList ( factory ) ;
24383: LD_ADDR_VAR 0 9
24387: PUSH
24388: LD_VAR 0 1
24392: PPUSH
24393: CALL_OW 475
24397: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24398: LD_ADDR_VAR 0 11
24402: PUSH
24403: LD_VAR 0 1
24407: PPUSH
24408: CALL_OW 476
24412: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24413: LD_ADDR_VAR 0 12
24417: PUSH
24418: LD_VAR 0 1
24422: PPUSH
24423: CALL_OW 477
24427: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24428: LD_ADDR_VAR 0 10
24432: PUSH
24433: LD_VAR 0 1
24437: PPUSH
24438: CALL_OW 478
24442: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24443: LD_VAR 0 9
24447: NOT
24448: PUSH
24449: LD_VAR 0 11
24453: NOT
24454: OR
24455: PUSH
24456: LD_VAR 0 12
24460: NOT
24461: OR
24462: PUSH
24463: LD_VAR 0 10
24467: NOT
24468: OR
24469: IFFALSE 24504
// begin result := [ chassis , engine , control , weapon ] ;
24471: LD_ADDR_VAR 0 6
24475: PUSH
24476: LD_VAR 0 2
24480: PUSH
24481: LD_VAR 0 3
24485: PUSH
24486: LD_VAR 0 4
24490: PUSH
24491: LD_VAR 0 5
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: ST_TO_ADDR
// exit ;
24502: GO 24795
// end ; if not chassis in _chassis then
24504: LD_VAR 0 2
24508: PUSH
24509: LD_VAR 0 9
24513: IN
24514: NOT
24515: IFFALSE 24541
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24517: LD_ADDR_VAR 0 2
24521: PUSH
24522: LD_VAR 0 9
24526: PUSH
24527: LD_INT 1
24529: PPUSH
24530: LD_VAR 0 9
24534: PPUSH
24535: CALL_OW 12
24539: ARRAY
24540: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24541: LD_VAR 0 2
24545: PPUSH
24546: LD_VAR 0 3
24550: PPUSH
24551: CALL 24800 0 2
24555: NOT
24556: IFFALSE 24615
// repeat engine := _engine [ 1 ] ;
24558: LD_ADDR_VAR 0 3
24562: PUSH
24563: LD_VAR 0 11
24567: PUSH
24568: LD_INT 1
24570: ARRAY
24571: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24572: LD_ADDR_VAR 0 11
24576: PUSH
24577: LD_VAR 0 11
24581: PPUSH
24582: LD_INT 1
24584: PPUSH
24585: CALL_OW 3
24589: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24590: LD_VAR 0 2
24594: PPUSH
24595: LD_VAR 0 3
24599: PPUSH
24600: CALL 24800 0 2
24604: PUSH
24605: LD_VAR 0 11
24609: PUSH
24610: EMPTY
24611: EQUAL
24612: OR
24613: IFFALSE 24558
// if not control in _control then
24615: LD_VAR 0 4
24619: PUSH
24620: LD_VAR 0 12
24624: IN
24625: NOT
24626: IFFALSE 24652
// control := _control [ rand ( 1 , _control ) ] ;
24628: LD_ADDR_VAR 0 4
24632: PUSH
24633: LD_VAR 0 12
24637: PUSH
24638: LD_INT 1
24640: PPUSH
24641: LD_VAR 0 12
24645: PPUSH
24646: CALL_OW 12
24650: ARRAY
24651: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24652: LD_VAR 0 2
24656: PPUSH
24657: LD_VAR 0 5
24661: PPUSH
24662: CALL 25020 0 2
24666: NOT
24667: IFFALSE 24726
// repeat weapon := _weapon [ 1 ] ;
24669: LD_ADDR_VAR 0 5
24673: PUSH
24674: LD_VAR 0 10
24678: PUSH
24679: LD_INT 1
24681: ARRAY
24682: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24683: LD_ADDR_VAR 0 10
24687: PUSH
24688: LD_VAR 0 10
24692: PPUSH
24693: LD_INT 1
24695: PPUSH
24696: CALL_OW 3
24700: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24701: LD_VAR 0 2
24705: PPUSH
24706: LD_VAR 0 5
24710: PPUSH
24711: CALL 25020 0 2
24715: PUSH
24716: LD_VAR 0 10
24720: PUSH
24721: EMPTY
24722: EQUAL
24723: OR
24724: IFFALSE 24669
// result := [ ] ;
24726: LD_ADDR_VAR 0 6
24730: PUSH
24731: EMPTY
24732: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24733: LD_VAR 0 1
24737: PPUSH
24738: LD_VAR 0 2
24742: PPUSH
24743: LD_VAR 0 3
24747: PPUSH
24748: LD_VAR 0 4
24752: PPUSH
24753: LD_VAR 0 5
24757: PPUSH
24758: CALL_OW 448
24762: IFFALSE 24795
// result := [ chassis , engine , control , weapon ] ;
24764: LD_ADDR_VAR 0 6
24768: PUSH
24769: LD_VAR 0 2
24773: PUSH
24774: LD_VAR 0 3
24778: PUSH
24779: LD_VAR 0 4
24783: PUSH
24784: LD_VAR 0 5
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: ST_TO_ADDR
// end ;
24795: LD_VAR 0 6
24799: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24800: LD_INT 0
24802: PPUSH
// if not chassis or not engine then
24803: LD_VAR 0 1
24807: NOT
24808: PUSH
24809: LD_VAR 0 2
24813: NOT
24814: OR
24815: IFFALSE 24819
// exit ;
24817: GO 25015
// case engine of engine_solar :
24819: LD_VAR 0 2
24823: PUSH
24824: LD_INT 2
24826: DOUBLE
24827: EQUAL
24828: IFTRUE 24832
24830: GO 24870
24832: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24833: LD_ADDR_VAR 0 3
24837: PUSH
24838: LD_INT 11
24840: PUSH
24841: LD_INT 12
24843: PUSH
24844: LD_INT 13
24846: PUSH
24847: LD_INT 14
24849: PUSH
24850: LD_INT 1
24852: PUSH
24853: LD_INT 2
24855: PUSH
24856: LD_INT 3
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: ST_TO_ADDR
24868: GO 24999
24870: LD_INT 1
24872: DOUBLE
24873: EQUAL
24874: IFTRUE 24878
24876: GO 24940
24878: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24879: LD_ADDR_VAR 0 3
24883: PUSH
24884: LD_INT 11
24886: PUSH
24887: LD_INT 12
24889: PUSH
24890: LD_INT 13
24892: PUSH
24893: LD_INT 14
24895: PUSH
24896: LD_INT 1
24898: PUSH
24899: LD_INT 2
24901: PUSH
24902: LD_INT 3
24904: PUSH
24905: LD_INT 4
24907: PUSH
24908: LD_INT 5
24910: PUSH
24911: LD_INT 21
24913: PUSH
24914: LD_INT 23
24916: PUSH
24917: LD_INT 22
24919: PUSH
24920: LD_INT 24
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: ST_TO_ADDR
24938: GO 24999
24940: LD_INT 3
24942: DOUBLE
24943: EQUAL
24944: IFTRUE 24948
24946: GO 24998
24948: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24949: LD_ADDR_VAR 0 3
24953: PUSH
24954: LD_INT 13
24956: PUSH
24957: LD_INT 14
24959: PUSH
24960: LD_INT 2
24962: PUSH
24963: LD_INT 3
24965: PUSH
24966: LD_INT 4
24968: PUSH
24969: LD_INT 5
24971: PUSH
24972: LD_INT 21
24974: PUSH
24975: LD_INT 22
24977: PUSH
24978: LD_INT 23
24980: PUSH
24981: LD_INT 24
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: ST_TO_ADDR
24996: GO 24999
24998: POP
// result := ( chassis in result ) ;
24999: LD_ADDR_VAR 0 3
25003: PUSH
25004: LD_VAR 0 1
25008: PUSH
25009: LD_VAR 0 3
25013: IN
25014: ST_TO_ADDR
// end ;
25015: LD_VAR 0 3
25019: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25020: LD_INT 0
25022: PPUSH
// if not chassis or not weapon then
25023: LD_VAR 0 1
25027: NOT
25028: PUSH
25029: LD_VAR 0 2
25033: NOT
25034: OR
25035: IFFALSE 25039
// exit ;
25037: GO 26065
// case weapon of us_machine_gun :
25039: LD_VAR 0 2
25043: PUSH
25044: LD_INT 2
25046: DOUBLE
25047: EQUAL
25048: IFTRUE 25052
25050: GO 25082
25052: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25053: LD_ADDR_VAR 0 3
25057: PUSH
25058: LD_INT 1
25060: PUSH
25061: LD_INT 2
25063: PUSH
25064: LD_INT 3
25066: PUSH
25067: LD_INT 4
25069: PUSH
25070: LD_INT 5
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: ST_TO_ADDR
25080: GO 26049
25082: LD_INT 3
25084: DOUBLE
25085: EQUAL
25086: IFTRUE 25090
25088: GO 25120
25090: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25091: LD_ADDR_VAR 0 3
25095: PUSH
25096: LD_INT 1
25098: PUSH
25099: LD_INT 2
25101: PUSH
25102: LD_INT 3
25104: PUSH
25105: LD_INT 4
25107: PUSH
25108: LD_INT 5
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: ST_TO_ADDR
25118: GO 26049
25120: LD_INT 11
25122: DOUBLE
25123: EQUAL
25124: IFTRUE 25128
25126: GO 25158
25128: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25129: LD_ADDR_VAR 0 3
25133: PUSH
25134: LD_INT 1
25136: PUSH
25137: LD_INT 2
25139: PUSH
25140: LD_INT 3
25142: PUSH
25143: LD_INT 4
25145: PUSH
25146: LD_INT 5
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: ST_TO_ADDR
25156: GO 26049
25158: LD_INT 4
25160: DOUBLE
25161: EQUAL
25162: IFTRUE 25166
25164: GO 25192
25166: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25167: LD_ADDR_VAR 0 3
25171: PUSH
25172: LD_INT 2
25174: PUSH
25175: LD_INT 3
25177: PUSH
25178: LD_INT 4
25180: PUSH
25181: LD_INT 5
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: ST_TO_ADDR
25190: GO 26049
25192: LD_INT 5
25194: DOUBLE
25195: EQUAL
25196: IFTRUE 25200
25198: GO 25226
25200: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25201: LD_ADDR_VAR 0 3
25205: PUSH
25206: LD_INT 2
25208: PUSH
25209: LD_INT 3
25211: PUSH
25212: LD_INT 4
25214: PUSH
25215: LD_INT 5
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: ST_TO_ADDR
25224: GO 26049
25226: LD_INT 9
25228: DOUBLE
25229: EQUAL
25230: IFTRUE 25234
25232: GO 25260
25234: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25235: LD_ADDR_VAR 0 3
25239: PUSH
25240: LD_INT 2
25242: PUSH
25243: LD_INT 3
25245: PUSH
25246: LD_INT 4
25248: PUSH
25249: LD_INT 5
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: ST_TO_ADDR
25258: GO 26049
25260: LD_INT 7
25262: DOUBLE
25263: EQUAL
25264: IFTRUE 25268
25266: GO 25294
25268: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25269: LD_ADDR_VAR 0 3
25273: PUSH
25274: LD_INT 2
25276: PUSH
25277: LD_INT 3
25279: PUSH
25280: LD_INT 4
25282: PUSH
25283: LD_INT 5
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: ST_TO_ADDR
25292: GO 26049
25294: LD_INT 12
25296: DOUBLE
25297: EQUAL
25298: IFTRUE 25302
25300: GO 25328
25302: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25303: LD_ADDR_VAR 0 3
25307: PUSH
25308: LD_INT 2
25310: PUSH
25311: LD_INT 3
25313: PUSH
25314: LD_INT 4
25316: PUSH
25317: LD_INT 5
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: ST_TO_ADDR
25326: GO 26049
25328: LD_INT 13
25330: DOUBLE
25331: EQUAL
25332: IFTRUE 25336
25334: GO 25362
25336: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25337: LD_ADDR_VAR 0 3
25341: PUSH
25342: LD_INT 2
25344: PUSH
25345: LD_INT 3
25347: PUSH
25348: LD_INT 4
25350: PUSH
25351: LD_INT 5
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: ST_TO_ADDR
25360: GO 26049
25362: LD_INT 14
25364: DOUBLE
25365: EQUAL
25366: IFTRUE 25370
25368: GO 25388
25370: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25371: LD_ADDR_VAR 0 3
25375: PUSH
25376: LD_INT 4
25378: PUSH
25379: LD_INT 5
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: ST_TO_ADDR
25386: GO 26049
25388: LD_INT 6
25390: DOUBLE
25391: EQUAL
25392: IFTRUE 25396
25394: GO 25414
25396: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25397: LD_ADDR_VAR 0 3
25401: PUSH
25402: LD_INT 4
25404: PUSH
25405: LD_INT 5
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: ST_TO_ADDR
25412: GO 26049
25414: LD_INT 10
25416: DOUBLE
25417: EQUAL
25418: IFTRUE 25422
25420: GO 25440
25422: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25423: LD_ADDR_VAR 0 3
25427: PUSH
25428: LD_INT 4
25430: PUSH
25431: LD_INT 5
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: ST_TO_ADDR
25438: GO 26049
25440: LD_INT 22
25442: DOUBLE
25443: EQUAL
25444: IFTRUE 25448
25446: GO 25474
25448: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25449: LD_ADDR_VAR 0 3
25453: PUSH
25454: LD_INT 11
25456: PUSH
25457: LD_INT 12
25459: PUSH
25460: LD_INT 13
25462: PUSH
25463: LD_INT 14
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: ST_TO_ADDR
25472: GO 26049
25474: LD_INT 23
25476: DOUBLE
25477: EQUAL
25478: IFTRUE 25482
25480: GO 25508
25482: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25483: LD_ADDR_VAR 0 3
25487: PUSH
25488: LD_INT 11
25490: PUSH
25491: LD_INT 12
25493: PUSH
25494: LD_INT 13
25496: PUSH
25497: LD_INT 14
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: ST_TO_ADDR
25506: GO 26049
25508: LD_INT 24
25510: DOUBLE
25511: EQUAL
25512: IFTRUE 25516
25514: GO 25542
25516: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25517: LD_ADDR_VAR 0 3
25521: PUSH
25522: LD_INT 11
25524: PUSH
25525: LD_INT 12
25527: PUSH
25528: LD_INT 13
25530: PUSH
25531: LD_INT 14
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: ST_TO_ADDR
25540: GO 26049
25542: LD_INT 30
25544: DOUBLE
25545: EQUAL
25546: IFTRUE 25550
25548: GO 25576
25550: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25551: LD_ADDR_VAR 0 3
25555: PUSH
25556: LD_INT 11
25558: PUSH
25559: LD_INT 12
25561: PUSH
25562: LD_INT 13
25564: PUSH
25565: LD_INT 14
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: ST_TO_ADDR
25574: GO 26049
25576: LD_INT 25
25578: DOUBLE
25579: EQUAL
25580: IFTRUE 25584
25582: GO 25602
25584: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25585: LD_ADDR_VAR 0 3
25589: PUSH
25590: LD_INT 13
25592: PUSH
25593: LD_INT 14
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: ST_TO_ADDR
25600: GO 26049
25602: LD_INT 27
25604: DOUBLE
25605: EQUAL
25606: IFTRUE 25610
25608: GO 25628
25610: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25611: LD_ADDR_VAR 0 3
25615: PUSH
25616: LD_INT 13
25618: PUSH
25619: LD_INT 14
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: ST_TO_ADDR
25626: GO 26049
25628: LD_INT 28
25630: DOUBLE
25631: EQUAL
25632: IFTRUE 25636
25634: GO 25654
25636: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25637: LD_ADDR_VAR 0 3
25641: PUSH
25642: LD_INT 13
25644: PUSH
25645: LD_INT 14
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: ST_TO_ADDR
25652: GO 26049
25654: LD_INT 29
25656: DOUBLE
25657: EQUAL
25658: IFTRUE 25662
25660: GO 25680
25662: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25663: LD_ADDR_VAR 0 3
25667: PUSH
25668: LD_INT 13
25670: PUSH
25671: LD_INT 14
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: ST_TO_ADDR
25678: GO 26049
25680: LD_INT 31
25682: DOUBLE
25683: EQUAL
25684: IFTRUE 25688
25686: GO 25706
25688: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25689: LD_ADDR_VAR 0 3
25693: PUSH
25694: LD_INT 13
25696: PUSH
25697: LD_INT 14
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: ST_TO_ADDR
25704: GO 26049
25706: LD_INT 26
25708: DOUBLE
25709: EQUAL
25710: IFTRUE 25714
25712: GO 25732
25714: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25715: LD_ADDR_VAR 0 3
25719: PUSH
25720: LD_INT 13
25722: PUSH
25723: LD_INT 14
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: ST_TO_ADDR
25730: GO 26049
25732: LD_INT 42
25734: DOUBLE
25735: EQUAL
25736: IFTRUE 25740
25738: GO 25766
25740: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25741: LD_ADDR_VAR 0 3
25745: PUSH
25746: LD_INT 21
25748: PUSH
25749: LD_INT 22
25751: PUSH
25752: LD_INT 23
25754: PUSH
25755: LD_INT 24
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: ST_TO_ADDR
25764: GO 26049
25766: LD_INT 43
25768: DOUBLE
25769: EQUAL
25770: IFTRUE 25774
25772: GO 25800
25774: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25775: LD_ADDR_VAR 0 3
25779: PUSH
25780: LD_INT 21
25782: PUSH
25783: LD_INT 22
25785: PUSH
25786: LD_INT 23
25788: PUSH
25789: LD_INT 24
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: ST_TO_ADDR
25798: GO 26049
25800: LD_INT 44
25802: DOUBLE
25803: EQUAL
25804: IFTRUE 25808
25806: GO 25834
25808: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25809: LD_ADDR_VAR 0 3
25813: PUSH
25814: LD_INT 21
25816: PUSH
25817: LD_INT 22
25819: PUSH
25820: LD_INT 23
25822: PUSH
25823: LD_INT 24
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: ST_TO_ADDR
25832: GO 26049
25834: LD_INT 45
25836: DOUBLE
25837: EQUAL
25838: IFTRUE 25842
25840: GO 25868
25842: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25843: LD_ADDR_VAR 0 3
25847: PUSH
25848: LD_INT 21
25850: PUSH
25851: LD_INT 22
25853: PUSH
25854: LD_INT 23
25856: PUSH
25857: LD_INT 24
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: ST_TO_ADDR
25866: GO 26049
25868: LD_INT 49
25870: DOUBLE
25871: EQUAL
25872: IFTRUE 25876
25874: GO 25902
25876: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25877: LD_ADDR_VAR 0 3
25881: PUSH
25882: LD_INT 21
25884: PUSH
25885: LD_INT 22
25887: PUSH
25888: LD_INT 23
25890: PUSH
25891: LD_INT 24
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: ST_TO_ADDR
25900: GO 26049
25902: LD_INT 51
25904: DOUBLE
25905: EQUAL
25906: IFTRUE 25910
25908: GO 25936
25910: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25911: LD_ADDR_VAR 0 3
25915: PUSH
25916: LD_INT 21
25918: PUSH
25919: LD_INT 22
25921: PUSH
25922: LD_INT 23
25924: PUSH
25925: LD_INT 24
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: ST_TO_ADDR
25934: GO 26049
25936: LD_INT 52
25938: DOUBLE
25939: EQUAL
25940: IFTRUE 25944
25942: GO 25970
25944: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25945: LD_ADDR_VAR 0 3
25949: PUSH
25950: LD_INT 21
25952: PUSH
25953: LD_INT 22
25955: PUSH
25956: LD_INT 23
25958: PUSH
25959: LD_INT 24
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: ST_TO_ADDR
25968: GO 26049
25970: LD_INT 53
25972: DOUBLE
25973: EQUAL
25974: IFTRUE 25978
25976: GO 25996
25978: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25979: LD_ADDR_VAR 0 3
25983: PUSH
25984: LD_INT 23
25986: PUSH
25987: LD_INT 24
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: ST_TO_ADDR
25994: GO 26049
25996: LD_INT 46
25998: DOUBLE
25999: EQUAL
26000: IFTRUE 26004
26002: GO 26022
26004: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26005: LD_ADDR_VAR 0 3
26009: PUSH
26010: LD_INT 23
26012: PUSH
26013: LD_INT 24
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: ST_TO_ADDR
26020: GO 26049
26022: LD_INT 47
26024: DOUBLE
26025: EQUAL
26026: IFTRUE 26030
26028: GO 26048
26030: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26031: LD_ADDR_VAR 0 3
26035: PUSH
26036: LD_INT 23
26038: PUSH
26039: LD_INT 24
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: ST_TO_ADDR
26046: GO 26049
26048: POP
// result := ( chassis in result ) ;
26049: LD_ADDR_VAR 0 3
26053: PUSH
26054: LD_VAR 0 1
26058: PUSH
26059: LD_VAR 0 3
26063: IN
26064: ST_TO_ADDR
// end ;
26065: LD_VAR 0 3
26069: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26070: LD_INT 0
26072: PPUSH
26073: PPUSH
26074: PPUSH
26075: PPUSH
26076: PPUSH
26077: PPUSH
26078: PPUSH
// result := array ;
26079: LD_ADDR_VAR 0 5
26083: PUSH
26084: LD_VAR 0 1
26088: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26089: LD_VAR 0 1
26093: NOT
26094: PUSH
26095: LD_VAR 0 2
26099: NOT
26100: OR
26101: PUSH
26102: LD_VAR 0 3
26106: NOT
26107: OR
26108: PUSH
26109: LD_VAR 0 2
26113: PUSH
26114: LD_VAR 0 1
26118: GREATER
26119: OR
26120: PUSH
26121: LD_VAR 0 3
26125: PUSH
26126: LD_VAR 0 1
26130: GREATER
26131: OR
26132: IFFALSE 26136
// exit ;
26134: GO 26432
// if direction then
26136: LD_VAR 0 4
26140: IFFALSE 26204
// begin d := 1 ;
26142: LD_ADDR_VAR 0 9
26146: PUSH
26147: LD_INT 1
26149: ST_TO_ADDR
// if i_from > i_to then
26150: LD_VAR 0 2
26154: PUSH
26155: LD_VAR 0 3
26159: GREATER
26160: IFFALSE 26186
// length := ( array - i_from ) + i_to else
26162: LD_ADDR_VAR 0 11
26166: PUSH
26167: LD_VAR 0 1
26171: PUSH
26172: LD_VAR 0 2
26176: MINUS
26177: PUSH
26178: LD_VAR 0 3
26182: PLUS
26183: ST_TO_ADDR
26184: GO 26202
// length := i_to - i_from ;
26186: LD_ADDR_VAR 0 11
26190: PUSH
26191: LD_VAR 0 3
26195: PUSH
26196: LD_VAR 0 2
26200: MINUS
26201: ST_TO_ADDR
// end else
26202: GO 26265
// begin d := - 1 ;
26204: LD_ADDR_VAR 0 9
26208: PUSH
26209: LD_INT 1
26211: NEG
26212: ST_TO_ADDR
// if i_from > i_to then
26213: LD_VAR 0 2
26217: PUSH
26218: LD_VAR 0 3
26222: GREATER
26223: IFFALSE 26243
// length := i_from - i_to else
26225: LD_ADDR_VAR 0 11
26229: PUSH
26230: LD_VAR 0 2
26234: PUSH
26235: LD_VAR 0 3
26239: MINUS
26240: ST_TO_ADDR
26241: GO 26265
// length := ( array - i_to ) + i_from ;
26243: LD_ADDR_VAR 0 11
26247: PUSH
26248: LD_VAR 0 1
26252: PUSH
26253: LD_VAR 0 3
26257: MINUS
26258: PUSH
26259: LD_VAR 0 2
26263: PLUS
26264: ST_TO_ADDR
// end ; if not length then
26265: LD_VAR 0 11
26269: NOT
26270: IFFALSE 26274
// exit ;
26272: GO 26432
// tmp := array ;
26274: LD_ADDR_VAR 0 10
26278: PUSH
26279: LD_VAR 0 1
26283: ST_TO_ADDR
// for i = 1 to length do
26284: LD_ADDR_VAR 0 6
26288: PUSH
26289: DOUBLE
26290: LD_INT 1
26292: DEC
26293: ST_TO_ADDR
26294: LD_VAR 0 11
26298: PUSH
26299: FOR_TO
26300: IFFALSE 26420
// begin for j = 1 to array do
26302: LD_ADDR_VAR 0 7
26306: PUSH
26307: DOUBLE
26308: LD_INT 1
26310: DEC
26311: ST_TO_ADDR
26312: LD_VAR 0 1
26316: PUSH
26317: FOR_TO
26318: IFFALSE 26406
// begin k := j + d ;
26320: LD_ADDR_VAR 0 8
26324: PUSH
26325: LD_VAR 0 7
26329: PUSH
26330: LD_VAR 0 9
26334: PLUS
26335: ST_TO_ADDR
// if k > array then
26336: LD_VAR 0 8
26340: PUSH
26341: LD_VAR 0 1
26345: GREATER
26346: IFFALSE 26356
// k := 1 ;
26348: LD_ADDR_VAR 0 8
26352: PUSH
26353: LD_INT 1
26355: ST_TO_ADDR
// if not k then
26356: LD_VAR 0 8
26360: NOT
26361: IFFALSE 26373
// k := array ;
26363: LD_ADDR_VAR 0 8
26367: PUSH
26368: LD_VAR 0 1
26372: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26373: LD_ADDR_VAR 0 10
26377: PUSH
26378: LD_VAR 0 10
26382: PPUSH
26383: LD_VAR 0 8
26387: PPUSH
26388: LD_VAR 0 1
26392: PUSH
26393: LD_VAR 0 7
26397: ARRAY
26398: PPUSH
26399: CALL_OW 1
26403: ST_TO_ADDR
// end ;
26404: GO 26317
26406: POP
26407: POP
// array := tmp ;
26408: LD_ADDR_VAR 0 1
26412: PUSH
26413: LD_VAR 0 10
26417: ST_TO_ADDR
// end ;
26418: GO 26299
26420: POP
26421: POP
// result := array ;
26422: LD_ADDR_VAR 0 5
26426: PUSH
26427: LD_VAR 0 1
26431: ST_TO_ADDR
// end ;
26432: LD_VAR 0 5
26436: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26437: LD_INT 0
26439: PPUSH
26440: PPUSH
// result := 0 ;
26441: LD_ADDR_VAR 0 3
26445: PUSH
26446: LD_INT 0
26448: ST_TO_ADDR
// if not array or not value in array then
26449: LD_VAR 0 1
26453: NOT
26454: PUSH
26455: LD_VAR 0 2
26459: PUSH
26460: LD_VAR 0 1
26464: IN
26465: NOT
26466: OR
26467: IFFALSE 26471
// exit ;
26469: GO 26525
// for i = 1 to array do
26471: LD_ADDR_VAR 0 4
26475: PUSH
26476: DOUBLE
26477: LD_INT 1
26479: DEC
26480: ST_TO_ADDR
26481: LD_VAR 0 1
26485: PUSH
26486: FOR_TO
26487: IFFALSE 26523
// if value = array [ i ] then
26489: LD_VAR 0 2
26493: PUSH
26494: LD_VAR 0 1
26498: PUSH
26499: LD_VAR 0 4
26503: ARRAY
26504: EQUAL
26505: IFFALSE 26521
// begin result := i ;
26507: LD_ADDR_VAR 0 3
26511: PUSH
26512: LD_VAR 0 4
26516: ST_TO_ADDR
// exit ;
26517: POP
26518: POP
26519: GO 26525
// end ;
26521: GO 26486
26523: POP
26524: POP
// end ;
26525: LD_VAR 0 3
26529: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26530: LD_INT 0
26532: PPUSH
// vc_chassis := chassis ;
26533: LD_ADDR_OWVAR 37
26537: PUSH
26538: LD_VAR 0 1
26542: ST_TO_ADDR
// vc_engine := engine ;
26543: LD_ADDR_OWVAR 39
26547: PUSH
26548: LD_VAR 0 2
26552: ST_TO_ADDR
// vc_control := control ;
26553: LD_ADDR_OWVAR 38
26557: PUSH
26558: LD_VAR 0 3
26562: ST_TO_ADDR
// vc_weapon := weapon ;
26563: LD_ADDR_OWVAR 40
26567: PUSH
26568: LD_VAR 0 4
26572: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26573: LD_ADDR_OWVAR 41
26577: PUSH
26578: LD_VAR 0 5
26582: ST_TO_ADDR
// end ;
26583: LD_VAR 0 6
26587: RET
// export function WantPlant ( unit ) ; var task ; begin
26588: LD_INT 0
26590: PPUSH
26591: PPUSH
// result := false ;
26592: LD_ADDR_VAR 0 2
26596: PUSH
26597: LD_INT 0
26599: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26600: LD_ADDR_VAR 0 3
26604: PUSH
26605: LD_VAR 0 1
26609: PPUSH
26610: CALL_OW 437
26614: ST_TO_ADDR
// if task then
26615: LD_VAR 0 3
26619: IFFALSE 26647
// if task [ 1 ] [ 1 ] = p then
26621: LD_VAR 0 3
26625: PUSH
26626: LD_INT 1
26628: ARRAY
26629: PUSH
26630: LD_INT 1
26632: ARRAY
26633: PUSH
26634: LD_STRING p
26636: EQUAL
26637: IFFALSE 26647
// result := true ;
26639: LD_ADDR_VAR 0 2
26643: PUSH
26644: LD_INT 1
26646: ST_TO_ADDR
// end ;
26647: LD_VAR 0 2
26651: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26652: LD_INT 0
26654: PPUSH
26655: PPUSH
26656: PPUSH
26657: PPUSH
// if pos < 1 then
26658: LD_VAR 0 2
26662: PUSH
26663: LD_INT 1
26665: LESS
26666: IFFALSE 26670
// exit ;
26668: GO 26973
// if pos = 1 then
26670: LD_VAR 0 2
26674: PUSH
26675: LD_INT 1
26677: EQUAL
26678: IFFALSE 26711
// result := Replace ( arr , pos [ 1 ] , value ) else
26680: LD_ADDR_VAR 0 4
26684: PUSH
26685: LD_VAR 0 1
26689: PPUSH
26690: LD_VAR 0 2
26694: PUSH
26695: LD_INT 1
26697: ARRAY
26698: PPUSH
26699: LD_VAR 0 3
26703: PPUSH
26704: CALL_OW 1
26708: ST_TO_ADDR
26709: GO 26973
// begin tmp := arr ;
26711: LD_ADDR_VAR 0 6
26715: PUSH
26716: LD_VAR 0 1
26720: ST_TO_ADDR
// s_arr := [ tmp ] ;
26721: LD_ADDR_VAR 0 7
26725: PUSH
26726: LD_VAR 0 6
26730: PUSH
26731: EMPTY
26732: LIST
26733: ST_TO_ADDR
// for i = 1 to pos - 1 do
26734: LD_ADDR_VAR 0 5
26738: PUSH
26739: DOUBLE
26740: LD_INT 1
26742: DEC
26743: ST_TO_ADDR
26744: LD_VAR 0 2
26748: PUSH
26749: LD_INT 1
26751: MINUS
26752: PUSH
26753: FOR_TO
26754: IFFALSE 26799
// begin tmp := tmp [ pos [ i ] ] ;
26756: LD_ADDR_VAR 0 6
26760: PUSH
26761: LD_VAR 0 6
26765: PUSH
26766: LD_VAR 0 2
26770: PUSH
26771: LD_VAR 0 5
26775: ARRAY
26776: ARRAY
26777: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26778: LD_ADDR_VAR 0 7
26782: PUSH
26783: LD_VAR 0 7
26787: PUSH
26788: LD_VAR 0 6
26792: PUSH
26793: EMPTY
26794: LIST
26795: ADD
26796: ST_TO_ADDR
// end ;
26797: GO 26753
26799: POP
26800: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26801: LD_ADDR_VAR 0 6
26805: PUSH
26806: LD_VAR 0 6
26810: PPUSH
26811: LD_VAR 0 2
26815: PUSH
26816: LD_VAR 0 2
26820: ARRAY
26821: PPUSH
26822: LD_VAR 0 3
26826: PPUSH
26827: CALL_OW 1
26831: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26832: LD_ADDR_VAR 0 7
26836: PUSH
26837: LD_VAR 0 7
26841: PPUSH
26842: LD_VAR 0 7
26846: PPUSH
26847: LD_VAR 0 6
26851: PPUSH
26852: CALL_OW 1
26856: ST_TO_ADDR
// for i = s_arr downto 2 do
26857: LD_ADDR_VAR 0 5
26861: PUSH
26862: DOUBLE
26863: LD_VAR 0 7
26867: INC
26868: ST_TO_ADDR
26869: LD_INT 2
26871: PUSH
26872: FOR_DOWNTO
26873: IFFALSE 26957
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26875: LD_ADDR_VAR 0 6
26879: PUSH
26880: LD_VAR 0 7
26884: PUSH
26885: LD_VAR 0 5
26889: PUSH
26890: LD_INT 1
26892: MINUS
26893: ARRAY
26894: PPUSH
26895: LD_VAR 0 2
26899: PUSH
26900: LD_VAR 0 5
26904: PUSH
26905: LD_INT 1
26907: MINUS
26908: ARRAY
26909: PPUSH
26910: LD_VAR 0 7
26914: PUSH
26915: LD_VAR 0 5
26919: ARRAY
26920: PPUSH
26921: CALL_OW 1
26925: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26926: LD_ADDR_VAR 0 7
26930: PUSH
26931: LD_VAR 0 7
26935: PPUSH
26936: LD_VAR 0 5
26940: PUSH
26941: LD_INT 1
26943: MINUS
26944: PPUSH
26945: LD_VAR 0 6
26949: PPUSH
26950: CALL_OW 1
26954: ST_TO_ADDR
// end ;
26955: GO 26872
26957: POP
26958: POP
// result := s_arr [ 1 ] ;
26959: LD_ADDR_VAR 0 4
26963: PUSH
26964: LD_VAR 0 7
26968: PUSH
26969: LD_INT 1
26971: ARRAY
26972: ST_TO_ADDR
// end ; end ;
26973: LD_VAR 0 4
26977: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26978: LD_INT 0
26980: PPUSH
26981: PPUSH
// if not list then
26982: LD_VAR 0 1
26986: NOT
26987: IFFALSE 26991
// exit ;
26989: GO 27082
// i := list [ pos1 ] ;
26991: LD_ADDR_VAR 0 5
26995: PUSH
26996: LD_VAR 0 1
27000: PUSH
27001: LD_VAR 0 2
27005: ARRAY
27006: ST_TO_ADDR
// if not i then
27007: LD_VAR 0 5
27011: NOT
27012: IFFALSE 27016
// exit ;
27014: GO 27082
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27016: LD_ADDR_VAR 0 1
27020: PUSH
27021: LD_VAR 0 1
27025: PPUSH
27026: LD_VAR 0 2
27030: PPUSH
27031: LD_VAR 0 1
27035: PUSH
27036: LD_VAR 0 3
27040: ARRAY
27041: PPUSH
27042: CALL_OW 1
27046: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27047: LD_ADDR_VAR 0 1
27051: PUSH
27052: LD_VAR 0 1
27056: PPUSH
27057: LD_VAR 0 3
27061: PPUSH
27062: LD_VAR 0 5
27066: PPUSH
27067: CALL_OW 1
27071: ST_TO_ADDR
// result := list ;
27072: LD_ADDR_VAR 0 4
27076: PUSH
27077: LD_VAR 0 1
27081: ST_TO_ADDR
// end ;
27082: LD_VAR 0 4
27086: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27087: LD_INT 0
27089: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27090: LD_ADDR_VAR 0 5
27094: PUSH
27095: LD_VAR 0 1
27099: PPUSH
27100: CALL_OW 250
27104: PPUSH
27105: LD_VAR 0 1
27109: PPUSH
27110: CALL_OW 251
27114: PPUSH
27115: LD_VAR 0 2
27119: PPUSH
27120: LD_VAR 0 3
27124: PPUSH
27125: LD_VAR 0 4
27129: PPUSH
27130: CALL 27140 0 5
27134: ST_TO_ADDR
// end ;
27135: LD_VAR 0 5
27139: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27140: LD_INT 0
27142: PPUSH
27143: PPUSH
27144: PPUSH
27145: PPUSH
// if not list then
27146: LD_VAR 0 3
27150: NOT
27151: IFFALSE 27155
// exit ;
27153: GO 27543
// result := [ ] ;
27155: LD_ADDR_VAR 0 6
27159: PUSH
27160: EMPTY
27161: ST_TO_ADDR
// for i in list do
27162: LD_ADDR_VAR 0 7
27166: PUSH
27167: LD_VAR 0 3
27171: PUSH
27172: FOR_IN
27173: IFFALSE 27375
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27175: LD_ADDR_VAR 0 9
27179: PUSH
27180: LD_VAR 0 7
27184: PPUSH
27185: LD_VAR 0 1
27189: PPUSH
27190: LD_VAR 0 2
27194: PPUSH
27195: CALL_OW 297
27199: ST_TO_ADDR
// if not result then
27200: LD_VAR 0 6
27204: NOT
27205: IFFALSE 27231
// result := [ [ i , tmp ] ] else
27207: LD_ADDR_VAR 0 6
27211: PUSH
27212: LD_VAR 0 7
27216: PUSH
27217: LD_VAR 0 9
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: EMPTY
27227: LIST
27228: ST_TO_ADDR
27229: GO 27373
// begin if result [ result ] [ 2 ] < tmp then
27231: LD_VAR 0 6
27235: PUSH
27236: LD_VAR 0 6
27240: ARRAY
27241: PUSH
27242: LD_INT 2
27244: ARRAY
27245: PUSH
27246: LD_VAR 0 9
27250: LESS
27251: IFFALSE 27293
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27253: LD_ADDR_VAR 0 6
27257: PUSH
27258: LD_VAR 0 6
27262: PPUSH
27263: LD_VAR 0 6
27267: PUSH
27268: LD_INT 1
27270: PLUS
27271: PPUSH
27272: LD_VAR 0 7
27276: PUSH
27277: LD_VAR 0 9
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PPUSH
27286: CALL_OW 2
27290: ST_TO_ADDR
27291: GO 27373
// for j = 1 to result do
27293: LD_ADDR_VAR 0 8
27297: PUSH
27298: DOUBLE
27299: LD_INT 1
27301: DEC
27302: ST_TO_ADDR
27303: LD_VAR 0 6
27307: PUSH
27308: FOR_TO
27309: IFFALSE 27371
// begin if tmp < result [ j ] [ 2 ] then
27311: LD_VAR 0 9
27315: PUSH
27316: LD_VAR 0 6
27320: PUSH
27321: LD_VAR 0 8
27325: ARRAY
27326: PUSH
27327: LD_INT 2
27329: ARRAY
27330: LESS
27331: IFFALSE 27369
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27333: LD_ADDR_VAR 0 6
27337: PUSH
27338: LD_VAR 0 6
27342: PPUSH
27343: LD_VAR 0 8
27347: PPUSH
27348: LD_VAR 0 7
27352: PUSH
27353: LD_VAR 0 9
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PPUSH
27362: CALL_OW 2
27366: ST_TO_ADDR
// break ;
27367: GO 27371
// end ; end ;
27369: GO 27308
27371: POP
27372: POP
// end ; end ;
27373: GO 27172
27375: POP
27376: POP
// if result and not asc then
27377: LD_VAR 0 6
27381: PUSH
27382: LD_VAR 0 4
27386: NOT
27387: AND
27388: IFFALSE 27463
// begin tmp := result ;
27390: LD_ADDR_VAR 0 9
27394: PUSH
27395: LD_VAR 0 6
27399: ST_TO_ADDR
// for i = tmp downto 1 do
27400: LD_ADDR_VAR 0 7
27404: PUSH
27405: DOUBLE
27406: LD_VAR 0 9
27410: INC
27411: ST_TO_ADDR
27412: LD_INT 1
27414: PUSH
27415: FOR_DOWNTO
27416: IFFALSE 27461
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27418: LD_ADDR_VAR 0 6
27422: PUSH
27423: LD_VAR 0 6
27427: PPUSH
27428: LD_VAR 0 9
27432: PUSH
27433: LD_VAR 0 7
27437: MINUS
27438: PUSH
27439: LD_INT 1
27441: PLUS
27442: PPUSH
27443: LD_VAR 0 9
27447: PUSH
27448: LD_VAR 0 7
27452: ARRAY
27453: PPUSH
27454: CALL_OW 1
27458: ST_TO_ADDR
27459: GO 27415
27461: POP
27462: POP
// end ; tmp := [ ] ;
27463: LD_ADDR_VAR 0 9
27467: PUSH
27468: EMPTY
27469: ST_TO_ADDR
// if mode then
27470: LD_VAR 0 5
27474: IFFALSE 27543
// begin for i = 1 to result do
27476: LD_ADDR_VAR 0 7
27480: PUSH
27481: DOUBLE
27482: LD_INT 1
27484: DEC
27485: ST_TO_ADDR
27486: LD_VAR 0 6
27490: PUSH
27491: FOR_TO
27492: IFFALSE 27531
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27494: LD_ADDR_VAR 0 9
27498: PUSH
27499: LD_VAR 0 9
27503: PPUSH
27504: LD_VAR 0 7
27508: PPUSH
27509: LD_VAR 0 6
27513: PUSH
27514: LD_VAR 0 7
27518: ARRAY
27519: PUSH
27520: LD_INT 1
27522: ARRAY
27523: PPUSH
27524: CALL_OW 1
27528: ST_TO_ADDR
27529: GO 27491
27531: POP
27532: POP
// result := tmp ;
27533: LD_ADDR_VAR 0 6
27537: PUSH
27538: LD_VAR 0 9
27542: ST_TO_ADDR
// end ; end ;
27543: LD_VAR 0 6
27547: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27548: LD_INT 0
27550: PPUSH
27551: PPUSH
27552: PPUSH
27553: PPUSH
27554: PPUSH
27555: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27556: LD_ADDR_VAR 0 5
27560: PUSH
27561: LD_INT 0
27563: PUSH
27564: LD_INT 0
27566: PUSH
27567: LD_INT 0
27569: PUSH
27570: EMPTY
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: ST_TO_ADDR
// if not x or not y then
27578: LD_VAR 0 2
27582: NOT
27583: PUSH
27584: LD_VAR 0 3
27588: NOT
27589: OR
27590: IFFALSE 27594
// exit ;
27592: GO 29240
// if not range then
27594: LD_VAR 0 4
27598: NOT
27599: IFFALSE 27609
// range := 10 ;
27601: LD_ADDR_VAR 0 4
27605: PUSH
27606: LD_INT 10
27608: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27609: LD_ADDR_VAR 0 8
27613: PUSH
27614: LD_INT 81
27616: PUSH
27617: LD_VAR 0 1
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 92
27628: PUSH
27629: LD_VAR 0 2
27633: PUSH
27634: LD_VAR 0 3
27638: PUSH
27639: LD_VAR 0 4
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 3
27652: PUSH
27653: LD_INT 21
27655: PUSH
27656: LD_INT 3
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: LIST
27671: PPUSH
27672: CALL_OW 69
27676: ST_TO_ADDR
// if not tmp then
27677: LD_VAR 0 8
27681: NOT
27682: IFFALSE 27686
// exit ;
27684: GO 29240
// for i in tmp do
27686: LD_ADDR_VAR 0 6
27690: PUSH
27691: LD_VAR 0 8
27695: PUSH
27696: FOR_IN
27697: IFFALSE 29215
// begin points := [ 0 , 0 , 0 ] ;
27699: LD_ADDR_VAR 0 9
27703: PUSH
27704: LD_INT 0
27706: PUSH
27707: LD_INT 0
27709: PUSH
27710: LD_INT 0
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: LIST
27717: ST_TO_ADDR
// bpoints := 1 ;
27718: LD_ADDR_VAR 0 10
27722: PUSH
27723: LD_INT 1
27725: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27726: LD_VAR 0 6
27730: PPUSH
27731: CALL_OW 247
27735: PUSH
27736: LD_INT 1
27738: DOUBLE
27739: EQUAL
27740: IFTRUE 27744
27742: GO 28322
27744: POP
// begin if GetClass ( i ) = 1 then
27745: LD_VAR 0 6
27749: PPUSH
27750: CALL_OW 257
27754: PUSH
27755: LD_INT 1
27757: EQUAL
27758: IFFALSE 27779
// points := [ 10 , 5 , 3 ] ;
27760: LD_ADDR_VAR 0 9
27764: PUSH
27765: LD_INT 10
27767: PUSH
27768: LD_INT 5
27770: PUSH
27771: LD_INT 3
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: LIST
27778: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27779: LD_VAR 0 6
27783: PPUSH
27784: CALL_OW 257
27788: PUSH
27789: LD_INT 2
27791: PUSH
27792: LD_INT 3
27794: PUSH
27795: LD_INT 4
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: LIST
27802: IN
27803: IFFALSE 27824
// points := [ 3 , 2 , 1 ] ;
27805: LD_ADDR_VAR 0 9
27809: PUSH
27810: LD_INT 3
27812: PUSH
27813: LD_INT 2
27815: PUSH
27816: LD_INT 1
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: LIST
27823: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27824: LD_VAR 0 6
27828: PPUSH
27829: CALL_OW 257
27833: PUSH
27834: LD_INT 5
27836: EQUAL
27837: IFFALSE 27858
// points := [ 130 , 5 , 2 ] ;
27839: LD_ADDR_VAR 0 9
27843: PUSH
27844: LD_INT 130
27846: PUSH
27847: LD_INT 5
27849: PUSH
27850: LD_INT 2
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: LIST
27857: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27858: LD_VAR 0 6
27862: PPUSH
27863: CALL_OW 257
27867: PUSH
27868: LD_INT 8
27870: EQUAL
27871: IFFALSE 27892
// points := [ 35 , 35 , 30 ] ;
27873: LD_ADDR_VAR 0 9
27877: PUSH
27878: LD_INT 35
27880: PUSH
27881: LD_INT 35
27883: PUSH
27884: LD_INT 30
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: LIST
27891: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27892: LD_VAR 0 6
27896: PPUSH
27897: CALL_OW 257
27901: PUSH
27902: LD_INT 9
27904: EQUAL
27905: IFFALSE 27926
// points := [ 20 , 55 , 40 ] ;
27907: LD_ADDR_VAR 0 9
27911: PUSH
27912: LD_INT 20
27914: PUSH
27915: LD_INT 55
27917: PUSH
27918: LD_INT 40
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: LIST
27925: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27926: LD_VAR 0 6
27930: PPUSH
27931: CALL_OW 257
27935: PUSH
27936: LD_INT 12
27938: PUSH
27939: LD_INT 16
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: IN
27946: IFFALSE 27967
// points := [ 5 , 3 , 2 ] ;
27948: LD_ADDR_VAR 0 9
27952: PUSH
27953: LD_INT 5
27955: PUSH
27956: LD_INT 3
27958: PUSH
27959: LD_INT 2
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: LIST
27966: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27967: LD_VAR 0 6
27971: PPUSH
27972: CALL_OW 257
27976: PUSH
27977: LD_INT 17
27979: EQUAL
27980: IFFALSE 28001
// points := [ 100 , 50 , 75 ] ;
27982: LD_ADDR_VAR 0 9
27986: PUSH
27987: LD_INT 100
27989: PUSH
27990: LD_INT 50
27992: PUSH
27993: LD_INT 75
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: LIST
28000: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28001: LD_VAR 0 6
28005: PPUSH
28006: CALL_OW 257
28010: PUSH
28011: LD_INT 15
28013: EQUAL
28014: IFFALSE 28035
// points := [ 10 , 5 , 3 ] ;
28016: LD_ADDR_VAR 0 9
28020: PUSH
28021: LD_INT 10
28023: PUSH
28024: LD_INT 5
28026: PUSH
28027: LD_INT 3
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: LIST
28034: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28035: LD_VAR 0 6
28039: PPUSH
28040: CALL_OW 257
28044: PUSH
28045: LD_INT 14
28047: EQUAL
28048: IFFALSE 28069
// points := [ 10 , 0 , 0 ] ;
28050: LD_ADDR_VAR 0 9
28054: PUSH
28055: LD_INT 10
28057: PUSH
28058: LD_INT 0
28060: PUSH
28061: LD_INT 0
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: LIST
28068: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28069: LD_VAR 0 6
28073: PPUSH
28074: CALL_OW 257
28078: PUSH
28079: LD_INT 11
28081: EQUAL
28082: IFFALSE 28103
// points := [ 30 , 10 , 5 ] ;
28084: LD_ADDR_VAR 0 9
28088: PUSH
28089: LD_INT 30
28091: PUSH
28092: LD_INT 10
28094: PUSH
28095: LD_INT 5
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: LIST
28102: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28103: LD_VAR 0 1
28107: PPUSH
28108: LD_INT 5
28110: PPUSH
28111: CALL_OW 321
28115: PUSH
28116: LD_INT 2
28118: EQUAL
28119: IFFALSE 28136
// bpoints := bpoints * 1.8 ;
28121: LD_ADDR_VAR 0 10
28125: PUSH
28126: LD_VAR 0 10
28130: PUSH
28131: LD_REAL  1.80000000000000E+0000
28134: MUL
28135: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28136: LD_VAR 0 6
28140: PPUSH
28141: CALL_OW 257
28145: PUSH
28146: LD_INT 1
28148: PUSH
28149: LD_INT 2
28151: PUSH
28152: LD_INT 3
28154: PUSH
28155: LD_INT 4
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: IN
28164: PUSH
28165: LD_VAR 0 1
28169: PPUSH
28170: LD_INT 51
28172: PPUSH
28173: CALL_OW 321
28177: PUSH
28178: LD_INT 2
28180: EQUAL
28181: AND
28182: IFFALSE 28199
// bpoints := bpoints * 1.2 ;
28184: LD_ADDR_VAR 0 10
28188: PUSH
28189: LD_VAR 0 10
28193: PUSH
28194: LD_REAL  1.20000000000000E+0000
28197: MUL
28198: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28199: LD_VAR 0 6
28203: PPUSH
28204: CALL_OW 257
28208: PUSH
28209: LD_INT 5
28211: PUSH
28212: LD_INT 7
28214: PUSH
28215: LD_INT 9
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: LIST
28222: IN
28223: PUSH
28224: LD_VAR 0 1
28228: PPUSH
28229: LD_INT 52
28231: PPUSH
28232: CALL_OW 321
28236: PUSH
28237: LD_INT 2
28239: EQUAL
28240: AND
28241: IFFALSE 28258
// bpoints := bpoints * 1.5 ;
28243: LD_ADDR_VAR 0 10
28247: PUSH
28248: LD_VAR 0 10
28252: PUSH
28253: LD_REAL  1.50000000000000E+0000
28256: MUL
28257: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28258: LD_VAR 0 1
28262: PPUSH
28263: LD_INT 66
28265: PPUSH
28266: CALL_OW 321
28270: PUSH
28271: LD_INT 2
28273: EQUAL
28274: IFFALSE 28291
// bpoints := bpoints * 1.1 ;
28276: LD_ADDR_VAR 0 10
28280: PUSH
28281: LD_VAR 0 10
28285: PUSH
28286: LD_REAL  1.10000000000000E+0000
28289: MUL
28290: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28291: LD_ADDR_VAR 0 10
28295: PUSH
28296: LD_VAR 0 10
28300: PUSH
28301: LD_VAR 0 6
28305: PPUSH
28306: LD_INT 1
28308: PPUSH
28309: CALL_OW 259
28313: PUSH
28314: LD_REAL  1.15000000000000E+0000
28317: MUL
28318: MUL
28319: ST_TO_ADDR
// end ; unit_vehicle :
28320: GO 29144
28322: LD_INT 2
28324: DOUBLE
28325: EQUAL
28326: IFTRUE 28330
28328: GO 29132
28330: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28331: LD_VAR 0 6
28335: PPUSH
28336: CALL_OW 264
28340: PUSH
28341: LD_INT 2
28343: PUSH
28344: LD_INT 42
28346: PUSH
28347: LD_INT 24
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: LIST
28354: IN
28355: IFFALSE 28376
// points := [ 25 , 5 , 3 ] ;
28357: LD_ADDR_VAR 0 9
28361: PUSH
28362: LD_INT 25
28364: PUSH
28365: LD_INT 5
28367: PUSH
28368: LD_INT 3
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: LIST
28375: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28376: LD_VAR 0 6
28380: PPUSH
28381: CALL_OW 264
28385: PUSH
28386: LD_INT 4
28388: PUSH
28389: LD_INT 43
28391: PUSH
28392: LD_INT 25
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: LIST
28399: IN
28400: IFFALSE 28421
// points := [ 40 , 15 , 5 ] ;
28402: LD_ADDR_VAR 0 9
28406: PUSH
28407: LD_INT 40
28409: PUSH
28410: LD_INT 15
28412: PUSH
28413: LD_INT 5
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: LIST
28420: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28421: LD_VAR 0 6
28425: PPUSH
28426: CALL_OW 264
28430: PUSH
28431: LD_INT 3
28433: PUSH
28434: LD_INT 23
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: IN
28441: IFFALSE 28462
// points := [ 7 , 25 , 8 ] ;
28443: LD_ADDR_VAR 0 9
28447: PUSH
28448: LD_INT 7
28450: PUSH
28451: LD_INT 25
28453: PUSH
28454: LD_INT 8
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: LIST
28461: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28462: LD_VAR 0 6
28466: PPUSH
28467: CALL_OW 264
28471: PUSH
28472: LD_INT 5
28474: PUSH
28475: LD_INT 27
28477: PUSH
28478: LD_INT 44
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: LIST
28485: IN
28486: IFFALSE 28507
// points := [ 14 , 50 , 16 ] ;
28488: LD_ADDR_VAR 0 9
28492: PUSH
28493: LD_INT 14
28495: PUSH
28496: LD_INT 50
28498: PUSH
28499: LD_INT 16
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: LIST
28506: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28507: LD_VAR 0 6
28511: PPUSH
28512: CALL_OW 264
28516: PUSH
28517: LD_INT 6
28519: PUSH
28520: LD_INT 46
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: IN
28527: IFFALSE 28548
// points := [ 32 , 120 , 70 ] ;
28529: LD_ADDR_VAR 0 9
28533: PUSH
28534: LD_INT 32
28536: PUSH
28537: LD_INT 120
28539: PUSH
28540: LD_INT 70
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: LIST
28547: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
28548: LD_VAR 0 6
28552: PPUSH
28553: CALL_OW 264
28557: PUSH
28558: LD_INT 7
28560: PUSH
28561: LD_INT 28
28563: PUSH
28564: LD_INT 45
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: LIST
28571: IN
28572: IFFALSE 28593
// points := [ 35 , 20 , 45 ] ;
28574: LD_ADDR_VAR 0 9
28578: PUSH
28579: LD_INT 35
28581: PUSH
28582: LD_INT 20
28584: PUSH
28585: LD_INT 45
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: LIST
28592: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28593: LD_VAR 0 6
28597: PPUSH
28598: CALL_OW 264
28602: PUSH
28603: LD_INT 47
28605: PUSH
28606: EMPTY
28607: LIST
28608: IN
28609: IFFALSE 28630
// points := [ 67 , 45 , 75 ] ;
28611: LD_ADDR_VAR 0 9
28615: PUSH
28616: LD_INT 67
28618: PUSH
28619: LD_INT 45
28621: PUSH
28622: LD_INT 75
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: LIST
28629: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28630: LD_VAR 0 6
28634: PPUSH
28635: CALL_OW 264
28639: PUSH
28640: LD_INT 26
28642: PUSH
28643: EMPTY
28644: LIST
28645: IN
28646: IFFALSE 28667
// points := [ 120 , 30 , 80 ] ;
28648: LD_ADDR_VAR 0 9
28652: PUSH
28653: LD_INT 120
28655: PUSH
28656: LD_INT 30
28658: PUSH
28659: LD_INT 80
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: LIST
28666: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28667: LD_VAR 0 6
28671: PPUSH
28672: CALL_OW 264
28676: PUSH
28677: LD_INT 22
28679: PUSH
28680: EMPTY
28681: LIST
28682: IN
28683: IFFALSE 28704
// points := [ 40 , 1 , 1 ] ;
28685: LD_ADDR_VAR 0 9
28689: PUSH
28690: LD_INT 40
28692: PUSH
28693: LD_INT 1
28695: PUSH
28696: LD_INT 1
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: LIST
28703: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28704: LD_VAR 0 6
28708: PPUSH
28709: CALL_OW 264
28713: PUSH
28714: LD_INT 29
28716: PUSH
28717: EMPTY
28718: LIST
28719: IN
28720: IFFALSE 28741
// points := [ 70 , 200 , 400 ] ;
28722: LD_ADDR_VAR 0 9
28726: PUSH
28727: LD_INT 70
28729: PUSH
28730: LD_INT 200
28732: PUSH
28733: LD_INT 400
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: LIST
28740: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28741: LD_VAR 0 6
28745: PPUSH
28746: CALL_OW 264
28750: PUSH
28751: LD_INT 14
28753: PUSH
28754: LD_INT 53
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: IN
28761: IFFALSE 28782
// points := [ 40 , 10 , 20 ] ;
28763: LD_ADDR_VAR 0 9
28767: PUSH
28768: LD_INT 40
28770: PUSH
28771: LD_INT 10
28773: PUSH
28774: LD_INT 20
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: LIST
28781: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28782: LD_VAR 0 6
28786: PPUSH
28787: CALL_OW 264
28791: PUSH
28792: LD_INT 9
28794: PUSH
28795: EMPTY
28796: LIST
28797: IN
28798: IFFALSE 28819
// points := [ 5 , 70 , 20 ] ;
28800: LD_ADDR_VAR 0 9
28804: PUSH
28805: LD_INT 5
28807: PUSH
28808: LD_INT 70
28810: PUSH
28811: LD_INT 20
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: LIST
28818: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28819: LD_VAR 0 6
28823: PPUSH
28824: CALL_OW 264
28828: PUSH
28829: LD_INT 10
28831: PUSH
28832: EMPTY
28833: LIST
28834: IN
28835: IFFALSE 28856
// points := [ 35 , 110 , 70 ] ;
28837: LD_ADDR_VAR 0 9
28841: PUSH
28842: LD_INT 35
28844: PUSH
28845: LD_INT 110
28847: PUSH
28848: LD_INT 70
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: LIST
28855: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28856: LD_VAR 0 6
28860: PPUSH
28861: CALL_OW 265
28865: PUSH
28866: LD_INT 25
28868: EQUAL
28869: IFFALSE 28890
// points := [ 80 , 65 , 100 ] ;
28871: LD_ADDR_VAR 0 9
28875: PUSH
28876: LD_INT 80
28878: PUSH
28879: LD_INT 65
28881: PUSH
28882: LD_INT 100
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: LIST
28889: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28890: LD_VAR 0 6
28894: PPUSH
28895: CALL_OW 263
28899: PUSH
28900: LD_INT 1
28902: EQUAL
28903: IFFALSE 28938
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28905: LD_ADDR_VAR 0 10
28909: PUSH
28910: LD_VAR 0 10
28914: PUSH
28915: LD_VAR 0 6
28919: PPUSH
28920: CALL_OW 311
28924: PPUSH
28925: LD_INT 3
28927: PPUSH
28928: CALL_OW 259
28932: PUSH
28933: LD_INT 4
28935: MUL
28936: MUL
28937: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28938: LD_VAR 0 6
28942: PPUSH
28943: CALL_OW 263
28947: PUSH
28948: LD_INT 2
28950: EQUAL
28951: IFFALSE 29002
// begin j := IsControledBy ( i ) ;
28953: LD_ADDR_VAR 0 7
28957: PUSH
28958: LD_VAR 0 6
28962: PPUSH
28963: CALL_OW 312
28967: ST_TO_ADDR
// if j then
28968: LD_VAR 0 7
28972: IFFALSE 29002
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28974: LD_ADDR_VAR 0 10
28978: PUSH
28979: LD_VAR 0 10
28983: PUSH
28984: LD_VAR 0 7
28988: PPUSH
28989: LD_INT 3
28991: PPUSH
28992: CALL_OW 259
28996: PUSH
28997: LD_INT 3
28999: MUL
29000: MUL
29001: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29002: LD_VAR 0 6
29006: PPUSH
29007: CALL_OW 264
29011: PUSH
29012: LD_INT 5
29014: PUSH
29015: LD_INT 6
29017: PUSH
29018: LD_INT 46
29020: PUSH
29021: LD_INT 44
29023: PUSH
29024: LD_INT 47
29026: PUSH
29027: LD_INT 45
29029: PUSH
29030: LD_INT 28
29032: PUSH
29033: LD_INT 7
29035: PUSH
29036: LD_INT 27
29038: PUSH
29039: LD_INT 29
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: IN
29054: PUSH
29055: LD_VAR 0 1
29059: PPUSH
29060: LD_INT 52
29062: PPUSH
29063: CALL_OW 321
29067: PUSH
29068: LD_INT 2
29070: EQUAL
29071: AND
29072: IFFALSE 29089
// bpoints := bpoints * 1.2 ;
29074: LD_ADDR_VAR 0 10
29078: PUSH
29079: LD_VAR 0 10
29083: PUSH
29084: LD_REAL  1.20000000000000E+0000
29087: MUL
29088: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29089: LD_VAR 0 6
29093: PPUSH
29094: CALL_OW 264
29098: PUSH
29099: LD_INT 6
29101: PUSH
29102: LD_INT 46
29104: PUSH
29105: LD_INT 47
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: LIST
29112: IN
29113: IFFALSE 29130
// bpoints := bpoints * 1.2 ;
29115: LD_ADDR_VAR 0 10
29119: PUSH
29120: LD_VAR 0 10
29124: PUSH
29125: LD_REAL  1.20000000000000E+0000
29128: MUL
29129: ST_TO_ADDR
// end ; unit_building :
29130: GO 29144
29132: LD_INT 3
29134: DOUBLE
29135: EQUAL
29136: IFTRUE 29140
29138: GO 29143
29140: POP
// ; end ;
29141: GO 29144
29143: POP
// for j = 1 to 3 do
29144: LD_ADDR_VAR 0 7
29148: PUSH
29149: DOUBLE
29150: LD_INT 1
29152: DEC
29153: ST_TO_ADDR
29154: LD_INT 3
29156: PUSH
29157: FOR_TO
29158: IFFALSE 29211
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29160: LD_ADDR_VAR 0 5
29164: PUSH
29165: LD_VAR 0 5
29169: PPUSH
29170: LD_VAR 0 7
29174: PPUSH
29175: LD_VAR 0 5
29179: PUSH
29180: LD_VAR 0 7
29184: ARRAY
29185: PUSH
29186: LD_VAR 0 9
29190: PUSH
29191: LD_VAR 0 7
29195: ARRAY
29196: PUSH
29197: LD_VAR 0 10
29201: MUL
29202: PLUS
29203: PPUSH
29204: CALL_OW 1
29208: ST_TO_ADDR
29209: GO 29157
29211: POP
29212: POP
// end ;
29213: GO 27696
29215: POP
29216: POP
// result := Replace ( result , 4 , tmp ) ;
29217: LD_ADDR_VAR 0 5
29221: PUSH
29222: LD_VAR 0 5
29226: PPUSH
29227: LD_INT 4
29229: PPUSH
29230: LD_VAR 0 8
29234: PPUSH
29235: CALL_OW 1
29239: ST_TO_ADDR
// end ;
29240: LD_VAR 0 5
29244: RET
// export function DangerAtRange ( unit , range ) ; begin
29245: LD_INT 0
29247: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29248: LD_ADDR_VAR 0 3
29252: PUSH
29253: LD_VAR 0 1
29257: PPUSH
29258: CALL_OW 255
29262: PPUSH
29263: LD_VAR 0 1
29267: PPUSH
29268: CALL_OW 250
29272: PPUSH
29273: LD_VAR 0 1
29277: PPUSH
29278: CALL_OW 251
29282: PPUSH
29283: LD_VAR 0 2
29287: PPUSH
29288: CALL 27548 0 4
29292: ST_TO_ADDR
// end ;
29293: LD_VAR 0 3
29297: RET
// export function DangerInArea ( side , area ) ; begin
29298: LD_INT 0
29300: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29301: LD_ADDR_VAR 0 3
29305: PUSH
29306: LD_VAR 0 2
29310: PPUSH
29311: LD_INT 81
29313: PUSH
29314: LD_VAR 0 1
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PPUSH
29323: CALL_OW 70
29327: ST_TO_ADDR
// end ;
29328: LD_VAR 0 3
29332: RET
// export function IsExtension ( b ) ; begin
29333: LD_INT 0
29335: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29336: LD_ADDR_VAR 0 2
29340: PUSH
29341: LD_VAR 0 1
29345: PUSH
29346: LD_INT 23
29348: PUSH
29349: LD_INT 20
29351: PUSH
29352: LD_INT 22
29354: PUSH
29355: LD_INT 17
29357: PUSH
29358: LD_INT 24
29360: PUSH
29361: LD_INT 21
29363: PUSH
29364: LD_INT 19
29366: PUSH
29367: LD_INT 16
29369: PUSH
29370: LD_INT 25
29372: PUSH
29373: LD_INT 18
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: IN
29388: ST_TO_ADDR
// end ;
29389: LD_VAR 0 2
29393: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
29394: LD_INT 0
29396: PPUSH
29397: PPUSH
29398: PPUSH
// result := [ ] ;
29399: LD_ADDR_VAR 0 3
29403: PUSH
29404: EMPTY
29405: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29406: LD_ADDR_VAR 0 4
29410: PUSH
29411: LD_VAR 0 2
29415: PPUSH
29416: LD_INT 21
29418: PUSH
29419: LD_INT 3
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PPUSH
29426: CALL_OW 70
29430: ST_TO_ADDR
// if not tmp then
29431: LD_VAR 0 4
29435: NOT
29436: IFFALSE 29440
// exit ;
29438: GO 29498
// for i in tmp do
29440: LD_ADDR_VAR 0 5
29444: PUSH
29445: LD_VAR 0 4
29449: PUSH
29450: FOR_IN
29451: IFFALSE 29486
// if GetBase ( i ) <> base then
29453: LD_VAR 0 5
29457: PPUSH
29458: CALL_OW 274
29462: PUSH
29463: LD_VAR 0 1
29467: NONEQUAL
29468: IFFALSE 29484
// ComLinkToBase ( base , i ) ;
29470: LD_VAR 0 1
29474: PPUSH
29475: LD_VAR 0 5
29479: PPUSH
29480: CALL_OW 169
29484: GO 29450
29486: POP
29487: POP
// result := tmp ;
29488: LD_ADDR_VAR 0 3
29492: PUSH
29493: LD_VAR 0 4
29497: ST_TO_ADDR
// end ;
29498: LD_VAR 0 3
29502: RET
// export function ComComplete ( unit , b ) ; var i ; begin
29503: LD_INT 0
29505: PPUSH
29506: PPUSH
// if BuildingStatus ( b ) = bs_build then
29507: LD_VAR 0 2
29511: PPUSH
29512: CALL_OW 461
29516: PUSH
29517: LD_INT 1
29519: EQUAL
29520: IFFALSE 29580
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29522: LD_VAR 0 1
29526: PPUSH
29527: LD_STRING h
29529: PUSH
29530: LD_VAR 0 2
29534: PPUSH
29535: CALL_OW 250
29539: PUSH
29540: LD_VAR 0 2
29544: PPUSH
29545: CALL_OW 251
29549: PUSH
29550: LD_VAR 0 2
29554: PUSH
29555: LD_INT 0
29557: PUSH
29558: LD_INT 0
29560: PUSH
29561: LD_INT 0
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: PUSH
29573: EMPTY
29574: LIST
29575: PPUSH
29576: CALL_OW 446
// end ;
29580: LD_VAR 0 3
29584: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29585: LD_INT 0
29587: PPUSH
29588: PPUSH
29589: PPUSH
29590: PPUSH
29591: PPUSH
29592: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
29593: LD_VAR 0 1
29597: NOT
29598: PUSH
29599: LD_VAR 0 1
29603: PPUSH
29604: CALL_OW 263
29608: PUSH
29609: LD_INT 2
29611: EQUAL
29612: NOT
29613: OR
29614: IFFALSE 29618
// exit ;
29616: GO 29934
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29618: LD_ADDR_VAR 0 6
29622: PUSH
29623: LD_INT 22
29625: PUSH
29626: LD_VAR 0 1
29630: PPUSH
29631: CALL_OW 255
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 2
29642: PUSH
29643: LD_INT 30
29645: PUSH
29646: LD_INT 36
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: LD_INT 34
29655: PUSH
29656: LD_INT 31
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: LIST
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PPUSH
29672: CALL_OW 69
29676: ST_TO_ADDR
// if not tmp then
29677: LD_VAR 0 6
29681: NOT
29682: IFFALSE 29686
// exit ;
29684: GO 29934
// result := [ ] ;
29686: LD_ADDR_VAR 0 2
29690: PUSH
29691: EMPTY
29692: ST_TO_ADDR
// for i in tmp do
29693: LD_ADDR_VAR 0 3
29697: PUSH
29698: LD_VAR 0 6
29702: PUSH
29703: FOR_IN
29704: IFFALSE 29775
// begin t := UnitsInside ( i ) ;
29706: LD_ADDR_VAR 0 4
29710: PUSH
29711: LD_VAR 0 3
29715: PPUSH
29716: CALL_OW 313
29720: ST_TO_ADDR
// if t then
29721: LD_VAR 0 4
29725: IFFALSE 29773
// for j in t do
29727: LD_ADDR_VAR 0 7
29731: PUSH
29732: LD_VAR 0 4
29736: PUSH
29737: FOR_IN
29738: IFFALSE 29771
// result := Insert ( result , result + 1 , j ) ;
29740: LD_ADDR_VAR 0 2
29744: PUSH
29745: LD_VAR 0 2
29749: PPUSH
29750: LD_VAR 0 2
29754: PUSH
29755: LD_INT 1
29757: PLUS
29758: PPUSH
29759: LD_VAR 0 7
29763: PPUSH
29764: CALL_OW 2
29768: ST_TO_ADDR
29769: GO 29737
29771: POP
29772: POP
// end ;
29773: GO 29703
29775: POP
29776: POP
// if not result then
29777: LD_VAR 0 2
29781: NOT
29782: IFFALSE 29786
// exit ;
29784: GO 29934
// mech := result [ 1 ] ;
29786: LD_ADDR_VAR 0 5
29790: PUSH
29791: LD_VAR 0 2
29795: PUSH
29796: LD_INT 1
29798: ARRAY
29799: ST_TO_ADDR
// if result > 1 then
29800: LD_VAR 0 2
29804: PUSH
29805: LD_INT 1
29807: GREATER
29808: IFFALSE 29920
// for i = 2 to result do
29810: LD_ADDR_VAR 0 3
29814: PUSH
29815: DOUBLE
29816: LD_INT 2
29818: DEC
29819: ST_TO_ADDR
29820: LD_VAR 0 2
29824: PUSH
29825: FOR_TO
29826: IFFALSE 29918
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29828: LD_ADDR_VAR 0 4
29832: PUSH
29833: LD_VAR 0 2
29837: PUSH
29838: LD_VAR 0 3
29842: ARRAY
29843: PPUSH
29844: LD_INT 3
29846: PPUSH
29847: CALL_OW 259
29851: PUSH
29852: LD_VAR 0 2
29856: PUSH
29857: LD_VAR 0 3
29861: ARRAY
29862: PPUSH
29863: CALL_OW 432
29867: MINUS
29868: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29869: LD_VAR 0 4
29873: PUSH
29874: LD_VAR 0 5
29878: PPUSH
29879: LD_INT 3
29881: PPUSH
29882: CALL_OW 259
29886: PUSH
29887: LD_VAR 0 5
29891: PPUSH
29892: CALL_OW 432
29896: MINUS
29897: GREATEREQUAL
29898: IFFALSE 29916
// mech := result [ i ] ;
29900: LD_ADDR_VAR 0 5
29904: PUSH
29905: LD_VAR 0 2
29909: PUSH
29910: LD_VAR 0 3
29914: ARRAY
29915: ST_TO_ADDR
// end ;
29916: GO 29825
29918: POP
29919: POP
// ComLinkTo ( vehicle , mech ) ;
29920: LD_VAR 0 1
29924: PPUSH
29925: LD_VAR 0 5
29929: PPUSH
29930: CALL_OW 135
// end ;
29934: LD_VAR 0 2
29938: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29939: LD_INT 0
29941: PPUSH
29942: PPUSH
29943: PPUSH
29944: PPUSH
29945: PPUSH
29946: PPUSH
29947: PPUSH
29948: PPUSH
29949: PPUSH
29950: PPUSH
29951: PPUSH
29952: PPUSH
29953: PPUSH
// result := [ ] ;
29954: LD_ADDR_VAR 0 7
29958: PUSH
29959: EMPTY
29960: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29961: LD_VAR 0 1
29965: PPUSH
29966: CALL_OW 266
29970: PUSH
29971: LD_INT 0
29973: PUSH
29974: LD_INT 1
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: IN
29981: NOT
29982: IFFALSE 29986
// exit ;
29984: GO 31617
// if name then
29986: LD_VAR 0 3
29990: IFFALSE 30006
// SetBName ( base_dep , name ) ;
29992: LD_VAR 0 1
29996: PPUSH
29997: LD_VAR 0 3
30001: PPUSH
30002: CALL_OW 500
// base := GetBase ( base_dep ) ;
30006: LD_ADDR_VAR 0 15
30010: PUSH
30011: LD_VAR 0 1
30015: PPUSH
30016: CALL_OW 274
30020: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30021: LD_ADDR_VAR 0 16
30025: PUSH
30026: LD_VAR 0 1
30030: PPUSH
30031: CALL_OW 255
30035: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30036: LD_ADDR_VAR 0 17
30040: PUSH
30041: LD_VAR 0 1
30045: PPUSH
30046: CALL_OW 248
30050: ST_TO_ADDR
// if sources then
30051: LD_VAR 0 5
30055: IFFALSE 30102
// for i = 1 to 3 do
30057: LD_ADDR_VAR 0 8
30061: PUSH
30062: DOUBLE
30063: LD_INT 1
30065: DEC
30066: ST_TO_ADDR
30067: LD_INT 3
30069: PUSH
30070: FOR_TO
30071: IFFALSE 30100
// AddResourceType ( base , i , sources [ i ] ) ;
30073: LD_VAR 0 15
30077: PPUSH
30078: LD_VAR 0 8
30082: PPUSH
30083: LD_VAR 0 5
30087: PUSH
30088: LD_VAR 0 8
30092: ARRAY
30093: PPUSH
30094: CALL_OW 276
30098: GO 30070
30100: POP
30101: POP
// buildings := GetBaseBuildings ( base , area ) ;
30102: LD_ADDR_VAR 0 18
30106: PUSH
30107: LD_VAR 0 15
30111: PPUSH
30112: LD_VAR 0 2
30116: PPUSH
30117: CALL 29394 0 2
30121: ST_TO_ADDR
// InitHc ;
30122: CALL_OW 19
// InitUc ;
30126: CALL_OW 18
// uc_side := side ;
30130: LD_ADDR_OWVAR 20
30134: PUSH
30135: LD_VAR 0 16
30139: ST_TO_ADDR
// uc_nation := nation ;
30140: LD_ADDR_OWVAR 21
30144: PUSH
30145: LD_VAR 0 17
30149: ST_TO_ADDR
// if buildings then
30150: LD_VAR 0 18
30154: IFFALSE 31476
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30156: LD_ADDR_VAR 0 19
30160: PUSH
30161: LD_VAR 0 18
30165: PPUSH
30166: LD_INT 2
30168: PUSH
30169: LD_INT 30
30171: PUSH
30172: LD_INT 29
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 30
30181: PUSH
30182: LD_INT 30
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: LIST
30193: PPUSH
30194: CALL_OW 72
30198: ST_TO_ADDR
// if tmp then
30199: LD_VAR 0 19
30203: IFFALSE 30251
// for i in tmp do
30205: LD_ADDR_VAR 0 8
30209: PUSH
30210: LD_VAR 0 19
30214: PUSH
30215: FOR_IN
30216: IFFALSE 30249
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30218: LD_VAR 0 8
30222: PPUSH
30223: CALL_OW 250
30227: PPUSH
30228: LD_VAR 0 8
30232: PPUSH
30233: CALL_OW 251
30237: PPUSH
30238: LD_VAR 0 16
30242: PPUSH
30243: CALL_OW 441
30247: GO 30215
30249: POP
30250: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30251: LD_VAR 0 18
30255: PPUSH
30256: LD_INT 2
30258: PUSH
30259: LD_INT 30
30261: PUSH
30262: LD_INT 32
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 30
30271: PUSH
30272: LD_INT 33
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: LIST
30283: PPUSH
30284: CALL_OW 72
30288: IFFALSE 30376
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30290: LD_ADDR_VAR 0 8
30294: PUSH
30295: LD_VAR 0 18
30299: PPUSH
30300: LD_INT 2
30302: PUSH
30303: LD_INT 30
30305: PUSH
30306: LD_INT 32
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 30
30315: PUSH
30316: LD_INT 33
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: LIST
30327: PPUSH
30328: CALL_OW 72
30332: PUSH
30333: FOR_IN
30334: IFFALSE 30374
// begin if not GetBWeapon ( i ) then
30336: LD_VAR 0 8
30340: PPUSH
30341: CALL_OW 269
30345: NOT
30346: IFFALSE 30372
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30348: LD_VAR 0 8
30352: PPUSH
30353: LD_VAR 0 8
30357: PPUSH
30358: LD_VAR 0 2
30362: PPUSH
30363: CALL 31622 0 2
30367: PPUSH
30368: CALL_OW 431
// end ;
30372: GO 30333
30374: POP
30375: POP
// end ; for i = 1 to personel do
30376: LD_ADDR_VAR 0 8
30380: PUSH
30381: DOUBLE
30382: LD_INT 1
30384: DEC
30385: ST_TO_ADDR
30386: LD_VAR 0 6
30390: PUSH
30391: FOR_TO
30392: IFFALSE 31456
// begin if i > 4 then
30394: LD_VAR 0 8
30398: PUSH
30399: LD_INT 4
30401: GREATER
30402: IFFALSE 30406
// break ;
30404: GO 31456
// case i of 1 :
30406: LD_VAR 0 8
30410: PUSH
30411: LD_INT 1
30413: DOUBLE
30414: EQUAL
30415: IFTRUE 30419
30417: GO 30499
30419: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30420: LD_ADDR_VAR 0 12
30424: PUSH
30425: LD_VAR 0 18
30429: PPUSH
30430: LD_INT 22
30432: PUSH
30433: LD_VAR 0 16
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 58
30444: PUSH
30445: EMPTY
30446: LIST
30447: PUSH
30448: LD_INT 2
30450: PUSH
30451: LD_INT 30
30453: PUSH
30454: LD_INT 32
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 30
30463: PUSH
30464: LD_INT 4
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 30
30473: PUSH
30474: LD_INT 5
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: LIST
30491: PPUSH
30492: CALL_OW 72
30496: ST_TO_ADDR
30497: GO 30721
30499: LD_INT 2
30501: DOUBLE
30502: EQUAL
30503: IFTRUE 30507
30505: GO 30569
30507: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30508: LD_ADDR_VAR 0 12
30512: PUSH
30513: LD_VAR 0 18
30517: PPUSH
30518: LD_INT 22
30520: PUSH
30521: LD_VAR 0 16
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 2
30532: PUSH
30533: LD_INT 30
30535: PUSH
30536: LD_INT 0
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 30
30545: PUSH
30546: LD_INT 1
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: LIST
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PPUSH
30562: CALL_OW 72
30566: ST_TO_ADDR
30567: GO 30721
30569: LD_INT 3
30571: DOUBLE
30572: EQUAL
30573: IFTRUE 30577
30575: GO 30639
30577: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30578: LD_ADDR_VAR 0 12
30582: PUSH
30583: LD_VAR 0 18
30587: PPUSH
30588: LD_INT 22
30590: PUSH
30591: LD_VAR 0 16
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 2
30602: PUSH
30603: LD_INT 30
30605: PUSH
30606: LD_INT 2
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 30
30615: PUSH
30616: LD_INT 3
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: LIST
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PPUSH
30632: CALL_OW 72
30636: ST_TO_ADDR
30637: GO 30721
30639: LD_INT 4
30641: DOUBLE
30642: EQUAL
30643: IFTRUE 30647
30645: GO 30720
30647: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30648: LD_ADDR_VAR 0 12
30652: PUSH
30653: LD_VAR 0 18
30657: PPUSH
30658: LD_INT 22
30660: PUSH
30661: LD_VAR 0 16
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 2
30672: PUSH
30673: LD_INT 30
30675: PUSH
30676: LD_INT 6
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 30
30685: PUSH
30686: LD_INT 7
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: LD_INT 30
30695: PUSH
30696: LD_INT 8
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PPUSH
30713: CALL_OW 72
30717: ST_TO_ADDR
30718: GO 30721
30720: POP
// if i = 1 then
30721: LD_VAR 0 8
30725: PUSH
30726: LD_INT 1
30728: EQUAL
30729: IFFALSE 30840
// begin tmp := [ ] ;
30731: LD_ADDR_VAR 0 19
30735: PUSH
30736: EMPTY
30737: ST_TO_ADDR
// for j in f do
30738: LD_ADDR_VAR 0 9
30742: PUSH
30743: LD_VAR 0 12
30747: PUSH
30748: FOR_IN
30749: IFFALSE 30822
// if GetBType ( j ) = b_bunker then
30751: LD_VAR 0 9
30755: PPUSH
30756: CALL_OW 266
30760: PUSH
30761: LD_INT 32
30763: EQUAL
30764: IFFALSE 30791
// tmp := Insert ( tmp , 1 , j ) else
30766: LD_ADDR_VAR 0 19
30770: PUSH
30771: LD_VAR 0 19
30775: PPUSH
30776: LD_INT 1
30778: PPUSH
30779: LD_VAR 0 9
30783: PPUSH
30784: CALL_OW 2
30788: ST_TO_ADDR
30789: GO 30820
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30791: LD_ADDR_VAR 0 19
30795: PUSH
30796: LD_VAR 0 19
30800: PPUSH
30801: LD_VAR 0 19
30805: PUSH
30806: LD_INT 1
30808: PLUS
30809: PPUSH
30810: LD_VAR 0 9
30814: PPUSH
30815: CALL_OW 2
30819: ST_TO_ADDR
30820: GO 30748
30822: POP
30823: POP
// if tmp then
30824: LD_VAR 0 19
30828: IFFALSE 30840
// f := tmp ;
30830: LD_ADDR_VAR 0 12
30834: PUSH
30835: LD_VAR 0 19
30839: ST_TO_ADDR
// end ; x := personel [ i ] ;
30840: LD_ADDR_VAR 0 13
30844: PUSH
30845: LD_VAR 0 6
30849: PUSH
30850: LD_VAR 0 8
30854: ARRAY
30855: ST_TO_ADDR
// if x = - 1 then
30856: LD_VAR 0 13
30860: PUSH
30861: LD_INT 1
30863: NEG
30864: EQUAL
30865: IFFALSE 31074
// begin for j in f do
30867: LD_ADDR_VAR 0 9
30871: PUSH
30872: LD_VAR 0 12
30876: PUSH
30877: FOR_IN
30878: IFFALSE 31070
// repeat InitHc ;
30880: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30884: LD_VAR 0 9
30888: PPUSH
30889: CALL_OW 266
30893: PUSH
30894: LD_INT 5
30896: EQUAL
30897: IFFALSE 30967
// begin if UnitsInside ( j ) < 3 then
30899: LD_VAR 0 9
30903: PPUSH
30904: CALL_OW 313
30908: PUSH
30909: LD_INT 3
30911: LESS
30912: IFFALSE 30948
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30914: LD_INT 0
30916: PPUSH
30917: LD_INT 5
30919: PUSH
30920: LD_INT 8
30922: PUSH
30923: LD_INT 9
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: LIST
30930: PUSH
30931: LD_VAR 0 17
30935: ARRAY
30936: PPUSH
30937: LD_VAR 0 4
30941: PPUSH
30942: CALL_OW 380
30946: GO 30965
// PrepareHuman ( false , i , skill ) ;
30948: LD_INT 0
30950: PPUSH
30951: LD_VAR 0 8
30955: PPUSH
30956: LD_VAR 0 4
30960: PPUSH
30961: CALL_OW 380
// end else
30965: GO 30984
// PrepareHuman ( false , i , skill ) ;
30967: LD_INT 0
30969: PPUSH
30970: LD_VAR 0 8
30974: PPUSH
30975: LD_VAR 0 4
30979: PPUSH
30980: CALL_OW 380
// un := CreateHuman ;
30984: LD_ADDR_VAR 0 14
30988: PUSH
30989: CALL_OW 44
30993: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30994: LD_ADDR_VAR 0 7
30998: PUSH
30999: LD_VAR 0 7
31003: PPUSH
31004: LD_INT 1
31006: PPUSH
31007: LD_VAR 0 14
31011: PPUSH
31012: CALL_OW 2
31016: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31017: LD_VAR 0 14
31021: PPUSH
31022: LD_VAR 0 9
31026: PPUSH
31027: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31031: LD_VAR 0 9
31035: PPUSH
31036: CALL_OW 313
31040: PUSH
31041: LD_INT 6
31043: EQUAL
31044: PUSH
31045: LD_VAR 0 9
31049: PPUSH
31050: CALL_OW 266
31054: PUSH
31055: LD_INT 32
31057: PUSH
31058: LD_INT 31
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: IN
31065: OR
31066: IFFALSE 30880
31068: GO 30877
31070: POP
31071: POP
// end else
31072: GO 31454
// for j = 1 to x do
31074: LD_ADDR_VAR 0 9
31078: PUSH
31079: DOUBLE
31080: LD_INT 1
31082: DEC
31083: ST_TO_ADDR
31084: LD_VAR 0 13
31088: PUSH
31089: FOR_TO
31090: IFFALSE 31452
// begin InitHc ;
31092: CALL_OW 19
// if not f then
31096: LD_VAR 0 12
31100: NOT
31101: IFFALSE 31190
// begin PrepareHuman ( false , i , skill ) ;
31103: LD_INT 0
31105: PPUSH
31106: LD_VAR 0 8
31110: PPUSH
31111: LD_VAR 0 4
31115: PPUSH
31116: CALL_OW 380
// un := CreateHuman ;
31120: LD_ADDR_VAR 0 14
31124: PUSH
31125: CALL_OW 44
31129: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31130: LD_ADDR_VAR 0 7
31134: PUSH
31135: LD_VAR 0 7
31139: PPUSH
31140: LD_INT 1
31142: PPUSH
31143: LD_VAR 0 14
31147: PPUSH
31148: CALL_OW 2
31152: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31153: LD_VAR 0 14
31157: PPUSH
31158: LD_VAR 0 1
31162: PPUSH
31163: CALL_OW 250
31167: PPUSH
31168: LD_VAR 0 1
31172: PPUSH
31173: CALL_OW 251
31177: PPUSH
31178: LD_INT 10
31180: PPUSH
31181: LD_INT 0
31183: PPUSH
31184: CALL_OW 50
// continue ;
31188: GO 31089
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31190: LD_VAR 0 12
31194: PUSH
31195: LD_INT 1
31197: ARRAY
31198: PPUSH
31199: CALL_OW 313
31203: PUSH
31204: LD_VAR 0 12
31208: PUSH
31209: LD_INT 1
31211: ARRAY
31212: PPUSH
31213: CALL_OW 266
31217: PUSH
31218: LD_INT 32
31220: PUSH
31221: LD_INT 31
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: IN
31228: AND
31229: PUSH
31230: LD_VAR 0 12
31234: PUSH
31235: LD_INT 1
31237: ARRAY
31238: PPUSH
31239: CALL_OW 313
31243: PUSH
31244: LD_INT 6
31246: EQUAL
31247: OR
31248: IFFALSE 31268
// f := Delete ( f , 1 ) ;
31250: LD_ADDR_VAR 0 12
31254: PUSH
31255: LD_VAR 0 12
31259: PPUSH
31260: LD_INT 1
31262: PPUSH
31263: CALL_OW 3
31267: ST_TO_ADDR
// if not f then
31268: LD_VAR 0 12
31272: NOT
31273: IFFALSE 31291
// begin x := x + 2 ;
31275: LD_ADDR_VAR 0 13
31279: PUSH
31280: LD_VAR 0 13
31284: PUSH
31285: LD_INT 2
31287: PLUS
31288: ST_TO_ADDR
// continue ;
31289: GO 31089
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31291: LD_VAR 0 12
31295: PUSH
31296: LD_INT 1
31298: ARRAY
31299: PPUSH
31300: CALL_OW 266
31304: PUSH
31305: LD_INT 5
31307: EQUAL
31308: IFFALSE 31382
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31310: LD_VAR 0 12
31314: PUSH
31315: LD_INT 1
31317: ARRAY
31318: PPUSH
31319: CALL_OW 313
31323: PUSH
31324: LD_INT 3
31326: LESS
31327: IFFALSE 31363
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31329: LD_INT 0
31331: PPUSH
31332: LD_INT 5
31334: PUSH
31335: LD_INT 8
31337: PUSH
31338: LD_INT 9
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: LIST
31345: PUSH
31346: LD_VAR 0 17
31350: ARRAY
31351: PPUSH
31352: LD_VAR 0 4
31356: PPUSH
31357: CALL_OW 380
31361: GO 31380
// PrepareHuman ( false , i , skill ) ;
31363: LD_INT 0
31365: PPUSH
31366: LD_VAR 0 8
31370: PPUSH
31371: LD_VAR 0 4
31375: PPUSH
31376: CALL_OW 380
// end else
31380: GO 31399
// PrepareHuman ( false , i , skill ) ;
31382: LD_INT 0
31384: PPUSH
31385: LD_VAR 0 8
31389: PPUSH
31390: LD_VAR 0 4
31394: PPUSH
31395: CALL_OW 380
// un := CreateHuman ;
31399: LD_ADDR_VAR 0 14
31403: PUSH
31404: CALL_OW 44
31408: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31409: LD_ADDR_VAR 0 7
31413: PUSH
31414: LD_VAR 0 7
31418: PPUSH
31419: LD_INT 1
31421: PPUSH
31422: LD_VAR 0 14
31426: PPUSH
31427: CALL_OW 2
31431: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31432: LD_VAR 0 14
31436: PPUSH
31437: LD_VAR 0 12
31441: PUSH
31442: LD_INT 1
31444: ARRAY
31445: PPUSH
31446: CALL_OW 52
// end ;
31450: GO 31089
31452: POP
31453: POP
// end ;
31454: GO 30391
31456: POP
31457: POP
// result := result ^ buildings ;
31458: LD_ADDR_VAR 0 7
31462: PUSH
31463: LD_VAR 0 7
31467: PUSH
31468: LD_VAR 0 18
31472: ADD
31473: ST_TO_ADDR
// end else
31474: GO 31617
// begin for i = 1 to personel do
31476: LD_ADDR_VAR 0 8
31480: PUSH
31481: DOUBLE
31482: LD_INT 1
31484: DEC
31485: ST_TO_ADDR
31486: LD_VAR 0 6
31490: PUSH
31491: FOR_TO
31492: IFFALSE 31615
// begin if i > 4 then
31494: LD_VAR 0 8
31498: PUSH
31499: LD_INT 4
31501: GREATER
31502: IFFALSE 31506
// break ;
31504: GO 31615
// x := personel [ i ] ;
31506: LD_ADDR_VAR 0 13
31510: PUSH
31511: LD_VAR 0 6
31515: PUSH
31516: LD_VAR 0 8
31520: ARRAY
31521: ST_TO_ADDR
// if x = - 1 then
31522: LD_VAR 0 13
31526: PUSH
31527: LD_INT 1
31529: NEG
31530: EQUAL
31531: IFFALSE 31535
// continue ;
31533: GO 31491
// PrepareHuman ( false , i , skill ) ;
31535: LD_INT 0
31537: PPUSH
31538: LD_VAR 0 8
31542: PPUSH
31543: LD_VAR 0 4
31547: PPUSH
31548: CALL_OW 380
// un := CreateHuman ;
31552: LD_ADDR_VAR 0 14
31556: PUSH
31557: CALL_OW 44
31561: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31562: LD_VAR 0 14
31566: PPUSH
31567: LD_VAR 0 1
31571: PPUSH
31572: CALL_OW 250
31576: PPUSH
31577: LD_VAR 0 1
31581: PPUSH
31582: CALL_OW 251
31586: PPUSH
31587: LD_INT 10
31589: PPUSH
31590: LD_INT 0
31592: PPUSH
31593: CALL_OW 50
// result := result ^ un ;
31597: LD_ADDR_VAR 0 7
31601: PUSH
31602: LD_VAR 0 7
31606: PUSH
31607: LD_VAR 0 14
31611: ADD
31612: ST_TO_ADDR
// end ;
31613: GO 31491
31615: POP
31616: POP
// end ; end ;
31617: LD_VAR 0 7
31621: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31622: LD_INT 0
31624: PPUSH
31625: PPUSH
31626: PPUSH
31627: PPUSH
31628: PPUSH
31629: PPUSH
31630: PPUSH
31631: PPUSH
31632: PPUSH
31633: PPUSH
31634: PPUSH
31635: PPUSH
31636: PPUSH
31637: PPUSH
31638: PPUSH
31639: PPUSH
// result := false ;
31640: LD_ADDR_VAR 0 3
31644: PUSH
31645: LD_INT 0
31647: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31648: LD_VAR 0 1
31652: NOT
31653: PUSH
31654: LD_VAR 0 1
31658: PPUSH
31659: CALL_OW 266
31663: PUSH
31664: LD_INT 32
31666: PUSH
31667: LD_INT 33
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: IN
31674: NOT
31675: OR
31676: IFFALSE 31680
// exit ;
31678: GO 32816
// nat := GetNation ( tower ) ;
31680: LD_ADDR_VAR 0 12
31684: PUSH
31685: LD_VAR 0 1
31689: PPUSH
31690: CALL_OW 248
31694: ST_TO_ADDR
// side := GetSide ( tower ) ;
31695: LD_ADDR_VAR 0 16
31699: PUSH
31700: LD_VAR 0 1
31704: PPUSH
31705: CALL_OW 255
31709: ST_TO_ADDR
// x := GetX ( tower ) ;
31710: LD_ADDR_VAR 0 10
31714: PUSH
31715: LD_VAR 0 1
31719: PPUSH
31720: CALL_OW 250
31724: ST_TO_ADDR
// y := GetY ( tower ) ;
31725: LD_ADDR_VAR 0 11
31729: PUSH
31730: LD_VAR 0 1
31734: PPUSH
31735: CALL_OW 251
31739: ST_TO_ADDR
// if not x or not y then
31740: LD_VAR 0 10
31744: NOT
31745: PUSH
31746: LD_VAR 0 11
31750: NOT
31751: OR
31752: IFFALSE 31756
// exit ;
31754: GO 32816
// weapon := 0 ;
31756: LD_ADDR_VAR 0 18
31760: PUSH
31761: LD_INT 0
31763: ST_TO_ADDR
// fac_list := [ ] ;
31764: LD_ADDR_VAR 0 17
31768: PUSH
31769: EMPTY
31770: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
31771: LD_ADDR_VAR 0 6
31775: PUSH
31776: LD_VAR 0 1
31780: PPUSH
31781: CALL_OW 274
31785: PPUSH
31786: LD_VAR 0 2
31790: PPUSH
31791: CALL 29394 0 2
31795: PPUSH
31796: LD_INT 30
31798: PUSH
31799: LD_INT 3
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PPUSH
31806: CALL_OW 72
31810: ST_TO_ADDR
// if not factories then
31811: LD_VAR 0 6
31815: NOT
31816: IFFALSE 31820
// exit ;
31818: GO 32816
// for i in factories do
31820: LD_ADDR_VAR 0 8
31824: PUSH
31825: LD_VAR 0 6
31829: PUSH
31830: FOR_IN
31831: IFFALSE 31856
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31833: LD_ADDR_VAR 0 17
31837: PUSH
31838: LD_VAR 0 17
31842: PUSH
31843: LD_VAR 0 8
31847: PPUSH
31848: CALL_OW 478
31852: UNION
31853: ST_TO_ADDR
31854: GO 31830
31856: POP
31857: POP
// if not fac_list then
31858: LD_VAR 0 17
31862: NOT
31863: IFFALSE 31867
// exit ;
31865: GO 32816
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31867: LD_ADDR_VAR 0 5
31871: PUSH
31872: LD_INT 4
31874: PUSH
31875: LD_INT 5
31877: PUSH
31878: LD_INT 9
31880: PUSH
31881: LD_INT 10
31883: PUSH
31884: LD_INT 6
31886: PUSH
31887: LD_INT 7
31889: PUSH
31890: LD_INT 11
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 27
31904: PUSH
31905: LD_INT 28
31907: PUSH
31908: LD_INT 26
31910: PUSH
31911: LD_INT 30
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: PUSH
31920: LD_INT 43
31922: PUSH
31923: LD_INT 44
31925: PUSH
31926: LD_INT 46
31928: PUSH
31929: LD_INT 45
31931: PUSH
31932: LD_INT 47
31934: PUSH
31935: LD_INT 49
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: LIST
31950: PUSH
31951: LD_VAR 0 12
31955: ARRAY
31956: ST_TO_ADDR
// for i in list do
31957: LD_ADDR_VAR 0 8
31961: PUSH
31962: LD_VAR 0 5
31966: PUSH
31967: FOR_IN
31968: IFFALSE 32001
// if not i in fac_list then
31970: LD_VAR 0 8
31974: PUSH
31975: LD_VAR 0 17
31979: IN
31980: NOT
31981: IFFALSE 31999
// list := list diff i ;
31983: LD_ADDR_VAR 0 5
31987: PUSH
31988: LD_VAR 0 5
31992: PUSH
31993: LD_VAR 0 8
31997: DIFF
31998: ST_TO_ADDR
31999: GO 31967
32001: POP
32002: POP
// if not list then
32003: LD_VAR 0 5
32007: NOT
32008: IFFALSE 32012
// exit ;
32010: GO 32816
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32012: LD_VAR 0 12
32016: PUSH
32017: LD_INT 3
32019: EQUAL
32020: PUSH
32021: LD_INT 49
32023: PUSH
32024: LD_VAR 0 5
32028: IN
32029: AND
32030: PUSH
32031: LD_INT 31
32033: PPUSH
32034: LD_VAR 0 16
32038: PPUSH
32039: CALL_OW 321
32043: PUSH
32044: LD_INT 2
32046: EQUAL
32047: AND
32048: IFFALSE 32108
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32050: LD_INT 22
32052: PUSH
32053: LD_VAR 0 16
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 35
32064: PUSH
32065: LD_INT 49
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 91
32074: PUSH
32075: LD_VAR 0 1
32079: PUSH
32080: LD_INT 10
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: LIST
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: LIST
32092: PPUSH
32093: CALL_OW 69
32097: NOT
32098: IFFALSE 32108
// weapon := ru_time_lapser ;
32100: LD_ADDR_VAR 0 18
32104: PUSH
32105: LD_INT 49
32107: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32108: LD_VAR 0 12
32112: PUSH
32113: LD_INT 1
32115: PUSH
32116: LD_INT 2
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: IN
32123: PUSH
32124: LD_INT 11
32126: PUSH
32127: LD_VAR 0 5
32131: IN
32132: PUSH
32133: LD_INT 30
32135: PUSH
32136: LD_VAR 0 5
32140: IN
32141: OR
32142: AND
32143: PUSH
32144: LD_INT 6
32146: PPUSH
32147: LD_VAR 0 16
32151: PPUSH
32152: CALL_OW 321
32156: PUSH
32157: LD_INT 2
32159: EQUAL
32160: AND
32161: IFFALSE 32326
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32163: LD_INT 22
32165: PUSH
32166: LD_VAR 0 16
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 2
32177: PUSH
32178: LD_INT 35
32180: PUSH
32181: LD_INT 11
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 35
32190: PUSH
32191: LD_INT 30
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 91
32205: PUSH
32206: LD_VAR 0 1
32210: PUSH
32211: LD_INT 18
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: LIST
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: LIST
32223: PPUSH
32224: CALL_OW 69
32228: NOT
32229: PUSH
32230: LD_INT 22
32232: PUSH
32233: LD_VAR 0 16
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 2
32244: PUSH
32245: LD_INT 30
32247: PUSH
32248: LD_INT 32
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 30
32257: PUSH
32258: LD_INT 33
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 91
32272: PUSH
32273: LD_VAR 0 1
32277: PUSH
32278: LD_INT 12
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: LIST
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: LIST
32290: PUSH
32291: EMPTY
32292: LIST
32293: PPUSH
32294: CALL_OW 69
32298: PUSH
32299: LD_INT 2
32301: GREATER
32302: AND
32303: IFFALSE 32326
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32305: LD_ADDR_VAR 0 18
32309: PUSH
32310: LD_INT 11
32312: PUSH
32313: LD_INT 30
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_VAR 0 12
32324: ARRAY
32325: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32326: LD_VAR 0 18
32330: NOT
32331: PUSH
32332: LD_INT 40
32334: PPUSH
32335: LD_VAR 0 16
32339: PPUSH
32340: CALL_OW 321
32344: PUSH
32345: LD_INT 2
32347: EQUAL
32348: AND
32349: PUSH
32350: LD_INT 7
32352: PUSH
32353: LD_VAR 0 5
32357: IN
32358: PUSH
32359: LD_INT 28
32361: PUSH
32362: LD_VAR 0 5
32366: IN
32367: OR
32368: PUSH
32369: LD_INT 45
32371: PUSH
32372: LD_VAR 0 5
32376: IN
32377: OR
32378: AND
32379: IFFALSE 32633
// begin hex := GetHexInfo ( x , y ) ;
32381: LD_ADDR_VAR 0 4
32385: PUSH
32386: LD_VAR 0 10
32390: PPUSH
32391: LD_VAR 0 11
32395: PPUSH
32396: CALL_OW 546
32400: ST_TO_ADDR
// if hex [ 1 ] then
32401: LD_VAR 0 4
32405: PUSH
32406: LD_INT 1
32408: ARRAY
32409: IFFALSE 32413
// exit ;
32411: GO 32816
// height := hex [ 2 ] ;
32413: LD_ADDR_VAR 0 15
32417: PUSH
32418: LD_VAR 0 4
32422: PUSH
32423: LD_INT 2
32425: ARRAY
32426: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32427: LD_ADDR_VAR 0 14
32431: PUSH
32432: LD_INT 0
32434: PUSH
32435: LD_INT 2
32437: PUSH
32438: LD_INT 3
32440: PUSH
32441: LD_INT 5
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: ST_TO_ADDR
// for i in tmp do
32450: LD_ADDR_VAR 0 8
32454: PUSH
32455: LD_VAR 0 14
32459: PUSH
32460: FOR_IN
32461: IFFALSE 32631
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32463: LD_ADDR_VAR 0 9
32467: PUSH
32468: LD_VAR 0 10
32472: PPUSH
32473: LD_VAR 0 8
32477: PPUSH
32478: LD_INT 5
32480: PPUSH
32481: CALL_OW 272
32485: PUSH
32486: LD_VAR 0 11
32490: PPUSH
32491: LD_VAR 0 8
32495: PPUSH
32496: LD_INT 5
32498: PPUSH
32499: CALL_OW 273
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32508: LD_VAR 0 9
32512: PUSH
32513: LD_INT 1
32515: ARRAY
32516: PPUSH
32517: LD_VAR 0 9
32521: PUSH
32522: LD_INT 2
32524: ARRAY
32525: PPUSH
32526: CALL_OW 488
32530: IFFALSE 32629
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32532: LD_ADDR_VAR 0 4
32536: PUSH
32537: LD_VAR 0 9
32541: PUSH
32542: LD_INT 1
32544: ARRAY
32545: PPUSH
32546: LD_VAR 0 9
32550: PUSH
32551: LD_INT 2
32553: ARRAY
32554: PPUSH
32555: CALL_OW 546
32559: ST_TO_ADDR
// if hex [ 1 ] then
32560: LD_VAR 0 4
32564: PUSH
32565: LD_INT 1
32567: ARRAY
32568: IFFALSE 32572
// continue ;
32570: GO 32460
// h := hex [ 2 ] ;
32572: LD_ADDR_VAR 0 13
32576: PUSH
32577: LD_VAR 0 4
32581: PUSH
32582: LD_INT 2
32584: ARRAY
32585: ST_TO_ADDR
// if h + 7 < height then
32586: LD_VAR 0 13
32590: PUSH
32591: LD_INT 7
32593: PLUS
32594: PUSH
32595: LD_VAR 0 15
32599: LESS
32600: IFFALSE 32629
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32602: LD_ADDR_VAR 0 18
32606: PUSH
32607: LD_INT 7
32609: PUSH
32610: LD_INT 28
32612: PUSH
32613: LD_INT 45
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: LIST
32620: PUSH
32621: LD_VAR 0 12
32625: ARRAY
32626: ST_TO_ADDR
// break ;
32627: GO 32631
// end ; end ; end ;
32629: GO 32460
32631: POP
32632: POP
// end ; if not weapon then
32633: LD_VAR 0 18
32637: NOT
32638: IFFALSE 32698
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32640: LD_ADDR_VAR 0 5
32644: PUSH
32645: LD_VAR 0 5
32649: PUSH
32650: LD_INT 11
32652: PUSH
32653: LD_INT 30
32655: PUSH
32656: LD_INT 49
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: LIST
32663: DIFF
32664: ST_TO_ADDR
// if not list then
32665: LD_VAR 0 5
32669: NOT
32670: IFFALSE 32674
// exit ;
32672: GO 32816
// weapon := list [ rand ( 1 , list ) ] ;
32674: LD_ADDR_VAR 0 18
32678: PUSH
32679: LD_VAR 0 5
32683: PUSH
32684: LD_INT 1
32686: PPUSH
32687: LD_VAR 0 5
32691: PPUSH
32692: CALL_OW 12
32696: ARRAY
32697: ST_TO_ADDR
// end ; if weapon then
32698: LD_VAR 0 18
32702: IFFALSE 32816
// begin tmp := CostOfWeapon ( weapon ) ;
32704: LD_ADDR_VAR 0 14
32708: PUSH
32709: LD_VAR 0 18
32713: PPUSH
32714: CALL_OW 451
32718: ST_TO_ADDR
// j := GetBase ( tower ) ;
32719: LD_ADDR_VAR 0 9
32723: PUSH
32724: LD_VAR 0 1
32728: PPUSH
32729: CALL_OW 274
32733: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32734: LD_VAR 0 9
32738: PPUSH
32739: LD_INT 1
32741: PPUSH
32742: CALL_OW 275
32746: PUSH
32747: LD_VAR 0 14
32751: PUSH
32752: LD_INT 1
32754: ARRAY
32755: GREATEREQUAL
32756: PUSH
32757: LD_VAR 0 9
32761: PPUSH
32762: LD_INT 2
32764: PPUSH
32765: CALL_OW 275
32769: PUSH
32770: LD_VAR 0 14
32774: PUSH
32775: LD_INT 2
32777: ARRAY
32778: GREATEREQUAL
32779: AND
32780: PUSH
32781: LD_VAR 0 9
32785: PPUSH
32786: LD_INT 3
32788: PPUSH
32789: CALL_OW 275
32793: PUSH
32794: LD_VAR 0 14
32798: PUSH
32799: LD_INT 3
32801: ARRAY
32802: GREATEREQUAL
32803: AND
32804: IFFALSE 32816
// result := weapon ;
32806: LD_ADDR_VAR 0 3
32810: PUSH
32811: LD_VAR 0 18
32815: ST_TO_ADDR
// end ; end ;
32816: LD_VAR 0 3
32820: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32821: LD_INT 0
32823: PPUSH
32824: PPUSH
// result := true ;
32825: LD_ADDR_VAR 0 3
32829: PUSH
32830: LD_INT 1
32832: ST_TO_ADDR
// if array1 = array2 then
32833: LD_VAR 0 1
32837: PUSH
32838: LD_VAR 0 2
32842: EQUAL
32843: IFFALSE 32903
// begin for i = 1 to array1 do
32845: LD_ADDR_VAR 0 4
32849: PUSH
32850: DOUBLE
32851: LD_INT 1
32853: DEC
32854: ST_TO_ADDR
32855: LD_VAR 0 1
32859: PUSH
32860: FOR_TO
32861: IFFALSE 32899
// if array1 [ i ] <> array2 [ i ] then
32863: LD_VAR 0 1
32867: PUSH
32868: LD_VAR 0 4
32872: ARRAY
32873: PUSH
32874: LD_VAR 0 2
32878: PUSH
32879: LD_VAR 0 4
32883: ARRAY
32884: NONEQUAL
32885: IFFALSE 32897
// begin result := false ;
32887: LD_ADDR_VAR 0 3
32891: PUSH
32892: LD_INT 0
32894: ST_TO_ADDR
// break ;
32895: GO 32899
// end ;
32897: GO 32860
32899: POP
32900: POP
// end else
32901: GO 32911
// result := false ;
32903: LD_ADDR_VAR 0 3
32907: PUSH
32908: LD_INT 0
32910: ST_TO_ADDR
// end ;
32911: LD_VAR 0 3
32915: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32916: LD_INT 0
32918: PPUSH
32919: PPUSH
32920: PPUSH
// pom := GetBase ( fac ) ;
32921: LD_ADDR_VAR 0 5
32925: PUSH
32926: LD_VAR 0 1
32930: PPUSH
32931: CALL_OW 274
32935: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32936: LD_ADDR_VAR 0 4
32940: PUSH
32941: LD_VAR 0 2
32945: PUSH
32946: LD_INT 1
32948: ARRAY
32949: PPUSH
32950: LD_VAR 0 2
32954: PUSH
32955: LD_INT 2
32957: ARRAY
32958: PPUSH
32959: LD_VAR 0 2
32963: PUSH
32964: LD_INT 3
32966: ARRAY
32967: PPUSH
32968: LD_VAR 0 2
32972: PUSH
32973: LD_INT 4
32975: ARRAY
32976: PPUSH
32977: CALL_OW 449
32981: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32982: LD_ADDR_VAR 0 3
32986: PUSH
32987: LD_VAR 0 5
32991: PPUSH
32992: LD_INT 1
32994: PPUSH
32995: CALL_OW 275
32999: PUSH
33000: LD_VAR 0 4
33004: PUSH
33005: LD_INT 1
33007: ARRAY
33008: GREATEREQUAL
33009: PUSH
33010: LD_VAR 0 5
33014: PPUSH
33015: LD_INT 2
33017: PPUSH
33018: CALL_OW 275
33022: PUSH
33023: LD_VAR 0 4
33027: PUSH
33028: LD_INT 2
33030: ARRAY
33031: GREATEREQUAL
33032: AND
33033: PUSH
33034: LD_VAR 0 5
33038: PPUSH
33039: LD_INT 3
33041: PPUSH
33042: CALL_OW 275
33046: PUSH
33047: LD_VAR 0 4
33051: PUSH
33052: LD_INT 3
33054: ARRAY
33055: GREATEREQUAL
33056: AND
33057: ST_TO_ADDR
// end ;
33058: LD_VAR 0 3
33062: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33063: LD_INT 0
33065: PPUSH
33066: PPUSH
33067: PPUSH
33068: PPUSH
// pom := GetBase ( building ) ;
33069: LD_ADDR_VAR 0 3
33073: PUSH
33074: LD_VAR 0 1
33078: PPUSH
33079: CALL_OW 274
33083: ST_TO_ADDR
// if not pom then
33084: LD_VAR 0 3
33088: NOT
33089: IFFALSE 33093
// exit ;
33091: GO 33263
// btype := GetBType ( building ) ;
33093: LD_ADDR_VAR 0 5
33097: PUSH
33098: LD_VAR 0 1
33102: PPUSH
33103: CALL_OW 266
33107: ST_TO_ADDR
// if btype = b_armoury then
33108: LD_VAR 0 5
33112: PUSH
33113: LD_INT 4
33115: EQUAL
33116: IFFALSE 33126
// btype := b_barracks ;
33118: LD_ADDR_VAR 0 5
33122: PUSH
33123: LD_INT 5
33125: ST_TO_ADDR
// if btype = b_depot then
33126: LD_VAR 0 5
33130: PUSH
33131: LD_INT 0
33133: EQUAL
33134: IFFALSE 33144
// btype := b_warehouse ;
33136: LD_ADDR_VAR 0 5
33140: PUSH
33141: LD_INT 1
33143: ST_TO_ADDR
// if btype = b_workshop then
33144: LD_VAR 0 5
33148: PUSH
33149: LD_INT 2
33151: EQUAL
33152: IFFALSE 33162
// btype := b_factory ;
33154: LD_ADDR_VAR 0 5
33158: PUSH
33159: LD_INT 3
33161: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33162: LD_ADDR_VAR 0 4
33166: PUSH
33167: LD_VAR 0 5
33171: PPUSH
33172: LD_VAR 0 1
33176: PPUSH
33177: CALL_OW 248
33181: PPUSH
33182: CALL_OW 450
33186: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33187: LD_ADDR_VAR 0 2
33191: PUSH
33192: LD_VAR 0 3
33196: PPUSH
33197: LD_INT 1
33199: PPUSH
33200: CALL_OW 275
33204: PUSH
33205: LD_VAR 0 4
33209: PUSH
33210: LD_INT 1
33212: ARRAY
33213: GREATEREQUAL
33214: PUSH
33215: LD_VAR 0 3
33219: PPUSH
33220: LD_INT 2
33222: PPUSH
33223: CALL_OW 275
33227: PUSH
33228: LD_VAR 0 4
33232: PUSH
33233: LD_INT 2
33235: ARRAY
33236: GREATEREQUAL
33237: AND
33238: PUSH
33239: LD_VAR 0 3
33243: PPUSH
33244: LD_INT 3
33246: PPUSH
33247: CALL_OW 275
33251: PUSH
33252: LD_VAR 0 4
33256: PUSH
33257: LD_INT 3
33259: ARRAY
33260: GREATEREQUAL
33261: AND
33262: ST_TO_ADDR
// end ;
33263: LD_VAR 0 2
33267: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33268: LD_INT 0
33270: PPUSH
33271: PPUSH
33272: PPUSH
// pom := GetBase ( building ) ;
33273: LD_ADDR_VAR 0 4
33277: PUSH
33278: LD_VAR 0 1
33282: PPUSH
33283: CALL_OW 274
33287: ST_TO_ADDR
// if not pom then
33288: LD_VAR 0 4
33292: NOT
33293: IFFALSE 33297
// exit ;
33295: GO 33398
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33297: LD_ADDR_VAR 0 5
33301: PUSH
33302: LD_VAR 0 2
33306: PPUSH
33307: LD_VAR 0 1
33311: PPUSH
33312: CALL_OW 248
33316: PPUSH
33317: CALL_OW 450
33321: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33322: LD_ADDR_VAR 0 3
33326: PUSH
33327: LD_VAR 0 4
33331: PPUSH
33332: LD_INT 1
33334: PPUSH
33335: CALL_OW 275
33339: PUSH
33340: LD_VAR 0 5
33344: PUSH
33345: LD_INT 1
33347: ARRAY
33348: GREATEREQUAL
33349: PUSH
33350: LD_VAR 0 4
33354: PPUSH
33355: LD_INT 2
33357: PPUSH
33358: CALL_OW 275
33362: PUSH
33363: LD_VAR 0 5
33367: PUSH
33368: LD_INT 2
33370: ARRAY
33371: GREATEREQUAL
33372: AND
33373: PUSH
33374: LD_VAR 0 4
33378: PPUSH
33379: LD_INT 3
33381: PPUSH
33382: CALL_OW 275
33386: PUSH
33387: LD_VAR 0 5
33391: PUSH
33392: LD_INT 3
33394: ARRAY
33395: GREATEREQUAL
33396: AND
33397: ST_TO_ADDR
// end ;
33398: LD_VAR 0 3
33402: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
33403: LD_INT 0
33405: PPUSH
33406: PPUSH
33407: PPUSH
33408: PPUSH
33409: PPUSH
33410: PPUSH
33411: PPUSH
33412: PPUSH
33413: PPUSH
33414: PPUSH
// result := false ;
33415: LD_ADDR_VAR 0 6
33419: PUSH
33420: LD_INT 0
33422: ST_TO_ADDR
// if not base or not btype or not x or not y then
33423: LD_VAR 0 1
33427: NOT
33428: PUSH
33429: LD_VAR 0 2
33433: NOT
33434: OR
33435: PUSH
33436: LD_VAR 0 3
33440: NOT
33441: OR
33442: PUSH
33443: LD_VAR 0 4
33447: NOT
33448: OR
33449: IFFALSE 33453
// exit ;
33451: GO 34062
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
33453: LD_ADDR_VAR 0 12
33457: PUSH
33458: LD_VAR 0 2
33462: PPUSH
33463: LD_VAR 0 3
33467: PPUSH
33468: LD_VAR 0 4
33472: PPUSH
33473: LD_VAR 0 5
33477: PPUSH
33478: LD_VAR 0 1
33482: PUSH
33483: LD_INT 1
33485: ARRAY
33486: PPUSH
33487: CALL_OW 248
33491: PPUSH
33492: LD_INT 0
33494: PPUSH
33495: CALL 34899 0 6
33499: ST_TO_ADDR
// if not hexes then
33500: LD_VAR 0 12
33504: NOT
33505: IFFALSE 33509
// exit ;
33507: GO 34062
// for i = 1 to hexes do
33509: LD_ADDR_VAR 0 7
33513: PUSH
33514: DOUBLE
33515: LD_INT 1
33517: DEC
33518: ST_TO_ADDR
33519: LD_VAR 0 12
33523: PUSH
33524: FOR_TO
33525: IFFALSE 34060
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33527: LD_ADDR_VAR 0 11
33531: PUSH
33532: LD_VAR 0 12
33536: PUSH
33537: LD_VAR 0 7
33541: ARRAY
33542: PUSH
33543: LD_INT 1
33545: ARRAY
33546: PPUSH
33547: LD_VAR 0 12
33551: PUSH
33552: LD_VAR 0 7
33556: ARRAY
33557: PUSH
33558: LD_INT 2
33560: ARRAY
33561: PPUSH
33562: CALL_OW 428
33566: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33567: LD_VAR 0 12
33571: PUSH
33572: LD_VAR 0 7
33576: ARRAY
33577: PUSH
33578: LD_INT 1
33580: ARRAY
33581: PPUSH
33582: LD_VAR 0 12
33586: PUSH
33587: LD_VAR 0 7
33591: ARRAY
33592: PUSH
33593: LD_INT 2
33595: ARRAY
33596: PPUSH
33597: CALL_OW 351
33601: PUSH
33602: LD_VAR 0 12
33606: PUSH
33607: LD_VAR 0 7
33611: ARRAY
33612: PUSH
33613: LD_INT 1
33615: ARRAY
33616: PPUSH
33617: LD_VAR 0 12
33621: PUSH
33622: LD_VAR 0 7
33626: ARRAY
33627: PUSH
33628: LD_INT 2
33630: ARRAY
33631: PPUSH
33632: CALL_OW 488
33636: NOT
33637: OR
33638: PUSH
33639: LD_VAR 0 11
33643: PPUSH
33644: CALL_OW 247
33648: PUSH
33649: LD_INT 3
33651: EQUAL
33652: OR
33653: IFFALSE 33659
// exit ;
33655: POP
33656: POP
33657: GO 34062
// if not tmp or not tmp in base then
33659: LD_VAR 0 11
33663: NOT
33664: PUSH
33665: LD_VAR 0 11
33669: PUSH
33670: LD_VAR 0 1
33674: IN
33675: NOT
33676: OR
33677: IFFALSE 33681
// continue ;
33679: GO 33524
// result := true ;
33681: LD_ADDR_VAR 0 6
33685: PUSH
33686: LD_INT 1
33688: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33689: LD_ADDR_VAR 0 15
33693: PUSH
33694: LD_VAR 0 1
33698: PPUSH
33699: LD_INT 22
33701: PUSH
33702: LD_VAR 0 11
33706: PPUSH
33707: CALL_OW 255
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 2
33718: PUSH
33719: LD_INT 30
33721: PUSH
33722: LD_INT 0
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 30
33731: PUSH
33732: LD_INT 1
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: LIST
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PPUSH
33748: CALL_OW 72
33752: ST_TO_ADDR
// if dep then
33753: LD_VAR 0 15
33757: IFFALSE 33893
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33759: LD_ADDR_VAR 0 14
33763: PUSH
33764: LD_VAR 0 15
33768: PUSH
33769: LD_INT 1
33771: ARRAY
33772: PPUSH
33773: CALL_OW 250
33777: PPUSH
33778: LD_VAR 0 15
33782: PUSH
33783: LD_INT 1
33785: ARRAY
33786: PPUSH
33787: CALL_OW 254
33791: PPUSH
33792: LD_INT 5
33794: PPUSH
33795: CALL_OW 272
33799: PUSH
33800: LD_VAR 0 15
33804: PUSH
33805: LD_INT 1
33807: ARRAY
33808: PPUSH
33809: CALL_OW 251
33813: PPUSH
33814: LD_VAR 0 15
33818: PUSH
33819: LD_INT 1
33821: ARRAY
33822: PPUSH
33823: CALL_OW 254
33827: PPUSH
33828: LD_INT 5
33830: PPUSH
33831: CALL_OW 273
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33840: LD_VAR 0 14
33844: PUSH
33845: LD_INT 1
33847: ARRAY
33848: PPUSH
33849: LD_VAR 0 14
33853: PUSH
33854: LD_INT 2
33856: ARRAY
33857: PPUSH
33858: CALL_OW 488
33862: IFFALSE 33893
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33864: LD_VAR 0 11
33868: PPUSH
33869: LD_VAR 0 14
33873: PUSH
33874: LD_INT 1
33876: ARRAY
33877: PPUSH
33878: LD_VAR 0 14
33882: PUSH
33883: LD_INT 2
33885: ARRAY
33886: PPUSH
33887: CALL_OW 111
// continue ;
33891: GO 33524
// end ; end ; r := GetDir ( tmp ) ;
33893: LD_ADDR_VAR 0 13
33897: PUSH
33898: LD_VAR 0 11
33902: PPUSH
33903: CALL_OW 254
33907: ST_TO_ADDR
// if r = 5 then
33908: LD_VAR 0 13
33912: PUSH
33913: LD_INT 5
33915: EQUAL
33916: IFFALSE 33926
// r := 0 ;
33918: LD_ADDR_VAR 0 13
33922: PUSH
33923: LD_INT 0
33925: ST_TO_ADDR
// for j = r to 5 do
33926: LD_ADDR_VAR 0 8
33930: PUSH
33931: DOUBLE
33932: LD_VAR 0 13
33936: DEC
33937: ST_TO_ADDR
33938: LD_INT 5
33940: PUSH
33941: FOR_TO
33942: IFFALSE 34056
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33944: LD_ADDR_VAR 0 9
33948: PUSH
33949: LD_VAR 0 11
33953: PPUSH
33954: CALL_OW 250
33958: PPUSH
33959: LD_VAR 0 8
33963: PPUSH
33964: LD_INT 2
33966: PPUSH
33967: CALL_OW 272
33971: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33972: LD_ADDR_VAR 0 10
33976: PUSH
33977: LD_VAR 0 11
33981: PPUSH
33982: CALL_OW 251
33986: PPUSH
33987: LD_VAR 0 8
33991: PPUSH
33992: LD_INT 2
33994: PPUSH
33995: CALL_OW 273
33999: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34000: LD_VAR 0 9
34004: PPUSH
34005: LD_VAR 0 10
34009: PPUSH
34010: CALL_OW 488
34014: PUSH
34015: LD_VAR 0 9
34019: PPUSH
34020: LD_VAR 0 10
34024: PPUSH
34025: CALL_OW 428
34029: NOT
34030: AND
34031: IFFALSE 34054
// begin ComMoveXY ( tmp , _x , _y ) ;
34033: LD_VAR 0 11
34037: PPUSH
34038: LD_VAR 0 9
34042: PPUSH
34043: LD_VAR 0 10
34047: PPUSH
34048: CALL_OW 111
// break ;
34052: GO 34056
// end ; end ;
34054: GO 33941
34056: POP
34057: POP
// end ;
34058: GO 33524
34060: POP
34061: POP
// end ;
34062: LD_VAR 0 6
34066: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
34067: LD_INT 0
34069: PPUSH
34070: PPUSH
34071: PPUSH
34072: PPUSH
34073: PPUSH
34074: PPUSH
34075: PPUSH
34076: PPUSH
34077: PPUSH
34078: PPUSH
// result := false ;
34079: LD_ADDR_VAR 0 6
34083: PUSH
34084: LD_INT 0
34086: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34087: LD_VAR 0 1
34091: NOT
34092: PUSH
34093: LD_VAR 0 1
34097: PPUSH
34098: CALL_OW 266
34102: PUSH
34103: LD_INT 0
34105: PUSH
34106: LD_INT 1
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: IN
34113: NOT
34114: OR
34115: PUSH
34116: LD_VAR 0 2
34120: NOT
34121: OR
34122: PUSH
34123: LD_VAR 0 5
34127: PUSH
34128: LD_INT 0
34130: PUSH
34131: LD_INT 1
34133: PUSH
34134: LD_INT 2
34136: PUSH
34137: LD_INT 3
34139: PUSH
34140: LD_INT 4
34142: PUSH
34143: LD_INT 5
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: IN
34154: NOT
34155: OR
34156: PUSH
34157: LD_VAR 0 3
34161: PPUSH
34162: LD_VAR 0 4
34166: PPUSH
34167: CALL_OW 488
34171: NOT
34172: OR
34173: IFFALSE 34177
// exit ;
34175: GO 34894
// pom := GetBase ( depot ) ;
34177: LD_ADDR_VAR 0 10
34181: PUSH
34182: LD_VAR 0 1
34186: PPUSH
34187: CALL_OW 274
34191: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34192: LD_ADDR_VAR 0 11
34196: PUSH
34197: LD_VAR 0 2
34201: PPUSH
34202: LD_VAR 0 1
34206: PPUSH
34207: CALL_OW 248
34211: PPUSH
34212: CALL_OW 450
34216: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34217: LD_VAR 0 10
34221: PPUSH
34222: LD_INT 1
34224: PPUSH
34225: CALL_OW 275
34229: PUSH
34230: LD_VAR 0 11
34234: PUSH
34235: LD_INT 1
34237: ARRAY
34238: GREATEREQUAL
34239: PUSH
34240: LD_VAR 0 10
34244: PPUSH
34245: LD_INT 2
34247: PPUSH
34248: CALL_OW 275
34252: PUSH
34253: LD_VAR 0 11
34257: PUSH
34258: LD_INT 2
34260: ARRAY
34261: GREATEREQUAL
34262: AND
34263: PUSH
34264: LD_VAR 0 10
34268: PPUSH
34269: LD_INT 3
34271: PPUSH
34272: CALL_OW 275
34276: PUSH
34277: LD_VAR 0 11
34281: PUSH
34282: LD_INT 3
34284: ARRAY
34285: GREATEREQUAL
34286: AND
34287: NOT
34288: IFFALSE 34292
// exit ;
34290: GO 34894
// if GetBType ( depot ) = b_depot then
34292: LD_VAR 0 1
34296: PPUSH
34297: CALL_OW 266
34301: PUSH
34302: LD_INT 0
34304: EQUAL
34305: IFFALSE 34317
// dist := 28 else
34307: LD_ADDR_VAR 0 14
34311: PUSH
34312: LD_INT 28
34314: ST_TO_ADDR
34315: GO 34325
// dist := 36 ;
34317: LD_ADDR_VAR 0 14
34321: PUSH
34322: LD_INT 36
34324: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34325: LD_VAR 0 1
34329: PPUSH
34330: LD_VAR 0 3
34334: PPUSH
34335: LD_VAR 0 4
34339: PPUSH
34340: CALL_OW 297
34344: PUSH
34345: LD_VAR 0 14
34349: GREATER
34350: IFFALSE 34354
// exit ;
34352: GO 34894
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34354: LD_ADDR_VAR 0 12
34358: PUSH
34359: LD_VAR 0 2
34363: PPUSH
34364: LD_VAR 0 3
34368: PPUSH
34369: LD_VAR 0 4
34373: PPUSH
34374: LD_VAR 0 5
34378: PPUSH
34379: LD_VAR 0 1
34383: PPUSH
34384: CALL_OW 248
34388: PPUSH
34389: LD_INT 0
34391: PPUSH
34392: CALL 34899 0 6
34396: ST_TO_ADDR
// if not hexes then
34397: LD_VAR 0 12
34401: NOT
34402: IFFALSE 34406
// exit ;
34404: GO 34894
// hex := GetHexInfo ( x , y ) ;
34406: LD_ADDR_VAR 0 15
34410: PUSH
34411: LD_VAR 0 3
34415: PPUSH
34416: LD_VAR 0 4
34420: PPUSH
34421: CALL_OW 546
34425: ST_TO_ADDR
// if hex [ 1 ] then
34426: LD_VAR 0 15
34430: PUSH
34431: LD_INT 1
34433: ARRAY
34434: IFFALSE 34438
// exit ;
34436: GO 34894
// height := hex [ 2 ] ;
34438: LD_ADDR_VAR 0 13
34442: PUSH
34443: LD_VAR 0 15
34447: PUSH
34448: LD_INT 2
34450: ARRAY
34451: ST_TO_ADDR
// for i = 1 to hexes do
34452: LD_ADDR_VAR 0 7
34456: PUSH
34457: DOUBLE
34458: LD_INT 1
34460: DEC
34461: ST_TO_ADDR
34462: LD_VAR 0 12
34466: PUSH
34467: FOR_TO
34468: IFFALSE 34798
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34470: LD_VAR 0 12
34474: PUSH
34475: LD_VAR 0 7
34479: ARRAY
34480: PUSH
34481: LD_INT 1
34483: ARRAY
34484: PPUSH
34485: LD_VAR 0 12
34489: PUSH
34490: LD_VAR 0 7
34494: ARRAY
34495: PUSH
34496: LD_INT 2
34498: ARRAY
34499: PPUSH
34500: CALL_OW 488
34504: NOT
34505: PUSH
34506: LD_VAR 0 12
34510: PUSH
34511: LD_VAR 0 7
34515: ARRAY
34516: PUSH
34517: LD_INT 1
34519: ARRAY
34520: PPUSH
34521: LD_VAR 0 12
34525: PUSH
34526: LD_VAR 0 7
34530: ARRAY
34531: PUSH
34532: LD_INT 2
34534: ARRAY
34535: PPUSH
34536: CALL_OW 428
34540: PUSH
34541: LD_INT 0
34543: GREATER
34544: OR
34545: PUSH
34546: LD_VAR 0 12
34550: PUSH
34551: LD_VAR 0 7
34555: ARRAY
34556: PUSH
34557: LD_INT 1
34559: ARRAY
34560: PPUSH
34561: LD_VAR 0 12
34565: PUSH
34566: LD_VAR 0 7
34570: ARRAY
34571: PUSH
34572: LD_INT 2
34574: ARRAY
34575: PPUSH
34576: CALL_OW 351
34580: OR
34581: IFFALSE 34587
// exit ;
34583: POP
34584: POP
34585: GO 34894
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34587: LD_ADDR_VAR 0 8
34591: PUSH
34592: LD_VAR 0 12
34596: PUSH
34597: LD_VAR 0 7
34601: ARRAY
34602: PUSH
34603: LD_INT 1
34605: ARRAY
34606: PPUSH
34607: LD_VAR 0 12
34611: PUSH
34612: LD_VAR 0 7
34616: ARRAY
34617: PUSH
34618: LD_INT 2
34620: ARRAY
34621: PPUSH
34622: CALL_OW 546
34626: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34627: LD_VAR 0 8
34631: PUSH
34632: LD_INT 1
34634: ARRAY
34635: PUSH
34636: LD_VAR 0 8
34640: PUSH
34641: LD_INT 2
34643: ARRAY
34644: PUSH
34645: LD_VAR 0 13
34649: PUSH
34650: LD_INT 2
34652: PLUS
34653: GREATER
34654: OR
34655: PUSH
34656: LD_VAR 0 8
34660: PUSH
34661: LD_INT 2
34663: ARRAY
34664: PUSH
34665: LD_VAR 0 13
34669: PUSH
34670: LD_INT 2
34672: MINUS
34673: LESS
34674: OR
34675: PUSH
34676: LD_VAR 0 8
34680: PUSH
34681: LD_INT 3
34683: ARRAY
34684: PUSH
34685: LD_INT 0
34687: PUSH
34688: LD_INT 8
34690: PUSH
34691: LD_INT 9
34693: PUSH
34694: LD_INT 10
34696: PUSH
34697: LD_INT 11
34699: PUSH
34700: LD_INT 12
34702: PUSH
34703: LD_INT 13
34705: PUSH
34706: LD_INT 16
34708: PUSH
34709: LD_INT 17
34711: PUSH
34712: LD_INT 18
34714: PUSH
34715: LD_INT 19
34717: PUSH
34718: LD_INT 20
34720: PUSH
34721: LD_INT 21
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: IN
34739: NOT
34740: OR
34741: PUSH
34742: LD_VAR 0 8
34746: PUSH
34747: LD_INT 5
34749: ARRAY
34750: NOT
34751: OR
34752: PUSH
34753: LD_VAR 0 8
34757: PUSH
34758: LD_INT 6
34760: ARRAY
34761: PUSH
34762: LD_INT 1
34764: PUSH
34765: LD_INT 2
34767: PUSH
34768: LD_INT 7
34770: PUSH
34771: LD_INT 9
34773: PUSH
34774: LD_INT 10
34776: PUSH
34777: LD_INT 11
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: IN
34788: NOT
34789: OR
34790: IFFALSE 34796
// exit ;
34792: POP
34793: POP
34794: GO 34894
// end ;
34796: GO 34467
34798: POP
34799: POP
// side := GetSide ( depot ) ;
34800: LD_ADDR_VAR 0 9
34804: PUSH
34805: LD_VAR 0 1
34809: PPUSH
34810: CALL_OW 255
34814: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34815: LD_VAR 0 9
34819: PPUSH
34820: LD_VAR 0 3
34824: PPUSH
34825: LD_VAR 0 4
34829: PPUSH
34830: LD_INT 20
34832: PPUSH
34833: CALL 27548 0 4
34837: PUSH
34838: LD_INT 4
34840: ARRAY
34841: IFFALSE 34845
// exit ;
34843: GO 34894
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34845: LD_VAR 0 2
34849: PUSH
34850: LD_INT 29
34852: PUSH
34853: LD_INT 30
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: IN
34860: PUSH
34861: LD_VAR 0 3
34865: PPUSH
34866: LD_VAR 0 4
34870: PPUSH
34871: LD_VAR 0 9
34875: PPUSH
34876: CALL_OW 440
34880: NOT
34881: AND
34882: IFFALSE 34886
// exit ;
34884: GO 34894
// result := true ;
34886: LD_ADDR_VAR 0 6
34890: PUSH
34891: LD_INT 1
34893: ST_TO_ADDR
// end ;
34894: LD_VAR 0 6
34898: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
34899: LD_INT 0
34901: PPUSH
34902: PPUSH
34903: PPUSH
34904: PPUSH
34905: PPUSH
34906: PPUSH
34907: PPUSH
34908: PPUSH
34909: PPUSH
34910: PPUSH
34911: PPUSH
34912: PPUSH
34913: PPUSH
34914: PPUSH
34915: PPUSH
34916: PPUSH
34917: PPUSH
34918: PPUSH
34919: PPUSH
34920: PPUSH
34921: PPUSH
34922: PPUSH
34923: PPUSH
34924: PPUSH
34925: PPUSH
34926: PPUSH
34927: PPUSH
34928: PPUSH
34929: PPUSH
34930: PPUSH
34931: PPUSH
34932: PPUSH
34933: PPUSH
34934: PPUSH
34935: PPUSH
34936: PPUSH
34937: PPUSH
34938: PPUSH
34939: PPUSH
34940: PPUSH
34941: PPUSH
34942: PPUSH
34943: PPUSH
34944: PPUSH
34945: PPUSH
34946: PPUSH
34947: PPUSH
34948: PPUSH
34949: PPUSH
34950: PPUSH
34951: PPUSH
34952: PPUSH
34953: PPUSH
34954: PPUSH
34955: PPUSH
34956: PPUSH
34957: PPUSH
34958: PPUSH
// result = [ ] ;
34959: LD_ADDR_VAR 0 7
34963: PUSH
34964: EMPTY
34965: ST_TO_ADDR
// temp_list = [ ] ;
34966: LD_ADDR_VAR 0 9
34970: PUSH
34971: EMPTY
34972: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34973: LD_VAR 0 4
34977: PUSH
34978: LD_INT 0
34980: PUSH
34981: LD_INT 1
34983: PUSH
34984: LD_INT 2
34986: PUSH
34987: LD_INT 3
34989: PUSH
34990: LD_INT 4
34992: PUSH
34993: LD_INT 5
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: IN
35004: NOT
35005: PUSH
35006: LD_VAR 0 1
35010: PUSH
35011: LD_INT 0
35013: PUSH
35014: LD_INT 1
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: IN
35021: PUSH
35022: LD_VAR 0 5
35026: PUSH
35027: LD_INT 1
35029: PUSH
35030: LD_INT 2
35032: PUSH
35033: LD_INT 3
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: LIST
35040: IN
35041: NOT
35042: AND
35043: OR
35044: IFFALSE 35048
// exit ;
35046: GO 53439
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35048: LD_VAR 0 1
35052: PUSH
35053: LD_INT 6
35055: PUSH
35056: LD_INT 7
35058: PUSH
35059: LD_INT 8
35061: PUSH
35062: LD_INT 13
35064: PUSH
35065: LD_INT 12
35067: PUSH
35068: LD_INT 15
35070: PUSH
35071: LD_INT 11
35073: PUSH
35074: LD_INT 14
35076: PUSH
35077: LD_INT 10
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: IN
35091: IFFALSE 35101
// btype = b_lab ;
35093: LD_ADDR_VAR 0 1
35097: PUSH
35098: LD_INT 6
35100: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35101: LD_VAR 0 6
35105: PUSH
35106: LD_INT 0
35108: PUSH
35109: LD_INT 1
35111: PUSH
35112: LD_INT 2
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: LIST
35119: IN
35120: NOT
35121: PUSH
35122: LD_VAR 0 1
35126: PUSH
35127: LD_INT 0
35129: PUSH
35130: LD_INT 1
35132: PUSH
35133: LD_INT 2
35135: PUSH
35136: LD_INT 3
35138: PUSH
35139: LD_INT 6
35141: PUSH
35142: LD_INT 36
35144: PUSH
35145: LD_INT 4
35147: PUSH
35148: LD_INT 5
35150: PUSH
35151: LD_INT 31
35153: PUSH
35154: LD_INT 32
35156: PUSH
35157: LD_INT 33
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: IN
35173: NOT
35174: PUSH
35175: LD_VAR 0 6
35179: PUSH
35180: LD_INT 1
35182: EQUAL
35183: AND
35184: OR
35185: PUSH
35186: LD_VAR 0 1
35190: PUSH
35191: LD_INT 2
35193: PUSH
35194: LD_INT 3
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: IN
35201: NOT
35202: PUSH
35203: LD_VAR 0 6
35207: PUSH
35208: LD_INT 2
35210: EQUAL
35211: AND
35212: OR
35213: IFFALSE 35223
// mode = 0 ;
35215: LD_ADDR_VAR 0 6
35219: PUSH
35220: LD_INT 0
35222: ST_TO_ADDR
// case mode of 0 :
35223: LD_VAR 0 6
35227: PUSH
35228: LD_INT 0
35230: DOUBLE
35231: EQUAL
35232: IFTRUE 35236
35234: GO 46689
35236: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35237: LD_ADDR_VAR 0 11
35241: PUSH
35242: LD_INT 0
35244: PUSH
35245: LD_INT 0
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 0
35254: PUSH
35255: LD_INT 1
35257: NEG
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 1
35265: PUSH
35266: LD_INT 0
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 1
35275: PUSH
35276: LD_INT 1
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 0
35285: PUSH
35286: LD_INT 1
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 1
35295: NEG
35296: PUSH
35297: LD_INT 0
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 1
35306: NEG
35307: PUSH
35308: LD_INT 1
35310: NEG
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 1
35318: NEG
35319: PUSH
35320: LD_INT 2
35322: NEG
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 0
35330: PUSH
35331: LD_INT 2
35333: NEG
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 1
35341: PUSH
35342: LD_INT 1
35344: NEG
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 1
35352: PUSH
35353: LD_INT 2
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 0
35362: PUSH
35363: LD_INT 2
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: LD_INT 1
35372: NEG
35373: PUSH
35374: LD_INT 1
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 1
35383: PUSH
35384: LD_INT 3
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 0
35393: PUSH
35394: LD_INT 3
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 1
35403: NEG
35404: PUSH
35405: LD_INT 2
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35430: LD_ADDR_VAR 0 12
35434: PUSH
35435: LD_INT 0
35437: PUSH
35438: LD_INT 0
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 0
35447: PUSH
35448: LD_INT 1
35450: NEG
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 1
35458: PUSH
35459: LD_INT 0
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 1
35468: PUSH
35469: LD_INT 1
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 0
35478: PUSH
35479: LD_INT 1
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 1
35488: NEG
35489: PUSH
35490: LD_INT 0
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 1
35499: NEG
35500: PUSH
35501: LD_INT 1
35503: NEG
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 1
35511: PUSH
35512: LD_INT 1
35514: NEG
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 2
35522: PUSH
35523: LD_INT 0
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 2
35532: PUSH
35533: LD_INT 1
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 1
35542: NEG
35543: PUSH
35544: LD_INT 1
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 2
35553: NEG
35554: PUSH
35555: LD_INT 0
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 2
35564: NEG
35565: PUSH
35566: LD_INT 1
35568: NEG
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 2
35576: NEG
35577: PUSH
35578: LD_INT 1
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 3
35587: NEG
35588: PUSH
35589: LD_INT 0
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 3
35598: NEG
35599: PUSH
35600: LD_INT 1
35602: NEG
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35626: LD_ADDR_VAR 0 13
35630: PUSH
35631: LD_INT 0
35633: PUSH
35634: LD_INT 0
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 0
35643: PUSH
35644: LD_INT 1
35646: NEG
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 1
35654: PUSH
35655: LD_INT 0
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 1
35664: PUSH
35665: LD_INT 1
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 0
35674: PUSH
35675: LD_INT 1
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 1
35684: NEG
35685: PUSH
35686: LD_INT 0
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 1
35695: NEG
35696: PUSH
35697: LD_INT 1
35699: NEG
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: LD_INT 1
35707: NEG
35708: PUSH
35709: LD_INT 2
35711: NEG
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 2
35719: PUSH
35720: LD_INT 1
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 2
35729: PUSH
35730: LD_INT 2
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 1
35739: PUSH
35740: LD_INT 2
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 2
35749: NEG
35750: PUSH
35751: LD_INT 1
35753: NEG
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 2
35761: NEG
35762: PUSH
35763: LD_INT 2
35765: NEG
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 2
35773: NEG
35774: PUSH
35775: LD_INT 3
35777: NEG
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 3
35785: NEG
35786: PUSH
35787: LD_INT 2
35789: NEG
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 3
35797: NEG
35798: PUSH
35799: LD_INT 3
35801: NEG
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35825: LD_ADDR_VAR 0 14
35829: PUSH
35830: LD_INT 0
35832: PUSH
35833: LD_INT 0
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 0
35842: PUSH
35843: LD_INT 1
35845: NEG
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 1
35853: PUSH
35854: LD_INT 0
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 1
35863: PUSH
35864: LD_INT 1
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 0
35873: PUSH
35874: LD_INT 1
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 1
35883: NEG
35884: PUSH
35885: LD_INT 0
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 1
35894: NEG
35895: PUSH
35896: LD_INT 1
35898: NEG
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 1
35906: NEG
35907: PUSH
35908: LD_INT 2
35910: NEG
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 0
35918: PUSH
35919: LD_INT 2
35921: NEG
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 1
35929: PUSH
35930: LD_INT 1
35932: NEG
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 1
35940: PUSH
35941: LD_INT 2
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 0
35950: PUSH
35951: LD_INT 2
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 1
35960: NEG
35961: PUSH
35962: LD_INT 1
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 1
35971: NEG
35972: PUSH
35973: LD_INT 3
35975: NEG
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 0
35983: PUSH
35984: LD_INT 3
35986: NEG
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 1
35994: PUSH
35995: LD_INT 2
35997: NEG
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36021: LD_ADDR_VAR 0 15
36025: PUSH
36026: LD_INT 0
36028: PUSH
36029: LD_INT 0
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 0
36038: PUSH
36039: LD_INT 1
36041: NEG
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 1
36049: PUSH
36050: LD_INT 0
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 1
36059: PUSH
36060: LD_INT 1
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 0
36069: PUSH
36070: LD_INT 1
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: PUSH
36077: LD_INT 1
36079: NEG
36080: PUSH
36081: LD_INT 0
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: PUSH
36088: LD_INT 1
36090: NEG
36091: PUSH
36092: LD_INT 1
36094: NEG
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 1
36102: PUSH
36103: LD_INT 1
36105: NEG
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 2
36113: PUSH
36114: LD_INT 0
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 2
36123: PUSH
36124: LD_INT 1
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 1
36133: NEG
36134: PUSH
36135: LD_INT 1
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 2
36144: NEG
36145: PUSH
36146: LD_INT 0
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: LD_INT 2
36155: NEG
36156: PUSH
36157: LD_INT 1
36159: NEG
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: LD_INT 2
36167: PUSH
36168: LD_INT 1
36170: NEG
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 3
36178: PUSH
36179: LD_INT 0
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 3
36188: PUSH
36189: LD_INT 1
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36214: LD_ADDR_VAR 0 16
36218: PUSH
36219: LD_INT 0
36221: PUSH
36222: LD_INT 0
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 0
36231: PUSH
36232: LD_INT 1
36234: NEG
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 1
36242: PUSH
36243: LD_INT 0
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 1
36252: PUSH
36253: LD_INT 1
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 0
36262: PUSH
36263: LD_INT 1
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 1
36272: NEG
36273: PUSH
36274: LD_INT 0
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 1
36283: NEG
36284: PUSH
36285: LD_INT 1
36287: NEG
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 1
36295: NEG
36296: PUSH
36297: LD_INT 2
36299: NEG
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 2
36307: PUSH
36308: LD_INT 1
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 2
36317: PUSH
36318: LD_INT 2
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 1
36327: PUSH
36328: LD_INT 2
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 2
36337: NEG
36338: PUSH
36339: LD_INT 1
36341: NEG
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 2
36349: NEG
36350: PUSH
36351: LD_INT 2
36353: NEG
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 3
36361: PUSH
36362: LD_INT 2
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 3
36371: PUSH
36372: LD_INT 3
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 2
36381: PUSH
36382: LD_INT 3
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36407: LD_ADDR_VAR 0 17
36411: PUSH
36412: LD_INT 0
36414: PUSH
36415: LD_INT 0
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 0
36424: PUSH
36425: LD_INT 1
36427: NEG
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 1
36435: PUSH
36436: LD_INT 0
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 1
36445: PUSH
36446: LD_INT 1
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 0
36455: PUSH
36456: LD_INT 1
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 1
36465: NEG
36466: PUSH
36467: LD_INT 0
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 1
36476: NEG
36477: PUSH
36478: LD_INT 1
36480: NEG
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 1
36488: NEG
36489: PUSH
36490: LD_INT 2
36492: NEG
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PUSH
36498: LD_INT 0
36500: PUSH
36501: LD_INT 2
36503: NEG
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 1
36511: PUSH
36512: LD_INT 1
36514: NEG
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 2
36522: PUSH
36523: LD_INT 0
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 2
36532: PUSH
36533: LD_INT 1
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 2
36542: PUSH
36543: LD_INT 2
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 1
36552: PUSH
36553: LD_INT 2
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 0
36562: PUSH
36563: LD_INT 2
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 1
36572: NEG
36573: PUSH
36574: LD_INT 1
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 2
36583: NEG
36584: PUSH
36585: LD_INT 0
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 2
36594: NEG
36595: PUSH
36596: LD_INT 1
36598: NEG
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 2
36606: NEG
36607: PUSH
36608: LD_INT 2
36610: NEG
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36637: LD_ADDR_VAR 0 18
36641: PUSH
36642: LD_INT 0
36644: PUSH
36645: LD_INT 0
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 0
36654: PUSH
36655: LD_INT 1
36657: NEG
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 1
36665: PUSH
36666: LD_INT 0
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 1
36675: PUSH
36676: LD_INT 1
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: LD_INT 1
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 1
36695: NEG
36696: PUSH
36697: LD_INT 0
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 1
36706: NEG
36707: PUSH
36708: LD_INT 1
36710: NEG
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 1
36718: NEG
36719: PUSH
36720: LD_INT 2
36722: NEG
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 0
36730: PUSH
36731: LD_INT 2
36733: NEG
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 1
36741: PUSH
36742: LD_INT 1
36744: NEG
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 2
36752: PUSH
36753: LD_INT 0
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 2
36762: PUSH
36763: LD_INT 1
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 2
36772: PUSH
36773: LD_INT 2
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 1
36782: PUSH
36783: LD_INT 2
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 0
36792: PUSH
36793: LD_INT 2
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 1
36802: NEG
36803: PUSH
36804: LD_INT 1
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 2
36813: NEG
36814: PUSH
36815: LD_INT 0
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 2
36824: NEG
36825: PUSH
36826: LD_INT 1
36828: NEG
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 2
36836: NEG
36837: PUSH
36838: LD_INT 2
36840: NEG
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36867: LD_ADDR_VAR 0 19
36871: PUSH
36872: LD_INT 0
36874: PUSH
36875: LD_INT 0
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 0
36884: PUSH
36885: LD_INT 1
36887: NEG
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 1
36895: PUSH
36896: LD_INT 0
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 1
36905: PUSH
36906: LD_INT 1
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 0
36915: PUSH
36916: LD_INT 1
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 1
36925: NEG
36926: PUSH
36927: LD_INT 0
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 1
36936: NEG
36937: PUSH
36938: LD_INT 1
36940: NEG
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 1
36948: NEG
36949: PUSH
36950: LD_INT 2
36952: NEG
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 0
36960: PUSH
36961: LD_INT 2
36963: NEG
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 1
36971: PUSH
36972: LD_INT 1
36974: NEG
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 2
36982: PUSH
36983: LD_INT 0
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 2
36992: PUSH
36993: LD_INT 1
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 2
37002: PUSH
37003: LD_INT 2
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 1
37012: PUSH
37013: LD_INT 2
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 0
37022: PUSH
37023: LD_INT 2
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 1
37032: NEG
37033: PUSH
37034: LD_INT 1
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 2
37043: NEG
37044: PUSH
37045: LD_INT 0
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 2
37054: NEG
37055: PUSH
37056: LD_INT 1
37058: NEG
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 2
37066: NEG
37067: PUSH
37068: LD_INT 2
37070: NEG
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37097: LD_ADDR_VAR 0 20
37101: PUSH
37102: LD_INT 0
37104: PUSH
37105: LD_INT 0
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 0
37114: PUSH
37115: LD_INT 1
37117: NEG
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 1
37125: PUSH
37126: LD_INT 0
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 1
37135: PUSH
37136: LD_INT 1
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 0
37145: PUSH
37146: LD_INT 1
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 1
37155: NEG
37156: PUSH
37157: LD_INT 0
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 1
37166: NEG
37167: PUSH
37168: LD_INT 1
37170: NEG
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 1
37178: NEG
37179: PUSH
37180: LD_INT 2
37182: NEG
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 0
37190: PUSH
37191: LD_INT 2
37193: NEG
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 1
37201: PUSH
37202: LD_INT 1
37204: NEG
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 2
37212: PUSH
37213: LD_INT 0
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 2
37222: PUSH
37223: LD_INT 1
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 2
37232: PUSH
37233: LD_INT 2
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 1
37242: PUSH
37243: LD_INT 2
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 0
37252: PUSH
37253: LD_INT 2
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 1
37262: NEG
37263: PUSH
37264: LD_INT 1
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 2
37273: NEG
37274: PUSH
37275: LD_INT 0
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 2
37284: NEG
37285: PUSH
37286: LD_INT 1
37288: NEG
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 2
37296: NEG
37297: PUSH
37298: LD_INT 2
37300: NEG
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37327: LD_ADDR_VAR 0 21
37331: PUSH
37332: LD_INT 0
37334: PUSH
37335: LD_INT 0
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 0
37344: PUSH
37345: LD_INT 1
37347: NEG
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: LD_INT 1
37355: PUSH
37356: LD_INT 0
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 1
37365: PUSH
37366: LD_INT 1
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 0
37375: PUSH
37376: LD_INT 1
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 1
37385: NEG
37386: PUSH
37387: LD_INT 0
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 1
37396: NEG
37397: PUSH
37398: LD_INT 1
37400: NEG
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 1
37408: NEG
37409: PUSH
37410: LD_INT 2
37412: NEG
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 0
37420: PUSH
37421: LD_INT 2
37423: NEG
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 1
37431: PUSH
37432: LD_INT 1
37434: NEG
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 2
37442: PUSH
37443: LD_INT 0
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 2
37452: PUSH
37453: LD_INT 1
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 2
37462: PUSH
37463: LD_INT 2
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 1
37472: PUSH
37473: LD_INT 2
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 0
37482: PUSH
37483: LD_INT 2
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 1
37492: NEG
37493: PUSH
37494: LD_INT 1
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 2
37503: NEG
37504: PUSH
37505: LD_INT 0
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 2
37514: NEG
37515: PUSH
37516: LD_INT 1
37518: NEG
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 2
37526: NEG
37527: PUSH
37528: LD_INT 2
37530: NEG
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37557: LD_ADDR_VAR 0 22
37561: PUSH
37562: LD_INT 0
37564: PUSH
37565: LD_INT 0
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 0
37574: PUSH
37575: LD_INT 1
37577: NEG
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 1
37585: PUSH
37586: LD_INT 0
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 1
37595: PUSH
37596: LD_INT 1
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 0
37605: PUSH
37606: LD_INT 1
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 1
37615: NEG
37616: PUSH
37617: LD_INT 0
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 1
37626: NEG
37627: PUSH
37628: LD_INT 1
37630: NEG
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 1
37638: NEG
37639: PUSH
37640: LD_INT 2
37642: NEG
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 0
37650: PUSH
37651: LD_INT 2
37653: NEG
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 1
37661: PUSH
37662: LD_INT 1
37664: NEG
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 2
37672: PUSH
37673: LD_INT 0
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 2
37682: PUSH
37683: LD_INT 1
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 2
37692: PUSH
37693: LD_INT 2
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 1
37702: PUSH
37703: LD_INT 2
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 0
37712: PUSH
37713: LD_INT 2
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 1
37722: NEG
37723: PUSH
37724: LD_INT 1
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 2
37733: NEG
37734: PUSH
37735: LD_INT 0
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 2
37744: NEG
37745: PUSH
37746: LD_INT 1
37748: NEG
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 2
37756: NEG
37757: PUSH
37758: LD_INT 2
37760: NEG
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37787: LD_ADDR_VAR 0 23
37791: PUSH
37792: LD_INT 0
37794: PUSH
37795: LD_INT 0
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 0
37804: PUSH
37805: LD_INT 1
37807: NEG
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 1
37815: PUSH
37816: LD_INT 0
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 1
37825: PUSH
37826: LD_INT 1
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 0
37835: PUSH
37836: LD_INT 1
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 1
37845: NEG
37846: PUSH
37847: LD_INT 0
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 1
37856: NEG
37857: PUSH
37858: LD_INT 1
37860: NEG
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 1
37868: NEG
37869: PUSH
37870: LD_INT 2
37872: NEG
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 0
37880: PUSH
37881: LD_INT 2
37883: NEG
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 1
37891: PUSH
37892: LD_INT 1
37894: NEG
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 2
37902: PUSH
37903: LD_INT 0
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 2
37912: PUSH
37913: LD_INT 1
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 2
37922: PUSH
37923: LD_INT 2
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 1
37932: PUSH
37933: LD_INT 2
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 0
37942: PUSH
37943: LD_INT 2
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 1
37952: NEG
37953: PUSH
37954: LD_INT 1
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 2
37963: NEG
37964: PUSH
37965: LD_INT 0
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 2
37974: NEG
37975: PUSH
37976: LD_INT 1
37978: NEG
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 2
37986: NEG
37987: PUSH
37988: LD_INT 2
37990: NEG
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 2
37998: NEG
37999: PUSH
38000: LD_INT 3
38002: NEG
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 1
38010: NEG
38011: PUSH
38012: LD_INT 3
38014: NEG
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 1
38022: PUSH
38023: LD_INT 2
38025: NEG
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 2
38033: PUSH
38034: LD_INT 1
38036: NEG
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38067: LD_ADDR_VAR 0 24
38071: PUSH
38072: LD_INT 0
38074: PUSH
38075: LD_INT 0
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: LD_INT 1
38087: NEG
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 1
38095: PUSH
38096: LD_INT 0
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 1
38105: PUSH
38106: LD_INT 1
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 0
38115: PUSH
38116: LD_INT 1
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 1
38125: NEG
38126: PUSH
38127: LD_INT 0
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 1
38136: NEG
38137: PUSH
38138: LD_INT 1
38140: NEG
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 1
38148: NEG
38149: PUSH
38150: LD_INT 2
38152: NEG
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 0
38160: PUSH
38161: LD_INT 2
38163: NEG
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 1
38171: PUSH
38172: LD_INT 1
38174: NEG
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 2
38182: PUSH
38183: LD_INT 0
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 2
38192: PUSH
38193: LD_INT 1
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 2
38202: PUSH
38203: LD_INT 2
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 1
38212: PUSH
38213: LD_INT 2
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 0
38222: PUSH
38223: LD_INT 2
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 1
38232: NEG
38233: PUSH
38234: LD_INT 1
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 2
38243: NEG
38244: PUSH
38245: LD_INT 0
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: LD_INT 2
38254: NEG
38255: PUSH
38256: LD_INT 1
38258: NEG
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 2
38266: NEG
38267: PUSH
38268: LD_INT 2
38270: NEG
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 1
38278: PUSH
38279: LD_INT 2
38281: NEG
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 2
38289: PUSH
38290: LD_INT 1
38292: NEG
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 3
38300: PUSH
38301: LD_INT 1
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 3
38310: PUSH
38311: LD_INT 2
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38343: LD_ADDR_VAR 0 25
38347: PUSH
38348: LD_INT 0
38350: PUSH
38351: LD_INT 0
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 0
38360: PUSH
38361: LD_INT 1
38363: NEG
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 1
38371: PUSH
38372: LD_INT 0
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 1
38381: PUSH
38382: LD_INT 1
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 0
38391: PUSH
38392: LD_INT 1
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 1
38401: NEG
38402: PUSH
38403: LD_INT 0
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 1
38412: NEG
38413: PUSH
38414: LD_INT 1
38416: NEG
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 1
38424: NEG
38425: PUSH
38426: LD_INT 2
38428: NEG
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: LD_INT 0
38436: PUSH
38437: LD_INT 2
38439: NEG
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 1
38447: PUSH
38448: LD_INT 1
38450: NEG
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 2
38458: PUSH
38459: LD_INT 0
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 2
38468: PUSH
38469: LD_INT 1
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: PUSH
38476: LD_INT 2
38478: PUSH
38479: LD_INT 2
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 1
38488: PUSH
38489: LD_INT 2
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 0
38498: PUSH
38499: LD_INT 2
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 1
38508: NEG
38509: PUSH
38510: LD_INT 1
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 2
38519: NEG
38520: PUSH
38521: LD_INT 0
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 2
38530: NEG
38531: PUSH
38532: LD_INT 1
38534: NEG
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: LD_INT 2
38542: NEG
38543: PUSH
38544: LD_INT 2
38546: NEG
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 3
38554: PUSH
38555: LD_INT 1
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 3
38564: PUSH
38565: LD_INT 2
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 2
38574: PUSH
38575: LD_INT 3
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 1
38584: PUSH
38585: LD_INT 3
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38617: LD_ADDR_VAR 0 26
38621: PUSH
38622: LD_INT 0
38624: PUSH
38625: LD_INT 0
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 0
38634: PUSH
38635: LD_INT 1
38637: NEG
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 1
38645: PUSH
38646: LD_INT 0
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 1
38655: PUSH
38656: LD_INT 1
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 0
38665: PUSH
38666: LD_INT 1
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 1
38675: NEG
38676: PUSH
38677: LD_INT 0
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 1
38686: NEG
38687: PUSH
38688: LD_INT 1
38690: NEG
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 1
38698: NEG
38699: PUSH
38700: LD_INT 2
38702: NEG
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 0
38710: PUSH
38711: LD_INT 2
38713: NEG
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 1
38721: PUSH
38722: LD_INT 1
38724: NEG
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 2
38732: PUSH
38733: LD_INT 0
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 2
38742: PUSH
38743: LD_INT 1
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 2
38752: PUSH
38753: LD_INT 2
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 1
38762: PUSH
38763: LD_INT 2
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 0
38772: PUSH
38773: LD_INT 2
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 1
38782: NEG
38783: PUSH
38784: LD_INT 1
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 2
38793: NEG
38794: PUSH
38795: LD_INT 0
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 2
38804: NEG
38805: PUSH
38806: LD_INT 1
38808: NEG
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 2
38816: NEG
38817: PUSH
38818: LD_INT 2
38820: NEG
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 2
38828: PUSH
38829: LD_INT 3
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 1
38838: PUSH
38839: LD_INT 3
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 1
38848: NEG
38849: PUSH
38850: LD_INT 2
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 2
38859: NEG
38860: PUSH
38861: LD_INT 1
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38893: LD_ADDR_VAR 0 27
38897: PUSH
38898: LD_INT 0
38900: PUSH
38901: LD_INT 0
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 0
38910: PUSH
38911: LD_INT 1
38913: NEG
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 1
38921: PUSH
38922: LD_INT 0
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 1
38931: PUSH
38932: LD_INT 1
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 0
38941: PUSH
38942: LD_INT 1
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 1
38951: NEG
38952: PUSH
38953: LD_INT 0
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 1
38962: NEG
38963: PUSH
38964: LD_INT 1
38966: NEG
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 1
38974: NEG
38975: PUSH
38976: LD_INT 2
38978: NEG
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 0
38986: PUSH
38987: LD_INT 2
38989: NEG
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 1
38997: PUSH
38998: LD_INT 1
39000: NEG
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 2
39008: PUSH
39009: LD_INT 0
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 2
39018: PUSH
39019: LD_INT 1
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 2
39028: PUSH
39029: LD_INT 2
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 1
39038: PUSH
39039: LD_INT 2
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 0
39048: PUSH
39049: LD_INT 2
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 1
39058: NEG
39059: PUSH
39060: LD_INT 1
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 2
39069: NEG
39070: PUSH
39071: LD_INT 0
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 2
39080: NEG
39081: PUSH
39082: LD_INT 1
39084: NEG
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 2
39092: NEG
39093: PUSH
39094: LD_INT 2
39096: NEG
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 1
39104: NEG
39105: PUSH
39106: LD_INT 2
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 2
39115: NEG
39116: PUSH
39117: LD_INT 1
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 3
39126: NEG
39127: PUSH
39128: LD_INT 1
39130: NEG
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 3
39138: NEG
39139: PUSH
39140: LD_INT 2
39142: NEG
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39173: LD_ADDR_VAR 0 28
39177: PUSH
39178: LD_INT 0
39180: PUSH
39181: LD_INT 0
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 0
39190: PUSH
39191: LD_INT 1
39193: NEG
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 1
39201: PUSH
39202: LD_INT 0
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 1
39211: PUSH
39212: LD_INT 1
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 0
39221: PUSH
39222: LD_INT 1
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 1
39231: NEG
39232: PUSH
39233: LD_INT 0
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 1
39242: NEG
39243: PUSH
39244: LD_INT 1
39246: NEG
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 1
39254: NEG
39255: PUSH
39256: LD_INT 2
39258: NEG
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 0
39266: PUSH
39267: LD_INT 2
39269: NEG
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 1
39277: PUSH
39278: LD_INT 1
39280: NEG
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 2
39288: PUSH
39289: LD_INT 0
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 2
39298: PUSH
39299: LD_INT 1
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 2
39308: PUSH
39309: LD_INT 2
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 1
39318: PUSH
39319: LD_INT 2
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 0
39328: PUSH
39329: LD_INT 2
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 1
39338: NEG
39339: PUSH
39340: LD_INT 1
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 2
39349: NEG
39350: PUSH
39351: LD_INT 0
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 2
39360: NEG
39361: PUSH
39362: LD_INT 1
39364: NEG
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 2
39372: NEG
39373: PUSH
39374: LD_INT 2
39376: NEG
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 2
39384: NEG
39385: PUSH
39386: LD_INT 3
39388: NEG
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 1
39396: NEG
39397: PUSH
39398: LD_INT 3
39400: NEG
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 3
39408: NEG
39409: PUSH
39410: LD_INT 1
39412: NEG
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 3
39420: NEG
39421: PUSH
39422: LD_INT 2
39424: NEG
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39455: LD_ADDR_VAR 0 29
39459: PUSH
39460: LD_INT 0
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 0
39472: PUSH
39473: LD_INT 1
39475: NEG
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 1
39483: PUSH
39484: LD_INT 0
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 1
39493: PUSH
39494: LD_INT 1
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: LD_INT 1
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 1
39513: NEG
39514: PUSH
39515: LD_INT 0
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 1
39524: NEG
39525: PUSH
39526: LD_INT 1
39528: NEG
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 1
39536: NEG
39537: PUSH
39538: LD_INT 2
39540: NEG
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 0
39548: PUSH
39549: LD_INT 2
39551: NEG
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 1
39559: PUSH
39560: LD_INT 1
39562: NEG
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 2
39570: PUSH
39571: LD_INT 0
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 2
39580: PUSH
39581: LD_INT 1
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 1
39590: PUSH
39591: LD_INT 2
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 0
39600: PUSH
39601: LD_INT 2
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 1
39610: NEG
39611: PUSH
39612: LD_INT 1
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 2
39621: NEG
39622: PUSH
39623: LD_INT 1
39625: NEG
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 2
39633: NEG
39634: PUSH
39635: LD_INT 2
39637: NEG
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 2
39645: NEG
39646: PUSH
39647: LD_INT 3
39649: NEG
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 2
39657: PUSH
39658: LD_INT 1
39660: NEG
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 3
39668: PUSH
39669: LD_INT 1
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 1
39678: PUSH
39679: LD_INT 3
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 1
39688: NEG
39689: PUSH
39690: LD_INT 2
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 3
39699: NEG
39700: PUSH
39701: LD_INT 2
39703: NEG
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39734: LD_ADDR_VAR 0 30
39738: PUSH
39739: LD_INT 0
39741: PUSH
39742: LD_INT 0
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 0
39751: PUSH
39752: LD_INT 1
39754: NEG
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 1
39762: PUSH
39763: LD_INT 0
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 1
39772: PUSH
39773: LD_INT 1
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 0
39782: PUSH
39783: LD_INT 1
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 1
39792: NEG
39793: PUSH
39794: LD_INT 0
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 1
39803: NEG
39804: PUSH
39805: LD_INT 1
39807: NEG
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 1
39815: NEG
39816: PUSH
39817: LD_INT 2
39819: NEG
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 0
39827: PUSH
39828: LD_INT 2
39830: NEG
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 1
39838: PUSH
39839: LD_INT 1
39841: NEG
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 2
39849: PUSH
39850: LD_INT 0
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 2
39859: PUSH
39860: LD_INT 1
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 2
39869: PUSH
39870: LD_INT 2
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 1
39879: PUSH
39880: LD_INT 2
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 1
39889: NEG
39890: PUSH
39891: LD_INT 1
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 2
39900: NEG
39901: PUSH
39902: LD_INT 0
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 2
39911: NEG
39912: PUSH
39913: LD_INT 1
39915: NEG
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 1
39923: NEG
39924: PUSH
39925: LD_INT 3
39927: NEG
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 1
39935: PUSH
39936: LD_INT 2
39938: NEG
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 3
39946: PUSH
39947: LD_INT 2
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 2
39956: PUSH
39957: LD_INT 3
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 2
39966: NEG
39967: PUSH
39968: LD_INT 1
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 3
39977: NEG
39978: PUSH
39979: LD_INT 1
39981: NEG
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40012: LD_ADDR_VAR 0 31
40016: PUSH
40017: LD_INT 0
40019: PUSH
40020: LD_INT 0
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: LD_INT 1
40032: NEG
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 1
40040: PUSH
40041: LD_INT 0
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 1
40050: PUSH
40051: LD_INT 1
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 0
40060: PUSH
40061: LD_INT 1
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 1
40070: NEG
40071: PUSH
40072: LD_INT 0
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 1
40081: NEG
40082: PUSH
40083: LD_INT 1
40085: NEG
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 1
40093: NEG
40094: PUSH
40095: LD_INT 2
40097: NEG
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 1
40105: PUSH
40106: LD_INT 1
40108: NEG
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 2
40116: PUSH
40117: LD_INT 0
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 2
40126: PUSH
40127: LD_INT 1
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 2
40136: PUSH
40137: LD_INT 2
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 1
40146: PUSH
40147: LD_INT 2
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 0
40156: PUSH
40157: LD_INT 2
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 1
40166: NEG
40167: PUSH
40168: LD_INT 1
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 2
40177: NEG
40178: PUSH
40179: LD_INT 1
40181: NEG
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 2
40189: NEG
40190: PUSH
40191: LD_INT 2
40193: NEG
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 2
40201: NEG
40202: PUSH
40203: LD_INT 3
40205: NEG
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 2
40213: PUSH
40214: LD_INT 1
40216: NEG
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 3
40224: PUSH
40225: LD_INT 1
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 1
40234: PUSH
40235: LD_INT 3
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 1
40244: NEG
40245: PUSH
40246: LD_INT 2
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 3
40255: NEG
40256: PUSH
40257: LD_INT 2
40259: NEG
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40290: LD_ADDR_VAR 0 32
40294: PUSH
40295: LD_INT 0
40297: PUSH
40298: LD_INT 0
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: LD_INT 1
40310: NEG
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 1
40318: PUSH
40319: LD_INT 0
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 1
40328: PUSH
40329: LD_INT 1
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 0
40338: PUSH
40339: LD_INT 1
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 1
40348: NEG
40349: PUSH
40350: LD_INT 0
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 1
40359: NEG
40360: PUSH
40361: LD_INT 1
40363: NEG
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: LD_INT 2
40375: NEG
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 0
40383: PUSH
40384: LD_INT 2
40386: NEG
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 1
40394: PUSH
40395: LD_INT 1
40397: NEG
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 2
40405: PUSH
40406: LD_INT 1
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 2
40415: PUSH
40416: LD_INT 2
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 1
40425: PUSH
40426: LD_INT 2
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 0
40435: PUSH
40436: LD_INT 2
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 1
40445: NEG
40446: PUSH
40447: LD_INT 1
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 2
40456: NEG
40457: PUSH
40458: LD_INT 0
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 2
40467: NEG
40468: PUSH
40469: LD_INT 1
40471: NEG
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 1
40479: NEG
40480: PUSH
40481: LD_INT 3
40483: NEG
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 1
40491: PUSH
40492: LD_INT 2
40494: NEG
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 3
40502: PUSH
40503: LD_INT 2
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 2
40512: PUSH
40513: LD_INT 3
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 2
40522: NEG
40523: PUSH
40524: LD_INT 1
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 3
40533: NEG
40534: PUSH
40535: LD_INT 1
40537: NEG
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40568: LD_ADDR_VAR 0 33
40572: PUSH
40573: LD_INT 0
40575: PUSH
40576: LD_INT 0
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: LD_INT 1
40588: NEG
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 1
40596: PUSH
40597: LD_INT 0
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: LD_INT 1
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 0
40616: PUSH
40617: LD_INT 1
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 1
40626: NEG
40627: PUSH
40628: LD_INT 0
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 1
40637: NEG
40638: PUSH
40639: LD_INT 1
40641: NEG
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 1
40649: NEG
40650: PUSH
40651: LD_INT 2
40653: NEG
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 1
40661: PUSH
40662: LD_INT 1
40664: NEG
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 2
40672: PUSH
40673: LD_INT 0
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 2
40682: PUSH
40683: LD_INT 1
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 1
40692: PUSH
40693: LD_INT 2
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 0
40702: PUSH
40703: LD_INT 2
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 1
40712: NEG
40713: PUSH
40714: LD_INT 1
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 2
40723: NEG
40724: PUSH
40725: LD_INT 0
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 2
40734: NEG
40735: PUSH
40736: LD_INT 1
40738: NEG
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 2
40746: NEG
40747: PUSH
40748: LD_INT 2
40750: NEG
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 2
40758: NEG
40759: PUSH
40760: LD_INT 3
40762: NEG
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 2
40770: PUSH
40771: LD_INT 1
40773: NEG
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 3
40781: PUSH
40782: LD_INT 1
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 1
40791: PUSH
40792: LD_INT 3
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 1
40801: NEG
40802: PUSH
40803: LD_INT 2
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 3
40812: NEG
40813: PUSH
40814: LD_INT 2
40816: NEG
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40847: LD_ADDR_VAR 0 34
40851: PUSH
40852: LD_INT 0
40854: PUSH
40855: LD_INT 0
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 0
40864: PUSH
40865: LD_INT 1
40867: NEG
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 1
40875: PUSH
40876: LD_INT 0
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 1
40885: PUSH
40886: LD_INT 1
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 0
40895: PUSH
40896: LD_INT 1
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 1
40905: NEG
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 1
40916: NEG
40917: PUSH
40918: LD_INT 1
40920: NEG
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 1
40928: NEG
40929: PUSH
40930: LD_INT 2
40932: NEG
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 0
40940: PUSH
40941: LD_INT 2
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 1
40951: PUSH
40952: LD_INT 1
40954: NEG
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 2
40962: PUSH
40963: LD_INT 1
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 2
40972: PUSH
40973: LD_INT 2
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 1
40982: PUSH
40983: LD_INT 2
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 1
40992: NEG
40993: PUSH
40994: LD_INT 1
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 2
41003: NEG
41004: PUSH
41005: LD_INT 0
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 2
41014: NEG
41015: PUSH
41016: LD_INT 1
41018: NEG
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 2
41026: NEG
41027: PUSH
41028: LD_INT 2
41030: NEG
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 1
41038: NEG
41039: PUSH
41040: LD_INT 3
41042: NEG
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 1
41050: PUSH
41051: LD_INT 2
41053: NEG
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 3
41061: PUSH
41062: LD_INT 2
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 2
41071: PUSH
41072: LD_INT 3
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 2
41081: NEG
41082: PUSH
41083: LD_INT 1
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 3
41092: NEG
41093: PUSH
41094: LD_INT 1
41096: NEG
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41127: LD_ADDR_VAR 0 35
41131: PUSH
41132: LD_INT 0
41134: PUSH
41135: LD_INT 0
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: LD_INT 1
41147: NEG
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 1
41155: PUSH
41156: LD_INT 0
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 1
41165: PUSH
41166: LD_INT 1
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 0
41175: PUSH
41176: LD_INT 1
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 1
41185: NEG
41186: PUSH
41187: LD_INT 0
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 1
41196: NEG
41197: PUSH
41198: LD_INT 1
41200: NEG
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 2
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 2
41218: NEG
41219: PUSH
41220: LD_INT 1
41222: NEG
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41239: LD_ADDR_VAR 0 36
41243: PUSH
41244: LD_INT 0
41246: PUSH
41247: LD_INT 0
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 0
41256: PUSH
41257: LD_INT 1
41259: NEG
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 1
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 1
41277: PUSH
41278: LD_INT 1
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 0
41287: PUSH
41288: LD_INT 1
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 1
41297: NEG
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 1
41308: NEG
41309: PUSH
41310: LD_INT 1
41312: NEG
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 1
41320: NEG
41321: PUSH
41322: LD_INT 2
41324: NEG
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: LD_INT 2
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41351: LD_ADDR_VAR 0 37
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: LD_INT 0
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 0
41368: PUSH
41369: LD_INT 1
41371: NEG
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 1
41379: PUSH
41380: LD_INT 0
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: PUSH
41390: LD_INT 1
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 0
41399: PUSH
41400: LD_INT 1
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 1
41409: NEG
41410: PUSH
41411: LD_INT 0
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 1
41420: NEG
41421: PUSH
41422: LD_INT 1
41424: NEG
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 1
41432: PUSH
41433: LD_INT 1
41435: NEG
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 1
41443: NEG
41444: PUSH
41445: LD_INT 1
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41463: LD_ADDR_VAR 0 38
41467: PUSH
41468: LD_INT 0
41470: PUSH
41471: LD_INT 0
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 0
41480: PUSH
41481: LD_INT 1
41483: NEG
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 1
41491: PUSH
41492: LD_INT 0
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 1
41501: PUSH
41502: LD_INT 1
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 0
41511: PUSH
41512: LD_INT 1
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 1
41521: NEG
41522: PUSH
41523: LD_INT 0
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 1
41532: NEG
41533: PUSH
41534: LD_INT 1
41536: NEG
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 2
41544: PUSH
41545: LD_INT 1
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 2
41554: NEG
41555: PUSH
41556: LD_INT 1
41558: NEG
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41575: LD_ADDR_VAR 0 39
41579: PUSH
41580: LD_INT 0
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 0
41592: PUSH
41593: LD_INT 1
41595: NEG
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 1
41603: PUSH
41604: LD_INT 0
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 1
41613: PUSH
41614: LD_INT 1
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 0
41623: PUSH
41624: LD_INT 1
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 1
41633: NEG
41634: PUSH
41635: LD_INT 0
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 1
41644: NEG
41645: PUSH
41646: LD_INT 1
41648: NEG
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 1
41656: NEG
41657: PUSH
41658: LD_INT 2
41660: NEG
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 1
41668: PUSH
41669: LD_INT 2
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41687: LD_ADDR_VAR 0 40
41691: PUSH
41692: LD_INT 0
41694: PUSH
41695: LD_INT 0
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 0
41704: PUSH
41705: LD_INT 1
41707: NEG
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 1
41715: PUSH
41716: LD_INT 0
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 1
41725: PUSH
41726: LD_INT 1
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 0
41735: PUSH
41736: LD_INT 1
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 1
41745: NEG
41746: PUSH
41747: LD_INT 0
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 1
41756: NEG
41757: PUSH
41758: LD_INT 1
41760: NEG
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 1
41768: PUSH
41769: LD_INT 1
41771: NEG
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 1
41779: NEG
41780: PUSH
41781: LD_INT 1
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41799: LD_ADDR_VAR 0 41
41803: PUSH
41804: LD_INT 0
41806: PUSH
41807: LD_INT 0
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 0
41816: PUSH
41817: LD_INT 1
41819: NEG
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 1
41827: PUSH
41828: LD_INT 0
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 1
41837: PUSH
41838: LD_INT 1
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 0
41847: PUSH
41848: LD_INT 1
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 1
41857: NEG
41858: PUSH
41859: LD_INT 0
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 1
41868: NEG
41869: PUSH
41870: LD_INT 1
41872: NEG
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 1
41880: NEG
41881: PUSH
41882: LD_INT 2
41884: NEG
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 1
41892: PUSH
41893: LD_INT 1
41895: NEG
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 2
41903: PUSH
41904: LD_INT 0
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 2
41913: PUSH
41914: LD_INT 1
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 2
41923: PUSH
41924: LD_INT 2
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 1
41933: PUSH
41934: LD_INT 2
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 1
41943: NEG
41944: PUSH
41945: LD_INT 1
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 2
41954: NEG
41955: PUSH
41956: LD_INT 0
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 2
41965: NEG
41966: PUSH
41967: LD_INT 1
41969: NEG
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 2
41977: NEG
41978: PUSH
41979: LD_INT 2
41981: NEG
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 2
41989: NEG
41990: PUSH
41991: LD_INT 3
41993: NEG
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 2
42001: PUSH
42002: LD_INT 1
42004: NEG
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 3
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 3
42022: PUSH
42023: LD_INT 1
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 3
42032: PUSH
42033: LD_INT 2
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 3
42042: PUSH
42043: LD_INT 3
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 2
42052: PUSH
42053: LD_INT 3
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 2
42062: NEG
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 3
42073: NEG
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 3
42084: NEG
42085: PUSH
42086: LD_INT 1
42088: NEG
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 3
42096: NEG
42097: PUSH
42098: LD_INT 2
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 3
42108: NEG
42109: PUSH
42110: LD_INT 3
42112: NEG
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42149: LD_ADDR_VAR 0 42
42153: PUSH
42154: LD_INT 0
42156: PUSH
42157: LD_INT 0
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 0
42166: PUSH
42167: LD_INT 1
42169: NEG
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 1
42177: PUSH
42178: LD_INT 0
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 1
42187: PUSH
42188: LD_INT 1
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 0
42197: PUSH
42198: LD_INT 1
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 1
42207: NEG
42208: PUSH
42209: LD_INT 0
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 1
42218: NEG
42219: PUSH
42220: LD_INT 1
42222: NEG
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 1
42230: NEG
42231: PUSH
42232: LD_INT 2
42234: NEG
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 0
42242: PUSH
42243: LD_INT 2
42245: NEG
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 1
42253: PUSH
42254: LD_INT 1
42256: NEG
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 2
42264: PUSH
42265: LD_INT 1
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 2
42274: PUSH
42275: LD_INT 2
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: LD_INT 2
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: LD_INT 2
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 1
42304: NEG
42305: PUSH
42306: LD_INT 1
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 2
42315: NEG
42316: PUSH
42317: LD_INT 1
42319: NEG
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 2
42327: NEG
42328: PUSH
42329: LD_INT 2
42331: NEG
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 2
42339: NEG
42340: PUSH
42341: LD_INT 3
42343: NEG
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 1
42351: NEG
42352: PUSH
42353: LD_INT 3
42355: NEG
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 0
42363: PUSH
42364: LD_INT 3
42366: NEG
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 1
42374: PUSH
42375: LD_INT 2
42377: NEG
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 3
42385: PUSH
42386: LD_INT 2
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 3
42395: PUSH
42396: LD_INT 3
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 2
42405: PUSH
42406: LD_INT 3
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 1
42415: PUSH
42416: LD_INT 3
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 0
42425: PUSH
42426: LD_INT 3
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: NEG
42436: PUSH
42437: LD_INT 2
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 3
42446: NEG
42447: PUSH
42448: LD_INT 2
42450: NEG
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 3
42458: NEG
42459: PUSH
42460: LD_INT 3
42462: NEG
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42499: LD_ADDR_VAR 0 43
42503: PUSH
42504: LD_INT 0
42506: PUSH
42507: LD_INT 0
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 0
42516: PUSH
42517: LD_INT 1
42519: NEG
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 1
42527: PUSH
42528: LD_INT 0
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 1
42537: PUSH
42538: LD_INT 1
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 0
42547: PUSH
42548: LD_INT 1
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 1
42557: NEG
42558: PUSH
42559: LD_INT 0
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 1
42568: NEG
42569: PUSH
42570: LD_INT 1
42572: NEG
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 1
42580: NEG
42581: PUSH
42582: LD_INT 2
42584: NEG
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 0
42592: PUSH
42593: LD_INT 2
42595: NEG
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 1
42603: PUSH
42604: LD_INT 1
42606: NEG
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 2
42614: PUSH
42615: LD_INT 0
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 2
42624: PUSH
42625: LD_INT 1
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 1
42634: PUSH
42635: LD_INT 2
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 0
42644: PUSH
42645: LD_INT 2
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 1
42654: NEG
42655: PUSH
42656: LD_INT 1
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 2
42665: NEG
42666: PUSH
42667: LD_INT 0
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 2
42676: NEG
42677: PUSH
42678: LD_INT 1
42680: NEG
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 1
42688: NEG
42689: PUSH
42690: LD_INT 3
42692: NEG
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 0
42700: PUSH
42701: LD_INT 3
42703: NEG
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 1
42711: PUSH
42712: LD_INT 2
42714: NEG
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 2
42722: PUSH
42723: LD_INT 1
42725: NEG
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 3
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 3
42743: PUSH
42744: LD_INT 1
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 1
42753: PUSH
42754: LD_INT 3
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 0
42763: PUSH
42764: LD_INT 3
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 1
42773: NEG
42774: PUSH
42775: LD_INT 2
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 2
42784: NEG
42785: PUSH
42786: LD_INT 1
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 3
42795: NEG
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 3
42806: NEG
42807: PUSH
42808: LD_INT 1
42810: NEG
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42847: LD_ADDR_VAR 0 44
42851: PUSH
42852: LD_INT 0
42854: PUSH
42855: LD_INT 0
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 0
42864: PUSH
42865: LD_INT 1
42867: NEG
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 1
42875: PUSH
42876: LD_INT 0
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 1
42885: PUSH
42886: LD_INT 1
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 0
42895: PUSH
42896: LD_INT 1
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 1
42905: NEG
42906: PUSH
42907: LD_INT 0
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 1
42916: NEG
42917: PUSH
42918: LD_INT 1
42920: NEG
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 1
42928: NEG
42929: PUSH
42930: LD_INT 2
42932: NEG
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 1
42940: PUSH
42941: LD_INT 1
42943: NEG
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 2
42951: PUSH
42952: LD_INT 0
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 2
42961: PUSH
42962: LD_INT 1
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 2
42971: PUSH
42972: LD_INT 2
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: LD_INT 2
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 1
42991: NEG
42992: PUSH
42993: LD_INT 1
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 2
43002: NEG
43003: PUSH
43004: LD_INT 0
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 2
43013: NEG
43014: PUSH
43015: LD_INT 1
43017: NEG
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 2
43025: NEG
43026: PUSH
43027: LD_INT 2
43029: NEG
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 2
43037: NEG
43038: PUSH
43039: LD_INT 3
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 2
43049: PUSH
43050: LD_INT 1
43052: NEG
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 3
43060: PUSH
43061: LD_INT 0
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 3
43070: PUSH
43071: LD_INT 1
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 3
43080: PUSH
43081: LD_INT 2
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 3
43090: PUSH
43091: LD_INT 3
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 2
43100: PUSH
43101: LD_INT 3
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 2
43110: NEG
43111: PUSH
43112: LD_INT 1
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 3
43121: NEG
43122: PUSH
43123: LD_INT 0
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 3
43132: NEG
43133: PUSH
43134: LD_INT 1
43136: NEG
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 3
43144: NEG
43145: PUSH
43146: LD_INT 2
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 3
43156: NEG
43157: PUSH
43158: LD_INT 3
43160: NEG
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43197: LD_ADDR_VAR 0 45
43201: PUSH
43202: LD_INT 0
43204: PUSH
43205: LD_INT 0
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 0
43214: PUSH
43215: LD_INT 1
43217: NEG
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: LD_INT 0
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 1
43235: PUSH
43236: LD_INT 1
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 0
43245: PUSH
43246: LD_INT 1
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 1
43255: NEG
43256: PUSH
43257: LD_INT 0
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 1
43266: NEG
43267: PUSH
43268: LD_INT 1
43270: NEG
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 1
43278: NEG
43279: PUSH
43280: LD_INT 2
43282: NEG
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 0
43290: PUSH
43291: LD_INT 2
43293: NEG
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 1
43301: PUSH
43302: LD_INT 1
43304: NEG
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 2
43312: PUSH
43313: LD_INT 1
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 2
43322: PUSH
43323: LD_INT 2
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 1
43332: PUSH
43333: LD_INT 2
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: LD_INT 2
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 1
43352: NEG
43353: PUSH
43354: LD_INT 1
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 2
43363: NEG
43364: PUSH
43365: LD_INT 1
43367: NEG
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 2
43375: NEG
43376: PUSH
43377: LD_INT 2
43379: NEG
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 2
43387: NEG
43388: PUSH
43389: LD_INT 3
43391: NEG
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 1
43399: NEG
43400: PUSH
43401: LD_INT 3
43403: NEG
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 0
43411: PUSH
43412: LD_INT 3
43414: NEG
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 1
43422: PUSH
43423: LD_INT 2
43425: NEG
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 3
43433: PUSH
43434: LD_INT 2
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 3
43443: PUSH
43444: LD_INT 3
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 2
43453: PUSH
43454: LD_INT 3
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 1
43463: PUSH
43464: LD_INT 3
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 0
43473: PUSH
43474: LD_INT 3
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 1
43483: NEG
43484: PUSH
43485: LD_INT 2
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 3
43494: NEG
43495: PUSH
43496: LD_INT 2
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 3
43506: NEG
43507: PUSH
43508: LD_INT 3
43510: NEG
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43547: LD_ADDR_VAR 0 46
43551: PUSH
43552: LD_INT 0
43554: PUSH
43555: LD_INT 0
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 0
43564: PUSH
43565: LD_INT 1
43567: NEG
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 1
43575: PUSH
43576: LD_INT 0
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 1
43585: PUSH
43586: LD_INT 1
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 0
43595: PUSH
43596: LD_INT 1
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 1
43605: NEG
43606: PUSH
43607: LD_INT 0
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 1
43616: NEG
43617: PUSH
43618: LD_INT 1
43620: NEG
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 1
43628: NEG
43629: PUSH
43630: LD_INT 2
43632: NEG
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 0
43640: PUSH
43641: LD_INT 2
43643: NEG
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 1
43651: PUSH
43652: LD_INT 1
43654: NEG
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 2
43662: PUSH
43663: LD_INT 0
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 2
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 1
43682: PUSH
43683: LD_INT 2
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 0
43692: PUSH
43693: LD_INT 2
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 1
43702: NEG
43703: PUSH
43704: LD_INT 1
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 2
43713: NEG
43714: PUSH
43715: LD_INT 0
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 2
43724: NEG
43725: PUSH
43726: LD_INT 1
43728: NEG
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 1
43736: NEG
43737: PUSH
43738: LD_INT 3
43740: NEG
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: LD_INT 3
43751: NEG
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 1
43759: PUSH
43760: LD_INT 2
43762: NEG
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 2
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 3
43781: PUSH
43782: LD_INT 0
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 3
43791: PUSH
43792: LD_INT 1
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 1
43801: PUSH
43802: LD_INT 3
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 0
43811: PUSH
43812: LD_INT 3
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 1
43821: NEG
43822: PUSH
43823: LD_INT 2
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 2
43832: NEG
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 3
43843: NEG
43844: PUSH
43845: LD_INT 0
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 3
43854: NEG
43855: PUSH
43856: LD_INT 1
43858: NEG
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43895: LD_ADDR_VAR 0 47
43899: PUSH
43900: LD_INT 0
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 0
43912: PUSH
43913: LD_INT 1
43915: NEG
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 1
43923: PUSH
43924: LD_INT 0
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 1
43933: PUSH
43934: LD_INT 1
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 0
43943: PUSH
43944: LD_INT 1
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 1
43953: NEG
43954: PUSH
43955: LD_INT 0
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 1
43964: NEG
43965: PUSH
43966: LD_INT 1
43968: NEG
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 1
43976: NEG
43977: PUSH
43978: LD_INT 2
43980: NEG
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 0
43988: PUSH
43989: LD_INT 2
43991: NEG
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 1
43999: PUSH
44000: LD_INT 1
44002: NEG
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 2
44010: NEG
44011: PUSH
44012: LD_INT 1
44014: NEG
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 2
44022: NEG
44023: PUSH
44024: LD_INT 2
44026: NEG
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44046: LD_ADDR_VAR 0 48
44050: PUSH
44051: LD_INT 0
44053: PUSH
44054: LD_INT 0
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 0
44063: PUSH
44064: LD_INT 1
44066: NEG
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 1
44074: PUSH
44075: LD_INT 0
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 1
44084: PUSH
44085: LD_INT 1
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 0
44094: PUSH
44095: LD_INT 1
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 1
44104: NEG
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 1
44115: NEG
44116: PUSH
44117: LD_INT 1
44119: NEG
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 1
44127: NEG
44128: PUSH
44129: LD_INT 2
44131: NEG
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 0
44139: PUSH
44140: LD_INT 2
44142: NEG
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 1
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 2
44161: PUSH
44162: LD_INT 0
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 2
44171: PUSH
44172: LD_INT 1
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44193: LD_ADDR_VAR 0 49
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 0
44210: PUSH
44211: LD_INT 1
44213: NEG
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 1
44221: PUSH
44222: LD_INT 0
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 1
44231: PUSH
44232: LD_INT 1
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 0
44241: PUSH
44242: LD_INT 1
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 1
44251: NEG
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 1
44262: NEG
44263: PUSH
44264: LD_INT 1
44266: NEG
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 1
44274: PUSH
44275: LD_INT 1
44277: NEG
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 2
44285: PUSH
44286: LD_INT 0
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 2
44295: PUSH
44296: LD_INT 1
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 2
44305: PUSH
44306: LD_INT 2
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 1
44315: PUSH
44316: LD_INT 2
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44337: LD_ADDR_VAR 0 50
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 0
44354: PUSH
44355: LD_INT 1
44357: NEG
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 1
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: LD_INT 1
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 0
44385: PUSH
44386: LD_INT 1
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 1
44395: NEG
44396: PUSH
44397: LD_INT 0
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 1
44406: NEG
44407: PUSH
44408: LD_INT 1
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 2
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 2
44428: PUSH
44429: LD_INT 2
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: LD_INT 2
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 0
44448: PUSH
44449: LD_INT 2
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 1
44458: NEG
44459: PUSH
44460: LD_INT 1
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44481: LD_ADDR_VAR 0 51
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: LD_INT 0
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 0
44498: PUSH
44499: LD_INT 1
44501: NEG
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 1
44519: PUSH
44520: LD_INT 1
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 0
44529: PUSH
44530: LD_INT 1
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: LD_INT 0
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 1
44550: NEG
44551: PUSH
44552: LD_INT 1
44554: NEG
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 1
44562: PUSH
44563: LD_INT 2
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 0
44572: PUSH
44573: LD_INT 2
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 1
44582: NEG
44583: PUSH
44584: LD_INT 1
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 2
44593: NEG
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 2
44604: NEG
44605: PUSH
44606: LD_INT 1
44608: NEG
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44628: LD_ADDR_VAR 0 52
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: LD_INT 1
44648: NEG
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 1
44656: PUSH
44657: LD_INT 0
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 1
44666: PUSH
44667: LD_INT 1
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 0
44676: PUSH
44677: LD_INT 1
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 1
44686: NEG
44687: PUSH
44688: LD_INT 0
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 1
44697: NEG
44698: PUSH
44699: LD_INT 1
44701: NEG
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 1
44709: NEG
44710: PUSH
44711: LD_INT 2
44713: NEG
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 1
44721: NEG
44722: PUSH
44723: LD_INT 1
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 2
44732: NEG
44733: PUSH
44734: LD_INT 0
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 2
44743: NEG
44744: PUSH
44745: LD_INT 1
44747: NEG
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 2
44755: NEG
44756: PUSH
44757: LD_INT 2
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44779: LD_ADDR_VAR 0 53
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: LD_INT 0
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: LD_INT 1
44799: NEG
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 1
44807: PUSH
44808: LD_INT 0
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 1
44817: PUSH
44818: LD_INT 1
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 0
44827: PUSH
44828: LD_INT 1
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 1
44837: NEG
44838: PUSH
44839: LD_INT 0
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 1
44848: NEG
44849: PUSH
44850: LD_INT 1
44852: NEG
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 1
44860: NEG
44861: PUSH
44862: LD_INT 2
44864: NEG
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 0
44872: PUSH
44873: LD_INT 2
44875: NEG
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 1
44883: PUSH
44884: LD_INT 1
44886: NEG
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 2
44894: PUSH
44895: LD_INT 0
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 2
44904: PUSH
44905: LD_INT 1
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 2
44914: PUSH
44915: LD_INT 2
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 1
44924: PUSH
44925: LD_INT 2
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: LD_INT 2
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: NEG
44945: PUSH
44946: LD_INT 1
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 2
44955: NEG
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 2
44966: NEG
44967: PUSH
44968: LD_INT 1
44970: NEG
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 2
44978: NEG
44979: PUSH
44980: LD_INT 2
44982: NEG
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45009: LD_ADDR_VAR 0 54
45013: PUSH
45014: LD_INT 0
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: LD_INT 1
45029: NEG
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 1
45037: PUSH
45038: LD_INT 0
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 1
45047: PUSH
45048: LD_INT 1
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 0
45057: PUSH
45058: LD_INT 1
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 1
45067: NEG
45068: PUSH
45069: LD_INT 0
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 1
45078: NEG
45079: PUSH
45080: LD_INT 1
45082: NEG
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 1
45090: NEG
45091: PUSH
45092: LD_INT 2
45094: NEG
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 0
45102: PUSH
45103: LD_INT 2
45105: NEG
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 1
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 2
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 2
45134: PUSH
45135: LD_INT 1
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 2
45144: PUSH
45145: LD_INT 2
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 1
45154: PUSH
45155: LD_INT 2
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 0
45164: PUSH
45165: LD_INT 2
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 2
45185: NEG
45186: PUSH
45187: LD_INT 0
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 2
45196: NEG
45197: PUSH
45198: LD_INT 1
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 2
45208: NEG
45209: PUSH
45210: LD_INT 2
45212: NEG
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45239: LD_ADDR_VAR 0 55
45243: PUSH
45244: LD_INT 0
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: LD_INT 1
45259: NEG
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 1
45267: PUSH
45268: LD_INT 0
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 1
45277: PUSH
45278: LD_INT 1
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 0
45287: PUSH
45288: LD_INT 1
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 1
45297: NEG
45298: PUSH
45299: LD_INT 0
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 1
45308: NEG
45309: PUSH
45310: LD_INT 1
45312: NEG
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 1
45320: NEG
45321: PUSH
45322: LD_INT 2
45324: NEG
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: LD_INT 2
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 1
45343: PUSH
45344: LD_INT 1
45346: NEG
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 2
45354: PUSH
45355: LD_INT 0
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 2
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 2
45374: PUSH
45375: LD_INT 2
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 1
45384: PUSH
45385: LD_INT 2
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: LD_INT 2
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: LD_INT 1
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 2
45415: NEG
45416: PUSH
45417: LD_INT 0
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 2
45426: NEG
45427: PUSH
45428: LD_INT 1
45430: NEG
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 2
45438: NEG
45439: PUSH
45440: LD_INT 2
45442: NEG
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45469: LD_ADDR_VAR 0 56
45473: PUSH
45474: LD_INT 0
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 0
45486: PUSH
45487: LD_INT 1
45489: NEG
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 1
45507: PUSH
45508: LD_INT 1
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: LD_INT 1
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 1
45527: NEG
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 1
45538: NEG
45539: PUSH
45540: LD_INT 1
45542: NEG
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: LD_INT 2
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: LD_INT 2
45565: NEG
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 1
45573: PUSH
45574: LD_INT 1
45576: NEG
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 2
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 2
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 2
45604: PUSH
45605: LD_INT 2
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: LD_INT 2
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: LD_INT 2
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 1
45634: NEG
45635: PUSH
45636: LD_INT 1
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 2
45645: NEG
45646: PUSH
45647: LD_INT 0
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 2
45656: NEG
45657: PUSH
45658: LD_INT 1
45660: NEG
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 2
45668: NEG
45669: PUSH
45670: LD_INT 2
45672: NEG
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45699: LD_ADDR_VAR 0 57
45703: PUSH
45704: LD_INT 0
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 0
45716: PUSH
45717: LD_INT 1
45719: NEG
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 1
45727: PUSH
45728: LD_INT 0
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: LD_INT 1
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 1
45757: NEG
45758: PUSH
45759: LD_INT 0
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 1
45768: NEG
45769: PUSH
45770: LD_INT 1
45772: NEG
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 1
45780: NEG
45781: PUSH
45782: LD_INT 2
45784: NEG
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: LD_INT 2
45795: NEG
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 1
45803: PUSH
45804: LD_INT 1
45806: NEG
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 2
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 2
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 2
45834: PUSH
45835: LD_INT 2
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 1
45844: PUSH
45845: LD_INT 2
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 0
45854: PUSH
45855: LD_INT 2
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 1
45864: NEG
45865: PUSH
45866: LD_INT 1
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 2
45875: NEG
45876: PUSH
45877: LD_INT 0
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 2
45886: NEG
45887: PUSH
45888: LD_INT 1
45890: NEG
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 2
45898: NEG
45899: PUSH
45900: LD_INT 2
45902: NEG
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45929: LD_ADDR_VAR 0 58
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: LD_INT 0
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 0
45946: PUSH
45947: LD_INT 1
45949: NEG
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 1
45957: PUSH
45958: LD_INT 0
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 1
45967: PUSH
45968: LD_INT 1
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: LD_INT 1
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 1
45987: NEG
45988: PUSH
45989: LD_INT 0
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 1
45998: NEG
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 1
46010: NEG
46011: PUSH
46012: LD_INT 2
46014: NEG
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 0
46022: PUSH
46023: LD_INT 2
46025: NEG
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 1
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 2
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 2
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 2
46064: PUSH
46065: LD_INT 2
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 1
46074: PUSH
46075: LD_INT 2
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: LD_INT 2
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 1
46094: NEG
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 2
46105: NEG
46106: PUSH
46107: LD_INT 0
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 2
46116: NEG
46117: PUSH
46118: LD_INT 1
46120: NEG
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 2
46128: NEG
46129: PUSH
46130: LD_INT 2
46132: NEG
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46159: LD_ADDR_VAR 0 59
46163: PUSH
46164: LD_INT 0
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 0
46176: PUSH
46177: LD_INT 1
46179: NEG
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 1
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: LD_INT 1
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 0
46207: PUSH
46208: LD_INT 1
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: NEG
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 1
46228: NEG
46229: PUSH
46230: LD_INT 1
46232: NEG
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46247: LD_ADDR_VAR 0 60
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 0
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 1
46275: PUSH
46276: LD_INT 0
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 1
46285: PUSH
46286: LD_INT 1
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 0
46295: PUSH
46296: LD_INT 1
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 1
46305: NEG
46306: PUSH
46307: LD_INT 0
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 1
46316: NEG
46317: PUSH
46318: LD_INT 1
46320: NEG
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46335: LD_ADDR_VAR 0 61
46339: PUSH
46340: LD_INT 0
46342: PUSH
46343: LD_INT 0
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: LD_INT 1
46355: NEG
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 1
46363: PUSH
46364: LD_INT 0
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 1
46373: PUSH
46374: LD_INT 1
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 1
46393: NEG
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 1
46404: NEG
46405: PUSH
46406: LD_INT 1
46408: NEG
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46423: LD_ADDR_VAR 0 62
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: LD_INT 0
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: LD_INT 1
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 1
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 1
46461: PUSH
46462: LD_INT 1
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 0
46471: PUSH
46472: LD_INT 1
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 1
46481: NEG
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 1
46492: NEG
46493: PUSH
46494: LD_INT 1
46496: NEG
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46511: LD_ADDR_VAR 0 63
46515: PUSH
46516: LD_INT 0
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: LD_INT 1
46531: NEG
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 1
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 1
46549: PUSH
46550: LD_INT 1
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 0
46559: PUSH
46560: LD_INT 1
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 1
46569: NEG
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 1
46580: NEG
46581: PUSH
46582: LD_INT 1
46584: NEG
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46599: LD_ADDR_VAR 0 64
46603: PUSH
46604: LD_INT 0
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: LD_INT 1
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 1
46637: PUSH
46638: LD_INT 1
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: LD_INT 0
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: LD_INT 1
46672: NEG
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: ST_TO_ADDR
// end ; 1 :
46687: GO 52584
46689: LD_INT 1
46691: DOUBLE
46692: EQUAL
46693: IFTRUE 46697
46695: GO 49320
46697: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46698: LD_ADDR_VAR 0 11
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: LD_INT 3
46709: NEG
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: LD_INT 3
46720: NEG
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 1
46728: PUSH
46729: LD_INT 2
46731: NEG
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: LIST
46741: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46742: LD_ADDR_VAR 0 12
46746: PUSH
46747: LD_INT 2
46749: PUSH
46750: LD_INT 1
46752: NEG
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 3
46760: PUSH
46761: LD_INT 0
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 3
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: LIST
46782: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46783: LD_ADDR_VAR 0 13
46787: PUSH
46788: LD_INT 3
46790: PUSH
46791: LD_INT 2
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 3
46800: PUSH
46801: LD_INT 3
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 2
46810: PUSH
46811: LD_INT 3
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: LIST
46822: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46823: LD_ADDR_VAR 0 14
46827: PUSH
46828: LD_INT 1
46830: PUSH
46831: LD_INT 3
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: LD_INT 3
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 1
46850: NEG
46851: PUSH
46852: LD_INT 2
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: LIST
46863: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46864: LD_ADDR_VAR 0 15
46868: PUSH
46869: LD_INT 2
46871: NEG
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 3
46882: NEG
46883: PUSH
46884: LD_INT 0
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 3
46893: NEG
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: LIST
46907: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46908: LD_ADDR_VAR 0 16
46912: PUSH
46913: LD_INT 2
46915: NEG
46916: PUSH
46917: LD_INT 3
46919: NEG
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 3
46927: NEG
46928: PUSH
46929: LD_INT 2
46931: NEG
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 3
46939: NEG
46940: PUSH
46941: LD_INT 3
46943: NEG
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: LIST
46953: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46954: LD_ADDR_VAR 0 17
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: LD_INT 3
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: LD_INT 3
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: LD_INT 2
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: LIST
46997: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46998: LD_ADDR_VAR 0 18
47002: PUSH
47003: LD_INT 2
47005: PUSH
47006: LD_INT 1
47008: NEG
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 3
47016: PUSH
47017: LD_INT 0
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 3
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: LIST
47038: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47039: LD_ADDR_VAR 0 19
47043: PUSH
47044: LD_INT 3
47046: PUSH
47047: LD_INT 2
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 3
47056: PUSH
47057: LD_INT 3
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 2
47066: PUSH
47067: LD_INT 3
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: LIST
47078: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47079: LD_ADDR_VAR 0 20
47083: PUSH
47084: LD_INT 1
47086: PUSH
47087: LD_INT 3
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 0
47096: PUSH
47097: LD_INT 3
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 1
47106: NEG
47107: PUSH
47108: LD_INT 2
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: LIST
47119: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47120: LD_ADDR_VAR 0 21
47124: PUSH
47125: LD_INT 2
47127: NEG
47128: PUSH
47129: LD_INT 1
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 3
47138: NEG
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 3
47149: NEG
47150: PUSH
47151: LD_INT 1
47153: NEG
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: LIST
47163: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47164: LD_ADDR_VAR 0 22
47168: PUSH
47169: LD_INT 2
47171: NEG
47172: PUSH
47173: LD_INT 3
47175: NEG
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 3
47183: NEG
47184: PUSH
47185: LD_INT 2
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 3
47195: NEG
47196: PUSH
47197: LD_INT 3
47199: NEG
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: LIST
47209: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47210: LD_ADDR_VAR 0 23
47214: PUSH
47215: LD_INT 0
47217: PUSH
47218: LD_INT 3
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: NEG
47229: PUSH
47230: LD_INT 4
47232: NEG
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: LD_INT 3
47243: NEG
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: LIST
47253: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47254: LD_ADDR_VAR 0 24
47258: PUSH
47259: LD_INT 3
47261: PUSH
47262: LD_INT 0
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 3
47271: PUSH
47272: LD_INT 1
47274: NEG
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 4
47282: PUSH
47283: LD_INT 1
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: LIST
47294: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47295: LD_ADDR_VAR 0 25
47299: PUSH
47300: LD_INT 3
47302: PUSH
47303: LD_INT 3
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 4
47312: PUSH
47313: LD_INT 3
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 3
47322: PUSH
47323: LD_INT 4
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: LIST
47334: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47335: LD_ADDR_VAR 0 26
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: LD_INT 3
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 1
47352: PUSH
47353: LD_INT 4
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: LD_INT 3
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: LIST
47375: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47376: LD_ADDR_VAR 0 27
47380: PUSH
47381: LD_INT 3
47383: NEG
47384: PUSH
47385: LD_INT 0
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 3
47394: NEG
47395: PUSH
47396: LD_INT 1
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 4
47405: NEG
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: LIST
47419: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47420: LD_ADDR_VAR 0 28
47424: PUSH
47425: LD_INT 3
47427: NEG
47428: PUSH
47429: LD_INT 3
47431: NEG
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 3
47439: NEG
47440: PUSH
47441: LD_INT 4
47443: NEG
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 4
47451: NEG
47452: PUSH
47453: LD_INT 3
47455: NEG
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: LIST
47465: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47466: LD_ADDR_VAR 0 29
47470: PUSH
47471: LD_INT 1
47473: NEG
47474: PUSH
47475: LD_INT 3
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 0
47485: PUSH
47486: LD_INT 3
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 1
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: LD_INT 4
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: LD_INT 4
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: LD_INT 3
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: LD_INT 5
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: LD_INT 5
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: PUSH
47565: LD_INT 4
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: LD_INT 6
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 0
47587: PUSH
47588: LD_INT 6
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 1
47598: PUSH
47599: LD_INT 5
47601: NEG
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47621: LD_ADDR_VAR 0 30
47625: PUSH
47626: LD_INT 2
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 3
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 3
47649: PUSH
47650: LD_INT 1
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 3
47659: PUSH
47660: LD_INT 1
47662: NEG
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 4
47670: PUSH
47671: LD_INT 0
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 4
47680: PUSH
47681: LD_INT 1
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 4
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 5
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 5
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 5
47721: PUSH
47722: LD_INT 1
47724: NEG
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 6
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 6
47742: PUSH
47743: LD_INT 1
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47764: LD_ADDR_VAR 0 31
47768: PUSH
47769: LD_INT 3
47771: PUSH
47772: LD_INT 2
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 3
47781: PUSH
47782: LD_INT 3
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 2
47791: PUSH
47792: LD_INT 3
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 4
47801: PUSH
47802: LD_INT 3
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 4
47811: PUSH
47812: LD_INT 4
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 3
47821: PUSH
47822: LD_INT 4
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 5
47831: PUSH
47832: LD_INT 4
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 5
47841: PUSH
47842: LD_INT 5
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 4
47851: PUSH
47852: LD_INT 5
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 6
47861: PUSH
47862: LD_INT 5
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 6
47871: PUSH
47872: LD_INT 6
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 5
47881: PUSH
47882: LD_INT 6
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47903: LD_ADDR_VAR 0 32
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: LD_INT 3
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: LD_INT 3
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: LD_INT 2
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: PUSH
47942: LD_INT 4
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 0
47951: PUSH
47952: LD_INT 4
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 1
47961: NEG
47962: PUSH
47963: LD_INT 3
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 1
47972: PUSH
47973: LD_INT 5
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 0
47982: PUSH
47983: LD_INT 5
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 1
47992: NEG
47993: PUSH
47994: LD_INT 4
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: PUSH
48004: LD_INT 6
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 0
48013: PUSH
48014: LD_INT 6
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 1
48023: NEG
48024: PUSH
48025: LD_INT 5
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48046: LD_ADDR_VAR 0 33
48050: PUSH
48051: LD_INT 2
48053: NEG
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 3
48064: NEG
48065: PUSH
48066: LD_INT 0
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 3
48075: NEG
48076: PUSH
48077: LD_INT 1
48079: NEG
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 3
48087: NEG
48088: PUSH
48089: LD_INT 1
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 4
48098: NEG
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 4
48109: NEG
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 4
48121: NEG
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 5
48132: NEG
48133: PUSH
48134: LD_INT 0
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 5
48143: NEG
48144: PUSH
48145: LD_INT 1
48147: NEG
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 5
48155: NEG
48156: PUSH
48157: LD_INT 1
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 6
48166: NEG
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 6
48177: NEG
48178: PUSH
48179: LD_INT 1
48181: NEG
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48201: LD_ADDR_VAR 0 34
48205: PUSH
48206: LD_INT 2
48208: NEG
48209: PUSH
48210: LD_INT 3
48212: NEG
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 3
48220: NEG
48221: PUSH
48222: LD_INT 2
48224: NEG
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 3
48232: NEG
48233: PUSH
48234: LD_INT 3
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 3
48244: NEG
48245: PUSH
48246: LD_INT 4
48248: NEG
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 4
48256: NEG
48257: PUSH
48258: LD_INT 3
48260: NEG
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 4
48268: NEG
48269: PUSH
48270: LD_INT 4
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 4
48280: NEG
48281: PUSH
48282: LD_INT 5
48284: NEG
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 5
48292: NEG
48293: PUSH
48294: LD_INT 4
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 5
48304: NEG
48305: PUSH
48306: LD_INT 5
48308: NEG
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 5
48316: NEG
48317: PUSH
48318: LD_INT 6
48320: NEG
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 6
48328: NEG
48329: PUSH
48330: LD_INT 5
48332: NEG
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 6
48340: NEG
48341: PUSH
48342: LD_INT 6
48344: NEG
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48364: LD_ADDR_VAR 0 41
48368: PUSH
48369: LD_INT 0
48371: PUSH
48372: LD_INT 2
48374: NEG
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 1
48382: NEG
48383: PUSH
48384: LD_INT 3
48386: NEG
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 1
48394: PUSH
48395: LD_INT 2
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: LIST
48407: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48408: LD_ADDR_VAR 0 42
48412: PUSH
48413: LD_INT 2
48415: PUSH
48416: LD_INT 0
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 2
48425: PUSH
48426: LD_INT 1
48428: NEG
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 3
48436: PUSH
48437: LD_INT 1
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: LIST
48448: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48449: LD_ADDR_VAR 0 43
48453: PUSH
48454: LD_INT 2
48456: PUSH
48457: LD_INT 2
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 3
48466: PUSH
48467: LD_INT 2
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 2
48476: PUSH
48477: LD_INT 3
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: LIST
48488: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48489: LD_ADDR_VAR 0 44
48493: PUSH
48494: LD_INT 0
48496: PUSH
48497: LD_INT 2
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: LD_INT 3
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 1
48516: NEG
48517: PUSH
48518: LD_INT 2
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: LIST
48529: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48530: LD_ADDR_VAR 0 45
48534: PUSH
48535: LD_INT 2
48537: NEG
48538: PUSH
48539: LD_INT 0
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 2
48548: NEG
48549: PUSH
48550: LD_INT 1
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 3
48559: NEG
48560: PUSH
48561: LD_INT 1
48563: NEG
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: LIST
48573: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48574: LD_ADDR_VAR 0 46
48578: PUSH
48579: LD_INT 2
48581: NEG
48582: PUSH
48583: LD_INT 2
48585: NEG
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 2
48593: NEG
48594: PUSH
48595: LD_INT 3
48597: NEG
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 3
48605: NEG
48606: PUSH
48607: LD_INT 2
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: LIST
48619: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48620: LD_ADDR_VAR 0 47
48624: PUSH
48625: LD_INT 2
48627: NEG
48628: PUSH
48629: LD_INT 3
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 1
48639: NEG
48640: PUSH
48641: LD_INT 3
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48653: LD_ADDR_VAR 0 48
48657: PUSH
48658: LD_INT 1
48660: PUSH
48661: LD_INT 2
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 2
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48684: LD_ADDR_VAR 0 49
48688: PUSH
48689: LD_INT 3
48691: PUSH
48692: LD_INT 1
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 3
48701: PUSH
48702: LD_INT 2
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48713: LD_ADDR_VAR 0 50
48717: PUSH
48718: LD_INT 2
48720: PUSH
48721: LD_INT 3
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: LD_INT 3
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48742: LD_ADDR_VAR 0 51
48746: PUSH
48747: LD_INT 1
48749: NEG
48750: PUSH
48751: LD_INT 2
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 2
48760: NEG
48761: PUSH
48762: LD_INT 1
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48773: LD_ADDR_VAR 0 52
48777: PUSH
48778: LD_INT 3
48780: NEG
48781: PUSH
48782: LD_INT 1
48784: NEG
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 3
48792: NEG
48793: PUSH
48794: LD_INT 2
48796: NEG
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48806: LD_ADDR_VAR 0 53
48810: PUSH
48811: LD_INT 1
48813: NEG
48814: PUSH
48815: LD_INT 3
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: LD_INT 3
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 1
48836: PUSH
48837: LD_INT 2
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: LIST
48849: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48850: LD_ADDR_VAR 0 54
48854: PUSH
48855: LD_INT 2
48857: PUSH
48858: LD_INT 1
48860: NEG
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 3
48868: PUSH
48869: LD_INT 0
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 3
48878: PUSH
48879: LD_INT 1
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: LIST
48890: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48891: LD_ADDR_VAR 0 55
48895: PUSH
48896: LD_INT 3
48898: PUSH
48899: LD_INT 2
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 3
48908: PUSH
48909: LD_INT 3
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 2
48918: PUSH
48919: LD_INT 3
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: LIST
48930: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48931: LD_ADDR_VAR 0 56
48935: PUSH
48936: LD_INT 1
48938: PUSH
48939: LD_INT 3
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: LD_INT 3
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: LD_INT 2
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: LIST
48971: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48972: LD_ADDR_VAR 0 57
48976: PUSH
48977: LD_INT 2
48979: NEG
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 3
48990: NEG
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 3
49001: NEG
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: LIST
49015: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49016: LD_ADDR_VAR 0 58
49020: PUSH
49021: LD_INT 2
49023: NEG
49024: PUSH
49025: LD_INT 3
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 3
49035: NEG
49036: PUSH
49037: LD_INT 2
49039: NEG
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 3
49047: NEG
49048: PUSH
49049: LD_INT 3
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: LIST
49061: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49062: LD_ADDR_VAR 0 59
49066: PUSH
49067: LD_INT 1
49069: NEG
49070: PUSH
49071: LD_INT 2
49073: NEG
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: LD_INT 2
49084: NEG
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 1
49092: PUSH
49093: LD_INT 1
49095: NEG
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: LIST
49105: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49106: LD_ADDR_VAR 0 60
49110: PUSH
49111: LD_INT 1
49113: PUSH
49114: LD_INT 1
49116: NEG
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 2
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 2
49134: PUSH
49135: LD_INT 1
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: LIST
49146: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49147: LD_ADDR_VAR 0 61
49151: PUSH
49152: LD_INT 2
49154: PUSH
49155: LD_INT 1
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 2
49164: PUSH
49165: LD_INT 2
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: PUSH
49175: LD_INT 2
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: LIST
49186: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49187: LD_ADDR_VAR 0 62
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: LD_INT 2
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: LD_INT 2
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 1
49214: NEG
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: LIST
49227: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49228: LD_ADDR_VAR 0 63
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: LD_INT 1
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 2
49246: NEG
49247: PUSH
49248: LD_INT 0
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 2
49257: NEG
49258: PUSH
49259: LD_INT 1
49261: NEG
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: LIST
49271: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49272: LD_ADDR_VAR 0 64
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: LD_INT 2
49283: NEG
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 2
49291: NEG
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 2
49303: NEG
49304: PUSH
49305: LD_INT 2
49307: NEG
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: LIST
49317: ST_TO_ADDR
// end ; 2 :
49318: GO 52584
49320: LD_INT 2
49322: DOUBLE
49323: EQUAL
49324: IFTRUE 49328
49326: GO 52583
49328: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49329: LD_ADDR_VAR 0 29
49333: PUSH
49334: LD_INT 4
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 4
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 5
49357: PUSH
49358: LD_INT 0
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 5
49367: PUSH
49368: LD_INT 1
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 4
49377: PUSH
49378: LD_INT 1
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 3
49387: PUSH
49388: LD_INT 0
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 3
49397: PUSH
49398: LD_INT 1
49400: NEG
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 3
49408: PUSH
49409: LD_INT 2
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 5
49419: PUSH
49420: LD_INT 2
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 3
49429: PUSH
49430: LD_INT 3
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 3
49439: PUSH
49440: LD_INT 2
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 4
49449: PUSH
49450: LD_INT 3
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 4
49459: PUSH
49460: LD_INT 4
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 3
49469: PUSH
49470: LD_INT 4
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 2
49479: PUSH
49480: LD_INT 3
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 2
49489: PUSH
49490: LD_INT 2
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 4
49499: PUSH
49500: LD_INT 2
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 2
49509: PUSH
49510: LD_INT 4
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 0
49519: PUSH
49520: LD_INT 4
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 0
49529: PUSH
49530: LD_INT 3
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 1
49539: PUSH
49540: LD_INT 4
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 1
49549: PUSH
49550: LD_INT 5
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 0
49559: PUSH
49560: LD_INT 5
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 1
49569: NEG
49570: PUSH
49571: LD_INT 4
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: LD_INT 3
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 2
49591: PUSH
49592: LD_INT 5
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 2
49601: NEG
49602: PUSH
49603: LD_INT 3
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 3
49612: NEG
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 3
49623: NEG
49624: PUSH
49625: LD_INT 1
49627: NEG
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 2
49635: NEG
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 2
49646: NEG
49647: PUSH
49648: LD_INT 1
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 3
49657: NEG
49658: PUSH
49659: LD_INT 1
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 4
49668: NEG
49669: PUSH
49670: LD_INT 0
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 4
49679: NEG
49680: PUSH
49681: LD_INT 1
49683: NEG
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 4
49691: NEG
49692: PUSH
49693: LD_INT 2
49695: NEG
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 2
49703: NEG
49704: PUSH
49705: LD_INT 2
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 4
49714: NEG
49715: PUSH
49716: LD_INT 4
49718: NEG
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 4
49726: NEG
49727: PUSH
49728: LD_INT 5
49730: NEG
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 3
49738: NEG
49739: PUSH
49740: LD_INT 4
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 3
49750: NEG
49751: PUSH
49752: LD_INT 3
49754: NEG
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 4
49762: NEG
49763: PUSH
49764: LD_INT 3
49766: NEG
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 5
49774: NEG
49775: PUSH
49776: LD_INT 4
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 5
49786: NEG
49787: PUSH
49788: LD_INT 5
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 3
49798: NEG
49799: PUSH
49800: LD_INT 5
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 5
49810: NEG
49811: PUSH
49812: LD_INT 3
49814: NEG
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49867: LD_ADDR_VAR 0 30
49871: PUSH
49872: LD_INT 4
49874: PUSH
49875: LD_INT 4
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 4
49884: PUSH
49885: LD_INT 3
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 5
49894: PUSH
49895: LD_INT 4
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 5
49904: PUSH
49905: LD_INT 5
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 4
49914: PUSH
49915: LD_INT 5
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 3
49924: PUSH
49925: LD_INT 4
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 3
49934: PUSH
49935: LD_INT 3
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 5
49944: PUSH
49945: LD_INT 3
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 3
49954: PUSH
49955: LD_INT 5
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: LD_INT 3
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: LD_INT 2
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: LD_INT 3
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: LD_INT 4
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 0
50004: PUSH
50005: LD_INT 4
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: NEG
50015: PUSH
50016: LD_INT 3
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 1
50025: NEG
50026: PUSH
50027: LD_INT 2
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 2
50036: PUSH
50037: LD_INT 4
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 2
50046: NEG
50047: PUSH
50048: LD_INT 2
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 4
50057: NEG
50058: PUSH
50059: LD_INT 0
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 4
50068: NEG
50069: PUSH
50070: LD_INT 1
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 3
50080: NEG
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 3
50091: NEG
50092: PUSH
50093: LD_INT 1
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 4
50102: NEG
50103: PUSH
50104: LD_INT 1
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 5
50113: NEG
50114: PUSH
50115: LD_INT 0
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 5
50124: NEG
50125: PUSH
50126: LD_INT 1
50128: NEG
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 5
50136: NEG
50137: PUSH
50138: LD_INT 2
50140: NEG
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 3
50148: NEG
50149: PUSH
50150: LD_INT 2
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 3
50159: NEG
50160: PUSH
50161: LD_INT 3
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 3
50171: NEG
50172: PUSH
50173: LD_INT 4
50175: NEG
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 2
50183: NEG
50184: PUSH
50185: LD_INT 3
50187: NEG
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 2
50195: NEG
50196: PUSH
50197: LD_INT 2
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 3
50207: NEG
50208: PUSH
50209: LD_INT 2
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 4
50219: NEG
50220: PUSH
50221: LD_INT 3
50223: NEG
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 4
50231: NEG
50232: PUSH
50233: LD_INT 4
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 2
50243: NEG
50244: PUSH
50245: LD_INT 4
50247: NEG
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 4
50255: NEG
50256: PUSH
50257: LD_INT 2
50259: NEG
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 0
50267: PUSH
50268: LD_INT 4
50270: NEG
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: LD_INT 5
50281: NEG
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: LD_INT 4
50292: NEG
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 1
50300: PUSH
50301: LD_INT 3
50303: NEG
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: LD_INT 3
50314: NEG
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 1
50322: NEG
50323: PUSH
50324: LD_INT 4
50326: NEG
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 1
50334: NEG
50335: PUSH
50336: LD_INT 5
50338: NEG
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 2
50346: PUSH
50347: LD_INT 3
50349: NEG
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 2
50357: NEG
50358: PUSH
50359: LD_INT 5
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50414: LD_ADDR_VAR 0 31
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: LD_INT 4
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 0
50431: PUSH
50432: LD_INT 3
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 1
50441: PUSH
50442: LD_INT 4
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: LD_INT 5
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 0
50461: PUSH
50462: LD_INT 5
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 1
50471: NEG
50472: PUSH
50473: LD_INT 4
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 1
50482: NEG
50483: PUSH
50484: LD_INT 3
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 2
50493: PUSH
50494: LD_INT 5
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 2
50503: NEG
50504: PUSH
50505: LD_INT 3
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 3
50514: NEG
50515: PUSH
50516: LD_INT 0
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 3
50525: NEG
50526: PUSH
50527: LD_INT 1
50529: NEG
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 2
50537: NEG
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 2
50548: NEG
50549: PUSH
50550: LD_INT 1
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 3
50559: NEG
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 4
50570: NEG
50571: PUSH
50572: LD_INT 0
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 4
50581: NEG
50582: PUSH
50583: LD_INT 1
50585: NEG
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 4
50593: NEG
50594: PUSH
50595: LD_INT 2
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 2
50605: NEG
50606: PUSH
50607: LD_INT 2
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 4
50616: NEG
50617: PUSH
50618: LD_INT 4
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 4
50628: NEG
50629: PUSH
50630: LD_INT 5
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 3
50640: NEG
50641: PUSH
50642: LD_INT 4
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 3
50652: NEG
50653: PUSH
50654: LD_INT 3
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 4
50664: NEG
50665: PUSH
50666: LD_INT 3
50668: NEG
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 5
50676: NEG
50677: PUSH
50678: LD_INT 4
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 5
50688: NEG
50689: PUSH
50690: LD_INT 5
50692: NEG
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 3
50700: NEG
50701: PUSH
50702: LD_INT 5
50704: NEG
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 5
50712: NEG
50713: PUSH
50714: LD_INT 3
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: LD_INT 3
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 0
50735: PUSH
50736: LD_INT 4
50738: NEG
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: LD_INT 3
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: LD_INT 2
50760: NEG
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 0
50768: PUSH
50769: LD_INT 2
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: LD_INT 3
50783: NEG
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 1
50791: NEG
50792: PUSH
50793: LD_INT 4
50795: NEG
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 2
50803: PUSH
50804: LD_INT 2
50806: NEG
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 2
50814: NEG
50815: PUSH
50816: LD_INT 4
50818: NEG
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 4
50826: PUSH
50827: LD_INT 0
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 4
50836: PUSH
50837: LD_INT 1
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 5
50847: PUSH
50848: LD_INT 0
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 5
50857: PUSH
50858: LD_INT 1
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 4
50867: PUSH
50868: LD_INT 1
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 3
50877: PUSH
50878: LD_INT 0
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 3
50887: PUSH
50888: LD_INT 1
50890: NEG
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 3
50898: PUSH
50899: LD_INT 2
50901: NEG
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 5
50909: PUSH
50910: LD_INT 2
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50964: LD_ADDR_VAR 0 32
50968: PUSH
50969: LD_INT 4
50971: NEG
50972: PUSH
50973: LD_INT 0
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 4
50982: NEG
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 3
50994: NEG
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 3
51005: NEG
51006: PUSH
51007: LD_INT 1
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 4
51016: NEG
51017: PUSH
51018: LD_INT 1
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 5
51027: NEG
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 5
51038: NEG
51039: PUSH
51040: LD_INT 1
51042: NEG
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 5
51050: NEG
51051: PUSH
51052: LD_INT 2
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 3
51062: NEG
51063: PUSH
51064: LD_INT 2
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 3
51073: NEG
51074: PUSH
51075: LD_INT 3
51077: NEG
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 3
51085: NEG
51086: PUSH
51087: LD_INT 4
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 2
51097: NEG
51098: PUSH
51099: LD_INT 3
51101: NEG
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 2
51109: NEG
51110: PUSH
51111: LD_INT 2
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 3
51121: NEG
51122: PUSH
51123: LD_INT 2
51125: NEG
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 4
51133: NEG
51134: PUSH
51135: LD_INT 3
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 4
51145: NEG
51146: PUSH
51147: LD_INT 4
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 2
51157: NEG
51158: PUSH
51159: LD_INT 4
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 4
51169: NEG
51170: PUSH
51171: LD_INT 2
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: LD_INT 4
51184: NEG
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: LD_INT 5
51195: NEG
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 1
51203: PUSH
51204: LD_INT 4
51206: NEG
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 1
51214: PUSH
51215: LD_INT 3
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: LD_INT 3
51228: NEG
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: LD_INT 4
51240: NEG
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: LD_INT 5
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 2
51260: PUSH
51261: LD_INT 3
51263: NEG
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 2
51271: NEG
51272: PUSH
51273: LD_INT 5
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 3
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 3
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 4
51304: PUSH
51305: LD_INT 0
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 4
51314: PUSH
51315: LD_INT 1
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 3
51324: PUSH
51325: LD_INT 1
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 2
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 2
51344: PUSH
51345: LD_INT 1
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 2
51355: PUSH
51356: LD_INT 2
51358: NEG
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 4
51366: PUSH
51367: LD_INT 2
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 4
51376: PUSH
51377: LD_INT 4
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 4
51386: PUSH
51387: LD_INT 3
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 5
51396: PUSH
51397: LD_INT 4
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 5
51406: PUSH
51407: LD_INT 5
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 4
51416: PUSH
51417: LD_INT 5
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 3
51426: PUSH
51427: LD_INT 4
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 3
51436: PUSH
51437: LD_INT 3
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 5
51446: PUSH
51447: LD_INT 3
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 3
51456: PUSH
51457: LD_INT 5
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51511: LD_ADDR_VAR 0 33
51515: PUSH
51516: LD_INT 4
51518: NEG
51519: PUSH
51520: LD_INT 4
51522: NEG
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 4
51530: NEG
51531: PUSH
51532: LD_INT 5
51534: NEG
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 3
51542: NEG
51543: PUSH
51544: LD_INT 4
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 3
51554: NEG
51555: PUSH
51556: LD_INT 3
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 4
51566: NEG
51567: PUSH
51568: LD_INT 3
51570: NEG
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 5
51578: NEG
51579: PUSH
51580: LD_INT 4
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 5
51590: NEG
51591: PUSH
51592: LD_INT 5
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 3
51602: NEG
51603: PUSH
51604: LD_INT 5
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 5
51614: NEG
51615: PUSH
51616: LD_INT 3
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: LD_INT 3
51629: NEG
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 0
51637: PUSH
51638: LD_INT 4
51640: NEG
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: LD_INT 3
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: LD_INT 2
51662: NEG
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: LD_INT 2
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 1
51681: NEG
51682: PUSH
51683: LD_INT 3
51685: NEG
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 1
51693: NEG
51694: PUSH
51695: LD_INT 4
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 2
51705: PUSH
51706: LD_INT 2
51708: NEG
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 2
51716: NEG
51717: PUSH
51718: LD_INT 4
51720: NEG
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 4
51728: PUSH
51729: LD_INT 0
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 4
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 5
51749: PUSH
51750: LD_INT 0
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 5
51759: PUSH
51760: LD_INT 1
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 4
51769: PUSH
51770: LD_INT 1
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 3
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 3
51789: PUSH
51790: LD_INT 1
51792: NEG
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 3
51800: PUSH
51801: LD_INT 2
51803: NEG
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 5
51811: PUSH
51812: LD_INT 2
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 3
51821: PUSH
51822: LD_INT 3
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 3
51831: PUSH
51832: LD_INT 2
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 4
51841: PUSH
51842: LD_INT 3
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 4
51851: PUSH
51852: LD_INT 4
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 3
51861: PUSH
51862: LD_INT 4
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 2
51871: PUSH
51872: LD_INT 3
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 2
51881: PUSH
51882: LD_INT 2
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 4
51891: PUSH
51892: LD_INT 2
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 2
51901: PUSH
51902: LD_INT 4
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: LD_INT 4
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: LD_INT 3
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 1
51931: PUSH
51932: LD_INT 4
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: LD_INT 5
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: LD_INT 5
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 1
51961: NEG
51962: PUSH
51963: LD_INT 4
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 1
51972: NEG
51973: PUSH
51974: LD_INT 3
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 2
51983: PUSH
51984: LD_INT 5
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 2
51993: NEG
51994: PUSH
51995: LD_INT 3
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52049: LD_ADDR_VAR 0 34
52053: PUSH
52054: LD_INT 0
52056: PUSH
52057: LD_INT 4
52059: NEG
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: LD_INT 5
52070: NEG
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: PUSH
52079: LD_INT 4
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: LD_INT 3
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 0
52100: PUSH
52101: LD_INT 3
52103: NEG
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: LD_INT 4
52115: NEG
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 1
52123: NEG
52124: PUSH
52125: LD_INT 5
52127: NEG
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 2
52135: PUSH
52136: LD_INT 3
52138: NEG
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 2
52146: NEG
52147: PUSH
52148: LD_INT 5
52150: NEG
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 3
52158: PUSH
52159: LD_INT 0
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 3
52168: PUSH
52169: LD_INT 1
52171: NEG
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 4
52179: PUSH
52180: LD_INT 0
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 4
52189: PUSH
52190: LD_INT 1
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 3
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 2
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 2
52219: PUSH
52220: LD_INT 1
52222: NEG
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 2
52230: PUSH
52231: LD_INT 2
52233: NEG
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 4
52241: PUSH
52242: LD_INT 2
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 4
52251: PUSH
52252: LD_INT 4
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 4
52261: PUSH
52262: LD_INT 3
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 5
52271: PUSH
52272: LD_INT 4
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 5
52281: PUSH
52282: LD_INT 5
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 4
52291: PUSH
52292: LD_INT 5
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 3
52301: PUSH
52302: LD_INT 4
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 3
52311: PUSH
52312: LD_INT 3
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 5
52321: PUSH
52322: LD_INT 3
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 3
52331: PUSH
52332: LD_INT 5
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 0
52341: PUSH
52342: LD_INT 3
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 0
52351: PUSH
52352: LD_INT 2
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: LD_INT 3
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 1
52371: PUSH
52372: LD_INT 4
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: LD_INT 4
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: LD_INT 3
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 1
52402: NEG
52403: PUSH
52404: LD_INT 2
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 2
52413: PUSH
52414: LD_INT 4
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 2
52423: NEG
52424: PUSH
52425: LD_INT 2
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 4
52434: NEG
52435: PUSH
52436: LD_INT 0
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 4
52445: NEG
52446: PUSH
52447: LD_INT 1
52449: NEG
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 3
52457: NEG
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 3
52468: NEG
52469: PUSH
52470: LD_INT 1
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 4
52479: NEG
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 5
52490: NEG
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 5
52501: NEG
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 5
52513: NEG
52514: PUSH
52515: LD_INT 2
52517: NEG
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 3
52525: NEG
52526: PUSH
52527: LD_INT 2
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: ST_TO_ADDR
// end ; end ;
52581: GO 52584
52583: POP
// case btype of b_depot , b_warehouse :
52584: LD_VAR 0 1
52588: PUSH
52589: LD_INT 0
52591: DOUBLE
52592: EQUAL
52593: IFTRUE 52603
52595: LD_INT 1
52597: DOUBLE
52598: EQUAL
52599: IFTRUE 52603
52601: GO 52804
52603: POP
// case nation of nation_american :
52604: LD_VAR 0 5
52608: PUSH
52609: LD_INT 1
52611: DOUBLE
52612: EQUAL
52613: IFTRUE 52617
52615: GO 52673
52617: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
52618: LD_ADDR_VAR 0 9
52622: PUSH
52623: LD_VAR 0 11
52627: PUSH
52628: LD_VAR 0 12
52632: PUSH
52633: LD_VAR 0 13
52637: PUSH
52638: LD_VAR 0 14
52642: PUSH
52643: LD_VAR 0 15
52647: PUSH
52648: LD_VAR 0 16
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: PUSH
52661: LD_VAR 0 4
52665: PUSH
52666: LD_INT 1
52668: PLUS
52669: ARRAY
52670: ST_TO_ADDR
52671: GO 52802
52673: LD_INT 2
52675: DOUBLE
52676: EQUAL
52677: IFTRUE 52681
52679: GO 52737
52681: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
52682: LD_ADDR_VAR 0 9
52686: PUSH
52687: LD_VAR 0 17
52691: PUSH
52692: LD_VAR 0 18
52696: PUSH
52697: LD_VAR 0 19
52701: PUSH
52702: LD_VAR 0 20
52706: PUSH
52707: LD_VAR 0 21
52711: PUSH
52712: LD_VAR 0 22
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: PUSH
52725: LD_VAR 0 4
52729: PUSH
52730: LD_INT 1
52732: PLUS
52733: ARRAY
52734: ST_TO_ADDR
52735: GO 52802
52737: LD_INT 3
52739: DOUBLE
52740: EQUAL
52741: IFTRUE 52745
52743: GO 52801
52745: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52746: LD_ADDR_VAR 0 9
52750: PUSH
52751: LD_VAR 0 23
52755: PUSH
52756: LD_VAR 0 24
52760: PUSH
52761: LD_VAR 0 25
52765: PUSH
52766: LD_VAR 0 26
52770: PUSH
52771: LD_VAR 0 27
52775: PUSH
52776: LD_VAR 0 28
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: PUSH
52789: LD_VAR 0 4
52793: PUSH
52794: LD_INT 1
52796: PLUS
52797: ARRAY
52798: ST_TO_ADDR
52799: GO 52802
52801: POP
52802: GO 53357
52804: LD_INT 2
52806: DOUBLE
52807: EQUAL
52808: IFTRUE 52818
52810: LD_INT 3
52812: DOUBLE
52813: EQUAL
52814: IFTRUE 52818
52816: GO 52874
52818: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52819: LD_ADDR_VAR 0 9
52823: PUSH
52824: LD_VAR 0 29
52828: PUSH
52829: LD_VAR 0 30
52833: PUSH
52834: LD_VAR 0 31
52838: PUSH
52839: LD_VAR 0 32
52843: PUSH
52844: LD_VAR 0 33
52848: PUSH
52849: LD_VAR 0 34
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: PUSH
52862: LD_VAR 0 4
52866: PUSH
52867: LD_INT 1
52869: PLUS
52870: ARRAY
52871: ST_TO_ADDR
52872: GO 53357
52874: LD_INT 16
52876: DOUBLE
52877: EQUAL
52878: IFTRUE 52936
52880: LD_INT 17
52882: DOUBLE
52883: EQUAL
52884: IFTRUE 52936
52886: LD_INT 18
52888: DOUBLE
52889: EQUAL
52890: IFTRUE 52936
52892: LD_INT 19
52894: DOUBLE
52895: EQUAL
52896: IFTRUE 52936
52898: LD_INT 22
52900: DOUBLE
52901: EQUAL
52902: IFTRUE 52936
52904: LD_INT 20
52906: DOUBLE
52907: EQUAL
52908: IFTRUE 52936
52910: LD_INT 21
52912: DOUBLE
52913: EQUAL
52914: IFTRUE 52936
52916: LD_INT 23
52918: DOUBLE
52919: EQUAL
52920: IFTRUE 52936
52922: LD_INT 24
52924: DOUBLE
52925: EQUAL
52926: IFTRUE 52936
52928: LD_INT 25
52930: DOUBLE
52931: EQUAL
52932: IFTRUE 52936
52934: GO 52992
52936: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52937: LD_ADDR_VAR 0 9
52941: PUSH
52942: LD_VAR 0 35
52946: PUSH
52947: LD_VAR 0 36
52951: PUSH
52952: LD_VAR 0 37
52956: PUSH
52957: LD_VAR 0 38
52961: PUSH
52962: LD_VAR 0 39
52966: PUSH
52967: LD_VAR 0 40
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: PUSH
52980: LD_VAR 0 4
52984: PUSH
52985: LD_INT 1
52987: PLUS
52988: ARRAY
52989: ST_TO_ADDR
52990: GO 53357
52992: LD_INT 6
52994: DOUBLE
52995: EQUAL
52996: IFTRUE 53048
52998: LD_INT 7
53000: DOUBLE
53001: EQUAL
53002: IFTRUE 53048
53004: LD_INT 8
53006: DOUBLE
53007: EQUAL
53008: IFTRUE 53048
53010: LD_INT 13
53012: DOUBLE
53013: EQUAL
53014: IFTRUE 53048
53016: LD_INT 12
53018: DOUBLE
53019: EQUAL
53020: IFTRUE 53048
53022: LD_INT 15
53024: DOUBLE
53025: EQUAL
53026: IFTRUE 53048
53028: LD_INT 11
53030: DOUBLE
53031: EQUAL
53032: IFTRUE 53048
53034: LD_INT 14
53036: DOUBLE
53037: EQUAL
53038: IFTRUE 53048
53040: LD_INT 10
53042: DOUBLE
53043: EQUAL
53044: IFTRUE 53048
53046: GO 53104
53048: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
53049: LD_ADDR_VAR 0 9
53053: PUSH
53054: LD_VAR 0 41
53058: PUSH
53059: LD_VAR 0 42
53063: PUSH
53064: LD_VAR 0 43
53068: PUSH
53069: LD_VAR 0 44
53073: PUSH
53074: LD_VAR 0 45
53078: PUSH
53079: LD_VAR 0 46
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: PUSH
53092: LD_VAR 0 4
53096: PUSH
53097: LD_INT 1
53099: PLUS
53100: ARRAY
53101: ST_TO_ADDR
53102: GO 53357
53104: LD_INT 36
53106: DOUBLE
53107: EQUAL
53108: IFTRUE 53112
53110: GO 53168
53112: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53113: LD_ADDR_VAR 0 9
53117: PUSH
53118: LD_VAR 0 47
53122: PUSH
53123: LD_VAR 0 48
53127: PUSH
53128: LD_VAR 0 49
53132: PUSH
53133: LD_VAR 0 50
53137: PUSH
53138: LD_VAR 0 51
53142: PUSH
53143: LD_VAR 0 52
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: PUSH
53156: LD_VAR 0 4
53160: PUSH
53161: LD_INT 1
53163: PLUS
53164: ARRAY
53165: ST_TO_ADDR
53166: GO 53357
53168: LD_INT 4
53170: DOUBLE
53171: EQUAL
53172: IFTRUE 53194
53174: LD_INT 5
53176: DOUBLE
53177: EQUAL
53178: IFTRUE 53194
53180: LD_INT 34
53182: DOUBLE
53183: EQUAL
53184: IFTRUE 53194
53186: LD_INT 37
53188: DOUBLE
53189: EQUAL
53190: IFTRUE 53194
53192: GO 53250
53194: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53195: LD_ADDR_VAR 0 9
53199: PUSH
53200: LD_VAR 0 53
53204: PUSH
53205: LD_VAR 0 54
53209: PUSH
53210: LD_VAR 0 55
53214: PUSH
53215: LD_VAR 0 56
53219: PUSH
53220: LD_VAR 0 57
53224: PUSH
53225: LD_VAR 0 58
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: PUSH
53238: LD_VAR 0 4
53242: PUSH
53243: LD_INT 1
53245: PLUS
53246: ARRAY
53247: ST_TO_ADDR
53248: GO 53357
53250: LD_INT 31
53252: DOUBLE
53253: EQUAL
53254: IFTRUE 53300
53256: LD_INT 32
53258: DOUBLE
53259: EQUAL
53260: IFTRUE 53300
53262: LD_INT 33
53264: DOUBLE
53265: EQUAL
53266: IFTRUE 53300
53268: LD_INT 27
53270: DOUBLE
53271: EQUAL
53272: IFTRUE 53300
53274: LD_INT 26
53276: DOUBLE
53277: EQUAL
53278: IFTRUE 53300
53280: LD_INT 28
53282: DOUBLE
53283: EQUAL
53284: IFTRUE 53300
53286: LD_INT 29
53288: DOUBLE
53289: EQUAL
53290: IFTRUE 53300
53292: LD_INT 30
53294: DOUBLE
53295: EQUAL
53296: IFTRUE 53300
53298: GO 53356
53300: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
53301: LD_ADDR_VAR 0 9
53305: PUSH
53306: LD_VAR 0 59
53310: PUSH
53311: LD_VAR 0 60
53315: PUSH
53316: LD_VAR 0 61
53320: PUSH
53321: LD_VAR 0 62
53325: PUSH
53326: LD_VAR 0 63
53330: PUSH
53331: LD_VAR 0 64
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: PUSH
53344: LD_VAR 0 4
53348: PUSH
53349: LD_INT 1
53351: PLUS
53352: ARRAY
53353: ST_TO_ADDR
53354: GO 53357
53356: POP
// temp_list2 = [ ] ;
53357: LD_ADDR_VAR 0 10
53361: PUSH
53362: EMPTY
53363: ST_TO_ADDR
// for i in temp_list do
53364: LD_ADDR_VAR 0 8
53368: PUSH
53369: LD_VAR 0 9
53373: PUSH
53374: FOR_IN
53375: IFFALSE 53427
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53377: LD_ADDR_VAR 0 10
53381: PUSH
53382: LD_VAR 0 10
53386: PUSH
53387: LD_VAR 0 8
53391: PUSH
53392: LD_INT 1
53394: ARRAY
53395: PUSH
53396: LD_VAR 0 2
53400: PLUS
53401: PUSH
53402: LD_VAR 0 8
53406: PUSH
53407: LD_INT 2
53409: ARRAY
53410: PUSH
53411: LD_VAR 0 3
53415: PLUS
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: EMPTY
53422: LIST
53423: ADD
53424: ST_TO_ADDR
53425: GO 53374
53427: POP
53428: POP
// result = temp_list2 ;
53429: LD_ADDR_VAR 0 7
53433: PUSH
53434: LD_VAR 0 10
53438: ST_TO_ADDR
// end ;
53439: LD_VAR 0 7
53443: RET
// export function EnemyInRange ( unit , dist ) ; begin
53444: LD_INT 0
53446: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53447: LD_ADDR_VAR 0 3
53451: PUSH
53452: LD_VAR 0 1
53456: PPUSH
53457: CALL_OW 255
53461: PPUSH
53462: LD_VAR 0 1
53466: PPUSH
53467: CALL_OW 250
53471: PPUSH
53472: LD_VAR 0 1
53476: PPUSH
53477: CALL_OW 251
53481: PPUSH
53482: LD_VAR 0 2
53486: PPUSH
53487: CALL 27548 0 4
53491: PUSH
53492: LD_INT 4
53494: ARRAY
53495: ST_TO_ADDR
// end ;
53496: LD_VAR 0 3
53500: RET
// export function PlayerSeeMe ( unit ) ; begin
53501: LD_INT 0
53503: PPUSH
// result := See ( your_side , unit ) ;
53504: LD_ADDR_VAR 0 2
53508: PUSH
53509: LD_OWVAR 2
53513: PPUSH
53514: LD_VAR 0 1
53518: PPUSH
53519: CALL_OW 292
53523: ST_TO_ADDR
// end ;
53524: LD_VAR 0 2
53528: RET
// export function ReverseDir ( unit ) ; begin
53529: LD_INT 0
53531: PPUSH
// if not unit then
53532: LD_VAR 0 1
53536: NOT
53537: IFFALSE 53541
// exit ;
53539: GO 53564
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53541: LD_ADDR_VAR 0 2
53545: PUSH
53546: LD_VAR 0 1
53550: PPUSH
53551: CALL_OW 254
53555: PUSH
53556: LD_INT 3
53558: PLUS
53559: PUSH
53560: LD_INT 6
53562: MOD
53563: ST_TO_ADDR
// end ;
53564: LD_VAR 0 2
53568: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53569: LD_INT 0
53571: PPUSH
53572: PPUSH
53573: PPUSH
53574: PPUSH
53575: PPUSH
// if not hexes then
53576: LD_VAR 0 2
53580: NOT
53581: IFFALSE 53585
// exit ;
53583: GO 53733
// dist := 9999 ;
53585: LD_ADDR_VAR 0 5
53589: PUSH
53590: LD_INT 9999
53592: ST_TO_ADDR
// for i = 1 to hexes do
53593: LD_ADDR_VAR 0 4
53597: PUSH
53598: DOUBLE
53599: LD_INT 1
53601: DEC
53602: ST_TO_ADDR
53603: LD_VAR 0 2
53607: PUSH
53608: FOR_TO
53609: IFFALSE 53721
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53611: LD_VAR 0 1
53615: PPUSH
53616: LD_VAR 0 2
53620: PUSH
53621: LD_VAR 0 4
53625: ARRAY
53626: PUSH
53627: LD_INT 1
53629: ARRAY
53630: PPUSH
53631: LD_VAR 0 2
53635: PUSH
53636: LD_VAR 0 4
53640: ARRAY
53641: PUSH
53642: LD_INT 2
53644: ARRAY
53645: PPUSH
53646: CALL_OW 297
53650: PUSH
53651: LD_VAR 0 5
53655: LESS
53656: IFFALSE 53719
// begin hex := hexes [ i ] ;
53658: LD_ADDR_VAR 0 7
53662: PUSH
53663: LD_VAR 0 2
53667: PUSH
53668: LD_VAR 0 4
53672: ARRAY
53673: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53674: LD_ADDR_VAR 0 5
53678: PUSH
53679: LD_VAR 0 1
53683: PPUSH
53684: LD_VAR 0 2
53688: PUSH
53689: LD_VAR 0 4
53693: ARRAY
53694: PUSH
53695: LD_INT 1
53697: ARRAY
53698: PPUSH
53699: LD_VAR 0 2
53703: PUSH
53704: LD_VAR 0 4
53708: ARRAY
53709: PUSH
53710: LD_INT 2
53712: ARRAY
53713: PPUSH
53714: CALL_OW 297
53718: ST_TO_ADDR
// end ; end ;
53719: GO 53608
53721: POP
53722: POP
// result := hex ;
53723: LD_ADDR_VAR 0 3
53727: PUSH
53728: LD_VAR 0 7
53732: ST_TO_ADDR
// end ;
53733: LD_VAR 0 3
53737: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53738: LD_INT 0
53740: PPUSH
53741: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53742: LD_VAR 0 1
53746: NOT
53747: PUSH
53748: LD_VAR 0 1
53752: PUSH
53753: LD_INT 21
53755: PUSH
53756: LD_INT 2
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 23
53765: PUSH
53766: LD_INT 2
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PPUSH
53777: CALL_OW 69
53781: IN
53782: NOT
53783: OR
53784: IFFALSE 53788
// exit ;
53786: GO 53835
// for i = 1 to 3 do
53788: LD_ADDR_VAR 0 3
53792: PUSH
53793: DOUBLE
53794: LD_INT 1
53796: DEC
53797: ST_TO_ADDR
53798: LD_INT 3
53800: PUSH
53801: FOR_TO
53802: IFFALSE 53833
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53804: LD_VAR 0 1
53808: PPUSH
53809: CALL_OW 250
53813: PPUSH
53814: LD_VAR 0 1
53818: PPUSH
53819: CALL_OW 251
53823: PPUSH
53824: LD_INT 1
53826: PPUSH
53827: CALL_OW 453
53831: GO 53801
53833: POP
53834: POP
// end ;
53835: LD_VAR 0 2
53839: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53840: LD_INT 0
53842: PPUSH
53843: PPUSH
53844: PPUSH
53845: PPUSH
53846: PPUSH
53847: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53848: LD_VAR 0 1
53852: NOT
53853: PUSH
53854: LD_VAR 0 2
53858: NOT
53859: OR
53860: PUSH
53861: LD_VAR 0 1
53865: PPUSH
53866: CALL_OW 314
53870: OR
53871: IFFALSE 53875
// exit ;
53873: GO 54316
// x := GetX ( enemy_unit ) ;
53875: LD_ADDR_VAR 0 7
53879: PUSH
53880: LD_VAR 0 2
53884: PPUSH
53885: CALL_OW 250
53889: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53890: LD_ADDR_VAR 0 8
53894: PUSH
53895: LD_VAR 0 2
53899: PPUSH
53900: CALL_OW 251
53904: ST_TO_ADDR
// if not x or not y then
53905: LD_VAR 0 7
53909: NOT
53910: PUSH
53911: LD_VAR 0 8
53915: NOT
53916: OR
53917: IFFALSE 53921
// exit ;
53919: GO 54316
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53921: LD_ADDR_VAR 0 6
53925: PUSH
53926: LD_VAR 0 7
53930: PPUSH
53931: LD_INT 0
53933: PPUSH
53934: LD_INT 4
53936: PPUSH
53937: CALL_OW 272
53941: PUSH
53942: LD_VAR 0 8
53946: PPUSH
53947: LD_INT 0
53949: PPUSH
53950: LD_INT 4
53952: PPUSH
53953: CALL_OW 273
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_VAR 0 7
53966: PPUSH
53967: LD_INT 1
53969: PPUSH
53970: LD_INT 4
53972: PPUSH
53973: CALL_OW 272
53977: PUSH
53978: LD_VAR 0 8
53982: PPUSH
53983: LD_INT 1
53985: PPUSH
53986: LD_INT 4
53988: PPUSH
53989: CALL_OW 273
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_VAR 0 7
54002: PPUSH
54003: LD_INT 2
54005: PPUSH
54006: LD_INT 4
54008: PPUSH
54009: CALL_OW 272
54013: PUSH
54014: LD_VAR 0 8
54018: PPUSH
54019: LD_INT 2
54021: PPUSH
54022: LD_INT 4
54024: PPUSH
54025: CALL_OW 273
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_VAR 0 7
54038: PPUSH
54039: LD_INT 3
54041: PPUSH
54042: LD_INT 4
54044: PPUSH
54045: CALL_OW 272
54049: PUSH
54050: LD_VAR 0 8
54054: PPUSH
54055: LD_INT 3
54057: PPUSH
54058: LD_INT 4
54060: PPUSH
54061: CALL_OW 273
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_VAR 0 7
54074: PPUSH
54075: LD_INT 4
54077: PPUSH
54078: LD_INT 4
54080: PPUSH
54081: CALL_OW 272
54085: PUSH
54086: LD_VAR 0 8
54090: PPUSH
54091: LD_INT 4
54093: PPUSH
54094: LD_INT 4
54096: PPUSH
54097: CALL_OW 273
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_VAR 0 7
54110: PPUSH
54111: LD_INT 5
54113: PPUSH
54114: LD_INT 4
54116: PPUSH
54117: CALL_OW 272
54121: PUSH
54122: LD_VAR 0 8
54126: PPUSH
54127: LD_INT 5
54129: PPUSH
54130: LD_INT 4
54132: PPUSH
54133: CALL_OW 273
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: ST_TO_ADDR
// for i = tmp downto 1 do
54150: LD_ADDR_VAR 0 4
54154: PUSH
54155: DOUBLE
54156: LD_VAR 0 6
54160: INC
54161: ST_TO_ADDR
54162: LD_INT 1
54164: PUSH
54165: FOR_DOWNTO
54166: IFFALSE 54267
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54168: LD_VAR 0 6
54172: PUSH
54173: LD_VAR 0 4
54177: ARRAY
54178: PUSH
54179: LD_INT 1
54181: ARRAY
54182: PPUSH
54183: LD_VAR 0 6
54187: PUSH
54188: LD_VAR 0 4
54192: ARRAY
54193: PUSH
54194: LD_INT 2
54196: ARRAY
54197: PPUSH
54198: CALL_OW 488
54202: NOT
54203: PUSH
54204: LD_VAR 0 6
54208: PUSH
54209: LD_VAR 0 4
54213: ARRAY
54214: PUSH
54215: LD_INT 1
54217: ARRAY
54218: PPUSH
54219: LD_VAR 0 6
54223: PUSH
54224: LD_VAR 0 4
54228: ARRAY
54229: PUSH
54230: LD_INT 2
54232: ARRAY
54233: PPUSH
54234: CALL_OW 428
54238: PUSH
54239: LD_INT 0
54241: NONEQUAL
54242: OR
54243: IFFALSE 54265
// tmp := Delete ( tmp , i ) ;
54245: LD_ADDR_VAR 0 6
54249: PUSH
54250: LD_VAR 0 6
54254: PPUSH
54255: LD_VAR 0 4
54259: PPUSH
54260: CALL_OW 3
54264: ST_TO_ADDR
54265: GO 54165
54267: POP
54268: POP
// j := GetClosestHex ( unit , tmp ) ;
54269: LD_ADDR_VAR 0 5
54273: PUSH
54274: LD_VAR 0 1
54278: PPUSH
54279: LD_VAR 0 6
54283: PPUSH
54284: CALL 53569 0 2
54288: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54289: LD_VAR 0 1
54293: PPUSH
54294: LD_VAR 0 5
54298: PUSH
54299: LD_INT 1
54301: ARRAY
54302: PPUSH
54303: LD_VAR 0 5
54307: PUSH
54308: LD_INT 2
54310: ARRAY
54311: PPUSH
54312: CALL_OW 111
// end ;
54316: LD_VAR 0 3
54320: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54321: LD_INT 0
54323: PPUSH
54324: PPUSH
54325: PPUSH
// uc_side = 0 ;
54326: LD_ADDR_OWVAR 20
54330: PUSH
54331: LD_INT 0
54333: ST_TO_ADDR
// uc_nation = 0 ;
54334: LD_ADDR_OWVAR 21
54338: PUSH
54339: LD_INT 0
54341: ST_TO_ADDR
// InitHc ;
54342: CALL_OW 19
// InitVc ;
54346: CALL_OW 20
// if mastodonts then
54350: LD_VAR 0 6
54354: IFFALSE 54421
// for i = 1 to mastodonts do
54356: LD_ADDR_VAR 0 11
54360: PUSH
54361: DOUBLE
54362: LD_INT 1
54364: DEC
54365: ST_TO_ADDR
54366: LD_VAR 0 6
54370: PUSH
54371: FOR_TO
54372: IFFALSE 54419
// begin vc_chassis := 31 ;
54374: LD_ADDR_OWVAR 37
54378: PUSH
54379: LD_INT 31
54381: ST_TO_ADDR
// vc_control := control_rider ;
54382: LD_ADDR_OWVAR 38
54386: PUSH
54387: LD_INT 4
54389: ST_TO_ADDR
// animal := CreateVehicle ;
54390: LD_ADDR_VAR 0 12
54394: PUSH
54395: CALL_OW 45
54399: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54400: LD_VAR 0 12
54404: PPUSH
54405: LD_VAR 0 8
54409: PPUSH
54410: LD_INT 0
54412: PPUSH
54413: CALL 61199 0 3
// end ;
54417: GO 54371
54419: POP
54420: POP
// if horses then
54421: LD_VAR 0 5
54425: IFFALSE 54492
// for i = 1 to horses do
54427: LD_ADDR_VAR 0 11
54431: PUSH
54432: DOUBLE
54433: LD_INT 1
54435: DEC
54436: ST_TO_ADDR
54437: LD_VAR 0 5
54441: PUSH
54442: FOR_TO
54443: IFFALSE 54490
// begin hc_class := 21 ;
54445: LD_ADDR_OWVAR 28
54449: PUSH
54450: LD_INT 21
54452: ST_TO_ADDR
// hc_gallery :=  ;
54453: LD_ADDR_OWVAR 33
54457: PUSH
54458: LD_STRING 
54460: ST_TO_ADDR
// animal := CreateHuman ;
54461: LD_ADDR_VAR 0 12
54465: PUSH
54466: CALL_OW 44
54470: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54471: LD_VAR 0 12
54475: PPUSH
54476: LD_VAR 0 8
54480: PPUSH
54481: LD_INT 0
54483: PPUSH
54484: CALL 61199 0 3
// end ;
54488: GO 54442
54490: POP
54491: POP
// if birds then
54492: LD_VAR 0 1
54496: IFFALSE 54563
// for i = 1 to birds do
54498: LD_ADDR_VAR 0 11
54502: PUSH
54503: DOUBLE
54504: LD_INT 1
54506: DEC
54507: ST_TO_ADDR
54508: LD_VAR 0 1
54512: PUSH
54513: FOR_TO
54514: IFFALSE 54561
// begin hc_class = 18 ;
54516: LD_ADDR_OWVAR 28
54520: PUSH
54521: LD_INT 18
54523: ST_TO_ADDR
// hc_gallery =  ;
54524: LD_ADDR_OWVAR 33
54528: PUSH
54529: LD_STRING 
54531: ST_TO_ADDR
// animal := CreateHuman ;
54532: LD_ADDR_VAR 0 12
54536: PUSH
54537: CALL_OW 44
54541: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54542: LD_VAR 0 12
54546: PPUSH
54547: LD_VAR 0 8
54551: PPUSH
54552: LD_INT 0
54554: PPUSH
54555: CALL 61199 0 3
// end ;
54559: GO 54513
54561: POP
54562: POP
// if tigers then
54563: LD_VAR 0 2
54567: IFFALSE 54651
// for i = 1 to tigers do
54569: LD_ADDR_VAR 0 11
54573: PUSH
54574: DOUBLE
54575: LD_INT 1
54577: DEC
54578: ST_TO_ADDR
54579: LD_VAR 0 2
54583: PUSH
54584: FOR_TO
54585: IFFALSE 54649
// begin hc_class = class_tiger ;
54587: LD_ADDR_OWVAR 28
54591: PUSH
54592: LD_INT 14
54594: ST_TO_ADDR
// hc_gallery =  ;
54595: LD_ADDR_OWVAR 33
54599: PUSH
54600: LD_STRING 
54602: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54603: LD_ADDR_OWVAR 35
54607: PUSH
54608: LD_INT 7
54610: NEG
54611: PPUSH
54612: LD_INT 7
54614: PPUSH
54615: CALL_OW 12
54619: ST_TO_ADDR
// animal := CreateHuman ;
54620: LD_ADDR_VAR 0 12
54624: PUSH
54625: CALL_OW 44
54629: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54630: LD_VAR 0 12
54634: PPUSH
54635: LD_VAR 0 8
54639: PPUSH
54640: LD_INT 0
54642: PPUSH
54643: CALL 61199 0 3
// end ;
54647: GO 54584
54649: POP
54650: POP
// if apemans then
54651: LD_VAR 0 3
54655: IFFALSE 54778
// for i = 1 to apemans do
54657: LD_ADDR_VAR 0 11
54661: PUSH
54662: DOUBLE
54663: LD_INT 1
54665: DEC
54666: ST_TO_ADDR
54667: LD_VAR 0 3
54671: PUSH
54672: FOR_TO
54673: IFFALSE 54776
// begin hc_class = class_apeman ;
54675: LD_ADDR_OWVAR 28
54679: PUSH
54680: LD_INT 12
54682: ST_TO_ADDR
// hc_gallery =  ;
54683: LD_ADDR_OWVAR 33
54687: PUSH
54688: LD_STRING 
54690: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54691: LD_ADDR_OWVAR 35
54695: PUSH
54696: LD_INT 5
54698: NEG
54699: PPUSH
54700: LD_INT 5
54702: PPUSH
54703: CALL_OW 12
54707: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54708: LD_ADDR_OWVAR 31
54712: PUSH
54713: LD_INT 1
54715: PPUSH
54716: LD_INT 3
54718: PPUSH
54719: CALL_OW 12
54723: PUSH
54724: LD_INT 1
54726: PPUSH
54727: LD_INT 3
54729: PPUSH
54730: CALL_OW 12
54734: PUSH
54735: LD_INT 0
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: ST_TO_ADDR
// animal := CreateHuman ;
54747: LD_ADDR_VAR 0 12
54751: PUSH
54752: CALL_OW 44
54756: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54757: LD_VAR 0 12
54761: PPUSH
54762: LD_VAR 0 8
54766: PPUSH
54767: LD_INT 0
54769: PPUSH
54770: CALL 61199 0 3
// end ;
54774: GO 54672
54776: POP
54777: POP
// if enchidnas then
54778: LD_VAR 0 4
54782: IFFALSE 54849
// for i = 1 to enchidnas do
54784: LD_ADDR_VAR 0 11
54788: PUSH
54789: DOUBLE
54790: LD_INT 1
54792: DEC
54793: ST_TO_ADDR
54794: LD_VAR 0 4
54798: PUSH
54799: FOR_TO
54800: IFFALSE 54847
// begin hc_class = 13 ;
54802: LD_ADDR_OWVAR 28
54806: PUSH
54807: LD_INT 13
54809: ST_TO_ADDR
// hc_gallery =  ;
54810: LD_ADDR_OWVAR 33
54814: PUSH
54815: LD_STRING 
54817: ST_TO_ADDR
// animal := CreateHuman ;
54818: LD_ADDR_VAR 0 12
54822: PUSH
54823: CALL_OW 44
54827: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54828: LD_VAR 0 12
54832: PPUSH
54833: LD_VAR 0 8
54837: PPUSH
54838: LD_INT 0
54840: PPUSH
54841: CALL 61199 0 3
// end ;
54845: GO 54799
54847: POP
54848: POP
// if fishes then
54849: LD_VAR 0 7
54853: IFFALSE 54920
// for i = 1 to fishes do
54855: LD_ADDR_VAR 0 11
54859: PUSH
54860: DOUBLE
54861: LD_INT 1
54863: DEC
54864: ST_TO_ADDR
54865: LD_VAR 0 7
54869: PUSH
54870: FOR_TO
54871: IFFALSE 54918
// begin hc_class = 20 ;
54873: LD_ADDR_OWVAR 28
54877: PUSH
54878: LD_INT 20
54880: ST_TO_ADDR
// hc_gallery =  ;
54881: LD_ADDR_OWVAR 33
54885: PUSH
54886: LD_STRING 
54888: ST_TO_ADDR
// animal := CreateHuman ;
54889: LD_ADDR_VAR 0 12
54893: PUSH
54894: CALL_OW 44
54898: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54899: LD_VAR 0 12
54903: PPUSH
54904: LD_VAR 0 9
54908: PPUSH
54909: LD_INT 0
54911: PPUSH
54912: CALL 61199 0 3
// end ;
54916: GO 54870
54918: POP
54919: POP
// end ;
54920: LD_VAR 0 10
54924: RET
// export function WantHeal ( sci , unit ) ; begin
54925: LD_INT 0
54927: PPUSH
// if GetTaskList ( sci ) > 0 then
54928: LD_VAR 0 1
54932: PPUSH
54933: CALL_OW 437
54937: PUSH
54938: LD_INT 0
54940: GREATER
54941: IFFALSE 55011
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54943: LD_VAR 0 1
54947: PPUSH
54948: CALL_OW 437
54952: PUSH
54953: LD_INT 1
54955: ARRAY
54956: PUSH
54957: LD_INT 1
54959: ARRAY
54960: PUSH
54961: LD_STRING l
54963: EQUAL
54964: PUSH
54965: LD_VAR 0 1
54969: PPUSH
54970: CALL_OW 437
54974: PUSH
54975: LD_INT 1
54977: ARRAY
54978: PUSH
54979: LD_INT 4
54981: ARRAY
54982: PUSH
54983: LD_VAR 0 2
54987: EQUAL
54988: AND
54989: IFFALSE 55001
// result := true else
54991: LD_ADDR_VAR 0 3
54995: PUSH
54996: LD_INT 1
54998: ST_TO_ADDR
54999: GO 55009
// result := false ;
55001: LD_ADDR_VAR 0 3
55005: PUSH
55006: LD_INT 0
55008: ST_TO_ADDR
// end else
55009: GO 55019
// result := false ;
55011: LD_ADDR_VAR 0 3
55015: PUSH
55016: LD_INT 0
55018: ST_TO_ADDR
// end ;
55019: LD_VAR 0 3
55023: RET
// export function HealTarget ( sci ) ; begin
55024: LD_INT 0
55026: PPUSH
// if not sci then
55027: LD_VAR 0 1
55031: NOT
55032: IFFALSE 55036
// exit ;
55034: GO 55101
// result := 0 ;
55036: LD_ADDR_VAR 0 2
55040: PUSH
55041: LD_INT 0
55043: ST_TO_ADDR
// if GetTaskList ( sci ) then
55044: LD_VAR 0 1
55048: PPUSH
55049: CALL_OW 437
55053: IFFALSE 55101
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55055: LD_VAR 0 1
55059: PPUSH
55060: CALL_OW 437
55064: PUSH
55065: LD_INT 1
55067: ARRAY
55068: PUSH
55069: LD_INT 1
55071: ARRAY
55072: PUSH
55073: LD_STRING l
55075: EQUAL
55076: IFFALSE 55101
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55078: LD_ADDR_VAR 0 2
55082: PUSH
55083: LD_VAR 0 1
55087: PPUSH
55088: CALL_OW 437
55092: PUSH
55093: LD_INT 1
55095: ARRAY
55096: PUSH
55097: LD_INT 4
55099: ARRAY
55100: ST_TO_ADDR
// end ;
55101: LD_VAR 0 2
55105: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
55106: LD_INT 0
55108: PPUSH
55109: PPUSH
55110: PPUSH
55111: PPUSH
55112: PPUSH
55113: PPUSH
55114: PPUSH
55115: PPUSH
55116: PPUSH
55117: PPUSH
55118: PPUSH
55119: PPUSH
55120: PPUSH
55121: PPUSH
55122: PPUSH
55123: PPUSH
55124: PPUSH
55125: PPUSH
55126: PPUSH
55127: PPUSH
55128: PPUSH
55129: PPUSH
55130: PPUSH
55131: PPUSH
55132: PPUSH
55133: PPUSH
55134: PPUSH
55135: PPUSH
55136: PPUSH
55137: PPUSH
55138: PPUSH
55139: PPUSH
55140: PPUSH
55141: PPUSH
// if not list then
55142: LD_VAR 0 1
55146: NOT
55147: IFFALSE 55151
// exit ;
55149: GO 59810
// base := list [ 1 ] ;
55151: LD_ADDR_VAR 0 3
55155: PUSH
55156: LD_VAR 0 1
55160: PUSH
55161: LD_INT 1
55163: ARRAY
55164: ST_TO_ADDR
// group := list [ 2 ] ;
55165: LD_ADDR_VAR 0 4
55169: PUSH
55170: LD_VAR 0 1
55174: PUSH
55175: LD_INT 2
55177: ARRAY
55178: ST_TO_ADDR
// path := list [ 3 ] ;
55179: LD_ADDR_VAR 0 5
55183: PUSH
55184: LD_VAR 0 1
55188: PUSH
55189: LD_INT 3
55191: ARRAY
55192: ST_TO_ADDR
// flags := list [ 4 ] ;
55193: LD_ADDR_VAR 0 6
55197: PUSH
55198: LD_VAR 0 1
55202: PUSH
55203: LD_INT 4
55205: ARRAY
55206: ST_TO_ADDR
// mined := [ ] ;
55207: LD_ADDR_VAR 0 27
55211: PUSH
55212: EMPTY
55213: ST_TO_ADDR
// bombed := [ ] ;
55214: LD_ADDR_VAR 0 28
55218: PUSH
55219: EMPTY
55220: ST_TO_ADDR
// healers := [ ] ;
55221: LD_ADDR_VAR 0 31
55225: PUSH
55226: EMPTY
55227: ST_TO_ADDR
// to_heal := [ ] ;
55228: LD_ADDR_VAR 0 30
55232: PUSH
55233: EMPTY
55234: ST_TO_ADDR
// repairs := [ ] ;
55235: LD_ADDR_VAR 0 33
55239: PUSH
55240: EMPTY
55241: ST_TO_ADDR
// to_repair := [ ] ;
55242: LD_ADDR_VAR 0 32
55246: PUSH
55247: EMPTY
55248: ST_TO_ADDR
// if not group or not path then
55249: LD_VAR 0 4
55253: NOT
55254: PUSH
55255: LD_VAR 0 5
55259: NOT
55260: OR
55261: IFFALSE 55265
// exit ;
55263: GO 59810
// side := GetSide ( group [ 1 ] ) ;
55265: LD_ADDR_VAR 0 35
55269: PUSH
55270: LD_VAR 0 4
55274: PUSH
55275: LD_INT 1
55277: ARRAY
55278: PPUSH
55279: CALL_OW 255
55283: ST_TO_ADDR
// if flags then
55284: LD_VAR 0 6
55288: IFFALSE 55432
// begin f_ignore_area := flags [ 1 ] ;
55290: LD_ADDR_VAR 0 17
55294: PUSH
55295: LD_VAR 0 6
55299: PUSH
55300: LD_INT 1
55302: ARRAY
55303: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
55304: LD_ADDR_VAR 0 18
55308: PUSH
55309: LD_VAR 0 6
55313: PUSH
55314: LD_INT 2
55316: ARRAY
55317: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
55318: LD_ADDR_VAR 0 19
55322: PUSH
55323: LD_VAR 0 6
55327: PUSH
55328: LD_INT 3
55330: ARRAY
55331: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
55332: LD_ADDR_VAR 0 20
55336: PUSH
55337: LD_VAR 0 6
55341: PUSH
55342: LD_INT 4
55344: ARRAY
55345: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
55346: LD_ADDR_VAR 0 21
55350: PUSH
55351: LD_VAR 0 6
55355: PUSH
55356: LD_INT 5
55358: ARRAY
55359: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
55360: LD_ADDR_VAR 0 22
55364: PUSH
55365: LD_VAR 0 6
55369: PUSH
55370: LD_INT 6
55372: ARRAY
55373: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
55374: LD_ADDR_VAR 0 23
55378: PUSH
55379: LD_VAR 0 6
55383: PUSH
55384: LD_INT 7
55386: ARRAY
55387: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
55388: LD_ADDR_VAR 0 24
55392: PUSH
55393: LD_VAR 0 6
55397: PUSH
55398: LD_INT 8
55400: ARRAY
55401: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
55402: LD_ADDR_VAR 0 25
55406: PUSH
55407: LD_VAR 0 6
55411: PUSH
55412: LD_INT 9
55414: ARRAY
55415: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
55416: LD_ADDR_VAR 0 26
55420: PUSH
55421: LD_VAR 0 6
55425: PUSH
55426: LD_INT 10
55428: ARRAY
55429: ST_TO_ADDR
// end else
55430: GO 55512
// begin f_ignore_area := false ;
55432: LD_ADDR_VAR 0 17
55436: PUSH
55437: LD_INT 0
55439: ST_TO_ADDR
// f_capture := false ;
55440: LD_ADDR_VAR 0 18
55444: PUSH
55445: LD_INT 0
55447: ST_TO_ADDR
// f_ignore_civ := false ;
55448: LD_ADDR_VAR 0 19
55452: PUSH
55453: LD_INT 0
55455: ST_TO_ADDR
// f_murder := false ;
55456: LD_ADDR_VAR 0 20
55460: PUSH
55461: LD_INT 0
55463: ST_TO_ADDR
// f_mines := false ;
55464: LD_ADDR_VAR 0 21
55468: PUSH
55469: LD_INT 0
55471: ST_TO_ADDR
// f_repair := false ;
55472: LD_ADDR_VAR 0 22
55476: PUSH
55477: LD_INT 0
55479: ST_TO_ADDR
// f_heal := false ;
55480: LD_ADDR_VAR 0 23
55484: PUSH
55485: LD_INT 0
55487: ST_TO_ADDR
// f_spacetime := false ;
55488: LD_ADDR_VAR 0 24
55492: PUSH
55493: LD_INT 0
55495: ST_TO_ADDR
// f_attack_depot := false ;
55496: LD_ADDR_VAR 0 25
55500: PUSH
55501: LD_INT 0
55503: ST_TO_ADDR
// f_crawl := false ;
55504: LD_ADDR_VAR 0 26
55508: PUSH
55509: LD_INT 0
55511: ST_TO_ADDR
// end ; if f_heal then
55512: LD_VAR 0 23
55516: IFFALSE 55543
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
55518: LD_ADDR_VAR 0 31
55522: PUSH
55523: LD_VAR 0 4
55527: PPUSH
55528: LD_INT 25
55530: PUSH
55531: LD_INT 4
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PPUSH
55538: CALL_OW 72
55542: ST_TO_ADDR
// if f_repair then
55543: LD_VAR 0 22
55547: IFFALSE 55574
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
55549: LD_ADDR_VAR 0 33
55553: PUSH
55554: LD_VAR 0 4
55558: PPUSH
55559: LD_INT 25
55561: PUSH
55562: LD_INT 3
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PPUSH
55569: CALL_OW 72
55573: ST_TO_ADDR
// units_path := [ ] ;
55574: LD_ADDR_VAR 0 16
55578: PUSH
55579: EMPTY
55580: ST_TO_ADDR
// for i = 1 to group do
55581: LD_ADDR_VAR 0 7
55585: PUSH
55586: DOUBLE
55587: LD_INT 1
55589: DEC
55590: ST_TO_ADDR
55591: LD_VAR 0 4
55595: PUSH
55596: FOR_TO
55597: IFFALSE 55626
// units_path := Replace ( units_path , i , path ) ;
55599: LD_ADDR_VAR 0 16
55603: PUSH
55604: LD_VAR 0 16
55608: PPUSH
55609: LD_VAR 0 7
55613: PPUSH
55614: LD_VAR 0 5
55618: PPUSH
55619: CALL_OW 1
55623: ST_TO_ADDR
55624: GO 55596
55626: POP
55627: POP
// repeat for i = group downto 1 do
55628: LD_ADDR_VAR 0 7
55632: PUSH
55633: DOUBLE
55634: LD_VAR 0 4
55638: INC
55639: ST_TO_ADDR
55640: LD_INT 1
55642: PUSH
55643: FOR_DOWNTO
55644: IFFALSE 59766
// begin wait ( 5 ) ;
55646: LD_INT 5
55648: PPUSH
55649: CALL_OW 67
// tmp := [ ] ;
55653: LD_ADDR_VAR 0 14
55657: PUSH
55658: EMPTY
55659: ST_TO_ADDR
// attacking := false ;
55660: LD_ADDR_VAR 0 29
55664: PUSH
55665: LD_INT 0
55667: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
55668: LD_VAR 0 4
55672: PUSH
55673: LD_VAR 0 7
55677: ARRAY
55678: PPUSH
55679: CALL_OW 301
55683: PUSH
55684: LD_VAR 0 4
55688: PUSH
55689: LD_VAR 0 7
55693: ARRAY
55694: NOT
55695: OR
55696: IFFALSE 55805
// begin if GetType ( group [ i ] ) = unit_human then
55698: LD_VAR 0 4
55702: PUSH
55703: LD_VAR 0 7
55707: ARRAY
55708: PPUSH
55709: CALL_OW 247
55713: PUSH
55714: LD_INT 1
55716: EQUAL
55717: IFFALSE 55763
// begin to_heal := to_heal diff group [ i ] ;
55719: LD_ADDR_VAR 0 30
55723: PUSH
55724: LD_VAR 0 30
55728: PUSH
55729: LD_VAR 0 4
55733: PUSH
55734: LD_VAR 0 7
55738: ARRAY
55739: DIFF
55740: ST_TO_ADDR
// healers := healers diff group [ i ] ;
55741: LD_ADDR_VAR 0 31
55745: PUSH
55746: LD_VAR 0 31
55750: PUSH
55751: LD_VAR 0 4
55755: PUSH
55756: LD_VAR 0 7
55760: ARRAY
55761: DIFF
55762: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
55763: LD_ADDR_VAR 0 4
55767: PUSH
55768: LD_VAR 0 4
55772: PPUSH
55773: LD_VAR 0 7
55777: PPUSH
55778: CALL_OW 3
55782: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
55783: LD_ADDR_VAR 0 16
55787: PUSH
55788: LD_VAR 0 16
55792: PPUSH
55793: LD_VAR 0 7
55797: PPUSH
55798: CALL_OW 3
55802: ST_TO_ADDR
// continue ;
55803: GO 55643
// end ; if f_repair then
55805: LD_VAR 0 22
55809: IFFALSE 56298
// begin if GetType ( group [ i ] ) = unit_vehicle then
55811: LD_VAR 0 4
55815: PUSH
55816: LD_VAR 0 7
55820: ARRAY
55821: PPUSH
55822: CALL_OW 247
55826: PUSH
55827: LD_INT 2
55829: EQUAL
55830: IFFALSE 56020
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
55832: LD_VAR 0 4
55836: PUSH
55837: LD_VAR 0 7
55841: ARRAY
55842: PPUSH
55843: CALL_OW 256
55847: PUSH
55848: LD_INT 700
55850: LESS
55851: PUSH
55852: LD_VAR 0 4
55856: PUSH
55857: LD_VAR 0 7
55861: ARRAY
55862: PUSH
55863: LD_VAR 0 32
55867: IN
55868: NOT
55869: AND
55870: IFFALSE 55894
// to_repair := to_repair union group [ i ] ;
55872: LD_ADDR_VAR 0 32
55876: PUSH
55877: LD_VAR 0 32
55881: PUSH
55882: LD_VAR 0 4
55886: PUSH
55887: LD_VAR 0 7
55891: ARRAY
55892: UNION
55893: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
55894: LD_VAR 0 4
55898: PUSH
55899: LD_VAR 0 7
55903: ARRAY
55904: PPUSH
55905: CALL_OW 256
55909: PUSH
55910: LD_INT 1000
55912: EQUAL
55913: PUSH
55914: LD_VAR 0 4
55918: PUSH
55919: LD_VAR 0 7
55923: ARRAY
55924: PUSH
55925: LD_VAR 0 32
55929: IN
55930: AND
55931: IFFALSE 55955
// to_repair := to_repair diff group [ i ] ;
55933: LD_ADDR_VAR 0 32
55937: PUSH
55938: LD_VAR 0 32
55942: PUSH
55943: LD_VAR 0 4
55947: PUSH
55948: LD_VAR 0 7
55952: ARRAY
55953: DIFF
55954: ST_TO_ADDR
// if group [ i ] in to_repair then
55955: LD_VAR 0 4
55959: PUSH
55960: LD_VAR 0 7
55964: ARRAY
55965: PUSH
55966: LD_VAR 0 32
55970: IN
55971: IFFALSE 56018
// begin if not IsInArea ( group [ i ] , f_repair ) then
55973: LD_VAR 0 4
55977: PUSH
55978: LD_VAR 0 7
55982: ARRAY
55983: PPUSH
55984: LD_VAR 0 22
55988: PPUSH
55989: CALL_OW 308
55993: NOT
55994: IFFALSE 56016
// ComMoveToArea ( group [ i ] , f_repair ) ;
55996: LD_VAR 0 4
56000: PUSH
56001: LD_VAR 0 7
56005: ARRAY
56006: PPUSH
56007: LD_VAR 0 22
56011: PPUSH
56012: CALL_OW 113
// continue ;
56016: GO 55643
// end ; end else
56018: GO 56298
// if group [ i ] in repairs then
56020: LD_VAR 0 4
56024: PUSH
56025: LD_VAR 0 7
56029: ARRAY
56030: PUSH
56031: LD_VAR 0 33
56035: IN
56036: IFFALSE 56298
// begin if IsInUnit ( group [ i ] ) then
56038: LD_VAR 0 4
56042: PUSH
56043: LD_VAR 0 7
56047: ARRAY
56048: PPUSH
56049: CALL_OW 310
56053: IFFALSE 56121
// begin z := IsInUnit ( group [ i ] ) ;
56055: LD_ADDR_VAR 0 13
56059: PUSH
56060: LD_VAR 0 4
56064: PUSH
56065: LD_VAR 0 7
56069: ARRAY
56070: PPUSH
56071: CALL_OW 310
56075: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
56076: LD_VAR 0 13
56080: PUSH
56081: LD_VAR 0 32
56085: IN
56086: PUSH
56087: LD_VAR 0 13
56091: PPUSH
56092: LD_VAR 0 22
56096: PPUSH
56097: CALL_OW 308
56101: AND
56102: IFFALSE 56119
// ComExitVehicle ( group [ i ] ) ;
56104: LD_VAR 0 4
56108: PUSH
56109: LD_VAR 0 7
56113: ARRAY
56114: PPUSH
56115: CALL_OW 121
// end else
56119: GO 56298
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
56121: LD_ADDR_VAR 0 13
56125: PUSH
56126: LD_VAR 0 4
56130: PPUSH
56131: LD_INT 95
56133: PUSH
56134: LD_VAR 0 22
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 58
56145: PUSH
56146: EMPTY
56147: LIST
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PPUSH
56153: CALL_OW 72
56157: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
56158: LD_VAR 0 4
56162: PUSH
56163: LD_VAR 0 7
56167: ARRAY
56168: PPUSH
56169: CALL_OW 314
56173: NOT
56174: IFFALSE 56296
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
56176: LD_ADDR_VAR 0 10
56180: PUSH
56181: LD_VAR 0 13
56185: PPUSH
56186: LD_VAR 0 4
56190: PUSH
56191: LD_VAR 0 7
56195: ARRAY
56196: PPUSH
56197: CALL_OW 74
56201: ST_TO_ADDR
// if not x then
56202: LD_VAR 0 10
56206: NOT
56207: IFFALSE 56211
// continue ;
56209: GO 55643
// if GetLives ( x ) < 1000 then
56211: LD_VAR 0 10
56215: PPUSH
56216: CALL_OW 256
56220: PUSH
56221: LD_INT 1000
56223: LESS
56224: IFFALSE 56248
// ComRepairVehicle ( group [ i ] , x ) else
56226: LD_VAR 0 4
56230: PUSH
56231: LD_VAR 0 7
56235: ARRAY
56236: PPUSH
56237: LD_VAR 0 10
56241: PPUSH
56242: CALL_OW 129
56246: GO 56296
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
56248: LD_VAR 0 23
56252: PUSH
56253: LD_VAR 0 4
56257: PUSH
56258: LD_VAR 0 7
56262: ARRAY
56263: PPUSH
56264: CALL_OW 256
56268: PUSH
56269: LD_INT 1000
56271: LESS
56272: AND
56273: NOT
56274: IFFALSE 56296
// ComEnterUnit ( group [ i ] , x ) ;
56276: LD_VAR 0 4
56280: PUSH
56281: LD_VAR 0 7
56285: ARRAY
56286: PPUSH
56287: LD_VAR 0 10
56291: PPUSH
56292: CALL_OW 120
// end ; continue ;
56296: GO 55643
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
56298: LD_VAR 0 23
56302: PUSH
56303: LD_VAR 0 4
56307: PUSH
56308: LD_VAR 0 7
56312: ARRAY
56313: PPUSH
56314: CALL_OW 247
56318: PUSH
56319: LD_INT 1
56321: EQUAL
56322: AND
56323: IFFALSE 56801
// begin if group [ i ] in healers then
56325: LD_VAR 0 4
56329: PUSH
56330: LD_VAR 0 7
56334: ARRAY
56335: PUSH
56336: LD_VAR 0 31
56340: IN
56341: IFFALSE 56614
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
56343: LD_VAR 0 4
56347: PUSH
56348: LD_VAR 0 7
56352: ARRAY
56353: PPUSH
56354: LD_VAR 0 23
56358: PPUSH
56359: CALL_OW 308
56363: NOT
56364: PUSH
56365: LD_VAR 0 4
56369: PUSH
56370: LD_VAR 0 7
56374: ARRAY
56375: PPUSH
56376: CALL_OW 314
56380: NOT
56381: AND
56382: IFFALSE 56406
// ComMoveToArea ( group [ i ] , f_heal ) else
56384: LD_VAR 0 4
56388: PUSH
56389: LD_VAR 0 7
56393: ARRAY
56394: PPUSH
56395: LD_VAR 0 23
56399: PPUSH
56400: CALL_OW 113
56404: GO 56612
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
56406: LD_VAR 0 4
56410: PUSH
56411: LD_VAR 0 7
56415: ARRAY
56416: PPUSH
56417: CALL 55024 0 1
56421: PPUSH
56422: CALL_OW 256
56426: PUSH
56427: LD_INT 1000
56429: EQUAL
56430: IFFALSE 56449
// ComStop ( group [ i ] ) else
56432: LD_VAR 0 4
56436: PUSH
56437: LD_VAR 0 7
56441: ARRAY
56442: PPUSH
56443: CALL_OW 141
56447: GO 56612
// if not HasTask ( group [ i ] ) and to_heal then
56449: LD_VAR 0 4
56453: PUSH
56454: LD_VAR 0 7
56458: ARRAY
56459: PPUSH
56460: CALL_OW 314
56464: NOT
56465: PUSH
56466: LD_VAR 0 30
56470: AND
56471: IFFALSE 56612
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
56473: LD_ADDR_VAR 0 13
56477: PUSH
56478: LD_VAR 0 30
56482: PPUSH
56483: LD_INT 3
56485: PUSH
56486: LD_INT 54
56488: PUSH
56489: EMPTY
56490: LIST
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PPUSH
56496: CALL_OW 72
56500: PPUSH
56501: LD_VAR 0 4
56505: PUSH
56506: LD_VAR 0 7
56510: ARRAY
56511: PPUSH
56512: CALL_OW 74
56516: ST_TO_ADDR
// if z then
56517: LD_VAR 0 13
56521: IFFALSE 56612
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
56523: LD_INT 91
56525: PUSH
56526: LD_VAR 0 13
56530: PUSH
56531: LD_INT 10
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 81
56541: PUSH
56542: LD_VAR 0 13
56546: PPUSH
56547: CALL_OW 255
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PPUSH
56560: CALL_OW 69
56564: PUSH
56565: LD_INT 0
56567: EQUAL
56568: IFFALSE 56592
// ComHeal ( group [ i ] , z ) else
56570: LD_VAR 0 4
56574: PUSH
56575: LD_VAR 0 7
56579: ARRAY
56580: PPUSH
56581: LD_VAR 0 13
56585: PPUSH
56586: CALL_OW 128
56590: GO 56612
// ComMoveToArea ( group [ i ] , f_heal ) ;
56592: LD_VAR 0 4
56596: PUSH
56597: LD_VAR 0 7
56601: ARRAY
56602: PPUSH
56603: LD_VAR 0 23
56607: PPUSH
56608: CALL_OW 113
// end ; continue ;
56612: GO 55643
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
56614: LD_VAR 0 4
56618: PUSH
56619: LD_VAR 0 7
56623: ARRAY
56624: PPUSH
56625: CALL_OW 256
56629: PUSH
56630: LD_INT 700
56632: LESS
56633: PUSH
56634: LD_VAR 0 4
56638: PUSH
56639: LD_VAR 0 7
56643: ARRAY
56644: PUSH
56645: LD_VAR 0 30
56649: IN
56650: NOT
56651: AND
56652: IFFALSE 56676
// to_heal := to_heal union group [ i ] ;
56654: LD_ADDR_VAR 0 30
56658: PUSH
56659: LD_VAR 0 30
56663: PUSH
56664: LD_VAR 0 4
56668: PUSH
56669: LD_VAR 0 7
56673: ARRAY
56674: UNION
56675: ST_TO_ADDR
// if group [ i ] in to_heal then
56676: LD_VAR 0 4
56680: PUSH
56681: LD_VAR 0 7
56685: ARRAY
56686: PUSH
56687: LD_VAR 0 30
56691: IN
56692: IFFALSE 56801
// begin if GetLives ( group [ i ] ) = 1000 then
56694: LD_VAR 0 4
56698: PUSH
56699: LD_VAR 0 7
56703: ARRAY
56704: PPUSH
56705: CALL_OW 256
56709: PUSH
56710: LD_INT 1000
56712: EQUAL
56713: IFFALSE 56739
// to_heal := to_heal diff group [ i ] else
56715: LD_ADDR_VAR 0 30
56719: PUSH
56720: LD_VAR 0 30
56724: PUSH
56725: LD_VAR 0 4
56729: PUSH
56730: LD_VAR 0 7
56734: ARRAY
56735: DIFF
56736: ST_TO_ADDR
56737: GO 56801
// begin if not IsInArea ( group [ i ] , to_heal ) then
56739: LD_VAR 0 4
56743: PUSH
56744: LD_VAR 0 7
56748: ARRAY
56749: PPUSH
56750: LD_VAR 0 30
56754: PPUSH
56755: CALL_OW 308
56759: NOT
56760: IFFALSE 56784
// ComMoveToArea ( group [ i ] , f_heal ) else
56762: LD_VAR 0 4
56766: PUSH
56767: LD_VAR 0 7
56771: ARRAY
56772: PPUSH
56773: LD_VAR 0 23
56777: PPUSH
56778: CALL_OW 113
56782: GO 56799
// ComHold ( group [ i ] ) ;
56784: LD_VAR 0 4
56788: PUSH
56789: LD_VAR 0 7
56793: ARRAY
56794: PPUSH
56795: CALL_OW 140
// continue ;
56799: GO 55643
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
56801: LD_VAR 0 4
56805: PUSH
56806: LD_VAR 0 7
56810: ARRAY
56811: PPUSH
56812: LD_INT 10
56814: PPUSH
56815: CALL 53444 0 2
56819: NOT
56820: PUSH
56821: LD_VAR 0 16
56825: PUSH
56826: LD_VAR 0 7
56830: ARRAY
56831: PUSH
56832: EMPTY
56833: EQUAL
56834: NOT
56835: AND
56836: IFFALSE 57102
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
56838: LD_VAR 0 4
56842: PUSH
56843: LD_VAR 0 7
56847: ARRAY
56848: PPUSH
56849: CALL_OW 262
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: LD_INT 2
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: IN
56864: IFFALSE 56905
// if GetFuel ( group [ i ] ) < 10 then
56866: LD_VAR 0 4
56870: PUSH
56871: LD_VAR 0 7
56875: ARRAY
56876: PPUSH
56877: CALL_OW 261
56881: PUSH
56882: LD_INT 10
56884: LESS
56885: IFFALSE 56905
// SetFuel ( group [ i ] , 12 ) ;
56887: LD_VAR 0 4
56891: PUSH
56892: LD_VAR 0 7
56896: ARRAY
56897: PPUSH
56898: LD_INT 12
56900: PPUSH
56901: CALL_OW 240
// if units_path [ i ] then
56905: LD_VAR 0 16
56909: PUSH
56910: LD_VAR 0 7
56914: ARRAY
56915: IFFALSE 57100
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
56917: LD_VAR 0 4
56921: PUSH
56922: LD_VAR 0 7
56926: ARRAY
56927: PPUSH
56928: LD_VAR 0 16
56932: PUSH
56933: LD_VAR 0 7
56937: ARRAY
56938: PUSH
56939: LD_INT 1
56941: ARRAY
56942: PUSH
56943: LD_INT 1
56945: ARRAY
56946: PPUSH
56947: LD_VAR 0 16
56951: PUSH
56952: LD_VAR 0 7
56956: ARRAY
56957: PUSH
56958: LD_INT 1
56960: ARRAY
56961: PUSH
56962: LD_INT 2
56964: ARRAY
56965: PPUSH
56966: CALL_OW 297
56970: PUSH
56971: LD_INT 6
56973: GREATER
56974: IFFALSE 57049
// begin if not HasTask ( group [ i ] ) then
56976: LD_VAR 0 4
56980: PUSH
56981: LD_VAR 0 7
56985: ARRAY
56986: PPUSH
56987: CALL_OW 314
56991: NOT
56992: IFFALSE 57047
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
56994: LD_VAR 0 4
56998: PUSH
56999: LD_VAR 0 7
57003: ARRAY
57004: PPUSH
57005: LD_VAR 0 16
57009: PUSH
57010: LD_VAR 0 7
57014: ARRAY
57015: PUSH
57016: LD_INT 1
57018: ARRAY
57019: PUSH
57020: LD_INT 1
57022: ARRAY
57023: PPUSH
57024: LD_VAR 0 16
57028: PUSH
57029: LD_VAR 0 7
57033: ARRAY
57034: PUSH
57035: LD_INT 1
57037: ARRAY
57038: PUSH
57039: LD_INT 2
57041: ARRAY
57042: PPUSH
57043: CALL_OW 114
// end else
57047: GO 57100
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
57049: LD_ADDR_VAR 0 15
57053: PUSH
57054: LD_VAR 0 16
57058: PUSH
57059: LD_VAR 0 7
57063: ARRAY
57064: PPUSH
57065: LD_INT 1
57067: PPUSH
57068: CALL_OW 3
57072: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
57073: LD_ADDR_VAR 0 16
57077: PUSH
57078: LD_VAR 0 16
57082: PPUSH
57083: LD_VAR 0 7
57087: PPUSH
57088: LD_VAR 0 15
57092: PPUSH
57093: CALL_OW 1
57097: ST_TO_ADDR
// continue ;
57098: GO 55643
// end ; end ; end else
57100: GO 59764
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
57102: LD_ADDR_VAR 0 14
57106: PUSH
57107: LD_INT 81
57109: PUSH
57110: LD_VAR 0 4
57114: PUSH
57115: LD_VAR 0 7
57119: ARRAY
57120: PPUSH
57121: CALL_OW 255
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PPUSH
57130: CALL_OW 69
57134: ST_TO_ADDR
// if not tmp then
57135: LD_VAR 0 14
57139: NOT
57140: IFFALSE 57144
// continue ;
57142: GO 55643
// if f_ignore_area then
57144: LD_VAR 0 17
57148: IFFALSE 57236
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
57150: LD_ADDR_VAR 0 15
57154: PUSH
57155: LD_VAR 0 14
57159: PPUSH
57160: LD_INT 3
57162: PUSH
57163: LD_INT 92
57165: PUSH
57166: LD_VAR 0 17
57170: PUSH
57171: LD_INT 1
57173: ARRAY
57174: PUSH
57175: LD_VAR 0 17
57179: PUSH
57180: LD_INT 2
57182: ARRAY
57183: PUSH
57184: LD_VAR 0 17
57188: PUSH
57189: LD_INT 3
57191: ARRAY
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PPUSH
57203: CALL_OW 72
57207: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
57208: LD_VAR 0 14
57212: PUSH
57213: LD_VAR 0 15
57217: DIFF
57218: IFFALSE 57236
// tmp := tmp diff tmp2 ;
57220: LD_ADDR_VAR 0 14
57224: PUSH
57225: LD_VAR 0 14
57229: PUSH
57230: LD_VAR 0 15
57234: DIFF
57235: ST_TO_ADDR
// end ; if not f_murder then
57236: LD_VAR 0 20
57240: NOT
57241: IFFALSE 57299
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
57243: LD_ADDR_VAR 0 15
57247: PUSH
57248: LD_VAR 0 14
57252: PPUSH
57253: LD_INT 3
57255: PUSH
57256: LD_INT 50
57258: PUSH
57259: EMPTY
57260: LIST
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PPUSH
57266: CALL_OW 72
57270: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
57271: LD_VAR 0 14
57275: PUSH
57276: LD_VAR 0 15
57280: DIFF
57281: IFFALSE 57299
// tmp := tmp diff tmp2 ;
57283: LD_ADDR_VAR 0 14
57287: PUSH
57288: LD_VAR 0 14
57292: PUSH
57293: LD_VAR 0 15
57297: DIFF
57298: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
57299: LD_ADDR_VAR 0 14
57303: PUSH
57304: LD_VAR 0 4
57308: PUSH
57309: LD_VAR 0 7
57313: ARRAY
57314: PPUSH
57315: LD_VAR 0 14
57319: PPUSH
57320: LD_INT 1
57322: PPUSH
57323: LD_INT 1
57325: PPUSH
57326: CALL 27087 0 4
57330: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
57331: LD_VAR 0 4
57335: PUSH
57336: LD_VAR 0 7
57340: ARRAY
57341: PPUSH
57342: CALL_OW 257
57346: PUSH
57347: LD_INT 1
57349: EQUAL
57350: IFFALSE 57798
// begin if WantPlant ( group [ i ] ) then
57352: LD_VAR 0 4
57356: PUSH
57357: LD_VAR 0 7
57361: ARRAY
57362: PPUSH
57363: CALL 26588 0 1
57367: IFFALSE 57371
// continue ;
57369: GO 55643
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
57371: LD_VAR 0 18
57375: PUSH
57376: LD_VAR 0 4
57380: PUSH
57381: LD_VAR 0 7
57385: ARRAY
57386: PPUSH
57387: CALL_OW 310
57391: NOT
57392: AND
57393: PUSH
57394: LD_VAR 0 14
57398: PUSH
57399: LD_INT 1
57401: ARRAY
57402: PUSH
57403: LD_VAR 0 14
57407: PPUSH
57408: LD_INT 21
57410: PUSH
57411: LD_INT 2
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 58
57420: PUSH
57421: EMPTY
57422: LIST
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PPUSH
57428: CALL_OW 72
57432: IN
57433: AND
57434: IFFALSE 57470
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
57436: LD_VAR 0 4
57440: PUSH
57441: LD_VAR 0 7
57445: ARRAY
57446: PPUSH
57447: LD_VAR 0 14
57451: PUSH
57452: LD_INT 1
57454: ARRAY
57455: PPUSH
57456: CALL_OW 120
// attacking := true ;
57460: LD_ADDR_VAR 0 29
57464: PUSH
57465: LD_INT 1
57467: ST_TO_ADDR
// continue ;
57468: GO 55643
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
57470: LD_VAR 0 26
57474: PUSH
57475: LD_VAR 0 4
57479: PUSH
57480: LD_VAR 0 7
57484: ARRAY
57485: PPUSH
57486: CALL_OW 257
57490: PUSH
57491: LD_INT 1
57493: EQUAL
57494: AND
57495: PUSH
57496: LD_VAR 0 4
57500: PUSH
57501: LD_VAR 0 7
57505: ARRAY
57506: PPUSH
57507: CALL_OW 256
57511: PUSH
57512: LD_INT 800
57514: LESS
57515: AND
57516: PUSH
57517: LD_VAR 0 4
57521: PUSH
57522: LD_VAR 0 7
57526: ARRAY
57527: PPUSH
57528: CALL_OW 318
57532: NOT
57533: AND
57534: IFFALSE 57551
// ComCrawl ( group [ i ] ) ;
57536: LD_VAR 0 4
57540: PUSH
57541: LD_VAR 0 7
57545: ARRAY
57546: PPUSH
57547: CALL_OW 137
// if f_mines then
57551: LD_VAR 0 21
57555: IFFALSE 57798
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
57557: LD_VAR 0 14
57561: PUSH
57562: LD_INT 1
57564: ARRAY
57565: PPUSH
57566: CALL_OW 247
57570: PUSH
57571: LD_INT 3
57573: EQUAL
57574: PUSH
57575: LD_VAR 0 14
57579: PUSH
57580: LD_INT 1
57582: ARRAY
57583: PUSH
57584: LD_VAR 0 27
57588: IN
57589: NOT
57590: AND
57591: IFFALSE 57798
// begin x := GetX ( tmp [ 1 ] ) ;
57593: LD_ADDR_VAR 0 10
57597: PUSH
57598: LD_VAR 0 14
57602: PUSH
57603: LD_INT 1
57605: ARRAY
57606: PPUSH
57607: CALL_OW 250
57611: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
57612: LD_ADDR_VAR 0 11
57616: PUSH
57617: LD_VAR 0 14
57621: PUSH
57622: LD_INT 1
57624: ARRAY
57625: PPUSH
57626: CALL_OW 251
57630: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
57631: LD_ADDR_VAR 0 12
57635: PUSH
57636: LD_VAR 0 4
57640: PUSH
57641: LD_VAR 0 7
57645: ARRAY
57646: PPUSH
57647: CALL 53529 0 1
57651: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
57652: LD_VAR 0 4
57656: PUSH
57657: LD_VAR 0 7
57661: ARRAY
57662: PPUSH
57663: LD_VAR 0 10
57667: PPUSH
57668: LD_VAR 0 11
57672: PPUSH
57673: LD_VAR 0 14
57677: PUSH
57678: LD_INT 1
57680: ARRAY
57681: PPUSH
57682: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
57686: LD_VAR 0 4
57690: PUSH
57691: LD_VAR 0 7
57695: ARRAY
57696: PPUSH
57697: LD_VAR 0 10
57701: PPUSH
57702: LD_VAR 0 12
57706: PPUSH
57707: LD_INT 7
57709: PPUSH
57710: CALL_OW 272
57714: PPUSH
57715: LD_VAR 0 11
57719: PPUSH
57720: LD_VAR 0 12
57724: PPUSH
57725: LD_INT 7
57727: PPUSH
57728: CALL_OW 273
57732: PPUSH
57733: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
57737: LD_VAR 0 4
57741: PUSH
57742: LD_VAR 0 7
57746: ARRAY
57747: PPUSH
57748: LD_INT 71
57750: PPUSH
57751: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
57755: LD_ADDR_VAR 0 27
57759: PUSH
57760: LD_VAR 0 27
57764: PPUSH
57765: LD_VAR 0 27
57769: PUSH
57770: LD_INT 1
57772: PLUS
57773: PPUSH
57774: LD_VAR 0 14
57778: PUSH
57779: LD_INT 1
57781: ARRAY
57782: PPUSH
57783: CALL_OW 1
57787: ST_TO_ADDR
// attacking := true ;
57788: LD_ADDR_VAR 0 29
57792: PUSH
57793: LD_INT 1
57795: ST_TO_ADDR
// continue ;
57796: GO 55643
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
57798: LD_VAR 0 4
57802: PUSH
57803: LD_VAR 0 7
57807: ARRAY
57808: PPUSH
57809: CALL_OW 257
57813: PUSH
57814: LD_INT 17
57816: EQUAL
57817: PUSH
57818: LD_VAR 0 4
57822: PUSH
57823: LD_VAR 0 7
57827: ARRAY
57828: PPUSH
57829: CALL_OW 110
57833: PUSH
57834: LD_INT 71
57836: EQUAL
57837: NOT
57838: AND
57839: IFFALSE 57985
// begin attacking := false ;
57841: LD_ADDR_VAR 0 29
57845: PUSH
57846: LD_INT 0
57848: ST_TO_ADDR
// k := 5 ;
57849: LD_ADDR_VAR 0 9
57853: PUSH
57854: LD_INT 5
57856: ST_TO_ADDR
// if tmp < k then
57857: LD_VAR 0 14
57861: PUSH
57862: LD_VAR 0 9
57866: LESS
57867: IFFALSE 57879
// k := tmp ;
57869: LD_ADDR_VAR 0 9
57873: PUSH
57874: LD_VAR 0 14
57878: ST_TO_ADDR
// for j = 1 to k do
57879: LD_ADDR_VAR 0 8
57883: PUSH
57884: DOUBLE
57885: LD_INT 1
57887: DEC
57888: ST_TO_ADDR
57889: LD_VAR 0 9
57893: PUSH
57894: FOR_TO
57895: IFFALSE 57983
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
57897: LD_VAR 0 14
57901: PUSH
57902: LD_VAR 0 8
57906: ARRAY
57907: PUSH
57908: LD_VAR 0 14
57912: PPUSH
57913: LD_INT 58
57915: PUSH
57916: EMPTY
57917: LIST
57918: PPUSH
57919: CALL_OW 72
57923: IN
57924: NOT
57925: IFFALSE 57981
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
57927: LD_VAR 0 4
57931: PUSH
57932: LD_VAR 0 7
57936: ARRAY
57937: PPUSH
57938: LD_VAR 0 14
57942: PUSH
57943: LD_VAR 0 8
57947: ARRAY
57948: PPUSH
57949: CALL_OW 115
// attacking := true ;
57953: LD_ADDR_VAR 0 29
57957: PUSH
57958: LD_INT 1
57960: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
57961: LD_VAR 0 4
57965: PUSH
57966: LD_VAR 0 7
57970: ARRAY
57971: PPUSH
57972: LD_INT 71
57974: PPUSH
57975: CALL_OW 109
// continue ;
57979: GO 57894
// end ; end ;
57981: GO 57894
57983: POP
57984: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
57985: LD_VAR 0 4
57989: PUSH
57990: LD_VAR 0 7
57994: ARRAY
57995: PPUSH
57996: CALL_OW 257
58000: PUSH
58001: LD_INT 8
58003: EQUAL
58004: PUSH
58005: LD_VAR 0 4
58009: PUSH
58010: LD_VAR 0 7
58014: ARRAY
58015: PPUSH
58016: CALL_OW 264
58020: PUSH
58021: LD_INT 28
58023: PUSH
58024: LD_INT 45
58026: PUSH
58027: LD_INT 7
58029: PUSH
58030: LD_INT 47
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: IN
58039: OR
58040: IFFALSE 58296
// begin attacking := false ;
58042: LD_ADDR_VAR 0 29
58046: PUSH
58047: LD_INT 0
58049: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
58050: LD_VAR 0 14
58054: PUSH
58055: LD_INT 1
58057: ARRAY
58058: PPUSH
58059: CALL_OW 266
58063: PUSH
58064: LD_INT 32
58066: PUSH
58067: LD_INT 31
58069: PUSH
58070: LD_INT 33
58072: PUSH
58073: LD_INT 4
58075: PUSH
58076: LD_INT 5
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: IN
58086: IFFALSE 58272
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
58088: LD_ADDR_VAR 0 9
58092: PUSH
58093: LD_VAR 0 14
58097: PUSH
58098: LD_INT 1
58100: ARRAY
58101: PPUSH
58102: CALL_OW 266
58106: PPUSH
58107: LD_VAR 0 14
58111: PUSH
58112: LD_INT 1
58114: ARRAY
58115: PPUSH
58116: CALL_OW 250
58120: PPUSH
58121: LD_VAR 0 14
58125: PUSH
58126: LD_INT 1
58128: ARRAY
58129: PPUSH
58130: CALL_OW 251
58134: PPUSH
58135: LD_VAR 0 14
58139: PUSH
58140: LD_INT 1
58142: ARRAY
58143: PPUSH
58144: CALL_OW 254
58148: PPUSH
58149: LD_VAR 0 14
58153: PUSH
58154: LD_INT 1
58156: ARRAY
58157: PPUSH
58158: CALL_OW 248
58162: PPUSH
58163: LD_INT 0
58165: PPUSH
58166: CALL 34899 0 6
58170: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
58171: LD_ADDR_VAR 0 8
58175: PUSH
58176: LD_VAR 0 4
58180: PUSH
58181: LD_VAR 0 7
58185: ARRAY
58186: PPUSH
58187: LD_VAR 0 9
58191: PPUSH
58192: CALL 53569 0 2
58196: ST_TO_ADDR
// if j then
58197: LD_VAR 0 8
58201: IFFALSE 58270
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
58203: LD_VAR 0 8
58207: PUSH
58208: LD_INT 1
58210: ARRAY
58211: PPUSH
58212: LD_VAR 0 8
58216: PUSH
58217: LD_INT 2
58219: ARRAY
58220: PPUSH
58221: CALL_OW 488
58225: IFFALSE 58270
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
58227: LD_VAR 0 4
58231: PUSH
58232: LD_VAR 0 7
58236: ARRAY
58237: PPUSH
58238: LD_VAR 0 8
58242: PUSH
58243: LD_INT 1
58245: ARRAY
58246: PPUSH
58247: LD_VAR 0 8
58251: PUSH
58252: LD_INT 2
58254: ARRAY
58255: PPUSH
58256: CALL_OW 116
// attacking := true ;
58260: LD_ADDR_VAR 0 29
58264: PUSH
58265: LD_INT 1
58267: ST_TO_ADDR
// continue ;
58268: GO 55643
// end ; end else
58270: GO 58296
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58272: LD_VAR 0 4
58276: PUSH
58277: LD_VAR 0 7
58281: ARRAY
58282: PPUSH
58283: LD_VAR 0 14
58287: PUSH
58288: LD_INT 1
58290: ARRAY
58291: PPUSH
58292: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
58296: LD_VAR 0 4
58300: PUSH
58301: LD_VAR 0 7
58305: ARRAY
58306: PPUSH
58307: CALL_OW 265
58311: PUSH
58312: LD_INT 11
58314: EQUAL
58315: IFFALSE 58593
// begin k := 10 ;
58317: LD_ADDR_VAR 0 9
58321: PUSH
58322: LD_INT 10
58324: ST_TO_ADDR
// x := 0 ;
58325: LD_ADDR_VAR 0 10
58329: PUSH
58330: LD_INT 0
58332: ST_TO_ADDR
// if tmp < k then
58333: LD_VAR 0 14
58337: PUSH
58338: LD_VAR 0 9
58342: LESS
58343: IFFALSE 58355
// k := tmp ;
58345: LD_ADDR_VAR 0 9
58349: PUSH
58350: LD_VAR 0 14
58354: ST_TO_ADDR
// for j = k downto 1 do
58355: LD_ADDR_VAR 0 8
58359: PUSH
58360: DOUBLE
58361: LD_VAR 0 9
58365: INC
58366: ST_TO_ADDR
58367: LD_INT 1
58369: PUSH
58370: FOR_DOWNTO
58371: IFFALSE 58446
// begin if GetType ( tmp [ j ] ) = unit_human then
58373: LD_VAR 0 14
58377: PUSH
58378: LD_VAR 0 8
58382: ARRAY
58383: PPUSH
58384: CALL_OW 247
58388: PUSH
58389: LD_INT 1
58391: EQUAL
58392: IFFALSE 58444
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
58394: LD_VAR 0 4
58398: PUSH
58399: LD_VAR 0 7
58403: ARRAY
58404: PPUSH
58405: LD_VAR 0 14
58409: PUSH
58410: LD_VAR 0 8
58414: ARRAY
58415: PPUSH
58416: CALL 53840 0 2
// x := tmp [ j ] ;
58420: LD_ADDR_VAR 0 10
58424: PUSH
58425: LD_VAR 0 14
58429: PUSH
58430: LD_VAR 0 8
58434: ARRAY
58435: ST_TO_ADDR
// attacking := true ;
58436: LD_ADDR_VAR 0 29
58440: PUSH
58441: LD_INT 1
58443: ST_TO_ADDR
// end ; end ;
58444: GO 58370
58446: POP
58447: POP
// if not x then
58448: LD_VAR 0 10
58452: NOT
58453: IFFALSE 58593
// begin attacking := true ;
58455: LD_ADDR_VAR 0 29
58459: PUSH
58460: LD_INT 1
58462: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
58463: LD_VAR 0 4
58467: PUSH
58468: LD_VAR 0 7
58472: ARRAY
58473: PPUSH
58474: CALL_OW 250
58478: PPUSH
58479: LD_VAR 0 4
58483: PUSH
58484: LD_VAR 0 7
58488: ARRAY
58489: PPUSH
58490: CALL_OW 251
58494: PPUSH
58495: CALL_OW 546
58499: PUSH
58500: LD_INT 2
58502: ARRAY
58503: PUSH
58504: LD_VAR 0 14
58508: PUSH
58509: LD_INT 1
58511: ARRAY
58512: PPUSH
58513: CALL_OW 250
58517: PPUSH
58518: LD_VAR 0 14
58522: PUSH
58523: LD_INT 1
58525: ARRAY
58526: PPUSH
58527: CALL_OW 251
58531: PPUSH
58532: CALL_OW 546
58536: PUSH
58537: LD_INT 2
58539: ARRAY
58540: EQUAL
58541: IFFALSE 58569
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
58543: LD_VAR 0 4
58547: PUSH
58548: LD_VAR 0 7
58552: ARRAY
58553: PPUSH
58554: LD_VAR 0 14
58558: PUSH
58559: LD_INT 1
58561: ARRAY
58562: PPUSH
58563: CALL 53840 0 2
58567: GO 58593
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58569: LD_VAR 0 4
58573: PUSH
58574: LD_VAR 0 7
58578: ARRAY
58579: PPUSH
58580: LD_VAR 0 14
58584: PUSH
58585: LD_INT 1
58587: ARRAY
58588: PPUSH
58589: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
58593: LD_VAR 0 4
58597: PUSH
58598: LD_VAR 0 7
58602: ARRAY
58603: PPUSH
58604: CALL_OW 264
58608: PUSH
58609: LD_INT 29
58611: EQUAL
58612: IFFALSE 58978
// begin if WantsToAttack ( group [ i ] ) in bombed then
58614: LD_VAR 0 4
58618: PUSH
58619: LD_VAR 0 7
58623: ARRAY
58624: PPUSH
58625: CALL_OW 319
58629: PUSH
58630: LD_VAR 0 28
58634: IN
58635: IFFALSE 58639
// continue ;
58637: GO 55643
// k := 8 ;
58639: LD_ADDR_VAR 0 9
58643: PUSH
58644: LD_INT 8
58646: ST_TO_ADDR
// x := 0 ;
58647: LD_ADDR_VAR 0 10
58651: PUSH
58652: LD_INT 0
58654: ST_TO_ADDR
// if tmp < k then
58655: LD_VAR 0 14
58659: PUSH
58660: LD_VAR 0 9
58664: LESS
58665: IFFALSE 58677
// k := tmp ;
58667: LD_ADDR_VAR 0 9
58671: PUSH
58672: LD_VAR 0 14
58676: ST_TO_ADDR
// for j = 1 to k do
58677: LD_ADDR_VAR 0 8
58681: PUSH
58682: DOUBLE
58683: LD_INT 1
58685: DEC
58686: ST_TO_ADDR
58687: LD_VAR 0 9
58691: PUSH
58692: FOR_TO
58693: IFFALSE 58825
// begin if GetType ( tmp [ j ] ) = unit_building then
58695: LD_VAR 0 14
58699: PUSH
58700: LD_VAR 0 8
58704: ARRAY
58705: PPUSH
58706: CALL_OW 247
58710: PUSH
58711: LD_INT 3
58713: EQUAL
58714: IFFALSE 58823
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
58716: LD_VAR 0 14
58720: PUSH
58721: LD_VAR 0 8
58725: ARRAY
58726: PUSH
58727: LD_VAR 0 28
58731: IN
58732: NOT
58733: PUSH
58734: LD_VAR 0 14
58738: PUSH
58739: LD_VAR 0 8
58743: ARRAY
58744: PPUSH
58745: CALL_OW 313
58749: AND
58750: IFFALSE 58823
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
58752: LD_VAR 0 4
58756: PUSH
58757: LD_VAR 0 7
58761: ARRAY
58762: PPUSH
58763: LD_VAR 0 14
58767: PUSH
58768: LD_VAR 0 8
58772: ARRAY
58773: PPUSH
58774: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
58778: LD_ADDR_VAR 0 28
58782: PUSH
58783: LD_VAR 0 28
58787: PPUSH
58788: LD_VAR 0 28
58792: PUSH
58793: LD_INT 1
58795: PLUS
58796: PPUSH
58797: LD_VAR 0 14
58801: PUSH
58802: LD_VAR 0 8
58806: ARRAY
58807: PPUSH
58808: CALL_OW 1
58812: ST_TO_ADDR
// attacking := true ;
58813: LD_ADDR_VAR 0 29
58817: PUSH
58818: LD_INT 1
58820: ST_TO_ADDR
// break ;
58821: GO 58825
// end ; end ;
58823: GO 58692
58825: POP
58826: POP
// if not attacking and f_attack_depot then
58827: LD_VAR 0 29
58831: NOT
58832: PUSH
58833: LD_VAR 0 25
58837: AND
58838: IFFALSE 58933
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58840: LD_ADDR_VAR 0 13
58844: PUSH
58845: LD_VAR 0 14
58849: PPUSH
58850: LD_INT 2
58852: PUSH
58853: LD_INT 30
58855: PUSH
58856: LD_INT 0
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 30
58865: PUSH
58866: LD_INT 1
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: LIST
58877: PPUSH
58878: CALL_OW 72
58882: ST_TO_ADDR
// if z then
58883: LD_VAR 0 13
58887: IFFALSE 58933
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
58889: LD_VAR 0 4
58893: PUSH
58894: LD_VAR 0 7
58898: ARRAY
58899: PPUSH
58900: LD_VAR 0 13
58904: PPUSH
58905: LD_VAR 0 4
58909: PUSH
58910: LD_VAR 0 7
58914: ARRAY
58915: PPUSH
58916: CALL_OW 74
58920: PPUSH
58921: CALL_OW 115
// attacking := true ;
58925: LD_ADDR_VAR 0 29
58929: PUSH
58930: LD_INT 1
58932: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
58933: LD_VAR 0 4
58937: PUSH
58938: LD_VAR 0 7
58942: ARRAY
58943: PPUSH
58944: CALL_OW 256
58948: PUSH
58949: LD_INT 500
58951: LESS
58952: IFFALSE 58978
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58954: LD_VAR 0 4
58958: PUSH
58959: LD_VAR 0 7
58963: ARRAY
58964: PPUSH
58965: LD_VAR 0 14
58969: PUSH
58970: LD_INT 1
58972: ARRAY
58973: PPUSH
58974: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
58978: LD_VAR 0 4
58982: PUSH
58983: LD_VAR 0 7
58987: ARRAY
58988: PPUSH
58989: CALL_OW 264
58993: PUSH
58994: LD_INT 49
58996: EQUAL
58997: IFFALSE 59118
// begin if not HasTask ( group [ i ] ) then
58999: LD_VAR 0 4
59003: PUSH
59004: LD_VAR 0 7
59008: ARRAY
59009: PPUSH
59010: CALL_OW 314
59014: NOT
59015: IFFALSE 59118
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
59017: LD_ADDR_VAR 0 9
59021: PUSH
59022: LD_INT 81
59024: PUSH
59025: LD_VAR 0 4
59029: PUSH
59030: LD_VAR 0 7
59034: ARRAY
59035: PPUSH
59036: CALL_OW 255
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PPUSH
59045: CALL_OW 69
59049: PPUSH
59050: LD_VAR 0 4
59054: PUSH
59055: LD_VAR 0 7
59059: ARRAY
59060: PPUSH
59061: CALL_OW 74
59065: ST_TO_ADDR
// if k then
59066: LD_VAR 0 9
59070: IFFALSE 59118
// if GetDistUnits ( group [ i ] , k ) > 10 then
59072: LD_VAR 0 4
59076: PUSH
59077: LD_VAR 0 7
59081: ARRAY
59082: PPUSH
59083: LD_VAR 0 9
59087: PPUSH
59088: CALL_OW 296
59092: PUSH
59093: LD_INT 10
59095: GREATER
59096: IFFALSE 59118
// ComMoveUnit ( group [ i ] , k ) ;
59098: LD_VAR 0 4
59102: PUSH
59103: LD_VAR 0 7
59107: ARRAY
59108: PPUSH
59109: LD_VAR 0 9
59113: PPUSH
59114: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59118: LD_VAR 0 4
59122: PUSH
59123: LD_VAR 0 7
59127: ARRAY
59128: PPUSH
59129: CALL_OW 256
59133: PUSH
59134: LD_INT 250
59136: LESS
59137: PUSH
59138: LD_VAR 0 4
59142: PUSH
59143: LD_VAR 0 7
59147: ARRAY
59148: PUSH
59149: LD_INT 21
59151: PUSH
59152: LD_INT 2
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 23
59161: PUSH
59162: LD_INT 2
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PPUSH
59173: CALL_OW 69
59177: IN
59178: AND
59179: IFFALSE 59304
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
59181: LD_ADDR_VAR 0 9
59185: PUSH
59186: LD_OWVAR 3
59190: PUSH
59191: LD_VAR 0 4
59195: PUSH
59196: LD_VAR 0 7
59200: ARRAY
59201: DIFF
59202: PPUSH
59203: LD_VAR 0 4
59207: PUSH
59208: LD_VAR 0 7
59212: ARRAY
59213: PPUSH
59214: CALL_OW 74
59218: ST_TO_ADDR
// if not k then
59219: LD_VAR 0 9
59223: NOT
59224: IFFALSE 59228
// continue ;
59226: GO 55643
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
59228: LD_VAR 0 9
59232: PUSH
59233: LD_INT 81
59235: PUSH
59236: LD_VAR 0 4
59240: PUSH
59241: LD_VAR 0 7
59245: ARRAY
59246: PPUSH
59247: CALL_OW 255
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PPUSH
59256: CALL_OW 69
59260: IN
59261: PUSH
59262: LD_VAR 0 9
59266: PPUSH
59267: LD_VAR 0 4
59271: PUSH
59272: LD_VAR 0 7
59276: ARRAY
59277: PPUSH
59278: CALL_OW 296
59282: PUSH
59283: LD_INT 5
59285: LESS
59286: AND
59287: IFFALSE 59304
// ComAutodestruct ( group [ i ] ) ;
59289: LD_VAR 0 4
59293: PUSH
59294: LD_VAR 0 7
59298: ARRAY
59299: PPUSH
59300: CALL 53738 0 1
// end ; if f_attack_depot then
59304: LD_VAR 0 25
59308: IFFALSE 59420
// begin k := 6 ;
59310: LD_ADDR_VAR 0 9
59314: PUSH
59315: LD_INT 6
59317: ST_TO_ADDR
// if tmp < k then
59318: LD_VAR 0 14
59322: PUSH
59323: LD_VAR 0 9
59327: LESS
59328: IFFALSE 59340
// k := tmp ;
59330: LD_ADDR_VAR 0 9
59334: PUSH
59335: LD_VAR 0 14
59339: ST_TO_ADDR
// for j = 1 to k do
59340: LD_ADDR_VAR 0 8
59344: PUSH
59345: DOUBLE
59346: LD_INT 1
59348: DEC
59349: ST_TO_ADDR
59350: LD_VAR 0 9
59354: PUSH
59355: FOR_TO
59356: IFFALSE 59418
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
59358: LD_VAR 0 8
59362: PPUSH
59363: CALL_OW 266
59367: PUSH
59368: LD_INT 0
59370: PUSH
59371: LD_INT 1
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: IN
59378: IFFALSE 59416
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
59380: LD_VAR 0 4
59384: PUSH
59385: LD_VAR 0 7
59389: ARRAY
59390: PPUSH
59391: LD_VAR 0 14
59395: PUSH
59396: LD_VAR 0 8
59400: ARRAY
59401: PPUSH
59402: CALL_OW 115
// attacking := true ;
59406: LD_ADDR_VAR 0 29
59410: PUSH
59411: LD_INT 1
59413: ST_TO_ADDR
// break ;
59414: GO 59418
// end ;
59416: GO 59355
59418: POP
59419: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
59420: LD_VAR 0 4
59424: PUSH
59425: LD_VAR 0 7
59429: ARRAY
59430: PPUSH
59431: CALL_OW 302
59435: PUSH
59436: LD_VAR 0 29
59440: NOT
59441: AND
59442: IFFALSE 59764
// begin if GetTag ( group [ i ] ) = 71 then
59444: LD_VAR 0 4
59448: PUSH
59449: LD_VAR 0 7
59453: ARRAY
59454: PPUSH
59455: CALL_OW 110
59459: PUSH
59460: LD_INT 71
59462: EQUAL
59463: IFFALSE 59504
// begin if HasTask ( group [ i ] ) then
59465: LD_VAR 0 4
59469: PUSH
59470: LD_VAR 0 7
59474: ARRAY
59475: PPUSH
59476: CALL_OW 314
59480: IFFALSE 59486
// continue else
59482: GO 55643
59484: GO 59504
// SetTag ( group [ i ] , 0 ) ;
59486: LD_VAR 0 4
59490: PUSH
59491: LD_VAR 0 7
59495: ARRAY
59496: PPUSH
59497: LD_INT 0
59499: PPUSH
59500: CALL_OW 109
// end ; k := 8 ;
59504: LD_ADDR_VAR 0 9
59508: PUSH
59509: LD_INT 8
59511: ST_TO_ADDR
// x := 0 ;
59512: LD_ADDR_VAR 0 10
59516: PUSH
59517: LD_INT 0
59519: ST_TO_ADDR
// if tmp < k then
59520: LD_VAR 0 14
59524: PUSH
59525: LD_VAR 0 9
59529: LESS
59530: IFFALSE 59542
// k := tmp ;
59532: LD_ADDR_VAR 0 9
59536: PUSH
59537: LD_VAR 0 14
59541: ST_TO_ADDR
// for j = 1 to k do
59542: LD_ADDR_VAR 0 8
59546: PUSH
59547: DOUBLE
59548: LD_INT 1
59550: DEC
59551: ST_TO_ADDR
59552: LD_VAR 0 9
59556: PUSH
59557: FOR_TO
59558: IFFALSE 59656
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
59560: LD_VAR 0 14
59564: PUSH
59565: LD_VAR 0 8
59569: ARRAY
59570: PPUSH
59571: CALL_OW 247
59575: PUSH
59576: LD_INT 1
59578: EQUAL
59579: PUSH
59580: LD_VAR 0 14
59584: PUSH
59585: LD_VAR 0 8
59589: ARRAY
59590: PPUSH
59591: CALL_OW 256
59595: PUSH
59596: LD_INT 250
59598: LESS
59599: PUSH
59600: LD_VAR 0 20
59604: AND
59605: PUSH
59606: LD_VAR 0 20
59610: NOT
59611: PUSH
59612: LD_VAR 0 14
59616: PUSH
59617: LD_VAR 0 8
59621: ARRAY
59622: PPUSH
59623: CALL_OW 256
59627: PUSH
59628: LD_INT 250
59630: GREATEREQUAL
59631: AND
59632: OR
59633: AND
59634: IFFALSE 59654
// begin x := tmp [ j ] ;
59636: LD_ADDR_VAR 0 10
59640: PUSH
59641: LD_VAR 0 14
59645: PUSH
59646: LD_VAR 0 8
59650: ARRAY
59651: ST_TO_ADDR
// break ;
59652: GO 59656
// end ;
59654: GO 59557
59656: POP
59657: POP
// if x then
59658: LD_VAR 0 10
59662: IFFALSE 59686
// ComAttackUnit ( group [ i ] , x ) else
59664: LD_VAR 0 4
59668: PUSH
59669: LD_VAR 0 7
59673: ARRAY
59674: PPUSH
59675: LD_VAR 0 10
59679: PPUSH
59680: CALL_OW 115
59684: GO 59710
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
59686: LD_VAR 0 4
59690: PUSH
59691: LD_VAR 0 7
59695: ARRAY
59696: PPUSH
59697: LD_VAR 0 14
59701: PUSH
59702: LD_INT 1
59704: ARRAY
59705: PPUSH
59706: CALL_OW 115
// if not HasTask ( group [ i ] ) then
59710: LD_VAR 0 4
59714: PUSH
59715: LD_VAR 0 7
59719: ARRAY
59720: PPUSH
59721: CALL_OW 314
59725: NOT
59726: IFFALSE 59764
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
59728: LD_VAR 0 4
59732: PUSH
59733: LD_VAR 0 7
59737: ARRAY
59738: PPUSH
59739: LD_VAR 0 14
59743: PPUSH
59744: LD_VAR 0 4
59748: PUSH
59749: LD_VAR 0 7
59753: ARRAY
59754: PPUSH
59755: CALL_OW 74
59759: PPUSH
59760: CALL_OW 115
// end ; end ; end ;
59764: GO 55643
59766: POP
59767: POP
// wait ( 0 0$2 ) ;
59768: LD_INT 70
59770: PPUSH
59771: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
59775: LD_VAR 0 4
59779: NOT
59780: PUSH
59781: LD_VAR 0 4
59785: PUSH
59786: EMPTY
59787: EQUAL
59788: OR
59789: PUSH
59790: LD_INT 81
59792: PUSH
59793: LD_VAR 0 35
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PPUSH
59802: CALL_OW 69
59806: NOT
59807: OR
59808: IFFALSE 55628
// end ;
59810: LD_VAR 0 2
59814: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59815: LD_INT 0
59817: PPUSH
59818: PPUSH
59819: PPUSH
59820: PPUSH
// if not base_units then
59821: LD_VAR 0 1
59825: NOT
59826: IFFALSE 59830
// exit ;
59828: GO 59917
// result := false ;
59830: LD_ADDR_VAR 0 2
59834: PUSH
59835: LD_INT 0
59837: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59838: LD_ADDR_VAR 0 5
59842: PUSH
59843: LD_VAR 0 1
59847: PPUSH
59848: LD_INT 21
59850: PUSH
59851: LD_INT 3
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PPUSH
59858: CALL_OW 72
59862: ST_TO_ADDR
// if not tmp then
59863: LD_VAR 0 5
59867: NOT
59868: IFFALSE 59872
// exit ;
59870: GO 59917
// for i in tmp do
59872: LD_ADDR_VAR 0 3
59876: PUSH
59877: LD_VAR 0 5
59881: PUSH
59882: FOR_IN
59883: IFFALSE 59915
// begin result := EnemyInRange ( i , 22 ) ;
59885: LD_ADDR_VAR 0 2
59889: PUSH
59890: LD_VAR 0 3
59894: PPUSH
59895: LD_INT 22
59897: PPUSH
59898: CALL 53444 0 2
59902: ST_TO_ADDR
// if result then
59903: LD_VAR 0 2
59907: IFFALSE 59913
// exit ;
59909: POP
59910: POP
59911: GO 59917
// end ;
59913: GO 59882
59915: POP
59916: POP
// end ;
59917: LD_VAR 0 2
59921: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59922: LD_INT 0
59924: PPUSH
59925: PPUSH
// if not units then
59926: LD_VAR 0 1
59930: NOT
59931: IFFALSE 59935
// exit ;
59933: GO 60005
// result := [ ] ;
59935: LD_ADDR_VAR 0 3
59939: PUSH
59940: EMPTY
59941: ST_TO_ADDR
// for i in units do
59942: LD_ADDR_VAR 0 4
59946: PUSH
59947: LD_VAR 0 1
59951: PUSH
59952: FOR_IN
59953: IFFALSE 60003
// if GetTag ( i ) = tag then
59955: LD_VAR 0 4
59959: PPUSH
59960: CALL_OW 110
59964: PUSH
59965: LD_VAR 0 2
59969: EQUAL
59970: IFFALSE 60001
// result := Insert ( result , result + 1 , i ) ;
59972: LD_ADDR_VAR 0 3
59976: PUSH
59977: LD_VAR 0 3
59981: PPUSH
59982: LD_VAR 0 3
59986: PUSH
59987: LD_INT 1
59989: PLUS
59990: PPUSH
59991: LD_VAR 0 4
59995: PPUSH
59996: CALL_OW 2
60000: ST_TO_ADDR
60001: GO 59952
60003: POP
60004: POP
// end ;
60005: LD_VAR 0 3
60009: RET
// export function IsDriver ( un ) ; begin
60010: LD_INT 0
60012: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60013: LD_ADDR_VAR 0 2
60017: PUSH
60018: LD_VAR 0 1
60022: PUSH
60023: LD_INT 55
60025: PUSH
60026: EMPTY
60027: LIST
60028: PPUSH
60029: CALL_OW 69
60033: IN
60034: ST_TO_ADDR
// end ;
60035: LD_VAR 0 2
60039: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60040: LD_INT 0
60042: PPUSH
60043: PPUSH
// list := [ ] ;
60044: LD_ADDR_VAR 0 5
60048: PUSH
60049: EMPTY
60050: ST_TO_ADDR
// case d of 0 :
60051: LD_VAR 0 3
60055: PUSH
60056: LD_INT 0
60058: DOUBLE
60059: EQUAL
60060: IFTRUE 60064
60062: GO 60197
60064: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60065: LD_ADDR_VAR 0 5
60069: PUSH
60070: LD_VAR 0 1
60074: PUSH
60075: LD_INT 4
60077: MINUS
60078: PUSH
60079: LD_VAR 0 2
60083: PUSH
60084: LD_INT 4
60086: MINUS
60087: PUSH
60088: LD_INT 2
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: LIST
60095: PUSH
60096: LD_VAR 0 1
60100: PUSH
60101: LD_INT 3
60103: MINUS
60104: PUSH
60105: LD_VAR 0 2
60109: PUSH
60110: LD_INT 1
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: LIST
60117: PUSH
60118: LD_VAR 0 1
60122: PUSH
60123: LD_INT 4
60125: PLUS
60126: PUSH
60127: LD_VAR 0 2
60131: PUSH
60132: LD_INT 4
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: LIST
60139: PUSH
60140: LD_VAR 0 1
60144: PUSH
60145: LD_INT 3
60147: PLUS
60148: PUSH
60149: LD_VAR 0 2
60153: PUSH
60154: LD_INT 3
60156: PLUS
60157: PUSH
60158: LD_INT 5
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: LIST
60165: PUSH
60166: LD_VAR 0 1
60170: PUSH
60171: LD_VAR 0 2
60175: PUSH
60176: LD_INT 4
60178: PLUS
60179: PUSH
60180: LD_INT 0
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: LIST
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: ST_TO_ADDR
// end ; 1 :
60195: GO 60895
60197: LD_INT 1
60199: DOUBLE
60200: EQUAL
60201: IFTRUE 60205
60203: GO 60338
60205: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60206: LD_ADDR_VAR 0 5
60210: PUSH
60211: LD_VAR 0 1
60215: PUSH
60216: LD_VAR 0 2
60220: PUSH
60221: LD_INT 4
60223: MINUS
60224: PUSH
60225: LD_INT 3
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: LIST
60232: PUSH
60233: LD_VAR 0 1
60237: PUSH
60238: LD_INT 3
60240: MINUS
60241: PUSH
60242: LD_VAR 0 2
60246: PUSH
60247: LD_INT 3
60249: MINUS
60250: PUSH
60251: LD_INT 2
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: LIST
60258: PUSH
60259: LD_VAR 0 1
60263: PUSH
60264: LD_INT 4
60266: MINUS
60267: PUSH
60268: LD_VAR 0 2
60272: PUSH
60273: LD_INT 1
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: LIST
60280: PUSH
60281: LD_VAR 0 1
60285: PUSH
60286: LD_VAR 0 2
60290: PUSH
60291: LD_INT 3
60293: PLUS
60294: PUSH
60295: LD_INT 0
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: LIST
60302: PUSH
60303: LD_VAR 0 1
60307: PUSH
60308: LD_INT 4
60310: PLUS
60311: PUSH
60312: LD_VAR 0 2
60316: PUSH
60317: LD_INT 4
60319: PLUS
60320: PUSH
60321: LD_INT 5
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: LIST
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: ST_TO_ADDR
// end ; 2 :
60336: GO 60895
60338: LD_INT 2
60340: DOUBLE
60341: EQUAL
60342: IFTRUE 60346
60344: GO 60475
60346: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60347: LD_ADDR_VAR 0 5
60351: PUSH
60352: LD_VAR 0 1
60356: PUSH
60357: LD_VAR 0 2
60361: PUSH
60362: LD_INT 3
60364: MINUS
60365: PUSH
60366: LD_INT 3
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: LIST
60373: PUSH
60374: LD_VAR 0 1
60378: PUSH
60379: LD_INT 4
60381: PLUS
60382: PUSH
60383: LD_VAR 0 2
60387: PUSH
60388: LD_INT 4
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: LIST
60395: PUSH
60396: LD_VAR 0 1
60400: PUSH
60401: LD_VAR 0 2
60405: PUSH
60406: LD_INT 4
60408: PLUS
60409: PUSH
60410: LD_INT 0
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: LIST
60417: PUSH
60418: LD_VAR 0 1
60422: PUSH
60423: LD_INT 3
60425: MINUS
60426: PUSH
60427: LD_VAR 0 2
60431: PUSH
60432: LD_INT 1
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: LIST
60439: PUSH
60440: LD_VAR 0 1
60444: PUSH
60445: LD_INT 4
60447: MINUS
60448: PUSH
60449: LD_VAR 0 2
60453: PUSH
60454: LD_INT 4
60456: MINUS
60457: PUSH
60458: LD_INT 2
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: LIST
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: ST_TO_ADDR
// end ; 3 :
60473: GO 60895
60475: LD_INT 3
60477: DOUBLE
60478: EQUAL
60479: IFTRUE 60483
60481: GO 60616
60483: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60484: LD_ADDR_VAR 0 5
60488: PUSH
60489: LD_VAR 0 1
60493: PUSH
60494: LD_INT 3
60496: PLUS
60497: PUSH
60498: LD_VAR 0 2
60502: PUSH
60503: LD_INT 4
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: LIST
60510: PUSH
60511: LD_VAR 0 1
60515: PUSH
60516: LD_INT 4
60518: PLUS
60519: PUSH
60520: LD_VAR 0 2
60524: PUSH
60525: LD_INT 4
60527: PLUS
60528: PUSH
60529: LD_INT 5
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: LIST
60536: PUSH
60537: LD_VAR 0 1
60541: PUSH
60542: LD_INT 4
60544: MINUS
60545: PUSH
60546: LD_VAR 0 2
60550: PUSH
60551: LD_INT 1
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: LIST
60558: PUSH
60559: LD_VAR 0 1
60563: PUSH
60564: LD_VAR 0 2
60568: PUSH
60569: LD_INT 4
60571: MINUS
60572: PUSH
60573: LD_INT 3
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: LIST
60580: PUSH
60581: LD_VAR 0 1
60585: PUSH
60586: LD_INT 3
60588: MINUS
60589: PUSH
60590: LD_VAR 0 2
60594: PUSH
60595: LD_INT 3
60597: MINUS
60598: PUSH
60599: LD_INT 2
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: LIST
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: ST_TO_ADDR
// end ; 4 :
60614: GO 60895
60616: LD_INT 4
60618: DOUBLE
60619: EQUAL
60620: IFTRUE 60624
60622: GO 60757
60624: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60625: LD_ADDR_VAR 0 5
60629: PUSH
60630: LD_VAR 0 1
60634: PUSH
60635: LD_VAR 0 2
60639: PUSH
60640: LD_INT 4
60642: PLUS
60643: PUSH
60644: LD_INT 0
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: LIST
60651: PUSH
60652: LD_VAR 0 1
60656: PUSH
60657: LD_INT 3
60659: PLUS
60660: PUSH
60661: LD_VAR 0 2
60665: PUSH
60666: LD_INT 3
60668: PLUS
60669: PUSH
60670: LD_INT 5
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: LIST
60677: PUSH
60678: LD_VAR 0 1
60682: PUSH
60683: LD_INT 4
60685: PLUS
60686: PUSH
60687: LD_VAR 0 2
60691: PUSH
60692: LD_INT 4
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: LIST
60699: PUSH
60700: LD_VAR 0 1
60704: PUSH
60705: LD_VAR 0 2
60709: PUSH
60710: LD_INT 3
60712: MINUS
60713: PUSH
60714: LD_INT 3
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: LIST
60721: PUSH
60722: LD_VAR 0 1
60726: PUSH
60727: LD_INT 4
60729: MINUS
60730: PUSH
60731: LD_VAR 0 2
60735: PUSH
60736: LD_INT 4
60738: MINUS
60739: PUSH
60740: LD_INT 2
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: LIST
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: ST_TO_ADDR
// end ; 5 :
60755: GO 60895
60757: LD_INT 5
60759: DOUBLE
60760: EQUAL
60761: IFTRUE 60765
60763: GO 60894
60765: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60766: LD_ADDR_VAR 0 5
60770: PUSH
60771: LD_VAR 0 1
60775: PUSH
60776: LD_INT 4
60778: MINUS
60779: PUSH
60780: LD_VAR 0 2
60784: PUSH
60785: LD_INT 1
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: LIST
60792: PUSH
60793: LD_VAR 0 1
60797: PUSH
60798: LD_VAR 0 2
60802: PUSH
60803: LD_INT 4
60805: MINUS
60806: PUSH
60807: LD_INT 3
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: LIST
60814: PUSH
60815: LD_VAR 0 1
60819: PUSH
60820: LD_INT 4
60822: PLUS
60823: PUSH
60824: LD_VAR 0 2
60828: PUSH
60829: LD_INT 4
60831: PLUS
60832: PUSH
60833: LD_INT 5
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: LIST
60840: PUSH
60841: LD_VAR 0 1
60845: PUSH
60846: LD_INT 3
60848: PLUS
60849: PUSH
60850: LD_VAR 0 2
60854: PUSH
60855: LD_INT 4
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: LIST
60862: PUSH
60863: LD_VAR 0 1
60867: PUSH
60868: LD_VAR 0 2
60872: PUSH
60873: LD_INT 3
60875: PLUS
60876: PUSH
60877: LD_INT 0
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: LIST
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: ST_TO_ADDR
// end ; end ;
60892: GO 60895
60894: POP
// result := list ;
60895: LD_ADDR_VAR 0 4
60899: PUSH
60900: LD_VAR 0 5
60904: ST_TO_ADDR
// end ;
60905: LD_VAR 0 4
60909: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60910: LD_INT 0
60912: PPUSH
60913: PPUSH
60914: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60915: LD_VAR 0 1
60919: NOT
60920: PUSH
60921: LD_VAR 0 2
60925: PUSH
60926: LD_INT 1
60928: PUSH
60929: LD_INT 2
60931: PUSH
60932: LD_INT 3
60934: PUSH
60935: LD_INT 4
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: IN
60944: NOT
60945: OR
60946: IFFALSE 60950
// exit ;
60948: GO 61042
// tmp := [ ] ;
60950: LD_ADDR_VAR 0 5
60954: PUSH
60955: EMPTY
60956: ST_TO_ADDR
// for i in units do
60957: LD_ADDR_VAR 0 4
60961: PUSH
60962: LD_VAR 0 1
60966: PUSH
60967: FOR_IN
60968: IFFALSE 61011
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60970: LD_ADDR_VAR 0 5
60974: PUSH
60975: LD_VAR 0 5
60979: PPUSH
60980: LD_VAR 0 5
60984: PUSH
60985: LD_INT 1
60987: PLUS
60988: PPUSH
60989: LD_VAR 0 4
60993: PPUSH
60994: LD_VAR 0 2
60998: PPUSH
60999: CALL_OW 259
61003: PPUSH
61004: CALL_OW 2
61008: ST_TO_ADDR
61009: GO 60967
61011: POP
61012: POP
// if not tmp then
61013: LD_VAR 0 5
61017: NOT
61018: IFFALSE 61022
// exit ;
61020: GO 61042
// result := SortListByListDesc ( units , tmp ) ;
61022: LD_ADDR_VAR 0 3
61026: PUSH
61027: LD_VAR 0 1
61031: PPUSH
61032: LD_VAR 0 5
61036: PPUSH
61037: CALL_OW 77
61041: ST_TO_ADDR
// end ;
61042: LD_VAR 0 3
61046: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61047: LD_INT 0
61049: PPUSH
61050: PPUSH
61051: PPUSH
// x := GetX ( building ) ;
61052: LD_ADDR_VAR 0 4
61056: PUSH
61057: LD_VAR 0 2
61061: PPUSH
61062: CALL_OW 250
61066: ST_TO_ADDR
// y := GetY ( building ) ;
61067: LD_ADDR_VAR 0 5
61071: PUSH
61072: LD_VAR 0 2
61076: PPUSH
61077: CALL_OW 251
61081: ST_TO_ADDR
// if GetTaskList ( unit ) then
61082: LD_VAR 0 1
61086: PPUSH
61087: CALL_OW 437
61091: IFFALSE 61186
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61093: LD_STRING e
61095: PUSH
61096: LD_VAR 0 1
61100: PPUSH
61101: CALL_OW 437
61105: PUSH
61106: LD_INT 1
61108: ARRAY
61109: PUSH
61110: LD_INT 1
61112: ARRAY
61113: EQUAL
61114: PUSH
61115: LD_VAR 0 4
61119: PUSH
61120: LD_VAR 0 1
61124: PPUSH
61125: CALL_OW 437
61129: PUSH
61130: LD_INT 1
61132: ARRAY
61133: PUSH
61134: LD_INT 2
61136: ARRAY
61137: EQUAL
61138: AND
61139: PUSH
61140: LD_VAR 0 5
61144: PUSH
61145: LD_VAR 0 1
61149: PPUSH
61150: CALL_OW 437
61154: PUSH
61155: LD_INT 1
61157: ARRAY
61158: PUSH
61159: LD_INT 3
61161: ARRAY
61162: EQUAL
61163: AND
61164: IFFALSE 61176
// result := true else
61166: LD_ADDR_VAR 0 3
61170: PUSH
61171: LD_INT 1
61173: ST_TO_ADDR
61174: GO 61184
// result := false ;
61176: LD_ADDR_VAR 0 3
61180: PUSH
61181: LD_INT 0
61183: ST_TO_ADDR
// end else
61184: GO 61194
// result := false ;
61186: LD_ADDR_VAR 0 3
61190: PUSH
61191: LD_INT 0
61193: ST_TO_ADDR
// end ;
61194: LD_VAR 0 3
61198: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61199: LD_INT 0
61201: PPUSH
61202: PPUSH
61203: PPUSH
61204: PPUSH
// if not unit or not area then
61205: LD_VAR 0 1
61209: NOT
61210: PUSH
61211: LD_VAR 0 2
61215: NOT
61216: OR
61217: IFFALSE 61221
// exit ;
61219: GO 61385
// tmp := AreaToList ( area , i ) ;
61221: LD_ADDR_VAR 0 6
61225: PUSH
61226: LD_VAR 0 2
61230: PPUSH
61231: LD_VAR 0 5
61235: PPUSH
61236: CALL_OW 517
61240: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61241: LD_ADDR_VAR 0 5
61245: PUSH
61246: DOUBLE
61247: LD_INT 1
61249: DEC
61250: ST_TO_ADDR
61251: LD_VAR 0 6
61255: PUSH
61256: LD_INT 1
61258: ARRAY
61259: PUSH
61260: FOR_TO
61261: IFFALSE 61383
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61263: LD_ADDR_VAR 0 7
61267: PUSH
61268: LD_VAR 0 6
61272: PUSH
61273: LD_INT 1
61275: ARRAY
61276: PUSH
61277: LD_VAR 0 5
61281: ARRAY
61282: PUSH
61283: LD_VAR 0 6
61287: PUSH
61288: LD_INT 2
61290: ARRAY
61291: PUSH
61292: LD_VAR 0 5
61296: ARRAY
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61302: LD_VAR 0 7
61306: PUSH
61307: LD_INT 1
61309: ARRAY
61310: PPUSH
61311: LD_VAR 0 7
61315: PUSH
61316: LD_INT 2
61318: ARRAY
61319: PPUSH
61320: CALL_OW 428
61324: PUSH
61325: LD_INT 0
61327: EQUAL
61328: IFFALSE 61381
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61330: LD_VAR 0 1
61334: PPUSH
61335: LD_VAR 0 7
61339: PUSH
61340: LD_INT 1
61342: ARRAY
61343: PPUSH
61344: LD_VAR 0 7
61348: PUSH
61349: LD_INT 2
61351: ARRAY
61352: PPUSH
61353: LD_VAR 0 3
61357: PPUSH
61358: CALL_OW 48
// result := IsPlaced ( unit ) ;
61362: LD_ADDR_VAR 0 4
61366: PUSH
61367: LD_VAR 0 1
61371: PPUSH
61372: CALL_OW 305
61376: ST_TO_ADDR
// exit ;
61377: POP
61378: POP
61379: GO 61385
// end ; end ;
61381: GO 61260
61383: POP
61384: POP
// end ;
61385: LD_VAR 0 4
61389: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61390: LD_INT 0
61392: PPUSH
61393: PPUSH
61394: PPUSH
// if not side or side > 8 then
61395: LD_VAR 0 1
61399: NOT
61400: PUSH
61401: LD_VAR 0 1
61405: PUSH
61406: LD_INT 8
61408: GREATER
61409: OR
61410: IFFALSE 61414
// exit ;
61412: GO 61601
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61414: LD_ADDR_VAR 0 4
61418: PUSH
61419: LD_INT 22
61421: PUSH
61422: LD_VAR 0 1
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 21
61433: PUSH
61434: LD_INT 3
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PPUSH
61445: CALL_OW 69
61449: ST_TO_ADDR
// if not tmp then
61450: LD_VAR 0 4
61454: NOT
61455: IFFALSE 61459
// exit ;
61457: GO 61601
// enable_addtolog := true ;
61459: LD_ADDR_OWVAR 81
61463: PUSH
61464: LD_INT 1
61466: ST_TO_ADDR
// AddToLog ( [ ) ;
61467: LD_STRING [
61469: PPUSH
61470: CALL_OW 561
// for i in tmp do
61474: LD_ADDR_VAR 0 3
61478: PUSH
61479: LD_VAR 0 4
61483: PUSH
61484: FOR_IN
61485: IFFALSE 61592
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61487: LD_STRING [
61489: PUSH
61490: LD_VAR 0 3
61494: PPUSH
61495: CALL_OW 266
61499: STR
61500: PUSH
61501: LD_STRING , 
61503: STR
61504: PUSH
61505: LD_VAR 0 3
61509: PPUSH
61510: CALL_OW 250
61514: STR
61515: PUSH
61516: LD_STRING , 
61518: STR
61519: PUSH
61520: LD_VAR 0 3
61524: PPUSH
61525: CALL_OW 251
61529: STR
61530: PUSH
61531: LD_STRING , 
61533: STR
61534: PUSH
61535: LD_VAR 0 3
61539: PPUSH
61540: CALL_OW 254
61544: STR
61545: PUSH
61546: LD_STRING , 
61548: STR
61549: PUSH
61550: LD_VAR 0 3
61554: PPUSH
61555: LD_INT 1
61557: PPUSH
61558: CALL_OW 268
61562: STR
61563: PUSH
61564: LD_STRING , 
61566: STR
61567: PUSH
61568: LD_VAR 0 3
61572: PPUSH
61573: LD_INT 2
61575: PPUSH
61576: CALL_OW 268
61580: STR
61581: PUSH
61582: LD_STRING ],
61584: STR
61585: PPUSH
61586: CALL_OW 561
// end ;
61590: GO 61484
61592: POP
61593: POP
// AddToLog ( ]; ) ;
61594: LD_STRING ];
61596: PPUSH
61597: CALL_OW 561
// end ;
61601: LD_VAR 0 2
61605: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61606: LD_INT 0
61608: PPUSH
61609: PPUSH
61610: PPUSH
61611: PPUSH
61612: PPUSH
// if not area or not rate or not max then
61613: LD_VAR 0 1
61617: NOT
61618: PUSH
61619: LD_VAR 0 2
61623: NOT
61624: OR
61625: PUSH
61626: LD_VAR 0 4
61630: NOT
61631: OR
61632: IFFALSE 61636
// exit ;
61634: GO 61828
// while 1 do
61636: LD_INT 1
61638: IFFALSE 61828
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61640: LD_ADDR_VAR 0 9
61644: PUSH
61645: LD_VAR 0 1
61649: PPUSH
61650: LD_INT 1
61652: PPUSH
61653: CALL_OW 287
61657: PUSH
61658: LD_INT 10
61660: MUL
61661: ST_TO_ADDR
// r := rate / 10 ;
61662: LD_ADDR_VAR 0 7
61666: PUSH
61667: LD_VAR 0 2
61671: PUSH
61672: LD_INT 10
61674: DIVREAL
61675: ST_TO_ADDR
// time := 1 1$00 ;
61676: LD_ADDR_VAR 0 8
61680: PUSH
61681: LD_INT 2100
61683: ST_TO_ADDR
// if amount < min then
61684: LD_VAR 0 9
61688: PUSH
61689: LD_VAR 0 3
61693: LESS
61694: IFFALSE 61712
// r := r * 2 else
61696: LD_ADDR_VAR 0 7
61700: PUSH
61701: LD_VAR 0 7
61705: PUSH
61706: LD_INT 2
61708: MUL
61709: ST_TO_ADDR
61710: GO 61738
// if amount > max then
61712: LD_VAR 0 9
61716: PUSH
61717: LD_VAR 0 4
61721: GREATER
61722: IFFALSE 61738
// r := r / 2 ;
61724: LD_ADDR_VAR 0 7
61728: PUSH
61729: LD_VAR 0 7
61733: PUSH
61734: LD_INT 2
61736: DIVREAL
61737: ST_TO_ADDR
// time := time / r ;
61738: LD_ADDR_VAR 0 8
61742: PUSH
61743: LD_VAR 0 8
61747: PUSH
61748: LD_VAR 0 7
61752: DIVREAL
61753: ST_TO_ADDR
// if time < 0 then
61754: LD_VAR 0 8
61758: PUSH
61759: LD_INT 0
61761: LESS
61762: IFFALSE 61779
// time := time * - 1 ;
61764: LD_ADDR_VAR 0 8
61768: PUSH
61769: LD_VAR 0 8
61773: PUSH
61774: LD_INT 1
61776: NEG
61777: MUL
61778: ST_TO_ADDR
// wait ( time ) ;
61779: LD_VAR 0 8
61783: PPUSH
61784: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61788: LD_INT 35
61790: PPUSH
61791: LD_INT 875
61793: PPUSH
61794: CALL_OW 12
61798: PPUSH
61799: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61803: LD_INT 1
61805: PPUSH
61806: LD_INT 5
61808: PPUSH
61809: CALL_OW 12
61813: PPUSH
61814: LD_VAR 0 1
61818: PPUSH
61819: LD_INT 1
61821: PPUSH
61822: CALL_OW 55
// end ;
61826: GO 61636
// end ;
61828: LD_VAR 0 5
61832: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61833: LD_INT 0
61835: PPUSH
61836: PPUSH
61837: PPUSH
61838: PPUSH
61839: PPUSH
61840: PPUSH
61841: PPUSH
61842: PPUSH
// if not turrets or not factories then
61843: LD_VAR 0 1
61847: NOT
61848: PUSH
61849: LD_VAR 0 2
61853: NOT
61854: OR
61855: IFFALSE 61859
// exit ;
61857: GO 62166
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61859: LD_ADDR_VAR 0 10
61863: PUSH
61864: LD_INT 5
61866: PUSH
61867: LD_INT 6
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 2
61876: PUSH
61877: LD_INT 4
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 3
61886: PUSH
61887: LD_INT 5
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 24
61901: PUSH
61902: LD_INT 25
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 23
61911: PUSH
61912: LD_INT 27
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 42
61925: PUSH
61926: LD_INT 43
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 44
61935: PUSH
61936: LD_INT 46
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 45
61945: PUSH
61946: LD_INT 47
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: LIST
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: LIST
61962: ST_TO_ADDR
// result := [ ] ;
61963: LD_ADDR_VAR 0 3
61967: PUSH
61968: EMPTY
61969: ST_TO_ADDR
// for i in turrets do
61970: LD_ADDR_VAR 0 4
61974: PUSH
61975: LD_VAR 0 1
61979: PUSH
61980: FOR_IN
61981: IFFALSE 62164
// begin nat := GetNation ( i ) ;
61983: LD_ADDR_VAR 0 7
61987: PUSH
61988: LD_VAR 0 4
61992: PPUSH
61993: CALL_OW 248
61997: ST_TO_ADDR
// weapon := 0 ;
61998: LD_ADDR_VAR 0 8
62002: PUSH
62003: LD_INT 0
62005: ST_TO_ADDR
// if not nat then
62006: LD_VAR 0 7
62010: NOT
62011: IFFALSE 62015
// continue ;
62013: GO 61980
// for j in list [ nat ] do
62015: LD_ADDR_VAR 0 5
62019: PUSH
62020: LD_VAR 0 10
62024: PUSH
62025: LD_VAR 0 7
62029: ARRAY
62030: PUSH
62031: FOR_IN
62032: IFFALSE 62073
// if GetBWeapon ( i ) = j [ 1 ] then
62034: LD_VAR 0 4
62038: PPUSH
62039: CALL_OW 269
62043: PUSH
62044: LD_VAR 0 5
62048: PUSH
62049: LD_INT 1
62051: ARRAY
62052: EQUAL
62053: IFFALSE 62071
// begin weapon := j [ 2 ] ;
62055: LD_ADDR_VAR 0 8
62059: PUSH
62060: LD_VAR 0 5
62064: PUSH
62065: LD_INT 2
62067: ARRAY
62068: ST_TO_ADDR
// break ;
62069: GO 62073
// end ;
62071: GO 62031
62073: POP
62074: POP
// if not weapon then
62075: LD_VAR 0 8
62079: NOT
62080: IFFALSE 62084
// continue ;
62082: GO 61980
// for k in factories do
62084: LD_ADDR_VAR 0 6
62088: PUSH
62089: LD_VAR 0 2
62093: PUSH
62094: FOR_IN
62095: IFFALSE 62160
// begin weapons := AvailableWeaponList ( k ) ;
62097: LD_ADDR_VAR 0 9
62101: PUSH
62102: LD_VAR 0 6
62106: PPUSH
62107: CALL_OW 478
62111: ST_TO_ADDR
// if not weapons then
62112: LD_VAR 0 9
62116: NOT
62117: IFFALSE 62121
// continue ;
62119: GO 62094
// if weapon in weapons then
62121: LD_VAR 0 8
62125: PUSH
62126: LD_VAR 0 9
62130: IN
62131: IFFALSE 62158
// begin result := [ i , weapon ] ;
62133: LD_ADDR_VAR 0 3
62137: PUSH
62138: LD_VAR 0 4
62142: PUSH
62143: LD_VAR 0 8
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: ST_TO_ADDR
// exit ;
62152: POP
62153: POP
62154: POP
62155: POP
62156: GO 62166
// end ; end ;
62158: GO 62094
62160: POP
62161: POP
// end ;
62162: GO 61980
62164: POP
62165: POP
// end ;
62166: LD_VAR 0 3
62170: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62171: LD_INT 0
62173: PPUSH
// if not side or side > 8 then
62174: LD_VAR 0 3
62178: NOT
62179: PUSH
62180: LD_VAR 0 3
62184: PUSH
62185: LD_INT 8
62187: GREATER
62188: OR
62189: IFFALSE 62193
// exit ;
62191: GO 62252
// if not range then
62193: LD_VAR 0 4
62197: NOT
62198: IFFALSE 62209
// range := - 12 ;
62200: LD_ADDR_VAR 0 4
62204: PUSH
62205: LD_INT 12
62207: NEG
62208: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62209: LD_VAR 0 1
62213: PPUSH
62214: LD_VAR 0 2
62218: PPUSH
62219: LD_VAR 0 3
62223: PPUSH
62224: LD_VAR 0 4
62228: PPUSH
62229: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62233: LD_VAR 0 1
62237: PPUSH
62238: LD_VAR 0 2
62242: PPUSH
62243: LD_VAR 0 3
62247: PPUSH
62248: CALL_OW 331
// end ;
62252: LD_VAR 0 5
62256: RET
// export function Video ( mode ) ; begin
62257: LD_INT 0
62259: PPUSH
// ingame_video = mode ;
62260: LD_ADDR_OWVAR 52
62264: PUSH
62265: LD_VAR 0 1
62269: ST_TO_ADDR
// interface_hidden = mode ;
62270: LD_ADDR_OWVAR 54
62274: PUSH
62275: LD_VAR 0 1
62279: ST_TO_ADDR
// end ;
62280: LD_VAR 0 2
62284: RET
// export function Join ( array , element ) ; begin
62285: LD_INT 0
62287: PPUSH
// result := array ^ element ;
62288: LD_ADDR_VAR 0 3
62292: PUSH
62293: LD_VAR 0 1
62297: PUSH
62298: LD_VAR 0 2
62302: ADD
62303: ST_TO_ADDR
// end ;
62304: LD_VAR 0 3
62308: RET
// export function JoinUnion ( array , element ) ; begin
62309: LD_INT 0
62311: PPUSH
// result := array union element ;
62312: LD_ADDR_VAR 0 3
62316: PUSH
62317: LD_VAR 0 1
62321: PUSH
62322: LD_VAR 0 2
62326: UNION
62327: ST_TO_ADDR
// end ;
62328: LD_VAR 0 3
62332: RET
// export function GetBehemoths ( side ) ; begin
62333: LD_INT 0
62335: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62336: LD_ADDR_VAR 0 2
62340: PUSH
62341: LD_INT 22
62343: PUSH
62344: LD_VAR 0 1
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 31
62355: PUSH
62356: LD_INT 25
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PPUSH
62367: CALL_OW 69
62371: ST_TO_ADDR
// end ;
62372: LD_VAR 0 2
62376: RET
// export function Shuffle ( array ) ; var i , index ; begin
62377: LD_INT 0
62379: PPUSH
62380: PPUSH
62381: PPUSH
// result := [ ] ;
62382: LD_ADDR_VAR 0 2
62386: PUSH
62387: EMPTY
62388: ST_TO_ADDR
// if not array then
62389: LD_VAR 0 1
62393: NOT
62394: IFFALSE 62398
// exit ;
62396: GO 62497
// Randomize ;
62398: CALL_OW 10
// for i = array downto 1 do
62402: LD_ADDR_VAR 0 3
62406: PUSH
62407: DOUBLE
62408: LD_VAR 0 1
62412: INC
62413: ST_TO_ADDR
62414: LD_INT 1
62416: PUSH
62417: FOR_DOWNTO
62418: IFFALSE 62495
// begin index := rand ( 1 , array ) ;
62420: LD_ADDR_VAR 0 4
62424: PUSH
62425: LD_INT 1
62427: PPUSH
62428: LD_VAR 0 1
62432: PPUSH
62433: CALL_OW 12
62437: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62438: LD_ADDR_VAR 0 2
62442: PUSH
62443: LD_VAR 0 2
62447: PPUSH
62448: LD_VAR 0 2
62452: PUSH
62453: LD_INT 1
62455: PLUS
62456: PPUSH
62457: LD_VAR 0 1
62461: PUSH
62462: LD_VAR 0 4
62466: ARRAY
62467: PPUSH
62468: CALL_OW 2
62472: ST_TO_ADDR
// array := Delete ( array , index ) ;
62473: LD_ADDR_VAR 0 1
62477: PUSH
62478: LD_VAR 0 1
62482: PPUSH
62483: LD_VAR 0 4
62487: PPUSH
62488: CALL_OW 3
62492: ST_TO_ADDR
// end ;
62493: GO 62417
62495: POP
62496: POP
// end ;
62497: LD_VAR 0 2
62501: RET
// export function GetBaseMaterials ( base ) ; begin
62502: LD_INT 0
62504: PPUSH
// result := [ 0 , 0 , 0 ] ;
62505: LD_ADDR_VAR 0 2
62509: PUSH
62510: LD_INT 0
62512: PUSH
62513: LD_INT 0
62515: PUSH
62516: LD_INT 0
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: LIST
62523: ST_TO_ADDR
// if not base then
62524: LD_VAR 0 1
62528: NOT
62529: IFFALSE 62533
// exit ;
62531: GO 62582
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62533: LD_ADDR_VAR 0 2
62537: PUSH
62538: LD_VAR 0 1
62542: PPUSH
62543: LD_INT 1
62545: PPUSH
62546: CALL_OW 275
62550: PUSH
62551: LD_VAR 0 1
62555: PPUSH
62556: LD_INT 2
62558: PPUSH
62559: CALL_OW 275
62563: PUSH
62564: LD_VAR 0 1
62568: PPUSH
62569: LD_INT 3
62571: PPUSH
62572: CALL_OW 275
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: LIST
62581: ST_TO_ADDR
// end ; end_of_file
62582: LD_VAR 0 2
62586: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
62587: GO 62589
62589: DISABLE
// begin ru_radar := 98 ;
62590: LD_ADDR_EXP 29
62594: PUSH
62595: LD_INT 98
62597: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
62598: LD_ADDR_EXP 30
62602: PUSH
62603: LD_INT 89
62605: ST_TO_ADDR
// us_hack := 99 ;
62606: LD_ADDR_EXP 31
62610: PUSH
62611: LD_INT 99
62613: ST_TO_ADDR
// us_artillery := 97 ;
62614: LD_ADDR_EXP 32
62618: PUSH
62619: LD_INT 97
62621: ST_TO_ADDR
// ar_bio_bomb := 91 ;
62622: LD_ADDR_EXP 33
62626: PUSH
62627: LD_INT 91
62629: ST_TO_ADDR
// end ; end_of_file
62630: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
62631: LD_INT 0
62633: PPUSH
62634: PPUSH
// skirmish := false ;
62635: LD_ADDR_EXP 34
62639: PUSH
62640: LD_INT 0
62642: ST_TO_ADDR
// debug_mc := false ;
62643: LD_ADDR_EXP 35
62647: PUSH
62648: LD_INT 0
62650: ST_TO_ADDR
// mc_bases := [ ] ;
62651: LD_ADDR_EXP 36
62655: PUSH
62656: EMPTY
62657: ST_TO_ADDR
// mc_sides := [ ] ;
62658: LD_ADDR_EXP 62
62662: PUSH
62663: EMPTY
62664: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
62665: LD_ADDR_EXP 37
62669: PUSH
62670: EMPTY
62671: ST_TO_ADDR
// mc_building_repairs := [ ] ;
62672: LD_ADDR_EXP 38
62676: PUSH
62677: EMPTY
62678: ST_TO_ADDR
// mc_need_heal := [ ] ;
62679: LD_ADDR_EXP 39
62683: PUSH
62684: EMPTY
62685: ST_TO_ADDR
// mc_healers := [ ] ;
62686: LD_ADDR_EXP 40
62690: PUSH
62691: EMPTY
62692: ST_TO_ADDR
// mc_build_list := [ ] ;
62693: LD_ADDR_EXP 41
62697: PUSH
62698: EMPTY
62699: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
62700: LD_ADDR_EXP 68
62704: PUSH
62705: EMPTY
62706: ST_TO_ADDR
// mc_builders := [ ] ;
62707: LD_ADDR_EXP 42
62711: PUSH
62712: EMPTY
62713: ST_TO_ADDR
// mc_construct_list := [ ] ;
62714: LD_ADDR_EXP 43
62718: PUSH
62719: EMPTY
62720: ST_TO_ADDR
// mc_turret_list := [ ] ;
62721: LD_ADDR_EXP 44
62725: PUSH
62726: EMPTY
62727: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
62728: LD_ADDR_EXP 45
62732: PUSH
62733: EMPTY
62734: ST_TO_ADDR
// mc_miners := [ ] ;
62735: LD_ADDR_EXP 50
62739: PUSH
62740: EMPTY
62741: ST_TO_ADDR
// mc_mines := [ ] ;
62742: LD_ADDR_EXP 49
62746: PUSH
62747: EMPTY
62748: ST_TO_ADDR
// mc_minefields := [ ] ;
62749: LD_ADDR_EXP 51
62753: PUSH
62754: EMPTY
62755: ST_TO_ADDR
// mc_crates := [ ] ;
62756: LD_ADDR_EXP 52
62760: PUSH
62761: EMPTY
62762: ST_TO_ADDR
// mc_crates_collector := [ ] ;
62763: LD_ADDR_EXP 53
62767: PUSH
62768: EMPTY
62769: ST_TO_ADDR
// mc_crates_area := [ ] ;
62770: LD_ADDR_EXP 54
62774: PUSH
62775: EMPTY
62776: ST_TO_ADDR
// mc_vehicles := [ ] ;
62777: LD_ADDR_EXP 55
62781: PUSH
62782: EMPTY
62783: ST_TO_ADDR
// mc_attack := [ ] ;
62784: LD_ADDR_EXP 56
62788: PUSH
62789: EMPTY
62790: ST_TO_ADDR
// mc_produce := [ ] ;
62791: LD_ADDR_EXP 57
62795: PUSH
62796: EMPTY
62797: ST_TO_ADDR
// mc_defender := [ ] ;
62798: LD_ADDR_EXP 58
62802: PUSH
62803: EMPTY
62804: ST_TO_ADDR
// mc_parking := [ ] ;
62805: LD_ADDR_EXP 60
62809: PUSH
62810: EMPTY
62811: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
62812: LD_ADDR_EXP 46
62816: PUSH
62817: EMPTY
62818: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
62819: LD_ADDR_EXP 48
62823: PUSH
62824: EMPTY
62825: ST_TO_ADDR
// mc_scan := [ ] ;
62826: LD_ADDR_EXP 59
62830: PUSH
62831: EMPTY
62832: ST_TO_ADDR
// mc_scan_area := [ ] ;
62833: LD_ADDR_EXP 61
62837: PUSH
62838: EMPTY
62839: ST_TO_ADDR
// mc_tech := [ ] ;
62840: LD_ADDR_EXP 63
62844: PUSH
62845: EMPTY
62846: ST_TO_ADDR
// mc_class := [ ] ;
62847: LD_ADDR_EXP 77
62851: PUSH
62852: EMPTY
62853: ST_TO_ADDR
// mc_class_case_use := [ ] ;
62854: LD_ADDR_EXP 78
62858: PUSH
62859: EMPTY
62860: ST_TO_ADDR
// end ;
62861: LD_VAR 0 1
62865: RET
// export function MC_Kill ( base ) ; begin
62866: LD_INT 0
62868: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
62869: LD_ADDR_EXP 36
62873: PUSH
62874: LD_EXP 36
62878: PPUSH
62879: LD_VAR 0 1
62883: PPUSH
62884: EMPTY
62885: PPUSH
62886: CALL_OW 1
62890: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
62891: LD_ADDR_EXP 37
62895: PUSH
62896: LD_EXP 37
62900: PPUSH
62901: LD_VAR 0 1
62905: PPUSH
62906: EMPTY
62907: PPUSH
62908: CALL_OW 1
62912: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
62913: LD_ADDR_EXP 38
62917: PUSH
62918: LD_EXP 38
62922: PPUSH
62923: LD_VAR 0 1
62927: PPUSH
62928: EMPTY
62929: PPUSH
62930: CALL_OW 1
62934: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
62935: LD_ADDR_EXP 39
62939: PUSH
62940: LD_EXP 39
62944: PPUSH
62945: LD_VAR 0 1
62949: PPUSH
62950: EMPTY
62951: PPUSH
62952: CALL_OW 1
62956: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
62957: LD_ADDR_EXP 40
62961: PUSH
62962: LD_EXP 40
62966: PPUSH
62967: LD_VAR 0 1
62971: PPUSH
62972: EMPTY
62973: PPUSH
62974: CALL_OW 1
62978: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
62979: LD_ADDR_EXP 41
62983: PUSH
62984: LD_EXP 41
62988: PPUSH
62989: LD_VAR 0 1
62993: PPUSH
62994: EMPTY
62995: PPUSH
62996: CALL_OW 1
63000: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
63001: LD_ADDR_EXP 42
63005: PUSH
63006: LD_EXP 42
63010: PPUSH
63011: LD_VAR 0 1
63015: PPUSH
63016: EMPTY
63017: PPUSH
63018: CALL_OW 1
63022: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
63023: LD_ADDR_EXP 43
63027: PUSH
63028: LD_EXP 43
63032: PPUSH
63033: LD_VAR 0 1
63037: PPUSH
63038: EMPTY
63039: PPUSH
63040: CALL_OW 1
63044: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
63045: LD_ADDR_EXP 44
63049: PUSH
63050: LD_EXP 44
63054: PPUSH
63055: LD_VAR 0 1
63059: PPUSH
63060: EMPTY
63061: PPUSH
63062: CALL_OW 1
63066: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
63067: LD_ADDR_EXP 45
63071: PUSH
63072: LD_EXP 45
63076: PPUSH
63077: LD_VAR 0 1
63081: PPUSH
63082: EMPTY
63083: PPUSH
63084: CALL_OW 1
63088: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
63089: LD_ADDR_EXP 46
63093: PUSH
63094: LD_EXP 46
63098: PPUSH
63099: LD_VAR 0 1
63103: PPUSH
63104: EMPTY
63105: PPUSH
63106: CALL_OW 1
63110: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
63111: LD_ADDR_EXP 47
63115: PUSH
63116: LD_EXP 47
63120: PPUSH
63121: LD_VAR 0 1
63125: PPUSH
63126: LD_INT 0
63128: PPUSH
63129: CALL_OW 1
63133: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
63134: LD_ADDR_EXP 48
63138: PUSH
63139: LD_EXP 48
63143: PPUSH
63144: LD_VAR 0 1
63148: PPUSH
63149: EMPTY
63150: PPUSH
63151: CALL_OW 1
63155: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
63156: LD_ADDR_EXP 49
63160: PUSH
63161: LD_EXP 49
63165: PPUSH
63166: LD_VAR 0 1
63170: PPUSH
63171: EMPTY
63172: PPUSH
63173: CALL_OW 1
63177: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
63178: LD_ADDR_EXP 50
63182: PUSH
63183: LD_EXP 50
63187: PPUSH
63188: LD_VAR 0 1
63192: PPUSH
63193: EMPTY
63194: PPUSH
63195: CALL_OW 1
63199: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
63200: LD_ADDR_EXP 51
63204: PUSH
63205: LD_EXP 51
63209: PPUSH
63210: LD_VAR 0 1
63214: PPUSH
63215: EMPTY
63216: PPUSH
63217: CALL_OW 1
63221: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
63222: LD_ADDR_EXP 52
63226: PUSH
63227: LD_EXP 52
63231: PPUSH
63232: LD_VAR 0 1
63236: PPUSH
63237: EMPTY
63238: PPUSH
63239: CALL_OW 1
63243: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
63244: LD_ADDR_EXP 53
63248: PUSH
63249: LD_EXP 53
63253: PPUSH
63254: LD_VAR 0 1
63258: PPUSH
63259: EMPTY
63260: PPUSH
63261: CALL_OW 1
63265: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
63266: LD_ADDR_EXP 54
63270: PUSH
63271: LD_EXP 54
63275: PPUSH
63276: LD_VAR 0 1
63280: PPUSH
63281: EMPTY
63282: PPUSH
63283: CALL_OW 1
63287: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
63288: LD_ADDR_EXP 55
63292: PUSH
63293: LD_EXP 55
63297: PPUSH
63298: LD_VAR 0 1
63302: PPUSH
63303: EMPTY
63304: PPUSH
63305: CALL_OW 1
63309: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
63310: LD_ADDR_EXP 56
63314: PUSH
63315: LD_EXP 56
63319: PPUSH
63320: LD_VAR 0 1
63324: PPUSH
63325: EMPTY
63326: PPUSH
63327: CALL_OW 1
63331: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
63332: LD_ADDR_EXP 57
63336: PUSH
63337: LD_EXP 57
63341: PPUSH
63342: LD_VAR 0 1
63346: PPUSH
63347: EMPTY
63348: PPUSH
63349: CALL_OW 1
63353: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
63354: LD_ADDR_EXP 58
63358: PUSH
63359: LD_EXP 58
63363: PPUSH
63364: LD_VAR 0 1
63368: PPUSH
63369: EMPTY
63370: PPUSH
63371: CALL_OW 1
63375: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
63376: LD_ADDR_EXP 59
63380: PUSH
63381: LD_EXP 59
63385: PPUSH
63386: LD_VAR 0 1
63390: PPUSH
63391: EMPTY
63392: PPUSH
63393: CALL_OW 1
63397: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
63398: LD_ADDR_EXP 60
63402: PUSH
63403: LD_EXP 60
63407: PPUSH
63408: LD_VAR 0 1
63412: PPUSH
63413: EMPTY
63414: PPUSH
63415: CALL_OW 1
63419: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
63420: LD_ADDR_EXP 61
63424: PUSH
63425: LD_EXP 61
63429: PPUSH
63430: LD_VAR 0 1
63434: PPUSH
63435: EMPTY
63436: PPUSH
63437: CALL_OW 1
63441: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
63442: LD_ADDR_EXP 63
63446: PUSH
63447: LD_EXP 63
63451: PPUSH
63452: LD_VAR 0 1
63456: PPUSH
63457: EMPTY
63458: PPUSH
63459: CALL_OW 1
63463: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
63464: LD_ADDR_EXP 65
63468: PUSH
63469: LD_EXP 65
63473: PPUSH
63474: LD_VAR 0 1
63478: PPUSH
63479: EMPTY
63480: PPUSH
63481: CALL_OW 1
63485: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
63486: LD_ADDR_EXP 66
63490: PUSH
63491: LD_EXP 66
63495: PPUSH
63496: LD_VAR 0 1
63500: PPUSH
63501: EMPTY
63502: PPUSH
63503: CALL_OW 1
63507: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
63508: LD_ADDR_EXP 67
63512: PUSH
63513: LD_EXP 67
63517: PPUSH
63518: LD_VAR 0 1
63522: PPUSH
63523: EMPTY
63524: PPUSH
63525: CALL_OW 1
63529: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
63530: LD_ADDR_EXP 68
63534: PUSH
63535: LD_EXP 68
63539: PPUSH
63540: LD_VAR 0 1
63544: PPUSH
63545: EMPTY
63546: PPUSH
63547: CALL_OW 1
63551: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
63552: LD_ADDR_EXP 69
63556: PUSH
63557: LD_EXP 69
63561: PPUSH
63562: LD_VAR 0 1
63566: PPUSH
63567: EMPTY
63568: PPUSH
63569: CALL_OW 1
63573: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
63574: LD_ADDR_EXP 70
63578: PUSH
63579: LD_EXP 70
63583: PPUSH
63584: LD_VAR 0 1
63588: PPUSH
63589: EMPTY
63590: PPUSH
63591: CALL_OW 1
63595: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
63596: LD_ADDR_EXP 71
63600: PUSH
63601: LD_EXP 71
63605: PPUSH
63606: LD_VAR 0 1
63610: PPUSH
63611: EMPTY
63612: PPUSH
63613: CALL_OW 1
63617: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
63618: LD_ADDR_EXP 72
63622: PUSH
63623: LD_EXP 72
63627: PPUSH
63628: LD_VAR 0 1
63632: PPUSH
63633: EMPTY
63634: PPUSH
63635: CALL_OW 1
63639: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
63640: LD_ADDR_EXP 73
63644: PUSH
63645: LD_EXP 73
63649: PPUSH
63650: LD_VAR 0 1
63654: PPUSH
63655: EMPTY
63656: PPUSH
63657: CALL_OW 1
63661: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
63662: LD_ADDR_EXP 74
63666: PUSH
63667: LD_EXP 74
63671: PPUSH
63672: LD_VAR 0 1
63676: PPUSH
63677: EMPTY
63678: PPUSH
63679: CALL_OW 1
63683: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
63684: LD_ADDR_EXP 75
63688: PUSH
63689: LD_EXP 75
63693: PPUSH
63694: LD_VAR 0 1
63698: PPUSH
63699: EMPTY
63700: PPUSH
63701: CALL_OW 1
63705: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
63706: LD_ADDR_EXP 76
63710: PUSH
63711: LD_EXP 76
63715: PPUSH
63716: LD_VAR 0 1
63720: PPUSH
63721: EMPTY
63722: PPUSH
63723: CALL_OW 1
63727: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
63728: LD_ADDR_EXP 77
63732: PUSH
63733: LD_EXP 77
63737: PPUSH
63738: LD_VAR 0 1
63742: PPUSH
63743: EMPTY
63744: PPUSH
63745: CALL_OW 1
63749: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
63750: LD_ADDR_EXP 78
63754: PUSH
63755: LD_EXP 78
63759: PPUSH
63760: LD_VAR 0 1
63764: PPUSH
63765: LD_INT 0
63767: PPUSH
63768: CALL_OW 1
63772: ST_TO_ADDR
// end ;
63773: LD_VAR 0 2
63777: RET
// export function MC_Add ( side , units ) ; var base ; begin
63778: LD_INT 0
63780: PPUSH
63781: PPUSH
// base := mc_bases + 1 ;
63782: LD_ADDR_VAR 0 4
63786: PUSH
63787: LD_EXP 36
63791: PUSH
63792: LD_INT 1
63794: PLUS
63795: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
63796: LD_ADDR_EXP 62
63800: PUSH
63801: LD_EXP 62
63805: PPUSH
63806: LD_VAR 0 4
63810: PPUSH
63811: LD_VAR 0 1
63815: PPUSH
63816: CALL_OW 1
63820: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
63821: LD_ADDR_EXP 36
63825: PUSH
63826: LD_EXP 36
63830: PPUSH
63831: LD_VAR 0 4
63835: PPUSH
63836: LD_VAR 0 2
63840: PPUSH
63841: CALL_OW 1
63845: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
63846: LD_ADDR_EXP 37
63850: PUSH
63851: LD_EXP 37
63855: PPUSH
63856: LD_VAR 0 4
63860: PPUSH
63861: EMPTY
63862: PPUSH
63863: CALL_OW 1
63867: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
63868: LD_ADDR_EXP 38
63872: PUSH
63873: LD_EXP 38
63877: PPUSH
63878: LD_VAR 0 4
63882: PPUSH
63883: EMPTY
63884: PPUSH
63885: CALL_OW 1
63889: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
63890: LD_ADDR_EXP 39
63894: PUSH
63895: LD_EXP 39
63899: PPUSH
63900: LD_VAR 0 4
63904: PPUSH
63905: EMPTY
63906: PPUSH
63907: CALL_OW 1
63911: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
63912: LD_ADDR_EXP 40
63916: PUSH
63917: LD_EXP 40
63921: PPUSH
63922: LD_VAR 0 4
63926: PPUSH
63927: EMPTY
63928: PPUSH
63929: CALL_OW 1
63933: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
63934: LD_ADDR_EXP 41
63938: PUSH
63939: LD_EXP 41
63943: PPUSH
63944: LD_VAR 0 4
63948: PPUSH
63949: EMPTY
63950: PPUSH
63951: CALL_OW 1
63955: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
63956: LD_ADDR_EXP 42
63960: PUSH
63961: LD_EXP 42
63965: PPUSH
63966: LD_VAR 0 4
63970: PPUSH
63971: EMPTY
63972: PPUSH
63973: CALL_OW 1
63977: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
63978: LD_ADDR_EXP 43
63982: PUSH
63983: LD_EXP 43
63987: PPUSH
63988: LD_VAR 0 4
63992: PPUSH
63993: EMPTY
63994: PPUSH
63995: CALL_OW 1
63999: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
64000: LD_ADDR_EXP 44
64004: PUSH
64005: LD_EXP 44
64009: PPUSH
64010: LD_VAR 0 4
64014: PPUSH
64015: EMPTY
64016: PPUSH
64017: CALL_OW 1
64021: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
64022: LD_ADDR_EXP 45
64026: PUSH
64027: LD_EXP 45
64031: PPUSH
64032: LD_VAR 0 4
64036: PPUSH
64037: EMPTY
64038: PPUSH
64039: CALL_OW 1
64043: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
64044: LD_ADDR_EXP 46
64048: PUSH
64049: LD_EXP 46
64053: PPUSH
64054: LD_VAR 0 4
64058: PPUSH
64059: EMPTY
64060: PPUSH
64061: CALL_OW 1
64065: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
64066: LD_ADDR_EXP 47
64070: PUSH
64071: LD_EXP 47
64075: PPUSH
64076: LD_VAR 0 4
64080: PPUSH
64081: LD_INT 0
64083: PPUSH
64084: CALL_OW 1
64088: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
64089: LD_ADDR_EXP 48
64093: PUSH
64094: LD_EXP 48
64098: PPUSH
64099: LD_VAR 0 4
64103: PPUSH
64104: EMPTY
64105: PPUSH
64106: CALL_OW 1
64110: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
64111: LD_ADDR_EXP 49
64115: PUSH
64116: LD_EXP 49
64120: PPUSH
64121: LD_VAR 0 4
64125: PPUSH
64126: EMPTY
64127: PPUSH
64128: CALL_OW 1
64132: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
64133: LD_ADDR_EXP 50
64137: PUSH
64138: LD_EXP 50
64142: PPUSH
64143: LD_VAR 0 4
64147: PPUSH
64148: EMPTY
64149: PPUSH
64150: CALL_OW 1
64154: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
64155: LD_ADDR_EXP 51
64159: PUSH
64160: LD_EXP 51
64164: PPUSH
64165: LD_VAR 0 4
64169: PPUSH
64170: EMPTY
64171: PPUSH
64172: CALL_OW 1
64176: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
64177: LD_ADDR_EXP 52
64181: PUSH
64182: LD_EXP 52
64186: PPUSH
64187: LD_VAR 0 4
64191: PPUSH
64192: EMPTY
64193: PPUSH
64194: CALL_OW 1
64198: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
64199: LD_ADDR_EXP 53
64203: PUSH
64204: LD_EXP 53
64208: PPUSH
64209: LD_VAR 0 4
64213: PPUSH
64214: EMPTY
64215: PPUSH
64216: CALL_OW 1
64220: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
64221: LD_ADDR_EXP 54
64225: PUSH
64226: LD_EXP 54
64230: PPUSH
64231: LD_VAR 0 4
64235: PPUSH
64236: EMPTY
64237: PPUSH
64238: CALL_OW 1
64242: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
64243: LD_ADDR_EXP 55
64247: PUSH
64248: LD_EXP 55
64252: PPUSH
64253: LD_VAR 0 4
64257: PPUSH
64258: EMPTY
64259: PPUSH
64260: CALL_OW 1
64264: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
64265: LD_ADDR_EXP 56
64269: PUSH
64270: LD_EXP 56
64274: PPUSH
64275: LD_VAR 0 4
64279: PPUSH
64280: EMPTY
64281: PPUSH
64282: CALL_OW 1
64286: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
64287: LD_ADDR_EXP 57
64291: PUSH
64292: LD_EXP 57
64296: PPUSH
64297: LD_VAR 0 4
64301: PPUSH
64302: EMPTY
64303: PPUSH
64304: CALL_OW 1
64308: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
64309: LD_ADDR_EXP 58
64313: PUSH
64314: LD_EXP 58
64318: PPUSH
64319: LD_VAR 0 4
64323: PPUSH
64324: EMPTY
64325: PPUSH
64326: CALL_OW 1
64330: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
64331: LD_ADDR_EXP 59
64335: PUSH
64336: LD_EXP 59
64340: PPUSH
64341: LD_VAR 0 4
64345: PPUSH
64346: EMPTY
64347: PPUSH
64348: CALL_OW 1
64352: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
64353: LD_ADDR_EXP 60
64357: PUSH
64358: LD_EXP 60
64362: PPUSH
64363: LD_VAR 0 4
64367: PPUSH
64368: EMPTY
64369: PPUSH
64370: CALL_OW 1
64374: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
64375: LD_ADDR_EXP 61
64379: PUSH
64380: LD_EXP 61
64384: PPUSH
64385: LD_VAR 0 4
64389: PPUSH
64390: EMPTY
64391: PPUSH
64392: CALL_OW 1
64396: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
64397: LD_ADDR_EXP 63
64401: PUSH
64402: LD_EXP 63
64406: PPUSH
64407: LD_VAR 0 4
64411: PPUSH
64412: EMPTY
64413: PPUSH
64414: CALL_OW 1
64418: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
64419: LD_ADDR_EXP 65
64423: PUSH
64424: LD_EXP 65
64428: PPUSH
64429: LD_VAR 0 4
64433: PPUSH
64434: EMPTY
64435: PPUSH
64436: CALL_OW 1
64440: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
64441: LD_ADDR_EXP 66
64445: PUSH
64446: LD_EXP 66
64450: PPUSH
64451: LD_VAR 0 4
64455: PPUSH
64456: EMPTY
64457: PPUSH
64458: CALL_OW 1
64462: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
64463: LD_ADDR_EXP 67
64467: PUSH
64468: LD_EXP 67
64472: PPUSH
64473: LD_VAR 0 4
64477: PPUSH
64478: EMPTY
64479: PPUSH
64480: CALL_OW 1
64484: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
64485: LD_ADDR_EXP 68
64489: PUSH
64490: LD_EXP 68
64494: PPUSH
64495: LD_VAR 0 4
64499: PPUSH
64500: EMPTY
64501: PPUSH
64502: CALL_OW 1
64506: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
64507: LD_ADDR_EXP 69
64511: PUSH
64512: LD_EXP 69
64516: PPUSH
64517: LD_VAR 0 4
64521: PPUSH
64522: EMPTY
64523: PPUSH
64524: CALL_OW 1
64528: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
64529: LD_ADDR_EXP 70
64533: PUSH
64534: LD_EXP 70
64538: PPUSH
64539: LD_VAR 0 4
64543: PPUSH
64544: EMPTY
64545: PPUSH
64546: CALL_OW 1
64550: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
64551: LD_ADDR_EXP 71
64555: PUSH
64556: LD_EXP 71
64560: PPUSH
64561: LD_VAR 0 4
64565: PPUSH
64566: EMPTY
64567: PPUSH
64568: CALL_OW 1
64572: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
64573: LD_ADDR_EXP 72
64577: PUSH
64578: LD_EXP 72
64582: PPUSH
64583: LD_VAR 0 4
64587: PPUSH
64588: EMPTY
64589: PPUSH
64590: CALL_OW 1
64594: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
64595: LD_ADDR_EXP 73
64599: PUSH
64600: LD_EXP 73
64604: PPUSH
64605: LD_VAR 0 4
64609: PPUSH
64610: EMPTY
64611: PPUSH
64612: CALL_OW 1
64616: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
64617: LD_ADDR_EXP 74
64621: PUSH
64622: LD_EXP 74
64626: PPUSH
64627: LD_VAR 0 4
64631: PPUSH
64632: EMPTY
64633: PPUSH
64634: CALL_OW 1
64638: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
64639: LD_ADDR_EXP 75
64643: PUSH
64644: LD_EXP 75
64648: PPUSH
64649: LD_VAR 0 4
64653: PPUSH
64654: EMPTY
64655: PPUSH
64656: CALL_OW 1
64660: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
64661: LD_ADDR_EXP 76
64665: PUSH
64666: LD_EXP 76
64670: PPUSH
64671: LD_VAR 0 4
64675: PPUSH
64676: EMPTY
64677: PPUSH
64678: CALL_OW 1
64682: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
64683: LD_ADDR_EXP 77
64687: PUSH
64688: LD_EXP 77
64692: PPUSH
64693: LD_VAR 0 4
64697: PPUSH
64698: EMPTY
64699: PPUSH
64700: CALL_OW 1
64704: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
64705: LD_ADDR_EXP 78
64709: PUSH
64710: LD_EXP 78
64714: PPUSH
64715: LD_VAR 0 4
64719: PPUSH
64720: LD_INT 0
64722: PPUSH
64723: CALL_OW 1
64727: ST_TO_ADDR
// result := base ;
64728: LD_ADDR_VAR 0 3
64732: PUSH
64733: LD_VAR 0 4
64737: ST_TO_ADDR
// end ;
64738: LD_VAR 0 3
64742: RET
// export function MC_Start ( ) ; var i ; begin
64743: LD_INT 0
64745: PPUSH
64746: PPUSH
// for i = 1 to mc_bases do
64747: LD_ADDR_VAR 0 2
64751: PUSH
64752: DOUBLE
64753: LD_INT 1
64755: DEC
64756: ST_TO_ADDR
64757: LD_EXP 36
64761: PUSH
64762: FOR_TO
64763: IFFALSE 65840
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
64765: LD_ADDR_EXP 36
64769: PUSH
64770: LD_EXP 36
64774: PPUSH
64775: LD_VAR 0 2
64779: PPUSH
64780: LD_EXP 36
64784: PUSH
64785: LD_VAR 0 2
64789: ARRAY
64790: PUSH
64791: LD_INT 0
64793: DIFF
64794: PPUSH
64795: CALL_OW 1
64799: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
64800: LD_ADDR_EXP 37
64804: PUSH
64805: LD_EXP 37
64809: PPUSH
64810: LD_VAR 0 2
64814: PPUSH
64815: EMPTY
64816: PPUSH
64817: CALL_OW 1
64821: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
64822: LD_ADDR_EXP 38
64826: PUSH
64827: LD_EXP 38
64831: PPUSH
64832: LD_VAR 0 2
64836: PPUSH
64837: EMPTY
64838: PPUSH
64839: CALL_OW 1
64843: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
64844: LD_ADDR_EXP 39
64848: PUSH
64849: LD_EXP 39
64853: PPUSH
64854: LD_VAR 0 2
64858: PPUSH
64859: EMPTY
64860: PPUSH
64861: CALL_OW 1
64865: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
64866: LD_ADDR_EXP 40
64870: PUSH
64871: LD_EXP 40
64875: PPUSH
64876: LD_VAR 0 2
64880: PPUSH
64881: EMPTY
64882: PUSH
64883: EMPTY
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PPUSH
64889: CALL_OW 1
64893: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
64894: LD_ADDR_EXP 41
64898: PUSH
64899: LD_EXP 41
64903: PPUSH
64904: LD_VAR 0 2
64908: PPUSH
64909: EMPTY
64910: PPUSH
64911: CALL_OW 1
64915: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
64916: LD_ADDR_EXP 68
64920: PUSH
64921: LD_EXP 68
64925: PPUSH
64926: LD_VAR 0 2
64930: PPUSH
64931: EMPTY
64932: PPUSH
64933: CALL_OW 1
64937: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
64938: LD_ADDR_EXP 42
64942: PUSH
64943: LD_EXP 42
64947: PPUSH
64948: LD_VAR 0 2
64952: PPUSH
64953: EMPTY
64954: PPUSH
64955: CALL_OW 1
64959: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
64960: LD_ADDR_EXP 43
64964: PUSH
64965: LD_EXP 43
64969: PPUSH
64970: LD_VAR 0 2
64974: PPUSH
64975: EMPTY
64976: PPUSH
64977: CALL_OW 1
64981: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
64982: LD_ADDR_EXP 44
64986: PUSH
64987: LD_EXP 44
64991: PPUSH
64992: LD_VAR 0 2
64996: PPUSH
64997: LD_EXP 36
65001: PUSH
65002: LD_VAR 0 2
65006: ARRAY
65007: PPUSH
65008: LD_INT 2
65010: PUSH
65011: LD_INT 30
65013: PUSH
65014: LD_INT 32
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 30
65023: PUSH
65024: LD_INT 33
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: LIST
65035: PPUSH
65036: CALL_OW 72
65040: PPUSH
65041: CALL_OW 1
65045: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
65046: LD_ADDR_EXP 45
65050: PUSH
65051: LD_EXP 45
65055: PPUSH
65056: LD_VAR 0 2
65060: PPUSH
65061: LD_EXP 36
65065: PUSH
65066: LD_VAR 0 2
65070: ARRAY
65071: PPUSH
65072: LD_INT 2
65074: PUSH
65075: LD_INT 30
65077: PUSH
65078: LD_INT 32
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: PUSH
65085: LD_INT 30
65087: PUSH
65088: LD_INT 31
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 58
65102: PUSH
65103: EMPTY
65104: LIST
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PPUSH
65110: CALL_OW 72
65114: PPUSH
65115: CALL_OW 1
65119: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
65120: LD_ADDR_EXP 46
65124: PUSH
65125: LD_EXP 46
65129: PPUSH
65130: LD_VAR 0 2
65134: PPUSH
65135: EMPTY
65136: PPUSH
65137: CALL_OW 1
65141: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
65142: LD_ADDR_EXP 50
65146: PUSH
65147: LD_EXP 50
65151: PPUSH
65152: LD_VAR 0 2
65156: PPUSH
65157: EMPTY
65158: PPUSH
65159: CALL_OW 1
65163: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
65164: LD_ADDR_EXP 49
65168: PUSH
65169: LD_EXP 49
65173: PPUSH
65174: LD_VAR 0 2
65178: PPUSH
65179: EMPTY
65180: PPUSH
65181: CALL_OW 1
65185: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
65186: LD_ADDR_EXP 51
65190: PUSH
65191: LD_EXP 51
65195: PPUSH
65196: LD_VAR 0 2
65200: PPUSH
65201: EMPTY
65202: PPUSH
65203: CALL_OW 1
65207: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
65208: LD_ADDR_EXP 52
65212: PUSH
65213: LD_EXP 52
65217: PPUSH
65218: LD_VAR 0 2
65222: PPUSH
65223: EMPTY
65224: PPUSH
65225: CALL_OW 1
65229: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
65230: LD_ADDR_EXP 53
65234: PUSH
65235: LD_EXP 53
65239: PPUSH
65240: LD_VAR 0 2
65244: PPUSH
65245: EMPTY
65246: PPUSH
65247: CALL_OW 1
65251: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
65252: LD_ADDR_EXP 54
65256: PUSH
65257: LD_EXP 54
65261: PPUSH
65262: LD_VAR 0 2
65266: PPUSH
65267: EMPTY
65268: PPUSH
65269: CALL_OW 1
65273: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
65274: LD_ADDR_EXP 55
65278: PUSH
65279: LD_EXP 55
65283: PPUSH
65284: LD_VAR 0 2
65288: PPUSH
65289: EMPTY
65290: PPUSH
65291: CALL_OW 1
65295: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
65296: LD_ADDR_EXP 56
65300: PUSH
65301: LD_EXP 56
65305: PPUSH
65306: LD_VAR 0 2
65310: PPUSH
65311: EMPTY
65312: PPUSH
65313: CALL_OW 1
65317: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
65318: LD_ADDR_EXP 57
65322: PUSH
65323: LD_EXP 57
65327: PPUSH
65328: LD_VAR 0 2
65332: PPUSH
65333: EMPTY
65334: PPUSH
65335: CALL_OW 1
65339: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
65340: LD_ADDR_EXP 58
65344: PUSH
65345: LD_EXP 58
65349: PPUSH
65350: LD_VAR 0 2
65354: PPUSH
65355: EMPTY
65356: PPUSH
65357: CALL_OW 1
65361: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
65362: LD_ADDR_EXP 47
65366: PUSH
65367: LD_EXP 47
65371: PPUSH
65372: LD_VAR 0 2
65376: PPUSH
65377: LD_INT 0
65379: PPUSH
65380: CALL_OW 1
65384: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
65385: LD_ADDR_EXP 60
65389: PUSH
65390: LD_EXP 60
65394: PPUSH
65395: LD_VAR 0 2
65399: PPUSH
65400: LD_INT 0
65402: PPUSH
65403: CALL_OW 1
65407: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
65408: LD_ADDR_EXP 48
65412: PUSH
65413: LD_EXP 48
65417: PPUSH
65418: LD_VAR 0 2
65422: PPUSH
65423: EMPTY
65424: PPUSH
65425: CALL_OW 1
65429: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
65430: LD_ADDR_EXP 59
65434: PUSH
65435: LD_EXP 59
65439: PPUSH
65440: LD_VAR 0 2
65444: PPUSH
65445: LD_INT 0
65447: PPUSH
65448: CALL_OW 1
65452: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
65453: LD_ADDR_EXP 61
65457: PUSH
65458: LD_EXP 61
65462: PPUSH
65463: LD_VAR 0 2
65467: PPUSH
65468: EMPTY
65469: PPUSH
65470: CALL_OW 1
65474: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
65475: LD_ADDR_EXP 64
65479: PUSH
65480: LD_EXP 64
65484: PPUSH
65485: LD_VAR 0 2
65489: PPUSH
65490: LD_INT 0
65492: PPUSH
65493: CALL_OW 1
65497: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
65498: LD_ADDR_EXP 65
65502: PUSH
65503: LD_EXP 65
65507: PPUSH
65508: LD_VAR 0 2
65512: PPUSH
65513: EMPTY
65514: PPUSH
65515: CALL_OW 1
65519: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
65520: LD_ADDR_EXP 66
65524: PUSH
65525: LD_EXP 66
65529: PPUSH
65530: LD_VAR 0 2
65534: PPUSH
65535: EMPTY
65536: PPUSH
65537: CALL_OW 1
65541: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
65542: LD_ADDR_EXP 67
65546: PUSH
65547: LD_EXP 67
65551: PPUSH
65552: LD_VAR 0 2
65556: PPUSH
65557: EMPTY
65558: PPUSH
65559: CALL_OW 1
65563: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
65564: LD_ADDR_EXP 69
65568: PUSH
65569: LD_EXP 69
65573: PPUSH
65574: LD_VAR 0 2
65578: PPUSH
65579: LD_EXP 36
65583: PUSH
65584: LD_VAR 0 2
65588: ARRAY
65589: PPUSH
65590: LD_INT 2
65592: PUSH
65593: LD_INT 30
65595: PUSH
65596: LD_INT 6
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 30
65605: PUSH
65606: LD_INT 7
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 30
65615: PUSH
65616: LD_INT 8
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: PPUSH
65629: CALL_OW 72
65633: PPUSH
65634: CALL_OW 1
65638: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
65639: LD_ADDR_EXP 70
65643: PUSH
65644: LD_EXP 70
65648: PPUSH
65649: LD_VAR 0 2
65653: PPUSH
65654: EMPTY
65655: PPUSH
65656: CALL_OW 1
65660: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
65661: LD_ADDR_EXP 71
65665: PUSH
65666: LD_EXP 71
65670: PPUSH
65671: LD_VAR 0 2
65675: PPUSH
65676: EMPTY
65677: PPUSH
65678: CALL_OW 1
65682: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
65683: LD_ADDR_EXP 72
65687: PUSH
65688: LD_EXP 72
65692: PPUSH
65693: LD_VAR 0 2
65697: PPUSH
65698: EMPTY
65699: PPUSH
65700: CALL_OW 1
65704: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
65705: LD_ADDR_EXP 73
65709: PUSH
65710: LD_EXP 73
65714: PPUSH
65715: LD_VAR 0 2
65719: PPUSH
65720: EMPTY
65721: PPUSH
65722: CALL_OW 1
65726: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
65727: LD_ADDR_EXP 74
65731: PUSH
65732: LD_EXP 74
65736: PPUSH
65737: LD_VAR 0 2
65741: PPUSH
65742: EMPTY
65743: PPUSH
65744: CALL_OW 1
65748: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
65749: LD_ADDR_EXP 75
65753: PUSH
65754: LD_EXP 75
65758: PPUSH
65759: LD_VAR 0 2
65763: PPUSH
65764: EMPTY
65765: PPUSH
65766: CALL_OW 1
65770: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
65771: LD_ADDR_EXP 76
65775: PUSH
65776: LD_EXP 76
65780: PPUSH
65781: LD_VAR 0 2
65785: PPUSH
65786: EMPTY
65787: PPUSH
65788: CALL_OW 1
65792: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
65793: LD_ADDR_EXP 77
65797: PUSH
65798: LD_EXP 77
65802: PPUSH
65803: LD_VAR 0 2
65807: PPUSH
65808: EMPTY
65809: PPUSH
65810: CALL_OW 1
65814: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
65815: LD_ADDR_EXP 78
65819: PUSH
65820: LD_EXP 78
65824: PPUSH
65825: LD_VAR 0 2
65829: PPUSH
65830: LD_INT 0
65832: PPUSH
65833: CALL_OW 1
65837: ST_TO_ADDR
// end ;
65838: GO 64762
65840: POP
65841: POP
// MC_InitSides ( ) ;
65842: CALL 66128 0 0
// MC_InitResearch ( ) ;
65846: CALL 65867 0 0
// CustomInitMacro ( ) ;
65850: CALL 1407 0 0
// skirmish := true ;
65854: LD_ADDR_EXP 34
65858: PUSH
65859: LD_INT 1
65861: ST_TO_ADDR
// end ;
65862: LD_VAR 0 1
65866: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
65867: LD_INT 0
65869: PPUSH
65870: PPUSH
65871: PPUSH
65872: PPUSH
65873: PPUSH
65874: PPUSH
// if not mc_bases then
65875: LD_EXP 36
65879: NOT
65880: IFFALSE 65884
// exit ;
65882: GO 66123
// for i = 1 to 8 do
65884: LD_ADDR_VAR 0 2
65888: PUSH
65889: DOUBLE
65890: LD_INT 1
65892: DEC
65893: ST_TO_ADDR
65894: LD_INT 8
65896: PUSH
65897: FOR_TO
65898: IFFALSE 65924
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
65900: LD_ADDR_EXP 63
65904: PUSH
65905: LD_EXP 63
65909: PPUSH
65910: LD_VAR 0 2
65914: PPUSH
65915: EMPTY
65916: PPUSH
65917: CALL_OW 1
65921: ST_TO_ADDR
65922: GO 65897
65924: POP
65925: POP
// tmp := [ ] ;
65926: LD_ADDR_VAR 0 5
65930: PUSH
65931: EMPTY
65932: ST_TO_ADDR
// for i = 1 to mc_sides do
65933: LD_ADDR_VAR 0 2
65937: PUSH
65938: DOUBLE
65939: LD_INT 1
65941: DEC
65942: ST_TO_ADDR
65943: LD_EXP 62
65947: PUSH
65948: FOR_TO
65949: IFFALSE 66007
// if not mc_sides [ i ] in tmp then
65951: LD_EXP 62
65955: PUSH
65956: LD_VAR 0 2
65960: ARRAY
65961: PUSH
65962: LD_VAR 0 5
65966: IN
65967: NOT
65968: IFFALSE 66005
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
65970: LD_ADDR_VAR 0 5
65974: PUSH
65975: LD_VAR 0 5
65979: PPUSH
65980: LD_VAR 0 5
65984: PUSH
65985: LD_INT 1
65987: PLUS
65988: PPUSH
65989: LD_EXP 62
65993: PUSH
65994: LD_VAR 0 2
65998: ARRAY
65999: PPUSH
66000: CALL_OW 2
66004: ST_TO_ADDR
66005: GO 65948
66007: POP
66008: POP
// if not tmp then
66009: LD_VAR 0 5
66013: NOT
66014: IFFALSE 66018
// exit ;
66016: GO 66123
// for j in tmp do
66018: LD_ADDR_VAR 0 3
66022: PUSH
66023: LD_VAR 0 5
66027: PUSH
66028: FOR_IN
66029: IFFALSE 66121
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
66031: LD_ADDR_VAR 0 6
66035: PUSH
66036: LD_INT 22
66038: PUSH
66039: LD_VAR 0 3
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PPUSH
66048: CALL_OW 69
66052: ST_TO_ADDR
// if not un then
66053: LD_VAR 0 6
66057: NOT
66058: IFFALSE 66062
// continue ;
66060: GO 66028
// nation := GetNation ( un [ 1 ] ) ;
66062: LD_ADDR_VAR 0 4
66066: PUSH
66067: LD_VAR 0 6
66071: PUSH
66072: LD_INT 1
66074: ARRAY
66075: PPUSH
66076: CALL_OW 248
66080: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
66081: LD_ADDR_EXP 63
66085: PUSH
66086: LD_EXP 63
66090: PPUSH
66091: LD_VAR 0 3
66095: PPUSH
66096: LD_VAR 0 3
66100: PPUSH
66101: LD_VAR 0 4
66105: PPUSH
66106: LD_INT 1
66108: PPUSH
66109: CALL 19418 0 3
66113: PPUSH
66114: CALL_OW 1
66118: ST_TO_ADDR
// end ;
66119: GO 66028
66121: POP
66122: POP
// end ;
66123: LD_VAR 0 1
66127: RET
// export function MC_InitSides ( ) ; var i ; begin
66128: LD_INT 0
66130: PPUSH
66131: PPUSH
// if not mc_bases then
66132: LD_EXP 36
66136: NOT
66137: IFFALSE 66141
// exit ;
66139: GO 66215
// for i = 1 to mc_bases do
66141: LD_ADDR_VAR 0 2
66145: PUSH
66146: DOUBLE
66147: LD_INT 1
66149: DEC
66150: ST_TO_ADDR
66151: LD_EXP 36
66155: PUSH
66156: FOR_TO
66157: IFFALSE 66213
// if mc_bases [ i ] then
66159: LD_EXP 36
66163: PUSH
66164: LD_VAR 0 2
66168: ARRAY
66169: IFFALSE 66211
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
66171: LD_ADDR_EXP 62
66175: PUSH
66176: LD_EXP 62
66180: PPUSH
66181: LD_VAR 0 2
66185: PPUSH
66186: LD_EXP 36
66190: PUSH
66191: LD_VAR 0 2
66195: ARRAY
66196: PUSH
66197: LD_INT 1
66199: ARRAY
66200: PPUSH
66201: CALL_OW 255
66205: PPUSH
66206: CALL_OW 1
66210: ST_TO_ADDR
66211: GO 66156
66213: POP
66214: POP
// end ;
66215: LD_VAR 0 1
66219: RET
// every 0 0$01 trigger skirmish do
66220: LD_EXP 34
66224: IFFALSE 66378
66226: GO 66228
66228: DISABLE
// begin enable ;
66229: ENABLE
// MC_CheckBuildings ( ) ;
66230: CALL 70876 0 0
// MC_CheckPeopleLife ( ) ;
66234: CALL 71001 0 0
// RaiseSailEvent ( 100 ) ;
66238: LD_INT 100
66240: PPUSH
66241: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
66245: LD_INT 103
66247: PPUSH
66248: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
66252: LD_INT 104
66254: PPUSH
66255: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
66259: LD_INT 105
66261: PPUSH
66262: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
66266: LD_INT 106
66268: PPUSH
66269: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
66273: LD_INT 107
66275: PPUSH
66276: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
66280: LD_INT 108
66282: PPUSH
66283: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
66287: LD_INT 109
66289: PPUSH
66290: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
66294: LD_INT 110
66296: PPUSH
66297: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
66301: LD_INT 111
66303: PPUSH
66304: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
66308: LD_INT 112
66310: PPUSH
66311: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
66315: LD_INT 113
66317: PPUSH
66318: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
66322: LD_INT 120
66324: PPUSH
66325: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
66329: LD_INT 121
66331: PPUSH
66332: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
66336: LD_INT 122
66338: PPUSH
66339: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
66343: LD_INT 123
66345: PPUSH
66346: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
66350: LD_INT 124
66352: PPUSH
66353: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
66357: LD_INT 125
66359: PPUSH
66360: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
66364: LD_INT 126
66366: PPUSH
66367: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
66371: LD_INT 200
66373: PPUSH
66374: CALL_OW 427
// end ;
66378: END
// on SailEvent ( event ) do begin if event < 100 then
66379: LD_VAR 0 1
66383: PUSH
66384: LD_INT 100
66386: LESS
66387: IFFALSE 66398
// CustomEvent ( event ) ;
66389: LD_VAR 0 1
66393: PPUSH
66394: CALL 18596 0 1
// if event = 100 then
66398: LD_VAR 0 1
66402: PUSH
66403: LD_INT 100
66405: EQUAL
66406: IFFALSE 66412
// MC_ClassManager ( ) ;
66408: CALL 66804 0 0
// if event = 101 then
66412: LD_VAR 0 1
66416: PUSH
66417: LD_INT 101
66419: EQUAL
66420: IFFALSE 66426
// MC_RepairBuildings ( ) ;
66422: CALL 71597 0 0
// if event = 102 then
66426: LD_VAR 0 1
66430: PUSH
66431: LD_INT 102
66433: EQUAL
66434: IFFALSE 66440
// MC_Heal ( ) ;
66436: CALL 72461 0 0
// if event = 103 then
66440: LD_VAR 0 1
66444: PUSH
66445: LD_INT 103
66447: EQUAL
66448: IFFALSE 66454
// MC_Build ( ) ;
66450: CALL 72883 0 0
// if event = 104 then
66454: LD_VAR 0 1
66458: PUSH
66459: LD_INT 104
66461: EQUAL
66462: IFFALSE 66468
// MC_TurretWeapon ( ) ;
66464: CALL 74496 0 0
// if event = 105 then
66468: LD_VAR 0 1
66472: PUSH
66473: LD_INT 105
66475: EQUAL
66476: IFFALSE 66482
// MC_BuildUpgrade ( ) ;
66478: CALL 74047 0 0
// if event = 106 then
66482: LD_VAR 0 1
66486: PUSH
66487: LD_INT 106
66489: EQUAL
66490: IFFALSE 66496
// MC_PlantMines ( ) ;
66492: CALL 74926 0 0
// if event = 107 then
66496: LD_VAR 0 1
66500: PUSH
66501: LD_INT 107
66503: EQUAL
66504: IFFALSE 66510
// MC_CollectCrates ( ) ;
66506: CALL 75724 0 0
// if event = 108 then
66510: LD_VAR 0 1
66514: PUSH
66515: LD_INT 108
66517: EQUAL
66518: IFFALSE 66524
// MC_LinkRemoteControl ( ) ;
66520: CALL 77500 0 0
// if event = 109 then
66524: LD_VAR 0 1
66528: PUSH
66529: LD_INT 109
66531: EQUAL
66532: IFFALSE 66538
// MC_ProduceVehicle ( ) ;
66534: CALL 77681 0 0
// if event = 110 then
66538: LD_VAR 0 1
66542: PUSH
66543: LD_INT 110
66545: EQUAL
66546: IFFALSE 66552
// MC_SendAttack ( ) ;
66548: CALL 78147 0 0
// if event = 111 then
66552: LD_VAR 0 1
66556: PUSH
66557: LD_INT 111
66559: EQUAL
66560: IFFALSE 66566
// MC_Defend ( ) ;
66562: CALL 78255 0 0
// if event = 112 then
66566: LD_VAR 0 1
66570: PUSH
66571: LD_INT 112
66573: EQUAL
66574: IFFALSE 66580
// MC_Research ( ) ;
66576: CALL 78860 0 0
// if event = 113 then
66580: LD_VAR 0 1
66584: PUSH
66585: LD_INT 113
66587: EQUAL
66588: IFFALSE 66594
// MC_MinesTrigger ( ) ;
66590: CALL 79974 0 0
// if event = 120 then
66594: LD_VAR 0 1
66598: PUSH
66599: LD_INT 120
66601: EQUAL
66602: IFFALSE 66608
// MC_RepairVehicle ( ) ;
66604: CALL 80073 0 0
// if event = 121 then
66608: LD_VAR 0 1
66612: PUSH
66613: LD_INT 121
66615: EQUAL
66616: IFFALSE 66622
// MC_TameApe ( ) ;
66618: CALL 80803 0 0
// if event = 122 then
66622: LD_VAR 0 1
66626: PUSH
66627: LD_INT 122
66629: EQUAL
66630: IFFALSE 66636
// MC_ChangeApeClass ( ) ;
66632: CALL 81632 0 0
// if event = 123 then
66636: LD_VAR 0 1
66640: PUSH
66641: LD_INT 123
66643: EQUAL
66644: IFFALSE 66650
// MC_Bazooka ( ) ;
66646: CALL 82282 0 0
// if event = 124 then
66650: LD_VAR 0 1
66654: PUSH
66655: LD_INT 124
66657: EQUAL
66658: IFFALSE 66664
// MC_TeleportExit ( ) ;
66660: CALL 82480 0 0
// if event = 125 then
66664: LD_VAR 0 1
66668: PUSH
66669: LD_INT 125
66671: EQUAL
66672: IFFALSE 66678
// MC_Deposits ( ) ;
66674: CALL 83127 0 0
// if event = 126 then
66678: LD_VAR 0 1
66682: PUSH
66683: LD_INT 126
66685: EQUAL
66686: IFFALSE 66692
// MC_RemoteDriver ( ) ;
66688: CALL 83752 0 0
// if event = 200 then
66692: LD_VAR 0 1
66696: PUSH
66697: LD_INT 200
66699: EQUAL
66700: IFFALSE 66706
// MC_Idle ( ) ;
66702: CALL 85701 0 0
// end ;
66706: PPOPN 1
66708: END
// export function MC_Reset ( base , tag ) ; var i ; begin
66709: LD_INT 0
66711: PPUSH
66712: PPUSH
// if not mc_bases [ base ] or not tag then
66713: LD_EXP 36
66717: PUSH
66718: LD_VAR 0 1
66722: ARRAY
66723: NOT
66724: PUSH
66725: LD_VAR 0 2
66729: NOT
66730: OR
66731: IFFALSE 66735
// exit ;
66733: GO 66799
// for i in mc_bases [ base ] union mc_ape [ base ] do
66735: LD_ADDR_VAR 0 4
66739: PUSH
66740: LD_EXP 36
66744: PUSH
66745: LD_VAR 0 1
66749: ARRAY
66750: PUSH
66751: LD_EXP 65
66755: PUSH
66756: LD_VAR 0 1
66760: ARRAY
66761: UNION
66762: PUSH
66763: FOR_IN
66764: IFFALSE 66797
// if GetTag ( i ) = tag then
66766: LD_VAR 0 4
66770: PPUSH
66771: CALL_OW 110
66775: PUSH
66776: LD_VAR 0 2
66780: EQUAL
66781: IFFALSE 66795
// SetTag ( i , 0 ) ;
66783: LD_VAR 0 4
66787: PPUSH
66788: LD_INT 0
66790: PPUSH
66791: CALL_OW 109
66795: GO 66763
66797: POP
66798: POP
// end ;
66799: LD_VAR 0 3
66803: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
66804: LD_INT 0
66806: PPUSH
66807: PPUSH
66808: PPUSH
66809: PPUSH
66810: PPUSH
66811: PPUSH
66812: PPUSH
66813: PPUSH
// if not mc_bases then
66814: LD_EXP 36
66818: NOT
66819: IFFALSE 66823
// exit ;
66821: GO 67281
// for i = 1 to mc_bases do
66823: LD_ADDR_VAR 0 2
66827: PUSH
66828: DOUBLE
66829: LD_INT 1
66831: DEC
66832: ST_TO_ADDR
66833: LD_EXP 36
66837: PUSH
66838: FOR_TO
66839: IFFALSE 67279
// begin tmp := MC_ClassCheckReq ( i ) ;
66841: LD_ADDR_VAR 0 4
66845: PUSH
66846: LD_VAR 0 2
66850: PPUSH
66851: CALL 67286 0 1
66855: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
66856: LD_ADDR_EXP 77
66860: PUSH
66861: LD_EXP 77
66865: PPUSH
66866: LD_VAR 0 2
66870: PPUSH
66871: LD_VAR 0 4
66875: PPUSH
66876: CALL_OW 1
66880: ST_TO_ADDR
// if not tmp then
66881: LD_VAR 0 4
66885: NOT
66886: IFFALSE 66890
// continue ;
66888: GO 66838
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
66890: LD_ADDR_VAR 0 6
66894: PUSH
66895: LD_EXP 36
66899: PUSH
66900: LD_VAR 0 2
66904: ARRAY
66905: PPUSH
66906: LD_INT 2
66908: PUSH
66909: LD_INT 30
66911: PUSH
66912: LD_INT 4
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 30
66921: PUSH
66922: LD_INT 5
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: LIST
66933: PPUSH
66934: CALL_OW 72
66938: PUSH
66939: LD_EXP 36
66943: PUSH
66944: LD_VAR 0 2
66948: ARRAY
66949: PPUSH
66950: LD_INT 2
66952: PUSH
66953: LD_INT 30
66955: PUSH
66956: LD_INT 0
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: PUSH
66963: LD_INT 30
66965: PUSH
66966: LD_INT 1
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: LIST
66977: PPUSH
66978: CALL_OW 72
66982: PUSH
66983: LD_EXP 36
66987: PUSH
66988: LD_VAR 0 2
66992: ARRAY
66993: PPUSH
66994: LD_INT 30
66996: PUSH
66997: LD_INT 3
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: PPUSH
67004: CALL_OW 72
67008: PUSH
67009: LD_EXP 36
67013: PUSH
67014: LD_VAR 0 2
67018: ARRAY
67019: PPUSH
67020: LD_INT 2
67022: PUSH
67023: LD_INT 30
67025: PUSH
67026: LD_INT 6
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: PUSH
67033: LD_INT 30
67035: PUSH
67036: LD_INT 7
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 30
67045: PUSH
67046: LD_INT 8
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: PPUSH
67059: CALL_OW 72
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: LIST
67068: LIST
67069: ST_TO_ADDR
// for j = 1 to 4 do
67070: LD_ADDR_VAR 0 3
67074: PUSH
67075: DOUBLE
67076: LD_INT 1
67078: DEC
67079: ST_TO_ADDR
67080: LD_INT 4
67082: PUSH
67083: FOR_TO
67084: IFFALSE 67275
// begin if not tmp [ j ] then
67086: LD_VAR 0 4
67090: PUSH
67091: LD_VAR 0 3
67095: ARRAY
67096: NOT
67097: IFFALSE 67101
// continue ;
67099: GO 67083
// for p in tmp [ j ] do
67101: LD_ADDR_VAR 0 5
67105: PUSH
67106: LD_VAR 0 4
67110: PUSH
67111: LD_VAR 0 3
67115: ARRAY
67116: PUSH
67117: FOR_IN
67118: IFFALSE 67271
// begin if not b [ j ] then
67120: LD_VAR 0 6
67124: PUSH
67125: LD_VAR 0 3
67129: ARRAY
67130: NOT
67131: IFFALSE 67135
// break ;
67133: GO 67271
// e := 0 ;
67135: LD_ADDR_VAR 0 7
67139: PUSH
67140: LD_INT 0
67142: ST_TO_ADDR
// for k in b [ j ] do
67143: LD_ADDR_VAR 0 8
67147: PUSH
67148: LD_VAR 0 6
67152: PUSH
67153: LD_VAR 0 3
67157: ARRAY
67158: PUSH
67159: FOR_IN
67160: IFFALSE 67187
// if IsNotFull ( k ) then
67162: LD_VAR 0 8
67166: PPUSH
67167: CALL 23918 0 1
67171: IFFALSE 67185
// begin e := k ;
67173: LD_ADDR_VAR 0 7
67177: PUSH
67178: LD_VAR 0 8
67182: ST_TO_ADDR
// break ;
67183: GO 67187
// end ;
67185: GO 67159
67187: POP
67188: POP
// if e and not UnitGoingToBuilding ( p , e ) then
67189: LD_VAR 0 7
67193: PUSH
67194: LD_VAR 0 5
67198: PPUSH
67199: LD_VAR 0 7
67203: PPUSH
67204: CALL 61047 0 2
67208: NOT
67209: AND
67210: IFFALSE 67269
// begin if IsInUnit ( p ) then
67212: LD_VAR 0 5
67216: PPUSH
67217: CALL_OW 310
67221: IFFALSE 67232
// ComExitBuilding ( p ) ;
67223: LD_VAR 0 5
67227: PPUSH
67228: CALL_OW 122
// ComEnterUnit ( p , e ) ;
67232: LD_VAR 0 5
67236: PPUSH
67237: LD_VAR 0 7
67241: PPUSH
67242: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
67246: LD_VAR 0 5
67250: PPUSH
67251: LD_VAR 0 3
67255: PPUSH
67256: CALL_OW 183
// AddComExitBuilding ( p ) ;
67260: LD_VAR 0 5
67264: PPUSH
67265: CALL_OW 182
// end ; end ;
67269: GO 67117
67271: POP
67272: POP
// end ;
67273: GO 67083
67275: POP
67276: POP
// end ;
67277: GO 66838
67279: POP
67280: POP
// end ;
67281: LD_VAR 0 1
67285: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
67286: LD_INT 0
67288: PPUSH
67289: PPUSH
67290: PPUSH
67291: PPUSH
67292: PPUSH
67293: PPUSH
67294: PPUSH
67295: PPUSH
67296: PPUSH
67297: PPUSH
67298: PPUSH
67299: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
67300: LD_VAR 0 1
67304: NOT
67305: PUSH
67306: LD_EXP 36
67310: PUSH
67311: LD_VAR 0 1
67315: ARRAY
67316: NOT
67317: OR
67318: PUSH
67319: LD_EXP 36
67323: PUSH
67324: LD_VAR 0 1
67328: ARRAY
67329: PPUSH
67330: LD_INT 2
67332: PUSH
67333: LD_INT 30
67335: PUSH
67336: LD_INT 0
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: LD_INT 30
67345: PUSH
67346: LD_INT 1
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: LIST
67357: PPUSH
67358: CALL_OW 72
67362: NOT
67363: OR
67364: IFFALSE 67368
// exit ;
67366: GO 70871
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
67368: LD_ADDR_VAR 0 4
67372: PUSH
67373: LD_EXP 36
67377: PUSH
67378: LD_VAR 0 1
67382: ARRAY
67383: PPUSH
67384: LD_INT 2
67386: PUSH
67387: LD_INT 25
67389: PUSH
67390: LD_INT 1
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 25
67399: PUSH
67400: LD_INT 2
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PUSH
67407: LD_INT 25
67409: PUSH
67410: LD_INT 3
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 25
67419: PUSH
67420: LD_INT 4
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PUSH
67427: LD_INT 25
67429: PUSH
67430: LD_INT 5
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: LD_INT 25
67439: PUSH
67440: LD_INT 8
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: PUSH
67447: LD_INT 25
67449: PUSH
67450: LD_INT 9
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: LIST
67461: LIST
67462: LIST
67463: LIST
67464: LIST
67465: LIST
67466: PPUSH
67467: CALL_OW 72
67471: ST_TO_ADDR
// if not tmp then
67472: LD_VAR 0 4
67476: NOT
67477: IFFALSE 67481
// exit ;
67479: GO 70871
// for i in tmp do
67481: LD_ADDR_VAR 0 3
67485: PUSH
67486: LD_VAR 0 4
67490: PUSH
67491: FOR_IN
67492: IFFALSE 67523
// if GetTag ( i ) then
67494: LD_VAR 0 3
67498: PPUSH
67499: CALL_OW 110
67503: IFFALSE 67521
// tmp := tmp diff i ;
67505: LD_ADDR_VAR 0 4
67509: PUSH
67510: LD_VAR 0 4
67514: PUSH
67515: LD_VAR 0 3
67519: DIFF
67520: ST_TO_ADDR
67521: GO 67491
67523: POP
67524: POP
// if not tmp then
67525: LD_VAR 0 4
67529: NOT
67530: IFFALSE 67534
// exit ;
67532: GO 70871
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
67534: LD_ADDR_VAR 0 5
67538: PUSH
67539: LD_EXP 36
67543: PUSH
67544: LD_VAR 0 1
67548: ARRAY
67549: PPUSH
67550: LD_INT 2
67552: PUSH
67553: LD_INT 25
67555: PUSH
67556: LD_INT 1
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: LD_INT 25
67565: PUSH
67566: LD_INT 5
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: PUSH
67573: LD_INT 25
67575: PUSH
67576: LD_INT 8
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PUSH
67583: LD_INT 25
67585: PUSH
67586: LD_INT 9
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: LIST
67597: LIST
67598: LIST
67599: PPUSH
67600: CALL_OW 72
67604: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
67605: LD_ADDR_VAR 0 6
67609: PUSH
67610: LD_EXP 36
67614: PUSH
67615: LD_VAR 0 1
67619: ARRAY
67620: PPUSH
67621: LD_INT 25
67623: PUSH
67624: LD_INT 2
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PPUSH
67631: CALL_OW 72
67635: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
67636: LD_ADDR_VAR 0 7
67640: PUSH
67641: LD_EXP 36
67645: PUSH
67646: LD_VAR 0 1
67650: ARRAY
67651: PPUSH
67652: LD_INT 25
67654: PUSH
67655: LD_INT 3
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PPUSH
67662: CALL_OW 72
67666: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
67667: LD_ADDR_VAR 0 8
67671: PUSH
67672: LD_EXP 36
67676: PUSH
67677: LD_VAR 0 1
67681: ARRAY
67682: PPUSH
67683: LD_INT 25
67685: PUSH
67686: LD_INT 4
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 24
67695: PUSH
67696: LD_INT 251
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PPUSH
67707: CALL_OW 72
67711: ST_TO_ADDR
// if mc_scan [ base ] then
67712: LD_EXP 59
67716: PUSH
67717: LD_VAR 0 1
67721: ARRAY
67722: IFFALSE 68183
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
67724: LD_ADDR_EXP 78
67728: PUSH
67729: LD_EXP 78
67733: PPUSH
67734: LD_VAR 0 1
67738: PPUSH
67739: LD_INT 4
67741: PPUSH
67742: CALL_OW 1
67746: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
67747: LD_ADDR_VAR 0 12
67751: PUSH
67752: LD_EXP 36
67756: PUSH
67757: LD_VAR 0 1
67761: ARRAY
67762: PPUSH
67763: LD_INT 2
67765: PUSH
67766: LD_INT 30
67768: PUSH
67769: LD_INT 4
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PUSH
67776: LD_INT 30
67778: PUSH
67779: LD_INT 5
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: LIST
67790: PPUSH
67791: CALL_OW 72
67795: ST_TO_ADDR
// if not b then
67796: LD_VAR 0 12
67800: NOT
67801: IFFALSE 67805
// exit ;
67803: GO 70871
// p := [ ] ;
67805: LD_ADDR_VAR 0 11
67809: PUSH
67810: EMPTY
67811: ST_TO_ADDR
// if sci >= 2 then
67812: LD_VAR 0 8
67816: PUSH
67817: LD_INT 2
67819: GREATEREQUAL
67820: IFFALSE 67851
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
67822: LD_ADDR_VAR 0 8
67826: PUSH
67827: LD_VAR 0 8
67831: PUSH
67832: LD_INT 1
67834: ARRAY
67835: PUSH
67836: LD_VAR 0 8
67840: PUSH
67841: LD_INT 2
67843: ARRAY
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: ST_TO_ADDR
67849: GO 67912
// if sci = 1 then
67851: LD_VAR 0 8
67855: PUSH
67856: LD_INT 1
67858: EQUAL
67859: IFFALSE 67880
// sci := [ sci [ 1 ] ] else
67861: LD_ADDR_VAR 0 8
67865: PUSH
67866: LD_VAR 0 8
67870: PUSH
67871: LD_INT 1
67873: ARRAY
67874: PUSH
67875: EMPTY
67876: LIST
67877: ST_TO_ADDR
67878: GO 67912
// if sci = 0 then
67880: LD_VAR 0 8
67884: PUSH
67885: LD_INT 0
67887: EQUAL
67888: IFFALSE 67912
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
67890: LD_ADDR_VAR 0 11
67894: PUSH
67895: LD_VAR 0 4
67899: PPUSH
67900: LD_INT 4
67902: PPUSH
67903: CALL 60910 0 2
67907: PUSH
67908: LD_INT 1
67910: ARRAY
67911: ST_TO_ADDR
// if eng > 4 then
67912: LD_VAR 0 6
67916: PUSH
67917: LD_INT 4
67919: GREATER
67920: IFFALSE 67966
// for i = eng downto 4 do
67922: LD_ADDR_VAR 0 3
67926: PUSH
67927: DOUBLE
67928: LD_VAR 0 6
67932: INC
67933: ST_TO_ADDR
67934: LD_INT 4
67936: PUSH
67937: FOR_DOWNTO
67938: IFFALSE 67964
// eng := eng diff eng [ i ] ;
67940: LD_ADDR_VAR 0 6
67944: PUSH
67945: LD_VAR 0 6
67949: PUSH
67950: LD_VAR 0 6
67954: PUSH
67955: LD_VAR 0 3
67959: ARRAY
67960: DIFF
67961: ST_TO_ADDR
67962: GO 67937
67964: POP
67965: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
67966: LD_ADDR_VAR 0 4
67970: PUSH
67971: LD_VAR 0 4
67975: PUSH
67976: LD_VAR 0 5
67980: PUSH
67981: LD_VAR 0 6
67985: UNION
67986: PUSH
67987: LD_VAR 0 7
67991: UNION
67992: PUSH
67993: LD_VAR 0 8
67997: UNION
67998: DIFF
67999: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
68000: LD_ADDR_VAR 0 13
68004: PUSH
68005: LD_EXP 36
68009: PUSH
68010: LD_VAR 0 1
68014: ARRAY
68015: PPUSH
68016: LD_INT 2
68018: PUSH
68019: LD_INT 30
68021: PUSH
68022: LD_INT 32
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PUSH
68029: LD_INT 30
68031: PUSH
68032: LD_INT 31
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: LIST
68043: PPUSH
68044: CALL_OW 72
68048: PUSH
68049: LD_EXP 36
68053: PUSH
68054: LD_VAR 0 1
68058: ARRAY
68059: PPUSH
68060: LD_INT 2
68062: PUSH
68063: LD_INT 30
68065: PUSH
68066: LD_INT 4
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 30
68075: PUSH
68076: LD_INT 5
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: LIST
68087: PPUSH
68088: CALL_OW 72
68092: PUSH
68093: LD_INT 6
68095: MUL
68096: PLUS
68097: ST_TO_ADDR
// if bcount < tmp then
68098: LD_VAR 0 13
68102: PUSH
68103: LD_VAR 0 4
68107: LESS
68108: IFFALSE 68154
// for i = tmp downto bcount do
68110: LD_ADDR_VAR 0 3
68114: PUSH
68115: DOUBLE
68116: LD_VAR 0 4
68120: INC
68121: ST_TO_ADDR
68122: LD_VAR 0 13
68126: PUSH
68127: FOR_DOWNTO
68128: IFFALSE 68152
// tmp := Delete ( tmp , tmp ) ;
68130: LD_ADDR_VAR 0 4
68134: PUSH
68135: LD_VAR 0 4
68139: PPUSH
68140: LD_VAR 0 4
68144: PPUSH
68145: CALL_OW 3
68149: ST_TO_ADDR
68150: GO 68127
68152: POP
68153: POP
// result := [ tmp , 0 , 0 , p ] ;
68154: LD_ADDR_VAR 0 2
68158: PUSH
68159: LD_VAR 0 4
68163: PUSH
68164: LD_INT 0
68166: PUSH
68167: LD_INT 0
68169: PUSH
68170: LD_VAR 0 11
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: LIST
68179: LIST
68180: ST_TO_ADDR
// exit ;
68181: GO 70871
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
68183: LD_EXP 36
68187: PUSH
68188: LD_VAR 0 1
68192: ARRAY
68193: PPUSH
68194: LD_INT 2
68196: PUSH
68197: LD_INT 30
68199: PUSH
68200: LD_INT 6
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PUSH
68207: LD_INT 30
68209: PUSH
68210: LD_INT 7
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 30
68219: PUSH
68220: LD_INT 8
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: LIST
68231: LIST
68232: PPUSH
68233: CALL_OW 72
68237: NOT
68238: PUSH
68239: LD_EXP 36
68243: PUSH
68244: LD_VAR 0 1
68248: ARRAY
68249: PPUSH
68250: LD_INT 30
68252: PUSH
68253: LD_INT 3
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: PPUSH
68260: CALL_OW 72
68264: NOT
68265: AND
68266: IFFALSE 68338
// begin if eng = tmp then
68268: LD_VAR 0 6
68272: PUSH
68273: LD_VAR 0 4
68277: EQUAL
68278: IFFALSE 68282
// exit ;
68280: GO 70871
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
68282: LD_ADDR_EXP 78
68286: PUSH
68287: LD_EXP 78
68291: PPUSH
68292: LD_VAR 0 1
68296: PPUSH
68297: LD_INT 1
68299: PPUSH
68300: CALL_OW 1
68304: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
68305: LD_ADDR_VAR 0 2
68309: PUSH
68310: LD_INT 0
68312: PUSH
68313: LD_VAR 0 4
68317: PUSH
68318: LD_VAR 0 6
68322: DIFF
68323: PUSH
68324: LD_INT 0
68326: PUSH
68327: LD_INT 0
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: ST_TO_ADDR
// exit ;
68336: GO 70871
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
68338: LD_EXP 63
68342: PUSH
68343: LD_EXP 62
68347: PUSH
68348: LD_VAR 0 1
68352: ARRAY
68353: ARRAY
68354: PUSH
68355: LD_EXP 36
68359: PUSH
68360: LD_VAR 0 1
68364: ARRAY
68365: PPUSH
68366: LD_INT 2
68368: PUSH
68369: LD_INT 30
68371: PUSH
68372: LD_INT 6
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: PUSH
68379: LD_INT 30
68381: PUSH
68382: LD_INT 7
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: PUSH
68389: LD_INT 30
68391: PUSH
68392: LD_INT 8
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: EMPTY
68400: LIST
68401: LIST
68402: LIST
68403: LIST
68404: PPUSH
68405: CALL_OW 72
68409: AND
68410: PUSH
68411: LD_EXP 36
68415: PUSH
68416: LD_VAR 0 1
68420: ARRAY
68421: PPUSH
68422: LD_INT 30
68424: PUSH
68425: LD_INT 3
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PPUSH
68432: CALL_OW 72
68436: NOT
68437: AND
68438: IFFALSE 68652
// begin if sci >= 6 then
68440: LD_VAR 0 8
68444: PUSH
68445: LD_INT 6
68447: GREATEREQUAL
68448: IFFALSE 68452
// exit ;
68450: GO 70871
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
68452: LD_ADDR_EXP 78
68456: PUSH
68457: LD_EXP 78
68461: PPUSH
68462: LD_VAR 0 1
68466: PPUSH
68467: LD_INT 2
68469: PPUSH
68470: CALL_OW 1
68474: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
68475: LD_ADDR_VAR 0 9
68479: PUSH
68480: LD_VAR 0 4
68484: PUSH
68485: LD_VAR 0 8
68489: DIFF
68490: PPUSH
68491: LD_INT 4
68493: PPUSH
68494: CALL 60910 0 2
68498: ST_TO_ADDR
// p := [ ] ;
68499: LD_ADDR_VAR 0 11
68503: PUSH
68504: EMPTY
68505: ST_TO_ADDR
// if sci < 6 and sort > 6 then
68506: LD_VAR 0 8
68510: PUSH
68511: LD_INT 6
68513: LESS
68514: PUSH
68515: LD_VAR 0 9
68519: PUSH
68520: LD_INT 6
68522: GREATER
68523: AND
68524: IFFALSE 68605
// begin for i = 1 to 6 - sci do
68526: LD_ADDR_VAR 0 3
68530: PUSH
68531: DOUBLE
68532: LD_INT 1
68534: DEC
68535: ST_TO_ADDR
68536: LD_INT 6
68538: PUSH
68539: LD_VAR 0 8
68543: MINUS
68544: PUSH
68545: FOR_TO
68546: IFFALSE 68601
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
68548: LD_ADDR_VAR 0 11
68552: PUSH
68553: LD_VAR 0 11
68557: PPUSH
68558: LD_VAR 0 11
68562: PUSH
68563: LD_INT 1
68565: PLUS
68566: PPUSH
68567: LD_VAR 0 9
68571: PUSH
68572: LD_INT 1
68574: ARRAY
68575: PPUSH
68576: CALL_OW 2
68580: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
68581: LD_ADDR_VAR 0 9
68585: PUSH
68586: LD_VAR 0 9
68590: PPUSH
68591: LD_INT 1
68593: PPUSH
68594: CALL_OW 3
68598: ST_TO_ADDR
// end ;
68599: GO 68545
68601: POP
68602: POP
// end else
68603: GO 68625
// if sort then
68605: LD_VAR 0 9
68609: IFFALSE 68625
// p := sort [ 1 ] ;
68611: LD_ADDR_VAR 0 11
68615: PUSH
68616: LD_VAR 0 9
68620: PUSH
68621: LD_INT 1
68623: ARRAY
68624: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
68625: LD_ADDR_VAR 0 2
68629: PUSH
68630: LD_INT 0
68632: PUSH
68633: LD_INT 0
68635: PUSH
68636: LD_INT 0
68638: PUSH
68639: LD_VAR 0 11
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: LIST
68648: LIST
68649: ST_TO_ADDR
// exit ;
68650: GO 70871
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
68652: LD_EXP 63
68656: PUSH
68657: LD_EXP 62
68661: PUSH
68662: LD_VAR 0 1
68666: ARRAY
68667: ARRAY
68668: PUSH
68669: LD_EXP 36
68673: PUSH
68674: LD_VAR 0 1
68678: ARRAY
68679: PPUSH
68680: LD_INT 2
68682: PUSH
68683: LD_INT 30
68685: PUSH
68686: LD_INT 6
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: PUSH
68693: LD_INT 30
68695: PUSH
68696: LD_INT 7
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: PUSH
68703: LD_INT 30
68705: PUSH
68706: LD_INT 8
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: PPUSH
68719: CALL_OW 72
68723: AND
68724: PUSH
68725: LD_EXP 36
68729: PUSH
68730: LD_VAR 0 1
68734: ARRAY
68735: PPUSH
68736: LD_INT 30
68738: PUSH
68739: LD_INT 3
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PPUSH
68746: CALL_OW 72
68750: AND
68751: IFFALSE 69485
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
68753: LD_ADDR_EXP 78
68757: PUSH
68758: LD_EXP 78
68762: PPUSH
68763: LD_VAR 0 1
68767: PPUSH
68768: LD_INT 3
68770: PPUSH
68771: CALL_OW 1
68775: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
68776: LD_ADDR_VAR 0 2
68780: PUSH
68781: LD_INT 0
68783: PUSH
68784: LD_INT 0
68786: PUSH
68787: LD_INT 0
68789: PUSH
68790: LD_INT 0
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: ST_TO_ADDR
// if not eng then
68799: LD_VAR 0 6
68803: NOT
68804: IFFALSE 68867
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
68806: LD_ADDR_VAR 0 11
68810: PUSH
68811: LD_VAR 0 4
68815: PPUSH
68816: LD_INT 2
68818: PPUSH
68819: CALL 60910 0 2
68823: PUSH
68824: LD_INT 1
68826: ARRAY
68827: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
68828: LD_ADDR_VAR 0 2
68832: PUSH
68833: LD_VAR 0 2
68837: PPUSH
68838: LD_INT 2
68840: PPUSH
68841: LD_VAR 0 11
68845: PPUSH
68846: CALL_OW 1
68850: ST_TO_ADDR
// tmp := tmp diff p ;
68851: LD_ADDR_VAR 0 4
68855: PUSH
68856: LD_VAR 0 4
68860: PUSH
68861: LD_VAR 0 11
68865: DIFF
68866: ST_TO_ADDR
// end ; if tmp and sci < 6 then
68867: LD_VAR 0 4
68871: PUSH
68872: LD_VAR 0 8
68876: PUSH
68877: LD_INT 6
68879: LESS
68880: AND
68881: IFFALSE 69069
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
68883: LD_ADDR_VAR 0 9
68887: PUSH
68888: LD_VAR 0 4
68892: PUSH
68893: LD_VAR 0 8
68897: PUSH
68898: LD_VAR 0 7
68902: UNION
68903: DIFF
68904: PPUSH
68905: LD_INT 4
68907: PPUSH
68908: CALL 60910 0 2
68912: ST_TO_ADDR
// p := [ ] ;
68913: LD_ADDR_VAR 0 11
68917: PUSH
68918: EMPTY
68919: ST_TO_ADDR
// if sort then
68920: LD_VAR 0 9
68924: IFFALSE 69040
// for i = 1 to 6 - sci do
68926: LD_ADDR_VAR 0 3
68930: PUSH
68931: DOUBLE
68932: LD_INT 1
68934: DEC
68935: ST_TO_ADDR
68936: LD_INT 6
68938: PUSH
68939: LD_VAR 0 8
68943: MINUS
68944: PUSH
68945: FOR_TO
68946: IFFALSE 69038
// begin if i = sort then
68948: LD_VAR 0 3
68952: PUSH
68953: LD_VAR 0 9
68957: EQUAL
68958: IFFALSE 68962
// break ;
68960: GO 69038
// if GetClass ( i ) = 4 then
68962: LD_VAR 0 3
68966: PPUSH
68967: CALL_OW 257
68971: PUSH
68972: LD_INT 4
68974: EQUAL
68975: IFFALSE 68979
// continue ;
68977: GO 68945
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68979: LD_ADDR_VAR 0 11
68983: PUSH
68984: LD_VAR 0 11
68988: PPUSH
68989: LD_VAR 0 11
68993: PUSH
68994: LD_INT 1
68996: PLUS
68997: PPUSH
68998: LD_VAR 0 9
69002: PUSH
69003: LD_VAR 0 3
69007: ARRAY
69008: PPUSH
69009: CALL_OW 2
69013: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69014: LD_ADDR_VAR 0 4
69018: PUSH
69019: LD_VAR 0 4
69023: PUSH
69024: LD_VAR 0 9
69028: PUSH
69029: LD_VAR 0 3
69033: ARRAY
69034: DIFF
69035: ST_TO_ADDR
// end ;
69036: GO 68945
69038: POP
69039: POP
// if p then
69040: LD_VAR 0 11
69044: IFFALSE 69069
// result := Replace ( result , 4 , p ) ;
69046: LD_ADDR_VAR 0 2
69050: PUSH
69051: LD_VAR 0 2
69055: PPUSH
69056: LD_INT 4
69058: PPUSH
69059: LD_VAR 0 11
69063: PPUSH
69064: CALL_OW 1
69068: ST_TO_ADDR
// end ; if tmp and mech < 6 then
69069: LD_VAR 0 4
69073: PUSH
69074: LD_VAR 0 7
69078: PUSH
69079: LD_INT 6
69081: LESS
69082: AND
69083: IFFALSE 69271
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
69085: LD_ADDR_VAR 0 9
69089: PUSH
69090: LD_VAR 0 4
69094: PUSH
69095: LD_VAR 0 8
69099: PUSH
69100: LD_VAR 0 7
69104: UNION
69105: DIFF
69106: PPUSH
69107: LD_INT 3
69109: PPUSH
69110: CALL 60910 0 2
69114: ST_TO_ADDR
// p := [ ] ;
69115: LD_ADDR_VAR 0 11
69119: PUSH
69120: EMPTY
69121: ST_TO_ADDR
// if sort then
69122: LD_VAR 0 9
69126: IFFALSE 69242
// for i = 1 to 6 - mech do
69128: LD_ADDR_VAR 0 3
69132: PUSH
69133: DOUBLE
69134: LD_INT 1
69136: DEC
69137: ST_TO_ADDR
69138: LD_INT 6
69140: PUSH
69141: LD_VAR 0 7
69145: MINUS
69146: PUSH
69147: FOR_TO
69148: IFFALSE 69240
// begin if i = sort then
69150: LD_VAR 0 3
69154: PUSH
69155: LD_VAR 0 9
69159: EQUAL
69160: IFFALSE 69164
// break ;
69162: GO 69240
// if GetClass ( i ) = 3 then
69164: LD_VAR 0 3
69168: PPUSH
69169: CALL_OW 257
69173: PUSH
69174: LD_INT 3
69176: EQUAL
69177: IFFALSE 69181
// continue ;
69179: GO 69147
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69181: LD_ADDR_VAR 0 11
69185: PUSH
69186: LD_VAR 0 11
69190: PPUSH
69191: LD_VAR 0 11
69195: PUSH
69196: LD_INT 1
69198: PLUS
69199: PPUSH
69200: LD_VAR 0 9
69204: PUSH
69205: LD_VAR 0 3
69209: ARRAY
69210: PPUSH
69211: CALL_OW 2
69215: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69216: LD_ADDR_VAR 0 4
69220: PUSH
69221: LD_VAR 0 4
69225: PUSH
69226: LD_VAR 0 9
69230: PUSH
69231: LD_VAR 0 3
69235: ARRAY
69236: DIFF
69237: ST_TO_ADDR
// end ;
69238: GO 69147
69240: POP
69241: POP
// if p then
69242: LD_VAR 0 11
69246: IFFALSE 69271
// result := Replace ( result , 3 , p ) ;
69248: LD_ADDR_VAR 0 2
69252: PUSH
69253: LD_VAR 0 2
69257: PPUSH
69258: LD_INT 3
69260: PPUSH
69261: LD_VAR 0 11
69265: PPUSH
69266: CALL_OW 1
69270: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
69271: LD_VAR 0 4
69275: PUSH
69276: LD_INT 6
69278: GREATER
69279: PUSH
69280: LD_VAR 0 6
69284: PUSH
69285: LD_INT 6
69287: LESS
69288: AND
69289: IFFALSE 69483
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
69291: LD_ADDR_VAR 0 9
69295: PUSH
69296: LD_VAR 0 4
69300: PUSH
69301: LD_VAR 0 8
69305: PUSH
69306: LD_VAR 0 7
69310: UNION
69311: PUSH
69312: LD_VAR 0 6
69316: UNION
69317: DIFF
69318: PPUSH
69319: LD_INT 2
69321: PPUSH
69322: CALL 60910 0 2
69326: ST_TO_ADDR
// p := [ ] ;
69327: LD_ADDR_VAR 0 11
69331: PUSH
69332: EMPTY
69333: ST_TO_ADDR
// if sort then
69334: LD_VAR 0 9
69338: IFFALSE 69454
// for i = 1 to 6 - eng do
69340: LD_ADDR_VAR 0 3
69344: PUSH
69345: DOUBLE
69346: LD_INT 1
69348: DEC
69349: ST_TO_ADDR
69350: LD_INT 6
69352: PUSH
69353: LD_VAR 0 6
69357: MINUS
69358: PUSH
69359: FOR_TO
69360: IFFALSE 69452
// begin if i = sort then
69362: LD_VAR 0 3
69366: PUSH
69367: LD_VAR 0 9
69371: EQUAL
69372: IFFALSE 69376
// break ;
69374: GO 69452
// if GetClass ( i ) = 2 then
69376: LD_VAR 0 3
69380: PPUSH
69381: CALL_OW 257
69385: PUSH
69386: LD_INT 2
69388: EQUAL
69389: IFFALSE 69393
// continue ;
69391: GO 69359
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69393: LD_ADDR_VAR 0 11
69397: PUSH
69398: LD_VAR 0 11
69402: PPUSH
69403: LD_VAR 0 11
69407: PUSH
69408: LD_INT 1
69410: PLUS
69411: PPUSH
69412: LD_VAR 0 9
69416: PUSH
69417: LD_VAR 0 3
69421: ARRAY
69422: PPUSH
69423: CALL_OW 2
69427: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69428: LD_ADDR_VAR 0 4
69432: PUSH
69433: LD_VAR 0 4
69437: PUSH
69438: LD_VAR 0 9
69442: PUSH
69443: LD_VAR 0 3
69447: ARRAY
69448: DIFF
69449: ST_TO_ADDR
// end ;
69450: GO 69359
69452: POP
69453: POP
// if p then
69454: LD_VAR 0 11
69458: IFFALSE 69483
// result := Replace ( result , 2 , p ) ;
69460: LD_ADDR_VAR 0 2
69464: PUSH
69465: LD_VAR 0 2
69469: PPUSH
69470: LD_INT 2
69472: PPUSH
69473: LD_VAR 0 11
69477: PPUSH
69478: CALL_OW 1
69482: ST_TO_ADDR
// end ; exit ;
69483: GO 70871
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
69485: LD_EXP 63
69489: PUSH
69490: LD_EXP 62
69494: PUSH
69495: LD_VAR 0 1
69499: ARRAY
69500: ARRAY
69501: NOT
69502: PUSH
69503: LD_EXP 36
69507: PUSH
69508: LD_VAR 0 1
69512: ARRAY
69513: PPUSH
69514: LD_INT 30
69516: PUSH
69517: LD_INT 3
69519: PUSH
69520: EMPTY
69521: LIST
69522: LIST
69523: PPUSH
69524: CALL_OW 72
69528: AND
69529: PUSH
69530: LD_EXP 41
69534: PUSH
69535: LD_VAR 0 1
69539: ARRAY
69540: AND
69541: IFFALSE 70149
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
69543: LD_ADDR_EXP 78
69547: PUSH
69548: LD_EXP 78
69552: PPUSH
69553: LD_VAR 0 1
69557: PPUSH
69558: LD_INT 5
69560: PPUSH
69561: CALL_OW 1
69565: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
69566: LD_ADDR_VAR 0 2
69570: PUSH
69571: LD_INT 0
69573: PUSH
69574: LD_INT 0
69576: PUSH
69577: LD_INT 0
69579: PUSH
69580: LD_INT 0
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: LIST
69587: LIST
69588: ST_TO_ADDR
// if sci > 1 then
69589: LD_VAR 0 8
69593: PUSH
69594: LD_INT 1
69596: GREATER
69597: IFFALSE 69625
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
69599: LD_ADDR_VAR 0 4
69603: PUSH
69604: LD_VAR 0 4
69608: PUSH
69609: LD_VAR 0 8
69613: PUSH
69614: LD_VAR 0 8
69618: PUSH
69619: LD_INT 1
69621: ARRAY
69622: DIFF
69623: DIFF
69624: ST_TO_ADDR
// if tmp and not sci then
69625: LD_VAR 0 4
69629: PUSH
69630: LD_VAR 0 8
69634: NOT
69635: AND
69636: IFFALSE 69705
// begin sort := SortBySkill ( tmp , 4 ) ;
69638: LD_ADDR_VAR 0 9
69642: PUSH
69643: LD_VAR 0 4
69647: PPUSH
69648: LD_INT 4
69650: PPUSH
69651: CALL 60910 0 2
69655: ST_TO_ADDR
// if sort then
69656: LD_VAR 0 9
69660: IFFALSE 69676
// p := sort [ 1 ] ;
69662: LD_ADDR_VAR 0 11
69666: PUSH
69667: LD_VAR 0 9
69671: PUSH
69672: LD_INT 1
69674: ARRAY
69675: ST_TO_ADDR
// if p then
69676: LD_VAR 0 11
69680: IFFALSE 69705
// result := Replace ( result , 4 , p ) ;
69682: LD_ADDR_VAR 0 2
69686: PUSH
69687: LD_VAR 0 2
69691: PPUSH
69692: LD_INT 4
69694: PPUSH
69695: LD_VAR 0 11
69699: PPUSH
69700: CALL_OW 1
69704: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
69705: LD_ADDR_VAR 0 4
69709: PUSH
69710: LD_VAR 0 4
69714: PUSH
69715: LD_VAR 0 7
69719: DIFF
69720: ST_TO_ADDR
// if tmp and mech < 6 then
69721: LD_VAR 0 4
69725: PUSH
69726: LD_VAR 0 7
69730: PUSH
69731: LD_INT 6
69733: LESS
69734: AND
69735: IFFALSE 69923
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
69737: LD_ADDR_VAR 0 9
69741: PUSH
69742: LD_VAR 0 4
69746: PUSH
69747: LD_VAR 0 8
69751: PUSH
69752: LD_VAR 0 7
69756: UNION
69757: DIFF
69758: PPUSH
69759: LD_INT 3
69761: PPUSH
69762: CALL 60910 0 2
69766: ST_TO_ADDR
// p := [ ] ;
69767: LD_ADDR_VAR 0 11
69771: PUSH
69772: EMPTY
69773: ST_TO_ADDR
// if sort then
69774: LD_VAR 0 9
69778: IFFALSE 69894
// for i = 1 to 6 - mech do
69780: LD_ADDR_VAR 0 3
69784: PUSH
69785: DOUBLE
69786: LD_INT 1
69788: DEC
69789: ST_TO_ADDR
69790: LD_INT 6
69792: PUSH
69793: LD_VAR 0 7
69797: MINUS
69798: PUSH
69799: FOR_TO
69800: IFFALSE 69892
// begin if i = sort then
69802: LD_VAR 0 3
69806: PUSH
69807: LD_VAR 0 9
69811: EQUAL
69812: IFFALSE 69816
// break ;
69814: GO 69892
// if GetClass ( i ) = 3 then
69816: LD_VAR 0 3
69820: PPUSH
69821: CALL_OW 257
69825: PUSH
69826: LD_INT 3
69828: EQUAL
69829: IFFALSE 69833
// continue ;
69831: GO 69799
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69833: LD_ADDR_VAR 0 11
69837: PUSH
69838: LD_VAR 0 11
69842: PPUSH
69843: LD_VAR 0 11
69847: PUSH
69848: LD_INT 1
69850: PLUS
69851: PPUSH
69852: LD_VAR 0 9
69856: PUSH
69857: LD_VAR 0 3
69861: ARRAY
69862: PPUSH
69863: CALL_OW 2
69867: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69868: LD_ADDR_VAR 0 4
69872: PUSH
69873: LD_VAR 0 4
69877: PUSH
69878: LD_VAR 0 9
69882: PUSH
69883: LD_VAR 0 3
69887: ARRAY
69888: DIFF
69889: ST_TO_ADDR
// end ;
69890: GO 69799
69892: POP
69893: POP
// if p then
69894: LD_VAR 0 11
69898: IFFALSE 69923
// result := Replace ( result , 3 , p ) ;
69900: LD_ADDR_VAR 0 2
69904: PUSH
69905: LD_VAR 0 2
69909: PPUSH
69910: LD_INT 3
69912: PPUSH
69913: LD_VAR 0 11
69917: PPUSH
69918: CALL_OW 1
69922: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
69923: LD_ADDR_VAR 0 4
69927: PUSH
69928: LD_VAR 0 4
69932: PUSH
69933: LD_VAR 0 6
69937: DIFF
69938: ST_TO_ADDR
// if tmp and eng < 6 then
69939: LD_VAR 0 4
69943: PUSH
69944: LD_VAR 0 6
69948: PUSH
69949: LD_INT 6
69951: LESS
69952: AND
69953: IFFALSE 70147
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
69955: LD_ADDR_VAR 0 9
69959: PUSH
69960: LD_VAR 0 4
69964: PUSH
69965: LD_VAR 0 8
69969: PUSH
69970: LD_VAR 0 7
69974: UNION
69975: PUSH
69976: LD_VAR 0 6
69980: UNION
69981: DIFF
69982: PPUSH
69983: LD_INT 2
69985: PPUSH
69986: CALL 60910 0 2
69990: ST_TO_ADDR
// p := [ ] ;
69991: LD_ADDR_VAR 0 11
69995: PUSH
69996: EMPTY
69997: ST_TO_ADDR
// if sort then
69998: LD_VAR 0 9
70002: IFFALSE 70118
// for i = 1 to 6 - eng do
70004: LD_ADDR_VAR 0 3
70008: PUSH
70009: DOUBLE
70010: LD_INT 1
70012: DEC
70013: ST_TO_ADDR
70014: LD_INT 6
70016: PUSH
70017: LD_VAR 0 6
70021: MINUS
70022: PUSH
70023: FOR_TO
70024: IFFALSE 70116
// begin if i = sort then
70026: LD_VAR 0 3
70030: PUSH
70031: LD_VAR 0 9
70035: EQUAL
70036: IFFALSE 70040
// break ;
70038: GO 70116
// if GetClass ( i ) = 2 then
70040: LD_VAR 0 3
70044: PPUSH
70045: CALL_OW 257
70049: PUSH
70050: LD_INT 2
70052: EQUAL
70053: IFFALSE 70057
// continue ;
70055: GO 70023
// p := Insert ( p , p + 1 , sort [ i ] ) ;
70057: LD_ADDR_VAR 0 11
70061: PUSH
70062: LD_VAR 0 11
70066: PPUSH
70067: LD_VAR 0 11
70071: PUSH
70072: LD_INT 1
70074: PLUS
70075: PPUSH
70076: LD_VAR 0 9
70080: PUSH
70081: LD_VAR 0 3
70085: ARRAY
70086: PPUSH
70087: CALL_OW 2
70091: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
70092: LD_ADDR_VAR 0 4
70096: PUSH
70097: LD_VAR 0 4
70101: PUSH
70102: LD_VAR 0 9
70106: PUSH
70107: LD_VAR 0 3
70111: ARRAY
70112: DIFF
70113: ST_TO_ADDR
// end ;
70114: GO 70023
70116: POP
70117: POP
// if p then
70118: LD_VAR 0 11
70122: IFFALSE 70147
// result := Replace ( result , 2 , p ) ;
70124: LD_ADDR_VAR 0 2
70128: PUSH
70129: LD_VAR 0 2
70133: PPUSH
70134: LD_INT 2
70136: PPUSH
70137: LD_VAR 0 11
70141: PPUSH
70142: CALL_OW 1
70146: ST_TO_ADDR
// end ; exit ;
70147: GO 70871
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
70149: LD_EXP 63
70153: PUSH
70154: LD_EXP 62
70158: PUSH
70159: LD_VAR 0 1
70163: ARRAY
70164: ARRAY
70165: NOT
70166: PUSH
70167: LD_EXP 36
70171: PUSH
70172: LD_VAR 0 1
70176: ARRAY
70177: PPUSH
70178: LD_INT 30
70180: PUSH
70181: LD_INT 3
70183: PUSH
70184: EMPTY
70185: LIST
70186: LIST
70187: PPUSH
70188: CALL_OW 72
70192: AND
70193: PUSH
70194: LD_EXP 41
70198: PUSH
70199: LD_VAR 0 1
70203: ARRAY
70204: NOT
70205: AND
70206: IFFALSE 70871
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
70208: LD_ADDR_EXP 78
70212: PUSH
70213: LD_EXP 78
70217: PPUSH
70218: LD_VAR 0 1
70222: PPUSH
70223: LD_INT 6
70225: PPUSH
70226: CALL_OW 1
70230: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
70231: LD_ADDR_VAR 0 2
70235: PUSH
70236: LD_INT 0
70238: PUSH
70239: LD_INT 0
70241: PUSH
70242: LD_INT 0
70244: PUSH
70245: LD_INT 0
70247: PUSH
70248: EMPTY
70249: LIST
70250: LIST
70251: LIST
70252: LIST
70253: ST_TO_ADDR
// if sci >= 1 then
70254: LD_VAR 0 8
70258: PUSH
70259: LD_INT 1
70261: GREATEREQUAL
70262: IFFALSE 70284
// tmp := tmp diff sci [ 1 ] ;
70264: LD_ADDR_VAR 0 4
70268: PUSH
70269: LD_VAR 0 4
70273: PUSH
70274: LD_VAR 0 8
70278: PUSH
70279: LD_INT 1
70281: ARRAY
70282: DIFF
70283: ST_TO_ADDR
// if tmp and not sci then
70284: LD_VAR 0 4
70288: PUSH
70289: LD_VAR 0 8
70293: NOT
70294: AND
70295: IFFALSE 70364
// begin sort := SortBySkill ( tmp , 4 ) ;
70297: LD_ADDR_VAR 0 9
70301: PUSH
70302: LD_VAR 0 4
70306: PPUSH
70307: LD_INT 4
70309: PPUSH
70310: CALL 60910 0 2
70314: ST_TO_ADDR
// if sort then
70315: LD_VAR 0 9
70319: IFFALSE 70335
// p := sort [ 1 ] ;
70321: LD_ADDR_VAR 0 11
70325: PUSH
70326: LD_VAR 0 9
70330: PUSH
70331: LD_INT 1
70333: ARRAY
70334: ST_TO_ADDR
// if p then
70335: LD_VAR 0 11
70339: IFFALSE 70364
// result := Replace ( result , 4 , p ) ;
70341: LD_ADDR_VAR 0 2
70345: PUSH
70346: LD_VAR 0 2
70350: PPUSH
70351: LD_INT 4
70353: PPUSH
70354: LD_VAR 0 11
70358: PPUSH
70359: CALL_OW 1
70363: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
70364: LD_ADDR_VAR 0 4
70368: PUSH
70369: LD_VAR 0 4
70373: PUSH
70374: LD_VAR 0 7
70378: DIFF
70379: ST_TO_ADDR
// if tmp and mech < 6 then
70380: LD_VAR 0 4
70384: PUSH
70385: LD_VAR 0 7
70389: PUSH
70390: LD_INT 6
70392: LESS
70393: AND
70394: IFFALSE 70576
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
70396: LD_ADDR_VAR 0 9
70400: PUSH
70401: LD_VAR 0 4
70405: PUSH
70406: LD_VAR 0 7
70410: DIFF
70411: PPUSH
70412: LD_INT 3
70414: PPUSH
70415: CALL 60910 0 2
70419: ST_TO_ADDR
// p := [ ] ;
70420: LD_ADDR_VAR 0 11
70424: PUSH
70425: EMPTY
70426: ST_TO_ADDR
// if sort then
70427: LD_VAR 0 9
70431: IFFALSE 70547
// for i = 1 to 6 - mech do
70433: LD_ADDR_VAR 0 3
70437: PUSH
70438: DOUBLE
70439: LD_INT 1
70441: DEC
70442: ST_TO_ADDR
70443: LD_INT 6
70445: PUSH
70446: LD_VAR 0 7
70450: MINUS
70451: PUSH
70452: FOR_TO
70453: IFFALSE 70545
// begin if i = sort then
70455: LD_VAR 0 3
70459: PUSH
70460: LD_VAR 0 9
70464: EQUAL
70465: IFFALSE 70469
// break ;
70467: GO 70545
// if GetClass ( i ) = 3 then
70469: LD_VAR 0 3
70473: PPUSH
70474: CALL_OW 257
70478: PUSH
70479: LD_INT 3
70481: EQUAL
70482: IFFALSE 70486
// continue ;
70484: GO 70452
// p := Insert ( p , p + 1 , sort [ i ] ) ;
70486: LD_ADDR_VAR 0 11
70490: PUSH
70491: LD_VAR 0 11
70495: PPUSH
70496: LD_VAR 0 11
70500: PUSH
70501: LD_INT 1
70503: PLUS
70504: PPUSH
70505: LD_VAR 0 9
70509: PUSH
70510: LD_VAR 0 3
70514: ARRAY
70515: PPUSH
70516: CALL_OW 2
70520: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
70521: LD_ADDR_VAR 0 4
70525: PUSH
70526: LD_VAR 0 4
70530: PUSH
70531: LD_VAR 0 9
70535: PUSH
70536: LD_VAR 0 3
70540: ARRAY
70541: DIFF
70542: ST_TO_ADDR
// end ;
70543: GO 70452
70545: POP
70546: POP
// if p then
70547: LD_VAR 0 11
70551: IFFALSE 70576
// result := Replace ( result , 3 , p ) ;
70553: LD_ADDR_VAR 0 2
70557: PUSH
70558: LD_VAR 0 2
70562: PPUSH
70563: LD_INT 3
70565: PPUSH
70566: LD_VAR 0 11
70570: PPUSH
70571: CALL_OW 1
70575: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
70576: LD_ADDR_VAR 0 4
70580: PUSH
70581: LD_VAR 0 4
70585: PUSH
70586: LD_VAR 0 6
70590: DIFF
70591: ST_TO_ADDR
// if tmp and eng < 4 then
70592: LD_VAR 0 4
70596: PUSH
70597: LD_VAR 0 6
70601: PUSH
70602: LD_INT 4
70604: LESS
70605: AND
70606: IFFALSE 70796
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
70608: LD_ADDR_VAR 0 9
70612: PUSH
70613: LD_VAR 0 4
70617: PUSH
70618: LD_VAR 0 7
70622: PUSH
70623: LD_VAR 0 6
70627: UNION
70628: DIFF
70629: PPUSH
70630: LD_INT 2
70632: PPUSH
70633: CALL 60910 0 2
70637: ST_TO_ADDR
// p := [ ] ;
70638: LD_ADDR_VAR 0 11
70642: PUSH
70643: EMPTY
70644: ST_TO_ADDR
// if sort then
70645: LD_VAR 0 9
70649: IFFALSE 70765
// for i = 1 to 4 - eng do
70651: LD_ADDR_VAR 0 3
70655: PUSH
70656: DOUBLE
70657: LD_INT 1
70659: DEC
70660: ST_TO_ADDR
70661: LD_INT 4
70663: PUSH
70664: LD_VAR 0 6
70668: MINUS
70669: PUSH
70670: FOR_TO
70671: IFFALSE 70763
// begin if i = sort then
70673: LD_VAR 0 3
70677: PUSH
70678: LD_VAR 0 9
70682: EQUAL
70683: IFFALSE 70687
// break ;
70685: GO 70763
// if GetClass ( i ) = 2 then
70687: LD_VAR 0 3
70691: PPUSH
70692: CALL_OW 257
70696: PUSH
70697: LD_INT 2
70699: EQUAL
70700: IFFALSE 70704
// continue ;
70702: GO 70670
// p := Insert ( p , p + 1 , sort [ i ] ) ;
70704: LD_ADDR_VAR 0 11
70708: PUSH
70709: LD_VAR 0 11
70713: PPUSH
70714: LD_VAR 0 11
70718: PUSH
70719: LD_INT 1
70721: PLUS
70722: PPUSH
70723: LD_VAR 0 9
70727: PUSH
70728: LD_VAR 0 3
70732: ARRAY
70733: PPUSH
70734: CALL_OW 2
70738: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
70739: LD_ADDR_VAR 0 4
70743: PUSH
70744: LD_VAR 0 4
70748: PUSH
70749: LD_VAR 0 9
70753: PUSH
70754: LD_VAR 0 3
70758: ARRAY
70759: DIFF
70760: ST_TO_ADDR
// end ;
70761: GO 70670
70763: POP
70764: POP
// if p then
70765: LD_VAR 0 11
70769: IFFALSE 70794
// result := Replace ( result , 2 , p ) ;
70771: LD_ADDR_VAR 0 2
70775: PUSH
70776: LD_VAR 0 2
70780: PPUSH
70781: LD_INT 2
70783: PPUSH
70784: LD_VAR 0 11
70788: PPUSH
70789: CALL_OW 1
70793: ST_TO_ADDR
// end else
70794: GO 70840
// for i = eng downto 5 do
70796: LD_ADDR_VAR 0 3
70800: PUSH
70801: DOUBLE
70802: LD_VAR 0 6
70806: INC
70807: ST_TO_ADDR
70808: LD_INT 5
70810: PUSH
70811: FOR_DOWNTO
70812: IFFALSE 70838
// tmp := tmp union eng [ i ] ;
70814: LD_ADDR_VAR 0 4
70818: PUSH
70819: LD_VAR 0 4
70823: PUSH
70824: LD_VAR 0 6
70828: PUSH
70829: LD_VAR 0 3
70833: ARRAY
70834: UNION
70835: ST_TO_ADDR
70836: GO 70811
70838: POP
70839: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
70840: LD_ADDR_VAR 0 2
70844: PUSH
70845: LD_VAR 0 2
70849: PPUSH
70850: LD_INT 1
70852: PPUSH
70853: LD_VAR 0 4
70857: PUSH
70858: LD_VAR 0 5
70862: DIFF
70863: PPUSH
70864: CALL_OW 1
70868: ST_TO_ADDR
// exit ;
70869: GO 70871
// end ; end ;
70871: LD_VAR 0 2
70875: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
70876: LD_INT 0
70878: PPUSH
70879: PPUSH
70880: PPUSH
// if not mc_bases then
70881: LD_EXP 36
70885: NOT
70886: IFFALSE 70890
// exit ;
70888: GO 70996
// for i = 1 to mc_bases do
70890: LD_ADDR_VAR 0 2
70894: PUSH
70895: DOUBLE
70896: LD_INT 1
70898: DEC
70899: ST_TO_ADDR
70900: LD_EXP 36
70904: PUSH
70905: FOR_TO
70906: IFFALSE 70987
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
70908: LD_ADDR_VAR 0 3
70912: PUSH
70913: LD_EXP 36
70917: PUSH
70918: LD_VAR 0 2
70922: ARRAY
70923: PPUSH
70924: LD_INT 21
70926: PUSH
70927: LD_INT 3
70929: PUSH
70930: EMPTY
70931: LIST
70932: LIST
70933: PUSH
70934: LD_INT 3
70936: PUSH
70937: LD_INT 24
70939: PUSH
70940: LD_INT 1000
70942: PUSH
70943: EMPTY
70944: LIST
70945: LIST
70946: PUSH
70947: EMPTY
70948: LIST
70949: LIST
70950: PUSH
70951: EMPTY
70952: LIST
70953: LIST
70954: PPUSH
70955: CALL_OW 72
70959: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
70960: LD_ADDR_EXP 37
70964: PUSH
70965: LD_EXP 37
70969: PPUSH
70970: LD_VAR 0 2
70974: PPUSH
70975: LD_VAR 0 3
70979: PPUSH
70980: CALL_OW 1
70984: ST_TO_ADDR
// end ;
70985: GO 70905
70987: POP
70988: POP
// RaiseSailEvent ( 101 ) ;
70989: LD_INT 101
70991: PPUSH
70992: CALL_OW 427
// end ;
70996: LD_VAR 0 1
71000: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
71001: LD_INT 0
71003: PPUSH
71004: PPUSH
71005: PPUSH
71006: PPUSH
71007: PPUSH
71008: PPUSH
71009: PPUSH
// if not mc_bases then
71010: LD_EXP 36
71014: NOT
71015: IFFALSE 71019
// exit ;
71017: GO 71592
// for i = 1 to mc_bases do
71019: LD_ADDR_VAR 0 2
71023: PUSH
71024: DOUBLE
71025: LD_INT 1
71027: DEC
71028: ST_TO_ADDR
71029: LD_EXP 36
71033: PUSH
71034: FOR_TO
71035: IFFALSE 71583
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
71037: LD_ADDR_VAR 0 5
71041: PUSH
71042: LD_EXP 36
71046: PUSH
71047: LD_VAR 0 2
71051: ARRAY
71052: PUSH
71053: LD_EXP 65
71057: PUSH
71058: LD_VAR 0 2
71062: ARRAY
71063: UNION
71064: PPUSH
71065: LD_INT 21
71067: PUSH
71068: LD_INT 1
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: PUSH
71075: LD_INT 1
71077: PUSH
71078: LD_INT 3
71080: PUSH
71081: LD_INT 54
71083: PUSH
71084: EMPTY
71085: LIST
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: PUSH
71091: LD_INT 3
71093: PUSH
71094: LD_INT 24
71096: PUSH
71097: LD_INT 800
71099: PUSH
71100: EMPTY
71101: LIST
71102: LIST
71103: PUSH
71104: EMPTY
71105: LIST
71106: LIST
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: LIST
71112: PUSH
71113: EMPTY
71114: LIST
71115: LIST
71116: PPUSH
71117: CALL_OW 72
71121: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
71122: LD_ADDR_VAR 0 6
71126: PUSH
71127: LD_EXP 36
71131: PUSH
71132: LD_VAR 0 2
71136: ARRAY
71137: PPUSH
71138: LD_INT 21
71140: PUSH
71141: LD_INT 1
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: PUSH
71148: LD_INT 1
71150: PUSH
71151: LD_INT 3
71153: PUSH
71154: LD_INT 54
71156: PUSH
71157: EMPTY
71158: LIST
71159: PUSH
71160: EMPTY
71161: LIST
71162: LIST
71163: PUSH
71164: LD_INT 3
71166: PUSH
71167: LD_INT 24
71169: PUSH
71170: LD_INT 250
71172: PUSH
71173: EMPTY
71174: LIST
71175: LIST
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: PUSH
71181: EMPTY
71182: LIST
71183: LIST
71184: LIST
71185: PUSH
71186: EMPTY
71187: LIST
71188: LIST
71189: PPUSH
71190: CALL_OW 72
71194: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
71195: LD_ADDR_VAR 0 7
71199: PUSH
71200: LD_VAR 0 5
71204: PUSH
71205: LD_VAR 0 6
71209: DIFF
71210: ST_TO_ADDR
// if not need_heal_1 then
71211: LD_VAR 0 6
71215: NOT
71216: IFFALSE 71249
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
71218: LD_ADDR_EXP 39
71222: PUSH
71223: LD_EXP 39
71227: PPUSH
71228: LD_VAR 0 2
71232: PUSH
71233: LD_INT 1
71235: PUSH
71236: EMPTY
71237: LIST
71238: LIST
71239: PPUSH
71240: EMPTY
71241: PPUSH
71242: CALL 26652 0 3
71246: ST_TO_ADDR
71247: GO 71319
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
71249: LD_ADDR_EXP 39
71253: PUSH
71254: LD_EXP 39
71258: PPUSH
71259: LD_VAR 0 2
71263: PUSH
71264: LD_INT 1
71266: PUSH
71267: EMPTY
71268: LIST
71269: LIST
71270: PPUSH
71271: LD_EXP 39
71275: PUSH
71276: LD_VAR 0 2
71280: ARRAY
71281: PUSH
71282: LD_INT 1
71284: ARRAY
71285: PPUSH
71286: LD_INT 3
71288: PUSH
71289: LD_INT 24
71291: PUSH
71292: LD_INT 1000
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: PUSH
71299: EMPTY
71300: LIST
71301: LIST
71302: PPUSH
71303: CALL_OW 72
71307: PUSH
71308: LD_VAR 0 6
71312: UNION
71313: PPUSH
71314: CALL 26652 0 3
71318: ST_TO_ADDR
// if not need_heal_2 then
71319: LD_VAR 0 7
71323: NOT
71324: IFFALSE 71357
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
71326: LD_ADDR_EXP 39
71330: PUSH
71331: LD_EXP 39
71335: PPUSH
71336: LD_VAR 0 2
71340: PUSH
71341: LD_INT 2
71343: PUSH
71344: EMPTY
71345: LIST
71346: LIST
71347: PPUSH
71348: EMPTY
71349: PPUSH
71350: CALL 26652 0 3
71354: ST_TO_ADDR
71355: GO 71389
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
71357: LD_ADDR_EXP 39
71361: PUSH
71362: LD_EXP 39
71366: PPUSH
71367: LD_VAR 0 2
71371: PUSH
71372: LD_INT 2
71374: PUSH
71375: EMPTY
71376: LIST
71377: LIST
71378: PPUSH
71379: LD_VAR 0 7
71383: PPUSH
71384: CALL 26652 0 3
71388: ST_TO_ADDR
// if need_heal_2 then
71389: LD_VAR 0 7
71393: IFFALSE 71565
// for j in need_heal_2 do
71395: LD_ADDR_VAR 0 3
71399: PUSH
71400: LD_VAR 0 7
71404: PUSH
71405: FOR_IN
71406: IFFALSE 71563
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
71408: LD_ADDR_VAR 0 5
71412: PUSH
71413: LD_EXP 36
71417: PUSH
71418: LD_VAR 0 2
71422: ARRAY
71423: PPUSH
71424: LD_INT 2
71426: PUSH
71427: LD_INT 30
71429: PUSH
71430: LD_INT 6
71432: PUSH
71433: EMPTY
71434: LIST
71435: LIST
71436: PUSH
71437: LD_INT 30
71439: PUSH
71440: LD_INT 7
71442: PUSH
71443: EMPTY
71444: LIST
71445: LIST
71446: PUSH
71447: LD_INT 30
71449: PUSH
71450: LD_INT 8
71452: PUSH
71453: EMPTY
71454: LIST
71455: LIST
71456: PUSH
71457: LD_INT 30
71459: PUSH
71460: LD_INT 0
71462: PUSH
71463: EMPTY
71464: LIST
71465: LIST
71466: PUSH
71467: LD_INT 30
71469: PUSH
71470: LD_INT 1
71472: PUSH
71473: EMPTY
71474: LIST
71475: LIST
71476: PUSH
71477: LD_INT 25
71479: PUSH
71480: LD_INT 4
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: PUSH
71487: EMPTY
71488: LIST
71489: LIST
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: PPUSH
71496: CALL_OW 72
71500: ST_TO_ADDR
// if tmp then
71501: LD_VAR 0 5
71505: IFFALSE 71561
// begin k := NearestUnitToUnit ( tmp , j ) ;
71507: LD_ADDR_VAR 0 4
71511: PUSH
71512: LD_VAR 0 5
71516: PPUSH
71517: LD_VAR 0 3
71521: PPUSH
71522: CALL_OW 74
71526: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
71527: LD_VAR 0 3
71531: PPUSH
71532: LD_VAR 0 4
71536: PPUSH
71537: CALL_OW 296
71541: PUSH
71542: LD_INT 7
71544: GREATER
71545: IFFALSE 71561
// ComMoveUnit ( j , k ) ;
71547: LD_VAR 0 3
71551: PPUSH
71552: LD_VAR 0 4
71556: PPUSH
71557: CALL_OW 112
// end ; end ;
71561: GO 71405
71563: POP
71564: POP
// if not need_heal_1 and not need_heal_2 then
71565: LD_VAR 0 6
71569: NOT
71570: PUSH
71571: LD_VAR 0 7
71575: NOT
71576: AND
71577: IFFALSE 71581
// continue ;
71579: GO 71034
// end ;
71581: GO 71034
71583: POP
71584: POP
// RaiseSailEvent ( 102 ) ;
71585: LD_INT 102
71587: PPUSH
71588: CALL_OW 427
// end ;
71592: LD_VAR 0 1
71596: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
71597: LD_INT 0
71599: PPUSH
71600: PPUSH
71601: PPUSH
71602: PPUSH
71603: PPUSH
71604: PPUSH
71605: PPUSH
71606: PPUSH
// if not mc_bases then
71607: LD_EXP 36
71611: NOT
71612: IFFALSE 71616
// exit ;
71614: GO 72456
// for i = 1 to mc_bases do
71616: LD_ADDR_VAR 0 2
71620: PUSH
71621: DOUBLE
71622: LD_INT 1
71624: DEC
71625: ST_TO_ADDR
71626: LD_EXP 36
71630: PUSH
71631: FOR_TO
71632: IFFALSE 72454
// begin if not mc_building_need_repair [ i ] then
71634: LD_EXP 37
71638: PUSH
71639: LD_VAR 0 2
71643: ARRAY
71644: NOT
71645: IFFALSE 71819
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
71647: LD_ADDR_VAR 0 6
71651: PUSH
71652: LD_EXP 55
71656: PUSH
71657: LD_VAR 0 2
71661: ARRAY
71662: PPUSH
71663: LD_INT 3
71665: PUSH
71666: LD_INT 24
71668: PUSH
71669: LD_INT 1000
71671: PUSH
71672: EMPTY
71673: LIST
71674: LIST
71675: PUSH
71676: EMPTY
71677: LIST
71678: LIST
71679: PUSH
71680: LD_INT 2
71682: PUSH
71683: LD_INT 34
71685: PUSH
71686: LD_INT 13
71688: PUSH
71689: EMPTY
71690: LIST
71691: LIST
71692: PUSH
71693: LD_INT 34
71695: PUSH
71696: LD_INT 52
71698: PUSH
71699: EMPTY
71700: LIST
71701: LIST
71702: PUSH
71703: EMPTY
71704: LIST
71705: LIST
71706: LIST
71707: PUSH
71708: EMPTY
71709: LIST
71710: LIST
71711: PPUSH
71712: CALL_OW 72
71716: ST_TO_ADDR
// if cranes then
71717: LD_VAR 0 6
71721: IFFALSE 71783
// for j in cranes do
71723: LD_ADDR_VAR 0 3
71727: PUSH
71728: LD_VAR 0 6
71732: PUSH
71733: FOR_IN
71734: IFFALSE 71781
// if not IsInArea ( j , mc_parking [ i ] ) then
71736: LD_VAR 0 3
71740: PPUSH
71741: LD_EXP 60
71745: PUSH
71746: LD_VAR 0 2
71750: ARRAY
71751: PPUSH
71752: CALL_OW 308
71756: NOT
71757: IFFALSE 71779
// ComMoveToArea ( j , mc_parking [ i ] ) ;
71759: LD_VAR 0 3
71763: PPUSH
71764: LD_EXP 60
71768: PUSH
71769: LD_VAR 0 2
71773: ARRAY
71774: PPUSH
71775: CALL_OW 113
71779: GO 71733
71781: POP
71782: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
71783: LD_ADDR_EXP 38
71787: PUSH
71788: LD_EXP 38
71792: PPUSH
71793: LD_VAR 0 2
71797: PPUSH
71798: EMPTY
71799: PPUSH
71800: CALL_OW 1
71804: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
71805: LD_VAR 0 2
71809: PPUSH
71810: LD_INT 101
71812: PPUSH
71813: CALL 66709 0 2
// continue ;
71817: GO 71631
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
71819: LD_ADDR_EXP 42
71823: PUSH
71824: LD_EXP 42
71828: PPUSH
71829: LD_VAR 0 2
71833: PPUSH
71834: EMPTY
71835: PPUSH
71836: CALL_OW 1
71840: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
71841: LD_VAR 0 2
71845: PPUSH
71846: LD_INT 103
71848: PPUSH
71849: CALL 66709 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
71853: LD_ADDR_VAR 0 5
71857: PUSH
71858: LD_EXP 36
71862: PUSH
71863: LD_VAR 0 2
71867: ARRAY
71868: PUSH
71869: LD_EXP 65
71873: PUSH
71874: LD_VAR 0 2
71878: ARRAY
71879: UNION
71880: PPUSH
71881: LD_INT 2
71883: PUSH
71884: LD_INT 25
71886: PUSH
71887: LD_INT 2
71889: PUSH
71890: EMPTY
71891: LIST
71892: LIST
71893: PUSH
71894: LD_INT 25
71896: PUSH
71897: LD_INT 16
71899: PUSH
71900: EMPTY
71901: LIST
71902: LIST
71903: PUSH
71904: EMPTY
71905: LIST
71906: LIST
71907: LIST
71908: PUSH
71909: EMPTY
71910: LIST
71911: PPUSH
71912: CALL_OW 72
71916: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
71917: LD_ADDR_VAR 0 6
71921: PUSH
71922: LD_EXP 55
71926: PUSH
71927: LD_VAR 0 2
71931: ARRAY
71932: PPUSH
71933: LD_INT 2
71935: PUSH
71936: LD_INT 34
71938: PUSH
71939: LD_INT 13
71941: PUSH
71942: EMPTY
71943: LIST
71944: LIST
71945: PUSH
71946: LD_INT 34
71948: PUSH
71949: LD_INT 52
71951: PUSH
71952: EMPTY
71953: LIST
71954: LIST
71955: PUSH
71956: EMPTY
71957: LIST
71958: LIST
71959: LIST
71960: PPUSH
71961: CALL_OW 72
71965: ST_TO_ADDR
// if cranes then
71966: LD_VAR 0 6
71970: IFFALSE 72106
// begin for j in cranes do
71972: LD_ADDR_VAR 0 3
71976: PUSH
71977: LD_VAR 0 6
71981: PUSH
71982: FOR_IN
71983: IFFALSE 72104
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
71985: LD_VAR 0 3
71989: PPUSH
71990: CALL_OW 256
71994: PUSH
71995: LD_INT 500
71997: GREATEREQUAL
71998: PUSH
71999: LD_VAR 0 3
72003: PPUSH
72004: CALL_OW 314
72008: NOT
72009: AND
72010: IFFALSE 72044
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
72012: LD_VAR 0 3
72016: PPUSH
72017: LD_EXP 37
72021: PUSH
72022: LD_VAR 0 2
72026: ARRAY
72027: PPUSH
72028: LD_VAR 0 3
72032: PPUSH
72033: CALL_OW 74
72037: PPUSH
72038: CALL_OW 130
72042: GO 72102
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
72044: LD_VAR 0 3
72048: PPUSH
72049: CALL_OW 256
72053: PUSH
72054: LD_INT 500
72056: LESS
72057: PUSH
72058: LD_VAR 0 3
72062: PPUSH
72063: LD_EXP 60
72067: PUSH
72068: LD_VAR 0 2
72072: ARRAY
72073: PPUSH
72074: CALL_OW 308
72078: NOT
72079: AND
72080: IFFALSE 72102
// ComMoveToArea ( j , mc_parking [ i ] ) ;
72082: LD_VAR 0 3
72086: PPUSH
72087: LD_EXP 60
72091: PUSH
72092: LD_VAR 0 2
72096: ARRAY
72097: PPUSH
72098: CALL_OW 113
72102: GO 71982
72104: POP
72105: POP
// end ; if not tmp then
72106: LD_VAR 0 5
72110: NOT
72111: IFFALSE 72115
// continue ;
72113: GO 71631
// for j in tmp do
72115: LD_ADDR_VAR 0 3
72119: PUSH
72120: LD_VAR 0 5
72124: PUSH
72125: FOR_IN
72126: IFFALSE 72450
// begin if mc_need_heal [ i ] then
72128: LD_EXP 39
72132: PUSH
72133: LD_VAR 0 2
72137: ARRAY
72138: IFFALSE 72186
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
72140: LD_VAR 0 3
72144: PUSH
72145: LD_EXP 39
72149: PUSH
72150: LD_VAR 0 2
72154: ARRAY
72155: PUSH
72156: LD_INT 1
72158: ARRAY
72159: IN
72160: PUSH
72161: LD_VAR 0 3
72165: PUSH
72166: LD_EXP 39
72170: PUSH
72171: LD_VAR 0 2
72175: ARRAY
72176: PUSH
72177: LD_INT 2
72179: ARRAY
72180: IN
72181: OR
72182: IFFALSE 72186
// continue ;
72184: GO 72125
// if IsInUnit ( j ) then
72186: LD_VAR 0 3
72190: PPUSH
72191: CALL_OW 310
72195: IFFALSE 72206
// ComExitBuilding ( j ) ;
72197: LD_VAR 0 3
72201: PPUSH
72202: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
72206: LD_VAR 0 3
72210: PUSH
72211: LD_EXP 38
72215: PUSH
72216: LD_VAR 0 2
72220: ARRAY
72221: IN
72222: NOT
72223: IFFALSE 72281
// begin SetTag ( j , 101 ) ;
72225: LD_VAR 0 3
72229: PPUSH
72230: LD_INT 101
72232: PPUSH
72233: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
72237: LD_ADDR_EXP 38
72241: PUSH
72242: LD_EXP 38
72246: PPUSH
72247: LD_VAR 0 2
72251: PUSH
72252: LD_EXP 38
72256: PUSH
72257: LD_VAR 0 2
72261: ARRAY
72262: PUSH
72263: LD_INT 1
72265: PLUS
72266: PUSH
72267: EMPTY
72268: LIST
72269: LIST
72270: PPUSH
72271: LD_VAR 0 3
72275: PPUSH
72276: CALL 26652 0 3
72280: ST_TO_ADDR
// end ; wait ( 1 ) ;
72281: LD_INT 1
72283: PPUSH
72284: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
72288: LD_ADDR_VAR 0 7
72292: PUSH
72293: LD_EXP 37
72297: PUSH
72298: LD_VAR 0 2
72302: ARRAY
72303: ST_TO_ADDR
// if mc_scan [ i ] then
72304: LD_EXP 59
72308: PUSH
72309: LD_VAR 0 2
72313: ARRAY
72314: IFFALSE 72383
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ] ) ;
72316: LD_ADDR_VAR 0 7
72320: PUSH
72321: LD_EXP 37
72325: PUSH
72326: LD_VAR 0 2
72330: ARRAY
72331: PPUSH
72332: LD_INT 3
72334: PUSH
72335: LD_INT 2
72337: PUSH
72338: LD_INT 30
72340: PUSH
72341: LD_INT 32
72343: PUSH
72344: EMPTY
72345: LIST
72346: LIST
72347: PUSH
72348: LD_INT 30
72350: PUSH
72351: LD_INT 33
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: PUSH
72358: LD_INT 30
72360: PUSH
72361: LD_INT 31
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: PUSH
72368: EMPTY
72369: LIST
72370: LIST
72371: LIST
72372: LIST
72373: PUSH
72374: EMPTY
72375: LIST
72376: LIST
72377: PPUSH
72378: CALL_OW 72
72382: ST_TO_ADDR
// if not to_repair_tmp then
72383: LD_VAR 0 7
72387: NOT
72388: IFFALSE 72392
// continue ;
72390: GO 72125
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
72392: LD_ADDR_VAR 0 8
72396: PUSH
72397: LD_VAR 0 7
72401: PPUSH
72402: LD_VAR 0 3
72406: PPUSH
72407: CALL_OW 74
72411: ST_TO_ADDR
// if DangerAtRange ( to_repair , 14 ) [ 4 ] < 5 then
72412: LD_VAR 0 8
72416: PPUSH
72417: LD_INT 14
72419: PPUSH
72420: CALL 29245 0 2
72424: PUSH
72425: LD_INT 4
72427: ARRAY
72428: PUSH
72429: LD_INT 5
72431: LESS
72432: IFFALSE 72448
// ComRepairBuilding ( j , to_repair ) ;
72434: LD_VAR 0 3
72438: PPUSH
72439: LD_VAR 0 8
72443: PPUSH
72444: CALL_OW 130
// end ;
72448: GO 72125
72450: POP
72451: POP
// end ;
72452: GO 71631
72454: POP
72455: POP
// end ;
72456: LD_VAR 0 1
72460: RET
// export function MC_Heal ; var i , j , tmp ; begin
72461: LD_INT 0
72463: PPUSH
72464: PPUSH
72465: PPUSH
72466: PPUSH
// if not mc_bases then
72467: LD_EXP 36
72471: NOT
72472: IFFALSE 72476
// exit ;
72474: GO 72878
// for i = 1 to mc_bases do
72476: LD_ADDR_VAR 0 2
72480: PUSH
72481: DOUBLE
72482: LD_INT 1
72484: DEC
72485: ST_TO_ADDR
72486: LD_EXP 36
72490: PUSH
72491: FOR_TO
72492: IFFALSE 72876
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
72494: LD_EXP 39
72498: PUSH
72499: LD_VAR 0 2
72503: ARRAY
72504: PUSH
72505: LD_INT 1
72507: ARRAY
72508: NOT
72509: PUSH
72510: LD_EXP 39
72514: PUSH
72515: LD_VAR 0 2
72519: ARRAY
72520: PUSH
72521: LD_INT 2
72523: ARRAY
72524: NOT
72525: AND
72526: IFFALSE 72564
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
72528: LD_ADDR_EXP 40
72532: PUSH
72533: LD_EXP 40
72537: PPUSH
72538: LD_VAR 0 2
72542: PPUSH
72543: EMPTY
72544: PPUSH
72545: CALL_OW 1
72549: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
72550: LD_VAR 0 2
72554: PPUSH
72555: LD_INT 102
72557: PPUSH
72558: CALL 66709 0 2
// continue ;
72562: GO 72491
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
72564: LD_ADDR_VAR 0 4
72568: PUSH
72569: LD_EXP 36
72573: PUSH
72574: LD_VAR 0 2
72578: ARRAY
72579: PPUSH
72580: LD_INT 25
72582: PUSH
72583: LD_INT 4
72585: PUSH
72586: EMPTY
72587: LIST
72588: LIST
72589: PPUSH
72590: CALL_OW 72
72594: ST_TO_ADDR
// if not tmp then
72595: LD_VAR 0 4
72599: NOT
72600: IFFALSE 72604
// continue ;
72602: GO 72491
// if mc_taming [ i ] then
72604: LD_EXP 67
72608: PUSH
72609: LD_VAR 0 2
72613: ARRAY
72614: IFFALSE 72638
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
72616: LD_ADDR_EXP 67
72620: PUSH
72621: LD_EXP 67
72625: PPUSH
72626: LD_VAR 0 2
72630: PPUSH
72631: EMPTY
72632: PPUSH
72633: CALL_OW 1
72637: ST_TO_ADDR
// for j in tmp do
72638: LD_ADDR_VAR 0 3
72642: PUSH
72643: LD_VAR 0 4
72647: PUSH
72648: FOR_IN
72649: IFFALSE 72872
// begin if IsInUnit ( j ) then
72651: LD_VAR 0 3
72655: PPUSH
72656: CALL_OW 310
72660: IFFALSE 72671
// ComExitBuilding ( j ) ;
72662: LD_VAR 0 3
72666: PPUSH
72667: CALL_OW 122
// if not j in mc_healers [ i ] then
72671: LD_VAR 0 3
72675: PUSH
72676: LD_EXP 40
72680: PUSH
72681: LD_VAR 0 2
72685: ARRAY
72686: IN
72687: NOT
72688: IFFALSE 72734
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
72690: LD_ADDR_EXP 40
72694: PUSH
72695: LD_EXP 40
72699: PPUSH
72700: LD_VAR 0 2
72704: PUSH
72705: LD_EXP 40
72709: PUSH
72710: LD_VAR 0 2
72714: ARRAY
72715: PUSH
72716: LD_INT 1
72718: PLUS
72719: PUSH
72720: EMPTY
72721: LIST
72722: LIST
72723: PPUSH
72724: LD_VAR 0 3
72728: PPUSH
72729: CALL 26652 0 3
72733: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
72734: LD_VAR 0 3
72738: PPUSH
72739: CALL_OW 110
72743: PUSH
72744: LD_INT 102
72746: NONEQUAL
72747: IFFALSE 72761
// SetTag ( j , 102 ) ;
72749: LD_VAR 0 3
72753: PPUSH
72754: LD_INT 102
72756: PPUSH
72757: CALL_OW 109
// Wait ( 3 ) ;
72761: LD_INT 3
72763: PPUSH
72764: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
72768: LD_EXP 39
72772: PUSH
72773: LD_VAR 0 2
72777: ARRAY
72778: PUSH
72779: LD_INT 1
72781: ARRAY
72782: IFFALSE 72814
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
72784: LD_VAR 0 3
72788: PPUSH
72789: LD_EXP 39
72793: PUSH
72794: LD_VAR 0 2
72798: ARRAY
72799: PUSH
72800: LD_INT 1
72802: ARRAY
72803: PUSH
72804: LD_INT 1
72806: ARRAY
72807: PPUSH
72808: CALL_OW 128
72812: GO 72870
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
72814: LD_VAR 0 3
72818: PPUSH
72819: CALL_OW 314
72823: NOT
72824: PUSH
72825: LD_EXP 39
72829: PUSH
72830: LD_VAR 0 2
72834: ARRAY
72835: PUSH
72836: LD_INT 2
72838: ARRAY
72839: AND
72840: IFFALSE 72870
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
72842: LD_VAR 0 3
72846: PPUSH
72847: LD_EXP 39
72851: PUSH
72852: LD_VAR 0 2
72856: ARRAY
72857: PUSH
72858: LD_INT 2
72860: ARRAY
72861: PUSH
72862: LD_INT 1
72864: ARRAY
72865: PPUSH
72866: CALL_OW 128
// end ;
72870: GO 72648
72872: POP
72873: POP
// end ;
72874: GO 72491
72876: POP
72877: POP
// end ;
72878: LD_VAR 0 1
72882: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
72883: LD_INT 0
72885: PPUSH
72886: PPUSH
72887: PPUSH
72888: PPUSH
72889: PPUSH
// if not mc_bases then
72890: LD_EXP 36
72894: NOT
72895: IFFALSE 72899
// exit ;
72897: GO 74042
// for i = 1 to mc_bases do
72899: LD_ADDR_VAR 0 2
72903: PUSH
72904: DOUBLE
72905: LD_INT 1
72907: DEC
72908: ST_TO_ADDR
72909: LD_EXP 36
72913: PUSH
72914: FOR_TO
72915: IFFALSE 74040
// begin if mc_scan [ i ] then
72917: LD_EXP 59
72921: PUSH
72922: LD_VAR 0 2
72926: ARRAY
72927: IFFALSE 72931
// continue ;
72929: GO 72914
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
72931: LD_EXP 41
72935: PUSH
72936: LD_VAR 0 2
72940: ARRAY
72941: NOT
72942: PUSH
72943: LD_EXP 43
72947: PUSH
72948: LD_VAR 0 2
72952: ARRAY
72953: NOT
72954: AND
72955: PUSH
72956: LD_EXP 42
72960: PUSH
72961: LD_VAR 0 2
72965: ARRAY
72966: AND
72967: IFFALSE 73005
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
72969: LD_ADDR_EXP 42
72973: PUSH
72974: LD_EXP 42
72978: PPUSH
72979: LD_VAR 0 2
72983: PPUSH
72984: EMPTY
72985: PPUSH
72986: CALL_OW 1
72990: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
72991: LD_VAR 0 2
72995: PPUSH
72996: LD_INT 103
72998: PPUSH
72999: CALL 66709 0 2
// continue ;
73003: GO 72914
// end ; if mc_construct_list [ i ] then
73005: LD_EXP 43
73009: PUSH
73010: LD_VAR 0 2
73014: ARRAY
73015: IFFALSE 73235
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
73017: LD_ADDR_VAR 0 4
73021: PUSH
73022: LD_EXP 36
73026: PUSH
73027: LD_VAR 0 2
73031: ARRAY
73032: PPUSH
73033: LD_INT 25
73035: PUSH
73036: LD_INT 2
73038: PUSH
73039: EMPTY
73040: LIST
73041: LIST
73042: PPUSH
73043: CALL_OW 72
73047: PUSH
73048: LD_EXP 38
73052: PUSH
73053: LD_VAR 0 2
73057: ARRAY
73058: DIFF
73059: ST_TO_ADDR
// if not tmp then
73060: LD_VAR 0 4
73064: NOT
73065: IFFALSE 73069
// continue ;
73067: GO 72914
// for j in tmp do
73069: LD_ADDR_VAR 0 3
73073: PUSH
73074: LD_VAR 0 4
73078: PUSH
73079: FOR_IN
73080: IFFALSE 73231
// begin if not mc_builders [ i ] then
73082: LD_EXP 42
73086: PUSH
73087: LD_VAR 0 2
73091: ARRAY
73092: NOT
73093: IFFALSE 73151
// begin SetTag ( j , 103 ) ;
73095: LD_VAR 0 3
73099: PPUSH
73100: LD_INT 103
73102: PPUSH
73103: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
73107: LD_ADDR_EXP 42
73111: PUSH
73112: LD_EXP 42
73116: PPUSH
73117: LD_VAR 0 2
73121: PUSH
73122: LD_EXP 42
73126: PUSH
73127: LD_VAR 0 2
73131: ARRAY
73132: PUSH
73133: LD_INT 1
73135: PLUS
73136: PUSH
73137: EMPTY
73138: LIST
73139: LIST
73140: PPUSH
73141: LD_VAR 0 3
73145: PPUSH
73146: CALL 26652 0 3
73150: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
73151: LD_VAR 0 3
73155: PPUSH
73156: CALL_OW 310
73160: IFFALSE 73171
// ComExitBuilding ( j ) ;
73162: LD_VAR 0 3
73166: PPUSH
73167: CALL_OW 122
// wait ( 3 ) ;
73171: LD_INT 3
73173: PPUSH
73174: CALL_OW 67
// if not mc_construct_list [ i ] then
73178: LD_EXP 43
73182: PUSH
73183: LD_VAR 0 2
73187: ARRAY
73188: NOT
73189: IFFALSE 73193
// break ;
73191: GO 73231
// if not HasTask ( j ) then
73193: LD_VAR 0 3
73197: PPUSH
73198: CALL_OW 314
73202: NOT
73203: IFFALSE 73229
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
73205: LD_VAR 0 3
73209: PPUSH
73210: LD_EXP 43
73214: PUSH
73215: LD_VAR 0 2
73219: ARRAY
73220: PUSH
73221: LD_INT 1
73223: ARRAY
73224: PPUSH
73225: CALL 29503 0 2
// end ;
73229: GO 73079
73231: POP
73232: POP
// end else
73233: GO 74038
// if mc_build_list [ i ] then
73235: LD_EXP 41
73239: PUSH
73240: LD_VAR 0 2
73244: ARRAY
73245: IFFALSE 74038
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
73247: LD_ADDR_VAR 0 5
73251: PUSH
73252: LD_EXP 36
73256: PUSH
73257: LD_VAR 0 2
73261: ARRAY
73262: PPUSH
73263: LD_INT 2
73265: PUSH
73266: LD_INT 30
73268: PUSH
73269: LD_INT 0
73271: PUSH
73272: EMPTY
73273: LIST
73274: LIST
73275: PUSH
73276: LD_INT 30
73278: PUSH
73279: LD_INT 1
73281: PUSH
73282: EMPTY
73283: LIST
73284: LIST
73285: PUSH
73286: EMPTY
73287: LIST
73288: LIST
73289: LIST
73290: PPUSH
73291: CALL_OW 72
73295: ST_TO_ADDR
// if depot then
73296: LD_VAR 0 5
73300: IFFALSE 73318
// depot := depot [ 1 ] else
73302: LD_ADDR_VAR 0 5
73306: PUSH
73307: LD_VAR 0 5
73311: PUSH
73312: LD_INT 1
73314: ARRAY
73315: ST_TO_ADDR
73316: GO 73326
// depot := 0 ;
73318: LD_ADDR_VAR 0 5
73322: PUSH
73323: LD_INT 0
73325: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
73326: LD_EXP 41
73330: PUSH
73331: LD_VAR 0 2
73335: ARRAY
73336: PUSH
73337: LD_INT 1
73339: ARRAY
73340: PUSH
73341: LD_INT 1
73343: ARRAY
73344: PPUSH
73345: CALL 29333 0 1
73349: PUSH
73350: LD_EXP 36
73354: PUSH
73355: LD_VAR 0 2
73359: ARRAY
73360: PPUSH
73361: LD_INT 2
73363: PUSH
73364: LD_INT 30
73366: PUSH
73367: LD_INT 2
73369: PUSH
73370: EMPTY
73371: LIST
73372: LIST
73373: PUSH
73374: LD_INT 30
73376: PUSH
73377: LD_INT 3
73379: PUSH
73380: EMPTY
73381: LIST
73382: LIST
73383: PUSH
73384: EMPTY
73385: LIST
73386: LIST
73387: LIST
73388: PPUSH
73389: CALL_OW 72
73393: NOT
73394: AND
73395: IFFALSE 73500
// begin for j = 1 to mc_build_list [ i ] do
73397: LD_ADDR_VAR 0 3
73401: PUSH
73402: DOUBLE
73403: LD_INT 1
73405: DEC
73406: ST_TO_ADDR
73407: LD_EXP 41
73411: PUSH
73412: LD_VAR 0 2
73416: ARRAY
73417: PUSH
73418: FOR_TO
73419: IFFALSE 73498
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
73421: LD_EXP 41
73425: PUSH
73426: LD_VAR 0 2
73430: ARRAY
73431: PUSH
73432: LD_VAR 0 3
73436: ARRAY
73437: PUSH
73438: LD_INT 1
73440: ARRAY
73441: PUSH
73442: LD_INT 2
73444: EQUAL
73445: IFFALSE 73496
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
73447: LD_ADDR_EXP 41
73451: PUSH
73452: LD_EXP 41
73456: PPUSH
73457: LD_VAR 0 2
73461: PPUSH
73462: LD_EXP 41
73466: PUSH
73467: LD_VAR 0 2
73471: ARRAY
73472: PPUSH
73473: LD_VAR 0 3
73477: PPUSH
73478: LD_INT 1
73480: PPUSH
73481: LD_INT 0
73483: PPUSH
73484: CALL 26070 0 4
73488: PPUSH
73489: CALL_OW 1
73493: ST_TO_ADDR
// break ;
73494: GO 73498
// end ;
73496: GO 73418
73498: POP
73499: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
73500: LD_EXP 41
73504: PUSH
73505: LD_VAR 0 2
73509: ARRAY
73510: PUSH
73511: LD_INT 1
73513: ARRAY
73514: PUSH
73515: LD_INT 1
73517: ARRAY
73518: PUSH
73519: LD_INT 0
73521: EQUAL
73522: PUSH
73523: LD_VAR 0 5
73527: PUSH
73528: LD_VAR 0 5
73532: PPUSH
73533: LD_EXP 41
73537: PUSH
73538: LD_VAR 0 2
73542: ARRAY
73543: PUSH
73544: LD_INT 1
73546: ARRAY
73547: PUSH
73548: LD_INT 1
73550: ARRAY
73551: PPUSH
73552: LD_EXP 41
73556: PUSH
73557: LD_VAR 0 2
73561: ARRAY
73562: PUSH
73563: LD_INT 1
73565: ARRAY
73566: PUSH
73567: LD_INT 2
73569: ARRAY
73570: PPUSH
73571: LD_EXP 41
73575: PUSH
73576: LD_VAR 0 2
73580: ARRAY
73581: PUSH
73582: LD_INT 1
73584: ARRAY
73585: PUSH
73586: LD_INT 3
73588: ARRAY
73589: PPUSH
73590: LD_EXP 41
73594: PUSH
73595: LD_VAR 0 2
73599: ARRAY
73600: PUSH
73601: LD_INT 1
73603: ARRAY
73604: PUSH
73605: LD_INT 4
73607: ARRAY
73608: PPUSH
73609: CALL 34067 0 5
73613: AND
73614: OR
73615: IFFALSE 73896
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
73617: LD_ADDR_VAR 0 4
73621: PUSH
73622: LD_EXP 36
73626: PUSH
73627: LD_VAR 0 2
73631: ARRAY
73632: PPUSH
73633: LD_INT 25
73635: PUSH
73636: LD_INT 2
73638: PUSH
73639: EMPTY
73640: LIST
73641: LIST
73642: PPUSH
73643: CALL_OW 72
73647: PUSH
73648: LD_EXP 38
73652: PUSH
73653: LD_VAR 0 2
73657: ARRAY
73658: DIFF
73659: ST_TO_ADDR
// if not tmp then
73660: LD_VAR 0 4
73664: NOT
73665: IFFALSE 73669
// continue ;
73667: GO 72914
// for j in tmp do
73669: LD_ADDR_VAR 0 3
73673: PUSH
73674: LD_VAR 0 4
73678: PUSH
73679: FOR_IN
73680: IFFALSE 73892
// begin if not mc_builders [ i ] then
73682: LD_EXP 42
73686: PUSH
73687: LD_VAR 0 2
73691: ARRAY
73692: NOT
73693: IFFALSE 73751
// begin SetTag ( j , 103 ) ;
73695: LD_VAR 0 3
73699: PPUSH
73700: LD_INT 103
73702: PPUSH
73703: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
73707: LD_ADDR_EXP 42
73711: PUSH
73712: LD_EXP 42
73716: PPUSH
73717: LD_VAR 0 2
73721: PUSH
73722: LD_EXP 42
73726: PUSH
73727: LD_VAR 0 2
73731: ARRAY
73732: PUSH
73733: LD_INT 1
73735: PLUS
73736: PUSH
73737: EMPTY
73738: LIST
73739: LIST
73740: PPUSH
73741: LD_VAR 0 3
73745: PPUSH
73746: CALL 26652 0 3
73750: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
73751: LD_VAR 0 3
73755: PPUSH
73756: CALL_OW 310
73760: IFFALSE 73771
// ComExitBuilding ( j ) ;
73762: LD_VAR 0 3
73766: PPUSH
73767: CALL_OW 122
// wait ( 3 ) ;
73771: LD_INT 3
73773: PPUSH
73774: CALL_OW 67
// if not mc_build_list [ i ] then
73778: LD_EXP 41
73782: PUSH
73783: LD_VAR 0 2
73787: ARRAY
73788: NOT
73789: IFFALSE 73793
// break ;
73791: GO 73892
// if not HasTask ( j ) then
73793: LD_VAR 0 3
73797: PPUSH
73798: CALL_OW 314
73802: NOT
73803: IFFALSE 73890
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
73805: LD_VAR 0 3
73809: PPUSH
73810: LD_EXP 41
73814: PUSH
73815: LD_VAR 0 2
73819: ARRAY
73820: PUSH
73821: LD_INT 1
73823: ARRAY
73824: PUSH
73825: LD_INT 1
73827: ARRAY
73828: PPUSH
73829: LD_EXP 41
73833: PUSH
73834: LD_VAR 0 2
73838: ARRAY
73839: PUSH
73840: LD_INT 1
73842: ARRAY
73843: PUSH
73844: LD_INT 2
73846: ARRAY
73847: PPUSH
73848: LD_EXP 41
73852: PUSH
73853: LD_VAR 0 2
73857: ARRAY
73858: PUSH
73859: LD_INT 1
73861: ARRAY
73862: PUSH
73863: LD_INT 3
73865: ARRAY
73866: PPUSH
73867: LD_EXP 41
73871: PUSH
73872: LD_VAR 0 2
73876: ARRAY
73877: PUSH
73878: LD_INT 1
73880: ARRAY
73881: PUSH
73882: LD_INT 4
73884: ARRAY
73885: PPUSH
73886: CALL_OW 145
// end ;
73890: GO 73679
73892: POP
73893: POP
// end else
73894: GO 74038
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
73896: LD_EXP 36
73900: PUSH
73901: LD_VAR 0 2
73905: ARRAY
73906: PPUSH
73907: LD_EXP 41
73911: PUSH
73912: LD_VAR 0 2
73916: ARRAY
73917: PUSH
73918: LD_INT 1
73920: ARRAY
73921: PUSH
73922: LD_INT 1
73924: ARRAY
73925: PPUSH
73926: LD_EXP 41
73930: PUSH
73931: LD_VAR 0 2
73935: ARRAY
73936: PUSH
73937: LD_INT 1
73939: ARRAY
73940: PUSH
73941: LD_INT 2
73943: ARRAY
73944: PPUSH
73945: LD_EXP 41
73949: PUSH
73950: LD_VAR 0 2
73954: ARRAY
73955: PUSH
73956: LD_INT 1
73958: ARRAY
73959: PUSH
73960: LD_INT 3
73962: ARRAY
73963: PPUSH
73964: LD_EXP 41
73968: PUSH
73969: LD_VAR 0 2
73973: ARRAY
73974: PUSH
73975: LD_INT 1
73977: ARRAY
73978: PUSH
73979: LD_INT 4
73981: ARRAY
73982: PPUSH
73983: CALL 33403 0 5
73987: NOT
73988: IFFALSE 74038
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
73990: LD_ADDR_EXP 41
73994: PUSH
73995: LD_EXP 41
73999: PPUSH
74000: LD_VAR 0 2
74004: PPUSH
74005: LD_EXP 41
74009: PUSH
74010: LD_VAR 0 2
74014: ARRAY
74015: PPUSH
74016: LD_INT 1
74018: PPUSH
74019: LD_INT 1
74021: NEG
74022: PPUSH
74023: LD_INT 0
74025: PPUSH
74026: CALL 26070 0 4
74030: PPUSH
74031: CALL_OW 1
74035: ST_TO_ADDR
// continue ;
74036: GO 72914
// end ; end ; end ;
74038: GO 72914
74040: POP
74041: POP
// end ;
74042: LD_VAR 0 1
74046: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
74047: LD_INT 0
74049: PPUSH
74050: PPUSH
74051: PPUSH
74052: PPUSH
74053: PPUSH
74054: PPUSH
// if not mc_bases then
74055: LD_EXP 36
74059: NOT
74060: IFFALSE 74064
// exit ;
74062: GO 74491
// for i = 1 to mc_bases do
74064: LD_ADDR_VAR 0 2
74068: PUSH
74069: DOUBLE
74070: LD_INT 1
74072: DEC
74073: ST_TO_ADDR
74074: LD_EXP 36
74078: PUSH
74079: FOR_TO
74080: IFFALSE 74489
// begin tmp := mc_build_upgrade [ i ] ;
74082: LD_ADDR_VAR 0 4
74086: PUSH
74087: LD_EXP 68
74091: PUSH
74092: LD_VAR 0 2
74096: ARRAY
74097: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
74098: LD_ADDR_VAR 0 6
74102: PUSH
74103: LD_EXP 69
74107: PUSH
74108: LD_VAR 0 2
74112: ARRAY
74113: PPUSH
74114: LD_INT 2
74116: PUSH
74117: LD_INT 30
74119: PUSH
74120: LD_INT 6
74122: PUSH
74123: EMPTY
74124: LIST
74125: LIST
74126: PUSH
74127: LD_INT 30
74129: PUSH
74130: LD_INT 7
74132: PUSH
74133: EMPTY
74134: LIST
74135: LIST
74136: PUSH
74137: EMPTY
74138: LIST
74139: LIST
74140: LIST
74141: PPUSH
74142: CALL_OW 72
74146: ST_TO_ADDR
// if not tmp and not lab then
74147: LD_VAR 0 4
74151: NOT
74152: PUSH
74153: LD_VAR 0 6
74157: NOT
74158: AND
74159: IFFALSE 74163
// continue ;
74161: GO 74079
// if tmp then
74163: LD_VAR 0 4
74167: IFFALSE 74287
// for j in tmp do
74169: LD_ADDR_VAR 0 3
74173: PUSH
74174: LD_VAR 0 4
74178: PUSH
74179: FOR_IN
74180: IFFALSE 74285
// begin if UpgradeCost ( j ) then
74182: LD_VAR 0 3
74186: PPUSH
74187: CALL 33063 0 1
74191: IFFALSE 74283
// begin ComUpgrade ( j ) ;
74193: LD_VAR 0 3
74197: PPUSH
74198: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
74202: LD_ADDR_EXP 68
74206: PUSH
74207: LD_EXP 68
74211: PPUSH
74212: LD_VAR 0 2
74216: PPUSH
74217: LD_EXP 68
74221: PUSH
74222: LD_VAR 0 2
74226: ARRAY
74227: PUSH
74228: LD_VAR 0 3
74232: DIFF
74233: PPUSH
74234: CALL_OW 1
74238: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
74239: LD_ADDR_EXP 43
74243: PUSH
74244: LD_EXP 43
74248: PPUSH
74249: LD_VAR 0 2
74253: PUSH
74254: LD_EXP 43
74258: PUSH
74259: LD_VAR 0 2
74263: ARRAY
74264: PUSH
74265: LD_INT 1
74267: PLUS
74268: PUSH
74269: EMPTY
74270: LIST
74271: LIST
74272: PPUSH
74273: LD_VAR 0 3
74277: PPUSH
74278: CALL 26652 0 3
74282: ST_TO_ADDR
// end ; end ;
74283: GO 74179
74285: POP
74286: POP
// if not lab or not mc_lab_upgrade [ i ] then
74287: LD_VAR 0 6
74291: NOT
74292: PUSH
74293: LD_EXP 70
74297: PUSH
74298: LD_VAR 0 2
74302: ARRAY
74303: NOT
74304: OR
74305: IFFALSE 74309
// continue ;
74307: GO 74079
// for j in lab do
74309: LD_ADDR_VAR 0 3
74313: PUSH
74314: LD_VAR 0 6
74318: PUSH
74319: FOR_IN
74320: IFFALSE 74485
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
74322: LD_VAR 0 3
74326: PPUSH
74327: CALL_OW 266
74331: PUSH
74332: LD_INT 6
74334: PUSH
74335: LD_INT 7
74337: PUSH
74338: EMPTY
74339: LIST
74340: LIST
74341: IN
74342: PUSH
74343: LD_VAR 0 3
74347: PPUSH
74348: CALL_OW 461
74352: PUSH
74353: LD_INT 1
74355: NONEQUAL
74356: AND
74357: IFFALSE 74483
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
74359: LD_VAR 0 3
74363: PPUSH
74364: LD_EXP 70
74368: PUSH
74369: LD_VAR 0 2
74373: ARRAY
74374: PUSH
74375: LD_INT 1
74377: ARRAY
74378: PPUSH
74379: CALL 33268 0 2
74383: IFFALSE 74483
// begin ComCancel ( j ) ;
74385: LD_VAR 0 3
74389: PPUSH
74390: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
74394: LD_VAR 0 3
74398: PPUSH
74399: LD_EXP 70
74403: PUSH
74404: LD_VAR 0 2
74408: ARRAY
74409: PUSH
74410: LD_INT 1
74412: ARRAY
74413: PPUSH
74414: CALL_OW 207
// if not j in mc_construct_list [ i ] then
74418: LD_VAR 0 3
74422: PUSH
74423: LD_EXP 43
74427: PUSH
74428: LD_VAR 0 2
74432: ARRAY
74433: IN
74434: NOT
74435: IFFALSE 74481
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
74437: LD_ADDR_EXP 43
74441: PUSH
74442: LD_EXP 43
74446: PPUSH
74447: LD_VAR 0 2
74451: PUSH
74452: LD_EXP 43
74456: PUSH
74457: LD_VAR 0 2
74461: ARRAY
74462: PUSH
74463: LD_INT 1
74465: PLUS
74466: PUSH
74467: EMPTY
74468: LIST
74469: LIST
74470: PPUSH
74471: LD_VAR 0 3
74475: PPUSH
74476: CALL 26652 0 3
74480: ST_TO_ADDR
// break ;
74481: GO 74485
// end ; end ; end ;
74483: GO 74319
74485: POP
74486: POP
// end ;
74487: GO 74079
74489: POP
74490: POP
// end ;
74491: LD_VAR 0 1
74495: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
74496: LD_INT 0
74498: PPUSH
74499: PPUSH
74500: PPUSH
74501: PPUSH
74502: PPUSH
74503: PPUSH
74504: PPUSH
74505: PPUSH
74506: PPUSH
// if not mc_bases then
74507: LD_EXP 36
74511: NOT
74512: IFFALSE 74516
// exit ;
74514: GO 74921
// for i = 1 to mc_bases do
74516: LD_ADDR_VAR 0 2
74520: PUSH
74521: DOUBLE
74522: LD_INT 1
74524: DEC
74525: ST_TO_ADDR
74526: LD_EXP 36
74530: PUSH
74531: FOR_TO
74532: IFFALSE 74919
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
74534: LD_EXP 44
74538: PUSH
74539: LD_VAR 0 2
74543: ARRAY
74544: NOT
74545: PUSH
74546: LD_EXP 36
74550: PUSH
74551: LD_VAR 0 2
74555: ARRAY
74556: PPUSH
74557: LD_INT 30
74559: PUSH
74560: LD_INT 3
74562: PUSH
74563: EMPTY
74564: LIST
74565: LIST
74566: PPUSH
74567: CALL_OW 72
74571: NOT
74572: OR
74573: IFFALSE 74577
// continue ;
74575: GO 74531
// busy := false ;
74577: LD_ADDR_VAR 0 8
74581: PUSH
74582: LD_INT 0
74584: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
74585: LD_ADDR_VAR 0 4
74589: PUSH
74590: LD_EXP 36
74594: PUSH
74595: LD_VAR 0 2
74599: ARRAY
74600: PPUSH
74601: LD_INT 30
74603: PUSH
74604: LD_INT 3
74606: PUSH
74607: EMPTY
74608: LIST
74609: LIST
74610: PPUSH
74611: CALL_OW 72
74615: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
74616: LD_ADDR_VAR 0 6
74620: PUSH
74621: LD_EXP 44
74625: PUSH
74626: LD_VAR 0 2
74630: ARRAY
74631: PPUSH
74632: LD_INT 2
74634: PUSH
74635: LD_INT 30
74637: PUSH
74638: LD_INT 32
74640: PUSH
74641: EMPTY
74642: LIST
74643: LIST
74644: PUSH
74645: LD_INT 30
74647: PUSH
74648: LD_INT 33
74650: PUSH
74651: EMPTY
74652: LIST
74653: LIST
74654: PUSH
74655: EMPTY
74656: LIST
74657: LIST
74658: LIST
74659: PPUSH
74660: CALL_OW 72
74664: ST_TO_ADDR
// if not t then
74665: LD_VAR 0 6
74669: NOT
74670: IFFALSE 74674
// continue ;
74672: GO 74531
// for j in tmp do
74674: LD_ADDR_VAR 0 3
74678: PUSH
74679: LD_VAR 0 4
74683: PUSH
74684: FOR_IN
74685: IFFALSE 74715
// if not BuildingStatus ( j ) = bs_idle then
74687: LD_VAR 0 3
74691: PPUSH
74692: CALL_OW 461
74696: PUSH
74697: LD_INT 2
74699: EQUAL
74700: NOT
74701: IFFALSE 74713
// begin busy := true ;
74703: LD_ADDR_VAR 0 8
74707: PUSH
74708: LD_INT 1
74710: ST_TO_ADDR
// break ;
74711: GO 74715
// end ;
74713: GO 74684
74715: POP
74716: POP
// if busy then
74717: LD_VAR 0 8
74721: IFFALSE 74725
// continue ;
74723: GO 74531
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
74725: LD_ADDR_VAR 0 7
74729: PUSH
74730: LD_VAR 0 6
74734: PPUSH
74735: LD_INT 35
74737: PUSH
74738: LD_INT 0
74740: PUSH
74741: EMPTY
74742: LIST
74743: LIST
74744: PPUSH
74745: CALL_OW 72
74749: ST_TO_ADDR
// if tw then
74750: LD_VAR 0 7
74754: IFFALSE 74831
// begin tw := tw [ 1 ] ;
74756: LD_ADDR_VAR 0 7
74760: PUSH
74761: LD_VAR 0 7
74765: PUSH
74766: LD_INT 1
74768: ARRAY
74769: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
74770: LD_ADDR_VAR 0 9
74774: PUSH
74775: LD_VAR 0 7
74779: PPUSH
74780: LD_EXP 61
74784: PUSH
74785: LD_VAR 0 2
74789: ARRAY
74790: PPUSH
74791: CALL 31622 0 2
74795: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
74796: LD_EXP 75
74800: PUSH
74801: LD_VAR 0 2
74805: ARRAY
74806: IFFALSE 74829
// if not weapon in mc_allowed_tower_weapons [ i ] then
74808: LD_VAR 0 9
74812: PUSH
74813: LD_EXP 75
74817: PUSH
74818: LD_VAR 0 2
74822: ARRAY
74823: IN
74824: NOT
74825: IFFALSE 74829
// continue ;
74827: GO 74531
// end else
74829: GO 74894
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
74831: LD_ADDR_VAR 0 5
74835: PUSH
74836: LD_EXP 44
74840: PUSH
74841: LD_VAR 0 2
74845: ARRAY
74846: PPUSH
74847: LD_VAR 0 4
74851: PPUSH
74852: CALL 61833 0 2
74856: ST_TO_ADDR
// if not tmp2 then
74857: LD_VAR 0 5
74861: NOT
74862: IFFALSE 74866
// continue ;
74864: GO 74531
// tw := tmp2 [ 1 ] ;
74866: LD_ADDR_VAR 0 7
74870: PUSH
74871: LD_VAR 0 5
74875: PUSH
74876: LD_INT 1
74878: ARRAY
74879: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
74880: LD_ADDR_VAR 0 9
74884: PUSH
74885: LD_VAR 0 5
74889: PUSH
74890: LD_INT 2
74892: ARRAY
74893: ST_TO_ADDR
// end ; if not weapon then
74894: LD_VAR 0 9
74898: NOT
74899: IFFALSE 74903
// continue ;
74901: GO 74531
// ComPlaceWeapon ( tw , weapon ) ;
74903: LD_VAR 0 7
74907: PPUSH
74908: LD_VAR 0 9
74912: PPUSH
74913: CALL_OW 148
// end ;
74917: GO 74531
74919: POP
74920: POP
// end ;
74921: LD_VAR 0 1
74925: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
74926: LD_INT 0
74928: PPUSH
74929: PPUSH
74930: PPUSH
74931: PPUSH
74932: PPUSH
74933: PPUSH
// if not mc_bases then
74934: LD_EXP 36
74938: NOT
74939: IFFALSE 74943
// exit ;
74941: GO 75719
// for i = 1 to mc_bases do
74943: LD_ADDR_VAR 0 2
74947: PUSH
74948: DOUBLE
74949: LD_INT 1
74951: DEC
74952: ST_TO_ADDR
74953: LD_EXP 36
74957: PUSH
74958: FOR_TO
74959: IFFALSE 75717
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
74961: LD_EXP 49
74965: PUSH
74966: LD_VAR 0 2
74970: ARRAY
74971: NOT
74972: PUSH
74973: LD_EXP 49
74977: PUSH
74978: LD_VAR 0 2
74982: ARRAY
74983: PUSH
74984: LD_EXP 50
74988: PUSH
74989: LD_VAR 0 2
74993: ARRAY
74994: EQUAL
74995: OR
74996: PUSH
74997: LD_EXP 59
75001: PUSH
75002: LD_VAR 0 2
75006: ARRAY
75007: OR
75008: IFFALSE 75012
// continue ;
75010: GO 74958
// if mc_miners [ i ] then
75012: LD_EXP 50
75016: PUSH
75017: LD_VAR 0 2
75021: ARRAY
75022: IFFALSE 75404
// begin for j = mc_miners [ i ] downto 1 do
75024: LD_ADDR_VAR 0 3
75028: PUSH
75029: DOUBLE
75030: LD_EXP 50
75034: PUSH
75035: LD_VAR 0 2
75039: ARRAY
75040: INC
75041: ST_TO_ADDR
75042: LD_INT 1
75044: PUSH
75045: FOR_DOWNTO
75046: IFFALSE 75402
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
75048: LD_EXP 50
75052: PUSH
75053: LD_VAR 0 2
75057: ARRAY
75058: PUSH
75059: LD_VAR 0 3
75063: ARRAY
75064: PPUSH
75065: CALL_OW 301
75069: PUSH
75070: LD_EXP 50
75074: PUSH
75075: LD_VAR 0 2
75079: ARRAY
75080: PUSH
75081: LD_VAR 0 3
75085: ARRAY
75086: PPUSH
75087: CALL_OW 257
75091: PUSH
75092: LD_INT 1
75094: NONEQUAL
75095: OR
75096: IFFALSE 75159
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
75098: LD_ADDR_VAR 0 5
75102: PUSH
75103: LD_EXP 50
75107: PUSH
75108: LD_VAR 0 2
75112: ARRAY
75113: PUSH
75114: LD_EXP 50
75118: PUSH
75119: LD_VAR 0 2
75123: ARRAY
75124: PUSH
75125: LD_VAR 0 3
75129: ARRAY
75130: DIFF
75131: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
75132: LD_ADDR_EXP 50
75136: PUSH
75137: LD_EXP 50
75141: PPUSH
75142: LD_VAR 0 2
75146: PPUSH
75147: LD_VAR 0 5
75151: PPUSH
75152: CALL_OW 1
75156: ST_TO_ADDR
// continue ;
75157: GO 75045
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
75159: LD_EXP 50
75163: PUSH
75164: LD_VAR 0 2
75168: ARRAY
75169: PUSH
75170: LD_VAR 0 3
75174: ARRAY
75175: PPUSH
75176: CALL_OW 257
75180: PUSH
75181: LD_INT 1
75183: EQUAL
75184: PUSH
75185: LD_EXP 50
75189: PUSH
75190: LD_VAR 0 2
75194: ARRAY
75195: PUSH
75196: LD_VAR 0 3
75200: ARRAY
75201: PPUSH
75202: CALL_OW 459
75206: NOT
75207: AND
75208: PUSH
75209: LD_EXP 50
75213: PUSH
75214: LD_VAR 0 2
75218: ARRAY
75219: PUSH
75220: LD_VAR 0 3
75224: ARRAY
75225: PPUSH
75226: CALL_OW 314
75230: NOT
75231: AND
75232: IFFALSE 75400
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
75234: LD_EXP 50
75238: PUSH
75239: LD_VAR 0 2
75243: ARRAY
75244: PUSH
75245: LD_VAR 0 3
75249: ARRAY
75250: PPUSH
75251: CALL_OW 310
75255: IFFALSE 75278
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
75257: LD_EXP 50
75261: PUSH
75262: LD_VAR 0 2
75266: ARRAY
75267: PUSH
75268: LD_VAR 0 3
75272: ARRAY
75273: PPUSH
75274: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
75278: LD_EXP 50
75282: PUSH
75283: LD_VAR 0 2
75287: ARRAY
75288: PUSH
75289: LD_VAR 0 3
75293: ARRAY
75294: PPUSH
75295: CALL_OW 314
75299: NOT
75300: IFFALSE 75400
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
75302: LD_EXP 50
75306: PUSH
75307: LD_VAR 0 2
75311: ARRAY
75312: PUSH
75313: LD_VAR 0 3
75317: ARRAY
75318: PPUSH
75319: LD_EXP 49
75323: PUSH
75324: LD_VAR 0 2
75328: ARRAY
75329: PUSH
75330: LD_VAR 0 3
75334: PUSH
75335: LD_EXP 49
75339: PUSH
75340: LD_VAR 0 2
75344: ARRAY
75345: MOD
75346: PUSH
75347: LD_INT 1
75349: PLUS
75350: ARRAY
75351: PUSH
75352: LD_INT 1
75354: ARRAY
75355: PPUSH
75356: LD_EXP 49
75360: PUSH
75361: LD_VAR 0 2
75365: ARRAY
75366: PUSH
75367: LD_VAR 0 3
75371: PUSH
75372: LD_EXP 49
75376: PUSH
75377: LD_VAR 0 2
75381: ARRAY
75382: MOD
75383: PUSH
75384: LD_INT 1
75386: PLUS
75387: ARRAY
75388: PUSH
75389: LD_INT 2
75391: ARRAY
75392: PPUSH
75393: LD_INT 0
75395: PPUSH
75396: CALL_OW 193
// end ; end ;
75400: GO 75045
75402: POP
75403: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
75404: LD_ADDR_VAR 0 5
75408: PUSH
75409: LD_EXP 36
75413: PUSH
75414: LD_VAR 0 2
75418: ARRAY
75419: PPUSH
75420: LD_INT 2
75422: PUSH
75423: LD_INT 30
75425: PUSH
75426: LD_INT 4
75428: PUSH
75429: EMPTY
75430: LIST
75431: LIST
75432: PUSH
75433: LD_INT 30
75435: PUSH
75436: LD_INT 5
75438: PUSH
75439: EMPTY
75440: LIST
75441: LIST
75442: PUSH
75443: LD_INT 30
75445: PUSH
75446: LD_INT 32
75448: PUSH
75449: EMPTY
75450: LIST
75451: LIST
75452: PUSH
75453: EMPTY
75454: LIST
75455: LIST
75456: LIST
75457: LIST
75458: PPUSH
75459: CALL_OW 72
75463: ST_TO_ADDR
// if not tmp then
75464: LD_VAR 0 5
75468: NOT
75469: IFFALSE 75473
// continue ;
75471: GO 74958
// list := [ ] ;
75473: LD_ADDR_VAR 0 6
75477: PUSH
75478: EMPTY
75479: ST_TO_ADDR
// for j in tmp do
75480: LD_ADDR_VAR 0 3
75484: PUSH
75485: LD_VAR 0 5
75489: PUSH
75490: FOR_IN
75491: IFFALSE 75560
// begin for k in UnitsInside ( j ) do
75493: LD_ADDR_VAR 0 4
75497: PUSH
75498: LD_VAR 0 3
75502: PPUSH
75503: CALL_OW 313
75507: PUSH
75508: FOR_IN
75509: IFFALSE 75556
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
75511: LD_VAR 0 4
75515: PPUSH
75516: CALL_OW 257
75520: PUSH
75521: LD_INT 1
75523: EQUAL
75524: PUSH
75525: LD_VAR 0 4
75529: PPUSH
75530: CALL_OW 459
75534: NOT
75535: AND
75536: IFFALSE 75554
// list := list ^ k ;
75538: LD_ADDR_VAR 0 6
75542: PUSH
75543: LD_VAR 0 6
75547: PUSH
75548: LD_VAR 0 4
75552: ADD
75553: ST_TO_ADDR
75554: GO 75508
75556: POP
75557: POP
// end ;
75558: GO 75490
75560: POP
75561: POP
// list := list diff mc_miners [ i ] ;
75562: LD_ADDR_VAR 0 6
75566: PUSH
75567: LD_VAR 0 6
75571: PUSH
75572: LD_EXP 50
75576: PUSH
75577: LD_VAR 0 2
75581: ARRAY
75582: DIFF
75583: ST_TO_ADDR
// if not list then
75584: LD_VAR 0 6
75588: NOT
75589: IFFALSE 75593
// continue ;
75591: GO 74958
// k := mc_mines [ i ] - mc_miners [ i ] ;
75593: LD_ADDR_VAR 0 4
75597: PUSH
75598: LD_EXP 49
75602: PUSH
75603: LD_VAR 0 2
75607: ARRAY
75608: PUSH
75609: LD_EXP 50
75613: PUSH
75614: LD_VAR 0 2
75618: ARRAY
75619: MINUS
75620: ST_TO_ADDR
// if k > list then
75621: LD_VAR 0 4
75625: PUSH
75626: LD_VAR 0 6
75630: GREATER
75631: IFFALSE 75643
// k := list ;
75633: LD_ADDR_VAR 0 4
75637: PUSH
75638: LD_VAR 0 6
75642: ST_TO_ADDR
// for j = 1 to k do
75643: LD_ADDR_VAR 0 3
75647: PUSH
75648: DOUBLE
75649: LD_INT 1
75651: DEC
75652: ST_TO_ADDR
75653: LD_VAR 0 4
75657: PUSH
75658: FOR_TO
75659: IFFALSE 75713
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
75661: LD_ADDR_EXP 50
75665: PUSH
75666: LD_EXP 50
75670: PPUSH
75671: LD_VAR 0 2
75675: PUSH
75676: LD_EXP 50
75680: PUSH
75681: LD_VAR 0 2
75685: ARRAY
75686: PUSH
75687: LD_INT 1
75689: PLUS
75690: PUSH
75691: EMPTY
75692: LIST
75693: LIST
75694: PPUSH
75695: LD_VAR 0 6
75699: PUSH
75700: LD_VAR 0 3
75704: ARRAY
75705: PPUSH
75706: CALL 26652 0 3
75710: ST_TO_ADDR
75711: GO 75658
75713: POP
75714: POP
// end ;
75715: GO 74958
75717: POP
75718: POP
// end ;
75719: LD_VAR 0 1
75723: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
75724: LD_INT 0
75726: PPUSH
75727: PPUSH
75728: PPUSH
75729: PPUSH
75730: PPUSH
75731: PPUSH
75732: PPUSH
75733: PPUSH
75734: PPUSH
75735: PPUSH
// if not mc_bases then
75736: LD_EXP 36
75740: NOT
75741: IFFALSE 75745
// exit ;
75743: GO 77495
// for i = 1 to mc_bases do
75745: LD_ADDR_VAR 0 2
75749: PUSH
75750: DOUBLE
75751: LD_INT 1
75753: DEC
75754: ST_TO_ADDR
75755: LD_EXP 36
75759: PUSH
75760: FOR_TO
75761: IFFALSE 77493
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
75763: LD_EXP 36
75767: PUSH
75768: LD_VAR 0 2
75772: ARRAY
75773: NOT
75774: PUSH
75775: LD_EXP 43
75779: PUSH
75780: LD_VAR 0 2
75784: ARRAY
75785: OR
75786: IFFALSE 75790
// continue ;
75788: GO 75760
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
75790: LD_EXP 52
75794: PUSH
75795: LD_VAR 0 2
75799: ARRAY
75800: NOT
75801: PUSH
75802: LD_EXP 53
75806: PUSH
75807: LD_VAR 0 2
75811: ARRAY
75812: AND
75813: IFFALSE 75851
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
75815: LD_ADDR_EXP 53
75819: PUSH
75820: LD_EXP 53
75824: PPUSH
75825: LD_VAR 0 2
75829: PPUSH
75830: EMPTY
75831: PPUSH
75832: CALL_OW 1
75836: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
75837: LD_VAR 0 2
75841: PPUSH
75842: LD_INT 107
75844: PPUSH
75845: CALL 66709 0 2
// continue ;
75849: GO 75760
// end ; target := [ ] ;
75851: LD_ADDR_VAR 0 6
75855: PUSH
75856: EMPTY
75857: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
75858: LD_ADDR_VAR 0 3
75862: PUSH
75863: DOUBLE
75864: LD_EXP 52
75868: PUSH
75869: LD_VAR 0 2
75873: ARRAY
75874: INC
75875: ST_TO_ADDR
75876: LD_INT 1
75878: PUSH
75879: FOR_DOWNTO
75880: IFFALSE 76140
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
75882: LD_EXP 52
75886: PUSH
75887: LD_VAR 0 2
75891: ARRAY
75892: PUSH
75893: LD_VAR 0 3
75897: ARRAY
75898: PUSH
75899: LD_INT 2
75901: ARRAY
75902: PPUSH
75903: LD_EXP 52
75907: PUSH
75908: LD_VAR 0 2
75912: ARRAY
75913: PUSH
75914: LD_VAR 0 3
75918: ARRAY
75919: PUSH
75920: LD_INT 3
75922: ARRAY
75923: PPUSH
75924: CALL_OW 488
75928: PUSH
75929: LD_EXP 52
75933: PUSH
75934: LD_VAR 0 2
75938: ARRAY
75939: PUSH
75940: LD_VAR 0 3
75944: ARRAY
75945: PUSH
75946: LD_INT 2
75948: ARRAY
75949: PPUSH
75950: LD_EXP 52
75954: PUSH
75955: LD_VAR 0 2
75959: ARRAY
75960: PUSH
75961: LD_VAR 0 3
75965: ARRAY
75966: PUSH
75967: LD_INT 3
75969: ARRAY
75970: PPUSH
75971: CALL_OW 284
75975: PUSH
75976: LD_INT 0
75978: EQUAL
75979: AND
75980: IFFALSE 76035
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
75982: LD_ADDR_VAR 0 5
75986: PUSH
75987: LD_EXP 52
75991: PUSH
75992: LD_VAR 0 2
75996: ARRAY
75997: PPUSH
75998: LD_VAR 0 3
76002: PPUSH
76003: CALL_OW 3
76007: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
76008: LD_ADDR_EXP 52
76012: PUSH
76013: LD_EXP 52
76017: PPUSH
76018: LD_VAR 0 2
76022: PPUSH
76023: LD_VAR 0 5
76027: PPUSH
76028: CALL_OW 1
76032: ST_TO_ADDR
// continue ;
76033: GO 75879
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
76035: LD_EXP 36
76039: PUSH
76040: LD_VAR 0 2
76044: ARRAY
76045: PUSH
76046: LD_INT 1
76048: ARRAY
76049: PPUSH
76050: CALL_OW 255
76054: PPUSH
76055: LD_EXP 52
76059: PUSH
76060: LD_VAR 0 2
76064: ARRAY
76065: PUSH
76066: LD_VAR 0 3
76070: ARRAY
76071: PUSH
76072: LD_INT 2
76074: ARRAY
76075: PPUSH
76076: LD_EXP 52
76080: PUSH
76081: LD_VAR 0 2
76085: ARRAY
76086: PUSH
76087: LD_VAR 0 3
76091: ARRAY
76092: PUSH
76093: LD_INT 3
76095: ARRAY
76096: PPUSH
76097: LD_INT 30
76099: PPUSH
76100: CALL 27548 0 4
76104: PUSH
76105: LD_INT 4
76107: ARRAY
76108: PUSH
76109: LD_INT 0
76111: EQUAL
76112: IFFALSE 76138
// begin target := mc_crates [ i ] [ j ] ;
76114: LD_ADDR_VAR 0 6
76118: PUSH
76119: LD_EXP 52
76123: PUSH
76124: LD_VAR 0 2
76128: ARRAY
76129: PUSH
76130: LD_VAR 0 3
76134: ARRAY
76135: ST_TO_ADDR
// break ;
76136: GO 76140
// end ; end ;
76138: GO 75879
76140: POP
76141: POP
// if not target then
76142: LD_VAR 0 6
76146: NOT
76147: IFFALSE 76151
// continue ;
76149: GO 75760
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
76151: LD_ADDR_VAR 0 7
76155: PUSH
76156: LD_EXP 55
76160: PUSH
76161: LD_VAR 0 2
76165: ARRAY
76166: PPUSH
76167: LD_INT 2
76169: PUSH
76170: LD_INT 3
76172: PUSH
76173: LD_INT 58
76175: PUSH
76176: EMPTY
76177: LIST
76178: PUSH
76179: EMPTY
76180: LIST
76181: LIST
76182: PUSH
76183: LD_INT 61
76185: PUSH
76186: EMPTY
76187: LIST
76188: PUSH
76189: LD_INT 33
76191: PUSH
76192: LD_INT 5
76194: PUSH
76195: EMPTY
76196: LIST
76197: LIST
76198: PUSH
76199: LD_INT 33
76201: PUSH
76202: LD_INT 3
76204: PUSH
76205: EMPTY
76206: LIST
76207: LIST
76208: PUSH
76209: EMPTY
76210: LIST
76211: LIST
76212: LIST
76213: LIST
76214: LIST
76215: PUSH
76216: LD_INT 2
76218: PUSH
76219: LD_INT 34
76221: PUSH
76222: LD_INT 32
76224: PUSH
76225: EMPTY
76226: LIST
76227: LIST
76228: PUSH
76229: LD_INT 34
76231: PUSH
76232: LD_INT 51
76234: PUSH
76235: EMPTY
76236: LIST
76237: LIST
76238: PUSH
76239: LD_INT 34
76241: PUSH
76242: LD_INT 12
76244: PUSH
76245: EMPTY
76246: LIST
76247: LIST
76248: PUSH
76249: EMPTY
76250: LIST
76251: LIST
76252: LIST
76253: LIST
76254: PUSH
76255: EMPTY
76256: LIST
76257: LIST
76258: PPUSH
76259: CALL_OW 72
76263: ST_TO_ADDR
// if not cargo then
76264: LD_VAR 0 7
76268: NOT
76269: IFFALSE 76912
// begin if mc_crates_collector [ i ] < 5 then
76271: LD_EXP 53
76275: PUSH
76276: LD_VAR 0 2
76280: ARRAY
76281: PUSH
76282: LD_INT 5
76284: LESS
76285: IFFALSE 76651
// begin if mc_ape [ i ] then
76287: LD_EXP 65
76291: PUSH
76292: LD_VAR 0 2
76296: ARRAY
76297: IFFALSE 76344
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
76299: LD_ADDR_VAR 0 5
76303: PUSH
76304: LD_EXP 65
76308: PUSH
76309: LD_VAR 0 2
76313: ARRAY
76314: PPUSH
76315: LD_INT 25
76317: PUSH
76318: LD_INT 16
76320: PUSH
76321: EMPTY
76322: LIST
76323: LIST
76324: PUSH
76325: LD_INT 24
76327: PUSH
76328: LD_INT 750
76330: PUSH
76331: EMPTY
76332: LIST
76333: LIST
76334: PUSH
76335: EMPTY
76336: LIST
76337: LIST
76338: PPUSH
76339: CALL_OW 72
76343: ST_TO_ADDR
// if not tmp then
76344: LD_VAR 0 5
76348: NOT
76349: IFFALSE 76396
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
76351: LD_ADDR_VAR 0 5
76355: PUSH
76356: LD_EXP 36
76360: PUSH
76361: LD_VAR 0 2
76365: ARRAY
76366: PPUSH
76367: LD_INT 25
76369: PUSH
76370: LD_INT 2
76372: PUSH
76373: EMPTY
76374: LIST
76375: LIST
76376: PUSH
76377: LD_INT 24
76379: PUSH
76380: LD_INT 750
76382: PUSH
76383: EMPTY
76384: LIST
76385: LIST
76386: PUSH
76387: EMPTY
76388: LIST
76389: LIST
76390: PPUSH
76391: CALL_OW 72
76395: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
76396: LD_EXP 65
76400: PUSH
76401: LD_VAR 0 2
76405: ARRAY
76406: PUSH
76407: LD_EXP 36
76411: PUSH
76412: LD_VAR 0 2
76416: ARRAY
76417: PPUSH
76418: LD_INT 25
76420: PUSH
76421: LD_INT 2
76423: PUSH
76424: EMPTY
76425: LIST
76426: LIST
76427: PUSH
76428: LD_INT 24
76430: PUSH
76431: LD_INT 750
76433: PUSH
76434: EMPTY
76435: LIST
76436: LIST
76437: PUSH
76438: EMPTY
76439: LIST
76440: LIST
76441: PPUSH
76442: CALL_OW 72
76446: AND
76447: PUSH
76448: LD_VAR 0 5
76452: PUSH
76453: LD_INT 5
76455: LESS
76456: AND
76457: IFFALSE 76539
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
76459: LD_ADDR_VAR 0 3
76463: PUSH
76464: LD_EXP 36
76468: PUSH
76469: LD_VAR 0 2
76473: ARRAY
76474: PPUSH
76475: LD_INT 25
76477: PUSH
76478: LD_INT 2
76480: PUSH
76481: EMPTY
76482: LIST
76483: LIST
76484: PUSH
76485: LD_INT 24
76487: PUSH
76488: LD_INT 750
76490: PUSH
76491: EMPTY
76492: LIST
76493: LIST
76494: PUSH
76495: EMPTY
76496: LIST
76497: LIST
76498: PPUSH
76499: CALL_OW 72
76503: PUSH
76504: FOR_IN
76505: IFFALSE 76537
// begin tmp := tmp union j ;
76507: LD_ADDR_VAR 0 5
76511: PUSH
76512: LD_VAR 0 5
76516: PUSH
76517: LD_VAR 0 3
76521: UNION
76522: ST_TO_ADDR
// if tmp >= 5 then
76523: LD_VAR 0 5
76527: PUSH
76528: LD_INT 5
76530: GREATEREQUAL
76531: IFFALSE 76535
// break ;
76533: GO 76537
// end ;
76535: GO 76504
76537: POP
76538: POP
// end ; if not tmp then
76539: LD_VAR 0 5
76543: NOT
76544: IFFALSE 76548
// continue ;
76546: GO 75760
// for j in tmp do
76548: LD_ADDR_VAR 0 3
76552: PUSH
76553: LD_VAR 0 5
76557: PUSH
76558: FOR_IN
76559: IFFALSE 76649
// if not GetTag ( j ) then
76561: LD_VAR 0 3
76565: PPUSH
76566: CALL_OW 110
76570: NOT
76571: IFFALSE 76647
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
76573: LD_ADDR_EXP 53
76577: PUSH
76578: LD_EXP 53
76582: PPUSH
76583: LD_VAR 0 2
76587: PUSH
76588: LD_EXP 53
76592: PUSH
76593: LD_VAR 0 2
76597: ARRAY
76598: PUSH
76599: LD_INT 1
76601: PLUS
76602: PUSH
76603: EMPTY
76604: LIST
76605: LIST
76606: PPUSH
76607: LD_VAR 0 3
76611: PPUSH
76612: CALL 26652 0 3
76616: ST_TO_ADDR
// SetTag ( j , 107 ) ;
76617: LD_VAR 0 3
76621: PPUSH
76622: LD_INT 107
76624: PPUSH
76625: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
76629: LD_EXP 53
76633: PUSH
76634: LD_VAR 0 2
76638: ARRAY
76639: PUSH
76640: LD_INT 5
76642: GREATEREQUAL
76643: IFFALSE 76647
// break ;
76645: GO 76649
// end ;
76647: GO 76558
76649: POP
76650: POP
// end ; if mc_crates_collector [ i ] and target then
76651: LD_EXP 53
76655: PUSH
76656: LD_VAR 0 2
76660: ARRAY
76661: PUSH
76662: LD_VAR 0 6
76666: AND
76667: IFFALSE 76910
// begin if mc_crates_collector [ i ] < target [ 1 ] then
76669: LD_EXP 53
76673: PUSH
76674: LD_VAR 0 2
76678: ARRAY
76679: PUSH
76680: LD_VAR 0 6
76684: PUSH
76685: LD_INT 1
76687: ARRAY
76688: LESS
76689: IFFALSE 76709
// tmp := mc_crates_collector [ i ] else
76691: LD_ADDR_VAR 0 5
76695: PUSH
76696: LD_EXP 53
76700: PUSH
76701: LD_VAR 0 2
76705: ARRAY
76706: ST_TO_ADDR
76707: GO 76723
// tmp := target [ 1 ] ;
76709: LD_ADDR_VAR 0 5
76713: PUSH
76714: LD_VAR 0 6
76718: PUSH
76719: LD_INT 1
76721: ARRAY
76722: ST_TO_ADDR
// k := 0 ;
76723: LD_ADDR_VAR 0 4
76727: PUSH
76728: LD_INT 0
76730: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
76731: LD_ADDR_VAR 0 3
76735: PUSH
76736: LD_EXP 53
76740: PUSH
76741: LD_VAR 0 2
76745: ARRAY
76746: PUSH
76747: FOR_IN
76748: IFFALSE 76908
// begin k := k + 1 ;
76750: LD_ADDR_VAR 0 4
76754: PUSH
76755: LD_VAR 0 4
76759: PUSH
76760: LD_INT 1
76762: PLUS
76763: ST_TO_ADDR
// if k > tmp then
76764: LD_VAR 0 4
76768: PUSH
76769: LD_VAR 0 5
76773: GREATER
76774: IFFALSE 76778
// break ;
76776: GO 76908
// if not GetClass ( j ) in [ 2 , 16 ] then
76778: LD_VAR 0 3
76782: PPUSH
76783: CALL_OW 257
76787: PUSH
76788: LD_INT 2
76790: PUSH
76791: LD_INT 16
76793: PUSH
76794: EMPTY
76795: LIST
76796: LIST
76797: IN
76798: NOT
76799: IFFALSE 76852
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
76801: LD_ADDR_EXP 53
76805: PUSH
76806: LD_EXP 53
76810: PPUSH
76811: LD_VAR 0 2
76815: PPUSH
76816: LD_EXP 53
76820: PUSH
76821: LD_VAR 0 2
76825: ARRAY
76826: PUSH
76827: LD_VAR 0 3
76831: DIFF
76832: PPUSH
76833: CALL_OW 1
76837: ST_TO_ADDR
// SetTag ( j , 0 ) ;
76838: LD_VAR 0 3
76842: PPUSH
76843: LD_INT 0
76845: PPUSH
76846: CALL_OW 109
// continue ;
76850: GO 76747
// end ; if IsInUnit ( j ) then
76852: LD_VAR 0 3
76856: PPUSH
76857: CALL_OW 310
76861: IFFALSE 76872
// ComExitBuilding ( j ) ;
76863: LD_VAR 0 3
76867: PPUSH
76868: CALL_OW 122
// wait ( 3 ) ;
76872: LD_INT 3
76874: PPUSH
76875: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
76879: LD_VAR 0 3
76883: PPUSH
76884: LD_VAR 0 6
76888: PUSH
76889: LD_INT 2
76891: ARRAY
76892: PPUSH
76893: LD_VAR 0 6
76897: PUSH
76898: LD_INT 3
76900: ARRAY
76901: PPUSH
76902: CALL_OW 117
// end ;
76906: GO 76747
76908: POP
76909: POP
// end ; end else
76910: GO 77491
// begin for j in cargo do
76912: LD_ADDR_VAR 0 3
76916: PUSH
76917: LD_VAR 0 7
76921: PUSH
76922: FOR_IN
76923: IFFALSE 77489
// begin if GetTag ( j ) <> 0 then
76925: LD_VAR 0 3
76929: PPUSH
76930: CALL_OW 110
76934: PUSH
76935: LD_INT 0
76937: NONEQUAL
76938: IFFALSE 76942
// continue ;
76940: GO 76922
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
76942: LD_VAR 0 3
76946: PPUSH
76947: CALL_OW 256
76951: PUSH
76952: LD_INT 1000
76954: LESS
76955: PUSH
76956: LD_VAR 0 3
76960: PPUSH
76961: LD_EXP 60
76965: PUSH
76966: LD_VAR 0 2
76970: ARRAY
76971: PPUSH
76972: CALL_OW 308
76976: NOT
76977: AND
76978: IFFALSE 77000
// ComMoveToArea ( j , mc_parking [ i ] ) ;
76980: LD_VAR 0 3
76984: PPUSH
76985: LD_EXP 60
76989: PUSH
76990: LD_VAR 0 2
76994: ARRAY
76995: PPUSH
76996: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
77000: LD_VAR 0 3
77004: PPUSH
77005: CALL_OW 256
77009: PUSH
77010: LD_INT 1000
77012: LESS
77013: PUSH
77014: LD_VAR 0 3
77018: PPUSH
77019: LD_EXP 60
77023: PUSH
77024: LD_VAR 0 2
77028: ARRAY
77029: PPUSH
77030: CALL_OW 308
77034: AND
77035: IFFALSE 77039
// continue ;
77037: GO 76922
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
77039: LD_VAR 0 3
77043: PPUSH
77044: CALL_OW 262
77048: PUSH
77049: LD_INT 2
77051: EQUAL
77052: PUSH
77053: LD_VAR 0 3
77057: PPUSH
77058: CALL_OW 261
77062: PUSH
77063: LD_INT 15
77065: LESS
77066: AND
77067: IFFALSE 77071
// continue ;
77069: GO 76922
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
77071: LD_VAR 0 3
77075: PPUSH
77076: CALL_OW 262
77080: PUSH
77081: LD_INT 1
77083: EQUAL
77084: PUSH
77085: LD_VAR 0 3
77089: PPUSH
77090: CALL_OW 261
77094: PUSH
77095: LD_INT 10
77097: LESS
77098: AND
77099: IFFALSE 77428
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
77101: LD_ADDR_VAR 0 8
77105: PUSH
77106: LD_EXP 36
77110: PUSH
77111: LD_VAR 0 2
77115: ARRAY
77116: PPUSH
77117: LD_INT 2
77119: PUSH
77120: LD_INT 30
77122: PUSH
77123: LD_INT 0
77125: PUSH
77126: EMPTY
77127: LIST
77128: LIST
77129: PUSH
77130: LD_INT 30
77132: PUSH
77133: LD_INT 1
77135: PUSH
77136: EMPTY
77137: LIST
77138: LIST
77139: PUSH
77140: EMPTY
77141: LIST
77142: LIST
77143: LIST
77144: PPUSH
77145: CALL_OW 72
77149: ST_TO_ADDR
// if not depot then
77150: LD_VAR 0 8
77154: NOT
77155: IFFALSE 77159
// continue ;
77157: GO 76922
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
77159: LD_VAR 0 3
77163: PPUSH
77164: LD_VAR 0 8
77168: PPUSH
77169: LD_VAR 0 3
77173: PPUSH
77174: CALL_OW 74
77178: PPUSH
77179: CALL_OW 296
77183: PUSH
77184: LD_INT 6
77186: LESS
77187: IFFALSE 77203
// SetFuel ( j , 100 ) else
77189: LD_VAR 0 3
77193: PPUSH
77194: LD_INT 100
77196: PPUSH
77197: CALL_OW 240
77201: GO 77428
// if GetFuel ( j ) = 0 then
77203: LD_VAR 0 3
77207: PPUSH
77208: CALL_OW 261
77212: PUSH
77213: LD_INT 0
77215: EQUAL
77216: IFFALSE 77428
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
77218: LD_ADDR_EXP 55
77222: PUSH
77223: LD_EXP 55
77227: PPUSH
77228: LD_VAR 0 2
77232: PPUSH
77233: LD_EXP 55
77237: PUSH
77238: LD_VAR 0 2
77242: ARRAY
77243: PUSH
77244: LD_VAR 0 3
77248: DIFF
77249: PPUSH
77250: CALL_OW 1
77254: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
77255: LD_VAR 0 3
77259: PPUSH
77260: CALL_OW 263
77264: PUSH
77265: LD_INT 1
77267: EQUAL
77268: IFFALSE 77284
// ComExitVehicle ( IsInUnit ( j ) ) ;
77270: LD_VAR 0 3
77274: PPUSH
77275: CALL_OW 310
77279: PPUSH
77280: CALL_OW 121
// if GetControl ( j ) = control_remote then
77284: LD_VAR 0 3
77288: PPUSH
77289: CALL_OW 263
77293: PUSH
77294: LD_INT 2
77296: EQUAL
77297: IFFALSE 77308
// ComUnlink ( j ) ;
77299: LD_VAR 0 3
77303: PPUSH
77304: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
77308: LD_ADDR_VAR 0 9
77312: PUSH
77313: LD_VAR 0 2
77317: PPUSH
77318: LD_INT 3
77320: PPUSH
77321: CALL 86781 0 2
77325: ST_TO_ADDR
// if fac then
77326: LD_VAR 0 9
77330: IFFALSE 77426
// begin for k in fac do
77332: LD_ADDR_VAR 0 4
77336: PUSH
77337: LD_VAR 0 9
77341: PUSH
77342: FOR_IN
77343: IFFALSE 77424
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
77345: LD_ADDR_VAR 0 10
77349: PUSH
77350: LD_VAR 0 9
77354: PPUSH
77355: LD_VAR 0 3
77359: PPUSH
77360: CALL_OW 265
77364: PPUSH
77365: LD_VAR 0 3
77369: PPUSH
77370: CALL_OW 262
77374: PPUSH
77375: LD_VAR 0 3
77379: PPUSH
77380: CALL_OW 263
77384: PPUSH
77385: LD_VAR 0 3
77389: PPUSH
77390: CALL_OW 264
77394: PPUSH
77395: CALL 24184 0 5
77399: ST_TO_ADDR
// if components then
77400: LD_VAR 0 10
77404: IFFALSE 77422
// begin MC_InsertProduceList ( i , components ) ;
77406: LD_VAR 0 2
77410: PPUSH
77411: LD_VAR 0 10
77415: PPUSH
77416: CALL 86326 0 2
// break ;
77420: GO 77424
// end ; end ;
77422: GO 77342
77424: POP
77425: POP
// end ; continue ;
77426: GO 76922
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
77428: LD_VAR 0 3
77432: PPUSH
77433: LD_INT 1
77435: PPUSH
77436: CALL_OW 289
77440: PUSH
77441: LD_INT 100
77443: LESS
77444: PUSH
77445: LD_VAR 0 3
77449: PPUSH
77450: CALL_OW 314
77454: NOT
77455: AND
77456: IFFALSE 77485
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
77458: LD_VAR 0 3
77462: PPUSH
77463: LD_VAR 0 6
77467: PUSH
77468: LD_INT 2
77470: ARRAY
77471: PPUSH
77472: LD_VAR 0 6
77476: PUSH
77477: LD_INT 3
77479: ARRAY
77480: PPUSH
77481: CALL_OW 117
// break ;
77485: GO 77489
// end ;
77487: GO 76922
77489: POP
77490: POP
// end ; end ;
77491: GO 75760
77493: POP
77494: POP
// end ;
77495: LD_VAR 0 1
77499: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
77500: LD_INT 0
77502: PPUSH
77503: PPUSH
77504: PPUSH
77505: PPUSH
// if not mc_bases then
77506: LD_EXP 36
77510: NOT
77511: IFFALSE 77515
// exit ;
77513: GO 77676
// for i = 1 to mc_bases do
77515: LD_ADDR_VAR 0 2
77519: PUSH
77520: DOUBLE
77521: LD_INT 1
77523: DEC
77524: ST_TO_ADDR
77525: LD_EXP 36
77529: PUSH
77530: FOR_TO
77531: IFFALSE 77674
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
77533: LD_ADDR_VAR 0 4
77537: PUSH
77538: LD_EXP 55
77542: PUSH
77543: LD_VAR 0 2
77547: ARRAY
77548: PUSH
77549: LD_EXP 58
77553: PUSH
77554: LD_VAR 0 2
77558: ARRAY
77559: UNION
77560: PPUSH
77561: LD_INT 33
77563: PUSH
77564: LD_INT 2
77566: PUSH
77567: EMPTY
77568: LIST
77569: LIST
77570: PPUSH
77571: CALL_OW 72
77575: ST_TO_ADDR
// if tmp then
77576: LD_VAR 0 4
77580: IFFALSE 77672
// for j in tmp do
77582: LD_ADDR_VAR 0 3
77586: PUSH
77587: LD_VAR 0 4
77591: PUSH
77592: FOR_IN
77593: IFFALSE 77670
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
77595: LD_VAR 0 3
77599: PPUSH
77600: CALL_OW 312
77604: NOT
77605: PUSH
77606: LD_VAR 0 3
77610: PPUSH
77611: CALL_OW 256
77615: PUSH
77616: LD_INT 250
77618: GREATEREQUAL
77619: AND
77620: IFFALSE 77633
// Connect ( j ) else
77622: LD_VAR 0 3
77626: PPUSH
77627: CALL 29585 0 1
77631: GO 77668
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
77633: LD_VAR 0 3
77637: PPUSH
77638: CALL_OW 256
77642: PUSH
77643: LD_INT 250
77645: LESS
77646: PUSH
77647: LD_VAR 0 3
77651: PPUSH
77652: CALL_OW 312
77656: AND
77657: IFFALSE 77668
// ComUnlink ( j ) ;
77659: LD_VAR 0 3
77663: PPUSH
77664: CALL_OW 136
77668: GO 77592
77670: POP
77671: POP
// end ;
77672: GO 77530
77674: POP
77675: POP
// end ;
77676: LD_VAR 0 1
77680: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
77681: LD_INT 0
77683: PPUSH
77684: PPUSH
77685: PPUSH
77686: PPUSH
77687: PPUSH
// if not mc_bases then
77688: LD_EXP 36
77692: NOT
77693: IFFALSE 77697
// exit ;
77695: GO 78142
// for i = 1 to mc_bases do
77697: LD_ADDR_VAR 0 2
77701: PUSH
77702: DOUBLE
77703: LD_INT 1
77705: DEC
77706: ST_TO_ADDR
77707: LD_EXP 36
77711: PUSH
77712: FOR_TO
77713: IFFALSE 78140
// begin if not mc_produce [ i ] then
77715: LD_EXP 57
77719: PUSH
77720: LD_VAR 0 2
77724: ARRAY
77725: NOT
77726: IFFALSE 77730
// continue ;
77728: GO 77712
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
77730: LD_ADDR_VAR 0 5
77734: PUSH
77735: LD_EXP 36
77739: PUSH
77740: LD_VAR 0 2
77744: ARRAY
77745: PPUSH
77746: LD_INT 30
77748: PUSH
77749: LD_INT 3
77751: PUSH
77752: EMPTY
77753: LIST
77754: LIST
77755: PPUSH
77756: CALL_OW 72
77760: ST_TO_ADDR
// if not fac then
77761: LD_VAR 0 5
77765: NOT
77766: IFFALSE 77770
// continue ;
77768: GO 77712
// for j in fac do
77770: LD_ADDR_VAR 0 3
77774: PUSH
77775: LD_VAR 0 5
77779: PUSH
77780: FOR_IN
77781: IFFALSE 78136
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
77783: LD_VAR 0 3
77787: PPUSH
77788: CALL_OW 461
77792: PUSH
77793: LD_INT 2
77795: NONEQUAL
77796: PUSH
77797: LD_VAR 0 3
77801: PPUSH
77802: LD_INT 15
77804: PPUSH
77805: CALL 29245 0 2
77809: PUSH
77810: LD_INT 4
77812: ARRAY
77813: OR
77814: IFFALSE 77818
// continue ;
77816: GO 77780
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
77818: LD_VAR 0 3
77822: PPUSH
77823: LD_EXP 57
77827: PUSH
77828: LD_VAR 0 2
77832: ARRAY
77833: PUSH
77834: LD_INT 1
77836: ARRAY
77837: PUSH
77838: LD_INT 1
77840: ARRAY
77841: PPUSH
77842: LD_EXP 57
77846: PUSH
77847: LD_VAR 0 2
77851: ARRAY
77852: PUSH
77853: LD_INT 1
77855: ARRAY
77856: PUSH
77857: LD_INT 2
77859: ARRAY
77860: PPUSH
77861: LD_EXP 57
77865: PUSH
77866: LD_VAR 0 2
77870: ARRAY
77871: PUSH
77872: LD_INT 1
77874: ARRAY
77875: PUSH
77876: LD_INT 3
77878: ARRAY
77879: PPUSH
77880: LD_EXP 57
77884: PUSH
77885: LD_VAR 0 2
77889: ARRAY
77890: PUSH
77891: LD_INT 1
77893: ARRAY
77894: PUSH
77895: LD_INT 4
77897: ARRAY
77898: PPUSH
77899: CALL_OW 448
77903: PUSH
77904: LD_VAR 0 3
77908: PPUSH
77909: LD_EXP 57
77913: PUSH
77914: LD_VAR 0 2
77918: ARRAY
77919: PUSH
77920: LD_INT 1
77922: ARRAY
77923: PUSH
77924: LD_INT 1
77926: ARRAY
77927: PUSH
77928: LD_EXP 57
77932: PUSH
77933: LD_VAR 0 2
77937: ARRAY
77938: PUSH
77939: LD_INT 1
77941: ARRAY
77942: PUSH
77943: LD_INT 2
77945: ARRAY
77946: PUSH
77947: LD_EXP 57
77951: PUSH
77952: LD_VAR 0 2
77956: ARRAY
77957: PUSH
77958: LD_INT 1
77960: ARRAY
77961: PUSH
77962: LD_INT 3
77964: ARRAY
77965: PUSH
77966: LD_EXP 57
77970: PUSH
77971: LD_VAR 0 2
77975: ARRAY
77976: PUSH
77977: LD_INT 1
77979: ARRAY
77980: PUSH
77981: LD_INT 4
77983: ARRAY
77984: PUSH
77985: EMPTY
77986: LIST
77987: LIST
77988: LIST
77989: LIST
77990: PPUSH
77991: CALL 32916 0 2
77995: AND
77996: IFFALSE 78134
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
77998: LD_VAR 0 3
78002: PPUSH
78003: LD_EXP 57
78007: PUSH
78008: LD_VAR 0 2
78012: ARRAY
78013: PUSH
78014: LD_INT 1
78016: ARRAY
78017: PUSH
78018: LD_INT 1
78020: ARRAY
78021: PPUSH
78022: LD_EXP 57
78026: PUSH
78027: LD_VAR 0 2
78031: ARRAY
78032: PUSH
78033: LD_INT 1
78035: ARRAY
78036: PUSH
78037: LD_INT 2
78039: ARRAY
78040: PPUSH
78041: LD_EXP 57
78045: PUSH
78046: LD_VAR 0 2
78050: ARRAY
78051: PUSH
78052: LD_INT 1
78054: ARRAY
78055: PUSH
78056: LD_INT 3
78058: ARRAY
78059: PPUSH
78060: LD_EXP 57
78064: PUSH
78065: LD_VAR 0 2
78069: ARRAY
78070: PUSH
78071: LD_INT 1
78073: ARRAY
78074: PUSH
78075: LD_INT 4
78077: ARRAY
78078: PPUSH
78079: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
78083: LD_ADDR_VAR 0 4
78087: PUSH
78088: LD_EXP 57
78092: PUSH
78093: LD_VAR 0 2
78097: ARRAY
78098: PPUSH
78099: LD_INT 1
78101: PPUSH
78102: CALL_OW 3
78106: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
78107: LD_ADDR_EXP 57
78111: PUSH
78112: LD_EXP 57
78116: PPUSH
78117: LD_VAR 0 2
78121: PPUSH
78122: LD_VAR 0 4
78126: PPUSH
78127: CALL_OW 1
78131: ST_TO_ADDR
// break ;
78132: GO 78136
// end ; end ;
78134: GO 77780
78136: POP
78137: POP
// end ;
78138: GO 77712
78140: POP
78141: POP
// end ;
78142: LD_VAR 0 1
78146: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
78147: LD_INT 0
78149: PPUSH
78150: PPUSH
78151: PPUSH
// if not mc_bases then
78152: LD_EXP 36
78156: NOT
78157: IFFALSE 78161
// exit ;
78159: GO 78250
// for i = 1 to mc_bases do
78161: LD_ADDR_VAR 0 2
78165: PUSH
78166: DOUBLE
78167: LD_INT 1
78169: DEC
78170: ST_TO_ADDR
78171: LD_EXP 36
78175: PUSH
78176: FOR_TO
78177: IFFALSE 78248
// begin if mc_attack [ i ] then
78179: LD_EXP 56
78183: PUSH
78184: LD_VAR 0 2
78188: ARRAY
78189: IFFALSE 78246
// begin tmp := mc_attack [ i ] [ 1 ] ;
78191: LD_ADDR_VAR 0 3
78195: PUSH
78196: LD_EXP 56
78200: PUSH
78201: LD_VAR 0 2
78205: ARRAY
78206: PUSH
78207: LD_INT 1
78209: ARRAY
78210: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
78211: LD_ADDR_EXP 56
78215: PUSH
78216: LD_EXP 56
78220: PPUSH
78221: LD_VAR 0 2
78225: PPUSH
78226: EMPTY
78227: PPUSH
78228: CALL_OW 1
78232: ST_TO_ADDR
// Attack ( tmp ) ;
78233: LD_VAR 0 3
78237: PPUSH
78238: CALL 55106 0 1
// exit ;
78242: POP
78243: POP
78244: GO 78250
// end ; end ;
78246: GO 78176
78248: POP
78249: POP
// end ;
78250: LD_VAR 0 1
78254: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
78255: LD_INT 0
78257: PPUSH
78258: PPUSH
78259: PPUSH
78260: PPUSH
78261: PPUSH
78262: PPUSH
78263: PPUSH
// if not mc_bases then
78264: LD_EXP 36
78268: NOT
78269: IFFALSE 78273
// exit ;
78271: GO 78855
// for i = 1 to mc_bases do
78273: LD_ADDR_VAR 0 2
78277: PUSH
78278: DOUBLE
78279: LD_INT 1
78281: DEC
78282: ST_TO_ADDR
78283: LD_EXP 36
78287: PUSH
78288: FOR_TO
78289: IFFALSE 78853
// begin if not mc_bases [ i ] then
78291: LD_EXP 36
78295: PUSH
78296: LD_VAR 0 2
78300: ARRAY
78301: NOT
78302: IFFALSE 78306
// continue ;
78304: GO 78288
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
78306: LD_ADDR_VAR 0 7
78310: PUSH
78311: LD_EXP 36
78315: PUSH
78316: LD_VAR 0 2
78320: ARRAY
78321: PUSH
78322: LD_INT 1
78324: ARRAY
78325: PPUSH
78326: CALL 23488 0 1
78330: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
78331: LD_ADDR_EXP 59
78335: PUSH
78336: LD_EXP 59
78340: PPUSH
78341: LD_VAR 0 2
78345: PPUSH
78346: LD_EXP 36
78350: PUSH
78351: LD_VAR 0 2
78355: ARRAY
78356: PUSH
78357: LD_INT 1
78359: ARRAY
78360: PPUSH
78361: CALL_OW 255
78365: PPUSH
78366: LD_EXP 61
78370: PUSH
78371: LD_VAR 0 2
78375: ARRAY
78376: PPUSH
78377: CALL 21042 0 2
78381: PPUSH
78382: CALL_OW 1
78386: ST_TO_ADDR
// if not mc_scan [ i ] then
78387: LD_EXP 59
78391: PUSH
78392: LD_VAR 0 2
78396: ARRAY
78397: NOT
78398: IFFALSE 78553
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
78400: LD_ADDR_VAR 0 4
78404: PUSH
78405: LD_EXP 36
78409: PUSH
78410: LD_VAR 0 2
78414: ARRAY
78415: PPUSH
78416: LD_INT 2
78418: PUSH
78419: LD_INT 25
78421: PUSH
78422: LD_INT 5
78424: PUSH
78425: EMPTY
78426: LIST
78427: LIST
78428: PUSH
78429: LD_INT 25
78431: PUSH
78432: LD_INT 8
78434: PUSH
78435: EMPTY
78436: LIST
78437: LIST
78438: PUSH
78439: LD_INT 25
78441: PUSH
78442: LD_INT 9
78444: PUSH
78445: EMPTY
78446: LIST
78447: LIST
78448: PUSH
78449: EMPTY
78450: LIST
78451: LIST
78452: LIST
78453: LIST
78454: PPUSH
78455: CALL_OW 72
78459: ST_TO_ADDR
// if not tmp then
78460: LD_VAR 0 4
78464: NOT
78465: IFFALSE 78469
// continue ;
78467: GO 78288
// for j in tmp do
78469: LD_ADDR_VAR 0 3
78473: PUSH
78474: LD_VAR 0 4
78478: PUSH
78479: FOR_IN
78480: IFFALSE 78551
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
78482: LD_VAR 0 3
78486: PPUSH
78487: CALL_OW 310
78491: PPUSH
78492: CALL_OW 266
78496: PUSH
78497: LD_INT 5
78499: EQUAL
78500: PUSH
78501: LD_VAR 0 3
78505: PPUSH
78506: CALL_OW 257
78510: PUSH
78511: LD_INT 1
78513: EQUAL
78514: AND
78515: PUSH
78516: LD_VAR 0 3
78520: PPUSH
78521: CALL_OW 459
78525: NOT
78526: AND
78527: PUSH
78528: LD_VAR 0 7
78532: AND
78533: IFFALSE 78549
// ComChangeProfession ( j , class ) ;
78535: LD_VAR 0 3
78539: PPUSH
78540: LD_VAR 0 7
78544: PPUSH
78545: CALL_OW 123
78549: GO 78479
78551: POP
78552: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
78553: LD_EXP 59
78557: PUSH
78558: LD_VAR 0 2
78562: ARRAY
78563: PUSH
78564: LD_EXP 58
78568: PUSH
78569: LD_VAR 0 2
78573: ARRAY
78574: NOT
78575: AND
78576: PUSH
78577: LD_EXP 36
78581: PUSH
78582: LD_VAR 0 2
78586: ARRAY
78587: PPUSH
78588: LD_INT 30
78590: PUSH
78591: LD_INT 32
78593: PUSH
78594: EMPTY
78595: LIST
78596: LIST
78597: PPUSH
78598: CALL_OW 72
78602: NOT
78603: AND
78604: PUSH
78605: LD_EXP 36
78609: PUSH
78610: LD_VAR 0 2
78614: ARRAY
78615: PPUSH
78616: LD_INT 2
78618: PUSH
78619: LD_INT 30
78621: PUSH
78622: LD_INT 4
78624: PUSH
78625: EMPTY
78626: LIST
78627: LIST
78628: PUSH
78629: LD_INT 30
78631: PUSH
78632: LD_INT 5
78634: PUSH
78635: EMPTY
78636: LIST
78637: LIST
78638: PUSH
78639: EMPTY
78640: LIST
78641: LIST
78642: LIST
78643: PPUSH
78644: CALL_OW 72
78648: NOT
78649: AND
78650: IFFALSE 78782
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
78652: LD_ADDR_VAR 0 4
78656: PUSH
78657: LD_EXP 36
78661: PUSH
78662: LD_VAR 0 2
78666: ARRAY
78667: PPUSH
78668: LD_INT 2
78670: PUSH
78671: LD_INT 25
78673: PUSH
78674: LD_INT 1
78676: PUSH
78677: EMPTY
78678: LIST
78679: LIST
78680: PUSH
78681: LD_INT 25
78683: PUSH
78684: LD_INT 5
78686: PUSH
78687: EMPTY
78688: LIST
78689: LIST
78690: PUSH
78691: LD_INT 25
78693: PUSH
78694: LD_INT 8
78696: PUSH
78697: EMPTY
78698: LIST
78699: LIST
78700: PUSH
78701: LD_INT 25
78703: PUSH
78704: LD_INT 9
78706: PUSH
78707: EMPTY
78708: LIST
78709: LIST
78710: PUSH
78711: EMPTY
78712: LIST
78713: LIST
78714: LIST
78715: LIST
78716: LIST
78717: PPUSH
78718: CALL_OW 72
78722: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
78723: LD_ADDR_VAR 0 4
78727: PUSH
78728: LD_VAR 0 4
78732: PUSH
78733: LD_VAR 0 4
78737: PPUSH
78738: LD_INT 18
78740: PPUSH
78741: CALL 59922 0 2
78745: DIFF
78746: ST_TO_ADDR
// if tmp then
78747: LD_VAR 0 4
78751: IFFALSE 78782
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
78753: LD_VAR 0 2
78757: PPUSH
78758: LD_VAR 0 4
78762: PPUSH
78763: LD_EXP 61
78767: PUSH
78768: LD_VAR 0 2
78772: ARRAY
78773: PPUSH
78774: CALL 21077 0 3
// exit ;
78778: POP
78779: POP
78780: GO 78855
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
78782: LD_EXP 59
78786: PUSH
78787: LD_VAR 0 2
78791: ARRAY
78792: PUSH
78793: LD_EXP 58
78797: PUSH
78798: LD_VAR 0 2
78802: ARRAY
78803: AND
78804: IFFALSE 78851
// begin tmp := mc_defender [ i ] ;
78806: LD_ADDR_VAR 0 4
78810: PUSH
78811: LD_EXP 58
78815: PUSH
78816: LD_VAR 0 2
78820: ARRAY
78821: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
78822: LD_VAR 0 2
78826: PPUSH
78827: LD_VAR 0 4
78831: PPUSH
78832: LD_EXP 59
78836: PUSH
78837: LD_VAR 0 2
78841: ARRAY
78842: PPUSH
78843: CALL 21638 0 3
// exit ;
78847: POP
78848: POP
78849: GO 78855
// end ; end ;
78851: GO 78288
78853: POP
78854: POP
// end ;
78855: LD_VAR 0 1
78859: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
78860: LD_INT 0
78862: PPUSH
78863: PPUSH
78864: PPUSH
78865: PPUSH
78866: PPUSH
78867: PPUSH
78868: PPUSH
78869: PPUSH
78870: PPUSH
78871: PPUSH
78872: PPUSH
// if not mc_bases then
78873: LD_EXP 36
78877: NOT
78878: IFFALSE 78882
// exit ;
78880: GO 79969
// for i = 1 to mc_bases do
78882: LD_ADDR_VAR 0 2
78886: PUSH
78887: DOUBLE
78888: LD_INT 1
78890: DEC
78891: ST_TO_ADDR
78892: LD_EXP 36
78896: PUSH
78897: FOR_TO
78898: IFFALSE 79967
// begin tmp := mc_lab [ i ] ;
78900: LD_ADDR_VAR 0 6
78904: PUSH
78905: LD_EXP 69
78909: PUSH
78910: LD_VAR 0 2
78914: ARRAY
78915: ST_TO_ADDR
// if not tmp then
78916: LD_VAR 0 6
78920: NOT
78921: IFFALSE 78925
// continue ;
78923: GO 78897
// idle_lab := 0 ;
78925: LD_ADDR_VAR 0 11
78929: PUSH
78930: LD_INT 0
78932: ST_TO_ADDR
// for j in tmp do
78933: LD_ADDR_VAR 0 3
78937: PUSH
78938: LD_VAR 0 6
78942: PUSH
78943: FOR_IN
78944: IFFALSE 79963
// begin researching := false ;
78946: LD_ADDR_VAR 0 10
78950: PUSH
78951: LD_INT 0
78953: ST_TO_ADDR
// side := GetSide ( j ) ;
78954: LD_ADDR_VAR 0 4
78958: PUSH
78959: LD_VAR 0 3
78963: PPUSH
78964: CALL_OW 255
78968: ST_TO_ADDR
// if not mc_tech [ side ] then
78969: LD_EXP 63
78973: PUSH
78974: LD_VAR 0 4
78978: ARRAY
78979: NOT
78980: IFFALSE 78984
// continue ;
78982: GO 78943
// if BuildingStatus ( j ) = bs_idle then
78984: LD_VAR 0 3
78988: PPUSH
78989: CALL_OW 461
78993: PUSH
78994: LD_INT 2
78996: EQUAL
78997: IFFALSE 79185
// begin if idle_lab and UnitsInside ( j ) < 6 then
78999: LD_VAR 0 11
79003: PUSH
79004: LD_VAR 0 3
79008: PPUSH
79009: CALL_OW 313
79013: PUSH
79014: LD_INT 6
79016: LESS
79017: AND
79018: IFFALSE 79089
// begin tmp2 := UnitsInside ( idle_lab ) ;
79020: LD_ADDR_VAR 0 9
79024: PUSH
79025: LD_VAR 0 11
79029: PPUSH
79030: CALL_OW 313
79034: ST_TO_ADDR
// if tmp2 then
79035: LD_VAR 0 9
79039: IFFALSE 79081
// for x in tmp2 do
79041: LD_ADDR_VAR 0 7
79045: PUSH
79046: LD_VAR 0 9
79050: PUSH
79051: FOR_IN
79052: IFFALSE 79079
// begin ComExitBuilding ( x ) ;
79054: LD_VAR 0 7
79058: PPUSH
79059: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
79063: LD_VAR 0 7
79067: PPUSH
79068: LD_VAR 0 3
79072: PPUSH
79073: CALL_OW 180
// end ;
79077: GO 79051
79079: POP
79080: POP
// idle_lab := 0 ;
79081: LD_ADDR_VAR 0 11
79085: PUSH
79086: LD_INT 0
79088: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
79089: LD_ADDR_VAR 0 5
79093: PUSH
79094: LD_EXP 63
79098: PUSH
79099: LD_VAR 0 4
79103: ARRAY
79104: PUSH
79105: FOR_IN
79106: IFFALSE 79166
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
79108: LD_VAR 0 3
79112: PPUSH
79113: LD_VAR 0 5
79117: PPUSH
79118: CALL_OW 430
79122: PUSH
79123: LD_VAR 0 4
79127: PPUSH
79128: LD_VAR 0 5
79132: PPUSH
79133: CALL 20147 0 2
79137: AND
79138: IFFALSE 79164
// begin researching := true ;
79140: LD_ADDR_VAR 0 10
79144: PUSH
79145: LD_INT 1
79147: ST_TO_ADDR
// ComResearch ( j , t ) ;
79148: LD_VAR 0 3
79152: PPUSH
79153: LD_VAR 0 5
79157: PPUSH
79158: CALL_OW 124
// break ;
79162: GO 79166
// end ;
79164: GO 79105
79166: POP
79167: POP
// if not researching then
79168: LD_VAR 0 10
79172: NOT
79173: IFFALSE 79185
// idle_lab := j ;
79175: LD_ADDR_VAR 0 11
79179: PUSH
79180: LD_VAR 0 3
79184: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
79185: LD_VAR 0 3
79189: PPUSH
79190: CALL_OW 461
79194: PUSH
79195: LD_INT 10
79197: EQUAL
79198: IFFALSE 79786
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
79200: LD_EXP 65
79204: PUSH
79205: LD_VAR 0 2
79209: ARRAY
79210: NOT
79211: PUSH
79212: LD_EXP 66
79216: PUSH
79217: LD_VAR 0 2
79221: ARRAY
79222: NOT
79223: AND
79224: PUSH
79225: LD_EXP 63
79229: PUSH
79230: LD_VAR 0 4
79234: ARRAY
79235: PUSH
79236: LD_INT 1
79238: GREATER
79239: AND
79240: IFFALSE 79371
// begin ComCancel ( j ) ;
79242: LD_VAR 0 3
79246: PPUSH
79247: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
79251: LD_ADDR_EXP 63
79255: PUSH
79256: LD_EXP 63
79260: PPUSH
79261: LD_VAR 0 4
79265: PPUSH
79266: LD_EXP 63
79270: PUSH
79271: LD_VAR 0 4
79275: ARRAY
79276: PPUSH
79277: LD_EXP 63
79281: PUSH
79282: LD_VAR 0 4
79286: ARRAY
79287: PUSH
79288: LD_INT 1
79290: MINUS
79291: PPUSH
79292: LD_EXP 63
79296: PUSH
79297: LD_VAR 0 4
79301: ARRAY
79302: PPUSH
79303: LD_INT 0
79305: PPUSH
79306: CALL 26070 0 4
79310: PPUSH
79311: CALL_OW 1
79315: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
79316: LD_ADDR_EXP 63
79320: PUSH
79321: LD_EXP 63
79325: PPUSH
79326: LD_VAR 0 4
79330: PPUSH
79331: LD_EXP 63
79335: PUSH
79336: LD_VAR 0 4
79340: ARRAY
79341: PPUSH
79342: LD_EXP 63
79346: PUSH
79347: LD_VAR 0 4
79351: ARRAY
79352: PPUSH
79353: LD_INT 1
79355: PPUSH
79356: LD_INT 0
79358: PPUSH
79359: CALL 26070 0 4
79363: PPUSH
79364: CALL_OW 1
79368: ST_TO_ADDR
// continue ;
79369: GO 78943
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
79371: LD_EXP 65
79375: PUSH
79376: LD_VAR 0 2
79380: ARRAY
79381: PUSH
79382: LD_EXP 66
79386: PUSH
79387: LD_VAR 0 2
79391: ARRAY
79392: NOT
79393: AND
79394: IFFALSE 79521
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
79396: LD_ADDR_EXP 66
79400: PUSH
79401: LD_EXP 66
79405: PPUSH
79406: LD_VAR 0 2
79410: PUSH
79411: LD_EXP 66
79415: PUSH
79416: LD_VAR 0 2
79420: ARRAY
79421: PUSH
79422: LD_INT 1
79424: PLUS
79425: PUSH
79426: EMPTY
79427: LIST
79428: LIST
79429: PPUSH
79430: LD_EXP 65
79434: PUSH
79435: LD_VAR 0 2
79439: ARRAY
79440: PUSH
79441: LD_INT 1
79443: ARRAY
79444: PPUSH
79445: CALL 26652 0 3
79449: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
79450: LD_EXP 65
79454: PUSH
79455: LD_VAR 0 2
79459: ARRAY
79460: PUSH
79461: LD_INT 1
79463: ARRAY
79464: PPUSH
79465: LD_INT 112
79467: PPUSH
79468: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
79472: LD_ADDR_VAR 0 9
79476: PUSH
79477: LD_EXP 65
79481: PUSH
79482: LD_VAR 0 2
79486: ARRAY
79487: PPUSH
79488: LD_INT 1
79490: PPUSH
79491: CALL_OW 3
79495: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
79496: LD_ADDR_EXP 65
79500: PUSH
79501: LD_EXP 65
79505: PPUSH
79506: LD_VAR 0 2
79510: PPUSH
79511: LD_VAR 0 9
79515: PPUSH
79516: CALL_OW 1
79520: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
79521: LD_EXP 65
79525: PUSH
79526: LD_VAR 0 2
79530: ARRAY
79531: PUSH
79532: LD_EXP 66
79536: PUSH
79537: LD_VAR 0 2
79541: ARRAY
79542: AND
79543: PUSH
79544: LD_EXP 66
79548: PUSH
79549: LD_VAR 0 2
79553: ARRAY
79554: PUSH
79555: LD_INT 1
79557: ARRAY
79558: PPUSH
79559: CALL_OW 310
79563: NOT
79564: AND
79565: PUSH
79566: LD_VAR 0 3
79570: PPUSH
79571: CALL_OW 313
79575: PUSH
79576: LD_INT 6
79578: EQUAL
79579: AND
79580: IFFALSE 79636
// begin tmp2 := UnitsInside ( j ) ;
79582: LD_ADDR_VAR 0 9
79586: PUSH
79587: LD_VAR 0 3
79591: PPUSH
79592: CALL_OW 313
79596: ST_TO_ADDR
// if tmp2 = 6 then
79597: LD_VAR 0 9
79601: PUSH
79602: LD_INT 6
79604: EQUAL
79605: IFFALSE 79636
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
79607: LD_VAR 0 9
79611: PUSH
79612: LD_INT 1
79614: ARRAY
79615: PPUSH
79616: LD_INT 112
79618: PPUSH
79619: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
79623: LD_VAR 0 9
79627: PUSH
79628: LD_INT 1
79630: ARRAY
79631: PPUSH
79632: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
79636: LD_EXP 66
79640: PUSH
79641: LD_VAR 0 2
79645: ARRAY
79646: PUSH
79647: LD_EXP 66
79651: PUSH
79652: LD_VAR 0 2
79656: ARRAY
79657: PUSH
79658: LD_INT 1
79660: ARRAY
79661: PPUSH
79662: CALL_OW 314
79666: NOT
79667: AND
79668: PUSH
79669: LD_EXP 66
79673: PUSH
79674: LD_VAR 0 2
79678: ARRAY
79679: PUSH
79680: LD_INT 1
79682: ARRAY
79683: PPUSH
79684: CALL_OW 310
79688: NOT
79689: AND
79690: IFFALSE 79716
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
79692: LD_EXP 66
79696: PUSH
79697: LD_VAR 0 2
79701: ARRAY
79702: PUSH
79703: LD_INT 1
79705: ARRAY
79706: PPUSH
79707: LD_VAR 0 3
79711: PPUSH
79712: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
79716: LD_EXP 66
79720: PUSH
79721: LD_VAR 0 2
79725: ARRAY
79726: PUSH
79727: LD_INT 1
79729: ARRAY
79730: PPUSH
79731: CALL_OW 310
79735: PUSH
79736: LD_EXP 66
79740: PUSH
79741: LD_VAR 0 2
79745: ARRAY
79746: PUSH
79747: LD_INT 1
79749: ARRAY
79750: PPUSH
79751: CALL_OW 310
79755: PPUSH
79756: CALL_OW 461
79760: PUSH
79761: LD_INT 3
79763: NONEQUAL
79764: AND
79765: IFFALSE 79786
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
79767: LD_EXP 66
79771: PUSH
79772: LD_VAR 0 2
79776: ARRAY
79777: PUSH
79778: LD_INT 1
79780: ARRAY
79781: PPUSH
79782: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
79786: LD_VAR 0 3
79790: PPUSH
79791: CALL_OW 461
79795: PUSH
79796: LD_INT 6
79798: EQUAL
79799: PUSH
79800: LD_VAR 0 6
79804: PUSH
79805: LD_INT 1
79807: GREATER
79808: AND
79809: IFFALSE 79961
// begin sci := [ ] ;
79811: LD_ADDR_VAR 0 8
79815: PUSH
79816: EMPTY
79817: ST_TO_ADDR
// for x in ( tmp diff j ) do
79818: LD_ADDR_VAR 0 7
79822: PUSH
79823: LD_VAR 0 6
79827: PUSH
79828: LD_VAR 0 3
79832: DIFF
79833: PUSH
79834: FOR_IN
79835: IFFALSE 79887
// begin if sci = 6 then
79837: LD_VAR 0 8
79841: PUSH
79842: LD_INT 6
79844: EQUAL
79845: IFFALSE 79849
// break ;
79847: GO 79887
// if BuildingStatus ( x ) = bs_idle then
79849: LD_VAR 0 7
79853: PPUSH
79854: CALL_OW 461
79858: PUSH
79859: LD_INT 2
79861: EQUAL
79862: IFFALSE 79885
// sci := sci ^ UnitsInside ( x ) ;
79864: LD_ADDR_VAR 0 8
79868: PUSH
79869: LD_VAR 0 8
79873: PUSH
79874: LD_VAR 0 7
79878: PPUSH
79879: CALL_OW 313
79883: ADD
79884: ST_TO_ADDR
// end ;
79885: GO 79834
79887: POP
79888: POP
// if not sci then
79889: LD_VAR 0 8
79893: NOT
79894: IFFALSE 79898
// continue ;
79896: GO 78943
// for x in sci do
79898: LD_ADDR_VAR 0 7
79902: PUSH
79903: LD_VAR 0 8
79907: PUSH
79908: FOR_IN
79909: IFFALSE 79959
// if IsInUnit ( x ) and not HasTask ( x ) then
79911: LD_VAR 0 7
79915: PPUSH
79916: CALL_OW 310
79920: PUSH
79921: LD_VAR 0 7
79925: PPUSH
79926: CALL_OW 314
79930: NOT
79931: AND
79932: IFFALSE 79957
// begin ComExitBuilding ( x ) ;
79934: LD_VAR 0 7
79938: PPUSH
79939: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
79943: LD_VAR 0 7
79947: PPUSH
79948: LD_VAR 0 3
79952: PPUSH
79953: CALL_OW 180
// end ;
79957: GO 79908
79959: POP
79960: POP
// end ; end ;
79961: GO 78943
79963: POP
79964: POP
// end ;
79965: GO 78897
79967: POP
79968: POP
// end ;
79969: LD_VAR 0 1
79973: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
79974: LD_INT 0
79976: PPUSH
79977: PPUSH
// if not mc_bases then
79978: LD_EXP 36
79982: NOT
79983: IFFALSE 79987
// exit ;
79985: GO 80068
// for i = 1 to mc_bases do
79987: LD_ADDR_VAR 0 2
79991: PUSH
79992: DOUBLE
79993: LD_INT 1
79995: DEC
79996: ST_TO_ADDR
79997: LD_EXP 36
80001: PUSH
80002: FOR_TO
80003: IFFALSE 80066
// if mc_mines [ i ] and mc_miners [ i ] then
80005: LD_EXP 49
80009: PUSH
80010: LD_VAR 0 2
80014: ARRAY
80015: PUSH
80016: LD_EXP 50
80020: PUSH
80021: LD_VAR 0 2
80025: ARRAY
80026: AND
80027: IFFALSE 80064
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
80029: LD_EXP 50
80033: PUSH
80034: LD_VAR 0 2
80038: ARRAY
80039: PUSH
80040: LD_INT 1
80042: ARRAY
80043: PPUSH
80044: CALL_OW 255
80048: PPUSH
80049: LD_EXP 49
80053: PUSH
80054: LD_VAR 0 2
80058: ARRAY
80059: PPUSH
80060: CALL 23641 0 2
80064: GO 80002
80066: POP
80067: POP
// end ;
80068: LD_VAR 0 1
80072: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
80073: LD_INT 0
80075: PPUSH
80076: PPUSH
80077: PPUSH
80078: PPUSH
80079: PPUSH
80080: PPUSH
80081: PPUSH
80082: PPUSH
// if not mc_bases or not mc_parking then
80083: LD_EXP 36
80087: NOT
80088: PUSH
80089: LD_EXP 60
80093: NOT
80094: OR
80095: IFFALSE 80099
// exit ;
80097: GO 80798
// for i = 1 to mc_bases do
80099: LD_ADDR_VAR 0 2
80103: PUSH
80104: DOUBLE
80105: LD_INT 1
80107: DEC
80108: ST_TO_ADDR
80109: LD_EXP 36
80113: PUSH
80114: FOR_TO
80115: IFFALSE 80796
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
80117: LD_EXP 36
80121: PUSH
80122: LD_VAR 0 2
80126: ARRAY
80127: NOT
80128: PUSH
80129: LD_EXP 60
80133: PUSH
80134: LD_VAR 0 2
80138: ARRAY
80139: NOT
80140: OR
80141: IFFALSE 80145
// continue ;
80143: GO 80114
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
80145: LD_ADDR_VAR 0 5
80149: PUSH
80150: LD_EXP 36
80154: PUSH
80155: LD_VAR 0 2
80159: ARRAY
80160: PUSH
80161: LD_INT 1
80163: ARRAY
80164: PPUSH
80165: CALL_OW 255
80169: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
80170: LD_ADDR_VAR 0 6
80174: PUSH
80175: LD_EXP 36
80179: PUSH
80180: LD_VAR 0 2
80184: ARRAY
80185: PPUSH
80186: LD_INT 30
80188: PUSH
80189: LD_INT 3
80191: PUSH
80192: EMPTY
80193: LIST
80194: LIST
80195: PPUSH
80196: CALL_OW 72
80200: ST_TO_ADDR
// if not fac then
80201: LD_VAR 0 6
80205: NOT
80206: IFFALSE 80257
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
80208: LD_ADDR_VAR 0 6
80212: PUSH
80213: LD_EXP 36
80217: PUSH
80218: LD_VAR 0 2
80222: ARRAY
80223: PPUSH
80224: LD_INT 2
80226: PUSH
80227: LD_INT 30
80229: PUSH
80230: LD_INT 0
80232: PUSH
80233: EMPTY
80234: LIST
80235: LIST
80236: PUSH
80237: LD_INT 30
80239: PUSH
80240: LD_INT 1
80242: PUSH
80243: EMPTY
80244: LIST
80245: LIST
80246: PUSH
80247: EMPTY
80248: LIST
80249: LIST
80250: LIST
80251: PPUSH
80252: CALL_OW 72
80256: ST_TO_ADDR
// if not fac then
80257: LD_VAR 0 6
80261: NOT
80262: IFFALSE 80266
// continue ;
80264: GO 80114
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
80266: LD_ADDR_VAR 0 7
80270: PUSH
80271: LD_EXP 60
80275: PUSH
80276: LD_VAR 0 2
80280: ARRAY
80281: PPUSH
80282: LD_INT 22
80284: PUSH
80285: LD_VAR 0 5
80289: PUSH
80290: EMPTY
80291: LIST
80292: LIST
80293: PUSH
80294: LD_INT 21
80296: PUSH
80297: LD_INT 2
80299: PUSH
80300: EMPTY
80301: LIST
80302: LIST
80303: PUSH
80304: LD_INT 3
80306: PUSH
80307: LD_INT 24
80309: PUSH
80310: LD_INT 1000
80312: PUSH
80313: EMPTY
80314: LIST
80315: LIST
80316: PUSH
80317: EMPTY
80318: LIST
80319: LIST
80320: PUSH
80321: EMPTY
80322: LIST
80323: LIST
80324: LIST
80325: PPUSH
80326: CALL_OW 70
80330: ST_TO_ADDR
// for j in fac do
80331: LD_ADDR_VAR 0 3
80335: PUSH
80336: LD_VAR 0 6
80340: PUSH
80341: FOR_IN
80342: IFFALSE 80423
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
80344: LD_ADDR_VAR 0 7
80348: PUSH
80349: LD_VAR 0 7
80353: PUSH
80354: LD_INT 22
80356: PUSH
80357: LD_VAR 0 5
80361: PUSH
80362: EMPTY
80363: LIST
80364: LIST
80365: PUSH
80366: LD_INT 91
80368: PUSH
80369: LD_VAR 0 3
80373: PUSH
80374: LD_INT 15
80376: PUSH
80377: EMPTY
80378: LIST
80379: LIST
80380: LIST
80381: PUSH
80382: LD_INT 21
80384: PUSH
80385: LD_INT 2
80387: PUSH
80388: EMPTY
80389: LIST
80390: LIST
80391: PUSH
80392: LD_INT 3
80394: PUSH
80395: LD_INT 24
80397: PUSH
80398: LD_INT 1000
80400: PUSH
80401: EMPTY
80402: LIST
80403: LIST
80404: PUSH
80405: EMPTY
80406: LIST
80407: LIST
80408: PUSH
80409: EMPTY
80410: LIST
80411: LIST
80412: LIST
80413: LIST
80414: PPUSH
80415: CALL_OW 69
80419: UNION
80420: ST_TO_ADDR
80421: GO 80341
80423: POP
80424: POP
// if not vehs then
80425: LD_VAR 0 7
80429: NOT
80430: IFFALSE 80456
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
80432: LD_ADDR_EXP 48
80436: PUSH
80437: LD_EXP 48
80441: PPUSH
80442: LD_VAR 0 2
80446: PPUSH
80447: EMPTY
80448: PPUSH
80449: CALL_OW 1
80453: ST_TO_ADDR
// continue ;
80454: GO 80114
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
80456: LD_ADDR_VAR 0 8
80460: PUSH
80461: LD_EXP 36
80465: PUSH
80466: LD_VAR 0 2
80470: ARRAY
80471: PPUSH
80472: LD_INT 30
80474: PUSH
80475: LD_INT 3
80477: PUSH
80478: EMPTY
80479: LIST
80480: LIST
80481: PPUSH
80482: CALL_OW 72
80486: ST_TO_ADDR
// if tmp then
80487: LD_VAR 0 8
80491: IFFALSE 80594
// begin for j in tmp do
80493: LD_ADDR_VAR 0 3
80497: PUSH
80498: LD_VAR 0 8
80502: PUSH
80503: FOR_IN
80504: IFFALSE 80592
// for k in UnitsInside ( j ) do
80506: LD_ADDR_VAR 0 4
80510: PUSH
80511: LD_VAR 0 3
80515: PPUSH
80516: CALL_OW 313
80520: PUSH
80521: FOR_IN
80522: IFFALSE 80588
// if k then
80524: LD_VAR 0 4
80528: IFFALSE 80586
// if not k in mc_repair_vehicle [ i ] then
80530: LD_VAR 0 4
80534: PUSH
80535: LD_EXP 48
80539: PUSH
80540: LD_VAR 0 2
80544: ARRAY
80545: IN
80546: NOT
80547: IFFALSE 80586
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
80549: LD_ADDR_EXP 48
80553: PUSH
80554: LD_EXP 48
80558: PPUSH
80559: LD_VAR 0 2
80563: PPUSH
80564: LD_EXP 48
80568: PUSH
80569: LD_VAR 0 2
80573: ARRAY
80574: PUSH
80575: LD_VAR 0 4
80579: UNION
80580: PPUSH
80581: CALL_OW 1
80585: ST_TO_ADDR
80586: GO 80521
80588: POP
80589: POP
80590: GO 80503
80592: POP
80593: POP
// end ; if not mc_repair_vehicle [ i ] then
80594: LD_EXP 48
80598: PUSH
80599: LD_VAR 0 2
80603: ARRAY
80604: NOT
80605: IFFALSE 80609
// continue ;
80607: GO 80114
// for j in mc_repair_vehicle [ i ] do
80609: LD_ADDR_VAR 0 3
80613: PUSH
80614: LD_EXP 48
80618: PUSH
80619: LD_VAR 0 2
80623: ARRAY
80624: PUSH
80625: FOR_IN
80626: IFFALSE 80792
// begin if GetClass ( j ) <> 3 then
80628: LD_VAR 0 3
80632: PPUSH
80633: CALL_OW 257
80637: PUSH
80638: LD_INT 3
80640: NONEQUAL
80641: IFFALSE 80682
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
80643: LD_ADDR_EXP 48
80647: PUSH
80648: LD_EXP 48
80652: PPUSH
80653: LD_VAR 0 2
80657: PPUSH
80658: LD_EXP 48
80662: PUSH
80663: LD_VAR 0 2
80667: ARRAY
80668: PUSH
80669: LD_VAR 0 3
80673: DIFF
80674: PPUSH
80675: CALL_OW 1
80679: ST_TO_ADDR
// continue ;
80680: GO 80625
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
80682: LD_VAR 0 3
80686: PPUSH
80687: CALL_OW 311
80691: NOT
80692: PUSH
80693: LD_VAR 0 3
80697: PUSH
80698: LD_EXP 39
80702: PUSH
80703: LD_VAR 0 2
80707: ARRAY
80708: PUSH
80709: LD_INT 1
80711: ARRAY
80712: IN
80713: NOT
80714: AND
80715: PUSH
80716: LD_VAR 0 3
80720: PUSH
80721: LD_EXP 39
80725: PUSH
80726: LD_VAR 0 2
80730: ARRAY
80731: PUSH
80732: LD_INT 2
80734: ARRAY
80735: IN
80736: NOT
80737: AND
80738: IFFALSE 80790
// begin if IsInUnit ( j ) then
80740: LD_VAR 0 3
80744: PPUSH
80745: CALL_OW 310
80749: IFFALSE 80760
// ComExitBuilding ( j ) ;
80751: LD_VAR 0 3
80755: PPUSH
80756: CALL_OW 122
// if not HasTask ( j ) then
80760: LD_VAR 0 3
80764: PPUSH
80765: CALL_OW 314
80769: NOT
80770: IFFALSE 80790
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
80772: LD_VAR 0 3
80776: PPUSH
80777: LD_VAR 0 7
80781: PUSH
80782: LD_INT 1
80784: ARRAY
80785: PPUSH
80786: CALL_OW 189
// end ; end ;
80790: GO 80625
80792: POP
80793: POP
// end ;
80794: GO 80114
80796: POP
80797: POP
// end ;
80798: LD_VAR 0 1
80802: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
80803: LD_INT 0
80805: PPUSH
80806: PPUSH
80807: PPUSH
80808: PPUSH
80809: PPUSH
80810: PPUSH
80811: PPUSH
80812: PPUSH
80813: PPUSH
80814: PPUSH
80815: PPUSH
// if not mc_bases then
80816: LD_EXP 36
80820: NOT
80821: IFFALSE 80825
// exit ;
80823: GO 81627
// for i = 1 to mc_bases do
80825: LD_ADDR_VAR 0 2
80829: PUSH
80830: DOUBLE
80831: LD_INT 1
80833: DEC
80834: ST_TO_ADDR
80835: LD_EXP 36
80839: PUSH
80840: FOR_TO
80841: IFFALSE 81625
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
80843: LD_EXP 64
80847: PUSH
80848: LD_VAR 0 2
80852: ARRAY
80853: NOT
80854: PUSH
80855: LD_EXP 39
80859: PUSH
80860: LD_VAR 0 2
80864: ARRAY
80865: PUSH
80866: LD_INT 1
80868: ARRAY
80869: OR
80870: PUSH
80871: LD_EXP 39
80875: PUSH
80876: LD_VAR 0 2
80880: ARRAY
80881: PUSH
80882: LD_INT 2
80884: ARRAY
80885: OR
80886: PUSH
80887: LD_EXP 62
80891: PUSH
80892: LD_VAR 0 2
80896: ARRAY
80897: PPUSH
80898: LD_INT 1
80900: PPUSH
80901: CALL_OW 325
80905: NOT
80906: OR
80907: PUSH
80908: LD_EXP 59
80912: PUSH
80913: LD_VAR 0 2
80917: ARRAY
80918: OR
80919: IFFALSE 80923
// continue ;
80921: GO 80840
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
80923: LD_ADDR_VAR 0 8
80927: PUSH
80928: LD_EXP 36
80932: PUSH
80933: LD_VAR 0 2
80937: ARRAY
80938: PPUSH
80939: LD_INT 25
80941: PUSH
80942: LD_INT 4
80944: PUSH
80945: EMPTY
80946: LIST
80947: LIST
80948: PUSH
80949: LD_INT 50
80951: PUSH
80952: EMPTY
80953: LIST
80954: PUSH
80955: LD_INT 3
80957: PUSH
80958: LD_INT 60
80960: PUSH
80961: EMPTY
80962: LIST
80963: PUSH
80964: EMPTY
80965: LIST
80966: LIST
80967: PUSH
80968: EMPTY
80969: LIST
80970: LIST
80971: LIST
80972: PPUSH
80973: CALL_OW 72
80977: PUSH
80978: LD_EXP 40
80982: PUSH
80983: LD_VAR 0 2
80987: ARRAY
80988: DIFF
80989: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
80990: LD_ADDR_VAR 0 9
80994: PUSH
80995: LD_EXP 36
80999: PUSH
81000: LD_VAR 0 2
81004: ARRAY
81005: PPUSH
81006: LD_INT 2
81008: PUSH
81009: LD_INT 30
81011: PUSH
81012: LD_INT 0
81014: PUSH
81015: EMPTY
81016: LIST
81017: LIST
81018: PUSH
81019: LD_INT 30
81021: PUSH
81022: LD_INT 1
81024: PUSH
81025: EMPTY
81026: LIST
81027: LIST
81028: PUSH
81029: EMPTY
81030: LIST
81031: LIST
81032: LIST
81033: PPUSH
81034: CALL_OW 72
81038: ST_TO_ADDR
// if not tmp or not dep then
81039: LD_VAR 0 8
81043: NOT
81044: PUSH
81045: LD_VAR 0 9
81049: NOT
81050: OR
81051: IFFALSE 81055
// continue ;
81053: GO 80840
// side := GetSide ( tmp [ 1 ] ) ;
81055: LD_ADDR_VAR 0 11
81059: PUSH
81060: LD_VAR 0 8
81064: PUSH
81065: LD_INT 1
81067: ARRAY
81068: PPUSH
81069: CALL_OW 255
81073: ST_TO_ADDR
// dep := dep [ 1 ] ;
81074: LD_ADDR_VAR 0 9
81078: PUSH
81079: LD_VAR 0 9
81083: PUSH
81084: LD_INT 1
81086: ARRAY
81087: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
81088: LD_ADDR_VAR 0 7
81092: PUSH
81093: LD_EXP 64
81097: PUSH
81098: LD_VAR 0 2
81102: ARRAY
81103: PPUSH
81104: LD_INT 22
81106: PUSH
81107: LD_INT 0
81109: PUSH
81110: EMPTY
81111: LIST
81112: LIST
81113: PUSH
81114: LD_INT 25
81116: PUSH
81117: LD_INT 12
81119: PUSH
81120: EMPTY
81121: LIST
81122: LIST
81123: PUSH
81124: EMPTY
81125: LIST
81126: LIST
81127: PPUSH
81128: CALL_OW 70
81132: PUSH
81133: LD_INT 22
81135: PUSH
81136: LD_INT 0
81138: PUSH
81139: EMPTY
81140: LIST
81141: LIST
81142: PUSH
81143: LD_INT 25
81145: PUSH
81146: LD_INT 12
81148: PUSH
81149: EMPTY
81150: LIST
81151: LIST
81152: PUSH
81153: LD_INT 91
81155: PUSH
81156: LD_VAR 0 9
81160: PUSH
81161: LD_INT 20
81163: PUSH
81164: EMPTY
81165: LIST
81166: LIST
81167: LIST
81168: PUSH
81169: EMPTY
81170: LIST
81171: LIST
81172: LIST
81173: PPUSH
81174: CALL_OW 69
81178: UNION
81179: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
81180: LD_ADDR_VAR 0 10
81184: PUSH
81185: LD_EXP 64
81189: PUSH
81190: LD_VAR 0 2
81194: ARRAY
81195: PPUSH
81196: LD_INT 81
81198: PUSH
81199: LD_VAR 0 11
81203: PUSH
81204: EMPTY
81205: LIST
81206: LIST
81207: PPUSH
81208: CALL_OW 70
81212: ST_TO_ADDR
// if not apes or danger_at_area then
81213: LD_VAR 0 7
81217: NOT
81218: PUSH
81219: LD_VAR 0 10
81223: OR
81224: IFFALSE 81274
// begin if mc_taming [ i ] then
81226: LD_EXP 67
81230: PUSH
81231: LD_VAR 0 2
81235: ARRAY
81236: IFFALSE 81272
// begin MC_Reset ( i , 121 ) ;
81238: LD_VAR 0 2
81242: PPUSH
81243: LD_INT 121
81245: PPUSH
81246: CALL 66709 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
81250: LD_ADDR_EXP 67
81254: PUSH
81255: LD_EXP 67
81259: PPUSH
81260: LD_VAR 0 2
81264: PPUSH
81265: EMPTY
81266: PPUSH
81267: CALL_OW 1
81271: ST_TO_ADDR
// end ; continue ;
81272: GO 80840
// end ; for j in tmp do
81274: LD_ADDR_VAR 0 3
81278: PUSH
81279: LD_VAR 0 8
81283: PUSH
81284: FOR_IN
81285: IFFALSE 81621
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
81287: LD_VAR 0 3
81291: PUSH
81292: LD_EXP 67
81296: PUSH
81297: LD_VAR 0 2
81301: ARRAY
81302: IN
81303: NOT
81304: PUSH
81305: LD_EXP 67
81309: PUSH
81310: LD_VAR 0 2
81314: ARRAY
81315: PUSH
81316: LD_INT 3
81318: LESS
81319: AND
81320: IFFALSE 81378
// begin SetTag ( j , 121 ) ;
81322: LD_VAR 0 3
81326: PPUSH
81327: LD_INT 121
81329: PPUSH
81330: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
81334: LD_ADDR_EXP 67
81338: PUSH
81339: LD_EXP 67
81343: PPUSH
81344: LD_VAR 0 2
81348: PUSH
81349: LD_EXP 67
81353: PUSH
81354: LD_VAR 0 2
81358: ARRAY
81359: PUSH
81360: LD_INT 1
81362: PLUS
81363: PUSH
81364: EMPTY
81365: LIST
81366: LIST
81367: PPUSH
81368: LD_VAR 0 3
81372: PPUSH
81373: CALL 26652 0 3
81377: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
81378: LD_VAR 0 3
81382: PUSH
81383: LD_EXP 67
81387: PUSH
81388: LD_VAR 0 2
81392: ARRAY
81393: IN
81394: IFFALSE 81619
// begin if GetClass ( j ) <> 4 then
81396: LD_VAR 0 3
81400: PPUSH
81401: CALL_OW 257
81405: PUSH
81406: LD_INT 4
81408: NONEQUAL
81409: IFFALSE 81462
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
81411: LD_ADDR_EXP 67
81415: PUSH
81416: LD_EXP 67
81420: PPUSH
81421: LD_VAR 0 2
81425: PPUSH
81426: LD_EXP 67
81430: PUSH
81431: LD_VAR 0 2
81435: ARRAY
81436: PUSH
81437: LD_VAR 0 3
81441: DIFF
81442: PPUSH
81443: CALL_OW 1
81447: ST_TO_ADDR
// SetTag ( j , 0 ) ;
81448: LD_VAR 0 3
81452: PPUSH
81453: LD_INT 0
81455: PPUSH
81456: CALL_OW 109
// continue ;
81460: GO 81284
// end ; if IsInUnit ( j ) then
81462: LD_VAR 0 3
81466: PPUSH
81467: CALL_OW 310
81471: IFFALSE 81482
// ComExitBuilding ( j ) ;
81473: LD_VAR 0 3
81477: PPUSH
81478: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
81482: LD_ADDR_VAR 0 6
81486: PUSH
81487: LD_VAR 0 7
81491: PPUSH
81492: LD_VAR 0 3
81496: PPUSH
81497: CALL_OW 74
81501: ST_TO_ADDR
// if not ape then
81502: LD_VAR 0 6
81506: NOT
81507: IFFALSE 81511
// break ;
81509: GO 81621
// x := GetX ( ape ) ;
81511: LD_ADDR_VAR 0 4
81515: PUSH
81516: LD_VAR 0 6
81520: PPUSH
81521: CALL_OW 250
81525: ST_TO_ADDR
// y := GetY ( ape ) ;
81526: LD_ADDR_VAR 0 5
81530: PUSH
81531: LD_VAR 0 6
81535: PPUSH
81536: CALL_OW 251
81540: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
81541: LD_VAR 0 4
81545: PPUSH
81546: LD_VAR 0 5
81550: PPUSH
81551: CALL_OW 488
81555: NOT
81556: PUSH
81557: LD_VAR 0 11
81561: PPUSH
81562: LD_VAR 0 4
81566: PPUSH
81567: LD_VAR 0 5
81571: PPUSH
81572: LD_INT 20
81574: PPUSH
81575: CALL 27548 0 4
81579: PUSH
81580: LD_INT 4
81582: ARRAY
81583: OR
81584: IFFALSE 81588
// break ;
81586: GO 81621
// if not HasTask ( j ) then
81588: LD_VAR 0 3
81592: PPUSH
81593: CALL_OW 314
81597: NOT
81598: IFFALSE 81619
// ComTameXY ( j , x , y ) ;
81600: LD_VAR 0 3
81604: PPUSH
81605: LD_VAR 0 4
81609: PPUSH
81610: LD_VAR 0 5
81614: PPUSH
81615: CALL_OW 131
// end ; end ;
81619: GO 81284
81621: POP
81622: POP
// end ;
81623: GO 80840
81625: POP
81626: POP
// end ;
81627: LD_VAR 0 1
81631: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
81632: LD_INT 0
81634: PPUSH
81635: PPUSH
81636: PPUSH
81637: PPUSH
81638: PPUSH
81639: PPUSH
81640: PPUSH
81641: PPUSH
// if not mc_bases then
81642: LD_EXP 36
81646: NOT
81647: IFFALSE 81651
// exit ;
81649: GO 82277
// for i = 1 to mc_bases do
81651: LD_ADDR_VAR 0 2
81655: PUSH
81656: DOUBLE
81657: LD_INT 1
81659: DEC
81660: ST_TO_ADDR
81661: LD_EXP 36
81665: PUSH
81666: FOR_TO
81667: IFFALSE 82275
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
81669: LD_EXP 65
81673: PUSH
81674: LD_VAR 0 2
81678: ARRAY
81679: NOT
81680: PUSH
81681: LD_EXP 65
81685: PUSH
81686: LD_VAR 0 2
81690: ARRAY
81691: PPUSH
81692: LD_INT 25
81694: PUSH
81695: LD_INT 12
81697: PUSH
81698: EMPTY
81699: LIST
81700: LIST
81701: PPUSH
81702: CALL_OW 72
81706: NOT
81707: OR
81708: IFFALSE 81712
// continue ;
81710: GO 81666
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
81712: LD_ADDR_VAR 0 5
81716: PUSH
81717: LD_EXP 65
81721: PUSH
81722: LD_VAR 0 2
81726: ARRAY
81727: PUSH
81728: LD_INT 1
81730: ARRAY
81731: PPUSH
81732: CALL_OW 255
81736: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
81737: LD_VAR 0 5
81741: PPUSH
81742: LD_INT 2
81744: PPUSH
81745: CALL_OW 325
81749: IFFALSE 82002
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
81751: LD_ADDR_VAR 0 4
81755: PUSH
81756: LD_EXP 65
81760: PUSH
81761: LD_VAR 0 2
81765: ARRAY
81766: PPUSH
81767: LD_INT 25
81769: PUSH
81770: LD_INT 16
81772: PUSH
81773: EMPTY
81774: LIST
81775: LIST
81776: PPUSH
81777: CALL_OW 72
81781: ST_TO_ADDR
// if tmp < 6 then
81782: LD_VAR 0 4
81786: PUSH
81787: LD_INT 6
81789: LESS
81790: IFFALSE 82002
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
81792: LD_ADDR_VAR 0 6
81796: PUSH
81797: LD_EXP 36
81801: PUSH
81802: LD_VAR 0 2
81806: ARRAY
81807: PPUSH
81808: LD_INT 2
81810: PUSH
81811: LD_INT 30
81813: PUSH
81814: LD_INT 0
81816: PUSH
81817: EMPTY
81818: LIST
81819: LIST
81820: PUSH
81821: LD_INT 30
81823: PUSH
81824: LD_INT 1
81826: PUSH
81827: EMPTY
81828: LIST
81829: LIST
81830: PUSH
81831: EMPTY
81832: LIST
81833: LIST
81834: LIST
81835: PPUSH
81836: CALL_OW 72
81840: ST_TO_ADDR
// if depot then
81841: LD_VAR 0 6
81845: IFFALSE 82002
// begin selected := 0 ;
81847: LD_ADDR_VAR 0 7
81851: PUSH
81852: LD_INT 0
81854: ST_TO_ADDR
// for j in depot do
81855: LD_ADDR_VAR 0 3
81859: PUSH
81860: LD_VAR 0 6
81864: PUSH
81865: FOR_IN
81866: IFFALSE 81897
// begin if UnitsInside ( j ) < 6 then
81868: LD_VAR 0 3
81872: PPUSH
81873: CALL_OW 313
81877: PUSH
81878: LD_INT 6
81880: LESS
81881: IFFALSE 81895
// begin selected := j ;
81883: LD_ADDR_VAR 0 7
81887: PUSH
81888: LD_VAR 0 3
81892: ST_TO_ADDR
// break ;
81893: GO 81897
// end ; end ;
81895: GO 81865
81897: POP
81898: POP
// if selected then
81899: LD_VAR 0 7
81903: IFFALSE 82002
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
81905: LD_ADDR_VAR 0 3
81909: PUSH
81910: LD_EXP 65
81914: PUSH
81915: LD_VAR 0 2
81919: ARRAY
81920: PPUSH
81921: LD_INT 25
81923: PUSH
81924: LD_INT 12
81926: PUSH
81927: EMPTY
81928: LIST
81929: LIST
81930: PPUSH
81931: CALL_OW 72
81935: PUSH
81936: FOR_IN
81937: IFFALSE 82000
// if not HasTask ( j ) then
81939: LD_VAR 0 3
81943: PPUSH
81944: CALL_OW 314
81948: NOT
81949: IFFALSE 81998
// begin if not IsInUnit ( j ) then
81951: LD_VAR 0 3
81955: PPUSH
81956: CALL_OW 310
81960: NOT
81961: IFFALSE 81977
// ComEnterUnit ( j , selected ) ;
81963: LD_VAR 0 3
81967: PPUSH
81968: LD_VAR 0 7
81972: PPUSH
81973: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
81977: LD_VAR 0 3
81981: PPUSH
81982: LD_INT 16
81984: PPUSH
81985: CALL_OW 183
// AddComExitBuilding ( j ) ;
81989: LD_VAR 0 3
81993: PPUSH
81994: CALL_OW 182
// end ;
81998: GO 81936
82000: POP
82001: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
82002: LD_VAR 0 5
82006: PPUSH
82007: LD_INT 11
82009: PPUSH
82010: CALL_OW 325
82014: IFFALSE 82273
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
82016: LD_ADDR_VAR 0 4
82020: PUSH
82021: LD_EXP 65
82025: PUSH
82026: LD_VAR 0 2
82030: ARRAY
82031: PPUSH
82032: LD_INT 25
82034: PUSH
82035: LD_INT 16
82037: PUSH
82038: EMPTY
82039: LIST
82040: LIST
82041: PPUSH
82042: CALL_OW 72
82046: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
82047: LD_VAR 0 4
82051: PUSH
82052: LD_INT 6
82054: GREATEREQUAL
82055: PUSH
82056: LD_VAR 0 5
82060: PPUSH
82061: LD_INT 2
82063: PPUSH
82064: CALL_OW 325
82068: NOT
82069: OR
82070: IFFALSE 82273
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
82072: LD_ADDR_VAR 0 8
82076: PUSH
82077: LD_EXP 36
82081: PUSH
82082: LD_VAR 0 2
82086: ARRAY
82087: PPUSH
82088: LD_INT 2
82090: PUSH
82091: LD_INT 30
82093: PUSH
82094: LD_INT 4
82096: PUSH
82097: EMPTY
82098: LIST
82099: LIST
82100: PUSH
82101: LD_INT 30
82103: PUSH
82104: LD_INT 5
82106: PUSH
82107: EMPTY
82108: LIST
82109: LIST
82110: PUSH
82111: EMPTY
82112: LIST
82113: LIST
82114: LIST
82115: PPUSH
82116: CALL_OW 72
82120: ST_TO_ADDR
// if barracks then
82121: LD_VAR 0 8
82125: IFFALSE 82273
// begin selected := 0 ;
82127: LD_ADDR_VAR 0 7
82131: PUSH
82132: LD_INT 0
82134: ST_TO_ADDR
// for j in barracks do
82135: LD_ADDR_VAR 0 3
82139: PUSH
82140: LD_VAR 0 8
82144: PUSH
82145: FOR_IN
82146: IFFALSE 82177
// begin if UnitsInside ( j ) < 6 then
82148: LD_VAR 0 3
82152: PPUSH
82153: CALL_OW 313
82157: PUSH
82158: LD_INT 6
82160: LESS
82161: IFFALSE 82175
// begin selected := j ;
82163: LD_ADDR_VAR 0 7
82167: PUSH
82168: LD_VAR 0 3
82172: ST_TO_ADDR
// break ;
82173: GO 82177
// end ; end ;
82175: GO 82145
82177: POP
82178: POP
// if selected then
82179: LD_VAR 0 7
82183: IFFALSE 82273
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
82185: LD_ADDR_VAR 0 3
82189: PUSH
82190: LD_EXP 65
82194: PUSH
82195: LD_VAR 0 2
82199: ARRAY
82200: PPUSH
82201: LD_INT 25
82203: PUSH
82204: LD_INT 12
82206: PUSH
82207: EMPTY
82208: LIST
82209: LIST
82210: PPUSH
82211: CALL_OW 72
82215: PUSH
82216: FOR_IN
82217: IFFALSE 82271
// if not IsInUnit ( j ) and not HasTask ( j ) then
82219: LD_VAR 0 3
82223: PPUSH
82224: CALL_OW 310
82228: NOT
82229: PUSH
82230: LD_VAR 0 3
82234: PPUSH
82235: CALL_OW 314
82239: NOT
82240: AND
82241: IFFALSE 82269
// begin ComEnterUnit ( j , selected ) ;
82243: LD_VAR 0 3
82247: PPUSH
82248: LD_VAR 0 7
82252: PPUSH
82253: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
82257: LD_VAR 0 3
82261: PPUSH
82262: LD_INT 15
82264: PPUSH
82265: CALL_OW 183
// end ;
82269: GO 82216
82271: POP
82272: POP
// end ; end ; end ; end ; end ;
82273: GO 81666
82275: POP
82276: POP
// end ;
82277: LD_VAR 0 1
82281: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
82282: LD_INT 0
82284: PPUSH
82285: PPUSH
82286: PPUSH
82287: PPUSH
// if not mc_bases then
82288: LD_EXP 36
82292: NOT
82293: IFFALSE 82297
// exit ;
82295: GO 82475
// for i = 1 to mc_bases do
82297: LD_ADDR_VAR 0 2
82301: PUSH
82302: DOUBLE
82303: LD_INT 1
82305: DEC
82306: ST_TO_ADDR
82307: LD_EXP 36
82311: PUSH
82312: FOR_TO
82313: IFFALSE 82473
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
82315: LD_ADDR_VAR 0 4
82319: PUSH
82320: LD_EXP 36
82324: PUSH
82325: LD_VAR 0 2
82329: ARRAY
82330: PPUSH
82331: LD_INT 25
82333: PUSH
82334: LD_INT 9
82336: PUSH
82337: EMPTY
82338: LIST
82339: LIST
82340: PPUSH
82341: CALL_OW 72
82345: ST_TO_ADDR
// if not tmp then
82346: LD_VAR 0 4
82350: NOT
82351: IFFALSE 82355
// continue ;
82353: GO 82312
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
82355: LD_EXP 62
82359: PUSH
82360: LD_VAR 0 2
82364: ARRAY
82365: PPUSH
82366: LD_INT 29
82368: PPUSH
82369: CALL_OW 325
82373: NOT
82374: PUSH
82375: LD_EXP 62
82379: PUSH
82380: LD_VAR 0 2
82384: ARRAY
82385: PPUSH
82386: LD_INT 28
82388: PPUSH
82389: CALL_OW 325
82393: NOT
82394: AND
82395: IFFALSE 82399
// continue ;
82397: GO 82312
// for j in tmp do
82399: LD_ADDR_VAR 0 3
82403: PUSH
82404: LD_VAR 0 4
82408: PUSH
82409: FOR_IN
82410: IFFALSE 82469
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
82412: LD_VAR 0 3
82416: PUSH
82417: LD_EXP 39
82421: PUSH
82422: LD_VAR 0 2
82426: ARRAY
82427: PUSH
82428: LD_INT 1
82430: ARRAY
82431: IN
82432: NOT
82433: PUSH
82434: LD_VAR 0 3
82438: PUSH
82439: LD_EXP 39
82443: PUSH
82444: LD_VAR 0 2
82448: ARRAY
82449: PUSH
82450: LD_INT 2
82452: ARRAY
82453: IN
82454: NOT
82455: AND
82456: IFFALSE 82467
// ComSpaceTimeShoot ( j ) ;
82458: LD_VAR 0 3
82462: PPUSH
82463: CALL 20238 0 1
82467: GO 82409
82469: POP
82470: POP
// end ;
82471: GO 82312
82473: POP
82474: POP
// end ;
82475: LD_VAR 0 1
82479: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
82480: LD_INT 0
82482: PPUSH
82483: PPUSH
82484: PPUSH
82485: PPUSH
82486: PPUSH
82487: PPUSH
82488: PPUSH
82489: PPUSH
82490: PPUSH
// if not mc_bases then
82491: LD_EXP 36
82495: NOT
82496: IFFALSE 82500
// exit ;
82498: GO 83122
// for i = 1 to mc_bases do
82500: LD_ADDR_VAR 0 2
82504: PUSH
82505: DOUBLE
82506: LD_INT 1
82508: DEC
82509: ST_TO_ADDR
82510: LD_EXP 36
82514: PUSH
82515: FOR_TO
82516: IFFALSE 83120
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
82518: LD_EXP 71
82522: PUSH
82523: LD_VAR 0 2
82527: ARRAY
82528: NOT
82529: PUSH
82530: LD_INT 38
82532: PPUSH
82533: LD_EXP 62
82537: PUSH
82538: LD_VAR 0 2
82542: ARRAY
82543: PPUSH
82544: CALL_OW 321
82548: PUSH
82549: LD_INT 2
82551: NONEQUAL
82552: OR
82553: IFFALSE 82557
// continue ;
82555: GO 82515
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
82557: LD_ADDR_VAR 0 8
82561: PUSH
82562: LD_EXP 36
82566: PUSH
82567: LD_VAR 0 2
82571: ARRAY
82572: PPUSH
82573: LD_INT 30
82575: PUSH
82576: LD_INT 34
82578: PUSH
82579: EMPTY
82580: LIST
82581: LIST
82582: PPUSH
82583: CALL_OW 72
82587: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
82588: LD_ADDR_VAR 0 9
82592: PUSH
82593: LD_EXP 36
82597: PUSH
82598: LD_VAR 0 2
82602: ARRAY
82603: PPUSH
82604: LD_INT 25
82606: PUSH
82607: LD_INT 4
82609: PUSH
82610: EMPTY
82611: LIST
82612: LIST
82613: PPUSH
82614: CALL_OW 72
82618: PPUSH
82619: LD_INT 0
82621: PPUSH
82622: CALL 59922 0 2
82626: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
82627: LD_VAR 0 9
82631: NOT
82632: PUSH
82633: LD_VAR 0 8
82637: NOT
82638: OR
82639: PUSH
82640: LD_EXP 36
82644: PUSH
82645: LD_VAR 0 2
82649: ARRAY
82650: PPUSH
82651: LD_INT 124
82653: PPUSH
82654: CALL 59922 0 2
82658: OR
82659: IFFALSE 82663
// continue ;
82661: GO 82515
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
82663: LD_EXP 72
82667: PUSH
82668: LD_VAR 0 2
82672: ARRAY
82673: PUSH
82674: LD_EXP 71
82678: PUSH
82679: LD_VAR 0 2
82683: ARRAY
82684: LESS
82685: PUSH
82686: LD_EXP 72
82690: PUSH
82691: LD_VAR 0 2
82695: ARRAY
82696: PUSH
82697: LD_VAR 0 8
82701: LESS
82702: AND
82703: IFFALSE 83118
// begin tmp := sci [ 1 ] ;
82705: LD_ADDR_VAR 0 7
82709: PUSH
82710: LD_VAR 0 9
82714: PUSH
82715: LD_INT 1
82717: ARRAY
82718: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
82719: LD_VAR 0 7
82723: PPUSH
82724: LD_INT 124
82726: PPUSH
82727: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
82731: LD_ADDR_VAR 0 3
82735: PUSH
82736: DOUBLE
82737: LD_EXP 71
82741: PUSH
82742: LD_VAR 0 2
82746: ARRAY
82747: INC
82748: ST_TO_ADDR
82749: LD_EXP 71
82753: PUSH
82754: LD_VAR 0 2
82758: ARRAY
82759: PUSH
82760: FOR_DOWNTO
82761: IFFALSE 83104
// begin if IsInUnit ( tmp ) then
82763: LD_VAR 0 7
82767: PPUSH
82768: CALL_OW 310
82772: IFFALSE 82783
// ComExitBuilding ( tmp ) ;
82774: LD_VAR 0 7
82778: PPUSH
82779: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
82783: LD_INT 35
82785: PPUSH
82786: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
82790: LD_VAR 0 7
82794: PPUSH
82795: CALL_OW 310
82799: NOT
82800: PUSH
82801: LD_VAR 0 7
82805: PPUSH
82806: CALL_OW 314
82810: NOT
82811: AND
82812: IFFALSE 82783
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
82814: LD_ADDR_VAR 0 6
82818: PUSH
82819: LD_VAR 0 7
82823: PPUSH
82824: CALL_OW 250
82828: PUSH
82829: LD_VAR 0 7
82833: PPUSH
82834: CALL_OW 251
82838: PUSH
82839: EMPTY
82840: LIST
82841: LIST
82842: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
82843: LD_INT 35
82845: PPUSH
82846: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
82850: LD_ADDR_VAR 0 4
82854: PUSH
82855: LD_EXP 71
82859: PUSH
82860: LD_VAR 0 2
82864: ARRAY
82865: PUSH
82866: LD_VAR 0 3
82870: ARRAY
82871: PUSH
82872: LD_INT 1
82874: ARRAY
82875: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
82876: LD_ADDR_VAR 0 5
82880: PUSH
82881: LD_EXP 71
82885: PUSH
82886: LD_VAR 0 2
82890: ARRAY
82891: PUSH
82892: LD_VAR 0 3
82896: ARRAY
82897: PUSH
82898: LD_INT 2
82900: ARRAY
82901: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
82902: LD_VAR 0 7
82906: PPUSH
82907: LD_INT 10
82909: PPUSH
82910: CALL 29245 0 2
82914: PUSH
82915: LD_INT 4
82917: ARRAY
82918: IFFALSE 82956
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
82920: LD_VAR 0 7
82924: PPUSH
82925: LD_VAR 0 6
82929: PUSH
82930: LD_INT 1
82932: ARRAY
82933: PPUSH
82934: LD_VAR 0 6
82938: PUSH
82939: LD_INT 2
82941: ARRAY
82942: PPUSH
82943: CALL_OW 111
// wait ( 0 0$10 ) ;
82947: LD_INT 350
82949: PPUSH
82950: CALL_OW 67
// end else
82954: GO 82982
// begin ComMoveXY ( tmp , x , y ) ;
82956: LD_VAR 0 7
82960: PPUSH
82961: LD_VAR 0 4
82965: PPUSH
82966: LD_VAR 0 5
82970: PPUSH
82971: CALL_OW 111
// wait ( 0 0$3 ) ;
82975: LD_INT 105
82977: PPUSH
82978: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
82982: LD_VAR 0 7
82986: PPUSH
82987: LD_VAR 0 4
82991: PPUSH
82992: LD_VAR 0 5
82996: PPUSH
82997: CALL_OW 307
83001: IFFALSE 82843
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
83003: LD_VAR 0 7
83007: PPUSH
83008: LD_VAR 0 4
83012: PPUSH
83013: LD_VAR 0 5
83017: PPUSH
83018: LD_VAR 0 8
83022: PUSH
83023: LD_VAR 0 3
83027: ARRAY
83028: PPUSH
83029: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
83033: LD_INT 35
83035: PPUSH
83036: CALL_OW 67
// until not HasTask ( tmp ) ;
83040: LD_VAR 0 7
83044: PPUSH
83045: CALL_OW 314
83049: NOT
83050: IFFALSE 83033
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
83052: LD_ADDR_EXP 72
83056: PUSH
83057: LD_EXP 72
83061: PPUSH
83062: LD_VAR 0 2
83066: PUSH
83067: LD_EXP 72
83071: PUSH
83072: LD_VAR 0 2
83076: ARRAY
83077: PUSH
83078: LD_INT 1
83080: PLUS
83081: PUSH
83082: EMPTY
83083: LIST
83084: LIST
83085: PPUSH
83086: LD_VAR 0 8
83090: PUSH
83091: LD_VAR 0 3
83095: ARRAY
83096: PPUSH
83097: CALL 26652 0 3
83101: ST_TO_ADDR
// end ;
83102: GO 82760
83104: POP
83105: POP
// MC_Reset ( i , 124 ) ;
83106: LD_VAR 0 2
83110: PPUSH
83111: LD_INT 124
83113: PPUSH
83114: CALL 66709 0 2
// end ; end ;
83118: GO 82515
83120: POP
83121: POP
// end ;
83122: LD_VAR 0 1
83126: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
83127: LD_INT 0
83129: PPUSH
83130: PPUSH
83131: PPUSH
// if not mc_bases then
83132: LD_EXP 36
83136: NOT
83137: IFFALSE 83141
// exit ;
83139: GO 83747
// for i = 1 to mc_bases do
83141: LD_ADDR_VAR 0 2
83145: PUSH
83146: DOUBLE
83147: LD_INT 1
83149: DEC
83150: ST_TO_ADDR
83151: LD_EXP 36
83155: PUSH
83156: FOR_TO
83157: IFFALSE 83745
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
83159: LD_ADDR_VAR 0 3
83163: PUSH
83164: LD_EXP 36
83168: PUSH
83169: LD_VAR 0 2
83173: ARRAY
83174: PPUSH
83175: LD_INT 25
83177: PUSH
83178: LD_INT 4
83180: PUSH
83181: EMPTY
83182: LIST
83183: LIST
83184: PPUSH
83185: CALL_OW 72
83189: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
83190: LD_VAR 0 3
83194: NOT
83195: PUSH
83196: LD_EXP 73
83200: PUSH
83201: LD_VAR 0 2
83205: ARRAY
83206: NOT
83207: OR
83208: PUSH
83209: LD_EXP 36
83213: PUSH
83214: LD_VAR 0 2
83218: ARRAY
83219: PPUSH
83220: LD_INT 2
83222: PUSH
83223: LD_INT 30
83225: PUSH
83226: LD_INT 0
83228: PUSH
83229: EMPTY
83230: LIST
83231: LIST
83232: PUSH
83233: LD_INT 30
83235: PUSH
83236: LD_INT 1
83238: PUSH
83239: EMPTY
83240: LIST
83241: LIST
83242: PUSH
83243: EMPTY
83244: LIST
83245: LIST
83246: LIST
83247: PPUSH
83248: CALL_OW 72
83252: NOT
83253: OR
83254: IFFALSE 83304
// begin if mc_deposits_finder [ i ] then
83256: LD_EXP 74
83260: PUSH
83261: LD_VAR 0 2
83265: ARRAY
83266: IFFALSE 83302
// begin MC_Reset ( i , 125 ) ;
83268: LD_VAR 0 2
83272: PPUSH
83273: LD_INT 125
83275: PPUSH
83276: CALL 66709 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
83280: LD_ADDR_EXP 74
83284: PUSH
83285: LD_EXP 74
83289: PPUSH
83290: LD_VAR 0 2
83294: PPUSH
83295: EMPTY
83296: PPUSH
83297: CALL_OW 1
83301: ST_TO_ADDR
// end ; continue ;
83302: GO 83156
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
83304: LD_EXP 73
83308: PUSH
83309: LD_VAR 0 2
83313: ARRAY
83314: PUSH
83315: LD_INT 1
83317: ARRAY
83318: PUSH
83319: LD_INT 3
83321: ARRAY
83322: PUSH
83323: LD_INT 1
83325: EQUAL
83326: PUSH
83327: LD_INT 20
83329: PPUSH
83330: LD_EXP 62
83334: PUSH
83335: LD_VAR 0 2
83339: ARRAY
83340: PPUSH
83341: CALL_OW 321
83345: PUSH
83346: LD_INT 2
83348: NONEQUAL
83349: AND
83350: IFFALSE 83400
// begin if mc_deposits_finder [ i ] then
83352: LD_EXP 74
83356: PUSH
83357: LD_VAR 0 2
83361: ARRAY
83362: IFFALSE 83398
// begin MC_Reset ( i , 125 ) ;
83364: LD_VAR 0 2
83368: PPUSH
83369: LD_INT 125
83371: PPUSH
83372: CALL 66709 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
83376: LD_ADDR_EXP 74
83380: PUSH
83381: LD_EXP 74
83385: PPUSH
83386: LD_VAR 0 2
83390: PPUSH
83391: EMPTY
83392: PPUSH
83393: CALL_OW 1
83397: ST_TO_ADDR
// end ; continue ;
83398: GO 83156
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
83400: LD_EXP 73
83404: PUSH
83405: LD_VAR 0 2
83409: ARRAY
83410: PUSH
83411: LD_INT 1
83413: ARRAY
83414: PUSH
83415: LD_INT 1
83417: ARRAY
83418: PPUSH
83419: LD_EXP 73
83423: PUSH
83424: LD_VAR 0 2
83428: ARRAY
83429: PUSH
83430: LD_INT 1
83432: ARRAY
83433: PUSH
83434: LD_INT 2
83436: ARRAY
83437: PPUSH
83438: LD_EXP 62
83442: PUSH
83443: LD_VAR 0 2
83447: ARRAY
83448: PPUSH
83449: CALL_OW 440
83453: IFFALSE 83496
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
83455: LD_ADDR_EXP 73
83459: PUSH
83460: LD_EXP 73
83464: PPUSH
83465: LD_VAR 0 2
83469: PPUSH
83470: LD_EXP 73
83474: PUSH
83475: LD_VAR 0 2
83479: ARRAY
83480: PPUSH
83481: LD_INT 1
83483: PPUSH
83484: CALL_OW 3
83488: PPUSH
83489: CALL_OW 1
83493: ST_TO_ADDR
83494: GO 83743
// begin if not mc_deposits_finder [ i ] then
83496: LD_EXP 74
83500: PUSH
83501: LD_VAR 0 2
83505: ARRAY
83506: NOT
83507: IFFALSE 83559
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
83509: LD_ADDR_EXP 74
83513: PUSH
83514: LD_EXP 74
83518: PPUSH
83519: LD_VAR 0 2
83523: PPUSH
83524: LD_VAR 0 3
83528: PUSH
83529: LD_INT 1
83531: ARRAY
83532: PUSH
83533: EMPTY
83534: LIST
83535: PPUSH
83536: CALL_OW 1
83540: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
83541: LD_VAR 0 3
83545: PUSH
83546: LD_INT 1
83548: ARRAY
83549: PPUSH
83550: LD_INT 125
83552: PPUSH
83553: CALL_OW 109
// end else
83557: GO 83743
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
83559: LD_EXP 74
83563: PUSH
83564: LD_VAR 0 2
83568: ARRAY
83569: PUSH
83570: LD_INT 1
83572: ARRAY
83573: PPUSH
83574: CALL_OW 310
83578: IFFALSE 83601
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
83580: LD_EXP 74
83584: PUSH
83585: LD_VAR 0 2
83589: ARRAY
83590: PUSH
83591: LD_INT 1
83593: ARRAY
83594: PPUSH
83595: CALL_OW 122
83599: GO 83743
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
83601: LD_EXP 74
83605: PUSH
83606: LD_VAR 0 2
83610: ARRAY
83611: PUSH
83612: LD_INT 1
83614: ARRAY
83615: PPUSH
83616: CALL_OW 314
83620: NOT
83621: PUSH
83622: LD_EXP 74
83626: PUSH
83627: LD_VAR 0 2
83631: ARRAY
83632: PUSH
83633: LD_INT 1
83635: ARRAY
83636: PPUSH
83637: LD_EXP 73
83641: PUSH
83642: LD_VAR 0 2
83646: ARRAY
83647: PUSH
83648: LD_INT 1
83650: ARRAY
83651: PUSH
83652: LD_INT 1
83654: ARRAY
83655: PPUSH
83656: LD_EXP 73
83660: PUSH
83661: LD_VAR 0 2
83665: ARRAY
83666: PUSH
83667: LD_INT 1
83669: ARRAY
83670: PUSH
83671: LD_INT 2
83673: ARRAY
83674: PPUSH
83675: CALL_OW 297
83679: PUSH
83680: LD_INT 6
83682: GREATER
83683: AND
83684: IFFALSE 83743
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
83686: LD_EXP 74
83690: PUSH
83691: LD_VAR 0 2
83695: ARRAY
83696: PUSH
83697: LD_INT 1
83699: ARRAY
83700: PPUSH
83701: LD_EXP 73
83705: PUSH
83706: LD_VAR 0 2
83710: ARRAY
83711: PUSH
83712: LD_INT 1
83714: ARRAY
83715: PUSH
83716: LD_INT 1
83718: ARRAY
83719: PPUSH
83720: LD_EXP 73
83724: PUSH
83725: LD_VAR 0 2
83729: ARRAY
83730: PUSH
83731: LD_INT 1
83733: ARRAY
83734: PUSH
83735: LD_INT 2
83737: ARRAY
83738: PPUSH
83739: CALL_OW 111
// end ; end ; end ;
83743: GO 83156
83745: POP
83746: POP
// end ;
83747: LD_VAR 0 1
83751: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
83752: LD_INT 0
83754: PPUSH
83755: PPUSH
83756: PPUSH
83757: PPUSH
83758: PPUSH
83759: PPUSH
83760: PPUSH
83761: PPUSH
83762: PPUSH
83763: PPUSH
83764: PPUSH
// if not mc_bases then
83765: LD_EXP 36
83769: NOT
83770: IFFALSE 83774
// exit ;
83772: GO 84714
// for i = 1 to mc_bases do
83774: LD_ADDR_VAR 0 2
83778: PUSH
83779: DOUBLE
83780: LD_INT 1
83782: DEC
83783: ST_TO_ADDR
83784: LD_EXP 36
83788: PUSH
83789: FOR_TO
83790: IFFALSE 84712
// begin if not mc_bases [ i ] or mc_scan [ i ] then
83792: LD_EXP 36
83796: PUSH
83797: LD_VAR 0 2
83801: ARRAY
83802: NOT
83803: PUSH
83804: LD_EXP 59
83808: PUSH
83809: LD_VAR 0 2
83813: ARRAY
83814: OR
83815: IFFALSE 83819
// continue ;
83817: GO 83789
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
83819: LD_ADDR_VAR 0 7
83823: PUSH
83824: LD_EXP 36
83828: PUSH
83829: LD_VAR 0 2
83833: ARRAY
83834: PUSH
83835: LD_INT 1
83837: ARRAY
83838: PPUSH
83839: CALL_OW 248
83843: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
83844: LD_VAR 0 7
83848: PUSH
83849: LD_INT 3
83851: EQUAL
83852: PUSH
83853: LD_EXP 55
83857: PUSH
83858: LD_VAR 0 2
83862: ARRAY
83863: PUSH
83864: LD_EXP 58
83868: PUSH
83869: LD_VAR 0 2
83873: ARRAY
83874: UNION
83875: PPUSH
83876: LD_INT 33
83878: PUSH
83879: LD_INT 2
83881: PUSH
83882: EMPTY
83883: LIST
83884: LIST
83885: PPUSH
83886: CALL_OW 72
83890: NOT
83891: OR
83892: IFFALSE 83896
// continue ;
83894: GO 83789
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
83896: LD_ADDR_VAR 0 9
83900: PUSH
83901: LD_EXP 36
83905: PUSH
83906: LD_VAR 0 2
83910: ARRAY
83911: PPUSH
83912: LD_INT 30
83914: PUSH
83915: LD_INT 36
83917: PUSH
83918: EMPTY
83919: LIST
83920: LIST
83921: PPUSH
83922: CALL_OW 72
83926: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
83927: LD_ADDR_VAR 0 10
83931: PUSH
83932: LD_EXP 55
83936: PUSH
83937: LD_VAR 0 2
83941: ARRAY
83942: PPUSH
83943: LD_INT 34
83945: PUSH
83946: LD_INT 31
83948: PUSH
83949: EMPTY
83950: LIST
83951: LIST
83952: PPUSH
83953: CALL_OW 72
83957: ST_TO_ADDR
// if not cts and not mcts then
83958: LD_VAR 0 9
83962: NOT
83963: PUSH
83964: LD_VAR 0 10
83968: NOT
83969: AND
83970: IFFALSE 83974
// continue ;
83972: GO 83789
// x := cts ;
83974: LD_ADDR_VAR 0 11
83978: PUSH
83979: LD_VAR 0 9
83983: ST_TO_ADDR
// if not x then
83984: LD_VAR 0 11
83988: NOT
83989: IFFALSE 84001
// x := mcts ;
83991: LD_ADDR_VAR 0 11
83995: PUSH
83996: LD_VAR 0 10
84000: ST_TO_ADDR
// if not x then
84001: LD_VAR 0 11
84005: NOT
84006: IFFALSE 84010
// continue ;
84008: GO 83789
// if mc_remote_driver [ i ] then
84010: LD_EXP 76
84014: PUSH
84015: LD_VAR 0 2
84019: ARRAY
84020: IFFALSE 84407
// for j in mc_remote_driver [ i ] do
84022: LD_ADDR_VAR 0 3
84026: PUSH
84027: LD_EXP 76
84031: PUSH
84032: LD_VAR 0 2
84036: ARRAY
84037: PUSH
84038: FOR_IN
84039: IFFALSE 84405
// begin if GetClass ( j ) <> 3 then
84041: LD_VAR 0 3
84045: PPUSH
84046: CALL_OW 257
84050: PUSH
84051: LD_INT 3
84053: NONEQUAL
84054: IFFALSE 84107
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
84056: LD_ADDR_EXP 76
84060: PUSH
84061: LD_EXP 76
84065: PPUSH
84066: LD_VAR 0 2
84070: PPUSH
84071: LD_EXP 76
84075: PUSH
84076: LD_VAR 0 2
84080: ARRAY
84081: PUSH
84082: LD_VAR 0 3
84086: DIFF
84087: PPUSH
84088: CALL_OW 1
84092: ST_TO_ADDR
// SetTag ( j , 0 ) ;
84093: LD_VAR 0 3
84097: PPUSH
84098: LD_INT 0
84100: PPUSH
84101: CALL_OW 109
// continue ;
84105: GO 84038
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
84107: LD_EXP 55
84111: PUSH
84112: LD_VAR 0 2
84116: ARRAY
84117: PPUSH
84118: LD_INT 34
84120: PUSH
84121: LD_INT 31
84123: PUSH
84124: EMPTY
84125: LIST
84126: LIST
84127: PUSH
84128: LD_INT 58
84130: PUSH
84131: EMPTY
84132: LIST
84133: PUSH
84134: EMPTY
84135: LIST
84136: LIST
84137: PPUSH
84138: CALL_OW 72
84142: PUSH
84143: LD_VAR 0 3
84147: PPUSH
84148: CALL 60010 0 1
84152: NOT
84153: AND
84154: IFFALSE 84225
// begin if IsInUnit ( j ) then
84156: LD_VAR 0 3
84160: PPUSH
84161: CALL_OW 310
84165: IFFALSE 84176
// ComExitBuilding ( j ) ;
84167: LD_VAR 0 3
84171: PPUSH
84172: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
84176: LD_VAR 0 3
84180: PPUSH
84181: LD_EXP 55
84185: PUSH
84186: LD_VAR 0 2
84190: ARRAY
84191: PPUSH
84192: LD_INT 34
84194: PUSH
84195: LD_INT 31
84197: PUSH
84198: EMPTY
84199: LIST
84200: LIST
84201: PUSH
84202: LD_INT 58
84204: PUSH
84205: EMPTY
84206: LIST
84207: PUSH
84208: EMPTY
84209: LIST
84210: LIST
84211: PPUSH
84212: CALL_OW 72
84216: PUSH
84217: LD_INT 1
84219: ARRAY
84220: PPUSH
84221: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
84225: LD_VAR 0 3
84229: PPUSH
84230: CALL_OW 310
84234: NOT
84235: PUSH
84236: LD_VAR 0 3
84240: PPUSH
84241: CALL_OW 310
84245: PPUSH
84246: CALL_OW 266
84250: PUSH
84251: LD_INT 36
84253: NONEQUAL
84254: PUSH
84255: LD_VAR 0 3
84259: PPUSH
84260: CALL 60010 0 1
84264: NOT
84265: AND
84266: OR
84267: IFFALSE 84403
// begin if IsInUnit ( j ) then
84269: LD_VAR 0 3
84273: PPUSH
84274: CALL_OW 310
84278: IFFALSE 84289
// ComExitBuilding ( j ) ;
84280: LD_VAR 0 3
84284: PPUSH
84285: CALL_OW 122
// ct := 0 ;
84289: LD_ADDR_VAR 0 8
84293: PUSH
84294: LD_INT 0
84296: ST_TO_ADDR
// for k in x do
84297: LD_ADDR_VAR 0 4
84301: PUSH
84302: LD_VAR 0 11
84306: PUSH
84307: FOR_IN
84308: IFFALSE 84381
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
84310: LD_VAR 0 4
84314: PPUSH
84315: CALL_OW 264
84319: PUSH
84320: LD_INT 31
84322: EQUAL
84323: PUSH
84324: LD_VAR 0 4
84328: PPUSH
84329: CALL_OW 311
84333: NOT
84334: AND
84335: PUSH
84336: LD_VAR 0 4
84340: PPUSH
84341: CALL_OW 266
84345: PUSH
84346: LD_INT 36
84348: EQUAL
84349: PUSH
84350: LD_VAR 0 4
84354: PPUSH
84355: CALL_OW 313
84359: PUSH
84360: LD_INT 3
84362: LESS
84363: AND
84364: OR
84365: IFFALSE 84379
// begin ct := k ;
84367: LD_ADDR_VAR 0 8
84371: PUSH
84372: LD_VAR 0 4
84376: ST_TO_ADDR
// break ;
84377: GO 84381
// end ;
84379: GO 84307
84381: POP
84382: POP
// if ct then
84383: LD_VAR 0 8
84387: IFFALSE 84403
// ComEnterUnit ( j , ct ) ;
84389: LD_VAR 0 3
84393: PPUSH
84394: LD_VAR 0 8
84398: PPUSH
84399: CALL_OW 120
// end ; end ;
84403: GO 84038
84405: POP
84406: POP
// places := 0 ;
84407: LD_ADDR_VAR 0 5
84411: PUSH
84412: LD_INT 0
84414: ST_TO_ADDR
// for j = 1 to x do
84415: LD_ADDR_VAR 0 3
84419: PUSH
84420: DOUBLE
84421: LD_INT 1
84423: DEC
84424: ST_TO_ADDR
84425: LD_VAR 0 11
84429: PUSH
84430: FOR_TO
84431: IFFALSE 84507
// if GetWeapon ( x [ j ] ) = ar_control_tower then
84433: LD_VAR 0 11
84437: PUSH
84438: LD_VAR 0 3
84442: ARRAY
84443: PPUSH
84444: CALL_OW 264
84448: PUSH
84449: LD_INT 31
84451: EQUAL
84452: IFFALSE 84470
// places := places + 1 else
84454: LD_ADDR_VAR 0 5
84458: PUSH
84459: LD_VAR 0 5
84463: PUSH
84464: LD_INT 1
84466: PLUS
84467: ST_TO_ADDR
84468: GO 84505
// if GetBType ( x [ j ] ) = b_control_tower then
84470: LD_VAR 0 11
84474: PUSH
84475: LD_VAR 0 3
84479: ARRAY
84480: PPUSH
84481: CALL_OW 266
84485: PUSH
84486: LD_INT 36
84488: EQUAL
84489: IFFALSE 84505
// places := places + 3 ;
84491: LD_ADDR_VAR 0 5
84495: PUSH
84496: LD_VAR 0 5
84500: PUSH
84501: LD_INT 3
84503: PLUS
84504: ST_TO_ADDR
84505: GO 84430
84507: POP
84508: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
84509: LD_VAR 0 5
84513: PUSH
84514: LD_INT 0
84516: EQUAL
84517: PUSH
84518: LD_VAR 0 5
84522: PUSH
84523: LD_EXP 76
84527: PUSH
84528: LD_VAR 0 2
84532: ARRAY
84533: LESSEQUAL
84534: OR
84535: IFFALSE 84539
// continue ;
84537: GO 83789
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
84539: LD_ADDR_VAR 0 6
84543: PUSH
84544: LD_EXP 36
84548: PUSH
84549: LD_VAR 0 2
84553: ARRAY
84554: PPUSH
84555: LD_INT 25
84557: PUSH
84558: LD_INT 3
84560: PUSH
84561: EMPTY
84562: LIST
84563: LIST
84564: PPUSH
84565: CALL_OW 72
84569: PUSH
84570: LD_EXP 76
84574: PUSH
84575: LD_VAR 0 2
84579: ARRAY
84580: DIFF
84581: PPUSH
84582: LD_INT 3
84584: PPUSH
84585: CALL 60910 0 2
84589: ST_TO_ADDR
// for j in tmp do
84590: LD_ADDR_VAR 0 3
84594: PUSH
84595: LD_VAR 0 6
84599: PUSH
84600: FOR_IN
84601: IFFALSE 84636
// if GetTag ( j ) > 0 then
84603: LD_VAR 0 3
84607: PPUSH
84608: CALL_OW 110
84612: PUSH
84613: LD_INT 0
84615: GREATER
84616: IFFALSE 84634
// tmp := tmp diff j ;
84618: LD_ADDR_VAR 0 6
84622: PUSH
84623: LD_VAR 0 6
84627: PUSH
84628: LD_VAR 0 3
84632: DIFF
84633: ST_TO_ADDR
84634: GO 84600
84636: POP
84637: POP
// if not tmp then
84638: LD_VAR 0 6
84642: NOT
84643: IFFALSE 84647
// continue ;
84645: GO 83789
// if places then
84647: LD_VAR 0 5
84651: IFFALSE 84710
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
84653: LD_ADDR_EXP 76
84657: PUSH
84658: LD_EXP 76
84662: PPUSH
84663: LD_VAR 0 2
84667: PPUSH
84668: LD_EXP 76
84672: PUSH
84673: LD_VAR 0 2
84677: ARRAY
84678: PUSH
84679: LD_VAR 0 6
84683: PUSH
84684: LD_INT 1
84686: ARRAY
84687: UNION
84688: PPUSH
84689: CALL_OW 1
84693: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
84694: LD_VAR 0 6
84698: PUSH
84699: LD_INT 1
84701: ARRAY
84702: PPUSH
84703: LD_INT 126
84705: PPUSH
84706: CALL_OW 109
// end ; end ;
84710: GO 83789
84712: POP
84713: POP
// end ;
84714: LD_VAR 0 1
84718: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
84719: LD_INT 0
84721: PPUSH
84722: PPUSH
84723: PPUSH
84724: PPUSH
84725: PPUSH
84726: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
84727: LD_VAR 0 1
84731: NOT
84732: PUSH
84733: LD_VAR 0 2
84737: NOT
84738: OR
84739: PUSH
84740: LD_VAR 0 3
84744: NOT
84745: OR
84746: PUSH
84747: LD_VAR 0 4
84751: PUSH
84752: LD_INT 1
84754: PUSH
84755: LD_INT 2
84757: PUSH
84758: LD_INT 3
84760: PUSH
84761: LD_INT 4
84763: PUSH
84764: LD_INT 5
84766: PUSH
84767: LD_INT 8
84769: PUSH
84770: LD_INT 9
84772: PUSH
84773: LD_INT 15
84775: PUSH
84776: LD_INT 16
84778: PUSH
84779: EMPTY
84780: LIST
84781: LIST
84782: LIST
84783: LIST
84784: LIST
84785: LIST
84786: LIST
84787: LIST
84788: LIST
84789: IN
84790: NOT
84791: OR
84792: IFFALSE 84796
// exit ;
84794: GO 85696
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
84796: LD_ADDR_VAR 0 2
84800: PUSH
84801: LD_VAR 0 2
84805: PPUSH
84806: LD_INT 21
84808: PUSH
84809: LD_INT 3
84811: PUSH
84812: EMPTY
84813: LIST
84814: LIST
84815: PUSH
84816: LD_INT 24
84818: PUSH
84819: LD_INT 250
84821: PUSH
84822: EMPTY
84823: LIST
84824: LIST
84825: PUSH
84826: EMPTY
84827: LIST
84828: LIST
84829: PPUSH
84830: CALL_OW 72
84834: ST_TO_ADDR
// case class of 1 , 15 :
84835: LD_VAR 0 4
84839: PUSH
84840: LD_INT 1
84842: DOUBLE
84843: EQUAL
84844: IFTRUE 84854
84846: LD_INT 15
84848: DOUBLE
84849: EQUAL
84850: IFTRUE 84854
84852: GO 84939
84854: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
84855: LD_ADDR_VAR 0 8
84859: PUSH
84860: LD_VAR 0 2
84864: PPUSH
84865: LD_INT 2
84867: PUSH
84868: LD_INT 30
84870: PUSH
84871: LD_INT 32
84873: PUSH
84874: EMPTY
84875: LIST
84876: LIST
84877: PUSH
84878: LD_INT 30
84880: PUSH
84881: LD_INT 31
84883: PUSH
84884: EMPTY
84885: LIST
84886: LIST
84887: PUSH
84888: EMPTY
84889: LIST
84890: LIST
84891: LIST
84892: PPUSH
84893: CALL_OW 72
84897: PUSH
84898: LD_VAR 0 2
84902: PPUSH
84903: LD_INT 2
84905: PUSH
84906: LD_INT 30
84908: PUSH
84909: LD_INT 4
84911: PUSH
84912: EMPTY
84913: LIST
84914: LIST
84915: PUSH
84916: LD_INT 30
84918: PUSH
84919: LD_INT 5
84921: PUSH
84922: EMPTY
84923: LIST
84924: LIST
84925: PUSH
84926: EMPTY
84927: LIST
84928: LIST
84929: LIST
84930: PPUSH
84931: CALL_OW 72
84935: ADD
84936: ST_TO_ADDR
84937: GO 85185
84939: LD_INT 2
84941: DOUBLE
84942: EQUAL
84943: IFTRUE 84953
84945: LD_INT 16
84947: DOUBLE
84948: EQUAL
84949: IFTRUE 84953
84951: GO 84999
84953: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
84954: LD_ADDR_VAR 0 8
84958: PUSH
84959: LD_VAR 0 2
84963: PPUSH
84964: LD_INT 2
84966: PUSH
84967: LD_INT 30
84969: PUSH
84970: LD_INT 0
84972: PUSH
84973: EMPTY
84974: LIST
84975: LIST
84976: PUSH
84977: LD_INT 30
84979: PUSH
84980: LD_INT 1
84982: PUSH
84983: EMPTY
84984: LIST
84985: LIST
84986: PUSH
84987: EMPTY
84988: LIST
84989: LIST
84990: LIST
84991: PPUSH
84992: CALL_OW 72
84996: ST_TO_ADDR
84997: GO 85185
84999: LD_INT 3
85001: DOUBLE
85002: EQUAL
85003: IFTRUE 85007
85005: GO 85053
85007: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
85008: LD_ADDR_VAR 0 8
85012: PUSH
85013: LD_VAR 0 2
85017: PPUSH
85018: LD_INT 2
85020: PUSH
85021: LD_INT 30
85023: PUSH
85024: LD_INT 2
85026: PUSH
85027: EMPTY
85028: LIST
85029: LIST
85030: PUSH
85031: LD_INT 30
85033: PUSH
85034: LD_INT 3
85036: PUSH
85037: EMPTY
85038: LIST
85039: LIST
85040: PUSH
85041: EMPTY
85042: LIST
85043: LIST
85044: LIST
85045: PPUSH
85046: CALL_OW 72
85050: ST_TO_ADDR
85051: GO 85185
85053: LD_INT 4
85055: DOUBLE
85056: EQUAL
85057: IFTRUE 85061
85059: GO 85118
85061: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
85062: LD_ADDR_VAR 0 8
85066: PUSH
85067: LD_VAR 0 2
85071: PPUSH
85072: LD_INT 2
85074: PUSH
85075: LD_INT 30
85077: PUSH
85078: LD_INT 6
85080: PUSH
85081: EMPTY
85082: LIST
85083: LIST
85084: PUSH
85085: LD_INT 30
85087: PUSH
85088: LD_INT 7
85090: PUSH
85091: EMPTY
85092: LIST
85093: LIST
85094: PUSH
85095: LD_INT 30
85097: PUSH
85098: LD_INT 8
85100: PUSH
85101: EMPTY
85102: LIST
85103: LIST
85104: PUSH
85105: EMPTY
85106: LIST
85107: LIST
85108: LIST
85109: LIST
85110: PPUSH
85111: CALL_OW 72
85115: ST_TO_ADDR
85116: GO 85185
85118: LD_INT 5
85120: DOUBLE
85121: EQUAL
85122: IFTRUE 85138
85124: LD_INT 8
85126: DOUBLE
85127: EQUAL
85128: IFTRUE 85138
85130: LD_INT 9
85132: DOUBLE
85133: EQUAL
85134: IFTRUE 85138
85136: GO 85184
85138: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
85139: LD_ADDR_VAR 0 8
85143: PUSH
85144: LD_VAR 0 2
85148: PPUSH
85149: LD_INT 2
85151: PUSH
85152: LD_INT 30
85154: PUSH
85155: LD_INT 4
85157: PUSH
85158: EMPTY
85159: LIST
85160: LIST
85161: PUSH
85162: LD_INT 30
85164: PUSH
85165: LD_INT 5
85167: PUSH
85168: EMPTY
85169: LIST
85170: LIST
85171: PUSH
85172: EMPTY
85173: LIST
85174: LIST
85175: LIST
85176: PPUSH
85177: CALL_OW 72
85181: ST_TO_ADDR
85182: GO 85185
85184: POP
// if not tmp then
85185: LD_VAR 0 8
85189: NOT
85190: IFFALSE 85194
// exit ;
85192: GO 85696
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
85194: LD_VAR 0 4
85198: PUSH
85199: LD_INT 1
85201: PUSH
85202: LD_INT 15
85204: PUSH
85205: EMPTY
85206: LIST
85207: LIST
85208: IN
85209: PUSH
85210: LD_EXP 45
85214: PUSH
85215: LD_VAR 0 1
85219: ARRAY
85220: AND
85221: IFFALSE 85377
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
85223: LD_ADDR_VAR 0 9
85227: PUSH
85228: LD_EXP 45
85232: PUSH
85233: LD_VAR 0 1
85237: ARRAY
85238: PUSH
85239: LD_INT 1
85241: ARRAY
85242: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
85243: LD_VAR 0 9
85247: PUSH
85248: LD_EXP 46
85252: PUSH
85253: LD_VAR 0 1
85257: ARRAY
85258: IN
85259: NOT
85260: IFFALSE 85375
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
85262: LD_ADDR_EXP 46
85266: PUSH
85267: LD_EXP 46
85271: PPUSH
85272: LD_VAR 0 1
85276: PUSH
85277: LD_EXP 46
85281: PUSH
85282: LD_VAR 0 1
85286: ARRAY
85287: PUSH
85288: LD_INT 1
85290: PLUS
85291: PUSH
85292: EMPTY
85293: LIST
85294: LIST
85295: PPUSH
85296: LD_VAR 0 9
85300: PPUSH
85301: CALL 26652 0 3
85305: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
85306: LD_ADDR_EXP 45
85310: PUSH
85311: LD_EXP 45
85315: PPUSH
85316: LD_VAR 0 1
85320: PPUSH
85321: LD_EXP 45
85325: PUSH
85326: LD_VAR 0 1
85330: ARRAY
85331: PUSH
85332: LD_VAR 0 9
85336: DIFF
85337: PPUSH
85338: CALL_OW 1
85342: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
85343: LD_VAR 0 3
85347: PPUSH
85348: LD_EXP 46
85352: PUSH
85353: LD_VAR 0 1
85357: ARRAY
85358: PUSH
85359: LD_EXP 46
85363: PUSH
85364: LD_VAR 0 1
85368: ARRAY
85369: ARRAY
85370: PPUSH
85371: CALL_OW 120
// end ; exit ;
85375: GO 85696
// end ; if tmp > 1 then
85377: LD_VAR 0 8
85381: PUSH
85382: LD_INT 1
85384: GREATER
85385: IFFALSE 85489
// for i = 2 to tmp do
85387: LD_ADDR_VAR 0 6
85391: PUSH
85392: DOUBLE
85393: LD_INT 2
85395: DEC
85396: ST_TO_ADDR
85397: LD_VAR 0 8
85401: PUSH
85402: FOR_TO
85403: IFFALSE 85487
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
85405: LD_VAR 0 8
85409: PUSH
85410: LD_VAR 0 6
85414: ARRAY
85415: PPUSH
85416: CALL_OW 461
85420: PUSH
85421: LD_INT 6
85423: EQUAL
85424: IFFALSE 85485
// begin x := tmp [ i ] ;
85426: LD_ADDR_VAR 0 9
85430: PUSH
85431: LD_VAR 0 8
85435: PUSH
85436: LD_VAR 0 6
85440: ARRAY
85441: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
85442: LD_ADDR_VAR 0 8
85446: PUSH
85447: LD_VAR 0 8
85451: PPUSH
85452: LD_VAR 0 6
85456: PPUSH
85457: CALL_OW 3
85461: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
85462: LD_ADDR_VAR 0 8
85466: PUSH
85467: LD_VAR 0 8
85471: PPUSH
85472: LD_INT 1
85474: PPUSH
85475: LD_VAR 0 9
85479: PPUSH
85480: CALL_OW 2
85484: ST_TO_ADDR
// end ;
85485: GO 85402
85487: POP
85488: POP
// for i in tmp do
85489: LD_ADDR_VAR 0 6
85493: PUSH
85494: LD_VAR 0 8
85498: PUSH
85499: FOR_IN
85500: IFFALSE 85569
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
85502: LD_VAR 0 6
85506: PPUSH
85507: CALL_OW 313
85511: PUSH
85512: LD_INT 6
85514: LESS
85515: PUSH
85516: LD_VAR 0 6
85520: PPUSH
85521: CALL_OW 266
85525: PUSH
85526: LD_INT 31
85528: PUSH
85529: LD_INT 32
85531: PUSH
85532: EMPTY
85533: LIST
85534: LIST
85535: IN
85536: NOT
85537: AND
85538: PUSH
85539: LD_VAR 0 6
85543: PPUSH
85544: CALL_OW 313
85548: PUSH
85549: LD_INT 0
85551: EQUAL
85552: OR
85553: IFFALSE 85567
// begin j := i ;
85555: LD_ADDR_VAR 0 7
85559: PUSH
85560: LD_VAR 0 6
85564: ST_TO_ADDR
// break ;
85565: GO 85569
// end ; end ;
85567: GO 85499
85569: POP
85570: POP
// if j then
85571: LD_VAR 0 7
85575: IFFALSE 85593
// ComEnterUnit ( unit , j ) else
85577: LD_VAR 0 3
85581: PPUSH
85582: LD_VAR 0 7
85586: PPUSH
85587: CALL_OW 120
85591: GO 85696
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
85593: LD_ADDR_VAR 0 10
85597: PUSH
85598: LD_VAR 0 2
85602: PPUSH
85603: LD_INT 2
85605: PUSH
85606: LD_INT 30
85608: PUSH
85609: LD_INT 0
85611: PUSH
85612: EMPTY
85613: LIST
85614: LIST
85615: PUSH
85616: LD_INT 30
85618: PUSH
85619: LD_INT 1
85621: PUSH
85622: EMPTY
85623: LIST
85624: LIST
85625: PUSH
85626: EMPTY
85627: LIST
85628: LIST
85629: LIST
85630: PPUSH
85631: CALL_OW 72
85635: ST_TO_ADDR
// if depot then
85636: LD_VAR 0 10
85640: IFFALSE 85696
// begin depot := NearestUnitToUnit ( depot , unit ) ;
85642: LD_ADDR_VAR 0 10
85646: PUSH
85647: LD_VAR 0 10
85651: PPUSH
85652: LD_VAR 0 3
85656: PPUSH
85657: CALL_OW 74
85661: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
85662: LD_VAR 0 3
85666: PPUSH
85667: LD_VAR 0 10
85671: PPUSH
85672: CALL_OW 296
85676: PUSH
85677: LD_INT 10
85679: GREATER
85680: IFFALSE 85696
// ComStandNearbyBuilding ( unit , depot ) ;
85682: LD_VAR 0 3
85686: PPUSH
85687: LD_VAR 0 10
85691: PPUSH
85692: CALL 20855 0 2
// end ; end ; end ;
85696: LD_VAR 0 5
85700: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
85701: LD_INT 0
85703: PPUSH
85704: PPUSH
85705: PPUSH
85706: PPUSH
// if not mc_bases then
85707: LD_EXP 36
85711: NOT
85712: IFFALSE 85716
// exit ;
85714: GO 85955
// for i = 1 to mc_bases do
85716: LD_ADDR_VAR 0 2
85720: PUSH
85721: DOUBLE
85722: LD_INT 1
85724: DEC
85725: ST_TO_ADDR
85726: LD_EXP 36
85730: PUSH
85731: FOR_TO
85732: IFFALSE 85953
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
85734: LD_ADDR_VAR 0 4
85738: PUSH
85739: LD_EXP 36
85743: PUSH
85744: LD_VAR 0 2
85748: ARRAY
85749: PPUSH
85750: LD_INT 21
85752: PUSH
85753: LD_INT 1
85755: PUSH
85756: EMPTY
85757: LIST
85758: LIST
85759: PPUSH
85760: CALL_OW 72
85764: PUSH
85765: LD_EXP 65
85769: PUSH
85770: LD_VAR 0 2
85774: ARRAY
85775: UNION
85776: ST_TO_ADDR
// if not tmp then
85777: LD_VAR 0 4
85781: NOT
85782: IFFALSE 85786
// continue ;
85784: GO 85731
// for j in tmp do
85786: LD_ADDR_VAR 0 3
85790: PUSH
85791: LD_VAR 0 4
85795: PUSH
85796: FOR_IN
85797: IFFALSE 85949
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
85799: LD_VAR 0 3
85803: PPUSH
85804: CALL_OW 110
85808: NOT
85809: PUSH
85810: LD_VAR 0 3
85814: PPUSH
85815: CALL_OW 314
85819: NOT
85820: AND
85821: PUSH
85822: LD_VAR 0 3
85826: PPUSH
85827: CALL_OW 311
85831: NOT
85832: AND
85833: PUSH
85834: LD_VAR 0 3
85838: PPUSH
85839: CALL_OW 310
85843: NOT
85844: AND
85845: PUSH
85846: LD_VAR 0 3
85850: PUSH
85851: LD_EXP 39
85855: PUSH
85856: LD_VAR 0 2
85860: ARRAY
85861: PUSH
85862: LD_INT 1
85864: ARRAY
85865: IN
85866: NOT
85867: AND
85868: PUSH
85869: LD_VAR 0 3
85873: PUSH
85874: LD_EXP 39
85878: PUSH
85879: LD_VAR 0 2
85883: ARRAY
85884: PUSH
85885: LD_INT 2
85887: ARRAY
85888: IN
85889: NOT
85890: AND
85891: PUSH
85892: LD_VAR 0 3
85896: PUSH
85897: LD_EXP 48
85901: PUSH
85902: LD_VAR 0 2
85906: ARRAY
85907: IN
85908: NOT
85909: AND
85910: IFFALSE 85947
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
85912: LD_VAR 0 2
85916: PPUSH
85917: LD_EXP 36
85921: PUSH
85922: LD_VAR 0 2
85926: ARRAY
85927: PPUSH
85928: LD_VAR 0 3
85932: PPUSH
85933: LD_VAR 0 3
85937: PPUSH
85938: CALL_OW 257
85942: PPUSH
85943: CALL 84719 0 4
// end ;
85947: GO 85796
85949: POP
85950: POP
// end ;
85951: GO 85731
85953: POP
85954: POP
// end ;
85955: LD_VAR 0 1
85959: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
85960: LD_INT 0
85962: PPUSH
85963: PPUSH
85964: PPUSH
85965: PPUSH
85966: PPUSH
85967: PPUSH
// if not mc_bases [ base ] then
85968: LD_EXP 36
85972: PUSH
85973: LD_VAR 0 1
85977: ARRAY
85978: NOT
85979: IFFALSE 85983
// exit ;
85981: GO 86165
// tmp := [ ] ;
85983: LD_ADDR_VAR 0 6
85987: PUSH
85988: EMPTY
85989: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
85990: LD_ADDR_VAR 0 7
85994: PUSH
85995: LD_VAR 0 3
85999: PPUSH
86000: LD_INT 0
86002: PPUSH
86003: CALL_OW 517
86007: ST_TO_ADDR
// if not list then
86008: LD_VAR 0 7
86012: NOT
86013: IFFALSE 86017
// exit ;
86015: GO 86165
// for i = 1 to amount do
86017: LD_ADDR_VAR 0 5
86021: PUSH
86022: DOUBLE
86023: LD_INT 1
86025: DEC
86026: ST_TO_ADDR
86027: LD_VAR 0 2
86031: PUSH
86032: FOR_TO
86033: IFFALSE 86113
// begin x := rand ( 1 , list [ 1 ] ) ;
86035: LD_ADDR_VAR 0 8
86039: PUSH
86040: LD_INT 1
86042: PPUSH
86043: LD_VAR 0 7
86047: PUSH
86048: LD_INT 1
86050: ARRAY
86051: PPUSH
86052: CALL_OW 12
86056: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
86057: LD_ADDR_VAR 0 6
86061: PUSH
86062: LD_VAR 0 6
86066: PPUSH
86067: LD_VAR 0 5
86071: PPUSH
86072: LD_VAR 0 7
86076: PUSH
86077: LD_INT 1
86079: ARRAY
86080: PUSH
86081: LD_VAR 0 8
86085: ARRAY
86086: PUSH
86087: LD_VAR 0 7
86091: PUSH
86092: LD_INT 2
86094: ARRAY
86095: PUSH
86096: LD_VAR 0 8
86100: ARRAY
86101: PUSH
86102: EMPTY
86103: LIST
86104: LIST
86105: PPUSH
86106: CALL_OW 1
86110: ST_TO_ADDR
// end ;
86111: GO 86032
86113: POP
86114: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
86115: LD_ADDR_EXP 49
86119: PUSH
86120: LD_EXP 49
86124: PPUSH
86125: LD_VAR 0 1
86129: PPUSH
86130: LD_VAR 0 6
86134: PPUSH
86135: CALL_OW 1
86139: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
86140: LD_ADDR_EXP 51
86144: PUSH
86145: LD_EXP 51
86149: PPUSH
86150: LD_VAR 0 1
86154: PPUSH
86155: LD_VAR 0 3
86159: PPUSH
86160: CALL_OW 1
86164: ST_TO_ADDR
// end ;
86165: LD_VAR 0 4
86169: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
86170: LD_INT 0
86172: PPUSH
// if not mc_bases [ base ] then
86173: LD_EXP 36
86177: PUSH
86178: LD_VAR 0 1
86182: ARRAY
86183: NOT
86184: IFFALSE 86188
// exit ;
86186: GO 86213
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
86188: LD_ADDR_EXP 41
86192: PUSH
86193: LD_EXP 41
86197: PPUSH
86198: LD_VAR 0 1
86202: PPUSH
86203: LD_VAR 0 2
86207: PPUSH
86208: CALL_OW 1
86212: ST_TO_ADDR
// end ;
86213: LD_VAR 0 3
86217: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
86218: LD_INT 0
86220: PPUSH
// if not mc_bases [ base ] then
86221: LD_EXP 36
86225: PUSH
86226: LD_VAR 0 1
86230: ARRAY
86231: NOT
86232: IFFALSE 86236
// exit ;
86234: GO 86273
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
86236: LD_ADDR_EXP 41
86240: PUSH
86241: LD_EXP 41
86245: PPUSH
86246: LD_VAR 0 1
86250: PPUSH
86251: LD_EXP 41
86255: PUSH
86256: LD_VAR 0 1
86260: ARRAY
86261: PUSH
86262: LD_VAR 0 2
86266: UNION
86267: PPUSH
86268: CALL_OW 1
86272: ST_TO_ADDR
// end ;
86273: LD_VAR 0 3
86277: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
86278: LD_INT 0
86280: PPUSH
// if not mc_bases [ base ] then
86281: LD_EXP 36
86285: PUSH
86286: LD_VAR 0 1
86290: ARRAY
86291: NOT
86292: IFFALSE 86296
// exit ;
86294: GO 86321
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
86296: LD_ADDR_EXP 57
86300: PUSH
86301: LD_EXP 57
86305: PPUSH
86306: LD_VAR 0 1
86310: PPUSH
86311: LD_VAR 0 2
86315: PPUSH
86316: CALL_OW 1
86320: ST_TO_ADDR
// end ;
86321: LD_VAR 0 3
86325: RET
// export function MC_InsertProduceList ( base , components ) ; begin
86326: LD_INT 0
86328: PPUSH
// if not mc_bases [ base ] then
86329: LD_EXP 36
86333: PUSH
86334: LD_VAR 0 1
86338: ARRAY
86339: NOT
86340: IFFALSE 86344
// exit ;
86342: GO 86381
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
86344: LD_ADDR_EXP 57
86348: PUSH
86349: LD_EXP 57
86353: PPUSH
86354: LD_VAR 0 1
86358: PPUSH
86359: LD_EXP 57
86363: PUSH
86364: LD_VAR 0 1
86368: ARRAY
86369: PUSH
86370: LD_VAR 0 2
86374: ADD
86375: PPUSH
86376: CALL_OW 1
86380: ST_TO_ADDR
// end ;
86381: LD_VAR 0 3
86385: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
86386: LD_INT 0
86388: PPUSH
// if not mc_bases [ base ] then
86389: LD_EXP 36
86393: PUSH
86394: LD_VAR 0 1
86398: ARRAY
86399: NOT
86400: IFFALSE 86404
// exit ;
86402: GO 86458
// mc_defender := Replace ( mc_defender , base , deflist ) ;
86404: LD_ADDR_EXP 58
86408: PUSH
86409: LD_EXP 58
86413: PPUSH
86414: LD_VAR 0 1
86418: PPUSH
86419: LD_VAR 0 2
86423: PPUSH
86424: CALL_OW 1
86428: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
86429: LD_ADDR_EXP 47
86433: PUSH
86434: LD_EXP 47
86438: PPUSH
86439: LD_VAR 0 1
86443: PPUSH
86444: LD_VAR 0 2
86448: PUSH
86449: LD_INT 0
86451: PLUS
86452: PPUSH
86453: CALL_OW 1
86457: ST_TO_ADDR
// end ;
86458: LD_VAR 0 3
86462: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
86463: LD_INT 0
86465: PPUSH
// if not mc_bases [ base ] then
86466: LD_EXP 36
86470: PUSH
86471: LD_VAR 0 1
86475: ARRAY
86476: NOT
86477: IFFALSE 86481
// exit ;
86479: GO 86506
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
86481: LD_ADDR_EXP 47
86485: PUSH
86486: LD_EXP 47
86490: PPUSH
86491: LD_VAR 0 1
86495: PPUSH
86496: LD_VAR 0 2
86500: PPUSH
86501: CALL_OW 1
86505: ST_TO_ADDR
// end ;
86506: LD_VAR 0 3
86510: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
86511: LD_INT 0
86513: PPUSH
86514: PPUSH
86515: PPUSH
86516: PPUSH
// if not mc_bases [ base ] then
86517: LD_EXP 36
86521: PUSH
86522: LD_VAR 0 1
86526: ARRAY
86527: NOT
86528: IFFALSE 86532
// exit ;
86530: GO 86597
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
86532: LD_ADDR_EXP 56
86536: PUSH
86537: LD_EXP 56
86541: PPUSH
86542: LD_VAR 0 1
86546: PUSH
86547: LD_EXP 56
86551: PUSH
86552: LD_VAR 0 1
86556: ARRAY
86557: PUSH
86558: LD_INT 1
86560: PLUS
86561: PUSH
86562: EMPTY
86563: LIST
86564: LIST
86565: PPUSH
86566: LD_VAR 0 1
86570: PUSH
86571: LD_VAR 0 2
86575: PUSH
86576: LD_VAR 0 3
86580: PUSH
86581: LD_VAR 0 4
86585: PUSH
86586: EMPTY
86587: LIST
86588: LIST
86589: LIST
86590: LIST
86591: PPUSH
86592: CALL 26652 0 3
86596: ST_TO_ADDR
// end ;
86597: LD_VAR 0 5
86601: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
86602: LD_INT 0
86604: PPUSH
// if not mc_bases [ base ] then
86605: LD_EXP 36
86609: PUSH
86610: LD_VAR 0 1
86614: ARRAY
86615: NOT
86616: IFFALSE 86620
// exit ;
86618: GO 86645
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
86620: LD_ADDR_EXP 73
86624: PUSH
86625: LD_EXP 73
86629: PPUSH
86630: LD_VAR 0 1
86634: PPUSH
86635: LD_VAR 0 2
86639: PPUSH
86640: CALL_OW 1
86644: ST_TO_ADDR
// end ;
86645: LD_VAR 0 3
86649: RET
// export function MC_GetMinesField ( base ) ; begin
86650: LD_INT 0
86652: PPUSH
// result := mc_mines [ base ] ;
86653: LD_ADDR_VAR 0 2
86657: PUSH
86658: LD_EXP 49
86662: PUSH
86663: LD_VAR 0 1
86667: ARRAY
86668: ST_TO_ADDR
// end ;
86669: LD_VAR 0 2
86673: RET
// export function MC_GetProduceList ( base ) ; begin
86674: LD_INT 0
86676: PPUSH
// result := mc_produce [ base ] ;
86677: LD_ADDR_VAR 0 2
86681: PUSH
86682: LD_EXP 57
86686: PUSH
86687: LD_VAR 0 1
86691: ARRAY
86692: ST_TO_ADDR
// end ;
86693: LD_VAR 0 2
86697: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
86698: LD_INT 0
86700: PPUSH
86701: PPUSH
// if not mc_bases then
86702: LD_EXP 36
86706: NOT
86707: IFFALSE 86711
// exit ;
86709: GO 86776
// if mc_bases [ base ] then
86711: LD_EXP 36
86715: PUSH
86716: LD_VAR 0 1
86720: ARRAY
86721: IFFALSE 86776
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
86723: LD_ADDR_VAR 0 3
86727: PUSH
86728: LD_EXP 36
86732: PUSH
86733: LD_VAR 0 1
86737: ARRAY
86738: PPUSH
86739: LD_INT 30
86741: PUSH
86742: LD_VAR 0 2
86746: PUSH
86747: EMPTY
86748: LIST
86749: LIST
86750: PPUSH
86751: CALL_OW 72
86755: ST_TO_ADDR
// if result then
86756: LD_VAR 0 3
86760: IFFALSE 86776
// result := result [ 1 ] ;
86762: LD_ADDR_VAR 0 3
86766: PUSH
86767: LD_VAR 0 3
86771: PUSH
86772: LD_INT 1
86774: ARRAY
86775: ST_TO_ADDR
// end ; end ;
86776: LD_VAR 0 3
86780: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
86781: LD_INT 0
86783: PPUSH
86784: PPUSH
// if not mc_bases then
86785: LD_EXP 36
86789: NOT
86790: IFFALSE 86794
// exit ;
86792: GO 86839
// if mc_bases [ base ] then
86794: LD_EXP 36
86798: PUSH
86799: LD_VAR 0 1
86803: ARRAY
86804: IFFALSE 86839
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
86806: LD_ADDR_VAR 0 3
86810: PUSH
86811: LD_EXP 36
86815: PUSH
86816: LD_VAR 0 1
86820: ARRAY
86821: PPUSH
86822: LD_INT 30
86824: PUSH
86825: LD_VAR 0 2
86829: PUSH
86830: EMPTY
86831: LIST
86832: LIST
86833: PPUSH
86834: CALL_OW 72
86838: ST_TO_ADDR
// end ;
86839: LD_VAR 0 3
86843: RET
// export function MC_SetTame ( base , area ) ; begin
86844: LD_INT 0
86846: PPUSH
// if not mc_bases or not base then
86847: LD_EXP 36
86851: NOT
86852: PUSH
86853: LD_VAR 0 1
86857: NOT
86858: OR
86859: IFFALSE 86863
// exit ;
86861: GO 86888
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
86863: LD_ADDR_EXP 64
86867: PUSH
86868: LD_EXP 64
86872: PPUSH
86873: LD_VAR 0 1
86877: PPUSH
86878: LD_VAR 0 2
86882: PPUSH
86883: CALL_OW 1
86887: ST_TO_ADDR
// end ;
86888: LD_VAR 0 3
86892: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
86893: LD_INT 0
86895: PPUSH
86896: PPUSH
// if not mc_bases or not base then
86897: LD_EXP 36
86901: NOT
86902: PUSH
86903: LD_VAR 0 1
86907: NOT
86908: OR
86909: IFFALSE 86913
// exit ;
86911: GO 87015
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
86913: LD_ADDR_VAR 0 4
86917: PUSH
86918: LD_EXP 36
86922: PUSH
86923: LD_VAR 0 1
86927: ARRAY
86928: PPUSH
86929: LD_INT 30
86931: PUSH
86932: LD_VAR 0 2
86936: PUSH
86937: EMPTY
86938: LIST
86939: LIST
86940: PPUSH
86941: CALL_OW 72
86945: ST_TO_ADDR
// if not tmp then
86946: LD_VAR 0 4
86950: NOT
86951: IFFALSE 86955
// exit ;
86953: GO 87015
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
86955: LD_ADDR_EXP 68
86959: PUSH
86960: LD_EXP 68
86964: PPUSH
86965: LD_VAR 0 1
86969: PPUSH
86970: LD_EXP 68
86974: PUSH
86975: LD_VAR 0 1
86979: ARRAY
86980: PPUSH
86981: LD_EXP 68
86985: PUSH
86986: LD_VAR 0 1
86990: ARRAY
86991: PUSH
86992: LD_INT 1
86994: PLUS
86995: PPUSH
86996: LD_VAR 0 4
87000: PUSH
87001: LD_INT 1
87003: ARRAY
87004: PPUSH
87005: CALL_OW 2
87009: PPUSH
87010: CALL_OW 1
87014: ST_TO_ADDR
// end ;
87015: LD_VAR 0 3
87019: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
87020: LD_INT 0
87022: PPUSH
87023: PPUSH
// if not mc_bases or not base or not kinds then
87024: LD_EXP 36
87028: NOT
87029: PUSH
87030: LD_VAR 0 1
87034: NOT
87035: OR
87036: PUSH
87037: LD_VAR 0 2
87041: NOT
87042: OR
87043: IFFALSE 87047
// exit ;
87045: GO 87108
// for i in kinds do
87047: LD_ADDR_VAR 0 4
87051: PUSH
87052: LD_VAR 0 2
87056: PUSH
87057: FOR_IN
87058: IFFALSE 87106
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
87060: LD_ADDR_EXP 70
87064: PUSH
87065: LD_EXP 70
87069: PPUSH
87070: LD_VAR 0 1
87074: PUSH
87075: LD_EXP 70
87079: PUSH
87080: LD_VAR 0 1
87084: ARRAY
87085: PUSH
87086: LD_INT 1
87088: PLUS
87089: PUSH
87090: EMPTY
87091: LIST
87092: LIST
87093: PPUSH
87094: LD_VAR 0 4
87098: PPUSH
87099: CALL 26652 0 3
87103: ST_TO_ADDR
87104: GO 87057
87106: POP
87107: POP
// end ;
87108: LD_VAR 0 3
87112: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
87113: LD_INT 0
87115: PPUSH
// if not mc_bases or not base or not areas then
87116: LD_EXP 36
87120: NOT
87121: PUSH
87122: LD_VAR 0 1
87126: NOT
87127: OR
87128: PUSH
87129: LD_VAR 0 2
87133: NOT
87134: OR
87135: IFFALSE 87139
// exit ;
87137: GO 87164
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
87139: LD_ADDR_EXP 54
87143: PUSH
87144: LD_EXP 54
87148: PPUSH
87149: LD_VAR 0 1
87153: PPUSH
87154: LD_VAR 0 2
87158: PPUSH
87159: CALL_OW 1
87163: ST_TO_ADDR
// end ;
87164: LD_VAR 0 3
87168: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
87169: LD_INT 0
87171: PPUSH
// if not mc_bases or not base or not teleports_exit then
87172: LD_EXP 36
87176: NOT
87177: PUSH
87178: LD_VAR 0 1
87182: NOT
87183: OR
87184: PUSH
87185: LD_VAR 0 2
87189: NOT
87190: OR
87191: IFFALSE 87195
// exit ;
87193: GO 87220
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
87195: LD_ADDR_EXP 71
87199: PUSH
87200: LD_EXP 71
87204: PPUSH
87205: LD_VAR 0 1
87209: PPUSH
87210: LD_VAR 0 2
87214: PPUSH
87215: CALL_OW 1
87219: ST_TO_ADDR
// end ;
87220: LD_VAR 0 3
87224: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
87225: LD_INT 0
87227: PPUSH
87228: PPUSH
87229: PPUSH
// if not mc_bases or not base or not ext_list then
87230: LD_EXP 36
87234: NOT
87235: PUSH
87236: LD_VAR 0 1
87240: NOT
87241: OR
87242: PUSH
87243: LD_VAR 0 5
87247: NOT
87248: OR
87249: IFFALSE 87253
// exit ;
87251: GO 87426
// tmp := GetFacExtXYD ( x , y , d ) ;
87253: LD_ADDR_VAR 0 8
87257: PUSH
87258: LD_VAR 0 2
87262: PPUSH
87263: LD_VAR 0 3
87267: PPUSH
87268: LD_VAR 0 4
87272: PPUSH
87273: CALL 60040 0 3
87277: ST_TO_ADDR
// if not tmp then
87278: LD_VAR 0 8
87282: NOT
87283: IFFALSE 87287
// exit ;
87285: GO 87426
// for i in tmp do
87287: LD_ADDR_VAR 0 7
87291: PUSH
87292: LD_VAR 0 8
87296: PUSH
87297: FOR_IN
87298: IFFALSE 87424
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
87300: LD_ADDR_EXP 41
87304: PUSH
87305: LD_EXP 41
87309: PPUSH
87310: LD_VAR 0 1
87314: PPUSH
87315: LD_EXP 41
87319: PUSH
87320: LD_VAR 0 1
87324: ARRAY
87325: PPUSH
87326: LD_EXP 41
87330: PUSH
87331: LD_VAR 0 1
87335: ARRAY
87336: PUSH
87337: LD_INT 1
87339: PLUS
87340: PPUSH
87341: LD_VAR 0 5
87345: PUSH
87346: LD_INT 1
87348: ARRAY
87349: PUSH
87350: LD_VAR 0 7
87354: PUSH
87355: LD_INT 1
87357: ARRAY
87358: PUSH
87359: LD_VAR 0 7
87363: PUSH
87364: LD_INT 2
87366: ARRAY
87367: PUSH
87368: LD_VAR 0 7
87372: PUSH
87373: LD_INT 3
87375: ARRAY
87376: PUSH
87377: EMPTY
87378: LIST
87379: LIST
87380: LIST
87381: LIST
87382: PPUSH
87383: CALL_OW 2
87387: PPUSH
87388: CALL_OW 1
87392: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
87393: LD_ADDR_VAR 0 5
87397: PUSH
87398: LD_VAR 0 5
87402: PPUSH
87403: LD_INT 1
87405: PPUSH
87406: CALL_OW 3
87410: ST_TO_ADDR
// if not ext_list then
87411: LD_VAR 0 5
87415: NOT
87416: IFFALSE 87422
// exit ;
87418: POP
87419: POP
87420: GO 87426
// end ;
87422: GO 87297
87424: POP
87425: POP
// end ;
87426: LD_VAR 0 6
87430: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
87431: LD_INT 0
87433: PPUSH
// if not mc_bases or not base or not weapon_list then
87434: LD_EXP 36
87438: NOT
87439: PUSH
87440: LD_VAR 0 1
87444: NOT
87445: OR
87446: PUSH
87447: LD_VAR 0 2
87451: NOT
87452: OR
87453: IFFALSE 87457
// exit ;
87455: GO 87482
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
87457: LD_ADDR_EXP 75
87461: PUSH
87462: LD_EXP 75
87466: PPUSH
87467: LD_VAR 0 1
87471: PPUSH
87472: LD_VAR 0 2
87476: PPUSH
87477: CALL_OW 1
87481: ST_TO_ADDR
// end ;
87482: LD_VAR 0 3
87486: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
87487: LD_INT 0
87489: PPUSH
// if not mc_bases or not base or not tech_list then
87490: LD_EXP 36
87494: NOT
87495: PUSH
87496: LD_VAR 0 1
87500: NOT
87501: OR
87502: PUSH
87503: LD_VAR 0 2
87507: NOT
87508: OR
87509: IFFALSE 87513
// exit ;
87511: GO 87538
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
87513: LD_ADDR_EXP 63
87517: PUSH
87518: LD_EXP 63
87522: PPUSH
87523: LD_VAR 0 1
87527: PPUSH
87528: LD_VAR 0 2
87532: PPUSH
87533: CALL_OW 1
87537: ST_TO_ADDR
// end ;
87538: LD_VAR 0 3
87542: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
87543: LD_INT 0
87545: PPUSH
// if not mc_bases or not parking_area or not base then
87546: LD_EXP 36
87550: NOT
87551: PUSH
87552: LD_VAR 0 2
87556: NOT
87557: OR
87558: PUSH
87559: LD_VAR 0 1
87563: NOT
87564: OR
87565: IFFALSE 87569
// exit ;
87567: GO 87594
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
87569: LD_ADDR_EXP 60
87573: PUSH
87574: LD_EXP 60
87578: PPUSH
87579: LD_VAR 0 1
87583: PPUSH
87584: LD_VAR 0 2
87588: PPUSH
87589: CALL_OW 1
87593: ST_TO_ADDR
// end ;
87594: LD_VAR 0 3
87598: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
87599: LD_INT 0
87601: PPUSH
// if not mc_bases or not base or not scan_area then
87602: LD_EXP 36
87606: NOT
87607: PUSH
87608: LD_VAR 0 1
87612: NOT
87613: OR
87614: PUSH
87615: LD_VAR 0 2
87619: NOT
87620: OR
87621: IFFALSE 87625
// exit ;
87623: GO 87650
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
87625: LD_ADDR_EXP 61
87629: PUSH
87630: LD_EXP 61
87634: PPUSH
87635: LD_VAR 0 1
87639: PPUSH
87640: LD_VAR 0 2
87644: PPUSH
87645: CALL_OW 1
87649: ST_TO_ADDR
// end ;
87650: LD_VAR 0 3
87654: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
87655: LD_INT 0
87657: PPUSH
87658: PPUSH
// if not mc_bases or not base then
87659: LD_EXP 36
87663: NOT
87664: PUSH
87665: LD_VAR 0 1
87669: NOT
87670: OR
87671: IFFALSE 87675
// exit ;
87673: GO 87739
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
87675: LD_ADDR_VAR 0 3
87679: PUSH
87680: LD_INT 1
87682: PUSH
87683: LD_INT 2
87685: PUSH
87686: LD_INT 3
87688: PUSH
87689: LD_INT 4
87691: PUSH
87692: LD_INT 11
87694: PUSH
87695: EMPTY
87696: LIST
87697: LIST
87698: LIST
87699: LIST
87700: LIST
87701: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
87702: LD_ADDR_EXP 63
87706: PUSH
87707: LD_EXP 63
87711: PPUSH
87712: LD_VAR 0 1
87716: PPUSH
87717: LD_EXP 63
87721: PUSH
87722: LD_VAR 0 1
87726: ARRAY
87727: PUSH
87728: LD_VAR 0 3
87732: DIFF
87733: PPUSH
87734: CALL_OW 1
87738: ST_TO_ADDR
// end ;
87739: LD_VAR 0 2
87743: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
87744: LD_INT 0
87746: PPUSH
// result := mc_vehicles [ base ] ;
87747: LD_ADDR_VAR 0 3
87751: PUSH
87752: LD_EXP 55
87756: PUSH
87757: LD_VAR 0 1
87761: ARRAY
87762: ST_TO_ADDR
// if onlyCombat then
87763: LD_VAR 0 2
87767: IFFALSE 87932
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
87769: LD_ADDR_VAR 0 3
87773: PUSH
87774: LD_VAR 0 3
87778: PUSH
87779: LD_VAR 0 3
87783: PPUSH
87784: LD_INT 2
87786: PUSH
87787: LD_INT 34
87789: PUSH
87790: LD_INT 12
87792: PUSH
87793: EMPTY
87794: LIST
87795: LIST
87796: PUSH
87797: LD_INT 34
87799: PUSH
87800: LD_INT 51
87802: PUSH
87803: EMPTY
87804: LIST
87805: LIST
87806: PUSH
87807: LD_INT 34
87809: PUSH
87810: LD_EXP 30
87814: PUSH
87815: EMPTY
87816: LIST
87817: LIST
87818: PUSH
87819: LD_INT 34
87821: PUSH
87822: LD_INT 32
87824: PUSH
87825: EMPTY
87826: LIST
87827: LIST
87828: PUSH
87829: LD_INT 34
87831: PUSH
87832: LD_INT 13
87834: PUSH
87835: EMPTY
87836: LIST
87837: LIST
87838: PUSH
87839: LD_INT 34
87841: PUSH
87842: LD_INT 52
87844: PUSH
87845: EMPTY
87846: LIST
87847: LIST
87848: PUSH
87849: LD_INT 34
87851: PUSH
87852: LD_INT 14
87854: PUSH
87855: EMPTY
87856: LIST
87857: LIST
87858: PUSH
87859: LD_INT 34
87861: PUSH
87862: LD_INT 53
87864: PUSH
87865: EMPTY
87866: LIST
87867: LIST
87868: PUSH
87869: LD_INT 34
87871: PUSH
87872: LD_EXP 29
87876: PUSH
87877: EMPTY
87878: LIST
87879: LIST
87880: PUSH
87881: LD_INT 34
87883: PUSH
87884: LD_INT 31
87886: PUSH
87887: EMPTY
87888: LIST
87889: LIST
87890: PUSH
87891: LD_INT 34
87893: PUSH
87894: LD_INT 48
87896: PUSH
87897: EMPTY
87898: LIST
87899: LIST
87900: PUSH
87901: LD_INT 34
87903: PUSH
87904: LD_INT 8
87906: PUSH
87907: EMPTY
87908: LIST
87909: LIST
87910: PUSH
87911: EMPTY
87912: LIST
87913: LIST
87914: LIST
87915: LIST
87916: LIST
87917: LIST
87918: LIST
87919: LIST
87920: LIST
87921: LIST
87922: LIST
87923: LIST
87924: LIST
87925: PPUSH
87926: CALL_OW 72
87930: DIFF
87931: ST_TO_ADDR
// end ; end_of_file
87932: LD_VAR 0 3
87936: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
87937: LD_INT 0
87939: PPUSH
87940: PPUSH
87941: PPUSH
// if not mc_bases or not skirmish then
87942: LD_EXP 36
87946: NOT
87947: PUSH
87948: LD_EXP 34
87952: NOT
87953: OR
87954: IFFALSE 87958
// exit ;
87956: GO 88123
// for i = 1 to mc_bases do
87958: LD_ADDR_VAR 0 4
87962: PUSH
87963: DOUBLE
87964: LD_INT 1
87966: DEC
87967: ST_TO_ADDR
87968: LD_EXP 36
87972: PUSH
87973: FOR_TO
87974: IFFALSE 88121
// begin if sci in mc_bases [ i ] then
87976: LD_VAR 0 2
87980: PUSH
87981: LD_EXP 36
87985: PUSH
87986: LD_VAR 0 4
87990: ARRAY
87991: IN
87992: IFFALSE 88119
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
87994: LD_ADDR_EXP 65
87998: PUSH
87999: LD_EXP 65
88003: PPUSH
88004: LD_VAR 0 4
88008: PUSH
88009: LD_EXP 65
88013: PUSH
88014: LD_VAR 0 4
88018: ARRAY
88019: PUSH
88020: LD_INT 1
88022: PLUS
88023: PUSH
88024: EMPTY
88025: LIST
88026: LIST
88027: PPUSH
88028: LD_VAR 0 1
88032: PPUSH
88033: CALL 26652 0 3
88037: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
88038: LD_ADDR_VAR 0 5
88042: PUSH
88043: LD_EXP 36
88047: PUSH
88048: LD_VAR 0 4
88052: ARRAY
88053: PPUSH
88054: LD_INT 2
88056: PUSH
88057: LD_INT 30
88059: PUSH
88060: LD_INT 0
88062: PUSH
88063: EMPTY
88064: LIST
88065: LIST
88066: PUSH
88067: LD_INT 30
88069: PUSH
88070: LD_INT 1
88072: PUSH
88073: EMPTY
88074: LIST
88075: LIST
88076: PUSH
88077: EMPTY
88078: LIST
88079: LIST
88080: LIST
88081: PPUSH
88082: CALL_OW 72
88086: PPUSH
88087: LD_VAR 0 1
88091: PPUSH
88092: CALL_OW 74
88096: ST_TO_ADDR
// if tmp then
88097: LD_VAR 0 5
88101: IFFALSE 88117
// ComStandNearbyBuilding ( ape , tmp ) ;
88103: LD_VAR 0 1
88107: PPUSH
88108: LD_VAR 0 5
88112: PPUSH
88113: CALL 20855 0 2
// break ;
88117: GO 88121
// end ; end ;
88119: GO 87973
88121: POP
88122: POP
// end ;
88123: LD_VAR 0 3
88127: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
88128: LD_INT 0
88130: PPUSH
88131: PPUSH
88132: PPUSH
// if not mc_bases or not skirmish then
88133: LD_EXP 36
88137: NOT
88138: PUSH
88139: LD_EXP 34
88143: NOT
88144: OR
88145: IFFALSE 88149
// exit ;
88147: GO 88238
// for i = 1 to mc_bases do
88149: LD_ADDR_VAR 0 4
88153: PUSH
88154: DOUBLE
88155: LD_INT 1
88157: DEC
88158: ST_TO_ADDR
88159: LD_EXP 36
88163: PUSH
88164: FOR_TO
88165: IFFALSE 88236
// begin if building in mc_busy_turret_list [ i ] then
88167: LD_VAR 0 1
88171: PUSH
88172: LD_EXP 46
88176: PUSH
88177: LD_VAR 0 4
88181: ARRAY
88182: IN
88183: IFFALSE 88234
// begin tmp := mc_busy_turret_list [ i ] diff building ;
88185: LD_ADDR_VAR 0 5
88189: PUSH
88190: LD_EXP 46
88194: PUSH
88195: LD_VAR 0 4
88199: ARRAY
88200: PUSH
88201: LD_VAR 0 1
88205: DIFF
88206: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
88207: LD_ADDR_EXP 46
88211: PUSH
88212: LD_EXP 46
88216: PPUSH
88217: LD_VAR 0 4
88221: PPUSH
88222: LD_VAR 0 5
88226: PPUSH
88227: CALL_OW 1
88231: ST_TO_ADDR
// break ;
88232: GO 88236
// end ; end ;
88234: GO 88164
88236: POP
88237: POP
// end ;
88238: LD_VAR 0 3
88242: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
88243: LD_INT 0
88245: PPUSH
88246: PPUSH
88247: PPUSH
// if not mc_bases or not skirmish then
88248: LD_EXP 36
88252: NOT
88253: PUSH
88254: LD_EXP 34
88258: NOT
88259: OR
88260: IFFALSE 88264
// exit ;
88262: GO 88463
// for i = 1 to mc_bases do
88264: LD_ADDR_VAR 0 5
88268: PUSH
88269: DOUBLE
88270: LD_INT 1
88272: DEC
88273: ST_TO_ADDR
88274: LD_EXP 36
88278: PUSH
88279: FOR_TO
88280: IFFALSE 88461
// if building in mc_bases [ i ] then
88282: LD_VAR 0 1
88286: PUSH
88287: LD_EXP 36
88291: PUSH
88292: LD_VAR 0 5
88296: ARRAY
88297: IN
88298: IFFALSE 88459
// begin tmp := mc_bases [ i ] diff building ;
88300: LD_ADDR_VAR 0 6
88304: PUSH
88305: LD_EXP 36
88309: PUSH
88310: LD_VAR 0 5
88314: ARRAY
88315: PUSH
88316: LD_VAR 0 1
88320: DIFF
88321: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
88322: LD_ADDR_EXP 36
88326: PUSH
88327: LD_EXP 36
88331: PPUSH
88332: LD_VAR 0 5
88336: PPUSH
88337: LD_VAR 0 6
88341: PPUSH
88342: CALL_OW 1
88346: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
88347: LD_VAR 0 1
88351: PUSH
88352: LD_EXP 44
88356: PUSH
88357: LD_VAR 0 5
88361: ARRAY
88362: IN
88363: IFFALSE 88402
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
88365: LD_ADDR_EXP 44
88369: PUSH
88370: LD_EXP 44
88374: PPUSH
88375: LD_VAR 0 5
88379: PPUSH
88380: LD_EXP 44
88384: PUSH
88385: LD_VAR 0 5
88389: ARRAY
88390: PUSH
88391: LD_VAR 0 1
88395: DIFF
88396: PPUSH
88397: CALL_OW 1
88401: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
88402: LD_VAR 0 1
88406: PUSH
88407: LD_EXP 45
88411: PUSH
88412: LD_VAR 0 5
88416: ARRAY
88417: IN
88418: IFFALSE 88457
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
88420: LD_ADDR_EXP 45
88424: PUSH
88425: LD_EXP 45
88429: PPUSH
88430: LD_VAR 0 5
88434: PPUSH
88435: LD_EXP 45
88439: PUSH
88440: LD_VAR 0 5
88444: ARRAY
88445: PUSH
88446: LD_VAR 0 1
88450: DIFF
88451: PPUSH
88452: CALL_OW 1
88456: ST_TO_ADDR
// break ;
88457: GO 88461
// end ;
88459: GO 88279
88461: POP
88462: POP
// end ;
88463: LD_VAR 0 4
88467: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
88468: LD_INT 0
88470: PPUSH
88471: PPUSH
88472: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
88473: LD_EXP 36
88477: NOT
88478: PUSH
88479: LD_EXP 34
88483: NOT
88484: OR
88485: PUSH
88486: LD_VAR 0 3
88490: PUSH
88491: LD_EXP 62
88495: IN
88496: NOT
88497: OR
88498: IFFALSE 88502
// exit ;
88500: GO 88625
// for i = 1 to mc_vehicles do
88502: LD_ADDR_VAR 0 6
88506: PUSH
88507: DOUBLE
88508: LD_INT 1
88510: DEC
88511: ST_TO_ADDR
88512: LD_EXP 55
88516: PUSH
88517: FOR_TO
88518: IFFALSE 88623
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
88520: LD_VAR 0 2
88524: PUSH
88525: LD_EXP 55
88529: PUSH
88530: LD_VAR 0 6
88534: ARRAY
88535: IN
88536: PUSH
88537: LD_VAR 0 1
88541: PUSH
88542: LD_EXP 55
88546: PUSH
88547: LD_VAR 0 6
88551: ARRAY
88552: IN
88553: OR
88554: IFFALSE 88621
// begin tmp := mc_vehicles [ i ] diff old ;
88556: LD_ADDR_VAR 0 7
88560: PUSH
88561: LD_EXP 55
88565: PUSH
88566: LD_VAR 0 6
88570: ARRAY
88571: PUSH
88572: LD_VAR 0 2
88576: DIFF
88577: ST_TO_ADDR
// tmp := tmp diff new ;
88578: LD_ADDR_VAR 0 7
88582: PUSH
88583: LD_VAR 0 7
88587: PUSH
88588: LD_VAR 0 1
88592: DIFF
88593: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
88594: LD_ADDR_EXP 55
88598: PUSH
88599: LD_EXP 55
88603: PPUSH
88604: LD_VAR 0 6
88608: PPUSH
88609: LD_VAR 0 7
88613: PPUSH
88614: CALL_OW 1
88618: ST_TO_ADDR
// break ;
88619: GO 88623
// end ;
88621: GO 88517
88623: POP
88624: POP
// end ;
88625: LD_VAR 0 5
88629: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
88630: LD_INT 0
88632: PPUSH
88633: PPUSH
88634: PPUSH
88635: PPUSH
// if not mc_bases or not skirmish then
88636: LD_EXP 36
88640: NOT
88641: PUSH
88642: LD_EXP 34
88646: NOT
88647: OR
88648: IFFALSE 88652
// exit ;
88650: GO 89029
// side := GetSide ( vehicle ) ;
88652: LD_ADDR_VAR 0 5
88656: PUSH
88657: LD_VAR 0 1
88661: PPUSH
88662: CALL_OW 255
88666: ST_TO_ADDR
// for i = 1 to mc_bases do
88667: LD_ADDR_VAR 0 4
88671: PUSH
88672: DOUBLE
88673: LD_INT 1
88675: DEC
88676: ST_TO_ADDR
88677: LD_EXP 36
88681: PUSH
88682: FOR_TO
88683: IFFALSE 89027
// begin if factory in mc_bases [ i ] then
88685: LD_VAR 0 2
88689: PUSH
88690: LD_EXP 36
88694: PUSH
88695: LD_VAR 0 4
88699: ARRAY
88700: IN
88701: IFFALSE 89025
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
88703: LD_EXP 58
88707: PUSH
88708: LD_VAR 0 4
88712: ARRAY
88713: PUSH
88714: LD_EXP 47
88718: PUSH
88719: LD_VAR 0 4
88723: ARRAY
88724: LESS
88725: PUSH
88726: LD_VAR 0 1
88730: PPUSH
88731: CALL_OW 264
88735: PUSH
88736: LD_INT 31
88738: PUSH
88739: LD_INT 32
88741: PUSH
88742: LD_INT 51
88744: PUSH
88745: LD_EXP 30
88749: PUSH
88750: LD_INT 12
88752: PUSH
88753: LD_INT 30
88755: PUSH
88756: LD_EXP 29
88760: PUSH
88761: LD_INT 11
88763: PUSH
88764: LD_INT 53
88766: PUSH
88767: LD_INT 14
88769: PUSH
88770: LD_EXP 33
88774: PUSH
88775: LD_INT 29
88777: PUSH
88778: LD_EXP 31
88782: PUSH
88783: LD_INT 13
88785: PUSH
88786: LD_INT 52
88788: PUSH
88789: LD_INT 48
88791: PUSH
88792: LD_INT 8
88794: PUSH
88795: EMPTY
88796: LIST
88797: LIST
88798: LIST
88799: LIST
88800: LIST
88801: LIST
88802: LIST
88803: LIST
88804: LIST
88805: LIST
88806: LIST
88807: LIST
88808: LIST
88809: LIST
88810: LIST
88811: LIST
88812: LIST
88813: IN
88814: NOT
88815: AND
88816: IFFALSE 88864
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
88818: LD_ADDR_EXP 58
88822: PUSH
88823: LD_EXP 58
88827: PPUSH
88828: LD_VAR 0 4
88832: PUSH
88833: LD_EXP 58
88837: PUSH
88838: LD_VAR 0 4
88842: ARRAY
88843: PUSH
88844: LD_INT 1
88846: PLUS
88847: PUSH
88848: EMPTY
88849: LIST
88850: LIST
88851: PPUSH
88852: LD_VAR 0 1
88856: PPUSH
88857: CALL 26652 0 3
88861: ST_TO_ADDR
88862: GO 88908
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
88864: LD_ADDR_EXP 55
88868: PUSH
88869: LD_EXP 55
88873: PPUSH
88874: LD_VAR 0 4
88878: PUSH
88879: LD_EXP 55
88883: PUSH
88884: LD_VAR 0 4
88888: ARRAY
88889: PUSH
88890: LD_INT 1
88892: PLUS
88893: PUSH
88894: EMPTY
88895: LIST
88896: LIST
88897: PPUSH
88898: LD_VAR 0 1
88902: PPUSH
88903: CALL 26652 0 3
88907: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
88908: LD_VAR 0 1
88912: PPUSH
88913: CALL_OW 263
88917: PUSH
88918: LD_INT 2
88920: EQUAL
88921: IFFALSE 88941
// begin repeat wait ( 0 0$1 ) ;
88923: LD_INT 35
88925: PPUSH
88926: CALL_OW 67
// until IsControledBy ( vehicle ) ;
88930: LD_VAR 0 1
88934: PPUSH
88935: CALL_OW 312
88939: IFFALSE 88923
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
88941: LD_VAR 0 1
88945: PPUSH
88946: LD_EXP 60
88950: PUSH
88951: LD_VAR 0 4
88955: ARRAY
88956: PPUSH
88957: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
88961: LD_VAR 0 1
88965: PPUSH
88966: CALL_OW 263
88970: PUSH
88971: LD_INT 1
88973: NONEQUAL
88974: IFFALSE 88978
// break ;
88976: GO 89027
// repeat wait ( 0 0$1 ) ;
88978: LD_INT 35
88980: PPUSH
88981: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
88985: LD_VAR 0 1
88989: PPUSH
88990: LD_EXP 60
88994: PUSH
88995: LD_VAR 0 4
88999: ARRAY
89000: PPUSH
89001: CALL_OW 308
89005: IFFALSE 88978
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
89007: LD_VAR 0 1
89011: PPUSH
89012: CALL_OW 311
89016: PPUSH
89017: CALL_OW 121
// exit ;
89021: POP
89022: POP
89023: GO 89029
// end ; end ;
89025: GO 88682
89027: POP
89028: POP
// end ;
89029: LD_VAR 0 3
89033: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
89034: LD_INT 0
89036: PPUSH
89037: PPUSH
89038: PPUSH
89039: PPUSH
// if not mc_bases or not skirmish then
89040: LD_EXP 36
89044: NOT
89045: PUSH
89046: LD_EXP 34
89050: NOT
89051: OR
89052: IFFALSE 89056
// exit ;
89054: GO 89409
// repeat wait ( 0 0$1 ) ;
89056: LD_INT 35
89058: PPUSH
89059: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
89063: LD_VAR 0 2
89067: PPUSH
89068: LD_VAR 0 3
89072: PPUSH
89073: CALL_OW 284
89077: IFFALSE 89056
// if GetResourceTypeXY ( x , y ) = mat_artefact then
89079: LD_VAR 0 2
89083: PPUSH
89084: LD_VAR 0 3
89088: PPUSH
89089: CALL_OW 283
89093: PUSH
89094: LD_INT 4
89096: EQUAL
89097: IFFALSE 89101
// exit ;
89099: GO 89409
// for i = 1 to mc_bases do
89101: LD_ADDR_VAR 0 7
89105: PUSH
89106: DOUBLE
89107: LD_INT 1
89109: DEC
89110: ST_TO_ADDR
89111: LD_EXP 36
89115: PUSH
89116: FOR_TO
89117: IFFALSE 89407
// begin if mc_crates_area [ i ] then
89119: LD_EXP 54
89123: PUSH
89124: LD_VAR 0 7
89128: ARRAY
89129: IFFALSE 89240
// for j in mc_crates_area [ i ] do
89131: LD_ADDR_VAR 0 8
89135: PUSH
89136: LD_EXP 54
89140: PUSH
89141: LD_VAR 0 7
89145: ARRAY
89146: PUSH
89147: FOR_IN
89148: IFFALSE 89238
// if InArea ( x , y , j ) then
89150: LD_VAR 0 2
89154: PPUSH
89155: LD_VAR 0 3
89159: PPUSH
89160: LD_VAR 0 8
89164: PPUSH
89165: CALL_OW 309
89169: IFFALSE 89236
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
89171: LD_ADDR_EXP 52
89175: PUSH
89176: LD_EXP 52
89180: PPUSH
89181: LD_VAR 0 7
89185: PUSH
89186: LD_EXP 52
89190: PUSH
89191: LD_VAR 0 7
89195: ARRAY
89196: PUSH
89197: LD_INT 1
89199: PLUS
89200: PUSH
89201: EMPTY
89202: LIST
89203: LIST
89204: PPUSH
89205: LD_VAR 0 4
89209: PUSH
89210: LD_VAR 0 2
89214: PUSH
89215: LD_VAR 0 3
89219: PUSH
89220: EMPTY
89221: LIST
89222: LIST
89223: LIST
89224: PPUSH
89225: CALL 26652 0 3
89229: ST_TO_ADDR
// exit ;
89230: POP
89231: POP
89232: POP
89233: POP
89234: GO 89409
// end ;
89236: GO 89147
89238: POP
89239: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
89240: LD_ADDR_VAR 0 9
89244: PUSH
89245: LD_EXP 36
89249: PUSH
89250: LD_VAR 0 7
89254: ARRAY
89255: PPUSH
89256: LD_INT 2
89258: PUSH
89259: LD_INT 30
89261: PUSH
89262: LD_INT 0
89264: PUSH
89265: EMPTY
89266: LIST
89267: LIST
89268: PUSH
89269: LD_INT 30
89271: PUSH
89272: LD_INT 1
89274: PUSH
89275: EMPTY
89276: LIST
89277: LIST
89278: PUSH
89279: EMPTY
89280: LIST
89281: LIST
89282: LIST
89283: PPUSH
89284: CALL_OW 72
89288: ST_TO_ADDR
// if not depot then
89289: LD_VAR 0 9
89293: NOT
89294: IFFALSE 89298
// continue ;
89296: GO 89116
// for j in depot do
89298: LD_ADDR_VAR 0 8
89302: PUSH
89303: LD_VAR 0 9
89307: PUSH
89308: FOR_IN
89309: IFFALSE 89403
// if GetDistUnitXY ( j , x , y ) < 30 then
89311: LD_VAR 0 8
89315: PPUSH
89316: LD_VAR 0 2
89320: PPUSH
89321: LD_VAR 0 3
89325: PPUSH
89326: CALL_OW 297
89330: PUSH
89331: LD_INT 30
89333: LESS
89334: IFFALSE 89401
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
89336: LD_ADDR_EXP 52
89340: PUSH
89341: LD_EXP 52
89345: PPUSH
89346: LD_VAR 0 7
89350: PUSH
89351: LD_EXP 52
89355: PUSH
89356: LD_VAR 0 7
89360: ARRAY
89361: PUSH
89362: LD_INT 1
89364: PLUS
89365: PUSH
89366: EMPTY
89367: LIST
89368: LIST
89369: PPUSH
89370: LD_VAR 0 4
89374: PUSH
89375: LD_VAR 0 2
89379: PUSH
89380: LD_VAR 0 3
89384: PUSH
89385: EMPTY
89386: LIST
89387: LIST
89388: LIST
89389: PPUSH
89390: CALL 26652 0 3
89394: ST_TO_ADDR
// exit ;
89395: POP
89396: POP
89397: POP
89398: POP
89399: GO 89409
// end ;
89401: GO 89308
89403: POP
89404: POP
// end ;
89405: GO 89116
89407: POP
89408: POP
// end ;
89409: LD_VAR 0 6
89413: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
89414: LD_INT 0
89416: PPUSH
89417: PPUSH
89418: PPUSH
89419: PPUSH
// if not mc_bases or not skirmish then
89420: LD_EXP 36
89424: NOT
89425: PUSH
89426: LD_EXP 34
89430: NOT
89431: OR
89432: IFFALSE 89436
// exit ;
89434: GO 89713
// side := GetSide ( lab ) ;
89436: LD_ADDR_VAR 0 4
89440: PUSH
89441: LD_VAR 0 2
89445: PPUSH
89446: CALL_OW 255
89450: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
89451: LD_VAR 0 4
89455: PUSH
89456: LD_EXP 62
89460: IN
89461: NOT
89462: PUSH
89463: LD_EXP 63
89467: NOT
89468: OR
89469: PUSH
89470: LD_EXP 36
89474: NOT
89475: OR
89476: IFFALSE 89480
// exit ;
89478: GO 89713
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
89480: LD_ADDR_EXP 63
89484: PUSH
89485: LD_EXP 63
89489: PPUSH
89490: LD_VAR 0 4
89494: PPUSH
89495: LD_EXP 63
89499: PUSH
89500: LD_VAR 0 4
89504: ARRAY
89505: PUSH
89506: LD_VAR 0 1
89510: DIFF
89511: PPUSH
89512: CALL_OW 1
89516: ST_TO_ADDR
// for i = 1 to mc_bases do
89517: LD_ADDR_VAR 0 5
89521: PUSH
89522: DOUBLE
89523: LD_INT 1
89525: DEC
89526: ST_TO_ADDR
89527: LD_EXP 36
89531: PUSH
89532: FOR_TO
89533: IFFALSE 89711
// begin if lab in mc_bases [ i ] then
89535: LD_VAR 0 2
89539: PUSH
89540: LD_EXP 36
89544: PUSH
89545: LD_VAR 0 5
89549: ARRAY
89550: IN
89551: IFFALSE 89709
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
89553: LD_VAR 0 1
89557: PUSH
89558: LD_INT 11
89560: PUSH
89561: LD_INT 4
89563: PUSH
89564: LD_INT 3
89566: PUSH
89567: LD_INT 2
89569: PUSH
89570: EMPTY
89571: LIST
89572: LIST
89573: LIST
89574: LIST
89575: IN
89576: PUSH
89577: LD_EXP 66
89581: PUSH
89582: LD_VAR 0 5
89586: ARRAY
89587: AND
89588: IFFALSE 89709
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
89590: LD_ADDR_VAR 0 6
89594: PUSH
89595: LD_EXP 66
89599: PUSH
89600: LD_VAR 0 5
89604: ARRAY
89605: PUSH
89606: LD_INT 1
89608: ARRAY
89609: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
89610: LD_ADDR_EXP 66
89614: PUSH
89615: LD_EXP 66
89619: PPUSH
89620: LD_VAR 0 5
89624: PPUSH
89625: EMPTY
89626: PPUSH
89627: CALL_OW 1
89631: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
89632: LD_VAR 0 6
89636: PPUSH
89637: LD_INT 0
89639: PPUSH
89640: CALL_OW 109
// ComExitBuilding ( tmp ) ;
89644: LD_VAR 0 6
89648: PPUSH
89649: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
89653: LD_ADDR_EXP 65
89657: PUSH
89658: LD_EXP 65
89662: PPUSH
89663: LD_VAR 0 5
89667: PPUSH
89668: LD_EXP 65
89672: PUSH
89673: LD_VAR 0 5
89677: ARRAY
89678: PPUSH
89679: LD_INT 1
89681: PPUSH
89682: LD_VAR 0 6
89686: PPUSH
89687: CALL_OW 2
89691: PPUSH
89692: CALL_OW 1
89696: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
89697: LD_VAR 0 5
89701: PPUSH
89702: LD_INT 112
89704: PPUSH
89705: CALL 66709 0 2
// end ; end ; end ;
89709: GO 89532
89711: POP
89712: POP
// end ;
89713: LD_VAR 0 3
89717: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
89718: LD_INT 0
89720: PPUSH
89721: PPUSH
89722: PPUSH
89723: PPUSH
89724: PPUSH
89725: PPUSH
89726: PPUSH
89727: PPUSH
// if not mc_bases or not skirmish then
89728: LD_EXP 36
89732: NOT
89733: PUSH
89734: LD_EXP 34
89738: NOT
89739: OR
89740: IFFALSE 89744
// exit ;
89742: GO 91115
// for i = 1 to mc_bases do
89744: LD_ADDR_VAR 0 3
89748: PUSH
89749: DOUBLE
89750: LD_INT 1
89752: DEC
89753: ST_TO_ADDR
89754: LD_EXP 36
89758: PUSH
89759: FOR_TO
89760: IFFALSE 91113
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
89762: LD_VAR 0 1
89766: PUSH
89767: LD_EXP 36
89771: PUSH
89772: LD_VAR 0 3
89776: ARRAY
89777: IN
89778: PUSH
89779: LD_VAR 0 1
89783: PUSH
89784: LD_EXP 43
89788: PUSH
89789: LD_VAR 0 3
89793: ARRAY
89794: IN
89795: OR
89796: PUSH
89797: LD_VAR 0 1
89801: PUSH
89802: LD_EXP 58
89806: PUSH
89807: LD_VAR 0 3
89811: ARRAY
89812: IN
89813: OR
89814: PUSH
89815: LD_VAR 0 1
89819: PUSH
89820: LD_EXP 55
89824: PUSH
89825: LD_VAR 0 3
89829: ARRAY
89830: IN
89831: OR
89832: PUSH
89833: LD_VAR 0 1
89837: PUSH
89838: LD_EXP 65
89842: PUSH
89843: LD_VAR 0 3
89847: ARRAY
89848: IN
89849: OR
89850: PUSH
89851: LD_VAR 0 1
89855: PUSH
89856: LD_EXP 66
89860: PUSH
89861: LD_VAR 0 3
89865: ARRAY
89866: IN
89867: OR
89868: IFFALSE 91111
// begin if un in mc_ape [ i ] then
89870: LD_VAR 0 1
89874: PUSH
89875: LD_EXP 65
89879: PUSH
89880: LD_VAR 0 3
89884: ARRAY
89885: IN
89886: IFFALSE 89925
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
89888: LD_ADDR_EXP 65
89892: PUSH
89893: LD_EXP 65
89897: PPUSH
89898: LD_VAR 0 3
89902: PPUSH
89903: LD_EXP 65
89907: PUSH
89908: LD_VAR 0 3
89912: ARRAY
89913: PUSH
89914: LD_VAR 0 1
89918: DIFF
89919: PPUSH
89920: CALL_OW 1
89924: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
89925: LD_VAR 0 1
89929: PUSH
89930: LD_EXP 66
89934: PUSH
89935: LD_VAR 0 3
89939: ARRAY
89940: IN
89941: IFFALSE 89965
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
89943: LD_ADDR_EXP 66
89947: PUSH
89948: LD_EXP 66
89952: PPUSH
89953: LD_VAR 0 3
89957: PPUSH
89958: EMPTY
89959: PPUSH
89960: CALL_OW 1
89964: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
89965: LD_VAR 0 1
89969: PPUSH
89970: CALL_OW 247
89974: PUSH
89975: LD_INT 2
89977: EQUAL
89978: PUSH
89979: LD_VAR 0 1
89983: PPUSH
89984: CALL_OW 110
89988: PUSH
89989: LD_INT 20
89991: EQUAL
89992: PUSH
89993: LD_VAR 0 1
89997: PUSH
89998: LD_EXP 58
90002: PUSH
90003: LD_VAR 0 3
90007: ARRAY
90008: IN
90009: OR
90010: PUSH
90011: LD_VAR 0 1
90015: PPUSH
90016: CALL_OW 264
90020: PUSH
90021: LD_INT 12
90023: PUSH
90024: LD_INT 51
90026: PUSH
90027: LD_EXP 30
90031: PUSH
90032: LD_INT 32
90034: PUSH
90035: LD_INT 13
90037: PUSH
90038: LD_INT 52
90040: PUSH
90041: LD_INT 31
90043: PUSH
90044: EMPTY
90045: LIST
90046: LIST
90047: LIST
90048: LIST
90049: LIST
90050: LIST
90051: LIST
90052: IN
90053: OR
90054: AND
90055: IFFALSE 90363
// begin if un in mc_defender [ i ] then
90057: LD_VAR 0 1
90061: PUSH
90062: LD_EXP 58
90066: PUSH
90067: LD_VAR 0 3
90071: ARRAY
90072: IN
90073: IFFALSE 90112
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
90075: LD_ADDR_EXP 58
90079: PUSH
90080: LD_EXP 58
90084: PPUSH
90085: LD_VAR 0 3
90089: PPUSH
90090: LD_EXP 58
90094: PUSH
90095: LD_VAR 0 3
90099: ARRAY
90100: PUSH
90101: LD_VAR 0 1
90105: DIFF
90106: PPUSH
90107: CALL_OW 1
90111: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
90112: LD_ADDR_VAR 0 8
90116: PUSH
90117: LD_VAR 0 3
90121: PPUSH
90122: LD_INT 3
90124: PPUSH
90125: CALL 86781 0 2
90129: ST_TO_ADDR
// if fac then
90130: LD_VAR 0 8
90134: IFFALSE 90363
// begin for j in fac do
90136: LD_ADDR_VAR 0 4
90140: PUSH
90141: LD_VAR 0 8
90145: PUSH
90146: FOR_IN
90147: IFFALSE 90361
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
90149: LD_ADDR_VAR 0 9
90153: PUSH
90154: LD_VAR 0 8
90158: PPUSH
90159: LD_VAR 0 1
90163: PPUSH
90164: CALL_OW 265
90168: PPUSH
90169: LD_VAR 0 1
90173: PPUSH
90174: CALL_OW 262
90178: PPUSH
90179: LD_VAR 0 1
90183: PPUSH
90184: CALL_OW 263
90188: PPUSH
90189: LD_VAR 0 1
90193: PPUSH
90194: CALL_OW 264
90198: PPUSH
90199: CALL 24184 0 5
90203: ST_TO_ADDR
// if components then
90204: LD_VAR 0 9
90208: IFFALSE 90359
// begin if GetWeapon ( un ) = ar_control_tower then
90210: LD_VAR 0 1
90214: PPUSH
90215: CALL_OW 264
90219: PUSH
90220: LD_INT 31
90222: EQUAL
90223: IFFALSE 90340
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
90225: LD_VAR 0 1
90229: PPUSH
90230: CALL_OW 311
90234: PPUSH
90235: LD_INT 0
90237: PPUSH
90238: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
90242: LD_ADDR_EXP 76
90246: PUSH
90247: LD_EXP 76
90251: PPUSH
90252: LD_VAR 0 3
90256: PPUSH
90257: LD_EXP 76
90261: PUSH
90262: LD_VAR 0 3
90266: ARRAY
90267: PUSH
90268: LD_VAR 0 1
90272: PPUSH
90273: CALL_OW 311
90277: DIFF
90278: PPUSH
90279: CALL_OW 1
90283: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
90284: LD_ADDR_VAR 0 7
90288: PUSH
90289: LD_EXP 57
90293: PUSH
90294: LD_VAR 0 3
90298: ARRAY
90299: PPUSH
90300: LD_INT 1
90302: PPUSH
90303: LD_VAR 0 9
90307: PPUSH
90308: CALL_OW 2
90312: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
90313: LD_ADDR_EXP 57
90317: PUSH
90318: LD_EXP 57
90322: PPUSH
90323: LD_VAR 0 3
90327: PPUSH
90328: LD_VAR 0 7
90332: PPUSH
90333: CALL_OW 1
90337: ST_TO_ADDR
// end else
90338: GO 90357
// MC_InsertProduceList ( i , [ components ] ) ;
90340: LD_VAR 0 3
90344: PPUSH
90345: LD_VAR 0 9
90349: PUSH
90350: EMPTY
90351: LIST
90352: PPUSH
90353: CALL 86326 0 2
// break ;
90357: GO 90361
// end ; end ;
90359: GO 90146
90361: POP
90362: POP
// end ; end ; if GetType ( un ) = unit_building then
90363: LD_VAR 0 1
90367: PPUSH
90368: CALL_OW 247
90372: PUSH
90373: LD_INT 3
90375: EQUAL
90376: IFFALSE 90779
// begin btype := GetBType ( un ) ;
90378: LD_ADDR_VAR 0 5
90382: PUSH
90383: LD_VAR 0 1
90387: PPUSH
90388: CALL_OW 266
90392: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
90393: LD_VAR 0 5
90397: PUSH
90398: LD_INT 29
90400: PUSH
90401: LD_INT 30
90403: PUSH
90404: EMPTY
90405: LIST
90406: LIST
90407: IN
90408: IFFALSE 90481
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
90410: LD_VAR 0 1
90414: PPUSH
90415: CALL_OW 250
90419: PPUSH
90420: LD_VAR 0 1
90424: PPUSH
90425: CALL_OW 251
90429: PPUSH
90430: LD_VAR 0 1
90434: PPUSH
90435: CALL_OW 255
90439: PPUSH
90440: CALL_OW 440
90444: NOT
90445: IFFALSE 90481
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
90447: LD_VAR 0 1
90451: PPUSH
90452: CALL_OW 250
90456: PPUSH
90457: LD_VAR 0 1
90461: PPUSH
90462: CALL_OW 251
90466: PPUSH
90467: LD_VAR 0 1
90471: PPUSH
90472: CALL_OW 255
90476: PPUSH
90477: CALL_OW 441
// end ; if btype = b_warehouse then
90481: LD_VAR 0 5
90485: PUSH
90486: LD_INT 1
90488: EQUAL
90489: IFFALSE 90507
// begin btype := b_depot ;
90491: LD_ADDR_VAR 0 5
90495: PUSH
90496: LD_INT 0
90498: ST_TO_ADDR
// pos := 1 ;
90499: LD_ADDR_VAR 0 6
90503: PUSH
90504: LD_INT 1
90506: ST_TO_ADDR
// end ; if btype = b_factory then
90507: LD_VAR 0 5
90511: PUSH
90512: LD_INT 3
90514: EQUAL
90515: IFFALSE 90533
// begin btype := b_workshop ;
90517: LD_ADDR_VAR 0 5
90521: PUSH
90522: LD_INT 2
90524: ST_TO_ADDR
// pos := 1 ;
90525: LD_ADDR_VAR 0 6
90529: PUSH
90530: LD_INT 1
90532: ST_TO_ADDR
// end ; if btype = b_barracks then
90533: LD_VAR 0 5
90537: PUSH
90538: LD_INT 5
90540: EQUAL
90541: IFFALSE 90551
// btype := b_armoury ;
90543: LD_ADDR_VAR 0 5
90547: PUSH
90548: LD_INT 4
90550: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
90551: LD_VAR 0 5
90555: PUSH
90556: LD_INT 7
90558: PUSH
90559: LD_INT 8
90561: PUSH
90562: EMPTY
90563: LIST
90564: LIST
90565: IN
90566: IFFALSE 90576
// btype := b_lab ;
90568: LD_ADDR_VAR 0 5
90572: PUSH
90573: LD_INT 6
90575: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
90576: LD_ADDR_EXP 41
90580: PUSH
90581: LD_EXP 41
90585: PPUSH
90586: LD_VAR 0 3
90590: PUSH
90591: LD_EXP 41
90595: PUSH
90596: LD_VAR 0 3
90600: ARRAY
90601: PUSH
90602: LD_INT 1
90604: PLUS
90605: PUSH
90606: EMPTY
90607: LIST
90608: LIST
90609: PPUSH
90610: LD_VAR 0 5
90614: PUSH
90615: LD_VAR 0 1
90619: PPUSH
90620: CALL_OW 250
90624: PUSH
90625: LD_VAR 0 1
90629: PPUSH
90630: CALL_OW 251
90634: PUSH
90635: LD_VAR 0 1
90639: PPUSH
90640: CALL_OW 254
90644: PUSH
90645: EMPTY
90646: LIST
90647: LIST
90648: LIST
90649: LIST
90650: PPUSH
90651: CALL 26652 0 3
90655: ST_TO_ADDR
// if pos = 1 then
90656: LD_VAR 0 6
90660: PUSH
90661: LD_INT 1
90663: EQUAL
90664: IFFALSE 90779
// begin tmp := mc_build_list [ i ] ;
90666: LD_ADDR_VAR 0 7
90670: PUSH
90671: LD_EXP 41
90675: PUSH
90676: LD_VAR 0 3
90680: ARRAY
90681: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
90682: LD_VAR 0 7
90686: PPUSH
90687: LD_INT 2
90689: PUSH
90690: LD_INT 30
90692: PUSH
90693: LD_INT 0
90695: PUSH
90696: EMPTY
90697: LIST
90698: LIST
90699: PUSH
90700: LD_INT 30
90702: PUSH
90703: LD_INT 1
90705: PUSH
90706: EMPTY
90707: LIST
90708: LIST
90709: PUSH
90710: EMPTY
90711: LIST
90712: LIST
90713: LIST
90714: PPUSH
90715: CALL_OW 72
90719: IFFALSE 90729
// pos := 2 ;
90721: LD_ADDR_VAR 0 6
90725: PUSH
90726: LD_INT 2
90728: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
90729: LD_ADDR_VAR 0 7
90733: PUSH
90734: LD_VAR 0 7
90738: PPUSH
90739: LD_VAR 0 6
90743: PPUSH
90744: LD_VAR 0 7
90748: PPUSH
90749: CALL 26978 0 3
90753: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
90754: LD_ADDR_EXP 41
90758: PUSH
90759: LD_EXP 41
90763: PPUSH
90764: LD_VAR 0 3
90768: PPUSH
90769: LD_VAR 0 7
90773: PPUSH
90774: CALL_OW 1
90778: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
90779: LD_VAR 0 1
90783: PUSH
90784: LD_EXP 36
90788: PUSH
90789: LD_VAR 0 3
90793: ARRAY
90794: IN
90795: IFFALSE 90834
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
90797: LD_ADDR_EXP 36
90801: PUSH
90802: LD_EXP 36
90806: PPUSH
90807: LD_VAR 0 3
90811: PPUSH
90812: LD_EXP 36
90816: PUSH
90817: LD_VAR 0 3
90821: ARRAY
90822: PUSH
90823: LD_VAR 0 1
90827: DIFF
90828: PPUSH
90829: CALL_OW 1
90833: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
90834: LD_VAR 0 1
90838: PUSH
90839: LD_EXP 43
90843: PUSH
90844: LD_VAR 0 3
90848: ARRAY
90849: IN
90850: IFFALSE 90889
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
90852: LD_ADDR_EXP 43
90856: PUSH
90857: LD_EXP 43
90861: PPUSH
90862: LD_VAR 0 3
90866: PPUSH
90867: LD_EXP 43
90871: PUSH
90872: LD_VAR 0 3
90876: ARRAY
90877: PUSH
90878: LD_VAR 0 1
90882: DIFF
90883: PPUSH
90884: CALL_OW 1
90888: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
90889: LD_VAR 0 1
90893: PUSH
90894: LD_EXP 55
90898: PUSH
90899: LD_VAR 0 3
90903: ARRAY
90904: IN
90905: IFFALSE 90944
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
90907: LD_ADDR_EXP 55
90911: PUSH
90912: LD_EXP 55
90916: PPUSH
90917: LD_VAR 0 3
90921: PPUSH
90922: LD_EXP 55
90926: PUSH
90927: LD_VAR 0 3
90931: ARRAY
90932: PUSH
90933: LD_VAR 0 1
90937: DIFF
90938: PPUSH
90939: CALL_OW 1
90943: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
90944: LD_VAR 0 1
90948: PUSH
90949: LD_EXP 58
90953: PUSH
90954: LD_VAR 0 3
90958: ARRAY
90959: IN
90960: IFFALSE 90999
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
90962: LD_ADDR_EXP 58
90966: PUSH
90967: LD_EXP 58
90971: PPUSH
90972: LD_VAR 0 3
90976: PPUSH
90977: LD_EXP 58
90981: PUSH
90982: LD_VAR 0 3
90986: ARRAY
90987: PUSH
90988: LD_VAR 0 1
90992: DIFF
90993: PPUSH
90994: CALL_OW 1
90998: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
90999: LD_VAR 0 1
91003: PUSH
91004: LD_EXP 45
91008: PUSH
91009: LD_VAR 0 3
91013: ARRAY
91014: IN
91015: IFFALSE 91054
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
91017: LD_ADDR_EXP 45
91021: PUSH
91022: LD_EXP 45
91026: PPUSH
91027: LD_VAR 0 3
91031: PPUSH
91032: LD_EXP 45
91036: PUSH
91037: LD_VAR 0 3
91041: ARRAY
91042: PUSH
91043: LD_VAR 0 1
91047: DIFF
91048: PPUSH
91049: CALL_OW 1
91053: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
91054: LD_VAR 0 1
91058: PUSH
91059: LD_EXP 44
91063: PUSH
91064: LD_VAR 0 3
91068: ARRAY
91069: IN
91070: IFFALSE 91109
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
91072: LD_ADDR_EXP 44
91076: PUSH
91077: LD_EXP 44
91081: PPUSH
91082: LD_VAR 0 3
91086: PPUSH
91087: LD_EXP 44
91091: PUSH
91092: LD_VAR 0 3
91096: ARRAY
91097: PUSH
91098: LD_VAR 0 1
91102: DIFF
91103: PPUSH
91104: CALL_OW 1
91108: ST_TO_ADDR
// end ; break ;
91109: GO 91113
// end ;
91111: GO 89759
91113: POP
91114: POP
// end ;
91115: LD_VAR 0 2
91119: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
91120: LD_INT 0
91122: PPUSH
91123: PPUSH
91124: PPUSH
// if not mc_bases or not skirmish then
91125: LD_EXP 36
91129: NOT
91130: PUSH
91131: LD_EXP 34
91135: NOT
91136: OR
91137: IFFALSE 91141
// exit ;
91139: GO 91356
// for i = 1 to mc_bases do
91141: LD_ADDR_VAR 0 3
91145: PUSH
91146: DOUBLE
91147: LD_INT 1
91149: DEC
91150: ST_TO_ADDR
91151: LD_EXP 36
91155: PUSH
91156: FOR_TO
91157: IFFALSE 91354
// begin if building in mc_construct_list [ i ] then
91159: LD_VAR 0 1
91163: PUSH
91164: LD_EXP 43
91168: PUSH
91169: LD_VAR 0 3
91173: ARRAY
91174: IN
91175: IFFALSE 91352
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
91177: LD_ADDR_EXP 43
91181: PUSH
91182: LD_EXP 43
91186: PPUSH
91187: LD_VAR 0 3
91191: PPUSH
91192: LD_EXP 43
91196: PUSH
91197: LD_VAR 0 3
91201: ARRAY
91202: PUSH
91203: LD_VAR 0 1
91207: DIFF
91208: PPUSH
91209: CALL_OW 1
91213: ST_TO_ADDR
// if building in mc_lab [ i ] then
91214: LD_VAR 0 1
91218: PUSH
91219: LD_EXP 69
91223: PUSH
91224: LD_VAR 0 3
91228: ARRAY
91229: IN
91230: IFFALSE 91285
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
91232: LD_ADDR_EXP 70
91236: PUSH
91237: LD_EXP 70
91241: PPUSH
91242: LD_VAR 0 3
91246: PPUSH
91247: LD_EXP 70
91251: PUSH
91252: LD_VAR 0 3
91256: ARRAY
91257: PPUSH
91258: LD_INT 1
91260: PPUSH
91261: LD_EXP 70
91265: PUSH
91266: LD_VAR 0 3
91270: ARRAY
91271: PPUSH
91272: LD_INT 0
91274: PPUSH
91275: CALL 26070 0 4
91279: PPUSH
91280: CALL_OW 1
91284: ST_TO_ADDR
// if not building in mc_bases [ i ] then
91285: LD_VAR 0 1
91289: PUSH
91290: LD_EXP 36
91294: PUSH
91295: LD_VAR 0 3
91299: ARRAY
91300: IN
91301: NOT
91302: IFFALSE 91348
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
91304: LD_ADDR_EXP 36
91308: PUSH
91309: LD_EXP 36
91313: PPUSH
91314: LD_VAR 0 3
91318: PUSH
91319: LD_EXP 36
91323: PUSH
91324: LD_VAR 0 3
91328: ARRAY
91329: PUSH
91330: LD_INT 1
91332: PLUS
91333: PUSH
91334: EMPTY
91335: LIST
91336: LIST
91337: PPUSH
91338: LD_VAR 0 1
91342: PPUSH
91343: CALL 26652 0 3
91347: ST_TO_ADDR
// exit ;
91348: POP
91349: POP
91350: GO 91356
// end ; end ;
91352: GO 91156
91354: POP
91355: POP
// end ;
91356: LD_VAR 0 2
91360: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
91361: LD_INT 0
91363: PPUSH
91364: PPUSH
91365: PPUSH
91366: PPUSH
91367: PPUSH
91368: PPUSH
91369: PPUSH
// if not mc_bases or not skirmish then
91370: LD_EXP 36
91374: NOT
91375: PUSH
91376: LD_EXP 34
91380: NOT
91381: OR
91382: IFFALSE 91386
// exit ;
91384: GO 92047
// for i = 1 to mc_bases do
91386: LD_ADDR_VAR 0 3
91390: PUSH
91391: DOUBLE
91392: LD_INT 1
91394: DEC
91395: ST_TO_ADDR
91396: LD_EXP 36
91400: PUSH
91401: FOR_TO
91402: IFFALSE 92045
// begin if building in mc_construct_list [ i ] then
91404: LD_VAR 0 1
91408: PUSH
91409: LD_EXP 43
91413: PUSH
91414: LD_VAR 0 3
91418: ARRAY
91419: IN
91420: IFFALSE 92043
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
91422: LD_ADDR_EXP 43
91426: PUSH
91427: LD_EXP 43
91431: PPUSH
91432: LD_VAR 0 3
91436: PPUSH
91437: LD_EXP 43
91441: PUSH
91442: LD_VAR 0 3
91446: ARRAY
91447: PUSH
91448: LD_VAR 0 1
91452: DIFF
91453: PPUSH
91454: CALL_OW 1
91458: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
91459: LD_ADDR_EXP 36
91463: PUSH
91464: LD_EXP 36
91468: PPUSH
91469: LD_VAR 0 3
91473: PUSH
91474: LD_EXP 36
91478: PUSH
91479: LD_VAR 0 3
91483: ARRAY
91484: PUSH
91485: LD_INT 1
91487: PLUS
91488: PUSH
91489: EMPTY
91490: LIST
91491: LIST
91492: PPUSH
91493: LD_VAR 0 1
91497: PPUSH
91498: CALL 26652 0 3
91502: ST_TO_ADDR
// btype := GetBType ( building ) ;
91503: LD_ADDR_VAR 0 5
91507: PUSH
91508: LD_VAR 0 1
91512: PPUSH
91513: CALL_OW 266
91517: ST_TO_ADDR
// side := GetSide ( building ) ;
91518: LD_ADDR_VAR 0 8
91522: PUSH
91523: LD_VAR 0 1
91527: PPUSH
91528: CALL_OW 255
91532: ST_TO_ADDR
// if btype = b_lab then
91533: LD_VAR 0 5
91537: PUSH
91538: LD_INT 6
91540: EQUAL
91541: IFFALSE 91591
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
91543: LD_ADDR_EXP 69
91547: PUSH
91548: LD_EXP 69
91552: PPUSH
91553: LD_VAR 0 3
91557: PUSH
91558: LD_EXP 69
91562: PUSH
91563: LD_VAR 0 3
91567: ARRAY
91568: PUSH
91569: LD_INT 1
91571: PLUS
91572: PUSH
91573: EMPTY
91574: LIST
91575: LIST
91576: PPUSH
91577: LD_VAR 0 1
91581: PPUSH
91582: CALL 26652 0 3
91586: ST_TO_ADDR
// exit ;
91587: POP
91588: POP
91589: GO 92047
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
91591: LD_VAR 0 5
91595: PUSH
91596: LD_INT 0
91598: PUSH
91599: LD_INT 2
91601: PUSH
91602: LD_INT 4
91604: PUSH
91605: EMPTY
91606: LIST
91607: LIST
91608: LIST
91609: IN
91610: IFFALSE 91734
// begin if btype = b_armoury then
91612: LD_VAR 0 5
91616: PUSH
91617: LD_INT 4
91619: EQUAL
91620: IFFALSE 91630
// btype := b_barracks ;
91622: LD_ADDR_VAR 0 5
91626: PUSH
91627: LD_INT 5
91629: ST_TO_ADDR
// if btype = b_depot then
91630: LD_VAR 0 5
91634: PUSH
91635: LD_INT 0
91637: EQUAL
91638: IFFALSE 91648
// btype := b_warehouse ;
91640: LD_ADDR_VAR 0 5
91644: PUSH
91645: LD_INT 1
91647: ST_TO_ADDR
// if btype = b_workshop then
91648: LD_VAR 0 5
91652: PUSH
91653: LD_INT 2
91655: EQUAL
91656: IFFALSE 91666
// btype := b_factory ;
91658: LD_ADDR_VAR 0 5
91662: PUSH
91663: LD_INT 3
91665: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
91666: LD_VAR 0 5
91670: PPUSH
91671: LD_VAR 0 8
91675: PPUSH
91676: CALL_OW 323
91680: PUSH
91681: LD_INT 1
91683: EQUAL
91684: IFFALSE 91730
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
91686: LD_ADDR_EXP 68
91690: PUSH
91691: LD_EXP 68
91695: PPUSH
91696: LD_VAR 0 3
91700: PUSH
91701: LD_EXP 68
91705: PUSH
91706: LD_VAR 0 3
91710: ARRAY
91711: PUSH
91712: LD_INT 1
91714: PLUS
91715: PUSH
91716: EMPTY
91717: LIST
91718: LIST
91719: PPUSH
91720: LD_VAR 0 1
91724: PPUSH
91725: CALL 26652 0 3
91729: ST_TO_ADDR
// exit ;
91730: POP
91731: POP
91732: GO 92047
// end ; if btype in [ b_bunker , b_turret ] then
91734: LD_VAR 0 5
91738: PUSH
91739: LD_INT 32
91741: PUSH
91742: LD_INT 33
91744: PUSH
91745: EMPTY
91746: LIST
91747: LIST
91748: IN
91749: IFFALSE 92039
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
91751: LD_ADDR_EXP 44
91755: PUSH
91756: LD_EXP 44
91760: PPUSH
91761: LD_VAR 0 3
91765: PUSH
91766: LD_EXP 44
91770: PUSH
91771: LD_VAR 0 3
91775: ARRAY
91776: PUSH
91777: LD_INT 1
91779: PLUS
91780: PUSH
91781: EMPTY
91782: LIST
91783: LIST
91784: PPUSH
91785: LD_VAR 0 1
91789: PPUSH
91790: CALL 26652 0 3
91794: ST_TO_ADDR
// if btype = b_bunker then
91795: LD_VAR 0 5
91799: PUSH
91800: LD_INT 32
91802: EQUAL
91803: IFFALSE 92039
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
91805: LD_ADDR_EXP 45
91809: PUSH
91810: LD_EXP 45
91814: PPUSH
91815: LD_VAR 0 3
91819: PUSH
91820: LD_EXP 45
91824: PUSH
91825: LD_VAR 0 3
91829: ARRAY
91830: PUSH
91831: LD_INT 1
91833: PLUS
91834: PUSH
91835: EMPTY
91836: LIST
91837: LIST
91838: PPUSH
91839: LD_VAR 0 1
91843: PPUSH
91844: CALL 26652 0 3
91848: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
91849: LD_ADDR_VAR 0 6
91853: PUSH
91854: LD_EXP 36
91858: PUSH
91859: LD_VAR 0 3
91863: ARRAY
91864: PPUSH
91865: LD_INT 25
91867: PUSH
91868: LD_INT 1
91870: PUSH
91871: EMPTY
91872: LIST
91873: LIST
91874: PUSH
91875: LD_INT 3
91877: PUSH
91878: LD_INT 54
91880: PUSH
91881: EMPTY
91882: LIST
91883: PUSH
91884: EMPTY
91885: LIST
91886: LIST
91887: PUSH
91888: EMPTY
91889: LIST
91890: LIST
91891: PPUSH
91892: CALL_OW 72
91896: ST_TO_ADDR
// if tmp then
91897: LD_VAR 0 6
91901: IFFALSE 91907
// exit ;
91903: POP
91904: POP
91905: GO 92047
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
91907: LD_ADDR_VAR 0 6
91911: PUSH
91912: LD_EXP 36
91916: PUSH
91917: LD_VAR 0 3
91921: ARRAY
91922: PPUSH
91923: LD_INT 2
91925: PUSH
91926: LD_INT 30
91928: PUSH
91929: LD_INT 4
91931: PUSH
91932: EMPTY
91933: LIST
91934: LIST
91935: PUSH
91936: LD_INT 30
91938: PUSH
91939: LD_INT 5
91941: PUSH
91942: EMPTY
91943: LIST
91944: LIST
91945: PUSH
91946: EMPTY
91947: LIST
91948: LIST
91949: LIST
91950: PPUSH
91951: CALL_OW 72
91955: ST_TO_ADDR
// if not tmp then
91956: LD_VAR 0 6
91960: NOT
91961: IFFALSE 91967
// exit ;
91963: POP
91964: POP
91965: GO 92047
// for j in tmp do
91967: LD_ADDR_VAR 0 4
91971: PUSH
91972: LD_VAR 0 6
91976: PUSH
91977: FOR_IN
91978: IFFALSE 92037
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
91980: LD_ADDR_VAR 0 7
91984: PUSH
91985: LD_VAR 0 4
91989: PPUSH
91990: CALL_OW 313
91994: PPUSH
91995: LD_INT 25
91997: PUSH
91998: LD_INT 1
92000: PUSH
92001: EMPTY
92002: LIST
92003: LIST
92004: PPUSH
92005: CALL_OW 72
92009: ST_TO_ADDR
// if units then
92010: LD_VAR 0 7
92014: IFFALSE 92035
// begin ComExitBuilding ( units [ 1 ] ) ;
92016: LD_VAR 0 7
92020: PUSH
92021: LD_INT 1
92023: ARRAY
92024: PPUSH
92025: CALL_OW 122
// exit ;
92029: POP
92030: POP
92031: POP
92032: POP
92033: GO 92047
// end ; end ;
92035: GO 91977
92037: POP
92038: POP
// end ; end ; exit ;
92039: POP
92040: POP
92041: GO 92047
// end ; end ;
92043: GO 91401
92045: POP
92046: POP
// end ;
92047: LD_VAR 0 2
92051: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
92052: LD_INT 0
92054: PPUSH
92055: PPUSH
92056: PPUSH
92057: PPUSH
92058: PPUSH
92059: PPUSH
92060: PPUSH
// if not mc_bases or not skirmish then
92061: LD_EXP 36
92065: NOT
92066: PUSH
92067: LD_EXP 34
92071: NOT
92072: OR
92073: IFFALSE 92077
// exit ;
92075: GO 92308
// btype := GetBType ( building ) ;
92077: LD_ADDR_VAR 0 6
92081: PUSH
92082: LD_VAR 0 1
92086: PPUSH
92087: CALL_OW 266
92091: ST_TO_ADDR
// x := GetX ( building ) ;
92092: LD_ADDR_VAR 0 7
92096: PUSH
92097: LD_VAR 0 1
92101: PPUSH
92102: CALL_OW 250
92106: ST_TO_ADDR
// y := GetY ( building ) ;
92107: LD_ADDR_VAR 0 8
92111: PUSH
92112: LD_VAR 0 1
92116: PPUSH
92117: CALL_OW 251
92121: ST_TO_ADDR
// d := GetDir ( building ) ;
92122: LD_ADDR_VAR 0 9
92126: PUSH
92127: LD_VAR 0 1
92131: PPUSH
92132: CALL_OW 254
92136: ST_TO_ADDR
// for i = 1 to mc_bases do
92137: LD_ADDR_VAR 0 4
92141: PUSH
92142: DOUBLE
92143: LD_INT 1
92145: DEC
92146: ST_TO_ADDR
92147: LD_EXP 36
92151: PUSH
92152: FOR_TO
92153: IFFALSE 92306
// begin if not mc_build_list [ i ] then
92155: LD_EXP 41
92159: PUSH
92160: LD_VAR 0 4
92164: ARRAY
92165: NOT
92166: IFFALSE 92170
// continue ;
92168: GO 92152
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
92170: LD_VAR 0 6
92174: PUSH
92175: LD_VAR 0 7
92179: PUSH
92180: LD_VAR 0 8
92184: PUSH
92185: LD_VAR 0 9
92189: PUSH
92190: EMPTY
92191: LIST
92192: LIST
92193: LIST
92194: LIST
92195: PPUSH
92196: LD_EXP 41
92200: PUSH
92201: LD_VAR 0 4
92205: ARRAY
92206: PUSH
92207: LD_INT 1
92209: ARRAY
92210: PPUSH
92211: CALL 32821 0 2
92215: IFFALSE 92304
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
92217: LD_ADDR_EXP 41
92221: PUSH
92222: LD_EXP 41
92226: PPUSH
92227: LD_VAR 0 4
92231: PPUSH
92232: LD_EXP 41
92236: PUSH
92237: LD_VAR 0 4
92241: ARRAY
92242: PPUSH
92243: LD_INT 1
92245: PPUSH
92246: CALL_OW 3
92250: PPUSH
92251: CALL_OW 1
92255: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
92256: LD_ADDR_EXP 43
92260: PUSH
92261: LD_EXP 43
92265: PPUSH
92266: LD_VAR 0 4
92270: PUSH
92271: LD_EXP 43
92275: PUSH
92276: LD_VAR 0 4
92280: ARRAY
92281: PUSH
92282: LD_INT 1
92284: PLUS
92285: PUSH
92286: EMPTY
92287: LIST
92288: LIST
92289: PPUSH
92290: LD_VAR 0 1
92294: PPUSH
92295: CALL 26652 0 3
92299: ST_TO_ADDR
// exit ;
92300: POP
92301: POP
92302: GO 92308
// end ; end ;
92304: GO 92152
92306: POP
92307: POP
// end ;
92308: LD_VAR 0 3
92312: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
92313: LD_INT 0
92315: PPUSH
92316: PPUSH
92317: PPUSH
// if not mc_bases or not skirmish then
92318: LD_EXP 36
92322: NOT
92323: PUSH
92324: LD_EXP 34
92328: NOT
92329: OR
92330: IFFALSE 92334
// exit ;
92332: GO 92524
// for i = 1 to mc_bases do
92334: LD_ADDR_VAR 0 4
92338: PUSH
92339: DOUBLE
92340: LD_INT 1
92342: DEC
92343: ST_TO_ADDR
92344: LD_EXP 36
92348: PUSH
92349: FOR_TO
92350: IFFALSE 92437
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
92352: LD_VAR 0 1
92356: PUSH
92357: LD_EXP 44
92361: PUSH
92362: LD_VAR 0 4
92366: ARRAY
92367: IN
92368: PUSH
92369: LD_VAR 0 1
92373: PUSH
92374: LD_EXP 45
92378: PUSH
92379: LD_VAR 0 4
92383: ARRAY
92384: IN
92385: NOT
92386: AND
92387: IFFALSE 92435
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
92389: LD_ADDR_EXP 45
92393: PUSH
92394: LD_EXP 45
92398: PPUSH
92399: LD_VAR 0 4
92403: PUSH
92404: LD_EXP 45
92408: PUSH
92409: LD_VAR 0 4
92413: ARRAY
92414: PUSH
92415: LD_INT 1
92417: PLUS
92418: PUSH
92419: EMPTY
92420: LIST
92421: LIST
92422: PPUSH
92423: LD_VAR 0 1
92427: PPUSH
92428: CALL 26652 0 3
92432: ST_TO_ADDR
// break ;
92433: GO 92437
// end ; end ;
92435: GO 92349
92437: POP
92438: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
92439: LD_VAR 0 1
92443: PPUSH
92444: CALL_OW 257
92448: PUSH
92449: LD_EXP 62
92453: IN
92454: PUSH
92455: LD_VAR 0 1
92459: PPUSH
92460: CALL_OW 266
92464: PUSH
92465: LD_INT 5
92467: EQUAL
92468: AND
92469: PUSH
92470: LD_VAR 0 2
92474: PPUSH
92475: CALL_OW 110
92479: PUSH
92480: LD_INT 18
92482: NONEQUAL
92483: AND
92484: IFFALSE 92524
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
92486: LD_VAR 0 2
92490: PPUSH
92491: CALL_OW 257
92495: PUSH
92496: LD_INT 5
92498: PUSH
92499: LD_INT 8
92501: PUSH
92502: LD_INT 9
92504: PUSH
92505: EMPTY
92506: LIST
92507: LIST
92508: LIST
92509: IN
92510: IFFALSE 92524
// SetClass ( unit , 1 ) ;
92512: LD_VAR 0 2
92516: PPUSH
92517: LD_INT 1
92519: PPUSH
92520: CALL_OW 336
// end ;
92524: LD_VAR 0 3
92528: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
92529: LD_INT 0
92531: PPUSH
92532: PPUSH
// if not mc_bases or not skirmish then
92533: LD_EXP 36
92537: NOT
92538: PUSH
92539: LD_EXP 34
92543: NOT
92544: OR
92545: IFFALSE 92549
// exit ;
92547: GO 92665
// if GetLives ( abandoned_vehicle ) > 250 then
92549: LD_VAR 0 2
92553: PPUSH
92554: CALL_OW 256
92558: PUSH
92559: LD_INT 250
92561: GREATER
92562: IFFALSE 92566
// exit ;
92564: GO 92665
// for i = 1 to mc_bases do
92566: LD_ADDR_VAR 0 6
92570: PUSH
92571: DOUBLE
92572: LD_INT 1
92574: DEC
92575: ST_TO_ADDR
92576: LD_EXP 36
92580: PUSH
92581: FOR_TO
92582: IFFALSE 92663
// begin if driver in mc_bases [ i ] then
92584: LD_VAR 0 1
92588: PUSH
92589: LD_EXP 36
92593: PUSH
92594: LD_VAR 0 6
92598: ARRAY
92599: IN
92600: IFFALSE 92661
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
92602: LD_VAR 0 1
92606: PPUSH
92607: LD_EXP 36
92611: PUSH
92612: LD_VAR 0 6
92616: ARRAY
92617: PPUSH
92618: LD_INT 2
92620: PUSH
92621: LD_INT 30
92623: PUSH
92624: LD_INT 0
92626: PUSH
92627: EMPTY
92628: LIST
92629: LIST
92630: PUSH
92631: LD_INT 30
92633: PUSH
92634: LD_INT 1
92636: PUSH
92637: EMPTY
92638: LIST
92639: LIST
92640: PUSH
92641: EMPTY
92642: LIST
92643: LIST
92644: LIST
92645: PPUSH
92646: CALL_OW 72
92650: PUSH
92651: LD_INT 1
92653: ARRAY
92654: PPUSH
92655: CALL_OW 112
// break ;
92659: GO 92663
// end ; end ;
92661: GO 92581
92663: POP
92664: POP
// end ; end_of_file end_of_file
92665: LD_VAR 0 5
92669: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
92670: GO 92672
92672: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
92673: LD_STRING initStreamRollete();
92675: PPUSH
92676: CALL_OW 559
// InitStreamMode ;
92680: CALL 92689 0 0
// DefineStreamItems ( ) ;
92684: CALL 93129 0 0
// end ;
92688: END
// function InitStreamMode ; begin
92689: LD_INT 0
92691: PPUSH
// streamModeActive := false ;
92692: LD_ADDR_EXP 79
92696: PUSH
92697: LD_INT 0
92699: ST_TO_ADDR
// normalCounter := 36 ;
92700: LD_ADDR_EXP 80
92704: PUSH
92705: LD_INT 36
92707: ST_TO_ADDR
// hardcoreCounter := 16 ;
92708: LD_ADDR_EXP 81
92712: PUSH
92713: LD_INT 16
92715: ST_TO_ADDR
// sRocket := false ;
92716: LD_ADDR_EXP 84
92720: PUSH
92721: LD_INT 0
92723: ST_TO_ADDR
// sSpeed := false ;
92724: LD_ADDR_EXP 83
92728: PUSH
92729: LD_INT 0
92731: ST_TO_ADDR
// sEngine := false ;
92732: LD_ADDR_EXP 85
92736: PUSH
92737: LD_INT 0
92739: ST_TO_ADDR
// sSpec := false ;
92740: LD_ADDR_EXP 82
92744: PUSH
92745: LD_INT 0
92747: ST_TO_ADDR
// sLevel := false ;
92748: LD_ADDR_EXP 86
92752: PUSH
92753: LD_INT 0
92755: ST_TO_ADDR
// sArmoury := false ;
92756: LD_ADDR_EXP 87
92760: PUSH
92761: LD_INT 0
92763: ST_TO_ADDR
// sRadar := false ;
92764: LD_ADDR_EXP 88
92768: PUSH
92769: LD_INT 0
92771: ST_TO_ADDR
// sBunker := false ;
92772: LD_ADDR_EXP 89
92776: PUSH
92777: LD_INT 0
92779: ST_TO_ADDR
// sHack := false ;
92780: LD_ADDR_EXP 90
92784: PUSH
92785: LD_INT 0
92787: ST_TO_ADDR
// sFire := false ;
92788: LD_ADDR_EXP 91
92792: PUSH
92793: LD_INT 0
92795: ST_TO_ADDR
// sRefresh := false ;
92796: LD_ADDR_EXP 92
92800: PUSH
92801: LD_INT 0
92803: ST_TO_ADDR
// sExp := false ;
92804: LD_ADDR_EXP 93
92808: PUSH
92809: LD_INT 0
92811: ST_TO_ADDR
// sDepot := false ;
92812: LD_ADDR_EXP 94
92816: PUSH
92817: LD_INT 0
92819: ST_TO_ADDR
// sFlag := false ;
92820: LD_ADDR_EXP 95
92824: PUSH
92825: LD_INT 0
92827: ST_TO_ADDR
// sKamikadze := false ;
92828: LD_ADDR_EXP 103
92832: PUSH
92833: LD_INT 0
92835: ST_TO_ADDR
// sTroll := false ;
92836: LD_ADDR_EXP 104
92840: PUSH
92841: LD_INT 0
92843: ST_TO_ADDR
// sSlow := false ;
92844: LD_ADDR_EXP 105
92848: PUSH
92849: LD_INT 0
92851: ST_TO_ADDR
// sLack := false ;
92852: LD_ADDR_EXP 106
92856: PUSH
92857: LD_INT 0
92859: ST_TO_ADDR
// sTank := false ;
92860: LD_ADDR_EXP 108
92864: PUSH
92865: LD_INT 0
92867: ST_TO_ADDR
// sRemote := false ;
92868: LD_ADDR_EXP 109
92872: PUSH
92873: LD_INT 0
92875: ST_TO_ADDR
// sPowell := false ;
92876: LD_ADDR_EXP 110
92880: PUSH
92881: LD_INT 0
92883: ST_TO_ADDR
// sTeleport := false ;
92884: LD_ADDR_EXP 113
92888: PUSH
92889: LD_INT 0
92891: ST_TO_ADDR
// sOilTower := false ;
92892: LD_ADDR_EXP 115
92896: PUSH
92897: LD_INT 0
92899: ST_TO_ADDR
// sShovel := false ;
92900: LD_ADDR_EXP 116
92904: PUSH
92905: LD_INT 0
92907: ST_TO_ADDR
// sSheik := false ;
92908: LD_ADDR_EXP 117
92912: PUSH
92913: LD_INT 0
92915: ST_TO_ADDR
// sEarthquake := false ;
92916: LD_ADDR_EXP 119
92920: PUSH
92921: LD_INT 0
92923: ST_TO_ADDR
// sAI := false ;
92924: LD_ADDR_EXP 120
92928: PUSH
92929: LD_INT 0
92931: ST_TO_ADDR
// sCargo := false ;
92932: LD_ADDR_EXP 123
92936: PUSH
92937: LD_INT 0
92939: ST_TO_ADDR
// sDLaser := false ;
92940: LD_ADDR_EXP 124
92944: PUSH
92945: LD_INT 0
92947: ST_TO_ADDR
// sExchange := false ;
92948: LD_ADDR_EXP 125
92952: PUSH
92953: LD_INT 0
92955: ST_TO_ADDR
// sFac := false ;
92956: LD_ADDR_EXP 126
92960: PUSH
92961: LD_INT 0
92963: ST_TO_ADDR
// sPower := false ;
92964: LD_ADDR_EXP 127
92968: PUSH
92969: LD_INT 0
92971: ST_TO_ADDR
// sRandom := false ;
92972: LD_ADDR_EXP 128
92976: PUSH
92977: LD_INT 0
92979: ST_TO_ADDR
// sShield := false ;
92980: LD_ADDR_EXP 129
92984: PUSH
92985: LD_INT 0
92987: ST_TO_ADDR
// sTime := false ;
92988: LD_ADDR_EXP 130
92992: PUSH
92993: LD_INT 0
92995: ST_TO_ADDR
// sTools := false ;
92996: LD_ADDR_EXP 131
93000: PUSH
93001: LD_INT 0
93003: ST_TO_ADDR
// sSold := false ;
93004: LD_ADDR_EXP 96
93008: PUSH
93009: LD_INT 0
93011: ST_TO_ADDR
// sDiff := false ;
93012: LD_ADDR_EXP 97
93016: PUSH
93017: LD_INT 0
93019: ST_TO_ADDR
// sFog := false ;
93020: LD_ADDR_EXP 100
93024: PUSH
93025: LD_INT 0
93027: ST_TO_ADDR
// sReset := false ;
93028: LD_ADDR_EXP 101
93032: PUSH
93033: LD_INT 0
93035: ST_TO_ADDR
// sSun := false ;
93036: LD_ADDR_EXP 102
93040: PUSH
93041: LD_INT 0
93043: ST_TO_ADDR
// sTiger := false ;
93044: LD_ADDR_EXP 98
93048: PUSH
93049: LD_INT 0
93051: ST_TO_ADDR
// sBomb := false ;
93052: LD_ADDR_EXP 99
93056: PUSH
93057: LD_INT 0
93059: ST_TO_ADDR
// sWound := false ;
93060: LD_ADDR_EXP 107
93064: PUSH
93065: LD_INT 0
93067: ST_TO_ADDR
// sBetray := false ;
93068: LD_ADDR_EXP 111
93072: PUSH
93073: LD_INT 0
93075: ST_TO_ADDR
// sContamin := false ;
93076: LD_ADDR_EXP 112
93080: PUSH
93081: LD_INT 0
93083: ST_TO_ADDR
// sOil := false ;
93084: LD_ADDR_EXP 114
93088: PUSH
93089: LD_INT 0
93091: ST_TO_ADDR
// sStu := false ;
93092: LD_ADDR_EXP 118
93096: PUSH
93097: LD_INT 0
93099: ST_TO_ADDR
// sBazooka := false ;
93100: LD_ADDR_EXP 121
93104: PUSH
93105: LD_INT 0
93107: ST_TO_ADDR
// sMortar := false ;
93108: LD_ADDR_EXP 122
93112: PUSH
93113: LD_INT 0
93115: ST_TO_ADDR
// sRanger := false ;
93116: LD_ADDR_EXP 132
93120: PUSH
93121: LD_INT 0
93123: ST_TO_ADDR
// end ;
93124: LD_VAR 0 1
93128: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
93129: LD_INT 0
93131: PPUSH
93132: PPUSH
93133: PPUSH
93134: PPUSH
93135: PPUSH
// result := [ ] ;
93136: LD_ADDR_VAR 0 1
93140: PUSH
93141: EMPTY
93142: ST_TO_ADDR
// if campaign_id = 1 then
93143: LD_OWVAR 69
93147: PUSH
93148: LD_INT 1
93150: EQUAL
93151: IFFALSE 96089
// begin case mission_number of 1 :
93153: LD_OWVAR 70
93157: PUSH
93158: LD_INT 1
93160: DOUBLE
93161: EQUAL
93162: IFTRUE 93166
93164: GO 93230
93166: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
93167: LD_ADDR_VAR 0 1
93171: PUSH
93172: LD_INT 2
93174: PUSH
93175: LD_INT 4
93177: PUSH
93178: LD_INT 11
93180: PUSH
93181: LD_INT 12
93183: PUSH
93184: LD_INT 15
93186: PUSH
93187: LD_INT 16
93189: PUSH
93190: LD_INT 22
93192: PUSH
93193: LD_INT 23
93195: PUSH
93196: LD_INT 26
93198: PUSH
93199: EMPTY
93200: LIST
93201: LIST
93202: LIST
93203: LIST
93204: LIST
93205: LIST
93206: LIST
93207: LIST
93208: LIST
93209: PUSH
93210: LD_INT 101
93212: PUSH
93213: LD_INT 102
93215: PUSH
93216: LD_INT 106
93218: PUSH
93219: EMPTY
93220: LIST
93221: LIST
93222: LIST
93223: PUSH
93224: EMPTY
93225: LIST
93226: LIST
93227: ST_TO_ADDR
93228: GO 96087
93230: LD_INT 2
93232: DOUBLE
93233: EQUAL
93234: IFTRUE 93238
93236: GO 93310
93238: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
93239: LD_ADDR_VAR 0 1
93243: PUSH
93244: LD_INT 2
93246: PUSH
93247: LD_INT 4
93249: PUSH
93250: LD_INT 11
93252: PUSH
93253: LD_INT 12
93255: PUSH
93256: LD_INT 15
93258: PUSH
93259: LD_INT 16
93261: PUSH
93262: LD_INT 22
93264: PUSH
93265: LD_INT 23
93267: PUSH
93268: LD_INT 26
93270: PUSH
93271: EMPTY
93272: LIST
93273: LIST
93274: LIST
93275: LIST
93276: LIST
93277: LIST
93278: LIST
93279: LIST
93280: LIST
93281: PUSH
93282: LD_INT 101
93284: PUSH
93285: LD_INT 102
93287: PUSH
93288: LD_INT 105
93290: PUSH
93291: LD_INT 106
93293: PUSH
93294: LD_INT 108
93296: PUSH
93297: EMPTY
93298: LIST
93299: LIST
93300: LIST
93301: LIST
93302: LIST
93303: PUSH
93304: EMPTY
93305: LIST
93306: LIST
93307: ST_TO_ADDR
93308: GO 96087
93310: LD_INT 3
93312: DOUBLE
93313: EQUAL
93314: IFTRUE 93318
93316: GO 93394
93318: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
93319: LD_ADDR_VAR 0 1
93323: PUSH
93324: LD_INT 2
93326: PUSH
93327: LD_INT 4
93329: PUSH
93330: LD_INT 5
93332: PUSH
93333: LD_INT 11
93335: PUSH
93336: LD_INT 12
93338: PUSH
93339: LD_INT 15
93341: PUSH
93342: LD_INT 16
93344: PUSH
93345: LD_INT 22
93347: PUSH
93348: LD_INT 26
93350: PUSH
93351: LD_INT 36
93353: PUSH
93354: EMPTY
93355: LIST
93356: LIST
93357: LIST
93358: LIST
93359: LIST
93360: LIST
93361: LIST
93362: LIST
93363: LIST
93364: LIST
93365: PUSH
93366: LD_INT 101
93368: PUSH
93369: LD_INT 102
93371: PUSH
93372: LD_INT 105
93374: PUSH
93375: LD_INT 106
93377: PUSH
93378: LD_INT 108
93380: PUSH
93381: EMPTY
93382: LIST
93383: LIST
93384: LIST
93385: LIST
93386: LIST
93387: PUSH
93388: EMPTY
93389: LIST
93390: LIST
93391: ST_TO_ADDR
93392: GO 96087
93394: LD_INT 4
93396: DOUBLE
93397: EQUAL
93398: IFTRUE 93402
93400: GO 93486
93402: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
93403: LD_ADDR_VAR 0 1
93407: PUSH
93408: LD_INT 2
93410: PUSH
93411: LD_INT 4
93413: PUSH
93414: LD_INT 5
93416: PUSH
93417: LD_INT 8
93419: PUSH
93420: LD_INT 11
93422: PUSH
93423: LD_INT 12
93425: PUSH
93426: LD_INT 15
93428: PUSH
93429: LD_INT 16
93431: PUSH
93432: LD_INT 22
93434: PUSH
93435: LD_INT 23
93437: PUSH
93438: LD_INT 26
93440: PUSH
93441: LD_INT 36
93443: PUSH
93444: EMPTY
93445: LIST
93446: LIST
93447: LIST
93448: LIST
93449: LIST
93450: LIST
93451: LIST
93452: LIST
93453: LIST
93454: LIST
93455: LIST
93456: LIST
93457: PUSH
93458: LD_INT 101
93460: PUSH
93461: LD_INT 102
93463: PUSH
93464: LD_INT 105
93466: PUSH
93467: LD_INT 106
93469: PUSH
93470: LD_INT 108
93472: PUSH
93473: EMPTY
93474: LIST
93475: LIST
93476: LIST
93477: LIST
93478: LIST
93479: PUSH
93480: EMPTY
93481: LIST
93482: LIST
93483: ST_TO_ADDR
93484: GO 96087
93486: LD_INT 5
93488: DOUBLE
93489: EQUAL
93490: IFTRUE 93494
93492: GO 93594
93494: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
93495: LD_ADDR_VAR 0 1
93499: PUSH
93500: LD_INT 2
93502: PUSH
93503: LD_INT 4
93505: PUSH
93506: LD_INT 5
93508: PUSH
93509: LD_INT 6
93511: PUSH
93512: LD_INT 8
93514: PUSH
93515: LD_INT 11
93517: PUSH
93518: LD_INT 12
93520: PUSH
93521: LD_INT 15
93523: PUSH
93524: LD_INT 16
93526: PUSH
93527: LD_INT 22
93529: PUSH
93530: LD_INT 23
93532: PUSH
93533: LD_INT 25
93535: PUSH
93536: LD_INT 26
93538: PUSH
93539: LD_INT 36
93541: PUSH
93542: EMPTY
93543: LIST
93544: LIST
93545: LIST
93546: LIST
93547: LIST
93548: LIST
93549: LIST
93550: LIST
93551: LIST
93552: LIST
93553: LIST
93554: LIST
93555: LIST
93556: LIST
93557: PUSH
93558: LD_INT 101
93560: PUSH
93561: LD_INT 102
93563: PUSH
93564: LD_INT 105
93566: PUSH
93567: LD_INT 106
93569: PUSH
93570: LD_INT 108
93572: PUSH
93573: LD_INT 109
93575: PUSH
93576: LD_INT 112
93578: PUSH
93579: EMPTY
93580: LIST
93581: LIST
93582: LIST
93583: LIST
93584: LIST
93585: LIST
93586: LIST
93587: PUSH
93588: EMPTY
93589: LIST
93590: LIST
93591: ST_TO_ADDR
93592: GO 96087
93594: LD_INT 6
93596: DOUBLE
93597: EQUAL
93598: IFTRUE 93602
93600: GO 93722
93602: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
93603: LD_ADDR_VAR 0 1
93607: PUSH
93608: LD_INT 2
93610: PUSH
93611: LD_INT 4
93613: PUSH
93614: LD_INT 5
93616: PUSH
93617: LD_INT 6
93619: PUSH
93620: LD_INT 8
93622: PUSH
93623: LD_INT 11
93625: PUSH
93626: LD_INT 12
93628: PUSH
93629: LD_INT 15
93631: PUSH
93632: LD_INT 16
93634: PUSH
93635: LD_INT 20
93637: PUSH
93638: LD_INT 21
93640: PUSH
93641: LD_INT 22
93643: PUSH
93644: LD_INT 23
93646: PUSH
93647: LD_INT 25
93649: PUSH
93650: LD_INT 26
93652: PUSH
93653: LD_INT 30
93655: PUSH
93656: LD_INT 31
93658: PUSH
93659: LD_INT 32
93661: PUSH
93662: LD_INT 36
93664: PUSH
93665: EMPTY
93666: LIST
93667: LIST
93668: LIST
93669: LIST
93670: LIST
93671: LIST
93672: LIST
93673: LIST
93674: LIST
93675: LIST
93676: LIST
93677: LIST
93678: LIST
93679: LIST
93680: LIST
93681: LIST
93682: LIST
93683: LIST
93684: LIST
93685: PUSH
93686: LD_INT 101
93688: PUSH
93689: LD_INT 102
93691: PUSH
93692: LD_INT 105
93694: PUSH
93695: LD_INT 106
93697: PUSH
93698: LD_INT 108
93700: PUSH
93701: LD_INT 109
93703: PUSH
93704: LD_INT 112
93706: PUSH
93707: EMPTY
93708: LIST
93709: LIST
93710: LIST
93711: LIST
93712: LIST
93713: LIST
93714: LIST
93715: PUSH
93716: EMPTY
93717: LIST
93718: LIST
93719: ST_TO_ADDR
93720: GO 96087
93722: LD_INT 7
93724: DOUBLE
93725: EQUAL
93726: IFTRUE 93730
93728: GO 93830
93730: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
93731: LD_ADDR_VAR 0 1
93735: PUSH
93736: LD_INT 2
93738: PUSH
93739: LD_INT 4
93741: PUSH
93742: LD_INT 5
93744: PUSH
93745: LD_INT 7
93747: PUSH
93748: LD_INT 11
93750: PUSH
93751: LD_INT 12
93753: PUSH
93754: LD_INT 15
93756: PUSH
93757: LD_INT 16
93759: PUSH
93760: LD_INT 20
93762: PUSH
93763: LD_INT 21
93765: PUSH
93766: LD_INT 22
93768: PUSH
93769: LD_INT 23
93771: PUSH
93772: LD_INT 25
93774: PUSH
93775: LD_INT 26
93777: PUSH
93778: EMPTY
93779: LIST
93780: LIST
93781: LIST
93782: LIST
93783: LIST
93784: LIST
93785: LIST
93786: LIST
93787: LIST
93788: LIST
93789: LIST
93790: LIST
93791: LIST
93792: LIST
93793: PUSH
93794: LD_INT 101
93796: PUSH
93797: LD_INT 102
93799: PUSH
93800: LD_INT 103
93802: PUSH
93803: LD_INT 105
93805: PUSH
93806: LD_INT 106
93808: PUSH
93809: LD_INT 108
93811: PUSH
93812: LD_INT 112
93814: PUSH
93815: EMPTY
93816: LIST
93817: LIST
93818: LIST
93819: LIST
93820: LIST
93821: LIST
93822: LIST
93823: PUSH
93824: EMPTY
93825: LIST
93826: LIST
93827: ST_TO_ADDR
93828: GO 96087
93830: LD_INT 8
93832: DOUBLE
93833: EQUAL
93834: IFTRUE 93838
93836: GO 93966
93838: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
93839: LD_ADDR_VAR 0 1
93843: PUSH
93844: LD_INT 2
93846: PUSH
93847: LD_INT 4
93849: PUSH
93850: LD_INT 5
93852: PUSH
93853: LD_INT 6
93855: PUSH
93856: LD_INT 7
93858: PUSH
93859: LD_INT 8
93861: PUSH
93862: LD_INT 11
93864: PUSH
93865: LD_INT 12
93867: PUSH
93868: LD_INT 15
93870: PUSH
93871: LD_INT 16
93873: PUSH
93874: LD_INT 20
93876: PUSH
93877: LD_INT 21
93879: PUSH
93880: LD_INT 22
93882: PUSH
93883: LD_INT 23
93885: PUSH
93886: LD_INT 25
93888: PUSH
93889: LD_INT 26
93891: PUSH
93892: LD_INT 30
93894: PUSH
93895: LD_INT 31
93897: PUSH
93898: LD_INT 32
93900: PUSH
93901: LD_INT 36
93903: PUSH
93904: EMPTY
93905: LIST
93906: LIST
93907: LIST
93908: LIST
93909: LIST
93910: LIST
93911: LIST
93912: LIST
93913: LIST
93914: LIST
93915: LIST
93916: LIST
93917: LIST
93918: LIST
93919: LIST
93920: LIST
93921: LIST
93922: LIST
93923: LIST
93924: LIST
93925: PUSH
93926: LD_INT 101
93928: PUSH
93929: LD_INT 102
93931: PUSH
93932: LD_INT 103
93934: PUSH
93935: LD_INT 105
93937: PUSH
93938: LD_INT 106
93940: PUSH
93941: LD_INT 108
93943: PUSH
93944: LD_INT 109
93946: PUSH
93947: LD_INT 112
93949: PUSH
93950: EMPTY
93951: LIST
93952: LIST
93953: LIST
93954: LIST
93955: LIST
93956: LIST
93957: LIST
93958: LIST
93959: PUSH
93960: EMPTY
93961: LIST
93962: LIST
93963: ST_TO_ADDR
93964: GO 96087
93966: LD_INT 9
93968: DOUBLE
93969: EQUAL
93970: IFTRUE 93974
93972: GO 94110
93974: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
93975: LD_ADDR_VAR 0 1
93979: PUSH
93980: LD_INT 2
93982: PUSH
93983: LD_INT 4
93985: PUSH
93986: LD_INT 5
93988: PUSH
93989: LD_INT 6
93991: PUSH
93992: LD_INT 7
93994: PUSH
93995: LD_INT 8
93997: PUSH
93998: LD_INT 11
94000: PUSH
94001: LD_INT 12
94003: PUSH
94004: LD_INT 15
94006: PUSH
94007: LD_INT 16
94009: PUSH
94010: LD_INT 20
94012: PUSH
94013: LD_INT 21
94015: PUSH
94016: LD_INT 22
94018: PUSH
94019: LD_INT 23
94021: PUSH
94022: LD_INT 25
94024: PUSH
94025: LD_INT 26
94027: PUSH
94028: LD_INT 28
94030: PUSH
94031: LD_INT 30
94033: PUSH
94034: LD_INT 31
94036: PUSH
94037: LD_INT 32
94039: PUSH
94040: LD_INT 36
94042: PUSH
94043: EMPTY
94044: LIST
94045: LIST
94046: LIST
94047: LIST
94048: LIST
94049: LIST
94050: LIST
94051: LIST
94052: LIST
94053: LIST
94054: LIST
94055: LIST
94056: LIST
94057: LIST
94058: LIST
94059: LIST
94060: LIST
94061: LIST
94062: LIST
94063: LIST
94064: LIST
94065: PUSH
94066: LD_INT 101
94068: PUSH
94069: LD_INT 102
94071: PUSH
94072: LD_INT 103
94074: PUSH
94075: LD_INT 105
94077: PUSH
94078: LD_INT 106
94080: PUSH
94081: LD_INT 108
94083: PUSH
94084: LD_INT 109
94086: PUSH
94087: LD_INT 112
94089: PUSH
94090: LD_INT 114
94092: PUSH
94093: EMPTY
94094: LIST
94095: LIST
94096: LIST
94097: LIST
94098: LIST
94099: LIST
94100: LIST
94101: LIST
94102: LIST
94103: PUSH
94104: EMPTY
94105: LIST
94106: LIST
94107: ST_TO_ADDR
94108: GO 96087
94110: LD_INT 10
94112: DOUBLE
94113: EQUAL
94114: IFTRUE 94118
94116: GO 94302
94118: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
94119: LD_ADDR_VAR 0 1
94123: PUSH
94124: LD_INT 2
94126: PUSH
94127: LD_INT 4
94129: PUSH
94130: LD_INT 5
94132: PUSH
94133: LD_INT 6
94135: PUSH
94136: LD_INT 7
94138: PUSH
94139: LD_INT 8
94141: PUSH
94142: LD_INT 9
94144: PUSH
94145: LD_INT 10
94147: PUSH
94148: LD_INT 11
94150: PUSH
94151: LD_INT 12
94153: PUSH
94154: LD_INT 13
94156: PUSH
94157: LD_INT 14
94159: PUSH
94160: LD_INT 15
94162: PUSH
94163: LD_INT 16
94165: PUSH
94166: LD_INT 17
94168: PUSH
94169: LD_INT 18
94171: PUSH
94172: LD_INT 19
94174: PUSH
94175: LD_INT 20
94177: PUSH
94178: LD_INT 21
94180: PUSH
94181: LD_INT 22
94183: PUSH
94184: LD_INT 23
94186: PUSH
94187: LD_INT 24
94189: PUSH
94190: LD_INT 25
94192: PUSH
94193: LD_INT 26
94195: PUSH
94196: LD_INT 28
94198: PUSH
94199: LD_INT 30
94201: PUSH
94202: LD_INT 31
94204: PUSH
94205: LD_INT 32
94207: PUSH
94208: LD_INT 36
94210: PUSH
94211: EMPTY
94212: LIST
94213: LIST
94214: LIST
94215: LIST
94216: LIST
94217: LIST
94218: LIST
94219: LIST
94220: LIST
94221: LIST
94222: LIST
94223: LIST
94224: LIST
94225: LIST
94226: LIST
94227: LIST
94228: LIST
94229: LIST
94230: LIST
94231: LIST
94232: LIST
94233: LIST
94234: LIST
94235: LIST
94236: LIST
94237: LIST
94238: LIST
94239: LIST
94240: LIST
94241: PUSH
94242: LD_INT 101
94244: PUSH
94245: LD_INT 102
94247: PUSH
94248: LD_INT 103
94250: PUSH
94251: LD_INT 104
94253: PUSH
94254: LD_INT 105
94256: PUSH
94257: LD_INT 106
94259: PUSH
94260: LD_INT 107
94262: PUSH
94263: LD_INT 108
94265: PUSH
94266: LD_INT 109
94268: PUSH
94269: LD_INT 110
94271: PUSH
94272: LD_INT 111
94274: PUSH
94275: LD_INT 112
94277: PUSH
94278: LD_INT 114
94280: PUSH
94281: EMPTY
94282: LIST
94283: LIST
94284: LIST
94285: LIST
94286: LIST
94287: LIST
94288: LIST
94289: LIST
94290: LIST
94291: LIST
94292: LIST
94293: LIST
94294: LIST
94295: PUSH
94296: EMPTY
94297: LIST
94298: LIST
94299: ST_TO_ADDR
94300: GO 96087
94302: LD_INT 11
94304: DOUBLE
94305: EQUAL
94306: IFTRUE 94310
94308: GO 94502
94310: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
94311: LD_ADDR_VAR 0 1
94315: PUSH
94316: LD_INT 2
94318: PUSH
94319: LD_INT 3
94321: PUSH
94322: LD_INT 4
94324: PUSH
94325: LD_INT 5
94327: PUSH
94328: LD_INT 6
94330: PUSH
94331: LD_INT 7
94333: PUSH
94334: LD_INT 8
94336: PUSH
94337: LD_INT 9
94339: PUSH
94340: LD_INT 10
94342: PUSH
94343: LD_INT 11
94345: PUSH
94346: LD_INT 12
94348: PUSH
94349: LD_INT 13
94351: PUSH
94352: LD_INT 14
94354: PUSH
94355: LD_INT 15
94357: PUSH
94358: LD_INT 16
94360: PUSH
94361: LD_INT 17
94363: PUSH
94364: LD_INT 18
94366: PUSH
94367: LD_INT 19
94369: PUSH
94370: LD_INT 20
94372: PUSH
94373: LD_INT 21
94375: PUSH
94376: LD_INT 22
94378: PUSH
94379: LD_INT 23
94381: PUSH
94382: LD_INT 24
94384: PUSH
94385: LD_INT 25
94387: PUSH
94388: LD_INT 26
94390: PUSH
94391: LD_INT 28
94393: PUSH
94394: LD_INT 30
94396: PUSH
94397: LD_INT 31
94399: PUSH
94400: LD_INT 32
94402: PUSH
94403: LD_INT 34
94405: PUSH
94406: LD_INT 36
94408: PUSH
94409: EMPTY
94410: LIST
94411: LIST
94412: LIST
94413: LIST
94414: LIST
94415: LIST
94416: LIST
94417: LIST
94418: LIST
94419: LIST
94420: LIST
94421: LIST
94422: LIST
94423: LIST
94424: LIST
94425: LIST
94426: LIST
94427: LIST
94428: LIST
94429: LIST
94430: LIST
94431: LIST
94432: LIST
94433: LIST
94434: LIST
94435: LIST
94436: LIST
94437: LIST
94438: LIST
94439: LIST
94440: LIST
94441: PUSH
94442: LD_INT 101
94444: PUSH
94445: LD_INT 102
94447: PUSH
94448: LD_INT 103
94450: PUSH
94451: LD_INT 104
94453: PUSH
94454: LD_INT 105
94456: PUSH
94457: LD_INT 106
94459: PUSH
94460: LD_INT 107
94462: PUSH
94463: LD_INT 108
94465: PUSH
94466: LD_INT 109
94468: PUSH
94469: LD_INT 110
94471: PUSH
94472: LD_INT 111
94474: PUSH
94475: LD_INT 112
94477: PUSH
94478: LD_INT 114
94480: PUSH
94481: EMPTY
94482: LIST
94483: LIST
94484: LIST
94485: LIST
94486: LIST
94487: LIST
94488: LIST
94489: LIST
94490: LIST
94491: LIST
94492: LIST
94493: LIST
94494: LIST
94495: PUSH
94496: EMPTY
94497: LIST
94498: LIST
94499: ST_TO_ADDR
94500: GO 96087
94502: LD_INT 12
94504: DOUBLE
94505: EQUAL
94506: IFTRUE 94510
94508: GO 94718
94510: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
94511: LD_ADDR_VAR 0 1
94515: PUSH
94516: LD_INT 1
94518: PUSH
94519: LD_INT 2
94521: PUSH
94522: LD_INT 3
94524: PUSH
94525: LD_INT 4
94527: PUSH
94528: LD_INT 5
94530: PUSH
94531: LD_INT 6
94533: PUSH
94534: LD_INT 7
94536: PUSH
94537: LD_INT 8
94539: PUSH
94540: LD_INT 9
94542: PUSH
94543: LD_INT 10
94545: PUSH
94546: LD_INT 11
94548: PUSH
94549: LD_INT 12
94551: PUSH
94552: LD_INT 13
94554: PUSH
94555: LD_INT 14
94557: PUSH
94558: LD_INT 15
94560: PUSH
94561: LD_INT 16
94563: PUSH
94564: LD_INT 17
94566: PUSH
94567: LD_INT 18
94569: PUSH
94570: LD_INT 19
94572: PUSH
94573: LD_INT 20
94575: PUSH
94576: LD_INT 21
94578: PUSH
94579: LD_INT 22
94581: PUSH
94582: LD_INT 23
94584: PUSH
94585: LD_INT 24
94587: PUSH
94588: LD_INT 25
94590: PUSH
94591: LD_INT 26
94593: PUSH
94594: LD_INT 27
94596: PUSH
94597: LD_INT 28
94599: PUSH
94600: LD_INT 30
94602: PUSH
94603: LD_INT 31
94605: PUSH
94606: LD_INT 32
94608: PUSH
94609: LD_INT 33
94611: PUSH
94612: LD_INT 34
94614: PUSH
94615: LD_INT 36
94617: PUSH
94618: EMPTY
94619: LIST
94620: LIST
94621: LIST
94622: LIST
94623: LIST
94624: LIST
94625: LIST
94626: LIST
94627: LIST
94628: LIST
94629: LIST
94630: LIST
94631: LIST
94632: LIST
94633: LIST
94634: LIST
94635: LIST
94636: LIST
94637: LIST
94638: LIST
94639: LIST
94640: LIST
94641: LIST
94642: LIST
94643: LIST
94644: LIST
94645: LIST
94646: LIST
94647: LIST
94648: LIST
94649: LIST
94650: LIST
94651: LIST
94652: LIST
94653: PUSH
94654: LD_INT 101
94656: PUSH
94657: LD_INT 102
94659: PUSH
94660: LD_INT 103
94662: PUSH
94663: LD_INT 104
94665: PUSH
94666: LD_INT 105
94668: PUSH
94669: LD_INT 106
94671: PUSH
94672: LD_INT 107
94674: PUSH
94675: LD_INT 108
94677: PUSH
94678: LD_INT 109
94680: PUSH
94681: LD_INT 110
94683: PUSH
94684: LD_INT 111
94686: PUSH
94687: LD_INT 112
94689: PUSH
94690: LD_INT 113
94692: PUSH
94693: LD_INT 114
94695: PUSH
94696: EMPTY
94697: LIST
94698: LIST
94699: LIST
94700: LIST
94701: LIST
94702: LIST
94703: LIST
94704: LIST
94705: LIST
94706: LIST
94707: LIST
94708: LIST
94709: LIST
94710: LIST
94711: PUSH
94712: EMPTY
94713: LIST
94714: LIST
94715: ST_TO_ADDR
94716: GO 96087
94718: LD_INT 13
94720: DOUBLE
94721: EQUAL
94722: IFTRUE 94726
94724: GO 94922
94726: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
94727: LD_ADDR_VAR 0 1
94731: PUSH
94732: LD_INT 1
94734: PUSH
94735: LD_INT 2
94737: PUSH
94738: LD_INT 3
94740: PUSH
94741: LD_INT 4
94743: PUSH
94744: LD_INT 5
94746: PUSH
94747: LD_INT 8
94749: PUSH
94750: LD_INT 9
94752: PUSH
94753: LD_INT 10
94755: PUSH
94756: LD_INT 11
94758: PUSH
94759: LD_INT 12
94761: PUSH
94762: LD_INT 14
94764: PUSH
94765: LD_INT 15
94767: PUSH
94768: LD_INT 16
94770: PUSH
94771: LD_INT 17
94773: PUSH
94774: LD_INT 18
94776: PUSH
94777: LD_INT 19
94779: PUSH
94780: LD_INT 20
94782: PUSH
94783: LD_INT 21
94785: PUSH
94786: LD_INT 22
94788: PUSH
94789: LD_INT 23
94791: PUSH
94792: LD_INT 24
94794: PUSH
94795: LD_INT 25
94797: PUSH
94798: LD_INT 26
94800: PUSH
94801: LD_INT 27
94803: PUSH
94804: LD_INT 28
94806: PUSH
94807: LD_INT 30
94809: PUSH
94810: LD_INT 31
94812: PUSH
94813: LD_INT 32
94815: PUSH
94816: LD_INT 33
94818: PUSH
94819: LD_INT 34
94821: PUSH
94822: LD_INT 36
94824: PUSH
94825: EMPTY
94826: LIST
94827: LIST
94828: LIST
94829: LIST
94830: LIST
94831: LIST
94832: LIST
94833: LIST
94834: LIST
94835: LIST
94836: LIST
94837: LIST
94838: LIST
94839: LIST
94840: LIST
94841: LIST
94842: LIST
94843: LIST
94844: LIST
94845: LIST
94846: LIST
94847: LIST
94848: LIST
94849: LIST
94850: LIST
94851: LIST
94852: LIST
94853: LIST
94854: LIST
94855: LIST
94856: LIST
94857: PUSH
94858: LD_INT 101
94860: PUSH
94861: LD_INT 102
94863: PUSH
94864: LD_INT 103
94866: PUSH
94867: LD_INT 104
94869: PUSH
94870: LD_INT 105
94872: PUSH
94873: LD_INT 106
94875: PUSH
94876: LD_INT 107
94878: PUSH
94879: LD_INT 108
94881: PUSH
94882: LD_INT 109
94884: PUSH
94885: LD_INT 110
94887: PUSH
94888: LD_INT 111
94890: PUSH
94891: LD_INT 112
94893: PUSH
94894: LD_INT 113
94896: PUSH
94897: LD_INT 114
94899: PUSH
94900: EMPTY
94901: LIST
94902: LIST
94903: LIST
94904: LIST
94905: LIST
94906: LIST
94907: LIST
94908: LIST
94909: LIST
94910: LIST
94911: LIST
94912: LIST
94913: LIST
94914: LIST
94915: PUSH
94916: EMPTY
94917: LIST
94918: LIST
94919: ST_TO_ADDR
94920: GO 96087
94922: LD_INT 14
94924: DOUBLE
94925: EQUAL
94926: IFTRUE 94930
94928: GO 95142
94930: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
94931: LD_ADDR_VAR 0 1
94935: PUSH
94936: LD_INT 1
94938: PUSH
94939: LD_INT 2
94941: PUSH
94942: LD_INT 3
94944: PUSH
94945: LD_INT 4
94947: PUSH
94948: LD_INT 5
94950: PUSH
94951: LD_INT 6
94953: PUSH
94954: LD_INT 7
94956: PUSH
94957: LD_INT 8
94959: PUSH
94960: LD_INT 9
94962: PUSH
94963: LD_INT 10
94965: PUSH
94966: LD_INT 11
94968: PUSH
94969: LD_INT 12
94971: PUSH
94972: LD_INT 13
94974: PUSH
94975: LD_INT 14
94977: PUSH
94978: LD_INT 15
94980: PUSH
94981: LD_INT 16
94983: PUSH
94984: LD_INT 17
94986: PUSH
94987: LD_INT 18
94989: PUSH
94990: LD_INT 19
94992: PUSH
94993: LD_INT 20
94995: PUSH
94996: LD_INT 21
94998: PUSH
94999: LD_INT 22
95001: PUSH
95002: LD_INT 23
95004: PUSH
95005: LD_INT 24
95007: PUSH
95008: LD_INT 25
95010: PUSH
95011: LD_INT 26
95013: PUSH
95014: LD_INT 27
95016: PUSH
95017: LD_INT 28
95019: PUSH
95020: LD_INT 29
95022: PUSH
95023: LD_INT 30
95025: PUSH
95026: LD_INT 31
95028: PUSH
95029: LD_INT 32
95031: PUSH
95032: LD_INT 33
95034: PUSH
95035: LD_INT 34
95037: PUSH
95038: LD_INT 36
95040: PUSH
95041: EMPTY
95042: LIST
95043: LIST
95044: LIST
95045: LIST
95046: LIST
95047: LIST
95048: LIST
95049: LIST
95050: LIST
95051: LIST
95052: LIST
95053: LIST
95054: LIST
95055: LIST
95056: LIST
95057: LIST
95058: LIST
95059: LIST
95060: LIST
95061: LIST
95062: LIST
95063: LIST
95064: LIST
95065: LIST
95066: LIST
95067: LIST
95068: LIST
95069: LIST
95070: LIST
95071: LIST
95072: LIST
95073: LIST
95074: LIST
95075: LIST
95076: LIST
95077: PUSH
95078: LD_INT 101
95080: PUSH
95081: LD_INT 102
95083: PUSH
95084: LD_INT 103
95086: PUSH
95087: LD_INT 104
95089: PUSH
95090: LD_INT 105
95092: PUSH
95093: LD_INT 106
95095: PUSH
95096: LD_INT 107
95098: PUSH
95099: LD_INT 108
95101: PUSH
95102: LD_INT 109
95104: PUSH
95105: LD_INT 110
95107: PUSH
95108: LD_INT 111
95110: PUSH
95111: LD_INT 112
95113: PUSH
95114: LD_INT 113
95116: PUSH
95117: LD_INT 114
95119: PUSH
95120: EMPTY
95121: LIST
95122: LIST
95123: LIST
95124: LIST
95125: LIST
95126: LIST
95127: LIST
95128: LIST
95129: LIST
95130: LIST
95131: LIST
95132: LIST
95133: LIST
95134: LIST
95135: PUSH
95136: EMPTY
95137: LIST
95138: LIST
95139: ST_TO_ADDR
95140: GO 96087
95142: LD_INT 15
95144: DOUBLE
95145: EQUAL
95146: IFTRUE 95150
95148: GO 95362
95150: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
95151: LD_ADDR_VAR 0 1
95155: PUSH
95156: LD_INT 1
95158: PUSH
95159: LD_INT 2
95161: PUSH
95162: LD_INT 3
95164: PUSH
95165: LD_INT 4
95167: PUSH
95168: LD_INT 5
95170: PUSH
95171: LD_INT 6
95173: PUSH
95174: LD_INT 7
95176: PUSH
95177: LD_INT 8
95179: PUSH
95180: LD_INT 9
95182: PUSH
95183: LD_INT 10
95185: PUSH
95186: LD_INT 11
95188: PUSH
95189: LD_INT 12
95191: PUSH
95192: LD_INT 13
95194: PUSH
95195: LD_INT 14
95197: PUSH
95198: LD_INT 15
95200: PUSH
95201: LD_INT 16
95203: PUSH
95204: LD_INT 17
95206: PUSH
95207: LD_INT 18
95209: PUSH
95210: LD_INT 19
95212: PUSH
95213: LD_INT 20
95215: PUSH
95216: LD_INT 21
95218: PUSH
95219: LD_INT 22
95221: PUSH
95222: LD_INT 23
95224: PUSH
95225: LD_INT 24
95227: PUSH
95228: LD_INT 25
95230: PUSH
95231: LD_INT 26
95233: PUSH
95234: LD_INT 27
95236: PUSH
95237: LD_INT 28
95239: PUSH
95240: LD_INT 29
95242: PUSH
95243: LD_INT 30
95245: PUSH
95246: LD_INT 31
95248: PUSH
95249: LD_INT 32
95251: PUSH
95252: LD_INT 33
95254: PUSH
95255: LD_INT 34
95257: PUSH
95258: LD_INT 36
95260: PUSH
95261: EMPTY
95262: LIST
95263: LIST
95264: LIST
95265: LIST
95266: LIST
95267: LIST
95268: LIST
95269: LIST
95270: LIST
95271: LIST
95272: LIST
95273: LIST
95274: LIST
95275: LIST
95276: LIST
95277: LIST
95278: LIST
95279: LIST
95280: LIST
95281: LIST
95282: LIST
95283: LIST
95284: LIST
95285: LIST
95286: LIST
95287: LIST
95288: LIST
95289: LIST
95290: LIST
95291: LIST
95292: LIST
95293: LIST
95294: LIST
95295: LIST
95296: LIST
95297: PUSH
95298: LD_INT 101
95300: PUSH
95301: LD_INT 102
95303: PUSH
95304: LD_INT 103
95306: PUSH
95307: LD_INT 104
95309: PUSH
95310: LD_INT 105
95312: PUSH
95313: LD_INT 106
95315: PUSH
95316: LD_INT 107
95318: PUSH
95319: LD_INT 108
95321: PUSH
95322: LD_INT 109
95324: PUSH
95325: LD_INT 110
95327: PUSH
95328: LD_INT 111
95330: PUSH
95331: LD_INT 112
95333: PUSH
95334: LD_INT 113
95336: PUSH
95337: LD_INT 114
95339: PUSH
95340: EMPTY
95341: LIST
95342: LIST
95343: LIST
95344: LIST
95345: LIST
95346: LIST
95347: LIST
95348: LIST
95349: LIST
95350: LIST
95351: LIST
95352: LIST
95353: LIST
95354: LIST
95355: PUSH
95356: EMPTY
95357: LIST
95358: LIST
95359: ST_TO_ADDR
95360: GO 96087
95362: LD_INT 16
95364: DOUBLE
95365: EQUAL
95366: IFTRUE 95370
95368: GO 95494
95370: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
95371: LD_ADDR_VAR 0 1
95375: PUSH
95376: LD_INT 2
95378: PUSH
95379: LD_INT 4
95381: PUSH
95382: LD_INT 5
95384: PUSH
95385: LD_INT 7
95387: PUSH
95388: LD_INT 11
95390: PUSH
95391: LD_INT 12
95393: PUSH
95394: LD_INT 15
95396: PUSH
95397: LD_INT 16
95399: PUSH
95400: LD_INT 20
95402: PUSH
95403: LD_INT 21
95405: PUSH
95406: LD_INT 22
95408: PUSH
95409: LD_INT 23
95411: PUSH
95412: LD_INT 25
95414: PUSH
95415: LD_INT 26
95417: PUSH
95418: LD_INT 30
95420: PUSH
95421: LD_INT 31
95423: PUSH
95424: LD_INT 32
95426: PUSH
95427: LD_INT 33
95429: PUSH
95430: LD_INT 34
95432: PUSH
95433: EMPTY
95434: LIST
95435: LIST
95436: LIST
95437: LIST
95438: LIST
95439: LIST
95440: LIST
95441: LIST
95442: LIST
95443: LIST
95444: LIST
95445: LIST
95446: LIST
95447: LIST
95448: LIST
95449: LIST
95450: LIST
95451: LIST
95452: LIST
95453: PUSH
95454: LD_INT 101
95456: PUSH
95457: LD_INT 102
95459: PUSH
95460: LD_INT 103
95462: PUSH
95463: LD_INT 106
95465: PUSH
95466: LD_INT 108
95468: PUSH
95469: LD_INT 112
95471: PUSH
95472: LD_INT 113
95474: PUSH
95475: LD_INT 114
95477: PUSH
95478: EMPTY
95479: LIST
95480: LIST
95481: LIST
95482: LIST
95483: LIST
95484: LIST
95485: LIST
95486: LIST
95487: PUSH
95488: EMPTY
95489: LIST
95490: LIST
95491: ST_TO_ADDR
95492: GO 96087
95494: LD_INT 17
95496: DOUBLE
95497: EQUAL
95498: IFTRUE 95502
95500: GO 95714
95502: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
95503: LD_ADDR_VAR 0 1
95507: PUSH
95508: LD_INT 1
95510: PUSH
95511: LD_INT 2
95513: PUSH
95514: LD_INT 3
95516: PUSH
95517: LD_INT 4
95519: PUSH
95520: LD_INT 5
95522: PUSH
95523: LD_INT 6
95525: PUSH
95526: LD_INT 7
95528: PUSH
95529: LD_INT 8
95531: PUSH
95532: LD_INT 9
95534: PUSH
95535: LD_INT 10
95537: PUSH
95538: LD_INT 11
95540: PUSH
95541: LD_INT 12
95543: PUSH
95544: LD_INT 13
95546: PUSH
95547: LD_INT 14
95549: PUSH
95550: LD_INT 15
95552: PUSH
95553: LD_INT 16
95555: PUSH
95556: LD_INT 17
95558: PUSH
95559: LD_INT 18
95561: PUSH
95562: LD_INT 19
95564: PUSH
95565: LD_INT 20
95567: PUSH
95568: LD_INT 21
95570: PUSH
95571: LD_INT 22
95573: PUSH
95574: LD_INT 23
95576: PUSH
95577: LD_INT 24
95579: PUSH
95580: LD_INT 25
95582: PUSH
95583: LD_INT 26
95585: PUSH
95586: LD_INT 27
95588: PUSH
95589: LD_INT 28
95591: PUSH
95592: LD_INT 29
95594: PUSH
95595: LD_INT 30
95597: PUSH
95598: LD_INT 31
95600: PUSH
95601: LD_INT 32
95603: PUSH
95604: LD_INT 33
95606: PUSH
95607: LD_INT 34
95609: PUSH
95610: LD_INT 36
95612: PUSH
95613: EMPTY
95614: LIST
95615: LIST
95616: LIST
95617: LIST
95618: LIST
95619: LIST
95620: LIST
95621: LIST
95622: LIST
95623: LIST
95624: LIST
95625: LIST
95626: LIST
95627: LIST
95628: LIST
95629: LIST
95630: LIST
95631: LIST
95632: LIST
95633: LIST
95634: LIST
95635: LIST
95636: LIST
95637: LIST
95638: LIST
95639: LIST
95640: LIST
95641: LIST
95642: LIST
95643: LIST
95644: LIST
95645: LIST
95646: LIST
95647: LIST
95648: LIST
95649: PUSH
95650: LD_INT 101
95652: PUSH
95653: LD_INT 102
95655: PUSH
95656: LD_INT 103
95658: PUSH
95659: LD_INT 104
95661: PUSH
95662: LD_INT 105
95664: PUSH
95665: LD_INT 106
95667: PUSH
95668: LD_INT 107
95670: PUSH
95671: LD_INT 108
95673: PUSH
95674: LD_INT 109
95676: PUSH
95677: LD_INT 110
95679: PUSH
95680: LD_INT 111
95682: PUSH
95683: LD_INT 112
95685: PUSH
95686: LD_INT 113
95688: PUSH
95689: LD_INT 114
95691: PUSH
95692: EMPTY
95693: LIST
95694: LIST
95695: LIST
95696: LIST
95697: LIST
95698: LIST
95699: LIST
95700: LIST
95701: LIST
95702: LIST
95703: LIST
95704: LIST
95705: LIST
95706: LIST
95707: PUSH
95708: EMPTY
95709: LIST
95710: LIST
95711: ST_TO_ADDR
95712: GO 96087
95714: LD_INT 18
95716: DOUBLE
95717: EQUAL
95718: IFTRUE 95722
95720: GO 95858
95722: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
95723: LD_ADDR_VAR 0 1
95727: PUSH
95728: LD_INT 2
95730: PUSH
95731: LD_INT 4
95733: PUSH
95734: LD_INT 5
95736: PUSH
95737: LD_INT 7
95739: PUSH
95740: LD_INT 11
95742: PUSH
95743: LD_INT 12
95745: PUSH
95746: LD_INT 15
95748: PUSH
95749: LD_INT 16
95751: PUSH
95752: LD_INT 20
95754: PUSH
95755: LD_INT 21
95757: PUSH
95758: LD_INT 22
95760: PUSH
95761: LD_INT 23
95763: PUSH
95764: LD_INT 25
95766: PUSH
95767: LD_INT 26
95769: PUSH
95770: LD_INT 30
95772: PUSH
95773: LD_INT 31
95775: PUSH
95776: LD_INT 32
95778: PUSH
95779: LD_INT 33
95781: PUSH
95782: LD_INT 34
95784: PUSH
95785: LD_INT 35
95787: PUSH
95788: LD_INT 36
95790: PUSH
95791: EMPTY
95792: LIST
95793: LIST
95794: LIST
95795: LIST
95796: LIST
95797: LIST
95798: LIST
95799: LIST
95800: LIST
95801: LIST
95802: LIST
95803: LIST
95804: LIST
95805: LIST
95806: LIST
95807: LIST
95808: LIST
95809: LIST
95810: LIST
95811: LIST
95812: LIST
95813: PUSH
95814: LD_INT 101
95816: PUSH
95817: LD_INT 102
95819: PUSH
95820: LD_INT 103
95822: PUSH
95823: LD_INT 106
95825: PUSH
95826: LD_INT 108
95828: PUSH
95829: LD_INT 112
95831: PUSH
95832: LD_INT 113
95834: PUSH
95835: LD_INT 114
95837: PUSH
95838: LD_INT 115
95840: PUSH
95841: EMPTY
95842: LIST
95843: LIST
95844: LIST
95845: LIST
95846: LIST
95847: LIST
95848: LIST
95849: LIST
95850: LIST
95851: PUSH
95852: EMPTY
95853: LIST
95854: LIST
95855: ST_TO_ADDR
95856: GO 96087
95858: LD_INT 19
95860: DOUBLE
95861: EQUAL
95862: IFTRUE 95866
95864: GO 96086
95866: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
95867: LD_ADDR_VAR 0 1
95871: PUSH
95872: LD_INT 1
95874: PUSH
95875: LD_INT 2
95877: PUSH
95878: LD_INT 3
95880: PUSH
95881: LD_INT 4
95883: PUSH
95884: LD_INT 5
95886: PUSH
95887: LD_INT 6
95889: PUSH
95890: LD_INT 7
95892: PUSH
95893: LD_INT 8
95895: PUSH
95896: LD_INT 9
95898: PUSH
95899: LD_INT 10
95901: PUSH
95902: LD_INT 11
95904: PUSH
95905: LD_INT 12
95907: PUSH
95908: LD_INT 13
95910: PUSH
95911: LD_INT 14
95913: PUSH
95914: LD_INT 15
95916: PUSH
95917: LD_INT 16
95919: PUSH
95920: LD_INT 17
95922: PUSH
95923: LD_INT 18
95925: PUSH
95926: LD_INT 19
95928: PUSH
95929: LD_INT 20
95931: PUSH
95932: LD_INT 21
95934: PUSH
95935: LD_INT 22
95937: PUSH
95938: LD_INT 23
95940: PUSH
95941: LD_INT 24
95943: PUSH
95944: LD_INT 25
95946: PUSH
95947: LD_INT 26
95949: PUSH
95950: LD_INT 27
95952: PUSH
95953: LD_INT 28
95955: PUSH
95956: LD_INT 29
95958: PUSH
95959: LD_INT 30
95961: PUSH
95962: LD_INT 31
95964: PUSH
95965: LD_INT 32
95967: PUSH
95968: LD_INT 33
95970: PUSH
95971: LD_INT 34
95973: PUSH
95974: LD_INT 35
95976: PUSH
95977: LD_INT 36
95979: PUSH
95980: EMPTY
95981: LIST
95982: LIST
95983: LIST
95984: LIST
95985: LIST
95986: LIST
95987: LIST
95988: LIST
95989: LIST
95990: LIST
95991: LIST
95992: LIST
95993: LIST
95994: LIST
95995: LIST
95996: LIST
95997: LIST
95998: LIST
95999: LIST
96000: LIST
96001: LIST
96002: LIST
96003: LIST
96004: LIST
96005: LIST
96006: LIST
96007: LIST
96008: LIST
96009: LIST
96010: LIST
96011: LIST
96012: LIST
96013: LIST
96014: LIST
96015: LIST
96016: LIST
96017: PUSH
96018: LD_INT 101
96020: PUSH
96021: LD_INT 102
96023: PUSH
96024: LD_INT 103
96026: PUSH
96027: LD_INT 104
96029: PUSH
96030: LD_INT 105
96032: PUSH
96033: LD_INT 106
96035: PUSH
96036: LD_INT 107
96038: PUSH
96039: LD_INT 108
96041: PUSH
96042: LD_INT 109
96044: PUSH
96045: LD_INT 110
96047: PUSH
96048: LD_INT 111
96050: PUSH
96051: LD_INT 112
96053: PUSH
96054: LD_INT 113
96056: PUSH
96057: LD_INT 114
96059: PUSH
96060: LD_INT 115
96062: PUSH
96063: EMPTY
96064: LIST
96065: LIST
96066: LIST
96067: LIST
96068: LIST
96069: LIST
96070: LIST
96071: LIST
96072: LIST
96073: LIST
96074: LIST
96075: LIST
96076: LIST
96077: LIST
96078: LIST
96079: PUSH
96080: EMPTY
96081: LIST
96082: LIST
96083: ST_TO_ADDR
96084: GO 96087
96086: POP
// end else
96087: GO 96124
// if campaign_id = 5 then
96089: LD_OWVAR 69
96093: PUSH
96094: LD_INT 5
96096: EQUAL
96097: IFFALSE 96124
// begin result := [ [ 1 , 2 ] , [ 100 ] ] ;
96099: LD_ADDR_VAR 0 1
96103: PUSH
96104: LD_INT 1
96106: PUSH
96107: LD_INT 2
96109: PUSH
96110: EMPTY
96111: LIST
96112: LIST
96113: PUSH
96114: LD_INT 100
96116: PUSH
96117: EMPTY
96118: LIST
96119: PUSH
96120: EMPTY
96121: LIST
96122: LIST
96123: ST_TO_ADDR
// end ; if result then
96124: LD_VAR 0 1
96128: IFFALSE 96417
// begin normal :=  ;
96130: LD_ADDR_VAR 0 3
96134: PUSH
96135: LD_STRING 
96137: ST_TO_ADDR
// hardcore :=  ;
96138: LD_ADDR_VAR 0 4
96142: PUSH
96143: LD_STRING 
96145: ST_TO_ADDR
// for i = 1 to normalCounter do
96146: LD_ADDR_VAR 0 5
96150: PUSH
96151: DOUBLE
96152: LD_INT 1
96154: DEC
96155: ST_TO_ADDR
96156: LD_EXP 80
96160: PUSH
96161: FOR_TO
96162: IFFALSE 96263
// begin tmp := 0 ;
96164: LD_ADDR_VAR 0 2
96168: PUSH
96169: LD_STRING 0
96171: ST_TO_ADDR
// if result [ 1 ] then
96172: LD_VAR 0 1
96176: PUSH
96177: LD_INT 1
96179: ARRAY
96180: IFFALSE 96245
// if result [ 1 ] [ 1 ] = i then
96182: LD_VAR 0 1
96186: PUSH
96187: LD_INT 1
96189: ARRAY
96190: PUSH
96191: LD_INT 1
96193: ARRAY
96194: PUSH
96195: LD_VAR 0 5
96199: EQUAL
96200: IFFALSE 96245
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
96202: LD_ADDR_VAR 0 1
96206: PUSH
96207: LD_VAR 0 1
96211: PPUSH
96212: LD_INT 1
96214: PPUSH
96215: LD_VAR 0 1
96219: PUSH
96220: LD_INT 1
96222: ARRAY
96223: PPUSH
96224: LD_INT 1
96226: PPUSH
96227: CALL_OW 3
96231: PPUSH
96232: CALL_OW 1
96236: ST_TO_ADDR
// tmp := 1 ;
96237: LD_ADDR_VAR 0 2
96241: PUSH
96242: LD_STRING 1
96244: ST_TO_ADDR
// end ; normal := normal & tmp ;
96245: LD_ADDR_VAR 0 3
96249: PUSH
96250: LD_VAR 0 3
96254: PUSH
96255: LD_VAR 0 2
96259: STR
96260: ST_TO_ADDR
// end ;
96261: GO 96161
96263: POP
96264: POP
// for i = 1 to hardcoreCounter do
96265: LD_ADDR_VAR 0 5
96269: PUSH
96270: DOUBLE
96271: LD_INT 1
96273: DEC
96274: ST_TO_ADDR
96275: LD_EXP 81
96279: PUSH
96280: FOR_TO
96281: IFFALSE 96386
// begin tmp := 0 ;
96283: LD_ADDR_VAR 0 2
96287: PUSH
96288: LD_STRING 0
96290: ST_TO_ADDR
// if result [ 2 ] then
96291: LD_VAR 0 1
96295: PUSH
96296: LD_INT 2
96298: ARRAY
96299: IFFALSE 96368
// if result [ 2 ] [ 1 ] = 100 + i then
96301: LD_VAR 0 1
96305: PUSH
96306: LD_INT 2
96308: ARRAY
96309: PUSH
96310: LD_INT 1
96312: ARRAY
96313: PUSH
96314: LD_INT 100
96316: PUSH
96317: LD_VAR 0 5
96321: PLUS
96322: EQUAL
96323: IFFALSE 96368
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
96325: LD_ADDR_VAR 0 1
96329: PUSH
96330: LD_VAR 0 1
96334: PPUSH
96335: LD_INT 2
96337: PPUSH
96338: LD_VAR 0 1
96342: PUSH
96343: LD_INT 2
96345: ARRAY
96346: PPUSH
96347: LD_INT 1
96349: PPUSH
96350: CALL_OW 3
96354: PPUSH
96355: CALL_OW 1
96359: ST_TO_ADDR
// tmp := 1 ;
96360: LD_ADDR_VAR 0 2
96364: PUSH
96365: LD_STRING 1
96367: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
96368: LD_ADDR_VAR 0 4
96372: PUSH
96373: LD_VAR 0 4
96377: PUSH
96378: LD_VAR 0 2
96382: STR
96383: ST_TO_ADDR
// end ;
96384: GO 96280
96386: POP
96387: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
96388: LD_STRING getStreamItemsFromMission("
96390: PUSH
96391: LD_VAR 0 3
96395: STR
96396: PUSH
96397: LD_STRING ","
96399: STR
96400: PUSH
96401: LD_VAR 0 4
96405: STR
96406: PUSH
96407: LD_STRING ")
96409: STR
96410: PPUSH
96411: CALL_OW 559
// end else
96415: GO 96424
// ToLua ( getStreamItemsFromMission("","") ) ;
96417: LD_STRING getStreamItemsFromMission("","")
96419: PPUSH
96420: CALL_OW 559
// end ;
96424: LD_VAR 0 1
96428: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
96429: LD_VAR 0 2
96433: PUSH
96434: LD_INT 100
96436: EQUAL
96437: IFFALSE 97386
// begin if not StreamModeActive then
96439: LD_EXP 79
96443: NOT
96444: IFFALSE 96454
// StreamModeActive := true ;
96446: LD_ADDR_EXP 79
96450: PUSH
96451: LD_INT 1
96453: ST_TO_ADDR
// if p3 = 0 then
96454: LD_VAR 0 3
96458: PUSH
96459: LD_INT 0
96461: EQUAL
96462: IFFALSE 96468
// InitStreamMode ;
96464: CALL 92689 0 0
// if p3 = 1 then
96468: LD_VAR 0 3
96472: PUSH
96473: LD_INT 1
96475: EQUAL
96476: IFFALSE 96486
// sRocket := true ;
96478: LD_ADDR_EXP 84
96482: PUSH
96483: LD_INT 1
96485: ST_TO_ADDR
// if p3 = 2 then
96486: LD_VAR 0 3
96490: PUSH
96491: LD_INT 2
96493: EQUAL
96494: IFFALSE 96504
// sSpeed := true ;
96496: LD_ADDR_EXP 83
96500: PUSH
96501: LD_INT 1
96503: ST_TO_ADDR
// if p3 = 3 then
96504: LD_VAR 0 3
96508: PUSH
96509: LD_INT 3
96511: EQUAL
96512: IFFALSE 96522
// sEngine := true ;
96514: LD_ADDR_EXP 85
96518: PUSH
96519: LD_INT 1
96521: ST_TO_ADDR
// if p3 = 4 then
96522: LD_VAR 0 3
96526: PUSH
96527: LD_INT 4
96529: EQUAL
96530: IFFALSE 96540
// sSpec := true ;
96532: LD_ADDR_EXP 82
96536: PUSH
96537: LD_INT 1
96539: ST_TO_ADDR
// if p3 = 5 then
96540: LD_VAR 0 3
96544: PUSH
96545: LD_INT 5
96547: EQUAL
96548: IFFALSE 96558
// sLevel := true ;
96550: LD_ADDR_EXP 86
96554: PUSH
96555: LD_INT 1
96557: ST_TO_ADDR
// if p3 = 6 then
96558: LD_VAR 0 3
96562: PUSH
96563: LD_INT 6
96565: EQUAL
96566: IFFALSE 96576
// sArmoury := true ;
96568: LD_ADDR_EXP 87
96572: PUSH
96573: LD_INT 1
96575: ST_TO_ADDR
// if p3 = 7 then
96576: LD_VAR 0 3
96580: PUSH
96581: LD_INT 7
96583: EQUAL
96584: IFFALSE 96594
// sRadar := true ;
96586: LD_ADDR_EXP 88
96590: PUSH
96591: LD_INT 1
96593: ST_TO_ADDR
// if p3 = 8 then
96594: LD_VAR 0 3
96598: PUSH
96599: LD_INT 8
96601: EQUAL
96602: IFFALSE 96612
// sBunker := true ;
96604: LD_ADDR_EXP 89
96608: PUSH
96609: LD_INT 1
96611: ST_TO_ADDR
// if p3 = 9 then
96612: LD_VAR 0 3
96616: PUSH
96617: LD_INT 9
96619: EQUAL
96620: IFFALSE 96630
// sHack := true ;
96622: LD_ADDR_EXP 90
96626: PUSH
96627: LD_INT 1
96629: ST_TO_ADDR
// if p3 = 10 then
96630: LD_VAR 0 3
96634: PUSH
96635: LD_INT 10
96637: EQUAL
96638: IFFALSE 96648
// sFire := true ;
96640: LD_ADDR_EXP 91
96644: PUSH
96645: LD_INT 1
96647: ST_TO_ADDR
// if p3 = 11 then
96648: LD_VAR 0 3
96652: PUSH
96653: LD_INT 11
96655: EQUAL
96656: IFFALSE 96666
// sRefresh := true ;
96658: LD_ADDR_EXP 92
96662: PUSH
96663: LD_INT 1
96665: ST_TO_ADDR
// if p3 = 12 then
96666: LD_VAR 0 3
96670: PUSH
96671: LD_INT 12
96673: EQUAL
96674: IFFALSE 96684
// sExp := true ;
96676: LD_ADDR_EXP 93
96680: PUSH
96681: LD_INT 1
96683: ST_TO_ADDR
// if p3 = 13 then
96684: LD_VAR 0 3
96688: PUSH
96689: LD_INT 13
96691: EQUAL
96692: IFFALSE 96702
// sDepot := true ;
96694: LD_ADDR_EXP 94
96698: PUSH
96699: LD_INT 1
96701: ST_TO_ADDR
// if p3 = 14 then
96702: LD_VAR 0 3
96706: PUSH
96707: LD_INT 14
96709: EQUAL
96710: IFFALSE 96720
// sFlag := true ;
96712: LD_ADDR_EXP 95
96716: PUSH
96717: LD_INT 1
96719: ST_TO_ADDR
// if p3 = 15 then
96720: LD_VAR 0 3
96724: PUSH
96725: LD_INT 15
96727: EQUAL
96728: IFFALSE 96738
// sKamikadze := true ;
96730: LD_ADDR_EXP 103
96734: PUSH
96735: LD_INT 1
96737: ST_TO_ADDR
// if p3 = 16 then
96738: LD_VAR 0 3
96742: PUSH
96743: LD_INT 16
96745: EQUAL
96746: IFFALSE 96756
// sTroll := true ;
96748: LD_ADDR_EXP 104
96752: PUSH
96753: LD_INT 1
96755: ST_TO_ADDR
// if p3 = 17 then
96756: LD_VAR 0 3
96760: PUSH
96761: LD_INT 17
96763: EQUAL
96764: IFFALSE 96774
// sSlow := true ;
96766: LD_ADDR_EXP 105
96770: PUSH
96771: LD_INT 1
96773: ST_TO_ADDR
// if p3 = 18 then
96774: LD_VAR 0 3
96778: PUSH
96779: LD_INT 18
96781: EQUAL
96782: IFFALSE 96792
// sLack := true ;
96784: LD_ADDR_EXP 106
96788: PUSH
96789: LD_INT 1
96791: ST_TO_ADDR
// if p3 = 19 then
96792: LD_VAR 0 3
96796: PUSH
96797: LD_INT 19
96799: EQUAL
96800: IFFALSE 96810
// sTank := true ;
96802: LD_ADDR_EXP 108
96806: PUSH
96807: LD_INT 1
96809: ST_TO_ADDR
// if p3 = 20 then
96810: LD_VAR 0 3
96814: PUSH
96815: LD_INT 20
96817: EQUAL
96818: IFFALSE 96828
// sRemote := true ;
96820: LD_ADDR_EXP 109
96824: PUSH
96825: LD_INT 1
96827: ST_TO_ADDR
// if p3 = 21 then
96828: LD_VAR 0 3
96832: PUSH
96833: LD_INT 21
96835: EQUAL
96836: IFFALSE 96846
// sPowell := true ;
96838: LD_ADDR_EXP 110
96842: PUSH
96843: LD_INT 1
96845: ST_TO_ADDR
// if p3 = 22 then
96846: LD_VAR 0 3
96850: PUSH
96851: LD_INT 22
96853: EQUAL
96854: IFFALSE 96864
// sTeleport := true ;
96856: LD_ADDR_EXP 113
96860: PUSH
96861: LD_INT 1
96863: ST_TO_ADDR
// if p3 = 23 then
96864: LD_VAR 0 3
96868: PUSH
96869: LD_INT 23
96871: EQUAL
96872: IFFALSE 96882
// sOilTower := true ;
96874: LD_ADDR_EXP 115
96878: PUSH
96879: LD_INT 1
96881: ST_TO_ADDR
// if p3 = 24 then
96882: LD_VAR 0 3
96886: PUSH
96887: LD_INT 24
96889: EQUAL
96890: IFFALSE 96900
// sShovel := true ;
96892: LD_ADDR_EXP 116
96896: PUSH
96897: LD_INT 1
96899: ST_TO_ADDR
// if p3 = 25 then
96900: LD_VAR 0 3
96904: PUSH
96905: LD_INT 25
96907: EQUAL
96908: IFFALSE 96918
// sSheik := true ;
96910: LD_ADDR_EXP 117
96914: PUSH
96915: LD_INT 1
96917: ST_TO_ADDR
// if p3 = 26 then
96918: LD_VAR 0 3
96922: PUSH
96923: LD_INT 26
96925: EQUAL
96926: IFFALSE 96936
// sEarthquake := true ;
96928: LD_ADDR_EXP 119
96932: PUSH
96933: LD_INT 1
96935: ST_TO_ADDR
// if p3 = 27 then
96936: LD_VAR 0 3
96940: PUSH
96941: LD_INT 27
96943: EQUAL
96944: IFFALSE 96954
// sAI := true ;
96946: LD_ADDR_EXP 120
96950: PUSH
96951: LD_INT 1
96953: ST_TO_ADDR
// if p3 = 28 then
96954: LD_VAR 0 3
96958: PUSH
96959: LD_INT 28
96961: EQUAL
96962: IFFALSE 96972
// sCargo := true ;
96964: LD_ADDR_EXP 123
96968: PUSH
96969: LD_INT 1
96971: ST_TO_ADDR
// if p3 = 29 then
96972: LD_VAR 0 3
96976: PUSH
96977: LD_INT 29
96979: EQUAL
96980: IFFALSE 96990
// sDLaser := true ;
96982: LD_ADDR_EXP 124
96986: PUSH
96987: LD_INT 1
96989: ST_TO_ADDR
// if p3 = 30 then
96990: LD_VAR 0 3
96994: PUSH
96995: LD_INT 30
96997: EQUAL
96998: IFFALSE 97008
// sExchange := true ;
97000: LD_ADDR_EXP 125
97004: PUSH
97005: LD_INT 1
97007: ST_TO_ADDR
// if p3 = 31 then
97008: LD_VAR 0 3
97012: PUSH
97013: LD_INT 31
97015: EQUAL
97016: IFFALSE 97026
// sFac := true ;
97018: LD_ADDR_EXP 126
97022: PUSH
97023: LD_INT 1
97025: ST_TO_ADDR
// if p3 = 32 then
97026: LD_VAR 0 3
97030: PUSH
97031: LD_INT 32
97033: EQUAL
97034: IFFALSE 97044
// sPower := true ;
97036: LD_ADDR_EXP 127
97040: PUSH
97041: LD_INT 1
97043: ST_TO_ADDR
// if p3 = 33 then
97044: LD_VAR 0 3
97048: PUSH
97049: LD_INT 33
97051: EQUAL
97052: IFFALSE 97062
// sRandom := true ;
97054: LD_ADDR_EXP 128
97058: PUSH
97059: LD_INT 1
97061: ST_TO_ADDR
// if p3 = 34 then
97062: LD_VAR 0 3
97066: PUSH
97067: LD_INT 34
97069: EQUAL
97070: IFFALSE 97080
// sShield := true ;
97072: LD_ADDR_EXP 129
97076: PUSH
97077: LD_INT 1
97079: ST_TO_ADDR
// if p3 = 35 then
97080: LD_VAR 0 3
97084: PUSH
97085: LD_INT 35
97087: EQUAL
97088: IFFALSE 97098
// sTime := true ;
97090: LD_ADDR_EXP 130
97094: PUSH
97095: LD_INT 1
97097: ST_TO_ADDR
// if p3 = 36 then
97098: LD_VAR 0 3
97102: PUSH
97103: LD_INT 36
97105: EQUAL
97106: IFFALSE 97116
// sTools := true ;
97108: LD_ADDR_EXP 131
97112: PUSH
97113: LD_INT 1
97115: ST_TO_ADDR
// if p3 = 101 then
97116: LD_VAR 0 3
97120: PUSH
97121: LD_INT 101
97123: EQUAL
97124: IFFALSE 97134
// sSold := true ;
97126: LD_ADDR_EXP 96
97130: PUSH
97131: LD_INT 1
97133: ST_TO_ADDR
// if p3 = 102 then
97134: LD_VAR 0 3
97138: PUSH
97139: LD_INT 102
97141: EQUAL
97142: IFFALSE 97152
// sDiff := true ;
97144: LD_ADDR_EXP 97
97148: PUSH
97149: LD_INT 1
97151: ST_TO_ADDR
// if p3 = 103 then
97152: LD_VAR 0 3
97156: PUSH
97157: LD_INT 103
97159: EQUAL
97160: IFFALSE 97170
// sFog := true ;
97162: LD_ADDR_EXP 100
97166: PUSH
97167: LD_INT 1
97169: ST_TO_ADDR
// if p3 = 104 then
97170: LD_VAR 0 3
97174: PUSH
97175: LD_INT 104
97177: EQUAL
97178: IFFALSE 97188
// sReset := true ;
97180: LD_ADDR_EXP 101
97184: PUSH
97185: LD_INT 1
97187: ST_TO_ADDR
// if p3 = 105 then
97188: LD_VAR 0 3
97192: PUSH
97193: LD_INT 105
97195: EQUAL
97196: IFFALSE 97206
// sSun := true ;
97198: LD_ADDR_EXP 102
97202: PUSH
97203: LD_INT 1
97205: ST_TO_ADDR
// if p3 = 106 then
97206: LD_VAR 0 3
97210: PUSH
97211: LD_INT 106
97213: EQUAL
97214: IFFALSE 97224
// sTiger := true ;
97216: LD_ADDR_EXP 98
97220: PUSH
97221: LD_INT 1
97223: ST_TO_ADDR
// if p3 = 107 then
97224: LD_VAR 0 3
97228: PUSH
97229: LD_INT 107
97231: EQUAL
97232: IFFALSE 97242
// sBomb := true ;
97234: LD_ADDR_EXP 99
97238: PUSH
97239: LD_INT 1
97241: ST_TO_ADDR
// if p3 = 108 then
97242: LD_VAR 0 3
97246: PUSH
97247: LD_INT 108
97249: EQUAL
97250: IFFALSE 97260
// sWound := true ;
97252: LD_ADDR_EXP 107
97256: PUSH
97257: LD_INT 1
97259: ST_TO_ADDR
// if p3 = 109 then
97260: LD_VAR 0 3
97264: PUSH
97265: LD_INT 109
97267: EQUAL
97268: IFFALSE 97278
// sBetray := true ;
97270: LD_ADDR_EXP 111
97274: PUSH
97275: LD_INT 1
97277: ST_TO_ADDR
// if p3 = 110 then
97278: LD_VAR 0 3
97282: PUSH
97283: LD_INT 110
97285: EQUAL
97286: IFFALSE 97296
// sContamin := true ;
97288: LD_ADDR_EXP 112
97292: PUSH
97293: LD_INT 1
97295: ST_TO_ADDR
// if p3 = 111 then
97296: LD_VAR 0 3
97300: PUSH
97301: LD_INT 111
97303: EQUAL
97304: IFFALSE 97314
// sOil := true ;
97306: LD_ADDR_EXP 114
97310: PUSH
97311: LD_INT 1
97313: ST_TO_ADDR
// if p3 = 112 then
97314: LD_VAR 0 3
97318: PUSH
97319: LD_INT 112
97321: EQUAL
97322: IFFALSE 97332
// sStu := true ;
97324: LD_ADDR_EXP 118
97328: PUSH
97329: LD_INT 1
97331: ST_TO_ADDR
// if p3 = 113 then
97332: LD_VAR 0 3
97336: PUSH
97337: LD_INT 113
97339: EQUAL
97340: IFFALSE 97350
// sBazooka := true ;
97342: LD_ADDR_EXP 121
97346: PUSH
97347: LD_INT 1
97349: ST_TO_ADDR
// if p3 = 114 then
97350: LD_VAR 0 3
97354: PUSH
97355: LD_INT 114
97357: EQUAL
97358: IFFALSE 97368
// sMortar := true ;
97360: LD_ADDR_EXP 122
97364: PUSH
97365: LD_INT 1
97367: ST_TO_ADDR
// if p3 = 115 then
97368: LD_VAR 0 3
97372: PUSH
97373: LD_INT 115
97375: EQUAL
97376: IFFALSE 97386
// sRanger := true ;
97378: LD_ADDR_EXP 132
97382: PUSH
97383: LD_INT 1
97385: ST_TO_ADDR
// end ; end ;
97386: PPOPN 6
97388: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
97389: LD_EXP 79
97393: PUSH
97394: LD_EXP 84
97398: AND
97399: IFFALSE 97523
97401: GO 97403
97403: DISABLE
97404: LD_INT 0
97406: PPUSH
97407: PPUSH
// begin enable ;
97408: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
97409: LD_ADDR_VAR 0 2
97413: PUSH
97414: LD_INT 22
97416: PUSH
97417: LD_OWVAR 2
97421: PUSH
97422: EMPTY
97423: LIST
97424: LIST
97425: PUSH
97426: LD_INT 2
97428: PUSH
97429: LD_INT 34
97431: PUSH
97432: LD_INT 7
97434: PUSH
97435: EMPTY
97436: LIST
97437: LIST
97438: PUSH
97439: LD_INT 34
97441: PUSH
97442: LD_INT 45
97444: PUSH
97445: EMPTY
97446: LIST
97447: LIST
97448: PUSH
97449: LD_INT 34
97451: PUSH
97452: LD_INT 28
97454: PUSH
97455: EMPTY
97456: LIST
97457: LIST
97458: PUSH
97459: LD_INT 34
97461: PUSH
97462: LD_INT 47
97464: PUSH
97465: EMPTY
97466: LIST
97467: LIST
97468: PUSH
97469: EMPTY
97470: LIST
97471: LIST
97472: LIST
97473: LIST
97474: LIST
97475: PUSH
97476: EMPTY
97477: LIST
97478: LIST
97479: PPUSH
97480: CALL_OW 69
97484: ST_TO_ADDR
// if not tmp then
97485: LD_VAR 0 2
97489: NOT
97490: IFFALSE 97494
// exit ;
97492: GO 97523
// for i in tmp do
97494: LD_ADDR_VAR 0 1
97498: PUSH
97499: LD_VAR 0 2
97503: PUSH
97504: FOR_IN
97505: IFFALSE 97521
// begin SetLives ( i , 0 ) ;
97507: LD_VAR 0 1
97511: PPUSH
97512: LD_INT 0
97514: PPUSH
97515: CALL_OW 234
// end ;
97519: GO 97504
97521: POP
97522: POP
// end ;
97523: PPOPN 2
97525: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
97526: LD_EXP 79
97530: PUSH
97531: LD_EXP 85
97535: AND
97536: IFFALSE 97620
97538: GO 97540
97540: DISABLE
97541: LD_INT 0
97543: PPUSH
97544: PPUSH
// begin enable ;
97545: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
97546: LD_ADDR_VAR 0 2
97550: PUSH
97551: LD_INT 22
97553: PUSH
97554: LD_OWVAR 2
97558: PUSH
97559: EMPTY
97560: LIST
97561: LIST
97562: PUSH
97563: LD_INT 32
97565: PUSH
97566: LD_INT 3
97568: PUSH
97569: EMPTY
97570: LIST
97571: LIST
97572: PUSH
97573: EMPTY
97574: LIST
97575: LIST
97576: PPUSH
97577: CALL_OW 69
97581: ST_TO_ADDR
// if not tmp then
97582: LD_VAR 0 2
97586: NOT
97587: IFFALSE 97591
// exit ;
97589: GO 97620
// for i in tmp do
97591: LD_ADDR_VAR 0 1
97595: PUSH
97596: LD_VAR 0 2
97600: PUSH
97601: FOR_IN
97602: IFFALSE 97618
// begin SetLives ( i , 0 ) ;
97604: LD_VAR 0 1
97608: PPUSH
97609: LD_INT 0
97611: PPUSH
97612: CALL_OW 234
// end ;
97616: GO 97601
97618: POP
97619: POP
// end ;
97620: PPOPN 2
97622: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
97623: LD_EXP 79
97627: PUSH
97628: LD_EXP 82
97632: AND
97633: IFFALSE 97726
97635: GO 97637
97637: DISABLE
97638: LD_INT 0
97640: PPUSH
// begin enable ;
97641: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
97642: LD_ADDR_VAR 0 1
97646: PUSH
97647: LD_INT 22
97649: PUSH
97650: LD_OWVAR 2
97654: PUSH
97655: EMPTY
97656: LIST
97657: LIST
97658: PUSH
97659: LD_INT 2
97661: PUSH
97662: LD_INT 25
97664: PUSH
97665: LD_INT 5
97667: PUSH
97668: EMPTY
97669: LIST
97670: LIST
97671: PUSH
97672: LD_INT 25
97674: PUSH
97675: LD_INT 9
97677: PUSH
97678: EMPTY
97679: LIST
97680: LIST
97681: PUSH
97682: LD_INT 25
97684: PUSH
97685: LD_INT 8
97687: PUSH
97688: EMPTY
97689: LIST
97690: LIST
97691: PUSH
97692: EMPTY
97693: LIST
97694: LIST
97695: LIST
97696: LIST
97697: PUSH
97698: EMPTY
97699: LIST
97700: LIST
97701: PPUSH
97702: CALL_OW 69
97706: PUSH
97707: FOR_IN
97708: IFFALSE 97724
// begin SetClass ( i , 1 ) ;
97710: LD_VAR 0 1
97714: PPUSH
97715: LD_INT 1
97717: PPUSH
97718: CALL_OW 336
// end ;
97722: GO 97707
97724: POP
97725: POP
// end ;
97726: PPOPN 1
97728: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
97729: LD_EXP 79
97733: PUSH
97734: LD_EXP 83
97738: AND
97739: PUSH
97740: LD_OWVAR 65
97744: PUSH
97745: LD_INT 7
97747: LESS
97748: AND
97749: IFFALSE 97763
97751: GO 97753
97753: DISABLE
// begin enable ;
97754: ENABLE
// game_speed := 7 ;
97755: LD_ADDR_OWVAR 65
97759: PUSH
97760: LD_INT 7
97762: ST_TO_ADDR
// end ;
97763: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
97764: LD_EXP 79
97768: PUSH
97769: LD_EXP 86
97773: AND
97774: IFFALSE 97976
97776: GO 97778
97778: DISABLE
97779: LD_INT 0
97781: PPUSH
97782: PPUSH
97783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
97784: LD_ADDR_VAR 0 3
97788: PUSH
97789: LD_INT 81
97791: PUSH
97792: LD_OWVAR 2
97796: PUSH
97797: EMPTY
97798: LIST
97799: LIST
97800: PUSH
97801: LD_INT 21
97803: PUSH
97804: LD_INT 1
97806: PUSH
97807: EMPTY
97808: LIST
97809: LIST
97810: PUSH
97811: EMPTY
97812: LIST
97813: LIST
97814: PPUSH
97815: CALL_OW 69
97819: ST_TO_ADDR
// if not tmp then
97820: LD_VAR 0 3
97824: NOT
97825: IFFALSE 97829
// exit ;
97827: GO 97976
// if tmp > 5 then
97829: LD_VAR 0 3
97833: PUSH
97834: LD_INT 5
97836: GREATER
97837: IFFALSE 97849
// k := 5 else
97839: LD_ADDR_VAR 0 2
97843: PUSH
97844: LD_INT 5
97846: ST_TO_ADDR
97847: GO 97859
// k := tmp ;
97849: LD_ADDR_VAR 0 2
97853: PUSH
97854: LD_VAR 0 3
97858: ST_TO_ADDR
// for i := 1 to k do
97859: LD_ADDR_VAR 0 1
97863: PUSH
97864: DOUBLE
97865: LD_INT 1
97867: DEC
97868: ST_TO_ADDR
97869: LD_VAR 0 2
97873: PUSH
97874: FOR_TO
97875: IFFALSE 97974
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
97877: LD_VAR 0 3
97881: PUSH
97882: LD_VAR 0 1
97886: ARRAY
97887: PPUSH
97888: LD_VAR 0 1
97892: PUSH
97893: LD_INT 4
97895: MOD
97896: PUSH
97897: LD_INT 1
97899: PLUS
97900: PPUSH
97901: CALL_OW 259
97905: PUSH
97906: LD_INT 10
97908: LESS
97909: IFFALSE 97972
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
97911: LD_VAR 0 3
97915: PUSH
97916: LD_VAR 0 1
97920: ARRAY
97921: PPUSH
97922: LD_VAR 0 1
97926: PUSH
97927: LD_INT 4
97929: MOD
97930: PUSH
97931: LD_INT 1
97933: PLUS
97934: PPUSH
97935: LD_VAR 0 3
97939: PUSH
97940: LD_VAR 0 1
97944: ARRAY
97945: PPUSH
97946: LD_VAR 0 1
97950: PUSH
97951: LD_INT 4
97953: MOD
97954: PUSH
97955: LD_INT 1
97957: PLUS
97958: PPUSH
97959: CALL_OW 259
97963: PUSH
97964: LD_INT 1
97966: PLUS
97967: PPUSH
97968: CALL_OW 237
97972: GO 97874
97974: POP
97975: POP
// end ;
97976: PPOPN 3
97978: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
97979: LD_EXP 79
97983: PUSH
97984: LD_EXP 87
97988: AND
97989: IFFALSE 98009
97991: GO 97993
97993: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
97994: LD_INT 4
97996: PPUSH
97997: LD_OWVAR 2
98001: PPUSH
98002: LD_INT 0
98004: PPUSH
98005: CALL_OW 324
98009: END
// every 0 0$1 trigger StreamModeActive and sShovel do
98010: LD_EXP 79
98014: PUSH
98015: LD_EXP 116
98019: AND
98020: IFFALSE 98040
98022: GO 98024
98024: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
98025: LD_INT 19
98027: PPUSH
98028: LD_OWVAR 2
98032: PPUSH
98033: LD_INT 0
98035: PPUSH
98036: CALL_OW 324
98040: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
98041: LD_EXP 79
98045: PUSH
98046: LD_EXP 88
98050: AND
98051: IFFALSE 98153
98053: GO 98055
98055: DISABLE
98056: LD_INT 0
98058: PPUSH
98059: PPUSH
// begin enable ;
98060: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
98061: LD_ADDR_VAR 0 2
98065: PUSH
98066: LD_INT 22
98068: PUSH
98069: LD_OWVAR 2
98073: PUSH
98074: EMPTY
98075: LIST
98076: LIST
98077: PUSH
98078: LD_INT 2
98080: PUSH
98081: LD_INT 34
98083: PUSH
98084: LD_INT 11
98086: PUSH
98087: EMPTY
98088: LIST
98089: LIST
98090: PUSH
98091: LD_INT 34
98093: PUSH
98094: LD_INT 30
98096: PUSH
98097: EMPTY
98098: LIST
98099: LIST
98100: PUSH
98101: EMPTY
98102: LIST
98103: LIST
98104: LIST
98105: PUSH
98106: EMPTY
98107: LIST
98108: LIST
98109: PPUSH
98110: CALL_OW 69
98114: ST_TO_ADDR
// if not tmp then
98115: LD_VAR 0 2
98119: NOT
98120: IFFALSE 98124
// exit ;
98122: GO 98153
// for i in tmp do
98124: LD_ADDR_VAR 0 1
98128: PUSH
98129: LD_VAR 0 2
98133: PUSH
98134: FOR_IN
98135: IFFALSE 98151
// begin SetLives ( i , 0 ) ;
98137: LD_VAR 0 1
98141: PPUSH
98142: LD_INT 0
98144: PPUSH
98145: CALL_OW 234
// end ;
98149: GO 98134
98151: POP
98152: POP
// end ;
98153: PPOPN 2
98155: END
// every 0 0$1 trigger StreamModeActive and sBunker do
98156: LD_EXP 79
98160: PUSH
98161: LD_EXP 89
98165: AND
98166: IFFALSE 98186
98168: GO 98170
98170: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
98171: LD_INT 32
98173: PPUSH
98174: LD_OWVAR 2
98178: PPUSH
98179: LD_INT 0
98181: PPUSH
98182: CALL_OW 324
98186: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
98187: LD_EXP 79
98191: PUSH
98192: LD_EXP 90
98196: AND
98197: IFFALSE 98378
98199: GO 98201
98201: DISABLE
98202: LD_INT 0
98204: PPUSH
98205: PPUSH
98206: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
98207: LD_ADDR_VAR 0 2
98211: PUSH
98212: LD_INT 22
98214: PUSH
98215: LD_OWVAR 2
98219: PUSH
98220: EMPTY
98221: LIST
98222: LIST
98223: PUSH
98224: LD_INT 33
98226: PUSH
98227: LD_INT 3
98229: PUSH
98230: EMPTY
98231: LIST
98232: LIST
98233: PUSH
98234: EMPTY
98235: LIST
98236: LIST
98237: PPUSH
98238: CALL_OW 69
98242: ST_TO_ADDR
// if not tmp then
98243: LD_VAR 0 2
98247: NOT
98248: IFFALSE 98252
// exit ;
98250: GO 98378
// side := 0 ;
98252: LD_ADDR_VAR 0 3
98256: PUSH
98257: LD_INT 0
98259: ST_TO_ADDR
// for i := 1 to 8 do
98260: LD_ADDR_VAR 0 1
98264: PUSH
98265: DOUBLE
98266: LD_INT 1
98268: DEC
98269: ST_TO_ADDR
98270: LD_INT 8
98272: PUSH
98273: FOR_TO
98274: IFFALSE 98322
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
98276: LD_OWVAR 2
98280: PUSH
98281: LD_VAR 0 1
98285: NONEQUAL
98286: PUSH
98287: LD_OWVAR 2
98291: PPUSH
98292: LD_VAR 0 1
98296: PPUSH
98297: CALL_OW 81
98301: PUSH
98302: LD_INT 2
98304: EQUAL
98305: AND
98306: IFFALSE 98320
// begin side := i ;
98308: LD_ADDR_VAR 0 3
98312: PUSH
98313: LD_VAR 0 1
98317: ST_TO_ADDR
// break ;
98318: GO 98322
// end ;
98320: GO 98273
98322: POP
98323: POP
// if not side then
98324: LD_VAR 0 3
98328: NOT
98329: IFFALSE 98333
// exit ;
98331: GO 98378
// for i := 1 to tmp do
98333: LD_ADDR_VAR 0 1
98337: PUSH
98338: DOUBLE
98339: LD_INT 1
98341: DEC
98342: ST_TO_ADDR
98343: LD_VAR 0 2
98347: PUSH
98348: FOR_TO
98349: IFFALSE 98376
// if Prob ( 60 ) then
98351: LD_INT 60
98353: PPUSH
98354: CALL_OW 13
98358: IFFALSE 98374
// SetSide ( i , side ) ;
98360: LD_VAR 0 1
98364: PPUSH
98365: LD_VAR 0 3
98369: PPUSH
98370: CALL_OW 235
98374: GO 98348
98376: POP
98377: POP
// end ;
98378: PPOPN 3
98380: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
98381: LD_EXP 79
98385: PUSH
98386: LD_EXP 92
98390: AND
98391: IFFALSE 98510
98393: GO 98395
98395: DISABLE
98396: LD_INT 0
98398: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
98399: LD_ADDR_VAR 0 1
98403: PUSH
98404: LD_INT 22
98406: PUSH
98407: LD_OWVAR 2
98411: PUSH
98412: EMPTY
98413: LIST
98414: LIST
98415: PUSH
98416: LD_INT 21
98418: PUSH
98419: LD_INT 1
98421: PUSH
98422: EMPTY
98423: LIST
98424: LIST
98425: PUSH
98426: LD_INT 3
98428: PUSH
98429: LD_INT 23
98431: PUSH
98432: LD_INT 0
98434: PUSH
98435: EMPTY
98436: LIST
98437: LIST
98438: PUSH
98439: EMPTY
98440: LIST
98441: LIST
98442: PUSH
98443: EMPTY
98444: LIST
98445: LIST
98446: LIST
98447: PPUSH
98448: CALL_OW 69
98452: PUSH
98453: FOR_IN
98454: IFFALSE 98508
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
98456: LD_VAR 0 1
98460: PPUSH
98461: CALL_OW 257
98465: PUSH
98466: LD_INT 1
98468: PUSH
98469: LD_INT 2
98471: PUSH
98472: LD_INT 3
98474: PUSH
98475: LD_INT 4
98477: PUSH
98478: EMPTY
98479: LIST
98480: LIST
98481: LIST
98482: LIST
98483: IN
98484: IFFALSE 98506
// SetClass ( un , rand ( 1 , 4 ) ) ;
98486: LD_VAR 0 1
98490: PPUSH
98491: LD_INT 1
98493: PPUSH
98494: LD_INT 4
98496: PPUSH
98497: CALL_OW 12
98501: PPUSH
98502: CALL_OW 336
98506: GO 98453
98508: POP
98509: POP
// end ;
98510: PPOPN 1
98512: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
98513: LD_EXP 79
98517: PUSH
98518: LD_EXP 91
98522: AND
98523: IFFALSE 98602
98525: GO 98527
98527: DISABLE
98528: LD_INT 0
98530: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
98531: LD_ADDR_VAR 0 1
98535: PUSH
98536: LD_INT 22
98538: PUSH
98539: LD_OWVAR 2
98543: PUSH
98544: EMPTY
98545: LIST
98546: LIST
98547: PUSH
98548: LD_INT 21
98550: PUSH
98551: LD_INT 3
98553: PUSH
98554: EMPTY
98555: LIST
98556: LIST
98557: PUSH
98558: EMPTY
98559: LIST
98560: LIST
98561: PPUSH
98562: CALL_OW 69
98566: ST_TO_ADDR
// if not tmp then
98567: LD_VAR 0 1
98571: NOT
98572: IFFALSE 98576
// exit ;
98574: GO 98602
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
98576: LD_VAR 0 1
98580: PUSH
98581: LD_INT 1
98583: PPUSH
98584: LD_VAR 0 1
98588: PPUSH
98589: CALL_OW 12
98593: ARRAY
98594: PPUSH
98595: LD_INT 100
98597: PPUSH
98598: CALL_OW 234
// end ;
98602: PPOPN 1
98604: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
98605: LD_EXP 79
98609: PUSH
98610: LD_EXP 93
98614: AND
98615: IFFALSE 98713
98617: GO 98619
98619: DISABLE
98620: LD_INT 0
98622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
98623: LD_ADDR_VAR 0 1
98627: PUSH
98628: LD_INT 22
98630: PUSH
98631: LD_OWVAR 2
98635: PUSH
98636: EMPTY
98637: LIST
98638: LIST
98639: PUSH
98640: LD_INT 21
98642: PUSH
98643: LD_INT 1
98645: PUSH
98646: EMPTY
98647: LIST
98648: LIST
98649: PUSH
98650: EMPTY
98651: LIST
98652: LIST
98653: PPUSH
98654: CALL_OW 69
98658: ST_TO_ADDR
// if not tmp then
98659: LD_VAR 0 1
98663: NOT
98664: IFFALSE 98668
// exit ;
98666: GO 98713
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
98668: LD_VAR 0 1
98672: PUSH
98673: LD_INT 1
98675: PPUSH
98676: LD_VAR 0 1
98680: PPUSH
98681: CALL_OW 12
98685: ARRAY
98686: PPUSH
98687: LD_INT 1
98689: PPUSH
98690: LD_INT 4
98692: PPUSH
98693: CALL_OW 12
98697: PPUSH
98698: LD_INT 3000
98700: PPUSH
98701: LD_INT 9000
98703: PPUSH
98704: CALL_OW 12
98708: PPUSH
98709: CALL_OW 492
// end ;
98713: PPOPN 1
98715: END
// every 0 0$1 trigger StreamModeActive and sDepot do
98716: LD_EXP 79
98720: PUSH
98721: LD_EXP 94
98725: AND
98726: IFFALSE 98746
98728: GO 98730
98730: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
98731: LD_INT 1
98733: PPUSH
98734: LD_OWVAR 2
98738: PPUSH
98739: LD_INT 0
98741: PPUSH
98742: CALL_OW 324
98746: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
98747: LD_EXP 79
98751: PUSH
98752: LD_EXP 95
98756: AND
98757: IFFALSE 98840
98759: GO 98761
98761: DISABLE
98762: LD_INT 0
98764: PPUSH
98765: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
98766: LD_ADDR_VAR 0 2
98770: PUSH
98771: LD_INT 22
98773: PUSH
98774: LD_OWVAR 2
98778: PUSH
98779: EMPTY
98780: LIST
98781: LIST
98782: PUSH
98783: LD_INT 21
98785: PUSH
98786: LD_INT 3
98788: PUSH
98789: EMPTY
98790: LIST
98791: LIST
98792: PUSH
98793: EMPTY
98794: LIST
98795: LIST
98796: PPUSH
98797: CALL_OW 69
98801: ST_TO_ADDR
// if not tmp then
98802: LD_VAR 0 2
98806: NOT
98807: IFFALSE 98811
// exit ;
98809: GO 98840
// for i in tmp do
98811: LD_ADDR_VAR 0 1
98815: PUSH
98816: LD_VAR 0 2
98820: PUSH
98821: FOR_IN
98822: IFFALSE 98838
// SetBLevel ( i , 10 ) ;
98824: LD_VAR 0 1
98828: PPUSH
98829: LD_INT 10
98831: PPUSH
98832: CALL_OW 241
98836: GO 98821
98838: POP
98839: POP
// end ;
98840: PPOPN 2
98842: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
98843: LD_EXP 79
98847: PUSH
98848: LD_EXP 96
98852: AND
98853: IFFALSE 98964
98855: GO 98857
98857: DISABLE
98858: LD_INT 0
98860: PPUSH
98861: PPUSH
98862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
98863: LD_ADDR_VAR 0 3
98867: PUSH
98868: LD_INT 22
98870: PUSH
98871: LD_OWVAR 2
98875: PUSH
98876: EMPTY
98877: LIST
98878: LIST
98879: PUSH
98880: LD_INT 25
98882: PUSH
98883: LD_INT 1
98885: PUSH
98886: EMPTY
98887: LIST
98888: LIST
98889: PUSH
98890: EMPTY
98891: LIST
98892: LIST
98893: PPUSH
98894: CALL_OW 69
98898: ST_TO_ADDR
// if not tmp then
98899: LD_VAR 0 3
98903: NOT
98904: IFFALSE 98908
// exit ;
98906: GO 98964
// un := tmp [ rand ( 1 , tmp ) ] ;
98908: LD_ADDR_VAR 0 2
98912: PUSH
98913: LD_VAR 0 3
98917: PUSH
98918: LD_INT 1
98920: PPUSH
98921: LD_VAR 0 3
98925: PPUSH
98926: CALL_OW 12
98930: ARRAY
98931: ST_TO_ADDR
// if Crawls ( un ) then
98932: LD_VAR 0 2
98936: PPUSH
98937: CALL_OW 318
98941: IFFALSE 98952
// ComWalk ( un ) ;
98943: LD_VAR 0 2
98947: PPUSH
98948: CALL_OW 138
// SetClass ( un , class_sniper ) ;
98952: LD_VAR 0 2
98956: PPUSH
98957: LD_INT 5
98959: PPUSH
98960: CALL_OW 336
// end ;
98964: PPOPN 3
98966: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
98967: LD_EXP 79
98971: PUSH
98972: LD_EXP 97
98976: AND
98977: PUSH
98978: LD_OWVAR 67
98982: PUSH
98983: LD_INT 3
98985: LESS
98986: AND
98987: IFFALSE 99006
98989: GO 98991
98991: DISABLE
// Difficulty := Difficulty + 1 ;
98992: LD_ADDR_OWVAR 67
98996: PUSH
98997: LD_OWVAR 67
99001: PUSH
99002: LD_INT 1
99004: PLUS
99005: ST_TO_ADDR
99006: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
99007: LD_EXP 79
99011: PUSH
99012: LD_EXP 98
99016: AND
99017: IFFALSE 99120
99019: GO 99021
99021: DISABLE
99022: LD_INT 0
99024: PPUSH
// begin for i := 1 to 5 do
99025: LD_ADDR_VAR 0 1
99029: PUSH
99030: DOUBLE
99031: LD_INT 1
99033: DEC
99034: ST_TO_ADDR
99035: LD_INT 5
99037: PUSH
99038: FOR_TO
99039: IFFALSE 99118
// begin uc_nation := nation_nature ;
99041: LD_ADDR_OWVAR 21
99045: PUSH
99046: LD_INT 0
99048: ST_TO_ADDR
// uc_side := 0 ;
99049: LD_ADDR_OWVAR 20
99053: PUSH
99054: LD_INT 0
99056: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
99057: LD_ADDR_OWVAR 29
99061: PUSH
99062: LD_INT 12
99064: PUSH
99065: LD_INT 12
99067: PUSH
99068: EMPTY
99069: LIST
99070: LIST
99071: ST_TO_ADDR
// hc_agressivity := 20 ;
99072: LD_ADDR_OWVAR 35
99076: PUSH
99077: LD_INT 20
99079: ST_TO_ADDR
// hc_class := class_tiger ;
99080: LD_ADDR_OWVAR 28
99084: PUSH
99085: LD_INT 14
99087: ST_TO_ADDR
// hc_gallery :=  ;
99088: LD_ADDR_OWVAR 33
99092: PUSH
99093: LD_STRING 
99095: ST_TO_ADDR
// hc_name :=  ;
99096: LD_ADDR_OWVAR 26
99100: PUSH
99101: LD_STRING 
99103: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
99104: CALL_OW 44
99108: PPUSH
99109: LD_INT 0
99111: PPUSH
99112: CALL_OW 51
// end ;
99116: GO 99038
99118: POP
99119: POP
// end ;
99120: PPOPN 1
99122: END
// every 0 0$1 trigger StreamModeActive and sBomb do
99123: LD_EXP 79
99127: PUSH
99128: LD_EXP 99
99132: AND
99133: IFFALSE 99142
99135: GO 99137
99137: DISABLE
// StreamSibBomb ;
99138: CALL 99143 0 0
99142: END
// export function StreamSibBomb ; var i , x , y ; begin
99143: LD_INT 0
99145: PPUSH
99146: PPUSH
99147: PPUSH
99148: PPUSH
// result := false ;
99149: LD_ADDR_VAR 0 1
99153: PUSH
99154: LD_INT 0
99156: ST_TO_ADDR
// for i := 1 to 16 do
99157: LD_ADDR_VAR 0 2
99161: PUSH
99162: DOUBLE
99163: LD_INT 1
99165: DEC
99166: ST_TO_ADDR
99167: LD_INT 16
99169: PUSH
99170: FOR_TO
99171: IFFALSE 99370
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
99173: LD_ADDR_VAR 0 3
99177: PUSH
99178: LD_INT 10
99180: PUSH
99181: LD_INT 20
99183: PUSH
99184: LD_INT 30
99186: PUSH
99187: LD_INT 40
99189: PUSH
99190: LD_INT 50
99192: PUSH
99193: LD_INT 60
99195: PUSH
99196: LD_INT 70
99198: PUSH
99199: LD_INT 80
99201: PUSH
99202: LD_INT 90
99204: PUSH
99205: LD_INT 100
99207: PUSH
99208: LD_INT 110
99210: PUSH
99211: LD_INT 120
99213: PUSH
99214: LD_INT 130
99216: PUSH
99217: LD_INT 140
99219: PUSH
99220: LD_INT 150
99222: PUSH
99223: EMPTY
99224: LIST
99225: LIST
99226: LIST
99227: LIST
99228: LIST
99229: LIST
99230: LIST
99231: LIST
99232: LIST
99233: LIST
99234: LIST
99235: LIST
99236: LIST
99237: LIST
99238: LIST
99239: PUSH
99240: LD_INT 1
99242: PPUSH
99243: LD_INT 15
99245: PPUSH
99246: CALL_OW 12
99250: ARRAY
99251: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
99252: LD_ADDR_VAR 0 4
99256: PUSH
99257: LD_INT 10
99259: PUSH
99260: LD_INT 20
99262: PUSH
99263: LD_INT 30
99265: PUSH
99266: LD_INT 40
99268: PUSH
99269: LD_INT 50
99271: PUSH
99272: LD_INT 60
99274: PUSH
99275: LD_INT 70
99277: PUSH
99278: LD_INT 80
99280: PUSH
99281: LD_INT 90
99283: PUSH
99284: LD_INT 100
99286: PUSH
99287: LD_INT 110
99289: PUSH
99290: LD_INT 120
99292: PUSH
99293: LD_INT 130
99295: PUSH
99296: LD_INT 140
99298: PUSH
99299: LD_INT 150
99301: PUSH
99302: EMPTY
99303: LIST
99304: LIST
99305: LIST
99306: LIST
99307: LIST
99308: LIST
99309: LIST
99310: LIST
99311: LIST
99312: LIST
99313: LIST
99314: LIST
99315: LIST
99316: LIST
99317: LIST
99318: PUSH
99319: LD_INT 1
99321: PPUSH
99322: LD_INT 15
99324: PPUSH
99325: CALL_OW 12
99329: ARRAY
99330: ST_TO_ADDR
// if ValidHex ( x , y ) then
99331: LD_VAR 0 3
99335: PPUSH
99336: LD_VAR 0 4
99340: PPUSH
99341: CALL_OW 488
99345: IFFALSE 99368
// begin result := [ x , y ] ;
99347: LD_ADDR_VAR 0 1
99351: PUSH
99352: LD_VAR 0 3
99356: PUSH
99357: LD_VAR 0 4
99361: PUSH
99362: EMPTY
99363: LIST
99364: LIST
99365: ST_TO_ADDR
// break ;
99366: GO 99370
// end ; end ;
99368: GO 99170
99370: POP
99371: POP
// if result then
99372: LD_VAR 0 1
99376: IFFALSE 99436
// begin ToLua ( playSibBomb() ) ;
99378: LD_STRING playSibBomb()
99380: PPUSH
99381: CALL_OW 559
// wait ( 0 0$14 ) ;
99385: LD_INT 490
99387: PPUSH
99388: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
99392: LD_VAR 0 1
99396: PUSH
99397: LD_INT 1
99399: ARRAY
99400: PPUSH
99401: LD_VAR 0 1
99405: PUSH
99406: LD_INT 2
99408: ARRAY
99409: PPUSH
99410: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
99414: LD_VAR 0 1
99418: PUSH
99419: LD_INT 1
99421: ARRAY
99422: PPUSH
99423: LD_VAR 0 1
99427: PUSH
99428: LD_INT 2
99430: ARRAY
99431: PPUSH
99432: CALL_OW 429
// end ; end ;
99436: LD_VAR 0 1
99440: RET
// every 0 0$1 trigger StreamModeActive and sReset do
99441: LD_EXP 79
99445: PUSH
99446: LD_EXP 101
99450: AND
99451: IFFALSE 99463
99453: GO 99455
99455: DISABLE
// YouLost (  ) ;
99456: LD_STRING 
99458: PPUSH
99459: CALL_OW 104
99463: END
// every 0 0$1 trigger StreamModeActive and sFog do
99464: LD_EXP 79
99468: PUSH
99469: LD_EXP 100
99473: AND
99474: IFFALSE 99488
99476: GO 99478
99478: DISABLE
// FogOff ( your_side ) ;
99479: LD_OWVAR 2
99483: PPUSH
99484: CALL_OW 344
99488: END
// every 0 0$1 trigger StreamModeActive and sSun do
99489: LD_EXP 79
99493: PUSH
99494: LD_EXP 102
99498: AND
99499: IFFALSE 99527
99501: GO 99503
99503: DISABLE
// begin solar_recharge_percent := 0 ;
99504: LD_ADDR_OWVAR 79
99508: PUSH
99509: LD_INT 0
99511: ST_TO_ADDR
// wait ( 5 5$00 ) ;
99512: LD_INT 10500
99514: PPUSH
99515: CALL_OW 67
// solar_recharge_percent := 100 ;
99519: LD_ADDR_OWVAR 79
99523: PUSH
99524: LD_INT 100
99526: ST_TO_ADDR
// end ;
99527: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
99528: LD_EXP 79
99532: PUSH
99533: LD_EXP 103
99537: AND
99538: IFFALSE 99777
99540: GO 99542
99542: DISABLE
99543: LD_INT 0
99545: PPUSH
99546: PPUSH
99547: PPUSH
// begin tmp := [ ] ;
99548: LD_ADDR_VAR 0 3
99552: PUSH
99553: EMPTY
99554: ST_TO_ADDR
// for i := 1 to 6 do
99555: LD_ADDR_VAR 0 1
99559: PUSH
99560: DOUBLE
99561: LD_INT 1
99563: DEC
99564: ST_TO_ADDR
99565: LD_INT 6
99567: PUSH
99568: FOR_TO
99569: IFFALSE 99674
// begin uc_nation := nation_nature ;
99571: LD_ADDR_OWVAR 21
99575: PUSH
99576: LD_INT 0
99578: ST_TO_ADDR
// uc_side := 0 ;
99579: LD_ADDR_OWVAR 20
99583: PUSH
99584: LD_INT 0
99586: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
99587: LD_ADDR_OWVAR 29
99591: PUSH
99592: LD_INT 12
99594: PUSH
99595: LD_INT 12
99597: PUSH
99598: EMPTY
99599: LIST
99600: LIST
99601: ST_TO_ADDR
// hc_agressivity := 20 ;
99602: LD_ADDR_OWVAR 35
99606: PUSH
99607: LD_INT 20
99609: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
99610: LD_ADDR_OWVAR 28
99614: PUSH
99615: LD_INT 17
99617: ST_TO_ADDR
// hc_gallery :=  ;
99618: LD_ADDR_OWVAR 33
99622: PUSH
99623: LD_STRING 
99625: ST_TO_ADDR
// hc_name :=  ;
99626: LD_ADDR_OWVAR 26
99630: PUSH
99631: LD_STRING 
99633: ST_TO_ADDR
// un := CreateHuman ;
99634: LD_ADDR_VAR 0 2
99638: PUSH
99639: CALL_OW 44
99643: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
99644: LD_VAR 0 2
99648: PPUSH
99649: LD_INT 1
99651: PPUSH
99652: CALL_OW 51
// tmp := tmp ^ un ;
99656: LD_ADDR_VAR 0 3
99660: PUSH
99661: LD_VAR 0 3
99665: PUSH
99666: LD_VAR 0 2
99670: ADD
99671: ST_TO_ADDR
// end ;
99672: GO 99568
99674: POP
99675: POP
// repeat wait ( 0 0$1 ) ;
99676: LD_INT 35
99678: PPUSH
99679: CALL_OW 67
// for un in tmp do
99683: LD_ADDR_VAR 0 2
99687: PUSH
99688: LD_VAR 0 3
99692: PUSH
99693: FOR_IN
99694: IFFALSE 99768
// begin if IsDead ( un ) then
99696: LD_VAR 0 2
99700: PPUSH
99701: CALL_OW 301
99705: IFFALSE 99725
// begin tmp := tmp diff un ;
99707: LD_ADDR_VAR 0 3
99711: PUSH
99712: LD_VAR 0 3
99716: PUSH
99717: LD_VAR 0 2
99721: DIFF
99722: ST_TO_ADDR
// continue ;
99723: GO 99693
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
99725: LD_VAR 0 2
99729: PPUSH
99730: LD_INT 3
99732: PUSH
99733: LD_INT 22
99735: PUSH
99736: LD_INT 0
99738: PUSH
99739: EMPTY
99740: LIST
99741: LIST
99742: PUSH
99743: EMPTY
99744: LIST
99745: LIST
99746: PPUSH
99747: CALL_OW 69
99751: PPUSH
99752: LD_VAR 0 2
99756: PPUSH
99757: CALL_OW 74
99761: PPUSH
99762: CALL_OW 115
// end ;
99766: GO 99693
99768: POP
99769: POP
// until not tmp ;
99770: LD_VAR 0 3
99774: NOT
99775: IFFALSE 99676
// end ;
99777: PPOPN 3
99779: END
// every 0 0$1 trigger StreamModeActive and sTroll do
99780: LD_EXP 79
99784: PUSH
99785: LD_EXP 104
99789: AND
99790: IFFALSE 99844
99792: GO 99794
99794: DISABLE
// begin ToLua ( displayTroll(); ) ;
99795: LD_STRING displayTroll();
99797: PPUSH
99798: CALL_OW 559
// wait ( 3 3$00 ) ;
99802: LD_INT 6300
99804: PPUSH
99805: CALL_OW 67
// ToLua ( hideTroll(); ) ;
99809: LD_STRING hideTroll();
99811: PPUSH
99812: CALL_OW 559
// wait ( 1 1$00 ) ;
99816: LD_INT 2100
99818: PPUSH
99819: CALL_OW 67
// ToLua ( displayTroll(); ) ;
99823: LD_STRING displayTroll();
99825: PPUSH
99826: CALL_OW 559
// wait ( 1 1$00 ) ;
99830: LD_INT 2100
99832: PPUSH
99833: CALL_OW 67
// ToLua ( hideTroll(); ) ;
99837: LD_STRING hideTroll();
99839: PPUSH
99840: CALL_OW 559
// end ;
99844: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
99845: LD_EXP 79
99849: PUSH
99850: LD_EXP 105
99854: AND
99855: IFFALSE 99918
99857: GO 99859
99859: DISABLE
99860: LD_INT 0
99862: PPUSH
// begin p := 0 ;
99863: LD_ADDR_VAR 0 1
99867: PUSH
99868: LD_INT 0
99870: ST_TO_ADDR
// repeat game_speed := 1 ;
99871: LD_ADDR_OWVAR 65
99875: PUSH
99876: LD_INT 1
99878: ST_TO_ADDR
// wait ( 0 0$1 ) ;
99879: LD_INT 35
99881: PPUSH
99882: CALL_OW 67
// p := p + 1 ;
99886: LD_ADDR_VAR 0 1
99890: PUSH
99891: LD_VAR 0 1
99895: PUSH
99896: LD_INT 1
99898: PLUS
99899: ST_TO_ADDR
// until p >= 60 ;
99900: LD_VAR 0 1
99904: PUSH
99905: LD_INT 60
99907: GREATEREQUAL
99908: IFFALSE 99871
// game_speed := 4 ;
99910: LD_ADDR_OWVAR 65
99914: PUSH
99915: LD_INT 4
99917: ST_TO_ADDR
// end ;
99918: PPOPN 1
99920: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
99921: LD_EXP 79
99925: PUSH
99926: LD_EXP 106
99930: AND
99931: IFFALSE 100077
99933: GO 99935
99935: DISABLE
99936: LD_INT 0
99938: PPUSH
99939: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
99940: LD_ADDR_VAR 0 1
99944: PUSH
99945: LD_INT 22
99947: PUSH
99948: LD_OWVAR 2
99952: PUSH
99953: EMPTY
99954: LIST
99955: LIST
99956: PUSH
99957: LD_INT 2
99959: PUSH
99960: LD_INT 30
99962: PUSH
99963: LD_INT 0
99965: PUSH
99966: EMPTY
99967: LIST
99968: LIST
99969: PUSH
99970: LD_INT 30
99972: PUSH
99973: LD_INT 1
99975: PUSH
99976: EMPTY
99977: LIST
99978: LIST
99979: PUSH
99980: EMPTY
99981: LIST
99982: LIST
99983: LIST
99984: PUSH
99985: EMPTY
99986: LIST
99987: LIST
99988: PPUSH
99989: CALL_OW 69
99993: ST_TO_ADDR
// if not depot then
99994: LD_VAR 0 1
99998: NOT
99999: IFFALSE 100003
// exit ;
100001: GO 100077
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
100003: LD_ADDR_VAR 0 2
100007: PUSH
100008: LD_VAR 0 1
100012: PUSH
100013: LD_INT 1
100015: PPUSH
100016: LD_VAR 0 1
100020: PPUSH
100021: CALL_OW 12
100025: ARRAY
100026: PPUSH
100027: CALL_OW 274
100031: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
100032: LD_VAR 0 2
100036: PPUSH
100037: LD_INT 1
100039: PPUSH
100040: LD_INT 0
100042: PPUSH
100043: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
100047: LD_VAR 0 2
100051: PPUSH
100052: LD_INT 2
100054: PPUSH
100055: LD_INT 0
100057: PPUSH
100058: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
100062: LD_VAR 0 2
100066: PPUSH
100067: LD_INT 3
100069: PPUSH
100070: LD_INT 0
100072: PPUSH
100073: CALL_OW 277
// end ;
100077: PPOPN 2
100079: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
100080: LD_EXP 79
100084: PUSH
100085: LD_EXP 107
100089: AND
100090: IFFALSE 100187
100092: GO 100094
100094: DISABLE
100095: LD_INT 0
100097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
100098: LD_ADDR_VAR 0 1
100102: PUSH
100103: LD_INT 22
100105: PUSH
100106: LD_OWVAR 2
100110: PUSH
100111: EMPTY
100112: LIST
100113: LIST
100114: PUSH
100115: LD_INT 21
100117: PUSH
100118: LD_INT 1
100120: PUSH
100121: EMPTY
100122: LIST
100123: LIST
100124: PUSH
100125: LD_INT 3
100127: PUSH
100128: LD_INT 23
100130: PUSH
100131: LD_INT 0
100133: PUSH
100134: EMPTY
100135: LIST
100136: LIST
100137: PUSH
100138: EMPTY
100139: LIST
100140: LIST
100141: PUSH
100142: EMPTY
100143: LIST
100144: LIST
100145: LIST
100146: PPUSH
100147: CALL_OW 69
100151: ST_TO_ADDR
// if not tmp then
100152: LD_VAR 0 1
100156: NOT
100157: IFFALSE 100161
// exit ;
100159: GO 100187
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
100161: LD_VAR 0 1
100165: PUSH
100166: LD_INT 1
100168: PPUSH
100169: LD_VAR 0 1
100173: PPUSH
100174: CALL_OW 12
100178: ARRAY
100179: PPUSH
100180: LD_INT 200
100182: PPUSH
100183: CALL_OW 234
// end ;
100187: PPOPN 1
100189: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
100190: LD_EXP 79
100194: PUSH
100195: LD_EXP 108
100199: AND
100200: IFFALSE 100279
100202: GO 100204
100204: DISABLE
100205: LD_INT 0
100207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
100208: LD_ADDR_VAR 0 1
100212: PUSH
100213: LD_INT 22
100215: PUSH
100216: LD_OWVAR 2
100220: PUSH
100221: EMPTY
100222: LIST
100223: LIST
100224: PUSH
100225: LD_INT 21
100227: PUSH
100228: LD_INT 2
100230: PUSH
100231: EMPTY
100232: LIST
100233: LIST
100234: PUSH
100235: EMPTY
100236: LIST
100237: LIST
100238: PPUSH
100239: CALL_OW 69
100243: ST_TO_ADDR
// if not tmp then
100244: LD_VAR 0 1
100248: NOT
100249: IFFALSE 100253
// exit ;
100251: GO 100279
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
100253: LD_VAR 0 1
100257: PUSH
100258: LD_INT 1
100260: PPUSH
100261: LD_VAR 0 1
100265: PPUSH
100266: CALL_OW 12
100270: ARRAY
100271: PPUSH
100272: LD_INT 60
100274: PPUSH
100275: CALL_OW 234
// end ;
100279: PPOPN 1
100281: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
100282: LD_EXP 79
100286: PUSH
100287: LD_EXP 109
100291: AND
100292: IFFALSE 100391
100294: GO 100296
100296: DISABLE
100297: LD_INT 0
100299: PPUSH
100300: PPUSH
// begin enable ;
100301: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
100302: LD_ADDR_VAR 0 1
100306: PUSH
100307: LD_INT 22
100309: PUSH
100310: LD_OWVAR 2
100314: PUSH
100315: EMPTY
100316: LIST
100317: LIST
100318: PUSH
100319: LD_INT 61
100321: PUSH
100322: EMPTY
100323: LIST
100324: PUSH
100325: LD_INT 33
100327: PUSH
100328: LD_INT 2
100330: PUSH
100331: EMPTY
100332: LIST
100333: LIST
100334: PUSH
100335: EMPTY
100336: LIST
100337: LIST
100338: LIST
100339: PPUSH
100340: CALL_OW 69
100344: ST_TO_ADDR
// if not tmp then
100345: LD_VAR 0 1
100349: NOT
100350: IFFALSE 100354
// exit ;
100352: GO 100391
// for i in tmp do
100354: LD_ADDR_VAR 0 2
100358: PUSH
100359: LD_VAR 0 1
100363: PUSH
100364: FOR_IN
100365: IFFALSE 100389
// if IsControledBy ( i ) then
100367: LD_VAR 0 2
100371: PPUSH
100372: CALL_OW 312
100376: IFFALSE 100387
// ComUnlink ( i ) ;
100378: LD_VAR 0 2
100382: PPUSH
100383: CALL_OW 136
100387: GO 100364
100389: POP
100390: POP
// end ;
100391: PPOPN 2
100393: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
100394: LD_EXP 79
100398: PUSH
100399: LD_EXP 110
100403: AND
100404: IFFALSE 100544
100406: GO 100408
100408: DISABLE
100409: LD_INT 0
100411: PPUSH
100412: PPUSH
// begin ToLua ( displayPowell(); ) ;
100413: LD_STRING displayPowell();
100415: PPUSH
100416: CALL_OW 559
// uc_side := 0 ;
100420: LD_ADDR_OWVAR 20
100424: PUSH
100425: LD_INT 0
100427: ST_TO_ADDR
// uc_nation := 2 ;
100428: LD_ADDR_OWVAR 21
100432: PUSH
100433: LD_INT 2
100435: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
100436: LD_ADDR_OWVAR 37
100440: PUSH
100441: LD_INT 14
100443: ST_TO_ADDR
// vc_engine := engine_siberite ;
100444: LD_ADDR_OWVAR 39
100448: PUSH
100449: LD_INT 3
100451: ST_TO_ADDR
// vc_control := control_apeman ;
100452: LD_ADDR_OWVAR 38
100456: PUSH
100457: LD_INT 5
100459: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
100460: LD_ADDR_OWVAR 40
100464: PUSH
100465: LD_INT 29
100467: ST_TO_ADDR
// un := CreateVehicle ;
100468: LD_ADDR_VAR 0 2
100472: PUSH
100473: CALL_OW 45
100477: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
100478: LD_VAR 0 2
100482: PPUSH
100483: LD_INT 1
100485: PPUSH
100486: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
100490: LD_INT 35
100492: PPUSH
100493: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
100497: LD_VAR 0 2
100501: PPUSH
100502: LD_INT 22
100504: PUSH
100505: LD_OWVAR 2
100509: PUSH
100510: EMPTY
100511: LIST
100512: LIST
100513: PPUSH
100514: CALL_OW 69
100518: PPUSH
100519: LD_VAR 0 2
100523: PPUSH
100524: CALL_OW 74
100528: PPUSH
100529: CALL_OW 115
// until IsDead ( un ) ;
100533: LD_VAR 0 2
100537: PPUSH
100538: CALL_OW 301
100542: IFFALSE 100490
// end ;
100544: PPOPN 2
100546: END
// every 0 0$1 trigger StreamModeActive and sStu do
100547: LD_EXP 79
100551: PUSH
100552: LD_EXP 118
100556: AND
100557: IFFALSE 100573
100559: GO 100561
100561: DISABLE
// begin ToLua ( displayStucuk(); ) ;
100562: LD_STRING displayStucuk();
100564: PPUSH
100565: CALL_OW 559
// ResetFog ;
100569: CALL_OW 335
// end ;
100573: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
100574: LD_EXP 79
100578: PUSH
100579: LD_EXP 111
100583: AND
100584: IFFALSE 100725
100586: GO 100588
100588: DISABLE
100589: LD_INT 0
100591: PPUSH
100592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
100593: LD_ADDR_VAR 0 2
100597: PUSH
100598: LD_INT 22
100600: PUSH
100601: LD_OWVAR 2
100605: PUSH
100606: EMPTY
100607: LIST
100608: LIST
100609: PUSH
100610: LD_INT 21
100612: PUSH
100613: LD_INT 1
100615: PUSH
100616: EMPTY
100617: LIST
100618: LIST
100619: PUSH
100620: EMPTY
100621: LIST
100622: LIST
100623: PPUSH
100624: CALL_OW 69
100628: ST_TO_ADDR
// if not tmp then
100629: LD_VAR 0 2
100633: NOT
100634: IFFALSE 100638
// exit ;
100636: GO 100725
// un := tmp [ rand ( 1 , tmp ) ] ;
100638: LD_ADDR_VAR 0 1
100642: PUSH
100643: LD_VAR 0 2
100647: PUSH
100648: LD_INT 1
100650: PPUSH
100651: LD_VAR 0 2
100655: PPUSH
100656: CALL_OW 12
100660: ARRAY
100661: ST_TO_ADDR
// SetSide ( un , 0 ) ;
100662: LD_VAR 0 1
100666: PPUSH
100667: LD_INT 0
100669: PPUSH
100670: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
100674: LD_VAR 0 1
100678: PPUSH
100679: LD_OWVAR 3
100683: PUSH
100684: LD_VAR 0 1
100688: DIFF
100689: PPUSH
100690: LD_VAR 0 1
100694: PPUSH
100695: CALL_OW 74
100699: PPUSH
100700: CALL_OW 115
// wait ( 0 0$20 ) ;
100704: LD_INT 700
100706: PPUSH
100707: CALL_OW 67
// SetSide ( un , your_side ) ;
100711: LD_VAR 0 1
100715: PPUSH
100716: LD_OWVAR 2
100720: PPUSH
100721: CALL_OW 235
// end ;
100725: PPOPN 2
100727: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
100728: LD_EXP 79
100732: PUSH
100733: LD_EXP 112
100737: AND
100738: IFFALSE 100844
100740: GO 100742
100742: DISABLE
100743: LD_INT 0
100745: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
100746: LD_ADDR_VAR 0 1
100750: PUSH
100751: LD_INT 22
100753: PUSH
100754: LD_OWVAR 2
100758: PUSH
100759: EMPTY
100760: LIST
100761: LIST
100762: PUSH
100763: LD_INT 2
100765: PUSH
100766: LD_INT 30
100768: PUSH
100769: LD_INT 0
100771: PUSH
100772: EMPTY
100773: LIST
100774: LIST
100775: PUSH
100776: LD_INT 30
100778: PUSH
100779: LD_INT 1
100781: PUSH
100782: EMPTY
100783: LIST
100784: LIST
100785: PUSH
100786: EMPTY
100787: LIST
100788: LIST
100789: LIST
100790: PUSH
100791: EMPTY
100792: LIST
100793: LIST
100794: PPUSH
100795: CALL_OW 69
100799: ST_TO_ADDR
// if not depot then
100800: LD_VAR 0 1
100804: NOT
100805: IFFALSE 100809
// exit ;
100807: GO 100844
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
100809: LD_VAR 0 1
100813: PUSH
100814: LD_INT 1
100816: ARRAY
100817: PPUSH
100818: CALL_OW 250
100822: PPUSH
100823: LD_VAR 0 1
100827: PUSH
100828: LD_INT 1
100830: ARRAY
100831: PPUSH
100832: CALL_OW 251
100836: PPUSH
100837: LD_INT 70
100839: PPUSH
100840: CALL_OW 495
// end ;
100844: PPOPN 1
100846: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
100847: LD_EXP 79
100851: PUSH
100852: LD_EXP 113
100856: AND
100857: IFFALSE 101068
100859: GO 100861
100861: DISABLE
100862: LD_INT 0
100864: PPUSH
100865: PPUSH
100866: PPUSH
100867: PPUSH
100868: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
100869: LD_ADDR_VAR 0 5
100873: PUSH
100874: LD_INT 22
100876: PUSH
100877: LD_OWVAR 2
100881: PUSH
100882: EMPTY
100883: LIST
100884: LIST
100885: PUSH
100886: LD_INT 21
100888: PUSH
100889: LD_INT 1
100891: PUSH
100892: EMPTY
100893: LIST
100894: LIST
100895: PUSH
100896: EMPTY
100897: LIST
100898: LIST
100899: PPUSH
100900: CALL_OW 69
100904: ST_TO_ADDR
// if not tmp then
100905: LD_VAR 0 5
100909: NOT
100910: IFFALSE 100914
// exit ;
100912: GO 101068
// for i in tmp do
100914: LD_ADDR_VAR 0 1
100918: PUSH
100919: LD_VAR 0 5
100923: PUSH
100924: FOR_IN
100925: IFFALSE 101066
// begin d := rand ( 0 , 5 ) ;
100927: LD_ADDR_VAR 0 4
100931: PUSH
100932: LD_INT 0
100934: PPUSH
100935: LD_INT 5
100937: PPUSH
100938: CALL_OW 12
100942: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
100943: LD_ADDR_VAR 0 2
100947: PUSH
100948: LD_VAR 0 1
100952: PPUSH
100953: CALL_OW 250
100957: PPUSH
100958: LD_VAR 0 4
100962: PPUSH
100963: LD_INT 3
100965: PPUSH
100966: LD_INT 12
100968: PPUSH
100969: CALL_OW 12
100973: PPUSH
100974: CALL_OW 272
100978: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
100979: LD_ADDR_VAR 0 3
100983: PUSH
100984: LD_VAR 0 1
100988: PPUSH
100989: CALL_OW 251
100993: PPUSH
100994: LD_VAR 0 4
100998: PPUSH
100999: LD_INT 3
101001: PPUSH
101002: LD_INT 12
101004: PPUSH
101005: CALL_OW 12
101009: PPUSH
101010: CALL_OW 273
101014: ST_TO_ADDR
// if ValidHex ( x , y ) then
101015: LD_VAR 0 2
101019: PPUSH
101020: LD_VAR 0 3
101024: PPUSH
101025: CALL_OW 488
101029: IFFALSE 101064
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
101031: LD_VAR 0 1
101035: PPUSH
101036: LD_VAR 0 2
101040: PPUSH
101041: LD_VAR 0 3
101045: PPUSH
101046: LD_INT 3
101048: PPUSH
101049: LD_INT 6
101051: PPUSH
101052: CALL_OW 12
101056: PPUSH
101057: LD_INT 1
101059: PPUSH
101060: CALL_OW 483
// end ;
101064: GO 100924
101066: POP
101067: POP
// end ;
101068: PPOPN 5
101070: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
101071: LD_EXP 79
101075: PUSH
101076: LD_EXP 114
101080: AND
101081: IFFALSE 101175
101083: GO 101085
101085: DISABLE
101086: LD_INT 0
101088: PPUSH
101089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
101090: LD_ADDR_VAR 0 2
101094: PUSH
101095: LD_INT 22
101097: PUSH
101098: LD_OWVAR 2
101102: PUSH
101103: EMPTY
101104: LIST
101105: LIST
101106: PUSH
101107: LD_INT 32
101109: PUSH
101110: LD_INT 1
101112: PUSH
101113: EMPTY
101114: LIST
101115: LIST
101116: PUSH
101117: LD_INT 21
101119: PUSH
101120: LD_INT 2
101122: PUSH
101123: EMPTY
101124: LIST
101125: LIST
101126: PUSH
101127: EMPTY
101128: LIST
101129: LIST
101130: LIST
101131: PPUSH
101132: CALL_OW 69
101136: ST_TO_ADDR
// if not tmp then
101137: LD_VAR 0 2
101141: NOT
101142: IFFALSE 101146
// exit ;
101144: GO 101175
// for i in tmp do
101146: LD_ADDR_VAR 0 1
101150: PUSH
101151: LD_VAR 0 2
101155: PUSH
101156: FOR_IN
101157: IFFALSE 101173
// SetFuel ( i , 0 ) ;
101159: LD_VAR 0 1
101163: PPUSH
101164: LD_INT 0
101166: PPUSH
101167: CALL_OW 240
101171: GO 101156
101173: POP
101174: POP
// end ;
101175: PPOPN 2
101177: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
101178: LD_EXP 79
101182: PUSH
101183: LD_EXP 115
101187: AND
101188: IFFALSE 101254
101190: GO 101192
101192: DISABLE
101193: LD_INT 0
101195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
101196: LD_ADDR_VAR 0 1
101200: PUSH
101201: LD_INT 22
101203: PUSH
101204: LD_OWVAR 2
101208: PUSH
101209: EMPTY
101210: LIST
101211: LIST
101212: PUSH
101213: LD_INT 30
101215: PUSH
101216: LD_INT 29
101218: PUSH
101219: EMPTY
101220: LIST
101221: LIST
101222: PUSH
101223: EMPTY
101224: LIST
101225: LIST
101226: PPUSH
101227: CALL_OW 69
101231: ST_TO_ADDR
// if not tmp then
101232: LD_VAR 0 1
101236: NOT
101237: IFFALSE 101241
// exit ;
101239: GO 101254
// DestroyUnit ( tmp [ 1 ] ) ;
101241: LD_VAR 0 1
101245: PUSH
101246: LD_INT 1
101248: ARRAY
101249: PPUSH
101250: CALL_OW 65
// end ;
101254: PPOPN 1
101256: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
101257: LD_EXP 79
101261: PUSH
101262: LD_EXP 117
101266: AND
101267: IFFALSE 101396
101269: GO 101271
101271: DISABLE
101272: LD_INT 0
101274: PPUSH
// begin uc_side := 0 ;
101275: LD_ADDR_OWVAR 20
101279: PUSH
101280: LD_INT 0
101282: ST_TO_ADDR
// uc_nation := nation_arabian ;
101283: LD_ADDR_OWVAR 21
101287: PUSH
101288: LD_INT 2
101290: ST_TO_ADDR
// hc_gallery :=  ;
101291: LD_ADDR_OWVAR 33
101295: PUSH
101296: LD_STRING 
101298: ST_TO_ADDR
// hc_name :=  ;
101299: LD_ADDR_OWVAR 26
101303: PUSH
101304: LD_STRING 
101306: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
101307: LD_INT 1
101309: PPUSH
101310: LD_INT 11
101312: PPUSH
101313: LD_INT 10
101315: PPUSH
101316: CALL_OW 380
// un := CreateHuman ;
101320: LD_ADDR_VAR 0 1
101324: PUSH
101325: CALL_OW 44
101329: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
101330: LD_VAR 0 1
101334: PPUSH
101335: LD_INT 1
101337: PPUSH
101338: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
101342: LD_INT 35
101344: PPUSH
101345: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
101349: LD_VAR 0 1
101353: PPUSH
101354: LD_INT 22
101356: PUSH
101357: LD_OWVAR 2
101361: PUSH
101362: EMPTY
101363: LIST
101364: LIST
101365: PPUSH
101366: CALL_OW 69
101370: PPUSH
101371: LD_VAR 0 1
101375: PPUSH
101376: CALL_OW 74
101380: PPUSH
101381: CALL_OW 115
// until IsDead ( un ) ;
101385: LD_VAR 0 1
101389: PPUSH
101390: CALL_OW 301
101394: IFFALSE 101342
// end ;
101396: PPOPN 1
101398: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
101399: LD_EXP 79
101403: PUSH
101404: LD_EXP 119
101408: AND
101409: IFFALSE 101421
101411: GO 101413
101413: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
101414: LD_STRING earthquake(getX(game), 0, 32)
101416: PPUSH
101417: CALL_OW 559
101421: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
101422: LD_EXP 79
101426: PUSH
101427: LD_EXP 120
101431: AND
101432: IFFALSE 101523
101434: GO 101436
101436: DISABLE
101437: LD_INT 0
101439: PPUSH
// begin enable ;
101440: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
101441: LD_ADDR_VAR 0 1
101445: PUSH
101446: LD_INT 22
101448: PUSH
101449: LD_OWVAR 2
101453: PUSH
101454: EMPTY
101455: LIST
101456: LIST
101457: PUSH
101458: LD_INT 21
101460: PUSH
101461: LD_INT 2
101463: PUSH
101464: EMPTY
101465: LIST
101466: LIST
101467: PUSH
101468: LD_INT 33
101470: PUSH
101471: LD_INT 3
101473: PUSH
101474: EMPTY
101475: LIST
101476: LIST
101477: PUSH
101478: EMPTY
101479: LIST
101480: LIST
101481: LIST
101482: PPUSH
101483: CALL_OW 69
101487: ST_TO_ADDR
// if not tmp then
101488: LD_VAR 0 1
101492: NOT
101493: IFFALSE 101497
// exit ;
101495: GO 101523
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
101497: LD_VAR 0 1
101501: PUSH
101502: LD_INT 1
101504: PPUSH
101505: LD_VAR 0 1
101509: PPUSH
101510: CALL_OW 12
101514: ARRAY
101515: PPUSH
101516: LD_INT 1
101518: PPUSH
101519: CALL_OW 234
// end ;
101523: PPOPN 1
101525: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
101526: LD_EXP 79
101530: PUSH
101531: LD_EXP 121
101535: AND
101536: IFFALSE 101677
101538: GO 101540
101540: DISABLE
101541: LD_INT 0
101543: PPUSH
101544: PPUSH
101545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
101546: LD_ADDR_VAR 0 3
101550: PUSH
101551: LD_INT 22
101553: PUSH
101554: LD_OWVAR 2
101558: PUSH
101559: EMPTY
101560: LIST
101561: LIST
101562: PUSH
101563: LD_INT 25
101565: PUSH
101566: LD_INT 1
101568: PUSH
101569: EMPTY
101570: LIST
101571: LIST
101572: PUSH
101573: EMPTY
101574: LIST
101575: LIST
101576: PPUSH
101577: CALL_OW 69
101581: ST_TO_ADDR
// if not tmp then
101582: LD_VAR 0 3
101586: NOT
101587: IFFALSE 101591
// exit ;
101589: GO 101677
// un := tmp [ rand ( 1 , tmp ) ] ;
101591: LD_ADDR_VAR 0 2
101595: PUSH
101596: LD_VAR 0 3
101600: PUSH
101601: LD_INT 1
101603: PPUSH
101604: LD_VAR 0 3
101608: PPUSH
101609: CALL_OW 12
101613: ARRAY
101614: ST_TO_ADDR
// if Crawls ( un ) then
101615: LD_VAR 0 2
101619: PPUSH
101620: CALL_OW 318
101624: IFFALSE 101635
// ComWalk ( un ) ;
101626: LD_VAR 0 2
101630: PPUSH
101631: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
101635: LD_VAR 0 2
101639: PPUSH
101640: LD_INT 9
101642: PPUSH
101643: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
101647: LD_INT 28
101649: PPUSH
101650: LD_OWVAR 2
101654: PPUSH
101655: LD_INT 2
101657: PPUSH
101658: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
101662: LD_INT 29
101664: PPUSH
101665: LD_OWVAR 2
101669: PPUSH
101670: LD_INT 2
101672: PPUSH
101673: CALL_OW 322
// end ;
101677: PPOPN 3
101679: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
101680: LD_EXP 79
101684: PUSH
101685: LD_EXP 122
101689: AND
101690: IFFALSE 101801
101692: GO 101694
101694: DISABLE
101695: LD_INT 0
101697: PPUSH
101698: PPUSH
101699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
101700: LD_ADDR_VAR 0 3
101704: PUSH
101705: LD_INT 22
101707: PUSH
101708: LD_OWVAR 2
101712: PUSH
101713: EMPTY
101714: LIST
101715: LIST
101716: PUSH
101717: LD_INT 25
101719: PUSH
101720: LD_INT 1
101722: PUSH
101723: EMPTY
101724: LIST
101725: LIST
101726: PUSH
101727: EMPTY
101728: LIST
101729: LIST
101730: PPUSH
101731: CALL_OW 69
101735: ST_TO_ADDR
// if not tmp then
101736: LD_VAR 0 3
101740: NOT
101741: IFFALSE 101745
// exit ;
101743: GO 101801
// un := tmp [ rand ( 1 , tmp ) ] ;
101745: LD_ADDR_VAR 0 2
101749: PUSH
101750: LD_VAR 0 3
101754: PUSH
101755: LD_INT 1
101757: PPUSH
101758: LD_VAR 0 3
101762: PPUSH
101763: CALL_OW 12
101767: ARRAY
101768: ST_TO_ADDR
// if Crawls ( un ) then
101769: LD_VAR 0 2
101773: PPUSH
101774: CALL_OW 318
101778: IFFALSE 101789
// ComWalk ( un ) ;
101780: LD_VAR 0 2
101784: PPUSH
101785: CALL_OW 138
// SetClass ( un , class_mortar ) ;
101789: LD_VAR 0 2
101793: PPUSH
101794: LD_INT 8
101796: PPUSH
101797: CALL_OW 336
// end ;
101801: PPOPN 3
101803: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
101804: LD_EXP 79
101808: PUSH
101809: LD_EXP 123
101813: AND
101814: IFFALSE 101958
101816: GO 101818
101818: DISABLE
101819: LD_INT 0
101821: PPUSH
101822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
101823: LD_ADDR_VAR 0 2
101827: PUSH
101828: LD_INT 22
101830: PUSH
101831: LD_OWVAR 2
101835: PUSH
101836: EMPTY
101837: LIST
101838: LIST
101839: PUSH
101840: LD_INT 21
101842: PUSH
101843: LD_INT 2
101845: PUSH
101846: EMPTY
101847: LIST
101848: LIST
101849: PUSH
101850: LD_INT 2
101852: PUSH
101853: LD_INT 34
101855: PUSH
101856: LD_INT 12
101858: PUSH
101859: EMPTY
101860: LIST
101861: LIST
101862: PUSH
101863: LD_INT 34
101865: PUSH
101866: LD_INT 51
101868: PUSH
101869: EMPTY
101870: LIST
101871: LIST
101872: PUSH
101873: LD_INT 34
101875: PUSH
101876: LD_INT 32
101878: PUSH
101879: EMPTY
101880: LIST
101881: LIST
101882: PUSH
101883: EMPTY
101884: LIST
101885: LIST
101886: LIST
101887: LIST
101888: PUSH
101889: EMPTY
101890: LIST
101891: LIST
101892: LIST
101893: PPUSH
101894: CALL_OW 69
101898: ST_TO_ADDR
// if not tmp then
101899: LD_VAR 0 2
101903: NOT
101904: IFFALSE 101908
// exit ;
101906: GO 101958
// for i in tmp do
101908: LD_ADDR_VAR 0 1
101912: PUSH
101913: LD_VAR 0 2
101917: PUSH
101918: FOR_IN
101919: IFFALSE 101956
// if GetCargo ( i , mat_artifact ) = 0 then
101921: LD_VAR 0 1
101925: PPUSH
101926: LD_INT 4
101928: PPUSH
101929: CALL_OW 289
101933: PUSH
101934: LD_INT 0
101936: EQUAL
101937: IFFALSE 101954
// SetCargo ( i , mat_siberit , 100 ) ;
101939: LD_VAR 0 1
101943: PPUSH
101944: LD_INT 3
101946: PPUSH
101947: LD_INT 100
101949: PPUSH
101950: CALL_OW 290
101954: GO 101918
101956: POP
101957: POP
// end ;
101958: PPOPN 2
101960: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
101961: LD_EXP 79
101965: PUSH
101966: LD_EXP 124
101970: AND
101971: IFFALSE 102124
101973: GO 101975
101975: DISABLE
101976: LD_INT 0
101978: PPUSH
101979: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
101980: LD_ADDR_VAR 0 2
101984: PUSH
101985: LD_INT 22
101987: PUSH
101988: LD_OWVAR 2
101992: PUSH
101993: EMPTY
101994: LIST
101995: LIST
101996: PPUSH
101997: CALL_OW 69
102001: ST_TO_ADDR
// if not tmp then
102002: LD_VAR 0 2
102006: NOT
102007: IFFALSE 102011
// exit ;
102009: GO 102124
// for i := 1 to 2 do
102011: LD_ADDR_VAR 0 1
102015: PUSH
102016: DOUBLE
102017: LD_INT 1
102019: DEC
102020: ST_TO_ADDR
102021: LD_INT 2
102023: PUSH
102024: FOR_TO
102025: IFFALSE 102122
// begin uc_side := your_side ;
102027: LD_ADDR_OWVAR 20
102031: PUSH
102032: LD_OWVAR 2
102036: ST_TO_ADDR
// uc_nation := nation_american ;
102037: LD_ADDR_OWVAR 21
102041: PUSH
102042: LD_INT 1
102044: ST_TO_ADDR
// vc_chassis := us_morphling ;
102045: LD_ADDR_OWVAR 37
102049: PUSH
102050: LD_INT 5
102052: ST_TO_ADDR
// vc_engine := engine_siberite ;
102053: LD_ADDR_OWVAR 39
102057: PUSH
102058: LD_INT 3
102060: ST_TO_ADDR
// vc_control := control_computer ;
102061: LD_ADDR_OWVAR 38
102065: PUSH
102066: LD_INT 3
102068: ST_TO_ADDR
// vc_weapon := us_double_laser ;
102069: LD_ADDR_OWVAR 40
102073: PUSH
102074: LD_INT 10
102076: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
102077: CALL_OW 45
102081: PPUSH
102082: LD_VAR 0 2
102086: PUSH
102087: LD_INT 1
102089: ARRAY
102090: PPUSH
102091: CALL_OW 250
102095: PPUSH
102096: LD_VAR 0 2
102100: PUSH
102101: LD_INT 1
102103: ARRAY
102104: PPUSH
102105: CALL_OW 251
102109: PPUSH
102110: LD_INT 12
102112: PPUSH
102113: LD_INT 1
102115: PPUSH
102116: CALL_OW 50
// end ;
102120: GO 102024
102122: POP
102123: POP
// end ;
102124: PPOPN 2
102126: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
102127: LD_EXP 79
102131: PUSH
102132: LD_EXP 125
102136: AND
102137: IFFALSE 102359
102139: GO 102141
102141: DISABLE
102142: LD_INT 0
102144: PPUSH
102145: PPUSH
102146: PPUSH
102147: PPUSH
102148: PPUSH
102149: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
102150: LD_ADDR_VAR 0 6
102154: PUSH
102155: LD_INT 22
102157: PUSH
102158: LD_OWVAR 2
102162: PUSH
102163: EMPTY
102164: LIST
102165: LIST
102166: PUSH
102167: LD_INT 21
102169: PUSH
102170: LD_INT 1
102172: PUSH
102173: EMPTY
102174: LIST
102175: LIST
102176: PUSH
102177: LD_INT 3
102179: PUSH
102180: LD_INT 23
102182: PUSH
102183: LD_INT 0
102185: PUSH
102186: EMPTY
102187: LIST
102188: LIST
102189: PUSH
102190: EMPTY
102191: LIST
102192: LIST
102193: PUSH
102194: EMPTY
102195: LIST
102196: LIST
102197: LIST
102198: PPUSH
102199: CALL_OW 69
102203: ST_TO_ADDR
// if not tmp then
102204: LD_VAR 0 6
102208: NOT
102209: IFFALSE 102213
// exit ;
102211: GO 102359
// s1 := rand ( 1 , 4 ) ;
102213: LD_ADDR_VAR 0 2
102217: PUSH
102218: LD_INT 1
102220: PPUSH
102221: LD_INT 4
102223: PPUSH
102224: CALL_OW 12
102228: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
102229: LD_ADDR_VAR 0 4
102233: PUSH
102234: LD_VAR 0 6
102238: PUSH
102239: LD_INT 1
102241: ARRAY
102242: PPUSH
102243: LD_VAR 0 2
102247: PPUSH
102248: CALL_OW 259
102252: ST_TO_ADDR
// if s1 = 1 then
102253: LD_VAR 0 2
102257: PUSH
102258: LD_INT 1
102260: EQUAL
102261: IFFALSE 102281
// s2 := rand ( 2 , 4 ) else
102263: LD_ADDR_VAR 0 3
102267: PUSH
102268: LD_INT 2
102270: PPUSH
102271: LD_INT 4
102273: PPUSH
102274: CALL_OW 12
102278: ST_TO_ADDR
102279: GO 102289
// s2 := 1 ;
102281: LD_ADDR_VAR 0 3
102285: PUSH
102286: LD_INT 1
102288: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
102289: LD_ADDR_VAR 0 5
102293: PUSH
102294: LD_VAR 0 6
102298: PUSH
102299: LD_INT 1
102301: ARRAY
102302: PPUSH
102303: LD_VAR 0 3
102307: PPUSH
102308: CALL_OW 259
102312: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
102313: LD_VAR 0 6
102317: PUSH
102318: LD_INT 1
102320: ARRAY
102321: PPUSH
102322: LD_VAR 0 2
102326: PPUSH
102327: LD_VAR 0 5
102331: PPUSH
102332: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
102336: LD_VAR 0 6
102340: PUSH
102341: LD_INT 1
102343: ARRAY
102344: PPUSH
102345: LD_VAR 0 3
102349: PPUSH
102350: LD_VAR 0 4
102354: PPUSH
102355: CALL_OW 237
// end ;
102359: PPOPN 6
102361: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
102362: LD_EXP 79
102366: PUSH
102367: LD_EXP 126
102371: AND
102372: IFFALSE 102451
102374: GO 102376
102376: DISABLE
102377: LD_INT 0
102379: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
102380: LD_ADDR_VAR 0 1
102384: PUSH
102385: LD_INT 22
102387: PUSH
102388: LD_OWVAR 2
102392: PUSH
102393: EMPTY
102394: LIST
102395: LIST
102396: PUSH
102397: LD_INT 30
102399: PUSH
102400: LD_INT 3
102402: PUSH
102403: EMPTY
102404: LIST
102405: LIST
102406: PUSH
102407: EMPTY
102408: LIST
102409: LIST
102410: PPUSH
102411: CALL_OW 69
102415: ST_TO_ADDR
// if not tmp then
102416: LD_VAR 0 1
102420: NOT
102421: IFFALSE 102425
// exit ;
102423: GO 102451
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
102425: LD_VAR 0 1
102429: PUSH
102430: LD_INT 1
102432: PPUSH
102433: LD_VAR 0 1
102437: PPUSH
102438: CALL_OW 12
102442: ARRAY
102443: PPUSH
102444: LD_INT 1
102446: PPUSH
102447: CALL_OW 234
// end ;
102451: PPOPN 1
102453: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
102454: LD_EXP 79
102458: PUSH
102459: LD_EXP 127
102463: AND
102464: IFFALSE 102576
102466: GO 102468
102468: DISABLE
102469: LD_INT 0
102471: PPUSH
102472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
102473: LD_ADDR_VAR 0 2
102477: PUSH
102478: LD_INT 22
102480: PUSH
102481: LD_OWVAR 2
102485: PUSH
102486: EMPTY
102487: LIST
102488: LIST
102489: PUSH
102490: LD_INT 2
102492: PUSH
102493: LD_INT 30
102495: PUSH
102496: LD_INT 27
102498: PUSH
102499: EMPTY
102500: LIST
102501: LIST
102502: PUSH
102503: LD_INT 30
102505: PUSH
102506: LD_INT 26
102508: PUSH
102509: EMPTY
102510: LIST
102511: LIST
102512: PUSH
102513: LD_INT 30
102515: PUSH
102516: LD_INT 28
102518: PUSH
102519: EMPTY
102520: LIST
102521: LIST
102522: PUSH
102523: EMPTY
102524: LIST
102525: LIST
102526: LIST
102527: LIST
102528: PUSH
102529: EMPTY
102530: LIST
102531: LIST
102532: PPUSH
102533: CALL_OW 69
102537: ST_TO_ADDR
// if not tmp then
102538: LD_VAR 0 2
102542: NOT
102543: IFFALSE 102547
// exit ;
102545: GO 102576
// for i in tmp do
102547: LD_ADDR_VAR 0 1
102551: PUSH
102552: LD_VAR 0 2
102556: PUSH
102557: FOR_IN
102558: IFFALSE 102574
// SetLives ( i , 1 ) ;
102560: LD_VAR 0 1
102564: PPUSH
102565: LD_INT 1
102567: PPUSH
102568: CALL_OW 234
102572: GO 102557
102574: POP
102575: POP
// end ;
102576: PPOPN 2
102578: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
102579: LD_EXP 79
102583: PUSH
102584: LD_EXP 128
102588: AND
102589: IFFALSE 102863
102591: GO 102593
102593: DISABLE
102594: LD_INT 0
102596: PPUSH
102597: PPUSH
102598: PPUSH
// begin i := rand ( 1 , 7 ) ;
102599: LD_ADDR_VAR 0 1
102603: PUSH
102604: LD_INT 1
102606: PPUSH
102607: LD_INT 7
102609: PPUSH
102610: CALL_OW 12
102614: ST_TO_ADDR
// case i of 1 :
102615: LD_VAR 0 1
102619: PUSH
102620: LD_INT 1
102622: DOUBLE
102623: EQUAL
102624: IFTRUE 102628
102626: GO 102638
102628: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
102629: LD_STRING earthquake(getX(game), 0, 32)
102631: PPUSH
102632: CALL_OW 559
102636: GO 102863
102638: LD_INT 2
102640: DOUBLE
102641: EQUAL
102642: IFTRUE 102646
102644: GO 102660
102646: POP
// begin ToLua ( displayStucuk(); ) ;
102647: LD_STRING displayStucuk();
102649: PPUSH
102650: CALL_OW 559
// ResetFog ;
102654: CALL_OW 335
// end ; 3 :
102658: GO 102863
102660: LD_INT 3
102662: DOUBLE
102663: EQUAL
102664: IFTRUE 102668
102666: GO 102772
102668: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
102669: LD_ADDR_VAR 0 2
102673: PUSH
102674: LD_INT 22
102676: PUSH
102677: LD_OWVAR 2
102681: PUSH
102682: EMPTY
102683: LIST
102684: LIST
102685: PUSH
102686: LD_INT 25
102688: PUSH
102689: LD_INT 1
102691: PUSH
102692: EMPTY
102693: LIST
102694: LIST
102695: PUSH
102696: EMPTY
102697: LIST
102698: LIST
102699: PPUSH
102700: CALL_OW 69
102704: ST_TO_ADDR
// if not tmp then
102705: LD_VAR 0 2
102709: NOT
102710: IFFALSE 102714
// exit ;
102712: GO 102863
// un := tmp [ rand ( 1 , tmp ) ] ;
102714: LD_ADDR_VAR 0 3
102718: PUSH
102719: LD_VAR 0 2
102723: PUSH
102724: LD_INT 1
102726: PPUSH
102727: LD_VAR 0 2
102731: PPUSH
102732: CALL_OW 12
102736: ARRAY
102737: ST_TO_ADDR
// if Crawls ( un ) then
102738: LD_VAR 0 3
102742: PPUSH
102743: CALL_OW 318
102747: IFFALSE 102758
// ComWalk ( un ) ;
102749: LD_VAR 0 3
102753: PPUSH
102754: CALL_OW 138
// SetClass ( un , class_mortar ) ;
102758: LD_VAR 0 3
102762: PPUSH
102763: LD_INT 8
102765: PPUSH
102766: CALL_OW 336
// end ; 4 :
102770: GO 102863
102772: LD_INT 4
102774: DOUBLE
102775: EQUAL
102776: IFTRUE 102780
102778: GO 102841
102780: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
102781: LD_ADDR_VAR 0 2
102785: PUSH
102786: LD_INT 22
102788: PUSH
102789: LD_OWVAR 2
102793: PUSH
102794: EMPTY
102795: LIST
102796: LIST
102797: PUSH
102798: LD_INT 30
102800: PUSH
102801: LD_INT 29
102803: PUSH
102804: EMPTY
102805: LIST
102806: LIST
102807: PUSH
102808: EMPTY
102809: LIST
102810: LIST
102811: PPUSH
102812: CALL_OW 69
102816: ST_TO_ADDR
// if not tmp then
102817: LD_VAR 0 2
102821: NOT
102822: IFFALSE 102826
// exit ;
102824: GO 102863
// DestroyUnit ( tmp [ 1 ] ) ;
102826: LD_VAR 0 2
102830: PUSH
102831: LD_INT 1
102833: ARRAY
102834: PPUSH
102835: CALL_OW 65
// end ; 5 .. 7 :
102839: GO 102863
102841: LD_INT 5
102843: DOUBLE
102844: GREATEREQUAL
102845: IFFALSE 102853
102847: LD_INT 7
102849: DOUBLE
102850: LESSEQUAL
102851: IFTRUE 102855
102853: GO 102862
102855: POP
// StreamSibBomb ; end ;
102856: CALL 99143 0 0
102860: GO 102863
102862: POP
// end ;
102863: PPOPN 3
102865: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
102866: LD_EXP 79
102870: PUSH
102871: LD_EXP 129
102875: AND
102876: IFFALSE 103032
102878: GO 102880
102880: DISABLE
102881: LD_INT 0
102883: PPUSH
102884: PPUSH
102885: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
102886: LD_ADDR_VAR 0 2
102890: PUSH
102891: LD_INT 81
102893: PUSH
102894: LD_OWVAR 2
102898: PUSH
102899: EMPTY
102900: LIST
102901: LIST
102902: PUSH
102903: LD_INT 2
102905: PUSH
102906: LD_INT 21
102908: PUSH
102909: LD_INT 1
102911: PUSH
102912: EMPTY
102913: LIST
102914: LIST
102915: PUSH
102916: LD_INT 21
102918: PUSH
102919: LD_INT 2
102921: PUSH
102922: EMPTY
102923: LIST
102924: LIST
102925: PUSH
102926: EMPTY
102927: LIST
102928: LIST
102929: LIST
102930: PUSH
102931: EMPTY
102932: LIST
102933: LIST
102934: PPUSH
102935: CALL_OW 69
102939: ST_TO_ADDR
// if not tmp then
102940: LD_VAR 0 2
102944: NOT
102945: IFFALSE 102949
// exit ;
102947: GO 103032
// p := 0 ;
102949: LD_ADDR_VAR 0 3
102953: PUSH
102954: LD_INT 0
102956: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
102957: LD_INT 35
102959: PPUSH
102960: CALL_OW 67
// p := p + 1 ;
102964: LD_ADDR_VAR 0 3
102968: PUSH
102969: LD_VAR 0 3
102973: PUSH
102974: LD_INT 1
102976: PLUS
102977: ST_TO_ADDR
// for i in tmp do
102978: LD_ADDR_VAR 0 1
102982: PUSH
102983: LD_VAR 0 2
102987: PUSH
102988: FOR_IN
102989: IFFALSE 103020
// if GetLives ( i ) < 1000 then
102991: LD_VAR 0 1
102995: PPUSH
102996: CALL_OW 256
103000: PUSH
103001: LD_INT 1000
103003: LESS
103004: IFFALSE 103018
// SetLives ( i , 1000 ) ;
103006: LD_VAR 0 1
103010: PPUSH
103011: LD_INT 1000
103013: PPUSH
103014: CALL_OW 234
103018: GO 102988
103020: POP
103021: POP
// until p > 20 ;
103022: LD_VAR 0 3
103026: PUSH
103027: LD_INT 20
103029: GREATER
103030: IFFALSE 102957
// end ;
103032: PPOPN 3
103034: END
// every 0 0$1 trigger StreamModeActive and sTime do
103035: LD_EXP 79
103039: PUSH
103040: LD_EXP 130
103044: AND
103045: IFFALSE 103080
103047: GO 103049
103049: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
103050: LD_INT 28
103052: PPUSH
103053: LD_OWVAR 2
103057: PPUSH
103058: LD_INT 2
103060: PPUSH
103061: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
103065: LD_INT 30
103067: PPUSH
103068: LD_OWVAR 2
103072: PPUSH
103073: LD_INT 2
103075: PPUSH
103076: CALL_OW 322
// end ;
103080: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
103081: LD_EXP 79
103085: PUSH
103086: LD_EXP 131
103090: AND
103091: IFFALSE 103212
103093: GO 103095
103095: DISABLE
103096: LD_INT 0
103098: PPUSH
103099: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
103100: LD_ADDR_VAR 0 2
103104: PUSH
103105: LD_INT 22
103107: PUSH
103108: LD_OWVAR 2
103112: PUSH
103113: EMPTY
103114: LIST
103115: LIST
103116: PUSH
103117: LD_INT 21
103119: PUSH
103120: LD_INT 1
103122: PUSH
103123: EMPTY
103124: LIST
103125: LIST
103126: PUSH
103127: LD_INT 3
103129: PUSH
103130: LD_INT 23
103132: PUSH
103133: LD_INT 0
103135: PUSH
103136: EMPTY
103137: LIST
103138: LIST
103139: PUSH
103140: EMPTY
103141: LIST
103142: LIST
103143: PUSH
103144: EMPTY
103145: LIST
103146: LIST
103147: LIST
103148: PPUSH
103149: CALL_OW 69
103153: ST_TO_ADDR
// if not tmp then
103154: LD_VAR 0 2
103158: NOT
103159: IFFALSE 103163
// exit ;
103161: GO 103212
// for i in tmp do
103163: LD_ADDR_VAR 0 1
103167: PUSH
103168: LD_VAR 0 2
103172: PUSH
103173: FOR_IN
103174: IFFALSE 103210
// begin if Crawls ( i ) then
103176: LD_VAR 0 1
103180: PPUSH
103181: CALL_OW 318
103185: IFFALSE 103196
// ComWalk ( i ) ;
103187: LD_VAR 0 1
103191: PPUSH
103192: CALL_OW 138
// SetClass ( i , 2 ) ;
103196: LD_VAR 0 1
103200: PPUSH
103201: LD_INT 2
103203: PPUSH
103204: CALL_OW 336
// end ;
103208: GO 103173
103210: POP
103211: POP
// end ;
103212: PPOPN 2
103214: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
103215: LD_EXP 79
103219: PUSH
103220: LD_EXP 132
103224: AND
103225: IFFALSE 103506
103227: GO 103229
103229: DISABLE
103230: LD_INT 0
103232: PPUSH
103233: PPUSH
103234: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
103235: LD_OWVAR 2
103239: PPUSH
103240: LD_INT 9
103242: PPUSH
103243: LD_INT 1
103245: PPUSH
103246: LD_INT 1
103248: PPUSH
103249: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
103253: LD_INT 9
103255: PPUSH
103256: LD_OWVAR 2
103260: PPUSH
103261: CALL_OW 343
// uc_side := 9 ;
103265: LD_ADDR_OWVAR 20
103269: PUSH
103270: LD_INT 9
103272: ST_TO_ADDR
// uc_nation := 2 ;
103273: LD_ADDR_OWVAR 21
103277: PUSH
103278: LD_INT 2
103280: ST_TO_ADDR
// hc_name := Dark Warrior ;
103281: LD_ADDR_OWVAR 26
103285: PUSH
103286: LD_STRING Dark Warrior
103288: ST_TO_ADDR
// hc_gallery :=  ;
103289: LD_ADDR_OWVAR 33
103293: PUSH
103294: LD_STRING 
103296: ST_TO_ADDR
// hc_noskilllimit := true ;
103297: LD_ADDR_OWVAR 76
103301: PUSH
103302: LD_INT 1
103304: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
103305: LD_ADDR_OWVAR 31
103309: PUSH
103310: LD_INT 30
103312: PUSH
103313: LD_INT 30
103315: PUSH
103316: LD_INT 30
103318: PUSH
103319: LD_INT 30
103321: PUSH
103322: EMPTY
103323: LIST
103324: LIST
103325: LIST
103326: LIST
103327: ST_TO_ADDR
// un := CreateHuman ;
103328: LD_ADDR_VAR 0 3
103332: PUSH
103333: CALL_OW 44
103337: ST_TO_ADDR
// hc_noskilllimit := false ;
103338: LD_ADDR_OWVAR 76
103342: PUSH
103343: LD_INT 0
103345: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
103346: LD_VAR 0 3
103350: PPUSH
103351: LD_INT 1
103353: PPUSH
103354: CALL_OW 51
// p := 0 ;
103358: LD_ADDR_VAR 0 2
103362: PUSH
103363: LD_INT 0
103365: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
103366: LD_INT 35
103368: PPUSH
103369: CALL_OW 67
// p := p + 1 ;
103373: LD_ADDR_VAR 0 2
103377: PUSH
103378: LD_VAR 0 2
103382: PUSH
103383: LD_INT 1
103385: PLUS
103386: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
103387: LD_VAR 0 3
103391: PPUSH
103392: CALL_OW 256
103396: PUSH
103397: LD_INT 1000
103399: LESS
103400: IFFALSE 103414
// SetLives ( un , 1000 ) ;
103402: LD_VAR 0 3
103406: PPUSH
103407: LD_INT 1000
103409: PPUSH
103410: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
103414: LD_VAR 0 3
103418: PPUSH
103419: LD_INT 81
103421: PUSH
103422: LD_OWVAR 2
103426: PUSH
103427: EMPTY
103428: LIST
103429: LIST
103430: PUSH
103431: LD_INT 91
103433: PUSH
103434: LD_VAR 0 3
103438: PUSH
103439: LD_INT 30
103441: PUSH
103442: EMPTY
103443: LIST
103444: LIST
103445: LIST
103446: PUSH
103447: EMPTY
103448: LIST
103449: LIST
103450: PPUSH
103451: CALL_OW 69
103455: PPUSH
103456: LD_VAR 0 3
103460: PPUSH
103461: CALL_OW 74
103465: PPUSH
103466: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
103470: LD_VAR 0 2
103474: PUSH
103475: LD_INT 60
103477: GREATER
103478: PUSH
103479: LD_VAR 0 3
103483: PPUSH
103484: CALL_OW 301
103488: OR
103489: IFFALSE 103366
// if un then
103491: LD_VAR 0 3
103495: IFFALSE 103506
// RemoveUnit ( un ) ;
103497: LD_VAR 0 3
103501: PPUSH
103502: CALL_OW 64
// end ; end_of_file
103506: PPOPN 3
103508: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
103509: LD_INT 0
103511: PPUSH
103512: PPUSH
103513: PPUSH
103514: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
103515: LD_VAR 0 1
103519: PPUSH
103520: CALL_OW 264
103524: PUSH
103525: LD_EXP 33
103529: EQUAL
103530: IFFALSE 103602
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
103532: LD_INT 68
103534: PPUSH
103535: LD_VAR 0 1
103539: PPUSH
103540: CALL_OW 255
103544: PPUSH
103545: CALL_OW 321
103549: PUSH
103550: LD_INT 2
103552: EQUAL
103553: IFFALSE 103565
// eff := 70 else
103555: LD_ADDR_VAR 0 4
103559: PUSH
103560: LD_INT 70
103562: ST_TO_ADDR
103563: GO 103573
// eff := 30 ;
103565: LD_ADDR_VAR 0 4
103569: PUSH
103570: LD_INT 30
103572: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
103573: LD_VAR 0 1
103577: PPUSH
103578: CALL_OW 250
103582: PPUSH
103583: LD_VAR 0 1
103587: PPUSH
103588: CALL_OW 251
103592: PPUSH
103593: LD_VAR 0 4
103597: PPUSH
103598: CALL_OW 495
// end ; end ;
103602: LD_VAR 0 2
103606: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
103607: LD_INT 0
103609: PPUSH
// end ;
103610: LD_VAR 0 4
103614: RET
// export function SOS_Command ( cmd ) ; begin
103615: LD_INT 0
103617: PPUSH
// end ;
103618: LD_VAR 0 2
103622: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
103623: LD_VAR 0 1
103627: PUSH
103628: LD_INT 255
103630: EQUAL
103631: PUSH
103632: LD_VAR 0 2
103636: PPUSH
103637: CALL_OW 264
103641: PUSH
103642: LD_INT 14
103644: PUSH
103645: LD_INT 53
103647: PUSH
103648: EMPTY
103649: LIST
103650: LIST
103651: IN
103652: AND
103653: PUSH
103654: LD_VAR 0 4
103658: PPUSH
103659: LD_VAR 0 5
103663: PPUSH
103664: CALL_OW 488
103668: AND
103669: IFFALSE 103693
// CutTreeXYR ( unit , x , y , 12 ) ;
103671: LD_VAR 0 2
103675: PPUSH
103676: LD_VAR 0 4
103680: PPUSH
103681: LD_VAR 0 5
103685: PPUSH
103686: LD_INT 12
103688: PPUSH
103689: CALL 103696 0 4
// end ;
103693: PPOPN 5
103695: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
103696: LD_INT 0
103698: PPUSH
103699: PPUSH
103700: PPUSH
103701: PPUSH
103702: PPUSH
103703: PPUSH
103704: PPUSH
103705: PPUSH
103706: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
103707: LD_VAR 0 1
103711: NOT
103712: PUSH
103713: LD_VAR 0 2
103717: PPUSH
103718: LD_VAR 0 3
103722: PPUSH
103723: CALL_OW 488
103727: NOT
103728: OR
103729: PUSH
103730: LD_VAR 0 4
103734: NOT
103735: OR
103736: IFFALSE 103740
// exit ;
103738: GO 104080
// list := [ ] ;
103740: LD_ADDR_VAR 0 13
103744: PUSH
103745: EMPTY
103746: ST_TO_ADDR
// if x - r < 0 then
103747: LD_VAR 0 2
103751: PUSH
103752: LD_VAR 0 4
103756: MINUS
103757: PUSH
103758: LD_INT 0
103760: LESS
103761: IFFALSE 103773
// min_x := 0 else
103763: LD_ADDR_VAR 0 7
103767: PUSH
103768: LD_INT 0
103770: ST_TO_ADDR
103771: GO 103789
// min_x := x - r ;
103773: LD_ADDR_VAR 0 7
103777: PUSH
103778: LD_VAR 0 2
103782: PUSH
103783: LD_VAR 0 4
103787: MINUS
103788: ST_TO_ADDR
// if y - r < 0 then
103789: LD_VAR 0 3
103793: PUSH
103794: LD_VAR 0 4
103798: MINUS
103799: PUSH
103800: LD_INT 0
103802: LESS
103803: IFFALSE 103815
// min_y := 0 else
103805: LD_ADDR_VAR 0 8
103809: PUSH
103810: LD_INT 0
103812: ST_TO_ADDR
103813: GO 103831
// min_y := y - r ;
103815: LD_ADDR_VAR 0 8
103819: PUSH
103820: LD_VAR 0 3
103824: PUSH
103825: LD_VAR 0 4
103829: MINUS
103830: ST_TO_ADDR
// max_x := x + r ;
103831: LD_ADDR_VAR 0 9
103835: PUSH
103836: LD_VAR 0 2
103840: PUSH
103841: LD_VAR 0 4
103845: PLUS
103846: ST_TO_ADDR
// max_y := y + r ;
103847: LD_ADDR_VAR 0 10
103851: PUSH
103852: LD_VAR 0 3
103856: PUSH
103857: LD_VAR 0 4
103861: PLUS
103862: ST_TO_ADDR
// for _x = min_x to max_x do
103863: LD_ADDR_VAR 0 11
103867: PUSH
103868: DOUBLE
103869: LD_VAR 0 7
103873: DEC
103874: ST_TO_ADDR
103875: LD_VAR 0 9
103879: PUSH
103880: FOR_TO
103881: IFFALSE 103998
// for _y = min_y to max_y do
103883: LD_ADDR_VAR 0 12
103887: PUSH
103888: DOUBLE
103889: LD_VAR 0 8
103893: DEC
103894: ST_TO_ADDR
103895: LD_VAR 0 10
103899: PUSH
103900: FOR_TO
103901: IFFALSE 103994
// begin if not ValidHex ( _x , _y ) then
103903: LD_VAR 0 11
103907: PPUSH
103908: LD_VAR 0 12
103912: PPUSH
103913: CALL_OW 488
103917: NOT
103918: IFFALSE 103922
// continue ;
103920: GO 103900
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
103922: LD_VAR 0 11
103926: PPUSH
103927: LD_VAR 0 12
103931: PPUSH
103932: CALL_OW 351
103936: PUSH
103937: LD_VAR 0 11
103941: PPUSH
103942: LD_VAR 0 12
103946: PPUSH
103947: CALL_OW 554
103951: AND
103952: IFFALSE 103992
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
103954: LD_ADDR_VAR 0 13
103958: PUSH
103959: LD_VAR 0 13
103963: PPUSH
103964: LD_VAR 0 13
103968: PUSH
103969: LD_INT 1
103971: PLUS
103972: PPUSH
103973: LD_VAR 0 11
103977: PUSH
103978: LD_VAR 0 12
103982: PUSH
103983: EMPTY
103984: LIST
103985: LIST
103986: PPUSH
103987: CALL_OW 2
103991: ST_TO_ADDR
// end ;
103992: GO 103900
103994: POP
103995: POP
103996: GO 103880
103998: POP
103999: POP
// if not list then
104000: LD_VAR 0 13
104004: NOT
104005: IFFALSE 104009
// exit ;
104007: GO 104080
// for i in list do
104009: LD_ADDR_VAR 0 6
104013: PUSH
104014: LD_VAR 0 13
104018: PUSH
104019: FOR_IN
104020: IFFALSE 104078
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
104022: LD_VAR 0 1
104026: PPUSH
104027: LD_STRING M
104029: PUSH
104030: LD_VAR 0 6
104034: PUSH
104035: LD_INT 1
104037: ARRAY
104038: PUSH
104039: LD_VAR 0 6
104043: PUSH
104044: LD_INT 2
104046: ARRAY
104047: PUSH
104048: LD_INT 0
104050: PUSH
104051: LD_INT 0
104053: PUSH
104054: LD_INT 0
104056: PUSH
104057: LD_INT 0
104059: PUSH
104060: EMPTY
104061: LIST
104062: LIST
104063: LIST
104064: LIST
104065: LIST
104066: LIST
104067: LIST
104068: PUSH
104069: EMPTY
104070: LIST
104071: PPUSH
104072: CALL_OW 447
104076: GO 104019
104078: POP
104079: POP
// end ;
104080: LD_VAR 0 5
104084: RET
