// starting begin ResetFog ;
   0: CALL_OW 335
// InitSettings ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 31
// begin PlaceSeeing ( 1 , 1 , 1 , - 372963 ) ;
  14: LD_INT 1
  16: PPUSH
  17: LD_INT 1
  19: PPUSH
  20: LD_INT 1
  22: PPUSH
  23: LD_INT 372963
  25: NEG
  26: PPUSH
  27: CALL_OW 330
// end ; SetTechnologies ;
  31: CALL 595 0 0
// SetDiplomacy ;
  35: CALL 807 0 0
// PrepareGame ;
  39: CALL 889 0 0
// end ;
  43: END
// export debug , GameType , game , disableGlobalTimer ; export mc_amer , mc_leg , mc_rus_1 , mc_rus_2 ; export playerCommander , playerForces , allyCommander , Powell , Farmer , ruOutpost , ruEscape , staticMines , baseCaptured , legDestCounter , cratesSpawns , legOfferAccepted , legChangeSide , allyDestCounter , sibBombAllowed , reinforceAllowed , commander , cratesSpawn , outpostEscape , dialogueMineDetected ; end_of_file export function InitSettings ; begin
  44: LD_INT 0
  46: PPUSH
// debug := 0 ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// GameType := 1 ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_INT 1
  62: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  63: LD_ADDR_OWVAR 67
  67: PUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL_OW 426
  75: ST_TO_ADDR
// sibBombAllowed := GetMultiPlayerSetting ( 1 ) - 1 ;
  76: LD_ADDR_EXP 23
  80: PUSH
  81: LD_INT 1
  83: PPUSH
  84: CALL_OW 426
  88: PUSH
  89: LD_INT 1
  91: MINUS
  92: ST_TO_ADDR
// reinforceAllowed := GetMultiPlayerSetting ( 2 ) - 1 ;
  93: LD_ADDR_EXP 24
  97: PUSH
  98: LD_INT 2
 100: PPUSH
 101: CALL_OW 426
 105: PUSH
 106: LD_INT 1
 108: MINUS
 109: ST_TO_ADDR
// cratesSpawn := GetMultiPlayerSetting ( 3 ) ;
 110: LD_ADDR_EXP 26
 114: PUSH
 115: LD_INT 3
 117: PPUSH
 118: CALL_OW 426
 122: ST_TO_ADDR
// commander := GetMultiPlayerSetting ( 4 ) ;
 123: LD_ADDR_EXP 25
 127: PUSH
 128: LD_INT 4
 130: PPUSH
 131: CALL_OW 426
 135: ST_TO_ADDR
// if not commander then
 136: LD_EXP 25
 140: NOT
 141: IFFALSE 151
// commander := 3 ;
 143: LD_ADDR_EXP 25
 147: PUSH
 148: LD_INT 3
 150: ST_TO_ADDR
// if not debug then
 151: LD_EXP 1
 155: NOT
 156: IFFALSE 160
// exit ;
 158: GO 217
// display_strings := [ Difficulty:  & Difficulty , sibBomb:  & sibBombAllowed , reinforceAllowed:  & reinforceAllowed , cratesSpawn:  & cratesSpawn , commander:  & commander ] ;
 160: LD_ADDR_OWVAR 47
 164: PUSH
 165: LD_STRING Difficulty: 
 167: PUSH
 168: LD_OWVAR 67
 172: STR
 173: PUSH
 174: LD_STRING sibBomb: 
 176: PUSH
 177: LD_EXP 23
 181: STR
 182: PUSH
 183: LD_STRING reinforceAllowed: 
 185: PUSH
 186: LD_EXP 24
 190: STR
 191: PUSH
 192: LD_STRING cratesSpawn: 
 194: PUSH
 195: LD_EXP 26
 199: STR
 200: PUSH
 201: LD_STRING commander: 
 203: PUSH
 204: LD_EXP 25
 208: STR
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: LIST
 214: LIST
 215: LIST
 216: ST_TO_ADDR
// end ;
 217: LD_VAR 0 1
 221: RET
// every 0 0$1 trigger game and GameType = 1 and not disableGlobalTimer do
 222: LD_EXP 3
 226: PUSH
 227: LD_EXP 2
 231: PUSH
 232: LD_INT 1
 234: EQUAL
 235: AND
 236: PUSH
 237: LD_EXP 4
 241: NOT
 242: AND
 243: IFFALSE 266
 245: GO 247
 247: DISABLE
// begin enable ;
 248: ENABLE
// display_strings := [ #SkrTime , tick ] ;
 249: LD_ADDR_OWVAR 47
 253: PUSH
 254: LD_STRING #SkrTime
 256: PUSH
 257: LD_OWVAR 1
 261: PUSH
 262: EMPTY
 263: LIST
 264: LIST
 265: ST_TO_ADDR
// end ;
 266: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 267: LD_EXP 19
 271: PUSH
 272: LD_EXP 3
 276: AND
 277: PUSH
 278: LD_EXP 2
 282: PUSH
 283: LD_INT 1
 285: EQUAL
 286: AND
 287: IFFALSE 348
 289: GO 291
 291: DISABLE
// Crates ( cratesSpawns [ 1 ] [ 1 ] , cratesSpawns [ 1 ] [ 2 ] , cratesSpawns [ 1 ] [ 3 ] , cratesSpawns [ 1 ] [ 4 ] ) ;
 292: LD_EXP 19
 296: PUSH
 297: LD_INT 1
 299: ARRAY
 300: PUSH
 301: LD_INT 1
 303: ARRAY
 304: PPUSH
 305: LD_EXP 19
 309: PUSH
 310: LD_INT 1
 312: ARRAY
 313: PUSH
 314: LD_INT 2
 316: ARRAY
 317: PPUSH
 318: LD_EXP 19
 322: PUSH
 323: LD_INT 1
 325: ARRAY
 326: PUSH
 327: LD_INT 3
 329: ARRAY
 330: PPUSH
 331: LD_EXP 19
 335: PUSH
 336: LD_INT 1
 338: ARRAY
 339: PUSH
 340: LD_INT 4
 342: ARRAY
 343: PPUSH
 344: CALL 55012 0 4
 348: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 349: LD_EXP 19
 353: PUSH
 354: LD_EXP 3
 358: AND
 359: PUSH
 360: LD_EXP 2
 364: PUSH
 365: LD_INT 1
 367: EQUAL
 368: AND
 369: IFFALSE 430
 371: GO 373
 373: DISABLE
// Crates ( cratesSpawns [ 2 ] [ 1 ] , cratesSpawns [ 2 ] [ 2 ] , cratesSpawns [ 2 ] [ 3 ] , cratesSpawns [ 2 ] [ 4 ] ) ;
 374: LD_EXP 19
 378: PUSH
 379: LD_INT 2
 381: ARRAY
 382: PUSH
 383: LD_INT 1
 385: ARRAY
 386: PPUSH
 387: LD_EXP 19
 391: PUSH
 392: LD_INT 2
 394: ARRAY
 395: PUSH
 396: LD_INT 2
 398: ARRAY
 399: PPUSH
 400: LD_EXP 19
 404: PUSH
 405: LD_INT 2
 407: ARRAY
 408: PUSH
 409: LD_INT 3
 411: ARRAY
 412: PPUSH
 413: LD_EXP 19
 417: PUSH
 418: LD_INT 2
 420: ARRAY
 421: PUSH
 422: LD_INT 4
 424: ARRAY
 425: PPUSH
 426: CALL 55012 0 4
 430: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 431: LD_EXP 19
 435: PUSH
 436: LD_EXP 3
 440: AND
 441: PUSH
 442: LD_EXP 2
 446: PUSH
 447: LD_INT 1
 449: EQUAL
 450: AND
 451: IFFALSE 512
 453: GO 455
 455: DISABLE
// Crates ( cratesSpawns [ 3 ] [ 1 ] , cratesSpawns [ 3 ] [ 2 ] , cratesSpawns [ 3 ] [ 3 ] , cratesSpawns [ 3 ] [ 4 ] ) ;
 456: LD_EXP 19
 460: PUSH
 461: LD_INT 3
 463: ARRAY
 464: PUSH
 465: LD_INT 1
 467: ARRAY
 468: PPUSH
 469: LD_EXP 19
 473: PUSH
 474: LD_INT 3
 476: ARRAY
 477: PUSH
 478: LD_INT 2
 480: ARRAY
 481: PPUSH
 482: LD_EXP 19
 486: PUSH
 487: LD_INT 3
 489: ARRAY
 490: PUSH
 491: LD_INT 3
 493: ARRAY
 494: PPUSH
 495: LD_EXP 19
 499: PUSH
 500: LD_INT 3
 502: ARRAY
 503: PUSH
 504: LD_INT 4
 506: ARRAY
 507: PPUSH
 508: CALL 55012 0 4
 512: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 513: LD_EXP 19
 517: PUSH
 518: LD_EXP 3
 522: AND
 523: PUSH
 524: LD_EXP 2
 528: PUSH
 529: LD_INT 1
 531: EQUAL
 532: AND
 533: IFFALSE 594
 535: GO 537
 537: DISABLE
// Crates ( cratesSpawns [ 4 ] [ 1 ] , cratesSpawns [ 4 ] [ 2 ] , cratesSpawns [ 4 ] [ 3 ] , cratesSpawns [ 4 ] [ 4 ] ) ;
 538: LD_EXP 19
 542: PUSH
 543: LD_INT 4
 545: ARRAY
 546: PUSH
 547: LD_INT 1
 549: ARRAY
 550: PPUSH
 551: LD_EXP 19
 555: PUSH
 556: LD_INT 4
 558: ARRAY
 559: PUSH
 560: LD_INT 2
 562: ARRAY
 563: PPUSH
 564: LD_EXP 19
 568: PUSH
 569: LD_INT 4
 571: ARRAY
 572: PUSH
 573: LD_INT 3
 575: ARRAY
 576: PPUSH
 577: LD_EXP 19
 581: PUSH
 582: LD_INT 4
 584: ARRAY
 585: PUSH
 586: LD_INT 4
 588: ARRAY
 589: PPUSH
 590: CALL 55012 0 4
 594: END
// export function SetTechnologies ; var i , j , ban_techs , res_techs ; begin
 595: LD_INT 0
 597: PPUSH
 598: PPUSH
 599: PPUSH
 600: PPUSH
 601: PPUSH
// if GameType = 1 then
 602: LD_EXP 2
 606: PUSH
 607: LD_INT 1
 609: EQUAL
 610: IFFALSE 679
// begin ban_techs := [ ] ;
 612: LD_ADDR_VAR 0 4
 616: PUSH
 617: EMPTY
 618: ST_TO_ADDR
// if sibBombAllowed < 2 then
 619: LD_EXP 23
 623: PUSH
 624: LD_INT 2
 626: LESS
 627: IFFALSE 640
// ban_techs := [ tech_sibFiss ] ;
 629: LD_ADDR_VAR 0 4
 633: PUSH
 634: LD_INT 25
 636: PUSH
 637: EMPTY
 638: LIST
 639: ST_TO_ADDR
// res_techs := [ tech_oilPow , tech_oilEng , tech_tech1 , tech_tech2 , tech_tech3 , tech_gun , tech_gatling , tech_rocket ] ;
 640: LD_ADDR_VAR 0 5
 644: PUSH
 645: LD_INT 46
 647: PUSH
 648: LD_INT 47
 650: PUSH
 651: LD_INT 48
 653: PUSH
 654: LD_INT 49
 656: PUSH
 657: LD_INT 50
 659: PUSH
 660: LD_INT 39
 662: PUSH
 663: LD_INT 69
 665: PUSH
 666: LD_INT 40
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// end ; for i = 1 to 8 do
 679: LD_ADDR_VAR 0 2
 683: PUSH
 684: DOUBLE
 685: LD_INT 1
 687: DEC
 688: ST_TO_ADDR
 689: LD_INT 8
 691: PUSH
 692: FOR_TO
 693: IFFALSE 777
// begin if res_techs then
 695: LD_VAR 0 5
 699: IFFALSE 735
// for j in res_techs do
 701: LD_ADDR_VAR 0 3
 705: PUSH
 706: LD_VAR 0 5
 710: PUSH
 711: FOR_IN
 712: IFFALSE 733
// SetTech ( j , i , state_researched ) ;
 714: LD_VAR 0 3
 718: PPUSH
 719: LD_VAR 0 2
 723: PPUSH
 724: LD_INT 2
 726: PPUSH
 727: CALL_OW 322
 731: GO 711
 733: POP
 734: POP
// if ban_techs then
 735: LD_VAR 0 4
 739: IFFALSE 775
// for j in ban_techs do
 741: LD_ADDR_VAR 0 3
 745: PUSH
 746: LD_VAR 0 4
 750: PUSH
 751: FOR_IN
 752: IFFALSE 773
// SetTech ( j , i , state_disabled ) ;
 754: LD_VAR 0 3
 758: PPUSH
 759: LD_VAR 0 2
 763: PPUSH
 764: LD_INT 0
 766: PPUSH
 767: CALL_OW 322
 771: GO 751
 773: POP
 774: POP
// end ;
 775: GO 692
 777: POP
 778: POP
// if sibBombAllowed = 1 then
 779: LD_EXP 23
 783: PUSH
 784: LD_INT 1
 786: EQUAL
 787: IFFALSE 802
// SetTech ( tech_sibFiss , 3 , state_enabled ) ;
 789: LD_INT 25
 791: PPUSH
 792: LD_INT 3
 794: PPUSH
 795: LD_INT 1
 797: PPUSH
 798: CALL_OW 322
// end ;
 802: LD_VAR 0 1
 806: RET
// export function SetDiplomacy ; begin
 807: LD_INT 0
 809: PPUSH
// if GameType = 1 then
 810: LD_EXP 2
 814: PUSH
 815: LD_INT 1
 817: EQUAL
 818: IFFALSE 884
// begin SetAttitude ( 1 , 4 , att_friend , true ) ;
 820: LD_INT 1
 822: PPUSH
 823: LD_INT 4
 825: PPUSH
 826: LD_INT 1
 828: PPUSH
 829: LD_INT 1
 831: PPUSH
 832: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 836: LD_INT 3
 838: PPUSH
 839: LD_INT 6
 841: PPUSH
 842: LD_INT 1
 844: PPUSH
 845: LD_INT 1
 847: PPUSH
 848: CALL_OW 80
// SetAttitude ( 3 , 8 , att_friend , true ) ;
 852: LD_INT 3
 854: PPUSH
 855: LD_INT 8
 857: PPUSH
 858: LD_INT 1
 860: PPUSH
 861: LD_INT 1
 863: PPUSH
 864: CALL_OW 80
// SetAttitude ( 6 , 8 , att_friend , true ) ;
 868: LD_INT 6
 870: PPUSH
 871: LD_INT 8
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: LD_INT 1
 879: PPUSH
 880: CALL_OW 80
// end ; end ;
 884: LD_VAR 0 1
 888: RET
// export function PrepareGame ; var i , tmp , sources ; begin
 889: LD_INT 0
 891: PPUSH
 892: PPUSH
 893: PPUSH
 894: PPUSH
// if GameType = 1 then
 895: LD_EXP 2
 899: PUSH
 900: LD_INT 1
 902: EQUAL
 903: IFFALSE 1395
// begin game := false ;
 905: LD_ADDR_EXP 3
 909: PUSH
 910: LD_INT 0
 912: ST_TO_ADDR
// your_side := 1 ;
 913: LD_ADDR_OWVAR 2
 917: PUSH
 918: LD_INT 1
 920: ST_TO_ADDR
// mc_amer := 1 ;
 921: LD_ADDR_EXP 5
 925: PUSH
 926: LD_INT 1
 928: ST_TO_ADDR
// mc_leg := 2 ;
 929: LD_ADDR_EXP 6
 933: PUSH
 934: LD_INT 2
 936: ST_TO_ADDR
// mc_rus_1 := 3 ;
 937: LD_ADDR_EXP 7
 941: PUSH
 942: LD_INT 3
 944: ST_TO_ADDR
// mc_rus_2 := 4 ;
 945: LD_ADDR_EXP 8
 949: PUSH
 950: LD_INT 4
 952: ST_TO_ADDR
// cratesSpawns := [ [ amerCrates , 1 , 0 , [ 200 , 250 , 300 ] [ cratesSpawn ] ] , [ rusCrates , 8 , 50 , 500 ] , [ legCrates , 5 , 50 , 300 ] , [ playerCrates , [ 4 , 5 , 6 ] [ cratesSpawn ] , 30 , [ 300 , 450 , 500 ] [ cratesSpawn ] ] ] ;
 953: LD_ADDR_EXP 19
 957: PUSH
 958: LD_INT 5
 960: PUSH
 961: LD_INT 1
 963: PUSH
 964: LD_INT 0
 966: PUSH
 967: LD_INT 200
 969: PUSH
 970: LD_INT 250
 972: PUSH
 973: LD_INT 300
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: LIST
 980: PUSH
 981: LD_EXP 26
 985: ARRAY
 986: PUSH
 987: EMPTY
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: LD_INT 13
 995: PUSH
 996: LD_INT 8
 998: PUSH
 999: LD_INT 50
1001: PUSH
1002: LD_INT 500
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: PUSH
1011: LD_INT 17
1013: PUSH
1014: LD_INT 5
1016: PUSH
1017: LD_INT 50
1019: PUSH
1020: LD_INT 300
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: PUSH
1029: LD_INT 18
1031: PUSH
1032: LD_INT 4
1034: PUSH
1035: LD_INT 5
1037: PUSH
1038: LD_INT 6
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: PUSH
1046: LD_EXP 26
1050: ARRAY
1051: PUSH
1052: LD_INT 30
1054: PUSH
1055: LD_INT 300
1057: PUSH
1058: LD_INT 450
1060: PUSH
1061: LD_INT 500
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: LIST
1068: PUSH
1069: LD_EXP 26
1073: ARRAY
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: PUSH
1081: EMPTY
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: ST_TO_ADDR
// sources := [ [ 190 , 193 , mat_siberit ] , [ 182 , 117 , mat_siberit ] , [ 43 , 2 , mat_siberit ] , [ 114 , 152 , mat_oil ] , [ 85 , 38 , mat_oil ] ] ;
1087: LD_ADDR_VAR 0 4
1091: PUSH
1092: LD_INT 190
1094: PUSH
1095: LD_INT 193
1097: PUSH
1098: LD_INT 3
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: LIST
1105: PUSH
1106: LD_INT 182
1108: PUSH
1109: LD_INT 117
1111: PUSH
1112: LD_INT 3
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: LIST
1119: PUSH
1120: LD_INT 43
1122: PUSH
1123: LD_INT 2
1125: PUSH
1126: LD_INT 3
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: LIST
1133: PUSH
1134: LD_INT 114
1136: PUSH
1137: LD_INT 152
1139: PUSH
1140: LD_INT 2
1142: PUSH
1143: EMPTY
1144: LIST
1145: LIST
1146: LIST
1147: PUSH
1148: LD_INT 85
1150: PUSH
1151: LD_INT 38
1153: PUSH
1154: LD_INT 2
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: LIST
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: ST_TO_ADDR
// for i in sources do
1169: LD_ADDR_VAR 0 2
1173: PUSH
1174: LD_VAR 0 4
1178: PUSH
1179: FOR_IN
1180: IFFALSE 1215
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
1182: LD_VAR 0 2
1186: PUSH
1187: LD_INT 1
1189: ARRAY
1190: PPUSH
1191: LD_VAR 0 2
1195: PUSH
1196: LD_INT 2
1198: ARRAY
1199: PPUSH
1200: LD_VAR 0 2
1204: PUSH
1205: LD_INT 3
1207: ARRAY
1208: PPUSH
1209: CALL_OW 62
1213: GO 1179
1215: POP
1216: POP
// disableGlobalTimer := false ;
1217: LD_ADDR_EXP 4
1221: PUSH
1222: LD_INT 0
1224: ST_TO_ADDR
// ruEscape := [ 0 , [ 5 , 6 , 7 ] [ Difficulty ] ] ;
1225: LD_ADDR_EXP 15
1229: PUSH
1230: LD_INT 0
1232: PUSH
1233: LD_INT 5
1235: PUSH
1236: LD_INT 6
1238: PUSH
1239: LD_INT 7
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: LIST
1246: PUSH
1247: LD_OWVAR 67
1251: ARRAY
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: ST_TO_ADDR
// ruOutpost := [ ] ;
1257: LD_ADDR_EXP 14
1261: PUSH
1262: EMPTY
1263: ST_TO_ADDR
// staticMines := [ ] ;
1264: LD_ADDR_EXP 16
1268: PUSH
1269: EMPTY
1270: ST_TO_ADDR
// baseCaptured := false ;
1271: LD_ADDR_EXP 17
1275: PUSH
1276: LD_INT 0
1278: ST_TO_ADDR
// legDestCounter := 0 ;
1279: LD_ADDR_EXP 18
1283: PUSH
1284: LD_INT 0
1286: ST_TO_ADDR
// legOfferAccepted := false ;
1287: LD_ADDR_EXP 20
1291: PUSH
1292: LD_INT 0
1294: ST_TO_ADDR
// legChangeSide := false ;
1295: LD_ADDR_EXP 21
1299: PUSH
1300: LD_INT 0
1302: ST_TO_ADDR
// allyDestCounter := 0 ;
1303: LD_ADDR_EXP 22
1307: PUSH
1308: LD_INT 0
1310: ST_TO_ADDR
// outpostEscape := false ;
1311: LD_ADDR_EXP 27
1315: PUSH
1316: LD_INT 0
1318: ST_TO_ADDR
// dialogueMineDetected := false ;
1319: LD_ADDR_EXP 28
1323: PUSH
1324: LD_INT 0
1326: ST_TO_ADDR
// PrepareAmericans ;
1327: CALL 7264 0 0
// PrepareLegion ;
1331: CALL 5529 0 0
// PrepareRussians ;
1335: CALL 2495 0 0
// playerForces := PreparePlayer ;
1339: LD_ADDR_EXP 10
1343: PUSH
1344: CALL 8507 0 0
1348: ST_TO_ADDR
// AnimateTrees ( true ) ;
1349: LD_INT 1
1351: PPUSH
1352: CALL_OW 573
// PrepareNature ( 4 , 3 , 8 , 5 , 3 , 1 , 8 , natureGroundArea , natureWaterArea ) ;
1356: LD_INT 4
1358: PPUSH
1359: LD_INT 3
1361: PPUSH
1362: LD_INT 8
1364: PPUSH
1365: LD_INT 5
1367: PPUSH
1368: LD_INT 3
1370: PPUSH
1371: LD_INT 1
1373: PPUSH
1374: LD_INT 8
1376: PPUSH
1377: LD_INT 2
1379: PPUSH
1380: LD_INT 1
1382: PPUSH
1383: CALL 52317 0 9
// MC_Start ;
1387: CALL 59281 0 0
// Action ;
1391: CALL 10703 0 0
// end ; end ;
1395: LD_VAR 0 1
1399: RET
// export function CustomInitMacro ; begin
1400: LD_INT 0
1402: PPUSH
// if GameType <> 1 then
1403: LD_EXP 2
1407: PUSH
1408: LD_INT 1
1410: NONEQUAL
1411: IFFALSE 1415
// exit ;
1413: GO 2490
// MC_SetScanArea ( mc_amer , amerBase ) ;
1415: LD_EXP 5
1419: PPUSH
1420: LD_INT 3
1422: PPUSH
1423: CALL 82190 0 2
// MC_SetParkingArea ( mc_amer , amerParking ) ;
1427: LD_EXP 5
1431: PPUSH
1432: LD_INT 4
1434: PPUSH
1435: CALL 82134 0 2
// MC_SetAllowedTurretWeapons ( mc_amer , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1439: LD_EXP 5
1443: PPUSH
1444: LD_INT 11
1446: PUSH
1447: LD_INT 6
1449: PUSH
1450: LD_INT 7
1452: PUSH
1453: LD_INT 9
1455: PUSH
1456: LD_INT 10
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: PPUSH
1466: CALL 82022 0 2
// MC_SetCratesArea ( mc_amer , amerCrates ) ;
1470: LD_EXP 5
1474: PPUSH
1475: LD_INT 5
1477: PPUSH
1478: CALL 81704 0 2
// MC_SetTame ( mc_amer , amerBase ) ;
1482: LD_EXP 5
1486: PPUSH
1487: LD_INT 3
1489: PPUSH
1490: CALL 81435 0 2
// MC_SetDefenderLimit ( mc_amer , 4 ) ;
1494: LD_EXP 5
1498: PPUSH
1499: LD_INT 4
1501: PPUSH
1502: CALL 81054 0 2
// MC_SetProduceList ( mc_amer , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_solar , control_remote , us_laser ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , ] ) ;
1506: LD_EXP 5
1510: PPUSH
1511: LD_INT 3
1513: PUSH
1514: LD_INT 1
1516: PUSH
1517: LD_INT 2
1519: PUSH
1520: LD_INT 5
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 3
1531: PUSH
1532: LD_INT 2
1534: PUSH
1535: LD_INT 2
1537: PUSH
1538: LD_INT 9
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: PUSH
1547: LD_INT 4
1549: PUSH
1550: LD_INT 1
1552: PUSH
1553: LD_INT 2
1555: PUSH
1556: LD_INT 7
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: PUSH
1565: LD_INT 4
1567: PUSH
1568: LD_INT 1
1570: PUSH
1571: LD_INT 2
1573: PUSH
1574: LD_INT 6
1576: PUSH
1577: EMPTY
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: PPUSH
1589: CALL 80869 0 2
// MC_SetBuildingList ( mc_amer , [ [ b_turret , 114 , 16 , 0 ] , [ b_bunker , 110 , 12 , 0 ] ] ) ;
1593: LD_EXP 5
1597: PPUSH
1598: LD_INT 33
1600: PUSH
1601: LD_INT 114
1603: PUSH
1604: LD_INT 16
1606: PUSH
1607: LD_INT 0
1609: PUSH
1610: EMPTY
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 32
1618: PUSH
1619: LD_INT 110
1621: PUSH
1622: LD_INT 12
1624: PUSH
1625: LD_INT 0
1627: PUSH
1628: EMPTY
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PPUSH
1638: CALL 80761 0 2
// MC_SetLabKind ( mc_amer , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1642: LD_EXP 5
1646: PPUSH
1647: LD_INT 10
1649: PUSH
1650: LD_INT 15
1652: PUSH
1653: LD_INT 12
1655: PUSH
1656: LD_INT 11
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: PPUSH
1665: CALL 81611 0 2
// MC_SetScanArea ( mc_leg , legBase ) ;
1669: LD_EXP 6
1673: PPUSH
1674: LD_INT 6
1676: PPUSH
1677: CALL 82190 0 2
// MC_SetParkingArea ( mc_leg , legParking ) ;
1681: LD_EXP 6
1685: PPUSH
1686: LD_INT 7
1688: PPUSH
1689: CALL 82134 0 2
// MC_SetAllowedTurretWeapons ( mc_leg , [ ar_radar , ar_gun , ar_rocket_launcher , ar_gatling_gun ] ) ;
1693: LD_EXP 6
1697: PPUSH
1698: LD_INT 30
1700: PUSH
1701: LD_INT 27
1703: PUSH
1704: LD_INT 28
1706: PUSH
1707: LD_INT 25
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: PPUSH
1716: CALL 82022 0 2
// MC_SetCratesArea ( mc_leg , legCrates ) ;
1720: LD_EXP 6
1724: PPUSH
1725: LD_INT 17
1727: PPUSH
1728: CALL 81704 0 2
// MC_SetTame ( mc_leg , legBase ) ;
1732: LD_EXP 6
1736: PPUSH
1737: LD_INT 6
1739: PPUSH
1740: CALL 81435 0 2
// MC_SetDefenderLimit ( mc_leg , 5 ) ;
1744: LD_EXP 6
1748: PPUSH
1749: LD_INT 5
1751: PPUSH
1752: CALL 81054 0 2
// MC_SetMinesField ( mc_leg , 10 , legMines ) ;
1756: LD_EXP 6
1760: PPUSH
1761: LD_INT 10
1763: PPUSH
1764: LD_INT 9
1766: PPUSH
1767: CALL 80551 0 3
// MC_SetBuildingList ( mc_leg , [ [ b_armoury , 157 , 144 , 0 ] , [ b_bunker , 151 , 142 , 0 ] , [ b_bunker , 161 , 144 , 0 ] , [ b_bunker , 140 , 133 , 0 ] ] ) ;
1771: LD_EXP 6
1775: PPUSH
1776: LD_INT 4
1778: PUSH
1779: LD_INT 157
1781: PUSH
1782: LD_INT 144
1784: PUSH
1785: LD_INT 0
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: PUSH
1794: LD_INT 32
1796: PUSH
1797: LD_INT 151
1799: PUSH
1800: LD_INT 142
1802: PUSH
1803: LD_INT 0
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: PUSH
1812: LD_INT 32
1814: PUSH
1815: LD_INT 161
1817: PUSH
1818: LD_INT 144
1820: PUSH
1821: LD_INT 0
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: PUSH
1830: LD_INT 32
1832: PUSH
1833: LD_INT 140
1835: PUSH
1836: LD_INT 133
1838: PUSH
1839: LD_INT 0
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: LIST
1852: LIST
1853: PPUSH
1854: CALL 80761 0 2
// MC_SetProduceList ( mc_leg , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] , [ ar_medium_trike , engine_combustion , control_remote , ar_crane ] ] ) ;
1858: LD_EXP 6
1862: PPUSH
1863: LD_INT 13
1865: PUSH
1866: LD_INT 2
1868: PUSH
1869: LD_INT 1
1871: PUSH
1872: LD_INT 31
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: LIST
1879: LIST
1880: PUSH
1881: LD_INT 13
1883: PUSH
1884: LD_INT 2
1886: PUSH
1887: LD_INT 1
1889: PUSH
1890: LD_INT 31
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 13
1901: PUSH
1902: LD_INT 1
1904: PUSH
1905: LD_INT 1
1907: PUSH
1908: LD_INT 27
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 13
1919: PUSH
1920: LD_INT 1
1922: PUSH
1923: LD_INT 2
1925: PUSH
1926: LD_INT 27
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: LIST
1933: LIST
1934: PUSH
1935: LD_INT 13
1937: PUSH
1938: LD_INT 1
1940: PUSH
1941: LD_INT 2
1943: PUSH
1944: LD_INT 27
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 13
1955: PUSH
1956: LD_INT 1
1958: PUSH
1959: LD_INT 2
1961: PUSH
1962: LD_INT 28
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: PUSH
1971: LD_INT 13
1973: PUSH
1974: LD_INT 1
1976: PUSH
1977: LD_INT 2
1979: PUSH
1980: LD_INT 28
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 13
1991: PUSH
1992: LD_INT 1
1994: PUSH
1995: LD_INT 2
1997: PUSH
1998: LD_INT 32
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 13
2009: PUSH
2010: LD_INT 1
2012: PUSH
2013: LD_INT 2
2015: PUSH
2016: LD_EXP 35
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: LIST
2025: LIST
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: PPUSH
2038: CALL 80869 0 2
// HiddenCamera ( 165 , 156 , 8 ) ;
2042: LD_INT 165
2044: PPUSH
2045: LD_INT 156
2047: PPUSH
2048: LD_INT 8
2050: PPUSH
2051: CALL_OW 244
// MC_SetScanArea ( mc_rus_1 , rus1Base ) ;
2055: LD_EXP 7
2059: PPUSH
2060: LD_INT 15
2062: PPUSH
2063: CALL 82190 0 2
// MC_SetParkingArea ( mc_rus_1 , rus1Parking ) ;
2067: LD_EXP 7
2071: PPUSH
2072: LD_INT 16
2074: PPUSH
2075: CALL 82134 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_1 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2079: LD_EXP 7
2083: PPUSH
2084: LD_INT 43
2086: PUSH
2087: LD_INT 47
2089: PUSH
2090: LD_INT 45
2092: PUSH
2093: LD_INT 49
2095: PUSH
2096: LD_INT 46
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: LIST
2105: PPUSH
2106: CALL 82022 0 2
// MC_SetCratesArea ( mc_rus_1 , rusCrates ) ;
2110: LD_EXP 7
2114: PPUSH
2115: LD_INT 13
2117: PPUSH
2118: CALL 81704 0 2
// MC_SetTame ( mc_rus_1 , rus1Base ) ;
2122: LD_EXP 7
2126: PPUSH
2127: LD_INT 15
2129: PPUSH
2130: CALL 81435 0 2
// MC_SetDefenderLimit ( mc_rus_1 , 5 ) ;
2134: LD_EXP 7
2138: PPUSH
2139: LD_INT 5
2141: PPUSH
2142: CALL 81054 0 2
// MC_SetProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_rocket ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_crane ] , ] ) ;
2146: LD_EXP 7
2150: PPUSH
2151: LD_INT 23
2153: PUSH
2154: LD_INT 1
2156: PUSH
2157: LD_INT 3
2159: PUSH
2160: LD_INT 46
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: LIST
2167: LIST
2168: PUSH
2169: LD_INT 23
2171: PUSH
2172: LD_INT 1
2174: PUSH
2175: LD_INT 1
2177: PUSH
2178: LD_INT 46
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: LIST
2185: LIST
2186: PUSH
2187: LD_INT 23
2189: PUSH
2190: LD_INT 1
2192: PUSH
2193: LD_INT 3
2195: PUSH
2196: LD_INT 45
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: LD_INT 23
2207: PUSH
2208: LD_INT 1
2210: PUSH
2211: LD_INT 1
2213: PUSH
2214: LD_INT 47
2216: PUSH
2217: EMPTY
2218: LIST
2219: LIST
2220: LIST
2221: LIST
2222: PUSH
2223: LD_INT 23
2225: PUSH
2226: LD_INT 1
2228: PUSH
2229: LD_INT 3
2231: PUSH
2232: LD_INT 46
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: LIST
2240: PUSH
2241: LD_INT 21
2243: PUSH
2244: LD_INT 1
2246: PUSH
2247: LD_INT 3
2249: PUSH
2250: LD_INT 51
2252: PUSH
2253: EMPTY
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 21
2261: PUSH
2262: LD_INT 1
2264: PUSH
2265: LD_INT 3
2267: PUSH
2268: LD_INT 52
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: LIST
2275: LIST
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: PPUSH
2286: CALL 80869 0 2
// MC_SetScanArea ( mc_rus_2 , rus2Base ) ;
2290: LD_EXP 8
2294: PPUSH
2295: LD_INT 11
2297: PPUSH
2298: CALL 82190 0 2
// MC_SetParkingArea ( mc_rus_2 , rus2Parking ) ;
2302: LD_EXP 8
2306: PPUSH
2307: LD_INT 12
2309: PPUSH
2310: CALL 82134 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_2 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2314: LD_EXP 8
2318: PPUSH
2319: LD_INT 43
2321: PUSH
2322: LD_INT 47
2324: PUSH
2325: LD_INT 45
2327: PUSH
2328: LD_INT 49
2330: PUSH
2331: LD_INT 46
2333: PUSH
2334: EMPTY
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: PPUSH
2341: CALL 82022 0 2
// MC_SetCratesArea ( mc_rus_2 , rusCrates ) ;
2345: LD_EXP 8
2349: PPUSH
2350: LD_INT 13
2352: PPUSH
2353: CALL 81704 0 2
// MC_SetTame ( mc_rus_2 , rus2Base ) ;
2357: LD_EXP 8
2361: PPUSH
2362: LD_INT 11
2364: PPUSH
2365: CALL 81435 0 2
// MC_SetDefenderLimit ( mc_rus_2 , 4 ) ;
2369: LD_EXP 8
2373: PPUSH
2374: LD_INT 4
2376: PPUSH
2377: CALL 81054 0 2
// MC_SetTeleportExit ( mc_rus_2 , [ [ 115 , 201 ] ] ) ;
2381: LD_EXP 8
2385: PPUSH
2386: LD_INT 115
2388: PUSH
2389: LD_INT 201
2391: PUSH
2392: EMPTY
2393: LIST
2394: LIST
2395: PUSH
2396: EMPTY
2397: LIST
2398: PPUSH
2399: CALL 81760 0 2
// MC_SetProduceList ( mc_rus_2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
2403: LD_EXP 8
2407: PPUSH
2408: LD_INT 24
2410: PUSH
2411: LD_INT 3
2413: PUSH
2414: LD_INT 3
2416: PUSH
2417: LD_INT 46
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: LIST
2424: LIST
2425: PUSH
2426: LD_INT 24
2428: PUSH
2429: LD_INT 3
2431: PUSH
2432: LD_INT 3
2434: PUSH
2435: LD_INT 46
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: LIST
2442: LIST
2443: PUSH
2444: LD_INT 24
2446: PUSH
2447: LD_INT 3
2449: PUSH
2450: LD_INT 3
2452: PUSH
2453: LD_INT 46
2455: PUSH
2456: EMPTY
2457: LIST
2458: LIST
2459: LIST
2460: LIST
2461: PUSH
2462: LD_INT 24
2464: PUSH
2465: LD_INT 3
2467: PUSH
2468: LD_INT 3
2470: PUSH
2471: LD_INT 46
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: LIST
2478: LIST
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: LIST
2484: LIST
2485: PPUSH
2486: CALL 80869 0 2
// end ;
2490: LD_VAR 0 1
2494: RET
// export function PrepareRussians ; var i , b , tmp , side , sr , depot , base ; begin
2495: LD_INT 0
2497: PPUSH
2498: PPUSH
2499: PPUSH
2500: PPUSH
2501: PPUSH
2502: PPUSH
2503: PPUSH
2504: PPUSH
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , rusApe , 0 ) ;
2505: LD_INT 0
2507: PPUSH
2508: LD_INT 0
2510: PPUSH
2511: LD_INT 3
2513: PPUSH
2514: LD_INT 0
2516: PPUSH
2517: LD_INT 0
2519: PPUSH
2520: LD_INT 0
2522: PPUSH
2523: LD_INT 0
2525: PPUSH
2526: LD_INT 14
2528: PPUSH
2529: LD_INT 0
2531: PPUSH
2532: CALL 52317 0 9
// side := 3 ;
2536: LD_ADDR_VAR 0 5
2540: PUSH
2541: LD_INT 3
2543: ST_TO_ADDR
// SetTech ( tech_targTeleport , side , state_researched ) ;
2544: LD_INT 38
2546: PPUSH
2547: LD_VAR 0 5
2551: PPUSH
2552: LD_INT 2
2554: PPUSH
2555: CALL_OW 322
// SetTech ( tech_gun , side , state_researched ) ;
2559: LD_INT 39
2561: PPUSH
2562: LD_VAR 0 5
2566: PPUSH
2567: LD_INT 2
2569: PPUSH
2570: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
2574: LD_INT 34
2576: PPUSH
2577: LD_VAR 0 5
2581: PPUSH
2582: LD_INT 2
2584: PPUSH
2585: CALL_OW 322
// tmp := [ [ 0 , 208 , 163 , 4 , 0 , 0 ] , [ 3 , 194 , 161 , 1 , 0 , 0 ] , [ 17 , 190 , 161 , 1 , 0 , 0 ] , [ 5 , 200 , 145 , 3 , 0 , 0 ] , [ 32 , 192 , 144 , 3 , 0 , 0 ] , [ 26 , 216 , 172 , 3 , 0 , 0 ] , [ 26 , 218 , 176 , 3 , 0 , 0 ] , [ 29 , 182 , 149 , 3 , 0 , 0 ] , [ 8 , 201 , 171 , 0 , 10 , 11 ] , [ 32 , 188 , 167 , 0 , 0 , 0 ] , [ 32 , 202 , 179 , 0 , 0 , 0 ] , [ 32 , 209 , 182 , 0 , 0 , 0 ] , [ 32 , 220 , 183 , 5 , 0 , 0 ] , [ 32 , 225 , 181 , 5 , 0 , 0 ] , [ 26 , 220 , 174 , 5 , 0 , 0 ] , [ 1 , 84 , 128 , 4 , 0 , 0 ] , [ 3 , 68 , 121 , 1 , 0 , 0 ] , [ 19 , 72 , 125 , 5 , 0 , 0 ] , [ 18 , 68 , 124 , 0 , 0 , 0 ] , [ 24 , 64 , 121 , 1 , 0 , 0 ] , [ 17 , 65 , 118 , 2 , 0 , 0 ] , [ 21 , 68 , 117 , 3 , 0 , 0 ] , [ 8 , 68 , 130 , 1 , 14 , 10 ] , [ 8 , 67 , 110 , 2 , 11 , 12 ] , [ 28 , 85 , 108 , 2 , 0 , 0 ] , [ 28 , 85 , 124 , 2 , 0 , 0 ] , [ 30 , 97 , 119 , 2 , 0 , 0 ] , [ 5 , 111 , 138 , 4 , 0 , 0 ] , [ 33 , 104 , 130 , 3 , 0 , 0 ] , [ 33 , 110 , 142 , 5 , 0 , 0 ] , [ 33 , 91 , 131 , 5 , 0 , 0 ] , [ 33 , 107 , 157 , 5 , 0 , 0 ] , [ 33 , 104 , 160 , 5 , 0 , 0 ] , [ 33 , 101 , 162 , 5 , 0 , 0 ] , [ 32 , 87 , 157 , 5 , 0 , 0 ] , [ 32 , 105 , 158 , 5 , 0 , 0 ] , [ 33 , 91 , 118 , 4 , 0 , 0 ] , [ 33 , 89 , 107 , 4 , 0 , 0 ] , [ 5 , 86 , 96 , 3 , 0 , 0 ] , [ 33 , 91 , 102 , 4 , 0 , 0 ] , [ 32 , 80 , 95 , 3 , 0 , 0 ] , [ 28 , 77 , 105 , 3 , 0 , 0 ] , [ 28 , 85 , 113 , 3 , 0 , 0 ] , [ 28 , 55 , 97 , 3 , 0 , 0 ] , [ 28 , 88 , 128 , 3 , 0 , 0 ] , [ 32 , 69 , 101 , 2 , 0 , 0 ] , [ 1 , 34 , 23 , 4 , 0 , 0 ] , [ 8 , 25 , 4 , 3 , 11 , 10 ] , [ 8 , 15 , 4 , 2 , 14 , 12 ] , [ 29 , 55 , 35 , 2 , 0 , 0 ] , [ 29 , 24 , 44 , 2 , 0 , 0 ] , [ 34 , 34 , 32 , 4 , 0 , 0 ] , [ 3 , 14 , 16 , 1 , 0 , 0 ] , [ 24 , 10 , 16 , 1 , 0 , 0 ] , [ 21 , 11 , 13 , 2 , 0 , 0 ] , [ 18 , 14 , 12 , 3 , 0 , 0 ] , [ 16 , 14 , 19 , 0 , 0 , 0 ] , [ 17 , 18 , 20 , 5 , 0 , 0 ] , [ 28 , 10 , 5 , 1 , 0 , 0 ] , [ 28 , 8 , 8 , 1 , 0 , 0 ] , [ 26 , 19 , 2 , 1 , 0 , 0 ] , [ 26 , 30 , 2 , 1 , 0 , 0 ] , [ 5 , 59 , 20 , 4 , 0 , 0 ] , [ 32 , 60 , 24 , 4 , 0 , 0 ] , [ 32 , 61 , 45 , 5 , 0 , 0 ] , [ 32 , 52 , 51 , 5 , 0 , 0 ] , [ 33 , 56 , 51 , 5 , 0 , 0 ] , [ 33 , 62 , 49 , 5 , 0 , 0 ] , [ 33 , 41 , 47 , 5 , 0 , 0 ] , [ 33 , 33 , 52 , 5 , 0 , 0 ] , [ 5 , 31 , 40 , 0 , 0 , 0 ] , [ 33 , 65 , 37 , 5 , 0 , 0 ] , [ 33 , 63 , 29 , 4 , 0 , 0 ] , [ 33 , 54 , 11 , 4 , 0 , 0 ] , [ 33 , 56 , 15 , 4 , 0 , 0 ] , [ 33 , 51 , 6 , 4 , 0 , 0 ] , [ 26 , 39 , 25 , 0 , 0 , 0 ] , [ 26 , 37 , 21 , 0 , 0 , 0 ] , [ 32 , 35 , 17 , 4 , 0 , 0 ] , [ 33 , 35 , 28 , 4 , 0 , 0 ] , [ 33 , 28 , 46 , 5 , 0 , 0 ] , [ 33 , 31 , 6 , 4 , 0 , 0 ] , [ 26 , 54 , 38 , 4 , 0 , 0 ] , [ 33 , 207 , 167 , 3 , 0 , 0 ] , [ 30 , 43 , 2 , 4 , 0 , 0 ] ] ;
2589: LD_ADDR_VAR 0 4
2593: PUSH
2594: LD_INT 0
2596: PUSH
2597: LD_INT 208
2599: PUSH
2600: LD_INT 163
2602: PUSH
2603: LD_INT 4
2605: PUSH
2606: LD_INT 0
2608: PUSH
2609: LD_INT 0
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: LIST
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: LD_INT 3
2622: PUSH
2623: LD_INT 194
2625: PUSH
2626: LD_INT 161
2628: PUSH
2629: LD_INT 1
2631: PUSH
2632: LD_INT 0
2634: PUSH
2635: LD_INT 0
2637: PUSH
2638: EMPTY
2639: LIST
2640: LIST
2641: LIST
2642: LIST
2643: LIST
2644: LIST
2645: PUSH
2646: LD_INT 17
2648: PUSH
2649: LD_INT 190
2651: PUSH
2652: LD_INT 161
2654: PUSH
2655: LD_INT 1
2657: PUSH
2658: LD_INT 0
2660: PUSH
2661: LD_INT 0
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: LIST
2668: LIST
2669: LIST
2670: LIST
2671: PUSH
2672: LD_INT 5
2674: PUSH
2675: LD_INT 200
2677: PUSH
2678: LD_INT 145
2680: PUSH
2681: LD_INT 3
2683: PUSH
2684: LD_INT 0
2686: PUSH
2687: LD_INT 0
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: LIST
2694: LIST
2695: LIST
2696: LIST
2697: PUSH
2698: LD_INT 32
2700: PUSH
2701: LD_INT 192
2703: PUSH
2704: LD_INT 144
2706: PUSH
2707: LD_INT 3
2709: PUSH
2710: LD_INT 0
2712: PUSH
2713: LD_INT 0
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: LIST
2720: LIST
2721: LIST
2722: LIST
2723: PUSH
2724: LD_INT 26
2726: PUSH
2727: LD_INT 216
2729: PUSH
2730: LD_INT 172
2732: PUSH
2733: LD_INT 3
2735: PUSH
2736: LD_INT 0
2738: PUSH
2739: LD_INT 0
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: LIST
2746: LIST
2747: LIST
2748: LIST
2749: PUSH
2750: LD_INT 26
2752: PUSH
2753: LD_INT 218
2755: PUSH
2756: LD_INT 176
2758: PUSH
2759: LD_INT 3
2761: PUSH
2762: LD_INT 0
2764: PUSH
2765: LD_INT 0
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: LIST
2772: LIST
2773: LIST
2774: LIST
2775: PUSH
2776: LD_INT 29
2778: PUSH
2779: LD_INT 182
2781: PUSH
2782: LD_INT 149
2784: PUSH
2785: LD_INT 3
2787: PUSH
2788: LD_INT 0
2790: PUSH
2791: LD_INT 0
2793: PUSH
2794: EMPTY
2795: LIST
2796: LIST
2797: LIST
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: LD_INT 8
2804: PUSH
2805: LD_INT 201
2807: PUSH
2808: LD_INT 171
2810: PUSH
2811: LD_INT 0
2813: PUSH
2814: LD_INT 10
2816: PUSH
2817: LD_INT 11
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: LIST
2824: LIST
2825: LIST
2826: LIST
2827: PUSH
2828: LD_INT 32
2830: PUSH
2831: LD_INT 188
2833: PUSH
2834: LD_INT 167
2836: PUSH
2837: LD_INT 0
2839: PUSH
2840: LD_INT 0
2842: PUSH
2843: LD_INT 0
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: LIST
2850: LIST
2851: LIST
2852: LIST
2853: PUSH
2854: LD_INT 32
2856: PUSH
2857: LD_INT 202
2859: PUSH
2860: LD_INT 179
2862: PUSH
2863: LD_INT 0
2865: PUSH
2866: LD_INT 0
2868: PUSH
2869: LD_INT 0
2871: PUSH
2872: EMPTY
2873: LIST
2874: LIST
2875: LIST
2876: LIST
2877: LIST
2878: LIST
2879: PUSH
2880: LD_INT 32
2882: PUSH
2883: LD_INT 209
2885: PUSH
2886: LD_INT 182
2888: PUSH
2889: LD_INT 0
2891: PUSH
2892: LD_INT 0
2894: PUSH
2895: LD_INT 0
2897: PUSH
2898: EMPTY
2899: LIST
2900: LIST
2901: LIST
2902: LIST
2903: LIST
2904: LIST
2905: PUSH
2906: LD_INT 32
2908: PUSH
2909: LD_INT 220
2911: PUSH
2912: LD_INT 183
2914: PUSH
2915: LD_INT 5
2917: PUSH
2918: LD_INT 0
2920: PUSH
2921: LD_INT 0
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: LIST
2930: LIST
2931: PUSH
2932: LD_INT 32
2934: PUSH
2935: LD_INT 225
2937: PUSH
2938: LD_INT 181
2940: PUSH
2941: LD_INT 5
2943: PUSH
2944: LD_INT 0
2946: PUSH
2947: LD_INT 0
2949: PUSH
2950: EMPTY
2951: LIST
2952: LIST
2953: LIST
2954: LIST
2955: LIST
2956: LIST
2957: PUSH
2958: LD_INT 26
2960: PUSH
2961: LD_INT 220
2963: PUSH
2964: LD_INT 174
2966: PUSH
2967: LD_INT 5
2969: PUSH
2970: LD_INT 0
2972: PUSH
2973: LD_INT 0
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: LIST
2982: LIST
2983: PUSH
2984: LD_INT 1
2986: PUSH
2987: LD_INT 84
2989: PUSH
2990: LD_INT 128
2992: PUSH
2993: LD_INT 4
2995: PUSH
2996: LD_INT 0
2998: PUSH
2999: LD_INT 0
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: LIST
3006: LIST
3007: LIST
3008: LIST
3009: PUSH
3010: LD_INT 3
3012: PUSH
3013: LD_INT 68
3015: PUSH
3016: LD_INT 121
3018: PUSH
3019: LD_INT 1
3021: PUSH
3022: LD_INT 0
3024: PUSH
3025: LD_INT 0
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: LIST
3032: LIST
3033: LIST
3034: LIST
3035: PUSH
3036: LD_INT 19
3038: PUSH
3039: LD_INT 72
3041: PUSH
3042: LD_INT 125
3044: PUSH
3045: LD_INT 5
3047: PUSH
3048: LD_INT 0
3050: PUSH
3051: LD_INT 0
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: LIST
3058: LIST
3059: LIST
3060: LIST
3061: PUSH
3062: LD_INT 18
3064: PUSH
3065: LD_INT 68
3067: PUSH
3068: LD_INT 124
3070: PUSH
3071: LD_INT 0
3073: PUSH
3074: LD_INT 0
3076: PUSH
3077: LD_INT 0
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: LIST
3084: LIST
3085: LIST
3086: LIST
3087: PUSH
3088: LD_INT 24
3090: PUSH
3091: LD_INT 64
3093: PUSH
3094: LD_INT 121
3096: PUSH
3097: LD_INT 1
3099: PUSH
3100: LD_INT 0
3102: PUSH
3103: LD_INT 0
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: LIST
3110: LIST
3111: LIST
3112: LIST
3113: PUSH
3114: LD_INT 17
3116: PUSH
3117: LD_INT 65
3119: PUSH
3120: LD_INT 118
3122: PUSH
3123: LD_INT 2
3125: PUSH
3126: LD_INT 0
3128: PUSH
3129: LD_INT 0
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: LIST
3136: LIST
3137: LIST
3138: LIST
3139: PUSH
3140: LD_INT 21
3142: PUSH
3143: LD_INT 68
3145: PUSH
3146: LD_INT 117
3148: PUSH
3149: LD_INT 3
3151: PUSH
3152: LD_INT 0
3154: PUSH
3155: LD_INT 0
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: LIST
3162: LIST
3163: LIST
3164: LIST
3165: PUSH
3166: LD_INT 8
3168: PUSH
3169: LD_INT 68
3171: PUSH
3172: LD_INT 130
3174: PUSH
3175: LD_INT 1
3177: PUSH
3178: LD_INT 14
3180: PUSH
3181: LD_INT 10
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 8
3194: PUSH
3195: LD_INT 67
3197: PUSH
3198: LD_INT 110
3200: PUSH
3201: LD_INT 2
3203: PUSH
3204: LD_INT 11
3206: PUSH
3207: LD_INT 12
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: PUSH
3218: LD_INT 28
3220: PUSH
3221: LD_INT 85
3223: PUSH
3224: LD_INT 108
3226: PUSH
3227: LD_INT 2
3229: PUSH
3230: LD_INT 0
3232: PUSH
3233: LD_INT 0
3235: PUSH
3236: EMPTY
3237: LIST
3238: LIST
3239: LIST
3240: LIST
3241: LIST
3242: LIST
3243: PUSH
3244: LD_INT 28
3246: PUSH
3247: LD_INT 85
3249: PUSH
3250: LD_INT 124
3252: PUSH
3253: LD_INT 2
3255: PUSH
3256: LD_INT 0
3258: PUSH
3259: LD_INT 0
3261: PUSH
3262: EMPTY
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: LIST
3269: PUSH
3270: LD_INT 30
3272: PUSH
3273: LD_INT 97
3275: PUSH
3276: LD_INT 119
3278: PUSH
3279: LD_INT 2
3281: PUSH
3282: LD_INT 0
3284: PUSH
3285: LD_INT 0
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: LIST
3292: LIST
3293: LIST
3294: LIST
3295: PUSH
3296: LD_INT 5
3298: PUSH
3299: LD_INT 111
3301: PUSH
3302: LD_INT 138
3304: PUSH
3305: LD_INT 4
3307: PUSH
3308: LD_INT 0
3310: PUSH
3311: LD_INT 0
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: LIST
3318: LIST
3319: LIST
3320: LIST
3321: PUSH
3322: LD_INT 33
3324: PUSH
3325: LD_INT 104
3327: PUSH
3328: LD_INT 130
3330: PUSH
3331: LD_INT 3
3333: PUSH
3334: LD_INT 0
3336: PUSH
3337: LD_INT 0
3339: PUSH
3340: EMPTY
3341: LIST
3342: LIST
3343: LIST
3344: LIST
3345: LIST
3346: LIST
3347: PUSH
3348: LD_INT 33
3350: PUSH
3351: LD_INT 110
3353: PUSH
3354: LD_INT 142
3356: PUSH
3357: LD_INT 5
3359: PUSH
3360: LD_INT 0
3362: PUSH
3363: LD_INT 0
3365: PUSH
3366: EMPTY
3367: LIST
3368: LIST
3369: LIST
3370: LIST
3371: LIST
3372: LIST
3373: PUSH
3374: LD_INT 33
3376: PUSH
3377: LD_INT 91
3379: PUSH
3380: LD_INT 131
3382: PUSH
3383: LD_INT 5
3385: PUSH
3386: LD_INT 0
3388: PUSH
3389: LD_INT 0
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: PUSH
3400: LD_INT 33
3402: PUSH
3403: LD_INT 107
3405: PUSH
3406: LD_INT 157
3408: PUSH
3409: LD_INT 5
3411: PUSH
3412: LD_INT 0
3414: PUSH
3415: LD_INT 0
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: PUSH
3426: LD_INT 33
3428: PUSH
3429: LD_INT 104
3431: PUSH
3432: LD_INT 160
3434: PUSH
3435: LD_INT 5
3437: PUSH
3438: LD_INT 0
3440: PUSH
3441: LD_INT 0
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: LIST
3448: LIST
3449: LIST
3450: LIST
3451: PUSH
3452: LD_INT 33
3454: PUSH
3455: LD_INT 101
3457: PUSH
3458: LD_INT 162
3460: PUSH
3461: LD_INT 5
3463: PUSH
3464: LD_INT 0
3466: PUSH
3467: LD_INT 0
3469: PUSH
3470: EMPTY
3471: LIST
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: LIST
3477: PUSH
3478: LD_INT 32
3480: PUSH
3481: LD_INT 87
3483: PUSH
3484: LD_INT 157
3486: PUSH
3487: LD_INT 5
3489: PUSH
3490: LD_INT 0
3492: PUSH
3493: LD_INT 0
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: PUSH
3504: LD_INT 32
3506: PUSH
3507: LD_INT 105
3509: PUSH
3510: LD_INT 158
3512: PUSH
3513: LD_INT 5
3515: PUSH
3516: LD_INT 0
3518: PUSH
3519: LD_INT 0
3521: PUSH
3522: EMPTY
3523: LIST
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: PUSH
3530: LD_INT 33
3532: PUSH
3533: LD_INT 91
3535: PUSH
3536: LD_INT 118
3538: PUSH
3539: LD_INT 4
3541: PUSH
3542: LD_INT 0
3544: PUSH
3545: LD_INT 0
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: PUSH
3556: LD_INT 33
3558: PUSH
3559: LD_INT 89
3561: PUSH
3562: LD_INT 107
3564: PUSH
3565: LD_INT 4
3567: PUSH
3568: LD_INT 0
3570: PUSH
3571: LD_INT 0
3573: PUSH
3574: EMPTY
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: PUSH
3582: LD_INT 5
3584: PUSH
3585: LD_INT 86
3587: PUSH
3588: LD_INT 96
3590: PUSH
3591: LD_INT 3
3593: PUSH
3594: LD_INT 0
3596: PUSH
3597: LD_INT 0
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: PUSH
3608: LD_INT 33
3610: PUSH
3611: LD_INT 91
3613: PUSH
3614: LD_INT 102
3616: PUSH
3617: LD_INT 4
3619: PUSH
3620: LD_INT 0
3622: PUSH
3623: LD_INT 0
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: PUSH
3634: LD_INT 32
3636: PUSH
3637: LD_INT 80
3639: PUSH
3640: LD_INT 95
3642: PUSH
3643: LD_INT 3
3645: PUSH
3646: LD_INT 0
3648: PUSH
3649: LD_INT 0
3651: PUSH
3652: EMPTY
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: PUSH
3660: LD_INT 28
3662: PUSH
3663: LD_INT 77
3665: PUSH
3666: LD_INT 105
3668: PUSH
3669: LD_INT 3
3671: PUSH
3672: LD_INT 0
3674: PUSH
3675: LD_INT 0
3677: PUSH
3678: EMPTY
3679: LIST
3680: LIST
3681: LIST
3682: LIST
3683: LIST
3684: LIST
3685: PUSH
3686: LD_INT 28
3688: PUSH
3689: LD_INT 85
3691: PUSH
3692: LD_INT 113
3694: PUSH
3695: LD_INT 3
3697: PUSH
3698: LD_INT 0
3700: PUSH
3701: LD_INT 0
3703: PUSH
3704: EMPTY
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: PUSH
3712: LD_INT 28
3714: PUSH
3715: LD_INT 55
3717: PUSH
3718: LD_INT 97
3720: PUSH
3721: LD_INT 3
3723: PUSH
3724: LD_INT 0
3726: PUSH
3727: LD_INT 0
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: PUSH
3738: LD_INT 28
3740: PUSH
3741: LD_INT 88
3743: PUSH
3744: LD_INT 128
3746: PUSH
3747: LD_INT 3
3749: PUSH
3750: LD_INT 0
3752: PUSH
3753: LD_INT 0
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: LIST
3760: LIST
3761: LIST
3762: LIST
3763: PUSH
3764: LD_INT 32
3766: PUSH
3767: LD_INT 69
3769: PUSH
3770: LD_INT 101
3772: PUSH
3773: LD_INT 2
3775: PUSH
3776: LD_INT 0
3778: PUSH
3779: LD_INT 0
3781: PUSH
3782: EMPTY
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: PUSH
3790: LD_INT 1
3792: PUSH
3793: LD_INT 34
3795: PUSH
3796: LD_INT 23
3798: PUSH
3799: LD_INT 4
3801: PUSH
3802: LD_INT 0
3804: PUSH
3805: LD_INT 0
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: PUSH
3816: LD_INT 8
3818: PUSH
3819: LD_INT 25
3821: PUSH
3822: LD_INT 4
3824: PUSH
3825: LD_INT 3
3827: PUSH
3828: LD_INT 11
3830: PUSH
3831: LD_INT 10
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: PUSH
3842: LD_INT 8
3844: PUSH
3845: LD_INT 15
3847: PUSH
3848: LD_INT 4
3850: PUSH
3851: LD_INT 2
3853: PUSH
3854: LD_INT 14
3856: PUSH
3857: LD_INT 12
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: PUSH
3868: LD_INT 29
3870: PUSH
3871: LD_INT 55
3873: PUSH
3874: LD_INT 35
3876: PUSH
3877: LD_INT 2
3879: PUSH
3880: LD_INT 0
3882: PUSH
3883: LD_INT 0
3885: PUSH
3886: EMPTY
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: PUSH
3894: LD_INT 29
3896: PUSH
3897: LD_INT 24
3899: PUSH
3900: LD_INT 44
3902: PUSH
3903: LD_INT 2
3905: PUSH
3906: LD_INT 0
3908: PUSH
3909: LD_INT 0
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: PUSH
3920: LD_INT 34
3922: PUSH
3923: LD_INT 34
3925: PUSH
3926: LD_INT 32
3928: PUSH
3929: LD_INT 4
3931: PUSH
3932: LD_INT 0
3934: PUSH
3935: LD_INT 0
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: PUSH
3946: LD_INT 3
3948: PUSH
3949: LD_INT 14
3951: PUSH
3952: LD_INT 16
3954: PUSH
3955: LD_INT 1
3957: PUSH
3958: LD_INT 0
3960: PUSH
3961: LD_INT 0
3963: PUSH
3964: EMPTY
3965: LIST
3966: LIST
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: PUSH
3972: LD_INT 24
3974: PUSH
3975: LD_INT 10
3977: PUSH
3978: LD_INT 16
3980: PUSH
3981: LD_INT 1
3983: PUSH
3984: LD_INT 0
3986: PUSH
3987: LD_INT 0
3989: PUSH
3990: EMPTY
3991: LIST
3992: LIST
3993: LIST
3994: LIST
3995: LIST
3996: LIST
3997: PUSH
3998: LD_INT 21
4000: PUSH
4001: LD_INT 11
4003: PUSH
4004: LD_INT 13
4006: PUSH
4007: LD_INT 2
4009: PUSH
4010: LD_INT 0
4012: PUSH
4013: LD_INT 0
4015: PUSH
4016: EMPTY
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: PUSH
4024: LD_INT 18
4026: PUSH
4027: LD_INT 14
4029: PUSH
4030: LD_INT 12
4032: PUSH
4033: LD_INT 3
4035: PUSH
4036: LD_INT 0
4038: PUSH
4039: LD_INT 0
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: PUSH
4050: LD_INT 16
4052: PUSH
4053: LD_INT 14
4055: PUSH
4056: LD_INT 19
4058: PUSH
4059: LD_INT 0
4061: PUSH
4062: LD_INT 0
4064: PUSH
4065: LD_INT 0
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: PUSH
4076: LD_INT 17
4078: PUSH
4079: LD_INT 18
4081: PUSH
4082: LD_INT 20
4084: PUSH
4085: LD_INT 5
4087: PUSH
4088: LD_INT 0
4090: PUSH
4091: LD_INT 0
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: PUSH
4102: LD_INT 28
4104: PUSH
4105: LD_INT 10
4107: PUSH
4108: LD_INT 5
4110: PUSH
4111: LD_INT 1
4113: PUSH
4114: LD_INT 0
4116: PUSH
4117: LD_INT 0
4119: PUSH
4120: EMPTY
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: PUSH
4128: LD_INT 28
4130: PUSH
4131: LD_INT 8
4133: PUSH
4134: LD_INT 8
4136: PUSH
4137: LD_INT 1
4139: PUSH
4140: LD_INT 0
4142: PUSH
4143: LD_INT 0
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: LIST
4153: PUSH
4154: LD_INT 26
4156: PUSH
4157: LD_INT 19
4159: PUSH
4160: LD_INT 2
4162: PUSH
4163: LD_INT 1
4165: PUSH
4166: LD_INT 0
4168: PUSH
4169: LD_INT 0
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: PUSH
4180: LD_INT 26
4182: PUSH
4183: LD_INT 30
4185: PUSH
4186: LD_INT 2
4188: PUSH
4189: LD_INT 1
4191: PUSH
4192: LD_INT 0
4194: PUSH
4195: LD_INT 0
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: PUSH
4206: LD_INT 5
4208: PUSH
4209: LD_INT 59
4211: PUSH
4212: LD_INT 20
4214: PUSH
4215: LD_INT 4
4217: PUSH
4218: LD_INT 0
4220: PUSH
4221: LD_INT 0
4223: PUSH
4224: EMPTY
4225: LIST
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: LIST
4231: PUSH
4232: LD_INT 32
4234: PUSH
4235: LD_INT 60
4237: PUSH
4238: LD_INT 24
4240: PUSH
4241: LD_INT 4
4243: PUSH
4244: LD_INT 0
4246: PUSH
4247: LD_INT 0
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: PUSH
4258: LD_INT 32
4260: PUSH
4261: LD_INT 61
4263: PUSH
4264: LD_INT 45
4266: PUSH
4267: LD_INT 5
4269: PUSH
4270: LD_INT 0
4272: PUSH
4273: LD_INT 0
4275: PUSH
4276: EMPTY
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: PUSH
4284: LD_INT 32
4286: PUSH
4287: LD_INT 52
4289: PUSH
4290: LD_INT 51
4292: PUSH
4293: LD_INT 5
4295: PUSH
4296: LD_INT 0
4298: PUSH
4299: LD_INT 0
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: PUSH
4310: LD_INT 33
4312: PUSH
4313: LD_INT 56
4315: PUSH
4316: LD_INT 51
4318: PUSH
4319: LD_INT 5
4321: PUSH
4322: LD_INT 0
4324: PUSH
4325: LD_INT 0
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: PUSH
4336: LD_INT 33
4338: PUSH
4339: LD_INT 62
4341: PUSH
4342: LD_INT 49
4344: PUSH
4345: LD_INT 5
4347: PUSH
4348: LD_INT 0
4350: PUSH
4351: LD_INT 0
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: PUSH
4362: LD_INT 33
4364: PUSH
4365: LD_INT 41
4367: PUSH
4368: LD_INT 47
4370: PUSH
4371: LD_INT 5
4373: PUSH
4374: LD_INT 0
4376: PUSH
4377: LD_INT 0
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: PUSH
4388: LD_INT 33
4390: PUSH
4391: LD_INT 33
4393: PUSH
4394: LD_INT 52
4396: PUSH
4397: LD_INT 5
4399: PUSH
4400: LD_INT 0
4402: PUSH
4403: LD_INT 0
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: PUSH
4414: LD_INT 5
4416: PUSH
4417: LD_INT 31
4419: PUSH
4420: LD_INT 40
4422: PUSH
4423: LD_INT 0
4425: PUSH
4426: LD_INT 0
4428: PUSH
4429: LD_INT 0
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: PUSH
4440: LD_INT 33
4442: PUSH
4443: LD_INT 65
4445: PUSH
4446: LD_INT 37
4448: PUSH
4449: LD_INT 5
4451: PUSH
4452: LD_INT 0
4454: PUSH
4455: LD_INT 0
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: PUSH
4466: LD_INT 33
4468: PUSH
4469: LD_INT 63
4471: PUSH
4472: LD_INT 29
4474: PUSH
4475: LD_INT 4
4477: PUSH
4478: LD_INT 0
4480: PUSH
4481: LD_INT 0
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: PUSH
4492: LD_INT 33
4494: PUSH
4495: LD_INT 54
4497: PUSH
4498: LD_INT 11
4500: PUSH
4501: LD_INT 4
4503: PUSH
4504: LD_INT 0
4506: PUSH
4507: LD_INT 0
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: LIST
4517: PUSH
4518: LD_INT 33
4520: PUSH
4521: LD_INT 56
4523: PUSH
4524: LD_INT 15
4526: PUSH
4527: LD_INT 4
4529: PUSH
4530: LD_INT 0
4532: PUSH
4533: LD_INT 0
4535: PUSH
4536: EMPTY
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: PUSH
4544: LD_INT 33
4546: PUSH
4547: LD_INT 51
4549: PUSH
4550: LD_INT 6
4552: PUSH
4553: LD_INT 4
4555: PUSH
4556: LD_INT 0
4558: PUSH
4559: LD_INT 0
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: PUSH
4570: LD_INT 26
4572: PUSH
4573: LD_INT 39
4575: PUSH
4576: LD_INT 25
4578: PUSH
4579: LD_INT 0
4581: PUSH
4582: LD_INT 0
4584: PUSH
4585: LD_INT 0
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: PUSH
4596: LD_INT 26
4598: PUSH
4599: LD_INT 37
4601: PUSH
4602: LD_INT 21
4604: PUSH
4605: LD_INT 0
4607: PUSH
4608: LD_INT 0
4610: PUSH
4611: LD_INT 0
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: PUSH
4622: LD_INT 32
4624: PUSH
4625: LD_INT 35
4627: PUSH
4628: LD_INT 17
4630: PUSH
4631: LD_INT 4
4633: PUSH
4634: LD_INT 0
4636: PUSH
4637: LD_INT 0
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: LIST
4647: PUSH
4648: LD_INT 33
4650: PUSH
4651: LD_INT 35
4653: PUSH
4654: LD_INT 28
4656: PUSH
4657: LD_INT 4
4659: PUSH
4660: LD_INT 0
4662: PUSH
4663: LD_INT 0
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: PUSH
4674: LD_INT 33
4676: PUSH
4677: LD_INT 28
4679: PUSH
4680: LD_INT 46
4682: PUSH
4683: LD_INT 5
4685: PUSH
4686: LD_INT 0
4688: PUSH
4689: LD_INT 0
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: PUSH
4700: LD_INT 33
4702: PUSH
4703: LD_INT 31
4705: PUSH
4706: LD_INT 6
4708: PUSH
4709: LD_INT 4
4711: PUSH
4712: LD_INT 0
4714: PUSH
4715: LD_INT 0
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: PUSH
4726: LD_INT 26
4728: PUSH
4729: LD_INT 54
4731: PUSH
4732: LD_INT 38
4734: PUSH
4735: LD_INT 4
4737: PUSH
4738: LD_INT 0
4740: PUSH
4741: LD_INT 0
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: PUSH
4752: LD_INT 33
4754: PUSH
4755: LD_INT 207
4757: PUSH
4758: LD_INT 167
4760: PUSH
4761: LD_INT 3
4763: PUSH
4764: LD_INT 0
4766: PUSH
4767: LD_INT 0
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: PUSH
4778: LD_INT 30
4780: PUSH
4781: LD_INT 43
4783: PUSH
4784: LD_INT 2
4786: PUSH
4787: LD_INT 4
4789: PUSH
4790: LD_INT 0
4792: PUSH
4793: LD_INT 0
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: PUSH
4804: EMPTY
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: ST_TO_ADDR
// for i in tmp do
4891: LD_ADDR_VAR 0 2
4895: PUSH
4896: LD_VAR 0 4
4900: PUSH
4901: FOR_IN
4902: IFFALSE 5133
// begin uc_side := side ;
4904: LD_ADDR_OWVAR 20
4908: PUSH
4909: LD_VAR 0 5
4913: ST_TO_ADDR
// uc_nation := nation_russian ;
4914: LD_ADDR_OWVAR 21
4918: PUSH
4919: LD_INT 3
4921: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4922: LD_ADDR_OWVAR 42
4926: PUSH
4927: LD_VAR 0 2
4931: PUSH
4932: LD_INT 1
4934: ARRAY
4935: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
4936: LD_ADDR_OWVAR 43
4940: PUSH
4941: LD_INT 5
4943: PPUSH
4944: LD_INT 6
4946: PPUSH
4947: CALL_OW 12
4951: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
4952: LD_ADDR_OWVAR 44
4956: PUSH
4957: LD_VAR 0 2
4961: PUSH
4962: LD_INT 5
4964: ARRAY
4965: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
4966: LD_ADDR_OWVAR 45
4970: PUSH
4971: LD_VAR 0 2
4975: PUSH
4976: LD_INT 6
4978: ARRAY
4979: ST_TO_ADDR
// sr := 0 ;
4980: LD_ADDR_VAR 0 6
4984: PUSH
4985: LD_INT 0
4987: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
4988: LD_VAR 0 2
4992: PUSH
4993: LD_INT 1
4995: ARRAY
4996: PUSH
4997: LD_INT 29
4999: EQUAL
5000: IFFALSE 5012
// sr := mat_oil else
5002: LD_ADDR_VAR 0 6
5006: PUSH
5007: LD_INT 2
5009: ST_TO_ADDR
5010: GO 5034
// if i [ 1 ] = b_siberite_mine then
5012: LD_VAR 0 2
5016: PUSH
5017: LD_INT 1
5019: ARRAY
5020: PUSH
5021: LD_INT 30
5023: EQUAL
5024: IFFALSE 5034
// sr := mat_siberit ;
5026: LD_ADDR_VAR 0 6
5030: PUSH
5031: LD_INT 3
5033: ST_TO_ADDR
// if sr then
5034: LD_VAR 0 6
5038: IFFALSE 5094
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
5040: LD_VAR 0 2
5044: PUSH
5045: LD_INT 2
5047: ARRAY
5048: PPUSH
5049: LD_VAR 0 2
5053: PUSH
5054: LD_INT 3
5056: ARRAY
5057: PPUSH
5058: LD_VAR 0 6
5062: PPUSH
5063: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
5067: LD_VAR 0 2
5071: PUSH
5072: LD_INT 2
5074: ARRAY
5075: PPUSH
5076: LD_VAR 0 2
5080: PUSH
5081: LD_INT 3
5083: ARRAY
5084: PPUSH
5085: LD_VAR 0 5
5089: PPUSH
5090: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
5094: LD_ADDR_VAR 0 3
5098: PUSH
5099: LD_VAR 0 2
5103: PUSH
5104: LD_INT 2
5106: ARRAY
5107: PPUSH
5108: LD_VAR 0 2
5112: PUSH
5113: LD_INT 3
5115: ARRAY
5116: PPUSH
5117: LD_VAR 0 2
5121: PUSH
5122: LD_INT 4
5124: ARRAY
5125: PPUSH
5126: CALL_OW 47
5130: ST_TO_ADDR
// end ;
5131: GO 4901
5133: POP
5134: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
5135: LD_ADDR_VAR 0 7
5139: PUSH
5140: LD_INT 22
5142: PUSH
5143: LD_VAR 0 5
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: PUSH
5152: LD_INT 30
5154: PUSH
5155: LD_INT 1
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: PUSH
5162: EMPTY
5163: LIST
5164: LIST
5165: PPUSH
5166: CALL_OW 69
5170: ST_TO_ADDR
// if not depot then
5171: LD_VAR 0 7
5175: NOT
5176: IFFALSE 5180
// exit ;
5178: GO 5524
// base := PrepareBase ( HexInfo ( 84 , 128 ) , rus1Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5180: LD_ADDR_VAR 0 8
5184: PUSH
5185: LD_INT 84
5187: PPUSH
5188: LD_INT 128
5190: PPUSH
5191: CALL_OW 428
5195: PPUSH
5196: LD_INT 15
5198: PPUSH
5199: LD_INT 0
5201: PPUSH
5202: LD_INT 6
5204: PUSH
5205: LD_INT 7
5207: PUSH
5208: LD_INT 8
5210: PUSH
5211: EMPTY
5212: LIST
5213: LIST
5214: LIST
5215: PUSH
5216: LD_OWVAR 67
5220: ARRAY
5221: PPUSH
5222: LD_INT 3000
5224: PUSH
5225: LD_INT 300
5227: PUSH
5228: LD_INT 100
5230: PUSH
5231: EMPTY
5232: LIST
5233: LIST
5234: LIST
5235: PPUSH
5236: LD_INT 12
5238: PUSH
5239: LD_INT 6
5241: PUSH
5242: LD_INT 6
5244: PUSH
5245: LD_INT 4
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: LIST
5252: LIST
5253: PPUSH
5254: CALL 27634 0 6
5258: ST_TO_ADDR
// if not base then
5259: LD_VAR 0 8
5263: NOT
5264: IFFALSE 5268
// exit ;
5266: GO 5524
// mc_bases := Replace ( mc_bases , mc_rus_1 , base ) ;
5268: LD_ADDR_EXP 47
5272: PUSH
5273: LD_EXP 47
5277: PPUSH
5278: LD_EXP 7
5282: PPUSH
5283: LD_VAR 0 8
5287: PPUSH
5288: CALL_OW 1
5292: ST_TO_ADDR
// base := PrepareBase ( HexInfo ( 34 , 23 ) , rus2Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 20000 , 3000 , 1000 ] , [ 12 , 6 , 6 , 4 ] ) ;
5293: LD_ADDR_VAR 0 8
5297: PUSH
5298: LD_INT 34
5300: PPUSH
5301: LD_INT 23
5303: PPUSH
5304: CALL_OW 428
5308: PPUSH
5309: LD_INT 11
5311: PPUSH
5312: LD_INT 0
5314: PPUSH
5315: LD_INT 6
5317: PUSH
5318: LD_INT 7
5320: PUSH
5321: LD_INT 8
5323: PUSH
5324: EMPTY
5325: LIST
5326: LIST
5327: LIST
5328: PUSH
5329: LD_OWVAR 67
5333: ARRAY
5334: PPUSH
5335: LD_INT 20000
5337: PUSH
5338: LD_INT 3000
5340: PUSH
5341: LD_INT 1000
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: LIST
5348: PPUSH
5349: LD_INT 12
5351: PUSH
5352: LD_INT 6
5354: PUSH
5355: LD_INT 6
5357: PUSH
5358: LD_INT 4
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: LIST
5365: LIST
5366: PPUSH
5367: CALL 27634 0 6
5371: ST_TO_ADDR
// if not base then
5372: LD_VAR 0 8
5376: NOT
5377: IFFALSE 5381
// exit ;
5379: GO 5524
// mc_bases := Replace ( mc_bases , mc_rus_2 , base ) ;
5381: LD_ADDR_EXP 47
5385: PUSH
5386: LD_EXP 47
5390: PPUSH
5391: LD_EXP 8
5395: PPUSH
5396: LD_VAR 0 8
5400: PPUSH
5401: CALL_OW 1
5405: ST_TO_ADDR
// ruOutpost := PrepareBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] , ruOutpostArea , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 500 , 100 , 10 ] , [ [ 6 , 7 , 8 ] [ Difficulty ] , 2 , 0 , 1 ] ) ;
5406: LD_ADDR_EXP 14
5410: PUSH
5411: LD_INT 22
5413: PUSH
5414: LD_INT 3
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: PUSH
5421: LD_INT 30
5423: PUSH
5424: LD_INT 0
5426: PUSH
5427: EMPTY
5428: LIST
5429: LIST
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: PPUSH
5435: CALL_OW 69
5439: PUSH
5440: LD_INT 1
5442: ARRAY
5443: PPUSH
5444: LD_INT 25
5446: PPUSH
5447: LD_INT 0
5449: PPUSH
5450: LD_INT 6
5452: PUSH
5453: LD_INT 7
5455: PUSH
5456: LD_INT 8
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: LIST
5463: PUSH
5464: LD_OWVAR 67
5468: ARRAY
5469: PPUSH
5470: LD_INT 500
5472: PUSH
5473: LD_INT 100
5475: PUSH
5476: LD_INT 10
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: LIST
5483: PPUSH
5484: LD_INT 6
5486: PUSH
5487: LD_INT 7
5489: PUSH
5490: LD_INT 8
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: LIST
5497: PUSH
5498: LD_OWVAR 67
5502: ARRAY
5503: PUSH
5504: LD_INT 2
5506: PUSH
5507: LD_INT 0
5509: PUSH
5510: LD_INT 1
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: PPUSH
5519: CALL 27634 0 6
5523: ST_TO_ADDR
// end ;
5524: LD_VAR 0 1
5528: RET
// export function PrepareLegion ; var i , b , veh , tmp , tmp2 , cameras , side , sr , depot , base ; begin
5529: LD_INT 0
5531: PPUSH
5532: PPUSH
5533: PPUSH
5534: PPUSH
5535: PPUSH
5536: PPUSH
5537: PPUSH
5538: PPUSH
5539: PPUSH
5540: PPUSH
5541: PPUSH
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 0 , 0 , legApe , 0 ) ;
5542: LD_INT 0
5544: PPUSH
5545: LD_INT 0
5547: PPUSH
5548: LD_INT 6
5550: PPUSH
5551: LD_INT 0
5553: PPUSH
5554: LD_INT 0
5556: PPUSH
5557: LD_INT 0
5559: PPUSH
5560: LD_INT 0
5562: PPUSH
5563: LD_INT 8
5565: PPUSH
5566: LD_INT 0
5568: PPUSH
5569: CALL 52317 0 9
// side := 8 ;
5573: LD_ADDR_VAR 0 8
5577: PUSH
5578: LD_INT 8
5580: ST_TO_ADDR
// tmp := AreaToList ( minesArea , 0 ) ;
5581: LD_ADDR_VAR 0 5
5585: PUSH
5586: LD_INT 20
5588: PPUSH
5589: LD_INT 0
5591: PPUSH
5592: CALL_OW 517
5596: ST_TO_ADDR
// if Difficulty > 2 then
5597: LD_OWVAR 67
5601: PUSH
5602: LD_INT 2
5604: GREATER
5605: IFFALSE 5749
// begin tmp2 := AreaToList ( minesArea2 , 0 ) ;
5607: LD_ADDR_VAR 0 6
5611: PUSH
5612: LD_INT 27
5614: PPUSH
5615: LD_INT 0
5617: PPUSH
5618: CALL_OW 517
5622: ST_TO_ADDR
// for i = 1 to tmp2 [ 1 ] do
5623: LD_ADDR_VAR 0 2
5627: PUSH
5628: DOUBLE
5629: LD_INT 1
5631: DEC
5632: ST_TO_ADDR
5633: LD_VAR 0 6
5637: PUSH
5638: LD_INT 1
5640: ARRAY
5641: PUSH
5642: FOR_TO
5643: IFFALSE 5747
// begin tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , tmp2 [ 1 ] [ i ] ) ;
5645: LD_ADDR_VAR 0 5
5649: PUSH
5650: LD_VAR 0 5
5654: PPUSH
5655: LD_INT 1
5657: PUSH
5658: LD_VAR 0 5
5662: PUSH
5663: LD_INT 1
5665: ARRAY
5666: PUSH
5667: LD_INT 1
5669: PLUS
5670: PUSH
5671: EMPTY
5672: LIST
5673: LIST
5674: PPUSH
5675: LD_VAR 0 6
5679: PUSH
5680: LD_INT 1
5682: ARRAY
5683: PUSH
5684: LD_VAR 0 2
5688: ARRAY
5689: PPUSH
5690: CALL 24315 0 3
5694: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , tmp2 [ 2 ] [ i ] ) ;
5695: LD_ADDR_VAR 0 5
5699: PUSH
5700: LD_VAR 0 5
5704: PPUSH
5705: LD_INT 2
5707: PUSH
5708: LD_VAR 0 5
5712: PUSH
5713: LD_INT 2
5715: ARRAY
5716: PUSH
5717: LD_INT 1
5719: PLUS
5720: PUSH
5721: EMPTY
5722: LIST
5723: LIST
5724: PPUSH
5725: LD_VAR 0 6
5729: PUSH
5730: LD_INT 2
5732: ARRAY
5733: PUSH
5734: LD_VAR 0 2
5738: ARRAY
5739: PPUSH
5740: CALL 24315 0 3
5744: ST_TO_ADDR
// end ;
5745: GO 5642
5747: POP
5748: POP
// end ; if tmp then
5749: LD_VAR 0 5
5753: IFFALSE 5881
// begin for i = 1 to tmp [ 1 ] do
5755: LD_ADDR_VAR 0 2
5759: PUSH
5760: DOUBLE
5761: LD_INT 1
5763: DEC
5764: ST_TO_ADDR
5765: LD_VAR 0 5
5769: PUSH
5770: LD_INT 1
5772: ARRAY
5773: PUSH
5774: FOR_TO
5775: IFFALSE 5879
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side , 0 ) ;
5777: LD_VAR 0 5
5781: PUSH
5782: LD_INT 1
5784: ARRAY
5785: PUSH
5786: LD_VAR 0 2
5790: ARRAY
5791: PPUSH
5792: LD_VAR 0 5
5796: PUSH
5797: LD_INT 2
5799: ARRAY
5800: PUSH
5801: LD_VAR 0 2
5805: ARRAY
5806: PPUSH
5807: LD_VAR 0 8
5811: PPUSH
5812: LD_INT 0
5814: PPUSH
5815: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
5819: LD_ADDR_EXP 16
5823: PUSH
5824: LD_EXP 16
5828: PPUSH
5829: LD_EXP 16
5833: PUSH
5834: LD_INT 1
5836: PLUS
5837: PPUSH
5838: LD_VAR 0 5
5842: PUSH
5843: LD_INT 1
5845: ARRAY
5846: PUSH
5847: LD_VAR 0 2
5851: ARRAY
5852: PUSH
5853: LD_VAR 0 5
5857: PUSH
5858: LD_INT 2
5860: ARRAY
5861: PUSH
5862: LD_VAR 0 2
5866: ARRAY
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: PPUSH
5872: CALL_OW 2
5876: ST_TO_ADDR
// end ;
5877: GO 5774
5879: POP
5880: POP
// end ; cameras := [ [ 165 , 156 ] , [ 143 , 145 ] , [ 152 , 165 ] , [ 123 , 153 ] , [ 161 , 215 ] , [ 172 , 100 ] , [ 148 , 83 ] , [ 122 , 68 ] , [ 105 , 74 ] , [ 113 , 97 ] ] ;
5881: LD_ADDR_VAR 0 7
5885: PUSH
5886: LD_INT 165
5888: PUSH
5889: LD_INT 156
5891: PUSH
5892: EMPTY
5893: LIST
5894: LIST
5895: PUSH
5896: LD_INT 143
5898: PUSH
5899: LD_INT 145
5901: PUSH
5902: EMPTY
5903: LIST
5904: LIST
5905: PUSH
5906: LD_INT 152
5908: PUSH
5909: LD_INT 165
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PUSH
5916: LD_INT 123
5918: PUSH
5919: LD_INT 153
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: PUSH
5926: LD_INT 161
5928: PUSH
5929: LD_INT 215
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: PUSH
5936: LD_INT 172
5938: PUSH
5939: LD_INT 100
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PUSH
5946: LD_INT 148
5948: PUSH
5949: LD_INT 83
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PUSH
5956: LD_INT 122
5958: PUSH
5959: LD_INT 68
5961: PUSH
5962: EMPTY
5963: LIST
5964: LIST
5965: PUSH
5966: LD_INT 105
5968: PUSH
5969: LD_INT 74
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: PUSH
5976: LD_INT 113
5978: PUSH
5979: LD_INT 97
5981: PUSH
5982: EMPTY
5983: LIST
5984: LIST
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: ST_TO_ADDR
// for i in cameras do
5998: LD_ADDR_VAR 0 2
6002: PUSH
6003: LD_VAR 0 7
6007: PUSH
6008: FOR_IN
6009: IFFALSE 6040
// HiddenCamera ( i [ 1 ] , i [ 2 ] , side ) ;
6011: LD_VAR 0 2
6015: PUSH
6016: LD_INT 1
6018: ARRAY
6019: PPUSH
6020: LD_VAR 0 2
6024: PUSH
6025: LD_INT 2
6027: ARRAY
6028: PPUSH
6029: LD_VAR 0 8
6033: PPUSH
6034: CALL_OW 244
6038: GO 6008
6040: POP
6041: POP
// tmp := [ [ 1 , 144 , 110 , 1 , 0 , 0 ] , [ 3 , 151 , 118 , 0 , 0 , 0 ] , [ 8 , 158 , 110 , 4 , 10 , 15 ] , [ 23 , 154 , 121 , 5 , 0 , 0 ] , [ 22 , 155 , 118 , 4 , 0 , 0 ] , [ 21 , 151 , 122 , 0 , 0 , 0 ] , [ 18 , 148 , 118 , 1 , 0 , 0 ] , [ 17 , 147 , 114 , 2 , 0 , 0 ] , [ 29 , 163 , 120 , 5 , 0 , 0 ] , [ 27 , 137 , 116 , 3 , 0 , 0 ] , [ 27 , 133 , 111 , 1 , 0 , 0 ] , [ 27 , 132 , 106 , 4 , 0 , 0 ] , [ 26 , 137 , 111 , 0 , 0 , 0 ] , [ 8 , 141 , 117 , 1 , 13 , 11 ] , [ 30 , 140 , 128 , 1 , 0 , 0 ] , [ 5 , 146 , 96 , 3 , 0 , 0 ] , [ 32 , 150 , 98 , 3 , 0 , 0 ] , [ 32 , 142 , 95 , 3 , 0 , 0 ] , [ 32 , 159 , 104 , 3 , 0 , 0 ] , [ 32 , 133 , 95 , 3 , 0 , 0 ] , [ 32 , 131 , 102 , 2 , 0 , 0 ] , [ 32 , 164 , 144 , 0 , 0 , 0 ] , [ 32 , 146 , 139 , 0 , 0 , 0 ] , [ 26 , 143 , 122 , 4 , 0 , 0 ] , [ 26 , 164 , 116 , 2 , 0 , 0 ] , ] ;
6042: LD_ADDR_VAR 0 5
6046: PUSH
6047: LD_INT 1
6049: PUSH
6050: LD_INT 144
6052: PUSH
6053: LD_INT 110
6055: PUSH
6056: LD_INT 1
6058: PUSH
6059: LD_INT 0
6061: PUSH
6062: LD_INT 0
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: PUSH
6073: LD_INT 3
6075: PUSH
6076: LD_INT 151
6078: PUSH
6079: LD_INT 118
6081: PUSH
6082: LD_INT 0
6084: PUSH
6085: LD_INT 0
6087: PUSH
6088: LD_INT 0
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: PUSH
6099: LD_INT 8
6101: PUSH
6102: LD_INT 158
6104: PUSH
6105: LD_INT 110
6107: PUSH
6108: LD_INT 4
6110: PUSH
6111: LD_INT 10
6113: PUSH
6114: LD_INT 15
6116: PUSH
6117: EMPTY
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: PUSH
6125: LD_INT 23
6127: PUSH
6128: LD_INT 154
6130: PUSH
6131: LD_INT 121
6133: PUSH
6134: LD_INT 5
6136: PUSH
6137: LD_INT 0
6139: PUSH
6140: LD_INT 0
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: PUSH
6151: LD_INT 22
6153: PUSH
6154: LD_INT 155
6156: PUSH
6157: LD_INT 118
6159: PUSH
6160: LD_INT 4
6162: PUSH
6163: LD_INT 0
6165: PUSH
6166: LD_INT 0
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: PUSH
6177: LD_INT 21
6179: PUSH
6180: LD_INT 151
6182: PUSH
6183: LD_INT 122
6185: PUSH
6186: LD_INT 0
6188: PUSH
6189: LD_INT 0
6191: PUSH
6192: LD_INT 0
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: PUSH
6203: LD_INT 18
6205: PUSH
6206: LD_INT 148
6208: PUSH
6209: LD_INT 118
6211: PUSH
6212: LD_INT 1
6214: PUSH
6215: LD_INT 0
6217: PUSH
6218: LD_INT 0
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: PUSH
6229: LD_INT 17
6231: PUSH
6232: LD_INT 147
6234: PUSH
6235: LD_INT 114
6237: PUSH
6238: LD_INT 2
6240: PUSH
6241: LD_INT 0
6243: PUSH
6244: LD_INT 0
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 29
6257: PUSH
6258: LD_INT 163
6260: PUSH
6261: LD_INT 120
6263: PUSH
6264: LD_INT 5
6266: PUSH
6267: LD_INT 0
6269: PUSH
6270: LD_INT 0
6272: PUSH
6273: EMPTY
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: PUSH
6281: LD_INT 27
6283: PUSH
6284: LD_INT 137
6286: PUSH
6287: LD_INT 116
6289: PUSH
6290: LD_INT 3
6292: PUSH
6293: LD_INT 0
6295: PUSH
6296: LD_INT 0
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: PUSH
6307: LD_INT 27
6309: PUSH
6310: LD_INT 133
6312: PUSH
6313: LD_INT 111
6315: PUSH
6316: LD_INT 1
6318: PUSH
6319: LD_INT 0
6321: PUSH
6322: LD_INT 0
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: PUSH
6333: LD_INT 27
6335: PUSH
6336: LD_INT 132
6338: PUSH
6339: LD_INT 106
6341: PUSH
6342: LD_INT 4
6344: PUSH
6345: LD_INT 0
6347: PUSH
6348: LD_INT 0
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: PUSH
6359: LD_INT 26
6361: PUSH
6362: LD_INT 137
6364: PUSH
6365: LD_INT 111
6367: PUSH
6368: LD_INT 0
6370: PUSH
6371: LD_INT 0
6373: PUSH
6374: LD_INT 0
6376: PUSH
6377: EMPTY
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: PUSH
6385: LD_INT 8
6387: PUSH
6388: LD_INT 141
6390: PUSH
6391: LD_INT 117
6393: PUSH
6394: LD_INT 1
6396: PUSH
6397: LD_INT 13
6399: PUSH
6400: LD_INT 11
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: PUSH
6411: LD_INT 30
6413: PUSH
6414: LD_INT 140
6416: PUSH
6417: LD_INT 128
6419: PUSH
6420: LD_INT 1
6422: PUSH
6423: LD_INT 0
6425: PUSH
6426: LD_INT 0
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: PUSH
6437: LD_INT 5
6439: PUSH
6440: LD_INT 146
6442: PUSH
6443: LD_INT 96
6445: PUSH
6446: LD_INT 3
6448: PUSH
6449: LD_INT 0
6451: PUSH
6452: LD_INT 0
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: PUSH
6463: LD_INT 32
6465: PUSH
6466: LD_INT 150
6468: PUSH
6469: LD_INT 98
6471: PUSH
6472: LD_INT 3
6474: PUSH
6475: LD_INT 0
6477: PUSH
6478: LD_INT 0
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: PUSH
6489: LD_INT 32
6491: PUSH
6492: LD_INT 142
6494: PUSH
6495: LD_INT 95
6497: PUSH
6498: LD_INT 3
6500: PUSH
6501: LD_INT 0
6503: PUSH
6504: LD_INT 0
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: PUSH
6515: LD_INT 32
6517: PUSH
6518: LD_INT 159
6520: PUSH
6521: LD_INT 104
6523: PUSH
6524: LD_INT 3
6526: PUSH
6527: LD_INT 0
6529: PUSH
6530: LD_INT 0
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: LIST
6540: PUSH
6541: LD_INT 32
6543: PUSH
6544: LD_INT 133
6546: PUSH
6547: LD_INT 95
6549: PUSH
6550: LD_INT 3
6552: PUSH
6553: LD_INT 0
6555: PUSH
6556: LD_INT 0
6558: PUSH
6559: EMPTY
6560: LIST
6561: LIST
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: PUSH
6567: LD_INT 32
6569: PUSH
6570: LD_INT 131
6572: PUSH
6573: LD_INT 102
6575: PUSH
6576: LD_INT 2
6578: PUSH
6579: LD_INT 0
6581: PUSH
6582: LD_INT 0
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: PUSH
6593: LD_INT 32
6595: PUSH
6596: LD_INT 164
6598: PUSH
6599: LD_INT 144
6601: PUSH
6602: LD_INT 0
6604: PUSH
6605: LD_INT 0
6607: PUSH
6608: LD_INT 0
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 32
6621: PUSH
6622: LD_INT 146
6624: PUSH
6625: LD_INT 139
6627: PUSH
6628: LD_INT 0
6630: PUSH
6631: LD_INT 0
6633: PUSH
6634: LD_INT 0
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: PUSH
6645: LD_INT 26
6647: PUSH
6648: LD_INT 143
6650: PUSH
6651: LD_INT 122
6653: PUSH
6654: LD_INT 4
6656: PUSH
6657: LD_INT 0
6659: PUSH
6660: LD_INT 0
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: PUSH
6671: LD_INT 26
6673: PUSH
6674: LD_INT 164
6676: PUSH
6677: LD_INT 116
6679: PUSH
6680: LD_INT 2
6682: PUSH
6683: LD_INT 0
6685: PUSH
6686: LD_INT 0
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: PUSH
6697: EMPTY
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: ST_TO_ADDR
// for i in tmp do
6724: LD_ADDR_VAR 0 2
6728: PUSH
6729: LD_VAR 0 5
6733: PUSH
6734: FOR_IN
6735: IFFALSE 6966
// begin uc_side := side ;
6737: LD_ADDR_OWVAR 20
6741: PUSH
6742: LD_VAR 0 8
6746: ST_TO_ADDR
// uc_nation := nation_arabian ;
6747: LD_ADDR_OWVAR 21
6751: PUSH
6752: LD_INT 2
6754: ST_TO_ADDR
// bc_type := i [ 1 ] ;
6755: LD_ADDR_OWVAR 42
6759: PUSH
6760: LD_VAR 0 2
6764: PUSH
6765: LD_INT 1
6767: ARRAY
6768: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
6769: LD_ADDR_OWVAR 43
6773: PUSH
6774: LD_INT 5
6776: PPUSH
6777: LD_INT 6
6779: PPUSH
6780: CALL_OW 12
6784: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
6785: LD_ADDR_OWVAR 44
6789: PUSH
6790: LD_VAR 0 2
6794: PUSH
6795: LD_INT 5
6797: ARRAY
6798: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
6799: LD_ADDR_OWVAR 45
6803: PUSH
6804: LD_VAR 0 2
6808: PUSH
6809: LD_INT 6
6811: ARRAY
6812: ST_TO_ADDR
// sr := 0 ;
6813: LD_ADDR_VAR 0 9
6817: PUSH
6818: LD_INT 0
6820: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
6821: LD_VAR 0 2
6825: PUSH
6826: LD_INT 1
6828: ARRAY
6829: PUSH
6830: LD_INT 29
6832: EQUAL
6833: IFFALSE 6845
// sr := mat_oil else
6835: LD_ADDR_VAR 0 9
6839: PUSH
6840: LD_INT 2
6842: ST_TO_ADDR
6843: GO 6867
// if i [ 1 ] = b_siberite_mine then
6845: LD_VAR 0 2
6849: PUSH
6850: LD_INT 1
6852: ARRAY
6853: PUSH
6854: LD_INT 30
6856: EQUAL
6857: IFFALSE 6867
// sr := mat_siberit ;
6859: LD_ADDR_VAR 0 9
6863: PUSH
6864: LD_INT 3
6866: ST_TO_ADDR
// if sr then
6867: LD_VAR 0 9
6871: IFFALSE 6927
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
6873: LD_VAR 0 2
6877: PUSH
6878: LD_INT 2
6880: ARRAY
6881: PPUSH
6882: LD_VAR 0 2
6886: PUSH
6887: LD_INT 3
6889: ARRAY
6890: PPUSH
6891: LD_VAR 0 9
6895: PPUSH
6896: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
6900: LD_VAR 0 2
6904: PUSH
6905: LD_INT 2
6907: ARRAY
6908: PPUSH
6909: LD_VAR 0 2
6913: PUSH
6914: LD_INT 3
6916: ARRAY
6917: PPUSH
6918: LD_VAR 0 8
6922: PPUSH
6923: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
6927: LD_ADDR_VAR 0 3
6931: PUSH
6932: LD_VAR 0 2
6936: PUSH
6937: LD_INT 2
6939: ARRAY
6940: PPUSH
6941: LD_VAR 0 2
6945: PUSH
6946: LD_INT 3
6948: ARRAY
6949: PPUSH
6950: LD_VAR 0 2
6954: PUSH
6955: LD_INT 4
6957: ARRAY
6958: PPUSH
6959: CALL_OW 47
6963: ST_TO_ADDR
// end ;
6964: GO 6734
6966: POP
6967: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6968: LD_ADDR_VAR 0 10
6972: PUSH
6973: LD_INT 22
6975: PUSH
6976: LD_VAR 0 8
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: PUSH
6985: LD_INT 30
6987: PUSH
6988: LD_INT 1
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: PPUSH
6999: CALL_OW 69
7003: ST_TO_ADDR
// if not depot then
7004: LD_VAR 0 10
7008: NOT
7009: IFFALSE 7013
// exit ;
7011: GO 7259
// base := PrepareBase ( depot [ 1 ] , legBase , 0 , [ 7 , 8 , 10 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 14 , 6 , 6 , 5 ] ) ;
7013: LD_ADDR_VAR 0 11
7017: PUSH
7018: LD_VAR 0 10
7022: PUSH
7023: LD_INT 1
7025: ARRAY
7026: PPUSH
7027: LD_INT 6
7029: PPUSH
7030: LD_INT 0
7032: PPUSH
7033: LD_INT 7
7035: PUSH
7036: LD_INT 8
7038: PUSH
7039: LD_INT 10
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: LIST
7046: PUSH
7047: LD_OWVAR 67
7051: ARRAY
7052: PPUSH
7053: LD_INT 3000
7055: PUSH
7056: LD_INT 300
7058: PUSH
7059: LD_INT 100
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: LIST
7066: PPUSH
7067: LD_INT 14
7069: PUSH
7070: LD_INT 6
7072: PUSH
7073: LD_INT 6
7075: PUSH
7076: LD_INT 5
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: PPUSH
7085: CALL 27634 0 6
7089: ST_TO_ADDR
// if not base then
7090: LD_VAR 0 11
7094: NOT
7095: IFFALSE 7099
// exit ;
7097: GO 7259
// if Difficulty > 1 then
7099: LD_OWVAR 67
7103: PUSH
7104: LD_INT 1
7106: GREATER
7107: IFFALSE 7180
// begin InitHc ;
7109: CALL_OW 19
// PrepareHuman ( sex_male , class_sniper , [ 5 , 8 ] [ Difficulty - 1 ] ) ;
7113: LD_INT 1
7115: PPUSH
7116: LD_INT 5
7118: PPUSH
7119: LD_INT 5
7121: PUSH
7122: LD_INT 8
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PUSH
7129: LD_OWVAR 67
7133: PUSH
7134: LD_INT 1
7136: MINUS
7137: ARRAY
7138: PPUSH
7139: CALL_OW 380
// for i = 1 to Difficulty do
7143: LD_ADDR_VAR 0 2
7147: PUSH
7148: DOUBLE
7149: LD_INT 1
7151: DEC
7152: ST_TO_ADDR
7153: LD_OWVAR 67
7157: PUSH
7158: FOR_TO
7159: IFFALSE 7178
// PlaceUnitArea ( CreateHuman , sniperGuardArea , false ) ;
7161: CALL_OW 44
7165: PPUSH
7166: LD_INT 24
7168: PPUSH
7169: LD_INT 0
7171: PPUSH
7172: CALL_OW 49
7176: GO 7158
7178: POP
7179: POP
// end ; mc_bases := Replace ( mc_bases , mc_leg , base ) ;
7180: LD_ADDR_EXP 47
7184: PUSH
7185: LD_EXP 47
7189: PPUSH
7190: LD_EXP 6
7194: PPUSH
7195: LD_VAR 0 11
7199: PPUSH
7200: CALL_OW 1
7204: ST_TO_ADDR
// hc_gallery := ru ;
7205: LD_ADDR_OWVAR 33
7209: PUSH
7210: LD_STRING ru
7212: ST_TO_ADDR
// hc_face_number := 44 ;
7213: LD_ADDR_OWVAR 34
7217: PUSH
7218: LD_INT 44
7220: ST_TO_ADDR
// hc_name := Robert Farmer ;
7221: LD_ADDR_OWVAR 26
7225: PUSH
7226: LD_STRING Robert Farmer
7228: ST_TO_ADDR
// hc_sex := sex_male ;
7229: LD_ADDR_OWVAR 27
7233: PUSH
7234: LD_INT 1
7236: ST_TO_ADDR
// hc_class := 1 ;
7237: LD_ADDR_OWVAR 28
7241: PUSH
7242: LD_INT 1
7244: ST_TO_ADDR
// Farmer := CreateHuman ;
7245: LD_ADDR_EXP 13
7249: PUSH
7250: CALL_OW 44
7254: ST_TO_ADDR
// InitHc ;
7255: CALL_OW 19
// end ;
7259: LD_VAR 0 1
7263: RET
// export function PrepareAmericans ; var i , b , tmp , side , sr , base , depot ; begin
7264: LD_INT 0
7266: PPUSH
7267: PPUSH
7268: PPUSH
7269: PPUSH
7270: PPUSH
7271: PPUSH
7272: PPUSH
7273: PPUSH
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , amerApe , 0 ) ;
7274: LD_INT 0
7276: PPUSH
7277: LD_INT 0
7279: PPUSH
7280: LD_INT 4
7282: PPUSH
7283: LD_INT 0
7285: PPUSH
7286: LD_INT 0
7288: PPUSH
7289: LD_INT 0
7291: PPUSH
7292: LD_INT 0
7294: PPUSH
7295: LD_INT 10
7297: PPUSH
7298: LD_INT 0
7300: PPUSH
7301: CALL 52317 0 9
// side := 4 ;
7305: LD_ADDR_VAR 0 5
7309: PUSH
7310: LD_INT 4
7312: ST_TO_ADDR
// tmp := [ [ 1 , 144 , 18 , 4 , 0 , 0 ] , [ 3 , 137 , 8 , 4 , 0 , 0 ] , [ 22 , 141 , 8 , 4 , 0 , 0 ] , [ 25 , 137 , 5 , 3 , 0 , 0 ] , [ 18 , 137 , 12 , 0 , 0 , 0 ] , [ 17 , 133 , 4 , 2 , 0 , 0 ] , [ 16 , 140 , 11 , 5 , 0 , 0 ] , [ 8 , 149 , 26 , 4 , 10 , 15 ] , [ 8 , 142 , 26 , 1 , 11 , 12 ] , [ 27 , 153 , 32 , 5 , 0 , 0 ] , [ 27 , 145 , 32 , 3 , 0 , 0 ] , [ 27 , 138 , 2 , 4 , 0 , 0 ] , [ 27 , 144 , 13 , 0 , 0 , 0 ] , [ 26 , 124 , 2 , 4 , 0 , 0 ] , [ 26 , 121 , 2 , 2 , 0 , 0 ] , [ 26 , 118 , 2 , 1 , 0 , 0 ] , [ 29 , 159 , 47 , 2 , 0 , 0 ] , [ 32 , 146 , 41 , 0 , 0 , 0 ] , [ 33 , 136 , 37 , 0 , 0 , 0 ] , [ 33 , 132 , 34 , 0 , 0 , 0 ] , [ 36 , 124 , 7 , 1 , 0 , 0 ] , [ 5 , 124 , 19 , 0 , 0 , 0 ] , [ 32 , 127 , 23 , 0 , 0 , 0 ] ] ;
7313: LD_ADDR_VAR 0 4
7317: PUSH
7318: LD_INT 1
7320: PUSH
7321: LD_INT 144
7323: PUSH
7324: LD_INT 18
7326: PUSH
7327: LD_INT 4
7329: PUSH
7330: LD_INT 0
7332: PUSH
7333: LD_INT 0
7335: PUSH
7336: EMPTY
7337: LIST
7338: LIST
7339: LIST
7340: LIST
7341: LIST
7342: LIST
7343: PUSH
7344: LD_INT 3
7346: PUSH
7347: LD_INT 137
7349: PUSH
7350: LD_INT 8
7352: PUSH
7353: LD_INT 4
7355: PUSH
7356: LD_INT 0
7358: PUSH
7359: LD_INT 0
7361: PUSH
7362: EMPTY
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: PUSH
7370: LD_INT 22
7372: PUSH
7373: LD_INT 141
7375: PUSH
7376: LD_INT 8
7378: PUSH
7379: LD_INT 4
7381: PUSH
7382: LD_INT 0
7384: PUSH
7385: LD_INT 0
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: PUSH
7396: LD_INT 25
7398: PUSH
7399: LD_INT 137
7401: PUSH
7402: LD_INT 5
7404: PUSH
7405: LD_INT 3
7407: PUSH
7408: LD_INT 0
7410: PUSH
7411: LD_INT 0
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: PUSH
7422: LD_INT 18
7424: PUSH
7425: LD_INT 137
7427: PUSH
7428: LD_INT 12
7430: PUSH
7431: LD_INT 0
7433: PUSH
7434: LD_INT 0
7436: PUSH
7437: LD_INT 0
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: PUSH
7448: LD_INT 17
7450: PUSH
7451: LD_INT 133
7453: PUSH
7454: LD_INT 4
7456: PUSH
7457: LD_INT 2
7459: PUSH
7460: LD_INT 0
7462: PUSH
7463: LD_INT 0
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: PUSH
7474: LD_INT 16
7476: PUSH
7477: LD_INT 140
7479: PUSH
7480: LD_INT 11
7482: PUSH
7483: LD_INT 5
7485: PUSH
7486: LD_INT 0
7488: PUSH
7489: LD_INT 0
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: PUSH
7500: LD_INT 8
7502: PUSH
7503: LD_INT 149
7505: PUSH
7506: LD_INT 26
7508: PUSH
7509: LD_INT 4
7511: PUSH
7512: LD_INT 10
7514: PUSH
7515: LD_INT 15
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: PUSH
7526: LD_INT 8
7528: PUSH
7529: LD_INT 142
7531: PUSH
7532: LD_INT 26
7534: PUSH
7535: LD_INT 1
7537: PUSH
7538: LD_INT 11
7540: PUSH
7541: LD_INT 12
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: PUSH
7552: LD_INT 27
7554: PUSH
7555: LD_INT 153
7557: PUSH
7558: LD_INT 32
7560: PUSH
7561: LD_INT 5
7563: PUSH
7564: LD_INT 0
7566: PUSH
7567: LD_INT 0
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: PUSH
7578: LD_INT 27
7580: PUSH
7581: LD_INT 145
7583: PUSH
7584: LD_INT 32
7586: PUSH
7587: LD_INT 3
7589: PUSH
7590: LD_INT 0
7592: PUSH
7593: LD_INT 0
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: PUSH
7604: LD_INT 27
7606: PUSH
7607: LD_INT 138
7609: PUSH
7610: LD_INT 2
7612: PUSH
7613: LD_INT 4
7615: PUSH
7616: LD_INT 0
7618: PUSH
7619: LD_INT 0
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: PUSH
7630: LD_INT 27
7632: PUSH
7633: LD_INT 144
7635: PUSH
7636: LD_INT 13
7638: PUSH
7639: LD_INT 0
7641: PUSH
7642: LD_INT 0
7644: PUSH
7645: LD_INT 0
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: PUSH
7656: LD_INT 26
7658: PUSH
7659: LD_INT 124
7661: PUSH
7662: LD_INT 2
7664: PUSH
7665: LD_INT 4
7667: PUSH
7668: LD_INT 0
7670: PUSH
7671: LD_INT 0
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: PUSH
7682: LD_INT 26
7684: PUSH
7685: LD_INT 121
7687: PUSH
7688: LD_INT 2
7690: PUSH
7691: LD_INT 2
7693: PUSH
7694: LD_INT 0
7696: PUSH
7697: LD_INT 0
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: PUSH
7708: LD_INT 26
7710: PUSH
7711: LD_INT 118
7713: PUSH
7714: LD_INT 2
7716: PUSH
7717: LD_INT 1
7719: PUSH
7720: LD_INT 0
7722: PUSH
7723: LD_INT 0
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: PUSH
7734: LD_INT 29
7736: PUSH
7737: LD_INT 159
7739: PUSH
7740: LD_INT 47
7742: PUSH
7743: LD_INT 2
7745: PUSH
7746: LD_INT 0
7748: PUSH
7749: LD_INT 0
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: PUSH
7760: LD_INT 32
7762: PUSH
7763: LD_INT 146
7765: PUSH
7766: LD_INT 41
7768: PUSH
7769: LD_INT 0
7771: PUSH
7772: LD_INT 0
7774: PUSH
7775: LD_INT 0
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: PUSH
7786: LD_INT 33
7788: PUSH
7789: LD_INT 136
7791: PUSH
7792: LD_INT 37
7794: PUSH
7795: LD_INT 0
7797: PUSH
7798: LD_INT 0
7800: PUSH
7801: LD_INT 0
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: PUSH
7812: LD_INT 33
7814: PUSH
7815: LD_INT 132
7817: PUSH
7818: LD_INT 34
7820: PUSH
7821: LD_INT 0
7823: PUSH
7824: LD_INT 0
7826: PUSH
7827: LD_INT 0
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: PUSH
7838: LD_INT 36
7840: PUSH
7841: LD_INT 124
7843: PUSH
7844: LD_INT 7
7846: PUSH
7847: LD_INT 1
7849: PUSH
7850: LD_INT 0
7852: PUSH
7853: LD_INT 0
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: PUSH
7864: LD_INT 5
7866: PUSH
7867: LD_INT 124
7869: PUSH
7870: LD_INT 19
7872: PUSH
7873: LD_INT 0
7875: PUSH
7876: LD_INT 0
7878: PUSH
7879: LD_INT 0
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 32
7892: PUSH
7893: LD_INT 127
7895: PUSH
7896: LD_INT 23
7898: PUSH
7899: LD_INT 0
7901: PUSH
7902: LD_INT 0
7904: PUSH
7905: LD_INT 0
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: ST_TO_ADDR
// for i in tmp do
7941: LD_ADDR_VAR 0 2
7945: PUSH
7946: LD_VAR 0 4
7950: PUSH
7951: FOR_IN
7952: IFFALSE 8183
// begin uc_side := side ;
7954: LD_ADDR_OWVAR 20
7958: PUSH
7959: LD_VAR 0 5
7963: ST_TO_ADDR
// uc_nation := nation_american ;
7964: LD_ADDR_OWVAR 21
7968: PUSH
7969: LD_INT 1
7971: ST_TO_ADDR
// bc_type := i [ 1 ] ;
7972: LD_ADDR_OWVAR 42
7976: PUSH
7977: LD_VAR 0 2
7981: PUSH
7982: LD_INT 1
7984: ARRAY
7985: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
7986: LD_ADDR_OWVAR 43
7990: PUSH
7991: LD_INT 5
7993: PPUSH
7994: LD_INT 6
7996: PPUSH
7997: CALL_OW 12
8001: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
8002: LD_ADDR_OWVAR 44
8006: PUSH
8007: LD_VAR 0 2
8011: PUSH
8012: LD_INT 5
8014: ARRAY
8015: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
8016: LD_ADDR_OWVAR 45
8020: PUSH
8021: LD_VAR 0 2
8025: PUSH
8026: LD_INT 6
8028: ARRAY
8029: ST_TO_ADDR
// sr := 0 ;
8030: LD_ADDR_VAR 0 6
8034: PUSH
8035: LD_INT 0
8037: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
8038: LD_VAR 0 2
8042: PUSH
8043: LD_INT 1
8045: ARRAY
8046: PUSH
8047: LD_INT 29
8049: EQUAL
8050: IFFALSE 8062
// sr := mat_oil else
8052: LD_ADDR_VAR 0 6
8056: PUSH
8057: LD_INT 2
8059: ST_TO_ADDR
8060: GO 8084
// if i [ 1 ] = b_siberite_mine then
8062: LD_VAR 0 2
8066: PUSH
8067: LD_INT 1
8069: ARRAY
8070: PUSH
8071: LD_INT 30
8073: EQUAL
8074: IFFALSE 8084
// sr := mat_siberit ;
8076: LD_ADDR_VAR 0 6
8080: PUSH
8081: LD_INT 3
8083: ST_TO_ADDR
// if sr then
8084: LD_VAR 0 6
8088: IFFALSE 8144
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
8090: LD_VAR 0 2
8094: PUSH
8095: LD_INT 2
8097: ARRAY
8098: PPUSH
8099: LD_VAR 0 2
8103: PUSH
8104: LD_INT 3
8106: ARRAY
8107: PPUSH
8108: LD_VAR 0 6
8112: PPUSH
8113: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
8117: LD_VAR 0 2
8121: PUSH
8122: LD_INT 2
8124: ARRAY
8125: PPUSH
8126: LD_VAR 0 2
8130: PUSH
8131: LD_INT 3
8133: ARRAY
8134: PPUSH
8135: LD_VAR 0 5
8139: PPUSH
8140: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
8144: LD_ADDR_VAR 0 3
8148: PUSH
8149: LD_VAR 0 2
8153: PUSH
8154: LD_INT 2
8156: ARRAY
8157: PPUSH
8158: LD_VAR 0 2
8162: PUSH
8163: LD_INT 3
8165: ARRAY
8166: PPUSH
8167: LD_VAR 0 2
8171: PUSH
8172: LD_INT 4
8174: ARRAY
8175: PPUSH
8176: CALL_OW 47
8180: ST_TO_ADDR
// end ;
8181: GO 7951
8183: POP
8184: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
8185: LD_ADDR_VAR 0 8
8189: PUSH
8190: LD_INT 22
8192: PUSH
8193: LD_VAR 0 5
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: PUSH
8202: LD_INT 30
8204: PUSH
8205: LD_INT 1
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: PUSH
8212: EMPTY
8213: LIST
8214: LIST
8215: PPUSH
8216: CALL_OW 69
8220: ST_TO_ADDR
// if not depot then
8221: LD_VAR 0 8
8225: NOT
8226: IFFALSE 8230
// exit ;
8228: GO 8502
// base := PrepareBase ( depot [ 1 ] , amerBase , theta3 , [ 8 , 7 , 6 ] [ Difficulty ] , [ [ 2500 , 2000 , 1750 ] [ Difficulty ] , [ 300 , 250 , 200 ] [ Difficulty ] , [ 80 , 60 , 50 ] [ Difficulty ] ] , [ 7 , 6 , 5 , 5 ] ) ;
8230: LD_ADDR_VAR 0 7
8234: PUSH
8235: LD_VAR 0 8
8239: PUSH
8240: LD_INT 1
8242: ARRAY
8243: PPUSH
8244: LD_INT 3
8246: PPUSH
8247: LD_STRING theta3
8249: PPUSH
8250: LD_INT 8
8252: PUSH
8253: LD_INT 7
8255: PUSH
8256: LD_INT 6
8258: PUSH
8259: EMPTY
8260: LIST
8261: LIST
8262: LIST
8263: PUSH
8264: LD_OWVAR 67
8268: ARRAY
8269: PPUSH
8270: LD_INT 2500
8272: PUSH
8273: LD_INT 2000
8275: PUSH
8276: LD_INT 1750
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: LIST
8283: PUSH
8284: LD_OWVAR 67
8288: ARRAY
8289: PUSH
8290: LD_INT 300
8292: PUSH
8293: LD_INT 250
8295: PUSH
8296: LD_INT 200
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: LIST
8303: PUSH
8304: LD_OWVAR 67
8308: ARRAY
8309: PUSH
8310: LD_INT 80
8312: PUSH
8313: LD_INT 60
8315: PUSH
8316: LD_INT 50
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: LIST
8323: PUSH
8324: LD_OWVAR 67
8328: ARRAY
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: LIST
8334: PPUSH
8335: LD_INT 7
8337: PUSH
8338: LD_INT 6
8340: PUSH
8341: LD_INT 5
8343: PUSH
8344: LD_INT 5
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: PPUSH
8353: CALL 27634 0 6
8357: ST_TO_ADDR
// if not base then
8358: LD_VAR 0 7
8362: NOT
8363: IFFALSE 8367
// exit ;
8365: GO 8502
// mc_bases := Replace ( mc_bases , mc_amer , base ) ;
8367: LD_ADDR_EXP 47
8371: PUSH
8372: LD_EXP 47
8376: PPUSH
8377: LD_EXP 5
8381: PPUSH
8382: LD_VAR 0 7
8386: PPUSH
8387: CALL_OW 1
8391: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
8392: LD_INT 1
8394: PPUSH
8395: LD_INT 1
8397: PPUSH
8398: LD_INT 7
8400: PPUSH
8401: CALL_OW 380
// allyCommander := CreateHuman ;
8405: LD_ADDR_EXP 11
8409: PUSH
8410: CALL_OW 44
8414: ST_TO_ADDR
// PlaceUnitXY ( allyCommander , 139 , 15 , false ) ;
8415: LD_EXP 11
8419: PPUSH
8420: LD_INT 139
8422: PPUSH
8423: LD_INT 15
8425: PPUSH
8426: LD_INT 0
8428: PPUSH
8429: CALL_OW 48
// ComTurnXY ( allyCommander , 137 , 15 ) ;
8433: LD_EXP 11
8437: PPUSH
8438: LD_INT 137
8440: PPUSH
8441: LD_INT 15
8443: PPUSH
8444: CALL_OW 118
// hc_gallery := us ;
8448: LD_ADDR_OWVAR 33
8452: PUSH
8453: LD_STRING us
8455: ST_TO_ADDR
// hc_face_number := 7 ;
8456: LD_ADDR_OWVAR 34
8460: PUSH
8461: LD_INT 7
8463: ST_TO_ADDR
// hc_name := Arthur Powell ;
8464: LD_ADDR_OWVAR 26
8468: PUSH
8469: LD_STRING Arthur Powell
8471: ST_TO_ADDR
// hc_sex := sex_male ;
8472: LD_ADDR_OWVAR 27
8476: PUSH
8477: LD_INT 1
8479: ST_TO_ADDR
// hc_class := 1 ;
8480: LD_ADDR_OWVAR 28
8484: PUSH
8485: LD_INT 1
8487: ST_TO_ADDR
// Powell := CreateHuman ;
8488: LD_ADDR_EXP 12
8492: PUSH
8493: CALL_OW 44
8497: ST_TO_ADDR
// InitHc ;
8498: CALL_OW 19
// end ;
8502: LD_VAR 0 1
8506: RET
// export function PreparePlayer ; var i , side , techs , tanks , cl , chassis , engines , weapons ; begin
8507: LD_INT 0
8509: PPUSH
8510: PPUSH
8511: PPUSH
8512: PPUSH
8513: PPUSH
8514: PPUSH
8515: PPUSH
8516: PPUSH
8517: PPUSH
// side := 1 ;
8518: LD_ADDR_VAR 0 3
8522: PUSH
8523: LD_INT 1
8525: ST_TO_ADDR
// result := [ [ ] , [ ] ] ;
8526: LD_ADDR_VAR 0 1
8530: PUSH
8531: EMPTY
8532: PUSH
8533: EMPTY
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: ST_TO_ADDR
// uc_side := side ;
8539: LD_ADDR_OWVAR 20
8543: PUSH
8544: LD_VAR 0 3
8548: ST_TO_ADDR
// uc_nation := nation_american ;
8549: LD_ADDR_OWVAR 21
8553: PUSH
8554: LD_INT 1
8556: ST_TO_ADDR
// InitHc ;
8557: CALL_OW 19
// InitVc ;
8561: CALL_OW 20
// hc_importance := 0 ;
8565: LD_ADDR_OWVAR 32
8569: PUSH
8570: LD_INT 0
8572: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked ] ;
8573: LD_ADDR_VAR 0 7
8577: PUSH
8578: LD_INT 2
8580: PUSH
8581: LD_INT 3
8583: PUSH
8584: LD_INT 3
8586: PUSH
8587: EMPTY
8588: LIST
8589: LIST
8590: LIST
8591: ST_TO_ADDR
// if commander = 2 then
8592: LD_EXP 25
8596: PUSH
8597: LD_INT 2
8599: EQUAL
8600: IFFALSE 8621
// chassis := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] ;
8602: LD_ADDR_VAR 0 7
8606: PUSH
8607: LD_INT 3
8609: PUSH
8610: LD_INT 4
8612: PUSH
8613: LD_INT 4
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: LIST
8620: ST_TO_ADDR
// if commander = 3 then
8621: LD_EXP 25
8625: PUSH
8626: LD_INT 3
8628: EQUAL
8629: IFFALSE 8650
// chassis := [ us_medium_wheeled , us_morphling , us_morphling ] ;
8631: LD_ADDR_VAR 0 7
8635: PUSH
8636: LD_INT 2
8638: PUSH
8639: LD_INT 5
8641: PUSH
8642: LD_INT 5
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: LIST
8649: ST_TO_ADDR
// engines := [ engine_solar , engine_solar , engine_combustion ] ;
8650: LD_ADDR_VAR 0 8
8654: PUSH
8655: LD_INT 2
8657: PUSH
8658: LD_INT 2
8660: PUSH
8661: LD_INT 1
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: LIST
8668: ST_TO_ADDR
// if commander = 2 then
8669: LD_EXP 25
8673: PUSH
8674: LD_INT 2
8676: EQUAL
8677: IFFALSE 8698
// engines := [ engine_combustion , engine_combustion , engine_siberite ] ;
8679: LD_ADDR_VAR 0 8
8683: PUSH
8684: LD_INT 1
8686: PUSH
8687: LD_INT 1
8689: PUSH
8690: LD_INT 3
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: LIST
8697: ST_TO_ADDR
// if commander = 3 then
8698: LD_EXP 25
8702: PUSH
8703: LD_INT 3
8705: EQUAL
8706: IFFALSE 8727
// engines := [ engine_siberite , engine_siberite , engine_combustion ] ;
8708: LD_ADDR_VAR 0 8
8712: PUSH
8713: LD_INT 3
8715: PUSH
8716: LD_INT 3
8718: PUSH
8719: LD_INT 1
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: LIST
8726: ST_TO_ADDR
// weapons := [ us_double_gun , us_light_gun , us_gatling_gun ] ;
8727: LD_ADDR_VAR 0 9
8731: PUSH
8732: LD_INT 5
8734: PUSH
8735: LD_INT 3
8737: PUSH
8738: LD_INT 4
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: LIST
8745: ST_TO_ADDR
// if commander = 2 then
8746: LD_EXP 25
8750: PUSH
8751: LD_INT 2
8753: EQUAL
8754: IFFALSE 8775
// weapons := [ us_rocket_launcher , us_double_gun , us_heavy_gun ] ;
8756: LD_ADDR_VAR 0 9
8760: PUSH
8761: LD_INT 7
8763: PUSH
8764: LD_INT 5
8766: PUSH
8767: LD_INT 6
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: LIST
8774: ST_TO_ADDR
// if commander = 3 then
8775: LD_EXP 25
8779: PUSH
8780: LD_INT 3
8782: EQUAL
8783: IFFALSE 8804
// weapons := [ us_laser , us_double_laser , us_rocket_launcher ] ;
8785: LD_ADDR_VAR 0 9
8789: PUSH
8790: LD_INT 9
8792: PUSH
8793: LD_INT 10
8795: PUSH
8796: LD_INT 7
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: LIST
8803: ST_TO_ADDR
// tanks := [ 5 , 5 , 4 ] [ Difficulty ] ;
8804: LD_ADDR_VAR 0 5
8808: PUSH
8809: LD_INT 5
8811: PUSH
8812: LD_INT 5
8814: PUSH
8815: LD_INT 4
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: LIST
8822: PUSH
8823: LD_OWVAR 67
8827: ARRAY
8828: ST_TO_ADDR
// if commander = 2 then
8829: LD_EXP 25
8833: PUSH
8834: LD_INT 2
8836: EQUAL
8837: IFFALSE 8853
// tanks := tanks + 3 ;
8839: LD_ADDR_VAR 0 5
8843: PUSH
8844: LD_VAR 0 5
8848: PUSH
8849: LD_INT 3
8851: PLUS
8852: ST_TO_ADDR
// for i = 1 to tanks do
8853: LD_ADDR_VAR 0 2
8857: PUSH
8858: DOUBLE
8859: LD_INT 1
8861: DEC
8862: ST_TO_ADDR
8863: LD_VAR 0 5
8867: PUSH
8868: FOR_TO
8869: IFFALSE 8979
// begin PrepareVehicle ( chassis [ i mod 3 + 1 ] , engines [ rand ( 1 , 3 ) ] , control_manual , weapons [ i mod 3 + 1 ] , rand ( 60 , 70 ) ) ;
8871: LD_VAR 0 7
8875: PUSH
8876: LD_VAR 0 2
8880: PUSH
8881: LD_INT 3
8883: MOD
8884: PUSH
8885: LD_INT 1
8887: PLUS
8888: ARRAY
8889: PPUSH
8890: LD_VAR 0 8
8894: PUSH
8895: LD_INT 1
8897: PPUSH
8898: LD_INT 3
8900: PPUSH
8901: CALL_OW 12
8905: ARRAY
8906: PPUSH
8907: LD_INT 1
8909: PPUSH
8910: LD_VAR 0 9
8914: PUSH
8915: LD_VAR 0 2
8919: PUSH
8920: LD_INT 3
8922: MOD
8923: PUSH
8924: LD_INT 1
8926: PLUS
8927: ARRAY
8928: PPUSH
8929: LD_INT 60
8931: PPUSH
8932: LD_INT 70
8934: PPUSH
8935: CALL_OW 12
8939: PPUSH
8940: CALL 24193 0 5
// result := Replace ( result , 1 , result [ 1 ] ^ CreateVehicle ) ;
8944: LD_ADDR_VAR 0 1
8948: PUSH
8949: LD_VAR 0 1
8953: PPUSH
8954: LD_INT 1
8956: PPUSH
8957: LD_VAR 0 1
8961: PUSH
8962: LD_INT 1
8964: ARRAY
8965: PUSH
8966: CALL_OW 45
8970: ADD
8971: PPUSH
8972: CALL_OW 1
8976: ST_TO_ADDR
// end ;
8977: GO 8868
8979: POP
8980: POP
// cl := 1 ;
8981: LD_ADDR_VAR 0 6
8985: PUSH
8986: LD_INT 1
8988: ST_TO_ADDR
// for i = 1 to 10 do
8989: LD_ADDR_VAR 0 2
8993: PUSH
8994: DOUBLE
8995: LD_INT 1
8997: DEC
8998: ST_TO_ADDR
8999: LD_INT 10
9001: PUSH
9002: FOR_TO
9003: IFFALSE 9118
// begin if i mod 4 = 0 then
9005: LD_VAR 0 2
9009: PUSH
9010: LD_INT 4
9012: MOD
9013: PUSH
9014: LD_INT 0
9016: EQUAL
9017: IFFALSE 9033
// cl := cl + 1 ;
9019: LD_ADDR_VAR 0 6
9023: PUSH
9024: LD_VAR 0 6
9028: PUSH
9029: LD_INT 1
9031: PLUS
9032: ST_TO_ADDR
// if cl = 2 then
9033: LD_VAR 0 6
9037: PUSH
9038: LD_INT 2
9040: EQUAL
9041: IFFALSE 9051
// cl := 3 ;
9043: LD_ADDR_VAR 0 6
9047: PUSH
9048: LD_INT 3
9050: ST_TO_ADDR
// PrepareHuman ( false , cl , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
9051: LD_INT 0
9053: PPUSH
9054: LD_VAR 0 6
9058: PPUSH
9059: LD_INT 6
9061: PUSH
9062: LD_INT 6
9064: PUSH
9065: LD_INT 5
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: LIST
9072: PUSH
9073: LD_OWVAR 67
9077: ARRAY
9078: PPUSH
9079: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9083: LD_ADDR_VAR 0 1
9087: PUSH
9088: LD_VAR 0 1
9092: PPUSH
9093: LD_INT 2
9095: PPUSH
9096: LD_VAR 0 1
9100: PUSH
9101: LD_INT 2
9103: ARRAY
9104: PUSH
9105: CALL_OW 44
9109: ADD
9110: PPUSH
9111: CALL_OW 1
9115: ST_TO_ADDR
// end ;
9116: GO 9002
9118: POP
9119: POP
// if commander = 1 then
9120: LD_EXP 25
9124: PUSH
9125: LD_INT 1
9127: EQUAL
9128: IFFALSE 9196
// for i = 1 to 4 do
9130: LD_ADDR_VAR 0 2
9134: PUSH
9135: DOUBLE
9136: LD_INT 1
9138: DEC
9139: ST_TO_ADDR
9140: LD_INT 4
9142: PUSH
9143: FOR_TO
9144: IFFALSE 9194
// begin PrepareHuman ( false , class_soldier , 8 ) ;
9146: LD_INT 0
9148: PPUSH
9149: LD_INT 1
9151: PPUSH
9152: LD_INT 8
9154: PPUSH
9155: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9159: LD_ADDR_VAR 0 1
9163: PUSH
9164: LD_VAR 0 1
9168: PPUSH
9169: LD_INT 2
9171: PPUSH
9172: LD_VAR 0 1
9176: PUSH
9177: LD_INT 2
9179: ARRAY
9180: PUSH
9181: CALL_OW 44
9185: ADD
9186: PPUSH
9187: CALL_OW 1
9191: ST_TO_ADDR
// end ;
9192: GO 9143
9194: POP
9195: POP
// techs := [ ] ;
9196: LD_ADDR_VAR 0 4
9200: PUSH
9201: EMPTY
9202: ST_TO_ADDR
// if commander = 1 then
9203: LD_EXP 25
9207: PUSH
9208: LD_INT 1
9210: EQUAL
9211: IFFALSE 9236
// techs := [ tech_weap1 , tech_weap2 , tech_weap3 , tech_lasSight ] ;
9213: LD_ADDR_VAR 0 4
9217: PUSH
9218: LD_INT 51
9220: PUSH
9221: LD_INT 52
9223: PUSH
9224: LD_INT 53
9226: PUSH
9227: LD_INT 12
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: ST_TO_ADDR
// if commander = 2 then
9236: LD_EXP 25
9240: PUSH
9241: LD_INT 2
9243: EQUAL
9244: IFFALSE 9281
// techs := [ tech_tech1 , tech_oilEng , tech_oilPow , tech_solEng , tech_solPow , tech_opto1 , tech_radar ] ;
9246: LD_ADDR_VAR 0 4
9250: PUSH
9251: LD_INT 48
9253: PUSH
9254: LD_INT 47
9256: PUSH
9257: LD_INT 46
9259: PUSH
9260: LD_INT 45
9262: PUSH
9263: LD_INT 35
9265: PUSH
9266: LD_INT 60
9268: PUSH
9269: LD_INT 6
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: ST_TO_ADDR
// if commander = 3 then
9281: LD_EXP 25
9285: PUSH
9286: LD_INT 3
9288: EQUAL
9289: IFFALSE 9338
// techs := [ tech_advAI , tech_advchassis , tech_ai , tech_comp1 , tech_comp2 , tech_oilEng , tech_oilPow , tech_weap1 , tech_gatling , tech_gun ] ;
9291: LD_ADDR_VAR 0 4
9295: PUSH
9296: LD_INT 27
9298: PUSH
9299: LD_INT 36
9301: PUSH
9302: LD_INT 32
9304: PUSH
9305: LD_INT 57
9307: PUSH
9308: LD_INT 58
9310: PUSH
9311: LD_INT 47
9313: PUSH
9314: LD_INT 46
9316: PUSH
9317: LD_INT 51
9319: PUSH
9320: LD_INT 69
9322: PUSH
9323: LD_INT 39
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: ST_TO_ADDR
// if techs then
9338: LD_VAR 0 4
9342: IFFALSE 9376
// for i in techs do
9344: LD_ADDR_VAR 0 2
9348: PUSH
9349: LD_VAR 0 4
9353: PUSH
9354: FOR_IN
9355: IFFALSE 9374
// SetTech ( i , 1 , state_researched ) ;
9357: LD_VAR 0 2
9361: PPUSH
9362: LD_INT 1
9364: PPUSH
9365: LD_INT 2
9367: PPUSH
9368: CALL_OW 322
9372: GO 9354
9374: POP
9375: POP
// hc_gallery := skirmish ;
9376: LD_ADDR_OWVAR 33
9380: PUSH
9381: LD_STRING skirmish
9383: ST_TO_ADDR
// hc_face_number := commander ;
9384: LD_ADDR_OWVAR 34
9388: PUSH
9389: LD_EXP 25
9393: ST_TO_ADDR
// hc_importance := 100 ;
9394: LD_ADDR_OWVAR 32
9398: PUSH
9399: LD_INT 100
9401: ST_TO_ADDR
// case commander of 1 :
9402: LD_EXP 25
9406: PUSH
9407: LD_INT 1
9409: DOUBLE
9410: EQUAL
9411: IFTRUE 9415
9413: GO 9439
9415: POP
// begin hc_name := Jeff Ironside ;
9416: LD_ADDR_OWVAR 26
9420: PUSH
9421: LD_STRING Jeff Ironside
9423: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
9424: LD_INT 1
9426: PPUSH
9427: LD_INT 1
9429: PPUSH
9430: LD_INT 7
9432: PPUSH
9433: CALL_OW 380
// end ; 2 :
9437: GO 9504
9439: LD_INT 2
9441: DOUBLE
9442: EQUAL
9443: IFTRUE 9447
9445: GO 9471
9447: POP
// begin hc_name := Paul Johnson ;
9448: LD_ADDR_OWVAR 26
9452: PUSH
9453: LD_STRING Paul Johnson
9455: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 7 ) ;
9456: LD_INT 1
9458: PPUSH
9459: LD_INT 3
9461: PPUSH
9462: LD_INT 7
9464: PPUSH
9465: CALL_OW 380
// end ; 3 :
9469: GO 9504
9471: LD_INT 3
9473: DOUBLE
9474: EQUAL
9475: IFTRUE 9479
9477: GO 9503
9479: POP
// begin hc_name := Lisa Stuart ;
9480: LD_ADDR_OWVAR 26
9484: PUSH
9485: LD_STRING Lisa Stuart
9487: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 7 ) ;
9488: LD_INT 2
9490: PPUSH
9491: LD_INT 4
9493: PPUSH
9494: LD_INT 7
9496: PPUSH
9497: CALL_OW 380
// end ; end ;
9501: GO 9504
9503: POP
// playerCommander := CreateHuman ;
9504: LD_ADDR_EXP 9
9508: PUSH
9509: CALL_OW 44
9513: ST_TO_ADDR
// hc_importance := 0 ;
9514: LD_ADDR_OWVAR 32
9518: PUSH
9519: LD_INT 0
9521: ST_TO_ADDR
// hc_gallery :=  ;
9522: LD_ADDR_OWVAR 33
9526: PUSH
9527: LD_STRING 
9529: ST_TO_ADDR
// result := Replace ( result , 2 , result [ 2 ] ^ playerCommander ) ;
9530: LD_ADDR_VAR 0 1
9534: PUSH
9535: LD_VAR 0 1
9539: PPUSH
9540: LD_INT 2
9542: PPUSH
9543: LD_VAR 0 1
9547: PUSH
9548: LD_INT 2
9550: ARRAY
9551: PUSH
9552: LD_EXP 9
9556: ADD
9557: PPUSH
9558: CALL_OW 1
9562: ST_TO_ADDR
// end ;
9563: LD_VAR 0 1
9567: RET
// export function PrepareReinforcements ; var i , peopleAmount , tmp , un , veh ; begin
9568: LD_INT 0
9570: PPUSH
9571: PPUSH
9572: PPUSH
9573: PPUSH
9574: PPUSH
9575: PPUSH
// uc_side := 1 ;
9576: LD_ADDR_OWVAR 20
9580: PUSH
9581: LD_INT 1
9583: ST_TO_ADDR
// uc_nation := 1 ;
9584: LD_ADDR_OWVAR 21
9588: PUSH
9589: LD_INT 1
9591: ST_TO_ADDR
// InitHc ;
9592: CALL_OW 19
// peopleAmount := [ 3 , 3 , 2 ] [ Difficulty ] ;
9596: LD_ADDR_VAR 0 3
9600: PUSH
9601: LD_INT 3
9603: PUSH
9604: LD_INT 3
9606: PUSH
9607: LD_INT 2
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: LIST
9614: PUSH
9615: LD_OWVAR 67
9619: ARRAY
9620: ST_TO_ADDR
// for i = 1 to peopleAmount do
9621: LD_ADDR_VAR 0 2
9625: PUSH
9626: DOUBLE
9627: LD_INT 1
9629: DEC
9630: ST_TO_ADDR
9631: LD_VAR 0 3
9635: PUSH
9636: FOR_TO
9637: IFFALSE 9686
// begin PrepareHuman ( false , 2 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9639: LD_INT 0
9641: PPUSH
9642: LD_INT 2
9644: PPUSH
9645: LD_INT 7
9647: PUSH
9648: LD_INT 6
9650: PUSH
9651: LD_INT 5
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: LIST
9658: PUSH
9659: LD_OWVAR 67
9663: ARRAY
9664: PPUSH
9665: CALL_OW 380
// PlaceUnitInArea ( CreateHuman , startArea , false ) ;
9669: CALL_OW 44
9673: PPUSH
9674: LD_INT 19
9676: PPUSH
9677: LD_INT 0
9679: PPUSH
9680: CALL 54605 0 3
// end ;
9684: GO 9636
9686: POP
9687: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_crane , 58 ) ;
9688: LD_INT 2
9690: PPUSH
9691: LD_INT 1
9693: PPUSH
9694: LD_INT 3
9696: PPUSH
9697: LD_INT 13
9699: PPUSH
9700: LD_INT 58
9702: PPUSH
9703: CALL 24193 0 5
// PlaceUnitInArea ( CreateVehicle , startArea , false ) ;
9707: CALL_OW 45
9711: PPUSH
9712: LD_INT 19
9714: PPUSH
9715: LD_INT 0
9717: PPUSH
9718: CALL 54605 0 3
// if commander = 1 then
9722: LD_EXP 25
9726: PUSH
9727: LD_INT 1
9729: EQUAL
9730: IFFALSE 9741
// wait ( 6 6$00 ) else
9732: LD_INT 12600
9734: PPUSH
9735: CALL_OW 67
9739: GO 9748
// wait ( 8 8$00 ) ;
9741: LD_INT 16800
9743: PPUSH
9744: CALL_OW 67
// uc_side := 1 ;
9748: LD_ADDR_OWVAR 20
9752: PUSH
9753: LD_INT 1
9755: ST_TO_ADDR
// uc_nation := 1 ;
9756: LD_ADDR_OWVAR 21
9760: PUSH
9761: LD_INT 1
9763: ST_TO_ADDR
// InitVc ;
9764: CALL_OW 20
// InitHc ;
9768: CALL_OW 19
// for i = 1 to 5 do
9772: LD_ADDR_VAR 0 2
9776: PUSH
9777: DOUBLE
9778: LD_INT 1
9780: DEC
9781: ST_TO_ADDR
9782: LD_INT 5
9784: PUSH
9785: FOR_TO
9786: IFFALSE 10030
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_light_wheeled ] [ i mod 3 + 1 ] , engine_combustion , [ control_manual , control_computer , control_computer ] [ i mod 3 + 1 ] , [ us_heavy_gun , us_cargo_bay , us_radar ] [ i mod 3 + 1 ] , rand ( 40 , 55 ) ) ;
9788: LD_INT 4
9790: PUSH
9791: LD_INT 3
9793: PUSH
9794: LD_INT 1
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: LIST
9801: PUSH
9802: LD_VAR 0 2
9806: PUSH
9807: LD_INT 3
9809: MOD
9810: PUSH
9811: LD_INT 1
9813: PLUS
9814: ARRAY
9815: PPUSH
9816: LD_INT 1
9818: PPUSH
9819: LD_INT 1
9821: PUSH
9822: LD_INT 3
9824: PUSH
9825: LD_INT 3
9827: PUSH
9828: EMPTY
9829: LIST
9830: LIST
9831: LIST
9832: PUSH
9833: LD_VAR 0 2
9837: PUSH
9838: LD_INT 3
9840: MOD
9841: PUSH
9842: LD_INT 1
9844: PLUS
9845: ARRAY
9846: PPUSH
9847: LD_INT 6
9849: PUSH
9850: LD_INT 12
9852: PUSH
9853: LD_INT 11
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: LIST
9860: PUSH
9861: LD_VAR 0 2
9865: PUSH
9866: LD_INT 3
9868: MOD
9869: PUSH
9870: LD_INT 1
9872: PLUS
9873: ARRAY
9874: PPUSH
9875: LD_INT 40
9877: PPUSH
9878: LD_INT 55
9880: PPUSH
9881: CALL_OW 12
9885: PPUSH
9886: CALL 24193 0 5
// veh := CreateVehicle ;
9890: LD_ADDR_VAR 0 6
9894: PUSH
9895: CALL_OW 45
9899: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
9900: LD_VAR 0 6
9904: PPUSH
9905: LD_INT 19
9907: PPUSH
9908: LD_INT 0
9910: PPUSH
9911: CALL 54605 0 3
// if GetWeapon ( veh ) = us_cargo_bay then
9915: LD_VAR 0 6
9919: PPUSH
9920: CALL_OW 264
9924: PUSH
9925: LD_INT 12
9927: EQUAL
9928: IFFALSE 9960
// begin AddCargo ( veh , mat_cans , 70 ) ;
9930: LD_VAR 0 6
9934: PPUSH
9935: LD_INT 1
9937: PPUSH
9938: LD_INT 70
9940: PPUSH
9941: CALL_OW 291
// AddCargo ( veh , mat_siberit , 30 ) ;
9945: LD_VAR 0 6
9949: PPUSH
9950: LD_INT 3
9952: PPUSH
9953: LD_INT 30
9955: PPUSH
9956: CALL_OW 291
// end ; if GetControl ( veh ) = control_manual then
9960: LD_VAR 0 6
9964: PPUSH
9965: CALL_OW 263
9969: PUSH
9970: LD_INT 1
9972: EQUAL
9973: IFFALSE 10028
// begin PrepareHuman ( sex_male , 3 , 6 ) ;
9975: LD_INT 1
9977: PPUSH
9978: LD_INT 3
9980: PPUSH
9981: LD_INT 6
9983: PPUSH
9984: CALL_OW 380
// un := CreateHuman ;
9988: LD_ADDR_VAR 0 5
9992: PUSH
9993: CALL_OW 44
9997: ST_TO_ADDR
// tmp := tmp ^ un ;
9998: LD_ADDR_VAR 0 4
10002: PUSH
10003: LD_VAR 0 4
10007: PUSH
10008: LD_VAR 0 5
10012: ADD
10013: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10014: LD_VAR 0 5
10018: PPUSH
10019: LD_VAR 0 6
10023: PPUSH
10024: CALL_OW 52
// end ; end ;
10028: GO 9785
10030: POP
10031: POP
// if tmp then
10032: LD_VAR 0 4
10036: IFFALSE 10100
// begin CenterNowOnUnits ( tmp ) ;
10038: LD_VAR 0 4
10042: PPUSH
10043: CALL_OW 87
// Say ( tmp [ 1 ] , DAR-1 ) ;
10047: LD_VAR 0 4
10051: PUSH
10052: LD_INT 1
10054: ARRAY
10055: PPUSH
10056: LD_STRING DAR-1
10058: PPUSH
10059: CALL_OW 88
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-DAR ) ;
10063: LD_EXP 9
10067: PPUSH
10068: LD_STRING D
10070: PUSH
10071: LD_STRING I
10073: PUSH
10074: LD_STRING J
10076: PUSH
10077: LD_STRING S
10079: PUSH
10080: EMPTY
10081: LIST
10082: LIST
10083: LIST
10084: PUSH
10085: LD_EXP 25
10089: ARRAY
10090: STR
10091: PUSH
10092: LD_STRING -1-DAR
10094: STR
10095: PPUSH
10096: CALL_OW 88
// end ; if not reinforceAllowed then
10100: LD_EXP 24
10104: NOT
10105: IFFALSE 10109
// exit ;
10107: GO 10263
// wait ( 25 25$00 ) ;
10109: LD_INT 52500
10111: PPUSH
10112: CALL_OW 67
// uc_side := 1 ;
10116: LD_ADDR_OWVAR 20
10120: PUSH
10121: LD_INT 1
10123: ST_TO_ADDR
// uc_nation := 1 ;
10124: LD_ADDR_OWVAR 21
10128: PUSH
10129: LD_INT 1
10131: ST_TO_ADDR
// InitVc ;
10132: CALL_OW 20
// InitHc ;
10136: CALL_OW 19
// for i = 1 to 4 do
10140: LD_ADDR_VAR 0 2
10144: PUSH
10145: DOUBLE
10146: LD_INT 1
10148: DEC
10149: ST_TO_ADDR
10150: LD_INT 4
10152: PUSH
10153: FOR_TO
10154: IFFALSE 10261
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 1 ) ;
10156: LD_INT 5
10158: PPUSH
10159: LD_INT 3
10161: PPUSH
10162: LD_INT 1
10164: PPUSH
10165: LD_INT 6
10167: PPUSH
10168: LD_INT 1
10170: PPUSH
10171: CALL 24193 0 5
// veh := CreateVehicle ;
10175: LD_ADDR_VAR 0 6
10179: PUSH
10180: CALL_OW 45
10184: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
10185: LD_VAR 0 6
10189: PPUSH
10190: LD_INT 19
10192: PPUSH
10193: LD_INT 0
10195: PPUSH
10196: CALL 54605 0 3
// if GetControl ( veh ) = control_manual then
10200: LD_VAR 0 6
10204: PPUSH
10205: CALL_OW 263
10209: PUSH
10210: LD_INT 1
10212: EQUAL
10213: IFFALSE 10259
// begin PrepareHuman ( false , 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
10215: LD_INT 0
10217: PPUSH
10218: LD_INT 3
10220: PPUSH
10221: LD_INT 7
10223: PUSH
10224: LD_INT 6
10226: PUSH
10227: LD_INT 5
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: LIST
10234: PUSH
10235: LD_OWVAR 67
10239: ARRAY
10240: PPUSH
10241: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10245: CALL_OW 44
10249: PPUSH
10250: LD_VAR 0 6
10254: PPUSH
10255: CALL_OW 52
// end ; end ;
10259: GO 10153
10261: POP
10262: POP
// end ;
10263: LD_VAR 0 1
10267: RET
// export function PrepareLegionReinforcements ; var i , un , j , tmp ; begin
10268: LD_INT 0
10270: PPUSH
10271: PPUSH
10272: PPUSH
10273: PPUSH
10274: PPUSH
// uc_side := 8 ;
10275: LD_ADDR_OWVAR 20
10279: PUSH
10280: LD_INT 8
10282: ST_TO_ADDR
// uc_nation := nation_arabian ;
10283: LD_ADDR_OWVAR 21
10287: PUSH
10288: LD_INT 2
10290: ST_TO_ADDR
// for i = 1 to 2 do
10291: LD_ADDR_VAR 0 2
10295: PUSH
10296: DOUBLE
10297: LD_INT 1
10299: DEC
10300: ST_TO_ADDR
10301: LD_INT 2
10303: PUSH
10304: FOR_TO
10305: IFFALSE 10385
// for j = 1 to 4 do
10307: LD_ADDR_VAR 0 4
10311: PUSH
10312: DOUBLE
10313: LD_INT 1
10315: DEC
10316: ST_TO_ADDR
10317: LD_INT 4
10319: PUSH
10320: FOR_TO
10321: IFFALSE 10381
// begin PrepareHuman ( false , j , 8 ) ;
10323: LD_INT 0
10325: PPUSH
10326: LD_VAR 0 4
10330: PPUSH
10331: LD_INT 8
10333: PPUSH
10334: CALL_OW 380
// un := CreateHuman ;
10338: LD_ADDR_VAR 0 3
10342: PUSH
10343: CALL_OW 44
10347: ST_TO_ADDR
// PlaceUnitArea ( un , legionSpawn , false ) ;
10348: LD_VAR 0 3
10352: PPUSH
10353: LD_INT 23
10355: PPUSH
10356: LD_INT 0
10358: PPUSH
10359: CALL_OW 49
// tmp := tmp union un ;
10363: LD_ADDR_VAR 0 5
10367: PUSH
10368: LD_VAR 0 5
10372: PUSH
10373: LD_VAR 0 3
10377: UNION
10378: ST_TO_ADDR
// end ;
10379: GO 10320
10381: POP
10382: POP
10383: GO 10304
10385: POP
10386: POP
// for i in tmp do
10387: LD_ADDR_VAR 0 2
10391: PUSH
10392: LD_VAR 0 5
10396: PUSH
10397: FOR_IN
10398: IFFALSE 10417
// ComMoveXY ( i , 150 , 136 ) ;
10400: LD_VAR 0 2
10404: PPUSH
10405: LD_INT 150
10407: PPUSH
10408: LD_INT 136
10410: PPUSH
10411: CALL_OW 111
10415: GO 10397
10417: POP
10418: POP
// mc_bases := Replace ( mc_bases , mc_leg , mc_bases [ mc_leg ] union tmp ) ;
10419: LD_ADDR_EXP 47
10423: PUSH
10424: LD_EXP 47
10428: PPUSH
10429: LD_EXP 6
10433: PPUSH
10434: LD_EXP 47
10438: PUSH
10439: LD_EXP 6
10443: ARRAY
10444: PUSH
10445: LD_VAR 0 5
10449: UNION
10450: PPUSH
10451: CALL_OW 1
10455: ST_TO_ADDR
// end ;
10456: LD_VAR 0 1
10460: RET
// every 0 0$10 trigger Difficulty > 1 and GetTech ( tech_lapser , 3 ) = state_researched do
10461: LD_OWVAR 67
10465: PUSH
10466: LD_INT 1
10468: GREATER
10469: PUSH
10470: LD_INT 31
10472: PPUSH
10473: LD_INT 3
10475: PPUSH
10476: CALL_OW 321
10480: PUSH
10481: LD_INT 2
10483: EQUAL
10484: AND
10485: IFFALSE 10702
10487: GO 10489
10489: DISABLE
// begin MC_InsertBuildingList ( mc_rus_1 , [ [ b_turret , 101 , 159 , 5 ] , [ b_turret , 105 , 158 , 5 ] , [ b_turret , 96 , 136 , 5 ] , [ b_turret , 94 , 133 , 4 ] , [ b_turret , 84 , 102 , 4 ] ] ) ;
10490: LD_EXP 7
10494: PPUSH
10495: LD_INT 33
10497: PUSH
10498: LD_INT 101
10500: PUSH
10501: LD_INT 159
10503: PUSH
10504: LD_INT 5
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 33
10515: PUSH
10516: LD_INT 105
10518: PUSH
10519: LD_INT 158
10521: PUSH
10522: LD_INT 5
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: PUSH
10531: LD_INT 33
10533: PUSH
10534: LD_INT 96
10536: PUSH
10537: LD_INT 136
10539: PUSH
10540: LD_INT 5
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: PUSH
10549: LD_INT 33
10551: PUSH
10552: LD_INT 94
10554: PUSH
10555: LD_INT 133
10557: PUSH
10558: LD_INT 4
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: PUSH
10567: LD_INT 33
10569: PUSH
10570: LD_INT 84
10572: PUSH
10573: LD_INT 102
10575: PUSH
10576: LD_INT 4
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: PPUSH
10592: CALL 80809 0 2
// MC_InsertBuildingList ( mc_rus_2 , [ [ b_turret , 50 , 17 , 4 ] , [ b_turret , 52 , 20 , 4 ] , [ b_turret , 53 , 23 , 4 ] , [ b_turret , 45 , 32 , 4 ] , [ b_turret , 45 , 39 , 4 ] ] ) ;
10596: LD_EXP 8
10600: PPUSH
10601: LD_INT 33
10603: PUSH
10604: LD_INT 50
10606: PUSH
10607: LD_INT 17
10609: PUSH
10610: LD_INT 4
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: PUSH
10619: LD_INT 33
10621: PUSH
10622: LD_INT 52
10624: PUSH
10625: LD_INT 20
10627: PUSH
10628: LD_INT 4
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: PUSH
10637: LD_INT 33
10639: PUSH
10640: LD_INT 53
10642: PUSH
10643: LD_INT 23
10645: PUSH
10646: LD_INT 4
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: PUSH
10655: LD_INT 33
10657: PUSH
10658: LD_INT 45
10660: PUSH
10661: LD_INT 32
10663: PUSH
10664: LD_INT 4
10666: PUSH
10667: EMPTY
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: PUSH
10673: LD_INT 33
10675: PUSH
10676: LD_INT 45
10678: PUSH
10679: LD_INT 39
10681: PUSH
10682: LD_INT 4
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: PPUSH
10698: CALL 80809 0 2
// end ; end_of_file
10702: END
// export function Action ; var i , tmp ; begin
10703: LD_INT 0
10705: PPUSH
10706: PPUSH
10707: PPUSH
// InGameOn ;
10708: CALL_OW 8
// CenterNowOnXY ( 225 , 217 ) ;
10712: LD_INT 225
10714: PPUSH
10715: LD_INT 217
10717: PPUSH
10718: CALL_OW 86
// for i in playerForces [ 2 ] do
10722: LD_ADDR_VAR 0 2
10726: PUSH
10727: LD_EXP 10
10731: PUSH
10732: LD_INT 2
10734: ARRAY
10735: PUSH
10736: FOR_IN
10737: IFFALSE 10870
// begin if playerForces [ 1 ] and GetClass ( i ) in [ 3 , 4 ] then
10739: LD_EXP 10
10743: PUSH
10744: LD_INT 1
10746: ARRAY
10747: PUSH
10748: LD_VAR 0 2
10752: PPUSH
10753: CALL_OW 257
10757: PUSH
10758: LD_INT 3
10760: PUSH
10761: LD_INT 4
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: IN
10768: AND
10769: IFFALSE 10853
// begin PlaceUnitInArea ( playerForces [ 1 ] [ 1 ] , startArea , false ) ;
10771: LD_EXP 10
10775: PUSH
10776: LD_INT 1
10778: ARRAY
10779: PUSH
10780: LD_INT 1
10782: ARRAY
10783: PPUSH
10784: LD_INT 19
10786: PPUSH
10787: LD_INT 0
10789: PPUSH
10790: CALL 54605 0 3
// PlaceHumanInUnit ( i , playerForces [ 1 ] [ 1 ] ) ;
10794: LD_VAR 0 2
10798: PPUSH
10799: LD_EXP 10
10803: PUSH
10804: LD_INT 1
10806: ARRAY
10807: PUSH
10808: LD_INT 1
10810: ARRAY
10811: PPUSH
10812: CALL_OW 52
// playerForces := Replace ( playerForces , 1 , Delete ( playerForces [ 1 ] , 1 ) ) ;
10816: LD_ADDR_EXP 10
10820: PUSH
10821: LD_EXP 10
10825: PPUSH
10826: LD_INT 1
10828: PPUSH
10829: LD_EXP 10
10833: PUSH
10834: LD_INT 1
10836: ARRAY
10837: PPUSH
10838: LD_INT 1
10840: PPUSH
10841: CALL_OW 3
10845: PPUSH
10846: CALL_OW 1
10850: ST_TO_ADDR
// end else
10851: GO 10868
// PlaceUnitInArea ( i , startArea , false ) ;
10853: LD_VAR 0 2
10857: PPUSH
10858: LD_INT 19
10860: PPUSH
10861: LD_INT 0
10863: PPUSH
10864: CALL 54605 0 3
// end ;
10868: GO 10736
10870: POP
10871: POP
// wait ( 0 0$2 ) ;
10872: LD_INT 70
10874: PPUSH
10875: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1 ) ;
10879: LD_EXP 9
10883: PPUSH
10884: LD_STRING D
10886: PUSH
10887: LD_STRING I
10889: PUSH
10890: LD_STRING J
10892: PUSH
10893: LD_STRING S
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: LIST
10900: PUSH
10901: LD_EXP 25
10905: ARRAY
10906: STR
10907: PUSH
10908: LD_STRING -1
10910: STR
10911: PPUSH
10912: CALL_OW 88
// SayRadio ( Powell , DP-1 ) ;
10916: LD_EXP 12
10920: PPUSH
10921: LD_STRING DP-1
10923: PPUSH
10924: CALL_OW 94
// SayRadio ( Powell , DP-2 ) ;
10928: LD_EXP 12
10932: PPUSH
10933: LD_STRING DP-2
10935: PPUSH
10936: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2 ) ;
10940: LD_EXP 9
10944: PPUSH
10945: LD_STRING D
10947: PUSH
10948: LD_STRING I
10950: PUSH
10951: LD_STRING J
10953: PUSH
10954: LD_STRING S
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: LIST
10961: PUSH
10962: LD_EXP 25
10966: ARRAY
10967: STR
10968: PUSH
10969: LD_STRING -2
10971: STR
10972: PPUSH
10973: CALL_OW 88
// InGameOff ;
10977: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
10981: LD_STRING O1
10983: PPUSH
10984: CALL_OW 337
// game := true ;
10988: LD_ADDR_EXP 3
10992: PUSH
10993: LD_INT 1
10995: ST_TO_ADDR
// SaveForQuickRestart ;
10996: CALL_OW 22
// wait ( 0 0$5 ) ;
11000: LD_INT 175
11002: PPUSH
11003: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3 ) ;
11007: LD_EXP 9
11011: PPUSH
11012: LD_STRING D
11014: PUSH
11015: LD_STRING I
11017: PUSH
11018: LD_STRING J
11020: PUSH
11021: LD_STRING S
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: LIST
11028: PUSH
11029: LD_EXP 25
11033: ARRAY
11034: STR
11035: PUSH
11036: LD_STRING -3
11038: STR
11039: PPUSH
11040: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11044: LD_INT 35
11046: PPUSH
11047: CALL_OW 67
// until ruEscape [ 1 ] >= ruEscape [ 2 ] ;
11051: LD_EXP 15
11055: PUSH
11056: LD_INT 1
11058: ARRAY
11059: PUSH
11060: LD_EXP 15
11064: PUSH
11065: LD_INT 2
11067: ARRAY
11068: GREATEREQUAL
11069: IFFALSE 11044
// outpostEscape := true ;
11071: LD_ADDR_EXP 27
11075: PUSH
11076: LD_INT 1
11078: ST_TO_ADDR
// tmp := UnitFilter ( ruOutpost , [ f_sex , sex_male ] ) ;
11079: LD_ADDR_VAR 0 3
11083: PUSH
11084: LD_EXP 14
11088: PPUSH
11089: LD_INT 26
11091: PUSH
11092: LD_INT 1
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: PPUSH
11099: CALL_OW 72
11103: ST_TO_ADDR
// if tmp then
11104: LD_VAR 0 3
11108: IFFALSE 11126
// Say ( tmp [ 1 ] , DR-1-Escape ) ;
11110: LD_VAR 0 3
11114: PUSH
11115: LD_INT 1
11117: ARRAY
11118: PPUSH
11119: LD_STRING DR-1-Escape
11121: PPUSH
11122: CALL_OW 88
// wait ( 0 0$1 ) ;
11126: LD_INT 35
11128: PPUSH
11129: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Escape ) ;
11133: LD_EXP 9
11137: PPUSH
11138: LD_STRING D
11140: PUSH
11141: LD_STRING I
11143: PUSH
11144: LD_STRING J
11146: PUSH
11147: LD_STRING S
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: LIST
11154: PUSH
11155: LD_EXP 25
11159: ARRAY
11160: STR
11161: PUSH
11162: LD_STRING -1-Escape
11164: STR
11165: PPUSH
11166: CALL_OW 88
// for i in ruOutpost do
11170: LD_ADDR_VAR 0 2
11174: PUSH
11175: LD_EXP 14
11179: PUSH
11180: FOR_IN
11181: IFFALSE 11235
// begin if IsInUnit ( i ) then
11183: LD_VAR 0 2
11187: PPUSH
11188: CALL_OW 310
11192: IFFALSE 11203
// ComExitBuilding ( i ) ;
11194: LD_VAR 0 2
11198: PPUSH
11199: CALL_OW 122
// AddComMoveXY ( i , 179 , 102 ) ;
11203: LD_VAR 0 2
11207: PPUSH
11208: LD_INT 179
11210: PPUSH
11211: LD_INT 102
11213: PPUSH
11214: CALL_OW 171
// AddComMoveXY ( i , 28 , 20 ) ;
11218: LD_VAR 0 2
11222: PPUSH
11223: LD_INT 28
11225: PPUSH
11226: LD_INT 20
11228: PPUSH
11229: CALL_OW 171
// end ;
11233: GO 11180
11235: POP
11236: POP
// tmp := [ ] ;
11237: LD_ADDR_VAR 0 3
11241: PUSH
11242: EMPTY
11243: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11244: LD_INT 35
11246: PPUSH
11247: CALL_OW 67
// tmp := UnitFilter ( ruOutpost , [ f_inarea , rus2Base ] ) ;
11251: LD_ADDR_VAR 0 3
11255: PUSH
11256: LD_EXP 14
11260: PPUSH
11261: LD_INT 95
11263: PUSH
11264: LD_INT 11
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PPUSH
11271: CALL_OW 72
11275: ST_TO_ADDR
// if tmp then
11276: LD_VAR 0 3
11280: IFFALSE 11359
// for i in tmp do
11282: LD_ADDR_VAR 0 2
11286: PUSH
11287: LD_VAR 0 3
11291: PUSH
11292: FOR_IN
11293: IFFALSE 11357
// begin ruOutpost := ruOutpost diff i ;
11295: LD_ADDR_EXP 14
11299: PUSH
11300: LD_EXP 14
11304: PUSH
11305: LD_VAR 0 2
11309: DIFF
11310: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ mc_rus_2 , mc_bases [ mc_rus_2 ] + 1 ] , i ) ;
11311: LD_ADDR_EXP 47
11315: PUSH
11316: LD_EXP 47
11320: PPUSH
11321: LD_EXP 8
11325: PUSH
11326: LD_EXP 47
11330: PUSH
11331: LD_EXP 8
11335: ARRAY
11336: PUSH
11337: LD_INT 1
11339: PLUS
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: PPUSH
11345: LD_VAR 0 2
11349: PPUSH
11350: CALL 24315 0 3
11354: ST_TO_ADDR
// end ;
11355: GO 11292
11357: POP
11358: POP
// until not UnitFilter ( ruOutpost , [ f_type , unit_human ] ) ;
11359: LD_EXP 14
11363: PPUSH
11364: LD_INT 21
11366: PUSH
11367: LD_INT 1
11369: PUSH
11370: EMPTY
11371: LIST
11372: LIST
11373: PPUSH
11374: CALL_OW 72
11378: NOT
11379: IFFALSE 11244
// ruOutpost := [ ] ;
11381: LD_ADDR_EXP 14
11385: PUSH
11386: EMPTY
11387: ST_TO_ADDR
// end ;
11388: LD_VAR 0 1
11392: RET
// every 0 0$1 trigger outpostEscape do var i , tmp ;
11393: LD_EXP 27
11397: IFFALSE 11586
11399: GO 11401
11401: DISABLE
11402: LD_INT 0
11404: PPUSH
11405: PPUSH
// begin wait ( rand ( 0 0$25 , 0 0$35 ) ) ;
11406: LD_INT 875
11408: PPUSH
11409: LD_INT 1225
11411: PPUSH
11412: CALL_OW 12
11416: PPUSH
11417: CALL_OW 67
// tmp := [ [ 208 , 166 ] , [ 218 , 174 ] , [ 201 , 173 ] , [ 189 , 167 ] , [ 191 , 160 ] , [ 209 , 181 ] , [ 192 , 162 ] , [ 197 , 166 ] ] ;
11421: LD_ADDR_VAR 0 2
11425: PUSH
11426: LD_INT 208
11428: PUSH
11429: LD_INT 166
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: PUSH
11436: LD_INT 218
11438: PUSH
11439: LD_INT 174
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: PUSH
11446: LD_INT 201
11448: PUSH
11449: LD_INT 173
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: PUSH
11456: LD_INT 189
11458: PUSH
11459: LD_INT 167
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PUSH
11466: LD_INT 191
11468: PUSH
11469: LD_INT 160
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: PUSH
11476: LD_INT 209
11478: PUSH
11479: LD_INT 181
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: PUSH
11486: LD_INT 192
11488: PUSH
11489: LD_INT 162
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PUSH
11496: LD_INT 197
11498: PUSH
11499: LD_INT 166
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: ST_TO_ADDR
// for i = 1 to 5 + Difficulty do
11516: LD_ADDR_VAR 0 1
11520: PUSH
11521: DOUBLE
11522: LD_INT 1
11524: DEC
11525: ST_TO_ADDR
11526: LD_INT 5
11528: PUSH
11529: LD_OWVAR 67
11533: PLUS
11534: PUSH
11535: FOR_TO
11536: IFFALSE 11584
// begin MineExplosion ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 1 ) ;
11538: LD_VAR 0 2
11542: PUSH
11543: LD_VAR 0 1
11547: ARRAY
11548: PUSH
11549: LD_INT 1
11551: ARRAY
11552: PPUSH
11553: LD_VAR 0 2
11557: PUSH
11558: LD_VAR 0 1
11562: ARRAY
11563: PUSH
11564: LD_INT 2
11566: ARRAY
11567: PPUSH
11568: LD_INT 1
11570: PPUSH
11571: CALL_OW 453
// wait ( 0 0$0.8 ) ;
11575: LD_INT 28
11577: PPUSH
11578: CALL_OW 67
// end ;
11582: GO 11535
11584: POP
11585: POP
// end ;
11586: PPOPN 2
11588: END
// every 0 0$3 trigger not outpostEscape do var tmp , engs , buildings , empty , i , j , k ;
11589: LD_EXP 27
11593: NOT
11594: IFFALSE 12248
11596: GO 11598
11598: DISABLE
11599: LD_INT 0
11601: PPUSH
11602: PPUSH
11603: PPUSH
11604: PPUSH
11605: PPUSH
11606: PPUSH
11607: PPUSH
// begin enable ;
11608: ENABLE
// tmp := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
11609: LD_ADDR_VAR 0 1
11613: PUSH
11614: LD_EXP 14
11618: PPUSH
11619: LD_INT 22
11621: PUSH
11622: LD_INT 3
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PUSH
11629: LD_INT 25
11631: PUSH
11632: LD_INT 1
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: PPUSH
11643: CALL_OW 72
11647: ST_TO_ADDR
// engs := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11648: LD_ADDR_VAR 0 2
11652: PUSH
11653: LD_EXP 14
11657: PPUSH
11658: LD_INT 22
11660: PUSH
11661: LD_INT 3
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PUSH
11668: LD_INT 25
11670: PUSH
11671: LD_INT 2
11673: PUSH
11674: EMPTY
11675: LIST
11676: LIST
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: PPUSH
11682: CALL_OW 72
11686: ST_TO_ADDR
// buildings := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11687: LD_ADDR_VAR 0 3
11691: PUSH
11692: LD_EXP 14
11696: PPUSH
11697: LD_INT 22
11699: PUSH
11700: LD_INT 3
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: LD_INT 21
11709: PUSH
11710: LD_INT 3
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: LD_INT 3
11719: PUSH
11720: LD_INT 24
11722: PUSH
11723: LD_INT 1000
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: PUSH
11734: EMPTY
11735: LIST
11736: LIST
11737: LIST
11738: PPUSH
11739: CALL_OW 72
11743: ST_TO_ADDR
// if engs and buildings then
11744: LD_VAR 0 2
11748: PUSH
11749: LD_VAR 0 3
11753: AND
11754: IFFALSE 11827
// begin for i in engs do
11756: LD_ADDR_VAR 0 5
11760: PUSH
11761: LD_VAR 0 2
11765: PUSH
11766: FOR_IN
11767: IFFALSE 11823
// if IsInUnit ( i ) then
11769: LD_VAR 0 5
11773: PPUSH
11774: CALL_OW 310
11778: IFFALSE 11791
// ComExitBuilding ( i ) else
11780: LD_VAR 0 5
11784: PPUSH
11785: CALL_OW 122
11789: GO 11821
// if not HasTask ( i ) then
11791: LD_VAR 0 5
11795: PPUSH
11796: CALL_OW 314
11800: NOT
11801: IFFALSE 11821
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
11803: LD_VAR 0 5
11807: PPUSH
11808: LD_VAR 0 3
11812: PUSH
11813: LD_INT 1
11815: ARRAY
11816: PPUSH
11817: CALL_OW 130
11821: GO 11766
11823: POP
11824: POP
// end else
11825: GO 11930
// if not buildings and UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) and UnitFilter ( engs , [ f_not , [ f_inside ] ] ) then
11827: LD_VAR 0 3
11831: NOT
11832: PUSH
11833: LD_EXP 14
11837: PPUSH
11838: LD_INT 30
11840: PUSH
11841: LD_INT 0
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PPUSH
11848: CALL_OW 72
11852: AND
11853: PUSH
11854: LD_VAR 0 2
11858: PPUSH
11859: LD_INT 3
11861: PUSH
11862: LD_INT 54
11864: PUSH
11865: EMPTY
11866: LIST
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: PPUSH
11872: CALL_OW 72
11876: AND
11877: IFFALSE 11930
// ComEnterUnit ( UnitFilter ( engs , [ f_not , [ f_inside ] ] ) , UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) [ 1 ] ) ;
11879: LD_VAR 0 2
11883: PPUSH
11884: LD_INT 3
11886: PUSH
11887: LD_INT 54
11889: PUSH
11890: EMPTY
11891: LIST
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: PPUSH
11897: CALL_OW 72
11901: PPUSH
11902: LD_EXP 14
11906: PPUSH
11907: LD_INT 30
11909: PUSH
11910: LD_INT 0
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PPUSH
11917: CALL_OW 72
11921: PUSH
11922: LD_INT 1
11924: ARRAY
11925: PPUSH
11926: CALL_OW 120
// if not tmp then
11930: LD_VAR 0 1
11934: NOT
11935: IFFALSE 11939
// exit ;
11937: GO 12248
// if FilterUnitsInArea ( ruOutpostCenterArea , [ f_enemy , 3 ] ) > 1 then
11939: LD_INT 26
11941: PPUSH
11942: LD_INT 81
11944: PUSH
11945: LD_INT 3
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: PPUSH
11952: CALL_OW 70
11956: PUSH
11957: LD_INT 1
11959: GREATER
11960: IFFALSE 12016
// begin for i in tmp do
11962: LD_ADDR_VAR 0 5
11966: PUSH
11967: LD_VAR 0 1
11971: PUSH
11972: FOR_IN
11973: IFFALSE 12012
// begin if IsInUnit ( i ) then
11975: LD_VAR 0 5
11979: PPUSH
11980: CALL_OW 310
11984: IFFALSE 11995
// ComExitBuilding ( i ) ;
11986: LD_VAR 0 5
11990: PPUSH
11991: CALL_OW 122
// AddComAgressiveMove ( i , 204 , 164 ) ;
11995: LD_VAR 0 5
11999: PPUSH
12000: LD_INT 204
12002: PPUSH
12003: LD_INT 164
12005: PPUSH
12006: CALL_OW 174
// end ;
12010: GO 11972
12012: POP
12013: POP
// end else
12014: GO 12248
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
12016: LD_VAR 0 1
12020: PPUSH
12021: LD_INT 3
12023: PUSH
12024: LD_INT 54
12026: PUSH
12027: EMPTY
12028: LIST
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PPUSH
12034: CALL_OW 72
12038: IFFALSE 12248
// begin empty := UnitFilter ( ruOutpost , [ [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
12040: LD_ADDR_VAR 0 4
12044: PUSH
12045: LD_EXP 14
12049: PPUSH
12050: LD_INT 30
12052: PUSH
12053: LD_INT 32
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: PUSH
12060: LD_INT 58
12062: PUSH
12063: EMPTY
12064: LIST
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: PPUSH
12070: CALL_OW 72
12074: ST_TO_ADDR
// if not empty and UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) then
12075: LD_VAR 0 4
12079: NOT
12080: PUSH
12081: LD_EXP 14
12085: PPUSH
12086: LD_INT 30
12088: PUSH
12089: LD_INT 5
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: PPUSH
12096: CALL_OW 72
12100: AND
12101: IFFALSE 12138
// begin ComEnterUnit ( tmp , UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) [ 1 ] ) ;
12103: LD_VAR 0 1
12107: PPUSH
12108: LD_EXP 14
12112: PPUSH
12113: LD_INT 30
12115: PUSH
12116: LD_INT 5
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PPUSH
12123: CALL_OW 72
12127: PUSH
12128: LD_INT 1
12130: ARRAY
12131: PPUSH
12132: CALL_OW 120
// exit ;
12136: GO 12248
// end ; j := UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) ;
12138: LD_ADDR_VAR 0 6
12142: PUSH
12143: LD_VAR 0 1
12147: PPUSH
12148: LD_INT 3
12150: PUSH
12151: LD_INT 54
12153: PUSH
12154: EMPTY
12155: LIST
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: PPUSH
12161: CALL_OW 72
12165: ST_TO_ADDR
// if j < empty then
12166: LD_VAR 0 6
12170: PUSH
12171: LD_VAR 0 4
12175: LESS
12176: IFFALSE 12190
// k := j else
12178: LD_ADDR_VAR 0 7
12182: PUSH
12183: LD_VAR 0 6
12187: ST_TO_ADDR
12188: GO 12200
// k := empty ;
12190: LD_ADDR_VAR 0 7
12194: PUSH
12195: LD_VAR 0 4
12199: ST_TO_ADDR
// for i = 1 to k do
12200: LD_ADDR_VAR 0 5
12204: PUSH
12205: DOUBLE
12206: LD_INT 1
12208: DEC
12209: ST_TO_ADDR
12210: LD_VAR 0 7
12214: PUSH
12215: FOR_TO
12216: IFFALSE 12246
// ComEnterUnit ( j [ i ] , empty [ i ] ) ;
12218: LD_VAR 0 6
12222: PUSH
12223: LD_VAR 0 5
12227: ARRAY
12228: PPUSH
12229: LD_VAR 0 4
12233: PUSH
12234: LD_VAR 0 5
12238: ARRAY
12239: PPUSH
12240: CALL_OW 120
12244: GO 12215
12246: POP
12247: POP
// end ; end ;
12248: PPOPN 7
12250: END
// every 0 0$2 trigger GameType = 1 and outpostEscape and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , 208 , 163 , 8 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 208 , 163 , 14 ] ] ) do var i ;
12251: LD_EXP 2
12255: PUSH
12256: LD_INT 1
12258: EQUAL
12259: PUSH
12260: LD_EXP 27
12264: AND
12265: PUSH
12266: LD_INT 22
12268: PUSH
12269: LD_INT 1
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: PUSH
12276: LD_INT 92
12278: PUSH
12279: LD_INT 208
12281: PUSH
12282: LD_INT 163
12284: PUSH
12285: LD_INT 8
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: PPUSH
12298: CALL_OW 69
12302: AND
12303: PUSH
12304: LD_INT 22
12306: PUSH
12307: LD_INT 3
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: PUSH
12314: LD_INT 21
12316: PUSH
12317: LD_INT 1
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 92
12326: PUSH
12327: LD_INT 208
12329: PUSH
12330: LD_INT 163
12332: PUSH
12333: LD_INT 14
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: LIST
12346: PPUSH
12347: CALL_OW 69
12351: NOT
12352: AND
12353: IFFALSE 12658
12355: GO 12357
12357: DISABLE
12358: LD_INT 0
12360: PPUSH
// begin InGameOn ;
12361: CALL_OW 8
// CenterNowOnUnits ( playerCommander ) ;
12365: LD_EXP 9
12369: PPUSH
12370: CALL_OW 87
// wait ( 0 0$1 ) ;
12374: LD_INT 35
12376: PPUSH
12377: CALL_OW 67
// DialogueOn ;
12381: CALL_OW 6
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-BaseCaptured ) ;
12385: LD_EXP 9
12389: PPUSH
12390: LD_STRING D
12392: PUSH
12393: LD_STRING I
12395: PUSH
12396: LD_STRING J
12398: PUSH
12399: LD_STRING S
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: LIST
12406: PUSH
12407: LD_EXP 25
12411: ARRAY
12412: STR
12413: PUSH
12414: LD_STRING -1-BaseCaptured
12416: STR
12417: PPUSH
12418: CALL_OW 88
// SayRadio ( Powell , DP-1-BaseCaptured ) ;
12422: LD_EXP 12
12426: PPUSH
12427: LD_STRING DP-1-BaseCaptured
12429: PPUSH
12430: CALL_OW 94
// if sibBombAllowed then
12434: LD_EXP 23
12438: IFFALSE 12580
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-BaseCaptured ) ;
12440: LD_EXP 9
12444: PPUSH
12445: LD_STRING D
12447: PUSH
12448: LD_STRING I
12450: PUSH
12451: LD_STRING J
12453: PUSH
12454: LD_STRING S
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: LIST
12461: PUSH
12462: LD_EXP 25
12466: ARRAY
12467: STR
12468: PUSH
12469: LD_STRING -2-BaseCaptured
12471: STR
12472: PPUSH
12473: CALL_OW 88
// if commander = 1 then
12477: LD_EXP 25
12481: PUSH
12482: LD_INT 1
12484: EQUAL
12485: IFFALSE 12499
// SayRadio ( Powell , DP-2b-BaseCaptured ) ;
12487: LD_EXP 12
12491: PPUSH
12492: LD_STRING DP-2b-BaseCaptured
12494: PPUSH
12495: CALL_OW 94
// if commander = 2 then
12499: LD_EXP 25
12503: PUSH
12504: LD_INT 2
12506: EQUAL
12507: IFFALSE 12521
// SayRadio ( Powell , DP-2-BaseCaptured ) ;
12509: LD_EXP 12
12513: PPUSH
12514: LD_STRING DP-2-BaseCaptured
12516: PPUSH
12517: CALL_OW 94
// if commander = 3 then
12521: LD_EXP 25
12525: PUSH
12526: LD_INT 3
12528: EQUAL
12529: IFFALSE 12543
// SayRadio ( Powell , DP-2a-BaseCaptured ) ;
12531: LD_EXP 12
12535: PPUSH
12536: LD_STRING DP-2a-BaseCaptured
12538: PPUSH
12539: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3-BaseCaptured ) ;
12543: LD_EXP 9
12547: PPUSH
12548: LD_STRING D
12550: PUSH
12551: LD_STRING I
12553: PUSH
12554: LD_STRING J
12556: PUSH
12557: LD_STRING S
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: LIST
12564: PUSH
12565: LD_EXP 25
12569: ARRAY
12570: STR
12571: PUSH
12572: LD_STRING -3-BaseCaptured
12574: STR
12575: PPUSH
12576: CALL_OW 88
// end ; DialogueOff ;
12580: CALL_OW 7
// InGameOff ;
12584: CALL_OW 9
// ChangeMissionObjectives ( O2 ) ;
12588: LD_STRING O2
12590: PPUSH
12591: CALL_OW 337
// for i in UnitFilter ( ruOutpost , [ f_type , unit_building ] ) do
12595: LD_ADDR_VAR 0 1
12599: PUSH
12600: LD_EXP 14
12604: PPUSH
12605: LD_INT 21
12607: PUSH
12608: LD_INT 3
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: PPUSH
12615: CALL_OW 72
12619: PUSH
12620: FOR_IN
12621: IFFALSE 12637
// SetSide ( i , 1 ) ;
12623: LD_VAR 0 1
12627: PPUSH
12628: LD_INT 1
12630: PPUSH
12631: CALL_OW 235
12635: GO 12620
12637: POP
12638: POP
// baseCaptured := true ;
12639: LD_ADDR_EXP 17
12643: PUSH
12644: LD_INT 1
12646: ST_TO_ADDR
// wait ( 0 0$35 ) ;
12647: LD_INT 1225
12649: PPUSH
12650: CALL_OW 67
// PrepareReinforcements ;
12654: CALL 9568 0 0
// end ;
12658: PPOPN 1
12660: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 167 , 197 , 20 ] ] ) > 3 do
12661: LD_INT 22
12663: PUSH
12664: LD_INT 3
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: PUSH
12671: LD_INT 92
12673: PUSH
12674: LD_INT 167
12676: PUSH
12677: LD_INT 197
12679: PUSH
12680: LD_INT 20
12682: PUSH
12683: EMPTY
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: PPUSH
12693: CALL_OW 69
12697: PUSH
12698: LD_INT 3
12700: GREATER
12701: IFFALSE 12718
12703: GO 12705
12705: DISABLE
// SayRadio ( Powell , DP-RuAttack ) ;
12706: LD_EXP 12
12710: PPUSH
12711: LD_STRING DP-RuAttack
12713: PPUSH
12714: CALL_OW 94
12718: END
// every 0 0$2 trigger not debug and SeeXY ( 1 , 168 , 74 ) and GetEnvironmentType ( 168 , 72 ) do
12719: LD_EXP 1
12723: NOT
12724: PUSH
12725: LD_INT 1
12727: PPUSH
12728: LD_INT 168
12730: PPUSH
12731: LD_INT 74
12733: PPUSH
12734: CALL_OW 293
12738: AND
12739: PUSH
12740: LD_INT 168
12742: PPUSH
12743: LD_INT 72
12745: PPUSH
12746: CALL_OW 553
12750: AND
12751: IFFALSE 12803
12753: GO 12755
12755: DISABLE
// begin CenterOnXY ( 168 , 72 ) ;
12756: LD_INT 168
12758: PPUSH
12759: LD_INT 72
12761: PPUSH
12762: CALL_OW 84
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Blockade ) ;
12766: LD_EXP 9
12770: PPUSH
12771: LD_STRING D
12773: PUSH
12774: LD_STRING I
12776: PUSH
12777: LD_STRING J
12779: PUSH
12780: LD_STRING S
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: LIST
12787: PUSH
12788: LD_EXP 25
12792: ARRAY
12793: STR
12794: PUSH
12795: LD_STRING -1-Blockade
12797: STR
12798: PPUSH
12799: CALL_OW 88
// end ;
12803: END
// every 0 0$2 trigger GameType = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 4 ] ] ) do
12804: LD_EXP 2
12808: PUSH
12809: LD_INT 1
12811: EQUAL
12812: PUSH
12813: LD_INT 22
12815: PUSH
12816: LD_INT 1
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: PUSH
12823: LD_INT 101
12825: PUSH
12826: LD_INT 4
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PPUSH
12837: CALL_OW 69
12841: AND
12842: IFFALSE 13374
12844: GO 12846
12846: DISABLE
// begin ChangeSideFog ( 4 , 1 ) ;
12847: LD_INT 4
12849: PPUSH
12850: LD_INT 1
12852: PPUSH
12853: CALL_OW 343
// DialogueOn ;
12857: CALL_OW 6
// CenterNowOnUnits ( allyCommander ) ;
12861: LD_EXP 11
12865: PPUSH
12866: CALL_OW 87
// SayRadio ( allyCommander , DM-1-Contact ) ;
12870: LD_EXP 11
12874: PPUSH
12875: LD_STRING DM-1-Contact
12877: PPUSH
12878: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Contact ) ;
12882: LD_EXP 9
12886: PPUSH
12887: LD_STRING D
12889: PUSH
12890: LD_STRING I
12892: PUSH
12893: LD_STRING J
12895: PUSH
12896: LD_STRING S
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: LIST
12903: PUSH
12904: LD_EXP 25
12908: ARRAY
12909: STR
12910: PUSH
12911: LD_STRING -1-Contact
12913: STR
12914: PPUSH
12915: CALL_OW 88
// if commander = 1 then
12919: LD_EXP 25
12923: PUSH
12924: LD_INT 1
12926: EQUAL
12927: IFFALSE 13059
// begin SayRadio ( allyCommander , DM-2-Contact ) ;
12929: LD_EXP 11
12933: PPUSH
12934: LD_STRING DM-2-Contact
12936: PPUSH
12937: CALL_OW 94
// Say ( playerCommander , DI-2-Contact ) ;
12941: LD_EXP 9
12945: PPUSH
12946: LD_STRING DI-2-Contact
12948: PPUSH
12949: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
12953: LD_INT 22
12955: PUSH
12956: LD_INT 8
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PUSH
12963: LD_INT 21
12965: PUSH
12966: LD_INT 1
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: PPUSH
12977: CALL_OW 69
12981: PUSH
12982: LD_INT 8
12984: PPUSH
12985: LD_INT 1
12987: PPUSH
12988: CALL_OW 81
12992: PUSH
12993: LD_INT 2
12995: EQUAL
12996: AND
12997: IFFALSE 13023
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
12999: LD_EXP 11
13003: PPUSH
13004: LD_STRING DM-3-Contact
13006: PPUSH
13007: CALL_OW 94
// Say ( playerCommander , DI-3-Contact ) ;
13011: LD_EXP 9
13015: PPUSH
13016: LD_STRING DI-3-Contact
13018: PPUSH
13019: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13023: LD_EXP 11
13027: PPUSH
13028: LD_STRING DM-4-Contact
13030: PPUSH
13031: CALL_OW 94
// Say ( playerCommander , DI-4-Contact ) ;
13035: LD_EXP 9
13039: PPUSH
13040: LD_STRING DI-4-Contact
13042: PPUSH
13043: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13047: LD_EXP 11
13051: PPUSH
13052: LD_STRING DM-5-Contact
13054: PPUSH
13055: CALL_OW 94
// end ; if commander = 2 then
13059: LD_EXP 25
13063: PUSH
13064: LD_INT 2
13066: EQUAL
13067: IFFALSE 13199
// begin SayRadio ( allyCommander , DM-2c-Contact ) ;
13069: LD_EXP 11
13073: PPUSH
13074: LD_STRING DM-2c-Contact
13076: PPUSH
13077: CALL_OW 94
// Say ( playerCommander , DJ-2-Contact ) ;
13081: LD_EXP 9
13085: PPUSH
13086: LD_STRING DJ-2-Contact
13088: PPUSH
13089: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13093: LD_INT 22
13095: PUSH
13096: LD_INT 8
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: PUSH
13103: LD_INT 21
13105: PUSH
13106: LD_INT 1
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PPUSH
13117: CALL_OW 69
13121: PUSH
13122: LD_INT 8
13124: PPUSH
13125: LD_INT 1
13127: PPUSH
13128: CALL_OW 81
13132: PUSH
13133: LD_INT 2
13135: EQUAL
13136: AND
13137: IFFALSE 13163
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13139: LD_EXP 11
13143: PPUSH
13144: LD_STRING DM-3-Contact
13146: PPUSH
13147: CALL_OW 94
// Say ( playerCommander , DJ-3-Contact ) ;
13151: LD_EXP 9
13155: PPUSH
13156: LD_STRING DJ-3-Contact
13158: PPUSH
13159: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13163: LD_EXP 11
13167: PPUSH
13168: LD_STRING DM-4-Contact
13170: PPUSH
13171: CALL_OW 94
// Say ( playerCommander , DJ-4-Contact ) ;
13175: LD_EXP 9
13179: PPUSH
13180: LD_STRING DJ-4-Contact
13182: PPUSH
13183: CALL_OW 88
// SayRadio ( allyCommander , DM-5a-Contact ) ;
13187: LD_EXP 11
13191: PPUSH
13192: LD_STRING DM-5a-Contact
13194: PPUSH
13195: CALL_OW 94
// end ; if commander = 3 then
13199: LD_EXP 25
13203: PUSH
13204: LD_INT 3
13206: EQUAL
13207: IFFALSE 13363
// begin SayRadio ( allyCommander , DM-2a-Contact ) ;
13209: LD_EXP 11
13213: PPUSH
13214: LD_STRING DM-2a-Contact
13216: PPUSH
13217: CALL_OW 94
// Say ( playerCommander , DS-2a-Contact ) ;
13221: LD_EXP 9
13225: PPUSH
13226: LD_STRING DS-2a-Contact
13228: PPUSH
13229: CALL_OW 88
// SayRadio ( allyCommander , DM-2b-Contact ) ;
13233: LD_EXP 11
13237: PPUSH
13238: LD_STRING DM-2b-Contact
13240: PPUSH
13241: CALL_OW 94
// Say ( playerCommander , DS-2b-Contact ) ;
13245: LD_EXP 9
13249: PPUSH
13250: LD_STRING DS-2b-Contact
13252: PPUSH
13253: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13257: LD_INT 22
13259: PUSH
13260: LD_INT 8
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PUSH
13267: LD_INT 21
13269: PUSH
13270: LD_INT 1
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: PPUSH
13281: CALL_OW 69
13285: PUSH
13286: LD_INT 8
13288: PPUSH
13289: LD_INT 1
13291: PPUSH
13292: CALL_OW 81
13296: PUSH
13297: LD_INT 2
13299: EQUAL
13300: AND
13301: IFFALSE 13327
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13303: LD_EXP 11
13307: PPUSH
13308: LD_STRING DM-3-Contact
13310: PPUSH
13311: CALL_OW 94
// Say ( playerCommander , DS-3-Contact ) ;
13315: LD_EXP 9
13319: PPUSH
13320: LD_STRING DS-3-Contact
13322: PPUSH
13323: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13327: LD_EXP 11
13331: PPUSH
13332: LD_STRING DM-4-Contact
13334: PPUSH
13335: CALL_OW 94
// Say ( playerCommander , DS-4-Contact ) ;
13339: LD_EXP 9
13343: PPUSH
13344: LD_STRING DS-4-Contact
13346: PPUSH
13347: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13351: LD_EXP 11
13355: PPUSH
13356: LD_STRING DM-5-Contact
13358: PPUSH
13359: CALL_OW 94
// end ; DialogueOff ;
13363: CALL_OW 7
// ChangeMissionObjectives ( O3 ) ;
13367: LD_STRING O3
13369: PPUSH
13370: CALL_OW 337
// end ;
13374: END
// every 0 0$10 trigger GameType = 1 and legDestCounter >= [ 15 , 20 , 25 ] [ Difficulty ] and FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) >= 5 do var time , sib , sources , i ;
13375: LD_EXP 2
13379: PUSH
13380: LD_INT 1
13382: EQUAL
13383: PUSH
13384: LD_EXP 18
13388: PUSH
13389: LD_INT 15
13391: PUSH
13392: LD_INT 20
13394: PUSH
13395: LD_INT 25
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: LIST
13402: PUSH
13403: LD_OWVAR 67
13407: ARRAY
13408: GREATEREQUAL
13409: AND
13410: PUSH
13411: LD_INT 22
13413: PUSH
13414: LD_INT 8
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: PUSH
13421: LD_INT 30
13423: PUSH
13424: LD_INT 1
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PPUSH
13435: CALL_OW 69
13439: AND
13440: PUSH
13441: LD_INT 22
13443: PUSH
13444: LD_INT 8
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PUSH
13451: LD_INT 21
13453: PUSH
13454: LD_INT 3
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: PPUSH
13465: CALL_OW 69
13469: PUSH
13470: LD_INT 5
13472: GREATEREQUAL
13473: AND
13474: IFFALSE 13997
13476: GO 13478
13478: DISABLE
13479: LD_INT 0
13481: PPUSH
13482: PPUSH
13483: PPUSH
13484: PPUSH
// begin DialogueOn ;
13485: CALL_OW 6
// SayRadio ( Farmer , DF-1-Leg ) ;
13489: LD_EXP 13
13493: PPUSH
13494: LD_STRING DF-1-Leg
13496: PPUSH
13497: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Leg ) ;
13501: LD_EXP 9
13505: PPUSH
13506: LD_STRING D
13508: PUSH
13509: LD_STRING I
13511: PUSH
13512: LD_STRING J
13514: PUSH
13515: LD_STRING S
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: LIST
13522: PUSH
13523: LD_EXP 25
13527: ARRAY
13528: STR
13529: PUSH
13530: LD_STRING -1-Leg
13532: STR
13533: PPUSH
13534: CALL_OW 88
// SayRadio ( Farmer , DF-2-Leg ) ;
13538: LD_EXP 13
13542: PPUSH
13543: LD_STRING DF-2-Leg
13545: PPUSH
13546: CALL_OW 94
// DialogueOff ;
13550: CALL_OW 7
// case Query ( QLegionOffer ) of 1 :
13554: LD_STRING QLegionOffer
13556: PPUSH
13557: CALL_OW 97
13561: PUSH
13562: LD_INT 1
13564: DOUBLE
13565: EQUAL
13566: IFTRUE 13570
13568: GO 13573
13570: POP
// ; 2 :
13571: GO 13587
13573: LD_INT 2
13575: DOUBLE
13576: EQUAL
13577: IFTRUE 13581
13579: GO 13586
13581: POP
// exit ; end ;
13582: GO 13997
13584: GO 13587
13586: POP
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-Leg ) ;
13587: LD_EXP 9
13591: PPUSH
13592: LD_STRING D
13594: PUSH
13595: LD_STRING I
13597: PUSH
13598: LD_STRING J
13600: PUSH
13601: LD_STRING S
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: LIST
13608: PUSH
13609: LD_EXP 25
13613: ARRAY
13614: STR
13615: PUSH
13616: LD_STRING -2-Leg
13618: STR
13619: PPUSH
13620: CALL_OW 88
// legOfferAccepted := true ;
13624: LD_ADDR_EXP 20
13628: PUSH
13629: LD_INT 1
13631: ST_TO_ADDR
// SetAreaMapShow ( legOfferArea , 1 ) ;
13632: LD_INT 21
13634: PPUSH
13635: LD_INT 1
13637: PPUSH
13638: CALL_OW 424
// CenterOnXY ( 190 , 227 ) ;
13642: LD_INT 190
13644: PPUSH
13645: LD_INT 227
13647: PPUSH
13648: CALL_OW 84
// time := [ 8 8$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
13652: LD_ADDR_VAR 0 1
13656: PUSH
13657: LD_INT 16800
13659: PUSH
13660: LD_INT 14700
13662: PUSH
13663: LD_INT 12600
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: LIST
13670: PUSH
13671: LD_OWVAR 67
13675: ARRAY
13676: ST_TO_ADDR
// sib := 100 ;
13677: LD_ADDR_VAR 0 2
13681: PUSH
13682: LD_INT 100
13684: ST_TO_ADDR
// disableGlobalTimer := true ;
13685: LD_ADDR_EXP 4
13689: PUSH
13690: LD_INT 1
13692: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13693: LD_INT 35
13695: PPUSH
13696: CALL_OW 67
// time := time - 0 0$1 ;
13700: LD_ADDR_VAR 0 1
13704: PUSH
13705: LD_VAR 0 1
13709: PUSH
13710: LD_INT 35
13712: MINUS
13713: ST_TO_ADDR
// sources := GetResourceArea ( legOfferArea , mat_siberit ) ;
13714: LD_ADDR_VAR 0 3
13718: PUSH
13719: LD_INT 21
13721: PPUSH
13722: LD_INT 3
13724: PPUSH
13725: CALL_OW 287
13729: ST_TO_ADDR
// display_strings := [ #SkrTime , tick , #Skr-LegOffer , sib , time ] ;
13730: LD_ADDR_OWVAR 47
13734: PUSH
13735: LD_STRING #SkrTime
13737: PUSH
13738: LD_OWVAR 1
13742: PUSH
13743: LD_STRING #Skr-LegOffer
13745: PUSH
13746: LD_VAR 0 2
13750: PUSH
13751: LD_VAR 0 1
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: ST_TO_ADDR
// if sources then
13763: LD_VAR 0 3
13767: IFFALSE 13799
// begin sib := sib - sources * 10 ;
13769: LD_ADDR_VAR 0 2
13773: PUSH
13774: LD_VAR 0 2
13778: PUSH
13779: LD_VAR 0 3
13783: PUSH
13784: LD_INT 10
13786: MUL
13787: MINUS
13788: ST_TO_ADDR
// EraseResourceArea ( legOfferArea , mat_siberit ) ;
13789: LD_INT 21
13791: PPUSH
13792: LD_INT 3
13794: PPUSH
13795: CALL_OW 286
// end ; until time = 0 0$00 or sib <= 0 or not FilterAllUnits ( [ f_side , 8 ] ) ;
13799: LD_VAR 0 1
13803: PUSH
13804: LD_INT 0
13806: EQUAL
13807: PUSH
13808: LD_VAR 0 2
13812: PUSH
13813: LD_INT 0
13815: LESSEQUAL
13816: OR
13817: PUSH
13818: LD_INT 22
13820: PUSH
13821: LD_INT 8
13823: PUSH
13824: EMPTY
13825: LIST
13826: LIST
13827: PPUSH
13828: CALL_OW 69
13832: NOT
13833: OR
13834: IFFALSE 13693
// SetAreaMapShow ( legOfferArea , 0 ) ;
13836: LD_INT 21
13838: PPUSH
13839: LD_INT 0
13841: PPUSH
13842: CALL_OW 424
// disableGlobalTimer := false ;
13846: LD_ADDR_EXP 4
13850: PUSH
13851: LD_INT 0
13853: ST_TO_ADDR
// if sib <= 0 then
13854: LD_VAR 0 2
13858: PUSH
13859: LD_INT 0
13861: LESSEQUAL
13862: IFFALSE 13978
// begin legChangeSide := true ;
13864: LD_ADDR_EXP 21
13868: PUSH
13869: LD_INT 1
13871: ST_TO_ADDR
// SayRadio ( Farmer , DF-4y-Leg ) ;
13872: LD_EXP 13
13876: PPUSH
13877: LD_STRING DF-4y-Leg
13879: PPUSH
13880: CALL_OW 94
// ChangeMissionObjectives ( O3a ) ;
13884: LD_STRING O3a
13886: PPUSH
13887: CALL_OW 337
// ChangeSideFog ( 8 , 1 ) ;
13891: LD_INT 8
13893: PPUSH
13894: LD_INT 1
13896: PPUSH
13897: CALL_OW 343
// SetAttitude ( 8 , 1 , att_friend , true ) ;
13901: LD_INT 8
13903: PPUSH
13904: LD_INT 1
13906: PPUSH
13907: LD_INT 1
13909: PPUSH
13910: LD_INT 1
13912: PPUSH
13913: CALL_OW 80
// SetAttitude ( 8 , 4 , att_friend , true ) ;
13917: LD_INT 8
13919: PPUSH
13920: LD_INT 4
13922: PPUSH
13923: LD_INT 1
13925: PPUSH
13926: LD_INT 1
13928: PPUSH
13929: CALL_OW 80
// SetAttitude ( 8 , 6 , att_enemy , true ) ;
13933: LD_INT 8
13935: PPUSH
13936: LD_INT 6
13938: PPUSH
13939: LD_INT 2
13941: PPUSH
13942: LD_INT 1
13944: PPUSH
13945: CALL_OW 80
// SetAttitude ( 8 , 3 , att_enemy , true ) ;
13949: LD_INT 8
13951: PPUSH
13952: LD_INT 3
13954: PPUSH
13955: LD_INT 2
13957: PPUSH
13958: LD_INT 1
13960: PPUSH
13961: CALL_OW 80
// wait ( 0 0$30 ) ;
13965: LD_INT 1050
13967: PPUSH
13968: CALL_OW 67
// PrepareLegionReinforcements ;
13972: CALL 10268 0 0
// end else
13976: GO 13997
// begin ChangeMissionObjectives ( O3a ) ;
13978: LD_STRING O3a
13980: PPUSH
13981: CALL_OW 337
// SayRadio ( Farmer , DF-4n-Leg ) ;
13985: LD_EXP 13
13989: PPUSH
13990: LD_STRING DF-4n-Leg
13992: PPUSH
13993: CALL_OW 94
// end ; end ;
13997: PPOPN 4
13999: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 and GetAttitude ( 8 , 1 ) = att_enemy do
14000: LD_INT 22
14002: PUSH
14003: LD_INT 8
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PUSH
14010: LD_INT 21
14012: PUSH
14013: LD_INT 1
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: PPUSH
14024: CALL_OW 69
14028: PUSH
14029: LD_INT 0
14031: EQUAL
14032: PUSH
14033: LD_INT 8
14035: PPUSH
14036: LD_INT 1
14038: PPUSH
14039: CALL_OW 81
14043: PUSH
14044: LD_INT 2
14046: EQUAL
14047: AND
14048: IFFALSE 14060
14050: GO 14052
14052: DISABLE
// ChangeMissionObjectives ( O3a ) ;
14053: LD_STRING O3a
14055: PPUSH
14056: CALL_OW 337
14060: END
// every 0 0$1 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) = 0 do
14061: LD_EXP 2
14065: PUSH
14066: LD_INT 1
14068: EQUAL
14069: PUSH
14070: LD_EXP 3
14074: AND
14075: PUSH
14076: LD_INT 22
14078: PUSH
14079: LD_INT 3
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: PUSH
14086: LD_INT 21
14088: PUSH
14089: LD_INT 1
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: PPUSH
14100: CALL_OW 69
14104: PUSH
14105: LD_INT 0
14107: EQUAL
14108: AND
14109: PUSH
14110: LD_INT 22
14112: PUSH
14113: LD_INT 3
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PUSH
14120: LD_INT 30
14122: PUSH
14123: LD_INT 1
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: PPUSH
14134: CALL_OW 69
14138: PUSH
14139: LD_INT 0
14141: EQUAL
14142: AND
14143: IFFALSE 14381
14145: GO 14147
14147: DISABLE
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Win ) ;
14148: LD_EXP 9
14152: PPUSH
14153: LD_STRING D
14155: PUSH
14156: LD_STRING I
14158: PUSH
14159: LD_STRING J
14161: PUSH
14162: LD_STRING S
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: LIST
14169: PUSH
14170: LD_EXP 25
14174: ARRAY
14175: STR
14176: PUSH
14177: LD_STRING -1-Win
14179: STR
14180: PPUSH
14181: CALL_OW 88
// if tick >= [ 150 150$0 , 130 130$0 , 110 110$0 ] [ Difficulty ] then
14185: LD_OWVAR 1
14189: PUSH
14190: LD_INT 315000
14192: PUSH
14193: LD_INT 273000
14195: PUSH
14196: LD_INT 231000
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: LIST
14203: PUSH
14204: LD_OWVAR 67
14208: ARRAY
14209: GREATEREQUAL
14210: IFFALSE 14225
// AddMedal ( med1 , - 1 ) else
14212: LD_STRING med1
14214: PPUSH
14215: LD_INT 1
14217: NEG
14218: PPUSH
14219: CALL_OW 101
14223: GO 14235
// AddMedal ( med1 , 1 ) ;
14225: LD_STRING med1
14227: PPUSH
14228: LD_INT 1
14230: PPUSH
14231: CALL_OW 101
// if allyDestCounter >= [ 20 , 15 , 10 ] [ Difficulty ] then
14235: LD_EXP 22
14239: PUSH
14240: LD_INT 20
14242: PUSH
14243: LD_INT 15
14245: PUSH
14246: LD_INT 10
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: LIST
14253: PUSH
14254: LD_OWVAR 67
14258: ARRAY
14259: GREATEREQUAL
14260: IFFALSE 14275
// AddMedal ( med2 , - 1 ) else
14262: LD_STRING med2
14264: PPUSH
14265: LD_INT 1
14267: NEG
14268: PPUSH
14269: CALL_OW 101
14273: GO 14285
// AddMedal ( med2 , 1 ) ;
14275: LD_STRING med2
14277: PPUSH
14278: LD_INT 1
14280: PPUSH
14281: CALL_OW 101
// if GetAttitude ( 8 , 1 ) = att_friend then
14285: LD_INT 8
14287: PPUSH
14288: LD_INT 1
14290: PPUSH
14291: CALL_OW 81
14295: PUSH
14296: LD_INT 1
14298: EQUAL
14299: IFFALSE 14313
// AddMedal ( med3 , 1 ) else
14301: LD_STRING med3
14303: PPUSH
14304: LD_INT 1
14306: PPUSH
14307: CALL_OW 101
14311: GO 14370
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 then
14313: LD_INT 22
14315: PUSH
14316: LD_INT 8
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: PUSH
14323: LD_INT 21
14325: PUSH
14326: LD_INT 1
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: PPUSH
14337: CALL_OW 69
14341: PUSH
14342: LD_INT 0
14344: EQUAL
14345: IFFALSE 14359
// AddMedal ( med3 , 2 ) else
14347: LD_STRING med3
14349: PPUSH
14350: LD_INT 2
14352: PPUSH
14353: CALL_OW 101
14357: GO 14370
// AddMedal ( med3 , - 1 ) ;
14359: LD_STRING med3
14361: PPUSH
14362: LD_INT 1
14364: NEG
14365: PPUSH
14366: CALL_OW 101
// GiveMedals ( MAIN ) ;
14370: LD_STRING MAIN
14372: PPUSH
14373: CALL_OW 102
// YouWin ;
14377: CALL_OW 103
// end ;
14381: END
// every 10 trigger GameType = 1 and staticMines and FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) do var i , j , tmp , x , y ;
14382: LD_EXP 2
14386: PUSH
14387: LD_INT 1
14389: EQUAL
14390: PUSH
14391: LD_EXP 16
14395: AND
14396: PUSH
14397: LD_INT 20
14399: PPUSH
14400: LD_INT 81
14402: PUSH
14403: LD_INT 8
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PPUSH
14410: CALL_OW 70
14414: AND
14415: IFFALSE 14694
14417: GO 14419
14419: DISABLE
14420: LD_INT 0
14422: PPUSH
14423: PPUSH
14424: PPUSH
14425: PPUSH
14426: PPUSH
// begin enable ;
14427: ENABLE
// tmp := FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) ;
14428: LD_ADDR_VAR 0 3
14432: PUSH
14433: LD_INT 20
14435: PPUSH
14436: LD_INT 81
14438: PUSH
14439: LD_INT 8
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: PPUSH
14446: CALL_OW 70
14450: ST_TO_ADDR
// if not tmp then
14451: LD_VAR 0 3
14455: NOT
14456: IFFALSE 14460
// exit ;
14458: GO 14694
// for i in tmp do
14460: LD_ADDR_VAR 0 1
14464: PUSH
14465: LD_VAR 0 3
14469: PUSH
14470: FOR_IN
14471: IFFALSE 14692
// begin x := GetX ( i ) ;
14473: LD_ADDR_VAR 0 4
14477: PUSH
14478: LD_VAR 0 1
14482: PPUSH
14483: CALL_OW 250
14487: ST_TO_ADDR
// y := GetY ( i ) ;
14488: LD_ADDR_VAR 0 5
14492: PUSH
14493: LD_VAR 0 1
14497: PPUSH
14498: CALL_OW 251
14502: ST_TO_ADDR
// if MineAtPos ( x , y ) then
14503: LD_VAR 0 4
14507: PPUSH
14508: LD_VAR 0 5
14512: PPUSH
14513: CALL_OW 458
14517: IFFALSE 14690
// begin LaunchMineAtPos ( x , y , 8 ) ;
14519: LD_VAR 0 4
14523: PPUSH
14524: LD_VAR 0 5
14528: PPUSH
14529: LD_INT 8
14531: PPUSH
14532: CALL_OW 456
// if not dialogueMineDetected then
14536: LD_EXP 28
14540: NOT
14541: IFFALSE 14602
// begin CenterNowOnXY ( x , y ) ;
14543: LD_VAR 0 4
14547: PPUSH
14548: LD_VAR 0 5
14552: PPUSH
14553: CALL_OW 86
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Mine ) ;
14557: LD_EXP 9
14561: PPUSH
14562: LD_STRING D
14564: PUSH
14565: LD_STRING I
14567: PUSH
14568: LD_STRING J
14570: PUSH
14571: LD_STRING S
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: LIST
14578: PUSH
14579: LD_EXP 25
14583: ARRAY
14584: STR
14585: PUSH
14586: LD_STRING -1-Mine
14588: STR
14589: PPUSH
14590: CALL_OW 88
// dialogueMineDetected := true ;
14594: LD_ADDR_EXP 28
14598: PUSH
14599: LD_INT 1
14601: ST_TO_ADDR
// end ; for j = 1 to staticMines do
14602: LD_ADDR_VAR 0 2
14606: PUSH
14607: DOUBLE
14608: LD_INT 1
14610: DEC
14611: ST_TO_ADDR
14612: LD_EXP 16
14616: PUSH
14617: FOR_TO
14618: IFFALSE 14688
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
14620: LD_EXP 16
14624: PUSH
14625: LD_VAR 0 2
14629: ARRAY
14630: PUSH
14631: LD_INT 1
14633: ARRAY
14634: PUSH
14635: LD_VAR 0 4
14639: EQUAL
14640: PUSH
14641: LD_EXP 16
14645: PUSH
14646: LD_VAR 0 2
14650: ARRAY
14651: PUSH
14652: LD_INT 2
14654: ARRAY
14655: PUSH
14656: LD_VAR 0 5
14660: EQUAL
14661: AND
14662: IFFALSE 14686
// begin staticMines := Delete ( staticMines , j ) ;
14664: LD_ADDR_EXP 16
14668: PUSH
14669: LD_EXP 16
14673: PPUSH
14674: LD_VAR 0 2
14678: PPUSH
14679: CALL_OW 3
14683: ST_TO_ADDR
// break ;
14684: GO 14688
// end ;
14686: GO 14617
14688: POP
14689: POP
// end ; end ;
14690: GO 14470
14692: POP
14693: POP
// end ;
14694: PPOPN 5
14696: END
// every 30 30$00 + 50 50$00 trigger GameType = 1 and game and sibBombAllowed and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_btype , b_factory ] ) do var bomb , e ;
14697: LD_EXP 2
14701: PUSH
14702: LD_INT 1
14704: EQUAL
14705: PUSH
14706: LD_EXP 3
14710: AND
14711: PUSH
14712: LD_EXP 23
14716: AND
14717: PUSH
14718: LD_EXP 47
14722: PUSH
14723: LD_EXP 7
14727: ARRAY
14728: PPUSH
14729: LD_INT 30
14731: PUSH
14732: LD_INT 3
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PPUSH
14739: CALL_OW 72
14743: AND
14744: IFFALSE 14948
14746: GO 14748
14748: DISABLE
14749: LD_INT 0
14751: PPUSH
14752: PPUSH
// begin enable ;
14753: ENABLE
// MC_InsertProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
14754: LD_EXP 7
14758: PPUSH
14759: LD_INT 23
14761: PUSH
14762: LD_INT 3
14764: PUSH
14765: LD_INT 3
14767: PUSH
14768: LD_INT 48
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: PUSH
14777: EMPTY
14778: LIST
14779: PPUSH
14780: CALL 80917 0 2
// repeat wait ( 0 0$1 ) ;
14784: LD_INT 35
14786: PPUSH
14787: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14791: LD_INT 22
14793: PUSH
14794: LD_INT 3
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PUSH
14801: LD_INT 34
14803: PUSH
14804: LD_INT 48
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: PPUSH
14815: CALL_OW 69
14819: IFFALSE 14784
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
14821: LD_ADDR_VAR 0 1
14825: PUSH
14826: LD_INT 22
14828: PUSH
14829: LD_INT 3
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: LD_INT 34
14838: PUSH
14839: LD_INT 48
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: PPUSH
14850: CALL_OW 69
14854: ST_TO_ADDR
// e := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) ;
14855: LD_ADDR_VAR 0 2
14859: PUSH
14860: LD_INT 81
14862: PUSH
14863: LD_INT 3
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PUSH
14870: LD_INT 21
14872: PUSH
14873: LD_INT 3
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: PPUSH
14884: CALL_OW 69
14888: ST_TO_ADDR
// if e then
14889: LD_VAR 0 2
14893: IFFALSE 14919
// e := NearestUnitToUnit ( e , bomb [ 1 ] ) ;
14895: LD_ADDR_VAR 0 2
14899: PUSH
14900: LD_VAR 0 2
14904: PPUSH
14905: LD_VAR 0 1
14909: PUSH
14910: LD_INT 1
14912: ARRAY
14913: PPUSH
14914: CALL_OW 74
14918: ST_TO_ADDR
// ComAttackPlace ( bomb , GetX ( e ) , GetY ( e ) ) ;
14919: LD_VAR 0 1
14923: PPUSH
14924: LD_VAR 0 2
14928: PPUSH
14929: CALL_OW 250
14933: PPUSH
14934: LD_VAR 0 2
14938: PPUSH
14939: CALL_OW 251
14943: PPUSH
14944: CALL_OW 116
// end ;
14948: PPOPN 2
14950: END
// every 0 0$2 trigger Difficulty > 1 and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) and GameType = 1 and game and GetTech ( tech_Behemoth , 3 ) = state_researched do var tmp , i ;
14951: LD_OWVAR 67
14955: PUSH
14956: LD_INT 1
14958: GREATER
14959: PUSH
14960: LD_EXP 47
14964: PUSH
14965: LD_EXP 7
14969: ARRAY
14970: PPUSH
14971: LD_INT 25
14973: PUSH
14974: LD_INT 3
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: PPUSH
14981: CALL_OW 72
14985: AND
14986: PUSH
14987: LD_EXP 2
14991: PUSH
14992: LD_INT 1
14994: EQUAL
14995: AND
14996: PUSH
14997: LD_EXP 3
15001: AND
15002: PUSH
15003: LD_INT 23
15005: PPUSH
15006: LD_INT 3
15008: PPUSH
15009: CALL_OW 321
15013: PUSH
15014: LD_INT 2
15016: EQUAL
15017: AND
15018: IFFALSE 15145
15020: GO 15022
15022: DISABLE
15023: LD_INT 0
15025: PPUSH
15026: PPUSH
// begin tmp := UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) ;
15027: LD_ADDR_VAR 0 1
15031: PUSH
15032: LD_EXP 47
15036: PUSH
15037: LD_EXP 7
15041: ARRAY
15042: PPUSH
15043: LD_INT 25
15045: PUSH
15046: LD_INT 3
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PPUSH
15053: CALL_OW 72
15057: ST_TO_ADDR
// if not tmp then
15058: LD_VAR 0 1
15062: NOT
15063: IFFALSE 15067
// exit ;
15065: GO 15145
// for i in tmp do
15067: LD_ADDR_VAR 0 2
15071: PUSH
15072: LD_VAR 0 1
15076: PUSH
15077: FOR_IN
15078: IFFALSE 15124
// begin SetTag ( i , 29 ) ;
15080: LD_VAR 0 2
15084: PPUSH
15085: LD_INT 29
15087: PPUSH
15088: CALL_OW 109
// ComExitBuilding ( i ) ;
15092: LD_VAR 0 2
15096: PPUSH
15097: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , 97 , 133 , 0 ) ;
15101: LD_VAR 0 2
15105: PPUSH
15106: LD_INT 37
15108: PPUSH
15109: LD_INT 97
15111: PPUSH
15112: LD_INT 133
15114: PPUSH
15115: LD_INT 0
15117: PPUSH
15118: CALL_OW 230
// end ;
15122: GO 15077
15124: POP
15125: POP
// wait ( 1 1$00 ) ;
15126: LD_INT 2100
15128: PPUSH
15129: CALL_OW 67
// MC_Reset ( mc_rus_1 , 29 ) ;
15133: LD_EXP 7
15137: PPUSH
15138: LD_INT 29
15140: PPUSH
15141: CALL 61247 0 2
// end ;
15145: PPOPN 2
15147: END
// every 7 7$00 trigger GameType = 1 and GetBType ( HexInfo ( 84 , 128 ) ) = b_warehouse and GetSide ( HexInfo ( 84 , 128 ) ) = 3 do var veh , depot ;
15148: LD_EXP 2
15152: PUSH
15153: LD_INT 1
15155: EQUAL
15156: PUSH
15157: LD_INT 84
15159: PPUSH
15160: LD_INT 128
15162: PPUSH
15163: CALL_OW 428
15167: PPUSH
15168: CALL_OW 266
15172: PUSH
15173: LD_INT 1
15175: EQUAL
15176: AND
15177: PUSH
15178: LD_INT 84
15180: PPUSH
15181: LD_INT 128
15183: PPUSH
15184: CALL_OW 428
15188: PPUSH
15189: CALL_OW 255
15193: PUSH
15194: LD_INT 3
15196: EQUAL
15197: AND
15198: IFFALSE 15371
15200: GO 15202
15202: DISABLE
15203: LD_INT 0
15205: PPUSH
15206: PPUSH
// begin enable ;
15207: ENABLE
// depot := HexInfo ( 84 , 128 ) ;
15208: LD_ADDR_VAR 0 2
15212: PUSH
15213: LD_INT 84
15215: PPUSH
15216: LD_INT 128
15218: PPUSH
15219: CALL_OW 428
15223: ST_TO_ADDR
// uc_side := 3 ;
15224: LD_ADDR_OWVAR 20
15228: PUSH
15229: LD_INT 3
15231: ST_TO_ADDR
// uc_nation := 3 ;
15232: LD_ADDR_OWVAR 21
15236: PUSH
15237: LD_INT 3
15239: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay , 0 ) ;
15240: LD_INT 21
15242: PPUSH
15243: LD_INT 3
15245: PPUSH
15246: LD_INT 3
15248: PPUSH
15249: LD_INT 51
15251: PPUSH
15252: LD_INT 0
15254: PPUSH
15255: CALL 24193 0 5
// veh := CreateVehicle ;
15259: LD_ADDR_VAR 0 1
15263: PUSH
15264: CALL_OW 45
15268: ST_TO_ADDR
// PlaceUnitXY ( veh , 126 , 227 , false ) ;
15269: LD_VAR 0 1
15273: PPUSH
15274: LD_INT 126
15276: PPUSH
15277: LD_INT 227
15279: PPUSH
15280: LD_INT 0
15282: PPUSH
15283: CALL_OW 48
// SetCargo ( veh , mat_oil , 100 ) ;
15287: LD_VAR 0 1
15291: PPUSH
15292: LD_INT 2
15294: PPUSH
15295: LD_INT 100
15297: PPUSH
15298: CALL_OW 290
// ComGive ( veh , depot ) ;
15302: LD_VAR 0 1
15306: PPUSH
15307: LD_VAR 0 2
15311: PPUSH
15312: CALL_OW 161
// AddComMoveXY ( veh , 126 , 227 ) ;
15316: LD_VAR 0 1
15320: PPUSH
15321: LD_INT 126
15323: PPUSH
15324: LD_INT 227
15326: PPUSH
15327: CALL_OW 171
// wait ( 0 0$10 ) ;
15331: LD_INT 350
15333: PPUSH
15334: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15338: LD_INT 35
15340: PPUSH
15341: CALL_OW 67
// until IsAt ( veh , 126 , 227 ) ;
15345: LD_VAR 0 1
15349: PPUSH
15350: LD_INT 126
15352: PPUSH
15353: LD_INT 227
15355: PPUSH
15356: CALL_OW 307
15360: IFFALSE 15338
// RemoveUnit ( veh ) ;
15362: LD_VAR 0 1
15366: PPUSH
15367: CALL_OW 64
// end ;
15371: PPOPN 2
15373: END
// every 9 9$00 trigger GameType = 1 and outpostEscape and commander = 2 do var veh , depot ;
15374: LD_EXP 2
15378: PUSH
15379: LD_INT 1
15381: EQUAL
15382: PUSH
15383: LD_EXP 27
15387: AND
15388: PUSH
15389: LD_EXP 25
15393: PUSH
15394: LD_INT 2
15396: EQUAL
15397: AND
15398: IFFALSE 15590
15400: GO 15402
15402: DISABLE
15403: LD_INT 0
15405: PPUSH
15406: PPUSH
// begin enable ;
15407: ENABLE
// if tick >= [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] then
15408: LD_OWVAR 1
15412: PUSH
15413: LD_INT 105000
15415: PUSH
15416: LD_INT 84000
15418: PUSH
15419: LD_INT 63000
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: LIST
15426: PUSH
15427: LD_OWVAR 67
15431: ARRAY
15432: GREATEREQUAL
15433: IFFALSE 15436
// disable ;
15435: DISABLE
// uc_side := 4 ;
15436: LD_ADDR_OWVAR 20
15440: PUSH
15441: LD_INT 4
15443: ST_TO_ADDR
// uc_nation := 1 ;
15444: LD_ADDR_OWVAR 21
15448: PUSH
15449: LD_INT 1
15451: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 0 ) ;
15452: LD_INT 2
15454: PPUSH
15455: LD_INT 3
15457: PPUSH
15458: LD_INT 3
15460: PPUSH
15461: LD_INT 12
15463: PPUSH
15464: LD_INT 0
15466: PPUSH
15467: CALL 24193 0 5
// veh := CreateVehicle ;
15471: LD_ADDR_VAR 0 1
15475: PUSH
15476: CALL_OW 45
15480: ST_TO_ADDR
// PlaceUnitXY ( veh , 229 , 226 , false ) ;
15481: LD_VAR 0 1
15485: PPUSH
15486: LD_INT 229
15488: PPUSH
15489: LD_INT 226
15491: PPUSH
15492: LD_INT 0
15494: PPUSH
15495: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
15499: LD_VAR 0 1
15503: PPUSH
15504: LD_INT 1
15506: PPUSH
15507: LD_INT 100
15509: PPUSH
15510: CALL_OW 290
// AddComMoveToArea ( veh , ruOutpostArea ) ;
15514: LD_VAR 0 1
15518: PPUSH
15519: LD_INT 25
15521: PPUSH
15522: CALL_OW 173
// AddComUnload ( veh ) ;
15526: LD_VAR 0 1
15530: PPUSH
15531: CALL_OW 219
// AddComMoveXY ( veh , 229 , 226 ) ;
15535: LD_VAR 0 1
15539: PPUSH
15540: LD_INT 229
15542: PPUSH
15543: LD_INT 226
15545: PPUSH
15546: CALL_OW 171
// wait ( 0 0$10 ) ;
15550: LD_INT 350
15552: PPUSH
15553: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15557: LD_INT 35
15559: PPUSH
15560: CALL_OW 67
// until IsAt ( veh , 229 , 226 ) ;
15564: LD_VAR 0 1
15568: PPUSH
15569: LD_INT 229
15571: PPUSH
15572: LD_INT 226
15574: PPUSH
15575: CALL_OW 307
15579: IFFALSE 15557
// RemoveUnit ( veh ) ;
15581: LD_VAR 0 1
15585: PPUSH
15586: CALL_OW 64
// end ;
15590: PPOPN 2
15592: END
// every 15 15$00 trigger GameType = 1 and game and reinforceAllowed do var i , j , veh , tmp , amount ;
15593: LD_EXP 2
15597: PUSH
15598: LD_INT 1
15600: EQUAL
15601: PUSH
15602: LD_EXP 3
15606: AND
15607: PUSH
15608: LD_EXP 24
15612: AND
15613: IFFALSE 15946
15615: GO 15617
15617: DISABLE
15618: LD_INT 0
15620: PPUSH
15621: PPUSH
15622: PPUSH
15623: PPUSH
15624: PPUSH
// begin enable ;
15625: ENABLE
// tmp := [ ] ;
15626: LD_ADDR_VAR 0 4
15630: PUSH
15631: EMPTY
15632: ST_TO_ADDR
// if commander = 1 then
15633: LD_EXP 25
15637: PUSH
15638: LD_INT 1
15640: EQUAL
15641: IFFALSE 15653
// amount := 3 else
15643: LD_ADDR_VAR 0 5
15647: PUSH
15648: LD_INT 3
15650: ST_TO_ADDR
15651: GO 15661
// amount := 2 ;
15653: LD_ADDR_VAR 0 5
15657: PUSH
15658: LD_INT 2
15660: ST_TO_ADDR
// for i = 1 to amount do
15661: LD_ADDR_VAR 0 1
15665: PUSH
15666: DOUBLE
15667: LD_INT 1
15669: DEC
15670: ST_TO_ADDR
15671: LD_VAR 0 5
15675: PUSH
15676: FOR_TO
15677: IFFALSE 15841
// begin wait ( 0 0$5 ) ;
15679: LD_INT 175
15681: PPUSH
15682: CALL_OW 67
// for j = 1 to 3 do
15686: LD_ADDR_VAR 0 2
15690: PUSH
15691: DOUBLE
15692: LD_INT 1
15694: DEC
15695: ST_TO_ADDR
15696: LD_INT 3
15698: PUSH
15699: FOR_TO
15700: IFFALSE 15837
// begin uc_side := 4 ;
15702: LD_ADDR_OWVAR 20
15706: PUSH
15707: LD_INT 4
15709: ST_TO_ADDR
// uc_nation := 1 ;
15710: LD_ADDR_OWVAR 21
15714: PUSH
15715: LD_INT 1
15717: ST_TO_ADDR
// PrepareVehicle ( [ us_medium_tracked , us_morphling ] [ rand ( 1 , 2 ) ] , engine_siberite , control_computer , [ us_laser , us_double_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
15718: LD_INT 3
15720: PUSH
15721: LD_INT 5
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: LD_INT 1
15730: PPUSH
15731: LD_INT 2
15733: PPUSH
15734: CALL_OW 12
15738: ARRAY
15739: PPUSH
15740: LD_INT 3
15742: PPUSH
15743: LD_INT 3
15745: PPUSH
15746: LD_INT 9
15748: PUSH
15749: LD_INT 5
15751: PUSH
15752: LD_INT 7
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: LIST
15759: PUSH
15760: LD_INT 1
15762: PPUSH
15763: LD_INT 3
15765: PPUSH
15766: CALL_OW 12
15770: ARRAY
15771: PPUSH
15772: LD_INT 100
15774: PPUSH
15775: CALL 24193 0 5
// veh := CreateVehicle ;
15779: LD_ADDR_VAR 0 3
15783: PUSH
15784: CALL_OW 45
15788: ST_TO_ADDR
// tmp := tmp ^ veh ;
15789: LD_ADDR_VAR 0 4
15793: PUSH
15794: LD_VAR 0 4
15798: PUSH
15799: LD_VAR 0 3
15803: ADD
15804: ST_TO_ADDR
// PlaceUnitArea ( veh , westSpawn , false ) ;
15805: LD_VAR 0 3
15809: PPUSH
15810: LD_INT 22
15812: PPUSH
15813: LD_INT 0
15815: PPUSH
15816: CALL_OW 49
// ComMoveXY ( veh , 119 , 215 ) ;
15820: LD_VAR 0 3
15824: PPUSH
15825: LD_INT 119
15827: PPUSH
15828: LD_INT 215
15830: PPUSH
15831: CALL_OW 111
// end ;
15835: GO 15699
15837: POP
15838: POP
// end ;
15839: GO 15676
15841: POP
15842: POP
// wait ( 0 0$3 ) ;
15843: LD_INT 105
15845: PPUSH
15846: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15850: LD_INT 35
15852: PPUSH
15853: CALL_OW 67
// for i in tmp do
15857: LD_ADDR_VAR 0 1
15861: PUSH
15862: LD_VAR 0 4
15866: PUSH
15867: FOR_IN
15868: IFFALSE 15935
// if IsDead ( i ) then
15870: LD_VAR 0 1
15874: PPUSH
15875: CALL_OW 301
15879: IFFALSE 15899
// tmp := tmp diff i else
15881: LD_ADDR_VAR 0 4
15885: PUSH
15886: LD_VAR 0 4
15890: PUSH
15891: LD_VAR 0 1
15895: DIFF
15896: ST_TO_ADDR
15897: GO 15933
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) ;
15899: LD_VAR 0 1
15903: PPUSH
15904: LD_INT 81
15906: PUSH
15907: LD_INT 4
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PPUSH
15914: CALL_OW 69
15918: PPUSH
15919: LD_VAR 0 1
15923: PPUSH
15924: CALL_OW 74
15928: PPUSH
15929: CALL_OW 115
15933: GO 15867
15935: POP
15936: POP
// until tmp = [ ] ;
15937: LD_VAR 0 4
15941: PUSH
15942: EMPTY
15943: EQUAL
15944: IFFALSE 15850
// end ;
15946: PPOPN 5
15948: END
// every 0 0$1 trigger GameType = 1 and game do var i , tmp ;
15949: LD_EXP 2
15953: PUSH
15954: LD_INT 1
15956: EQUAL
15957: PUSH
15958: LD_EXP 3
15962: AND
15963: IFFALSE 16064
15965: GO 15967
15967: DISABLE
15968: LD_INT 0
15970: PPUSH
15971: PPUSH
// begin enable ;
15972: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
15973: LD_ADDR_VAR 0 2
15977: PUSH
15978: LD_INT 3
15980: PUSH
15981: LD_INT 22
15983: PUSH
15984: LD_INT 1
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PUSH
15995: LD_INT 32
15997: PUSH
15998: LD_INT 1
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: PPUSH
16009: CALL_OW 69
16013: ST_TO_ADDR
// if tmp then
16014: LD_VAR 0 2
16018: IFFALSE 16064
// for i in tmp do
16020: LD_ADDR_VAR 0 1
16024: PUSH
16025: LD_VAR 0 2
16029: PUSH
16030: FOR_IN
16031: IFFALSE 16062
// if GetFuel ( i ) < 3 then
16033: LD_VAR 0 1
16037: PPUSH
16038: CALL_OW 261
16042: PUSH
16043: LD_INT 3
16045: LESS
16046: IFFALSE 16060
// SetFuel ( i , 3 ) ;
16048: LD_VAR 0 1
16052: PPUSH
16053: LD_INT 3
16055: PPUSH
16056: CALL_OW 240
16060: GO 16030
16062: POP
16063: POP
// end ;
16064: PPOPN 2
16066: END
// every 15 15$00 trigger game and GetAttitude ( 8 , 4 ) = att_enemy do var i , un , tmp ;
16067: LD_EXP 3
16071: PUSH
16072: LD_INT 8
16074: PPUSH
16075: LD_INT 4
16077: PPUSH
16078: CALL_OW 81
16082: PUSH
16083: LD_INT 2
16085: EQUAL
16086: AND
16087: IFFALSE 16297
16089: GO 16091
16091: DISABLE
16092: LD_INT 0
16094: PPUSH
16095: PPUSH
16096: PPUSH
// begin enable ;
16097: ENABLE
// tmp := [ ] ;
16098: LD_ADDR_VAR 0 3
16102: PUSH
16103: EMPTY
16104: ST_TO_ADDR
// for i = 1 to 4 do
16105: LD_ADDR_VAR 0 1
16109: PUSH
16110: DOUBLE
16111: LD_INT 1
16113: DEC
16114: ST_TO_ADDR
16115: LD_INT 4
16117: PUSH
16118: FOR_TO
16119: IFFALSE 16263
// begin uc_side := 8 ;
16121: LD_ADDR_OWVAR 20
16125: PUSH
16126: LD_INT 8
16128: ST_TO_ADDR
// uc_nation := nation_arabian ;
16129: LD_ADDR_OWVAR 21
16133: PUSH
16134: LD_INT 2
16136: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] , rand ( 60 , 80 ) ) ;
16137: LD_INT 11
16139: PPUSH
16140: LD_INT 1
16142: PPUSH
16143: LD_INT 5
16145: PPUSH
16146: LD_INT 24
16148: PUSH
16149: LD_INT 23
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: LD_INT 1
16158: PPUSH
16159: LD_INT 2
16161: PPUSH
16162: CALL_OW 12
16166: ARRAY
16167: PPUSH
16168: LD_INT 60
16170: PPUSH
16171: LD_INT 80
16173: PPUSH
16174: CALL_OW 12
16178: PPUSH
16179: CALL 24193 0 5
// un := CreateVehicle ;
16183: LD_ADDR_VAR 0 2
16187: PUSH
16188: CALL_OW 45
16192: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16193: LD_VAR 0 2
16197: PPUSH
16198: LD_INT 2
16200: PPUSH
16201: CALL_OW 233
// tmp := tmp ^ un ;
16205: LD_ADDR_VAR 0 3
16209: PUSH
16210: LD_VAR 0 3
16214: PUSH
16215: LD_VAR 0 2
16219: ADD
16220: ST_TO_ADDR
// PlaceUnitXY ( un , 88 , 2 , false ) ;
16221: LD_VAR 0 2
16225: PPUSH
16226: LD_INT 88
16228: PPUSH
16229: LD_INT 2
16231: PPUSH
16232: LD_INT 0
16234: PPUSH
16235: CALL_OW 48
// ComMoveXY ( un , 93 , 13 ) ;
16239: LD_VAR 0 2
16243: PPUSH
16244: LD_INT 93
16246: PPUSH
16247: LD_INT 13
16249: PPUSH
16250: CALL_OW 111
// wait ( 0 0$2 ) ;
16254: LD_INT 70
16256: PPUSH
16257: CALL_OW 67
// end ;
16261: GO 16118
16263: POP
16264: POP
// for i in tmp do
16265: LD_ADDR_VAR 0 1
16269: PUSH
16270: LD_VAR 0 3
16274: PUSH
16275: FOR_IN
16276: IFFALSE 16295
// AddComMoveXY ( i , 136 , 19 ) ;
16278: LD_VAR 0 1
16282: PPUSH
16283: LD_INT 136
16285: PPUSH
16286: LD_INT 19
16288: PPUSH
16289: CALL_OW 171
16293: GO 16275
16295: POP
16296: POP
// end ;
16297: PPOPN 3
16299: END
// every 7 7$30 + 7 7$30 trigger game do var i , base , tmp , target ;
16300: LD_EXP 3
16304: IFFALSE 17223
16306: GO 16308
16308: DISABLE
16309: LD_INT 0
16311: PPUSH
16312: PPUSH
16313: PPUSH
16314: PPUSH
// begin enable ;
16315: ENABLE
// base := mc_leg ;
16316: LD_ADDR_VAR 0 2
16320: PUSH
16321: LD_EXP 6
16325: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
16326: LD_INT 22
16328: PUSH
16329: LD_INT 8
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: PUSH
16336: LD_INT 23
16338: PUSH
16339: LD_INT 2
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PUSH
16346: LD_INT 30
16348: PUSH
16349: LD_INT 3
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: LIST
16360: PPUSH
16361: CALL_OW 69
16365: NOT
16366: IFFALSE 16370
// exit ;
16368: GO 17223
// if Prob ( 40 ) then
16370: LD_INT 40
16372: PPUSH
16373: CALL_OW 13
16377: IFFALSE 16506
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16379: LD_VAR 0 2
16383: PPUSH
16384: LD_INT 13
16386: PUSH
16387: LD_INT 1
16389: PUSH
16390: LD_INT 2
16392: PUSH
16393: LD_INT 28
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: PUSH
16402: LD_INT 13
16404: PUSH
16405: LD_INT 1
16407: PUSH
16408: LD_INT 2
16410: PUSH
16411: LD_INT 28
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: PUSH
16420: LD_INT 13
16422: PUSH
16423: LD_INT 1
16425: PUSH
16426: LD_INT 2
16428: PUSH
16429: LD_INT 28
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: PUSH
16438: LD_INT 13
16440: PUSH
16441: LD_INT 1
16443: PUSH
16444: LD_INT 2
16446: PUSH
16447: LD_INT 28
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: PUSH
16456: LD_INT 13
16458: PUSH
16459: LD_INT 1
16461: PUSH
16462: LD_INT 2
16464: PUSH
16465: LD_INT 28
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: PUSH
16474: LD_INT 13
16476: PUSH
16477: LD_INT 1
16479: PUSH
16480: LD_INT 2
16482: PUSH
16483: LD_INT 26
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: PPUSH
16500: CALL 80917 0 2
// end else
16504: GO 16723
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16506: LD_VAR 0 2
16510: PPUSH
16511: LD_INT 13
16513: PUSH
16514: LD_INT 1
16516: PUSH
16517: LD_INT 2
16519: PUSH
16520: LD_INT 27
16522: PUSH
16523: LD_INT 26
16525: PUSH
16526: LD_INT 26
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: LIST
16533: PUSH
16534: LD_INT 1
16536: PPUSH
16537: LD_INT 3
16539: PPUSH
16540: CALL_OW 12
16544: ARRAY
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: PUSH
16552: LD_INT 13
16554: PUSH
16555: LD_INT 1
16557: PUSH
16558: LD_INT 2
16560: PUSH
16561: LD_INT 27
16563: PUSH
16564: LD_INT 26
16566: PUSH
16567: LD_INT 26
16569: PUSH
16570: EMPTY
16571: LIST
16572: LIST
16573: LIST
16574: PUSH
16575: LD_INT 1
16577: PPUSH
16578: LD_INT 3
16580: PPUSH
16581: CALL_OW 12
16585: ARRAY
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: PUSH
16593: LD_INT 13
16595: PUSH
16596: LD_INT 1
16598: PUSH
16599: LD_INT 2
16601: PUSH
16602: LD_INT 26
16604: PUSH
16605: LD_INT 26
16607: PUSH
16608: LD_INT 29
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: LIST
16615: PUSH
16616: LD_INT 1
16618: PPUSH
16619: LD_INT 3
16621: PPUSH
16622: CALL_OW 12
16626: ARRAY
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: PUSH
16634: LD_INT 13
16636: PUSH
16637: LD_INT 1
16639: PUSH
16640: LD_INT 2
16642: PUSH
16643: LD_INT 26
16645: PUSH
16646: LD_INT 29
16648: PUSH
16649: LD_INT 29
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: LIST
16656: PUSH
16657: LD_INT 1
16659: PPUSH
16660: LD_INT 3
16662: PPUSH
16663: CALL_OW 12
16667: ARRAY
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: PUSH
16675: LD_INT 13
16677: PUSH
16678: LD_INT 1
16680: PUSH
16681: LD_INT 2
16683: PUSH
16684: LD_INT 29
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: PUSH
16693: LD_INT 13
16695: PUSH
16696: LD_INT 1
16698: PUSH
16699: LD_INT 2
16701: PUSH
16702: LD_INT 26
16704: PUSH
16705: EMPTY
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: PPUSH
16719: CALL 80917 0 2
// end ; repeat wait ( 0 0$1 ) ;
16723: LD_INT 35
16725: PPUSH
16726: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 6 or tick mod 10 10$00 = 0 ;
16730: LD_VAR 0 2
16734: PPUSH
16735: LD_INT 1
16737: PPUSH
16738: CALL 82335 0 2
16742: PUSH
16743: LD_INT 6
16745: GREATEREQUAL
16746: PUSH
16747: LD_OWVAR 1
16751: PUSH
16752: LD_INT 21000
16754: MOD
16755: PUSH
16756: LD_INT 0
16758: EQUAL
16759: OR
16760: IFFALSE 16723
// wait ( 0 0$30 ) ;
16762: LD_INT 1050
16764: PPUSH
16765: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
16769: LD_ADDR_VAR 0 3
16773: PUSH
16774: LD_VAR 0 2
16778: PPUSH
16779: LD_INT 1
16781: PPUSH
16782: CALL 82335 0 2
16786: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
16787: LD_ADDR_EXP 66
16791: PUSH
16792: LD_EXP 66
16796: PPUSH
16797: LD_VAR 0 2
16801: PPUSH
16802: LD_EXP 66
16806: PUSH
16807: LD_VAR 0 2
16811: ARRAY
16812: PUSH
16813: LD_VAR 0 3
16817: DIFF
16818: PPUSH
16819: CALL_OW 1
16823: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
16824: LD_ADDR_VAR 0 4
16828: PUSH
16829: LD_INT 0
16831: PPUSH
16832: LD_INT 2
16834: PPUSH
16835: CALL_OW 12
16839: ST_TO_ADDR
// if legChangeSide then
16840: LD_EXP 21
16844: IFFALSE 16854
// target := 2 ;
16846: LD_ADDR_VAR 0 4
16850: PUSH
16851: LD_INT 2
16853: ST_TO_ADDR
// if target = 2 then
16854: LD_VAR 0 4
16858: PUSH
16859: LD_INT 2
16861: EQUAL
16862: IFFALSE 16990
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16864: LD_ADDR_VAR 0 3
16868: PUSH
16869: LD_VAR 0 3
16873: PPUSH
16874: LD_INT 24
16876: PUSH
16877: LD_INT 250
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PPUSH
16884: CALL_OW 72
16888: ST_TO_ADDR
// for i in tmp do
16889: LD_ADDR_VAR 0 1
16893: PUSH
16894: LD_VAR 0 3
16898: PUSH
16899: FOR_IN
16900: IFFALSE 16940
// if GetDistUnitXY ( i , 112 , 64 ) > 9 then
16902: LD_VAR 0 1
16906: PPUSH
16907: LD_INT 112
16909: PPUSH
16910: LD_INT 64
16912: PPUSH
16913: CALL_OW 297
16917: PUSH
16918: LD_INT 9
16920: GREATER
16921: IFFALSE 16938
// ComMoveXY ( i , 112 , 64 ) ;
16923: LD_VAR 0 1
16927: PPUSH
16928: LD_INT 112
16930: PPUSH
16931: LD_INT 64
16933: PPUSH
16934: CALL_OW 111
16938: GO 16899
16940: POP
16941: POP
// wait ( 0 0$1 ) ;
16942: LD_INT 35
16944: PPUSH
16945: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 112 , 64 , 9 ] ) >= ( tmp - 1 ) ;
16949: LD_VAR 0 3
16953: PPUSH
16954: LD_INT 92
16956: PUSH
16957: LD_INT 112
16959: PUSH
16960: LD_INT 64
16962: PUSH
16963: LD_INT 9
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: PPUSH
16972: CALL_OW 72
16976: PUSH
16977: LD_VAR 0 3
16981: PUSH
16982: LD_INT 1
16984: MINUS
16985: GREATEREQUAL
16986: IFFALSE 16864
// end else
16988: GO 17114
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
16990: LD_ADDR_VAR 0 3
16994: PUSH
16995: LD_VAR 0 3
16999: PPUSH
17000: LD_INT 24
17002: PUSH
17003: LD_INT 250
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PPUSH
17010: CALL_OW 72
17014: ST_TO_ADDR
// for i in tmp do
17015: LD_ADDR_VAR 0 1
17019: PUSH
17020: LD_VAR 0 3
17024: PUSH
17025: FOR_IN
17026: IFFALSE 17066
// if GetDistUnitXY ( i , 174 , 94 ) > 9 then
17028: LD_VAR 0 1
17032: PPUSH
17033: LD_INT 174
17035: PPUSH
17036: LD_INT 94
17038: PPUSH
17039: CALL_OW 297
17043: PUSH
17044: LD_INT 9
17046: GREATER
17047: IFFALSE 17064
// ComMoveXY ( i , 174 , 94 ) ;
17049: LD_VAR 0 1
17053: PPUSH
17054: LD_INT 174
17056: PPUSH
17057: LD_INT 94
17059: PPUSH
17060: CALL_OW 111
17064: GO 17025
17066: POP
17067: POP
// wait ( 0 0$1 ) ;
17068: LD_INT 35
17070: PPUSH
17071: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 174 , 94 , 9 ] ) >= ( tmp - 1 ) ;
17075: LD_VAR 0 3
17079: PPUSH
17080: LD_INT 92
17082: PUSH
17083: LD_INT 174
17085: PUSH
17086: LD_INT 94
17088: PUSH
17089: LD_INT 9
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: PPUSH
17098: CALL_OW 72
17102: PUSH
17103: LD_VAR 0 3
17107: PUSH
17108: LD_INT 1
17110: MINUS
17111: GREATEREQUAL
17112: IFFALSE 16990
// end ; repeat wait ( 0 0$1 ) ;
17114: LD_INT 35
17116: PPUSH
17117: CALL_OW 67
// for i in tmp do
17121: LD_ADDR_VAR 0 1
17125: PUSH
17126: LD_VAR 0 3
17130: PUSH
17131: FOR_IN
17132: IFFALSE 17214
// begin if GetLives ( i ) > 251 then
17134: LD_VAR 0 1
17138: PPUSH
17139: CALL_OW 256
17143: PUSH
17144: LD_INT 251
17146: GREATER
17147: IFFALSE 17185
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
17149: LD_VAR 0 1
17153: PPUSH
17154: LD_INT 81
17156: PUSH
17157: LD_INT 8
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PPUSH
17164: CALL_OW 69
17168: PPUSH
17169: LD_VAR 0 1
17173: PPUSH
17174: CALL_OW 74
17178: PPUSH
17179: CALL_OW 115
17183: GO 17212
// if IsDead ( i ) then
17185: LD_VAR 0 1
17189: PPUSH
17190: CALL_OW 301
17194: IFFALSE 17212
// tmp := tmp diff i ;
17196: LD_ADDR_VAR 0 3
17200: PUSH
17201: LD_VAR 0 3
17205: PUSH
17206: LD_VAR 0 1
17210: DIFF
17211: ST_TO_ADDR
// end ;
17212: GO 17131
17214: POP
17215: POP
// until not tmp ;
17216: LD_VAR 0 3
17220: NOT
17221: IFFALSE 17114
// end ;
17223: PPOPN 4
17225: END
// every 7 7$30 trigger game do var i , base , tmp , target , teleport ;
17226: LD_EXP 3
17230: IFFALSE 18218
17232: GO 17234
17234: DISABLE
17235: LD_INT 0
17237: PPUSH
17238: PPUSH
17239: PPUSH
17240: PPUSH
17241: PPUSH
// begin enable ;
17242: ENABLE
// if not UnitFilter ( mc_bases [ mc_rus_2 ] , [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
17243: LD_EXP 47
17247: PUSH
17248: LD_EXP 8
17252: ARRAY
17253: PPUSH
17254: LD_INT 22
17256: PUSH
17257: LD_INT 3
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PUSH
17264: LD_INT 30
17266: PUSH
17267: LD_INT 3
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PPUSH
17278: CALL_OW 72
17282: NOT
17283: IFFALSE 17287
// exit ;
17285: GO 18218
// base := mc_rus_2 ;
17287: LD_ADDR_VAR 0 2
17291: PUSH
17292: LD_EXP 8
17296: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
17297: LD_ADDR_VAR 0 5
17301: PUSH
17302: LD_INT 22
17304: PUSH
17305: LD_INT 3
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PUSH
17312: LD_INT 30
17314: PUSH
17315: LD_INT 34
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: PPUSH
17326: CALL_OW 69
17330: ST_TO_ADDR
// if Prob ( 40 ) then
17331: LD_INT 40
17333: PPUSH
17334: CALL_OW 13
17338: IFFALSE 17467
// begin MC_InsertProduceList ( base , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17340: LD_VAR 0 2
17344: PPUSH
17345: LD_INT 22
17347: PUSH
17348: LD_INT 3
17350: PUSH
17351: LD_INT 3
17353: PUSH
17354: LD_INT 49
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: PUSH
17363: LD_INT 22
17365: PUSH
17366: LD_INT 3
17368: PUSH
17369: LD_INT 3
17371: PUSH
17372: LD_INT 49
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: PUSH
17381: LD_INT 22
17383: PUSH
17384: LD_INT 3
17386: PUSH
17387: LD_INT 3
17389: PUSH
17390: LD_INT 49
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: PUSH
17399: LD_INT 24
17401: PUSH
17402: LD_INT 3
17404: PUSH
17405: LD_INT 3
17407: PUSH
17408: LD_INT 46
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: PUSH
17417: LD_INT 24
17419: PUSH
17420: LD_INT 3
17422: PUSH
17423: LD_INT 3
17425: PUSH
17426: LD_INT 46
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: PUSH
17435: LD_INT 24
17437: PUSH
17438: LD_INT 3
17440: PUSH
17441: LD_INT 3
17443: PUSH
17444: LD_INT 46
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: PPUSH
17461: CALL 80917 0 2
// end else
17465: GO 17592
// begin MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17467: LD_VAR 0 2
17471: PPUSH
17472: LD_INT 24
17474: PUSH
17475: LD_INT 3
17477: PUSH
17478: LD_INT 3
17480: PUSH
17481: LD_INT 47
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: PUSH
17490: LD_INT 24
17492: PUSH
17493: LD_INT 3
17495: PUSH
17496: LD_INT 3
17498: PUSH
17499: LD_INT 47
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 24
17510: PUSH
17511: LD_INT 3
17513: PUSH
17514: LD_INT 3
17516: PUSH
17517: LD_INT 47
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 24
17528: PUSH
17529: LD_INT 3
17531: PUSH
17532: LD_INT 3
17534: PUSH
17535: LD_INT 46
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: PUSH
17544: LD_INT 24
17546: PUSH
17547: LD_INT 3
17549: PUSH
17550: LD_INT 3
17552: PUSH
17553: LD_INT 46
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 24
17564: PUSH
17565: LD_INT 3
17567: PUSH
17568: LD_INT 3
17570: PUSH
17571: LD_INT 46
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: PPUSH
17588: CALL 80917 0 2
// end ; if Difficulty > 1 then
17592: LD_OWVAR 67
17596: PUSH
17597: LD_INT 1
17599: GREATER
17600: IFFALSE 17632
// MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
17602: LD_VAR 0 2
17606: PPUSH
17607: LD_INT 24
17609: PUSH
17610: LD_INT 3
17612: PUSH
17613: LD_INT 3
17615: PUSH
17616: LD_INT 47
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: PUSH
17625: EMPTY
17626: LIST
17627: PPUSH
17628: CALL 80917 0 2
// repeat wait ( 0 0$1 ) ;
17632: LD_INT 35
17634: PPUSH
17635: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] or tick mod 10 10$00 = 0 ;
17639: LD_VAR 0 2
17643: PPUSH
17644: LD_INT 1
17646: PPUSH
17647: CALL 82335 0 2
17651: PUSH
17652: LD_INT 6
17654: PUSH
17655: LD_INT 7
17657: PUSH
17658: LD_INT 7
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: LIST
17665: PUSH
17666: LD_OWVAR 67
17670: ARRAY
17671: GREATEREQUAL
17672: PUSH
17673: LD_OWVAR 1
17677: PUSH
17678: LD_INT 21000
17680: MOD
17681: PUSH
17682: LD_INT 0
17684: EQUAL
17685: OR
17686: IFFALSE 17632
// wait ( 0 0$45 ) ;
17688: LD_INT 1575
17690: PPUSH
17691: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
17695: LD_ADDR_VAR 0 3
17699: PUSH
17700: LD_VAR 0 2
17704: PPUSH
17705: LD_INT 1
17707: PPUSH
17708: CALL 82335 0 2
17712: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
17713: LD_ADDR_EXP 66
17717: PUSH
17718: LD_EXP 66
17722: PPUSH
17723: LD_VAR 0 2
17727: PPUSH
17728: LD_EXP 66
17732: PUSH
17733: LD_VAR 0 2
17737: ARRAY
17738: PUSH
17739: LD_VAR 0 3
17743: DIFF
17744: PPUSH
17745: CALL_OW 1
17749: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
17750: LD_ADDR_VAR 0 4
17754: PUSH
17755: LD_INT 0
17757: PPUSH
17758: LD_INT 1
17760: PPUSH
17761: CALL_OW 12
17765: ST_TO_ADDR
// if target then
17766: LD_VAR 0 4
17770: IFFALSE 17898
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17772: LD_ADDR_VAR 0 3
17776: PUSH
17777: LD_VAR 0 3
17781: PPUSH
17782: LD_INT 24
17784: PUSH
17785: LD_INT 250
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PPUSH
17792: CALL_OW 72
17796: ST_TO_ADDR
// for i in tmp do
17797: LD_ADDR_VAR 0 1
17801: PUSH
17802: LD_VAR 0 3
17806: PUSH
17807: FOR_IN
17808: IFFALSE 17848
// if GetDistUnitXY ( i , 84 , 32 ) > 9 then
17810: LD_VAR 0 1
17814: PPUSH
17815: LD_INT 84
17817: PPUSH
17818: LD_INT 32
17820: PPUSH
17821: CALL_OW 297
17825: PUSH
17826: LD_INT 9
17828: GREATER
17829: IFFALSE 17846
// ComMoveXY ( i , 84 , 32 ) ;
17831: LD_VAR 0 1
17835: PPUSH
17836: LD_INT 84
17838: PPUSH
17839: LD_INT 32
17841: PPUSH
17842: CALL_OW 111
17846: GO 17807
17848: POP
17849: POP
// wait ( 0 0$1 ) ;
17850: LD_INT 35
17852: PPUSH
17853: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 84 , 32 , 9 ] ) >= ( tmp - 1 ) ;
17857: LD_VAR 0 3
17861: PPUSH
17862: LD_INT 92
17864: PUSH
17865: LD_INT 84
17867: PUSH
17868: LD_INT 32
17870: PUSH
17871: LD_INT 9
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: PPUSH
17880: CALL_OW 72
17884: PUSH
17885: LD_VAR 0 3
17889: PUSH
17890: LD_INT 1
17892: MINUS
17893: GREATEREQUAL
17894: IFFALSE 17772
// end else
17896: GO 18058
// begin if teleport then
17898: LD_VAR 0 5
17902: IFFALSE 17922
// ComEnterUnit ( tmp , teleport [ 1 ] ) ;
17904: LD_VAR 0 3
17908: PPUSH
17909: LD_VAR 0 5
17913: PUSH
17914: LD_INT 1
17916: ARRAY
17917: PPUSH
17918: CALL_OW 120
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17922: LD_ADDR_VAR 0 3
17926: PUSH
17927: LD_VAR 0 3
17931: PPUSH
17932: LD_INT 24
17934: PUSH
17935: LD_INT 250
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PPUSH
17942: CALL_OW 72
17946: ST_TO_ADDR
// for i in tmp do
17947: LD_ADDR_VAR 0 1
17951: PUSH
17952: LD_VAR 0 3
17956: PUSH
17957: FOR_IN
17958: IFFALSE 18010
// if GetDistUnitXY ( i , 140 , 219 ) > 9 and not HasTask ( i ) then
17960: LD_VAR 0 1
17964: PPUSH
17965: LD_INT 140
17967: PPUSH
17968: LD_INT 219
17970: PPUSH
17971: CALL_OW 297
17975: PUSH
17976: LD_INT 9
17978: GREATER
17979: PUSH
17980: LD_VAR 0 1
17984: PPUSH
17985: CALL_OW 314
17989: NOT
17990: AND
17991: IFFALSE 18008
// AddComMoveXY ( i , 140 , 219 ) ;
17993: LD_VAR 0 1
17997: PPUSH
17998: LD_INT 140
18000: PPUSH
18001: LD_INT 219
18003: PPUSH
18004: CALL_OW 171
18008: GO 17957
18010: POP
18011: POP
// wait ( 0 0$1 ) ;
18012: LD_INT 35
18014: PPUSH
18015: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 140 , 219 , 9 ] ) >= ( tmp - 1 ) ;
18019: LD_VAR 0 3
18023: PPUSH
18024: LD_INT 92
18026: PUSH
18027: LD_INT 140
18029: PUSH
18030: LD_INT 219
18032: PUSH
18033: LD_INT 9
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: PPUSH
18042: CALL_OW 72
18046: PUSH
18047: LD_VAR 0 3
18051: PUSH
18052: LD_INT 1
18054: MINUS
18055: GREATEREQUAL
18056: IFFALSE 17922
// end ; repeat wait ( 0 0$1 ) ;
18058: LD_INT 35
18060: PPUSH
18061: CALL_OW 67
// for i in tmp do
18065: LD_ADDR_VAR 0 1
18069: PUSH
18070: LD_VAR 0 3
18074: PUSH
18075: FOR_IN
18076: IFFALSE 18209
// begin if GetLives ( i ) > 251 then
18078: LD_VAR 0 1
18082: PPUSH
18083: CALL_OW 256
18087: PUSH
18088: LD_INT 251
18090: GREATER
18091: IFFALSE 18180
// begin if GetWeapon ( i ) = ru_time_lapser then
18093: LD_VAR 0 1
18097: PPUSH
18098: CALL_OW 264
18102: PUSH
18103: LD_INT 49
18105: EQUAL
18106: IFFALSE 18144
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) else
18108: LD_VAR 0 1
18112: PPUSH
18113: LD_INT 81
18115: PUSH
18116: LD_INT 3
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PPUSH
18123: CALL_OW 69
18127: PPUSH
18128: LD_VAR 0 1
18132: PPUSH
18133: CALL_OW 74
18137: PPUSH
18138: CALL_OW 112
18142: GO 18178
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18144: LD_VAR 0 1
18148: PPUSH
18149: LD_INT 81
18151: PUSH
18152: LD_INT 3
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PPUSH
18159: CALL_OW 69
18163: PPUSH
18164: LD_VAR 0 1
18168: PPUSH
18169: CALL_OW 74
18173: PPUSH
18174: CALL_OW 115
// end else
18178: GO 18207
// if IsDead ( i ) then
18180: LD_VAR 0 1
18184: PPUSH
18185: CALL_OW 301
18189: IFFALSE 18207
// tmp := tmp diff i ;
18191: LD_ADDR_VAR 0 3
18195: PUSH
18196: LD_VAR 0 3
18200: PUSH
18201: LD_VAR 0 1
18205: DIFF
18206: ST_TO_ADDR
// end ;
18207: GO 18075
18209: POP
18210: POP
// until not tmp ;
18211: LD_VAR 0 3
18215: NOT
18216: IFFALSE 18058
// end ;
18218: PPOPN 5
18220: END
// every 12 12$30 + 11 11$30 trigger game do var i , base , tmp , target ;
18221: LD_EXP 3
18225: IFFALSE 18607
18227: GO 18229
18229: DISABLE
18230: LD_INT 0
18232: PPUSH
18233: PPUSH
18234: PPUSH
18235: PPUSH
// begin enable ;
18236: ENABLE
// base := mc_amer ;
18237: LD_ADDR_VAR 0 2
18241: PUSH
18242: LD_EXP 5
18246: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_btype , b_factory ] ] ) then
18247: LD_INT 22
18249: PUSH
18250: LD_INT 4
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: LD_INT 23
18259: PUSH
18260: LD_INT 1
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 30
18269: PUSH
18270: LD_INT 3
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: LIST
18281: PPUSH
18282: CALL_OW 69
18286: NOT
18287: IFFALSE 18291
// exit ;
18289: GO 18607
// MC_InsertProduceList ( base , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_laser ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] ] ) ;
18291: LD_VAR 0 2
18295: PPUSH
18296: LD_INT 3
18298: PUSH
18299: LD_INT 1
18301: PUSH
18302: LD_INT 2
18304: PUSH
18305: LD_INT 5
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: PUSH
18314: LD_INT 3
18316: PUSH
18317: LD_INT 1
18319: PUSH
18320: LD_INT 2
18322: PUSH
18323: LD_INT 9
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 3
18334: PUSH
18335: LD_INT 1
18337: PUSH
18338: LD_INT 2
18340: PUSH
18341: LD_INT 7
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: PUSH
18350: LD_INT 3
18352: PUSH
18353: LD_INT 1
18355: PUSH
18356: LD_INT 2
18358: PUSH
18359: LD_INT 7
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 3
18370: PUSH
18371: LD_INT 1
18373: PUSH
18374: LD_INT 2
18376: PUSH
18377: LD_INT 7
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: PPUSH
18393: CALL 80917 0 2
// repeat wait ( 0 0$1 ) ;
18397: LD_INT 35
18399: PPUSH
18400: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 5 or tick mod 10 10$00 = 0 ;
18404: LD_VAR 0 2
18408: PPUSH
18409: LD_INT 1
18411: PPUSH
18412: CALL 82335 0 2
18416: PUSH
18417: LD_INT 5
18419: GREATEREQUAL
18420: PUSH
18421: LD_OWVAR 1
18425: PUSH
18426: LD_INT 21000
18428: MOD
18429: PUSH
18430: LD_INT 0
18432: EQUAL
18433: OR
18434: IFFALSE 18397
// wait ( 0 0$30 ) ;
18436: LD_INT 1050
18438: PPUSH
18439: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
18443: LD_ADDR_VAR 0 3
18447: PUSH
18448: LD_VAR 0 2
18452: PPUSH
18453: LD_INT 1
18455: PPUSH
18456: CALL 82335 0 2
18460: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
18461: LD_ADDR_EXP 66
18465: PUSH
18466: LD_EXP 66
18470: PPUSH
18471: LD_VAR 0 2
18475: PPUSH
18476: LD_EXP 66
18480: PUSH
18481: LD_VAR 0 2
18485: ARRAY
18486: PUSH
18487: LD_VAR 0 3
18491: DIFF
18492: PPUSH
18493: CALL_OW 1
18497: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18498: LD_INT 35
18500: PPUSH
18501: CALL_OW 67
// for i in tmp do
18505: LD_ADDR_VAR 0 1
18509: PUSH
18510: LD_VAR 0 3
18514: PUSH
18515: FOR_IN
18516: IFFALSE 18598
// begin if GetLives ( i ) > 251 then
18518: LD_VAR 0 1
18522: PPUSH
18523: CALL_OW 256
18527: PUSH
18528: LD_INT 251
18530: GREATER
18531: IFFALSE 18569
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) else
18533: LD_VAR 0 1
18537: PPUSH
18538: LD_INT 81
18540: PUSH
18541: LD_INT 4
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PPUSH
18548: CALL_OW 69
18552: PPUSH
18553: LD_VAR 0 1
18557: PPUSH
18558: CALL_OW 74
18562: PPUSH
18563: CALL_OW 115
18567: GO 18596
// if IsDead ( i ) then
18569: LD_VAR 0 1
18573: PPUSH
18574: CALL_OW 301
18578: IFFALSE 18596
// tmp := tmp diff i ;
18580: LD_ADDR_VAR 0 3
18584: PUSH
18585: LD_VAR 0 3
18589: PUSH
18590: LD_VAR 0 1
18594: DIFF
18595: ST_TO_ADDR
// end ;
18596: GO 18515
18598: POP
18599: POP
// until not tmp ;
18600: LD_VAR 0 3
18604: NOT
18605: IFFALSE 18498
// end ; end_of_file
18607: PPOPN 4
18609: END
// export function CustomEvent ( event ) ; begin
18610: LD_INT 0
18612: PPUSH
// end ;
18613: LD_VAR 0 2
18617: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 then
18618: LD_VAR 0 1
18622: PUSH
18623: LD_INT 1
18625: EQUAL
18626: PUSH
18627: LD_VAR 0 2
18631: PUSH
18632: LD_INT 4
18634: EQUAL
18635: AND
18636: IFFALSE 18664
// begin SayRadio ( Powell , DP-Lost ) ;
18638: LD_EXP 12
18642: PPUSH
18643: LD_STRING DP-Lost
18645: PPUSH
18646: CALL_OW 94
// wait ( 0 0$2 ) ;
18650: LD_INT 70
18652: PPUSH
18653: CALL_OW 67
// YouLost ( FriendlyFire ) ;
18657: LD_STRING FriendlyFire
18659: PPUSH
18660: CALL_OW 104
// end ; end ;
18664: PPOPN 2
18666: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
18667: LD_VAR 0 1
18671: PPUSH
18672: CALL 100447 0 1
// if GameType = 1 then
18676: LD_EXP 2
18680: PUSH
18681: LD_INT 1
18683: EQUAL
18684: IFFALSE 18919
// begin if un = playerCommander then
18686: LD_VAR 0 1
18690: PUSH
18691: LD_EXP 9
18695: EQUAL
18696: IFFALSE 18705
// YouLost ( commanderDied ) ;
18698: LD_STRING commanderDied
18700: PPUSH
18701: CALL_OW 104
// if un = allyCommander then
18705: LD_VAR 0 1
18709: PUSH
18710: LD_EXP 11
18714: EQUAL
18715: IFFALSE 18724
// YouLost ( Theta ) ;
18717: LD_STRING Theta
18719: PPUSH
18720: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18724: LD_VAR 0 1
18728: PUSH
18729: LD_INT 22
18731: PUSH
18732: LD_INT 8
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 2
18741: PUSH
18742: LD_INT 21
18744: PUSH
18745: LD_INT 1
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: LD_INT 21
18754: PUSH
18755: LD_INT 3
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: LIST
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PPUSH
18771: CALL_OW 69
18775: IN
18776: IFFALSE 18792
// legDestCounter := legDestCounter + 1 ;
18778: LD_ADDR_EXP 18
18782: PUSH
18783: LD_EXP 18
18787: PUSH
18788: LD_INT 1
18790: PLUS
18791: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
18792: LD_VAR 0 1
18796: PUSH
18797: LD_INT 22
18799: PUSH
18800: LD_INT 4
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 2
18809: PUSH
18810: LD_INT 21
18812: PUSH
18813: LD_INT 1
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 21
18822: PUSH
18823: LD_INT 3
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: LIST
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PPUSH
18839: CALL_OW 69
18843: IN
18844: IFFALSE 18860
// allyDestCounter := allyDestCounter + 1 ;
18846: LD_ADDR_EXP 22
18850: PUSH
18851: LD_EXP 22
18855: PUSH
18856: LD_INT 1
18858: PLUS
18859: ST_TO_ADDR
// if un in ruOutpost then
18860: LD_VAR 0 1
18864: PUSH
18865: LD_EXP 14
18869: IN
18870: IFFALSE 18919
// begin ruOutpost := ruOutpost diff un ;
18872: LD_ADDR_EXP 14
18876: PUSH
18877: LD_EXP 14
18881: PUSH
18882: LD_VAR 0 1
18886: DIFF
18887: ST_TO_ADDR
// ruEscape := Replace ( ruEscape , 1 , ruEscape [ 1 ] + 1 ) ;
18888: LD_ADDR_EXP 15
18892: PUSH
18893: LD_EXP 15
18897: PPUSH
18898: LD_INT 1
18900: PPUSH
18901: LD_EXP 15
18905: PUSH
18906: LD_INT 1
18908: ARRAY
18909: PUSH
18910: LD_INT 1
18912: PLUS
18913: PPUSH
18914: CALL_OW 1
18918: ST_TO_ADDR
// end ; end ; MCE_UnitDestroyed ( un ) ;
18919: LD_VAR 0 1
18923: PPUSH
18924: CALL 84328 0 1
// end ;
18928: PPOPN 1
18930: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
18931: LD_VAR 0 1
18935: PPUSH
18936: LD_VAR 0 2
18940: PPUSH
18941: CALL 86662 0 2
// end ;
18945: PPOPN 2
18947: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
18948: LD_VAR 0 1
18952: PPUSH
18953: CALL 85730 0 1
// end ;
18957: PPOPN 1
18959: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
18960: LD_VAR 0 1
18964: PPUSH
18965: CALL 85971 0 1
// end ;
18969: PPOPN 1
18971: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_LasDouble and GetSide ( lab ) = 1 then
18972: LD_VAR 0 1
18976: PUSH
18977: LD_INT 14
18979: EQUAL
18980: PUSH
18981: LD_VAR 0 2
18985: PPUSH
18986: CALL_OW 255
18990: PUSH
18991: LD_INT 1
18993: EQUAL
18994: AND
18995: IFFALSE 19036
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Laser ) ;
18997: LD_EXP 9
19001: PPUSH
19002: LD_STRING D
19004: PUSH
19005: LD_STRING I
19007: PUSH
19008: LD_STRING J
19010: PUSH
19011: LD_STRING S
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: LIST
19018: PUSH
19019: LD_EXP 25
19023: ARRAY
19024: STR
19025: PUSH
19026: LD_STRING -1-Laser
19028: STR
19029: PPUSH
19030: CALL_OW 88
// exit ;
19034: GO 19178
// end ; if tech = tech_MatDet and GetSide ( lab ) = 1 then
19036: LD_VAR 0 1
19040: PUSH
19041: LD_INT 7
19043: EQUAL
19044: PUSH
19045: LD_VAR 0 2
19049: PPUSH
19050: CALL_OW 255
19054: PUSH
19055: LD_INT 1
19057: EQUAL
19058: AND
19059: IFFALSE 19100
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Materialization ) ;
19061: LD_EXP 9
19065: PPUSH
19066: LD_STRING D
19068: PUSH
19069: LD_STRING I
19071: PUSH
19072: LD_STRING J
19074: PUSH
19075: LD_STRING S
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: LIST
19082: PUSH
19083: LD_EXP 25
19087: ARRAY
19088: STR
19089: PUSH
19090: LD_STRING -1-Materialization
19092: STR
19093: PPUSH
19094: CALL_OW 88
// exit ;
19098: GO 19178
// end ; if tech = tech_SibFiss and GetSide ( lab ) = 1 then
19100: LD_VAR 0 1
19104: PUSH
19105: LD_INT 25
19107: EQUAL
19108: PUSH
19109: LD_VAR 0 2
19113: PPUSH
19114: CALL_OW 255
19118: PUSH
19119: LD_INT 1
19121: EQUAL
19122: AND
19123: IFFALSE 19164
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Rocket ) ;
19125: LD_EXP 9
19129: PPUSH
19130: LD_STRING D
19132: PUSH
19133: LD_STRING I
19135: PUSH
19136: LD_STRING J
19138: PUSH
19139: LD_STRING S
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: LIST
19146: PUSH
19147: LD_EXP 25
19151: ARRAY
19152: STR
19153: PUSH
19154: LD_STRING -1-Rocket
19156: STR
19157: PPUSH
19158: CALL_OW 88
// exit ;
19162: GO 19178
// end ; MCE_ResearchComplete ( tech , lab ) ;
19164: LD_VAR 0 1
19168: PPUSH
19169: LD_VAR 0 2
19173: PPUSH
19174: CALL 84024 0 2
// end ;
19178: PPOPN 2
19180: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
19181: LD_VAR 0 1
19185: PPUSH
19186: LD_VAR 0 2
19190: PPUSH
19191: LD_VAR 0 3
19195: PPUSH
19196: LD_VAR 0 4
19200: PPUSH
19201: LD_VAR 0 5
19205: PPUSH
19206: CALL 83644 0 5
// end ;
19210: PPOPN 5
19212: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
19213: LD_VAR 0 1
19217: PPUSH
19218: LD_VAR 0 2
19222: PPUSH
19223: CALL 83234 0 2
// end ;
19227: PPOPN 2
19229: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
19230: LD_VAR 0 1
19234: PPUSH
19235: LD_VAR 0 2
19239: PPUSH
19240: LD_VAR 0 3
19244: PPUSH
19245: LD_VAR 0 4
19249: PPUSH
19250: CALL 83072 0 4
// end ;
19254: PPOPN 4
19256: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
19257: LD_VAR 0 1
19261: PPUSH
19262: LD_VAR 0 2
19266: PPUSH
19267: LD_VAR 0 3
19271: PPUSH
19272: CALL 82847 0 3
// end ;
19276: PPOPN 3
19278: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
19279: LD_VAR 0 1
19283: PPUSH
19284: LD_VAR 0 2
19288: PPUSH
19289: CALL 82732 0 2
// end ;
19293: PPOPN 2
19295: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
19296: LD_VAR 0 1
19300: PPUSH
19301: LD_VAR 0 2
19305: PPUSH
19306: CALL 86923 0 2
// end ;
19310: PPOPN 2
19312: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
19313: LD_VAR 0 1
19317: PPUSH
19318: LD_VAR 0 2
19322: PPUSH
19323: LD_VAR 0 3
19327: PPUSH
19328: LD_VAR 0 4
19332: PPUSH
19333: CALL 87139 0 4
// end ;
19337: PPOPN 4
19339: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
19340: LD_VAR 0 1
19344: PPUSH
19345: LD_VAR 0 2
19349: PPUSH
19350: CALL 82541 0 2
// end ;
19354: PPOPN 2
19356: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
19357: LD_VAR 0 1
19361: PPUSH
19362: CALL 100553 0 1
// end ; end_of_file
19366: PPOPN 1
19368: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19369: LD_INT 0
19371: PPUSH
19372: PPUSH
// if exist_mode then
19373: LD_VAR 0 2
19377: IFFALSE 19402
// unit := CreateCharacter ( prefix & ident ) else
19379: LD_ADDR_VAR 0 5
19383: PUSH
19384: LD_VAR 0 3
19388: PUSH
19389: LD_VAR 0 1
19393: STR
19394: PPUSH
19395: CALL_OW 34
19399: ST_TO_ADDR
19400: GO 19417
// unit := NewCharacter ( ident ) ;
19402: LD_ADDR_VAR 0 5
19406: PUSH
19407: LD_VAR 0 1
19411: PPUSH
19412: CALL_OW 25
19416: ST_TO_ADDR
// result := unit ;
19417: LD_ADDR_VAR 0 4
19421: PUSH
19422: LD_VAR 0 5
19426: ST_TO_ADDR
// end ;
19427: LD_VAR 0 4
19431: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19432: LD_INT 0
19434: PPUSH
19435: PPUSH
// if not side or not nation then
19436: LD_VAR 0 1
19440: NOT
19441: PUSH
19442: LD_VAR 0 2
19446: NOT
19447: OR
19448: IFFALSE 19452
// exit ;
19450: GO 20216
// case nation of nation_american :
19452: LD_VAR 0 2
19456: PUSH
19457: LD_INT 1
19459: DOUBLE
19460: EQUAL
19461: IFTRUE 19465
19463: GO 19679
19465: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19466: LD_ADDR_VAR 0 4
19470: PUSH
19471: LD_INT 35
19473: PUSH
19474: LD_INT 45
19476: PUSH
19477: LD_INT 46
19479: PUSH
19480: LD_INT 47
19482: PUSH
19483: LD_INT 82
19485: PUSH
19486: LD_INT 83
19488: PUSH
19489: LD_INT 84
19491: PUSH
19492: LD_INT 85
19494: PUSH
19495: LD_INT 86
19497: PUSH
19498: LD_INT 1
19500: PUSH
19501: LD_INT 2
19503: PUSH
19504: LD_INT 6
19506: PUSH
19507: LD_INT 15
19509: PUSH
19510: LD_INT 16
19512: PUSH
19513: LD_INT 7
19515: PUSH
19516: LD_INT 12
19518: PUSH
19519: LD_INT 13
19521: PUSH
19522: LD_INT 10
19524: PUSH
19525: LD_INT 14
19527: PUSH
19528: LD_INT 20
19530: PUSH
19531: LD_INT 21
19533: PUSH
19534: LD_INT 22
19536: PUSH
19537: LD_INT 25
19539: PUSH
19540: LD_INT 32
19542: PUSH
19543: LD_INT 27
19545: PUSH
19546: LD_INT 36
19548: PUSH
19549: LD_INT 69
19551: PUSH
19552: LD_INT 39
19554: PUSH
19555: LD_INT 34
19557: PUSH
19558: LD_INT 40
19560: PUSH
19561: LD_INT 48
19563: PUSH
19564: LD_INT 49
19566: PUSH
19567: LD_INT 50
19569: PUSH
19570: LD_INT 51
19572: PUSH
19573: LD_INT 52
19575: PUSH
19576: LD_INT 53
19578: PUSH
19579: LD_INT 54
19581: PUSH
19582: LD_INT 55
19584: PUSH
19585: LD_INT 56
19587: PUSH
19588: LD_INT 57
19590: PUSH
19591: LD_INT 58
19593: PUSH
19594: LD_INT 59
19596: PUSH
19597: LD_INT 60
19599: PUSH
19600: LD_INT 61
19602: PUSH
19603: LD_INT 62
19605: PUSH
19606: LD_INT 80
19608: PUSH
19609: LD_INT 82
19611: PUSH
19612: LD_INT 83
19614: PUSH
19615: LD_INT 84
19617: PUSH
19618: LD_INT 85
19620: PUSH
19621: LD_INT 86
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: ST_TO_ADDR
19677: GO 20140
19679: LD_INT 2
19681: DOUBLE
19682: EQUAL
19683: IFTRUE 19687
19685: GO 19909
19687: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
19688: LD_ADDR_VAR 0 4
19692: PUSH
19693: LD_INT 35
19695: PUSH
19696: LD_INT 45
19698: PUSH
19699: LD_INT 46
19701: PUSH
19702: LD_INT 47
19704: PUSH
19705: LD_INT 82
19707: PUSH
19708: LD_INT 83
19710: PUSH
19711: LD_INT 84
19713: PUSH
19714: LD_INT 85
19716: PUSH
19717: LD_INT 87
19719: PUSH
19720: LD_INT 70
19722: PUSH
19723: LD_INT 1
19725: PUSH
19726: LD_INT 11
19728: PUSH
19729: LD_INT 3
19731: PUSH
19732: LD_INT 4
19734: PUSH
19735: LD_INT 5
19737: PUSH
19738: LD_INT 6
19740: PUSH
19741: LD_INT 15
19743: PUSH
19744: LD_INT 18
19746: PUSH
19747: LD_INT 7
19749: PUSH
19750: LD_INT 17
19752: PUSH
19753: LD_INT 8
19755: PUSH
19756: LD_INT 20
19758: PUSH
19759: LD_INT 21
19761: PUSH
19762: LD_INT 22
19764: PUSH
19765: LD_INT 72
19767: PUSH
19768: LD_INT 26
19770: PUSH
19771: LD_INT 69
19773: PUSH
19774: LD_INT 39
19776: PUSH
19777: LD_INT 40
19779: PUSH
19780: LD_INT 41
19782: PUSH
19783: LD_INT 42
19785: PUSH
19786: LD_INT 43
19788: PUSH
19789: LD_INT 48
19791: PUSH
19792: LD_INT 49
19794: PUSH
19795: LD_INT 50
19797: PUSH
19798: LD_INT 51
19800: PUSH
19801: LD_INT 52
19803: PUSH
19804: LD_INT 53
19806: PUSH
19807: LD_INT 54
19809: PUSH
19810: LD_INT 55
19812: PUSH
19813: LD_INT 56
19815: PUSH
19816: LD_INT 60
19818: PUSH
19819: LD_INT 61
19821: PUSH
19822: LD_INT 62
19824: PUSH
19825: LD_INT 66
19827: PUSH
19828: LD_INT 67
19830: PUSH
19831: LD_INT 68
19833: PUSH
19834: LD_INT 81
19836: PUSH
19837: LD_INT 82
19839: PUSH
19840: LD_INT 83
19842: PUSH
19843: LD_INT 84
19845: PUSH
19846: LD_INT 85
19848: PUSH
19849: LD_INT 87
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: ST_TO_ADDR
19907: GO 20140
19909: LD_INT 3
19911: DOUBLE
19912: EQUAL
19913: IFTRUE 19917
19915: GO 20139
19917: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
19918: LD_ADDR_VAR 0 4
19922: PUSH
19923: LD_INT 46
19925: PUSH
19926: LD_INT 47
19928: PUSH
19929: LD_INT 1
19931: PUSH
19932: LD_INT 2
19934: PUSH
19935: LD_INT 82
19937: PUSH
19938: LD_INT 83
19940: PUSH
19941: LD_INT 84
19943: PUSH
19944: LD_INT 85
19946: PUSH
19947: LD_INT 86
19949: PUSH
19950: LD_INT 11
19952: PUSH
19953: LD_INT 9
19955: PUSH
19956: LD_INT 20
19958: PUSH
19959: LD_INT 19
19961: PUSH
19962: LD_INT 21
19964: PUSH
19965: LD_INT 24
19967: PUSH
19968: LD_INT 22
19970: PUSH
19971: LD_INT 25
19973: PUSH
19974: LD_INT 28
19976: PUSH
19977: LD_INT 29
19979: PUSH
19980: LD_INT 30
19982: PUSH
19983: LD_INT 31
19985: PUSH
19986: LD_INT 37
19988: PUSH
19989: LD_INT 38
19991: PUSH
19992: LD_INT 32
19994: PUSH
19995: LD_INT 27
19997: PUSH
19998: LD_INT 33
20000: PUSH
20001: LD_INT 69
20003: PUSH
20004: LD_INT 39
20006: PUSH
20007: LD_INT 34
20009: PUSH
20010: LD_INT 40
20012: PUSH
20013: LD_INT 71
20015: PUSH
20016: LD_INT 23
20018: PUSH
20019: LD_INT 44
20021: PUSH
20022: LD_INT 48
20024: PUSH
20025: LD_INT 49
20027: PUSH
20028: LD_INT 50
20030: PUSH
20031: LD_INT 51
20033: PUSH
20034: LD_INT 52
20036: PUSH
20037: LD_INT 53
20039: PUSH
20040: LD_INT 54
20042: PUSH
20043: LD_INT 55
20045: PUSH
20046: LD_INT 56
20048: PUSH
20049: LD_INT 57
20051: PUSH
20052: LD_INT 58
20054: PUSH
20055: LD_INT 59
20057: PUSH
20058: LD_INT 63
20060: PUSH
20061: LD_INT 64
20063: PUSH
20064: LD_INT 65
20066: PUSH
20067: LD_INT 82
20069: PUSH
20070: LD_INT 83
20072: PUSH
20073: LD_INT 84
20075: PUSH
20076: LD_INT 85
20078: PUSH
20079: LD_INT 86
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: ST_TO_ADDR
20137: GO 20140
20139: POP
// if state > - 1 and state < 3 then
20140: LD_VAR 0 3
20144: PUSH
20145: LD_INT 1
20147: NEG
20148: GREATER
20149: PUSH
20150: LD_VAR 0 3
20154: PUSH
20155: LD_INT 3
20157: LESS
20158: AND
20159: IFFALSE 20216
// for i in result do
20161: LD_ADDR_VAR 0 5
20165: PUSH
20166: LD_VAR 0 4
20170: PUSH
20171: FOR_IN
20172: IFFALSE 20214
// if GetTech ( i , side ) <> state then
20174: LD_VAR 0 5
20178: PPUSH
20179: LD_VAR 0 1
20183: PPUSH
20184: CALL_OW 321
20188: PUSH
20189: LD_VAR 0 3
20193: NONEQUAL
20194: IFFALSE 20212
// result := result diff i ;
20196: LD_ADDR_VAR 0 4
20200: PUSH
20201: LD_VAR 0 4
20205: PUSH
20206: LD_VAR 0 5
20210: DIFF
20211: ST_TO_ADDR
20212: GO 20171
20214: POP
20215: POP
// end ;
20216: LD_VAR 0 4
20220: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20221: LD_INT 0
20223: PPUSH
20224: PPUSH
20225: PPUSH
// result := true ;
20226: LD_ADDR_VAR 0 3
20230: PUSH
20231: LD_INT 1
20233: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20234: LD_ADDR_VAR 0 5
20238: PUSH
20239: LD_VAR 0 2
20243: PPUSH
20244: CALL_OW 480
20248: ST_TO_ADDR
// if not tmp then
20249: LD_VAR 0 5
20253: NOT
20254: IFFALSE 20258
// exit ;
20256: GO 20307
// for i in tmp do
20258: LD_ADDR_VAR 0 4
20262: PUSH
20263: LD_VAR 0 5
20267: PUSH
20268: FOR_IN
20269: IFFALSE 20305
// if GetTech ( i , side ) <> state_researched then
20271: LD_VAR 0 4
20275: PPUSH
20276: LD_VAR 0 1
20280: PPUSH
20281: CALL_OW 321
20285: PUSH
20286: LD_INT 2
20288: NONEQUAL
20289: IFFALSE 20303
// begin result := false ;
20291: LD_ADDR_VAR 0 3
20295: PUSH
20296: LD_INT 0
20298: ST_TO_ADDR
// exit ;
20299: POP
20300: POP
20301: GO 20307
// end ;
20303: GO 20268
20305: POP
20306: POP
// end ;
20307: LD_VAR 0 3
20311: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20312: LD_INT 0
20314: PPUSH
20315: PPUSH
20316: PPUSH
20317: PPUSH
20318: PPUSH
20319: PPUSH
20320: PPUSH
20321: PPUSH
20322: PPUSH
20323: PPUSH
20324: PPUSH
20325: PPUSH
20326: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20327: LD_VAR 0 1
20331: NOT
20332: PUSH
20333: LD_VAR 0 1
20337: PPUSH
20338: CALL_OW 257
20342: PUSH
20343: LD_INT 9
20345: NONEQUAL
20346: OR
20347: IFFALSE 20351
// exit ;
20349: GO 20924
// side := GetSide ( unit ) ;
20351: LD_ADDR_VAR 0 9
20355: PUSH
20356: LD_VAR 0 1
20360: PPUSH
20361: CALL_OW 255
20365: ST_TO_ADDR
// tech_space := tech_spacanom ;
20366: LD_ADDR_VAR 0 12
20370: PUSH
20371: LD_INT 29
20373: ST_TO_ADDR
// tech_time := tech_taurad ;
20374: LD_ADDR_VAR 0 13
20378: PUSH
20379: LD_INT 28
20381: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20382: LD_ADDR_VAR 0 11
20386: PUSH
20387: LD_VAR 0 1
20391: PPUSH
20392: CALL_OW 310
20396: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20397: LD_VAR 0 11
20401: PPUSH
20402: CALL_OW 247
20406: PUSH
20407: LD_INT 2
20409: EQUAL
20410: IFFALSE 20414
// exit ;
20412: GO 20924
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20414: LD_ADDR_VAR 0 8
20418: PUSH
20419: LD_INT 81
20421: PUSH
20422: LD_VAR 0 9
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 3
20433: PUSH
20434: LD_INT 21
20436: PUSH
20437: LD_INT 3
20439: PUSH
20440: EMPTY
20441: LIST
20442: LIST
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: PPUSH
20452: CALL_OW 69
20456: ST_TO_ADDR
// if not tmp then
20457: LD_VAR 0 8
20461: NOT
20462: IFFALSE 20466
// exit ;
20464: GO 20924
// if in_unit then
20466: LD_VAR 0 11
20470: IFFALSE 20494
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20472: LD_ADDR_VAR 0 10
20476: PUSH
20477: LD_VAR 0 8
20481: PPUSH
20482: LD_VAR 0 11
20486: PPUSH
20487: CALL_OW 74
20491: ST_TO_ADDR
20492: GO 20514
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20494: LD_ADDR_VAR 0 10
20498: PUSH
20499: LD_VAR 0 8
20503: PPUSH
20504: LD_VAR 0 1
20508: PPUSH
20509: CALL_OW 74
20513: ST_TO_ADDR
// if not enemy then
20514: LD_VAR 0 10
20518: NOT
20519: IFFALSE 20523
// exit ;
20521: GO 20924
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20523: LD_VAR 0 11
20527: PUSH
20528: LD_VAR 0 11
20532: PPUSH
20533: LD_VAR 0 10
20537: PPUSH
20538: CALL_OW 296
20542: PUSH
20543: LD_INT 13
20545: GREATER
20546: AND
20547: PUSH
20548: LD_VAR 0 1
20552: PPUSH
20553: LD_VAR 0 10
20557: PPUSH
20558: CALL_OW 296
20562: PUSH
20563: LD_INT 12
20565: GREATER
20566: OR
20567: IFFALSE 20571
// exit ;
20569: GO 20924
// missile := [ 1 ] ;
20571: LD_ADDR_VAR 0 14
20575: PUSH
20576: LD_INT 1
20578: PUSH
20579: EMPTY
20580: LIST
20581: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20582: LD_VAR 0 9
20586: PPUSH
20587: LD_VAR 0 12
20591: PPUSH
20592: CALL_OW 325
20596: IFFALSE 20625
// missile := Insert ( missile , missile + 1 , 2 ) ;
20598: LD_ADDR_VAR 0 14
20602: PUSH
20603: LD_VAR 0 14
20607: PPUSH
20608: LD_VAR 0 14
20612: PUSH
20613: LD_INT 1
20615: PLUS
20616: PPUSH
20617: LD_INT 2
20619: PPUSH
20620: CALL_OW 2
20624: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
20625: LD_VAR 0 9
20629: PPUSH
20630: LD_VAR 0 13
20634: PPUSH
20635: CALL_OW 325
20639: PUSH
20640: LD_VAR 0 10
20644: PPUSH
20645: CALL_OW 255
20649: PPUSH
20650: LD_VAR 0 13
20654: PPUSH
20655: CALL_OW 325
20659: NOT
20660: AND
20661: IFFALSE 20690
// missile := Insert ( missile , missile + 1 , 3 ) ;
20663: LD_ADDR_VAR 0 14
20667: PUSH
20668: LD_VAR 0 14
20672: PPUSH
20673: LD_VAR 0 14
20677: PUSH
20678: LD_INT 1
20680: PLUS
20681: PPUSH
20682: LD_INT 3
20684: PPUSH
20685: CALL_OW 2
20689: ST_TO_ADDR
// if missile < 2 then
20690: LD_VAR 0 14
20694: PUSH
20695: LD_INT 2
20697: LESS
20698: IFFALSE 20702
// exit ;
20700: GO 20924
// x := GetX ( enemy ) ;
20702: LD_ADDR_VAR 0 4
20706: PUSH
20707: LD_VAR 0 10
20711: PPUSH
20712: CALL_OW 250
20716: ST_TO_ADDR
// y := GetY ( enemy ) ;
20717: LD_ADDR_VAR 0 5
20721: PUSH
20722: LD_VAR 0 10
20726: PPUSH
20727: CALL_OW 251
20731: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
20732: LD_ADDR_VAR 0 6
20736: PUSH
20737: LD_VAR 0 4
20741: PUSH
20742: LD_INT 1
20744: NEG
20745: PPUSH
20746: LD_INT 1
20748: PPUSH
20749: CALL_OW 12
20753: PLUS
20754: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
20755: LD_ADDR_VAR 0 7
20759: PUSH
20760: LD_VAR 0 5
20764: PUSH
20765: LD_INT 1
20767: NEG
20768: PPUSH
20769: LD_INT 1
20771: PPUSH
20772: CALL_OW 12
20776: PLUS
20777: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20778: LD_VAR 0 6
20782: PPUSH
20783: LD_VAR 0 7
20787: PPUSH
20788: CALL_OW 488
20792: NOT
20793: IFFALSE 20815
// begin _x := x ;
20795: LD_ADDR_VAR 0 6
20799: PUSH
20800: LD_VAR 0 4
20804: ST_TO_ADDR
// _y := y ;
20805: LD_ADDR_VAR 0 7
20809: PUSH
20810: LD_VAR 0 5
20814: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
20815: LD_ADDR_VAR 0 3
20819: PUSH
20820: LD_INT 1
20822: PPUSH
20823: LD_VAR 0 14
20827: PPUSH
20828: CALL_OW 12
20832: ST_TO_ADDR
// case i of 1 :
20833: LD_VAR 0 3
20837: PUSH
20838: LD_INT 1
20840: DOUBLE
20841: EQUAL
20842: IFTRUE 20846
20844: GO 20863
20846: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
20847: LD_VAR 0 1
20851: PPUSH
20852: LD_VAR 0 10
20856: PPUSH
20857: CALL_OW 115
20861: GO 20924
20863: LD_INT 2
20865: DOUBLE
20866: EQUAL
20867: IFTRUE 20871
20869: GO 20893
20871: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
20872: LD_VAR 0 1
20876: PPUSH
20877: LD_VAR 0 6
20881: PPUSH
20882: LD_VAR 0 7
20886: PPUSH
20887: CALL_OW 153
20891: GO 20924
20893: LD_INT 3
20895: DOUBLE
20896: EQUAL
20897: IFTRUE 20901
20899: GO 20923
20901: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
20902: LD_VAR 0 1
20906: PPUSH
20907: LD_VAR 0 6
20911: PPUSH
20912: LD_VAR 0 7
20916: PPUSH
20917: CALL_OW 154
20921: GO 20924
20923: POP
// end ;
20924: LD_VAR 0 2
20928: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
20929: LD_INT 0
20931: PPUSH
20932: PPUSH
20933: PPUSH
20934: PPUSH
20935: PPUSH
20936: PPUSH
// if not unit or not building then
20937: LD_VAR 0 1
20941: NOT
20942: PUSH
20943: LD_VAR 0 2
20947: NOT
20948: OR
20949: IFFALSE 20953
// exit ;
20951: GO 21111
// x := GetX ( building ) ;
20953: LD_ADDR_VAR 0 5
20957: PUSH
20958: LD_VAR 0 2
20962: PPUSH
20963: CALL_OW 250
20967: ST_TO_ADDR
// y := GetY ( building ) ;
20968: LD_ADDR_VAR 0 6
20972: PUSH
20973: LD_VAR 0 2
20977: PPUSH
20978: CALL_OW 251
20982: ST_TO_ADDR
// for i = 0 to 5 do
20983: LD_ADDR_VAR 0 4
20987: PUSH
20988: DOUBLE
20989: LD_INT 0
20991: DEC
20992: ST_TO_ADDR
20993: LD_INT 5
20995: PUSH
20996: FOR_TO
20997: IFFALSE 21109
// begin _x := ShiftX ( x , i , 3 ) ;
20999: LD_ADDR_VAR 0 7
21003: PUSH
21004: LD_VAR 0 5
21008: PPUSH
21009: LD_VAR 0 4
21013: PPUSH
21014: LD_INT 3
21016: PPUSH
21017: CALL_OW 272
21021: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21022: LD_ADDR_VAR 0 8
21026: PUSH
21027: LD_VAR 0 6
21031: PPUSH
21032: LD_VAR 0 4
21036: PPUSH
21037: LD_INT 3
21039: PPUSH
21040: CALL_OW 273
21044: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21045: LD_VAR 0 7
21049: PPUSH
21050: LD_VAR 0 8
21054: PPUSH
21055: CALL_OW 488
21059: NOT
21060: IFFALSE 21064
// continue ;
21062: GO 20996
// if HexInfo ( _x , _y ) = 0 then
21064: LD_VAR 0 7
21068: PPUSH
21069: LD_VAR 0 8
21073: PPUSH
21074: CALL_OW 428
21078: PUSH
21079: LD_INT 0
21081: EQUAL
21082: IFFALSE 21107
// begin ComMoveXY ( unit , _x , _y ) ;
21084: LD_VAR 0 1
21088: PPUSH
21089: LD_VAR 0 7
21093: PPUSH
21094: LD_VAR 0 8
21098: PPUSH
21099: CALL_OW 111
// exit ;
21103: POP
21104: POP
21105: GO 21111
// end ; end ;
21107: GO 20996
21109: POP
21110: POP
// end ;
21111: LD_VAR 0 3
21115: RET
// export function ScanBase ( side , base_area ) ; begin
21116: LD_INT 0
21118: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21119: LD_ADDR_VAR 0 3
21123: PUSH
21124: LD_VAR 0 2
21128: PPUSH
21129: LD_INT 81
21131: PUSH
21132: LD_VAR 0 1
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PPUSH
21141: CALL_OW 70
21145: ST_TO_ADDR
// end ;
21146: LD_VAR 0 3
21150: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21151: LD_INT 0
21153: PPUSH
21154: PPUSH
21155: PPUSH
21156: PPUSH
// result := false ;
21157: LD_ADDR_VAR 0 2
21161: PUSH
21162: LD_INT 0
21164: ST_TO_ADDR
// side := GetSide ( unit ) ;
21165: LD_ADDR_VAR 0 3
21169: PUSH
21170: LD_VAR 0 1
21174: PPUSH
21175: CALL_OW 255
21179: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21180: LD_ADDR_VAR 0 4
21184: PUSH
21185: LD_VAR 0 1
21189: PPUSH
21190: CALL_OW 248
21194: ST_TO_ADDR
// case nat of 1 :
21195: LD_VAR 0 4
21199: PUSH
21200: LD_INT 1
21202: DOUBLE
21203: EQUAL
21204: IFTRUE 21208
21206: GO 21219
21208: POP
// tech := tech_lassight ; 2 :
21209: LD_ADDR_VAR 0 5
21213: PUSH
21214: LD_INT 12
21216: ST_TO_ADDR
21217: GO 21258
21219: LD_INT 2
21221: DOUBLE
21222: EQUAL
21223: IFTRUE 21227
21225: GO 21238
21227: POP
// tech := tech_mortar ; 3 :
21228: LD_ADDR_VAR 0 5
21232: PUSH
21233: LD_INT 41
21235: ST_TO_ADDR
21236: GO 21258
21238: LD_INT 3
21240: DOUBLE
21241: EQUAL
21242: IFTRUE 21246
21244: GO 21257
21246: POP
// tech := tech_bazooka ; end ;
21247: LD_ADDR_VAR 0 5
21251: PUSH
21252: LD_INT 44
21254: ST_TO_ADDR
21255: GO 21258
21257: POP
// if Researched ( side , tech ) then
21258: LD_VAR 0 3
21262: PPUSH
21263: LD_VAR 0 5
21267: PPUSH
21268: CALL_OW 325
21272: IFFALSE 21299
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21274: LD_ADDR_VAR 0 2
21278: PUSH
21279: LD_INT 5
21281: PUSH
21282: LD_INT 8
21284: PUSH
21285: LD_INT 9
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: LIST
21292: PUSH
21293: LD_VAR 0 4
21297: ARRAY
21298: ST_TO_ADDR
// end ;
21299: LD_VAR 0 2
21303: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21304: LD_INT 0
21306: PPUSH
21307: PPUSH
21308: PPUSH
// if not mines then
21309: LD_VAR 0 2
21313: NOT
21314: IFFALSE 21318
// exit ;
21316: GO 21462
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21318: LD_ADDR_VAR 0 5
21322: PUSH
21323: LD_INT 81
21325: PUSH
21326: LD_VAR 0 1
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 3
21337: PUSH
21338: LD_INT 21
21340: PUSH
21341: LD_INT 3
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PPUSH
21356: CALL_OW 69
21360: ST_TO_ADDR
// for i in mines do
21361: LD_ADDR_VAR 0 4
21365: PUSH
21366: LD_VAR 0 2
21370: PUSH
21371: FOR_IN
21372: IFFALSE 21460
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21374: LD_VAR 0 4
21378: PUSH
21379: LD_INT 1
21381: ARRAY
21382: PPUSH
21383: LD_VAR 0 4
21387: PUSH
21388: LD_INT 2
21390: ARRAY
21391: PPUSH
21392: CALL_OW 458
21396: NOT
21397: IFFALSE 21401
// continue ;
21399: GO 21371
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21401: LD_VAR 0 4
21405: PUSH
21406: LD_INT 1
21408: ARRAY
21409: PPUSH
21410: LD_VAR 0 4
21414: PUSH
21415: LD_INT 2
21417: ARRAY
21418: PPUSH
21419: CALL_OW 428
21423: PUSH
21424: LD_VAR 0 5
21428: IN
21429: IFFALSE 21458
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21431: LD_VAR 0 4
21435: PUSH
21436: LD_INT 1
21438: ARRAY
21439: PPUSH
21440: LD_VAR 0 4
21444: PUSH
21445: LD_INT 2
21447: ARRAY
21448: PPUSH
21449: LD_VAR 0 1
21453: PPUSH
21454: CALL_OW 456
// end ;
21458: GO 21371
21460: POP
21461: POP
// end ;
21462: LD_VAR 0 3
21466: RET
// export function Count ( array ) ; var i ; begin
21467: LD_INT 0
21469: PPUSH
21470: PPUSH
// result := 0 ;
21471: LD_ADDR_VAR 0 2
21475: PUSH
21476: LD_INT 0
21478: ST_TO_ADDR
// for i in array do
21479: LD_ADDR_VAR 0 3
21483: PUSH
21484: LD_VAR 0 1
21488: PUSH
21489: FOR_IN
21490: IFFALSE 21514
// if i then
21492: LD_VAR 0 3
21496: IFFALSE 21512
// result := result + 1 ;
21498: LD_ADDR_VAR 0 2
21502: PUSH
21503: LD_VAR 0 2
21507: PUSH
21508: LD_INT 1
21510: PLUS
21511: ST_TO_ADDR
21512: GO 21489
21514: POP
21515: POP
// end ;
21516: LD_VAR 0 2
21520: RET
// export function IsEmpty ( building ) ; begin
21521: LD_INT 0
21523: PPUSH
// if not building then
21524: LD_VAR 0 1
21528: NOT
21529: IFFALSE 21533
// exit ;
21531: GO 21576
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
21533: LD_ADDR_VAR 0 2
21537: PUSH
21538: LD_VAR 0 1
21542: PUSH
21543: LD_INT 22
21545: PUSH
21546: LD_VAR 0 1
21550: PPUSH
21551: CALL_OW 255
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 58
21562: PUSH
21563: EMPTY
21564: LIST
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: PPUSH
21570: CALL_OW 69
21574: IN
21575: ST_TO_ADDR
// end ;
21576: LD_VAR 0 2
21580: RET
// export function IsNotFull ( building ) ; begin
21581: LD_INT 0
21583: PPUSH
// if not building then
21584: LD_VAR 0 1
21588: NOT
21589: IFFALSE 21593
// exit ;
21591: GO 21612
// result := UnitsInside ( building ) < 6 ;
21593: LD_ADDR_VAR 0 2
21597: PUSH
21598: LD_VAR 0 1
21602: PPUSH
21603: CALL_OW 313
21607: PUSH
21608: LD_INT 6
21610: LESS
21611: ST_TO_ADDR
// end ;
21612: LD_VAR 0 2
21616: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
21617: LD_INT 0
21619: PPUSH
21620: PPUSH
21621: PPUSH
21622: PPUSH
// tmp := [ ] ;
21623: LD_ADDR_VAR 0 3
21627: PUSH
21628: EMPTY
21629: ST_TO_ADDR
// list := [ ] ;
21630: LD_ADDR_VAR 0 5
21634: PUSH
21635: EMPTY
21636: ST_TO_ADDR
// for i = 16 to 25 do
21637: LD_ADDR_VAR 0 4
21641: PUSH
21642: DOUBLE
21643: LD_INT 16
21645: DEC
21646: ST_TO_ADDR
21647: LD_INT 25
21649: PUSH
21650: FOR_TO
21651: IFFALSE 21724
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
21653: LD_ADDR_VAR 0 3
21657: PUSH
21658: LD_VAR 0 3
21662: PUSH
21663: LD_INT 22
21665: PUSH
21666: LD_VAR 0 1
21670: PPUSH
21671: CALL_OW 255
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 91
21682: PUSH
21683: LD_VAR 0 1
21687: PUSH
21688: LD_INT 6
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: LIST
21695: PUSH
21696: LD_INT 30
21698: PUSH
21699: LD_VAR 0 4
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: LIST
21712: PUSH
21713: EMPTY
21714: LIST
21715: PPUSH
21716: CALL_OW 69
21720: ADD
21721: ST_TO_ADDR
21722: GO 21650
21724: POP
21725: POP
// for i = 1 to tmp do
21726: LD_ADDR_VAR 0 4
21730: PUSH
21731: DOUBLE
21732: LD_INT 1
21734: DEC
21735: ST_TO_ADDR
21736: LD_VAR 0 3
21740: PUSH
21741: FOR_TO
21742: IFFALSE 21830
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
21744: LD_ADDR_VAR 0 5
21748: PUSH
21749: LD_VAR 0 5
21753: PUSH
21754: LD_VAR 0 3
21758: PUSH
21759: LD_VAR 0 4
21763: ARRAY
21764: PPUSH
21765: CALL_OW 266
21769: PUSH
21770: LD_VAR 0 3
21774: PUSH
21775: LD_VAR 0 4
21779: ARRAY
21780: PPUSH
21781: CALL_OW 250
21785: PUSH
21786: LD_VAR 0 3
21790: PUSH
21791: LD_VAR 0 4
21795: ARRAY
21796: PPUSH
21797: CALL_OW 251
21801: PUSH
21802: LD_VAR 0 3
21806: PUSH
21807: LD_VAR 0 4
21811: ARRAY
21812: PPUSH
21813: CALL_OW 254
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: PUSH
21824: EMPTY
21825: LIST
21826: ADD
21827: ST_TO_ADDR
21828: GO 21741
21830: POP
21831: POP
// result := list ;
21832: LD_ADDR_VAR 0 2
21836: PUSH
21837: LD_VAR 0 5
21841: ST_TO_ADDR
// end ;
21842: LD_VAR 0 2
21846: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
21847: LD_INT 0
21849: PPUSH
21850: PPUSH
21851: PPUSH
21852: PPUSH
21853: PPUSH
21854: PPUSH
21855: PPUSH
// if not factory then
21856: LD_VAR 0 1
21860: NOT
21861: IFFALSE 21865
// exit ;
21863: GO 22458
// if control = control_apeman then
21865: LD_VAR 0 4
21869: PUSH
21870: LD_INT 5
21872: EQUAL
21873: IFFALSE 21982
// begin tmp := UnitsInside ( factory ) ;
21875: LD_ADDR_VAR 0 8
21879: PUSH
21880: LD_VAR 0 1
21884: PPUSH
21885: CALL_OW 313
21889: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
21890: LD_VAR 0 8
21894: PPUSH
21895: LD_INT 25
21897: PUSH
21898: LD_INT 12
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PPUSH
21905: CALL_OW 72
21909: NOT
21910: IFFALSE 21920
// control := control_manual ;
21912: LD_ADDR_VAR 0 4
21916: PUSH
21917: LD_INT 1
21919: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
21920: LD_ADDR_VAR 0 8
21924: PUSH
21925: LD_VAR 0 1
21929: PPUSH
21930: CALL 21617 0 1
21934: ST_TO_ADDR
// if tmp then
21935: LD_VAR 0 8
21939: IFFALSE 21982
// begin for i in tmp do
21941: LD_ADDR_VAR 0 7
21945: PUSH
21946: LD_VAR 0 8
21950: PUSH
21951: FOR_IN
21952: IFFALSE 21980
// if i [ 1 ] = b_ext_radio then
21954: LD_VAR 0 7
21958: PUSH
21959: LD_INT 1
21961: ARRAY
21962: PUSH
21963: LD_INT 22
21965: EQUAL
21966: IFFALSE 21978
// begin control := control_remote ;
21968: LD_ADDR_VAR 0 4
21972: PUSH
21973: LD_INT 2
21975: ST_TO_ADDR
// break ;
21976: GO 21980
// end ;
21978: GO 21951
21980: POP
21981: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
21982: LD_VAR 0 1
21986: PPUSH
21987: LD_VAR 0 2
21991: PPUSH
21992: LD_VAR 0 3
21996: PPUSH
21997: LD_VAR 0 4
22001: PPUSH
22002: LD_VAR 0 5
22006: PPUSH
22007: CALL_OW 448
22011: IFFALSE 22046
// begin result := [ chassis , engine , control , weapon ] ;
22013: LD_ADDR_VAR 0 6
22017: PUSH
22018: LD_VAR 0 2
22022: PUSH
22023: LD_VAR 0 3
22027: PUSH
22028: LD_VAR 0 4
22032: PUSH
22033: LD_VAR 0 5
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: ST_TO_ADDR
// exit ;
22044: GO 22458
// end ; _chassis := AvailableChassisList ( factory ) ;
22046: LD_ADDR_VAR 0 9
22050: PUSH
22051: LD_VAR 0 1
22055: PPUSH
22056: CALL_OW 475
22060: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22061: LD_ADDR_VAR 0 11
22065: PUSH
22066: LD_VAR 0 1
22070: PPUSH
22071: CALL_OW 476
22075: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22076: LD_ADDR_VAR 0 12
22080: PUSH
22081: LD_VAR 0 1
22085: PPUSH
22086: CALL_OW 477
22090: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22091: LD_ADDR_VAR 0 10
22095: PUSH
22096: LD_VAR 0 1
22100: PPUSH
22101: CALL_OW 478
22105: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22106: LD_VAR 0 9
22110: NOT
22111: PUSH
22112: LD_VAR 0 11
22116: NOT
22117: OR
22118: PUSH
22119: LD_VAR 0 12
22123: NOT
22124: OR
22125: PUSH
22126: LD_VAR 0 10
22130: NOT
22131: OR
22132: IFFALSE 22167
// begin result := [ chassis , engine , control , weapon ] ;
22134: LD_ADDR_VAR 0 6
22138: PUSH
22139: LD_VAR 0 2
22143: PUSH
22144: LD_VAR 0 3
22148: PUSH
22149: LD_VAR 0 4
22153: PUSH
22154: LD_VAR 0 5
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: ST_TO_ADDR
// exit ;
22165: GO 22458
// end ; if not chassis in _chassis then
22167: LD_VAR 0 2
22171: PUSH
22172: LD_VAR 0 9
22176: IN
22177: NOT
22178: IFFALSE 22204
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22180: LD_ADDR_VAR 0 2
22184: PUSH
22185: LD_VAR 0 9
22189: PUSH
22190: LD_INT 1
22192: PPUSH
22193: LD_VAR 0 9
22197: PPUSH
22198: CALL_OW 12
22202: ARRAY
22203: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22204: LD_VAR 0 2
22208: PPUSH
22209: LD_VAR 0 3
22213: PPUSH
22214: CALL 22463 0 2
22218: NOT
22219: IFFALSE 22278
// repeat engine := _engine [ 1 ] ;
22221: LD_ADDR_VAR 0 3
22225: PUSH
22226: LD_VAR 0 11
22230: PUSH
22231: LD_INT 1
22233: ARRAY
22234: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22235: LD_ADDR_VAR 0 11
22239: PUSH
22240: LD_VAR 0 11
22244: PPUSH
22245: LD_INT 1
22247: PPUSH
22248: CALL_OW 3
22252: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22253: LD_VAR 0 2
22257: PPUSH
22258: LD_VAR 0 3
22262: PPUSH
22263: CALL 22463 0 2
22267: PUSH
22268: LD_VAR 0 11
22272: PUSH
22273: EMPTY
22274: EQUAL
22275: OR
22276: IFFALSE 22221
// if not control in _control then
22278: LD_VAR 0 4
22282: PUSH
22283: LD_VAR 0 12
22287: IN
22288: NOT
22289: IFFALSE 22315
// control := _control [ rand ( 1 , _control ) ] ;
22291: LD_ADDR_VAR 0 4
22295: PUSH
22296: LD_VAR 0 12
22300: PUSH
22301: LD_INT 1
22303: PPUSH
22304: LD_VAR 0 12
22308: PPUSH
22309: CALL_OW 12
22313: ARRAY
22314: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22315: LD_VAR 0 2
22319: PPUSH
22320: LD_VAR 0 5
22324: PPUSH
22325: CALL 22683 0 2
22329: NOT
22330: IFFALSE 22389
// repeat weapon := _weapon [ 1 ] ;
22332: LD_ADDR_VAR 0 5
22336: PUSH
22337: LD_VAR 0 10
22341: PUSH
22342: LD_INT 1
22344: ARRAY
22345: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22346: LD_ADDR_VAR 0 10
22350: PUSH
22351: LD_VAR 0 10
22355: PPUSH
22356: LD_INT 1
22358: PPUSH
22359: CALL_OW 3
22363: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22364: LD_VAR 0 2
22368: PPUSH
22369: LD_VAR 0 5
22373: PPUSH
22374: CALL 22683 0 2
22378: PUSH
22379: LD_VAR 0 10
22383: PUSH
22384: EMPTY
22385: EQUAL
22386: OR
22387: IFFALSE 22332
// result := [ ] ;
22389: LD_ADDR_VAR 0 6
22393: PUSH
22394: EMPTY
22395: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22396: LD_VAR 0 1
22400: PPUSH
22401: LD_VAR 0 2
22405: PPUSH
22406: LD_VAR 0 3
22410: PPUSH
22411: LD_VAR 0 4
22415: PPUSH
22416: LD_VAR 0 5
22420: PPUSH
22421: CALL_OW 448
22425: IFFALSE 22458
// result := [ chassis , engine , control , weapon ] ;
22427: LD_ADDR_VAR 0 6
22431: PUSH
22432: LD_VAR 0 2
22436: PUSH
22437: LD_VAR 0 3
22441: PUSH
22442: LD_VAR 0 4
22446: PUSH
22447: LD_VAR 0 5
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: ST_TO_ADDR
// end ;
22458: LD_VAR 0 6
22462: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22463: LD_INT 0
22465: PPUSH
// if not chassis or not engine then
22466: LD_VAR 0 1
22470: NOT
22471: PUSH
22472: LD_VAR 0 2
22476: NOT
22477: OR
22478: IFFALSE 22482
// exit ;
22480: GO 22678
// case engine of engine_solar :
22482: LD_VAR 0 2
22486: PUSH
22487: LD_INT 2
22489: DOUBLE
22490: EQUAL
22491: IFTRUE 22495
22493: GO 22533
22495: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
22496: LD_ADDR_VAR 0 3
22500: PUSH
22501: LD_INT 11
22503: PUSH
22504: LD_INT 12
22506: PUSH
22507: LD_INT 13
22509: PUSH
22510: LD_INT 14
22512: PUSH
22513: LD_INT 1
22515: PUSH
22516: LD_INT 2
22518: PUSH
22519: LD_INT 3
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: ST_TO_ADDR
22531: GO 22662
22533: LD_INT 1
22535: DOUBLE
22536: EQUAL
22537: IFTRUE 22541
22539: GO 22603
22541: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
22542: LD_ADDR_VAR 0 3
22546: PUSH
22547: LD_INT 11
22549: PUSH
22550: LD_INT 12
22552: PUSH
22553: LD_INT 13
22555: PUSH
22556: LD_INT 14
22558: PUSH
22559: LD_INT 1
22561: PUSH
22562: LD_INT 2
22564: PUSH
22565: LD_INT 3
22567: PUSH
22568: LD_INT 4
22570: PUSH
22571: LD_INT 5
22573: PUSH
22574: LD_INT 21
22576: PUSH
22577: LD_INT 23
22579: PUSH
22580: LD_INT 22
22582: PUSH
22583: LD_INT 24
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: ST_TO_ADDR
22601: GO 22662
22603: LD_INT 3
22605: DOUBLE
22606: EQUAL
22607: IFTRUE 22611
22609: GO 22661
22611: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22612: LD_ADDR_VAR 0 3
22616: PUSH
22617: LD_INT 13
22619: PUSH
22620: LD_INT 14
22622: PUSH
22623: LD_INT 2
22625: PUSH
22626: LD_INT 3
22628: PUSH
22629: LD_INT 4
22631: PUSH
22632: LD_INT 5
22634: PUSH
22635: LD_INT 21
22637: PUSH
22638: LD_INT 22
22640: PUSH
22641: LD_INT 23
22643: PUSH
22644: LD_INT 24
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: ST_TO_ADDR
22659: GO 22662
22661: POP
// result := ( chassis in result ) ;
22662: LD_ADDR_VAR 0 3
22666: PUSH
22667: LD_VAR 0 1
22671: PUSH
22672: LD_VAR 0 3
22676: IN
22677: ST_TO_ADDR
// end ;
22678: LD_VAR 0 3
22682: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
22683: LD_INT 0
22685: PPUSH
// if not chassis or not weapon then
22686: LD_VAR 0 1
22690: NOT
22691: PUSH
22692: LD_VAR 0 2
22696: NOT
22697: OR
22698: IFFALSE 22702
// exit ;
22700: GO 23728
// case weapon of us_machine_gun :
22702: LD_VAR 0 2
22706: PUSH
22707: LD_INT 2
22709: DOUBLE
22710: EQUAL
22711: IFTRUE 22715
22713: GO 22745
22715: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
22716: LD_ADDR_VAR 0 3
22720: PUSH
22721: LD_INT 1
22723: PUSH
22724: LD_INT 2
22726: PUSH
22727: LD_INT 3
22729: PUSH
22730: LD_INT 4
22732: PUSH
22733: LD_INT 5
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: ST_TO_ADDR
22743: GO 23712
22745: LD_INT 3
22747: DOUBLE
22748: EQUAL
22749: IFTRUE 22753
22751: GO 22783
22753: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
22754: LD_ADDR_VAR 0 3
22758: PUSH
22759: LD_INT 1
22761: PUSH
22762: LD_INT 2
22764: PUSH
22765: LD_INT 3
22767: PUSH
22768: LD_INT 4
22770: PUSH
22771: LD_INT 5
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: ST_TO_ADDR
22781: GO 23712
22783: LD_INT 11
22785: DOUBLE
22786: EQUAL
22787: IFTRUE 22791
22789: GO 22821
22791: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
22792: LD_ADDR_VAR 0 3
22796: PUSH
22797: LD_INT 1
22799: PUSH
22800: LD_INT 2
22802: PUSH
22803: LD_INT 3
22805: PUSH
22806: LD_INT 4
22808: PUSH
22809: LD_INT 5
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: ST_TO_ADDR
22819: GO 23712
22821: LD_INT 4
22823: DOUBLE
22824: EQUAL
22825: IFTRUE 22829
22827: GO 22855
22829: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
22830: LD_ADDR_VAR 0 3
22834: PUSH
22835: LD_INT 2
22837: PUSH
22838: LD_INT 3
22840: PUSH
22841: LD_INT 4
22843: PUSH
22844: LD_INT 5
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: ST_TO_ADDR
22853: GO 23712
22855: LD_INT 5
22857: DOUBLE
22858: EQUAL
22859: IFTRUE 22863
22861: GO 22889
22863: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
22864: LD_ADDR_VAR 0 3
22868: PUSH
22869: LD_INT 2
22871: PUSH
22872: LD_INT 3
22874: PUSH
22875: LD_INT 4
22877: PUSH
22878: LD_INT 5
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: ST_TO_ADDR
22887: GO 23712
22889: LD_INT 9
22891: DOUBLE
22892: EQUAL
22893: IFTRUE 22897
22895: GO 22923
22897: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
22898: LD_ADDR_VAR 0 3
22902: PUSH
22903: LD_INT 2
22905: PUSH
22906: LD_INT 3
22908: PUSH
22909: LD_INT 4
22911: PUSH
22912: LD_INT 5
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: ST_TO_ADDR
22921: GO 23712
22923: LD_INT 7
22925: DOUBLE
22926: EQUAL
22927: IFTRUE 22931
22929: GO 22957
22931: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
22932: LD_ADDR_VAR 0 3
22936: PUSH
22937: LD_INT 2
22939: PUSH
22940: LD_INT 3
22942: PUSH
22943: LD_INT 4
22945: PUSH
22946: LD_INT 5
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: ST_TO_ADDR
22955: GO 23712
22957: LD_INT 12
22959: DOUBLE
22960: EQUAL
22961: IFTRUE 22965
22963: GO 22991
22965: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
22966: LD_ADDR_VAR 0 3
22970: PUSH
22971: LD_INT 2
22973: PUSH
22974: LD_INT 3
22976: PUSH
22977: LD_INT 4
22979: PUSH
22980: LD_INT 5
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: ST_TO_ADDR
22989: GO 23712
22991: LD_INT 13
22993: DOUBLE
22994: EQUAL
22995: IFTRUE 22999
22997: GO 23025
22999: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23000: LD_ADDR_VAR 0 3
23004: PUSH
23005: LD_INT 2
23007: PUSH
23008: LD_INT 3
23010: PUSH
23011: LD_INT 4
23013: PUSH
23014: LD_INT 5
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: ST_TO_ADDR
23023: GO 23712
23025: LD_INT 14
23027: DOUBLE
23028: EQUAL
23029: IFTRUE 23033
23031: GO 23051
23033: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23034: LD_ADDR_VAR 0 3
23038: PUSH
23039: LD_INT 4
23041: PUSH
23042: LD_INT 5
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: ST_TO_ADDR
23049: GO 23712
23051: LD_INT 6
23053: DOUBLE
23054: EQUAL
23055: IFTRUE 23059
23057: GO 23077
23059: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23060: LD_ADDR_VAR 0 3
23064: PUSH
23065: LD_INT 4
23067: PUSH
23068: LD_INT 5
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: ST_TO_ADDR
23075: GO 23712
23077: LD_INT 10
23079: DOUBLE
23080: EQUAL
23081: IFTRUE 23085
23083: GO 23103
23085: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23086: LD_ADDR_VAR 0 3
23090: PUSH
23091: LD_INT 4
23093: PUSH
23094: LD_INT 5
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: ST_TO_ADDR
23101: GO 23712
23103: LD_INT 22
23105: DOUBLE
23106: EQUAL
23107: IFTRUE 23111
23109: GO 23137
23111: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23112: LD_ADDR_VAR 0 3
23116: PUSH
23117: LD_INT 11
23119: PUSH
23120: LD_INT 12
23122: PUSH
23123: LD_INT 13
23125: PUSH
23126: LD_INT 14
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: ST_TO_ADDR
23135: GO 23712
23137: LD_INT 23
23139: DOUBLE
23140: EQUAL
23141: IFTRUE 23145
23143: GO 23171
23145: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23146: LD_ADDR_VAR 0 3
23150: PUSH
23151: LD_INT 11
23153: PUSH
23154: LD_INT 12
23156: PUSH
23157: LD_INT 13
23159: PUSH
23160: LD_INT 14
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: ST_TO_ADDR
23169: GO 23712
23171: LD_INT 24
23173: DOUBLE
23174: EQUAL
23175: IFTRUE 23179
23177: GO 23205
23179: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23180: LD_ADDR_VAR 0 3
23184: PUSH
23185: LD_INT 11
23187: PUSH
23188: LD_INT 12
23190: PUSH
23191: LD_INT 13
23193: PUSH
23194: LD_INT 14
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: ST_TO_ADDR
23203: GO 23712
23205: LD_INT 30
23207: DOUBLE
23208: EQUAL
23209: IFTRUE 23213
23211: GO 23239
23213: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23214: LD_ADDR_VAR 0 3
23218: PUSH
23219: LD_INT 11
23221: PUSH
23222: LD_INT 12
23224: PUSH
23225: LD_INT 13
23227: PUSH
23228: LD_INT 14
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: ST_TO_ADDR
23237: GO 23712
23239: LD_INT 25
23241: DOUBLE
23242: EQUAL
23243: IFTRUE 23247
23245: GO 23265
23247: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23248: LD_ADDR_VAR 0 3
23252: PUSH
23253: LD_INT 13
23255: PUSH
23256: LD_INT 14
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: ST_TO_ADDR
23263: GO 23712
23265: LD_INT 27
23267: DOUBLE
23268: EQUAL
23269: IFTRUE 23273
23271: GO 23291
23273: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23274: LD_ADDR_VAR 0 3
23278: PUSH
23279: LD_INT 13
23281: PUSH
23282: LD_INT 14
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: ST_TO_ADDR
23289: GO 23712
23291: LD_INT 28
23293: DOUBLE
23294: EQUAL
23295: IFTRUE 23299
23297: GO 23317
23299: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23300: LD_ADDR_VAR 0 3
23304: PUSH
23305: LD_INT 13
23307: PUSH
23308: LD_INT 14
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: ST_TO_ADDR
23315: GO 23712
23317: LD_INT 29
23319: DOUBLE
23320: EQUAL
23321: IFTRUE 23325
23323: GO 23343
23325: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23326: LD_ADDR_VAR 0 3
23330: PUSH
23331: LD_INT 13
23333: PUSH
23334: LD_INT 14
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: ST_TO_ADDR
23341: GO 23712
23343: LD_INT 31
23345: DOUBLE
23346: EQUAL
23347: IFTRUE 23351
23349: GO 23369
23351: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23352: LD_ADDR_VAR 0 3
23356: PUSH
23357: LD_INT 13
23359: PUSH
23360: LD_INT 14
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: ST_TO_ADDR
23367: GO 23712
23369: LD_INT 26
23371: DOUBLE
23372: EQUAL
23373: IFTRUE 23377
23375: GO 23395
23377: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23378: LD_ADDR_VAR 0 3
23382: PUSH
23383: LD_INT 13
23385: PUSH
23386: LD_INT 14
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: ST_TO_ADDR
23393: GO 23712
23395: LD_INT 42
23397: DOUBLE
23398: EQUAL
23399: IFTRUE 23403
23401: GO 23429
23403: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23404: LD_ADDR_VAR 0 3
23408: PUSH
23409: LD_INT 21
23411: PUSH
23412: LD_INT 22
23414: PUSH
23415: LD_INT 23
23417: PUSH
23418: LD_INT 24
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: ST_TO_ADDR
23427: GO 23712
23429: LD_INT 43
23431: DOUBLE
23432: EQUAL
23433: IFTRUE 23437
23435: GO 23463
23437: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23438: LD_ADDR_VAR 0 3
23442: PUSH
23443: LD_INT 21
23445: PUSH
23446: LD_INT 22
23448: PUSH
23449: LD_INT 23
23451: PUSH
23452: LD_INT 24
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: ST_TO_ADDR
23461: GO 23712
23463: LD_INT 44
23465: DOUBLE
23466: EQUAL
23467: IFTRUE 23471
23469: GO 23497
23471: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
23472: LD_ADDR_VAR 0 3
23476: PUSH
23477: LD_INT 21
23479: PUSH
23480: LD_INT 22
23482: PUSH
23483: LD_INT 23
23485: PUSH
23486: LD_INT 24
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: ST_TO_ADDR
23495: GO 23712
23497: LD_INT 45
23499: DOUBLE
23500: EQUAL
23501: IFTRUE 23505
23503: GO 23531
23505: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
23506: LD_ADDR_VAR 0 3
23510: PUSH
23511: LD_INT 21
23513: PUSH
23514: LD_INT 22
23516: PUSH
23517: LD_INT 23
23519: PUSH
23520: LD_INT 24
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: ST_TO_ADDR
23529: GO 23712
23531: LD_INT 49
23533: DOUBLE
23534: EQUAL
23535: IFTRUE 23539
23537: GO 23565
23539: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
23540: LD_ADDR_VAR 0 3
23544: PUSH
23545: LD_INT 21
23547: PUSH
23548: LD_INT 22
23550: PUSH
23551: LD_INT 23
23553: PUSH
23554: LD_INT 24
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: ST_TO_ADDR
23563: GO 23712
23565: LD_INT 51
23567: DOUBLE
23568: EQUAL
23569: IFTRUE 23573
23571: GO 23599
23573: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
23574: LD_ADDR_VAR 0 3
23578: PUSH
23579: LD_INT 21
23581: PUSH
23582: LD_INT 22
23584: PUSH
23585: LD_INT 23
23587: PUSH
23588: LD_INT 24
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: ST_TO_ADDR
23597: GO 23712
23599: LD_INT 52
23601: DOUBLE
23602: EQUAL
23603: IFTRUE 23607
23605: GO 23633
23607: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
23608: LD_ADDR_VAR 0 3
23612: PUSH
23613: LD_INT 21
23615: PUSH
23616: LD_INT 22
23618: PUSH
23619: LD_INT 23
23621: PUSH
23622: LD_INT 24
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: ST_TO_ADDR
23631: GO 23712
23633: LD_INT 53
23635: DOUBLE
23636: EQUAL
23637: IFTRUE 23641
23639: GO 23659
23641: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
23642: LD_ADDR_VAR 0 3
23646: PUSH
23647: LD_INT 23
23649: PUSH
23650: LD_INT 24
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: ST_TO_ADDR
23657: GO 23712
23659: LD_INT 46
23661: DOUBLE
23662: EQUAL
23663: IFTRUE 23667
23665: GO 23685
23667: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
23668: LD_ADDR_VAR 0 3
23672: PUSH
23673: LD_INT 23
23675: PUSH
23676: LD_INT 24
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: ST_TO_ADDR
23683: GO 23712
23685: LD_INT 47
23687: DOUBLE
23688: EQUAL
23689: IFTRUE 23693
23691: GO 23711
23693: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23694: LD_ADDR_VAR 0 3
23698: PUSH
23699: LD_INT 23
23701: PUSH
23702: LD_INT 24
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: ST_TO_ADDR
23709: GO 23712
23711: POP
// result := ( chassis in result ) ;
23712: LD_ADDR_VAR 0 3
23716: PUSH
23717: LD_VAR 0 1
23721: PUSH
23722: LD_VAR 0 3
23726: IN
23727: ST_TO_ADDR
// end ;
23728: LD_VAR 0 3
23732: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
23733: LD_INT 0
23735: PPUSH
23736: PPUSH
23737: PPUSH
23738: PPUSH
23739: PPUSH
23740: PPUSH
23741: PPUSH
// result := array ;
23742: LD_ADDR_VAR 0 5
23746: PUSH
23747: LD_VAR 0 1
23751: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
23752: LD_VAR 0 1
23756: NOT
23757: PUSH
23758: LD_VAR 0 2
23762: NOT
23763: OR
23764: PUSH
23765: LD_VAR 0 3
23769: NOT
23770: OR
23771: PUSH
23772: LD_VAR 0 2
23776: PUSH
23777: LD_VAR 0 1
23781: GREATER
23782: OR
23783: PUSH
23784: LD_VAR 0 3
23788: PUSH
23789: LD_VAR 0 1
23793: GREATER
23794: OR
23795: IFFALSE 23799
// exit ;
23797: GO 24095
// if direction then
23799: LD_VAR 0 4
23803: IFFALSE 23867
// begin d := 1 ;
23805: LD_ADDR_VAR 0 9
23809: PUSH
23810: LD_INT 1
23812: ST_TO_ADDR
// if i_from > i_to then
23813: LD_VAR 0 2
23817: PUSH
23818: LD_VAR 0 3
23822: GREATER
23823: IFFALSE 23849
// length := ( array - i_from ) + i_to else
23825: LD_ADDR_VAR 0 11
23829: PUSH
23830: LD_VAR 0 1
23834: PUSH
23835: LD_VAR 0 2
23839: MINUS
23840: PUSH
23841: LD_VAR 0 3
23845: PLUS
23846: ST_TO_ADDR
23847: GO 23865
// length := i_to - i_from ;
23849: LD_ADDR_VAR 0 11
23853: PUSH
23854: LD_VAR 0 3
23858: PUSH
23859: LD_VAR 0 2
23863: MINUS
23864: ST_TO_ADDR
// end else
23865: GO 23928
// begin d := - 1 ;
23867: LD_ADDR_VAR 0 9
23871: PUSH
23872: LD_INT 1
23874: NEG
23875: ST_TO_ADDR
// if i_from > i_to then
23876: LD_VAR 0 2
23880: PUSH
23881: LD_VAR 0 3
23885: GREATER
23886: IFFALSE 23906
// length := i_from - i_to else
23888: LD_ADDR_VAR 0 11
23892: PUSH
23893: LD_VAR 0 2
23897: PUSH
23898: LD_VAR 0 3
23902: MINUS
23903: ST_TO_ADDR
23904: GO 23928
// length := ( array - i_to ) + i_from ;
23906: LD_ADDR_VAR 0 11
23910: PUSH
23911: LD_VAR 0 1
23915: PUSH
23916: LD_VAR 0 3
23920: MINUS
23921: PUSH
23922: LD_VAR 0 2
23926: PLUS
23927: ST_TO_ADDR
// end ; if not length then
23928: LD_VAR 0 11
23932: NOT
23933: IFFALSE 23937
// exit ;
23935: GO 24095
// tmp := array ;
23937: LD_ADDR_VAR 0 10
23941: PUSH
23942: LD_VAR 0 1
23946: ST_TO_ADDR
// for i = 1 to length do
23947: LD_ADDR_VAR 0 6
23951: PUSH
23952: DOUBLE
23953: LD_INT 1
23955: DEC
23956: ST_TO_ADDR
23957: LD_VAR 0 11
23961: PUSH
23962: FOR_TO
23963: IFFALSE 24083
// begin for j = 1 to array do
23965: LD_ADDR_VAR 0 7
23969: PUSH
23970: DOUBLE
23971: LD_INT 1
23973: DEC
23974: ST_TO_ADDR
23975: LD_VAR 0 1
23979: PUSH
23980: FOR_TO
23981: IFFALSE 24069
// begin k := j + d ;
23983: LD_ADDR_VAR 0 8
23987: PUSH
23988: LD_VAR 0 7
23992: PUSH
23993: LD_VAR 0 9
23997: PLUS
23998: ST_TO_ADDR
// if k > array then
23999: LD_VAR 0 8
24003: PUSH
24004: LD_VAR 0 1
24008: GREATER
24009: IFFALSE 24019
// k := 1 ;
24011: LD_ADDR_VAR 0 8
24015: PUSH
24016: LD_INT 1
24018: ST_TO_ADDR
// if not k then
24019: LD_VAR 0 8
24023: NOT
24024: IFFALSE 24036
// k := array ;
24026: LD_ADDR_VAR 0 8
24030: PUSH
24031: LD_VAR 0 1
24035: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24036: LD_ADDR_VAR 0 10
24040: PUSH
24041: LD_VAR 0 10
24045: PPUSH
24046: LD_VAR 0 8
24050: PPUSH
24051: LD_VAR 0 1
24055: PUSH
24056: LD_VAR 0 7
24060: ARRAY
24061: PPUSH
24062: CALL_OW 1
24066: ST_TO_ADDR
// end ;
24067: GO 23980
24069: POP
24070: POP
// array := tmp ;
24071: LD_ADDR_VAR 0 1
24075: PUSH
24076: LD_VAR 0 10
24080: ST_TO_ADDR
// end ;
24081: GO 23962
24083: POP
24084: POP
// result := array ;
24085: LD_ADDR_VAR 0 5
24089: PUSH
24090: LD_VAR 0 1
24094: ST_TO_ADDR
// end ;
24095: LD_VAR 0 5
24099: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24100: LD_INT 0
24102: PPUSH
24103: PPUSH
// result := 0 ;
24104: LD_ADDR_VAR 0 3
24108: PUSH
24109: LD_INT 0
24111: ST_TO_ADDR
// if not array or not value in array then
24112: LD_VAR 0 1
24116: NOT
24117: PUSH
24118: LD_VAR 0 2
24122: PUSH
24123: LD_VAR 0 1
24127: IN
24128: NOT
24129: OR
24130: IFFALSE 24134
// exit ;
24132: GO 24188
// for i = 1 to array do
24134: LD_ADDR_VAR 0 4
24138: PUSH
24139: DOUBLE
24140: LD_INT 1
24142: DEC
24143: ST_TO_ADDR
24144: LD_VAR 0 1
24148: PUSH
24149: FOR_TO
24150: IFFALSE 24186
// if value = array [ i ] then
24152: LD_VAR 0 2
24156: PUSH
24157: LD_VAR 0 1
24161: PUSH
24162: LD_VAR 0 4
24166: ARRAY
24167: EQUAL
24168: IFFALSE 24184
// begin result := i ;
24170: LD_ADDR_VAR 0 3
24174: PUSH
24175: LD_VAR 0 4
24179: ST_TO_ADDR
// exit ;
24180: POP
24181: POP
24182: GO 24188
// end ;
24184: GO 24149
24186: POP
24187: POP
// end ;
24188: LD_VAR 0 3
24192: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24193: LD_INT 0
24195: PPUSH
// vc_chassis := chassis ;
24196: LD_ADDR_OWVAR 37
24200: PUSH
24201: LD_VAR 0 1
24205: ST_TO_ADDR
// vc_engine := engine ;
24206: LD_ADDR_OWVAR 39
24210: PUSH
24211: LD_VAR 0 2
24215: ST_TO_ADDR
// vc_control := control ;
24216: LD_ADDR_OWVAR 38
24220: PUSH
24221: LD_VAR 0 3
24225: ST_TO_ADDR
// vc_weapon := weapon ;
24226: LD_ADDR_OWVAR 40
24230: PUSH
24231: LD_VAR 0 4
24235: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24236: LD_ADDR_OWVAR 41
24240: PUSH
24241: LD_VAR 0 5
24245: ST_TO_ADDR
// end ;
24246: LD_VAR 0 6
24250: RET
// export function WantPlant ( unit ) ; var task ; begin
24251: LD_INT 0
24253: PPUSH
24254: PPUSH
// result := false ;
24255: LD_ADDR_VAR 0 2
24259: PUSH
24260: LD_INT 0
24262: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24263: LD_ADDR_VAR 0 3
24267: PUSH
24268: LD_VAR 0 1
24272: PPUSH
24273: CALL_OW 437
24277: ST_TO_ADDR
// if task then
24278: LD_VAR 0 3
24282: IFFALSE 24310
// if task [ 1 ] [ 1 ] = p then
24284: LD_VAR 0 3
24288: PUSH
24289: LD_INT 1
24291: ARRAY
24292: PUSH
24293: LD_INT 1
24295: ARRAY
24296: PUSH
24297: LD_STRING p
24299: EQUAL
24300: IFFALSE 24310
// result := true ;
24302: LD_ADDR_VAR 0 2
24306: PUSH
24307: LD_INT 1
24309: ST_TO_ADDR
// end ;
24310: LD_VAR 0 2
24314: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24315: LD_INT 0
24317: PPUSH
24318: PPUSH
24319: PPUSH
24320: PPUSH
// if pos < 1 then
24321: LD_VAR 0 2
24325: PUSH
24326: LD_INT 1
24328: LESS
24329: IFFALSE 24333
// exit ;
24331: GO 24636
// if pos = 1 then
24333: LD_VAR 0 2
24337: PUSH
24338: LD_INT 1
24340: EQUAL
24341: IFFALSE 24374
// result := Replace ( arr , pos [ 1 ] , value ) else
24343: LD_ADDR_VAR 0 4
24347: PUSH
24348: LD_VAR 0 1
24352: PPUSH
24353: LD_VAR 0 2
24357: PUSH
24358: LD_INT 1
24360: ARRAY
24361: PPUSH
24362: LD_VAR 0 3
24366: PPUSH
24367: CALL_OW 1
24371: ST_TO_ADDR
24372: GO 24636
// begin tmp := arr ;
24374: LD_ADDR_VAR 0 6
24378: PUSH
24379: LD_VAR 0 1
24383: ST_TO_ADDR
// s_arr := [ tmp ] ;
24384: LD_ADDR_VAR 0 7
24388: PUSH
24389: LD_VAR 0 6
24393: PUSH
24394: EMPTY
24395: LIST
24396: ST_TO_ADDR
// for i = 1 to pos - 1 do
24397: LD_ADDR_VAR 0 5
24401: PUSH
24402: DOUBLE
24403: LD_INT 1
24405: DEC
24406: ST_TO_ADDR
24407: LD_VAR 0 2
24411: PUSH
24412: LD_INT 1
24414: MINUS
24415: PUSH
24416: FOR_TO
24417: IFFALSE 24462
// begin tmp := tmp [ pos [ i ] ] ;
24419: LD_ADDR_VAR 0 6
24423: PUSH
24424: LD_VAR 0 6
24428: PUSH
24429: LD_VAR 0 2
24433: PUSH
24434: LD_VAR 0 5
24438: ARRAY
24439: ARRAY
24440: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24441: LD_ADDR_VAR 0 7
24445: PUSH
24446: LD_VAR 0 7
24450: PUSH
24451: LD_VAR 0 6
24455: PUSH
24456: EMPTY
24457: LIST
24458: ADD
24459: ST_TO_ADDR
// end ;
24460: GO 24416
24462: POP
24463: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
24464: LD_ADDR_VAR 0 6
24468: PUSH
24469: LD_VAR 0 6
24473: PPUSH
24474: LD_VAR 0 2
24478: PUSH
24479: LD_VAR 0 2
24483: ARRAY
24484: PPUSH
24485: LD_VAR 0 3
24489: PPUSH
24490: CALL_OW 1
24494: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
24495: LD_ADDR_VAR 0 7
24499: PUSH
24500: LD_VAR 0 7
24504: PPUSH
24505: LD_VAR 0 7
24509: PPUSH
24510: LD_VAR 0 6
24514: PPUSH
24515: CALL_OW 1
24519: ST_TO_ADDR
// for i = s_arr downto 2 do
24520: LD_ADDR_VAR 0 5
24524: PUSH
24525: DOUBLE
24526: LD_VAR 0 7
24530: INC
24531: ST_TO_ADDR
24532: LD_INT 2
24534: PUSH
24535: FOR_DOWNTO
24536: IFFALSE 24620
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
24538: LD_ADDR_VAR 0 6
24542: PUSH
24543: LD_VAR 0 7
24547: PUSH
24548: LD_VAR 0 5
24552: PUSH
24553: LD_INT 1
24555: MINUS
24556: ARRAY
24557: PPUSH
24558: LD_VAR 0 2
24562: PUSH
24563: LD_VAR 0 5
24567: PUSH
24568: LD_INT 1
24570: MINUS
24571: ARRAY
24572: PPUSH
24573: LD_VAR 0 7
24577: PUSH
24578: LD_VAR 0 5
24582: ARRAY
24583: PPUSH
24584: CALL_OW 1
24588: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
24589: LD_ADDR_VAR 0 7
24593: PUSH
24594: LD_VAR 0 7
24598: PPUSH
24599: LD_VAR 0 5
24603: PUSH
24604: LD_INT 1
24606: MINUS
24607: PPUSH
24608: LD_VAR 0 6
24612: PPUSH
24613: CALL_OW 1
24617: ST_TO_ADDR
// end ;
24618: GO 24535
24620: POP
24621: POP
// result := s_arr [ 1 ] ;
24622: LD_ADDR_VAR 0 4
24626: PUSH
24627: LD_VAR 0 7
24631: PUSH
24632: LD_INT 1
24634: ARRAY
24635: ST_TO_ADDR
// end ; end ;
24636: LD_VAR 0 4
24640: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
24641: LD_INT 0
24643: PPUSH
24644: PPUSH
// if not list then
24645: LD_VAR 0 1
24649: NOT
24650: IFFALSE 24654
// exit ;
24652: GO 24745
// i := list [ pos1 ] ;
24654: LD_ADDR_VAR 0 5
24658: PUSH
24659: LD_VAR 0 1
24663: PUSH
24664: LD_VAR 0 2
24668: ARRAY
24669: ST_TO_ADDR
// if not i then
24670: LD_VAR 0 5
24674: NOT
24675: IFFALSE 24679
// exit ;
24677: GO 24745
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
24679: LD_ADDR_VAR 0 1
24683: PUSH
24684: LD_VAR 0 1
24688: PPUSH
24689: LD_VAR 0 2
24693: PPUSH
24694: LD_VAR 0 1
24698: PUSH
24699: LD_VAR 0 3
24703: ARRAY
24704: PPUSH
24705: CALL_OW 1
24709: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
24710: LD_ADDR_VAR 0 1
24714: PUSH
24715: LD_VAR 0 1
24719: PPUSH
24720: LD_VAR 0 3
24724: PPUSH
24725: LD_VAR 0 5
24729: PPUSH
24730: CALL_OW 1
24734: ST_TO_ADDR
// result := list ;
24735: LD_ADDR_VAR 0 4
24739: PUSH
24740: LD_VAR 0 1
24744: ST_TO_ADDR
// end ;
24745: LD_VAR 0 4
24749: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
24750: LD_INT 0
24752: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
24753: LD_ADDR_VAR 0 5
24757: PUSH
24758: LD_VAR 0 1
24762: PPUSH
24763: CALL_OW 250
24767: PPUSH
24768: LD_VAR 0 1
24772: PPUSH
24773: CALL_OW 251
24777: PPUSH
24778: LD_VAR 0 2
24782: PPUSH
24783: LD_VAR 0 3
24787: PPUSH
24788: LD_VAR 0 4
24792: PPUSH
24793: CALL 24803 0 5
24797: ST_TO_ADDR
// end ;
24798: LD_VAR 0 5
24802: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
24803: LD_INT 0
24805: PPUSH
24806: PPUSH
24807: PPUSH
24808: PPUSH
// if not list then
24809: LD_VAR 0 3
24813: NOT
24814: IFFALSE 24818
// exit ;
24816: GO 25206
// result := [ ] ;
24818: LD_ADDR_VAR 0 6
24822: PUSH
24823: EMPTY
24824: ST_TO_ADDR
// for i in list do
24825: LD_ADDR_VAR 0 7
24829: PUSH
24830: LD_VAR 0 3
24834: PUSH
24835: FOR_IN
24836: IFFALSE 25038
// begin tmp := GetDistUnitXY ( i , x , y ) ;
24838: LD_ADDR_VAR 0 9
24842: PUSH
24843: LD_VAR 0 7
24847: PPUSH
24848: LD_VAR 0 1
24852: PPUSH
24853: LD_VAR 0 2
24857: PPUSH
24858: CALL_OW 297
24862: ST_TO_ADDR
// if not result then
24863: LD_VAR 0 6
24867: NOT
24868: IFFALSE 24894
// result := [ [ i , tmp ] ] else
24870: LD_ADDR_VAR 0 6
24874: PUSH
24875: LD_VAR 0 7
24879: PUSH
24880: LD_VAR 0 9
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: EMPTY
24890: LIST
24891: ST_TO_ADDR
24892: GO 25036
// begin if result [ result ] [ 2 ] < tmp then
24894: LD_VAR 0 6
24898: PUSH
24899: LD_VAR 0 6
24903: ARRAY
24904: PUSH
24905: LD_INT 2
24907: ARRAY
24908: PUSH
24909: LD_VAR 0 9
24913: LESS
24914: IFFALSE 24956
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
24916: LD_ADDR_VAR 0 6
24920: PUSH
24921: LD_VAR 0 6
24925: PPUSH
24926: LD_VAR 0 6
24930: PUSH
24931: LD_INT 1
24933: PLUS
24934: PPUSH
24935: LD_VAR 0 7
24939: PUSH
24940: LD_VAR 0 9
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PPUSH
24949: CALL_OW 2
24953: ST_TO_ADDR
24954: GO 25036
// for j = 1 to result do
24956: LD_ADDR_VAR 0 8
24960: PUSH
24961: DOUBLE
24962: LD_INT 1
24964: DEC
24965: ST_TO_ADDR
24966: LD_VAR 0 6
24970: PUSH
24971: FOR_TO
24972: IFFALSE 25034
// begin if tmp < result [ j ] [ 2 ] then
24974: LD_VAR 0 9
24978: PUSH
24979: LD_VAR 0 6
24983: PUSH
24984: LD_VAR 0 8
24988: ARRAY
24989: PUSH
24990: LD_INT 2
24992: ARRAY
24993: LESS
24994: IFFALSE 25032
// begin result := Insert ( result , j , [ i , tmp ] ) ;
24996: LD_ADDR_VAR 0 6
25000: PUSH
25001: LD_VAR 0 6
25005: PPUSH
25006: LD_VAR 0 8
25010: PPUSH
25011: LD_VAR 0 7
25015: PUSH
25016: LD_VAR 0 9
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PPUSH
25025: CALL_OW 2
25029: ST_TO_ADDR
// break ;
25030: GO 25034
// end ; end ;
25032: GO 24971
25034: POP
25035: POP
// end ; end ;
25036: GO 24835
25038: POP
25039: POP
// if result and not asc then
25040: LD_VAR 0 6
25044: PUSH
25045: LD_VAR 0 4
25049: NOT
25050: AND
25051: IFFALSE 25126
// begin tmp := result ;
25053: LD_ADDR_VAR 0 9
25057: PUSH
25058: LD_VAR 0 6
25062: ST_TO_ADDR
// for i = tmp downto 1 do
25063: LD_ADDR_VAR 0 7
25067: PUSH
25068: DOUBLE
25069: LD_VAR 0 9
25073: INC
25074: ST_TO_ADDR
25075: LD_INT 1
25077: PUSH
25078: FOR_DOWNTO
25079: IFFALSE 25124
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25081: LD_ADDR_VAR 0 6
25085: PUSH
25086: LD_VAR 0 6
25090: PPUSH
25091: LD_VAR 0 9
25095: PUSH
25096: LD_VAR 0 7
25100: MINUS
25101: PUSH
25102: LD_INT 1
25104: PLUS
25105: PPUSH
25106: LD_VAR 0 9
25110: PUSH
25111: LD_VAR 0 7
25115: ARRAY
25116: PPUSH
25117: CALL_OW 1
25121: ST_TO_ADDR
25122: GO 25078
25124: POP
25125: POP
// end ; tmp := [ ] ;
25126: LD_ADDR_VAR 0 9
25130: PUSH
25131: EMPTY
25132: ST_TO_ADDR
// if mode then
25133: LD_VAR 0 5
25137: IFFALSE 25206
// begin for i = 1 to result do
25139: LD_ADDR_VAR 0 7
25143: PUSH
25144: DOUBLE
25145: LD_INT 1
25147: DEC
25148: ST_TO_ADDR
25149: LD_VAR 0 6
25153: PUSH
25154: FOR_TO
25155: IFFALSE 25194
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25157: LD_ADDR_VAR 0 9
25161: PUSH
25162: LD_VAR 0 9
25166: PPUSH
25167: LD_VAR 0 7
25171: PPUSH
25172: LD_VAR 0 6
25176: PUSH
25177: LD_VAR 0 7
25181: ARRAY
25182: PUSH
25183: LD_INT 1
25185: ARRAY
25186: PPUSH
25187: CALL_OW 1
25191: ST_TO_ADDR
25192: GO 25154
25194: POP
25195: POP
// result := tmp ;
25196: LD_ADDR_VAR 0 6
25200: PUSH
25201: LD_VAR 0 9
25205: ST_TO_ADDR
// end ; end ;
25206: LD_VAR 0 6
25210: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25211: LD_INT 0
25213: PPUSH
25214: PPUSH
25215: PPUSH
25216: PPUSH
25217: PPUSH
25218: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25219: LD_ADDR_VAR 0 5
25223: PUSH
25224: LD_INT 0
25226: PUSH
25227: LD_INT 0
25229: PUSH
25230: LD_INT 0
25232: PUSH
25233: EMPTY
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: ST_TO_ADDR
// if not x or not y then
25241: LD_VAR 0 2
25245: NOT
25246: PUSH
25247: LD_VAR 0 3
25251: NOT
25252: OR
25253: IFFALSE 25257
// exit ;
25255: GO 26903
// if not range then
25257: LD_VAR 0 4
25261: NOT
25262: IFFALSE 25272
// range := 10 ;
25264: LD_ADDR_VAR 0 4
25268: PUSH
25269: LD_INT 10
25271: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25272: LD_ADDR_VAR 0 8
25276: PUSH
25277: LD_INT 81
25279: PUSH
25280: LD_VAR 0 1
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 92
25291: PUSH
25292: LD_VAR 0 2
25296: PUSH
25297: LD_VAR 0 3
25301: PUSH
25302: LD_VAR 0 4
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 3
25315: PUSH
25316: LD_INT 21
25318: PUSH
25319: LD_INT 3
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: LIST
25334: PPUSH
25335: CALL_OW 69
25339: ST_TO_ADDR
// if not tmp then
25340: LD_VAR 0 8
25344: NOT
25345: IFFALSE 25349
// exit ;
25347: GO 26903
// for i in tmp do
25349: LD_ADDR_VAR 0 6
25353: PUSH
25354: LD_VAR 0 8
25358: PUSH
25359: FOR_IN
25360: IFFALSE 26878
// begin points := [ 0 , 0 , 0 ] ;
25362: LD_ADDR_VAR 0 9
25366: PUSH
25367: LD_INT 0
25369: PUSH
25370: LD_INT 0
25372: PUSH
25373: LD_INT 0
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: LIST
25380: ST_TO_ADDR
// bpoints := 1 ;
25381: LD_ADDR_VAR 0 10
25385: PUSH
25386: LD_INT 1
25388: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25389: LD_VAR 0 6
25393: PPUSH
25394: CALL_OW 247
25398: PUSH
25399: LD_INT 1
25401: DOUBLE
25402: EQUAL
25403: IFTRUE 25407
25405: GO 25985
25407: POP
// begin if GetClass ( i ) = 1 then
25408: LD_VAR 0 6
25412: PPUSH
25413: CALL_OW 257
25417: PUSH
25418: LD_INT 1
25420: EQUAL
25421: IFFALSE 25442
// points := [ 10 , 5 , 3 ] ;
25423: LD_ADDR_VAR 0 9
25427: PUSH
25428: LD_INT 10
25430: PUSH
25431: LD_INT 5
25433: PUSH
25434: LD_INT 3
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: LIST
25441: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25442: LD_VAR 0 6
25446: PPUSH
25447: CALL_OW 257
25451: PUSH
25452: LD_INT 2
25454: PUSH
25455: LD_INT 3
25457: PUSH
25458: LD_INT 4
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: LIST
25465: IN
25466: IFFALSE 25487
// points := [ 3 , 2 , 1 ] ;
25468: LD_ADDR_VAR 0 9
25472: PUSH
25473: LD_INT 3
25475: PUSH
25476: LD_INT 2
25478: PUSH
25479: LD_INT 1
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: LIST
25486: ST_TO_ADDR
// if GetClass ( i ) = 5 then
25487: LD_VAR 0 6
25491: PPUSH
25492: CALL_OW 257
25496: PUSH
25497: LD_INT 5
25499: EQUAL
25500: IFFALSE 25521
// points := [ 130 , 5 , 2 ] ;
25502: LD_ADDR_VAR 0 9
25506: PUSH
25507: LD_INT 130
25509: PUSH
25510: LD_INT 5
25512: PUSH
25513: LD_INT 2
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: LIST
25520: ST_TO_ADDR
// if GetClass ( i ) = 8 then
25521: LD_VAR 0 6
25525: PPUSH
25526: CALL_OW 257
25530: PUSH
25531: LD_INT 8
25533: EQUAL
25534: IFFALSE 25555
// points := [ 35 , 35 , 30 ] ;
25536: LD_ADDR_VAR 0 9
25540: PUSH
25541: LD_INT 35
25543: PUSH
25544: LD_INT 35
25546: PUSH
25547: LD_INT 30
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: LIST
25554: ST_TO_ADDR
// if GetClass ( i ) = 9 then
25555: LD_VAR 0 6
25559: PPUSH
25560: CALL_OW 257
25564: PUSH
25565: LD_INT 9
25567: EQUAL
25568: IFFALSE 25589
// points := [ 20 , 55 , 40 ] ;
25570: LD_ADDR_VAR 0 9
25574: PUSH
25575: LD_INT 20
25577: PUSH
25578: LD_INT 55
25580: PUSH
25581: LD_INT 40
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: LIST
25588: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
25589: LD_VAR 0 6
25593: PPUSH
25594: CALL_OW 257
25598: PUSH
25599: LD_INT 12
25601: PUSH
25602: LD_INT 16
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: IN
25609: IFFALSE 25630
// points := [ 5 , 3 , 2 ] ;
25611: LD_ADDR_VAR 0 9
25615: PUSH
25616: LD_INT 5
25618: PUSH
25619: LD_INT 3
25621: PUSH
25622: LD_INT 2
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: LIST
25629: ST_TO_ADDR
// if GetClass ( i ) = 17 then
25630: LD_VAR 0 6
25634: PPUSH
25635: CALL_OW 257
25639: PUSH
25640: LD_INT 17
25642: EQUAL
25643: IFFALSE 25664
// points := [ 100 , 50 , 75 ] ;
25645: LD_ADDR_VAR 0 9
25649: PUSH
25650: LD_INT 100
25652: PUSH
25653: LD_INT 50
25655: PUSH
25656: LD_INT 75
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: LIST
25663: ST_TO_ADDR
// if GetClass ( i ) = 15 then
25664: LD_VAR 0 6
25668: PPUSH
25669: CALL_OW 257
25673: PUSH
25674: LD_INT 15
25676: EQUAL
25677: IFFALSE 25698
// points := [ 10 , 5 , 3 ] ;
25679: LD_ADDR_VAR 0 9
25683: PUSH
25684: LD_INT 10
25686: PUSH
25687: LD_INT 5
25689: PUSH
25690: LD_INT 3
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: LIST
25697: ST_TO_ADDR
// if GetClass ( i ) = 14 then
25698: LD_VAR 0 6
25702: PPUSH
25703: CALL_OW 257
25707: PUSH
25708: LD_INT 14
25710: EQUAL
25711: IFFALSE 25732
// points := [ 10 , 0 , 0 ] ;
25713: LD_ADDR_VAR 0 9
25717: PUSH
25718: LD_INT 10
25720: PUSH
25721: LD_INT 0
25723: PUSH
25724: LD_INT 0
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: LIST
25731: ST_TO_ADDR
// if GetClass ( i ) = 11 then
25732: LD_VAR 0 6
25736: PPUSH
25737: CALL_OW 257
25741: PUSH
25742: LD_INT 11
25744: EQUAL
25745: IFFALSE 25766
// points := [ 30 , 10 , 5 ] ;
25747: LD_ADDR_VAR 0 9
25751: PUSH
25752: LD_INT 30
25754: PUSH
25755: LD_INT 10
25757: PUSH
25758: LD_INT 5
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: LIST
25765: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
25766: LD_VAR 0 1
25770: PPUSH
25771: LD_INT 5
25773: PPUSH
25774: CALL_OW 321
25778: PUSH
25779: LD_INT 2
25781: EQUAL
25782: IFFALSE 25799
// bpoints := bpoints * 1.8 ;
25784: LD_ADDR_VAR 0 10
25788: PUSH
25789: LD_VAR 0 10
25793: PUSH
25794: LD_REAL  1.80000000000000E+0000
25797: MUL
25798: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
25799: LD_VAR 0 6
25803: PPUSH
25804: CALL_OW 257
25808: PUSH
25809: LD_INT 1
25811: PUSH
25812: LD_INT 2
25814: PUSH
25815: LD_INT 3
25817: PUSH
25818: LD_INT 4
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: IN
25827: PUSH
25828: LD_VAR 0 1
25832: PPUSH
25833: LD_INT 51
25835: PPUSH
25836: CALL_OW 321
25840: PUSH
25841: LD_INT 2
25843: EQUAL
25844: AND
25845: IFFALSE 25862
// bpoints := bpoints * 1.2 ;
25847: LD_ADDR_VAR 0 10
25851: PUSH
25852: LD_VAR 0 10
25856: PUSH
25857: LD_REAL  1.20000000000000E+0000
25860: MUL
25861: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
25862: LD_VAR 0 6
25866: PPUSH
25867: CALL_OW 257
25871: PUSH
25872: LD_INT 5
25874: PUSH
25875: LD_INT 7
25877: PUSH
25878: LD_INT 9
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: LIST
25885: IN
25886: PUSH
25887: LD_VAR 0 1
25891: PPUSH
25892: LD_INT 52
25894: PPUSH
25895: CALL_OW 321
25899: PUSH
25900: LD_INT 2
25902: EQUAL
25903: AND
25904: IFFALSE 25921
// bpoints := bpoints * 1.5 ;
25906: LD_ADDR_VAR 0 10
25910: PUSH
25911: LD_VAR 0 10
25915: PUSH
25916: LD_REAL  1.50000000000000E+0000
25919: MUL
25920: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
25921: LD_VAR 0 1
25925: PPUSH
25926: LD_INT 66
25928: PPUSH
25929: CALL_OW 321
25933: PUSH
25934: LD_INT 2
25936: EQUAL
25937: IFFALSE 25954
// bpoints := bpoints * 1.1 ;
25939: LD_ADDR_VAR 0 10
25943: PUSH
25944: LD_VAR 0 10
25948: PUSH
25949: LD_REAL  1.10000000000000E+0000
25952: MUL
25953: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
25954: LD_ADDR_VAR 0 10
25958: PUSH
25959: LD_VAR 0 10
25963: PUSH
25964: LD_VAR 0 6
25968: PPUSH
25969: LD_INT 1
25971: PPUSH
25972: CALL_OW 259
25976: PUSH
25977: LD_REAL  1.15000000000000E+0000
25980: MUL
25981: MUL
25982: ST_TO_ADDR
// end ; unit_vehicle :
25983: GO 26807
25985: LD_INT 2
25987: DOUBLE
25988: EQUAL
25989: IFTRUE 25993
25991: GO 26795
25993: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
25994: LD_VAR 0 6
25998: PPUSH
25999: CALL_OW 264
26003: PUSH
26004: LD_INT 2
26006: PUSH
26007: LD_INT 42
26009: PUSH
26010: LD_INT 24
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: LIST
26017: IN
26018: IFFALSE 26039
// points := [ 25 , 5 , 3 ] ;
26020: LD_ADDR_VAR 0 9
26024: PUSH
26025: LD_INT 25
26027: PUSH
26028: LD_INT 5
26030: PUSH
26031: LD_INT 3
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: LIST
26038: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26039: LD_VAR 0 6
26043: PPUSH
26044: CALL_OW 264
26048: PUSH
26049: LD_INT 4
26051: PUSH
26052: LD_INT 43
26054: PUSH
26055: LD_INT 25
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: LIST
26062: IN
26063: IFFALSE 26084
// points := [ 40 , 15 , 5 ] ;
26065: LD_ADDR_VAR 0 9
26069: PUSH
26070: LD_INT 40
26072: PUSH
26073: LD_INT 15
26075: PUSH
26076: LD_INT 5
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: LIST
26083: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26084: LD_VAR 0 6
26088: PPUSH
26089: CALL_OW 264
26093: PUSH
26094: LD_INT 3
26096: PUSH
26097: LD_INT 23
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: IN
26104: IFFALSE 26125
// points := [ 7 , 25 , 8 ] ;
26106: LD_ADDR_VAR 0 9
26110: PUSH
26111: LD_INT 7
26113: PUSH
26114: LD_INT 25
26116: PUSH
26117: LD_INT 8
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: LIST
26124: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26125: LD_VAR 0 6
26129: PPUSH
26130: CALL_OW 264
26134: PUSH
26135: LD_INT 5
26137: PUSH
26138: LD_INT 27
26140: PUSH
26141: LD_INT 44
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: LIST
26148: IN
26149: IFFALSE 26170
// points := [ 14 , 50 , 16 ] ;
26151: LD_ADDR_VAR 0 9
26155: PUSH
26156: LD_INT 14
26158: PUSH
26159: LD_INT 50
26161: PUSH
26162: LD_INT 16
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: LIST
26169: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26170: LD_VAR 0 6
26174: PPUSH
26175: CALL_OW 264
26179: PUSH
26180: LD_INT 6
26182: PUSH
26183: LD_INT 46
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: IN
26190: IFFALSE 26211
// points := [ 32 , 120 , 70 ] ;
26192: LD_ADDR_VAR 0 9
26196: PUSH
26197: LD_INT 32
26199: PUSH
26200: LD_INT 120
26202: PUSH
26203: LD_INT 70
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: LIST
26210: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
26211: LD_VAR 0 6
26215: PPUSH
26216: CALL_OW 264
26220: PUSH
26221: LD_INT 7
26223: PUSH
26224: LD_INT 28
26226: PUSH
26227: LD_INT 45
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: LIST
26234: IN
26235: IFFALSE 26256
// points := [ 35 , 20 , 45 ] ;
26237: LD_ADDR_VAR 0 9
26241: PUSH
26242: LD_INT 35
26244: PUSH
26245: LD_INT 20
26247: PUSH
26248: LD_INT 45
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: LIST
26255: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26256: LD_VAR 0 6
26260: PPUSH
26261: CALL_OW 264
26265: PUSH
26266: LD_INT 47
26268: PUSH
26269: EMPTY
26270: LIST
26271: IN
26272: IFFALSE 26293
// points := [ 67 , 45 , 75 ] ;
26274: LD_ADDR_VAR 0 9
26278: PUSH
26279: LD_INT 67
26281: PUSH
26282: LD_INT 45
26284: PUSH
26285: LD_INT 75
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: LIST
26292: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26293: LD_VAR 0 6
26297: PPUSH
26298: CALL_OW 264
26302: PUSH
26303: LD_INT 26
26305: PUSH
26306: EMPTY
26307: LIST
26308: IN
26309: IFFALSE 26330
// points := [ 120 , 30 , 80 ] ;
26311: LD_ADDR_VAR 0 9
26315: PUSH
26316: LD_INT 120
26318: PUSH
26319: LD_INT 30
26321: PUSH
26322: LD_INT 80
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: LIST
26329: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26330: LD_VAR 0 6
26334: PPUSH
26335: CALL_OW 264
26339: PUSH
26340: LD_INT 22
26342: PUSH
26343: EMPTY
26344: LIST
26345: IN
26346: IFFALSE 26367
// points := [ 40 , 1 , 1 ] ;
26348: LD_ADDR_VAR 0 9
26352: PUSH
26353: LD_INT 40
26355: PUSH
26356: LD_INT 1
26358: PUSH
26359: LD_INT 1
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: LIST
26366: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26367: LD_VAR 0 6
26371: PPUSH
26372: CALL_OW 264
26376: PUSH
26377: LD_INT 29
26379: PUSH
26380: EMPTY
26381: LIST
26382: IN
26383: IFFALSE 26404
// points := [ 70 , 200 , 400 ] ;
26385: LD_ADDR_VAR 0 9
26389: PUSH
26390: LD_INT 70
26392: PUSH
26393: LD_INT 200
26395: PUSH
26396: LD_INT 400
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: LIST
26403: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26404: LD_VAR 0 6
26408: PPUSH
26409: CALL_OW 264
26413: PUSH
26414: LD_INT 14
26416: PUSH
26417: LD_INT 53
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: IN
26424: IFFALSE 26445
// points := [ 40 , 10 , 20 ] ;
26426: LD_ADDR_VAR 0 9
26430: PUSH
26431: LD_INT 40
26433: PUSH
26434: LD_INT 10
26436: PUSH
26437: LD_INT 20
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: LIST
26444: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
26445: LD_VAR 0 6
26449: PPUSH
26450: CALL_OW 264
26454: PUSH
26455: LD_INT 9
26457: PUSH
26458: EMPTY
26459: LIST
26460: IN
26461: IFFALSE 26482
// points := [ 5 , 70 , 20 ] ;
26463: LD_ADDR_VAR 0 9
26467: PUSH
26468: LD_INT 5
26470: PUSH
26471: LD_INT 70
26473: PUSH
26474: LD_INT 20
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: LIST
26481: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
26482: LD_VAR 0 6
26486: PPUSH
26487: CALL_OW 264
26491: PUSH
26492: LD_INT 10
26494: PUSH
26495: EMPTY
26496: LIST
26497: IN
26498: IFFALSE 26519
// points := [ 35 , 110 , 70 ] ;
26500: LD_ADDR_VAR 0 9
26504: PUSH
26505: LD_INT 35
26507: PUSH
26508: LD_INT 110
26510: PUSH
26511: LD_INT 70
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: LIST
26518: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
26519: LD_VAR 0 6
26523: PPUSH
26524: CALL_OW 265
26528: PUSH
26529: LD_INT 25
26531: EQUAL
26532: IFFALSE 26553
// points := [ 80 , 65 , 100 ] ;
26534: LD_ADDR_VAR 0 9
26538: PUSH
26539: LD_INT 80
26541: PUSH
26542: LD_INT 65
26544: PUSH
26545: LD_INT 100
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: LIST
26552: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
26553: LD_VAR 0 6
26557: PPUSH
26558: CALL_OW 263
26562: PUSH
26563: LD_INT 1
26565: EQUAL
26566: IFFALSE 26601
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
26568: LD_ADDR_VAR 0 10
26572: PUSH
26573: LD_VAR 0 10
26577: PUSH
26578: LD_VAR 0 6
26582: PPUSH
26583: CALL_OW 311
26587: PPUSH
26588: LD_INT 3
26590: PPUSH
26591: CALL_OW 259
26595: PUSH
26596: LD_INT 4
26598: MUL
26599: MUL
26600: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
26601: LD_VAR 0 6
26605: PPUSH
26606: CALL_OW 263
26610: PUSH
26611: LD_INT 2
26613: EQUAL
26614: IFFALSE 26665
// begin j := IsControledBy ( i ) ;
26616: LD_ADDR_VAR 0 7
26620: PUSH
26621: LD_VAR 0 6
26625: PPUSH
26626: CALL_OW 312
26630: ST_TO_ADDR
// if j then
26631: LD_VAR 0 7
26635: IFFALSE 26665
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
26637: LD_ADDR_VAR 0 10
26641: PUSH
26642: LD_VAR 0 10
26646: PUSH
26647: LD_VAR 0 7
26651: PPUSH
26652: LD_INT 3
26654: PPUSH
26655: CALL_OW 259
26659: PUSH
26660: LD_INT 3
26662: MUL
26663: MUL
26664: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
26665: LD_VAR 0 6
26669: PPUSH
26670: CALL_OW 264
26674: PUSH
26675: LD_INT 5
26677: PUSH
26678: LD_INT 6
26680: PUSH
26681: LD_INT 46
26683: PUSH
26684: LD_INT 44
26686: PUSH
26687: LD_INT 47
26689: PUSH
26690: LD_INT 45
26692: PUSH
26693: LD_INT 28
26695: PUSH
26696: LD_INT 7
26698: PUSH
26699: LD_INT 27
26701: PUSH
26702: LD_INT 29
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: IN
26717: PUSH
26718: LD_VAR 0 1
26722: PPUSH
26723: LD_INT 52
26725: PPUSH
26726: CALL_OW 321
26730: PUSH
26731: LD_INT 2
26733: EQUAL
26734: AND
26735: IFFALSE 26752
// bpoints := bpoints * 1.2 ;
26737: LD_ADDR_VAR 0 10
26741: PUSH
26742: LD_VAR 0 10
26746: PUSH
26747: LD_REAL  1.20000000000000E+0000
26750: MUL
26751: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
26752: LD_VAR 0 6
26756: PPUSH
26757: CALL_OW 264
26761: PUSH
26762: LD_INT 6
26764: PUSH
26765: LD_INT 46
26767: PUSH
26768: LD_INT 47
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: LIST
26775: IN
26776: IFFALSE 26793
// bpoints := bpoints * 1.2 ;
26778: LD_ADDR_VAR 0 10
26782: PUSH
26783: LD_VAR 0 10
26787: PUSH
26788: LD_REAL  1.20000000000000E+0000
26791: MUL
26792: ST_TO_ADDR
// end ; unit_building :
26793: GO 26807
26795: LD_INT 3
26797: DOUBLE
26798: EQUAL
26799: IFTRUE 26803
26801: GO 26806
26803: POP
// ; end ;
26804: GO 26807
26806: POP
// for j = 1 to 3 do
26807: LD_ADDR_VAR 0 7
26811: PUSH
26812: DOUBLE
26813: LD_INT 1
26815: DEC
26816: ST_TO_ADDR
26817: LD_INT 3
26819: PUSH
26820: FOR_TO
26821: IFFALSE 26874
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
26823: LD_ADDR_VAR 0 5
26827: PUSH
26828: LD_VAR 0 5
26832: PPUSH
26833: LD_VAR 0 7
26837: PPUSH
26838: LD_VAR 0 5
26842: PUSH
26843: LD_VAR 0 7
26847: ARRAY
26848: PUSH
26849: LD_VAR 0 9
26853: PUSH
26854: LD_VAR 0 7
26858: ARRAY
26859: PUSH
26860: LD_VAR 0 10
26864: MUL
26865: PLUS
26866: PPUSH
26867: CALL_OW 1
26871: ST_TO_ADDR
26872: GO 26820
26874: POP
26875: POP
// end ;
26876: GO 25359
26878: POP
26879: POP
// result := Replace ( result , 4 , tmp ) ;
26880: LD_ADDR_VAR 0 5
26884: PUSH
26885: LD_VAR 0 5
26889: PPUSH
26890: LD_INT 4
26892: PPUSH
26893: LD_VAR 0 8
26897: PPUSH
26898: CALL_OW 1
26902: ST_TO_ADDR
// end ;
26903: LD_VAR 0 5
26907: RET
// export function DangerAtRange ( unit , range ) ; begin
26908: LD_INT 0
26910: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
26911: LD_ADDR_VAR 0 3
26915: PUSH
26916: LD_VAR 0 1
26920: PPUSH
26921: CALL_OW 255
26925: PPUSH
26926: LD_VAR 0 1
26930: PPUSH
26931: CALL_OW 250
26935: PPUSH
26936: LD_VAR 0 1
26940: PPUSH
26941: CALL_OW 251
26945: PPUSH
26946: LD_VAR 0 2
26950: PPUSH
26951: CALL 25211 0 4
26955: ST_TO_ADDR
// end ;
26956: LD_VAR 0 3
26960: RET
// export function DangerInArea ( side , area ) ; begin
26961: LD_INT 0
26963: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
26964: LD_ADDR_VAR 0 3
26968: PUSH
26969: LD_VAR 0 2
26973: PPUSH
26974: LD_INT 81
26976: PUSH
26977: LD_VAR 0 1
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PPUSH
26986: CALL_OW 70
26990: ST_TO_ADDR
// end ;
26991: LD_VAR 0 3
26995: RET
// export function IsExtension ( b ) ; begin
26996: LD_INT 0
26998: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
26999: LD_ADDR_VAR 0 2
27003: PUSH
27004: LD_VAR 0 1
27008: PUSH
27009: LD_INT 23
27011: PUSH
27012: LD_INT 20
27014: PUSH
27015: LD_INT 22
27017: PUSH
27018: LD_INT 17
27020: PUSH
27021: LD_INT 24
27023: PUSH
27024: LD_INT 21
27026: PUSH
27027: LD_INT 19
27029: PUSH
27030: LD_INT 16
27032: PUSH
27033: LD_INT 25
27035: PUSH
27036: LD_INT 18
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: IN
27051: ST_TO_ADDR
// end ;
27052: LD_VAR 0 2
27056: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
27057: LD_INT 0
27059: PPUSH
27060: PPUSH
27061: PPUSH
// result := [ ] ;
27062: LD_ADDR_VAR 0 4
27066: PUSH
27067: EMPTY
27068: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27069: LD_ADDR_VAR 0 5
27073: PUSH
27074: LD_VAR 0 2
27078: PPUSH
27079: LD_INT 21
27081: PUSH
27082: LD_INT 3
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PPUSH
27089: CALL_OW 70
27093: ST_TO_ADDR
// if not tmp then
27094: LD_VAR 0 5
27098: NOT
27099: IFFALSE 27103
// exit ;
27101: GO 27167
// if checkLink then
27103: LD_VAR 0 3
27107: IFFALSE 27157
// begin for i in tmp do
27109: LD_ADDR_VAR 0 6
27113: PUSH
27114: LD_VAR 0 5
27118: PUSH
27119: FOR_IN
27120: IFFALSE 27155
// if GetBase ( i ) <> base then
27122: LD_VAR 0 6
27126: PPUSH
27127: CALL_OW 274
27131: PUSH
27132: LD_VAR 0 1
27136: NONEQUAL
27137: IFFALSE 27153
// ComLinkToBase ( base , i ) ;
27139: LD_VAR 0 1
27143: PPUSH
27144: LD_VAR 0 6
27148: PPUSH
27149: CALL_OW 169
27153: GO 27119
27155: POP
27156: POP
// end ; result := tmp ;
27157: LD_ADDR_VAR 0 4
27161: PUSH
27162: LD_VAR 0 5
27166: ST_TO_ADDR
// end ;
27167: LD_VAR 0 4
27171: RET
// export function ComComplete ( units , b ) ; var i ; begin
27172: LD_INT 0
27174: PPUSH
27175: PPUSH
// if not units then
27176: LD_VAR 0 1
27180: NOT
27181: IFFALSE 27185
// exit ;
27183: GO 27275
// for i in units do
27185: LD_ADDR_VAR 0 4
27189: PUSH
27190: LD_VAR 0 1
27194: PUSH
27195: FOR_IN
27196: IFFALSE 27273
// if BuildingStatus ( b ) = bs_build then
27198: LD_VAR 0 2
27202: PPUSH
27203: CALL_OW 461
27207: PUSH
27208: LD_INT 1
27210: EQUAL
27211: IFFALSE 27271
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27213: LD_VAR 0 4
27217: PPUSH
27218: LD_STRING h
27220: PUSH
27221: LD_VAR 0 2
27225: PPUSH
27226: CALL_OW 250
27230: PUSH
27231: LD_VAR 0 2
27235: PPUSH
27236: CALL_OW 251
27240: PUSH
27241: LD_VAR 0 2
27245: PUSH
27246: LD_INT 0
27248: PUSH
27249: LD_INT 0
27251: PUSH
27252: LD_INT 0
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: PUSH
27264: EMPTY
27265: LIST
27266: PPUSH
27267: CALL_OW 446
27271: GO 27195
27273: POP
27274: POP
// end ;
27275: LD_VAR 0 3
27279: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27280: LD_INT 0
27282: PPUSH
27283: PPUSH
27284: PPUSH
27285: PPUSH
27286: PPUSH
27287: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
27288: LD_VAR 0 1
27292: NOT
27293: PUSH
27294: LD_VAR 0 1
27298: PPUSH
27299: CALL_OW 263
27303: PUSH
27304: LD_INT 2
27306: EQUAL
27307: NOT
27308: OR
27309: IFFALSE 27313
// exit ;
27311: GO 27629
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27313: LD_ADDR_VAR 0 6
27317: PUSH
27318: LD_INT 22
27320: PUSH
27321: LD_VAR 0 1
27325: PPUSH
27326: CALL_OW 255
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 2
27337: PUSH
27338: LD_INT 30
27340: PUSH
27341: LD_INT 36
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: LD_INT 34
27350: PUSH
27351: LD_INT 31
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: LIST
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PPUSH
27367: CALL_OW 69
27371: ST_TO_ADDR
// if not tmp then
27372: LD_VAR 0 6
27376: NOT
27377: IFFALSE 27381
// exit ;
27379: GO 27629
// result := [ ] ;
27381: LD_ADDR_VAR 0 2
27385: PUSH
27386: EMPTY
27387: ST_TO_ADDR
// for i in tmp do
27388: LD_ADDR_VAR 0 3
27392: PUSH
27393: LD_VAR 0 6
27397: PUSH
27398: FOR_IN
27399: IFFALSE 27470
// begin t := UnitsInside ( i ) ;
27401: LD_ADDR_VAR 0 4
27405: PUSH
27406: LD_VAR 0 3
27410: PPUSH
27411: CALL_OW 313
27415: ST_TO_ADDR
// if t then
27416: LD_VAR 0 4
27420: IFFALSE 27468
// for j in t do
27422: LD_ADDR_VAR 0 7
27426: PUSH
27427: LD_VAR 0 4
27431: PUSH
27432: FOR_IN
27433: IFFALSE 27466
// result := Insert ( result , result + 1 , j ) ;
27435: LD_ADDR_VAR 0 2
27439: PUSH
27440: LD_VAR 0 2
27444: PPUSH
27445: LD_VAR 0 2
27449: PUSH
27450: LD_INT 1
27452: PLUS
27453: PPUSH
27454: LD_VAR 0 7
27458: PPUSH
27459: CALL_OW 2
27463: ST_TO_ADDR
27464: GO 27432
27466: POP
27467: POP
// end ;
27468: GO 27398
27470: POP
27471: POP
// if not result then
27472: LD_VAR 0 2
27476: NOT
27477: IFFALSE 27481
// exit ;
27479: GO 27629
// mech := result [ 1 ] ;
27481: LD_ADDR_VAR 0 5
27485: PUSH
27486: LD_VAR 0 2
27490: PUSH
27491: LD_INT 1
27493: ARRAY
27494: ST_TO_ADDR
// if result > 1 then
27495: LD_VAR 0 2
27499: PUSH
27500: LD_INT 1
27502: GREATER
27503: IFFALSE 27615
// for i = 2 to result do
27505: LD_ADDR_VAR 0 3
27509: PUSH
27510: DOUBLE
27511: LD_INT 2
27513: DEC
27514: ST_TO_ADDR
27515: LD_VAR 0 2
27519: PUSH
27520: FOR_TO
27521: IFFALSE 27613
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
27523: LD_ADDR_VAR 0 4
27527: PUSH
27528: LD_VAR 0 2
27532: PUSH
27533: LD_VAR 0 3
27537: ARRAY
27538: PPUSH
27539: LD_INT 3
27541: PPUSH
27542: CALL_OW 259
27546: PUSH
27547: LD_VAR 0 2
27551: PUSH
27552: LD_VAR 0 3
27556: ARRAY
27557: PPUSH
27558: CALL_OW 432
27562: MINUS
27563: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
27564: LD_VAR 0 4
27568: PUSH
27569: LD_VAR 0 5
27573: PPUSH
27574: LD_INT 3
27576: PPUSH
27577: CALL_OW 259
27581: PUSH
27582: LD_VAR 0 5
27586: PPUSH
27587: CALL_OW 432
27591: MINUS
27592: GREATEREQUAL
27593: IFFALSE 27611
// mech := result [ i ] ;
27595: LD_ADDR_VAR 0 5
27599: PUSH
27600: LD_VAR 0 2
27604: PUSH
27605: LD_VAR 0 3
27609: ARRAY
27610: ST_TO_ADDR
// end ;
27611: GO 27520
27613: POP
27614: POP
// ComLinkTo ( vehicle , mech ) ;
27615: LD_VAR 0 1
27619: PPUSH
27620: LD_VAR 0 5
27624: PPUSH
27625: CALL_OW 135
// end ;
27629: LD_VAR 0 2
27633: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
27634: LD_INT 0
27636: PPUSH
27637: PPUSH
27638: PPUSH
27639: PPUSH
27640: PPUSH
27641: PPUSH
27642: PPUSH
27643: PPUSH
27644: PPUSH
27645: PPUSH
27646: PPUSH
27647: PPUSH
27648: PPUSH
// result := [ ] ;
27649: LD_ADDR_VAR 0 7
27653: PUSH
27654: EMPTY
27655: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
27656: LD_VAR 0 1
27660: PPUSH
27661: CALL_OW 266
27665: PUSH
27666: LD_INT 0
27668: PUSH
27669: LD_INT 1
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: IN
27676: NOT
27677: IFFALSE 27681
// exit ;
27679: GO 29315
// if name then
27681: LD_VAR 0 3
27685: IFFALSE 27701
// SetBName ( base_dep , name ) ;
27687: LD_VAR 0 1
27691: PPUSH
27692: LD_VAR 0 3
27696: PPUSH
27697: CALL_OW 500
// base := GetBase ( base_dep ) ;
27701: LD_ADDR_VAR 0 15
27705: PUSH
27706: LD_VAR 0 1
27710: PPUSH
27711: CALL_OW 274
27715: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
27716: LD_ADDR_VAR 0 16
27720: PUSH
27721: LD_VAR 0 1
27725: PPUSH
27726: CALL_OW 255
27730: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
27731: LD_ADDR_VAR 0 17
27735: PUSH
27736: LD_VAR 0 1
27740: PPUSH
27741: CALL_OW 248
27745: ST_TO_ADDR
// if sources then
27746: LD_VAR 0 5
27750: IFFALSE 27797
// for i = 1 to 3 do
27752: LD_ADDR_VAR 0 8
27756: PUSH
27757: DOUBLE
27758: LD_INT 1
27760: DEC
27761: ST_TO_ADDR
27762: LD_INT 3
27764: PUSH
27765: FOR_TO
27766: IFFALSE 27795
// AddResourceType ( base , i , sources [ i ] ) ;
27768: LD_VAR 0 15
27772: PPUSH
27773: LD_VAR 0 8
27777: PPUSH
27778: LD_VAR 0 5
27782: PUSH
27783: LD_VAR 0 8
27787: ARRAY
27788: PPUSH
27789: CALL_OW 276
27793: GO 27765
27795: POP
27796: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
27797: LD_ADDR_VAR 0 18
27801: PUSH
27802: LD_VAR 0 15
27806: PPUSH
27807: LD_VAR 0 2
27811: PPUSH
27812: LD_INT 1
27814: PPUSH
27815: CALL 27057 0 3
27819: ST_TO_ADDR
// InitHc ;
27820: CALL_OW 19
// InitUc ;
27824: CALL_OW 18
// uc_side := side ;
27828: LD_ADDR_OWVAR 20
27832: PUSH
27833: LD_VAR 0 16
27837: ST_TO_ADDR
// uc_nation := nation ;
27838: LD_ADDR_OWVAR 21
27842: PUSH
27843: LD_VAR 0 17
27847: ST_TO_ADDR
// if buildings then
27848: LD_VAR 0 18
27852: IFFALSE 29174
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
27854: LD_ADDR_VAR 0 19
27858: PUSH
27859: LD_VAR 0 18
27863: PPUSH
27864: LD_INT 2
27866: PUSH
27867: LD_INT 30
27869: PUSH
27870: LD_INT 29
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PUSH
27877: LD_INT 30
27879: PUSH
27880: LD_INT 30
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: LIST
27891: PPUSH
27892: CALL_OW 72
27896: ST_TO_ADDR
// if tmp then
27897: LD_VAR 0 19
27901: IFFALSE 27949
// for i in tmp do
27903: LD_ADDR_VAR 0 8
27907: PUSH
27908: LD_VAR 0 19
27912: PUSH
27913: FOR_IN
27914: IFFALSE 27947
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
27916: LD_VAR 0 8
27920: PPUSH
27921: CALL_OW 250
27925: PPUSH
27926: LD_VAR 0 8
27930: PPUSH
27931: CALL_OW 251
27935: PPUSH
27936: LD_VAR 0 16
27940: PPUSH
27941: CALL_OW 441
27945: GO 27913
27947: POP
27948: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
27949: LD_VAR 0 18
27953: PPUSH
27954: LD_INT 2
27956: PUSH
27957: LD_INT 30
27959: PUSH
27960: LD_INT 32
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 30
27969: PUSH
27970: LD_INT 33
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: LIST
27981: PPUSH
27982: CALL_OW 72
27986: IFFALSE 28074
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
27988: LD_ADDR_VAR 0 8
27992: PUSH
27993: LD_VAR 0 18
27997: PPUSH
27998: LD_INT 2
28000: PUSH
28001: LD_INT 30
28003: PUSH
28004: LD_INT 32
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 30
28013: PUSH
28014: LD_INT 33
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: LIST
28025: PPUSH
28026: CALL_OW 72
28030: PUSH
28031: FOR_IN
28032: IFFALSE 28072
// begin if not GetBWeapon ( i ) then
28034: LD_VAR 0 8
28038: PPUSH
28039: CALL_OW 269
28043: NOT
28044: IFFALSE 28070
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
28046: LD_VAR 0 8
28050: PPUSH
28051: LD_VAR 0 8
28055: PPUSH
28056: LD_VAR 0 2
28060: PPUSH
28061: CALL 29320 0 2
28065: PPUSH
28066: CALL_OW 431
// end ;
28070: GO 28031
28072: POP
28073: POP
// end ; for i = 1 to personel do
28074: LD_ADDR_VAR 0 8
28078: PUSH
28079: DOUBLE
28080: LD_INT 1
28082: DEC
28083: ST_TO_ADDR
28084: LD_VAR 0 6
28088: PUSH
28089: FOR_TO
28090: IFFALSE 29154
// begin if i > 4 then
28092: LD_VAR 0 8
28096: PUSH
28097: LD_INT 4
28099: GREATER
28100: IFFALSE 28104
// break ;
28102: GO 29154
// case i of 1 :
28104: LD_VAR 0 8
28108: PUSH
28109: LD_INT 1
28111: DOUBLE
28112: EQUAL
28113: IFTRUE 28117
28115: GO 28197
28117: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28118: LD_ADDR_VAR 0 12
28122: PUSH
28123: LD_VAR 0 18
28127: PPUSH
28128: LD_INT 22
28130: PUSH
28131: LD_VAR 0 16
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: LD_INT 58
28142: PUSH
28143: EMPTY
28144: LIST
28145: PUSH
28146: LD_INT 2
28148: PUSH
28149: LD_INT 30
28151: PUSH
28152: LD_INT 32
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 30
28161: PUSH
28162: LD_INT 4
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 30
28171: PUSH
28172: LD_INT 5
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: LIST
28189: PPUSH
28190: CALL_OW 72
28194: ST_TO_ADDR
28195: GO 28419
28197: LD_INT 2
28199: DOUBLE
28200: EQUAL
28201: IFTRUE 28205
28203: GO 28267
28205: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28206: LD_ADDR_VAR 0 12
28210: PUSH
28211: LD_VAR 0 18
28215: PPUSH
28216: LD_INT 22
28218: PUSH
28219: LD_VAR 0 16
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 2
28230: PUSH
28231: LD_INT 30
28233: PUSH
28234: LD_INT 0
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 30
28243: PUSH
28244: LD_INT 1
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: LIST
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PPUSH
28260: CALL_OW 72
28264: ST_TO_ADDR
28265: GO 28419
28267: LD_INT 3
28269: DOUBLE
28270: EQUAL
28271: IFTRUE 28275
28273: GO 28337
28275: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28276: LD_ADDR_VAR 0 12
28280: PUSH
28281: LD_VAR 0 18
28285: PPUSH
28286: LD_INT 22
28288: PUSH
28289: LD_VAR 0 16
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 2
28300: PUSH
28301: LD_INT 30
28303: PUSH
28304: LD_INT 2
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 30
28313: PUSH
28314: LD_INT 3
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: LIST
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PPUSH
28330: CALL_OW 72
28334: ST_TO_ADDR
28335: GO 28419
28337: LD_INT 4
28339: DOUBLE
28340: EQUAL
28341: IFTRUE 28345
28343: GO 28418
28345: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28346: LD_ADDR_VAR 0 12
28350: PUSH
28351: LD_VAR 0 18
28355: PPUSH
28356: LD_INT 22
28358: PUSH
28359: LD_VAR 0 16
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 2
28370: PUSH
28371: LD_INT 30
28373: PUSH
28374: LD_INT 6
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 30
28383: PUSH
28384: LD_INT 7
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 30
28393: PUSH
28394: LD_INT 8
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: PPUSH
28411: CALL_OW 72
28415: ST_TO_ADDR
28416: GO 28419
28418: POP
// if i = 1 then
28419: LD_VAR 0 8
28423: PUSH
28424: LD_INT 1
28426: EQUAL
28427: IFFALSE 28538
// begin tmp := [ ] ;
28429: LD_ADDR_VAR 0 19
28433: PUSH
28434: EMPTY
28435: ST_TO_ADDR
// for j in f do
28436: LD_ADDR_VAR 0 9
28440: PUSH
28441: LD_VAR 0 12
28445: PUSH
28446: FOR_IN
28447: IFFALSE 28520
// if GetBType ( j ) = b_bunker then
28449: LD_VAR 0 9
28453: PPUSH
28454: CALL_OW 266
28458: PUSH
28459: LD_INT 32
28461: EQUAL
28462: IFFALSE 28489
// tmp := Insert ( tmp , 1 , j ) else
28464: LD_ADDR_VAR 0 19
28468: PUSH
28469: LD_VAR 0 19
28473: PPUSH
28474: LD_INT 1
28476: PPUSH
28477: LD_VAR 0 9
28481: PPUSH
28482: CALL_OW 2
28486: ST_TO_ADDR
28487: GO 28518
// tmp := Insert ( tmp , tmp + 1 , j ) ;
28489: LD_ADDR_VAR 0 19
28493: PUSH
28494: LD_VAR 0 19
28498: PPUSH
28499: LD_VAR 0 19
28503: PUSH
28504: LD_INT 1
28506: PLUS
28507: PPUSH
28508: LD_VAR 0 9
28512: PPUSH
28513: CALL_OW 2
28517: ST_TO_ADDR
28518: GO 28446
28520: POP
28521: POP
// if tmp then
28522: LD_VAR 0 19
28526: IFFALSE 28538
// f := tmp ;
28528: LD_ADDR_VAR 0 12
28532: PUSH
28533: LD_VAR 0 19
28537: ST_TO_ADDR
// end ; x := personel [ i ] ;
28538: LD_ADDR_VAR 0 13
28542: PUSH
28543: LD_VAR 0 6
28547: PUSH
28548: LD_VAR 0 8
28552: ARRAY
28553: ST_TO_ADDR
// if x = - 1 then
28554: LD_VAR 0 13
28558: PUSH
28559: LD_INT 1
28561: NEG
28562: EQUAL
28563: IFFALSE 28772
// begin for j in f do
28565: LD_ADDR_VAR 0 9
28569: PUSH
28570: LD_VAR 0 12
28574: PUSH
28575: FOR_IN
28576: IFFALSE 28768
// repeat InitHc ;
28578: CALL_OW 19
// if GetBType ( j ) = b_barracks then
28582: LD_VAR 0 9
28586: PPUSH
28587: CALL_OW 266
28591: PUSH
28592: LD_INT 5
28594: EQUAL
28595: IFFALSE 28665
// begin if UnitsInside ( j ) < 3 then
28597: LD_VAR 0 9
28601: PPUSH
28602: CALL_OW 313
28606: PUSH
28607: LD_INT 3
28609: LESS
28610: IFFALSE 28646
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
28612: LD_INT 0
28614: PPUSH
28615: LD_INT 5
28617: PUSH
28618: LD_INT 8
28620: PUSH
28621: LD_INT 9
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: LIST
28628: PUSH
28629: LD_VAR 0 17
28633: ARRAY
28634: PPUSH
28635: LD_VAR 0 4
28639: PPUSH
28640: CALL_OW 380
28644: GO 28663
// PrepareHuman ( false , i , skill ) ;
28646: LD_INT 0
28648: PPUSH
28649: LD_VAR 0 8
28653: PPUSH
28654: LD_VAR 0 4
28658: PPUSH
28659: CALL_OW 380
// end else
28663: GO 28682
// PrepareHuman ( false , i , skill ) ;
28665: LD_INT 0
28667: PPUSH
28668: LD_VAR 0 8
28672: PPUSH
28673: LD_VAR 0 4
28677: PPUSH
28678: CALL_OW 380
// un := CreateHuman ;
28682: LD_ADDR_VAR 0 14
28686: PUSH
28687: CALL_OW 44
28691: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28692: LD_ADDR_VAR 0 7
28696: PUSH
28697: LD_VAR 0 7
28701: PPUSH
28702: LD_INT 1
28704: PPUSH
28705: LD_VAR 0 14
28709: PPUSH
28710: CALL_OW 2
28714: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
28715: LD_VAR 0 14
28719: PPUSH
28720: LD_VAR 0 9
28724: PPUSH
28725: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
28729: LD_VAR 0 9
28733: PPUSH
28734: CALL_OW 313
28738: PUSH
28739: LD_INT 6
28741: EQUAL
28742: PUSH
28743: LD_VAR 0 9
28747: PPUSH
28748: CALL_OW 266
28752: PUSH
28753: LD_INT 32
28755: PUSH
28756: LD_INT 31
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: IN
28763: OR
28764: IFFALSE 28578
28766: GO 28575
28768: POP
28769: POP
// end else
28770: GO 29152
// for j = 1 to x do
28772: LD_ADDR_VAR 0 9
28776: PUSH
28777: DOUBLE
28778: LD_INT 1
28780: DEC
28781: ST_TO_ADDR
28782: LD_VAR 0 13
28786: PUSH
28787: FOR_TO
28788: IFFALSE 29150
// begin InitHc ;
28790: CALL_OW 19
// if not f then
28794: LD_VAR 0 12
28798: NOT
28799: IFFALSE 28888
// begin PrepareHuman ( false , i , skill ) ;
28801: LD_INT 0
28803: PPUSH
28804: LD_VAR 0 8
28808: PPUSH
28809: LD_VAR 0 4
28813: PPUSH
28814: CALL_OW 380
// un := CreateHuman ;
28818: LD_ADDR_VAR 0 14
28822: PUSH
28823: CALL_OW 44
28827: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
28828: LD_ADDR_VAR 0 7
28832: PUSH
28833: LD_VAR 0 7
28837: PPUSH
28838: LD_INT 1
28840: PPUSH
28841: LD_VAR 0 14
28845: PPUSH
28846: CALL_OW 2
28850: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
28851: LD_VAR 0 14
28855: PPUSH
28856: LD_VAR 0 1
28860: PPUSH
28861: CALL_OW 250
28865: PPUSH
28866: LD_VAR 0 1
28870: PPUSH
28871: CALL_OW 251
28875: PPUSH
28876: LD_INT 10
28878: PPUSH
28879: LD_INT 0
28881: PPUSH
28882: CALL_OW 50
// continue ;
28886: GO 28787
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
28888: LD_VAR 0 12
28892: PUSH
28893: LD_INT 1
28895: ARRAY
28896: PPUSH
28897: CALL_OW 313
28901: PUSH
28902: LD_VAR 0 12
28906: PUSH
28907: LD_INT 1
28909: ARRAY
28910: PPUSH
28911: CALL_OW 266
28915: PUSH
28916: LD_INT 32
28918: PUSH
28919: LD_INT 31
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: IN
28926: AND
28927: PUSH
28928: LD_VAR 0 12
28932: PUSH
28933: LD_INT 1
28935: ARRAY
28936: PPUSH
28937: CALL_OW 313
28941: PUSH
28942: LD_INT 6
28944: EQUAL
28945: OR
28946: IFFALSE 28966
// f := Delete ( f , 1 ) ;
28948: LD_ADDR_VAR 0 12
28952: PUSH
28953: LD_VAR 0 12
28957: PPUSH
28958: LD_INT 1
28960: PPUSH
28961: CALL_OW 3
28965: ST_TO_ADDR
// if not f then
28966: LD_VAR 0 12
28970: NOT
28971: IFFALSE 28989
// begin x := x + 2 ;
28973: LD_ADDR_VAR 0 13
28977: PUSH
28978: LD_VAR 0 13
28982: PUSH
28983: LD_INT 2
28985: PLUS
28986: ST_TO_ADDR
// continue ;
28987: GO 28787
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
28989: LD_VAR 0 12
28993: PUSH
28994: LD_INT 1
28996: ARRAY
28997: PPUSH
28998: CALL_OW 266
29002: PUSH
29003: LD_INT 5
29005: EQUAL
29006: IFFALSE 29080
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29008: LD_VAR 0 12
29012: PUSH
29013: LD_INT 1
29015: ARRAY
29016: PPUSH
29017: CALL_OW 313
29021: PUSH
29022: LD_INT 3
29024: LESS
29025: IFFALSE 29061
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29027: LD_INT 0
29029: PPUSH
29030: LD_INT 5
29032: PUSH
29033: LD_INT 8
29035: PUSH
29036: LD_INT 9
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: LIST
29043: PUSH
29044: LD_VAR 0 17
29048: ARRAY
29049: PPUSH
29050: LD_VAR 0 4
29054: PPUSH
29055: CALL_OW 380
29059: GO 29078
// PrepareHuman ( false , i , skill ) ;
29061: LD_INT 0
29063: PPUSH
29064: LD_VAR 0 8
29068: PPUSH
29069: LD_VAR 0 4
29073: PPUSH
29074: CALL_OW 380
// end else
29078: GO 29097
// PrepareHuman ( false , i , skill ) ;
29080: LD_INT 0
29082: PPUSH
29083: LD_VAR 0 8
29087: PPUSH
29088: LD_VAR 0 4
29092: PPUSH
29093: CALL_OW 380
// un := CreateHuman ;
29097: LD_ADDR_VAR 0 14
29101: PUSH
29102: CALL_OW 44
29106: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29107: LD_ADDR_VAR 0 7
29111: PUSH
29112: LD_VAR 0 7
29116: PPUSH
29117: LD_INT 1
29119: PPUSH
29120: LD_VAR 0 14
29124: PPUSH
29125: CALL_OW 2
29129: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29130: LD_VAR 0 14
29134: PPUSH
29135: LD_VAR 0 12
29139: PUSH
29140: LD_INT 1
29142: ARRAY
29143: PPUSH
29144: CALL_OW 52
// end ;
29148: GO 28787
29150: POP
29151: POP
// end ;
29152: GO 28089
29154: POP
29155: POP
// result := result ^ buildings ;
29156: LD_ADDR_VAR 0 7
29160: PUSH
29161: LD_VAR 0 7
29165: PUSH
29166: LD_VAR 0 18
29170: ADD
29171: ST_TO_ADDR
// end else
29172: GO 29315
// begin for i = 1 to personel do
29174: LD_ADDR_VAR 0 8
29178: PUSH
29179: DOUBLE
29180: LD_INT 1
29182: DEC
29183: ST_TO_ADDR
29184: LD_VAR 0 6
29188: PUSH
29189: FOR_TO
29190: IFFALSE 29313
// begin if i > 4 then
29192: LD_VAR 0 8
29196: PUSH
29197: LD_INT 4
29199: GREATER
29200: IFFALSE 29204
// break ;
29202: GO 29313
// x := personel [ i ] ;
29204: LD_ADDR_VAR 0 13
29208: PUSH
29209: LD_VAR 0 6
29213: PUSH
29214: LD_VAR 0 8
29218: ARRAY
29219: ST_TO_ADDR
// if x = - 1 then
29220: LD_VAR 0 13
29224: PUSH
29225: LD_INT 1
29227: NEG
29228: EQUAL
29229: IFFALSE 29233
// continue ;
29231: GO 29189
// PrepareHuman ( false , i , skill ) ;
29233: LD_INT 0
29235: PPUSH
29236: LD_VAR 0 8
29240: PPUSH
29241: LD_VAR 0 4
29245: PPUSH
29246: CALL_OW 380
// un := CreateHuman ;
29250: LD_ADDR_VAR 0 14
29254: PUSH
29255: CALL_OW 44
29259: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29260: LD_VAR 0 14
29264: PPUSH
29265: LD_VAR 0 1
29269: PPUSH
29270: CALL_OW 250
29274: PPUSH
29275: LD_VAR 0 1
29279: PPUSH
29280: CALL_OW 251
29284: PPUSH
29285: LD_INT 10
29287: PPUSH
29288: LD_INT 0
29290: PPUSH
29291: CALL_OW 50
// result := result ^ un ;
29295: LD_ADDR_VAR 0 7
29299: PUSH
29300: LD_VAR 0 7
29304: PUSH
29305: LD_VAR 0 14
29309: ADD
29310: ST_TO_ADDR
// end ;
29311: GO 29189
29313: POP
29314: POP
// end ; end ;
29315: LD_VAR 0 7
29319: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29320: LD_INT 0
29322: PPUSH
29323: PPUSH
29324: PPUSH
29325: PPUSH
29326: PPUSH
29327: PPUSH
29328: PPUSH
29329: PPUSH
29330: PPUSH
29331: PPUSH
29332: PPUSH
29333: PPUSH
29334: PPUSH
29335: PPUSH
29336: PPUSH
29337: PPUSH
// result := false ;
29338: LD_ADDR_VAR 0 3
29342: PUSH
29343: LD_INT 0
29345: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29346: LD_VAR 0 1
29350: NOT
29351: PUSH
29352: LD_VAR 0 1
29356: PPUSH
29357: CALL_OW 266
29361: PUSH
29362: LD_INT 32
29364: PUSH
29365: LD_INT 33
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: IN
29372: NOT
29373: OR
29374: IFFALSE 29378
// exit ;
29376: GO 30517
// nat := GetNation ( tower ) ;
29378: LD_ADDR_VAR 0 12
29382: PUSH
29383: LD_VAR 0 1
29387: PPUSH
29388: CALL_OW 248
29392: ST_TO_ADDR
// side := GetSide ( tower ) ;
29393: LD_ADDR_VAR 0 16
29397: PUSH
29398: LD_VAR 0 1
29402: PPUSH
29403: CALL_OW 255
29407: ST_TO_ADDR
// x := GetX ( tower ) ;
29408: LD_ADDR_VAR 0 10
29412: PUSH
29413: LD_VAR 0 1
29417: PPUSH
29418: CALL_OW 250
29422: ST_TO_ADDR
// y := GetY ( tower ) ;
29423: LD_ADDR_VAR 0 11
29427: PUSH
29428: LD_VAR 0 1
29432: PPUSH
29433: CALL_OW 251
29437: ST_TO_ADDR
// if not x or not y then
29438: LD_VAR 0 10
29442: NOT
29443: PUSH
29444: LD_VAR 0 11
29448: NOT
29449: OR
29450: IFFALSE 29454
// exit ;
29452: GO 30517
// weapon := 0 ;
29454: LD_ADDR_VAR 0 18
29458: PUSH
29459: LD_INT 0
29461: ST_TO_ADDR
// fac_list := [ ] ;
29462: LD_ADDR_VAR 0 17
29466: PUSH
29467: EMPTY
29468: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
29469: LD_ADDR_VAR 0 6
29473: PUSH
29474: LD_VAR 0 1
29478: PPUSH
29479: CALL_OW 274
29483: PPUSH
29484: LD_VAR 0 2
29488: PPUSH
29489: LD_INT 0
29491: PPUSH
29492: CALL 27057 0 3
29496: PPUSH
29497: LD_INT 30
29499: PUSH
29500: LD_INT 3
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PPUSH
29507: CALL_OW 72
29511: ST_TO_ADDR
// if not factories then
29512: LD_VAR 0 6
29516: NOT
29517: IFFALSE 29521
// exit ;
29519: GO 30517
// for i in factories do
29521: LD_ADDR_VAR 0 8
29525: PUSH
29526: LD_VAR 0 6
29530: PUSH
29531: FOR_IN
29532: IFFALSE 29557
// fac_list := fac_list union AvailableWeaponList ( i ) ;
29534: LD_ADDR_VAR 0 17
29538: PUSH
29539: LD_VAR 0 17
29543: PUSH
29544: LD_VAR 0 8
29548: PPUSH
29549: CALL_OW 478
29553: UNION
29554: ST_TO_ADDR
29555: GO 29531
29557: POP
29558: POP
// if not fac_list then
29559: LD_VAR 0 17
29563: NOT
29564: IFFALSE 29568
// exit ;
29566: GO 30517
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
29568: LD_ADDR_VAR 0 5
29572: PUSH
29573: LD_INT 4
29575: PUSH
29576: LD_INT 5
29578: PUSH
29579: LD_INT 9
29581: PUSH
29582: LD_INT 10
29584: PUSH
29585: LD_INT 6
29587: PUSH
29588: LD_INT 7
29590: PUSH
29591: LD_INT 11
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 27
29605: PUSH
29606: LD_INT 28
29608: PUSH
29609: LD_INT 26
29611: PUSH
29612: LD_INT 30
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 43
29623: PUSH
29624: LD_INT 44
29626: PUSH
29627: LD_INT 46
29629: PUSH
29630: LD_INT 45
29632: PUSH
29633: LD_INT 47
29635: PUSH
29636: LD_INT 49
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: LIST
29651: PUSH
29652: LD_VAR 0 12
29656: ARRAY
29657: ST_TO_ADDR
// for i in list do
29658: LD_ADDR_VAR 0 8
29662: PUSH
29663: LD_VAR 0 5
29667: PUSH
29668: FOR_IN
29669: IFFALSE 29702
// if not i in fac_list then
29671: LD_VAR 0 8
29675: PUSH
29676: LD_VAR 0 17
29680: IN
29681: NOT
29682: IFFALSE 29700
// list := list diff i ;
29684: LD_ADDR_VAR 0 5
29688: PUSH
29689: LD_VAR 0 5
29693: PUSH
29694: LD_VAR 0 8
29698: DIFF
29699: ST_TO_ADDR
29700: GO 29668
29702: POP
29703: POP
// if not list then
29704: LD_VAR 0 5
29708: NOT
29709: IFFALSE 29713
// exit ;
29711: GO 30517
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
29713: LD_VAR 0 12
29717: PUSH
29718: LD_INT 3
29720: EQUAL
29721: PUSH
29722: LD_INT 49
29724: PUSH
29725: LD_VAR 0 5
29729: IN
29730: AND
29731: PUSH
29732: LD_INT 31
29734: PPUSH
29735: LD_VAR 0 16
29739: PPUSH
29740: CALL_OW 321
29744: PUSH
29745: LD_INT 2
29747: EQUAL
29748: AND
29749: IFFALSE 29809
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
29751: LD_INT 22
29753: PUSH
29754: LD_VAR 0 16
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 35
29765: PUSH
29766: LD_INT 49
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 91
29775: PUSH
29776: LD_VAR 0 1
29780: PUSH
29781: LD_INT 10
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: LIST
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: LIST
29793: PPUSH
29794: CALL_OW 69
29798: NOT
29799: IFFALSE 29809
// weapon := ru_time_lapser ;
29801: LD_ADDR_VAR 0 18
29805: PUSH
29806: LD_INT 49
29808: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
29809: LD_VAR 0 12
29813: PUSH
29814: LD_INT 1
29816: PUSH
29817: LD_INT 2
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: IN
29824: PUSH
29825: LD_INT 11
29827: PUSH
29828: LD_VAR 0 5
29832: IN
29833: PUSH
29834: LD_INT 30
29836: PUSH
29837: LD_VAR 0 5
29841: IN
29842: OR
29843: AND
29844: PUSH
29845: LD_INT 6
29847: PPUSH
29848: LD_VAR 0 16
29852: PPUSH
29853: CALL_OW 321
29857: PUSH
29858: LD_INT 2
29860: EQUAL
29861: AND
29862: IFFALSE 30027
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
29864: LD_INT 22
29866: PUSH
29867: LD_VAR 0 16
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PUSH
29876: LD_INT 2
29878: PUSH
29879: LD_INT 35
29881: PUSH
29882: LD_INT 11
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 35
29891: PUSH
29892: LD_INT 30
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 91
29906: PUSH
29907: LD_VAR 0 1
29911: PUSH
29912: LD_INT 18
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: LIST
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: LIST
29924: PPUSH
29925: CALL_OW 69
29929: NOT
29930: PUSH
29931: LD_INT 22
29933: PUSH
29934: LD_VAR 0 16
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 2
29945: PUSH
29946: LD_INT 30
29948: PUSH
29949: LD_INT 32
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: LD_INT 30
29958: PUSH
29959: LD_INT 33
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 91
29973: PUSH
29974: LD_VAR 0 1
29978: PUSH
29979: LD_INT 12
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: LIST
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: LIST
29991: PUSH
29992: EMPTY
29993: LIST
29994: PPUSH
29995: CALL_OW 69
29999: PUSH
30000: LD_INT 2
30002: GREATER
30003: AND
30004: IFFALSE 30027
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30006: LD_ADDR_VAR 0 18
30010: PUSH
30011: LD_INT 11
30013: PUSH
30014: LD_INT 30
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_VAR 0 12
30025: ARRAY
30026: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30027: LD_VAR 0 18
30031: NOT
30032: PUSH
30033: LD_INT 40
30035: PPUSH
30036: LD_VAR 0 16
30040: PPUSH
30041: CALL_OW 321
30045: PUSH
30046: LD_INT 2
30048: EQUAL
30049: AND
30050: PUSH
30051: LD_INT 7
30053: PUSH
30054: LD_VAR 0 5
30058: IN
30059: PUSH
30060: LD_INT 28
30062: PUSH
30063: LD_VAR 0 5
30067: IN
30068: OR
30069: PUSH
30070: LD_INT 45
30072: PUSH
30073: LD_VAR 0 5
30077: IN
30078: OR
30079: AND
30080: IFFALSE 30334
// begin hex := GetHexInfo ( x , y ) ;
30082: LD_ADDR_VAR 0 4
30086: PUSH
30087: LD_VAR 0 10
30091: PPUSH
30092: LD_VAR 0 11
30096: PPUSH
30097: CALL_OW 546
30101: ST_TO_ADDR
// if hex [ 1 ] then
30102: LD_VAR 0 4
30106: PUSH
30107: LD_INT 1
30109: ARRAY
30110: IFFALSE 30114
// exit ;
30112: GO 30517
// height := hex [ 2 ] ;
30114: LD_ADDR_VAR 0 15
30118: PUSH
30119: LD_VAR 0 4
30123: PUSH
30124: LD_INT 2
30126: ARRAY
30127: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30128: LD_ADDR_VAR 0 14
30132: PUSH
30133: LD_INT 0
30135: PUSH
30136: LD_INT 2
30138: PUSH
30139: LD_INT 3
30141: PUSH
30142: LD_INT 5
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: ST_TO_ADDR
// for i in tmp do
30151: LD_ADDR_VAR 0 8
30155: PUSH
30156: LD_VAR 0 14
30160: PUSH
30161: FOR_IN
30162: IFFALSE 30332
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30164: LD_ADDR_VAR 0 9
30168: PUSH
30169: LD_VAR 0 10
30173: PPUSH
30174: LD_VAR 0 8
30178: PPUSH
30179: LD_INT 5
30181: PPUSH
30182: CALL_OW 272
30186: PUSH
30187: LD_VAR 0 11
30191: PPUSH
30192: LD_VAR 0 8
30196: PPUSH
30197: LD_INT 5
30199: PPUSH
30200: CALL_OW 273
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30209: LD_VAR 0 9
30213: PUSH
30214: LD_INT 1
30216: ARRAY
30217: PPUSH
30218: LD_VAR 0 9
30222: PUSH
30223: LD_INT 2
30225: ARRAY
30226: PPUSH
30227: CALL_OW 488
30231: IFFALSE 30330
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30233: LD_ADDR_VAR 0 4
30237: PUSH
30238: LD_VAR 0 9
30242: PUSH
30243: LD_INT 1
30245: ARRAY
30246: PPUSH
30247: LD_VAR 0 9
30251: PUSH
30252: LD_INT 2
30254: ARRAY
30255: PPUSH
30256: CALL_OW 546
30260: ST_TO_ADDR
// if hex [ 1 ] then
30261: LD_VAR 0 4
30265: PUSH
30266: LD_INT 1
30268: ARRAY
30269: IFFALSE 30273
// continue ;
30271: GO 30161
// h := hex [ 2 ] ;
30273: LD_ADDR_VAR 0 13
30277: PUSH
30278: LD_VAR 0 4
30282: PUSH
30283: LD_INT 2
30285: ARRAY
30286: ST_TO_ADDR
// if h + 7 < height then
30287: LD_VAR 0 13
30291: PUSH
30292: LD_INT 7
30294: PLUS
30295: PUSH
30296: LD_VAR 0 15
30300: LESS
30301: IFFALSE 30330
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30303: LD_ADDR_VAR 0 18
30307: PUSH
30308: LD_INT 7
30310: PUSH
30311: LD_INT 28
30313: PUSH
30314: LD_INT 45
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: LIST
30321: PUSH
30322: LD_VAR 0 12
30326: ARRAY
30327: ST_TO_ADDR
// break ;
30328: GO 30332
// end ; end ; end ;
30330: GO 30161
30332: POP
30333: POP
// end ; if not weapon then
30334: LD_VAR 0 18
30338: NOT
30339: IFFALSE 30399
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30341: LD_ADDR_VAR 0 5
30345: PUSH
30346: LD_VAR 0 5
30350: PUSH
30351: LD_INT 11
30353: PUSH
30354: LD_INT 30
30356: PUSH
30357: LD_INT 49
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: LIST
30364: DIFF
30365: ST_TO_ADDR
// if not list then
30366: LD_VAR 0 5
30370: NOT
30371: IFFALSE 30375
// exit ;
30373: GO 30517
// weapon := list [ rand ( 1 , list ) ] ;
30375: LD_ADDR_VAR 0 18
30379: PUSH
30380: LD_VAR 0 5
30384: PUSH
30385: LD_INT 1
30387: PPUSH
30388: LD_VAR 0 5
30392: PPUSH
30393: CALL_OW 12
30397: ARRAY
30398: ST_TO_ADDR
// end ; if weapon then
30399: LD_VAR 0 18
30403: IFFALSE 30517
// begin tmp := CostOfWeapon ( weapon ) ;
30405: LD_ADDR_VAR 0 14
30409: PUSH
30410: LD_VAR 0 18
30414: PPUSH
30415: CALL_OW 451
30419: ST_TO_ADDR
// j := GetBase ( tower ) ;
30420: LD_ADDR_VAR 0 9
30424: PUSH
30425: LD_VAR 0 1
30429: PPUSH
30430: CALL_OW 274
30434: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30435: LD_VAR 0 9
30439: PPUSH
30440: LD_INT 1
30442: PPUSH
30443: CALL_OW 275
30447: PUSH
30448: LD_VAR 0 14
30452: PUSH
30453: LD_INT 1
30455: ARRAY
30456: GREATEREQUAL
30457: PUSH
30458: LD_VAR 0 9
30462: PPUSH
30463: LD_INT 2
30465: PPUSH
30466: CALL_OW 275
30470: PUSH
30471: LD_VAR 0 14
30475: PUSH
30476: LD_INT 2
30478: ARRAY
30479: GREATEREQUAL
30480: AND
30481: PUSH
30482: LD_VAR 0 9
30486: PPUSH
30487: LD_INT 3
30489: PPUSH
30490: CALL_OW 275
30494: PUSH
30495: LD_VAR 0 14
30499: PUSH
30500: LD_INT 3
30502: ARRAY
30503: GREATEREQUAL
30504: AND
30505: IFFALSE 30517
// result := weapon ;
30507: LD_ADDR_VAR 0 3
30511: PUSH
30512: LD_VAR 0 18
30516: ST_TO_ADDR
// end ; end ;
30517: LD_VAR 0 3
30521: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
30522: LD_INT 0
30524: PPUSH
30525: PPUSH
// result := true ;
30526: LD_ADDR_VAR 0 3
30530: PUSH
30531: LD_INT 1
30533: ST_TO_ADDR
// if array1 = array2 then
30534: LD_VAR 0 1
30538: PUSH
30539: LD_VAR 0 2
30543: EQUAL
30544: IFFALSE 30604
// begin for i = 1 to array1 do
30546: LD_ADDR_VAR 0 4
30550: PUSH
30551: DOUBLE
30552: LD_INT 1
30554: DEC
30555: ST_TO_ADDR
30556: LD_VAR 0 1
30560: PUSH
30561: FOR_TO
30562: IFFALSE 30600
// if array1 [ i ] <> array2 [ i ] then
30564: LD_VAR 0 1
30568: PUSH
30569: LD_VAR 0 4
30573: ARRAY
30574: PUSH
30575: LD_VAR 0 2
30579: PUSH
30580: LD_VAR 0 4
30584: ARRAY
30585: NONEQUAL
30586: IFFALSE 30598
// begin result := false ;
30588: LD_ADDR_VAR 0 3
30592: PUSH
30593: LD_INT 0
30595: ST_TO_ADDR
// break ;
30596: GO 30600
// end ;
30598: GO 30561
30600: POP
30601: POP
// end else
30602: GO 30612
// result := false ;
30604: LD_ADDR_VAR 0 3
30608: PUSH
30609: LD_INT 0
30611: ST_TO_ADDR
// end ;
30612: LD_VAR 0 3
30616: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
30617: LD_INT 0
30619: PPUSH
30620: PPUSH
// if not array1 or not array2 then
30621: LD_VAR 0 1
30625: NOT
30626: PUSH
30627: LD_VAR 0 2
30631: NOT
30632: OR
30633: IFFALSE 30637
// exit ;
30635: GO 30701
// result := true ;
30637: LD_ADDR_VAR 0 3
30641: PUSH
30642: LD_INT 1
30644: ST_TO_ADDR
// for i = 1 to array1 do
30645: LD_ADDR_VAR 0 4
30649: PUSH
30650: DOUBLE
30651: LD_INT 1
30653: DEC
30654: ST_TO_ADDR
30655: LD_VAR 0 1
30659: PUSH
30660: FOR_TO
30661: IFFALSE 30699
// if array1 [ i ] <> array2 [ i ] then
30663: LD_VAR 0 1
30667: PUSH
30668: LD_VAR 0 4
30672: ARRAY
30673: PUSH
30674: LD_VAR 0 2
30678: PUSH
30679: LD_VAR 0 4
30683: ARRAY
30684: NONEQUAL
30685: IFFALSE 30697
// begin result := false ;
30687: LD_ADDR_VAR 0 3
30691: PUSH
30692: LD_INT 0
30694: ST_TO_ADDR
// break ;
30695: GO 30699
// end ;
30697: GO 30660
30699: POP
30700: POP
// end ;
30701: LD_VAR 0 3
30705: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
30706: LD_INT 0
30708: PPUSH
30709: PPUSH
30710: PPUSH
// pom := GetBase ( fac ) ;
30711: LD_ADDR_VAR 0 5
30715: PUSH
30716: LD_VAR 0 1
30720: PPUSH
30721: CALL_OW 274
30725: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
30726: LD_ADDR_VAR 0 4
30730: PUSH
30731: LD_VAR 0 2
30735: PUSH
30736: LD_INT 1
30738: ARRAY
30739: PPUSH
30740: LD_VAR 0 2
30744: PUSH
30745: LD_INT 2
30747: ARRAY
30748: PPUSH
30749: LD_VAR 0 2
30753: PUSH
30754: LD_INT 3
30756: ARRAY
30757: PPUSH
30758: LD_VAR 0 2
30762: PUSH
30763: LD_INT 4
30765: ARRAY
30766: PPUSH
30767: CALL_OW 449
30771: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30772: LD_ADDR_VAR 0 3
30776: PUSH
30777: LD_VAR 0 5
30781: PPUSH
30782: LD_INT 1
30784: PPUSH
30785: CALL_OW 275
30789: PUSH
30790: LD_VAR 0 4
30794: PUSH
30795: LD_INT 1
30797: ARRAY
30798: GREATEREQUAL
30799: PUSH
30800: LD_VAR 0 5
30804: PPUSH
30805: LD_INT 2
30807: PPUSH
30808: CALL_OW 275
30812: PUSH
30813: LD_VAR 0 4
30817: PUSH
30818: LD_INT 2
30820: ARRAY
30821: GREATEREQUAL
30822: AND
30823: PUSH
30824: LD_VAR 0 5
30828: PPUSH
30829: LD_INT 3
30831: PPUSH
30832: CALL_OW 275
30836: PUSH
30837: LD_VAR 0 4
30841: PUSH
30842: LD_INT 3
30844: ARRAY
30845: GREATEREQUAL
30846: AND
30847: ST_TO_ADDR
// end ;
30848: LD_VAR 0 3
30852: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
30853: LD_INT 0
30855: PPUSH
30856: PPUSH
30857: PPUSH
30858: PPUSH
// pom := GetBase ( building ) ;
30859: LD_ADDR_VAR 0 3
30863: PUSH
30864: LD_VAR 0 1
30868: PPUSH
30869: CALL_OW 274
30873: ST_TO_ADDR
// if not pom then
30874: LD_VAR 0 3
30878: NOT
30879: IFFALSE 30883
// exit ;
30881: GO 31053
// btype := GetBType ( building ) ;
30883: LD_ADDR_VAR 0 5
30887: PUSH
30888: LD_VAR 0 1
30892: PPUSH
30893: CALL_OW 266
30897: ST_TO_ADDR
// if btype = b_armoury then
30898: LD_VAR 0 5
30902: PUSH
30903: LD_INT 4
30905: EQUAL
30906: IFFALSE 30916
// btype := b_barracks ;
30908: LD_ADDR_VAR 0 5
30912: PUSH
30913: LD_INT 5
30915: ST_TO_ADDR
// if btype = b_depot then
30916: LD_VAR 0 5
30920: PUSH
30921: LD_INT 0
30923: EQUAL
30924: IFFALSE 30934
// btype := b_warehouse ;
30926: LD_ADDR_VAR 0 5
30930: PUSH
30931: LD_INT 1
30933: ST_TO_ADDR
// if btype = b_workshop then
30934: LD_VAR 0 5
30938: PUSH
30939: LD_INT 2
30941: EQUAL
30942: IFFALSE 30952
// btype := b_factory ;
30944: LD_ADDR_VAR 0 5
30948: PUSH
30949: LD_INT 3
30951: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
30952: LD_ADDR_VAR 0 4
30956: PUSH
30957: LD_VAR 0 5
30961: PPUSH
30962: LD_VAR 0 1
30966: PPUSH
30967: CALL_OW 248
30971: PPUSH
30972: CALL_OW 450
30976: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
30977: LD_ADDR_VAR 0 2
30981: PUSH
30982: LD_VAR 0 3
30986: PPUSH
30987: LD_INT 1
30989: PPUSH
30990: CALL_OW 275
30994: PUSH
30995: LD_VAR 0 4
30999: PUSH
31000: LD_INT 1
31002: ARRAY
31003: GREATEREQUAL
31004: PUSH
31005: LD_VAR 0 3
31009: PPUSH
31010: LD_INT 2
31012: PPUSH
31013: CALL_OW 275
31017: PUSH
31018: LD_VAR 0 4
31022: PUSH
31023: LD_INT 2
31025: ARRAY
31026: GREATEREQUAL
31027: AND
31028: PUSH
31029: LD_VAR 0 3
31033: PPUSH
31034: LD_INT 3
31036: PPUSH
31037: CALL_OW 275
31041: PUSH
31042: LD_VAR 0 4
31046: PUSH
31047: LD_INT 3
31049: ARRAY
31050: GREATEREQUAL
31051: AND
31052: ST_TO_ADDR
// end ;
31053: LD_VAR 0 2
31057: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31058: LD_INT 0
31060: PPUSH
31061: PPUSH
31062: PPUSH
// pom := GetBase ( building ) ;
31063: LD_ADDR_VAR 0 4
31067: PUSH
31068: LD_VAR 0 1
31072: PPUSH
31073: CALL_OW 274
31077: ST_TO_ADDR
// if not pom then
31078: LD_VAR 0 4
31082: NOT
31083: IFFALSE 31087
// exit ;
31085: GO 31188
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31087: LD_ADDR_VAR 0 5
31091: PUSH
31092: LD_VAR 0 2
31096: PPUSH
31097: LD_VAR 0 1
31101: PPUSH
31102: CALL_OW 248
31106: PPUSH
31107: CALL_OW 450
31111: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31112: LD_ADDR_VAR 0 3
31116: PUSH
31117: LD_VAR 0 4
31121: PPUSH
31122: LD_INT 1
31124: PPUSH
31125: CALL_OW 275
31129: PUSH
31130: LD_VAR 0 5
31134: PUSH
31135: LD_INT 1
31137: ARRAY
31138: GREATEREQUAL
31139: PUSH
31140: LD_VAR 0 4
31144: PPUSH
31145: LD_INT 2
31147: PPUSH
31148: CALL_OW 275
31152: PUSH
31153: LD_VAR 0 5
31157: PUSH
31158: LD_INT 2
31160: ARRAY
31161: GREATEREQUAL
31162: AND
31163: PUSH
31164: LD_VAR 0 4
31168: PPUSH
31169: LD_INT 3
31171: PPUSH
31172: CALL_OW 275
31176: PUSH
31177: LD_VAR 0 5
31181: PUSH
31182: LD_INT 3
31184: ARRAY
31185: GREATEREQUAL
31186: AND
31187: ST_TO_ADDR
// end ;
31188: LD_VAR 0 3
31192: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
31193: LD_INT 0
31195: PPUSH
31196: PPUSH
31197: PPUSH
31198: PPUSH
31199: PPUSH
31200: PPUSH
31201: PPUSH
31202: PPUSH
31203: PPUSH
31204: PPUSH
31205: PPUSH
// result := false ;
31206: LD_ADDR_VAR 0 8
31210: PUSH
31211: LD_INT 0
31213: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
31214: LD_VAR 0 5
31218: NOT
31219: PUSH
31220: LD_VAR 0 1
31224: NOT
31225: OR
31226: PUSH
31227: LD_VAR 0 2
31231: NOT
31232: OR
31233: PUSH
31234: LD_VAR 0 3
31238: NOT
31239: OR
31240: IFFALSE 31244
// exit ;
31242: GO 32058
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
31244: LD_ADDR_VAR 0 14
31248: PUSH
31249: LD_VAR 0 1
31253: PPUSH
31254: LD_VAR 0 2
31258: PPUSH
31259: LD_VAR 0 3
31263: PPUSH
31264: LD_VAR 0 4
31268: PPUSH
31269: LD_VAR 0 5
31273: PUSH
31274: LD_INT 1
31276: ARRAY
31277: PPUSH
31278: CALL_OW 248
31282: PPUSH
31283: LD_INT 0
31285: PPUSH
31286: CALL 32895 0 6
31290: ST_TO_ADDR
// if not hexes then
31291: LD_VAR 0 14
31295: NOT
31296: IFFALSE 31300
// exit ;
31298: GO 32058
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31300: LD_ADDR_VAR 0 17
31304: PUSH
31305: LD_VAR 0 5
31309: PPUSH
31310: LD_INT 22
31312: PUSH
31313: LD_VAR 0 13
31317: PPUSH
31318: CALL_OW 255
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 2
31329: PUSH
31330: LD_INT 30
31332: PUSH
31333: LD_INT 0
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 30
31342: PUSH
31343: LD_INT 1
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: LIST
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PPUSH
31359: CALL_OW 72
31363: ST_TO_ADDR
// for i = 1 to hexes do
31364: LD_ADDR_VAR 0 9
31368: PUSH
31369: DOUBLE
31370: LD_INT 1
31372: DEC
31373: ST_TO_ADDR
31374: LD_VAR 0 14
31378: PUSH
31379: FOR_TO
31380: IFFALSE 32056
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31382: LD_ADDR_VAR 0 13
31386: PUSH
31387: LD_VAR 0 14
31391: PUSH
31392: LD_VAR 0 9
31396: ARRAY
31397: PUSH
31398: LD_INT 1
31400: ARRAY
31401: PPUSH
31402: LD_VAR 0 14
31406: PUSH
31407: LD_VAR 0 9
31411: ARRAY
31412: PUSH
31413: LD_INT 2
31415: ARRAY
31416: PPUSH
31417: CALL_OW 428
31421: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31422: LD_VAR 0 14
31426: PUSH
31427: LD_VAR 0 9
31431: ARRAY
31432: PUSH
31433: LD_INT 1
31435: ARRAY
31436: PPUSH
31437: LD_VAR 0 14
31441: PUSH
31442: LD_VAR 0 9
31446: ARRAY
31447: PUSH
31448: LD_INT 2
31450: ARRAY
31451: PPUSH
31452: CALL_OW 351
31456: PUSH
31457: LD_VAR 0 14
31461: PUSH
31462: LD_VAR 0 9
31466: ARRAY
31467: PUSH
31468: LD_INT 1
31470: ARRAY
31471: PPUSH
31472: LD_VAR 0 14
31476: PUSH
31477: LD_VAR 0 9
31481: ARRAY
31482: PUSH
31483: LD_INT 2
31485: ARRAY
31486: PPUSH
31487: CALL_OW 488
31491: NOT
31492: OR
31493: PUSH
31494: LD_VAR 0 13
31498: PPUSH
31499: CALL_OW 247
31503: PUSH
31504: LD_INT 3
31506: EQUAL
31507: OR
31508: IFFALSE 31514
// exit ;
31510: POP
31511: POP
31512: GO 32058
// if not tmp then
31514: LD_VAR 0 13
31518: NOT
31519: IFFALSE 31523
// continue ;
31521: GO 31379
// result := true ;
31523: LD_ADDR_VAR 0 8
31527: PUSH
31528: LD_INT 1
31530: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
31531: LD_VAR 0 6
31535: PUSH
31536: LD_VAR 0 13
31540: PPUSH
31541: CALL_OW 247
31545: PUSH
31546: LD_INT 2
31548: EQUAL
31549: AND
31550: PUSH
31551: LD_VAR 0 13
31555: PPUSH
31556: CALL_OW 263
31560: PUSH
31561: LD_INT 1
31563: EQUAL
31564: AND
31565: IFFALSE 31729
// begin if IsDrivenBy ( tmp ) then
31567: LD_VAR 0 13
31571: PPUSH
31572: CALL_OW 311
31576: IFFALSE 31580
// continue ;
31578: GO 31379
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
31580: LD_VAR 0 6
31584: PPUSH
31585: LD_INT 3
31587: PUSH
31588: LD_INT 60
31590: PUSH
31591: EMPTY
31592: LIST
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 3
31600: PUSH
31601: LD_INT 55
31603: PUSH
31604: EMPTY
31605: LIST
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PPUSH
31615: CALL_OW 72
31619: IFFALSE 31727
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
31621: LD_ADDR_VAR 0 18
31625: PUSH
31626: LD_VAR 0 6
31630: PPUSH
31631: LD_INT 3
31633: PUSH
31634: LD_INT 60
31636: PUSH
31637: EMPTY
31638: LIST
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 3
31646: PUSH
31647: LD_INT 55
31649: PUSH
31650: EMPTY
31651: LIST
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PPUSH
31661: CALL_OW 72
31665: PUSH
31666: LD_INT 1
31668: ARRAY
31669: ST_TO_ADDR
// if IsInUnit ( driver ) then
31670: LD_VAR 0 18
31674: PPUSH
31675: CALL_OW 310
31679: IFFALSE 31690
// ComExit ( driver ) ;
31681: LD_VAR 0 18
31685: PPUSH
31686: CALL 56079 0 1
// AddComEnterUnit ( driver , tmp ) ;
31690: LD_VAR 0 18
31694: PPUSH
31695: LD_VAR 0 13
31699: PPUSH
31700: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
31704: LD_VAR 0 18
31708: PPUSH
31709: LD_VAR 0 7
31713: PPUSH
31714: CALL_OW 173
// AddComExitVehicle ( driver ) ;
31718: LD_VAR 0 18
31722: PPUSH
31723: CALL_OW 181
// end ; continue ;
31727: GO 31379
// end ; if not cleaners or not tmp in cleaners then
31729: LD_VAR 0 6
31733: NOT
31734: PUSH
31735: LD_VAR 0 13
31739: PUSH
31740: LD_VAR 0 6
31744: IN
31745: NOT
31746: OR
31747: IFFALSE 32054
// begin if dep then
31749: LD_VAR 0 17
31753: IFFALSE 31889
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
31755: LD_ADDR_VAR 0 16
31759: PUSH
31760: LD_VAR 0 17
31764: PUSH
31765: LD_INT 1
31767: ARRAY
31768: PPUSH
31769: CALL_OW 250
31773: PPUSH
31774: LD_VAR 0 17
31778: PUSH
31779: LD_INT 1
31781: ARRAY
31782: PPUSH
31783: CALL_OW 254
31787: PPUSH
31788: LD_INT 5
31790: PPUSH
31791: CALL_OW 272
31795: PUSH
31796: LD_VAR 0 17
31800: PUSH
31801: LD_INT 1
31803: ARRAY
31804: PPUSH
31805: CALL_OW 251
31809: PPUSH
31810: LD_VAR 0 17
31814: PUSH
31815: LD_INT 1
31817: ARRAY
31818: PPUSH
31819: CALL_OW 254
31823: PPUSH
31824: LD_INT 5
31826: PPUSH
31827: CALL_OW 273
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
31836: LD_VAR 0 16
31840: PUSH
31841: LD_INT 1
31843: ARRAY
31844: PPUSH
31845: LD_VAR 0 16
31849: PUSH
31850: LD_INT 2
31852: ARRAY
31853: PPUSH
31854: CALL_OW 488
31858: IFFALSE 31889
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
31860: LD_VAR 0 13
31864: PPUSH
31865: LD_VAR 0 16
31869: PUSH
31870: LD_INT 1
31872: ARRAY
31873: PPUSH
31874: LD_VAR 0 16
31878: PUSH
31879: LD_INT 2
31881: ARRAY
31882: PPUSH
31883: CALL_OW 111
// continue ;
31887: GO 31379
// end ; end ; r := GetDir ( tmp ) ;
31889: LD_ADDR_VAR 0 15
31893: PUSH
31894: LD_VAR 0 13
31898: PPUSH
31899: CALL_OW 254
31903: ST_TO_ADDR
// if r = 5 then
31904: LD_VAR 0 15
31908: PUSH
31909: LD_INT 5
31911: EQUAL
31912: IFFALSE 31922
// r := 0 ;
31914: LD_ADDR_VAR 0 15
31918: PUSH
31919: LD_INT 0
31921: ST_TO_ADDR
// for j = r to 5 do
31922: LD_ADDR_VAR 0 10
31926: PUSH
31927: DOUBLE
31928: LD_VAR 0 15
31932: DEC
31933: ST_TO_ADDR
31934: LD_INT 5
31936: PUSH
31937: FOR_TO
31938: IFFALSE 32052
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
31940: LD_ADDR_VAR 0 11
31944: PUSH
31945: LD_VAR 0 13
31949: PPUSH
31950: CALL_OW 250
31954: PPUSH
31955: LD_VAR 0 10
31959: PPUSH
31960: LD_INT 2
31962: PPUSH
31963: CALL_OW 272
31967: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
31968: LD_ADDR_VAR 0 12
31972: PUSH
31973: LD_VAR 0 13
31977: PPUSH
31978: CALL_OW 251
31982: PPUSH
31983: LD_VAR 0 10
31987: PPUSH
31988: LD_INT 2
31990: PPUSH
31991: CALL_OW 273
31995: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
31996: LD_VAR 0 11
32000: PPUSH
32001: LD_VAR 0 12
32005: PPUSH
32006: CALL_OW 488
32010: PUSH
32011: LD_VAR 0 11
32015: PPUSH
32016: LD_VAR 0 12
32020: PPUSH
32021: CALL_OW 428
32025: NOT
32026: AND
32027: IFFALSE 32050
// begin ComMoveXY ( tmp , _x , _y ) ;
32029: LD_VAR 0 13
32033: PPUSH
32034: LD_VAR 0 11
32038: PPUSH
32039: LD_VAR 0 12
32043: PPUSH
32044: CALL_OW 111
// break ;
32048: GO 32052
// end ; end ;
32050: GO 31937
32052: POP
32053: POP
// end ; end ;
32054: GO 31379
32056: POP
32057: POP
// end ;
32058: LD_VAR 0 8
32062: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
32063: LD_INT 0
32065: PPUSH
32066: PPUSH
32067: PPUSH
32068: PPUSH
32069: PPUSH
32070: PPUSH
32071: PPUSH
32072: PPUSH
32073: PPUSH
32074: PPUSH
// result := false ;
32075: LD_ADDR_VAR 0 6
32079: PUSH
32080: LD_INT 0
32082: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
32083: LD_VAR 0 1
32087: NOT
32088: PUSH
32089: LD_VAR 0 1
32093: PPUSH
32094: CALL_OW 266
32098: PUSH
32099: LD_INT 0
32101: PUSH
32102: LD_INT 1
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: IN
32109: NOT
32110: OR
32111: PUSH
32112: LD_VAR 0 2
32116: NOT
32117: OR
32118: PUSH
32119: LD_VAR 0 5
32123: PUSH
32124: LD_INT 0
32126: PUSH
32127: LD_INT 1
32129: PUSH
32130: LD_INT 2
32132: PUSH
32133: LD_INT 3
32135: PUSH
32136: LD_INT 4
32138: PUSH
32139: LD_INT 5
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: IN
32150: NOT
32151: OR
32152: PUSH
32153: LD_VAR 0 3
32157: PPUSH
32158: LD_VAR 0 4
32162: PPUSH
32163: CALL_OW 488
32167: NOT
32168: OR
32169: IFFALSE 32173
// exit ;
32171: GO 32890
// pom := GetBase ( depot ) ;
32173: LD_ADDR_VAR 0 10
32177: PUSH
32178: LD_VAR 0 1
32182: PPUSH
32183: CALL_OW 274
32187: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
32188: LD_ADDR_VAR 0 11
32192: PUSH
32193: LD_VAR 0 2
32197: PPUSH
32198: LD_VAR 0 1
32202: PPUSH
32203: CALL_OW 248
32207: PPUSH
32208: CALL_OW 450
32212: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
32213: LD_VAR 0 10
32217: PPUSH
32218: LD_INT 1
32220: PPUSH
32221: CALL_OW 275
32225: PUSH
32226: LD_VAR 0 11
32230: PUSH
32231: LD_INT 1
32233: ARRAY
32234: GREATEREQUAL
32235: PUSH
32236: LD_VAR 0 10
32240: PPUSH
32241: LD_INT 2
32243: PPUSH
32244: CALL_OW 275
32248: PUSH
32249: LD_VAR 0 11
32253: PUSH
32254: LD_INT 2
32256: ARRAY
32257: GREATEREQUAL
32258: AND
32259: PUSH
32260: LD_VAR 0 10
32264: PPUSH
32265: LD_INT 3
32267: PPUSH
32268: CALL_OW 275
32272: PUSH
32273: LD_VAR 0 11
32277: PUSH
32278: LD_INT 3
32280: ARRAY
32281: GREATEREQUAL
32282: AND
32283: NOT
32284: IFFALSE 32288
// exit ;
32286: GO 32890
// if GetBType ( depot ) = b_depot then
32288: LD_VAR 0 1
32292: PPUSH
32293: CALL_OW 266
32297: PUSH
32298: LD_INT 0
32300: EQUAL
32301: IFFALSE 32313
// dist := 28 else
32303: LD_ADDR_VAR 0 14
32307: PUSH
32308: LD_INT 28
32310: ST_TO_ADDR
32311: GO 32321
// dist := 36 ;
32313: LD_ADDR_VAR 0 14
32317: PUSH
32318: LD_INT 36
32320: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
32321: LD_VAR 0 1
32325: PPUSH
32326: LD_VAR 0 3
32330: PPUSH
32331: LD_VAR 0 4
32335: PPUSH
32336: CALL_OW 297
32340: PUSH
32341: LD_VAR 0 14
32345: GREATER
32346: IFFALSE 32350
// exit ;
32348: GO 32890
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
32350: LD_ADDR_VAR 0 12
32354: PUSH
32355: LD_VAR 0 2
32359: PPUSH
32360: LD_VAR 0 3
32364: PPUSH
32365: LD_VAR 0 4
32369: PPUSH
32370: LD_VAR 0 5
32374: PPUSH
32375: LD_VAR 0 1
32379: PPUSH
32380: CALL_OW 248
32384: PPUSH
32385: LD_INT 0
32387: PPUSH
32388: CALL 32895 0 6
32392: ST_TO_ADDR
// if not hexes then
32393: LD_VAR 0 12
32397: NOT
32398: IFFALSE 32402
// exit ;
32400: GO 32890
// hex := GetHexInfo ( x , y ) ;
32402: LD_ADDR_VAR 0 15
32406: PUSH
32407: LD_VAR 0 3
32411: PPUSH
32412: LD_VAR 0 4
32416: PPUSH
32417: CALL_OW 546
32421: ST_TO_ADDR
// if hex [ 1 ] then
32422: LD_VAR 0 15
32426: PUSH
32427: LD_INT 1
32429: ARRAY
32430: IFFALSE 32434
// exit ;
32432: GO 32890
// height := hex [ 2 ] ;
32434: LD_ADDR_VAR 0 13
32438: PUSH
32439: LD_VAR 0 15
32443: PUSH
32444: LD_INT 2
32446: ARRAY
32447: ST_TO_ADDR
// for i = 1 to hexes do
32448: LD_ADDR_VAR 0 7
32452: PUSH
32453: DOUBLE
32454: LD_INT 1
32456: DEC
32457: ST_TO_ADDR
32458: LD_VAR 0 12
32462: PUSH
32463: FOR_TO
32464: IFFALSE 32794
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
32466: LD_VAR 0 12
32470: PUSH
32471: LD_VAR 0 7
32475: ARRAY
32476: PUSH
32477: LD_INT 1
32479: ARRAY
32480: PPUSH
32481: LD_VAR 0 12
32485: PUSH
32486: LD_VAR 0 7
32490: ARRAY
32491: PUSH
32492: LD_INT 2
32494: ARRAY
32495: PPUSH
32496: CALL_OW 488
32500: NOT
32501: PUSH
32502: LD_VAR 0 12
32506: PUSH
32507: LD_VAR 0 7
32511: ARRAY
32512: PUSH
32513: LD_INT 1
32515: ARRAY
32516: PPUSH
32517: LD_VAR 0 12
32521: PUSH
32522: LD_VAR 0 7
32526: ARRAY
32527: PUSH
32528: LD_INT 2
32530: ARRAY
32531: PPUSH
32532: CALL_OW 428
32536: PUSH
32537: LD_INT 0
32539: GREATER
32540: OR
32541: PUSH
32542: LD_VAR 0 12
32546: PUSH
32547: LD_VAR 0 7
32551: ARRAY
32552: PUSH
32553: LD_INT 1
32555: ARRAY
32556: PPUSH
32557: LD_VAR 0 12
32561: PUSH
32562: LD_VAR 0 7
32566: ARRAY
32567: PUSH
32568: LD_INT 2
32570: ARRAY
32571: PPUSH
32572: CALL_OW 351
32576: OR
32577: IFFALSE 32583
// exit ;
32579: POP
32580: POP
32581: GO 32890
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32583: LD_ADDR_VAR 0 8
32587: PUSH
32588: LD_VAR 0 12
32592: PUSH
32593: LD_VAR 0 7
32597: ARRAY
32598: PUSH
32599: LD_INT 1
32601: ARRAY
32602: PPUSH
32603: LD_VAR 0 12
32607: PUSH
32608: LD_VAR 0 7
32612: ARRAY
32613: PUSH
32614: LD_INT 2
32616: ARRAY
32617: PPUSH
32618: CALL_OW 546
32622: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
32623: LD_VAR 0 8
32627: PUSH
32628: LD_INT 1
32630: ARRAY
32631: PUSH
32632: LD_VAR 0 8
32636: PUSH
32637: LD_INT 2
32639: ARRAY
32640: PUSH
32641: LD_VAR 0 13
32645: PUSH
32646: LD_INT 2
32648: PLUS
32649: GREATER
32650: OR
32651: PUSH
32652: LD_VAR 0 8
32656: PUSH
32657: LD_INT 2
32659: ARRAY
32660: PUSH
32661: LD_VAR 0 13
32665: PUSH
32666: LD_INT 2
32668: MINUS
32669: LESS
32670: OR
32671: PUSH
32672: LD_VAR 0 8
32676: PUSH
32677: LD_INT 3
32679: ARRAY
32680: PUSH
32681: LD_INT 0
32683: PUSH
32684: LD_INT 8
32686: PUSH
32687: LD_INT 9
32689: PUSH
32690: LD_INT 10
32692: PUSH
32693: LD_INT 11
32695: PUSH
32696: LD_INT 12
32698: PUSH
32699: LD_INT 13
32701: PUSH
32702: LD_INT 16
32704: PUSH
32705: LD_INT 17
32707: PUSH
32708: LD_INT 18
32710: PUSH
32711: LD_INT 19
32713: PUSH
32714: LD_INT 20
32716: PUSH
32717: LD_INT 21
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: IN
32735: NOT
32736: OR
32737: PUSH
32738: LD_VAR 0 8
32742: PUSH
32743: LD_INT 5
32745: ARRAY
32746: NOT
32747: OR
32748: PUSH
32749: LD_VAR 0 8
32753: PUSH
32754: LD_INT 6
32756: ARRAY
32757: PUSH
32758: LD_INT 1
32760: PUSH
32761: LD_INT 2
32763: PUSH
32764: LD_INT 7
32766: PUSH
32767: LD_INT 9
32769: PUSH
32770: LD_INT 10
32772: PUSH
32773: LD_INT 11
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: IN
32784: NOT
32785: OR
32786: IFFALSE 32792
// exit ;
32788: POP
32789: POP
32790: GO 32890
// end ;
32792: GO 32463
32794: POP
32795: POP
// side := GetSide ( depot ) ;
32796: LD_ADDR_VAR 0 9
32800: PUSH
32801: LD_VAR 0 1
32805: PPUSH
32806: CALL_OW 255
32810: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
32811: LD_VAR 0 9
32815: PPUSH
32816: LD_VAR 0 3
32820: PPUSH
32821: LD_VAR 0 4
32825: PPUSH
32826: LD_INT 20
32828: PPUSH
32829: CALL 25211 0 4
32833: PUSH
32834: LD_INT 4
32836: ARRAY
32837: IFFALSE 32841
// exit ;
32839: GO 32890
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
32841: LD_VAR 0 2
32845: PUSH
32846: LD_INT 29
32848: PUSH
32849: LD_INT 30
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: IN
32856: PUSH
32857: LD_VAR 0 3
32861: PPUSH
32862: LD_VAR 0 4
32866: PPUSH
32867: LD_VAR 0 9
32871: PPUSH
32872: CALL_OW 440
32876: NOT
32877: AND
32878: IFFALSE 32882
// exit ;
32880: GO 32890
// result := true ;
32882: LD_ADDR_VAR 0 6
32886: PUSH
32887: LD_INT 1
32889: ST_TO_ADDR
// end ;
32890: LD_VAR 0 6
32894: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
32895: LD_INT 0
32897: PPUSH
32898: PPUSH
32899: PPUSH
32900: PPUSH
32901: PPUSH
32902: PPUSH
32903: PPUSH
32904: PPUSH
32905: PPUSH
32906: PPUSH
32907: PPUSH
32908: PPUSH
32909: PPUSH
32910: PPUSH
32911: PPUSH
32912: PPUSH
32913: PPUSH
32914: PPUSH
32915: PPUSH
32916: PPUSH
32917: PPUSH
32918: PPUSH
32919: PPUSH
32920: PPUSH
32921: PPUSH
32922: PPUSH
32923: PPUSH
32924: PPUSH
32925: PPUSH
32926: PPUSH
32927: PPUSH
32928: PPUSH
32929: PPUSH
32930: PPUSH
32931: PPUSH
32932: PPUSH
32933: PPUSH
32934: PPUSH
32935: PPUSH
32936: PPUSH
32937: PPUSH
32938: PPUSH
32939: PPUSH
32940: PPUSH
32941: PPUSH
32942: PPUSH
32943: PPUSH
32944: PPUSH
32945: PPUSH
32946: PPUSH
32947: PPUSH
32948: PPUSH
32949: PPUSH
32950: PPUSH
32951: PPUSH
32952: PPUSH
32953: PPUSH
32954: PPUSH
// result = [ ] ;
32955: LD_ADDR_VAR 0 7
32959: PUSH
32960: EMPTY
32961: ST_TO_ADDR
// temp_list = [ ] ;
32962: LD_ADDR_VAR 0 9
32966: PUSH
32967: EMPTY
32968: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
32969: LD_VAR 0 4
32973: PUSH
32974: LD_INT 0
32976: PUSH
32977: LD_INT 1
32979: PUSH
32980: LD_INT 2
32982: PUSH
32983: LD_INT 3
32985: PUSH
32986: LD_INT 4
32988: PUSH
32989: LD_INT 5
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: IN
33000: NOT
33001: PUSH
33002: LD_VAR 0 1
33006: PUSH
33007: LD_INT 0
33009: PUSH
33010: LD_INT 1
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: IN
33017: PUSH
33018: LD_VAR 0 5
33022: PUSH
33023: LD_INT 1
33025: PUSH
33026: LD_INT 2
33028: PUSH
33029: LD_INT 3
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: LIST
33036: IN
33037: NOT
33038: AND
33039: OR
33040: IFFALSE 33044
// exit ;
33042: GO 51435
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
33044: LD_VAR 0 1
33048: PUSH
33049: LD_INT 6
33051: PUSH
33052: LD_INT 7
33054: PUSH
33055: LD_INT 8
33057: PUSH
33058: LD_INT 13
33060: PUSH
33061: LD_INT 12
33063: PUSH
33064: LD_INT 15
33066: PUSH
33067: LD_INT 11
33069: PUSH
33070: LD_INT 14
33072: PUSH
33073: LD_INT 10
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: IN
33087: IFFALSE 33097
// btype = b_lab ;
33089: LD_ADDR_VAR 0 1
33093: PUSH
33094: LD_INT 6
33096: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
33097: LD_VAR 0 6
33101: PUSH
33102: LD_INT 0
33104: PUSH
33105: LD_INT 1
33107: PUSH
33108: LD_INT 2
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: LIST
33115: IN
33116: NOT
33117: PUSH
33118: LD_VAR 0 1
33122: PUSH
33123: LD_INT 0
33125: PUSH
33126: LD_INT 1
33128: PUSH
33129: LD_INT 2
33131: PUSH
33132: LD_INT 3
33134: PUSH
33135: LD_INT 6
33137: PUSH
33138: LD_INT 36
33140: PUSH
33141: LD_INT 4
33143: PUSH
33144: LD_INT 5
33146: PUSH
33147: LD_INT 31
33149: PUSH
33150: LD_INT 32
33152: PUSH
33153: LD_INT 33
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: IN
33169: NOT
33170: PUSH
33171: LD_VAR 0 6
33175: PUSH
33176: LD_INT 1
33178: EQUAL
33179: AND
33180: OR
33181: PUSH
33182: LD_VAR 0 1
33186: PUSH
33187: LD_INT 2
33189: PUSH
33190: LD_INT 3
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: IN
33197: NOT
33198: PUSH
33199: LD_VAR 0 6
33203: PUSH
33204: LD_INT 2
33206: EQUAL
33207: AND
33208: OR
33209: IFFALSE 33219
// mode = 0 ;
33211: LD_ADDR_VAR 0 6
33215: PUSH
33216: LD_INT 0
33218: ST_TO_ADDR
// case mode of 0 :
33219: LD_VAR 0 6
33223: PUSH
33224: LD_INT 0
33226: DOUBLE
33227: EQUAL
33228: IFTRUE 33232
33230: GO 44685
33232: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33233: LD_ADDR_VAR 0 11
33237: PUSH
33238: LD_INT 0
33240: PUSH
33241: LD_INT 0
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 0
33250: PUSH
33251: LD_INT 1
33253: NEG
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 1
33261: PUSH
33262: LD_INT 0
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 1
33271: PUSH
33272: LD_INT 1
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 0
33281: PUSH
33282: LD_INT 1
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 1
33291: NEG
33292: PUSH
33293: LD_INT 0
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 1
33302: NEG
33303: PUSH
33304: LD_INT 1
33306: NEG
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 1
33314: NEG
33315: PUSH
33316: LD_INT 2
33318: NEG
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 0
33326: PUSH
33327: LD_INT 2
33329: NEG
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 1
33337: PUSH
33338: LD_INT 1
33340: NEG
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 1
33348: PUSH
33349: LD_INT 2
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 0
33358: PUSH
33359: LD_INT 2
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 1
33368: NEG
33369: PUSH
33370: LD_INT 1
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 1
33379: PUSH
33380: LD_INT 3
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 0
33389: PUSH
33390: LD_INT 3
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 1
33399: NEG
33400: PUSH
33401: LD_INT 2
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33426: LD_ADDR_VAR 0 12
33430: PUSH
33431: LD_INT 0
33433: PUSH
33434: LD_INT 0
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 0
33443: PUSH
33444: LD_INT 1
33446: NEG
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 1
33454: PUSH
33455: LD_INT 0
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 1
33464: PUSH
33465: LD_INT 1
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 0
33474: PUSH
33475: LD_INT 1
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 1
33484: NEG
33485: PUSH
33486: LD_INT 0
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 1
33495: NEG
33496: PUSH
33497: LD_INT 1
33499: NEG
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 1
33507: PUSH
33508: LD_INT 1
33510: NEG
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 2
33518: PUSH
33519: LD_INT 0
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 2
33528: PUSH
33529: LD_INT 1
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 1
33538: NEG
33539: PUSH
33540: LD_INT 1
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 2
33549: NEG
33550: PUSH
33551: LD_INT 0
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 2
33560: NEG
33561: PUSH
33562: LD_INT 1
33564: NEG
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 2
33572: NEG
33573: PUSH
33574: LD_INT 1
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 3
33583: NEG
33584: PUSH
33585: LD_INT 0
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 3
33594: NEG
33595: PUSH
33596: LD_INT 1
33598: NEG
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33622: LD_ADDR_VAR 0 13
33626: PUSH
33627: LD_INT 0
33629: PUSH
33630: LD_INT 0
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 0
33639: PUSH
33640: LD_INT 1
33642: NEG
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 1
33650: PUSH
33651: LD_INT 0
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 1
33660: PUSH
33661: LD_INT 1
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 0
33670: PUSH
33671: LD_INT 1
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 1
33680: NEG
33681: PUSH
33682: LD_INT 0
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 1
33691: NEG
33692: PUSH
33693: LD_INT 1
33695: NEG
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 1
33703: NEG
33704: PUSH
33705: LD_INT 2
33707: NEG
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: PUSH
33713: LD_INT 2
33715: PUSH
33716: LD_INT 1
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 2
33725: PUSH
33726: LD_INT 2
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 1
33735: PUSH
33736: LD_INT 2
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 2
33745: NEG
33746: PUSH
33747: LD_INT 1
33749: NEG
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 2
33757: NEG
33758: PUSH
33759: LD_INT 2
33761: NEG
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 2
33769: NEG
33770: PUSH
33771: LD_INT 3
33773: NEG
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 3
33781: NEG
33782: PUSH
33783: LD_INT 2
33785: NEG
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 3
33793: NEG
33794: PUSH
33795: LD_INT 3
33797: NEG
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33821: LD_ADDR_VAR 0 14
33825: PUSH
33826: LD_INT 0
33828: PUSH
33829: LD_INT 0
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 0
33838: PUSH
33839: LD_INT 1
33841: NEG
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 1
33849: PUSH
33850: LD_INT 0
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 1
33859: PUSH
33860: LD_INT 1
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 0
33869: PUSH
33870: LD_INT 1
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 1
33879: NEG
33880: PUSH
33881: LD_INT 0
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 1
33890: NEG
33891: PUSH
33892: LD_INT 1
33894: NEG
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 1
33902: NEG
33903: PUSH
33904: LD_INT 2
33906: NEG
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: PUSH
33912: LD_INT 0
33914: PUSH
33915: LD_INT 2
33917: NEG
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 1
33925: PUSH
33926: LD_INT 1
33928: NEG
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 1
33936: PUSH
33937: LD_INT 2
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 0
33946: PUSH
33947: LD_INT 2
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 1
33956: NEG
33957: PUSH
33958: LD_INT 1
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 1
33967: NEG
33968: PUSH
33969: LD_INT 3
33971: NEG
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 0
33979: PUSH
33980: LD_INT 3
33982: NEG
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 1
33990: PUSH
33991: LD_INT 2
33993: NEG
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34017: LD_ADDR_VAR 0 15
34021: PUSH
34022: LD_INT 0
34024: PUSH
34025: LD_INT 0
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 0
34034: PUSH
34035: LD_INT 1
34037: NEG
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 1
34045: PUSH
34046: LD_INT 0
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 1
34055: PUSH
34056: LD_INT 1
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 0
34065: PUSH
34066: LD_INT 1
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 1
34075: NEG
34076: PUSH
34077: LD_INT 0
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 1
34086: NEG
34087: PUSH
34088: LD_INT 1
34090: NEG
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 1
34098: PUSH
34099: LD_INT 1
34101: NEG
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 2
34109: PUSH
34110: LD_INT 0
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 2
34119: PUSH
34120: LD_INT 1
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 1
34129: NEG
34130: PUSH
34131: LD_INT 1
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 2
34140: NEG
34141: PUSH
34142: LD_INT 0
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 2
34151: NEG
34152: PUSH
34153: LD_INT 1
34155: NEG
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 2
34163: PUSH
34164: LD_INT 1
34166: NEG
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 3
34174: PUSH
34175: LD_INT 0
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 3
34184: PUSH
34185: LD_INT 1
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34210: LD_ADDR_VAR 0 16
34214: PUSH
34215: LD_INT 0
34217: PUSH
34218: LD_INT 0
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 0
34227: PUSH
34228: LD_INT 1
34230: NEG
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 1
34238: PUSH
34239: LD_INT 0
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 1
34248: PUSH
34249: LD_INT 1
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 0
34258: PUSH
34259: LD_INT 1
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 1
34268: NEG
34269: PUSH
34270: LD_INT 0
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 1
34279: NEG
34280: PUSH
34281: LD_INT 1
34283: NEG
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 1
34291: NEG
34292: PUSH
34293: LD_INT 2
34295: NEG
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 2
34303: PUSH
34304: LD_INT 1
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 2
34313: PUSH
34314: LD_INT 2
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 1
34323: PUSH
34324: LD_INT 2
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 2
34333: NEG
34334: PUSH
34335: LD_INT 1
34337: NEG
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: LD_INT 2
34345: NEG
34346: PUSH
34347: LD_INT 2
34349: NEG
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 3
34357: PUSH
34358: LD_INT 2
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 3
34367: PUSH
34368: LD_INT 3
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 2
34377: PUSH
34378: LD_INT 3
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34403: LD_ADDR_VAR 0 17
34407: PUSH
34408: LD_INT 0
34410: PUSH
34411: LD_INT 0
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 0
34420: PUSH
34421: LD_INT 1
34423: NEG
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 1
34431: PUSH
34432: LD_INT 0
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 1
34441: PUSH
34442: LD_INT 1
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 0
34451: PUSH
34452: LD_INT 1
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 1
34461: NEG
34462: PUSH
34463: LD_INT 0
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 1
34472: NEG
34473: PUSH
34474: LD_INT 1
34476: NEG
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 1
34484: NEG
34485: PUSH
34486: LD_INT 2
34488: NEG
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 0
34496: PUSH
34497: LD_INT 2
34499: NEG
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 1
34507: PUSH
34508: LD_INT 1
34510: NEG
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 2
34518: PUSH
34519: LD_INT 0
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 2
34528: PUSH
34529: LD_INT 1
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 2
34538: PUSH
34539: LD_INT 2
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 1
34548: PUSH
34549: LD_INT 2
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 0
34558: PUSH
34559: LD_INT 2
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 1
34568: NEG
34569: PUSH
34570: LD_INT 1
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 2
34579: NEG
34580: PUSH
34581: LD_INT 0
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 2
34590: NEG
34591: PUSH
34592: LD_INT 1
34594: NEG
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 2
34602: NEG
34603: PUSH
34604: LD_INT 2
34606: NEG
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34633: LD_ADDR_VAR 0 18
34637: PUSH
34638: LD_INT 0
34640: PUSH
34641: LD_INT 0
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 0
34650: PUSH
34651: LD_INT 1
34653: NEG
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 1
34661: PUSH
34662: LD_INT 0
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 1
34671: PUSH
34672: LD_INT 1
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 0
34681: PUSH
34682: LD_INT 1
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 1
34691: NEG
34692: PUSH
34693: LD_INT 0
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 1
34702: NEG
34703: PUSH
34704: LD_INT 1
34706: NEG
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 1
34714: NEG
34715: PUSH
34716: LD_INT 2
34718: NEG
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 0
34726: PUSH
34727: LD_INT 2
34729: NEG
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 1
34737: PUSH
34738: LD_INT 1
34740: NEG
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 2
34748: PUSH
34749: LD_INT 0
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 2
34758: PUSH
34759: LD_INT 1
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 2
34768: PUSH
34769: LD_INT 2
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 1
34778: PUSH
34779: LD_INT 2
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 0
34788: PUSH
34789: LD_INT 2
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 1
34798: NEG
34799: PUSH
34800: LD_INT 1
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 2
34809: NEG
34810: PUSH
34811: LD_INT 0
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 2
34820: NEG
34821: PUSH
34822: LD_INT 1
34824: NEG
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 2
34832: NEG
34833: PUSH
34834: LD_INT 2
34836: NEG
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34863: LD_ADDR_VAR 0 19
34867: PUSH
34868: LD_INT 0
34870: PUSH
34871: LD_INT 0
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 0
34880: PUSH
34881: LD_INT 1
34883: NEG
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 1
34891: PUSH
34892: LD_INT 0
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 1
34901: PUSH
34902: LD_INT 1
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 0
34911: PUSH
34912: LD_INT 1
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 1
34921: NEG
34922: PUSH
34923: LD_INT 0
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 1
34932: NEG
34933: PUSH
34934: LD_INT 1
34936: NEG
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 1
34944: NEG
34945: PUSH
34946: LD_INT 2
34948: NEG
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 0
34956: PUSH
34957: LD_INT 2
34959: NEG
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 1
34967: PUSH
34968: LD_INT 1
34970: NEG
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: LD_INT 2
34978: PUSH
34979: LD_INT 0
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 2
34988: PUSH
34989: LD_INT 1
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: LD_INT 2
34998: PUSH
34999: LD_INT 2
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 1
35008: PUSH
35009: LD_INT 2
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 0
35018: PUSH
35019: LD_INT 2
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 1
35028: NEG
35029: PUSH
35030: LD_INT 1
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: LD_INT 2
35039: NEG
35040: PUSH
35041: LD_INT 0
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 2
35050: NEG
35051: PUSH
35052: LD_INT 1
35054: NEG
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 2
35062: NEG
35063: PUSH
35064: LD_INT 2
35066: NEG
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35093: LD_ADDR_VAR 0 20
35097: PUSH
35098: LD_INT 0
35100: PUSH
35101: LD_INT 0
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 0
35110: PUSH
35111: LD_INT 1
35113: NEG
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 1
35121: PUSH
35122: LD_INT 0
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 1
35131: PUSH
35132: LD_INT 1
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 0
35141: PUSH
35142: LD_INT 1
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 1
35151: NEG
35152: PUSH
35153: LD_INT 0
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 1
35162: NEG
35163: PUSH
35164: LD_INT 1
35166: NEG
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 1
35174: NEG
35175: PUSH
35176: LD_INT 2
35178: NEG
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 0
35186: PUSH
35187: LD_INT 2
35189: NEG
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 1
35197: PUSH
35198: LD_INT 1
35200: NEG
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 2
35208: PUSH
35209: LD_INT 0
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 2
35218: PUSH
35219: LD_INT 1
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 2
35228: PUSH
35229: LD_INT 2
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 1
35238: PUSH
35239: LD_INT 2
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 0
35248: PUSH
35249: LD_INT 2
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 1
35258: NEG
35259: PUSH
35260: LD_INT 1
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 2
35269: NEG
35270: PUSH
35271: LD_INT 0
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 2
35280: NEG
35281: PUSH
35282: LD_INT 1
35284: NEG
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 2
35292: NEG
35293: PUSH
35294: LD_INT 2
35296: NEG
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35323: LD_ADDR_VAR 0 21
35327: PUSH
35328: LD_INT 0
35330: PUSH
35331: LD_INT 0
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: LD_INT 0
35340: PUSH
35341: LD_INT 1
35343: NEG
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 1
35351: PUSH
35352: LD_INT 0
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 1
35361: PUSH
35362: LD_INT 1
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 0
35371: PUSH
35372: LD_INT 1
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 1
35381: NEG
35382: PUSH
35383: LD_INT 0
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 1
35392: NEG
35393: PUSH
35394: LD_INT 1
35396: NEG
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 1
35404: NEG
35405: PUSH
35406: LD_INT 2
35408: NEG
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 0
35416: PUSH
35417: LD_INT 2
35419: NEG
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 1
35427: PUSH
35428: LD_INT 1
35430: NEG
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 2
35438: PUSH
35439: LD_INT 0
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 2
35448: PUSH
35449: LD_INT 1
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 2
35458: PUSH
35459: LD_INT 2
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 1
35468: PUSH
35469: LD_INT 2
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 0
35478: PUSH
35479: LD_INT 2
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 1
35488: NEG
35489: PUSH
35490: LD_INT 1
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 2
35499: NEG
35500: PUSH
35501: LD_INT 0
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 2
35510: NEG
35511: PUSH
35512: LD_INT 1
35514: NEG
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 2
35522: NEG
35523: PUSH
35524: LD_INT 2
35526: NEG
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35553: LD_ADDR_VAR 0 22
35557: PUSH
35558: LD_INT 0
35560: PUSH
35561: LD_INT 0
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 0
35570: PUSH
35571: LD_INT 1
35573: NEG
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 1
35581: PUSH
35582: LD_INT 0
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 1
35591: PUSH
35592: LD_INT 1
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 0
35601: PUSH
35602: LD_INT 1
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: LD_INT 1
35611: NEG
35612: PUSH
35613: LD_INT 0
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 1
35622: NEG
35623: PUSH
35624: LD_INT 1
35626: NEG
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 1
35634: NEG
35635: PUSH
35636: LD_INT 2
35638: NEG
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: LD_INT 0
35646: PUSH
35647: LD_INT 2
35649: NEG
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 1
35657: PUSH
35658: LD_INT 1
35660: NEG
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 2
35668: PUSH
35669: LD_INT 0
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 2
35678: PUSH
35679: LD_INT 1
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 2
35688: PUSH
35689: LD_INT 2
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 1
35698: PUSH
35699: LD_INT 2
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 0
35708: PUSH
35709: LD_INT 2
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 1
35718: NEG
35719: PUSH
35720: LD_INT 1
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 2
35729: NEG
35730: PUSH
35731: LD_INT 0
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 2
35740: NEG
35741: PUSH
35742: LD_INT 1
35744: NEG
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 2
35752: NEG
35753: PUSH
35754: LD_INT 2
35756: NEG
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35783: LD_ADDR_VAR 0 23
35787: PUSH
35788: LD_INT 0
35790: PUSH
35791: LD_INT 0
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 0
35800: PUSH
35801: LD_INT 1
35803: NEG
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 1
35811: PUSH
35812: LD_INT 0
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 1
35821: PUSH
35822: LD_INT 1
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 0
35831: PUSH
35832: LD_INT 1
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 1
35841: NEG
35842: PUSH
35843: LD_INT 0
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 1
35852: NEG
35853: PUSH
35854: LD_INT 1
35856: NEG
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 1
35864: NEG
35865: PUSH
35866: LD_INT 2
35868: NEG
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 0
35876: PUSH
35877: LD_INT 2
35879: NEG
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 1
35887: PUSH
35888: LD_INT 1
35890: NEG
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 2
35898: PUSH
35899: LD_INT 0
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 2
35908: PUSH
35909: LD_INT 1
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 2
35918: PUSH
35919: LD_INT 2
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 1
35928: PUSH
35929: LD_INT 2
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 0
35938: PUSH
35939: LD_INT 2
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 1
35948: NEG
35949: PUSH
35950: LD_INT 1
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 2
35959: NEG
35960: PUSH
35961: LD_INT 0
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 2
35970: NEG
35971: PUSH
35972: LD_INT 1
35974: NEG
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 2
35982: NEG
35983: PUSH
35984: LD_INT 2
35986: NEG
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 2
35994: NEG
35995: PUSH
35996: LD_INT 3
35998: NEG
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 1
36006: NEG
36007: PUSH
36008: LD_INT 3
36010: NEG
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 1
36018: PUSH
36019: LD_INT 2
36021: NEG
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 2
36029: PUSH
36030: LD_INT 1
36032: NEG
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
36063: LD_ADDR_VAR 0 24
36067: PUSH
36068: LD_INT 0
36070: PUSH
36071: LD_INT 0
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 0
36080: PUSH
36081: LD_INT 1
36083: NEG
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 1
36091: PUSH
36092: LD_INT 0
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 1
36101: PUSH
36102: LD_INT 1
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 0
36111: PUSH
36112: LD_INT 1
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 1
36121: NEG
36122: PUSH
36123: LD_INT 0
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 1
36132: NEG
36133: PUSH
36134: LD_INT 1
36136: NEG
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 1
36144: NEG
36145: PUSH
36146: LD_INT 2
36148: NEG
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 0
36156: PUSH
36157: LD_INT 2
36159: NEG
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: LD_INT 1
36167: PUSH
36168: LD_INT 1
36170: NEG
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 2
36178: PUSH
36179: LD_INT 0
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 2
36188: PUSH
36189: LD_INT 1
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 2
36198: PUSH
36199: LD_INT 2
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 1
36208: PUSH
36209: LD_INT 2
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 0
36218: PUSH
36219: LD_INT 2
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 1
36228: NEG
36229: PUSH
36230: LD_INT 1
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: LD_INT 2
36239: NEG
36240: PUSH
36241: LD_INT 0
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 2
36250: NEG
36251: PUSH
36252: LD_INT 1
36254: NEG
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 2
36262: NEG
36263: PUSH
36264: LD_INT 2
36266: NEG
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: LD_INT 1
36274: PUSH
36275: LD_INT 2
36277: NEG
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 2
36285: PUSH
36286: LD_INT 1
36288: NEG
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 3
36296: PUSH
36297: LD_INT 1
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 3
36306: PUSH
36307: LD_INT 2
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
36339: LD_ADDR_VAR 0 25
36343: PUSH
36344: LD_INT 0
36346: PUSH
36347: LD_INT 0
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 0
36356: PUSH
36357: LD_INT 1
36359: NEG
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 1
36367: PUSH
36368: LD_INT 0
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 1
36377: PUSH
36378: LD_INT 1
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 0
36387: PUSH
36388: LD_INT 1
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 1
36397: NEG
36398: PUSH
36399: LD_INT 0
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 1
36408: NEG
36409: PUSH
36410: LD_INT 1
36412: NEG
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 1
36420: NEG
36421: PUSH
36422: LD_INT 2
36424: NEG
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 0
36432: PUSH
36433: LD_INT 2
36435: NEG
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 1
36443: PUSH
36444: LD_INT 1
36446: NEG
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 2
36454: PUSH
36455: LD_INT 0
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 2
36464: PUSH
36465: LD_INT 1
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 2
36474: PUSH
36475: LD_INT 2
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 1
36484: PUSH
36485: LD_INT 2
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 0
36494: PUSH
36495: LD_INT 2
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: LD_INT 1
36504: NEG
36505: PUSH
36506: LD_INT 1
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 2
36515: NEG
36516: PUSH
36517: LD_INT 0
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PUSH
36524: LD_INT 2
36526: NEG
36527: PUSH
36528: LD_INT 1
36530: NEG
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 2
36538: NEG
36539: PUSH
36540: LD_INT 2
36542: NEG
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: LD_INT 3
36550: PUSH
36551: LD_INT 1
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 3
36560: PUSH
36561: LD_INT 2
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 2
36570: PUSH
36571: LD_INT 3
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 1
36580: PUSH
36581: LD_INT 3
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36613: LD_ADDR_VAR 0 26
36617: PUSH
36618: LD_INT 0
36620: PUSH
36621: LD_INT 0
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 0
36630: PUSH
36631: LD_INT 1
36633: NEG
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 1
36641: PUSH
36642: LD_INT 0
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 1
36651: PUSH
36652: LD_INT 1
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 0
36661: PUSH
36662: LD_INT 1
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 1
36671: NEG
36672: PUSH
36673: LD_INT 0
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 1
36682: NEG
36683: PUSH
36684: LD_INT 1
36686: NEG
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 1
36694: NEG
36695: PUSH
36696: LD_INT 2
36698: NEG
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 0
36706: PUSH
36707: LD_INT 2
36709: NEG
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 1
36717: PUSH
36718: LD_INT 1
36720: NEG
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 2
36728: PUSH
36729: LD_INT 0
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 2
36738: PUSH
36739: LD_INT 1
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 2
36748: PUSH
36749: LD_INT 2
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 1
36758: PUSH
36759: LD_INT 2
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 0
36768: PUSH
36769: LD_INT 2
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 1
36778: NEG
36779: PUSH
36780: LD_INT 1
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 2
36789: NEG
36790: PUSH
36791: LD_INT 0
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 2
36800: NEG
36801: PUSH
36802: LD_INT 1
36804: NEG
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PUSH
36810: LD_INT 2
36812: NEG
36813: PUSH
36814: LD_INT 2
36816: NEG
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 2
36824: PUSH
36825: LD_INT 3
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 1
36834: PUSH
36835: LD_INT 3
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 1
36844: NEG
36845: PUSH
36846: LD_INT 2
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 2
36855: NEG
36856: PUSH
36857: LD_INT 1
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36889: LD_ADDR_VAR 0 27
36893: PUSH
36894: LD_INT 0
36896: PUSH
36897: LD_INT 0
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 0
36906: PUSH
36907: LD_INT 1
36909: NEG
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 1
36917: PUSH
36918: LD_INT 0
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 1
36927: PUSH
36928: LD_INT 1
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 0
36937: PUSH
36938: LD_INT 1
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 1
36947: NEG
36948: PUSH
36949: LD_INT 0
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 1
36958: NEG
36959: PUSH
36960: LD_INT 1
36962: NEG
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 1
36970: NEG
36971: PUSH
36972: LD_INT 2
36974: NEG
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 0
36982: PUSH
36983: LD_INT 2
36985: NEG
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 1
36993: PUSH
36994: LD_INT 1
36996: NEG
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 2
37004: PUSH
37005: LD_INT 0
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 2
37014: PUSH
37015: LD_INT 1
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 2
37024: PUSH
37025: LD_INT 2
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 1
37034: PUSH
37035: LD_INT 2
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 0
37044: PUSH
37045: LD_INT 2
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 1
37054: NEG
37055: PUSH
37056: LD_INT 1
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 2
37065: NEG
37066: PUSH
37067: LD_INT 0
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 2
37076: NEG
37077: PUSH
37078: LD_INT 1
37080: NEG
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 2
37088: NEG
37089: PUSH
37090: LD_INT 2
37092: NEG
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 1
37100: NEG
37101: PUSH
37102: LD_INT 2
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 2
37111: NEG
37112: PUSH
37113: LD_INT 1
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PUSH
37120: LD_INT 3
37122: NEG
37123: PUSH
37124: LD_INT 1
37126: NEG
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 3
37134: NEG
37135: PUSH
37136: LD_INT 2
37138: NEG
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37169: LD_ADDR_VAR 0 28
37173: PUSH
37174: LD_INT 0
37176: PUSH
37177: LD_INT 0
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 0
37186: PUSH
37187: LD_INT 1
37189: NEG
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 1
37197: PUSH
37198: LD_INT 0
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: LD_INT 1
37207: PUSH
37208: LD_INT 1
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 0
37217: PUSH
37218: LD_INT 1
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 1
37227: NEG
37228: PUSH
37229: LD_INT 0
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 1
37238: NEG
37239: PUSH
37240: LD_INT 1
37242: NEG
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 1
37250: NEG
37251: PUSH
37252: LD_INT 2
37254: NEG
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 0
37262: PUSH
37263: LD_INT 2
37265: NEG
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 1
37273: PUSH
37274: LD_INT 1
37276: NEG
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 2
37284: PUSH
37285: LD_INT 0
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 2
37294: PUSH
37295: LD_INT 1
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 2
37304: PUSH
37305: LD_INT 2
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 1
37314: PUSH
37315: LD_INT 2
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 0
37324: PUSH
37325: LD_INT 2
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 1
37334: NEG
37335: PUSH
37336: LD_INT 1
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 2
37345: NEG
37346: PUSH
37347: LD_INT 0
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 2
37356: NEG
37357: PUSH
37358: LD_INT 1
37360: NEG
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 2
37368: NEG
37369: PUSH
37370: LD_INT 2
37372: NEG
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 2
37380: NEG
37381: PUSH
37382: LD_INT 3
37384: NEG
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 1
37392: NEG
37393: PUSH
37394: LD_INT 3
37396: NEG
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 3
37404: NEG
37405: PUSH
37406: LD_INT 1
37408: NEG
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 3
37416: NEG
37417: PUSH
37418: LD_INT 2
37420: NEG
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37451: LD_ADDR_VAR 0 29
37455: PUSH
37456: LD_INT 0
37458: PUSH
37459: LD_INT 0
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 0
37468: PUSH
37469: LD_INT 1
37471: NEG
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 1
37479: PUSH
37480: LD_INT 0
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 1
37489: PUSH
37490: LD_INT 1
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 0
37499: PUSH
37500: LD_INT 1
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 1
37509: NEG
37510: PUSH
37511: LD_INT 0
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 1
37520: NEG
37521: PUSH
37522: LD_INT 1
37524: NEG
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 1
37532: NEG
37533: PUSH
37534: LD_INT 2
37536: NEG
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 0
37544: PUSH
37545: LD_INT 2
37547: NEG
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 1
37555: PUSH
37556: LD_INT 1
37558: NEG
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 2
37566: PUSH
37567: LD_INT 0
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 2
37576: PUSH
37577: LD_INT 1
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 1
37586: PUSH
37587: LD_INT 2
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 0
37596: PUSH
37597: LD_INT 2
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 1
37606: NEG
37607: PUSH
37608: LD_INT 1
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 2
37617: NEG
37618: PUSH
37619: LD_INT 1
37621: NEG
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 2
37629: NEG
37630: PUSH
37631: LD_INT 2
37633: NEG
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 2
37641: NEG
37642: PUSH
37643: LD_INT 3
37645: NEG
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 2
37653: PUSH
37654: LD_INT 1
37656: NEG
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 3
37664: PUSH
37665: LD_INT 1
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 1
37674: PUSH
37675: LD_INT 3
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 1
37684: NEG
37685: PUSH
37686: LD_INT 2
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 3
37695: NEG
37696: PUSH
37697: LD_INT 2
37699: NEG
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37730: LD_ADDR_VAR 0 30
37734: PUSH
37735: LD_INT 0
37737: PUSH
37738: LD_INT 0
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 0
37747: PUSH
37748: LD_INT 1
37750: NEG
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 1
37758: PUSH
37759: LD_INT 0
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 1
37768: PUSH
37769: LD_INT 1
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 0
37778: PUSH
37779: LD_INT 1
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 1
37788: NEG
37789: PUSH
37790: LD_INT 0
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 1
37799: NEG
37800: PUSH
37801: LD_INT 1
37803: NEG
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 1
37811: NEG
37812: PUSH
37813: LD_INT 2
37815: NEG
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 0
37823: PUSH
37824: LD_INT 2
37826: NEG
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 1
37834: PUSH
37835: LD_INT 1
37837: NEG
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 2
37845: PUSH
37846: LD_INT 0
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 2
37855: PUSH
37856: LD_INT 1
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 2
37865: PUSH
37866: LD_INT 2
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 1
37875: PUSH
37876: LD_INT 2
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 1
37885: NEG
37886: PUSH
37887: LD_INT 1
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 2
37896: NEG
37897: PUSH
37898: LD_INT 0
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 2
37907: NEG
37908: PUSH
37909: LD_INT 1
37911: NEG
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 1
37919: NEG
37920: PUSH
37921: LD_INT 3
37923: NEG
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PUSH
37929: LD_INT 1
37931: PUSH
37932: LD_INT 2
37934: NEG
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 3
37942: PUSH
37943: LD_INT 2
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 2
37952: PUSH
37953: LD_INT 3
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 2
37962: NEG
37963: PUSH
37964: LD_INT 1
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 3
37973: NEG
37974: PUSH
37975: LD_INT 1
37977: NEG
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38008: LD_ADDR_VAR 0 31
38012: PUSH
38013: LD_INT 0
38015: PUSH
38016: LD_INT 0
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 0
38025: PUSH
38026: LD_INT 1
38028: NEG
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PUSH
38034: LD_INT 1
38036: PUSH
38037: LD_INT 0
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 1
38046: PUSH
38047: LD_INT 1
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 0
38056: PUSH
38057: LD_INT 1
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 1
38066: NEG
38067: PUSH
38068: LD_INT 0
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 1
38077: NEG
38078: PUSH
38079: LD_INT 1
38081: NEG
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 1
38089: NEG
38090: PUSH
38091: LD_INT 2
38093: NEG
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 1
38101: PUSH
38102: LD_INT 1
38104: NEG
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 2
38112: PUSH
38113: LD_INT 0
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: LD_INT 2
38122: PUSH
38123: LD_INT 1
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: LD_INT 2
38132: PUSH
38133: LD_INT 2
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 1
38142: PUSH
38143: LD_INT 2
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 0
38152: PUSH
38153: LD_INT 2
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 1
38162: NEG
38163: PUSH
38164: LD_INT 1
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_INT 2
38173: NEG
38174: PUSH
38175: LD_INT 1
38177: NEG
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 2
38185: NEG
38186: PUSH
38187: LD_INT 2
38189: NEG
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 2
38197: NEG
38198: PUSH
38199: LD_INT 3
38201: NEG
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 2
38209: PUSH
38210: LD_INT 1
38212: NEG
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 3
38220: PUSH
38221: LD_INT 1
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 1
38230: PUSH
38231: LD_INT 3
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 1
38240: NEG
38241: PUSH
38242: LD_INT 2
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 3
38251: NEG
38252: PUSH
38253: LD_INT 2
38255: NEG
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38286: LD_ADDR_VAR 0 32
38290: PUSH
38291: LD_INT 0
38293: PUSH
38294: LD_INT 0
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 0
38303: PUSH
38304: LD_INT 1
38306: NEG
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 1
38314: PUSH
38315: LD_INT 0
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 1
38324: PUSH
38325: LD_INT 1
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 0
38334: PUSH
38335: LD_INT 1
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 1
38344: NEG
38345: PUSH
38346: LD_INT 0
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 1
38355: NEG
38356: PUSH
38357: LD_INT 1
38359: NEG
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 1
38367: NEG
38368: PUSH
38369: LD_INT 2
38371: NEG
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 0
38379: PUSH
38380: LD_INT 2
38382: NEG
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 1
38390: PUSH
38391: LD_INT 1
38393: NEG
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 2
38401: PUSH
38402: LD_INT 1
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 2
38411: PUSH
38412: LD_INT 2
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 1
38421: PUSH
38422: LD_INT 2
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 0
38431: PUSH
38432: LD_INT 2
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 1
38441: NEG
38442: PUSH
38443: LD_INT 1
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 2
38452: NEG
38453: PUSH
38454: LD_INT 0
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 2
38463: NEG
38464: PUSH
38465: LD_INT 1
38467: NEG
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 1
38475: NEG
38476: PUSH
38477: LD_INT 3
38479: NEG
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 1
38487: PUSH
38488: LD_INT 2
38490: NEG
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 3
38498: PUSH
38499: LD_INT 2
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 2
38508: PUSH
38509: LD_INT 3
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 2
38518: NEG
38519: PUSH
38520: LD_INT 1
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 3
38529: NEG
38530: PUSH
38531: LD_INT 1
38533: NEG
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38564: LD_ADDR_VAR 0 33
38568: PUSH
38569: LD_INT 0
38571: PUSH
38572: LD_INT 0
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 0
38581: PUSH
38582: LD_INT 1
38584: NEG
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 1
38592: PUSH
38593: LD_INT 0
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 1
38602: PUSH
38603: LD_INT 1
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 0
38612: PUSH
38613: LD_INT 1
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 1
38622: NEG
38623: PUSH
38624: LD_INT 0
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 1
38633: NEG
38634: PUSH
38635: LD_INT 1
38637: NEG
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 1
38645: NEG
38646: PUSH
38647: LD_INT 2
38649: NEG
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 1
38657: PUSH
38658: LD_INT 1
38660: NEG
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 2
38668: PUSH
38669: LD_INT 0
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 2
38678: PUSH
38679: LD_INT 1
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 1
38688: PUSH
38689: LD_INT 2
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 0
38698: PUSH
38699: LD_INT 2
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 1
38708: NEG
38709: PUSH
38710: LD_INT 1
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 2
38719: NEG
38720: PUSH
38721: LD_INT 0
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 2
38730: NEG
38731: PUSH
38732: LD_INT 1
38734: NEG
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 2
38742: NEG
38743: PUSH
38744: LD_INT 2
38746: NEG
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 2
38754: NEG
38755: PUSH
38756: LD_INT 3
38758: NEG
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 2
38766: PUSH
38767: LD_INT 1
38769: NEG
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 3
38777: PUSH
38778: LD_INT 1
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 1
38787: PUSH
38788: LD_INT 3
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 1
38797: NEG
38798: PUSH
38799: LD_INT 2
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 3
38808: NEG
38809: PUSH
38810: LD_INT 2
38812: NEG
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38843: LD_ADDR_VAR 0 34
38847: PUSH
38848: LD_INT 0
38850: PUSH
38851: LD_INT 0
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 0
38860: PUSH
38861: LD_INT 1
38863: NEG
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 1
38871: PUSH
38872: LD_INT 0
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 1
38881: PUSH
38882: LD_INT 1
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 0
38891: PUSH
38892: LD_INT 1
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 1
38901: NEG
38902: PUSH
38903: LD_INT 0
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 1
38912: NEG
38913: PUSH
38914: LD_INT 1
38916: NEG
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 1
38924: NEG
38925: PUSH
38926: LD_INT 2
38928: NEG
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 0
38936: PUSH
38937: LD_INT 2
38939: NEG
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 1
38947: PUSH
38948: LD_INT 1
38950: NEG
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 2
38958: PUSH
38959: LD_INT 1
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 2
38968: PUSH
38969: LD_INT 2
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 1
38978: PUSH
38979: LD_INT 2
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 1
38988: NEG
38989: PUSH
38990: LD_INT 1
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 2
38999: NEG
39000: PUSH
39001: LD_INT 0
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 2
39010: NEG
39011: PUSH
39012: LD_INT 1
39014: NEG
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 2
39022: NEG
39023: PUSH
39024: LD_INT 2
39026: NEG
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 1
39034: NEG
39035: PUSH
39036: LD_INT 3
39038: NEG
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 1
39046: PUSH
39047: LD_INT 2
39049: NEG
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 3
39057: PUSH
39058: LD_INT 2
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 2
39067: PUSH
39068: LD_INT 3
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 2
39077: NEG
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 3
39088: NEG
39089: PUSH
39090: LD_INT 1
39092: NEG
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39123: LD_ADDR_VAR 0 35
39127: PUSH
39128: LD_INT 0
39130: PUSH
39131: LD_INT 0
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 0
39140: PUSH
39141: LD_INT 1
39143: NEG
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 1
39151: PUSH
39152: LD_INT 0
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 1
39161: PUSH
39162: LD_INT 1
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 0
39171: PUSH
39172: LD_INT 1
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 1
39181: NEG
39182: PUSH
39183: LD_INT 0
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 1
39192: NEG
39193: PUSH
39194: LD_INT 1
39196: NEG
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 2
39204: PUSH
39205: LD_INT 1
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 2
39214: NEG
39215: PUSH
39216: LD_INT 1
39218: NEG
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39235: LD_ADDR_VAR 0 36
39239: PUSH
39240: LD_INT 0
39242: PUSH
39243: LD_INT 0
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 0
39252: PUSH
39253: LD_INT 1
39255: NEG
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 1
39263: PUSH
39264: LD_INT 0
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 1
39273: PUSH
39274: LD_INT 1
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 0
39283: PUSH
39284: LD_INT 1
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 1
39293: NEG
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 1
39304: NEG
39305: PUSH
39306: LD_INT 1
39308: NEG
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 1
39316: NEG
39317: PUSH
39318: LD_INT 2
39320: NEG
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 1
39328: PUSH
39329: LD_INT 2
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39347: LD_ADDR_VAR 0 37
39351: PUSH
39352: LD_INT 0
39354: PUSH
39355: LD_INT 0
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 0
39364: PUSH
39365: LD_INT 1
39367: NEG
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 1
39375: PUSH
39376: LD_INT 0
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: LD_INT 1
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 0
39395: PUSH
39396: LD_INT 1
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 1
39405: NEG
39406: PUSH
39407: LD_INT 0
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 1
39416: NEG
39417: PUSH
39418: LD_INT 1
39420: NEG
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 1
39428: PUSH
39429: LD_INT 1
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 1
39439: NEG
39440: PUSH
39441: LD_INT 1
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
39459: LD_ADDR_VAR 0 38
39463: PUSH
39464: LD_INT 0
39466: PUSH
39467: LD_INT 0
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 0
39476: PUSH
39477: LD_INT 1
39479: NEG
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 1
39487: PUSH
39488: LD_INT 0
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 1
39497: PUSH
39498: LD_INT 1
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 0
39507: PUSH
39508: LD_INT 1
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 1
39517: NEG
39518: PUSH
39519: LD_INT 0
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 1
39528: NEG
39529: PUSH
39530: LD_INT 1
39532: NEG
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 2
39540: PUSH
39541: LD_INT 1
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 2
39550: NEG
39551: PUSH
39552: LD_INT 1
39554: NEG
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
39571: LD_ADDR_VAR 0 39
39575: PUSH
39576: LD_INT 0
39578: PUSH
39579: LD_INT 0
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 0
39588: PUSH
39589: LD_INT 1
39591: NEG
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 1
39599: PUSH
39600: LD_INT 0
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 1
39609: PUSH
39610: LD_INT 1
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 0
39619: PUSH
39620: LD_INT 1
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 1
39629: NEG
39630: PUSH
39631: LD_INT 0
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 1
39640: NEG
39641: PUSH
39642: LD_INT 1
39644: NEG
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 1
39652: NEG
39653: PUSH
39654: LD_INT 2
39656: NEG
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 1
39664: PUSH
39665: LD_INT 2
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39683: LD_ADDR_VAR 0 40
39687: PUSH
39688: LD_INT 0
39690: PUSH
39691: LD_INT 0
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 0
39700: PUSH
39701: LD_INT 1
39703: NEG
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 1
39711: PUSH
39712: LD_INT 0
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 1
39721: PUSH
39722: LD_INT 1
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 0
39731: PUSH
39732: LD_INT 1
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 1
39741: NEG
39742: PUSH
39743: LD_INT 0
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 1
39752: NEG
39753: PUSH
39754: LD_INT 1
39756: NEG
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 1
39764: PUSH
39765: LD_INT 1
39767: NEG
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 1
39775: NEG
39776: PUSH
39777: LD_INT 1
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39795: LD_ADDR_VAR 0 41
39799: PUSH
39800: LD_INT 0
39802: PUSH
39803: LD_INT 0
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 0
39812: PUSH
39813: LD_INT 1
39815: NEG
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 1
39823: PUSH
39824: LD_INT 0
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 1
39833: PUSH
39834: LD_INT 1
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 0
39843: PUSH
39844: LD_INT 1
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 1
39853: NEG
39854: PUSH
39855: LD_INT 0
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 1
39864: NEG
39865: PUSH
39866: LD_INT 1
39868: NEG
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 1
39876: NEG
39877: PUSH
39878: LD_INT 2
39880: NEG
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 1
39888: PUSH
39889: LD_INT 1
39891: NEG
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 2
39899: PUSH
39900: LD_INT 0
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 2
39909: PUSH
39910: LD_INT 1
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 2
39919: PUSH
39920: LD_INT 2
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 1
39929: PUSH
39930: LD_INT 2
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 1
39939: NEG
39940: PUSH
39941: LD_INT 1
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 2
39950: NEG
39951: PUSH
39952: LD_INT 0
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 2
39961: NEG
39962: PUSH
39963: LD_INT 1
39965: NEG
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 2
39973: NEG
39974: PUSH
39975: LD_INT 2
39977: NEG
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 2
39985: NEG
39986: PUSH
39987: LD_INT 3
39989: NEG
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 2
39997: PUSH
39998: LD_INT 1
40000: NEG
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 3
40008: PUSH
40009: LD_INT 0
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 3
40018: PUSH
40019: LD_INT 1
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 3
40028: PUSH
40029: LD_INT 2
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 3
40038: PUSH
40039: LD_INT 3
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 2
40048: PUSH
40049: LD_INT 3
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 2
40058: NEG
40059: PUSH
40060: LD_INT 1
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 3
40069: NEG
40070: PUSH
40071: LD_INT 0
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 3
40080: NEG
40081: PUSH
40082: LD_INT 1
40084: NEG
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 3
40092: NEG
40093: PUSH
40094: LD_INT 2
40096: NEG
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 3
40104: NEG
40105: PUSH
40106: LD_INT 3
40108: NEG
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40145: LD_ADDR_VAR 0 42
40149: PUSH
40150: LD_INT 0
40152: PUSH
40153: LD_INT 0
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 0
40162: PUSH
40163: LD_INT 1
40165: NEG
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 1
40173: PUSH
40174: LD_INT 0
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 1
40183: PUSH
40184: LD_INT 1
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 0
40193: PUSH
40194: LD_INT 1
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 1
40203: NEG
40204: PUSH
40205: LD_INT 0
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 1
40214: NEG
40215: PUSH
40216: LD_INT 1
40218: NEG
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 1
40226: NEG
40227: PUSH
40228: LD_INT 2
40230: NEG
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 0
40238: PUSH
40239: LD_INT 2
40241: NEG
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 1
40249: PUSH
40250: LD_INT 1
40252: NEG
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 2
40260: PUSH
40261: LD_INT 1
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 2
40270: PUSH
40271: LD_INT 2
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 1
40280: PUSH
40281: LD_INT 2
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 0
40290: PUSH
40291: LD_INT 2
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 1
40300: NEG
40301: PUSH
40302: LD_INT 1
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 2
40311: NEG
40312: PUSH
40313: LD_INT 1
40315: NEG
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 2
40323: NEG
40324: PUSH
40325: LD_INT 2
40327: NEG
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 2
40335: NEG
40336: PUSH
40337: LD_INT 3
40339: NEG
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 1
40347: NEG
40348: PUSH
40349: LD_INT 3
40351: NEG
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 0
40359: PUSH
40360: LD_INT 3
40362: NEG
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 1
40370: PUSH
40371: LD_INT 2
40373: NEG
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 3
40381: PUSH
40382: LD_INT 2
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 3
40391: PUSH
40392: LD_INT 3
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 2
40401: PUSH
40402: LD_INT 3
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 1
40411: PUSH
40412: LD_INT 3
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 0
40421: PUSH
40422: LD_INT 3
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 1
40431: NEG
40432: PUSH
40433: LD_INT 2
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 3
40442: NEG
40443: PUSH
40444: LD_INT 2
40446: NEG
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 3
40454: NEG
40455: PUSH
40456: LD_INT 3
40458: NEG
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40495: LD_ADDR_VAR 0 43
40499: PUSH
40500: LD_INT 0
40502: PUSH
40503: LD_INT 0
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 0
40512: PUSH
40513: LD_INT 1
40515: NEG
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 1
40523: PUSH
40524: LD_INT 0
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 1
40533: PUSH
40534: LD_INT 1
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 0
40543: PUSH
40544: LD_INT 1
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 1
40553: NEG
40554: PUSH
40555: LD_INT 0
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 1
40564: NEG
40565: PUSH
40566: LD_INT 1
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 1
40576: NEG
40577: PUSH
40578: LD_INT 2
40580: NEG
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 0
40588: PUSH
40589: LD_INT 2
40591: NEG
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 1
40599: PUSH
40600: LD_INT 1
40602: NEG
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 2
40610: PUSH
40611: LD_INT 0
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 2
40620: PUSH
40621: LD_INT 1
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 1
40630: PUSH
40631: LD_INT 2
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 0
40640: PUSH
40641: LD_INT 2
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 1
40650: NEG
40651: PUSH
40652: LD_INT 1
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 2
40661: NEG
40662: PUSH
40663: LD_INT 0
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 2
40672: NEG
40673: PUSH
40674: LD_INT 1
40676: NEG
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 1
40684: NEG
40685: PUSH
40686: LD_INT 3
40688: NEG
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: LD_INT 3
40699: NEG
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 1
40707: PUSH
40708: LD_INT 2
40710: NEG
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 2
40718: PUSH
40719: LD_INT 1
40721: NEG
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 3
40729: PUSH
40730: LD_INT 0
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 3
40739: PUSH
40740: LD_INT 1
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 1
40749: PUSH
40750: LD_INT 3
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 0
40759: PUSH
40760: LD_INT 3
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 1
40769: NEG
40770: PUSH
40771: LD_INT 2
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 2
40780: NEG
40781: PUSH
40782: LD_INT 1
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 3
40791: NEG
40792: PUSH
40793: LD_INT 0
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 3
40802: NEG
40803: PUSH
40804: LD_INT 1
40806: NEG
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40843: LD_ADDR_VAR 0 44
40847: PUSH
40848: LD_INT 0
40850: PUSH
40851: LD_INT 0
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: LD_INT 1
40863: NEG
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 1
40871: PUSH
40872: LD_INT 0
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 1
40881: PUSH
40882: LD_INT 1
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: LD_INT 1
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 1
40901: NEG
40902: PUSH
40903: LD_INT 0
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 1
40912: NEG
40913: PUSH
40914: LD_INT 1
40916: NEG
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 1
40924: NEG
40925: PUSH
40926: LD_INT 2
40928: NEG
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 1
40936: PUSH
40937: LD_INT 1
40939: NEG
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 2
40947: PUSH
40948: LD_INT 0
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 2
40957: PUSH
40958: LD_INT 1
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 2
40967: PUSH
40968: LD_INT 2
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 1
40977: PUSH
40978: LD_INT 2
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 1
40987: NEG
40988: PUSH
40989: LD_INT 1
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 2
40998: NEG
40999: PUSH
41000: LD_INT 0
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 2
41009: NEG
41010: PUSH
41011: LD_INT 1
41013: NEG
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 2
41021: NEG
41022: PUSH
41023: LD_INT 2
41025: NEG
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 2
41033: NEG
41034: PUSH
41035: LD_INT 3
41037: NEG
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 2
41045: PUSH
41046: LD_INT 1
41048: NEG
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 3
41056: PUSH
41057: LD_INT 0
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 3
41066: PUSH
41067: LD_INT 1
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 3
41076: PUSH
41077: LD_INT 2
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 3
41086: PUSH
41087: LD_INT 3
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 2
41096: PUSH
41097: LD_INT 3
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 2
41106: NEG
41107: PUSH
41108: LD_INT 1
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 3
41117: NEG
41118: PUSH
41119: LD_INT 0
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 3
41128: NEG
41129: PUSH
41130: LD_INT 1
41132: NEG
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 3
41140: NEG
41141: PUSH
41142: LD_INT 2
41144: NEG
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 3
41152: NEG
41153: PUSH
41154: LD_INT 3
41156: NEG
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41193: LD_ADDR_VAR 0 45
41197: PUSH
41198: LD_INT 0
41200: PUSH
41201: LD_INT 0
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 0
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 1
41221: PUSH
41222: LD_INT 0
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 1
41231: PUSH
41232: LD_INT 1
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: LD_INT 1
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 1
41251: NEG
41252: PUSH
41253: LD_INT 0
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 1
41262: NEG
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 1
41274: NEG
41275: PUSH
41276: LD_INT 2
41278: NEG
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 0
41286: PUSH
41287: LD_INT 2
41289: NEG
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 1
41297: PUSH
41298: LD_INT 1
41300: NEG
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 2
41308: PUSH
41309: LD_INT 1
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 2
41318: PUSH
41319: LD_INT 2
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 1
41328: PUSH
41329: LD_INT 2
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 0
41338: PUSH
41339: LD_INT 2
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 1
41348: NEG
41349: PUSH
41350: LD_INT 1
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 2
41359: NEG
41360: PUSH
41361: LD_INT 1
41363: NEG
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 2
41371: NEG
41372: PUSH
41373: LD_INT 2
41375: NEG
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 2
41383: NEG
41384: PUSH
41385: LD_INT 3
41387: NEG
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 1
41395: NEG
41396: PUSH
41397: LD_INT 3
41399: NEG
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 0
41407: PUSH
41408: LD_INT 3
41410: NEG
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 1
41418: PUSH
41419: LD_INT 2
41421: NEG
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 3
41429: PUSH
41430: LD_INT 2
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 3
41439: PUSH
41440: LD_INT 3
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 2
41449: PUSH
41450: LD_INT 3
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 1
41459: PUSH
41460: LD_INT 3
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 0
41469: PUSH
41470: LD_INT 3
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 1
41479: NEG
41480: PUSH
41481: LD_INT 2
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 3
41490: NEG
41491: PUSH
41492: LD_INT 2
41494: NEG
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 3
41502: NEG
41503: PUSH
41504: LD_INT 3
41506: NEG
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41543: LD_ADDR_VAR 0 46
41547: PUSH
41548: LD_INT 0
41550: PUSH
41551: LD_INT 0
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 0
41560: PUSH
41561: LD_INT 1
41563: NEG
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 1
41571: PUSH
41572: LD_INT 0
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 1
41581: PUSH
41582: LD_INT 1
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 0
41591: PUSH
41592: LD_INT 1
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 1
41601: NEG
41602: PUSH
41603: LD_INT 0
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 1
41612: NEG
41613: PUSH
41614: LD_INT 1
41616: NEG
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 1
41624: NEG
41625: PUSH
41626: LD_INT 2
41628: NEG
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 0
41636: PUSH
41637: LD_INT 2
41639: NEG
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 1
41647: PUSH
41648: LD_INT 1
41650: NEG
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 2
41658: PUSH
41659: LD_INT 0
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 2
41668: PUSH
41669: LD_INT 1
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 1
41678: PUSH
41679: LD_INT 2
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: LD_INT 2
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 1
41698: NEG
41699: PUSH
41700: LD_INT 1
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 2
41709: NEG
41710: PUSH
41711: LD_INT 0
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 2
41720: NEG
41721: PUSH
41722: LD_INT 1
41724: NEG
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 1
41732: NEG
41733: PUSH
41734: LD_INT 3
41736: NEG
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 0
41744: PUSH
41745: LD_INT 3
41747: NEG
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 1
41755: PUSH
41756: LD_INT 2
41758: NEG
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 2
41766: PUSH
41767: LD_INT 1
41769: NEG
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 3
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 3
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 1
41797: PUSH
41798: LD_INT 3
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 0
41807: PUSH
41808: LD_INT 3
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 1
41817: NEG
41818: PUSH
41819: LD_INT 2
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 2
41828: NEG
41829: PUSH
41830: LD_INT 1
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 3
41839: NEG
41840: PUSH
41841: LD_INT 0
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 3
41850: NEG
41851: PUSH
41852: LD_INT 1
41854: NEG
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41891: LD_ADDR_VAR 0 47
41895: PUSH
41896: LD_INT 0
41898: PUSH
41899: LD_INT 0
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: LD_INT 1
41911: NEG
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 1
41919: PUSH
41920: LD_INT 0
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 1
41929: PUSH
41930: LD_INT 1
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 0
41939: PUSH
41940: LD_INT 1
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 1
41949: NEG
41950: PUSH
41951: LD_INT 0
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 1
41960: NEG
41961: PUSH
41962: LD_INT 1
41964: NEG
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 1
41972: NEG
41973: PUSH
41974: LD_INT 2
41976: NEG
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 0
41984: PUSH
41985: LD_INT 2
41987: NEG
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 1
41995: PUSH
41996: LD_INT 1
41998: NEG
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 2
42006: NEG
42007: PUSH
42008: LD_INT 1
42010: NEG
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 2
42018: NEG
42019: PUSH
42020: LD_INT 2
42022: NEG
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42042: LD_ADDR_VAR 0 48
42046: PUSH
42047: LD_INT 0
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 0
42059: PUSH
42060: LD_INT 1
42062: NEG
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 1
42070: PUSH
42071: LD_INT 0
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 1
42080: PUSH
42081: LD_INT 1
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: LD_INT 1
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 1
42100: NEG
42101: PUSH
42102: LD_INT 0
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 1
42111: NEG
42112: PUSH
42113: LD_INT 1
42115: NEG
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 1
42123: NEG
42124: PUSH
42125: LD_INT 2
42127: NEG
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 0
42135: PUSH
42136: LD_INT 2
42138: NEG
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 1
42146: PUSH
42147: LD_INT 1
42149: NEG
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 2
42157: PUSH
42158: LD_INT 0
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 2
42167: PUSH
42168: LD_INT 1
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42189: LD_ADDR_VAR 0 49
42193: PUSH
42194: LD_INT 0
42196: PUSH
42197: LD_INT 0
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 0
42206: PUSH
42207: LD_INT 1
42209: NEG
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 1
42217: PUSH
42218: LD_INT 0
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 1
42227: PUSH
42228: LD_INT 1
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 0
42237: PUSH
42238: LD_INT 1
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 1
42247: NEG
42248: PUSH
42249: LD_INT 0
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 1
42258: NEG
42259: PUSH
42260: LD_INT 1
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 1
42270: PUSH
42271: LD_INT 1
42273: NEG
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 2
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 2
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 2
42301: PUSH
42302: LD_INT 2
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 1
42311: PUSH
42312: LD_INT 2
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42333: LD_ADDR_VAR 0 50
42337: PUSH
42338: LD_INT 0
42340: PUSH
42341: LD_INT 0
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 0
42350: PUSH
42351: LD_INT 1
42353: NEG
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 1
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 1
42371: PUSH
42372: LD_INT 1
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 0
42381: PUSH
42382: LD_INT 1
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 1
42391: NEG
42392: PUSH
42393: LD_INT 0
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 1
42402: NEG
42403: PUSH
42404: LD_INT 1
42406: NEG
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 2
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 2
42424: PUSH
42425: LD_INT 2
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 1
42434: PUSH
42435: LD_INT 2
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 0
42444: PUSH
42445: LD_INT 2
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 1
42454: NEG
42455: PUSH
42456: LD_INT 1
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42477: LD_ADDR_VAR 0 51
42481: PUSH
42482: LD_INT 0
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 0
42494: PUSH
42495: LD_INT 1
42497: NEG
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 1
42505: PUSH
42506: LD_INT 0
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 1
42515: PUSH
42516: LD_INT 1
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 0
42525: PUSH
42526: LD_INT 1
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 1
42535: NEG
42536: PUSH
42537: LD_INT 0
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 1
42546: NEG
42547: PUSH
42548: LD_INT 1
42550: NEG
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 1
42558: PUSH
42559: LD_INT 2
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: LD_INT 2
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 1
42578: NEG
42579: PUSH
42580: LD_INT 1
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 2
42589: NEG
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 2
42600: NEG
42601: PUSH
42602: LD_INT 1
42604: NEG
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42624: LD_ADDR_VAR 0 52
42628: PUSH
42629: LD_INT 0
42631: PUSH
42632: LD_INT 0
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 0
42641: PUSH
42642: LD_INT 1
42644: NEG
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 1
42652: PUSH
42653: LD_INT 0
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 1
42662: PUSH
42663: LD_INT 1
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 0
42672: PUSH
42673: LD_INT 1
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 1
42682: NEG
42683: PUSH
42684: LD_INT 0
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 1
42693: NEG
42694: PUSH
42695: LD_INT 1
42697: NEG
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 1
42705: NEG
42706: PUSH
42707: LD_INT 2
42709: NEG
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 1
42717: NEG
42718: PUSH
42719: LD_INT 1
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 2
42728: NEG
42729: PUSH
42730: LD_INT 0
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 2
42739: NEG
42740: PUSH
42741: LD_INT 1
42743: NEG
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 2
42751: NEG
42752: PUSH
42753: LD_INT 2
42755: NEG
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42775: LD_ADDR_VAR 0 53
42779: PUSH
42780: LD_INT 0
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 0
42792: PUSH
42793: LD_INT 1
42795: NEG
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 1
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 1
42813: PUSH
42814: LD_INT 1
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: LD_INT 1
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 1
42833: NEG
42834: PUSH
42835: LD_INT 0
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 1
42844: NEG
42845: PUSH
42846: LD_INT 1
42848: NEG
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 1
42856: NEG
42857: PUSH
42858: LD_INT 2
42860: NEG
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 0
42868: PUSH
42869: LD_INT 2
42871: NEG
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 1
42879: PUSH
42880: LD_INT 1
42882: NEG
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 2
42890: PUSH
42891: LD_INT 0
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 2
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 2
42910: PUSH
42911: LD_INT 2
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 1
42920: PUSH
42921: LD_INT 2
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: LD_INT 2
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 1
42940: NEG
42941: PUSH
42942: LD_INT 1
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 2
42951: NEG
42952: PUSH
42953: LD_INT 0
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 2
42962: NEG
42963: PUSH
42964: LD_INT 1
42966: NEG
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 2
42974: NEG
42975: PUSH
42976: LD_INT 2
42978: NEG
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43005: LD_ADDR_VAR 0 54
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 0
43022: PUSH
43023: LD_INT 1
43025: NEG
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 1
43033: PUSH
43034: LD_INT 0
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 1
43043: PUSH
43044: LD_INT 1
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 0
43053: PUSH
43054: LD_INT 1
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 1
43063: NEG
43064: PUSH
43065: LD_INT 0
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 1
43074: NEG
43075: PUSH
43076: LD_INT 1
43078: NEG
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 1
43086: NEG
43087: PUSH
43088: LD_INT 2
43090: NEG
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 0
43098: PUSH
43099: LD_INT 2
43101: NEG
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 1
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 2
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 2
43130: PUSH
43131: LD_INT 1
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 2
43140: PUSH
43141: LD_INT 2
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 1
43150: PUSH
43151: LD_INT 2
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 0
43160: PUSH
43161: LD_INT 2
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 1
43170: NEG
43171: PUSH
43172: LD_INT 1
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 2
43181: NEG
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 2
43192: NEG
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 2
43204: NEG
43205: PUSH
43206: LD_INT 2
43208: NEG
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43235: LD_ADDR_VAR 0 55
43239: PUSH
43240: LD_INT 0
43242: PUSH
43243: LD_INT 0
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 0
43252: PUSH
43253: LD_INT 1
43255: NEG
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: LD_INT 0
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 1
43273: PUSH
43274: LD_INT 1
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 0
43283: PUSH
43284: LD_INT 1
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 1
43293: NEG
43294: PUSH
43295: LD_INT 0
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 1
43304: NEG
43305: PUSH
43306: LD_INT 1
43308: NEG
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 1
43316: NEG
43317: PUSH
43318: LD_INT 2
43320: NEG
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 0
43328: PUSH
43329: LD_INT 2
43331: NEG
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 1
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 2
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 2
43360: PUSH
43361: LD_INT 1
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 2
43370: PUSH
43371: LD_INT 2
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 1
43380: PUSH
43381: LD_INT 2
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 0
43390: PUSH
43391: LD_INT 2
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 1
43400: NEG
43401: PUSH
43402: LD_INT 1
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 2
43411: NEG
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 2
43422: NEG
43423: PUSH
43424: LD_INT 1
43426: NEG
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 2
43434: NEG
43435: PUSH
43436: LD_INT 2
43438: NEG
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43465: LD_ADDR_VAR 0 56
43469: PUSH
43470: LD_INT 0
43472: PUSH
43473: LD_INT 0
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 0
43482: PUSH
43483: LD_INT 1
43485: NEG
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 1
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 1
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 0
43513: PUSH
43514: LD_INT 1
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 1
43523: NEG
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 1
43534: NEG
43535: PUSH
43536: LD_INT 1
43538: NEG
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 1
43546: NEG
43547: PUSH
43548: LD_INT 2
43550: NEG
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: LD_INT 2
43561: NEG
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 1
43569: PUSH
43570: LD_INT 1
43572: NEG
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 2
43580: PUSH
43581: LD_INT 0
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 2
43590: PUSH
43591: LD_INT 1
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 2
43600: PUSH
43601: LD_INT 2
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 1
43610: PUSH
43611: LD_INT 2
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 0
43620: PUSH
43621: LD_INT 2
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 1
43630: NEG
43631: PUSH
43632: LD_INT 1
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 2
43641: NEG
43642: PUSH
43643: LD_INT 0
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 2
43652: NEG
43653: PUSH
43654: LD_INT 1
43656: NEG
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 2
43664: NEG
43665: PUSH
43666: LD_INT 2
43668: NEG
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43695: LD_ADDR_VAR 0 57
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 0
43712: PUSH
43713: LD_INT 1
43715: NEG
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: LD_INT 0
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 1
43733: PUSH
43734: LD_INT 1
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 0
43743: PUSH
43744: LD_INT 1
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 1
43753: NEG
43754: PUSH
43755: LD_INT 0
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 1
43764: NEG
43765: PUSH
43766: LD_INT 1
43768: NEG
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 1
43776: NEG
43777: PUSH
43778: LD_INT 2
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 0
43788: PUSH
43789: LD_INT 2
43791: NEG
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 1
43799: PUSH
43800: LD_INT 1
43802: NEG
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 2
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 2
43820: PUSH
43821: LD_INT 1
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 2
43830: PUSH
43831: LD_INT 2
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 1
43840: PUSH
43841: LD_INT 2
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: LD_INT 2
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 1
43860: NEG
43861: PUSH
43862: LD_INT 1
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 2
43871: NEG
43872: PUSH
43873: LD_INT 0
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 2
43882: NEG
43883: PUSH
43884: LD_INT 1
43886: NEG
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 2
43894: NEG
43895: PUSH
43896: LD_INT 2
43898: NEG
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43925: LD_ADDR_VAR 0 58
43929: PUSH
43930: LD_INT 0
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: LD_INT 1
43945: NEG
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 1
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 1
43963: PUSH
43964: LD_INT 1
43966: PUSH
43967: EMPTY
43968: LIST
43969: LIST
43970: PUSH
43971: LD_INT 0
43973: PUSH
43974: LD_INT 1
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 1
43983: NEG
43984: PUSH
43985: LD_INT 0
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 1
43994: NEG
43995: PUSH
43996: LD_INT 1
43998: NEG
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: NEG
44007: PUSH
44008: LD_INT 2
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 0
44018: PUSH
44019: LD_INT 2
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 1
44029: PUSH
44030: LD_INT 1
44032: NEG
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 2
44040: PUSH
44041: LD_INT 0
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 2
44050: PUSH
44051: LD_INT 1
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 2
44060: PUSH
44061: LD_INT 2
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 1
44070: PUSH
44071: LD_INT 2
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 0
44080: PUSH
44081: LD_INT 2
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 1
44090: NEG
44091: PUSH
44092: LD_INT 1
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 2
44101: NEG
44102: PUSH
44103: LD_INT 0
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 2
44112: NEG
44113: PUSH
44114: LD_INT 1
44116: NEG
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 2
44124: NEG
44125: PUSH
44126: LD_INT 2
44128: NEG
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44155: LD_ADDR_VAR 0 59
44159: PUSH
44160: LD_INT 0
44162: PUSH
44163: LD_INT 0
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: LD_INT 1
44175: NEG
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 1
44183: PUSH
44184: LD_INT 0
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: PUSH
44194: LD_INT 1
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: LD_INT 1
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 1
44213: NEG
44214: PUSH
44215: LD_INT 0
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 1
44224: NEG
44225: PUSH
44226: LD_INT 1
44228: NEG
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44243: LD_ADDR_VAR 0 60
44247: PUSH
44248: LD_INT 0
44250: PUSH
44251: LD_INT 0
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: LD_INT 1
44263: NEG
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: LD_INT 0
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: LD_INT 1
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 0
44291: PUSH
44292: LD_INT 1
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 1
44301: NEG
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 1
44312: NEG
44313: PUSH
44314: LD_INT 1
44316: NEG
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44331: LD_ADDR_VAR 0 61
44335: PUSH
44336: LD_INT 0
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 0
44348: PUSH
44349: LD_INT 1
44351: NEG
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 1
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 0
44379: PUSH
44380: LD_INT 1
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 1
44389: NEG
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 1
44400: NEG
44401: PUSH
44402: LD_INT 1
44404: NEG
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44419: LD_ADDR_VAR 0 62
44423: PUSH
44424: LD_INT 0
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 0
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: LD_INT 0
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 1
44457: PUSH
44458: LD_INT 1
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 0
44467: PUSH
44468: LD_INT 1
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 1
44477: NEG
44478: PUSH
44479: LD_INT 0
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 1
44488: NEG
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44507: LD_ADDR_VAR 0 63
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: LD_INT 0
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: LD_INT 1
44527: NEG
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 1
44535: PUSH
44536: LD_INT 0
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 1
44545: PUSH
44546: LD_INT 1
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 0
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 1
44565: NEG
44566: PUSH
44567: LD_INT 0
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 1
44576: NEG
44577: PUSH
44578: LD_INT 1
44580: NEG
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
44595: LD_ADDR_VAR 0 64
44599: PUSH
44600: LD_INT 0
44602: PUSH
44603: LD_INT 0
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 0
44612: PUSH
44613: LD_INT 1
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 1
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 1
44633: PUSH
44634: LD_INT 1
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 0
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 1
44653: NEG
44654: PUSH
44655: LD_INT 0
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 1
44664: NEG
44665: PUSH
44666: LD_INT 1
44668: NEG
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: ST_TO_ADDR
// end ; 1 :
44683: GO 50580
44685: LD_INT 1
44687: DOUBLE
44688: EQUAL
44689: IFTRUE 44693
44691: GO 47316
44693: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44694: LD_ADDR_VAR 0 11
44698: PUSH
44699: LD_INT 1
44701: NEG
44702: PUSH
44703: LD_INT 3
44705: NEG
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 0
44713: PUSH
44714: LD_INT 3
44716: NEG
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: LD_INT 2
44727: NEG
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: LIST
44737: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44738: LD_ADDR_VAR 0 12
44742: PUSH
44743: LD_INT 2
44745: PUSH
44746: LD_INT 1
44748: NEG
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 3
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 3
44766: PUSH
44767: LD_INT 1
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: LIST
44778: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44779: LD_ADDR_VAR 0 13
44783: PUSH
44784: LD_INT 3
44786: PUSH
44787: LD_INT 2
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 3
44796: PUSH
44797: LD_INT 3
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 2
44806: PUSH
44807: LD_INT 3
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: LIST
44818: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44819: LD_ADDR_VAR 0 14
44823: PUSH
44824: LD_INT 1
44826: PUSH
44827: LD_INT 3
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: LD_INT 3
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 1
44846: NEG
44847: PUSH
44848: LD_INT 2
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: LIST
44859: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44860: LD_ADDR_VAR 0 15
44864: PUSH
44865: LD_INT 2
44867: NEG
44868: PUSH
44869: LD_INT 1
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 3
44878: NEG
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 3
44889: NEG
44890: PUSH
44891: LD_INT 1
44893: NEG
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: LIST
44903: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44904: LD_ADDR_VAR 0 16
44908: PUSH
44909: LD_INT 2
44911: NEG
44912: PUSH
44913: LD_INT 3
44915: NEG
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 3
44923: NEG
44924: PUSH
44925: LD_INT 2
44927: NEG
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 3
44935: NEG
44936: PUSH
44937: LD_INT 3
44939: NEG
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: LIST
44949: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44950: LD_ADDR_VAR 0 17
44954: PUSH
44955: LD_INT 1
44957: NEG
44958: PUSH
44959: LD_INT 3
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: LD_INT 3
44972: NEG
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 1
44980: PUSH
44981: LD_INT 2
44983: NEG
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: LIST
44993: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44994: LD_ADDR_VAR 0 18
44998: PUSH
44999: LD_INT 2
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 3
45012: PUSH
45013: LD_INT 0
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 3
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: LIST
45034: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45035: LD_ADDR_VAR 0 19
45039: PUSH
45040: LD_INT 3
45042: PUSH
45043: LD_INT 2
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 3
45052: PUSH
45053: LD_INT 3
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 2
45062: PUSH
45063: LD_INT 3
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: LIST
45074: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45075: LD_ADDR_VAR 0 20
45079: PUSH
45080: LD_INT 1
45082: PUSH
45083: LD_INT 3
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 0
45092: PUSH
45093: LD_INT 3
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 1
45102: NEG
45103: PUSH
45104: LD_INT 2
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: LIST
45115: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45116: LD_ADDR_VAR 0 21
45120: PUSH
45121: LD_INT 2
45123: NEG
45124: PUSH
45125: LD_INT 1
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 3
45134: NEG
45135: PUSH
45136: LD_INT 0
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 3
45145: NEG
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: LIST
45159: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45160: LD_ADDR_VAR 0 22
45164: PUSH
45165: LD_INT 2
45167: NEG
45168: PUSH
45169: LD_INT 3
45171: NEG
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 3
45179: NEG
45180: PUSH
45181: LD_INT 2
45183: NEG
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 3
45191: NEG
45192: PUSH
45193: LD_INT 3
45195: NEG
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: LIST
45205: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
45206: LD_ADDR_VAR 0 23
45210: PUSH
45211: LD_INT 0
45213: PUSH
45214: LD_INT 3
45216: NEG
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 1
45224: NEG
45225: PUSH
45226: LD_INT 4
45228: NEG
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 1
45236: PUSH
45237: LD_INT 3
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: LIST
45249: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
45250: LD_ADDR_VAR 0 24
45254: PUSH
45255: LD_INT 3
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 3
45267: PUSH
45268: LD_INT 1
45270: NEG
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 4
45278: PUSH
45279: LD_INT 1
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: LIST
45290: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
45291: LD_ADDR_VAR 0 25
45295: PUSH
45296: LD_INT 3
45298: PUSH
45299: LD_INT 3
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 4
45308: PUSH
45309: LD_INT 3
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 3
45318: PUSH
45319: LD_INT 4
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: LIST
45330: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
45331: LD_ADDR_VAR 0 26
45335: PUSH
45336: LD_INT 0
45338: PUSH
45339: LD_INT 3
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: LD_INT 4
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: NEG
45359: PUSH
45360: LD_INT 3
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: LIST
45371: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
45372: LD_ADDR_VAR 0 27
45376: PUSH
45377: LD_INT 3
45379: NEG
45380: PUSH
45381: LD_INT 0
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 3
45390: NEG
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 4
45401: NEG
45402: PUSH
45403: LD_INT 1
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: LIST
45415: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
45416: LD_ADDR_VAR 0 28
45420: PUSH
45421: LD_INT 3
45423: NEG
45424: PUSH
45425: LD_INT 3
45427: NEG
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 3
45435: NEG
45436: PUSH
45437: LD_INT 4
45439: NEG
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 4
45447: NEG
45448: PUSH
45449: LD_INT 3
45451: NEG
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: LIST
45461: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
45462: LD_ADDR_VAR 0 29
45466: PUSH
45467: LD_INT 1
45469: NEG
45470: PUSH
45471: LD_INT 3
45473: NEG
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 0
45481: PUSH
45482: LD_INT 3
45484: NEG
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 1
45492: PUSH
45493: LD_INT 2
45495: NEG
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 1
45503: NEG
45504: PUSH
45505: LD_INT 4
45507: NEG
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: LD_INT 4
45518: NEG
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 1
45526: PUSH
45527: LD_INT 3
45529: NEG
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 1
45537: NEG
45538: PUSH
45539: LD_INT 5
45541: NEG
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 0
45549: PUSH
45550: LD_INT 5
45552: NEG
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 1
45560: PUSH
45561: LD_INT 4
45563: NEG
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: LD_INT 6
45575: NEG
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: LD_INT 6
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 1
45594: PUSH
45595: LD_INT 5
45597: NEG
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
45617: LD_ADDR_VAR 0 30
45621: PUSH
45622: LD_INT 2
45624: PUSH
45625: LD_INT 1
45627: NEG
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 3
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 3
45645: PUSH
45646: LD_INT 1
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 3
45655: PUSH
45656: LD_INT 1
45658: NEG
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 4
45666: PUSH
45667: LD_INT 0
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 4
45676: PUSH
45677: LD_INT 1
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 4
45686: PUSH
45687: LD_INT 1
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 5
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 5
45707: PUSH
45708: LD_INT 1
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 5
45717: PUSH
45718: LD_INT 1
45720: NEG
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 6
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 6
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
45760: LD_ADDR_VAR 0 31
45764: PUSH
45765: LD_INT 3
45767: PUSH
45768: LD_INT 2
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 3
45777: PUSH
45778: LD_INT 3
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 2
45787: PUSH
45788: LD_INT 3
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 4
45797: PUSH
45798: LD_INT 3
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 4
45807: PUSH
45808: LD_INT 4
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 3
45817: PUSH
45818: LD_INT 4
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 5
45827: PUSH
45828: LD_INT 4
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 5
45837: PUSH
45838: LD_INT 5
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 4
45847: PUSH
45848: LD_INT 5
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 6
45857: PUSH
45858: LD_INT 5
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 6
45867: PUSH
45868: LD_INT 6
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 5
45877: PUSH
45878: LD_INT 6
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
45899: LD_ADDR_VAR 0 32
45903: PUSH
45904: LD_INT 1
45906: PUSH
45907: LD_INT 3
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: LD_INT 3
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 1
45926: NEG
45927: PUSH
45928: LD_INT 2
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: LD_INT 4
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: LD_INT 4
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 1
45957: NEG
45958: PUSH
45959: LD_INT 3
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 1
45968: PUSH
45969: LD_INT 5
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: LD_INT 5
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: LD_INT 4
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 1
45999: PUSH
46000: LD_INT 6
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 0
46009: PUSH
46010: LD_INT 6
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 1
46019: NEG
46020: PUSH
46021: LD_INT 5
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
46042: LD_ADDR_VAR 0 33
46046: PUSH
46047: LD_INT 2
46049: NEG
46050: PUSH
46051: LD_INT 1
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 3
46060: NEG
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 3
46071: NEG
46072: PUSH
46073: LD_INT 1
46075: NEG
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 3
46083: NEG
46084: PUSH
46085: LD_INT 1
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 4
46094: NEG
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 4
46105: NEG
46106: PUSH
46107: LD_INT 1
46109: NEG
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 4
46117: NEG
46118: PUSH
46119: LD_INT 1
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 5
46128: NEG
46129: PUSH
46130: LD_INT 0
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 5
46139: NEG
46140: PUSH
46141: LD_INT 1
46143: NEG
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 5
46151: NEG
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 6
46162: NEG
46163: PUSH
46164: LD_INT 0
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 6
46173: NEG
46174: PUSH
46175: LD_INT 1
46177: NEG
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
46197: LD_ADDR_VAR 0 34
46201: PUSH
46202: LD_INT 2
46204: NEG
46205: PUSH
46206: LD_INT 3
46208: NEG
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 3
46216: NEG
46217: PUSH
46218: LD_INT 2
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 3
46228: NEG
46229: PUSH
46230: LD_INT 3
46232: NEG
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 3
46240: NEG
46241: PUSH
46242: LD_INT 4
46244: NEG
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 4
46252: NEG
46253: PUSH
46254: LD_INT 3
46256: NEG
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 4
46264: NEG
46265: PUSH
46266: LD_INT 4
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 4
46276: NEG
46277: PUSH
46278: LD_INT 5
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 5
46288: NEG
46289: PUSH
46290: LD_INT 4
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 5
46300: NEG
46301: PUSH
46302: LD_INT 5
46304: NEG
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 5
46312: NEG
46313: PUSH
46314: LD_INT 6
46316: NEG
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 6
46324: NEG
46325: PUSH
46326: LD_INT 5
46328: NEG
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 6
46336: NEG
46337: PUSH
46338: LD_INT 6
46340: NEG
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
46360: LD_ADDR_VAR 0 41
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: LD_INT 2
46370: NEG
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 1
46378: NEG
46379: PUSH
46380: LD_INT 3
46382: NEG
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: LD_INT 2
46393: NEG
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: LIST
46403: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
46404: LD_ADDR_VAR 0 42
46408: PUSH
46409: LD_INT 2
46411: PUSH
46412: LD_INT 0
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 2
46421: PUSH
46422: LD_INT 1
46424: NEG
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 3
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: LIST
46444: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
46445: LD_ADDR_VAR 0 43
46449: PUSH
46450: LD_INT 2
46452: PUSH
46453: LD_INT 2
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 3
46462: PUSH
46463: LD_INT 2
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 2
46472: PUSH
46473: LD_INT 3
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: LIST
46484: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
46485: LD_ADDR_VAR 0 44
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: LD_INT 2
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 1
46502: PUSH
46503: LD_INT 3
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 1
46512: NEG
46513: PUSH
46514: LD_INT 2
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: LIST
46525: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46526: LD_ADDR_VAR 0 45
46530: PUSH
46531: LD_INT 2
46533: NEG
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 2
46544: NEG
46545: PUSH
46546: LD_INT 1
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 3
46555: NEG
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: LIST
46569: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
46570: LD_ADDR_VAR 0 46
46574: PUSH
46575: LD_INT 2
46577: NEG
46578: PUSH
46579: LD_INT 2
46581: NEG
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 2
46589: NEG
46590: PUSH
46591: LD_INT 3
46593: NEG
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 3
46601: NEG
46602: PUSH
46603: LD_INT 2
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: LIST
46615: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
46616: LD_ADDR_VAR 0 47
46620: PUSH
46621: LD_INT 2
46623: NEG
46624: PUSH
46625: LD_INT 3
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: NEG
46636: PUSH
46637: LD_INT 3
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46649: LD_ADDR_VAR 0 48
46653: PUSH
46654: LD_INT 1
46656: PUSH
46657: LD_INT 2
46659: NEG
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 2
46667: PUSH
46668: LD_INT 1
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
46680: LD_ADDR_VAR 0 49
46684: PUSH
46685: LD_INT 3
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 3
46697: PUSH
46698: LD_INT 2
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
46709: LD_ADDR_VAR 0 50
46713: PUSH
46714: LD_INT 2
46716: PUSH
46717: LD_INT 3
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: LD_INT 3
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46738: LD_ADDR_VAR 0 51
46742: PUSH
46743: LD_INT 1
46745: NEG
46746: PUSH
46747: LD_INT 2
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 2
46756: NEG
46757: PUSH
46758: LD_INT 1
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46769: LD_ADDR_VAR 0 52
46773: PUSH
46774: LD_INT 3
46776: NEG
46777: PUSH
46778: LD_INT 1
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 3
46788: NEG
46789: PUSH
46790: LD_INT 2
46792: NEG
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46802: LD_ADDR_VAR 0 53
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: LD_INT 3
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: LD_INT 3
46824: NEG
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: LD_INT 2
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: LIST
46845: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46846: LD_ADDR_VAR 0 54
46850: PUSH
46851: LD_INT 2
46853: PUSH
46854: LD_INT 1
46856: NEG
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 3
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 3
46874: PUSH
46875: LD_INT 1
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: LIST
46886: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46887: LD_ADDR_VAR 0 55
46891: PUSH
46892: LD_INT 3
46894: PUSH
46895: LD_INT 2
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 3
46904: PUSH
46905: LD_INT 3
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 2
46914: PUSH
46915: LD_INT 3
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: LIST
46926: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46927: LD_ADDR_VAR 0 56
46931: PUSH
46932: LD_INT 1
46934: PUSH
46935: LD_INT 3
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 0
46944: PUSH
46945: LD_INT 3
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 1
46954: NEG
46955: PUSH
46956: LD_INT 2
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: LIST
46967: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46968: LD_ADDR_VAR 0 57
46972: PUSH
46973: LD_INT 2
46975: NEG
46976: PUSH
46977: LD_INT 1
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 3
46986: NEG
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 3
46997: NEG
46998: PUSH
46999: LD_INT 1
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: LIST
47011: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47012: LD_ADDR_VAR 0 58
47016: PUSH
47017: LD_INT 2
47019: NEG
47020: PUSH
47021: LD_INT 3
47023: NEG
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 3
47031: NEG
47032: PUSH
47033: LD_INT 2
47035: NEG
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 3
47043: NEG
47044: PUSH
47045: LD_INT 3
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: LIST
47057: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
47058: LD_ADDR_VAR 0 59
47062: PUSH
47063: LD_INT 1
47065: NEG
47066: PUSH
47067: LD_INT 2
47069: NEG
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 0
47077: PUSH
47078: LD_INT 2
47080: NEG
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: LD_INT 1
47091: NEG
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: LIST
47101: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47102: LD_ADDR_VAR 0 60
47106: PUSH
47107: LD_INT 1
47109: PUSH
47110: LD_INT 1
47112: NEG
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 2
47120: PUSH
47121: LD_INT 0
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 2
47130: PUSH
47131: LD_INT 1
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: LIST
47142: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47143: LD_ADDR_VAR 0 61
47147: PUSH
47148: LD_INT 2
47150: PUSH
47151: LD_INT 1
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 2
47160: PUSH
47161: LD_INT 2
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: LD_INT 2
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: LIST
47182: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47183: LD_ADDR_VAR 0 62
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: LD_INT 2
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: LD_INT 2
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 1
47210: NEG
47211: PUSH
47212: LD_INT 1
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: LIST
47223: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47224: LD_ADDR_VAR 0 63
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: LD_INT 1
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 2
47242: NEG
47243: PUSH
47244: LD_INT 0
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 2
47253: NEG
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: LIST
47267: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47268: LD_ADDR_VAR 0 64
47272: PUSH
47273: LD_INT 1
47275: NEG
47276: PUSH
47277: LD_INT 2
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 2
47287: NEG
47288: PUSH
47289: LD_INT 1
47291: NEG
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 2
47299: NEG
47300: PUSH
47301: LD_INT 2
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: LIST
47313: ST_TO_ADDR
// end ; 2 :
47314: GO 50580
47316: LD_INT 2
47318: DOUBLE
47319: EQUAL
47320: IFTRUE 47324
47322: GO 50579
47324: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
47325: LD_ADDR_VAR 0 29
47329: PUSH
47330: LD_INT 4
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 4
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 5
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 5
47363: PUSH
47364: LD_INT 1
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 4
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 3
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 3
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 3
47404: PUSH
47405: LD_INT 2
47407: NEG
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 5
47415: PUSH
47416: LD_INT 2
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 3
47425: PUSH
47426: LD_INT 3
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 3
47435: PUSH
47436: LD_INT 2
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 4
47445: PUSH
47446: LD_INT 3
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 4
47455: PUSH
47456: LD_INT 4
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 3
47465: PUSH
47466: LD_INT 4
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 2
47475: PUSH
47476: LD_INT 3
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 2
47485: PUSH
47486: LD_INT 2
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 4
47495: PUSH
47496: LD_INT 2
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 2
47505: PUSH
47506: LD_INT 4
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: LD_INT 4
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 0
47525: PUSH
47526: LD_INT 3
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: LD_INT 4
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 1
47545: PUSH
47546: LD_INT 5
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: LD_INT 5
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 1
47565: NEG
47566: PUSH
47567: LD_INT 4
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 1
47576: NEG
47577: PUSH
47578: LD_INT 3
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 2
47587: PUSH
47588: LD_INT 5
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 2
47597: NEG
47598: PUSH
47599: LD_INT 3
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 3
47608: NEG
47609: PUSH
47610: LD_INT 0
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 3
47619: NEG
47620: PUSH
47621: LD_INT 1
47623: NEG
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 2
47631: NEG
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 2
47642: NEG
47643: PUSH
47644: LD_INT 1
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 3
47653: NEG
47654: PUSH
47655: LD_INT 1
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 4
47664: NEG
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 4
47675: NEG
47676: PUSH
47677: LD_INT 1
47679: NEG
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 4
47687: NEG
47688: PUSH
47689: LD_INT 2
47691: NEG
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 2
47699: NEG
47700: PUSH
47701: LD_INT 2
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 4
47710: NEG
47711: PUSH
47712: LD_INT 4
47714: NEG
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 4
47722: NEG
47723: PUSH
47724: LD_INT 5
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 3
47734: NEG
47735: PUSH
47736: LD_INT 4
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 3
47746: NEG
47747: PUSH
47748: LD_INT 3
47750: NEG
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 4
47758: NEG
47759: PUSH
47760: LD_INT 3
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 5
47770: NEG
47771: PUSH
47772: LD_INT 4
47774: NEG
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 5
47782: NEG
47783: PUSH
47784: LD_INT 5
47786: NEG
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 3
47794: NEG
47795: PUSH
47796: LD_INT 5
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 5
47806: NEG
47807: PUSH
47808: LD_INT 3
47810: NEG
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
47863: LD_ADDR_VAR 0 30
47867: PUSH
47868: LD_INT 4
47870: PUSH
47871: LD_INT 4
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 4
47880: PUSH
47881: LD_INT 3
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 5
47890: PUSH
47891: LD_INT 4
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 5
47900: PUSH
47901: LD_INT 5
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 4
47910: PUSH
47911: LD_INT 5
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 3
47920: PUSH
47921: LD_INT 4
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 3
47930: PUSH
47931: LD_INT 3
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 5
47940: PUSH
47941: LD_INT 3
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 3
47950: PUSH
47951: LD_INT 5
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: LD_INT 3
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 0
47970: PUSH
47971: LD_INT 2
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 1
47980: PUSH
47981: LD_INT 3
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 1
47990: PUSH
47991: LD_INT 4
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 0
48000: PUSH
48001: LD_INT 4
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 1
48010: NEG
48011: PUSH
48012: LD_INT 3
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 1
48021: NEG
48022: PUSH
48023: LD_INT 2
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 2
48032: PUSH
48033: LD_INT 4
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 2
48042: NEG
48043: PUSH
48044: LD_INT 2
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 4
48053: NEG
48054: PUSH
48055: LD_INT 0
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 4
48064: NEG
48065: PUSH
48066: LD_INT 1
48068: NEG
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 3
48076: NEG
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 3
48087: NEG
48088: PUSH
48089: LD_INT 1
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 4
48098: NEG
48099: PUSH
48100: LD_INT 1
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 5
48109: NEG
48110: PUSH
48111: LD_INT 0
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 5
48120: NEG
48121: PUSH
48122: LD_INT 1
48124: NEG
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 5
48132: NEG
48133: PUSH
48134: LD_INT 2
48136: NEG
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 3
48144: NEG
48145: PUSH
48146: LD_INT 2
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 3
48155: NEG
48156: PUSH
48157: LD_INT 3
48159: NEG
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 3
48167: NEG
48168: PUSH
48169: LD_INT 4
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 2
48179: NEG
48180: PUSH
48181: LD_INT 3
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 2
48191: NEG
48192: PUSH
48193: LD_INT 2
48195: NEG
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 3
48203: NEG
48204: PUSH
48205: LD_INT 2
48207: NEG
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 4
48215: NEG
48216: PUSH
48217: LD_INT 3
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 4
48227: NEG
48228: PUSH
48229: LD_INT 4
48231: NEG
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 2
48239: NEG
48240: PUSH
48241: LD_INT 4
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 4
48251: NEG
48252: PUSH
48253: LD_INT 2
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 0
48263: PUSH
48264: LD_INT 4
48266: NEG
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: LD_INT 5
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: PUSH
48286: LD_INT 4
48288: NEG
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: LD_INT 3
48299: NEG
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: LD_INT 3
48310: NEG
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 1
48318: NEG
48319: PUSH
48320: LD_INT 4
48322: NEG
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: LD_INT 5
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 2
48342: PUSH
48343: LD_INT 3
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 2
48353: NEG
48354: PUSH
48355: LD_INT 5
48357: NEG
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
48410: LD_ADDR_VAR 0 31
48414: PUSH
48415: LD_INT 0
48417: PUSH
48418: LD_INT 4
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 0
48427: PUSH
48428: LD_INT 3
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: LD_INT 4
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 1
48447: PUSH
48448: LD_INT 5
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: LD_INT 5
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 1
48467: NEG
48468: PUSH
48469: LD_INT 4
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: NEG
48479: PUSH
48480: LD_INT 3
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 2
48489: PUSH
48490: LD_INT 5
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 2
48499: NEG
48500: PUSH
48501: LD_INT 3
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 3
48510: NEG
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 3
48521: NEG
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 2
48533: NEG
48534: PUSH
48535: LD_INT 0
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 2
48544: NEG
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 3
48555: NEG
48556: PUSH
48557: LD_INT 1
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 4
48566: NEG
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 4
48577: NEG
48578: PUSH
48579: LD_INT 1
48581: NEG
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 4
48589: NEG
48590: PUSH
48591: LD_INT 2
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 2
48601: NEG
48602: PUSH
48603: LD_INT 2
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 4
48612: NEG
48613: PUSH
48614: LD_INT 4
48616: NEG
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 4
48624: NEG
48625: PUSH
48626: LD_INT 5
48628: NEG
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 3
48636: NEG
48637: PUSH
48638: LD_INT 4
48640: NEG
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 3
48648: NEG
48649: PUSH
48650: LD_INT 3
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 4
48660: NEG
48661: PUSH
48662: LD_INT 3
48664: NEG
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 5
48672: NEG
48673: PUSH
48674: LD_INT 4
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 5
48684: NEG
48685: PUSH
48686: LD_INT 5
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 3
48696: NEG
48697: PUSH
48698: LD_INT 5
48700: NEG
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 5
48708: NEG
48709: PUSH
48710: LD_INT 3
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: LD_INT 3
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: LD_INT 4
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: LD_INT 3
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: PUSH
48754: LD_INT 2
48756: NEG
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: LD_INT 2
48767: NEG
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 1
48775: NEG
48776: PUSH
48777: LD_INT 3
48779: NEG
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 1
48787: NEG
48788: PUSH
48789: LD_INT 4
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 2
48799: PUSH
48800: LD_INT 2
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 2
48810: NEG
48811: PUSH
48812: LD_INT 4
48814: NEG
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 4
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 4
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 5
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 5
48853: PUSH
48854: LD_INT 1
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 4
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 3
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 3
48883: PUSH
48884: LD_INT 1
48886: NEG
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 3
48894: PUSH
48895: LD_INT 2
48897: NEG
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 5
48905: PUSH
48906: LD_INT 2
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
48960: LD_ADDR_VAR 0 32
48964: PUSH
48965: LD_INT 4
48967: NEG
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 4
48978: NEG
48979: PUSH
48980: LD_INT 1
48982: NEG
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 3
48990: NEG
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 3
49001: NEG
49002: PUSH
49003: LD_INT 1
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 4
49012: NEG
49013: PUSH
49014: LD_INT 1
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 5
49023: NEG
49024: PUSH
49025: LD_INT 0
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 5
49034: NEG
49035: PUSH
49036: LD_INT 1
49038: NEG
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 5
49046: NEG
49047: PUSH
49048: LD_INT 2
49050: NEG
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 3
49058: NEG
49059: PUSH
49060: LD_INT 2
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 3
49069: NEG
49070: PUSH
49071: LD_INT 3
49073: NEG
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 3
49081: NEG
49082: PUSH
49083: LD_INT 4
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 2
49093: NEG
49094: PUSH
49095: LD_INT 3
49097: NEG
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 2
49105: NEG
49106: PUSH
49107: LD_INT 2
49109: NEG
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 3
49117: NEG
49118: PUSH
49119: LD_INT 2
49121: NEG
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 4
49129: NEG
49130: PUSH
49131: LD_INT 3
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 4
49141: NEG
49142: PUSH
49143: LD_INT 4
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 2
49153: NEG
49154: PUSH
49155: LD_INT 4
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 4
49165: NEG
49166: PUSH
49167: LD_INT 2
49169: NEG
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: LD_INT 4
49180: NEG
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 0
49188: PUSH
49189: LD_INT 5
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: LD_INT 4
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: LD_INT 3
49213: NEG
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: LD_INT 3
49224: NEG
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 1
49232: NEG
49233: PUSH
49234: LD_INT 4
49236: NEG
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 1
49244: NEG
49245: PUSH
49246: LD_INT 5
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 2
49256: PUSH
49257: LD_INT 3
49259: NEG
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 2
49267: NEG
49268: PUSH
49269: LD_INT 5
49271: NEG
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 3
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 3
49289: PUSH
49290: LD_INT 1
49292: NEG
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 4
49300: PUSH
49301: LD_INT 0
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 4
49310: PUSH
49311: LD_INT 1
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 3
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 2
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 2
49340: PUSH
49341: LD_INT 1
49343: NEG
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 2
49351: PUSH
49352: LD_INT 2
49354: NEG
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 4
49362: PUSH
49363: LD_INT 2
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 4
49372: PUSH
49373: LD_INT 4
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 4
49382: PUSH
49383: LD_INT 3
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 5
49392: PUSH
49393: LD_INT 4
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 5
49402: PUSH
49403: LD_INT 5
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 4
49412: PUSH
49413: LD_INT 5
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 3
49422: PUSH
49423: LD_INT 4
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 3
49432: PUSH
49433: LD_INT 3
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 5
49442: PUSH
49443: LD_INT 3
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 3
49452: PUSH
49453: LD_INT 5
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
49507: LD_ADDR_VAR 0 33
49511: PUSH
49512: LD_INT 4
49514: NEG
49515: PUSH
49516: LD_INT 4
49518: NEG
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 4
49526: NEG
49527: PUSH
49528: LD_INT 5
49530: NEG
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 3
49538: NEG
49539: PUSH
49540: LD_INT 4
49542: NEG
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 3
49550: NEG
49551: PUSH
49552: LD_INT 3
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 4
49562: NEG
49563: PUSH
49564: LD_INT 3
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 5
49574: NEG
49575: PUSH
49576: LD_INT 4
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 5
49586: NEG
49587: PUSH
49588: LD_INT 5
49590: NEG
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 3
49598: NEG
49599: PUSH
49600: LD_INT 5
49602: NEG
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 5
49610: NEG
49611: PUSH
49612: LD_INT 3
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: LD_INT 3
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: LD_INT 4
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: LD_INT 3
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: LD_INT 2
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 0
49666: PUSH
49667: LD_INT 2
49669: NEG
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 1
49677: NEG
49678: PUSH
49679: LD_INT 3
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 1
49689: NEG
49690: PUSH
49691: LD_INT 4
49693: NEG
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 2
49701: PUSH
49702: LD_INT 2
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 2
49712: NEG
49713: PUSH
49714: LD_INT 4
49716: NEG
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 4
49724: PUSH
49725: LD_INT 0
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 4
49734: PUSH
49735: LD_INT 1
49737: NEG
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 5
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 5
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 4
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 3
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 3
49785: PUSH
49786: LD_INT 1
49788: NEG
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 3
49796: PUSH
49797: LD_INT 2
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 5
49807: PUSH
49808: LD_INT 2
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 3
49817: PUSH
49818: LD_INT 3
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 3
49827: PUSH
49828: LD_INT 2
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 4
49837: PUSH
49838: LD_INT 3
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 4
49847: PUSH
49848: LD_INT 4
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 3
49857: PUSH
49858: LD_INT 4
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 2
49867: PUSH
49868: LD_INT 3
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 2
49877: PUSH
49878: LD_INT 2
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 4
49887: PUSH
49888: LD_INT 2
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 2
49897: PUSH
49898: LD_INT 4
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: LD_INT 4
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: LD_INT 3
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 1
49927: PUSH
49928: LD_INT 4
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 1
49937: PUSH
49938: LD_INT 5
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: LD_INT 5
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: NEG
49958: PUSH
49959: LD_INT 4
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 1
49968: NEG
49969: PUSH
49970: LD_INT 3
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 2
49979: PUSH
49980: LD_INT 5
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 2
49989: NEG
49990: PUSH
49991: LD_INT 3
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
50045: LD_ADDR_VAR 0 34
50049: PUSH
50050: LD_INT 0
50052: PUSH
50053: LD_INT 4
50055: NEG
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 0
50063: PUSH
50064: LD_INT 5
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: PUSH
50075: LD_INT 4
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: LD_INT 3
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: LD_INT 3
50099: NEG
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 1
50107: NEG
50108: PUSH
50109: LD_INT 4
50111: NEG
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: LD_INT 5
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 2
50131: PUSH
50132: LD_INT 3
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 2
50142: NEG
50143: PUSH
50144: LD_INT 5
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 3
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 3
50164: PUSH
50165: LD_INT 1
50167: NEG
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 4
50175: PUSH
50176: LD_INT 0
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 4
50185: PUSH
50186: LD_INT 1
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 3
50195: PUSH
50196: LD_INT 1
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 2
50205: PUSH
50206: LD_INT 0
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 2
50215: PUSH
50216: LD_INT 1
50218: NEG
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 2
50226: PUSH
50227: LD_INT 2
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 4
50237: PUSH
50238: LD_INT 2
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 4
50247: PUSH
50248: LD_INT 4
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 4
50257: PUSH
50258: LD_INT 3
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 5
50267: PUSH
50268: LD_INT 4
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 5
50277: PUSH
50278: LD_INT 5
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 4
50287: PUSH
50288: LD_INT 5
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 3
50297: PUSH
50298: LD_INT 4
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 3
50307: PUSH
50308: LD_INT 3
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 5
50317: PUSH
50318: LD_INT 3
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 3
50327: PUSH
50328: LD_INT 5
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: LD_INT 3
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: LD_INT 2
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 1
50357: PUSH
50358: LD_INT 3
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: LD_INT 4
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: LD_INT 4
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 1
50387: NEG
50388: PUSH
50389: LD_INT 3
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 1
50398: NEG
50399: PUSH
50400: LD_INT 2
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 2
50409: PUSH
50410: LD_INT 4
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 2
50419: NEG
50420: PUSH
50421: LD_INT 2
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 4
50430: NEG
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 4
50441: NEG
50442: PUSH
50443: LD_INT 1
50445: NEG
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 3
50453: NEG
50454: PUSH
50455: LD_INT 0
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 3
50464: NEG
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 4
50475: NEG
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 5
50486: NEG
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 5
50497: NEG
50498: PUSH
50499: LD_INT 1
50501: NEG
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 5
50509: NEG
50510: PUSH
50511: LD_INT 2
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 3
50521: NEG
50522: PUSH
50523: LD_INT 2
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: ST_TO_ADDR
// end ; end ;
50577: GO 50580
50579: POP
// case btype of b_depot , b_warehouse :
50580: LD_VAR 0 1
50584: PUSH
50585: LD_INT 0
50587: DOUBLE
50588: EQUAL
50589: IFTRUE 50599
50591: LD_INT 1
50593: DOUBLE
50594: EQUAL
50595: IFTRUE 50599
50597: GO 50800
50599: POP
// case nation of nation_american :
50600: LD_VAR 0 5
50604: PUSH
50605: LD_INT 1
50607: DOUBLE
50608: EQUAL
50609: IFTRUE 50613
50611: GO 50669
50613: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
50614: LD_ADDR_VAR 0 9
50618: PUSH
50619: LD_VAR 0 11
50623: PUSH
50624: LD_VAR 0 12
50628: PUSH
50629: LD_VAR 0 13
50633: PUSH
50634: LD_VAR 0 14
50638: PUSH
50639: LD_VAR 0 15
50643: PUSH
50644: LD_VAR 0 16
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: PUSH
50657: LD_VAR 0 4
50661: PUSH
50662: LD_INT 1
50664: PLUS
50665: ARRAY
50666: ST_TO_ADDR
50667: GO 50798
50669: LD_INT 2
50671: DOUBLE
50672: EQUAL
50673: IFTRUE 50677
50675: GO 50733
50677: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
50678: LD_ADDR_VAR 0 9
50682: PUSH
50683: LD_VAR 0 17
50687: PUSH
50688: LD_VAR 0 18
50692: PUSH
50693: LD_VAR 0 19
50697: PUSH
50698: LD_VAR 0 20
50702: PUSH
50703: LD_VAR 0 21
50707: PUSH
50708: LD_VAR 0 22
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: PUSH
50721: LD_VAR 0 4
50725: PUSH
50726: LD_INT 1
50728: PLUS
50729: ARRAY
50730: ST_TO_ADDR
50731: GO 50798
50733: LD_INT 3
50735: DOUBLE
50736: EQUAL
50737: IFTRUE 50741
50739: GO 50797
50741: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
50742: LD_ADDR_VAR 0 9
50746: PUSH
50747: LD_VAR 0 23
50751: PUSH
50752: LD_VAR 0 24
50756: PUSH
50757: LD_VAR 0 25
50761: PUSH
50762: LD_VAR 0 26
50766: PUSH
50767: LD_VAR 0 27
50771: PUSH
50772: LD_VAR 0 28
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: PUSH
50785: LD_VAR 0 4
50789: PUSH
50790: LD_INT 1
50792: PLUS
50793: ARRAY
50794: ST_TO_ADDR
50795: GO 50798
50797: POP
50798: GO 51353
50800: LD_INT 2
50802: DOUBLE
50803: EQUAL
50804: IFTRUE 50814
50806: LD_INT 3
50808: DOUBLE
50809: EQUAL
50810: IFTRUE 50814
50812: GO 50870
50814: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
50815: LD_ADDR_VAR 0 9
50819: PUSH
50820: LD_VAR 0 29
50824: PUSH
50825: LD_VAR 0 30
50829: PUSH
50830: LD_VAR 0 31
50834: PUSH
50835: LD_VAR 0 32
50839: PUSH
50840: LD_VAR 0 33
50844: PUSH
50845: LD_VAR 0 34
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: PUSH
50858: LD_VAR 0 4
50862: PUSH
50863: LD_INT 1
50865: PLUS
50866: ARRAY
50867: ST_TO_ADDR
50868: GO 51353
50870: LD_INT 16
50872: DOUBLE
50873: EQUAL
50874: IFTRUE 50932
50876: LD_INT 17
50878: DOUBLE
50879: EQUAL
50880: IFTRUE 50932
50882: LD_INT 18
50884: DOUBLE
50885: EQUAL
50886: IFTRUE 50932
50888: LD_INT 19
50890: DOUBLE
50891: EQUAL
50892: IFTRUE 50932
50894: LD_INT 22
50896: DOUBLE
50897: EQUAL
50898: IFTRUE 50932
50900: LD_INT 20
50902: DOUBLE
50903: EQUAL
50904: IFTRUE 50932
50906: LD_INT 21
50908: DOUBLE
50909: EQUAL
50910: IFTRUE 50932
50912: LD_INT 23
50914: DOUBLE
50915: EQUAL
50916: IFTRUE 50932
50918: LD_INT 24
50920: DOUBLE
50921: EQUAL
50922: IFTRUE 50932
50924: LD_INT 25
50926: DOUBLE
50927: EQUAL
50928: IFTRUE 50932
50930: GO 50988
50932: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
50933: LD_ADDR_VAR 0 9
50937: PUSH
50938: LD_VAR 0 35
50942: PUSH
50943: LD_VAR 0 36
50947: PUSH
50948: LD_VAR 0 37
50952: PUSH
50953: LD_VAR 0 38
50957: PUSH
50958: LD_VAR 0 39
50962: PUSH
50963: LD_VAR 0 40
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: PUSH
50976: LD_VAR 0 4
50980: PUSH
50981: LD_INT 1
50983: PLUS
50984: ARRAY
50985: ST_TO_ADDR
50986: GO 51353
50988: LD_INT 6
50990: DOUBLE
50991: EQUAL
50992: IFTRUE 51044
50994: LD_INT 7
50996: DOUBLE
50997: EQUAL
50998: IFTRUE 51044
51000: LD_INT 8
51002: DOUBLE
51003: EQUAL
51004: IFTRUE 51044
51006: LD_INT 13
51008: DOUBLE
51009: EQUAL
51010: IFTRUE 51044
51012: LD_INT 12
51014: DOUBLE
51015: EQUAL
51016: IFTRUE 51044
51018: LD_INT 15
51020: DOUBLE
51021: EQUAL
51022: IFTRUE 51044
51024: LD_INT 11
51026: DOUBLE
51027: EQUAL
51028: IFTRUE 51044
51030: LD_INT 14
51032: DOUBLE
51033: EQUAL
51034: IFTRUE 51044
51036: LD_INT 10
51038: DOUBLE
51039: EQUAL
51040: IFTRUE 51044
51042: GO 51100
51044: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
51045: LD_ADDR_VAR 0 9
51049: PUSH
51050: LD_VAR 0 41
51054: PUSH
51055: LD_VAR 0 42
51059: PUSH
51060: LD_VAR 0 43
51064: PUSH
51065: LD_VAR 0 44
51069: PUSH
51070: LD_VAR 0 45
51074: PUSH
51075: LD_VAR 0 46
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: PUSH
51088: LD_VAR 0 4
51092: PUSH
51093: LD_INT 1
51095: PLUS
51096: ARRAY
51097: ST_TO_ADDR
51098: GO 51353
51100: LD_INT 36
51102: DOUBLE
51103: EQUAL
51104: IFTRUE 51108
51106: GO 51164
51108: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
51109: LD_ADDR_VAR 0 9
51113: PUSH
51114: LD_VAR 0 47
51118: PUSH
51119: LD_VAR 0 48
51123: PUSH
51124: LD_VAR 0 49
51128: PUSH
51129: LD_VAR 0 50
51133: PUSH
51134: LD_VAR 0 51
51138: PUSH
51139: LD_VAR 0 52
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: PUSH
51152: LD_VAR 0 4
51156: PUSH
51157: LD_INT 1
51159: PLUS
51160: ARRAY
51161: ST_TO_ADDR
51162: GO 51353
51164: LD_INT 4
51166: DOUBLE
51167: EQUAL
51168: IFTRUE 51190
51170: LD_INT 5
51172: DOUBLE
51173: EQUAL
51174: IFTRUE 51190
51176: LD_INT 34
51178: DOUBLE
51179: EQUAL
51180: IFTRUE 51190
51182: LD_INT 37
51184: DOUBLE
51185: EQUAL
51186: IFTRUE 51190
51188: GO 51246
51190: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
51191: LD_ADDR_VAR 0 9
51195: PUSH
51196: LD_VAR 0 53
51200: PUSH
51201: LD_VAR 0 54
51205: PUSH
51206: LD_VAR 0 55
51210: PUSH
51211: LD_VAR 0 56
51215: PUSH
51216: LD_VAR 0 57
51220: PUSH
51221: LD_VAR 0 58
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: PUSH
51234: LD_VAR 0 4
51238: PUSH
51239: LD_INT 1
51241: PLUS
51242: ARRAY
51243: ST_TO_ADDR
51244: GO 51353
51246: LD_INT 31
51248: DOUBLE
51249: EQUAL
51250: IFTRUE 51296
51252: LD_INT 32
51254: DOUBLE
51255: EQUAL
51256: IFTRUE 51296
51258: LD_INT 33
51260: DOUBLE
51261: EQUAL
51262: IFTRUE 51296
51264: LD_INT 27
51266: DOUBLE
51267: EQUAL
51268: IFTRUE 51296
51270: LD_INT 26
51272: DOUBLE
51273: EQUAL
51274: IFTRUE 51296
51276: LD_INT 28
51278: DOUBLE
51279: EQUAL
51280: IFTRUE 51296
51282: LD_INT 29
51284: DOUBLE
51285: EQUAL
51286: IFTRUE 51296
51288: LD_INT 30
51290: DOUBLE
51291: EQUAL
51292: IFTRUE 51296
51294: GO 51352
51296: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
51297: LD_ADDR_VAR 0 9
51301: PUSH
51302: LD_VAR 0 59
51306: PUSH
51307: LD_VAR 0 60
51311: PUSH
51312: LD_VAR 0 61
51316: PUSH
51317: LD_VAR 0 62
51321: PUSH
51322: LD_VAR 0 63
51326: PUSH
51327: LD_VAR 0 64
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: PUSH
51340: LD_VAR 0 4
51344: PUSH
51345: LD_INT 1
51347: PLUS
51348: ARRAY
51349: ST_TO_ADDR
51350: GO 51353
51352: POP
// temp_list2 = [ ] ;
51353: LD_ADDR_VAR 0 10
51357: PUSH
51358: EMPTY
51359: ST_TO_ADDR
// for i in temp_list do
51360: LD_ADDR_VAR 0 8
51364: PUSH
51365: LD_VAR 0 9
51369: PUSH
51370: FOR_IN
51371: IFFALSE 51423
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
51373: LD_ADDR_VAR 0 10
51377: PUSH
51378: LD_VAR 0 10
51382: PUSH
51383: LD_VAR 0 8
51387: PUSH
51388: LD_INT 1
51390: ARRAY
51391: PUSH
51392: LD_VAR 0 2
51396: PLUS
51397: PUSH
51398: LD_VAR 0 8
51402: PUSH
51403: LD_INT 2
51405: ARRAY
51406: PUSH
51407: LD_VAR 0 3
51411: PLUS
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: EMPTY
51418: LIST
51419: ADD
51420: ST_TO_ADDR
51421: GO 51370
51423: POP
51424: POP
// result = temp_list2 ;
51425: LD_ADDR_VAR 0 7
51429: PUSH
51430: LD_VAR 0 10
51434: ST_TO_ADDR
// end ;
51435: LD_VAR 0 7
51439: RET
// export function EnemyInRange ( unit , dist ) ; begin
51440: LD_INT 0
51442: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
51443: LD_ADDR_VAR 0 3
51447: PUSH
51448: LD_VAR 0 1
51452: PPUSH
51453: CALL_OW 255
51457: PPUSH
51458: LD_VAR 0 1
51462: PPUSH
51463: CALL_OW 250
51467: PPUSH
51468: LD_VAR 0 1
51472: PPUSH
51473: CALL_OW 251
51477: PPUSH
51478: LD_VAR 0 2
51482: PPUSH
51483: CALL 25211 0 4
51487: PUSH
51488: LD_INT 4
51490: ARRAY
51491: ST_TO_ADDR
// end ;
51492: LD_VAR 0 3
51496: RET
// export function PlayerSeeMe ( unit ) ; begin
51497: LD_INT 0
51499: PPUSH
// result := See ( your_side , unit ) ;
51500: LD_ADDR_VAR 0 2
51504: PUSH
51505: LD_OWVAR 2
51509: PPUSH
51510: LD_VAR 0 1
51514: PPUSH
51515: CALL_OW 292
51519: ST_TO_ADDR
// end ;
51520: LD_VAR 0 2
51524: RET
// export function ReverseDir ( unit ) ; begin
51525: LD_INT 0
51527: PPUSH
// if not unit then
51528: LD_VAR 0 1
51532: NOT
51533: IFFALSE 51537
// exit ;
51535: GO 51560
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
51537: LD_ADDR_VAR 0 2
51541: PUSH
51542: LD_VAR 0 1
51546: PPUSH
51547: CALL_OW 254
51551: PUSH
51552: LD_INT 3
51554: PLUS
51555: PUSH
51556: LD_INT 6
51558: MOD
51559: ST_TO_ADDR
// end ;
51560: LD_VAR 0 2
51564: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
51565: LD_INT 0
51567: PPUSH
51568: PPUSH
51569: PPUSH
51570: PPUSH
51571: PPUSH
// if not hexes then
51572: LD_VAR 0 2
51576: NOT
51577: IFFALSE 51581
// exit ;
51579: GO 51729
// dist := 9999 ;
51581: LD_ADDR_VAR 0 5
51585: PUSH
51586: LD_INT 9999
51588: ST_TO_ADDR
// for i = 1 to hexes do
51589: LD_ADDR_VAR 0 4
51593: PUSH
51594: DOUBLE
51595: LD_INT 1
51597: DEC
51598: ST_TO_ADDR
51599: LD_VAR 0 2
51603: PUSH
51604: FOR_TO
51605: IFFALSE 51717
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
51607: LD_VAR 0 1
51611: PPUSH
51612: LD_VAR 0 2
51616: PUSH
51617: LD_VAR 0 4
51621: ARRAY
51622: PUSH
51623: LD_INT 1
51625: ARRAY
51626: PPUSH
51627: LD_VAR 0 2
51631: PUSH
51632: LD_VAR 0 4
51636: ARRAY
51637: PUSH
51638: LD_INT 2
51640: ARRAY
51641: PPUSH
51642: CALL_OW 297
51646: PUSH
51647: LD_VAR 0 5
51651: LESS
51652: IFFALSE 51715
// begin hex := hexes [ i ] ;
51654: LD_ADDR_VAR 0 7
51658: PUSH
51659: LD_VAR 0 2
51663: PUSH
51664: LD_VAR 0 4
51668: ARRAY
51669: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51670: LD_ADDR_VAR 0 5
51674: PUSH
51675: LD_VAR 0 1
51679: PPUSH
51680: LD_VAR 0 2
51684: PUSH
51685: LD_VAR 0 4
51689: ARRAY
51690: PUSH
51691: LD_INT 1
51693: ARRAY
51694: PPUSH
51695: LD_VAR 0 2
51699: PUSH
51700: LD_VAR 0 4
51704: ARRAY
51705: PUSH
51706: LD_INT 2
51708: ARRAY
51709: PPUSH
51710: CALL_OW 297
51714: ST_TO_ADDR
// end ; end ;
51715: GO 51604
51717: POP
51718: POP
// result := hex ;
51719: LD_ADDR_VAR 0 3
51723: PUSH
51724: LD_VAR 0 7
51728: ST_TO_ADDR
// end ;
51729: LD_VAR 0 3
51733: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
51734: LD_INT 0
51736: PPUSH
51737: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
51738: LD_VAR 0 1
51742: NOT
51743: PUSH
51744: LD_VAR 0 1
51748: PUSH
51749: LD_INT 21
51751: PUSH
51752: LD_INT 2
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 23
51761: PUSH
51762: LD_INT 2
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PPUSH
51773: CALL_OW 69
51777: IN
51778: NOT
51779: OR
51780: IFFALSE 51784
// exit ;
51782: GO 51831
// for i = 1 to 3 do
51784: LD_ADDR_VAR 0 3
51788: PUSH
51789: DOUBLE
51790: LD_INT 1
51792: DEC
51793: ST_TO_ADDR
51794: LD_INT 3
51796: PUSH
51797: FOR_TO
51798: IFFALSE 51829
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
51800: LD_VAR 0 1
51804: PPUSH
51805: CALL_OW 250
51809: PPUSH
51810: LD_VAR 0 1
51814: PPUSH
51815: CALL_OW 251
51819: PPUSH
51820: LD_INT 1
51822: PPUSH
51823: CALL_OW 453
51827: GO 51797
51829: POP
51830: POP
// end ;
51831: LD_VAR 0 2
51835: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
51836: LD_INT 0
51838: PPUSH
51839: PPUSH
51840: PPUSH
51841: PPUSH
51842: PPUSH
51843: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
51844: LD_VAR 0 1
51848: NOT
51849: PUSH
51850: LD_VAR 0 2
51854: NOT
51855: OR
51856: PUSH
51857: LD_VAR 0 1
51861: PPUSH
51862: CALL_OW 314
51866: OR
51867: IFFALSE 51871
// exit ;
51869: GO 52312
// x := GetX ( enemy_unit ) ;
51871: LD_ADDR_VAR 0 7
51875: PUSH
51876: LD_VAR 0 2
51880: PPUSH
51881: CALL_OW 250
51885: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
51886: LD_ADDR_VAR 0 8
51890: PUSH
51891: LD_VAR 0 2
51895: PPUSH
51896: CALL_OW 251
51900: ST_TO_ADDR
// if not x or not y then
51901: LD_VAR 0 7
51905: NOT
51906: PUSH
51907: LD_VAR 0 8
51911: NOT
51912: OR
51913: IFFALSE 51917
// exit ;
51915: GO 52312
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
51917: LD_ADDR_VAR 0 6
51921: PUSH
51922: LD_VAR 0 7
51926: PPUSH
51927: LD_INT 0
51929: PPUSH
51930: LD_INT 4
51932: PPUSH
51933: CALL_OW 272
51937: PUSH
51938: LD_VAR 0 8
51942: PPUSH
51943: LD_INT 0
51945: PPUSH
51946: LD_INT 4
51948: PPUSH
51949: CALL_OW 273
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_VAR 0 7
51962: PPUSH
51963: LD_INT 1
51965: PPUSH
51966: LD_INT 4
51968: PPUSH
51969: CALL_OW 272
51973: PUSH
51974: LD_VAR 0 8
51978: PPUSH
51979: LD_INT 1
51981: PPUSH
51982: LD_INT 4
51984: PPUSH
51985: CALL_OW 273
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_VAR 0 7
51998: PPUSH
51999: LD_INT 2
52001: PPUSH
52002: LD_INT 4
52004: PPUSH
52005: CALL_OW 272
52009: PUSH
52010: LD_VAR 0 8
52014: PPUSH
52015: LD_INT 2
52017: PPUSH
52018: LD_INT 4
52020: PPUSH
52021: CALL_OW 273
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_VAR 0 7
52034: PPUSH
52035: LD_INT 3
52037: PPUSH
52038: LD_INT 4
52040: PPUSH
52041: CALL_OW 272
52045: PUSH
52046: LD_VAR 0 8
52050: PPUSH
52051: LD_INT 3
52053: PPUSH
52054: LD_INT 4
52056: PPUSH
52057: CALL_OW 273
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_VAR 0 7
52070: PPUSH
52071: LD_INT 4
52073: PPUSH
52074: LD_INT 4
52076: PPUSH
52077: CALL_OW 272
52081: PUSH
52082: LD_VAR 0 8
52086: PPUSH
52087: LD_INT 4
52089: PPUSH
52090: LD_INT 4
52092: PPUSH
52093: CALL_OW 273
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_VAR 0 7
52106: PPUSH
52107: LD_INT 5
52109: PPUSH
52110: LD_INT 4
52112: PPUSH
52113: CALL_OW 272
52117: PUSH
52118: LD_VAR 0 8
52122: PPUSH
52123: LD_INT 5
52125: PPUSH
52126: LD_INT 4
52128: PPUSH
52129: CALL_OW 273
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: ST_TO_ADDR
// for i = tmp downto 1 do
52146: LD_ADDR_VAR 0 4
52150: PUSH
52151: DOUBLE
52152: LD_VAR 0 6
52156: INC
52157: ST_TO_ADDR
52158: LD_INT 1
52160: PUSH
52161: FOR_DOWNTO
52162: IFFALSE 52263
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
52164: LD_VAR 0 6
52168: PUSH
52169: LD_VAR 0 4
52173: ARRAY
52174: PUSH
52175: LD_INT 1
52177: ARRAY
52178: PPUSH
52179: LD_VAR 0 6
52183: PUSH
52184: LD_VAR 0 4
52188: ARRAY
52189: PUSH
52190: LD_INT 2
52192: ARRAY
52193: PPUSH
52194: CALL_OW 488
52198: NOT
52199: PUSH
52200: LD_VAR 0 6
52204: PUSH
52205: LD_VAR 0 4
52209: ARRAY
52210: PUSH
52211: LD_INT 1
52213: ARRAY
52214: PPUSH
52215: LD_VAR 0 6
52219: PUSH
52220: LD_VAR 0 4
52224: ARRAY
52225: PUSH
52226: LD_INT 2
52228: ARRAY
52229: PPUSH
52230: CALL_OW 428
52234: PUSH
52235: LD_INT 0
52237: NONEQUAL
52238: OR
52239: IFFALSE 52261
// tmp := Delete ( tmp , i ) ;
52241: LD_ADDR_VAR 0 6
52245: PUSH
52246: LD_VAR 0 6
52250: PPUSH
52251: LD_VAR 0 4
52255: PPUSH
52256: CALL_OW 3
52260: ST_TO_ADDR
52261: GO 52161
52263: POP
52264: POP
// j := GetClosestHex ( unit , tmp ) ;
52265: LD_ADDR_VAR 0 5
52269: PUSH
52270: LD_VAR 0 1
52274: PPUSH
52275: LD_VAR 0 6
52279: PPUSH
52280: CALL 51565 0 2
52284: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
52285: LD_VAR 0 1
52289: PPUSH
52290: LD_VAR 0 5
52294: PUSH
52295: LD_INT 1
52297: ARRAY
52298: PPUSH
52299: LD_VAR 0 5
52303: PUSH
52304: LD_INT 2
52306: ARRAY
52307: PPUSH
52308: CALL_OW 111
// end ;
52312: LD_VAR 0 3
52316: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
52317: LD_INT 0
52319: PPUSH
52320: PPUSH
52321: PPUSH
// uc_side = 0 ;
52322: LD_ADDR_OWVAR 20
52326: PUSH
52327: LD_INT 0
52329: ST_TO_ADDR
// uc_nation = 0 ;
52330: LD_ADDR_OWVAR 21
52334: PUSH
52335: LD_INT 0
52337: ST_TO_ADDR
// InitHc_All ( ) ;
52338: CALL_OW 584
// InitVc ;
52342: CALL_OW 20
// if mastodonts then
52346: LD_VAR 0 6
52350: IFFALSE 52417
// for i = 1 to mastodonts do
52352: LD_ADDR_VAR 0 11
52356: PUSH
52357: DOUBLE
52358: LD_INT 1
52360: DEC
52361: ST_TO_ADDR
52362: LD_VAR 0 6
52366: PUSH
52367: FOR_TO
52368: IFFALSE 52415
// begin vc_chassis := 31 ;
52370: LD_ADDR_OWVAR 37
52374: PUSH
52375: LD_INT 31
52377: ST_TO_ADDR
// vc_control := control_rider ;
52378: LD_ADDR_OWVAR 38
52382: PUSH
52383: LD_INT 4
52385: ST_TO_ADDR
// animal := CreateVehicle ;
52386: LD_ADDR_VAR 0 12
52390: PUSH
52391: CALL_OW 45
52395: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52396: LD_VAR 0 12
52400: PPUSH
52401: LD_VAR 0 8
52405: PPUSH
52406: LD_INT 0
52408: PPUSH
52409: CALL 54605 0 3
// end ;
52413: GO 52367
52415: POP
52416: POP
// if horses then
52417: LD_VAR 0 5
52421: IFFALSE 52488
// for i = 1 to horses do
52423: LD_ADDR_VAR 0 11
52427: PUSH
52428: DOUBLE
52429: LD_INT 1
52431: DEC
52432: ST_TO_ADDR
52433: LD_VAR 0 5
52437: PUSH
52438: FOR_TO
52439: IFFALSE 52486
// begin hc_class := 21 ;
52441: LD_ADDR_OWVAR 28
52445: PUSH
52446: LD_INT 21
52448: ST_TO_ADDR
// hc_gallery :=  ;
52449: LD_ADDR_OWVAR 33
52453: PUSH
52454: LD_STRING 
52456: ST_TO_ADDR
// animal := CreateHuman ;
52457: LD_ADDR_VAR 0 12
52461: PUSH
52462: CALL_OW 44
52466: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52467: LD_VAR 0 12
52471: PPUSH
52472: LD_VAR 0 8
52476: PPUSH
52477: LD_INT 0
52479: PPUSH
52480: CALL 54605 0 3
// end ;
52484: GO 52438
52486: POP
52487: POP
// if birds then
52488: LD_VAR 0 1
52492: IFFALSE 52559
// for i = 1 to birds do
52494: LD_ADDR_VAR 0 11
52498: PUSH
52499: DOUBLE
52500: LD_INT 1
52502: DEC
52503: ST_TO_ADDR
52504: LD_VAR 0 1
52508: PUSH
52509: FOR_TO
52510: IFFALSE 52557
// begin hc_class = 18 ;
52512: LD_ADDR_OWVAR 28
52516: PUSH
52517: LD_INT 18
52519: ST_TO_ADDR
// hc_gallery =  ;
52520: LD_ADDR_OWVAR 33
52524: PUSH
52525: LD_STRING 
52527: ST_TO_ADDR
// animal := CreateHuman ;
52528: LD_ADDR_VAR 0 12
52532: PUSH
52533: CALL_OW 44
52537: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52538: LD_VAR 0 12
52542: PPUSH
52543: LD_VAR 0 8
52547: PPUSH
52548: LD_INT 0
52550: PPUSH
52551: CALL 54605 0 3
// end ;
52555: GO 52509
52557: POP
52558: POP
// if tigers then
52559: LD_VAR 0 2
52563: IFFALSE 52647
// for i = 1 to tigers do
52565: LD_ADDR_VAR 0 11
52569: PUSH
52570: DOUBLE
52571: LD_INT 1
52573: DEC
52574: ST_TO_ADDR
52575: LD_VAR 0 2
52579: PUSH
52580: FOR_TO
52581: IFFALSE 52645
// begin hc_class = class_tiger ;
52583: LD_ADDR_OWVAR 28
52587: PUSH
52588: LD_INT 14
52590: ST_TO_ADDR
// hc_gallery =  ;
52591: LD_ADDR_OWVAR 33
52595: PUSH
52596: LD_STRING 
52598: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52599: LD_ADDR_OWVAR 35
52603: PUSH
52604: LD_INT 7
52606: NEG
52607: PPUSH
52608: LD_INT 7
52610: PPUSH
52611: CALL_OW 12
52615: ST_TO_ADDR
// animal := CreateHuman ;
52616: LD_ADDR_VAR 0 12
52620: PUSH
52621: CALL_OW 44
52625: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52626: LD_VAR 0 12
52630: PPUSH
52631: LD_VAR 0 8
52635: PPUSH
52636: LD_INT 0
52638: PPUSH
52639: CALL 54605 0 3
// end ;
52643: GO 52580
52645: POP
52646: POP
// if apemans then
52647: LD_VAR 0 3
52651: IFFALSE 52774
// for i = 1 to apemans do
52653: LD_ADDR_VAR 0 11
52657: PUSH
52658: DOUBLE
52659: LD_INT 1
52661: DEC
52662: ST_TO_ADDR
52663: LD_VAR 0 3
52667: PUSH
52668: FOR_TO
52669: IFFALSE 52772
// begin hc_class = class_apeman ;
52671: LD_ADDR_OWVAR 28
52675: PUSH
52676: LD_INT 12
52678: ST_TO_ADDR
// hc_gallery =  ;
52679: LD_ADDR_OWVAR 33
52683: PUSH
52684: LD_STRING 
52686: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
52687: LD_ADDR_OWVAR 35
52691: PUSH
52692: LD_INT 5
52694: NEG
52695: PPUSH
52696: LD_INT 5
52698: PPUSH
52699: CALL_OW 12
52703: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52704: LD_ADDR_OWVAR 31
52708: PUSH
52709: LD_INT 1
52711: PPUSH
52712: LD_INT 3
52714: PPUSH
52715: CALL_OW 12
52719: PUSH
52720: LD_INT 1
52722: PPUSH
52723: LD_INT 3
52725: PPUSH
52726: CALL_OW 12
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: LD_INT 0
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: ST_TO_ADDR
// animal := CreateHuman ;
52743: LD_ADDR_VAR 0 12
52747: PUSH
52748: CALL_OW 44
52752: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52753: LD_VAR 0 12
52757: PPUSH
52758: LD_VAR 0 8
52762: PPUSH
52763: LD_INT 0
52765: PPUSH
52766: CALL 54605 0 3
// end ;
52770: GO 52668
52772: POP
52773: POP
// if enchidnas then
52774: LD_VAR 0 4
52778: IFFALSE 52845
// for i = 1 to enchidnas do
52780: LD_ADDR_VAR 0 11
52784: PUSH
52785: DOUBLE
52786: LD_INT 1
52788: DEC
52789: ST_TO_ADDR
52790: LD_VAR 0 4
52794: PUSH
52795: FOR_TO
52796: IFFALSE 52843
// begin hc_class = 13 ;
52798: LD_ADDR_OWVAR 28
52802: PUSH
52803: LD_INT 13
52805: ST_TO_ADDR
// hc_gallery =  ;
52806: LD_ADDR_OWVAR 33
52810: PUSH
52811: LD_STRING 
52813: ST_TO_ADDR
// animal := CreateHuman ;
52814: LD_ADDR_VAR 0 12
52818: PUSH
52819: CALL_OW 44
52823: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52824: LD_VAR 0 12
52828: PPUSH
52829: LD_VAR 0 8
52833: PPUSH
52834: LD_INT 0
52836: PPUSH
52837: CALL 54605 0 3
// end ;
52841: GO 52795
52843: POP
52844: POP
// if fishes then
52845: LD_VAR 0 7
52849: IFFALSE 52916
// for i = 1 to fishes do
52851: LD_ADDR_VAR 0 11
52855: PUSH
52856: DOUBLE
52857: LD_INT 1
52859: DEC
52860: ST_TO_ADDR
52861: LD_VAR 0 7
52865: PUSH
52866: FOR_TO
52867: IFFALSE 52914
// begin hc_class = 20 ;
52869: LD_ADDR_OWVAR 28
52873: PUSH
52874: LD_INT 20
52876: ST_TO_ADDR
// hc_gallery =  ;
52877: LD_ADDR_OWVAR 33
52881: PUSH
52882: LD_STRING 
52884: ST_TO_ADDR
// animal := CreateHuman ;
52885: LD_ADDR_VAR 0 12
52889: PUSH
52890: CALL_OW 44
52894: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
52895: LD_VAR 0 12
52899: PPUSH
52900: LD_VAR 0 9
52904: PPUSH
52905: LD_INT 0
52907: PPUSH
52908: CALL 54605 0 3
// end ;
52912: GO 52866
52914: POP
52915: POP
// end ;
52916: LD_VAR 0 10
52920: RET
// export function WantHeal ( sci , unit ) ; begin
52921: LD_INT 0
52923: PPUSH
// if GetTaskList ( sci ) > 0 then
52924: LD_VAR 0 1
52928: PPUSH
52929: CALL_OW 437
52933: PUSH
52934: LD_INT 0
52936: GREATER
52937: IFFALSE 53007
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52939: LD_VAR 0 1
52943: PPUSH
52944: CALL_OW 437
52948: PUSH
52949: LD_INT 1
52951: ARRAY
52952: PUSH
52953: LD_INT 1
52955: ARRAY
52956: PUSH
52957: LD_STRING l
52959: EQUAL
52960: PUSH
52961: LD_VAR 0 1
52965: PPUSH
52966: CALL_OW 437
52970: PUSH
52971: LD_INT 1
52973: ARRAY
52974: PUSH
52975: LD_INT 4
52977: ARRAY
52978: PUSH
52979: LD_VAR 0 2
52983: EQUAL
52984: AND
52985: IFFALSE 52997
// result := true else
52987: LD_ADDR_VAR 0 3
52991: PUSH
52992: LD_INT 1
52994: ST_TO_ADDR
52995: GO 53005
// result := false ;
52997: LD_ADDR_VAR 0 3
53001: PUSH
53002: LD_INT 0
53004: ST_TO_ADDR
// end else
53005: GO 53015
// result := false ;
53007: LD_ADDR_VAR 0 3
53011: PUSH
53012: LD_INT 0
53014: ST_TO_ADDR
// end ;
53015: LD_VAR 0 3
53019: RET
// export function HealTarget ( sci ) ; begin
53020: LD_INT 0
53022: PPUSH
// if not sci then
53023: LD_VAR 0 1
53027: NOT
53028: IFFALSE 53032
// exit ;
53030: GO 53097
// result := 0 ;
53032: LD_ADDR_VAR 0 2
53036: PUSH
53037: LD_INT 0
53039: ST_TO_ADDR
// if GetTaskList ( sci ) then
53040: LD_VAR 0 1
53044: PPUSH
53045: CALL_OW 437
53049: IFFALSE 53097
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
53051: LD_VAR 0 1
53055: PPUSH
53056: CALL_OW 437
53060: PUSH
53061: LD_INT 1
53063: ARRAY
53064: PUSH
53065: LD_INT 1
53067: ARRAY
53068: PUSH
53069: LD_STRING l
53071: EQUAL
53072: IFFALSE 53097
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
53074: LD_ADDR_VAR 0 2
53078: PUSH
53079: LD_VAR 0 1
53083: PPUSH
53084: CALL_OW 437
53088: PUSH
53089: LD_INT 1
53091: ARRAY
53092: PUSH
53093: LD_INT 4
53095: ARRAY
53096: ST_TO_ADDR
// end ;
53097: LD_VAR 0 2
53101: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
53102: LD_INT 0
53104: PPUSH
53105: PPUSH
53106: PPUSH
53107: PPUSH
// if not base_units then
53108: LD_VAR 0 1
53112: NOT
53113: IFFALSE 53117
// exit ;
53115: GO 53204
// result := false ;
53117: LD_ADDR_VAR 0 2
53121: PUSH
53122: LD_INT 0
53124: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
53125: LD_ADDR_VAR 0 5
53129: PUSH
53130: LD_VAR 0 1
53134: PPUSH
53135: LD_INT 21
53137: PUSH
53138: LD_INT 3
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PPUSH
53145: CALL_OW 72
53149: ST_TO_ADDR
// if not tmp then
53150: LD_VAR 0 5
53154: NOT
53155: IFFALSE 53159
// exit ;
53157: GO 53204
// for i in tmp do
53159: LD_ADDR_VAR 0 3
53163: PUSH
53164: LD_VAR 0 5
53168: PUSH
53169: FOR_IN
53170: IFFALSE 53202
// begin result := EnemyInRange ( i , 22 ) ;
53172: LD_ADDR_VAR 0 2
53176: PUSH
53177: LD_VAR 0 3
53181: PPUSH
53182: LD_INT 22
53184: PPUSH
53185: CALL 51440 0 2
53189: ST_TO_ADDR
// if result then
53190: LD_VAR 0 2
53194: IFFALSE 53200
// exit ;
53196: POP
53197: POP
53198: GO 53204
// end ;
53200: GO 53169
53202: POP
53203: POP
// end ;
53204: LD_VAR 0 2
53208: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
53209: LD_INT 0
53211: PPUSH
53212: PPUSH
// if not units then
53213: LD_VAR 0 1
53217: NOT
53218: IFFALSE 53222
// exit ;
53220: GO 53292
// result := [ ] ;
53222: LD_ADDR_VAR 0 3
53226: PUSH
53227: EMPTY
53228: ST_TO_ADDR
// for i in units do
53229: LD_ADDR_VAR 0 4
53233: PUSH
53234: LD_VAR 0 1
53238: PUSH
53239: FOR_IN
53240: IFFALSE 53290
// if GetTag ( i ) = tag then
53242: LD_VAR 0 4
53246: PPUSH
53247: CALL_OW 110
53251: PUSH
53252: LD_VAR 0 2
53256: EQUAL
53257: IFFALSE 53288
// result := Insert ( result , result + 1 , i ) ;
53259: LD_ADDR_VAR 0 3
53263: PUSH
53264: LD_VAR 0 3
53268: PPUSH
53269: LD_VAR 0 3
53273: PUSH
53274: LD_INT 1
53276: PLUS
53277: PPUSH
53278: LD_VAR 0 4
53282: PPUSH
53283: CALL_OW 2
53287: ST_TO_ADDR
53288: GO 53239
53290: POP
53291: POP
// end ;
53292: LD_VAR 0 3
53296: RET
// export function IsDriver ( un ) ; begin
53297: LD_INT 0
53299: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
53300: LD_ADDR_VAR 0 2
53304: PUSH
53305: LD_VAR 0 1
53309: PUSH
53310: LD_INT 55
53312: PUSH
53313: EMPTY
53314: LIST
53315: PPUSH
53316: CALL_OW 69
53320: IN
53321: ST_TO_ADDR
// end ;
53322: LD_VAR 0 2
53326: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
53327: LD_INT 0
53329: PPUSH
53330: PPUSH
// list := [ ] ;
53331: LD_ADDR_VAR 0 5
53335: PUSH
53336: EMPTY
53337: ST_TO_ADDR
// case d of 0 :
53338: LD_VAR 0 3
53342: PUSH
53343: LD_INT 0
53345: DOUBLE
53346: EQUAL
53347: IFTRUE 53351
53349: GO 53484
53351: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
53352: LD_ADDR_VAR 0 5
53356: PUSH
53357: LD_VAR 0 1
53361: PUSH
53362: LD_INT 4
53364: MINUS
53365: PUSH
53366: LD_VAR 0 2
53370: PUSH
53371: LD_INT 4
53373: MINUS
53374: PUSH
53375: LD_INT 2
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: LIST
53382: PUSH
53383: LD_VAR 0 1
53387: PUSH
53388: LD_INT 3
53390: MINUS
53391: PUSH
53392: LD_VAR 0 2
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: LIST
53404: PUSH
53405: LD_VAR 0 1
53409: PUSH
53410: LD_INT 4
53412: PLUS
53413: PUSH
53414: LD_VAR 0 2
53418: PUSH
53419: LD_INT 4
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: LIST
53426: PUSH
53427: LD_VAR 0 1
53431: PUSH
53432: LD_INT 3
53434: PLUS
53435: PUSH
53436: LD_VAR 0 2
53440: PUSH
53441: LD_INT 3
53443: PLUS
53444: PUSH
53445: LD_INT 5
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: LIST
53452: PUSH
53453: LD_VAR 0 1
53457: PUSH
53458: LD_VAR 0 2
53462: PUSH
53463: LD_INT 4
53465: PLUS
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: LIST
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: ST_TO_ADDR
// end ; 1 :
53482: GO 54182
53484: LD_INT 1
53486: DOUBLE
53487: EQUAL
53488: IFTRUE 53492
53490: GO 53625
53492: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53493: LD_ADDR_VAR 0 5
53497: PUSH
53498: LD_VAR 0 1
53502: PUSH
53503: LD_VAR 0 2
53507: PUSH
53508: LD_INT 4
53510: MINUS
53511: PUSH
53512: LD_INT 3
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: LIST
53519: PUSH
53520: LD_VAR 0 1
53524: PUSH
53525: LD_INT 3
53527: MINUS
53528: PUSH
53529: LD_VAR 0 2
53533: PUSH
53534: LD_INT 3
53536: MINUS
53537: PUSH
53538: LD_INT 2
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: LIST
53545: PUSH
53546: LD_VAR 0 1
53550: PUSH
53551: LD_INT 4
53553: MINUS
53554: PUSH
53555: LD_VAR 0 2
53559: PUSH
53560: LD_INT 1
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: LIST
53567: PUSH
53568: LD_VAR 0 1
53572: PUSH
53573: LD_VAR 0 2
53577: PUSH
53578: LD_INT 3
53580: PLUS
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: LIST
53589: PUSH
53590: LD_VAR 0 1
53594: PUSH
53595: LD_INT 4
53597: PLUS
53598: PUSH
53599: LD_VAR 0 2
53603: PUSH
53604: LD_INT 4
53606: PLUS
53607: PUSH
53608: LD_INT 5
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: LIST
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: ST_TO_ADDR
// end ; 2 :
53623: GO 54182
53625: LD_INT 2
53627: DOUBLE
53628: EQUAL
53629: IFTRUE 53633
53631: GO 53762
53633: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53634: LD_ADDR_VAR 0 5
53638: PUSH
53639: LD_VAR 0 1
53643: PUSH
53644: LD_VAR 0 2
53648: PUSH
53649: LD_INT 3
53651: MINUS
53652: PUSH
53653: LD_INT 3
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: LIST
53660: PUSH
53661: LD_VAR 0 1
53665: PUSH
53666: LD_INT 4
53668: PLUS
53669: PUSH
53670: LD_VAR 0 2
53674: PUSH
53675: LD_INT 4
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: LIST
53682: PUSH
53683: LD_VAR 0 1
53687: PUSH
53688: LD_VAR 0 2
53692: PUSH
53693: LD_INT 4
53695: PLUS
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: LIST
53704: PUSH
53705: LD_VAR 0 1
53709: PUSH
53710: LD_INT 3
53712: MINUS
53713: PUSH
53714: LD_VAR 0 2
53718: PUSH
53719: LD_INT 1
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: LIST
53726: PUSH
53727: LD_VAR 0 1
53731: PUSH
53732: LD_INT 4
53734: MINUS
53735: PUSH
53736: LD_VAR 0 2
53740: PUSH
53741: LD_INT 4
53743: MINUS
53744: PUSH
53745: LD_INT 2
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: LIST
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: ST_TO_ADDR
// end ; 3 :
53760: GO 54182
53762: LD_INT 3
53764: DOUBLE
53765: EQUAL
53766: IFTRUE 53770
53768: GO 53903
53770: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53771: LD_ADDR_VAR 0 5
53775: PUSH
53776: LD_VAR 0 1
53780: PUSH
53781: LD_INT 3
53783: PLUS
53784: PUSH
53785: LD_VAR 0 2
53789: PUSH
53790: LD_INT 4
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: LIST
53797: PUSH
53798: LD_VAR 0 1
53802: PUSH
53803: LD_INT 4
53805: PLUS
53806: PUSH
53807: LD_VAR 0 2
53811: PUSH
53812: LD_INT 4
53814: PLUS
53815: PUSH
53816: LD_INT 5
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: LIST
53823: PUSH
53824: LD_VAR 0 1
53828: PUSH
53829: LD_INT 4
53831: MINUS
53832: PUSH
53833: LD_VAR 0 2
53837: PUSH
53838: LD_INT 1
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: LIST
53845: PUSH
53846: LD_VAR 0 1
53850: PUSH
53851: LD_VAR 0 2
53855: PUSH
53856: LD_INT 4
53858: MINUS
53859: PUSH
53860: LD_INT 3
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: LIST
53867: PUSH
53868: LD_VAR 0 1
53872: PUSH
53873: LD_INT 3
53875: MINUS
53876: PUSH
53877: LD_VAR 0 2
53881: PUSH
53882: LD_INT 3
53884: MINUS
53885: PUSH
53886: LD_INT 2
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: LIST
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: ST_TO_ADDR
// end ; 4 :
53901: GO 54182
53903: LD_INT 4
53905: DOUBLE
53906: EQUAL
53907: IFTRUE 53911
53909: GO 54044
53911: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
53912: LD_ADDR_VAR 0 5
53916: PUSH
53917: LD_VAR 0 1
53921: PUSH
53922: LD_VAR 0 2
53926: PUSH
53927: LD_INT 4
53929: PLUS
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: LIST
53938: PUSH
53939: LD_VAR 0 1
53943: PUSH
53944: LD_INT 3
53946: PLUS
53947: PUSH
53948: LD_VAR 0 2
53952: PUSH
53953: LD_INT 3
53955: PLUS
53956: PUSH
53957: LD_INT 5
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: LIST
53964: PUSH
53965: LD_VAR 0 1
53969: PUSH
53970: LD_INT 4
53972: PLUS
53973: PUSH
53974: LD_VAR 0 2
53978: PUSH
53979: LD_INT 4
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: LIST
53986: PUSH
53987: LD_VAR 0 1
53991: PUSH
53992: LD_VAR 0 2
53996: PUSH
53997: LD_INT 3
53999: MINUS
54000: PUSH
54001: LD_INT 3
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: LIST
54008: PUSH
54009: LD_VAR 0 1
54013: PUSH
54014: LD_INT 4
54016: MINUS
54017: PUSH
54018: LD_VAR 0 2
54022: PUSH
54023: LD_INT 4
54025: MINUS
54026: PUSH
54027: LD_INT 2
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: LIST
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: ST_TO_ADDR
// end ; 5 :
54042: GO 54182
54044: LD_INT 5
54046: DOUBLE
54047: EQUAL
54048: IFTRUE 54052
54050: GO 54181
54052: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
54053: LD_ADDR_VAR 0 5
54057: PUSH
54058: LD_VAR 0 1
54062: PUSH
54063: LD_INT 4
54065: MINUS
54066: PUSH
54067: LD_VAR 0 2
54071: PUSH
54072: LD_INT 1
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: LIST
54079: PUSH
54080: LD_VAR 0 1
54084: PUSH
54085: LD_VAR 0 2
54089: PUSH
54090: LD_INT 4
54092: MINUS
54093: PUSH
54094: LD_INT 3
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: LIST
54101: PUSH
54102: LD_VAR 0 1
54106: PUSH
54107: LD_INT 4
54109: PLUS
54110: PUSH
54111: LD_VAR 0 2
54115: PUSH
54116: LD_INT 4
54118: PLUS
54119: PUSH
54120: LD_INT 5
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: LIST
54127: PUSH
54128: LD_VAR 0 1
54132: PUSH
54133: LD_INT 3
54135: PLUS
54136: PUSH
54137: LD_VAR 0 2
54141: PUSH
54142: LD_INT 4
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: LIST
54149: PUSH
54150: LD_VAR 0 1
54154: PUSH
54155: LD_VAR 0 2
54159: PUSH
54160: LD_INT 3
54162: PLUS
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: LIST
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: ST_TO_ADDR
// end ; end ;
54179: GO 54182
54181: POP
// result := list ;
54182: LD_ADDR_VAR 0 4
54186: PUSH
54187: LD_VAR 0 5
54191: ST_TO_ADDR
// end ;
54192: LD_VAR 0 4
54196: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
54197: LD_INT 0
54199: PPUSH
54200: PPUSH
54201: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
54202: LD_VAR 0 1
54206: NOT
54207: PUSH
54208: LD_VAR 0 2
54212: PUSH
54213: LD_INT 1
54215: PUSH
54216: LD_INT 2
54218: PUSH
54219: LD_INT 3
54221: PUSH
54222: LD_INT 4
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: IN
54231: NOT
54232: OR
54233: IFFALSE 54237
// exit ;
54235: GO 54329
// tmp := [ ] ;
54237: LD_ADDR_VAR 0 5
54241: PUSH
54242: EMPTY
54243: ST_TO_ADDR
// for i in units do
54244: LD_ADDR_VAR 0 4
54248: PUSH
54249: LD_VAR 0 1
54253: PUSH
54254: FOR_IN
54255: IFFALSE 54298
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
54257: LD_ADDR_VAR 0 5
54261: PUSH
54262: LD_VAR 0 5
54266: PPUSH
54267: LD_VAR 0 5
54271: PUSH
54272: LD_INT 1
54274: PLUS
54275: PPUSH
54276: LD_VAR 0 4
54280: PPUSH
54281: LD_VAR 0 2
54285: PPUSH
54286: CALL_OW 259
54290: PPUSH
54291: CALL_OW 2
54295: ST_TO_ADDR
54296: GO 54254
54298: POP
54299: POP
// if not tmp then
54300: LD_VAR 0 5
54304: NOT
54305: IFFALSE 54309
// exit ;
54307: GO 54329
// result := SortListByListDesc ( units , tmp ) ;
54309: LD_ADDR_VAR 0 3
54313: PUSH
54314: LD_VAR 0 1
54318: PPUSH
54319: LD_VAR 0 5
54323: PPUSH
54324: CALL_OW 77
54328: ST_TO_ADDR
// end ;
54329: LD_VAR 0 3
54333: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
54334: LD_INT 0
54336: PPUSH
54337: PPUSH
54338: PPUSH
// result := false ;
54339: LD_ADDR_VAR 0 3
54343: PUSH
54344: LD_INT 0
54346: ST_TO_ADDR
// x := GetX ( building ) ;
54347: LD_ADDR_VAR 0 4
54351: PUSH
54352: LD_VAR 0 2
54356: PPUSH
54357: CALL_OW 250
54361: ST_TO_ADDR
// y := GetY ( building ) ;
54362: LD_ADDR_VAR 0 5
54366: PUSH
54367: LD_VAR 0 2
54371: PPUSH
54372: CALL_OW 251
54376: ST_TO_ADDR
// if not building or not x or not y then
54377: LD_VAR 0 2
54381: NOT
54382: PUSH
54383: LD_VAR 0 4
54387: NOT
54388: OR
54389: PUSH
54390: LD_VAR 0 5
54394: NOT
54395: OR
54396: IFFALSE 54400
// exit ;
54398: GO 54492
// if GetTaskList ( unit ) then
54400: LD_VAR 0 1
54404: PPUSH
54405: CALL_OW 437
54409: IFFALSE 54492
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54411: LD_STRING e
54413: PUSH
54414: LD_VAR 0 1
54418: PPUSH
54419: CALL_OW 437
54423: PUSH
54424: LD_INT 1
54426: ARRAY
54427: PUSH
54428: LD_INT 1
54430: ARRAY
54431: EQUAL
54432: PUSH
54433: LD_VAR 0 4
54437: PUSH
54438: LD_VAR 0 1
54442: PPUSH
54443: CALL_OW 437
54447: PUSH
54448: LD_INT 1
54450: ARRAY
54451: PUSH
54452: LD_INT 2
54454: ARRAY
54455: EQUAL
54456: AND
54457: PUSH
54458: LD_VAR 0 5
54462: PUSH
54463: LD_VAR 0 1
54467: PPUSH
54468: CALL_OW 437
54472: PUSH
54473: LD_INT 1
54475: ARRAY
54476: PUSH
54477: LD_INT 3
54479: ARRAY
54480: EQUAL
54481: AND
54482: IFFALSE 54492
// result := true end ;
54484: LD_ADDR_VAR 0 3
54488: PUSH
54489: LD_INT 1
54491: ST_TO_ADDR
// end ;
54492: LD_VAR 0 3
54496: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
54497: LD_INT 0
54499: PPUSH
// result := false ;
54500: LD_ADDR_VAR 0 4
54504: PUSH
54505: LD_INT 0
54507: ST_TO_ADDR
// if GetTaskList ( unit ) then
54508: LD_VAR 0 1
54512: PPUSH
54513: CALL_OW 437
54517: IFFALSE 54600
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54519: LD_STRING M
54521: PUSH
54522: LD_VAR 0 1
54526: PPUSH
54527: CALL_OW 437
54531: PUSH
54532: LD_INT 1
54534: ARRAY
54535: PUSH
54536: LD_INT 1
54538: ARRAY
54539: EQUAL
54540: PUSH
54541: LD_VAR 0 2
54545: PUSH
54546: LD_VAR 0 1
54550: PPUSH
54551: CALL_OW 437
54555: PUSH
54556: LD_INT 1
54558: ARRAY
54559: PUSH
54560: LD_INT 2
54562: ARRAY
54563: EQUAL
54564: AND
54565: PUSH
54566: LD_VAR 0 3
54570: PUSH
54571: LD_VAR 0 1
54575: PPUSH
54576: CALL_OW 437
54580: PUSH
54581: LD_INT 1
54583: ARRAY
54584: PUSH
54585: LD_INT 3
54587: ARRAY
54588: EQUAL
54589: AND
54590: IFFALSE 54600
// result := true ;
54592: LD_ADDR_VAR 0 4
54596: PUSH
54597: LD_INT 1
54599: ST_TO_ADDR
// end ; end ;
54600: LD_VAR 0 4
54604: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54605: LD_INT 0
54607: PPUSH
54608: PPUSH
54609: PPUSH
54610: PPUSH
// if not unit or not area then
54611: LD_VAR 0 1
54615: NOT
54616: PUSH
54617: LD_VAR 0 2
54621: NOT
54622: OR
54623: IFFALSE 54627
// exit ;
54625: GO 54791
// tmp := AreaToList ( area , i ) ;
54627: LD_ADDR_VAR 0 6
54631: PUSH
54632: LD_VAR 0 2
54636: PPUSH
54637: LD_VAR 0 5
54641: PPUSH
54642: CALL_OW 517
54646: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54647: LD_ADDR_VAR 0 5
54651: PUSH
54652: DOUBLE
54653: LD_INT 1
54655: DEC
54656: ST_TO_ADDR
54657: LD_VAR 0 6
54661: PUSH
54662: LD_INT 1
54664: ARRAY
54665: PUSH
54666: FOR_TO
54667: IFFALSE 54789
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54669: LD_ADDR_VAR 0 7
54673: PUSH
54674: LD_VAR 0 6
54678: PUSH
54679: LD_INT 1
54681: ARRAY
54682: PUSH
54683: LD_VAR 0 5
54687: ARRAY
54688: PUSH
54689: LD_VAR 0 6
54693: PUSH
54694: LD_INT 2
54696: ARRAY
54697: PUSH
54698: LD_VAR 0 5
54702: ARRAY
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
54708: LD_VAR 0 7
54712: PUSH
54713: LD_INT 1
54715: ARRAY
54716: PPUSH
54717: LD_VAR 0 7
54721: PUSH
54722: LD_INT 2
54724: ARRAY
54725: PPUSH
54726: CALL_OW 428
54730: PUSH
54731: LD_INT 0
54733: EQUAL
54734: IFFALSE 54787
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54736: LD_VAR 0 1
54740: PPUSH
54741: LD_VAR 0 7
54745: PUSH
54746: LD_INT 1
54748: ARRAY
54749: PPUSH
54750: LD_VAR 0 7
54754: PUSH
54755: LD_INT 2
54757: ARRAY
54758: PPUSH
54759: LD_VAR 0 3
54763: PPUSH
54764: CALL_OW 48
// result := IsPlaced ( unit ) ;
54768: LD_ADDR_VAR 0 4
54772: PUSH
54773: LD_VAR 0 1
54777: PPUSH
54778: CALL_OW 305
54782: ST_TO_ADDR
// exit ;
54783: POP
54784: POP
54785: GO 54791
// end ; end ;
54787: GO 54666
54789: POP
54790: POP
// end ;
54791: LD_VAR 0 4
54795: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54796: LD_INT 0
54798: PPUSH
54799: PPUSH
54800: PPUSH
// if not side or side > 8 then
54801: LD_VAR 0 1
54805: NOT
54806: PUSH
54807: LD_VAR 0 1
54811: PUSH
54812: LD_INT 8
54814: GREATER
54815: OR
54816: IFFALSE 54820
// exit ;
54818: GO 55007
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
54820: LD_ADDR_VAR 0 4
54824: PUSH
54825: LD_INT 22
54827: PUSH
54828: LD_VAR 0 1
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 21
54839: PUSH
54840: LD_INT 3
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PPUSH
54851: CALL_OW 69
54855: ST_TO_ADDR
// if not tmp then
54856: LD_VAR 0 4
54860: NOT
54861: IFFALSE 54865
// exit ;
54863: GO 55007
// enable_addtolog := true ;
54865: LD_ADDR_OWVAR 81
54869: PUSH
54870: LD_INT 1
54872: ST_TO_ADDR
// AddToLog ( [ ) ;
54873: LD_STRING [
54875: PPUSH
54876: CALL_OW 561
// for i in tmp do
54880: LD_ADDR_VAR 0 3
54884: PUSH
54885: LD_VAR 0 4
54889: PUSH
54890: FOR_IN
54891: IFFALSE 54998
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
54893: LD_STRING [
54895: PUSH
54896: LD_VAR 0 3
54900: PPUSH
54901: CALL_OW 266
54905: STR
54906: PUSH
54907: LD_STRING , 
54909: STR
54910: PUSH
54911: LD_VAR 0 3
54915: PPUSH
54916: CALL_OW 250
54920: STR
54921: PUSH
54922: LD_STRING , 
54924: STR
54925: PUSH
54926: LD_VAR 0 3
54930: PPUSH
54931: CALL_OW 251
54935: STR
54936: PUSH
54937: LD_STRING , 
54939: STR
54940: PUSH
54941: LD_VAR 0 3
54945: PPUSH
54946: CALL_OW 254
54950: STR
54951: PUSH
54952: LD_STRING , 
54954: STR
54955: PUSH
54956: LD_VAR 0 3
54960: PPUSH
54961: LD_INT 1
54963: PPUSH
54964: CALL_OW 268
54968: STR
54969: PUSH
54970: LD_STRING , 
54972: STR
54973: PUSH
54974: LD_VAR 0 3
54978: PPUSH
54979: LD_INT 2
54981: PPUSH
54982: CALL_OW 268
54986: STR
54987: PUSH
54988: LD_STRING ],
54990: STR
54991: PPUSH
54992: CALL_OW 561
// end ;
54996: GO 54890
54998: POP
54999: POP
// AddToLog ( ]; ) ;
55000: LD_STRING ];
55002: PPUSH
55003: CALL_OW 561
// end ;
55007: LD_VAR 0 2
55011: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
55012: LD_INT 0
55014: PPUSH
55015: PPUSH
55016: PPUSH
55017: PPUSH
55018: PPUSH
// if not area or not rate or not max then
55019: LD_VAR 0 1
55023: NOT
55024: PUSH
55025: LD_VAR 0 2
55029: NOT
55030: OR
55031: PUSH
55032: LD_VAR 0 4
55036: NOT
55037: OR
55038: IFFALSE 55042
// exit ;
55040: GO 55234
// while 1 do
55042: LD_INT 1
55044: IFFALSE 55234
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
55046: LD_ADDR_VAR 0 9
55050: PUSH
55051: LD_VAR 0 1
55055: PPUSH
55056: LD_INT 1
55058: PPUSH
55059: CALL_OW 287
55063: PUSH
55064: LD_INT 10
55066: MUL
55067: ST_TO_ADDR
// r := rate / 10 ;
55068: LD_ADDR_VAR 0 7
55072: PUSH
55073: LD_VAR 0 2
55077: PUSH
55078: LD_INT 10
55080: DIVREAL
55081: ST_TO_ADDR
// time := 1 1$00 ;
55082: LD_ADDR_VAR 0 8
55086: PUSH
55087: LD_INT 2100
55089: ST_TO_ADDR
// if amount < min then
55090: LD_VAR 0 9
55094: PUSH
55095: LD_VAR 0 3
55099: LESS
55100: IFFALSE 55118
// r := r * 2 else
55102: LD_ADDR_VAR 0 7
55106: PUSH
55107: LD_VAR 0 7
55111: PUSH
55112: LD_INT 2
55114: MUL
55115: ST_TO_ADDR
55116: GO 55144
// if amount > max then
55118: LD_VAR 0 9
55122: PUSH
55123: LD_VAR 0 4
55127: GREATER
55128: IFFALSE 55144
// r := r / 2 ;
55130: LD_ADDR_VAR 0 7
55134: PUSH
55135: LD_VAR 0 7
55139: PUSH
55140: LD_INT 2
55142: DIVREAL
55143: ST_TO_ADDR
// time := time / r ;
55144: LD_ADDR_VAR 0 8
55148: PUSH
55149: LD_VAR 0 8
55153: PUSH
55154: LD_VAR 0 7
55158: DIVREAL
55159: ST_TO_ADDR
// if time < 0 then
55160: LD_VAR 0 8
55164: PUSH
55165: LD_INT 0
55167: LESS
55168: IFFALSE 55185
// time := time * - 1 ;
55170: LD_ADDR_VAR 0 8
55174: PUSH
55175: LD_VAR 0 8
55179: PUSH
55180: LD_INT 1
55182: NEG
55183: MUL
55184: ST_TO_ADDR
// wait ( time ) ;
55185: LD_VAR 0 8
55189: PPUSH
55190: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
55194: LD_INT 35
55196: PPUSH
55197: LD_INT 875
55199: PPUSH
55200: CALL_OW 12
55204: PPUSH
55205: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
55209: LD_INT 1
55211: PPUSH
55212: LD_INT 5
55214: PPUSH
55215: CALL_OW 12
55219: PPUSH
55220: LD_VAR 0 1
55224: PPUSH
55225: LD_INT 1
55227: PPUSH
55228: CALL_OW 55
// end ;
55232: GO 55042
// end ;
55234: LD_VAR 0 5
55238: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
55239: LD_INT 0
55241: PPUSH
55242: PPUSH
55243: PPUSH
55244: PPUSH
55245: PPUSH
55246: PPUSH
55247: PPUSH
55248: PPUSH
// if not turrets or not factories then
55249: LD_VAR 0 1
55253: NOT
55254: PUSH
55255: LD_VAR 0 2
55259: NOT
55260: OR
55261: IFFALSE 55265
// exit ;
55263: GO 55572
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
55265: LD_ADDR_VAR 0 10
55269: PUSH
55270: LD_INT 5
55272: PUSH
55273: LD_INT 6
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 2
55282: PUSH
55283: LD_INT 4
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 3
55292: PUSH
55293: LD_INT 5
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 24
55307: PUSH
55308: LD_INT 25
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 23
55317: PUSH
55318: LD_INT 27
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 42
55331: PUSH
55332: LD_INT 43
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 44
55341: PUSH
55342: LD_INT 46
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 45
55351: PUSH
55352: LD_INT 47
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: LIST
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: LIST
55368: ST_TO_ADDR
// result := [ ] ;
55369: LD_ADDR_VAR 0 3
55373: PUSH
55374: EMPTY
55375: ST_TO_ADDR
// for i in turrets do
55376: LD_ADDR_VAR 0 4
55380: PUSH
55381: LD_VAR 0 1
55385: PUSH
55386: FOR_IN
55387: IFFALSE 55570
// begin nat := GetNation ( i ) ;
55389: LD_ADDR_VAR 0 7
55393: PUSH
55394: LD_VAR 0 4
55398: PPUSH
55399: CALL_OW 248
55403: ST_TO_ADDR
// weapon := 0 ;
55404: LD_ADDR_VAR 0 8
55408: PUSH
55409: LD_INT 0
55411: ST_TO_ADDR
// if not nat then
55412: LD_VAR 0 7
55416: NOT
55417: IFFALSE 55421
// continue ;
55419: GO 55386
// for j in list [ nat ] do
55421: LD_ADDR_VAR 0 5
55425: PUSH
55426: LD_VAR 0 10
55430: PUSH
55431: LD_VAR 0 7
55435: ARRAY
55436: PUSH
55437: FOR_IN
55438: IFFALSE 55479
// if GetBWeapon ( i ) = j [ 1 ] then
55440: LD_VAR 0 4
55444: PPUSH
55445: CALL_OW 269
55449: PUSH
55450: LD_VAR 0 5
55454: PUSH
55455: LD_INT 1
55457: ARRAY
55458: EQUAL
55459: IFFALSE 55477
// begin weapon := j [ 2 ] ;
55461: LD_ADDR_VAR 0 8
55465: PUSH
55466: LD_VAR 0 5
55470: PUSH
55471: LD_INT 2
55473: ARRAY
55474: ST_TO_ADDR
// break ;
55475: GO 55479
// end ;
55477: GO 55437
55479: POP
55480: POP
// if not weapon then
55481: LD_VAR 0 8
55485: NOT
55486: IFFALSE 55490
// continue ;
55488: GO 55386
// for k in factories do
55490: LD_ADDR_VAR 0 6
55494: PUSH
55495: LD_VAR 0 2
55499: PUSH
55500: FOR_IN
55501: IFFALSE 55566
// begin weapons := AvailableWeaponList ( k ) ;
55503: LD_ADDR_VAR 0 9
55507: PUSH
55508: LD_VAR 0 6
55512: PPUSH
55513: CALL_OW 478
55517: ST_TO_ADDR
// if not weapons then
55518: LD_VAR 0 9
55522: NOT
55523: IFFALSE 55527
// continue ;
55525: GO 55500
// if weapon in weapons then
55527: LD_VAR 0 8
55531: PUSH
55532: LD_VAR 0 9
55536: IN
55537: IFFALSE 55564
// begin result := [ i , weapon ] ;
55539: LD_ADDR_VAR 0 3
55543: PUSH
55544: LD_VAR 0 4
55548: PUSH
55549: LD_VAR 0 8
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: ST_TO_ADDR
// exit ;
55558: POP
55559: POP
55560: POP
55561: POP
55562: GO 55572
// end ; end ;
55564: GO 55500
55566: POP
55567: POP
// end ;
55568: GO 55386
55570: POP
55571: POP
// end ;
55572: LD_VAR 0 3
55576: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55577: LD_INT 0
55579: PPUSH
// if not side or side > 8 then
55580: LD_VAR 0 3
55584: NOT
55585: PUSH
55586: LD_VAR 0 3
55590: PUSH
55591: LD_INT 8
55593: GREATER
55594: OR
55595: IFFALSE 55599
// exit ;
55597: GO 55658
// if not range then
55599: LD_VAR 0 4
55603: NOT
55604: IFFALSE 55615
// range := - 12 ;
55606: LD_ADDR_VAR 0 4
55610: PUSH
55611: LD_INT 12
55613: NEG
55614: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55615: LD_VAR 0 1
55619: PPUSH
55620: LD_VAR 0 2
55624: PPUSH
55625: LD_VAR 0 3
55629: PPUSH
55630: LD_VAR 0 4
55634: PPUSH
55635: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55639: LD_VAR 0 1
55643: PPUSH
55644: LD_VAR 0 2
55648: PPUSH
55649: LD_VAR 0 3
55653: PPUSH
55654: CALL_OW 331
// end ;
55658: LD_VAR 0 5
55662: RET
// export function Video ( mode ) ; begin
55663: LD_INT 0
55665: PPUSH
// ingame_video = mode ;
55666: LD_ADDR_OWVAR 52
55670: PUSH
55671: LD_VAR 0 1
55675: ST_TO_ADDR
// interface_hidden = mode ;
55676: LD_ADDR_OWVAR 54
55680: PUSH
55681: LD_VAR 0 1
55685: ST_TO_ADDR
// end ;
55686: LD_VAR 0 2
55690: RET
// export function Join ( array , element ) ; begin
55691: LD_INT 0
55693: PPUSH
// result := Replace ( array , array + 1 , element ) ;
55694: LD_ADDR_VAR 0 3
55698: PUSH
55699: LD_VAR 0 1
55703: PPUSH
55704: LD_VAR 0 1
55708: PUSH
55709: LD_INT 1
55711: PLUS
55712: PPUSH
55713: LD_VAR 0 2
55717: PPUSH
55718: CALL_OW 1
55722: ST_TO_ADDR
// end ;
55723: LD_VAR 0 3
55727: RET
// export function JoinUnion ( array , element ) ; begin
55728: LD_INT 0
55730: PPUSH
// result := array union element ;
55731: LD_ADDR_VAR 0 3
55735: PUSH
55736: LD_VAR 0 1
55740: PUSH
55741: LD_VAR 0 2
55745: UNION
55746: ST_TO_ADDR
// end ;
55747: LD_VAR 0 3
55751: RET
// export function GetBehemoths ( side ) ; begin
55752: LD_INT 0
55754: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
55755: LD_ADDR_VAR 0 2
55759: PUSH
55760: LD_INT 22
55762: PUSH
55763: LD_VAR 0 1
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 31
55774: PUSH
55775: LD_INT 25
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PPUSH
55786: CALL_OW 69
55790: ST_TO_ADDR
// end ;
55791: LD_VAR 0 2
55795: RET
// export function Shuffle ( array ) ; var i , index ; begin
55796: LD_INT 0
55798: PPUSH
55799: PPUSH
55800: PPUSH
// result := [ ] ;
55801: LD_ADDR_VAR 0 2
55805: PUSH
55806: EMPTY
55807: ST_TO_ADDR
// if not array then
55808: LD_VAR 0 1
55812: NOT
55813: IFFALSE 55817
// exit ;
55815: GO 55916
// Randomize ;
55817: CALL_OW 10
// for i = array downto 1 do
55821: LD_ADDR_VAR 0 3
55825: PUSH
55826: DOUBLE
55827: LD_VAR 0 1
55831: INC
55832: ST_TO_ADDR
55833: LD_INT 1
55835: PUSH
55836: FOR_DOWNTO
55837: IFFALSE 55914
// begin index := rand ( 1 , array ) ;
55839: LD_ADDR_VAR 0 4
55843: PUSH
55844: LD_INT 1
55846: PPUSH
55847: LD_VAR 0 1
55851: PPUSH
55852: CALL_OW 12
55856: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55857: LD_ADDR_VAR 0 2
55861: PUSH
55862: LD_VAR 0 2
55866: PPUSH
55867: LD_VAR 0 2
55871: PUSH
55872: LD_INT 1
55874: PLUS
55875: PPUSH
55876: LD_VAR 0 1
55880: PUSH
55881: LD_VAR 0 4
55885: ARRAY
55886: PPUSH
55887: CALL_OW 2
55891: ST_TO_ADDR
// array := Delete ( array , index ) ;
55892: LD_ADDR_VAR 0 1
55896: PUSH
55897: LD_VAR 0 1
55901: PPUSH
55902: LD_VAR 0 4
55906: PPUSH
55907: CALL_OW 3
55911: ST_TO_ADDR
// end ;
55912: GO 55836
55914: POP
55915: POP
// end ;
55916: LD_VAR 0 2
55920: RET
// export function GetBaseMaterials ( base ) ; begin
55921: LD_INT 0
55923: PPUSH
// result := [ 0 , 0 , 0 ] ;
55924: LD_ADDR_VAR 0 2
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: LIST
55942: ST_TO_ADDR
// if not base then
55943: LD_VAR 0 1
55947: NOT
55948: IFFALSE 55952
// exit ;
55950: GO 56001
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55952: LD_ADDR_VAR 0 2
55956: PUSH
55957: LD_VAR 0 1
55961: PPUSH
55962: LD_INT 1
55964: PPUSH
55965: CALL_OW 275
55969: PUSH
55970: LD_VAR 0 1
55974: PPUSH
55975: LD_INT 2
55977: PPUSH
55978: CALL_OW 275
55982: PUSH
55983: LD_VAR 0 1
55987: PPUSH
55988: LD_INT 3
55990: PPUSH
55991: CALL_OW 275
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: LIST
56000: ST_TO_ADDR
// end ;
56001: LD_VAR 0 2
56005: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
56006: LD_INT 0
56008: PPUSH
56009: PPUSH
// result := array ;
56010: LD_ADDR_VAR 0 3
56014: PUSH
56015: LD_VAR 0 1
56019: ST_TO_ADDR
// if size > 0 then
56020: LD_VAR 0 2
56024: PUSH
56025: LD_INT 0
56027: GREATER
56028: IFFALSE 56074
// for i := array downto size do
56030: LD_ADDR_VAR 0 4
56034: PUSH
56035: DOUBLE
56036: LD_VAR 0 1
56040: INC
56041: ST_TO_ADDR
56042: LD_VAR 0 2
56046: PUSH
56047: FOR_DOWNTO
56048: IFFALSE 56072
// result := Delete ( result , result ) ;
56050: LD_ADDR_VAR 0 3
56054: PUSH
56055: LD_VAR 0 3
56059: PPUSH
56060: LD_VAR 0 3
56064: PPUSH
56065: CALL_OW 3
56069: ST_TO_ADDR
56070: GO 56047
56072: POP
56073: POP
// end ;
56074: LD_VAR 0 3
56078: RET
// export function ComExit ( unit ) ; var tmp ; begin
56079: LD_INT 0
56081: PPUSH
56082: PPUSH
// if not IsInUnit ( unit ) then
56083: LD_VAR 0 1
56087: PPUSH
56088: CALL_OW 310
56092: NOT
56093: IFFALSE 56097
// exit ;
56095: GO 56157
// tmp := IsInUnit ( unit ) ;
56097: LD_ADDR_VAR 0 3
56101: PUSH
56102: LD_VAR 0 1
56106: PPUSH
56107: CALL_OW 310
56111: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
56112: LD_VAR 0 3
56116: PPUSH
56117: CALL_OW 247
56121: PUSH
56122: LD_INT 2
56124: EQUAL
56125: IFFALSE 56138
// ComExitVehicle ( unit ) else
56127: LD_VAR 0 1
56131: PPUSH
56132: CALL_OW 121
56136: GO 56147
// ComExitBuilding ( unit ) ;
56138: LD_VAR 0 1
56142: PPUSH
56143: CALL_OW 122
// result := tmp ;
56147: LD_ADDR_VAR 0 2
56151: PUSH
56152: LD_VAR 0 3
56156: ST_TO_ADDR
// end ;
56157: LD_VAR 0 2
56161: RET
// export function ComExitAll ( units ) ; var i ; begin
56162: LD_INT 0
56164: PPUSH
56165: PPUSH
// if not units then
56166: LD_VAR 0 1
56170: NOT
56171: IFFALSE 56175
// exit ;
56173: GO 56201
// for i in units do
56175: LD_ADDR_VAR 0 3
56179: PUSH
56180: LD_VAR 0 1
56184: PUSH
56185: FOR_IN
56186: IFFALSE 56199
// ComExit ( i ) ;
56188: LD_VAR 0 3
56192: PPUSH
56193: CALL 56079 0 1
56197: GO 56185
56199: POP
56200: POP
// end ;
56201: LD_VAR 0 2
56205: RET
// export function ResetHc ; begin
56206: LD_INT 0
56208: PPUSH
// InitHc ;
56209: CALL_OW 19
// hc_importance := 0 ;
56213: LD_ADDR_OWVAR 32
56217: PUSH
56218: LD_INT 0
56220: ST_TO_ADDR
// end ;
56221: LD_VAR 0 1
56225: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
56226: LD_INT 0
56228: PPUSH
56229: PPUSH
56230: PPUSH
// _x := ( x1 + x2 ) div 2 ;
56231: LD_ADDR_VAR 0 6
56235: PUSH
56236: LD_VAR 0 1
56240: PUSH
56241: LD_VAR 0 3
56245: PLUS
56246: PUSH
56247: LD_INT 2
56249: DIV
56250: ST_TO_ADDR
// if _x < 0 then
56251: LD_VAR 0 6
56255: PUSH
56256: LD_INT 0
56258: LESS
56259: IFFALSE 56276
// _x := _x * - 1 ;
56261: LD_ADDR_VAR 0 6
56265: PUSH
56266: LD_VAR 0 6
56270: PUSH
56271: LD_INT 1
56273: NEG
56274: MUL
56275: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
56276: LD_ADDR_VAR 0 7
56280: PUSH
56281: LD_VAR 0 2
56285: PUSH
56286: LD_VAR 0 4
56290: PLUS
56291: PUSH
56292: LD_INT 2
56294: DIV
56295: ST_TO_ADDR
// if _y < 0 then
56296: LD_VAR 0 7
56300: PUSH
56301: LD_INT 0
56303: LESS
56304: IFFALSE 56321
// _y := _y * - 1 ;
56306: LD_ADDR_VAR 0 7
56310: PUSH
56311: LD_VAR 0 7
56315: PUSH
56316: LD_INT 1
56318: NEG
56319: MUL
56320: ST_TO_ADDR
// result := [ _x , _y ] ;
56321: LD_ADDR_VAR 0 5
56325: PUSH
56326: LD_VAR 0 6
56330: PUSH
56331: LD_VAR 0 7
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: ST_TO_ADDR
// end ;
56340: LD_VAR 0 5
56344: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
56345: LD_INT 0
56347: PPUSH
56348: PPUSH
56349: PPUSH
56350: PPUSH
// task := GetTaskList ( unit ) ;
56351: LD_ADDR_VAR 0 7
56355: PUSH
56356: LD_VAR 0 1
56360: PPUSH
56361: CALL_OW 437
56365: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
56366: LD_VAR 0 7
56370: NOT
56371: PUSH
56372: LD_VAR 0 1
56376: PPUSH
56377: LD_VAR 0 2
56381: PPUSH
56382: CALL_OW 308
56386: NOT
56387: AND
56388: IFFALSE 56392
// exit ;
56390: GO 56510
// if IsInArea ( unit , area ) then
56392: LD_VAR 0 1
56396: PPUSH
56397: LD_VAR 0 2
56401: PPUSH
56402: CALL_OW 308
56406: IFFALSE 56424
// begin ComMoveToArea ( unit , goAway ) ;
56408: LD_VAR 0 1
56412: PPUSH
56413: LD_VAR 0 3
56417: PPUSH
56418: CALL_OW 113
// exit ;
56422: GO 56510
// end ; if task [ 1 ] [ 1 ] <> M then
56424: LD_VAR 0 7
56428: PUSH
56429: LD_INT 1
56431: ARRAY
56432: PUSH
56433: LD_INT 1
56435: ARRAY
56436: PUSH
56437: LD_STRING M
56439: NONEQUAL
56440: IFFALSE 56444
// exit ;
56442: GO 56510
// x := task [ 1 ] [ 2 ] ;
56444: LD_ADDR_VAR 0 5
56448: PUSH
56449: LD_VAR 0 7
56453: PUSH
56454: LD_INT 1
56456: ARRAY
56457: PUSH
56458: LD_INT 2
56460: ARRAY
56461: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
56462: LD_ADDR_VAR 0 6
56466: PUSH
56467: LD_VAR 0 7
56471: PUSH
56472: LD_INT 1
56474: ARRAY
56475: PUSH
56476: LD_INT 3
56478: ARRAY
56479: ST_TO_ADDR
// if InArea ( x , y , area ) then
56480: LD_VAR 0 5
56484: PPUSH
56485: LD_VAR 0 6
56489: PPUSH
56490: LD_VAR 0 2
56494: PPUSH
56495: CALL_OW 309
56499: IFFALSE 56510
// ComStop ( unit ) ;
56501: LD_VAR 0 1
56505: PPUSH
56506: CALL_OW 141
// end ;
56510: LD_VAR 0 4
56514: RET
// export function Abs ( value ) ; begin
56515: LD_INT 0
56517: PPUSH
// result := value ;
56518: LD_ADDR_VAR 0 2
56522: PUSH
56523: LD_VAR 0 1
56527: ST_TO_ADDR
// if value < 0 then
56528: LD_VAR 0 1
56532: PUSH
56533: LD_INT 0
56535: LESS
56536: IFFALSE 56553
// result := value * - 1 ;
56538: LD_ADDR_VAR 0 2
56542: PUSH
56543: LD_VAR 0 1
56547: PUSH
56548: LD_INT 1
56550: NEG
56551: MUL
56552: ST_TO_ADDR
// end ;
56553: LD_VAR 0 2
56557: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
56558: LD_INT 0
56560: PPUSH
56561: PPUSH
56562: PPUSH
56563: PPUSH
56564: PPUSH
56565: PPUSH
56566: PPUSH
56567: PPUSH
// if not unit or not building then
56568: LD_VAR 0 1
56572: NOT
56573: PUSH
56574: LD_VAR 0 2
56578: NOT
56579: OR
56580: IFFALSE 56584
// exit ;
56582: GO 56810
// x := GetX ( building ) ;
56584: LD_ADDR_VAR 0 4
56588: PUSH
56589: LD_VAR 0 2
56593: PPUSH
56594: CALL_OW 250
56598: ST_TO_ADDR
// y := GetY ( building ) ;
56599: LD_ADDR_VAR 0 6
56603: PUSH
56604: LD_VAR 0 2
56608: PPUSH
56609: CALL_OW 251
56613: ST_TO_ADDR
// d := GetDir ( building ) ;
56614: LD_ADDR_VAR 0 8
56618: PUSH
56619: LD_VAR 0 2
56623: PPUSH
56624: CALL_OW 254
56628: ST_TO_ADDR
// r := 4 ;
56629: LD_ADDR_VAR 0 9
56633: PUSH
56634: LD_INT 4
56636: ST_TO_ADDR
// for i := 1 to 5 do
56637: LD_ADDR_VAR 0 10
56641: PUSH
56642: DOUBLE
56643: LD_INT 1
56645: DEC
56646: ST_TO_ADDR
56647: LD_INT 5
56649: PUSH
56650: FOR_TO
56651: IFFALSE 56808
// begin _x := ShiftX ( x , d , r + i ) ;
56653: LD_ADDR_VAR 0 5
56657: PUSH
56658: LD_VAR 0 4
56662: PPUSH
56663: LD_VAR 0 8
56667: PPUSH
56668: LD_VAR 0 9
56672: PUSH
56673: LD_VAR 0 10
56677: PLUS
56678: PPUSH
56679: CALL_OW 272
56683: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
56684: LD_ADDR_VAR 0 7
56688: PUSH
56689: LD_VAR 0 6
56693: PPUSH
56694: LD_VAR 0 8
56698: PPUSH
56699: LD_VAR 0 9
56703: PUSH
56704: LD_VAR 0 10
56708: PLUS
56709: PPUSH
56710: CALL_OW 273
56714: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
56715: LD_VAR 0 5
56719: PPUSH
56720: LD_VAR 0 7
56724: PPUSH
56725: CALL_OW 488
56729: PUSH
56730: LD_VAR 0 5
56734: PPUSH
56735: LD_VAR 0 7
56739: PPUSH
56740: CALL_OW 428
56744: PPUSH
56745: CALL_OW 247
56749: PUSH
56750: LD_INT 3
56752: PUSH
56753: LD_INT 2
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: IN
56760: NOT
56761: AND
56762: IFFALSE 56806
// begin ComMoveXY ( unit , _x , _y ) ;
56764: LD_VAR 0 1
56768: PPUSH
56769: LD_VAR 0 5
56773: PPUSH
56774: LD_VAR 0 7
56778: PPUSH
56779: CALL_OW 111
// result := [ _x , _y ] ;
56783: LD_ADDR_VAR 0 3
56787: PUSH
56788: LD_VAR 0 5
56792: PUSH
56793: LD_VAR 0 7
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: ST_TO_ADDR
// exit ;
56802: POP
56803: POP
56804: GO 56810
// end ; end ;
56806: GO 56650
56808: POP
56809: POP
// end ;
56810: LD_VAR 0 3
56814: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
56815: LD_INT 0
56817: PPUSH
56818: PPUSH
56819: PPUSH
// result := 0 ;
56820: LD_ADDR_VAR 0 3
56824: PUSH
56825: LD_INT 0
56827: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
56828: LD_VAR 0 1
56832: PUSH
56833: LD_INT 0
56835: LESS
56836: PUSH
56837: LD_VAR 0 1
56841: PUSH
56842: LD_INT 8
56844: GREATER
56845: OR
56846: PUSH
56847: LD_VAR 0 2
56851: PUSH
56852: LD_INT 0
56854: LESS
56855: OR
56856: PUSH
56857: LD_VAR 0 2
56861: PUSH
56862: LD_INT 8
56864: GREATER
56865: OR
56866: IFFALSE 56870
// exit ;
56868: GO 56945
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
56870: LD_ADDR_VAR 0 4
56874: PUSH
56875: LD_INT 22
56877: PUSH
56878: LD_VAR 0 2
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PPUSH
56887: CALL_OW 69
56891: PUSH
56892: FOR_IN
56893: IFFALSE 56943
// begin un := UnitShoot ( i ) ;
56895: LD_ADDR_VAR 0 5
56899: PUSH
56900: LD_VAR 0 4
56904: PPUSH
56905: CALL_OW 504
56909: ST_TO_ADDR
// if GetSide ( un ) = side1 then
56910: LD_VAR 0 5
56914: PPUSH
56915: CALL_OW 255
56919: PUSH
56920: LD_VAR 0 1
56924: EQUAL
56925: IFFALSE 56941
// begin result := un ;
56927: LD_ADDR_VAR 0 3
56931: PUSH
56932: LD_VAR 0 5
56936: ST_TO_ADDR
// exit ;
56937: POP
56938: POP
56939: GO 56945
// end ; end ;
56941: GO 56892
56943: POP
56944: POP
// end ;
56945: LD_VAR 0 3
56949: RET
// export function GetCargoBay ( units ) ; begin
56950: LD_INT 0
56952: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
56953: LD_ADDR_VAR 0 2
56957: PUSH
56958: LD_VAR 0 1
56962: PPUSH
56963: LD_INT 2
56965: PUSH
56966: LD_INT 34
56968: PUSH
56969: LD_INT 12
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 34
56978: PUSH
56979: LD_INT 51
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 34
56988: PUSH
56989: LD_INT 32
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 34
56998: PUSH
56999: LD_EXP 30
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: PPUSH
57015: CALL_OW 72
57019: ST_TO_ADDR
// end ; end_of_file
57020: LD_VAR 0 2
57024: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
57025: LD_INT 0
57027: PPUSH
// ar_miner := 81 ;
57028: LD_ADDR_EXP 36
57032: PUSH
57033: LD_INT 81
57035: ST_TO_ADDR
// ar_crane := 88 ;
57036: LD_ADDR_EXP 35
57040: PUSH
57041: LD_INT 88
57043: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
57044: LD_ADDR_EXP 30
57048: PUSH
57049: LD_INT 89
57051: ST_TO_ADDR
// us_hack := 99 ;
57052: LD_ADDR_EXP 31
57056: PUSH
57057: LD_INT 99
57059: ST_TO_ADDR
// us_artillery := 97 ;
57060: LD_ADDR_EXP 32
57064: PUSH
57065: LD_INT 97
57067: ST_TO_ADDR
// ar_bio_bomb := 91 ;
57068: LD_ADDR_EXP 33
57072: PUSH
57073: LD_INT 91
57075: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
57076: LD_ADDR_EXP 34
57080: PUSH
57081: LD_INT 92
57083: ST_TO_ADDR
// ru_radar := 98 ;
57084: LD_ADDR_EXP 29
57088: PUSH
57089: LD_INT 98
57091: ST_TO_ADDR
// tech_Artillery := 80 ;
57092: LD_ADDR_EXP 37
57096: PUSH
57097: LD_INT 80
57099: ST_TO_ADDR
// tech_RadMat := 81 ;
57100: LD_ADDR_EXP 38
57104: PUSH
57105: LD_INT 81
57107: ST_TO_ADDR
// tech_BasicTools := 82 ;
57108: LD_ADDR_EXP 39
57112: PUSH
57113: LD_INT 82
57115: ST_TO_ADDR
// tech_Cargo := 83 ;
57116: LD_ADDR_EXP 40
57120: PUSH
57121: LD_INT 83
57123: ST_TO_ADDR
// tech_Track := 84 ;
57124: LD_ADDR_EXP 41
57128: PUSH
57129: LD_INT 84
57131: ST_TO_ADDR
// tech_Crane := 85 ;
57132: LD_ADDR_EXP 42
57136: PUSH
57137: LD_INT 85
57139: ST_TO_ADDR
// tech_Bulldozer := 86 ;
57140: LD_ADDR_EXP 43
57144: PUSH
57145: LD_INT 86
57147: ST_TO_ADDR
// tech_Hovercraft := 87 ;
57148: LD_ADDR_EXP 44
57152: PUSH
57153: LD_INT 87
57155: ST_TO_ADDR
// end ;
57156: LD_VAR 0 1
57160: RET
// every 1 do
57161: GO 57163
57163: DISABLE
// InitGlobalVariables ; end_of_file
57164: CALL 57025 0 0
57168: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
57169: LD_INT 0
57171: PPUSH
57172: PPUSH
// skirmish := false ;
57173: LD_ADDR_EXP 45
57177: PUSH
57178: LD_INT 0
57180: ST_TO_ADDR
// debug_mc := false ;
57181: LD_ADDR_EXP 46
57185: PUSH
57186: LD_INT 0
57188: ST_TO_ADDR
// mc_bases := [ ] ;
57189: LD_ADDR_EXP 47
57193: PUSH
57194: EMPTY
57195: ST_TO_ADDR
// mc_sides := [ ] ;
57196: LD_ADDR_EXP 73
57200: PUSH
57201: EMPTY
57202: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
57203: LD_ADDR_EXP 48
57207: PUSH
57208: EMPTY
57209: ST_TO_ADDR
// mc_building_repairs := [ ] ;
57210: LD_ADDR_EXP 49
57214: PUSH
57215: EMPTY
57216: ST_TO_ADDR
// mc_need_heal := [ ] ;
57217: LD_ADDR_EXP 50
57221: PUSH
57222: EMPTY
57223: ST_TO_ADDR
// mc_healers := [ ] ;
57224: LD_ADDR_EXP 51
57228: PUSH
57229: EMPTY
57230: ST_TO_ADDR
// mc_build_list := [ ] ;
57231: LD_ADDR_EXP 52
57235: PUSH
57236: EMPTY
57237: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
57238: LD_ADDR_EXP 79
57242: PUSH
57243: EMPTY
57244: ST_TO_ADDR
// mc_builders := [ ] ;
57245: LD_ADDR_EXP 53
57249: PUSH
57250: EMPTY
57251: ST_TO_ADDR
// mc_construct_list := [ ] ;
57252: LD_ADDR_EXP 54
57256: PUSH
57257: EMPTY
57258: ST_TO_ADDR
// mc_turret_list := [ ] ;
57259: LD_ADDR_EXP 55
57263: PUSH
57264: EMPTY
57265: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
57266: LD_ADDR_EXP 56
57270: PUSH
57271: EMPTY
57272: ST_TO_ADDR
// mc_miners := [ ] ;
57273: LD_ADDR_EXP 61
57277: PUSH
57278: EMPTY
57279: ST_TO_ADDR
// mc_mines := [ ] ;
57280: LD_ADDR_EXP 60
57284: PUSH
57285: EMPTY
57286: ST_TO_ADDR
// mc_minefields := [ ] ;
57287: LD_ADDR_EXP 62
57291: PUSH
57292: EMPTY
57293: ST_TO_ADDR
// mc_crates := [ ] ;
57294: LD_ADDR_EXP 63
57298: PUSH
57299: EMPTY
57300: ST_TO_ADDR
// mc_crates_collector := [ ] ;
57301: LD_ADDR_EXP 64
57305: PUSH
57306: EMPTY
57307: ST_TO_ADDR
// mc_crates_area := [ ] ;
57308: LD_ADDR_EXP 65
57312: PUSH
57313: EMPTY
57314: ST_TO_ADDR
// mc_vehicles := [ ] ;
57315: LD_ADDR_EXP 66
57319: PUSH
57320: EMPTY
57321: ST_TO_ADDR
// mc_attack := [ ] ;
57322: LD_ADDR_EXP 67
57326: PUSH
57327: EMPTY
57328: ST_TO_ADDR
// mc_produce := [ ] ;
57329: LD_ADDR_EXP 68
57333: PUSH
57334: EMPTY
57335: ST_TO_ADDR
// mc_defender := [ ] ;
57336: LD_ADDR_EXP 69
57340: PUSH
57341: EMPTY
57342: ST_TO_ADDR
// mc_parking := [ ] ;
57343: LD_ADDR_EXP 71
57347: PUSH
57348: EMPTY
57349: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
57350: LD_ADDR_EXP 57
57354: PUSH
57355: EMPTY
57356: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
57357: LD_ADDR_EXP 59
57361: PUSH
57362: EMPTY
57363: ST_TO_ADDR
// mc_scan := [ ] ;
57364: LD_ADDR_EXP 70
57368: PUSH
57369: EMPTY
57370: ST_TO_ADDR
// mc_scan_area := [ ] ;
57371: LD_ADDR_EXP 72
57375: PUSH
57376: EMPTY
57377: ST_TO_ADDR
// mc_tech := [ ] ;
57378: LD_ADDR_EXP 74
57382: PUSH
57383: EMPTY
57384: ST_TO_ADDR
// mc_class := [ ] ;
57385: LD_ADDR_EXP 88
57389: PUSH
57390: EMPTY
57391: ST_TO_ADDR
// mc_class_case_use := [ ] ;
57392: LD_ADDR_EXP 89
57396: PUSH
57397: EMPTY
57398: ST_TO_ADDR
// end ;
57399: LD_VAR 0 1
57403: RET
// export function MC_Kill ( base ) ; begin
57404: LD_INT 0
57406: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
57407: LD_ADDR_EXP 47
57411: PUSH
57412: LD_EXP 47
57416: PPUSH
57417: LD_VAR 0 1
57421: PPUSH
57422: EMPTY
57423: PPUSH
57424: CALL_OW 1
57428: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
57429: LD_ADDR_EXP 48
57433: PUSH
57434: LD_EXP 48
57438: PPUSH
57439: LD_VAR 0 1
57443: PPUSH
57444: EMPTY
57445: PPUSH
57446: CALL_OW 1
57450: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
57451: LD_ADDR_EXP 49
57455: PUSH
57456: LD_EXP 49
57460: PPUSH
57461: LD_VAR 0 1
57465: PPUSH
57466: EMPTY
57467: PPUSH
57468: CALL_OW 1
57472: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
57473: LD_ADDR_EXP 50
57477: PUSH
57478: LD_EXP 50
57482: PPUSH
57483: LD_VAR 0 1
57487: PPUSH
57488: EMPTY
57489: PPUSH
57490: CALL_OW 1
57494: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
57495: LD_ADDR_EXP 51
57499: PUSH
57500: LD_EXP 51
57504: PPUSH
57505: LD_VAR 0 1
57509: PPUSH
57510: EMPTY
57511: PPUSH
57512: CALL_OW 1
57516: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
57517: LD_ADDR_EXP 52
57521: PUSH
57522: LD_EXP 52
57526: PPUSH
57527: LD_VAR 0 1
57531: PPUSH
57532: EMPTY
57533: PPUSH
57534: CALL_OW 1
57538: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
57539: LD_ADDR_EXP 53
57543: PUSH
57544: LD_EXP 53
57548: PPUSH
57549: LD_VAR 0 1
57553: PPUSH
57554: EMPTY
57555: PPUSH
57556: CALL_OW 1
57560: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
57561: LD_ADDR_EXP 54
57565: PUSH
57566: LD_EXP 54
57570: PPUSH
57571: LD_VAR 0 1
57575: PPUSH
57576: EMPTY
57577: PPUSH
57578: CALL_OW 1
57582: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
57583: LD_ADDR_EXP 55
57587: PUSH
57588: LD_EXP 55
57592: PPUSH
57593: LD_VAR 0 1
57597: PPUSH
57598: EMPTY
57599: PPUSH
57600: CALL_OW 1
57604: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
57605: LD_ADDR_EXP 56
57609: PUSH
57610: LD_EXP 56
57614: PPUSH
57615: LD_VAR 0 1
57619: PPUSH
57620: EMPTY
57621: PPUSH
57622: CALL_OW 1
57626: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
57627: LD_ADDR_EXP 57
57631: PUSH
57632: LD_EXP 57
57636: PPUSH
57637: LD_VAR 0 1
57641: PPUSH
57642: EMPTY
57643: PPUSH
57644: CALL_OW 1
57648: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
57649: LD_ADDR_EXP 58
57653: PUSH
57654: LD_EXP 58
57658: PPUSH
57659: LD_VAR 0 1
57663: PPUSH
57664: LD_INT 0
57666: PPUSH
57667: CALL_OW 1
57671: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
57672: LD_ADDR_EXP 59
57676: PUSH
57677: LD_EXP 59
57681: PPUSH
57682: LD_VAR 0 1
57686: PPUSH
57687: EMPTY
57688: PPUSH
57689: CALL_OW 1
57693: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
57694: LD_ADDR_EXP 60
57698: PUSH
57699: LD_EXP 60
57703: PPUSH
57704: LD_VAR 0 1
57708: PPUSH
57709: EMPTY
57710: PPUSH
57711: CALL_OW 1
57715: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
57716: LD_ADDR_EXP 61
57720: PUSH
57721: LD_EXP 61
57725: PPUSH
57726: LD_VAR 0 1
57730: PPUSH
57731: EMPTY
57732: PPUSH
57733: CALL_OW 1
57737: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
57738: LD_ADDR_EXP 62
57742: PUSH
57743: LD_EXP 62
57747: PPUSH
57748: LD_VAR 0 1
57752: PPUSH
57753: EMPTY
57754: PPUSH
57755: CALL_OW 1
57759: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
57760: LD_ADDR_EXP 63
57764: PUSH
57765: LD_EXP 63
57769: PPUSH
57770: LD_VAR 0 1
57774: PPUSH
57775: EMPTY
57776: PPUSH
57777: CALL_OW 1
57781: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
57782: LD_ADDR_EXP 64
57786: PUSH
57787: LD_EXP 64
57791: PPUSH
57792: LD_VAR 0 1
57796: PPUSH
57797: EMPTY
57798: PPUSH
57799: CALL_OW 1
57803: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
57804: LD_ADDR_EXP 65
57808: PUSH
57809: LD_EXP 65
57813: PPUSH
57814: LD_VAR 0 1
57818: PPUSH
57819: EMPTY
57820: PPUSH
57821: CALL_OW 1
57825: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
57826: LD_ADDR_EXP 66
57830: PUSH
57831: LD_EXP 66
57835: PPUSH
57836: LD_VAR 0 1
57840: PPUSH
57841: EMPTY
57842: PPUSH
57843: CALL_OW 1
57847: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
57848: LD_ADDR_EXP 67
57852: PUSH
57853: LD_EXP 67
57857: PPUSH
57858: LD_VAR 0 1
57862: PPUSH
57863: EMPTY
57864: PPUSH
57865: CALL_OW 1
57869: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
57870: LD_ADDR_EXP 68
57874: PUSH
57875: LD_EXP 68
57879: PPUSH
57880: LD_VAR 0 1
57884: PPUSH
57885: EMPTY
57886: PPUSH
57887: CALL_OW 1
57891: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
57892: LD_ADDR_EXP 69
57896: PUSH
57897: LD_EXP 69
57901: PPUSH
57902: LD_VAR 0 1
57906: PPUSH
57907: EMPTY
57908: PPUSH
57909: CALL_OW 1
57913: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
57914: LD_ADDR_EXP 70
57918: PUSH
57919: LD_EXP 70
57923: PPUSH
57924: LD_VAR 0 1
57928: PPUSH
57929: EMPTY
57930: PPUSH
57931: CALL_OW 1
57935: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
57936: LD_ADDR_EXP 71
57940: PUSH
57941: LD_EXP 71
57945: PPUSH
57946: LD_VAR 0 1
57950: PPUSH
57951: EMPTY
57952: PPUSH
57953: CALL_OW 1
57957: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
57958: LD_ADDR_EXP 72
57962: PUSH
57963: LD_EXP 72
57967: PPUSH
57968: LD_VAR 0 1
57972: PPUSH
57973: EMPTY
57974: PPUSH
57975: CALL_OW 1
57979: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
57980: LD_ADDR_EXP 74
57984: PUSH
57985: LD_EXP 74
57989: PPUSH
57990: LD_VAR 0 1
57994: PPUSH
57995: EMPTY
57996: PPUSH
57997: CALL_OW 1
58001: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
58002: LD_ADDR_EXP 76
58006: PUSH
58007: LD_EXP 76
58011: PPUSH
58012: LD_VAR 0 1
58016: PPUSH
58017: EMPTY
58018: PPUSH
58019: CALL_OW 1
58023: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
58024: LD_ADDR_EXP 77
58028: PUSH
58029: LD_EXP 77
58033: PPUSH
58034: LD_VAR 0 1
58038: PPUSH
58039: EMPTY
58040: PPUSH
58041: CALL_OW 1
58045: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
58046: LD_ADDR_EXP 78
58050: PUSH
58051: LD_EXP 78
58055: PPUSH
58056: LD_VAR 0 1
58060: PPUSH
58061: EMPTY
58062: PPUSH
58063: CALL_OW 1
58067: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
58068: LD_ADDR_EXP 79
58072: PUSH
58073: LD_EXP 79
58077: PPUSH
58078: LD_VAR 0 1
58082: PPUSH
58083: EMPTY
58084: PPUSH
58085: CALL_OW 1
58089: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
58090: LD_ADDR_EXP 80
58094: PUSH
58095: LD_EXP 80
58099: PPUSH
58100: LD_VAR 0 1
58104: PPUSH
58105: EMPTY
58106: PPUSH
58107: CALL_OW 1
58111: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
58112: LD_ADDR_EXP 81
58116: PUSH
58117: LD_EXP 81
58121: PPUSH
58122: LD_VAR 0 1
58126: PPUSH
58127: EMPTY
58128: PPUSH
58129: CALL_OW 1
58133: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
58134: LD_ADDR_EXP 82
58138: PUSH
58139: LD_EXP 82
58143: PPUSH
58144: LD_VAR 0 1
58148: PPUSH
58149: EMPTY
58150: PPUSH
58151: CALL_OW 1
58155: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
58156: LD_ADDR_EXP 83
58160: PUSH
58161: LD_EXP 83
58165: PPUSH
58166: LD_VAR 0 1
58170: PPUSH
58171: EMPTY
58172: PPUSH
58173: CALL_OW 1
58177: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
58178: LD_ADDR_EXP 84
58182: PUSH
58183: LD_EXP 84
58187: PPUSH
58188: LD_VAR 0 1
58192: PPUSH
58193: EMPTY
58194: PPUSH
58195: CALL_OW 1
58199: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
58200: LD_ADDR_EXP 85
58204: PUSH
58205: LD_EXP 85
58209: PPUSH
58210: LD_VAR 0 1
58214: PPUSH
58215: EMPTY
58216: PPUSH
58217: CALL_OW 1
58221: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
58222: LD_ADDR_EXP 86
58226: PUSH
58227: LD_EXP 86
58231: PPUSH
58232: LD_VAR 0 1
58236: PPUSH
58237: EMPTY
58238: PPUSH
58239: CALL_OW 1
58243: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
58244: LD_ADDR_EXP 87
58248: PUSH
58249: LD_EXP 87
58253: PPUSH
58254: LD_VAR 0 1
58258: PPUSH
58259: EMPTY
58260: PPUSH
58261: CALL_OW 1
58265: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
58266: LD_ADDR_EXP 88
58270: PUSH
58271: LD_EXP 88
58275: PPUSH
58276: LD_VAR 0 1
58280: PPUSH
58281: EMPTY
58282: PPUSH
58283: CALL_OW 1
58287: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
58288: LD_ADDR_EXP 89
58292: PUSH
58293: LD_EXP 89
58297: PPUSH
58298: LD_VAR 0 1
58302: PPUSH
58303: LD_INT 0
58305: PPUSH
58306: CALL_OW 1
58310: ST_TO_ADDR
// end ;
58311: LD_VAR 0 2
58315: RET
// export function MC_Add ( side , units ) ; var base ; begin
58316: LD_INT 0
58318: PPUSH
58319: PPUSH
// base := mc_bases + 1 ;
58320: LD_ADDR_VAR 0 4
58324: PUSH
58325: LD_EXP 47
58329: PUSH
58330: LD_INT 1
58332: PLUS
58333: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
58334: LD_ADDR_EXP 73
58338: PUSH
58339: LD_EXP 73
58343: PPUSH
58344: LD_VAR 0 4
58348: PPUSH
58349: LD_VAR 0 1
58353: PPUSH
58354: CALL_OW 1
58358: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
58359: LD_ADDR_EXP 47
58363: PUSH
58364: LD_EXP 47
58368: PPUSH
58369: LD_VAR 0 4
58373: PPUSH
58374: LD_VAR 0 2
58378: PPUSH
58379: CALL_OW 1
58383: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
58384: LD_ADDR_EXP 48
58388: PUSH
58389: LD_EXP 48
58393: PPUSH
58394: LD_VAR 0 4
58398: PPUSH
58399: EMPTY
58400: PPUSH
58401: CALL_OW 1
58405: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
58406: LD_ADDR_EXP 49
58410: PUSH
58411: LD_EXP 49
58415: PPUSH
58416: LD_VAR 0 4
58420: PPUSH
58421: EMPTY
58422: PPUSH
58423: CALL_OW 1
58427: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
58428: LD_ADDR_EXP 50
58432: PUSH
58433: LD_EXP 50
58437: PPUSH
58438: LD_VAR 0 4
58442: PPUSH
58443: EMPTY
58444: PPUSH
58445: CALL_OW 1
58449: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
58450: LD_ADDR_EXP 51
58454: PUSH
58455: LD_EXP 51
58459: PPUSH
58460: LD_VAR 0 4
58464: PPUSH
58465: EMPTY
58466: PPUSH
58467: CALL_OW 1
58471: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
58472: LD_ADDR_EXP 52
58476: PUSH
58477: LD_EXP 52
58481: PPUSH
58482: LD_VAR 0 4
58486: PPUSH
58487: EMPTY
58488: PPUSH
58489: CALL_OW 1
58493: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
58494: LD_ADDR_EXP 53
58498: PUSH
58499: LD_EXP 53
58503: PPUSH
58504: LD_VAR 0 4
58508: PPUSH
58509: EMPTY
58510: PPUSH
58511: CALL_OW 1
58515: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
58516: LD_ADDR_EXP 54
58520: PUSH
58521: LD_EXP 54
58525: PPUSH
58526: LD_VAR 0 4
58530: PPUSH
58531: EMPTY
58532: PPUSH
58533: CALL_OW 1
58537: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
58538: LD_ADDR_EXP 55
58542: PUSH
58543: LD_EXP 55
58547: PPUSH
58548: LD_VAR 0 4
58552: PPUSH
58553: EMPTY
58554: PPUSH
58555: CALL_OW 1
58559: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
58560: LD_ADDR_EXP 56
58564: PUSH
58565: LD_EXP 56
58569: PPUSH
58570: LD_VAR 0 4
58574: PPUSH
58575: EMPTY
58576: PPUSH
58577: CALL_OW 1
58581: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
58582: LD_ADDR_EXP 57
58586: PUSH
58587: LD_EXP 57
58591: PPUSH
58592: LD_VAR 0 4
58596: PPUSH
58597: EMPTY
58598: PPUSH
58599: CALL_OW 1
58603: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
58604: LD_ADDR_EXP 58
58608: PUSH
58609: LD_EXP 58
58613: PPUSH
58614: LD_VAR 0 4
58618: PPUSH
58619: LD_INT 0
58621: PPUSH
58622: CALL_OW 1
58626: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
58627: LD_ADDR_EXP 59
58631: PUSH
58632: LD_EXP 59
58636: PPUSH
58637: LD_VAR 0 4
58641: PPUSH
58642: EMPTY
58643: PPUSH
58644: CALL_OW 1
58648: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
58649: LD_ADDR_EXP 60
58653: PUSH
58654: LD_EXP 60
58658: PPUSH
58659: LD_VAR 0 4
58663: PPUSH
58664: EMPTY
58665: PPUSH
58666: CALL_OW 1
58670: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
58671: LD_ADDR_EXP 61
58675: PUSH
58676: LD_EXP 61
58680: PPUSH
58681: LD_VAR 0 4
58685: PPUSH
58686: EMPTY
58687: PPUSH
58688: CALL_OW 1
58692: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
58693: LD_ADDR_EXP 62
58697: PUSH
58698: LD_EXP 62
58702: PPUSH
58703: LD_VAR 0 4
58707: PPUSH
58708: EMPTY
58709: PPUSH
58710: CALL_OW 1
58714: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
58715: LD_ADDR_EXP 63
58719: PUSH
58720: LD_EXP 63
58724: PPUSH
58725: LD_VAR 0 4
58729: PPUSH
58730: EMPTY
58731: PPUSH
58732: CALL_OW 1
58736: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
58737: LD_ADDR_EXP 64
58741: PUSH
58742: LD_EXP 64
58746: PPUSH
58747: LD_VAR 0 4
58751: PPUSH
58752: EMPTY
58753: PPUSH
58754: CALL_OW 1
58758: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
58759: LD_ADDR_EXP 65
58763: PUSH
58764: LD_EXP 65
58768: PPUSH
58769: LD_VAR 0 4
58773: PPUSH
58774: EMPTY
58775: PPUSH
58776: CALL_OW 1
58780: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
58781: LD_ADDR_EXP 66
58785: PUSH
58786: LD_EXP 66
58790: PPUSH
58791: LD_VAR 0 4
58795: PPUSH
58796: EMPTY
58797: PPUSH
58798: CALL_OW 1
58802: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
58803: LD_ADDR_EXP 67
58807: PUSH
58808: LD_EXP 67
58812: PPUSH
58813: LD_VAR 0 4
58817: PPUSH
58818: EMPTY
58819: PPUSH
58820: CALL_OW 1
58824: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
58825: LD_ADDR_EXP 68
58829: PUSH
58830: LD_EXP 68
58834: PPUSH
58835: LD_VAR 0 4
58839: PPUSH
58840: EMPTY
58841: PPUSH
58842: CALL_OW 1
58846: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
58847: LD_ADDR_EXP 69
58851: PUSH
58852: LD_EXP 69
58856: PPUSH
58857: LD_VAR 0 4
58861: PPUSH
58862: EMPTY
58863: PPUSH
58864: CALL_OW 1
58868: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
58869: LD_ADDR_EXP 70
58873: PUSH
58874: LD_EXP 70
58878: PPUSH
58879: LD_VAR 0 4
58883: PPUSH
58884: EMPTY
58885: PPUSH
58886: CALL_OW 1
58890: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
58891: LD_ADDR_EXP 71
58895: PUSH
58896: LD_EXP 71
58900: PPUSH
58901: LD_VAR 0 4
58905: PPUSH
58906: EMPTY
58907: PPUSH
58908: CALL_OW 1
58912: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
58913: LD_ADDR_EXP 72
58917: PUSH
58918: LD_EXP 72
58922: PPUSH
58923: LD_VAR 0 4
58927: PPUSH
58928: EMPTY
58929: PPUSH
58930: CALL_OW 1
58934: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
58935: LD_ADDR_EXP 74
58939: PUSH
58940: LD_EXP 74
58944: PPUSH
58945: LD_VAR 0 4
58949: PPUSH
58950: EMPTY
58951: PPUSH
58952: CALL_OW 1
58956: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
58957: LD_ADDR_EXP 76
58961: PUSH
58962: LD_EXP 76
58966: PPUSH
58967: LD_VAR 0 4
58971: PPUSH
58972: EMPTY
58973: PPUSH
58974: CALL_OW 1
58978: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
58979: LD_ADDR_EXP 77
58983: PUSH
58984: LD_EXP 77
58988: PPUSH
58989: LD_VAR 0 4
58993: PPUSH
58994: EMPTY
58995: PPUSH
58996: CALL_OW 1
59000: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
59001: LD_ADDR_EXP 78
59005: PUSH
59006: LD_EXP 78
59010: PPUSH
59011: LD_VAR 0 4
59015: PPUSH
59016: EMPTY
59017: PPUSH
59018: CALL_OW 1
59022: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
59023: LD_ADDR_EXP 79
59027: PUSH
59028: LD_EXP 79
59032: PPUSH
59033: LD_VAR 0 4
59037: PPUSH
59038: EMPTY
59039: PPUSH
59040: CALL_OW 1
59044: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
59045: LD_ADDR_EXP 80
59049: PUSH
59050: LD_EXP 80
59054: PPUSH
59055: LD_VAR 0 4
59059: PPUSH
59060: EMPTY
59061: PPUSH
59062: CALL_OW 1
59066: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
59067: LD_ADDR_EXP 81
59071: PUSH
59072: LD_EXP 81
59076: PPUSH
59077: LD_VAR 0 4
59081: PPUSH
59082: EMPTY
59083: PPUSH
59084: CALL_OW 1
59088: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
59089: LD_ADDR_EXP 82
59093: PUSH
59094: LD_EXP 82
59098: PPUSH
59099: LD_VAR 0 4
59103: PPUSH
59104: EMPTY
59105: PPUSH
59106: CALL_OW 1
59110: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
59111: LD_ADDR_EXP 83
59115: PUSH
59116: LD_EXP 83
59120: PPUSH
59121: LD_VAR 0 4
59125: PPUSH
59126: EMPTY
59127: PPUSH
59128: CALL_OW 1
59132: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
59133: LD_ADDR_EXP 84
59137: PUSH
59138: LD_EXP 84
59142: PPUSH
59143: LD_VAR 0 4
59147: PPUSH
59148: EMPTY
59149: PPUSH
59150: CALL_OW 1
59154: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
59155: LD_ADDR_EXP 85
59159: PUSH
59160: LD_EXP 85
59164: PPUSH
59165: LD_VAR 0 4
59169: PPUSH
59170: EMPTY
59171: PPUSH
59172: CALL_OW 1
59176: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
59177: LD_ADDR_EXP 86
59181: PUSH
59182: LD_EXP 86
59186: PPUSH
59187: LD_VAR 0 4
59191: PPUSH
59192: EMPTY
59193: PPUSH
59194: CALL_OW 1
59198: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
59199: LD_ADDR_EXP 87
59203: PUSH
59204: LD_EXP 87
59208: PPUSH
59209: LD_VAR 0 4
59213: PPUSH
59214: EMPTY
59215: PPUSH
59216: CALL_OW 1
59220: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
59221: LD_ADDR_EXP 88
59225: PUSH
59226: LD_EXP 88
59230: PPUSH
59231: LD_VAR 0 4
59235: PPUSH
59236: EMPTY
59237: PPUSH
59238: CALL_OW 1
59242: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
59243: LD_ADDR_EXP 89
59247: PUSH
59248: LD_EXP 89
59252: PPUSH
59253: LD_VAR 0 4
59257: PPUSH
59258: LD_INT 0
59260: PPUSH
59261: CALL_OW 1
59265: ST_TO_ADDR
// result := base ;
59266: LD_ADDR_VAR 0 3
59270: PUSH
59271: LD_VAR 0 4
59275: ST_TO_ADDR
// end ;
59276: LD_VAR 0 3
59280: RET
// export function MC_Start ( ) ; var i ; begin
59281: LD_INT 0
59283: PPUSH
59284: PPUSH
// for i = 1 to mc_bases do
59285: LD_ADDR_VAR 0 2
59289: PUSH
59290: DOUBLE
59291: LD_INT 1
59293: DEC
59294: ST_TO_ADDR
59295: LD_EXP 47
59299: PUSH
59300: FOR_TO
59301: IFFALSE 60378
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
59303: LD_ADDR_EXP 47
59307: PUSH
59308: LD_EXP 47
59312: PPUSH
59313: LD_VAR 0 2
59317: PPUSH
59318: LD_EXP 47
59322: PUSH
59323: LD_VAR 0 2
59327: ARRAY
59328: PUSH
59329: LD_INT 0
59331: DIFF
59332: PPUSH
59333: CALL_OW 1
59337: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
59338: LD_ADDR_EXP 48
59342: PUSH
59343: LD_EXP 48
59347: PPUSH
59348: LD_VAR 0 2
59352: PPUSH
59353: EMPTY
59354: PPUSH
59355: CALL_OW 1
59359: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
59360: LD_ADDR_EXP 49
59364: PUSH
59365: LD_EXP 49
59369: PPUSH
59370: LD_VAR 0 2
59374: PPUSH
59375: EMPTY
59376: PPUSH
59377: CALL_OW 1
59381: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
59382: LD_ADDR_EXP 50
59386: PUSH
59387: LD_EXP 50
59391: PPUSH
59392: LD_VAR 0 2
59396: PPUSH
59397: EMPTY
59398: PPUSH
59399: CALL_OW 1
59403: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
59404: LD_ADDR_EXP 51
59408: PUSH
59409: LD_EXP 51
59413: PPUSH
59414: LD_VAR 0 2
59418: PPUSH
59419: EMPTY
59420: PUSH
59421: EMPTY
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PPUSH
59427: CALL_OW 1
59431: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
59432: LD_ADDR_EXP 52
59436: PUSH
59437: LD_EXP 52
59441: PPUSH
59442: LD_VAR 0 2
59446: PPUSH
59447: EMPTY
59448: PPUSH
59449: CALL_OW 1
59453: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
59454: LD_ADDR_EXP 79
59458: PUSH
59459: LD_EXP 79
59463: PPUSH
59464: LD_VAR 0 2
59468: PPUSH
59469: EMPTY
59470: PPUSH
59471: CALL_OW 1
59475: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
59476: LD_ADDR_EXP 53
59480: PUSH
59481: LD_EXP 53
59485: PPUSH
59486: LD_VAR 0 2
59490: PPUSH
59491: EMPTY
59492: PPUSH
59493: CALL_OW 1
59497: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
59498: LD_ADDR_EXP 54
59502: PUSH
59503: LD_EXP 54
59507: PPUSH
59508: LD_VAR 0 2
59512: PPUSH
59513: EMPTY
59514: PPUSH
59515: CALL_OW 1
59519: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
59520: LD_ADDR_EXP 55
59524: PUSH
59525: LD_EXP 55
59529: PPUSH
59530: LD_VAR 0 2
59534: PPUSH
59535: LD_EXP 47
59539: PUSH
59540: LD_VAR 0 2
59544: ARRAY
59545: PPUSH
59546: LD_INT 2
59548: PUSH
59549: LD_INT 30
59551: PUSH
59552: LD_INT 32
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 30
59561: PUSH
59562: LD_INT 33
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: LIST
59573: PPUSH
59574: CALL_OW 72
59578: PPUSH
59579: CALL_OW 1
59583: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
59584: LD_ADDR_EXP 56
59588: PUSH
59589: LD_EXP 56
59593: PPUSH
59594: LD_VAR 0 2
59598: PPUSH
59599: LD_EXP 47
59603: PUSH
59604: LD_VAR 0 2
59608: ARRAY
59609: PPUSH
59610: LD_INT 2
59612: PUSH
59613: LD_INT 30
59615: PUSH
59616: LD_INT 32
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 30
59625: PUSH
59626: LD_INT 31
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 58
59640: PUSH
59641: EMPTY
59642: LIST
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PPUSH
59648: CALL_OW 72
59652: PPUSH
59653: CALL_OW 1
59657: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
59658: LD_ADDR_EXP 57
59662: PUSH
59663: LD_EXP 57
59667: PPUSH
59668: LD_VAR 0 2
59672: PPUSH
59673: EMPTY
59674: PPUSH
59675: CALL_OW 1
59679: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
59680: LD_ADDR_EXP 61
59684: PUSH
59685: LD_EXP 61
59689: PPUSH
59690: LD_VAR 0 2
59694: PPUSH
59695: EMPTY
59696: PPUSH
59697: CALL_OW 1
59701: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
59702: LD_ADDR_EXP 60
59706: PUSH
59707: LD_EXP 60
59711: PPUSH
59712: LD_VAR 0 2
59716: PPUSH
59717: EMPTY
59718: PPUSH
59719: CALL_OW 1
59723: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
59724: LD_ADDR_EXP 62
59728: PUSH
59729: LD_EXP 62
59733: PPUSH
59734: LD_VAR 0 2
59738: PPUSH
59739: EMPTY
59740: PPUSH
59741: CALL_OW 1
59745: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
59746: LD_ADDR_EXP 63
59750: PUSH
59751: LD_EXP 63
59755: PPUSH
59756: LD_VAR 0 2
59760: PPUSH
59761: EMPTY
59762: PPUSH
59763: CALL_OW 1
59767: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
59768: LD_ADDR_EXP 64
59772: PUSH
59773: LD_EXP 64
59777: PPUSH
59778: LD_VAR 0 2
59782: PPUSH
59783: EMPTY
59784: PPUSH
59785: CALL_OW 1
59789: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
59790: LD_ADDR_EXP 65
59794: PUSH
59795: LD_EXP 65
59799: PPUSH
59800: LD_VAR 0 2
59804: PPUSH
59805: EMPTY
59806: PPUSH
59807: CALL_OW 1
59811: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
59812: LD_ADDR_EXP 66
59816: PUSH
59817: LD_EXP 66
59821: PPUSH
59822: LD_VAR 0 2
59826: PPUSH
59827: EMPTY
59828: PPUSH
59829: CALL_OW 1
59833: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
59834: LD_ADDR_EXP 67
59838: PUSH
59839: LD_EXP 67
59843: PPUSH
59844: LD_VAR 0 2
59848: PPUSH
59849: EMPTY
59850: PPUSH
59851: CALL_OW 1
59855: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
59856: LD_ADDR_EXP 68
59860: PUSH
59861: LD_EXP 68
59865: PPUSH
59866: LD_VAR 0 2
59870: PPUSH
59871: EMPTY
59872: PPUSH
59873: CALL_OW 1
59877: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
59878: LD_ADDR_EXP 69
59882: PUSH
59883: LD_EXP 69
59887: PPUSH
59888: LD_VAR 0 2
59892: PPUSH
59893: EMPTY
59894: PPUSH
59895: CALL_OW 1
59899: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
59900: LD_ADDR_EXP 58
59904: PUSH
59905: LD_EXP 58
59909: PPUSH
59910: LD_VAR 0 2
59914: PPUSH
59915: LD_INT 0
59917: PPUSH
59918: CALL_OW 1
59922: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
59923: LD_ADDR_EXP 71
59927: PUSH
59928: LD_EXP 71
59932: PPUSH
59933: LD_VAR 0 2
59937: PPUSH
59938: LD_INT 0
59940: PPUSH
59941: CALL_OW 1
59945: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
59946: LD_ADDR_EXP 59
59950: PUSH
59951: LD_EXP 59
59955: PPUSH
59956: LD_VAR 0 2
59960: PPUSH
59961: EMPTY
59962: PPUSH
59963: CALL_OW 1
59967: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
59968: LD_ADDR_EXP 70
59972: PUSH
59973: LD_EXP 70
59977: PPUSH
59978: LD_VAR 0 2
59982: PPUSH
59983: LD_INT 0
59985: PPUSH
59986: CALL_OW 1
59990: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
59991: LD_ADDR_EXP 72
59995: PUSH
59996: LD_EXP 72
60000: PPUSH
60001: LD_VAR 0 2
60005: PPUSH
60006: EMPTY
60007: PPUSH
60008: CALL_OW 1
60012: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
60013: LD_ADDR_EXP 75
60017: PUSH
60018: LD_EXP 75
60022: PPUSH
60023: LD_VAR 0 2
60027: PPUSH
60028: LD_INT 0
60030: PPUSH
60031: CALL_OW 1
60035: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
60036: LD_ADDR_EXP 76
60040: PUSH
60041: LD_EXP 76
60045: PPUSH
60046: LD_VAR 0 2
60050: PPUSH
60051: EMPTY
60052: PPUSH
60053: CALL_OW 1
60057: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
60058: LD_ADDR_EXP 77
60062: PUSH
60063: LD_EXP 77
60067: PPUSH
60068: LD_VAR 0 2
60072: PPUSH
60073: EMPTY
60074: PPUSH
60075: CALL_OW 1
60079: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
60080: LD_ADDR_EXP 78
60084: PUSH
60085: LD_EXP 78
60089: PPUSH
60090: LD_VAR 0 2
60094: PPUSH
60095: EMPTY
60096: PPUSH
60097: CALL_OW 1
60101: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
60102: LD_ADDR_EXP 80
60106: PUSH
60107: LD_EXP 80
60111: PPUSH
60112: LD_VAR 0 2
60116: PPUSH
60117: LD_EXP 47
60121: PUSH
60122: LD_VAR 0 2
60126: ARRAY
60127: PPUSH
60128: LD_INT 2
60130: PUSH
60131: LD_INT 30
60133: PUSH
60134: LD_INT 6
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 30
60143: PUSH
60144: LD_INT 7
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 30
60153: PUSH
60154: LD_INT 8
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: PPUSH
60167: CALL_OW 72
60171: PPUSH
60172: CALL_OW 1
60176: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
60177: LD_ADDR_EXP 81
60181: PUSH
60182: LD_EXP 81
60186: PPUSH
60187: LD_VAR 0 2
60191: PPUSH
60192: EMPTY
60193: PPUSH
60194: CALL_OW 1
60198: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
60199: LD_ADDR_EXP 82
60203: PUSH
60204: LD_EXP 82
60208: PPUSH
60209: LD_VAR 0 2
60213: PPUSH
60214: EMPTY
60215: PPUSH
60216: CALL_OW 1
60220: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
60221: LD_ADDR_EXP 83
60225: PUSH
60226: LD_EXP 83
60230: PPUSH
60231: LD_VAR 0 2
60235: PPUSH
60236: EMPTY
60237: PPUSH
60238: CALL_OW 1
60242: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
60243: LD_ADDR_EXP 84
60247: PUSH
60248: LD_EXP 84
60252: PPUSH
60253: LD_VAR 0 2
60257: PPUSH
60258: EMPTY
60259: PPUSH
60260: CALL_OW 1
60264: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
60265: LD_ADDR_EXP 85
60269: PUSH
60270: LD_EXP 85
60274: PPUSH
60275: LD_VAR 0 2
60279: PPUSH
60280: EMPTY
60281: PPUSH
60282: CALL_OW 1
60286: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
60287: LD_ADDR_EXP 86
60291: PUSH
60292: LD_EXP 86
60296: PPUSH
60297: LD_VAR 0 2
60301: PPUSH
60302: EMPTY
60303: PPUSH
60304: CALL_OW 1
60308: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
60309: LD_ADDR_EXP 87
60313: PUSH
60314: LD_EXP 87
60318: PPUSH
60319: LD_VAR 0 2
60323: PPUSH
60324: EMPTY
60325: PPUSH
60326: CALL_OW 1
60330: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
60331: LD_ADDR_EXP 88
60335: PUSH
60336: LD_EXP 88
60340: PPUSH
60341: LD_VAR 0 2
60345: PPUSH
60346: EMPTY
60347: PPUSH
60348: CALL_OW 1
60352: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
60353: LD_ADDR_EXP 89
60357: PUSH
60358: LD_EXP 89
60362: PPUSH
60363: LD_VAR 0 2
60367: PPUSH
60368: LD_INT 0
60370: PPUSH
60371: CALL_OW 1
60375: ST_TO_ADDR
// end ;
60376: GO 59300
60378: POP
60379: POP
// MC_InitSides ( ) ;
60380: CALL 60666 0 0
// MC_InitResearch ( ) ;
60384: CALL 60405 0 0
// CustomInitMacro ( ) ;
60388: CALL 1400 0 0
// skirmish := true ;
60392: LD_ADDR_EXP 45
60396: PUSH
60397: LD_INT 1
60399: ST_TO_ADDR
// end ;
60400: LD_VAR 0 1
60404: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
60405: LD_INT 0
60407: PPUSH
60408: PPUSH
60409: PPUSH
60410: PPUSH
60411: PPUSH
60412: PPUSH
// if not mc_bases then
60413: LD_EXP 47
60417: NOT
60418: IFFALSE 60422
// exit ;
60420: GO 60661
// for i = 1 to 8 do
60422: LD_ADDR_VAR 0 2
60426: PUSH
60427: DOUBLE
60428: LD_INT 1
60430: DEC
60431: ST_TO_ADDR
60432: LD_INT 8
60434: PUSH
60435: FOR_TO
60436: IFFALSE 60462
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
60438: LD_ADDR_EXP 74
60442: PUSH
60443: LD_EXP 74
60447: PPUSH
60448: LD_VAR 0 2
60452: PPUSH
60453: EMPTY
60454: PPUSH
60455: CALL_OW 1
60459: ST_TO_ADDR
60460: GO 60435
60462: POP
60463: POP
// tmp := [ ] ;
60464: LD_ADDR_VAR 0 5
60468: PUSH
60469: EMPTY
60470: ST_TO_ADDR
// for i = 1 to mc_sides do
60471: LD_ADDR_VAR 0 2
60475: PUSH
60476: DOUBLE
60477: LD_INT 1
60479: DEC
60480: ST_TO_ADDR
60481: LD_EXP 73
60485: PUSH
60486: FOR_TO
60487: IFFALSE 60545
// if not mc_sides [ i ] in tmp then
60489: LD_EXP 73
60493: PUSH
60494: LD_VAR 0 2
60498: ARRAY
60499: PUSH
60500: LD_VAR 0 5
60504: IN
60505: NOT
60506: IFFALSE 60543
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
60508: LD_ADDR_VAR 0 5
60512: PUSH
60513: LD_VAR 0 5
60517: PPUSH
60518: LD_VAR 0 5
60522: PUSH
60523: LD_INT 1
60525: PLUS
60526: PPUSH
60527: LD_EXP 73
60531: PUSH
60532: LD_VAR 0 2
60536: ARRAY
60537: PPUSH
60538: CALL_OW 2
60542: ST_TO_ADDR
60543: GO 60486
60545: POP
60546: POP
// if not tmp then
60547: LD_VAR 0 5
60551: NOT
60552: IFFALSE 60556
// exit ;
60554: GO 60661
// for j in tmp do
60556: LD_ADDR_VAR 0 3
60560: PUSH
60561: LD_VAR 0 5
60565: PUSH
60566: FOR_IN
60567: IFFALSE 60659
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
60569: LD_ADDR_VAR 0 6
60573: PUSH
60574: LD_INT 22
60576: PUSH
60577: LD_VAR 0 3
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PPUSH
60586: CALL_OW 69
60590: ST_TO_ADDR
// if not un then
60591: LD_VAR 0 6
60595: NOT
60596: IFFALSE 60600
// continue ;
60598: GO 60566
// nation := GetNation ( un [ 1 ] ) ;
60600: LD_ADDR_VAR 0 4
60604: PUSH
60605: LD_VAR 0 6
60609: PUSH
60610: LD_INT 1
60612: ARRAY
60613: PPUSH
60614: CALL_OW 248
60618: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
60619: LD_ADDR_EXP 74
60623: PUSH
60624: LD_EXP 74
60628: PPUSH
60629: LD_VAR 0 3
60633: PPUSH
60634: LD_VAR 0 3
60638: PPUSH
60639: LD_VAR 0 4
60643: PPUSH
60644: LD_INT 1
60646: PPUSH
60647: CALL 19432 0 3
60651: PPUSH
60652: CALL_OW 1
60656: ST_TO_ADDR
// end ;
60657: GO 60566
60659: POP
60660: POP
// end ;
60661: LD_VAR 0 1
60665: RET
// export function MC_InitSides ( ) ; var i ; begin
60666: LD_INT 0
60668: PPUSH
60669: PPUSH
// if not mc_bases then
60670: LD_EXP 47
60674: NOT
60675: IFFALSE 60679
// exit ;
60677: GO 60753
// for i = 1 to mc_bases do
60679: LD_ADDR_VAR 0 2
60683: PUSH
60684: DOUBLE
60685: LD_INT 1
60687: DEC
60688: ST_TO_ADDR
60689: LD_EXP 47
60693: PUSH
60694: FOR_TO
60695: IFFALSE 60751
// if mc_bases [ i ] then
60697: LD_EXP 47
60701: PUSH
60702: LD_VAR 0 2
60706: ARRAY
60707: IFFALSE 60749
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
60709: LD_ADDR_EXP 73
60713: PUSH
60714: LD_EXP 73
60718: PPUSH
60719: LD_VAR 0 2
60723: PPUSH
60724: LD_EXP 47
60728: PUSH
60729: LD_VAR 0 2
60733: ARRAY
60734: PUSH
60735: LD_INT 1
60737: ARRAY
60738: PPUSH
60739: CALL_OW 255
60743: PPUSH
60744: CALL_OW 1
60748: ST_TO_ADDR
60749: GO 60694
60751: POP
60752: POP
// end ;
60753: LD_VAR 0 1
60757: RET
// every 0 0$03 trigger skirmish do
60758: LD_EXP 45
60762: IFFALSE 60916
60764: GO 60766
60766: DISABLE
// begin enable ;
60767: ENABLE
// MC_CheckBuildings ( ) ;
60768: CALL 65414 0 0
// MC_CheckPeopleLife ( ) ;
60772: CALL 65539 0 0
// RaiseSailEvent ( 100 ) ;
60776: LD_INT 100
60778: PPUSH
60779: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
60783: LD_INT 103
60785: PPUSH
60786: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
60790: LD_INT 104
60792: PPUSH
60793: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
60797: LD_INT 105
60799: PPUSH
60800: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
60804: LD_INT 106
60806: PPUSH
60807: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
60811: LD_INT 107
60813: PPUSH
60814: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
60818: LD_INT 108
60820: PPUSH
60821: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
60825: LD_INT 109
60827: PPUSH
60828: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
60832: LD_INT 110
60834: PPUSH
60835: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
60839: LD_INT 111
60841: PPUSH
60842: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
60846: LD_INT 112
60848: PPUSH
60849: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
60853: LD_INT 113
60855: PPUSH
60856: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
60860: LD_INT 120
60862: PPUSH
60863: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
60867: LD_INT 121
60869: PPUSH
60870: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
60874: LD_INT 122
60876: PPUSH
60877: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
60881: LD_INT 123
60883: PPUSH
60884: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
60888: LD_INT 124
60890: PPUSH
60891: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
60895: LD_INT 125
60897: PPUSH
60898: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
60902: LD_INT 126
60904: PPUSH
60905: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
60909: LD_INT 200
60911: PPUSH
60912: CALL_OW 427
// end ;
60916: END
// on SailEvent ( event ) do begin if event < 100 then
60917: LD_VAR 0 1
60921: PUSH
60922: LD_INT 100
60924: LESS
60925: IFFALSE 60936
// CustomEvent ( event ) ;
60927: LD_VAR 0 1
60931: PPUSH
60932: CALL 18610 0 1
// if event = 100 then
60936: LD_VAR 0 1
60940: PUSH
60941: LD_INT 100
60943: EQUAL
60944: IFFALSE 60950
// MC_ClassManager ( ) ;
60946: CALL 61342 0 0
// if event = 101 then
60950: LD_VAR 0 1
60954: PUSH
60955: LD_INT 101
60957: EQUAL
60958: IFFALSE 60964
// MC_RepairBuildings ( ) ;
60960: CALL 66124 0 0
// if event = 102 then
60964: LD_VAR 0 1
60968: PUSH
60969: LD_INT 102
60971: EQUAL
60972: IFFALSE 60978
// MC_Heal ( ) ;
60974: CALL 67009 0 0
// if event = 103 then
60978: LD_VAR 0 1
60982: PUSH
60983: LD_INT 103
60985: EQUAL
60986: IFFALSE 60992
// MC_Build ( ) ;
60988: CALL 67431 0 0
// if event = 104 then
60992: LD_VAR 0 1
60996: PUSH
60997: LD_INT 104
60999: EQUAL
61000: IFFALSE 61006
// MC_TurretWeapon ( ) ;
61002: CALL 69072 0 0
// if event = 105 then
61006: LD_VAR 0 1
61010: PUSH
61011: LD_INT 105
61013: EQUAL
61014: IFFALSE 61020
// MC_BuildUpgrade ( ) ;
61016: CALL 68623 0 0
// if event = 106 then
61020: LD_VAR 0 1
61024: PUSH
61025: LD_INT 106
61027: EQUAL
61028: IFFALSE 61034
// MC_PlantMines ( ) ;
61030: CALL 69502 0 0
// if event = 107 then
61034: LD_VAR 0 1
61038: PUSH
61039: LD_INT 107
61041: EQUAL
61042: IFFALSE 61048
// MC_CollectCrates ( ) ;
61044: CALL 70293 0 0
// if event = 108 then
61048: LD_VAR 0 1
61052: PUSH
61053: LD_INT 108
61055: EQUAL
61056: IFFALSE 61062
// MC_LinkRemoteControl ( ) ;
61058: CALL 72069 0 0
// if event = 109 then
61062: LD_VAR 0 1
61066: PUSH
61067: LD_INT 109
61069: EQUAL
61070: IFFALSE 61076
// MC_ProduceVehicle ( ) ;
61072: CALL 72250 0 0
// if event = 110 then
61076: LD_VAR 0 1
61080: PUSH
61081: LD_INT 110
61083: EQUAL
61084: IFFALSE 61090
// MC_SendAttack ( ) ;
61086: CALL 72716 0 0
// if event = 111 then
61090: LD_VAR 0 1
61094: PUSH
61095: LD_INT 111
61097: EQUAL
61098: IFFALSE 61104
// MC_Defend ( ) ;
61100: CALL 72824 0 0
// if event = 112 then
61104: LD_VAR 0 1
61108: PUSH
61109: LD_INT 112
61111: EQUAL
61112: IFFALSE 61118
// MC_Research ( ) ;
61114: CALL 73451 0 0
// if event = 113 then
61118: LD_VAR 0 1
61122: PUSH
61123: LD_INT 113
61125: EQUAL
61126: IFFALSE 61132
// MC_MinesTrigger ( ) ;
61128: CALL 74565 0 0
// if event = 120 then
61132: LD_VAR 0 1
61136: PUSH
61137: LD_INT 120
61139: EQUAL
61140: IFFALSE 61146
// MC_RepairVehicle ( ) ;
61142: CALL 74664 0 0
// if event = 121 then
61146: LD_VAR 0 1
61150: PUSH
61151: LD_INT 121
61153: EQUAL
61154: IFFALSE 61160
// MC_TameApe ( ) ;
61156: CALL 75394 0 0
// if event = 122 then
61160: LD_VAR 0 1
61164: PUSH
61165: LD_INT 122
61167: EQUAL
61168: IFFALSE 61174
// MC_ChangeApeClass ( ) ;
61170: CALL 76223 0 0
// if event = 123 then
61174: LD_VAR 0 1
61178: PUSH
61179: LD_INT 123
61181: EQUAL
61182: IFFALSE 61188
// MC_Bazooka ( ) ;
61184: CALL 76873 0 0
// if event = 124 then
61188: LD_VAR 0 1
61192: PUSH
61193: LD_INT 124
61195: EQUAL
61196: IFFALSE 61202
// MC_TeleportExit ( ) ;
61198: CALL 77071 0 0
// if event = 125 then
61202: LD_VAR 0 1
61206: PUSH
61207: LD_INT 125
61209: EQUAL
61210: IFFALSE 61216
// MC_Deposits ( ) ;
61212: CALL 77718 0 0
// if event = 126 then
61216: LD_VAR 0 1
61220: PUSH
61221: LD_INT 126
61223: EQUAL
61224: IFFALSE 61230
// MC_RemoteDriver ( ) ;
61226: CALL 78343 0 0
// if event = 200 then
61230: LD_VAR 0 1
61234: PUSH
61235: LD_INT 200
61237: EQUAL
61238: IFFALSE 61244
// MC_Idle ( ) ;
61240: CALL 80292 0 0
// end ;
61244: PPOPN 1
61246: END
// export function MC_Reset ( base , tag ) ; var i ; begin
61247: LD_INT 0
61249: PPUSH
61250: PPUSH
// if not mc_bases [ base ] or not tag then
61251: LD_EXP 47
61255: PUSH
61256: LD_VAR 0 1
61260: ARRAY
61261: NOT
61262: PUSH
61263: LD_VAR 0 2
61267: NOT
61268: OR
61269: IFFALSE 61273
// exit ;
61271: GO 61337
// for i in mc_bases [ base ] union mc_ape [ base ] do
61273: LD_ADDR_VAR 0 4
61277: PUSH
61278: LD_EXP 47
61282: PUSH
61283: LD_VAR 0 1
61287: ARRAY
61288: PUSH
61289: LD_EXP 76
61293: PUSH
61294: LD_VAR 0 1
61298: ARRAY
61299: UNION
61300: PUSH
61301: FOR_IN
61302: IFFALSE 61335
// if GetTag ( i ) = tag then
61304: LD_VAR 0 4
61308: PPUSH
61309: CALL_OW 110
61313: PUSH
61314: LD_VAR 0 2
61318: EQUAL
61319: IFFALSE 61333
// SetTag ( i , 0 ) ;
61321: LD_VAR 0 4
61325: PPUSH
61326: LD_INT 0
61328: PPUSH
61329: CALL_OW 109
61333: GO 61301
61335: POP
61336: POP
// end ;
61337: LD_VAR 0 3
61341: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
61342: LD_INT 0
61344: PPUSH
61345: PPUSH
61346: PPUSH
61347: PPUSH
61348: PPUSH
61349: PPUSH
61350: PPUSH
61351: PPUSH
// if not mc_bases then
61352: LD_EXP 47
61356: NOT
61357: IFFALSE 61361
// exit ;
61359: GO 61819
// for i = 1 to mc_bases do
61361: LD_ADDR_VAR 0 2
61365: PUSH
61366: DOUBLE
61367: LD_INT 1
61369: DEC
61370: ST_TO_ADDR
61371: LD_EXP 47
61375: PUSH
61376: FOR_TO
61377: IFFALSE 61817
// begin tmp := MC_ClassCheckReq ( i ) ;
61379: LD_ADDR_VAR 0 4
61383: PUSH
61384: LD_VAR 0 2
61388: PPUSH
61389: CALL 61824 0 1
61393: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
61394: LD_ADDR_EXP 88
61398: PUSH
61399: LD_EXP 88
61403: PPUSH
61404: LD_VAR 0 2
61408: PPUSH
61409: LD_VAR 0 4
61413: PPUSH
61414: CALL_OW 1
61418: ST_TO_ADDR
// if not tmp then
61419: LD_VAR 0 4
61423: NOT
61424: IFFALSE 61428
// continue ;
61426: GO 61376
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
61428: LD_ADDR_VAR 0 6
61432: PUSH
61433: LD_EXP 47
61437: PUSH
61438: LD_VAR 0 2
61442: ARRAY
61443: PPUSH
61444: LD_INT 2
61446: PUSH
61447: LD_INT 30
61449: PUSH
61450: LD_INT 4
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: LD_INT 30
61459: PUSH
61460: LD_INT 5
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: LIST
61471: PPUSH
61472: CALL_OW 72
61476: PUSH
61477: LD_EXP 47
61481: PUSH
61482: LD_VAR 0 2
61486: ARRAY
61487: PPUSH
61488: LD_INT 2
61490: PUSH
61491: LD_INT 30
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 30
61503: PUSH
61504: LD_INT 1
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: LIST
61515: PPUSH
61516: CALL_OW 72
61520: PUSH
61521: LD_EXP 47
61525: PUSH
61526: LD_VAR 0 2
61530: ARRAY
61531: PPUSH
61532: LD_INT 30
61534: PUSH
61535: LD_INT 3
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PPUSH
61542: CALL_OW 72
61546: PUSH
61547: LD_EXP 47
61551: PUSH
61552: LD_VAR 0 2
61556: ARRAY
61557: PPUSH
61558: LD_INT 2
61560: PUSH
61561: LD_INT 30
61563: PUSH
61564: LD_INT 6
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 30
61573: PUSH
61574: LD_INT 7
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 30
61583: PUSH
61584: LD_INT 8
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: PPUSH
61597: CALL_OW 72
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: ST_TO_ADDR
// for j = 1 to 4 do
61608: LD_ADDR_VAR 0 3
61612: PUSH
61613: DOUBLE
61614: LD_INT 1
61616: DEC
61617: ST_TO_ADDR
61618: LD_INT 4
61620: PUSH
61621: FOR_TO
61622: IFFALSE 61813
// begin if not tmp [ j ] then
61624: LD_VAR 0 4
61628: PUSH
61629: LD_VAR 0 3
61633: ARRAY
61634: NOT
61635: IFFALSE 61639
// continue ;
61637: GO 61621
// for p in tmp [ j ] do
61639: LD_ADDR_VAR 0 5
61643: PUSH
61644: LD_VAR 0 4
61648: PUSH
61649: LD_VAR 0 3
61653: ARRAY
61654: PUSH
61655: FOR_IN
61656: IFFALSE 61809
// begin if not b [ j ] then
61658: LD_VAR 0 6
61662: PUSH
61663: LD_VAR 0 3
61667: ARRAY
61668: NOT
61669: IFFALSE 61673
// break ;
61671: GO 61809
// e := 0 ;
61673: LD_ADDR_VAR 0 7
61677: PUSH
61678: LD_INT 0
61680: ST_TO_ADDR
// for k in b [ j ] do
61681: LD_ADDR_VAR 0 8
61685: PUSH
61686: LD_VAR 0 6
61690: PUSH
61691: LD_VAR 0 3
61695: ARRAY
61696: PUSH
61697: FOR_IN
61698: IFFALSE 61725
// if IsNotFull ( k ) then
61700: LD_VAR 0 8
61704: PPUSH
61705: CALL 21581 0 1
61709: IFFALSE 61723
// begin e := k ;
61711: LD_ADDR_VAR 0 7
61715: PUSH
61716: LD_VAR 0 8
61720: ST_TO_ADDR
// break ;
61721: GO 61725
// end ;
61723: GO 61697
61725: POP
61726: POP
// if e and not UnitGoingToBuilding ( p , e ) then
61727: LD_VAR 0 7
61731: PUSH
61732: LD_VAR 0 5
61736: PPUSH
61737: LD_VAR 0 7
61741: PPUSH
61742: CALL 54334 0 2
61746: NOT
61747: AND
61748: IFFALSE 61807
// begin if IsInUnit ( p ) then
61750: LD_VAR 0 5
61754: PPUSH
61755: CALL_OW 310
61759: IFFALSE 61770
// ComExitBuilding ( p ) ;
61761: LD_VAR 0 5
61765: PPUSH
61766: CALL_OW 122
// ComEnterUnit ( p , e ) ;
61770: LD_VAR 0 5
61774: PPUSH
61775: LD_VAR 0 7
61779: PPUSH
61780: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
61784: LD_VAR 0 5
61788: PPUSH
61789: LD_VAR 0 3
61793: PPUSH
61794: CALL_OW 183
// AddComExitBuilding ( p ) ;
61798: LD_VAR 0 5
61802: PPUSH
61803: CALL_OW 182
// end ; end ;
61807: GO 61655
61809: POP
61810: POP
// end ;
61811: GO 61621
61813: POP
61814: POP
// end ;
61815: GO 61376
61817: POP
61818: POP
// end ;
61819: LD_VAR 0 1
61823: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
61824: LD_INT 0
61826: PPUSH
61827: PPUSH
61828: PPUSH
61829: PPUSH
61830: PPUSH
61831: PPUSH
61832: PPUSH
61833: PPUSH
61834: PPUSH
61835: PPUSH
61836: PPUSH
61837: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
61838: LD_VAR 0 1
61842: NOT
61843: PUSH
61844: LD_EXP 47
61848: PUSH
61849: LD_VAR 0 1
61853: ARRAY
61854: NOT
61855: OR
61856: PUSH
61857: LD_EXP 47
61861: PUSH
61862: LD_VAR 0 1
61866: ARRAY
61867: PPUSH
61868: LD_INT 2
61870: PUSH
61871: LD_INT 30
61873: PUSH
61874: LD_INT 0
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 30
61883: PUSH
61884: LD_INT 1
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: LIST
61895: PPUSH
61896: CALL_OW 72
61900: NOT
61901: OR
61902: IFFALSE 61906
// exit ;
61904: GO 65409
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
61906: LD_ADDR_VAR 0 4
61910: PUSH
61911: LD_EXP 47
61915: PUSH
61916: LD_VAR 0 1
61920: ARRAY
61921: PPUSH
61922: LD_INT 2
61924: PUSH
61925: LD_INT 25
61927: PUSH
61928: LD_INT 1
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 25
61937: PUSH
61938: LD_INT 2
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 25
61947: PUSH
61948: LD_INT 3
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 25
61957: PUSH
61958: LD_INT 4
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 25
61967: PUSH
61968: LD_INT 5
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 25
61977: PUSH
61978: LD_INT 8
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 25
61987: PUSH
61988: LD_INT 9
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: PPUSH
62005: CALL_OW 72
62009: ST_TO_ADDR
// if not tmp then
62010: LD_VAR 0 4
62014: NOT
62015: IFFALSE 62019
// exit ;
62017: GO 65409
// for i in tmp do
62019: LD_ADDR_VAR 0 3
62023: PUSH
62024: LD_VAR 0 4
62028: PUSH
62029: FOR_IN
62030: IFFALSE 62061
// if GetTag ( i ) then
62032: LD_VAR 0 3
62036: PPUSH
62037: CALL_OW 110
62041: IFFALSE 62059
// tmp := tmp diff i ;
62043: LD_ADDR_VAR 0 4
62047: PUSH
62048: LD_VAR 0 4
62052: PUSH
62053: LD_VAR 0 3
62057: DIFF
62058: ST_TO_ADDR
62059: GO 62029
62061: POP
62062: POP
// if not tmp then
62063: LD_VAR 0 4
62067: NOT
62068: IFFALSE 62072
// exit ;
62070: GO 65409
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
62072: LD_ADDR_VAR 0 5
62076: PUSH
62077: LD_EXP 47
62081: PUSH
62082: LD_VAR 0 1
62086: ARRAY
62087: PPUSH
62088: LD_INT 2
62090: PUSH
62091: LD_INT 25
62093: PUSH
62094: LD_INT 1
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 25
62103: PUSH
62104: LD_INT 5
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 25
62113: PUSH
62114: LD_INT 8
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 25
62123: PUSH
62124: LD_INT 9
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: PPUSH
62138: CALL_OW 72
62142: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
62143: LD_ADDR_VAR 0 6
62147: PUSH
62148: LD_EXP 47
62152: PUSH
62153: LD_VAR 0 1
62157: ARRAY
62158: PPUSH
62159: LD_INT 25
62161: PUSH
62162: LD_INT 2
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PPUSH
62169: CALL_OW 72
62173: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
62174: LD_ADDR_VAR 0 7
62178: PUSH
62179: LD_EXP 47
62183: PUSH
62184: LD_VAR 0 1
62188: ARRAY
62189: PPUSH
62190: LD_INT 25
62192: PUSH
62193: LD_INT 3
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PPUSH
62200: CALL_OW 72
62204: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
62205: LD_ADDR_VAR 0 8
62209: PUSH
62210: LD_EXP 47
62214: PUSH
62215: LD_VAR 0 1
62219: ARRAY
62220: PPUSH
62221: LD_INT 25
62223: PUSH
62224: LD_INT 4
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 24
62233: PUSH
62234: LD_INT 251
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PPUSH
62245: CALL_OW 72
62249: ST_TO_ADDR
// if mc_scan [ base ] then
62250: LD_EXP 70
62254: PUSH
62255: LD_VAR 0 1
62259: ARRAY
62260: IFFALSE 62721
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
62262: LD_ADDR_EXP 89
62266: PUSH
62267: LD_EXP 89
62271: PPUSH
62272: LD_VAR 0 1
62276: PPUSH
62277: LD_INT 4
62279: PPUSH
62280: CALL_OW 1
62284: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
62285: LD_ADDR_VAR 0 12
62289: PUSH
62290: LD_EXP 47
62294: PUSH
62295: LD_VAR 0 1
62299: ARRAY
62300: PPUSH
62301: LD_INT 2
62303: PUSH
62304: LD_INT 30
62306: PUSH
62307: LD_INT 4
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 30
62316: PUSH
62317: LD_INT 5
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: LIST
62328: PPUSH
62329: CALL_OW 72
62333: ST_TO_ADDR
// if not b then
62334: LD_VAR 0 12
62338: NOT
62339: IFFALSE 62343
// exit ;
62341: GO 65409
// p := [ ] ;
62343: LD_ADDR_VAR 0 11
62347: PUSH
62348: EMPTY
62349: ST_TO_ADDR
// if sci >= 2 then
62350: LD_VAR 0 8
62354: PUSH
62355: LD_INT 2
62357: GREATEREQUAL
62358: IFFALSE 62389
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
62360: LD_ADDR_VAR 0 8
62364: PUSH
62365: LD_VAR 0 8
62369: PUSH
62370: LD_INT 1
62372: ARRAY
62373: PUSH
62374: LD_VAR 0 8
62378: PUSH
62379: LD_INT 2
62381: ARRAY
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: ST_TO_ADDR
62387: GO 62450
// if sci = 1 then
62389: LD_VAR 0 8
62393: PUSH
62394: LD_INT 1
62396: EQUAL
62397: IFFALSE 62418
// sci := [ sci [ 1 ] ] else
62399: LD_ADDR_VAR 0 8
62403: PUSH
62404: LD_VAR 0 8
62408: PUSH
62409: LD_INT 1
62411: ARRAY
62412: PUSH
62413: EMPTY
62414: LIST
62415: ST_TO_ADDR
62416: GO 62450
// if sci = 0 then
62418: LD_VAR 0 8
62422: PUSH
62423: LD_INT 0
62425: EQUAL
62426: IFFALSE 62450
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
62428: LD_ADDR_VAR 0 11
62432: PUSH
62433: LD_VAR 0 4
62437: PPUSH
62438: LD_INT 4
62440: PPUSH
62441: CALL 54197 0 2
62445: PUSH
62446: LD_INT 1
62448: ARRAY
62449: ST_TO_ADDR
// if eng > 4 then
62450: LD_VAR 0 6
62454: PUSH
62455: LD_INT 4
62457: GREATER
62458: IFFALSE 62504
// for i = eng downto 4 do
62460: LD_ADDR_VAR 0 3
62464: PUSH
62465: DOUBLE
62466: LD_VAR 0 6
62470: INC
62471: ST_TO_ADDR
62472: LD_INT 4
62474: PUSH
62475: FOR_DOWNTO
62476: IFFALSE 62502
// eng := eng diff eng [ i ] ;
62478: LD_ADDR_VAR 0 6
62482: PUSH
62483: LD_VAR 0 6
62487: PUSH
62488: LD_VAR 0 6
62492: PUSH
62493: LD_VAR 0 3
62497: ARRAY
62498: DIFF
62499: ST_TO_ADDR
62500: GO 62475
62502: POP
62503: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
62504: LD_ADDR_VAR 0 4
62508: PUSH
62509: LD_VAR 0 4
62513: PUSH
62514: LD_VAR 0 5
62518: PUSH
62519: LD_VAR 0 6
62523: UNION
62524: PUSH
62525: LD_VAR 0 7
62529: UNION
62530: PUSH
62531: LD_VAR 0 8
62535: UNION
62536: DIFF
62537: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
62538: LD_ADDR_VAR 0 13
62542: PUSH
62543: LD_EXP 47
62547: PUSH
62548: LD_VAR 0 1
62552: ARRAY
62553: PPUSH
62554: LD_INT 2
62556: PUSH
62557: LD_INT 30
62559: PUSH
62560: LD_INT 32
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 30
62569: PUSH
62570: LD_INT 31
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: LIST
62581: PPUSH
62582: CALL_OW 72
62586: PUSH
62587: LD_EXP 47
62591: PUSH
62592: LD_VAR 0 1
62596: ARRAY
62597: PPUSH
62598: LD_INT 2
62600: PUSH
62601: LD_INT 30
62603: PUSH
62604: LD_INT 4
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 30
62613: PUSH
62614: LD_INT 5
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: LIST
62625: PPUSH
62626: CALL_OW 72
62630: PUSH
62631: LD_INT 6
62633: MUL
62634: PLUS
62635: ST_TO_ADDR
// if bcount < tmp then
62636: LD_VAR 0 13
62640: PUSH
62641: LD_VAR 0 4
62645: LESS
62646: IFFALSE 62692
// for i = tmp downto bcount do
62648: LD_ADDR_VAR 0 3
62652: PUSH
62653: DOUBLE
62654: LD_VAR 0 4
62658: INC
62659: ST_TO_ADDR
62660: LD_VAR 0 13
62664: PUSH
62665: FOR_DOWNTO
62666: IFFALSE 62690
// tmp := Delete ( tmp , tmp ) ;
62668: LD_ADDR_VAR 0 4
62672: PUSH
62673: LD_VAR 0 4
62677: PPUSH
62678: LD_VAR 0 4
62682: PPUSH
62683: CALL_OW 3
62687: ST_TO_ADDR
62688: GO 62665
62690: POP
62691: POP
// result := [ tmp , 0 , 0 , p ] ;
62692: LD_ADDR_VAR 0 2
62696: PUSH
62697: LD_VAR 0 4
62701: PUSH
62702: LD_INT 0
62704: PUSH
62705: LD_INT 0
62707: PUSH
62708: LD_VAR 0 11
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: ST_TO_ADDR
// exit ;
62719: GO 65409
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
62721: LD_EXP 47
62725: PUSH
62726: LD_VAR 0 1
62730: ARRAY
62731: PPUSH
62732: LD_INT 2
62734: PUSH
62735: LD_INT 30
62737: PUSH
62738: LD_INT 6
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 30
62747: PUSH
62748: LD_INT 7
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 30
62757: PUSH
62758: LD_INT 8
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: PPUSH
62771: CALL_OW 72
62775: NOT
62776: PUSH
62777: LD_EXP 47
62781: PUSH
62782: LD_VAR 0 1
62786: ARRAY
62787: PPUSH
62788: LD_INT 30
62790: PUSH
62791: LD_INT 3
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PPUSH
62798: CALL_OW 72
62802: NOT
62803: AND
62804: IFFALSE 62876
// begin if eng = tmp then
62806: LD_VAR 0 6
62810: PUSH
62811: LD_VAR 0 4
62815: EQUAL
62816: IFFALSE 62820
// exit ;
62818: GO 65409
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
62820: LD_ADDR_EXP 89
62824: PUSH
62825: LD_EXP 89
62829: PPUSH
62830: LD_VAR 0 1
62834: PPUSH
62835: LD_INT 1
62837: PPUSH
62838: CALL_OW 1
62842: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
62843: LD_ADDR_VAR 0 2
62847: PUSH
62848: LD_INT 0
62850: PUSH
62851: LD_VAR 0 4
62855: PUSH
62856: LD_VAR 0 6
62860: DIFF
62861: PUSH
62862: LD_INT 0
62864: PUSH
62865: LD_INT 0
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: ST_TO_ADDR
// exit ;
62874: GO 65409
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
62876: LD_EXP 74
62880: PUSH
62881: LD_EXP 73
62885: PUSH
62886: LD_VAR 0 1
62890: ARRAY
62891: ARRAY
62892: PUSH
62893: LD_EXP 47
62897: PUSH
62898: LD_VAR 0 1
62902: ARRAY
62903: PPUSH
62904: LD_INT 2
62906: PUSH
62907: LD_INT 30
62909: PUSH
62910: LD_INT 6
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 30
62919: PUSH
62920: LD_INT 7
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 30
62929: PUSH
62930: LD_INT 8
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: PPUSH
62943: CALL_OW 72
62947: AND
62948: PUSH
62949: LD_EXP 47
62953: PUSH
62954: LD_VAR 0 1
62958: ARRAY
62959: PPUSH
62960: LD_INT 30
62962: PUSH
62963: LD_INT 3
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PPUSH
62970: CALL_OW 72
62974: NOT
62975: AND
62976: IFFALSE 63190
// begin if sci >= 6 then
62978: LD_VAR 0 8
62982: PUSH
62983: LD_INT 6
62985: GREATEREQUAL
62986: IFFALSE 62990
// exit ;
62988: GO 65409
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
62990: LD_ADDR_EXP 89
62994: PUSH
62995: LD_EXP 89
62999: PPUSH
63000: LD_VAR 0 1
63004: PPUSH
63005: LD_INT 2
63007: PPUSH
63008: CALL_OW 1
63012: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
63013: LD_ADDR_VAR 0 9
63017: PUSH
63018: LD_VAR 0 4
63022: PUSH
63023: LD_VAR 0 8
63027: DIFF
63028: PPUSH
63029: LD_INT 4
63031: PPUSH
63032: CALL 54197 0 2
63036: ST_TO_ADDR
// p := [ ] ;
63037: LD_ADDR_VAR 0 11
63041: PUSH
63042: EMPTY
63043: ST_TO_ADDR
// if sci < 6 and sort > 6 then
63044: LD_VAR 0 8
63048: PUSH
63049: LD_INT 6
63051: LESS
63052: PUSH
63053: LD_VAR 0 9
63057: PUSH
63058: LD_INT 6
63060: GREATER
63061: AND
63062: IFFALSE 63143
// begin for i = 1 to 6 - sci do
63064: LD_ADDR_VAR 0 3
63068: PUSH
63069: DOUBLE
63070: LD_INT 1
63072: DEC
63073: ST_TO_ADDR
63074: LD_INT 6
63076: PUSH
63077: LD_VAR 0 8
63081: MINUS
63082: PUSH
63083: FOR_TO
63084: IFFALSE 63139
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
63086: LD_ADDR_VAR 0 11
63090: PUSH
63091: LD_VAR 0 11
63095: PPUSH
63096: LD_VAR 0 11
63100: PUSH
63101: LD_INT 1
63103: PLUS
63104: PPUSH
63105: LD_VAR 0 9
63109: PUSH
63110: LD_INT 1
63112: ARRAY
63113: PPUSH
63114: CALL_OW 2
63118: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
63119: LD_ADDR_VAR 0 9
63123: PUSH
63124: LD_VAR 0 9
63128: PPUSH
63129: LD_INT 1
63131: PPUSH
63132: CALL_OW 3
63136: ST_TO_ADDR
// end ;
63137: GO 63083
63139: POP
63140: POP
// end else
63141: GO 63163
// if sort then
63143: LD_VAR 0 9
63147: IFFALSE 63163
// p := sort [ 1 ] ;
63149: LD_ADDR_VAR 0 11
63153: PUSH
63154: LD_VAR 0 9
63158: PUSH
63159: LD_INT 1
63161: ARRAY
63162: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
63163: LD_ADDR_VAR 0 2
63167: PUSH
63168: LD_INT 0
63170: PUSH
63171: LD_INT 0
63173: PUSH
63174: LD_INT 0
63176: PUSH
63177: LD_VAR 0 11
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: ST_TO_ADDR
// exit ;
63188: GO 65409
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
63190: LD_EXP 74
63194: PUSH
63195: LD_EXP 73
63199: PUSH
63200: LD_VAR 0 1
63204: ARRAY
63205: ARRAY
63206: PUSH
63207: LD_EXP 47
63211: PUSH
63212: LD_VAR 0 1
63216: ARRAY
63217: PPUSH
63218: LD_INT 2
63220: PUSH
63221: LD_INT 30
63223: PUSH
63224: LD_INT 6
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 30
63233: PUSH
63234: LD_INT 7
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 30
63243: PUSH
63244: LD_INT 8
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: PPUSH
63257: CALL_OW 72
63261: AND
63262: PUSH
63263: LD_EXP 47
63267: PUSH
63268: LD_VAR 0 1
63272: ARRAY
63273: PPUSH
63274: LD_INT 30
63276: PUSH
63277: LD_INT 3
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PPUSH
63284: CALL_OW 72
63288: AND
63289: IFFALSE 64023
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
63291: LD_ADDR_EXP 89
63295: PUSH
63296: LD_EXP 89
63300: PPUSH
63301: LD_VAR 0 1
63305: PPUSH
63306: LD_INT 3
63308: PPUSH
63309: CALL_OW 1
63313: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
63314: LD_ADDR_VAR 0 2
63318: PUSH
63319: LD_INT 0
63321: PUSH
63322: LD_INT 0
63324: PUSH
63325: LD_INT 0
63327: PUSH
63328: LD_INT 0
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: ST_TO_ADDR
// if not eng then
63337: LD_VAR 0 6
63341: NOT
63342: IFFALSE 63405
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
63344: LD_ADDR_VAR 0 11
63348: PUSH
63349: LD_VAR 0 4
63353: PPUSH
63354: LD_INT 2
63356: PPUSH
63357: CALL 54197 0 2
63361: PUSH
63362: LD_INT 1
63364: ARRAY
63365: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
63366: LD_ADDR_VAR 0 2
63370: PUSH
63371: LD_VAR 0 2
63375: PPUSH
63376: LD_INT 2
63378: PPUSH
63379: LD_VAR 0 11
63383: PPUSH
63384: CALL_OW 1
63388: ST_TO_ADDR
// tmp := tmp diff p ;
63389: LD_ADDR_VAR 0 4
63393: PUSH
63394: LD_VAR 0 4
63398: PUSH
63399: LD_VAR 0 11
63403: DIFF
63404: ST_TO_ADDR
// end ; if tmp and sci < 6 then
63405: LD_VAR 0 4
63409: PUSH
63410: LD_VAR 0 8
63414: PUSH
63415: LD_INT 6
63417: LESS
63418: AND
63419: IFFALSE 63607
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
63421: LD_ADDR_VAR 0 9
63425: PUSH
63426: LD_VAR 0 4
63430: PUSH
63431: LD_VAR 0 8
63435: PUSH
63436: LD_VAR 0 7
63440: UNION
63441: DIFF
63442: PPUSH
63443: LD_INT 4
63445: PPUSH
63446: CALL 54197 0 2
63450: ST_TO_ADDR
// p := [ ] ;
63451: LD_ADDR_VAR 0 11
63455: PUSH
63456: EMPTY
63457: ST_TO_ADDR
// if sort then
63458: LD_VAR 0 9
63462: IFFALSE 63578
// for i = 1 to 6 - sci do
63464: LD_ADDR_VAR 0 3
63468: PUSH
63469: DOUBLE
63470: LD_INT 1
63472: DEC
63473: ST_TO_ADDR
63474: LD_INT 6
63476: PUSH
63477: LD_VAR 0 8
63481: MINUS
63482: PUSH
63483: FOR_TO
63484: IFFALSE 63576
// begin if i = sort then
63486: LD_VAR 0 3
63490: PUSH
63491: LD_VAR 0 9
63495: EQUAL
63496: IFFALSE 63500
// break ;
63498: GO 63576
// if GetClass ( i ) = 4 then
63500: LD_VAR 0 3
63504: PPUSH
63505: CALL_OW 257
63509: PUSH
63510: LD_INT 4
63512: EQUAL
63513: IFFALSE 63517
// continue ;
63515: GO 63483
// p := Insert ( p , p + 1 , sort [ i ] ) ;
63517: LD_ADDR_VAR 0 11
63521: PUSH
63522: LD_VAR 0 11
63526: PPUSH
63527: LD_VAR 0 11
63531: PUSH
63532: LD_INT 1
63534: PLUS
63535: PPUSH
63536: LD_VAR 0 9
63540: PUSH
63541: LD_VAR 0 3
63545: ARRAY
63546: PPUSH
63547: CALL_OW 2
63551: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
63552: LD_ADDR_VAR 0 4
63556: PUSH
63557: LD_VAR 0 4
63561: PUSH
63562: LD_VAR 0 9
63566: PUSH
63567: LD_VAR 0 3
63571: ARRAY
63572: DIFF
63573: ST_TO_ADDR
// end ;
63574: GO 63483
63576: POP
63577: POP
// if p then
63578: LD_VAR 0 11
63582: IFFALSE 63607
// result := Replace ( result , 4 , p ) ;
63584: LD_ADDR_VAR 0 2
63588: PUSH
63589: LD_VAR 0 2
63593: PPUSH
63594: LD_INT 4
63596: PPUSH
63597: LD_VAR 0 11
63601: PPUSH
63602: CALL_OW 1
63606: ST_TO_ADDR
// end ; if tmp and mech < 6 then
63607: LD_VAR 0 4
63611: PUSH
63612: LD_VAR 0 7
63616: PUSH
63617: LD_INT 6
63619: LESS
63620: AND
63621: IFFALSE 63809
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
63623: LD_ADDR_VAR 0 9
63627: PUSH
63628: LD_VAR 0 4
63632: PUSH
63633: LD_VAR 0 8
63637: PUSH
63638: LD_VAR 0 7
63642: UNION
63643: DIFF
63644: PPUSH
63645: LD_INT 3
63647: PPUSH
63648: CALL 54197 0 2
63652: ST_TO_ADDR
// p := [ ] ;
63653: LD_ADDR_VAR 0 11
63657: PUSH
63658: EMPTY
63659: ST_TO_ADDR
// if sort then
63660: LD_VAR 0 9
63664: IFFALSE 63780
// for i = 1 to 6 - mech do
63666: LD_ADDR_VAR 0 3
63670: PUSH
63671: DOUBLE
63672: LD_INT 1
63674: DEC
63675: ST_TO_ADDR
63676: LD_INT 6
63678: PUSH
63679: LD_VAR 0 7
63683: MINUS
63684: PUSH
63685: FOR_TO
63686: IFFALSE 63778
// begin if i = sort then
63688: LD_VAR 0 3
63692: PUSH
63693: LD_VAR 0 9
63697: EQUAL
63698: IFFALSE 63702
// break ;
63700: GO 63778
// if GetClass ( i ) = 3 then
63702: LD_VAR 0 3
63706: PPUSH
63707: CALL_OW 257
63711: PUSH
63712: LD_INT 3
63714: EQUAL
63715: IFFALSE 63719
// continue ;
63717: GO 63685
// p := Insert ( p , p + 1 , sort [ i ] ) ;
63719: LD_ADDR_VAR 0 11
63723: PUSH
63724: LD_VAR 0 11
63728: PPUSH
63729: LD_VAR 0 11
63733: PUSH
63734: LD_INT 1
63736: PLUS
63737: PPUSH
63738: LD_VAR 0 9
63742: PUSH
63743: LD_VAR 0 3
63747: ARRAY
63748: PPUSH
63749: CALL_OW 2
63753: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
63754: LD_ADDR_VAR 0 4
63758: PUSH
63759: LD_VAR 0 4
63763: PUSH
63764: LD_VAR 0 9
63768: PUSH
63769: LD_VAR 0 3
63773: ARRAY
63774: DIFF
63775: ST_TO_ADDR
// end ;
63776: GO 63685
63778: POP
63779: POP
// if p then
63780: LD_VAR 0 11
63784: IFFALSE 63809
// result := Replace ( result , 3 , p ) ;
63786: LD_ADDR_VAR 0 2
63790: PUSH
63791: LD_VAR 0 2
63795: PPUSH
63796: LD_INT 3
63798: PPUSH
63799: LD_VAR 0 11
63803: PPUSH
63804: CALL_OW 1
63808: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
63809: LD_VAR 0 4
63813: PUSH
63814: LD_INT 6
63816: GREATER
63817: PUSH
63818: LD_VAR 0 6
63822: PUSH
63823: LD_INT 6
63825: LESS
63826: AND
63827: IFFALSE 64021
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
63829: LD_ADDR_VAR 0 9
63833: PUSH
63834: LD_VAR 0 4
63838: PUSH
63839: LD_VAR 0 8
63843: PUSH
63844: LD_VAR 0 7
63848: UNION
63849: PUSH
63850: LD_VAR 0 6
63854: UNION
63855: DIFF
63856: PPUSH
63857: LD_INT 2
63859: PPUSH
63860: CALL 54197 0 2
63864: ST_TO_ADDR
// p := [ ] ;
63865: LD_ADDR_VAR 0 11
63869: PUSH
63870: EMPTY
63871: ST_TO_ADDR
// if sort then
63872: LD_VAR 0 9
63876: IFFALSE 63992
// for i = 1 to 6 - eng do
63878: LD_ADDR_VAR 0 3
63882: PUSH
63883: DOUBLE
63884: LD_INT 1
63886: DEC
63887: ST_TO_ADDR
63888: LD_INT 6
63890: PUSH
63891: LD_VAR 0 6
63895: MINUS
63896: PUSH
63897: FOR_TO
63898: IFFALSE 63990
// begin if i = sort then
63900: LD_VAR 0 3
63904: PUSH
63905: LD_VAR 0 9
63909: EQUAL
63910: IFFALSE 63914
// break ;
63912: GO 63990
// if GetClass ( i ) = 2 then
63914: LD_VAR 0 3
63918: PPUSH
63919: CALL_OW 257
63923: PUSH
63924: LD_INT 2
63926: EQUAL
63927: IFFALSE 63931
// continue ;
63929: GO 63897
// p := Insert ( p , p + 1 , sort [ i ] ) ;
63931: LD_ADDR_VAR 0 11
63935: PUSH
63936: LD_VAR 0 11
63940: PPUSH
63941: LD_VAR 0 11
63945: PUSH
63946: LD_INT 1
63948: PLUS
63949: PPUSH
63950: LD_VAR 0 9
63954: PUSH
63955: LD_VAR 0 3
63959: ARRAY
63960: PPUSH
63961: CALL_OW 2
63965: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
63966: LD_ADDR_VAR 0 4
63970: PUSH
63971: LD_VAR 0 4
63975: PUSH
63976: LD_VAR 0 9
63980: PUSH
63981: LD_VAR 0 3
63985: ARRAY
63986: DIFF
63987: ST_TO_ADDR
// end ;
63988: GO 63897
63990: POP
63991: POP
// if p then
63992: LD_VAR 0 11
63996: IFFALSE 64021
// result := Replace ( result , 2 , p ) ;
63998: LD_ADDR_VAR 0 2
64002: PUSH
64003: LD_VAR 0 2
64007: PPUSH
64008: LD_INT 2
64010: PPUSH
64011: LD_VAR 0 11
64015: PPUSH
64016: CALL_OW 1
64020: ST_TO_ADDR
// end ; exit ;
64021: GO 65409
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
64023: LD_EXP 74
64027: PUSH
64028: LD_EXP 73
64032: PUSH
64033: LD_VAR 0 1
64037: ARRAY
64038: ARRAY
64039: NOT
64040: PUSH
64041: LD_EXP 47
64045: PUSH
64046: LD_VAR 0 1
64050: ARRAY
64051: PPUSH
64052: LD_INT 30
64054: PUSH
64055: LD_INT 3
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PPUSH
64062: CALL_OW 72
64066: AND
64067: PUSH
64068: LD_EXP 52
64072: PUSH
64073: LD_VAR 0 1
64077: ARRAY
64078: AND
64079: IFFALSE 64687
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
64081: LD_ADDR_EXP 89
64085: PUSH
64086: LD_EXP 89
64090: PPUSH
64091: LD_VAR 0 1
64095: PPUSH
64096: LD_INT 5
64098: PPUSH
64099: CALL_OW 1
64103: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
64104: LD_ADDR_VAR 0 2
64108: PUSH
64109: LD_INT 0
64111: PUSH
64112: LD_INT 0
64114: PUSH
64115: LD_INT 0
64117: PUSH
64118: LD_INT 0
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: ST_TO_ADDR
// if sci > 1 then
64127: LD_VAR 0 8
64131: PUSH
64132: LD_INT 1
64134: GREATER
64135: IFFALSE 64163
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
64137: LD_ADDR_VAR 0 4
64141: PUSH
64142: LD_VAR 0 4
64146: PUSH
64147: LD_VAR 0 8
64151: PUSH
64152: LD_VAR 0 8
64156: PUSH
64157: LD_INT 1
64159: ARRAY
64160: DIFF
64161: DIFF
64162: ST_TO_ADDR
// if tmp and not sci then
64163: LD_VAR 0 4
64167: PUSH
64168: LD_VAR 0 8
64172: NOT
64173: AND
64174: IFFALSE 64243
// begin sort := SortBySkill ( tmp , 4 ) ;
64176: LD_ADDR_VAR 0 9
64180: PUSH
64181: LD_VAR 0 4
64185: PPUSH
64186: LD_INT 4
64188: PPUSH
64189: CALL 54197 0 2
64193: ST_TO_ADDR
// if sort then
64194: LD_VAR 0 9
64198: IFFALSE 64214
// p := sort [ 1 ] ;
64200: LD_ADDR_VAR 0 11
64204: PUSH
64205: LD_VAR 0 9
64209: PUSH
64210: LD_INT 1
64212: ARRAY
64213: ST_TO_ADDR
// if p then
64214: LD_VAR 0 11
64218: IFFALSE 64243
// result := Replace ( result , 4 , p ) ;
64220: LD_ADDR_VAR 0 2
64224: PUSH
64225: LD_VAR 0 2
64229: PPUSH
64230: LD_INT 4
64232: PPUSH
64233: LD_VAR 0 11
64237: PPUSH
64238: CALL_OW 1
64242: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
64243: LD_ADDR_VAR 0 4
64247: PUSH
64248: LD_VAR 0 4
64252: PUSH
64253: LD_VAR 0 7
64257: DIFF
64258: ST_TO_ADDR
// if tmp and mech < 6 then
64259: LD_VAR 0 4
64263: PUSH
64264: LD_VAR 0 7
64268: PUSH
64269: LD_INT 6
64271: LESS
64272: AND
64273: IFFALSE 64461
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
64275: LD_ADDR_VAR 0 9
64279: PUSH
64280: LD_VAR 0 4
64284: PUSH
64285: LD_VAR 0 8
64289: PUSH
64290: LD_VAR 0 7
64294: UNION
64295: DIFF
64296: PPUSH
64297: LD_INT 3
64299: PPUSH
64300: CALL 54197 0 2
64304: ST_TO_ADDR
// p := [ ] ;
64305: LD_ADDR_VAR 0 11
64309: PUSH
64310: EMPTY
64311: ST_TO_ADDR
// if sort then
64312: LD_VAR 0 9
64316: IFFALSE 64432
// for i = 1 to 6 - mech do
64318: LD_ADDR_VAR 0 3
64322: PUSH
64323: DOUBLE
64324: LD_INT 1
64326: DEC
64327: ST_TO_ADDR
64328: LD_INT 6
64330: PUSH
64331: LD_VAR 0 7
64335: MINUS
64336: PUSH
64337: FOR_TO
64338: IFFALSE 64430
// begin if i = sort then
64340: LD_VAR 0 3
64344: PUSH
64345: LD_VAR 0 9
64349: EQUAL
64350: IFFALSE 64354
// break ;
64352: GO 64430
// if GetClass ( i ) = 3 then
64354: LD_VAR 0 3
64358: PPUSH
64359: CALL_OW 257
64363: PUSH
64364: LD_INT 3
64366: EQUAL
64367: IFFALSE 64371
// continue ;
64369: GO 64337
// p := Insert ( p , p + 1 , sort [ i ] ) ;
64371: LD_ADDR_VAR 0 11
64375: PUSH
64376: LD_VAR 0 11
64380: PPUSH
64381: LD_VAR 0 11
64385: PUSH
64386: LD_INT 1
64388: PLUS
64389: PPUSH
64390: LD_VAR 0 9
64394: PUSH
64395: LD_VAR 0 3
64399: ARRAY
64400: PPUSH
64401: CALL_OW 2
64405: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
64406: LD_ADDR_VAR 0 4
64410: PUSH
64411: LD_VAR 0 4
64415: PUSH
64416: LD_VAR 0 9
64420: PUSH
64421: LD_VAR 0 3
64425: ARRAY
64426: DIFF
64427: ST_TO_ADDR
// end ;
64428: GO 64337
64430: POP
64431: POP
// if p then
64432: LD_VAR 0 11
64436: IFFALSE 64461
// result := Replace ( result , 3 , p ) ;
64438: LD_ADDR_VAR 0 2
64442: PUSH
64443: LD_VAR 0 2
64447: PPUSH
64448: LD_INT 3
64450: PPUSH
64451: LD_VAR 0 11
64455: PPUSH
64456: CALL_OW 1
64460: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
64461: LD_ADDR_VAR 0 4
64465: PUSH
64466: LD_VAR 0 4
64470: PUSH
64471: LD_VAR 0 6
64475: DIFF
64476: ST_TO_ADDR
// if tmp and eng < 6 then
64477: LD_VAR 0 4
64481: PUSH
64482: LD_VAR 0 6
64486: PUSH
64487: LD_INT 6
64489: LESS
64490: AND
64491: IFFALSE 64685
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
64493: LD_ADDR_VAR 0 9
64497: PUSH
64498: LD_VAR 0 4
64502: PUSH
64503: LD_VAR 0 8
64507: PUSH
64508: LD_VAR 0 7
64512: UNION
64513: PUSH
64514: LD_VAR 0 6
64518: UNION
64519: DIFF
64520: PPUSH
64521: LD_INT 2
64523: PPUSH
64524: CALL 54197 0 2
64528: ST_TO_ADDR
// p := [ ] ;
64529: LD_ADDR_VAR 0 11
64533: PUSH
64534: EMPTY
64535: ST_TO_ADDR
// if sort then
64536: LD_VAR 0 9
64540: IFFALSE 64656
// for i = 1 to 6 - eng do
64542: LD_ADDR_VAR 0 3
64546: PUSH
64547: DOUBLE
64548: LD_INT 1
64550: DEC
64551: ST_TO_ADDR
64552: LD_INT 6
64554: PUSH
64555: LD_VAR 0 6
64559: MINUS
64560: PUSH
64561: FOR_TO
64562: IFFALSE 64654
// begin if i = sort then
64564: LD_VAR 0 3
64568: PUSH
64569: LD_VAR 0 9
64573: EQUAL
64574: IFFALSE 64578
// break ;
64576: GO 64654
// if GetClass ( i ) = 2 then
64578: LD_VAR 0 3
64582: PPUSH
64583: CALL_OW 257
64587: PUSH
64588: LD_INT 2
64590: EQUAL
64591: IFFALSE 64595
// continue ;
64593: GO 64561
// p := Insert ( p , p + 1 , sort [ i ] ) ;
64595: LD_ADDR_VAR 0 11
64599: PUSH
64600: LD_VAR 0 11
64604: PPUSH
64605: LD_VAR 0 11
64609: PUSH
64610: LD_INT 1
64612: PLUS
64613: PPUSH
64614: LD_VAR 0 9
64618: PUSH
64619: LD_VAR 0 3
64623: ARRAY
64624: PPUSH
64625: CALL_OW 2
64629: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
64630: LD_ADDR_VAR 0 4
64634: PUSH
64635: LD_VAR 0 4
64639: PUSH
64640: LD_VAR 0 9
64644: PUSH
64645: LD_VAR 0 3
64649: ARRAY
64650: DIFF
64651: ST_TO_ADDR
// end ;
64652: GO 64561
64654: POP
64655: POP
// if p then
64656: LD_VAR 0 11
64660: IFFALSE 64685
// result := Replace ( result , 2 , p ) ;
64662: LD_ADDR_VAR 0 2
64666: PUSH
64667: LD_VAR 0 2
64671: PPUSH
64672: LD_INT 2
64674: PPUSH
64675: LD_VAR 0 11
64679: PPUSH
64680: CALL_OW 1
64684: ST_TO_ADDR
// end ; exit ;
64685: GO 65409
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
64687: LD_EXP 74
64691: PUSH
64692: LD_EXP 73
64696: PUSH
64697: LD_VAR 0 1
64701: ARRAY
64702: ARRAY
64703: NOT
64704: PUSH
64705: LD_EXP 47
64709: PUSH
64710: LD_VAR 0 1
64714: ARRAY
64715: PPUSH
64716: LD_INT 30
64718: PUSH
64719: LD_INT 3
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PPUSH
64726: CALL_OW 72
64730: AND
64731: PUSH
64732: LD_EXP 52
64736: PUSH
64737: LD_VAR 0 1
64741: ARRAY
64742: NOT
64743: AND
64744: IFFALSE 65409
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
64746: LD_ADDR_EXP 89
64750: PUSH
64751: LD_EXP 89
64755: PPUSH
64756: LD_VAR 0 1
64760: PPUSH
64761: LD_INT 6
64763: PPUSH
64764: CALL_OW 1
64768: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
64769: LD_ADDR_VAR 0 2
64773: PUSH
64774: LD_INT 0
64776: PUSH
64777: LD_INT 0
64779: PUSH
64780: LD_INT 0
64782: PUSH
64783: LD_INT 0
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: LIST
64790: LIST
64791: ST_TO_ADDR
// if sci >= 1 then
64792: LD_VAR 0 8
64796: PUSH
64797: LD_INT 1
64799: GREATEREQUAL
64800: IFFALSE 64822
// tmp := tmp diff sci [ 1 ] ;
64802: LD_ADDR_VAR 0 4
64806: PUSH
64807: LD_VAR 0 4
64811: PUSH
64812: LD_VAR 0 8
64816: PUSH
64817: LD_INT 1
64819: ARRAY
64820: DIFF
64821: ST_TO_ADDR
// if tmp and not sci then
64822: LD_VAR 0 4
64826: PUSH
64827: LD_VAR 0 8
64831: NOT
64832: AND
64833: IFFALSE 64902
// begin sort := SortBySkill ( tmp , 4 ) ;
64835: LD_ADDR_VAR 0 9
64839: PUSH
64840: LD_VAR 0 4
64844: PPUSH
64845: LD_INT 4
64847: PPUSH
64848: CALL 54197 0 2
64852: ST_TO_ADDR
// if sort then
64853: LD_VAR 0 9
64857: IFFALSE 64873
// p := sort [ 1 ] ;
64859: LD_ADDR_VAR 0 11
64863: PUSH
64864: LD_VAR 0 9
64868: PUSH
64869: LD_INT 1
64871: ARRAY
64872: ST_TO_ADDR
// if p then
64873: LD_VAR 0 11
64877: IFFALSE 64902
// result := Replace ( result , 4 , p ) ;
64879: LD_ADDR_VAR 0 2
64883: PUSH
64884: LD_VAR 0 2
64888: PPUSH
64889: LD_INT 4
64891: PPUSH
64892: LD_VAR 0 11
64896: PPUSH
64897: CALL_OW 1
64901: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
64902: LD_ADDR_VAR 0 4
64906: PUSH
64907: LD_VAR 0 4
64911: PUSH
64912: LD_VAR 0 7
64916: DIFF
64917: ST_TO_ADDR
// if tmp and mech < 6 then
64918: LD_VAR 0 4
64922: PUSH
64923: LD_VAR 0 7
64927: PUSH
64928: LD_INT 6
64930: LESS
64931: AND
64932: IFFALSE 65114
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
64934: LD_ADDR_VAR 0 9
64938: PUSH
64939: LD_VAR 0 4
64943: PUSH
64944: LD_VAR 0 7
64948: DIFF
64949: PPUSH
64950: LD_INT 3
64952: PPUSH
64953: CALL 54197 0 2
64957: ST_TO_ADDR
// p := [ ] ;
64958: LD_ADDR_VAR 0 11
64962: PUSH
64963: EMPTY
64964: ST_TO_ADDR
// if sort then
64965: LD_VAR 0 9
64969: IFFALSE 65085
// for i = 1 to 6 - mech do
64971: LD_ADDR_VAR 0 3
64975: PUSH
64976: DOUBLE
64977: LD_INT 1
64979: DEC
64980: ST_TO_ADDR
64981: LD_INT 6
64983: PUSH
64984: LD_VAR 0 7
64988: MINUS
64989: PUSH
64990: FOR_TO
64991: IFFALSE 65083
// begin if i = sort then
64993: LD_VAR 0 3
64997: PUSH
64998: LD_VAR 0 9
65002: EQUAL
65003: IFFALSE 65007
// break ;
65005: GO 65083
// if GetClass ( i ) = 3 then
65007: LD_VAR 0 3
65011: PPUSH
65012: CALL_OW 257
65016: PUSH
65017: LD_INT 3
65019: EQUAL
65020: IFFALSE 65024
// continue ;
65022: GO 64990
// p := Insert ( p , p + 1 , sort [ i ] ) ;
65024: LD_ADDR_VAR 0 11
65028: PUSH
65029: LD_VAR 0 11
65033: PPUSH
65034: LD_VAR 0 11
65038: PUSH
65039: LD_INT 1
65041: PLUS
65042: PPUSH
65043: LD_VAR 0 9
65047: PUSH
65048: LD_VAR 0 3
65052: ARRAY
65053: PPUSH
65054: CALL_OW 2
65058: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
65059: LD_ADDR_VAR 0 4
65063: PUSH
65064: LD_VAR 0 4
65068: PUSH
65069: LD_VAR 0 9
65073: PUSH
65074: LD_VAR 0 3
65078: ARRAY
65079: DIFF
65080: ST_TO_ADDR
// end ;
65081: GO 64990
65083: POP
65084: POP
// if p then
65085: LD_VAR 0 11
65089: IFFALSE 65114
// result := Replace ( result , 3 , p ) ;
65091: LD_ADDR_VAR 0 2
65095: PUSH
65096: LD_VAR 0 2
65100: PPUSH
65101: LD_INT 3
65103: PPUSH
65104: LD_VAR 0 11
65108: PPUSH
65109: CALL_OW 1
65113: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
65114: LD_ADDR_VAR 0 4
65118: PUSH
65119: LD_VAR 0 4
65123: PUSH
65124: LD_VAR 0 6
65128: DIFF
65129: ST_TO_ADDR
// if tmp and eng < 4 then
65130: LD_VAR 0 4
65134: PUSH
65135: LD_VAR 0 6
65139: PUSH
65140: LD_INT 4
65142: LESS
65143: AND
65144: IFFALSE 65334
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
65146: LD_ADDR_VAR 0 9
65150: PUSH
65151: LD_VAR 0 4
65155: PUSH
65156: LD_VAR 0 7
65160: PUSH
65161: LD_VAR 0 6
65165: UNION
65166: DIFF
65167: PPUSH
65168: LD_INT 2
65170: PPUSH
65171: CALL 54197 0 2
65175: ST_TO_ADDR
// p := [ ] ;
65176: LD_ADDR_VAR 0 11
65180: PUSH
65181: EMPTY
65182: ST_TO_ADDR
// if sort then
65183: LD_VAR 0 9
65187: IFFALSE 65303
// for i = 1 to 4 - eng do
65189: LD_ADDR_VAR 0 3
65193: PUSH
65194: DOUBLE
65195: LD_INT 1
65197: DEC
65198: ST_TO_ADDR
65199: LD_INT 4
65201: PUSH
65202: LD_VAR 0 6
65206: MINUS
65207: PUSH
65208: FOR_TO
65209: IFFALSE 65301
// begin if i = sort then
65211: LD_VAR 0 3
65215: PUSH
65216: LD_VAR 0 9
65220: EQUAL
65221: IFFALSE 65225
// break ;
65223: GO 65301
// if GetClass ( i ) = 2 then
65225: LD_VAR 0 3
65229: PPUSH
65230: CALL_OW 257
65234: PUSH
65235: LD_INT 2
65237: EQUAL
65238: IFFALSE 65242
// continue ;
65240: GO 65208
// p := Insert ( p , p + 1 , sort [ i ] ) ;
65242: LD_ADDR_VAR 0 11
65246: PUSH
65247: LD_VAR 0 11
65251: PPUSH
65252: LD_VAR 0 11
65256: PUSH
65257: LD_INT 1
65259: PLUS
65260: PPUSH
65261: LD_VAR 0 9
65265: PUSH
65266: LD_VAR 0 3
65270: ARRAY
65271: PPUSH
65272: CALL_OW 2
65276: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
65277: LD_ADDR_VAR 0 4
65281: PUSH
65282: LD_VAR 0 4
65286: PUSH
65287: LD_VAR 0 9
65291: PUSH
65292: LD_VAR 0 3
65296: ARRAY
65297: DIFF
65298: ST_TO_ADDR
// end ;
65299: GO 65208
65301: POP
65302: POP
// if p then
65303: LD_VAR 0 11
65307: IFFALSE 65332
// result := Replace ( result , 2 , p ) ;
65309: LD_ADDR_VAR 0 2
65313: PUSH
65314: LD_VAR 0 2
65318: PPUSH
65319: LD_INT 2
65321: PPUSH
65322: LD_VAR 0 11
65326: PPUSH
65327: CALL_OW 1
65331: ST_TO_ADDR
// end else
65332: GO 65378
// for i = eng downto 5 do
65334: LD_ADDR_VAR 0 3
65338: PUSH
65339: DOUBLE
65340: LD_VAR 0 6
65344: INC
65345: ST_TO_ADDR
65346: LD_INT 5
65348: PUSH
65349: FOR_DOWNTO
65350: IFFALSE 65376
// tmp := tmp union eng [ i ] ;
65352: LD_ADDR_VAR 0 4
65356: PUSH
65357: LD_VAR 0 4
65361: PUSH
65362: LD_VAR 0 6
65366: PUSH
65367: LD_VAR 0 3
65371: ARRAY
65372: UNION
65373: ST_TO_ADDR
65374: GO 65349
65376: POP
65377: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
65378: LD_ADDR_VAR 0 2
65382: PUSH
65383: LD_VAR 0 2
65387: PPUSH
65388: LD_INT 1
65390: PPUSH
65391: LD_VAR 0 4
65395: PUSH
65396: LD_VAR 0 5
65400: DIFF
65401: PPUSH
65402: CALL_OW 1
65406: ST_TO_ADDR
// exit ;
65407: GO 65409
// end ; end ;
65409: LD_VAR 0 2
65413: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
65414: LD_INT 0
65416: PPUSH
65417: PPUSH
65418: PPUSH
// if not mc_bases then
65419: LD_EXP 47
65423: NOT
65424: IFFALSE 65428
// exit ;
65426: GO 65534
// for i = 1 to mc_bases do
65428: LD_ADDR_VAR 0 2
65432: PUSH
65433: DOUBLE
65434: LD_INT 1
65436: DEC
65437: ST_TO_ADDR
65438: LD_EXP 47
65442: PUSH
65443: FOR_TO
65444: IFFALSE 65525
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
65446: LD_ADDR_VAR 0 3
65450: PUSH
65451: LD_EXP 47
65455: PUSH
65456: LD_VAR 0 2
65460: ARRAY
65461: PPUSH
65462: LD_INT 21
65464: PUSH
65465: LD_INT 3
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 3
65474: PUSH
65475: LD_INT 24
65477: PUSH
65478: LD_INT 1000
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PPUSH
65493: CALL_OW 72
65497: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
65498: LD_ADDR_EXP 48
65502: PUSH
65503: LD_EXP 48
65507: PPUSH
65508: LD_VAR 0 2
65512: PPUSH
65513: LD_VAR 0 3
65517: PPUSH
65518: CALL_OW 1
65522: ST_TO_ADDR
// end ;
65523: GO 65443
65525: POP
65526: POP
// RaiseSailEvent ( 101 ) ;
65527: LD_INT 101
65529: PPUSH
65530: CALL_OW 427
// end ;
65534: LD_VAR 0 1
65538: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
65539: LD_INT 0
65541: PPUSH
65542: PPUSH
65543: PPUSH
65544: PPUSH
65545: PPUSH
65546: PPUSH
65547: PPUSH
// if not mc_bases then
65548: LD_EXP 47
65552: NOT
65553: IFFALSE 65557
// exit ;
65555: GO 66119
// for i = 1 to mc_bases do
65557: LD_ADDR_VAR 0 2
65561: PUSH
65562: DOUBLE
65563: LD_INT 1
65565: DEC
65566: ST_TO_ADDR
65567: LD_EXP 47
65571: PUSH
65572: FOR_TO
65573: IFFALSE 66110
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
65575: LD_ADDR_VAR 0 5
65579: PUSH
65580: LD_EXP 47
65584: PUSH
65585: LD_VAR 0 2
65589: ARRAY
65590: PUSH
65591: LD_EXP 76
65595: PUSH
65596: LD_VAR 0 2
65600: ARRAY
65601: UNION
65602: PPUSH
65603: LD_INT 21
65605: PUSH
65606: LD_INT 1
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 1
65615: PUSH
65616: LD_INT 3
65618: PUSH
65619: LD_INT 54
65621: PUSH
65622: EMPTY
65623: LIST
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: LD_INT 3
65631: PUSH
65632: LD_INT 24
65634: PUSH
65635: LD_INT 1000
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: LIST
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PPUSH
65655: CALL_OW 72
65659: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
65660: LD_ADDR_VAR 0 6
65664: PUSH
65665: LD_EXP 47
65669: PUSH
65670: LD_VAR 0 2
65674: ARRAY
65675: PPUSH
65676: LD_INT 21
65678: PUSH
65679: LD_INT 1
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 1
65688: PUSH
65689: LD_INT 3
65691: PUSH
65692: LD_INT 54
65694: PUSH
65695: EMPTY
65696: LIST
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 3
65704: PUSH
65705: LD_INT 24
65707: PUSH
65708: LD_INT 250
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: LIST
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PPUSH
65728: CALL_OW 72
65732: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
65733: LD_ADDR_VAR 0 7
65737: PUSH
65738: LD_VAR 0 5
65742: PUSH
65743: LD_VAR 0 6
65747: DIFF
65748: ST_TO_ADDR
// if not need_heal_1 then
65749: LD_VAR 0 6
65753: NOT
65754: IFFALSE 65787
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
65756: LD_ADDR_EXP 50
65760: PUSH
65761: LD_EXP 50
65765: PPUSH
65766: LD_VAR 0 2
65770: PUSH
65771: LD_INT 1
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PPUSH
65778: EMPTY
65779: PPUSH
65780: CALL 24315 0 3
65784: ST_TO_ADDR
65785: GO 65857
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
65787: LD_ADDR_EXP 50
65791: PUSH
65792: LD_EXP 50
65796: PPUSH
65797: LD_VAR 0 2
65801: PUSH
65802: LD_INT 1
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PPUSH
65809: LD_EXP 50
65813: PUSH
65814: LD_VAR 0 2
65818: ARRAY
65819: PUSH
65820: LD_INT 1
65822: ARRAY
65823: PPUSH
65824: LD_INT 3
65826: PUSH
65827: LD_INT 24
65829: PUSH
65830: LD_INT 1000
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PPUSH
65841: CALL_OW 72
65845: PUSH
65846: LD_VAR 0 6
65850: UNION
65851: PPUSH
65852: CALL 24315 0 3
65856: ST_TO_ADDR
// if not need_heal_2 then
65857: LD_VAR 0 7
65861: NOT
65862: IFFALSE 65895
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
65864: LD_ADDR_EXP 50
65868: PUSH
65869: LD_EXP 50
65873: PPUSH
65874: LD_VAR 0 2
65878: PUSH
65879: LD_INT 2
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PPUSH
65886: EMPTY
65887: PPUSH
65888: CALL 24315 0 3
65892: ST_TO_ADDR
65893: GO 65927
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
65895: LD_ADDR_EXP 50
65899: PUSH
65900: LD_EXP 50
65904: PPUSH
65905: LD_VAR 0 2
65909: PUSH
65910: LD_INT 2
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PPUSH
65917: LD_VAR 0 7
65921: PPUSH
65922: CALL 24315 0 3
65926: ST_TO_ADDR
// if need_heal_2 then
65927: LD_VAR 0 7
65931: IFFALSE 66092
// for j in need_heal_2 do
65933: LD_ADDR_VAR 0 3
65937: PUSH
65938: LD_VAR 0 7
65942: PUSH
65943: FOR_IN
65944: IFFALSE 66090
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
65946: LD_ADDR_VAR 0 5
65950: PUSH
65951: LD_EXP 47
65955: PUSH
65956: LD_VAR 0 2
65960: ARRAY
65961: PPUSH
65962: LD_INT 2
65964: PUSH
65965: LD_INT 30
65967: PUSH
65968: LD_INT 6
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 30
65977: PUSH
65978: LD_INT 7
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 30
65987: PUSH
65988: LD_INT 8
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 30
65997: PUSH
65998: LD_INT 0
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 30
66007: PUSH
66008: LD_INT 1
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: LIST
66021: LIST
66022: PPUSH
66023: CALL_OW 72
66027: ST_TO_ADDR
// if tmp then
66028: LD_VAR 0 5
66032: IFFALSE 66088
// begin k := NearestUnitToUnit ( tmp , j ) ;
66034: LD_ADDR_VAR 0 4
66038: PUSH
66039: LD_VAR 0 5
66043: PPUSH
66044: LD_VAR 0 3
66048: PPUSH
66049: CALL_OW 74
66053: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
66054: LD_VAR 0 3
66058: PPUSH
66059: LD_VAR 0 4
66063: PPUSH
66064: CALL_OW 296
66068: PUSH
66069: LD_INT 5
66071: GREATER
66072: IFFALSE 66088
// ComMoveToNearbyEntrance ( j , k ) ;
66074: LD_VAR 0 3
66078: PPUSH
66079: LD_VAR 0 4
66083: PPUSH
66084: CALL 56558 0 2
// end ; end ;
66088: GO 65943
66090: POP
66091: POP
// if not need_heal_1 and not need_heal_2 then
66092: LD_VAR 0 6
66096: NOT
66097: PUSH
66098: LD_VAR 0 7
66102: NOT
66103: AND
66104: IFFALSE 66108
// continue ;
66106: GO 65572
// end ;
66108: GO 65572
66110: POP
66111: POP
// RaiseSailEvent ( 102 ) ;
66112: LD_INT 102
66114: PPUSH
66115: CALL_OW 427
// end ;
66119: LD_VAR 0 1
66123: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
66124: LD_INT 0
66126: PPUSH
66127: PPUSH
66128: PPUSH
66129: PPUSH
66130: PPUSH
66131: PPUSH
66132: PPUSH
66133: PPUSH
// if not mc_bases then
66134: LD_EXP 47
66138: NOT
66139: IFFALSE 66143
// exit ;
66141: GO 67004
// for i = 1 to mc_bases do
66143: LD_ADDR_VAR 0 2
66147: PUSH
66148: DOUBLE
66149: LD_INT 1
66151: DEC
66152: ST_TO_ADDR
66153: LD_EXP 47
66157: PUSH
66158: FOR_TO
66159: IFFALSE 67002
// begin if not mc_building_need_repair [ i ] then
66161: LD_EXP 48
66165: PUSH
66166: LD_VAR 0 2
66170: ARRAY
66171: NOT
66172: IFFALSE 66359
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] ] ] ) ;
66174: LD_ADDR_VAR 0 6
66178: PUSH
66179: LD_EXP 66
66183: PUSH
66184: LD_VAR 0 2
66188: ARRAY
66189: PPUSH
66190: LD_INT 3
66192: PUSH
66193: LD_INT 24
66195: PUSH
66196: LD_INT 1000
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: LD_INT 2
66209: PUSH
66210: LD_INT 34
66212: PUSH
66213: LD_INT 13
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 34
66222: PUSH
66223: LD_INT 52
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 34
66232: PUSH
66233: LD_EXP 35
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PPUSH
66252: CALL_OW 72
66256: ST_TO_ADDR
// if cranes then
66257: LD_VAR 0 6
66261: IFFALSE 66323
// for j in cranes do
66263: LD_ADDR_VAR 0 3
66267: PUSH
66268: LD_VAR 0 6
66272: PUSH
66273: FOR_IN
66274: IFFALSE 66321
// if not IsInArea ( j , mc_parking [ i ] ) then
66276: LD_VAR 0 3
66280: PPUSH
66281: LD_EXP 71
66285: PUSH
66286: LD_VAR 0 2
66290: ARRAY
66291: PPUSH
66292: CALL_OW 308
66296: NOT
66297: IFFALSE 66319
// ComMoveToArea ( j , mc_parking [ i ] ) ;
66299: LD_VAR 0 3
66303: PPUSH
66304: LD_EXP 71
66308: PUSH
66309: LD_VAR 0 2
66313: ARRAY
66314: PPUSH
66315: CALL_OW 113
66319: GO 66273
66321: POP
66322: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
66323: LD_ADDR_EXP 49
66327: PUSH
66328: LD_EXP 49
66332: PPUSH
66333: LD_VAR 0 2
66337: PPUSH
66338: EMPTY
66339: PPUSH
66340: CALL_OW 1
66344: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
66345: LD_VAR 0 2
66349: PPUSH
66350: LD_INT 101
66352: PPUSH
66353: CALL 61247 0 2
// continue ;
66357: GO 66158
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
66359: LD_ADDR_EXP 53
66363: PUSH
66364: LD_EXP 53
66368: PPUSH
66369: LD_VAR 0 2
66373: PPUSH
66374: EMPTY
66375: PPUSH
66376: CALL_OW 1
66380: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
66381: LD_VAR 0 2
66385: PPUSH
66386: LD_INT 103
66388: PPUSH
66389: CALL 61247 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
66393: LD_ADDR_VAR 0 5
66397: PUSH
66398: LD_EXP 47
66402: PUSH
66403: LD_VAR 0 2
66407: ARRAY
66408: PUSH
66409: LD_EXP 76
66413: PUSH
66414: LD_VAR 0 2
66418: ARRAY
66419: UNION
66420: PPUSH
66421: LD_INT 2
66423: PUSH
66424: LD_INT 25
66426: PUSH
66427: LD_INT 2
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 25
66436: PUSH
66437: LD_INT 16
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: LIST
66448: PUSH
66449: EMPTY
66450: LIST
66451: PPUSH
66452: CALL_OW 72
66456: PUSH
66457: LD_EXP 50
66461: PUSH
66462: LD_VAR 0 2
66466: ARRAY
66467: PUSH
66468: LD_INT 1
66470: ARRAY
66471: PUSH
66472: LD_EXP 50
66476: PUSH
66477: LD_VAR 0 2
66481: ARRAY
66482: PUSH
66483: LD_INT 2
66485: ARRAY
66486: UNION
66487: DIFF
66488: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] ] ) ;
66489: LD_ADDR_VAR 0 6
66493: PUSH
66494: LD_EXP 66
66498: PUSH
66499: LD_VAR 0 2
66503: ARRAY
66504: PPUSH
66505: LD_INT 2
66507: PUSH
66508: LD_INT 34
66510: PUSH
66511: LD_INT 13
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 34
66520: PUSH
66521: LD_INT 52
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 34
66530: PUSH
66531: LD_EXP 35
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: PPUSH
66546: CALL_OW 72
66550: ST_TO_ADDR
// if cranes then
66551: LD_VAR 0 6
66555: IFFALSE 66691
// begin for j in cranes do
66557: LD_ADDR_VAR 0 3
66561: PUSH
66562: LD_VAR 0 6
66566: PUSH
66567: FOR_IN
66568: IFFALSE 66689
// begin if GetLives ( j ) = 1000 and not HasTask ( j ) then
66570: LD_VAR 0 3
66574: PPUSH
66575: CALL_OW 256
66579: PUSH
66580: LD_INT 1000
66582: EQUAL
66583: PUSH
66584: LD_VAR 0 3
66588: PPUSH
66589: CALL_OW 314
66593: NOT
66594: AND
66595: IFFALSE 66629
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
66597: LD_VAR 0 3
66601: PPUSH
66602: LD_EXP 48
66606: PUSH
66607: LD_VAR 0 2
66611: ARRAY
66612: PPUSH
66613: LD_VAR 0 3
66617: PPUSH
66618: CALL_OW 74
66622: PPUSH
66623: CALL_OW 130
66627: GO 66687
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
66629: LD_VAR 0 3
66633: PPUSH
66634: CALL_OW 256
66638: PUSH
66639: LD_INT 500
66641: LESS
66642: PUSH
66643: LD_VAR 0 3
66647: PPUSH
66648: LD_EXP 71
66652: PUSH
66653: LD_VAR 0 2
66657: ARRAY
66658: PPUSH
66659: CALL_OW 308
66663: NOT
66664: AND
66665: IFFALSE 66687
// ComMoveToArea ( j , mc_parking [ i ] ) ;
66667: LD_VAR 0 3
66671: PPUSH
66672: LD_EXP 71
66676: PUSH
66677: LD_VAR 0 2
66681: ARRAY
66682: PPUSH
66683: CALL_OW 113
// end ;
66687: GO 66567
66689: POP
66690: POP
// end ; if tmp > 3 then
66691: LD_VAR 0 5
66695: PUSH
66696: LD_INT 3
66698: GREATER
66699: IFFALSE 66719
// tmp := ShrinkArray ( tmp , 4 ) ;
66701: LD_ADDR_VAR 0 5
66705: PUSH
66706: LD_VAR 0 5
66710: PPUSH
66711: LD_INT 4
66713: PPUSH
66714: CALL 56006 0 2
66718: ST_TO_ADDR
// if not tmp then
66719: LD_VAR 0 5
66723: NOT
66724: IFFALSE 66728
// continue ;
66726: GO 66158
// for j in tmp do
66728: LD_ADDR_VAR 0 3
66732: PUSH
66733: LD_VAR 0 5
66737: PUSH
66738: FOR_IN
66739: IFFALSE 66998
// begin if IsInUnit ( j ) then
66741: LD_VAR 0 3
66745: PPUSH
66746: CALL_OW 310
66750: IFFALSE 66761
// ComExitBuilding ( j ) ;
66752: LD_VAR 0 3
66756: PPUSH
66757: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
66761: LD_VAR 0 3
66765: PUSH
66766: LD_EXP 49
66770: PUSH
66771: LD_VAR 0 2
66775: ARRAY
66776: IN
66777: NOT
66778: IFFALSE 66836
// begin SetTag ( j , 101 ) ;
66780: LD_VAR 0 3
66784: PPUSH
66785: LD_INT 101
66787: PPUSH
66788: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
66792: LD_ADDR_EXP 49
66796: PUSH
66797: LD_EXP 49
66801: PPUSH
66802: LD_VAR 0 2
66806: PUSH
66807: LD_EXP 49
66811: PUSH
66812: LD_VAR 0 2
66816: ARRAY
66817: PUSH
66818: LD_INT 1
66820: PLUS
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PPUSH
66826: LD_VAR 0 3
66830: PPUSH
66831: CALL 24315 0 3
66835: ST_TO_ADDR
// end ; wait ( 1 ) ;
66836: LD_INT 1
66838: PPUSH
66839: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
66843: LD_ADDR_VAR 0 7
66847: PUSH
66848: LD_EXP 48
66852: PUSH
66853: LD_VAR 0 2
66857: ARRAY
66858: ST_TO_ADDR
// if mc_scan [ i ] then
66859: LD_EXP 70
66863: PUSH
66864: LD_VAR 0 2
66868: ARRAY
66869: IFFALSE 66931
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
66871: LD_ADDR_VAR 0 7
66875: PUSH
66876: LD_EXP 48
66880: PUSH
66881: LD_VAR 0 2
66885: ARRAY
66886: PPUSH
66887: LD_INT 3
66889: PUSH
66890: LD_INT 30
66892: PUSH
66893: LD_INT 32
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 30
66902: PUSH
66903: LD_INT 33
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 30
66912: PUSH
66913: LD_INT 31
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: LIST
66924: LIST
66925: PPUSH
66926: CALL_OW 72
66930: ST_TO_ADDR
// if not to_repair_tmp then
66931: LD_VAR 0 7
66935: NOT
66936: IFFALSE 66940
// continue ;
66938: GO 66738
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
66940: LD_ADDR_VAR 0 8
66944: PUSH
66945: LD_VAR 0 7
66949: PPUSH
66950: LD_VAR 0 3
66954: PPUSH
66955: CALL_OW 74
66959: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 10 then
66960: LD_VAR 0 8
66964: PPUSH
66965: LD_INT 16
66967: PPUSH
66968: CALL 26908 0 2
66972: PUSH
66973: LD_INT 4
66975: ARRAY
66976: PUSH
66977: LD_INT 10
66979: LESS
66980: IFFALSE 66996
// ComRepairBuilding ( j , to_repair ) ;
66982: LD_VAR 0 3
66986: PPUSH
66987: LD_VAR 0 8
66991: PPUSH
66992: CALL_OW 130
// end ;
66996: GO 66738
66998: POP
66999: POP
// end ;
67000: GO 66158
67002: POP
67003: POP
// end ;
67004: LD_VAR 0 1
67008: RET
// export function MC_Heal ; var i , j , tmp ; begin
67009: LD_INT 0
67011: PPUSH
67012: PPUSH
67013: PPUSH
67014: PPUSH
// if not mc_bases then
67015: LD_EXP 47
67019: NOT
67020: IFFALSE 67024
// exit ;
67022: GO 67426
// for i = 1 to mc_bases do
67024: LD_ADDR_VAR 0 2
67028: PUSH
67029: DOUBLE
67030: LD_INT 1
67032: DEC
67033: ST_TO_ADDR
67034: LD_EXP 47
67038: PUSH
67039: FOR_TO
67040: IFFALSE 67424
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
67042: LD_EXP 50
67046: PUSH
67047: LD_VAR 0 2
67051: ARRAY
67052: PUSH
67053: LD_INT 1
67055: ARRAY
67056: NOT
67057: PUSH
67058: LD_EXP 50
67062: PUSH
67063: LD_VAR 0 2
67067: ARRAY
67068: PUSH
67069: LD_INT 2
67071: ARRAY
67072: NOT
67073: AND
67074: IFFALSE 67112
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
67076: LD_ADDR_EXP 51
67080: PUSH
67081: LD_EXP 51
67085: PPUSH
67086: LD_VAR 0 2
67090: PPUSH
67091: EMPTY
67092: PPUSH
67093: CALL_OW 1
67097: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
67098: LD_VAR 0 2
67102: PPUSH
67103: LD_INT 102
67105: PPUSH
67106: CALL 61247 0 2
// continue ;
67110: GO 67039
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
67112: LD_ADDR_VAR 0 4
67116: PUSH
67117: LD_EXP 47
67121: PUSH
67122: LD_VAR 0 2
67126: ARRAY
67127: PPUSH
67128: LD_INT 25
67130: PUSH
67131: LD_INT 4
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: PPUSH
67138: CALL_OW 72
67142: ST_TO_ADDR
// if not tmp then
67143: LD_VAR 0 4
67147: NOT
67148: IFFALSE 67152
// continue ;
67150: GO 67039
// if mc_taming [ i ] then
67152: LD_EXP 78
67156: PUSH
67157: LD_VAR 0 2
67161: ARRAY
67162: IFFALSE 67186
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
67164: LD_ADDR_EXP 78
67168: PUSH
67169: LD_EXP 78
67173: PPUSH
67174: LD_VAR 0 2
67178: PPUSH
67179: EMPTY
67180: PPUSH
67181: CALL_OW 1
67185: ST_TO_ADDR
// for j in tmp do
67186: LD_ADDR_VAR 0 3
67190: PUSH
67191: LD_VAR 0 4
67195: PUSH
67196: FOR_IN
67197: IFFALSE 67420
// begin if IsInUnit ( j ) then
67199: LD_VAR 0 3
67203: PPUSH
67204: CALL_OW 310
67208: IFFALSE 67219
// ComExitBuilding ( j ) ;
67210: LD_VAR 0 3
67214: PPUSH
67215: CALL_OW 122
// if not j in mc_healers [ i ] then
67219: LD_VAR 0 3
67223: PUSH
67224: LD_EXP 51
67228: PUSH
67229: LD_VAR 0 2
67233: ARRAY
67234: IN
67235: NOT
67236: IFFALSE 67282
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
67238: LD_ADDR_EXP 51
67242: PUSH
67243: LD_EXP 51
67247: PPUSH
67248: LD_VAR 0 2
67252: PUSH
67253: LD_EXP 51
67257: PUSH
67258: LD_VAR 0 2
67262: ARRAY
67263: PUSH
67264: LD_INT 1
67266: PLUS
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PPUSH
67272: LD_VAR 0 3
67276: PPUSH
67277: CALL 24315 0 3
67281: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
67282: LD_VAR 0 3
67286: PPUSH
67287: CALL_OW 110
67291: PUSH
67292: LD_INT 102
67294: NONEQUAL
67295: IFFALSE 67309
// SetTag ( j , 102 ) ;
67297: LD_VAR 0 3
67301: PPUSH
67302: LD_INT 102
67304: PPUSH
67305: CALL_OW 109
// Wait ( 3 ) ;
67309: LD_INT 3
67311: PPUSH
67312: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
67316: LD_EXP 50
67320: PUSH
67321: LD_VAR 0 2
67325: ARRAY
67326: PUSH
67327: LD_INT 1
67329: ARRAY
67330: IFFALSE 67362
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
67332: LD_VAR 0 3
67336: PPUSH
67337: LD_EXP 50
67341: PUSH
67342: LD_VAR 0 2
67346: ARRAY
67347: PUSH
67348: LD_INT 1
67350: ARRAY
67351: PUSH
67352: LD_INT 1
67354: ARRAY
67355: PPUSH
67356: CALL_OW 128
67360: GO 67418
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
67362: LD_VAR 0 3
67366: PPUSH
67367: CALL_OW 314
67371: NOT
67372: PUSH
67373: LD_EXP 50
67377: PUSH
67378: LD_VAR 0 2
67382: ARRAY
67383: PUSH
67384: LD_INT 2
67386: ARRAY
67387: AND
67388: IFFALSE 67418
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
67390: LD_VAR 0 3
67394: PPUSH
67395: LD_EXP 50
67399: PUSH
67400: LD_VAR 0 2
67404: ARRAY
67405: PUSH
67406: LD_INT 2
67408: ARRAY
67409: PUSH
67410: LD_INT 1
67412: ARRAY
67413: PPUSH
67414: CALL_OW 128
// end ;
67418: GO 67196
67420: POP
67421: POP
// end ;
67422: GO 67039
67424: POP
67425: POP
// end ;
67426: LD_VAR 0 1
67430: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
67431: LD_INT 0
67433: PPUSH
67434: PPUSH
67435: PPUSH
67436: PPUSH
67437: PPUSH
// if not mc_bases then
67438: LD_EXP 47
67442: NOT
67443: IFFALSE 67447
// exit ;
67445: GO 68618
// for i = 1 to mc_bases do
67447: LD_ADDR_VAR 0 2
67451: PUSH
67452: DOUBLE
67453: LD_INT 1
67455: DEC
67456: ST_TO_ADDR
67457: LD_EXP 47
67461: PUSH
67462: FOR_TO
67463: IFFALSE 68616
// begin if mc_scan [ i ] then
67465: LD_EXP 70
67469: PUSH
67470: LD_VAR 0 2
67474: ARRAY
67475: IFFALSE 67479
// continue ;
67477: GO 67462
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
67479: LD_EXP 52
67483: PUSH
67484: LD_VAR 0 2
67488: ARRAY
67489: NOT
67490: PUSH
67491: LD_EXP 54
67495: PUSH
67496: LD_VAR 0 2
67500: ARRAY
67501: NOT
67502: AND
67503: PUSH
67504: LD_EXP 53
67508: PUSH
67509: LD_VAR 0 2
67513: ARRAY
67514: AND
67515: IFFALSE 67553
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
67517: LD_ADDR_EXP 53
67521: PUSH
67522: LD_EXP 53
67526: PPUSH
67527: LD_VAR 0 2
67531: PPUSH
67532: EMPTY
67533: PPUSH
67534: CALL_OW 1
67538: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
67539: LD_VAR 0 2
67543: PPUSH
67544: LD_INT 103
67546: PPUSH
67547: CALL 61247 0 2
// continue ;
67551: GO 67462
// end ; if mc_construct_list [ i ] then
67553: LD_EXP 54
67557: PUSH
67558: LD_VAR 0 2
67562: ARRAY
67563: IFFALSE 67783
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
67565: LD_ADDR_VAR 0 4
67569: PUSH
67570: LD_EXP 47
67574: PUSH
67575: LD_VAR 0 2
67579: ARRAY
67580: PPUSH
67581: LD_INT 25
67583: PUSH
67584: LD_INT 2
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PPUSH
67591: CALL_OW 72
67595: PUSH
67596: LD_EXP 49
67600: PUSH
67601: LD_VAR 0 2
67605: ARRAY
67606: DIFF
67607: ST_TO_ADDR
// if not tmp then
67608: LD_VAR 0 4
67612: NOT
67613: IFFALSE 67617
// continue ;
67615: GO 67462
// for j in tmp do
67617: LD_ADDR_VAR 0 3
67621: PUSH
67622: LD_VAR 0 4
67626: PUSH
67627: FOR_IN
67628: IFFALSE 67779
// begin if not mc_builders [ i ] then
67630: LD_EXP 53
67634: PUSH
67635: LD_VAR 0 2
67639: ARRAY
67640: NOT
67641: IFFALSE 67699
// begin SetTag ( j , 103 ) ;
67643: LD_VAR 0 3
67647: PPUSH
67648: LD_INT 103
67650: PPUSH
67651: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
67655: LD_ADDR_EXP 53
67659: PUSH
67660: LD_EXP 53
67664: PPUSH
67665: LD_VAR 0 2
67669: PUSH
67670: LD_EXP 53
67674: PUSH
67675: LD_VAR 0 2
67679: ARRAY
67680: PUSH
67681: LD_INT 1
67683: PLUS
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PPUSH
67689: LD_VAR 0 3
67693: PPUSH
67694: CALL 24315 0 3
67698: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
67699: LD_VAR 0 3
67703: PPUSH
67704: CALL_OW 310
67708: IFFALSE 67719
// ComExitBuilding ( j ) ;
67710: LD_VAR 0 3
67714: PPUSH
67715: CALL_OW 122
// wait ( 3 ) ;
67719: LD_INT 3
67721: PPUSH
67722: CALL_OW 67
// if not mc_construct_list [ i ] then
67726: LD_EXP 54
67730: PUSH
67731: LD_VAR 0 2
67735: ARRAY
67736: NOT
67737: IFFALSE 67741
// break ;
67739: GO 67779
// if not HasTask ( j ) then
67741: LD_VAR 0 3
67745: PPUSH
67746: CALL_OW 314
67750: NOT
67751: IFFALSE 67777
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
67753: LD_VAR 0 3
67757: PPUSH
67758: LD_EXP 54
67762: PUSH
67763: LD_VAR 0 2
67767: ARRAY
67768: PUSH
67769: LD_INT 1
67771: ARRAY
67772: PPUSH
67773: CALL 27172 0 2
// end ;
67777: GO 67627
67779: POP
67780: POP
// end else
67781: GO 68614
// if mc_build_list [ i ] then
67783: LD_EXP 52
67787: PUSH
67788: LD_VAR 0 2
67792: ARRAY
67793: IFFALSE 68614
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
67795: LD_ADDR_VAR 0 5
67799: PUSH
67800: LD_EXP 47
67804: PUSH
67805: LD_VAR 0 2
67809: ARRAY
67810: PPUSH
67811: LD_INT 2
67813: PUSH
67814: LD_INT 30
67816: PUSH
67817: LD_INT 0
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 30
67826: PUSH
67827: LD_INT 1
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: LIST
67838: PPUSH
67839: CALL_OW 72
67843: ST_TO_ADDR
// if depot then
67844: LD_VAR 0 5
67848: IFFALSE 67866
// depot := depot [ 1 ] else
67850: LD_ADDR_VAR 0 5
67854: PUSH
67855: LD_VAR 0 5
67859: PUSH
67860: LD_INT 1
67862: ARRAY
67863: ST_TO_ADDR
67864: GO 67874
// depot := 0 ;
67866: LD_ADDR_VAR 0 5
67870: PUSH
67871: LD_INT 0
67873: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
67874: LD_EXP 52
67878: PUSH
67879: LD_VAR 0 2
67883: ARRAY
67884: PUSH
67885: LD_INT 1
67887: ARRAY
67888: PUSH
67889: LD_INT 1
67891: ARRAY
67892: PPUSH
67893: CALL 26996 0 1
67897: PUSH
67898: LD_EXP 47
67902: PUSH
67903: LD_VAR 0 2
67907: ARRAY
67908: PPUSH
67909: LD_INT 2
67911: PUSH
67912: LD_INT 30
67914: PUSH
67915: LD_INT 2
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 30
67924: PUSH
67925: LD_INT 3
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: LIST
67936: PPUSH
67937: CALL_OW 72
67941: NOT
67942: AND
67943: IFFALSE 68048
// begin for j = 1 to mc_build_list [ i ] do
67945: LD_ADDR_VAR 0 3
67949: PUSH
67950: DOUBLE
67951: LD_INT 1
67953: DEC
67954: ST_TO_ADDR
67955: LD_EXP 52
67959: PUSH
67960: LD_VAR 0 2
67964: ARRAY
67965: PUSH
67966: FOR_TO
67967: IFFALSE 68046
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
67969: LD_EXP 52
67973: PUSH
67974: LD_VAR 0 2
67978: ARRAY
67979: PUSH
67980: LD_VAR 0 3
67984: ARRAY
67985: PUSH
67986: LD_INT 1
67988: ARRAY
67989: PUSH
67990: LD_INT 2
67992: EQUAL
67993: IFFALSE 68044
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
67995: LD_ADDR_EXP 52
67999: PUSH
68000: LD_EXP 52
68004: PPUSH
68005: LD_VAR 0 2
68009: PPUSH
68010: LD_EXP 52
68014: PUSH
68015: LD_VAR 0 2
68019: ARRAY
68020: PPUSH
68021: LD_VAR 0 3
68025: PPUSH
68026: LD_INT 1
68028: PPUSH
68029: LD_INT 0
68031: PPUSH
68032: CALL 23733 0 4
68036: PPUSH
68037: CALL_OW 1
68041: ST_TO_ADDR
// break ;
68042: GO 68046
// end ;
68044: GO 67966
68046: POP
68047: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
68048: LD_EXP 52
68052: PUSH
68053: LD_VAR 0 2
68057: ARRAY
68058: PUSH
68059: LD_INT 1
68061: ARRAY
68062: PUSH
68063: LD_INT 1
68065: ARRAY
68066: PUSH
68067: LD_INT 0
68069: EQUAL
68070: PUSH
68071: LD_VAR 0 5
68075: PUSH
68076: LD_VAR 0 5
68080: PPUSH
68081: LD_EXP 52
68085: PUSH
68086: LD_VAR 0 2
68090: ARRAY
68091: PUSH
68092: LD_INT 1
68094: ARRAY
68095: PUSH
68096: LD_INT 1
68098: ARRAY
68099: PPUSH
68100: LD_EXP 52
68104: PUSH
68105: LD_VAR 0 2
68109: ARRAY
68110: PUSH
68111: LD_INT 1
68113: ARRAY
68114: PUSH
68115: LD_INT 2
68117: ARRAY
68118: PPUSH
68119: LD_EXP 52
68123: PUSH
68124: LD_VAR 0 2
68128: ARRAY
68129: PUSH
68130: LD_INT 1
68132: ARRAY
68133: PUSH
68134: LD_INT 3
68136: ARRAY
68137: PPUSH
68138: LD_EXP 52
68142: PUSH
68143: LD_VAR 0 2
68147: ARRAY
68148: PUSH
68149: LD_INT 1
68151: ARRAY
68152: PUSH
68153: LD_INT 4
68155: ARRAY
68156: PPUSH
68157: CALL 32063 0 5
68161: AND
68162: OR
68163: IFFALSE 68444
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
68165: LD_ADDR_VAR 0 4
68169: PUSH
68170: LD_EXP 47
68174: PUSH
68175: LD_VAR 0 2
68179: ARRAY
68180: PPUSH
68181: LD_INT 25
68183: PUSH
68184: LD_INT 2
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: PPUSH
68191: CALL_OW 72
68195: PUSH
68196: LD_EXP 49
68200: PUSH
68201: LD_VAR 0 2
68205: ARRAY
68206: DIFF
68207: ST_TO_ADDR
// if not tmp then
68208: LD_VAR 0 4
68212: NOT
68213: IFFALSE 68217
// continue ;
68215: GO 67462
// for j in tmp do
68217: LD_ADDR_VAR 0 3
68221: PUSH
68222: LD_VAR 0 4
68226: PUSH
68227: FOR_IN
68228: IFFALSE 68440
// begin if not mc_builders [ i ] then
68230: LD_EXP 53
68234: PUSH
68235: LD_VAR 0 2
68239: ARRAY
68240: NOT
68241: IFFALSE 68299
// begin SetTag ( j , 103 ) ;
68243: LD_VAR 0 3
68247: PPUSH
68248: LD_INT 103
68250: PPUSH
68251: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
68255: LD_ADDR_EXP 53
68259: PUSH
68260: LD_EXP 53
68264: PPUSH
68265: LD_VAR 0 2
68269: PUSH
68270: LD_EXP 53
68274: PUSH
68275: LD_VAR 0 2
68279: ARRAY
68280: PUSH
68281: LD_INT 1
68283: PLUS
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PPUSH
68289: LD_VAR 0 3
68293: PPUSH
68294: CALL 24315 0 3
68298: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
68299: LD_VAR 0 3
68303: PPUSH
68304: CALL_OW 310
68308: IFFALSE 68319
// ComExitBuilding ( j ) ;
68310: LD_VAR 0 3
68314: PPUSH
68315: CALL_OW 122
// wait ( 3 ) ;
68319: LD_INT 3
68321: PPUSH
68322: CALL_OW 67
// if not mc_build_list [ i ] then
68326: LD_EXP 52
68330: PUSH
68331: LD_VAR 0 2
68335: ARRAY
68336: NOT
68337: IFFALSE 68341
// break ;
68339: GO 68440
// if not HasTask ( j ) then
68341: LD_VAR 0 3
68345: PPUSH
68346: CALL_OW 314
68350: NOT
68351: IFFALSE 68438
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
68353: LD_VAR 0 3
68357: PPUSH
68358: LD_EXP 52
68362: PUSH
68363: LD_VAR 0 2
68367: ARRAY
68368: PUSH
68369: LD_INT 1
68371: ARRAY
68372: PUSH
68373: LD_INT 1
68375: ARRAY
68376: PPUSH
68377: LD_EXP 52
68381: PUSH
68382: LD_VAR 0 2
68386: ARRAY
68387: PUSH
68388: LD_INT 1
68390: ARRAY
68391: PUSH
68392: LD_INT 2
68394: ARRAY
68395: PPUSH
68396: LD_EXP 52
68400: PUSH
68401: LD_VAR 0 2
68405: ARRAY
68406: PUSH
68407: LD_INT 1
68409: ARRAY
68410: PUSH
68411: LD_INT 3
68413: ARRAY
68414: PPUSH
68415: LD_EXP 52
68419: PUSH
68420: LD_VAR 0 2
68424: ARRAY
68425: PUSH
68426: LD_INT 1
68428: ARRAY
68429: PUSH
68430: LD_INT 4
68432: ARRAY
68433: PPUSH
68434: CALL_OW 145
// end ;
68438: GO 68227
68440: POP
68441: POP
// end else
68442: GO 68614
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] , UnitFilter ( mc_bases [ i ] , [ f_type , unit_building ] ) , [ ] ) then
68444: LD_EXP 47
68448: PUSH
68449: LD_VAR 0 2
68453: ARRAY
68454: PPUSH
68455: LD_EXP 52
68459: PUSH
68460: LD_VAR 0 2
68464: ARRAY
68465: PUSH
68466: LD_INT 1
68468: ARRAY
68469: PUSH
68470: LD_INT 1
68472: ARRAY
68473: PPUSH
68474: LD_EXP 52
68478: PUSH
68479: LD_VAR 0 2
68483: ARRAY
68484: PUSH
68485: LD_INT 1
68487: ARRAY
68488: PUSH
68489: LD_INT 2
68491: ARRAY
68492: PPUSH
68493: LD_EXP 52
68497: PUSH
68498: LD_VAR 0 2
68502: ARRAY
68503: PUSH
68504: LD_INT 1
68506: ARRAY
68507: PUSH
68508: LD_INT 3
68510: ARRAY
68511: PPUSH
68512: LD_EXP 52
68516: PUSH
68517: LD_VAR 0 2
68521: ARRAY
68522: PUSH
68523: LD_INT 1
68525: ARRAY
68526: PUSH
68527: LD_INT 4
68529: ARRAY
68530: PPUSH
68531: LD_EXP 47
68535: PUSH
68536: LD_VAR 0 2
68540: ARRAY
68541: PPUSH
68542: LD_INT 21
68544: PUSH
68545: LD_INT 3
68547: PUSH
68548: EMPTY
68549: LIST
68550: LIST
68551: PPUSH
68552: CALL_OW 72
68556: PPUSH
68557: EMPTY
68558: PPUSH
68559: CALL 31193 0 7
68563: NOT
68564: IFFALSE 68614
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
68566: LD_ADDR_EXP 52
68570: PUSH
68571: LD_EXP 52
68575: PPUSH
68576: LD_VAR 0 2
68580: PPUSH
68581: LD_EXP 52
68585: PUSH
68586: LD_VAR 0 2
68590: ARRAY
68591: PPUSH
68592: LD_INT 1
68594: PPUSH
68595: LD_INT 1
68597: NEG
68598: PPUSH
68599: LD_INT 0
68601: PPUSH
68602: CALL 23733 0 4
68606: PPUSH
68607: CALL_OW 1
68611: ST_TO_ADDR
// continue ;
68612: GO 67462
// end ; end ; end ;
68614: GO 67462
68616: POP
68617: POP
// end ;
68618: LD_VAR 0 1
68622: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
68623: LD_INT 0
68625: PPUSH
68626: PPUSH
68627: PPUSH
68628: PPUSH
68629: PPUSH
68630: PPUSH
// if not mc_bases then
68631: LD_EXP 47
68635: NOT
68636: IFFALSE 68640
// exit ;
68638: GO 69067
// for i = 1 to mc_bases do
68640: LD_ADDR_VAR 0 2
68644: PUSH
68645: DOUBLE
68646: LD_INT 1
68648: DEC
68649: ST_TO_ADDR
68650: LD_EXP 47
68654: PUSH
68655: FOR_TO
68656: IFFALSE 69065
// begin tmp := mc_build_upgrade [ i ] ;
68658: LD_ADDR_VAR 0 4
68662: PUSH
68663: LD_EXP 79
68667: PUSH
68668: LD_VAR 0 2
68672: ARRAY
68673: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
68674: LD_ADDR_VAR 0 6
68678: PUSH
68679: LD_EXP 80
68683: PUSH
68684: LD_VAR 0 2
68688: ARRAY
68689: PPUSH
68690: LD_INT 2
68692: PUSH
68693: LD_INT 30
68695: PUSH
68696: LD_INT 6
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: PUSH
68703: LD_INT 30
68705: PUSH
68706: LD_INT 7
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: LIST
68717: PPUSH
68718: CALL_OW 72
68722: ST_TO_ADDR
// if not tmp and not lab then
68723: LD_VAR 0 4
68727: NOT
68728: PUSH
68729: LD_VAR 0 6
68733: NOT
68734: AND
68735: IFFALSE 68739
// continue ;
68737: GO 68655
// if tmp then
68739: LD_VAR 0 4
68743: IFFALSE 68863
// for j in tmp do
68745: LD_ADDR_VAR 0 3
68749: PUSH
68750: LD_VAR 0 4
68754: PUSH
68755: FOR_IN
68756: IFFALSE 68861
// begin if UpgradeCost ( j ) then
68758: LD_VAR 0 3
68762: PPUSH
68763: CALL 30853 0 1
68767: IFFALSE 68859
// begin ComUpgrade ( j ) ;
68769: LD_VAR 0 3
68773: PPUSH
68774: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
68778: LD_ADDR_EXP 79
68782: PUSH
68783: LD_EXP 79
68787: PPUSH
68788: LD_VAR 0 2
68792: PPUSH
68793: LD_EXP 79
68797: PUSH
68798: LD_VAR 0 2
68802: ARRAY
68803: PUSH
68804: LD_VAR 0 3
68808: DIFF
68809: PPUSH
68810: CALL_OW 1
68814: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
68815: LD_ADDR_EXP 54
68819: PUSH
68820: LD_EXP 54
68824: PPUSH
68825: LD_VAR 0 2
68829: PUSH
68830: LD_EXP 54
68834: PUSH
68835: LD_VAR 0 2
68839: ARRAY
68840: PUSH
68841: LD_INT 1
68843: PLUS
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: PPUSH
68849: LD_VAR 0 3
68853: PPUSH
68854: CALL 24315 0 3
68858: ST_TO_ADDR
// end ; end ;
68859: GO 68755
68861: POP
68862: POP
// if not lab or not mc_lab_upgrade [ i ] then
68863: LD_VAR 0 6
68867: NOT
68868: PUSH
68869: LD_EXP 81
68873: PUSH
68874: LD_VAR 0 2
68878: ARRAY
68879: NOT
68880: OR
68881: IFFALSE 68885
// continue ;
68883: GO 68655
// for j in lab do
68885: LD_ADDR_VAR 0 3
68889: PUSH
68890: LD_VAR 0 6
68894: PUSH
68895: FOR_IN
68896: IFFALSE 69061
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
68898: LD_VAR 0 3
68902: PPUSH
68903: CALL_OW 266
68907: PUSH
68908: LD_INT 6
68910: PUSH
68911: LD_INT 7
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: IN
68918: PUSH
68919: LD_VAR 0 3
68923: PPUSH
68924: CALL_OW 461
68928: PUSH
68929: LD_INT 1
68931: NONEQUAL
68932: AND
68933: IFFALSE 69059
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
68935: LD_VAR 0 3
68939: PPUSH
68940: LD_EXP 81
68944: PUSH
68945: LD_VAR 0 2
68949: ARRAY
68950: PUSH
68951: LD_INT 1
68953: ARRAY
68954: PPUSH
68955: CALL 31058 0 2
68959: IFFALSE 69059
// begin ComCancel ( j ) ;
68961: LD_VAR 0 3
68965: PPUSH
68966: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
68970: LD_VAR 0 3
68974: PPUSH
68975: LD_EXP 81
68979: PUSH
68980: LD_VAR 0 2
68984: ARRAY
68985: PUSH
68986: LD_INT 1
68988: ARRAY
68989: PPUSH
68990: CALL_OW 207
// if not j in mc_construct_list [ i ] then
68994: LD_VAR 0 3
68998: PUSH
68999: LD_EXP 54
69003: PUSH
69004: LD_VAR 0 2
69008: ARRAY
69009: IN
69010: NOT
69011: IFFALSE 69057
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
69013: LD_ADDR_EXP 54
69017: PUSH
69018: LD_EXP 54
69022: PPUSH
69023: LD_VAR 0 2
69027: PUSH
69028: LD_EXP 54
69032: PUSH
69033: LD_VAR 0 2
69037: ARRAY
69038: PUSH
69039: LD_INT 1
69041: PLUS
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: PPUSH
69047: LD_VAR 0 3
69051: PPUSH
69052: CALL 24315 0 3
69056: ST_TO_ADDR
// break ;
69057: GO 69061
// end ; end ; end ;
69059: GO 68895
69061: POP
69062: POP
// end ;
69063: GO 68655
69065: POP
69066: POP
// end ;
69067: LD_VAR 0 1
69071: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
69072: LD_INT 0
69074: PPUSH
69075: PPUSH
69076: PPUSH
69077: PPUSH
69078: PPUSH
69079: PPUSH
69080: PPUSH
69081: PPUSH
69082: PPUSH
// if not mc_bases then
69083: LD_EXP 47
69087: NOT
69088: IFFALSE 69092
// exit ;
69090: GO 69497
// for i = 1 to mc_bases do
69092: LD_ADDR_VAR 0 2
69096: PUSH
69097: DOUBLE
69098: LD_INT 1
69100: DEC
69101: ST_TO_ADDR
69102: LD_EXP 47
69106: PUSH
69107: FOR_TO
69108: IFFALSE 69495
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
69110: LD_EXP 55
69114: PUSH
69115: LD_VAR 0 2
69119: ARRAY
69120: NOT
69121: PUSH
69122: LD_EXP 47
69126: PUSH
69127: LD_VAR 0 2
69131: ARRAY
69132: PPUSH
69133: LD_INT 30
69135: PUSH
69136: LD_INT 3
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: PPUSH
69143: CALL_OW 72
69147: NOT
69148: OR
69149: IFFALSE 69153
// continue ;
69151: GO 69107
// busy := false ;
69153: LD_ADDR_VAR 0 8
69157: PUSH
69158: LD_INT 0
69160: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
69161: LD_ADDR_VAR 0 4
69165: PUSH
69166: LD_EXP 47
69170: PUSH
69171: LD_VAR 0 2
69175: ARRAY
69176: PPUSH
69177: LD_INT 30
69179: PUSH
69180: LD_INT 3
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: PPUSH
69187: CALL_OW 72
69191: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
69192: LD_ADDR_VAR 0 6
69196: PUSH
69197: LD_EXP 55
69201: PUSH
69202: LD_VAR 0 2
69206: ARRAY
69207: PPUSH
69208: LD_INT 2
69210: PUSH
69211: LD_INT 30
69213: PUSH
69214: LD_INT 32
69216: PUSH
69217: EMPTY
69218: LIST
69219: LIST
69220: PUSH
69221: LD_INT 30
69223: PUSH
69224: LD_INT 33
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: LIST
69235: PPUSH
69236: CALL_OW 72
69240: ST_TO_ADDR
// if not t then
69241: LD_VAR 0 6
69245: NOT
69246: IFFALSE 69250
// continue ;
69248: GO 69107
// for j in tmp do
69250: LD_ADDR_VAR 0 3
69254: PUSH
69255: LD_VAR 0 4
69259: PUSH
69260: FOR_IN
69261: IFFALSE 69291
// if not BuildingStatus ( j ) = bs_idle then
69263: LD_VAR 0 3
69267: PPUSH
69268: CALL_OW 461
69272: PUSH
69273: LD_INT 2
69275: EQUAL
69276: NOT
69277: IFFALSE 69289
// begin busy := true ;
69279: LD_ADDR_VAR 0 8
69283: PUSH
69284: LD_INT 1
69286: ST_TO_ADDR
// break ;
69287: GO 69291
// end ;
69289: GO 69260
69291: POP
69292: POP
// if busy then
69293: LD_VAR 0 8
69297: IFFALSE 69301
// continue ;
69299: GO 69107
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
69301: LD_ADDR_VAR 0 7
69305: PUSH
69306: LD_VAR 0 6
69310: PPUSH
69311: LD_INT 35
69313: PUSH
69314: LD_INT 0
69316: PUSH
69317: EMPTY
69318: LIST
69319: LIST
69320: PPUSH
69321: CALL_OW 72
69325: ST_TO_ADDR
// if tw then
69326: LD_VAR 0 7
69330: IFFALSE 69407
// begin tw := tw [ 1 ] ;
69332: LD_ADDR_VAR 0 7
69336: PUSH
69337: LD_VAR 0 7
69341: PUSH
69342: LD_INT 1
69344: ARRAY
69345: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
69346: LD_ADDR_VAR 0 9
69350: PUSH
69351: LD_VAR 0 7
69355: PPUSH
69356: LD_EXP 72
69360: PUSH
69361: LD_VAR 0 2
69365: ARRAY
69366: PPUSH
69367: CALL 29320 0 2
69371: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
69372: LD_EXP 86
69376: PUSH
69377: LD_VAR 0 2
69381: ARRAY
69382: IFFALSE 69405
// if not weapon in mc_allowed_tower_weapons [ i ] then
69384: LD_VAR 0 9
69388: PUSH
69389: LD_EXP 86
69393: PUSH
69394: LD_VAR 0 2
69398: ARRAY
69399: IN
69400: NOT
69401: IFFALSE 69405
// continue ;
69403: GO 69107
// end else
69405: GO 69470
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
69407: LD_ADDR_VAR 0 5
69411: PUSH
69412: LD_EXP 55
69416: PUSH
69417: LD_VAR 0 2
69421: ARRAY
69422: PPUSH
69423: LD_VAR 0 4
69427: PPUSH
69428: CALL 55239 0 2
69432: ST_TO_ADDR
// if not tmp2 then
69433: LD_VAR 0 5
69437: NOT
69438: IFFALSE 69442
// continue ;
69440: GO 69107
// tw := tmp2 [ 1 ] ;
69442: LD_ADDR_VAR 0 7
69446: PUSH
69447: LD_VAR 0 5
69451: PUSH
69452: LD_INT 1
69454: ARRAY
69455: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
69456: LD_ADDR_VAR 0 9
69460: PUSH
69461: LD_VAR 0 5
69465: PUSH
69466: LD_INT 2
69468: ARRAY
69469: ST_TO_ADDR
// end ; if not weapon then
69470: LD_VAR 0 9
69474: NOT
69475: IFFALSE 69479
// continue ;
69477: GO 69107
// ComPlaceWeapon ( tw , weapon ) ;
69479: LD_VAR 0 7
69483: PPUSH
69484: LD_VAR 0 9
69488: PPUSH
69489: CALL_OW 148
// end ;
69493: GO 69107
69495: POP
69496: POP
// end ;
69497: LD_VAR 0 1
69501: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list , r ; begin
69502: LD_INT 0
69504: PPUSH
69505: PPUSH
69506: PPUSH
69507: PPUSH
69508: PPUSH
69509: PPUSH
69510: PPUSH
// if not mc_bases then
69511: LD_EXP 47
69515: NOT
69516: IFFALSE 69520
// exit ;
69518: GO 70288
// for i = 1 to mc_bases do
69520: LD_ADDR_VAR 0 2
69524: PUSH
69525: DOUBLE
69526: LD_INT 1
69528: DEC
69529: ST_TO_ADDR
69530: LD_EXP 47
69534: PUSH
69535: FOR_TO
69536: IFFALSE 70286
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
69538: LD_EXP 60
69542: PUSH
69543: LD_VAR 0 2
69547: ARRAY
69548: NOT
69549: PUSH
69550: LD_EXP 60
69554: PUSH
69555: LD_VAR 0 2
69559: ARRAY
69560: PUSH
69561: LD_EXP 61
69565: PUSH
69566: LD_VAR 0 2
69570: ARRAY
69571: EQUAL
69572: OR
69573: PUSH
69574: LD_EXP 70
69578: PUSH
69579: LD_VAR 0 2
69583: ARRAY
69584: OR
69585: IFFALSE 69589
// continue ;
69587: GO 69535
// if mc_miners [ i ] then
69589: LD_EXP 61
69593: PUSH
69594: LD_VAR 0 2
69598: ARRAY
69599: IFFALSE 69973
// begin for j = mc_miners [ i ] downto 1 do
69601: LD_ADDR_VAR 0 3
69605: PUSH
69606: DOUBLE
69607: LD_EXP 61
69611: PUSH
69612: LD_VAR 0 2
69616: ARRAY
69617: INC
69618: ST_TO_ADDR
69619: LD_INT 1
69621: PUSH
69622: FOR_DOWNTO
69623: IFFALSE 69971
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
69625: LD_EXP 61
69629: PUSH
69630: LD_VAR 0 2
69634: ARRAY
69635: PUSH
69636: LD_VAR 0 3
69640: ARRAY
69641: PPUSH
69642: CALL_OW 301
69646: PUSH
69647: LD_EXP 61
69651: PUSH
69652: LD_VAR 0 2
69656: ARRAY
69657: PUSH
69658: LD_VAR 0 3
69662: ARRAY
69663: PPUSH
69664: CALL_OW 257
69668: PUSH
69669: LD_INT 1
69671: NONEQUAL
69672: OR
69673: IFFALSE 69736
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
69675: LD_ADDR_VAR 0 5
69679: PUSH
69680: LD_EXP 61
69684: PUSH
69685: LD_VAR 0 2
69689: ARRAY
69690: PUSH
69691: LD_EXP 61
69695: PUSH
69696: LD_VAR 0 2
69700: ARRAY
69701: PUSH
69702: LD_VAR 0 3
69706: ARRAY
69707: DIFF
69708: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
69709: LD_ADDR_EXP 61
69713: PUSH
69714: LD_EXP 61
69718: PPUSH
69719: LD_VAR 0 2
69723: PPUSH
69724: LD_VAR 0 5
69728: PPUSH
69729: CALL_OW 1
69733: ST_TO_ADDR
// continue ;
69734: GO 69622
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
69736: LD_EXP 61
69740: PUSH
69741: LD_VAR 0 2
69745: ARRAY
69746: PUSH
69747: LD_VAR 0 3
69751: ARRAY
69752: PPUSH
69753: CALL_OW 257
69757: PUSH
69758: LD_INT 1
69760: EQUAL
69761: PUSH
69762: LD_EXP 61
69766: PUSH
69767: LD_VAR 0 2
69771: ARRAY
69772: PUSH
69773: LD_VAR 0 3
69777: ARRAY
69778: PPUSH
69779: CALL_OW 459
69783: NOT
69784: AND
69785: PUSH
69786: LD_EXP 61
69790: PUSH
69791: LD_VAR 0 2
69795: ARRAY
69796: PUSH
69797: LD_VAR 0 3
69801: ARRAY
69802: PPUSH
69803: CALL_OW 314
69807: NOT
69808: AND
69809: IFFALSE 69969
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
69811: LD_EXP 61
69815: PUSH
69816: LD_VAR 0 2
69820: ARRAY
69821: PUSH
69822: LD_VAR 0 3
69826: ARRAY
69827: PPUSH
69828: CALL_OW 310
69832: IFFALSE 69855
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
69834: LD_EXP 61
69838: PUSH
69839: LD_VAR 0 2
69843: ARRAY
69844: PUSH
69845: LD_VAR 0 3
69849: ARRAY
69850: PPUSH
69851: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
69855: LD_EXP 61
69859: PUSH
69860: LD_VAR 0 2
69864: ARRAY
69865: PUSH
69866: LD_VAR 0 3
69870: ARRAY
69871: PPUSH
69872: CALL_OW 314
69876: NOT
69877: IFFALSE 69969
// begin r := rand ( 1 , mc_mines [ i ] ) ;
69879: LD_ADDR_VAR 0 7
69883: PUSH
69884: LD_INT 1
69886: PPUSH
69887: LD_EXP 60
69891: PUSH
69892: LD_VAR 0 2
69896: ARRAY
69897: PPUSH
69898: CALL_OW 12
69902: ST_TO_ADDR
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ r ] [ 1 ] , mc_mines [ i ] [ r ] [ 2 ] , 0 ) ;
69903: LD_EXP 61
69907: PUSH
69908: LD_VAR 0 2
69912: ARRAY
69913: PUSH
69914: LD_VAR 0 3
69918: ARRAY
69919: PPUSH
69920: LD_EXP 60
69924: PUSH
69925: LD_VAR 0 2
69929: ARRAY
69930: PUSH
69931: LD_VAR 0 7
69935: ARRAY
69936: PUSH
69937: LD_INT 1
69939: ARRAY
69940: PPUSH
69941: LD_EXP 60
69945: PUSH
69946: LD_VAR 0 2
69950: ARRAY
69951: PUSH
69952: LD_VAR 0 7
69956: ARRAY
69957: PUSH
69958: LD_INT 2
69960: ARRAY
69961: PPUSH
69962: LD_INT 0
69964: PPUSH
69965: CALL_OW 193
// end ; end ; end ;
69969: GO 69622
69971: POP
69972: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
69973: LD_ADDR_VAR 0 5
69977: PUSH
69978: LD_EXP 47
69982: PUSH
69983: LD_VAR 0 2
69987: ARRAY
69988: PPUSH
69989: LD_INT 2
69991: PUSH
69992: LD_INT 30
69994: PUSH
69995: LD_INT 4
69997: PUSH
69998: EMPTY
69999: LIST
70000: LIST
70001: PUSH
70002: LD_INT 30
70004: PUSH
70005: LD_INT 5
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: PUSH
70012: LD_INT 30
70014: PUSH
70015: LD_INT 32
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: PUSH
70022: EMPTY
70023: LIST
70024: LIST
70025: LIST
70026: LIST
70027: PPUSH
70028: CALL_OW 72
70032: ST_TO_ADDR
// if not tmp then
70033: LD_VAR 0 5
70037: NOT
70038: IFFALSE 70042
// continue ;
70040: GO 69535
// list := [ ] ;
70042: LD_ADDR_VAR 0 6
70046: PUSH
70047: EMPTY
70048: ST_TO_ADDR
// for j in tmp do
70049: LD_ADDR_VAR 0 3
70053: PUSH
70054: LD_VAR 0 5
70058: PUSH
70059: FOR_IN
70060: IFFALSE 70129
// begin for k in UnitsInside ( j ) do
70062: LD_ADDR_VAR 0 4
70066: PUSH
70067: LD_VAR 0 3
70071: PPUSH
70072: CALL_OW 313
70076: PUSH
70077: FOR_IN
70078: IFFALSE 70125
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
70080: LD_VAR 0 4
70084: PPUSH
70085: CALL_OW 257
70089: PUSH
70090: LD_INT 1
70092: EQUAL
70093: PUSH
70094: LD_VAR 0 4
70098: PPUSH
70099: CALL_OW 459
70103: NOT
70104: AND
70105: IFFALSE 70123
// list := list ^ k ;
70107: LD_ADDR_VAR 0 6
70111: PUSH
70112: LD_VAR 0 6
70116: PUSH
70117: LD_VAR 0 4
70121: ADD
70122: ST_TO_ADDR
70123: GO 70077
70125: POP
70126: POP
// end ;
70127: GO 70059
70129: POP
70130: POP
// list := list diff mc_miners [ i ] ;
70131: LD_ADDR_VAR 0 6
70135: PUSH
70136: LD_VAR 0 6
70140: PUSH
70141: LD_EXP 61
70145: PUSH
70146: LD_VAR 0 2
70150: ARRAY
70151: DIFF
70152: ST_TO_ADDR
// if not list then
70153: LD_VAR 0 6
70157: NOT
70158: IFFALSE 70162
// continue ;
70160: GO 69535
// k := mc_mines [ i ] - mc_miners [ i ] ;
70162: LD_ADDR_VAR 0 4
70166: PUSH
70167: LD_EXP 60
70171: PUSH
70172: LD_VAR 0 2
70176: ARRAY
70177: PUSH
70178: LD_EXP 61
70182: PUSH
70183: LD_VAR 0 2
70187: ARRAY
70188: MINUS
70189: ST_TO_ADDR
// if k > list then
70190: LD_VAR 0 4
70194: PUSH
70195: LD_VAR 0 6
70199: GREATER
70200: IFFALSE 70212
// k := list ;
70202: LD_ADDR_VAR 0 4
70206: PUSH
70207: LD_VAR 0 6
70211: ST_TO_ADDR
// for j = 1 to k do
70212: LD_ADDR_VAR 0 3
70216: PUSH
70217: DOUBLE
70218: LD_INT 1
70220: DEC
70221: ST_TO_ADDR
70222: LD_VAR 0 4
70226: PUSH
70227: FOR_TO
70228: IFFALSE 70282
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
70230: LD_ADDR_EXP 61
70234: PUSH
70235: LD_EXP 61
70239: PPUSH
70240: LD_VAR 0 2
70244: PUSH
70245: LD_EXP 61
70249: PUSH
70250: LD_VAR 0 2
70254: ARRAY
70255: PUSH
70256: LD_INT 1
70258: PLUS
70259: PUSH
70260: EMPTY
70261: LIST
70262: LIST
70263: PPUSH
70264: LD_VAR 0 6
70268: PUSH
70269: LD_VAR 0 3
70273: ARRAY
70274: PPUSH
70275: CALL 24315 0 3
70279: ST_TO_ADDR
70280: GO 70227
70282: POP
70283: POP
// end ;
70284: GO 69535
70286: POP
70287: POP
// end ;
70288: LD_VAR 0 1
70292: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
70293: LD_INT 0
70295: PPUSH
70296: PPUSH
70297: PPUSH
70298: PPUSH
70299: PPUSH
70300: PPUSH
70301: PPUSH
70302: PPUSH
70303: PPUSH
70304: PPUSH
// if not mc_bases then
70305: LD_EXP 47
70309: NOT
70310: IFFALSE 70314
// exit ;
70312: GO 72064
// for i = 1 to mc_bases do
70314: LD_ADDR_VAR 0 2
70318: PUSH
70319: DOUBLE
70320: LD_INT 1
70322: DEC
70323: ST_TO_ADDR
70324: LD_EXP 47
70328: PUSH
70329: FOR_TO
70330: IFFALSE 72062
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
70332: LD_EXP 47
70336: PUSH
70337: LD_VAR 0 2
70341: ARRAY
70342: NOT
70343: PUSH
70344: LD_EXP 54
70348: PUSH
70349: LD_VAR 0 2
70353: ARRAY
70354: OR
70355: IFFALSE 70359
// continue ;
70357: GO 70329
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
70359: LD_EXP 63
70363: PUSH
70364: LD_VAR 0 2
70368: ARRAY
70369: NOT
70370: PUSH
70371: LD_EXP 64
70375: PUSH
70376: LD_VAR 0 2
70380: ARRAY
70381: AND
70382: IFFALSE 70420
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
70384: LD_ADDR_EXP 64
70388: PUSH
70389: LD_EXP 64
70393: PPUSH
70394: LD_VAR 0 2
70398: PPUSH
70399: EMPTY
70400: PPUSH
70401: CALL_OW 1
70405: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
70406: LD_VAR 0 2
70410: PPUSH
70411: LD_INT 107
70413: PPUSH
70414: CALL 61247 0 2
// continue ;
70418: GO 70329
// end ; target := [ ] ;
70420: LD_ADDR_VAR 0 6
70424: PUSH
70425: EMPTY
70426: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
70427: LD_ADDR_VAR 0 3
70431: PUSH
70432: DOUBLE
70433: LD_EXP 63
70437: PUSH
70438: LD_VAR 0 2
70442: ARRAY
70443: INC
70444: ST_TO_ADDR
70445: LD_INT 1
70447: PUSH
70448: FOR_DOWNTO
70449: IFFALSE 70709
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
70451: LD_EXP 63
70455: PUSH
70456: LD_VAR 0 2
70460: ARRAY
70461: PUSH
70462: LD_VAR 0 3
70466: ARRAY
70467: PUSH
70468: LD_INT 2
70470: ARRAY
70471: PPUSH
70472: LD_EXP 63
70476: PUSH
70477: LD_VAR 0 2
70481: ARRAY
70482: PUSH
70483: LD_VAR 0 3
70487: ARRAY
70488: PUSH
70489: LD_INT 3
70491: ARRAY
70492: PPUSH
70493: CALL_OW 488
70497: PUSH
70498: LD_EXP 63
70502: PUSH
70503: LD_VAR 0 2
70507: ARRAY
70508: PUSH
70509: LD_VAR 0 3
70513: ARRAY
70514: PUSH
70515: LD_INT 2
70517: ARRAY
70518: PPUSH
70519: LD_EXP 63
70523: PUSH
70524: LD_VAR 0 2
70528: ARRAY
70529: PUSH
70530: LD_VAR 0 3
70534: ARRAY
70535: PUSH
70536: LD_INT 3
70538: ARRAY
70539: PPUSH
70540: CALL_OW 284
70544: PUSH
70545: LD_INT 0
70547: EQUAL
70548: AND
70549: IFFALSE 70604
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
70551: LD_ADDR_VAR 0 5
70555: PUSH
70556: LD_EXP 63
70560: PUSH
70561: LD_VAR 0 2
70565: ARRAY
70566: PPUSH
70567: LD_VAR 0 3
70571: PPUSH
70572: CALL_OW 3
70576: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
70577: LD_ADDR_EXP 63
70581: PUSH
70582: LD_EXP 63
70586: PPUSH
70587: LD_VAR 0 2
70591: PPUSH
70592: LD_VAR 0 5
70596: PPUSH
70597: CALL_OW 1
70601: ST_TO_ADDR
// continue ;
70602: GO 70448
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
70604: LD_EXP 47
70608: PUSH
70609: LD_VAR 0 2
70613: ARRAY
70614: PUSH
70615: LD_INT 1
70617: ARRAY
70618: PPUSH
70619: CALL_OW 255
70623: PPUSH
70624: LD_EXP 63
70628: PUSH
70629: LD_VAR 0 2
70633: ARRAY
70634: PUSH
70635: LD_VAR 0 3
70639: ARRAY
70640: PUSH
70641: LD_INT 2
70643: ARRAY
70644: PPUSH
70645: LD_EXP 63
70649: PUSH
70650: LD_VAR 0 2
70654: ARRAY
70655: PUSH
70656: LD_VAR 0 3
70660: ARRAY
70661: PUSH
70662: LD_INT 3
70664: ARRAY
70665: PPUSH
70666: LD_INT 30
70668: PPUSH
70669: CALL 25211 0 4
70673: PUSH
70674: LD_INT 4
70676: ARRAY
70677: PUSH
70678: LD_INT 0
70680: EQUAL
70681: IFFALSE 70707
// begin target := mc_crates [ i ] [ j ] ;
70683: LD_ADDR_VAR 0 6
70687: PUSH
70688: LD_EXP 63
70692: PUSH
70693: LD_VAR 0 2
70697: ARRAY
70698: PUSH
70699: LD_VAR 0 3
70703: ARRAY
70704: ST_TO_ADDR
// break ;
70705: GO 70709
// end ; end ;
70707: GO 70448
70709: POP
70710: POP
// if not target then
70711: LD_VAR 0 6
70715: NOT
70716: IFFALSE 70720
// continue ;
70718: GO 70329
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
70720: LD_ADDR_VAR 0 7
70724: PUSH
70725: LD_EXP 66
70729: PUSH
70730: LD_VAR 0 2
70734: ARRAY
70735: PPUSH
70736: LD_INT 2
70738: PUSH
70739: LD_INT 3
70741: PUSH
70742: LD_INT 58
70744: PUSH
70745: EMPTY
70746: LIST
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: PUSH
70752: LD_INT 61
70754: PUSH
70755: EMPTY
70756: LIST
70757: PUSH
70758: LD_INT 33
70760: PUSH
70761: LD_INT 5
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: PUSH
70768: LD_INT 33
70770: PUSH
70771: LD_INT 3
70773: PUSH
70774: EMPTY
70775: LIST
70776: LIST
70777: PUSH
70778: EMPTY
70779: LIST
70780: LIST
70781: LIST
70782: LIST
70783: LIST
70784: PUSH
70785: LD_INT 2
70787: PUSH
70788: LD_INT 34
70790: PUSH
70791: LD_INT 32
70793: PUSH
70794: EMPTY
70795: LIST
70796: LIST
70797: PUSH
70798: LD_INT 34
70800: PUSH
70801: LD_INT 51
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: PUSH
70808: LD_INT 34
70810: PUSH
70811: LD_INT 12
70813: PUSH
70814: EMPTY
70815: LIST
70816: LIST
70817: PUSH
70818: EMPTY
70819: LIST
70820: LIST
70821: LIST
70822: LIST
70823: PUSH
70824: EMPTY
70825: LIST
70826: LIST
70827: PPUSH
70828: CALL_OW 72
70832: ST_TO_ADDR
// if not cargo then
70833: LD_VAR 0 7
70837: NOT
70838: IFFALSE 71481
// begin if mc_crates_collector [ i ] < 5 then
70840: LD_EXP 64
70844: PUSH
70845: LD_VAR 0 2
70849: ARRAY
70850: PUSH
70851: LD_INT 5
70853: LESS
70854: IFFALSE 71220
// begin if mc_ape [ i ] then
70856: LD_EXP 76
70860: PUSH
70861: LD_VAR 0 2
70865: ARRAY
70866: IFFALSE 70913
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
70868: LD_ADDR_VAR 0 5
70872: PUSH
70873: LD_EXP 76
70877: PUSH
70878: LD_VAR 0 2
70882: ARRAY
70883: PPUSH
70884: LD_INT 25
70886: PUSH
70887: LD_INT 16
70889: PUSH
70890: EMPTY
70891: LIST
70892: LIST
70893: PUSH
70894: LD_INT 24
70896: PUSH
70897: LD_INT 750
70899: PUSH
70900: EMPTY
70901: LIST
70902: LIST
70903: PUSH
70904: EMPTY
70905: LIST
70906: LIST
70907: PPUSH
70908: CALL_OW 72
70912: ST_TO_ADDR
// if not tmp then
70913: LD_VAR 0 5
70917: NOT
70918: IFFALSE 70965
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
70920: LD_ADDR_VAR 0 5
70924: PUSH
70925: LD_EXP 47
70929: PUSH
70930: LD_VAR 0 2
70934: ARRAY
70935: PPUSH
70936: LD_INT 25
70938: PUSH
70939: LD_INT 2
70941: PUSH
70942: EMPTY
70943: LIST
70944: LIST
70945: PUSH
70946: LD_INT 24
70948: PUSH
70949: LD_INT 750
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: PUSH
70956: EMPTY
70957: LIST
70958: LIST
70959: PPUSH
70960: CALL_OW 72
70964: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
70965: LD_EXP 76
70969: PUSH
70970: LD_VAR 0 2
70974: ARRAY
70975: PUSH
70976: LD_EXP 47
70980: PUSH
70981: LD_VAR 0 2
70985: ARRAY
70986: PPUSH
70987: LD_INT 25
70989: PUSH
70990: LD_INT 2
70992: PUSH
70993: EMPTY
70994: LIST
70995: LIST
70996: PUSH
70997: LD_INT 24
70999: PUSH
71000: LD_INT 750
71002: PUSH
71003: EMPTY
71004: LIST
71005: LIST
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PPUSH
71011: CALL_OW 72
71015: AND
71016: PUSH
71017: LD_VAR 0 5
71021: PUSH
71022: LD_INT 5
71024: LESS
71025: AND
71026: IFFALSE 71108
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
71028: LD_ADDR_VAR 0 3
71032: PUSH
71033: LD_EXP 47
71037: PUSH
71038: LD_VAR 0 2
71042: ARRAY
71043: PPUSH
71044: LD_INT 25
71046: PUSH
71047: LD_INT 2
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: PUSH
71054: LD_INT 24
71056: PUSH
71057: LD_INT 750
71059: PUSH
71060: EMPTY
71061: LIST
71062: LIST
71063: PUSH
71064: EMPTY
71065: LIST
71066: LIST
71067: PPUSH
71068: CALL_OW 72
71072: PUSH
71073: FOR_IN
71074: IFFALSE 71106
// begin tmp := tmp union j ;
71076: LD_ADDR_VAR 0 5
71080: PUSH
71081: LD_VAR 0 5
71085: PUSH
71086: LD_VAR 0 3
71090: UNION
71091: ST_TO_ADDR
// if tmp >= 5 then
71092: LD_VAR 0 5
71096: PUSH
71097: LD_INT 5
71099: GREATEREQUAL
71100: IFFALSE 71104
// break ;
71102: GO 71106
// end ;
71104: GO 71073
71106: POP
71107: POP
// end ; if not tmp then
71108: LD_VAR 0 5
71112: NOT
71113: IFFALSE 71117
// continue ;
71115: GO 70329
// for j in tmp do
71117: LD_ADDR_VAR 0 3
71121: PUSH
71122: LD_VAR 0 5
71126: PUSH
71127: FOR_IN
71128: IFFALSE 71218
// if not GetTag ( j ) then
71130: LD_VAR 0 3
71134: PPUSH
71135: CALL_OW 110
71139: NOT
71140: IFFALSE 71216
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
71142: LD_ADDR_EXP 64
71146: PUSH
71147: LD_EXP 64
71151: PPUSH
71152: LD_VAR 0 2
71156: PUSH
71157: LD_EXP 64
71161: PUSH
71162: LD_VAR 0 2
71166: ARRAY
71167: PUSH
71168: LD_INT 1
71170: PLUS
71171: PUSH
71172: EMPTY
71173: LIST
71174: LIST
71175: PPUSH
71176: LD_VAR 0 3
71180: PPUSH
71181: CALL 24315 0 3
71185: ST_TO_ADDR
// SetTag ( j , 107 ) ;
71186: LD_VAR 0 3
71190: PPUSH
71191: LD_INT 107
71193: PPUSH
71194: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
71198: LD_EXP 64
71202: PUSH
71203: LD_VAR 0 2
71207: ARRAY
71208: PUSH
71209: LD_INT 5
71211: GREATEREQUAL
71212: IFFALSE 71216
// break ;
71214: GO 71218
// end ;
71216: GO 71127
71218: POP
71219: POP
// end ; if mc_crates_collector [ i ] and target then
71220: LD_EXP 64
71224: PUSH
71225: LD_VAR 0 2
71229: ARRAY
71230: PUSH
71231: LD_VAR 0 6
71235: AND
71236: IFFALSE 71479
// begin if mc_crates_collector [ i ] < target [ 1 ] then
71238: LD_EXP 64
71242: PUSH
71243: LD_VAR 0 2
71247: ARRAY
71248: PUSH
71249: LD_VAR 0 6
71253: PUSH
71254: LD_INT 1
71256: ARRAY
71257: LESS
71258: IFFALSE 71278
// tmp := mc_crates_collector [ i ] else
71260: LD_ADDR_VAR 0 5
71264: PUSH
71265: LD_EXP 64
71269: PUSH
71270: LD_VAR 0 2
71274: ARRAY
71275: ST_TO_ADDR
71276: GO 71292
// tmp := target [ 1 ] ;
71278: LD_ADDR_VAR 0 5
71282: PUSH
71283: LD_VAR 0 6
71287: PUSH
71288: LD_INT 1
71290: ARRAY
71291: ST_TO_ADDR
// k := 0 ;
71292: LD_ADDR_VAR 0 4
71296: PUSH
71297: LD_INT 0
71299: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
71300: LD_ADDR_VAR 0 3
71304: PUSH
71305: LD_EXP 64
71309: PUSH
71310: LD_VAR 0 2
71314: ARRAY
71315: PUSH
71316: FOR_IN
71317: IFFALSE 71477
// begin k := k + 1 ;
71319: LD_ADDR_VAR 0 4
71323: PUSH
71324: LD_VAR 0 4
71328: PUSH
71329: LD_INT 1
71331: PLUS
71332: ST_TO_ADDR
// if k > tmp then
71333: LD_VAR 0 4
71337: PUSH
71338: LD_VAR 0 5
71342: GREATER
71343: IFFALSE 71347
// break ;
71345: GO 71477
// if not GetClass ( j ) in [ 2 , 16 ] then
71347: LD_VAR 0 3
71351: PPUSH
71352: CALL_OW 257
71356: PUSH
71357: LD_INT 2
71359: PUSH
71360: LD_INT 16
71362: PUSH
71363: EMPTY
71364: LIST
71365: LIST
71366: IN
71367: NOT
71368: IFFALSE 71421
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
71370: LD_ADDR_EXP 64
71374: PUSH
71375: LD_EXP 64
71379: PPUSH
71380: LD_VAR 0 2
71384: PPUSH
71385: LD_EXP 64
71389: PUSH
71390: LD_VAR 0 2
71394: ARRAY
71395: PUSH
71396: LD_VAR 0 3
71400: DIFF
71401: PPUSH
71402: CALL_OW 1
71406: ST_TO_ADDR
// SetTag ( j , 0 ) ;
71407: LD_VAR 0 3
71411: PPUSH
71412: LD_INT 0
71414: PPUSH
71415: CALL_OW 109
// continue ;
71419: GO 71316
// end ; if IsInUnit ( j ) then
71421: LD_VAR 0 3
71425: PPUSH
71426: CALL_OW 310
71430: IFFALSE 71441
// ComExitBuilding ( j ) ;
71432: LD_VAR 0 3
71436: PPUSH
71437: CALL_OW 122
// wait ( 3 ) ;
71441: LD_INT 3
71443: PPUSH
71444: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
71448: LD_VAR 0 3
71452: PPUSH
71453: LD_VAR 0 6
71457: PUSH
71458: LD_INT 2
71460: ARRAY
71461: PPUSH
71462: LD_VAR 0 6
71466: PUSH
71467: LD_INT 3
71469: ARRAY
71470: PPUSH
71471: CALL_OW 117
// end ;
71475: GO 71316
71477: POP
71478: POP
// end ; end else
71479: GO 72060
// begin for j in cargo do
71481: LD_ADDR_VAR 0 3
71485: PUSH
71486: LD_VAR 0 7
71490: PUSH
71491: FOR_IN
71492: IFFALSE 72058
// begin if GetTag ( j ) <> 0 then
71494: LD_VAR 0 3
71498: PPUSH
71499: CALL_OW 110
71503: PUSH
71504: LD_INT 0
71506: NONEQUAL
71507: IFFALSE 71511
// continue ;
71509: GO 71491
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
71511: LD_VAR 0 3
71515: PPUSH
71516: CALL_OW 256
71520: PUSH
71521: LD_INT 1000
71523: LESS
71524: PUSH
71525: LD_VAR 0 3
71529: PPUSH
71530: LD_EXP 71
71534: PUSH
71535: LD_VAR 0 2
71539: ARRAY
71540: PPUSH
71541: CALL_OW 308
71545: NOT
71546: AND
71547: IFFALSE 71569
// ComMoveToArea ( j , mc_parking [ i ] ) ;
71549: LD_VAR 0 3
71553: PPUSH
71554: LD_EXP 71
71558: PUSH
71559: LD_VAR 0 2
71563: ARRAY
71564: PPUSH
71565: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
71569: LD_VAR 0 3
71573: PPUSH
71574: CALL_OW 256
71578: PUSH
71579: LD_INT 1000
71581: LESS
71582: PUSH
71583: LD_VAR 0 3
71587: PPUSH
71588: LD_EXP 71
71592: PUSH
71593: LD_VAR 0 2
71597: ARRAY
71598: PPUSH
71599: CALL_OW 308
71603: AND
71604: IFFALSE 71608
// continue ;
71606: GO 71491
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
71608: LD_VAR 0 3
71612: PPUSH
71613: CALL_OW 262
71617: PUSH
71618: LD_INT 2
71620: EQUAL
71621: PUSH
71622: LD_VAR 0 3
71626: PPUSH
71627: CALL_OW 261
71631: PUSH
71632: LD_INT 15
71634: LESS
71635: AND
71636: IFFALSE 71640
// continue ;
71638: GO 71491
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
71640: LD_VAR 0 3
71644: PPUSH
71645: CALL_OW 262
71649: PUSH
71650: LD_INT 1
71652: EQUAL
71653: PUSH
71654: LD_VAR 0 3
71658: PPUSH
71659: CALL_OW 261
71663: PUSH
71664: LD_INT 10
71666: LESS
71667: AND
71668: IFFALSE 71997
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
71670: LD_ADDR_VAR 0 8
71674: PUSH
71675: LD_EXP 47
71679: PUSH
71680: LD_VAR 0 2
71684: ARRAY
71685: PPUSH
71686: LD_INT 2
71688: PUSH
71689: LD_INT 30
71691: PUSH
71692: LD_INT 0
71694: PUSH
71695: EMPTY
71696: LIST
71697: LIST
71698: PUSH
71699: LD_INT 30
71701: PUSH
71702: LD_INT 1
71704: PUSH
71705: EMPTY
71706: LIST
71707: LIST
71708: PUSH
71709: EMPTY
71710: LIST
71711: LIST
71712: LIST
71713: PPUSH
71714: CALL_OW 72
71718: ST_TO_ADDR
// if not depot then
71719: LD_VAR 0 8
71723: NOT
71724: IFFALSE 71728
// continue ;
71726: GO 71491
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
71728: LD_VAR 0 3
71732: PPUSH
71733: LD_VAR 0 8
71737: PPUSH
71738: LD_VAR 0 3
71742: PPUSH
71743: CALL_OW 74
71747: PPUSH
71748: CALL_OW 296
71752: PUSH
71753: LD_INT 6
71755: LESS
71756: IFFALSE 71772
// SetFuel ( j , 100 ) else
71758: LD_VAR 0 3
71762: PPUSH
71763: LD_INT 100
71765: PPUSH
71766: CALL_OW 240
71770: GO 71997
// if GetFuel ( j ) = 0 then
71772: LD_VAR 0 3
71776: PPUSH
71777: CALL_OW 261
71781: PUSH
71782: LD_INT 0
71784: EQUAL
71785: IFFALSE 71997
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
71787: LD_ADDR_EXP 66
71791: PUSH
71792: LD_EXP 66
71796: PPUSH
71797: LD_VAR 0 2
71801: PPUSH
71802: LD_EXP 66
71806: PUSH
71807: LD_VAR 0 2
71811: ARRAY
71812: PUSH
71813: LD_VAR 0 3
71817: DIFF
71818: PPUSH
71819: CALL_OW 1
71823: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
71824: LD_VAR 0 3
71828: PPUSH
71829: CALL_OW 263
71833: PUSH
71834: LD_INT 1
71836: EQUAL
71837: IFFALSE 71853
// ComExitVehicle ( IsInUnit ( j ) ) ;
71839: LD_VAR 0 3
71843: PPUSH
71844: CALL_OW 310
71848: PPUSH
71849: CALL_OW 121
// if GetControl ( j ) = control_remote then
71853: LD_VAR 0 3
71857: PPUSH
71858: CALL_OW 263
71862: PUSH
71863: LD_INT 2
71865: EQUAL
71866: IFFALSE 71877
// ComUnlink ( j ) ;
71868: LD_VAR 0 3
71872: PPUSH
71873: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
71877: LD_ADDR_VAR 0 9
71881: PUSH
71882: LD_VAR 0 2
71886: PPUSH
71887: LD_INT 3
71889: PPUSH
71890: CALL 81372 0 2
71894: ST_TO_ADDR
// if fac then
71895: LD_VAR 0 9
71899: IFFALSE 71995
// begin for k in fac do
71901: LD_ADDR_VAR 0 4
71905: PUSH
71906: LD_VAR 0 9
71910: PUSH
71911: FOR_IN
71912: IFFALSE 71993
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
71914: LD_ADDR_VAR 0 10
71918: PUSH
71919: LD_VAR 0 9
71923: PPUSH
71924: LD_VAR 0 3
71928: PPUSH
71929: CALL_OW 265
71933: PPUSH
71934: LD_VAR 0 3
71938: PPUSH
71939: CALL_OW 262
71943: PPUSH
71944: LD_VAR 0 3
71948: PPUSH
71949: CALL_OW 263
71953: PPUSH
71954: LD_VAR 0 3
71958: PPUSH
71959: CALL_OW 264
71963: PPUSH
71964: CALL 21847 0 5
71968: ST_TO_ADDR
// if components then
71969: LD_VAR 0 10
71973: IFFALSE 71991
// begin MC_InsertProduceList ( i , components ) ;
71975: LD_VAR 0 2
71979: PPUSH
71980: LD_VAR 0 10
71984: PPUSH
71985: CALL 80917 0 2
// break ;
71989: GO 71993
// end ; end ;
71991: GO 71911
71993: POP
71994: POP
// end ; continue ;
71995: GO 71491
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
71997: LD_VAR 0 3
72001: PPUSH
72002: LD_INT 1
72004: PPUSH
72005: CALL_OW 289
72009: PUSH
72010: LD_INT 100
72012: LESS
72013: PUSH
72014: LD_VAR 0 3
72018: PPUSH
72019: CALL_OW 314
72023: NOT
72024: AND
72025: IFFALSE 72054
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
72027: LD_VAR 0 3
72031: PPUSH
72032: LD_VAR 0 6
72036: PUSH
72037: LD_INT 2
72039: ARRAY
72040: PPUSH
72041: LD_VAR 0 6
72045: PUSH
72046: LD_INT 3
72048: ARRAY
72049: PPUSH
72050: CALL_OW 117
// break ;
72054: GO 72058
// end ;
72056: GO 71491
72058: POP
72059: POP
// end ; end ;
72060: GO 70329
72062: POP
72063: POP
// end ;
72064: LD_VAR 0 1
72068: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
72069: LD_INT 0
72071: PPUSH
72072: PPUSH
72073: PPUSH
72074: PPUSH
// if not mc_bases then
72075: LD_EXP 47
72079: NOT
72080: IFFALSE 72084
// exit ;
72082: GO 72245
// for i = 1 to mc_bases do
72084: LD_ADDR_VAR 0 2
72088: PUSH
72089: DOUBLE
72090: LD_INT 1
72092: DEC
72093: ST_TO_ADDR
72094: LD_EXP 47
72098: PUSH
72099: FOR_TO
72100: IFFALSE 72243
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
72102: LD_ADDR_VAR 0 4
72106: PUSH
72107: LD_EXP 66
72111: PUSH
72112: LD_VAR 0 2
72116: ARRAY
72117: PUSH
72118: LD_EXP 69
72122: PUSH
72123: LD_VAR 0 2
72127: ARRAY
72128: UNION
72129: PPUSH
72130: LD_INT 33
72132: PUSH
72133: LD_INT 2
72135: PUSH
72136: EMPTY
72137: LIST
72138: LIST
72139: PPUSH
72140: CALL_OW 72
72144: ST_TO_ADDR
// if tmp then
72145: LD_VAR 0 4
72149: IFFALSE 72241
// for j in tmp do
72151: LD_ADDR_VAR 0 3
72155: PUSH
72156: LD_VAR 0 4
72160: PUSH
72161: FOR_IN
72162: IFFALSE 72239
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
72164: LD_VAR 0 3
72168: PPUSH
72169: CALL_OW 312
72173: NOT
72174: PUSH
72175: LD_VAR 0 3
72179: PPUSH
72180: CALL_OW 256
72184: PUSH
72185: LD_INT 250
72187: GREATEREQUAL
72188: AND
72189: IFFALSE 72202
// Connect ( j ) else
72191: LD_VAR 0 3
72195: PPUSH
72196: CALL 27280 0 1
72200: GO 72237
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
72202: LD_VAR 0 3
72206: PPUSH
72207: CALL_OW 256
72211: PUSH
72212: LD_INT 250
72214: LESS
72215: PUSH
72216: LD_VAR 0 3
72220: PPUSH
72221: CALL_OW 312
72225: AND
72226: IFFALSE 72237
// ComUnlink ( j ) ;
72228: LD_VAR 0 3
72232: PPUSH
72233: CALL_OW 136
72237: GO 72161
72239: POP
72240: POP
// end ;
72241: GO 72099
72243: POP
72244: POP
// end ;
72245: LD_VAR 0 1
72249: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
72250: LD_INT 0
72252: PPUSH
72253: PPUSH
72254: PPUSH
72255: PPUSH
72256: PPUSH
// if not mc_bases then
72257: LD_EXP 47
72261: NOT
72262: IFFALSE 72266
// exit ;
72264: GO 72711
// for i = 1 to mc_bases do
72266: LD_ADDR_VAR 0 2
72270: PUSH
72271: DOUBLE
72272: LD_INT 1
72274: DEC
72275: ST_TO_ADDR
72276: LD_EXP 47
72280: PUSH
72281: FOR_TO
72282: IFFALSE 72709
// begin if not mc_produce [ i ] then
72284: LD_EXP 68
72288: PUSH
72289: LD_VAR 0 2
72293: ARRAY
72294: NOT
72295: IFFALSE 72299
// continue ;
72297: GO 72281
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
72299: LD_ADDR_VAR 0 5
72303: PUSH
72304: LD_EXP 47
72308: PUSH
72309: LD_VAR 0 2
72313: ARRAY
72314: PPUSH
72315: LD_INT 30
72317: PUSH
72318: LD_INT 3
72320: PUSH
72321: EMPTY
72322: LIST
72323: LIST
72324: PPUSH
72325: CALL_OW 72
72329: ST_TO_ADDR
// if not fac then
72330: LD_VAR 0 5
72334: NOT
72335: IFFALSE 72339
// continue ;
72337: GO 72281
// for j in fac do
72339: LD_ADDR_VAR 0 3
72343: PUSH
72344: LD_VAR 0 5
72348: PUSH
72349: FOR_IN
72350: IFFALSE 72705
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
72352: LD_VAR 0 3
72356: PPUSH
72357: CALL_OW 461
72361: PUSH
72362: LD_INT 2
72364: NONEQUAL
72365: PUSH
72366: LD_VAR 0 3
72370: PPUSH
72371: LD_INT 15
72373: PPUSH
72374: CALL 26908 0 2
72378: PUSH
72379: LD_INT 4
72381: ARRAY
72382: OR
72383: IFFALSE 72387
// continue ;
72385: GO 72349
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
72387: LD_VAR 0 3
72391: PPUSH
72392: LD_EXP 68
72396: PUSH
72397: LD_VAR 0 2
72401: ARRAY
72402: PUSH
72403: LD_INT 1
72405: ARRAY
72406: PUSH
72407: LD_INT 1
72409: ARRAY
72410: PPUSH
72411: LD_EXP 68
72415: PUSH
72416: LD_VAR 0 2
72420: ARRAY
72421: PUSH
72422: LD_INT 1
72424: ARRAY
72425: PUSH
72426: LD_INT 2
72428: ARRAY
72429: PPUSH
72430: LD_EXP 68
72434: PUSH
72435: LD_VAR 0 2
72439: ARRAY
72440: PUSH
72441: LD_INT 1
72443: ARRAY
72444: PUSH
72445: LD_INT 3
72447: ARRAY
72448: PPUSH
72449: LD_EXP 68
72453: PUSH
72454: LD_VAR 0 2
72458: ARRAY
72459: PUSH
72460: LD_INT 1
72462: ARRAY
72463: PUSH
72464: LD_INT 4
72466: ARRAY
72467: PPUSH
72468: CALL_OW 448
72472: PUSH
72473: LD_VAR 0 3
72477: PPUSH
72478: LD_EXP 68
72482: PUSH
72483: LD_VAR 0 2
72487: ARRAY
72488: PUSH
72489: LD_INT 1
72491: ARRAY
72492: PUSH
72493: LD_INT 1
72495: ARRAY
72496: PUSH
72497: LD_EXP 68
72501: PUSH
72502: LD_VAR 0 2
72506: ARRAY
72507: PUSH
72508: LD_INT 1
72510: ARRAY
72511: PUSH
72512: LD_INT 2
72514: ARRAY
72515: PUSH
72516: LD_EXP 68
72520: PUSH
72521: LD_VAR 0 2
72525: ARRAY
72526: PUSH
72527: LD_INT 1
72529: ARRAY
72530: PUSH
72531: LD_INT 3
72533: ARRAY
72534: PUSH
72535: LD_EXP 68
72539: PUSH
72540: LD_VAR 0 2
72544: ARRAY
72545: PUSH
72546: LD_INT 1
72548: ARRAY
72549: PUSH
72550: LD_INT 4
72552: ARRAY
72553: PUSH
72554: EMPTY
72555: LIST
72556: LIST
72557: LIST
72558: LIST
72559: PPUSH
72560: CALL 30706 0 2
72564: AND
72565: IFFALSE 72703
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
72567: LD_VAR 0 3
72571: PPUSH
72572: LD_EXP 68
72576: PUSH
72577: LD_VAR 0 2
72581: ARRAY
72582: PUSH
72583: LD_INT 1
72585: ARRAY
72586: PUSH
72587: LD_INT 1
72589: ARRAY
72590: PPUSH
72591: LD_EXP 68
72595: PUSH
72596: LD_VAR 0 2
72600: ARRAY
72601: PUSH
72602: LD_INT 1
72604: ARRAY
72605: PUSH
72606: LD_INT 2
72608: ARRAY
72609: PPUSH
72610: LD_EXP 68
72614: PUSH
72615: LD_VAR 0 2
72619: ARRAY
72620: PUSH
72621: LD_INT 1
72623: ARRAY
72624: PUSH
72625: LD_INT 3
72627: ARRAY
72628: PPUSH
72629: LD_EXP 68
72633: PUSH
72634: LD_VAR 0 2
72638: ARRAY
72639: PUSH
72640: LD_INT 1
72642: ARRAY
72643: PUSH
72644: LD_INT 4
72646: ARRAY
72647: PPUSH
72648: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
72652: LD_ADDR_VAR 0 4
72656: PUSH
72657: LD_EXP 68
72661: PUSH
72662: LD_VAR 0 2
72666: ARRAY
72667: PPUSH
72668: LD_INT 1
72670: PPUSH
72671: CALL_OW 3
72675: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
72676: LD_ADDR_EXP 68
72680: PUSH
72681: LD_EXP 68
72685: PPUSH
72686: LD_VAR 0 2
72690: PPUSH
72691: LD_VAR 0 4
72695: PPUSH
72696: CALL_OW 1
72700: ST_TO_ADDR
// break ;
72701: GO 72705
// end ; end ;
72703: GO 72349
72705: POP
72706: POP
// end ;
72707: GO 72281
72709: POP
72710: POP
// end ;
72711: LD_VAR 0 1
72715: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
72716: LD_INT 0
72718: PPUSH
72719: PPUSH
72720: PPUSH
// if not mc_bases then
72721: LD_EXP 47
72725: NOT
72726: IFFALSE 72730
// exit ;
72728: GO 72819
// for i = 1 to mc_bases do
72730: LD_ADDR_VAR 0 2
72734: PUSH
72735: DOUBLE
72736: LD_INT 1
72738: DEC
72739: ST_TO_ADDR
72740: LD_EXP 47
72744: PUSH
72745: FOR_TO
72746: IFFALSE 72817
// begin if mc_attack [ i ] then
72748: LD_EXP 67
72752: PUSH
72753: LD_VAR 0 2
72757: ARRAY
72758: IFFALSE 72815
// begin tmp := mc_attack [ i ] [ 1 ] ;
72760: LD_ADDR_VAR 0 3
72764: PUSH
72765: LD_EXP 67
72769: PUSH
72770: LD_VAR 0 2
72774: ARRAY
72775: PUSH
72776: LD_INT 1
72778: ARRAY
72779: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
72780: LD_ADDR_EXP 67
72784: PUSH
72785: LD_EXP 67
72789: PPUSH
72790: LD_VAR 0 2
72794: PPUSH
72795: EMPTY
72796: PPUSH
72797: CALL_OW 1
72801: ST_TO_ADDR
// Attack ( tmp ) ;
72802: LD_VAR 0 3
72806: PPUSH
72807: CALL 104462 0 1
// exit ;
72811: POP
72812: POP
72813: GO 72819
// end ; end ;
72815: GO 72745
72817: POP
72818: POP
// end ;
72819: LD_VAR 0 1
72823: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
72824: LD_INT 0
72826: PPUSH
72827: PPUSH
72828: PPUSH
72829: PPUSH
72830: PPUSH
72831: PPUSH
72832: PPUSH
// if not mc_bases then
72833: LD_EXP 47
72837: NOT
72838: IFFALSE 72842
// exit ;
72840: GO 73446
// for i = 1 to mc_bases do
72842: LD_ADDR_VAR 0 2
72846: PUSH
72847: DOUBLE
72848: LD_INT 1
72850: DEC
72851: ST_TO_ADDR
72852: LD_EXP 47
72856: PUSH
72857: FOR_TO
72858: IFFALSE 73444
// begin if not mc_bases [ i ] then
72860: LD_EXP 47
72864: PUSH
72865: LD_VAR 0 2
72869: ARRAY
72870: NOT
72871: IFFALSE 72875
// continue ;
72873: GO 72857
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
72875: LD_ADDR_VAR 0 7
72879: PUSH
72880: LD_EXP 47
72884: PUSH
72885: LD_VAR 0 2
72889: ARRAY
72890: PUSH
72891: LD_INT 1
72893: ARRAY
72894: PPUSH
72895: CALL 21151 0 1
72899: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
72900: LD_ADDR_EXP 70
72904: PUSH
72905: LD_EXP 70
72909: PPUSH
72910: LD_VAR 0 2
72914: PPUSH
72915: LD_EXP 47
72919: PUSH
72920: LD_VAR 0 2
72924: ARRAY
72925: PUSH
72926: LD_INT 1
72928: ARRAY
72929: PPUSH
72930: CALL_OW 255
72934: PPUSH
72935: LD_EXP 72
72939: PUSH
72940: LD_VAR 0 2
72944: ARRAY
72945: PPUSH
72946: CALL 21116 0 2
72950: PPUSH
72951: CALL_OW 1
72955: ST_TO_ADDR
// if not mc_scan [ i ] then
72956: LD_EXP 70
72960: PUSH
72961: LD_VAR 0 2
72965: ARRAY
72966: NOT
72967: IFFALSE 73122
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
72969: LD_ADDR_VAR 0 4
72973: PUSH
72974: LD_EXP 47
72978: PUSH
72979: LD_VAR 0 2
72983: ARRAY
72984: PPUSH
72985: LD_INT 2
72987: PUSH
72988: LD_INT 25
72990: PUSH
72991: LD_INT 5
72993: PUSH
72994: EMPTY
72995: LIST
72996: LIST
72997: PUSH
72998: LD_INT 25
73000: PUSH
73001: LD_INT 8
73003: PUSH
73004: EMPTY
73005: LIST
73006: LIST
73007: PUSH
73008: LD_INT 25
73010: PUSH
73011: LD_INT 9
73013: PUSH
73014: EMPTY
73015: LIST
73016: LIST
73017: PUSH
73018: EMPTY
73019: LIST
73020: LIST
73021: LIST
73022: LIST
73023: PPUSH
73024: CALL_OW 72
73028: ST_TO_ADDR
// if not tmp then
73029: LD_VAR 0 4
73033: NOT
73034: IFFALSE 73038
// continue ;
73036: GO 72857
// for j in tmp do
73038: LD_ADDR_VAR 0 3
73042: PUSH
73043: LD_VAR 0 4
73047: PUSH
73048: FOR_IN
73049: IFFALSE 73120
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
73051: LD_VAR 0 3
73055: PPUSH
73056: CALL_OW 310
73060: PPUSH
73061: CALL_OW 266
73065: PUSH
73066: LD_INT 5
73068: EQUAL
73069: PUSH
73070: LD_VAR 0 3
73074: PPUSH
73075: CALL_OW 257
73079: PUSH
73080: LD_INT 1
73082: EQUAL
73083: AND
73084: PUSH
73085: LD_VAR 0 3
73089: PPUSH
73090: CALL_OW 459
73094: NOT
73095: AND
73096: PUSH
73097: LD_VAR 0 7
73101: AND
73102: IFFALSE 73118
// ComChangeProfession ( j , class ) ;
73104: LD_VAR 0 3
73108: PPUSH
73109: LD_VAR 0 7
73113: PPUSH
73114: CALL_OW 123
73118: GO 73048
73120: POP
73121: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
73122: LD_EXP 70
73126: PUSH
73127: LD_VAR 0 2
73131: ARRAY
73132: PUSH
73133: LD_EXP 69
73137: PUSH
73138: LD_VAR 0 2
73142: ARRAY
73143: NOT
73144: AND
73145: PUSH
73146: LD_EXP 47
73150: PUSH
73151: LD_VAR 0 2
73155: ARRAY
73156: PPUSH
73157: LD_INT 30
73159: PUSH
73160: LD_INT 32
73162: PUSH
73163: EMPTY
73164: LIST
73165: LIST
73166: PPUSH
73167: CALL_OW 72
73171: NOT
73172: AND
73173: PUSH
73174: LD_EXP 47
73178: PUSH
73179: LD_VAR 0 2
73183: ARRAY
73184: PPUSH
73185: LD_INT 2
73187: PUSH
73188: LD_INT 30
73190: PUSH
73191: LD_INT 4
73193: PUSH
73194: EMPTY
73195: LIST
73196: LIST
73197: PUSH
73198: LD_INT 30
73200: PUSH
73201: LD_INT 5
73203: PUSH
73204: EMPTY
73205: LIST
73206: LIST
73207: PUSH
73208: EMPTY
73209: LIST
73210: LIST
73211: LIST
73212: PPUSH
73213: CALL_OW 72
73217: NOT
73218: AND
73219: IFFALSE 73351
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
73221: LD_ADDR_VAR 0 4
73225: PUSH
73226: LD_EXP 47
73230: PUSH
73231: LD_VAR 0 2
73235: ARRAY
73236: PPUSH
73237: LD_INT 2
73239: PUSH
73240: LD_INT 25
73242: PUSH
73243: LD_INT 1
73245: PUSH
73246: EMPTY
73247: LIST
73248: LIST
73249: PUSH
73250: LD_INT 25
73252: PUSH
73253: LD_INT 5
73255: PUSH
73256: EMPTY
73257: LIST
73258: LIST
73259: PUSH
73260: LD_INT 25
73262: PUSH
73263: LD_INT 8
73265: PUSH
73266: EMPTY
73267: LIST
73268: LIST
73269: PUSH
73270: LD_INT 25
73272: PUSH
73273: LD_INT 9
73275: PUSH
73276: EMPTY
73277: LIST
73278: LIST
73279: PUSH
73280: EMPTY
73281: LIST
73282: LIST
73283: LIST
73284: LIST
73285: LIST
73286: PPUSH
73287: CALL_OW 72
73291: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
73292: LD_ADDR_VAR 0 4
73296: PUSH
73297: LD_VAR 0 4
73301: PUSH
73302: LD_VAR 0 4
73306: PPUSH
73307: LD_INT 18
73309: PPUSH
73310: CALL 53209 0 2
73314: DIFF
73315: ST_TO_ADDR
// if tmp then
73316: LD_VAR 0 4
73320: IFFALSE 73351
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
73322: LD_VAR 0 2
73326: PPUSH
73327: LD_VAR 0 4
73331: PPUSH
73332: LD_EXP 72
73336: PUSH
73337: LD_VAR 0 2
73341: ARRAY
73342: PPUSH
73343: CALL 109171 0 3
// exit ;
73347: POP
73348: POP
73349: GO 73446
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
73351: LD_EXP 70
73355: PUSH
73356: LD_VAR 0 2
73360: ARRAY
73361: PUSH
73362: LD_EXP 69
73366: PUSH
73367: LD_VAR 0 2
73371: ARRAY
73372: AND
73373: IFFALSE 73442
// begin tmp := mc_defender [ i ] ;
73375: LD_ADDR_VAR 0 4
73379: PUSH
73380: LD_EXP 69
73384: PUSH
73385: LD_VAR 0 2
73389: ARRAY
73390: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
73391: LD_ADDR_EXP 69
73395: PUSH
73396: LD_EXP 69
73400: PPUSH
73401: LD_VAR 0 2
73405: PPUSH
73406: EMPTY
73407: PPUSH
73408: CALL_OW 1
73412: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
73413: LD_VAR 0 2
73417: PPUSH
73418: LD_VAR 0 4
73422: PPUSH
73423: LD_EXP 70
73427: PUSH
73428: LD_VAR 0 2
73432: ARRAY
73433: PPUSH
73434: CALL 109732 0 3
// exit ;
73438: POP
73439: POP
73440: GO 73446
// end ; end ;
73442: GO 72857
73444: POP
73445: POP
// end ;
73446: LD_VAR 0 1
73450: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
73451: LD_INT 0
73453: PPUSH
73454: PPUSH
73455: PPUSH
73456: PPUSH
73457: PPUSH
73458: PPUSH
73459: PPUSH
73460: PPUSH
73461: PPUSH
73462: PPUSH
73463: PPUSH
// if not mc_bases then
73464: LD_EXP 47
73468: NOT
73469: IFFALSE 73473
// exit ;
73471: GO 74560
// for i = 1 to mc_bases do
73473: LD_ADDR_VAR 0 2
73477: PUSH
73478: DOUBLE
73479: LD_INT 1
73481: DEC
73482: ST_TO_ADDR
73483: LD_EXP 47
73487: PUSH
73488: FOR_TO
73489: IFFALSE 74558
// begin tmp := mc_lab [ i ] ;
73491: LD_ADDR_VAR 0 6
73495: PUSH
73496: LD_EXP 80
73500: PUSH
73501: LD_VAR 0 2
73505: ARRAY
73506: ST_TO_ADDR
// if not tmp then
73507: LD_VAR 0 6
73511: NOT
73512: IFFALSE 73516
// continue ;
73514: GO 73488
// idle_lab := 0 ;
73516: LD_ADDR_VAR 0 11
73520: PUSH
73521: LD_INT 0
73523: ST_TO_ADDR
// for j in tmp do
73524: LD_ADDR_VAR 0 3
73528: PUSH
73529: LD_VAR 0 6
73533: PUSH
73534: FOR_IN
73535: IFFALSE 74554
// begin researching := false ;
73537: LD_ADDR_VAR 0 10
73541: PUSH
73542: LD_INT 0
73544: ST_TO_ADDR
// side := GetSide ( j ) ;
73545: LD_ADDR_VAR 0 4
73549: PUSH
73550: LD_VAR 0 3
73554: PPUSH
73555: CALL_OW 255
73559: ST_TO_ADDR
// if not mc_tech [ side ] then
73560: LD_EXP 74
73564: PUSH
73565: LD_VAR 0 4
73569: ARRAY
73570: NOT
73571: IFFALSE 73575
// continue ;
73573: GO 73534
// if BuildingStatus ( j ) = bs_idle then
73575: LD_VAR 0 3
73579: PPUSH
73580: CALL_OW 461
73584: PUSH
73585: LD_INT 2
73587: EQUAL
73588: IFFALSE 73776
// begin if idle_lab and UnitsInside ( j ) < 6 then
73590: LD_VAR 0 11
73594: PUSH
73595: LD_VAR 0 3
73599: PPUSH
73600: CALL_OW 313
73604: PUSH
73605: LD_INT 6
73607: LESS
73608: AND
73609: IFFALSE 73680
// begin tmp2 := UnitsInside ( idle_lab ) ;
73611: LD_ADDR_VAR 0 9
73615: PUSH
73616: LD_VAR 0 11
73620: PPUSH
73621: CALL_OW 313
73625: ST_TO_ADDR
// if tmp2 then
73626: LD_VAR 0 9
73630: IFFALSE 73672
// for x in tmp2 do
73632: LD_ADDR_VAR 0 7
73636: PUSH
73637: LD_VAR 0 9
73641: PUSH
73642: FOR_IN
73643: IFFALSE 73670
// begin ComExitBuilding ( x ) ;
73645: LD_VAR 0 7
73649: PPUSH
73650: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
73654: LD_VAR 0 7
73658: PPUSH
73659: LD_VAR 0 3
73663: PPUSH
73664: CALL_OW 180
// end ;
73668: GO 73642
73670: POP
73671: POP
// idle_lab := 0 ;
73672: LD_ADDR_VAR 0 11
73676: PUSH
73677: LD_INT 0
73679: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
73680: LD_ADDR_VAR 0 5
73684: PUSH
73685: LD_EXP 74
73689: PUSH
73690: LD_VAR 0 4
73694: ARRAY
73695: PUSH
73696: FOR_IN
73697: IFFALSE 73757
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
73699: LD_VAR 0 3
73703: PPUSH
73704: LD_VAR 0 5
73708: PPUSH
73709: CALL_OW 430
73713: PUSH
73714: LD_VAR 0 4
73718: PPUSH
73719: LD_VAR 0 5
73723: PPUSH
73724: CALL 20221 0 2
73728: AND
73729: IFFALSE 73755
// begin researching := true ;
73731: LD_ADDR_VAR 0 10
73735: PUSH
73736: LD_INT 1
73738: ST_TO_ADDR
// ComResearch ( j , t ) ;
73739: LD_VAR 0 3
73743: PPUSH
73744: LD_VAR 0 5
73748: PPUSH
73749: CALL_OW 124
// break ;
73753: GO 73757
// end ;
73755: GO 73696
73757: POP
73758: POP
// if not researching then
73759: LD_VAR 0 10
73763: NOT
73764: IFFALSE 73776
// idle_lab := j ;
73766: LD_ADDR_VAR 0 11
73770: PUSH
73771: LD_VAR 0 3
73775: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
73776: LD_VAR 0 3
73780: PPUSH
73781: CALL_OW 461
73785: PUSH
73786: LD_INT 10
73788: EQUAL
73789: IFFALSE 74377
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
73791: LD_EXP 76
73795: PUSH
73796: LD_VAR 0 2
73800: ARRAY
73801: NOT
73802: PUSH
73803: LD_EXP 77
73807: PUSH
73808: LD_VAR 0 2
73812: ARRAY
73813: NOT
73814: AND
73815: PUSH
73816: LD_EXP 74
73820: PUSH
73821: LD_VAR 0 4
73825: ARRAY
73826: PUSH
73827: LD_INT 1
73829: GREATER
73830: AND
73831: IFFALSE 73962
// begin ComCancel ( j ) ;
73833: LD_VAR 0 3
73837: PPUSH
73838: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
73842: LD_ADDR_EXP 74
73846: PUSH
73847: LD_EXP 74
73851: PPUSH
73852: LD_VAR 0 4
73856: PPUSH
73857: LD_EXP 74
73861: PUSH
73862: LD_VAR 0 4
73866: ARRAY
73867: PPUSH
73868: LD_EXP 74
73872: PUSH
73873: LD_VAR 0 4
73877: ARRAY
73878: PUSH
73879: LD_INT 1
73881: MINUS
73882: PPUSH
73883: LD_EXP 74
73887: PUSH
73888: LD_VAR 0 4
73892: ARRAY
73893: PPUSH
73894: LD_INT 0
73896: PPUSH
73897: CALL 23733 0 4
73901: PPUSH
73902: CALL_OW 1
73906: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
73907: LD_ADDR_EXP 74
73911: PUSH
73912: LD_EXP 74
73916: PPUSH
73917: LD_VAR 0 4
73921: PPUSH
73922: LD_EXP 74
73926: PUSH
73927: LD_VAR 0 4
73931: ARRAY
73932: PPUSH
73933: LD_EXP 74
73937: PUSH
73938: LD_VAR 0 4
73942: ARRAY
73943: PPUSH
73944: LD_INT 1
73946: PPUSH
73947: LD_INT 0
73949: PPUSH
73950: CALL 23733 0 4
73954: PPUSH
73955: CALL_OW 1
73959: ST_TO_ADDR
// continue ;
73960: GO 73534
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
73962: LD_EXP 76
73966: PUSH
73967: LD_VAR 0 2
73971: ARRAY
73972: PUSH
73973: LD_EXP 77
73977: PUSH
73978: LD_VAR 0 2
73982: ARRAY
73983: NOT
73984: AND
73985: IFFALSE 74112
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
73987: LD_ADDR_EXP 77
73991: PUSH
73992: LD_EXP 77
73996: PPUSH
73997: LD_VAR 0 2
74001: PUSH
74002: LD_EXP 77
74006: PUSH
74007: LD_VAR 0 2
74011: ARRAY
74012: PUSH
74013: LD_INT 1
74015: PLUS
74016: PUSH
74017: EMPTY
74018: LIST
74019: LIST
74020: PPUSH
74021: LD_EXP 76
74025: PUSH
74026: LD_VAR 0 2
74030: ARRAY
74031: PUSH
74032: LD_INT 1
74034: ARRAY
74035: PPUSH
74036: CALL 24315 0 3
74040: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
74041: LD_EXP 76
74045: PUSH
74046: LD_VAR 0 2
74050: ARRAY
74051: PUSH
74052: LD_INT 1
74054: ARRAY
74055: PPUSH
74056: LD_INT 112
74058: PPUSH
74059: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
74063: LD_ADDR_VAR 0 9
74067: PUSH
74068: LD_EXP 76
74072: PUSH
74073: LD_VAR 0 2
74077: ARRAY
74078: PPUSH
74079: LD_INT 1
74081: PPUSH
74082: CALL_OW 3
74086: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
74087: LD_ADDR_EXP 76
74091: PUSH
74092: LD_EXP 76
74096: PPUSH
74097: LD_VAR 0 2
74101: PPUSH
74102: LD_VAR 0 9
74106: PPUSH
74107: CALL_OW 1
74111: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
74112: LD_EXP 76
74116: PUSH
74117: LD_VAR 0 2
74121: ARRAY
74122: PUSH
74123: LD_EXP 77
74127: PUSH
74128: LD_VAR 0 2
74132: ARRAY
74133: AND
74134: PUSH
74135: LD_EXP 77
74139: PUSH
74140: LD_VAR 0 2
74144: ARRAY
74145: PUSH
74146: LD_INT 1
74148: ARRAY
74149: PPUSH
74150: CALL_OW 310
74154: NOT
74155: AND
74156: PUSH
74157: LD_VAR 0 3
74161: PPUSH
74162: CALL_OW 313
74166: PUSH
74167: LD_INT 6
74169: EQUAL
74170: AND
74171: IFFALSE 74227
// begin tmp2 := UnitsInside ( j ) ;
74173: LD_ADDR_VAR 0 9
74177: PUSH
74178: LD_VAR 0 3
74182: PPUSH
74183: CALL_OW 313
74187: ST_TO_ADDR
// if tmp2 = 6 then
74188: LD_VAR 0 9
74192: PUSH
74193: LD_INT 6
74195: EQUAL
74196: IFFALSE 74227
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
74198: LD_VAR 0 9
74202: PUSH
74203: LD_INT 1
74205: ARRAY
74206: PPUSH
74207: LD_INT 112
74209: PPUSH
74210: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
74214: LD_VAR 0 9
74218: PUSH
74219: LD_INT 1
74221: ARRAY
74222: PPUSH
74223: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
74227: LD_EXP 77
74231: PUSH
74232: LD_VAR 0 2
74236: ARRAY
74237: PUSH
74238: LD_EXP 77
74242: PUSH
74243: LD_VAR 0 2
74247: ARRAY
74248: PUSH
74249: LD_INT 1
74251: ARRAY
74252: PPUSH
74253: CALL_OW 314
74257: NOT
74258: AND
74259: PUSH
74260: LD_EXP 77
74264: PUSH
74265: LD_VAR 0 2
74269: ARRAY
74270: PUSH
74271: LD_INT 1
74273: ARRAY
74274: PPUSH
74275: CALL_OW 310
74279: NOT
74280: AND
74281: IFFALSE 74307
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
74283: LD_EXP 77
74287: PUSH
74288: LD_VAR 0 2
74292: ARRAY
74293: PUSH
74294: LD_INT 1
74296: ARRAY
74297: PPUSH
74298: LD_VAR 0 3
74302: PPUSH
74303: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
74307: LD_EXP 77
74311: PUSH
74312: LD_VAR 0 2
74316: ARRAY
74317: PUSH
74318: LD_INT 1
74320: ARRAY
74321: PPUSH
74322: CALL_OW 310
74326: PUSH
74327: LD_EXP 77
74331: PUSH
74332: LD_VAR 0 2
74336: ARRAY
74337: PUSH
74338: LD_INT 1
74340: ARRAY
74341: PPUSH
74342: CALL_OW 310
74346: PPUSH
74347: CALL_OW 461
74351: PUSH
74352: LD_INT 3
74354: NONEQUAL
74355: AND
74356: IFFALSE 74377
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
74358: LD_EXP 77
74362: PUSH
74363: LD_VAR 0 2
74367: ARRAY
74368: PUSH
74369: LD_INT 1
74371: ARRAY
74372: PPUSH
74373: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
74377: LD_VAR 0 3
74381: PPUSH
74382: CALL_OW 461
74386: PUSH
74387: LD_INT 6
74389: EQUAL
74390: PUSH
74391: LD_VAR 0 6
74395: PUSH
74396: LD_INT 1
74398: GREATER
74399: AND
74400: IFFALSE 74552
// begin sci := [ ] ;
74402: LD_ADDR_VAR 0 8
74406: PUSH
74407: EMPTY
74408: ST_TO_ADDR
// for x in ( tmp diff j ) do
74409: LD_ADDR_VAR 0 7
74413: PUSH
74414: LD_VAR 0 6
74418: PUSH
74419: LD_VAR 0 3
74423: DIFF
74424: PUSH
74425: FOR_IN
74426: IFFALSE 74478
// begin if sci = 6 then
74428: LD_VAR 0 8
74432: PUSH
74433: LD_INT 6
74435: EQUAL
74436: IFFALSE 74440
// break ;
74438: GO 74478
// if BuildingStatus ( x ) = bs_idle then
74440: LD_VAR 0 7
74444: PPUSH
74445: CALL_OW 461
74449: PUSH
74450: LD_INT 2
74452: EQUAL
74453: IFFALSE 74476
// sci := sci ^ UnitsInside ( x ) ;
74455: LD_ADDR_VAR 0 8
74459: PUSH
74460: LD_VAR 0 8
74464: PUSH
74465: LD_VAR 0 7
74469: PPUSH
74470: CALL_OW 313
74474: ADD
74475: ST_TO_ADDR
// end ;
74476: GO 74425
74478: POP
74479: POP
// if not sci then
74480: LD_VAR 0 8
74484: NOT
74485: IFFALSE 74489
// continue ;
74487: GO 73534
// for x in sci do
74489: LD_ADDR_VAR 0 7
74493: PUSH
74494: LD_VAR 0 8
74498: PUSH
74499: FOR_IN
74500: IFFALSE 74550
// if IsInUnit ( x ) and not HasTask ( x ) then
74502: LD_VAR 0 7
74506: PPUSH
74507: CALL_OW 310
74511: PUSH
74512: LD_VAR 0 7
74516: PPUSH
74517: CALL_OW 314
74521: NOT
74522: AND
74523: IFFALSE 74548
// begin ComExitBuilding ( x ) ;
74525: LD_VAR 0 7
74529: PPUSH
74530: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
74534: LD_VAR 0 7
74538: PPUSH
74539: LD_VAR 0 3
74543: PPUSH
74544: CALL_OW 180
// end ;
74548: GO 74499
74550: POP
74551: POP
// end ; end ;
74552: GO 73534
74554: POP
74555: POP
// end ;
74556: GO 73488
74558: POP
74559: POP
// end ;
74560: LD_VAR 0 1
74564: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
74565: LD_INT 0
74567: PPUSH
74568: PPUSH
// if not mc_bases then
74569: LD_EXP 47
74573: NOT
74574: IFFALSE 74578
// exit ;
74576: GO 74659
// for i = 1 to mc_bases do
74578: LD_ADDR_VAR 0 2
74582: PUSH
74583: DOUBLE
74584: LD_INT 1
74586: DEC
74587: ST_TO_ADDR
74588: LD_EXP 47
74592: PUSH
74593: FOR_TO
74594: IFFALSE 74657
// if mc_mines [ i ] and mc_miners [ i ] then
74596: LD_EXP 60
74600: PUSH
74601: LD_VAR 0 2
74605: ARRAY
74606: PUSH
74607: LD_EXP 61
74611: PUSH
74612: LD_VAR 0 2
74616: ARRAY
74617: AND
74618: IFFALSE 74655
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
74620: LD_EXP 61
74624: PUSH
74625: LD_VAR 0 2
74629: ARRAY
74630: PUSH
74631: LD_INT 1
74633: ARRAY
74634: PPUSH
74635: CALL_OW 255
74639: PPUSH
74640: LD_EXP 60
74644: PUSH
74645: LD_VAR 0 2
74649: ARRAY
74650: PPUSH
74651: CALL 21304 0 2
74655: GO 74593
74657: POP
74658: POP
// end ;
74659: LD_VAR 0 1
74663: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
74664: LD_INT 0
74666: PPUSH
74667: PPUSH
74668: PPUSH
74669: PPUSH
74670: PPUSH
74671: PPUSH
74672: PPUSH
74673: PPUSH
// if not mc_bases or not mc_parking then
74674: LD_EXP 47
74678: NOT
74679: PUSH
74680: LD_EXP 71
74684: NOT
74685: OR
74686: IFFALSE 74690
// exit ;
74688: GO 75389
// for i = 1 to mc_bases do
74690: LD_ADDR_VAR 0 2
74694: PUSH
74695: DOUBLE
74696: LD_INT 1
74698: DEC
74699: ST_TO_ADDR
74700: LD_EXP 47
74704: PUSH
74705: FOR_TO
74706: IFFALSE 75387
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
74708: LD_EXP 47
74712: PUSH
74713: LD_VAR 0 2
74717: ARRAY
74718: NOT
74719: PUSH
74720: LD_EXP 71
74724: PUSH
74725: LD_VAR 0 2
74729: ARRAY
74730: NOT
74731: OR
74732: IFFALSE 74736
// continue ;
74734: GO 74705
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
74736: LD_ADDR_VAR 0 5
74740: PUSH
74741: LD_EXP 47
74745: PUSH
74746: LD_VAR 0 2
74750: ARRAY
74751: PUSH
74752: LD_INT 1
74754: ARRAY
74755: PPUSH
74756: CALL_OW 255
74760: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
74761: LD_ADDR_VAR 0 6
74765: PUSH
74766: LD_EXP 47
74770: PUSH
74771: LD_VAR 0 2
74775: ARRAY
74776: PPUSH
74777: LD_INT 30
74779: PUSH
74780: LD_INT 3
74782: PUSH
74783: EMPTY
74784: LIST
74785: LIST
74786: PPUSH
74787: CALL_OW 72
74791: ST_TO_ADDR
// if not fac then
74792: LD_VAR 0 6
74796: NOT
74797: IFFALSE 74848
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
74799: LD_ADDR_VAR 0 6
74803: PUSH
74804: LD_EXP 47
74808: PUSH
74809: LD_VAR 0 2
74813: ARRAY
74814: PPUSH
74815: LD_INT 2
74817: PUSH
74818: LD_INT 30
74820: PUSH
74821: LD_INT 0
74823: PUSH
74824: EMPTY
74825: LIST
74826: LIST
74827: PUSH
74828: LD_INT 30
74830: PUSH
74831: LD_INT 1
74833: PUSH
74834: EMPTY
74835: LIST
74836: LIST
74837: PUSH
74838: EMPTY
74839: LIST
74840: LIST
74841: LIST
74842: PPUSH
74843: CALL_OW 72
74847: ST_TO_ADDR
// if not fac then
74848: LD_VAR 0 6
74852: NOT
74853: IFFALSE 74857
// continue ;
74855: GO 74705
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
74857: LD_ADDR_VAR 0 7
74861: PUSH
74862: LD_EXP 71
74866: PUSH
74867: LD_VAR 0 2
74871: ARRAY
74872: PPUSH
74873: LD_INT 22
74875: PUSH
74876: LD_VAR 0 5
74880: PUSH
74881: EMPTY
74882: LIST
74883: LIST
74884: PUSH
74885: LD_INT 21
74887: PUSH
74888: LD_INT 2
74890: PUSH
74891: EMPTY
74892: LIST
74893: LIST
74894: PUSH
74895: LD_INT 3
74897: PUSH
74898: LD_INT 24
74900: PUSH
74901: LD_INT 1000
74903: PUSH
74904: EMPTY
74905: LIST
74906: LIST
74907: PUSH
74908: EMPTY
74909: LIST
74910: LIST
74911: PUSH
74912: EMPTY
74913: LIST
74914: LIST
74915: LIST
74916: PPUSH
74917: CALL_OW 70
74921: ST_TO_ADDR
// for j in fac do
74922: LD_ADDR_VAR 0 3
74926: PUSH
74927: LD_VAR 0 6
74931: PUSH
74932: FOR_IN
74933: IFFALSE 75014
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
74935: LD_ADDR_VAR 0 7
74939: PUSH
74940: LD_VAR 0 7
74944: PUSH
74945: LD_INT 22
74947: PUSH
74948: LD_VAR 0 5
74952: PUSH
74953: EMPTY
74954: LIST
74955: LIST
74956: PUSH
74957: LD_INT 91
74959: PUSH
74960: LD_VAR 0 3
74964: PUSH
74965: LD_INT 15
74967: PUSH
74968: EMPTY
74969: LIST
74970: LIST
74971: LIST
74972: PUSH
74973: LD_INT 21
74975: PUSH
74976: LD_INT 2
74978: PUSH
74979: EMPTY
74980: LIST
74981: LIST
74982: PUSH
74983: LD_INT 3
74985: PUSH
74986: LD_INT 24
74988: PUSH
74989: LD_INT 1000
74991: PUSH
74992: EMPTY
74993: LIST
74994: LIST
74995: PUSH
74996: EMPTY
74997: LIST
74998: LIST
74999: PUSH
75000: EMPTY
75001: LIST
75002: LIST
75003: LIST
75004: LIST
75005: PPUSH
75006: CALL_OW 69
75010: UNION
75011: ST_TO_ADDR
75012: GO 74932
75014: POP
75015: POP
// if not vehs then
75016: LD_VAR 0 7
75020: NOT
75021: IFFALSE 75047
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
75023: LD_ADDR_EXP 59
75027: PUSH
75028: LD_EXP 59
75032: PPUSH
75033: LD_VAR 0 2
75037: PPUSH
75038: EMPTY
75039: PPUSH
75040: CALL_OW 1
75044: ST_TO_ADDR
// continue ;
75045: GO 74705
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
75047: LD_ADDR_VAR 0 8
75051: PUSH
75052: LD_EXP 47
75056: PUSH
75057: LD_VAR 0 2
75061: ARRAY
75062: PPUSH
75063: LD_INT 30
75065: PUSH
75066: LD_INT 3
75068: PUSH
75069: EMPTY
75070: LIST
75071: LIST
75072: PPUSH
75073: CALL_OW 72
75077: ST_TO_ADDR
// if tmp then
75078: LD_VAR 0 8
75082: IFFALSE 75185
// begin for j in tmp do
75084: LD_ADDR_VAR 0 3
75088: PUSH
75089: LD_VAR 0 8
75093: PUSH
75094: FOR_IN
75095: IFFALSE 75183
// for k in UnitsInside ( j ) do
75097: LD_ADDR_VAR 0 4
75101: PUSH
75102: LD_VAR 0 3
75106: PPUSH
75107: CALL_OW 313
75111: PUSH
75112: FOR_IN
75113: IFFALSE 75179
// if k then
75115: LD_VAR 0 4
75119: IFFALSE 75177
// if not k in mc_repair_vehicle [ i ] then
75121: LD_VAR 0 4
75125: PUSH
75126: LD_EXP 59
75130: PUSH
75131: LD_VAR 0 2
75135: ARRAY
75136: IN
75137: NOT
75138: IFFALSE 75177
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
75140: LD_ADDR_EXP 59
75144: PUSH
75145: LD_EXP 59
75149: PPUSH
75150: LD_VAR 0 2
75154: PPUSH
75155: LD_EXP 59
75159: PUSH
75160: LD_VAR 0 2
75164: ARRAY
75165: PUSH
75166: LD_VAR 0 4
75170: UNION
75171: PPUSH
75172: CALL_OW 1
75176: ST_TO_ADDR
75177: GO 75112
75179: POP
75180: POP
75181: GO 75094
75183: POP
75184: POP
// end ; if not mc_repair_vehicle [ i ] then
75185: LD_EXP 59
75189: PUSH
75190: LD_VAR 0 2
75194: ARRAY
75195: NOT
75196: IFFALSE 75200
// continue ;
75198: GO 74705
// for j in mc_repair_vehicle [ i ] do
75200: LD_ADDR_VAR 0 3
75204: PUSH
75205: LD_EXP 59
75209: PUSH
75210: LD_VAR 0 2
75214: ARRAY
75215: PUSH
75216: FOR_IN
75217: IFFALSE 75383
// begin if GetClass ( j ) <> 3 then
75219: LD_VAR 0 3
75223: PPUSH
75224: CALL_OW 257
75228: PUSH
75229: LD_INT 3
75231: NONEQUAL
75232: IFFALSE 75273
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
75234: LD_ADDR_EXP 59
75238: PUSH
75239: LD_EXP 59
75243: PPUSH
75244: LD_VAR 0 2
75248: PPUSH
75249: LD_EXP 59
75253: PUSH
75254: LD_VAR 0 2
75258: ARRAY
75259: PUSH
75260: LD_VAR 0 3
75264: DIFF
75265: PPUSH
75266: CALL_OW 1
75270: ST_TO_ADDR
// continue ;
75271: GO 75216
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
75273: LD_VAR 0 3
75277: PPUSH
75278: CALL_OW 311
75282: NOT
75283: PUSH
75284: LD_VAR 0 3
75288: PUSH
75289: LD_EXP 50
75293: PUSH
75294: LD_VAR 0 2
75298: ARRAY
75299: PUSH
75300: LD_INT 1
75302: ARRAY
75303: IN
75304: NOT
75305: AND
75306: PUSH
75307: LD_VAR 0 3
75311: PUSH
75312: LD_EXP 50
75316: PUSH
75317: LD_VAR 0 2
75321: ARRAY
75322: PUSH
75323: LD_INT 2
75325: ARRAY
75326: IN
75327: NOT
75328: AND
75329: IFFALSE 75381
// begin if IsInUnit ( j ) then
75331: LD_VAR 0 3
75335: PPUSH
75336: CALL_OW 310
75340: IFFALSE 75351
// ComExitBuilding ( j ) ;
75342: LD_VAR 0 3
75346: PPUSH
75347: CALL_OW 122
// if not HasTask ( j ) then
75351: LD_VAR 0 3
75355: PPUSH
75356: CALL_OW 314
75360: NOT
75361: IFFALSE 75381
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
75363: LD_VAR 0 3
75367: PPUSH
75368: LD_VAR 0 7
75372: PUSH
75373: LD_INT 1
75375: ARRAY
75376: PPUSH
75377: CALL_OW 189
// end ; end ;
75381: GO 75216
75383: POP
75384: POP
// end ;
75385: GO 74705
75387: POP
75388: POP
// end ;
75389: LD_VAR 0 1
75393: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
75394: LD_INT 0
75396: PPUSH
75397: PPUSH
75398: PPUSH
75399: PPUSH
75400: PPUSH
75401: PPUSH
75402: PPUSH
75403: PPUSH
75404: PPUSH
75405: PPUSH
75406: PPUSH
// if not mc_bases then
75407: LD_EXP 47
75411: NOT
75412: IFFALSE 75416
// exit ;
75414: GO 76218
// for i = 1 to mc_bases do
75416: LD_ADDR_VAR 0 2
75420: PUSH
75421: DOUBLE
75422: LD_INT 1
75424: DEC
75425: ST_TO_ADDR
75426: LD_EXP 47
75430: PUSH
75431: FOR_TO
75432: IFFALSE 76216
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
75434: LD_EXP 75
75438: PUSH
75439: LD_VAR 0 2
75443: ARRAY
75444: NOT
75445: PUSH
75446: LD_EXP 50
75450: PUSH
75451: LD_VAR 0 2
75455: ARRAY
75456: PUSH
75457: LD_INT 1
75459: ARRAY
75460: OR
75461: PUSH
75462: LD_EXP 50
75466: PUSH
75467: LD_VAR 0 2
75471: ARRAY
75472: PUSH
75473: LD_INT 2
75475: ARRAY
75476: OR
75477: PUSH
75478: LD_EXP 73
75482: PUSH
75483: LD_VAR 0 2
75487: ARRAY
75488: PPUSH
75489: LD_INT 1
75491: PPUSH
75492: CALL_OW 325
75496: NOT
75497: OR
75498: PUSH
75499: LD_EXP 70
75503: PUSH
75504: LD_VAR 0 2
75508: ARRAY
75509: OR
75510: IFFALSE 75514
// continue ;
75512: GO 75431
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
75514: LD_ADDR_VAR 0 8
75518: PUSH
75519: LD_EXP 47
75523: PUSH
75524: LD_VAR 0 2
75528: ARRAY
75529: PPUSH
75530: LD_INT 25
75532: PUSH
75533: LD_INT 4
75535: PUSH
75536: EMPTY
75537: LIST
75538: LIST
75539: PUSH
75540: LD_INT 50
75542: PUSH
75543: EMPTY
75544: LIST
75545: PUSH
75546: LD_INT 3
75548: PUSH
75549: LD_INT 60
75551: PUSH
75552: EMPTY
75553: LIST
75554: PUSH
75555: EMPTY
75556: LIST
75557: LIST
75558: PUSH
75559: EMPTY
75560: LIST
75561: LIST
75562: LIST
75563: PPUSH
75564: CALL_OW 72
75568: PUSH
75569: LD_EXP 51
75573: PUSH
75574: LD_VAR 0 2
75578: ARRAY
75579: DIFF
75580: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
75581: LD_ADDR_VAR 0 9
75585: PUSH
75586: LD_EXP 47
75590: PUSH
75591: LD_VAR 0 2
75595: ARRAY
75596: PPUSH
75597: LD_INT 2
75599: PUSH
75600: LD_INT 30
75602: PUSH
75603: LD_INT 0
75605: PUSH
75606: EMPTY
75607: LIST
75608: LIST
75609: PUSH
75610: LD_INT 30
75612: PUSH
75613: LD_INT 1
75615: PUSH
75616: EMPTY
75617: LIST
75618: LIST
75619: PUSH
75620: EMPTY
75621: LIST
75622: LIST
75623: LIST
75624: PPUSH
75625: CALL_OW 72
75629: ST_TO_ADDR
// if not tmp or not dep then
75630: LD_VAR 0 8
75634: NOT
75635: PUSH
75636: LD_VAR 0 9
75640: NOT
75641: OR
75642: IFFALSE 75646
// continue ;
75644: GO 75431
// side := GetSide ( tmp [ 1 ] ) ;
75646: LD_ADDR_VAR 0 11
75650: PUSH
75651: LD_VAR 0 8
75655: PUSH
75656: LD_INT 1
75658: ARRAY
75659: PPUSH
75660: CALL_OW 255
75664: ST_TO_ADDR
// dep := dep [ 1 ] ;
75665: LD_ADDR_VAR 0 9
75669: PUSH
75670: LD_VAR 0 9
75674: PUSH
75675: LD_INT 1
75677: ARRAY
75678: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
75679: LD_ADDR_VAR 0 7
75683: PUSH
75684: LD_EXP 75
75688: PUSH
75689: LD_VAR 0 2
75693: ARRAY
75694: PPUSH
75695: LD_INT 22
75697: PUSH
75698: LD_INT 0
75700: PUSH
75701: EMPTY
75702: LIST
75703: LIST
75704: PUSH
75705: LD_INT 25
75707: PUSH
75708: LD_INT 12
75710: PUSH
75711: EMPTY
75712: LIST
75713: LIST
75714: PUSH
75715: EMPTY
75716: LIST
75717: LIST
75718: PPUSH
75719: CALL_OW 70
75723: PUSH
75724: LD_INT 22
75726: PUSH
75727: LD_INT 0
75729: PUSH
75730: EMPTY
75731: LIST
75732: LIST
75733: PUSH
75734: LD_INT 25
75736: PUSH
75737: LD_INT 12
75739: PUSH
75740: EMPTY
75741: LIST
75742: LIST
75743: PUSH
75744: LD_INT 91
75746: PUSH
75747: LD_VAR 0 9
75751: PUSH
75752: LD_INT 20
75754: PUSH
75755: EMPTY
75756: LIST
75757: LIST
75758: LIST
75759: PUSH
75760: EMPTY
75761: LIST
75762: LIST
75763: LIST
75764: PPUSH
75765: CALL_OW 69
75769: UNION
75770: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
75771: LD_ADDR_VAR 0 10
75775: PUSH
75776: LD_EXP 75
75780: PUSH
75781: LD_VAR 0 2
75785: ARRAY
75786: PPUSH
75787: LD_INT 81
75789: PUSH
75790: LD_VAR 0 11
75794: PUSH
75795: EMPTY
75796: LIST
75797: LIST
75798: PPUSH
75799: CALL_OW 70
75803: ST_TO_ADDR
// if not apes or danger_at_area then
75804: LD_VAR 0 7
75808: NOT
75809: PUSH
75810: LD_VAR 0 10
75814: OR
75815: IFFALSE 75865
// begin if mc_taming [ i ] then
75817: LD_EXP 78
75821: PUSH
75822: LD_VAR 0 2
75826: ARRAY
75827: IFFALSE 75863
// begin MC_Reset ( i , 121 ) ;
75829: LD_VAR 0 2
75833: PPUSH
75834: LD_INT 121
75836: PPUSH
75837: CALL 61247 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
75841: LD_ADDR_EXP 78
75845: PUSH
75846: LD_EXP 78
75850: PPUSH
75851: LD_VAR 0 2
75855: PPUSH
75856: EMPTY
75857: PPUSH
75858: CALL_OW 1
75862: ST_TO_ADDR
// end ; continue ;
75863: GO 75431
// end ; for j in tmp do
75865: LD_ADDR_VAR 0 3
75869: PUSH
75870: LD_VAR 0 8
75874: PUSH
75875: FOR_IN
75876: IFFALSE 76212
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
75878: LD_VAR 0 3
75882: PUSH
75883: LD_EXP 78
75887: PUSH
75888: LD_VAR 0 2
75892: ARRAY
75893: IN
75894: NOT
75895: PUSH
75896: LD_EXP 78
75900: PUSH
75901: LD_VAR 0 2
75905: ARRAY
75906: PUSH
75907: LD_INT 3
75909: LESS
75910: AND
75911: IFFALSE 75969
// begin SetTag ( j , 121 ) ;
75913: LD_VAR 0 3
75917: PPUSH
75918: LD_INT 121
75920: PPUSH
75921: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
75925: LD_ADDR_EXP 78
75929: PUSH
75930: LD_EXP 78
75934: PPUSH
75935: LD_VAR 0 2
75939: PUSH
75940: LD_EXP 78
75944: PUSH
75945: LD_VAR 0 2
75949: ARRAY
75950: PUSH
75951: LD_INT 1
75953: PLUS
75954: PUSH
75955: EMPTY
75956: LIST
75957: LIST
75958: PPUSH
75959: LD_VAR 0 3
75963: PPUSH
75964: CALL 24315 0 3
75968: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
75969: LD_VAR 0 3
75973: PUSH
75974: LD_EXP 78
75978: PUSH
75979: LD_VAR 0 2
75983: ARRAY
75984: IN
75985: IFFALSE 76210
// begin if GetClass ( j ) <> 4 then
75987: LD_VAR 0 3
75991: PPUSH
75992: CALL_OW 257
75996: PUSH
75997: LD_INT 4
75999: NONEQUAL
76000: IFFALSE 76053
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
76002: LD_ADDR_EXP 78
76006: PUSH
76007: LD_EXP 78
76011: PPUSH
76012: LD_VAR 0 2
76016: PPUSH
76017: LD_EXP 78
76021: PUSH
76022: LD_VAR 0 2
76026: ARRAY
76027: PUSH
76028: LD_VAR 0 3
76032: DIFF
76033: PPUSH
76034: CALL_OW 1
76038: ST_TO_ADDR
// SetTag ( j , 0 ) ;
76039: LD_VAR 0 3
76043: PPUSH
76044: LD_INT 0
76046: PPUSH
76047: CALL_OW 109
// continue ;
76051: GO 75875
// end ; if IsInUnit ( j ) then
76053: LD_VAR 0 3
76057: PPUSH
76058: CALL_OW 310
76062: IFFALSE 76073
// ComExitBuilding ( j ) ;
76064: LD_VAR 0 3
76068: PPUSH
76069: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
76073: LD_ADDR_VAR 0 6
76077: PUSH
76078: LD_VAR 0 7
76082: PPUSH
76083: LD_VAR 0 3
76087: PPUSH
76088: CALL_OW 74
76092: ST_TO_ADDR
// if not ape then
76093: LD_VAR 0 6
76097: NOT
76098: IFFALSE 76102
// break ;
76100: GO 76212
// x := GetX ( ape ) ;
76102: LD_ADDR_VAR 0 4
76106: PUSH
76107: LD_VAR 0 6
76111: PPUSH
76112: CALL_OW 250
76116: ST_TO_ADDR
// y := GetY ( ape ) ;
76117: LD_ADDR_VAR 0 5
76121: PUSH
76122: LD_VAR 0 6
76126: PPUSH
76127: CALL_OW 251
76131: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
76132: LD_VAR 0 4
76136: PPUSH
76137: LD_VAR 0 5
76141: PPUSH
76142: CALL_OW 488
76146: NOT
76147: PUSH
76148: LD_VAR 0 11
76152: PPUSH
76153: LD_VAR 0 4
76157: PPUSH
76158: LD_VAR 0 5
76162: PPUSH
76163: LD_INT 20
76165: PPUSH
76166: CALL 25211 0 4
76170: PUSH
76171: LD_INT 4
76173: ARRAY
76174: OR
76175: IFFALSE 76179
// break ;
76177: GO 76212
// if not HasTask ( j ) then
76179: LD_VAR 0 3
76183: PPUSH
76184: CALL_OW 314
76188: NOT
76189: IFFALSE 76210
// ComTameXY ( j , x , y ) ;
76191: LD_VAR 0 3
76195: PPUSH
76196: LD_VAR 0 4
76200: PPUSH
76201: LD_VAR 0 5
76205: PPUSH
76206: CALL_OW 131
// end ; end ;
76210: GO 75875
76212: POP
76213: POP
// end ;
76214: GO 75431
76216: POP
76217: POP
// end ;
76218: LD_VAR 0 1
76222: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
76223: LD_INT 0
76225: PPUSH
76226: PPUSH
76227: PPUSH
76228: PPUSH
76229: PPUSH
76230: PPUSH
76231: PPUSH
76232: PPUSH
// if not mc_bases then
76233: LD_EXP 47
76237: NOT
76238: IFFALSE 76242
// exit ;
76240: GO 76868
// for i = 1 to mc_bases do
76242: LD_ADDR_VAR 0 2
76246: PUSH
76247: DOUBLE
76248: LD_INT 1
76250: DEC
76251: ST_TO_ADDR
76252: LD_EXP 47
76256: PUSH
76257: FOR_TO
76258: IFFALSE 76866
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
76260: LD_EXP 76
76264: PUSH
76265: LD_VAR 0 2
76269: ARRAY
76270: NOT
76271: PUSH
76272: LD_EXP 76
76276: PUSH
76277: LD_VAR 0 2
76281: ARRAY
76282: PPUSH
76283: LD_INT 25
76285: PUSH
76286: LD_INT 12
76288: PUSH
76289: EMPTY
76290: LIST
76291: LIST
76292: PPUSH
76293: CALL_OW 72
76297: NOT
76298: OR
76299: IFFALSE 76303
// continue ;
76301: GO 76257
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
76303: LD_ADDR_VAR 0 5
76307: PUSH
76308: LD_EXP 76
76312: PUSH
76313: LD_VAR 0 2
76317: ARRAY
76318: PUSH
76319: LD_INT 1
76321: ARRAY
76322: PPUSH
76323: CALL_OW 255
76327: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
76328: LD_VAR 0 5
76332: PPUSH
76333: LD_INT 2
76335: PPUSH
76336: CALL_OW 325
76340: IFFALSE 76593
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
76342: LD_ADDR_VAR 0 4
76346: PUSH
76347: LD_EXP 76
76351: PUSH
76352: LD_VAR 0 2
76356: ARRAY
76357: PPUSH
76358: LD_INT 25
76360: PUSH
76361: LD_INT 16
76363: PUSH
76364: EMPTY
76365: LIST
76366: LIST
76367: PPUSH
76368: CALL_OW 72
76372: ST_TO_ADDR
// if tmp < 6 then
76373: LD_VAR 0 4
76377: PUSH
76378: LD_INT 6
76380: LESS
76381: IFFALSE 76593
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
76383: LD_ADDR_VAR 0 6
76387: PUSH
76388: LD_EXP 47
76392: PUSH
76393: LD_VAR 0 2
76397: ARRAY
76398: PPUSH
76399: LD_INT 2
76401: PUSH
76402: LD_INT 30
76404: PUSH
76405: LD_INT 0
76407: PUSH
76408: EMPTY
76409: LIST
76410: LIST
76411: PUSH
76412: LD_INT 30
76414: PUSH
76415: LD_INT 1
76417: PUSH
76418: EMPTY
76419: LIST
76420: LIST
76421: PUSH
76422: EMPTY
76423: LIST
76424: LIST
76425: LIST
76426: PPUSH
76427: CALL_OW 72
76431: ST_TO_ADDR
// if depot then
76432: LD_VAR 0 6
76436: IFFALSE 76593
// begin selected := 0 ;
76438: LD_ADDR_VAR 0 7
76442: PUSH
76443: LD_INT 0
76445: ST_TO_ADDR
// for j in depot do
76446: LD_ADDR_VAR 0 3
76450: PUSH
76451: LD_VAR 0 6
76455: PUSH
76456: FOR_IN
76457: IFFALSE 76488
// begin if UnitsInside ( j ) < 6 then
76459: LD_VAR 0 3
76463: PPUSH
76464: CALL_OW 313
76468: PUSH
76469: LD_INT 6
76471: LESS
76472: IFFALSE 76486
// begin selected := j ;
76474: LD_ADDR_VAR 0 7
76478: PUSH
76479: LD_VAR 0 3
76483: ST_TO_ADDR
// break ;
76484: GO 76488
// end ; end ;
76486: GO 76456
76488: POP
76489: POP
// if selected then
76490: LD_VAR 0 7
76494: IFFALSE 76593
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
76496: LD_ADDR_VAR 0 3
76500: PUSH
76501: LD_EXP 76
76505: PUSH
76506: LD_VAR 0 2
76510: ARRAY
76511: PPUSH
76512: LD_INT 25
76514: PUSH
76515: LD_INT 12
76517: PUSH
76518: EMPTY
76519: LIST
76520: LIST
76521: PPUSH
76522: CALL_OW 72
76526: PUSH
76527: FOR_IN
76528: IFFALSE 76591
// if not HasTask ( j ) then
76530: LD_VAR 0 3
76534: PPUSH
76535: CALL_OW 314
76539: NOT
76540: IFFALSE 76589
// begin if not IsInUnit ( j ) then
76542: LD_VAR 0 3
76546: PPUSH
76547: CALL_OW 310
76551: NOT
76552: IFFALSE 76568
// ComEnterUnit ( j , selected ) ;
76554: LD_VAR 0 3
76558: PPUSH
76559: LD_VAR 0 7
76563: PPUSH
76564: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
76568: LD_VAR 0 3
76572: PPUSH
76573: LD_INT 16
76575: PPUSH
76576: CALL_OW 183
// AddComExitBuilding ( j ) ;
76580: LD_VAR 0 3
76584: PPUSH
76585: CALL_OW 182
// end ;
76589: GO 76527
76591: POP
76592: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
76593: LD_VAR 0 5
76597: PPUSH
76598: LD_INT 11
76600: PPUSH
76601: CALL_OW 325
76605: IFFALSE 76864
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
76607: LD_ADDR_VAR 0 4
76611: PUSH
76612: LD_EXP 76
76616: PUSH
76617: LD_VAR 0 2
76621: ARRAY
76622: PPUSH
76623: LD_INT 25
76625: PUSH
76626: LD_INT 16
76628: PUSH
76629: EMPTY
76630: LIST
76631: LIST
76632: PPUSH
76633: CALL_OW 72
76637: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
76638: LD_VAR 0 4
76642: PUSH
76643: LD_INT 6
76645: GREATEREQUAL
76646: PUSH
76647: LD_VAR 0 5
76651: PPUSH
76652: LD_INT 2
76654: PPUSH
76655: CALL_OW 325
76659: NOT
76660: OR
76661: IFFALSE 76864
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
76663: LD_ADDR_VAR 0 8
76667: PUSH
76668: LD_EXP 47
76672: PUSH
76673: LD_VAR 0 2
76677: ARRAY
76678: PPUSH
76679: LD_INT 2
76681: PUSH
76682: LD_INT 30
76684: PUSH
76685: LD_INT 4
76687: PUSH
76688: EMPTY
76689: LIST
76690: LIST
76691: PUSH
76692: LD_INT 30
76694: PUSH
76695: LD_INT 5
76697: PUSH
76698: EMPTY
76699: LIST
76700: LIST
76701: PUSH
76702: EMPTY
76703: LIST
76704: LIST
76705: LIST
76706: PPUSH
76707: CALL_OW 72
76711: ST_TO_ADDR
// if barracks then
76712: LD_VAR 0 8
76716: IFFALSE 76864
// begin selected := 0 ;
76718: LD_ADDR_VAR 0 7
76722: PUSH
76723: LD_INT 0
76725: ST_TO_ADDR
// for j in barracks do
76726: LD_ADDR_VAR 0 3
76730: PUSH
76731: LD_VAR 0 8
76735: PUSH
76736: FOR_IN
76737: IFFALSE 76768
// begin if UnitsInside ( j ) < 6 then
76739: LD_VAR 0 3
76743: PPUSH
76744: CALL_OW 313
76748: PUSH
76749: LD_INT 6
76751: LESS
76752: IFFALSE 76766
// begin selected := j ;
76754: LD_ADDR_VAR 0 7
76758: PUSH
76759: LD_VAR 0 3
76763: ST_TO_ADDR
// break ;
76764: GO 76768
// end ; end ;
76766: GO 76736
76768: POP
76769: POP
// if selected then
76770: LD_VAR 0 7
76774: IFFALSE 76864
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
76776: LD_ADDR_VAR 0 3
76780: PUSH
76781: LD_EXP 76
76785: PUSH
76786: LD_VAR 0 2
76790: ARRAY
76791: PPUSH
76792: LD_INT 25
76794: PUSH
76795: LD_INT 12
76797: PUSH
76798: EMPTY
76799: LIST
76800: LIST
76801: PPUSH
76802: CALL_OW 72
76806: PUSH
76807: FOR_IN
76808: IFFALSE 76862
// if not IsInUnit ( j ) and not HasTask ( j ) then
76810: LD_VAR 0 3
76814: PPUSH
76815: CALL_OW 310
76819: NOT
76820: PUSH
76821: LD_VAR 0 3
76825: PPUSH
76826: CALL_OW 314
76830: NOT
76831: AND
76832: IFFALSE 76860
// begin ComEnterUnit ( j , selected ) ;
76834: LD_VAR 0 3
76838: PPUSH
76839: LD_VAR 0 7
76843: PPUSH
76844: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
76848: LD_VAR 0 3
76852: PPUSH
76853: LD_INT 15
76855: PPUSH
76856: CALL_OW 183
// end ;
76860: GO 76807
76862: POP
76863: POP
// end ; end ; end ; end ; end ;
76864: GO 76257
76866: POP
76867: POP
// end ;
76868: LD_VAR 0 1
76872: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
76873: LD_INT 0
76875: PPUSH
76876: PPUSH
76877: PPUSH
76878: PPUSH
// if not mc_bases then
76879: LD_EXP 47
76883: NOT
76884: IFFALSE 76888
// exit ;
76886: GO 77066
// for i = 1 to mc_bases do
76888: LD_ADDR_VAR 0 2
76892: PUSH
76893: DOUBLE
76894: LD_INT 1
76896: DEC
76897: ST_TO_ADDR
76898: LD_EXP 47
76902: PUSH
76903: FOR_TO
76904: IFFALSE 77064
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
76906: LD_ADDR_VAR 0 4
76910: PUSH
76911: LD_EXP 47
76915: PUSH
76916: LD_VAR 0 2
76920: ARRAY
76921: PPUSH
76922: LD_INT 25
76924: PUSH
76925: LD_INT 9
76927: PUSH
76928: EMPTY
76929: LIST
76930: LIST
76931: PPUSH
76932: CALL_OW 72
76936: ST_TO_ADDR
// if not tmp then
76937: LD_VAR 0 4
76941: NOT
76942: IFFALSE 76946
// continue ;
76944: GO 76903
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
76946: LD_EXP 73
76950: PUSH
76951: LD_VAR 0 2
76955: ARRAY
76956: PPUSH
76957: LD_INT 29
76959: PPUSH
76960: CALL_OW 325
76964: NOT
76965: PUSH
76966: LD_EXP 73
76970: PUSH
76971: LD_VAR 0 2
76975: ARRAY
76976: PPUSH
76977: LD_INT 28
76979: PPUSH
76980: CALL_OW 325
76984: NOT
76985: AND
76986: IFFALSE 76990
// continue ;
76988: GO 76903
// for j in tmp do
76990: LD_ADDR_VAR 0 3
76994: PUSH
76995: LD_VAR 0 4
76999: PUSH
77000: FOR_IN
77001: IFFALSE 77060
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
77003: LD_VAR 0 3
77007: PUSH
77008: LD_EXP 50
77012: PUSH
77013: LD_VAR 0 2
77017: ARRAY
77018: PUSH
77019: LD_INT 1
77021: ARRAY
77022: IN
77023: NOT
77024: PUSH
77025: LD_VAR 0 3
77029: PUSH
77030: LD_EXP 50
77034: PUSH
77035: LD_VAR 0 2
77039: ARRAY
77040: PUSH
77041: LD_INT 2
77043: ARRAY
77044: IN
77045: NOT
77046: AND
77047: IFFALSE 77058
// ComSpaceTimeShoot ( j ) ;
77049: LD_VAR 0 3
77053: PPUSH
77054: CALL 20312 0 1
77058: GO 77000
77060: POP
77061: POP
// end ;
77062: GO 76903
77064: POP
77065: POP
// end ;
77066: LD_VAR 0 1
77070: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
77071: LD_INT 0
77073: PPUSH
77074: PPUSH
77075: PPUSH
77076: PPUSH
77077: PPUSH
77078: PPUSH
77079: PPUSH
77080: PPUSH
77081: PPUSH
// if not mc_bases then
77082: LD_EXP 47
77086: NOT
77087: IFFALSE 77091
// exit ;
77089: GO 77713
// for i = 1 to mc_bases do
77091: LD_ADDR_VAR 0 2
77095: PUSH
77096: DOUBLE
77097: LD_INT 1
77099: DEC
77100: ST_TO_ADDR
77101: LD_EXP 47
77105: PUSH
77106: FOR_TO
77107: IFFALSE 77711
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
77109: LD_EXP 82
77113: PUSH
77114: LD_VAR 0 2
77118: ARRAY
77119: NOT
77120: PUSH
77121: LD_INT 38
77123: PPUSH
77124: LD_EXP 73
77128: PUSH
77129: LD_VAR 0 2
77133: ARRAY
77134: PPUSH
77135: CALL_OW 321
77139: PUSH
77140: LD_INT 2
77142: NONEQUAL
77143: OR
77144: IFFALSE 77148
// continue ;
77146: GO 77106
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
77148: LD_ADDR_VAR 0 8
77152: PUSH
77153: LD_EXP 47
77157: PUSH
77158: LD_VAR 0 2
77162: ARRAY
77163: PPUSH
77164: LD_INT 30
77166: PUSH
77167: LD_INT 34
77169: PUSH
77170: EMPTY
77171: LIST
77172: LIST
77173: PPUSH
77174: CALL_OW 72
77178: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
77179: LD_ADDR_VAR 0 9
77183: PUSH
77184: LD_EXP 47
77188: PUSH
77189: LD_VAR 0 2
77193: ARRAY
77194: PPUSH
77195: LD_INT 25
77197: PUSH
77198: LD_INT 4
77200: PUSH
77201: EMPTY
77202: LIST
77203: LIST
77204: PPUSH
77205: CALL_OW 72
77209: PPUSH
77210: LD_INT 0
77212: PPUSH
77213: CALL 53209 0 2
77217: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
77218: LD_VAR 0 9
77222: NOT
77223: PUSH
77224: LD_VAR 0 8
77228: NOT
77229: OR
77230: PUSH
77231: LD_EXP 47
77235: PUSH
77236: LD_VAR 0 2
77240: ARRAY
77241: PPUSH
77242: LD_INT 124
77244: PPUSH
77245: CALL 53209 0 2
77249: OR
77250: IFFALSE 77254
// continue ;
77252: GO 77106
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
77254: LD_EXP 83
77258: PUSH
77259: LD_VAR 0 2
77263: ARRAY
77264: PUSH
77265: LD_EXP 82
77269: PUSH
77270: LD_VAR 0 2
77274: ARRAY
77275: LESS
77276: PUSH
77277: LD_EXP 83
77281: PUSH
77282: LD_VAR 0 2
77286: ARRAY
77287: PUSH
77288: LD_VAR 0 8
77292: LESS
77293: AND
77294: IFFALSE 77709
// begin tmp := sci [ 1 ] ;
77296: LD_ADDR_VAR 0 7
77300: PUSH
77301: LD_VAR 0 9
77305: PUSH
77306: LD_INT 1
77308: ARRAY
77309: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
77310: LD_VAR 0 7
77314: PPUSH
77315: LD_INT 124
77317: PPUSH
77318: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
77322: LD_ADDR_VAR 0 3
77326: PUSH
77327: DOUBLE
77328: LD_EXP 82
77332: PUSH
77333: LD_VAR 0 2
77337: ARRAY
77338: INC
77339: ST_TO_ADDR
77340: LD_EXP 82
77344: PUSH
77345: LD_VAR 0 2
77349: ARRAY
77350: PUSH
77351: FOR_DOWNTO
77352: IFFALSE 77695
// begin if IsInUnit ( tmp ) then
77354: LD_VAR 0 7
77358: PPUSH
77359: CALL_OW 310
77363: IFFALSE 77374
// ComExitBuilding ( tmp ) ;
77365: LD_VAR 0 7
77369: PPUSH
77370: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
77374: LD_INT 35
77376: PPUSH
77377: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
77381: LD_VAR 0 7
77385: PPUSH
77386: CALL_OW 310
77390: NOT
77391: PUSH
77392: LD_VAR 0 7
77396: PPUSH
77397: CALL_OW 314
77401: NOT
77402: AND
77403: IFFALSE 77374
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
77405: LD_ADDR_VAR 0 6
77409: PUSH
77410: LD_VAR 0 7
77414: PPUSH
77415: CALL_OW 250
77419: PUSH
77420: LD_VAR 0 7
77424: PPUSH
77425: CALL_OW 251
77429: PUSH
77430: EMPTY
77431: LIST
77432: LIST
77433: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
77434: LD_INT 35
77436: PPUSH
77437: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
77441: LD_ADDR_VAR 0 4
77445: PUSH
77446: LD_EXP 82
77450: PUSH
77451: LD_VAR 0 2
77455: ARRAY
77456: PUSH
77457: LD_VAR 0 3
77461: ARRAY
77462: PUSH
77463: LD_INT 1
77465: ARRAY
77466: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
77467: LD_ADDR_VAR 0 5
77471: PUSH
77472: LD_EXP 82
77476: PUSH
77477: LD_VAR 0 2
77481: ARRAY
77482: PUSH
77483: LD_VAR 0 3
77487: ARRAY
77488: PUSH
77489: LD_INT 2
77491: ARRAY
77492: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
77493: LD_VAR 0 7
77497: PPUSH
77498: LD_INT 10
77500: PPUSH
77501: CALL 26908 0 2
77505: PUSH
77506: LD_INT 4
77508: ARRAY
77509: IFFALSE 77547
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
77511: LD_VAR 0 7
77515: PPUSH
77516: LD_VAR 0 6
77520: PUSH
77521: LD_INT 1
77523: ARRAY
77524: PPUSH
77525: LD_VAR 0 6
77529: PUSH
77530: LD_INT 2
77532: ARRAY
77533: PPUSH
77534: CALL_OW 111
// wait ( 0 0$10 ) ;
77538: LD_INT 350
77540: PPUSH
77541: CALL_OW 67
// end else
77545: GO 77573
// begin ComMoveXY ( tmp , x , y ) ;
77547: LD_VAR 0 7
77551: PPUSH
77552: LD_VAR 0 4
77556: PPUSH
77557: LD_VAR 0 5
77561: PPUSH
77562: CALL_OW 111
// wait ( 0 0$3 ) ;
77566: LD_INT 105
77568: PPUSH
77569: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
77573: LD_VAR 0 7
77577: PPUSH
77578: LD_VAR 0 4
77582: PPUSH
77583: LD_VAR 0 5
77587: PPUSH
77588: CALL_OW 307
77592: IFFALSE 77434
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
77594: LD_VAR 0 7
77598: PPUSH
77599: LD_VAR 0 4
77603: PPUSH
77604: LD_VAR 0 5
77608: PPUSH
77609: LD_VAR 0 8
77613: PUSH
77614: LD_VAR 0 3
77618: ARRAY
77619: PPUSH
77620: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
77624: LD_INT 35
77626: PPUSH
77627: CALL_OW 67
// until not HasTask ( tmp ) ;
77631: LD_VAR 0 7
77635: PPUSH
77636: CALL_OW 314
77640: NOT
77641: IFFALSE 77624
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
77643: LD_ADDR_EXP 83
77647: PUSH
77648: LD_EXP 83
77652: PPUSH
77653: LD_VAR 0 2
77657: PUSH
77658: LD_EXP 83
77662: PUSH
77663: LD_VAR 0 2
77667: ARRAY
77668: PUSH
77669: LD_INT 1
77671: PLUS
77672: PUSH
77673: EMPTY
77674: LIST
77675: LIST
77676: PPUSH
77677: LD_VAR 0 8
77681: PUSH
77682: LD_VAR 0 3
77686: ARRAY
77687: PPUSH
77688: CALL 24315 0 3
77692: ST_TO_ADDR
// end ;
77693: GO 77351
77695: POP
77696: POP
// MC_Reset ( i , 124 ) ;
77697: LD_VAR 0 2
77701: PPUSH
77702: LD_INT 124
77704: PPUSH
77705: CALL 61247 0 2
// end ; end ;
77709: GO 77106
77711: POP
77712: POP
// end ;
77713: LD_VAR 0 1
77717: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
77718: LD_INT 0
77720: PPUSH
77721: PPUSH
77722: PPUSH
// if not mc_bases then
77723: LD_EXP 47
77727: NOT
77728: IFFALSE 77732
// exit ;
77730: GO 78338
// for i = 1 to mc_bases do
77732: LD_ADDR_VAR 0 2
77736: PUSH
77737: DOUBLE
77738: LD_INT 1
77740: DEC
77741: ST_TO_ADDR
77742: LD_EXP 47
77746: PUSH
77747: FOR_TO
77748: IFFALSE 78336
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
77750: LD_ADDR_VAR 0 3
77754: PUSH
77755: LD_EXP 47
77759: PUSH
77760: LD_VAR 0 2
77764: ARRAY
77765: PPUSH
77766: LD_INT 25
77768: PUSH
77769: LD_INT 4
77771: PUSH
77772: EMPTY
77773: LIST
77774: LIST
77775: PPUSH
77776: CALL_OW 72
77780: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
77781: LD_VAR 0 3
77785: NOT
77786: PUSH
77787: LD_EXP 84
77791: PUSH
77792: LD_VAR 0 2
77796: ARRAY
77797: NOT
77798: OR
77799: PUSH
77800: LD_EXP 47
77804: PUSH
77805: LD_VAR 0 2
77809: ARRAY
77810: PPUSH
77811: LD_INT 2
77813: PUSH
77814: LD_INT 30
77816: PUSH
77817: LD_INT 0
77819: PUSH
77820: EMPTY
77821: LIST
77822: LIST
77823: PUSH
77824: LD_INT 30
77826: PUSH
77827: LD_INT 1
77829: PUSH
77830: EMPTY
77831: LIST
77832: LIST
77833: PUSH
77834: EMPTY
77835: LIST
77836: LIST
77837: LIST
77838: PPUSH
77839: CALL_OW 72
77843: NOT
77844: OR
77845: IFFALSE 77895
// begin if mc_deposits_finder [ i ] then
77847: LD_EXP 85
77851: PUSH
77852: LD_VAR 0 2
77856: ARRAY
77857: IFFALSE 77893
// begin MC_Reset ( i , 125 ) ;
77859: LD_VAR 0 2
77863: PPUSH
77864: LD_INT 125
77866: PPUSH
77867: CALL 61247 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
77871: LD_ADDR_EXP 85
77875: PUSH
77876: LD_EXP 85
77880: PPUSH
77881: LD_VAR 0 2
77885: PPUSH
77886: EMPTY
77887: PPUSH
77888: CALL_OW 1
77892: ST_TO_ADDR
// end ; continue ;
77893: GO 77747
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
77895: LD_EXP 84
77899: PUSH
77900: LD_VAR 0 2
77904: ARRAY
77905: PUSH
77906: LD_INT 1
77908: ARRAY
77909: PUSH
77910: LD_INT 3
77912: ARRAY
77913: PUSH
77914: LD_INT 1
77916: EQUAL
77917: PUSH
77918: LD_INT 20
77920: PPUSH
77921: LD_EXP 73
77925: PUSH
77926: LD_VAR 0 2
77930: ARRAY
77931: PPUSH
77932: CALL_OW 321
77936: PUSH
77937: LD_INT 2
77939: NONEQUAL
77940: AND
77941: IFFALSE 77991
// begin if mc_deposits_finder [ i ] then
77943: LD_EXP 85
77947: PUSH
77948: LD_VAR 0 2
77952: ARRAY
77953: IFFALSE 77989
// begin MC_Reset ( i , 125 ) ;
77955: LD_VAR 0 2
77959: PPUSH
77960: LD_INT 125
77962: PPUSH
77963: CALL 61247 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
77967: LD_ADDR_EXP 85
77971: PUSH
77972: LD_EXP 85
77976: PPUSH
77977: LD_VAR 0 2
77981: PPUSH
77982: EMPTY
77983: PPUSH
77984: CALL_OW 1
77988: ST_TO_ADDR
// end ; continue ;
77989: GO 77747
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
77991: LD_EXP 84
77995: PUSH
77996: LD_VAR 0 2
78000: ARRAY
78001: PUSH
78002: LD_INT 1
78004: ARRAY
78005: PUSH
78006: LD_INT 1
78008: ARRAY
78009: PPUSH
78010: LD_EXP 84
78014: PUSH
78015: LD_VAR 0 2
78019: ARRAY
78020: PUSH
78021: LD_INT 1
78023: ARRAY
78024: PUSH
78025: LD_INT 2
78027: ARRAY
78028: PPUSH
78029: LD_EXP 73
78033: PUSH
78034: LD_VAR 0 2
78038: ARRAY
78039: PPUSH
78040: CALL_OW 440
78044: IFFALSE 78087
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
78046: LD_ADDR_EXP 84
78050: PUSH
78051: LD_EXP 84
78055: PPUSH
78056: LD_VAR 0 2
78060: PPUSH
78061: LD_EXP 84
78065: PUSH
78066: LD_VAR 0 2
78070: ARRAY
78071: PPUSH
78072: LD_INT 1
78074: PPUSH
78075: CALL_OW 3
78079: PPUSH
78080: CALL_OW 1
78084: ST_TO_ADDR
78085: GO 78334
// begin if not mc_deposits_finder [ i ] then
78087: LD_EXP 85
78091: PUSH
78092: LD_VAR 0 2
78096: ARRAY
78097: NOT
78098: IFFALSE 78150
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
78100: LD_ADDR_EXP 85
78104: PUSH
78105: LD_EXP 85
78109: PPUSH
78110: LD_VAR 0 2
78114: PPUSH
78115: LD_VAR 0 3
78119: PUSH
78120: LD_INT 1
78122: ARRAY
78123: PUSH
78124: EMPTY
78125: LIST
78126: PPUSH
78127: CALL_OW 1
78131: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
78132: LD_VAR 0 3
78136: PUSH
78137: LD_INT 1
78139: ARRAY
78140: PPUSH
78141: LD_INT 125
78143: PPUSH
78144: CALL_OW 109
// end else
78148: GO 78334
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
78150: LD_EXP 85
78154: PUSH
78155: LD_VAR 0 2
78159: ARRAY
78160: PUSH
78161: LD_INT 1
78163: ARRAY
78164: PPUSH
78165: CALL_OW 310
78169: IFFALSE 78192
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
78171: LD_EXP 85
78175: PUSH
78176: LD_VAR 0 2
78180: ARRAY
78181: PUSH
78182: LD_INT 1
78184: ARRAY
78185: PPUSH
78186: CALL_OW 122
78190: GO 78334
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
78192: LD_EXP 85
78196: PUSH
78197: LD_VAR 0 2
78201: ARRAY
78202: PUSH
78203: LD_INT 1
78205: ARRAY
78206: PPUSH
78207: CALL_OW 314
78211: NOT
78212: PUSH
78213: LD_EXP 85
78217: PUSH
78218: LD_VAR 0 2
78222: ARRAY
78223: PUSH
78224: LD_INT 1
78226: ARRAY
78227: PPUSH
78228: LD_EXP 84
78232: PUSH
78233: LD_VAR 0 2
78237: ARRAY
78238: PUSH
78239: LD_INT 1
78241: ARRAY
78242: PUSH
78243: LD_INT 1
78245: ARRAY
78246: PPUSH
78247: LD_EXP 84
78251: PUSH
78252: LD_VAR 0 2
78256: ARRAY
78257: PUSH
78258: LD_INT 1
78260: ARRAY
78261: PUSH
78262: LD_INT 2
78264: ARRAY
78265: PPUSH
78266: CALL_OW 297
78270: PUSH
78271: LD_INT 6
78273: GREATER
78274: AND
78275: IFFALSE 78334
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
78277: LD_EXP 85
78281: PUSH
78282: LD_VAR 0 2
78286: ARRAY
78287: PUSH
78288: LD_INT 1
78290: ARRAY
78291: PPUSH
78292: LD_EXP 84
78296: PUSH
78297: LD_VAR 0 2
78301: ARRAY
78302: PUSH
78303: LD_INT 1
78305: ARRAY
78306: PUSH
78307: LD_INT 1
78309: ARRAY
78310: PPUSH
78311: LD_EXP 84
78315: PUSH
78316: LD_VAR 0 2
78320: ARRAY
78321: PUSH
78322: LD_INT 1
78324: ARRAY
78325: PUSH
78326: LD_INT 2
78328: ARRAY
78329: PPUSH
78330: CALL_OW 111
// end ; end ; end ;
78334: GO 77747
78336: POP
78337: POP
// end ;
78338: LD_VAR 0 1
78342: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
78343: LD_INT 0
78345: PPUSH
78346: PPUSH
78347: PPUSH
78348: PPUSH
78349: PPUSH
78350: PPUSH
78351: PPUSH
78352: PPUSH
78353: PPUSH
78354: PPUSH
78355: PPUSH
// if not mc_bases then
78356: LD_EXP 47
78360: NOT
78361: IFFALSE 78365
// exit ;
78363: GO 79305
// for i = 1 to mc_bases do
78365: LD_ADDR_VAR 0 2
78369: PUSH
78370: DOUBLE
78371: LD_INT 1
78373: DEC
78374: ST_TO_ADDR
78375: LD_EXP 47
78379: PUSH
78380: FOR_TO
78381: IFFALSE 79303
// begin if not mc_bases [ i ] or mc_scan [ i ] then
78383: LD_EXP 47
78387: PUSH
78388: LD_VAR 0 2
78392: ARRAY
78393: NOT
78394: PUSH
78395: LD_EXP 70
78399: PUSH
78400: LD_VAR 0 2
78404: ARRAY
78405: OR
78406: IFFALSE 78410
// continue ;
78408: GO 78380
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
78410: LD_ADDR_VAR 0 7
78414: PUSH
78415: LD_EXP 47
78419: PUSH
78420: LD_VAR 0 2
78424: ARRAY
78425: PUSH
78426: LD_INT 1
78428: ARRAY
78429: PPUSH
78430: CALL_OW 248
78434: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
78435: LD_VAR 0 7
78439: PUSH
78440: LD_INT 3
78442: EQUAL
78443: PUSH
78444: LD_EXP 66
78448: PUSH
78449: LD_VAR 0 2
78453: ARRAY
78454: PUSH
78455: LD_EXP 69
78459: PUSH
78460: LD_VAR 0 2
78464: ARRAY
78465: UNION
78466: PPUSH
78467: LD_INT 33
78469: PUSH
78470: LD_INT 2
78472: PUSH
78473: EMPTY
78474: LIST
78475: LIST
78476: PPUSH
78477: CALL_OW 72
78481: NOT
78482: OR
78483: IFFALSE 78487
// continue ;
78485: GO 78380
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
78487: LD_ADDR_VAR 0 9
78491: PUSH
78492: LD_EXP 47
78496: PUSH
78497: LD_VAR 0 2
78501: ARRAY
78502: PPUSH
78503: LD_INT 30
78505: PUSH
78506: LD_INT 36
78508: PUSH
78509: EMPTY
78510: LIST
78511: LIST
78512: PPUSH
78513: CALL_OW 72
78517: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
78518: LD_ADDR_VAR 0 10
78522: PUSH
78523: LD_EXP 66
78527: PUSH
78528: LD_VAR 0 2
78532: ARRAY
78533: PPUSH
78534: LD_INT 34
78536: PUSH
78537: LD_INT 31
78539: PUSH
78540: EMPTY
78541: LIST
78542: LIST
78543: PPUSH
78544: CALL_OW 72
78548: ST_TO_ADDR
// if not cts and not mcts then
78549: LD_VAR 0 9
78553: NOT
78554: PUSH
78555: LD_VAR 0 10
78559: NOT
78560: AND
78561: IFFALSE 78565
// continue ;
78563: GO 78380
// x := cts ;
78565: LD_ADDR_VAR 0 11
78569: PUSH
78570: LD_VAR 0 9
78574: ST_TO_ADDR
// if not x then
78575: LD_VAR 0 11
78579: NOT
78580: IFFALSE 78592
// x := mcts ;
78582: LD_ADDR_VAR 0 11
78586: PUSH
78587: LD_VAR 0 10
78591: ST_TO_ADDR
// if not x then
78592: LD_VAR 0 11
78596: NOT
78597: IFFALSE 78601
// continue ;
78599: GO 78380
// if mc_remote_driver [ i ] then
78601: LD_EXP 87
78605: PUSH
78606: LD_VAR 0 2
78610: ARRAY
78611: IFFALSE 78998
// for j in mc_remote_driver [ i ] do
78613: LD_ADDR_VAR 0 3
78617: PUSH
78618: LD_EXP 87
78622: PUSH
78623: LD_VAR 0 2
78627: ARRAY
78628: PUSH
78629: FOR_IN
78630: IFFALSE 78996
// begin if GetClass ( j ) <> 3 then
78632: LD_VAR 0 3
78636: PPUSH
78637: CALL_OW 257
78641: PUSH
78642: LD_INT 3
78644: NONEQUAL
78645: IFFALSE 78698
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
78647: LD_ADDR_EXP 87
78651: PUSH
78652: LD_EXP 87
78656: PPUSH
78657: LD_VAR 0 2
78661: PPUSH
78662: LD_EXP 87
78666: PUSH
78667: LD_VAR 0 2
78671: ARRAY
78672: PUSH
78673: LD_VAR 0 3
78677: DIFF
78678: PPUSH
78679: CALL_OW 1
78683: ST_TO_ADDR
// SetTag ( j , 0 ) ;
78684: LD_VAR 0 3
78688: PPUSH
78689: LD_INT 0
78691: PPUSH
78692: CALL_OW 109
// continue ;
78696: GO 78629
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
78698: LD_EXP 66
78702: PUSH
78703: LD_VAR 0 2
78707: ARRAY
78708: PPUSH
78709: LD_INT 34
78711: PUSH
78712: LD_INT 31
78714: PUSH
78715: EMPTY
78716: LIST
78717: LIST
78718: PUSH
78719: LD_INT 58
78721: PUSH
78722: EMPTY
78723: LIST
78724: PUSH
78725: EMPTY
78726: LIST
78727: LIST
78728: PPUSH
78729: CALL_OW 72
78733: PUSH
78734: LD_VAR 0 3
78738: PPUSH
78739: CALL 53297 0 1
78743: NOT
78744: AND
78745: IFFALSE 78816
// begin if IsInUnit ( j ) then
78747: LD_VAR 0 3
78751: PPUSH
78752: CALL_OW 310
78756: IFFALSE 78767
// ComExitBuilding ( j ) ;
78758: LD_VAR 0 3
78762: PPUSH
78763: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
78767: LD_VAR 0 3
78771: PPUSH
78772: LD_EXP 66
78776: PUSH
78777: LD_VAR 0 2
78781: ARRAY
78782: PPUSH
78783: LD_INT 34
78785: PUSH
78786: LD_INT 31
78788: PUSH
78789: EMPTY
78790: LIST
78791: LIST
78792: PUSH
78793: LD_INT 58
78795: PUSH
78796: EMPTY
78797: LIST
78798: PUSH
78799: EMPTY
78800: LIST
78801: LIST
78802: PPUSH
78803: CALL_OW 72
78807: PUSH
78808: LD_INT 1
78810: ARRAY
78811: PPUSH
78812: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
78816: LD_VAR 0 3
78820: PPUSH
78821: CALL_OW 310
78825: NOT
78826: PUSH
78827: LD_VAR 0 3
78831: PPUSH
78832: CALL_OW 310
78836: PPUSH
78837: CALL_OW 266
78841: PUSH
78842: LD_INT 36
78844: NONEQUAL
78845: PUSH
78846: LD_VAR 0 3
78850: PPUSH
78851: CALL 53297 0 1
78855: NOT
78856: AND
78857: OR
78858: IFFALSE 78994
// begin if IsInUnit ( j ) then
78860: LD_VAR 0 3
78864: PPUSH
78865: CALL_OW 310
78869: IFFALSE 78880
// ComExitBuilding ( j ) ;
78871: LD_VAR 0 3
78875: PPUSH
78876: CALL_OW 122
// ct := 0 ;
78880: LD_ADDR_VAR 0 8
78884: PUSH
78885: LD_INT 0
78887: ST_TO_ADDR
// for k in x do
78888: LD_ADDR_VAR 0 4
78892: PUSH
78893: LD_VAR 0 11
78897: PUSH
78898: FOR_IN
78899: IFFALSE 78972
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
78901: LD_VAR 0 4
78905: PPUSH
78906: CALL_OW 264
78910: PUSH
78911: LD_INT 31
78913: EQUAL
78914: PUSH
78915: LD_VAR 0 4
78919: PPUSH
78920: CALL_OW 311
78924: NOT
78925: AND
78926: PUSH
78927: LD_VAR 0 4
78931: PPUSH
78932: CALL_OW 266
78936: PUSH
78937: LD_INT 36
78939: EQUAL
78940: PUSH
78941: LD_VAR 0 4
78945: PPUSH
78946: CALL_OW 313
78950: PUSH
78951: LD_INT 3
78953: LESS
78954: AND
78955: OR
78956: IFFALSE 78970
// begin ct := k ;
78958: LD_ADDR_VAR 0 8
78962: PUSH
78963: LD_VAR 0 4
78967: ST_TO_ADDR
// break ;
78968: GO 78972
// end ;
78970: GO 78898
78972: POP
78973: POP
// if ct then
78974: LD_VAR 0 8
78978: IFFALSE 78994
// ComEnterUnit ( j , ct ) ;
78980: LD_VAR 0 3
78984: PPUSH
78985: LD_VAR 0 8
78989: PPUSH
78990: CALL_OW 120
// end ; end ;
78994: GO 78629
78996: POP
78997: POP
// places := 0 ;
78998: LD_ADDR_VAR 0 5
79002: PUSH
79003: LD_INT 0
79005: ST_TO_ADDR
// for j = 1 to x do
79006: LD_ADDR_VAR 0 3
79010: PUSH
79011: DOUBLE
79012: LD_INT 1
79014: DEC
79015: ST_TO_ADDR
79016: LD_VAR 0 11
79020: PUSH
79021: FOR_TO
79022: IFFALSE 79098
// if GetWeapon ( x [ j ] ) = ar_control_tower then
79024: LD_VAR 0 11
79028: PUSH
79029: LD_VAR 0 3
79033: ARRAY
79034: PPUSH
79035: CALL_OW 264
79039: PUSH
79040: LD_INT 31
79042: EQUAL
79043: IFFALSE 79061
// places := places + 1 else
79045: LD_ADDR_VAR 0 5
79049: PUSH
79050: LD_VAR 0 5
79054: PUSH
79055: LD_INT 1
79057: PLUS
79058: ST_TO_ADDR
79059: GO 79096
// if GetBType ( x [ j ] ) = b_control_tower then
79061: LD_VAR 0 11
79065: PUSH
79066: LD_VAR 0 3
79070: ARRAY
79071: PPUSH
79072: CALL_OW 266
79076: PUSH
79077: LD_INT 36
79079: EQUAL
79080: IFFALSE 79096
// places := places + 3 ;
79082: LD_ADDR_VAR 0 5
79086: PUSH
79087: LD_VAR 0 5
79091: PUSH
79092: LD_INT 3
79094: PLUS
79095: ST_TO_ADDR
79096: GO 79021
79098: POP
79099: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
79100: LD_VAR 0 5
79104: PUSH
79105: LD_INT 0
79107: EQUAL
79108: PUSH
79109: LD_VAR 0 5
79113: PUSH
79114: LD_EXP 87
79118: PUSH
79119: LD_VAR 0 2
79123: ARRAY
79124: LESSEQUAL
79125: OR
79126: IFFALSE 79130
// continue ;
79128: GO 78380
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
79130: LD_ADDR_VAR 0 6
79134: PUSH
79135: LD_EXP 47
79139: PUSH
79140: LD_VAR 0 2
79144: ARRAY
79145: PPUSH
79146: LD_INT 25
79148: PUSH
79149: LD_INT 3
79151: PUSH
79152: EMPTY
79153: LIST
79154: LIST
79155: PPUSH
79156: CALL_OW 72
79160: PUSH
79161: LD_EXP 87
79165: PUSH
79166: LD_VAR 0 2
79170: ARRAY
79171: DIFF
79172: PPUSH
79173: LD_INT 3
79175: PPUSH
79176: CALL 54197 0 2
79180: ST_TO_ADDR
// for j in tmp do
79181: LD_ADDR_VAR 0 3
79185: PUSH
79186: LD_VAR 0 6
79190: PUSH
79191: FOR_IN
79192: IFFALSE 79227
// if GetTag ( j ) > 0 then
79194: LD_VAR 0 3
79198: PPUSH
79199: CALL_OW 110
79203: PUSH
79204: LD_INT 0
79206: GREATER
79207: IFFALSE 79225
// tmp := tmp diff j ;
79209: LD_ADDR_VAR 0 6
79213: PUSH
79214: LD_VAR 0 6
79218: PUSH
79219: LD_VAR 0 3
79223: DIFF
79224: ST_TO_ADDR
79225: GO 79191
79227: POP
79228: POP
// if not tmp then
79229: LD_VAR 0 6
79233: NOT
79234: IFFALSE 79238
// continue ;
79236: GO 78380
// if places then
79238: LD_VAR 0 5
79242: IFFALSE 79301
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
79244: LD_ADDR_EXP 87
79248: PUSH
79249: LD_EXP 87
79253: PPUSH
79254: LD_VAR 0 2
79258: PPUSH
79259: LD_EXP 87
79263: PUSH
79264: LD_VAR 0 2
79268: ARRAY
79269: PUSH
79270: LD_VAR 0 6
79274: PUSH
79275: LD_INT 1
79277: ARRAY
79278: UNION
79279: PPUSH
79280: CALL_OW 1
79284: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
79285: LD_VAR 0 6
79289: PUSH
79290: LD_INT 1
79292: ARRAY
79293: PPUSH
79294: LD_INT 126
79296: PPUSH
79297: CALL_OW 109
// end ; end ;
79301: GO 78380
79303: POP
79304: POP
// end ;
79305: LD_VAR 0 1
79309: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
79310: LD_INT 0
79312: PPUSH
79313: PPUSH
79314: PPUSH
79315: PPUSH
79316: PPUSH
79317: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
79318: LD_VAR 0 1
79322: NOT
79323: PUSH
79324: LD_VAR 0 2
79328: NOT
79329: OR
79330: PUSH
79331: LD_VAR 0 3
79335: NOT
79336: OR
79337: PUSH
79338: LD_VAR 0 4
79342: PUSH
79343: LD_INT 1
79345: PUSH
79346: LD_INT 2
79348: PUSH
79349: LD_INT 3
79351: PUSH
79352: LD_INT 4
79354: PUSH
79355: LD_INT 5
79357: PUSH
79358: LD_INT 8
79360: PUSH
79361: LD_INT 9
79363: PUSH
79364: LD_INT 15
79366: PUSH
79367: LD_INT 16
79369: PUSH
79370: EMPTY
79371: LIST
79372: LIST
79373: LIST
79374: LIST
79375: LIST
79376: LIST
79377: LIST
79378: LIST
79379: LIST
79380: IN
79381: NOT
79382: OR
79383: IFFALSE 79387
// exit ;
79385: GO 80287
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
79387: LD_ADDR_VAR 0 2
79391: PUSH
79392: LD_VAR 0 2
79396: PPUSH
79397: LD_INT 21
79399: PUSH
79400: LD_INT 3
79402: PUSH
79403: EMPTY
79404: LIST
79405: LIST
79406: PUSH
79407: LD_INT 24
79409: PUSH
79410: LD_INT 250
79412: PUSH
79413: EMPTY
79414: LIST
79415: LIST
79416: PUSH
79417: EMPTY
79418: LIST
79419: LIST
79420: PPUSH
79421: CALL_OW 72
79425: ST_TO_ADDR
// case class of 1 , 15 :
79426: LD_VAR 0 4
79430: PUSH
79431: LD_INT 1
79433: DOUBLE
79434: EQUAL
79435: IFTRUE 79445
79437: LD_INT 15
79439: DOUBLE
79440: EQUAL
79441: IFTRUE 79445
79443: GO 79530
79445: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
79446: LD_ADDR_VAR 0 8
79450: PUSH
79451: LD_VAR 0 2
79455: PPUSH
79456: LD_INT 2
79458: PUSH
79459: LD_INT 30
79461: PUSH
79462: LD_INT 32
79464: PUSH
79465: EMPTY
79466: LIST
79467: LIST
79468: PUSH
79469: LD_INT 30
79471: PUSH
79472: LD_INT 31
79474: PUSH
79475: EMPTY
79476: LIST
79477: LIST
79478: PUSH
79479: EMPTY
79480: LIST
79481: LIST
79482: LIST
79483: PPUSH
79484: CALL_OW 72
79488: PUSH
79489: LD_VAR 0 2
79493: PPUSH
79494: LD_INT 2
79496: PUSH
79497: LD_INT 30
79499: PUSH
79500: LD_INT 4
79502: PUSH
79503: EMPTY
79504: LIST
79505: LIST
79506: PUSH
79507: LD_INT 30
79509: PUSH
79510: LD_INT 5
79512: PUSH
79513: EMPTY
79514: LIST
79515: LIST
79516: PUSH
79517: EMPTY
79518: LIST
79519: LIST
79520: LIST
79521: PPUSH
79522: CALL_OW 72
79526: ADD
79527: ST_TO_ADDR
79528: GO 79776
79530: LD_INT 2
79532: DOUBLE
79533: EQUAL
79534: IFTRUE 79544
79536: LD_INT 16
79538: DOUBLE
79539: EQUAL
79540: IFTRUE 79544
79542: GO 79590
79544: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
79545: LD_ADDR_VAR 0 8
79549: PUSH
79550: LD_VAR 0 2
79554: PPUSH
79555: LD_INT 2
79557: PUSH
79558: LD_INT 30
79560: PUSH
79561: LD_INT 0
79563: PUSH
79564: EMPTY
79565: LIST
79566: LIST
79567: PUSH
79568: LD_INT 30
79570: PUSH
79571: LD_INT 1
79573: PUSH
79574: EMPTY
79575: LIST
79576: LIST
79577: PUSH
79578: EMPTY
79579: LIST
79580: LIST
79581: LIST
79582: PPUSH
79583: CALL_OW 72
79587: ST_TO_ADDR
79588: GO 79776
79590: LD_INT 3
79592: DOUBLE
79593: EQUAL
79594: IFTRUE 79598
79596: GO 79644
79598: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
79599: LD_ADDR_VAR 0 8
79603: PUSH
79604: LD_VAR 0 2
79608: PPUSH
79609: LD_INT 2
79611: PUSH
79612: LD_INT 30
79614: PUSH
79615: LD_INT 2
79617: PUSH
79618: EMPTY
79619: LIST
79620: LIST
79621: PUSH
79622: LD_INT 30
79624: PUSH
79625: LD_INT 3
79627: PUSH
79628: EMPTY
79629: LIST
79630: LIST
79631: PUSH
79632: EMPTY
79633: LIST
79634: LIST
79635: LIST
79636: PPUSH
79637: CALL_OW 72
79641: ST_TO_ADDR
79642: GO 79776
79644: LD_INT 4
79646: DOUBLE
79647: EQUAL
79648: IFTRUE 79652
79650: GO 79709
79652: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
79653: LD_ADDR_VAR 0 8
79657: PUSH
79658: LD_VAR 0 2
79662: PPUSH
79663: LD_INT 2
79665: PUSH
79666: LD_INT 30
79668: PUSH
79669: LD_INT 6
79671: PUSH
79672: EMPTY
79673: LIST
79674: LIST
79675: PUSH
79676: LD_INT 30
79678: PUSH
79679: LD_INT 7
79681: PUSH
79682: EMPTY
79683: LIST
79684: LIST
79685: PUSH
79686: LD_INT 30
79688: PUSH
79689: LD_INT 8
79691: PUSH
79692: EMPTY
79693: LIST
79694: LIST
79695: PUSH
79696: EMPTY
79697: LIST
79698: LIST
79699: LIST
79700: LIST
79701: PPUSH
79702: CALL_OW 72
79706: ST_TO_ADDR
79707: GO 79776
79709: LD_INT 5
79711: DOUBLE
79712: EQUAL
79713: IFTRUE 79729
79715: LD_INT 8
79717: DOUBLE
79718: EQUAL
79719: IFTRUE 79729
79721: LD_INT 9
79723: DOUBLE
79724: EQUAL
79725: IFTRUE 79729
79727: GO 79775
79729: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
79730: LD_ADDR_VAR 0 8
79734: PUSH
79735: LD_VAR 0 2
79739: PPUSH
79740: LD_INT 2
79742: PUSH
79743: LD_INT 30
79745: PUSH
79746: LD_INT 4
79748: PUSH
79749: EMPTY
79750: LIST
79751: LIST
79752: PUSH
79753: LD_INT 30
79755: PUSH
79756: LD_INT 5
79758: PUSH
79759: EMPTY
79760: LIST
79761: LIST
79762: PUSH
79763: EMPTY
79764: LIST
79765: LIST
79766: LIST
79767: PPUSH
79768: CALL_OW 72
79772: ST_TO_ADDR
79773: GO 79776
79775: POP
// if not tmp then
79776: LD_VAR 0 8
79780: NOT
79781: IFFALSE 79785
// exit ;
79783: GO 80287
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
79785: LD_VAR 0 4
79789: PUSH
79790: LD_INT 1
79792: PUSH
79793: LD_INT 15
79795: PUSH
79796: EMPTY
79797: LIST
79798: LIST
79799: IN
79800: PUSH
79801: LD_EXP 56
79805: PUSH
79806: LD_VAR 0 1
79810: ARRAY
79811: AND
79812: IFFALSE 79968
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
79814: LD_ADDR_VAR 0 9
79818: PUSH
79819: LD_EXP 56
79823: PUSH
79824: LD_VAR 0 1
79828: ARRAY
79829: PUSH
79830: LD_INT 1
79832: ARRAY
79833: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
79834: LD_VAR 0 9
79838: PUSH
79839: LD_EXP 57
79843: PUSH
79844: LD_VAR 0 1
79848: ARRAY
79849: IN
79850: NOT
79851: IFFALSE 79966
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
79853: LD_ADDR_EXP 57
79857: PUSH
79858: LD_EXP 57
79862: PPUSH
79863: LD_VAR 0 1
79867: PUSH
79868: LD_EXP 57
79872: PUSH
79873: LD_VAR 0 1
79877: ARRAY
79878: PUSH
79879: LD_INT 1
79881: PLUS
79882: PUSH
79883: EMPTY
79884: LIST
79885: LIST
79886: PPUSH
79887: LD_VAR 0 9
79891: PPUSH
79892: CALL 24315 0 3
79896: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
79897: LD_ADDR_EXP 56
79901: PUSH
79902: LD_EXP 56
79906: PPUSH
79907: LD_VAR 0 1
79911: PPUSH
79912: LD_EXP 56
79916: PUSH
79917: LD_VAR 0 1
79921: ARRAY
79922: PUSH
79923: LD_VAR 0 9
79927: DIFF
79928: PPUSH
79929: CALL_OW 1
79933: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
79934: LD_VAR 0 3
79938: PPUSH
79939: LD_EXP 57
79943: PUSH
79944: LD_VAR 0 1
79948: ARRAY
79949: PUSH
79950: LD_EXP 57
79954: PUSH
79955: LD_VAR 0 1
79959: ARRAY
79960: ARRAY
79961: PPUSH
79962: CALL_OW 120
// end ; exit ;
79966: GO 80287
// end ; if tmp > 1 then
79968: LD_VAR 0 8
79972: PUSH
79973: LD_INT 1
79975: GREATER
79976: IFFALSE 80080
// for i = 2 to tmp do
79978: LD_ADDR_VAR 0 6
79982: PUSH
79983: DOUBLE
79984: LD_INT 2
79986: DEC
79987: ST_TO_ADDR
79988: LD_VAR 0 8
79992: PUSH
79993: FOR_TO
79994: IFFALSE 80078
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
79996: LD_VAR 0 8
80000: PUSH
80001: LD_VAR 0 6
80005: ARRAY
80006: PPUSH
80007: CALL_OW 461
80011: PUSH
80012: LD_INT 6
80014: EQUAL
80015: IFFALSE 80076
// begin x := tmp [ i ] ;
80017: LD_ADDR_VAR 0 9
80021: PUSH
80022: LD_VAR 0 8
80026: PUSH
80027: LD_VAR 0 6
80031: ARRAY
80032: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
80033: LD_ADDR_VAR 0 8
80037: PUSH
80038: LD_VAR 0 8
80042: PPUSH
80043: LD_VAR 0 6
80047: PPUSH
80048: CALL_OW 3
80052: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
80053: LD_ADDR_VAR 0 8
80057: PUSH
80058: LD_VAR 0 8
80062: PPUSH
80063: LD_INT 1
80065: PPUSH
80066: LD_VAR 0 9
80070: PPUSH
80071: CALL_OW 2
80075: ST_TO_ADDR
// end ;
80076: GO 79993
80078: POP
80079: POP
// for i in tmp do
80080: LD_ADDR_VAR 0 6
80084: PUSH
80085: LD_VAR 0 8
80089: PUSH
80090: FOR_IN
80091: IFFALSE 80160
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
80093: LD_VAR 0 6
80097: PPUSH
80098: CALL_OW 313
80102: PUSH
80103: LD_INT 6
80105: LESS
80106: PUSH
80107: LD_VAR 0 6
80111: PPUSH
80112: CALL_OW 266
80116: PUSH
80117: LD_INT 31
80119: PUSH
80120: LD_INT 32
80122: PUSH
80123: EMPTY
80124: LIST
80125: LIST
80126: IN
80127: NOT
80128: AND
80129: PUSH
80130: LD_VAR 0 6
80134: PPUSH
80135: CALL_OW 313
80139: PUSH
80140: LD_INT 0
80142: EQUAL
80143: OR
80144: IFFALSE 80158
// begin j := i ;
80146: LD_ADDR_VAR 0 7
80150: PUSH
80151: LD_VAR 0 6
80155: ST_TO_ADDR
// break ;
80156: GO 80160
// end ; end ;
80158: GO 80090
80160: POP
80161: POP
// if j then
80162: LD_VAR 0 7
80166: IFFALSE 80184
// ComEnterUnit ( unit , j ) else
80168: LD_VAR 0 3
80172: PPUSH
80173: LD_VAR 0 7
80177: PPUSH
80178: CALL_OW 120
80182: GO 80287
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
80184: LD_ADDR_VAR 0 10
80188: PUSH
80189: LD_VAR 0 2
80193: PPUSH
80194: LD_INT 2
80196: PUSH
80197: LD_INT 30
80199: PUSH
80200: LD_INT 0
80202: PUSH
80203: EMPTY
80204: LIST
80205: LIST
80206: PUSH
80207: LD_INT 30
80209: PUSH
80210: LD_INT 1
80212: PUSH
80213: EMPTY
80214: LIST
80215: LIST
80216: PUSH
80217: EMPTY
80218: LIST
80219: LIST
80220: LIST
80221: PPUSH
80222: CALL_OW 72
80226: ST_TO_ADDR
// if depot then
80227: LD_VAR 0 10
80231: IFFALSE 80287
// begin depot := NearestUnitToUnit ( depot , unit ) ;
80233: LD_ADDR_VAR 0 10
80237: PUSH
80238: LD_VAR 0 10
80242: PPUSH
80243: LD_VAR 0 3
80247: PPUSH
80248: CALL_OW 74
80252: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
80253: LD_VAR 0 3
80257: PPUSH
80258: LD_VAR 0 10
80262: PPUSH
80263: CALL_OW 296
80267: PUSH
80268: LD_INT 10
80270: GREATER
80271: IFFALSE 80287
// ComStandNearbyBuilding ( unit , depot ) ;
80273: LD_VAR 0 3
80277: PPUSH
80278: LD_VAR 0 10
80282: PPUSH
80283: CALL 20929 0 2
// end ; end ; end ;
80287: LD_VAR 0 5
80291: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
80292: LD_INT 0
80294: PPUSH
80295: PPUSH
80296: PPUSH
80297: PPUSH
// if not mc_bases then
80298: LD_EXP 47
80302: NOT
80303: IFFALSE 80307
// exit ;
80305: GO 80546
// for i = 1 to mc_bases do
80307: LD_ADDR_VAR 0 2
80311: PUSH
80312: DOUBLE
80313: LD_INT 1
80315: DEC
80316: ST_TO_ADDR
80317: LD_EXP 47
80321: PUSH
80322: FOR_TO
80323: IFFALSE 80544
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
80325: LD_ADDR_VAR 0 4
80329: PUSH
80330: LD_EXP 47
80334: PUSH
80335: LD_VAR 0 2
80339: ARRAY
80340: PPUSH
80341: LD_INT 21
80343: PUSH
80344: LD_INT 1
80346: PUSH
80347: EMPTY
80348: LIST
80349: LIST
80350: PPUSH
80351: CALL_OW 72
80355: PUSH
80356: LD_EXP 76
80360: PUSH
80361: LD_VAR 0 2
80365: ARRAY
80366: UNION
80367: ST_TO_ADDR
// if not tmp then
80368: LD_VAR 0 4
80372: NOT
80373: IFFALSE 80377
// continue ;
80375: GO 80322
// for j in tmp do
80377: LD_ADDR_VAR 0 3
80381: PUSH
80382: LD_VAR 0 4
80386: PUSH
80387: FOR_IN
80388: IFFALSE 80540
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
80390: LD_VAR 0 3
80394: PPUSH
80395: CALL_OW 110
80399: NOT
80400: PUSH
80401: LD_VAR 0 3
80405: PPUSH
80406: CALL_OW 314
80410: NOT
80411: AND
80412: PUSH
80413: LD_VAR 0 3
80417: PPUSH
80418: CALL_OW 311
80422: NOT
80423: AND
80424: PUSH
80425: LD_VAR 0 3
80429: PPUSH
80430: CALL_OW 310
80434: NOT
80435: AND
80436: PUSH
80437: LD_VAR 0 3
80441: PUSH
80442: LD_EXP 50
80446: PUSH
80447: LD_VAR 0 2
80451: ARRAY
80452: PUSH
80453: LD_INT 1
80455: ARRAY
80456: IN
80457: NOT
80458: AND
80459: PUSH
80460: LD_VAR 0 3
80464: PUSH
80465: LD_EXP 50
80469: PUSH
80470: LD_VAR 0 2
80474: ARRAY
80475: PUSH
80476: LD_INT 2
80478: ARRAY
80479: IN
80480: NOT
80481: AND
80482: PUSH
80483: LD_VAR 0 3
80487: PUSH
80488: LD_EXP 59
80492: PUSH
80493: LD_VAR 0 2
80497: ARRAY
80498: IN
80499: NOT
80500: AND
80501: IFFALSE 80538
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
80503: LD_VAR 0 2
80507: PPUSH
80508: LD_EXP 47
80512: PUSH
80513: LD_VAR 0 2
80517: ARRAY
80518: PPUSH
80519: LD_VAR 0 3
80523: PPUSH
80524: LD_VAR 0 3
80528: PPUSH
80529: CALL_OW 257
80533: PPUSH
80534: CALL 79310 0 4
// end ;
80538: GO 80387
80540: POP
80541: POP
// end ;
80542: GO 80322
80544: POP
80545: POP
// end ;
80546: LD_VAR 0 1
80550: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
80551: LD_INT 0
80553: PPUSH
80554: PPUSH
80555: PPUSH
80556: PPUSH
80557: PPUSH
80558: PPUSH
// if not mc_bases [ base ] then
80559: LD_EXP 47
80563: PUSH
80564: LD_VAR 0 1
80568: ARRAY
80569: NOT
80570: IFFALSE 80574
// exit ;
80572: GO 80756
// tmp := [ ] ;
80574: LD_ADDR_VAR 0 6
80578: PUSH
80579: EMPTY
80580: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
80581: LD_ADDR_VAR 0 7
80585: PUSH
80586: LD_VAR 0 3
80590: PPUSH
80591: LD_INT 0
80593: PPUSH
80594: CALL_OW 517
80598: ST_TO_ADDR
// if not list then
80599: LD_VAR 0 7
80603: NOT
80604: IFFALSE 80608
// exit ;
80606: GO 80756
// for i = 1 to amount do
80608: LD_ADDR_VAR 0 5
80612: PUSH
80613: DOUBLE
80614: LD_INT 1
80616: DEC
80617: ST_TO_ADDR
80618: LD_VAR 0 2
80622: PUSH
80623: FOR_TO
80624: IFFALSE 80704
// begin x := rand ( 1 , list [ 1 ] ) ;
80626: LD_ADDR_VAR 0 8
80630: PUSH
80631: LD_INT 1
80633: PPUSH
80634: LD_VAR 0 7
80638: PUSH
80639: LD_INT 1
80641: ARRAY
80642: PPUSH
80643: CALL_OW 12
80647: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
80648: LD_ADDR_VAR 0 6
80652: PUSH
80653: LD_VAR 0 6
80657: PPUSH
80658: LD_VAR 0 5
80662: PPUSH
80663: LD_VAR 0 7
80667: PUSH
80668: LD_INT 1
80670: ARRAY
80671: PUSH
80672: LD_VAR 0 8
80676: ARRAY
80677: PUSH
80678: LD_VAR 0 7
80682: PUSH
80683: LD_INT 2
80685: ARRAY
80686: PUSH
80687: LD_VAR 0 8
80691: ARRAY
80692: PUSH
80693: EMPTY
80694: LIST
80695: LIST
80696: PPUSH
80697: CALL_OW 1
80701: ST_TO_ADDR
// end ;
80702: GO 80623
80704: POP
80705: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
80706: LD_ADDR_EXP 60
80710: PUSH
80711: LD_EXP 60
80715: PPUSH
80716: LD_VAR 0 1
80720: PPUSH
80721: LD_VAR 0 6
80725: PPUSH
80726: CALL_OW 1
80730: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
80731: LD_ADDR_EXP 62
80735: PUSH
80736: LD_EXP 62
80740: PPUSH
80741: LD_VAR 0 1
80745: PPUSH
80746: LD_VAR 0 3
80750: PPUSH
80751: CALL_OW 1
80755: ST_TO_ADDR
// end ;
80756: LD_VAR 0 4
80760: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
80761: LD_INT 0
80763: PPUSH
// if not mc_bases [ base ] then
80764: LD_EXP 47
80768: PUSH
80769: LD_VAR 0 1
80773: ARRAY
80774: NOT
80775: IFFALSE 80779
// exit ;
80777: GO 80804
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
80779: LD_ADDR_EXP 52
80783: PUSH
80784: LD_EXP 52
80788: PPUSH
80789: LD_VAR 0 1
80793: PPUSH
80794: LD_VAR 0 2
80798: PPUSH
80799: CALL_OW 1
80803: ST_TO_ADDR
// end ;
80804: LD_VAR 0 3
80808: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
80809: LD_INT 0
80811: PPUSH
// if not mc_bases [ base ] then
80812: LD_EXP 47
80816: PUSH
80817: LD_VAR 0 1
80821: ARRAY
80822: NOT
80823: IFFALSE 80827
// exit ;
80825: GO 80864
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
80827: LD_ADDR_EXP 52
80831: PUSH
80832: LD_EXP 52
80836: PPUSH
80837: LD_VAR 0 1
80841: PPUSH
80842: LD_EXP 52
80846: PUSH
80847: LD_VAR 0 1
80851: ARRAY
80852: PUSH
80853: LD_VAR 0 2
80857: UNION
80858: PPUSH
80859: CALL_OW 1
80863: ST_TO_ADDR
// end ;
80864: LD_VAR 0 3
80868: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
80869: LD_INT 0
80871: PPUSH
// if not mc_bases [ base ] then
80872: LD_EXP 47
80876: PUSH
80877: LD_VAR 0 1
80881: ARRAY
80882: NOT
80883: IFFALSE 80887
// exit ;
80885: GO 80912
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
80887: LD_ADDR_EXP 68
80891: PUSH
80892: LD_EXP 68
80896: PPUSH
80897: LD_VAR 0 1
80901: PPUSH
80902: LD_VAR 0 2
80906: PPUSH
80907: CALL_OW 1
80911: ST_TO_ADDR
// end ;
80912: LD_VAR 0 3
80916: RET
// export function MC_InsertProduceList ( base , components ) ; begin
80917: LD_INT 0
80919: PPUSH
// if not mc_bases [ base ] then
80920: LD_EXP 47
80924: PUSH
80925: LD_VAR 0 1
80929: ARRAY
80930: NOT
80931: IFFALSE 80935
// exit ;
80933: GO 80972
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
80935: LD_ADDR_EXP 68
80939: PUSH
80940: LD_EXP 68
80944: PPUSH
80945: LD_VAR 0 1
80949: PPUSH
80950: LD_EXP 68
80954: PUSH
80955: LD_VAR 0 1
80959: ARRAY
80960: PUSH
80961: LD_VAR 0 2
80965: ADD
80966: PPUSH
80967: CALL_OW 1
80971: ST_TO_ADDR
// end ;
80972: LD_VAR 0 3
80976: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
80977: LD_INT 0
80979: PPUSH
// if not mc_bases [ base ] then
80980: LD_EXP 47
80984: PUSH
80985: LD_VAR 0 1
80989: ARRAY
80990: NOT
80991: IFFALSE 80995
// exit ;
80993: GO 81049
// mc_defender := Replace ( mc_defender , base , deflist ) ;
80995: LD_ADDR_EXP 69
80999: PUSH
81000: LD_EXP 69
81004: PPUSH
81005: LD_VAR 0 1
81009: PPUSH
81010: LD_VAR 0 2
81014: PPUSH
81015: CALL_OW 1
81019: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
81020: LD_ADDR_EXP 58
81024: PUSH
81025: LD_EXP 58
81029: PPUSH
81030: LD_VAR 0 1
81034: PPUSH
81035: LD_VAR 0 2
81039: PUSH
81040: LD_INT 0
81042: PLUS
81043: PPUSH
81044: CALL_OW 1
81048: ST_TO_ADDR
// end ;
81049: LD_VAR 0 3
81053: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
81054: LD_INT 0
81056: PPUSH
// if not mc_bases [ base ] then
81057: LD_EXP 47
81061: PUSH
81062: LD_VAR 0 1
81066: ARRAY
81067: NOT
81068: IFFALSE 81072
// exit ;
81070: GO 81097
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
81072: LD_ADDR_EXP 58
81076: PUSH
81077: LD_EXP 58
81081: PPUSH
81082: LD_VAR 0 1
81086: PPUSH
81087: LD_VAR 0 2
81091: PPUSH
81092: CALL_OW 1
81096: ST_TO_ADDR
// end ;
81097: LD_VAR 0 3
81101: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
81102: LD_INT 0
81104: PPUSH
81105: PPUSH
81106: PPUSH
81107: PPUSH
// if not mc_bases [ base ] then
81108: LD_EXP 47
81112: PUSH
81113: LD_VAR 0 1
81117: ARRAY
81118: NOT
81119: IFFALSE 81123
// exit ;
81121: GO 81188
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
81123: LD_ADDR_EXP 67
81127: PUSH
81128: LD_EXP 67
81132: PPUSH
81133: LD_VAR 0 1
81137: PUSH
81138: LD_EXP 67
81142: PUSH
81143: LD_VAR 0 1
81147: ARRAY
81148: PUSH
81149: LD_INT 1
81151: PLUS
81152: PUSH
81153: EMPTY
81154: LIST
81155: LIST
81156: PPUSH
81157: LD_VAR 0 1
81161: PUSH
81162: LD_VAR 0 2
81166: PUSH
81167: LD_VAR 0 3
81171: PUSH
81172: LD_VAR 0 4
81176: PUSH
81177: EMPTY
81178: LIST
81179: LIST
81180: LIST
81181: LIST
81182: PPUSH
81183: CALL 24315 0 3
81187: ST_TO_ADDR
// end ;
81188: LD_VAR 0 5
81192: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
81193: LD_INT 0
81195: PPUSH
// if not mc_bases [ base ] then
81196: LD_EXP 47
81200: PUSH
81201: LD_VAR 0 1
81205: ARRAY
81206: NOT
81207: IFFALSE 81211
// exit ;
81209: GO 81236
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
81211: LD_ADDR_EXP 84
81215: PUSH
81216: LD_EXP 84
81220: PPUSH
81221: LD_VAR 0 1
81225: PPUSH
81226: LD_VAR 0 2
81230: PPUSH
81231: CALL_OW 1
81235: ST_TO_ADDR
// end ;
81236: LD_VAR 0 3
81240: RET
// export function MC_GetMinesField ( base ) ; begin
81241: LD_INT 0
81243: PPUSH
// result := mc_mines [ base ] ;
81244: LD_ADDR_VAR 0 2
81248: PUSH
81249: LD_EXP 60
81253: PUSH
81254: LD_VAR 0 1
81258: ARRAY
81259: ST_TO_ADDR
// end ;
81260: LD_VAR 0 2
81264: RET
// export function MC_GetProduceList ( base ) ; begin
81265: LD_INT 0
81267: PPUSH
// result := mc_produce [ base ] ;
81268: LD_ADDR_VAR 0 2
81272: PUSH
81273: LD_EXP 68
81277: PUSH
81278: LD_VAR 0 1
81282: ARRAY
81283: ST_TO_ADDR
// end ;
81284: LD_VAR 0 2
81288: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
81289: LD_INT 0
81291: PPUSH
81292: PPUSH
// if not mc_bases then
81293: LD_EXP 47
81297: NOT
81298: IFFALSE 81302
// exit ;
81300: GO 81367
// if mc_bases [ base ] then
81302: LD_EXP 47
81306: PUSH
81307: LD_VAR 0 1
81311: ARRAY
81312: IFFALSE 81367
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
81314: LD_ADDR_VAR 0 3
81318: PUSH
81319: LD_EXP 47
81323: PUSH
81324: LD_VAR 0 1
81328: ARRAY
81329: PPUSH
81330: LD_INT 30
81332: PUSH
81333: LD_VAR 0 2
81337: PUSH
81338: EMPTY
81339: LIST
81340: LIST
81341: PPUSH
81342: CALL_OW 72
81346: ST_TO_ADDR
// if result then
81347: LD_VAR 0 3
81351: IFFALSE 81367
// result := result [ 1 ] ;
81353: LD_ADDR_VAR 0 3
81357: PUSH
81358: LD_VAR 0 3
81362: PUSH
81363: LD_INT 1
81365: ARRAY
81366: ST_TO_ADDR
// end ; end ;
81367: LD_VAR 0 3
81371: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
81372: LD_INT 0
81374: PPUSH
81375: PPUSH
// if not mc_bases then
81376: LD_EXP 47
81380: NOT
81381: IFFALSE 81385
// exit ;
81383: GO 81430
// if mc_bases [ base ] then
81385: LD_EXP 47
81389: PUSH
81390: LD_VAR 0 1
81394: ARRAY
81395: IFFALSE 81430
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
81397: LD_ADDR_VAR 0 3
81401: PUSH
81402: LD_EXP 47
81406: PUSH
81407: LD_VAR 0 1
81411: ARRAY
81412: PPUSH
81413: LD_INT 30
81415: PUSH
81416: LD_VAR 0 2
81420: PUSH
81421: EMPTY
81422: LIST
81423: LIST
81424: PPUSH
81425: CALL_OW 72
81429: ST_TO_ADDR
// end ;
81430: LD_VAR 0 3
81434: RET
// export function MC_SetTame ( base , area ) ; begin
81435: LD_INT 0
81437: PPUSH
// if not mc_bases or not base then
81438: LD_EXP 47
81442: NOT
81443: PUSH
81444: LD_VAR 0 1
81448: NOT
81449: OR
81450: IFFALSE 81454
// exit ;
81452: GO 81479
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
81454: LD_ADDR_EXP 75
81458: PUSH
81459: LD_EXP 75
81463: PPUSH
81464: LD_VAR 0 1
81468: PPUSH
81469: LD_VAR 0 2
81473: PPUSH
81474: CALL_OW 1
81478: ST_TO_ADDR
// end ;
81479: LD_VAR 0 3
81483: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
81484: LD_INT 0
81486: PPUSH
81487: PPUSH
// if not mc_bases or not base then
81488: LD_EXP 47
81492: NOT
81493: PUSH
81494: LD_VAR 0 1
81498: NOT
81499: OR
81500: IFFALSE 81504
// exit ;
81502: GO 81606
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
81504: LD_ADDR_VAR 0 4
81508: PUSH
81509: LD_EXP 47
81513: PUSH
81514: LD_VAR 0 1
81518: ARRAY
81519: PPUSH
81520: LD_INT 30
81522: PUSH
81523: LD_VAR 0 2
81527: PUSH
81528: EMPTY
81529: LIST
81530: LIST
81531: PPUSH
81532: CALL_OW 72
81536: ST_TO_ADDR
// if not tmp then
81537: LD_VAR 0 4
81541: NOT
81542: IFFALSE 81546
// exit ;
81544: GO 81606
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
81546: LD_ADDR_EXP 79
81550: PUSH
81551: LD_EXP 79
81555: PPUSH
81556: LD_VAR 0 1
81560: PPUSH
81561: LD_EXP 79
81565: PUSH
81566: LD_VAR 0 1
81570: ARRAY
81571: PPUSH
81572: LD_EXP 79
81576: PUSH
81577: LD_VAR 0 1
81581: ARRAY
81582: PUSH
81583: LD_INT 1
81585: PLUS
81586: PPUSH
81587: LD_VAR 0 4
81591: PUSH
81592: LD_INT 1
81594: ARRAY
81595: PPUSH
81596: CALL_OW 2
81600: PPUSH
81601: CALL_OW 1
81605: ST_TO_ADDR
// end ;
81606: LD_VAR 0 3
81610: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
81611: LD_INT 0
81613: PPUSH
81614: PPUSH
// if not mc_bases or not base or not kinds then
81615: LD_EXP 47
81619: NOT
81620: PUSH
81621: LD_VAR 0 1
81625: NOT
81626: OR
81627: PUSH
81628: LD_VAR 0 2
81632: NOT
81633: OR
81634: IFFALSE 81638
// exit ;
81636: GO 81699
// for i in kinds do
81638: LD_ADDR_VAR 0 4
81642: PUSH
81643: LD_VAR 0 2
81647: PUSH
81648: FOR_IN
81649: IFFALSE 81697
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
81651: LD_ADDR_EXP 81
81655: PUSH
81656: LD_EXP 81
81660: PPUSH
81661: LD_VAR 0 1
81665: PUSH
81666: LD_EXP 81
81670: PUSH
81671: LD_VAR 0 1
81675: ARRAY
81676: PUSH
81677: LD_INT 1
81679: PLUS
81680: PUSH
81681: EMPTY
81682: LIST
81683: LIST
81684: PPUSH
81685: LD_VAR 0 4
81689: PPUSH
81690: CALL 24315 0 3
81694: ST_TO_ADDR
81695: GO 81648
81697: POP
81698: POP
// end ;
81699: LD_VAR 0 3
81703: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
81704: LD_INT 0
81706: PPUSH
// if not mc_bases or not base or not areas then
81707: LD_EXP 47
81711: NOT
81712: PUSH
81713: LD_VAR 0 1
81717: NOT
81718: OR
81719: PUSH
81720: LD_VAR 0 2
81724: NOT
81725: OR
81726: IFFALSE 81730
// exit ;
81728: GO 81755
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
81730: LD_ADDR_EXP 65
81734: PUSH
81735: LD_EXP 65
81739: PPUSH
81740: LD_VAR 0 1
81744: PPUSH
81745: LD_VAR 0 2
81749: PPUSH
81750: CALL_OW 1
81754: ST_TO_ADDR
// end ;
81755: LD_VAR 0 3
81759: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
81760: LD_INT 0
81762: PPUSH
// if not mc_bases or not base or not teleports_exit then
81763: LD_EXP 47
81767: NOT
81768: PUSH
81769: LD_VAR 0 1
81773: NOT
81774: OR
81775: PUSH
81776: LD_VAR 0 2
81780: NOT
81781: OR
81782: IFFALSE 81786
// exit ;
81784: GO 81811
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
81786: LD_ADDR_EXP 82
81790: PUSH
81791: LD_EXP 82
81795: PPUSH
81796: LD_VAR 0 1
81800: PPUSH
81801: LD_VAR 0 2
81805: PPUSH
81806: CALL_OW 1
81810: ST_TO_ADDR
// end ;
81811: LD_VAR 0 3
81815: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
81816: LD_INT 0
81818: PPUSH
81819: PPUSH
81820: PPUSH
// if not mc_bases or not base or not ext_list then
81821: LD_EXP 47
81825: NOT
81826: PUSH
81827: LD_VAR 0 1
81831: NOT
81832: OR
81833: PUSH
81834: LD_VAR 0 5
81838: NOT
81839: OR
81840: IFFALSE 81844
// exit ;
81842: GO 82017
// tmp := GetFacExtXYD ( x , y , d ) ;
81844: LD_ADDR_VAR 0 8
81848: PUSH
81849: LD_VAR 0 2
81853: PPUSH
81854: LD_VAR 0 3
81858: PPUSH
81859: LD_VAR 0 4
81863: PPUSH
81864: CALL 53327 0 3
81868: ST_TO_ADDR
// if not tmp then
81869: LD_VAR 0 8
81873: NOT
81874: IFFALSE 81878
// exit ;
81876: GO 82017
// for i in tmp do
81878: LD_ADDR_VAR 0 7
81882: PUSH
81883: LD_VAR 0 8
81887: PUSH
81888: FOR_IN
81889: IFFALSE 82015
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
81891: LD_ADDR_EXP 52
81895: PUSH
81896: LD_EXP 52
81900: PPUSH
81901: LD_VAR 0 1
81905: PPUSH
81906: LD_EXP 52
81910: PUSH
81911: LD_VAR 0 1
81915: ARRAY
81916: PPUSH
81917: LD_EXP 52
81921: PUSH
81922: LD_VAR 0 1
81926: ARRAY
81927: PUSH
81928: LD_INT 1
81930: PLUS
81931: PPUSH
81932: LD_VAR 0 5
81936: PUSH
81937: LD_INT 1
81939: ARRAY
81940: PUSH
81941: LD_VAR 0 7
81945: PUSH
81946: LD_INT 1
81948: ARRAY
81949: PUSH
81950: LD_VAR 0 7
81954: PUSH
81955: LD_INT 2
81957: ARRAY
81958: PUSH
81959: LD_VAR 0 7
81963: PUSH
81964: LD_INT 3
81966: ARRAY
81967: PUSH
81968: EMPTY
81969: LIST
81970: LIST
81971: LIST
81972: LIST
81973: PPUSH
81974: CALL_OW 2
81978: PPUSH
81979: CALL_OW 1
81983: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
81984: LD_ADDR_VAR 0 5
81988: PUSH
81989: LD_VAR 0 5
81993: PPUSH
81994: LD_INT 1
81996: PPUSH
81997: CALL_OW 3
82001: ST_TO_ADDR
// if not ext_list then
82002: LD_VAR 0 5
82006: NOT
82007: IFFALSE 82013
// exit ;
82009: POP
82010: POP
82011: GO 82017
// end ;
82013: GO 81888
82015: POP
82016: POP
// end ;
82017: LD_VAR 0 6
82021: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
82022: LD_INT 0
82024: PPUSH
// if not mc_bases or not base or not weapon_list then
82025: LD_EXP 47
82029: NOT
82030: PUSH
82031: LD_VAR 0 1
82035: NOT
82036: OR
82037: PUSH
82038: LD_VAR 0 2
82042: NOT
82043: OR
82044: IFFALSE 82048
// exit ;
82046: GO 82073
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
82048: LD_ADDR_EXP 86
82052: PUSH
82053: LD_EXP 86
82057: PPUSH
82058: LD_VAR 0 1
82062: PPUSH
82063: LD_VAR 0 2
82067: PPUSH
82068: CALL_OW 1
82072: ST_TO_ADDR
// end ;
82073: LD_VAR 0 3
82077: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
82078: LD_INT 0
82080: PPUSH
// if not mc_bases or not base or not tech_list then
82081: LD_EXP 47
82085: NOT
82086: PUSH
82087: LD_VAR 0 1
82091: NOT
82092: OR
82093: PUSH
82094: LD_VAR 0 2
82098: NOT
82099: OR
82100: IFFALSE 82104
// exit ;
82102: GO 82129
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
82104: LD_ADDR_EXP 74
82108: PUSH
82109: LD_EXP 74
82113: PPUSH
82114: LD_VAR 0 1
82118: PPUSH
82119: LD_VAR 0 2
82123: PPUSH
82124: CALL_OW 1
82128: ST_TO_ADDR
// end ;
82129: LD_VAR 0 3
82133: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
82134: LD_INT 0
82136: PPUSH
// if not mc_bases or not parking_area or not base then
82137: LD_EXP 47
82141: NOT
82142: PUSH
82143: LD_VAR 0 2
82147: NOT
82148: OR
82149: PUSH
82150: LD_VAR 0 1
82154: NOT
82155: OR
82156: IFFALSE 82160
// exit ;
82158: GO 82185
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
82160: LD_ADDR_EXP 71
82164: PUSH
82165: LD_EXP 71
82169: PPUSH
82170: LD_VAR 0 1
82174: PPUSH
82175: LD_VAR 0 2
82179: PPUSH
82180: CALL_OW 1
82184: ST_TO_ADDR
// end ;
82185: LD_VAR 0 3
82189: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
82190: LD_INT 0
82192: PPUSH
// if not mc_bases or not base or not scan_area then
82193: LD_EXP 47
82197: NOT
82198: PUSH
82199: LD_VAR 0 1
82203: NOT
82204: OR
82205: PUSH
82206: LD_VAR 0 2
82210: NOT
82211: OR
82212: IFFALSE 82216
// exit ;
82214: GO 82241
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
82216: LD_ADDR_EXP 72
82220: PUSH
82221: LD_EXP 72
82225: PPUSH
82226: LD_VAR 0 1
82230: PPUSH
82231: LD_VAR 0 2
82235: PPUSH
82236: CALL_OW 1
82240: ST_TO_ADDR
// end ;
82241: LD_VAR 0 3
82245: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
82246: LD_INT 0
82248: PPUSH
82249: PPUSH
// if not mc_bases or not base then
82250: LD_EXP 47
82254: NOT
82255: PUSH
82256: LD_VAR 0 1
82260: NOT
82261: OR
82262: IFFALSE 82266
// exit ;
82264: GO 82330
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
82266: LD_ADDR_VAR 0 3
82270: PUSH
82271: LD_INT 1
82273: PUSH
82274: LD_INT 2
82276: PUSH
82277: LD_INT 3
82279: PUSH
82280: LD_INT 4
82282: PUSH
82283: LD_INT 11
82285: PUSH
82286: EMPTY
82287: LIST
82288: LIST
82289: LIST
82290: LIST
82291: LIST
82292: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
82293: LD_ADDR_EXP 74
82297: PUSH
82298: LD_EXP 74
82302: PPUSH
82303: LD_VAR 0 1
82307: PPUSH
82308: LD_EXP 74
82312: PUSH
82313: LD_VAR 0 1
82317: ARRAY
82318: PUSH
82319: LD_VAR 0 3
82323: DIFF
82324: PPUSH
82325: CALL_OW 1
82329: ST_TO_ADDR
// end ;
82330: LD_VAR 0 2
82334: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
82335: LD_INT 0
82337: PPUSH
// result := mc_vehicles [ base ] ;
82338: LD_ADDR_VAR 0 3
82342: PUSH
82343: LD_EXP 66
82347: PUSH
82348: LD_VAR 0 1
82352: ARRAY
82353: ST_TO_ADDR
// if onlyCombat then
82354: LD_VAR 0 2
82358: IFFALSE 82536
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
82360: LD_ADDR_VAR 0 3
82364: PUSH
82365: LD_VAR 0 3
82369: PUSH
82370: LD_VAR 0 3
82374: PPUSH
82375: LD_INT 2
82377: PUSH
82378: LD_INT 34
82380: PUSH
82381: LD_INT 12
82383: PUSH
82384: EMPTY
82385: LIST
82386: LIST
82387: PUSH
82388: LD_INT 34
82390: PUSH
82391: LD_INT 51
82393: PUSH
82394: EMPTY
82395: LIST
82396: LIST
82397: PUSH
82398: LD_INT 34
82400: PUSH
82401: LD_EXP 30
82405: PUSH
82406: EMPTY
82407: LIST
82408: LIST
82409: PUSH
82410: LD_INT 34
82412: PUSH
82413: LD_INT 32
82415: PUSH
82416: EMPTY
82417: LIST
82418: LIST
82419: PUSH
82420: LD_INT 34
82422: PUSH
82423: LD_INT 13
82425: PUSH
82426: EMPTY
82427: LIST
82428: LIST
82429: PUSH
82430: LD_INT 34
82432: PUSH
82433: LD_INT 52
82435: PUSH
82436: EMPTY
82437: LIST
82438: LIST
82439: PUSH
82440: LD_INT 34
82442: PUSH
82443: LD_EXP 35
82447: PUSH
82448: EMPTY
82449: LIST
82450: LIST
82451: PUSH
82452: LD_INT 34
82454: PUSH
82455: LD_INT 14
82457: PUSH
82458: EMPTY
82459: LIST
82460: LIST
82461: PUSH
82462: LD_INT 34
82464: PUSH
82465: LD_INT 53
82467: PUSH
82468: EMPTY
82469: LIST
82470: LIST
82471: PUSH
82472: LD_INT 34
82474: PUSH
82475: LD_EXP 29
82479: PUSH
82480: EMPTY
82481: LIST
82482: LIST
82483: PUSH
82484: LD_INT 34
82486: PUSH
82487: LD_INT 31
82489: PUSH
82490: EMPTY
82491: LIST
82492: LIST
82493: PUSH
82494: LD_INT 34
82496: PUSH
82497: LD_INT 48
82499: PUSH
82500: EMPTY
82501: LIST
82502: LIST
82503: PUSH
82504: LD_INT 34
82506: PUSH
82507: LD_INT 8
82509: PUSH
82510: EMPTY
82511: LIST
82512: LIST
82513: PUSH
82514: EMPTY
82515: LIST
82516: LIST
82517: LIST
82518: LIST
82519: LIST
82520: LIST
82521: LIST
82522: LIST
82523: LIST
82524: LIST
82525: LIST
82526: LIST
82527: LIST
82528: LIST
82529: PPUSH
82530: CALL_OW 72
82534: DIFF
82535: ST_TO_ADDR
// end ; end_of_file
82536: LD_VAR 0 3
82540: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
82541: LD_INT 0
82543: PPUSH
82544: PPUSH
82545: PPUSH
// if not mc_bases or not skirmish then
82546: LD_EXP 47
82550: NOT
82551: PUSH
82552: LD_EXP 45
82556: NOT
82557: OR
82558: IFFALSE 82562
// exit ;
82560: GO 82727
// for i = 1 to mc_bases do
82562: LD_ADDR_VAR 0 4
82566: PUSH
82567: DOUBLE
82568: LD_INT 1
82570: DEC
82571: ST_TO_ADDR
82572: LD_EXP 47
82576: PUSH
82577: FOR_TO
82578: IFFALSE 82725
// begin if sci in mc_bases [ i ] then
82580: LD_VAR 0 2
82584: PUSH
82585: LD_EXP 47
82589: PUSH
82590: LD_VAR 0 4
82594: ARRAY
82595: IN
82596: IFFALSE 82723
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
82598: LD_ADDR_EXP 76
82602: PUSH
82603: LD_EXP 76
82607: PPUSH
82608: LD_VAR 0 4
82612: PUSH
82613: LD_EXP 76
82617: PUSH
82618: LD_VAR 0 4
82622: ARRAY
82623: PUSH
82624: LD_INT 1
82626: PLUS
82627: PUSH
82628: EMPTY
82629: LIST
82630: LIST
82631: PPUSH
82632: LD_VAR 0 1
82636: PPUSH
82637: CALL 24315 0 3
82641: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
82642: LD_ADDR_VAR 0 5
82646: PUSH
82647: LD_EXP 47
82651: PUSH
82652: LD_VAR 0 4
82656: ARRAY
82657: PPUSH
82658: LD_INT 2
82660: PUSH
82661: LD_INT 30
82663: PUSH
82664: LD_INT 0
82666: PUSH
82667: EMPTY
82668: LIST
82669: LIST
82670: PUSH
82671: LD_INT 30
82673: PUSH
82674: LD_INT 1
82676: PUSH
82677: EMPTY
82678: LIST
82679: LIST
82680: PUSH
82681: EMPTY
82682: LIST
82683: LIST
82684: LIST
82685: PPUSH
82686: CALL_OW 72
82690: PPUSH
82691: LD_VAR 0 1
82695: PPUSH
82696: CALL_OW 74
82700: ST_TO_ADDR
// if tmp then
82701: LD_VAR 0 5
82705: IFFALSE 82721
// ComStandNearbyBuilding ( ape , tmp ) ;
82707: LD_VAR 0 1
82711: PPUSH
82712: LD_VAR 0 5
82716: PPUSH
82717: CALL 20929 0 2
// break ;
82721: GO 82725
// end ; end ;
82723: GO 82577
82725: POP
82726: POP
// end ;
82727: LD_VAR 0 3
82731: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
82732: LD_INT 0
82734: PPUSH
82735: PPUSH
82736: PPUSH
// if not mc_bases or not skirmish then
82737: LD_EXP 47
82741: NOT
82742: PUSH
82743: LD_EXP 45
82747: NOT
82748: OR
82749: IFFALSE 82753
// exit ;
82751: GO 82842
// for i = 1 to mc_bases do
82753: LD_ADDR_VAR 0 4
82757: PUSH
82758: DOUBLE
82759: LD_INT 1
82761: DEC
82762: ST_TO_ADDR
82763: LD_EXP 47
82767: PUSH
82768: FOR_TO
82769: IFFALSE 82840
// begin if building in mc_busy_turret_list [ i ] then
82771: LD_VAR 0 1
82775: PUSH
82776: LD_EXP 57
82780: PUSH
82781: LD_VAR 0 4
82785: ARRAY
82786: IN
82787: IFFALSE 82838
// begin tmp := mc_busy_turret_list [ i ] diff building ;
82789: LD_ADDR_VAR 0 5
82793: PUSH
82794: LD_EXP 57
82798: PUSH
82799: LD_VAR 0 4
82803: ARRAY
82804: PUSH
82805: LD_VAR 0 1
82809: DIFF
82810: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
82811: LD_ADDR_EXP 57
82815: PUSH
82816: LD_EXP 57
82820: PPUSH
82821: LD_VAR 0 4
82825: PPUSH
82826: LD_VAR 0 5
82830: PPUSH
82831: CALL_OW 1
82835: ST_TO_ADDR
// break ;
82836: GO 82840
// end ; end ;
82838: GO 82768
82840: POP
82841: POP
// end ;
82842: LD_VAR 0 3
82846: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
82847: LD_INT 0
82849: PPUSH
82850: PPUSH
82851: PPUSH
// if not mc_bases or not skirmish then
82852: LD_EXP 47
82856: NOT
82857: PUSH
82858: LD_EXP 45
82862: NOT
82863: OR
82864: IFFALSE 82868
// exit ;
82866: GO 83067
// for i = 1 to mc_bases do
82868: LD_ADDR_VAR 0 5
82872: PUSH
82873: DOUBLE
82874: LD_INT 1
82876: DEC
82877: ST_TO_ADDR
82878: LD_EXP 47
82882: PUSH
82883: FOR_TO
82884: IFFALSE 83065
// if building in mc_bases [ i ] then
82886: LD_VAR 0 1
82890: PUSH
82891: LD_EXP 47
82895: PUSH
82896: LD_VAR 0 5
82900: ARRAY
82901: IN
82902: IFFALSE 83063
// begin tmp := mc_bases [ i ] diff building ;
82904: LD_ADDR_VAR 0 6
82908: PUSH
82909: LD_EXP 47
82913: PUSH
82914: LD_VAR 0 5
82918: ARRAY
82919: PUSH
82920: LD_VAR 0 1
82924: DIFF
82925: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
82926: LD_ADDR_EXP 47
82930: PUSH
82931: LD_EXP 47
82935: PPUSH
82936: LD_VAR 0 5
82940: PPUSH
82941: LD_VAR 0 6
82945: PPUSH
82946: CALL_OW 1
82950: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
82951: LD_VAR 0 1
82955: PUSH
82956: LD_EXP 55
82960: PUSH
82961: LD_VAR 0 5
82965: ARRAY
82966: IN
82967: IFFALSE 83006
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
82969: LD_ADDR_EXP 55
82973: PUSH
82974: LD_EXP 55
82978: PPUSH
82979: LD_VAR 0 5
82983: PPUSH
82984: LD_EXP 55
82988: PUSH
82989: LD_VAR 0 5
82993: ARRAY
82994: PUSH
82995: LD_VAR 0 1
82999: DIFF
83000: PPUSH
83001: CALL_OW 1
83005: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
83006: LD_VAR 0 1
83010: PUSH
83011: LD_EXP 56
83015: PUSH
83016: LD_VAR 0 5
83020: ARRAY
83021: IN
83022: IFFALSE 83061
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
83024: LD_ADDR_EXP 56
83028: PUSH
83029: LD_EXP 56
83033: PPUSH
83034: LD_VAR 0 5
83038: PPUSH
83039: LD_EXP 56
83043: PUSH
83044: LD_VAR 0 5
83048: ARRAY
83049: PUSH
83050: LD_VAR 0 1
83054: DIFF
83055: PPUSH
83056: CALL_OW 1
83060: ST_TO_ADDR
// break ;
83061: GO 83065
// end ;
83063: GO 82883
83065: POP
83066: POP
// end ;
83067: LD_VAR 0 4
83071: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
83072: LD_INT 0
83074: PPUSH
83075: PPUSH
83076: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
83077: LD_EXP 47
83081: NOT
83082: PUSH
83083: LD_EXP 45
83087: NOT
83088: OR
83089: PUSH
83090: LD_VAR 0 3
83094: PUSH
83095: LD_EXP 73
83099: IN
83100: NOT
83101: OR
83102: IFFALSE 83106
// exit ;
83104: GO 83229
// for i = 1 to mc_vehicles do
83106: LD_ADDR_VAR 0 6
83110: PUSH
83111: DOUBLE
83112: LD_INT 1
83114: DEC
83115: ST_TO_ADDR
83116: LD_EXP 66
83120: PUSH
83121: FOR_TO
83122: IFFALSE 83227
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
83124: LD_VAR 0 2
83128: PUSH
83129: LD_EXP 66
83133: PUSH
83134: LD_VAR 0 6
83138: ARRAY
83139: IN
83140: PUSH
83141: LD_VAR 0 1
83145: PUSH
83146: LD_EXP 66
83150: PUSH
83151: LD_VAR 0 6
83155: ARRAY
83156: IN
83157: OR
83158: IFFALSE 83225
// begin tmp := mc_vehicles [ i ] diff old ;
83160: LD_ADDR_VAR 0 7
83164: PUSH
83165: LD_EXP 66
83169: PUSH
83170: LD_VAR 0 6
83174: ARRAY
83175: PUSH
83176: LD_VAR 0 2
83180: DIFF
83181: ST_TO_ADDR
// tmp := tmp diff new ;
83182: LD_ADDR_VAR 0 7
83186: PUSH
83187: LD_VAR 0 7
83191: PUSH
83192: LD_VAR 0 1
83196: DIFF
83197: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
83198: LD_ADDR_EXP 66
83202: PUSH
83203: LD_EXP 66
83207: PPUSH
83208: LD_VAR 0 6
83212: PPUSH
83213: LD_VAR 0 7
83217: PPUSH
83218: CALL_OW 1
83222: ST_TO_ADDR
// break ;
83223: GO 83227
// end ;
83225: GO 83121
83227: POP
83228: POP
// end ;
83229: LD_VAR 0 5
83233: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
83234: LD_INT 0
83236: PPUSH
83237: PPUSH
83238: PPUSH
83239: PPUSH
// if not mc_bases or not skirmish then
83240: LD_EXP 47
83244: NOT
83245: PUSH
83246: LD_EXP 45
83250: NOT
83251: OR
83252: IFFALSE 83256
// exit ;
83254: GO 83639
// side := GetSide ( vehicle ) ;
83256: LD_ADDR_VAR 0 5
83260: PUSH
83261: LD_VAR 0 1
83265: PPUSH
83266: CALL_OW 255
83270: ST_TO_ADDR
// for i = 1 to mc_bases do
83271: LD_ADDR_VAR 0 4
83275: PUSH
83276: DOUBLE
83277: LD_INT 1
83279: DEC
83280: ST_TO_ADDR
83281: LD_EXP 47
83285: PUSH
83286: FOR_TO
83287: IFFALSE 83637
// begin if factory in mc_bases [ i ] then
83289: LD_VAR 0 2
83293: PUSH
83294: LD_EXP 47
83298: PUSH
83299: LD_VAR 0 4
83303: ARRAY
83304: IN
83305: IFFALSE 83635
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ar_crane , ru_siberium_rocket , us_siberium_rocket ] then
83307: LD_EXP 69
83311: PUSH
83312: LD_VAR 0 4
83316: ARRAY
83317: PUSH
83318: LD_EXP 58
83322: PUSH
83323: LD_VAR 0 4
83327: ARRAY
83328: LESS
83329: PUSH
83330: LD_VAR 0 1
83334: PPUSH
83335: CALL_OW 264
83339: PUSH
83340: LD_INT 31
83342: PUSH
83343: LD_INT 32
83345: PUSH
83346: LD_INT 51
83348: PUSH
83349: LD_EXP 30
83353: PUSH
83354: LD_INT 12
83356: PUSH
83357: LD_INT 30
83359: PUSH
83360: LD_EXP 29
83364: PUSH
83365: LD_INT 11
83367: PUSH
83368: LD_INT 53
83370: PUSH
83371: LD_INT 14
83373: PUSH
83374: LD_EXP 33
83378: PUSH
83379: LD_INT 29
83381: PUSH
83382: LD_EXP 31
83386: PUSH
83387: LD_INT 13
83389: PUSH
83390: LD_INT 52
83392: PUSH
83393: LD_EXP 35
83397: PUSH
83398: LD_INT 48
83400: PUSH
83401: LD_INT 8
83403: PUSH
83404: EMPTY
83405: LIST
83406: LIST
83407: LIST
83408: LIST
83409: LIST
83410: LIST
83411: LIST
83412: LIST
83413: LIST
83414: LIST
83415: LIST
83416: LIST
83417: LIST
83418: LIST
83419: LIST
83420: LIST
83421: LIST
83422: LIST
83423: IN
83424: NOT
83425: AND
83426: IFFALSE 83474
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
83428: LD_ADDR_EXP 69
83432: PUSH
83433: LD_EXP 69
83437: PPUSH
83438: LD_VAR 0 4
83442: PUSH
83443: LD_EXP 69
83447: PUSH
83448: LD_VAR 0 4
83452: ARRAY
83453: PUSH
83454: LD_INT 1
83456: PLUS
83457: PUSH
83458: EMPTY
83459: LIST
83460: LIST
83461: PPUSH
83462: LD_VAR 0 1
83466: PPUSH
83467: CALL 24315 0 3
83471: ST_TO_ADDR
83472: GO 83518
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
83474: LD_ADDR_EXP 66
83478: PUSH
83479: LD_EXP 66
83483: PPUSH
83484: LD_VAR 0 4
83488: PUSH
83489: LD_EXP 66
83493: PUSH
83494: LD_VAR 0 4
83498: ARRAY
83499: PUSH
83500: LD_INT 1
83502: PLUS
83503: PUSH
83504: EMPTY
83505: LIST
83506: LIST
83507: PPUSH
83508: LD_VAR 0 1
83512: PPUSH
83513: CALL 24315 0 3
83517: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
83518: LD_VAR 0 1
83522: PPUSH
83523: CALL_OW 263
83527: PUSH
83528: LD_INT 2
83530: EQUAL
83531: IFFALSE 83551
// begin repeat wait ( 0 0$1 ) ;
83533: LD_INT 35
83535: PPUSH
83536: CALL_OW 67
// until IsControledBy ( vehicle ) ;
83540: LD_VAR 0 1
83544: PPUSH
83545: CALL_OW 312
83549: IFFALSE 83533
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
83551: LD_VAR 0 1
83555: PPUSH
83556: LD_EXP 71
83560: PUSH
83561: LD_VAR 0 4
83565: ARRAY
83566: PPUSH
83567: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
83571: LD_VAR 0 1
83575: PPUSH
83576: CALL_OW 263
83580: PUSH
83581: LD_INT 1
83583: NONEQUAL
83584: IFFALSE 83588
// break ;
83586: GO 83637
// repeat wait ( 0 0$1 ) ;
83588: LD_INT 35
83590: PPUSH
83591: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
83595: LD_VAR 0 1
83599: PPUSH
83600: LD_EXP 71
83604: PUSH
83605: LD_VAR 0 4
83609: ARRAY
83610: PPUSH
83611: CALL_OW 308
83615: IFFALSE 83588
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
83617: LD_VAR 0 1
83621: PPUSH
83622: CALL_OW 311
83626: PPUSH
83627: CALL_OW 121
// exit ;
83631: POP
83632: POP
83633: GO 83639
// end ; end ;
83635: GO 83286
83637: POP
83638: POP
// end ;
83639: LD_VAR 0 3
83643: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
83644: LD_INT 0
83646: PPUSH
83647: PPUSH
83648: PPUSH
83649: PPUSH
// if not mc_bases or not skirmish then
83650: LD_EXP 47
83654: NOT
83655: PUSH
83656: LD_EXP 45
83660: NOT
83661: OR
83662: IFFALSE 83666
// exit ;
83664: GO 84019
// repeat wait ( 0 0$1 ) ;
83666: LD_INT 35
83668: PPUSH
83669: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
83673: LD_VAR 0 2
83677: PPUSH
83678: LD_VAR 0 3
83682: PPUSH
83683: CALL_OW 284
83687: IFFALSE 83666
// if GetResourceTypeXY ( x , y ) = mat_artefact then
83689: LD_VAR 0 2
83693: PPUSH
83694: LD_VAR 0 3
83698: PPUSH
83699: CALL_OW 283
83703: PUSH
83704: LD_INT 4
83706: EQUAL
83707: IFFALSE 83711
// exit ;
83709: GO 84019
// for i = 1 to mc_bases do
83711: LD_ADDR_VAR 0 7
83715: PUSH
83716: DOUBLE
83717: LD_INT 1
83719: DEC
83720: ST_TO_ADDR
83721: LD_EXP 47
83725: PUSH
83726: FOR_TO
83727: IFFALSE 84017
// begin if mc_crates_area [ i ] then
83729: LD_EXP 65
83733: PUSH
83734: LD_VAR 0 7
83738: ARRAY
83739: IFFALSE 83850
// for j in mc_crates_area [ i ] do
83741: LD_ADDR_VAR 0 8
83745: PUSH
83746: LD_EXP 65
83750: PUSH
83751: LD_VAR 0 7
83755: ARRAY
83756: PUSH
83757: FOR_IN
83758: IFFALSE 83848
// if InArea ( x , y , j ) then
83760: LD_VAR 0 2
83764: PPUSH
83765: LD_VAR 0 3
83769: PPUSH
83770: LD_VAR 0 8
83774: PPUSH
83775: CALL_OW 309
83779: IFFALSE 83846
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
83781: LD_ADDR_EXP 63
83785: PUSH
83786: LD_EXP 63
83790: PPUSH
83791: LD_VAR 0 7
83795: PUSH
83796: LD_EXP 63
83800: PUSH
83801: LD_VAR 0 7
83805: ARRAY
83806: PUSH
83807: LD_INT 1
83809: PLUS
83810: PUSH
83811: EMPTY
83812: LIST
83813: LIST
83814: PPUSH
83815: LD_VAR 0 4
83819: PUSH
83820: LD_VAR 0 2
83824: PUSH
83825: LD_VAR 0 3
83829: PUSH
83830: EMPTY
83831: LIST
83832: LIST
83833: LIST
83834: PPUSH
83835: CALL 24315 0 3
83839: ST_TO_ADDR
// exit ;
83840: POP
83841: POP
83842: POP
83843: POP
83844: GO 84019
// end ;
83846: GO 83757
83848: POP
83849: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
83850: LD_ADDR_VAR 0 9
83854: PUSH
83855: LD_EXP 47
83859: PUSH
83860: LD_VAR 0 7
83864: ARRAY
83865: PPUSH
83866: LD_INT 2
83868: PUSH
83869: LD_INT 30
83871: PUSH
83872: LD_INT 0
83874: PUSH
83875: EMPTY
83876: LIST
83877: LIST
83878: PUSH
83879: LD_INT 30
83881: PUSH
83882: LD_INT 1
83884: PUSH
83885: EMPTY
83886: LIST
83887: LIST
83888: PUSH
83889: EMPTY
83890: LIST
83891: LIST
83892: LIST
83893: PPUSH
83894: CALL_OW 72
83898: ST_TO_ADDR
// if not depot then
83899: LD_VAR 0 9
83903: NOT
83904: IFFALSE 83908
// continue ;
83906: GO 83726
// for j in depot do
83908: LD_ADDR_VAR 0 8
83912: PUSH
83913: LD_VAR 0 9
83917: PUSH
83918: FOR_IN
83919: IFFALSE 84013
// if GetDistUnitXY ( j , x , y ) < 30 then
83921: LD_VAR 0 8
83925: PPUSH
83926: LD_VAR 0 2
83930: PPUSH
83931: LD_VAR 0 3
83935: PPUSH
83936: CALL_OW 297
83940: PUSH
83941: LD_INT 30
83943: LESS
83944: IFFALSE 84011
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
83946: LD_ADDR_EXP 63
83950: PUSH
83951: LD_EXP 63
83955: PPUSH
83956: LD_VAR 0 7
83960: PUSH
83961: LD_EXP 63
83965: PUSH
83966: LD_VAR 0 7
83970: ARRAY
83971: PUSH
83972: LD_INT 1
83974: PLUS
83975: PUSH
83976: EMPTY
83977: LIST
83978: LIST
83979: PPUSH
83980: LD_VAR 0 4
83984: PUSH
83985: LD_VAR 0 2
83989: PUSH
83990: LD_VAR 0 3
83994: PUSH
83995: EMPTY
83996: LIST
83997: LIST
83998: LIST
83999: PPUSH
84000: CALL 24315 0 3
84004: ST_TO_ADDR
// exit ;
84005: POP
84006: POP
84007: POP
84008: POP
84009: GO 84019
// end ;
84011: GO 83918
84013: POP
84014: POP
// end ;
84015: GO 83726
84017: POP
84018: POP
// end ;
84019: LD_VAR 0 6
84023: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
84024: LD_INT 0
84026: PPUSH
84027: PPUSH
84028: PPUSH
84029: PPUSH
// if not mc_bases or not skirmish then
84030: LD_EXP 47
84034: NOT
84035: PUSH
84036: LD_EXP 45
84040: NOT
84041: OR
84042: IFFALSE 84046
// exit ;
84044: GO 84323
// side := GetSide ( lab ) ;
84046: LD_ADDR_VAR 0 4
84050: PUSH
84051: LD_VAR 0 2
84055: PPUSH
84056: CALL_OW 255
84060: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
84061: LD_VAR 0 4
84065: PUSH
84066: LD_EXP 73
84070: IN
84071: NOT
84072: PUSH
84073: LD_EXP 74
84077: NOT
84078: OR
84079: PUSH
84080: LD_EXP 47
84084: NOT
84085: OR
84086: IFFALSE 84090
// exit ;
84088: GO 84323
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
84090: LD_ADDR_EXP 74
84094: PUSH
84095: LD_EXP 74
84099: PPUSH
84100: LD_VAR 0 4
84104: PPUSH
84105: LD_EXP 74
84109: PUSH
84110: LD_VAR 0 4
84114: ARRAY
84115: PUSH
84116: LD_VAR 0 1
84120: DIFF
84121: PPUSH
84122: CALL_OW 1
84126: ST_TO_ADDR
// for i = 1 to mc_bases do
84127: LD_ADDR_VAR 0 5
84131: PUSH
84132: DOUBLE
84133: LD_INT 1
84135: DEC
84136: ST_TO_ADDR
84137: LD_EXP 47
84141: PUSH
84142: FOR_TO
84143: IFFALSE 84321
// begin if lab in mc_bases [ i ] then
84145: LD_VAR 0 2
84149: PUSH
84150: LD_EXP 47
84154: PUSH
84155: LD_VAR 0 5
84159: ARRAY
84160: IN
84161: IFFALSE 84319
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
84163: LD_VAR 0 1
84167: PUSH
84168: LD_INT 11
84170: PUSH
84171: LD_INT 4
84173: PUSH
84174: LD_INT 3
84176: PUSH
84177: LD_INT 2
84179: PUSH
84180: EMPTY
84181: LIST
84182: LIST
84183: LIST
84184: LIST
84185: IN
84186: PUSH
84187: LD_EXP 77
84191: PUSH
84192: LD_VAR 0 5
84196: ARRAY
84197: AND
84198: IFFALSE 84319
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
84200: LD_ADDR_VAR 0 6
84204: PUSH
84205: LD_EXP 77
84209: PUSH
84210: LD_VAR 0 5
84214: ARRAY
84215: PUSH
84216: LD_INT 1
84218: ARRAY
84219: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
84220: LD_ADDR_EXP 77
84224: PUSH
84225: LD_EXP 77
84229: PPUSH
84230: LD_VAR 0 5
84234: PPUSH
84235: EMPTY
84236: PPUSH
84237: CALL_OW 1
84241: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
84242: LD_VAR 0 6
84246: PPUSH
84247: LD_INT 0
84249: PPUSH
84250: CALL_OW 109
// ComExitBuilding ( tmp ) ;
84254: LD_VAR 0 6
84258: PPUSH
84259: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
84263: LD_ADDR_EXP 76
84267: PUSH
84268: LD_EXP 76
84272: PPUSH
84273: LD_VAR 0 5
84277: PPUSH
84278: LD_EXP 76
84282: PUSH
84283: LD_VAR 0 5
84287: ARRAY
84288: PPUSH
84289: LD_INT 1
84291: PPUSH
84292: LD_VAR 0 6
84296: PPUSH
84297: CALL_OW 2
84301: PPUSH
84302: CALL_OW 1
84306: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
84307: LD_VAR 0 5
84311: PPUSH
84312: LD_INT 112
84314: PPUSH
84315: CALL 61247 0 2
// end ; end ; end ;
84319: GO 84142
84321: POP
84322: POP
// end ;
84323: LD_VAR 0 3
84327: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
84328: LD_INT 0
84330: PPUSH
84331: PPUSH
84332: PPUSH
84333: PPUSH
84334: PPUSH
84335: PPUSH
84336: PPUSH
84337: PPUSH
// if not mc_bases or not skirmish then
84338: LD_EXP 47
84342: NOT
84343: PUSH
84344: LD_EXP 45
84348: NOT
84349: OR
84350: IFFALSE 84354
// exit ;
84352: GO 85725
// for i = 1 to mc_bases do
84354: LD_ADDR_VAR 0 3
84358: PUSH
84359: DOUBLE
84360: LD_INT 1
84362: DEC
84363: ST_TO_ADDR
84364: LD_EXP 47
84368: PUSH
84369: FOR_TO
84370: IFFALSE 85723
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
84372: LD_VAR 0 1
84376: PUSH
84377: LD_EXP 47
84381: PUSH
84382: LD_VAR 0 3
84386: ARRAY
84387: IN
84388: PUSH
84389: LD_VAR 0 1
84393: PUSH
84394: LD_EXP 54
84398: PUSH
84399: LD_VAR 0 3
84403: ARRAY
84404: IN
84405: OR
84406: PUSH
84407: LD_VAR 0 1
84411: PUSH
84412: LD_EXP 69
84416: PUSH
84417: LD_VAR 0 3
84421: ARRAY
84422: IN
84423: OR
84424: PUSH
84425: LD_VAR 0 1
84429: PUSH
84430: LD_EXP 66
84434: PUSH
84435: LD_VAR 0 3
84439: ARRAY
84440: IN
84441: OR
84442: PUSH
84443: LD_VAR 0 1
84447: PUSH
84448: LD_EXP 76
84452: PUSH
84453: LD_VAR 0 3
84457: ARRAY
84458: IN
84459: OR
84460: PUSH
84461: LD_VAR 0 1
84465: PUSH
84466: LD_EXP 77
84470: PUSH
84471: LD_VAR 0 3
84475: ARRAY
84476: IN
84477: OR
84478: IFFALSE 85721
// begin if un in mc_ape [ i ] then
84480: LD_VAR 0 1
84484: PUSH
84485: LD_EXP 76
84489: PUSH
84490: LD_VAR 0 3
84494: ARRAY
84495: IN
84496: IFFALSE 84535
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
84498: LD_ADDR_EXP 76
84502: PUSH
84503: LD_EXP 76
84507: PPUSH
84508: LD_VAR 0 3
84512: PPUSH
84513: LD_EXP 76
84517: PUSH
84518: LD_VAR 0 3
84522: ARRAY
84523: PUSH
84524: LD_VAR 0 1
84528: DIFF
84529: PPUSH
84530: CALL_OW 1
84534: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
84535: LD_VAR 0 1
84539: PUSH
84540: LD_EXP 77
84544: PUSH
84545: LD_VAR 0 3
84549: ARRAY
84550: IN
84551: IFFALSE 84575
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
84553: LD_ADDR_EXP 77
84557: PUSH
84558: LD_EXP 77
84562: PPUSH
84563: LD_VAR 0 3
84567: PPUSH
84568: EMPTY
84569: PPUSH
84570: CALL_OW 1
84574: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
84575: LD_VAR 0 1
84579: PPUSH
84580: CALL_OW 247
84584: PUSH
84585: LD_INT 2
84587: EQUAL
84588: PUSH
84589: LD_VAR 0 1
84593: PPUSH
84594: CALL_OW 110
84598: PUSH
84599: LD_INT 20
84601: EQUAL
84602: PUSH
84603: LD_VAR 0 1
84607: PUSH
84608: LD_EXP 69
84612: PUSH
84613: LD_VAR 0 3
84617: ARRAY
84618: IN
84619: OR
84620: PUSH
84621: LD_VAR 0 1
84625: PPUSH
84626: CALL_OW 264
84630: PUSH
84631: LD_INT 12
84633: PUSH
84634: LD_INT 51
84636: PUSH
84637: LD_EXP 30
84641: PUSH
84642: LD_INT 32
84644: PUSH
84645: LD_INT 13
84647: PUSH
84648: LD_INT 52
84650: PUSH
84651: LD_INT 31
84653: PUSH
84654: EMPTY
84655: LIST
84656: LIST
84657: LIST
84658: LIST
84659: LIST
84660: LIST
84661: LIST
84662: IN
84663: OR
84664: AND
84665: IFFALSE 84973
// begin if un in mc_defender [ i ] then
84667: LD_VAR 0 1
84671: PUSH
84672: LD_EXP 69
84676: PUSH
84677: LD_VAR 0 3
84681: ARRAY
84682: IN
84683: IFFALSE 84722
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
84685: LD_ADDR_EXP 69
84689: PUSH
84690: LD_EXP 69
84694: PPUSH
84695: LD_VAR 0 3
84699: PPUSH
84700: LD_EXP 69
84704: PUSH
84705: LD_VAR 0 3
84709: ARRAY
84710: PUSH
84711: LD_VAR 0 1
84715: DIFF
84716: PPUSH
84717: CALL_OW 1
84721: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
84722: LD_ADDR_VAR 0 8
84726: PUSH
84727: LD_VAR 0 3
84731: PPUSH
84732: LD_INT 3
84734: PPUSH
84735: CALL 81372 0 2
84739: ST_TO_ADDR
// if fac then
84740: LD_VAR 0 8
84744: IFFALSE 84973
// begin for j in fac do
84746: LD_ADDR_VAR 0 4
84750: PUSH
84751: LD_VAR 0 8
84755: PUSH
84756: FOR_IN
84757: IFFALSE 84971
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
84759: LD_ADDR_VAR 0 9
84763: PUSH
84764: LD_VAR 0 8
84768: PPUSH
84769: LD_VAR 0 1
84773: PPUSH
84774: CALL_OW 265
84778: PPUSH
84779: LD_VAR 0 1
84783: PPUSH
84784: CALL_OW 262
84788: PPUSH
84789: LD_VAR 0 1
84793: PPUSH
84794: CALL_OW 263
84798: PPUSH
84799: LD_VAR 0 1
84803: PPUSH
84804: CALL_OW 264
84808: PPUSH
84809: CALL 21847 0 5
84813: ST_TO_ADDR
// if components then
84814: LD_VAR 0 9
84818: IFFALSE 84969
// begin if GetWeapon ( un ) = ar_control_tower then
84820: LD_VAR 0 1
84824: PPUSH
84825: CALL_OW 264
84829: PUSH
84830: LD_INT 31
84832: EQUAL
84833: IFFALSE 84950
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
84835: LD_VAR 0 1
84839: PPUSH
84840: CALL_OW 311
84844: PPUSH
84845: LD_INT 0
84847: PPUSH
84848: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
84852: LD_ADDR_EXP 87
84856: PUSH
84857: LD_EXP 87
84861: PPUSH
84862: LD_VAR 0 3
84866: PPUSH
84867: LD_EXP 87
84871: PUSH
84872: LD_VAR 0 3
84876: ARRAY
84877: PUSH
84878: LD_VAR 0 1
84882: PPUSH
84883: CALL_OW 311
84887: DIFF
84888: PPUSH
84889: CALL_OW 1
84893: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
84894: LD_ADDR_VAR 0 7
84898: PUSH
84899: LD_EXP 68
84903: PUSH
84904: LD_VAR 0 3
84908: ARRAY
84909: PPUSH
84910: LD_INT 1
84912: PPUSH
84913: LD_VAR 0 9
84917: PPUSH
84918: CALL_OW 2
84922: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
84923: LD_ADDR_EXP 68
84927: PUSH
84928: LD_EXP 68
84932: PPUSH
84933: LD_VAR 0 3
84937: PPUSH
84938: LD_VAR 0 7
84942: PPUSH
84943: CALL_OW 1
84947: ST_TO_ADDR
// end else
84948: GO 84967
// MC_InsertProduceList ( i , [ components ] ) ;
84950: LD_VAR 0 3
84954: PPUSH
84955: LD_VAR 0 9
84959: PUSH
84960: EMPTY
84961: LIST
84962: PPUSH
84963: CALL 80917 0 2
// break ;
84967: GO 84971
// end ; end ;
84969: GO 84756
84971: POP
84972: POP
// end ; end ; if GetType ( un ) = unit_building then
84973: LD_VAR 0 1
84977: PPUSH
84978: CALL_OW 247
84982: PUSH
84983: LD_INT 3
84985: EQUAL
84986: IFFALSE 85389
// begin btype := GetBType ( un ) ;
84988: LD_ADDR_VAR 0 5
84992: PUSH
84993: LD_VAR 0 1
84997: PPUSH
84998: CALL_OW 266
85002: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
85003: LD_VAR 0 5
85007: PUSH
85008: LD_INT 29
85010: PUSH
85011: LD_INT 30
85013: PUSH
85014: EMPTY
85015: LIST
85016: LIST
85017: IN
85018: IFFALSE 85091
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
85020: LD_VAR 0 1
85024: PPUSH
85025: CALL_OW 250
85029: PPUSH
85030: LD_VAR 0 1
85034: PPUSH
85035: CALL_OW 251
85039: PPUSH
85040: LD_VAR 0 1
85044: PPUSH
85045: CALL_OW 255
85049: PPUSH
85050: CALL_OW 440
85054: NOT
85055: IFFALSE 85091
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
85057: LD_VAR 0 1
85061: PPUSH
85062: CALL_OW 250
85066: PPUSH
85067: LD_VAR 0 1
85071: PPUSH
85072: CALL_OW 251
85076: PPUSH
85077: LD_VAR 0 1
85081: PPUSH
85082: CALL_OW 255
85086: PPUSH
85087: CALL_OW 441
// end ; if btype = b_warehouse then
85091: LD_VAR 0 5
85095: PUSH
85096: LD_INT 1
85098: EQUAL
85099: IFFALSE 85117
// begin btype := b_depot ;
85101: LD_ADDR_VAR 0 5
85105: PUSH
85106: LD_INT 0
85108: ST_TO_ADDR
// pos := 1 ;
85109: LD_ADDR_VAR 0 6
85113: PUSH
85114: LD_INT 1
85116: ST_TO_ADDR
// end ; if btype = b_factory then
85117: LD_VAR 0 5
85121: PUSH
85122: LD_INT 3
85124: EQUAL
85125: IFFALSE 85143
// begin btype := b_workshop ;
85127: LD_ADDR_VAR 0 5
85131: PUSH
85132: LD_INT 2
85134: ST_TO_ADDR
// pos := 1 ;
85135: LD_ADDR_VAR 0 6
85139: PUSH
85140: LD_INT 1
85142: ST_TO_ADDR
// end ; if btype = b_barracks then
85143: LD_VAR 0 5
85147: PUSH
85148: LD_INT 5
85150: EQUAL
85151: IFFALSE 85161
// btype := b_armoury ;
85153: LD_ADDR_VAR 0 5
85157: PUSH
85158: LD_INT 4
85160: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
85161: LD_VAR 0 5
85165: PUSH
85166: LD_INT 7
85168: PUSH
85169: LD_INT 8
85171: PUSH
85172: EMPTY
85173: LIST
85174: LIST
85175: IN
85176: IFFALSE 85186
// btype := b_lab ;
85178: LD_ADDR_VAR 0 5
85182: PUSH
85183: LD_INT 6
85185: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
85186: LD_ADDR_EXP 52
85190: PUSH
85191: LD_EXP 52
85195: PPUSH
85196: LD_VAR 0 3
85200: PUSH
85201: LD_EXP 52
85205: PUSH
85206: LD_VAR 0 3
85210: ARRAY
85211: PUSH
85212: LD_INT 1
85214: PLUS
85215: PUSH
85216: EMPTY
85217: LIST
85218: LIST
85219: PPUSH
85220: LD_VAR 0 5
85224: PUSH
85225: LD_VAR 0 1
85229: PPUSH
85230: CALL_OW 250
85234: PUSH
85235: LD_VAR 0 1
85239: PPUSH
85240: CALL_OW 251
85244: PUSH
85245: LD_VAR 0 1
85249: PPUSH
85250: CALL_OW 254
85254: PUSH
85255: EMPTY
85256: LIST
85257: LIST
85258: LIST
85259: LIST
85260: PPUSH
85261: CALL 24315 0 3
85265: ST_TO_ADDR
// if pos = 1 then
85266: LD_VAR 0 6
85270: PUSH
85271: LD_INT 1
85273: EQUAL
85274: IFFALSE 85389
// begin tmp := mc_build_list [ i ] ;
85276: LD_ADDR_VAR 0 7
85280: PUSH
85281: LD_EXP 52
85285: PUSH
85286: LD_VAR 0 3
85290: ARRAY
85291: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
85292: LD_VAR 0 7
85296: PPUSH
85297: LD_INT 2
85299: PUSH
85300: LD_INT 30
85302: PUSH
85303: LD_INT 0
85305: PUSH
85306: EMPTY
85307: LIST
85308: LIST
85309: PUSH
85310: LD_INT 30
85312: PUSH
85313: LD_INT 1
85315: PUSH
85316: EMPTY
85317: LIST
85318: LIST
85319: PUSH
85320: EMPTY
85321: LIST
85322: LIST
85323: LIST
85324: PPUSH
85325: CALL_OW 72
85329: IFFALSE 85339
// pos := 2 ;
85331: LD_ADDR_VAR 0 6
85335: PUSH
85336: LD_INT 2
85338: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
85339: LD_ADDR_VAR 0 7
85343: PUSH
85344: LD_VAR 0 7
85348: PPUSH
85349: LD_VAR 0 6
85353: PPUSH
85354: LD_VAR 0 7
85358: PPUSH
85359: CALL 24641 0 3
85363: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
85364: LD_ADDR_EXP 52
85368: PUSH
85369: LD_EXP 52
85373: PPUSH
85374: LD_VAR 0 3
85378: PPUSH
85379: LD_VAR 0 7
85383: PPUSH
85384: CALL_OW 1
85388: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
85389: LD_VAR 0 1
85393: PUSH
85394: LD_EXP 47
85398: PUSH
85399: LD_VAR 0 3
85403: ARRAY
85404: IN
85405: IFFALSE 85444
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
85407: LD_ADDR_EXP 47
85411: PUSH
85412: LD_EXP 47
85416: PPUSH
85417: LD_VAR 0 3
85421: PPUSH
85422: LD_EXP 47
85426: PUSH
85427: LD_VAR 0 3
85431: ARRAY
85432: PUSH
85433: LD_VAR 0 1
85437: DIFF
85438: PPUSH
85439: CALL_OW 1
85443: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
85444: LD_VAR 0 1
85448: PUSH
85449: LD_EXP 54
85453: PUSH
85454: LD_VAR 0 3
85458: ARRAY
85459: IN
85460: IFFALSE 85499
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
85462: LD_ADDR_EXP 54
85466: PUSH
85467: LD_EXP 54
85471: PPUSH
85472: LD_VAR 0 3
85476: PPUSH
85477: LD_EXP 54
85481: PUSH
85482: LD_VAR 0 3
85486: ARRAY
85487: PUSH
85488: LD_VAR 0 1
85492: DIFF
85493: PPUSH
85494: CALL_OW 1
85498: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
85499: LD_VAR 0 1
85503: PUSH
85504: LD_EXP 66
85508: PUSH
85509: LD_VAR 0 3
85513: ARRAY
85514: IN
85515: IFFALSE 85554
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
85517: LD_ADDR_EXP 66
85521: PUSH
85522: LD_EXP 66
85526: PPUSH
85527: LD_VAR 0 3
85531: PPUSH
85532: LD_EXP 66
85536: PUSH
85537: LD_VAR 0 3
85541: ARRAY
85542: PUSH
85543: LD_VAR 0 1
85547: DIFF
85548: PPUSH
85549: CALL_OW 1
85553: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
85554: LD_VAR 0 1
85558: PUSH
85559: LD_EXP 69
85563: PUSH
85564: LD_VAR 0 3
85568: ARRAY
85569: IN
85570: IFFALSE 85609
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
85572: LD_ADDR_EXP 69
85576: PUSH
85577: LD_EXP 69
85581: PPUSH
85582: LD_VAR 0 3
85586: PPUSH
85587: LD_EXP 69
85591: PUSH
85592: LD_VAR 0 3
85596: ARRAY
85597: PUSH
85598: LD_VAR 0 1
85602: DIFF
85603: PPUSH
85604: CALL_OW 1
85608: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
85609: LD_VAR 0 1
85613: PUSH
85614: LD_EXP 56
85618: PUSH
85619: LD_VAR 0 3
85623: ARRAY
85624: IN
85625: IFFALSE 85664
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
85627: LD_ADDR_EXP 56
85631: PUSH
85632: LD_EXP 56
85636: PPUSH
85637: LD_VAR 0 3
85641: PPUSH
85642: LD_EXP 56
85646: PUSH
85647: LD_VAR 0 3
85651: ARRAY
85652: PUSH
85653: LD_VAR 0 1
85657: DIFF
85658: PPUSH
85659: CALL_OW 1
85663: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
85664: LD_VAR 0 1
85668: PUSH
85669: LD_EXP 55
85673: PUSH
85674: LD_VAR 0 3
85678: ARRAY
85679: IN
85680: IFFALSE 85719
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
85682: LD_ADDR_EXP 55
85686: PUSH
85687: LD_EXP 55
85691: PPUSH
85692: LD_VAR 0 3
85696: PPUSH
85697: LD_EXP 55
85701: PUSH
85702: LD_VAR 0 3
85706: ARRAY
85707: PUSH
85708: LD_VAR 0 1
85712: DIFF
85713: PPUSH
85714: CALL_OW 1
85718: ST_TO_ADDR
// end ; break ;
85719: GO 85723
// end ;
85721: GO 84369
85723: POP
85724: POP
// end ;
85725: LD_VAR 0 2
85729: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
85730: LD_INT 0
85732: PPUSH
85733: PPUSH
85734: PPUSH
// if not mc_bases or not skirmish then
85735: LD_EXP 47
85739: NOT
85740: PUSH
85741: LD_EXP 45
85745: NOT
85746: OR
85747: IFFALSE 85751
// exit ;
85749: GO 85966
// for i = 1 to mc_bases do
85751: LD_ADDR_VAR 0 3
85755: PUSH
85756: DOUBLE
85757: LD_INT 1
85759: DEC
85760: ST_TO_ADDR
85761: LD_EXP 47
85765: PUSH
85766: FOR_TO
85767: IFFALSE 85964
// begin if building in mc_construct_list [ i ] then
85769: LD_VAR 0 1
85773: PUSH
85774: LD_EXP 54
85778: PUSH
85779: LD_VAR 0 3
85783: ARRAY
85784: IN
85785: IFFALSE 85962
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
85787: LD_ADDR_EXP 54
85791: PUSH
85792: LD_EXP 54
85796: PPUSH
85797: LD_VAR 0 3
85801: PPUSH
85802: LD_EXP 54
85806: PUSH
85807: LD_VAR 0 3
85811: ARRAY
85812: PUSH
85813: LD_VAR 0 1
85817: DIFF
85818: PPUSH
85819: CALL_OW 1
85823: ST_TO_ADDR
// if building in mc_lab [ i ] then
85824: LD_VAR 0 1
85828: PUSH
85829: LD_EXP 80
85833: PUSH
85834: LD_VAR 0 3
85838: ARRAY
85839: IN
85840: IFFALSE 85895
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
85842: LD_ADDR_EXP 81
85846: PUSH
85847: LD_EXP 81
85851: PPUSH
85852: LD_VAR 0 3
85856: PPUSH
85857: LD_EXP 81
85861: PUSH
85862: LD_VAR 0 3
85866: ARRAY
85867: PPUSH
85868: LD_INT 1
85870: PPUSH
85871: LD_EXP 81
85875: PUSH
85876: LD_VAR 0 3
85880: ARRAY
85881: PPUSH
85882: LD_INT 0
85884: PPUSH
85885: CALL 23733 0 4
85889: PPUSH
85890: CALL_OW 1
85894: ST_TO_ADDR
// if not building in mc_bases [ i ] then
85895: LD_VAR 0 1
85899: PUSH
85900: LD_EXP 47
85904: PUSH
85905: LD_VAR 0 3
85909: ARRAY
85910: IN
85911: NOT
85912: IFFALSE 85958
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
85914: LD_ADDR_EXP 47
85918: PUSH
85919: LD_EXP 47
85923: PPUSH
85924: LD_VAR 0 3
85928: PUSH
85929: LD_EXP 47
85933: PUSH
85934: LD_VAR 0 3
85938: ARRAY
85939: PUSH
85940: LD_INT 1
85942: PLUS
85943: PUSH
85944: EMPTY
85945: LIST
85946: LIST
85947: PPUSH
85948: LD_VAR 0 1
85952: PPUSH
85953: CALL 24315 0 3
85957: ST_TO_ADDR
// exit ;
85958: POP
85959: POP
85960: GO 85966
// end ; end ;
85962: GO 85766
85964: POP
85965: POP
// end ;
85966: LD_VAR 0 2
85970: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
85971: LD_INT 0
85973: PPUSH
85974: PPUSH
85975: PPUSH
85976: PPUSH
85977: PPUSH
85978: PPUSH
85979: PPUSH
// if not mc_bases or not skirmish then
85980: LD_EXP 47
85984: NOT
85985: PUSH
85986: LD_EXP 45
85990: NOT
85991: OR
85992: IFFALSE 85996
// exit ;
85994: GO 86657
// for i = 1 to mc_bases do
85996: LD_ADDR_VAR 0 3
86000: PUSH
86001: DOUBLE
86002: LD_INT 1
86004: DEC
86005: ST_TO_ADDR
86006: LD_EXP 47
86010: PUSH
86011: FOR_TO
86012: IFFALSE 86655
// begin if building in mc_construct_list [ i ] then
86014: LD_VAR 0 1
86018: PUSH
86019: LD_EXP 54
86023: PUSH
86024: LD_VAR 0 3
86028: ARRAY
86029: IN
86030: IFFALSE 86653
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
86032: LD_ADDR_EXP 54
86036: PUSH
86037: LD_EXP 54
86041: PPUSH
86042: LD_VAR 0 3
86046: PPUSH
86047: LD_EXP 54
86051: PUSH
86052: LD_VAR 0 3
86056: ARRAY
86057: PUSH
86058: LD_VAR 0 1
86062: DIFF
86063: PPUSH
86064: CALL_OW 1
86068: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
86069: LD_ADDR_EXP 47
86073: PUSH
86074: LD_EXP 47
86078: PPUSH
86079: LD_VAR 0 3
86083: PUSH
86084: LD_EXP 47
86088: PUSH
86089: LD_VAR 0 3
86093: ARRAY
86094: PUSH
86095: LD_INT 1
86097: PLUS
86098: PUSH
86099: EMPTY
86100: LIST
86101: LIST
86102: PPUSH
86103: LD_VAR 0 1
86107: PPUSH
86108: CALL 24315 0 3
86112: ST_TO_ADDR
// btype := GetBType ( building ) ;
86113: LD_ADDR_VAR 0 5
86117: PUSH
86118: LD_VAR 0 1
86122: PPUSH
86123: CALL_OW 266
86127: ST_TO_ADDR
// side := GetSide ( building ) ;
86128: LD_ADDR_VAR 0 8
86132: PUSH
86133: LD_VAR 0 1
86137: PPUSH
86138: CALL_OW 255
86142: ST_TO_ADDR
// if btype = b_lab then
86143: LD_VAR 0 5
86147: PUSH
86148: LD_INT 6
86150: EQUAL
86151: IFFALSE 86201
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
86153: LD_ADDR_EXP 80
86157: PUSH
86158: LD_EXP 80
86162: PPUSH
86163: LD_VAR 0 3
86167: PUSH
86168: LD_EXP 80
86172: PUSH
86173: LD_VAR 0 3
86177: ARRAY
86178: PUSH
86179: LD_INT 1
86181: PLUS
86182: PUSH
86183: EMPTY
86184: LIST
86185: LIST
86186: PPUSH
86187: LD_VAR 0 1
86191: PPUSH
86192: CALL 24315 0 3
86196: ST_TO_ADDR
// exit ;
86197: POP
86198: POP
86199: GO 86657
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
86201: LD_VAR 0 5
86205: PUSH
86206: LD_INT 0
86208: PUSH
86209: LD_INT 2
86211: PUSH
86212: LD_INT 4
86214: PUSH
86215: EMPTY
86216: LIST
86217: LIST
86218: LIST
86219: IN
86220: IFFALSE 86344
// begin if btype = b_armoury then
86222: LD_VAR 0 5
86226: PUSH
86227: LD_INT 4
86229: EQUAL
86230: IFFALSE 86240
// btype := b_barracks ;
86232: LD_ADDR_VAR 0 5
86236: PUSH
86237: LD_INT 5
86239: ST_TO_ADDR
// if btype = b_depot then
86240: LD_VAR 0 5
86244: PUSH
86245: LD_INT 0
86247: EQUAL
86248: IFFALSE 86258
// btype := b_warehouse ;
86250: LD_ADDR_VAR 0 5
86254: PUSH
86255: LD_INT 1
86257: ST_TO_ADDR
// if btype = b_workshop then
86258: LD_VAR 0 5
86262: PUSH
86263: LD_INT 2
86265: EQUAL
86266: IFFALSE 86276
// btype := b_factory ;
86268: LD_ADDR_VAR 0 5
86272: PUSH
86273: LD_INT 3
86275: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
86276: LD_VAR 0 5
86280: PPUSH
86281: LD_VAR 0 8
86285: PPUSH
86286: CALL_OW 323
86290: PUSH
86291: LD_INT 1
86293: EQUAL
86294: IFFALSE 86340
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
86296: LD_ADDR_EXP 79
86300: PUSH
86301: LD_EXP 79
86305: PPUSH
86306: LD_VAR 0 3
86310: PUSH
86311: LD_EXP 79
86315: PUSH
86316: LD_VAR 0 3
86320: ARRAY
86321: PUSH
86322: LD_INT 1
86324: PLUS
86325: PUSH
86326: EMPTY
86327: LIST
86328: LIST
86329: PPUSH
86330: LD_VAR 0 1
86334: PPUSH
86335: CALL 24315 0 3
86339: ST_TO_ADDR
// exit ;
86340: POP
86341: POP
86342: GO 86657
// end ; if btype in [ b_bunker , b_turret ] then
86344: LD_VAR 0 5
86348: PUSH
86349: LD_INT 32
86351: PUSH
86352: LD_INT 33
86354: PUSH
86355: EMPTY
86356: LIST
86357: LIST
86358: IN
86359: IFFALSE 86649
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
86361: LD_ADDR_EXP 55
86365: PUSH
86366: LD_EXP 55
86370: PPUSH
86371: LD_VAR 0 3
86375: PUSH
86376: LD_EXP 55
86380: PUSH
86381: LD_VAR 0 3
86385: ARRAY
86386: PUSH
86387: LD_INT 1
86389: PLUS
86390: PUSH
86391: EMPTY
86392: LIST
86393: LIST
86394: PPUSH
86395: LD_VAR 0 1
86399: PPUSH
86400: CALL 24315 0 3
86404: ST_TO_ADDR
// if btype = b_bunker then
86405: LD_VAR 0 5
86409: PUSH
86410: LD_INT 32
86412: EQUAL
86413: IFFALSE 86649
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
86415: LD_ADDR_EXP 56
86419: PUSH
86420: LD_EXP 56
86424: PPUSH
86425: LD_VAR 0 3
86429: PUSH
86430: LD_EXP 56
86434: PUSH
86435: LD_VAR 0 3
86439: ARRAY
86440: PUSH
86441: LD_INT 1
86443: PLUS
86444: PUSH
86445: EMPTY
86446: LIST
86447: LIST
86448: PPUSH
86449: LD_VAR 0 1
86453: PPUSH
86454: CALL 24315 0 3
86458: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
86459: LD_ADDR_VAR 0 6
86463: PUSH
86464: LD_EXP 47
86468: PUSH
86469: LD_VAR 0 3
86473: ARRAY
86474: PPUSH
86475: LD_INT 25
86477: PUSH
86478: LD_INT 1
86480: PUSH
86481: EMPTY
86482: LIST
86483: LIST
86484: PUSH
86485: LD_INT 3
86487: PUSH
86488: LD_INT 54
86490: PUSH
86491: EMPTY
86492: LIST
86493: PUSH
86494: EMPTY
86495: LIST
86496: LIST
86497: PUSH
86498: EMPTY
86499: LIST
86500: LIST
86501: PPUSH
86502: CALL_OW 72
86506: ST_TO_ADDR
// if tmp then
86507: LD_VAR 0 6
86511: IFFALSE 86517
// exit ;
86513: POP
86514: POP
86515: GO 86657
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
86517: LD_ADDR_VAR 0 6
86521: PUSH
86522: LD_EXP 47
86526: PUSH
86527: LD_VAR 0 3
86531: ARRAY
86532: PPUSH
86533: LD_INT 2
86535: PUSH
86536: LD_INT 30
86538: PUSH
86539: LD_INT 4
86541: PUSH
86542: EMPTY
86543: LIST
86544: LIST
86545: PUSH
86546: LD_INT 30
86548: PUSH
86549: LD_INT 5
86551: PUSH
86552: EMPTY
86553: LIST
86554: LIST
86555: PUSH
86556: EMPTY
86557: LIST
86558: LIST
86559: LIST
86560: PPUSH
86561: CALL_OW 72
86565: ST_TO_ADDR
// if not tmp then
86566: LD_VAR 0 6
86570: NOT
86571: IFFALSE 86577
// exit ;
86573: POP
86574: POP
86575: GO 86657
// for j in tmp do
86577: LD_ADDR_VAR 0 4
86581: PUSH
86582: LD_VAR 0 6
86586: PUSH
86587: FOR_IN
86588: IFFALSE 86647
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
86590: LD_ADDR_VAR 0 7
86594: PUSH
86595: LD_VAR 0 4
86599: PPUSH
86600: CALL_OW 313
86604: PPUSH
86605: LD_INT 25
86607: PUSH
86608: LD_INT 1
86610: PUSH
86611: EMPTY
86612: LIST
86613: LIST
86614: PPUSH
86615: CALL_OW 72
86619: ST_TO_ADDR
// if units then
86620: LD_VAR 0 7
86624: IFFALSE 86645
// begin ComExitBuilding ( units [ 1 ] ) ;
86626: LD_VAR 0 7
86630: PUSH
86631: LD_INT 1
86633: ARRAY
86634: PPUSH
86635: CALL_OW 122
// exit ;
86639: POP
86640: POP
86641: POP
86642: POP
86643: GO 86657
// end ; end ;
86645: GO 86587
86647: POP
86648: POP
// end ; end ; exit ;
86649: POP
86650: POP
86651: GO 86657
// end ; end ;
86653: GO 86011
86655: POP
86656: POP
// end ;
86657: LD_VAR 0 2
86661: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
86662: LD_INT 0
86664: PPUSH
86665: PPUSH
86666: PPUSH
86667: PPUSH
86668: PPUSH
86669: PPUSH
86670: PPUSH
// if not mc_bases or not skirmish then
86671: LD_EXP 47
86675: NOT
86676: PUSH
86677: LD_EXP 45
86681: NOT
86682: OR
86683: IFFALSE 86687
// exit ;
86685: GO 86918
// btype := GetBType ( building ) ;
86687: LD_ADDR_VAR 0 6
86691: PUSH
86692: LD_VAR 0 1
86696: PPUSH
86697: CALL_OW 266
86701: ST_TO_ADDR
// x := GetX ( building ) ;
86702: LD_ADDR_VAR 0 7
86706: PUSH
86707: LD_VAR 0 1
86711: PPUSH
86712: CALL_OW 250
86716: ST_TO_ADDR
// y := GetY ( building ) ;
86717: LD_ADDR_VAR 0 8
86721: PUSH
86722: LD_VAR 0 1
86726: PPUSH
86727: CALL_OW 251
86731: ST_TO_ADDR
// d := GetDir ( building ) ;
86732: LD_ADDR_VAR 0 9
86736: PUSH
86737: LD_VAR 0 1
86741: PPUSH
86742: CALL_OW 254
86746: ST_TO_ADDR
// for i = 1 to mc_bases do
86747: LD_ADDR_VAR 0 4
86751: PUSH
86752: DOUBLE
86753: LD_INT 1
86755: DEC
86756: ST_TO_ADDR
86757: LD_EXP 47
86761: PUSH
86762: FOR_TO
86763: IFFALSE 86916
// begin if not mc_build_list [ i ] then
86765: LD_EXP 52
86769: PUSH
86770: LD_VAR 0 4
86774: ARRAY
86775: NOT
86776: IFFALSE 86780
// continue ;
86778: GO 86762
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
86780: LD_VAR 0 6
86784: PUSH
86785: LD_VAR 0 7
86789: PUSH
86790: LD_VAR 0 8
86794: PUSH
86795: LD_VAR 0 9
86799: PUSH
86800: EMPTY
86801: LIST
86802: LIST
86803: LIST
86804: LIST
86805: PPUSH
86806: LD_EXP 52
86810: PUSH
86811: LD_VAR 0 4
86815: ARRAY
86816: PUSH
86817: LD_INT 1
86819: ARRAY
86820: PPUSH
86821: CALL 30522 0 2
86825: IFFALSE 86914
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
86827: LD_ADDR_EXP 52
86831: PUSH
86832: LD_EXP 52
86836: PPUSH
86837: LD_VAR 0 4
86841: PPUSH
86842: LD_EXP 52
86846: PUSH
86847: LD_VAR 0 4
86851: ARRAY
86852: PPUSH
86853: LD_INT 1
86855: PPUSH
86856: CALL_OW 3
86860: PPUSH
86861: CALL_OW 1
86865: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
86866: LD_ADDR_EXP 54
86870: PUSH
86871: LD_EXP 54
86875: PPUSH
86876: LD_VAR 0 4
86880: PUSH
86881: LD_EXP 54
86885: PUSH
86886: LD_VAR 0 4
86890: ARRAY
86891: PUSH
86892: LD_INT 1
86894: PLUS
86895: PUSH
86896: EMPTY
86897: LIST
86898: LIST
86899: PPUSH
86900: LD_VAR 0 1
86904: PPUSH
86905: CALL 24315 0 3
86909: ST_TO_ADDR
// exit ;
86910: POP
86911: POP
86912: GO 86918
// end ; end ;
86914: GO 86762
86916: POP
86917: POP
// end ;
86918: LD_VAR 0 3
86922: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
86923: LD_INT 0
86925: PPUSH
86926: PPUSH
86927: PPUSH
// if not mc_bases or not skirmish then
86928: LD_EXP 47
86932: NOT
86933: PUSH
86934: LD_EXP 45
86938: NOT
86939: OR
86940: IFFALSE 86944
// exit ;
86942: GO 87134
// for i = 1 to mc_bases do
86944: LD_ADDR_VAR 0 4
86948: PUSH
86949: DOUBLE
86950: LD_INT 1
86952: DEC
86953: ST_TO_ADDR
86954: LD_EXP 47
86958: PUSH
86959: FOR_TO
86960: IFFALSE 87047
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
86962: LD_VAR 0 1
86966: PUSH
86967: LD_EXP 55
86971: PUSH
86972: LD_VAR 0 4
86976: ARRAY
86977: IN
86978: PUSH
86979: LD_VAR 0 1
86983: PUSH
86984: LD_EXP 56
86988: PUSH
86989: LD_VAR 0 4
86993: ARRAY
86994: IN
86995: NOT
86996: AND
86997: IFFALSE 87045
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
86999: LD_ADDR_EXP 56
87003: PUSH
87004: LD_EXP 56
87008: PPUSH
87009: LD_VAR 0 4
87013: PUSH
87014: LD_EXP 56
87018: PUSH
87019: LD_VAR 0 4
87023: ARRAY
87024: PUSH
87025: LD_INT 1
87027: PLUS
87028: PUSH
87029: EMPTY
87030: LIST
87031: LIST
87032: PPUSH
87033: LD_VAR 0 1
87037: PPUSH
87038: CALL 24315 0 3
87042: ST_TO_ADDR
// break ;
87043: GO 87047
// end ; end ;
87045: GO 86959
87047: POP
87048: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
87049: LD_VAR 0 1
87053: PPUSH
87054: CALL_OW 257
87058: PUSH
87059: LD_EXP 73
87063: IN
87064: PUSH
87065: LD_VAR 0 1
87069: PPUSH
87070: CALL_OW 266
87074: PUSH
87075: LD_INT 5
87077: EQUAL
87078: AND
87079: PUSH
87080: LD_VAR 0 2
87084: PPUSH
87085: CALL_OW 110
87089: PUSH
87090: LD_INT 18
87092: NONEQUAL
87093: AND
87094: IFFALSE 87134
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
87096: LD_VAR 0 2
87100: PPUSH
87101: CALL_OW 257
87105: PUSH
87106: LD_INT 5
87108: PUSH
87109: LD_INT 8
87111: PUSH
87112: LD_INT 9
87114: PUSH
87115: EMPTY
87116: LIST
87117: LIST
87118: LIST
87119: IN
87120: IFFALSE 87134
// SetClass ( unit , 1 ) ;
87122: LD_VAR 0 2
87126: PPUSH
87127: LD_INT 1
87129: PPUSH
87130: CALL_OW 336
// end ;
87134: LD_VAR 0 3
87138: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
87139: LD_INT 0
87141: PPUSH
87142: PPUSH
// if not mc_bases or not skirmish then
87143: LD_EXP 47
87147: NOT
87148: PUSH
87149: LD_EXP 45
87153: NOT
87154: OR
87155: IFFALSE 87159
// exit ;
87157: GO 87275
// if GetLives ( abandoned_vehicle ) > 250 then
87159: LD_VAR 0 2
87163: PPUSH
87164: CALL_OW 256
87168: PUSH
87169: LD_INT 250
87171: GREATER
87172: IFFALSE 87176
// exit ;
87174: GO 87275
// for i = 1 to mc_bases do
87176: LD_ADDR_VAR 0 6
87180: PUSH
87181: DOUBLE
87182: LD_INT 1
87184: DEC
87185: ST_TO_ADDR
87186: LD_EXP 47
87190: PUSH
87191: FOR_TO
87192: IFFALSE 87273
// begin if driver in mc_bases [ i ] then
87194: LD_VAR 0 1
87198: PUSH
87199: LD_EXP 47
87203: PUSH
87204: LD_VAR 0 6
87208: ARRAY
87209: IN
87210: IFFALSE 87271
// begin ComMoveToNearbyEntrance ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
87212: LD_VAR 0 1
87216: PPUSH
87217: LD_EXP 47
87221: PUSH
87222: LD_VAR 0 6
87226: ARRAY
87227: PPUSH
87228: LD_INT 2
87230: PUSH
87231: LD_INT 30
87233: PUSH
87234: LD_INT 0
87236: PUSH
87237: EMPTY
87238: LIST
87239: LIST
87240: PUSH
87241: LD_INT 30
87243: PUSH
87244: LD_INT 1
87246: PUSH
87247: EMPTY
87248: LIST
87249: LIST
87250: PUSH
87251: EMPTY
87252: LIST
87253: LIST
87254: LIST
87255: PPUSH
87256: CALL_OW 72
87260: PUSH
87261: LD_INT 1
87263: ARRAY
87264: PPUSH
87265: CALL 56558 0 2
// break ;
87269: GO 87273
// end ; end ;
87271: GO 87191
87273: POP
87274: POP
// end ; end_of_file end_of_file
87275: LD_VAR 0 5
87279: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
87280: LD_VAR 0 2
87284: PUSH
87285: LD_INT 100
87287: EQUAL
87288: IFFALSE 88237
// begin if not StreamModeActive then
87290: LD_EXP 90
87294: NOT
87295: IFFALSE 87305
// StreamModeActive := true ;
87297: LD_ADDR_EXP 90
87301: PUSH
87302: LD_INT 1
87304: ST_TO_ADDR
// if p3 = 0 then
87305: LD_VAR 0 3
87309: PUSH
87310: LD_INT 0
87312: EQUAL
87313: IFFALSE 87319
// InitStreamMode ;
87315: CALL 88395 0 0
// if p3 = 1 then
87319: LD_VAR 0 3
87323: PUSH
87324: LD_INT 1
87326: EQUAL
87327: IFFALSE 87337
// sRocket := true ;
87329: LD_ADDR_EXP 95
87333: PUSH
87334: LD_INT 1
87336: ST_TO_ADDR
// if p3 = 2 then
87337: LD_VAR 0 3
87341: PUSH
87342: LD_INT 2
87344: EQUAL
87345: IFFALSE 87355
// sSpeed := true ;
87347: LD_ADDR_EXP 94
87351: PUSH
87352: LD_INT 1
87354: ST_TO_ADDR
// if p3 = 3 then
87355: LD_VAR 0 3
87359: PUSH
87360: LD_INT 3
87362: EQUAL
87363: IFFALSE 87373
// sEngine := true ;
87365: LD_ADDR_EXP 96
87369: PUSH
87370: LD_INT 1
87372: ST_TO_ADDR
// if p3 = 4 then
87373: LD_VAR 0 3
87377: PUSH
87378: LD_INT 4
87380: EQUAL
87381: IFFALSE 87391
// sSpec := true ;
87383: LD_ADDR_EXP 93
87387: PUSH
87388: LD_INT 1
87390: ST_TO_ADDR
// if p3 = 5 then
87391: LD_VAR 0 3
87395: PUSH
87396: LD_INT 5
87398: EQUAL
87399: IFFALSE 87409
// sLevel := true ;
87401: LD_ADDR_EXP 97
87405: PUSH
87406: LD_INT 1
87408: ST_TO_ADDR
// if p3 = 6 then
87409: LD_VAR 0 3
87413: PUSH
87414: LD_INT 6
87416: EQUAL
87417: IFFALSE 87427
// sArmoury := true ;
87419: LD_ADDR_EXP 98
87423: PUSH
87424: LD_INT 1
87426: ST_TO_ADDR
// if p3 = 7 then
87427: LD_VAR 0 3
87431: PUSH
87432: LD_INT 7
87434: EQUAL
87435: IFFALSE 87445
// sRadar := true ;
87437: LD_ADDR_EXP 99
87441: PUSH
87442: LD_INT 1
87444: ST_TO_ADDR
// if p3 = 8 then
87445: LD_VAR 0 3
87449: PUSH
87450: LD_INT 8
87452: EQUAL
87453: IFFALSE 87463
// sBunker := true ;
87455: LD_ADDR_EXP 100
87459: PUSH
87460: LD_INT 1
87462: ST_TO_ADDR
// if p3 = 9 then
87463: LD_VAR 0 3
87467: PUSH
87468: LD_INT 9
87470: EQUAL
87471: IFFALSE 87481
// sHack := true ;
87473: LD_ADDR_EXP 101
87477: PUSH
87478: LD_INT 1
87480: ST_TO_ADDR
// if p3 = 10 then
87481: LD_VAR 0 3
87485: PUSH
87486: LD_INT 10
87488: EQUAL
87489: IFFALSE 87499
// sFire := true ;
87491: LD_ADDR_EXP 102
87495: PUSH
87496: LD_INT 1
87498: ST_TO_ADDR
// if p3 = 11 then
87499: LD_VAR 0 3
87503: PUSH
87504: LD_INT 11
87506: EQUAL
87507: IFFALSE 87517
// sRefresh := true ;
87509: LD_ADDR_EXP 103
87513: PUSH
87514: LD_INT 1
87516: ST_TO_ADDR
// if p3 = 12 then
87517: LD_VAR 0 3
87521: PUSH
87522: LD_INT 12
87524: EQUAL
87525: IFFALSE 87535
// sExp := true ;
87527: LD_ADDR_EXP 104
87531: PUSH
87532: LD_INT 1
87534: ST_TO_ADDR
// if p3 = 13 then
87535: LD_VAR 0 3
87539: PUSH
87540: LD_INT 13
87542: EQUAL
87543: IFFALSE 87553
// sDepot := true ;
87545: LD_ADDR_EXP 105
87549: PUSH
87550: LD_INT 1
87552: ST_TO_ADDR
// if p3 = 14 then
87553: LD_VAR 0 3
87557: PUSH
87558: LD_INT 14
87560: EQUAL
87561: IFFALSE 87571
// sFlag := true ;
87563: LD_ADDR_EXP 106
87567: PUSH
87568: LD_INT 1
87570: ST_TO_ADDR
// if p3 = 15 then
87571: LD_VAR 0 3
87575: PUSH
87576: LD_INT 15
87578: EQUAL
87579: IFFALSE 87589
// sKamikadze := true ;
87581: LD_ADDR_EXP 114
87585: PUSH
87586: LD_INT 1
87588: ST_TO_ADDR
// if p3 = 16 then
87589: LD_VAR 0 3
87593: PUSH
87594: LD_INT 16
87596: EQUAL
87597: IFFALSE 87607
// sTroll := true ;
87599: LD_ADDR_EXP 115
87603: PUSH
87604: LD_INT 1
87606: ST_TO_ADDR
// if p3 = 17 then
87607: LD_VAR 0 3
87611: PUSH
87612: LD_INT 17
87614: EQUAL
87615: IFFALSE 87625
// sSlow := true ;
87617: LD_ADDR_EXP 116
87621: PUSH
87622: LD_INT 1
87624: ST_TO_ADDR
// if p3 = 18 then
87625: LD_VAR 0 3
87629: PUSH
87630: LD_INT 18
87632: EQUAL
87633: IFFALSE 87643
// sLack := true ;
87635: LD_ADDR_EXP 117
87639: PUSH
87640: LD_INT 1
87642: ST_TO_ADDR
// if p3 = 19 then
87643: LD_VAR 0 3
87647: PUSH
87648: LD_INT 19
87650: EQUAL
87651: IFFALSE 87661
// sTank := true ;
87653: LD_ADDR_EXP 119
87657: PUSH
87658: LD_INT 1
87660: ST_TO_ADDR
// if p3 = 20 then
87661: LD_VAR 0 3
87665: PUSH
87666: LD_INT 20
87668: EQUAL
87669: IFFALSE 87679
// sRemote := true ;
87671: LD_ADDR_EXP 120
87675: PUSH
87676: LD_INT 1
87678: ST_TO_ADDR
// if p3 = 21 then
87679: LD_VAR 0 3
87683: PUSH
87684: LD_INT 21
87686: EQUAL
87687: IFFALSE 87697
// sPowell := true ;
87689: LD_ADDR_EXP 121
87693: PUSH
87694: LD_INT 1
87696: ST_TO_ADDR
// if p3 = 22 then
87697: LD_VAR 0 3
87701: PUSH
87702: LD_INT 22
87704: EQUAL
87705: IFFALSE 87715
// sTeleport := true ;
87707: LD_ADDR_EXP 124
87711: PUSH
87712: LD_INT 1
87714: ST_TO_ADDR
// if p3 = 23 then
87715: LD_VAR 0 3
87719: PUSH
87720: LD_INT 23
87722: EQUAL
87723: IFFALSE 87733
// sOilTower := true ;
87725: LD_ADDR_EXP 126
87729: PUSH
87730: LD_INT 1
87732: ST_TO_ADDR
// if p3 = 24 then
87733: LD_VAR 0 3
87737: PUSH
87738: LD_INT 24
87740: EQUAL
87741: IFFALSE 87751
// sShovel := true ;
87743: LD_ADDR_EXP 127
87747: PUSH
87748: LD_INT 1
87750: ST_TO_ADDR
// if p3 = 25 then
87751: LD_VAR 0 3
87755: PUSH
87756: LD_INT 25
87758: EQUAL
87759: IFFALSE 87769
// sSheik := true ;
87761: LD_ADDR_EXP 128
87765: PUSH
87766: LD_INT 1
87768: ST_TO_ADDR
// if p3 = 26 then
87769: LD_VAR 0 3
87773: PUSH
87774: LD_INT 26
87776: EQUAL
87777: IFFALSE 87787
// sEarthquake := true ;
87779: LD_ADDR_EXP 130
87783: PUSH
87784: LD_INT 1
87786: ST_TO_ADDR
// if p3 = 27 then
87787: LD_VAR 0 3
87791: PUSH
87792: LD_INT 27
87794: EQUAL
87795: IFFALSE 87805
// sAI := true ;
87797: LD_ADDR_EXP 131
87801: PUSH
87802: LD_INT 1
87804: ST_TO_ADDR
// if p3 = 28 then
87805: LD_VAR 0 3
87809: PUSH
87810: LD_INT 28
87812: EQUAL
87813: IFFALSE 87823
// sCargo := true ;
87815: LD_ADDR_EXP 134
87819: PUSH
87820: LD_INT 1
87822: ST_TO_ADDR
// if p3 = 29 then
87823: LD_VAR 0 3
87827: PUSH
87828: LD_INT 29
87830: EQUAL
87831: IFFALSE 87841
// sDLaser := true ;
87833: LD_ADDR_EXP 135
87837: PUSH
87838: LD_INT 1
87840: ST_TO_ADDR
// if p3 = 30 then
87841: LD_VAR 0 3
87845: PUSH
87846: LD_INT 30
87848: EQUAL
87849: IFFALSE 87859
// sExchange := true ;
87851: LD_ADDR_EXP 136
87855: PUSH
87856: LD_INT 1
87858: ST_TO_ADDR
// if p3 = 31 then
87859: LD_VAR 0 3
87863: PUSH
87864: LD_INT 31
87866: EQUAL
87867: IFFALSE 87877
// sFac := true ;
87869: LD_ADDR_EXP 137
87873: PUSH
87874: LD_INT 1
87876: ST_TO_ADDR
// if p3 = 32 then
87877: LD_VAR 0 3
87881: PUSH
87882: LD_INT 32
87884: EQUAL
87885: IFFALSE 87895
// sPower := true ;
87887: LD_ADDR_EXP 138
87891: PUSH
87892: LD_INT 1
87894: ST_TO_ADDR
// if p3 = 33 then
87895: LD_VAR 0 3
87899: PUSH
87900: LD_INT 33
87902: EQUAL
87903: IFFALSE 87913
// sRandom := true ;
87905: LD_ADDR_EXP 139
87909: PUSH
87910: LD_INT 1
87912: ST_TO_ADDR
// if p3 = 34 then
87913: LD_VAR 0 3
87917: PUSH
87918: LD_INT 34
87920: EQUAL
87921: IFFALSE 87931
// sShield := true ;
87923: LD_ADDR_EXP 140
87927: PUSH
87928: LD_INT 1
87930: ST_TO_ADDR
// if p3 = 35 then
87931: LD_VAR 0 3
87935: PUSH
87936: LD_INT 35
87938: EQUAL
87939: IFFALSE 87949
// sTime := true ;
87941: LD_ADDR_EXP 141
87945: PUSH
87946: LD_INT 1
87948: ST_TO_ADDR
// if p3 = 36 then
87949: LD_VAR 0 3
87953: PUSH
87954: LD_INT 36
87956: EQUAL
87957: IFFALSE 87967
// sTools := true ;
87959: LD_ADDR_EXP 142
87963: PUSH
87964: LD_INT 1
87966: ST_TO_ADDR
// if p3 = 101 then
87967: LD_VAR 0 3
87971: PUSH
87972: LD_INT 101
87974: EQUAL
87975: IFFALSE 87985
// sSold := true ;
87977: LD_ADDR_EXP 107
87981: PUSH
87982: LD_INT 1
87984: ST_TO_ADDR
// if p3 = 102 then
87985: LD_VAR 0 3
87989: PUSH
87990: LD_INT 102
87992: EQUAL
87993: IFFALSE 88003
// sDiff := true ;
87995: LD_ADDR_EXP 108
87999: PUSH
88000: LD_INT 1
88002: ST_TO_ADDR
// if p3 = 103 then
88003: LD_VAR 0 3
88007: PUSH
88008: LD_INT 103
88010: EQUAL
88011: IFFALSE 88021
// sFog := true ;
88013: LD_ADDR_EXP 111
88017: PUSH
88018: LD_INT 1
88020: ST_TO_ADDR
// if p3 = 104 then
88021: LD_VAR 0 3
88025: PUSH
88026: LD_INT 104
88028: EQUAL
88029: IFFALSE 88039
// sReset := true ;
88031: LD_ADDR_EXP 112
88035: PUSH
88036: LD_INT 1
88038: ST_TO_ADDR
// if p3 = 105 then
88039: LD_VAR 0 3
88043: PUSH
88044: LD_INT 105
88046: EQUAL
88047: IFFALSE 88057
// sSun := true ;
88049: LD_ADDR_EXP 113
88053: PUSH
88054: LD_INT 1
88056: ST_TO_ADDR
// if p3 = 106 then
88057: LD_VAR 0 3
88061: PUSH
88062: LD_INT 106
88064: EQUAL
88065: IFFALSE 88075
// sTiger := true ;
88067: LD_ADDR_EXP 109
88071: PUSH
88072: LD_INT 1
88074: ST_TO_ADDR
// if p3 = 107 then
88075: LD_VAR 0 3
88079: PUSH
88080: LD_INT 107
88082: EQUAL
88083: IFFALSE 88093
// sBomb := true ;
88085: LD_ADDR_EXP 110
88089: PUSH
88090: LD_INT 1
88092: ST_TO_ADDR
// if p3 = 108 then
88093: LD_VAR 0 3
88097: PUSH
88098: LD_INT 108
88100: EQUAL
88101: IFFALSE 88111
// sWound := true ;
88103: LD_ADDR_EXP 118
88107: PUSH
88108: LD_INT 1
88110: ST_TO_ADDR
// if p3 = 109 then
88111: LD_VAR 0 3
88115: PUSH
88116: LD_INT 109
88118: EQUAL
88119: IFFALSE 88129
// sBetray := true ;
88121: LD_ADDR_EXP 122
88125: PUSH
88126: LD_INT 1
88128: ST_TO_ADDR
// if p3 = 110 then
88129: LD_VAR 0 3
88133: PUSH
88134: LD_INT 110
88136: EQUAL
88137: IFFALSE 88147
// sContamin := true ;
88139: LD_ADDR_EXP 123
88143: PUSH
88144: LD_INT 1
88146: ST_TO_ADDR
// if p3 = 111 then
88147: LD_VAR 0 3
88151: PUSH
88152: LD_INT 111
88154: EQUAL
88155: IFFALSE 88165
// sOil := true ;
88157: LD_ADDR_EXP 125
88161: PUSH
88162: LD_INT 1
88164: ST_TO_ADDR
// if p3 = 112 then
88165: LD_VAR 0 3
88169: PUSH
88170: LD_INT 112
88172: EQUAL
88173: IFFALSE 88183
// sStu := true ;
88175: LD_ADDR_EXP 129
88179: PUSH
88180: LD_INT 1
88182: ST_TO_ADDR
// if p3 = 113 then
88183: LD_VAR 0 3
88187: PUSH
88188: LD_INT 113
88190: EQUAL
88191: IFFALSE 88201
// sBazooka := true ;
88193: LD_ADDR_EXP 132
88197: PUSH
88198: LD_INT 1
88200: ST_TO_ADDR
// if p3 = 114 then
88201: LD_VAR 0 3
88205: PUSH
88206: LD_INT 114
88208: EQUAL
88209: IFFALSE 88219
// sMortar := true ;
88211: LD_ADDR_EXP 133
88215: PUSH
88216: LD_INT 1
88218: ST_TO_ADDR
// if p3 = 115 then
88219: LD_VAR 0 3
88223: PUSH
88224: LD_INT 115
88226: EQUAL
88227: IFFALSE 88237
// sRanger := true ;
88229: LD_ADDR_EXP 143
88233: PUSH
88234: LD_INT 1
88236: ST_TO_ADDR
// end ; if p2 = 101 then
88237: LD_VAR 0 2
88241: PUSH
88242: LD_INT 101
88244: EQUAL
88245: IFFALSE 88373
// begin case p3 of 1 :
88247: LD_VAR 0 3
88251: PUSH
88252: LD_INT 1
88254: DOUBLE
88255: EQUAL
88256: IFTRUE 88260
88258: GO 88267
88260: POP
// hHackUnlimitedResources ; 2 :
88261: CALL 99408 0 0
88265: GO 88373
88267: LD_INT 2
88269: DOUBLE
88270: EQUAL
88271: IFTRUE 88275
88273: GO 88282
88275: POP
// hHackSetLevel10 ; 3 :
88276: CALL 99541 0 0
88280: GO 88373
88282: LD_INT 3
88284: DOUBLE
88285: EQUAL
88286: IFTRUE 88290
88288: GO 88297
88290: POP
// hHackSetLevel10YourUnits ; 4 :
88291: CALL 99626 0 0
88295: GO 88373
88297: LD_INT 4
88299: DOUBLE
88300: EQUAL
88301: IFTRUE 88305
88303: GO 88312
88305: POP
// hHackInvincible ; 5 :
88306: CALL 100074 0 0
88310: GO 88373
88312: LD_INT 5
88314: DOUBLE
88315: EQUAL
88316: IFTRUE 88320
88318: GO 88327
88320: POP
// hHackInvisible ; 6 :
88321: CALL 100185 0 0
88325: GO 88373
88327: LD_INT 6
88329: DOUBLE
88330: EQUAL
88331: IFTRUE 88335
88333: GO 88342
88335: POP
// hHackChangeYourSide ; 7 :
88336: CALL 100242 0 0
88340: GO 88373
88342: LD_INT 7
88344: DOUBLE
88345: EQUAL
88346: IFTRUE 88350
88348: GO 88357
88350: POP
// hHackChangeUnitSide ; 8 :
88351: CALL 100284 0 0
88355: GO 88373
88357: LD_INT 8
88359: DOUBLE
88360: EQUAL
88361: IFTRUE 88365
88363: GO 88372
88365: POP
// hHackFog ; end ;
88366: CALL 100385 0 0
88370: GO 88373
88372: POP
// end ; end ;
88373: PPOPN 6
88375: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
88376: GO 88378
88378: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
88379: LD_STRING initStreamRollete();
88381: PPUSH
88382: CALL_OW 559
// InitStreamMode ;
88386: CALL 88395 0 0
// DefineStreamItems ( ) ;
88390: CALL 88835 0 0
// end ;
88394: END
// function InitStreamMode ; begin
88395: LD_INT 0
88397: PPUSH
// streamModeActive := false ;
88398: LD_ADDR_EXP 90
88402: PUSH
88403: LD_INT 0
88405: ST_TO_ADDR
// normalCounter := 36 ;
88406: LD_ADDR_EXP 91
88410: PUSH
88411: LD_INT 36
88413: ST_TO_ADDR
// hardcoreCounter := 16 ;
88414: LD_ADDR_EXP 92
88418: PUSH
88419: LD_INT 16
88421: ST_TO_ADDR
// sRocket := false ;
88422: LD_ADDR_EXP 95
88426: PUSH
88427: LD_INT 0
88429: ST_TO_ADDR
// sSpeed := false ;
88430: LD_ADDR_EXP 94
88434: PUSH
88435: LD_INT 0
88437: ST_TO_ADDR
// sEngine := false ;
88438: LD_ADDR_EXP 96
88442: PUSH
88443: LD_INT 0
88445: ST_TO_ADDR
// sSpec := false ;
88446: LD_ADDR_EXP 93
88450: PUSH
88451: LD_INT 0
88453: ST_TO_ADDR
// sLevel := false ;
88454: LD_ADDR_EXP 97
88458: PUSH
88459: LD_INT 0
88461: ST_TO_ADDR
// sArmoury := false ;
88462: LD_ADDR_EXP 98
88466: PUSH
88467: LD_INT 0
88469: ST_TO_ADDR
// sRadar := false ;
88470: LD_ADDR_EXP 99
88474: PUSH
88475: LD_INT 0
88477: ST_TO_ADDR
// sBunker := false ;
88478: LD_ADDR_EXP 100
88482: PUSH
88483: LD_INT 0
88485: ST_TO_ADDR
// sHack := false ;
88486: LD_ADDR_EXP 101
88490: PUSH
88491: LD_INT 0
88493: ST_TO_ADDR
// sFire := false ;
88494: LD_ADDR_EXP 102
88498: PUSH
88499: LD_INT 0
88501: ST_TO_ADDR
// sRefresh := false ;
88502: LD_ADDR_EXP 103
88506: PUSH
88507: LD_INT 0
88509: ST_TO_ADDR
// sExp := false ;
88510: LD_ADDR_EXP 104
88514: PUSH
88515: LD_INT 0
88517: ST_TO_ADDR
// sDepot := false ;
88518: LD_ADDR_EXP 105
88522: PUSH
88523: LD_INT 0
88525: ST_TO_ADDR
// sFlag := false ;
88526: LD_ADDR_EXP 106
88530: PUSH
88531: LD_INT 0
88533: ST_TO_ADDR
// sKamikadze := false ;
88534: LD_ADDR_EXP 114
88538: PUSH
88539: LD_INT 0
88541: ST_TO_ADDR
// sTroll := false ;
88542: LD_ADDR_EXP 115
88546: PUSH
88547: LD_INT 0
88549: ST_TO_ADDR
// sSlow := false ;
88550: LD_ADDR_EXP 116
88554: PUSH
88555: LD_INT 0
88557: ST_TO_ADDR
// sLack := false ;
88558: LD_ADDR_EXP 117
88562: PUSH
88563: LD_INT 0
88565: ST_TO_ADDR
// sTank := false ;
88566: LD_ADDR_EXP 119
88570: PUSH
88571: LD_INT 0
88573: ST_TO_ADDR
// sRemote := false ;
88574: LD_ADDR_EXP 120
88578: PUSH
88579: LD_INT 0
88581: ST_TO_ADDR
// sPowell := false ;
88582: LD_ADDR_EXP 121
88586: PUSH
88587: LD_INT 0
88589: ST_TO_ADDR
// sTeleport := false ;
88590: LD_ADDR_EXP 124
88594: PUSH
88595: LD_INT 0
88597: ST_TO_ADDR
// sOilTower := false ;
88598: LD_ADDR_EXP 126
88602: PUSH
88603: LD_INT 0
88605: ST_TO_ADDR
// sShovel := false ;
88606: LD_ADDR_EXP 127
88610: PUSH
88611: LD_INT 0
88613: ST_TO_ADDR
// sSheik := false ;
88614: LD_ADDR_EXP 128
88618: PUSH
88619: LD_INT 0
88621: ST_TO_ADDR
// sEarthquake := false ;
88622: LD_ADDR_EXP 130
88626: PUSH
88627: LD_INT 0
88629: ST_TO_ADDR
// sAI := false ;
88630: LD_ADDR_EXP 131
88634: PUSH
88635: LD_INT 0
88637: ST_TO_ADDR
// sCargo := false ;
88638: LD_ADDR_EXP 134
88642: PUSH
88643: LD_INT 0
88645: ST_TO_ADDR
// sDLaser := false ;
88646: LD_ADDR_EXP 135
88650: PUSH
88651: LD_INT 0
88653: ST_TO_ADDR
// sExchange := false ;
88654: LD_ADDR_EXP 136
88658: PUSH
88659: LD_INT 0
88661: ST_TO_ADDR
// sFac := false ;
88662: LD_ADDR_EXP 137
88666: PUSH
88667: LD_INT 0
88669: ST_TO_ADDR
// sPower := false ;
88670: LD_ADDR_EXP 138
88674: PUSH
88675: LD_INT 0
88677: ST_TO_ADDR
// sRandom := false ;
88678: LD_ADDR_EXP 139
88682: PUSH
88683: LD_INT 0
88685: ST_TO_ADDR
// sShield := false ;
88686: LD_ADDR_EXP 140
88690: PUSH
88691: LD_INT 0
88693: ST_TO_ADDR
// sTime := false ;
88694: LD_ADDR_EXP 141
88698: PUSH
88699: LD_INT 0
88701: ST_TO_ADDR
// sTools := false ;
88702: LD_ADDR_EXP 142
88706: PUSH
88707: LD_INT 0
88709: ST_TO_ADDR
// sSold := false ;
88710: LD_ADDR_EXP 107
88714: PUSH
88715: LD_INT 0
88717: ST_TO_ADDR
// sDiff := false ;
88718: LD_ADDR_EXP 108
88722: PUSH
88723: LD_INT 0
88725: ST_TO_ADDR
// sFog := false ;
88726: LD_ADDR_EXP 111
88730: PUSH
88731: LD_INT 0
88733: ST_TO_ADDR
// sReset := false ;
88734: LD_ADDR_EXP 112
88738: PUSH
88739: LD_INT 0
88741: ST_TO_ADDR
// sSun := false ;
88742: LD_ADDR_EXP 113
88746: PUSH
88747: LD_INT 0
88749: ST_TO_ADDR
// sTiger := false ;
88750: LD_ADDR_EXP 109
88754: PUSH
88755: LD_INT 0
88757: ST_TO_ADDR
// sBomb := false ;
88758: LD_ADDR_EXP 110
88762: PUSH
88763: LD_INT 0
88765: ST_TO_ADDR
// sWound := false ;
88766: LD_ADDR_EXP 118
88770: PUSH
88771: LD_INT 0
88773: ST_TO_ADDR
// sBetray := false ;
88774: LD_ADDR_EXP 122
88778: PUSH
88779: LD_INT 0
88781: ST_TO_ADDR
// sContamin := false ;
88782: LD_ADDR_EXP 123
88786: PUSH
88787: LD_INT 0
88789: ST_TO_ADDR
// sOil := false ;
88790: LD_ADDR_EXP 125
88794: PUSH
88795: LD_INT 0
88797: ST_TO_ADDR
// sStu := false ;
88798: LD_ADDR_EXP 129
88802: PUSH
88803: LD_INT 0
88805: ST_TO_ADDR
// sBazooka := false ;
88806: LD_ADDR_EXP 132
88810: PUSH
88811: LD_INT 0
88813: ST_TO_ADDR
// sMortar := false ;
88814: LD_ADDR_EXP 133
88818: PUSH
88819: LD_INT 0
88821: ST_TO_ADDR
// sRanger := false ;
88822: LD_ADDR_EXP 143
88826: PUSH
88827: LD_INT 0
88829: ST_TO_ADDR
// end ;
88830: LD_VAR 0 1
88834: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
88835: LD_INT 0
88837: PPUSH
88838: PPUSH
88839: PPUSH
88840: PPUSH
88841: PPUSH
// result := [ ] ;
88842: LD_ADDR_VAR 0 1
88846: PUSH
88847: EMPTY
88848: ST_TO_ADDR
// if campaign_id = 1 then
88849: LD_OWVAR 69
88853: PUSH
88854: LD_INT 1
88856: EQUAL
88857: IFFALSE 91795
// begin case mission_number of 1 :
88859: LD_OWVAR 70
88863: PUSH
88864: LD_INT 1
88866: DOUBLE
88867: EQUAL
88868: IFTRUE 88872
88870: GO 88936
88872: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
88873: LD_ADDR_VAR 0 1
88877: PUSH
88878: LD_INT 2
88880: PUSH
88881: LD_INT 4
88883: PUSH
88884: LD_INT 11
88886: PUSH
88887: LD_INT 12
88889: PUSH
88890: LD_INT 15
88892: PUSH
88893: LD_INT 16
88895: PUSH
88896: LD_INT 22
88898: PUSH
88899: LD_INT 23
88901: PUSH
88902: LD_INT 26
88904: PUSH
88905: EMPTY
88906: LIST
88907: LIST
88908: LIST
88909: LIST
88910: LIST
88911: LIST
88912: LIST
88913: LIST
88914: LIST
88915: PUSH
88916: LD_INT 101
88918: PUSH
88919: LD_INT 102
88921: PUSH
88922: LD_INT 106
88924: PUSH
88925: EMPTY
88926: LIST
88927: LIST
88928: LIST
88929: PUSH
88930: EMPTY
88931: LIST
88932: LIST
88933: ST_TO_ADDR
88934: GO 91793
88936: LD_INT 2
88938: DOUBLE
88939: EQUAL
88940: IFTRUE 88944
88942: GO 89016
88944: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
88945: LD_ADDR_VAR 0 1
88949: PUSH
88950: LD_INT 2
88952: PUSH
88953: LD_INT 4
88955: PUSH
88956: LD_INT 11
88958: PUSH
88959: LD_INT 12
88961: PUSH
88962: LD_INT 15
88964: PUSH
88965: LD_INT 16
88967: PUSH
88968: LD_INT 22
88970: PUSH
88971: LD_INT 23
88973: PUSH
88974: LD_INT 26
88976: PUSH
88977: EMPTY
88978: LIST
88979: LIST
88980: LIST
88981: LIST
88982: LIST
88983: LIST
88984: LIST
88985: LIST
88986: LIST
88987: PUSH
88988: LD_INT 101
88990: PUSH
88991: LD_INT 102
88993: PUSH
88994: LD_INT 105
88996: PUSH
88997: LD_INT 106
88999: PUSH
89000: LD_INT 108
89002: PUSH
89003: EMPTY
89004: LIST
89005: LIST
89006: LIST
89007: LIST
89008: LIST
89009: PUSH
89010: EMPTY
89011: LIST
89012: LIST
89013: ST_TO_ADDR
89014: GO 91793
89016: LD_INT 3
89018: DOUBLE
89019: EQUAL
89020: IFTRUE 89024
89022: GO 89100
89024: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
89025: LD_ADDR_VAR 0 1
89029: PUSH
89030: LD_INT 2
89032: PUSH
89033: LD_INT 4
89035: PUSH
89036: LD_INT 5
89038: PUSH
89039: LD_INT 11
89041: PUSH
89042: LD_INT 12
89044: PUSH
89045: LD_INT 15
89047: PUSH
89048: LD_INT 16
89050: PUSH
89051: LD_INT 22
89053: PUSH
89054: LD_INT 26
89056: PUSH
89057: LD_INT 36
89059: PUSH
89060: EMPTY
89061: LIST
89062: LIST
89063: LIST
89064: LIST
89065: LIST
89066: LIST
89067: LIST
89068: LIST
89069: LIST
89070: LIST
89071: PUSH
89072: LD_INT 101
89074: PUSH
89075: LD_INT 102
89077: PUSH
89078: LD_INT 105
89080: PUSH
89081: LD_INT 106
89083: PUSH
89084: LD_INT 108
89086: PUSH
89087: EMPTY
89088: LIST
89089: LIST
89090: LIST
89091: LIST
89092: LIST
89093: PUSH
89094: EMPTY
89095: LIST
89096: LIST
89097: ST_TO_ADDR
89098: GO 91793
89100: LD_INT 4
89102: DOUBLE
89103: EQUAL
89104: IFTRUE 89108
89106: GO 89192
89108: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
89109: LD_ADDR_VAR 0 1
89113: PUSH
89114: LD_INT 2
89116: PUSH
89117: LD_INT 4
89119: PUSH
89120: LD_INT 5
89122: PUSH
89123: LD_INT 8
89125: PUSH
89126: LD_INT 11
89128: PUSH
89129: LD_INT 12
89131: PUSH
89132: LD_INT 15
89134: PUSH
89135: LD_INT 16
89137: PUSH
89138: LD_INT 22
89140: PUSH
89141: LD_INT 23
89143: PUSH
89144: LD_INT 26
89146: PUSH
89147: LD_INT 36
89149: PUSH
89150: EMPTY
89151: LIST
89152: LIST
89153: LIST
89154: LIST
89155: LIST
89156: LIST
89157: LIST
89158: LIST
89159: LIST
89160: LIST
89161: LIST
89162: LIST
89163: PUSH
89164: LD_INT 101
89166: PUSH
89167: LD_INT 102
89169: PUSH
89170: LD_INT 105
89172: PUSH
89173: LD_INT 106
89175: PUSH
89176: LD_INT 108
89178: PUSH
89179: EMPTY
89180: LIST
89181: LIST
89182: LIST
89183: LIST
89184: LIST
89185: PUSH
89186: EMPTY
89187: LIST
89188: LIST
89189: ST_TO_ADDR
89190: GO 91793
89192: LD_INT 5
89194: DOUBLE
89195: EQUAL
89196: IFTRUE 89200
89198: GO 89300
89200: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
89201: LD_ADDR_VAR 0 1
89205: PUSH
89206: LD_INT 2
89208: PUSH
89209: LD_INT 4
89211: PUSH
89212: LD_INT 5
89214: PUSH
89215: LD_INT 6
89217: PUSH
89218: LD_INT 8
89220: PUSH
89221: LD_INT 11
89223: PUSH
89224: LD_INT 12
89226: PUSH
89227: LD_INT 15
89229: PUSH
89230: LD_INT 16
89232: PUSH
89233: LD_INT 22
89235: PUSH
89236: LD_INT 23
89238: PUSH
89239: LD_INT 25
89241: PUSH
89242: LD_INT 26
89244: PUSH
89245: LD_INT 36
89247: PUSH
89248: EMPTY
89249: LIST
89250: LIST
89251: LIST
89252: LIST
89253: LIST
89254: LIST
89255: LIST
89256: LIST
89257: LIST
89258: LIST
89259: LIST
89260: LIST
89261: LIST
89262: LIST
89263: PUSH
89264: LD_INT 101
89266: PUSH
89267: LD_INT 102
89269: PUSH
89270: LD_INT 105
89272: PUSH
89273: LD_INT 106
89275: PUSH
89276: LD_INT 108
89278: PUSH
89279: LD_INT 109
89281: PUSH
89282: LD_INT 112
89284: PUSH
89285: EMPTY
89286: LIST
89287: LIST
89288: LIST
89289: LIST
89290: LIST
89291: LIST
89292: LIST
89293: PUSH
89294: EMPTY
89295: LIST
89296: LIST
89297: ST_TO_ADDR
89298: GO 91793
89300: LD_INT 6
89302: DOUBLE
89303: EQUAL
89304: IFTRUE 89308
89306: GO 89428
89308: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
89309: LD_ADDR_VAR 0 1
89313: PUSH
89314: LD_INT 2
89316: PUSH
89317: LD_INT 4
89319: PUSH
89320: LD_INT 5
89322: PUSH
89323: LD_INT 6
89325: PUSH
89326: LD_INT 8
89328: PUSH
89329: LD_INT 11
89331: PUSH
89332: LD_INT 12
89334: PUSH
89335: LD_INT 15
89337: PUSH
89338: LD_INT 16
89340: PUSH
89341: LD_INT 20
89343: PUSH
89344: LD_INT 21
89346: PUSH
89347: LD_INT 22
89349: PUSH
89350: LD_INT 23
89352: PUSH
89353: LD_INT 25
89355: PUSH
89356: LD_INT 26
89358: PUSH
89359: LD_INT 30
89361: PUSH
89362: LD_INT 31
89364: PUSH
89365: LD_INT 32
89367: PUSH
89368: LD_INT 36
89370: PUSH
89371: EMPTY
89372: LIST
89373: LIST
89374: LIST
89375: LIST
89376: LIST
89377: LIST
89378: LIST
89379: LIST
89380: LIST
89381: LIST
89382: LIST
89383: LIST
89384: LIST
89385: LIST
89386: LIST
89387: LIST
89388: LIST
89389: LIST
89390: LIST
89391: PUSH
89392: LD_INT 101
89394: PUSH
89395: LD_INT 102
89397: PUSH
89398: LD_INT 105
89400: PUSH
89401: LD_INT 106
89403: PUSH
89404: LD_INT 108
89406: PUSH
89407: LD_INT 109
89409: PUSH
89410: LD_INT 112
89412: PUSH
89413: EMPTY
89414: LIST
89415: LIST
89416: LIST
89417: LIST
89418: LIST
89419: LIST
89420: LIST
89421: PUSH
89422: EMPTY
89423: LIST
89424: LIST
89425: ST_TO_ADDR
89426: GO 91793
89428: LD_INT 7
89430: DOUBLE
89431: EQUAL
89432: IFTRUE 89436
89434: GO 89536
89436: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
89437: LD_ADDR_VAR 0 1
89441: PUSH
89442: LD_INT 2
89444: PUSH
89445: LD_INT 4
89447: PUSH
89448: LD_INT 5
89450: PUSH
89451: LD_INT 7
89453: PUSH
89454: LD_INT 11
89456: PUSH
89457: LD_INT 12
89459: PUSH
89460: LD_INT 15
89462: PUSH
89463: LD_INT 16
89465: PUSH
89466: LD_INT 20
89468: PUSH
89469: LD_INT 21
89471: PUSH
89472: LD_INT 22
89474: PUSH
89475: LD_INT 23
89477: PUSH
89478: LD_INT 25
89480: PUSH
89481: LD_INT 26
89483: PUSH
89484: EMPTY
89485: LIST
89486: LIST
89487: LIST
89488: LIST
89489: LIST
89490: LIST
89491: LIST
89492: LIST
89493: LIST
89494: LIST
89495: LIST
89496: LIST
89497: LIST
89498: LIST
89499: PUSH
89500: LD_INT 101
89502: PUSH
89503: LD_INT 102
89505: PUSH
89506: LD_INT 103
89508: PUSH
89509: LD_INT 105
89511: PUSH
89512: LD_INT 106
89514: PUSH
89515: LD_INT 108
89517: PUSH
89518: LD_INT 112
89520: PUSH
89521: EMPTY
89522: LIST
89523: LIST
89524: LIST
89525: LIST
89526: LIST
89527: LIST
89528: LIST
89529: PUSH
89530: EMPTY
89531: LIST
89532: LIST
89533: ST_TO_ADDR
89534: GO 91793
89536: LD_INT 8
89538: DOUBLE
89539: EQUAL
89540: IFTRUE 89544
89542: GO 89672
89544: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
89545: LD_ADDR_VAR 0 1
89549: PUSH
89550: LD_INT 2
89552: PUSH
89553: LD_INT 4
89555: PUSH
89556: LD_INT 5
89558: PUSH
89559: LD_INT 6
89561: PUSH
89562: LD_INT 7
89564: PUSH
89565: LD_INT 8
89567: PUSH
89568: LD_INT 11
89570: PUSH
89571: LD_INT 12
89573: PUSH
89574: LD_INT 15
89576: PUSH
89577: LD_INT 16
89579: PUSH
89580: LD_INT 20
89582: PUSH
89583: LD_INT 21
89585: PUSH
89586: LD_INT 22
89588: PUSH
89589: LD_INT 23
89591: PUSH
89592: LD_INT 25
89594: PUSH
89595: LD_INT 26
89597: PUSH
89598: LD_INT 30
89600: PUSH
89601: LD_INT 31
89603: PUSH
89604: LD_INT 32
89606: PUSH
89607: LD_INT 36
89609: PUSH
89610: EMPTY
89611: LIST
89612: LIST
89613: LIST
89614: LIST
89615: LIST
89616: LIST
89617: LIST
89618: LIST
89619: LIST
89620: LIST
89621: LIST
89622: LIST
89623: LIST
89624: LIST
89625: LIST
89626: LIST
89627: LIST
89628: LIST
89629: LIST
89630: LIST
89631: PUSH
89632: LD_INT 101
89634: PUSH
89635: LD_INT 102
89637: PUSH
89638: LD_INT 103
89640: PUSH
89641: LD_INT 105
89643: PUSH
89644: LD_INT 106
89646: PUSH
89647: LD_INT 108
89649: PUSH
89650: LD_INT 109
89652: PUSH
89653: LD_INT 112
89655: PUSH
89656: EMPTY
89657: LIST
89658: LIST
89659: LIST
89660: LIST
89661: LIST
89662: LIST
89663: LIST
89664: LIST
89665: PUSH
89666: EMPTY
89667: LIST
89668: LIST
89669: ST_TO_ADDR
89670: GO 91793
89672: LD_INT 9
89674: DOUBLE
89675: EQUAL
89676: IFTRUE 89680
89678: GO 89816
89680: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
89681: LD_ADDR_VAR 0 1
89685: PUSH
89686: LD_INT 2
89688: PUSH
89689: LD_INT 4
89691: PUSH
89692: LD_INT 5
89694: PUSH
89695: LD_INT 6
89697: PUSH
89698: LD_INT 7
89700: PUSH
89701: LD_INT 8
89703: PUSH
89704: LD_INT 11
89706: PUSH
89707: LD_INT 12
89709: PUSH
89710: LD_INT 15
89712: PUSH
89713: LD_INT 16
89715: PUSH
89716: LD_INT 20
89718: PUSH
89719: LD_INT 21
89721: PUSH
89722: LD_INT 22
89724: PUSH
89725: LD_INT 23
89727: PUSH
89728: LD_INT 25
89730: PUSH
89731: LD_INT 26
89733: PUSH
89734: LD_INT 28
89736: PUSH
89737: LD_INT 30
89739: PUSH
89740: LD_INT 31
89742: PUSH
89743: LD_INT 32
89745: PUSH
89746: LD_INT 36
89748: PUSH
89749: EMPTY
89750: LIST
89751: LIST
89752: LIST
89753: LIST
89754: LIST
89755: LIST
89756: LIST
89757: LIST
89758: LIST
89759: LIST
89760: LIST
89761: LIST
89762: LIST
89763: LIST
89764: LIST
89765: LIST
89766: LIST
89767: LIST
89768: LIST
89769: LIST
89770: LIST
89771: PUSH
89772: LD_INT 101
89774: PUSH
89775: LD_INT 102
89777: PUSH
89778: LD_INT 103
89780: PUSH
89781: LD_INT 105
89783: PUSH
89784: LD_INT 106
89786: PUSH
89787: LD_INT 108
89789: PUSH
89790: LD_INT 109
89792: PUSH
89793: LD_INT 112
89795: PUSH
89796: LD_INT 114
89798: PUSH
89799: EMPTY
89800: LIST
89801: LIST
89802: LIST
89803: LIST
89804: LIST
89805: LIST
89806: LIST
89807: LIST
89808: LIST
89809: PUSH
89810: EMPTY
89811: LIST
89812: LIST
89813: ST_TO_ADDR
89814: GO 91793
89816: LD_INT 10
89818: DOUBLE
89819: EQUAL
89820: IFTRUE 89824
89822: GO 90008
89824: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
89825: LD_ADDR_VAR 0 1
89829: PUSH
89830: LD_INT 2
89832: PUSH
89833: LD_INT 4
89835: PUSH
89836: LD_INT 5
89838: PUSH
89839: LD_INT 6
89841: PUSH
89842: LD_INT 7
89844: PUSH
89845: LD_INT 8
89847: PUSH
89848: LD_INT 9
89850: PUSH
89851: LD_INT 10
89853: PUSH
89854: LD_INT 11
89856: PUSH
89857: LD_INT 12
89859: PUSH
89860: LD_INT 13
89862: PUSH
89863: LD_INT 14
89865: PUSH
89866: LD_INT 15
89868: PUSH
89869: LD_INT 16
89871: PUSH
89872: LD_INT 17
89874: PUSH
89875: LD_INT 18
89877: PUSH
89878: LD_INT 19
89880: PUSH
89881: LD_INT 20
89883: PUSH
89884: LD_INT 21
89886: PUSH
89887: LD_INT 22
89889: PUSH
89890: LD_INT 23
89892: PUSH
89893: LD_INT 24
89895: PUSH
89896: LD_INT 25
89898: PUSH
89899: LD_INT 26
89901: PUSH
89902: LD_INT 28
89904: PUSH
89905: LD_INT 30
89907: PUSH
89908: LD_INT 31
89910: PUSH
89911: LD_INT 32
89913: PUSH
89914: LD_INT 36
89916: PUSH
89917: EMPTY
89918: LIST
89919: LIST
89920: LIST
89921: LIST
89922: LIST
89923: LIST
89924: LIST
89925: LIST
89926: LIST
89927: LIST
89928: LIST
89929: LIST
89930: LIST
89931: LIST
89932: LIST
89933: LIST
89934: LIST
89935: LIST
89936: LIST
89937: LIST
89938: LIST
89939: LIST
89940: LIST
89941: LIST
89942: LIST
89943: LIST
89944: LIST
89945: LIST
89946: LIST
89947: PUSH
89948: LD_INT 101
89950: PUSH
89951: LD_INT 102
89953: PUSH
89954: LD_INT 103
89956: PUSH
89957: LD_INT 104
89959: PUSH
89960: LD_INT 105
89962: PUSH
89963: LD_INT 106
89965: PUSH
89966: LD_INT 107
89968: PUSH
89969: LD_INT 108
89971: PUSH
89972: LD_INT 109
89974: PUSH
89975: LD_INT 110
89977: PUSH
89978: LD_INT 111
89980: PUSH
89981: LD_INT 112
89983: PUSH
89984: LD_INT 114
89986: PUSH
89987: EMPTY
89988: LIST
89989: LIST
89990: LIST
89991: LIST
89992: LIST
89993: LIST
89994: LIST
89995: LIST
89996: LIST
89997: LIST
89998: LIST
89999: LIST
90000: LIST
90001: PUSH
90002: EMPTY
90003: LIST
90004: LIST
90005: ST_TO_ADDR
90006: GO 91793
90008: LD_INT 11
90010: DOUBLE
90011: EQUAL
90012: IFTRUE 90016
90014: GO 90208
90016: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
90017: LD_ADDR_VAR 0 1
90021: PUSH
90022: LD_INT 2
90024: PUSH
90025: LD_INT 3
90027: PUSH
90028: LD_INT 4
90030: PUSH
90031: LD_INT 5
90033: PUSH
90034: LD_INT 6
90036: PUSH
90037: LD_INT 7
90039: PUSH
90040: LD_INT 8
90042: PUSH
90043: LD_INT 9
90045: PUSH
90046: LD_INT 10
90048: PUSH
90049: LD_INT 11
90051: PUSH
90052: LD_INT 12
90054: PUSH
90055: LD_INT 13
90057: PUSH
90058: LD_INT 14
90060: PUSH
90061: LD_INT 15
90063: PUSH
90064: LD_INT 16
90066: PUSH
90067: LD_INT 17
90069: PUSH
90070: LD_INT 18
90072: PUSH
90073: LD_INT 19
90075: PUSH
90076: LD_INT 20
90078: PUSH
90079: LD_INT 21
90081: PUSH
90082: LD_INT 22
90084: PUSH
90085: LD_INT 23
90087: PUSH
90088: LD_INT 24
90090: PUSH
90091: LD_INT 25
90093: PUSH
90094: LD_INT 26
90096: PUSH
90097: LD_INT 28
90099: PUSH
90100: LD_INT 30
90102: PUSH
90103: LD_INT 31
90105: PUSH
90106: LD_INT 32
90108: PUSH
90109: LD_INT 34
90111: PUSH
90112: LD_INT 36
90114: PUSH
90115: EMPTY
90116: LIST
90117: LIST
90118: LIST
90119: LIST
90120: LIST
90121: LIST
90122: LIST
90123: LIST
90124: LIST
90125: LIST
90126: LIST
90127: LIST
90128: LIST
90129: LIST
90130: LIST
90131: LIST
90132: LIST
90133: LIST
90134: LIST
90135: LIST
90136: LIST
90137: LIST
90138: LIST
90139: LIST
90140: LIST
90141: LIST
90142: LIST
90143: LIST
90144: LIST
90145: LIST
90146: LIST
90147: PUSH
90148: LD_INT 101
90150: PUSH
90151: LD_INT 102
90153: PUSH
90154: LD_INT 103
90156: PUSH
90157: LD_INT 104
90159: PUSH
90160: LD_INT 105
90162: PUSH
90163: LD_INT 106
90165: PUSH
90166: LD_INT 107
90168: PUSH
90169: LD_INT 108
90171: PUSH
90172: LD_INT 109
90174: PUSH
90175: LD_INT 110
90177: PUSH
90178: LD_INT 111
90180: PUSH
90181: LD_INT 112
90183: PUSH
90184: LD_INT 114
90186: PUSH
90187: EMPTY
90188: LIST
90189: LIST
90190: LIST
90191: LIST
90192: LIST
90193: LIST
90194: LIST
90195: LIST
90196: LIST
90197: LIST
90198: LIST
90199: LIST
90200: LIST
90201: PUSH
90202: EMPTY
90203: LIST
90204: LIST
90205: ST_TO_ADDR
90206: GO 91793
90208: LD_INT 12
90210: DOUBLE
90211: EQUAL
90212: IFTRUE 90216
90214: GO 90424
90216: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
90217: LD_ADDR_VAR 0 1
90221: PUSH
90222: LD_INT 1
90224: PUSH
90225: LD_INT 2
90227: PUSH
90228: LD_INT 3
90230: PUSH
90231: LD_INT 4
90233: PUSH
90234: LD_INT 5
90236: PUSH
90237: LD_INT 6
90239: PUSH
90240: LD_INT 7
90242: PUSH
90243: LD_INT 8
90245: PUSH
90246: LD_INT 9
90248: PUSH
90249: LD_INT 10
90251: PUSH
90252: LD_INT 11
90254: PUSH
90255: LD_INT 12
90257: PUSH
90258: LD_INT 13
90260: PUSH
90261: LD_INT 14
90263: PUSH
90264: LD_INT 15
90266: PUSH
90267: LD_INT 16
90269: PUSH
90270: LD_INT 17
90272: PUSH
90273: LD_INT 18
90275: PUSH
90276: LD_INT 19
90278: PUSH
90279: LD_INT 20
90281: PUSH
90282: LD_INT 21
90284: PUSH
90285: LD_INT 22
90287: PUSH
90288: LD_INT 23
90290: PUSH
90291: LD_INT 24
90293: PUSH
90294: LD_INT 25
90296: PUSH
90297: LD_INT 26
90299: PUSH
90300: LD_INT 27
90302: PUSH
90303: LD_INT 28
90305: PUSH
90306: LD_INT 30
90308: PUSH
90309: LD_INT 31
90311: PUSH
90312: LD_INT 32
90314: PUSH
90315: LD_INT 33
90317: PUSH
90318: LD_INT 34
90320: PUSH
90321: LD_INT 36
90323: PUSH
90324: EMPTY
90325: LIST
90326: LIST
90327: LIST
90328: LIST
90329: LIST
90330: LIST
90331: LIST
90332: LIST
90333: LIST
90334: LIST
90335: LIST
90336: LIST
90337: LIST
90338: LIST
90339: LIST
90340: LIST
90341: LIST
90342: LIST
90343: LIST
90344: LIST
90345: LIST
90346: LIST
90347: LIST
90348: LIST
90349: LIST
90350: LIST
90351: LIST
90352: LIST
90353: LIST
90354: LIST
90355: LIST
90356: LIST
90357: LIST
90358: LIST
90359: PUSH
90360: LD_INT 101
90362: PUSH
90363: LD_INT 102
90365: PUSH
90366: LD_INT 103
90368: PUSH
90369: LD_INT 104
90371: PUSH
90372: LD_INT 105
90374: PUSH
90375: LD_INT 106
90377: PUSH
90378: LD_INT 107
90380: PUSH
90381: LD_INT 108
90383: PUSH
90384: LD_INT 109
90386: PUSH
90387: LD_INT 110
90389: PUSH
90390: LD_INT 111
90392: PUSH
90393: LD_INT 112
90395: PUSH
90396: LD_INT 113
90398: PUSH
90399: LD_INT 114
90401: PUSH
90402: EMPTY
90403: LIST
90404: LIST
90405: LIST
90406: LIST
90407: LIST
90408: LIST
90409: LIST
90410: LIST
90411: LIST
90412: LIST
90413: LIST
90414: LIST
90415: LIST
90416: LIST
90417: PUSH
90418: EMPTY
90419: LIST
90420: LIST
90421: ST_TO_ADDR
90422: GO 91793
90424: LD_INT 13
90426: DOUBLE
90427: EQUAL
90428: IFTRUE 90432
90430: GO 90628
90432: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
90433: LD_ADDR_VAR 0 1
90437: PUSH
90438: LD_INT 1
90440: PUSH
90441: LD_INT 2
90443: PUSH
90444: LD_INT 3
90446: PUSH
90447: LD_INT 4
90449: PUSH
90450: LD_INT 5
90452: PUSH
90453: LD_INT 8
90455: PUSH
90456: LD_INT 9
90458: PUSH
90459: LD_INT 10
90461: PUSH
90462: LD_INT 11
90464: PUSH
90465: LD_INT 12
90467: PUSH
90468: LD_INT 14
90470: PUSH
90471: LD_INT 15
90473: PUSH
90474: LD_INT 16
90476: PUSH
90477: LD_INT 17
90479: PUSH
90480: LD_INT 18
90482: PUSH
90483: LD_INT 19
90485: PUSH
90486: LD_INT 20
90488: PUSH
90489: LD_INT 21
90491: PUSH
90492: LD_INT 22
90494: PUSH
90495: LD_INT 23
90497: PUSH
90498: LD_INT 24
90500: PUSH
90501: LD_INT 25
90503: PUSH
90504: LD_INT 26
90506: PUSH
90507: LD_INT 27
90509: PUSH
90510: LD_INT 28
90512: PUSH
90513: LD_INT 30
90515: PUSH
90516: LD_INT 31
90518: PUSH
90519: LD_INT 32
90521: PUSH
90522: LD_INT 33
90524: PUSH
90525: LD_INT 34
90527: PUSH
90528: LD_INT 36
90530: PUSH
90531: EMPTY
90532: LIST
90533: LIST
90534: LIST
90535: LIST
90536: LIST
90537: LIST
90538: LIST
90539: LIST
90540: LIST
90541: LIST
90542: LIST
90543: LIST
90544: LIST
90545: LIST
90546: LIST
90547: LIST
90548: LIST
90549: LIST
90550: LIST
90551: LIST
90552: LIST
90553: LIST
90554: LIST
90555: LIST
90556: LIST
90557: LIST
90558: LIST
90559: LIST
90560: LIST
90561: LIST
90562: LIST
90563: PUSH
90564: LD_INT 101
90566: PUSH
90567: LD_INT 102
90569: PUSH
90570: LD_INT 103
90572: PUSH
90573: LD_INT 104
90575: PUSH
90576: LD_INT 105
90578: PUSH
90579: LD_INT 106
90581: PUSH
90582: LD_INT 107
90584: PUSH
90585: LD_INT 108
90587: PUSH
90588: LD_INT 109
90590: PUSH
90591: LD_INT 110
90593: PUSH
90594: LD_INT 111
90596: PUSH
90597: LD_INT 112
90599: PUSH
90600: LD_INT 113
90602: PUSH
90603: LD_INT 114
90605: PUSH
90606: EMPTY
90607: LIST
90608: LIST
90609: LIST
90610: LIST
90611: LIST
90612: LIST
90613: LIST
90614: LIST
90615: LIST
90616: LIST
90617: LIST
90618: LIST
90619: LIST
90620: LIST
90621: PUSH
90622: EMPTY
90623: LIST
90624: LIST
90625: ST_TO_ADDR
90626: GO 91793
90628: LD_INT 14
90630: DOUBLE
90631: EQUAL
90632: IFTRUE 90636
90634: GO 90848
90636: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
90637: LD_ADDR_VAR 0 1
90641: PUSH
90642: LD_INT 1
90644: PUSH
90645: LD_INT 2
90647: PUSH
90648: LD_INT 3
90650: PUSH
90651: LD_INT 4
90653: PUSH
90654: LD_INT 5
90656: PUSH
90657: LD_INT 6
90659: PUSH
90660: LD_INT 7
90662: PUSH
90663: LD_INT 8
90665: PUSH
90666: LD_INT 9
90668: PUSH
90669: LD_INT 10
90671: PUSH
90672: LD_INT 11
90674: PUSH
90675: LD_INT 12
90677: PUSH
90678: LD_INT 13
90680: PUSH
90681: LD_INT 14
90683: PUSH
90684: LD_INT 15
90686: PUSH
90687: LD_INT 16
90689: PUSH
90690: LD_INT 17
90692: PUSH
90693: LD_INT 18
90695: PUSH
90696: LD_INT 19
90698: PUSH
90699: LD_INT 20
90701: PUSH
90702: LD_INT 21
90704: PUSH
90705: LD_INT 22
90707: PUSH
90708: LD_INT 23
90710: PUSH
90711: LD_INT 24
90713: PUSH
90714: LD_INT 25
90716: PUSH
90717: LD_INT 26
90719: PUSH
90720: LD_INT 27
90722: PUSH
90723: LD_INT 28
90725: PUSH
90726: LD_INT 29
90728: PUSH
90729: LD_INT 30
90731: PUSH
90732: LD_INT 31
90734: PUSH
90735: LD_INT 32
90737: PUSH
90738: LD_INT 33
90740: PUSH
90741: LD_INT 34
90743: PUSH
90744: LD_INT 36
90746: PUSH
90747: EMPTY
90748: LIST
90749: LIST
90750: LIST
90751: LIST
90752: LIST
90753: LIST
90754: LIST
90755: LIST
90756: LIST
90757: LIST
90758: LIST
90759: LIST
90760: LIST
90761: LIST
90762: LIST
90763: LIST
90764: LIST
90765: LIST
90766: LIST
90767: LIST
90768: LIST
90769: LIST
90770: LIST
90771: LIST
90772: LIST
90773: LIST
90774: LIST
90775: LIST
90776: LIST
90777: LIST
90778: LIST
90779: LIST
90780: LIST
90781: LIST
90782: LIST
90783: PUSH
90784: LD_INT 101
90786: PUSH
90787: LD_INT 102
90789: PUSH
90790: LD_INT 103
90792: PUSH
90793: LD_INT 104
90795: PUSH
90796: LD_INT 105
90798: PUSH
90799: LD_INT 106
90801: PUSH
90802: LD_INT 107
90804: PUSH
90805: LD_INT 108
90807: PUSH
90808: LD_INT 109
90810: PUSH
90811: LD_INT 110
90813: PUSH
90814: LD_INT 111
90816: PUSH
90817: LD_INT 112
90819: PUSH
90820: LD_INT 113
90822: PUSH
90823: LD_INT 114
90825: PUSH
90826: EMPTY
90827: LIST
90828: LIST
90829: LIST
90830: LIST
90831: LIST
90832: LIST
90833: LIST
90834: LIST
90835: LIST
90836: LIST
90837: LIST
90838: LIST
90839: LIST
90840: LIST
90841: PUSH
90842: EMPTY
90843: LIST
90844: LIST
90845: ST_TO_ADDR
90846: GO 91793
90848: LD_INT 15
90850: DOUBLE
90851: EQUAL
90852: IFTRUE 90856
90854: GO 91068
90856: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
90857: LD_ADDR_VAR 0 1
90861: PUSH
90862: LD_INT 1
90864: PUSH
90865: LD_INT 2
90867: PUSH
90868: LD_INT 3
90870: PUSH
90871: LD_INT 4
90873: PUSH
90874: LD_INT 5
90876: PUSH
90877: LD_INT 6
90879: PUSH
90880: LD_INT 7
90882: PUSH
90883: LD_INT 8
90885: PUSH
90886: LD_INT 9
90888: PUSH
90889: LD_INT 10
90891: PUSH
90892: LD_INT 11
90894: PUSH
90895: LD_INT 12
90897: PUSH
90898: LD_INT 13
90900: PUSH
90901: LD_INT 14
90903: PUSH
90904: LD_INT 15
90906: PUSH
90907: LD_INT 16
90909: PUSH
90910: LD_INT 17
90912: PUSH
90913: LD_INT 18
90915: PUSH
90916: LD_INT 19
90918: PUSH
90919: LD_INT 20
90921: PUSH
90922: LD_INT 21
90924: PUSH
90925: LD_INT 22
90927: PUSH
90928: LD_INT 23
90930: PUSH
90931: LD_INT 24
90933: PUSH
90934: LD_INT 25
90936: PUSH
90937: LD_INT 26
90939: PUSH
90940: LD_INT 27
90942: PUSH
90943: LD_INT 28
90945: PUSH
90946: LD_INT 29
90948: PUSH
90949: LD_INT 30
90951: PUSH
90952: LD_INT 31
90954: PUSH
90955: LD_INT 32
90957: PUSH
90958: LD_INT 33
90960: PUSH
90961: LD_INT 34
90963: PUSH
90964: LD_INT 36
90966: PUSH
90967: EMPTY
90968: LIST
90969: LIST
90970: LIST
90971: LIST
90972: LIST
90973: LIST
90974: LIST
90975: LIST
90976: LIST
90977: LIST
90978: LIST
90979: LIST
90980: LIST
90981: LIST
90982: LIST
90983: LIST
90984: LIST
90985: LIST
90986: LIST
90987: LIST
90988: LIST
90989: LIST
90990: LIST
90991: LIST
90992: LIST
90993: LIST
90994: LIST
90995: LIST
90996: LIST
90997: LIST
90998: LIST
90999: LIST
91000: LIST
91001: LIST
91002: LIST
91003: PUSH
91004: LD_INT 101
91006: PUSH
91007: LD_INT 102
91009: PUSH
91010: LD_INT 103
91012: PUSH
91013: LD_INT 104
91015: PUSH
91016: LD_INT 105
91018: PUSH
91019: LD_INT 106
91021: PUSH
91022: LD_INT 107
91024: PUSH
91025: LD_INT 108
91027: PUSH
91028: LD_INT 109
91030: PUSH
91031: LD_INT 110
91033: PUSH
91034: LD_INT 111
91036: PUSH
91037: LD_INT 112
91039: PUSH
91040: LD_INT 113
91042: PUSH
91043: LD_INT 114
91045: PUSH
91046: EMPTY
91047: LIST
91048: LIST
91049: LIST
91050: LIST
91051: LIST
91052: LIST
91053: LIST
91054: LIST
91055: LIST
91056: LIST
91057: LIST
91058: LIST
91059: LIST
91060: LIST
91061: PUSH
91062: EMPTY
91063: LIST
91064: LIST
91065: ST_TO_ADDR
91066: GO 91793
91068: LD_INT 16
91070: DOUBLE
91071: EQUAL
91072: IFTRUE 91076
91074: GO 91200
91076: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
91077: LD_ADDR_VAR 0 1
91081: PUSH
91082: LD_INT 2
91084: PUSH
91085: LD_INT 4
91087: PUSH
91088: LD_INT 5
91090: PUSH
91091: LD_INT 7
91093: PUSH
91094: LD_INT 11
91096: PUSH
91097: LD_INT 12
91099: PUSH
91100: LD_INT 15
91102: PUSH
91103: LD_INT 16
91105: PUSH
91106: LD_INT 20
91108: PUSH
91109: LD_INT 21
91111: PUSH
91112: LD_INT 22
91114: PUSH
91115: LD_INT 23
91117: PUSH
91118: LD_INT 25
91120: PUSH
91121: LD_INT 26
91123: PUSH
91124: LD_INT 30
91126: PUSH
91127: LD_INT 31
91129: PUSH
91130: LD_INT 32
91132: PUSH
91133: LD_INT 33
91135: PUSH
91136: LD_INT 34
91138: PUSH
91139: EMPTY
91140: LIST
91141: LIST
91142: LIST
91143: LIST
91144: LIST
91145: LIST
91146: LIST
91147: LIST
91148: LIST
91149: LIST
91150: LIST
91151: LIST
91152: LIST
91153: LIST
91154: LIST
91155: LIST
91156: LIST
91157: LIST
91158: LIST
91159: PUSH
91160: LD_INT 101
91162: PUSH
91163: LD_INT 102
91165: PUSH
91166: LD_INT 103
91168: PUSH
91169: LD_INT 106
91171: PUSH
91172: LD_INT 108
91174: PUSH
91175: LD_INT 112
91177: PUSH
91178: LD_INT 113
91180: PUSH
91181: LD_INT 114
91183: PUSH
91184: EMPTY
91185: LIST
91186: LIST
91187: LIST
91188: LIST
91189: LIST
91190: LIST
91191: LIST
91192: LIST
91193: PUSH
91194: EMPTY
91195: LIST
91196: LIST
91197: ST_TO_ADDR
91198: GO 91793
91200: LD_INT 17
91202: DOUBLE
91203: EQUAL
91204: IFTRUE 91208
91206: GO 91420
91208: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
91209: LD_ADDR_VAR 0 1
91213: PUSH
91214: LD_INT 1
91216: PUSH
91217: LD_INT 2
91219: PUSH
91220: LD_INT 3
91222: PUSH
91223: LD_INT 4
91225: PUSH
91226: LD_INT 5
91228: PUSH
91229: LD_INT 6
91231: PUSH
91232: LD_INT 7
91234: PUSH
91235: LD_INT 8
91237: PUSH
91238: LD_INT 9
91240: PUSH
91241: LD_INT 10
91243: PUSH
91244: LD_INT 11
91246: PUSH
91247: LD_INT 12
91249: PUSH
91250: LD_INT 13
91252: PUSH
91253: LD_INT 14
91255: PUSH
91256: LD_INT 15
91258: PUSH
91259: LD_INT 16
91261: PUSH
91262: LD_INT 17
91264: PUSH
91265: LD_INT 18
91267: PUSH
91268: LD_INT 19
91270: PUSH
91271: LD_INT 20
91273: PUSH
91274: LD_INT 21
91276: PUSH
91277: LD_INT 22
91279: PUSH
91280: LD_INT 23
91282: PUSH
91283: LD_INT 24
91285: PUSH
91286: LD_INT 25
91288: PUSH
91289: LD_INT 26
91291: PUSH
91292: LD_INT 27
91294: PUSH
91295: LD_INT 28
91297: PUSH
91298: LD_INT 29
91300: PUSH
91301: LD_INT 30
91303: PUSH
91304: LD_INT 31
91306: PUSH
91307: LD_INT 32
91309: PUSH
91310: LD_INT 33
91312: PUSH
91313: LD_INT 34
91315: PUSH
91316: LD_INT 36
91318: PUSH
91319: EMPTY
91320: LIST
91321: LIST
91322: LIST
91323: LIST
91324: LIST
91325: LIST
91326: LIST
91327: LIST
91328: LIST
91329: LIST
91330: LIST
91331: LIST
91332: LIST
91333: LIST
91334: LIST
91335: LIST
91336: LIST
91337: LIST
91338: LIST
91339: LIST
91340: LIST
91341: LIST
91342: LIST
91343: LIST
91344: LIST
91345: LIST
91346: LIST
91347: LIST
91348: LIST
91349: LIST
91350: LIST
91351: LIST
91352: LIST
91353: LIST
91354: LIST
91355: PUSH
91356: LD_INT 101
91358: PUSH
91359: LD_INT 102
91361: PUSH
91362: LD_INT 103
91364: PUSH
91365: LD_INT 104
91367: PUSH
91368: LD_INT 105
91370: PUSH
91371: LD_INT 106
91373: PUSH
91374: LD_INT 107
91376: PUSH
91377: LD_INT 108
91379: PUSH
91380: LD_INT 109
91382: PUSH
91383: LD_INT 110
91385: PUSH
91386: LD_INT 111
91388: PUSH
91389: LD_INT 112
91391: PUSH
91392: LD_INT 113
91394: PUSH
91395: LD_INT 114
91397: PUSH
91398: EMPTY
91399: LIST
91400: LIST
91401: LIST
91402: LIST
91403: LIST
91404: LIST
91405: LIST
91406: LIST
91407: LIST
91408: LIST
91409: LIST
91410: LIST
91411: LIST
91412: LIST
91413: PUSH
91414: EMPTY
91415: LIST
91416: LIST
91417: ST_TO_ADDR
91418: GO 91793
91420: LD_INT 18
91422: DOUBLE
91423: EQUAL
91424: IFTRUE 91428
91426: GO 91564
91428: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
91429: LD_ADDR_VAR 0 1
91433: PUSH
91434: LD_INT 2
91436: PUSH
91437: LD_INT 4
91439: PUSH
91440: LD_INT 5
91442: PUSH
91443: LD_INT 7
91445: PUSH
91446: LD_INT 11
91448: PUSH
91449: LD_INT 12
91451: PUSH
91452: LD_INT 15
91454: PUSH
91455: LD_INT 16
91457: PUSH
91458: LD_INT 20
91460: PUSH
91461: LD_INT 21
91463: PUSH
91464: LD_INT 22
91466: PUSH
91467: LD_INT 23
91469: PUSH
91470: LD_INT 25
91472: PUSH
91473: LD_INT 26
91475: PUSH
91476: LD_INT 30
91478: PUSH
91479: LD_INT 31
91481: PUSH
91482: LD_INT 32
91484: PUSH
91485: LD_INT 33
91487: PUSH
91488: LD_INT 34
91490: PUSH
91491: LD_INT 35
91493: PUSH
91494: LD_INT 36
91496: PUSH
91497: EMPTY
91498: LIST
91499: LIST
91500: LIST
91501: LIST
91502: LIST
91503: LIST
91504: LIST
91505: LIST
91506: LIST
91507: LIST
91508: LIST
91509: LIST
91510: LIST
91511: LIST
91512: LIST
91513: LIST
91514: LIST
91515: LIST
91516: LIST
91517: LIST
91518: LIST
91519: PUSH
91520: LD_INT 101
91522: PUSH
91523: LD_INT 102
91525: PUSH
91526: LD_INT 103
91528: PUSH
91529: LD_INT 106
91531: PUSH
91532: LD_INT 108
91534: PUSH
91535: LD_INT 112
91537: PUSH
91538: LD_INT 113
91540: PUSH
91541: LD_INT 114
91543: PUSH
91544: LD_INT 115
91546: PUSH
91547: EMPTY
91548: LIST
91549: LIST
91550: LIST
91551: LIST
91552: LIST
91553: LIST
91554: LIST
91555: LIST
91556: LIST
91557: PUSH
91558: EMPTY
91559: LIST
91560: LIST
91561: ST_TO_ADDR
91562: GO 91793
91564: LD_INT 19
91566: DOUBLE
91567: EQUAL
91568: IFTRUE 91572
91570: GO 91792
91572: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
91573: LD_ADDR_VAR 0 1
91577: PUSH
91578: LD_INT 1
91580: PUSH
91581: LD_INT 2
91583: PUSH
91584: LD_INT 3
91586: PUSH
91587: LD_INT 4
91589: PUSH
91590: LD_INT 5
91592: PUSH
91593: LD_INT 6
91595: PUSH
91596: LD_INT 7
91598: PUSH
91599: LD_INT 8
91601: PUSH
91602: LD_INT 9
91604: PUSH
91605: LD_INT 10
91607: PUSH
91608: LD_INT 11
91610: PUSH
91611: LD_INT 12
91613: PUSH
91614: LD_INT 13
91616: PUSH
91617: LD_INT 14
91619: PUSH
91620: LD_INT 15
91622: PUSH
91623: LD_INT 16
91625: PUSH
91626: LD_INT 17
91628: PUSH
91629: LD_INT 18
91631: PUSH
91632: LD_INT 19
91634: PUSH
91635: LD_INT 20
91637: PUSH
91638: LD_INT 21
91640: PUSH
91641: LD_INT 22
91643: PUSH
91644: LD_INT 23
91646: PUSH
91647: LD_INT 24
91649: PUSH
91650: LD_INT 25
91652: PUSH
91653: LD_INT 26
91655: PUSH
91656: LD_INT 27
91658: PUSH
91659: LD_INT 28
91661: PUSH
91662: LD_INT 29
91664: PUSH
91665: LD_INT 30
91667: PUSH
91668: LD_INT 31
91670: PUSH
91671: LD_INT 32
91673: PUSH
91674: LD_INT 33
91676: PUSH
91677: LD_INT 34
91679: PUSH
91680: LD_INT 35
91682: PUSH
91683: LD_INT 36
91685: PUSH
91686: EMPTY
91687: LIST
91688: LIST
91689: LIST
91690: LIST
91691: LIST
91692: LIST
91693: LIST
91694: LIST
91695: LIST
91696: LIST
91697: LIST
91698: LIST
91699: LIST
91700: LIST
91701: LIST
91702: LIST
91703: LIST
91704: LIST
91705: LIST
91706: LIST
91707: LIST
91708: LIST
91709: LIST
91710: LIST
91711: LIST
91712: LIST
91713: LIST
91714: LIST
91715: LIST
91716: LIST
91717: LIST
91718: LIST
91719: LIST
91720: LIST
91721: LIST
91722: LIST
91723: PUSH
91724: LD_INT 101
91726: PUSH
91727: LD_INT 102
91729: PUSH
91730: LD_INT 103
91732: PUSH
91733: LD_INT 104
91735: PUSH
91736: LD_INT 105
91738: PUSH
91739: LD_INT 106
91741: PUSH
91742: LD_INT 107
91744: PUSH
91745: LD_INT 108
91747: PUSH
91748: LD_INT 109
91750: PUSH
91751: LD_INT 110
91753: PUSH
91754: LD_INT 111
91756: PUSH
91757: LD_INT 112
91759: PUSH
91760: LD_INT 113
91762: PUSH
91763: LD_INT 114
91765: PUSH
91766: LD_INT 115
91768: PUSH
91769: EMPTY
91770: LIST
91771: LIST
91772: LIST
91773: LIST
91774: LIST
91775: LIST
91776: LIST
91777: LIST
91778: LIST
91779: LIST
91780: LIST
91781: LIST
91782: LIST
91783: LIST
91784: LIST
91785: PUSH
91786: EMPTY
91787: LIST
91788: LIST
91789: ST_TO_ADDR
91790: GO 91793
91792: POP
// end else
91793: GO 92012
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
91795: LD_ADDR_VAR 0 1
91799: PUSH
91800: LD_INT 1
91802: PUSH
91803: LD_INT 2
91805: PUSH
91806: LD_INT 3
91808: PUSH
91809: LD_INT 4
91811: PUSH
91812: LD_INT 5
91814: PUSH
91815: LD_INT 6
91817: PUSH
91818: LD_INT 7
91820: PUSH
91821: LD_INT 8
91823: PUSH
91824: LD_INT 9
91826: PUSH
91827: LD_INT 10
91829: PUSH
91830: LD_INT 11
91832: PUSH
91833: LD_INT 12
91835: PUSH
91836: LD_INT 13
91838: PUSH
91839: LD_INT 14
91841: PUSH
91842: LD_INT 15
91844: PUSH
91845: LD_INT 16
91847: PUSH
91848: LD_INT 17
91850: PUSH
91851: LD_INT 18
91853: PUSH
91854: LD_INT 19
91856: PUSH
91857: LD_INT 20
91859: PUSH
91860: LD_INT 21
91862: PUSH
91863: LD_INT 22
91865: PUSH
91866: LD_INT 23
91868: PUSH
91869: LD_INT 24
91871: PUSH
91872: LD_INT 25
91874: PUSH
91875: LD_INT 26
91877: PUSH
91878: LD_INT 27
91880: PUSH
91881: LD_INT 28
91883: PUSH
91884: LD_INT 29
91886: PUSH
91887: LD_INT 30
91889: PUSH
91890: LD_INT 31
91892: PUSH
91893: LD_INT 32
91895: PUSH
91896: LD_INT 33
91898: PUSH
91899: LD_INT 34
91901: PUSH
91902: LD_INT 35
91904: PUSH
91905: LD_INT 36
91907: PUSH
91908: EMPTY
91909: LIST
91910: LIST
91911: LIST
91912: LIST
91913: LIST
91914: LIST
91915: LIST
91916: LIST
91917: LIST
91918: LIST
91919: LIST
91920: LIST
91921: LIST
91922: LIST
91923: LIST
91924: LIST
91925: LIST
91926: LIST
91927: LIST
91928: LIST
91929: LIST
91930: LIST
91931: LIST
91932: LIST
91933: LIST
91934: LIST
91935: LIST
91936: LIST
91937: LIST
91938: LIST
91939: LIST
91940: LIST
91941: LIST
91942: LIST
91943: LIST
91944: LIST
91945: PUSH
91946: LD_INT 101
91948: PUSH
91949: LD_INT 102
91951: PUSH
91952: LD_INT 103
91954: PUSH
91955: LD_INT 104
91957: PUSH
91958: LD_INT 105
91960: PUSH
91961: LD_INT 106
91963: PUSH
91964: LD_INT 107
91966: PUSH
91967: LD_INT 108
91969: PUSH
91970: LD_INT 109
91972: PUSH
91973: LD_INT 110
91975: PUSH
91976: LD_INT 111
91978: PUSH
91979: LD_INT 112
91981: PUSH
91982: LD_INT 113
91984: PUSH
91985: LD_INT 114
91987: PUSH
91988: LD_INT 115
91990: PUSH
91991: EMPTY
91992: LIST
91993: LIST
91994: LIST
91995: LIST
91996: LIST
91997: LIST
91998: LIST
91999: LIST
92000: LIST
92001: LIST
92002: LIST
92003: LIST
92004: LIST
92005: LIST
92006: LIST
92007: PUSH
92008: EMPTY
92009: LIST
92010: LIST
92011: ST_TO_ADDR
// if result then
92012: LD_VAR 0 1
92016: IFFALSE 92305
// begin normal :=  ;
92018: LD_ADDR_VAR 0 3
92022: PUSH
92023: LD_STRING 
92025: ST_TO_ADDR
// hardcore :=  ;
92026: LD_ADDR_VAR 0 4
92030: PUSH
92031: LD_STRING 
92033: ST_TO_ADDR
// for i = 1 to normalCounter do
92034: LD_ADDR_VAR 0 5
92038: PUSH
92039: DOUBLE
92040: LD_INT 1
92042: DEC
92043: ST_TO_ADDR
92044: LD_EXP 91
92048: PUSH
92049: FOR_TO
92050: IFFALSE 92151
// begin tmp := 0 ;
92052: LD_ADDR_VAR 0 2
92056: PUSH
92057: LD_STRING 0
92059: ST_TO_ADDR
// if result [ 1 ] then
92060: LD_VAR 0 1
92064: PUSH
92065: LD_INT 1
92067: ARRAY
92068: IFFALSE 92133
// if result [ 1 ] [ 1 ] = i then
92070: LD_VAR 0 1
92074: PUSH
92075: LD_INT 1
92077: ARRAY
92078: PUSH
92079: LD_INT 1
92081: ARRAY
92082: PUSH
92083: LD_VAR 0 5
92087: EQUAL
92088: IFFALSE 92133
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
92090: LD_ADDR_VAR 0 1
92094: PUSH
92095: LD_VAR 0 1
92099: PPUSH
92100: LD_INT 1
92102: PPUSH
92103: LD_VAR 0 1
92107: PUSH
92108: LD_INT 1
92110: ARRAY
92111: PPUSH
92112: LD_INT 1
92114: PPUSH
92115: CALL_OW 3
92119: PPUSH
92120: CALL_OW 1
92124: ST_TO_ADDR
// tmp := 1 ;
92125: LD_ADDR_VAR 0 2
92129: PUSH
92130: LD_STRING 1
92132: ST_TO_ADDR
// end ; normal := normal & tmp ;
92133: LD_ADDR_VAR 0 3
92137: PUSH
92138: LD_VAR 0 3
92142: PUSH
92143: LD_VAR 0 2
92147: STR
92148: ST_TO_ADDR
// end ;
92149: GO 92049
92151: POP
92152: POP
// for i = 1 to hardcoreCounter do
92153: LD_ADDR_VAR 0 5
92157: PUSH
92158: DOUBLE
92159: LD_INT 1
92161: DEC
92162: ST_TO_ADDR
92163: LD_EXP 92
92167: PUSH
92168: FOR_TO
92169: IFFALSE 92274
// begin tmp := 0 ;
92171: LD_ADDR_VAR 0 2
92175: PUSH
92176: LD_STRING 0
92178: ST_TO_ADDR
// if result [ 2 ] then
92179: LD_VAR 0 1
92183: PUSH
92184: LD_INT 2
92186: ARRAY
92187: IFFALSE 92256
// if result [ 2 ] [ 1 ] = 100 + i then
92189: LD_VAR 0 1
92193: PUSH
92194: LD_INT 2
92196: ARRAY
92197: PUSH
92198: LD_INT 1
92200: ARRAY
92201: PUSH
92202: LD_INT 100
92204: PUSH
92205: LD_VAR 0 5
92209: PLUS
92210: EQUAL
92211: IFFALSE 92256
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
92213: LD_ADDR_VAR 0 1
92217: PUSH
92218: LD_VAR 0 1
92222: PPUSH
92223: LD_INT 2
92225: PPUSH
92226: LD_VAR 0 1
92230: PUSH
92231: LD_INT 2
92233: ARRAY
92234: PPUSH
92235: LD_INT 1
92237: PPUSH
92238: CALL_OW 3
92242: PPUSH
92243: CALL_OW 1
92247: ST_TO_ADDR
// tmp := 1 ;
92248: LD_ADDR_VAR 0 2
92252: PUSH
92253: LD_STRING 1
92255: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
92256: LD_ADDR_VAR 0 4
92260: PUSH
92261: LD_VAR 0 4
92265: PUSH
92266: LD_VAR 0 2
92270: STR
92271: ST_TO_ADDR
// end ;
92272: GO 92168
92274: POP
92275: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
92276: LD_STRING getStreamItemsFromMission("
92278: PUSH
92279: LD_VAR 0 3
92283: STR
92284: PUSH
92285: LD_STRING ","
92287: STR
92288: PUSH
92289: LD_VAR 0 4
92293: STR
92294: PUSH
92295: LD_STRING ")
92297: STR
92298: PPUSH
92299: CALL_OW 559
// end else
92303: GO 92312
// ToLua ( getStreamItemsFromMission("","") ) ;
92305: LD_STRING getStreamItemsFromMission("","")
92307: PPUSH
92308: CALL_OW 559
// end ;
92312: LD_VAR 0 1
92316: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
92317: LD_EXP 90
92321: PUSH
92322: LD_EXP 95
92326: AND
92327: IFFALSE 92451
92329: GO 92331
92331: DISABLE
92332: LD_INT 0
92334: PPUSH
92335: PPUSH
// begin enable ;
92336: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
92337: LD_ADDR_VAR 0 2
92341: PUSH
92342: LD_INT 22
92344: PUSH
92345: LD_OWVAR 2
92349: PUSH
92350: EMPTY
92351: LIST
92352: LIST
92353: PUSH
92354: LD_INT 2
92356: PUSH
92357: LD_INT 34
92359: PUSH
92360: LD_INT 7
92362: PUSH
92363: EMPTY
92364: LIST
92365: LIST
92366: PUSH
92367: LD_INT 34
92369: PUSH
92370: LD_INT 45
92372: PUSH
92373: EMPTY
92374: LIST
92375: LIST
92376: PUSH
92377: LD_INT 34
92379: PUSH
92380: LD_INT 28
92382: PUSH
92383: EMPTY
92384: LIST
92385: LIST
92386: PUSH
92387: LD_INT 34
92389: PUSH
92390: LD_INT 47
92392: PUSH
92393: EMPTY
92394: LIST
92395: LIST
92396: PUSH
92397: EMPTY
92398: LIST
92399: LIST
92400: LIST
92401: LIST
92402: LIST
92403: PUSH
92404: EMPTY
92405: LIST
92406: LIST
92407: PPUSH
92408: CALL_OW 69
92412: ST_TO_ADDR
// if not tmp then
92413: LD_VAR 0 2
92417: NOT
92418: IFFALSE 92422
// exit ;
92420: GO 92451
// for i in tmp do
92422: LD_ADDR_VAR 0 1
92426: PUSH
92427: LD_VAR 0 2
92431: PUSH
92432: FOR_IN
92433: IFFALSE 92449
// begin SetLives ( i , 0 ) ;
92435: LD_VAR 0 1
92439: PPUSH
92440: LD_INT 0
92442: PPUSH
92443: CALL_OW 234
// end ;
92447: GO 92432
92449: POP
92450: POP
// end ;
92451: PPOPN 2
92453: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
92454: LD_EXP 90
92458: PUSH
92459: LD_EXP 96
92463: AND
92464: IFFALSE 92548
92466: GO 92468
92468: DISABLE
92469: LD_INT 0
92471: PPUSH
92472: PPUSH
// begin enable ;
92473: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
92474: LD_ADDR_VAR 0 2
92478: PUSH
92479: LD_INT 22
92481: PUSH
92482: LD_OWVAR 2
92486: PUSH
92487: EMPTY
92488: LIST
92489: LIST
92490: PUSH
92491: LD_INT 32
92493: PUSH
92494: LD_INT 3
92496: PUSH
92497: EMPTY
92498: LIST
92499: LIST
92500: PUSH
92501: EMPTY
92502: LIST
92503: LIST
92504: PPUSH
92505: CALL_OW 69
92509: ST_TO_ADDR
// if not tmp then
92510: LD_VAR 0 2
92514: NOT
92515: IFFALSE 92519
// exit ;
92517: GO 92548
// for i in tmp do
92519: LD_ADDR_VAR 0 1
92523: PUSH
92524: LD_VAR 0 2
92528: PUSH
92529: FOR_IN
92530: IFFALSE 92546
// begin SetLives ( i , 0 ) ;
92532: LD_VAR 0 1
92536: PPUSH
92537: LD_INT 0
92539: PPUSH
92540: CALL_OW 234
// end ;
92544: GO 92529
92546: POP
92547: POP
// end ;
92548: PPOPN 2
92550: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
92551: LD_EXP 90
92555: PUSH
92556: LD_EXP 93
92560: AND
92561: IFFALSE 92654
92563: GO 92565
92565: DISABLE
92566: LD_INT 0
92568: PPUSH
// begin enable ;
92569: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
92570: LD_ADDR_VAR 0 1
92574: PUSH
92575: LD_INT 22
92577: PUSH
92578: LD_OWVAR 2
92582: PUSH
92583: EMPTY
92584: LIST
92585: LIST
92586: PUSH
92587: LD_INT 2
92589: PUSH
92590: LD_INT 25
92592: PUSH
92593: LD_INT 5
92595: PUSH
92596: EMPTY
92597: LIST
92598: LIST
92599: PUSH
92600: LD_INT 25
92602: PUSH
92603: LD_INT 9
92605: PUSH
92606: EMPTY
92607: LIST
92608: LIST
92609: PUSH
92610: LD_INT 25
92612: PUSH
92613: LD_INT 8
92615: PUSH
92616: EMPTY
92617: LIST
92618: LIST
92619: PUSH
92620: EMPTY
92621: LIST
92622: LIST
92623: LIST
92624: LIST
92625: PUSH
92626: EMPTY
92627: LIST
92628: LIST
92629: PPUSH
92630: CALL_OW 69
92634: PUSH
92635: FOR_IN
92636: IFFALSE 92652
// begin SetClass ( i , 1 ) ;
92638: LD_VAR 0 1
92642: PPUSH
92643: LD_INT 1
92645: PPUSH
92646: CALL_OW 336
// end ;
92650: GO 92635
92652: POP
92653: POP
// end ;
92654: PPOPN 1
92656: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
92657: LD_EXP 90
92661: PUSH
92662: LD_EXP 94
92666: AND
92667: PUSH
92668: LD_OWVAR 65
92672: PUSH
92673: LD_INT 7
92675: LESS
92676: AND
92677: IFFALSE 92691
92679: GO 92681
92681: DISABLE
// begin enable ;
92682: ENABLE
// game_speed := 7 ;
92683: LD_ADDR_OWVAR 65
92687: PUSH
92688: LD_INT 7
92690: ST_TO_ADDR
// end ;
92691: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
92692: LD_EXP 90
92696: PUSH
92697: LD_EXP 97
92701: AND
92702: IFFALSE 92904
92704: GO 92706
92706: DISABLE
92707: LD_INT 0
92709: PPUSH
92710: PPUSH
92711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
92712: LD_ADDR_VAR 0 3
92716: PUSH
92717: LD_INT 81
92719: PUSH
92720: LD_OWVAR 2
92724: PUSH
92725: EMPTY
92726: LIST
92727: LIST
92728: PUSH
92729: LD_INT 21
92731: PUSH
92732: LD_INT 1
92734: PUSH
92735: EMPTY
92736: LIST
92737: LIST
92738: PUSH
92739: EMPTY
92740: LIST
92741: LIST
92742: PPUSH
92743: CALL_OW 69
92747: ST_TO_ADDR
// if not tmp then
92748: LD_VAR 0 3
92752: NOT
92753: IFFALSE 92757
// exit ;
92755: GO 92904
// if tmp > 5 then
92757: LD_VAR 0 3
92761: PUSH
92762: LD_INT 5
92764: GREATER
92765: IFFALSE 92777
// k := 5 else
92767: LD_ADDR_VAR 0 2
92771: PUSH
92772: LD_INT 5
92774: ST_TO_ADDR
92775: GO 92787
// k := tmp ;
92777: LD_ADDR_VAR 0 2
92781: PUSH
92782: LD_VAR 0 3
92786: ST_TO_ADDR
// for i := 1 to k do
92787: LD_ADDR_VAR 0 1
92791: PUSH
92792: DOUBLE
92793: LD_INT 1
92795: DEC
92796: ST_TO_ADDR
92797: LD_VAR 0 2
92801: PUSH
92802: FOR_TO
92803: IFFALSE 92902
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
92805: LD_VAR 0 3
92809: PUSH
92810: LD_VAR 0 1
92814: ARRAY
92815: PPUSH
92816: LD_VAR 0 1
92820: PUSH
92821: LD_INT 4
92823: MOD
92824: PUSH
92825: LD_INT 1
92827: PLUS
92828: PPUSH
92829: CALL_OW 259
92833: PUSH
92834: LD_INT 10
92836: LESS
92837: IFFALSE 92900
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
92839: LD_VAR 0 3
92843: PUSH
92844: LD_VAR 0 1
92848: ARRAY
92849: PPUSH
92850: LD_VAR 0 1
92854: PUSH
92855: LD_INT 4
92857: MOD
92858: PUSH
92859: LD_INT 1
92861: PLUS
92862: PPUSH
92863: LD_VAR 0 3
92867: PUSH
92868: LD_VAR 0 1
92872: ARRAY
92873: PPUSH
92874: LD_VAR 0 1
92878: PUSH
92879: LD_INT 4
92881: MOD
92882: PUSH
92883: LD_INT 1
92885: PLUS
92886: PPUSH
92887: CALL_OW 259
92891: PUSH
92892: LD_INT 1
92894: PLUS
92895: PPUSH
92896: CALL_OW 237
92900: GO 92802
92902: POP
92903: POP
// end ;
92904: PPOPN 3
92906: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
92907: LD_EXP 90
92911: PUSH
92912: LD_EXP 98
92916: AND
92917: IFFALSE 92937
92919: GO 92921
92921: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
92922: LD_INT 4
92924: PPUSH
92925: LD_OWVAR 2
92929: PPUSH
92930: LD_INT 0
92932: PPUSH
92933: CALL_OW 324
92937: END
// every 0 0$1 trigger StreamModeActive and sShovel do
92938: LD_EXP 90
92942: PUSH
92943: LD_EXP 127
92947: AND
92948: IFFALSE 92968
92950: GO 92952
92952: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
92953: LD_INT 19
92955: PPUSH
92956: LD_OWVAR 2
92960: PPUSH
92961: LD_INT 0
92963: PPUSH
92964: CALL_OW 324
92968: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
92969: LD_EXP 90
92973: PUSH
92974: LD_EXP 99
92978: AND
92979: IFFALSE 93081
92981: GO 92983
92983: DISABLE
92984: LD_INT 0
92986: PPUSH
92987: PPUSH
// begin enable ;
92988: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
92989: LD_ADDR_VAR 0 2
92993: PUSH
92994: LD_INT 22
92996: PUSH
92997: LD_OWVAR 2
93001: PUSH
93002: EMPTY
93003: LIST
93004: LIST
93005: PUSH
93006: LD_INT 2
93008: PUSH
93009: LD_INT 34
93011: PUSH
93012: LD_INT 11
93014: PUSH
93015: EMPTY
93016: LIST
93017: LIST
93018: PUSH
93019: LD_INT 34
93021: PUSH
93022: LD_INT 30
93024: PUSH
93025: EMPTY
93026: LIST
93027: LIST
93028: PUSH
93029: EMPTY
93030: LIST
93031: LIST
93032: LIST
93033: PUSH
93034: EMPTY
93035: LIST
93036: LIST
93037: PPUSH
93038: CALL_OW 69
93042: ST_TO_ADDR
// if not tmp then
93043: LD_VAR 0 2
93047: NOT
93048: IFFALSE 93052
// exit ;
93050: GO 93081
// for i in tmp do
93052: LD_ADDR_VAR 0 1
93056: PUSH
93057: LD_VAR 0 2
93061: PUSH
93062: FOR_IN
93063: IFFALSE 93079
// begin SetLives ( i , 0 ) ;
93065: LD_VAR 0 1
93069: PPUSH
93070: LD_INT 0
93072: PPUSH
93073: CALL_OW 234
// end ;
93077: GO 93062
93079: POP
93080: POP
// end ;
93081: PPOPN 2
93083: END
// every 0 0$1 trigger StreamModeActive and sBunker do
93084: LD_EXP 90
93088: PUSH
93089: LD_EXP 100
93093: AND
93094: IFFALSE 93114
93096: GO 93098
93098: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
93099: LD_INT 32
93101: PPUSH
93102: LD_OWVAR 2
93106: PPUSH
93107: LD_INT 0
93109: PPUSH
93110: CALL_OW 324
93114: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
93115: LD_EXP 90
93119: PUSH
93120: LD_EXP 101
93124: AND
93125: IFFALSE 93306
93127: GO 93129
93129: DISABLE
93130: LD_INT 0
93132: PPUSH
93133: PPUSH
93134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
93135: LD_ADDR_VAR 0 2
93139: PUSH
93140: LD_INT 22
93142: PUSH
93143: LD_OWVAR 2
93147: PUSH
93148: EMPTY
93149: LIST
93150: LIST
93151: PUSH
93152: LD_INT 33
93154: PUSH
93155: LD_INT 3
93157: PUSH
93158: EMPTY
93159: LIST
93160: LIST
93161: PUSH
93162: EMPTY
93163: LIST
93164: LIST
93165: PPUSH
93166: CALL_OW 69
93170: ST_TO_ADDR
// if not tmp then
93171: LD_VAR 0 2
93175: NOT
93176: IFFALSE 93180
// exit ;
93178: GO 93306
// side := 0 ;
93180: LD_ADDR_VAR 0 3
93184: PUSH
93185: LD_INT 0
93187: ST_TO_ADDR
// for i := 1 to 8 do
93188: LD_ADDR_VAR 0 1
93192: PUSH
93193: DOUBLE
93194: LD_INT 1
93196: DEC
93197: ST_TO_ADDR
93198: LD_INT 8
93200: PUSH
93201: FOR_TO
93202: IFFALSE 93250
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
93204: LD_OWVAR 2
93208: PUSH
93209: LD_VAR 0 1
93213: NONEQUAL
93214: PUSH
93215: LD_OWVAR 2
93219: PPUSH
93220: LD_VAR 0 1
93224: PPUSH
93225: CALL_OW 81
93229: PUSH
93230: LD_INT 2
93232: EQUAL
93233: AND
93234: IFFALSE 93248
// begin side := i ;
93236: LD_ADDR_VAR 0 3
93240: PUSH
93241: LD_VAR 0 1
93245: ST_TO_ADDR
// break ;
93246: GO 93250
// end ;
93248: GO 93201
93250: POP
93251: POP
// if not side then
93252: LD_VAR 0 3
93256: NOT
93257: IFFALSE 93261
// exit ;
93259: GO 93306
// for i := 1 to tmp do
93261: LD_ADDR_VAR 0 1
93265: PUSH
93266: DOUBLE
93267: LD_INT 1
93269: DEC
93270: ST_TO_ADDR
93271: LD_VAR 0 2
93275: PUSH
93276: FOR_TO
93277: IFFALSE 93304
// if Prob ( 60 ) then
93279: LD_INT 60
93281: PPUSH
93282: CALL_OW 13
93286: IFFALSE 93302
// SetSide ( i , side ) ;
93288: LD_VAR 0 1
93292: PPUSH
93293: LD_VAR 0 3
93297: PPUSH
93298: CALL_OW 235
93302: GO 93276
93304: POP
93305: POP
// end ;
93306: PPOPN 3
93308: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
93309: LD_EXP 90
93313: PUSH
93314: LD_EXP 103
93318: AND
93319: IFFALSE 93438
93321: GO 93323
93323: DISABLE
93324: LD_INT 0
93326: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
93327: LD_ADDR_VAR 0 1
93331: PUSH
93332: LD_INT 22
93334: PUSH
93335: LD_OWVAR 2
93339: PUSH
93340: EMPTY
93341: LIST
93342: LIST
93343: PUSH
93344: LD_INT 21
93346: PUSH
93347: LD_INT 1
93349: PUSH
93350: EMPTY
93351: LIST
93352: LIST
93353: PUSH
93354: LD_INT 3
93356: PUSH
93357: LD_INT 23
93359: PUSH
93360: LD_INT 0
93362: PUSH
93363: EMPTY
93364: LIST
93365: LIST
93366: PUSH
93367: EMPTY
93368: LIST
93369: LIST
93370: PUSH
93371: EMPTY
93372: LIST
93373: LIST
93374: LIST
93375: PPUSH
93376: CALL_OW 69
93380: PUSH
93381: FOR_IN
93382: IFFALSE 93436
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
93384: LD_VAR 0 1
93388: PPUSH
93389: CALL_OW 257
93393: PUSH
93394: LD_INT 1
93396: PUSH
93397: LD_INT 2
93399: PUSH
93400: LD_INT 3
93402: PUSH
93403: LD_INT 4
93405: PUSH
93406: EMPTY
93407: LIST
93408: LIST
93409: LIST
93410: LIST
93411: IN
93412: IFFALSE 93434
// SetClass ( un , rand ( 1 , 4 ) ) ;
93414: LD_VAR 0 1
93418: PPUSH
93419: LD_INT 1
93421: PPUSH
93422: LD_INT 4
93424: PPUSH
93425: CALL_OW 12
93429: PPUSH
93430: CALL_OW 336
93434: GO 93381
93436: POP
93437: POP
// end ;
93438: PPOPN 1
93440: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
93441: LD_EXP 90
93445: PUSH
93446: LD_EXP 102
93450: AND
93451: IFFALSE 93530
93453: GO 93455
93455: DISABLE
93456: LD_INT 0
93458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
93459: LD_ADDR_VAR 0 1
93463: PUSH
93464: LD_INT 22
93466: PUSH
93467: LD_OWVAR 2
93471: PUSH
93472: EMPTY
93473: LIST
93474: LIST
93475: PUSH
93476: LD_INT 21
93478: PUSH
93479: LD_INT 3
93481: PUSH
93482: EMPTY
93483: LIST
93484: LIST
93485: PUSH
93486: EMPTY
93487: LIST
93488: LIST
93489: PPUSH
93490: CALL_OW 69
93494: ST_TO_ADDR
// if not tmp then
93495: LD_VAR 0 1
93499: NOT
93500: IFFALSE 93504
// exit ;
93502: GO 93530
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
93504: LD_VAR 0 1
93508: PUSH
93509: LD_INT 1
93511: PPUSH
93512: LD_VAR 0 1
93516: PPUSH
93517: CALL_OW 12
93521: ARRAY
93522: PPUSH
93523: LD_INT 100
93525: PPUSH
93526: CALL_OW 234
// end ;
93530: PPOPN 1
93532: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
93533: LD_EXP 90
93537: PUSH
93538: LD_EXP 104
93542: AND
93543: IFFALSE 93641
93545: GO 93547
93547: DISABLE
93548: LD_INT 0
93550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
93551: LD_ADDR_VAR 0 1
93555: PUSH
93556: LD_INT 22
93558: PUSH
93559: LD_OWVAR 2
93563: PUSH
93564: EMPTY
93565: LIST
93566: LIST
93567: PUSH
93568: LD_INT 21
93570: PUSH
93571: LD_INT 1
93573: PUSH
93574: EMPTY
93575: LIST
93576: LIST
93577: PUSH
93578: EMPTY
93579: LIST
93580: LIST
93581: PPUSH
93582: CALL_OW 69
93586: ST_TO_ADDR
// if not tmp then
93587: LD_VAR 0 1
93591: NOT
93592: IFFALSE 93596
// exit ;
93594: GO 93641
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
93596: LD_VAR 0 1
93600: PUSH
93601: LD_INT 1
93603: PPUSH
93604: LD_VAR 0 1
93608: PPUSH
93609: CALL_OW 12
93613: ARRAY
93614: PPUSH
93615: LD_INT 1
93617: PPUSH
93618: LD_INT 4
93620: PPUSH
93621: CALL_OW 12
93625: PPUSH
93626: LD_INT 3000
93628: PPUSH
93629: LD_INT 9000
93631: PPUSH
93632: CALL_OW 12
93636: PPUSH
93637: CALL_OW 492
// end ;
93641: PPOPN 1
93643: END
// every 0 0$1 trigger StreamModeActive and sDepot do
93644: LD_EXP 90
93648: PUSH
93649: LD_EXP 105
93653: AND
93654: IFFALSE 93674
93656: GO 93658
93658: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
93659: LD_INT 1
93661: PPUSH
93662: LD_OWVAR 2
93666: PPUSH
93667: LD_INT 0
93669: PPUSH
93670: CALL_OW 324
93674: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
93675: LD_EXP 90
93679: PUSH
93680: LD_EXP 106
93684: AND
93685: IFFALSE 93768
93687: GO 93689
93689: DISABLE
93690: LD_INT 0
93692: PPUSH
93693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
93694: LD_ADDR_VAR 0 2
93698: PUSH
93699: LD_INT 22
93701: PUSH
93702: LD_OWVAR 2
93706: PUSH
93707: EMPTY
93708: LIST
93709: LIST
93710: PUSH
93711: LD_INT 21
93713: PUSH
93714: LD_INT 3
93716: PUSH
93717: EMPTY
93718: LIST
93719: LIST
93720: PUSH
93721: EMPTY
93722: LIST
93723: LIST
93724: PPUSH
93725: CALL_OW 69
93729: ST_TO_ADDR
// if not tmp then
93730: LD_VAR 0 2
93734: NOT
93735: IFFALSE 93739
// exit ;
93737: GO 93768
// for i in tmp do
93739: LD_ADDR_VAR 0 1
93743: PUSH
93744: LD_VAR 0 2
93748: PUSH
93749: FOR_IN
93750: IFFALSE 93766
// SetBLevel ( i , 10 ) ;
93752: LD_VAR 0 1
93756: PPUSH
93757: LD_INT 10
93759: PPUSH
93760: CALL_OW 241
93764: GO 93749
93766: POP
93767: POP
// end ;
93768: PPOPN 2
93770: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
93771: LD_EXP 90
93775: PUSH
93776: LD_EXP 107
93780: AND
93781: IFFALSE 93892
93783: GO 93785
93785: DISABLE
93786: LD_INT 0
93788: PPUSH
93789: PPUSH
93790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
93791: LD_ADDR_VAR 0 3
93795: PUSH
93796: LD_INT 22
93798: PUSH
93799: LD_OWVAR 2
93803: PUSH
93804: EMPTY
93805: LIST
93806: LIST
93807: PUSH
93808: LD_INT 25
93810: PUSH
93811: LD_INT 1
93813: PUSH
93814: EMPTY
93815: LIST
93816: LIST
93817: PUSH
93818: EMPTY
93819: LIST
93820: LIST
93821: PPUSH
93822: CALL_OW 69
93826: ST_TO_ADDR
// if not tmp then
93827: LD_VAR 0 3
93831: NOT
93832: IFFALSE 93836
// exit ;
93834: GO 93892
// un := tmp [ rand ( 1 , tmp ) ] ;
93836: LD_ADDR_VAR 0 2
93840: PUSH
93841: LD_VAR 0 3
93845: PUSH
93846: LD_INT 1
93848: PPUSH
93849: LD_VAR 0 3
93853: PPUSH
93854: CALL_OW 12
93858: ARRAY
93859: ST_TO_ADDR
// if Crawls ( un ) then
93860: LD_VAR 0 2
93864: PPUSH
93865: CALL_OW 318
93869: IFFALSE 93880
// ComWalk ( un ) ;
93871: LD_VAR 0 2
93875: PPUSH
93876: CALL_OW 138
// SetClass ( un , class_sniper ) ;
93880: LD_VAR 0 2
93884: PPUSH
93885: LD_INT 5
93887: PPUSH
93888: CALL_OW 336
// end ;
93892: PPOPN 3
93894: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
93895: LD_EXP 90
93899: PUSH
93900: LD_EXP 108
93904: AND
93905: PUSH
93906: LD_OWVAR 67
93910: PUSH
93911: LD_INT 3
93913: LESS
93914: AND
93915: IFFALSE 93934
93917: GO 93919
93919: DISABLE
// Difficulty := Difficulty + 1 ;
93920: LD_ADDR_OWVAR 67
93924: PUSH
93925: LD_OWVAR 67
93929: PUSH
93930: LD_INT 1
93932: PLUS
93933: ST_TO_ADDR
93934: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
93935: LD_EXP 90
93939: PUSH
93940: LD_EXP 109
93944: AND
93945: IFFALSE 94048
93947: GO 93949
93949: DISABLE
93950: LD_INT 0
93952: PPUSH
// begin for i := 1 to 5 do
93953: LD_ADDR_VAR 0 1
93957: PUSH
93958: DOUBLE
93959: LD_INT 1
93961: DEC
93962: ST_TO_ADDR
93963: LD_INT 5
93965: PUSH
93966: FOR_TO
93967: IFFALSE 94046
// begin uc_nation := nation_nature ;
93969: LD_ADDR_OWVAR 21
93973: PUSH
93974: LD_INT 0
93976: ST_TO_ADDR
// uc_side := 0 ;
93977: LD_ADDR_OWVAR 20
93981: PUSH
93982: LD_INT 0
93984: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
93985: LD_ADDR_OWVAR 29
93989: PUSH
93990: LD_INT 12
93992: PUSH
93993: LD_INT 12
93995: PUSH
93996: EMPTY
93997: LIST
93998: LIST
93999: ST_TO_ADDR
// hc_agressivity := 20 ;
94000: LD_ADDR_OWVAR 35
94004: PUSH
94005: LD_INT 20
94007: ST_TO_ADDR
// hc_class := class_tiger ;
94008: LD_ADDR_OWVAR 28
94012: PUSH
94013: LD_INT 14
94015: ST_TO_ADDR
// hc_gallery :=  ;
94016: LD_ADDR_OWVAR 33
94020: PUSH
94021: LD_STRING 
94023: ST_TO_ADDR
// hc_name :=  ;
94024: LD_ADDR_OWVAR 26
94028: PUSH
94029: LD_STRING 
94031: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
94032: CALL_OW 44
94036: PPUSH
94037: LD_INT 0
94039: PPUSH
94040: CALL_OW 51
// end ;
94044: GO 93966
94046: POP
94047: POP
// end ;
94048: PPOPN 1
94050: END
// every 0 0$1 trigger StreamModeActive and sBomb do
94051: LD_EXP 90
94055: PUSH
94056: LD_EXP 110
94060: AND
94061: IFFALSE 94070
94063: GO 94065
94065: DISABLE
// StreamSibBomb ;
94066: CALL 94071 0 0
94070: END
// export function StreamSibBomb ; var i , x , y ; begin
94071: LD_INT 0
94073: PPUSH
94074: PPUSH
94075: PPUSH
94076: PPUSH
// result := false ;
94077: LD_ADDR_VAR 0 1
94081: PUSH
94082: LD_INT 0
94084: ST_TO_ADDR
// for i := 1 to 16 do
94085: LD_ADDR_VAR 0 2
94089: PUSH
94090: DOUBLE
94091: LD_INT 1
94093: DEC
94094: ST_TO_ADDR
94095: LD_INT 16
94097: PUSH
94098: FOR_TO
94099: IFFALSE 94298
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
94101: LD_ADDR_VAR 0 3
94105: PUSH
94106: LD_INT 10
94108: PUSH
94109: LD_INT 20
94111: PUSH
94112: LD_INT 30
94114: PUSH
94115: LD_INT 40
94117: PUSH
94118: LD_INT 50
94120: PUSH
94121: LD_INT 60
94123: PUSH
94124: LD_INT 70
94126: PUSH
94127: LD_INT 80
94129: PUSH
94130: LD_INT 90
94132: PUSH
94133: LD_INT 100
94135: PUSH
94136: LD_INT 110
94138: PUSH
94139: LD_INT 120
94141: PUSH
94142: LD_INT 130
94144: PUSH
94145: LD_INT 140
94147: PUSH
94148: LD_INT 150
94150: PUSH
94151: EMPTY
94152: LIST
94153: LIST
94154: LIST
94155: LIST
94156: LIST
94157: LIST
94158: LIST
94159: LIST
94160: LIST
94161: LIST
94162: LIST
94163: LIST
94164: LIST
94165: LIST
94166: LIST
94167: PUSH
94168: LD_INT 1
94170: PPUSH
94171: LD_INT 15
94173: PPUSH
94174: CALL_OW 12
94178: ARRAY
94179: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
94180: LD_ADDR_VAR 0 4
94184: PUSH
94185: LD_INT 10
94187: PUSH
94188: LD_INT 20
94190: PUSH
94191: LD_INT 30
94193: PUSH
94194: LD_INT 40
94196: PUSH
94197: LD_INT 50
94199: PUSH
94200: LD_INT 60
94202: PUSH
94203: LD_INT 70
94205: PUSH
94206: LD_INT 80
94208: PUSH
94209: LD_INT 90
94211: PUSH
94212: LD_INT 100
94214: PUSH
94215: LD_INT 110
94217: PUSH
94218: LD_INT 120
94220: PUSH
94221: LD_INT 130
94223: PUSH
94224: LD_INT 140
94226: PUSH
94227: LD_INT 150
94229: PUSH
94230: EMPTY
94231: LIST
94232: LIST
94233: LIST
94234: LIST
94235: LIST
94236: LIST
94237: LIST
94238: LIST
94239: LIST
94240: LIST
94241: LIST
94242: LIST
94243: LIST
94244: LIST
94245: LIST
94246: PUSH
94247: LD_INT 1
94249: PPUSH
94250: LD_INT 15
94252: PPUSH
94253: CALL_OW 12
94257: ARRAY
94258: ST_TO_ADDR
// if ValidHex ( x , y ) then
94259: LD_VAR 0 3
94263: PPUSH
94264: LD_VAR 0 4
94268: PPUSH
94269: CALL_OW 488
94273: IFFALSE 94296
// begin result := [ x , y ] ;
94275: LD_ADDR_VAR 0 1
94279: PUSH
94280: LD_VAR 0 3
94284: PUSH
94285: LD_VAR 0 4
94289: PUSH
94290: EMPTY
94291: LIST
94292: LIST
94293: ST_TO_ADDR
// break ;
94294: GO 94298
// end ; end ;
94296: GO 94098
94298: POP
94299: POP
// if result then
94300: LD_VAR 0 1
94304: IFFALSE 94364
// begin ToLua ( playSibBomb() ) ;
94306: LD_STRING playSibBomb()
94308: PPUSH
94309: CALL_OW 559
// wait ( 0 0$14 ) ;
94313: LD_INT 490
94315: PPUSH
94316: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
94320: LD_VAR 0 1
94324: PUSH
94325: LD_INT 1
94327: ARRAY
94328: PPUSH
94329: LD_VAR 0 1
94333: PUSH
94334: LD_INT 2
94336: ARRAY
94337: PPUSH
94338: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
94342: LD_VAR 0 1
94346: PUSH
94347: LD_INT 1
94349: ARRAY
94350: PPUSH
94351: LD_VAR 0 1
94355: PUSH
94356: LD_INT 2
94358: ARRAY
94359: PPUSH
94360: CALL_OW 429
// end ; end ;
94364: LD_VAR 0 1
94368: RET
// every 0 0$1 trigger StreamModeActive and sReset do
94369: LD_EXP 90
94373: PUSH
94374: LD_EXP 112
94378: AND
94379: IFFALSE 94391
94381: GO 94383
94383: DISABLE
// YouLost (  ) ;
94384: LD_STRING 
94386: PPUSH
94387: CALL_OW 104
94391: END
// every 0 0$1 trigger StreamModeActive and sFog do
94392: LD_EXP 90
94396: PUSH
94397: LD_EXP 111
94401: AND
94402: IFFALSE 94416
94404: GO 94406
94406: DISABLE
// FogOff ( your_side ) ;
94407: LD_OWVAR 2
94411: PPUSH
94412: CALL_OW 344
94416: END
// every 0 0$1 trigger StreamModeActive and sSun do
94417: LD_EXP 90
94421: PUSH
94422: LD_EXP 113
94426: AND
94427: IFFALSE 94455
94429: GO 94431
94431: DISABLE
// begin solar_recharge_percent := 0 ;
94432: LD_ADDR_OWVAR 79
94436: PUSH
94437: LD_INT 0
94439: ST_TO_ADDR
// wait ( 5 5$00 ) ;
94440: LD_INT 10500
94442: PPUSH
94443: CALL_OW 67
// solar_recharge_percent := 100 ;
94447: LD_ADDR_OWVAR 79
94451: PUSH
94452: LD_INT 100
94454: ST_TO_ADDR
// end ;
94455: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
94456: LD_EXP 90
94460: PUSH
94461: LD_EXP 114
94465: AND
94466: IFFALSE 94705
94468: GO 94470
94470: DISABLE
94471: LD_INT 0
94473: PPUSH
94474: PPUSH
94475: PPUSH
// begin tmp := [ ] ;
94476: LD_ADDR_VAR 0 3
94480: PUSH
94481: EMPTY
94482: ST_TO_ADDR
// for i := 1 to 6 do
94483: LD_ADDR_VAR 0 1
94487: PUSH
94488: DOUBLE
94489: LD_INT 1
94491: DEC
94492: ST_TO_ADDR
94493: LD_INT 6
94495: PUSH
94496: FOR_TO
94497: IFFALSE 94602
// begin uc_nation := nation_nature ;
94499: LD_ADDR_OWVAR 21
94503: PUSH
94504: LD_INT 0
94506: ST_TO_ADDR
// uc_side := 0 ;
94507: LD_ADDR_OWVAR 20
94511: PUSH
94512: LD_INT 0
94514: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
94515: LD_ADDR_OWVAR 29
94519: PUSH
94520: LD_INT 12
94522: PUSH
94523: LD_INT 12
94525: PUSH
94526: EMPTY
94527: LIST
94528: LIST
94529: ST_TO_ADDR
// hc_agressivity := 20 ;
94530: LD_ADDR_OWVAR 35
94534: PUSH
94535: LD_INT 20
94537: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
94538: LD_ADDR_OWVAR 28
94542: PUSH
94543: LD_INT 17
94545: ST_TO_ADDR
// hc_gallery :=  ;
94546: LD_ADDR_OWVAR 33
94550: PUSH
94551: LD_STRING 
94553: ST_TO_ADDR
// hc_name :=  ;
94554: LD_ADDR_OWVAR 26
94558: PUSH
94559: LD_STRING 
94561: ST_TO_ADDR
// un := CreateHuman ;
94562: LD_ADDR_VAR 0 2
94566: PUSH
94567: CALL_OW 44
94571: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
94572: LD_VAR 0 2
94576: PPUSH
94577: LD_INT 1
94579: PPUSH
94580: CALL_OW 51
// tmp := tmp ^ un ;
94584: LD_ADDR_VAR 0 3
94588: PUSH
94589: LD_VAR 0 3
94593: PUSH
94594: LD_VAR 0 2
94598: ADD
94599: ST_TO_ADDR
// end ;
94600: GO 94496
94602: POP
94603: POP
// repeat wait ( 0 0$1 ) ;
94604: LD_INT 35
94606: PPUSH
94607: CALL_OW 67
// for un in tmp do
94611: LD_ADDR_VAR 0 2
94615: PUSH
94616: LD_VAR 0 3
94620: PUSH
94621: FOR_IN
94622: IFFALSE 94696
// begin if IsDead ( un ) then
94624: LD_VAR 0 2
94628: PPUSH
94629: CALL_OW 301
94633: IFFALSE 94653
// begin tmp := tmp diff un ;
94635: LD_ADDR_VAR 0 3
94639: PUSH
94640: LD_VAR 0 3
94644: PUSH
94645: LD_VAR 0 2
94649: DIFF
94650: ST_TO_ADDR
// continue ;
94651: GO 94621
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
94653: LD_VAR 0 2
94657: PPUSH
94658: LD_INT 3
94660: PUSH
94661: LD_INT 22
94663: PUSH
94664: LD_INT 0
94666: PUSH
94667: EMPTY
94668: LIST
94669: LIST
94670: PUSH
94671: EMPTY
94672: LIST
94673: LIST
94674: PPUSH
94675: CALL_OW 69
94679: PPUSH
94680: LD_VAR 0 2
94684: PPUSH
94685: CALL_OW 74
94689: PPUSH
94690: CALL_OW 115
// end ;
94694: GO 94621
94696: POP
94697: POP
// until not tmp ;
94698: LD_VAR 0 3
94702: NOT
94703: IFFALSE 94604
// end ;
94705: PPOPN 3
94707: END
// every 0 0$1 trigger StreamModeActive and sTroll do
94708: LD_EXP 90
94712: PUSH
94713: LD_EXP 115
94717: AND
94718: IFFALSE 94772
94720: GO 94722
94722: DISABLE
// begin ToLua ( displayTroll(); ) ;
94723: LD_STRING displayTroll();
94725: PPUSH
94726: CALL_OW 559
// wait ( 3 3$00 ) ;
94730: LD_INT 6300
94732: PPUSH
94733: CALL_OW 67
// ToLua ( hideTroll(); ) ;
94737: LD_STRING hideTroll();
94739: PPUSH
94740: CALL_OW 559
// wait ( 1 1$00 ) ;
94744: LD_INT 2100
94746: PPUSH
94747: CALL_OW 67
// ToLua ( displayTroll(); ) ;
94751: LD_STRING displayTroll();
94753: PPUSH
94754: CALL_OW 559
// wait ( 1 1$00 ) ;
94758: LD_INT 2100
94760: PPUSH
94761: CALL_OW 67
// ToLua ( hideTroll(); ) ;
94765: LD_STRING hideTroll();
94767: PPUSH
94768: CALL_OW 559
// end ;
94772: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
94773: LD_EXP 90
94777: PUSH
94778: LD_EXP 116
94782: AND
94783: IFFALSE 94846
94785: GO 94787
94787: DISABLE
94788: LD_INT 0
94790: PPUSH
// begin p := 0 ;
94791: LD_ADDR_VAR 0 1
94795: PUSH
94796: LD_INT 0
94798: ST_TO_ADDR
// repeat game_speed := 1 ;
94799: LD_ADDR_OWVAR 65
94803: PUSH
94804: LD_INT 1
94806: ST_TO_ADDR
// wait ( 0 0$1 ) ;
94807: LD_INT 35
94809: PPUSH
94810: CALL_OW 67
// p := p + 1 ;
94814: LD_ADDR_VAR 0 1
94818: PUSH
94819: LD_VAR 0 1
94823: PUSH
94824: LD_INT 1
94826: PLUS
94827: ST_TO_ADDR
// until p >= 60 ;
94828: LD_VAR 0 1
94832: PUSH
94833: LD_INT 60
94835: GREATEREQUAL
94836: IFFALSE 94799
// game_speed := 4 ;
94838: LD_ADDR_OWVAR 65
94842: PUSH
94843: LD_INT 4
94845: ST_TO_ADDR
// end ;
94846: PPOPN 1
94848: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
94849: LD_EXP 90
94853: PUSH
94854: LD_EXP 117
94858: AND
94859: IFFALSE 95005
94861: GO 94863
94863: DISABLE
94864: LD_INT 0
94866: PPUSH
94867: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
94868: LD_ADDR_VAR 0 1
94872: PUSH
94873: LD_INT 22
94875: PUSH
94876: LD_OWVAR 2
94880: PUSH
94881: EMPTY
94882: LIST
94883: LIST
94884: PUSH
94885: LD_INT 2
94887: PUSH
94888: LD_INT 30
94890: PUSH
94891: LD_INT 0
94893: PUSH
94894: EMPTY
94895: LIST
94896: LIST
94897: PUSH
94898: LD_INT 30
94900: PUSH
94901: LD_INT 1
94903: PUSH
94904: EMPTY
94905: LIST
94906: LIST
94907: PUSH
94908: EMPTY
94909: LIST
94910: LIST
94911: LIST
94912: PUSH
94913: EMPTY
94914: LIST
94915: LIST
94916: PPUSH
94917: CALL_OW 69
94921: ST_TO_ADDR
// if not depot then
94922: LD_VAR 0 1
94926: NOT
94927: IFFALSE 94931
// exit ;
94929: GO 95005
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
94931: LD_ADDR_VAR 0 2
94935: PUSH
94936: LD_VAR 0 1
94940: PUSH
94941: LD_INT 1
94943: PPUSH
94944: LD_VAR 0 1
94948: PPUSH
94949: CALL_OW 12
94953: ARRAY
94954: PPUSH
94955: CALL_OW 274
94959: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
94960: LD_VAR 0 2
94964: PPUSH
94965: LD_INT 1
94967: PPUSH
94968: LD_INT 0
94970: PPUSH
94971: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
94975: LD_VAR 0 2
94979: PPUSH
94980: LD_INT 2
94982: PPUSH
94983: LD_INT 0
94985: PPUSH
94986: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
94990: LD_VAR 0 2
94994: PPUSH
94995: LD_INT 3
94997: PPUSH
94998: LD_INT 0
95000: PPUSH
95001: CALL_OW 277
// end ;
95005: PPOPN 2
95007: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
95008: LD_EXP 90
95012: PUSH
95013: LD_EXP 118
95017: AND
95018: IFFALSE 95115
95020: GO 95022
95022: DISABLE
95023: LD_INT 0
95025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
95026: LD_ADDR_VAR 0 1
95030: PUSH
95031: LD_INT 22
95033: PUSH
95034: LD_OWVAR 2
95038: PUSH
95039: EMPTY
95040: LIST
95041: LIST
95042: PUSH
95043: LD_INT 21
95045: PUSH
95046: LD_INT 1
95048: PUSH
95049: EMPTY
95050: LIST
95051: LIST
95052: PUSH
95053: LD_INT 3
95055: PUSH
95056: LD_INT 23
95058: PUSH
95059: LD_INT 0
95061: PUSH
95062: EMPTY
95063: LIST
95064: LIST
95065: PUSH
95066: EMPTY
95067: LIST
95068: LIST
95069: PUSH
95070: EMPTY
95071: LIST
95072: LIST
95073: LIST
95074: PPUSH
95075: CALL_OW 69
95079: ST_TO_ADDR
// if not tmp then
95080: LD_VAR 0 1
95084: NOT
95085: IFFALSE 95089
// exit ;
95087: GO 95115
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
95089: LD_VAR 0 1
95093: PUSH
95094: LD_INT 1
95096: PPUSH
95097: LD_VAR 0 1
95101: PPUSH
95102: CALL_OW 12
95106: ARRAY
95107: PPUSH
95108: LD_INT 200
95110: PPUSH
95111: CALL_OW 234
// end ;
95115: PPOPN 1
95117: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
95118: LD_EXP 90
95122: PUSH
95123: LD_EXP 119
95127: AND
95128: IFFALSE 95207
95130: GO 95132
95132: DISABLE
95133: LD_INT 0
95135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
95136: LD_ADDR_VAR 0 1
95140: PUSH
95141: LD_INT 22
95143: PUSH
95144: LD_OWVAR 2
95148: PUSH
95149: EMPTY
95150: LIST
95151: LIST
95152: PUSH
95153: LD_INT 21
95155: PUSH
95156: LD_INT 2
95158: PUSH
95159: EMPTY
95160: LIST
95161: LIST
95162: PUSH
95163: EMPTY
95164: LIST
95165: LIST
95166: PPUSH
95167: CALL_OW 69
95171: ST_TO_ADDR
// if not tmp then
95172: LD_VAR 0 1
95176: NOT
95177: IFFALSE 95181
// exit ;
95179: GO 95207
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
95181: LD_VAR 0 1
95185: PUSH
95186: LD_INT 1
95188: PPUSH
95189: LD_VAR 0 1
95193: PPUSH
95194: CALL_OW 12
95198: ARRAY
95199: PPUSH
95200: LD_INT 60
95202: PPUSH
95203: CALL_OW 234
// end ;
95207: PPOPN 1
95209: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
95210: LD_EXP 90
95214: PUSH
95215: LD_EXP 120
95219: AND
95220: IFFALSE 95319
95222: GO 95224
95224: DISABLE
95225: LD_INT 0
95227: PPUSH
95228: PPUSH
// begin enable ;
95229: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
95230: LD_ADDR_VAR 0 1
95234: PUSH
95235: LD_INT 22
95237: PUSH
95238: LD_OWVAR 2
95242: PUSH
95243: EMPTY
95244: LIST
95245: LIST
95246: PUSH
95247: LD_INT 61
95249: PUSH
95250: EMPTY
95251: LIST
95252: PUSH
95253: LD_INT 33
95255: PUSH
95256: LD_INT 2
95258: PUSH
95259: EMPTY
95260: LIST
95261: LIST
95262: PUSH
95263: EMPTY
95264: LIST
95265: LIST
95266: LIST
95267: PPUSH
95268: CALL_OW 69
95272: ST_TO_ADDR
// if not tmp then
95273: LD_VAR 0 1
95277: NOT
95278: IFFALSE 95282
// exit ;
95280: GO 95319
// for i in tmp do
95282: LD_ADDR_VAR 0 2
95286: PUSH
95287: LD_VAR 0 1
95291: PUSH
95292: FOR_IN
95293: IFFALSE 95317
// if IsControledBy ( i ) then
95295: LD_VAR 0 2
95299: PPUSH
95300: CALL_OW 312
95304: IFFALSE 95315
// ComUnlink ( i ) ;
95306: LD_VAR 0 2
95310: PPUSH
95311: CALL_OW 136
95315: GO 95292
95317: POP
95318: POP
// end ;
95319: PPOPN 2
95321: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
95322: LD_EXP 90
95326: PUSH
95327: LD_EXP 121
95331: AND
95332: IFFALSE 95472
95334: GO 95336
95336: DISABLE
95337: LD_INT 0
95339: PPUSH
95340: PPUSH
// begin ToLua ( displayPowell(); ) ;
95341: LD_STRING displayPowell();
95343: PPUSH
95344: CALL_OW 559
// uc_side := 0 ;
95348: LD_ADDR_OWVAR 20
95352: PUSH
95353: LD_INT 0
95355: ST_TO_ADDR
// uc_nation := 2 ;
95356: LD_ADDR_OWVAR 21
95360: PUSH
95361: LD_INT 2
95363: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
95364: LD_ADDR_OWVAR 37
95368: PUSH
95369: LD_INT 14
95371: ST_TO_ADDR
// vc_engine := engine_siberite ;
95372: LD_ADDR_OWVAR 39
95376: PUSH
95377: LD_INT 3
95379: ST_TO_ADDR
// vc_control := control_apeman ;
95380: LD_ADDR_OWVAR 38
95384: PUSH
95385: LD_INT 5
95387: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
95388: LD_ADDR_OWVAR 40
95392: PUSH
95393: LD_INT 29
95395: ST_TO_ADDR
// un := CreateVehicle ;
95396: LD_ADDR_VAR 0 2
95400: PUSH
95401: CALL_OW 45
95405: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
95406: LD_VAR 0 2
95410: PPUSH
95411: LD_INT 1
95413: PPUSH
95414: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
95418: LD_INT 35
95420: PPUSH
95421: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
95425: LD_VAR 0 2
95429: PPUSH
95430: LD_INT 22
95432: PUSH
95433: LD_OWVAR 2
95437: PUSH
95438: EMPTY
95439: LIST
95440: LIST
95441: PPUSH
95442: CALL_OW 69
95446: PPUSH
95447: LD_VAR 0 2
95451: PPUSH
95452: CALL_OW 74
95456: PPUSH
95457: CALL_OW 115
// until IsDead ( un ) ;
95461: LD_VAR 0 2
95465: PPUSH
95466: CALL_OW 301
95470: IFFALSE 95418
// end ;
95472: PPOPN 2
95474: END
// every 0 0$1 trigger StreamModeActive and sStu do
95475: LD_EXP 90
95479: PUSH
95480: LD_EXP 129
95484: AND
95485: IFFALSE 95501
95487: GO 95489
95489: DISABLE
// begin ToLua ( displayStucuk(); ) ;
95490: LD_STRING displayStucuk();
95492: PPUSH
95493: CALL_OW 559
// ResetFog ;
95497: CALL_OW 335
// end ;
95501: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
95502: LD_EXP 90
95506: PUSH
95507: LD_EXP 122
95511: AND
95512: IFFALSE 95653
95514: GO 95516
95516: DISABLE
95517: LD_INT 0
95519: PPUSH
95520: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
95521: LD_ADDR_VAR 0 2
95525: PUSH
95526: LD_INT 22
95528: PUSH
95529: LD_OWVAR 2
95533: PUSH
95534: EMPTY
95535: LIST
95536: LIST
95537: PUSH
95538: LD_INT 21
95540: PUSH
95541: LD_INT 1
95543: PUSH
95544: EMPTY
95545: LIST
95546: LIST
95547: PUSH
95548: EMPTY
95549: LIST
95550: LIST
95551: PPUSH
95552: CALL_OW 69
95556: ST_TO_ADDR
// if not tmp then
95557: LD_VAR 0 2
95561: NOT
95562: IFFALSE 95566
// exit ;
95564: GO 95653
// un := tmp [ rand ( 1 , tmp ) ] ;
95566: LD_ADDR_VAR 0 1
95570: PUSH
95571: LD_VAR 0 2
95575: PUSH
95576: LD_INT 1
95578: PPUSH
95579: LD_VAR 0 2
95583: PPUSH
95584: CALL_OW 12
95588: ARRAY
95589: ST_TO_ADDR
// SetSide ( un , 0 ) ;
95590: LD_VAR 0 1
95594: PPUSH
95595: LD_INT 0
95597: PPUSH
95598: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
95602: LD_VAR 0 1
95606: PPUSH
95607: LD_OWVAR 3
95611: PUSH
95612: LD_VAR 0 1
95616: DIFF
95617: PPUSH
95618: LD_VAR 0 1
95622: PPUSH
95623: CALL_OW 74
95627: PPUSH
95628: CALL_OW 115
// wait ( 0 0$20 ) ;
95632: LD_INT 700
95634: PPUSH
95635: CALL_OW 67
// SetSide ( un , your_side ) ;
95639: LD_VAR 0 1
95643: PPUSH
95644: LD_OWVAR 2
95648: PPUSH
95649: CALL_OW 235
// end ;
95653: PPOPN 2
95655: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
95656: LD_EXP 90
95660: PUSH
95661: LD_EXP 123
95665: AND
95666: IFFALSE 95772
95668: GO 95670
95670: DISABLE
95671: LD_INT 0
95673: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
95674: LD_ADDR_VAR 0 1
95678: PUSH
95679: LD_INT 22
95681: PUSH
95682: LD_OWVAR 2
95686: PUSH
95687: EMPTY
95688: LIST
95689: LIST
95690: PUSH
95691: LD_INT 2
95693: PUSH
95694: LD_INT 30
95696: PUSH
95697: LD_INT 0
95699: PUSH
95700: EMPTY
95701: LIST
95702: LIST
95703: PUSH
95704: LD_INT 30
95706: PUSH
95707: LD_INT 1
95709: PUSH
95710: EMPTY
95711: LIST
95712: LIST
95713: PUSH
95714: EMPTY
95715: LIST
95716: LIST
95717: LIST
95718: PUSH
95719: EMPTY
95720: LIST
95721: LIST
95722: PPUSH
95723: CALL_OW 69
95727: ST_TO_ADDR
// if not depot then
95728: LD_VAR 0 1
95732: NOT
95733: IFFALSE 95737
// exit ;
95735: GO 95772
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
95737: LD_VAR 0 1
95741: PUSH
95742: LD_INT 1
95744: ARRAY
95745: PPUSH
95746: CALL_OW 250
95750: PPUSH
95751: LD_VAR 0 1
95755: PUSH
95756: LD_INT 1
95758: ARRAY
95759: PPUSH
95760: CALL_OW 251
95764: PPUSH
95765: LD_INT 70
95767: PPUSH
95768: CALL_OW 495
// end ;
95772: PPOPN 1
95774: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
95775: LD_EXP 90
95779: PUSH
95780: LD_EXP 124
95784: AND
95785: IFFALSE 95996
95787: GO 95789
95789: DISABLE
95790: LD_INT 0
95792: PPUSH
95793: PPUSH
95794: PPUSH
95795: PPUSH
95796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
95797: LD_ADDR_VAR 0 5
95801: PUSH
95802: LD_INT 22
95804: PUSH
95805: LD_OWVAR 2
95809: PUSH
95810: EMPTY
95811: LIST
95812: LIST
95813: PUSH
95814: LD_INT 21
95816: PUSH
95817: LD_INT 1
95819: PUSH
95820: EMPTY
95821: LIST
95822: LIST
95823: PUSH
95824: EMPTY
95825: LIST
95826: LIST
95827: PPUSH
95828: CALL_OW 69
95832: ST_TO_ADDR
// if not tmp then
95833: LD_VAR 0 5
95837: NOT
95838: IFFALSE 95842
// exit ;
95840: GO 95996
// for i in tmp do
95842: LD_ADDR_VAR 0 1
95846: PUSH
95847: LD_VAR 0 5
95851: PUSH
95852: FOR_IN
95853: IFFALSE 95994
// begin d := rand ( 0 , 5 ) ;
95855: LD_ADDR_VAR 0 4
95859: PUSH
95860: LD_INT 0
95862: PPUSH
95863: LD_INT 5
95865: PPUSH
95866: CALL_OW 12
95870: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
95871: LD_ADDR_VAR 0 2
95875: PUSH
95876: LD_VAR 0 1
95880: PPUSH
95881: CALL_OW 250
95885: PPUSH
95886: LD_VAR 0 4
95890: PPUSH
95891: LD_INT 3
95893: PPUSH
95894: LD_INT 12
95896: PPUSH
95897: CALL_OW 12
95901: PPUSH
95902: CALL_OW 272
95906: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
95907: LD_ADDR_VAR 0 3
95911: PUSH
95912: LD_VAR 0 1
95916: PPUSH
95917: CALL_OW 251
95921: PPUSH
95922: LD_VAR 0 4
95926: PPUSH
95927: LD_INT 3
95929: PPUSH
95930: LD_INT 12
95932: PPUSH
95933: CALL_OW 12
95937: PPUSH
95938: CALL_OW 273
95942: ST_TO_ADDR
// if ValidHex ( x , y ) then
95943: LD_VAR 0 2
95947: PPUSH
95948: LD_VAR 0 3
95952: PPUSH
95953: CALL_OW 488
95957: IFFALSE 95992
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
95959: LD_VAR 0 1
95963: PPUSH
95964: LD_VAR 0 2
95968: PPUSH
95969: LD_VAR 0 3
95973: PPUSH
95974: LD_INT 3
95976: PPUSH
95977: LD_INT 6
95979: PPUSH
95980: CALL_OW 12
95984: PPUSH
95985: LD_INT 1
95987: PPUSH
95988: CALL_OW 483
// end ;
95992: GO 95852
95994: POP
95995: POP
// end ;
95996: PPOPN 5
95998: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
95999: LD_EXP 90
96003: PUSH
96004: LD_EXP 125
96008: AND
96009: IFFALSE 96103
96011: GO 96013
96013: DISABLE
96014: LD_INT 0
96016: PPUSH
96017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
96018: LD_ADDR_VAR 0 2
96022: PUSH
96023: LD_INT 22
96025: PUSH
96026: LD_OWVAR 2
96030: PUSH
96031: EMPTY
96032: LIST
96033: LIST
96034: PUSH
96035: LD_INT 32
96037: PUSH
96038: LD_INT 1
96040: PUSH
96041: EMPTY
96042: LIST
96043: LIST
96044: PUSH
96045: LD_INT 21
96047: PUSH
96048: LD_INT 2
96050: PUSH
96051: EMPTY
96052: LIST
96053: LIST
96054: PUSH
96055: EMPTY
96056: LIST
96057: LIST
96058: LIST
96059: PPUSH
96060: CALL_OW 69
96064: ST_TO_ADDR
// if not tmp then
96065: LD_VAR 0 2
96069: NOT
96070: IFFALSE 96074
// exit ;
96072: GO 96103
// for i in tmp do
96074: LD_ADDR_VAR 0 1
96078: PUSH
96079: LD_VAR 0 2
96083: PUSH
96084: FOR_IN
96085: IFFALSE 96101
// SetFuel ( i , 0 ) ;
96087: LD_VAR 0 1
96091: PPUSH
96092: LD_INT 0
96094: PPUSH
96095: CALL_OW 240
96099: GO 96084
96101: POP
96102: POP
// end ;
96103: PPOPN 2
96105: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
96106: LD_EXP 90
96110: PUSH
96111: LD_EXP 126
96115: AND
96116: IFFALSE 96182
96118: GO 96120
96120: DISABLE
96121: LD_INT 0
96123: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
96124: LD_ADDR_VAR 0 1
96128: PUSH
96129: LD_INT 22
96131: PUSH
96132: LD_OWVAR 2
96136: PUSH
96137: EMPTY
96138: LIST
96139: LIST
96140: PUSH
96141: LD_INT 30
96143: PUSH
96144: LD_INT 29
96146: PUSH
96147: EMPTY
96148: LIST
96149: LIST
96150: PUSH
96151: EMPTY
96152: LIST
96153: LIST
96154: PPUSH
96155: CALL_OW 69
96159: ST_TO_ADDR
// if not tmp then
96160: LD_VAR 0 1
96164: NOT
96165: IFFALSE 96169
// exit ;
96167: GO 96182
// DestroyUnit ( tmp [ 1 ] ) ;
96169: LD_VAR 0 1
96173: PUSH
96174: LD_INT 1
96176: ARRAY
96177: PPUSH
96178: CALL_OW 65
// end ;
96182: PPOPN 1
96184: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
96185: LD_EXP 90
96189: PUSH
96190: LD_EXP 128
96194: AND
96195: IFFALSE 96324
96197: GO 96199
96199: DISABLE
96200: LD_INT 0
96202: PPUSH
// begin uc_side := 0 ;
96203: LD_ADDR_OWVAR 20
96207: PUSH
96208: LD_INT 0
96210: ST_TO_ADDR
// uc_nation := nation_arabian ;
96211: LD_ADDR_OWVAR 21
96215: PUSH
96216: LD_INT 2
96218: ST_TO_ADDR
// hc_gallery :=  ;
96219: LD_ADDR_OWVAR 33
96223: PUSH
96224: LD_STRING 
96226: ST_TO_ADDR
// hc_name :=  ;
96227: LD_ADDR_OWVAR 26
96231: PUSH
96232: LD_STRING 
96234: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
96235: LD_INT 1
96237: PPUSH
96238: LD_INT 11
96240: PPUSH
96241: LD_INT 10
96243: PPUSH
96244: CALL_OW 380
// un := CreateHuman ;
96248: LD_ADDR_VAR 0 1
96252: PUSH
96253: CALL_OW 44
96257: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
96258: LD_VAR 0 1
96262: PPUSH
96263: LD_INT 1
96265: PPUSH
96266: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
96270: LD_INT 35
96272: PPUSH
96273: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
96277: LD_VAR 0 1
96281: PPUSH
96282: LD_INT 22
96284: PUSH
96285: LD_OWVAR 2
96289: PUSH
96290: EMPTY
96291: LIST
96292: LIST
96293: PPUSH
96294: CALL_OW 69
96298: PPUSH
96299: LD_VAR 0 1
96303: PPUSH
96304: CALL_OW 74
96308: PPUSH
96309: CALL_OW 115
// until IsDead ( un ) ;
96313: LD_VAR 0 1
96317: PPUSH
96318: CALL_OW 301
96322: IFFALSE 96270
// end ;
96324: PPOPN 1
96326: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
96327: LD_EXP 90
96331: PUSH
96332: LD_EXP 130
96336: AND
96337: IFFALSE 96349
96339: GO 96341
96341: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
96342: LD_STRING earthquake(getX(game), 0, 32)
96344: PPUSH
96345: CALL_OW 559
96349: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
96350: LD_EXP 90
96354: PUSH
96355: LD_EXP 131
96359: AND
96360: IFFALSE 96451
96362: GO 96364
96364: DISABLE
96365: LD_INT 0
96367: PPUSH
// begin enable ;
96368: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
96369: LD_ADDR_VAR 0 1
96373: PUSH
96374: LD_INT 22
96376: PUSH
96377: LD_OWVAR 2
96381: PUSH
96382: EMPTY
96383: LIST
96384: LIST
96385: PUSH
96386: LD_INT 21
96388: PUSH
96389: LD_INT 2
96391: PUSH
96392: EMPTY
96393: LIST
96394: LIST
96395: PUSH
96396: LD_INT 33
96398: PUSH
96399: LD_INT 3
96401: PUSH
96402: EMPTY
96403: LIST
96404: LIST
96405: PUSH
96406: EMPTY
96407: LIST
96408: LIST
96409: LIST
96410: PPUSH
96411: CALL_OW 69
96415: ST_TO_ADDR
// if not tmp then
96416: LD_VAR 0 1
96420: NOT
96421: IFFALSE 96425
// exit ;
96423: GO 96451
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
96425: LD_VAR 0 1
96429: PUSH
96430: LD_INT 1
96432: PPUSH
96433: LD_VAR 0 1
96437: PPUSH
96438: CALL_OW 12
96442: ARRAY
96443: PPUSH
96444: LD_INT 1
96446: PPUSH
96447: CALL_OW 234
// end ;
96451: PPOPN 1
96453: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
96454: LD_EXP 90
96458: PUSH
96459: LD_EXP 132
96463: AND
96464: IFFALSE 96605
96466: GO 96468
96468: DISABLE
96469: LD_INT 0
96471: PPUSH
96472: PPUSH
96473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
96474: LD_ADDR_VAR 0 3
96478: PUSH
96479: LD_INT 22
96481: PUSH
96482: LD_OWVAR 2
96486: PUSH
96487: EMPTY
96488: LIST
96489: LIST
96490: PUSH
96491: LD_INT 25
96493: PUSH
96494: LD_INT 1
96496: PUSH
96497: EMPTY
96498: LIST
96499: LIST
96500: PUSH
96501: EMPTY
96502: LIST
96503: LIST
96504: PPUSH
96505: CALL_OW 69
96509: ST_TO_ADDR
// if not tmp then
96510: LD_VAR 0 3
96514: NOT
96515: IFFALSE 96519
// exit ;
96517: GO 96605
// un := tmp [ rand ( 1 , tmp ) ] ;
96519: LD_ADDR_VAR 0 2
96523: PUSH
96524: LD_VAR 0 3
96528: PUSH
96529: LD_INT 1
96531: PPUSH
96532: LD_VAR 0 3
96536: PPUSH
96537: CALL_OW 12
96541: ARRAY
96542: ST_TO_ADDR
// if Crawls ( un ) then
96543: LD_VAR 0 2
96547: PPUSH
96548: CALL_OW 318
96552: IFFALSE 96563
// ComWalk ( un ) ;
96554: LD_VAR 0 2
96558: PPUSH
96559: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
96563: LD_VAR 0 2
96567: PPUSH
96568: LD_INT 9
96570: PPUSH
96571: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
96575: LD_INT 28
96577: PPUSH
96578: LD_OWVAR 2
96582: PPUSH
96583: LD_INT 2
96585: PPUSH
96586: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
96590: LD_INT 29
96592: PPUSH
96593: LD_OWVAR 2
96597: PPUSH
96598: LD_INT 2
96600: PPUSH
96601: CALL_OW 322
// end ;
96605: PPOPN 3
96607: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
96608: LD_EXP 90
96612: PUSH
96613: LD_EXP 133
96617: AND
96618: IFFALSE 96729
96620: GO 96622
96622: DISABLE
96623: LD_INT 0
96625: PPUSH
96626: PPUSH
96627: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
96628: LD_ADDR_VAR 0 3
96632: PUSH
96633: LD_INT 22
96635: PUSH
96636: LD_OWVAR 2
96640: PUSH
96641: EMPTY
96642: LIST
96643: LIST
96644: PUSH
96645: LD_INT 25
96647: PUSH
96648: LD_INT 1
96650: PUSH
96651: EMPTY
96652: LIST
96653: LIST
96654: PUSH
96655: EMPTY
96656: LIST
96657: LIST
96658: PPUSH
96659: CALL_OW 69
96663: ST_TO_ADDR
// if not tmp then
96664: LD_VAR 0 3
96668: NOT
96669: IFFALSE 96673
// exit ;
96671: GO 96729
// un := tmp [ rand ( 1 , tmp ) ] ;
96673: LD_ADDR_VAR 0 2
96677: PUSH
96678: LD_VAR 0 3
96682: PUSH
96683: LD_INT 1
96685: PPUSH
96686: LD_VAR 0 3
96690: PPUSH
96691: CALL_OW 12
96695: ARRAY
96696: ST_TO_ADDR
// if Crawls ( un ) then
96697: LD_VAR 0 2
96701: PPUSH
96702: CALL_OW 318
96706: IFFALSE 96717
// ComWalk ( un ) ;
96708: LD_VAR 0 2
96712: PPUSH
96713: CALL_OW 138
// SetClass ( un , class_mortar ) ;
96717: LD_VAR 0 2
96721: PPUSH
96722: LD_INT 8
96724: PPUSH
96725: CALL_OW 336
// end ;
96729: PPOPN 3
96731: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
96732: LD_EXP 90
96736: PUSH
96737: LD_EXP 134
96741: AND
96742: IFFALSE 96886
96744: GO 96746
96746: DISABLE
96747: LD_INT 0
96749: PPUSH
96750: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
96751: LD_ADDR_VAR 0 2
96755: PUSH
96756: LD_INT 22
96758: PUSH
96759: LD_OWVAR 2
96763: PUSH
96764: EMPTY
96765: LIST
96766: LIST
96767: PUSH
96768: LD_INT 21
96770: PUSH
96771: LD_INT 2
96773: PUSH
96774: EMPTY
96775: LIST
96776: LIST
96777: PUSH
96778: LD_INT 2
96780: PUSH
96781: LD_INT 34
96783: PUSH
96784: LD_INT 12
96786: PUSH
96787: EMPTY
96788: LIST
96789: LIST
96790: PUSH
96791: LD_INT 34
96793: PUSH
96794: LD_INT 51
96796: PUSH
96797: EMPTY
96798: LIST
96799: LIST
96800: PUSH
96801: LD_INT 34
96803: PUSH
96804: LD_INT 32
96806: PUSH
96807: EMPTY
96808: LIST
96809: LIST
96810: PUSH
96811: EMPTY
96812: LIST
96813: LIST
96814: LIST
96815: LIST
96816: PUSH
96817: EMPTY
96818: LIST
96819: LIST
96820: LIST
96821: PPUSH
96822: CALL_OW 69
96826: ST_TO_ADDR
// if not tmp then
96827: LD_VAR 0 2
96831: NOT
96832: IFFALSE 96836
// exit ;
96834: GO 96886
// for i in tmp do
96836: LD_ADDR_VAR 0 1
96840: PUSH
96841: LD_VAR 0 2
96845: PUSH
96846: FOR_IN
96847: IFFALSE 96884
// if GetCargo ( i , mat_artifact ) = 0 then
96849: LD_VAR 0 1
96853: PPUSH
96854: LD_INT 4
96856: PPUSH
96857: CALL_OW 289
96861: PUSH
96862: LD_INT 0
96864: EQUAL
96865: IFFALSE 96882
// SetCargo ( i , mat_siberit , 100 ) ;
96867: LD_VAR 0 1
96871: PPUSH
96872: LD_INT 3
96874: PPUSH
96875: LD_INT 100
96877: PPUSH
96878: CALL_OW 290
96882: GO 96846
96884: POP
96885: POP
// end ;
96886: PPOPN 2
96888: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
96889: LD_EXP 90
96893: PUSH
96894: LD_EXP 135
96898: AND
96899: IFFALSE 97082
96901: GO 96903
96903: DISABLE
96904: LD_INT 0
96906: PPUSH
96907: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
96908: LD_ADDR_VAR 0 2
96912: PUSH
96913: LD_INT 22
96915: PUSH
96916: LD_OWVAR 2
96920: PUSH
96921: EMPTY
96922: LIST
96923: LIST
96924: PPUSH
96925: CALL_OW 69
96929: ST_TO_ADDR
// if not tmp then
96930: LD_VAR 0 2
96934: NOT
96935: IFFALSE 96939
// exit ;
96937: GO 97082
// for i := 1 to 2 do
96939: LD_ADDR_VAR 0 1
96943: PUSH
96944: DOUBLE
96945: LD_INT 1
96947: DEC
96948: ST_TO_ADDR
96949: LD_INT 2
96951: PUSH
96952: FOR_TO
96953: IFFALSE 97080
// begin uc_side := your_side ;
96955: LD_ADDR_OWVAR 20
96959: PUSH
96960: LD_OWVAR 2
96964: ST_TO_ADDR
// uc_nation := nation_american ;
96965: LD_ADDR_OWVAR 21
96969: PUSH
96970: LD_INT 1
96972: ST_TO_ADDR
// vc_chassis := us_morphling ;
96973: LD_ADDR_OWVAR 37
96977: PUSH
96978: LD_INT 5
96980: ST_TO_ADDR
// vc_engine := engine_siberite ;
96981: LD_ADDR_OWVAR 39
96985: PUSH
96986: LD_INT 3
96988: ST_TO_ADDR
// vc_control := control_computer ;
96989: LD_ADDR_OWVAR 38
96993: PUSH
96994: LD_INT 3
96996: ST_TO_ADDR
// vc_weapon := us_double_laser ;
96997: LD_ADDR_OWVAR 40
97001: PUSH
97002: LD_INT 10
97004: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
97005: LD_VAR 0 2
97009: PUSH
97010: LD_INT 1
97012: ARRAY
97013: PPUSH
97014: CALL_OW 310
97018: NOT
97019: IFFALSE 97066
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
97021: CALL_OW 45
97025: PPUSH
97026: LD_VAR 0 2
97030: PUSH
97031: LD_INT 1
97033: ARRAY
97034: PPUSH
97035: CALL_OW 250
97039: PPUSH
97040: LD_VAR 0 2
97044: PUSH
97045: LD_INT 1
97047: ARRAY
97048: PPUSH
97049: CALL_OW 251
97053: PPUSH
97054: LD_INT 12
97056: PPUSH
97057: LD_INT 1
97059: PPUSH
97060: CALL_OW 50
97064: GO 97078
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
97066: CALL_OW 45
97070: PPUSH
97071: LD_INT 1
97073: PPUSH
97074: CALL_OW 51
// end ;
97078: GO 96952
97080: POP
97081: POP
// end ;
97082: PPOPN 2
97084: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
97085: LD_EXP 90
97089: PUSH
97090: LD_EXP 136
97094: AND
97095: IFFALSE 97317
97097: GO 97099
97099: DISABLE
97100: LD_INT 0
97102: PPUSH
97103: PPUSH
97104: PPUSH
97105: PPUSH
97106: PPUSH
97107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
97108: LD_ADDR_VAR 0 6
97112: PUSH
97113: LD_INT 22
97115: PUSH
97116: LD_OWVAR 2
97120: PUSH
97121: EMPTY
97122: LIST
97123: LIST
97124: PUSH
97125: LD_INT 21
97127: PUSH
97128: LD_INT 1
97130: PUSH
97131: EMPTY
97132: LIST
97133: LIST
97134: PUSH
97135: LD_INT 3
97137: PUSH
97138: LD_INT 23
97140: PUSH
97141: LD_INT 0
97143: PUSH
97144: EMPTY
97145: LIST
97146: LIST
97147: PUSH
97148: EMPTY
97149: LIST
97150: LIST
97151: PUSH
97152: EMPTY
97153: LIST
97154: LIST
97155: LIST
97156: PPUSH
97157: CALL_OW 69
97161: ST_TO_ADDR
// if not tmp then
97162: LD_VAR 0 6
97166: NOT
97167: IFFALSE 97171
// exit ;
97169: GO 97317
// s1 := rand ( 1 , 4 ) ;
97171: LD_ADDR_VAR 0 2
97175: PUSH
97176: LD_INT 1
97178: PPUSH
97179: LD_INT 4
97181: PPUSH
97182: CALL_OW 12
97186: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
97187: LD_ADDR_VAR 0 4
97191: PUSH
97192: LD_VAR 0 6
97196: PUSH
97197: LD_INT 1
97199: ARRAY
97200: PPUSH
97201: LD_VAR 0 2
97205: PPUSH
97206: CALL_OW 259
97210: ST_TO_ADDR
// if s1 = 1 then
97211: LD_VAR 0 2
97215: PUSH
97216: LD_INT 1
97218: EQUAL
97219: IFFALSE 97239
// s2 := rand ( 2 , 4 ) else
97221: LD_ADDR_VAR 0 3
97225: PUSH
97226: LD_INT 2
97228: PPUSH
97229: LD_INT 4
97231: PPUSH
97232: CALL_OW 12
97236: ST_TO_ADDR
97237: GO 97247
// s2 := 1 ;
97239: LD_ADDR_VAR 0 3
97243: PUSH
97244: LD_INT 1
97246: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
97247: LD_ADDR_VAR 0 5
97251: PUSH
97252: LD_VAR 0 6
97256: PUSH
97257: LD_INT 1
97259: ARRAY
97260: PPUSH
97261: LD_VAR 0 3
97265: PPUSH
97266: CALL_OW 259
97270: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
97271: LD_VAR 0 6
97275: PUSH
97276: LD_INT 1
97278: ARRAY
97279: PPUSH
97280: LD_VAR 0 2
97284: PPUSH
97285: LD_VAR 0 5
97289: PPUSH
97290: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
97294: LD_VAR 0 6
97298: PUSH
97299: LD_INT 1
97301: ARRAY
97302: PPUSH
97303: LD_VAR 0 3
97307: PPUSH
97308: LD_VAR 0 4
97312: PPUSH
97313: CALL_OW 237
// end ;
97317: PPOPN 6
97319: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
97320: LD_EXP 90
97324: PUSH
97325: LD_EXP 137
97329: AND
97330: IFFALSE 97409
97332: GO 97334
97334: DISABLE
97335: LD_INT 0
97337: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
97338: LD_ADDR_VAR 0 1
97342: PUSH
97343: LD_INT 22
97345: PUSH
97346: LD_OWVAR 2
97350: PUSH
97351: EMPTY
97352: LIST
97353: LIST
97354: PUSH
97355: LD_INT 30
97357: PUSH
97358: LD_INT 3
97360: PUSH
97361: EMPTY
97362: LIST
97363: LIST
97364: PUSH
97365: EMPTY
97366: LIST
97367: LIST
97368: PPUSH
97369: CALL_OW 69
97373: ST_TO_ADDR
// if not tmp then
97374: LD_VAR 0 1
97378: NOT
97379: IFFALSE 97383
// exit ;
97381: GO 97409
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
97383: LD_VAR 0 1
97387: PUSH
97388: LD_INT 1
97390: PPUSH
97391: LD_VAR 0 1
97395: PPUSH
97396: CALL_OW 12
97400: ARRAY
97401: PPUSH
97402: LD_INT 1
97404: PPUSH
97405: CALL_OW 234
// end ;
97409: PPOPN 1
97411: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
97412: LD_EXP 90
97416: PUSH
97417: LD_EXP 138
97421: AND
97422: IFFALSE 97534
97424: GO 97426
97426: DISABLE
97427: LD_INT 0
97429: PPUSH
97430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
97431: LD_ADDR_VAR 0 2
97435: PUSH
97436: LD_INT 22
97438: PUSH
97439: LD_OWVAR 2
97443: PUSH
97444: EMPTY
97445: LIST
97446: LIST
97447: PUSH
97448: LD_INT 2
97450: PUSH
97451: LD_INT 30
97453: PUSH
97454: LD_INT 27
97456: PUSH
97457: EMPTY
97458: LIST
97459: LIST
97460: PUSH
97461: LD_INT 30
97463: PUSH
97464: LD_INT 26
97466: PUSH
97467: EMPTY
97468: LIST
97469: LIST
97470: PUSH
97471: LD_INT 30
97473: PUSH
97474: LD_INT 28
97476: PUSH
97477: EMPTY
97478: LIST
97479: LIST
97480: PUSH
97481: EMPTY
97482: LIST
97483: LIST
97484: LIST
97485: LIST
97486: PUSH
97487: EMPTY
97488: LIST
97489: LIST
97490: PPUSH
97491: CALL_OW 69
97495: ST_TO_ADDR
// if not tmp then
97496: LD_VAR 0 2
97500: NOT
97501: IFFALSE 97505
// exit ;
97503: GO 97534
// for i in tmp do
97505: LD_ADDR_VAR 0 1
97509: PUSH
97510: LD_VAR 0 2
97514: PUSH
97515: FOR_IN
97516: IFFALSE 97532
// SetLives ( i , 1 ) ;
97518: LD_VAR 0 1
97522: PPUSH
97523: LD_INT 1
97525: PPUSH
97526: CALL_OW 234
97530: GO 97515
97532: POP
97533: POP
// end ;
97534: PPOPN 2
97536: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
97537: LD_EXP 90
97541: PUSH
97542: LD_EXP 139
97546: AND
97547: IFFALSE 97821
97549: GO 97551
97551: DISABLE
97552: LD_INT 0
97554: PPUSH
97555: PPUSH
97556: PPUSH
// begin i := rand ( 1 , 7 ) ;
97557: LD_ADDR_VAR 0 1
97561: PUSH
97562: LD_INT 1
97564: PPUSH
97565: LD_INT 7
97567: PPUSH
97568: CALL_OW 12
97572: ST_TO_ADDR
// case i of 1 :
97573: LD_VAR 0 1
97577: PUSH
97578: LD_INT 1
97580: DOUBLE
97581: EQUAL
97582: IFTRUE 97586
97584: GO 97596
97586: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
97587: LD_STRING earthquake(getX(game), 0, 32)
97589: PPUSH
97590: CALL_OW 559
97594: GO 97821
97596: LD_INT 2
97598: DOUBLE
97599: EQUAL
97600: IFTRUE 97604
97602: GO 97618
97604: POP
// begin ToLua ( displayStucuk(); ) ;
97605: LD_STRING displayStucuk();
97607: PPUSH
97608: CALL_OW 559
// ResetFog ;
97612: CALL_OW 335
// end ; 3 :
97616: GO 97821
97618: LD_INT 3
97620: DOUBLE
97621: EQUAL
97622: IFTRUE 97626
97624: GO 97730
97626: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
97627: LD_ADDR_VAR 0 2
97631: PUSH
97632: LD_INT 22
97634: PUSH
97635: LD_OWVAR 2
97639: PUSH
97640: EMPTY
97641: LIST
97642: LIST
97643: PUSH
97644: LD_INT 25
97646: PUSH
97647: LD_INT 1
97649: PUSH
97650: EMPTY
97651: LIST
97652: LIST
97653: PUSH
97654: EMPTY
97655: LIST
97656: LIST
97657: PPUSH
97658: CALL_OW 69
97662: ST_TO_ADDR
// if not tmp then
97663: LD_VAR 0 2
97667: NOT
97668: IFFALSE 97672
// exit ;
97670: GO 97821
// un := tmp [ rand ( 1 , tmp ) ] ;
97672: LD_ADDR_VAR 0 3
97676: PUSH
97677: LD_VAR 0 2
97681: PUSH
97682: LD_INT 1
97684: PPUSH
97685: LD_VAR 0 2
97689: PPUSH
97690: CALL_OW 12
97694: ARRAY
97695: ST_TO_ADDR
// if Crawls ( un ) then
97696: LD_VAR 0 3
97700: PPUSH
97701: CALL_OW 318
97705: IFFALSE 97716
// ComWalk ( un ) ;
97707: LD_VAR 0 3
97711: PPUSH
97712: CALL_OW 138
// SetClass ( un , class_mortar ) ;
97716: LD_VAR 0 3
97720: PPUSH
97721: LD_INT 8
97723: PPUSH
97724: CALL_OW 336
// end ; 4 :
97728: GO 97821
97730: LD_INT 4
97732: DOUBLE
97733: EQUAL
97734: IFTRUE 97738
97736: GO 97799
97738: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
97739: LD_ADDR_VAR 0 2
97743: PUSH
97744: LD_INT 22
97746: PUSH
97747: LD_OWVAR 2
97751: PUSH
97752: EMPTY
97753: LIST
97754: LIST
97755: PUSH
97756: LD_INT 30
97758: PUSH
97759: LD_INT 29
97761: PUSH
97762: EMPTY
97763: LIST
97764: LIST
97765: PUSH
97766: EMPTY
97767: LIST
97768: LIST
97769: PPUSH
97770: CALL_OW 69
97774: ST_TO_ADDR
// if not tmp then
97775: LD_VAR 0 2
97779: NOT
97780: IFFALSE 97784
// exit ;
97782: GO 97821
// DestroyUnit ( tmp [ 1 ] ) ;
97784: LD_VAR 0 2
97788: PUSH
97789: LD_INT 1
97791: ARRAY
97792: PPUSH
97793: CALL_OW 65
// end ; 5 .. 7 :
97797: GO 97821
97799: LD_INT 5
97801: DOUBLE
97802: GREATEREQUAL
97803: IFFALSE 97811
97805: LD_INT 7
97807: DOUBLE
97808: LESSEQUAL
97809: IFTRUE 97813
97811: GO 97820
97813: POP
// StreamSibBomb ; end ;
97814: CALL 94071 0 0
97818: GO 97821
97820: POP
// end ;
97821: PPOPN 3
97823: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
97824: LD_EXP 90
97828: PUSH
97829: LD_EXP 140
97833: AND
97834: IFFALSE 97990
97836: GO 97838
97838: DISABLE
97839: LD_INT 0
97841: PPUSH
97842: PPUSH
97843: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
97844: LD_ADDR_VAR 0 2
97848: PUSH
97849: LD_INT 81
97851: PUSH
97852: LD_OWVAR 2
97856: PUSH
97857: EMPTY
97858: LIST
97859: LIST
97860: PUSH
97861: LD_INT 2
97863: PUSH
97864: LD_INT 21
97866: PUSH
97867: LD_INT 1
97869: PUSH
97870: EMPTY
97871: LIST
97872: LIST
97873: PUSH
97874: LD_INT 21
97876: PUSH
97877: LD_INT 2
97879: PUSH
97880: EMPTY
97881: LIST
97882: LIST
97883: PUSH
97884: EMPTY
97885: LIST
97886: LIST
97887: LIST
97888: PUSH
97889: EMPTY
97890: LIST
97891: LIST
97892: PPUSH
97893: CALL_OW 69
97897: ST_TO_ADDR
// if not tmp then
97898: LD_VAR 0 2
97902: NOT
97903: IFFALSE 97907
// exit ;
97905: GO 97990
// p := 0 ;
97907: LD_ADDR_VAR 0 3
97911: PUSH
97912: LD_INT 0
97914: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
97915: LD_INT 35
97917: PPUSH
97918: CALL_OW 67
// p := p + 1 ;
97922: LD_ADDR_VAR 0 3
97926: PUSH
97927: LD_VAR 0 3
97931: PUSH
97932: LD_INT 1
97934: PLUS
97935: ST_TO_ADDR
// for i in tmp do
97936: LD_ADDR_VAR 0 1
97940: PUSH
97941: LD_VAR 0 2
97945: PUSH
97946: FOR_IN
97947: IFFALSE 97978
// if GetLives ( i ) < 1000 then
97949: LD_VAR 0 1
97953: PPUSH
97954: CALL_OW 256
97958: PUSH
97959: LD_INT 1000
97961: LESS
97962: IFFALSE 97976
// SetLives ( i , 1000 ) ;
97964: LD_VAR 0 1
97968: PPUSH
97969: LD_INT 1000
97971: PPUSH
97972: CALL_OW 234
97976: GO 97946
97978: POP
97979: POP
// until p > 20 ;
97980: LD_VAR 0 3
97984: PUSH
97985: LD_INT 20
97987: GREATER
97988: IFFALSE 97915
// end ;
97990: PPOPN 3
97992: END
// every 0 0$1 trigger StreamModeActive and sTime do
97993: LD_EXP 90
97997: PUSH
97998: LD_EXP 141
98002: AND
98003: IFFALSE 98038
98005: GO 98007
98007: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
98008: LD_INT 28
98010: PPUSH
98011: LD_OWVAR 2
98015: PPUSH
98016: LD_INT 2
98018: PPUSH
98019: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
98023: LD_INT 30
98025: PPUSH
98026: LD_OWVAR 2
98030: PPUSH
98031: LD_INT 2
98033: PPUSH
98034: CALL_OW 322
// end ;
98038: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
98039: LD_EXP 90
98043: PUSH
98044: LD_EXP 142
98048: AND
98049: IFFALSE 98170
98051: GO 98053
98053: DISABLE
98054: LD_INT 0
98056: PPUSH
98057: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
98058: LD_ADDR_VAR 0 2
98062: PUSH
98063: LD_INT 22
98065: PUSH
98066: LD_OWVAR 2
98070: PUSH
98071: EMPTY
98072: LIST
98073: LIST
98074: PUSH
98075: LD_INT 21
98077: PUSH
98078: LD_INT 1
98080: PUSH
98081: EMPTY
98082: LIST
98083: LIST
98084: PUSH
98085: LD_INT 3
98087: PUSH
98088: LD_INT 23
98090: PUSH
98091: LD_INT 0
98093: PUSH
98094: EMPTY
98095: LIST
98096: LIST
98097: PUSH
98098: EMPTY
98099: LIST
98100: LIST
98101: PUSH
98102: EMPTY
98103: LIST
98104: LIST
98105: LIST
98106: PPUSH
98107: CALL_OW 69
98111: ST_TO_ADDR
// if not tmp then
98112: LD_VAR 0 2
98116: NOT
98117: IFFALSE 98121
// exit ;
98119: GO 98170
// for i in tmp do
98121: LD_ADDR_VAR 0 1
98125: PUSH
98126: LD_VAR 0 2
98130: PUSH
98131: FOR_IN
98132: IFFALSE 98168
// begin if Crawls ( i ) then
98134: LD_VAR 0 1
98138: PPUSH
98139: CALL_OW 318
98143: IFFALSE 98154
// ComWalk ( i ) ;
98145: LD_VAR 0 1
98149: PPUSH
98150: CALL_OW 138
// SetClass ( i , 2 ) ;
98154: LD_VAR 0 1
98158: PPUSH
98159: LD_INT 2
98161: PPUSH
98162: CALL_OW 336
// end ;
98166: GO 98131
98168: POP
98169: POP
// end ;
98170: PPOPN 2
98172: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
98173: LD_EXP 90
98177: PUSH
98178: LD_EXP 143
98182: AND
98183: IFFALSE 98464
98185: GO 98187
98187: DISABLE
98188: LD_INT 0
98190: PPUSH
98191: PPUSH
98192: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
98193: LD_OWVAR 2
98197: PPUSH
98198: LD_INT 9
98200: PPUSH
98201: LD_INT 1
98203: PPUSH
98204: LD_INT 1
98206: PPUSH
98207: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
98211: LD_INT 9
98213: PPUSH
98214: LD_OWVAR 2
98218: PPUSH
98219: CALL_OW 343
// uc_side := 9 ;
98223: LD_ADDR_OWVAR 20
98227: PUSH
98228: LD_INT 9
98230: ST_TO_ADDR
// uc_nation := 2 ;
98231: LD_ADDR_OWVAR 21
98235: PUSH
98236: LD_INT 2
98238: ST_TO_ADDR
// hc_name := Dark Warrior ;
98239: LD_ADDR_OWVAR 26
98243: PUSH
98244: LD_STRING Dark Warrior
98246: ST_TO_ADDR
// hc_gallery :=  ;
98247: LD_ADDR_OWVAR 33
98251: PUSH
98252: LD_STRING 
98254: ST_TO_ADDR
// hc_noskilllimit := true ;
98255: LD_ADDR_OWVAR 76
98259: PUSH
98260: LD_INT 1
98262: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
98263: LD_ADDR_OWVAR 31
98267: PUSH
98268: LD_INT 30
98270: PUSH
98271: LD_INT 30
98273: PUSH
98274: LD_INT 30
98276: PUSH
98277: LD_INT 30
98279: PUSH
98280: EMPTY
98281: LIST
98282: LIST
98283: LIST
98284: LIST
98285: ST_TO_ADDR
// un := CreateHuman ;
98286: LD_ADDR_VAR 0 3
98290: PUSH
98291: CALL_OW 44
98295: ST_TO_ADDR
// hc_noskilllimit := false ;
98296: LD_ADDR_OWVAR 76
98300: PUSH
98301: LD_INT 0
98303: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
98304: LD_VAR 0 3
98308: PPUSH
98309: LD_INT 1
98311: PPUSH
98312: CALL_OW 51
// p := 0 ;
98316: LD_ADDR_VAR 0 2
98320: PUSH
98321: LD_INT 0
98323: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
98324: LD_INT 35
98326: PPUSH
98327: CALL_OW 67
// p := p + 1 ;
98331: LD_ADDR_VAR 0 2
98335: PUSH
98336: LD_VAR 0 2
98340: PUSH
98341: LD_INT 1
98343: PLUS
98344: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
98345: LD_VAR 0 3
98349: PPUSH
98350: CALL_OW 256
98354: PUSH
98355: LD_INT 1000
98357: LESS
98358: IFFALSE 98372
// SetLives ( un , 1000 ) ;
98360: LD_VAR 0 3
98364: PPUSH
98365: LD_INT 1000
98367: PPUSH
98368: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
98372: LD_VAR 0 3
98376: PPUSH
98377: LD_INT 81
98379: PUSH
98380: LD_OWVAR 2
98384: PUSH
98385: EMPTY
98386: LIST
98387: LIST
98388: PUSH
98389: LD_INT 91
98391: PUSH
98392: LD_VAR 0 3
98396: PUSH
98397: LD_INT 30
98399: PUSH
98400: EMPTY
98401: LIST
98402: LIST
98403: LIST
98404: PUSH
98405: EMPTY
98406: LIST
98407: LIST
98408: PPUSH
98409: CALL_OW 69
98413: PPUSH
98414: LD_VAR 0 3
98418: PPUSH
98419: CALL_OW 74
98423: PPUSH
98424: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
98428: LD_VAR 0 2
98432: PUSH
98433: LD_INT 60
98435: GREATER
98436: PUSH
98437: LD_VAR 0 3
98441: PPUSH
98442: CALL_OW 301
98446: OR
98447: IFFALSE 98324
// if un then
98449: LD_VAR 0 3
98453: IFFALSE 98464
// RemoveUnit ( un ) ;
98455: LD_VAR 0 3
98459: PPUSH
98460: CALL_OW 64
// end ;
98464: PPOPN 3
98466: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
98467: LD_INT 0
98469: PPUSH
// case cmd of 301 :
98470: LD_VAR 0 1
98474: PUSH
98475: LD_INT 301
98477: DOUBLE
98478: EQUAL
98479: IFTRUE 98483
98481: GO 98515
98483: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
98484: LD_VAR 0 6
98488: PPUSH
98489: LD_VAR 0 7
98493: PPUSH
98494: LD_VAR 0 8
98498: PPUSH
98499: LD_VAR 0 4
98503: PPUSH
98504: LD_VAR 0 5
98508: PPUSH
98509: CALL 99716 0 5
98513: GO 98636
98515: LD_INT 302
98517: DOUBLE
98518: EQUAL
98519: IFTRUE 98523
98521: GO 98560
98523: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
98524: LD_VAR 0 6
98528: PPUSH
98529: LD_VAR 0 7
98533: PPUSH
98534: LD_VAR 0 8
98538: PPUSH
98539: LD_VAR 0 9
98543: PPUSH
98544: LD_VAR 0 4
98548: PPUSH
98549: LD_VAR 0 5
98553: PPUSH
98554: CALL 99807 0 6
98558: GO 98636
98560: LD_INT 303
98562: DOUBLE
98563: EQUAL
98564: IFTRUE 98568
98566: GO 98605
98568: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
98569: LD_VAR 0 6
98573: PPUSH
98574: LD_VAR 0 7
98578: PPUSH
98579: LD_VAR 0 8
98583: PPUSH
98584: LD_VAR 0 9
98588: PPUSH
98589: LD_VAR 0 4
98593: PPUSH
98594: LD_VAR 0 5
98598: PPUSH
98599: CALL 98641 0 6
98603: GO 98636
98605: LD_INT 304
98607: DOUBLE
98608: EQUAL
98609: IFTRUE 98613
98611: GO 98635
98613: POP
// hHackTeleport ( unit , x , y ) ; end ;
98614: LD_VAR 0 2
98618: PPUSH
98619: LD_VAR 0 4
98623: PPUSH
98624: LD_VAR 0 5
98628: PPUSH
98629: CALL 100400 0 3
98633: GO 98636
98635: POP
// end ;
98636: LD_VAR 0 12
98640: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
98641: LD_INT 0
98643: PPUSH
98644: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
98645: LD_VAR 0 1
98649: PUSH
98650: LD_INT 1
98652: LESS
98653: PUSH
98654: LD_VAR 0 1
98658: PUSH
98659: LD_INT 3
98661: GREATER
98662: OR
98663: PUSH
98664: LD_VAR 0 5
98668: PPUSH
98669: LD_VAR 0 6
98673: PPUSH
98674: CALL_OW 428
98678: OR
98679: IFFALSE 98683
// exit ;
98681: GO 99403
// uc_side := your_side ;
98683: LD_ADDR_OWVAR 20
98687: PUSH
98688: LD_OWVAR 2
98692: ST_TO_ADDR
// uc_nation := nation ;
98693: LD_ADDR_OWVAR 21
98697: PUSH
98698: LD_VAR 0 1
98702: ST_TO_ADDR
// bc_level = 1 ;
98703: LD_ADDR_OWVAR 43
98707: PUSH
98708: LD_INT 1
98710: ST_TO_ADDR
// case btype of 1 :
98711: LD_VAR 0 2
98715: PUSH
98716: LD_INT 1
98718: DOUBLE
98719: EQUAL
98720: IFTRUE 98724
98722: GO 98735
98724: POP
// bc_type := b_depot ; 2 :
98725: LD_ADDR_OWVAR 42
98729: PUSH
98730: LD_INT 0
98732: ST_TO_ADDR
98733: GO 99347
98735: LD_INT 2
98737: DOUBLE
98738: EQUAL
98739: IFTRUE 98743
98741: GO 98754
98743: POP
// bc_type := b_warehouse ; 3 :
98744: LD_ADDR_OWVAR 42
98748: PUSH
98749: LD_INT 1
98751: ST_TO_ADDR
98752: GO 99347
98754: LD_INT 3
98756: DOUBLE
98757: EQUAL
98758: IFTRUE 98762
98760: GO 98773
98762: POP
// bc_type := b_lab ; 4 .. 9 :
98763: LD_ADDR_OWVAR 42
98767: PUSH
98768: LD_INT 6
98770: ST_TO_ADDR
98771: GO 99347
98773: LD_INT 4
98775: DOUBLE
98776: GREATEREQUAL
98777: IFFALSE 98785
98779: LD_INT 9
98781: DOUBLE
98782: LESSEQUAL
98783: IFTRUE 98787
98785: GO 98839
98787: POP
// begin bc_type := b_lab_half ;
98788: LD_ADDR_OWVAR 42
98792: PUSH
98793: LD_INT 7
98795: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
98796: LD_ADDR_OWVAR 44
98800: PUSH
98801: LD_INT 10
98803: PUSH
98804: LD_INT 11
98806: PUSH
98807: LD_INT 12
98809: PUSH
98810: LD_INT 15
98812: PUSH
98813: LD_INT 14
98815: PUSH
98816: LD_INT 13
98818: PUSH
98819: EMPTY
98820: LIST
98821: LIST
98822: LIST
98823: LIST
98824: LIST
98825: LIST
98826: PUSH
98827: LD_VAR 0 2
98831: PUSH
98832: LD_INT 3
98834: MINUS
98835: ARRAY
98836: ST_TO_ADDR
// end ; 10 .. 13 :
98837: GO 99347
98839: LD_INT 10
98841: DOUBLE
98842: GREATEREQUAL
98843: IFFALSE 98851
98845: LD_INT 13
98847: DOUBLE
98848: LESSEQUAL
98849: IFTRUE 98853
98851: GO 98930
98853: POP
// begin bc_type := b_lab_full ;
98854: LD_ADDR_OWVAR 42
98858: PUSH
98859: LD_INT 8
98861: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
98862: LD_ADDR_OWVAR 44
98866: PUSH
98867: LD_INT 10
98869: PUSH
98870: LD_INT 12
98872: PUSH
98873: LD_INT 14
98875: PUSH
98876: LD_INT 13
98878: PUSH
98879: EMPTY
98880: LIST
98881: LIST
98882: LIST
98883: LIST
98884: PUSH
98885: LD_VAR 0 2
98889: PUSH
98890: LD_INT 9
98892: MINUS
98893: ARRAY
98894: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
98895: LD_ADDR_OWVAR 45
98899: PUSH
98900: LD_INT 11
98902: PUSH
98903: LD_INT 15
98905: PUSH
98906: LD_INT 12
98908: PUSH
98909: LD_INT 15
98911: PUSH
98912: EMPTY
98913: LIST
98914: LIST
98915: LIST
98916: LIST
98917: PUSH
98918: LD_VAR 0 2
98922: PUSH
98923: LD_INT 9
98925: MINUS
98926: ARRAY
98927: ST_TO_ADDR
// end ; 14 :
98928: GO 99347
98930: LD_INT 14
98932: DOUBLE
98933: EQUAL
98934: IFTRUE 98938
98936: GO 98949
98938: POP
// bc_type := b_workshop ; 15 :
98939: LD_ADDR_OWVAR 42
98943: PUSH
98944: LD_INT 2
98946: ST_TO_ADDR
98947: GO 99347
98949: LD_INT 15
98951: DOUBLE
98952: EQUAL
98953: IFTRUE 98957
98955: GO 98968
98957: POP
// bc_type := b_factory ; 16 :
98958: LD_ADDR_OWVAR 42
98962: PUSH
98963: LD_INT 3
98965: ST_TO_ADDR
98966: GO 99347
98968: LD_INT 16
98970: DOUBLE
98971: EQUAL
98972: IFTRUE 98976
98974: GO 98987
98976: POP
// bc_type := b_ext_gun ; 17 :
98977: LD_ADDR_OWVAR 42
98981: PUSH
98982: LD_INT 17
98984: ST_TO_ADDR
98985: GO 99347
98987: LD_INT 17
98989: DOUBLE
98990: EQUAL
98991: IFTRUE 98995
98993: GO 99023
98995: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
98996: LD_ADDR_OWVAR 42
99000: PUSH
99001: LD_INT 19
99003: PUSH
99004: LD_INT 23
99006: PUSH
99007: LD_INT 19
99009: PUSH
99010: EMPTY
99011: LIST
99012: LIST
99013: LIST
99014: PUSH
99015: LD_VAR 0 1
99019: ARRAY
99020: ST_TO_ADDR
99021: GO 99347
99023: LD_INT 18
99025: DOUBLE
99026: EQUAL
99027: IFTRUE 99031
99029: GO 99042
99031: POP
// bc_type := b_ext_radar ; 19 :
99032: LD_ADDR_OWVAR 42
99036: PUSH
99037: LD_INT 20
99039: ST_TO_ADDR
99040: GO 99347
99042: LD_INT 19
99044: DOUBLE
99045: EQUAL
99046: IFTRUE 99050
99048: GO 99061
99050: POP
// bc_type := b_ext_radio ; 20 :
99051: LD_ADDR_OWVAR 42
99055: PUSH
99056: LD_INT 22
99058: ST_TO_ADDR
99059: GO 99347
99061: LD_INT 20
99063: DOUBLE
99064: EQUAL
99065: IFTRUE 99069
99067: GO 99080
99069: POP
// bc_type := b_ext_siberium ; 21 :
99070: LD_ADDR_OWVAR 42
99074: PUSH
99075: LD_INT 21
99077: ST_TO_ADDR
99078: GO 99347
99080: LD_INT 21
99082: DOUBLE
99083: EQUAL
99084: IFTRUE 99088
99086: GO 99099
99088: POP
// bc_type := b_ext_computer ; 22 :
99089: LD_ADDR_OWVAR 42
99093: PUSH
99094: LD_INT 24
99096: ST_TO_ADDR
99097: GO 99347
99099: LD_INT 22
99101: DOUBLE
99102: EQUAL
99103: IFTRUE 99107
99105: GO 99118
99107: POP
// bc_type := b_ext_track ; 23 :
99108: LD_ADDR_OWVAR 42
99112: PUSH
99113: LD_INT 16
99115: ST_TO_ADDR
99116: GO 99347
99118: LD_INT 23
99120: DOUBLE
99121: EQUAL
99122: IFTRUE 99126
99124: GO 99137
99126: POP
// bc_type := b_ext_laser ; 24 :
99127: LD_ADDR_OWVAR 42
99131: PUSH
99132: LD_INT 25
99134: ST_TO_ADDR
99135: GO 99347
99137: LD_INT 24
99139: DOUBLE
99140: EQUAL
99141: IFTRUE 99145
99143: GO 99156
99145: POP
// bc_type := b_control_tower ; 25 :
99146: LD_ADDR_OWVAR 42
99150: PUSH
99151: LD_INT 36
99153: ST_TO_ADDR
99154: GO 99347
99156: LD_INT 25
99158: DOUBLE
99159: EQUAL
99160: IFTRUE 99164
99162: GO 99175
99164: POP
// bc_type := b_breastwork ; 26 :
99165: LD_ADDR_OWVAR 42
99169: PUSH
99170: LD_INT 31
99172: ST_TO_ADDR
99173: GO 99347
99175: LD_INT 26
99177: DOUBLE
99178: EQUAL
99179: IFTRUE 99183
99181: GO 99194
99183: POP
// bc_type := b_bunker ; 27 :
99184: LD_ADDR_OWVAR 42
99188: PUSH
99189: LD_INT 32
99191: ST_TO_ADDR
99192: GO 99347
99194: LD_INT 27
99196: DOUBLE
99197: EQUAL
99198: IFTRUE 99202
99200: GO 99213
99202: POP
// bc_type := b_turret ; 28 :
99203: LD_ADDR_OWVAR 42
99207: PUSH
99208: LD_INT 33
99210: ST_TO_ADDR
99211: GO 99347
99213: LD_INT 28
99215: DOUBLE
99216: EQUAL
99217: IFTRUE 99221
99219: GO 99232
99221: POP
// bc_type := b_armoury ; 29 :
99222: LD_ADDR_OWVAR 42
99226: PUSH
99227: LD_INT 4
99229: ST_TO_ADDR
99230: GO 99347
99232: LD_INT 29
99234: DOUBLE
99235: EQUAL
99236: IFTRUE 99240
99238: GO 99251
99240: POP
// bc_type := b_barracks ; 30 :
99241: LD_ADDR_OWVAR 42
99245: PUSH
99246: LD_INT 5
99248: ST_TO_ADDR
99249: GO 99347
99251: LD_INT 30
99253: DOUBLE
99254: EQUAL
99255: IFTRUE 99259
99257: GO 99270
99259: POP
// bc_type := b_solar_power ; 31 :
99260: LD_ADDR_OWVAR 42
99264: PUSH
99265: LD_INT 27
99267: ST_TO_ADDR
99268: GO 99347
99270: LD_INT 31
99272: DOUBLE
99273: EQUAL
99274: IFTRUE 99278
99276: GO 99289
99278: POP
// bc_type := b_oil_power ; 32 :
99279: LD_ADDR_OWVAR 42
99283: PUSH
99284: LD_INT 26
99286: ST_TO_ADDR
99287: GO 99347
99289: LD_INT 32
99291: DOUBLE
99292: EQUAL
99293: IFTRUE 99297
99295: GO 99308
99297: POP
// bc_type := b_siberite_power ; 33 :
99298: LD_ADDR_OWVAR 42
99302: PUSH
99303: LD_INT 28
99305: ST_TO_ADDR
99306: GO 99347
99308: LD_INT 33
99310: DOUBLE
99311: EQUAL
99312: IFTRUE 99316
99314: GO 99327
99316: POP
// bc_type := b_oil_mine ; 34 :
99317: LD_ADDR_OWVAR 42
99321: PUSH
99322: LD_INT 29
99324: ST_TO_ADDR
99325: GO 99347
99327: LD_INT 34
99329: DOUBLE
99330: EQUAL
99331: IFTRUE 99335
99333: GO 99346
99335: POP
// bc_type := b_siberite_mine ; end ;
99336: LD_ADDR_OWVAR 42
99340: PUSH
99341: LD_INT 30
99343: ST_TO_ADDR
99344: GO 99347
99346: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
99347: LD_ADDR_VAR 0 8
99351: PUSH
99352: LD_VAR 0 5
99356: PPUSH
99357: LD_VAR 0 6
99361: PPUSH
99362: LD_VAR 0 3
99366: PPUSH
99367: CALL_OW 47
99371: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
99372: LD_OWVAR 42
99376: PUSH
99377: LD_INT 32
99379: PUSH
99380: LD_INT 33
99382: PUSH
99383: EMPTY
99384: LIST
99385: LIST
99386: IN
99387: IFFALSE 99403
// PlaceWeaponTurret ( b , weapon ) ;
99389: LD_VAR 0 8
99393: PPUSH
99394: LD_VAR 0 4
99398: PPUSH
99399: CALL_OW 431
// end ;
99403: LD_VAR 0 7
99407: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
99408: LD_INT 0
99410: PPUSH
99411: PPUSH
99412: PPUSH
99413: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
99414: LD_ADDR_VAR 0 4
99418: PUSH
99419: LD_INT 22
99421: PUSH
99422: LD_OWVAR 2
99426: PUSH
99427: EMPTY
99428: LIST
99429: LIST
99430: PUSH
99431: LD_INT 2
99433: PUSH
99434: LD_INT 30
99436: PUSH
99437: LD_INT 0
99439: PUSH
99440: EMPTY
99441: LIST
99442: LIST
99443: PUSH
99444: LD_INT 30
99446: PUSH
99447: LD_INT 1
99449: PUSH
99450: EMPTY
99451: LIST
99452: LIST
99453: PUSH
99454: EMPTY
99455: LIST
99456: LIST
99457: LIST
99458: PUSH
99459: EMPTY
99460: LIST
99461: LIST
99462: PPUSH
99463: CALL_OW 69
99467: ST_TO_ADDR
// if not tmp then
99468: LD_VAR 0 4
99472: NOT
99473: IFFALSE 99477
// exit ;
99475: GO 99536
// for i in tmp do
99477: LD_ADDR_VAR 0 2
99481: PUSH
99482: LD_VAR 0 4
99486: PUSH
99487: FOR_IN
99488: IFFALSE 99534
// for j = 1 to 3 do
99490: LD_ADDR_VAR 0 3
99494: PUSH
99495: DOUBLE
99496: LD_INT 1
99498: DEC
99499: ST_TO_ADDR
99500: LD_INT 3
99502: PUSH
99503: FOR_TO
99504: IFFALSE 99530
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
99506: LD_VAR 0 2
99510: PPUSH
99511: CALL_OW 274
99515: PPUSH
99516: LD_VAR 0 3
99520: PPUSH
99521: LD_INT 99999
99523: PPUSH
99524: CALL_OW 277
99528: GO 99503
99530: POP
99531: POP
99532: GO 99487
99534: POP
99535: POP
// end ;
99536: LD_VAR 0 1
99540: RET
// export function hHackSetLevel10 ; var i , j ; begin
99541: LD_INT 0
99543: PPUSH
99544: PPUSH
99545: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
99546: LD_ADDR_VAR 0 2
99550: PUSH
99551: LD_INT 21
99553: PUSH
99554: LD_INT 1
99556: PUSH
99557: EMPTY
99558: LIST
99559: LIST
99560: PPUSH
99561: CALL_OW 69
99565: PUSH
99566: FOR_IN
99567: IFFALSE 99619
// if IsSelected ( i ) then
99569: LD_VAR 0 2
99573: PPUSH
99574: CALL_OW 306
99578: IFFALSE 99617
// begin for j := 1 to 4 do
99580: LD_ADDR_VAR 0 3
99584: PUSH
99585: DOUBLE
99586: LD_INT 1
99588: DEC
99589: ST_TO_ADDR
99590: LD_INT 4
99592: PUSH
99593: FOR_TO
99594: IFFALSE 99615
// SetSkill ( i , j , 10 ) ;
99596: LD_VAR 0 2
99600: PPUSH
99601: LD_VAR 0 3
99605: PPUSH
99606: LD_INT 10
99608: PPUSH
99609: CALL_OW 237
99613: GO 99593
99615: POP
99616: POP
// end ;
99617: GO 99566
99619: POP
99620: POP
// end ;
99621: LD_VAR 0 1
99625: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
99626: LD_INT 0
99628: PPUSH
99629: PPUSH
99630: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
99631: LD_ADDR_VAR 0 2
99635: PUSH
99636: LD_INT 22
99638: PUSH
99639: LD_OWVAR 2
99643: PUSH
99644: EMPTY
99645: LIST
99646: LIST
99647: PUSH
99648: LD_INT 21
99650: PUSH
99651: LD_INT 1
99653: PUSH
99654: EMPTY
99655: LIST
99656: LIST
99657: PUSH
99658: EMPTY
99659: LIST
99660: LIST
99661: PPUSH
99662: CALL_OW 69
99666: PUSH
99667: FOR_IN
99668: IFFALSE 99709
// begin for j := 1 to 4 do
99670: LD_ADDR_VAR 0 3
99674: PUSH
99675: DOUBLE
99676: LD_INT 1
99678: DEC
99679: ST_TO_ADDR
99680: LD_INT 4
99682: PUSH
99683: FOR_TO
99684: IFFALSE 99705
// SetSkill ( i , j , 10 ) ;
99686: LD_VAR 0 2
99690: PPUSH
99691: LD_VAR 0 3
99695: PPUSH
99696: LD_INT 10
99698: PPUSH
99699: CALL_OW 237
99703: GO 99683
99705: POP
99706: POP
// end ;
99707: GO 99667
99709: POP
99710: POP
// end ;
99711: LD_VAR 0 1
99715: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
99716: LD_INT 0
99718: PPUSH
// uc_side := your_side ;
99719: LD_ADDR_OWVAR 20
99723: PUSH
99724: LD_OWVAR 2
99728: ST_TO_ADDR
// uc_nation := nation ;
99729: LD_ADDR_OWVAR 21
99733: PUSH
99734: LD_VAR 0 1
99738: ST_TO_ADDR
// InitHc ;
99739: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
99743: LD_INT 0
99745: PPUSH
99746: LD_VAR 0 2
99750: PPUSH
99751: LD_VAR 0 3
99755: PPUSH
99756: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
99760: LD_VAR 0 4
99764: PPUSH
99765: LD_VAR 0 5
99769: PPUSH
99770: CALL_OW 428
99774: PUSH
99775: LD_INT 0
99777: EQUAL
99778: IFFALSE 99802
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
99780: CALL_OW 44
99784: PPUSH
99785: LD_VAR 0 4
99789: PPUSH
99790: LD_VAR 0 5
99794: PPUSH
99795: LD_INT 1
99797: PPUSH
99798: CALL_OW 48
// end ;
99802: LD_VAR 0 6
99806: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
99807: LD_INT 0
99809: PPUSH
99810: PPUSH
// uc_side := your_side ;
99811: LD_ADDR_OWVAR 20
99815: PUSH
99816: LD_OWVAR 2
99820: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
99821: LD_VAR 0 1
99825: PUSH
99826: LD_INT 1
99828: PUSH
99829: LD_INT 2
99831: PUSH
99832: LD_INT 3
99834: PUSH
99835: LD_INT 4
99837: PUSH
99838: LD_INT 5
99840: PUSH
99841: EMPTY
99842: LIST
99843: LIST
99844: LIST
99845: LIST
99846: LIST
99847: IN
99848: IFFALSE 99860
// uc_nation := nation_american else
99850: LD_ADDR_OWVAR 21
99854: PUSH
99855: LD_INT 1
99857: ST_TO_ADDR
99858: GO 99903
// if chassis in [ 11 , 12 , 13 , 14 ] then
99860: LD_VAR 0 1
99864: PUSH
99865: LD_INT 11
99867: PUSH
99868: LD_INT 12
99870: PUSH
99871: LD_INT 13
99873: PUSH
99874: LD_INT 14
99876: PUSH
99877: EMPTY
99878: LIST
99879: LIST
99880: LIST
99881: LIST
99882: IN
99883: IFFALSE 99895
// uc_nation := nation_arabian else
99885: LD_ADDR_OWVAR 21
99889: PUSH
99890: LD_INT 2
99892: ST_TO_ADDR
99893: GO 99903
// uc_nation := nation_russian ;
99895: LD_ADDR_OWVAR 21
99899: PUSH
99900: LD_INT 3
99902: ST_TO_ADDR
// vc_chassis := chassis ;
99903: LD_ADDR_OWVAR 37
99907: PUSH
99908: LD_VAR 0 1
99912: ST_TO_ADDR
// vc_engine := engine ;
99913: LD_ADDR_OWVAR 39
99917: PUSH
99918: LD_VAR 0 2
99922: ST_TO_ADDR
// vc_control := control ;
99923: LD_ADDR_OWVAR 38
99927: PUSH
99928: LD_VAR 0 3
99932: ST_TO_ADDR
// vc_weapon := weapon ;
99933: LD_ADDR_OWVAR 40
99937: PUSH
99938: LD_VAR 0 4
99942: ST_TO_ADDR
// un := CreateVehicle ;
99943: LD_ADDR_VAR 0 8
99947: PUSH
99948: CALL_OW 45
99952: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
99953: LD_VAR 0 8
99957: PPUSH
99958: LD_INT 0
99960: PPUSH
99961: LD_INT 5
99963: PPUSH
99964: CALL_OW 12
99968: PPUSH
99969: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
99973: LD_VAR 0 8
99977: PPUSH
99978: LD_VAR 0 5
99982: PPUSH
99983: LD_VAR 0 6
99987: PPUSH
99988: LD_INT 1
99990: PPUSH
99991: CALL_OW 48
// end ;
99995: LD_VAR 0 7
99999: RET
// export hInvincible ; every 1 do
100000: GO 100002
100002: DISABLE
// hInvincible := [ ] ;
100003: LD_ADDR_EXP 144
100007: PUSH
100008: EMPTY
100009: ST_TO_ADDR
100010: END
// every 10 do var i ;
100011: GO 100013
100013: DISABLE
100014: LD_INT 0
100016: PPUSH
// begin enable ;
100017: ENABLE
// if not hInvincible then
100018: LD_EXP 144
100022: NOT
100023: IFFALSE 100027
// exit ;
100025: GO 100071
// for i in hInvincible do
100027: LD_ADDR_VAR 0 1
100031: PUSH
100032: LD_EXP 144
100036: PUSH
100037: FOR_IN
100038: IFFALSE 100069
// if GetLives ( i ) < 1000 then
100040: LD_VAR 0 1
100044: PPUSH
100045: CALL_OW 256
100049: PUSH
100050: LD_INT 1000
100052: LESS
100053: IFFALSE 100067
// SetLives ( i , 1000 ) ;
100055: LD_VAR 0 1
100059: PPUSH
100060: LD_INT 1000
100062: PPUSH
100063: CALL_OW 234
100067: GO 100037
100069: POP
100070: POP
// end ;
100071: PPOPN 1
100073: END
// export function hHackInvincible ; var i ; begin
100074: LD_INT 0
100076: PPUSH
100077: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
100078: LD_ADDR_VAR 0 2
100082: PUSH
100083: LD_INT 2
100085: PUSH
100086: LD_INT 21
100088: PUSH
100089: LD_INT 1
100091: PUSH
100092: EMPTY
100093: LIST
100094: LIST
100095: PUSH
100096: LD_INT 21
100098: PUSH
100099: LD_INT 2
100101: PUSH
100102: EMPTY
100103: LIST
100104: LIST
100105: PUSH
100106: EMPTY
100107: LIST
100108: LIST
100109: LIST
100110: PPUSH
100111: CALL_OW 69
100115: PUSH
100116: FOR_IN
100117: IFFALSE 100178
// if IsSelected ( i ) then
100119: LD_VAR 0 2
100123: PPUSH
100124: CALL_OW 306
100128: IFFALSE 100176
// begin if i in hInvincible then
100130: LD_VAR 0 2
100134: PUSH
100135: LD_EXP 144
100139: IN
100140: IFFALSE 100160
// hInvincible := hInvincible diff i else
100142: LD_ADDR_EXP 144
100146: PUSH
100147: LD_EXP 144
100151: PUSH
100152: LD_VAR 0 2
100156: DIFF
100157: ST_TO_ADDR
100158: GO 100176
// hInvincible := hInvincible union i ;
100160: LD_ADDR_EXP 144
100164: PUSH
100165: LD_EXP 144
100169: PUSH
100170: LD_VAR 0 2
100174: UNION
100175: ST_TO_ADDR
// end ;
100176: GO 100116
100178: POP
100179: POP
// end ;
100180: LD_VAR 0 1
100184: RET
// export function hHackInvisible ; var i , j ; begin
100185: LD_INT 0
100187: PPUSH
100188: PPUSH
100189: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
100190: LD_ADDR_VAR 0 2
100194: PUSH
100195: LD_INT 21
100197: PUSH
100198: LD_INT 1
100200: PUSH
100201: EMPTY
100202: LIST
100203: LIST
100204: PPUSH
100205: CALL_OW 69
100209: PUSH
100210: FOR_IN
100211: IFFALSE 100235
// if IsSelected ( i ) then
100213: LD_VAR 0 2
100217: PPUSH
100218: CALL_OW 306
100222: IFFALSE 100233
// ComForceInvisible ( i ) ;
100224: LD_VAR 0 2
100228: PPUSH
100229: CALL_OW 496
100233: GO 100210
100235: POP
100236: POP
// end ;
100237: LD_VAR 0 1
100241: RET
// export function hHackChangeYourSide ; begin
100242: LD_INT 0
100244: PPUSH
// if your_side = 8 then
100245: LD_OWVAR 2
100249: PUSH
100250: LD_INT 8
100252: EQUAL
100253: IFFALSE 100265
// your_side := 0 else
100255: LD_ADDR_OWVAR 2
100259: PUSH
100260: LD_INT 0
100262: ST_TO_ADDR
100263: GO 100279
// your_side := your_side + 1 ;
100265: LD_ADDR_OWVAR 2
100269: PUSH
100270: LD_OWVAR 2
100274: PUSH
100275: LD_INT 1
100277: PLUS
100278: ST_TO_ADDR
// end ;
100279: LD_VAR 0 1
100283: RET
// export function hHackChangeUnitSide ; var i , j ; begin
100284: LD_INT 0
100286: PPUSH
100287: PPUSH
100288: PPUSH
// for i in all_units do
100289: LD_ADDR_VAR 0 2
100293: PUSH
100294: LD_OWVAR 3
100298: PUSH
100299: FOR_IN
100300: IFFALSE 100378
// if IsSelected ( i ) then
100302: LD_VAR 0 2
100306: PPUSH
100307: CALL_OW 306
100311: IFFALSE 100376
// begin j := GetSide ( i ) ;
100313: LD_ADDR_VAR 0 3
100317: PUSH
100318: LD_VAR 0 2
100322: PPUSH
100323: CALL_OW 255
100327: ST_TO_ADDR
// if j = 8 then
100328: LD_VAR 0 3
100332: PUSH
100333: LD_INT 8
100335: EQUAL
100336: IFFALSE 100348
// j := 0 else
100338: LD_ADDR_VAR 0 3
100342: PUSH
100343: LD_INT 0
100345: ST_TO_ADDR
100346: GO 100362
// j := j + 1 ;
100348: LD_ADDR_VAR 0 3
100352: PUSH
100353: LD_VAR 0 3
100357: PUSH
100358: LD_INT 1
100360: PLUS
100361: ST_TO_ADDR
// SetSide ( i , j ) ;
100362: LD_VAR 0 2
100366: PPUSH
100367: LD_VAR 0 3
100371: PPUSH
100372: CALL_OW 235
// end ;
100376: GO 100299
100378: POP
100379: POP
// end ;
100380: LD_VAR 0 1
100384: RET
// export function hHackFog ; begin
100385: LD_INT 0
100387: PPUSH
// FogOff ( true ) ;
100388: LD_INT 1
100390: PPUSH
100391: CALL_OW 344
// end ;
100395: LD_VAR 0 1
100399: RET
// export function hHackTeleport ( unit , x , y ) ; begin
100400: LD_INT 0
100402: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
100403: LD_VAR 0 1
100407: PPUSH
100408: LD_VAR 0 2
100412: PPUSH
100413: LD_VAR 0 3
100417: PPUSH
100418: LD_INT 1
100420: PPUSH
100421: LD_INT 1
100423: PPUSH
100424: CALL_OW 483
// CenterOnXY ( x , y ) ;
100428: LD_VAR 0 2
100432: PPUSH
100433: LD_VAR 0 3
100437: PPUSH
100438: CALL_OW 84
// end ; end_of_file
100442: LD_VAR 0 4
100446: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
100447: LD_INT 0
100449: PPUSH
100450: PPUSH
100451: PPUSH
100452: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
100453: LD_VAR 0 1
100457: PPUSH
100458: CALL_OW 264
100462: PUSH
100463: LD_EXP 33
100467: EQUAL
100468: IFFALSE 100540
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
100470: LD_INT 68
100472: PPUSH
100473: LD_VAR 0 1
100477: PPUSH
100478: CALL_OW 255
100482: PPUSH
100483: CALL_OW 321
100487: PUSH
100488: LD_INT 2
100490: EQUAL
100491: IFFALSE 100503
// eff := 70 else
100493: LD_ADDR_VAR 0 4
100497: PUSH
100498: LD_INT 70
100500: ST_TO_ADDR
100501: GO 100511
// eff := 30 ;
100503: LD_ADDR_VAR 0 4
100507: PUSH
100508: LD_INT 30
100510: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
100511: LD_VAR 0 1
100515: PPUSH
100516: CALL_OW 250
100520: PPUSH
100521: LD_VAR 0 1
100525: PPUSH
100526: CALL_OW 251
100530: PPUSH
100531: LD_VAR 0 4
100535: PPUSH
100536: CALL_OW 495
// end ; end ;
100540: LD_VAR 0 2
100544: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
100545: LD_INT 0
100547: PPUSH
// end ;
100548: LD_VAR 0 4
100552: RET
// export function SOS_Command ( cmd ) ; begin
100553: LD_INT 0
100555: PPUSH
// end ;
100556: LD_VAR 0 2
100560: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
100561: LD_INT 0
100563: PPUSH
// if cmd = 121 then
100564: LD_VAR 0 1
100568: PUSH
100569: LD_INT 121
100571: EQUAL
100572: IFFALSE 100574
// end ;
100574: LD_VAR 0 6
100578: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
100579: LD_INT 0
100581: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
100582: LD_VAR 0 1
100586: PUSH
100587: LD_INT 250
100589: EQUAL
100590: PUSH
100591: LD_VAR 0 2
100595: PPUSH
100596: CALL_OW 264
100600: PUSH
100601: LD_EXP 36
100605: EQUAL
100606: AND
100607: IFFALSE 100628
// MinerPlaceMine ( unit , x , y ) ;
100609: LD_VAR 0 2
100613: PPUSH
100614: LD_VAR 0 4
100618: PPUSH
100619: LD_VAR 0 5
100623: PPUSH
100624: CALL 102977 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
100628: LD_VAR 0 1
100632: PUSH
100633: LD_INT 251
100635: EQUAL
100636: PUSH
100637: LD_VAR 0 2
100641: PPUSH
100642: CALL_OW 264
100646: PUSH
100647: LD_EXP 36
100651: EQUAL
100652: AND
100653: IFFALSE 100674
// MinerDetonateMine ( unit , x , y ) ;
100655: LD_VAR 0 2
100659: PPUSH
100660: LD_VAR 0 4
100664: PPUSH
100665: LD_VAR 0 5
100669: PPUSH
100670: CALL 103254 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
100674: LD_VAR 0 1
100678: PUSH
100679: LD_INT 252
100681: EQUAL
100682: PUSH
100683: LD_VAR 0 2
100687: PPUSH
100688: CALL_OW 264
100692: PUSH
100693: LD_EXP 36
100697: EQUAL
100698: AND
100699: IFFALSE 100720
// MinerCreateMinefield ( unit , x , y ) ;
100701: LD_VAR 0 2
100705: PPUSH
100706: LD_VAR 0 4
100710: PPUSH
100711: LD_VAR 0 5
100715: PPUSH
100716: CALL 103671 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
100720: LD_VAR 0 1
100724: PUSH
100725: LD_INT 253
100727: EQUAL
100728: PUSH
100729: LD_VAR 0 2
100733: PPUSH
100734: CALL_OW 257
100738: PUSH
100739: LD_INT 5
100741: EQUAL
100742: AND
100743: IFFALSE 100764
// ComBinocular ( unit , x , y ) ;
100745: LD_VAR 0 2
100749: PPUSH
100750: LD_VAR 0 4
100754: PPUSH
100755: LD_VAR 0 5
100759: PPUSH
100760: CALL 104042 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
100764: LD_VAR 0 1
100768: PUSH
100769: LD_INT 254
100771: EQUAL
100772: PUSH
100773: LD_VAR 0 2
100777: PPUSH
100778: CALL_OW 264
100782: PUSH
100783: LD_EXP 31
100787: EQUAL
100788: AND
100789: PUSH
100790: LD_VAR 0 3
100794: PPUSH
100795: CALL_OW 263
100799: PUSH
100800: LD_INT 3
100802: EQUAL
100803: AND
100804: IFFALSE 100820
// HackDestroyVehicle ( unit , selectedUnit ) ;
100806: LD_VAR 0 2
100810: PPUSH
100811: LD_VAR 0 3
100815: PPUSH
100816: CALL 102337 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
100820: LD_VAR 0 1
100824: PUSH
100825: LD_INT 255
100827: EQUAL
100828: PUSH
100829: LD_VAR 0 2
100833: PPUSH
100834: CALL_OW 264
100838: PUSH
100839: LD_INT 14
100841: PUSH
100842: LD_INT 53
100844: PUSH
100845: EMPTY
100846: LIST
100847: LIST
100848: IN
100849: AND
100850: PUSH
100851: LD_VAR 0 4
100855: PPUSH
100856: LD_VAR 0 5
100860: PPUSH
100861: CALL_OW 488
100865: AND
100866: IFFALSE 100890
// CutTreeXYR ( unit , x , y , 12 ) ;
100868: LD_VAR 0 2
100872: PPUSH
100873: LD_VAR 0 4
100877: PPUSH
100878: LD_VAR 0 5
100882: PPUSH
100883: LD_INT 12
100885: PPUSH
100886: CALL 100903 0 4
// end ;
100890: LD_VAR 0 6
100894: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
100895: LD_INT 0
100897: PPUSH
// end ;
100898: LD_VAR 0 4
100902: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
100903: LD_INT 0
100905: PPUSH
100906: PPUSH
100907: PPUSH
100908: PPUSH
100909: PPUSH
100910: PPUSH
100911: PPUSH
100912: PPUSH
100913: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
100914: LD_VAR 0 1
100918: NOT
100919: PUSH
100920: LD_VAR 0 2
100924: PPUSH
100925: LD_VAR 0 3
100929: PPUSH
100930: CALL_OW 488
100934: NOT
100935: OR
100936: PUSH
100937: LD_VAR 0 4
100941: NOT
100942: OR
100943: IFFALSE 100947
// exit ;
100945: GO 101287
// list := [ ] ;
100947: LD_ADDR_VAR 0 13
100951: PUSH
100952: EMPTY
100953: ST_TO_ADDR
// if x - r < 0 then
100954: LD_VAR 0 2
100958: PUSH
100959: LD_VAR 0 4
100963: MINUS
100964: PUSH
100965: LD_INT 0
100967: LESS
100968: IFFALSE 100980
// min_x := 0 else
100970: LD_ADDR_VAR 0 7
100974: PUSH
100975: LD_INT 0
100977: ST_TO_ADDR
100978: GO 100996
// min_x := x - r ;
100980: LD_ADDR_VAR 0 7
100984: PUSH
100985: LD_VAR 0 2
100989: PUSH
100990: LD_VAR 0 4
100994: MINUS
100995: ST_TO_ADDR
// if y - r < 0 then
100996: LD_VAR 0 3
101000: PUSH
101001: LD_VAR 0 4
101005: MINUS
101006: PUSH
101007: LD_INT 0
101009: LESS
101010: IFFALSE 101022
// min_y := 0 else
101012: LD_ADDR_VAR 0 8
101016: PUSH
101017: LD_INT 0
101019: ST_TO_ADDR
101020: GO 101038
// min_y := y - r ;
101022: LD_ADDR_VAR 0 8
101026: PUSH
101027: LD_VAR 0 3
101031: PUSH
101032: LD_VAR 0 4
101036: MINUS
101037: ST_TO_ADDR
// max_x := x + r ;
101038: LD_ADDR_VAR 0 9
101042: PUSH
101043: LD_VAR 0 2
101047: PUSH
101048: LD_VAR 0 4
101052: PLUS
101053: ST_TO_ADDR
// max_y := y + r ;
101054: LD_ADDR_VAR 0 10
101058: PUSH
101059: LD_VAR 0 3
101063: PUSH
101064: LD_VAR 0 4
101068: PLUS
101069: ST_TO_ADDR
// for _x = min_x to max_x do
101070: LD_ADDR_VAR 0 11
101074: PUSH
101075: DOUBLE
101076: LD_VAR 0 7
101080: DEC
101081: ST_TO_ADDR
101082: LD_VAR 0 9
101086: PUSH
101087: FOR_TO
101088: IFFALSE 101205
// for _y = min_y to max_y do
101090: LD_ADDR_VAR 0 12
101094: PUSH
101095: DOUBLE
101096: LD_VAR 0 8
101100: DEC
101101: ST_TO_ADDR
101102: LD_VAR 0 10
101106: PUSH
101107: FOR_TO
101108: IFFALSE 101201
// begin if not ValidHex ( _x , _y ) then
101110: LD_VAR 0 11
101114: PPUSH
101115: LD_VAR 0 12
101119: PPUSH
101120: CALL_OW 488
101124: NOT
101125: IFFALSE 101129
// continue ;
101127: GO 101107
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
101129: LD_VAR 0 11
101133: PPUSH
101134: LD_VAR 0 12
101138: PPUSH
101139: CALL_OW 351
101143: PUSH
101144: LD_VAR 0 11
101148: PPUSH
101149: LD_VAR 0 12
101153: PPUSH
101154: CALL_OW 554
101158: AND
101159: IFFALSE 101199
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
101161: LD_ADDR_VAR 0 13
101165: PUSH
101166: LD_VAR 0 13
101170: PPUSH
101171: LD_VAR 0 13
101175: PUSH
101176: LD_INT 1
101178: PLUS
101179: PPUSH
101180: LD_VAR 0 11
101184: PUSH
101185: LD_VAR 0 12
101189: PUSH
101190: EMPTY
101191: LIST
101192: LIST
101193: PPUSH
101194: CALL_OW 2
101198: ST_TO_ADDR
// end ;
101199: GO 101107
101201: POP
101202: POP
101203: GO 101087
101205: POP
101206: POP
// if not list then
101207: LD_VAR 0 13
101211: NOT
101212: IFFALSE 101216
// exit ;
101214: GO 101287
// for i in list do
101216: LD_ADDR_VAR 0 6
101220: PUSH
101221: LD_VAR 0 13
101225: PUSH
101226: FOR_IN
101227: IFFALSE 101285
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
101229: LD_VAR 0 1
101233: PPUSH
101234: LD_STRING M
101236: PUSH
101237: LD_VAR 0 6
101241: PUSH
101242: LD_INT 1
101244: ARRAY
101245: PUSH
101246: LD_VAR 0 6
101250: PUSH
101251: LD_INT 2
101253: ARRAY
101254: PUSH
101255: LD_INT 0
101257: PUSH
101258: LD_INT 0
101260: PUSH
101261: LD_INT 0
101263: PUSH
101264: LD_INT 0
101266: PUSH
101267: EMPTY
101268: LIST
101269: LIST
101270: LIST
101271: LIST
101272: LIST
101273: LIST
101274: LIST
101275: PUSH
101276: EMPTY
101277: LIST
101278: PPUSH
101279: CALL_OW 447
101283: GO 101226
101285: POP
101286: POP
// end ;
101287: LD_VAR 0 5
101291: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
101292: LD_EXP 147
101296: NOT
101297: IFFALSE 101347
101299: GO 101301
101301: DISABLE
// begin initHack := true ;
101302: LD_ADDR_EXP 147
101306: PUSH
101307: LD_INT 1
101309: ST_TO_ADDR
// hackTanks := [ ] ;
101310: LD_ADDR_EXP 148
101314: PUSH
101315: EMPTY
101316: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
101317: LD_ADDR_EXP 149
101321: PUSH
101322: EMPTY
101323: ST_TO_ADDR
// hackLimit := 3 ;
101324: LD_ADDR_EXP 150
101328: PUSH
101329: LD_INT 3
101331: ST_TO_ADDR
// hackDist := 12 ;
101332: LD_ADDR_EXP 151
101336: PUSH
101337: LD_INT 12
101339: ST_TO_ADDR
// hackCounter := [ ] ;
101340: LD_ADDR_EXP 152
101344: PUSH
101345: EMPTY
101346: ST_TO_ADDR
// end ;
101347: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
101348: LD_EXP 147
101352: PUSH
101353: LD_INT 34
101355: PUSH
101356: LD_EXP 31
101360: PUSH
101361: EMPTY
101362: LIST
101363: LIST
101364: PPUSH
101365: CALL_OW 69
101369: AND
101370: IFFALSE 101625
101372: GO 101374
101374: DISABLE
101375: LD_INT 0
101377: PPUSH
101378: PPUSH
// begin enable ;
101379: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
101380: LD_ADDR_VAR 0 1
101384: PUSH
101385: LD_INT 34
101387: PUSH
101388: LD_EXP 31
101392: PUSH
101393: EMPTY
101394: LIST
101395: LIST
101396: PPUSH
101397: CALL_OW 69
101401: PUSH
101402: FOR_IN
101403: IFFALSE 101623
// begin if not i in hackTanks then
101405: LD_VAR 0 1
101409: PUSH
101410: LD_EXP 148
101414: IN
101415: NOT
101416: IFFALSE 101499
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
101418: LD_ADDR_EXP 148
101422: PUSH
101423: LD_EXP 148
101427: PPUSH
101428: LD_EXP 148
101432: PUSH
101433: LD_INT 1
101435: PLUS
101436: PPUSH
101437: LD_VAR 0 1
101441: PPUSH
101442: CALL_OW 1
101446: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
101447: LD_ADDR_EXP 149
101451: PUSH
101452: LD_EXP 149
101456: PPUSH
101457: LD_EXP 149
101461: PUSH
101462: LD_INT 1
101464: PLUS
101465: PPUSH
101466: EMPTY
101467: PPUSH
101468: CALL_OW 1
101472: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
101473: LD_ADDR_EXP 152
101477: PUSH
101478: LD_EXP 152
101482: PPUSH
101483: LD_EXP 152
101487: PUSH
101488: LD_INT 1
101490: PLUS
101491: PPUSH
101492: EMPTY
101493: PPUSH
101494: CALL_OW 1
101498: ST_TO_ADDR
// end ; if not IsOk ( i ) then
101499: LD_VAR 0 1
101503: PPUSH
101504: CALL_OW 302
101508: NOT
101509: IFFALSE 101522
// begin HackUnlinkAll ( i ) ;
101511: LD_VAR 0 1
101515: PPUSH
101516: CALL 101628 0 1
// continue ;
101520: GO 101402
// end ; HackCheckCapturedStatus ( i ) ;
101522: LD_VAR 0 1
101526: PPUSH
101527: CALL 102071 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
101531: LD_ADDR_VAR 0 2
101535: PUSH
101536: LD_INT 81
101538: PUSH
101539: LD_VAR 0 1
101543: PPUSH
101544: CALL_OW 255
101548: PUSH
101549: EMPTY
101550: LIST
101551: LIST
101552: PUSH
101553: LD_INT 33
101555: PUSH
101556: LD_INT 3
101558: PUSH
101559: EMPTY
101560: LIST
101561: LIST
101562: PUSH
101563: LD_INT 91
101565: PUSH
101566: LD_VAR 0 1
101570: PUSH
101571: LD_EXP 151
101575: PUSH
101576: EMPTY
101577: LIST
101578: LIST
101579: LIST
101580: PUSH
101581: LD_INT 50
101583: PUSH
101584: EMPTY
101585: LIST
101586: PUSH
101587: EMPTY
101588: LIST
101589: LIST
101590: LIST
101591: LIST
101592: PPUSH
101593: CALL_OW 69
101597: ST_TO_ADDR
// if not tmp then
101598: LD_VAR 0 2
101602: NOT
101603: IFFALSE 101607
// continue ;
101605: GO 101402
// HackLink ( i , tmp ) ;
101607: LD_VAR 0 1
101611: PPUSH
101612: LD_VAR 0 2
101616: PPUSH
101617: CALL 101764 0 2
// end ;
101621: GO 101402
101623: POP
101624: POP
// end ;
101625: PPOPN 2
101627: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
101628: LD_INT 0
101630: PPUSH
101631: PPUSH
101632: PPUSH
// if not hack in hackTanks then
101633: LD_VAR 0 1
101637: PUSH
101638: LD_EXP 148
101642: IN
101643: NOT
101644: IFFALSE 101648
// exit ;
101646: GO 101759
// index := GetElementIndex ( hackTanks , hack ) ;
101648: LD_ADDR_VAR 0 4
101652: PUSH
101653: LD_EXP 148
101657: PPUSH
101658: LD_VAR 0 1
101662: PPUSH
101663: CALL 24100 0 2
101667: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
101668: LD_EXP 149
101672: PUSH
101673: LD_VAR 0 4
101677: ARRAY
101678: IFFALSE 101759
// begin for i in hackTanksCaptured [ index ] do
101680: LD_ADDR_VAR 0 3
101684: PUSH
101685: LD_EXP 149
101689: PUSH
101690: LD_VAR 0 4
101694: ARRAY
101695: PUSH
101696: FOR_IN
101697: IFFALSE 101723
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
101699: LD_VAR 0 3
101703: PUSH
101704: LD_INT 1
101706: ARRAY
101707: PPUSH
101708: LD_VAR 0 3
101712: PUSH
101713: LD_INT 2
101715: ARRAY
101716: PPUSH
101717: CALL_OW 235
101721: GO 101696
101723: POP
101724: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
101725: LD_ADDR_EXP 149
101729: PUSH
101730: LD_EXP 149
101734: PPUSH
101735: LD_VAR 0 4
101739: PPUSH
101740: EMPTY
101741: PPUSH
101742: CALL_OW 1
101746: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
101747: LD_VAR 0 1
101751: PPUSH
101752: LD_INT 0
101754: PPUSH
101755: CALL_OW 505
// end ; end ;
101759: LD_VAR 0 2
101763: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
101764: LD_INT 0
101766: PPUSH
101767: PPUSH
101768: PPUSH
// if not hack in hackTanks or not vehicles then
101769: LD_VAR 0 1
101773: PUSH
101774: LD_EXP 148
101778: IN
101779: NOT
101780: PUSH
101781: LD_VAR 0 2
101785: NOT
101786: OR
101787: IFFALSE 101791
// exit ;
101789: GO 102066
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
101791: LD_ADDR_VAR 0 2
101795: PUSH
101796: LD_VAR 0 1
101800: PPUSH
101801: LD_VAR 0 2
101805: PPUSH
101806: LD_INT 1
101808: PPUSH
101809: LD_INT 1
101811: PPUSH
101812: CALL 24750 0 4
101816: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
101817: LD_ADDR_VAR 0 5
101821: PUSH
101822: LD_EXP 148
101826: PPUSH
101827: LD_VAR 0 1
101831: PPUSH
101832: CALL 24100 0 2
101836: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
101837: LD_EXP 149
101841: PUSH
101842: LD_VAR 0 5
101846: ARRAY
101847: PUSH
101848: LD_EXP 150
101852: LESS
101853: IFFALSE 102042
// begin for i := 1 to vehicles do
101855: LD_ADDR_VAR 0 4
101859: PUSH
101860: DOUBLE
101861: LD_INT 1
101863: DEC
101864: ST_TO_ADDR
101865: LD_VAR 0 2
101869: PUSH
101870: FOR_TO
101871: IFFALSE 102040
// begin if hackTanksCaptured [ index ] = hackLimit then
101873: LD_EXP 149
101877: PUSH
101878: LD_VAR 0 5
101882: ARRAY
101883: PUSH
101884: LD_EXP 150
101888: EQUAL
101889: IFFALSE 101893
// break ;
101891: GO 102040
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
101893: LD_ADDR_EXP 152
101897: PUSH
101898: LD_EXP 152
101902: PPUSH
101903: LD_VAR 0 5
101907: PPUSH
101908: LD_EXP 152
101912: PUSH
101913: LD_VAR 0 5
101917: ARRAY
101918: PUSH
101919: LD_INT 1
101921: PLUS
101922: PPUSH
101923: CALL_OW 1
101927: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
101928: LD_ADDR_EXP 149
101932: PUSH
101933: LD_EXP 149
101937: PPUSH
101938: LD_VAR 0 5
101942: PUSH
101943: LD_EXP 149
101947: PUSH
101948: LD_VAR 0 5
101952: ARRAY
101953: PUSH
101954: LD_INT 1
101956: PLUS
101957: PUSH
101958: EMPTY
101959: LIST
101960: LIST
101961: PPUSH
101962: LD_VAR 0 2
101966: PUSH
101967: LD_VAR 0 4
101971: ARRAY
101972: PUSH
101973: LD_VAR 0 2
101977: PUSH
101978: LD_VAR 0 4
101982: ARRAY
101983: PPUSH
101984: CALL_OW 255
101988: PUSH
101989: EMPTY
101990: LIST
101991: LIST
101992: PPUSH
101993: CALL 24315 0 3
101997: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
101998: LD_VAR 0 2
102002: PUSH
102003: LD_VAR 0 4
102007: ARRAY
102008: PPUSH
102009: LD_VAR 0 1
102013: PPUSH
102014: CALL_OW 255
102018: PPUSH
102019: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
102023: LD_VAR 0 2
102027: PUSH
102028: LD_VAR 0 4
102032: ARRAY
102033: PPUSH
102034: CALL_OW 141
// end ;
102038: GO 101870
102040: POP
102041: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
102042: LD_VAR 0 1
102046: PPUSH
102047: LD_EXP 149
102051: PUSH
102052: LD_VAR 0 5
102056: ARRAY
102057: PUSH
102058: LD_INT 0
102060: PLUS
102061: PPUSH
102062: CALL_OW 505
// end ;
102066: LD_VAR 0 3
102070: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
102071: LD_INT 0
102073: PPUSH
102074: PPUSH
102075: PPUSH
102076: PPUSH
// if not hack in hackTanks then
102077: LD_VAR 0 1
102081: PUSH
102082: LD_EXP 148
102086: IN
102087: NOT
102088: IFFALSE 102092
// exit ;
102090: GO 102332
// index := GetElementIndex ( hackTanks , hack ) ;
102092: LD_ADDR_VAR 0 4
102096: PUSH
102097: LD_EXP 148
102101: PPUSH
102102: LD_VAR 0 1
102106: PPUSH
102107: CALL 24100 0 2
102111: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
102112: LD_ADDR_VAR 0 3
102116: PUSH
102117: DOUBLE
102118: LD_EXP 149
102122: PUSH
102123: LD_VAR 0 4
102127: ARRAY
102128: INC
102129: ST_TO_ADDR
102130: LD_INT 1
102132: PUSH
102133: FOR_DOWNTO
102134: IFFALSE 102306
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
102136: LD_ADDR_VAR 0 5
102140: PUSH
102141: LD_EXP 149
102145: PUSH
102146: LD_VAR 0 4
102150: ARRAY
102151: PUSH
102152: LD_VAR 0 3
102156: ARRAY
102157: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
102158: LD_VAR 0 5
102162: PUSH
102163: LD_INT 1
102165: ARRAY
102166: PPUSH
102167: CALL_OW 302
102171: NOT
102172: PUSH
102173: LD_VAR 0 5
102177: PUSH
102178: LD_INT 1
102180: ARRAY
102181: PPUSH
102182: CALL_OW 255
102186: PUSH
102187: LD_VAR 0 1
102191: PPUSH
102192: CALL_OW 255
102196: NONEQUAL
102197: OR
102198: IFFALSE 102304
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
102200: LD_VAR 0 5
102204: PUSH
102205: LD_INT 1
102207: ARRAY
102208: PPUSH
102209: CALL_OW 305
102213: PUSH
102214: LD_VAR 0 5
102218: PUSH
102219: LD_INT 1
102221: ARRAY
102222: PPUSH
102223: CALL_OW 255
102227: PUSH
102228: LD_VAR 0 1
102232: PPUSH
102233: CALL_OW 255
102237: EQUAL
102238: AND
102239: IFFALSE 102263
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
102241: LD_VAR 0 5
102245: PUSH
102246: LD_INT 1
102248: ARRAY
102249: PPUSH
102250: LD_VAR 0 5
102254: PUSH
102255: LD_INT 2
102257: ARRAY
102258: PPUSH
102259: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
102263: LD_ADDR_EXP 149
102267: PUSH
102268: LD_EXP 149
102272: PPUSH
102273: LD_VAR 0 4
102277: PPUSH
102278: LD_EXP 149
102282: PUSH
102283: LD_VAR 0 4
102287: ARRAY
102288: PPUSH
102289: LD_VAR 0 3
102293: PPUSH
102294: CALL_OW 3
102298: PPUSH
102299: CALL_OW 1
102303: ST_TO_ADDR
// end ; end ;
102304: GO 102133
102306: POP
102307: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
102308: LD_VAR 0 1
102312: PPUSH
102313: LD_EXP 149
102317: PUSH
102318: LD_VAR 0 4
102322: ARRAY
102323: PUSH
102324: LD_INT 0
102326: PLUS
102327: PPUSH
102328: CALL_OW 505
// end ;
102332: LD_VAR 0 2
102336: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
102337: LD_INT 0
102339: PPUSH
102340: PPUSH
102341: PPUSH
102342: PPUSH
// if not hack in hackTanks then
102343: LD_VAR 0 1
102347: PUSH
102348: LD_EXP 148
102352: IN
102353: NOT
102354: IFFALSE 102358
// exit ;
102356: GO 102443
// index := GetElementIndex ( hackTanks , hack ) ;
102358: LD_ADDR_VAR 0 5
102362: PUSH
102363: LD_EXP 148
102367: PPUSH
102368: LD_VAR 0 1
102372: PPUSH
102373: CALL 24100 0 2
102377: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
102378: LD_ADDR_VAR 0 4
102382: PUSH
102383: DOUBLE
102384: LD_INT 1
102386: DEC
102387: ST_TO_ADDR
102388: LD_EXP 149
102392: PUSH
102393: LD_VAR 0 5
102397: ARRAY
102398: PUSH
102399: FOR_TO
102400: IFFALSE 102441
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
102402: LD_EXP 149
102406: PUSH
102407: LD_VAR 0 5
102411: ARRAY
102412: PUSH
102413: LD_VAR 0 4
102417: ARRAY
102418: PUSH
102419: LD_INT 1
102421: ARRAY
102422: PUSH
102423: LD_VAR 0 2
102427: EQUAL
102428: IFFALSE 102439
// KillUnit ( vehicle ) ;
102430: LD_VAR 0 2
102434: PPUSH
102435: CALL_OW 66
102439: GO 102399
102441: POP
102442: POP
// end ;
102443: LD_VAR 0 3
102447: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
102448: LD_EXP 153
102452: NOT
102453: IFFALSE 102488
102455: GO 102457
102457: DISABLE
// begin initMiner := true ;
102458: LD_ADDR_EXP 153
102462: PUSH
102463: LD_INT 1
102465: ST_TO_ADDR
// minersList := [ ] ;
102466: LD_ADDR_EXP 154
102470: PUSH
102471: EMPTY
102472: ST_TO_ADDR
// minerMinesList := [ ] ;
102473: LD_ADDR_EXP 155
102477: PUSH
102478: EMPTY
102479: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
102480: LD_ADDR_EXP 156
102484: PUSH
102485: LD_INT 5
102487: ST_TO_ADDR
// end ;
102488: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
102489: LD_EXP 153
102493: PUSH
102494: LD_INT 34
102496: PUSH
102497: LD_EXP 36
102501: PUSH
102502: EMPTY
102503: LIST
102504: LIST
102505: PPUSH
102506: CALL_OW 69
102510: AND
102511: IFFALSE 102974
102513: GO 102515
102515: DISABLE
102516: LD_INT 0
102518: PPUSH
102519: PPUSH
102520: PPUSH
102521: PPUSH
// begin enable ;
102522: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
102523: LD_ADDR_VAR 0 1
102527: PUSH
102528: LD_INT 34
102530: PUSH
102531: LD_EXP 36
102535: PUSH
102536: EMPTY
102537: LIST
102538: LIST
102539: PPUSH
102540: CALL_OW 69
102544: PUSH
102545: FOR_IN
102546: IFFALSE 102618
// begin if not i in minersList then
102548: LD_VAR 0 1
102552: PUSH
102553: LD_EXP 154
102557: IN
102558: NOT
102559: IFFALSE 102616
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
102561: LD_ADDR_EXP 154
102565: PUSH
102566: LD_EXP 154
102570: PPUSH
102571: LD_EXP 154
102575: PUSH
102576: LD_INT 1
102578: PLUS
102579: PPUSH
102580: LD_VAR 0 1
102584: PPUSH
102585: CALL_OW 1
102589: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
102590: LD_ADDR_EXP 155
102594: PUSH
102595: LD_EXP 155
102599: PPUSH
102600: LD_EXP 155
102604: PUSH
102605: LD_INT 1
102607: PLUS
102608: PPUSH
102609: EMPTY
102610: PPUSH
102611: CALL_OW 1
102615: ST_TO_ADDR
// end end ;
102616: GO 102545
102618: POP
102619: POP
// for i := minerMinesList downto 1 do
102620: LD_ADDR_VAR 0 1
102624: PUSH
102625: DOUBLE
102626: LD_EXP 155
102630: INC
102631: ST_TO_ADDR
102632: LD_INT 1
102634: PUSH
102635: FOR_DOWNTO
102636: IFFALSE 102972
// begin if IsLive ( minersList [ i ] ) then
102638: LD_EXP 154
102642: PUSH
102643: LD_VAR 0 1
102647: ARRAY
102648: PPUSH
102649: CALL_OW 300
102653: IFFALSE 102681
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
102655: LD_EXP 154
102659: PUSH
102660: LD_VAR 0 1
102664: ARRAY
102665: PPUSH
102666: LD_EXP 155
102670: PUSH
102671: LD_VAR 0 1
102675: ARRAY
102676: PPUSH
102677: CALL_OW 505
// if not minerMinesList [ i ] then
102681: LD_EXP 155
102685: PUSH
102686: LD_VAR 0 1
102690: ARRAY
102691: NOT
102692: IFFALSE 102696
// continue ;
102694: GO 102635
// for j := minerMinesList [ i ] downto 1 do
102696: LD_ADDR_VAR 0 2
102700: PUSH
102701: DOUBLE
102702: LD_EXP 155
102706: PUSH
102707: LD_VAR 0 1
102711: ARRAY
102712: INC
102713: ST_TO_ADDR
102714: LD_INT 1
102716: PUSH
102717: FOR_DOWNTO
102718: IFFALSE 102968
// begin side := GetSide ( minersList [ i ] ) ;
102720: LD_ADDR_VAR 0 3
102724: PUSH
102725: LD_EXP 154
102729: PUSH
102730: LD_VAR 0 1
102734: ARRAY
102735: PPUSH
102736: CALL_OW 255
102740: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
102741: LD_ADDR_VAR 0 4
102745: PUSH
102746: LD_EXP 155
102750: PUSH
102751: LD_VAR 0 1
102755: ARRAY
102756: PUSH
102757: LD_VAR 0 2
102761: ARRAY
102762: PUSH
102763: LD_INT 1
102765: ARRAY
102766: PPUSH
102767: LD_EXP 155
102771: PUSH
102772: LD_VAR 0 1
102776: ARRAY
102777: PUSH
102778: LD_VAR 0 2
102782: ARRAY
102783: PUSH
102784: LD_INT 2
102786: ARRAY
102787: PPUSH
102788: CALL_OW 428
102792: ST_TO_ADDR
// if not tmp then
102793: LD_VAR 0 4
102797: NOT
102798: IFFALSE 102802
// continue ;
102800: GO 102717
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
102802: LD_VAR 0 4
102806: PUSH
102807: LD_INT 81
102809: PUSH
102810: LD_VAR 0 3
102814: PUSH
102815: EMPTY
102816: LIST
102817: LIST
102818: PPUSH
102819: CALL_OW 69
102823: IN
102824: PUSH
102825: LD_EXP 155
102829: PUSH
102830: LD_VAR 0 1
102834: ARRAY
102835: PUSH
102836: LD_VAR 0 2
102840: ARRAY
102841: PUSH
102842: LD_INT 1
102844: ARRAY
102845: PPUSH
102846: LD_EXP 155
102850: PUSH
102851: LD_VAR 0 1
102855: ARRAY
102856: PUSH
102857: LD_VAR 0 2
102861: ARRAY
102862: PUSH
102863: LD_INT 2
102865: ARRAY
102866: PPUSH
102867: CALL_OW 458
102871: AND
102872: IFFALSE 102966
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
102874: LD_EXP 155
102878: PUSH
102879: LD_VAR 0 1
102883: ARRAY
102884: PUSH
102885: LD_VAR 0 2
102889: ARRAY
102890: PUSH
102891: LD_INT 1
102893: ARRAY
102894: PPUSH
102895: LD_EXP 155
102899: PUSH
102900: LD_VAR 0 1
102904: ARRAY
102905: PUSH
102906: LD_VAR 0 2
102910: ARRAY
102911: PUSH
102912: LD_INT 2
102914: ARRAY
102915: PPUSH
102916: LD_VAR 0 3
102920: PPUSH
102921: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
102925: LD_ADDR_EXP 155
102929: PUSH
102930: LD_EXP 155
102934: PPUSH
102935: LD_VAR 0 1
102939: PPUSH
102940: LD_EXP 155
102944: PUSH
102945: LD_VAR 0 1
102949: ARRAY
102950: PPUSH
102951: LD_VAR 0 2
102955: PPUSH
102956: CALL_OW 3
102960: PPUSH
102961: CALL_OW 1
102965: ST_TO_ADDR
// end ; end ;
102966: GO 102717
102968: POP
102969: POP
// end ;
102970: GO 102635
102972: POP
102973: POP
// end ;
102974: PPOPN 4
102976: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
102977: LD_INT 0
102979: PPUSH
102980: PPUSH
// result := false ;
102981: LD_ADDR_VAR 0 4
102985: PUSH
102986: LD_INT 0
102988: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
102989: LD_VAR 0 1
102993: PPUSH
102994: CALL_OW 264
102998: PUSH
102999: LD_EXP 36
103003: EQUAL
103004: NOT
103005: IFFALSE 103009
// exit ;
103007: GO 103249
// index := GetElementIndex ( minersList , unit ) ;
103009: LD_ADDR_VAR 0 5
103013: PUSH
103014: LD_EXP 154
103018: PPUSH
103019: LD_VAR 0 1
103023: PPUSH
103024: CALL 24100 0 2
103028: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
103029: LD_EXP 155
103033: PUSH
103034: LD_VAR 0 5
103038: ARRAY
103039: PUSH
103040: LD_EXP 156
103044: GREATEREQUAL
103045: IFFALSE 103049
// exit ;
103047: GO 103249
// ComMoveXY ( unit , x , y ) ;
103049: LD_VAR 0 1
103053: PPUSH
103054: LD_VAR 0 2
103058: PPUSH
103059: LD_VAR 0 3
103063: PPUSH
103064: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
103068: LD_INT 35
103070: PPUSH
103071: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
103075: LD_VAR 0 1
103079: PPUSH
103080: LD_VAR 0 2
103084: PPUSH
103085: LD_VAR 0 3
103089: PPUSH
103090: CALL 54497 0 3
103094: NOT
103095: PUSH
103096: LD_VAR 0 1
103100: PPUSH
103101: CALL_OW 314
103105: AND
103106: IFFALSE 103110
// exit ;
103108: GO 103249
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
103110: LD_VAR 0 2
103114: PPUSH
103115: LD_VAR 0 3
103119: PPUSH
103120: CALL_OW 428
103124: PUSH
103125: LD_VAR 0 1
103129: EQUAL
103130: PUSH
103131: LD_VAR 0 1
103135: PPUSH
103136: CALL_OW 314
103140: NOT
103141: AND
103142: IFFALSE 103068
// PlaySoundXY ( x , y , PlantMine ) ;
103144: LD_VAR 0 2
103148: PPUSH
103149: LD_VAR 0 3
103153: PPUSH
103154: LD_STRING PlantMine
103156: PPUSH
103157: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
103161: LD_VAR 0 2
103165: PPUSH
103166: LD_VAR 0 3
103170: PPUSH
103171: LD_VAR 0 1
103175: PPUSH
103176: CALL_OW 255
103180: PPUSH
103181: LD_INT 0
103183: PPUSH
103184: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
103188: LD_ADDR_EXP 155
103192: PUSH
103193: LD_EXP 155
103197: PPUSH
103198: LD_VAR 0 5
103202: PUSH
103203: LD_EXP 155
103207: PUSH
103208: LD_VAR 0 5
103212: ARRAY
103213: PUSH
103214: LD_INT 1
103216: PLUS
103217: PUSH
103218: EMPTY
103219: LIST
103220: LIST
103221: PPUSH
103222: LD_VAR 0 2
103226: PUSH
103227: LD_VAR 0 3
103231: PUSH
103232: EMPTY
103233: LIST
103234: LIST
103235: PPUSH
103236: CALL 24315 0 3
103240: ST_TO_ADDR
// result := true ;
103241: LD_ADDR_VAR 0 4
103245: PUSH
103246: LD_INT 1
103248: ST_TO_ADDR
// end ;
103249: LD_VAR 0 4
103253: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
103254: LD_INT 0
103256: PPUSH
103257: PPUSH
103258: PPUSH
// if not unit in minersList then
103259: LD_VAR 0 1
103263: PUSH
103264: LD_EXP 154
103268: IN
103269: NOT
103270: IFFALSE 103274
// exit ;
103272: GO 103666
// index := GetElementIndex ( minersList , unit ) ;
103274: LD_ADDR_VAR 0 6
103278: PUSH
103279: LD_EXP 154
103283: PPUSH
103284: LD_VAR 0 1
103288: PPUSH
103289: CALL 24100 0 2
103293: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
103294: LD_ADDR_VAR 0 5
103298: PUSH
103299: DOUBLE
103300: LD_EXP 155
103304: PUSH
103305: LD_VAR 0 6
103309: ARRAY
103310: INC
103311: ST_TO_ADDR
103312: LD_INT 1
103314: PUSH
103315: FOR_DOWNTO
103316: IFFALSE 103477
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
103318: LD_EXP 155
103322: PUSH
103323: LD_VAR 0 6
103327: ARRAY
103328: PUSH
103329: LD_VAR 0 5
103333: ARRAY
103334: PUSH
103335: LD_INT 1
103337: ARRAY
103338: PUSH
103339: LD_VAR 0 2
103343: EQUAL
103344: PUSH
103345: LD_EXP 155
103349: PUSH
103350: LD_VAR 0 6
103354: ARRAY
103355: PUSH
103356: LD_VAR 0 5
103360: ARRAY
103361: PUSH
103362: LD_INT 2
103364: ARRAY
103365: PUSH
103366: LD_VAR 0 3
103370: EQUAL
103371: AND
103372: IFFALSE 103475
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
103374: LD_EXP 155
103378: PUSH
103379: LD_VAR 0 6
103383: ARRAY
103384: PUSH
103385: LD_VAR 0 5
103389: ARRAY
103390: PUSH
103391: LD_INT 1
103393: ARRAY
103394: PPUSH
103395: LD_EXP 155
103399: PUSH
103400: LD_VAR 0 6
103404: ARRAY
103405: PUSH
103406: LD_VAR 0 5
103410: ARRAY
103411: PUSH
103412: LD_INT 2
103414: ARRAY
103415: PPUSH
103416: LD_VAR 0 1
103420: PPUSH
103421: CALL_OW 255
103425: PPUSH
103426: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
103430: LD_ADDR_EXP 155
103434: PUSH
103435: LD_EXP 155
103439: PPUSH
103440: LD_VAR 0 6
103444: PPUSH
103445: LD_EXP 155
103449: PUSH
103450: LD_VAR 0 6
103454: ARRAY
103455: PPUSH
103456: LD_VAR 0 5
103460: PPUSH
103461: CALL_OW 3
103465: PPUSH
103466: CALL_OW 1
103470: ST_TO_ADDR
// exit ;
103471: POP
103472: POP
103473: GO 103666
// end ; end ;
103475: GO 103315
103477: POP
103478: POP
// for i := minerMinesList [ index ] downto 1 do
103479: LD_ADDR_VAR 0 5
103483: PUSH
103484: DOUBLE
103485: LD_EXP 155
103489: PUSH
103490: LD_VAR 0 6
103494: ARRAY
103495: INC
103496: ST_TO_ADDR
103497: LD_INT 1
103499: PUSH
103500: FOR_DOWNTO
103501: IFFALSE 103664
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
103503: LD_EXP 155
103507: PUSH
103508: LD_VAR 0 6
103512: ARRAY
103513: PUSH
103514: LD_VAR 0 5
103518: ARRAY
103519: PUSH
103520: LD_INT 1
103522: ARRAY
103523: PPUSH
103524: LD_EXP 155
103528: PUSH
103529: LD_VAR 0 6
103533: ARRAY
103534: PUSH
103535: LD_VAR 0 5
103539: ARRAY
103540: PUSH
103541: LD_INT 2
103543: ARRAY
103544: PPUSH
103545: LD_VAR 0 2
103549: PPUSH
103550: LD_VAR 0 3
103554: PPUSH
103555: CALL_OW 298
103559: PUSH
103560: LD_INT 6
103562: LESS
103563: IFFALSE 103662
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
103565: LD_EXP 155
103569: PUSH
103570: LD_VAR 0 6
103574: ARRAY
103575: PUSH
103576: LD_VAR 0 5
103580: ARRAY
103581: PUSH
103582: LD_INT 1
103584: ARRAY
103585: PPUSH
103586: LD_EXP 155
103590: PUSH
103591: LD_VAR 0 6
103595: ARRAY
103596: PUSH
103597: LD_VAR 0 5
103601: ARRAY
103602: PUSH
103603: LD_INT 2
103605: ARRAY
103606: PPUSH
103607: LD_VAR 0 1
103611: PPUSH
103612: CALL_OW 255
103616: PPUSH
103617: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
103621: LD_ADDR_EXP 155
103625: PUSH
103626: LD_EXP 155
103630: PPUSH
103631: LD_VAR 0 6
103635: PPUSH
103636: LD_EXP 155
103640: PUSH
103641: LD_VAR 0 6
103645: ARRAY
103646: PPUSH
103647: LD_VAR 0 5
103651: PPUSH
103652: CALL_OW 3
103656: PPUSH
103657: CALL_OW 1
103661: ST_TO_ADDR
// end ; end ;
103662: GO 103500
103664: POP
103665: POP
// end ;
103666: LD_VAR 0 4
103670: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
103671: LD_INT 0
103673: PPUSH
103674: PPUSH
103675: PPUSH
103676: PPUSH
103677: PPUSH
103678: PPUSH
103679: PPUSH
103680: PPUSH
103681: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
103682: LD_VAR 0 1
103686: PPUSH
103687: CALL_OW 264
103691: PUSH
103692: LD_EXP 36
103696: EQUAL
103697: NOT
103698: PUSH
103699: LD_VAR 0 1
103703: PUSH
103704: LD_EXP 154
103708: IN
103709: NOT
103710: OR
103711: IFFALSE 103715
// exit ;
103713: GO 104037
// index := GetElementIndex ( minersList , unit ) ;
103715: LD_ADDR_VAR 0 6
103719: PUSH
103720: LD_EXP 154
103724: PPUSH
103725: LD_VAR 0 1
103729: PPUSH
103730: CALL 24100 0 2
103734: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
103735: LD_ADDR_VAR 0 8
103739: PUSH
103740: LD_EXP 156
103744: PUSH
103745: LD_EXP 155
103749: PUSH
103750: LD_VAR 0 6
103754: ARRAY
103755: MINUS
103756: ST_TO_ADDR
// if not minesFreeAmount then
103757: LD_VAR 0 8
103761: NOT
103762: IFFALSE 103766
// exit ;
103764: GO 104037
// tmp := [ ] ;
103766: LD_ADDR_VAR 0 7
103770: PUSH
103771: EMPTY
103772: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
103773: LD_ADDR_VAR 0 5
103777: PUSH
103778: DOUBLE
103779: LD_INT 1
103781: DEC
103782: ST_TO_ADDR
103783: LD_VAR 0 8
103787: PUSH
103788: FOR_TO
103789: IFFALSE 103984
// begin _d := rand ( 0 , 5 ) ;
103791: LD_ADDR_VAR 0 11
103795: PUSH
103796: LD_INT 0
103798: PPUSH
103799: LD_INT 5
103801: PPUSH
103802: CALL_OW 12
103806: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
103807: LD_ADDR_VAR 0 12
103811: PUSH
103812: LD_INT 2
103814: PPUSH
103815: LD_INT 6
103817: PPUSH
103818: CALL_OW 12
103822: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
103823: LD_ADDR_VAR 0 9
103827: PUSH
103828: LD_VAR 0 2
103832: PPUSH
103833: LD_VAR 0 11
103837: PPUSH
103838: LD_VAR 0 12
103842: PPUSH
103843: CALL_OW 272
103847: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
103848: LD_ADDR_VAR 0 10
103852: PUSH
103853: LD_VAR 0 3
103857: PPUSH
103858: LD_VAR 0 11
103862: PPUSH
103863: LD_VAR 0 12
103867: PPUSH
103868: CALL_OW 273
103872: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
103873: LD_VAR 0 9
103877: PPUSH
103878: LD_VAR 0 10
103882: PPUSH
103883: CALL_OW 488
103887: PUSH
103888: LD_VAR 0 9
103892: PUSH
103893: LD_VAR 0 10
103897: PUSH
103898: EMPTY
103899: LIST
103900: LIST
103901: PUSH
103902: LD_VAR 0 7
103906: IN
103907: NOT
103908: AND
103909: PUSH
103910: LD_VAR 0 9
103914: PPUSH
103915: LD_VAR 0 10
103919: PPUSH
103920: CALL_OW 458
103924: NOT
103925: AND
103926: IFFALSE 103968
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
103928: LD_ADDR_VAR 0 7
103932: PUSH
103933: LD_VAR 0 7
103937: PPUSH
103938: LD_VAR 0 7
103942: PUSH
103943: LD_INT 1
103945: PLUS
103946: PPUSH
103947: LD_VAR 0 9
103951: PUSH
103952: LD_VAR 0 10
103956: PUSH
103957: EMPTY
103958: LIST
103959: LIST
103960: PPUSH
103961: CALL_OW 1
103965: ST_TO_ADDR
103966: GO 103982
// i := i - 1 ;
103968: LD_ADDR_VAR 0 5
103972: PUSH
103973: LD_VAR 0 5
103977: PUSH
103978: LD_INT 1
103980: MINUS
103981: ST_TO_ADDR
// end ;
103982: GO 103788
103984: POP
103985: POP
// for i in tmp do
103986: LD_ADDR_VAR 0 5
103990: PUSH
103991: LD_VAR 0 7
103995: PUSH
103996: FOR_IN
103997: IFFALSE 104035
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
103999: LD_VAR 0 1
104003: PPUSH
104004: LD_VAR 0 5
104008: PUSH
104009: LD_INT 1
104011: ARRAY
104012: PPUSH
104013: LD_VAR 0 5
104017: PUSH
104018: LD_INT 2
104020: ARRAY
104021: PPUSH
104022: CALL 102977 0 3
104026: NOT
104027: IFFALSE 104033
// exit ;
104029: POP
104030: POP
104031: GO 104037
104033: GO 103996
104035: POP
104036: POP
// end ;
104037: LD_VAR 0 4
104041: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
104042: LD_INT 0
104044: PPUSH
104045: PPUSH
104046: PPUSH
104047: PPUSH
104048: PPUSH
104049: PPUSH
104050: PPUSH
// if not GetClass ( unit ) = class_sniper then
104051: LD_VAR 0 1
104055: PPUSH
104056: CALL_OW 257
104060: PUSH
104061: LD_INT 5
104063: EQUAL
104064: NOT
104065: IFFALSE 104069
// exit ;
104067: GO 104457
// dist := 8 ;
104069: LD_ADDR_VAR 0 5
104073: PUSH
104074: LD_INT 8
104076: ST_TO_ADDR
// viewRange := 12 ;
104077: LD_ADDR_VAR 0 7
104081: PUSH
104082: LD_INT 12
104084: ST_TO_ADDR
// side := GetSide ( unit ) ;
104085: LD_ADDR_VAR 0 6
104089: PUSH
104090: LD_VAR 0 1
104094: PPUSH
104095: CALL_OW 255
104099: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
104100: LD_INT 61
104102: PPUSH
104103: LD_VAR 0 6
104107: PPUSH
104108: CALL_OW 321
104112: PUSH
104113: LD_INT 2
104115: EQUAL
104116: IFFALSE 104126
// viewRange := 16 ;
104118: LD_ADDR_VAR 0 7
104122: PUSH
104123: LD_INT 16
104125: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
104126: LD_VAR 0 1
104130: PPUSH
104131: LD_VAR 0 2
104135: PPUSH
104136: LD_VAR 0 3
104140: PPUSH
104141: CALL_OW 297
104145: PUSH
104146: LD_VAR 0 5
104150: GREATER
104151: IFFALSE 104230
// begin ComMoveXY ( unit , x , y ) ;
104153: LD_VAR 0 1
104157: PPUSH
104158: LD_VAR 0 2
104162: PPUSH
104163: LD_VAR 0 3
104167: PPUSH
104168: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
104172: LD_INT 35
104174: PPUSH
104175: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
104179: LD_VAR 0 1
104183: PPUSH
104184: LD_VAR 0 2
104188: PPUSH
104189: LD_VAR 0 3
104193: PPUSH
104194: CALL 54497 0 3
104198: NOT
104199: IFFALSE 104203
// exit ;
104201: GO 104457
// until GetDistUnitXY ( unit , x , y ) < dist ;
104203: LD_VAR 0 1
104207: PPUSH
104208: LD_VAR 0 2
104212: PPUSH
104213: LD_VAR 0 3
104217: PPUSH
104218: CALL_OW 297
104222: PUSH
104223: LD_VAR 0 5
104227: LESS
104228: IFFALSE 104172
// end ; ComTurnXY ( unit , x , y ) ;
104230: LD_VAR 0 1
104234: PPUSH
104235: LD_VAR 0 2
104239: PPUSH
104240: LD_VAR 0 3
104244: PPUSH
104245: CALL_OW 118
// wait ( 5 ) ;
104249: LD_INT 5
104251: PPUSH
104252: CALL_OW 67
// _d := GetDir ( unit ) ;
104256: LD_ADDR_VAR 0 10
104260: PUSH
104261: LD_VAR 0 1
104265: PPUSH
104266: CALL_OW 254
104270: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
104271: LD_ADDR_VAR 0 8
104275: PUSH
104276: LD_VAR 0 1
104280: PPUSH
104281: CALL_OW 250
104285: PPUSH
104286: LD_VAR 0 10
104290: PPUSH
104291: LD_VAR 0 5
104295: PPUSH
104296: CALL_OW 272
104300: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
104301: LD_ADDR_VAR 0 9
104305: PUSH
104306: LD_VAR 0 1
104310: PPUSH
104311: CALL_OW 251
104315: PPUSH
104316: LD_VAR 0 10
104320: PPUSH
104321: LD_VAR 0 5
104325: PPUSH
104326: CALL_OW 273
104330: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
104331: LD_VAR 0 8
104335: PPUSH
104336: LD_VAR 0 9
104340: PPUSH
104341: CALL_OW 488
104345: NOT
104346: IFFALSE 104350
// exit ;
104348: GO 104457
// ComAnimCustom ( unit , 1 ) ;
104350: LD_VAR 0 1
104354: PPUSH
104355: LD_INT 1
104357: PPUSH
104358: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
104362: LD_VAR 0 8
104366: PPUSH
104367: LD_VAR 0 9
104371: PPUSH
104372: LD_VAR 0 6
104376: PPUSH
104377: LD_VAR 0 7
104381: PPUSH
104382: CALL_OW 330
// repeat wait ( 1 ) ;
104386: LD_INT 1
104388: PPUSH
104389: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
104393: LD_VAR 0 1
104397: PPUSH
104398: CALL_OW 316
104402: PUSH
104403: LD_VAR 0 1
104407: PPUSH
104408: CALL_OW 314
104412: OR
104413: PUSH
104414: LD_VAR 0 1
104418: PPUSH
104419: CALL_OW 302
104423: NOT
104424: OR
104425: PUSH
104426: LD_VAR 0 1
104430: PPUSH
104431: CALL_OW 301
104435: OR
104436: IFFALSE 104386
// RemoveSeeing ( _x , _y , side ) ;
104438: LD_VAR 0 8
104442: PPUSH
104443: LD_VAR 0 9
104447: PPUSH
104448: LD_VAR 0 6
104452: PPUSH
104453: CALL_OW 331
// end ; end_of_file
104457: LD_VAR 0 4
104461: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
104462: LD_INT 0
104464: PPUSH
104465: PPUSH
104466: PPUSH
104467: PPUSH
104468: PPUSH
104469: PPUSH
104470: PPUSH
104471: PPUSH
104472: PPUSH
104473: PPUSH
104474: PPUSH
104475: PPUSH
104476: PPUSH
104477: PPUSH
104478: PPUSH
104479: PPUSH
104480: PPUSH
104481: PPUSH
104482: PPUSH
104483: PPUSH
104484: PPUSH
104485: PPUSH
104486: PPUSH
104487: PPUSH
104488: PPUSH
104489: PPUSH
104490: PPUSH
104491: PPUSH
104492: PPUSH
104493: PPUSH
104494: PPUSH
104495: PPUSH
104496: PPUSH
104497: PPUSH
// if not list then
104498: LD_VAR 0 1
104502: NOT
104503: IFFALSE 104507
// exit ;
104505: GO 109166
// base := list [ 1 ] ;
104507: LD_ADDR_VAR 0 3
104511: PUSH
104512: LD_VAR 0 1
104516: PUSH
104517: LD_INT 1
104519: ARRAY
104520: ST_TO_ADDR
// group := list [ 2 ] ;
104521: LD_ADDR_VAR 0 4
104525: PUSH
104526: LD_VAR 0 1
104530: PUSH
104531: LD_INT 2
104533: ARRAY
104534: ST_TO_ADDR
// path := list [ 3 ] ;
104535: LD_ADDR_VAR 0 5
104539: PUSH
104540: LD_VAR 0 1
104544: PUSH
104545: LD_INT 3
104547: ARRAY
104548: ST_TO_ADDR
// flags := list [ 4 ] ;
104549: LD_ADDR_VAR 0 6
104553: PUSH
104554: LD_VAR 0 1
104558: PUSH
104559: LD_INT 4
104561: ARRAY
104562: ST_TO_ADDR
// mined := [ ] ;
104563: LD_ADDR_VAR 0 27
104567: PUSH
104568: EMPTY
104569: ST_TO_ADDR
// bombed := [ ] ;
104570: LD_ADDR_VAR 0 28
104574: PUSH
104575: EMPTY
104576: ST_TO_ADDR
// healers := [ ] ;
104577: LD_ADDR_VAR 0 31
104581: PUSH
104582: EMPTY
104583: ST_TO_ADDR
// to_heal := [ ] ;
104584: LD_ADDR_VAR 0 30
104588: PUSH
104589: EMPTY
104590: ST_TO_ADDR
// repairs := [ ] ;
104591: LD_ADDR_VAR 0 33
104595: PUSH
104596: EMPTY
104597: ST_TO_ADDR
// to_repair := [ ] ;
104598: LD_ADDR_VAR 0 32
104602: PUSH
104603: EMPTY
104604: ST_TO_ADDR
// if not group or not path then
104605: LD_VAR 0 4
104609: NOT
104610: PUSH
104611: LD_VAR 0 5
104615: NOT
104616: OR
104617: IFFALSE 104621
// exit ;
104619: GO 109166
// side := GetSide ( group [ 1 ] ) ;
104621: LD_ADDR_VAR 0 35
104625: PUSH
104626: LD_VAR 0 4
104630: PUSH
104631: LD_INT 1
104633: ARRAY
104634: PPUSH
104635: CALL_OW 255
104639: ST_TO_ADDR
// if flags then
104640: LD_VAR 0 6
104644: IFFALSE 104788
// begin f_ignore_area := flags [ 1 ] ;
104646: LD_ADDR_VAR 0 17
104650: PUSH
104651: LD_VAR 0 6
104655: PUSH
104656: LD_INT 1
104658: ARRAY
104659: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
104660: LD_ADDR_VAR 0 18
104664: PUSH
104665: LD_VAR 0 6
104669: PUSH
104670: LD_INT 2
104672: ARRAY
104673: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
104674: LD_ADDR_VAR 0 19
104678: PUSH
104679: LD_VAR 0 6
104683: PUSH
104684: LD_INT 3
104686: ARRAY
104687: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
104688: LD_ADDR_VAR 0 20
104692: PUSH
104693: LD_VAR 0 6
104697: PUSH
104698: LD_INT 4
104700: ARRAY
104701: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
104702: LD_ADDR_VAR 0 21
104706: PUSH
104707: LD_VAR 0 6
104711: PUSH
104712: LD_INT 5
104714: ARRAY
104715: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
104716: LD_ADDR_VAR 0 22
104720: PUSH
104721: LD_VAR 0 6
104725: PUSH
104726: LD_INT 6
104728: ARRAY
104729: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
104730: LD_ADDR_VAR 0 23
104734: PUSH
104735: LD_VAR 0 6
104739: PUSH
104740: LD_INT 7
104742: ARRAY
104743: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
104744: LD_ADDR_VAR 0 24
104748: PUSH
104749: LD_VAR 0 6
104753: PUSH
104754: LD_INT 8
104756: ARRAY
104757: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
104758: LD_ADDR_VAR 0 25
104762: PUSH
104763: LD_VAR 0 6
104767: PUSH
104768: LD_INT 9
104770: ARRAY
104771: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
104772: LD_ADDR_VAR 0 26
104776: PUSH
104777: LD_VAR 0 6
104781: PUSH
104782: LD_INT 10
104784: ARRAY
104785: ST_TO_ADDR
// end else
104786: GO 104868
// begin f_ignore_area := false ;
104788: LD_ADDR_VAR 0 17
104792: PUSH
104793: LD_INT 0
104795: ST_TO_ADDR
// f_capture := false ;
104796: LD_ADDR_VAR 0 18
104800: PUSH
104801: LD_INT 0
104803: ST_TO_ADDR
// f_ignore_civ := false ;
104804: LD_ADDR_VAR 0 19
104808: PUSH
104809: LD_INT 0
104811: ST_TO_ADDR
// f_murder := false ;
104812: LD_ADDR_VAR 0 20
104816: PUSH
104817: LD_INT 0
104819: ST_TO_ADDR
// f_mines := false ;
104820: LD_ADDR_VAR 0 21
104824: PUSH
104825: LD_INT 0
104827: ST_TO_ADDR
// f_repair := false ;
104828: LD_ADDR_VAR 0 22
104832: PUSH
104833: LD_INT 0
104835: ST_TO_ADDR
// f_heal := false ;
104836: LD_ADDR_VAR 0 23
104840: PUSH
104841: LD_INT 0
104843: ST_TO_ADDR
// f_spacetime := false ;
104844: LD_ADDR_VAR 0 24
104848: PUSH
104849: LD_INT 0
104851: ST_TO_ADDR
// f_attack_depot := false ;
104852: LD_ADDR_VAR 0 25
104856: PUSH
104857: LD_INT 0
104859: ST_TO_ADDR
// f_crawl := false ;
104860: LD_ADDR_VAR 0 26
104864: PUSH
104865: LD_INT 0
104867: ST_TO_ADDR
// end ; if f_heal then
104868: LD_VAR 0 23
104872: IFFALSE 104899
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
104874: LD_ADDR_VAR 0 31
104878: PUSH
104879: LD_VAR 0 4
104883: PPUSH
104884: LD_INT 25
104886: PUSH
104887: LD_INT 4
104889: PUSH
104890: EMPTY
104891: LIST
104892: LIST
104893: PPUSH
104894: CALL_OW 72
104898: ST_TO_ADDR
// if f_repair then
104899: LD_VAR 0 22
104903: IFFALSE 104930
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
104905: LD_ADDR_VAR 0 33
104909: PUSH
104910: LD_VAR 0 4
104914: PPUSH
104915: LD_INT 25
104917: PUSH
104918: LD_INT 3
104920: PUSH
104921: EMPTY
104922: LIST
104923: LIST
104924: PPUSH
104925: CALL_OW 72
104929: ST_TO_ADDR
// units_path := [ ] ;
104930: LD_ADDR_VAR 0 16
104934: PUSH
104935: EMPTY
104936: ST_TO_ADDR
// for i = 1 to group do
104937: LD_ADDR_VAR 0 7
104941: PUSH
104942: DOUBLE
104943: LD_INT 1
104945: DEC
104946: ST_TO_ADDR
104947: LD_VAR 0 4
104951: PUSH
104952: FOR_TO
104953: IFFALSE 104982
// units_path := Replace ( units_path , i , path ) ;
104955: LD_ADDR_VAR 0 16
104959: PUSH
104960: LD_VAR 0 16
104964: PPUSH
104965: LD_VAR 0 7
104969: PPUSH
104970: LD_VAR 0 5
104974: PPUSH
104975: CALL_OW 1
104979: ST_TO_ADDR
104980: GO 104952
104982: POP
104983: POP
// repeat for i = group downto 1 do
104984: LD_ADDR_VAR 0 7
104988: PUSH
104989: DOUBLE
104990: LD_VAR 0 4
104994: INC
104995: ST_TO_ADDR
104996: LD_INT 1
104998: PUSH
104999: FOR_DOWNTO
105000: IFFALSE 109122
// begin wait ( 5 ) ;
105002: LD_INT 5
105004: PPUSH
105005: CALL_OW 67
// tmp := [ ] ;
105009: LD_ADDR_VAR 0 14
105013: PUSH
105014: EMPTY
105015: ST_TO_ADDR
// attacking := false ;
105016: LD_ADDR_VAR 0 29
105020: PUSH
105021: LD_INT 0
105023: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
105024: LD_VAR 0 4
105028: PUSH
105029: LD_VAR 0 7
105033: ARRAY
105034: PPUSH
105035: CALL_OW 301
105039: PUSH
105040: LD_VAR 0 4
105044: PUSH
105045: LD_VAR 0 7
105049: ARRAY
105050: NOT
105051: OR
105052: IFFALSE 105161
// begin if GetType ( group [ i ] ) = unit_human then
105054: LD_VAR 0 4
105058: PUSH
105059: LD_VAR 0 7
105063: ARRAY
105064: PPUSH
105065: CALL_OW 247
105069: PUSH
105070: LD_INT 1
105072: EQUAL
105073: IFFALSE 105119
// begin to_heal := to_heal diff group [ i ] ;
105075: LD_ADDR_VAR 0 30
105079: PUSH
105080: LD_VAR 0 30
105084: PUSH
105085: LD_VAR 0 4
105089: PUSH
105090: LD_VAR 0 7
105094: ARRAY
105095: DIFF
105096: ST_TO_ADDR
// healers := healers diff group [ i ] ;
105097: LD_ADDR_VAR 0 31
105101: PUSH
105102: LD_VAR 0 31
105106: PUSH
105107: LD_VAR 0 4
105111: PUSH
105112: LD_VAR 0 7
105116: ARRAY
105117: DIFF
105118: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
105119: LD_ADDR_VAR 0 4
105123: PUSH
105124: LD_VAR 0 4
105128: PPUSH
105129: LD_VAR 0 7
105133: PPUSH
105134: CALL_OW 3
105138: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
105139: LD_ADDR_VAR 0 16
105143: PUSH
105144: LD_VAR 0 16
105148: PPUSH
105149: LD_VAR 0 7
105153: PPUSH
105154: CALL_OW 3
105158: ST_TO_ADDR
// continue ;
105159: GO 104999
// end ; if f_repair then
105161: LD_VAR 0 22
105165: IFFALSE 105654
// begin if GetType ( group [ i ] ) = unit_vehicle then
105167: LD_VAR 0 4
105171: PUSH
105172: LD_VAR 0 7
105176: ARRAY
105177: PPUSH
105178: CALL_OW 247
105182: PUSH
105183: LD_INT 2
105185: EQUAL
105186: IFFALSE 105376
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
105188: LD_VAR 0 4
105192: PUSH
105193: LD_VAR 0 7
105197: ARRAY
105198: PPUSH
105199: CALL_OW 256
105203: PUSH
105204: LD_INT 700
105206: LESS
105207: PUSH
105208: LD_VAR 0 4
105212: PUSH
105213: LD_VAR 0 7
105217: ARRAY
105218: PUSH
105219: LD_VAR 0 32
105223: IN
105224: NOT
105225: AND
105226: IFFALSE 105250
// to_repair := to_repair union group [ i ] ;
105228: LD_ADDR_VAR 0 32
105232: PUSH
105233: LD_VAR 0 32
105237: PUSH
105238: LD_VAR 0 4
105242: PUSH
105243: LD_VAR 0 7
105247: ARRAY
105248: UNION
105249: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
105250: LD_VAR 0 4
105254: PUSH
105255: LD_VAR 0 7
105259: ARRAY
105260: PPUSH
105261: CALL_OW 256
105265: PUSH
105266: LD_INT 1000
105268: EQUAL
105269: PUSH
105270: LD_VAR 0 4
105274: PUSH
105275: LD_VAR 0 7
105279: ARRAY
105280: PUSH
105281: LD_VAR 0 32
105285: IN
105286: AND
105287: IFFALSE 105311
// to_repair := to_repair diff group [ i ] ;
105289: LD_ADDR_VAR 0 32
105293: PUSH
105294: LD_VAR 0 32
105298: PUSH
105299: LD_VAR 0 4
105303: PUSH
105304: LD_VAR 0 7
105308: ARRAY
105309: DIFF
105310: ST_TO_ADDR
// if group [ i ] in to_repair then
105311: LD_VAR 0 4
105315: PUSH
105316: LD_VAR 0 7
105320: ARRAY
105321: PUSH
105322: LD_VAR 0 32
105326: IN
105327: IFFALSE 105374
// begin if not IsInArea ( group [ i ] , f_repair ) then
105329: LD_VAR 0 4
105333: PUSH
105334: LD_VAR 0 7
105338: ARRAY
105339: PPUSH
105340: LD_VAR 0 22
105344: PPUSH
105345: CALL_OW 308
105349: NOT
105350: IFFALSE 105372
// ComMoveToArea ( group [ i ] , f_repair ) ;
105352: LD_VAR 0 4
105356: PUSH
105357: LD_VAR 0 7
105361: ARRAY
105362: PPUSH
105363: LD_VAR 0 22
105367: PPUSH
105368: CALL_OW 113
// continue ;
105372: GO 104999
// end ; end else
105374: GO 105654
// if group [ i ] in repairs then
105376: LD_VAR 0 4
105380: PUSH
105381: LD_VAR 0 7
105385: ARRAY
105386: PUSH
105387: LD_VAR 0 33
105391: IN
105392: IFFALSE 105654
// begin if IsInUnit ( group [ i ] ) then
105394: LD_VAR 0 4
105398: PUSH
105399: LD_VAR 0 7
105403: ARRAY
105404: PPUSH
105405: CALL_OW 310
105409: IFFALSE 105477
// begin z := IsInUnit ( group [ i ] ) ;
105411: LD_ADDR_VAR 0 13
105415: PUSH
105416: LD_VAR 0 4
105420: PUSH
105421: LD_VAR 0 7
105425: ARRAY
105426: PPUSH
105427: CALL_OW 310
105431: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
105432: LD_VAR 0 13
105436: PUSH
105437: LD_VAR 0 32
105441: IN
105442: PUSH
105443: LD_VAR 0 13
105447: PPUSH
105448: LD_VAR 0 22
105452: PPUSH
105453: CALL_OW 308
105457: AND
105458: IFFALSE 105475
// ComExitVehicle ( group [ i ] ) ;
105460: LD_VAR 0 4
105464: PUSH
105465: LD_VAR 0 7
105469: ARRAY
105470: PPUSH
105471: CALL_OW 121
// end else
105475: GO 105654
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
105477: LD_ADDR_VAR 0 13
105481: PUSH
105482: LD_VAR 0 4
105486: PPUSH
105487: LD_INT 95
105489: PUSH
105490: LD_VAR 0 22
105494: PUSH
105495: EMPTY
105496: LIST
105497: LIST
105498: PUSH
105499: LD_INT 58
105501: PUSH
105502: EMPTY
105503: LIST
105504: PUSH
105505: EMPTY
105506: LIST
105507: LIST
105508: PPUSH
105509: CALL_OW 72
105513: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
105514: LD_VAR 0 4
105518: PUSH
105519: LD_VAR 0 7
105523: ARRAY
105524: PPUSH
105525: CALL_OW 314
105529: NOT
105530: IFFALSE 105652
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
105532: LD_ADDR_VAR 0 10
105536: PUSH
105537: LD_VAR 0 13
105541: PPUSH
105542: LD_VAR 0 4
105546: PUSH
105547: LD_VAR 0 7
105551: ARRAY
105552: PPUSH
105553: CALL_OW 74
105557: ST_TO_ADDR
// if not x then
105558: LD_VAR 0 10
105562: NOT
105563: IFFALSE 105567
// continue ;
105565: GO 104999
// if GetLives ( x ) < 1000 then
105567: LD_VAR 0 10
105571: PPUSH
105572: CALL_OW 256
105576: PUSH
105577: LD_INT 1000
105579: LESS
105580: IFFALSE 105604
// ComRepairVehicle ( group [ i ] , x ) else
105582: LD_VAR 0 4
105586: PUSH
105587: LD_VAR 0 7
105591: ARRAY
105592: PPUSH
105593: LD_VAR 0 10
105597: PPUSH
105598: CALL_OW 129
105602: GO 105652
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
105604: LD_VAR 0 23
105608: PUSH
105609: LD_VAR 0 4
105613: PUSH
105614: LD_VAR 0 7
105618: ARRAY
105619: PPUSH
105620: CALL_OW 256
105624: PUSH
105625: LD_INT 1000
105627: LESS
105628: AND
105629: NOT
105630: IFFALSE 105652
// ComEnterUnit ( group [ i ] , x ) ;
105632: LD_VAR 0 4
105636: PUSH
105637: LD_VAR 0 7
105641: ARRAY
105642: PPUSH
105643: LD_VAR 0 10
105647: PPUSH
105648: CALL_OW 120
// end ; continue ;
105652: GO 104999
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
105654: LD_VAR 0 23
105658: PUSH
105659: LD_VAR 0 4
105663: PUSH
105664: LD_VAR 0 7
105668: ARRAY
105669: PPUSH
105670: CALL_OW 247
105674: PUSH
105675: LD_INT 1
105677: EQUAL
105678: AND
105679: IFFALSE 106157
// begin if group [ i ] in healers then
105681: LD_VAR 0 4
105685: PUSH
105686: LD_VAR 0 7
105690: ARRAY
105691: PUSH
105692: LD_VAR 0 31
105696: IN
105697: IFFALSE 105970
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
105699: LD_VAR 0 4
105703: PUSH
105704: LD_VAR 0 7
105708: ARRAY
105709: PPUSH
105710: LD_VAR 0 23
105714: PPUSH
105715: CALL_OW 308
105719: NOT
105720: PUSH
105721: LD_VAR 0 4
105725: PUSH
105726: LD_VAR 0 7
105730: ARRAY
105731: PPUSH
105732: CALL_OW 314
105736: NOT
105737: AND
105738: IFFALSE 105762
// ComMoveToArea ( group [ i ] , f_heal ) else
105740: LD_VAR 0 4
105744: PUSH
105745: LD_VAR 0 7
105749: ARRAY
105750: PPUSH
105751: LD_VAR 0 23
105755: PPUSH
105756: CALL_OW 113
105760: GO 105968
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
105762: LD_VAR 0 4
105766: PUSH
105767: LD_VAR 0 7
105771: ARRAY
105772: PPUSH
105773: CALL 53020 0 1
105777: PPUSH
105778: CALL_OW 256
105782: PUSH
105783: LD_INT 1000
105785: EQUAL
105786: IFFALSE 105805
// ComStop ( group [ i ] ) else
105788: LD_VAR 0 4
105792: PUSH
105793: LD_VAR 0 7
105797: ARRAY
105798: PPUSH
105799: CALL_OW 141
105803: GO 105968
// if not HasTask ( group [ i ] ) and to_heal then
105805: LD_VAR 0 4
105809: PUSH
105810: LD_VAR 0 7
105814: ARRAY
105815: PPUSH
105816: CALL_OW 314
105820: NOT
105821: PUSH
105822: LD_VAR 0 30
105826: AND
105827: IFFALSE 105968
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
105829: LD_ADDR_VAR 0 13
105833: PUSH
105834: LD_VAR 0 30
105838: PPUSH
105839: LD_INT 3
105841: PUSH
105842: LD_INT 54
105844: PUSH
105845: EMPTY
105846: LIST
105847: PUSH
105848: EMPTY
105849: LIST
105850: LIST
105851: PPUSH
105852: CALL_OW 72
105856: PPUSH
105857: LD_VAR 0 4
105861: PUSH
105862: LD_VAR 0 7
105866: ARRAY
105867: PPUSH
105868: CALL_OW 74
105872: ST_TO_ADDR
// if z then
105873: LD_VAR 0 13
105877: IFFALSE 105968
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
105879: LD_INT 91
105881: PUSH
105882: LD_VAR 0 13
105886: PUSH
105887: LD_INT 10
105889: PUSH
105890: EMPTY
105891: LIST
105892: LIST
105893: LIST
105894: PUSH
105895: LD_INT 81
105897: PUSH
105898: LD_VAR 0 13
105902: PPUSH
105903: CALL_OW 255
105907: PUSH
105908: EMPTY
105909: LIST
105910: LIST
105911: PUSH
105912: EMPTY
105913: LIST
105914: LIST
105915: PPUSH
105916: CALL_OW 69
105920: PUSH
105921: LD_INT 0
105923: EQUAL
105924: IFFALSE 105948
// ComHeal ( group [ i ] , z ) else
105926: LD_VAR 0 4
105930: PUSH
105931: LD_VAR 0 7
105935: ARRAY
105936: PPUSH
105937: LD_VAR 0 13
105941: PPUSH
105942: CALL_OW 128
105946: GO 105968
// ComMoveToArea ( group [ i ] , f_heal ) ;
105948: LD_VAR 0 4
105952: PUSH
105953: LD_VAR 0 7
105957: ARRAY
105958: PPUSH
105959: LD_VAR 0 23
105963: PPUSH
105964: CALL_OW 113
// end ; continue ;
105968: GO 104999
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
105970: LD_VAR 0 4
105974: PUSH
105975: LD_VAR 0 7
105979: ARRAY
105980: PPUSH
105981: CALL_OW 256
105985: PUSH
105986: LD_INT 700
105988: LESS
105989: PUSH
105990: LD_VAR 0 4
105994: PUSH
105995: LD_VAR 0 7
105999: ARRAY
106000: PUSH
106001: LD_VAR 0 30
106005: IN
106006: NOT
106007: AND
106008: IFFALSE 106032
// to_heal := to_heal union group [ i ] ;
106010: LD_ADDR_VAR 0 30
106014: PUSH
106015: LD_VAR 0 30
106019: PUSH
106020: LD_VAR 0 4
106024: PUSH
106025: LD_VAR 0 7
106029: ARRAY
106030: UNION
106031: ST_TO_ADDR
// if group [ i ] in to_heal then
106032: LD_VAR 0 4
106036: PUSH
106037: LD_VAR 0 7
106041: ARRAY
106042: PUSH
106043: LD_VAR 0 30
106047: IN
106048: IFFALSE 106157
// begin if GetLives ( group [ i ] ) = 1000 then
106050: LD_VAR 0 4
106054: PUSH
106055: LD_VAR 0 7
106059: ARRAY
106060: PPUSH
106061: CALL_OW 256
106065: PUSH
106066: LD_INT 1000
106068: EQUAL
106069: IFFALSE 106095
// to_heal := to_heal diff group [ i ] else
106071: LD_ADDR_VAR 0 30
106075: PUSH
106076: LD_VAR 0 30
106080: PUSH
106081: LD_VAR 0 4
106085: PUSH
106086: LD_VAR 0 7
106090: ARRAY
106091: DIFF
106092: ST_TO_ADDR
106093: GO 106157
// begin if not IsInArea ( group [ i ] , to_heal ) then
106095: LD_VAR 0 4
106099: PUSH
106100: LD_VAR 0 7
106104: ARRAY
106105: PPUSH
106106: LD_VAR 0 30
106110: PPUSH
106111: CALL_OW 308
106115: NOT
106116: IFFALSE 106140
// ComMoveToArea ( group [ i ] , f_heal ) else
106118: LD_VAR 0 4
106122: PUSH
106123: LD_VAR 0 7
106127: ARRAY
106128: PPUSH
106129: LD_VAR 0 23
106133: PPUSH
106134: CALL_OW 113
106138: GO 106155
// ComHold ( group [ i ] ) ;
106140: LD_VAR 0 4
106144: PUSH
106145: LD_VAR 0 7
106149: ARRAY
106150: PPUSH
106151: CALL_OW 140
// continue ;
106155: GO 104999
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
106157: LD_VAR 0 4
106161: PUSH
106162: LD_VAR 0 7
106166: ARRAY
106167: PPUSH
106168: LD_INT 10
106170: PPUSH
106171: CALL 51440 0 2
106175: NOT
106176: PUSH
106177: LD_VAR 0 16
106181: PUSH
106182: LD_VAR 0 7
106186: ARRAY
106187: PUSH
106188: EMPTY
106189: EQUAL
106190: NOT
106191: AND
106192: IFFALSE 106458
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
106194: LD_VAR 0 4
106198: PUSH
106199: LD_VAR 0 7
106203: ARRAY
106204: PPUSH
106205: CALL_OW 262
106209: PUSH
106210: LD_INT 1
106212: PUSH
106213: LD_INT 2
106215: PUSH
106216: EMPTY
106217: LIST
106218: LIST
106219: IN
106220: IFFALSE 106261
// if GetFuel ( group [ i ] ) < 10 then
106222: LD_VAR 0 4
106226: PUSH
106227: LD_VAR 0 7
106231: ARRAY
106232: PPUSH
106233: CALL_OW 261
106237: PUSH
106238: LD_INT 10
106240: LESS
106241: IFFALSE 106261
// SetFuel ( group [ i ] , 12 ) ;
106243: LD_VAR 0 4
106247: PUSH
106248: LD_VAR 0 7
106252: ARRAY
106253: PPUSH
106254: LD_INT 12
106256: PPUSH
106257: CALL_OW 240
// if units_path [ i ] then
106261: LD_VAR 0 16
106265: PUSH
106266: LD_VAR 0 7
106270: ARRAY
106271: IFFALSE 106456
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
106273: LD_VAR 0 4
106277: PUSH
106278: LD_VAR 0 7
106282: ARRAY
106283: PPUSH
106284: LD_VAR 0 16
106288: PUSH
106289: LD_VAR 0 7
106293: ARRAY
106294: PUSH
106295: LD_INT 1
106297: ARRAY
106298: PUSH
106299: LD_INT 1
106301: ARRAY
106302: PPUSH
106303: LD_VAR 0 16
106307: PUSH
106308: LD_VAR 0 7
106312: ARRAY
106313: PUSH
106314: LD_INT 1
106316: ARRAY
106317: PUSH
106318: LD_INT 2
106320: ARRAY
106321: PPUSH
106322: CALL_OW 297
106326: PUSH
106327: LD_INT 6
106329: GREATER
106330: IFFALSE 106405
// begin if not HasTask ( group [ i ] ) then
106332: LD_VAR 0 4
106336: PUSH
106337: LD_VAR 0 7
106341: ARRAY
106342: PPUSH
106343: CALL_OW 314
106347: NOT
106348: IFFALSE 106403
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
106350: LD_VAR 0 4
106354: PUSH
106355: LD_VAR 0 7
106359: ARRAY
106360: PPUSH
106361: LD_VAR 0 16
106365: PUSH
106366: LD_VAR 0 7
106370: ARRAY
106371: PUSH
106372: LD_INT 1
106374: ARRAY
106375: PUSH
106376: LD_INT 1
106378: ARRAY
106379: PPUSH
106380: LD_VAR 0 16
106384: PUSH
106385: LD_VAR 0 7
106389: ARRAY
106390: PUSH
106391: LD_INT 1
106393: ARRAY
106394: PUSH
106395: LD_INT 2
106397: ARRAY
106398: PPUSH
106399: CALL_OW 114
// end else
106403: GO 106456
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
106405: LD_ADDR_VAR 0 15
106409: PUSH
106410: LD_VAR 0 16
106414: PUSH
106415: LD_VAR 0 7
106419: ARRAY
106420: PPUSH
106421: LD_INT 1
106423: PPUSH
106424: CALL_OW 3
106428: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
106429: LD_ADDR_VAR 0 16
106433: PUSH
106434: LD_VAR 0 16
106438: PPUSH
106439: LD_VAR 0 7
106443: PPUSH
106444: LD_VAR 0 15
106448: PPUSH
106449: CALL_OW 1
106453: ST_TO_ADDR
// continue ;
106454: GO 104999
// end ; end ; end else
106456: GO 109120
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
106458: LD_ADDR_VAR 0 14
106462: PUSH
106463: LD_INT 81
106465: PUSH
106466: LD_VAR 0 4
106470: PUSH
106471: LD_VAR 0 7
106475: ARRAY
106476: PPUSH
106477: CALL_OW 255
106481: PUSH
106482: EMPTY
106483: LIST
106484: LIST
106485: PPUSH
106486: CALL_OW 69
106490: ST_TO_ADDR
// if not tmp then
106491: LD_VAR 0 14
106495: NOT
106496: IFFALSE 106500
// continue ;
106498: GO 104999
// if f_ignore_area then
106500: LD_VAR 0 17
106504: IFFALSE 106592
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
106506: LD_ADDR_VAR 0 15
106510: PUSH
106511: LD_VAR 0 14
106515: PPUSH
106516: LD_INT 3
106518: PUSH
106519: LD_INT 92
106521: PUSH
106522: LD_VAR 0 17
106526: PUSH
106527: LD_INT 1
106529: ARRAY
106530: PUSH
106531: LD_VAR 0 17
106535: PUSH
106536: LD_INT 2
106538: ARRAY
106539: PUSH
106540: LD_VAR 0 17
106544: PUSH
106545: LD_INT 3
106547: ARRAY
106548: PUSH
106549: EMPTY
106550: LIST
106551: LIST
106552: LIST
106553: LIST
106554: PUSH
106555: EMPTY
106556: LIST
106557: LIST
106558: PPUSH
106559: CALL_OW 72
106563: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
106564: LD_VAR 0 14
106568: PUSH
106569: LD_VAR 0 15
106573: DIFF
106574: IFFALSE 106592
// tmp := tmp diff tmp2 ;
106576: LD_ADDR_VAR 0 14
106580: PUSH
106581: LD_VAR 0 14
106585: PUSH
106586: LD_VAR 0 15
106590: DIFF
106591: ST_TO_ADDR
// end ; if not f_murder then
106592: LD_VAR 0 20
106596: NOT
106597: IFFALSE 106655
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
106599: LD_ADDR_VAR 0 15
106603: PUSH
106604: LD_VAR 0 14
106608: PPUSH
106609: LD_INT 3
106611: PUSH
106612: LD_INT 50
106614: PUSH
106615: EMPTY
106616: LIST
106617: PUSH
106618: EMPTY
106619: LIST
106620: LIST
106621: PPUSH
106622: CALL_OW 72
106626: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
106627: LD_VAR 0 14
106631: PUSH
106632: LD_VAR 0 15
106636: DIFF
106637: IFFALSE 106655
// tmp := tmp diff tmp2 ;
106639: LD_ADDR_VAR 0 14
106643: PUSH
106644: LD_VAR 0 14
106648: PUSH
106649: LD_VAR 0 15
106653: DIFF
106654: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
106655: LD_ADDR_VAR 0 14
106659: PUSH
106660: LD_VAR 0 4
106664: PUSH
106665: LD_VAR 0 7
106669: ARRAY
106670: PPUSH
106671: LD_VAR 0 14
106675: PPUSH
106676: LD_INT 1
106678: PPUSH
106679: LD_INT 1
106681: PPUSH
106682: CALL 24750 0 4
106686: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
106687: LD_VAR 0 4
106691: PUSH
106692: LD_VAR 0 7
106696: ARRAY
106697: PPUSH
106698: CALL_OW 257
106702: PUSH
106703: LD_INT 1
106705: EQUAL
106706: IFFALSE 107154
// begin if WantPlant ( group [ i ] ) then
106708: LD_VAR 0 4
106712: PUSH
106713: LD_VAR 0 7
106717: ARRAY
106718: PPUSH
106719: CALL 24251 0 1
106723: IFFALSE 106727
// continue ;
106725: GO 104999
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
106727: LD_VAR 0 18
106731: PUSH
106732: LD_VAR 0 4
106736: PUSH
106737: LD_VAR 0 7
106741: ARRAY
106742: PPUSH
106743: CALL_OW 310
106747: NOT
106748: AND
106749: PUSH
106750: LD_VAR 0 14
106754: PUSH
106755: LD_INT 1
106757: ARRAY
106758: PUSH
106759: LD_VAR 0 14
106763: PPUSH
106764: LD_INT 21
106766: PUSH
106767: LD_INT 2
106769: PUSH
106770: EMPTY
106771: LIST
106772: LIST
106773: PUSH
106774: LD_INT 58
106776: PUSH
106777: EMPTY
106778: LIST
106779: PUSH
106780: EMPTY
106781: LIST
106782: LIST
106783: PPUSH
106784: CALL_OW 72
106788: IN
106789: AND
106790: IFFALSE 106826
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
106792: LD_VAR 0 4
106796: PUSH
106797: LD_VAR 0 7
106801: ARRAY
106802: PPUSH
106803: LD_VAR 0 14
106807: PUSH
106808: LD_INT 1
106810: ARRAY
106811: PPUSH
106812: CALL_OW 120
// attacking := true ;
106816: LD_ADDR_VAR 0 29
106820: PUSH
106821: LD_INT 1
106823: ST_TO_ADDR
// continue ;
106824: GO 104999
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
106826: LD_VAR 0 26
106830: PUSH
106831: LD_VAR 0 4
106835: PUSH
106836: LD_VAR 0 7
106840: ARRAY
106841: PPUSH
106842: CALL_OW 257
106846: PUSH
106847: LD_INT 1
106849: EQUAL
106850: AND
106851: PUSH
106852: LD_VAR 0 4
106856: PUSH
106857: LD_VAR 0 7
106861: ARRAY
106862: PPUSH
106863: CALL_OW 256
106867: PUSH
106868: LD_INT 800
106870: LESS
106871: AND
106872: PUSH
106873: LD_VAR 0 4
106877: PUSH
106878: LD_VAR 0 7
106882: ARRAY
106883: PPUSH
106884: CALL_OW 318
106888: NOT
106889: AND
106890: IFFALSE 106907
// ComCrawl ( group [ i ] ) ;
106892: LD_VAR 0 4
106896: PUSH
106897: LD_VAR 0 7
106901: ARRAY
106902: PPUSH
106903: CALL_OW 137
// if f_mines then
106907: LD_VAR 0 21
106911: IFFALSE 107154
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
106913: LD_VAR 0 14
106917: PUSH
106918: LD_INT 1
106920: ARRAY
106921: PPUSH
106922: CALL_OW 247
106926: PUSH
106927: LD_INT 3
106929: EQUAL
106930: PUSH
106931: LD_VAR 0 14
106935: PUSH
106936: LD_INT 1
106938: ARRAY
106939: PUSH
106940: LD_VAR 0 27
106944: IN
106945: NOT
106946: AND
106947: IFFALSE 107154
// begin x := GetX ( tmp [ 1 ] ) ;
106949: LD_ADDR_VAR 0 10
106953: PUSH
106954: LD_VAR 0 14
106958: PUSH
106959: LD_INT 1
106961: ARRAY
106962: PPUSH
106963: CALL_OW 250
106967: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
106968: LD_ADDR_VAR 0 11
106972: PUSH
106973: LD_VAR 0 14
106977: PUSH
106978: LD_INT 1
106980: ARRAY
106981: PPUSH
106982: CALL_OW 251
106986: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
106987: LD_ADDR_VAR 0 12
106991: PUSH
106992: LD_VAR 0 4
106996: PUSH
106997: LD_VAR 0 7
107001: ARRAY
107002: PPUSH
107003: CALL 51525 0 1
107007: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
107008: LD_VAR 0 4
107012: PUSH
107013: LD_VAR 0 7
107017: ARRAY
107018: PPUSH
107019: LD_VAR 0 10
107023: PPUSH
107024: LD_VAR 0 11
107028: PPUSH
107029: LD_VAR 0 14
107033: PUSH
107034: LD_INT 1
107036: ARRAY
107037: PPUSH
107038: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
107042: LD_VAR 0 4
107046: PUSH
107047: LD_VAR 0 7
107051: ARRAY
107052: PPUSH
107053: LD_VAR 0 10
107057: PPUSH
107058: LD_VAR 0 12
107062: PPUSH
107063: LD_INT 7
107065: PPUSH
107066: CALL_OW 272
107070: PPUSH
107071: LD_VAR 0 11
107075: PPUSH
107076: LD_VAR 0 12
107080: PPUSH
107081: LD_INT 7
107083: PPUSH
107084: CALL_OW 273
107088: PPUSH
107089: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
107093: LD_VAR 0 4
107097: PUSH
107098: LD_VAR 0 7
107102: ARRAY
107103: PPUSH
107104: LD_INT 71
107106: PPUSH
107107: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
107111: LD_ADDR_VAR 0 27
107115: PUSH
107116: LD_VAR 0 27
107120: PPUSH
107121: LD_VAR 0 27
107125: PUSH
107126: LD_INT 1
107128: PLUS
107129: PPUSH
107130: LD_VAR 0 14
107134: PUSH
107135: LD_INT 1
107137: ARRAY
107138: PPUSH
107139: CALL_OW 1
107143: ST_TO_ADDR
// attacking := true ;
107144: LD_ADDR_VAR 0 29
107148: PUSH
107149: LD_INT 1
107151: ST_TO_ADDR
// continue ;
107152: GO 104999
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
107154: LD_VAR 0 4
107158: PUSH
107159: LD_VAR 0 7
107163: ARRAY
107164: PPUSH
107165: CALL_OW 257
107169: PUSH
107170: LD_INT 17
107172: EQUAL
107173: PUSH
107174: LD_VAR 0 4
107178: PUSH
107179: LD_VAR 0 7
107183: ARRAY
107184: PPUSH
107185: CALL_OW 110
107189: PUSH
107190: LD_INT 71
107192: EQUAL
107193: NOT
107194: AND
107195: IFFALSE 107341
// begin attacking := false ;
107197: LD_ADDR_VAR 0 29
107201: PUSH
107202: LD_INT 0
107204: ST_TO_ADDR
// k := 5 ;
107205: LD_ADDR_VAR 0 9
107209: PUSH
107210: LD_INT 5
107212: ST_TO_ADDR
// if tmp < k then
107213: LD_VAR 0 14
107217: PUSH
107218: LD_VAR 0 9
107222: LESS
107223: IFFALSE 107235
// k := tmp ;
107225: LD_ADDR_VAR 0 9
107229: PUSH
107230: LD_VAR 0 14
107234: ST_TO_ADDR
// for j = 1 to k do
107235: LD_ADDR_VAR 0 8
107239: PUSH
107240: DOUBLE
107241: LD_INT 1
107243: DEC
107244: ST_TO_ADDR
107245: LD_VAR 0 9
107249: PUSH
107250: FOR_TO
107251: IFFALSE 107339
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
107253: LD_VAR 0 14
107257: PUSH
107258: LD_VAR 0 8
107262: ARRAY
107263: PUSH
107264: LD_VAR 0 14
107268: PPUSH
107269: LD_INT 58
107271: PUSH
107272: EMPTY
107273: LIST
107274: PPUSH
107275: CALL_OW 72
107279: IN
107280: NOT
107281: IFFALSE 107337
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
107283: LD_VAR 0 4
107287: PUSH
107288: LD_VAR 0 7
107292: ARRAY
107293: PPUSH
107294: LD_VAR 0 14
107298: PUSH
107299: LD_VAR 0 8
107303: ARRAY
107304: PPUSH
107305: CALL_OW 115
// attacking := true ;
107309: LD_ADDR_VAR 0 29
107313: PUSH
107314: LD_INT 1
107316: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
107317: LD_VAR 0 4
107321: PUSH
107322: LD_VAR 0 7
107326: ARRAY
107327: PPUSH
107328: LD_INT 71
107330: PPUSH
107331: CALL_OW 109
// continue ;
107335: GO 107250
// end ; end ;
107337: GO 107250
107339: POP
107340: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
107341: LD_VAR 0 4
107345: PUSH
107346: LD_VAR 0 7
107350: ARRAY
107351: PPUSH
107352: CALL_OW 257
107356: PUSH
107357: LD_INT 8
107359: EQUAL
107360: PUSH
107361: LD_VAR 0 4
107365: PUSH
107366: LD_VAR 0 7
107370: ARRAY
107371: PPUSH
107372: CALL_OW 264
107376: PUSH
107377: LD_INT 28
107379: PUSH
107380: LD_INT 45
107382: PUSH
107383: LD_INT 7
107385: PUSH
107386: LD_INT 47
107388: PUSH
107389: EMPTY
107390: LIST
107391: LIST
107392: LIST
107393: LIST
107394: IN
107395: OR
107396: IFFALSE 107652
// begin attacking := false ;
107398: LD_ADDR_VAR 0 29
107402: PUSH
107403: LD_INT 0
107405: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
107406: LD_VAR 0 14
107410: PUSH
107411: LD_INT 1
107413: ARRAY
107414: PPUSH
107415: CALL_OW 266
107419: PUSH
107420: LD_INT 32
107422: PUSH
107423: LD_INT 31
107425: PUSH
107426: LD_INT 33
107428: PUSH
107429: LD_INT 4
107431: PUSH
107432: LD_INT 5
107434: PUSH
107435: EMPTY
107436: LIST
107437: LIST
107438: LIST
107439: LIST
107440: LIST
107441: IN
107442: IFFALSE 107628
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
107444: LD_ADDR_VAR 0 9
107448: PUSH
107449: LD_VAR 0 14
107453: PUSH
107454: LD_INT 1
107456: ARRAY
107457: PPUSH
107458: CALL_OW 266
107462: PPUSH
107463: LD_VAR 0 14
107467: PUSH
107468: LD_INT 1
107470: ARRAY
107471: PPUSH
107472: CALL_OW 250
107476: PPUSH
107477: LD_VAR 0 14
107481: PUSH
107482: LD_INT 1
107484: ARRAY
107485: PPUSH
107486: CALL_OW 251
107490: PPUSH
107491: LD_VAR 0 14
107495: PUSH
107496: LD_INT 1
107498: ARRAY
107499: PPUSH
107500: CALL_OW 254
107504: PPUSH
107505: LD_VAR 0 14
107509: PUSH
107510: LD_INT 1
107512: ARRAY
107513: PPUSH
107514: CALL_OW 248
107518: PPUSH
107519: LD_INT 0
107521: PPUSH
107522: CALL 32895 0 6
107526: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
107527: LD_ADDR_VAR 0 8
107531: PUSH
107532: LD_VAR 0 4
107536: PUSH
107537: LD_VAR 0 7
107541: ARRAY
107542: PPUSH
107543: LD_VAR 0 9
107547: PPUSH
107548: CALL 51565 0 2
107552: ST_TO_ADDR
// if j then
107553: LD_VAR 0 8
107557: IFFALSE 107626
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
107559: LD_VAR 0 8
107563: PUSH
107564: LD_INT 1
107566: ARRAY
107567: PPUSH
107568: LD_VAR 0 8
107572: PUSH
107573: LD_INT 2
107575: ARRAY
107576: PPUSH
107577: CALL_OW 488
107581: IFFALSE 107626
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
107583: LD_VAR 0 4
107587: PUSH
107588: LD_VAR 0 7
107592: ARRAY
107593: PPUSH
107594: LD_VAR 0 8
107598: PUSH
107599: LD_INT 1
107601: ARRAY
107602: PPUSH
107603: LD_VAR 0 8
107607: PUSH
107608: LD_INT 2
107610: ARRAY
107611: PPUSH
107612: CALL_OW 116
// attacking := true ;
107616: LD_ADDR_VAR 0 29
107620: PUSH
107621: LD_INT 1
107623: ST_TO_ADDR
// continue ;
107624: GO 104999
// end ; end else
107626: GO 107652
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
107628: LD_VAR 0 4
107632: PUSH
107633: LD_VAR 0 7
107637: ARRAY
107638: PPUSH
107639: LD_VAR 0 14
107643: PUSH
107644: LD_INT 1
107646: ARRAY
107647: PPUSH
107648: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
107652: LD_VAR 0 4
107656: PUSH
107657: LD_VAR 0 7
107661: ARRAY
107662: PPUSH
107663: CALL_OW 265
107667: PUSH
107668: LD_INT 11
107670: EQUAL
107671: IFFALSE 107949
// begin k := 10 ;
107673: LD_ADDR_VAR 0 9
107677: PUSH
107678: LD_INT 10
107680: ST_TO_ADDR
// x := 0 ;
107681: LD_ADDR_VAR 0 10
107685: PUSH
107686: LD_INT 0
107688: ST_TO_ADDR
// if tmp < k then
107689: LD_VAR 0 14
107693: PUSH
107694: LD_VAR 0 9
107698: LESS
107699: IFFALSE 107711
// k := tmp ;
107701: LD_ADDR_VAR 0 9
107705: PUSH
107706: LD_VAR 0 14
107710: ST_TO_ADDR
// for j = k downto 1 do
107711: LD_ADDR_VAR 0 8
107715: PUSH
107716: DOUBLE
107717: LD_VAR 0 9
107721: INC
107722: ST_TO_ADDR
107723: LD_INT 1
107725: PUSH
107726: FOR_DOWNTO
107727: IFFALSE 107802
// begin if GetType ( tmp [ j ] ) = unit_human then
107729: LD_VAR 0 14
107733: PUSH
107734: LD_VAR 0 8
107738: ARRAY
107739: PPUSH
107740: CALL_OW 247
107744: PUSH
107745: LD_INT 1
107747: EQUAL
107748: IFFALSE 107800
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
107750: LD_VAR 0 4
107754: PUSH
107755: LD_VAR 0 7
107759: ARRAY
107760: PPUSH
107761: LD_VAR 0 14
107765: PUSH
107766: LD_VAR 0 8
107770: ARRAY
107771: PPUSH
107772: CALL 51836 0 2
// x := tmp [ j ] ;
107776: LD_ADDR_VAR 0 10
107780: PUSH
107781: LD_VAR 0 14
107785: PUSH
107786: LD_VAR 0 8
107790: ARRAY
107791: ST_TO_ADDR
// attacking := true ;
107792: LD_ADDR_VAR 0 29
107796: PUSH
107797: LD_INT 1
107799: ST_TO_ADDR
// end ; end ;
107800: GO 107726
107802: POP
107803: POP
// if not x then
107804: LD_VAR 0 10
107808: NOT
107809: IFFALSE 107949
// begin attacking := true ;
107811: LD_ADDR_VAR 0 29
107815: PUSH
107816: LD_INT 1
107818: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
107819: LD_VAR 0 4
107823: PUSH
107824: LD_VAR 0 7
107828: ARRAY
107829: PPUSH
107830: CALL_OW 250
107834: PPUSH
107835: LD_VAR 0 4
107839: PUSH
107840: LD_VAR 0 7
107844: ARRAY
107845: PPUSH
107846: CALL_OW 251
107850: PPUSH
107851: CALL_OW 546
107855: PUSH
107856: LD_INT 2
107858: ARRAY
107859: PUSH
107860: LD_VAR 0 14
107864: PUSH
107865: LD_INT 1
107867: ARRAY
107868: PPUSH
107869: CALL_OW 250
107873: PPUSH
107874: LD_VAR 0 14
107878: PUSH
107879: LD_INT 1
107881: ARRAY
107882: PPUSH
107883: CALL_OW 251
107887: PPUSH
107888: CALL_OW 546
107892: PUSH
107893: LD_INT 2
107895: ARRAY
107896: EQUAL
107897: IFFALSE 107925
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
107899: LD_VAR 0 4
107903: PUSH
107904: LD_VAR 0 7
107908: ARRAY
107909: PPUSH
107910: LD_VAR 0 14
107914: PUSH
107915: LD_INT 1
107917: ARRAY
107918: PPUSH
107919: CALL 51836 0 2
107923: GO 107949
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
107925: LD_VAR 0 4
107929: PUSH
107930: LD_VAR 0 7
107934: ARRAY
107935: PPUSH
107936: LD_VAR 0 14
107940: PUSH
107941: LD_INT 1
107943: ARRAY
107944: PPUSH
107945: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
107949: LD_VAR 0 4
107953: PUSH
107954: LD_VAR 0 7
107958: ARRAY
107959: PPUSH
107960: CALL_OW 264
107964: PUSH
107965: LD_INT 29
107967: EQUAL
107968: IFFALSE 108334
// begin if WantsToAttack ( group [ i ] ) in bombed then
107970: LD_VAR 0 4
107974: PUSH
107975: LD_VAR 0 7
107979: ARRAY
107980: PPUSH
107981: CALL_OW 319
107985: PUSH
107986: LD_VAR 0 28
107990: IN
107991: IFFALSE 107995
// continue ;
107993: GO 104999
// k := 8 ;
107995: LD_ADDR_VAR 0 9
107999: PUSH
108000: LD_INT 8
108002: ST_TO_ADDR
// x := 0 ;
108003: LD_ADDR_VAR 0 10
108007: PUSH
108008: LD_INT 0
108010: ST_TO_ADDR
// if tmp < k then
108011: LD_VAR 0 14
108015: PUSH
108016: LD_VAR 0 9
108020: LESS
108021: IFFALSE 108033
// k := tmp ;
108023: LD_ADDR_VAR 0 9
108027: PUSH
108028: LD_VAR 0 14
108032: ST_TO_ADDR
// for j = 1 to k do
108033: LD_ADDR_VAR 0 8
108037: PUSH
108038: DOUBLE
108039: LD_INT 1
108041: DEC
108042: ST_TO_ADDR
108043: LD_VAR 0 9
108047: PUSH
108048: FOR_TO
108049: IFFALSE 108181
// begin if GetType ( tmp [ j ] ) = unit_building then
108051: LD_VAR 0 14
108055: PUSH
108056: LD_VAR 0 8
108060: ARRAY
108061: PPUSH
108062: CALL_OW 247
108066: PUSH
108067: LD_INT 3
108069: EQUAL
108070: IFFALSE 108179
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
108072: LD_VAR 0 14
108076: PUSH
108077: LD_VAR 0 8
108081: ARRAY
108082: PUSH
108083: LD_VAR 0 28
108087: IN
108088: NOT
108089: PUSH
108090: LD_VAR 0 14
108094: PUSH
108095: LD_VAR 0 8
108099: ARRAY
108100: PPUSH
108101: CALL_OW 313
108105: AND
108106: IFFALSE 108179
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
108108: LD_VAR 0 4
108112: PUSH
108113: LD_VAR 0 7
108117: ARRAY
108118: PPUSH
108119: LD_VAR 0 14
108123: PUSH
108124: LD_VAR 0 8
108128: ARRAY
108129: PPUSH
108130: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
108134: LD_ADDR_VAR 0 28
108138: PUSH
108139: LD_VAR 0 28
108143: PPUSH
108144: LD_VAR 0 28
108148: PUSH
108149: LD_INT 1
108151: PLUS
108152: PPUSH
108153: LD_VAR 0 14
108157: PUSH
108158: LD_VAR 0 8
108162: ARRAY
108163: PPUSH
108164: CALL_OW 1
108168: ST_TO_ADDR
// attacking := true ;
108169: LD_ADDR_VAR 0 29
108173: PUSH
108174: LD_INT 1
108176: ST_TO_ADDR
// break ;
108177: GO 108181
// end ; end ;
108179: GO 108048
108181: POP
108182: POP
// if not attacking and f_attack_depot then
108183: LD_VAR 0 29
108187: NOT
108188: PUSH
108189: LD_VAR 0 25
108193: AND
108194: IFFALSE 108289
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
108196: LD_ADDR_VAR 0 13
108200: PUSH
108201: LD_VAR 0 14
108205: PPUSH
108206: LD_INT 2
108208: PUSH
108209: LD_INT 30
108211: PUSH
108212: LD_INT 0
108214: PUSH
108215: EMPTY
108216: LIST
108217: LIST
108218: PUSH
108219: LD_INT 30
108221: PUSH
108222: LD_INT 1
108224: PUSH
108225: EMPTY
108226: LIST
108227: LIST
108228: PUSH
108229: EMPTY
108230: LIST
108231: LIST
108232: LIST
108233: PPUSH
108234: CALL_OW 72
108238: ST_TO_ADDR
// if z then
108239: LD_VAR 0 13
108243: IFFALSE 108289
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
108245: LD_VAR 0 4
108249: PUSH
108250: LD_VAR 0 7
108254: ARRAY
108255: PPUSH
108256: LD_VAR 0 13
108260: PPUSH
108261: LD_VAR 0 4
108265: PUSH
108266: LD_VAR 0 7
108270: ARRAY
108271: PPUSH
108272: CALL_OW 74
108276: PPUSH
108277: CALL_OW 115
// attacking := true ;
108281: LD_ADDR_VAR 0 29
108285: PUSH
108286: LD_INT 1
108288: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
108289: LD_VAR 0 4
108293: PUSH
108294: LD_VAR 0 7
108298: ARRAY
108299: PPUSH
108300: CALL_OW 256
108304: PUSH
108305: LD_INT 500
108307: LESS
108308: IFFALSE 108334
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
108310: LD_VAR 0 4
108314: PUSH
108315: LD_VAR 0 7
108319: ARRAY
108320: PPUSH
108321: LD_VAR 0 14
108325: PUSH
108326: LD_INT 1
108328: ARRAY
108329: PPUSH
108330: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
108334: LD_VAR 0 4
108338: PUSH
108339: LD_VAR 0 7
108343: ARRAY
108344: PPUSH
108345: CALL_OW 264
108349: PUSH
108350: LD_INT 49
108352: EQUAL
108353: IFFALSE 108474
// begin if not HasTask ( group [ i ] ) then
108355: LD_VAR 0 4
108359: PUSH
108360: LD_VAR 0 7
108364: ARRAY
108365: PPUSH
108366: CALL_OW 314
108370: NOT
108371: IFFALSE 108474
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
108373: LD_ADDR_VAR 0 9
108377: PUSH
108378: LD_INT 81
108380: PUSH
108381: LD_VAR 0 4
108385: PUSH
108386: LD_VAR 0 7
108390: ARRAY
108391: PPUSH
108392: CALL_OW 255
108396: PUSH
108397: EMPTY
108398: LIST
108399: LIST
108400: PPUSH
108401: CALL_OW 69
108405: PPUSH
108406: LD_VAR 0 4
108410: PUSH
108411: LD_VAR 0 7
108415: ARRAY
108416: PPUSH
108417: CALL_OW 74
108421: ST_TO_ADDR
// if k then
108422: LD_VAR 0 9
108426: IFFALSE 108474
// if GetDistUnits ( group [ i ] , k ) > 10 then
108428: LD_VAR 0 4
108432: PUSH
108433: LD_VAR 0 7
108437: ARRAY
108438: PPUSH
108439: LD_VAR 0 9
108443: PPUSH
108444: CALL_OW 296
108448: PUSH
108449: LD_INT 10
108451: GREATER
108452: IFFALSE 108474
// ComMoveUnit ( group [ i ] , k ) ;
108454: LD_VAR 0 4
108458: PUSH
108459: LD_VAR 0 7
108463: ARRAY
108464: PPUSH
108465: LD_VAR 0 9
108469: PPUSH
108470: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
108474: LD_VAR 0 4
108478: PUSH
108479: LD_VAR 0 7
108483: ARRAY
108484: PPUSH
108485: CALL_OW 256
108489: PUSH
108490: LD_INT 250
108492: LESS
108493: PUSH
108494: LD_VAR 0 4
108498: PUSH
108499: LD_VAR 0 7
108503: ARRAY
108504: PUSH
108505: LD_INT 21
108507: PUSH
108508: LD_INT 2
108510: PUSH
108511: EMPTY
108512: LIST
108513: LIST
108514: PUSH
108515: LD_INT 23
108517: PUSH
108518: LD_INT 2
108520: PUSH
108521: EMPTY
108522: LIST
108523: LIST
108524: PUSH
108525: EMPTY
108526: LIST
108527: LIST
108528: PPUSH
108529: CALL_OW 69
108533: IN
108534: AND
108535: IFFALSE 108660
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
108537: LD_ADDR_VAR 0 9
108541: PUSH
108542: LD_OWVAR 3
108546: PUSH
108547: LD_VAR 0 4
108551: PUSH
108552: LD_VAR 0 7
108556: ARRAY
108557: DIFF
108558: PPUSH
108559: LD_VAR 0 4
108563: PUSH
108564: LD_VAR 0 7
108568: ARRAY
108569: PPUSH
108570: CALL_OW 74
108574: ST_TO_ADDR
// if not k then
108575: LD_VAR 0 9
108579: NOT
108580: IFFALSE 108584
// continue ;
108582: GO 104999
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
108584: LD_VAR 0 9
108588: PUSH
108589: LD_INT 81
108591: PUSH
108592: LD_VAR 0 4
108596: PUSH
108597: LD_VAR 0 7
108601: ARRAY
108602: PPUSH
108603: CALL_OW 255
108607: PUSH
108608: EMPTY
108609: LIST
108610: LIST
108611: PPUSH
108612: CALL_OW 69
108616: IN
108617: PUSH
108618: LD_VAR 0 9
108622: PPUSH
108623: LD_VAR 0 4
108627: PUSH
108628: LD_VAR 0 7
108632: ARRAY
108633: PPUSH
108634: CALL_OW 296
108638: PUSH
108639: LD_INT 5
108641: LESS
108642: AND
108643: IFFALSE 108660
// ComAutodestruct ( group [ i ] ) ;
108645: LD_VAR 0 4
108649: PUSH
108650: LD_VAR 0 7
108654: ARRAY
108655: PPUSH
108656: CALL 51734 0 1
// end ; if f_attack_depot then
108660: LD_VAR 0 25
108664: IFFALSE 108776
// begin k := 6 ;
108666: LD_ADDR_VAR 0 9
108670: PUSH
108671: LD_INT 6
108673: ST_TO_ADDR
// if tmp < k then
108674: LD_VAR 0 14
108678: PUSH
108679: LD_VAR 0 9
108683: LESS
108684: IFFALSE 108696
// k := tmp ;
108686: LD_ADDR_VAR 0 9
108690: PUSH
108691: LD_VAR 0 14
108695: ST_TO_ADDR
// for j = 1 to k do
108696: LD_ADDR_VAR 0 8
108700: PUSH
108701: DOUBLE
108702: LD_INT 1
108704: DEC
108705: ST_TO_ADDR
108706: LD_VAR 0 9
108710: PUSH
108711: FOR_TO
108712: IFFALSE 108774
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
108714: LD_VAR 0 8
108718: PPUSH
108719: CALL_OW 266
108723: PUSH
108724: LD_INT 0
108726: PUSH
108727: LD_INT 1
108729: PUSH
108730: EMPTY
108731: LIST
108732: LIST
108733: IN
108734: IFFALSE 108772
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
108736: LD_VAR 0 4
108740: PUSH
108741: LD_VAR 0 7
108745: ARRAY
108746: PPUSH
108747: LD_VAR 0 14
108751: PUSH
108752: LD_VAR 0 8
108756: ARRAY
108757: PPUSH
108758: CALL_OW 115
// attacking := true ;
108762: LD_ADDR_VAR 0 29
108766: PUSH
108767: LD_INT 1
108769: ST_TO_ADDR
// break ;
108770: GO 108774
// end ;
108772: GO 108711
108774: POP
108775: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
108776: LD_VAR 0 4
108780: PUSH
108781: LD_VAR 0 7
108785: ARRAY
108786: PPUSH
108787: CALL_OW 302
108791: PUSH
108792: LD_VAR 0 29
108796: NOT
108797: AND
108798: IFFALSE 109120
// begin if GetTag ( group [ i ] ) = 71 then
108800: LD_VAR 0 4
108804: PUSH
108805: LD_VAR 0 7
108809: ARRAY
108810: PPUSH
108811: CALL_OW 110
108815: PUSH
108816: LD_INT 71
108818: EQUAL
108819: IFFALSE 108860
// begin if HasTask ( group [ i ] ) then
108821: LD_VAR 0 4
108825: PUSH
108826: LD_VAR 0 7
108830: ARRAY
108831: PPUSH
108832: CALL_OW 314
108836: IFFALSE 108842
// continue else
108838: GO 104999
108840: GO 108860
// SetTag ( group [ i ] , 0 ) ;
108842: LD_VAR 0 4
108846: PUSH
108847: LD_VAR 0 7
108851: ARRAY
108852: PPUSH
108853: LD_INT 0
108855: PPUSH
108856: CALL_OW 109
// end ; k := 8 ;
108860: LD_ADDR_VAR 0 9
108864: PUSH
108865: LD_INT 8
108867: ST_TO_ADDR
// x := 0 ;
108868: LD_ADDR_VAR 0 10
108872: PUSH
108873: LD_INT 0
108875: ST_TO_ADDR
// if tmp < k then
108876: LD_VAR 0 14
108880: PUSH
108881: LD_VAR 0 9
108885: LESS
108886: IFFALSE 108898
// k := tmp ;
108888: LD_ADDR_VAR 0 9
108892: PUSH
108893: LD_VAR 0 14
108897: ST_TO_ADDR
// for j = 1 to k do
108898: LD_ADDR_VAR 0 8
108902: PUSH
108903: DOUBLE
108904: LD_INT 1
108906: DEC
108907: ST_TO_ADDR
108908: LD_VAR 0 9
108912: PUSH
108913: FOR_TO
108914: IFFALSE 109012
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
108916: LD_VAR 0 14
108920: PUSH
108921: LD_VAR 0 8
108925: ARRAY
108926: PPUSH
108927: CALL_OW 247
108931: PUSH
108932: LD_INT 1
108934: EQUAL
108935: PUSH
108936: LD_VAR 0 14
108940: PUSH
108941: LD_VAR 0 8
108945: ARRAY
108946: PPUSH
108947: CALL_OW 256
108951: PUSH
108952: LD_INT 250
108954: LESS
108955: PUSH
108956: LD_VAR 0 20
108960: AND
108961: PUSH
108962: LD_VAR 0 20
108966: NOT
108967: PUSH
108968: LD_VAR 0 14
108972: PUSH
108973: LD_VAR 0 8
108977: ARRAY
108978: PPUSH
108979: CALL_OW 256
108983: PUSH
108984: LD_INT 250
108986: GREATEREQUAL
108987: AND
108988: OR
108989: AND
108990: IFFALSE 109010
// begin x := tmp [ j ] ;
108992: LD_ADDR_VAR 0 10
108996: PUSH
108997: LD_VAR 0 14
109001: PUSH
109002: LD_VAR 0 8
109006: ARRAY
109007: ST_TO_ADDR
// break ;
109008: GO 109012
// end ;
109010: GO 108913
109012: POP
109013: POP
// if x then
109014: LD_VAR 0 10
109018: IFFALSE 109042
// ComAttackUnit ( group [ i ] , x ) else
109020: LD_VAR 0 4
109024: PUSH
109025: LD_VAR 0 7
109029: ARRAY
109030: PPUSH
109031: LD_VAR 0 10
109035: PPUSH
109036: CALL_OW 115
109040: GO 109066
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
109042: LD_VAR 0 4
109046: PUSH
109047: LD_VAR 0 7
109051: ARRAY
109052: PPUSH
109053: LD_VAR 0 14
109057: PUSH
109058: LD_INT 1
109060: ARRAY
109061: PPUSH
109062: CALL_OW 115
// if not HasTask ( group [ i ] ) then
109066: LD_VAR 0 4
109070: PUSH
109071: LD_VAR 0 7
109075: ARRAY
109076: PPUSH
109077: CALL_OW 314
109081: NOT
109082: IFFALSE 109120
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
109084: LD_VAR 0 4
109088: PUSH
109089: LD_VAR 0 7
109093: ARRAY
109094: PPUSH
109095: LD_VAR 0 14
109099: PPUSH
109100: LD_VAR 0 4
109104: PUSH
109105: LD_VAR 0 7
109109: ARRAY
109110: PPUSH
109111: CALL_OW 74
109115: PPUSH
109116: CALL_OW 115
// end ; end ; end ;
109120: GO 104999
109122: POP
109123: POP
// wait ( 0 0$2 ) ;
109124: LD_INT 70
109126: PPUSH
109127: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
109131: LD_VAR 0 4
109135: NOT
109136: PUSH
109137: LD_VAR 0 4
109141: PUSH
109142: EMPTY
109143: EQUAL
109144: OR
109145: PUSH
109146: LD_INT 81
109148: PUSH
109149: LD_VAR 0 35
109153: PUSH
109154: EMPTY
109155: LIST
109156: LIST
109157: PPUSH
109158: CALL_OW 69
109162: NOT
109163: OR
109164: IFFALSE 104984
// end ;
109166: LD_VAR 0 2
109170: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
109171: LD_INT 0
109173: PPUSH
109174: PPUSH
109175: PPUSH
109176: PPUSH
109177: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
109178: LD_VAR 0 1
109182: NOT
109183: PUSH
109184: LD_EXP 47
109188: PUSH
109189: LD_VAR 0 1
109193: ARRAY
109194: NOT
109195: OR
109196: PUSH
109197: LD_VAR 0 2
109201: NOT
109202: OR
109203: PUSH
109204: LD_VAR 0 3
109208: NOT
109209: OR
109210: IFFALSE 109214
// exit ;
109212: GO 109727
// side := mc_sides [ base ] ;
109214: LD_ADDR_VAR 0 6
109218: PUSH
109219: LD_EXP 73
109223: PUSH
109224: LD_VAR 0 1
109228: ARRAY
109229: ST_TO_ADDR
// if not side then
109230: LD_VAR 0 6
109234: NOT
109235: IFFALSE 109239
// exit ;
109237: GO 109727
// for i in solds do
109239: LD_ADDR_VAR 0 7
109243: PUSH
109244: LD_VAR 0 2
109248: PUSH
109249: FOR_IN
109250: IFFALSE 109311
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
109252: LD_VAR 0 7
109256: PPUSH
109257: CALL_OW 310
109261: PPUSH
109262: CALL_OW 266
109266: PUSH
109267: LD_INT 32
109269: PUSH
109270: LD_INT 31
109272: PUSH
109273: EMPTY
109274: LIST
109275: LIST
109276: IN
109277: IFFALSE 109297
// solds := solds diff i else
109279: LD_ADDR_VAR 0 2
109283: PUSH
109284: LD_VAR 0 2
109288: PUSH
109289: LD_VAR 0 7
109293: DIFF
109294: ST_TO_ADDR
109295: GO 109309
// SetTag ( i , 18 ) ;
109297: LD_VAR 0 7
109301: PPUSH
109302: LD_INT 18
109304: PPUSH
109305: CALL_OW 109
109309: GO 109249
109311: POP
109312: POP
// if not solds then
109313: LD_VAR 0 2
109317: NOT
109318: IFFALSE 109322
// exit ;
109320: GO 109727
// repeat wait ( 0 0$2 ) ;
109322: LD_INT 70
109324: PPUSH
109325: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
109329: LD_ADDR_VAR 0 5
109333: PUSH
109334: LD_VAR 0 6
109338: PPUSH
109339: LD_VAR 0 3
109343: PPUSH
109344: CALL 21116 0 2
109348: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
109349: LD_EXP 47
109353: PUSH
109354: LD_VAR 0 1
109358: ARRAY
109359: NOT
109360: PUSH
109361: LD_EXP 47
109365: PUSH
109366: LD_VAR 0 1
109370: ARRAY
109371: PUSH
109372: EMPTY
109373: EQUAL
109374: OR
109375: IFFALSE 109412
// begin for i in solds do
109377: LD_ADDR_VAR 0 7
109381: PUSH
109382: LD_VAR 0 2
109386: PUSH
109387: FOR_IN
109388: IFFALSE 109401
// ComStop ( i ) ;
109390: LD_VAR 0 7
109394: PPUSH
109395: CALL_OW 141
109399: GO 109387
109401: POP
109402: POP
// solds := [ ] ;
109403: LD_ADDR_VAR 0 2
109407: PUSH
109408: EMPTY
109409: ST_TO_ADDR
// exit ;
109410: GO 109727
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
109412: LD_VAR 0 5
109416: NOT
109417: PUSH
109418: LD_VAR 0 5
109422: PUSH
109423: LD_INT 3
109425: GREATER
109426: OR
109427: PUSH
109428: LD_EXP 69
109432: PUSH
109433: LD_VAR 0 1
109437: ARRAY
109438: OR
109439: IFFALSE 109480
// begin for i in solds do
109441: LD_ADDR_VAR 0 7
109445: PUSH
109446: LD_VAR 0 2
109450: PUSH
109451: FOR_IN
109452: IFFALSE 109476
// if HasTask ( i ) then
109454: LD_VAR 0 7
109458: PPUSH
109459: CALL_OW 314
109463: IFFALSE 109474
// ComStop ( i ) ;
109465: LD_VAR 0 7
109469: PPUSH
109470: CALL_OW 141
109474: GO 109451
109476: POP
109477: POP
// break ;
109478: GO 109715
// end ; for i in solds do
109480: LD_ADDR_VAR 0 7
109484: PUSH
109485: LD_VAR 0 2
109489: PUSH
109490: FOR_IN
109491: IFFALSE 109707
// begin if IsInUnit ( i ) then
109493: LD_VAR 0 7
109497: PPUSH
109498: CALL_OW 310
109502: IFFALSE 109513
// ComExitBuilding ( i ) ;
109504: LD_VAR 0 7
109508: PPUSH
109509: CALL_OW 122
// if GetLives ( i ) > 333 then
109513: LD_VAR 0 7
109517: PPUSH
109518: CALL_OW 256
109522: PUSH
109523: LD_INT 333
109525: GREATER
109526: IFFALSE 109554
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
109528: LD_VAR 0 7
109532: PPUSH
109533: LD_VAR 0 5
109537: PPUSH
109538: LD_VAR 0 7
109542: PPUSH
109543: CALL_OW 74
109547: PPUSH
109548: CALL_OW 115
109552: GO 109705
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
109554: LD_ADDR_VAR 0 8
109558: PUSH
109559: LD_EXP 47
109563: PUSH
109564: LD_VAR 0 1
109568: ARRAY
109569: PPUSH
109570: LD_INT 2
109572: PUSH
109573: LD_INT 30
109575: PUSH
109576: LD_INT 0
109578: PUSH
109579: EMPTY
109580: LIST
109581: LIST
109582: PUSH
109583: LD_INT 30
109585: PUSH
109586: LD_INT 1
109588: PUSH
109589: EMPTY
109590: LIST
109591: LIST
109592: PUSH
109593: LD_INT 30
109595: PUSH
109596: LD_INT 6
109598: PUSH
109599: EMPTY
109600: LIST
109601: LIST
109602: PUSH
109603: EMPTY
109604: LIST
109605: LIST
109606: LIST
109607: LIST
109608: PPUSH
109609: CALL_OW 72
109613: PPUSH
109614: LD_VAR 0 7
109618: PPUSH
109619: CALL_OW 74
109623: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
109624: LD_VAR 0 7
109628: PPUSH
109629: LD_VAR 0 8
109633: PPUSH
109634: CALL_OW 250
109638: PPUSH
109639: LD_INT 3
109641: PPUSH
109642: LD_INT 5
109644: PPUSH
109645: CALL_OW 272
109649: PPUSH
109650: LD_VAR 0 8
109654: PPUSH
109655: CALL_OW 251
109659: PPUSH
109660: LD_INT 3
109662: PPUSH
109663: LD_INT 5
109665: PPUSH
109666: CALL_OW 273
109670: PPUSH
109671: CALL_OW 111
// SetTag ( i , 0 ) ;
109675: LD_VAR 0 7
109679: PPUSH
109680: LD_INT 0
109682: PPUSH
109683: CALL_OW 109
// solds := solds diff i ;
109687: LD_ADDR_VAR 0 2
109691: PUSH
109692: LD_VAR 0 2
109696: PUSH
109697: LD_VAR 0 7
109701: DIFF
109702: ST_TO_ADDR
// continue ;
109703: GO 109490
// end ; end ;
109705: GO 109490
109707: POP
109708: POP
// until solds ;
109709: LD_VAR 0 2
109713: IFFALSE 109322
// MC_Reset ( base , 18 ) ;
109715: LD_VAR 0 1
109719: PPUSH
109720: LD_INT 18
109722: PPUSH
109723: CALL 61247 0 2
// end ;
109727: LD_VAR 0 4
109731: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
109732: LD_INT 0
109734: PPUSH
109735: PPUSH
109736: PPUSH
109737: PPUSH
109738: PPUSH
109739: PPUSH
109740: PPUSH
109741: PPUSH
109742: PPUSH
109743: PPUSH
109744: PPUSH
109745: PPUSH
109746: PPUSH
109747: PPUSH
109748: PPUSH
109749: PPUSH
109750: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
109751: LD_ADDR_VAR 0 13
109755: PUSH
109756: LD_EXP 47
109760: PUSH
109761: LD_VAR 0 1
109765: ARRAY
109766: PPUSH
109767: LD_INT 25
109769: PUSH
109770: LD_INT 3
109772: PUSH
109773: EMPTY
109774: LIST
109775: LIST
109776: PPUSH
109777: CALL_OW 72
109781: ST_TO_ADDR
// if mc_remote_driver [ base ] then
109782: LD_EXP 87
109786: PUSH
109787: LD_VAR 0 1
109791: ARRAY
109792: IFFALSE 109816
// mechs := mechs diff mc_remote_driver [ base ] ;
109794: LD_ADDR_VAR 0 13
109798: PUSH
109799: LD_VAR 0 13
109803: PUSH
109804: LD_EXP 87
109808: PUSH
109809: LD_VAR 0 1
109813: ARRAY
109814: DIFF
109815: ST_TO_ADDR
// for i in mechs do
109816: LD_ADDR_VAR 0 5
109820: PUSH
109821: LD_VAR 0 13
109825: PUSH
109826: FOR_IN
109827: IFFALSE 109862
// if GetTag ( i ) > 0 then
109829: LD_VAR 0 5
109833: PPUSH
109834: CALL_OW 110
109838: PUSH
109839: LD_INT 0
109841: GREATER
109842: IFFALSE 109860
// mechs := mechs diff i ;
109844: LD_ADDR_VAR 0 13
109848: PUSH
109849: LD_VAR 0 13
109853: PUSH
109854: LD_VAR 0 5
109858: DIFF
109859: ST_TO_ADDR
109860: GO 109826
109862: POP
109863: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
109864: LD_ADDR_VAR 0 9
109868: PUSH
109869: LD_EXP 47
109873: PUSH
109874: LD_VAR 0 1
109878: ARRAY
109879: PPUSH
109880: LD_INT 2
109882: PUSH
109883: LD_INT 25
109885: PUSH
109886: LD_INT 1
109888: PUSH
109889: EMPTY
109890: LIST
109891: LIST
109892: PUSH
109893: LD_INT 25
109895: PUSH
109896: LD_INT 5
109898: PUSH
109899: EMPTY
109900: LIST
109901: LIST
109902: PUSH
109903: LD_INT 25
109905: PUSH
109906: LD_INT 8
109908: PUSH
109909: EMPTY
109910: LIST
109911: LIST
109912: PUSH
109913: LD_INT 25
109915: PUSH
109916: LD_INT 9
109918: PUSH
109919: EMPTY
109920: LIST
109921: LIST
109922: PUSH
109923: EMPTY
109924: LIST
109925: LIST
109926: LIST
109927: LIST
109928: LIST
109929: PPUSH
109930: CALL_OW 72
109934: ST_TO_ADDR
// if not defenders and not solds then
109935: LD_VAR 0 2
109939: NOT
109940: PUSH
109941: LD_VAR 0 9
109945: NOT
109946: AND
109947: IFFALSE 109951
// exit ;
109949: GO 111641
// depot_under_attack := false ;
109951: LD_ADDR_VAR 0 17
109955: PUSH
109956: LD_INT 0
109958: ST_TO_ADDR
// sold_defenders := [ ] ;
109959: LD_ADDR_VAR 0 18
109963: PUSH
109964: EMPTY
109965: ST_TO_ADDR
// if mechs then
109966: LD_VAR 0 13
109970: IFFALSE 110123
// for i in UnitFilter ( defenders , [ f_type , unit_vehicle ] ) do
109972: LD_ADDR_VAR 0 5
109976: PUSH
109977: LD_VAR 0 2
109981: PPUSH
109982: LD_INT 21
109984: PUSH
109985: LD_INT 2
109987: PUSH
109988: EMPTY
109989: LIST
109990: LIST
109991: PPUSH
109992: CALL_OW 72
109996: PUSH
109997: FOR_IN
109998: IFFALSE 110121
// begin if GetTag ( i ) <> 20 then
110000: LD_VAR 0 5
110004: PPUSH
110005: CALL_OW 110
110009: PUSH
110010: LD_INT 20
110012: NONEQUAL
110013: IFFALSE 110027
// SetTag ( i , 20 ) ;
110015: LD_VAR 0 5
110019: PPUSH
110020: LD_INT 20
110022: PPUSH
110023: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
110027: LD_VAR 0 5
110031: PPUSH
110032: CALL_OW 263
110036: PUSH
110037: LD_INT 1
110039: EQUAL
110040: PUSH
110041: LD_VAR 0 5
110045: PPUSH
110046: CALL_OW 311
110050: NOT
110051: AND
110052: IFFALSE 110119
// begin un := mechs [ 1 ] ;
110054: LD_ADDR_VAR 0 11
110058: PUSH
110059: LD_VAR 0 13
110063: PUSH
110064: LD_INT 1
110066: ARRAY
110067: ST_TO_ADDR
// ComExit ( un ) ;
110068: LD_VAR 0 11
110072: PPUSH
110073: CALL 56079 0 1
// AddComEnterUnit ( un , i ) ;
110077: LD_VAR 0 11
110081: PPUSH
110082: LD_VAR 0 5
110086: PPUSH
110087: CALL_OW 180
// SetTag ( un , 19 ) ;
110091: LD_VAR 0 11
110095: PPUSH
110096: LD_INT 19
110098: PPUSH
110099: CALL_OW 109
// mechs := mechs diff un ;
110103: LD_ADDR_VAR 0 13
110107: PUSH
110108: LD_VAR 0 13
110112: PUSH
110113: LD_VAR 0 11
110117: DIFF
110118: ST_TO_ADDR
// end ; end ;
110119: GO 109997
110121: POP
110122: POP
// if solds then
110123: LD_VAR 0 9
110127: IFFALSE 110186
// for i in solds do
110129: LD_ADDR_VAR 0 5
110133: PUSH
110134: LD_VAR 0 9
110138: PUSH
110139: FOR_IN
110140: IFFALSE 110184
// if not GetTag ( i ) then
110142: LD_VAR 0 5
110146: PPUSH
110147: CALL_OW 110
110151: NOT
110152: IFFALSE 110182
// begin defenders := defenders union i ;
110154: LD_ADDR_VAR 0 2
110158: PUSH
110159: LD_VAR 0 2
110163: PUSH
110164: LD_VAR 0 5
110168: UNION
110169: ST_TO_ADDR
// SetTag ( i , 18 ) ;
110170: LD_VAR 0 5
110174: PPUSH
110175: LD_INT 18
110177: PPUSH
110178: CALL_OW 109
// end ;
110182: GO 110139
110184: POP
110185: POP
// repeat wait ( 0 0$2 ) ;
110186: LD_INT 70
110188: PPUSH
110189: CALL_OW 67
// enemy := mc_scan [ base ] ;
110193: LD_ADDR_VAR 0 3
110197: PUSH
110198: LD_EXP 70
110202: PUSH
110203: LD_VAR 0 1
110207: ARRAY
110208: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
110209: LD_EXP 47
110213: PUSH
110214: LD_VAR 0 1
110218: ARRAY
110219: NOT
110220: PUSH
110221: LD_EXP 47
110225: PUSH
110226: LD_VAR 0 1
110230: ARRAY
110231: PUSH
110232: EMPTY
110233: EQUAL
110234: OR
110235: IFFALSE 110272
// begin for i in defenders do
110237: LD_ADDR_VAR 0 5
110241: PUSH
110242: LD_VAR 0 2
110246: PUSH
110247: FOR_IN
110248: IFFALSE 110261
// ComStop ( i ) ;
110250: LD_VAR 0 5
110254: PPUSH
110255: CALL_OW 141
110259: GO 110247
110261: POP
110262: POP
// defenders := [ ] ;
110263: LD_ADDR_VAR 0 2
110267: PUSH
110268: EMPTY
110269: ST_TO_ADDR
// exit ;
110270: GO 111641
// end ; for i in defenders do
110272: LD_ADDR_VAR 0 5
110276: PUSH
110277: LD_VAR 0 2
110281: PUSH
110282: FOR_IN
110283: IFFALSE 111101
// begin e := NearestUnitToUnit ( enemy , i ) ;
110285: LD_ADDR_VAR 0 14
110289: PUSH
110290: LD_VAR 0 3
110294: PPUSH
110295: LD_VAR 0 5
110299: PPUSH
110300: CALL_OW 74
110304: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
110305: LD_ADDR_VAR 0 8
110309: PUSH
110310: LD_EXP 47
110314: PUSH
110315: LD_VAR 0 1
110319: ARRAY
110320: PPUSH
110321: LD_INT 2
110323: PUSH
110324: LD_INT 30
110326: PUSH
110327: LD_INT 0
110329: PUSH
110330: EMPTY
110331: LIST
110332: LIST
110333: PUSH
110334: LD_INT 30
110336: PUSH
110337: LD_INT 1
110339: PUSH
110340: EMPTY
110341: LIST
110342: LIST
110343: PUSH
110344: EMPTY
110345: LIST
110346: LIST
110347: LIST
110348: PPUSH
110349: CALL_OW 72
110353: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
110354: LD_ADDR_VAR 0 17
110358: PUSH
110359: LD_VAR 0 8
110363: NOT
110364: PUSH
110365: LD_VAR 0 8
110369: PPUSH
110370: LD_INT 3
110372: PUSH
110373: LD_INT 24
110375: PUSH
110376: LD_INT 600
110378: PUSH
110379: EMPTY
110380: LIST
110381: LIST
110382: PUSH
110383: EMPTY
110384: LIST
110385: LIST
110386: PPUSH
110387: CALL_OW 72
110391: OR
110392: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
110393: LD_VAR 0 5
110397: PPUSH
110398: CALL_OW 247
110402: PUSH
110403: LD_INT 2
110405: DOUBLE
110406: EQUAL
110407: IFTRUE 110411
110409: GO 110807
110411: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
110412: LD_VAR 0 5
110416: PPUSH
110417: CALL_OW 256
110421: PUSH
110422: LD_INT 650
110424: GREATER
110425: PUSH
110426: LD_VAR 0 5
110430: PPUSH
110431: LD_VAR 0 14
110435: PPUSH
110436: CALL_OW 296
110440: PUSH
110441: LD_INT 40
110443: LESS
110444: PUSH
110445: LD_VAR 0 14
110449: PPUSH
110450: LD_EXP 72
110454: PUSH
110455: LD_VAR 0 1
110459: ARRAY
110460: PPUSH
110461: CALL_OW 308
110465: OR
110466: AND
110467: IFFALSE 110589
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
110469: LD_VAR 0 5
110473: PPUSH
110474: CALL_OW 262
110478: PUSH
110479: LD_INT 1
110481: EQUAL
110482: PUSH
110483: LD_VAR 0 5
110487: PPUSH
110488: CALL_OW 261
110492: PUSH
110493: LD_INT 30
110495: LESS
110496: AND
110497: PUSH
110498: LD_VAR 0 8
110502: AND
110503: IFFALSE 110573
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
110505: LD_VAR 0 5
110509: PPUSH
110510: LD_VAR 0 8
110514: PPUSH
110515: LD_VAR 0 5
110519: PPUSH
110520: CALL_OW 74
110524: PPUSH
110525: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
110529: LD_VAR 0 5
110533: PPUSH
110534: LD_VAR 0 8
110538: PPUSH
110539: LD_VAR 0 5
110543: PPUSH
110544: CALL_OW 74
110548: PPUSH
110549: CALL_OW 296
110553: PUSH
110554: LD_INT 6
110556: LESS
110557: IFFALSE 110571
// SetFuel ( i , 100 ) ;
110559: LD_VAR 0 5
110563: PPUSH
110564: LD_INT 100
110566: PPUSH
110567: CALL_OW 240
// end else
110571: GO 110587
// ComAttackUnit ( i , e ) ;
110573: LD_VAR 0 5
110577: PPUSH
110578: LD_VAR 0 14
110582: PPUSH
110583: CALL_OW 115
// end else
110587: GO 110690
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
110589: LD_VAR 0 14
110593: PPUSH
110594: LD_EXP 72
110598: PUSH
110599: LD_VAR 0 1
110603: ARRAY
110604: PPUSH
110605: CALL_OW 308
110609: NOT
110610: PUSH
110611: LD_VAR 0 5
110615: PPUSH
110616: LD_VAR 0 14
110620: PPUSH
110621: CALL_OW 296
110625: PUSH
110626: LD_INT 40
110628: GREATEREQUAL
110629: AND
110630: PUSH
110631: LD_VAR 0 5
110635: PPUSH
110636: CALL_OW 256
110640: PUSH
110641: LD_INT 650
110643: LESSEQUAL
110644: OR
110645: PUSH
110646: LD_VAR 0 5
110650: PPUSH
110651: LD_EXP 71
110655: PUSH
110656: LD_VAR 0 1
110660: ARRAY
110661: PPUSH
110662: CALL_OW 308
110666: NOT
110667: AND
110668: IFFALSE 110690
// ComMoveToArea ( i , mc_parking [ base ] ) ;
110670: LD_VAR 0 5
110674: PPUSH
110675: LD_EXP 71
110679: PUSH
110680: LD_VAR 0 1
110684: ARRAY
110685: PPUSH
110686: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
110690: LD_VAR 0 5
110694: PPUSH
110695: CALL_OW 256
110699: PUSH
110700: LD_INT 998
110702: LESS
110703: PUSH
110704: LD_VAR 0 5
110708: PPUSH
110709: CALL_OW 263
110713: PUSH
110714: LD_INT 1
110716: EQUAL
110717: AND
110718: PUSH
110719: LD_VAR 0 5
110723: PPUSH
110724: CALL_OW 311
110728: AND
110729: PUSH
110730: LD_VAR 0 5
110734: PPUSH
110735: LD_EXP 71
110739: PUSH
110740: LD_VAR 0 1
110744: ARRAY
110745: PPUSH
110746: CALL_OW 308
110750: AND
110751: IFFALSE 110805
// begin mech := IsDrivenBy ( i ) ;
110753: LD_ADDR_VAR 0 10
110757: PUSH
110758: LD_VAR 0 5
110762: PPUSH
110763: CALL_OW 311
110767: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
110768: LD_VAR 0 10
110772: PPUSH
110773: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
110777: LD_VAR 0 10
110781: PPUSH
110782: LD_VAR 0 5
110786: PPUSH
110787: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
110791: LD_VAR 0 10
110795: PPUSH
110796: LD_VAR 0 5
110800: PPUSH
110801: CALL_OW 180
// end ; end ; unit_human :
110805: GO 111072
110807: LD_INT 1
110809: DOUBLE
110810: EQUAL
110811: IFTRUE 110815
110813: GO 111071
110815: POP
// begin b := IsInUnit ( i ) ;
110816: LD_ADDR_VAR 0 19
110820: PUSH
110821: LD_VAR 0 5
110825: PPUSH
110826: CALL_OW 310
110830: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
110831: LD_ADDR_VAR 0 20
110835: PUSH
110836: LD_VAR 0 19
110840: NOT
110841: PUSH
110842: LD_VAR 0 19
110846: PPUSH
110847: CALL_OW 266
110851: PUSH
110852: LD_INT 32
110854: PUSH
110855: LD_INT 31
110857: PUSH
110858: EMPTY
110859: LIST
110860: LIST
110861: IN
110862: OR
110863: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
110864: LD_VAR 0 17
110868: PUSH
110869: LD_VAR 0 2
110873: PPUSH
110874: LD_INT 21
110876: PUSH
110877: LD_INT 2
110879: PUSH
110880: EMPTY
110881: LIST
110882: LIST
110883: PPUSH
110884: CALL_OW 72
110888: PUSH
110889: LD_INT 1
110891: LESSEQUAL
110892: OR
110893: PUSH
110894: LD_VAR 0 20
110898: AND
110899: PUSH
110900: LD_VAR 0 5
110904: PUSH
110905: LD_VAR 0 18
110909: IN
110910: NOT
110911: AND
110912: IFFALSE 111005
// begin if b then
110914: LD_VAR 0 19
110918: IFFALSE 110967
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
110920: LD_VAR 0 19
110924: PPUSH
110925: LD_VAR 0 3
110929: PPUSH
110930: LD_VAR 0 19
110934: PPUSH
110935: CALL_OW 74
110939: PPUSH
110940: CALL_OW 296
110944: PUSH
110945: LD_INT 10
110947: LESS
110948: PUSH
110949: LD_VAR 0 19
110953: PPUSH
110954: CALL_OW 461
110958: PUSH
110959: LD_INT 7
110961: NONEQUAL
110962: AND
110963: IFFALSE 110967
// continue ;
110965: GO 110282
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
110967: LD_ADDR_VAR 0 18
110971: PUSH
110972: LD_VAR 0 18
110976: PPUSH
110977: LD_VAR 0 18
110981: PUSH
110982: LD_INT 1
110984: PLUS
110985: PPUSH
110986: LD_VAR 0 5
110990: PPUSH
110991: CALL_OW 1
110995: ST_TO_ADDR
// ComExitBuilding ( i ) ;
110996: LD_VAR 0 5
111000: PPUSH
111001: CALL_OW 122
// end ; if sold_defenders then
111005: LD_VAR 0 18
111009: IFFALSE 111069
// if i in sold_defenders then
111011: LD_VAR 0 5
111015: PUSH
111016: LD_VAR 0 18
111020: IN
111021: IFFALSE 111069
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
111023: LD_VAR 0 5
111027: PPUSH
111028: CALL_OW 314
111032: NOT
111033: PUSH
111034: LD_VAR 0 5
111038: PPUSH
111039: LD_VAR 0 14
111043: PPUSH
111044: CALL_OW 296
111048: PUSH
111049: LD_INT 30
111051: LESS
111052: AND
111053: IFFALSE 111069
// ComAttackUnit ( i , e ) ;
111055: LD_VAR 0 5
111059: PPUSH
111060: LD_VAR 0 14
111064: PPUSH
111065: CALL_OW 115
// end ; end ; end ;
111069: GO 111072
111071: POP
// if IsDead ( i ) then
111072: LD_VAR 0 5
111076: PPUSH
111077: CALL_OW 301
111081: IFFALSE 111099
// defenders := defenders diff i ;
111083: LD_ADDR_VAR 0 2
111087: PUSH
111088: LD_VAR 0 2
111092: PUSH
111093: LD_VAR 0 5
111097: DIFF
111098: ST_TO_ADDR
// end ;
111099: GO 110282
111101: POP
111102: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
111103: LD_VAR 0 3
111107: NOT
111108: PUSH
111109: LD_VAR 0 2
111113: NOT
111114: OR
111115: PUSH
111116: LD_EXP 47
111120: PUSH
111121: LD_VAR 0 1
111125: ARRAY
111126: NOT
111127: OR
111128: IFFALSE 110186
// MC_Reset ( base , 18 ) ;
111130: LD_VAR 0 1
111134: PPUSH
111135: LD_INT 18
111137: PPUSH
111138: CALL 61247 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
111142: LD_ADDR_VAR 0 2
111146: PUSH
111147: LD_VAR 0 2
111151: PUSH
111152: LD_VAR 0 2
111156: PPUSH
111157: LD_INT 2
111159: PUSH
111160: LD_INT 25
111162: PUSH
111163: LD_INT 1
111165: PUSH
111166: EMPTY
111167: LIST
111168: LIST
111169: PUSH
111170: LD_INT 25
111172: PUSH
111173: LD_INT 5
111175: PUSH
111176: EMPTY
111177: LIST
111178: LIST
111179: PUSH
111180: LD_INT 25
111182: PUSH
111183: LD_INT 8
111185: PUSH
111186: EMPTY
111187: LIST
111188: LIST
111189: PUSH
111190: LD_INT 25
111192: PUSH
111193: LD_INT 9
111195: PUSH
111196: EMPTY
111197: LIST
111198: LIST
111199: PUSH
111200: EMPTY
111201: LIST
111202: LIST
111203: LIST
111204: LIST
111205: LIST
111206: PPUSH
111207: CALL_OW 72
111211: DIFF
111212: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
111213: LD_VAR 0 3
111217: NOT
111218: PUSH
111219: LD_VAR 0 2
111223: PPUSH
111224: LD_INT 21
111226: PUSH
111227: LD_INT 2
111229: PUSH
111230: EMPTY
111231: LIST
111232: LIST
111233: PPUSH
111234: CALL_OW 72
111238: AND
111239: IFFALSE 111577
// begin tmp := FilterByTag ( defenders , 19 ) ;
111241: LD_ADDR_VAR 0 12
111245: PUSH
111246: LD_VAR 0 2
111250: PPUSH
111251: LD_INT 19
111253: PPUSH
111254: CALL 53209 0 2
111258: ST_TO_ADDR
// if tmp then
111259: LD_VAR 0 12
111263: IFFALSE 111333
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
111265: LD_ADDR_VAR 0 12
111269: PUSH
111270: LD_VAR 0 12
111274: PPUSH
111275: LD_INT 25
111277: PUSH
111278: LD_INT 3
111280: PUSH
111281: EMPTY
111282: LIST
111283: LIST
111284: PPUSH
111285: CALL_OW 72
111289: ST_TO_ADDR
// if tmp then
111290: LD_VAR 0 12
111294: IFFALSE 111333
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
111296: LD_ADDR_EXP 59
111300: PUSH
111301: LD_EXP 59
111305: PPUSH
111306: LD_VAR 0 1
111310: PPUSH
111311: LD_EXP 59
111315: PUSH
111316: LD_VAR 0 1
111320: ARRAY
111321: PUSH
111322: LD_VAR 0 12
111326: UNION
111327: PPUSH
111328: CALL_OW 1
111332: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
111333: LD_VAR 0 1
111337: PPUSH
111338: LD_INT 19
111340: PPUSH
111341: CALL 61247 0 2
// repeat wait ( 0 0$1 ) ;
111345: LD_INT 35
111347: PPUSH
111348: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
111352: LD_EXP 47
111356: PUSH
111357: LD_VAR 0 1
111361: ARRAY
111362: NOT
111363: PUSH
111364: LD_EXP 47
111368: PUSH
111369: LD_VAR 0 1
111373: ARRAY
111374: PUSH
111375: EMPTY
111376: EQUAL
111377: OR
111378: IFFALSE 111415
// begin for i in defenders do
111380: LD_ADDR_VAR 0 5
111384: PUSH
111385: LD_VAR 0 2
111389: PUSH
111390: FOR_IN
111391: IFFALSE 111404
// ComStop ( i ) ;
111393: LD_VAR 0 5
111397: PPUSH
111398: CALL_OW 141
111402: GO 111390
111404: POP
111405: POP
// defenders := [ ] ;
111406: LD_ADDR_VAR 0 2
111410: PUSH
111411: EMPTY
111412: ST_TO_ADDR
// exit ;
111413: GO 111641
// end ; for i in defenders do
111415: LD_ADDR_VAR 0 5
111419: PUSH
111420: LD_VAR 0 2
111424: PUSH
111425: FOR_IN
111426: IFFALSE 111515
// begin if not IsInArea ( i , mc_parking [ base ] ) then
111428: LD_VAR 0 5
111432: PPUSH
111433: LD_EXP 71
111437: PUSH
111438: LD_VAR 0 1
111442: ARRAY
111443: PPUSH
111444: CALL_OW 308
111448: NOT
111449: IFFALSE 111473
// ComMoveToArea ( i , mc_parking [ base ] ) else
111451: LD_VAR 0 5
111455: PPUSH
111456: LD_EXP 71
111460: PUSH
111461: LD_VAR 0 1
111465: ARRAY
111466: PPUSH
111467: CALL_OW 113
111471: GO 111513
// if GetControl ( i ) = control_manual then
111473: LD_VAR 0 5
111477: PPUSH
111478: CALL_OW 263
111482: PUSH
111483: LD_INT 1
111485: EQUAL
111486: IFFALSE 111513
// if IsDrivenBy ( i ) then
111488: LD_VAR 0 5
111492: PPUSH
111493: CALL_OW 311
111497: IFFALSE 111513
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
111499: LD_VAR 0 5
111503: PPUSH
111504: CALL_OW 311
111508: PPUSH
111509: CALL_OW 121
// end ;
111513: GO 111425
111515: POP
111516: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
111517: LD_VAR 0 2
111521: PPUSH
111522: LD_INT 95
111524: PUSH
111525: LD_EXP 71
111529: PUSH
111530: LD_VAR 0 1
111534: ARRAY
111535: PUSH
111536: EMPTY
111537: LIST
111538: LIST
111539: PPUSH
111540: CALL_OW 72
111544: PUSH
111545: LD_VAR 0 2
111549: EQUAL
111550: PUSH
111551: LD_EXP 70
111555: PUSH
111556: LD_VAR 0 1
111560: ARRAY
111561: OR
111562: PUSH
111563: LD_EXP 47
111567: PUSH
111568: LD_VAR 0 1
111572: ARRAY
111573: NOT
111574: OR
111575: IFFALSE 111345
// end ; mc_defender := Replace ( mc_defender , base , UnitFilter ( defenders , [ f_type , unit_vehicle ] ) ) ;
111577: LD_ADDR_EXP 69
111581: PUSH
111582: LD_EXP 69
111586: PPUSH
111587: LD_VAR 0 1
111591: PPUSH
111592: LD_VAR 0 2
111596: PPUSH
111597: LD_INT 21
111599: PUSH
111600: LD_INT 2
111602: PUSH
111603: EMPTY
111604: LIST
111605: LIST
111606: PPUSH
111607: CALL_OW 72
111611: PPUSH
111612: CALL_OW 1
111616: ST_TO_ADDR
// MC_Reset ( base , 19 ) ;
111617: LD_VAR 0 1
111621: PPUSH
111622: LD_INT 19
111624: PPUSH
111625: CALL 61247 0 2
// MC_Reset ( base , 20 ) ;
111629: LD_VAR 0 1
111633: PPUSH
111634: LD_INT 20
111636: PPUSH
111637: CALL 61247 0 2
// end ;
111641: LD_VAR 0 4
111645: RET
